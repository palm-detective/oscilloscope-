
oscilliscope.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00016d4c  0800c000  0800c000  0001c000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000021c8  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08022d4c  08022d4c  00040760  2**0
                  CONTENTS
  4 .ARM          00000008  08022d4c  08022d4c  00032d4c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08022d54  08022d54  00040760  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08022d54  08022d54  00032d54  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08022d58  08022d58  00032d58  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000760  20000000  08022d5c  00040000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00006dc4  20000760  080234bc  00040760  2**2
                  ALLOC
 10 ._user_heap_stack 00000e04  20007524  080234bc  00047524  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00040760  2**0
                  CONTENTS, READONLY
 12 .debug_info   0003adde  00000000  00000000  00040790  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000687e  00000000  00000000  0007b56e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001d60  00000000  00000000  00081df0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001a80  00000000  00000000  00083b50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002aad1  00000000  00000000  000855d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00029fc7  00000000  00000000  000b00a1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e5183  00000000  00000000  000da068  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001bf1eb  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007948  00000000  00000000  001bf240  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800c000 <__do_global_dtors_aux>:
 800c000:	b510      	push	{r4, lr}
 800c002:	4c05      	ldr	r4, [pc, #20]	; (800c018 <__do_global_dtors_aux+0x18>)
 800c004:	7823      	ldrb	r3, [r4, #0]
 800c006:	b933      	cbnz	r3, 800c016 <__do_global_dtors_aux+0x16>
 800c008:	4b04      	ldr	r3, [pc, #16]	; (800c01c <__do_global_dtors_aux+0x1c>)
 800c00a:	b113      	cbz	r3, 800c012 <__do_global_dtors_aux+0x12>
 800c00c:	4804      	ldr	r0, [pc, #16]	; (800c020 <__do_global_dtors_aux+0x20>)
 800c00e:	f3af 8000 	nop.w
 800c012:	2301      	movs	r3, #1
 800c014:	7023      	strb	r3, [r4, #0]
 800c016:	bd10      	pop	{r4, pc}
 800c018:	20000760 	.word	0x20000760
 800c01c:	00000000 	.word	0x00000000
 800c020:	08022d34 	.word	0x08022d34

0800c024 <frame_dummy>:
 800c024:	b508      	push	{r3, lr}
 800c026:	4b03      	ldr	r3, [pc, #12]	; (800c034 <frame_dummy+0x10>)
 800c028:	b11b      	cbz	r3, 800c032 <frame_dummy+0xe>
 800c02a:	4903      	ldr	r1, [pc, #12]	; (800c038 <frame_dummy+0x14>)
 800c02c:	4803      	ldr	r0, [pc, #12]	; (800c03c <frame_dummy+0x18>)
 800c02e:	f3af 8000 	nop.w
 800c032:	bd08      	pop	{r3, pc}
 800c034:	00000000 	.word	0x00000000
 800c038:	20000764 	.word	0x20000764
 800c03c:	08022d34 	.word	0x08022d34

0800c040 <strlen>:
 800c040:	4603      	mov	r3, r0
 800c042:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c046:	2a00      	cmp	r2, #0
 800c048:	d1fb      	bne.n	800c042 <strlen+0x2>
 800c04a:	1a18      	subs	r0, r3, r0
 800c04c:	3801      	subs	r0, #1
 800c04e:	4770      	bx	lr

0800c050 <__aeabi_uldivmod>:
 800c050:	b953      	cbnz	r3, 800c068 <__aeabi_uldivmod+0x18>
 800c052:	b94a      	cbnz	r2, 800c068 <__aeabi_uldivmod+0x18>
 800c054:	2900      	cmp	r1, #0
 800c056:	bf08      	it	eq
 800c058:	2800      	cmpeq	r0, #0
 800c05a:	bf1c      	itt	ne
 800c05c:	f04f 31ff 	movne.w	r1, #4294967295
 800c060:	f04f 30ff 	movne.w	r0, #4294967295
 800c064:	f000 b96e 	b.w	800c344 <__aeabi_idiv0>
 800c068:	f1ad 0c08 	sub.w	ip, sp, #8
 800c06c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800c070:	f000 f806 	bl	800c080 <__udivmoddi4>
 800c074:	f8dd e004 	ldr.w	lr, [sp, #4]
 800c078:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800c07c:	b004      	add	sp, #16
 800c07e:	4770      	bx	lr

0800c080 <__udivmoddi4>:
 800c080:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c084:	9d08      	ldr	r5, [sp, #32]
 800c086:	4604      	mov	r4, r0
 800c088:	468c      	mov	ip, r1
 800c08a:	2b00      	cmp	r3, #0
 800c08c:	f040 8083 	bne.w	800c196 <__udivmoddi4+0x116>
 800c090:	428a      	cmp	r2, r1
 800c092:	4617      	mov	r7, r2
 800c094:	d947      	bls.n	800c126 <__udivmoddi4+0xa6>
 800c096:	fab2 f282 	clz	r2, r2
 800c09a:	b142      	cbz	r2, 800c0ae <__udivmoddi4+0x2e>
 800c09c:	f1c2 0020 	rsb	r0, r2, #32
 800c0a0:	fa24 f000 	lsr.w	r0, r4, r0
 800c0a4:	4091      	lsls	r1, r2
 800c0a6:	4097      	lsls	r7, r2
 800c0a8:	ea40 0c01 	orr.w	ip, r0, r1
 800c0ac:	4094      	lsls	r4, r2
 800c0ae:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800c0b2:	0c23      	lsrs	r3, r4, #16
 800c0b4:	fbbc f6f8 	udiv	r6, ip, r8
 800c0b8:	fa1f fe87 	uxth.w	lr, r7
 800c0bc:	fb08 c116 	mls	r1, r8, r6, ip
 800c0c0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800c0c4:	fb06 f10e 	mul.w	r1, r6, lr
 800c0c8:	4299      	cmp	r1, r3
 800c0ca:	d909      	bls.n	800c0e0 <__udivmoddi4+0x60>
 800c0cc:	18fb      	adds	r3, r7, r3
 800c0ce:	f106 30ff 	add.w	r0, r6, #4294967295
 800c0d2:	f080 8119 	bcs.w	800c308 <__udivmoddi4+0x288>
 800c0d6:	4299      	cmp	r1, r3
 800c0d8:	f240 8116 	bls.w	800c308 <__udivmoddi4+0x288>
 800c0dc:	3e02      	subs	r6, #2
 800c0de:	443b      	add	r3, r7
 800c0e0:	1a5b      	subs	r3, r3, r1
 800c0e2:	b2a4      	uxth	r4, r4
 800c0e4:	fbb3 f0f8 	udiv	r0, r3, r8
 800c0e8:	fb08 3310 	mls	r3, r8, r0, r3
 800c0ec:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800c0f0:	fb00 fe0e 	mul.w	lr, r0, lr
 800c0f4:	45a6      	cmp	lr, r4
 800c0f6:	d909      	bls.n	800c10c <__udivmoddi4+0x8c>
 800c0f8:	193c      	adds	r4, r7, r4
 800c0fa:	f100 33ff 	add.w	r3, r0, #4294967295
 800c0fe:	f080 8105 	bcs.w	800c30c <__udivmoddi4+0x28c>
 800c102:	45a6      	cmp	lr, r4
 800c104:	f240 8102 	bls.w	800c30c <__udivmoddi4+0x28c>
 800c108:	3802      	subs	r0, #2
 800c10a:	443c      	add	r4, r7
 800c10c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800c110:	eba4 040e 	sub.w	r4, r4, lr
 800c114:	2600      	movs	r6, #0
 800c116:	b11d      	cbz	r5, 800c120 <__udivmoddi4+0xa0>
 800c118:	40d4      	lsrs	r4, r2
 800c11a:	2300      	movs	r3, #0
 800c11c:	e9c5 4300 	strd	r4, r3, [r5]
 800c120:	4631      	mov	r1, r6
 800c122:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c126:	b902      	cbnz	r2, 800c12a <__udivmoddi4+0xaa>
 800c128:	deff      	udf	#255	; 0xff
 800c12a:	fab2 f282 	clz	r2, r2
 800c12e:	2a00      	cmp	r2, #0
 800c130:	d150      	bne.n	800c1d4 <__udivmoddi4+0x154>
 800c132:	1bcb      	subs	r3, r1, r7
 800c134:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800c138:	fa1f f887 	uxth.w	r8, r7
 800c13c:	2601      	movs	r6, #1
 800c13e:	fbb3 fcfe 	udiv	ip, r3, lr
 800c142:	0c21      	lsrs	r1, r4, #16
 800c144:	fb0e 331c 	mls	r3, lr, ip, r3
 800c148:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800c14c:	fb08 f30c 	mul.w	r3, r8, ip
 800c150:	428b      	cmp	r3, r1
 800c152:	d907      	bls.n	800c164 <__udivmoddi4+0xe4>
 800c154:	1879      	adds	r1, r7, r1
 800c156:	f10c 30ff 	add.w	r0, ip, #4294967295
 800c15a:	d202      	bcs.n	800c162 <__udivmoddi4+0xe2>
 800c15c:	428b      	cmp	r3, r1
 800c15e:	f200 80e9 	bhi.w	800c334 <__udivmoddi4+0x2b4>
 800c162:	4684      	mov	ip, r0
 800c164:	1ac9      	subs	r1, r1, r3
 800c166:	b2a3      	uxth	r3, r4
 800c168:	fbb1 f0fe 	udiv	r0, r1, lr
 800c16c:	fb0e 1110 	mls	r1, lr, r0, r1
 800c170:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 800c174:	fb08 f800 	mul.w	r8, r8, r0
 800c178:	45a0      	cmp	r8, r4
 800c17a:	d907      	bls.n	800c18c <__udivmoddi4+0x10c>
 800c17c:	193c      	adds	r4, r7, r4
 800c17e:	f100 33ff 	add.w	r3, r0, #4294967295
 800c182:	d202      	bcs.n	800c18a <__udivmoddi4+0x10a>
 800c184:	45a0      	cmp	r8, r4
 800c186:	f200 80d9 	bhi.w	800c33c <__udivmoddi4+0x2bc>
 800c18a:	4618      	mov	r0, r3
 800c18c:	eba4 0408 	sub.w	r4, r4, r8
 800c190:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800c194:	e7bf      	b.n	800c116 <__udivmoddi4+0x96>
 800c196:	428b      	cmp	r3, r1
 800c198:	d909      	bls.n	800c1ae <__udivmoddi4+0x12e>
 800c19a:	2d00      	cmp	r5, #0
 800c19c:	f000 80b1 	beq.w	800c302 <__udivmoddi4+0x282>
 800c1a0:	2600      	movs	r6, #0
 800c1a2:	e9c5 0100 	strd	r0, r1, [r5]
 800c1a6:	4630      	mov	r0, r6
 800c1a8:	4631      	mov	r1, r6
 800c1aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c1ae:	fab3 f683 	clz	r6, r3
 800c1b2:	2e00      	cmp	r6, #0
 800c1b4:	d14a      	bne.n	800c24c <__udivmoddi4+0x1cc>
 800c1b6:	428b      	cmp	r3, r1
 800c1b8:	d302      	bcc.n	800c1c0 <__udivmoddi4+0x140>
 800c1ba:	4282      	cmp	r2, r0
 800c1bc:	f200 80b8 	bhi.w	800c330 <__udivmoddi4+0x2b0>
 800c1c0:	1a84      	subs	r4, r0, r2
 800c1c2:	eb61 0103 	sbc.w	r1, r1, r3
 800c1c6:	2001      	movs	r0, #1
 800c1c8:	468c      	mov	ip, r1
 800c1ca:	2d00      	cmp	r5, #0
 800c1cc:	d0a8      	beq.n	800c120 <__udivmoddi4+0xa0>
 800c1ce:	e9c5 4c00 	strd	r4, ip, [r5]
 800c1d2:	e7a5      	b.n	800c120 <__udivmoddi4+0xa0>
 800c1d4:	f1c2 0320 	rsb	r3, r2, #32
 800c1d8:	fa20 f603 	lsr.w	r6, r0, r3
 800c1dc:	4097      	lsls	r7, r2
 800c1de:	fa01 f002 	lsl.w	r0, r1, r2
 800c1e2:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800c1e6:	40d9      	lsrs	r1, r3
 800c1e8:	4330      	orrs	r0, r6
 800c1ea:	0c03      	lsrs	r3, r0, #16
 800c1ec:	fbb1 f6fe 	udiv	r6, r1, lr
 800c1f0:	fa1f f887 	uxth.w	r8, r7
 800c1f4:	fb0e 1116 	mls	r1, lr, r6, r1
 800c1f8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800c1fc:	fb06 f108 	mul.w	r1, r6, r8
 800c200:	4299      	cmp	r1, r3
 800c202:	fa04 f402 	lsl.w	r4, r4, r2
 800c206:	d909      	bls.n	800c21c <__udivmoddi4+0x19c>
 800c208:	18fb      	adds	r3, r7, r3
 800c20a:	f106 3cff 	add.w	ip, r6, #4294967295
 800c20e:	f080 808d 	bcs.w	800c32c <__udivmoddi4+0x2ac>
 800c212:	4299      	cmp	r1, r3
 800c214:	f240 808a 	bls.w	800c32c <__udivmoddi4+0x2ac>
 800c218:	3e02      	subs	r6, #2
 800c21a:	443b      	add	r3, r7
 800c21c:	1a5b      	subs	r3, r3, r1
 800c21e:	b281      	uxth	r1, r0
 800c220:	fbb3 f0fe 	udiv	r0, r3, lr
 800c224:	fb0e 3310 	mls	r3, lr, r0, r3
 800c228:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800c22c:	fb00 f308 	mul.w	r3, r0, r8
 800c230:	428b      	cmp	r3, r1
 800c232:	d907      	bls.n	800c244 <__udivmoddi4+0x1c4>
 800c234:	1879      	adds	r1, r7, r1
 800c236:	f100 3cff 	add.w	ip, r0, #4294967295
 800c23a:	d273      	bcs.n	800c324 <__udivmoddi4+0x2a4>
 800c23c:	428b      	cmp	r3, r1
 800c23e:	d971      	bls.n	800c324 <__udivmoddi4+0x2a4>
 800c240:	3802      	subs	r0, #2
 800c242:	4439      	add	r1, r7
 800c244:	1acb      	subs	r3, r1, r3
 800c246:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800c24a:	e778      	b.n	800c13e <__udivmoddi4+0xbe>
 800c24c:	f1c6 0c20 	rsb	ip, r6, #32
 800c250:	fa03 f406 	lsl.w	r4, r3, r6
 800c254:	fa22 f30c 	lsr.w	r3, r2, ip
 800c258:	431c      	orrs	r4, r3
 800c25a:	fa20 f70c 	lsr.w	r7, r0, ip
 800c25e:	fa01 f306 	lsl.w	r3, r1, r6
 800c262:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 800c266:	fa21 f10c 	lsr.w	r1, r1, ip
 800c26a:	431f      	orrs	r7, r3
 800c26c:	0c3b      	lsrs	r3, r7, #16
 800c26e:	fbb1 f9fe 	udiv	r9, r1, lr
 800c272:	fa1f f884 	uxth.w	r8, r4
 800c276:	fb0e 1119 	mls	r1, lr, r9, r1
 800c27a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800c27e:	fb09 fa08 	mul.w	sl, r9, r8
 800c282:	458a      	cmp	sl, r1
 800c284:	fa02 f206 	lsl.w	r2, r2, r6
 800c288:	fa00 f306 	lsl.w	r3, r0, r6
 800c28c:	d908      	bls.n	800c2a0 <__udivmoddi4+0x220>
 800c28e:	1861      	adds	r1, r4, r1
 800c290:	f109 30ff 	add.w	r0, r9, #4294967295
 800c294:	d248      	bcs.n	800c328 <__udivmoddi4+0x2a8>
 800c296:	458a      	cmp	sl, r1
 800c298:	d946      	bls.n	800c328 <__udivmoddi4+0x2a8>
 800c29a:	f1a9 0902 	sub.w	r9, r9, #2
 800c29e:	4421      	add	r1, r4
 800c2a0:	eba1 010a 	sub.w	r1, r1, sl
 800c2a4:	b2bf      	uxth	r7, r7
 800c2a6:	fbb1 f0fe 	udiv	r0, r1, lr
 800c2aa:	fb0e 1110 	mls	r1, lr, r0, r1
 800c2ae:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800c2b2:	fb00 f808 	mul.w	r8, r0, r8
 800c2b6:	45b8      	cmp	r8, r7
 800c2b8:	d907      	bls.n	800c2ca <__udivmoddi4+0x24a>
 800c2ba:	19e7      	adds	r7, r4, r7
 800c2bc:	f100 31ff 	add.w	r1, r0, #4294967295
 800c2c0:	d22e      	bcs.n	800c320 <__udivmoddi4+0x2a0>
 800c2c2:	45b8      	cmp	r8, r7
 800c2c4:	d92c      	bls.n	800c320 <__udivmoddi4+0x2a0>
 800c2c6:	3802      	subs	r0, #2
 800c2c8:	4427      	add	r7, r4
 800c2ca:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800c2ce:	eba7 0708 	sub.w	r7, r7, r8
 800c2d2:	fba0 8902 	umull	r8, r9, r0, r2
 800c2d6:	454f      	cmp	r7, r9
 800c2d8:	46c6      	mov	lr, r8
 800c2da:	4649      	mov	r1, r9
 800c2dc:	d31a      	bcc.n	800c314 <__udivmoddi4+0x294>
 800c2de:	d017      	beq.n	800c310 <__udivmoddi4+0x290>
 800c2e0:	b15d      	cbz	r5, 800c2fa <__udivmoddi4+0x27a>
 800c2e2:	ebb3 020e 	subs.w	r2, r3, lr
 800c2e6:	eb67 0701 	sbc.w	r7, r7, r1
 800c2ea:	fa07 fc0c 	lsl.w	ip, r7, ip
 800c2ee:	40f2      	lsrs	r2, r6
 800c2f0:	ea4c 0202 	orr.w	r2, ip, r2
 800c2f4:	40f7      	lsrs	r7, r6
 800c2f6:	e9c5 2700 	strd	r2, r7, [r5]
 800c2fa:	2600      	movs	r6, #0
 800c2fc:	4631      	mov	r1, r6
 800c2fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c302:	462e      	mov	r6, r5
 800c304:	4628      	mov	r0, r5
 800c306:	e70b      	b.n	800c120 <__udivmoddi4+0xa0>
 800c308:	4606      	mov	r6, r0
 800c30a:	e6e9      	b.n	800c0e0 <__udivmoddi4+0x60>
 800c30c:	4618      	mov	r0, r3
 800c30e:	e6fd      	b.n	800c10c <__udivmoddi4+0x8c>
 800c310:	4543      	cmp	r3, r8
 800c312:	d2e5      	bcs.n	800c2e0 <__udivmoddi4+0x260>
 800c314:	ebb8 0e02 	subs.w	lr, r8, r2
 800c318:	eb69 0104 	sbc.w	r1, r9, r4
 800c31c:	3801      	subs	r0, #1
 800c31e:	e7df      	b.n	800c2e0 <__udivmoddi4+0x260>
 800c320:	4608      	mov	r0, r1
 800c322:	e7d2      	b.n	800c2ca <__udivmoddi4+0x24a>
 800c324:	4660      	mov	r0, ip
 800c326:	e78d      	b.n	800c244 <__udivmoddi4+0x1c4>
 800c328:	4681      	mov	r9, r0
 800c32a:	e7b9      	b.n	800c2a0 <__udivmoddi4+0x220>
 800c32c:	4666      	mov	r6, ip
 800c32e:	e775      	b.n	800c21c <__udivmoddi4+0x19c>
 800c330:	4630      	mov	r0, r6
 800c332:	e74a      	b.n	800c1ca <__udivmoddi4+0x14a>
 800c334:	f1ac 0c02 	sub.w	ip, ip, #2
 800c338:	4439      	add	r1, r7
 800c33a:	e713      	b.n	800c164 <__udivmoddi4+0xe4>
 800c33c:	3802      	subs	r0, #2
 800c33e:	443c      	add	r4, r7
 800c340:	e724      	b.n	800c18c <__udivmoddi4+0x10c>
 800c342:	bf00      	nop

0800c344 <__aeabi_idiv0>:
 800c344:	4770      	bx	lr
 800c346:	bf00      	nop

0800c348 <BIOS_Info>:

/*******************************************************************************
 Info :  Ӳ���豸��Ϣ
*******************************************************************************/
unsigned BIOS_Info(char Item)
{
 800c348:	b480      	push	{r7}
 800c34a:	b083      	sub	sp, #12
 800c34c:	af00      	add	r7, sp, #0
 800c34e:	4603      	mov	r3, r0
 800c350:	71fb      	strb	r3, [r7, #7]
  switch (Item){
 800c352:	79fb      	ldrb	r3, [r7, #7]
 800c354:	2b00      	cmp	r3, #0
 800c356:	d103      	bne.n	800c360 <BIOS_Info+0x18>
    case CHA_CNT:
    	return __HAL_DMA_GET_COUNTER(&hdma_adc1);  /*(u16)DMA_CH_A->CNDTR*/
 800c358:	4b05      	ldr	r3, [pc, #20]	; (800c370 <BIOS_Info+0x28>)
 800c35a:	681b      	ldr	r3, [r3, #0]
 800c35c:	685b      	ldr	r3, [r3, #4]
 800c35e:	e000      	b.n	800c362 <BIOS_Info+0x1a>
/*    case SIN_TAB: return (u32)SIN_DATA;
    case TRG_TAB: return (u32)TRG_DATA;
    case SAW_TAB: return (u32)SAW_DATA;    */
    default:
    	return 0;
 800c360:	2300      	movs	r3, #0
  }
}
 800c362:	4618      	mov	r0, r3
 800c364:	370c      	adds	r7, #12
 800c366:	46bd      	mov	sp, r7
 800c368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c36c:	4770      	bx	lr
 800c36e:	bf00      	nop
 800c370:	20006b0c 	.word	0x20006b0c

0800c374 <BIOS_Ctrl>:
/*******************************************************************************
 DevCtrl:  Ӳ���豸����
*******************************************************************************/
void BIOS_Ctrl(char Item, unsigned Val)
{
 800c374:	b580      	push	{r7, lr}
 800c376:	b088      	sub	sp, #32
 800c378:	af00      	add	r7, sp, #0
 800c37a:	4603      	mov	r3, r0
 800c37c:	6039      	str	r1, [r7, #0]
 800c37e:	71fb      	strb	r3, [r7, #7]
  GPIO_InitTypeDef         GPIO_InitStructure;

  switch (Item){
 800c380:	79fb      	ldrb	r3, [r7, #7]
 800c382:	2b08      	cmp	r3, #8
 800c384:	f200 810d 	bhi.w	800c5a2 <BIOS_Ctrl+0x22e>
 800c388:	a201      	add	r2, pc, #4	; (adr r2, 800c390 <BIOS_Ctrl+0x1c>)
 800c38a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c38e:	bf00      	nop
 800c390:	0800c4d5 	.word	0x0800c4d5
 800c394:	0800c4b9 	.word	0x0800c4b9
 800c398:	0800c4c9 	.word	0x0800c4c9
 800c39c:	0800c5a3 	.word	0x0800c5a3
 800c3a0:	0800c3b5 	.word	0x0800c3b5
 800c3a4:	0800c3f7 	.word	0x0800c3f7
 800c3a8:	0800c421 	.word	0x0800c421
 800c3ac:	0800c449 	.word	0x0800c449
 800c3b0:	0800c4ab 	.word	0x0800c4ab
    case SMPL_ST: if(Val == DISABLE)
 800c3b4:	683b      	ldr	r3, [r7, #0]
 800c3b6:	2b00      	cmp	r3, #0
 800c3b8:	f000 80f5 	beq.w	800c5a6 <BIOS_Ctrl+0x232>
    			  {
                    /*DMA1_Channel1->CCR &= (~ENABLE);*/
                  }
    			  else
    				  if(Val == ENABLE)
 800c3bc:	683b      	ldr	r3, [r7, #0]
 800c3be:	2b01      	cmp	r3, #1
 800c3c0:	f040 80f1 	bne.w	800c5a6 <BIOS_Ctrl+0x232>
    				  {
                   /* DMA1_Channel1->CCR |= ENABLE; */
                    __HAL_ADC_ENABLE(&hadc1);  //ADC1->CR2 |= 0x00000001; //AD_ON
 800c3c4:	4b7b      	ldr	r3, [pc, #492]	; (800c5b4 <BIOS_Ctrl+0x240>)
 800c3c6:	681b      	ldr	r3, [r3, #0]
 800c3c8:	689a      	ldr	r2, [r3, #8]
 800c3ca:	4b7a      	ldr	r3, [pc, #488]	; (800c5b4 <BIOS_Ctrl+0x240>)
 800c3cc:	681b      	ldr	r3, [r3, #0]
 800c3ce:	f042 0201 	orr.w	r2, r2, #1
 800c3d2:	609a      	str	r2, [r3, #8]
                    __HAL_ADC_ENABLE(&hadc2);  //ADC2->CR2 |= 0x00000001; //AD_ON
 800c3d4:	4b78      	ldr	r3, [pc, #480]	; (800c5b8 <BIOS_Ctrl+0x244>)
 800c3d6:	681b      	ldr	r3, [r3, #0]
 800c3d8:	689a      	ldr	r2, [r3, #8]
 800c3da:	4b77      	ldr	r3, [pc, #476]	; (800c5b8 <BIOS_Ctrl+0x244>)
 800c3dc:	681b      	ldr	r3, [r3, #0]
 800c3de:	f042 0201 	orr.w	r2, r2, #1
 800c3e2:	609a      	str	r2, [r3, #8]
                    __HAL_TIM_ENABLE(&htim1);  /*TIM1->CR1 = 0x0081; */
 800c3e4:	4b75      	ldr	r3, [pc, #468]	; (800c5bc <BIOS_Ctrl+0x248>)
 800c3e6:	681b      	ldr	r3, [r3, #0]
 800c3e8:	681a      	ldr	r2, [r3, #0]
 800c3ea:	4b74      	ldr	r3, [pc, #464]	; (800c5bc <BIOS_Ctrl+0x248>)
 800c3ec:	681b      	ldr	r3, [r3, #0]
 800c3ee:	f042 0201 	orr.w	r2, r2, #1
 800c3f2:	601a      	str	r2, [r3, #0]
                    if(Val == INTERLEAVE)
                    {
                      DMA1_Channel1->CCR = 0x3A80;
                    } */
                  }
    			  break;
 800c3f4:	e0d7      	b.n	800c5a6 <BIOS_Ctrl+0x232>

    case SMPLTIM:
    			  octim1.Pulse = (Val+1)/2;
 800c3f6:	683b      	ldr	r3, [r7, #0]
 800c3f8:	3301      	adds	r3, #1
 800c3fa:	085b      	lsrs	r3, r3, #1
 800c3fc:	4a70      	ldr	r2, [pc, #448]	; (800c5c0 <BIOS_Ctrl+0x24c>)
 800c3fe:	6053      	str	r3, [r2, #4]
    			  HAL_TIM_OC_ConfigChannel(&htim1, &octim1, 1 );
 800c400:	2201      	movs	r2, #1
 800c402:	496f      	ldr	r1, [pc, #444]	; (800c5c0 <BIOS_Ctrl+0x24c>)
 800c404:	486d      	ldr	r0, [pc, #436]	; (800c5bc <BIOS_Ctrl+0x248>)
 800c406:	f010 fe87 	bl	801d118 <HAL_TIM_OC_ConfigChannel>
    			  htim1.Init.Prescaler = 0;
 800c40a:	4b6c      	ldr	r3, [pc, #432]	; (800c5bc <BIOS_Ctrl+0x248>)
 800c40c:	2200      	movs	r2, #0
 800c40e:	605a      	str	r2, [r3, #4]
    			  htim1.Init.Period = Val -1;
 800c410:	683b      	ldr	r3, [r7, #0]
 800c412:	3b01      	subs	r3, #1
 800c414:	4a69      	ldr	r2, [pc, #420]	; (800c5bc <BIOS_Ctrl+0x248>)
 800c416:	60d3      	str	r3, [r2, #12]
    			  HAL_TIM_Base_Init(&htim1);
 800c418:	4868      	ldr	r0, [pc, #416]	; (800c5bc <BIOS_Ctrl+0x248>)
 800c41a:	f010 fcb5 	bl	801cd88 <HAL_TIM_Base_Init>
                  break;
 800c41e:	e0c5      	b.n	800c5ac <BIOS_Ctrl+0x238>

    case SMPLNUM:
    			  __HAL_TIM_URS_DISABLE(&htim1);
 800c420:	4b66      	ldr	r3, [pc, #408]	; (800c5bc <BIOS_Ctrl+0x248>)
 800c422:	681b      	ldr	r3, [r3, #0]
 800c424:	681a      	ldr	r2, [r3, #0]
 800c426:	4b65      	ldr	r3, [pc, #404]	; (800c5bc <BIOS_Ctrl+0x248>)
 800c428:	681b      	ldr	r3, [r3, #0]
 800c42a:	f022 0204 	bic.w	r2, r2, #4
 800c42e:	601a      	str	r2, [r3, #0]
    			  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800c430:	4b62      	ldr	r3, [pc, #392]	; (800c5bc <BIOS_Ctrl+0x248>)
 800c432:	2200      	movs	r2, #0
 800c434:	609a      	str	r2, [r3, #8]
    			  HAL_TIM_Base_Init(&htim1);
 800c436:	4861      	ldr	r0, [pc, #388]	; (800c5bc <BIOS_Ctrl+0x248>)
 800c438:	f010 fca6 	bl	801cd88 <HAL_TIM_Base_Init>
    			  __HAL_DMA_SET_COUNTER( &hdma_adc1, Val);  /* DMA_CH_A->CNDTR = (u32)Val;    */
 800c43c:	683b      	ldr	r3, [r7, #0]
 800c43e:	b29a      	uxth	r2, r3
 800c440:	4b60      	ldr	r3, [pc, #384]	; (800c5c4 <BIOS_Ctrl+0x250>)
 800c442:	681b      	ldr	r3, [r3, #0]
 800c444:	605a      	str	r2, [r3, #4]
                  break;
 800c446:	e0b1      	b.n	800c5ac <BIOS_Ctrl+0x238>

    case AiRANGE: if(Val & DC)
 800c448:	683b      	ldr	r3, [r7, #0]
 800c44a:	f003 0302 	and.w	r3, r3, #2
 800c44e:	2b00      	cmp	r3, #0
 800c450:	d005      	beq.n	800c45e <BIOS_Ctrl+0xea>
    				  HAL_GPIO_WritePin(Az_GPIO_Port, Az_Pin,GPIO_PIN_SET);  // AZ_HIGH;
 800c452:	2201      	movs	r2, #1
 800c454:	2110      	movs	r1, #16
 800c456:	485c      	ldr	r0, [pc, #368]	; (800c5c8 <BIOS_Ctrl+0x254>)
 800c458:	f00d fb46 	bl	8019ae8 <HAL_GPIO_WritePin>
 800c45c:	e004      	b.n	800c468 <BIOS_Ctrl+0xf4>
                  else
                	  HAL_GPIO_WritePin(Az_GPIO_Port, Az_Pin,GPIO_PIN_RESET);  //AZ_LOW;   CH_A_AC
 800c45e:	2200      	movs	r2, #0
 800c460:	2110      	movs	r1, #16
 800c462:	4859      	ldr	r0, [pc, #356]	; (800c5c8 <BIOS_Ctrl+0x254>)
 800c464:	f00d fb40 	bl	8019ae8 <HAL_GPIO_WritePin>
                  if(Val & HV)
 800c468:	683b      	ldr	r3, [r7, #0]
 800c46a:	f003 0301 	and.w	r3, r3, #1
 800c46e:	2b00      	cmp	r3, #0
 800c470:	d005      	beq.n	800c47e <BIOS_Ctrl+0x10a>
                	  HAL_GPIO_WritePin(Ay_GPIO_Port, Ay_Pin,GPIO_PIN_SET);  //AY_HIGH;  CH_A_HV
 800c472:	2201      	movs	r2, #1
 800c474:	2120      	movs	r1, #32
 800c476:	4854      	ldr	r0, [pc, #336]	; (800c5c8 <BIOS_Ctrl+0x254>)
 800c478:	f00d fb36 	bl	8019ae8 <HAL_GPIO_WritePin>
 800c47c:	e004      	b.n	800c488 <BIOS_Ctrl+0x114>
                  else
                	  HAL_GPIO_WritePin(Ay_GPIO_Port, Ay_Pin,GPIO_PIN_RESET);  //AY_LOW;   CH_A_LV
 800c47e:	2200      	movs	r2, #0
 800c480:	2120      	movs	r1, #32
 800c482:	4851      	ldr	r0, [pc, #324]	; (800c5c8 <BIOS_Ctrl+0x254>)
 800c484:	f00d fb30 	bl	8019ae8 <HAL_GPIO_WritePin>
                  if(Val & ACT)
 800c488:	683b      	ldr	r3, [r7, #0]
 800c48a:	f003 0304 	and.w	r3, r3, #4
 800c48e:	2b00      	cmp	r3, #0
 800c490:	d005      	beq.n	800c49e <BIOS_Ctrl+0x12a>
                	  HAL_GPIO_WritePin(Ax_GPIO_Port, Ax_Pin,GPIO_PIN_SET);  //AX_HIGH;  CH_A_ACT
 800c492:	2201      	movs	r2, #1
 800c494:	2101      	movs	r1, #1
 800c496:	484d      	ldr	r0, [pc, #308]	; (800c5cc <BIOS_Ctrl+0x258>)
 800c498:	f00d fb26 	bl	8019ae8 <HAL_GPIO_WritePin>
                  else
                	  HAL_GPIO_WritePin(Ax_GPIO_Port, Ax_Pin,GPIO_PIN_RESET);  //AX_LOW;   CH_A_GND
                  break;
 800c49c:	e086      	b.n	800c5ac <BIOS_Ctrl+0x238>
                	  HAL_GPIO_WritePin(Ax_GPIO_Port, Ax_Pin,GPIO_PIN_RESET);  //AX_LOW;   CH_A_GND
 800c49e:	2200      	movs	r2, #0
 800c4a0:	2101      	movs	r1, #1
 800c4a2:	484a      	ldr	r0, [pc, #296]	; (800c5cc <BIOS_Ctrl+0x258>)
 800c4a4:	f00d fb20 	bl	8019ae8 <HAL_GPIO_WritePin>
                  break;
 800c4a8:	e080      	b.n	800c5ac <BIOS_Ctrl+0x238>

    case AOFFSET: HAL_DAC_SetValue( &hdac, DAC_CHANNEL_2, DAC_ALIGN_12B_R, Val);  /*DAC->DHR12R2  = (u16)Val; */
 800c4aa:	683b      	ldr	r3, [r7, #0]
 800c4ac:	2200      	movs	r2, #0
 800c4ae:	2110      	movs	r1, #16
 800c4b0:	4847      	ldr	r0, [pc, #284]	; (800c5d0 <BIOS_Ctrl+0x25c>)
 800c4b2:	f00c fb04 	bl	8018abe <HAL_DAC_SetValue>
                  break;
 800c4b6:	e079      	b.n	800c5ac <BIOS_Ctrl+0x238>

    case DAC_TIM:
    			  htim7.Init.Period = Val-1;
 800c4b8:	683b      	ldr	r3, [r7, #0]
 800c4ba:	3b01      	subs	r3, #1
 800c4bc:	4a45      	ldr	r2, [pc, #276]	; (800c5d4 <BIOS_Ctrl+0x260>)
 800c4be:	60d3      	str	r3, [r2, #12]
    			  HAL_TIM_Base_Init(&htim7);
 800c4c0:	4844      	ldr	r0, [pc, #272]	; (800c5d4 <BIOS_Ctrl+0x260>)
 800c4c2:	f010 fc61 	bl	801cd88 <HAL_TIM_Base_Init>
    			  break;
 800c4c6:	e071      	b.n	800c5ac <BIOS_Ctrl+0x238>
                  OUT_DMA->CPAR  = (u32)&DAC->DHR12R1;
                  OUT_DMA->CMAR  = (u32)Val; */
                  break;

    case OUT_CNT:
    			  __HAL_DMA_SET_COUNTER( &hdma_dac1, Val);  /*OUT_DMA->CNDTR = (u16)Val; */
 800c4c8:	683b      	ldr	r3, [r7, #0]
 800c4ca:	b29a      	uxth	r2, r3
 800c4cc:	4b42      	ldr	r3, [pc, #264]	; (800c5d8 <BIOS_Ctrl+0x264>)
 800c4ce:	681b      	ldr	r3, [r3, #0]
 800c4d0:	605a      	str	r2, [r3, #4]
    			  break;
 800c4d2:	e06b      	b.n	800c5ac <BIOS_Ctrl+0x238>

    case OUT_MOD:
      GPIO_InitStructure.Speed = GPIO_SPEED_FREQ_MEDIUM;
 800c4d4:	2301      	movs	r3, #1
 800c4d6:	61bb      	str	r3, [r7, #24]
 800c4d8:	683b      	ldr	r3, [r7, #0]
 800c4da:	2b04      	cmp	r3, #4
 800c4dc:	d009      	beq.n	800c4f2 <BIOS_Ctrl+0x17e>
 800c4de:	683b      	ldr	r3, [r7, #0]
 800c4e0:	2b04      	cmp	r3, #4
 800c4e2:	d862      	bhi.n	800c5aa <BIOS_Ctrl+0x236>
 800c4e4:	683b      	ldr	r3, [r7, #0]
 800c4e6:	2b00      	cmp	r3, #0
 800c4e8:	d03d      	beq.n	800c566 <BIOS_Ctrl+0x1f2>
 800c4ea:	683b      	ldr	r3, [r7, #0]
 800c4ec:	2b02      	cmp	r3, #2
 800c4ee:	d01d      	beq.n	800c52c <BIOS_Ctrl+0x1b8>
                                  GPIO_InitStructure.Pin   = Fo4_Pin ;
                                  GPIO_InitStructure.Mode  = GPIO_MODE_INPUT;
                                  HAL_GPIO_Init(Fo4_GPIO_Port, &GPIO_InitStructure);
                                  break;
                  }
                  break;
 800c4f0:	e05b      	b.n	800c5aa <BIOS_Ctrl+0x236>
                    		      __HAL_DAC_DISABLE(&hdac, DAC_CHANNEL_1);
 800c4f2:	4b37      	ldr	r3, [pc, #220]	; (800c5d0 <BIOS_Ctrl+0x25c>)
 800c4f4:	681b      	ldr	r3, [r3, #0]
 800c4f6:	681a      	ldr	r2, [r3, #0]
 800c4f8:	4b35      	ldr	r3, [pc, #212]	; (800c5d0 <BIOS_Ctrl+0x25c>)
 800c4fa:	681b      	ldr	r3, [r3, #0]
 800c4fc:	f022 0201 	bic.w	r2, r2, #1
 800c500:	601a      	str	r2, [r3, #0]
                                  GPIO_InitStructure.Pin   = Fo2_Pin;
 800c502:	2304      	movs	r3, #4
 800c504:	60fb      	str	r3, [r7, #12]
                                  GPIO_InitStructure.Mode  = GPIO_MODE_AF_PP;
 800c506:	2302      	movs	r3, #2
 800c508:	613b      	str	r3, [r7, #16]
                                  HAL_GPIO_Init(Fo2_GPIO_Port, &GPIO_InitStructure);
 800c50a:	f107 030c 	add.w	r3, r7, #12
 800c50e:	4619      	mov	r1, r3
 800c510:	4832      	ldr	r0, [pc, #200]	; (800c5dc <BIOS_Ctrl+0x268>)
 800c512:	f00d f93d 	bl	8019790 <HAL_GPIO_Init>
                                  GPIO_InitStructure.Pin   = Fo4_Pin ;
 800c516:	2310      	movs	r3, #16
 800c518:	60fb      	str	r3, [r7, #12]
                                  GPIO_InitStructure.Mode  = GPIO_MODE_INPUT;
 800c51a:	2300      	movs	r3, #0
 800c51c:	613b      	str	r3, [r7, #16]
                                  HAL_GPIO_Init(Fo4_GPIO_Port, &GPIO_InitStructure);
 800c51e:	f107 030c 	add.w	r3, r7, #12
 800c522:	4619      	mov	r1, r3
 800c524:	482d      	ldr	r0, [pc, #180]	; (800c5dc <BIOS_Ctrl+0x268>)
 800c526:	f00d f933 	bl	8019790 <HAL_GPIO_Init>
                                  break;
 800c52a:	e039      	b.n	800c5a0 <BIOS_Ctrl+0x22c>
                    			  GPIO_InitStructure.Pin   = Fo2_Pin ;
 800c52c:	2304      	movs	r3, #4
 800c52e:	60fb      	str	r3, [r7, #12]
                                  GPIO_InitStructure.Mode  = GPIO_MODE_INPUT;
 800c530:	2300      	movs	r3, #0
 800c532:	613b      	str	r3, [r7, #16]
                                  HAL_GPIO_Init(Fo2_GPIO_Port, &GPIO_InitStructure);
 800c534:	f107 030c 	add.w	r3, r7, #12
 800c538:	4619      	mov	r1, r3
 800c53a:	4828      	ldr	r0, [pc, #160]	; (800c5dc <BIOS_Ctrl+0x268>)
 800c53c:	f00d f928 	bl	8019790 <HAL_GPIO_Init>
                                  GPIO_InitStructure.Pin   = Fo4_Pin ;
 800c540:	2310      	movs	r3, #16
 800c542:	60fb      	str	r3, [r7, #12]
                                  GPIO_InitStructure.Mode  = GPIO_MODE_ANALOG;
 800c544:	2303      	movs	r3, #3
 800c546:	613b      	str	r3, [r7, #16]
                                  HAL_GPIO_Init(Fo4_GPIO_Port, &GPIO_InitStructure);
 800c548:	f107 030c 	add.w	r3, r7, #12
 800c54c:	4619      	mov	r1, r3
 800c54e:	4823      	ldr	r0, [pc, #140]	; (800c5dc <BIOS_Ctrl+0x268>)
 800c550:	f00d f91e 	bl	8019790 <HAL_GPIO_Init>
                                  __HAL_DAC_ENABLE(&hdac, DAC_CHANNEL_1);
 800c554:	4b1e      	ldr	r3, [pc, #120]	; (800c5d0 <BIOS_Ctrl+0x25c>)
 800c556:	681b      	ldr	r3, [r3, #0]
 800c558:	681a      	ldr	r2, [r3, #0]
 800c55a:	4b1d      	ldr	r3, [pc, #116]	; (800c5d0 <BIOS_Ctrl+0x25c>)
 800c55c:	681b      	ldr	r3, [r3, #0]
 800c55e:	f042 0201 	orr.w	r2, r2, #1
 800c562:	601a      	str	r2, [r3, #0]
                                  break;
 800c564:	e01c      	b.n	800c5a0 <BIOS_Ctrl+0x22c>
                    		      __HAL_DAC_DISABLE(&hdac, DAC_CHANNEL_1);
 800c566:	4b1a      	ldr	r3, [pc, #104]	; (800c5d0 <BIOS_Ctrl+0x25c>)
 800c568:	681b      	ldr	r3, [r3, #0]
 800c56a:	681a      	ldr	r2, [r3, #0]
 800c56c:	4b18      	ldr	r3, [pc, #96]	; (800c5d0 <BIOS_Ctrl+0x25c>)
 800c56e:	681b      	ldr	r3, [r3, #0]
 800c570:	f022 0201 	bic.w	r2, r2, #1
 800c574:	601a      	str	r2, [r3, #0]
                                  GPIO_InitStructure.Pin   = Fo2_Pin ;
 800c576:	2304      	movs	r3, #4
 800c578:	60fb      	str	r3, [r7, #12]
                                  GPIO_InitStructure.Mode  = GPIO_MODE_AF_PP;
 800c57a:	2302      	movs	r3, #2
 800c57c:	613b      	str	r3, [r7, #16]
                                  HAL_GPIO_Init(Fo2_GPIO_Port, &GPIO_InitStructure);
 800c57e:	f107 030c 	add.w	r3, r7, #12
 800c582:	4619      	mov	r1, r3
 800c584:	4815      	ldr	r0, [pc, #84]	; (800c5dc <BIOS_Ctrl+0x268>)
 800c586:	f00d f903 	bl	8019790 <HAL_GPIO_Init>
                                  GPIO_InitStructure.Pin   = Fo4_Pin ;
 800c58a:	2310      	movs	r3, #16
 800c58c:	60fb      	str	r3, [r7, #12]
                                  GPIO_InitStructure.Mode  = GPIO_MODE_INPUT;
 800c58e:	2300      	movs	r3, #0
 800c590:	613b      	str	r3, [r7, #16]
                                  HAL_GPIO_Init(Fo4_GPIO_Port, &GPIO_InitStructure);
 800c592:	f107 030c 	add.w	r3, r7, #12
 800c596:	4619      	mov	r1, r3
 800c598:	4810      	ldr	r0, [pc, #64]	; (800c5dc <BIOS_Ctrl+0x268>)
 800c59a:	f00d f8f9 	bl	8019790 <HAL_GPIO_Init>
                                  break;
 800c59e:	bf00      	nop
                  break;
 800c5a0:	e003      	b.n	800c5aa <BIOS_Ctrl+0x236>

    default: break;
 800c5a2:	bf00      	nop
 800c5a4:	e002      	b.n	800c5ac <BIOS_Ctrl+0x238>
    			  break;
 800c5a6:	bf00      	nop
 800c5a8:	e000      	b.n	800c5ac <BIOS_Ctrl+0x238>
                  break;
 800c5aa:	bf00      	nop
  }
}
 800c5ac:	bf00      	nop
 800c5ae:	3720      	adds	r7, #32
 800c5b0:	46bd      	mov	sp, r7
 800c5b2:	bd80      	pop	{r7, pc}
 800c5b4:	20006a78 	.word	0x20006a78
 800c5b8:	200068e8 	.word	0x200068e8
 800c5bc:	20006b88 	.word	0x20006b88
 800c5c0:	20006b6c 	.word	0x20006b6c
 800c5c4:	20006b0c 	.word	0x20006b0c
 800c5c8:	40020800 	.word	0x40020800
 800c5cc:	40020400 	.word	0x40020400
 800c5d0:	20006af8 	.word	0x20006af8
 800c5d4:	20006bd0 	.word	0x20006bd0
 800c5d8:	20006a18 	.word	0x20006a18
 800c5dc:	40020000 	.word	0x40020000

0800c5e0 <Set_Base>:

/*******************************************************************************
 Set_Base: ˮƽɨ��ʱ��ת������
*******************************************************************************/
void Set_Base(short Base)
{
 800c5e0:	b580      	push	{r7, lr}
 800c5e2:	b082      	sub	sp, #8
 800c5e4:	af00      	add	r7, sp, #0
 800c5e6:	4603      	mov	r3, r0
 800c5e8:	80fb      	strh	r3, [r7, #6]
	octim1.Pulse = (ARR[Base]+1)/2;
 800c5ea:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800c5ee:	4a13      	ldr	r2, [pc, #76]	; (800c63c <Set_Base+0x5c>)
 800c5f0:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800c5f4:	3301      	adds	r3, #1
 800c5f6:	0fda      	lsrs	r2, r3, #31
 800c5f8:	4413      	add	r3, r2
 800c5fa:	105b      	asrs	r3, r3, #1
 800c5fc:	461a      	mov	r2, r3
 800c5fe:	4b10      	ldr	r3, [pc, #64]	; (800c640 <Set_Base+0x60>)
 800c600:	605a      	str	r2, [r3, #4]
	HAL_TIM_OC_ConfigChannel(&htim1, &octim1, 1 );
 800c602:	2201      	movs	r2, #1
 800c604:	490e      	ldr	r1, [pc, #56]	; (800c640 <Set_Base+0x60>)
 800c606:	480f      	ldr	r0, [pc, #60]	; (800c644 <Set_Base+0x64>)
 800c608:	f010 fd86 	bl	801d118 <HAL_TIM_OC_ConfigChannel>
	htim1.Init.Prescaler = PSC[Base];
 800c60c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800c610:	4a0d      	ldr	r2, [pc, #52]	; (800c648 <Set_Base+0x68>)
 800c612:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800c616:	461a      	mov	r2, r3
 800c618:	4b0a      	ldr	r3, [pc, #40]	; (800c644 <Set_Base+0x64>)
 800c61a:	605a      	str	r2, [r3, #4]
	htim1.Init.Period = ARR[Base];
 800c61c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800c620:	4a06      	ldr	r2, [pc, #24]	; (800c63c <Set_Base+0x5c>)
 800c622:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800c626:	461a      	mov	r2, r3
 800c628:	4b06      	ldr	r3, [pc, #24]	; (800c644 <Set_Base+0x64>)
 800c62a:	60da      	str	r2, [r3, #12]
	HAL_TIM_Base_Init(&htim1);
 800c62c:	4805      	ldr	r0, [pc, #20]	; (800c644 <Set_Base+0x64>)
 800c62e:	f010 fbab 	bl	801cd88 <HAL_TIM_Base_Init>
}
 800c632:	bf00      	nop
 800c634:	3708      	adds	r7, #8
 800c636:	46bd      	mov	sp, r7
 800c638:	bd80      	pop	{r7, pc}
 800c63a:	bf00      	nop
 800c63c:	08000b30 	.word	0x08000b30
 800c640:	20006b6c 	.word	0x20006b6c
 800c644:	20006b88 	.word	0x20006b88
 800c648:	08000b08 	.word	0x08000b08

0800c64c <Set_Duty>:

/*******************************************************************************
 Set_Duty: �������ռ�ձ�����
*******************************************************************************/
void Set_Duty(void)
{
 800c64c:	b580      	push	{r7, lr}
 800c64e:	af00      	add	r7, sp, #0
	 octim5.Pulse = (FARR[List[FREQ_OUT].Val]+1)*(10-List[FREQ_DUT].Val)/10;
 800c650:	4b0f      	ldr	r3, [pc, #60]	; (800c690 <Set_Duty+0x44>)
 800c652:	f9b3 312c 	ldrsh.w	r3, [r3, #300]	; 0x12c
 800c656:	461a      	mov	r2, r3
 800c658:	4b0e      	ldr	r3, [pc, #56]	; (800c694 <Set_Duty+0x48>)
 800c65a:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 800c65e:	3301      	adds	r3, #1
 800c660:	4a0b      	ldr	r2, [pc, #44]	; (800c690 <Set_Duty+0x44>)
 800c662:	f9b2 2134 	ldrsh.w	r2, [r2, #308]	; 0x134
 800c666:	f1c2 020a 	rsb	r2, r2, #10
 800c66a:	fb02 f303 	mul.w	r3, r2, r3
 800c66e:	4a0a      	ldr	r2, [pc, #40]	; (800c698 <Set_Duty+0x4c>)
 800c670:	fb82 1203 	smull	r1, r2, r2, r3
 800c674:	1092      	asrs	r2, r2, #2
 800c676:	17db      	asrs	r3, r3, #31
 800c678:	1ad3      	subs	r3, r2, r3
 800c67a:	461a      	mov	r2, r3
 800c67c:	4b07      	ldr	r3, [pc, #28]	; (800c69c <Set_Duty+0x50>)
 800c67e:	605a      	str	r2, [r3, #4]
	 HAL_TIM_OC_ConfigChannel(&htim5, &octim5, 3 );
 800c680:	2203      	movs	r2, #3
 800c682:	4906      	ldr	r1, [pc, #24]	; (800c69c <Set_Duty+0x50>)
 800c684:	4806      	ldr	r0, [pc, #24]	; (800c6a0 <Set_Duty+0x54>)
 800c686:	f010 fd47 	bl	801d118 <HAL_TIM_OC_ConfigChannel>
}
 800c68a:	bf00      	nop
 800c68c:	bd80      	pop	{r7, pc}
 800c68e:	bf00      	nop
 800c690:	20000298 	.word	0x20000298
 800c694:	08000ae8 	.word	0x08000ae8
 800c698:	66666667 	.word	0x66666667
 800c69c:	20006adc 	.word	0x20006adc
 800c6a0:	20006930 	.word	0x20006930

0800c6a4 <Set_Fout>:

/*******************************************************************************
 Set_Fout: �������Ƶ������
*******************************************************************************/
void Set_Fout(short Range)
{
 800c6a4:	b580      	push	{r7, lr}
 800c6a6:	b082      	sub	sp, #8
 800c6a8:	af00      	add	r7, sp, #0
 800c6aa:	4603      	mov	r3, r0
 800c6ac:	80fb      	strh	r3, [r7, #6]
	octim5.Pulse = (FARR[Range]+1)/2;
 800c6ae:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800c6b2:	4a13      	ldr	r2, [pc, #76]	; (800c700 <Set_Fout+0x5c>)
 800c6b4:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800c6b8:	3301      	adds	r3, #1
 800c6ba:	0fda      	lsrs	r2, r3, #31
 800c6bc:	4413      	add	r3, r2
 800c6be:	105b      	asrs	r3, r3, #1
 800c6c0:	461a      	mov	r2, r3
 800c6c2:	4b10      	ldr	r3, [pc, #64]	; (800c704 <Set_Fout+0x60>)
 800c6c4:	605a      	str	r2, [r3, #4]
	HAL_TIM_OC_ConfigChannel(&htim5, &octim5, 3 );
 800c6c6:	2203      	movs	r2, #3
 800c6c8:	490e      	ldr	r1, [pc, #56]	; (800c704 <Set_Fout+0x60>)
 800c6ca:	480f      	ldr	r0, [pc, #60]	; (800c708 <Set_Fout+0x64>)
 800c6cc:	f010 fd24 	bl	801d118 <HAL_TIM_OC_ConfigChannel>
	htim5.Init.Prescaler = FPSC[Range];
 800c6d0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800c6d4:	4a0d      	ldr	r2, [pc, #52]	; (800c70c <Set_Fout+0x68>)
 800c6d6:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800c6da:	461a      	mov	r2, r3
 800c6dc:	4b0a      	ldr	r3, [pc, #40]	; (800c708 <Set_Fout+0x64>)
 800c6de:	605a      	str	r2, [r3, #4]
	htim5.Init.Period = FARR[Range];
 800c6e0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800c6e4:	4a06      	ldr	r2, [pc, #24]	; (800c700 <Set_Fout+0x5c>)
 800c6e6:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800c6ea:	461a      	mov	r2, r3
 800c6ec:	4b06      	ldr	r3, [pc, #24]	; (800c708 <Set_Fout+0x64>)
 800c6ee:	60da      	str	r2, [r3, #12]
	HAL_TIM_Base_Init(&htim5);
 800c6f0:	4805      	ldr	r0, [pc, #20]	; (800c708 <Set_Fout+0x64>)
 800c6f2:	f010 fb49 	bl	801cd88 <HAL_TIM_Base_Init>
}
 800c6f6:	bf00      	nop
 800c6f8:	3708      	adds	r7, #8
 800c6fa:	46bd      	mov	sp, r7
 800c6fc:	bd80      	pop	{r7, pc}
 800c6fe:	bf00      	nop
 800c700:	08000ae8 	.word	0x08000ae8
 800c704:	20006adc 	.word	0x20006adc
 800c708:	20006930 	.word	0x20006930
 800c70c:	08000ac8 	.word	0x08000ac8

0800c710 <ADC_Start>:

/*******************************************************************************
 ADC_Start: ���¿�ʼADCɨ�����
*******************************************************************************/
void ADC_Start(void)
{
 800c710:	b480      	push	{r7}
 800c712:	af00      	add	r7, sp, #0
  Sampl[0]   = List[TIM_BASE].Val;         // �������ʱ����λֵ
 800c714:	4b17      	ldr	r3, [pc, #92]	; (800c774 <ADC_Start+0x64>)
 800c716:	f9b3 203c 	ldrsh.w	r2, [r3, #60]	; 0x3c
 800c71a:	4b17      	ldr	r3, [pc, #92]	; (800c778 <ADC_Start+0x68>)
 800c71c:	801a      	strh	r2, [r3, #0]
//  DMA1_Channel1->CCR   &= 0xFFFFFFFFE;
//  DMA1_Channel1->CMAR  = (u32)&Sampl[2];             // �����趨DMAͨ��1
  if(( List[SYNCMODE].Val == NONE|| List[SYNCMODE].Val == SCAN)
 800c71e:	4b15      	ldr	r3, [pc, #84]	; (800c774 <ADC_Start+0x64>)
 800c720:	f9b3 306c 	ldrsh.w	r3, [r3, #108]	; 0x6c
 800c724:	2b05      	cmp	r3, #5
 800c726:	d004      	beq.n	800c732 <ADC_Start+0x22>
 800c728:	4b12      	ldr	r3, [pc, #72]	; (800c774 <ADC_Start+0x64>)
 800c72a:	f9b3 306c 	ldrsh.w	r3, [r3, #108]	; 0x6c
 800c72e:	2b01      	cmp	r3, #1
 800c730:	d10e      	bne.n	800c750 <ADC_Start+0x40>
     &&( List[TIM_BASE].Val>11))
 800c732:	4b10      	ldr	r3, [pc, #64]	; (800c774 <ADC_Start+0x64>)
 800c734:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800c738:	2b0b      	cmp	r3, #11
 800c73a:	dd09      	ble.n	800c750 <ADC_Start+0x40>
  {
	  __HAL_DMA_SET_COUNTER(&hdma_adc1, 302);//       DMA1_Channel1->CNDTR  = 302;                       //10ms
 800c73c:	4b0f      	ldr	r3, [pc, #60]	; (800c77c <ADC_Start+0x6c>)
 800c73e:	681b      	ldr	r3, [r3, #0]
 800c740:	f44f 7297 	mov.w	r2, #302	; 0x12e
 800c744:	605a      	str	r2, [r3, #4]
       List[VIEWPOSI].Val= 0;
 800c746:	4b0b      	ldr	r3, [pc, #44]	; (800c774 <ADC_Start+0x64>)
 800c748:	2200      	movs	r2, #0
 800c74a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
 800c74e:	e00b      	b.n	800c768 <ADC_Start+0x58>
     }
  else
  __HAL_DMA_SET_COUNTER(&hdma_adc1, DEPTH[List[SMPL_DPTH].Val]);//    DMA1_Channel1->CNDTR = DEPTH[List[SMPL_DPTH].Val]; // 0x00001000;
 800c750:	4b08      	ldr	r3, [pc, #32]	; (800c774 <ADC_Start+0x64>)
 800c752:	f9b3 304c 	ldrsh.w	r3, [r3, #76]	; 0x4c
 800c756:	461a      	mov	r2, r3
 800c758:	4b09      	ldr	r3, [pc, #36]	; (800c780 <ADC_Start+0x70>)
 800c75a:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 800c75e:	b29a      	uxth	r2, r3
 800c760:	4b06      	ldr	r3, [pc, #24]	; (800c77c <ADC_Start+0x6c>)
 800c762:	681b      	ldr	r3, [r3, #0]
 800c764:	605a      	str	r2, [r3, #4]
//  DMA1_Channel1->CCR  |= 0x00000001;                 // ���¿�ʼɨ�����
}
 800c766:	bf00      	nop
 800c768:	bf00      	nop
 800c76a:	46bd      	mov	sp, r7
 800c76c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c770:	4770      	bx	lr
 800c772:	bf00      	nop
 800c774:	20000298 	.word	0x20000298
 800c778:	20002870 	.word	0x20002870
 800c77c:	20006b0c 	.word	0x20006b0c
 800c780:	08002270 	.word	0x08002270

0800c784 <touchscan>:

//touchscan -- maps touch to key codes  returns 0 if no change
char touchscan()
{
 800c784:	b480      	push	{r7}
 800c786:	b083      	sub	sp, #12
 800c788:	af00      	add	r7, sp, #0
	short x,y;
	char code;

	code =0;
 800c78a:	2300      	movs	r3, #0
 800c78c:	71fb      	strb	r3, [r7, #7]

	return code;
 800c78e:	79fb      	ldrb	r3, [r7, #7]
}
 800c790:	4618      	mov	r0, r3
 800c792:	370c      	adds	r7, #12
 800c794:	46bd      	mov	sp, r7
 800c796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c79a:	4770      	bx	lr

0800c79c <Tim3_ISP>:

/*******************************************************************************
* Tim3�жϴ������
*******************************************************************************/
void Tim3_ISP(void)
{
 800c79c:	b580      	push	{r7, lr}
 800c79e:	b082      	sub	sp, #8
 800c7a0:	af00      	add	r7, sp, #0

	char checkpress;
    char KeyCode;

//  TIM3->SR = 0;          //moved to main //���жϱ�־
  if(KeymS_F)KeymS_Cnt++;                  //�������ʱ
 800c7a2:	4b73      	ldr	r3, [pc, #460]	; (800c970 <Tim3_ISP+0x1d4>)
 800c7a4:	781b      	ldrb	r3, [r3, #0]
 800c7a6:	2b00      	cmp	r3, #0
 800c7a8:	d008      	beq.n	800c7bc <Tim3_ISP+0x20>
 800c7aa:	4b72      	ldr	r3, [pc, #456]	; (800c974 <Tim3_ISP+0x1d8>)
 800c7ac:	881b      	ldrh	r3, [r3, #0]
 800c7ae:	b21b      	sxth	r3, r3
 800c7b0:	b29b      	uxth	r3, r3
 800c7b2:	3301      	adds	r3, #1
 800c7b4:	b29b      	uxth	r3, r3
 800c7b6:	b21a      	sxth	r2, r3
 800c7b8:	4b6e      	ldr	r3, [pc, #440]	; (800c974 <Tim3_ISP+0x1d8>)
 800c7ba:	801a      	strh	r2, [r3, #0]
  Tim_Cnt++;
 800c7bc:	4b6e      	ldr	r3, [pc, #440]	; (800c978 <Tim3_ISP+0x1dc>)
 800c7be:	881b      	ldrh	r3, [r3, #0]
 800c7c0:	b21b      	sxth	r3, r3
 800c7c2:	b29b      	uxth	r3, r3
 800c7c4:	3301      	adds	r3, #1
 800c7c6:	b29b      	uxth	r3, r3
 800c7c8:	b21a      	sxth	r2, r3
 800c7ca:	4b6b      	ldr	r3, [pc, #428]	; (800c978 <Tim3_ISP+0x1dc>)
 800c7cc:	801a      	strh	r2, [r3, #0]
  if(Delay_Cnt>0) Delay_Cnt--;
 800c7ce:	4b6b      	ldr	r3, [pc, #428]	; (800c97c <Tim3_ISP+0x1e0>)
 800c7d0:	881b      	ldrh	r3, [r3, #0]
 800c7d2:	b21b      	sxth	r3, r3
 800c7d4:	2b00      	cmp	r3, #0
 800c7d6:	dd08      	ble.n	800c7ea <Tim3_ISP+0x4e>
 800c7d8:	4b68      	ldr	r3, [pc, #416]	; (800c97c <Tim3_ISP+0x1e0>)
 800c7da:	881b      	ldrh	r3, [r3, #0]
 800c7dc:	b21b      	sxth	r3, r3
 800c7de:	b29b      	uxth	r3, r3
 800c7e0:	3b01      	subs	r3, #1
 800c7e2:	b29b      	uxth	r3, r3
 800c7e4:	b21a      	sxth	r2, r3
 800c7e6:	4b65      	ldr	r3, [pc, #404]	; (800c97c <Tim3_ISP+0x1e0>)
 800c7e8:	801a      	strh	r2, [r3, #0]
  if (mS_Cnt > 0)
 800c7ea:	4b65      	ldr	r3, [pc, #404]	; (800c980 <Tim3_ISP+0x1e4>)
 800c7ec:	881b      	ldrh	r3, [r3, #0]
 800c7ee:	b21b      	sxth	r3, r3
 800c7f0:	2b00      	cmp	r3, #0
 800c7f2:	f340 8081 	ble.w	800c8f8 <Tim3_ISP+0x15c>
  {
    mS_Cnt--;
 800c7f6:	4b62      	ldr	r3, [pc, #392]	; (800c980 <Tim3_ISP+0x1e4>)
 800c7f8:	881b      	ldrh	r3, [r3, #0]
 800c7fa:	b21b      	sxth	r3, r3
 800c7fc:	b29b      	uxth	r3, r3
 800c7fe:	3b01      	subs	r3, #1
 800c800:	b29b      	uxth	r3, r3
 800c802:	b21a      	sxth	r2, r3
 800c804:	4b5e      	ldr	r3, [pc, #376]	; (800c980 <Tim3_ISP+0x1e4>)
 800c806:	801a      	strh	r2, [r3, #0]
    if ((mS_Cnt%20)== 0)
 800c808:	4b5d      	ldr	r3, [pc, #372]	; (800c980 <Tim3_ISP+0x1e4>)
 800c80a:	881b      	ldrh	r3, [r3, #0]
 800c80c:	b21a      	sxth	r2, r3
 800c80e:	4b5d      	ldr	r3, [pc, #372]	; (800c984 <Tim3_ISP+0x1e8>)
 800c810:	fb83 1302 	smull	r1, r3, r3, r2
 800c814:	10d9      	asrs	r1, r3, #3
 800c816:	17d3      	asrs	r3, r2, #31
 800c818:	1ac9      	subs	r1, r1, r3
 800c81a:	460b      	mov	r3, r1
 800c81c:	009b      	lsls	r3, r3, #2
 800c81e:	440b      	add	r3, r1
 800c820:	009b      	lsls	r3, r3, #2
 800c822:	1ad3      	subs	r3, r2, r3
 800c824:	b21b      	sxth	r3, r3
 800c826:	2b00      	cmp	r3, #0
 800c828:	f040 809d 	bne.w	800c966 <Tim3_ISP+0x1ca>
    {                 //  20mS  ÿ20mS��1�μ���
    	if(Key_Wait_Cnt)    Key_Wait_Cnt--;
 800c82c:	4b56      	ldr	r3, [pc, #344]	; (800c988 <Tim3_ISP+0x1ec>)
 800c82e:	781b      	ldrb	r3, [r3, #0]
 800c830:	b2db      	uxtb	r3, r3
 800c832:	2b00      	cmp	r3, #0
 800c834:	d006      	beq.n	800c844 <Tim3_ISP+0xa8>
 800c836:	4b54      	ldr	r3, [pc, #336]	; (800c988 <Tim3_ISP+0x1ec>)
 800c838:	781b      	ldrb	r3, [r3, #0]
 800c83a:	b2db      	uxtb	r3, r3
 800c83c:	3b01      	subs	r3, #1
 800c83e:	b2da      	uxtb	r2, r3
 800c840:	4b51      	ldr	r3, [pc, #324]	; (800c988 <Tim3_ISP+0x1ec>)
 800c842:	701a      	strb	r2, [r3, #0]
    	if(Key_Repeat_Cnt)  Key_Repeat_Cnt--;
 800c844:	4b51      	ldr	r3, [pc, #324]	; (800c98c <Tim3_ISP+0x1f0>)
 800c846:	781b      	ldrb	r3, [r3, #0]
 800c848:	b2db      	uxtb	r3, r3
 800c84a:	2b00      	cmp	r3, #0
 800c84c:	d006      	beq.n	800c85c <Tim3_ISP+0xc0>
 800c84e:	4b4f      	ldr	r3, [pc, #316]	; (800c98c <Tim3_ISP+0x1f0>)
 800c850:	781b      	ldrb	r3, [r3, #0]
 800c852:	b2db      	uxtb	r3, r3
 800c854:	3b01      	subs	r3, #1
 800c856:	b2da      	uxtb	r2, r3
 800c858:	4b4c      	ldr	r3, [pc, #304]	; (800c98c <Tim3_ISP+0x1f0>)
 800c85a:	701a      	strb	r2, [r3, #0]
    	KeyCode = checkpress =0 ;
 800c85c:	2300      	movs	r3, #0
 800c85e:	71fb      	strb	r3, [r7, #7]
 800c860:	79fb      	ldrb	r3, [r7, #7]
 800c862:	71bb      	strb	r3, [r7, #6]
    	Touch = HAL_GPIO_ReadPin(TpI_GPIO_Port, TpI_Pin);  //read pen
 800c864:	f44f 7180 	mov.w	r1, #256	; 0x100
 800c868:	4849      	ldr	r0, [pc, #292]	; (800c990 <Tim3_ISP+0x1f4>)
 800c86a:	f00d f925 	bl	8019ab8 <HAL_GPIO_ReadPin>
 800c86e:	4603      	mov	r3, r0
 800c870:	461a      	mov	r2, r3
 800c872:	4b48      	ldr	r3, [pc, #288]	; (800c994 <Tim3_ISP+0x1f8>)
 800c874:	701a      	strb	r2, [r3, #0]
    	if (Touch != LastTouch)
 800c876:	4b47      	ldr	r3, [pc, #284]	; (800c994 <Tim3_ISP+0x1f8>)
 800c878:	781a      	ldrb	r2, [r3, #0]
 800c87a:	4b47      	ldr	r3, [pc, #284]	; (800c998 <Tim3_ISP+0x1fc>)
 800c87c:	781b      	ldrb	r3, [r3, #0]
 800c87e:	429a      	cmp	r2, r3
 800c880:	d006      	beq.n	800c890 <Tim3_ISP+0xf4>
    	{
    	// pen changed
    		checkpress =1; //check pressure if pen changed
 800c882:	2301      	movs	r3, #1
 800c884:	71fb      	strb	r3, [r7, #7]
    		LastTouch = Touch;
 800c886:	4b43      	ldr	r3, [pc, #268]	; (800c994 <Tim3_ISP+0x1f8>)
 800c888:	781a      	ldrb	r2, [r3, #0]
 800c88a:	4b43      	ldr	r3, [pc, #268]	; (800c998 <Tim3_ISP+0x1fc>)
 800c88c:	701a      	strb	r2, [r3, #0]
 800c88e:	e005      	b.n	800c89c <Tim3_ISP+0x100>
    	}
    	else
    	{
    	  if(Touch != 0)
 800c890:	4b40      	ldr	r3, [pc, #256]	; (800c994 <Tim3_ISP+0x1f8>)
 800c892:	781b      	ldrb	r3, [r3, #0]
 800c894:	2b00      	cmp	r3, #0
 800c896:	d001      	beq.n	800c89c <Tim3_ISP+0x100>
    	  {
    	    //check that press is valid
    		checkpress =1;
 800c898:	2301      	movs	r3, #1
 800c89a:	71fb      	strb	r3, [r7, #7]
    	  }
    	}

    	if(checkpress !=0)
 800c89c:	79fb      	ldrb	r3, [r7, #7]
 800c89e:	2b00      	cmp	r3, #0
 800c8a0:	d003      	beq.n	800c8aa <Tim3_ISP+0x10e>
    	{
    		KeyCode = touchscan();
 800c8a2:	f7ff ff6f 	bl	800c784 <touchscan>
 800c8a6:	4603      	mov	r3, r0
 800c8a8:	71bb      	strb	r3, [r7, #6]
       	}
//      KeyCode = KeyScan();
      if(KeyCode !=0) Key_Buffer = KeyCode;
 800c8aa:	79bb      	ldrb	r3, [r7, #6]
 800c8ac:	2b00      	cmp	r3, #0
 800c8ae:	d002      	beq.n	800c8b6 <Tim3_ISP+0x11a>
 800c8b0:	4a3a      	ldr	r2, [pc, #232]	; (800c99c <Tim3_ISP+0x200>)
 800c8b2:	79bb      	ldrb	r3, [r7, #6]
 800c8b4:	7013      	strb	r3, [r2, #0]

      if(Cursor_Cnt >0)
 800c8b6:	4b3a      	ldr	r3, [pc, #232]	; (800c9a0 <Tim3_ISP+0x204>)
 800c8b8:	881b      	ldrh	r3, [r3, #0]
 800c8ba:	b21b      	sxth	r3, r3
 800c8bc:	2b00      	cmp	r3, #0
 800c8be:	dd09      	ble.n	800c8d4 <Tim3_ISP+0x138>
    	  Cursor_Cnt--;
 800c8c0:	4b37      	ldr	r3, [pc, #220]	; (800c9a0 <Tim3_ISP+0x204>)
 800c8c2:	881b      	ldrh	r3, [r3, #0]
 800c8c4:	b21b      	sxth	r3, r3
 800c8c6:	b29b      	uxth	r3, r3
 800c8c8:	3b01      	subs	r3, #1
 800c8ca:	b29b      	uxth	r3, r3
 800c8cc:	b21a      	sxth	r2, r3
 800c8ce:	4b34      	ldr	r3, [pc, #208]	; (800c9a0 <Tim3_ISP+0x204>)
 800c8d0:	801a      	strh	r2, [r3, #0]
        Windows_Pop = 0;
        Clr_WavePosi(DAR);
      }
    }
  }
}
 800c8d2:	e048      	b.n	800c966 <Tim3_ISP+0x1ca>
        Cursor_Cnt = 12;                  // 12*20mS=240mS
 800c8d4:	4b32      	ldr	r3, [pc, #200]	; (800c9a0 <Tim3_ISP+0x204>)
 800c8d6:	220c      	movs	r2, #12
 800c8d8:	801a      	strh	r2, [r3, #0]
        Twink = !Twink;
 800c8da:	4b32      	ldr	r3, [pc, #200]	; (800c9a4 <Tim3_ISP+0x208>)
 800c8dc:	781b      	ldrb	r3, [r3, #0]
 800c8de:	b2db      	uxtb	r3, r3
 800c8e0:	2b00      	cmp	r3, #0
 800c8e2:	bf0c      	ite	eq
 800c8e4:	2301      	moveq	r3, #1
 800c8e6:	2300      	movne	r3, #0
 800c8e8:	b2db      	uxtb	r3, r3
 800c8ea:	461a      	mov	r2, r3
 800c8ec:	4b2d      	ldr	r3, [pc, #180]	; (800c9a4 <Tim3_ISP+0x208>)
 800c8ee:	701a      	strb	r2, [r3, #0]
        Blink =  BLINK;
 800c8f0:	4b2d      	ldr	r3, [pc, #180]	; (800c9a8 <Tim3_ISP+0x20c>)
 800c8f2:	2201      	movs	r2, #1
 800c8f4:	701a      	strb	r2, [r3, #0]
}
 800c8f6:	e036      	b.n	800c966 <Tim3_ISP+0x1ca>
    mS_Cnt = 1000;
 800c8f8:	4b21      	ldr	r3, [pc, #132]	; (800c980 <Tim3_ISP+0x1e4>)
 800c8fa:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800c8fe:	801a      	strh	r2, [r3, #0]
    if((List[STANDBY].Val !=0) && (StdBy_Time > 0))
 800c900:	4b2a      	ldr	r3, [pc, #168]	; (800c9ac <Tim3_ISP+0x210>)
 800c902:	f9b3 314c 	ldrsh.w	r3, [r3, #332]	; 0x14c
 800c906:	2b00      	cmp	r3, #0
 800c908:	d00d      	beq.n	800c926 <Tim3_ISP+0x18a>
 800c90a:	4b29      	ldr	r3, [pc, #164]	; (800c9b0 <Tim3_ISP+0x214>)
 800c90c:	f9b3 3000 	ldrsh.w	r3, [r3]
 800c910:	2b00      	cmp	r3, #0
 800c912:	dd08      	ble.n	800c926 <Tim3_ISP+0x18a>
      StdBy_Time--;      //������ʱ
 800c914:	4b26      	ldr	r3, [pc, #152]	; (800c9b0 <Tim3_ISP+0x214>)
 800c916:	f9b3 3000 	ldrsh.w	r3, [r3]
 800c91a:	b29b      	uxth	r3, r3
 800c91c:	3b01      	subs	r3, #1
 800c91e:	b29b      	uxth	r3, r3
 800c920:	b21a      	sxth	r2, r3
 800c922:	4b23      	ldr	r3, [pc, #140]	; (800c9b0 <Tim3_ISP+0x214>)
 800c924:	801a      	strh	r2, [r3, #0]
    if(PopupCnt > 0)
 800c926:	4b23      	ldr	r3, [pc, #140]	; (800c9b4 <Tim3_ISP+0x218>)
 800c928:	881b      	ldrh	r3, [r3, #0]
 800c92a:	b21b      	sxth	r3, r3
 800c92c:	2b00      	cmp	r3, #0
 800c92e:	dd0d      	ble.n	800c94c <Tim3_ISP+0x1b0>
      if(Cal_Flag == 0)
 800c930:	4b21      	ldr	r3, [pc, #132]	; (800c9b8 <Tim3_ISP+0x21c>)
 800c932:	781b      	ldrb	r3, [r3, #0]
 800c934:	2b00      	cmp	r3, #0
 800c936:	d116      	bne.n	800c966 <Tim3_ISP+0x1ca>
    	  PopupCnt--;
 800c938:	4b1e      	ldr	r3, [pc, #120]	; (800c9b4 <Tim3_ISP+0x218>)
 800c93a:	881b      	ldrh	r3, [r3, #0]
 800c93c:	b21b      	sxth	r3, r3
 800c93e:	b29b      	uxth	r3, r3
 800c940:	3b01      	subs	r3, #1
 800c942:	b29b      	uxth	r3, r3
 800c944:	b21a      	sxth	r2, r3
 800c946:	4b1b      	ldr	r3, [pc, #108]	; (800c9b4 <Tim3_ISP+0x218>)
 800c948:	801a      	strh	r2, [r3, #0]
}
 800c94a:	e00c      	b.n	800c966 <Tim3_ISP+0x1ca>
      Close_Pop();        // �رնԻ���
 800c94c:	f001 ff04 	bl	800e758 <Close_Pop>
      if(Windows_Pop)
 800c950:	4b1a      	ldr	r3, [pc, #104]	; (800c9bc <Tim3_ISP+0x220>)
 800c952:	781b      	ldrb	r3, [r3, #0]
 800c954:	2b00      	cmp	r3, #0
 800c956:	d006      	beq.n	800c966 <Tim3_ISP+0x1ca>
        Windows_Pop = 0;
 800c958:	4b18      	ldr	r3, [pc, #96]	; (800c9bc <Tim3_ISP+0x220>)
 800c95a:	2200      	movs	r2, #0
 800c95c:	701a      	strb	r2, [r3, #0]
        Clr_WavePosi(DAR);
 800c95e:	f643 10e7 	movw	r0, #14823	; 0x39e7
 800c962:	f007 fe63 	bl	801462c <Clr_WavePosi>
}
 800c966:	bf00      	nop
 800c968:	3708      	adds	r7, #8
 800c96a:	46bd      	mov	sp, r7
 800c96c:	bd80      	pop	{r7, pc}
 800c96e:	bf00      	nop
 800c970:	20000786 	.word	0x20000786
 800c974:	20000a32 	.word	0x20000a32
 800c978:	20000a34 	.word	0x20000a34
 800c97c:	20000784 	.word	0x20000784
 800c980:	20000782 	.word	0x20000782
 800c984:	66666667 	.word	0x66666667
 800c988:	20000788 	.word	0x20000788
 800c98c:	20000787 	.word	0x20000787
 800c990:	40020400 	.word	0x40020400
 800c994:	20000a30 	.word	0x20000a30
 800c998:	20000789 	.word	0x20000789
 800c99c:	2000077d 	.word	0x2000077d
 800c9a0:	20000780 	.word	0x20000780
 800c9a4:	2000077c 	.word	0x2000077c
 800c9a8:	20000a31 	.word	0x20000a31
 800c9ac:	20000298 	.word	0x20000298
 800c9b0:	2000079c 	.word	0x2000079c
 800c9b4:	20000000 	.word	0x20000000
 800c9b8:	200001b4 	.word	0x200001b4
 800c9bc:	200007a6 	.word	0x200007a6

0800c9c0 <Fill_Base>:
 800c9c0:	b480      	push	{r7}
 800c9c2:	af00      	add	r7, sp, #0
 800c9c4:	4b12      	ldr	r3, [pc, #72]	; (800ca10 <Fill_Base+0x50>)
 800c9c6:	4a13      	ldr	r2, [pc, #76]	; (800ca14 <Fill_Base+0x54>)
 800c9c8:	601a      	str	r2, [r3, #0]
 800c9ca:	4b13      	ldr	r3, [pc, #76]	; (800ca18 <Fill_Base+0x58>)
 800c9cc:	2266      	movs	r2, #102	; 0x66
 800c9ce:	601a      	str	r2, [r3, #0]
 800c9d0:	4b0f      	ldr	r3, [pc, #60]	; (800ca10 <Fill_Base+0x50>)
 800c9d2:	681b      	ldr	r3, [r3, #0]
 800c9d4:	4a11      	ldr	r2, [pc, #68]	; (800ca1c <Fill_Base+0x5c>)
 800c9d6:	6812      	ldr	r2, [r2, #0]
 800c9d8:	601a      	str	r2, [r3, #0]
 800c9da:	4b0d      	ldr	r3, [pc, #52]	; (800ca10 <Fill_Base+0x50>)
 800c9dc:	681b      	ldr	r3, [r3, #0]
 800c9de:	3304      	adds	r3, #4
 800c9e0:	4a0b      	ldr	r2, [pc, #44]	; (800ca10 <Fill_Base+0x50>)
 800c9e2:	6013      	str	r3, [r2, #0]
 800c9e4:	4b0c      	ldr	r3, [pc, #48]	; (800ca18 <Fill_Base+0x58>)
 800c9e6:	681b      	ldr	r3, [r3, #0]
 800c9e8:	3b01      	subs	r3, #1
 800c9ea:	4a0b      	ldr	r2, [pc, #44]	; (800ca18 <Fill_Base+0x58>)
 800c9ec:	6013      	str	r3, [r2, #0]
 800c9ee:	4b0a      	ldr	r3, [pc, #40]	; (800ca18 <Fill_Base+0x58>)
 800c9f0:	681b      	ldr	r3, [r3, #0]
 800c9f2:	2b00      	cmp	r3, #0
 800c9f4:	d000      	beq.n	800c9f8 <Fill_Base+0x38>
 800c9f6:	e7eb      	b.n	800c9d0 <Fill_Base+0x10>
 800c9f8:	4b05      	ldr	r3, [pc, #20]	; (800ca10 <Fill_Base+0x50>)
 800c9fa:	4a09      	ldr	r2, [pc, #36]	; (800ca20 <Fill_Base+0x60>)
 800c9fc:	601a      	str	r2, [r3, #0]
 800c9fe:	4b07      	ldr	r3, [pc, #28]	; (800ca1c <Fill_Base+0x5c>)
 800ca00:	f647 32ef 	movw	r2, #31727	; 0x7bef
 800ca04:	601a      	str	r2, [r3, #0]
 800ca06:	bf00      	nop
 800ca08:	46bd      	mov	sp, r7
 800ca0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca0e:	4770      	bx	lr
 800ca10:	20000bec 	.word	0x20000bec
 800ca14:	20000be0 	.word	0x20000be0
 800ca18:	20000a3c 	.word	0x20000a3c
 800ca1c:	20000a40 	.word	0x20000a40
 800ca20:	20000bde 	.word	0x20000bde

0800ca24 <Buld_0>:
 800ca24:	b580      	push	{r7, lr}
 800ca26:	af00      	add	r7, sp, #0
 800ca28:	4b03      	ldr	r3, [pc, #12]	; (800ca38 <Buld_0+0x14>)
 800ca2a:	2200      	movs	r2, #0
 800ca2c:	601a      	str	r2, [r3, #0]
 800ca2e:	f7ff ffc7 	bl	800c9c0 <Fill_Base>
 800ca32:	bf00      	nop
 800ca34:	bd80      	pop	{r7, pc}
 800ca36:	bf00      	nop
 800ca38:	20000a40 	.word	0x20000a40

0800ca3c <Buld_1>:
 800ca3c:	b580      	push	{r7, lr}
 800ca3e:	af00      	add	r7, sp, #0
 800ca40:	4b0e      	ldr	r3, [pc, #56]	; (800ca7c <Buld_1+0x40>)
 800ca42:	4a0f      	ldr	r2, [pc, #60]	; (800ca80 <Buld_1+0x44>)
 800ca44:	601a      	str	r2, [r3, #0]
 800ca46:	f7ff ffbb 	bl	800c9c0 <Fill_Base>
 800ca4a:	4b0c      	ldr	r3, [pc, #48]	; (800ca7c <Buld_1+0x40>)
 800ca4c:	2200      	movs	r2, #0
 800ca4e:	601a      	str	r2, [r3, #0]
 800ca50:	4b0c      	ldr	r3, [pc, #48]	; (800ca84 <Buld_1+0x48>)
 800ca52:	f44f 72c9 	mov.w	r2, #402	; 0x192
 800ca56:	601a      	str	r2, [r3, #0]
 800ca58:	4b08      	ldr	r3, [pc, #32]	; (800ca7c <Buld_1+0x40>)
 800ca5a:	6819      	ldr	r1, [r3, #0]
 800ca5c:	4b0a      	ldr	r3, [pc, #40]	; (800ca88 <Buld_1+0x4c>)
 800ca5e:	681a      	ldr	r2, [r3, #0]
 800ca60:	4b08      	ldr	r3, [pc, #32]	; (800ca84 <Buld_1+0x48>)
 800ca62:	681b      	ldr	r3, [r3, #0]
 800ca64:	4413      	add	r3, r2
 800ca66:	b28a      	uxth	r2, r1
 800ca68:	801a      	strh	r2, [r3, #0]
 800ca6a:	4b04      	ldr	r3, [pc, #16]	; (800ca7c <Buld_1+0x40>)
 800ca6c:	681a      	ldr	r2, [r3, #0]
 800ca6e:	4b06      	ldr	r3, [pc, #24]	; (800ca88 <Buld_1+0x4c>)
 800ca70:	681b      	ldr	r3, [r3, #0]
 800ca72:	3b02      	subs	r3, #2
 800ca74:	b292      	uxth	r2, r2
 800ca76:	801a      	strh	r2, [r3, #0]
 800ca78:	bf00      	nop
 800ca7a:	bd80      	pop	{r7, pc}
 800ca7c:	20000a40 	.word	0x20000a40
 800ca80:	7bef7bef 	.word	0x7bef7bef
 800ca84:	20000a3c 	.word	0x20000a3c
 800ca88:	20000bec 	.word	0x20000bec

0800ca8c <Buld_2>:
 800ca8c:	b580      	push	{r7, lr}
 800ca8e:	af00      	add	r7, sp, #0
 800ca90:	4b0c      	ldr	r3, [pc, #48]	; (800cac4 <Buld_2+0x38>)
 800ca92:	2200      	movs	r2, #0
 800ca94:	601a      	str	r2, [r3, #0]
 800ca96:	f7ff ff93 	bl	800c9c0 <Fill_Base>
 800ca9a:	4b0b      	ldr	r3, [pc, #44]	; (800cac8 <Buld_2+0x3c>)
 800ca9c:	f44f 72c8 	mov.w	r2, #400	; 0x190
 800caa0:	601a      	str	r2, [r3, #0]
 800caa2:	4b08      	ldr	r3, [pc, #32]	; (800cac4 <Buld_2+0x38>)
 800caa4:	6819      	ldr	r1, [r3, #0]
 800caa6:	4b09      	ldr	r3, [pc, #36]	; (800cacc <Buld_2+0x40>)
 800caa8:	681a      	ldr	r2, [r3, #0]
 800caaa:	4b07      	ldr	r3, [pc, #28]	; (800cac8 <Buld_2+0x3c>)
 800caac:	681b      	ldr	r3, [r3, #0]
 800caae:	4413      	add	r3, r2
 800cab0:	b28a      	uxth	r2, r1
 800cab2:	801a      	strh	r2, [r3, #0]
 800cab4:	4b03      	ldr	r3, [pc, #12]	; (800cac4 <Buld_2+0x38>)
 800cab6:	681a      	ldr	r2, [r3, #0]
 800cab8:	4b04      	ldr	r3, [pc, #16]	; (800cacc <Buld_2+0x40>)
 800caba:	681b      	ldr	r3, [r3, #0]
 800cabc:	b292      	uxth	r2, r2
 800cabe:	801a      	strh	r2, [r3, #0]
 800cac0:	bf00      	nop
 800cac2:	bd80      	pop	{r7, pc}
 800cac4:	20000a40 	.word	0x20000a40
 800cac8:	20000a3c 	.word	0x20000a3c
 800cacc:	20000bec 	.word	0x20000bec

0800cad0 <Buld_3>:
 800cad0:	b580      	push	{r7, lr}
 800cad2:	af00      	add	r7, sp, #0
 800cad4:	4b0e      	ldr	r3, [pc, #56]	; (800cb10 <Buld_3+0x40>)
 800cad6:	2200      	movs	r2, #0
 800cad8:	601a      	str	r2, [r3, #0]
 800cada:	f7ff ff71 	bl	800c9c0 <Fill_Base>
 800cade:	4b0d      	ldr	r3, [pc, #52]	; (800cb14 <Buld_3+0x44>)
 800cae0:	f44f 72e1 	mov.w	r2, #450	; 0x1c2
 800cae4:	601a      	str	r2, [r3, #0]
 800cae6:	4b0b      	ldr	r3, [pc, #44]	; (800cb14 <Buld_3+0x44>)
 800cae8:	681b      	ldr	r3, [r3, #0]
 800caea:	3b32      	subs	r3, #50	; 0x32
 800caec:	4a09      	ldr	r2, [pc, #36]	; (800cb14 <Buld_3+0x44>)
 800caee:	6013      	str	r3, [r2, #0]
 800caf0:	4b07      	ldr	r3, [pc, #28]	; (800cb10 <Buld_3+0x40>)
 800caf2:	6819      	ldr	r1, [r3, #0]
 800caf4:	4b08      	ldr	r3, [pc, #32]	; (800cb18 <Buld_3+0x48>)
 800caf6:	681a      	ldr	r2, [r3, #0]
 800caf8:	4b06      	ldr	r3, [pc, #24]	; (800cb14 <Buld_3+0x44>)
 800cafa:	681b      	ldr	r3, [r3, #0]
 800cafc:	4413      	add	r3, r2
 800cafe:	b28a      	uxth	r2, r1
 800cb00:	801a      	strh	r2, [r3, #0]
 800cb02:	4b04      	ldr	r3, [pc, #16]	; (800cb14 <Buld_3+0x44>)
 800cb04:	681b      	ldr	r3, [r3, #0]
 800cb06:	2b00      	cmp	r3, #0
 800cb08:	d000      	beq.n	800cb0c <Buld_3+0x3c>
 800cb0a:	e7ec      	b.n	800cae6 <Buld_3+0x16>
 800cb0c:	bf00      	nop
 800cb0e:	bd80      	pop	{r7, pc}
 800cb10:	20000a40 	.word	0x20000a40
 800cb14:	20000a3c 	.word	0x20000a3c
 800cb18:	20000bec 	.word	0x20000bec

0800cb1c <Buld_4>:
 800cb1c:	b580      	push	{r7, lr}
 800cb1e:	af00      	add	r7, sp, #0
 800cb20:	4b0e      	ldr	r3, [pc, #56]	; (800cb5c <Buld_4+0x40>)
 800cb22:	2200      	movs	r2, #0
 800cb24:	601a      	str	r2, [r3, #0]
 800cb26:	f7ff ff4b 	bl	800c9c0 <Fill_Base>
 800cb2a:	4b0d      	ldr	r3, [pc, #52]	; (800cb60 <Buld_4+0x44>)
 800cb2c:	f44f 72cd 	mov.w	r2, #410	; 0x19a
 800cb30:	601a      	str	r2, [r3, #0]
 800cb32:	4b0b      	ldr	r3, [pc, #44]	; (800cb60 <Buld_4+0x44>)
 800cb34:	681b      	ldr	r3, [r3, #0]
 800cb36:	3b0a      	subs	r3, #10
 800cb38:	4a09      	ldr	r2, [pc, #36]	; (800cb60 <Buld_4+0x44>)
 800cb3a:	6013      	str	r3, [r2, #0]
 800cb3c:	4b07      	ldr	r3, [pc, #28]	; (800cb5c <Buld_4+0x40>)
 800cb3e:	6819      	ldr	r1, [r3, #0]
 800cb40:	4b08      	ldr	r3, [pc, #32]	; (800cb64 <Buld_4+0x48>)
 800cb42:	681a      	ldr	r2, [r3, #0]
 800cb44:	4b06      	ldr	r3, [pc, #24]	; (800cb60 <Buld_4+0x44>)
 800cb46:	681b      	ldr	r3, [r3, #0]
 800cb48:	4413      	add	r3, r2
 800cb4a:	b28a      	uxth	r2, r1
 800cb4c:	801a      	strh	r2, [r3, #0]
 800cb4e:	4b04      	ldr	r3, [pc, #16]	; (800cb60 <Buld_4+0x44>)
 800cb50:	681b      	ldr	r3, [r3, #0]
 800cb52:	2b00      	cmp	r3, #0
 800cb54:	d000      	beq.n	800cb58 <Buld_4+0x3c>
 800cb56:	e7ec      	b.n	800cb32 <Buld_4+0x16>
 800cb58:	bf00      	nop
 800cb5a:	bd80      	pop	{r7, pc}
 800cb5c:	20000a40 	.word	0x20000a40
 800cb60:	20000a3c 	.word	0x20000a3c
 800cb64:	20000bec 	.word	0x20000bec

0800cb68 <Draw_Digit_Analog>:
 800cb68:	b480      	push	{r7}
 800cb6a:	b083      	sub	sp, #12
 800cb6c:	af00      	add	r7, sp, #0
 800cb6e:	4603      	mov	r3, r0
 800cb70:	80fb      	strh	r3, [r7, #6]
 800cb72:	88fb      	ldrh	r3, [r7, #6]
 800cb74:	2b01      	cmp	r3, #1
 800cb76:	d144      	bne.n	800cc02 <Draw_Digit_Analog+0x9a>
 800cb78:	4b7d      	ldr	r3, [pc, #500]	; (800cd70 <Draw_Digit_Analog+0x208>)
 800cb7a:	681b      	ldr	r3, [r3, #0]
 800cb7c:	f503 7361 	add.w	r3, r3, #900	; 0x384
 800cb80:	4a7c      	ldr	r2, [pc, #496]	; (800cd74 <Draw_Digit_Analog+0x20c>)
 800cb82:	6013      	str	r3, [r2, #0]
 800cb84:	4b7b      	ldr	r3, [pc, #492]	; (800cd74 <Draw_Digit_Analog+0x20c>)
 800cb86:	681a      	ldr	r2, [r3, #0]
 800cb88:	4b7b      	ldr	r3, [pc, #492]	; (800cd78 <Draw_Digit_Analog+0x210>)
 800cb8a:	681b      	ldr	r3, [r3, #0]
 800cb8c:	4413      	add	r3, r2
 800cb8e:	4a79      	ldr	r2, [pc, #484]	; (800cd74 <Draw_Digit_Analog+0x20c>)
 800cb90:	6013      	str	r3, [r2, #0]
 800cb92:	4b78      	ldr	r3, [pc, #480]	; (800cd74 <Draw_Digit_Analog+0x20c>)
 800cb94:	681b      	ldr	r3, [r3, #0]
 800cb96:	781b      	ldrb	r3, [r3, #0]
 800cb98:	461a      	mov	r2, r3
 800cb9a:	4b78      	ldr	r3, [pc, #480]	; (800cd7c <Draw_Digit_Analog+0x214>)
 800cb9c:	601a      	str	r2, [r3, #0]
 800cb9e:	4b75      	ldr	r3, [pc, #468]	; (800cd74 <Draw_Digit_Analog+0x20c>)
 800cba0:	681b      	ldr	r3, [r3, #0]
 800cba2:	3b01      	subs	r3, #1
 800cba4:	781b      	ldrb	r3, [r3, #0]
 800cba6:	461a      	mov	r2, r3
 800cba8:	4b75      	ldr	r3, [pc, #468]	; (800cd80 <Draw_Digit_Analog+0x218>)
 800cbaa:	601a      	str	r2, [r3, #0]
 800cbac:	4b75      	ldr	r3, [pc, #468]	; (800cd84 <Draw_Digit_Analog+0x21c>)
 800cbae:	681b      	ldr	r3, [r3, #0]
 800cbb0:	085b      	lsrs	r3, r3, #1
 800cbb2:	4a74      	ldr	r2, [pc, #464]	; (800cd84 <Draw_Digit_Analog+0x21c>)
 800cbb4:	6013      	str	r3, [r2, #0]
 800cbb6:	4b71      	ldr	r3, [pc, #452]	; (800cd7c <Draw_Digit_Analog+0x214>)
 800cbb8:	681a      	ldr	r2, [r3, #0]
 800cbba:	4b73      	ldr	r3, [pc, #460]	; (800cd88 <Draw_Digit_Analog+0x220>)
 800cbbc:	681b      	ldr	r3, [r3, #0]
 800cbbe:	4013      	ands	r3, r2
 800cbc0:	4a6e      	ldr	r2, [pc, #440]	; (800cd7c <Draw_Digit_Analog+0x214>)
 800cbc2:	6013      	str	r3, [r2, #0]
 800cbc4:	4b6d      	ldr	r3, [pc, #436]	; (800cd7c <Draw_Digit_Analog+0x214>)
 800cbc6:	681b      	ldr	r3, [r3, #0]
 800cbc8:	2b00      	cmp	r3, #0
 800cbca:	d104      	bne.n	800cbd6 <Draw_Digit_Analog+0x6e>
 800cbcc:	4b6d      	ldr	r3, [pc, #436]	; (800cd84 <Draw_Digit_Analog+0x21c>)
 800cbce:	681b      	ldr	r3, [r3, #0]
 800cbd0:	4a6a      	ldr	r2, [pc, #424]	; (800cd7c <Draw_Digit_Analog+0x214>)
 800cbd2:	6013      	str	r3, [r2, #0]
 800cbd4:	e004      	b.n	800cbe0 <Draw_Digit_Analog+0x78>
 800cbd6:	4b6b      	ldr	r3, [pc, #428]	; (800cd84 <Draw_Digit_Analog+0x21c>)
 800cbd8:	681b      	ldr	r3, [r3, #0]
 800cbda:	331e      	adds	r3, #30
 800cbdc:	4a67      	ldr	r2, [pc, #412]	; (800cd7c <Draw_Digit_Analog+0x214>)
 800cbde:	6013      	str	r3, [r2, #0]
 800cbe0:	4b67      	ldr	r3, [pc, #412]	; (800cd80 <Draw_Digit_Analog+0x218>)
 800cbe2:	681a      	ldr	r2, [r3, #0]
 800cbe4:	4b68      	ldr	r3, [pc, #416]	; (800cd88 <Draw_Digit_Analog+0x220>)
 800cbe6:	681b      	ldr	r3, [r3, #0]
 800cbe8:	4013      	ands	r3, r2
 800cbea:	4a65      	ldr	r2, [pc, #404]	; (800cd80 <Draw_Digit_Analog+0x218>)
 800cbec:	6013      	str	r3, [r2, #0]
 800cbee:	4b64      	ldr	r3, [pc, #400]	; (800cd80 <Draw_Digit_Analog+0x218>)
 800cbf0:	681b      	ldr	r3, [r3, #0]
 800cbf2:	2b00      	cmp	r3, #0
 800cbf4:	d01c      	beq.n	800cc30 <Draw_Digit_Analog+0xc8>
 800cbf6:	4b63      	ldr	r3, [pc, #396]	; (800cd84 <Draw_Digit_Analog+0x21c>)
 800cbf8:	681b      	ldr	r3, [r3, #0]
 800cbfa:	331e      	adds	r3, #30
 800cbfc:	4a61      	ldr	r2, [pc, #388]	; (800cd84 <Draw_Digit_Analog+0x21c>)
 800cbfe:	6013      	str	r3, [r2, #0]
 800cc00:	e016      	b.n	800cc30 <Draw_Digit_Analog+0xc8>
 800cc02:	88fb      	ldrh	r3, [r7, #6]
 800cc04:	2b00      	cmp	r3, #0
 800cc06:	f040 80a5 	bne.w	800cd54 <Draw_Digit_Analog+0x1ec>
 800cc0a:	4b5e      	ldr	r3, [pc, #376]	; (800cd84 <Draw_Digit_Analog+0x21c>)
 800cc0c:	681b      	ldr	r3, [r3, #0]
 800cc0e:	3302      	adds	r3, #2
 800cc10:	4a5c      	ldr	r2, [pc, #368]	; (800cd84 <Draw_Digit_Analog+0x21c>)
 800cc12:	6013      	str	r3, [r2, #0]
 800cc14:	4b5b      	ldr	r3, [pc, #364]	; (800cd84 <Draw_Digit_Analog+0x21c>)
 800cc16:	681b      	ldr	r3, [r3, #0]
 800cc18:	781b      	ldrb	r3, [r3, #0]
 800cc1a:	461a      	mov	r2, r3
 800cc1c:	4b57      	ldr	r3, [pc, #348]	; (800cd7c <Draw_Digit_Analog+0x214>)
 800cc1e:	601a      	str	r2, [r3, #0]
 800cc20:	4b58      	ldr	r3, [pc, #352]	; (800cd84 <Draw_Digit_Analog+0x21c>)
 800cc22:	681b      	ldr	r3, [r3, #0]
 800cc24:	3b01      	subs	r3, #1
 800cc26:	781b      	ldrb	r3, [r3, #0]
 800cc28:	461a      	mov	r2, r3
 800cc2a:	4b56      	ldr	r3, [pc, #344]	; (800cd84 <Draw_Digit_Analog+0x21c>)
 800cc2c:	601a      	str	r2, [r3, #0]
 800cc2e:	e000      	b.n	800cc32 <Draw_Digit_Analog+0xca>
 800cc30:	bf00      	nop
 800cc32:	4b52      	ldr	r3, [pc, #328]	; (800cd7c <Draw_Digit_Analog+0x214>)
 800cc34:	681b      	ldr	r3, [r3, #0]
 800cc36:	2bff      	cmp	r3, #255	; 0xff
 800cc38:	f000 808e 	beq.w	800cd58 <Draw_Digit_Analog+0x1f0>
 800cc3c:	4b4f      	ldr	r3, [pc, #316]	; (800cd7c <Draw_Digit_Analog+0x214>)
 800cc3e:	681b      	ldr	r3, [r3, #0]
 800cc40:	2b00      	cmp	r3, #0
 800cc42:	f000 808b 	beq.w	800cd5c <Draw_Digit_Analog+0x1f4>
 800cc46:	4b4f      	ldr	r3, [pc, #316]	; (800cd84 <Draw_Digit_Analog+0x21c>)
 800cc48:	681a      	ldr	r2, [r3, #0]
 800cc4a:	4b4c      	ldr	r3, [pc, #304]	; (800cd7c <Draw_Digit_Analog+0x214>)
 800cc4c:	681b      	ldr	r3, [r3, #0]
 800cc4e:	429a      	cmp	r2, r3
 800cc50:	d80b      	bhi.n	800cc6a <Draw_Digit_Analog+0x102>
 800cc52:	4b4c      	ldr	r3, [pc, #304]	; (800cd84 <Draw_Digit_Analog+0x21c>)
 800cc54:	681b      	ldr	r3, [r3, #0]
 800cc56:	4a4a      	ldr	r2, [pc, #296]	; (800cd80 <Draw_Digit_Analog+0x218>)
 800cc58:	6013      	str	r3, [r2, #0]
 800cc5a:	4b48      	ldr	r3, [pc, #288]	; (800cd7c <Draw_Digit_Analog+0x214>)
 800cc5c:	681a      	ldr	r2, [r3, #0]
 800cc5e:	4b49      	ldr	r3, [pc, #292]	; (800cd84 <Draw_Digit_Analog+0x21c>)
 800cc60:	681b      	ldr	r3, [r3, #0]
 800cc62:	1ad3      	subs	r3, r2, r3
 800cc64:	4a45      	ldr	r2, [pc, #276]	; (800cd7c <Draw_Digit_Analog+0x214>)
 800cc66:	6013      	str	r3, [r2, #0]
 800cc68:	e00a      	b.n	800cc80 <Draw_Digit_Analog+0x118>
 800cc6a:	4b44      	ldr	r3, [pc, #272]	; (800cd7c <Draw_Digit_Analog+0x214>)
 800cc6c:	681b      	ldr	r3, [r3, #0]
 800cc6e:	4a44      	ldr	r2, [pc, #272]	; (800cd80 <Draw_Digit_Analog+0x218>)
 800cc70:	6013      	str	r3, [r2, #0]
 800cc72:	4b44      	ldr	r3, [pc, #272]	; (800cd84 <Draw_Digit_Analog+0x21c>)
 800cc74:	681a      	ldr	r2, [r3, #0]
 800cc76:	4b41      	ldr	r3, [pc, #260]	; (800cd7c <Draw_Digit_Analog+0x214>)
 800cc78:	681b      	ldr	r3, [r3, #0]
 800cc7a:	1ad3      	subs	r3, r2, r3
 800cc7c:	4a3f      	ldr	r2, [pc, #252]	; (800cd7c <Draw_Digit_Analog+0x214>)
 800cc7e:	6013      	str	r3, [r2, #0]
 800cc80:	4b3f      	ldr	r3, [pc, #252]	; (800cd80 <Draw_Digit_Analog+0x218>)
 800cc82:	681b      	ldr	r3, [r3, #0]
 800cc84:	2bc7      	cmp	r3, #199	; 0xc7
 800cc86:	d86b      	bhi.n	800cd60 <Draw_Digit_Analog+0x1f8>
 800cc88:	4b3c      	ldr	r3, [pc, #240]	; (800cd7c <Draw_Digit_Analog+0x214>)
 800cc8a:	681a      	ldr	r2, [r3, #0]
 800cc8c:	4b3c      	ldr	r3, [pc, #240]	; (800cd80 <Draw_Digit_Analog+0x218>)
 800cc8e:	681b      	ldr	r3, [r3, #0]
 800cc90:	4413      	add	r3, r2
 800cc92:	4a3c      	ldr	r2, [pc, #240]	; (800cd84 <Draw_Digit_Analog+0x21c>)
 800cc94:	6013      	str	r3, [r2, #0]
 800cc96:	4b3b      	ldr	r3, [pc, #236]	; (800cd84 <Draw_Digit_Analog+0x21c>)
 800cc98:	681b      	ldr	r3, [r3, #0]
 800cc9a:	2bc7      	cmp	r3, #199	; 0xc7
 800cc9c:	d906      	bls.n	800ccac <Draw_Digit_Analog+0x144>
 800cc9e:	4b38      	ldr	r3, [pc, #224]	; (800cd80 <Draw_Digit_Analog+0x218>)
 800cca0:	681b      	ldr	r3, [r3, #0]
 800cca2:	f1c3 03c7 	rsb	r3, r3, #199	; 0xc7
 800cca6:	4a35      	ldr	r2, [pc, #212]	; (800cd7c <Draw_Digit_Analog+0x214>)
 800cca8:	6013      	str	r3, [r2, #0]
 800ccaa:	e020      	b.n	800ccee <Draw_Digit_Analog+0x186>
 800ccac:	4b35      	ldr	r3, [pc, #212]	; (800cd84 <Draw_Digit_Analog+0x21c>)
 800ccae:	681b      	ldr	r3, [r3, #0]
 800ccb0:	2b02      	cmp	r3, #2
 800ccb2:	d957      	bls.n	800cd64 <Draw_Digit_Analog+0x1fc>
 800ccb4:	4b32      	ldr	r3, [pc, #200]	; (800cd80 <Draw_Digit_Analog+0x218>)
 800ccb6:	681b      	ldr	r3, [r3, #0]
 800ccb8:	2b02      	cmp	r3, #2
 800ccba:	d808      	bhi.n	800ccce <Draw_Digit_Analog+0x166>
 800ccbc:	4b30      	ldr	r3, [pc, #192]	; (800cd80 <Draw_Digit_Analog+0x218>)
 800ccbe:	2203      	movs	r2, #3
 800ccc0:	601a      	str	r2, [r3, #0]
 800ccc2:	4b30      	ldr	r3, [pc, #192]	; (800cd84 <Draw_Digit_Analog+0x21c>)
 800ccc4:	681b      	ldr	r3, [r3, #0]
 800ccc6:	3b03      	subs	r3, #3
 800ccc8:	4a2c      	ldr	r2, [pc, #176]	; (800cd7c <Draw_Digit_Analog+0x214>)
 800ccca:	6013      	str	r3, [r2, #0]
 800cccc:	e00f      	b.n	800ccee <Draw_Digit_Analog+0x186>
 800ccce:	4b2b      	ldr	r3, [pc, #172]	; (800cd7c <Draw_Digit_Analog+0x214>)
 800ccd0:	681b      	ldr	r3, [r3, #0]
 800ccd2:	2b00      	cmp	r3, #0
 800ccd4:	d10a      	bne.n	800ccec <Draw_Digit_Analog+0x184>
 800ccd6:	4b2a      	ldr	r3, [pc, #168]	; (800cd80 <Draw_Digit_Analog+0x218>)
 800ccd8:	681b      	ldr	r3, [r3, #0]
 800ccda:	3b01      	subs	r3, #1
 800ccdc:	4a28      	ldr	r2, [pc, #160]	; (800cd80 <Draw_Digit_Analog+0x218>)
 800ccde:	6013      	str	r3, [r2, #0]
 800cce0:	4b26      	ldr	r3, [pc, #152]	; (800cd7c <Draw_Digit_Analog+0x214>)
 800cce2:	681b      	ldr	r3, [r3, #0]
 800cce4:	3302      	adds	r3, #2
 800cce6:	4a25      	ldr	r2, [pc, #148]	; (800cd7c <Draw_Digit_Analog+0x214>)
 800cce8:	6013      	str	r3, [r2, #0]
 800ccea:	e000      	b.n	800ccee <Draw_Digit_Analog+0x186>
 800ccec:	bf00      	nop
 800ccee:	4b23      	ldr	r3, [pc, #140]	; (800cd7c <Draw_Digit_Analog+0x214>)
 800ccf0:	681b      	ldr	r3, [r3, #0]
 800ccf2:	2b13      	cmp	r3, #19
 800ccf4:	d904      	bls.n	800cd00 <Draw_Digit_Analog+0x198>
 800ccf6:	4b25      	ldr	r3, [pc, #148]	; (800cd8c <Draw_Digit_Analog+0x224>)
 800ccf8:	681b      	ldr	r3, [r3, #0]
 800ccfa:	3314      	adds	r3, #20
 800ccfc:	4a23      	ldr	r2, [pc, #140]	; (800cd8c <Draw_Digit_Analog+0x224>)
 800ccfe:	6013      	str	r3, [r2, #0]
 800cd00:	4b23      	ldr	r3, [pc, #140]	; (800cd90 <Draw_Digit_Analog+0x228>)
 800cd02:	681a      	ldr	r2, [r3, #0]
 800cd04:	4b21      	ldr	r3, [pc, #132]	; (800cd8c <Draw_Digit_Analog+0x224>)
 800cd06:	681b      	ldr	r3, [r3, #0]
 800cd08:	4413      	add	r3, r2
 800cd0a:	881b      	ldrh	r3, [r3, #0]
 800cd0c:	461a      	mov	r2, r3
 800cd0e:	4b1f      	ldr	r3, [pc, #124]	; (800cd8c <Draw_Digit_Analog+0x224>)
 800cd10:	601a      	str	r2, [r3, #0]
 800cd12:	4b1b      	ldr	r3, [pc, #108]	; (800cd80 <Draw_Digit_Analog+0x218>)
 800cd14:	681b      	ldr	r3, [r3, #0]
 800cd16:	005b      	lsls	r3, r3, #1
 800cd18:	4a19      	ldr	r2, [pc, #100]	; (800cd80 <Draw_Digit_Analog+0x218>)
 800cd1a:	6013      	str	r3, [r2, #0]
 800cd1c:	4b18      	ldr	r3, [pc, #96]	; (800cd80 <Draw_Digit_Analog+0x218>)
 800cd1e:	681b      	ldr	r3, [r3, #0]
 800cd20:	085b      	lsrs	r3, r3, #1
 800cd22:	f1c3 03cc 	rsb	r3, r3, #204	; 0xcc
 800cd26:	005b      	lsls	r3, r3, #1
 800cd28:	4a1a      	ldr	r2, [pc, #104]	; (800cd94 <Draw_Digit_Analog+0x22c>)
 800cd2a:	4413      	add	r3, r2
 800cd2c:	461a      	mov	r2, r3
 800cd2e:	4b14      	ldr	r3, [pc, #80]	; (800cd80 <Draw_Digit_Analog+0x218>)
 800cd30:	601a      	str	r2, [r3, #0]
 800cd32:	4b16      	ldr	r3, [pc, #88]	; (800cd8c <Draw_Digit_Analog+0x224>)
 800cd34:	681a      	ldr	r2, [r3, #0]
 800cd36:	4b12      	ldr	r3, [pc, #72]	; (800cd80 <Draw_Digit_Analog+0x218>)
 800cd38:	681b      	ldr	r3, [r3, #0]
 800cd3a:	b292      	uxth	r2, r2
 800cd3c:	801a      	strh	r2, [r3, #0]
 800cd3e:	4b10      	ldr	r3, [pc, #64]	; (800cd80 <Draw_Digit_Analog+0x218>)
 800cd40:	681b      	ldr	r3, [r3, #0]
 800cd42:	3302      	adds	r3, #2
 800cd44:	4a0e      	ldr	r2, [pc, #56]	; (800cd80 <Draw_Digit_Analog+0x218>)
 800cd46:	6013      	str	r3, [r2, #0]
 800cd48:	4b0c      	ldr	r3, [pc, #48]	; (800cd7c <Draw_Digit_Analog+0x214>)
 800cd4a:	681b      	ldr	r3, [r3, #0]
 800cd4c:	3b01      	subs	r3, #1
 800cd4e:	4a0b      	ldr	r2, [pc, #44]	; (800cd7c <Draw_Digit_Analog+0x214>)
 800cd50:	6013      	str	r3, [r2, #0]
 800cd52:	e7ee      	b.n	800cd32 <Draw_Digit_Analog+0x1ca>
 800cd54:	bf00      	nop
 800cd56:	e006      	b.n	800cd66 <Draw_Digit_Analog+0x1fe>
 800cd58:	bf00      	nop
 800cd5a:	e004      	b.n	800cd66 <Draw_Digit_Analog+0x1fe>
 800cd5c:	bf00      	nop
 800cd5e:	e002      	b.n	800cd66 <Draw_Digit_Analog+0x1fe>
 800cd60:	bf00      	nop
 800cd62:	e000      	b.n	800cd66 <Draw_Digit_Analog+0x1fe>
 800cd64:	bf00      	nop
 800cd66:	370c      	adds	r7, #12
 800cd68:	46bd      	mov	sp, r7
 800cd6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd6e:	4770      	bx	lr
 800cd70:	20000a44 	.word	0x20000a44
 800cd74:	20000c00 	.word	0x20000c00
 800cd78:	20000bf8 	.word	0x20000bf8
 800cd7c:	20000a3c 	.word	0x20000a3c
 800cd80:	20000be8 	.word	0x20000be8
 800cd84:	20000bec 	.word	0x20000bec
 800cd88:	20000a38 	.word	0x20000a38
 800cd8c:	20000a40 	.word	0x20000a40
 800cd90:	20000bf0 	.word	0x20000bf0
 800cd94:	20000a48 	.word	0x20000a48

0800cd98 <Cursor_0>:
 800cd98:	b480      	push	{r7}
 800cd9a:	b083      	sub	sp, #12
 800cd9c:	af00      	add	r7, sp, #0
 800cd9e:	6078      	str	r0, [r7, #4]
 800cda0:	4b3c      	ldr	r3, [pc, #240]	; (800ce94 <Cursor_0+0xfc>)
 800cda2:	2206      	movs	r2, #6
 800cda4:	601a      	str	r2, [r3, #0]
 800cda6:	4b3c      	ldr	r3, [pc, #240]	; (800ce98 <Cursor_0+0x100>)
 800cda8:	4a3c      	ldr	r2, [pc, #240]	; (800ce9c <Cursor_0+0x104>)
 800cdaa:	601a      	str	r2, [r3, #0]
 800cdac:	4b39      	ldr	r3, [pc, #228]	; (800ce94 <Cursor_0+0xfc>)
 800cdae:	681b      	ldr	r3, [r3, #0]
 800cdb0:	005b      	lsls	r3, r3, #1
 800cdb2:	687a      	ldr	r2, [r7, #4]
 800cdb4:	4413      	add	r3, r2
 800cdb6:	f9b3 3000 	ldrsh.w	r3, [r3]
 800cdba:	461a      	mov	r2, r3
 800cdbc:	4b38      	ldr	r3, [pc, #224]	; (800cea0 <Cursor_0+0x108>)
 800cdbe:	601a      	str	r2, [r3, #0]
 800cdc0:	4b37      	ldr	r3, [pc, #220]	; (800cea0 <Cursor_0+0x108>)
 800cdc2:	681b      	ldr	r3, [r3, #0]
 800cdc4:	f003 0301 	and.w	r3, r3, #1
 800cdc8:	2b00      	cmp	r3, #0
 800cdca:	d15c      	bne.n	800ce86 <Cursor_0+0xee>
 800cdcc:	4b31      	ldr	r3, [pc, #196]	; (800ce94 <Cursor_0+0xfc>)
 800cdce:	681b      	ldr	r3, [r3, #0]
 800cdd0:	330a      	adds	r3, #10
 800cdd2:	005b      	lsls	r3, r3, #1
 800cdd4:	687a      	ldr	r2, [r7, #4]
 800cdd6:	4413      	add	r3, r2
 800cdd8:	f9b3 3000 	ldrsh.w	r3, [r3]
 800cddc:	461a      	mov	r2, r3
 800cdde:	4b30      	ldr	r3, [pc, #192]	; (800cea0 <Cursor_0+0x108>)
 800cde0:	601a      	str	r2, [r3, #0]
 800cde2:	4b2f      	ldr	r3, [pc, #188]	; (800cea0 <Cursor_0+0x108>)
 800cde4:	681b      	ldr	r3, [r3, #0]
 800cde6:	085b      	lsrs	r3, r3, #1
 800cde8:	f1c3 03cc 	rsb	r3, r3, #204	; 0xcc
 800cdec:	005b      	lsls	r3, r3, #1
 800cdee:	4a2d      	ldr	r2, [pc, #180]	; (800cea4 <Cursor_0+0x10c>)
 800cdf0:	4413      	add	r3, r2
 800cdf2:	4a29      	ldr	r2, [pc, #164]	; (800ce98 <Cursor_0+0x100>)
 800cdf4:	6013      	str	r3, [r2, #0]
 800cdf6:	4b27      	ldr	r3, [pc, #156]	; (800ce94 <Cursor_0+0xfc>)
 800cdf8:	681b      	ldr	r3, [r3, #0]
 800cdfa:	3314      	adds	r3, #20
 800cdfc:	005b      	lsls	r3, r3, #1
 800cdfe:	687a      	ldr	r2, [r7, #4]
 800ce00:	4413      	add	r3, r2
 800ce02:	f9b3 3000 	ldrsh.w	r3, [r3]
 800ce06:	461a      	mov	r2, r3
 800ce08:	4b27      	ldr	r3, [pc, #156]	; (800cea8 <Cursor_0+0x110>)
 800ce0a:	601a      	str	r2, [r3, #0]
 800ce0c:	4b22      	ldr	r3, [pc, #136]	; (800ce98 <Cursor_0+0x100>)
 800ce0e:	681b      	ldr	r3, [r3, #0]
 800ce10:	3b04      	subs	r3, #4
 800ce12:	4a21      	ldr	r2, [pc, #132]	; (800ce98 <Cursor_0+0x100>)
 800ce14:	6013      	str	r3, [r2, #0]
 800ce16:	4b24      	ldr	r3, [pc, #144]	; (800cea8 <Cursor_0+0x110>)
 800ce18:	681a      	ldr	r2, [r3, #0]
 800ce1a:	4b1f      	ldr	r3, [pc, #124]	; (800ce98 <Cursor_0+0x100>)
 800ce1c:	681b      	ldr	r3, [r3, #0]
 800ce1e:	b292      	uxth	r2, r2
 800ce20:	801a      	strh	r2, [r3, #0]
 800ce22:	4b1d      	ldr	r3, [pc, #116]	; (800ce98 <Cursor_0+0x100>)
 800ce24:	681b      	ldr	r3, [r3, #0]
 800ce26:	3302      	adds	r3, #2
 800ce28:	4a1b      	ldr	r2, [pc, #108]	; (800ce98 <Cursor_0+0x100>)
 800ce2a:	6013      	str	r3, [r2, #0]
 800ce2c:	4b1e      	ldr	r3, [pc, #120]	; (800cea8 <Cursor_0+0x110>)
 800ce2e:	681a      	ldr	r2, [r3, #0]
 800ce30:	4b19      	ldr	r3, [pc, #100]	; (800ce98 <Cursor_0+0x100>)
 800ce32:	681b      	ldr	r3, [r3, #0]
 800ce34:	b292      	uxth	r2, r2
 800ce36:	801a      	strh	r2, [r3, #0]
 800ce38:	4b17      	ldr	r3, [pc, #92]	; (800ce98 <Cursor_0+0x100>)
 800ce3a:	681b      	ldr	r3, [r3, #0]
 800ce3c:	3302      	adds	r3, #2
 800ce3e:	4a16      	ldr	r2, [pc, #88]	; (800ce98 <Cursor_0+0x100>)
 800ce40:	6013      	str	r3, [r2, #0]
 800ce42:	4b19      	ldr	r3, [pc, #100]	; (800cea8 <Cursor_0+0x110>)
 800ce44:	681a      	ldr	r2, [r3, #0]
 800ce46:	4b14      	ldr	r3, [pc, #80]	; (800ce98 <Cursor_0+0x100>)
 800ce48:	681b      	ldr	r3, [r3, #0]
 800ce4a:	b292      	uxth	r2, r2
 800ce4c:	801a      	strh	r2, [r3, #0]
 800ce4e:	4b12      	ldr	r3, [pc, #72]	; (800ce98 <Cursor_0+0x100>)
 800ce50:	681b      	ldr	r3, [r3, #0]
 800ce52:	3302      	adds	r3, #2
 800ce54:	4a10      	ldr	r2, [pc, #64]	; (800ce98 <Cursor_0+0x100>)
 800ce56:	6013      	str	r3, [r2, #0]
 800ce58:	4b13      	ldr	r3, [pc, #76]	; (800cea8 <Cursor_0+0x110>)
 800ce5a:	681a      	ldr	r2, [r3, #0]
 800ce5c:	4b0e      	ldr	r3, [pc, #56]	; (800ce98 <Cursor_0+0x100>)
 800ce5e:	681b      	ldr	r3, [r3, #0]
 800ce60:	b292      	uxth	r2, r2
 800ce62:	801a      	strh	r2, [r3, #0]
 800ce64:	4b0c      	ldr	r3, [pc, #48]	; (800ce98 <Cursor_0+0x100>)
 800ce66:	681b      	ldr	r3, [r3, #0]
 800ce68:	3302      	adds	r3, #2
 800ce6a:	4a0b      	ldr	r2, [pc, #44]	; (800ce98 <Cursor_0+0x100>)
 800ce6c:	6013      	str	r3, [r2, #0]
 800ce6e:	4b0e      	ldr	r3, [pc, #56]	; (800cea8 <Cursor_0+0x110>)
 800ce70:	681a      	ldr	r2, [r3, #0]
 800ce72:	4b09      	ldr	r3, [pc, #36]	; (800ce98 <Cursor_0+0x100>)
 800ce74:	681b      	ldr	r3, [r3, #0]
 800ce76:	b292      	uxth	r2, r2
 800ce78:	801a      	strh	r2, [r3, #0]
 800ce7a:	4b07      	ldr	r3, [pc, #28]	; (800ce98 <Cursor_0+0x100>)
 800ce7c:	681b      	ldr	r3, [r3, #0]
 800ce7e:	3302      	adds	r3, #2
 800ce80:	4a05      	ldr	r2, [pc, #20]	; (800ce98 <Cursor_0+0x100>)
 800ce82:	6013      	str	r3, [r2, #0]
 800ce84:	e000      	b.n	800ce88 <Cursor_0+0xf0>
 800ce86:	bf00      	nop
 800ce88:	4b02      	ldr	r3, [pc, #8]	; (800ce94 <Cursor_0+0xfc>)
 800ce8a:	681b      	ldr	r3, [r3, #0]
 800ce8c:	3b01      	subs	r3, #1
 800ce8e:	4a01      	ldr	r2, [pc, #4]	; (800ce94 <Cursor_0+0xfc>)
 800ce90:	6013      	str	r3, [r2, #0]
 800ce92:	e78b      	b.n	800cdac <Cursor_0+0x14>
 800ce94:	20000a40 	.word	0x20000a40
 800ce98:	20000bec 	.word	0x20000bec
 800ce9c:	20000be0 	.word	0x20000be0
 800cea0:	20000a3c 	.word	0x20000a3c
 800cea4:	20000a48 	.word	0x20000a48
 800cea8:	20000be8 	.word	0x20000be8

0800ceac <Cursor_1>:
 800ceac:	b480      	push	{r7}
 800ceae:	b083      	sub	sp, #12
 800ceb0:	af00      	add	r7, sp, #0
 800ceb2:	6078      	str	r0, [r7, #4]
 800ceb4:	4b31      	ldr	r3, [pc, #196]	; (800cf7c <Cursor_1+0xd0>)
 800ceb6:	2206      	movs	r2, #6
 800ceb8:	601a      	str	r2, [r3, #0]
 800ceba:	4b31      	ldr	r3, [pc, #196]	; (800cf80 <Cursor_1+0xd4>)
 800cebc:	4a31      	ldr	r2, [pc, #196]	; (800cf84 <Cursor_1+0xd8>)
 800cebe:	601a      	str	r2, [r3, #0]
 800cec0:	4b2e      	ldr	r3, [pc, #184]	; (800cf7c <Cursor_1+0xd0>)
 800cec2:	681b      	ldr	r3, [r3, #0]
 800cec4:	005b      	lsls	r3, r3, #1
 800cec6:	687a      	ldr	r2, [r7, #4]
 800cec8:	4413      	add	r3, r2
 800ceca:	f9b3 3000 	ldrsh.w	r3, [r3]
 800cece:	461a      	mov	r2, r3
 800ced0:	4b2d      	ldr	r3, [pc, #180]	; (800cf88 <Cursor_1+0xdc>)
 800ced2:	601a      	str	r2, [r3, #0]
 800ced4:	4b2c      	ldr	r3, [pc, #176]	; (800cf88 <Cursor_1+0xdc>)
 800ced6:	681b      	ldr	r3, [r3, #0]
 800ced8:	f003 0301 	and.w	r3, r3, #1
 800cedc:	2b00      	cmp	r3, #0
 800cede:	d146      	bne.n	800cf6e <Cursor_1+0xc2>
 800cee0:	4b26      	ldr	r3, [pc, #152]	; (800cf7c <Cursor_1+0xd0>)
 800cee2:	681b      	ldr	r3, [r3, #0]
 800cee4:	330a      	adds	r3, #10
 800cee6:	005b      	lsls	r3, r3, #1
 800cee8:	687a      	ldr	r2, [r7, #4]
 800ceea:	4413      	add	r3, r2
 800ceec:	f9b3 3000 	ldrsh.w	r3, [r3]
 800cef0:	461a      	mov	r2, r3
 800cef2:	4b25      	ldr	r3, [pc, #148]	; (800cf88 <Cursor_1+0xdc>)
 800cef4:	601a      	str	r2, [r3, #0]
 800cef6:	4b24      	ldr	r3, [pc, #144]	; (800cf88 <Cursor_1+0xdc>)
 800cef8:	681b      	ldr	r3, [r3, #0]
 800cefa:	085b      	lsrs	r3, r3, #1
 800cefc:	f1c3 03cc 	rsb	r3, r3, #204	; 0xcc
 800cf00:	005b      	lsls	r3, r3, #1
 800cf02:	4a22      	ldr	r2, [pc, #136]	; (800cf8c <Cursor_1+0xe0>)
 800cf04:	4413      	add	r3, r2
 800cf06:	4a1e      	ldr	r2, [pc, #120]	; (800cf80 <Cursor_1+0xd4>)
 800cf08:	6013      	str	r3, [r2, #0]
 800cf0a:	4b1c      	ldr	r3, [pc, #112]	; (800cf7c <Cursor_1+0xd0>)
 800cf0c:	681b      	ldr	r3, [r3, #0]
 800cf0e:	3314      	adds	r3, #20
 800cf10:	005b      	lsls	r3, r3, #1
 800cf12:	687a      	ldr	r2, [r7, #4]
 800cf14:	4413      	add	r3, r2
 800cf16:	f9b3 3000 	ldrsh.w	r3, [r3]
 800cf1a:	461a      	mov	r2, r3
 800cf1c:	4b1c      	ldr	r3, [pc, #112]	; (800cf90 <Cursor_1+0xe4>)
 800cf1e:	601a      	str	r2, [r3, #0]
 800cf20:	4b17      	ldr	r3, [pc, #92]	; (800cf80 <Cursor_1+0xd4>)
 800cf22:	681b      	ldr	r3, [r3, #0]
 800cf24:	3b02      	subs	r3, #2
 800cf26:	4a16      	ldr	r2, [pc, #88]	; (800cf80 <Cursor_1+0xd4>)
 800cf28:	6013      	str	r3, [r2, #0]
 800cf2a:	4b19      	ldr	r3, [pc, #100]	; (800cf90 <Cursor_1+0xe4>)
 800cf2c:	681a      	ldr	r2, [r3, #0]
 800cf2e:	4b14      	ldr	r3, [pc, #80]	; (800cf80 <Cursor_1+0xd4>)
 800cf30:	681b      	ldr	r3, [r3, #0]
 800cf32:	b292      	uxth	r2, r2
 800cf34:	801a      	strh	r2, [r3, #0]
 800cf36:	4b12      	ldr	r3, [pc, #72]	; (800cf80 <Cursor_1+0xd4>)
 800cf38:	681b      	ldr	r3, [r3, #0]
 800cf3a:	3302      	adds	r3, #2
 800cf3c:	4a10      	ldr	r2, [pc, #64]	; (800cf80 <Cursor_1+0xd4>)
 800cf3e:	6013      	str	r3, [r2, #0]
 800cf40:	4b13      	ldr	r3, [pc, #76]	; (800cf90 <Cursor_1+0xe4>)
 800cf42:	681a      	ldr	r2, [r3, #0]
 800cf44:	4b0e      	ldr	r3, [pc, #56]	; (800cf80 <Cursor_1+0xd4>)
 800cf46:	681b      	ldr	r3, [r3, #0]
 800cf48:	b292      	uxth	r2, r2
 800cf4a:	801a      	strh	r2, [r3, #0]
 800cf4c:	4b0c      	ldr	r3, [pc, #48]	; (800cf80 <Cursor_1+0xd4>)
 800cf4e:	681b      	ldr	r3, [r3, #0]
 800cf50:	3302      	adds	r3, #2
 800cf52:	4a0b      	ldr	r2, [pc, #44]	; (800cf80 <Cursor_1+0xd4>)
 800cf54:	6013      	str	r3, [r2, #0]
 800cf56:	4b0e      	ldr	r3, [pc, #56]	; (800cf90 <Cursor_1+0xe4>)
 800cf58:	681a      	ldr	r2, [r3, #0]
 800cf5a:	4b09      	ldr	r3, [pc, #36]	; (800cf80 <Cursor_1+0xd4>)
 800cf5c:	681b      	ldr	r3, [r3, #0]
 800cf5e:	b292      	uxth	r2, r2
 800cf60:	801a      	strh	r2, [r3, #0]
 800cf62:	4b07      	ldr	r3, [pc, #28]	; (800cf80 <Cursor_1+0xd4>)
 800cf64:	681b      	ldr	r3, [r3, #0]
 800cf66:	3302      	adds	r3, #2
 800cf68:	4a05      	ldr	r2, [pc, #20]	; (800cf80 <Cursor_1+0xd4>)
 800cf6a:	6013      	str	r3, [r2, #0]
 800cf6c:	e000      	b.n	800cf70 <Cursor_1+0xc4>
 800cf6e:	bf00      	nop
 800cf70:	4b02      	ldr	r3, [pc, #8]	; (800cf7c <Cursor_1+0xd0>)
 800cf72:	681b      	ldr	r3, [r3, #0]
 800cf74:	3b01      	subs	r3, #1
 800cf76:	4a01      	ldr	r2, [pc, #4]	; (800cf7c <Cursor_1+0xd0>)
 800cf78:	6013      	str	r3, [r2, #0]
 800cf7a:	e7a1      	b.n	800cec0 <Cursor_1+0x14>
 800cf7c:	20000a40 	.word	0x20000a40
 800cf80:	20000bec 	.word	0x20000bec
 800cf84:	20000be0 	.word	0x20000be0
 800cf88:	20000a3c 	.word	0x20000a3c
 800cf8c:	20000a48 	.word	0x20000a48
 800cf90:	20000be8 	.word	0x20000be8

0800cf94 <Cursor_2>:
 800cf94:	b480      	push	{r7}
 800cf96:	b083      	sub	sp, #12
 800cf98:	af00      	add	r7, sp, #0
 800cf9a:	6078      	str	r0, [r7, #4]
 800cf9c:	4b21      	ldr	r3, [pc, #132]	; (800d024 <Cursor_2+0x90>)
 800cf9e:	2206      	movs	r2, #6
 800cfa0:	601a      	str	r2, [r3, #0]
 800cfa2:	4b21      	ldr	r3, [pc, #132]	; (800d028 <Cursor_2+0x94>)
 800cfa4:	4a21      	ldr	r2, [pc, #132]	; (800d02c <Cursor_2+0x98>)
 800cfa6:	601a      	str	r2, [r3, #0]
 800cfa8:	4b1e      	ldr	r3, [pc, #120]	; (800d024 <Cursor_2+0x90>)
 800cfaa:	681b      	ldr	r3, [r3, #0]
 800cfac:	005b      	lsls	r3, r3, #1
 800cfae:	687a      	ldr	r2, [r7, #4]
 800cfb0:	4413      	add	r3, r2
 800cfb2:	f9b3 3000 	ldrsh.w	r3, [r3]
 800cfb6:	461a      	mov	r2, r3
 800cfb8:	4b1d      	ldr	r3, [pc, #116]	; (800d030 <Cursor_2+0x9c>)
 800cfba:	601a      	str	r2, [r3, #0]
 800cfbc:	4b1c      	ldr	r3, [pc, #112]	; (800d030 <Cursor_2+0x9c>)
 800cfbe:	681b      	ldr	r3, [r3, #0]
 800cfc0:	f003 0301 	and.w	r3, r3, #1
 800cfc4:	2b00      	cmp	r3, #0
 800cfc6:	d126      	bne.n	800d016 <Cursor_2+0x82>
 800cfc8:	4b16      	ldr	r3, [pc, #88]	; (800d024 <Cursor_2+0x90>)
 800cfca:	681b      	ldr	r3, [r3, #0]
 800cfcc:	330a      	adds	r3, #10
 800cfce:	005b      	lsls	r3, r3, #1
 800cfd0:	687a      	ldr	r2, [r7, #4]
 800cfd2:	4413      	add	r3, r2
 800cfd4:	f9b3 3000 	ldrsh.w	r3, [r3]
 800cfd8:	461a      	mov	r2, r3
 800cfda:	4b15      	ldr	r3, [pc, #84]	; (800d030 <Cursor_2+0x9c>)
 800cfdc:	601a      	str	r2, [r3, #0]
 800cfde:	4b14      	ldr	r3, [pc, #80]	; (800d030 <Cursor_2+0x9c>)
 800cfe0:	681b      	ldr	r3, [r3, #0]
 800cfe2:	085b      	lsrs	r3, r3, #1
 800cfe4:	f1c3 03cc 	rsb	r3, r3, #204	; 0xcc
 800cfe8:	005b      	lsls	r3, r3, #1
 800cfea:	4a12      	ldr	r2, [pc, #72]	; (800d034 <Cursor_2+0xa0>)
 800cfec:	4413      	add	r3, r2
 800cfee:	4a0e      	ldr	r2, [pc, #56]	; (800d028 <Cursor_2+0x94>)
 800cff0:	6013      	str	r3, [r2, #0]
 800cff2:	4b0c      	ldr	r3, [pc, #48]	; (800d024 <Cursor_2+0x90>)
 800cff4:	681b      	ldr	r3, [r3, #0]
 800cff6:	3314      	adds	r3, #20
 800cff8:	005b      	lsls	r3, r3, #1
 800cffa:	687a      	ldr	r2, [r7, #4]
 800cffc:	4413      	add	r3, r2
 800cffe:	f9b3 3000 	ldrsh.w	r3, [r3]
 800d002:	461a      	mov	r2, r3
 800d004:	4b0c      	ldr	r3, [pc, #48]	; (800d038 <Cursor_2+0xa4>)
 800d006:	601a      	str	r2, [r3, #0]
 800d008:	4b0b      	ldr	r3, [pc, #44]	; (800d038 <Cursor_2+0xa4>)
 800d00a:	681a      	ldr	r2, [r3, #0]
 800d00c:	4b06      	ldr	r3, [pc, #24]	; (800d028 <Cursor_2+0x94>)
 800d00e:	681b      	ldr	r3, [r3, #0]
 800d010:	b292      	uxth	r2, r2
 800d012:	801a      	strh	r2, [r3, #0]
 800d014:	e000      	b.n	800d018 <Cursor_2+0x84>
 800d016:	bf00      	nop
 800d018:	4b02      	ldr	r3, [pc, #8]	; (800d024 <Cursor_2+0x90>)
 800d01a:	681b      	ldr	r3, [r3, #0]
 800d01c:	3b01      	subs	r3, #1
 800d01e:	4a01      	ldr	r2, [pc, #4]	; (800d024 <Cursor_2+0x90>)
 800d020:	6013      	str	r3, [r2, #0]
 800d022:	e7c1      	b.n	800cfa8 <Cursor_2+0x14>
 800d024:	20000a40 	.word	0x20000a40
 800d028:	20000bec 	.word	0x20000bec
 800d02c:	20000be0 	.word	0x20000be0
 800d030:	20000a3c 	.word	0x20000a3c
 800d034:	20000a48 	.word	0x20000a48
 800d038:	20000be8 	.word	0x20000be8

0800d03c <Cursor_3>:
 800d03c:	b480      	push	{r7}
 800d03e:	b083      	sub	sp, #12
 800d040:	af00      	add	r7, sp, #0
 800d042:	6078      	str	r0, [r7, #4]
 800d044:	4b2a      	ldr	r3, [pc, #168]	; (800d0f0 <Cursor_3+0xb4>)
 800d046:	2206      	movs	r2, #6
 800d048:	601a      	str	r2, [r3, #0]
 800d04a:	4b2a      	ldr	r3, [pc, #168]	; (800d0f4 <Cursor_3+0xb8>)
 800d04c:	4a2a      	ldr	r2, [pc, #168]	; (800d0f8 <Cursor_3+0xbc>)
 800d04e:	601a      	str	r2, [r3, #0]
 800d050:	4b27      	ldr	r3, [pc, #156]	; (800d0f0 <Cursor_3+0xb4>)
 800d052:	681b      	ldr	r3, [r3, #0]
 800d054:	005b      	lsls	r3, r3, #1
 800d056:	687a      	ldr	r2, [r7, #4]
 800d058:	4413      	add	r3, r2
 800d05a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800d05e:	461a      	mov	r2, r3
 800d060:	4b26      	ldr	r3, [pc, #152]	; (800d0fc <Cursor_3+0xc0>)
 800d062:	601a      	str	r2, [r3, #0]
 800d064:	4b25      	ldr	r3, [pc, #148]	; (800d0fc <Cursor_3+0xc0>)
 800d066:	681b      	ldr	r3, [r3, #0]
 800d068:	f003 0302 	and.w	r3, r3, #2
 800d06c:	2b00      	cmp	r3, #0
 800d06e:	d135      	bne.n	800d0dc <Cursor_3+0xa0>
 800d070:	4b23      	ldr	r3, [pc, #140]	; (800d100 <Cursor_3+0xc4>)
 800d072:	681b      	ldr	r3, [r3, #0]
 800d074:	3b01      	subs	r3, #1
 800d076:	4a21      	ldr	r2, [pc, #132]	; (800d0fc <Cursor_3+0xc0>)
 800d078:	6013      	str	r3, [r2, #0]
 800d07a:	4b20      	ldr	r3, [pc, #128]	; (800d0fc <Cursor_3+0xc0>)
 800d07c:	681b      	ldr	r3, [r3, #0]
 800d07e:	f003 0303 	and.w	r3, r3, #3
 800d082:	4a1e      	ldr	r2, [pc, #120]	; (800d0fc <Cursor_3+0xc0>)
 800d084:	6013      	str	r3, [r2, #0]
 800d086:	4b1d      	ldr	r3, [pc, #116]	; (800d0fc <Cursor_3+0xc0>)
 800d088:	681b      	ldr	r3, [r3, #0]
 800d08a:	2b00      	cmp	r3, #0
 800d08c:	d128      	bne.n	800d0e0 <Cursor_3+0xa4>
 800d08e:	4b18      	ldr	r3, [pc, #96]	; (800d0f0 <Cursor_3+0xb4>)
 800d090:	681b      	ldr	r3, [r3, #0]
 800d092:	330a      	adds	r3, #10
 800d094:	005b      	lsls	r3, r3, #1
 800d096:	687a      	ldr	r2, [r7, #4]
 800d098:	4413      	add	r3, r2
 800d09a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800d09e:	461a      	mov	r2, r3
 800d0a0:	4b16      	ldr	r3, [pc, #88]	; (800d0fc <Cursor_3+0xc0>)
 800d0a2:	601a      	str	r2, [r3, #0]
 800d0a4:	4b15      	ldr	r3, [pc, #84]	; (800d0fc <Cursor_3+0xc0>)
 800d0a6:	681b      	ldr	r3, [r3, #0]
 800d0a8:	085b      	lsrs	r3, r3, #1
 800d0aa:	f1c3 03cc 	rsb	r3, r3, #204	; 0xcc
 800d0ae:	005b      	lsls	r3, r3, #1
 800d0b0:	4a14      	ldr	r2, [pc, #80]	; (800d104 <Cursor_3+0xc8>)
 800d0b2:	4413      	add	r3, r2
 800d0b4:	4a0f      	ldr	r2, [pc, #60]	; (800d0f4 <Cursor_3+0xb8>)
 800d0b6:	6013      	str	r3, [r2, #0]
 800d0b8:	4b0d      	ldr	r3, [pc, #52]	; (800d0f0 <Cursor_3+0xb4>)
 800d0ba:	681b      	ldr	r3, [r3, #0]
 800d0bc:	3314      	adds	r3, #20
 800d0be:	005b      	lsls	r3, r3, #1
 800d0c0:	687a      	ldr	r2, [r7, #4]
 800d0c2:	4413      	add	r3, r2
 800d0c4:	f9b3 3000 	ldrsh.w	r3, [r3]
 800d0c8:	461a      	mov	r2, r3
 800d0ca:	4b0f      	ldr	r3, [pc, #60]	; (800d108 <Cursor_3+0xcc>)
 800d0cc:	601a      	str	r2, [r3, #0]
 800d0ce:	4b0e      	ldr	r3, [pc, #56]	; (800d108 <Cursor_3+0xcc>)
 800d0d0:	681a      	ldr	r2, [r3, #0]
 800d0d2:	4b08      	ldr	r3, [pc, #32]	; (800d0f4 <Cursor_3+0xb8>)
 800d0d4:	681b      	ldr	r3, [r3, #0]
 800d0d6:	b292      	uxth	r2, r2
 800d0d8:	801a      	strh	r2, [r3, #0]
 800d0da:	e002      	b.n	800d0e2 <Cursor_3+0xa6>
 800d0dc:	bf00      	nop
 800d0de:	e000      	b.n	800d0e2 <Cursor_3+0xa6>
 800d0e0:	bf00      	nop
 800d0e2:	4b03      	ldr	r3, [pc, #12]	; (800d0f0 <Cursor_3+0xb4>)
 800d0e4:	681b      	ldr	r3, [r3, #0]
 800d0e6:	3b01      	subs	r3, #1
 800d0e8:	4a01      	ldr	r2, [pc, #4]	; (800d0f0 <Cursor_3+0xb4>)
 800d0ea:	6013      	str	r3, [r2, #0]
 800d0ec:	e7b0      	b.n	800d050 <Cursor_3+0x14>
 800d0ee:	bf00      	nop
 800d0f0:	20000a40 	.word	0x20000a40
 800d0f4:	20000bec 	.word	0x20000bec
 800d0f8:	20000be0 	.word	0x20000be0
 800d0fc:	20000a3c 	.word	0x20000a3c
 800d100:	20000bf8 	.word	0x20000bf8
 800d104:	20000a48 	.word	0x20000a48
 800d108:	20000be8 	.word	0x20000be8

0800d10c <Cursor_4>:
 800d10c:	b480      	push	{r7}
 800d10e:	b083      	sub	sp, #12
 800d110:	af00      	add	r7, sp, #0
 800d112:	6078      	str	r0, [r7, #4]
 800d114:	4b7a      	ldr	r3, [pc, #488]	; (800d300 <Cursor_4+0x1f4>)
 800d116:	2207      	movs	r2, #7
 800d118:	601a      	str	r2, [r3, #0]
 800d11a:	4b7a      	ldr	r3, [pc, #488]	; (800d304 <Cursor_4+0x1f8>)
 800d11c:	4a7a      	ldr	r2, [pc, #488]	; (800d308 <Cursor_4+0x1fc>)
 800d11e:	601a      	str	r2, [r3, #0]
 800d120:	4b77      	ldr	r3, [pc, #476]	; (800d300 <Cursor_4+0x1f4>)
 800d122:	681b      	ldr	r3, [r3, #0]
 800d124:	005b      	lsls	r3, r3, #1
 800d126:	687a      	ldr	r2, [r7, #4]
 800d128:	4413      	add	r3, r2
 800d12a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800d12e:	461a      	mov	r2, r3
 800d130:	4b76      	ldr	r3, [pc, #472]	; (800d30c <Cursor_4+0x200>)
 800d132:	601a      	str	r2, [r3, #0]
 800d134:	4b75      	ldr	r3, [pc, #468]	; (800d30c <Cursor_4+0x200>)
 800d136:	681b      	ldr	r3, [r3, #0]
 800d138:	f003 0301 	and.w	r3, r3, #1
 800d13c:	2b00      	cmp	r3, #0
 800d13e:	f040 8145 	bne.w	800d3cc <Cursor_4+0x2c0>
 800d142:	bf00      	nop
 800d144:	4b6e      	ldr	r3, [pc, #440]	; (800d300 <Cursor_4+0x1f4>)
 800d146:	681b      	ldr	r3, [r3, #0]
 800d148:	330a      	adds	r3, #10
 800d14a:	005b      	lsls	r3, r3, #1
 800d14c:	687a      	ldr	r2, [r7, #4]
 800d14e:	4413      	add	r3, r2
 800d150:	f9b3 3000 	ldrsh.w	r3, [r3]
 800d154:	461a      	mov	r2, r3
 800d156:	4b6d      	ldr	r3, [pc, #436]	; (800d30c <Cursor_4+0x200>)
 800d158:	601a      	str	r2, [r3, #0]
 800d15a:	4b69      	ldr	r3, [pc, #420]	; (800d300 <Cursor_4+0x1f4>)
 800d15c:	681b      	ldr	r3, [r3, #0]
 800d15e:	3314      	adds	r3, #20
 800d160:	005b      	lsls	r3, r3, #1
 800d162:	687a      	ldr	r2, [r7, #4]
 800d164:	4413      	add	r3, r2
 800d166:	f9b3 3000 	ldrsh.w	r3, [r3]
 800d16a:	461a      	mov	r2, r3
 800d16c:	4b68      	ldr	r3, [pc, #416]	; (800d310 <Cursor_4+0x204>)
 800d16e:	601a      	str	r2, [r3, #0]
 800d170:	4b66      	ldr	r3, [pc, #408]	; (800d30c <Cursor_4+0x200>)
 800d172:	681b      	ldr	r3, [r3, #0]
 800d174:	3b02      	subs	r3, #2
 800d176:	4a67      	ldr	r2, [pc, #412]	; (800d314 <Cursor_4+0x208>)
 800d178:	6013      	str	r3, [r2, #0]
 800d17a:	4b64      	ldr	r3, [pc, #400]	; (800d30c <Cursor_4+0x200>)
 800d17c:	681a      	ldr	r2, [r3, #0]
 800d17e:	4b65      	ldr	r3, [pc, #404]	; (800d314 <Cursor_4+0x208>)
 800d180:	681b      	ldr	r3, [r3, #0]
 800d182:	429a      	cmp	r2, r3
 800d184:	d112      	bne.n	800d1ac <Cursor_4+0xa0>
 800d186:	4b62      	ldr	r3, [pc, #392]	; (800d310 <Cursor_4+0x204>)
 800d188:	681a      	ldr	r2, [r3, #0]
 800d18a:	4b5e      	ldr	r3, [pc, #376]	; (800d304 <Cursor_4+0x1f8>)
 800d18c:	681b      	ldr	r3, [r3, #0]
 800d18e:	b292      	uxth	r2, r2
 800d190:	801a      	strh	r2, [r3, #0]
 800d192:	4b5c      	ldr	r3, [pc, #368]	; (800d304 <Cursor_4+0x1f8>)
 800d194:	681b      	ldr	r3, [r3, #0]
 800d196:	f503 73ca 	add.w	r3, r3, #404	; 0x194
 800d19a:	4a5a      	ldr	r2, [pc, #360]	; (800d304 <Cursor_4+0x1f8>)
 800d19c:	6013      	str	r3, [r2, #0]
 800d19e:	4b5c      	ldr	r3, [pc, #368]	; (800d310 <Cursor_4+0x204>)
 800d1a0:	681a      	ldr	r2, [r3, #0]
 800d1a2:	4b58      	ldr	r3, [pc, #352]	; (800d304 <Cursor_4+0x1f8>)
 800d1a4:	681b      	ldr	r3, [r3, #0]
 800d1a6:	b292      	uxth	r2, r2
 800d1a8:	801a      	strh	r2, [r3, #0]
 800d1aa:	e114      	b.n	800d3d6 <Cursor_4+0x2ca>
 800d1ac:	bf00      	nop
 800d1ae:	4b59      	ldr	r3, [pc, #356]	; (800d314 <Cursor_4+0x208>)
 800d1b0:	681b      	ldr	r3, [r3, #0]
 800d1b2:	3301      	adds	r3, #1
 800d1b4:	4a57      	ldr	r2, [pc, #348]	; (800d314 <Cursor_4+0x208>)
 800d1b6:	6013      	str	r3, [r2, #0]
 800d1b8:	4b57      	ldr	r3, [pc, #348]	; (800d318 <Cursor_4+0x20c>)
 800d1ba:	681a      	ldr	r2, [r3, #0]
 800d1bc:	4b55      	ldr	r3, [pc, #340]	; (800d314 <Cursor_4+0x208>)
 800d1be:	681b      	ldr	r3, [r3, #0]
 800d1c0:	429a      	cmp	r2, r3
 800d1c2:	d128      	bne.n	800d216 <Cursor_4+0x10a>
 800d1c4:	4b52      	ldr	r3, [pc, #328]	; (800d310 <Cursor_4+0x204>)
 800d1c6:	681a      	ldr	r2, [r3, #0]
 800d1c8:	4b4e      	ldr	r3, [pc, #312]	; (800d304 <Cursor_4+0x1f8>)
 800d1ca:	681b      	ldr	r3, [r3, #0]
 800d1cc:	b292      	uxth	r2, r2
 800d1ce:	801a      	strh	r2, [r3, #0]
 800d1d0:	4b4c      	ldr	r3, [pc, #304]	; (800d304 <Cursor_4+0x1f8>)
 800d1d2:	681b      	ldr	r3, [r3, #0]
 800d1d4:	3302      	adds	r3, #2
 800d1d6:	4a4b      	ldr	r2, [pc, #300]	; (800d304 <Cursor_4+0x1f8>)
 800d1d8:	6013      	str	r3, [r2, #0]
 800d1da:	4b4d      	ldr	r3, [pc, #308]	; (800d310 <Cursor_4+0x204>)
 800d1dc:	681a      	ldr	r2, [r3, #0]
 800d1de:	4b49      	ldr	r3, [pc, #292]	; (800d304 <Cursor_4+0x1f8>)
 800d1e0:	681b      	ldr	r3, [r3, #0]
 800d1e2:	b292      	uxth	r2, r2
 800d1e4:	801a      	strh	r2, [r3, #0]
 800d1e6:	4b47      	ldr	r3, [pc, #284]	; (800d304 <Cursor_4+0x1f8>)
 800d1e8:	681b      	ldr	r3, [r3, #0]
 800d1ea:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 800d1ee:	4a45      	ldr	r2, [pc, #276]	; (800d304 <Cursor_4+0x1f8>)
 800d1f0:	6013      	str	r3, [r2, #0]
 800d1f2:	4b47      	ldr	r3, [pc, #284]	; (800d310 <Cursor_4+0x204>)
 800d1f4:	681a      	ldr	r2, [r3, #0]
 800d1f6:	4b43      	ldr	r3, [pc, #268]	; (800d304 <Cursor_4+0x1f8>)
 800d1f8:	681b      	ldr	r3, [r3, #0]
 800d1fa:	b292      	uxth	r2, r2
 800d1fc:	801a      	strh	r2, [r3, #0]
 800d1fe:	4b41      	ldr	r3, [pc, #260]	; (800d304 <Cursor_4+0x1f8>)
 800d200:	681b      	ldr	r3, [r3, #0]
 800d202:	3302      	adds	r3, #2
 800d204:	4a3f      	ldr	r2, [pc, #252]	; (800d304 <Cursor_4+0x1f8>)
 800d206:	6013      	str	r3, [r2, #0]
 800d208:	4b41      	ldr	r3, [pc, #260]	; (800d310 <Cursor_4+0x204>)
 800d20a:	681a      	ldr	r2, [r3, #0]
 800d20c:	4b3d      	ldr	r3, [pc, #244]	; (800d304 <Cursor_4+0x1f8>)
 800d20e:	681b      	ldr	r3, [r3, #0]
 800d210:	b292      	uxth	r2, r2
 800d212:	801a      	strh	r2, [r3, #0]
 800d214:	e0df      	b.n	800d3d6 <Cursor_4+0x2ca>
 800d216:	bf00      	nop
 800d218:	4b3e      	ldr	r3, [pc, #248]	; (800d314 <Cursor_4+0x208>)
 800d21a:	681b      	ldr	r3, [r3, #0]
 800d21c:	3301      	adds	r3, #1
 800d21e:	4a3d      	ldr	r2, [pc, #244]	; (800d314 <Cursor_4+0x208>)
 800d220:	6013      	str	r3, [r2, #0]
 800d222:	4b3d      	ldr	r3, [pc, #244]	; (800d318 <Cursor_4+0x20c>)
 800d224:	681a      	ldr	r2, [r3, #0]
 800d226:	4b3b      	ldr	r3, [pc, #236]	; (800d314 <Cursor_4+0x208>)
 800d228:	681b      	ldr	r3, [r3, #0]
 800d22a:	429a      	cmp	r2, r3
 800d22c:	d166      	bne.n	800d2fc <Cursor_4+0x1f0>
 800d22e:	4b38      	ldr	r3, [pc, #224]	; (800d310 <Cursor_4+0x204>)
 800d230:	681a      	ldr	r2, [r3, #0]
 800d232:	4b34      	ldr	r3, [pc, #208]	; (800d304 <Cursor_4+0x1f8>)
 800d234:	681b      	ldr	r3, [r3, #0]
 800d236:	b292      	uxth	r2, r2
 800d238:	801a      	strh	r2, [r3, #0]
 800d23a:	4b32      	ldr	r3, [pc, #200]	; (800d304 <Cursor_4+0x1f8>)
 800d23c:	681b      	ldr	r3, [r3, #0]
 800d23e:	3302      	adds	r3, #2
 800d240:	4a30      	ldr	r2, [pc, #192]	; (800d304 <Cursor_4+0x1f8>)
 800d242:	6013      	str	r3, [r2, #0]
 800d244:	4b32      	ldr	r3, [pc, #200]	; (800d310 <Cursor_4+0x204>)
 800d246:	681a      	ldr	r2, [r3, #0]
 800d248:	4b2e      	ldr	r3, [pc, #184]	; (800d304 <Cursor_4+0x1f8>)
 800d24a:	681b      	ldr	r3, [r3, #0]
 800d24c:	b292      	uxth	r2, r2
 800d24e:	801a      	strh	r2, [r3, #0]
 800d250:	4b2c      	ldr	r3, [pc, #176]	; (800d304 <Cursor_4+0x1f8>)
 800d252:	681b      	ldr	r3, [r3, #0]
 800d254:	3302      	adds	r3, #2
 800d256:	4a2b      	ldr	r2, [pc, #172]	; (800d304 <Cursor_4+0x1f8>)
 800d258:	6013      	str	r3, [r2, #0]
 800d25a:	4b2d      	ldr	r3, [pc, #180]	; (800d310 <Cursor_4+0x204>)
 800d25c:	681a      	ldr	r2, [r3, #0]
 800d25e:	4b29      	ldr	r3, [pc, #164]	; (800d304 <Cursor_4+0x1f8>)
 800d260:	681b      	ldr	r3, [r3, #0]
 800d262:	b292      	uxth	r2, r2
 800d264:	801a      	strh	r2, [r3, #0]
 800d266:	4b27      	ldr	r3, [pc, #156]	; (800d304 <Cursor_4+0x1f8>)
 800d268:	4a2c      	ldr	r2, [pc, #176]	; (800d31c <Cursor_4+0x210>)
 800d26a:	601a      	str	r2, [r3, #0]
 800d26c:	4b28      	ldr	r3, [pc, #160]	; (800d310 <Cursor_4+0x204>)
 800d26e:	681a      	ldr	r2, [r3, #0]
 800d270:	4b24      	ldr	r3, [pc, #144]	; (800d304 <Cursor_4+0x1f8>)
 800d272:	681b      	ldr	r3, [r3, #0]
 800d274:	b292      	uxth	r2, r2
 800d276:	801a      	strh	r2, [r3, #0]
 800d278:	4b22      	ldr	r3, [pc, #136]	; (800d304 <Cursor_4+0x1f8>)
 800d27a:	681b      	ldr	r3, [r3, #0]
 800d27c:	3302      	adds	r3, #2
 800d27e:	4a21      	ldr	r2, [pc, #132]	; (800d304 <Cursor_4+0x1f8>)
 800d280:	6013      	str	r3, [r2, #0]
 800d282:	4b23      	ldr	r3, [pc, #140]	; (800d310 <Cursor_4+0x204>)
 800d284:	681a      	ldr	r2, [r3, #0]
 800d286:	4b1f      	ldr	r3, [pc, #124]	; (800d304 <Cursor_4+0x1f8>)
 800d288:	681b      	ldr	r3, [r3, #0]
 800d28a:	b292      	uxth	r2, r2
 800d28c:	801a      	strh	r2, [r3, #0]
 800d28e:	4b1d      	ldr	r3, [pc, #116]	; (800d304 <Cursor_4+0x1f8>)
 800d290:	681b      	ldr	r3, [r3, #0]
 800d292:	3302      	adds	r3, #2
 800d294:	4a1b      	ldr	r2, [pc, #108]	; (800d304 <Cursor_4+0x1f8>)
 800d296:	6013      	str	r3, [r2, #0]
 800d298:	4b1d      	ldr	r3, [pc, #116]	; (800d310 <Cursor_4+0x204>)
 800d29a:	681a      	ldr	r2, [r3, #0]
 800d29c:	4b19      	ldr	r3, [pc, #100]	; (800d304 <Cursor_4+0x1f8>)
 800d29e:	681b      	ldr	r3, [r3, #0]
 800d2a0:	b292      	uxth	r2, r2
 800d2a2:	801a      	strh	r2, [r3, #0]
 800d2a4:	4b16      	ldr	r3, [pc, #88]	; (800d300 <Cursor_4+0x1f4>)
 800d2a6:	681b      	ldr	r3, [r3, #0]
 800d2a8:	330a      	adds	r3, #10
 800d2aa:	005b      	lsls	r3, r3, #1
 800d2ac:	687a      	ldr	r2, [r7, #4]
 800d2ae:	4413      	add	r3, r2
 800d2b0:	f9b3 3000 	ldrsh.w	r3, [r3]
 800d2b4:	461a      	mov	r2, r3
 800d2b6:	4b15      	ldr	r3, [pc, #84]	; (800d30c <Cursor_4+0x200>)
 800d2b8:	601a      	str	r2, [r3, #0]
 800d2ba:	4b14      	ldr	r3, [pc, #80]	; (800d30c <Cursor_4+0x200>)
 800d2bc:	681b      	ldr	r3, [r3, #0]
 800d2be:	f003 0302 	and.w	r3, r3, #2
 800d2c2:	2b00      	cmp	r3, #0
 800d2c4:	d12e      	bne.n	800d324 <Cursor_4+0x218>
 800d2c6:	4b0f      	ldr	r3, [pc, #60]	; (800d304 <Cursor_4+0x1f8>)
 800d2c8:	4a0f      	ldr	r2, [pc, #60]	; (800d308 <Cursor_4+0x1fc>)
 800d2ca:	601a      	str	r2, [r3, #0]
 800d2cc:	4b0d      	ldr	r3, [pc, #52]	; (800d304 <Cursor_4+0x1f8>)
 800d2ce:	681b      	ldr	r3, [r3, #0]
 800d2d0:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 800d2d4:	4a12      	ldr	r2, [pc, #72]	; (800d320 <Cursor_4+0x214>)
 800d2d6:	6013      	str	r3, [r2, #0]
 800d2d8:	4b0a      	ldr	r3, [pc, #40]	; (800d304 <Cursor_4+0x1f8>)
 800d2da:	681b      	ldr	r3, [r3, #0]
 800d2dc:	3308      	adds	r3, #8
 800d2de:	4a09      	ldr	r2, [pc, #36]	; (800d304 <Cursor_4+0x1f8>)
 800d2e0:	6013      	str	r3, [r2, #0]
 800d2e2:	4b0b      	ldr	r3, [pc, #44]	; (800d310 <Cursor_4+0x204>)
 800d2e4:	681a      	ldr	r2, [r3, #0]
 800d2e6:	4b07      	ldr	r3, [pc, #28]	; (800d304 <Cursor_4+0x1f8>)
 800d2e8:	681b      	ldr	r3, [r3, #0]
 800d2ea:	b292      	uxth	r2, r2
 800d2ec:	801a      	strh	r2, [r3, #0]
 800d2ee:	4b05      	ldr	r3, [pc, #20]	; (800d304 <Cursor_4+0x1f8>)
 800d2f0:	681a      	ldr	r2, [r3, #0]
 800d2f2:	4b0b      	ldr	r3, [pc, #44]	; (800d320 <Cursor_4+0x214>)
 800d2f4:	681b      	ldr	r3, [r3, #0]
 800d2f6:	429a      	cmp	r2, r3
 800d2f8:	d86a      	bhi.n	800d3d0 <Cursor_4+0x2c4>
 800d2fa:	e7ed      	b.n	800d2d8 <Cursor_4+0x1cc>
 800d2fc:	bf00      	nop
 800d2fe:	e012      	b.n	800d326 <Cursor_4+0x21a>
 800d300:	20000a40 	.word	0x20000a40
 800d304:	20000bec 	.word	0x20000bec
 800d308:	20000be0 	.word	0x20000be0
 800d30c:	20000a3c 	.word	0x20000a3c
 800d310:	20000be8 	.word	0x20000be8
 800d314:	20000a38 	.word	0x20000a38
 800d318:	20000bf8 	.word	0x20000bf8
 800d31c:	20000a50 	.word	0x20000a50
 800d320:	20000c00 	.word	0x20000c00
 800d324:	bf00      	nop
 800d326:	4b34      	ldr	r3, [pc, #208]	; (800d3f8 <Cursor_4+0x2ec>)
 800d328:	681b      	ldr	r3, [r3, #0]
 800d32a:	3301      	adds	r3, #1
 800d32c:	4a32      	ldr	r2, [pc, #200]	; (800d3f8 <Cursor_4+0x2ec>)
 800d32e:	6013      	str	r3, [r2, #0]
 800d330:	4b31      	ldr	r3, [pc, #196]	; (800d3f8 <Cursor_4+0x2ec>)
 800d332:	681a      	ldr	r2, [r3, #0]
 800d334:	4b31      	ldr	r3, [pc, #196]	; (800d3fc <Cursor_4+0x2f0>)
 800d336:	681b      	ldr	r3, [r3, #0]
 800d338:	429a      	cmp	r2, r3
 800d33a:	d128      	bne.n	800d38e <Cursor_4+0x282>
 800d33c:	4b30      	ldr	r3, [pc, #192]	; (800d400 <Cursor_4+0x2f4>)
 800d33e:	681a      	ldr	r2, [r3, #0]
 800d340:	4b30      	ldr	r3, [pc, #192]	; (800d404 <Cursor_4+0x2f8>)
 800d342:	681b      	ldr	r3, [r3, #0]
 800d344:	b292      	uxth	r2, r2
 800d346:	801a      	strh	r2, [r3, #0]
 800d348:	4b2e      	ldr	r3, [pc, #184]	; (800d404 <Cursor_4+0x2f8>)
 800d34a:	681b      	ldr	r3, [r3, #0]
 800d34c:	3302      	adds	r3, #2
 800d34e:	4a2d      	ldr	r2, [pc, #180]	; (800d404 <Cursor_4+0x2f8>)
 800d350:	6013      	str	r3, [r2, #0]
 800d352:	4b2b      	ldr	r3, [pc, #172]	; (800d400 <Cursor_4+0x2f4>)
 800d354:	681a      	ldr	r2, [r3, #0]
 800d356:	4b2b      	ldr	r3, [pc, #172]	; (800d404 <Cursor_4+0x2f8>)
 800d358:	681b      	ldr	r3, [r3, #0]
 800d35a:	b292      	uxth	r2, r2
 800d35c:	801a      	strh	r2, [r3, #0]
 800d35e:	4b29      	ldr	r3, [pc, #164]	; (800d404 <Cursor_4+0x2f8>)
 800d360:	681b      	ldr	r3, [r3, #0]
 800d362:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 800d366:	4a27      	ldr	r2, [pc, #156]	; (800d404 <Cursor_4+0x2f8>)
 800d368:	6013      	str	r3, [r2, #0]
 800d36a:	4b25      	ldr	r3, [pc, #148]	; (800d400 <Cursor_4+0x2f4>)
 800d36c:	681a      	ldr	r2, [r3, #0]
 800d36e:	4b25      	ldr	r3, [pc, #148]	; (800d404 <Cursor_4+0x2f8>)
 800d370:	681b      	ldr	r3, [r3, #0]
 800d372:	b292      	uxth	r2, r2
 800d374:	801a      	strh	r2, [r3, #0]
 800d376:	4b23      	ldr	r3, [pc, #140]	; (800d404 <Cursor_4+0x2f8>)
 800d378:	681b      	ldr	r3, [r3, #0]
 800d37a:	3302      	adds	r3, #2
 800d37c:	4a21      	ldr	r2, [pc, #132]	; (800d404 <Cursor_4+0x2f8>)
 800d37e:	6013      	str	r3, [r2, #0]
 800d380:	4b1f      	ldr	r3, [pc, #124]	; (800d400 <Cursor_4+0x2f4>)
 800d382:	681a      	ldr	r2, [r3, #0]
 800d384:	4b1f      	ldr	r3, [pc, #124]	; (800d404 <Cursor_4+0x2f8>)
 800d386:	681b      	ldr	r3, [r3, #0]
 800d388:	b292      	uxth	r2, r2
 800d38a:	801a      	strh	r2, [r3, #0]
 800d38c:	e023      	b.n	800d3d6 <Cursor_4+0x2ca>
 800d38e:	bf00      	nop
 800d390:	4b19      	ldr	r3, [pc, #100]	; (800d3f8 <Cursor_4+0x2ec>)
 800d392:	681b      	ldr	r3, [r3, #0]
 800d394:	3301      	adds	r3, #1
 800d396:	4a18      	ldr	r2, [pc, #96]	; (800d3f8 <Cursor_4+0x2ec>)
 800d398:	6013      	str	r3, [r2, #0]
 800d39a:	4b17      	ldr	r3, [pc, #92]	; (800d3f8 <Cursor_4+0x2ec>)
 800d39c:	681a      	ldr	r2, [r3, #0]
 800d39e:	4b17      	ldr	r3, [pc, #92]	; (800d3fc <Cursor_4+0x2f0>)
 800d3a0:	681b      	ldr	r3, [r3, #0]
 800d3a2:	429a      	cmp	r2, r3
 800d3a4:	d116      	bne.n	800d3d4 <Cursor_4+0x2c8>
 800d3a6:	4b16      	ldr	r3, [pc, #88]	; (800d400 <Cursor_4+0x2f4>)
 800d3a8:	681a      	ldr	r2, [r3, #0]
 800d3aa:	4b16      	ldr	r3, [pc, #88]	; (800d404 <Cursor_4+0x2f8>)
 800d3ac:	681b      	ldr	r3, [r3, #0]
 800d3ae:	b292      	uxth	r2, r2
 800d3b0:	801a      	strh	r2, [r3, #0]
 800d3b2:	4b14      	ldr	r3, [pc, #80]	; (800d404 <Cursor_4+0x2f8>)
 800d3b4:	681b      	ldr	r3, [r3, #0]
 800d3b6:	f503 73ca 	add.w	r3, r3, #404	; 0x194
 800d3ba:	4a12      	ldr	r2, [pc, #72]	; (800d404 <Cursor_4+0x2f8>)
 800d3bc:	6013      	str	r3, [r2, #0]
 800d3be:	4b10      	ldr	r3, [pc, #64]	; (800d400 <Cursor_4+0x2f4>)
 800d3c0:	681a      	ldr	r2, [r3, #0]
 800d3c2:	4b10      	ldr	r3, [pc, #64]	; (800d404 <Cursor_4+0x2f8>)
 800d3c4:	681b      	ldr	r3, [r3, #0]
 800d3c6:	b292      	uxth	r2, r2
 800d3c8:	801a      	strh	r2, [r3, #0]
 800d3ca:	e004      	b.n	800d3d6 <Cursor_4+0x2ca>
 800d3cc:	bf00      	nop
 800d3ce:	e002      	b.n	800d3d6 <Cursor_4+0x2ca>
 800d3d0:	bf00      	nop
 800d3d2:	e000      	b.n	800d3d6 <Cursor_4+0x2ca>
 800d3d4:	bf00      	nop
 800d3d6:	4b0c      	ldr	r3, [pc, #48]	; (800d408 <Cursor_4+0x2fc>)
 800d3d8:	681b      	ldr	r3, [r3, #0]
 800d3da:	3301      	adds	r3, #1
 800d3dc:	4a0a      	ldr	r2, [pc, #40]	; (800d408 <Cursor_4+0x2fc>)
 800d3de:	6013      	str	r3, [r2, #0]
 800d3e0:	4b09      	ldr	r3, [pc, #36]	; (800d408 <Cursor_4+0x2fc>)
 800d3e2:	681b      	ldr	r3, [r3, #0]
 800d3e4:	2b0a      	cmp	r3, #10
 800d3e6:	d000      	beq.n	800d3ea <Cursor_4+0x2de>
 800d3e8:	e697      	b.n	800d11a <Cursor_4+0xe>
 800d3ea:	bf00      	nop
 800d3ec:	370c      	adds	r7, #12
 800d3ee:	46bd      	mov	sp, r7
 800d3f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3f4:	4770      	bx	lr
 800d3f6:	bf00      	nop
 800d3f8:	20000a38 	.word	0x20000a38
 800d3fc:	20000bf8 	.word	0x20000bf8
 800d400:	20000be8 	.word	0x20000be8
 800d404:	20000bec 	.word	0x20000bec
 800d408:	20000a40 	.word	0x20000a40

0800d40c <Send_LCD>:
 800d40c:	b580      	push	{r7, lr}
 800d40e:	b082      	sub	sp, #8
 800d410:	af00      	add	r7, sp, #0
 800d412:	6078      	str	r0, [r7, #4]
 800d414:	4a12      	ldr	r2, [pc, #72]	; (800d460 <Send_LCD+0x54>)
 800d416:	4b13      	ldr	r3, [pc, #76]	; (800d464 <Send_LCD+0x58>)
 800d418:	601a      	str	r2, [r3, #0]
 800d41a:	4b13      	ldr	r3, [pc, #76]	; (800d468 <Send_LCD+0x5c>)
 800d41c:	681b      	ldr	r3, [r3, #0]
 800d41e:	b21b      	sxth	r3, r3
 800d420:	2113      	movs	r1, #19
 800d422:	4618      	mov	r0, r3
 800d424:	f004 fec4 	bl	80121b0 <LCD_Set_Posi>
 800d428:	4b10      	ldr	r3, [pc, #64]	; (800d46c <Send_LCD+0x60>)
 800d42a:	22cb      	movs	r2, #203	; 0xcb
 800d42c:	601a      	str	r2, [r3, #0]
 800d42e:	4b0d      	ldr	r3, [pc, #52]	; (800d464 <Send_LCD+0x58>)
 800d430:	681b      	ldr	r3, [r3, #0]
 800d432:	881b      	ldrh	r3, [r3, #0]
 800d434:	4618      	mov	r0, r3
 800d436:	f004 ff09 	bl	801224c <LCD_Set_Pixel>
 800d43a:	4b0a      	ldr	r3, [pc, #40]	; (800d464 <Send_LCD+0x58>)
 800d43c:	681b      	ldr	r3, [r3, #0]
 800d43e:	3302      	adds	r3, #2
 800d440:	4a08      	ldr	r2, [pc, #32]	; (800d464 <Send_LCD+0x58>)
 800d442:	6013      	str	r3, [r2, #0]
 800d444:	4b09      	ldr	r3, [pc, #36]	; (800d46c <Send_LCD+0x60>)
 800d446:	681b      	ldr	r3, [r3, #0]
 800d448:	3b01      	subs	r3, #1
 800d44a:	4a08      	ldr	r2, [pc, #32]	; (800d46c <Send_LCD+0x60>)
 800d44c:	6013      	str	r3, [r2, #0]
 800d44e:	4b07      	ldr	r3, [pc, #28]	; (800d46c <Send_LCD+0x60>)
 800d450:	681b      	ldr	r3, [r3, #0]
 800d452:	2b00      	cmp	r3, #0
 800d454:	d000      	beq.n	800d458 <Send_LCD+0x4c>
 800d456:	e7ea      	b.n	800d42e <Send_LCD+0x22>
 800d458:	bf00      	nop
 800d45a:	3708      	adds	r7, #8
 800d45c:	46bd      	mov	sp, r7
 800d45e:	bd80      	pop	{r7, pc}
 800d460:	20000be0 	.word	0x20000be0
 800d464:	20000a3c 	.word	0x20000a3c
 800d468:	20000bf8 	.word	0x20000bf8
 800d46c:	20000bec 	.word	0x20000bec

0800d470 <Draw_Pop>:
 800d470:	b480      	push	{r7}
 800d472:	b083      	sub	sp, #12
 800d474:	af00      	add	r7, sp, #0
 800d476:	6078      	str	r0, [r7, #4]
 800d478:	4b85      	ldr	r3, [pc, #532]	; (800d690 <Draw_Pop+0x220>)
 800d47a:	f04f 1201 	mov.w	r2, #65537	; 0x10001
 800d47e:	601a      	str	r2, [r3, #0]
 800d480:	687b      	ldr	r3, [r7, #4]
 800d482:	3348      	adds	r3, #72	; 0x48
 800d484:	f9b3 3000 	ldrsh.w	r3, [r3]
 800d488:	461a      	mov	r2, r3
 800d48a:	4b82      	ldr	r3, [pc, #520]	; (800d694 <Draw_Pop+0x224>)
 800d48c:	601a      	str	r2, [r3, #0]
 800d48e:	687b      	ldr	r3, [r7, #4]
 800d490:	334a      	adds	r3, #74	; 0x4a
 800d492:	f9b3 3000 	ldrsh.w	r3, [r3]
 800d496:	461a      	mov	r2, r3
 800d498:	4b7f      	ldr	r3, [pc, #508]	; (800d698 <Draw_Pop+0x228>)
 800d49a:	601a      	str	r2, [r3, #0]
 800d49c:	4b7f      	ldr	r3, [pc, #508]	; (800d69c <Draw_Pop+0x22c>)
 800d49e:	681b      	ldr	r3, [r3, #0]
 800d4a0:	4a7f      	ldr	r2, [pc, #508]	; (800d6a0 <Draw_Pop+0x230>)
 800d4a2:	6013      	str	r3, [r2, #0]
 800d4a4:	4b7f      	ldr	r3, [pc, #508]	; (800d6a4 <Draw_Pop+0x234>)
 800d4a6:	681a      	ldr	r2, [r3, #0]
 800d4a8:	4b7d      	ldr	r3, [pc, #500]	; (800d6a0 <Draw_Pop+0x230>)
 800d4aa:	681b      	ldr	r3, [r3, #0]
 800d4ac:	429a      	cmp	r2, r3
 800d4ae:	d10d      	bne.n	800d4cc <Draw_Pop+0x5c>
 800d4b0:	4b78      	ldr	r3, [pc, #480]	; (800d694 <Draw_Pop+0x224>)
 800d4b2:	681b      	ldr	r3, [r3, #0]
 800d4b4:	3306      	adds	r3, #6
 800d4b6:	4a77      	ldr	r2, [pc, #476]	; (800d694 <Draw_Pop+0x224>)
 800d4b8:	6013      	str	r3, [r2, #0]
 800d4ba:	4b77      	ldr	r3, [pc, #476]	; (800d698 <Draw_Pop+0x228>)
 800d4bc:	681b      	ldr	r3, [r3, #0]
 800d4be:	3b0c      	subs	r3, #12
 800d4c0:	4a75      	ldr	r2, [pc, #468]	; (800d698 <Draw_Pop+0x228>)
 800d4c2:	6013      	str	r3, [r2, #0]
 800d4c4:	4b72      	ldr	r3, [pc, #456]	; (800d690 <Draw_Pop+0x220>)
 800d4c6:	f04f 1208 	mov.w	r2, #524296	; 0x80008
 800d4ca:	601a      	str	r2, [r3, #0]
 800d4cc:	4b73      	ldr	r3, [pc, #460]	; (800d69c <Draw_Pop+0x22c>)
 800d4ce:	681b      	ldr	r3, [r3, #0]
 800d4d0:	3301      	adds	r3, #1
 800d4d2:	4a73      	ldr	r2, [pc, #460]	; (800d6a0 <Draw_Pop+0x230>)
 800d4d4:	6013      	str	r3, [r2, #0]
 800d4d6:	4b73      	ldr	r3, [pc, #460]	; (800d6a4 <Draw_Pop+0x234>)
 800d4d8:	681a      	ldr	r2, [r3, #0]
 800d4da:	4b71      	ldr	r3, [pc, #452]	; (800d6a0 <Draw_Pop+0x230>)
 800d4dc:	681b      	ldr	r3, [r3, #0]
 800d4de:	429a      	cmp	r2, r3
 800d4e0:	d10d      	bne.n	800d4fe <Draw_Pop+0x8e>
 800d4e2:	4b6c      	ldr	r3, [pc, #432]	; (800d694 <Draw_Pop+0x224>)
 800d4e4:	681b      	ldr	r3, [r3, #0]
 800d4e6:	3304      	adds	r3, #4
 800d4e8:	4a6a      	ldr	r2, [pc, #424]	; (800d694 <Draw_Pop+0x224>)
 800d4ea:	6013      	str	r3, [r2, #0]
 800d4ec:	4b6a      	ldr	r3, [pc, #424]	; (800d698 <Draw_Pop+0x228>)
 800d4ee:	681b      	ldr	r3, [r3, #0]
 800d4f0:	3b08      	subs	r3, #8
 800d4f2:	4a69      	ldr	r2, [pc, #420]	; (800d698 <Draw_Pop+0x228>)
 800d4f4:	6013      	str	r3, [r2, #0]
 800d4f6:	4b66      	ldr	r3, [pc, #408]	; (800d690 <Draw_Pop+0x220>)
 800d4f8:	f04f 1204 	mov.w	r2, #262148	; 0x40004
 800d4fc:	601a      	str	r2, [r3, #0]
 800d4fe:	4b67      	ldr	r3, [pc, #412]	; (800d69c <Draw_Pop+0x22c>)
 800d500:	681b      	ldr	r3, [r3, #0]
 800d502:	3302      	adds	r3, #2
 800d504:	4a66      	ldr	r2, [pc, #408]	; (800d6a0 <Draw_Pop+0x230>)
 800d506:	6013      	str	r3, [r2, #0]
 800d508:	4b66      	ldr	r3, [pc, #408]	; (800d6a4 <Draw_Pop+0x234>)
 800d50a:	681a      	ldr	r2, [r3, #0]
 800d50c:	4b64      	ldr	r3, [pc, #400]	; (800d6a0 <Draw_Pop+0x230>)
 800d50e:	681b      	ldr	r3, [r3, #0]
 800d510:	429a      	cmp	r2, r3
 800d512:	d10d      	bne.n	800d530 <Draw_Pop+0xc0>
 800d514:	4b5f      	ldr	r3, [pc, #380]	; (800d694 <Draw_Pop+0x224>)
 800d516:	681b      	ldr	r3, [r3, #0]
 800d518:	3302      	adds	r3, #2
 800d51a:	4a5e      	ldr	r2, [pc, #376]	; (800d694 <Draw_Pop+0x224>)
 800d51c:	6013      	str	r3, [r2, #0]
 800d51e:	4b5e      	ldr	r3, [pc, #376]	; (800d698 <Draw_Pop+0x228>)
 800d520:	681b      	ldr	r3, [r3, #0]
 800d522:	3b04      	subs	r3, #4
 800d524:	4a5c      	ldr	r2, [pc, #368]	; (800d698 <Draw_Pop+0x228>)
 800d526:	6013      	str	r3, [r2, #0]
 800d528:	4b59      	ldr	r3, [pc, #356]	; (800d690 <Draw_Pop+0x220>)
 800d52a:	f04f 1202 	mov.w	r2, #131074	; 0x20002
 800d52e:	601a      	str	r2, [r3, #0]
 800d530:	4b5d      	ldr	r3, [pc, #372]	; (800d6a8 <Draw_Pop+0x238>)
 800d532:	681b      	ldr	r3, [r3, #0]
 800d534:	3b03      	subs	r3, #3
 800d536:	4a5a      	ldr	r2, [pc, #360]	; (800d6a0 <Draw_Pop+0x230>)
 800d538:	6013      	str	r3, [r2, #0]
 800d53a:	4b5a      	ldr	r3, [pc, #360]	; (800d6a4 <Draw_Pop+0x234>)
 800d53c:	681a      	ldr	r2, [r3, #0]
 800d53e:	4b58      	ldr	r3, [pc, #352]	; (800d6a0 <Draw_Pop+0x230>)
 800d540:	681b      	ldr	r3, [r3, #0]
 800d542:	429a      	cmp	r2, r3
 800d544:	d10d      	bne.n	800d562 <Draw_Pop+0xf2>
 800d546:	4b53      	ldr	r3, [pc, #332]	; (800d694 <Draw_Pop+0x224>)
 800d548:	681b      	ldr	r3, [r3, #0]
 800d54a:	3302      	adds	r3, #2
 800d54c:	4a51      	ldr	r2, [pc, #324]	; (800d694 <Draw_Pop+0x224>)
 800d54e:	6013      	str	r3, [r2, #0]
 800d550:	4b51      	ldr	r3, [pc, #324]	; (800d698 <Draw_Pop+0x228>)
 800d552:	681b      	ldr	r3, [r3, #0]
 800d554:	3b04      	subs	r3, #4
 800d556:	4a50      	ldr	r2, [pc, #320]	; (800d698 <Draw_Pop+0x228>)
 800d558:	6013      	str	r3, [r2, #0]
 800d55a:	4b4d      	ldr	r3, [pc, #308]	; (800d690 <Draw_Pop+0x220>)
 800d55c:	f04f 1202 	mov.w	r2, #131074	; 0x20002
 800d560:	601a      	str	r2, [r3, #0]
 800d562:	4b51      	ldr	r3, [pc, #324]	; (800d6a8 <Draw_Pop+0x238>)
 800d564:	681b      	ldr	r3, [r3, #0]
 800d566:	3b02      	subs	r3, #2
 800d568:	4a4d      	ldr	r2, [pc, #308]	; (800d6a0 <Draw_Pop+0x230>)
 800d56a:	6013      	str	r3, [r2, #0]
 800d56c:	4b4d      	ldr	r3, [pc, #308]	; (800d6a4 <Draw_Pop+0x234>)
 800d56e:	681a      	ldr	r2, [r3, #0]
 800d570:	4b4b      	ldr	r3, [pc, #300]	; (800d6a0 <Draw_Pop+0x230>)
 800d572:	681b      	ldr	r3, [r3, #0]
 800d574:	429a      	cmp	r2, r3
 800d576:	d10d      	bne.n	800d594 <Draw_Pop+0x124>
 800d578:	4b46      	ldr	r3, [pc, #280]	; (800d694 <Draw_Pop+0x224>)
 800d57a:	681b      	ldr	r3, [r3, #0]
 800d57c:	3304      	adds	r3, #4
 800d57e:	4a45      	ldr	r2, [pc, #276]	; (800d694 <Draw_Pop+0x224>)
 800d580:	6013      	str	r3, [r2, #0]
 800d582:	4b45      	ldr	r3, [pc, #276]	; (800d698 <Draw_Pop+0x228>)
 800d584:	681b      	ldr	r3, [r3, #0]
 800d586:	3b08      	subs	r3, #8
 800d588:	4a43      	ldr	r2, [pc, #268]	; (800d698 <Draw_Pop+0x228>)
 800d58a:	6013      	str	r3, [r2, #0]
 800d58c:	4b40      	ldr	r3, [pc, #256]	; (800d690 <Draw_Pop+0x220>)
 800d58e:	f04f 1204 	mov.w	r2, #262148	; 0x40004
 800d592:	601a      	str	r2, [r3, #0]
 800d594:	4b44      	ldr	r3, [pc, #272]	; (800d6a8 <Draw_Pop+0x238>)
 800d596:	681b      	ldr	r3, [r3, #0]
 800d598:	3b01      	subs	r3, #1
 800d59a:	4a41      	ldr	r2, [pc, #260]	; (800d6a0 <Draw_Pop+0x230>)
 800d59c:	6013      	str	r3, [r2, #0]
 800d59e:	4b41      	ldr	r3, [pc, #260]	; (800d6a4 <Draw_Pop+0x234>)
 800d5a0:	681a      	ldr	r2, [r3, #0]
 800d5a2:	4b3f      	ldr	r3, [pc, #252]	; (800d6a0 <Draw_Pop+0x230>)
 800d5a4:	681b      	ldr	r3, [r3, #0]
 800d5a6:	429a      	cmp	r2, r3
 800d5a8:	d10d      	bne.n	800d5c6 <Draw_Pop+0x156>
 800d5aa:	4b3a      	ldr	r3, [pc, #232]	; (800d694 <Draw_Pop+0x224>)
 800d5ac:	681b      	ldr	r3, [r3, #0]
 800d5ae:	3306      	adds	r3, #6
 800d5b0:	4a38      	ldr	r2, [pc, #224]	; (800d694 <Draw_Pop+0x224>)
 800d5b2:	6013      	str	r3, [r2, #0]
 800d5b4:	4b38      	ldr	r3, [pc, #224]	; (800d698 <Draw_Pop+0x228>)
 800d5b6:	681b      	ldr	r3, [r3, #0]
 800d5b8:	3b0c      	subs	r3, #12
 800d5ba:	4a37      	ldr	r2, [pc, #220]	; (800d698 <Draw_Pop+0x228>)
 800d5bc:	6013      	str	r3, [r2, #0]
 800d5be:	4b34      	ldr	r3, [pc, #208]	; (800d690 <Draw_Pop+0x220>)
 800d5c0:	f04f 1208 	mov.w	r2, #524296	; 0x80008
 800d5c4:	601a      	str	r2, [r3, #0]
 800d5c6:	4b33      	ldr	r3, [pc, #204]	; (800d694 <Draw_Pop+0x224>)
 800d5c8:	681b      	ldr	r3, [r3, #0]
 800d5ca:	085b      	lsrs	r3, r3, #1
 800d5cc:	f1c3 03cc 	rsb	r3, r3, #204	; 0xcc
 800d5d0:	005b      	lsls	r3, r3, #1
 800d5d2:	4a36      	ldr	r2, [pc, #216]	; (800d6ac <Draw_Pop+0x23c>)
 800d5d4:	4413      	add	r3, r2
 800d5d6:	4a36      	ldr	r2, [pc, #216]	; (800d6b0 <Draw_Pop+0x240>)
 800d5d8:	6013      	str	r3, [r2, #0]
 800d5da:	687b      	ldr	r3, [r7, #4]
 800d5dc:	334e      	adds	r3, #78	; 0x4e
 800d5de:	f9b3 3000 	ldrsh.w	r3, [r3]
 800d5e2:	461a      	mov	r2, r3
 800d5e4:	4b33      	ldr	r3, [pc, #204]	; (800d6b4 <Draw_Pop+0x244>)
 800d5e6:	601a      	str	r2, [r3, #0]
 800d5e8:	687b      	ldr	r3, [r7, #4]
 800d5ea:	3350      	adds	r3, #80	; 0x50
 800d5ec:	f9b3 3000 	ldrsh.w	r3, [r3]
 800d5f0:	461a      	mov	r2, r3
 800d5f2:	4b31      	ldr	r3, [pc, #196]	; (800d6b8 <Draw_Pop+0x248>)
 800d5f4:	601a      	str	r2, [r3, #0]
 800d5f6:	4b31      	ldr	r3, [pc, #196]	; (800d6bc <Draw_Pop+0x24c>)
 800d5f8:	681b      	ldr	r3, [r3, #0]
 800d5fa:	881b      	ldrh	r3, [r3, #0]
 800d5fc:	461a      	mov	r2, r3
 800d5fe:	4b28      	ldr	r3, [pc, #160]	; (800d6a0 <Draw_Pop+0x230>)
 800d600:	601a      	str	r2, [r3, #0]
 800d602:	4b2e      	ldr	r3, [pc, #184]	; (800d6bc <Draw_Pop+0x24c>)
 800d604:	681b      	ldr	r3, [r3, #0]
 800d606:	3302      	adds	r3, #2
 800d608:	4a2c      	ldr	r2, [pc, #176]	; (800d6bc <Draw_Pop+0x24c>)
 800d60a:	6013      	str	r3, [r2, #0]
 800d60c:	4b29      	ldr	r3, [pc, #164]	; (800d6b4 <Draw_Pop+0x244>)
 800d60e:	681b      	ldr	r3, [r3, #0]
 800d610:	2b00      	cmp	r3, #0
 800d612:	d100      	bne.n	800d616 <Draw_Pop+0x1a6>
 800d614:	e054      	b.n	800d6c0 <Draw_Pop+0x250>
 800d616:	bf00      	nop
 800d618:	4b21      	ldr	r3, [pc, #132]	; (800d6a0 <Draw_Pop+0x230>)
 800d61a:	681a      	ldr	r2, [r3, #0]
 800d61c:	4b1c      	ldr	r3, [pc, #112]	; (800d690 <Draw_Pop+0x220>)
 800d61e:	681b      	ldr	r3, [r3, #0]
 800d620:	4013      	ands	r3, r2
 800d622:	2b00      	cmp	r3, #0
 800d624:	d006      	beq.n	800d634 <Draw_Pop+0x1c4>
 800d626:	4b22      	ldr	r3, [pc, #136]	; (800d6b0 <Draw_Pop+0x240>)
 800d628:	681b      	ldr	r3, [r3, #0]
 800d62a:	781b      	ldrb	r3, [r3, #0]
 800d62c:	461a      	mov	r2, r3
 800d62e:	4b22      	ldr	r3, [pc, #136]	; (800d6b8 <Draw_Pop+0x248>)
 800d630:	601a      	str	r2, [r3, #0]
 800d632:	e005      	b.n	800d640 <Draw_Pop+0x1d0>
 800d634:	4b1e      	ldr	r3, [pc, #120]	; (800d6b0 <Draw_Pop+0x240>)
 800d636:	681b      	ldr	r3, [r3, #0]
 800d638:	781b      	ldrb	r3, [r3, #0]
 800d63a:	461a      	mov	r2, r3
 800d63c:	4b1d      	ldr	r3, [pc, #116]	; (800d6b4 <Draw_Pop+0x244>)
 800d63e:	601a      	str	r2, [r3, #0]
 800d640:	4b1b      	ldr	r3, [pc, #108]	; (800d6b0 <Draw_Pop+0x240>)
 800d642:	681b      	ldr	r3, [r3, #0]
 800d644:	3301      	adds	r3, #1
 800d646:	4a1a      	ldr	r2, [pc, #104]	; (800d6b0 <Draw_Pop+0x240>)
 800d648:	6013      	str	r3, [r2, #0]
 800d64a:	4b13      	ldr	r3, [pc, #76]	; (800d698 <Draw_Pop+0x228>)
 800d64c:	681b      	ldr	r3, [r3, #0]
 800d64e:	3b02      	subs	r3, #2
 800d650:	4a11      	ldr	r2, [pc, #68]	; (800d698 <Draw_Pop+0x228>)
 800d652:	6013      	str	r3, [r2, #0]
 800d654:	4b10      	ldr	r3, [pc, #64]	; (800d698 <Draw_Pop+0x228>)
 800d656:	681b      	ldr	r3, [r3, #0]
 800d658:	2b00      	cmp	r3, #0
 800d65a:	d066      	beq.n	800d72a <Draw_Pop+0x2ba>
 800d65c:	4b0c      	ldr	r3, [pc, #48]	; (800d690 <Draw_Pop+0x220>)
 800d65e:	681b      	ldr	r3, [r3, #0]
 800d660:	2b00      	cmp	r3, #0
 800d662:	da0f      	bge.n	800d684 <Draw_Pop+0x214>
 800d664:	4b15      	ldr	r3, [pc, #84]	; (800d6bc <Draw_Pop+0x24c>)
 800d666:	681b      	ldr	r3, [r3, #0]
 800d668:	881b      	ldrh	r3, [r3, #0]
 800d66a:	461a      	mov	r2, r3
 800d66c:	4b0c      	ldr	r3, [pc, #48]	; (800d6a0 <Draw_Pop+0x230>)
 800d66e:	601a      	str	r2, [r3, #0]
 800d670:	4b12      	ldr	r3, [pc, #72]	; (800d6bc <Draw_Pop+0x24c>)
 800d672:	681b      	ldr	r3, [r3, #0]
 800d674:	3302      	adds	r3, #2
 800d676:	4a11      	ldr	r2, [pc, #68]	; (800d6bc <Draw_Pop+0x24c>)
 800d678:	6013      	str	r3, [r2, #0]
 800d67a:	4b05      	ldr	r3, [pc, #20]	; (800d690 <Draw_Pop+0x220>)
 800d67c:	f04f 1201 	mov.w	r2, #65537	; 0x10001
 800d680:	601a      	str	r2, [r3, #0]
 800d682:	e7c9      	b.n	800d618 <Draw_Pop+0x1a8>
 800d684:	4b02      	ldr	r3, [pc, #8]	; (800d690 <Draw_Pop+0x220>)
 800d686:	681b      	ldr	r3, [r3, #0]
 800d688:	005b      	lsls	r3, r3, #1
 800d68a:	4a01      	ldr	r2, [pc, #4]	; (800d690 <Draw_Pop+0x220>)
 800d68c:	6013      	str	r3, [r2, #0]
 800d68e:	e7c3      	b.n	800d618 <Draw_Pop+0x1a8>
 800d690:	20000c00 	.word	0x20000c00
 800d694:	20000a3c 	.word	0x20000a3c
 800d698:	20000be8 	.word	0x20000be8
 800d69c:	20000be4 	.word	0x20000be4
 800d6a0:	20000a40 	.word	0x20000a40
 800d6a4:	20000bf8 	.word	0x20000bf8
 800d6a8:	20000bf4 	.word	0x20000bf4
 800d6ac:	20000a48 	.word	0x20000a48
 800d6b0:	20000bec 	.word	0x20000bec
 800d6b4:	20000a38 	.word	0x20000a38
 800d6b8:	20000bfc 	.word	0x20000bfc
 800d6bc:	20000c04 	.word	0x20000c04
 800d6c0:	4b1e      	ldr	r3, [pc, #120]	; (800d73c <Draw_Pop+0x2cc>)
 800d6c2:	681a      	ldr	r2, [r3, #0]
 800d6c4:	4b1e      	ldr	r3, [pc, #120]	; (800d740 <Draw_Pop+0x2d0>)
 800d6c6:	681b      	ldr	r3, [r3, #0]
 800d6c8:	4013      	ands	r3, r2
 800d6ca:	2b00      	cmp	r3, #0
 800d6cc:	d005      	beq.n	800d6da <Draw_Pop+0x26a>
 800d6ce:	4b1d      	ldr	r3, [pc, #116]	; (800d744 <Draw_Pop+0x2d4>)
 800d6d0:	681b      	ldr	r3, [r3, #0]
 800d6d2:	781b      	ldrb	r3, [r3, #0]
 800d6d4:	461a      	mov	r2, r3
 800d6d6:	4b1c      	ldr	r3, [pc, #112]	; (800d748 <Draw_Pop+0x2d8>)
 800d6d8:	601a      	str	r2, [r3, #0]
 800d6da:	4b1a      	ldr	r3, [pc, #104]	; (800d744 <Draw_Pop+0x2d4>)
 800d6dc:	681b      	ldr	r3, [r3, #0]
 800d6de:	3301      	adds	r3, #1
 800d6e0:	4a18      	ldr	r2, [pc, #96]	; (800d744 <Draw_Pop+0x2d4>)
 800d6e2:	6013      	str	r3, [r2, #0]
 800d6e4:	4b19      	ldr	r3, [pc, #100]	; (800d74c <Draw_Pop+0x2dc>)
 800d6e6:	681b      	ldr	r3, [r3, #0]
 800d6e8:	3b02      	subs	r3, #2
 800d6ea:	4a18      	ldr	r2, [pc, #96]	; (800d74c <Draw_Pop+0x2dc>)
 800d6ec:	6013      	str	r3, [r2, #0]
 800d6ee:	4b17      	ldr	r3, [pc, #92]	; (800d74c <Draw_Pop+0x2dc>)
 800d6f0:	681b      	ldr	r3, [r3, #0]
 800d6f2:	2b00      	cmp	r3, #0
 800d6f4:	d01b      	beq.n	800d72e <Draw_Pop+0x2be>
 800d6f6:	4b12      	ldr	r3, [pc, #72]	; (800d740 <Draw_Pop+0x2d0>)
 800d6f8:	681b      	ldr	r3, [r3, #0]
 800d6fa:	2b00      	cmp	r3, #0
 800d6fc:	da0f      	bge.n	800d71e <Draw_Pop+0x2ae>
 800d6fe:	4b14      	ldr	r3, [pc, #80]	; (800d750 <Draw_Pop+0x2e0>)
 800d700:	681b      	ldr	r3, [r3, #0]
 800d702:	881b      	ldrh	r3, [r3, #0]
 800d704:	461a      	mov	r2, r3
 800d706:	4b13      	ldr	r3, [pc, #76]	; (800d754 <Draw_Pop+0x2e4>)
 800d708:	601a      	str	r2, [r3, #0]
 800d70a:	4b11      	ldr	r3, [pc, #68]	; (800d750 <Draw_Pop+0x2e0>)
 800d70c:	681b      	ldr	r3, [r3, #0]
 800d70e:	3302      	adds	r3, #2
 800d710:	4a0f      	ldr	r2, [pc, #60]	; (800d750 <Draw_Pop+0x2e0>)
 800d712:	6013      	str	r3, [r2, #0]
 800d714:	4b0a      	ldr	r3, [pc, #40]	; (800d740 <Draw_Pop+0x2d0>)
 800d716:	f04f 1201 	mov.w	r2, #65537	; 0x10001
 800d71a:	601a      	str	r2, [r3, #0]
 800d71c:	e7d0      	b.n	800d6c0 <Draw_Pop+0x250>
 800d71e:	4b08      	ldr	r3, [pc, #32]	; (800d740 <Draw_Pop+0x2d0>)
 800d720:	681b      	ldr	r3, [r3, #0]
 800d722:	005b      	lsls	r3, r3, #1
 800d724:	4a06      	ldr	r2, [pc, #24]	; (800d740 <Draw_Pop+0x2d0>)
 800d726:	6013      	str	r3, [r2, #0]
 800d728:	e7ca      	b.n	800d6c0 <Draw_Pop+0x250>
 800d72a:	bf00      	nop
 800d72c:	e000      	b.n	800d730 <Draw_Pop+0x2c0>
 800d72e:	bf00      	nop
 800d730:	370c      	adds	r7, #12
 800d732:	46bd      	mov	sp, r7
 800d734:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d738:	4770      	bx	lr
 800d73a:	bf00      	nop
 800d73c:	20000bf8 	.word	0x20000bf8
 800d740:	20000c00 	.word	0x20000c00
 800d744:	20000bec 	.word	0x20000bec
 800d748:	20000bfc 	.word	0x20000bfc
 800d74c:	20000be8 	.word	0x20000be8
 800d750:	20000c04 	.word	0x20000c04
 800d754:	20000a40 	.word	0x20000a40

0800d758 <DrawWindow>:
 800d758:	b580      	push	{r7, lr}
 800d75a:	b082      	sub	sp, #8
 800d75c:	af00      	add	r7, sp, #0
 800d75e:	6078      	str	r0, [r7, #4]
 800d760:	6039      	str	r1, [r7, #0]
 800d762:	687b      	ldr	r3, [r7, #4]
 800d764:	4a9b      	ldr	r2, [pc, #620]	; (800d9d4 <DrawWindow+0x27c>)
 800d766:	6013      	str	r3, [r2, #0]
 800d768:	4b9b      	ldr	r3, [pc, #620]	; (800d9d8 <DrawWindow+0x280>)
 800d76a:	2200      	movs	r2, #0
 800d76c:	601a      	str	r2, [r3, #0]
 800d76e:	687b      	ldr	r3, [r7, #4]
 800d770:	f503 7361 	add.w	r3, r3, #900	; 0x384
 800d774:	4a99      	ldr	r2, [pc, #612]	; (800d9dc <DrawWindow+0x284>)
 800d776:	6013      	str	r3, [r2, #0]
 800d778:	683b      	ldr	r3, [r7, #0]
 800d77a:	3344      	adds	r3, #68	; 0x44
 800d77c:	f9b3 3000 	ldrsh.w	r3, [r3]
 800d780:	461a      	mov	r2, r3
 800d782:	4b97      	ldr	r3, [pc, #604]	; (800d9e0 <DrawWindow+0x288>)
 800d784:	601a      	str	r2, [r3, #0]
 800d786:	683b      	ldr	r3, [r7, #0]
 800d788:	3346      	adds	r3, #70	; 0x46
 800d78a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800d78e:	461a      	mov	r2, r3
 800d790:	4b94      	ldr	r3, [pc, #592]	; (800d9e4 <DrawWindow+0x28c>)
 800d792:	601a      	str	r2, [r3, #0]
 800d794:	4b92      	ldr	r3, [pc, #584]	; (800d9e0 <DrawWindow+0x288>)
 800d796:	681a      	ldr	r2, [r3, #0]
 800d798:	4b92      	ldr	r3, [pc, #584]	; (800d9e4 <DrawWindow+0x28c>)
 800d79a:	681b      	ldr	r3, [r3, #0]
 800d79c:	4413      	add	r3, r2
 800d79e:	4a91      	ldr	r2, [pc, #580]	; (800d9e4 <DrawWindow+0x28c>)
 800d7a0:	6013      	str	r3, [r2, #0]
 800d7a2:	4b8d      	ldr	r3, [pc, #564]	; (800d9d8 <DrawWindow+0x280>)
 800d7a4:	681b      	ldr	r3, [r3, #0]
 800d7a6:	2b00      	cmp	r3, #0
 800d7a8:	d102      	bne.n	800d7b0 <DrawWindow+0x58>
 800d7aa:	f7ff f93b 	bl	800ca24 <Buld_0>
 800d7ae:	e064      	b.n	800d87a <DrawWindow+0x122>
 800d7b0:	4b89      	ldr	r3, [pc, #548]	; (800d9d8 <DrawWindow+0x280>)
 800d7b2:	681b      	ldr	r3, [r3, #0]
 800d7b4:	f5b3 7f97 	cmp.w	r3, #302	; 0x12e
 800d7b8:	d102      	bne.n	800d7c0 <DrawWindow+0x68>
 800d7ba:	f7ff f933 	bl	800ca24 <Buld_0>
 800d7be:	e05c      	b.n	800d87a <DrawWindow+0x122>
 800d7c0:	4b85      	ldr	r3, [pc, #532]	; (800d9d8 <DrawWindow+0x280>)
 800d7c2:	681b      	ldr	r3, [r3, #0]
 800d7c4:	2b01      	cmp	r3, #1
 800d7c6:	d102      	bne.n	800d7ce <DrawWindow+0x76>
 800d7c8:	f7ff f938 	bl	800ca3c <Buld_1>
 800d7cc:	e055      	b.n	800d87a <DrawWindow+0x122>
 800d7ce:	4b86      	ldr	r3, [pc, #536]	; (800d9e8 <DrawWindow+0x290>)
 800d7d0:	f240 122d 	movw	r2, #301	; 0x12d
 800d7d4:	601a      	str	r2, [r3, #0]
 800d7d6:	4b80      	ldr	r3, [pc, #512]	; (800d9d8 <DrawWindow+0x280>)
 800d7d8:	681a      	ldr	r2, [r3, #0]
 800d7da:	4b83      	ldr	r3, [pc, #524]	; (800d9e8 <DrawWindow+0x290>)
 800d7dc:	681b      	ldr	r3, [r3, #0]
 800d7de:	429a      	cmp	r2, r3
 800d7e0:	d102      	bne.n	800d7e8 <DrawWindow+0x90>
 800d7e2:	f7ff f92b 	bl	800ca3c <Buld_1>
 800d7e6:	e048      	b.n	800d87a <DrawWindow+0x122>
 800d7e8:	4b7b      	ldr	r3, [pc, #492]	; (800d9d8 <DrawWindow+0x280>)
 800d7ea:	681b      	ldr	r3, [r3, #0]
 800d7ec:	3b01      	subs	r3, #1
 800d7ee:	4a7e      	ldr	r2, [pc, #504]	; (800d9e8 <DrawWindow+0x290>)
 800d7f0:	6013      	str	r3, [r2, #0]
 800d7f2:	4b7e      	ldr	r3, [pc, #504]	; (800d9ec <DrawWindow+0x294>)
 800d7f4:	2219      	movs	r2, #25
 800d7f6:	601a      	str	r2, [r3, #0]
 800d7f8:	4b7b      	ldr	r3, [pc, #492]	; (800d9e8 <DrawWindow+0x290>)
 800d7fa:	681a      	ldr	r2, [r3, #0]
 800d7fc:	4b7b      	ldr	r3, [pc, #492]	; (800d9ec <DrawWindow+0x294>)
 800d7fe:	681b      	ldr	r3, [r3, #0]
 800d800:	fbb2 f3f3 	udiv	r3, r2, r3
 800d804:	4a7a      	ldr	r2, [pc, #488]	; (800d9f0 <DrawWindow+0x298>)
 800d806:	6013      	str	r3, [r2, #0]
 800d808:	4b79      	ldr	r3, [pc, #484]	; (800d9f0 <DrawWindow+0x298>)
 800d80a:	681b      	ldr	r3, [r3, #0]
 800d80c:	4a77      	ldr	r2, [pc, #476]	; (800d9ec <DrawWindow+0x294>)
 800d80e:	6812      	ldr	r2, [r2, #0]
 800d810:	fb02 f303 	mul.w	r3, r2, r3
 800d814:	4a76      	ldr	r2, [pc, #472]	; (800d9f0 <DrawWindow+0x298>)
 800d816:	6013      	str	r3, [r2, #0]
 800d818:	4b73      	ldr	r3, [pc, #460]	; (800d9e8 <DrawWindow+0x290>)
 800d81a:	681a      	ldr	r2, [r3, #0]
 800d81c:	4b74      	ldr	r3, [pc, #464]	; (800d9f0 <DrawWindow+0x298>)
 800d81e:	681b      	ldr	r3, [r3, #0]
 800d820:	1ad3      	subs	r3, r2, r3
 800d822:	4a73      	ldr	r2, [pc, #460]	; (800d9f0 <DrawWindow+0x298>)
 800d824:	6013      	str	r3, [r2, #0]
 800d826:	4b72      	ldr	r3, [pc, #456]	; (800d9f0 <DrawWindow+0x298>)
 800d828:	681b      	ldr	r3, [r3, #0]
 800d82a:	2b00      	cmp	r3, #0
 800d82c:	d102      	bne.n	800d834 <DrawWindow+0xdc>
 800d82e:	f7ff f975 	bl	800cb1c <Buld_4>
 800d832:	e022      	b.n	800d87a <DrawWindow+0x122>
 800d834:	4b6d      	ldr	r3, [pc, #436]	; (800d9ec <DrawWindow+0x294>)
 800d836:	2205      	movs	r2, #5
 800d838:	601a      	str	r2, [r3, #0]
 800d83a:	4b6b      	ldr	r3, [pc, #428]	; (800d9e8 <DrawWindow+0x290>)
 800d83c:	681a      	ldr	r2, [r3, #0]
 800d83e:	4b6b      	ldr	r3, [pc, #428]	; (800d9ec <DrawWindow+0x294>)
 800d840:	681b      	ldr	r3, [r3, #0]
 800d842:	fbb2 f3f3 	udiv	r3, r2, r3
 800d846:	4a6a      	ldr	r2, [pc, #424]	; (800d9f0 <DrawWindow+0x298>)
 800d848:	6013      	str	r3, [r2, #0]
 800d84a:	4b69      	ldr	r3, [pc, #420]	; (800d9f0 <DrawWindow+0x298>)
 800d84c:	681b      	ldr	r3, [r3, #0]
 800d84e:	4a67      	ldr	r2, [pc, #412]	; (800d9ec <DrawWindow+0x294>)
 800d850:	6812      	ldr	r2, [r2, #0]
 800d852:	fb02 f303 	mul.w	r3, r2, r3
 800d856:	4a66      	ldr	r2, [pc, #408]	; (800d9f0 <DrawWindow+0x298>)
 800d858:	6013      	str	r3, [r2, #0]
 800d85a:	4b63      	ldr	r3, [pc, #396]	; (800d9e8 <DrawWindow+0x290>)
 800d85c:	681a      	ldr	r2, [r3, #0]
 800d85e:	4b64      	ldr	r3, [pc, #400]	; (800d9f0 <DrawWindow+0x298>)
 800d860:	681b      	ldr	r3, [r3, #0]
 800d862:	1ad3      	subs	r3, r2, r3
 800d864:	4a62      	ldr	r2, [pc, #392]	; (800d9f0 <DrawWindow+0x298>)
 800d866:	6013      	str	r3, [r2, #0]
 800d868:	4b61      	ldr	r3, [pc, #388]	; (800d9f0 <DrawWindow+0x298>)
 800d86a:	681b      	ldr	r3, [r3, #0]
 800d86c:	2b00      	cmp	r3, #0
 800d86e:	d102      	bne.n	800d876 <DrawWindow+0x11e>
 800d870:	f7ff f92e 	bl	800cad0 <Buld_3>
 800d874:	e001      	b.n	800d87a <DrawWindow+0x122>
 800d876:	f7ff f909 	bl	800ca8c <Buld_2>
 800d87a:	4b57      	ldr	r3, [pc, #348]	; (800d9d8 <DrawWindow+0x280>)
 800d87c:	681b      	ldr	r3, [r3, #0]
 800d87e:	2b02      	cmp	r3, #2
 800d880:	d96c      	bls.n	800d95c <DrawWindow+0x204>
 800d882:	4b55      	ldr	r3, [pc, #340]	; (800d9d8 <DrawWindow+0x280>)
 800d884:	681b      	ldr	r3, [r3, #0]
 800d886:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 800d88a:	d267      	bcs.n	800d95c <DrawWindow+0x204>
 800d88c:	683b      	ldr	r3, [r7, #0]
 800d88e:	3306      	adds	r3, #6
 800d890:	f9b3 3000 	ldrsh.w	r3, [r3]
 800d894:	461a      	mov	r2, r3
 800d896:	4b54      	ldr	r3, [pc, #336]	; (800d9e8 <DrawWindow+0x290>)
 800d898:	601a      	str	r2, [r3, #0]
 800d89a:	4b53      	ldr	r3, [pc, #332]	; (800d9e8 <DrawWindow+0x290>)
 800d89c:	681b      	ldr	r3, [r3, #0]
 800d89e:	f003 0304 	and.w	r3, r3, #4
 800d8a2:	2b00      	cmp	r3, #0
 800d8a4:	d10f      	bne.n	800d8c6 <DrawWindow+0x16e>
 800d8a6:	4b50      	ldr	r3, [pc, #320]	; (800d9e8 <DrawWindow+0x290>)
 800d8a8:	222e      	movs	r2, #46	; 0x2e
 800d8aa:	601a      	str	r2, [r3, #0]
 800d8ac:	683b      	ldr	r3, [r7, #0]
 800d8ae:	331a      	adds	r3, #26
 800d8b0:	f9b3 3000 	ldrsh.w	r3, [r3]
 800d8b4:	461a      	mov	r2, r3
 800d8b6:	4b4f      	ldr	r3, [pc, #316]	; (800d9f4 <DrawWindow+0x29c>)
 800d8b8:	601a      	str	r2, [r3, #0]
 800d8ba:	4b4f      	ldr	r3, [pc, #316]	; (800d9f8 <DrawWindow+0x2a0>)
 800d8bc:	2208      	movs	r2, #8
 800d8be:	601a      	str	r2, [r3, #0]
 800d8c0:	2001      	movs	r0, #1
 800d8c2:	f7ff f951 	bl	800cb68 <Draw_Digit_Analog>
 800d8c6:	683b      	ldr	r3, [r7, #0]
 800d8c8:	3304      	adds	r3, #4
 800d8ca:	f9b3 3000 	ldrsh.w	r3, [r3]
 800d8ce:	461a      	mov	r2, r3
 800d8d0:	4b45      	ldr	r3, [pc, #276]	; (800d9e8 <DrawWindow+0x290>)
 800d8d2:	601a      	str	r2, [r3, #0]
 800d8d4:	4b44      	ldr	r3, [pc, #272]	; (800d9e8 <DrawWindow+0x290>)
 800d8d6:	681b      	ldr	r3, [r3, #0]
 800d8d8:	f003 0304 	and.w	r3, r3, #4
 800d8dc:	2b00      	cmp	r3, #0
 800d8de:	d10f      	bne.n	800d900 <DrawWindow+0x1a8>
 800d8e0:	4b41      	ldr	r3, [pc, #260]	; (800d9e8 <DrawWindow+0x290>)
 800d8e2:	222c      	movs	r2, #44	; 0x2c
 800d8e4:	601a      	str	r2, [r3, #0]
 800d8e6:	683b      	ldr	r3, [r7, #0]
 800d8e8:	3318      	adds	r3, #24
 800d8ea:	f9b3 3000 	ldrsh.w	r3, [r3]
 800d8ee:	461a      	mov	r2, r3
 800d8f0:	4b40      	ldr	r3, [pc, #256]	; (800d9f4 <DrawWindow+0x29c>)
 800d8f2:	601a      	str	r2, [r3, #0]
 800d8f4:	4b40      	ldr	r3, [pc, #256]	; (800d9f8 <DrawWindow+0x2a0>)
 800d8f6:	2204      	movs	r2, #4
 800d8f8:	601a      	str	r2, [r3, #0]
 800d8fa:	2001      	movs	r0, #1
 800d8fc:	f7ff f934 	bl	800cb68 <Draw_Digit_Analog>
 800d900:	683b      	ldr	r3, [r7, #0]
 800d902:	3302      	adds	r3, #2
 800d904:	f9b3 3000 	ldrsh.w	r3, [r3]
 800d908:	461a      	mov	r2, r3
 800d90a:	4b37      	ldr	r3, [pc, #220]	; (800d9e8 <DrawWindow+0x290>)
 800d90c:	601a      	str	r2, [r3, #0]
 800d90e:	4b36      	ldr	r3, [pc, #216]	; (800d9e8 <DrawWindow+0x290>)
 800d910:	681b      	ldr	r3, [r3, #0]
 800d912:	f003 0304 	and.w	r3, r3, #4
 800d916:	2b00      	cmp	r3, #0
 800d918:	d10a      	bne.n	800d930 <DrawWindow+0x1d8>
 800d91a:	4b33      	ldr	r3, [pc, #204]	; (800d9e8 <DrawWindow+0x290>)
 800d91c:	222a      	movs	r2, #42	; 0x2a
 800d91e:	601a      	str	r2, [r3, #0]
 800d920:	687b      	ldr	r3, [r7, #4]
 800d922:	f503 7396 	add.w	r3, r3, #300	; 0x12c
 800d926:	4a33      	ldr	r2, [pc, #204]	; (800d9f4 <DrawWindow+0x29c>)
 800d928:	6013      	str	r3, [r2, #0]
 800d92a:	2000      	movs	r0, #0
 800d92c:	f7ff f91c 	bl	800cb68 <Draw_Digit_Analog>
 800d930:	683b      	ldr	r3, [r7, #0]
 800d932:	f9b3 3000 	ldrsh.w	r3, [r3]
 800d936:	461a      	mov	r2, r3
 800d938:	4b2b      	ldr	r3, [pc, #172]	; (800d9e8 <DrawWindow+0x290>)
 800d93a:	601a      	str	r2, [r3, #0]
 800d93c:	4b2a      	ldr	r3, [pc, #168]	; (800d9e8 <DrawWindow+0x290>)
 800d93e:	681b      	ldr	r3, [r3, #0]
 800d940:	f003 0304 	and.w	r3, r3, #4
 800d944:	2b00      	cmp	r3, #0
 800d946:	d10b      	bne.n	800d960 <DrawWindow+0x208>
 800d948:	4b27      	ldr	r3, [pc, #156]	; (800d9e8 <DrawWindow+0x290>)
 800d94a:	2228      	movs	r2, #40	; 0x28
 800d94c:	601a      	str	r2, [r3, #0]
 800d94e:	4a29      	ldr	r2, [pc, #164]	; (800d9f4 <DrawWindow+0x29c>)
 800d950:	687b      	ldr	r3, [r7, #4]
 800d952:	6013      	str	r3, [r2, #0]
 800d954:	2000      	movs	r0, #0
 800d956:	f7ff f907 	bl	800cb68 <Draw_Digit_Analog>
 800d95a:	e002      	b.n	800d962 <DrawWindow+0x20a>
 800d95c:	bf00      	nop
 800d95e:	e000      	b.n	800d962 <DrawWindow+0x20a>
 800d960:	bf00      	nop
 800d962:	4b1d      	ldr	r3, [pc, #116]	; (800d9d8 <DrawWindow+0x280>)
 800d964:	681b      	ldr	r3, [r3, #0]
 800d966:	2b00      	cmp	r3, #0
 800d968:	d103      	bne.n	800d972 <DrawWindow+0x21a>
 800d96a:	6838      	ldr	r0, [r7, #0]
 800d96c:	f7ff fa14 	bl	800cd98 <Cursor_0>
 800d970:	e047      	b.n	800da02 <DrawWindow+0x2aa>
 800d972:	4b19      	ldr	r3, [pc, #100]	; (800d9d8 <DrawWindow+0x280>)
 800d974:	681b      	ldr	r3, [r3, #0]
 800d976:	f5b3 7f97 	cmp.w	r3, #302	; 0x12e
 800d97a:	d103      	bne.n	800d984 <DrawWindow+0x22c>
 800d97c:	6838      	ldr	r0, [r7, #0]
 800d97e:	f7ff fa0b 	bl	800cd98 <Cursor_0>
 800d982:	e03e      	b.n	800da02 <DrawWindow+0x2aa>
 800d984:	4b14      	ldr	r3, [pc, #80]	; (800d9d8 <DrawWindow+0x280>)
 800d986:	681b      	ldr	r3, [r3, #0]
 800d988:	2b01      	cmp	r3, #1
 800d98a:	d103      	bne.n	800d994 <DrawWindow+0x23c>
 800d98c:	6838      	ldr	r0, [r7, #0]
 800d98e:	f7ff fa8d 	bl	800ceac <Cursor_1>
 800d992:	e036      	b.n	800da02 <DrawWindow+0x2aa>
 800d994:	4b16      	ldr	r3, [pc, #88]	; (800d9f0 <DrawWindow+0x298>)
 800d996:	f240 122d 	movw	r2, #301	; 0x12d
 800d99a:	601a      	str	r2, [r3, #0]
 800d99c:	4b0e      	ldr	r3, [pc, #56]	; (800d9d8 <DrawWindow+0x280>)
 800d99e:	681a      	ldr	r2, [r3, #0]
 800d9a0:	4b13      	ldr	r3, [pc, #76]	; (800d9f0 <DrawWindow+0x298>)
 800d9a2:	681b      	ldr	r3, [r3, #0]
 800d9a4:	429a      	cmp	r2, r3
 800d9a6:	d103      	bne.n	800d9b0 <DrawWindow+0x258>
 800d9a8:	6838      	ldr	r0, [r7, #0]
 800d9aa:	f7ff fa7f 	bl	800ceac <Cursor_1>
 800d9ae:	e028      	b.n	800da02 <DrawWindow+0x2aa>
 800d9b0:	4b09      	ldr	r3, [pc, #36]	; (800d9d8 <DrawWindow+0x280>)
 800d9b2:	681b      	ldr	r3, [r3, #0]
 800d9b4:	2b02      	cmp	r3, #2
 800d9b6:	d103      	bne.n	800d9c0 <DrawWindow+0x268>
 800d9b8:	6838      	ldr	r0, [r7, #0]
 800d9ba:	f7ff faeb 	bl	800cf94 <Cursor_2>
 800d9be:	e020      	b.n	800da02 <DrawWindow+0x2aa>
 800d9c0:	4b05      	ldr	r3, [pc, #20]	; (800d9d8 <DrawWindow+0x280>)
 800d9c2:	681b      	ldr	r3, [r3, #0]
 800d9c4:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 800d9c8:	d118      	bne.n	800d9fc <DrawWindow+0x2a4>
 800d9ca:	6838      	ldr	r0, [r7, #0]
 800d9cc:	f7ff fae2 	bl	800cf94 <Cursor_2>
 800d9d0:	e017      	b.n	800da02 <DrawWindow+0x2aa>
 800d9d2:	bf00      	nop
 800d9d4:	20000a44 	.word	0x20000a44
 800d9d8:	20000bf8 	.word	0x20000bf8
 800d9dc:	20000c04 	.word	0x20000c04
 800d9e0:	20000be4 	.word	0x20000be4
 800d9e4:	20000bf4 	.word	0x20000bf4
 800d9e8:	20000a40 	.word	0x20000a40
 800d9ec:	20000be8 	.word	0x20000be8
 800d9f0:	20000a3c 	.word	0x20000a3c
 800d9f4:	20000bec 	.word	0x20000bec
 800d9f8:	20000a38 	.word	0x20000a38
 800d9fc:	6838      	ldr	r0, [r7, #0]
 800d9fe:	f7ff fb1d 	bl	800d03c <Cursor_3>
 800da02:	6838      	ldr	r0, [r7, #0]
 800da04:	f7ff fb82 	bl	800d10c <Cursor_4>
 800da08:	683b      	ldr	r3, [r7, #0]
 800da0a:	334c      	adds	r3, #76	; 0x4c
 800da0c:	f9b3 3000 	ldrsh.w	r3, [r3]
 800da10:	461a      	mov	r2, r3
 800da12:	4b17      	ldr	r3, [pc, #92]	; (800da70 <DrawWindow+0x318>)
 800da14:	601a      	str	r2, [r3, #0]
 800da16:	4b16      	ldr	r3, [pc, #88]	; (800da70 <DrawWindow+0x318>)
 800da18:	681b      	ldr	r3, [r3, #0]
 800da1a:	f003 0301 	and.w	r3, r3, #1
 800da1e:	2b00      	cmp	r3, #0
 800da20:	d00f      	beq.n	800da42 <DrawWindow+0x2ea>
 800da22:	4b14      	ldr	r3, [pc, #80]	; (800da74 <DrawWindow+0x31c>)
 800da24:	681a      	ldr	r2, [r3, #0]
 800da26:	4b14      	ldr	r3, [pc, #80]	; (800da78 <DrawWindow+0x320>)
 800da28:	681b      	ldr	r3, [r3, #0]
 800da2a:	429a      	cmp	r2, r3
 800da2c:	d30b      	bcc.n	800da46 <DrawWindow+0x2ee>
 800da2e:	4b11      	ldr	r3, [pc, #68]	; (800da74 <DrawWindow+0x31c>)
 800da30:	681a      	ldr	r2, [r3, #0]
 800da32:	4b12      	ldr	r3, [pc, #72]	; (800da7c <DrawWindow+0x324>)
 800da34:	681b      	ldr	r3, [r3, #0]
 800da36:	429a      	cmp	r2, r3
 800da38:	d207      	bcs.n	800da4a <DrawWindow+0x2f2>
 800da3a:	6838      	ldr	r0, [r7, #0]
 800da3c:	f7ff fd18 	bl	800d470 <Draw_Pop>
 800da40:	e004      	b.n	800da4c <DrawWindow+0x2f4>
 800da42:	bf00      	nop
 800da44:	e002      	b.n	800da4c <DrawWindow+0x2f4>
 800da46:	bf00      	nop
 800da48:	e000      	b.n	800da4c <DrawWindow+0x2f4>
 800da4a:	bf00      	nop
 800da4c:	6838      	ldr	r0, [r7, #0]
 800da4e:	f7ff fcdd 	bl	800d40c <Send_LCD>
 800da52:	4b08      	ldr	r3, [pc, #32]	; (800da74 <DrawWindow+0x31c>)
 800da54:	681b      	ldr	r3, [r3, #0]
 800da56:	f5b3 7f97 	cmp.w	r3, #302	; 0x12e
 800da5a:	d005      	beq.n	800da68 <DrawWindow+0x310>
 800da5c:	4b05      	ldr	r3, [pc, #20]	; (800da74 <DrawWindow+0x31c>)
 800da5e:	681b      	ldr	r3, [r3, #0]
 800da60:	3301      	adds	r3, #1
 800da62:	4a04      	ldr	r2, [pc, #16]	; (800da74 <DrawWindow+0x31c>)
 800da64:	6013      	str	r3, [r2, #0]
 800da66:	e69c      	b.n	800d7a2 <DrawWindow+0x4a>
 800da68:	bf00      	nop
 800da6a:	3708      	adds	r7, #8
 800da6c:	46bd      	mov	sp, r7
 800da6e:	bd80      	pop	{r7, pc}
 800da70:	20000a40 	.word	0x20000a40
 800da74:	20000bf8 	.word	0x20000bf8
 800da78:	20000be4 	.word	0x20000be4
 800da7c:	20000bf4 	.word	0x20000bf4

0800da80 <DispChar8x14>:
 800da80:	b580      	push	{r7, lr}
 800da82:	b084      	sub	sp, #16
 800da84:	af00      	add	r7, sp, #0
 800da86:	4603      	mov	r3, r0
 800da88:	460a      	mov	r2, r1
 800da8a:	71fb      	strb	r3, [r7, #7]
 800da8c:	4613      	mov	r3, r2
 800da8e:	71bb      	strb	r3, [r7, #6]
 800da90:	2300      	movs	r3, #0
 800da92:	81fb      	strh	r3, [r7, #14]
 800da94:	e06d      	b.n	800db72 <DispChar8x14+0xf2>
 800da96:	79fb      	ldrb	r3, [r7, #7]
 800da98:	f003 0310 	and.w	r3, r3, #16
 800da9c:	2b00      	cmp	r3, #0
 800da9e:	d00a      	beq.n	800dab6 <DispChar8x14+0x36>
 800daa0:	79bb      	ldrb	r3, [r7, #6]
 800daa2:	3b40      	subs	r3, #64	; 0x40
 800daa4:	00da      	lsls	r2, r3, #3
 800daa6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800daaa:	4413      	add	r3, r2
 800daac:	4a35      	ldr	r2, [pc, #212]	; (800db84 <DispChar8x14+0x104>)
 800daae:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800dab2:	817b      	strh	r3, [r7, #10]
 800dab4:	e005      	b.n	800dac2 <DispChar8x14+0x42>
 800dab6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800daba:	4a33      	ldr	r2, [pc, #204]	; (800db88 <DispChar8x14+0x108>)
 800dabc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800dac0:	817b      	strh	r3, [r7, #10]
 800dac2:	79fb      	ldrb	r3, [r7, #7]
 800dac4:	f003 0320 	and.w	r3, r3, #32
 800dac8:	2b00      	cmp	r3, #0
 800daca:	d00c      	beq.n	800dae6 <DispChar8x14+0x66>
 800dacc:	89fb      	ldrh	r3, [r7, #14]
 800dace:	f003 0301 	and.w	r3, r3, #1
 800dad2:	b29b      	uxth	r3, r3
 800dad4:	2b00      	cmp	r3, #0
 800dad6:	d001      	beq.n	800dadc <DispChar8x14+0x5c>
 800dad8:	4a2c      	ldr	r2, [pc, #176]	; (800db8c <DispChar8x14+0x10c>)
 800dada:	e001      	b.n	800dae0 <DispChar8x14+0x60>
 800dadc:	f245 5255 	movw	r2, #21845	; 0x5555
 800dae0:	897b      	ldrh	r3, [r7, #10]
 800dae2:	4013      	ands	r3, r2
 800dae4:	817b      	strh	r3, [r7, #10]
 800dae6:	4b2a      	ldr	r3, [pc, #168]	; (800db90 <DispChar8x14+0x110>)
 800dae8:	f9b3 3000 	ldrsh.w	r3, [r3]
 800daec:	4a29      	ldr	r2, [pc, #164]	; (800db94 <DispChar8x14+0x114>)
 800daee:	f9b2 2000 	ldrsh.w	r2, [r2]
 800daf2:	4611      	mov	r1, r2
 800daf4:	4618      	mov	r0, r3
 800daf6:	f004 fb5b 	bl	80121b0 <LCD_Set_Posi>
 800dafa:	2300      	movs	r3, #0
 800dafc:	81bb      	strh	r3, [r7, #12]
 800dafe:	e027      	b.n	800db50 <DispChar8x14+0xd0>
 800db00:	897b      	ldrh	r3, [r7, #10]
 800db02:	f003 0304 	and.w	r3, r3, #4
 800db06:	2b00      	cmp	r3, #0
 800db08:	d00d      	beq.n	800db26 <DispChar8x14+0xa6>
 800db0a:	79fb      	ldrb	r3, [r7, #7]
 800db0c:	f003 0301 	and.w	r3, r3, #1
 800db10:	2b00      	cmp	r3, #0
 800db12:	d002      	beq.n	800db1a <DispChar8x14+0x9a>
 800db14:	4b20      	ldr	r3, [pc, #128]	; (800db98 <DispChar8x14+0x118>)
 800db16:	881b      	ldrh	r3, [r3, #0]
 800db18:	e001      	b.n	800db1e <DispChar8x14+0x9e>
 800db1a:	4b20      	ldr	r3, [pc, #128]	; (800db9c <DispChar8x14+0x11c>)
 800db1c:	881b      	ldrh	r3, [r3, #0]
 800db1e:	4618      	mov	r0, r3
 800db20:	f004 fb94 	bl	801224c <LCD_Set_Pixel>
 800db24:	e00c      	b.n	800db40 <DispChar8x14+0xc0>
 800db26:	79fb      	ldrb	r3, [r7, #7]
 800db28:	f003 0301 	and.w	r3, r3, #1
 800db2c:	2b00      	cmp	r3, #0
 800db2e:	d002      	beq.n	800db36 <DispChar8x14+0xb6>
 800db30:	4b1a      	ldr	r3, [pc, #104]	; (800db9c <DispChar8x14+0x11c>)
 800db32:	881b      	ldrh	r3, [r3, #0]
 800db34:	e001      	b.n	800db3a <DispChar8x14+0xba>
 800db36:	4b18      	ldr	r3, [pc, #96]	; (800db98 <DispChar8x14+0x118>)
 800db38:	881b      	ldrh	r3, [r3, #0]
 800db3a:	4618      	mov	r0, r3
 800db3c:	f004 fb86 	bl	801224c <LCD_Set_Pixel>
 800db40:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800db44:	105b      	asrs	r3, r3, #1
 800db46:	817b      	strh	r3, [r7, #10]
 800db48:	89bb      	ldrh	r3, [r7, #12]
 800db4a:	3301      	adds	r3, #1
 800db4c:	b29b      	uxth	r3, r3
 800db4e:	81bb      	strh	r3, [r7, #12]
 800db50:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800db54:	2b0d      	cmp	r3, #13
 800db56:	ddd3      	ble.n	800db00 <DispChar8x14+0x80>
 800db58:	4b0d      	ldr	r3, [pc, #52]	; (800db90 <DispChar8x14+0x110>)
 800db5a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800db5e:	b29b      	uxth	r3, r3
 800db60:	3301      	adds	r3, #1
 800db62:	b29b      	uxth	r3, r3
 800db64:	b21a      	sxth	r2, r3
 800db66:	4b0a      	ldr	r3, [pc, #40]	; (800db90 <DispChar8x14+0x110>)
 800db68:	801a      	strh	r2, [r3, #0]
 800db6a:	89fb      	ldrh	r3, [r7, #14]
 800db6c:	3301      	adds	r3, #1
 800db6e:	b29b      	uxth	r3, r3
 800db70:	81fb      	strh	r3, [r7, #14]
 800db72:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800db76:	2b07      	cmp	r3, #7
 800db78:	dd8d      	ble.n	800da96 <DispChar8x14+0x16>
 800db7a:	bf00      	nop
 800db7c:	bf00      	nop
 800db7e:	3710      	adds	r7, #16
 800db80:	46bd      	mov	sp, r7
 800db82:	bd80      	pop	{r7, pc}
 800db84:	08001290 	.word	0x08001290
 800db88:	08000c90 	.word	0x08000c90
 800db8c:	ffffaaaa 	.word	0xffffaaaa
 800db90:	2000078a 	.word	0x2000078a
 800db94:	2000078c 	.word	0x2000078c
 800db98:	200015ce 	.word	0x200015ce
 800db9c:	200015cc 	.word	0x200015cc

0800dba0 <DispStr8x14>:
 800dba0:	b580      	push	{r7, lr}
 800dba2:	b086      	sub	sp, #24
 800dba4:	af00      	add	r7, sp, #0
 800dba6:	607b      	str	r3, [r7, #4]
 800dba8:	4603      	mov	r3, r0
 800dbaa:	81fb      	strh	r3, [r7, #14]
 800dbac:	460b      	mov	r3, r1
 800dbae:	81bb      	strh	r3, [r7, #12]
 800dbb0:	4613      	mov	r3, r2
 800dbb2:	72fb      	strb	r3, [r7, #11]
 800dbb4:	4a22      	ldr	r2, [pc, #136]	; (800dc40 <DispStr8x14+0xa0>)
 800dbb6:	89fb      	ldrh	r3, [r7, #14]
 800dbb8:	8013      	strh	r3, [r2, #0]
 800dbba:	4a22      	ldr	r2, [pc, #136]	; (800dc44 <DispStr8x14+0xa4>)
 800dbbc:	89bb      	ldrh	r3, [r7, #12]
 800dbbe:	8013      	strh	r3, [r2, #0]
 800dbc0:	4b1f      	ldr	r3, [pc, #124]	; (800dc40 <DispStr8x14+0xa0>)
 800dbc2:	f9b3 3000 	ldrsh.w	r3, [r3]
 800dbc6:	4a1f      	ldr	r2, [pc, #124]	; (800dc44 <DispStr8x14+0xa4>)
 800dbc8:	f9b2 2000 	ldrsh.w	r2, [r2]
 800dbcc:	4611      	mov	r1, r2
 800dbce:	4618      	mov	r0, r3
 800dbd0:	f004 faee 	bl	80121b0 <LCD_Set_Posi>
 800dbd4:	2300      	movs	r3, #0
 800dbd6:	82fb      	strh	r3, [r7, #22]
 800dbd8:	e012      	b.n	800dc00 <DispStr8x14+0x60>
 800dbda:	7afb      	ldrb	r3, [r7, #11]
 800dbdc:	f003 0301 	and.w	r3, r3, #1
 800dbe0:	2b00      	cmp	r3, #0
 800dbe2:	d002      	beq.n	800dbea <DispStr8x14+0x4a>
 800dbe4:	4b18      	ldr	r3, [pc, #96]	; (800dc48 <DispStr8x14+0xa8>)
 800dbe6:	881b      	ldrh	r3, [r3, #0]
 800dbe8:	e001      	b.n	800dbee <DispStr8x14+0x4e>
 800dbea:	4b18      	ldr	r3, [pc, #96]	; (800dc4c <DispStr8x14+0xac>)
 800dbec:	881b      	ldrh	r3, [r3, #0]
 800dbee:	4618      	mov	r0, r3
 800dbf0:	f004 fb2c 	bl	801224c <LCD_Set_Pixel>
 800dbf4:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800dbf8:	b29b      	uxth	r3, r3
 800dbfa:	3301      	adds	r3, #1
 800dbfc:	b29b      	uxth	r3, r3
 800dbfe:	82fb      	strh	r3, [r7, #22]
 800dc00:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800dc04:	2b0d      	cmp	r3, #13
 800dc06:	dde8      	ble.n	800dbda <DispStr8x14+0x3a>
 800dc08:	4b0d      	ldr	r3, [pc, #52]	; (800dc40 <DispStr8x14+0xa0>)
 800dc0a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800dc0e:	b29b      	uxth	r3, r3
 800dc10:	3301      	adds	r3, #1
 800dc12:	b29b      	uxth	r3, r3
 800dc14:	b21a      	sxth	r2, r3
 800dc16:	4b0a      	ldr	r3, [pc, #40]	; (800dc40 <DispStr8x14+0xa0>)
 800dc18:	801a      	strh	r2, [r3, #0]
 800dc1a:	e008      	b.n	800dc2e <DispStr8x14+0x8e>
 800dc1c:	687b      	ldr	r3, [r7, #4]
 800dc1e:	1c5a      	adds	r2, r3, #1
 800dc20:	607a      	str	r2, [r7, #4]
 800dc22:	781a      	ldrb	r2, [r3, #0]
 800dc24:	7afb      	ldrb	r3, [r7, #11]
 800dc26:	4611      	mov	r1, r2
 800dc28:	4618      	mov	r0, r3
 800dc2a:	f7ff ff29 	bl	800da80 <DispChar8x14>
 800dc2e:	687b      	ldr	r3, [r7, #4]
 800dc30:	781b      	ldrb	r3, [r3, #0]
 800dc32:	2b00      	cmp	r3, #0
 800dc34:	d1f2      	bne.n	800dc1c <DispStr8x14+0x7c>
 800dc36:	bf00      	nop
 800dc38:	bf00      	nop
 800dc3a:	3718      	adds	r7, #24
 800dc3c:	46bd      	mov	sp, r7
 800dc3e:	bd80      	pop	{r7, pc}
 800dc40:	2000078a 	.word	0x2000078a
 800dc44:	2000078c 	.word	0x2000078c
 800dc48:	200015cc 	.word	0x200015cc
 800dc4c:	200015ce 	.word	0x200015ce

0800dc50 <SetColor>:
 800dc50:	b480      	push	{r7}
 800dc52:	b083      	sub	sp, #12
 800dc54:	af00      	add	r7, sp, #0
 800dc56:	4603      	mov	r3, r0
 800dc58:	460a      	mov	r2, r1
 800dc5a:	80fb      	strh	r3, [r7, #6]
 800dc5c:	4613      	mov	r3, r2
 800dc5e:	80bb      	strh	r3, [r7, #4]
 800dc60:	4a05      	ldr	r2, [pc, #20]	; (800dc78 <SetColor+0x28>)
 800dc62:	88fb      	ldrh	r3, [r7, #6]
 800dc64:	8013      	strh	r3, [r2, #0]
 800dc66:	4a05      	ldr	r2, [pc, #20]	; (800dc7c <SetColor+0x2c>)
 800dc68:	88bb      	ldrh	r3, [r7, #4]
 800dc6a:	8013      	strh	r3, [r2, #0]
 800dc6c:	bf00      	nop
 800dc6e:	370c      	adds	r7, #12
 800dc70:	46bd      	mov	sp, r7
 800dc72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc76:	4770      	bx	lr
 800dc78:	200015ce 	.word	0x200015ce
 800dc7c:	200015cc 	.word	0x200015cc

0800dc80 <DispStr>:
 800dc80:	b580      	push	{r7, lr}
 800dc82:	b086      	sub	sp, #24
 800dc84:	af00      	add	r7, sp, #0
 800dc86:	607b      	str	r3, [r7, #4]
 800dc88:	4603      	mov	r3, r0
 800dc8a:	81fb      	strh	r3, [r7, #14]
 800dc8c:	460b      	mov	r3, r1
 800dc8e:	81bb      	strh	r3, [r7, #12]
 800dc90:	4613      	mov	r3, r2
 800dc92:	72fb      	strb	r3, [r7, #11]
 800dc94:	4a5e      	ldr	r2, [pc, #376]	; (800de10 <DispStr+0x190>)
 800dc96:	89fb      	ldrh	r3, [r7, #14]
 800dc98:	8013      	strh	r3, [r2, #0]
 800dc9a:	4a5e      	ldr	r2, [pc, #376]	; (800de14 <DispStr+0x194>)
 800dc9c:	89bb      	ldrh	r3, [r7, #12]
 800dc9e:	8013      	strh	r3, [r2, #0]
 800dca0:	4b5b      	ldr	r3, [pc, #364]	; (800de10 <DispStr+0x190>)
 800dca2:	f9b3 3000 	ldrsh.w	r3, [r3]
 800dca6:	4a5b      	ldr	r2, [pc, #364]	; (800de14 <DispStr+0x194>)
 800dca8:	f9b2 2000 	ldrsh.w	r2, [r2]
 800dcac:	4611      	mov	r1, r2
 800dcae:	4618      	mov	r0, r3
 800dcb0:	f004 fa7e 	bl	80121b0 <LCD_Set_Posi>
 800dcb4:	e0a1      	b.n	800ddfa <DispStr+0x17a>
 800dcb6:	687b      	ldr	r3, [r7, #4]
 800dcb8:	1c5a      	adds	r2, r3, #1
 800dcba:	607a      	str	r2, [r7, #4]
 800dcbc:	781b      	ldrb	r3, [r3, #0]
 800dcbe:	747b      	strb	r3, [r7, #17]
 800dcc0:	2300      	movs	r3, #0
 800dcc2:	82fb      	strh	r3, [r7, #22]
 800dcc4:	e094      	b.n	800ddf0 <DispStr+0x170>
 800dcc6:	7afb      	ldrb	r3, [r7, #11]
 800dcc8:	f003 0310 	and.w	r3, r3, #16
 800dccc:	2b00      	cmp	r3, #0
 800dcce:	d10e      	bne.n	800dcee <DispStr+0x6e>
 800dcd0:	7c7b      	ldrb	r3, [r7, #17]
 800dcd2:	f1a3 0221 	sub.w	r2, r3, #33	; 0x21
 800dcd6:	4613      	mov	r3, r2
 800dcd8:	005b      	lsls	r3, r3, #1
 800dcda:	4413      	add	r3, r2
 800dcdc:	005b      	lsls	r3, r3, #1
 800dcde:	461a      	mov	r2, r3
 800dce0:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800dce4:	4413      	add	r3, r2
 800dce6:	4a4c      	ldr	r2, [pc, #304]	; (800de18 <DispStr+0x198>)
 800dce8:	5cd3      	ldrb	r3, [r2, r3]
 800dcea:	827b      	strh	r3, [r7, #18]
 800dcec:	e00d      	b.n	800dd0a <DispStr+0x8a>
 800dcee:	7c7b      	ldrb	r3, [r7, #17]
 800dcf0:	f1a3 0221 	sub.w	r2, r3, #33	; 0x21
 800dcf4:	4613      	mov	r3, r2
 800dcf6:	005b      	lsls	r3, r3, #1
 800dcf8:	4413      	add	r3, r2
 800dcfa:	005b      	lsls	r3, r3, #1
 800dcfc:	461a      	mov	r2, r3
 800dcfe:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800dd02:	4413      	add	r3, r2
 800dd04:	4a45      	ldr	r2, [pc, #276]	; (800de1c <DispStr+0x19c>)
 800dd06:	5cd3      	ldrb	r3, [r2, r3]
 800dd08:	827b      	strh	r3, [r7, #18]
 800dd0a:	7afb      	ldrb	r3, [r7, #11]
 800dd0c:	f003 0320 	and.w	r3, r3, #32
 800dd10:	2b00      	cmp	r3, #0
 800dd12:	d00c      	beq.n	800dd2e <DispStr+0xae>
 800dd14:	8afb      	ldrh	r3, [r7, #22]
 800dd16:	f003 0301 	and.w	r3, r3, #1
 800dd1a:	b29b      	uxth	r3, r3
 800dd1c:	2b00      	cmp	r3, #0
 800dd1e:	d001      	beq.n	800dd24 <DispStr+0xa4>
 800dd20:	4a3f      	ldr	r2, [pc, #252]	; (800de20 <DispStr+0x1a0>)
 800dd22:	e001      	b.n	800dd28 <DispStr+0xa8>
 800dd24:	f245 5255 	movw	r2, #21845	; 0x5555
 800dd28:	8a7b      	ldrh	r3, [r7, #18]
 800dd2a:	4013      	ands	r3, r2
 800dd2c:	827b      	strh	r3, [r7, #18]
 800dd2e:	4b38      	ldr	r3, [pc, #224]	; (800de10 <DispStr+0x190>)
 800dd30:	f9b3 3000 	ldrsh.w	r3, [r3]
 800dd34:	4a37      	ldr	r2, [pc, #220]	; (800de14 <DispStr+0x194>)
 800dd36:	f9b2 2000 	ldrsh.w	r2, [r2]
 800dd3a:	4611      	mov	r1, r2
 800dd3c:	4618      	mov	r0, r3
 800dd3e:	f004 fa37 	bl	80121b0 <LCD_Set_Posi>
 800dd42:	7afb      	ldrb	r3, [r7, #11]
 800dd44:	f003 0301 	and.w	r3, r3, #1
 800dd48:	2b00      	cmp	r3, #0
 800dd4a:	d002      	beq.n	800dd52 <DispStr+0xd2>
 800dd4c:	4b35      	ldr	r3, [pc, #212]	; (800de24 <DispStr+0x1a4>)
 800dd4e:	881b      	ldrh	r3, [r3, #0]
 800dd50:	e001      	b.n	800dd56 <DispStr+0xd6>
 800dd52:	4b35      	ldr	r3, [pc, #212]	; (800de28 <DispStr+0x1a8>)
 800dd54:	881b      	ldrh	r3, [r3, #0]
 800dd56:	4618      	mov	r0, r3
 800dd58:	f004 fa78 	bl	801224c <LCD_Set_Pixel>
 800dd5c:	4b2c      	ldr	r3, [pc, #176]	; (800de10 <DispStr+0x190>)
 800dd5e:	f9b3 2000 	ldrsh.w	r2, [r3]
 800dd62:	4b2c      	ldr	r3, [pc, #176]	; (800de14 <DispStr+0x194>)
 800dd64:	f9b3 3000 	ldrsh.w	r3, [r3]
 800dd68:	b29b      	uxth	r3, r3
 800dd6a:	3301      	adds	r3, #1
 800dd6c:	b29b      	uxth	r3, r3
 800dd6e:	b21b      	sxth	r3, r3
 800dd70:	4619      	mov	r1, r3
 800dd72:	4610      	mov	r0, r2
 800dd74:	f004 fa1c 	bl	80121b0 <LCD_Set_Posi>
 800dd78:	2300      	movs	r3, #0
 800dd7a:	82bb      	strh	r3, [r7, #20]
 800dd7c:	e027      	b.n	800ddce <DispStr+0x14e>
 800dd7e:	8a7b      	ldrh	r3, [r7, #18]
 800dd80:	f003 0301 	and.w	r3, r3, #1
 800dd84:	2b00      	cmp	r3, #0
 800dd86:	d00d      	beq.n	800dda4 <DispStr+0x124>
 800dd88:	7afb      	ldrb	r3, [r7, #11]
 800dd8a:	f003 0301 	and.w	r3, r3, #1
 800dd8e:	2b00      	cmp	r3, #0
 800dd90:	d002      	beq.n	800dd98 <DispStr+0x118>
 800dd92:	4b25      	ldr	r3, [pc, #148]	; (800de28 <DispStr+0x1a8>)
 800dd94:	881b      	ldrh	r3, [r3, #0]
 800dd96:	e001      	b.n	800dd9c <DispStr+0x11c>
 800dd98:	4b22      	ldr	r3, [pc, #136]	; (800de24 <DispStr+0x1a4>)
 800dd9a:	881b      	ldrh	r3, [r3, #0]
 800dd9c:	4618      	mov	r0, r3
 800dd9e:	f004 fa55 	bl	801224c <LCD_Set_Pixel>
 800dda2:	e00c      	b.n	800ddbe <DispStr+0x13e>
 800dda4:	7afb      	ldrb	r3, [r7, #11]
 800dda6:	f003 0301 	and.w	r3, r3, #1
 800ddaa:	2b00      	cmp	r3, #0
 800ddac:	d002      	beq.n	800ddb4 <DispStr+0x134>
 800ddae:	4b1d      	ldr	r3, [pc, #116]	; (800de24 <DispStr+0x1a4>)
 800ddb0:	881b      	ldrh	r3, [r3, #0]
 800ddb2:	e001      	b.n	800ddb8 <DispStr+0x138>
 800ddb4:	4b1c      	ldr	r3, [pc, #112]	; (800de28 <DispStr+0x1a8>)
 800ddb6:	881b      	ldrh	r3, [r3, #0]
 800ddb8:	4618      	mov	r0, r3
 800ddba:	f004 fa47 	bl	801224c <LCD_Set_Pixel>
 800ddbe:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800ddc2:	105b      	asrs	r3, r3, #1
 800ddc4:	827b      	strh	r3, [r7, #18]
 800ddc6:	8abb      	ldrh	r3, [r7, #20]
 800ddc8:	3301      	adds	r3, #1
 800ddca:	b29b      	uxth	r3, r3
 800ddcc:	82bb      	strh	r3, [r7, #20]
 800ddce:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800ddd2:	2b09      	cmp	r3, #9
 800ddd4:	ddd3      	ble.n	800dd7e <DispStr+0xfe>
 800ddd6:	4b0e      	ldr	r3, [pc, #56]	; (800de10 <DispStr+0x190>)
 800ddd8:	f9b3 3000 	ldrsh.w	r3, [r3]
 800dddc:	b29b      	uxth	r3, r3
 800ddde:	3301      	adds	r3, #1
 800dde0:	b29b      	uxth	r3, r3
 800dde2:	b21a      	sxth	r2, r3
 800dde4:	4b0a      	ldr	r3, [pc, #40]	; (800de10 <DispStr+0x190>)
 800dde6:	801a      	strh	r2, [r3, #0]
 800dde8:	8afb      	ldrh	r3, [r7, #22]
 800ddea:	3301      	adds	r3, #1
 800ddec:	b29b      	uxth	r3, r3
 800ddee:	82fb      	strh	r3, [r7, #22]
 800ddf0:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800ddf4:	2b05      	cmp	r3, #5
 800ddf6:	f77f af66 	ble.w	800dcc6 <DispStr+0x46>
 800ddfa:	687b      	ldr	r3, [r7, #4]
 800ddfc:	781b      	ldrb	r3, [r3, #0]
 800ddfe:	2b00      	cmp	r3, #0
 800de00:	f47f af59 	bne.w	800dcb6 <DispStr+0x36>
 800de04:	bf00      	nop
 800de06:	bf00      	nop
 800de08:	3718      	adds	r7, #24
 800de0a:	46bd      	mov	sp, r7
 800de0c:	bd80      	pop	{r7, pc}
 800de0e:	bf00      	nop
 800de10:	2000078a 	.word	0x2000078a
 800de14:	2000078c 	.word	0x2000078c
 800de18:	080016c4 	.word	0x080016c4
 800de1c:	08001490 	.word	0x08001490
 800de20:	ffffaaaa 	.word	0xffffaaaa
 800de24:	200015cc 	.word	0x200015cc
 800de28:	200015ce 	.word	0x200015ce

0800de2c <Draw_Circle_D>:
 800de2c:	b590      	push	{r4, r7, lr}
 800de2e:	b085      	sub	sp, #20
 800de30:	af00      	add	r7, sp, #0
 800de32:	4604      	mov	r4, r0
 800de34:	4608      	mov	r0, r1
 800de36:	4611      	mov	r1, r2
 800de38:	461a      	mov	r2, r3
 800de3a:	4623      	mov	r3, r4
 800de3c:	71fb      	strb	r3, [r7, #7]
 800de3e:	4603      	mov	r3, r0
 800de40:	80bb      	strh	r3, [r7, #4]
 800de42:	460b      	mov	r3, r1
 800de44:	807b      	strh	r3, [r7, #2]
 800de46:	4613      	mov	r3, r2
 800de48:	803b      	strh	r3, [r7, #0]
 800de4a:	8c3b      	ldrh	r3, [r7, #32]
 800de4c:	005b      	lsls	r3, r3, #1
 800de4e:	b29a      	uxth	r2, r3
 800de50:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800de52:	4413      	add	r3, r2
 800de54:	b29b      	uxth	r3, r3
 800de56:	3305      	adds	r3, #5
 800de58:	b29b      	uxth	r3, r3
 800de5a:	84bb      	strh	r3, [r7, #36]	; 0x24
 800de5c:	88ba      	ldrh	r2, [r7, #4]
 800de5e:	8c3b      	ldrh	r3, [r7, #32]
 800de60:	1ad3      	subs	r3, r2, r3
 800de62:	b29b      	uxth	r3, r3
 800de64:	80bb      	strh	r3, [r7, #4]
 800de66:	88bb      	ldrh	r3, [r7, #4]
 800de68:	817b      	strh	r3, [r7, #10]
 800de6a:	887b      	ldrh	r3, [r7, #2]
 800de6c:	3302      	adds	r3, #2
 800de6e:	b29b      	uxth	r3, r3
 800de70:	813b      	strh	r3, [r7, #8]
 800de72:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 800de76:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800de7a:	4611      	mov	r1, r2
 800de7c:	4618      	mov	r0, r3
 800de7e:	f004 f997 	bl	80121b0 <LCD_Set_Posi>
 800de82:	2300      	movs	r3, #0
 800de84:	81bb      	strh	r3, [r7, #12]
 800de86:	e012      	b.n	800deae <Draw_Circle_D+0x82>
 800de88:	79fb      	ldrb	r3, [r7, #7]
 800de8a:	f003 0301 	and.w	r3, r3, #1
 800de8e:	2b00      	cmp	r3, #0
 800de90:	d002      	beq.n	800de98 <Draw_Circle_D+0x6c>
 800de92:	4bad      	ldr	r3, [pc, #692]	; (800e148 <Draw_Circle_D+0x31c>)
 800de94:	881b      	ldrh	r3, [r3, #0]
 800de96:	e001      	b.n	800de9c <Draw_Circle_D+0x70>
 800de98:	4bac      	ldr	r3, [pc, #688]	; (800e14c <Draw_Circle_D+0x320>)
 800de9a:	881b      	ldrh	r3, [r3, #0]
 800de9c:	4618      	mov	r0, r3
 800de9e:	f004 f9d5 	bl	801224c <LCD_Set_Pixel>
 800dea2:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800dea6:	b29b      	uxth	r3, r3
 800dea8:	3301      	adds	r3, #1
 800deaa:	b29b      	uxth	r3, r3
 800deac:	81bb      	strh	r3, [r7, #12]
 800deae:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 800deb2:	f9b7 3000 	ldrsh.w	r3, [r7]
 800deb6:	3b04      	subs	r3, #4
 800deb8:	429a      	cmp	r2, r3
 800deba:	dbe5      	blt.n	800de88 <Draw_Circle_D+0x5c>
 800debc:	88ba      	ldrh	r2, [r7, #4]
 800debe:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800dec0:	4413      	add	r3, r2
 800dec2:	b29b      	uxth	r3, r3
 800dec4:	817b      	strh	r3, [r7, #10]
 800dec6:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 800deca:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800dece:	4611      	mov	r1, r2
 800ded0:	4618      	mov	r0, r3
 800ded2:	f004 f96d 	bl	80121b0 <LCD_Set_Posi>
 800ded6:	2300      	movs	r3, #0
 800ded8:	81bb      	strh	r3, [r7, #12]
 800deda:	e012      	b.n	800df02 <Draw_Circle_D+0xd6>
 800dedc:	79fb      	ldrb	r3, [r7, #7]
 800dede:	f003 0301 	and.w	r3, r3, #1
 800dee2:	2b00      	cmp	r3, #0
 800dee4:	d002      	beq.n	800deec <Draw_Circle_D+0xc0>
 800dee6:	4b98      	ldr	r3, [pc, #608]	; (800e148 <Draw_Circle_D+0x31c>)
 800dee8:	881b      	ldrh	r3, [r3, #0]
 800deea:	e001      	b.n	800def0 <Draw_Circle_D+0xc4>
 800deec:	4b97      	ldr	r3, [pc, #604]	; (800e14c <Draw_Circle_D+0x320>)
 800deee:	881b      	ldrh	r3, [r3, #0]
 800def0:	4618      	mov	r0, r3
 800def2:	f004 f9ab 	bl	801224c <LCD_Set_Pixel>
 800def6:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800defa:	b29b      	uxth	r3, r3
 800defc:	3301      	adds	r3, #1
 800defe:	b29b      	uxth	r3, r3
 800df00:	81bb      	strh	r3, [r7, #12]
 800df02:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 800df06:	f9b7 3000 	ldrsh.w	r3, [r7]
 800df0a:	3b04      	subs	r3, #4
 800df0c:	429a      	cmp	r2, r3
 800df0e:	dbe5      	blt.n	800dedc <Draw_Circle_D+0xb0>
 800df10:	88bb      	ldrh	r3, [r7, #4]
 800df12:	3301      	adds	r3, #1
 800df14:	b29b      	uxth	r3, r3
 800df16:	817b      	strh	r3, [r7, #10]
 800df18:	887b      	ldrh	r3, [r7, #2]
 800df1a:	3301      	adds	r3, #1
 800df1c:	b29b      	uxth	r3, r3
 800df1e:	813b      	strh	r3, [r7, #8]
 800df20:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 800df24:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800df28:	4611      	mov	r1, r2
 800df2a:	4618      	mov	r0, r3
 800df2c:	f004 f940 	bl	80121b0 <LCD_Set_Posi>
 800df30:	2300      	movs	r3, #0
 800df32:	81bb      	strh	r3, [r7, #12]
 800df34:	e012      	b.n	800df5c <Draw_Circle_D+0x130>
 800df36:	79fb      	ldrb	r3, [r7, #7]
 800df38:	f003 0301 	and.w	r3, r3, #1
 800df3c:	2b00      	cmp	r3, #0
 800df3e:	d002      	beq.n	800df46 <Draw_Circle_D+0x11a>
 800df40:	4b81      	ldr	r3, [pc, #516]	; (800e148 <Draw_Circle_D+0x31c>)
 800df42:	881b      	ldrh	r3, [r3, #0]
 800df44:	e001      	b.n	800df4a <Draw_Circle_D+0x11e>
 800df46:	4b81      	ldr	r3, [pc, #516]	; (800e14c <Draw_Circle_D+0x320>)
 800df48:	881b      	ldrh	r3, [r3, #0]
 800df4a:	4618      	mov	r0, r3
 800df4c:	f004 f97e 	bl	801224c <LCD_Set_Pixel>
 800df50:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800df54:	b29b      	uxth	r3, r3
 800df56:	3301      	adds	r3, #1
 800df58:	b29b      	uxth	r3, r3
 800df5a:	81bb      	strh	r3, [r7, #12]
 800df5c:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 800df60:	f9b7 3000 	ldrsh.w	r3, [r7]
 800df64:	3b02      	subs	r3, #2
 800df66:	429a      	cmp	r2, r3
 800df68:	dbe5      	blt.n	800df36 <Draw_Circle_D+0x10a>
 800df6a:	88ba      	ldrh	r2, [r7, #4]
 800df6c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800df6e:	4413      	add	r3, r2
 800df70:	b29b      	uxth	r3, r3
 800df72:	3b01      	subs	r3, #1
 800df74:	b29b      	uxth	r3, r3
 800df76:	817b      	strh	r3, [r7, #10]
 800df78:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 800df7c:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800df80:	4611      	mov	r1, r2
 800df82:	4618      	mov	r0, r3
 800df84:	f004 f914 	bl	80121b0 <LCD_Set_Posi>
 800df88:	2300      	movs	r3, #0
 800df8a:	81bb      	strh	r3, [r7, #12]
 800df8c:	e012      	b.n	800dfb4 <Draw_Circle_D+0x188>
 800df8e:	79fb      	ldrb	r3, [r7, #7]
 800df90:	f003 0301 	and.w	r3, r3, #1
 800df94:	2b00      	cmp	r3, #0
 800df96:	d002      	beq.n	800df9e <Draw_Circle_D+0x172>
 800df98:	4b6b      	ldr	r3, [pc, #428]	; (800e148 <Draw_Circle_D+0x31c>)
 800df9a:	881b      	ldrh	r3, [r3, #0]
 800df9c:	e001      	b.n	800dfa2 <Draw_Circle_D+0x176>
 800df9e:	4b6b      	ldr	r3, [pc, #428]	; (800e14c <Draw_Circle_D+0x320>)
 800dfa0:	881b      	ldrh	r3, [r3, #0]
 800dfa2:	4618      	mov	r0, r3
 800dfa4:	f004 f952 	bl	801224c <LCD_Set_Pixel>
 800dfa8:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800dfac:	b29b      	uxth	r3, r3
 800dfae:	3301      	adds	r3, #1
 800dfb0:	b29b      	uxth	r3, r3
 800dfb2:	81bb      	strh	r3, [r7, #12]
 800dfb4:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 800dfb8:	f9b7 3000 	ldrsh.w	r3, [r7]
 800dfbc:	3b02      	subs	r3, #2
 800dfbe:	429a      	cmp	r2, r3
 800dfc0:	dbe5      	blt.n	800df8e <Draw_Circle_D+0x162>
 800dfc2:	88bb      	ldrh	r3, [r7, #4]
 800dfc4:	3302      	adds	r3, #2
 800dfc6:	b29b      	uxth	r3, r3
 800dfc8:	817b      	strh	r3, [r7, #10]
 800dfca:	887b      	ldrh	r3, [r7, #2]
 800dfcc:	813b      	strh	r3, [r7, #8]
 800dfce:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 800dfd2:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800dfd6:	4611      	mov	r1, r2
 800dfd8:	4618      	mov	r0, r3
 800dfda:	f004 f8e9 	bl	80121b0 <LCD_Set_Posi>
 800dfde:	2300      	movs	r3, #0
 800dfe0:	81bb      	strh	r3, [r7, #12]
 800dfe2:	e012      	b.n	800e00a <Draw_Circle_D+0x1de>
 800dfe4:	79fb      	ldrb	r3, [r7, #7]
 800dfe6:	f003 0301 	and.w	r3, r3, #1
 800dfea:	2b00      	cmp	r3, #0
 800dfec:	d002      	beq.n	800dff4 <Draw_Circle_D+0x1c8>
 800dfee:	4b56      	ldr	r3, [pc, #344]	; (800e148 <Draw_Circle_D+0x31c>)
 800dff0:	881b      	ldrh	r3, [r3, #0]
 800dff2:	e001      	b.n	800dff8 <Draw_Circle_D+0x1cc>
 800dff4:	4b55      	ldr	r3, [pc, #340]	; (800e14c <Draw_Circle_D+0x320>)
 800dff6:	881b      	ldrh	r3, [r3, #0]
 800dff8:	4618      	mov	r0, r3
 800dffa:	f004 f927 	bl	801224c <LCD_Set_Pixel>
 800dffe:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800e002:	b29b      	uxth	r3, r3
 800e004:	3301      	adds	r3, #1
 800e006:	b29b      	uxth	r3, r3
 800e008:	81bb      	strh	r3, [r7, #12]
 800e00a:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 800e00e:	f9b7 3000 	ldrsh.w	r3, [r7]
 800e012:	429a      	cmp	r2, r3
 800e014:	dbe6      	blt.n	800dfe4 <Draw_Circle_D+0x1b8>
 800e016:	88ba      	ldrh	r2, [r7, #4]
 800e018:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e01a:	4413      	add	r3, r2
 800e01c:	b29b      	uxth	r3, r3
 800e01e:	3b02      	subs	r3, #2
 800e020:	b29b      	uxth	r3, r3
 800e022:	817b      	strh	r3, [r7, #10]
 800e024:	887b      	ldrh	r3, [r7, #2]
 800e026:	813b      	strh	r3, [r7, #8]
 800e028:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 800e02c:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800e030:	4611      	mov	r1, r2
 800e032:	4618      	mov	r0, r3
 800e034:	f004 f8bc 	bl	80121b0 <LCD_Set_Posi>
 800e038:	2300      	movs	r3, #0
 800e03a:	81bb      	strh	r3, [r7, #12]
 800e03c:	e012      	b.n	800e064 <Draw_Circle_D+0x238>
 800e03e:	79fb      	ldrb	r3, [r7, #7]
 800e040:	f003 0301 	and.w	r3, r3, #1
 800e044:	2b00      	cmp	r3, #0
 800e046:	d002      	beq.n	800e04e <Draw_Circle_D+0x222>
 800e048:	4b3f      	ldr	r3, [pc, #252]	; (800e148 <Draw_Circle_D+0x31c>)
 800e04a:	881b      	ldrh	r3, [r3, #0]
 800e04c:	e001      	b.n	800e052 <Draw_Circle_D+0x226>
 800e04e:	4b3f      	ldr	r3, [pc, #252]	; (800e14c <Draw_Circle_D+0x320>)
 800e050:	881b      	ldrh	r3, [r3, #0]
 800e052:	4618      	mov	r0, r3
 800e054:	f004 f8fa 	bl	801224c <LCD_Set_Pixel>
 800e058:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800e05c:	b29b      	uxth	r3, r3
 800e05e:	3301      	adds	r3, #1
 800e060:	b29b      	uxth	r3, r3
 800e062:	81bb      	strh	r3, [r7, #12]
 800e064:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 800e068:	f9b7 3000 	ldrsh.w	r3, [r7]
 800e06c:	429a      	cmp	r2, r3
 800e06e:	dbe6      	blt.n	800e03e <Draw_Circle_D+0x212>
 800e070:	887b      	ldrh	r3, [r7, #2]
 800e072:	813b      	strh	r3, [r7, #8]
 800e074:	2300      	movs	r3, #0
 800e076:	81fb      	strh	r3, [r7, #14]
 800e078:	e05a      	b.n	800e130 <Draw_Circle_D+0x304>
 800e07a:	88ba      	ldrh	r2, [r7, #4]
 800e07c:	89fb      	ldrh	r3, [r7, #14]
 800e07e:	4413      	add	r3, r2
 800e080:	b29b      	uxth	r3, r3
 800e082:	3303      	adds	r3, #3
 800e084:	b29b      	uxth	r3, r3
 800e086:	b21b      	sxth	r3, r3
 800e088:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 800e08c:	4611      	mov	r1, r2
 800e08e:	4618      	mov	r0, r3
 800e090:	f004 f88e 	bl	80121b0 <LCD_Set_Posi>
 800e094:	2300      	movs	r3, #0
 800e096:	81bb      	strh	r3, [r7, #12]
 800e098:	e012      	b.n	800e0c0 <Draw_Circle_D+0x294>
 800e09a:	79fb      	ldrb	r3, [r7, #7]
 800e09c:	f003 0301 	and.w	r3, r3, #1
 800e0a0:	2b00      	cmp	r3, #0
 800e0a2:	d002      	beq.n	800e0aa <Draw_Circle_D+0x27e>
 800e0a4:	4b28      	ldr	r3, [pc, #160]	; (800e148 <Draw_Circle_D+0x31c>)
 800e0a6:	881b      	ldrh	r3, [r3, #0]
 800e0a8:	e001      	b.n	800e0ae <Draw_Circle_D+0x282>
 800e0aa:	4b28      	ldr	r3, [pc, #160]	; (800e14c <Draw_Circle_D+0x320>)
 800e0ac:	881b      	ldrh	r3, [r3, #0]
 800e0ae:	4618      	mov	r0, r3
 800e0b0:	f004 f8cc 	bl	801224c <LCD_Set_Pixel>
 800e0b4:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800e0b8:	b29b      	uxth	r3, r3
 800e0ba:	3301      	adds	r3, #1
 800e0bc:	b29b      	uxth	r3, r3
 800e0be:	81bb      	strh	r3, [r7, #12]
 800e0c0:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 800e0c4:	f9b7 3000 	ldrsh.w	r3, [r7]
 800e0c8:	429a      	cmp	r2, r3
 800e0ca:	dbe6      	blt.n	800e09a <Draw_Circle_D+0x26e>
 800e0cc:	88ba      	ldrh	r2, [r7, #4]
 800e0ce:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e0d0:	4413      	add	r3, r2
 800e0d2:	b29a      	uxth	r2, r3
 800e0d4:	89fb      	ldrh	r3, [r7, #14]
 800e0d6:	1ad3      	subs	r3, r2, r3
 800e0d8:	b29b      	uxth	r3, r3
 800e0da:	3b03      	subs	r3, #3
 800e0dc:	b29b      	uxth	r3, r3
 800e0de:	b21b      	sxth	r3, r3
 800e0e0:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 800e0e4:	4611      	mov	r1, r2
 800e0e6:	4618      	mov	r0, r3
 800e0e8:	f004 f862 	bl	80121b0 <LCD_Set_Posi>
 800e0ec:	2300      	movs	r3, #0
 800e0ee:	81bb      	strh	r3, [r7, #12]
 800e0f0:	e012      	b.n	800e118 <Draw_Circle_D+0x2ec>
 800e0f2:	79fb      	ldrb	r3, [r7, #7]
 800e0f4:	f003 0301 	and.w	r3, r3, #1
 800e0f8:	2b00      	cmp	r3, #0
 800e0fa:	d002      	beq.n	800e102 <Draw_Circle_D+0x2d6>
 800e0fc:	4b12      	ldr	r3, [pc, #72]	; (800e148 <Draw_Circle_D+0x31c>)
 800e0fe:	881b      	ldrh	r3, [r3, #0]
 800e100:	e001      	b.n	800e106 <Draw_Circle_D+0x2da>
 800e102:	4b12      	ldr	r3, [pc, #72]	; (800e14c <Draw_Circle_D+0x320>)
 800e104:	881b      	ldrh	r3, [r3, #0]
 800e106:	4618      	mov	r0, r3
 800e108:	f004 f8a0 	bl	801224c <LCD_Set_Pixel>
 800e10c:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800e110:	b29b      	uxth	r3, r3
 800e112:	3301      	adds	r3, #1
 800e114:	b29b      	uxth	r3, r3
 800e116:	81bb      	strh	r3, [r7, #12]
 800e118:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 800e11c:	f9b7 3000 	ldrsh.w	r3, [r7]
 800e120:	429a      	cmp	r2, r3
 800e122:	dbe6      	blt.n	800e0f2 <Draw_Circle_D+0x2c6>
 800e124:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800e128:	b29b      	uxth	r3, r3
 800e12a:	3301      	adds	r3, #1
 800e12c:	b29b      	uxth	r3, r3
 800e12e:	81fb      	strh	r3, [r7, #14]
 800e130:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 800e134:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800e138:	429a      	cmp	r2, r3
 800e13a:	db9e      	blt.n	800e07a <Draw_Circle_D+0x24e>
 800e13c:	bf00      	nop
 800e13e:	bf00      	nop
 800e140:	3714      	adds	r7, #20
 800e142:	46bd      	mov	sp, r7
 800e144:	bd90      	pop	{r4, r7, pc}
 800e146:	bf00      	nop
 800e148:	200015cc 	.word	0x200015cc
 800e14c:	200015ce 	.word	0x200015ce

0800e150 <DispStr10x14>:
 800e150:	b580      	push	{r7, lr}
 800e152:	b084      	sub	sp, #16
 800e154:	af00      	add	r7, sp, #0
 800e156:	607b      	str	r3, [r7, #4]
 800e158:	4603      	mov	r3, r0
 800e15a:	81fb      	strh	r3, [r7, #14]
 800e15c:	460b      	mov	r3, r1
 800e15e:	81bb      	strh	r3, [r7, #12]
 800e160:	4613      	mov	r3, r2
 800e162:	72fb      	strb	r3, [r7, #11]
 800e164:	4a0c      	ldr	r2, [pc, #48]	; (800e198 <DispStr10x14+0x48>)
 800e166:	89fb      	ldrh	r3, [r7, #14]
 800e168:	8013      	strh	r3, [r2, #0]
 800e16a:	4a0c      	ldr	r2, [pc, #48]	; (800e19c <DispStr10x14+0x4c>)
 800e16c:	89bb      	ldrh	r3, [r7, #12]
 800e16e:	8013      	strh	r3, [r2, #0]
 800e170:	e008      	b.n	800e184 <DispStr10x14+0x34>
 800e172:	687b      	ldr	r3, [r7, #4]
 800e174:	1c5a      	adds	r2, r3, #1
 800e176:	607a      	str	r2, [r7, #4]
 800e178:	781a      	ldrb	r2, [r3, #0]
 800e17a:	7afb      	ldrb	r3, [r7, #11]
 800e17c:	4611      	mov	r1, r2
 800e17e:	4618      	mov	r0, r3
 800e180:	f000 f80e 	bl	800e1a0 <DispChar10x14>
 800e184:	687b      	ldr	r3, [r7, #4]
 800e186:	781b      	ldrb	r3, [r3, #0]
 800e188:	2b00      	cmp	r3, #0
 800e18a:	d1f2      	bne.n	800e172 <DispStr10x14+0x22>
 800e18c:	bf00      	nop
 800e18e:	bf00      	nop
 800e190:	3710      	adds	r7, #16
 800e192:	46bd      	mov	sp, r7
 800e194:	bd80      	pop	{r7, pc}
 800e196:	bf00      	nop
 800e198:	2000078a 	.word	0x2000078a
 800e19c:	2000078c 	.word	0x2000078c

0800e1a0 <DispChar10x14>:
 800e1a0:	b580      	push	{r7, lr}
 800e1a2:	b084      	sub	sp, #16
 800e1a4:	af00      	add	r7, sp, #0
 800e1a6:	4603      	mov	r3, r0
 800e1a8:	460a      	mov	r2, r1
 800e1aa:	71fb      	strb	r3, [r7, #7]
 800e1ac:	4613      	mov	r3, r2
 800e1ae:	71bb      	strb	r3, [r7, #6]
 800e1b0:	2300      	movs	r3, #0
 800e1b2:	81fb      	strh	r3, [r7, #14]
 800e1b4:	e0fe      	b.n	800e3b4 <DispChar10x14+0x214>
 800e1b6:	79fb      	ldrb	r3, [r7, #7]
 800e1b8:	f003 0310 	and.w	r3, r3, #16
 800e1bc:	2b00      	cmp	r3, #0
 800e1be:	d00f      	beq.n	800e1e0 <DispChar10x14+0x40>
 800e1c0:	79bb      	ldrb	r3, [r7, #6]
 800e1c2:	f1a3 0240 	sub.w	r2, r3, #64	; 0x40
 800e1c6:	4613      	mov	r3, r2
 800e1c8:	009b      	lsls	r3, r3, #2
 800e1ca:	4413      	add	r3, r2
 800e1cc:	005b      	lsls	r3, r3, #1
 800e1ce:	461a      	mov	r2, r3
 800e1d0:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800e1d4:	4413      	add	r3, r2
 800e1d6:	4a7c      	ldr	r2, [pc, #496]	; (800e3c8 <DispChar10x14+0x228>)
 800e1d8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800e1dc:	817b      	strh	r3, [r7, #10]
 800e1de:	e00e      	b.n	800e1fe <DispChar10x14+0x5e>
 800e1e0:	79bb      	ldrb	r3, [r7, #6]
 800e1e2:	f1a3 0221 	sub.w	r2, r3, #33	; 0x21
 800e1e6:	4613      	mov	r3, r2
 800e1e8:	009b      	lsls	r3, r3, #2
 800e1ea:	4413      	add	r3, r2
 800e1ec:	005b      	lsls	r3, r3, #1
 800e1ee:	461a      	mov	r2, r3
 800e1f0:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800e1f4:	4413      	add	r3, r2
 800e1f6:	4a75      	ldr	r2, [pc, #468]	; (800e3cc <DispChar10x14+0x22c>)
 800e1f8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800e1fc:	817b      	strh	r3, [r7, #10]
 800e1fe:	79fb      	ldrb	r3, [r7, #7]
 800e200:	f003 0320 	and.w	r3, r3, #32
 800e204:	2b00      	cmp	r3, #0
 800e206:	d00c      	beq.n	800e222 <DispChar10x14+0x82>
 800e208:	89fb      	ldrh	r3, [r7, #14]
 800e20a:	f003 0301 	and.w	r3, r3, #1
 800e20e:	b29b      	uxth	r3, r3
 800e210:	2b00      	cmp	r3, #0
 800e212:	d001      	beq.n	800e218 <DispChar10x14+0x78>
 800e214:	4a6e      	ldr	r2, [pc, #440]	; (800e3d0 <DispChar10x14+0x230>)
 800e216:	e001      	b.n	800e21c <DispChar10x14+0x7c>
 800e218:	f245 5255 	movw	r2, #21845	; 0x5555
 800e21c:	897b      	ldrh	r3, [r7, #10]
 800e21e:	4013      	ands	r3, r2
 800e220:	817b      	strh	r3, [r7, #10]
 800e222:	4b6c      	ldr	r3, [pc, #432]	; (800e3d4 <DispChar10x14+0x234>)
 800e224:	f9b3 3000 	ldrsh.w	r3, [r3]
 800e228:	4a6b      	ldr	r2, [pc, #428]	; (800e3d8 <DispChar10x14+0x238>)
 800e22a:	f9b2 2000 	ldrsh.w	r2, [r2]
 800e22e:	4611      	mov	r1, r2
 800e230:	4618      	mov	r0, r3
 800e232:	f003 ffbd 	bl	80121b0 <LCD_Set_Posi>
 800e236:	79fb      	ldrb	r3, [r7, #7]
 800e238:	f003 0310 	and.w	r3, r3, #16
 800e23c:	2b00      	cmp	r3, #0
 800e23e:	d038      	beq.n	800e2b2 <DispChar10x14+0x112>
 800e240:	79bb      	ldrb	r3, [r7, #6]
 800e242:	2b43      	cmp	r3, #67	; 0x43
 800e244:	d005      	beq.n	800e252 <DispChar10x14+0xb2>
 800e246:	79bb      	ldrb	r3, [r7, #6]
 800e248:	2b44      	cmp	r3, #68	; 0x44
 800e24a:	d002      	beq.n	800e252 <DispChar10x14+0xb2>
 800e24c:	79bb      	ldrb	r3, [r7, #6]
 800e24e:	2b45      	cmp	r3, #69	; 0x45
 800e250:	d12f      	bne.n	800e2b2 <DispChar10x14+0x112>
 800e252:	2300      	movs	r3, #0
 800e254:	81bb      	strh	r3, [r7, #12]
 800e256:	e027      	b.n	800e2a8 <DispChar10x14+0x108>
 800e258:	897b      	ldrh	r3, [r7, #10]
 800e25a:	f003 0304 	and.w	r3, r3, #4
 800e25e:	2b00      	cmp	r3, #0
 800e260:	d00d      	beq.n	800e27e <DispChar10x14+0xde>
 800e262:	79fb      	ldrb	r3, [r7, #7]
 800e264:	f003 0301 	and.w	r3, r3, #1
 800e268:	2b00      	cmp	r3, #0
 800e26a:	d002      	beq.n	800e272 <DispChar10x14+0xd2>
 800e26c:	4b5b      	ldr	r3, [pc, #364]	; (800e3dc <DispChar10x14+0x23c>)
 800e26e:	881b      	ldrh	r3, [r3, #0]
 800e270:	e001      	b.n	800e276 <DispChar10x14+0xd6>
 800e272:	4b5b      	ldr	r3, [pc, #364]	; (800e3e0 <DispChar10x14+0x240>)
 800e274:	881b      	ldrh	r3, [r3, #0]
 800e276:	4618      	mov	r0, r3
 800e278:	f003 ffe8 	bl	801224c <LCD_Set_Pixel>
 800e27c:	e00c      	b.n	800e298 <DispChar10x14+0xf8>
 800e27e:	79fb      	ldrb	r3, [r7, #7]
 800e280:	f003 0301 	and.w	r3, r3, #1
 800e284:	2b00      	cmp	r3, #0
 800e286:	d002      	beq.n	800e28e <DispChar10x14+0xee>
 800e288:	4b55      	ldr	r3, [pc, #340]	; (800e3e0 <DispChar10x14+0x240>)
 800e28a:	881b      	ldrh	r3, [r3, #0]
 800e28c:	e001      	b.n	800e292 <DispChar10x14+0xf2>
 800e28e:	4b53      	ldr	r3, [pc, #332]	; (800e3dc <DispChar10x14+0x23c>)
 800e290:	881b      	ldrh	r3, [r3, #0]
 800e292:	4618      	mov	r0, r3
 800e294:	f003 ffda 	bl	801224c <LCD_Set_Pixel>
 800e298:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800e29c:	105b      	asrs	r3, r3, #1
 800e29e:	817b      	strh	r3, [r7, #10]
 800e2a0:	89bb      	ldrh	r3, [r7, #12]
 800e2a2:	3301      	adds	r3, #1
 800e2a4:	b29b      	uxth	r3, r3
 800e2a6:	81bb      	strh	r3, [r7, #12]
 800e2a8:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800e2ac:	2b0a      	cmp	r3, #10
 800e2ae:	ddd3      	ble.n	800e258 <DispChar10x14+0xb8>
 800e2b0:	e073      	b.n	800e39a <DispChar10x14+0x1fa>
 800e2b2:	79fb      	ldrb	r3, [r7, #7]
 800e2b4:	f003 0310 	and.w	r3, r3, #16
 800e2b8:	2b00      	cmp	r3, #0
 800e2ba:	d03f      	beq.n	800e33c <DispChar10x14+0x19c>
 800e2bc:	79bb      	ldrb	r3, [r7, #6]
 800e2be:	2b4c      	cmp	r3, #76	; 0x4c
 800e2c0:	d002      	beq.n	800e2c8 <DispChar10x14+0x128>
 800e2c2:	79bb      	ldrb	r3, [r7, #6]
 800e2c4:	2b48      	cmp	r3, #72	; 0x48
 800e2c6:	d139      	bne.n	800e33c <DispChar10x14+0x19c>
 800e2c8:	4b42      	ldr	r3, [pc, #264]	; (800e3d4 <DispChar10x14+0x234>)
 800e2ca:	f9b3 3000 	ldrsh.w	r3, [r3]
 800e2ce:	4a42      	ldr	r2, [pc, #264]	; (800e3d8 <DispChar10x14+0x238>)
 800e2d0:	f9b2 2000 	ldrsh.w	r2, [r2]
 800e2d4:	4611      	mov	r1, r2
 800e2d6:	4618      	mov	r0, r3
 800e2d8:	f003 ff6a 	bl	80121b0 <LCD_Set_Posi>
 800e2dc:	2300      	movs	r3, #0
 800e2de:	81bb      	strh	r3, [r7, #12]
 800e2e0:	e027      	b.n	800e332 <DispChar10x14+0x192>
 800e2e2:	897b      	ldrh	r3, [r7, #10]
 800e2e4:	f003 0304 	and.w	r3, r3, #4
 800e2e8:	2b00      	cmp	r3, #0
 800e2ea:	d00d      	beq.n	800e308 <DispChar10x14+0x168>
 800e2ec:	79fb      	ldrb	r3, [r7, #7]
 800e2ee:	f003 0301 	and.w	r3, r3, #1
 800e2f2:	2b00      	cmp	r3, #0
 800e2f4:	d002      	beq.n	800e2fc <DispChar10x14+0x15c>
 800e2f6:	4b39      	ldr	r3, [pc, #228]	; (800e3dc <DispChar10x14+0x23c>)
 800e2f8:	881b      	ldrh	r3, [r3, #0]
 800e2fa:	e001      	b.n	800e300 <DispChar10x14+0x160>
 800e2fc:	4b38      	ldr	r3, [pc, #224]	; (800e3e0 <DispChar10x14+0x240>)
 800e2fe:	881b      	ldrh	r3, [r3, #0]
 800e300:	4618      	mov	r0, r3
 800e302:	f003 ffa3 	bl	801224c <LCD_Set_Pixel>
 800e306:	e00c      	b.n	800e322 <DispChar10x14+0x182>
 800e308:	79fb      	ldrb	r3, [r7, #7]
 800e30a:	f003 0301 	and.w	r3, r3, #1
 800e30e:	2b00      	cmp	r3, #0
 800e310:	d002      	beq.n	800e318 <DispChar10x14+0x178>
 800e312:	4b33      	ldr	r3, [pc, #204]	; (800e3e0 <DispChar10x14+0x240>)
 800e314:	881b      	ldrh	r3, [r3, #0]
 800e316:	e001      	b.n	800e31c <DispChar10x14+0x17c>
 800e318:	4b30      	ldr	r3, [pc, #192]	; (800e3dc <DispChar10x14+0x23c>)
 800e31a:	881b      	ldrh	r3, [r3, #0]
 800e31c:	4618      	mov	r0, r3
 800e31e:	f003 ff95 	bl	801224c <LCD_Set_Pixel>
 800e322:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800e326:	105b      	asrs	r3, r3, #1
 800e328:	817b      	strh	r3, [r7, #10]
 800e32a:	89bb      	ldrh	r3, [r7, #12]
 800e32c:	3301      	adds	r3, #1
 800e32e:	b29b      	uxth	r3, r3
 800e330:	81bb      	strh	r3, [r7, #12]
 800e332:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800e336:	2b0a      	cmp	r3, #10
 800e338:	ddd3      	ble.n	800e2e2 <DispChar10x14+0x142>
 800e33a:	e02e      	b.n	800e39a <DispChar10x14+0x1fa>
 800e33c:	2300      	movs	r3, #0
 800e33e:	81bb      	strh	r3, [r7, #12]
 800e340:	e027      	b.n	800e392 <DispChar10x14+0x1f2>
 800e342:	897b      	ldrh	r3, [r7, #10]
 800e344:	f003 0304 	and.w	r3, r3, #4
 800e348:	2b00      	cmp	r3, #0
 800e34a:	d00d      	beq.n	800e368 <DispChar10x14+0x1c8>
 800e34c:	79fb      	ldrb	r3, [r7, #7]
 800e34e:	f003 0301 	and.w	r3, r3, #1
 800e352:	2b00      	cmp	r3, #0
 800e354:	d002      	beq.n	800e35c <DispChar10x14+0x1bc>
 800e356:	4b21      	ldr	r3, [pc, #132]	; (800e3dc <DispChar10x14+0x23c>)
 800e358:	881b      	ldrh	r3, [r3, #0]
 800e35a:	e001      	b.n	800e360 <DispChar10x14+0x1c0>
 800e35c:	4b20      	ldr	r3, [pc, #128]	; (800e3e0 <DispChar10x14+0x240>)
 800e35e:	881b      	ldrh	r3, [r3, #0]
 800e360:	4618      	mov	r0, r3
 800e362:	f003 ff73 	bl	801224c <LCD_Set_Pixel>
 800e366:	e00c      	b.n	800e382 <DispChar10x14+0x1e2>
 800e368:	79fb      	ldrb	r3, [r7, #7]
 800e36a:	f003 0301 	and.w	r3, r3, #1
 800e36e:	2b00      	cmp	r3, #0
 800e370:	d002      	beq.n	800e378 <DispChar10x14+0x1d8>
 800e372:	4b1b      	ldr	r3, [pc, #108]	; (800e3e0 <DispChar10x14+0x240>)
 800e374:	881b      	ldrh	r3, [r3, #0]
 800e376:	e001      	b.n	800e37c <DispChar10x14+0x1dc>
 800e378:	4b18      	ldr	r3, [pc, #96]	; (800e3dc <DispChar10x14+0x23c>)
 800e37a:	881b      	ldrh	r3, [r3, #0]
 800e37c:	4618      	mov	r0, r3
 800e37e:	f003 ff65 	bl	801224c <LCD_Set_Pixel>
 800e382:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800e386:	105b      	asrs	r3, r3, #1
 800e388:	817b      	strh	r3, [r7, #10]
 800e38a:	89bb      	ldrh	r3, [r7, #12]
 800e38c:	3301      	adds	r3, #1
 800e38e:	b29b      	uxth	r3, r3
 800e390:	81bb      	strh	r3, [r7, #12]
 800e392:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800e396:	2b0d      	cmp	r3, #13
 800e398:	ddd3      	ble.n	800e342 <DispChar10x14+0x1a2>
 800e39a:	4b0e      	ldr	r3, [pc, #56]	; (800e3d4 <DispChar10x14+0x234>)
 800e39c:	f9b3 3000 	ldrsh.w	r3, [r3]
 800e3a0:	b29b      	uxth	r3, r3
 800e3a2:	3301      	adds	r3, #1
 800e3a4:	b29b      	uxth	r3, r3
 800e3a6:	b21a      	sxth	r2, r3
 800e3a8:	4b0a      	ldr	r3, [pc, #40]	; (800e3d4 <DispChar10x14+0x234>)
 800e3aa:	801a      	strh	r2, [r3, #0]
 800e3ac:	89fb      	ldrh	r3, [r7, #14]
 800e3ae:	3301      	adds	r3, #1
 800e3b0:	b29b      	uxth	r3, r3
 800e3b2:	81fb      	strh	r3, [r7, #14]
 800e3b4:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800e3b8:	2b09      	cmp	r3, #9
 800e3ba:	f77f aefc 	ble.w	800e1b6 <DispChar10x14+0x16>
 800e3be:	bf00      	nop
 800e3c0:	bf00      	nop
 800e3c2:	3710      	adds	r7, #16
 800e3c4:	46bd      	mov	sp, r7
 800e3c6:	bd80      	pop	{r7, pc}
 800e3c8:	080018f8 	.word	0x080018f8
 800e3cc:	08001998 	.word	0x08001998
 800e3d0:	ffffaaaa 	.word	0xffffaaaa
 800e3d4:	2000078a 	.word	0x2000078a
 800e3d8:	2000078c 	.word	0x2000078c
 800e3dc:	200015ce 	.word	0x200015ce
 800e3e0:	200015cc 	.word	0x200015cc

0800e3e4 <NotePixel>:
 800e3e4:	b480      	push	{r7}
 800e3e6:	b085      	sub	sp, #20
 800e3e8:	af00      	add	r7, sp, #0
 800e3ea:	4603      	mov	r3, r0
 800e3ec:	71fb      	strb	r3, [r7, #7]
 800e3ee:	4b42      	ldr	r3, [pc, #264]	; (800e4f8 <NotePixel+0x114>)
 800e3f0:	60fb      	str	r3, [r7, #12]
 800e3f2:	4b42      	ldr	r3, [pc, #264]	; (800e4fc <NotePixel+0x118>)
 800e3f4:	f9b3 3000 	ldrsh.w	r3, [r3]
 800e3f8:	4a41      	ldr	r2, [pc, #260]	; (800e500 <NotePixel+0x11c>)
 800e3fa:	f9b2 2046 	ldrsh.w	r2, [r2, #70]	; 0x46
 800e3fe:	fb93 f1f2 	sdiv	r1, r3, r2
 800e402:	fb02 f201 	mul.w	r2, r2, r1
 800e406:	1a9b      	subs	r3, r3, r2
 800e408:	b21a      	sxth	r2, r3
 800e40a:	4b3c      	ldr	r3, [pc, #240]	; (800e4fc <NotePixel+0x118>)
 800e40c:	801a      	strh	r2, [r3, #0]
 800e40e:	4b3d      	ldr	r3, [pc, #244]	; (800e504 <NotePixel+0x120>)
 800e410:	f9b3 3000 	ldrsh.w	r3, [r3]
 800e414:	4a3a      	ldr	r2, [pc, #232]	; (800e500 <NotePixel+0x11c>)
 800e416:	f9b2 204a 	ldrsh.w	r2, [r2, #74]	; 0x4a
 800e41a:	fb93 f1f2 	sdiv	r1, r3, r2
 800e41e:	fb02 f201 	mul.w	r2, r2, r1
 800e422:	1a9b      	subs	r3, r3, r2
 800e424:	b21a      	sxth	r2, r3
 800e426:	4b37      	ldr	r3, [pc, #220]	; (800e504 <NotePixel+0x120>)
 800e428:	801a      	strh	r2, [r3, #0]
 800e42a:	4b35      	ldr	r3, [pc, #212]	; (800e500 <NotePixel+0x11c>)
 800e42c:	f9b3 304a 	ldrsh.w	r3, [r3, #74]	; 0x4a
 800e430:	2b00      	cmp	r3, #0
 800e432:	da00      	bge.n	800e436 <NotePixel+0x52>
 800e434:	331f      	adds	r3, #31
 800e436:	115b      	asrs	r3, r3, #5
 800e438:	b21b      	sxth	r3, r3
 800e43a:	b29a      	uxth	r2, r3
 800e43c:	4b2f      	ldr	r3, [pc, #188]	; (800e4fc <NotePixel+0x118>)
 800e43e:	f9b3 3000 	ldrsh.w	r3, [r3]
 800e442:	b29b      	uxth	r3, r3
 800e444:	fb12 f303 	smulbb	r3, r2, r3
 800e448:	b29a      	uxth	r2, r3
 800e44a:	4b2e      	ldr	r3, [pc, #184]	; (800e504 <NotePixel+0x120>)
 800e44c:	f9b3 3000 	ldrsh.w	r3, [r3]
 800e450:	2b00      	cmp	r3, #0
 800e452:	da00      	bge.n	800e456 <NotePixel+0x72>
 800e454:	330f      	adds	r3, #15
 800e456:	111b      	asrs	r3, r3, #4
 800e458:	b21b      	sxth	r3, r3
 800e45a:	b29b      	uxth	r3, r3
 800e45c:	4413      	add	r3, r2
 800e45e:	b29b      	uxth	r3, r3
 800e460:	817b      	strh	r3, [r7, #10]
 800e462:	4b28      	ldr	r3, [pc, #160]	; (800e504 <NotePixel+0x120>)
 800e464:	f9b3 3000 	ldrsh.w	r3, [r3]
 800e468:	425a      	negs	r2, r3
 800e46a:	f003 030f 	and.w	r3, r3, #15
 800e46e:	f002 020f 	and.w	r2, r2, #15
 800e472:	bf58      	it	pl
 800e474:	4253      	negpl	r3, r2
 800e476:	813b      	strh	r3, [r7, #8]
 800e478:	79fb      	ldrb	r3, [r7, #7]
 800e47a:	2b00      	cmp	r3, #0
 800e47c:	d015      	beq.n	800e4aa <NotePixel+0xc6>
 800e47e:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800e482:	005b      	lsls	r3, r3, #1
 800e484:	68fa      	ldr	r2, [r7, #12]
 800e486:	4413      	add	r3, r2
 800e488:	f9b3 1000 	ldrsh.w	r1, [r3]
 800e48c:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 800e490:	2201      	movs	r2, #1
 800e492:	fa02 f303 	lsl.w	r3, r2, r3
 800e496:	b21a      	sxth	r2, r3
 800e498:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800e49c:	005b      	lsls	r3, r3, #1
 800e49e:	68f8      	ldr	r0, [r7, #12]
 800e4a0:	4403      	add	r3, r0
 800e4a2:	430a      	orrs	r2, r1
 800e4a4:	b212      	sxth	r2, r2
 800e4a6:	801a      	strh	r2, [r3, #0]
 800e4a8:	e016      	b.n	800e4d8 <NotePixel+0xf4>
 800e4aa:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800e4ae:	005b      	lsls	r3, r3, #1
 800e4b0:	68fa      	ldr	r2, [r7, #12]
 800e4b2:	4413      	add	r3, r2
 800e4b4:	f9b3 1000 	ldrsh.w	r1, [r3]
 800e4b8:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 800e4bc:	2201      	movs	r2, #1
 800e4be:	fa02 f303 	lsl.w	r3, r2, r3
 800e4c2:	b21b      	sxth	r3, r3
 800e4c4:	43db      	mvns	r3, r3
 800e4c6:	b21a      	sxth	r2, r3
 800e4c8:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800e4cc:	005b      	lsls	r3, r3, #1
 800e4ce:	68f8      	ldr	r0, [r7, #12]
 800e4d0:	4403      	add	r3, r0
 800e4d2:	400a      	ands	r2, r1
 800e4d4:	b212      	sxth	r2, r2
 800e4d6:	801a      	strh	r2, [r3, #0]
 800e4d8:	4b0a      	ldr	r3, [pc, #40]	; (800e504 <NotePixel+0x120>)
 800e4da:	f9b3 3000 	ldrsh.w	r3, [r3]
 800e4de:	b29b      	uxth	r3, r3
 800e4e0:	3301      	adds	r3, #1
 800e4e2:	b29b      	uxth	r3, r3
 800e4e4:	b21a      	sxth	r2, r3
 800e4e6:	4b07      	ldr	r3, [pc, #28]	; (800e504 <NotePixel+0x120>)
 800e4e8:	801a      	strh	r2, [r3, #0]
 800e4ea:	bf00      	nop
 800e4ec:	3714      	adds	r7, #20
 800e4ee:	46bd      	mov	sp, r7
 800e4f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4f4:	4770      	bx	lr
 800e4f6:	bf00      	nop
 800e4f8:	20000f8c 	.word	0x20000f8c
 800e4fc:	20000002 	.word	0x20000002
 800e500:	20000140 	.word	0x20000140
 800e504:	20000004 	.word	0x20000004

0800e508 <Buil_Pop>:
 800e508:	b580      	push	{r7, lr}
 800e50a:	b082      	sub	sp, #8
 800e50c:	af00      	add	r7, sp, #0
 800e50e:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800e512:	2100      	movs	r1, #0
 800e514:	487f      	ldr	r0, [pc, #508]	; (800e714 <Buil_Pop+0x20c>)
 800e516:	f014 fb3d 	bl	8022b94 <memset>
 800e51a:	4b7f      	ldr	r3, [pc, #508]	; (800e718 <Buil_Pop+0x210>)
 800e51c:	2200      	movs	r2, #0
 800e51e:	801a      	strh	r2, [r3, #0]
 800e520:	4b7e      	ldr	r3, [pc, #504]	; (800e71c <Buil_Pop+0x214>)
 800e522:	2203      	movs	r2, #3
 800e524:	801a      	strh	r2, [r3, #0]
 800e526:	2300      	movs	r3, #0
 800e528:	80fb      	strh	r3, [r7, #6]
 800e52a:	e008      	b.n	800e53e <Buil_Pop+0x36>
 800e52c:	2001      	movs	r0, #1
 800e52e:	f7ff ff59 	bl	800e3e4 <NotePixel>
 800e532:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800e536:	b29b      	uxth	r3, r3
 800e538:	3301      	adds	r3, #1
 800e53a:	b29b      	uxth	r3, r3
 800e53c:	80fb      	strh	r3, [r7, #6]
 800e53e:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800e542:	4b77      	ldr	r3, [pc, #476]	; (800e720 <Buil_Pop+0x218>)
 800e544:	f9b3 304a 	ldrsh.w	r3, [r3, #74]	; 0x4a
 800e548:	0fd9      	lsrs	r1, r3, #31
 800e54a:	440b      	add	r3, r1
 800e54c:	105b      	asrs	r3, r3, #1
 800e54e:	b21b      	sxth	r3, r3
 800e550:	3b06      	subs	r3, #6
 800e552:	429a      	cmp	r2, r3
 800e554:	dbea      	blt.n	800e52c <Buil_Pop+0x24>
 800e556:	4b70      	ldr	r3, [pc, #448]	; (800e718 <Buil_Pop+0x210>)
 800e558:	2201      	movs	r2, #1
 800e55a:	801a      	strh	r2, [r3, #0]
 800e55c:	4b6f      	ldr	r3, [pc, #444]	; (800e71c <Buil_Pop+0x214>)
 800e55e:	2202      	movs	r2, #2
 800e560:	801a      	strh	r2, [r3, #0]
 800e562:	2001      	movs	r0, #1
 800e564:	f7ff ff3e 	bl	800e3e4 <NotePixel>
 800e568:	4b6b      	ldr	r3, [pc, #428]	; (800e718 <Buil_Pop+0x210>)
 800e56a:	2201      	movs	r2, #1
 800e56c:	801a      	strh	r2, [r3, #0]
 800e56e:	4b6c      	ldr	r3, [pc, #432]	; (800e720 <Buil_Pop+0x218>)
 800e570:	f9b3 304a 	ldrsh.w	r3, [r3, #74]	; 0x4a
 800e574:	0fda      	lsrs	r2, r3, #31
 800e576:	4413      	add	r3, r2
 800e578:	105b      	asrs	r3, r3, #1
 800e57a:	b21b      	sxth	r3, r3
 800e57c:	b29b      	uxth	r3, r3
 800e57e:	3b03      	subs	r3, #3
 800e580:	b29b      	uxth	r3, r3
 800e582:	b21a      	sxth	r2, r3
 800e584:	4b65      	ldr	r3, [pc, #404]	; (800e71c <Buil_Pop+0x214>)
 800e586:	801a      	strh	r2, [r3, #0]
 800e588:	2001      	movs	r0, #1
 800e58a:	f7ff ff2b 	bl	800e3e4 <NotePixel>
 800e58e:	4b62      	ldr	r3, [pc, #392]	; (800e718 <Buil_Pop+0x210>)
 800e590:	2202      	movs	r2, #2
 800e592:	801a      	strh	r2, [r3, #0]
 800e594:	4b61      	ldr	r3, [pc, #388]	; (800e71c <Buil_Pop+0x214>)
 800e596:	2201      	movs	r2, #1
 800e598:	801a      	strh	r2, [r3, #0]
 800e59a:	2001      	movs	r0, #1
 800e59c:	f7ff ff22 	bl	800e3e4 <NotePixel>
 800e5a0:	4b5d      	ldr	r3, [pc, #372]	; (800e718 <Buil_Pop+0x210>)
 800e5a2:	2202      	movs	r2, #2
 800e5a4:	801a      	strh	r2, [r3, #0]
 800e5a6:	4b5e      	ldr	r3, [pc, #376]	; (800e720 <Buil_Pop+0x218>)
 800e5a8:	f9b3 304a 	ldrsh.w	r3, [r3, #74]	; 0x4a
 800e5ac:	0fda      	lsrs	r2, r3, #31
 800e5ae:	4413      	add	r3, r2
 800e5b0:	105b      	asrs	r3, r3, #1
 800e5b2:	b21b      	sxth	r3, r3
 800e5b4:	b29b      	uxth	r3, r3
 800e5b6:	3b02      	subs	r3, #2
 800e5b8:	b29b      	uxth	r3, r3
 800e5ba:	b21a      	sxth	r2, r3
 800e5bc:	4b57      	ldr	r3, [pc, #348]	; (800e71c <Buil_Pop+0x214>)
 800e5be:	801a      	strh	r2, [r3, #0]
 800e5c0:	2001      	movs	r0, #1
 800e5c2:	f7ff ff0f 	bl	800e3e4 <NotePixel>
 800e5c6:	4b54      	ldr	r3, [pc, #336]	; (800e718 <Buil_Pop+0x210>)
 800e5c8:	2203      	movs	r2, #3
 800e5ca:	801a      	strh	r2, [r3, #0]
 800e5cc:	e01e      	b.n	800e60c <Buil_Pop+0x104>
 800e5ce:	4b53      	ldr	r3, [pc, #332]	; (800e71c <Buil_Pop+0x214>)
 800e5d0:	2200      	movs	r2, #0
 800e5d2:	801a      	strh	r2, [r3, #0]
 800e5d4:	2001      	movs	r0, #1
 800e5d6:	f7ff ff05 	bl	800e3e4 <NotePixel>
 800e5da:	4b51      	ldr	r3, [pc, #324]	; (800e720 <Buil_Pop+0x218>)
 800e5dc:	f9b3 304a 	ldrsh.w	r3, [r3, #74]	; 0x4a
 800e5e0:	0fda      	lsrs	r2, r3, #31
 800e5e2:	4413      	add	r3, r2
 800e5e4:	105b      	asrs	r3, r3, #1
 800e5e6:	b21b      	sxth	r3, r3
 800e5e8:	b29b      	uxth	r3, r3
 800e5ea:	3b01      	subs	r3, #1
 800e5ec:	b29b      	uxth	r3, r3
 800e5ee:	b21a      	sxth	r2, r3
 800e5f0:	4b4a      	ldr	r3, [pc, #296]	; (800e71c <Buil_Pop+0x214>)
 800e5f2:	801a      	strh	r2, [r3, #0]
 800e5f4:	2001      	movs	r0, #1
 800e5f6:	f7ff fef5 	bl	800e3e4 <NotePixel>
 800e5fa:	4b47      	ldr	r3, [pc, #284]	; (800e718 <Buil_Pop+0x210>)
 800e5fc:	f9b3 3000 	ldrsh.w	r3, [r3]
 800e600:	b29b      	uxth	r3, r3
 800e602:	3301      	adds	r3, #1
 800e604:	b29b      	uxth	r3, r3
 800e606:	b21a      	sxth	r2, r3
 800e608:	4b43      	ldr	r3, [pc, #268]	; (800e718 <Buil_Pop+0x210>)
 800e60a:	801a      	strh	r2, [r3, #0]
 800e60c:	4b42      	ldr	r3, [pc, #264]	; (800e718 <Buil_Pop+0x210>)
 800e60e:	f9b3 3000 	ldrsh.w	r3, [r3]
 800e612:	461a      	mov	r2, r3
 800e614:	4b42      	ldr	r3, [pc, #264]	; (800e720 <Buil_Pop+0x218>)
 800e616:	f9b3 3046 	ldrsh.w	r3, [r3, #70]	; 0x46
 800e61a:	3b02      	subs	r3, #2
 800e61c:	429a      	cmp	r2, r3
 800e61e:	dbd6      	blt.n	800e5ce <Buil_Pop+0xc6>
 800e620:	4b3f      	ldr	r3, [pc, #252]	; (800e720 <Buil_Pop+0x218>)
 800e622:	f9b3 3046 	ldrsh.w	r3, [r3, #70]	; 0x46
 800e626:	b29b      	uxth	r3, r3
 800e628:	3b03      	subs	r3, #3
 800e62a:	b29b      	uxth	r3, r3
 800e62c:	b21a      	sxth	r2, r3
 800e62e:	4b3a      	ldr	r3, [pc, #232]	; (800e718 <Buil_Pop+0x210>)
 800e630:	801a      	strh	r2, [r3, #0]
 800e632:	4b3a      	ldr	r3, [pc, #232]	; (800e71c <Buil_Pop+0x214>)
 800e634:	2201      	movs	r2, #1
 800e636:	801a      	strh	r2, [r3, #0]
 800e638:	2001      	movs	r0, #1
 800e63a:	f7ff fed3 	bl	800e3e4 <NotePixel>
 800e63e:	4b38      	ldr	r3, [pc, #224]	; (800e720 <Buil_Pop+0x218>)
 800e640:	f9b3 3046 	ldrsh.w	r3, [r3, #70]	; 0x46
 800e644:	b29b      	uxth	r3, r3
 800e646:	3b03      	subs	r3, #3
 800e648:	b29b      	uxth	r3, r3
 800e64a:	b21a      	sxth	r2, r3
 800e64c:	4b32      	ldr	r3, [pc, #200]	; (800e718 <Buil_Pop+0x210>)
 800e64e:	801a      	strh	r2, [r3, #0]
 800e650:	4b33      	ldr	r3, [pc, #204]	; (800e720 <Buil_Pop+0x218>)
 800e652:	f9b3 304a 	ldrsh.w	r3, [r3, #74]	; 0x4a
 800e656:	0fda      	lsrs	r2, r3, #31
 800e658:	4413      	add	r3, r2
 800e65a:	105b      	asrs	r3, r3, #1
 800e65c:	b21b      	sxth	r3, r3
 800e65e:	b29b      	uxth	r3, r3
 800e660:	3b02      	subs	r3, #2
 800e662:	b29b      	uxth	r3, r3
 800e664:	b21a      	sxth	r2, r3
 800e666:	4b2d      	ldr	r3, [pc, #180]	; (800e71c <Buil_Pop+0x214>)
 800e668:	801a      	strh	r2, [r3, #0]
 800e66a:	2001      	movs	r0, #1
 800e66c:	f7ff feba 	bl	800e3e4 <NotePixel>
 800e670:	4b2b      	ldr	r3, [pc, #172]	; (800e720 <Buil_Pop+0x218>)
 800e672:	f9b3 3046 	ldrsh.w	r3, [r3, #70]	; 0x46
 800e676:	b29b      	uxth	r3, r3
 800e678:	3b02      	subs	r3, #2
 800e67a:	b29b      	uxth	r3, r3
 800e67c:	b21a      	sxth	r2, r3
 800e67e:	4b26      	ldr	r3, [pc, #152]	; (800e718 <Buil_Pop+0x210>)
 800e680:	801a      	strh	r2, [r3, #0]
 800e682:	4b26      	ldr	r3, [pc, #152]	; (800e71c <Buil_Pop+0x214>)
 800e684:	2202      	movs	r2, #2
 800e686:	801a      	strh	r2, [r3, #0]
 800e688:	2001      	movs	r0, #1
 800e68a:	f7ff feab 	bl	800e3e4 <NotePixel>
 800e68e:	4b24      	ldr	r3, [pc, #144]	; (800e720 <Buil_Pop+0x218>)
 800e690:	f9b3 3046 	ldrsh.w	r3, [r3, #70]	; 0x46
 800e694:	b29b      	uxth	r3, r3
 800e696:	3b02      	subs	r3, #2
 800e698:	b29b      	uxth	r3, r3
 800e69a:	b21a      	sxth	r2, r3
 800e69c:	4b1e      	ldr	r3, [pc, #120]	; (800e718 <Buil_Pop+0x210>)
 800e69e:	801a      	strh	r2, [r3, #0]
 800e6a0:	4b1f      	ldr	r3, [pc, #124]	; (800e720 <Buil_Pop+0x218>)
 800e6a2:	f9b3 304a 	ldrsh.w	r3, [r3, #74]	; 0x4a
 800e6a6:	0fda      	lsrs	r2, r3, #31
 800e6a8:	4413      	add	r3, r2
 800e6aa:	105b      	asrs	r3, r3, #1
 800e6ac:	b21b      	sxth	r3, r3
 800e6ae:	b29b      	uxth	r3, r3
 800e6b0:	3b03      	subs	r3, #3
 800e6b2:	b29b      	uxth	r3, r3
 800e6b4:	b21a      	sxth	r2, r3
 800e6b6:	4b19      	ldr	r3, [pc, #100]	; (800e71c <Buil_Pop+0x214>)
 800e6b8:	801a      	strh	r2, [r3, #0]
 800e6ba:	2001      	movs	r0, #1
 800e6bc:	f7ff fe92 	bl	800e3e4 <NotePixel>
 800e6c0:	4b17      	ldr	r3, [pc, #92]	; (800e720 <Buil_Pop+0x218>)
 800e6c2:	f9b3 3046 	ldrsh.w	r3, [r3, #70]	; 0x46
 800e6c6:	b29b      	uxth	r3, r3
 800e6c8:	3b01      	subs	r3, #1
 800e6ca:	b29b      	uxth	r3, r3
 800e6cc:	b21a      	sxth	r2, r3
 800e6ce:	4b12      	ldr	r3, [pc, #72]	; (800e718 <Buil_Pop+0x210>)
 800e6d0:	801a      	strh	r2, [r3, #0]
 800e6d2:	4b12      	ldr	r3, [pc, #72]	; (800e71c <Buil_Pop+0x214>)
 800e6d4:	2203      	movs	r2, #3
 800e6d6:	801a      	strh	r2, [r3, #0]
 800e6d8:	2300      	movs	r3, #0
 800e6da:	80fb      	strh	r3, [r7, #6]
 800e6dc:	e008      	b.n	800e6f0 <Buil_Pop+0x1e8>
 800e6de:	2001      	movs	r0, #1
 800e6e0:	f7ff fe80 	bl	800e3e4 <NotePixel>
 800e6e4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800e6e8:	b29b      	uxth	r3, r3
 800e6ea:	3301      	adds	r3, #1
 800e6ec:	b29b      	uxth	r3, r3
 800e6ee:	80fb      	strh	r3, [r7, #6]
 800e6f0:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800e6f4:	4b0a      	ldr	r3, [pc, #40]	; (800e720 <Buil_Pop+0x218>)
 800e6f6:	f9b3 304a 	ldrsh.w	r3, [r3, #74]	; 0x4a
 800e6fa:	0fd9      	lsrs	r1, r3, #31
 800e6fc:	440b      	add	r3, r1
 800e6fe:	105b      	asrs	r3, r3, #1
 800e700:	b21b      	sxth	r3, r3
 800e702:	3b06      	subs	r3, #6
 800e704:	429a      	cmp	r2, r3
 800e706:	dbea      	blt.n	800e6de <Buil_Pop+0x1d6>
 800e708:	bf00      	nop
 800e70a:	bf00      	nop
 800e70c:	3708      	adds	r7, #8
 800e70e:	46bd      	mov	sp, r7
 800e710:	bd80      	pop	{r7, pc}
 800e712:	bf00      	nop
 800e714:	20000f8c 	.word	0x20000f8c
 800e718:	20000002 	.word	0x20000002
 800e71c:	20000004 	.word	0x20000004
 800e720:	20000140 	.word	0x20000140

0800e724 <PopColor>:
 800e724:	b480      	push	{r7}
 800e726:	b083      	sub	sp, #12
 800e728:	af00      	add	r7, sp, #0
 800e72a:	4603      	mov	r3, r0
 800e72c:	460a      	mov	r2, r1
 800e72e:	80fb      	strh	r3, [r7, #6]
 800e730:	4613      	mov	r3, r2
 800e732:	80bb      	strh	r3, [r7, #4]
 800e734:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800e738:	4b06      	ldr	r3, [pc, #24]	; (800e754 <PopColor+0x30>)
 800e73a:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 800e73e:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 800e742:	4b04      	ldr	r3, [pc, #16]	; (800e754 <PopColor+0x30>)
 800e744:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
 800e748:	bf00      	nop
 800e74a:	370c      	adds	r7, #12
 800e74c:	46bd      	mov	sp, r7
 800e74e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e752:	4770      	bx	lr
 800e754:	20000140 	.word	0x20000140

0800e758 <Close_Pop>:
 800e758:	b480      	push	{r7}
 800e75a:	af00      	add	r7, sp, #0
 800e75c:	4b07      	ldr	r3, [pc, #28]	; (800e77c <Close_Pop+0x24>)
 800e75e:	781b      	ldrb	r3, [r3, #0]
 800e760:	f023 0306 	bic.w	r3, r3, #6
 800e764:	b2da      	uxtb	r2, r3
 800e766:	4b05      	ldr	r3, [pc, #20]	; (800e77c <Close_Pop+0x24>)
 800e768:	701a      	strb	r2, [r3, #0]
 800e76a:	4b05      	ldr	r3, [pc, #20]	; (800e780 <Close_Pop+0x28>)
 800e76c:	2201      	movs	r2, #1
 800e76e:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
 800e772:	bf00      	nop
 800e774:	46bd      	mov	sp, r7
 800e776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e77a:	4770      	bx	lr
 800e77c:	2000078e 	.word	0x2000078e
 800e780:	20000140 	.word	0x20000140

0800e784 <List_Pop>:
 800e784:	b480      	push	{r7}
 800e786:	af00      	add	r7, sp, #0
 800e788:	4b07      	ldr	r3, [pc, #28]	; (800e7a8 <List_Pop+0x24>)
 800e78a:	781b      	ldrb	r3, [r3, #0]
 800e78c:	f043 0302 	orr.w	r3, r3, #2
 800e790:	b2da      	uxtb	r2, r3
 800e792:	4b05      	ldr	r3, [pc, #20]	; (800e7a8 <List_Pop+0x24>)
 800e794:	701a      	strb	r2, [r3, #0]
 800e796:	4b05      	ldr	r3, [pc, #20]	; (800e7ac <List_Pop+0x28>)
 800e798:	2200      	movs	r2, #0
 800e79a:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
 800e79e:	bf00      	nop
 800e7a0:	46bd      	mov	sp, r7
 800e7a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7a6:	4770      	bx	lr
 800e7a8:	2000078e 	.word	0x2000078e
 800e7ac:	20000140 	.word	0x20000140

0800e7b0 <Dialog_Pop>:
 800e7b0:	b580      	push	{r7, lr}
 800e7b2:	b084      	sub	sp, #16
 800e7b4:	af02      	add	r7, sp, #8
 800e7b6:	6078      	str	r0, [r7, #4]
 800e7b8:	4b2a      	ldr	r3, [pc, #168]	; (800e864 <Dialog_Pop+0xb4>)
 800e7ba:	781b      	ldrb	r3, [r3, #0]
 800e7bc:	f043 0304 	orr.w	r3, r3, #4
 800e7c0:	b2da      	uxtb	r2, r3
 800e7c2:	4b28      	ldr	r3, [pc, #160]	; (800e864 <Dialog_Pop+0xb4>)
 800e7c4:	701a      	strb	r2, [r3, #0]
 800e7c6:	4b28      	ldr	r3, [pc, #160]	; (800e868 <Dialog_Pop+0xb8>)
 800e7c8:	2280      	movs	r2, #128	; 0x80
 800e7ca:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 800e7ce:	4b26      	ldr	r3, [pc, #152]	; (800e868 <Dialog_Pop+0xb8>)
 800e7d0:	2260      	movs	r2, #96	; 0x60
 800e7d2:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
 800e7d6:	4b24      	ldr	r3, [pc, #144]	; (800e868 <Dialog_Pop+0xb8>)
 800e7d8:	2250      	movs	r2, #80	; 0x50
 800e7da:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
 800e7de:	4b22      	ldr	r3, [pc, #136]	; (800e868 <Dialog_Pop+0xb8>)
 800e7e0:	22c8      	movs	r2, #200	; 0xc8
 800e7e2:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800e7e6:	f643 11e7 	movw	r1, #14823	; 0x39e7
 800e7ea:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800e7ee:	f7ff ff99 	bl	800e724 <PopColor>
 800e7f2:	f7ff fe89 	bl	800e508 <Buil_Pop>
 800e7f6:	687b      	ldr	r3, [r7, #4]
 800e7f8:	2200      	movs	r2, #0
 800e7fa:	211c      	movs	r1, #28
 800e7fc:	2008      	movs	r0, #8
 800e7fe:	f000 f8e1 	bl	800e9c4 <NoteSTR>
 800e802:	4b1a      	ldr	r3, [pc, #104]	; (800e86c <Dialog_Pop+0xbc>)
 800e804:	2211      	movs	r2, #17
 800e806:	2108      	movs	r1, #8
 800e808:	200c      	movs	r0, #12
 800e80a:	f000 f8db 	bl	800e9c4 <NoteSTR>
 800e80e:	230a      	movs	r3, #10
 800e810:	9300      	str	r3, [sp, #0]
 800e812:	2302      	movs	r3, #2
 800e814:	2208      	movs	r2, #8
 800e816:	210c      	movs	r1, #12
 800e818:	2000      	movs	r0, #0
 800e81a:	f000 f979 	bl	800eb10 <Note_4Point>
 800e81e:	4b14      	ldr	r3, [pc, #80]	; (800e870 <Dialog_Pop+0xc0>)
 800e820:	2200      	movs	r2, #0
 800e822:	2108      	movs	r1, #8
 800e824:	2018      	movs	r0, #24
 800e826:	f000 f8cd 	bl	800e9c4 <NoteSTR>
 800e82a:	4b12      	ldr	r3, [pc, #72]	; (800e874 <Dialog_Pop+0xc4>)
 800e82c:	2211      	movs	r2, #17
 800e82e:	2108      	movs	r1, #8
 800e830:	2048      	movs	r0, #72	; 0x48
 800e832:	f000 f8c7 	bl	800e9c4 <NoteSTR>
 800e836:	230a      	movs	r3, #10
 800e838:	9300      	str	r3, [sp, #0]
 800e83a:	2302      	movs	r3, #2
 800e83c:	2208      	movs	r2, #8
 800e83e:	2148      	movs	r1, #72	; 0x48
 800e840:	2000      	movs	r0, #0
 800e842:	f000 f965 	bl	800eb10 <Note_4Point>
 800e846:	4b0c      	ldr	r3, [pc, #48]	; (800e878 <Dialog_Pop+0xc8>)
 800e848:	2200      	movs	r2, #0
 800e84a:	2108      	movs	r1, #8
 800e84c:	2054      	movs	r0, #84	; 0x54
 800e84e:	f000 f8b9 	bl	800e9c4 <NoteSTR>
 800e852:	4b05      	ldr	r3, [pc, #20]	; (800e868 <Dialog_Pop+0xb8>)
 800e854:	2200      	movs	r2, #0
 800e856:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
 800e85a:	bf00      	nop
 800e85c:	3708      	adds	r7, #8
 800e85e:	46bd      	mov	sp, r7
 800e860:	bd80      	pop	{r7, pc}
 800e862:	bf00      	nop
 800e864:	2000078e 	.word	0x2000078e
 800e868:	20000140 	.word	0x20000140
 800e86c:	080001c4 	.word	0x080001c4
 800e870:	080001c8 	.word	0x080001c8
 800e874:	080001d0 	.word	0x080001d0
 800e878:	080001d4 	.word	0x080001d4

0800e87c <Calibrate_Pop>:
 800e87c:	b580      	push	{r7, lr}
 800e87e:	b082      	sub	sp, #8
 800e880:	af00      	add	r7, sp, #0
 800e882:	6078      	str	r0, [r7, #4]
 800e884:	4b16      	ldr	r3, [pc, #88]	; (800e8e0 <Calibrate_Pop+0x64>)
 800e886:	781b      	ldrb	r3, [r3, #0]
 800e888:	f043 0304 	orr.w	r3, r3, #4
 800e88c:	b2da      	uxtb	r2, r3
 800e88e:	4b14      	ldr	r3, [pc, #80]	; (800e8e0 <Calibrate_Pop+0x64>)
 800e890:	701a      	strb	r2, [r3, #0]
 800e892:	4b14      	ldr	r3, [pc, #80]	; (800e8e4 <Calibrate_Pop+0x68>)
 800e894:	22c8      	movs	r2, #200	; 0xc8
 800e896:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 800e89a:	4b12      	ldr	r3, [pc, #72]	; (800e8e4 <Calibrate_Pop+0x68>)
 800e89c:	2240      	movs	r2, #64	; 0x40
 800e89e:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
 800e8a2:	4b10      	ldr	r3, [pc, #64]	; (800e8e4 <Calibrate_Pop+0x68>)
 800e8a4:	2232      	movs	r2, #50	; 0x32
 800e8a6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
 800e8aa:	4b0e      	ldr	r3, [pc, #56]	; (800e8e4 <Calibrate_Pop+0x68>)
 800e8ac:	22e6      	movs	r2, #230	; 0xe6
 800e8ae:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800e8b2:	f643 11e7 	movw	r1, #14823	; 0x39e7
 800e8b6:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800e8ba:	f7ff ff33 	bl	800e724 <PopColor>
 800e8be:	f7ff fe23 	bl	800e508 <Buil_Pop>
 800e8c2:	687b      	ldr	r3, [r7, #4]
 800e8c4:	2200      	movs	r2, #0
 800e8c6:	210a      	movs	r1, #10
 800e8c8:	2010      	movs	r0, #16
 800e8ca:	f000 f87b 	bl	800e9c4 <NoteSTR>
 800e8ce:	4b05      	ldr	r3, [pc, #20]	; (800e8e4 <Calibrate_Pop+0x68>)
 800e8d0:	2200      	movs	r2, #0
 800e8d2:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
 800e8d6:	bf00      	nop
 800e8d8:	3708      	adds	r7, #8
 800e8da:	46bd      	mov	sp, r7
 800e8dc:	bd80      	pop	{r7, pc}
 800e8de:	bf00      	nop
 800e8e0:	2000078e 	.word	0x2000078e
 800e8e4:	20000140 	.word	0x20000140

0800e8e8 <CalSave_Pop>:
 800e8e8:	b580      	push	{r7, lr}
 800e8ea:	b084      	sub	sp, #16
 800e8ec:	af02      	add	r7, sp, #8
 800e8ee:	6078      	str	r0, [r7, #4]
 800e8f0:	4b2d      	ldr	r3, [pc, #180]	; (800e9a8 <CalSave_Pop+0xc0>)
 800e8f2:	781b      	ldrb	r3, [r3, #0]
 800e8f4:	f043 0304 	orr.w	r3, r3, #4
 800e8f8:	b2da      	uxtb	r2, r3
 800e8fa:	4b2b      	ldr	r3, [pc, #172]	; (800e9a8 <CalSave_Pop+0xc0>)
 800e8fc:	701a      	strb	r2, [r3, #0]
 800e8fe:	4b2b      	ldr	r3, [pc, #172]	; (800e9ac <CalSave_Pop+0xc4>)
 800e900:	22d0      	movs	r2, #208	; 0xd0
 800e902:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 800e906:	4b29      	ldr	r3, [pc, #164]	; (800e9ac <CalSave_Pop+0xc4>)
 800e908:	2260      	movs	r2, #96	; 0x60
 800e90a:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
 800e90e:	4b27      	ldr	r3, [pc, #156]	; (800e9ac <CalSave_Pop+0xc4>)
 800e910:	221e      	movs	r2, #30
 800e912:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
 800e916:	4b25      	ldr	r3, [pc, #148]	; (800e9ac <CalSave_Pop+0xc4>)
 800e918:	22c8      	movs	r2, #200	; 0xc8
 800e91a:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800e91e:	f643 11e7 	movw	r1, #14823	; 0x39e7
 800e922:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800e926:	f7ff fefd 	bl	800e724 <PopColor>
 800e92a:	f7ff fded 	bl	800e508 <Buil_Pop>
 800e92e:	4b20      	ldr	r3, [pc, #128]	; (800e9b0 <CalSave_Pop+0xc8>)
 800e930:	2200      	movs	r2, #0
 800e932:	211c      	movs	r1, #28
 800e934:	2006      	movs	r0, #6
 800e936:	f000 f845 	bl	800e9c4 <NoteSTR>
 800e93a:	687b      	ldr	r3, [r7, #4]
 800e93c:	2200      	movs	r2, #0
 800e93e:	211c      	movs	r1, #28
 800e940:	205a      	movs	r0, #90	; 0x5a
 800e942:	f000 f83f 	bl	800e9c4 <NoteSTR>
 800e946:	4b1b      	ldr	r3, [pc, #108]	; (800e9b4 <CalSave_Pop+0xcc>)
 800e948:	2211      	movs	r2, #17
 800e94a:	2108      	movs	r1, #8
 800e94c:	201e      	movs	r0, #30
 800e94e:	f000 f839 	bl	800e9c4 <NoteSTR>
 800e952:	230a      	movs	r3, #10
 800e954:	9300      	str	r3, [sp, #0]
 800e956:	2302      	movs	r3, #2
 800e958:	2208      	movs	r2, #8
 800e95a:	211e      	movs	r1, #30
 800e95c:	2000      	movs	r0, #0
 800e95e:	f000 f8d7 	bl	800eb10 <Note_4Point>
 800e962:	4b15      	ldr	r3, [pc, #84]	; (800e9b8 <CalSave_Pop+0xd0>)
 800e964:	2200      	movs	r2, #0
 800e966:	2108      	movs	r1, #8
 800e968:	202a      	movs	r0, #42	; 0x2a
 800e96a:	f000 f82b 	bl	800e9c4 <NoteSTR>
 800e96e:	4b13      	ldr	r3, [pc, #76]	; (800e9bc <CalSave_Pop+0xd4>)
 800e970:	2211      	movs	r2, #17
 800e972:	2108      	movs	r1, #8
 800e974:	2078      	movs	r0, #120	; 0x78
 800e976:	f000 f825 	bl	800e9c4 <NoteSTR>
 800e97a:	230a      	movs	r3, #10
 800e97c:	9300      	str	r3, [sp, #0]
 800e97e:	2302      	movs	r3, #2
 800e980:	2208      	movs	r2, #8
 800e982:	2178      	movs	r1, #120	; 0x78
 800e984:	2000      	movs	r0, #0
 800e986:	f000 f8c3 	bl	800eb10 <Note_4Point>
 800e98a:	4b0d      	ldr	r3, [pc, #52]	; (800e9c0 <CalSave_Pop+0xd8>)
 800e98c:	2200      	movs	r2, #0
 800e98e:	2108      	movs	r1, #8
 800e990:	2084      	movs	r0, #132	; 0x84
 800e992:	f000 f817 	bl	800e9c4 <NoteSTR>
 800e996:	4b05      	ldr	r3, [pc, #20]	; (800e9ac <CalSave_Pop+0xc4>)
 800e998:	2200      	movs	r2, #0
 800e99a:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
 800e99e:	bf00      	nop
 800e9a0:	3708      	adds	r7, #8
 800e9a2:	46bd      	mov	sp, r7
 800e9a4:	bd80      	pop	{r7, pc}
 800e9a6:	bf00      	nop
 800e9a8:	2000078e 	.word	0x2000078e
 800e9ac:	20000140 	.word	0x20000140
 800e9b0:	080001dc 	.word	0x080001dc
 800e9b4:	080001c4 	.word	0x080001c4
 800e9b8:	080001c8 	.word	0x080001c8
 800e9bc:	080001d0 	.word	0x080001d0
 800e9c0:	080001d4 	.word	0x080001d4

0800e9c4 <NoteSTR>:
 800e9c4:	b580      	push	{r7, lr}
 800e9c6:	b086      	sub	sp, #24
 800e9c8:	af00      	add	r7, sp, #0
 800e9ca:	607b      	str	r3, [r7, #4]
 800e9cc:	4603      	mov	r3, r0
 800e9ce:	81fb      	strh	r3, [r7, #14]
 800e9d0:	460b      	mov	r3, r1
 800e9d2:	81bb      	strh	r3, [r7, #12]
 800e9d4:	4613      	mov	r3, r2
 800e9d6:	72fb      	strb	r3, [r7, #11]
 800e9d8:	4a48      	ldr	r2, [pc, #288]	; (800eafc <NoteSTR+0x138>)
 800e9da:	89fb      	ldrh	r3, [r7, #14]
 800e9dc:	8013      	strh	r3, [r2, #0]
 800e9de:	4a48      	ldr	r2, [pc, #288]	; (800eb00 <NoteSTR+0x13c>)
 800e9e0:	89bb      	ldrh	r3, [r7, #12]
 800e9e2:	8013      	strh	r3, [r2, #0]
 800e9e4:	e080      	b.n	800eae8 <NoteSTR+0x124>
 800e9e6:	687b      	ldr	r3, [r7, #4]
 800e9e8:	1c5a      	adds	r2, r3, #1
 800e9ea:	607a      	str	r2, [r7, #4]
 800e9ec:	781b      	ldrb	r3, [r3, #0]
 800e9ee:	747b      	strb	r3, [r7, #17]
 800e9f0:	2300      	movs	r3, #0
 800e9f2:	82fb      	strh	r3, [r7, #22]
 800e9f4:	e074      	b.n	800eae0 <NoteSTR+0x11c>
 800e9f6:	7afb      	ldrb	r3, [r7, #11]
 800e9f8:	f003 0310 	and.w	r3, r3, #16
 800e9fc:	2b00      	cmp	r3, #0
 800e9fe:	d10e      	bne.n	800ea1e <NoteSTR+0x5a>
 800ea00:	7c7b      	ldrb	r3, [r7, #17]
 800ea02:	f1a3 0221 	sub.w	r2, r3, #33	; 0x21
 800ea06:	4613      	mov	r3, r2
 800ea08:	005b      	lsls	r3, r3, #1
 800ea0a:	4413      	add	r3, r2
 800ea0c:	005b      	lsls	r3, r3, #1
 800ea0e:	461a      	mov	r2, r3
 800ea10:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800ea14:	4413      	add	r3, r2
 800ea16:	4a3b      	ldr	r2, [pc, #236]	; (800eb04 <NoteSTR+0x140>)
 800ea18:	5cd3      	ldrb	r3, [r2, r3]
 800ea1a:	827b      	strh	r3, [r7, #18]
 800ea1c:	e00d      	b.n	800ea3a <NoteSTR+0x76>
 800ea1e:	7c7b      	ldrb	r3, [r7, #17]
 800ea20:	f1a3 0221 	sub.w	r2, r3, #33	; 0x21
 800ea24:	4613      	mov	r3, r2
 800ea26:	005b      	lsls	r3, r3, #1
 800ea28:	4413      	add	r3, r2
 800ea2a:	005b      	lsls	r3, r3, #1
 800ea2c:	461a      	mov	r2, r3
 800ea2e:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800ea32:	4413      	add	r3, r2
 800ea34:	4a34      	ldr	r2, [pc, #208]	; (800eb08 <NoteSTR+0x144>)
 800ea36:	5cd3      	ldrb	r3, [r2, r3]
 800ea38:	827b      	strh	r3, [r7, #18]
 800ea3a:	7afb      	ldrb	r3, [r7, #11]
 800ea3c:	f003 0320 	and.w	r3, r3, #32
 800ea40:	2b00      	cmp	r3, #0
 800ea42:	d00c      	beq.n	800ea5e <NoteSTR+0x9a>
 800ea44:	8afb      	ldrh	r3, [r7, #22]
 800ea46:	f003 0301 	and.w	r3, r3, #1
 800ea4a:	b29b      	uxth	r3, r3
 800ea4c:	2b00      	cmp	r3, #0
 800ea4e:	d001      	beq.n	800ea54 <NoteSTR+0x90>
 800ea50:	4a2e      	ldr	r2, [pc, #184]	; (800eb0c <NoteSTR+0x148>)
 800ea52:	e001      	b.n	800ea58 <NoteSTR+0x94>
 800ea54:	f245 5255 	movw	r2, #21845	; 0x5555
 800ea58:	8a7b      	ldrh	r3, [r7, #18]
 800ea5a:	4013      	ands	r3, r2
 800ea5c:	827b      	strh	r3, [r7, #18]
 800ea5e:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800ea62:	009b      	lsls	r3, r3, #2
 800ea64:	827b      	strh	r3, [r7, #18]
 800ea66:	2300      	movs	r3, #0
 800ea68:	82bb      	strh	r3, [r7, #20]
 800ea6a:	e01f      	b.n	800eaac <NoteSTR+0xe8>
 800ea6c:	8a7b      	ldrh	r3, [r7, #18]
 800ea6e:	f003 0301 	and.w	r3, r3, #1
 800ea72:	2b00      	cmp	r3, #0
 800ea74:	d00b      	beq.n	800ea8e <NoteSTR+0xca>
 800ea76:	7afb      	ldrb	r3, [r7, #11]
 800ea78:	f003 0301 	and.w	r3, r3, #1
 800ea7c:	2b00      	cmp	r3, #0
 800ea7e:	bf0c      	ite	eq
 800ea80:	2301      	moveq	r3, #1
 800ea82:	2300      	movne	r3, #0
 800ea84:	b2db      	uxtb	r3, r3
 800ea86:	4618      	mov	r0, r3
 800ea88:	f7ff fcac 	bl	800e3e4 <NotePixel>
 800ea8c:	e006      	b.n	800ea9c <NoteSTR+0xd8>
 800ea8e:	7afb      	ldrb	r3, [r7, #11]
 800ea90:	f003 0301 	and.w	r3, r3, #1
 800ea94:	b2db      	uxtb	r3, r3
 800ea96:	4618      	mov	r0, r3
 800ea98:	f7ff fca4 	bl	800e3e4 <NotePixel>
 800ea9c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800eaa0:	105b      	asrs	r3, r3, #1
 800eaa2:	827b      	strh	r3, [r7, #18]
 800eaa4:	8abb      	ldrh	r3, [r7, #20]
 800eaa6:	3301      	adds	r3, #1
 800eaa8:	b29b      	uxth	r3, r3
 800eaaa:	82bb      	strh	r3, [r7, #20]
 800eaac:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800eab0:	2b0d      	cmp	r3, #13
 800eab2:	dddb      	ble.n	800ea6c <NoteSTR+0xa8>
 800eab4:	4b11      	ldr	r3, [pc, #68]	; (800eafc <NoteSTR+0x138>)
 800eab6:	f9b3 3000 	ldrsh.w	r3, [r3]
 800eaba:	b29b      	uxth	r3, r3
 800eabc:	3301      	adds	r3, #1
 800eabe:	b29b      	uxth	r3, r3
 800eac0:	b21a      	sxth	r2, r3
 800eac2:	4b0e      	ldr	r3, [pc, #56]	; (800eafc <NoteSTR+0x138>)
 800eac4:	801a      	strh	r2, [r3, #0]
 800eac6:	4b0e      	ldr	r3, [pc, #56]	; (800eb00 <NoteSTR+0x13c>)
 800eac8:	f9b3 3000 	ldrsh.w	r3, [r3]
 800eacc:	b29b      	uxth	r3, r3
 800eace:	3b0e      	subs	r3, #14
 800ead0:	b29b      	uxth	r3, r3
 800ead2:	b21a      	sxth	r2, r3
 800ead4:	4b0a      	ldr	r3, [pc, #40]	; (800eb00 <NoteSTR+0x13c>)
 800ead6:	801a      	strh	r2, [r3, #0]
 800ead8:	8afb      	ldrh	r3, [r7, #22]
 800eada:	3301      	adds	r3, #1
 800eadc:	b29b      	uxth	r3, r3
 800eade:	82fb      	strh	r3, [r7, #22]
 800eae0:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800eae4:	2b05      	cmp	r3, #5
 800eae6:	dd86      	ble.n	800e9f6 <NoteSTR+0x32>
 800eae8:	687b      	ldr	r3, [r7, #4]
 800eaea:	781b      	ldrb	r3, [r3, #0]
 800eaec:	2b00      	cmp	r3, #0
 800eaee:	f47f af7a 	bne.w	800e9e6 <NoteSTR+0x22>
 800eaf2:	bf00      	nop
 800eaf4:	bf00      	nop
 800eaf6:	3718      	adds	r7, #24
 800eaf8:	46bd      	mov	sp, r7
 800eafa:	bd80      	pop	{r7, pc}
 800eafc:	20000002 	.word	0x20000002
 800eb00:	20000004 	.word	0x20000004
 800eb04:	080016c4 	.word	0x080016c4
 800eb08:	08001490 	.word	0x08001490
 800eb0c:	ffffaaaa 	.word	0xffffaaaa

0800eb10 <Note_4Point>:
 800eb10:	b590      	push	{r4, r7, lr}
 800eb12:	b083      	sub	sp, #12
 800eb14:	af00      	add	r7, sp, #0
 800eb16:	4604      	mov	r4, r0
 800eb18:	4608      	mov	r0, r1
 800eb1a:	4611      	mov	r1, r2
 800eb1c:	461a      	mov	r2, r3
 800eb1e:	4623      	mov	r3, r4
 800eb20:	71fb      	strb	r3, [r7, #7]
 800eb22:	4603      	mov	r3, r0
 800eb24:	80bb      	strh	r3, [r7, #4]
 800eb26:	460b      	mov	r3, r1
 800eb28:	807b      	strh	r3, [r7, #2]
 800eb2a:	4613      	mov	r3, r2
 800eb2c:	71bb      	strb	r3, [r7, #6]
 800eb2e:	7e3b      	ldrb	r3, [r7, #24]
 800eb30:	3304      	adds	r3, #4
 800eb32:	763b      	strb	r3, [r7, #24]
 800eb34:	4a2e      	ldr	r2, [pc, #184]	; (800ebf0 <Note_4Point+0xe0>)
 800eb36:	88bb      	ldrh	r3, [r7, #4]
 800eb38:	8013      	strh	r3, [r2, #0]
 800eb3a:	4a2e      	ldr	r2, [pc, #184]	; (800ebf4 <Note_4Point+0xe4>)
 800eb3c:	887b      	ldrh	r3, [r7, #2]
 800eb3e:	8013      	strh	r3, [r2, #0]
 800eb40:	79fb      	ldrb	r3, [r7, #7]
 800eb42:	f003 0301 	and.w	r3, r3, #1
 800eb46:	b2db      	uxtb	r3, r3
 800eb48:	4618      	mov	r0, r3
 800eb4a:	f7ff fc4b 	bl	800e3e4 <NotePixel>
 800eb4e:	4a28      	ldr	r2, [pc, #160]	; (800ebf0 <Note_4Point+0xe0>)
 800eb50:	88bb      	ldrh	r3, [r7, #4]
 800eb52:	8013      	strh	r3, [r2, #0]
 800eb54:	7e3b      	ldrb	r3, [r7, #24]
 800eb56:	b29a      	uxth	r2, r3
 800eb58:	887b      	ldrh	r3, [r7, #2]
 800eb5a:	4413      	add	r3, r2
 800eb5c:	b29b      	uxth	r3, r3
 800eb5e:	3b01      	subs	r3, #1
 800eb60:	b29b      	uxth	r3, r3
 800eb62:	b21a      	sxth	r2, r3
 800eb64:	4b23      	ldr	r3, [pc, #140]	; (800ebf4 <Note_4Point+0xe4>)
 800eb66:	801a      	strh	r2, [r3, #0]
 800eb68:	79fb      	ldrb	r3, [r7, #7]
 800eb6a:	f003 0301 	and.w	r3, r3, #1
 800eb6e:	b2db      	uxtb	r3, r3
 800eb70:	4618      	mov	r0, r3
 800eb72:	f7ff fc37 	bl	800e3e4 <NotePixel>
 800eb76:	79bb      	ldrb	r3, [r7, #6]
 800eb78:	b29b      	uxth	r3, r3
 800eb7a:	461a      	mov	r2, r3
 800eb7c:	0052      	lsls	r2, r2, #1
 800eb7e:	4413      	add	r3, r2
 800eb80:	005b      	lsls	r3, r3, #1
 800eb82:	b29a      	uxth	r2, r3
 800eb84:	88bb      	ldrh	r3, [r7, #4]
 800eb86:	4413      	add	r3, r2
 800eb88:	b29b      	uxth	r3, r3
 800eb8a:	3b01      	subs	r3, #1
 800eb8c:	b29b      	uxth	r3, r3
 800eb8e:	b21a      	sxth	r2, r3
 800eb90:	4b17      	ldr	r3, [pc, #92]	; (800ebf0 <Note_4Point+0xe0>)
 800eb92:	801a      	strh	r2, [r3, #0]
 800eb94:	4a17      	ldr	r2, [pc, #92]	; (800ebf4 <Note_4Point+0xe4>)
 800eb96:	887b      	ldrh	r3, [r7, #2]
 800eb98:	8013      	strh	r3, [r2, #0]
 800eb9a:	79fb      	ldrb	r3, [r7, #7]
 800eb9c:	f003 0301 	and.w	r3, r3, #1
 800eba0:	b2db      	uxtb	r3, r3
 800eba2:	4618      	mov	r0, r3
 800eba4:	f7ff fc1e 	bl	800e3e4 <NotePixel>
 800eba8:	79bb      	ldrb	r3, [r7, #6]
 800ebaa:	b29b      	uxth	r3, r3
 800ebac:	461a      	mov	r2, r3
 800ebae:	0052      	lsls	r2, r2, #1
 800ebb0:	4413      	add	r3, r2
 800ebb2:	005b      	lsls	r3, r3, #1
 800ebb4:	b29a      	uxth	r2, r3
 800ebb6:	88bb      	ldrh	r3, [r7, #4]
 800ebb8:	4413      	add	r3, r2
 800ebba:	b29b      	uxth	r3, r3
 800ebbc:	3b01      	subs	r3, #1
 800ebbe:	b29b      	uxth	r3, r3
 800ebc0:	b21a      	sxth	r2, r3
 800ebc2:	4b0b      	ldr	r3, [pc, #44]	; (800ebf0 <Note_4Point+0xe0>)
 800ebc4:	801a      	strh	r2, [r3, #0]
 800ebc6:	7e3b      	ldrb	r3, [r7, #24]
 800ebc8:	b29a      	uxth	r2, r3
 800ebca:	887b      	ldrh	r3, [r7, #2]
 800ebcc:	4413      	add	r3, r2
 800ebce:	b29b      	uxth	r3, r3
 800ebd0:	3b01      	subs	r3, #1
 800ebd2:	b29b      	uxth	r3, r3
 800ebd4:	b21a      	sxth	r2, r3
 800ebd6:	4b07      	ldr	r3, [pc, #28]	; (800ebf4 <Note_4Point+0xe4>)
 800ebd8:	801a      	strh	r2, [r3, #0]
 800ebda:	79fb      	ldrb	r3, [r7, #7]
 800ebdc:	f003 0301 	and.w	r3, r3, #1
 800ebe0:	b2db      	uxtb	r3, r3
 800ebe2:	4618      	mov	r0, r3
 800ebe4:	f7ff fbfe 	bl	800e3e4 <NotePixel>
 800ebe8:	bf00      	nop
 800ebea:	370c      	adds	r7, #12
 800ebec:	46bd      	mov	sp, r7
 800ebee:	bd90      	pop	{r4, r7, pc}
 800ebf0:	20000002 	.word	0x20000002
 800ebf4:	20000004 	.word	0x20000004

0800ebf8 <ExtFlash_SendByte>:

/*******************************************************************************
 SPI_FLASH_SendByte
*******************************************************************************/
char ExtFlash_SendByte(char byte)
{
 800ebf8:	b580      	push	{r7, lr}
 800ebfa:	b084      	sub	sp, #16
 800ebfc:	af00      	add	r7, sp, #0
 800ebfe:	4603      	mov	r3, r0
 800ec00:	71fb      	strb	r3, [r7, #7]
   char retbyte=0;
 800ec02:	2300      	movs	r3, #0
 800ec04:	73fb      	strb	r3, [r7, #15]
	Tout = 0;
 800ec06:	4b1d      	ldr	r3, [pc, #116]	; (800ec7c <ExtFlash_SendByte+0x84>)
 800ec08:	2200      	movs	r2, #0
 800ec0a:	601a      	str	r2, [r3, #0]
  while(HAL_SPI_GetState( &hspi2 ) != HAL_SPI_STATE_READY) /*SPI_I2S_GetFlagStatus(SPI2, SPI_I2S_FLAG_TXE) == RESET*/
 800ec0c:	e009      	b.n	800ec22 <ExtFlash_SendByte+0x2a>
  {
    if(Tout++ > TMAX)
 800ec0e:	4b1b      	ldr	r3, [pc, #108]	; (800ec7c <ExtFlash_SendByte+0x84>)
 800ec10:	681b      	ldr	r3, [r3, #0]
 800ec12:	1c5a      	adds	r2, r3, #1
 800ec14:	4919      	ldr	r1, [pc, #100]	; (800ec7c <ExtFlash_SendByte+0x84>)
 800ec16:	600a      	str	r2, [r1, #0]
 800ec18:	4a19      	ldr	r2, [pc, #100]	; (800ec80 <ExtFlash_SendByte+0x88>)
 800ec1a:	4293      	cmp	r3, r2
 800ec1c:	d901      	bls.n	800ec22 <ExtFlash_SendByte+0x2a>
    	return 255;
 800ec1e:	23ff      	movs	r3, #255	; 0xff
 800ec20:	e027      	b.n	800ec72 <ExtFlash_SendByte+0x7a>
  while(HAL_SPI_GetState( &hspi2 ) != HAL_SPI_STATE_READY) /*SPI_I2S_GetFlagStatus(SPI2, SPI_I2S_FLAG_TXE) == RESET*/
 800ec22:	4818      	ldr	r0, [pc, #96]	; (800ec84 <ExtFlash_SendByte+0x8c>)
 800ec24:	f00d ff5e 	bl	801cae4 <HAL_SPI_GetState>
 800ec28:	4603      	mov	r3, r0
 800ec2a:	2b01      	cmp	r3, #1
 800ec2c:	d1ef      	bne.n	800ec0e <ExtFlash_SendByte+0x16>
  }
  HAL_SPI_Transmit(&hspi2, (unsigned char*)&byte, 1, 1);// timeout 1 ms  SPI_I2S_SendData(SPI2, byte);
 800ec2e:	1df9      	adds	r1, r7, #7
 800ec30:	2301      	movs	r3, #1
 800ec32:	2201      	movs	r2, #1
 800ec34:	4813      	ldr	r0, [pc, #76]	; (800ec84 <ExtFlash_SendByte+0x8c>)
 800ec36:	f00d fa5c 	bl	801c0f2 <HAL_SPI_Transmit>
  Tout = 0;
 800ec3a:	4b10      	ldr	r3, [pc, #64]	; (800ec7c <ExtFlash_SendByte+0x84>)
 800ec3c:	2200      	movs	r2, #0
 800ec3e:	601a      	str	r2, [r3, #0]
  while(HAL_SPI_GetState( &hspi2 ) != HAL_SPI_STATE_READY) //  while(SPI_I2S_GetFlagStatus(SPI2, SPI_I2S_FLAG_RXNE) == RESET)
 800ec40:	e009      	b.n	800ec56 <ExtFlash_SendByte+0x5e>
  {
    if(Tout++ > TMAX)
 800ec42:	4b0e      	ldr	r3, [pc, #56]	; (800ec7c <ExtFlash_SendByte+0x84>)
 800ec44:	681b      	ldr	r3, [r3, #0]
 800ec46:	1c5a      	adds	r2, r3, #1
 800ec48:	490c      	ldr	r1, [pc, #48]	; (800ec7c <ExtFlash_SendByte+0x84>)
 800ec4a:	600a      	str	r2, [r1, #0]
 800ec4c:	4a0c      	ldr	r2, [pc, #48]	; (800ec80 <ExtFlash_SendByte+0x88>)
 800ec4e:	4293      	cmp	r3, r2
 800ec50:	d901      	bls.n	800ec56 <ExtFlash_SendByte+0x5e>
    	return 255;
 800ec52:	23ff      	movs	r3, #255	; 0xff
 800ec54:	e00d      	b.n	800ec72 <ExtFlash_SendByte+0x7a>
  while(HAL_SPI_GetState( &hspi2 ) != HAL_SPI_STATE_READY) //  while(SPI_I2S_GetFlagStatus(SPI2, SPI_I2S_FLAG_RXNE) == RESET)
 800ec56:	480b      	ldr	r0, [pc, #44]	; (800ec84 <ExtFlash_SendByte+0x8c>)
 800ec58:	f00d ff44 	bl	801cae4 <HAL_SPI_GetState>
 800ec5c:	4603      	mov	r3, r0
 800ec5e:	2b01      	cmp	r3, #1
 800ec60:	d1ef      	bne.n	800ec42 <ExtFlash_SendByte+0x4a>
  }
  HAL_SPI_Receive(&hspi2, (unsigned char*)&retbyte, 1, 1); //timeout 1 ms
 800ec62:	f107 010f 	add.w	r1, r7, #15
 800ec66:	2301      	movs	r3, #1
 800ec68:	2201      	movs	r2, #1
 800ec6a:	4806      	ldr	r0, [pc, #24]	; (800ec84 <ExtFlash_SendByte+0x8c>)
 800ec6c:	f00d fb7d 	bl	801c36a <HAL_SPI_Receive>
  return retbyte/*SPI_I2S_ReceiveData(SPI2)*/;
 800ec70:	7bfb      	ldrb	r3, [r7, #15]
}
 800ec72:	4618      	mov	r0, r3
 800ec74:	3710      	adds	r7, #16
 800ec76:	46bd      	mov	sp, r7
 800ec78:	bd80      	pop	{r7, pc}
 800ec7a:	bf00      	nop
 800ec7c:	200015d0 	.word	0x200015d0
 800ec80:	000186a0 	.word	0x000186a0
 800ec84:	20006890 	.word	0x20006890

0800ec88 <ExtFlash_WaitForWriteEnd>:

/*******************************************************************************
 SPI_FLASH_WaitForWriteEnd
*******************************************************************************/
void ExtFlash_WaitForWriteEnd(void)
{
 800ec88:	b580      	push	{r7, lr}
 800ec8a:	b082      	sub	sp, #8
 800ec8c:	af00      	add	r7, sp, #0
  char FLASH_Status = 0;
 800ec8e:	2300      	movs	r3, #0
 800ec90:	71fb      	strb	r3, [r7, #7]

  HAL_GPIO_WritePin(SS_GPIO_Port, SS_Pin, GPIO_PIN_RESET); //ExtFlash_CS_LOW();
 800ec92:	2200      	movs	r2, #0
 800ec94:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800ec98:	4812      	ldr	r0, [pc, #72]	; (800ece4 <ExtFlash_WaitForWriteEnd+0x5c>)
 800ec9a:	f00a ff25 	bl	8019ae8 <HAL_GPIO_WritePin>
  ExtFlash_SendByte(RDSR);
 800ec9e:	2005      	movs	r0, #5
 800eca0:	f7ff ffaa 	bl	800ebf8 <ExtFlash_SendByte>
  Tout = 0;
 800eca4:	4b10      	ldr	r3, [pc, #64]	; (800ece8 <ExtFlash_WaitForWriteEnd+0x60>)
 800eca6:	2200      	movs	r2, #0
 800eca8:	601a      	str	r2, [r3, #0]
  do
  {
	  FLASH_Status = ExtFlash_SendByte(Dummy_Byte);
 800ecaa:	20a5      	movs	r0, #165	; 0xa5
 800ecac:	f7ff ffa4 	bl	800ebf8 <ExtFlash_SendByte>
 800ecb0:	4603      	mov	r3, r0
 800ecb2:	71fb      	strb	r3, [r7, #7]
      if(Tout++ > TMAX)
 800ecb4:	4b0c      	ldr	r3, [pc, #48]	; (800ece8 <ExtFlash_WaitForWriteEnd+0x60>)
 800ecb6:	681b      	ldr	r3, [r3, #0]
 800ecb8:	1c5a      	adds	r2, r3, #1
 800ecba:	490b      	ldr	r1, [pc, #44]	; (800ece8 <ExtFlash_WaitForWriteEnd+0x60>)
 800ecbc:	600a      	str	r2, [r1, #0]
 800ecbe:	4a0b      	ldr	r2, [pc, #44]	; (800ecec <ExtFlash_WaitForWriteEnd+0x64>)
 800ecc0:	4293      	cmp	r3, r2
 800ecc2:	d80b      	bhi.n	800ecdc <ExtFlash_WaitForWriteEnd+0x54>
    	  return;
  }
  while((FLASH_Status & WIP_Flag) == SET);              // Write in progress
 800ecc4:	79fb      	ldrb	r3, [r7, #7]
 800ecc6:	f003 0301 	and.w	r3, r3, #1
 800ecca:	2b00      	cmp	r3, #0
 800eccc:	d1ed      	bne.n	800ecaa <ExtFlash_WaitForWriteEnd+0x22>
  HAL_GPIO_WritePin(SS_GPIO_Port, SS_Pin, GPIO_PIN_SET);
 800ecce:	2201      	movs	r2, #1
 800ecd0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800ecd4:	4803      	ldr	r0, [pc, #12]	; (800ece4 <ExtFlash_WaitForWriteEnd+0x5c>)
 800ecd6:	f00a ff07 	bl	8019ae8 <HAL_GPIO_WritePin>
 800ecda:	e000      	b.n	800ecde <ExtFlash_WaitForWriteEnd+0x56>
    	  return;
 800ecdc:	bf00      	nop
}
 800ecde:	3708      	adds	r7, #8
 800ece0:	46bd      	mov	sp, r7
 800ece2:	bd80      	pop	{r7, pc}
 800ece4:	40020400 	.word	0x40020400
 800ece8:	200015d0 	.word	0x200015d0
 800ecec:	000186a0 	.word	0x000186a0

0800ecf0 <ExtFlash_PageRD>:

/*******************************************************************************
 SPI_FLASH_BufferRead
*******************************************************************************/
void ExtFlash_PageRD(char* pBuffer, unsigned ReadAddr, short Length)
{
 800ecf0:	b580      	push	{r7, lr}
 800ecf2:	b084      	sub	sp, #16
 800ecf4:	af00      	add	r7, sp, #0
 800ecf6:	60f8      	str	r0, [r7, #12]
 800ecf8:	60b9      	str	r1, [r7, #8]
 800ecfa:	4613      	mov	r3, r2
 800ecfc:	80fb      	strh	r3, [r7, #6]
  HAL_GPIO_WritePin(SS_GPIO_Port, SS_Pin, GPIO_PIN_SET); //ExtFlash_CS_HIGH();
 800ecfe:	2201      	movs	r2, #1
 800ed00:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800ed04:	481d      	ldr	r0, [pc, #116]	; (800ed7c <ExtFlash_PageRD+0x8c>)
 800ed06:	f00a feef 	bl	8019ae8 <HAL_GPIO_WritePin>
  ExtFlash_WaitForWriteEnd();
 800ed0a:	f7ff ffbd 	bl	800ec88 <ExtFlash_WaitForWriteEnd>
  HAL_GPIO_WritePin(SS_GPIO_Port, SS_Pin, GPIO_PIN_RESET); //ExtFlash_CS_LOW();
 800ed0e:	2200      	movs	r2, #0
 800ed10:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800ed14:	4819      	ldr	r0, [pc, #100]	; (800ed7c <ExtFlash_PageRD+0x8c>)
 800ed16:	f00a fee7 	bl	8019ae8 <HAL_GPIO_WritePin>
  ExtFlash_SendByte(READ);
 800ed1a:	2003      	movs	r0, #3
 800ed1c:	f7ff ff6c 	bl	800ebf8 <ExtFlash_SendByte>
  ExtFlash_SendByte((ReadAddr & 0xFF0000) >> 16);
 800ed20:	68bb      	ldr	r3, [r7, #8]
 800ed22:	0c1b      	lsrs	r3, r3, #16
 800ed24:	b2db      	uxtb	r3, r3
 800ed26:	4618      	mov	r0, r3
 800ed28:	f7ff ff66 	bl	800ebf8 <ExtFlash_SendByte>
  ExtFlash_SendByte((ReadAddr& 0xFF00) >> 8);
 800ed2c:	68bb      	ldr	r3, [r7, #8]
 800ed2e:	0a1b      	lsrs	r3, r3, #8
 800ed30:	b2db      	uxtb	r3, r3
 800ed32:	4618      	mov	r0, r3
 800ed34:	f7ff ff60 	bl	800ebf8 <ExtFlash_SendByte>
  ExtFlash_SendByte(ReadAddr & 0xFF);
 800ed38:	68bb      	ldr	r3, [r7, #8]
 800ed3a:	b2db      	uxtb	r3, r3
 800ed3c:	4618      	mov	r0, r3
 800ed3e:	f7ff ff5b 	bl	800ebf8 <ExtFlash_SendByte>

  while(Length--)
 800ed42:	e009      	b.n	800ed58 <ExtFlash_PageRD+0x68>
  { // while there is data to be read
    *pBuffer = (ExtFlash_SendByte(Dummy_Byte));
 800ed44:	20a5      	movs	r0, #165	; 0xa5
 800ed46:	f7ff ff57 	bl	800ebf8 <ExtFlash_SendByte>
 800ed4a:	4603      	mov	r3, r0
 800ed4c:	461a      	mov	r2, r3
 800ed4e:	68fb      	ldr	r3, [r7, #12]
 800ed50:	701a      	strb	r2, [r3, #0]
    pBuffer++;
 800ed52:	68fb      	ldr	r3, [r7, #12]
 800ed54:	3301      	adds	r3, #1
 800ed56:	60fb      	str	r3, [r7, #12]
  while(Length--)
 800ed58:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800ed5c:	b29a      	uxth	r2, r3
 800ed5e:	3a01      	subs	r2, #1
 800ed60:	b292      	uxth	r2, r2
 800ed62:	80fa      	strh	r2, [r7, #6]
 800ed64:	2b00      	cmp	r3, #0
 800ed66:	d1ed      	bne.n	800ed44 <ExtFlash_PageRD+0x54>
  }
  HAL_GPIO_WritePin(SS_GPIO_Port, SS_Pin, GPIO_PIN_SET);
 800ed68:	2201      	movs	r2, #1
 800ed6a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800ed6e:	4803      	ldr	r0, [pc, #12]	; (800ed7c <ExtFlash_PageRD+0x8c>)
 800ed70:	f00a feba 	bl	8019ae8 <HAL_GPIO_WritePin>
}
 800ed74:	bf00      	nop
 800ed76:	3710      	adds	r7, #16
 800ed78:	46bd      	mov	sp, r7
 800ed7a:	bd80      	pop	{r7, pc}
 800ed7c:	40020400 	.word	0x40020400

0800ed80 <ExtFlash_WriteEnable>:

/*******************************************************************************
 SPI_FLASH_WriteEnable
*******************************************************************************/
void ExtFlash_WriteEnable(void)
{
 800ed80:	b580      	push	{r7, lr}
 800ed82:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(SS_GPIO_Port, SS_Pin, GPIO_PIN_RESET); //ExtFlash_CS_LOW();
 800ed84:	2200      	movs	r2, #0
 800ed86:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800ed8a:	4807      	ldr	r0, [pc, #28]	; (800eda8 <ExtFlash_WriteEnable+0x28>)
 800ed8c:	f00a feac 	bl	8019ae8 <HAL_GPIO_WritePin>
  ExtFlash_SendByte(WREN);
 800ed90:	2006      	movs	r0, #6
 800ed92:	f7ff ff31 	bl	800ebf8 <ExtFlash_SendByte>
  HAL_GPIO_WritePin(SS_GPIO_Port, SS_Pin, GPIO_PIN_SET); //ExtFlash_CS_HIGH();
 800ed96:	2201      	movs	r2, #1
 800ed98:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800ed9c:	4802      	ldr	r0, [pc, #8]	; (800eda8 <ExtFlash_WriteEnable+0x28>)
 800ed9e:	f00a fea3 	bl	8019ae8 <HAL_GPIO_WritePin>
}
 800eda2:	bf00      	nop
 800eda4:	bd80      	pop	{r7, pc}
 800eda6:	bf00      	nop
 800eda8:	40020400 	.word	0x40020400

0800edac <ExtFlash_PageProg>:

/*******************************************************************************
 дFLASHҳ(256 Bytes)�� Mode=0: ��0��1���ݸ�д   Mode=1: ������д
*******************************************************************************/
void ExtFlash_PageProg(char* pBuffer, unsigned WriteAddr)
{
 800edac:	b580      	push	{r7, lr}
 800edae:	b084      	sub	sp, #16
 800edb0:	af00      	add	r7, sp, #0
 800edb2:	6078      	str	r0, [r7, #4]
 800edb4:	6039      	str	r1, [r7, #0]
  short   Lenght = 256;
 800edb6:	f44f 7380 	mov.w	r3, #256	; 0x100
 800edba:	81fb      	strh	r3, [r7, #14]

  HAL_GPIO_WritePin(SS_GPIO_Port, SS_Pin, GPIO_PIN_SET); //ExtFlash_CS_HIGH();
 800edbc:	2201      	movs	r2, #1
 800edbe:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800edc2:	481f      	ldr	r0, [pc, #124]	; (800ee40 <ExtFlash_PageProg+0x94>)
 800edc4:	f00a fe90 	bl	8019ae8 <HAL_GPIO_WritePin>
  ExtFlash_WaitForWriteEnd();
 800edc8:	f7ff ff5e 	bl	800ec88 <ExtFlash_WaitForWriteEnd>
  ExtFlash_WriteEnable();
 800edcc:	f7ff ffd8 	bl	800ed80 <ExtFlash_WriteEnable>
  HAL_GPIO_WritePin(SS_GPIO_Port, SS_Pin, GPIO_PIN_RESET); //ExtFlash_CS_LOW();
 800edd0:	2200      	movs	r2, #0
 800edd2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800edd6:	481a      	ldr	r0, [pc, #104]	; (800ee40 <ExtFlash_PageProg+0x94>)
 800edd8:	f00a fe86 	bl	8019ae8 <HAL_GPIO_WritePin>
  ExtFlash_SendByte(PP);
 800eddc:	2002      	movs	r0, #2
 800edde:	f7ff ff0b 	bl	800ebf8 <ExtFlash_SendByte>
  ExtFlash_SendByte((WriteAddr & 0xFF0000) >> 16);
 800ede2:	683b      	ldr	r3, [r7, #0]
 800ede4:	0c1b      	lsrs	r3, r3, #16
 800ede6:	b2db      	uxtb	r3, r3
 800ede8:	4618      	mov	r0, r3
 800edea:	f7ff ff05 	bl	800ebf8 <ExtFlash_SendByte>
  ExtFlash_SendByte((WriteAddr & 0xFF00) >> 8);
 800edee:	683b      	ldr	r3, [r7, #0]
 800edf0:	0a1b      	lsrs	r3, r3, #8
 800edf2:	b2db      	uxtb	r3, r3
 800edf4:	4618      	mov	r0, r3
 800edf6:	f7ff feff 	bl	800ebf8 <ExtFlash_SendByte>
  ExtFlash_SendByte(WriteAddr & 0xFF);
 800edfa:	683b      	ldr	r3, [r7, #0]
 800edfc:	b2db      	uxtb	r3, r3
 800edfe:	4618      	mov	r0, r3
 800ee00:	f7ff fefa 	bl	800ebf8 <ExtFlash_SendByte>
  while(Lenght--) {
 800ee04:	e007      	b.n	800ee16 <ExtFlash_PageProg+0x6a>
    ExtFlash_SendByte((*pBuffer));
 800ee06:	687b      	ldr	r3, [r7, #4]
 800ee08:	781b      	ldrb	r3, [r3, #0]
 800ee0a:	4618      	mov	r0, r3
 800ee0c:	f7ff fef4 	bl	800ebf8 <ExtFlash_SendByte>
    pBuffer++;
 800ee10:	687b      	ldr	r3, [r7, #4]
 800ee12:	3301      	adds	r3, #1
 800ee14:	607b      	str	r3, [r7, #4]
  while(Lenght--) {
 800ee16:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800ee1a:	b29a      	uxth	r2, r3
 800ee1c:	3a01      	subs	r2, #1
 800ee1e:	b292      	uxth	r2, r2
 800ee20:	81fa      	strh	r2, [r7, #14]
 800ee22:	2b00      	cmp	r3, #0
 800ee24:	d1ef      	bne.n	800ee06 <ExtFlash_PageProg+0x5a>
  }
  HAL_GPIO_WritePin(SS_GPIO_Port, SS_Pin, GPIO_PIN_SET); //ExtFlash_CS_HIGH();
 800ee26:	2201      	movs	r2, #1
 800ee28:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800ee2c:	4804      	ldr	r0, [pc, #16]	; (800ee40 <ExtFlash_PageProg+0x94>)
 800ee2e:	f00a fe5b 	bl	8019ae8 <HAL_GPIO_WritePin>
  ExtFlash_WaitForWriteEnd();
 800ee32:	f7ff ff29 	bl	800ec88 <ExtFlash_WaitForWriteEnd>
}
 800ee36:	bf00      	nop
 800ee38:	3710      	adds	r7, #16
 800ee3a:	46bd      	mov	sp, r7
 800ee3c:	bd80      	pop	{r7, pc}
 800ee3e:	bf00      	nop
 800ee40:	40020400 	.word	0x40020400

0800ee44 <ExtFLASH_SectorErase>:

/*******************************************************************************
 SPI_FLASH_SectorErase  : Sector Erases the specified FLASH Page.(4k/sector)
*******************************************************************************/
void ExtFLASH_SectorErase(unsigned SectorAddr)
{
 800ee44:	b580      	push	{r7, lr}
 800ee46:	b082      	sub	sp, #8
 800ee48:	af00      	add	r7, sp, #0
 800ee4a:	6078      	str	r0, [r7, #4]
    ExtFlash_WriteEnable();
 800ee4c:	f7ff ff98 	bl	800ed80 <ExtFlash_WriteEnable>
    HAL_GPIO_WritePin(SS_GPIO_Port, SS_Pin, GPIO_PIN_RESET); //ExtFlash_CS_LOW();
 800ee50:	2200      	movs	r2, #0
 800ee52:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800ee56:	4811      	ldr	r0, [pc, #68]	; (800ee9c <ExtFLASH_SectorErase+0x58>)
 800ee58:	f00a fe46 	bl	8019ae8 <HAL_GPIO_WritePin>
    ExtFlash_SendByte(SE);
 800ee5c:	2020      	movs	r0, #32
 800ee5e:	f7ff fecb 	bl	800ebf8 <ExtFlash_SendByte>
    ExtFlash_SendByte((SectorAddr & 0xFF0000) >> 16);   //Send high address byte
 800ee62:	687b      	ldr	r3, [r7, #4]
 800ee64:	0c1b      	lsrs	r3, r3, #16
 800ee66:	b2db      	uxtb	r3, r3
 800ee68:	4618      	mov	r0, r3
 800ee6a:	f7ff fec5 	bl	800ebf8 <ExtFlash_SendByte>
    ExtFlash_SendByte((SectorAddr & 0xFF00) >> 8);      //Send medium address byte
 800ee6e:	687b      	ldr	r3, [r7, #4]
 800ee70:	0a1b      	lsrs	r3, r3, #8
 800ee72:	b2db      	uxtb	r3, r3
 800ee74:	4618      	mov	r0, r3
 800ee76:	f7ff febf 	bl	800ebf8 <ExtFlash_SendByte>
    ExtFlash_SendByte(SectorAddr & 0xFF);               //Send low address byte */
 800ee7a:	687b      	ldr	r3, [r7, #4]
 800ee7c:	b2db      	uxtb	r3, r3
 800ee7e:	4618      	mov	r0, r3
 800ee80:	f7ff feba 	bl	800ebf8 <ExtFlash_SendByte>
    HAL_GPIO_WritePin(SS_GPIO_Port, SS_Pin, GPIO_PIN_SET); //ExtFlash_CS_HIGH();
 800ee84:	2201      	movs	r2, #1
 800ee86:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800ee8a:	4804      	ldr	r0, [pc, #16]	; (800ee9c <ExtFLASH_SectorErase+0x58>)
 800ee8c:	f00a fe2c 	bl	8019ae8 <HAL_GPIO_WritePin>
    ExtFlash_WaitForWriteEnd();                         // Wait the end of Flash writing
 800ee90:	f7ff fefa 	bl	800ec88 <ExtFlash_WaitForWriteEnd>
}
 800ee94:	bf00      	nop
 800ee96:	3708      	adds	r7, #8
 800ee98:	46bd      	mov	sp, r7
 800ee9a:	bd80      	pop	{r7, pc}
 800ee9c:	40020400 	.word	0x40020400

0800eea0 <ExtFlash_PageWR>:

void ExtFlash_PageWR(char* pBuffer, unsigned WriteAddr)
{
 800eea0:	b580      	push	{r7, lr}
 800eea2:	b0c8      	sub	sp, #288	; 0x120
 800eea4:	af00      	add	r7, sp, #0
 800eea6:	1d3b      	adds	r3, r7, #4
 800eea8:	6018      	str	r0, [r3, #0]
 800eeaa:	463b      	mov	r3, r7
 800eeac:	6019      	str	r1, [r3, #0]
  unsigned addr,i,j;
  char* ptr;
  char  page=0,flag=0;
 800eeae:	2300      	movs	r3, #0
 800eeb0:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 800eeb4:	2300      	movs	r3, #0
 800eeb6:	f887 310e 	strb.w	r3, [r7, #270]	; 0x10e
  char  buffer[256];

  flag=0;
 800eeba:	2300      	movs	r3, #0
 800eebc:	f887 310e 	strb.w	r3, [r7, #270]	; 0x10e
    addr=WriteAddr & 0xFFF000;
 800eec0:	463b      	mov	r3, r7
 800eec2:	681a      	ldr	r2, [r3, #0]
 800eec4:	4b3b      	ldr	r3, [pc, #236]	; (800efb4 <ExtFlash_PageWR+0x114>)
 800eec6:	4013      	ands	r3, r2
 800eec8:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
    page=16;
 800eecc:	2310      	movs	r3, #16
 800eece:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
  while(page>0)
 800eed2:	e02e      	b.n	800ef32 <ExtFlash_PageWR+0x92>
  {
    ExtFlash_PageRD((char*)&buffer,addr, 256);
 800eed4:	f107 030c 	add.w	r3, r7, #12
 800eed8:	f44f 7280 	mov.w	r2, #256	; 0x100
 800eedc:	f8d7 111c 	ldr.w	r1, [r7, #284]	; 0x11c
 800eee0:	4618      	mov	r0, r3
 800eee2:	f7ff ff05 	bl	800ecf0 <ExtFlash_PageRD>
    for(j=0;j<255;j++){
 800eee6:	2300      	movs	r3, #0
 800eee8:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 800eeec:	e012      	b.n	800ef14 <ExtFlash_PageWR+0x74>
      if(buffer[j++]!=0xff){
 800eeee:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800eef2:	1c5a      	adds	r2, r3, #1
 800eef4:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
 800eef8:	f107 020c 	add.w	r2, r7, #12
 800eefc:	5cd3      	ldrb	r3, [r2, r3]
 800eefe:	2bff      	cmp	r3, #255	; 0xff
 800ef00:	d003      	beq.n	800ef0a <ExtFlash_PageWR+0x6a>
        flag=1;
 800ef02:	2301      	movs	r3, #1
 800ef04:	f887 310e 	strb.w	r3, [r7, #270]	; 0x10e
        break;
 800ef08:	e008      	b.n	800ef1c <ExtFlash_PageWR+0x7c>
    for(j=0;j<255;j++){
 800ef0a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ef0e:	3301      	adds	r3, #1
 800ef10:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 800ef14:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ef18:	2bfe      	cmp	r3, #254	; 0xfe
 800ef1a:	d9e8      	bls.n	800eeee <ExtFlash_PageWR+0x4e>
      }
    }
    addr+=256;
 800ef1c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800ef20:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800ef24:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
    page--;
 800ef28:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 800ef2c:	3b01      	subs	r3, #1
 800ef2e:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
  while(page>0)
 800ef32:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 800ef36:	2b00      	cmp	r3, #0
 800ef38:	d1cc      	bne.n	800eed4 <ExtFlash_PageWR+0x34>
  }
    page=16;
 800ef3a:	2310      	movs	r3, #16
 800ef3c:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
    addr=WriteAddr & 0xFFF000;
 800ef40:	463b      	mov	r3, r7
 800ef42:	681a      	ldr	r2, [r3, #0]
 800ef44:	4b1b      	ldr	r3, [pc, #108]	; (800efb4 <ExtFlash_PageWR+0x114>)
 800ef46:	4013      	ands	r3, r2
 800ef48:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
    if(flag==1)ExtFLASH_SectorErase(addr);
 800ef4c:	f897 310e 	ldrb.w	r3, [r7, #270]	; 0x10e
 800ef50:	2b01      	cmp	r3, #1
 800ef52:	d103      	bne.n	800ef5c <ExtFlash_PageWR+0xbc>
 800ef54:	f8d7 011c 	ldr.w	r0, [r7, #284]	; 0x11c
 800ef58:	f7ff ff74 	bl	800ee44 <ExtFLASH_SectorErase>
  ptr=pBuffer;
 800ef5c:	1d3b      	adds	r3, r7, #4
 800ef5e:	681b      	ldr	r3, [r3, #0]
 800ef60:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  for(i=0;i<page;i++){
 800ef64:	2300      	movs	r3, #0
 800ef66:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 800ef6a:	e016      	b.n	800ef9a <ExtFlash_PageWR+0xfa>
    ExtFlash_PageProg(ptr, addr);
 800ef6c:	f8d7 111c 	ldr.w	r1, [r7, #284]	; 0x11c
 800ef70:	f8d7 0110 	ldr.w	r0, [r7, #272]	; 0x110
 800ef74:	f7ff ff1a 	bl	800edac <ExtFlash_PageProg>
    addr+=256;
 800ef78:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800ef7c:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800ef80:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
    ptr+=256;
 800ef84:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800ef88:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800ef8c:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  for(i=0;i<page;i++){
 800ef90:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800ef94:	3301      	adds	r3, #1
 800ef96:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 800ef9a:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 800ef9e:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 800efa2:	429a      	cmp	r2, r3
 800efa4:	d3e2      	bcc.n	800ef6c <ExtFlash_PageWR+0xcc>
  }
}
 800efa6:	bf00      	nop
 800efa8:	bf00      	nop
 800efaa:	f507 7790 	add.w	r7, r7, #288	; 0x120
 800efae:	46bd      	mov	sp, r7
 800efb0:	bd80      	pop	{r7, pc}
 800efb2:	bf00      	nop
 800efb4:	00fff000 	.word	0x00fff000

0800efb8 <ReadDiskData>:
 800efb8:	b580      	push	{r7, lr}
 800efba:	b086      	sub	sp, #24
 800efbc:	af00      	add	r7, sp, #0
 800efbe:	60f8      	str	r0, [r7, #12]
 800efc0:	60b9      	str	r1, [r7, #8]
 800efc2:	4613      	mov	r3, r2
 800efc4:	80fb      	strh	r3, [r7, #6]
 800efc6:	2300      	movs	r3, #0
 800efc8:	75fb      	strb	r3, [r7, #23]
 800efca:	4b0d      	ldr	r3, [pc, #52]	; (800f000 <ReadDiskData+0x48>)
 800efcc:	2200      	movs	r2, #0
 800efce:	701a      	strb	r2, [r3, #0]
 800efd0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800efd4:	461a      	mov	r2, r3
 800efd6:	68b9      	ldr	r1, [r7, #8]
 800efd8:	68f8      	ldr	r0, [r7, #12]
 800efda:	f7ff fe89 	bl	800ecf0 <ExtFlash_PageRD>
 800efde:	7dfb      	ldrb	r3, [r7, #23]
 800efe0:	1c5a      	adds	r2, r3, #1
 800efe2:	75fa      	strb	r2, [r7, #23]
 800efe4:	2b06      	cmp	r3, #6
 800efe6:	d901      	bls.n	800efec <ReadDiskData+0x34>
 800efe8:	2301      	movs	r3, #1
 800efea:	e004      	b.n	800eff6 <ReadDiskData+0x3e>
 800efec:	4b04      	ldr	r3, [pc, #16]	; (800f000 <ReadDiskData+0x48>)
 800efee:	781b      	ldrb	r3, [r3, #0]
 800eff0:	2b00      	cmp	r3, #0
 800eff2:	d1ea      	bne.n	800efca <ReadDiskData+0x12>
 800eff4:	2300      	movs	r3, #0
 800eff6:	4618      	mov	r0, r3
 800eff8:	3718      	adds	r7, #24
 800effa:	46bd      	mov	sp, r7
 800effc:	bd80      	pop	{r7, pc}
 800effe:	bf00      	nop
 800f000:	2000078f 	.word	0x2000078f

0800f004 <OpenFileRd>:
 800f004:	b580      	push	{r7, lr}
 800f006:	b086      	sub	sp, #24
 800f008:	af00      	add	r7, sp, #0
 800f00a:	60f8      	str	r0, [r7, #12]
 800f00c:	60b9      	str	r1, [r7, #8]
 800f00e:	607a      	str	r2, [r7, #4]
 800f010:	603b      	str	r3, [r7, #0]
 800f012:	687b      	ldr	r3, [r7, #4]
 800f014:	2200      	movs	r2, #0
 800f016:	801a      	strh	r2, [r3, #0]
 800f018:	4b35      	ldr	r3, [pc, #212]	; (800f0f0 <OpenFileRd+0xec>)
 800f01a:	689a      	ldr	r2, [r3, #8]
 800f01c:	683b      	ldr	r3, [r7, #0]
 800f01e:	601a      	str	r2, [r3, #0]
 800f020:	e05b      	b.n	800f0da <OpenFileRd+0xd6>
 800f022:	683b      	ldr	r3, [r7, #0]
 800f024:	681b      	ldr	r3, [r3, #0]
 800f026:	4a32      	ldr	r2, [pc, #200]	; (800f0f0 <OpenFileRd+0xec>)
 800f028:	6952      	ldr	r2, [r2, #20]
 800f02a:	b212      	sxth	r2, r2
 800f02c:	4619      	mov	r1, r3
 800f02e:	68f8      	ldr	r0, [r7, #12]
 800f030:	f7ff ffc2 	bl	800efb8 <ReadDiskData>
 800f034:	4603      	mov	r3, r0
 800f036:	2b00      	cmp	r3, #0
 800f038:	d001      	beq.n	800f03e <OpenFileRd+0x3a>
 800f03a:	2301      	movs	r3, #1
 800f03c:	e054      	b.n	800f0e8 <OpenFileRd+0xe4>
 800f03e:	2300      	movs	r3, #0
 800f040:	82bb      	strh	r3, [r7, #20]
 800f042:	e044      	b.n	800f0ce <OpenFileRd+0xca>
 800f044:	2300      	movs	r3, #0
 800f046:	82fb      	strh	r3, [r7, #22]
 800f048:	e031      	b.n	800f0ae <OpenFileRd+0xaa>
 800f04a:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 800f04e:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800f052:	4413      	add	r3, r2
 800f054:	461a      	mov	r2, r3
 800f056:	68fb      	ldr	r3, [r7, #12]
 800f058:	4413      	add	r3, r2
 800f05a:	781b      	ldrb	r3, [r3, #0]
 800f05c:	2b00      	cmp	r3, #0
 800f05e:	d01e      	beq.n	800f09e <OpenFileRd+0x9a>
 800f060:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 800f064:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800f068:	4413      	add	r3, r2
 800f06a:	461a      	mov	r2, r3
 800f06c:	68fb      	ldr	r3, [r7, #12]
 800f06e:	4413      	add	r3, r2
 800f070:	781a      	ldrb	r2, [r3, #0]
 800f072:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800f076:	68b9      	ldr	r1, [r7, #8]
 800f078:	440b      	add	r3, r1
 800f07a:	781b      	ldrb	r3, [r3, #0]
 800f07c:	429a      	cmp	r2, r3
 800f07e:	d11b      	bne.n	800f0b8 <OpenFileRd+0xb4>
 800f080:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800f084:	2b0a      	cmp	r3, #10
 800f086:	d10c      	bne.n	800f0a2 <OpenFileRd+0x9e>
 800f088:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800f08c:	331a      	adds	r3, #26
 800f08e:	68fa      	ldr	r2, [r7, #12]
 800f090:	4413      	add	r3, r2
 800f092:	f9b3 2000 	ldrsh.w	r2, [r3]
 800f096:	687b      	ldr	r3, [r7, #4]
 800f098:	801a      	strh	r2, [r3, #0]
 800f09a:	2300      	movs	r3, #0
 800f09c:	e024      	b.n	800f0e8 <OpenFileRd+0xe4>
 800f09e:	2304      	movs	r3, #4
 800f0a0:	e022      	b.n	800f0e8 <OpenFileRd+0xe4>
 800f0a2:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800f0a6:	b29b      	uxth	r3, r3
 800f0a8:	3301      	adds	r3, #1
 800f0aa:	b29b      	uxth	r3, r3
 800f0ac:	82fb      	strh	r3, [r7, #22]
 800f0ae:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800f0b2:	2b0a      	cmp	r3, #10
 800f0b4:	ddc9      	ble.n	800f04a <OpenFileRd+0x46>
 800f0b6:	e000      	b.n	800f0ba <OpenFileRd+0xb6>
 800f0b8:	bf00      	nop
 800f0ba:	683b      	ldr	r3, [r7, #0]
 800f0bc:	681b      	ldr	r3, [r3, #0]
 800f0be:	f103 0220 	add.w	r2, r3, #32
 800f0c2:	683b      	ldr	r3, [r7, #0]
 800f0c4:	601a      	str	r2, [r3, #0]
 800f0c6:	8abb      	ldrh	r3, [r7, #20]
 800f0c8:	3320      	adds	r3, #32
 800f0ca:	b29b      	uxth	r3, r3
 800f0cc:	82bb      	strh	r3, [r7, #20]
 800f0ce:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 800f0d2:	4b07      	ldr	r3, [pc, #28]	; (800f0f0 <OpenFileRd+0xec>)
 800f0d4:	695b      	ldr	r3, [r3, #20]
 800f0d6:	429a      	cmp	r2, r3
 800f0d8:	d3b4      	bcc.n	800f044 <OpenFileRd+0x40>
 800f0da:	683b      	ldr	r3, [r7, #0]
 800f0dc:	681a      	ldr	r2, [r3, #0]
 800f0de:	4b04      	ldr	r3, [pc, #16]	; (800f0f0 <OpenFileRd+0xec>)
 800f0e0:	68db      	ldr	r3, [r3, #12]
 800f0e2:	429a      	cmp	r2, r3
 800f0e4:	d39d      	bcc.n	800f022 <OpenFileRd+0x1e>
 800f0e6:	2303      	movs	r3, #3
 800f0e8:	4618      	mov	r0, r3
 800f0ea:	3718      	adds	r7, #24
 800f0ec:	46bd      	mov	sp, r7
 800f0ee:	bd80      	pop	{r7, pc}
 800f0f0:	20000194 	.word	0x20000194

0800f0f4 <ProgDiskPage>:
 800f0f4:	b580      	push	{r7, lr}
 800f0f6:	b084      	sub	sp, #16
 800f0f8:	af00      	add	r7, sp, #0
 800f0fa:	6078      	str	r0, [r7, #4]
 800f0fc:	6039      	str	r1, [r7, #0]
 800f0fe:	2300      	movs	r3, #0
 800f100:	73fb      	strb	r3, [r7, #15]
 800f102:	4b0c      	ldr	r3, [pc, #48]	; (800f134 <ProgDiskPage+0x40>)
 800f104:	2200      	movs	r2, #0
 800f106:	701a      	strb	r2, [r3, #0]
 800f108:	683b      	ldr	r3, [r7, #0]
 800f10a:	4619      	mov	r1, r3
 800f10c:	6878      	ldr	r0, [r7, #4]
 800f10e:	f7ff fec7 	bl	800eea0 <ExtFlash_PageWR>
 800f112:	7bfb      	ldrb	r3, [r7, #15]
 800f114:	1c5a      	adds	r2, r3, #1
 800f116:	73fa      	strb	r2, [r7, #15]
 800f118:	2b06      	cmp	r3, #6
 800f11a:	d901      	bls.n	800f120 <ProgDiskPage+0x2c>
 800f11c:	2301      	movs	r3, #1
 800f11e:	e004      	b.n	800f12a <ProgDiskPage+0x36>
 800f120:	4b04      	ldr	r3, [pc, #16]	; (800f134 <ProgDiskPage+0x40>)
 800f122:	781b      	ldrb	r3, [r3, #0]
 800f124:	2b00      	cmp	r3, #0
 800f126:	d1ec      	bne.n	800f102 <ProgDiskPage+0xe>
 800f128:	2300      	movs	r3, #0
 800f12a:	4618      	mov	r0, r3
 800f12c:	3710      	adds	r7, #16
 800f12e:	46bd      	mov	sp, r7
 800f130:	bd80      	pop	{r7, pc}
 800f132:	bf00      	nop
 800f134:	2000078f 	.word	0x2000078f

0800f138 <SeekBlank>:
 800f138:	b580      	push	{r7, lr}
 800f13a:	b084      	sub	sp, #16
 800f13c:	af00      	add	r7, sp, #0
 800f13e:	6078      	str	r0, [r7, #4]
 800f140:	6039      	str	r1, [r7, #0]
 800f142:	2301      	movs	r3, #1
 800f144:	73fb      	strb	r3, [r7, #15]
 800f146:	683b      	ldr	r3, [r7, #0]
 800f148:	3302      	adds	r3, #2
 800f14a:	683a      	ldr	r2, [r7, #0]
 800f14c:	f9b2 2000 	ldrsh.w	r2, [r2]
 800f150:	801a      	strh	r2, [r3, #0]
 800f152:	683b      	ldr	r3, [r7, #0]
 800f154:	2200      	movs	r2, #0
 800f156:	801a      	strh	r2, [r3, #0]
 800f158:	e05b      	b.n	800f212 <SeekBlank+0xda>
 800f15a:	4b34      	ldr	r3, [pc, #208]	; (800f22c <SeekBlank+0xf4>)
 800f15c:	681b      	ldr	r3, [r3, #0]
 800f15e:	683a      	ldr	r2, [r7, #0]
 800f160:	f9b2 2000 	ldrsh.w	r2, [r2]
 800f164:	441a      	add	r2, r3
 800f166:	683b      	ldr	r3, [r7, #0]
 800f168:	f9b3 3000 	ldrsh.w	r3, [r3]
 800f16c:	0fd9      	lsrs	r1, r3, #31
 800f16e:	440b      	add	r3, r1
 800f170:	105b      	asrs	r3, r3, #1
 800f172:	b21b      	sxth	r3, r3
 800f174:	18d1      	adds	r1, r2, r3
 800f176:	f107 0308 	add.w	r3, r7, #8
 800f17a:	2202      	movs	r2, #2
 800f17c:	4618      	mov	r0, r3
 800f17e:	f7ff ff1b 	bl	800efb8 <ReadDiskData>
 800f182:	4603      	mov	r3, r0
 800f184:	2b00      	cmp	r3, #0
 800f186:	d001      	beq.n	800f18c <SeekBlank+0x54>
 800f188:	2301      	movs	r3, #1
 800f18a:	e04a      	b.n	800f222 <SeekBlank+0xea>
 800f18c:	683b      	ldr	r3, [r7, #0]
 800f18e:	f9b3 3000 	ldrsh.w	r3, [r3]
 800f192:	b29b      	uxth	r3, r3
 800f194:	f003 0301 	and.w	r3, r3, #1
 800f198:	2b00      	cmp	r3, #0
 800f19a:	d006      	beq.n	800f1aa <SeekBlank+0x72>
 800f19c:	f107 0308 	add.w	r3, r7, #8
 800f1a0:	f9b3 3000 	ldrsh.w	r3, [r3]
 800f1a4:	111b      	asrs	r3, r3, #4
 800f1a6:	b21b      	sxth	r3, r3
 800f1a8:	e006      	b.n	800f1b8 <SeekBlank+0x80>
 800f1aa:	f107 0308 	add.w	r3, r7, #8
 800f1ae:	f9b3 3000 	ldrsh.w	r3, [r3]
 800f1b2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800f1b6:	b21b      	sxth	r3, r3
 800f1b8:	81bb      	strh	r3, [r7, #12]
 800f1ba:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800f1be:	2b00      	cmp	r3, #0
 800f1c0:	d10f      	bne.n	800f1e2 <SeekBlank+0xaa>
 800f1c2:	7bfb      	ldrb	r3, [r7, #15]
 800f1c4:	2b00      	cmp	r3, #0
 800f1c6:	d10c      	bne.n	800f1e2 <SeekBlank+0xaa>
 800f1c8:	683b      	ldr	r3, [r7, #0]
 800f1ca:	f9b3 2000 	ldrsh.w	r2, [r3]
 800f1ce:	683b      	ldr	r3, [r7, #0]
 800f1d0:	3302      	adds	r3, #2
 800f1d2:	f9b3 3000 	ldrsh.w	r3, [r3]
 800f1d6:	429a      	cmp	r2, r3
 800f1d8:	d003      	beq.n	800f1e2 <SeekBlank+0xaa>
 800f1da:	2301      	movs	r3, #1
 800f1dc:	73fb      	strb	r3, [r7, #15]
 800f1de:	2300      	movs	r3, #0
 800f1e0:	e01f      	b.n	800f222 <SeekBlank+0xea>
 800f1e2:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800f1e6:	2b00      	cmp	r3, #0
 800f1e8:	d10a      	bne.n	800f200 <SeekBlank+0xc8>
 800f1ea:	7bfb      	ldrb	r3, [r7, #15]
 800f1ec:	2b01      	cmp	r3, #1
 800f1ee:	d107      	bne.n	800f200 <SeekBlank+0xc8>
 800f1f0:	683b      	ldr	r3, [r7, #0]
 800f1f2:	3304      	adds	r3, #4
 800f1f4:	683a      	ldr	r2, [r7, #0]
 800f1f6:	f9b2 2000 	ldrsh.w	r2, [r2]
 800f1fa:	801a      	strh	r2, [r3, #0]
 800f1fc:	2300      	movs	r3, #0
 800f1fe:	73fb      	strb	r3, [r7, #15]
 800f200:	683b      	ldr	r3, [r7, #0]
 800f202:	f9b3 3000 	ldrsh.w	r3, [r3]
 800f206:	b29b      	uxth	r3, r3
 800f208:	3301      	adds	r3, #1
 800f20a:	b29b      	uxth	r3, r3
 800f20c:	b21a      	sxth	r2, r3
 800f20e:	683b      	ldr	r3, [r7, #0]
 800f210:	801a      	strh	r2, [r3, #0]
 800f212:	683b      	ldr	r3, [r7, #0]
 800f214:	f9b3 3000 	ldrsh.w	r3, [r3]
 800f218:	f640 72fe 	movw	r2, #4094	; 0xffe
 800f21c:	4293      	cmp	r3, r2
 800f21e:	dd9c      	ble.n	800f15a <SeekBlank+0x22>
 800f220:	2300      	movs	r3, #0
 800f222:	4618      	mov	r0, r3
 800f224:	3710      	adds	r7, #16
 800f226:	46bd      	mov	sp, r7
 800f228:	bd80      	pop	{r7, pc}
 800f22a:	bf00      	nop
 800f22c:	20000194 	.word	0x20000194

0800f230 <SetCluster>:
 800f230:	b580      	push	{r7, lr}
 800f232:	b086      	sub	sp, #24
 800f234:	af00      	add	r7, sp, #0
 800f236:	6078      	str	r0, [r7, #4]
 800f238:	6039      	str	r1, [r7, #0]
 800f23a:	683b      	ldr	r3, [r7, #0]
 800f23c:	885b      	ldrh	r3, [r3, #2]
 800f23e:	82fb      	strh	r3, [r7, #22]
 800f240:	683b      	ldr	r3, [r7, #0]
 800f242:	881b      	ldrh	r3, [r3, #0]
 800f244:	82bb      	strh	r3, [r7, #20]
 800f246:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800f24a:	0fda      	lsrs	r2, r3, #31
 800f24c:	4413      	add	r3, r2
 800f24e:	105b      	asrs	r3, r3, #1
 800f250:	b21b      	sxth	r3, r3
 800f252:	b29a      	uxth	r2, r3
 800f254:	8afb      	ldrh	r3, [r7, #22]
 800f256:	4413      	add	r3, r2
 800f258:	b29b      	uxth	r3, r3
 800f25a:	827b      	strh	r3, [r7, #18]
 800f25c:	4b36      	ldr	r3, [pc, #216]	; (800f338 <SetCluster+0x108>)
 800f25e:	681a      	ldr	r2, [r3, #0]
 800f260:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800f264:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 800f268:	4413      	add	r3, r2
 800f26a:	60fb      	str	r3, [r7, #12]
 800f26c:	8a7b      	ldrh	r3, [r7, #18]
 800f26e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800f272:	827b      	strh	r3, [r7, #18]
 800f274:	68fb      	ldr	r3, [r7, #12]
 800f276:	4a30      	ldr	r2, [pc, #192]	; (800f338 <SetCluster+0x108>)
 800f278:	6952      	ldr	r2, [r2, #20]
 800f27a:	b212      	sxth	r2, r2
 800f27c:	4619      	mov	r1, r3
 800f27e:	6878      	ldr	r0, [r7, #4]
 800f280:	f7ff fe9a 	bl	800efb8 <ReadDiskData>
 800f284:	4603      	mov	r3, r0
 800f286:	2b00      	cmp	r3, #0
 800f288:	d001      	beq.n	800f28e <SetCluster+0x5e>
 800f28a:	2301      	movs	r3, #1
 800f28c:	e04f      	b.n	800f32e <SetCluster+0xfe>
 800f28e:	8afb      	ldrh	r3, [r7, #22]
 800f290:	f003 0301 	and.w	r3, r3, #1
 800f294:	2b00      	cmp	r3, #0
 800f296:	d01e      	beq.n	800f2d6 <SetCluster+0xa6>
 800f298:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800f29c:	687a      	ldr	r2, [r7, #4]
 800f29e:	4413      	add	r3, r2
 800f2a0:	781b      	ldrb	r3, [r3, #0]
 800f2a2:	f003 030f 	and.w	r3, r3, #15
 800f2a6:	b2d9      	uxtb	r1, r3
 800f2a8:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800f2ac:	011b      	lsls	r3, r3, #4
 800f2ae:	b2da      	uxtb	r2, r3
 800f2b0:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800f2b4:	6878      	ldr	r0, [r7, #4]
 800f2b6:	4403      	add	r3, r0
 800f2b8:	440a      	add	r2, r1
 800f2ba:	b2d2      	uxtb	r2, r2
 800f2bc:	701a      	strb	r2, [r3, #0]
 800f2be:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800f2c2:	111b      	asrs	r3, r3, #4
 800f2c4:	b219      	sxth	r1, r3
 800f2c6:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800f2ca:	3301      	adds	r3, #1
 800f2cc:	687a      	ldr	r2, [r7, #4]
 800f2ce:	4413      	add	r3, r2
 800f2d0:	b2ca      	uxtb	r2, r1
 800f2d2:	701a      	strb	r2, [r3, #0]
 800f2d4:	e021      	b.n	800f31a <SetCluster+0xea>
 800f2d6:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800f2da:	687a      	ldr	r2, [r7, #4]
 800f2dc:	4413      	add	r3, r2
 800f2de:	8aba      	ldrh	r2, [r7, #20]
 800f2e0:	b2d2      	uxtb	r2, r2
 800f2e2:	701a      	strb	r2, [r3, #0]
 800f2e4:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800f2e8:	3301      	adds	r3, #1
 800f2ea:	687a      	ldr	r2, [r7, #4]
 800f2ec:	4413      	add	r3, r2
 800f2ee:	781b      	ldrb	r3, [r3, #0]
 800f2f0:	b25b      	sxtb	r3, r3
 800f2f2:	f023 030f 	bic.w	r3, r3, #15
 800f2f6:	b25a      	sxtb	r2, r3
 800f2f8:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800f2fc:	121b      	asrs	r3, r3, #8
 800f2fe:	b21b      	sxth	r3, r3
 800f300:	b25b      	sxtb	r3, r3
 800f302:	f003 030f 	and.w	r3, r3, #15
 800f306:	b25b      	sxtb	r3, r3
 800f308:	4313      	orrs	r3, r2
 800f30a:	b259      	sxtb	r1, r3
 800f30c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800f310:	3301      	adds	r3, #1
 800f312:	687a      	ldr	r2, [r7, #4]
 800f314:	4413      	add	r3, r2
 800f316:	b2ca      	uxtb	r2, r1
 800f318:	701a      	strb	r2, [r3, #0]
 800f31a:	68f9      	ldr	r1, [r7, #12]
 800f31c:	6878      	ldr	r0, [r7, #4]
 800f31e:	f7ff fee9 	bl	800f0f4 <ProgDiskPage>
 800f322:	4603      	mov	r3, r0
 800f324:	2b00      	cmp	r3, #0
 800f326:	d001      	beq.n	800f32c <SetCluster+0xfc>
 800f328:	2301      	movs	r3, #1
 800f32a:	e000      	b.n	800f32e <SetCluster+0xfe>
 800f32c:	2300      	movs	r3, #0
 800f32e:	4618      	mov	r0, r3
 800f330:	3718      	adds	r7, #24
 800f332:	46bd      	mov	sp, r7
 800f334:	bd80      	pop	{r7, pc}
 800f336:	bf00      	nop
 800f338:	20000194 	.word	0x20000194

0800f33c <NextCluster>:
 800f33c:	b580      	push	{r7, lr}
 800f33e:	b084      	sub	sp, #16
 800f340:	af00      	add	r7, sp, #0
 800f342:	6078      	str	r0, [r7, #4]
 800f344:	4b27      	ldr	r3, [pc, #156]	; (800f3e4 <NextCluster+0xa8>)
 800f346:	681a      	ldr	r2, [r3, #0]
 800f348:	687b      	ldr	r3, [r7, #4]
 800f34a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800f34e:	4618      	mov	r0, r3
 800f350:	687b      	ldr	r3, [r7, #4]
 800f352:	f9b3 3000 	ldrsh.w	r3, [r3]
 800f356:	0fd9      	lsrs	r1, r3, #31
 800f358:	440b      	add	r3, r1
 800f35a:	105b      	asrs	r3, r3, #1
 800f35c:	b21b      	sxth	r3, r3
 800f35e:	4403      	add	r3, r0
 800f360:	4413      	add	r3, r2
 800f362:	60fb      	str	r3, [r7, #12]
 800f364:	687b      	ldr	r3, [r7, #4]
 800f366:	3302      	adds	r3, #2
 800f368:	687a      	ldr	r2, [r7, #4]
 800f36a:	f9b2 2000 	ldrsh.w	r2, [r2]
 800f36e:	801a      	strh	r2, [r3, #0]
 800f370:	687b      	ldr	r3, [r7, #4]
 800f372:	2200      	movs	r2, #0
 800f374:	801a      	strh	r2, [r3, #0]
 800f376:	687b      	ldr	r3, [r7, #4]
 800f378:	3302      	adds	r3, #2
 800f37a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800f37e:	461a      	mov	r2, r3
 800f380:	4b18      	ldr	r3, [pc, #96]	; (800f3e4 <NextCluster+0xa8>)
 800f382:	699b      	ldr	r3, [r3, #24]
 800f384:	429a      	cmp	r2, r3
 800f386:	d205      	bcs.n	800f394 <NextCluster+0x58>
 800f388:	687b      	ldr	r3, [r7, #4]
 800f38a:	3302      	adds	r3, #2
 800f38c:	f9b3 3000 	ldrsh.w	r3, [r3]
 800f390:	2b01      	cmp	r3, #1
 800f392:	dc01      	bgt.n	800f398 <NextCluster+0x5c>
 800f394:	2301      	movs	r3, #1
 800f396:	e021      	b.n	800f3dc <NextCluster+0xa0>
 800f398:	68f9      	ldr	r1, [r7, #12]
 800f39a:	f107 030a 	add.w	r3, r7, #10
 800f39e:	2202      	movs	r2, #2
 800f3a0:	4618      	mov	r0, r3
 800f3a2:	f7ff fe09 	bl	800efb8 <ReadDiskData>
 800f3a6:	4603      	mov	r3, r0
 800f3a8:	2b00      	cmp	r3, #0
 800f3aa:	d001      	beq.n	800f3b0 <NextCluster+0x74>
 800f3ac:	2301      	movs	r3, #1
 800f3ae:	e015      	b.n	800f3dc <NextCluster+0xa0>
 800f3b0:	687b      	ldr	r3, [r7, #4]
 800f3b2:	3302      	adds	r3, #2
 800f3b4:	f9b3 3000 	ldrsh.w	r3, [r3]
 800f3b8:	b29b      	uxth	r3, r3
 800f3ba:	f003 0301 	and.w	r3, r3, #1
 800f3be:	2b00      	cmp	r3, #0
 800f3c0:	d004      	beq.n	800f3cc <NextCluster+0x90>
 800f3c2:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800f3c6:	111b      	asrs	r3, r3, #4
 800f3c8:	b21b      	sxth	r3, r3
 800f3ca:	e004      	b.n	800f3d6 <NextCluster+0x9a>
 800f3cc:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800f3d0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800f3d4:	b21b      	sxth	r3, r3
 800f3d6:	687a      	ldr	r2, [r7, #4]
 800f3d8:	8013      	strh	r3, [r2, #0]
 800f3da:	2300      	movs	r3, #0
 800f3dc:	4618      	mov	r0, r3
 800f3de:	3710      	adds	r7, #16
 800f3e0:	46bd      	mov	sp, r7
 800f3e2:	bd80      	pop	{r7, pc}
 800f3e4:	20000194 	.word	0x20000194

0800f3e8 <ProgFileSec>:
 800f3e8:	b580      	push	{r7, lr}
 800f3ea:	b084      	sub	sp, #16
 800f3ec:	af00      	add	r7, sp, #0
 800f3ee:	6078      	str	r0, [r7, #4]
 800f3f0:	6039      	str	r1, [r7, #0]
 800f3f2:	4b1f      	ldr	r3, [pc, #124]	; (800f470 <ProgFileSec+0x88>)
 800f3f4:	68da      	ldr	r2, [r3, #12]
 800f3f6:	4b1e      	ldr	r3, [pc, #120]	; (800f470 <ProgFileSec+0x88>)
 800f3f8:	695b      	ldr	r3, [r3, #20]
 800f3fa:	6839      	ldr	r1, [r7, #0]
 800f3fc:	f9b1 1000 	ldrsh.w	r1, [r1]
 800f400:	3902      	subs	r1, #2
 800f402:	fb01 f303 	mul.w	r3, r1, r3
 800f406:	4413      	add	r3, r2
 800f408:	60fb      	str	r3, [r7, #12]
 800f40a:	68f9      	ldr	r1, [r7, #12]
 800f40c:	6878      	ldr	r0, [r7, #4]
 800f40e:	f7ff fe71 	bl	800f0f4 <ProgDiskPage>
 800f412:	4603      	mov	r3, r0
 800f414:	2b00      	cmp	r3, #0
 800f416:	d001      	beq.n	800f41c <ProgFileSec+0x34>
 800f418:	2301      	movs	r3, #1
 800f41a:	e025      	b.n	800f468 <ProgFileSec+0x80>
 800f41c:	6838      	ldr	r0, [r7, #0]
 800f41e:	f7ff ff8d 	bl	800f33c <NextCluster>
 800f422:	4603      	mov	r3, r0
 800f424:	2b00      	cmp	r3, #0
 800f426:	d001      	beq.n	800f42c <ProgFileSec+0x44>
 800f428:	2302      	movs	r3, #2
 800f42a:	e01d      	b.n	800f468 <ProgFileSec+0x80>
 800f42c:	683b      	ldr	r3, [r7, #0]
 800f42e:	885b      	ldrh	r3, [r3, #2]
 800f430:	817b      	strh	r3, [r7, #10]
 800f432:	683b      	ldr	r3, [r7, #0]
 800f434:	f9b3 3000 	ldrsh.w	r3, [r3]
 800f438:	2b00      	cmp	r3, #0
 800f43a:	d114      	bne.n	800f466 <ProgFileSec+0x7e>
 800f43c:	683b      	ldr	r3, [r7, #0]
 800f43e:	897a      	ldrh	r2, [r7, #10]
 800f440:	801a      	strh	r2, [r3, #0]
 800f442:	6839      	ldr	r1, [r7, #0]
 800f444:	6878      	ldr	r0, [r7, #4]
 800f446:	f7ff fe77 	bl	800f138 <SeekBlank>
 800f44a:	4603      	mov	r3, r0
 800f44c:	2b00      	cmp	r3, #0
 800f44e:	d001      	beq.n	800f454 <ProgFileSec+0x6c>
 800f450:	2303      	movs	r3, #3
 800f452:	e009      	b.n	800f468 <ProgFileSec+0x80>
 800f454:	6839      	ldr	r1, [r7, #0]
 800f456:	6878      	ldr	r0, [r7, #4]
 800f458:	f7ff feea 	bl	800f230 <SetCluster>
 800f45c:	4603      	mov	r3, r0
 800f45e:	2b00      	cmp	r3, #0
 800f460:	d001      	beq.n	800f466 <ProgFileSec+0x7e>
 800f462:	2301      	movs	r3, #1
 800f464:	e000      	b.n	800f468 <ProgFileSec+0x80>
 800f466:	2300      	movs	r3, #0
 800f468:	4618      	mov	r0, r3
 800f46a:	3710      	adds	r7, #16
 800f46c:	46bd      	mov	sp, r7
 800f46e:	bd80      	pop	{r7, pc}
 800f470:	20000194 	.word	0x20000194

0800f474 <ReadFileSec>:
 800f474:	b580      	push	{r7, lr}
 800f476:	b084      	sub	sp, #16
 800f478:	af00      	add	r7, sp, #0
 800f47a:	6078      	str	r0, [r7, #4]
 800f47c:	6039      	str	r1, [r7, #0]
 800f47e:	4b13      	ldr	r3, [pc, #76]	; (800f4cc <ReadFileSec+0x58>)
 800f480:	68da      	ldr	r2, [r3, #12]
 800f482:	4b12      	ldr	r3, [pc, #72]	; (800f4cc <ReadFileSec+0x58>)
 800f484:	695b      	ldr	r3, [r3, #20]
 800f486:	6839      	ldr	r1, [r7, #0]
 800f488:	f9b1 1000 	ldrsh.w	r1, [r1]
 800f48c:	3902      	subs	r1, #2
 800f48e:	fb01 f303 	mul.w	r3, r1, r3
 800f492:	4413      	add	r3, r2
 800f494:	60fb      	str	r3, [r7, #12]
 800f496:	68fb      	ldr	r3, [r7, #12]
 800f498:	4a0c      	ldr	r2, [pc, #48]	; (800f4cc <ReadFileSec+0x58>)
 800f49a:	6952      	ldr	r2, [r2, #20]
 800f49c:	b212      	sxth	r2, r2
 800f49e:	4619      	mov	r1, r3
 800f4a0:	6878      	ldr	r0, [r7, #4]
 800f4a2:	f7ff fd89 	bl	800efb8 <ReadDiskData>
 800f4a6:	4603      	mov	r3, r0
 800f4a8:	2b00      	cmp	r3, #0
 800f4aa:	d001      	beq.n	800f4b0 <ReadFileSec+0x3c>
 800f4ac:	2301      	movs	r3, #1
 800f4ae:	e008      	b.n	800f4c2 <ReadFileSec+0x4e>
 800f4b0:	6838      	ldr	r0, [r7, #0]
 800f4b2:	f7ff ff43 	bl	800f33c <NextCluster>
 800f4b6:	4603      	mov	r3, r0
 800f4b8:	2b00      	cmp	r3, #0
 800f4ba:	d001      	beq.n	800f4c0 <ReadFileSec+0x4c>
 800f4bc:	2302      	movs	r3, #2
 800f4be:	e000      	b.n	800f4c2 <ReadFileSec+0x4e>
 800f4c0:	2300      	movs	r3, #0
 800f4c2:	4618      	mov	r0, r3
 800f4c4:	3710      	adds	r7, #16
 800f4c6:	46bd      	mov	sp, r7
 800f4c8:	bd80      	pop	{r7, pc}
 800f4ca:	bf00      	nop
 800f4cc:	20000194 	.word	0x20000194

0800f4d0 <CloseFile>:
 800f4d0:	b580      	push	{r7, lr}
 800f4d2:	b086      	sub	sp, #24
 800f4d4:	af00      	add	r7, sp, #0
 800f4d6:	60f8      	str	r0, [r7, #12]
 800f4d8:	60b9      	str	r1, [r7, #8]
 800f4da:	607a      	str	r2, [r7, #4]
 800f4dc:	603b      	str	r3, [r7, #0]
 800f4de:	f640 73ff 	movw	r3, #4095	; 0xfff
 800f4e2:	617b      	str	r3, [r7, #20]
 800f4e4:	687b      	ldr	r3, [r7, #4]
 800f4e6:	f640 72ff 	movw	r2, #4095	; 0xfff
 800f4ea:	801a      	strh	r2, [r3, #0]
 800f4ec:	6879      	ldr	r1, [r7, #4]
 800f4ee:	68f8      	ldr	r0, [r7, #12]
 800f4f0:	f7ff fe9e 	bl	800f230 <SetCluster>
 800f4f4:	683b      	ldr	r3, [r7, #0]
 800f4f6:	681a      	ldr	r2, [r3, #0]
 800f4f8:	697b      	ldr	r3, [r7, #20]
 800f4fa:	43db      	mvns	r3, r3
 800f4fc:	4013      	ands	r3, r2
 800f4fe:	4619      	mov	r1, r3
 800f500:	4b24      	ldr	r3, [pc, #144]	; (800f594 <CloseFile+0xc4>)
 800f502:	695b      	ldr	r3, [r3, #20]
 800f504:	b21b      	sxth	r3, r3
 800f506:	461a      	mov	r2, r3
 800f508:	68f8      	ldr	r0, [r7, #12]
 800f50a:	f7ff fd55 	bl	800efb8 <ReadDiskData>
 800f50e:	4603      	mov	r3, r0
 800f510:	2b00      	cmp	r3, #0
 800f512:	d001      	beq.n	800f518 <CloseFile+0x48>
 800f514:	2301      	movs	r3, #1
 800f516:	e039      	b.n	800f58c <CloseFile+0xbc>
 800f518:	683b      	ldr	r3, [r7, #0]
 800f51a:	681a      	ldr	r2, [r3, #0]
 800f51c:	697b      	ldr	r3, [r7, #20]
 800f51e:	4013      	ands	r3, r2
 800f520:	330b      	adds	r3, #11
 800f522:	68fa      	ldr	r2, [r7, #12]
 800f524:	4413      	add	r3, r2
 800f526:	2220      	movs	r2, #32
 800f528:	701a      	strb	r2, [r3, #0]
 800f52a:	683b      	ldr	r3, [r7, #0]
 800f52c:	681a      	ldr	r2, [r3, #0]
 800f52e:	697b      	ldr	r3, [r7, #20]
 800f530:	4013      	ands	r3, r2
 800f532:	331c      	adds	r3, #28
 800f534:	68fa      	ldr	r2, [r7, #12]
 800f536:	4413      	add	r3, r2
 800f538:	68ba      	ldr	r2, [r7, #8]
 800f53a:	601a      	str	r2, [r3, #0]
 800f53c:	683b      	ldr	r3, [r7, #0]
 800f53e:	681a      	ldr	r2, [r3, #0]
 800f540:	697b      	ldr	r3, [r7, #20]
 800f542:	43db      	mvns	r3, r3
 800f544:	4013      	ands	r3, r2
 800f546:	4619      	mov	r1, r3
 800f548:	68f8      	ldr	r0, [r7, #12]
 800f54a:	f7ff fdd3 	bl	800f0f4 <ProgDiskPage>
 800f54e:	4603      	mov	r3, r0
 800f550:	2b00      	cmp	r3, #0
 800f552:	d001      	beq.n	800f558 <CloseFile+0x88>
 800f554:	2301      	movs	r3, #1
 800f556:	e019      	b.n	800f58c <CloseFile+0xbc>
 800f558:	4b0e      	ldr	r3, [pc, #56]	; (800f594 <CloseFile+0xc4>)
 800f55a:	681b      	ldr	r3, [r3, #0]
 800f55c:	4a0d      	ldr	r2, [pc, #52]	; (800f594 <CloseFile+0xc4>)
 800f55e:	6952      	ldr	r2, [r2, #20]
 800f560:	b212      	sxth	r2, r2
 800f562:	4619      	mov	r1, r3
 800f564:	68f8      	ldr	r0, [r7, #12]
 800f566:	f7ff fd27 	bl	800efb8 <ReadDiskData>
 800f56a:	4603      	mov	r3, r0
 800f56c:	2b00      	cmp	r3, #0
 800f56e:	d001      	beq.n	800f574 <CloseFile+0xa4>
 800f570:	2301      	movs	r3, #1
 800f572:	e00b      	b.n	800f58c <CloseFile+0xbc>
 800f574:	4b07      	ldr	r3, [pc, #28]	; (800f594 <CloseFile+0xc4>)
 800f576:	685b      	ldr	r3, [r3, #4]
 800f578:	4619      	mov	r1, r3
 800f57a:	68f8      	ldr	r0, [r7, #12]
 800f57c:	f7ff fdba 	bl	800f0f4 <ProgDiskPage>
 800f580:	4603      	mov	r3, r0
 800f582:	2b00      	cmp	r3, #0
 800f584:	d001      	beq.n	800f58a <CloseFile+0xba>
 800f586:	2301      	movs	r3, #1
 800f588:	e000      	b.n	800f58c <CloseFile+0xbc>
 800f58a:	2300      	movs	r3, #0
 800f58c:	4618      	mov	r0, r3
 800f58e:	3718      	adds	r7, #24
 800f590:	46bd      	mov	sp, r7
 800f592:	bd80      	pop	{r7, pc}
 800f594:	20000194 	.word	0x20000194

0800f598 <OpenFileWr>:
 800f598:	b580      	push	{r7, lr}
 800f59a:	b088      	sub	sp, #32
 800f59c:	af00      	add	r7, sp, #0
 800f59e:	60f8      	str	r0, [r7, #12]
 800f5a0:	60b9      	str	r1, [r7, #8]
 800f5a2:	607a      	str	r2, [r7, #4]
 800f5a4:	603b      	str	r3, [r7, #0]
 800f5a6:	683b      	ldr	r3, [r7, #0]
 800f5a8:	687a      	ldr	r2, [r7, #4]
 800f5aa:	68b9      	ldr	r1, [r7, #8]
 800f5ac:	68f8      	ldr	r0, [r7, #12]
 800f5ae:	f7ff fd29 	bl	800f004 <OpenFileRd>
 800f5b2:	4603      	mov	r3, r0
 800f5b4:	61fb      	str	r3, [r7, #28]
 800f5b6:	69fb      	ldr	r3, [r7, #28]
 800f5b8:	2b04      	cmp	r3, #4
 800f5ba:	d002      	beq.n	800f5c2 <OpenFileWr+0x2a>
 800f5bc:	69fb      	ldr	r3, [r7, #28]
 800f5be:	b2db      	uxtb	r3, r3
 800f5c0:	e045      	b.n	800f64e <OpenFileWr+0xb6>
 800f5c2:	6879      	ldr	r1, [r7, #4]
 800f5c4:	68f8      	ldr	r0, [r7, #12]
 800f5c6:	f7ff fdb7 	bl	800f138 <SeekBlank>
 800f5ca:	4603      	mov	r3, r0
 800f5cc:	2b00      	cmp	r3, #0
 800f5ce:	d001      	beq.n	800f5d4 <OpenFileWr+0x3c>
 800f5d0:	2303      	movs	r3, #3
 800f5d2:	e03c      	b.n	800f64e <OpenFileWr+0xb6>
 800f5d4:	683b      	ldr	r3, [r7, #0]
 800f5d6:	681b      	ldr	r3, [r3, #0]
 800f5d8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800f5dc:	61bb      	str	r3, [r7, #24]
 800f5de:	683b      	ldr	r3, [r7, #0]
 800f5e0:	681a      	ldr	r2, [r3, #0]
 800f5e2:	69bb      	ldr	r3, [r7, #24]
 800f5e4:	1ad3      	subs	r3, r2, r3
 800f5e6:	617b      	str	r3, [r7, #20]
 800f5e8:	697b      	ldr	r3, [r7, #20]
 800f5ea:	4a1b      	ldr	r2, [pc, #108]	; (800f658 <OpenFileWr+0xc0>)
 800f5ec:	6952      	ldr	r2, [r2, #20]
 800f5ee:	b212      	sxth	r2, r2
 800f5f0:	4619      	mov	r1, r3
 800f5f2:	68f8      	ldr	r0, [r7, #12]
 800f5f4:	f7ff fce0 	bl	800efb8 <ReadDiskData>
 800f5f8:	4603      	mov	r3, r0
 800f5fa:	2b00      	cmp	r3, #0
 800f5fc:	d001      	beq.n	800f602 <OpenFileWr+0x6a>
 800f5fe:	2301      	movs	r3, #1
 800f600:	e025      	b.n	800f64e <OpenFileWr+0xb6>
 800f602:	2300      	movs	r3, #0
 800f604:	61fb      	str	r3, [r7, #28]
 800f606:	e00d      	b.n	800f624 <OpenFileWr+0x8c>
 800f608:	69fb      	ldr	r3, [r7, #28]
 800f60a:	68ba      	ldr	r2, [r7, #8]
 800f60c:	441a      	add	r2, r3
 800f60e:	69b9      	ldr	r1, [r7, #24]
 800f610:	69fb      	ldr	r3, [r7, #28]
 800f612:	440b      	add	r3, r1
 800f614:	4619      	mov	r1, r3
 800f616:	68fb      	ldr	r3, [r7, #12]
 800f618:	440b      	add	r3, r1
 800f61a:	7812      	ldrb	r2, [r2, #0]
 800f61c:	701a      	strb	r2, [r3, #0]
 800f61e:	69fb      	ldr	r3, [r7, #28]
 800f620:	3301      	adds	r3, #1
 800f622:	61fb      	str	r3, [r7, #28]
 800f624:	69fb      	ldr	r3, [r7, #28]
 800f626:	2b0a      	cmp	r3, #10
 800f628:	ddee      	ble.n	800f608 <OpenFileWr+0x70>
 800f62a:	69bb      	ldr	r3, [r7, #24]
 800f62c:	331a      	adds	r3, #26
 800f62e:	68fa      	ldr	r2, [r7, #12]
 800f630:	4413      	add	r3, r2
 800f632:	687a      	ldr	r2, [r7, #4]
 800f634:	f9b2 2000 	ldrsh.w	r2, [r2]
 800f638:	801a      	strh	r2, [r3, #0]
 800f63a:	6979      	ldr	r1, [r7, #20]
 800f63c:	68f8      	ldr	r0, [r7, #12]
 800f63e:	f7ff fd59 	bl	800f0f4 <ProgDiskPage>
 800f642:	4603      	mov	r3, r0
 800f644:	2b00      	cmp	r3, #0
 800f646:	d001      	beq.n	800f64c <OpenFileWr+0xb4>
 800f648:	2301      	movs	r3, #1
 800f64a:	e000      	b.n	800f64e <OpenFileWr+0xb6>
 800f64c:	2300      	movs	r3, #0
 800f64e:	4618      	mov	r0, r3
 800f650:	3720      	adds	r7, #32
 800f652:	46bd      	mov	sp, r7
 800f654:	bd80      	pop	{r7, pc}
 800f656:	bf00      	nop
 800f658:	20000194 	.word	0x20000194

0800f65c <Color_Num>:
 800f65c:	b480      	push	{r7}
 800f65e:	b083      	sub	sp, #12
 800f660:	af00      	add	r7, sp, #0
 800f662:	4603      	mov	r3, r0
 800f664:	80fb      	strh	r3, [r7, #6]
 800f666:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800f66a:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 800f66e:	4013      	ands	r3, r2
 800f670:	f64f 72e0 	movw	r2, #65504	; 0xffe0
 800f674:	4293      	cmp	r3, r2
 800f676:	d101      	bne.n	800f67c <Color_Num+0x20>
 800f678:	2301      	movs	r3, #1
 800f67a:	e068      	b.n	800f74e <Color_Num+0xf2>
 800f67c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800f680:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800f684:	f5b3 4f04 	cmp.w	r3, #33792	; 0x8400
 800f688:	d101      	bne.n	800f68e <Color_Num+0x32>
 800f68a:	2302      	movs	r3, #2
 800f68c:	e05f      	b.n	800f74e <Color_Num+0xf2>
 800f68e:	88fb      	ldrh	r3, [r7, #6]
 800f690:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800f694:	f240 72ff 	movw	r2, #2047	; 0x7ff
 800f698:	4293      	cmp	r3, r2
 800f69a:	d101      	bne.n	800f6a0 <Color_Num+0x44>
 800f69c:	2303      	movs	r3, #3
 800f69e:	e056      	b.n	800f74e <Color_Num+0xf2>
 800f6a0:	88fb      	ldrh	r3, [r7, #6]
 800f6a2:	f403 6382 	and.w	r3, r3, #1040	; 0x410
 800f6a6:	f5b3 6f82 	cmp.w	r3, #1040	; 0x410
 800f6aa:	d101      	bne.n	800f6b0 <Color_Num+0x54>
 800f6ac:	2304      	movs	r3, #4
 800f6ae:	e04e      	b.n	800f74e <Color_Num+0xf2>
 800f6b0:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800f6b4:	f64f 031f 	movw	r3, #63519	; 0xf81f
 800f6b8:	4013      	ands	r3, r2
 800f6ba:	f64f 021f 	movw	r2, #63519	; 0xf81f
 800f6be:	4293      	cmp	r3, r2
 800f6c0:	d101      	bne.n	800f6c6 <Color_Num+0x6a>
 800f6c2:	2305      	movs	r3, #5
 800f6c4:	e043      	b.n	800f74e <Color_Num+0xf2>
 800f6c6:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800f6ca:	f248 0310 	movw	r3, #32784	; 0x8010
 800f6ce:	4013      	ands	r3, r2
 800f6d0:	f248 0210 	movw	r2, #32784	; 0x8010
 800f6d4:	4293      	cmp	r3, r2
 800f6d6:	d101      	bne.n	800f6dc <Color_Num+0x80>
 800f6d8:	2306      	movs	r3, #6
 800f6da:	e038      	b.n	800f74e <Color_Num+0xf2>
 800f6dc:	88fb      	ldrh	r3, [r7, #6]
 800f6de:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 800f6e2:	f5b3 6ffc 	cmp.w	r3, #2016	; 0x7e0
 800f6e6:	d101      	bne.n	800f6ec <Color_Num+0x90>
 800f6e8:	2307      	movs	r3, #7
 800f6ea:	e030      	b.n	800f74e <Color_Num+0xf2>
 800f6ec:	88fb      	ldrh	r3, [r7, #6]
 800f6ee:	f403 6382 	and.w	r3, r3, #1040	; 0x410
 800f6f2:	f5b3 6f82 	cmp.w	r3, #1040	; 0x410
 800f6f6:	d101      	bne.n	800f6fc <Color_Num+0xa0>
 800f6f8:	2308      	movs	r3, #8
 800f6fa:	e028      	b.n	800f74e <Color_Num+0xf2>
 800f6fc:	88fb      	ldrh	r3, [r7, #6]
 800f6fe:	461a      	mov	r2, r3
 800f700:	f643 13e7 	movw	r3, #14823	; 0x39e7
 800f704:	4013      	ands	r3, r2
 800f706:	f643 12e7 	movw	r2, #14823	; 0x39e7
 800f70a:	4293      	cmp	r3, r2
 800f70c:	d101      	bne.n	800f712 <Color_Num+0xb6>
 800f70e:	2309      	movs	r3, #9
 800f710:	e01d      	b.n	800f74e <Color_Num+0xf2>
 800f712:	88fb      	ldrh	r3, [r7, #6]
 800f714:	461a      	mov	r2, r3
 800f716:	f240 531f 	movw	r3, #1311	; 0x51f
 800f71a:	4013      	ands	r3, r2
 800f71c:	f240 521f 	movw	r2, #1311	; 0x51f
 800f720:	4293      	cmp	r3, r2
 800f722:	d101      	bne.n	800f728 <Color_Num+0xcc>
 800f724:	230a      	movs	r3, #10
 800f726:	e012      	b.n	800f74e <Color_Num+0xf2>
 800f728:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800f72c:	f64f 4310 	movw	r3, #64528	; 0xfc10
 800f730:	4013      	ands	r3, r2
 800f732:	f64f 4210 	movw	r2, #64528	; 0xfc10
 800f736:	4293      	cmp	r3, r2
 800f738:	d101      	bne.n	800f73e <Color_Num+0xe2>
 800f73a:	230b      	movs	r3, #11
 800f73c:	e007      	b.n	800f74e <Color_Num+0xf2>
 800f73e:	88fb      	ldrh	r3, [r7, #6]
 800f740:	f003 031f 	and.w	r3, r3, #31
 800f744:	2b1f      	cmp	r3, #31
 800f746:	d101      	bne.n	800f74c <Color_Num+0xf0>
 800f748:	230c      	movs	r3, #12
 800f74a:	e000      	b.n	800f74e <Color_Num+0xf2>
 800f74c:	230d      	movs	r3, #13
 800f74e:	4618      	mov	r0, r3
 800f750:	370c      	adds	r7, #12
 800f752:	46bd      	mov	sp, r7
 800f754:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f758:	4770      	bx	lr
	...

0800f75c <PrintClk>:
 800f75c:	b580      	push	{r7, lr}
 800f75e:	b084      	sub	sp, #16
 800f760:	af00      	add	r7, sp, #0
 800f762:	4603      	mov	r3, r0
 800f764:	80fb      	strh	r3, [r7, #6]
 800f766:	460b      	mov	r3, r1
 800f768:	80bb      	strh	r3, [r7, #4]
 800f76a:	4613      	mov	r3, r2
 800f76c:	70fb      	strb	r3, [r7, #3]
 800f76e:	4b31      	ldr	r3, [pc, #196]	; (800f834 <PrintClk+0xd8>)
 800f770:	895b      	ldrh	r3, [r3, #10]
 800f772:	4619      	mov	r1, r3
 800f774:	f643 10e7 	movw	r0, #14823	; 0x39e7
 800f778:	f7fe fa6a 	bl	800dc50 <SetColor>
 800f77c:	4b2e      	ldr	r3, [pc, #184]	; (800f838 <PrintClk+0xdc>)
 800f77e:	f9b3 303a 	ldrsh.w	r3, [r3, #58]	; 0x3a
 800f782:	b29b      	uxth	r3, r3
 800f784:	331e      	adds	r3, #30
 800f786:	b29b      	uxth	r3, r3
 800f788:	80fb      	strh	r3, [r7, #6]
 800f78a:	4b2b      	ldr	r3, [pc, #172]	; (800f838 <PrintClk+0xdc>)
 800f78c:	f9b3 303a 	ldrsh.w	r3, [r3, #58]	; 0x3a
 800f790:	b29b      	uxth	r3, r3
 800f792:	3b03      	subs	r3, #3
 800f794:	b29b      	uxth	r3, r3
 800f796:	b218      	sxth	r0, r3
 800f798:	4b28      	ldr	r3, [pc, #160]	; (800f83c <PrintClk+0xe0>)
 800f79a:	2200      	movs	r2, #0
 800f79c:	2103      	movs	r1, #3
 800f79e:	f7fe fa6f 	bl	800dc80 <DispStr>
 800f7a2:	2301      	movs	r3, #1
 800f7a4:	81fb      	strh	r3, [r7, #14]
 800f7a6:	e03c      	b.n	800f822 <PrintClk+0xc6>
 800f7a8:	78fa      	ldrb	r2, [r7, #3]
 800f7aa:	4613      	mov	r3, r2
 800f7ac:	009b      	lsls	r3, r3, #2
 800f7ae:	4413      	add	r3, r2
 800f7b0:	005b      	lsls	r3, r3, #1
 800f7b2:	441a      	add	r2, r3
 800f7b4:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800f7b8:	4413      	add	r3, r2
 800f7ba:	4a21      	ldr	r2, [pc, #132]	; (800f840 <PrintClk+0xe4>)
 800f7bc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800f7c0:	817b      	strh	r3, [r7, #10]
 800f7c2:	2300      	movs	r3, #0
 800f7c4:	81bb      	strh	r3, [r7, #12]
 800f7c6:	e024      	b.n	800f812 <PrintClk+0xb6>
 800f7c8:	88fa      	ldrh	r2, [r7, #6]
 800f7ca:	89bb      	ldrh	r3, [r7, #12]
 800f7cc:	4413      	add	r3, r2
 800f7ce:	b29b      	uxth	r3, r3
 800f7d0:	b218      	sxth	r0, r3
 800f7d2:	88ba      	ldrh	r2, [r7, #4]
 800f7d4:	89fb      	ldrh	r3, [r7, #14]
 800f7d6:	4413      	add	r3, r2
 800f7d8:	b29b      	uxth	r3, r3
 800f7da:	b21b      	sxth	r3, r3
 800f7dc:	4619      	mov	r1, r3
 800f7de:	f002 fce7 	bl	80121b0 <LCD_Set_Posi>
 800f7e2:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 800f7e6:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800f7ea:	fa42 f303 	asr.w	r3, r2, r3
 800f7ee:	f003 0301 	and.w	r3, r3, #1
 800f7f2:	2b00      	cmp	r3, #0
 800f7f4:	d004      	beq.n	800f800 <PrintClk+0xa4>
 800f7f6:	f64f 4010 	movw	r0, #64528	; 0xfc10
 800f7fa:	f002 fd27 	bl	801224c <LCD_Set_Pixel>
 800f7fe:	e004      	b.n	800f80a <PrintClk+0xae>
 800f800:	4b10      	ldr	r3, [pc, #64]	; (800f844 <PrintClk+0xe8>)
 800f802:	881b      	ldrh	r3, [r3, #0]
 800f804:	4618      	mov	r0, r3
 800f806:	f002 fd21 	bl	801224c <LCD_Set_Pixel>
 800f80a:	89bb      	ldrh	r3, [r7, #12]
 800f80c:	3301      	adds	r3, #1
 800f80e:	b29b      	uxth	r3, r3
 800f810:	81bb      	strh	r3, [r7, #12]
 800f812:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800f816:	2b0a      	cmp	r3, #10
 800f818:	ddd6      	ble.n	800f7c8 <PrintClk+0x6c>
 800f81a:	89fb      	ldrh	r3, [r7, #14]
 800f81c:	3301      	adds	r3, #1
 800f81e:	b29b      	uxth	r3, r3
 800f820:	81fb      	strh	r3, [r7, #14]
 800f822:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800f826:	2b0a      	cmp	r3, #10
 800f828:	ddbe      	ble.n	800f7a8 <PrintClk+0x4c>
 800f82a:	bf00      	nop
 800f82c:	bf00      	nop
 800f82e:	3710      	adds	r7, #16
 800f830:	46bd      	mov	sp, r7
 800f832:	bd80      	pop	{r7, pc}
 800f834:	08001f08 	.word	0x08001f08
 800f838:	0800215c 	.word	0x0800215c
 800f83c:	080001ec 	.word	0x080001ec
 800f840:	08001bbc 	.word	0x08001bbc
 800f844:	200015ce 	.word	0x200015ce

0800f848 <WriteVar>:
 800f848:	b580      	push	{r7, lr}
 800f84a:	b084      	sub	sp, #16
 800f84c:	af00      	add	r7, sp, #0
 800f84e:	4603      	mov	r3, r0
 800f850:	6039      	str	r1, [r7, #0]
 800f852:	80fb      	strh	r3, [r7, #6]
 800f854:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800f858:	81fb      	strh	r3, [r7, #14]
 800f85a:	2204      	movs	r2, #4
 800f85c:	2100      	movs	r1, #0
 800f85e:	4847      	ldr	r0, [pc, #284]	; (800f97c <WriteVar+0x134>)
 800f860:	f013 f998 	bl	8022b94 <memset>
 800f864:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800f868:	4619      	mov	r1, r3
 800f86a:	4844      	ldr	r0, [pc, #272]	; (800f97c <WriteVar+0x134>)
 800f86c:	f002 fa1e 	bl	8011cac <u16ToDec4Str>
 800f870:	4842      	ldr	r0, [pc, #264]	; (800f97c <WriteVar+0x134>)
 800f872:	f7fc fbe5 	bl	800c040 <strlen>
 800f876:	4603      	mov	r3, r0
 800f878:	b21a      	sxth	r2, r3
 800f87a:	4b41      	ldr	r3, [pc, #260]	; (800f980 <WriteVar+0x138>)
 800f87c:	801a      	strh	r2, [r3, #0]
 800f87e:	4b41      	ldr	r3, [pc, #260]	; (800f984 <WriteVar+0x13c>)
 800f880:	f9b3 3000 	ldrsh.w	r3, [r3]
 800f884:	461a      	mov	r2, r3
 800f886:	4b40      	ldr	r3, [pc, #256]	; (800f988 <WriteVar+0x140>)
 800f888:	4413      	add	r3, r2
 800f88a:	4a3d      	ldr	r2, [pc, #244]	; (800f980 <WriteVar+0x138>)
 800f88c:	f9b2 2000 	ldrsh.w	r2, [r2]
 800f890:	493a      	ldr	r1, [pc, #232]	; (800f97c <WriteVar+0x134>)
 800f892:	4618      	mov	r0, r3
 800f894:	f013 f970 	bl	8022b78 <memcpy>
 800f898:	4b3a      	ldr	r3, [pc, #232]	; (800f984 <WriteVar+0x13c>)
 800f89a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800f89e:	b29a      	uxth	r2, r3
 800f8a0:	4b37      	ldr	r3, [pc, #220]	; (800f980 <WriteVar+0x138>)
 800f8a2:	f9b3 3000 	ldrsh.w	r3, [r3]
 800f8a6:	b29b      	uxth	r3, r3
 800f8a8:	4413      	add	r3, r2
 800f8aa:	b29b      	uxth	r3, r3
 800f8ac:	b21a      	sxth	r2, r3
 800f8ae:	4b35      	ldr	r3, [pc, #212]	; (800f984 <WriteVar+0x13c>)
 800f8b0:	801a      	strh	r2, [r3, #0]
 800f8b2:	4b33      	ldr	r3, [pc, #204]	; (800f980 <WriteVar+0x138>)
 800f8b4:	f9b3 3000 	ldrsh.w	r3, [r3]
 800f8b8:	461a      	mov	r2, r3
 800f8ba:	4b34      	ldr	r3, [pc, #208]	; (800f98c <WriteVar+0x144>)
 800f8bc:	681b      	ldr	r3, [r3, #0]
 800f8be:	4413      	add	r3, r2
 800f8c0:	4a32      	ldr	r2, [pc, #200]	; (800f98c <WriteVar+0x144>)
 800f8c2:	6013      	str	r3, [r2, #0]
 800f8c4:	4b2f      	ldr	r3, [pc, #188]	; (800f984 <WriteVar+0x13c>)
 800f8c6:	f9b3 3000 	ldrsh.w	r3, [r3]
 800f8ca:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 800f8ce:	429a      	cmp	r2, r3
 800f8d0:	dc4f      	bgt.n	800f972 <WriteVar+0x12a>
 800f8d2:	6839      	ldr	r1, [r7, #0]
 800f8d4:	482c      	ldr	r0, [pc, #176]	; (800f988 <WriteVar+0x140>)
 800f8d6:	f7ff fd87 	bl	800f3e8 <ProgFileSec>
 800f8da:	4b2d      	ldr	r3, [pc, #180]	; (800f990 <WriteVar+0x148>)
 800f8dc:	681b      	ldr	r3, [r3, #0]
 800f8de:	1c5a      	adds	r2, r3, #1
 800f8e0:	492b      	ldr	r1, [pc, #172]	; (800f990 <WriteVar+0x148>)
 800f8e2:	600a      	str	r2, [r1, #0]
 800f8e4:	105b      	asrs	r3, r3, #1
 800f8e6:	b2db      	uxtb	r3, r3
 800f8e8:	f003 0303 	and.w	r3, r3, #3
 800f8ec:	b2db      	uxtb	r3, r3
 800f8ee:	461a      	mov	r2, r3
 800f8f0:	2102      	movs	r1, #2
 800f8f2:	f44f 7084 	mov.w	r0, #264	; 0x108
 800f8f6:	f7ff ff31 	bl	800f75c <PrintClk>
 800f8fa:	4b22      	ldr	r3, [pc, #136]	; (800f984 <WriteVar+0x13c>)
 800f8fc:	f9b3 3000 	ldrsh.w	r3, [r3]
 800f900:	b29a      	uxth	r2, r3
 800f902:	89fb      	ldrh	r3, [r7, #14]
 800f904:	1ad3      	subs	r3, r2, r3
 800f906:	b29b      	uxth	r3, r3
 800f908:	81bb      	strh	r3, [r7, #12]
 800f90a:	4b1d      	ldr	r3, [pc, #116]	; (800f980 <WriteVar+0x138>)
 800f90c:	f9b3 3000 	ldrsh.w	r3, [r3]
 800f910:	b29a      	uxth	r2, r3
 800f912:	89bb      	ldrh	r3, [r7, #12]
 800f914:	1ad3      	subs	r3, r2, r3
 800f916:	b29b      	uxth	r3, r3
 800f918:	817b      	strh	r3, [r7, #10]
 800f91a:	4b1a      	ldr	r3, [pc, #104]	; (800f984 <WriteVar+0x13c>)
 800f91c:	2200      	movs	r2, #0
 800f91e:	801a      	strh	r2, [r3, #0]
 800f920:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800f924:	461a      	mov	r2, r3
 800f926:	2100      	movs	r1, #0
 800f928:	4817      	ldr	r0, [pc, #92]	; (800f988 <WriteVar+0x140>)
 800f92a:	f013 f933 	bl	8022b94 <memset>
 800f92e:	f44f 729b 	mov.w	r2, #310	; 0x136
 800f932:	2100      	movs	r1, #0
 800f934:	4817      	ldr	r0, [pc, #92]	; (800f994 <WriteVar+0x14c>)
 800f936:	f013 f92d 	bl	8022b94 <memset>
 800f93a:	4b12      	ldr	r3, [pc, #72]	; (800f984 <WriteVar+0x13c>)
 800f93c:	f9b3 3000 	ldrsh.w	r3, [r3]
 800f940:	461a      	mov	r2, r3
 800f942:	4b11      	ldr	r3, [pc, #68]	; (800f988 <WriteVar+0x140>)
 800f944:	18d0      	adds	r0, r2, r3
 800f946:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800f94a:	4a0c      	ldr	r2, [pc, #48]	; (800f97c <WriteVar+0x134>)
 800f94c:	4413      	add	r3, r2
 800f94e:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 800f952:	4619      	mov	r1, r3
 800f954:	f013 f910 	bl	8022b78 <memcpy>
 800f958:	4b0a      	ldr	r3, [pc, #40]	; (800f984 <WriteVar+0x13c>)
 800f95a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800f95e:	b29a      	uxth	r2, r3
 800f960:	89bb      	ldrh	r3, [r7, #12]
 800f962:	4413      	add	r3, r2
 800f964:	b29b      	uxth	r3, r3
 800f966:	b21a      	sxth	r2, r3
 800f968:	4b06      	ldr	r3, [pc, #24]	; (800f984 <WriteVar+0x13c>)
 800f96a:	801a      	strh	r2, [r3, #0]
 800f96c:	4b04      	ldr	r3, [pc, #16]	; (800f980 <WriteVar+0x138>)
 800f96e:	2200      	movs	r2, #0
 800f970:	801a      	strh	r2, [r3, #0]
 800f972:	bf00      	nop
 800f974:	3710      	adds	r7, #16
 800f976:	46bd      	mov	sp, r7
 800f978:	bd80      	pop	{r7, pc}
 800f97a:	bf00      	nop
 800f97c:	200015d4 	.word	0x200015d4
 800f980:	20000792 	.word	0x20000792
 800f984:	20000790 	.word	0x20000790
 800f988:	200017d8 	.word	0x200017d8
 800f98c:	20000794 	.word	0x20000794
 800f990:	20000798 	.word	0x20000798
 800f994:	20000008 	.word	0x20000008

0800f998 <WriteStr>:
 800f998:	b580      	push	{r7, lr}
 800f99a:	b084      	sub	sp, #16
 800f99c:	af00      	add	r7, sp, #0
 800f99e:	6078      	str	r0, [r7, #4]
 800f9a0:	6039      	str	r1, [r7, #0]
 800f9a2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800f9a6:	81fb      	strh	r3, [r7, #14]
 800f9a8:	6878      	ldr	r0, [r7, #4]
 800f9aa:	f7fc fb49 	bl	800c040 <strlen>
 800f9ae:	4603      	mov	r3, r0
 800f9b0:	b21a      	sxth	r2, r3
 800f9b2:	4b40      	ldr	r3, [pc, #256]	; (800fab4 <WriteStr+0x11c>)
 800f9b4:	801a      	strh	r2, [r3, #0]
 800f9b6:	4b40      	ldr	r3, [pc, #256]	; (800fab8 <WriteStr+0x120>)
 800f9b8:	f9b3 3000 	ldrsh.w	r3, [r3]
 800f9bc:	461a      	mov	r2, r3
 800f9be:	4b3f      	ldr	r3, [pc, #252]	; (800fabc <WriteStr+0x124>)
 800f9c0:	4413      	add	r3, r2
 800f9c2:	4a3c      	ldr	r2, [pc, #240]	; (800fab4 <WriteStr+0x11c>)
 800f9c4:	f9b2 2000 	ldrsh.w	r2, [r2]
 800f9c8:	6879      	ldr	r1, [r7, #4]
 800f9ca:	4618      	mov	r0, r3
 800f9cc:	f013 f8d4 	bl	8022b78 <memcpy>
 800f9d0:	4b39      	ldr	r3, [pc, #228]	; (800fab8 <WriteStr+0x120>)
 800f9d2:	f9b3 3000 	ldrsh.w	r3, [r3]
 800f9d6:	b29a      	uxth	r2, r3
 800f9d8:	4b36      	ldr	r3, [pc, #216]	; (800fab4 <WriteStr+0x11c>)
 800f9da:	f9b3 3000 	ldrsh.w	r3, [r3]
 800f9de:	b29b      	uxth	r3, r3
 800f9e0:	4413      	add	r3, r2
 800f9e2:	b29b      	uxth	r3, r3
 800f9e4:	b21a      	sxth	r2, r3
 800f9e6:	4b34      	ldr	r3, [pc, #208]	; (800fab8 <WriteStr+0x120>)
 800f9e8:	801a      	strh	r2, [r3, #0]
 800f9ea:	4b32      	ldr	r3, [pc, #200]	; (800fab4 <WriteStr+0x11c>)
 800f9ec:	f9b3 3000 	ldrsh.w	r3, [r3]
 800f9f0:	461a      	mov	r2, r3
 800f9f2:	4b33      	ldr	r3, [pc, #204]	; (800fac0 <WriteStr+0x128>)
 800f9f4:	681b      	ldr	r3, [r3, #0]
 800f9f6:	4413      	add	r3, r2
 800f9f8:	4a31      	ldr	r2, [pc, #196]	; (800fac0 <WriteStr+0x128>)
 800f9fa:	6013      	str	r3, [r2, #0]
 800f9fc:	4b2e      	ldr	r3, [pc, #184]	; (800fab8 <WriteStr+0x120>)
 800f9fe:	f9b3 3000 	ldrsh.w	r3, [r3]
 800fa02:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 800fa06:	429a      	cmp	r2, r3
 800fa08:	dc4f      	bgt.n	800faaa <WriteStr+0x112>
 800fa0a:	6839      	ldr	r1, [r7, #0]
 800fa0c:	482b      	ldr	r0, [pc, #172]	; (800fabc <WriteStr+0x124>)
 800fa0e:	f7ff fceb 	bl	800f3e8 <ProgFileSec>
 800fa12:	4b2c      	ldr	r3, [pc, #176]	; (800fac4 <WriteStr+0x12c>)
 800fa14:	681b      	ldr	r3, [r3, #0]
 800fa16:	1c5a      	adds	r2, r3, #1
 800fa18:	492a      	ldr	r1, [pc, #168]	; (800fac4 <WriteStr+0x12c>)
 800fa1a:	600a      	str	r2, [r1, #0]
 800fa1c:	105b      	asrs	r3, r3, #1
 800fa1e:	b2db      	uxtb	r3, r3
 800fa20:	f003 0303 	and.w	r3, r3, #3
 800fa24:	b2db      	uxtb	r3, r3
 800fa26:	461a      	mov	r2, r3
 800fa28:	2102      	movs	r1, #2
 800fa2a:	f44f 7084 	mov.w	r0, #264	; 0x108
 800fa2e:	f7ff fe95 	bl	800f75c <PrintClk>
 800fa32:	4b21      	ldr	r3, [pc, #132]	; (800fab8 <WriteStr+0x120>)
 800fa34:	f9b3 3000 	ldrsh.w	r3, [r3]
 800fa38:	b29a      	uxth	r2, r3
 800fa3a:	89fb      	ldrh	r3, [r7, #14]
 800fa3c:	1ad3      	subs	r3, r2, r3
 800fa3e:	b29b      	uxth	r3, r3
 800fa40:	81bb      	strh	r3, [r7, #12]
 800fa42:	4b1c      	ldr	r3, [pc, #112]	; (800fab4 <WriteStr+0x11c>)
 800fa44:	f9b3 3000 	ldrsh.w	r3, [r3]
 800fa48:	b29a      	uxth	r2, r3
 800fa4a:	89bb      	ldrh	r3, [r7, #12]
 800fa4c:	1ad3      	subs	r3, r2, r3
 800fa4e:	b29b      	uxth	r3, r3
 800fa50:	817b      	strh	r3, [r7, #10]
 800fa52:	4b19      	ldr	r3, [pc, #100]	; (800fab8 <WriteStr+0x120>)
 800fa54:	2200      	movs	r2, #0
 800fa56:	801a      	strh	r2, [r3, #0]
 800fa58:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800fa5c:	461a      	mov	r2, r3
 800fa5e:	2100      	movs	r1, #0
 800fa60:	4816      	ldr	r0, [pc, #88]	; (800fabc <WriteStr+0x124>)
 800fa62:	f013 f897 	bl	8022b94 <memset>
 800fa66:	f44f 729b 	mov.w	r2, #310	; 0x136
 800fa6a:	2100      	movs	r1, #0
 800fa6c:	4816      	ldr	r0, [pc, #88]	; (800fac8 <WriteStr+0x130>)
 800fa6e:	f013 f891 	bl	8022b94 <memset>
 800fa72:	4b11      	ldr	r3, [pc, #68]	; (800fab8 <WriteStr+0x120>)
 800fa74:	f9b3 3000 	ldrsh.w	r3, [r3]
 800fa78:	461a      	mov	r2, r3
 800fa7a:	4b10      	ldr	r3, [pc, #64]	; (800fabc <WriteStr+0x124>)
 800fa7c:	18d0      	adds	r0, r2, r3
 800fa7e:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800fa82:	687a      	ldr	r2, [r7, #4]
 800fa84:	4413      	add	r3, r2
 800fa86:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 800fa8a:	4619      	mov	r1, r3
 800fa8c:	f013 f874 	bl	8022b78 <memcpy>
 800fa90:	4b09      	ldr	r3, [pc, #36]	; (800fab8 <WriteStr+0x120>)
 800fa92:	f9b3 3000 	ldrsh.w	r3, [r3]
 800fa96:	b29a      	uxth	r2, r3
 800fa98:	89bb      	ldrh	r3, [r7, #12]
 800fa9a:	4413      	add	r3, r2
 800fa9c:	b29b      	uxth	r3, r3
 800fa9e:	b21a      	sxth	r2, r3
 800faa0:	4b05      	ldr	r3, [pc, #20]	; (800fab8 <WriteStr+0x120>)
 800faa2:	801a      	strh	r2, [r3, #0]
 800faa4:	4b03      	ldr	r3, [pc, #12]	; (800fab4 <WriteStr+0x11c>)
 800faa6:	2200      	movs	r2, #0
 800faa8:	801a      	strh	r2, [r3, #0]
 800faaa:	bf00      	nop
 800faac:	3710      	adds	r7, #16
 800faae:	46bd      	mov	sp, r7
 800fab0:	bd80      	pop	{r7, pc}
 800fab2:	bf00      	nop
 800fab4:	20000792 	.word	0x20000792
 800fab8:	20000790 	.word	0x20000790
 800fabc:	200017d8 	.word	0x200017d8
 800fac0:	20000794 	.word	0x20000794
 800fac4:	20000798 	.word	0x20000798
 800fac8:	20000008 	.word	0x20000008

0800facc <Make_Filename>:
 800facc:	b580      	push	{r7, lr}
 800face:	b084      	sub	sp, #16
 800fad0:	af00      	add	r7, sp, #0
 800fad2:	4603      	mov	r3, r0
 800fad4:	6039      	str	r1, [r7, #0]
 800fad6:	80fb      	strh	r3, [r7, #6]
 800fad8:	88fb      	ldrh	r3, [r7, #6]
 800fada:	b2da      	uxtb	r2, r3
 800fadc:	f107 030c 	add.w	r3, r7, #12
 800fae0:	4611      	mov	r1, r2
 800fae2:	4618      	mov	r0, r3
 800fae4:	f001 ff3c 	bl	8011960 <u8ToDec3>
 800fae8:	683b      	ldr	r3, [r7, #0]
 800faea:	3304      	adds	r3, #4
 800faec:	7b3a      	ldrb	r2, [r7, #12]
 800faee:	701a      	strb	r2, [r3, #0]
 800faf0:	683b      	ldr	r3, [r7, #0]
 800faf2:	3305      	adds	r3, #5
 800faf4:	7b7a      	ldrb	r2, [r7, #13]
 800faf6:	701a      	strb	r2, [r3, #0]
 800faf8:	683b      	ldr	r3, [r7, #0]
 800fafa:	3306      	adds	r3, #6
 800fafc:	7bba      	ldrb	r2, [r7, #14]
 800fafe:	701a      	strb	r2, [r3, #0]
 800fb00:	bf00      	nop
 800fb02:	3710      	adds	r7, #16
 800fb04:	46bd      	mov	sp, r7
 800fb06:	bd80      	pop	{r7, pc}

0800fb08 <Load_File_Num>:
 800fb08:	b580      	push	{r7, lr}
 800fb0a:	b08a      	sub	sp, #40	; 0x28
 800fb0c:	af00      	add	r7, sp, #0
 800fb0e:	4603      	mov	r3, r0
 800fb10:	71fb      	strb	r3, [r7, #7]
 800fb12:	2300      	movs	r3, #0
 800fb14:	84fb      	strh	r3, [r7, #38]	; 0x26
 800fb16:	4a87      	ldr	r2, [pc, #540]	; (800fd34 <Load_File_Num+0x22c>)
 800fb18:	f107 0318 	add.w	r3, r7, #24
 800fb1c:	ca07      	ldmia	r2, {r0, r1, r2}
 800fb1e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800fb22:	79fb      	ldrb	r3, [r7, #7]
 800fb24:	3b1d      	subs	r3, #29
 800fb26:	2b04      	cmp	r3, #4
 800fb28:	f200 80fe 	bhi.w	800fd28 <Load_File_Num+0x220>
 800fb2c:	a201      	add	r2, pc, #4	; (adr r2, 800fb34 <Load_File_Num+0x2c>)
 800fb2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fb32:	bf00      	nop
 800fb34:	0800fb49 	.word	0x0800fb49
 800fb38:	0800fba9 	.word	0x0800fba9
 800fb3c:	0800fc09 	.word	0x0800fc09
 800fb40:	0800fc69 	.word	0x0800fc69
 800fb44:	0800fcc9 	.word	0x0800fcc9
 800fb48:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800fb4c:	2100      	movs	r1, #0
 800fb4e:	487a      	ldr	r0, [pc, #488]	; (800fd38 <Load_File_Num+0x230>)
 800fb50:	f013 f820 	bl	8022b94 <memset>
 800fb54:	4a79      	ldr	r2, [pc, #484]	; (800fd3c <Load_File_Num+0x234>)
 800fb56:	f107 0318 	add.w	r3, r7, #24
 800fb5a:	ca07      	ldmia	r2, {r0, r1, r2}
 800fb5c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800fb60:	f107 0218 	add.w	r2, r7, #24
 800fb64:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 800fb68:	4611      	mov	r1, r2
 800fb6a:	4618      	mov	r0, r3
 800fb6c:	f7ff ffae 	bl	800facc <Make_Filename>
 800fb70:	e00d      	b.n	800fb8e <Load_File_Num+0x86>
 800fb72:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 800fb76:	b29b      	uxth	r3, r3
 800fb78:	3301      	adds	r3, #1
 800fb7a:	b29b      	uxth	r3, r3
 800fb7c:	84fb      	strh	r3, [r7, #38]	; 0x26
 800fb7e:	f107 0218 	add.w	r2, r7, #24
 800fb82:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 800fb86:	4611      	mov	r1, r2
 800fb88:	4618      	mov	r0, r3
 800fb8a:	f7ff ff9f 	bl	800facc <Make_Filename>
 800fb8e:	f107 030c 	add.w	r3, r7, #12
 800fb92:	f107 0210 	add.w	r2, r7, #16
 800fb96:	f107 0118 	add.w	r1, r7, #24
 800fb9a:	4867      	ldr	r0, [pc, #412]	; (800fd38 <Load_File_Num+0x230>)
 800fb9c:	f7ff fa32 	bl	800f004 <OpenFileRd>
 800fba0:	4603      	mov	r3, r0
 800fba2:	2b00      	cmp	r3, #0
 800fba4:	d0e5      	beq.n	800fb72 <Load_File_Num+0x6a>
 800fba6:	e0bf      	b.n	800fd28 <Load_File_Num+0x220>
 800fba8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800fbac:	2100      	movs	r1, #0
 800fbae:	4862      	ldr	r0, [pc, #392]	; (800fd38 <Load_File_Num+0x230>)
 800fbb0:	f012 fff0 	bl	8022b94 <memset>
 800fbb4:	4a62      	ldr	r2, [pc, #392]	; (800fd40 <Load_File_Num+0x238>)
 800fbb6:	f107 0318 	add.w	r3, r7, #24
 800fbba:	ca07      	ldmia	r2, {r0, r1, r2}
 800fbbc:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800fbc0:	f107 0218 	add.w	r2, r7, #24
 800fbc4:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 800fbc8:	4611      	mov	r1, r2
 800fbca:	4618      	mov	r0, r3
 800fbcc:	f7ff ff7e 	bl	800facc <Make_Filename>
 800fbd0:	e00d      	b.n	800fbee <Load_File_Num+0xe6>
 800fbd2:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 800fbd6:	b29b      	uxth	r3, r3
 800fbd8:	3301      	adds	r3, #1
 800fbda:	b29b      	uxth	r3, r3
 800fbdc:	84fb      	strh	r3, [r7, #38]	; 0x26
 800fbde:	f107 0218 	add.w	r2, r7, #24
 800fbe2:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 800fbe6:	4611      	mov	r1, r2
 800fbe8:	4618      	mov	r0, r3
 800fbea:	f7ff ff6f 	bl	800facc <Make_Filename>
 800fbee:	f107 030c 	add.w	r3, r7, #12
 800fbf2:	f107 0210 	add.w	r2, r7, #16
 800fbf6:	f107 0118 	add.w	r1, r7, #24
 800fbfa:	484f      	ldr	r0, [pc, #316]	; (800fd38 <Load_File_Num+0x230>)
 800fbfc:	f7ff fa02 	bl	800f004 <OpenFileRd>
 800fc00:	4603      	mov	r3, r0
 800fc02:	2b00      	cmp	r3, #0
 800fc04:	d0e5      	beq.n	800fbd2 <Load_File_Num+0xca>
 800fc06:	e08f      	b.n	800fd28 <Load_File_Num+0x220>
 800fc08:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800fc0c:	2100      	movs	r1, #0
 800fc0e:	484a      	ldr	r0, [pc, #296]	; (800fd38 <Load_File_Num+0x230>)
 800fc10:	f012 ffc0 	bl	8022b94 <memset>
 800fc14:	4a4b      	ldr	r2, [pc, #300]	; (800fd44 <Load_File_Num+0x23c>)
 800fc16:	f107 0318 	add.w	r3, r7, #24
 800fc1a:	ca07      	ldmia	r2, {r0, r1, r2}
 800fc1c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800fc20:	f107 0218 	add.w	r2, r7, #24
 800fc24:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 800fc28:	4611      	mov	r1, r2
 800fc2a:	4618      	mov	r0, r3
 800fc2c:	f7ff ff4e 	bl	800facc <Make_Filename>
 800fc30:	e00d      	b.n	800fc4e <Load_File_Num+0x146>
 800fc32:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 800fc36:	b29b      	uxth	r3, r3
 800fc38:	3301      	adds	r3, #1
 800fc3a:	b29b      	uxth	r3, r3
 800fc3c:	84fb      	strh	r3, [r7, #38]	; 0x26
 800fc3e:	f107 0218 	add.w	r2, r7, #24
 800fc42:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 800fc46:	4611      	mov	r1, r2
 800fc48:	4618      	mov	r0, r3
 800fc4a:	f7ff ff3f 	bl	800facc <Make_Filename>
 800fc4e:	f107 030c 	add.w	r3, r7, #12
 800fc52:	f107 0210 	add.w	r2, r7, #16
 800fc56:	f107 0118 	add.w	r1, r7, #24
 800fc5a:	4837      	ldr	r0, [pc, #220]	; (800fd38 <Load_File_Num+0x230>)
 800fc5c:	f7ff f9d2 	bl	800f004 <OpenFileRd>
 800fc60:	4603      	mov	r3, r0
 800fc62:	2b00      	cmp	r3, #0
 800fc64:	d0e5      	beq.n	800fc32 <Load_File_Num+0x12a>
 800fc66:	e05f      	b.n	800fd28 <Load_File_Num+0x220>
 800fc68:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800fc6c:	2100      	movs	r1, #0
 800fc6e:	4832      	ldr	r0, [pc, #200]	; (800fd38 <Load_File_Num+0x230>)
 800fc70:	f012 ff90 	bl	8022b94 <memset>
 800fc74:	4a34      	ldr	r2, [pc, #208]	; (800fd48 <Load_File_Num+0x240>)
 800fc76:	f107 0318 	add.w	r3, r7, #24
 800fc7a:	ca07      	ldmia	r2, {r0, r1, r2}
 800fc7c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800fc80:	f107 0218 	add.w	r2, r7, #24
 800fc84:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 800fc88:	4611      	mov	r1, r2
 800fc8a:	4618      	mov	r0, r3
 800fc8c:	f7ff ff1e 	bl	800facc <Make_Filename>
 800fc90:	e00d      	b.n	800fcae <Load_File_Num+0x1a6>
 800fc92:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 800fc96:	b29b      	uxth	r3, r3
 800fc98:	3301      	adds	r3, #1
 800fc9a:	b29b      	uxth	r3, r3
 800fc9c:	84fb      	strh	r3, [r7, #38]	; 0x26
 800fc9e:	f107 0218 	add.w	r2, r7, #24
 800fca2:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 800fca6:	4611      	mov	r1, r2
 800fca8:	4618      	mov	r0, r3
 800fcaa:	f7ff ff0f 	bl	800facc <Make_Filename>
 800fcae:	f107 030c 	add.w	r3, r7, #12
 800fcb2:	f107 0210 	add.w	r2, r7, #16
 800fcb6:	f107 0118 	add.w	r1, r7, #24
 800fcba:	481f      	ldr	r0, [pc, #124]	; (800fd38 <Load_File_Num+0x230>)
 800fcbc:	f7ff f9a2 	bl	800f004 <OpenFileRd>
 800fcc0:	4603      	mov	r3, r0
 800fcc2:	2b00      	cmp	r3, #0
 800fcc4:	d0e5      	beq.n	800fc92 <Load_File_Num+0x18a>
 800fcc6:	e02f      	b.n	800fd28 <Load_File_Num+0x220>
 800fcc8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800fccc:	2100      	movs	r1, #0
 800fcce:	481a      	ldr	r0, [pc, #104]	; (800fd38 <Load_File_Num+0x230>)
 800fcd0:	f012 ff60 	bl	8022b94 <memset>
 800fcd4:	4a1d      	ldr	r2, [pc, #116]	; (800fd4c <Load_File_Num+0x244>)
 800fcd6:	f107 0318 	add.w	r3, r7, #24
 800fcda:	ca07      	ldmia	r2, {r0, r1, r2}
 800fcdc:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800fce0:	f107 0218 	add.w	r2, r7, #24
 800fce4:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 800fce8:	4611      	mov	r1, r2
 800fcea:	4618      	mov	r0, r3
 800fcec:	f7ff feee 	bl	800facc <Make_Filename>
 800fcf0:	e00d      	b.n	800fd0e <Load_File_Num+0x206>
 800fcf2:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 800fcf6:	b29b      	uxth	r3, r3
 800fcf8:	3301      	adds	r3, #1
 800fcfa:	b29b      	uxth	r3, r3
 800fcfc:	84fb      	strh	r3, [r7, #38]	; 0x26
 800fcfe:	f107 0218 	add.w	r2, r7, #24
 800fd02:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 800fd06:	4611      	mov	r1, r2
 800fd08:	4618      	mov	r0, r3
 800fd0a:	f7ff fedf 	bl	800facc <Make_Filename>
 800fd0e:	f107 030c 	add.w	r3, r7, #12
 800fd12:	f107 0210 	add.w	r2, r7, #16
 800fd16:	f107 0118 	add.w	r1, r7, #24
 800fd1a:	4807      	ldr	r0, [pc, #28]	; (800fd38 <Load_File_Num+0x230>)
 800fd1c:	f7ff f972 	bl	800f004 <OpenFileRd>
 800fd20:	4603      	mov	r3, r0
 800fd22:	2b00      	cmp	r3, #0
 800fd24:	d0e5      	beq.n	800fcf2 <Load_File_Num+0x1ea>
 800fd26:	bf00      	nop
 800fd28:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 800fd2c:	4618      	mov	r0, r3
 800fd2e:	3728      	adds	r7, #40	; 0x28
 800fd30:	46bd      	mov	sp, r7
 800fd32:	bd80      	pop	{r7, pc}
 800fd34:	08000238 	.word	0x08000238
 800fd38:	200017d8 	.word	0x200017d8
 800fd3c:	080001fc 	.word	0x080001fc
 800fd40:	08000208 	.word	0x08000208
 800fd44:	08000214 	.word	0x08000214
 800fd48:	08000220 	.word	0x08000220
 800fd4c:	0800022c 	.word	0x0800022c

0800fd50 <File_Num>:
 800fd50:	b580      	push	{r7, lr}
 800fd52:	af00      	add	r7, sp, #0
 800fd54:	201d      	movs	r0, #29
 800fd56:	f7ff fed7 	bl	800fb08 <Load_File_Num>
 800fd5a:	4603      	mov	r3, r0
 800fd5c:	461a      	mov	r2, r3
 800fd5e:	4b12      	ldr	r3, [pc, #72]	; (800fda8 <File_Num+0x58>)
 800fd60:	f8a3 20ec 	strh.w	r2, [r3, #236]	; 0xec
 800fd64:	201e      	movs	r0, #30
 800fd66:	f7ff fecf 	bl	800fb08 <Load_File_Num>
 800fd6a:	4603      	mov	r3, r0
 800fd6c:	461a      	mov	r2, r3
 800fd6e:	4b0e      	ldr	r3, [pc, #56]	; (800fda8 <File_Num+0x58>)
 800fd70:	f8a3 20f4 	strh.w	r2, [r3, #244]	; 0xf4
 800fd74:	201f      	movs	r0, #31
 800fd76:	f7ff fec7 	bl	800fb08 <Load_File_Num>
 800fd7a:	4603      	mov	r3, r0
 800fd7c:	461a      	mov	r2, r3
 800fd7e:	4b0a      	ldr	r3, [pc, #40]	; (800fda8 <File_Num+0x58>)
 800fd80:	f8a3 20fc 	strh.w	r2, [r3, #252]	; 0xfc
 800fd84:	2020      	movs	r0, #32
 800fd86:	f7ff febf 	bl	800fb08 <Load_File_Num>
 800fd8a:	4603      	mov	r3, r0
 800fd8c:	461a      	mov	r2, r3
 800fd8e:	4b06      	ldr	r3, [pc, #24]	; (800fda8 <File_Num+0x58>)
 800fd90:	f8a3 2104 	strh.w	r2, [r3, #260]	; 0x104
 800fd94:	2021      	movs	r0, #33	; 0x21
 800fd96:	f7ff feb7 	bl	800fb08 <Load_File_Num>
 800fd9a:	4603      	mov	r3, r0
 800fd9c:	461a      	mov	r2, r3
 800fd9e:	4b02      	ldr	r3, [pc, #8]	; (800fda8 <File_Num+0x58>)
 800fda0:	f8a3 210c 	strh.w	r2, [r3, #268]	; 0x10c
 800fda4:	bf00      	nop
 800fda6:	bd80      	pop	{r7, pc}
 800fda8:	20000298 	.word	0x20000298

0800fdac <Load_Buf>:
 800fdac:	b580      	push	{r7, lr}
 800fdae:	b08e      	sub	sp, #56	; 0x38
 800fdb0:	af00      	add	r7, sp, #0
 800fdb2:	4603      	mov	r3, r0
 800fdb4:	80fb      	strh	r3, [r7, #6]
 800fdb6:	4a66      	ldr	r2, [pc, #408]	; (800ff50 <Load_Buf+0x1a4>)
 800fdb8:	f107 0318 	add.w	r3, r7, #24
 800fdbc:	ca07      	ldmia	r2, {r0, r1, r2}
 800fdbe:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800fdc2:	2301      	movs	r3, #1
 800fdc4:	62fb      	str	r3, [r7, #44]	; 0x2c
 800fdc6:	f107 0218 	add.w	r2, r7, #24
 800fdca:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800fdce:	4611      	mov	r1, r2
 800fdd0:	4618      	mov	r0, r3
 800fdd2:	f7ff fe7b 	bl	800facc <Make_Filename>
 800fdd6:	f107 030c 	add.w	r3, r7, #12
 800fdda:	f107 0210 	add.w	r2, r7, #16
 800fdde:	f107 0118 	add.w	r1, r7, #24
 800fde2:	485c      	ldr	r0, [pc, #368]	; (800ff54 <Load_Buf+0x1a8>)
 800fde4:	f7ff f90e 	bl	800f004 <OpenFileRd>
 800fde8:	4603      	mov	r3, r0
 800fdea:	62fb      	str	r3, [r7, #44]	; 0x2c
 800fdec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fdee:	2b00      	cmp	r3, #0
 800fdf0:	d002      	beq.n	800fdf8 <Load_Buf+0x4c>
 800fdf2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fdf4:	b2db      	uxtb	r3, r3
 800fdf6:	e0a6      	b.n	800ff46 <Load_Buf+0x19a>
 800fdf8:	2302      	movs	r3, #2
 800fdfa:	633b      	str	r3, [r7, #48]	; 0x30
 800fdfc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800fe00:	62bb      	str	r3, [r7, #40]	; 0x28
 800fe02:	4b55      	ldr	r3, [pc, #340]	; (800ff58 <Load_Buf+0x1ac>)
 800fe04:	f9b3 304c 	ldrsh.w	r3, [r3, #76]	; 0x4c
 800fe08:	2b03      	cmp	r3, #3
 800fe0a:	d101      	bne.n	800fe10 <Load_Buf+0x64>
 800fe0c:	2304      	movs	r3, #4
 800fe0e:	633b      	str	r3, [r7, #48]	; 0x30
 800fe10:	2300      	movs	r3, #0
 800fe12:	637b      	str	r3, [r7, #52]	; 0x34
 800fe14:	e01d      	b.n	800fe52 <Load_Buf+0xa6>
 800fe16:	f107 0310 	add.w	r3, r7, #16
 800fe1a:	4619      	mov	r1, r3
 800fe1c:	484d      	ldr	r0, [pc, #308]	; (800ff54 <Load_Buf+0x1a8>)
 800fe1e:	f7ff fb29 	bl	800f474 <ReadFileSec>
 800fe22:	4603      	mov	r3, r0
 800fe24:	2b00      	cmp	r3, #0
 800fe26:	d001      	beq.n	800fe2c <Load_Buf+0x80>
 800fe28:	2303      	movs	r3, #3
 800fe2a:	e08c      	b.n	800ff46 <Load_Buf+0x19a>
 800fe2c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fe2e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800fe30:	fb02 f303 	mul.w	r3, r2, r3
 800fe34:	0fda      	lsrs	r2, r3, #31
 800fe36:	4413      	add	r3, r2
 800fe38:	105b      	asrs	r3, r3, #1
 800fe3a:	3302      	adds	r3, #2
 800fe3c:	005b      	lsls	r3, r3, #1
 800fe3e:	4a47      	ldr	r2, [pc, #284]	; (800ff5c <Load_Buf+0x1b0>)
 800fe40:	4413      	add	r3, r2
 800fe42:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800fe44:	4943      	ldr	r1, [pc, #268]	; (800ff54 <Load_Buf+0x1a8>)
 800fe46:	4618      	mov	r0, r3
 800fe48:	f012 fe96 	bl	8022b78 <memcpy>
 800fe4c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fe4e:	3301      	adds	r3, #1
 800fe50:	637b      	str	r3, [r7, #52]	; 0x34
 800fe52:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800fe54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fe56:	429a      	cmp	r2, r3
 800fe58:	dbdd      	blt.n	800fe16 <Load_Buf+0x6a>
 800fe5a:	f107 0310 	add.w	r3, r7, #16
 800fe5e:	4619      	mov	r1, r3
 800fe60:	483c      	ldr	r0, [pc, #240]	; (800ff54 <Load_Buf+0x1a8>)
 800fe62:	f7ff fb07 	bl	800f474 <ReadFileSec>
 800fe66:	4603      	mov	r3, r0
 800fe68:	2b00      	cmp	r3, #0
 800fe6a:	d001      	beq.n	800fe70 <Load_Buf+0xc4>
 800fe6c:	2303      	movs	r3, #3
 800fe6e:	e06a      	b.n	800ff46 <Load_Buf+0x19a>
 800fe70:	4b3b      	ldr	r3, [pc, #236]	; (800ff60 <Load_Buf+0x1b4>)
 800fe72:	627b      	str	r3, [r7, #36]	; 0x24
 800fe74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fe76:	1c9a      	adds	r2, r3, #2
 800fe78:	627a      	str	r2, [r7, #36]	; 0x24
 800fe7a:	f64a 2255 	movw	r2, #43605	; 0xaa55
 800fe7e:	801a      	strh	r2, [r3, #0]
 800fe80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fe82:	1c9a      	adds	r2, r3, #2
 800fe84:	627a      	str	r2, [r7, #36]	; 0x24
 800fe86:	4a35      	ldr	r2, [pc, #212]	; (800ff5c <Load_Buf+0x1b0>)
 800fe88:	f9b2 2000 	ldrsh.w	r2, [r2]
 800fe8c:	801a      	strh	r2, [r3, #0]
 800fe8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fe90:	1c9a      	adds	r2, r3, #2
 800fe92:	627a      	str	r2, [r7, #36]	; 0x24
 800fe94:	4a31      	ldr	r2, [pc, #196]	; (800ff5c <Load_Buf+0x1b0>)
 800fe96:	f9b2 2002 	ldrsh.w	r2, [r2, #2]
 800fe9a:	801a      	strh	r2, [r3, #0]
 800fe9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fe9e:	1c9a      	adds	r2, r3, #2
 800fea0:	627a      	str	r2, [r7, #36]	; 0x24
 800fea2:	4a2d      	ldr	r2, [pc, #180]	; (800ff58 <Load_Buf+0x1ac>)
 800fea4:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 800fea8:	801a      	strh	r2, [r3, #0]
 800feaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800feac:	1c9a      	adds	r2, r3, #2
 800feae:	627a      	str	r2, [r7, #36]	; 0x24
 800feb0:	4a29      	ldr	r2, [pc, #164]	; (800ff58 <Load_Buf+0x1ac>)
 800feb2:	f9b2 2014 	ldrsh.w	r2, [r2, #20]
 800feb6:	801a      	strh	r2, [r3, #0]
 800feb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800feba:	1c9a      	adds	r2, r3, #2
 800febc:	627a      	str	r2, [r7, #36]	; 0x24
 800febe:	4a26      	ldr	r2, [pc, #152]	; (800ff58 <Load_Buf+0x1ac>)
 800fec0:	f9b2 204c 	ldrsh.w	r2, [r2, #76]	; 0x4c
 800fec4:	801a      	strh	r2, [r3, #0]
 800fec6:	4b23      	ldr	r3, [pc, #140]	; (800ff54 <Load_Buf+0x1a8>)
 800fec8:	627b      	str	r3, [r7, #36]	; 0x24
 800feca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fecc:	1c9a      	adds	r2, r3, #2
 800fece:	627a      	str	r2, [r7, #36]	; 0x24
 800fed0:	f9b3 2000 	ldrsh.w	r2, [r3]
 800fed4:	4b21      	ldr	r3, [pc, #132]	; (800ff5c <Load_Buf+0x1b0>)
 800fed6:	801a      	strh	r2, [r3, #0]
 800fed8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800feda:	1c9a      	adds	r2, r3, #2
 800fedc:	627a      	str	r2, [r7, #36]	; 0x24
 800fede:	f9b3 2000 	ldrsh.w	r2, [r3]
 800fee2:	4b1e      	ldr	r3, [pc, #120]	; (800ff5c <Load_Buf+0x1b0>)
 800fee4:	805a      	strh	r2, [r3, #2]
 800fee6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fee8:	1c9a      	adds	r2, r3, #2
 800feea:	627a      	str	r2, [r7, #36]	; 0x24
 800feec:	f9b3 2000 	ldrsh.w	r2, [r3]
 800fef0:	4b19      	ldr	r3, [pc, #100]	; (800ff58 <Load_Buf+0x1ac>)
 800fef2:	809a      	strh	r2, [r3, #4]
 800fef4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fef6:	1c9a      	adds	r2, r3, #2
 800fef8:	627a      	str	r2, [r7, #36]	; 0x24
 800fefa:	f9b3 2000 	ldrsh.w	r2, [r3]
 800fefe:	4b16      	ldr	r3, [pc, #88]	; (800ff58 <Load_Buf+0x1ac>)
 800ff00:	829a      	strh	r2, [r3, #20]
 800ff02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ff04:	1c9a      	adds	r2, r3, #2
 800ff06:	627a      	str	r2, [r7, #36]	; 0x24
 800ff08:	f9b3 2000 	ldrsh.w	r2, [r3]
 800ff0c:	4b12      	ldr	r3, [pc, #72]	; (800ff58 <Load_Buf+0x1ac>)
 800ff0e:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
 800ff12:	4b14      	ldr	r3, [pc, #80]	; (800ff64 <Load_Buf+0x1b8>)
 800ff14:	f9b3 3000 	ldrsh.w	r3, [r3]
 800ff18:	f043 0301 	orr.w	r3, r3, #1
 800ff1c:	b21a      	sxth	r2, r3
 800ff1e:	4b11      	ldr	r3, [pc, #68]	; (800ff64 <Load_Buf+0x1b8>)
 800ff20:	801a      	strh	r2, [r3, #0]
 800ff22:	f004 fa51 	bl	80143c8 <DispStatus>
 800ff26:	4b0c      	ldr	r3, [pc, #48]	; (800ff58 <Load_Buf+0x1ac>)
 800ff28:	f9b3 311c 	ldrsh.w	r3, [r3, #284]	; 0x11c
 800ff2c:	2b62      	cmp	r3, #98	; 0x62
 800ff2e:	dc09      	bgt.n	800ff44 <Load_Buf+0x198>
 800ff30:	4b09      	ldr	r3, [pc, #36]	; (800ff58 <Load_Buf+0x1ac>)
 800ff32:	f9b3 311c 	ldrsh.w	r3, [r3, #284]	; 0x11c
 800ff36:	b29b      	uxth	r3, r3
 800ff38:	3301      	adds	r3, #1
 800ff3a:	b29b      	uxth	r3, r3
 800ff3c:	b21a      	sxth	r2, r3
 800ff3e:	4b06      	ldr	r3, [pc, #24]	; (800ff58 <Load_Buf+0x1ac>)
 800ff40:	f8a3 211c 	strh.w	r2, [r3, #284]	; 0x11c
 800ff44:	2300      	movs	r3, #0
 800ff46:	4618      	mov	r0, r3
 800ff48:	3738      	adds	r7, #56	; 0x38
 800ff4a:	46bd      	mov	sp, r7
 800ff4c:	bd80      	pop	{r7, pc}
 800ff4e:	bf00      	nop
 800ff50:	08000214 	.word	0x08000214
 800ff54:	200017d8 	.word	0x200017d8
 800ff58:	20000298 	.word	0x20000298
 800ff5c:	20002870 	.word	0x20002870
 800ff60:	200015d8 	.word	0x200015d8
 800ff64:	200007a0 	.word	0x200007a0

0800ff68 <Save_Buf>:
 800ff68:	b580      	push	{r7, lr}
 800ff6a:	b08e      	sub	sp, #56	; 0x38
 800ff6c:	af00      	add	r7, sp, #0
 800ff6e:	4603      	mov	r3, r0
 800ff70:	80fb      	strh	r3, [r7, #6]
 800ff72:	4a64      	ldr	r2, [pc, #400]	; (8010104 <Save_Buf+0x19c>)
 800ff74:	f107 0318 	add.w	r3, r7, #24
 800ff78:	ca07      	ldmia	r2, {r0, r1, r2}
 800ff7a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800ff7e:	2300      	movs	r3, #0
 800ff80:	637b      	str	r3, [r7, #52]	; 0x34
 800ff82:	2304      	movs	r3, #4
 800ff84:	62fb      	str	r3, [r7, #44]	; 0x2c
 800ff86:	2300      	movs	r3, #0
 800ff88:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ff8c:	2302      	movs	r3, #2
 800ff8e:	863b      	strh	r3, [r7, #48]	; 0x30
 800ff90:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800ff94:	857b      	strh	r3, [r7, #42]	; 0x2a
 800ff96:	4b5c      	ldr	r3, [pc, #368]	; (8010108 <Save_Buf+0x1a0>)
 800ff98:	f9b3 304c 	ldrsh.w	r3, [r3, #76]	; 0x4c
 800ff9c:	2b03      	cmp	r3, #3
 800ff9e:	d101      	bne.n	800ffa4 <Save_Buf+0x3c>
 800ffa0:	2304      	movs	r3, #4
 800ffa2:	863b      	strh	r3, [r7, #48]	; 0x30
 800ffa4:	f107 0218 	add.w	r2, r7, #24
 800ffa8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800ffac:	4611      	mov	r1, r2
 800ffae:	4618      	mov	r0, r3
 800ffb0:	f7ff fd8c 	bl	800facc <Make_Filename>
 800ffb4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800ffb8:	2100      	movs	r1, #0
 800ffba:	4854      	ldr	r0, [pc, #336]	; (801010c <Save_Buf+0x1a4>)
 800ffbc:	f012 fdea 	bl	8022b94 <memset>
 800ffc0:	f107 030c 	add.w	r3, r7, #12
 800ffc4:	f107 0210 	add.w	r2, r7, #16
 800ffc8:	f107 0118 	add.w	r1, r7, #24
 800ffcc:	484f      	ldr	r0, [pc, #316]	; (801010c <Save_Buf+0x1a4>)
 800ffce:	f7ff fae3 	bl	800f598 <OpenFileWr>
 800ffd2:	4603      	mov	r3, r0
 800ffd4:	2b00      	cmp	r3, #0
 800ffd6:	d002      	beq.n	800ffde <Save_Buf+0x76>
 800ffd8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ffda:	b2db      	uxtb	r3, r3
 800ffdc:	e08e      	b.n	80100fc <Save_Buf+0x194>
 800ffde:	2300      	movs	r3, #0
 800ffe0:	637b      	str	r3, [r7, #52]	; 0x34
 800ffe2:	e02f      	b.n	8010044 <Save_Buf+0xdc>
 800ffe4:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 800ffe8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ffea:	fb02 f303 	mul.w	r3, r2, r3
 800ffee:	0fda      	lsrs	r2, r3, #31
 800fff0:	4413      	add	r3, r2
 800fff2:	105b      	asrs	r3, r3, #1
 800fff4:	3302      	adds	r3, #2
 800fff6:	005b      	lsls	r3, r3, #1
 800fff8:	4a45      	ldr	r2, [pc, #276]	; (8010110 <Save_Buf+0x1a8>)
 800fffa:	4413      	add	r3, r2
 800fffc:	f9b7 202a 	ldrsh.w	r2, [r7, #42]	; 0x2a
 8010000:	4619      	mov	r1, r3
 8010002:	4842      	ldr	r0, [pc, #264]	; (801010c <Save_Buf+0x1a4>)
 8010004:	f012 fdb8 	bl	8022b78 <memcpy>
 8010008:	f107 0310 	add.w	r3, r7, #16
 801000c:	4619      	mov	r1, r3
 801000e:	483f      	ldr	r0, [pc, #252]	; (801010c <Save_Buf+0x1a4>)
 8010010:	f7ff f9ea 	bl	800f3e8 <ProgFileSec>
 8010014:	4603      	mov	r3, r0
 8010016:	2b00      	cmp	r3, #0
 8010018:	d001      	beq.n	801001e <Save_Buf+0xb6>
 801001a:	2303      	movs	r3, #3
 801001c:	e06e      	b.n	80100fc <Save_Buf+0x194>
 801001e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8010022:	1c5a      	adds	r2, r3, #1
 8010024:	f887 2033 	strb.w	r2, [r7, #51]	; 0x33
 8010028:	085b      	lsrs	r3, r3, #1
 801002a:	b2db      	uxtb	r3, r3
 801002c:	f003 0303 	and.w	r3, r3, #3
 8010030:	b2db      	uxtb	r3, r3
 8010032:	461a      	mov	r2, r3
 8010034:	2102      	movs	r1, #2
 8010036:	f44f 7084 	mov.w	r0, #264	; 0x108
 801003a:	f7ff fb8f 	bl	800f75c <PrintClk>
 801003e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010040:	3301      	adds	r3, #1
 8010042:	637b      	str	r3, [r7, #52]	; 0x34
 8010044:	f9b7 3030 	ldrsh.w	r3, [r7, #48]	; 0x30
 8010048:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801004a:	429a      	cmp	r2, r3
 801004c:	dbca      	blt.n	800ffe4 <Save_Buf+0x7c>
 801004e:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8010052:	461a      	mov	r2, r3
 8010054:	2100      	movs	r1, #0
 8010056:	482d      	ldr	r0, [pc, #180]	; (801010c <Save_Buf+0x1a4>)
 8010058:	f012 fd9c 	bl	8022b94 <memset>
 801005c:	4b2b      	ldr	r3, [pc, #172]	; (801010c <Save_Buf+0x1a4>)
 801005e:	627b      	str	r3, [r7, #36]	; 0x24
 8010060:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010062:	1c9a      	adds	r2, r3, #2
 8010064:	627a      	str	r2, [r7, #36]	; 0x24
 8010066:	4a2a      	ldr	r2, [pc, #168]	; (8010110 <Save_Buf+0x1a8>)
 8010068:	f9b2 2000 	ldrsh.w	r2, [r2]
 801006c:	801a      	strh	r2, [r3, #0]
 801006e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010070:	1c9a      	adds	r2, r3, #2
 8010072:	627a      	str	r2, [r7, #36]	; 0x24
 8010074:	4a26      	ldr	r2, [pc, #152]	; (8010110 <Save_Buf+0x1a8>)
 8010076:	f9b2 2002 	ldrsh.w	r2, [r2, #2]
 801007a:	801a      	strh	r2, [r3, #0]
 801007c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801007e:	1c9a      	adds	r2, r3, #2
 8010080:	627a      	str	r2, [r7, #36]	; 0x24
 8010082:	4a21      	ldr	r2, [pc, #132]	; (8010108 <Save_Buf+0x1a0>)
 8010084:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 8010088:	801a      	strh	r2, [r3, #0]
 801008a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801008c:	1c9a      	adds	r2, r3, #2
 801008e:	627a      	str	r2, [r7, #36]	; 0x24
 8010090:	4a1d      	ldr	r2, [pc, #116]	; (8010108 <Save_Buf+0x1a0>)
 8010092:	f9b2 2014 	ldrsh.w	r2, [r2, #20]
 8010096:	801a      	strh	r2, [r3, #0]
 8010098:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801009a:	1c9a      	adds	r2, r3, #2
 801009c:	627a      	str	r2, [r7, #36]	; 0x24
 801009e:	4a1a      	ldr	r2, [pc, #104]	; (8010108 <Save_Buf+0x1a0>)
 80100a0:	f9b2 204c 	ldrsh.w	r2, [r2, #76]	; 0x4c
 80100a4:	801a      	strh	r2, [r3, #0]
 80100a6:	f107 0310 	add.w	r3, r7, #16
 80100aa:	4619      	mov	r1, r3
 80100ac:	4817      	ldr	r0, [pc, #92]	; (801010c <Save_Buf+0x1a4>)
 80100ae:	f7ff f99b 	bl	800f3e8 <ProgFileSec>
 80100b2:	4603      	mov	r3, r0
 80100b4:	2b00      	cmp	r3, #0
 80100b6:	d001      	beq.n	80100bc <Save_Buf+0x154>
 80100b8:	2303      	movs	r3, #3
 80100ba:	e01f      	b.n	80100fc <Save_Buf+0x194>
 80100bc:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 80100c0:	f503 5100 	add.w	r1, r3, #8192	; 0x2000
 80100c4:	f107 030c 	add.w	r3, r7, #12
 80100c8:	f107 0210 	add.w	r2, r7, #16
 80100cc:	480f      	ldr	r0, [pc, #60]	; (801010c <Save_Buf+0x1a4>)
 80100ce:	f7ff f9ff 	bl	800f4d0 <CloseFile>
 80100d2:	4603      	mov	r3, r0
 80100d4:	2b00      	cmp	r3, #0
 80100d6:	d001      	beq.n	80100dc <Save_Buf+0x174>
 80100d8:	2303      	movs	r3, #3
 80100da:	e00f      	b.n	80100fc <Save_Buf+0x194>
 80100dc:	4b0a      	ldr	r3, [pc, #40]	; (8010108 <Save_Buf+0x1a0>)
 80100de:	f9b3 30fc 	ldrsh.w	r3, [r3, #252]	; 0xfc
 80100e2:	2b62      	cmp	r3, #98	; 0x62
 80100e4:	dc09      	bgt.n	80100fa <Save_Buf+0x192>
 80100e6:	4b08      	ldr	r3, [pc, #32]	; (8010108 <Save_Buf+0x1a0>)
 80100e8:	f9b3 30fc 	ldrsh.w	r3, [r3, #252]	; 0xfc
 80100ec:	b29b      	uxth	r3, r3
 80100ee:	3301      	adds	r3, #1
 80100f0:	b29b      	uxth	r3, r3
 80100f2:	b21a      	sxth	r2, r3
 80100f4:	4b04      	ldr	r3, [pc, #16]	; (8010108 <Save_Buf+0x1a0>)
 80100f6:	f8a3 20fc 	strh.w	r2, [r3, #252]	; 0xfc
 80100fa:	2300      	movs	r3, #0
 80100fc:	4618      	mov	r0, r3
 80100fe:	3738      	adds	r7, #56	; 0x38
 8010100:	46bd      	mov	sp, r7
 8010102:	bd80      	pop	{r7, pc}
 8010104:	08000214 	.word	0x08000214
 8010108:	20000298 	.word	0x20000298
 801010c:	200017d8 	.word	0x200017d8
 8010110:	20002870 	.word	0x20002870

08010114 <Save_Dat>:
 8010114:	b580      	push	{r7, lr}
 8010116:	b08a      	sub	sp, #40	; 0x28
 8010118:	af00      	add	r7, sp, #0
 801011a:	4603      	mov	r3, r0
 801011c:	80fb      	strh	r3, [r7, #6]
 801011e:	4a42      	ldr	r2, [pc, #264]	; (8010228 <Save_Dat+0x114>)
 8010120:	f107 0318 	add.w	r3, r7, #24
 8010124:	ca07      	ldmia	r2, {r0, r1, r2}
 8010126:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 801012a:	2304      	movs	r3, #4
 801012c:	84fb      	strh	r3, [r7, #38]	; 0x26
 801012e:	f107 0218 	add.w	r2, r7, #24
 8010132:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8010136:	4611      	mov	r1, r2
 8010138:	4618      	mov	r0, r3
 801013a:	f7ff fcc7 	bl	800facc <Make_Filename>
 801013e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8010142:	2100      	movs	r1, #0
 8010144:	4839      	ldr	r0, [pc, #228]	; (801022c <Save_Dat+0x118>)
 8010146:	f012 fd25 	bl	8022b94 <memset>
 801014a:	f107 030c 	add.w	r3, r7, #12
 801014e:	f107 0210 	add.w	r2, r7, #16
 8010152:	f107 0118 	add.w	r1, r7, #24
 8010156:	4835      	ldr	r0, [pc, #212]	; (801022c <Save_Dat+0x118>)
 8010158:	f7ff fa1e 	bl	800f598 <OpenFileWr>
 801015c:	4603      	mov	r3, r0
 801015e:	2b00      	cmp	r3, #0
 8010160:	d002      	beq.n	8010168 <Save_Dat+0x54>
 8010162:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8010164:	b2db      	uxtb	r3, r3
 8010166:	e05b      	b.n	8010220 <Save_Dat+0x10c>
 8010168:	4b30      	ldr	r3, [pc, #192]	; (801022c <Save_Dat+0x118>)
 801016a:	2201      	movs	r2, #1
 801016c:	701a      	strb	r2, [r3, #0]
 801016e:	4b30      	ldr	r3, [pc, #192]	; (8010230 <Save_Dat+0x11c>)
 8010170:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 8010174:	b2da      	uxtb	r2, r3
 8010176:	4b2d      	ldr	r3, [pc, #180]	; (801022c <Save_Dat+0x118>)
 8010178:	705a      	strb	r2, [r3, #1]
 801017a:	4b2d      	ldr	r3, [pc, #180]	; (8010230 <Save_Dat+0x11c>)
 801017c:	f9b3 30dc 	ldrsh.w	r3, [r3, #220]	; 0xdc
 8010180:	b2da      	uxtb	r2, r3
 8010182:	4b2a      	ldr	r3, [pc, #168]	; (801022c <Save_Dat+0x118>)
 8010184:	709a      	strb	r2, [r3, #2]
 8010186:	4b2a      	ldr	r3, [pc, #168]	; (8010230 <Save_Dat+0x11c>)
 8010188:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 801018c:	b2da      	uxtb	r2, r3
 801018e:	4b27      	ldr	r3, [pc, #156]	; (801022c <Save_Dat+0x118>)
 8010190:	70da      	strb	r2, [r3, #3]
 8010192:	4b27      	ldr	r3, [pc, #156]	; (8010230 <Save_Dat+0x11c>)
 8010194:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8010198:	b2da      	uxtb	r2, r3
 801019a:	4b24      	ldr	r3, [pc, #144]	; (801022c <Save_Dat+0x118>)
 801019c:	711a      	strb	r2, [r3, #4]
 801019e:	4b24      	ldr	r3, [pc, #144]	; (8010230 <Save_Dat+0x11c>)
 80101a0:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 80101a4:	b2da      	uxtb	r2, r3
 80101a6:	4b21      	ldr	r3, [pc, #132]	; (801022c <Save_Dat+0x118>)
 80101a8:	715a      	strb	r2, [r3, #5]
 80101aa:	4b21      	ldr	r3, [pc, #132]	; (8010230 <Save_Dat+0x11c>)
 80101ac:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 80101b0:	b2da      	uxtb	r2, r3
 80101b2:	4b1e      	ldr	r3, [pc, #120]	; (801022c <Save_Dat+0x118>)
 80101b4:	719a      	strb	r2, [r3, #6]
 80101b6:	4b1e      	ldr	r3, [pc, #120]	; (8010230 <Save_Dat+0x11c>)
 80101b8:	f9b3 3074 	ldrsh.w	r3, [r3, #116]	; 0x74
 80101bc:	b2da      	uxtb	r2, r3
 80101be:	4b1b      	ldr	r3, [pc, #108]	; (801022c <Save_Dat+0x118>)
 80101c0:	71da      	strb	r2, [r3, #7]
 80101c2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80101c6:	491b      	ldr	r1, [pc, #108]	; (8010234 <Save_Dat+0x120>)
 80101c8:	481b      	ldr	r0, [pc, #108]	; (8010238 <Save_Dat+0x124>)
 80101ca:	f012 fcd5 	bl	8022b78 <memcpy>
 80101ce:	f107 0310 	add.w	r3, r7, #16
 80101d2:	4619      	mov	r1, r3
 80101d4:	4815      	ldr	r0, [pc, #84]	; (801022c <Save_Dat+0x118>)
 80101d6:	f7ff f907 	bl	800f3e8 <ProgFileSec>
 80101da:	4603      	mov	r3, r0
 80101dc:	2b00      	cmp	r3, #0
 80101de:	d001      	beq.n	80101e4 <Save_Dat+0xd0>
 80101e0:	2303      	movs	r3, #3
 80101e2:	e01d      	b.n	8010220 <Save_Dat+0x10c>
 80101e4:	f107 030c 	add.w	r3, r7, #12
 80101e8:	f107 0210 	add.w	r2, r7, #16
 80101ec:	f44f 7100 	mov.w	r1, #512	; 0x200
 80101f0:	480e      	ldr	r0, [pc, #56]	; (801022c <Save_Dat+0x118>)
 80101f2:	f7ff f96d 	bl	800f4d0 <CloseFile>
 80101f6:	4603      	mov	r3, r0
 80101f8:	2b00      	cmp	r3, #0
 80101fa:	d001      	beq.n	8010200 <Save_Dat+0xec>
 80101fc:	2303      	movs	r3, #3
 80101fe:	e00f      	b.n	8010220 <Save_Dat+0x10c>
 8010200:	4b0b      	ldr	r3, [pc, #44]	; (8010230 <Save_Dat+0x11c>)
 8010202:	f9b3 30f4 	ldrsh.w	r3, [r3, #244]	; 0xf4
 8010206:	2b62      	cmp	r3, #98	; 0x62
 8010208:	dc09      	bgt.n	801021e <Save_Dat+0x10a>
 801020a:	4b09      	ldr	r3, [pc, #36]	; (8010230 <Save_Dat+0x11c>)
 801020c:	f9b3 30f4 	ldrsh.w	r3, [r3, #244]	; 0xf4
 8010210:	b29b      	uxth	r3, r3
 8010212:	3301      	adds	r3, #1
 8010214:	b29b      	uxth	r3, r3
 8010216:	b21a      	sxth	r2, r3
 8010218:	4b05      	ldr	r3, [pc, #20]	; (8010230 <Save_Dat+0x11c>)
 801021a:	f8a3 20f4 	strh.w	r2, [r3, #244]	; 0xf4
 801021e:	2300      	movs	r3, #0
 8010220:	4618      	mov	r0, r3
 8010222:	3728      	adds	r7, #40	; 0x28
 8010224:	46bd      	mov	sp, r7
 8010226:	bd80      	pop	{r7, pc}
 8010228:	08000208 	.word	0x08000208
 801022c:	200017d8 	.word	0x200017d8
 8010230:	20000298 	.word	0x20000298
 8010234:	20000c08 	.word	0x20000c08
 8010238:	200017e2 	.word	0x200017e2

0801023c <Load_Dat>:
 801023c:	b580      	push	{r7, lr}
 801023e:	b08a      	sub	sp, #40	; 0x28
 8010240:	af00      	add	r7, sp, #0
 8010242:	4603      	mov	r3, r0
 8010244:	80fb      	strh	r3, [r7, #6]
 8010246:	4a4f      	ldr	r2, [pc, #316]	; (8010384 <Load_Dat+0x148>)
 8010248:	f107 0314 	add.w	r3, r7, #20
 801024c:	ca07      	ldmia	r2, {r0, r1, r2}
 801024e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8010252:	2300      	movs	r3, #0
 8010254:	847b      	strh	r3, [r7, #34]	; 0x22
 8010256:	f107 0214 	add.w	r2, r7, #20
 801025a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801025e:	4611      	mov	r1, r2
 8010260:	4618      	mov	r0, r3
 8010262:	f7ff fc33 	bl	800facc <Make_Filename>
 8010266:	f107 0308 	add.w	r3, r7, #8
 801026a:	f107 020c 	add.w	r2, r7, #12
 801026e:	f107 0114 	add.w	r1, r7, #20
 8010272:	4845      	ldr	r0, [pc, #276]	; (8010388 <Load_Dat+0x14c>)
 8010274:	f7fe fec6 	bl	800f004 <OpenFileRd>
 8010278:	4603      	mov	r3, r0
 801027a:	847b      	strh	r3, [r7, #34]	; 0x22
 801027c:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8010280:	2b00      	cmp	r3, #0
 8010282:	d002      	beq.n	801028a <Load_Dat+0x4e>
 8010284:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8010286:	b2db      	uxtb	r3, r3
 8010288:	e077      	b.n	801037a <Load_Dat+0x13e>
 801028a:	f107 030c 	add.w	r3, r7, #12
 801028e:	4619      	mov	r1, r3
 8010290:	483d      	ldr	r0, [pc, #244]	; (8010388 <Load_Dat+0x14c>)
 8010292:	f7ff f8ef 	bl	800f474 <ReadFileSec>
 8010296:	4603      	mov	r3, r0
 8010298:	2b00      	cmp	r3, #0
 801029a:	d001      	beq.n	80102a0 <Load_Dat+0x64>
 801029c:	2303      	movs	r3, #3
 801029e:	e06c      	b.n	801037a <Load_Dat+0x13e>
 80102a0:	f44f 729b 	mov.w	r2, #310	; 0x136
 80102a4:	4938      	ldr	r1, [pc, #224]	; (8010388 <Load_Dat+0x14c>)
 80102a6:	4839      	ldr	r0, [pc, #228]	; (801038c <Load_Dat+0x150>)
 80102a8:	f012 fc66 	bl	8022b78 <memcpy>
 80102ac:	4b36      	ldr	r3, [pc, #216]	; (8010388 <Load_Dat+0x14c>)
 80102ae:	78db      	ldrb	r3, [r3, #3]
 80102b0:	b21a      	sxth	r2, r3
 80102b2:	4b37      	ldr	r3, [pc, #220]	; (8010390 <Load_Dat+0x154>)
 80102b4:	879a      	strh	r2, [r3, #60]	; 0x3c
 80102b6:	4b34      	ldr	r3, [pc, #208]	; (8010388 <Load_Dat+0x14c>)
 80102b8:	791b      	ldrb	r3, [r3, #4]
 80102ba:	b21a      	sxth	r2, r3
 80102bc:	4b34      	ldr	r3, [pc, #208]	; (8010390 <Load_Dat+0x154>)
 80102be:	809a      	strh	r2, [r3, #4]
 80102c0:	4b31      	ldr	r3, [pc, #196]	; (8010388 <Load_Dat+0x14c>)
 80102c2:	795b      	ldrb	r3, [r3, #5]
 80102c4:	b21a      	sxth	r2, r3
 80102c6:	4b32      	ldr	r3, [pc, #200]	; (8010390 <Load_Dat+0x154>)
 80102c8:	819a      	strh	r2, [r3, #12]
 80102ca:	4b2f      	ldr	r3, [pc, #188]	; (8010388 <Load_Dat+0x14c>)
 80102cc:	799b      	ldrb	r3, [r3, #6]
 80102ce:	b21a      	sxth	r2, r3
 80102d0:	4b2f      	ldr	r3, [pc, #188]	; (8010390 <Load_Dat+0x154>)
 80102d2:	829a      	strh	r2, [r3, #20]
 80102d4:	4b2c      	ldr	r3, [pc, #176]	; (8010388 <Load_Dat+0x14c>)
 80102d6:	79db      	ldrb	r3, [r3, #7]
 80102d8:	b21a      	sxth	r2, r3
 80102da:	4b2d      	ldr	r3, [pc, #180]	; (8010390 <Load_Dat+0x154>)
 80102dc:	f8a3 2074 	strh.w	r2, [r3, #116]	; 0x74
 80102e0:	2300      	movs	r3, #0
 80102e2:	627b      	str	r3, [r7, #36]	; 0x24
 80102e4:	e010      	b.n	8010308 <Load_Dat+0xcc>
 80102e6:	4a2a      	ldr	r2, [pc, #168]	; (8010390 <Load_Dat+0x154>)
 80102e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80102ea:	00db      	lsls	r3, r3, #3
 80102ec:	4413      	add	r3, r2
 80102ee:	799b      	ldrb	r3, [r3, #6]
 80102f0:	f043 0320 	orr.w	r3, r3, #32
 80102f4:	b2d9      	uxtb	r1, r3
 80102f6:	4a26      	ldr	r2, [pc, #152]	; (8010390 <Load_Dat+0x154>)
 80102f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80102fa:	00db      	lsls	r3, r3, #3
 80102fc:	4413      	add	r3, r2
 80102fe:	460a      	mov	r2, r1
 8010300:	719a      	strb	r2, [r3, #6]
 8010302:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010304:	3301      	adds	r3, #1
 8010306:	627b      	str	r3, [r7, #36]	; 0x24
 8010308:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801030a:	2b03      	cmp	r3, #3
 801030c:	ddeb      	ble.n	80102e6 <Load_Dat+0xaa>
 801030e:	4b20      	ldr	r3, [pc, #128]	; (8010390 <Load_Dat+0x154>)
 8010310:	f893 30d6 	ldrb.w	r3, [r3, #214]	; 0xd6
 8010314:	f043 0320 	orr.w	r3, r3, #32
 8010318:	b2da      	uxtb	r2, r3
 801031a:	4b1d      	ldr	r3, [pc, #116]	; (8010390 <Load_Dat+0x154>)
 801031c:	f883 20d6 	strb.w	r2, [r3, #214]	; 0xd6
 8010320:	4b1b      	ldr	r3, [pc, #108]	; (8010390 <Load_Dat+0x154>)
 8010322:	f893 30de 	ldrb.w	r3, [r3, #222]	; 0xde
 8010326:	f043 0320 	orr.w	r3, r3, #32
 801032a:	b2da      	uxtb	r2, r3
 801032c:	4b18      	ldr	r3, [pc, #96]	; (8010390 <Load_Dat+0x154>)
 801032e:	f883 20de 	strb.w	r2, [r3, #222]	; 0xde
 8010332:	4b17      	ldr	r3, [pc, #92]	; (8010390 <Load_Dat+0x154>)
 8010334:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8010338:	f043 0320 	orr.w	r3, r3, #32
 801033c:	b2da      	uxtb	r2, r3
 801033e:	4b14      	ldr	r3, [pc, #80]	; (8010390 <Load_Dat+0x154>)
 8010340:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8010344:	4b12      	ldr	r3, [pc, #72]	; (8010390 <Load_Dat+0x154>)
 8010346:	f893 3076 	ldrb.w	r3, [r3, #118]	; 0x76
 801034a:	f043 0320 	orr.w	r3, r3, #32
 801034e:	b2da      	uxtb	r2, r3
 8010350:	4b0f      	ldr	r3, [pc, #60]	; (8010390 <Load_Dat+0x154>)
 8010352:	f883 2076 	strb.w	r2, [r3, #118]	; 0x76
 8010356:	f002 ffab 	bl	80132b0 <Update_Detail>
 801035a:	4b0d      	ldr	r3, [pc, #52]	; (8010390 <Load_Dat+0x154>)
 801035c:	f9b3 3114 	ldrsh.w	r3, [r3, #276]	; 0x114
 8010360:	2b62      	cmp	r3, #98	; 0x62
 8010362:	dc09      	bgt.n	8010378 <Load_Dat+0x13c>
 8010364:	4b0a      	ldr	r3, [pc, #40]	; (8010390 <Load_Dat+0x154>)
 8010366:	f9b3 3114 	ldrsh.w	r3, [r3, #276]	; 0x114
 801036a:	b29b      	uxth	r3, r3
 801036c:	3301      	adds	r3, #1
 801036e:	b29b      	uxth	r3, r3
 8010370:	b21a      	sxth	r2, r3
 8010372:	4b07      	ldr	r3, [pc, #28]	; (8010390 <Load_Dat+0x154>)
 8010374:	f8a3 2114 	strh.w	r2, [r3, #276]	; 0x114
 8010378:	2300      	movs	r3, #0
 801037a:	4618      	mov	r0, r3
 801037c:	3728      	adds	r7, #40	; 0x28
 801037e:	46bd      	mov	sp, r7
 8010380:	bd80      	pop	{r7, pc}
 8010382:	bf00      	nop
 8010384:	08000208 	.word	0x08000208
 8010388:	200017d8 	.word	0x200017d8
 801038c:	20000008 	.word	0x20000008
 8010390:	20000298 	.word	0x20000298

08010394 <Save_Bmp>:
 8010394:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010396:	b08f      	sub	sp, #60	; 0x3c
 8010398:	af00      	add	r7, sp, #0
 801039a:	4603      	mov	r3, r0
 801039c:	80fb      	strh	r3, [r7, #6]
 801039e:	4aaa      	ldr	r2, [pc, #680]	; (8010648 <Save_Bmp+0x2b4>)
 80103a0:	f107 0314 	add.w	r3, r7, #20
 80103a4:	ca07      	ldmia	r2, {r0, r1, r2}
 80103a6:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80103aa:	2304      	movs	r3, #4
 80103ac:	62bb      	str	r3, [r7, #40]	; 0x28
 80103ae:	2336      	movs	r3, #54	; 0x36
 80103b0:	867b      	strh	r3, [r7, #50]	; 0x32
 80103b2:	2300      	movs	r3, #0
 80103b4:	85fb      	strh	r3, [r7, #46]	; 0x2e
 80103b6:	2300      	movs	r3, #0
 80103b8:	85bb      	strh	r3, [r7, #44]	; 0x2c
 80103ba:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80103be:	627b      	str	r3, [r7, #36]	; 0x24
 80103c0:	4ba2      	ldr	r3, [pc, #648]	; (801064c <Save_Bmp+0x2b8>)
 80103c2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80103c6:	2b05      	cmp	r3, #5
 80103c8:	d105      	bne.n	80103d6 <Save_Bmp+0x42>
 80103ca:	f7fe f9c5 	bl	800e758 <Close_Pop>
 80103ce:	49a0      	ldr	r1, [pc, #640]	; (8010650 <Save_Bmp+0x2bc>)
 80103d0:	48a0      	ldr	r0, [pc, #640]	; (8010654 <Save_Bmp+0x2c0>)
 80103d2:	f7fd f9c1 	bl	800d758 <DrawWindow>
 80103d6:	f107 0214 	add.w	r2, r7, #20
 80103da:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80103de:	4611      	mov	r1, r2
 80103e0:	4618      	mov	r0, r3
 80103e2:	f7ff fb73 	bl	800facc <Make_Filename>
 80103e6:	f107 0308 	add.w	r3, r7, #8
 80103ea:	f107 020c 	add.w	r2, r7, #12
 80103ee:	f107 0114 	add.w	r1, r7, #20
 80103f2:	4899      	ldr	r0, [pc, #612]	; (8010658 <Save_Bmp+0x2c4>)
 80103f4:	f7ff f8d0 	bl	800f598 <OpenFileWr>
 80103f8:	4603      	mov	r3, r0
 80103fa:	2b00      	cmp	r3, #0
 80103fc:	d002      	beq.n	8010404 <Save_Bmp+0x70>
 80103fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010400:	b2db      	uxtb	r3, r3
 8010402:	e11c      	b.n	801063e <Save_Bmp+0x2aa>
 8010404:	4b94      	ldr	r3, [pc, #592]	; (8010658 <Save_Bmp+0x2c4>)
 8010406:	4a95      	ldr	r2, [pc, #596]	; (801065c <Save_Bmp+0x2c8>)
 8010408:	4614      	mov	r4, r2
 801040a:	469c      	mov	ip, r3
 801040c:	f104 0e30 	add.w	lr, r4, #48	; 0x30
 8010410:	4665      	mov	r5, ip
 8010412:	4626      	mov	r6, r4
 8010414:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8010416:	6028      	str	r0, [r5, #0]
 8010418:	6069      	str	r1, [r5, #4]
 801041a:	60aa      	str	r2, [r5, #8]
 801041c:	60eb      	str	r3, [r5, #12]
 801041e:	3410      	adds	r4, #16
 8010420:	f10c 0c10 	add.w	ip, ip, #16
 8010424:	4574      	cmp	r4, lr
 8010426:	d1f3      	bne.n	8010410 <Save_Bmp+0x7c>
 8010428:	4663      	mov	r3, ip
 801042a:	4622      	mov	r2, r4
 801042c:	6810      	ldr	r0, [r2, #0]
 801042e:	6018      	str	r0, [r3, #0]
 8010430:	8892      	ldrh	r2, [r2, #4]
 8010432:	809a      	strh	r2, [r3, #4]
 8010434:	2336      	movs	r3, #54	; 0x36
 8010436:	867b      	strh	r3, [r7, #50]	; 0x32
 8010438:	2300      	movs	r3, #0
 801043a:	863b      	strh	r3, [r7, #48]	; 0x30
 801043c:	e042      	b.n	80104c4 <Save_Bmp+0x130>
 801043e:	f9b7 3030 	ldrsh.w	r3, [r7, #48]	; 0x30
 8010442:	4a87      	ldr	r2, [pc, #540]	; (8010660 <Save_Bmp+0x2cc>)
 8010444:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8010448:	121b      	asrs	r3, r3, #8
 801044a:	b2da      	uxtb	r2, r3
 801044c:	f9b7 3030 	ldrsh.w	r3, [r7, #48]	; 0x30
 8010450:	0099      	lsls	r1, r3, #2
 8010452:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 8010456:	440b      	add	r3, r1
 8010458:	f022 0207 	bic.w	r2, r2, #7
 801045c:	b2d1      	uxtb	r1, r2
 801045e:	4a7e      	ldr	r2, [pc, #504]	; (8010658 <Save_Bmp+0x2c4>)
 8010460:	54d1      	strb	r1, [r2, r3]
 8010462:	f9b7 3030 	ldrsh.w	r3, [r7, #48]	; 0x30
 8010466:	4a7e      	ldr	r2, [pc, #504]	; (8010660 <Save_Bmp+0x2cc>)
 8010468:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801046c:	10db      	asrs	r3, r3, #3
 801046e:	b2da      	uxtb	r2, r3
 8010470:	f9b7 3030 	ldrsh.w	r3, [r7, #48]	; 0x30
 8010474:	0099      	lsls	r1, r3, #2
 8010476:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 801047a:	440b      	add	r3, r1
 801047c:	3301      	adds	r3, #1
 801047e:	f022 0203 	bic.w	r2, r2, #3
 8010482:	b2d1      	uxtb	r1, r2
 8010484:	4a74      	ldr	r2, [pc, #464]	; (8010658 <Save_Bmp+0x2c4>)
 8010486:	54d1      	strb	r1, [r2, r3]
 8010488:	f9b7 3030 	ldrsh.w	r3, [r7, #48]	; 0x30
 801048c:	4a74      	ldr	r2, [pc, #464]	; (8010660 <Save_Bmp+0x2cc>)
 801048e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8010492:	00d9      	lsls	r1, r3, #3
 8010494:	f9b7 3030 	ldrsh.w	r3, [r7, #48]	; 0x30
 8010498:	009a      	lsls	r2, r3, #2
 801049a:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 801049e:	4413      	add	r3, r2
 80104a0:	3302      	adds	r3, #2
 80104a2:	b2c9      	uxtb	r1, r1
 80104a4:	4a6c      	ldr	r2, [pc, #432]	; (8010658 <Save_Bmp+0x2c4>)
 80104a6:	54d1      	strb	r1, [r2, r3]
 80104a8:	f9b7 3030 	ldrsh.w	r3, [r7, #48]	; 0x30
 80104ac:	009a      	lsls	r2, r3, #2
 80104ae:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 80104b2:	4413      	add	r3, r2
 80104b4:	3303      	adds	r3, #3
 80104b6:	4a68      	ldr	r2, [pc, #416]	; (8010658 <Save_Bmp+0x2c4>)
 80104b8:	2100      	movs	r1, #0
 80104ba:	54d1      	strb	r1, [r2, r3]
 80104bc:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 80104be:	3301      	adds	r3, #1
 80104c0:	b29b      	uxth	r3, r3
 80104c2:	863b      	strh	r3, [r7, #48]	; 0x30
 80104c4:	f9b7 3030 	ldrsh.w	r3, [r7, #48]	; 0x30
 80104c8:	2b0f      	cmp	r3, #15
 80104ca:	ddb8      	ble.n	801043e <Save_Bmp+0xaa>
 80104cc:	2376      	movs	r3, #118	; 0x76
 80104ce:	867b      	strh	r3, [r7, #50]	; 0x32
 80104d0:	2300      	movs	r3, #0
 80104d2:	86bb      	strh	r3, [r7, #52]	; 0x34
 80104d4:	e079      	b.n	80105ca <Save_Bmp+0x236>
 80104d6:	2300      	movs	r3, #0
 80104d8:	86fb      	strh	r3, [r7, #54]	; 0x36
 80104da:	e06b      	b.n	80105b4 <Save_Bmp+0x220>
 80104dc:	f9b7 2034 	ldrsh.w	r2, [r7, #52]	; 0x34
 80104e0:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 80104e4:	4611      	mov	r1, r2
 80104e6:	4618      	mov	r0, r3
 80104e8:	f001 fe62 	bl	80121b0 <LCD_Set_Posi>
 80104ec:	f001 fed6 	bl	801229c <LCD_Get_Pixel>
 80104f0:	4603      	mov	r3, r0
 80104f2:	847b      	strh	r3, [r7, #34]	; 0x22
 80104f4:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80104f6:	3301      	adds	r3, #1
 80104f8:	b29b      	uxth	r3, r3
 80104fa:	b21b      	sxth	r3, r3
 80104fc:	f9b7 2034 	ldrsh.w	r2, [r7, #52]	; 0x34
 8010500:	4611      	mov	r1, r2
 8010502:	4618      	mov	r0, r3
 8010504:	f001 fe54 	bl	80121b0 <LCD_Set_Posi>
 8010508:	f001 fec8 	bl	801229c <LCD_Get_Pixel>
 801050c:	4603      	mov	r3, r0
 801050e:	843b      	strh	r3, [r7, #32]
 8010510:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8010514:	4618      	mov	r0, r3
 8010516:	f7ff f8a1 	bl	800f65c <Color_Num>
 801051a:	4603      	mov	r3, r0
 801051c:	011b      	lsls	r3, r3, #4
 801051e:	b2dc      	uxtb	r4, r3
 8010520:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8010524:	4618      	mov	r0, r3
 8010526:	f7ff f899 	bl	800f65c <Color_Num>
 801052a:	4603      	mov	r3, r0
 801052c:	461a      	mov	r2, r3
 801052e:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 8010532:	4422      	add	r2, r4
 8010534:	b2d1      	uxtb	r1, r2
 8010536:	4a48      	ldr	r2, [pc, #288]	; (8010658 <Save_Bmp+0x2c4>)
 8010538:	54d1      	strb	r1, [r2, r3]
 801053a:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 801053e:	b29b      	uxth	r3, r3
 8010540:	3301      	adds	r3, #1
 8010542:	b29b      	uxth	r3, r3
 8010544:	867b      	strh	r3, [r7, #50]	; 0x32
 8010546:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 801054a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801054c:	429a      	cmp	r2, r3
 801054e:	dc2d      	bgt.n	80105ac <Save_Bmp+0x218>
 8010550:	2300      	movs	r3, #0
 8010552:	867b      	strh	r3, [r7, #50]	; 0x32
 8010554:	f107 030c 	add.w	r3, r7, #12
 8010558:	4619      	mov	r1, r3
 801055a:	483f      	ldr	r0, [pc, #252]	; (8010658 <Save_Bmp+0x2c4>)
 801055c:	f7fe ff44 	bl	800f3e8 <ProgFileSec>
 8010560:	4603      	mov	r3, r0
 8010562:	2b00      	cmp	r3, #0
 8010564:	d001      	beq.n	801056a <Save_Bmp+0x1d6>
 8010566:	2303      	movs	r3, #3
 8010568:	e069      	b.n	801063e <Save_Bmp+0x2aa>
 801056a:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	; 0x2c
 801056e:	2b00      	cmp	r3, #0
 8010570:	d110      	bne.n	8010594 <Save_Bmp+0x200>
 8010572:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 8010576:	b29a      	uxth	r2, r3
 8010578:	3201      	adds	r2, #1
 801057a:	b292      	uxth	r2, r2
 801057c:	85fa      	strh	r2, [r7, #46]	; 0x2e
 801057e:	105b      	asrs	r3, r3, #1
 8010580:	b21b      	sxth	r3, r3
 8010582:	b2db      	uxtb	r3, r3
 8010584:	f003 0303 	and.w	r3, r3, #3
 8010588:	b2db      	uxtb	r3, r3
 801058a:	461a      	mov	r2, r3
 801058c:	2102      	movs	r1, #2
 801058e:	20a8      	movs	r0, #168	; 0xa8
 8010590:	f7ff f8e4 	bl	800f75c <PrintClk>
 8010594:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	; 0x2c
 8010598:	b29b      	uxth	r3, r3
 801059a:	3301      	adds	r3, #1
 801059c:	b29b      	uxth	r3, r3
 801059e:	85bb      	strh	r3, [r7, #44]	; 0x2c
 80105a0:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	; 0x2c
 80105a4:	2b01      	cmp	r3, #1
 80105a6:	dd01      	ble.n	80105ac <Save_Bmp+0x218>
 80105a8:	2300      	movs	r3, #0
 80105aa:	85bb      	strh	r3, [r7, #44]	; 0x2c
 80105ac:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80105ae:	3302      	adds	r3, #2
 80105b0:	b29b      	uxth	r3, r3
 80105b2:	86fb      	strh	r3, [r7, #54]	; 0x36
 80105b4:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 80105b8:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 80105bc:	db8e      	blt.n	80104dc <Save_Bmp+0x148>
 80105be:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	; 0x34
 80105c2:	b29b      	uxth	r3, r3
 80105c4:	3301      	adds	r3, #1
 80105c6:	b29b      	uxth	r3, r3
 80105c8:	86bb      	strh	r3, [r7, #52]	; 0x34
 80105ca:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	; 0x34
 80105ce:	2bef      	cmp	r3, #239	; 0xef
 80105d0:	dd81      	ble.n	80104d6 <Save_Bmp+0x142>
 80105d2:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 80105d6:	2b00      	cmp	r3, #0
 80105d8:	d00c      	beq.n	80105f4 <Save_Bmp+0x260>
 80105da:	f107 030c 	add.w	r3, r7, #12
 80105de:	4619      	mov	r1, r3
 80105e0:	481d      	ldr	r0, [pc, #116]	; (8010658 <Save_Bmp+0x2c4>)
 80105e2:	f7fe ff01 	bl	800f3e8 <ProgFileSec>
 80105e6:	4603      	mov	r3, r0
 80105e8:	2b00      	cmp	r3, #0
 80105ea:	d003      	beq.n	80105f4 <Save_Bmp+0x260>
 80105ec:	f7fe f8ca 	bl	800e784 <List_Pop>
 80105f0:	2303      	movs	r3, #3
 80105f2:	e024      	b.n	801063e <Save_Bmp+0x2aa>
 80105f4:	f107 0308 	add.w	r3, r7, #8
 80105f8:	f107 020c 	add.w	r2, r7, #12
 80105fc:	f44f 4118 	mov.w	r1, #38912	; 0x9800
 8010600:	4815      	ldr	r0, [pc, #84]	; (8010658 <Save_Bmp+0x2c4>)
 8010602:	f7fe ff65 	bl	800f4d0 <CloseFile>
 8010606:	4603      	mov	r3, r0
 8010608:	2b00      	cmp	r3, #0
 801060a:	d001      	beq.n	8010610 <Save_Bmp+0x27c>
 801060c:	2303      	movs	r3, #3
 801060e:	e016      	b.n	801063e <Save_Bmp+0x2aa>
 8010610:	4b0e      	ldr	r3, [pc, #56]	; (801064c <Save_Bmp+0x2b8>)
 8010612:	f9b3 3000 	ldrsh.w	r3, [r3]
 8010616:	2b05      	cmp	r3, #5
 8010618:	d101      	bne.n	801061e <Save_Bmp+0x28a>
 801061a:	f7fe f8b3 	bl	800e784 <List_Pop>
 801061e:	4b11      	ldr	r3, [pc, #68]	; (8010664 <Save_Bmp+0x2d0>)
 8010620:	f9b3 30ec 	ldrsh.w	r3, [r3, #236]	; 0xec
 8010624:	2b62      	cmp	r3, #98	; 0x62
 8010626:	dc09      	bgt.n	801063c <Save_Bmp+0x2a8>
 8010628:	4b0e      	ldr	r3, [pc, #56]	; (8010664 <Save_Bmp+0x2d0>)
 801062a:	f9b3 30ec 	ldrsh.w	r3, [r3, #236]	; 0xec
 801062e:	b29b      	uxth	r3, r3
 8010630:	3301      	adds	r3, #1
 8010632:	b29b      	uxth	r3, r3
 8010634:	b21a      	sxth	r2, r3
 8010636:	4b0b      	ldr	r3, [pc, #44]	; (8010664 <Save_Bmp+0x2d0>)
 8010638:	f8a3 20ec 	strh.w	r2, [r3, #236]	; 0xec
 801063c:	2300      	movs	r3, #0
 801063e:	4618      	mov	r0, r3
 8010640:	373c      	adds	r7, #60	; 0x3c
 8010642:	46bd      	mov	sp, r7
 8010644:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010646:	bf00      	nop
 8010648:	080001fc 	.word	0x080001fc
 801064c:	2000079e 	.word	0x2000079e
 8010650:	20000140 	.word	0x20000140
 8010654:	20000c08 	.word	0x20000c08
 8010658:	200017d8 	.word	0x200017d8
 801065c:	08001b84 	.word	0x08001b84
 8010660:	08001b64 	.word	0x08001b64
 8010664:	20000298 	.word	0x20000298

08010668 <Save_Csv>:
 8010668:	b580      	push	{r7, lr}
 801066a:	b094      	sub	sp, #80	; 0x50
 801066c:	af00      	add	r7, sp, #0
 801066e:	4603      	mov	r3, r0
 8010670:	80fb      	strh	r3, [r7, #6]
 8010672:	4baf      	ldr	r3, [pc, #700]	; (8010930 <Save_Csv+0x2c8>)
 8010674:	681a      	ldr	r2, [r3, #0]
 8010676:	4baf      	ldr	r3, [pc, #700]	; (8010934 <Save_Csv+0x2cc>)
 8010678:	f9b3 3000 	ldrsh.w	r3, [r3]
 801067c:	4619      	mov	r1, r3
 801067e:	4bae      	ldr	r3, [pc, #696]	; (8010938 <Save_Csv+0x2d0>)
 8010680:	f9b3 3000 	ldrsh.w	r3, [r3]
 8010684:	2b00      	cmp	r3, #0
 8010686:	bf14      	ite	ne
 8010688:	2301      	movne	r3, #1
 801068a:	2300      	moveq	r3, #0
 801068c:	b2db      	uxtb	r3, r3
 801068e:	440b      	add	r3, r1
 8010690:	005b      	lsls	r3, r3, #1
 8010692:	4413      	add	r3, r2
 8010694:	f9b3 3000 	ldrsh.w	r3, [r3]
 8010698:	009b      	lsls	r3, r3, #2
 801069a:	4aa8      	ldr	r2, [pc, #672]	; (801093c <Save_Csv+0x2d4>)
 801069c:	f9b2 2000 	ldrsh.w	r2, [r2]
 80106a0:	4611      	mov	r1, r2
 80106a2:	4aa7      	ldr	r2, [pc, #668]	; (8010940 <Save_Csv+0x2d8>)
 80106a4:	5c52      	ldrb	r2, [r2, r1]
 80106a6:	fb93 f3f2 	sdiv	r3, r3, r2
 80106aa:	63bb      	str	r3, [r7, #56]	; 0x38
 80106ac:	4aa5      	ldr	r2, [pc, #660]	; (8010944 <Save_Csv+0x2dc>)
 80106ae:	f107 031c 	add.w	r3, r7, #28
 80106b2:	ca07      	ldmia	r2, {r0, r1, r2}
 80106b4:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80106b8:	2300      	movs	r3, #0
 80106ba:	64bb      	str	r3, [r7, #72]	; 0x48
 80106bc:	2300      	movs	r3, #0
 80106be:	647b      	str	r3, [r7, #68]	; 0x44
 80106c0:	2304      	movs	r3, #4
 80106c2:	637b      	str	r3, [r7, #52]	; 0x34
 80106c4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80106c8:	633b      	str	r3, [r7, #48]	; 0x30
 80106ca:	f107 021c 	add.w	r2, r7, #28
 80106ce:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80106d2:	4611      	mov	r1, r2
 80106d4:	4618      	mov	r0, r3
 80106d6:	f7ff f9f9 	bl	800facc <Make_Filename>
 80106da:	f107 0310 	add.w	r3, r7, #16
 80106de:	f107 0214 	add.w	r2, r7, #20
 80106e2:	f107 011c 	add.w	r1, r7, #28
 80106e6:	4898      	ldr	r0, [pc, #608]	; (8010948 <Save_Csv+0x2e0>)
 80106e8:	f7fe ff56 	bl	800f598 <OpenFileWr>
 80106ec:	4603      	mov	r3, r0
 80106ee:	2b00      	cmp	r3, #0
 80106f0:	d002      	beq.n	80106f8 <Save_Csv+0x90>
 80106f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80106f4:	b2db      	uxtb	r3, r3
 80106f6:	e1d3      	b.n	8010aa0 <Save_Csv+0x438>
 80106f8:	4b94      	ldr	r3, [pc, #592]	; (801094c <Save_Csv+0x2e4>)
 80106fa:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 80106fe:	00db      	lsls	r3, r3, #3
 8010700:	4a93      	ldr	r2, [pc, #588]	; (8010950 <Save_Csv+0x2e8>)
 8010702:	4413      	add	r3, r2
 8010704:	2205      	movs	r2, #5
 8010706:	4619      	mov	r1, r3
 8010708:	488f      	ldr	r0, [pc, #572]	; (8010948 <Save_Csv+0x2e0>)
 801070a:	f012 fa35 	bl	8022b78 <memcpy>
 801070e:	2203      	movs	r2, #3
 8010710:	4990      	ldr	r1, [pc, #576]	; (8010954 <Save_Csv+0x2ec>)
 8010712:	4891      	ldr	r0, [pc, #580]	; (8010958 <Save_Csv+0x2f0>)
 8010714:	f012 fa30 	bl	8022b78 <memcpy>
 8010718:	4b90      	ldr	r3, [pc, #576]	; (801095c <Save_Csv+0x2f4>)
 801071a:	62fb      	str	r3, [r7, #44]	; 0x2c
 801071c:	2300      	movs	r3, #0
 801071e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8010720:	4b8a      	ldr	r3, [pc, #552]	; (801094c <Save_Csv+0x2e4>)
 8010722:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8010726:	461a      	mov	r2, r3
 8010728:	4613      	mov	r3, r2
 801072a:	005b      	lsls	r3, r3, #1
 801072c:	4413      	add	r3, r2
 801072e:	005b      	lsls	r3, r3, #1
 8010730:	4a8b      	ldr	r2, [pc, #556]	; (8010960 <Save_Csv+0x2f8>)
 8010732:	4413      	add	r3, r2
 8010734:	63fb      	str	r3, [r7, #60]	; 0x3c
 8010736:	e00a      	b.n	801074e <Save_Csv+0xe6>
 8010738:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801073a:	1c5a      	adds	r2, r3, #1
 801073c:	63fa      	str	r2, [r7, #60]	; 0x3c
 801073e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8010740:	1c51      	adds	r1, r2, #1
 8010742:	64f9      	str	r1, [r7, #76]	; 0x4c
 8010744:	4611      	mov	r1, r2
 8010746:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8010748:	440a      	add	r2, r1
 801074a:	781b      	ldrb	r3, [r3, #0]
 801074c:	7013      	strb	r3, [r2, #0]
 801074e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010750:	781b      	ldrb	r3, [r3, #0]
 8010752:	2b00      	cmp	r3, #0
 8010754:	d1f0      	bne.n	8010738 <Save_Csv+0xd0>
 8010756:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010758:	1c5a      	adds	r2, r3, #1
 801075a:	64fa      	str	r2, [r7, #76]	; 0x4c
 801075c:	461a      	mov	r2, r3
 801075e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010760:	4413      	add	r3, r2
 8010762:	222a      	movs	r2, #42	; 0x2a
 8010764:	701a      	strb	r2, [r3, #0]
 8010766:	4b79      	ldr	r3, [pc, #484]	; (801094c <Save_Csv+0x2e4>)
 8010768:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 801076c:	461a      	mov	r2, r3
 801076e:	4613      	mov	r3, r2
 8010770:	005b      	lsls	r3, r3, #1
 8010772:	4413      	add	r3, r2
 8010774:	005b      	lsls	r3, r3, #1
 8010776:	4a7b      	ldr	r2, [pc, #492]	; (8010964 <Save_Csv+0x2fc>)
 8010778:	4413      	add	r3, r2
 801077a:	63fb      	str	r3, [r7, #60]	; 0x3c
 801077c:	e00a      	b.n	8010794 <Save_Csv+0x12c>
 801077e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010780:	1c5a      	adds	r2, r3, #1
 8010782:	63fa      	str	r2, [r7, #60]	; 0x3c
 8010784:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8010786:	1c51      	adds	r1, r2, #1
 8010788:	64f9      	str	r1, [r7, #76]	; 0x4c
 801078a:	4611      	mov	r1, r2
 801078c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801078e:	440a      	add	r2, r1
 8010790:	781b      	ldrb	r3, [r3, #0]
 8010792:	7013      	strb	r3, [r2, #0]
 8010794:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010796:	781b      	ldrb	r3, [r3, #0]
 8010798:	2b00      	cmp	r3, #0
 801079a:	d1f0      	bne.n	801077e <Save_Csv+0x116>
 801079c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801079e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80107a0:	4413      	add	r3, r2
 80107a2:	222c      	movs	r2, #44	; 0x2c
 80107a4:	701a      	strb	r2, [r3, #0]
 80107a6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80107a8:	3301      	adds	r3, #1
 80107aa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80107ac:	4413      	add	r3, r2
 80107ae:	2200      	movs	r2, #0
 80107b0:	701a      	strb	r2, [r3, #0]
 80107b2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80107b4:	b29b      	uxth	r3, r3
 80107b6:	3301      	adds	r3, #1
 80107b8:	b29b      	uxth	r3, r3
 80107ba:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 80107be:	f9b7 3042 	ldrsh.w	r3, [r7, #66]	; 0x42
 80107c2:	3308      	adds	r3, #8
 80107c4:	64bb      	str	r3, [r7, #72]	; 0x48
 80107c6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80107c8:	4a5f      	ldr	r2, [pc, #380]	; (8010948 <Save_Csv+0x2e0>)
 80107ca:	4413      	add	r3, r2
 80107cc:	2202      	movs	r2, #2
 80107ce:	4966      	ldr	r1, [pc, #408]	; (8010968 <Save_Csv+0x300>)
 80107d0:	4618      	mov	r0, r3
 80107d2:	f012 f9d1 	bl	8022b78 <memcpy>
 80107d6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80107d8:	3302      	adds	r3, #2
 80107da:	64bb      	str	r3, [r7, #72]	; 0x48
 80107dc:	2300      	movs	r3, #0
 80107de:	64fb      	str	r3, [r7, #76]	; 0x4c
 80107e0:	e0fe      	b.n	80109e0 <Save_Csv+0x378>
 80107e2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80107e4:	3302      	adds	r3, #2
 80107e6:	4a61      	ldr	r2, [pc, #388]	; (801096c <Save_Csv+0x304>)
 80107e8:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 80107ec:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 80107f0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80107f2:	fb02 f303 	mul.w	r3, r2, r3
 80107f6:	131b      	asrs	r3, r3, #12
 80107f8:	b29b      	uxth	r3, r3
 80107fa:	3364      	adds	r3, #100	; 0x64
 80107fc:	b29b      	uxth	r3, r3
 80107fe:	857b      	strh	r3, [r7, #42]	; 0x2a
 8010800:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8010804:	2b00      	cmp	r3, #0
 8010806:	dd0a      	ble.n	801081e <Save_Csv+0x1b6>
 8010808:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 801080c:	2bc8      	cmp	r3, #200	; 0xc8
 801080e:	dd02      	ble.n	8010816 <Save_Csv+0x1ae>
 8010810:	23c7      	movs	r3, #199	; 0xc7
 8010812:	723b      	strb	r3, [r7, #8]
 8010814:	e005      	b.n	8010822 <Save_Csv+0x1ba>
 8010816:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8010818:	b2db      	uxtb	r3, r3
 801081a:	723b      	strb	r3, [r7, #8]
 801081c:	e001      	b.n	8010822 <Save_Csv+0x1ba>
 801081e:	2300      	movs	r3, #0
 8010820:	723b      	strb	r3, [r7, #8]
 8010822:	7a3a      	ldrb	r2, [r7, #8]
 8010824:	f107 030c 	add.w	r3, r7, #12
 8010828:	4611      	mov	r1, r2
 801082a:	4618      	mov	r0, r3
 801082c:	f001 f898 	bl	8011960 <u8ToDec3>
 8010830:	2300      	movs	r3, #0
 8010832:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8010836:	e03a      	b.n	80108ae <Save_Csv+0x246>
 8010838:	f9b7 3042 	ldrsh.w	r3, [r7, #66]	; 0x42
 801083c:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8010840:	4413      	add	r3, r2
 8010842:	f813 3c44 	ldrb.w	r3, [r3, #-68]
 8010846:	2b00      	cmp	r3, #0
 8010848:	d036      	beq.n	80108b8 <Save_Csv+0x250>
 801084a:	f9b7 2042 	ldrsh.w	r2, [r7, #66]	; 0x42
 801084e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010850:	1c59      	adds	r1, r3, #1
 8010852:	64b9      	str	r1, [r7, #72]	; 0x48
 8010854:	f107 0150 	add.w	r1, r7, #80	; 0x50
 8010858:	440a      	add	r2, r1
 801085a:	f812 1c44 	ldrb.w	r1, [r2, #-68]
 801085e:	4a3a      	ldr	r2, [pc, #232]	; (8010948 <Save_Csv+0x2e0>)
 8010860:	54d1      	strb	r1, [r2, r3]
 8010862:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8010864:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010866:	429a      	cmp	r2, r3
 8010868:	db1a      	blt.n	80108a0 <Save_Csv+0x238>
 801086a:	f107 0314 	add.w	r3, r7, #20
 801086e:	4619      	mov	r1, r3
 8010870:	4835      	ldr	r0, [pc, #212]	; (8010948 <Save_Csv+0x2e0>)
 8010872:	f7fe fdb9 	bl	800f3e8 <ProgFileSec>
 8010876:	4603      	mov	r3, r0
 8010878:	2b00      	cmp	r3, #0
 801087a:	d001      	beq.n	8010880 <Save_Csv+0x218>
 801087c:	2303      	movs	r3, #3
 801087e:	e10f      	b.n	8010aa0 <Save_Csv+0x438>
 8010880:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010882:	1c5a      	adds	r2, r3, #1
 8010884:	647a      	str	r2, [r7, #68]	; 0x44
 8010886:	105b      	asrs	r3, r3, #1
 8010888:	b2db      	uxtb	r3, r3
 801088a:	f003 0303 	and.w	r3, r3, #3
 801088e:	b2db      	uxtb	r3, r3
 8010890:	461a      	mov	r2, r3
 8010892:	2102      	movs	r1, #2
 8010894:	f44f 7084 	mov.w	r0, #264	; 0x108
 8010898:	f7fe ff60 	bl	800f75c <PrintClk>
 801089c:	2300      	movs	r3, #0
 801089e:	64bb      	str	r3, [r7, #72]	; 0x48
 80108a0:	f9b7 3042 	ldrsh.w	r3, [r7, #66]	; 0x42
 80108a4:	b29b      	uxth	r3, r3
 80108a6:	3301      	adds	r3, #1
 80108a8:	b29b      	uxth	r3, r3
 80108aa:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 80108ae:	f9b7 3042 	ldrsh.w	r3, [r7, #66]	; 0x42
 80108b2:	2b02      	cmp	r3, #2
 80108b4:	ddc0      	ble.n	8010838 <Save_Csv+0x1d0>
 80108b6:	e000      	b.n	80108ba <Save_Csv+0x252>
 80108b8:	bf00      	nop
 80108ba:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80108bc:	1c5a      	adds	r2, r3, #1
 80108be:	64ba      	str	r2, [r7, #72]	; 0x48
 80108c0:	4a21      	ldr	r2, [pc, #132]	; (8010948 <Save_Csv+0x2e0>)
 80108c2:	212c      	movs	r1, #44	; 0x2c
 80108c4:	54d1      	strb	r1, [r2, r3]
 80108c6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80108c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80108ca:	429a      	cmp	r2, r3
 80108cc:	db1a      	blt.n	8010904 <Save_Csv+0x29c>
 80108ce:	f107 0314 	add.w	r3, r7, #20
 80108d2:	4619      	mov	r1, r3
 80108d4:	481c      	ldr	r0, [pc, #112]	; (8010948 <Save_Csv+0x2e0>)
 80108d6:	f7fe fd87 	bl	800f3e8 <ProgFileSec>
 80108da:	4603      	mov	r3, r0
 80108dc:	2b00      	cmp	r3, #0
 80108de:	d001      	beq.n	80108e4 <Save_Csv+0x27c>
 80108e0:	2303      	movs	r3, #3
 80108e2:	e0dd      	b.n	8010aa0 <Save_Csv+0x438>
 80108e4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80108e6:	1c5a      	adds	r2, r3, #1
 80108e8:	647a      	str	r2, [r7, #68]	; 0x44
 80108ea:	105b      	asrs	r3, r3, #1
 80108ec:	b2db      	uxtb	r3, r3
 80108ee:	f003 0303 	and.w	r3, r3, #3
 80108f2:	b2db      	uxtb	r3, r3
 80108f4:	461a      	mov	r2, r3
 80108f6:	2102      	movs	r1, #2
 80108f8:	f44f 7084 	mov.w	r0, #264	; 0x108
 80108fc:	f7fe ff2e 	bl	800f75c <PrintClk>
 8010900:	2300      	movs	r3, #0
 8010902:	64bb      	str	r3, [r7, #72]	; 0x48
 8010904:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010906:	1c5a      	adds	r2, r3, #1
 8010908:	64ba      	str	r2, [r7, #72]	; 0x48
 801090a:	4a0f      	ldr	r2, [pc, #60]	; (8010948 <Save_Csv+0x2e0>)
 801090c:	210d      	movs	r1, #13
 801090e:	54d1      	strb	r1, [r2, r3]
 8010910:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8010912:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010914:	429a      	cmp	r2, r3
 8010916:	db3b      	blt.n	8010990 <Save_Csv+0x328>
 8010918:	f107 0314 	add.w	r3, r7, #20
 801091c:	4619      	mov	r1, r3
 801091e:	480a      	ldr	r0, [pc, #40]	; (8010948 <Save_Csv+0x2e0>)
 8010920:	f7fe fd62 	bl	800f3e8 <ProgFileSec>
 8010924:	4603      	mov	r3, r0
 8010926:	2b00      	cmp	r3, #0
 8010928:	d022      	beq.n	8010970 <Save_Csv+0x308>
 801092a:	2303      	movs	r3, #3
 801092c:	e0b8      	b.n	8010aa0 <Save_Csv+0x438>
 801092e:	bf00      	nop
 8010930:	2000057c 	.word	0x2000057c
 8010934:	20006886 	.word	0x20006886
 8010938:	20002862 	.word	0x20002862
 801093c:	2000284a 	.word	0x2000284a
 8010940:	20000560 	.word	0x20000560
 8010944:	08000220 	.word	0x08000220
 8010948:	200017d8 	.word	0x200017d8
 801094c:	20000298 	.word	0x20000298
 8010950:	200001d0 	.word	0x200001d0
 8010954:	08000244 	.word	0x08000244
 8010958:	200017dd 	.word	0x200017dd
 801095c:	200017e0 	.word	0x200017e0
 8010960:	08001da8 	.word	0x08001da8
 8010964:	08001cd4 	.word	0x08001cd4
 8010968:	08000248 	.word	0x08000248
 801096c:	20002870 	.word	0x20002870
 8010970:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010972:	1c5a      	adds	r2, r3, #1
 8010974:	647a      	str	r2, [r7, #68]	; 0x44
 8010976:	105b      	asrs	r3, r3, #1
 8010978:	b2db      	uxtb	r3, r3
 801097a:	f003 0303 	and.w	r3, r3, #3
 801097e:	b2db      	uxtb	r3, r3
 8010980:	461a      	mov	r2, r3
 8010982:	2102      	movs	r1, #2
 8010984:	f44f 7084 	mov.w	r0, #264	; 0x108
 8010988:	f7fe fee8 	bl	800f75c <PrintClk>
 801098c:	2300      	movs	r3, #0
 801098e:	64bb      	str	r3, [r7, #72]	; 0x48
 8010990:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010992:	1c5a      	adds	r2, r3, #1
 8010994:	64ba      	str	r2, [r7, #72]	; 0x48
 8010996:	4a44      	ldr	r2, [pc, #272]	; (8010aa8 <Save_Csv+0x440>)
 8010998:	210a      	movs	r1, #10
 801099a:	54d1      	strb	r1, [r2, r3]
 801099c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801099e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80109a0:	429a      	cmp	r2, r3
 80109a2:	db1a      	blt.n	80109da <Save_Csv+0x372>
 80109a4:	f107 0314 	add.w	r3, r7, #20
 80109a8:	4619      	mov	r1, r3
 80109aa:	483f      	ldr	r0, [pc, #252]	; (8010aa8 <Save_Csv+0x440>)
 80109ac:	f7fe fd1c 	bl	800f3e8 <ProgFileSec>
 80109b0:	4603      	mov	r3, r0
 80109b2:	2b00      	cmp	r3, #0
 80109b4:	d001      	beq.n	80109ba <Save_Csv+0x352>
 80109b6:	2303      	movs	r3, #3
 80109b8:	e072      	b.n	8010aa0 <Save_Csv+0x438>
 80109ba:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80109bc:	1c5a      	adds	r2, r3, #1
 80109be:	647a      	str	r2, [r7, #68]	; 0x44
 80109c0:	105b      	asrs	r3, r3, #1
 80109c2:	b2db      	uxtb	r3, r3
 80109c4:	f003 0303 	and.w	r3, r3, #3
 80109c8:	b2db      	uxtb	r3, r3
 80109ca:	461a      	mov	r2, r3
 80109cc:	2102      	movs	r1, #2
 80109ce:	f44f 7084 	mov.w	r0, #264	; 0x108
 80109d2:	f7fe fec3 	bl	800f75c <PrintClk>
 80109d6:	2300      	movs	r3, #0
 80109d8:	64bb      	str	r3, [r7, #72]	; 0x48
 80109da:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80109dc:	3301      	adds	r3, #1
 80109de:	64fb      	str	r3, [r7, #76]	; 0x4c
 80109e0:	4b32      	ldr	r3, [pc, #200]	; (8010aac <Save_Csv+0x444>)
 80109e2:	f9b3 304c 	ldrsh.w	r3, [r3, #76]	; 0x4c
 80109e6:	461a      	mov	r2, r3
 80109e8:	4b31      	ldr	r3, [pc, #196]	; (8010ab0 <Save_Csv+0x448>)
 80109ea:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 80109ee:	461a      	mov	r2, r3
 80109f0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80109f2:	4293      	cmp	r3, r2
 80109f4:	f6ff aef5 	blt.w	80107e2 <Save_Csv+0x17a>
 80109f8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80109fa:	2b00      	cmp	r3, #0
 80109fc:	d030      	beq.n	8010a60 <Save_Csv+0x3f8>
 80109fe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010a00:	1c5a      	adds	r2, r3, #1
 8010a02:	64ba      	str	r2, [r7, #72]	; 0x48
 8010a04:	4a28      	ldr	r2, [pc, #160]	; (8010aa8 <Save_Csv+0x440>)
 8010a06:	210d      	movs	r1, #13
 8010a08:	54d1      	strb	r1, [r2, r3]
 8010a0a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010a0c:	1c5a      	adds	r2, r3, #1
 8010a0e:	64ba      	str	r2, [r7, #72]	; 0x48
 8010a10:	4a25      	ldr	r2, [pc, #148]	; (8010aa8 <Save_Csv+0x440>)
 8010a12:	210a      	movs	r1, #10
 8010a14:	54d1      	strb	r1, [r2, r3]
 8010a16:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010a18:	4a23      	ldr	r2, [pc, #140]	; (8010aa8 <Save_Csv+0x440>)
 8010a1a:	1898      	adds	r0, r3, r2
 8010a1c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010a1e:	f5c3 5380 	rsb	r3, r3, #4096	; 0x1000
 8010a22:	461a      	mov	r2, r3
 8010a24:	2120      	movs	r1, #32
 8010a26:	f012 f8b5 	bl	8022b94 <memset>
 8010a2a:	2300      	movs	r3, #0
 8010a2c:	64bb      	str	r3, [r7, #72]	; 0x48
 8010a2e:	f107 0314 	add.w	r3, r7, #20
 8010a32:	4619      	mov	r1, r3
 8010a34:	481c      	ldr	r0, [pc, #112]	; (8010aa8 <Save_Csv+0x440>)
 8010a36:	f7fe fcd7 	bl	800f3e8 <ProgFileSec>
 8010a3a:	4603      	mov	r3, r0
 8010a3c:	2b00      	cmp	r3, #0
 8010a3e:	d001      	beq.n	8010a44 <Save_Csv+0x3dc>
 8010a40:	2303      	movs	r3, #3
 8010a42:	e02d      	b.n	8010aa0 <Save_Csv+0x438>
 8010a44:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010a46:	1c5a      	adds	r2, r3, #1
 8010a48:	647a      	str	r2, [r7, #68]	; 0x44
 8010a4a:	105b      	asrs	r3, r3, #1
 8010a4c:	b2db      	uxtb	r3, r3
 8010a4e:	f003 0303 	and.w	r3, r3, #3
 8010a52:	b2db      	uxtb	r3, r3
 8010a54:	461a      	mov	r2, r3
 8010a56:	2102      	movs	r1, #2
 8010a58:	f44f 7084 	mov.w	r0, #264	; 0x108
 8010a5c:	f7fe fe7e 	bl	800f75c <PrintClk>
 8010a60:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010a62:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010a64:	fb02 f103 	mul.w	r1, r2, r3
 8010a68:	f107 0310 	add.w	r3, r7, #16
 8010a6c:	f107 0214 	add.w	r2, r7, #20
 8010a70:	480d      	ldr	r0, [pc, #52]	; (8010aa8 <Save_Csv+0x440>)
 8010a72:	f7fe fd2d 	bl	800f4d0 <CloseFile>
 8010a76:	4603      	mov	r3, r0
 8010a78:	2b00      	cmp	r3, #0
 8010a7a:	d001      	beq.n	8010a80 <Save_Csv+0x418>
 8010a7c:	2304      	movs	r3, #4
 8010a7e:	e00f      	b.n	8010aa0 <Save_Csv+0x438>
 8010a80:	4b0a      	ldr	r3, [pc, #40]	; (8010aac <Save_Csv+0x444>)
 8010a82:	f9b3 3104 	ldrsh.w	r3, [r3, #260]	; 0x104
 8010a86:	2b62      	cmp	r3, #98	; 0x62
 8010a88:	dc09      	bgt.n	8010a9e <Save_Csv+0x436>
 8010a8a:	4b08      	ldr	r3, [pc, #32]	; (8010aac <Save_Csv+0x444>)
 8010a8c:	f9b3 3104 	ldrsh.w	r3, [r3, #260]	; 0x104
 8010a90:	b29b      	uxth	r3, r3
 8010a92:	3301      	adds	r3, #1
 8010a94:	b29b      	uxth	r3, r3
 8010a96:	b21a      	sxth	r2, r3
 8010a98:	4b04      	ldr	r3, [pc, #16]	; (8010aac <Save_Csv+0x444>)
 8010a9a:	f8a3 2104 	strh.w	r2, [r3, #260]	; 0x104
 8010a9e:	2300      	movs	r3, #0
 8010aa0:	4618      	mov	r0, r3
 8010aa2:	3750      	adds	r7, #80	; 0x50
 8010aa4:	46bd      	mov	sp, r7
 8010aa6:	bd80      	pop	{r7, pc}
 8010aa8:	200017d8 	.word	0x200017d8
 8010aac:	20000298 	.word	0x20000298
 8010ab0:	08002270 	.word	0x08002270

08010ab4 <Save_Svg>:
 8010ab4:	b580      	push	{r7, lr}
 8010ab6:	b092      	sub	sp, #72	; 0x48
 8010ab8:	af00      	add	r7, sp, #0
 8010aba:	4603      	mov	r3, r0
 8010abc:	80fb      	strh	r3, [r7, #6]
 8010abe:	4abb      	ldr	r2, [pc, #748]	; (8010dac <Save_Svg+0x2f8>)
 8010ac0:	f107 031c 	add.w	r3, r7, #28
 8010ac4:	ca07      	ldmia	r2, {r0, r1, r2}
 8010ac6:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8010aca:	2304      	movs	r3, #4
 8010acc:	63bb      	str	r3, [r7, #56]	; 0x38
 8010ace:	2300      	movs	r3, #0
 8010ad0:	637b      	str	r3, [r7, #52]	; 0x34
 8010ad2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8010ad6:	867b      	strh	r3, [r7, #50]	; 0x32
 8010ad8:	2300      	movs	r3, #0
 8010ada:	863b      	strh	r3, [r7, #48]	; 0x30
 8010adc:	4bb4      	ldr	r3, [pc, #720]	; (8010db0 <Save_Svg+0x2fc>)
 8010ade:	681a      	ldr	r2, [r3, #0]
 8010ae0:	4bb4      	ldr	r3, [pc, #720]	; (8010db4 <Save_Svg+0x300>)
 8010ae2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8010ae6:	4619      	mov	r1, r3
 8010ae8:	4bb3      	ldr	r3, [pc, #716]	; (8010db8 <Save_Svg+0x304>)
 8010aea:	f9b3 3000 	ldrsh.w	r3, [r3]
 8010aee:	2b00      	cmp	r3, #0
 8010af0:	bf14      	ite	ne
 8010af2:	2301      	movne	r3, #1
 8010af4:	2300      	moveq	r3, #0
 8010af6:	b2db      	uxtb	r3, r3
 8010af8:	440b      	add	r3, r1
 8010afa:	005b      	lsls	r3, r3, #1
 8010afc:	4413      	add	r3, r2
 8010afe:	f9b3 3000 	ldrsh.w	r3, [r3]
 8010b02:	009b      	lsls	r3, r3, #2
 8010b04:	4aad      	ldr	r2, [pc, #692]	; (8010dbc <Save_Svg+0x308>)
 8010b06:	f9b2 2000 	ldrsh.w	r2, [r2]
 8010b0a:	4611      	mov	r1, r2
 8010b0c:	4aac      	ldr	r2, [pc, #688]	; (8010dc0 <Save_Svg+0x30c>)
 8010b0e:	5c52      	ldrb	r2, [r2, r1]
 8010b10:	fb93 f3f2 	sdiv	r3, r3, r2
 8010b14:	62fb      	str	r3, [r7, #44]	; 0x2c
 8010b16:	4bab      	ldr	r3, [pc, #684]	; (8010dc4 <Save_Svg+0x310>)
 8010b18:	2200      	movs	r2, #0
 8010b1a:	601a      	str	r2, [r3, #0]
 8010b1c:	4baa      	ldr	r3, [pc, #680]	; (8010dc8 <Save_Svg+0x314>)
 8010b1e:	2200      	movs	r2, #0
 8010b20:	801a      	strh	r2, [r3, #0]
 8010b22:	4baa      	ldr	r3, [pc, #680]	; (8010dcc <Save_Svg+0x318>)
 8010b24:	2200      	movs	r2, #0
 8010b26:	801a      	strh	r2, [r3, #0]
 8010b28:	4ba9      	ldr	r3, [pc, #676]	; (8010dd0 <Save_Svg+0x31c>)
 8010b2a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8010b2c:	f44f 729b 	mov.w	r2, #310	; 0x136
 8010b30:	2100      	movs	r1, #0
 8010b32:	48a7      	ldr	r0, [pc, #668]	; (8010dd0 <Save_Svg+0x31c>)
 8010b34:	f012 f82e 	bl	8022b94 <memset>
 8010b38:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 8010b3c:	461a      	mov	r2, r3
 8010b3e:	2100      	movs	r1, #0
 8010b40:	48a4      	ldr	r0, [pc, #656]	; (8010dd4 <Save_Svg+0x320>)
 8010b42:	f012 f827 	bl	8022b94 <memset>
 8010b46:	f107 021c 	add.w	r2, r7, #28
 8010b4a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8010b4e:	4611      	mov	r1, r2
 8010b50:	4618      	mov	r0, r3
 8010b52:	f7fe ffbb 	bl	800facc <Make_Filename>
 8010b56:	f107 0310 	add.w	r3, r7, #16
 8010b5a:	f107 0214 	add.w	r2, r7, #20
 8010b5e:	f107 011c 	add.w	r1, r7, #28
 8010b62:	489c      	ldr	r0, [pc, #624]	; (8010dd4 <Save_Svg+0x320>)
 8010b64:	f7fe fd18 	bl	800f598 <OpenFileWr>
 8010b68:	4603      	mov	r3, r0
 8010b6a:	2b00      	cmp	r3, #0
 8010b6c:	d002      	beq.n	8010b74 <Save_Svg+0xc0>
 8010b6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010b70:	b2db      	uxtb	r3, r3
 8010b72:	e3d5      	b.n	8011320 <Save_Svg+0x86c>
 8010b74:	4b98      	ldr	r3, [pc, #608]	; (8010dd8 <Save_Svg+0x324>)
 8010b76:	63fb      	str	r3, [r7, #60]	; 0x3c
 8010b78:	f107 0314 	add.w	r3, r7, #20
 8010b7c:	4619      	mov	r1, r3
 8010b7e:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8010b80:	f7fe ff0a 	bl	800f998 <WriteStr>
 8010b84:	4b95      	ldr	r3, [pc, #596]	; (8010ddc <Save_Svg+0x328>)
 8010b86:	63fb      	str	r3, [r7, #60]	; 0x3c
 8010b88:	f107 0314 	add.w	r3, r7, #20
 8010b8c:	4619      	mov	r1, r3
 8010b8e:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8010b90:	f7fe ff02 	bl	800f998 <WriteStr>
 8010b94:	4b92      	ldr	r3, [pc, #584]	; (8010de0 <Save_Svg+0x32c>)
 8010b96:	63fb      	str	r3, [r7, #60]	; 0x3c
 8010b98:	f107 0314 	add.w	r3, r7, #20
 8010b9c:	4619      	mov	r1, r3
 8010b9e:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8010ba0:	f7fe fefa 	bl	800f998 <WriteStr>
 8010ba4:	4b8f      	ldr	r3, [pc, #572]	; (8010de4 <Save_Svg+0x330>)
 8010ba6:	f9b3 304c 	ldrsh.w	r3, [r3, #76]	; 0x4c
 8010baa:	461a      	mov	r2, r3
 8010bac:	4b8e      	ldr	r3, [pc, #568]	; (8010de8 <Save_Svg+0x334>)
 8010bae:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8010bb2:	f107 0214 	add.w	r2, r7, #20
 8010bb6:	4611      	mov	r1, r2
 8010bb8:	4618      	mov	r0, r3
 8010bba:	f7fe fe45 	bl	800f848 <WriteVar>
 8010bbe:	4b8b      	ldr	r3, [pc, #556]	; (8010dec <Save_Svg+0x338>)
 8010bc0:	63fb      	str	r3, [r7, #60]	; 0x3c
 8010bc2:	f107 0314 	add.w	r3, r7, #20
 8010bc6:	4619      	mov	r1, r3
 8010bc8:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8010bca:	f7fe fee5 	bl	800f998 <WriteStr>
 8010bce:	4b88      	ldr	r3, [pc, #544]	; (8010df0 <Save_Svg+0x33c>)
 8010bd0:	63fb      	str	r3, [r7, #60]	; 0x3c
 8010bd2:	f107 0314 	add.w	r3, r7, #20
 8010bd6:	4619      	mov	r1, r3
 8010bd8:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8010bda:	f7fe fedd 	bl	800f998 <WriteStr>
 8010bde:	4b81      	ldr	r3, [pc, #516]	; (8010de4 <Save_Svg+0x330>)
 8010be0:	f9b3 304c 	ldrsh.w	r3, [r3, #76]	; 0x4c
 8010be4:	461a      	mov	r2, r3
 8010be6:	4b80      	ldr	r3, [pc, #512]	; (8010de8 <Save_Svg+0x334>)
 8010be8:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8010bec:	f107 0214 	add.w	r2, r7, #20
 8010bf0:	4611      	mov	r1, r2
 8010bf2:	4618      	mov	r0, r3
 8010bf4:	f7fe fe28 	bl	800f848 <WriteVar>
 8010bf8:	4b7e      	ldr	r3, [pc, #504]	; (8010df4 <Save_Svg+0x340>)
 8010bfa:	63fb      	str	r3, [r7, #60]	; 0x3c
 8010bfc:	f107 0314 	add.w	r3, r7, #20
 8010c00:	4619      	mov	r1, r3
 8010c02:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8010c04:	f7fe fec8 	bl	800f998 <WriteStr>
 8010c08:	4b7b      	ldr	r3, [pc, #492]	; (8010df8 <Save_Svg+0x344>)
 8010c0a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8010c0c:	f107 0314 	add.w	r3, r7, #20
 8010c10:	4619      	mov	r1, r3
 8010c12:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8010c14:	f7fe fec0 	bl	800f998 <WriteStr>
 8010c18:	4b72      	ldr	r3, [pc, #456]	; (8010de4 <Save_Svg+0x330>)
 8010c1a:	f9b3 3044 	ldrsh.w	r3, [r3, #68]	; 0x44
 8010c1e:	f107 0214 	add.w	r2, r7, #20
 8010c22:	4611      	mov	r1, r2
 8010c24:	4618      	mov	r0, r3
 8010c26:	f7fe fe0f 	bl	800f848 <WriteVar>
 8010c2a:	4b74      	ldr	r3, [pc, #464]	; (8010dfc <Save_Svg+0x348>)
 8010c2c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8010c2e:	f107 0314 	add.w	r3, r7, #20
 8010c32:	4619      	mov	r1, r3
 8010c34:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8010c36:	f7fe feaf 	bl	800f998 <WriteStr>
 8010c3a:	4b6a      	ldr	r3, [pc, #424]	; (8010de4 <Save_Svg+0x330>)
 8010c3c:	f9b3 3044 	ldrsh.w	r3, [r3, #68]	; 0x44
 8010c40:	f107 0214 	add.w	r2, r7, #20
 8010c44:	4611      	mov	r1, r2
 8010c46:	4618      	mov	r0, r3
 8010c48:	f7fe fdfe 	bl	800f848 <WriteVar>
 8010c4c:	4b6c      	ldr	r3, [pc, #432]	; (8010e00 <Save_Svg+0x34c>)
 8010c4e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8010c50:	f107 0314 	add.w	r3, r7, #20
 8010c54:	4619      	mov	r1, r3
 8010c56:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8010c58:	f7fe fe9e 	bl	800f998 <WriteStr>
 8010c5c:	4b61      	ldr	r3, [pc, #388]	; (8010de4 <Save_Svg+0x330>)
 8010c5e:	f9b3 3044 	ldrsh.w	r3, [r3, #68]	; 0x44
 8010c62:	b29b      	uxth	r3, r3
 8010c64:	f503 7396 	add.w	r3, r3, #300	; 0x12c
 8010c68:	b29b      	uxth	r3, r3
 8010c6a:	b21b      	sxth	r3, r3
 8010c6c:	f107 0214 	add.w	r2, r7, #20
 8010c70:	4611      	mov	r1, r2
 8010c72:	4618      	mov	r0, r3
 8010c74:	f7fe fde8 	bl	800f848 <WriteVar>
 8010c78:	4b62      	ldr	r3, [pc, #392]	; (8010e04 <Save_Svg+0x350>)
 8010c7a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8010c7c:	f107 0314 	add.w	r3, r7, #20
 8010c80:	4619      	mov	r1, r3
 8010c82:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8010c84:	f7fe fe88 	bl	800f998 <WriteStr>
 8010c88:	2300      	movs	r3, #0
 8010c8a:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8010c8e:	e032      	b.n	8010cf6 <Save_Svg+0x242>
 8010c90:	4b5d      	ldr	r3, [pc, #372]	; (8010e08 <Save_Svg+0x354>)
 8010c92:	63fb      	str	r3, [r7, #60]	; 0x3c
 8010c94:	f107 0314 	add.w	r3, r7, #20
 8010c98:	4619      	mov	r1, r3
 8010c9a:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8010c9c:	f7fe fe7c 	bl	800f998 <WriteStr>
 8010ca0:	f107 0214 	add.w	r2, r7, #20
 8010ca4:	f9b7 3042 	ldrsh.w	r3, [r7, #66]	; 0x42
 8010ca8:	4611      	mov	r1, r2
 8010caa:	4618      	mov	r0, r3
 8010cac:	f7fe fdcc 	bl	800f848 <WriteVar>
 8010cb0:	4b56      	ldr	r3, [pc, #344]	; (8010e0c <Save_Svg+0x358>)
 8010cb2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8010cb4:	f107 0314 	add.w	r3, r7, #20
 8010cb8:	4619      	mov	r1, r3
 8010cba:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8010cbc:	f7fe fe6c 	bl	800f998 <WriteStr>
 8010cc0:	4b48      	ldr	r3, [pc, #288]	; (8010de4 <Save_Svg+0x330>)
 8010cc2:	f9b3 304c 	ldrsh.w	r3, [r3, #76]	; 0x4c
 8010cc6:	461a      	mov	r2, r3
 8010cc8:	4b47      	ldr	r3, [pc, #284]	; (8010de8 <Save_Svg+0x334>)
 8010cca:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8010cce:	f107 0214 	add.w	r2, r7, #20
 8010cd2:	4611      	mov	r1, r2
 8010cd4:	4618      	mov	r0, r3
 8010cd6:	f7fe fdb7 	bl	800f848 <WriteVar>
 8010cda:	4b4d      	ldr	r3, [pc, #308]	; (8010e10 <Save_Svg+0x35c>)
 8010cdc:	63fb      	str	r3, [r7, #60]	; 0x3c
 8010cde:	f107 0314 	add.w	r3, r7, #20
 8010ce2:	4619      	mov	r1, r3
 8010ce4:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8010ce6:	f7fe fe57 	bl	800f998 <WriteStr>
 8010cea:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8010cee:	3319      	adds	r3, #25
 8010cf0:	b29b      	uxth	r3, r3
 8010cf2:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8010cf6:	f9b7 3042 	ldrsh.w	r3, [r7, #66]	; 0x42
 8010cfa:	2bc8      	cmp	r3, #200	; 0xc8
 8010cfc:	ddc8      	ble.n	8010c90 <Save_Svg+0x1dc>
 8010cfe:	2300      	movs	r3, #0
 8010d00:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8010d04:	e01d      	b.n	8010d42 <Save_Svg+0x28e>
 8010d06:	4b43      	ldr	r3, [pc, #268]	; (8010e14 <Save_Svg+0x360>)
 8010d08:	63fb      	str	r3, [r7, #60]	; 0x3c
 8010d0a:	f107 0314 	add.w	r3, r7, #20
 8010d0e:	4619      	mov	r1, r3
 8010d10:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8010d12:	f7fe fe41 	bl	800f998 <WriteStr>
 8010d16:	f107 0214 	add.w	r2, r7, #20
 8010d1a:	f9b7 3044 	ldrsh.w	r3, [r7, #68]	; 0x44
 8010d1e:	4611      	mov	r1, r2
 8010d20:	4618      	mov	r0, r3
 8010d22:	f7fe fd91 	bl	800f848 <WriteVar>
 8010d26:	4b3c      	ldr	r3, [pc, #240]	; (8010e18 <Save_Svg+0x364>)
 8010d28:	63fb      	str	r3, [r7, #60]	; 0x3c
 8010d2a:	f107 0314 	add.w	r3, r7, #20
 8010d2e:	4619      	mov	r1, r3
 8010d30:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8010d32:	f7fe fe31 	bl	800f998 <WriteStr>
 8010d36:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8010d3a:	3319      	adds	r3, #25
 8010d3c:	b29b      	uxth	r3, r3
 8010d3e:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8010d42:	4b28      	ldr	r3, [pc, #160]	; (8010de4 <Save_Svg+0x330>)
 8010d44:	f9b3 304c 	ldrsh.w	r3, [r3, #76]	; 0x4c
 8010d48:	461a      	mov	r2, r3
 8010d4a:	4b27      	ldr	r3, [pc, #156]	; (8010de8 <Save_Svg+0x334>)
 8010d4c:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8010d50:	f9b7 2044 	ldrsh.w	r2, [r7, #68]	; 0x44
 8010d54:	429a      	cmp	r2, r3
 8010d56:	ddd6      	ble.n	8010d06 <Save_Svg+0x252>
 8010d58:	4b30      	ldr	r3, [pc, #192]	; (8010e1c <Save_Svg+0x368>)
 8010d5a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8010d5c:	f107 0314 	add.w	r3, r7, #20
 8010d60:	4619      	mov	r1, r3
 8010d62:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8010d64:	f7fe fe18 	bl	800f998 <WriteStr>
 8010d68:	2300      	movs	r3, #0
 8010d6a:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8010d6e:	e091      	b.n	8010e94 <Save_Svg+0x3e0>
 8010d70:	f9b7 3046 	ldrsh.w	r3, [r7, #70]	; 0x46
 8010d74:	3302      	adds	r3, #2
 8010d76:	4a2a      	ldr	r2, [pc, #168]	; (8010e20 <Save_Svg+0x36c>)
 8010d78:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8010d7c:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 8010d80:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8010d82:	fb02 f303 	mul.w	r3, r2, r3
 8010d86:	131b      	asrs	r3, r3, #12
 8010d88:	b29b      	uxth	r3, r3
 8010d8a:	3364      	adds	r3, #100	; 0x64
 8010d8c:	b29b      	uxth	r3, r3
 8010d8e:	857b      	strh	r3, [r7, #42]	; 0x2a
 8010d90:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8010d94:	2b00      	cmp	r3, #0
 8010d96:	dd45      	ble.n	8010e24 <Save_Svg+0x370>
 8010d98:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8010d9c:	2bc8      	cmp	r3, #200	; 0xc8
 8010d9e:	dd02      	ble.n	8010da6 <Save_Svg+0x2f2>
 8010da0:	23c7      	movs	r3, #199	; 0xc7
 8010da2:	813b      	strh	r3, [r7, #8]
 8010da4:	e040      	b.n	8010e28 <Save_Svg+0x374>
 8010da6:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8010da8:	813b      	strh	r3, [r7, #8]
 8010daa:	e03d      	b.n	8010e28 <Save_Svg+0x374>
 8010dac:	0800022c 	.word	0x0800022c
 8010db0:	2000057c 	.word	0x2000057c
 8010db4:	20006886 	.word	0x20006886
 8010db8:	20002862 	.word	0x20002862
 8010dbc:	2000284a 	.word	0x2000284a
 8010dc0:	20000560 	.word	0x20000560
 8010dc4:	20000794 	.word	0x20000794
 8010dc8:	20000790 	.word	0x20000790
 8010dcc:	20000792 	.word	0x20000792
 8010dd0:	20000008 	.word	0x20000008
 8010dd4:	200017d8 	.word	0x200017d8
 8010dd8:	0800024c 	.word	0x0800024c
 8010ddc:	0800027c 	.word	0x0800027c
 8010de0:	080002e8 	.word	0x080002e8
 8010de4:	20000298 	.word	0x20000298
 8010de8:	08002270 	.word	0x08002270
 8010dec:	080002f8 	.word	0x080002f8
 8010df0:	08000384 	.word	0x08000384
 8010df4:	080003b0 	.word	0x080003b0
 8010df8:	080003c0 	.word	0x080003c0
 8010dfc:	080003e8 	.word	0x080003e8
 8010e00:	080003f0 	.word	0x080003f0
 8010e04:	080003f8 	.word	0x080003f8
 8010e08:	08000404 	.word	0x08000404
 8010e0c:	08000424 	.word	0x08000424
 8010e10:	08000428 	.word	0x08000428
 8010e14:	08000430 	.word	0x08000430
 8010e18:	0800044c 	.word	0x0800044c
 8010e1c:	08000458 	.word	0x08000458
 8010e20:	20002870 	.word	0x20002870
 8010e24:	2300      	movs	r3, #0
 8010e26:	813b      	strh	r3, [r7, #8]
 8010e28:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8010e2c:	b29b      	uxth	r3, r3
 8010e2e:	f1c3 03c8 	rsb	r3, r3, #200	; 0xc8
 8010e32:	b29b      	uxth	r3, r3
 8010e34:	b21b      	sxth	r3, r3
 8010e36:	813b      	strh	r3, [r7, #8]
 8010e38:	f9b7 3046 	ldrsh.w	r3, [r7, #70]	; 0x46
 8010e3c:	2b00      	cmp	r3, #0
 8010e3e:	d102      	bne.n	8010e46 <Save_Svg+0x392>
 8010e40:	4b3b      	ldr	r3, [pc, #236]	; (8010f30 <Save_Svg+0x47c>)
 8010e42:	63fb      	str	r3, [r7, #60]	; 0x3c
 8010e44:	e001      	b.n	8010e4a <Save_Svg+0x396>
 8010e46:	4b3b      	ldr	r3, [pc, #236]	; (8010f34 <Save_Svg+0x480>)
 8010e48:	63fb      	str	r3, [r7, #60]	; 0x3c
 8010e4a:	f107 0314 	add.w	r3, r7, #20
 8010e4e:	4619      	mov	r1, r3
 8010e50:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8010e52:	f7fe fda1 	bl	800f998 <WriteStr>
 8010e56:	f107 0214 	add.w	r2, r7, #20
 8010e5a:	f9b7 3046 	ldrsh.w	r3, [r7, #70]	; 0x46
 8010e5e:	4611      	mov	r1, r2
 8010e60:	4618      	mov	r0, r3
 8010e62:	f7fe fcf1 	bl	800f848 <WriteVar>
 8010e66:	4b34      	ldr	r3, [pc, #208]	; (8010f38 <Save_Svg+0x484>)
 8010e68:	63fb      	str	r3, [r7, #60]	; 0x3c
 8010e6a:	f107 0314 	add.w	r3, r7, #20
 8010e6e:	4619      	mov	r1, r3
 8010e70:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8010e72:	f7fe fd91 	bl	800f998 <WriteStr>
 8010e76:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8010e7a:	f107 0214 	add.w	r2, r7, #20
 8010e7e:	4611      	mov	r1, r2
 8010e80:	4618      	mov	r0, r3
 8010e82:	f7fe fce1 	bl	800f848 <WriteVar>
 8010e86:	f9b7 3046 	ldrsh.w	r3, [r7, #70]	; 0x46
 8010e8a:	b29b      	uxth	r3, r3
 8010e8c:	3301      	adds	r3, #1
 8010e8e:	b29b      	uxth	r3, r3
 8010e90:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8010e94:	4b29      	ldr	r3, [pc, #164]	; (8010f3c <Save_Svg+0x488>)
 8010e96:	f9b3 304c 	ldrsh.w	r3, [r3, #76]	; 0x4c
 8010e9a:	461a      	mov	r2, r3
 8010e9c:	4b28      	ldr	r3, [pc, #160]	; (8010f40 <Save_Svg+0x48c>)
 8010e9e:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8010ea2:	f9b7 2046 	ldrsh.w	r2, [r7, #70]	; 0x46
 8010ea6:	429a      	cmp	r2, r3
 8010ea8:	f77f af62 	ble.w	8010d70 <Save_Svg+0x2bc>
 8010eac:	4b25      	ldr	r3, [pc, #148]	; (8010f44 <Save_Svg+0x490>)
 8010eae:	63fb      	str	r3, [r7, #60]	; 0x3c
 8010eb0:	f107 0314 	add.w	r3, r7, #20
 8010eb4:	4619      	mov	r1, r3
 8010eb6:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8010eb8:	f7fe fd6e 	bl	800f998 <WriteStr>
 8010ebc:	4b22      	ldr	r3, [pc, #136]	; (8010f48 <Save_Svg+0x494>)
 8010ebe:	63fb      	str	r3, [r7, #60]	; 0x3c
 8010ec0:	f107 0314 	add.w	r3, r7, #20
 8010ec4:	4619      	mov	r1, r3
 8010ec6:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8010ec8:	f7fe fd66 	bl	800f998 <WriteStr>
 8010ecc:	4b1b      	ldr	r3, [pc, #108]	; (8010f3c <Save_Svg+0x488>)
 8010ece:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8010ed2:	2b00      	cmp	r3, #0
 8010ed4:	d007      	beq.n	8010ee6 <Save_Svg+0x432>
 8010ed6:	4b19      	ldr	r3, [pc, #100]	; (8010f3c <Save_Svg+0x488>)
 8010ed8:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8010edc:	00db      	lsls	r3, r3, #3
 8010ede:	4a1b      	ldr	r2, [pc, #108]	; (8010f4c <Save_Svg+0x498>)
 8010ee0:	4413      	add	r3, r2
 8010ee2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8010ee4:	e006      	b.n	8010ef4 <Save_Svg+0x440>
 8010ee6:	4b15      	ldr	r3, [pc, #84]	; (8010f3c <Save_Svg+0x488>)
 8010ee8:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8010eec:	00db      	lsls	r3, r3, #3
 8010eee:	4a18      	ldr	r2, [pc, #96]	; (8010f50 <Save_Svg+0x49c>)
 8010ef0:	4413      	add	r3, r2
 8010ef2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8010ef4:	f107 0314 	add.w	r3, r7, #20
 8010ef8:	4619      	mov	r1, r3
 8010efa:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8010efc:	f7fe fd4c 	bl	800f998 <WriteStr>
 8010f00:	4b14      	ldr	r3, [pc, #80]	; (8010f54 <Save_Svg+0x4a0>)
 8010f02:	63fb      	str	r3, [r7, #60]	; 0x3c
 8010f04:	f107 0314 	add.w	r3, r7, #20
 8010f08:	4619      	mov	r1, r3
 8010f0a:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8010f0c:	f7fe fd44 	bl	800f998 <WriteStr>
 8010f10:	4b11      	ldr	r3, [pc, #68]	; (8010f58 <Save_Svg+0x4a4>)
 8010f12:	63fb      	str	r3, [r7, #60]	; 0x3c
 8010f14:	f107 0314 	add.w	r3, r7, #20
 8010f18:	4619      	mov	r1, r3
 8010f1a:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8010f1c:	f7fe fd3c 	bl	800f998 <WriteStr>
 8010f20:	4b06      	ldr	r3, [pc, #24]	; (8010f3c <Save_Svg+0x488>)
 8010f22:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8010f26:	2b00      	cmp	r3, #0
 8010f28:	d01a      	beq.n	8010f60 <Save_Svg+0x4ac>
 8010f2a:	4b0c      	ldr	r3, [pc, #48]	; (8010f5c <Save_Svg+0x4a8>)
 8010f2c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8010f2e:	e019      	b.n	8010f64 <Save_Svg+0x4b0>
 8010f30:	08000490 	.word	0x08000490
 8010f34:	08000494 	.word	0x08000494
 8010f38:	08000498 	.word	0x08000498
 8010f3c:	20000298 	.word	0x20000298
 8010f40:	08002270 	.word	0x08002270
 8010f44:	08000428 	.word	0x08000428
 8010f48:	0800049c 	.word	0x0800049c
 8010f4c:	080019fc 	.word	0x080019fc
 8010f50:	080019ac 	.word	0x080019ac
 8010f54:	08000504 	.word	0x08000504
 8010f58:	0800050c 	.word	0x0800050c
 8010f5c:	08000510 	.word	0x08000510
 8010f60:	4bb1      	ldr	r3, [pc, #708]	; (8011228 <Save_Svg+0x774>)
 8010f62:	63fb      	str	r3, [r7, #60]	; 0x3c
 8010f64:	f107 0314 	add.w	r3, r7, #20
 8010f68:	4619      	mov	r1, r3
 8010f6a:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8010f6c:	f7fe fd14 	bl	800f998 <WriteStr>
 8010f70:	4bae      	ldr	r3, [pc, #696]	; (801122c <Save_Svg+0x778>)
 8010f72:	63fb      	str	r3, [r7, #60]	; 0x3c
 8010f74:	f107 0314 	add.w	r3, r7, #20
 8010f78:	4619      	mov	r1, r3
 8010f7a:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8010f7c:	f7fe fd0c 	bl	800f998 <WriteStr>
 8010f80:	4bab      	ldr	r3, [pc, #684]	; (8011230 <Save_Svg+0x77c>)
 8010f82:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8010f86:	00db      	lsls	r3, r3, #3
 8010f88:	4aaa      	ldr	r2, [pc, #680]	; (8011234 <Save_Svg+0x780>)
 8010f8a:	4413      	add	r3, r2
 8010f8c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8010f8e:	f107 0314 	add.w	r3, r7, #20
 8010f92:	4619      	mov	r1, r3
 8010f94:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8010f96:	f7fe fcff 	bl	800f998 <WriteStr>
 8010f9a:	4ba7      	ldr	r3, [pc, #668]	; (8011238 <Save_Svg+0x784>)
 8010f9c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8010f9e:	f107 0314 	add.w	r3, r7, #20
 8010fa2:	4619      	mov	r1, r3
 8010fa4:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8010fa6:	f7fe fcf7 	bl	800f998 <WriteStr>
 8010faa:	4ba4      	ldr	r3, [pc, #656]	; (801123c <Save_Svg+0x788>)
 8010fac:	63fb      	str	r3, [r7, #60]	; 0x3c
 8010fae:	f107 0314 	add.w	r3, r7, #20
 8010fb2:	4619      	mov	r1, r3
 8010fb4:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8010fb6:	f7fe fcef 	bl	800f998 <WriteStr>
 8010fba:	4b9d      	ldr	r3, [pc, #628]	; (8011230 <Save_Svg+0x77c>)
 8010fbc:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 8010fc0:	b29b      	uxth	r3, r3
 8010fc2:	f1c3 03c7 	rsb	r3, r3, #199	; 0xc7
 8010fc6:	b29b      	uxth	r3, r3
 8010fc8:	863b      	strh	r3, [r7, #48]	; 0x30
 8010fca:	4b9d      	ldr	r3, [pc, #628]	; (8011240 <Save_Svg+0x78c>)
 8010fcc:	63fb      	str	r3, [r7, #60]	; 0x3c
 8010fce:	f107 0314 	add.w	r3, r7, #20
 8010fd2:	4619      	mov	r1, r3
 8010fd4:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8010fd6:	f7fe fcdf 	bl	800f998 <WriteStr>
 8010fda:	4b9a      	ldr	r3, [pc, #616]	; (8011244 <Save_Svg+0x790>)
 8010fdc:	63fb      	str	r3, [r7, #60]	; 0x3c
 8010fde:	f107 0314 	add.w	r3, r7, #20
 8010fe2:	4619      	mov	r1, r3
 8010fe4:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8010fe6:	f7fe fcd7 	bl	800f998 <WriteStr>
 8010fea:	4b97      	ldr	r3, [pc, #604]	; (8011248 <Save_Svg+0x794>)
 8010fec:	63fb      	str	r3, [r7, #60]	; 0x3c
 8010fee:	f107 0314 	add.w	r3, r7, #20
 8010ff2:	4619      	mov	r1, r3
 8010ff4:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8010ff6:	f7fe fccf 	bl	800f998 <WriteStr>
 8010ffa:	4b94      	ldr	r3, [pc, #592]	; (801124c <Save_Svg+0x798>)
 8010ffc:	63fb      	str	r3, [r7, #60]	; 0x3c
 8010ffe:	f107 0314 	add.w	r3, r7, #20
 8011002:	4619      	mov	r1, r3
 8011004:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8011006:	f7fe fcc7 	bl	800f998 <WriteStr>
 801100a:	4b91      	ldr	r3, [pc, #580]	; (8011250 <Save_Svg+0x79c>)
 801100c:	63fb      	str	r3, [r7, #60]	; 0x3c
 801100e:	f107 0314 	add.w	r3, r7, #20
 8011012:	4619      	mov	r1, r3
 8011014:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8011016:	f7fe fcbf 	bl	800f998 <WriteStr>
 801101a:	4b8e      	ldr	r3, [pc, #568]	; (8011254 <Save_Svg+0x7a0>)
 801101c:	63fb      	str	r3, [r7, #60]	; 0x3c
 801101e:	f107 0314 	add.w	r3, r7, #20
 8011022:	4619      	mov	r1, r3
 8011024:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8011026:	f7fe fcb7 	bl	800f998 <WriteStr>
 801102a:	4b8b      	ldr	r3, [pc, #556]	; (8011258 <Save_Svg+0x7a4>)
 801102c:	63fb      	str	r3, [r7, #60]	; 0x3c
 801102e:	f107 0314 	add.w	r3, r7, #20
 8011032:	4619      	mov	r1, r3
 8011034:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8011036:	f7fe fcaf 	bl	800f998 <WriteStr>
 801103a:	4b88      	ldr	r3, [pc, #544]	; (801125c <Save_Svg+0x7a8>)
 801103c:	63fb      	str	r3, [r7, #60]	; 0x3c
 801103e:	f107 0314 	add.w	r3, r7, #20
 8011042:	4619      	mov	r1, r3
 8011044:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8011046:	f7fe fca7 	bl	800f998 <WriteStr>
 801104a:	4b85      	ldr	r3, [pc, #532]	; (8011260 <Save_Svg+0x7ac>)
 801104c:	63fb      	str	r3, [r7, #60]	; 0x3c
 801104e:	f107 0314 	add.w	r3, r7, #20
 8011052:	4619      	mov	r1, r3
 8011054:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8011056:	f7fe fc9f 	bl	800f998 <WriteStr>
 801105a:	4b82      	ldr	r3, [pc, #520]	; (8011264 <Save_Svg+0x7b0>)
 801105c:	63fb      	str	r3, [r7, #60]	; 0x3c
 801105e:	f107 0314 	add.w	r3, r7, #20
 8011062:	4619      	mov	r1, r3
 8011064:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8011066:	f7fe fc97 	bl	800f998 <WriteStr>
 801106a:	4b7f      	ldr	r3, [pc, #508]	; (8011268 <Save_Svg+0x7b4>)
 801106c:	63fb      	str	r3, [r7, #60]	; 0x3c
 801106e:	f107 0314 	add.w	r3, r7, #20
 8011072:	4619      	mov	r1, r3
 8011074:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8011076:	f7fe fc8f 	bl	800f998 <WriteStr>
 801107a:	4b7c      	ldr	r3, [pc, #496]	; (801126c <Save_Svg+0x7b8>)
 801107c:	63fb      	str	r3, [r7, #60]	; 0x3c
 801107e:	f107 0314 	add.w	r3, r7, #20
 8011082:	4619      	mov	r1, r3
 8011084:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8011086:	f7fe fc87 	bl	800f998 <WriteStr>
 801108a:	4b79      	ldr	r3, [pc, #484]	; (8011270 <Save_Svg+0x7bc>)
 801108c:	63fb      	str	r3, [r7, #60]	; 0x3c
 801108e:	f107 0314 	add.w	r3, r7, #20
 8011092:	4619      	mov	r1, r3
 8011094:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8011096:	f7fe fc7f 	bl	800f998 <WriteStr>
 801109a:	4b65      	ldr	r3, [pc, #404]	; (8011230 <Save_Svg+0x77c>)
 801109c:	f9b3 304c 	ldrsh.w	r3, [r3, #76]	; 0x4c
 80110a0:	461a      	mov	r2, r3
 80110a2:	4b74      	ldr	r3, [pc, #464]	; (8011274 <Save_Svg+0x7c0>)
 80110a4:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 80110a8:	f107 0214 	add.w	r2, r7, #20
 80110ac:	4611      	mov	r1, r2
 80110ae:	4618      	mov	r0, r3
 80110b0:	f7fe fbca 	bl	800f848 <WriteVar>
 80110b4:	4b70      	ldr	r3, [pc, #448]	; (8011278 <Save_Svg+0x7c4>)
 80110b6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80110b8:	f107 0314 	add.w	r3, r7, #20
 80110bc:	4619      	mov	r1, r3
 80110be:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80110c0:	f7fe fc6a 	bl	800f998 <WriteStr>
 80110c4:	4b6d      	ldr	r3, [pc, #436]	; (801127c <Save_Svg+0x7c8>)
 80110c6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80110c8:	f107 0314 	add.w	r3, r7, #20
 80110cc:	4619      	mov	r1, r3
 80110ce:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80110d0:	f7fe fc62 	bl	800f998 <WriteStr>
 80110d4:	4b6a      	ldr	r3, [pc, #424]	; (8011280 <Save_Svg+0x7cc>)
 80110d6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80110d8:	f107 0314 	add.w	r3, r7, #20
 80110dc:	4619      	mov	r1, r3
 80110de:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80110e0:	f7fe fc5a 	bl	800f998 <WriteStr>
 80110e4:	4b67      	ldr	r3, [pc, #412]	; (8011284 <Save_Svg+0x7d0>)
 80110e6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80110e8:	f107 0314 	add.w	r3, r7, #20
 80110ec:	4619      	mov	r1, r3
 80110ee:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80110f0:	f7fe fc52 	bl	800f998 <WriteStr>
 80110f4:	4b64      	ldr	r3, [pc, #400]	; (8011288 <Save_Svg+0x7d4>)
 80110f6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80110f8:	f107 0314 	add.w	r3, r7, #20
 80110fc:	4619      	mov	r1, r3
 80110fe:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8011100:	f7fe fc4a 	bl	800f998 <WriteStr>
 8011104:	4b61      	ldr	r3, [pc, #388]	; (801128c <Save_Svg+0x7d8>)
 8011106:	63fb      	str	r3, [r7, #60]	; 0x3c
 8011108:	f107 0314 	add.w	r3, r7, #20
 801110c:	4619      	mov	r1, r3
 801110e:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8011110:	f7fe fc42 	bl	800f998 <WriteStr>
 8011114:	4b5e      	ldr	r3, [pc, #376]	; (8011290 <Save_Svg+0x7dc>)
 8011116:	63fb      	str	r3, [r7, #60]	; 0x3c
 8011118:	f107 0314 	add.w	r3, r7, #20
 801111c:	4619      	mov	r1, r3
 801111e:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8011120:	f7fe fc3a 	bl	800f998 <WriteStr>
 8011124:	4b58      	ldr	r3, [pc, #352]	; (8011288 <Save_Svg+0x7d4>)
 8011126:	63fb      	str	r3, [r7, #60]	; 0x3c
 8011128:	f107 0314 	add.w	r3, r7, #20
 801112c:	4619      	mov	r1, r3
 801112e:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8011130:	f7fe fc32 	bl	800f998 <WriteStr>
 8011134:	4b57      	ldr	r3, [pc, #348]	; (8011294 <Save_Svg+0x7e0>)
 8011136:	63fb      	str	r3, [r7, #60]	; 0x3c
 8011138:	f107 0314 	add.w	r3, r7, #20
 801113c:	4619      	mov	r1, r3
 801113e:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8011140:	f7fe fc2a 	bl	800f998 <WriteStr>
 8011144:	4b3a      	ldr	r3, [pc, #232]	; (8011230 <Save_Svg+0x77c>)
 8011146:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 801114a:	2b00      	cmp	r3, #0
 801114c:	d00b      	beq.n	8011166 <Save_Svg+0x6b2>
 801114e:	4b38      	ldr	r3, [pc, #224]	; (8011230 <Save_Svg+0x77c>)
 8011150:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8011154:	461a      	mov	r2, r3
 8011156:	4613      	mov	r3, r2
 8011158:	005b      	lsls	r3, r3, #1
 801115a:	4413      	add	r3, r2
 801115c:	005b      	lsls	r3, r3, #1
 801115e:	4a4e      	ldr	r2, [pc, #312]	; (8011298 <Save_Svg+0x7e4>)
 8011160:	4413      	add	r3, r2
 8011162:	63fb      	str	r3, [r7, #60]	; 0x3c
 8011164:	e00a      	b.n	801117c <Save_Svg+0x6c8>
 8011166:	4b32      	ldr	r3, [pc, #200]	; (8011230 <Save_Svg+0x77c>)
 8011168:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801116c:	461a      	mov	r2, r3
 801116e:	4613      	mov	r3, r2
 8011170:	005b      	lsls	r3, r3, #1
 8011172:	4413      	add	r3, r2
 8011174:	005b      	lsls	r3, r3, #1
 8011176:	4a49      	ldr	r2, [pc, #292]	; (801129c <Save_Svg+0x7e8>)
 8011178:	4413      	add	r3, r2
 801117a:	63fb      	str	r3, [r7, #60]	; 0x3c
 801117c:	f107 0314 	add.w	r3, r7, #20
 8011180:	4619      	mov	r1, r3
 8011182:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8011184:	f7fe fc08 	bl	800f998 <WriteStr>
 8011188:	4b45      	ldr	r3, [pc, #276]	; (80112a0 <Save_Svg+0x7ec>)
 801118a:	63fb      	str	r3, [r7, #60]	; 0x3c
 801118c:	f107 0314 	add.w	r3, r7, #20
 8011190:	4619      	mov	r1, r3
 8011192:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8011194:	f7fe fc00 	bl	800f998 <WriteStr>
 8011198:	f107 0214 	add.w	r2, r7, #20
 801119c:	f9b7 3030 	ldrsh.w	r3, [r7, #48]	; 0x30
 80111a0:	4611      	mov	r1, r2
 80111a2:	4618      	mov	r0, r3
 80111a4:	f7fe fb50 	bl	800f848 <WriteVar>
 80111a8:	4b3e      	ldr	r3, [pc, #248]	; (80112a4 <Save_Svg+0x7f0>)
 80111aa:	63fb      	str	r3, [r7, #60]	; 0x3c
 80111ac:	f107 0314 	add.w	r3, r7, #20
 80111b0:	4619      	mov	r1, r3
 80111b2:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80111b4:	f7fe fbf0 	bl	800f998 <WriteStr>
 80111b8:	4b1d      	ldr	r3, [pc, #116]	; (8011230 <Save_Svg+0x77c>)
 80111ba:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 80111be:	00db      	lsls	r3, r3, #3
 80111c0:	4a39      	ldr	r2, [pc, #228]	; (80112a8 <Save_Svg+0x7f4>)
 80111c2:	4413      	add	r3, r2
 80111c4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80111c6:	f107 0314 	add.w	r3, r7, #20
 80111ca:	4619      	mov	r1, r3
 80111cc:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80111ce:	f7fe fbe3 	bl	800f998 <WriteStr>
 80111d2:	4b36      	ldr	r3, [pc, #216]	; (80112ac <Save_Svg+0x7f8>)
 80111d4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80111d6:	f107 0314 	add.w	r3, r7, #20
 80111da:	4619      	mov	r1, r3
 80111dc:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80111de:	f7fe fbdb 	bl	800f998 <WriteStr>
 80111e2:	4b1d      	ldr	r3, [pc, #116]	; (8011258 <Save_Svg+0x7a4>)
 80111e4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80111e6:	f107 0314 	add.w	r3, r7, #20
 80111ea:	4619      	mov	r1, r3
 80111ec:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80111ee:	f7fe fbd3 	bl	800f998 <WriteStr>
 80111f2:	4b2f      	ldr	r3, [pc, #188]	; (80112b0 <Save_Svg+0x7fc>)
 80111f4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80111f6:	f107 0314 	add.w	r3, r7, #20
 80111fa:	4619      	mov	r1, r3
 80111fc:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80111fe:	f7fe fbcb 	bl	800f998 <WriteStr>
 8011202:	4b2c      	ldr	r3, [pc, #176]	; (80112b4 <Save_Svg+0x800>)
 8011204:	63fb      	str	r3, [r7, #60]	; 0x3c
 8011206:	f107 0314 	add.w	r3, r7, #20
 801120a:	4619      	mov	r1, r3
 801120c:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 801120e:	f7fe fbc3 	bl	800f998 <WriteStr>
 8011212:	f107 0314 	add.w	r3, r7, #20
 8011216:	4619      	mov	r1, r3
 8011218:	4827      	ldr	r0, [pc, #156]	; (80112b8 <Save_Svg+0x804>)
 801121a:	f7fe f8e5 	bl	800f3e8 <ProgFileSec>
 801121e:	4603      	mov	r3, r0
 8011220:	2b00      	cmp	r3, #0
 8011222:	d04b      	beq.n	80112bc <Save_Svg+0x808>
 8011224:	2303      	movs	r3, #3
 8011226:	e07b      	b.n	8011320 <Save_Svg+0x86c>
 8011228:	08000514 	.word	0x08000514
 801122c:	08000518 	.word	0x08000518
 8011230:	20000298 	.word	0x20000298
 8011234:	200001d0 	.word	0x200001d0
 8011238:	0800051c 	.word	0x0800051c
 801123c:	0800052c 	.word	0x0800052c
 8011240:	08000598 	.word	0x08000598
 8011244:	080005c4 	.word	0x080005c4
 8011248:	08000628 	.word	0x08000628
 801124c:	08000644 	.word	0x08000644
 8011250:	08000684 	.word	0x08000684
 8011254:	080006c0 	.word	0x080006c0
 8011258:	080006f4 	.word	0x080006f4
 801125c:	080006f8 	.word	0x080006f8
 8011260:	0800074c 	.word	0x0800074c
 8011264:	08000764 	.word	0x08000764
 8011268:	08000768 	.word	0x08000768
 801126c:	0800077c 	.word	0x0800077c
 8011270:	08000794 	.word	0x08000794
 8011274:	08002270 	.word	0x08002270
 8011278:	080007b0 	.word	0x080007b0
 801127c:	080007c0 	.word	0x080007c0
 8011280:	080007cc 	.word	0x080007cc
 8011284:	08000818 	.word	0x08000818
 8011288:	08000838 	.word	0x08000838
 801128c:	0800083c 	.word	0x0800083c
 8011290:	08000880 	.word	0x08000880
 8011294:	080008cc 	.word	0x080008cc
 8011298:	08001a88 	.word	0x08001a88
 801129c:	08001a4c 	.word	0x08001a4c
 80112a0:	08000914 	.word	0x08000914
 80112a4:	08000918 	.word	0x08000918
 80112a8:	08001ac4 	.word	0x08001ac4
 80112ac:	0800092c 	.word	0x0800092c
 80112b0:	08000930 	.word	0x08000930
 80112b4:	08000940 	.word	0x08000940
 80112b8:	200017d8 	.word	0x200017d8
 80112bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80112be:	1c5a      	adds	r2, r3, #1
 80112c0:	637a      	str	r2, [r7, #52]	; 0x34
 80112c2:	105b      	asrs	r3, r3, #1
 80112c4:	b2db      	uxtb	r3, r3
 80112c6:	f003 0303 	and.w	r3, r3, #3
 80112ca:	b2db      	uxtb	r3, r3
 80112cc:	461a      	mov	r2, r3
 80112ce:	2102      	movs	r1, #2
 80112d0:	f44f 7084 	mov.w	r0, #264	; 0x108
 80112d4:	f7fe fa42 	bl	800f75c <PrintClk>
 80112d8:	4b13      	ldr	r3, [pc, #76]	; (8011328 <Save_Svg+0x874>)
 80112da:	6819      	ldr	r1, [r3, #0]
 80112dc:	f107 0310 	add.w	r3, r7, #16
 80112e0:	f107 0214 	add.w	r2, r7, #20
 80112e4:	4811      	ldr	r0, [pc, #68]	; (801132c <Save_Svg+0x878>)
 80112e6:	f7fe f8f3 	bl	800f4d0 <CloseFile>
 80112ea:	4603      	mov	r3, r0
 80112ec:	2b00      	cmp	r3, #0
 80112ee:	d001      	beq.n	80112f4 <Save_Svg+0x840>
 80112f0:	2304      	movs	r3, #4
 80112f2:	e015      	b.n	8011320 <Save_Svg+0x86c>
 80112f4:	4b0e      	ldr	r3, [pc, #56]	; (8011330 <Save_Svg+0x87c>)
 80112f6:	f9b3 310c 	ldrsh.w	r3, [r3, #268]	; 0x10c
 80112fa:	2b62      	cmp	r3, #98	; 0x62
 80112fc:	dc09      	bgt.n	8011312 <Save_Svg+0x85e>
 80112fe:	4b0c      	ldr	r3, [pc, #48]	; (8011330 <Save_Svg+0x87c>)
 8011300:	f9b3 310c 	ldrsh.w	r3, [r3, #268]	; 0x10c
 8011304:	b29b      	uxth	r3, r3
 8011306:	3301      	adds	r3, #1
 8011308:	b29b      	uxth	r3, r3
 801130a:	b21a      	sxth	r2, r3
 801130c:	4b08      	ldr	r3, [pc, #32]	; (8011330 <Save_Svg+0x87c>)
 801130e:	f8a3 210c 	strh.w	r2, [r3, #268]	; 0x10c
 8011312:	f44f 729b 	mov.w	r2, #310	; 0x136
 8011316:	2100      	movs	r1, #0
 8011318:	4806      	ldr	r0, [pc, #24]	; (8011334 <Save_Svg+0x880>)
 801131a:	f011 fc3b 	bl	8022b94 <memset>
 801131e:	2300      	movs	r3, #0
 8011320:	4618      	mov	r0, r3
 8011322:	3748      	adds	r7, #72	; 0x48
 8011324:	46bd      	mov	sp, r7
 8011326:	bd80      	pop	{r7, pc}
 8011328:	20000794 	.word	0x20000794
 801132c:	200017d8 	.word	0x200017d8
 8011330:	20000298 	.word	0x20000298
 8011334:	20000008 	.word	0x20000008

08011338 <Read_CalFlag>:
unsigned long err;

FLASH_EraseInitTypeDef Flash_Erase ={0, 1, 1, 1, 2};

 void Read_CalFlag(void)
 {
 8011338:	b480      	push	{r7}
 801133a:	b083      	sub	sp, #12
 801133c:	af00      	add	r7, sp, #0
	  unsigned short* ptr;
	  ptr=(unsigned short*)Kpg_Address;
 801133e:	4b10      	ldr	r3, [pc, #64]	; (8011380 <Read_CalFlag+0x48>)
 8011340:	607b      	str	r3, [r7, #4]
	  if(*ptr++!=0xaa55)
 8011342:	687b      	ldr	r3, [r7, #4]
 8011344:	1c9a      	adds	r2, r3, #2
 8011346:	607a      	str	r2, [r7, #4]
 8011348:	881b      	ldrh	r3, [r3, #0]
 801134a:	f64a 2255 	movw	r2, #43605	; 0xaa55
 801134e:	4293      	cmp	r3, r2
 8011350:	d10e      	bne.n	8011370 <Read_CalFlag+0x38>
		  return;
	  if(*ptr++!=0x0400)
 8011352:	687b      	ldr	r3, [r7, #4]
 8011354:	1c9a      	adds	r2, r3, #2
 8011356:	607a      	str	r2, [r7, #4]
 8011358:	881b      	ldrh	r3, [r3, #0]
 801135a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801135e:	d109      	bne.n	8011374 <Read_CalFlag+0x3c>
		  return;
	  Cal_Flag = *ptr++;
 8011360:	687b      	ldr	r3, [r7, #4]
 8011362:	1c9a      	adds	r2, r3, #2
 8011364:	607a      	str	r2, [r7, #4]
 8011366:	881b      	ldrh	r3, [r3, #0]
 8011368:	b2da      	uxtb	r2, r3
 801136a:	4b06      	ldr	r3, [pc, #24]	; (8011384 <Read_CalFlag+0x4c>)
 801136c:	701a      	strb	r2, [r3, #0]
	  return;
 801136e:	e002      	b.n	8011376 <Read_CalFlag+0x3e>
		  return;
 8011370:	bf00      	nop
 8011372:	e000      	b.n	8011376 <Read_CalFlag+0x3e>
		  return;
 8011374:	bf00      	nop
 }
 8011376:	370c      	adds	r7, #12
 8011378:	46bd      	mov	sp, r7
 801137a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801137e:	4770      	bx	lr
 8011380:	08004000 	.word	0x08004000
 8011384:	200001b4 	.word	0x200001b4

08011388 <Save_Parameter>:

 /*******************************************************************************
  Save_Parameter:                          Return: 0= Success
 *******************************************************************************/
 char Save_Parameter(void)
 {
 8011388:	b580      	push	{r7, lr}
 801138a:	b082      	sub	sp, #8
 801138c:	af00      	add	r7, sp, #0
   short i, j;
   unsigned short* ptr;

   Flash_Erase.Sector = 2;
 801138e:	4b45      	ldr	r3, [pc, #276]	; (80114a4 <Save_Parameter+0x11c>)
 8011390:	2202      	movs	r2, #2
 8011392:	609a      	str	r2, [r3, #8]

   HAL_FLASH_Unlock();
 8011394:	f007 ff68 	bl	8019268 <HAL_FLASH_Unlock>
   j=HAL_FLASHEx_Erase( &Flash_Erase, &err);
 8011398:	4943      	ldr	r1, [pc, #268]	; (80114a8 <Save_Parameter+0x120>)
 801139a:	4842      	ldr	r0, [pc, #264]	; (80114a4 <Save_Parameter+0x11c>)
 801139c:	f008 f8d6 	bl	801954c <HAL_FLASHEx_Erase>
 80113a0:	4603      	mov	r3, r0
 80113a2:	80bb      	strh	r3, [r7, #4]
   if(j== HAL_OK)
 80113a4:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80113a8:	2b00      	cmp	r3, #0
 80113aa:	d173      	bne.n	8011494 <Save_Parameter+0x10c>
   {
     ptr=F_Buff;
 80113ac:	4b3f      	ldr	r3, [pc, #252]	; (80114ac <Save_Parameter+0x124>)
 80113ae:	603b      	str	r3, [r7, #0]
     *ptr++=0x0400;                              //Ver:4.00
 80113b0:	683b      	ldr	r3, [r7, #0]
 80113b2:	1c9a      	adds	r2, r3, #2
 80113b4:	603a      	str	r2, [r7, #0]
 80113b6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80113ba:	801a      	strh	r2, [r3, #0]
     *ptr++=Current;
 80113bc:	4b3c      	ldr	r3, [pc, #240]	; (80114b0 <Save_Parameter+0x128>)
 80113be:	f9b3 1000 	ldrsh.w	r1, [r3]
 80113c2:	683b      	ldr	r3, [r7, #0]
 80113c4:	1c9a      	adds	r2, r3, #2
 80113c6:	603a      	str	r2, [r7, #0]
 80113c8:	b28a      	uxth	r2, r1
 80113ca:	801a      	strh	r2, [r3, #0]
     *ptr++=Status;
 80113cc:	4b39      	ldr	r3, [pc, #228]	; (80114b4 <Save_Parameter+0x12c>)
 80113ce:	f9b3 1000 	ldrsh.w	r1, [r3]
 80113d2:	683b      	ldr	r3, [r7, #0]
 80113d4:	1c9a      	adds	r2, r3, #2
 80113d6:	603a      	str	r2, [r7, #0]
 80113d8:	b28a      	uxth	r2, r1
 80113da:	801a      	strh	r2, [r3, #0]
     for(i=0;i<42;i++)
 80113dc:	2300      	movs	r3, #0
 80113de:	80fb      	strh	r3, [r7, #6]
 80113e0:	e011      	b.n	8011406 <Save_Parameter+0x7e>
    	 *ptr++=List[i].Val;
 80113e2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80113e6:	4a34      	ldr	r2, [pc, #208]	; (80114b8 <Save_Parameter+0x130>)
 80113e8:	00db      	lsls	r3, r3, #3
 80113ea:	4413      	add	r3, r2
 80113ec:	f9b3 1004 	ldrsh.w	r1, [r3, #4]
 80113f0:	683b      	ldr	r3, [r7, #0]
 80113f2:	1c9a      	adds	r2, r3, #2
 80113f4:	603a      	str	r2, [r7, #0]
 80113f6:	b28a      	uxth	r2, r1
 80113f8:	801a      	strh	r2, [r3, #0]
     for(i=0;i<42;i++)
 80113fa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80113fe:	b29b      	uxth	r3, r3
 8011400:	3301      	adds	r3, #1
 8011402:	b29b      	uxth	r3, r3
 8011404:	80fb      	strh	r3, [r7, #6]
 8011406:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801140a:	2b29      	cmp	r3, #41	; 0x29
 801140c:	dde9      	ble.n	80113e2 <Save_Parameter+0x5a>
     for(i=0;i<8;i++)
 801140e:	2300      	movs	r3, #0
 8011410:	80fb      	strh	r3, [r7, #6]
 8011412:	e00f      	b.n	8011434 <Save_Parameter+0xac>
    	 *ptr++=MenuNow[i];
 8011414:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8011418:	4a28      	ldr	r2, [pc, #160]	; (80114bc <Save_Parameter+0x134>)
 801141a:	f932 1013 	ldrsh.w	r1, [r2, r3, lsl #1]
 801141e:	683b      	ldr	r3, [r7, #0]
 8011420:	1c9a      	adds	r2, r3, #2
 8011422:	603a      	str	r2, [r7, #0]
 8011424:	b28a      	uxth	r2, r1
 8011426:	801a      	strh	r2, [r3, #0]
     for(i=0;i<8;i++)
 8011428:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801142c:	b29b      	uxth	r3, r3
 801142e:	3301      	adds	r3, #1
 8011430:	b29b      	uxth	r3, r3
 8011432:	80fb      	strh	r3, [r7, #6]
 8011434:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8011438:	2b07      	cmp	r3, #7
 801143a:	ddeb      	ble.n	8011414 <Save_Parameter+0x8c>
     *ptr++=0xaa55;
 801143c:	683b      	ldr	r3, [r7, #0]
 801143e:	1c9a      	adds	r2, r3, #2
 8011440:	603a      	str	r2, [r7, #0]
 8011442:	f64a 2255 	movw	r2, #43605	; 0xaa55
 8011446:	801a      	strh	r2, [r3, #0]
     ptr=F_Buff;
 8011448:	4b18      	ldr	r3, [pc, #96]	; (80114ac <Save_Parameter+0x124>)
 801144a:	603b      	str	r3, [r7, #0]
     for(i=0; i<256; i+=2)
 801144c:	2300      	movs	r3, #0
 801144e:	80fb      	strh	r3, [r7, #6]
 8011450:	e01a      	b.n	8011488 <Save_Parameter+0x100>
     {                      //128 SHORT
       j= HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, Page_Address+i, *ptr++);
 8011452:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8011456:	f103 6300 	add.w	r3, r3, #134217728	; 0x8000000
 801145a:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 801145e:	4619      	mov	r1, r3
 8011460:	683b      	ldr	r3, [r7, #0]
 8011462:	1c9a      	adds	r2, r3, #2
 8011464:	603a      	str	r2, [r7, #0]
 8011466:	881b      	ldrh	r3, [r3, #0]
 8011468:	b29a      	uxth	r2, r3
 801146a:	f04f 0300 	mov.w	r3, #0
 801146e:	2001      	movs	r0, #1
 8011470:	f007 fea6 	bl	80191c0 <HAL_FLASH_Program>
 8011474:	4603      	mov	r3, r0
 8011476:	80bb      	strh	r3, [r7, #4]
       if(j!= HAL_OK)
 8011478:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 801147c:	2b00      	cmp	r3, #0
 801147e:	d108      	bne.n	8011492 <Save_Parameter+0x10a>
     for(i=0; i<256; i+=2)
 8011480:	88fb      	ldrh	r3, [r7, #6]
 8011482:	3302      	adds	r3, #2
 8011484:	b29b      	uxth	r3, r3
 8011486:	80fb      	strh	r3, [r7, #6]
 8011488:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801148c:	2bff      	cmp	r3, #255	; 0xff
 801148e:	dde0      	ble.n	8011452 <Save_Parameter+0xca>
 8011490:	e000      	b.n	8011494 <Save_Parameter+0x10c>
    	   break;
 8011492:	bf00      	nop
     }
   }
   HAL_FLASH_Lock();
 8011494:	f007 ff0a 	bl	80192ac <HAL_FLASH_Lock>

   return j;
 8011498:	88bb      	ldrh	r3, [r7, #4]
 801149a:	b2db      	uxtb	r3, r3
 }
 801149c:	4618      	mov	r0, r3
 801149e:	3708      	adds	r7, #8
 80114a0:	46bd      	mov	sp, r7
 80114a2:	bd80      	pop	{r7, pc}
 80114a4:	200001b8 	.word	0x200001b8
 80114a8:	20002818 	.word	0x20002818
 80114ac:	200017d8 	.word	0x200017d8
 80114b0:	2000079e 	.word	0x2000079e
 80114b4:	200007a0 	.word	0x200007a0
 80114b8:	20000298 	.word	0x20000298
 80114bc:	20000538 	.word	0x20000538

080114c0 <Read_Parameter>:
 /*******************************************************************************
 Read_Parameter:
 *******************************************************************************/
 void Read_Parameter(void)
 {
 80114c0:	b480      	push	{r7}
 80114c2:	b083      	sub	sp, #12
 80114c4:	af00      	add	r7, sp, #0
   short i;
   unsigned short* ptr;
   ptr=(unsigned short*)(Page_Address+55*2); //94*2-40
 80114c6:	4b3f      	ldr	r3, [pc, #252]	; (80115c4 <Read_Parameter+0x104>)
 80114c8:	603b      	str	r3, [r7, #0]
   TIM_BASE_Val=List[TIM_BASE].Val;
 80114ca:	4b3f      	ldr	r3, [pc, #252]	; (80115c8 <Read_Parameter+0x108>)
 80114cc:	f9b3 203c 	ldrsh.w	r2, [r3, #60]	; 0x3c
 80114d0:	4b3e      	ldr	r3, [pc, #248]	; (80115cc <Read_Parameter+0x10c>)
 80114d2:	801a      	strh	r2, [r3, #0]
   List[TIM_BASE].Val=0;
 80114d4:	4b3c      	ldr	r3, [pc, #240]	; (80115c8 <Read_Parameter+0x108>)
 80114d6:	2200      	movs	r2, #0
 80114d8:	879a      	strh	r2, [r3, #60]	; 0x3c
   if(*ptr!=0xaa55)
 80114da:	683b      	ldr	r3, [r7, #0]
 80114dc:	881b      	ldrh	r3, [r3, #0]
 80114de:	f64a 2255 	movw	r2, #43605	; 0xaa55
 80114e2:	4293      	cmp	r3, r2
 80114e4:	d166      	bne.n	80115b4 <Read_Parameter+0xf4>
	   return ;
   ptr=(unsigned short*)Page_Address;
 80114e6:	4b3a      	ldr	r3, [pc, #232]	; (80115d0 <Read_Parameter+0x110>)
 80114e8:	603b      	str	r3, [r7, #0]
   if(*ptr++!=0x0400)
 80114ea:	683b      	ldr	r3, [r7, #0]
 80114ec:	1c9a      	adds	r2, r3, #2
 80114ee:	603a      	str	r2, [r7, #0]
 80114f0:	881b      	ldrh	r3, [r3, #0]
 80114f2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80114f6:	d15f      	bne.n	80115b8 <Read_Parameter+0xf8>
	   return ;
   Current=*ptr++;
 80114f8:	683b      	ldr	r3, [r7, #0]
 80114fa:	1c9a      	adds	r2, r3, #2
 80114fc:	603a      	str	r2, [r7, #0]
 80114fe:	881b      	ldrh	r3, [r3, #0]
 8011500:	b21a      	sxth	r2, r3
 8011502:	4b34      	ldr	r3, [pc, #208]	; (80115d4 <Read_Parameter+0x114>)
 8011504:	801a      	strh	r2, [r3, #0]
   List[MenuNow[Current]].Flg |= UPD;
 8011506:	4b33      	ldr	r3, [pc, #204]	; (80115d4 <Read_Parameter+0x114>)
 8011508:	f9b3 3000 	ldrsh.w	r3, [r3]
 801150c:	461a      	mov	r2, r3
 801150e:	4b32      	ldr	r3, [pc, #200]	; (80115d8 <Read_Parameter+0x118>)
 8011510:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8011514:	4a2c      	ldr	r2, [pc, #176]	; (80115c8 <Read_Parameter+0x108>)
 8011516:	00db      	lsls	r3, r3, #3
 8011518:	4413      	add	r3, r2
 801151a:	799b      	ldrb	r3, [r3, #6]
 801151c:	4a2d      	ldr	r2, [pc, #180]	; (80115d4 <Read_Parameter+0x114>)
 801151e:	f9b2 2000 	ldrsh.w	r2, [r2]
 8011522:	4611      	mov	r1, r2
 8011524:	4a2c      	ldr	r2, [pc, #176]	; (80115d8 <Read_Parameter+0x118>)
 8011526:	f932 2011 	ldrsh.w	r2, [r2, r1, lsl #1]
 801152a:	4610      	mov	r0, r2
 801152c:	f043 0320 	orr.w	r3, r3, #32
 8011530:	b2d9      	uxtb	r1, r3
 8011532:	4a25      	ldr	r2, [pc, #148]	; (80115c8 <Read_Parameter+0x108>)
 8011534:	00c3      	lsls	r3, r0, #3
 8011536:	4413      	add	r3, r2
 8011538:	460a      	mov	r2, r1
 801153a:	719a      	strb	r2, [r3, #6]
   ptr++;
 801153c:	683b      	ldr	r3, [r7, #0]
 801153e:	3302      	adds	r3, #2
 8011540:	603b      	str	r3, [r7, #0]
   for(i=0;i<42;i++)
 8011542:	2300      	movs	r3, #0
 8011544:	80fb      	strh	r3, [r7, #6]
 8011546:	e011      	b.n	801156c <Read_Parameter+0xac>
	   List[i].Val=*ptr++;
 8011548:	683b      	ldr	r3, [r7, #0]
 801154a:	1c9a      	adds	r2, r3, #2
 801154c:	603a      	str	r2, [r7, #0]
 801154e:	881a      	ldrh	r2, [r3, #0]
 8011550:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8011554:	b211      	sxth	r1, r2
 8011556:	4a1c      	ldr	r2, [pc, #112]	; (80115c8 <Read_Parameter+0x108>)
 8011558:	00db      	lsls	r3, r3, #3
 801155a:	4413      	add	r3, r2
 801155c:	460a      	mov	r2, r1
 801155e:	809a      	strh	r2, [r3, #4]
   for(i=0;i<42;i++)
 8011560:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8011564:	b29b      	uxth	r3, r3
 8011566:	3301      	adds	r3, #1
 8011568:	b29b      	uxth	r3, r3
 801156a:	80fb      	strh	r3, [r7, #6]
 801156c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8011570:	2b29      	cmp	r3, #41	; 0x29
 8011572:	dde9      	ble.n	8011548 <Read_Parameter+0x88>
   for(i=0;i<8;i++)
 8011574:	2300      	movs	r3, #0
 8011576:	80fb      	strh	r3, [r7, #6]
 8011578:	e00f      	b.n	801159a <Read_Parameter+0xda>
	   MenuNow[i]=*ptr++;
 801157a:	683b      	ldr	r3, [r7, #0]
 801157c:	1c9a      	adds	r2, r3, #2
 801157e:	603a      	str	r2, [r7, #0]
 8011580:	881a      	ldrh	r2, [r3, #0]
 8011582:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8011586:	b211      	sxth	r1, r2
 8011588:	4a13      	ldr	r2, [pc, #76]	; (80115d8 <Read_Parameter+0x118>)
 801158a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
   for(i=0;i<8;i++)
 801158e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8011592:	b29b      	uxth	r3, r3
 8011594:	3301      	adds	r3, #1
 8011596:	b29b      	uxth	r3, r3
 8011598:	80fb      	strh	r3, [r7, #6]
 801159a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801159e:	2b07      	cmp	r3, #7
 80115a0:	ddeb      	ble.n	801157a <Read_Parameter+0xba>
   TIM_BASE_Val=List[TIM_BASE].Val;
 80115a2:	4b09      	ldr	r3, [pc, #36]	; (80115c8 <Read_Parameter+0x108>)
 80115a4:	f9b3 203c 	ldrsh.w	r2, [r3, #60]	; 0x3c
 80115a8:	4b08      	ldr	r3, [pc, #32]	; (80115cc <Read_Parameter+0x10c>)
 80115aa:	801a      	strh	r2, [r3, #0]
   List[TIM_BASE].Val=0;
 80115ac:	4b06      	ldr	r3, [pc, #24]	; (80115c8 <Read_Parameter+0x108>)
 80115ae:	2200      	movs	r2, #0
 80115b0:	879a      	strh	r2, [r3, #60]	; 0x3c

   return ;
 80115b2:	e002      	b.n	80115ba <Read_Parameter+0xfa>
	   return ;
 80115b4:	bf00      	nop
 80115b6:	e000      	b.n	80115ba <Read_Parameter+0xfa>
	   return ;
 80115b8:	bf00      	nop
 }
 80115ba:	370c      	adds	r7, #12
 80115bc:	46bd      	mov	sp, r7
 80115be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80115c2:	4770      	bx	lr
 80115c4:	0800806e 	.word	0x0800806e
 80115c8:	20000298 	.word	0x20000298
 80115cc:	20002814 	.word	0x20002814
 80115d0:	08008000 	.word	0x08008000
 80115d4:	2000079e 	.word	0x2000079e
 80115d8:	20000538 	.word	0x20000538

080115dc <Save_Kpg>:
 /*******************************************************************************
  Save_Kpg:                       Return: 0= Success
 *******************************************************************************/
 char Save_Kpg(void)
 {
 80115dc:	b580      	push	{r7, lr}
 80115de:	b082      	sub	sp, #8
 80115e0:	af00      	add	r7, sp, #0
   short i, j;
   unsigned short* ptr;

   Flash_Erase.Sector = 1;
 80115e2:	4b34      	ldr	r3, [pc, #208]	; (80116b4 <Save_Kpg+0xd8>)
 80115e4:	2201      	movs	r2, #1
 80115e6:	609a      	str	r2, [r3, #8]

   HAL_FLASH_Unlock();
 80115e8:	f007 fe3e 	bl	8019268 <HAL_FLASH_Unlock>
   j=HAL_FLASHEx_Erase( &Flash_Erase, &err);
 80115ec:	4932      	ldr	r1, [pc, #200]	; (80116b8 <Save_Kpg+0xdc>)
 80115ee:	4831      	ldr	r0, [pc, #196]	; (80116b4 <Save_Kpg+0xd8>)
 80115f0:	f007 ffac 	bl	801954c <HAL_FLASHEx_Erase>
 80115f4:	4603      	mov	r3, r0
 80115f6:	80bb      	strh	r3, [r7, #4]
   if(j== HAL_OK)
 80115f8:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80115fc:	2b00      	cmp	r3, #0
 80115fe:	d151      	bne.n	80116a4 <Save_Kpg+0xc8>
   {
     ptr=F_Buff;
 8011600:	4b2e      	ldr	r3, [pc, #184]	; (80116bc <Save_Kpg+0xe0>)
 8011602:	603b      	str	r3, [r7, #0]
     *ptr++=0xaa55;
 8011604:	683b      	ldr	r3, [r7, #0]
 8011606:	1c9a      	adds	r2, r3, #2
 8011608:	603a      	str	r2, [r7, #0]
 801160a:	f64a 2255 	movw	r2, #43605	; 0xaa55
 801160e:	801a      	strh	r2, [r3, #0]
     *ptr++=0x0400;                              //Ver:3.00
 8011610:	683b      	ldr	r3, [r7, #0]
 8011612:	1c9a      	adds	r2, r3, #2
 8011614:	603a      	str	r2, [r7, #0]
 8011616:	f44f 6280 	mov.w	r2, #1024	; 0x400
 801161a:	801a      	strh	r2, [r3, #0]
     *ptr++=Cal_Flag;
 801161c:	4b28      	ldr	r3, [pc, #160]	; (80116c0 <Save_Kpg+0xe4>)
 801161e:	7819      	ldrb	r1, [r3, #0]
 8011620:	683b      	ldr	r3, [r7, #0]
 8011622:	1c9a      	adds	r2, r3, #2
 8011624:	603a      	str	r2, [r7, #0]
 8011626:	b28a      	uxth	r2, r1
 8011628:	801a      	strh	r2, [r3, #0]
     for(i=0;i<3;i++)
 801162a:	2300      	movs	r3, #0
 801162c:	80fb      	strh	r3, [r7, #6]
 801162e:	e00f      	b.n	8011650 <Save_Kpg+0x74>
    	 *ptr++=Kpg[i];
 8011630:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8011634:	4a23      	ldr	r2, [pc, #140]	; (80116c4 <Save_Kpg+0xe8>)
 8011636:	f932 1013 	ldrsh.w	r1, [r2, r3, lsl #1]
 801163a:	683b      	ldr	r3, [r7, #0]
 801163c:	1c9a      	adds	r2, r3, #2
 801163e:	603a      	str	r2, [r7, #0]
 8011640:	b28a      	uxth	r2, r1
 8011642:	801a      	strh	r2, [r3, #0]
     for(i=0;i<3;i++)
 8011644:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8011648:	b29b      	uxth	r3, r3
 801164a:	3301      	adds	r3, #1
 801164c:	b29b      	uxth	r3, r3
 801164e:	80fb      	strh	r3, [r7, #6]
 8011650:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8011654:	2b02      	cmp	r3, #2
 8011656:	ddeb      	ble.n	8011630 <Save_Kpg+0x54>
     ptr=F_Buff;
 8011658:	4b18      	ldr	r3, [pc, #96]	; (80116bc <Save_Kpg+0xe0>)
 801165a:	603b      	str	r3, [r7, #0]
     for(i=0; i<256; i+=2)
 801165c:	2300      	movs	r3, #0
 801165e:	80fb      	strh	r3, [r7, #6]
 8011660:	e01a      	b.n	8011698 <Save_Kpg+0xbc>
     {                      //128 SHORT
       j= HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, Kpg_Address+i, *ptr++);
 8011662:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8011666:	f103 6300 	add.w	r3, r3, #134217728	; 0x8000000
 801166a:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 801166e:	4619      	mov	r1, r3
 8011670:	683b      	ldr	r3, [r7, #0]
 8011672:	1c9a      	adds	r2, r3, #2
 8011674:	603a      	str	r2, [r7, #0]
 8011676:	881b      	ldrh	r3, [r3, #0]
 8011678:	b29a      	uxth	r2, r3
 801167a:	f04f 0300 	mov.w	r3, #0
 801167e:	2001      	movs	r0, #1
 8011680:	f007 fd9e 	bl	80191c0 <HAL_FLASH_Program>
 8011684:	4603      	mov	r3, r0
 8011686:	80bb      	strh	r3, [r7, #4]
       if(j!= HAL_OK)
 8011688:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 801168c:	2b00      	cmp	r3, #0
 801168e:	d108      	bne.n	80116a2 <Save_Kpg+0xc6>
     for(i=0; i<256; i+=2)
 8011690:	88fb      	ldrh	r3, [r7, #6]
 8011692:	3302      	adds	r3, #2
 8011694:	b29b      	uxth	r3, r3
 8011696:	80fb      	strh	r3, [r7, #6]
 8011698:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801169c:	2bff      	cmp	r3, #255	; 0xff
 801169e:	dde0      	ble.n	8011662 <Save_Kpg+0x86>
 80116a0:	e000      	b.n	80116a4 <Save_Kpg+0xc8>
    	   break;
 80116a2:	bf00      	nop
     }
   }
   HAL_FLASH_Lock();
 80116a4:	f007 fe02 	bl	80192ac <HAL_FLASH_Lock>
   return j;
 80116a8:	88bb      	ldrh	r3, [r7, #4]
 80116aa:	b2db      	uxtb	r3, r3
 }
 80116ac:	4618      	mov	r0, r3
 80116ae:	3708      	adds	r7, #8
 80116b0:	46bd      	mov	sp, r7
 80116b2:	bd80      	pop	{r7, pc}
 80116b4:	200001b8 	.word	0x200001b8
 80116b8:	20002818 	.word	0x20002818
 80116bc:	200017d8 	.word	0x200017d8
 80116c0:	200001b4 	.word	0x200001b4
 80116c4:	2000056c 	.word	0x2000056c

080116c8 <Read_Kpg>:
 /*******************************************************************************
 Read_Kpg:
 *******************************************************************************/
 void Read_Kpg(void)
 {
 80116c8:	b480      	push	{r7}
 80116ca:	b083      	sub	sp, #12
 80116cc:	af00      	add	r7, sp, #0
   short i;
   unsigned short* ptr;
   ptr=(unsigned short*)Kpg_Address;
 80116ce:	4b1c      	ldr	r3, [pc, #112]	; (8011740 <Read_Kpg+0x78>)
 80116d0:	603b      	str	r3, [r7, #0]
   if(*ptr++!=0xaa55)
 80116d2:	683b      	ldr	r3, [r7, #0]
 80116d4:	1c9a      	adds	r2, r3, #2
 80116d6:	603a      	str	r2, [r7, #0]
 80116d8:	881b      	ldrh	r3, [r3, #0]
 80116da:	f64a 2255 	movw	r2, #43605	; 0xaa55
 80116de:	4293      	cmp	r3, r2
 80116e0:	d125      	bne.n	801172e <Read_Kpg+0x66>
	   return ;
   if(*ptr++!=0x0400)
 80116e2:	683b      	ldr	r3, [r7, #0]
 80116e4:	1c9a      	adds	r2, r3, #2
 80116e6:	603a      	str	r2, [r7, #0]
 80116e8:	881b      	ldrh	r3, [r3, #0]
 80116ea:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80116ee:	d120      	bne.n	8011732 <Read_Kpg+0x6a>
	   return ;
   Cal_Flag = *ptr++;
 80116f0:	683b      	ldr	r3, [r7, #0]
 80116f2:	1c9a      	adds	r2, r3, #2
 80116f4:	603a      	str	r2, [r7, #0]
 80116f6:	881b      	ldrh	r3, [r3, #0]
 80116f8:	b2da      	uxtb	r2, r3
 80116fa:	4b12      	ldr	r3, [pc, #72]	; (8011744 <Read_Kpg+0x7c>)
 80116fc:	701a      	strb	r2, [r3, #0]
   for(i=0;i< 3;i++)
 80116fe:	2300      	movs	r3, #0
 8011700:	80fb      	strh	r3, [r7, #6]
 8011702:	e00f      	b.n	8011724 <Read_Kpg+0x5c>
       Kpg[i] = *ptr++;  //CH_A,CH_B
 8011704:	683b      	ldr	r3, [r7, #0]
 8011706:	1c9a      	adds	r2, r3, #2
 8011708:	603a      	str	r2, [r7, #0]
 801170a:	881a      	ldrh	r2, [r3, #0]
 801170c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8011710:	b211      	sxth	r1, r2
 8011712:	4a0d      	ldr	r2, [pc, #52]	; (8011748 <Read_Kpg+0x80>)
 8011714:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
   for(i=0;i< 3;i++)
 8011718:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801171c:	b29b      	uxth	r3, r3
 801171e:	3301      	adds	r3, #1
 8011720:	b29b      	uxth	r3, r3
 8011722:	80fb      	strh	r3, [r7, #6]
 8011724:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8011728:	2b02      	cmp	r3, #2
 801172a:	ddeb      	ble.n	8011704 <Read_Kpg+0x3c>
   return ;
 801172c:	e002      	b.n	8011734 <Read_Kpg+0x6c>
	   return ;
 801172e:	bf00      	nop
 8011730:	e000      	b.n	8011734 <Read_Kpg+0x6c>
	   return ;
 8011732:	bf00      	nop
 }
 8011734:	370c      	adds	r7, #12
 8011736:	46bd      	mov	sp, r7
 8011738:	f85d 7b04 	ldr.w	r7, [sp], #4
 801173c:	4770      	bx	lr
 801173e:	bf00      	nop
 8011740:	08004000 	.word	0x08004000
 8011744:	200001b4 	.word	0x200001b4
 8011748:	2000056c 	.word	0x2000056c

0801174c <Restore>:

 void Restore(void)
 {
 801174c:	b580      	push	{r7, lr}
 801174e:	b082      	sub	sp, #8
 8011750:	af00      	add	r7, sp, #0
   short i;
   TIM_BASE_Val=List[TIM_BASE].Val;
 8011752:	4b2d      	ldr	r3, [pc, #180]	; (8011808 <Restore+0xbc>)
 8011754:	f9b3 203c 	ldrsh.w	r2, [r3, #60]	; 0x3c
 8011758:	4b2c      	ldr	r3, [pc, #176]	; (801180c <Restore+0xc0>)
 801175a:	801a      	strh	r2, [r3, #0]
   Current=0;
 801175c:	4b2c      	ldr	r3, [pc, #176]	; (8011810 <Restore+0xc4>)
 801175e:	2200      	movs	r2, #0
 8011760:	801a      	strh	r2, [r3, #0]
   List[MenuNow[Current]].Flg |= UPD;
 8011762:	4b2b      	ldr	r3, [pc, #172]	; (8011810 <Restore+0xc4>)
 8011764:	f9b3 3000 	ldrsh.w	r3, [r3]
 8011768:	461a      	mov	r2, r3
 801176a:	4b2a      	ldr	r3, [pc, #168]	; (8011814 <Restore+0xc8>)
 801176c:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8011770:	4a25      	ldr	r2, [pc, #148]	; (8011808 <Restore+0xbc>)
 8011772:	00db      	lsls	r3, r3, #3
 8011774:	4413      	add	r3, r2
 8011776:	799b      	ldrb	r3, [r3, #6]
 8011778:	4a25      	ldr	r2, [pc, #148]	; (8011810 <Restore+0xc4>)
 801177a:	f9b2 2000 	ldrsh.w	r2, [r2]
 801177e:	4611      	mov	r1, r2
 8011780:	4a24      	ldr	r2, [pc, #144]	; (8011814 <Restore+0xc8>)
 8011782:	f932 2011 	ldrsh.w	r2, [r2, r1, lsl #1]
 8011786:	4610      	mov	r0, r2
 8011788:	f043 0320 	orr.w	r3, r3, #32
 801178c:	b2d9      	uxtb	r1, r3
 801178e:	4a1e      	ldr	r2, [pc, #120]	; (8011808 <Restore+0xbc>)
 8011790:	00c3      	lsls	r3, r0, #3
 8011792:	4413      	add	r3, r2
 8011794:	460a      	mov	r2, r1
 8011796:	719a      	strb	r2, [r3, #6]
   for(i=0;i<42;i++)
 8011798:	2300      	movs	r3, #0
 801179a:	80fb      	strh	r3, [r7, #6]
 801179c:	e013      	b.n	80117c6 <Restore+0x7a>
	   List[i].Val= List_c[i].Val;
 801179e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80117a2:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80117a6:	491c      	ldr	r1, [pc, #112]	; (8011818 <Restore+0xcc>)
 80117a8:	00db      	lsls	r3, r3, #3
 80117aa:	440b      	add	r3, r1
 80117ac:	f9b3 0004 	ldrsh.w	r0, [r3, #4]
 80117b0:	4915      	ldr	r1, [pc, #84]	; (8011808 <Restore+0xbc>)
 80117b2:	00d3      	lsls	r3, r2, #3
 80117b4:	440b      	add	r3, r1
 80117b6:	4602      	mov	r2, r0
 80117b8:	809a      	strh	r2, [r3, #4]
   for(i=0;i<42;i++)
 80117ba:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80117be:	b29b      	uxth	r3, r3
 80117c0:	3301      	adds	r3, #1
 80117c2:	b29b      	uxth	r3, r3
 80117c4:	80fb      	strh	r3, [r7, #6]
 80117c6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80117ca:	2b29      	cmp	r3, #41	; 0x29
 80117cc:	dde7      	ble.n	801179e <Restore+0x52>
   for(i=0;i<8;i++)
 80117ce:	2300      	movs	r3, #0
 80117d0:	80fb      	strh	r3, [r7, #6]
 80117d2:	e00f      	b.n	80117f4 <Restore+0xa8>
	   MenuNow[i]= MenuNow_C[i];
 80117d4:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80117d8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80117dc:	490f      	ldr	r1, [pc, #60]	; (801181c <Restore+0xd0>)
 80117de:	f931 1012 	ldrsh.w	r1, [r1, r2, lsl #1]
 80117e2:	4a0c      	ldr	r2, [pc, #48]	; (8011814 <Restore+0xc8>)
 80117e4:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
   for(i=0;i<8;i++)
 80117e8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80117ec:	b29b      	uxth	r3, r3
 80117ee:	3301      	adds	r3, #1
 80117f0:	b29b      	uxth	r3, r3
 80117f2:	80fb      	strh	r3, [r7, #6]
 80117f4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80117f8:	2b07      	cmp	r3, #7
 80117fa:	ddeb      	ble.n	80117d4 <Restore+0x88>
   Update_Title();
 80117fc:	f000 fdec 	bl	80123d8 <Update_Title>
}
 8011800:	bf00      	nop
 8011802:	3708      	adds	r7, #8
 8011804:	46bd      	mov	sp, r7
 8011806:	bd80      	pop	{r7, pc}
 8011808:	20000298 	.word	0x20000298
 801180c:	20002814 	.word	0x20002814
 8011810:	2000079e 	.word	0x2000079e
 8011814:	20000538 	.word	0x20000538
 8011818:	200003e8 	.word	0x200003e8
 801181c:	08001ef8 	.word	0x08001ef8

08011820 <Restore_CalPar>:

 void Restore_CalPar(void)
 {
 8011820:	b580      	push	{r7, lr}
 8011822:	b082      	sub	sp, #8
 8011824:	af00      	add	r7, sp, #0
   short i = 0;
 8011826:	2300      	movs	r3, #0
 8011828:	80fb      	strh	r3, [r7, #6]
   List[SMPL_DPTH].Flg |= UPD;
 801182a:	4b47      	ldr	r3, [pc, #284]	; (8011948 <Restore_CalPar+0x128>)
 801182c:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 8011830:	f043 0320 	orr.w	r3, r3, #32
 8011834:	b2da      	uxtb	r2, r3
 8011836:	4b44      	ldr	r3, [pc, #272]	; (8011948 <Restore_CalPar+0x128>)
 8011838:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
   TIM_BASE_Val=List[TIM_BASE].Val;
 801183c:	4b42      	ldr	r3, [pc, #264]	; (8011948 <Restore_CalPar+0x128>)
 801183e:	f9b3 203c 	ldrsh.w	r2, [r3, #60]	; 0x3c
 8011842:	4b42      	ldr	r3, [pc, #264]	; (801194c <Restore_CalPar+0x12c>)
 8011844:	801a      	strh	r2, [r3, #0]
   List[TIM_BASE].Val=0;
 8011846:	4b40      	ldr	r3, [pc, #256]	; (8011948 <Restore_CalPar+0x128>)
 8011848:	2200      	movs	r2, #0
 801184a:	879a      	strh	r2, [r3, #60]	; 0x3c
   Current=0;
 801184c:	4b40      	ldr	r3, [pc, #256]	; (8011950 <Restore_CalPar+0x130>)
 801184e:	2200      	movs	r2, #0
 8011850:	801a      	strh	r2, [r3, #0]
   List[MenuNow[Current]].Flg |= UPD;
 8011852:	4b3f      	ldr	r3, [pc, #252]	; (8011950 <Restore_CalPar+0x130>)
 8011854:	f9b3 3000 	ldrsh.w	r3, [r3]
 8011858:	461a      	mov	r2, r3
 801185a:	4b3e      	ldr	r3, [pc, #248]	; (8011954 <Restore_CalPar+0x134>)
 801185c:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8011860:	4a39      	ldr	r2, [pc, #228]	; (8011948 <Restore_CalPar+0x128>)
 8011862:	00db      	lsls	r3, r3, #3
 8011864:	4413      	add	r3, r2
 8011866:	799b      	ldrb	r3, [r3, #6]
 8011868:	4a39      	ldr	r2, [pc, #228]	; (8011950 <Restore_CalPar+0x130>)
 801186a:	f9b2 2000 	ldrsh.w	r2, [r2]
 801186e:	4611      	mov	r1, r2
 8011870:	4a38      	ldr	r2, [pc, #224]	; (8011954 <Restore_CalPar+0x134>)
 8011872:	f932 2011 	ldrsh.w	r2, [r2, r1, lsl #1]
 8011876:	4610      	mov	r0, r2
 8011878:	f043 0320 	orr.w	r3, r3, #32
 801187c:	b2d9      	uxtb	r1, r3
 801187e:	4a32      	ldr	r2, [pc, #200]	; (8011948 <Restore_CalPar+0x128>)
 8011880:	00c3      	lsls	r3, r0, #3
 8011882:	4413      	add	r3, r2
 8011884:	460a      	mov	r2, r1
 8011886:	719a      	strb	r2, [r3, #6]
   for(i=0;i<42;i++) List[i].Val= List_c[i].Val;
 8011888:	2300      	movs	r3, #0
 801188a:	80fb      	strh	r3, [r7, #6]
 801188c:	e013      	b.n	80118b6 <Restore_CalPar+0x96>
 801188e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8011892:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8011896:	4930      	ldr	r1, [pc, #192]	; (8011958 <Restore_CalPar+0x138>)
 8011898:	00db      	lsls	r3, r3, #3
 801189a:	440b      	add	r3, r1
 801189c:	f9b3 0004 	ldrsh.w	r0, [r3, #4]
 80118a0:	4929      	ldr	r1, [pc, #164]	; (8011948 <Restore_CalPar+0x128>)
 80118a2:	00d3      	lsls	r3, r2, #3
 80118a4:	440b      	add	r3, r1
 80118a6:	4602      	mov	r2, r0
 80118a8:	809a      	strh	r2, [r3, #4]
 80118aa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80118ae:	b29b      	uxth	r3, r3
 80118b0:	3301      	adds	r3, #1
 80118b2:	b29b      	uxth	r3, r3
 80118b4:	80fb      	strh	r3, [r7, #6]
 80118b6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80118ba:	2b29      	cmp	r3, #41	; 0x29
 80118bc:	dde7      	ble.n	801188e <Restore_CalPar+0x6e>
   for(i=0;i<8;i++)  MenuNow[i]= MenuNow_C[i];
 80118be:	2300      	movs	r3, #0
 80118c0:	80fb      	strh	r3, [r7, #6]
 80118c2:	e00f      	b.n	80118e4 <Restore_CalPar+0xc4>
 80118c4:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80118c8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80118cc:	4923      	ldr	r1, [pc, #140]	; (801195c <Restore_CalPar+0x13c>)
 80118ce:	f931 1012 	ldrsh.w	r1, [r1, r2, lsl #1]
 80118d2:	4a20      	ldr	r2, [pc, #128]	; (8011954 <Restore_CalPar+0x134>)
 80118d4:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 80118d8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80118dc:	b29b      	uxth	r3, r3
 80118de:	3301      	adds	r3, #1
 80118e0:	b29b      	uxth	r3, r3
 80118e2:	80fb      	strh	r3, [r7, #6]
 80118e4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80118e8:	2b07      	cmp	r3, #7
 80118ea:	ddeb      	ble.n	80118c4 <Restore_CalPar+0xa4>
   TIM_BASE_Val=List[TIM_BASE].Val;
 80118ec:	4b16      	ldr	r3, [pc, #88]	; (8011948 <Restore_CalPar+0x128>)
 80118ee:	f9b3 203c 	ldrsh.w	r2, [r3, #60]	; 0x3c
 80118f2:	4b16      	ldr	r3, [pc, #88]	; (801194c <Restore_CalPar+0x12c>)
 80118f4:	801a      	strh	r2, [r3, #0]
   List[TIM_BASE].Val=0;
 80118f6:	4b14      	ldr	r3, [pc, #80]	; (8011948 <Restore_CalPar+0x128>)
 80118f8:	2200      	movs	r2, #0
 80118fa:	879a      	strh	r2, [r3, #60]	; 0x3c
   for(i=Y_RANGES; i<=STANDBY; i++){
 80118fc:	2300      	movs	r3, #0
 80118fe:	80fb      	strh	r3, [r7, #6]
 8011900:	e015      	b.n	801192e <Restore_CalPar+0x10e>
   List[i].Flg |= UPD;
 8011902:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8011906:	4a10      	ldr	r2, [pc, #64]	; (8011948 <Restore_CalPar+0x128>)
 8011908:	00db      	lsls	r3, r3, #3
 801190a:	4413      	add	r3, r2
 801190c:	799a      	ldrb	r2, [r3, #6]
 801190e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8011912:	f042 0220 	orr.w	r2, r2, #32
 8011916:	b2d1      	uxtb	r1, r2
 8011918:	4a0b      	ldr	r2, [pc, #44]	; (8011948 <Restore_CalPar+0x128>)
 801191a:	00db      	lsls	r3, r3, #3
 801191c:	4413      	add	r3, r2
 801191e:	460a      	mov	r2, r1
 8011920:	719a      	strb	r2, [r3, #6]
   for(i=Y_RANGES; i<=STANDBY; i++){
 8011922:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8011926:	b29b      	uxth	r3, r3
 8011928:	3301      	adds	r3, #1
 801192a:	b29b      	uxth	r3, r3
 801192c:	80fb      	strh	r3, [r7, #6]
 801192e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8011932:	2b29      	cmp	r3, #41	; 0x29
 8011934:	dde5      	ble.n	8011902 <Restore_CalPar+0xe2>
   }
   Update_Title();
 8011936:	f000 fd4f 	bl	80123d8 <Update_Title>
   Close_Pop();
 801193a:	f7fc ff0d 	bl	800e758 <Close_Pop>
 }
 801193e:	bf00      	nop
 8011940:	3708      	adds	r7, #8
 8011942:	46bd      	mov	sp, r7
 8011944:	bd80      	pop	{r7, pc}
 8011946:	bf00      	nop
 8011948:	20000298 	.word	0x20000298
 801194c:	20002814 	.word	0x20002814
 8011950:	2000079e 	.word	0x2000079e
 8011954:	20000538 	.word	0x20000538
 8011958:	200003e8 	.word	0x200003e8
 801195c:	08001ef8 	.word	0x08001ef8

08011960 <u8ToDec3>:
 8011960:	b480      	push	{r7}
 8011962:	b083      	sub	sp, #12
 8011964:	af00      	add	r7, sp, #0
 8011966:	6078      	str	r0, [r7, #4]
 8011968:	460b      	mov	r3, r1
 801196a:	70fb      	strb	r3, [r7, #3]
 801196c:	78fb      	ldrb	r3, [r7, #3]
 801196e:	4a1e      	ldr	r2, [pc, #120]	; (80119e8 <u8ToDec3+0x88>)
 8011970:	fba2 2303 	umull	r2, r3, r2, r3
 8011974:	095b      	lsrs	r3, r3, #5
 8011976:	b2da      	uxtb	r2, r3
 8011978:	687b      	ldr	r3, [r7, #4]
 801197a:	1c59      	adds	r1, r3, #1
 801197c:	6079      	str	r1, [r7, #4]
 801197e:	3230      	adds	r2, #48	; 0x30
 8011980:	b2d2      	uxtb	r2, r2
 8011982:	701a      	strb	r2, [r3, #0]
 8011984:	78fb      	ldrb	r3, [r7, #3]
 8011986:	4a18      	ldr	r2, [pc, #96]	; (80119e8 <u8ToDec3+0x88>)
 8011988:	fba2 1203 	umull	r1, r2, r2, r3
 801198c:	0952      	lsrs	r2, r2, #5
 801198e:	2164      	movs	r1, #100	; 0x64
 8011990:	fb01 f202 	mul.w	r2, r1, r2
 8011994:	1a9b      	subs	r3, r3, r2
 8011996:	70fb      	strb	r3, [r7, #3]
 8011998:	78fb      	ldrb	r3, [r7, #3]
 801199a:	4a14      	ldr	r2, [pc, #80]	; (80119ec <u8ToDec3+0x8c>)
 801199c:	fba2 2303 	umull	r2, r3, r2, r3
 80119a0:	08db      	lsrs	r3, r3, #3
 80119a2:	b2da      	uxtb	r2, r3
 80119a4:	687b      	ldr	r3, [r7, #4]
 80119a6:	1c59      	adds	r1, r3, #1
 80119a8:	6079      	str	r1, [r7, #4]
 80119aa:	3230      	adds	r2, #48	; 0x30
 80119ac:	b2d2      	uxtb	r2, r2
 80119ae:	701a      	strb	r2, [r3, #0]
 80119b0:	78fa      	ldrb	r2, [r7, #3]
 80119b2:	4b0e      	ldr	r3, [pc, #56]	; (80119ec <u8ToDec3+0x8c>)
 80119b4:	fba3 1302 	umull	r1, r3, r3, r2
 80119b8:	08d9      	lsrs	r1, r3, #3
 80119ba:	460b      	mov	r3, r1
 80119bc:	009b      	lsls	r3, r3, #2
 80119be:	440b      	add	r3, r1
 80119c0:	005b      	lsls	r3, r3, #1
 80119c2:	1ad3      	subs	r3, r2, r3
 80119c4:	70fb      	strb	r3, [r7, #3]
 80119c6:	687b      	ldr	r3, [r7, #4]
 80119c8:	1c5a      	adds	r2, r3, #1
 80119ca:	607a      	str	r2, [r7, #4]
 80119cc:	78fa      	ldrb	r2, [r7, #3]
 80119ce:	3230      	adds	r2, #48	; 0x30
 80119d0:	b2d2      	uxtb	r2, r2
 80119d2:	701a      	strb	r2, [r3, #0]
 80119d4:	687b      	ldr	r3, [r7, #4]
 80119d6:	2200      	movs	r2, #0
 80119d8:	701a      	strb	r2, [r3, #0]
 80119da:	bf00      	nop
 80119dc:	370c      	adds	r7, #12
 80119de:	46bd      	mov	sp, r7
 80119e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80119e4:	4770      	bx	lr
 80119e6:	bf00      	nop
 80119e8:	51eb851f 	.word	0x51eb851f
 80119ec:	cccccccd 	.word	0xcccccccd

080119f0 <memset16>:
 80119f0:	b480      	push	{r7}
 80119f2:	b083      	sub	sp, #12
 80119f4:	af00      	add	r7, sp, #0
 80119f6:	6078      	str	r0, [r7, #4]
 80119f8:	460b      	mov	r3, r1
 80119fa:	807b      	strh	r3, [r7, #2]
 80119fc:	4613      	mov	r3, r2
 80119fe:	803b      	strh	r3, [r7, #0]
 8011a00:	e00a      	b.n	8011a18 <memset16+0x28>
 8011a02:	687b      	ldr	r3, [r7, #4]
 8011a04:	1c9a      	adds	r2, r3, #2
 8011a06:	607a      	str	r2, [r7, #4]
 8011a08:	887a      	ldrh	r2, [r7, #2]
 8011a0a:	801a      	strh	r2, [r3, #0]
 8011a0c:	f9b7 3000 	ldrsh.w	r3, [r7]
 8011a10:	b29b      	uxth	r3, r3
 8011a12:	3b01      	subs	r3, #1
 8011a14:	b29b      	uxth	r3, r3
 8011a16:	803b      	strh	r3, [r7, #0]
 8011a18:	f9b7 3000 	ldrsh.w	r3, [r7]
 8011a1c:	2b00      	cmp	r3, #0
 8011a1e:	d1f0      	bne.n	8011a02 <memset16+0x12>
 8011a20:	bf00      	nop
 8011a22:	bf00      	nop
 8011a24:	370c      	adds	r7, #12
 8011a26:	46bd      	mov	sp, r7
 8011a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a2c:	4770      	bx	lr
	...

08011a30 <Value2Str>:
 8011a30:	b580      	push	{r7, lr}
 8011a32:	b088      	sub	sp, #32
 8011a34:	af00      	add	r7, sp, #0
 8011a36:	60f8      	str	r0, [r7, #12]
 8011a38:	60b9      	str	r1, [r7, #8]
 8011a3a:	607a      	str	r2, [r7, #4]
 8011a3c:	70fb      	strb	r3, [r7, #3]
 8011a3e:	2300      	movs	r3, #0
 8011a40:	83fb      	strh	r3, [r7, #30]
 8011a42:	68bb      	ldr	r3, [r7, #8]
 8011a44:	61bb      	str	r3, [r7, #24]
 8011a46:	2305      	movs	r3, #5
 8011a48:	617b      	str	r3, [r7, #20]
 8011a4a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8011a4e:	2b00      	cmp	r3, #0
 8011a50:	d129      	bne.n	8011aa6 <Value2Str+0x76>
 8011a52:	68bb      	ldr	r3, [r7, #8]
 8011a54:	2b00      	cmp	r3, #0
 8011a56:	d104      	bne.n	8011a62 <Value2Str+0x32>
 8011a58:	68fb      	ldr	r3, [r7, #12]
 8011a5a:	1c5a      	adds	r2, r3, #1
 8011a5c:	60fa      	str	r2, [r7, #12]
 8011a5e:	2220      	movs	r2, #32
 8011a60:	701a      	strb	r2, [r3, #0]
 8011a62:	68bb      	ldr	r3, [r7, #8]
 8011a64:	2b00      	cmp	r3, #0
 8011a66:	dd04      	ble.n	8011a72 <Value2Str+0x42>
 8011a68:	68fb      	ldr	r3, [r7, #12]
 8011a6a:	1c5a      	adds	r2, r3, #1
 8011a6c:	60fa      	str	r2, [r7, #12]
 8011a6e:	222b      	movs	r2, #43	; 0x2b
 8011a70:	701a      	strb	r2, [r3, #0]
 8011a72:	68bb      	ldr	r3, [r7, #8]
 8011a74:	2b00      	cmp	r3, #0
 8011a76:	da16      	bge.n	8011aa6 <Value2Str+0x76>
 8011a78:	68fb      	ldr	r3, [r7, #12]
 8011a7a:	1c5a      	adds	r2, r3, #1
 8011a7c:	60fa      	str	r2, [r7, #12]
 8011a7e:	222d      	movs	r2, #45	; 0x2d
 8011a80:	701a      	strb	r2, [r3, #0]
 8011a82:	68bb      	ldr	r3, [r7, #8]
 8011a84:	425b      	negs	r3, r3
 8011a86:	60bb      	str	r3, [r7, #8]
 8011a88:	e00d      	b.n	8011aa6 <Value2Str+0x76>
 8011a8a:	69bb      	ldr	r3, [r7, #24]
 8011a8c:	4a64      	ldr	r2, [pc, #400]	; (8011c20 <Value2Str+0x1f0>)
 8011a8e:	fb82 1203 	smull	r1, r2, r2, r3
 8011a92:	1092      	asrs	r2, r2, #2
 8011a94:	17db      	asrs	r3, r3, #31
 8011a96:	1ad3      	subs	r3, r2, r3
 8011a98:	61bb      	str	r3, [r7, #24]
 8011a9a:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8011a9e:	b29b      	uxth	r3, r3
 8011aa0:	3301      	adds	r3, #1
 8011aa2:	b29b      	uxth	r3, r3
 8011aa4:	83fb      	strh	r3, [r7, #30]
 8011aa6:	69bb      	ldr	r3, [r7, #24]
 8011aa8:	2b09      	cmp	r3, #9
 8011aaa:	dcee      	bgt.n	8011a8a <Value2Str+0x5a>
 8011aac:	f9b7 201e 	ldrsh.w	r2, [r7, #30]
 8011ab0:	4b5c      	ldr	r3, [pc, #368]	; (8011c24 <Value2Str+0x1f4>)
 8011ab2:	fb83 3102 	smull	r3, r1, r3, r2
 8011ab6:	17d3      	asrs	r3, r2, #31
 8011ab8:	1ac9      	subs	r1, r1, r3
 8011aba:	460b      	mov	r3, r1
 8011abc:	005b      	lsls	r3, r3, #1
 8011abe:	440b      	add	r3, r1
 8011ac0:	1ad3      	subs	r3, r2, r3
 8011ac2:	b21b      	sxth	r3, r3
 8011ac4:	2b02      	cmp	r3, #2
 8011ac6:	d105      	bne.n	8011ad4 <Value2Str+0xa4>
 8011ac8:	78fb      	ldrb	r3, [r7, #3]
 8011aca:	2b02      	cmp	r3, #2
 8011acc:	d102      	bne.n	8011ad4 <Value2Str+0xa4>
 8011ace:	78fb      	ldrb	r3, [r7, #3]
 8011ad0:	3301      	adds	r3, #1
 8011ad2:	70fb      	strb	r3, [r7, #3]
 8011ad4:	68bb      	ldr	r3, [r7, #8]
 8011ad6:	61bb      	str	r3, [r7, #24]
 8011ad8:	2300      	movs	r3, #0
 8011ada:	83fb      	strh	r3, [r7, #30]
 8011adc:	e016      	b.n	8011b0c <Value2Str+0xdc>
 8011ade:	69bb      	ldr	r3, [r7, #24]
 8011ae0:	4a4f      	ldr	r2, [pc, #316]	; (8011c20 <Value2Str+0x1f0>)
 8011ae2:	fb82 1203 	smull	r1, r2, r2, r3
 8011ae6:	1092      	asrs	r2, r2, #2
 8011ae8:	17db      	asrs	r3, r3, #31
 8011aea:	1ad3      	subs	r3, r2, r3
 8011aec:	61bb      	str	r3, [r7, #24]
 8011aee:	8bfb      	ldrh	r3, [r7, #30]
 8011af0:	3301      	adds	r3, #1
 8011af2:	b29b      	uxth	r3, r3
 8011af4:	83fb      	strh	r3, [r7, #30]
 8011af6:	f9b7 201e 	ldrsh.w	r2, [r7, #30]
 8011afa:	78fb      	ldrb	r3, [r7, #3]
 8011afc:	429a      	cmp	r2, r3
 8011afe:	dd05      	ble.n	8011b0c <Value2Str+0xdc>
 8011b00:	697a      	ldr	r2, [r7, #20]
 8011b02:	4613      	mov	r3, r2
 8011b04:	009b      	lsls	r3, r3, #2
 8011b06:	4413      	add	r3, r2
 8011b08:	005b      	lsls	r3, r3, #1
 8011b0a:	617b      	str	r3, [r7, #20]
 8011b0c:	69bb      	ldr	r3, [r7, #24]
 8011b0e:	2b09      	cmp	r3, #9
 8011b10:	dce5      	bgt.n	8011ade <Value2Str+0xae>
 8011b12:	f9b7 201e 	ldrsh.w	r2, [r7, #30]
 8011b16:	78fb      	ldrb	r3, [r7, #3]
 8011b18:	429a      	cmp	r2, r3
 8011b1a:	db03      	blt.n	8011b24 <Value2Str+0xf4>
 8011b1c:	68ba      	ldr	r2, [r7, #8]
 8011b1e:	697b      	ldr	r3, [r7, #20]
 8011b20:	4413      	add	r3, r2
 8011b22:	60bb      	str	r3, [r7, #8]
 8011b24:	68bb      	ldr	r3, [r7, #8]
 8011b26:	61bb      	str	r3, [r7, #24]
 8011b28:	2300      	movs	r3, #0
 8011b2a:	83fb      	strh	r3, [r7, #30]
 8011b2c:	e00d      	b.n	8011b4a <Value2Str+0x11a>
 8011b2e:	69bb      	ldr	r3, [r7, #24]
 8011b30:	4a3b      	ldr	r2, [pc, #236]	; (8011c20 <Value2Str+0x1f0>)
 8011b32:	fb82 1203 	smull	r1, r2, r2, r3
 8011b36:	1092      	asrs	r2, r2, #2
 8011b38:	17db      	asrs	r3, r3, #31
 8011b3a:	1ad3      	subs	r3, r2, r3
 8011b3c:	61bb      	str	r3, [r7, #24]
 8011b3e:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8011b42:	b29b      	uxth	r3, r3
 8011b44:	3301      	adds	r3, #1
 8011b46:	b29b      	uxth	r3, r3
 8011b48:	83fb      	strh	r3, [r7, #30]
 8011b4a:	69bb      	ldr	r3, [r7, #24]
 8011b4c:	2b09      	cmp	r3, #9
 8011b4e:	dcee      	bgt.n	8011b2e <Value2Str+0xfe>
 8011b50:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8011b54:	4a33      	ldr	r2, [pc, #204]	; (8011c24 <Value2Str+0x1f4>)
 8011b56:	fb82 1203 	smull	r1, r2, r2, r3
 8011b5a:	17db      	asrs	r3, r3, #31
 8011b5c:	1ad3      	subs	r3, r2, r3
 8011b5e:	b21b      	sxth	r3, r3
 8011b60:	61bb      	str	r3, [r7, #24]
 8011b62:	e03e      	b.n	8011be2 <Value2Str+0x1b2>
 8011b64:	8bfb      	ldrh	r3, [r7, #30]
 8011b66:	b2db      	uxtb	r3, r3
 8011b68:	4618      	mov	r0, r3
 8011b6a:	f000 f85d 	bl	8011c28 <Exp>
 8011b6e:	4602      	mov	r2, r0
 8011b70:	68bb      	ldr	r3, [r7, #8]
 8011b72:	fb93 f3f2 	sdiv	r3, r3, r2
 8011b76:	b2da      	uxtb	r2, r3
 8011b78:	68fb      	ldr	r3, [r7, #12]
 8011b7a:	1c59      	adds	r1, r3, #1
 8011b7c:	60f9      	str	r1, [r7, #12]
 8011b7e:	3230      	adds	r2, #48	; 0x30
 8011b80:	b2d2      	uxtb	r2, r2
 8011b82:	701a      	strb	r2, [r3, #0]
 8011b84:	78fb      	ldrb	r3, [r7, #3]
 8011b86:	2b00      	cmp	r3, #0
 8011b88:	d012      	beq.n	8011bb0 <Value2Str+0x180>
 8011b8a:	f9b7 201e 	ldrsh.w	r2, [r7, #30]
 8011b8e:	4b25      	ldr	r3, [pc, #148]	; (8011c24 <Value2Str+0x1f4>)
 8011b90:	fb83 3102 	smull	r3, r1, r3, r2
 8011b94:	17d3      	asrs	r3, r2, #31
 8011b96:	1ac9      	subs	r1, r1, r3
 8011b98:	460b      	mov	r3, r1
 8011b9a:	005b      	lsls	r3, r3, #1
 8011b9c:	440b      	add	r3, r1
 8011b9e:	1ad3      	subs	r3, r2, r3
 8011ba0:	b21b      	sxth	r3, r3
 8011ba2:	2b00      	cmp	r3, #0
 8011ba4:	d104      	bne.n	8011bb0 <Value2Str+0x180>
 8011ba6:	68fb      	ldr	r3, [r7, #12]
 8011ba8:	1c5a      	adds	r2, r3, #1
 8011baa:	60fa      	str	r2, [r7, #12]
 8011bac:	222e      	movs	r2, #46	; 0x2e
 8011bae:	701a      	strb	r2, [r3, #0]
 8011bb0:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8011bb4:	2b00      	cmp	r3, #0
 8011bb6:	db0c      	blt.n	8011bd2 <Value2Str+0x1a2>
 8011bb8:	8bfb      	ldrh	r3, [r7, #30]
 8011bba:	b2db      	uxtb	r3, r3
 8011bbc:	4618      	mov	r0, r3
 8011bbe:	f000 f833 	bl	8011c28 <Exp>
 8011bc2:	4602      	mov	r2, r0
 8011bc4:	68bb      	ldr	r3, [r7, #8]
 8011bc6:	fb93 f1f2 	sdiv	r1, r3, r2
 8011bca:	fb02 f201 	mul.w	r2, r2, r1
 8011bce:	1a9b      	subs	r3, r3, r2
 8011bd0:	e000      	b.n	8011bd4 <Value2Str+0x1a4>
 8011bd2:	2300      	movs	r3, #0
 8011bd4:	60bb      	str	r3, [r7, #8]
 8011bd6:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8011bda:	b29b      	uxth	r3, r3
 8011bdc:	3b01      	subs	r3, #1
 8011bde:	b29b      	uxth	r3, r3
 8011be0:	83fb      	strh	r3, [r7, #30]
 8011be2:	78fb      	ldrb	r3, [r7, #3]
 8011be4:	1e5a      	subs	r2, r3, #1
 8011be6:	70fa      	strb	r2, [r7, #3]
 8011be8:	2b00      	cmp	r3, #0
 8011bea:	d1bb      	bne.n	8011b64 <Value2Str+0x134>
 8011bec:	69ba      	ldr	r2, [r7, #24]
 8011bee:	4613      	mov	r3, r2
 8011bf0:	005b      	lsls	r3, r3, #1
 8011bf2:	4413      	add	r3, r2
 8011bf4:	005b      	lsls	r3, r3, #1
 8011bf6:	461a      	mov	r2, r3
 8011bf8:	687b      	ldr	r3, [r7, #4]
 8011bfa:	4413      	add	r3, r2
 8011bfc:	607b      	str	r3, [r7, #4]
 8011bfe:	68fb      	ldr	r3, [r7, #12]
 8011c00:	1c5a      	adds	r2, r3, #1
 8011c02:	60fa      	str	r2, [r7, #12]
 8011c04:	687a      	ldr	r2, [r7, #4]
 8011c06:	7812      	ldrb	r2, [r2, #0]
 8011c08:	701a      	strb	r2, [r3, #0]
 8011c0a:	687b      	ldr	r3, [r7, #4]
 8011c0c:	1c5a      	adds	r2, r3, #1
 8011c0e:	607a      	str	r2, [r7, #4]
 8011c10:	781b      	ldrb	r3, [r3, #0]
 8011c12:	2b00      	cmp	r3, #0
 8011c14:	d1f3      	bne.n	8011bfe <Value2Str+0x1ce>
 8011c16:	bf00      	nop
 8011c18:	bf00      	nop
 8011c1a:	3720      	adds	r7, #32
 8011c1c:	46bd      	mov	sp, r7
 8011c1e:	bd80      	pop	{r7, pc}
 8011c20:	66666667 	.word	0x66666667
 8011c24:	55555556 	.word	0x55555556

08011c28 <Exp>:
 8011c28:	b480      	push	{r7}
 8011c2a:	b085      	sub	sp, #20
 8011c2c:	af00      	add	r7, sp, #0
 8011c2e:	4603      	mov	r3, r0
 8011c30:	71fb      	strb	r3, [r7, #7]
 8011c32:	2301      	movs	r3, #1
 8011c34:	60fb      	str	r3, [r7, #12]
 8011c36:	e005      	b.n	8011c44 <Exp+0x1c>
 8011c38:	68fa      	ldr	r2, [r7, #12]
 8011c3a:	4613      	mov	r3, r2
 8011c3c:	009b      	lsls	r3, r3, #2
 8011c3e:	4413      	add	r3, r2
 8011c40:	005b      	lsls	r3, r3, #1
 8011c42:	60fb      	str	r3, [r7, #12]
 8011c44:	79fb      	ldrb	r3, [r7, #7]
 8011c46:	1e5a      	subs	r2, r3, #1
 8011c48:	71fa      	strb	r2, [r7, #7]
 8011c4a:	2b00      	cmp	r3, #0
 8011c4c:	d1f4      	bne.n	8011c38 <Exp+0x10>
 8011c4e:	68fb      	ldr	r3, [r7, #12]
 8011c50:	4618      	mov	r0, r3
 8011c52:	3714      	adds	r7, #20
 8011c54:	46bd      	mov	sp, r7
 8011c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c5a:	4770      	bx	lr

08011c5c <Sqrt32>:
 8011c5c:	b580      	push	{r7, lr}
 8011c5e:	b084      	sub	sp, #16
 8011c60:	af00      	add	r7, sp, #0
 8011c62:	6078      	str	r0, [r7, #4]
 8011c64:	687b      	ldr	r3, [r7, #4]
 8011c66:	2b00      	cmp	r3, #0
 8011c68:	d101      	bne.n	8011c6e <Sqrt32+0x12>
 8011c6a:	2300      	movs	r3, #0
 8011c6c:	e019      	b.n	8011ca2 <Sqrt32+0x46>
 8011c6e:	687b      	ldr	r3, [r7, #4]
 8011c70:	2b00      	cmp	r3, #0
 8011c72:	da00      	bge.n	8011c76 <Sqrt32+0x1a>
 8011c74:	3303      	adds	r3, #3
 8011c76:	109b      	asrs	r3, r3, #2
 8011c78:	4618      	mov	r0, r3
 8011c7a:	f7ff ffef 	bl	8011c5c <Sqrt32>
 8011c7e:	4603      	mov	r3, r0
 8011c80:	005b      	lsls	r3, r3, #1
 8011c82:	3301      	adds	r3, #1
 8011c84:	60fb      	str	r3, [r7, #12]
 8011c86:	68fb      	ldr	r3, [r7, #12]
 8011c88:	fb03 f303 	mul.w	r3, r3, r3
 8011c8c:	687a      	ldr	r2, [r7, #4]
 8011c8e:	429a      	cmp	r2, r3
 8011c90:	da05      	bge.n	8011c9e <Sqrt32+0x42>
 8011c92:	68fb      	ldr	r3, [r7, #12]
 8011c94:	b29b      	uxth	r3, r3
 8011c96:	3b01      	subs	r3, #1
 8011c98:	b29b      	uxth	r3, r3
 8011c9a:	b21b      	sxth	r3, r3
 8011c9c:	e001      	b.n	8011ca2 <Sqrt32+0x46>
 8011c9e:	68fb      	ldr	r3, [r7, #12]
 8011ca0:	b21b      	sxth	r3, r3
 8011ca2:	4618      	mov	r0, r3
 8011ca4:	3710      	adds	r7, #16
 8011ca6:	46bd      	mov	sp, r7
 8011ca8:	bd80      	pop	{r7, pc}
	...

08011cac <u16ToDec4Str>:
 8011cac:	b480      	push	{r7}
 8011cae:	b083      	sub	sp, #12
 8011cb0:	af00      	add	r7, sp, #0
 8011cb2:	6078      	str	r0, [r7, #4]
 8011cb4:	460b      	mov	r3, r1
 8011cb6:	807b      	strh	r3, [r7, #2]
 8011cb8:	887b      	ldrh	r3, [r7, #2]
 8011cba:	f503 531c 	add.w	r3, r3, #9984	; 0x2700
 8011cbe:	330f      	adds	r3, #15
 8011cc0:	b29b      	uxth	r3, r3
 8011cc2:	f644 621e 	movw	r2, #19998	; 0x4e1e
 8011cc6:	4293      	cmp	r3, r2
 8011cc8:	d917      	bls.n	8011cfa <u16ToDec4Str+0x4e>
 8011cca:	687b      	ldr	r3, [r7, #4]
 8011ccc:	1c5a      	adds	r2, r3, #1
 8011cce:	607a      	str	r2, [r7, #4]
 8011cd0:	224f      	movs	r2, #79	; 0x4f
 8011cd2:	701a      	strb	r2, [r3, #0]
 8011cd4:	687b      	ldr	r3, [r7, #4]
 8011cd6:	1c5a      	adds	r2, r3, #1
 8011cd8:	607a      	str	r2, [r7, #4]
 8011cda:	2276      	movs	r2, #118	; 0x76
 8011cdc:	701a      	strb	r2, [r3, #0]
 8011cde:	687b      	ldr	r3, [r7, #4]
 8011ce0:	1c5a      	adds	r2, r3, #1
 8011ce2:	607a      	str	r2, [r7, #4]
 8011ce4:	2265      	movs	r2, #101	; 0x65
 8011ce6:	701a      	strb	r2, [r3, #0]
 8011ce8:	687b      	ldr	r3, [r7, #4]
 8011cea:	1c5a      	adds	r2, r3, #1
 8011cec:	607a      	str	r2, [r7, #4]
 8011cee:	2272      	movs	r2, #114	; 0x72
 8011cf0:	701a      	strb	r2, [r3, #0]
 8011cf2:	687b      	ldr	r3, [r7, #4]
 8011cf4:	2200      	movs	r2, #0
 8011cf6:	701a      	strb	r2, [r3, #0]
 8011cf8:	e07e      	b.n	8011df8 <u16ToDec4Str+0x14c>
 8011cfa:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8011cfe:	4a41      	ldr	r2, [pc, #260]	; (8011e04 <u16ToDec4Str+0x158>)
 8011d00:	fb82 1203 	smull	r1, r2, r2, r3
 8011d04:	1192      	asrs	r2, r2, #6
 8011d06:	17db      	asrs	r3, r3, #31
 8011d08:	1ad3      	subs	r3, r2, r3
 8011d0a:	b21b      	sxth	r3, r3
 8011d0c:	b2da      	uxtb	r2, r3
 8011d0e:	687b      	ldr	r3, [r7, #4]
 8011d10:	1c59      	adds	r1, r3, #1
 8011d12:	6079      	str	r1, [r7, #4]
 8011d14:	3230      	adds	r2, #48	; 0x30
 8011d16:	b2d2      	uxtb	r2, r2
 8011d18:	701a      	strb	r2, [r3, #0]
 8011d1a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8011d1e:	4a39      	ldr	r2, [pc, #228]	; (8011e04 <u16ToDec4Str+0x158>)
 8011d20:	fb82 1203 	smull	r1, r2, r2, r3
 8011d24:	1191      	asrs	r1, r2, #6
 8011d26:	17da      	asrs	r2, r3, #31
 8011d28:	1a8a      	subs	r2, r1, r2
 8011d2a:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8011d2e:	fb01 f202 	mul.w	r2, r1, r2
 8011d32:	1a9b      	subs	r3, r3, r2
 8011d34:	807b      	strh	r3, [r7, #2]
 8011d36:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8011d3a:	4a33      	ldr	r2, [pc, #204]	; (8011e08 <u16ToDec4Str+0x15c>)
 8011d3c:	fb82 1203 	smull	r1, r2, r2, r3
 8011d40:	1152      	asrs	r2, r2, #5
 8011d42:	17db      	asrs	r3, r3, #31
 8011d44:	1ad3      	subs	r3, r2, r3
 8011d46:	b21b      	sxth	r3, r3
 8011d48:	b2da      	uxtb	r2, r3
 8011d4a:	687b      	ldr	r3, [r7, #4]
 8011d4c:	1c59      	adds	r1, r3, #1
 8011d4e:	6079      	str	r1, [r7, #4]
 8011d50:	3230      	adds	r2, #48	; 0x30
 8011d52:	b2d2      	uxtb	r2, r2
 8011d54:	701a      	strb	r2, [r3, #0]
 8011d56:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8011d5a:	4a2b      	ldr	r2, [pc, #172]	; (8011e08 <u16ToDec4Str+0x15c>)
 8011d5c:	fb82 1203 	smull	r1, r2, r2, r3
 8011d60:	1151      	asrs	r1, r2, #5
 8011d62:	17da      	asrs	r2, r3, #31
 8011d64:	1a8a      	subs	r2, r1, r2
 8011d66:	2164      	movs	r1, #100	; 0x64
 8011d68:	fb01 f202 	mul.w	r2, r1, r2
 8011d6c:	1a9b      	subs	r3, r3, r2
 8011d6e:	807b      	strh	r3, [r7, #2]
 8011d70:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8011d74:	4a25      	ldr	r2, [pc, #148]	; (8011e0c <u16ToDec4Str+0x160>)
 8011d76:	fb82 1203 	smull	r1, r2, r2, r3
 8011d7a:	1092      	asrs	r2, r2, #2
 8011d7c:	17db      	asrs	r3, r3, #31
 8011d7e:	1ad3      	subs	r3, r2, r3
 8011d80:	b21b      	sxth	r3, r3
 8011d82:	b2da      	uxtb	r2, r3
 8011d84:	687b      	ldr	r3, [r7, #4]
 8011d86:	1c59      	adds	r1, r3, #1
 8011d88:	6079      	str	r1, [r7, #4]
 8011d8a:	3230      	adds	r2, #48	; 0x30
 8011d8c:	b2d2      	uxtb	r2, r2
 8011d8e:	701a      	strb	r2, [r3, #0]
 8011d90:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8011d94:	4b1d      	ldr	r3, [pc, #116]	; (8011e0c <u16ToDec4Str+0x160>)
 8011d96:	fb83 1302 	smull	r1, r3, r3, r2
 8011d9a:	1099      	asrs	r1, r3, #2
 8011d9c:	17d3      	asrs	r3, r2, #31
 8011d9e:	1ac9      	subs	r1, r1, r3
 8011da0:	460b      	mov	r3, r1
 8011da2:	009b      	lsls	r3, r3, #2
 8011da4:	440b      	add	r3, r1
 8011da6:	005b      	lsls	r3, r3, #1
 8011da8:	1ad3      	subs	r3, r2, r3
 8011daa:	807b      	strh	r3, [r7, #2]
 8011dac:	887b      	ldrh	r3, [r7, #2]
 8011dae:	b2da      	uxtb	r2, r3
 8011db0:	687b      	ldr	r3, [r7, #4]
 8011db2:	1c59      	adds	r1, r3, #1
 8011db4:	6079      	str	r1, [r7, #4]
 8011db6:	3230      	adds	r2, #48	; 0x30
 8011db8:	b2d2      	uxtb	r2, r2
 8011dba:	701a      	strb	r2, [r3, #0]
 8011dbc:	687b      	ldr	r3, [r7, #4]
 8011dbe:	2200      	movs	r2, #0
 8011dc0:	701a      	strb	r2, [r3, #0]
 8011dc2:	687b      	ldr	r3, [r7, #4]
 8011dc4:	3b04      	subs	r3, #4
 8011dc6:	781b      	ldrb	r3, [r3, #0]
 8011dc8:	2b30      	cmp	r3, #48	; 0x30
 8011dca:	d115      	bne.n	8011df8 <u16ToDec4Str+0x14c>
 8011dcc:	687b      	ldr	r3, [r7, #4]
 8011dce:	3b04      	subs	r3, #4
 8011dd0:	2220      	movs	r2, #32
 8011dd2:	701a      	strb	r2, [r3, #0]
 8011dd4:	687b      	ldr	r3, [r7, #4]
 8011dd6:	3b03      	subs	r3, #3
 8011dd8:	781b      	ldrb	r3, [r3, #0]
 8011dda:	2b30      	cmp	r3, #48	; 0x30
 8011ddc:	d10c      	bne.n	8011df8 <u16ToDec4Str+0x14c>
 8011dde:	687b      	ldr	r3, [r7, #4]
 8011de0:	3b03      	subs	r3, #3
 8011de2:	2220      	movs	r2, #32
 8011de4:	701a      	strb	r2, [r3, #0]
 8011de6:	687b      	ldr	r3, [r7, #4]
 8011de8:	3b02      	subs	r3, #2
 8011dea:	781b      	ldrb	r3, [r3, #0]
 8011dec:	2b30      	cmp	r3, #48	; 0x30
 8011dee:	d103      	bne.n	8011df8 <u16ToDec4Str+0x14c>
 8011df0:	687b      	ldr	r3, [r7, #4]
 8011df2:	3b02      	subs	r3, #2
 8011df4:	2220      	movs	r2, #32
 8011df6:	701a      	strb	r2, [r3, #0]
 8011df8:	370c      	adds	r7, #12
 8011dfa:	46bd      	mov	sp, r7
 8011dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e00:	4770      	bx	lr
 8011e02:	bf00      	nop
 8011e04:	10624dd3 	.word	0x10624dd3
 8011e08:	51eb851f 	.word	0x51eb851f
 8011e0c:	66666667 	.word	0x66666667

08011e10 <lcd_write_cmd_data>:
#include "Func.h"

unsigned short data[15];

void lcd_write_cmd_data( unsigned short Cmd, short Len, unsigned short *Data )
{
 8011e10:	b580      	push	{r7, lr}
 8011e12:	b082      	sub	sp, #8
 8011e14:	af00      	add	r7, sp, #0
 8011e16:	4603      	mov	r3, r0
 8011e18:	603a      	str	r2, [r7, #0]
 8011e1a:	80fb      	strh	r3, [r7, #6]
 8011e1c:	460b      	mov	r3, r1
 8011e1e:	80bb      	strh	r3, [r7, #4]
	HAL_GPIO_WritePin( LcdRs_GPIO_Port, LcdRs_Pin, GPIO_PIN_RESET); // low for command
 8011e20:	2200      	movs	r2, #0
 8011e22:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8011e26:	480e      	ldr	r0, [pc, #56]	; (8011e60 <lcd_write_cmd_data+0x50>)
 8011e28:	f007 fe5e 	bl	8019ae8 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi3, (unsigned char*)&Cmd, 1, 1);// timeout 1 ms
 8011e2c:	1db9      	adds	r1, r7, #6
 8011e2e:	2301      	movs	r3, #1
 8011e30:	2201      	movs	r2, #1
 8011e32:	480c      	ldr	r0, [pc, #48]	; (8011e64 <lcd_write_cmd_data+0x54>)
 8011e34:	f00a f95d 	bl	801c0f2 <HAL_SPI_Transmit>

	if(Len !=0)
 8011e38:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8011e3c:	2b00      	cmp	r3, #0
 8011e3e:	d00b      	beq.n	8011e58 <lcd_write_cmd_data+0x48>
	{
		HAL_GPIO_WritePin( LcdRs_GPIO_Port, LcdRs_Pin, GPIO_PIN_SET);  //high for data
 8011e40:	2201      	movs	r2, #1
 8011e42:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8011e46:	4806      	ldr	r0, [pc, #24]	; (8011e60 <lcd_write_cmd_data+0x50>)
 8011e48:	f007 fe4e 	bl	8019ae8 <HAL_GPIO_WritePin>
		HAL_SPI_Transmit(&hspi3, (unsigned char*)Data, Len, 1);// timeout 1 ms
 8011e4c:	88ba      	ldrh	r2, [r7, #4]
 8011e4e:	2301      	movs	r3, #1
 8011e50:	6839      	ldr	r1, [r7, #0]
 8011e52:	4804      	ldr	r0, [pc, #16]	; (8011e64 <lcd_write_cmd_data+0x54>)
 8011e54:	f00a f94d 	bl	801c0f2 <HAL_SPI_Transmit>
	}
}
 8011e58:	bf00      	nop
 8011e5a:	3708      	adds	r7, #8
 8011e5c:	46bd      	mov	sp, r7
 8011e5e:	bd80      	pop	{r7, pc}
 8011e60:	40020800 	.word	0x40020800
 8011e64:	200069c0 	.word	0x200069c0

08011e68 <Init_LCD>:

// initialize the LCD
void Init_LCD(void)
{
 8011e68:	b580      	push	{r7, lr}
 8011e6a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin( LcdCs_GPIO_Port, LcdCs_Pin, GPIO_PIN_RESET);  //enable lcd controller
 8011e6c:	2200      	movs	r2, #0
 8011e6e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8011e72:	4885      	ldr	r0, [pc, #532]	; (8012088 <Init_LCD+0x220>)
 8011e74:	f007 fe38 	bl	8019ae8 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin( Dres_GPIO_Port, Dres_Pin, GPIO_PIN_SET);  //display reset
 8011e78:	2201      	movs	r2, #1
 8011e7a:	f44f 7100 	mov.w	r1, #512	; 0x200
 8011e7e:	4883      	ldr	r0, [pc, #524]	; (801208c <Init_LCD+0x224>)
 8011e80:	f007 fe32 	bl	8019ae8 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8011e84:	2001      	movs	r0, #1
 8011e86:	f006 fa51 	bl	801832c <HAL_Delay>
	HAL_GPIO_WritePin( Dres_GPIO_Port, Dres_Pin, GPIO_PIN_RESET);
 8011e8a:	2200      	movs	r2, #0
 8011e8c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8011e90:	487e      	ldr	r0, [pc, #504]	; (801208c <Init_LCD+0x224>)
 8011e92:	f007 fe29 	bl	8019ae8 <HAL_GPIO_WritePin>
	HAL_Delay(10);
 8011e96:	200a      	movs	r0, #10
 8011e98:	f006 fa48 	bl	801832c <HAL_Delay>
	HAL_GPIO_WritePin( Dres_GPIO_Port, Dres_Pin, GPIO_PIN_SET);
 8011e9c:	2201      	movs	r2, #1
 8011e9e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8011ea2:	487a      	ldr	r0, [pc, #488]	; (801208c <Init_LCD+0x224>)
 8011ea4:	f007 fe20 	bl	8019ae8 <HAL_GPIO_WritePin>
	HAL_Delay(120);
 8011ea8:	2078      	movs	r0, #120	; 0x78
 8011eaa:	f006 fa3f 	bl	801832c <HAL_Delay>

	data[0]=0;
 8011eae:	4b78      	ldr	r3, [pc, #480]	; (8012090 <Init_LCD+0x228>)
 8011eb0:	2200      	movs	r2, #0
 8011eb2:	801a      	strh	r2, [r3, #0]
	lcd_write_cmd_data(0xb0, 1, data);  //set interface
 8011eb4:	4a76      	ldr	r2, [pc, #472]	; (8012090 <Init_LCD+0x228>)
 8011eb6:	2101      	movs	r1, #1
 8011eb8:	20b0      	movs	r0, #176	; 0xb0
 8011eba:	f7ff ffa9 	bl	8011e10 <lcd_write_cmd_data>
	lcd_write_cmd_data(0x11, 0, data);  //sleep
 8011ebe:	4a74      	ldr	r2, [pc, #464]	; (8012090 <Init_LCD+0x228>)
 8011ec0:	2100      	movs	r1, #0
 8011ec2:	2011      	movs	r0, #17
 8011ec4:	f7ff ffa4 	bl	8011e10 <lcd_write_cmd_data>
	HAL_Delay(120);
 8011ec8:	2078      	movs	r0, #120	; 0x78
 8011eca:	f006 fa2f 	bl	801832c <HAL_Delay>
	data[0]=0x55;
 8011ece:	4b70      	ldr	r3, [pc, #448]	; (8012090 <Init_LCD+0x228>)
 8011ed0:	2255      	movs	r2, #85	; 0x55
 8011ed2:	801a      	strh	r2, [r3, #0]
	lcd_write_cmd_data(0x3A, 1, data);  //set pixels to 16 bit
 8011ed4:	4a6e      	ldr	r2, [pc, #440]	; (8012090 <Init_LCD+0x228>)
 8011ed6:	2101      	movs	r1, #1
 8011ed8:	203a      	movs	r0, #58	; 0x3a
 8011eda:	f7ff ff99 	bl	8011e10 <lcd_write_cmd_data>
	data[0]=data[1]=9;
 8011ede:	4b6c      	ldr	r3, [pc, #432]	; (8012090 <Init_LCD+0x228>)
 8011ee0:	2209      	movs	r2, #9
 8011ee2:	805a      	strh	r2, [r3, #2]
 8011ee4:	4b6a      	ldr	r3, [pc, #424]	; (8012090 <Init_LCD+0x228>)
 8011ee6:	885a      	ldrh	r2, [r3, #2]
 8011ee8:	4b69      	ldr	r3, [pc, #420]	; (8012090 <Init_LCD+0x228>)
 8011eea:	801a      	strh	r2, [r3, #0]
	lcd_write_cmd_data(0xc0, 2, data);  //set power
 8011eec:	4a68      	ldr	r2, [pc, #416]	; (8012090 <Init_LCD+0x228>)
 8011eee:	2102      	movs	r1, #2
 8011ef0:	20c0      	movs	r0, #192	; 0xc0
 8011ef2:	f7ff ff8d 	bl	8011e10 <lcd_write_cmd_data>
	data[0]= 0x41;
 8011ef6:	4b66      	ldr	r3, [pc, #408]	; (8012090 <Init_LCD+0x228>)
 8011ef8:	2241      	movs	r2, #65	; 0x41
 8011efa:	801a      	strh	r2, [r3, #0]
	data[1]=0;
 8011efc:	4b64      	ldr	r3, [pc, #400]	; (8012090 <Init_LCD+0x228>)
 8011efe:	2200      	movs	r2, #0
 8011f00:	805a      	strh	r2, [r3, #2]
	lcd_write_cmd_data(0xc1, 2, data);  //set power
 8011f02:	4a63      	ldr	r2, [pc, #396]	; (8012090 <Init_LCD+0x228>)
 8011f04:	2102      	movs	r1, #2
 8011f06:	20c1      	movs	r0, #193	; 0xc1
 8011f08:	f7ff ff82 	bl	8011e10 <lcd_write_cmd_data>
	data[0]= 0x33;
 8011f0c:	4b60      	ldr	r3, [pc, #384]	; (8012090 <Init_LCD+0x228>)
 8011f0e:	2233      	movs	r2, #51	; 0x33
 8011f10:	801a      	strh	r2, [r3, #0]
	lcd_write_cmd_data(0xc2, 1, data);  //set power
 8011f12:	4a5f      	ldr	r2, [pc, #380]	; (8012090 <Init_LCD+0x228>)
 8011f14:	2101      	movs	r1, #1
 8011f16:	20c2      	movs	r0, #194	; 0xc2
 8011f18:	f7ff ff7a 	bl	8011e10 <lcd_write_cmd_data>
	data[0]=data[1]=0;
 8011f1c:	4b5c      	ldr	r3, [pc, #368]	; (8012090 <Init_LCD+0x228>)
 8011f1e:	2200      	movs	r2, #0
 8011f20:	805a      	strh	r2, [r3, #2]
 8011f22:	4b5b      	ldr	r3, [pc, #364]	; (8012090 <Init_LCD+0x228>)
 8011f24:	885a      	ldrh	r2, [r3, #2]
 8011f26:	4b5a      	ldr	r3, [pc, #360]	; (8012090 <Init_LCD+0x228>)
 8011f28:	801a      	strh	r2, [r3, #0]
	data[2]=data[3]=0;  //#3 may be 0x36
 8011f2a:	4b59      	ldr	r3, [pc, #356]	; (8012090 <Init_LCD+0x228>)
 8011f2c:	2200      	movs	r2, #0
 8011f2e:	80da      	strh	r2, [r3, #6]
 8011f30:	4b57      	ldr	r3, [pc, #348]	; (8012090 <Init_LCD+0x228>)
 8011f32:	88da      	ldrh	r2, [r3, #6]
 8011f34:	4b56      	ldr	r3, [pc, #344]	; (8012090 <Init_LCD+0x228>)
 8011f36:	809a      	strh	r2, [r3, #4]
	lcd_write_cmd_data(0xc5, 4, data);  //Vcom control
 8011f38:	4a55      	ldr	r2, [pc, #340]	; (8012090 <Init_LCD+0x228>)
 8011f3a:	2104      	movs	r1, #4
 8011f3c:	20c5      	movs	r0, #197	; 0xc5
 8011f3e:	f7ff ff67 	bl	8011e10 <lcd_write_cmd_data>

	data[0]=  0;
 8011f42:	4b53      	ldr	r3, [pc, #332]	; (8012090 <Init_LCD+0x228>)
 8011f44:	2200      	movs	r2, #0
 8011f46:	801a      	strh	r2, [r3, #0]
	lcd_write_cmd_data(0x36, 1, data);  //madctl
 8011f48:	4a51      	ldr	r2, [pc, #324]	; (8012090 <Init_LCD+0x228>)
 8011f4a:	2101      	movs	r1, #1
 8011f4c:	2036      	movs	r0, #54	; 0x36
 8011f4e:	f7ff ff5f 	bl	8011e10 <lcd_write_cmd_data>
	 Digital Gamma Control 1
	-1, 0xE2, 0x0F, 0x32, 0x2E, 0x0B, 0x0D, 0x05, 0x47, 0x75,
	          0x37, 0x06, 0x10, 0x03, 0x24, 0x20, 0x00,
    SPI_TRANSFER(0xE0 Positive Gamma Control, 0x00, 0x2C, 0x2C, 0x0B, 0x0C, 0x04, 0x4C, 0x64, 0x36, 0x03, 0x0E, 0x01, 0x10, 0x01, 0x00);
    SPI_TRANSFER(0xE1 Negative Gamma Control, 0x0F, 0x37, 0x37, 0x0C, 0x0F, 0x05, 0x50, 0x32, 0x36, 0x04, 0x0B, 0x00, 0x19, 0x14, 0x0F); */
	data[0]=data[14]=  0;
 8011f52:	4b4f      	ldr	r3, [pc, #316]	; (8012090 <Init_LCD+0x228>)
 8011f54:	2200      	movs	r2, #0
 8011f56:	839a      	strh	r2, [r3, #28]
 8011f58:	4b4d      	ldr	r3, [pc, #308]	; (8012090 <Init_LCD+0x228>)
 8011f5a:	8b9a      	ldrh	r2, [r3, #28]
 8011f5c:	4b4c      	ldr	r3, [pc, #304]	; (8012090 <Init_LCD+0x228>)
 8011f5e:	801a      	strh	r2, [r3, #0]
	data[1]=data[2]=   0x2C;
 8011f60:	4b4b      	ldr	r3, [pc, #300]	; (8012090 <Init_LCD+0x228>)
 8011f62:	222c      	movs	r2, #44	; 0x2c
 8011f64:	809a      	strh	r2, [r3, #4]
 8011f66:	4b4a      	ldr	r3, [pc, #296]	; (8012090 <Init_LCD+0x228>)
 8011f68:	889a      	ldrh	r2, [r3, #4]
 8011f6a:	4b49      	ldr	r3, [pc, #292]	; (8012090 <Init_LCD+0x228>)
 8011f6c:	805a      	strh	r2, [r3, #2]
	data[3]=  0x0B;
 8011f6e:	4b48      	ldr	r3, [pc, #288]	; (8012090 <Init_LCD+0x228>)
 8011f70:	220b      	movs	r2, #11
 8011f72:	80da      	strh	r2, [r3, #6]
	data[4]=  0x0C;
 8011f74:	4b46      	ldr	r3, [pc, #280]	; (8012090 <Init_LCD+0x228>)
 8011f76:	220c      	movs	r2, #12
 8011f78:	811a      	strh	r2, [r3, #8]
	data[5]=  0x04;
 8011f7a:	4b45      	ldr	r3, [pc, #276]	; (8012090 <Init_LCD+0x228>)
 8011f7c:	2204      	movs	r2, #4
 8011f7e:	815a      	strh	r2, [r3, #10]
	data[6]=  0x4C;
 8011f80:	4b43      	ldr	r3, [pc, #268]	; (8012090 <Init_LCD+0x228>)
 8011f82:	224c      	movs	r2, #76	; 0x4c
 8011f84:	819a      	strh	r2, [r3, #12]
	data[7]=  0x64;
 8011f86:	4b42      	ldr	r3, [pc, #264]	; (8012090 <Init_LCD+0x228>)
 8011f88:	2264      	movs	r2, #100	; 0x64
 8011f8a:	81da      	strh	r2, [r3, #14]
	data[8]=  0x36;
 8011f8c:	4b40      	ldr	r3, [pc, #256]	; (8012090 <Init_LCD+0x228>)
 8011f8e:	2236      	movs	r2, #54	; 0x36
 8011f90:	821a      	strh	r2, [r3, #16]
	data[9]=  0x03;
 8011f92:	4b3f      	ldr	r3, [pc, #252]	; (8012090 <Init_LCD+0x228>)
 8011f94:	2203      	movs	r2, #3
 8011f96:	825a      	strh	r2, [r3, #18]
	data[10]= 0x0E;
 8011f98:	4b3d      	ldr	r3, [pc, #244]	; (8012090 <Init_LCD+0x228>)
 8011f9a:	220e      	movs	r2, #14
 8011f9c:	829a      	strh	r2, [r3, #20]
	data[11]=data[13]= 0x2C;
 8011f9e:	4b3c      	ldr	r3, [pc, #240]	; (8012090 <Init_LCD+0x228>)
 8011fa0:	222c      	movs	r2, #44	; 0x2c
 8011fa2:	835a      	strh	r2, [r3, #26]
 8011fa4:	4b3a      	ldr	r3, [pc, #232]	; (8012090 <Init_LCD+0x228>)
 8011fa6:	8b5a      	ldrh	r2, [r3, #26]
 8011fa8:	4b39      	ldr	r3, [pc, #228]	; (8012090 <Init_LCD+0x228>)
 8011faa:	82da      	strh	r2, [r3, #22]
	data[12]= 0x10;
 8011fac:	4b38      	ldr	r3, [pc, #224]	; (8012090 <Init_LCD+0x228>)
 8011fae:	2210      	movs	r2, #16
 8011fb0:	831a      	strh	r2, [r3, #24]
	lcd_write_cmd_data(0xe0, 15, data);  //positive gamma control
 8011fb2:	4a37      	ldr	r2, [pc, #220]	; (8012090 <Init_LCD+0x228>)
 8011fb4:	210f      	movs	r1, #15
 8011fb6:	20e0      	movs	r0, #224	; 0xe0
 8011fb8:	f7ff ff2a 	bl	8011e10 <lcd_write_cmd_data>

	data[0]=data[4]= data[14]= 0x0F;
 8011fbc:	4b34      	ldr	r3, [pc, #208]	; (8012090 <Init_LCD+0x228>)
 8011fbe:	220f      	movs	r2, #15
 8011fc0:	839a      	strh	r2, [r3, #28]
 8011fc2:	4b33      	ldr	r3, [pc, #204]	; (8012090 <Init_LCD+0x228>)
 8011fc4:	8b9a      	ldrh	r2, [r3, #28]
 8011fc6:	4b32      	ldr	r3, [pc, #200]	; (8012090 <Init_LCD+0x228>)
 8011fc8:	811a      	strh	r2, [r3, #8]
 8011fca:	4b31      	ldr	r3, [pc, #196]	; (8012090 <Init_LCD+0x228>)
 8011fcc:	891a      	ldrh	r2, [r3, #8]
 8011fce:	4b30      	ldr	r3, [pc, #192]	; (8012090 <Init_LCD+0x228>)
 8011fd0:	801a      	strh	r2, [r3, #0]
	data[1]=data[2]= 0x37;
 8011fd2:	4b2f      	ldr	r3, [pc, #188]	; (8012090 <Init_LCD+0x228>)
 8011fd4:	2237      	movs	r2, #55	; 0x37
 8011fd6:	809a      	strh	r2, [r3, #4]
 8011fd8:	4b2d      	ldr	r3, [pc, #180]	; (8012090 <Init_LCD+0x228>)
 8011fda:	889a      	ldrh	r2, [r3, #4]
 8011fdc:	4b2c      	ldr	r3, [pc, #176]	; (8012090 <Init_LCD+0x228>)
 8011fde:	805a      	strh	r2, [r3, #2]
	data[3]=  0x0C;
 8011fe0:	4b2b      	ldr	r3, [pc, #172]	; (8012090 <Init_LCD+0x228>)
 8011fe2:	220c      	movs	r2, #12
 8011fe4:	80da      	strh	r2, [r3, #6]
	data[5]=  0x05;
 8011fe6:	4b2a      	ldr	r3, [pc, #168]	; (8012090 <Init_LCD+0x228>)
 8011fe8:	2205      	movs	r2, #5
 8011fea:	815a      	strh	r2, [r3, #10]
	data[6]=  0x50;
 8011fec:	4b28      	ldr	r3, [pc, #160]	; (8012090 <Init_LCD+0x228>)
 8011fee:	2250      	movs	r2, #80	; 0x50
 8011ff0:	819a      	strh	r2, [r3, #12]
	data[7]=  0x32;
 8011ff2:	4b27      	ldr	r3, [pc, #156]	; (8012090 <Init_LCD+0x228>)
 8011ff4:	2232      	movs	r2, #50	; 0x32
 8011ff6:	81da      	strh	r2, [r3, #14]
	data[8]=  0x36;
 8011ff8:	4b25      	ldr	r3, [pc, #148]	; (8012090 <Init_LCD+0x228>)
 8011ffa:	2236      	movs	r2, #54	; 0x36
 8011ffc:	821a      	strh	r2, [r3, #16]
	data[9]=  0x04;
 8011ffe:	4b24      	ldr	r3, [pc, #144]	; (8012090 <Init_LCD+0x228>)
 8012000:	2204      	movs	r2, #4
 8012002:	825a      	strh	r2, [r3, #18]
	data[10]= 0x0B;
 8012004:	4b22      	ldr	r3, [pc, #136]	; (8012090 <Init_LCD+0x228>)
 8012006:	220b      	movs	r2, #11
 8012008:	829a      	strh	r2, [r3, #20]
	data[11]= 0;
 801200a:	4b21      	ldr	r3, [pc, #132]	; (8012090 <Init_LCD+0x228>)
 801200c:	2200      	movs	r2, #0
 801200e:	82da      	strh	r2, [r3, #22]
	data[12]= 0x19;
 8012010:	4b1f      	ldr	r3, [pc, #124]	; (8012090 <Init_LCD+0x228>)
 8012012:	2219      	movs	r2, #25
 8012014:	831a      	strh	r2, [r3, #24]
	data[13]= 0x14;
 8012016:	4b1e      	ldr	r3, [pc, #120]	; (8012090 <Init_LCD+0x228>)
 8012018:	2214      	movs	r2, #20
 801201a:	835a      	strh	r2, [r3, #26]
	lcd_write_cmd_data(0xe1, 15, data);  //Negitive gamma control
 801201c:	4a1c      	ldr	r2, [pc, #112]	; (8012090 <Init_LCD+0x228>)
 801201e:	210f      	movs	r1, #15
 8012020:	20e1      	movs	r0, #225	; 0xe1
 8012022:	f7ff fef5 	bl	8011e10 <lcd_write_cmd_data>

//	SPI_TRANSFER(0xB6/*Display Function Control*/, 0, /*ISC=2*/2, /*Display Height h=*/59); // Actual display height = (h+1)*8 so (59+1)*8=480
	data[0]=0;
 8012026:	4b1a      	ldr	r3, [pc, #104]	; (8012090 <Init_LCD+0x228>)
 8012028:	2200      	movs	r2, #0
 801202a:	801a      	strh	r2, [r3, #0]
	data[1]=2;
 801202c:	4b18      	ldr	r3, [pc, #96]	; (8012090 <Init_LCD+0x228>)
 801202e:	2202      	movs	r2, #2
 8012030:	805a      	strh	r2, [r3, #2]
	data[2]=59;
 8012032:	4b17      	ldr	r3, [pc, #92]	; (8012090 <Init_LCD+0x228>)
 8012034:	223b      	movs	r2, #59	; 0x3b
 8012036:	809a      	strh	r2, [r3, #4]
	lcd_write_cmd_data(0xb6, 3, data);  //display function control
 8012038:	4a15      	ldr	r2, [pc, #84]	; (8012090 <Init_LCD+0x228>)
 801203a:	2103      	movs	r1, #3
 801203c:	20b6      	movs	r0, #182	; 0xb6
 801203e:	f7ff fee7 	bl	8011e10 <lcd_write_cmd_data>

	lcd_write_cmd_data(0x11, 0, data);  //sleep
 8012042:	4a13      	ldr	r2, [pc, #76]	; (8012090 <Init_LCD+0x228>)
 8012044:	2100      	movs	r1, #0
 8012046:	2011      	movs	r0, #17
 8012048:	f7ff fee2 	bl	8011e10 <lcd_write_cmd_data>
	HAL_Delay(120);
 801204c:	2078      	movs	r0, #120	; 0x78
 801204e:	f006 f96d 	bl	801832c <HAL_Delay>
	lcd_write_cmd_data(0x29, 0, data);  //display on
 8012052:	4a0f      	ldr	r2, [pc, #60]	; (8012090 <Init_LCD+0x228>)
 8012054:	2100      	movs	r1, #0
 8012056:	2029      	movs	r0, #41	; 0x29
 8012058:	f7ff feda 	bl	8011e10 <lcd_write_cmd_data>
	lcd_write_cmd_data(0x38, 0, data);  //idle off
 801205c:	4a0c      	ldr	r2, [pc, #48]	; (8012090 <Init_LCD+0x228>)
 801205e:	2100      	movs	r1, #0
 8012060:	2038      	movs	r0, #56	; 0x38
 8012062:	f7ff fed5 	bl	8011e10 <lcd_write_cmd_data>
	lcd_write_cmd_data(0x13, 0, data);  //Normal Display Mode ON
 8012066:	4a0a      	ldr	r2, [pc, #40]	; (8012090 <Init_LCD+0x228>)
 8012068:	2100      	movs	r1, #0
 801206a:	2013      	movs	r0, #19
 801206c:	f7ff fed0 	bl	8011e10 <lcd_write_cmd_data>

	HAL_GPIO_WritePin( LcdCs_GPIO_Port, LcdCs_Pin, GPIO_PIN_SET);  //disable lcd controller
 8012070:	2201      	movs	r2, #1
 8012072:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8012076:	4804      	ldr	r0, [pc, #16]	; (8012088 <Init_LCD+0x220>)
 8012078:	f007 fd36 	bl	8019ae8 <HAL_GPIO_WritePin>

	LCD_ClrScrn(0);  //clear screen to black
 801207c:	2000      	movs	r0, #0
 801207e:	f000 f809 	bl	8012094 <LCD_ClrScrn>
}
 8012082:	bf00      	nop
 8012084:	bd80      	pop	{r7, pc}
 8012086:	bf00      	nop
 8012088:	40020800 	.word	0x40020800
 801208c:	40020400 	.word	0x40020400
 8012090:	2000281c 	.word	0x2000281c

08012094 <LCD_ClrScrn>:

void LCD_ClrScrn(unsigned short Color)
{
 8012094:	b580      	push	{r7, lr}
 8012096:	b084      	sub	sp, #16
 8012098:	af00      	add	r7, sp, #0
 801209a:	4603      	mov	r3, r0
 801209c:	80fb      	strh	r3, [r7, #6]
short y;
unsigned short *ptr;

ptr = malloc(320*2);
 801209e:	f44f 7020 	mov.w	r0, #640	; 0x280
 80120a2:	f010 fd59 	bl	8022b58 <malloc>
 80120a6:	4603      	mov	r3, r0
 80120a8:	60bb      	str	r3, [r7, #8]
HAL_GPIO_WritePin( LcdCs_GPIO_Port, LcdCs_Pin, GPIO_PIN_RESET);  //enable lcd controller
 80120aa:	2200      	movs	r2, #0
 80120ac:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80120b0:	483d      	ldr	r0, [pc, #244]	; (80121a8 <LCD_ClrScrn+0x114>)
 80120b2:	f007 fd19 	bl	8019ae8 <HAL_GPIO_WritePin>

for(y=0; y<480; ++y )
 80120b6:	2300      	movs	r3, #0
 80120b8:	81fb      	strh	r3, [r7, #14]
 80120ba:	e03c      	b.n	8012136 <LCD_ClrScrn+0xa2>
{
	data[0]=data[1]= 0;
 80120bc:	4b3b      	ldr	r3, [pc, #236]	; (80121ac <LCD_ClrScrn+0x118>)
 80120be:	2200      	movs	r2, #0
 80120c0:	805a      	strh	r2, [r3, #2]
 80120c2:	4b3a      	ldr	r3, [pc, #232]	; (80121ac <LCD_ClrScrn+0x118>)
 80120c4:	885a      	ldrh	r2, [r3, #2]
 80120c6:	4b39      	ldr	r3, [pc, #228]	; (80121ac <LCD_ClrScrn+0x118>)
 80120c8:	801a      	strh	r2, [r3, #0]
	data[2]= 319>>8;
 80120ca:	4b38      	ldr	r3, [pc, #224]	; (80121ac <LCD_ClrScrn+0x118>)
 80120cc:	2201      	movs	r2, #1
 80120ce:	809a      	strh	r2, [r3, #4]
	data[3]= 319 & 0xFF;
 80120d0:	4b36      	ldr	r3, [pc, #216]	; (80121ac <LCD_ClrScrn+0x118>)
 80120d2:	223f      	movs	r2, #63	; 0x3f
 80120d4:	80da      	strh	r2, [r3, #6]
	lcd_write_cmd_data(0x2A, 4, data);  //set x
 80120d6:	4a35      	ldr	r2, [pc, #212]	; (80121ac <LCD_ClrScrn+0x118>)
 80120d8:	2104      	movs	r1, #4
 80120da:	202a      	movs	r0, #42	; 0x2a
 80120dc:	f7ff fe98 	bl	8011e10 <lcd_write_cmd_data>
	data[0]= y>>8;
 80120e0:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80120e4:	121b      	asrs	r3, r3, #8
 80120e6:	b21b      	sxth	r3, r3
 80120e8:	b29a      	uxth	r2, r3
 80120ea:	4b30      	ldr	r3, [pc, #192]	; (80121ac <LCD_ClrScrn+0x118>)
 80120ec:	801a      	strh	r2, [r3, #0]
	data[1]= y & 0xFF;
 80120ee:	89fb      	ldrh	r3, [r7, #14]
 80120f0:	b2db      	uxtb	r3, r3
 80120f2:	b29a      	uxth	r2, r3
 80120f4:	4b2d      	ldr	r3, [pc, #180]	; (80121ac <LCD_ClrScrn+0x118>)
 80120f6:	805a      	strh	r2, [r3, #2]
	data[2]= 479>>8;
 80120f8:	4b2c      	ldr	r3, [pc, #176]	; (80121ac <LCD_ClrScrn+0x118>)
 80120fa:	2201      	movs	r2, #1
 80120fc:	809a      	strh	r2, [r3, #4]
	data[3]= 479 & 0xFF;
 80120fe:	4b2b      	ldr	r3, [pc, #172]	; (80121ac <LCD_ClrScrn+0x118>)
 8012100:	22df      	movs	r2, #223	; 0xdf
 8012102:	80da      	strh	r2, [r3, #6]
	lcd_write_cmd_data(0x2B, 4, data);  //set y
 8012104:	4a29      	ldr	r2, [pc, #164]	; (80121ac <LCD_ClrScrn+0x118>)
 8012106:	2104      	movs	r1, #4
 8012108:	202b      	movs	r0, #43	; 0x2b
 801210a:	f7ff fe81 	bl	8011e10 <lcd_write_cmd_data>

	if(ptr != NULL)
 801210e:	68bb      	ldr	r3, [r7, #8]
 8012110:	2b00      	cmp	r3, #0
 8012112:	d016      	beq.n	8012142 <LCD_ClrScrn+0xae>
	{
		memset16(ptr, Color, 320);
 8012114:	88fb      	ldrh	r3, [r7, #6]
 8012116:	f44f 72a0 	mov.w	r2, #320	; 0x140
 801211a:	4619      	mov	r1, r3
 801211c:	68b8      	ldr	r0, [r7, #8]
 801211e:	f7ff fc67 	bl	80119f0 <memset16>
		lcd_write_cmd_data(0x2C, 320, ptr);  //write out pixels
 8012122:	68ba      	ldr	r2, [r7, #8]
 8012124:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8012128:	202c      	movs	r0, #44	; 0x2c
 801212a:	f7ff fe71 	bl	8011e10 <lcd_write_cmd_data>
for(y=0; y<480; ++y )
 801212e:	89fb      	ldrh	r3, [r7, #14]
 8012130:	3301      	adds	r3, #1
 8012132:	b29b      	uxth	r3, r3
 8012134:	81fb      	strh	r3, [r7, #14]
 8012136:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 801213a:	f5b3 7ff0 	cmp.w	r3, #480	; 0x1e0
 801213e:	dbbd      	blt.n	80120bc <LCD_ClrScrn+0x28>
 8012140:	e000      	b.n	8012144 <LCD_ClrScrn+0xb0>
	}
	else
		break; //bail out
 8012142:	bf00      	nop
}

free(ptr);
 8012144:	68b8      	ldr	r0, [r7, #8]
 8012146:	f010 fd0f 	bl	8022b68 <free>

data[0]=data[1]= 0;
 801214a:	4b18      	ldr	r3, [pc, #96]	; (80121ac <LCD_ClrScrn+0x118>)
 801214c:	2200      	movs	r2, #0
 801214e:	805a      	strh	r2, [r3, #2]
 8012150:	4b16      	ldr	r3, [pc, #88]	; (80121ac <LCD_ClrScrn+0x118>)
 8012152:	885a      	ldrh	r2, [r3, #2]
 8012154:	4b15      	ldr	r3, [pc, #84]	; (80121ac <LCD_ClrScrn+0x118>)
 8012156:	801a      	strh	r2, [r3, #0]
data[2]= 319>>8;
 8012158:	4b14      	ldr	r3, [pc, #80]	; (80121ac <LCD_ClrScrn+0x118>)
 801215a:	2201      	movs	r2, #1
 801215c:	809a      	strh	r2, [r3, #4]
data[3]= 319 & 0xFF;
 801215e:	4b13      	ldr	r3, [pc, #76]	; (80121ac <LCD_ClrScrn+0x118>)
 8012160:	223f      	movs	r2, #63	; 0x3f
 8012162:	80da      	strh	r2, [r3, #6]
lcd_write_cmd_data(0x2A, 4, data);  //set x
 8012164:	4a11      	ldr	r2, [pc, #68]	; (80121ac <LCD_ClrScrn+0x118>)
 8012166:	2104      	movs	r1, #4
 8012168:	202a      	movs	r0, #42	; 0x2a
 801216a:	f7ff fe51 	bl	8011e10 <lcd_write_cmd_data>
data[0]=data[1]= 0;
 801216e:	4b0f      	ldr	r3, [pc, #60]	; (80121ac <LCD_ClrScrn+0x118>)
 8012170:	2200      	movs	r2, #0
 8012172:	805a      	strh	r2, [r3, #2]
 8012174:	4b0d      	ldr	r3, [pc, #52]	; (80121ac <LCD_ClrScrn+0x118>)
 8012176:	885a      	ldrh	r2, [r3, #2]
 8012178:	4b0c      	ldr	r3, [pc, #48]	; (80121ac <LCD_ClrScrn+0x118>)
 801217a:	801a      	strh	r2, [r3, #0]
data[2]= 479>>8;
 801217c:	4b0b      	ldr	r3, [pc, #44]	; (80121ac <LCD_ClrScrn+0x118>)
 801217e:	2201      	movs	r2, #1
 8012180:	809a      	strh	r2, [r3, #4]
data[3]= 479 & 0xFF;
 8012182:	4b0a      	ldr	r3, [pc, #40]	; (80121ac <LCD_ClrScrn+0x118>)
 8012184:	22df      	movs	r2, #223	; 0xdf
 8012186:	80da      	strh	r2, [r3, #6]
lcd_write_cmd_data(0x2B, 4, data);  //set y
 8012188:	4a08      	ldr	r2, [pc, #32]	; (80121ac <LCD_ClrScrn+0x118>)
 801218a:	2104      	movs	r1, #4
 801218c:	202b      	movs	r0, #43	; 0x2b
 801218e:	f7ff fe3f 	bl	8011e10 <lcd_write_cmd_data>

HAL_GPIO_WritePin( LcdCs_GPIO_Port, LcdCs_Pin, GPIO_PIN_SET);  //disable lcd controller
 8012192:	2201      	movs	r2, #1
 8012194:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8012198:	4803      	ldr	r0, [pc, #12]	; (80121a8 <LCD_ClrScrn+0x114>)
 801219a:	f007 fca5 	bl	8019ae8 <HAL_GPIO_WritePin>

}
 801219e:	bf00      	nop
 80121a0:	3710      	adds	r7, #16
 80121a2:	46bd      	mov	sp, r7
 80121a4:	bd80      	pop	{r7, pc}
 80121a6:	bf00      	nop
 80121a8:	40020800 	.word	0x40020800
 80121ac:	2000281c 	.word	0x2000281c

080121b0 <LCD_Set_Posi>:

void LCD_Set_Posi(short Sx, short Sy)
{
 80121b0:	b580      	push	{r7, lr}
 80121b2:	b082      	sub	sp, #8
 80121b4:	af00      	add	r7, sp, #0
 80121b6:	4603      	mov	r3, r0
 80121b8:	460a      	mov	r2, r1
 80121ba:	80fb      	strh	r3, [r7, #6]
 80121bc:	4613      	mov	r3, r2
 80121be:	80bb      	strh	r3, [r7, #4]
	HAL_GPIO_WritePin( LcdCs_GPIO_Port, LcdCs_Pin, GPIO_PIN_RESET);  //enable lcd controller
 80121c0:	2200      	movs	r2, #0
 80121c2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80121c6:	481f      	ldr	r0, [pc, #124]	; (8012244 <LCD_Set_Posi+0x94>)
 80121c8:	f007 fc8e 	bl	8019ae8 <HAL_GPIO_WritePin>

	data[0]= data[2]= Sx>>8;
 80121cc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80121d0:	121b      	asrs	r3, r3, #8
 80121d2:	b21b      	sxth	r3, r3
 80121d4:	b29a      	uxth	r2, r3
 80121d6:	4b1c      	ldr	r3, [pc, #112]	; (8012248 <LCD_Set_Posi+0x98>)
 80121d8:	809a      	strh	r2, [r3, #4]
 80121da:	4b1b      	ldr	r3, [pc, #108]	; (8012248 <LCD_Set_Posi+0x98>)
 80121dc:	889a      	ldrh	r2, [r3, #4]
 80121de:	4b1a      	ldr	r3, [pc, #104]	; (8012248 <LCD_Set_Posi+0x98>)
 80121e0:	801a      	strh	r2, [r3, #0]
	data[1]= data[3]= Sx & 0xFF;
 80121e2:	88fb      	ldrh	r3, [r7, #6]
 80121e4:	b2db      	uxtb	r3, r3
 80121e6:	b29a      	uxth	r2, r3
 80121e8:	4b17      	ldr	r3, [pc, #92]	; (8012248 <LCD_Set_Posi+0x98>)
 80121ea:	80da      	strh	r2, [r3, #6]
 80121ec:	4b16      	ldr	r3, [pc, #88]	; (8012248 <LCD_Set_Posi+0x98>)
 80121ee:	88da      	ldrh	r2, [r3, #6]
 80121f0:	4b15      	ldr	r3, [pc, #84]	; (8012248 <LCD_Set_Posi+0x98>)
 80121f2:	805a      	strh	r2, [r3, #2]
	lcd_write_cmd_data(0x2A, 4, data);  //set x
 80121f4:	4a14      	ldr	r2, [pc, #80]	; (8012248 <LCD_Set_Posi+0x98>)
 80121f6:	2104      	movs	r1, #4
 80121f8:	202a      	movs	r0, #42	; 0x2a
 80121fa:	f7ff fe09 	bl	8011e10 <lcd_write_cmd_data>
	data[0]= data[1]= Sy>>8;
 80121fe:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8012202:	121b      	asrs	r3, r3, #8
 8012204:	b21b      	sxth	r3, r3
 8012206:	b29a      	uxth	r2, r3
 8012208:	4b0f      	ldr	r3, [pc, #60]	; (8012248 <LCD_Set_Posi+0x98>)
 801220a:	805a      	strh	r2, [r3, #2]
 801220c:	4b0e      	ldr	r3, [pc, #56]	; (8012248 <LCD_Set_Posi+0x98>)
 801220e:	885a      	ldrh	r2, [r3, #2]
 8012210:	4b0d      	ldr	r3, [pc, #52]	; (8012248 <LCD_Set_Posi+0x98>)
 8012212:	801a      	strh	r2, [r3, #0]
	data[2]= data[3]= Sy & 0xFF;
 8012214:	88bb      	ldrh	r3, [r7, #4]
 8012216:	b2db      	uxtb	r3, r3
 8012218:	b29a      	uxth	r2, r3
 801221a:	4b0b      	ldr	r3, [pc, #44]	; (8012248 <LCD_Set_Posi+0x98>)
 801221c:	80da      	strh	r2, [r3, #6]
 801221e:	4b0a      	ldr	r3, [pc, #40]	; (8012248 <LCD_Set_Posi+0x98>)
 8012220:	88da      	ldrh	r2, [r3, #6]
 8012222:	4b09      	ldr	r3, [pc, #36]	; (8012248 <LCD_Set_Posi+0x98>)
 8012224:	809a      	strh	r2, [r3, #4]
	lcd_write_cmd_data(0x2B, 4, data);  //set y
 8012226:	4a08      	ldr	r2, [pc, #32]	; (8012248 <LCD_Set_Posi+0x98>)
 8012228:	2104      	movs	r1, #4
 801222a:	202b      	movs	r0, #43	; 0x2b
 801222c:	f7ff fdf0 	bl	8011e10 <lcd_write_cmd_data>

	HAL_GPIO_WritePin( LcdCs_GPIO_Port, LcdCs_Pin, GPIO_PIN_SET);    //disable lcd controller
 8012230:	2201      	movs	r2, #1
 8012232:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8012236:	4803      	ldr	r0, [pc, #12]	; (8012244 <LCD_Set_Posi+0x94>)
 8012238:	f007 fc56 	bl	8019ae8 <HAL_GPIO_WritePin>
}
 801223c:	bf00      	nop
 801223e:	3708      	adds	r7, #8
 8012240:	46bd      	mov	sp, r7
 8012242:	bd80      	pop	{r7, pc}
 8012244:	40020800 	.word	0x40020800
 8012248:	2000281c 	.word	0x2000281c

0801224c <LCD_Set_Pixel>:

void LCD_Set_Pixel(unsigned short Color)
{
 801224c:	b580      	push	{r7, lr}
 801224e:	b082      	sub	sp, #8
 8012250:	af00      	add	r7, sp, #0
 8012252:	4603      	mov	r3, r0
 8012254:	80fb      	strh	r3, [r7, #6]
	HAL_GPIO_WritePin( LcdCs_GPIO_Port, LcdCs_Pin, GPIO_PIN_RESET);  //enable lcd controller
 8012256:	2200      	movs	r2, #0
 8012258:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 801225c:	480d      	ldr	r0, [pc, #52]	; (8012294 <LCD_Set_Pixel+0x48>)
 801225e:	f007 fc43 	bl	8019ae8 <HAL_GPIO_WritePin>

	data[0]= Color>>8;
 8012262:	88fb      	ldrh	r3, [r7, #6]
 8012264:	0a1b      	lsrs	r3, r3, #8
 8012266:	b29a      	uxth	r2, r3
 8012268:	4b0b      	ldr	r3, [pc, #44]	; (8012298 <LCD_Set_Pixel+0x4c>)
 801226a:	801a      	strh	r2, [r3, #0]
	data[1]= Color & 0xFF;
 801226c:	88fb      	ldrh	r3, [r7, #6]
 801226e:	b2db      	uxtb	r3, r3
 8012270:	b29a      	uxth	r2, r3
 8012272:	4b09      	ldr	r3, [pc, #36]	; (8012298 <LCD_Set_Pixel+0x4c>)
 8012274:	805a      	strh	r2, [r3, #2]
	lcd_write_cmd_data(0x2C, 2, data);  //set pixel
 8012276:	4a08      	ldr	r2, [pc, #32]	; (8012298 <LCD_Set_Pixel+0x4c>)
 8012278:	2102      	movs	r1, #2
 801227a:	202c      	movs	r0, #44	; 0x2c
 801227c:	f7ff fdc8 	bl	8011e10 <lcd_write_cmd_data>
	HAL_GPIO_WritePin( LcdCs_GPIO_Port, LcdCs_Pin, GPIO_PIN_SET);    //disable lcd controller
 8012280:	2201      	movs	r2, #1
 8012282:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8012286:	4803      	ldr	r0, [pc, #12]	; (8012294 <LCD_Set_Pixel+0x48>)
 8012288:	f007 fc2e 	bl	8019ae8 <HAL_GPIO_WritePin>
}
 801228c:	bf00      	nop
 801228e:	3708      	adds	r7, #8
 8012290:	46bd      	mov	sp, r7
 8012292:	bd80      	pop	{r7, pc}
 8012294:	40020800 	.word	0x40020800
 8012298:	2000281c 	.word	0x2000281c

0801229c <LCD_Get_Pixel>:

unsigned short LCD_Get_Pixel(void)
{
 801229c:	b580      	push	{r7, lr}
 801229e:	b082      	sub	sp, #8
 80122a0:	af00      	add	r7, sp, #0
	short ret;
	unsigned short fred;

	HAL_GPIO_WritePin( LcdCs_GPIO_Port, LcdCs_Pin, GPIO_PIN_RESET);  //enable lcd controller
 80122a2:	2200      	movs	r2, #0
 80122a4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80122a8:	4814      	ldr	r0, [pc, #80]	; (80122fc <LCD_Get_Pixel+0x60>)
 80122aa:	f007 fc1d 	bl	8019ae8 <HAL_GPIO_WritePin>
	lcd_write_cmd_data(0x2E, 0, data);  //read data
 80122ae:	4a14      	ldr	r2, [pc, #80]	; (8012300 <LCD_Get_Pixel+0x64>)
 80122b0:	2100      	movs	r1, #0
 80122b2:	202e      	movs	r0, #46	; 0x2e
 80122b4:	f7ff fdac 	bl	8011e10 <lcd_write_cmd_data>

	ret = HAL_SPI_Receive(&hspi3, (unsigned char *)data, 2, 1);
 80122b8:	2301      	movs	r3, #1
 80122ba:	2202      	movs	r2, #2
 80122bc:	4910      	ldr	r1, [pc, #64]	; (8012300 <LCD_Get_Pixel+0x64>)
 80122be:	4811      	ldr	r0, [pc, #68]	; (8012304 <LCD_Get_Pixel+0x68>)
 80122c0:	f00a f853 	bl	801c36a <HAL_SPI_Receive>
 80122c4:	4603      	mov	r3, r0
 80122c6:	80fb      	strh	r3, [r7, #6]

	HAL_GPIO_WritePin( LcdCs_GPIO_Port, LcdCs_Pin, GPIO_PIN_SET);    //disable lcd controller
 80122c8:	2201      	movs	r2, #1
 80122ca:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80122ce:	480b      	ldr	r0, [pc, #44]	; (80122fc <LCD_Get_Pixel+0x60>)
 80122d0:	f007 fc0a 	bl	8019ae8 <HAL_GPIO_WritePin>

	if( ret == HAL_OK )
 80122d4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80122d8:	2b00      	cmp	r3, #0
 80122da:	d10a      	bne.n	80122f2 <LCD_Get_Pixel+0x56>
		{
		fred =data[0]<<8;
 80122dc:	4b08      	ldr	r3, [pc, #32]	; (8012300 <LCD_Get_Pixel+0x64>)
 80122de:	881b      	ldrh	r3, [r3, #0]
 80122e0:	021b      	lsls	r3, r3, #8
 80122e2:	80bb      	strh	r3, [r7, #4]
		fred |= data[1];
 80122e4:	4b06      	ldr	r3, [pc, #24]	; (8012300 <LCD_Get_Pixel+0x64>)
 80122e6:	885a      	ldrh	r2, [r3, #2]
 80122e8:	88bb      	ldrh	r3, [r7, #4]
 80122ea:	4313      	orrs	r3, r2
 80122ec:	80bb      	strh	r3, [r7, #4]
		return (fred);
 80122ee:	88bb      	ldrh	r3, [r7, #4]
 80122f0:	e000      	b.n	80122f4 <LCD_Get_Pixel+0x58>
		}
	else
		return 0;
 80122f2:	2300      	movs	r3, #0

}
 80122f4:	4618      	mov	r0, r3
 80122f6:	3708      	adds	r7, #8
 80122f8:	46bd      	mov	sp, r7
 80122fa:	bd80      	pop	{r7, pc}
 80122fc:	40020800 	.word	0x40020800
 8012300:	2000281c 	.word	0x2000281c
 8012304:	200069c0 	.word	0x200069c0

08012308 <Draw_4Point>:

/*******************************************************************************
Draw_4Point:
*******************************************************************************/
void Draw_4Point(short x, short y, char Str_Cnt, char High)
{
 8012308:	b590      	push	{r4, r7, lr}
 801230a:	b083      	sub	sp, #12
 801230c:	af00      	add	r7, sp, #0
 801230e:	4604      	mov	r4, r0
 8012310:	4608      	mov	r0, r1
 8012312:	4611      	mov	r1, r2
 8012314:	461a      	mov	r2, r3
 8012316:	4623      	mov	r3, r4
 8012318:	80fb      	strh	r3, [r7, #6]
 801231a:	4603      	mov	r3, r0
 801231c:	80bb      	strh	r3, [r7, #4]
 801231e:	460b      	mov	r3, r1
 8012320:	70fb      	strb	r3, [r7, #3]
 8012322:	4613      	mov	r3, r2
 8012324:	70bb      	strb	r3, [r7, #2]
  LCD_Set_Posi(x,y);
 8012326:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 801232a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801232e:	4611      	mov	r1, r2
 8012330:	4618      	mov	r0, r3
 8012332:	f7ff ff3d 	bl	80121b0 <LCD_Set_Posi>
  LCD_Set_Pixel(DAR);
 8012336:	f643 10e7 	movw	r0, #14823	; 0x39e7
 801233a:	f7ff ff87 	bl	801224c <LCD_Set_Pixel>
  LCD_Set_Posi(x,y+High-1);
 801233e:	78bb      	ldrb	r3, [r7, #2]
 8012340:	b29a      	uxth	r2, r3
 8012342:	88bb      	ldrh	r3, [r7, #4]
 8012344:	4413      	add	r3, r2
 8012346:	b29b      	uxth	r3, r3
 8012348:	3b01      	subs	r3, #1
 801234a:	b29b      	uxth	r3, r3
 801234c:	b21a      	sxth	r2, r3
 801234e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8012352:	4611      	mov	r1, r2
 8012354:	4618      	mov	r0, r3
 8012356:	f7ff ff2b 	bl	80121b0 <LCD_Set_Posi>
  LCD_Set_Pixel(DAR);
 801235a:	f643 10e7 	movw	r0, #14823	; 0x39e7
 801235e:	f7ff ff75 	bl	801224c <LCD_Set_Pixel>
  LCD_Set_Posi(x+Str_Cnt*((High>10)? 8:6),y);
 8012362:	78fb      	ldrb	r3, [r7, #3]
 8012364:	b29b      	uxth	r3, r3
 8012366:	78ba      	ldrb	r2, [r7, #2]
 8012368:	2a0a      	cmp	r2, #10
 801236a:	d901      	bls.n	8012370 <Draw_4Point+0x68>
 801236c:	2208      	movs	r2, #8
 801236e:	e000      	b.n	8012372 <Draw_4Point+0x6a>
 8012370:	2206      	movs	r2, #6
 8012372:	fb12 f303 	smulbb	r3, r2, r3
 8012376:	b29a      	uxth	r2, r3
 8012378:	88fb      	ldrh	r3, [r7, #6]
 801237a:	4413      	add	r3, r2
 801237c:	b29b      	uxth	r3, r3
 801237e:	b21b      	sxth	r3, r3
 8012380:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8012384:	4611      	mov	r1, r2
 8012386:	4618      	mov	r0, r3
 8012388:	f7ff ff12 	bl	80121b0 <LCD_Set_Posi>
  LCD_Set_Pixel(DAR);
 801238c:	f643 10e7 	movw	r0, #14823	; 0x39e7
 8012390:	f7ff ff5c 	bl	801224c <LCD_Set_Pixel>
  LCD_Set_Posi(x+Str_Cnt*((High>10)? 8:6),y+High-1);
 8012394:	78fb      	ldrb	r3, [r7, #3]
 8012396:	b29b      	uxth	r3, r3
 8012398:	78ba      	ldrb	r2, [r7, #2]
 801239a:	2a0a      	cmp	r2, #10
 801239c:	d901      	bls.n	80123a2 <Draw_4Point+0x9a>
 801239e:	2208      	movs	r2, #8
 80123a0:	e000      	b.n	80123a4 <Draw_4Point+0x9c>
 80123a2:	2206      	movs	r2, #6
 80123a4:	fb12 f303 	smulbb	r3, r2, r3
 80123a8:	b29a      	uxth	r2, r3
 80123aa:	88fb      	ldrh	r3, [r7, #6]
 80123ac:	4413      	add	r3, r2
 80123ae:	b29b      	uxth	r3, r3
 80123b0:	b218      	sxth	r0, r3
 80123b2:	78bb      	ldrb	r3, [r7, #2]
 80123b4:	b29a      	uxth	r2, r3
 80123b6:	88bb      	ldrh	r3, [r7, #4]
 80123b8:	4413      	add	r3, r2
 80123ba:	b29b      	uxth	r3, r3
 80123bc:	3b01      	subs	r3, #1
 80123be:	b29b      	uxth	r3, r3
 80123c0:	b21b      	sxth	r3, r3
 80123c2:	4619      	mov	r1, r3
 80123c4:	f7ff fef4 	bl	80121b0 <LCD_Set_Posi>
  LCD_Set_Pixel(DAR);
 80123c8:	f643 10e7 	movw	r0, #14823	; 0x39e7
 80123cc:	f7ff ff3e 	bl	801224c <LCD_Set_Pixel>
}
 80123d0:	bf00      	nop
 80123d2:	370c      	adds	r7, #12
 80123d4:	46bd      	mov	sp, r7
 80123d6:	bd90      	pop	{r4, r7, pc}

080123d8 <Update_Title>:

/*******************************************************************************
 Update_Item:
*******************************************************************************/
void Update_Title(void)
{
 80123d8:	b580      	push	{r7, lr}
 80123da:	b082      	sub	sp, #8
 80123dc:	af00      	add	r7, sp, #0
  short i;

  for(i=0; i<8; i++)
 80123de:	2300      	movs	r3, #0
 80123e0:	80fb      	strh	r3, [r7, #6]
 80123e2:	e03b      	b.n	801245c <Update_Title+0x84>
  {
    SetColor(GRY, TCOLOR[i]);
 80123e4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80123e8:	4a21      	ldr	r2, [pc, #132]	; (8012470 <Update_Title+0x98>)
 80123ea:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80123ee:	4619      	mov	r1, r3
 80123f0:	f643 10e7 	movw	r0, #14823	; 0x39e7
 80123f4:	f7fb fc2c 	bl	800dc50 <SetColor>
    DispStr8x14(T_X-2, TITLE_Y[i], (Current == i)? INV : PRN, (char*)TSTR[i]);
 80123f8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80123fc:	4a1d      	ldr	r2, [pc, #116]	; (8012474 <Update_Title+0x9c>)
 80123fe:	5cd3      	ldrb	r3, [r2, r3]
 8012400:	b219      	sxth	r1, r3
 8012402:	4b1d      	ldr	r3, [pc, #116]	; (8012478 <Update_Title+0xa0>)
 8012404:	f9b3 3000 	ldrsh.w	r3, [r3]
 8012408:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 801240c:	429a      	cmp	r2, r3
 801240e:	bf0c      	ite	eq
 8012410:	2301      	moveq	r3, #1
 8012412:	2300      	movne	r3, #0
 8012414:	b2db      	uxtb	r3, r3
 8012416:	4618      	mov	r0, r3
 8012418:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801241c:	009b      	lsls	r3, r3, #2
 801241e:	4a17      	ldr	r2, [pc, #92]	; (801247c <Update_Title+0xa4>)
 8012420:	4413      	add	r3, r2
 8012422:	4602      	mov	r2, r0
 8012424:	f240 102f 	movw	r0, #303	; 0x12f
 8012428:	f7fb fbba 	bl	800dba0 <DispStr8x14>
    if(Current == i)
 801242c:	4b12      	ldr	r3, [pc, #72]	; (8012478 <Update_Title+0xa0>)
 801242e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8012432:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8012436:	429a      	cmp	r2, r3
 8012438:	d10a      	bne.n	8012450 <Update_Title+0x78>
    {
        Draw_4Point(T_X-2, TITLE_Y[i], 2, Font8x14_H);
 801243a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801243e:	4a0d      	ldr	r2, [pc, #52]	; (8012474 <Update_Title+0x9c>)
 8012440:	5cd3      	ldrb	r3, [r2, r3]
 8012442:	b219      	sxth	r1, r3
 8012444:	230e      	movs	r3, #14
 8012446:	2202      	movs	r2, #2
 8012448:	f240 102f 	movw	r0, #303	; 0x12f
 801244c:	f7ff ff5c 	bl	8012308 <Draw_4Point>
  for(i=0; i<8; i++)
 8012450:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8012454:	b29b      	uxth	r3, r3
 8012456:	3301      	adds	r3, #1
 8012458:	b29b      	uxth	r3, r3
 801245a:	80fb      	strh	r3, [r7, #6]
 801245c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8012460:	2b07      	cmp	r3, #7
 8012462:	ddbf      	ble.n	80123e4 <Update_Title+0xc>
    }
  }
}
 8012464:	bf00      	nop
 8012466:	bf00      	nop
 8012468:	3708      	adds	r7, #8
 801246a:	46bd      	mov	sp, r7
 801246c:	bd80      	pop	{r7, pc}
 801246e:	bf00      	nop
 8012470:	08001f08 	.word	0x08001f08
 8012474:	08001f38 	.word	0x08001f38
 8012478:	2000079e 	.word	0x2000079e
 801247c:	08001f18 	.word	0x08001f18

08012480 <Update_Blink>:

/*******************************************************************************
 Update_Blink:
*******************************************************************************/
void Update_Blink(void)
{
 8012480:	b590      	push	{r4, r7, lr}
 8012482:	b087      	sub	sp, #28
 8012484:	af02      	add	r7, sp, #8
  char* ptr;
  long Tmp;
  unsigned short i, Range = List[Y_RANGES].Val + 10*List[PROBEATT].Val;
 8012486:	4bbd      	ldr	r3, [pc, #756]	; (801277c <Update_Blink+0x2fc>)
 8012488:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801248c:	b29a      	uxth	r2, r3
 801248e:	4bbb      	ldr	r3, [pc, #748]	; (801277c <Update_Blink+0x2fc>)
 8012490:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8012494:	b29b      	uxth	r3, r3
 8012496:	4619      	mov	r1, r3
 8012498:	0089      	lsls	r1, r1, #2
 801249a:	440b      	add	r3, r1
 801249c:	005b      	lsls	r3, r3, #1
 801249e:	b29b      	uxth	r3, r3
 80124a0:	4413      	add	r3, r2
 80124a2:	81fb      	strh	r3, [r7, #14]

  i = MenuNow[Current];
 80124a4:	4bb6      	ldr	r3, [pc, #728]	; (8012780 <Update_Blink+0x300>)
 80124a6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80124aa:	461a      	mov	r2, r3
 80124ac:	4bb5      	ldr	r3, [pc, #724]	; (8012784 <Update_Blink+0x304>)
 80124ae:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 80124b2:	81bb      	strh	r3, [r7, #12]
  ptr = (char*)(List[i].PTR +(List[i].Val)*6);
 80124b4:	89bb      	ldrh	r3, [r7, #12]
 80124b6:	4ab1      	ldr	r2, [pc, #708]	; (801277c <Update_Blink+0x2fc>)
 80124b8:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 80124bc:	89bb      	ldrh	r3, [r7, #12]
 80124be:	49af      	ldr	r1, [pc, #700]	; (801277c <Update_Blink+0x2fc>)
 80124c0:	00db      	lsls	r3, r3, #3
 80124c2:	440b      	add	r3, r1
 80124c4:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80124c8:	4619      	mov	r1, r3
 80124ca:	460b      	mov	r3, r1
 80124cc:	005b      	lsls	r3, r3, #1
 80124ce:	440b      	add	r3, r1
 80124d0:	005b      	lsls	r3, r3, #1
 80124d2:	4413      	add	r3, r2
 80124d4:	60bb      	str	r3, [r7, #8]
  if(Blink == BLINK)
 80124d6:	4bac      	ldr	r3, [pc, #688]	; (8012788 <Update_Blink+0x308>)
 80124d8:	781b      	ldrb	r3, [r3, #0]
 80124da:	b2db      	uxtb	r3, r3
 80124dc:	2b01      	cmp	r3, #1
 80124de:	f040 86ca 	bne.w	8013276 <Update_Blink+0xdf6>
  {
    Blink = 0;
 80124e2:	4ba9      	ldr	r3, [pc, #676]	; (8012788 <Update_Blink+0x308>)
 80124e4:	2200      	movs	r2, #0
 80124e6:	701a      	strb	r2, [r3, #0]
    List[MenuNow[ME]].Flg |= UPD; //
 80124e8:	4ba6      	ldr	r3, [pc, #664]	; (8012784 <Update_Blink+0x304>)
 80124ea:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 80124ee:	4aa3      	ldr	r2, [pc, #652]	; (801277c <Update_Blink+0x2fc>)
 80124f0:	00db      	lsls	r3, r3, #3
 80124f2:	4413      	add	r3, r2
 80124f4:	799b      	ldrb	r3, [r3, #6]
 80124f6:	4aa3      	ldr	r2, [pc, #652]	; (8012784 <Update_Blink+0x304>)
 80124f8:	f9b2 2006 	ldrsh.w	r2, [r2, #6]
 80124fc:	4610      	mov	r0, r2
 80124fe:	f043 0320 	orr.w	r3, r3, #32
 8012502:	b2d9      	uxtb	r1, r3
 8012504:	4a9d      	ldr	r2, [pc, #628]	; (801277c <Update_Blink+0x2fc>)
 8012506:	00c3      	lsls	r3, r0, #3
 8012508:	4413      	add	r3, r2
 801250a:	460a      	mov	r2, r1
 801250c:	719a      	strb	r2, [r3, #6]
    switch(i)
 801250e:	89bb      	ldrh	r3, [r7, #12]
 8012510:	2b29      	cmp	r3, #41	; 0x29
 8012512:	f200 86aa 	bhi.w	801326a <Update_Blink+0xdea>
 8012516:	a201      	add	r2, pc, #4	; (adr r2, 801251c <Update_Blink+0x9c>)
 8012518:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801251c:	08012687 	.word	0x08012687
 8012520:	08012687 	.word	0x08012687
 8012524:	08012687 	.word	0x08012687
 8012528:	0801271b 	.word	0x0801271b
 801252c:	0801274d 	.word	0x0801274d
 8012530:	0801274d 	.word	0x0801274d
 8012534:	08012883 	.word	0x08012883
 8012538:	080128e1 	.word	0x080128e1
 801253c:	08012939 	.word	0x08012939
 8012540:	0801296b 	.word	0x0801296b
 8012544:	080129d7 	.word	0x080129d7
 8012548:	080129d7 	.word	0x080129d7
 801254c:	08012b39 	.word	0x08012b39
 8012550:	08012b93 	.word	0x08012b93
 8012554:	08012bf1 	.word	0x08012bf1
 8012558:	08012cc1 	.word	0x08012cc1
 801255c:	08012ceb 	.word	0x08012ceb
 8012560:	08012bf1 	.word	0x08012bf1
 8012564:	08012d19 	.word	0x08012d19
 8012568:	0801326b 	.word	0x0801326b
 801256c:	0801326b 	.word	0x0801326b
 8012570:	0801326b 	.word	0x0801326b
 8012574:	0801326b 	.word	0x0801326b
 8012578:	0801326b 	.word	0x0801326b
 801257c:	0801326b 	.word	0x0801326b
 8012580:	0801326b 	.word	0x0801326b
 8012584:	08012d91 	.word	0x08012d91
 8012588:	08012e0d 	.word	0x08012e0d
 801258c:	08012e3b 	.word	0x08012e3b
 8012590:	080125c5 	.word	0x080125c5
 8012594:	080125c5 	.word	0x080125c5
 8012598:	080125c5 	.word	0x080125c5
 801259c:	080125c5 	.word	0x080125c5
 80125a0:	080125c5 	.word	0x080125c5
 80125a4:	080125c5 	.word	0x080125c5
 80125a8:	080125c5 	.word	0x080125c5
 80125ac:	08012eb7 	.word	0x08012eb7
 80125b0:	08012f51 	.word	0x08012f51
 80125b4:	08013015 	.word	0x08013015
 80125b8:	080130c3 	.word	0x080130c3
 80125bc:	0801315d 	.word	0x0801315d
 80125c0:	080131cb 	.word	0x080131cb
    case SAVE_BUF:
    case SAVE_CSV:
    case SAVE_SVG:
    case LOAD_DAT:
    case LOAD_BUF:
      SetColor(GRY, TCOLOR[FN]);
 80125c4:	f64f 4310 	movw	r3, #64528	; 0xfc10
 80125c8:	4619      	mov	r1, r3
 80125ca:	f643 10e7 	movw	r0, #14823	; 0x39e7
 80125ce:	f7fb fb3f 	bl	800dc50 <SetColor>
      u8ToDec3(NumStr, List[i].Val);
 80125d2:	89bb      	ldrh	r3, [r7, #12]
 80125d4:	4a69      	ldr	r2, [pc, #420]	; (801277c <Update_Blink+0x2fc>)
 80125d6:	00db      	lsls	r3, r3, #3
 80125d8:	4413      	add	r3, r2
 80125da:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80125de:	b2db      	uxtb	r3, r3
 80125e0:	4619      	mov	r1, r3
 80125e2:	486a      	ldr	r0, [pc, #424]	; (801278c <Update_Blink+0x30c>)
 80125e4:	f7ff f9bc 	bl	8011960 <u8ToDec3>
      Draw_Circle_D(Twink, S_X[i]-3, LABLE_Y, 11, 0, 6*11);
 80125e8:	4b69      	ldr	r3, [pc, #420]	; (8012790 <Update_Blink+0x310>)
 80125ea:	781b      	ldrb	r3, [r3, #0]
 80125ec:	b2d8      	uxtb	r0, r3
 80125ee:	89bb      	ldrh	r3, [r7, #12]
 80125f0:	4a68      	ldr	r2, [pc, #416]	; (8012794 <Update_Blink+0x314>)
 80125f2:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 80125f6:	b29b      	uxth	r3, r3
 80125f8:	3b03      	subs	r3, #3
 80125fa:	b29b      	uxth	r3, r3
 80125fc:	b219      	sxth	r1, r3
 80125fe:	2342      	movs	r3, #66	; 0x42
 8012600:	9301      	str	r3, [sp, #4]
 8012602:	2300      	movs	r3, #0
 8012604:	9300      	str	r3, [sp, #0]
 8012606:	230b      	movs	r3, #11
 8012608:	2203      	movs	r2, #3
 801260a:	f7fb fc0f 	bl	800de2c <Draw_Circle_D>
      DispStr(S_X[i],    LABLE_Y, Twink, ((i > SAVE_SVG)? "Load" : "Save"));//0513
 801260e:	89bb      	ldrh	r3, [r7, #12]
 8012610:	4a60      	ldr	r2, [pc, #384]	; (8012794 <Update_Blink+0x314>)
 8012612:	f932 0013 	ldrsh.w	r0, [r2, r3, lsl #1]
 8012616:	4b5e      	ldr	r3, [pc, #376]	; (8012790 <Update_Blink+0x310>)
 8012618:	781b      	ldrb	r3, [r3, #0]
 801261a:	b2da      	uxtb	r2, r3
 801261c:	89bb      	ldrh	r3, [r7, #12]
 801261e:	2b21      	cmp	r3, #33	; 0x21
 8012620:	d901      	bls.n	8012626 <Update_Blink+0x1a6>
 8012622:	4b5d      	ldr	r3, [pc, #372]	; (8012798 <Update_Blink+0x318>)
 8012624:	e000      	b.n	8012628 <Update_Blink+0x1a8>
 8012626:	4b5d      	ldr	r3, [pc, #372]	; (801279c <Update_Blink+0x31c>)
 8012628:	2103      	movs	r1, #3
 801262a:	f7fb fb29 	bl	800dc80 <DispStr>
      DispStr(S_X[i]+24, LABLE_Y, Twink, (char *)NumStr);
 801262e:	89bb      	ldrh	r3, [r7, #12]
 8012630:	4a58      	ldr	r2, [pc, #352]	; (8012794 <Update_Blink+0x314>)
 8012632:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8012636:	b29b      	uxth	r3, r3
 8012638:	3318      	adds	r3, #24
 801263a:	b29b      	uxth	r3, r3
 801263c:	b218      	sxth	r0, r3
 801263e:	4b54      	ldr	r3, [pc, #336]	; (8012790 <Update_Blink+0x310>)
 8012640:	781b      	ldrb	r3, [r3, #0]
 8012642:	b2da      	uxtb	r2, r3
 8012644:	4b51      	ldr	r3, [pc, #324]	; (801278c <Update_Blink+0x30c>)
 8012646:	2103      	movs	r1, #3
 8012648:	f7fb fb1a 	bl	800dc80 <DispStr>
      DispStr(S_X[i]+42, LABLE_Y, Twink, (List[i].PTR +(i - SAVE_BMP)*6));
 801264c:	89bb      	ldrh	r3, [r7, #12]
 801264e:	4a51      	ldr	r2, [pc, #324]	; (8012794 <Update_Blink+0x314>)
 8012650:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8012654:	b29b      	uxth	r3, r3
 8012656:	332a      	adds	r3, #42	; 0x2a
 8012658:	b29b      	uxth	r3, r3
 801265a:	b218      	sxth	r0, r3
 801265c:	4b4c      	ldr	r3, [pc, #304]	; (8012790 <Update_Blink+0x310>)
 801265e:	781b      	ldrb	r3, [r3, #0]
 8012660:	b2dc      	uxtb	r4, r3
 8012662:	89bb      	ldrh	r3, [r7, #12]
 8012664:	4a45      	ldr	r2, [pc, #276]	; (801277c <Update_Blink+0x2fc>)
 8012666:	f852 1033 	ldr.w	r1, [r2, r3, lsl #3]
 801266a:	89bb      	ldrh	r3, [r7, #12]
 801266c:	f1a3 021d 	sub.w	r2, r3, #29
 8012670:	4613      	mov	r3, r2
 8012672:	005b      	lsls	r3, r3, #1
 8012674:	4413      	add	r3, r2
 8012676:	005b      	lsls	r3, r3, #1
 8012678:	440b      	add	r3, r1
 801267a:	4622      	mov	r2, r4
 801267c:	2103      	movs	r1, #3
 801267e:	f7fb faff 	bl	800dc80 <DispStr>
      break;
 8012682:	f000 bdf2 	b.w	801326a <Update_Blink+0xdea>

    case Y_RANGES:
    case COUPLING:
    case PROBEATT:
      SetColor(GRY, TCOLOR[YN]);
 8012686:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 801268a:	4619      	mov	r1, r3
 801268c:	f643 10e7 	movw	r0, #14823	; 0x39e7
 8012690:	f7fb fade 	bl	800dc50 <SetColor>
      Draw_Circle_D(Twink, S_X[Y_RANGES]-3, TITLE_Y_POS, 11, 0, 6*7);
 8012694:	4b3e      	ldr	r3, [pc, #248]	; (8012790 <Update_Blink+0x310>)
 8012696:	781b      	ldrb	r3, [r3, #0]
 8012698:	b2d8      	uxtb	r0, r3
 801269a:	232f      	movs	r3, #47	; 0x2f
 801269c:	b29b      	uxth	r3, r3
 801269e:	3b03      	subs	r3, #3
 80126a0:	b29b      	uxth	r3, r3
 80126a2:	b219      	sxth	r1, r3
 80126a4:	232a      	movs	r3, #42	; 0x2a
 80126a6:	9301      	str	r3, [sp, #4]
 80126a8:	2300      	movs	r3, #0
 80126aa:	9300      	str	r3, [sp, #0]
 80126ac:	230b      	movs	r3, #11
 80126ae:	22e1      	movs	r2, #225	; 0xe1
 80126b0:	f7fb fbbc 	bl	800de2c <Draw_Circle_D>
      DispStr(S_X[Y_RANGES], TITLE_Y_POS, Twink, (List[Y_RANGES].PTR +(Range)*6));
 80126b4:	242f      	movs	r4, #47	; 0x2f
 80126b6:	4b36      	ldr	r3, [pc, #216]	; (8012790 <Update_Blink+0x310>)
 80126b8:	781b      	ldrb	r3, [r3, #0]
 80126ba:	b2d8      	uxtb	r0, r3
 80126bc:	4b2f      	ldr	r3, [pc, #188]	; (801277c <Update_Blink+0x2fc>)
 80126be:	6819      	ldr	r1, [r3, #0]
 80126c0:	89fa      	ldrh	r2, [r7, #14]
 80126c2:	4613      	mov	r3, r2
 80126c4:	005b      	lsls	r3, r3, #1
 80126c6:	4413      	add	r3, r2
 80126c8:	005b      	lsls	r3, r3, #1
 80126ca:	440b      	add	r3, r1
 80126cc:	4602      	mov	r2, r0
 80126ce:	21e1      	movs	r1, #225	; 0xe1
 80126d0:	4620      	mov	r0, r4
 80126d2:	f7fb fad5 	bl	800dc80 <DispStr>
      DispStr(S_X[COUPLING], TITLE_Y_POS, Twink, (List[COUPLING].PTR +(List[COUPLING].Val)*6));
 80126d6:	2047      	movs	r0, #71	; 0x47
 80126d8:	4b2d      	ldr	r3, [pc, #180]	; (8012790 <Update_Blink+0x310>)
 80126da:	781b      	ldrb	r3, [r3, #0]
 80126dc:	b2d9      	uxtb	r1, r3
 80126de:	4b27      	ldr	r3, [pc, #156]	; (801277c <Update_Blink+0x2fc>)
 80126e0:	689a      	ldr	r2, [r3, #8]
 80126e2:	4b26      	ldr	r3, [pc, #152]	; (801277c <Update_Blink+0x2fc>)
 80126e4:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 80126e8:	461c      	mov	r4, r3
 80126ea:	4623      	mov	r3, r4
 80126ec:	005b      	lsls	r3, r3, #1
 80126ee:	4423      	add	r3, r4
 80126f0:	005b      	lsls	r3, r3, #1
 80126f2:	4413      	add	r3, r2
 80126f4:	460a      	mov	r2, r1
 80126f6:	21e1      	movs	r1, #225	; 0xe1
 80126f8:	f7fb fac2 	bl	800dc80 <DispStr>
      DispStr10x14(S_X[PROBEATT], TITLE_Y_POS, PRN+SYMB,(List[PROBEATT].Val?("A"):("B")));
 80126fc:	2020      	movs	r0, #32
 80126fe:	4b1f      	ldr	r3, [pc, #124]	; (801277c <Update_Blink+0x2fc>)
 8012700:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8012704:	2b00      	cmp	r3, #0
 8012706:	d001      	beq.n	801270c <Update_Blink+0x28c>
 8012708:	4b25      	ldr	r3, [pc, #148]	; (80127a0 <Update_Blink+0x320>)
 801270a:	e000      	b.n	801270e <Update_Blink+0x28e>
 801270c:	4b25      	ldr	r3, [pc, #148]	; (80127a4 <Update_Blink+0x324>)
 801270e:	2210      	movs	r2, #16
 8012710:	21e1      	movs	r1, #225	; 0xe1
 8012712:	f7fb fd1d 	bl	800e150 <DispStr10x14>
      break;
 8012716:	f000 bda8 	b.w	801326a <Update_Blink+0xdea>

    case V0_POSI:
      if(Twink) ParamTab[P1F] |=  D_HID;
 801271a:	4b1d      	ldr	r3, [pc, #116]	; (8012790 <Update_Blink+0x310>)
 801271c:	781b      	ldrb	r3, [r3, #0]
 801271e:	b2db      	uxtb	r3, r3
 8012720:	2b00      	cmp	r3, #0
 8012722:	d009      	beq.n	8012738 <Update_Blink+0x2b8>
 8012724:	4b20      	ldr	r3, [pc, #128]	; (80127a8 <Update_Blink+0x328>)
 8012726:	f9b3 3000 	ldrsh.w	r3, [r3]
 801272a:	f043 0301 	orr.w	r3, r3, #1
 801272e:	b21a      	sxth	r2, r3
 8012730:	4b1d      	ldr	r3, [pc, #116]	; (80127a8 <Update_Blink+0x328>)
 8012732:	801a      	strh	r2, [r3, #0]
      else      ParamTab[P1F] &= ~D_HID;
      break;
 8012734:	f000 bd99 	b.w	801326a <Update_Blink+0xdea>
      else      ParamTab[P1F] &= ~D_HID;
 8012738:	4b1b      	ldr	r3, [pc, #108]	; (80127a8 <Update_Blink+0x328>)
 801273a:	f9b3 3000 	ldrsh.w	r3, [r3]
 801273e:	f023 0301 	bic.w	r3, r3, #1
 8012742:	b21a      	sxth	r2, r3
 8012744:	4b18      	ldr	r3, [pc, #96]	; (80127a8 <Update_Blink+0x328>)
 8012746:	801a      	strh	r2, [r3, #0]
      break;
 8012748:	f000 bd8f 	b.w	801326a <Update_Blink+0xdea>

    case V1_POSI:
    case V2_POSI:
      Tmp = (i == V1_POSI)? V1F : V2F;
 801274c:	89bb      	ldrh	r3, [r7, #12]
 801274e:	2b04      	cmp	r3, #4
 8012750:	d101      	bne.n	8012756 <Update_Blink+0x2d6>
 8012752:	2305      	movs	r3, #5
 8012754:	e000      	b.n	8012758 <Update_Blink+0x2d8>
 8012756:	2306      	movs	r3, #6
 8012758:	607b      	str	r3, [r7, #4]
      if(Twink) ParamTab[Tmp] |=  D_HID;
 801275a:	4b0d      	ldr	r3, [pc, #52]	; (8012790 <Update_Blink+0x310>)
 801275c:	781b      	ldrb	r3, [r3, #0]
 801275e:	b2db      	uxtb	r3, r3
 8012760:	2b00      	cmp	r3, #0
 8012762:	d023      	beq.n	80127ac <Update_Blink+0x32c>
 8012764:	4a10      	ldr	r2, [pc, #64]	; (80127a8 <Update_Blink+0x328>)
 8012766:	687b      	ldr	r3, [r7, #4]
 8012768:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 801276c:	f043 0301 	orr.w	r3, r3, #1
 8012770:	b219      	sxth	r1, r3
 8012772:	4a0d      	ldr	r2, [pc, #52]	; (80127a8 <Update_Blink+0x328>)
 8012774:	687b      	ldr	r3, [r7, #4]
 8012776:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 801277a:	e022      	b.n	80127c2 <Update_Blink+0x342>
 801277c:	20000298 	.word	0x20000298
 8012780:	2000079e 	.word	0x2000079e
 8012784:	20000538 	.word	0x20000538
 8012788:	20000a31 	.word	0x20000a31
 801278c:	2000283c 	.word	0x2000283c
 8012790:	2000077c 	.word	0x2000077c
 8012794:	0800215c 	.word	0x0800215c
 8012798:	08000948 	.word	0x08000948
 801279c:	08000950 	.word	0x08000950
 80127a0:	08000958 	.word	0x08000958
 80127a4:	0800095c 	.word	0x0800095c
 80127a8:	20000140 	.word	0x20000140
      else      ParamTab[Tmp] &= ~D_HID;
 80127ac:	4ab1      	ldr	r2, [pc, #708]	; (8012a74 <Update_Blink+0x5f4>)
 80127ae:	687b      	ldr	r3, [r7, #4]
 80127b0:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 80127b4:	f023 0301 	bic.w	r3, r3, #1
 80127b8:	b219      	sxth	r1, r3
 80127ba:	4aae      	ldr	r2, [pc, #696]	; (8012a74 <Update_Blink+0x5f4>)
 80127bc:	687b      	ldr	r3, [r7, #4]
 80127be:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
      Tmp  =(ParamTab[V1x2]- ParamTab[V2x2])/2;         // V2 - V1 ��ֵ
 80127c2:	4bac      	ldr	r3, [pc, #688]	; (8012a74 <Update_Blink+0x5f4>)
 80127c4:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 80127c8:	461a      	mov	r2, r3
 80127ca:	4baa      	ldr	r3, [pc, #680]	; (8012a74 <Update_Blink+0x5f4>)
 80127cc:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 80127d0:	1ad3      	subs	r3, r2, r3
 80127d2:	0fda      	lsrs	r2, r3, #31
 80127d4:	4413      	add	r3, r2
 80127d6:	105b      	asrs	r3, r3, #1
 80127d8:	607b      	str	r3, [r7, #4]
      Tmp *= X_SCALE[Range]* Exp(V_SCALE[Range]);
 80127da:	89fb      	ldrh	r3, [r7, #14]
 80127dc:	4aa6      	ldr	r2, [pc, #664]	; (8012a78 <Update_Blink+0x5f8>)
 80127de:	5cd3      	ldrb	r3, [r2, r3]
 80127e0:	461c      	mov	r4, r3
 80127e2:	89fb      	ldrh	r3, [r7, #14]
 80127e4:	4aa5      	ldr	r2, [pc, #660]	; (8012a7c <Update_Blink+0x5fc>)
 80127e6:	5cd3      	ldrb	r3, [r2, r3]
 80127e8:	4618      	mov	r0, r3
 80127ea:	f7ff fa1d 	bl	8011c28 <Exp>
 80127ee:	4603      	mov	r3, r0
 80127f0:	fb03 f204 	mul.w	r2, r3, r4
 80127f4:	687b      	ldr	r3, [r7, #4]
 80127f6:	fb02 f303 	mul.w	r3, r2, r3
 80127fa:	607b      	str	r3, [r7, #4]
      Value2Str(NumStr, Tmp, V[0], 3, UNSIGN);
 80127fc:	2301      	movs	r3, #1
 80127fe:	9300      	str	r3, [sp, #0]
 8012800:	2303      	movs	r3, #3
 8012802:	4a9f      	ldr	r2, [pc, #636]	; (8012a80 <Update_Blink+0x600>)
 8012804:	6879      	ldr	r1, [r7, #4]
 8012806:	489f      	ldr	r0, [pc, #636]	; (8012a84 <Update_Blink+0x604>)
 8012808:	f7ff f912 	bl	8011a30 <Value2Str>
      SetColor(GRY, TCOLOR[YN]);
 801280c:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8012810:	4619      	mov	r1, r3
 8012812:	f643 10e7 	movw	r0, #14823	; 0x39e7
 8012816:	f7fb fa1b 	bl	800dc50 <SetColor>
      Draw_Circle_D(Twink, S_X[V1_POSI]-3, LABLE_Y, 11, 0, 6*9);
 801281a:	4b9b      	ldr	r3, [pc, #620]	; (8012a88 <Update_Blink+0x608>)
 801281c:	781b      	ldrb	r3, [r3, #0]
 801281e:	b2d8      	uxtb	r0, r3
 8012820:	2307      	movs	r3, #7
 8012822:	b29b      	uxth	r3, r3
 8012824:	3b03      	subs	r3, #3
 8012826:	b29b      	uxth	r3, r3
 8012828:	b219      	sxth	r1, r3
 801282a:	2336      	movs	r3, #54	; 0x36
 801282c:	9301      	str	r3, [sp, #4]
 801282e:	2300      	movs	r3, #0
 8012830:	9300      	str	r3, [sp, #0]
 8012832:	230b      	movs	r3, #11
 8012834:	2203      	movs	r2, #3
 8012836:	f7fb faf9 	bl	800de2c <Draw_Circle_D>
      DispStr(S_X[V1_POSI]+0*6, LABLE_Y, Twink+SYMB, "]");
 801283a:	2007      	movs	r0, #7
 801283c:	4b92      	ldr	r3, [pc, #584]	; (8012a88 <Update_Blink+0x608>)
 801283e:	781b      	ldrb	r3, [r3, #0]
 8012840:	b2db      	uxtb	r3, r3
 8012842:	3310      	adds	r3, #16
 8012844:	b2da      	uxtb	r2, r3
 8012846:	4b91      	ldr	r3, [pc, #580]	; (8012a8c <Update_Blink+0x60c>)
 8012848:	2103      	movs	r1, #3
 801284a:	f7fb fa19 	bl	800dc80 <DispStr>
      DispStr(S_X[V1_POSI]+1*6, LABLE_Y, Twink,      "V:      ");
 801284e:	2307      	movs	r3, #7
 8012850:	b29b      	uxth	r3, r3
 8012852:	3306      	adds	r3, #6
 8012854:	b29b      	uxth	r3, r3
 8012856:	b218      	sxth	r0, r3
 8012858:	4b8b      	ldr	r3, [pc, #556]	; (8012a88 <Update_Blink+0x608>)
 801285a:	781b      	ldrb	r3, [r3, #0]
 801285c:	b2da      	uxtb	r2, r3
 801285e:	4b8c      	ldr	r3, [pc, #560]	; (8012a90 <Update_Blink+0x610>)
 8012860:	2103      	movs	r1, #3
 8012862:	f7fb fa0d 	bl	800dc80 <DispStr>
      DispStr(S_X[V1_POSI]+3*6, LABLE_Y, Twink, (char *)NumStr);
 8012866:	2307      	movs	r3, #7
 8012868:	b29b      	uxth	r3, r3
 801286a:	3312      	adds	r3, #18
 801286c:	b29b      	uxth	r3, r3
 801286e:	b218      	sxth	r0, r3
 8012870:	4b85      	ldr	r3, [pc, #532]	; (8012a88 <Update_Blink+0x608>)
 8012872:	781b      	ldrb	r3, [r3, #0]
 8012874:	b2da      	uxtb	r2, r3
 8012876:	4b83      	ldr	r3, [pc, #524]	; (8012a84 <Update_Blink+0x604>)
 8012878:	2103      	movs	r1, #3
 801287a:	f7fb fa01 	bl	800dc80 <DispStr>
      break;
 801287e:	f000 bcf4 	b.w	801326a <Update_Blink+0xdea>

    case YN_TYPE:
      if(Twink) ParamTab[V1F] |=  D_HID;
 8012882:	4b81      	ldr	r3, [pc, #516]	; (8012a88 <Update_Blink+0x608>)
 8012884:	781b      	ldrb	r3, [r3, #0]
 8012886:	b2db      	uxtb	r3, r3
 8012888:	2b00      	cmp	r3, #0
 801288a:	d008      	beq.n	801289e <Update_Blink+0x41e>
 801288c:	4b79      	ldr	r3, [pc, #484]	; (8012a74 <Update_Blink+0x5f4>)
 801288e:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8012892:	f043 0301 	orr.w	r3, r3, #1
 8012896:	b21a      	sxth	r2, r3
 8012898:	4b76      	ldr	r3, [pc, #472]	; (8012a74 <Update_Blink+0x5f4>)
 801289a:	815a      	strh	r2, [r3, #10]
 801289c:	e007      	b.n	80128ae <Update_Blink+0x42e>
      else      ParamTab[V1F] &= ~D_HID;
 801289e:	4b75      	ldr	r3, [pc, #468]	; (8012a74 <Update_Blink+0x5f4>)
 80128a0:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 80128a4:	f023 0301 	bic.w	r3, r3, #1
 80128a8:	b21a      	sxth	r2, r3
 80128aa:	4b72      	ldr	r3, [pc, #456]	; (8012a74 <Update_Blink+0x5f4>)
 80128ac:	815a      	strh	r2, [r3, #10]
      if(Twink) ParamTab[V2F] |=  D_HID;
 80128ae:	4b76      	ldr	r3, [pc, #472]	; (8012a88 <Update_Blink+0x608>)
 80128b0:	781b      	ldrb	r3, [r3, #0]
 80128b2:	b2db      	uxtb	r3, r3
 80128b4:	2b00      	cmp	r3, #0
 80128b6:	d009      	beq.n	80128cc <Update_Blink+0x44c>
 80128b8:	4b6e      	ldr	r3, [pc, #440]	; (8012a74 <Update_Blink+0x5f4>)
 80128ba:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 80128be:	f043 0301 	orr.w	r3, r3, #1
 80128c2:	b21a      	sxth	r2, r3
 80128c4:	4b6b      	ldr	r3, [pc, #428]	; (8012a74 <Update_Blink+0x5f4>)
 80128c6:	819a      	strh	r2, [r3, #12]
      else      ParamTab[V2F] &= ~D_HID;
      break;
 80128c8:	f000 bccf 	b.w	801326a <Update_Blink+0xdea>
      else      ParamTab[V2F] &= ~D_HID;
 80128cc:	4b69      	ldr	r3, [pc, #420]	; (8012a74 <Update_Blink+0x5f4>)
 80128ce:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 80128d2:	f023 0301 	bic.w	r3, r3, #1
 80128d6:	b21a      	sxth	r2, r3
 80128d8:	4b66      	ldr	r3, [pc, #408]	; (8012a74 <Update_Blink+0x5f4>)
 80128da:	819a      	strh	r2, [r3, #12]
      break;
 80128dc:	f000 bcc5 	b.w	801326a <Update_Blink+0xdea>

    case TIM_BASE:
      SetColor(GRY, TCOLOR[XN]);
 80128e0:	f240 73ff 	movw	r3, #2047	; 0x7ff
 80128e4:	4619      	mov	r1, r3
 80128e6:	f643 10e7 	movw	r0, #14823	; 0x39e7
 80128ea:	f7fb f9b1 	bl	800dc50 <SetColor>
      Draw_Circle_D(Twink, S_X[i]-3, TITLE_Y_POS, 11, 2, 6*5);
 80128ee:	4b66      	ldr	r3, [pc, #408]	; (8012a88 <Update_Blink+0x608>)
 80128f0:	781b      	ldrb	r3, [r3, #0]
 80128f2:	b2d8      	uxtb	r0, r3
 80128f4:	89bb      	ldrh	r3, [r7, #12]
 80128f6:	4a67      	ldr	r2, [pc, #412]	; (8012a94 <Update_Blink+0x614>)
 80128f8:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 80128fc:	b29b      	uxth	r3, r3
 80128fe:	3b03      	subs	r3, #3
 8012900:	b29b      	uxth	r3, r3
 8012902:	b219      	sxth	r1, r3
 8012904:	231e      	movs	r3, #30
 8012906:	9301      	str	r3, [sp, #4]
 8012908:	2302      	movs	r3, #2
 801290a:	9300      	str	r3, [sp, #0]
 801290c:	230b      	movs	r3, #11
 801290e:	22e1      	movs	r2, #225	; 0xe1
 8012910:	f7fb fa8c 	bl	800de2c <Draw_Circle_D>
      DispStr(S_X[i], TITLE_Y_POS, Twink, TimeBase_Str[List[TIM_BASE].Val]);
 8012914:	89bb      	ldrh	r3, [r7, #12]
 8012916:	4a5f      	ldr	r2, [pc, #380]	; (8012a94 <Update_Blink+0x614>)
 8012918:	f932 0013 	ldrsh.w	r0, [r2, r3, lsl #1]
 801291c:	4b5a      	ldr	r3, [pc, #360]	; (8012a88 <Update_Blink+0x608>)
 801291e:	781b      	ldrb	r3, [r3, #0]
 8012920:	b2da      	uxtb	r2, r3
 8012922:	4b5d      	ldr	r3, [pc, #372]	; (8012a98 <Update_Blink+0x618>)
 8012924:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8012928:	00db      	lsls	r3, r3, #3
 801292a:	495c      	ldr	r1, [pc, #368]	; (8012a9c <Update_Blink+0x61c>)
 801292c:	440b      	add	r3, r1
 801292e:	21e1      	movs	r1, #225	; 0xe1
 8012930:	f7fb f9a6 	bl	800dc80 <DispStr>
      break;
 8012934:	f000 bc99 	b.w	801326a <Update_Blink+0xdea>

    case VIEWPOSI:
      if(Twink) ParamTab[T0F] |=  D_HID;
 8012938:	4b53      	ldr	r3, [pc, #332]	; (8012a88 <Update_Blink+0x608>)
 801293a:	781b      	ldrb	r3, [r3, #0]
 801293c:	b2db      	uxtb	r3, r3
 801293e:	2b00      	cmp	r3, #0
 8012940:	d009      	beq.n	8012956 <Update_Blink+0x4d6>
 8012942:	4b4c      	ldr	r3, [pc, #304]	; (8012a74 <Update_Blink+0x5f4>)
 8012944:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8012948:	f043 0301 	orr.w	r3, r3, #1
 801294c:	b21a      	sxth	r2, r3
 801294e:	4b49      	ldr	r3, [pc, #292]	; (8012a74 <Update_Blink+0x5f4>)
 8012950:	81da      	strh	r2, [r3, #14]
      else      ParamTab[T0F] &= ~D_HID;
      break;
 8012952:	f000 bc8a 	b.w	801326a <Update_Blink+0xdea>
      else      ParamTab[T0F] &= ~D_HID;
 8012956:	4b47      	ldr	r3, [pc, #284]	; (8012a74 <Update_Blink+0x5f4>)
 8012958:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 801295c:	f023 0301 	bic.w	r3, r3, #1
 8012960:	b21a      	sxth	r2, r3
 8012962:	4b44      	ldr	r3, [pc, #272]	; (8012a74 <Update_Blink+0x5f4>)
 8012964:	81da      	strh	r2, [r3, #14]
      break;
 8012966:	f000 bc80 	b.w	801326a <Update_Blink+0xdea>

    case SMPL_DPTH:
      SetColor(GRY, TCOLOR[XN]);
 801296a:	f240 73ff 	movw	r3, #2047	; 0x7ff
 801296e:	4619      	mov	r1, r3
 8012970:	f643 10e7 	movw	r0, #14823	; 0x39e7
 8012974:	f7fb f96c 	bl	800dc50 <SetColor>
      Draw_Circle_D(Twink, S_X[SMPL_DPTH]-3, LABLE_Y, 11, 0, 6*11);
 8012978:	4b43      	ldr	r3, [pc, #268]	; (8012a88 <Update_Blink+0x608>)
 801297a:	781b      	ldrb	r3, [r3, #0]
 801297c:	b2d8      	uxtb	r0, r3
 801297e:	23f8      	movs	r3, #248	; 0xf8
 8012980:	b29b      	uxth	r3, r3
 8012982:	3b03      	subs	r3, #3
 8012984:	b29b      	uxth	r3, r3
 8012986:	b219      	sxth	r1, r3
 8012988:	2342      	movs	r3, #66	; 0x42
 801298a:	9301      	str	r3, [sp, #4]
 801298c:	2300      	movs	r3, #0
 801298e:	9300      	str	r3, [sp, #0]
 8012990:	230b      	movs	r3, #11
 8012992:	2203      	movs	r2, #3
 8012994:	f7fb fa4a 	bl	800de2c <Draw_Circle_D>
      DispStr(S_X[SMPL_DPTH],    LABLE_Y,  Twink, "SmplDpth:  ");
 8012998:	20f8      	movs	r0, #248	; 0xf8
 801299a:	4b3b      	ldr	r3, [pc, #236]	; (8012a88 <Update_Blink+0x608>)
 801299c:	781b      	ldrb	r3, [r3, #0]
 801299e:	b2da      	uxtb	r2, r3
 80129a0:	4b3f      	ldr	r3, [pc, #252]	; (8012aa0 <Update_Blink+0x620>)
 80129a2:	2103      	movs	r1, #3
 80129a4:	f7fb f96c 	bl	800dc80 <DispStr>
      DispStr(S_X[SMPL_DPTH]+6*9, LABLE_Y,  Twink, (char *)&D[List[SMPL_DPTH].Val]);
 80129a8:	23f8      	movs	r3, #248	; 0xf8
 80129aa:	b29b      	uxth	r3, r3
 80129ac:	3336      	adds	r3, #54	; 0x36
 80129ae:	b29b      	uxth	r3, r3
 80129b0:	b218      	sxth	r0, r3
 80129b2:	4b35      	ldr	r3, [pc, #212]	; (8012a88 <Update_Blink+0x608>)
 80129b4:	781b      	ldrb	r3, [r3, #0]
 80129b6:	b2da      	uxtb	r2, r3
 80129b8:	4b37      	ldr	r3, [pc, #220]	; (8012a98 <Update_Blink+0x618>)
 80129ba:	f9b3 304c 	ldrsh.w	r3, [r3, #76]	; 0x4c
 80129be:	4619      	mov	r1, r3
 80129c0:	460b      	mov	r3, r1
 80129c2:	005b      	lsls	r3, r3, #1
 80129c4:	440b      	add	r3, r1
 80129c6:	005b      	lsls	r3, r3, #1
 80129c8:	4936      	ldr	r1, [pc, #216]	; (8012aa4 <Update_Blink+0x624>)
 80129ca:	440b      	add	r3, r1
 80129cc:	2103      	movs	r1, #3
 80129ce:	f7fb f957 	bl	800dc80 <DispStr>
      break;
 80129d2:	f000 bc4a 	b.w	801326a <Update_Blink+0xdea>

    case T1_POSI:
    case T2_POSI:
      Tmp = (i == T1_POSI)? T1F : T2F;
 80129d6:	89bb      	ldrh	r3, [r7, #12]
 80129d8:	2b0a      	cmp	r3, #10
 80129da:	d101      	bne.n	80129e0 <Update_Blink+0x560>
 80129dc:	2308      	movs	r3, #8
 80129de:	e000      	b.n	80129e2 <Update_Blink+0x562>
 80129e0:	2309      	movs	r3, #9
 80129e2:	607b      	str	r3, [r7, #4]
      if(Twink) ParamTab[Tmp] |=  D_HID;
 80129e4:	4b28      	ldr	r3, [pc, #160]	; (8012a88 <Update_Blink+0x608>)
 80129e6:	781b      	ldrb	r3, [r3, #0]
 80129e8:	b2db      	uxtb	r3, r3
 80129ea:	2b00      	cmp	r3, #0
 80129ec:	d00b      	beq.n	8012a06 <Update_Blink+0x586>
 80129ee:	4a21      	ldr	r2, [pc, #132]	; (8012a74 <Update_Blink+0x5f4>)
 80129f0:	687b      	ldr	r3, [r7, #4]
 80129f2:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 80129f6:	f043 0301 	orr.w	r3, r3, #1
 80129fa:	b219      	sxth	r1, r3
 80129fc:	4a1d      	ldr	r2, [pc, #116]	; (8012a74 <Update_Blink+0x5f4>)
 80129fe:	687b      	ldr	r3, [r7, #4]
 8012a00:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8012a04:	e00a      	b.n	8012a1c <Update_Blink+0x59c>
      else      ParamTab[Tmp] &= ~D_HID;
 8012a06:	4a1b      	ldr	r2, [pc, #108]	; (8012a74 <Update_Blink+0x5f4>)
 8012a08:	687b      	ldr	r3, [r7, #4]
 8012a0a:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8012a0e:	f023 0301 	bic.w	r3, r3, #1
 8012a12:	b219      	sxth	r1, r3
 8012a14:	4a17      	ldr	r2, [pc, #92]	; (8012a74 <Update_Blink+0x5f4>)
 8012a16:	687b      	ldr	r3, [r7, #4]
 8012a18:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
      Tmp  = ParamTab[T2x1] - ParamTab[T1x1];          // T2 - T1 ��ֵ
 8012a1c:	4b15      	ldr	r3, [pc, #84]	; (8012a74 <Update_Blink+0x5f4>)
 8012a1e:	f9b3 3026 	ldrsh.w	r3, [r3, #38]	; 0x26
 8012a22:	461a      	mov	r2, r3
 8012a24:	4b13      	ldr	r3, [pc, #76]	; (8012a74 <Update_Blink+0x5f4>)
 8012a26:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	; 0x24
 8012a2a:	1ad3      	subs	r3, r2, r3
 8012a2c:	607b      	str	r3, [r7, #4]
      Tmp *= B_SCALE[List[TIM_BASE].Val]* Exp(T_SCALE[List[TIM_BASE].Val]);
 8012a2e:	4b1a      	ldr	r3, [pc, #104]	; (8012a98 <Update_Blink+0x618>)
 8012a30:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8012a34:	461a      	mov	r2, r3
 8012a36:	4b1c      	ldr	r3, [pc, #112]	; (8012aa8 <Update_Blink+0x628>)
 8012a38:	5c9b      	ldrb	r3, [r3, r2]
 8012a3a:	461c      	mov	r4, r3
 8012a3c:	4b16      	ldr	r3, [pc, #88]	; (8012a98 <Update_Blink+0x618>)
 8012a3e:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8012a42:	461a      	mov	r2, r3
 8012a44:	4b19      	ldr	r3, [pc, #100]	; (8012aac <Update_Blink+0x62c>)
 8012a46:	5c9b      	ldrb	r3, [r3, r2]
 8012a48:	4618      	mov	r0, r3
 8012a4a:	f7ff f8ed 	bl	8011c28 <Exp>
 8012a4e:	4603      	mov	r3, r0
 8012a50:	fb03 f204 	mul.w	r2, r3, r4
 8012a54:	687b      	ldr	r3, [r7, #4]
 8012a56:	fb02 f303 	mul.w	r3, r2, r3
 8012a5a:	607b      	str	r3, [r7, #4]
      if(Tmp>=0)
 8012a5c:	687b      	ldr	r3, [r7, #4]
 8012a5e:	2b00      	cmp	r3, #0
 8012a60:	db28      	blt.n	8012ab4 <Update_Blink+0x634>
        Value2Str(NumStr, Tmp, T[0], 3, UNSIGN);
 8012a62:	2301      	movs	r3, #1
 8012a64:	9300      	str	r3, [sp, #0]
 8012a66:	2303      	movs	r3, #3
 8012a68:	4a11      	ldr	r2, [pc, #68]	; (8012ab0 <Update_Blink+0x630>)
 8012a6a:	6879      	ldr	r1, [r7, #4]
 8012a6c:	4805      	ldr	r0, [pc, #20]	; (8012a84 <Update_Blink+0x604>)
 8012a6e:	f7fe ffdf 	bl	8011a30 <Value2Str>
 8012a72:	e027      	b.n	8012ac4 <Update_Blink+0x644>
 8012a74:	20000140 	.word	0x20000140
 8012a78:	08002130 	.word	0x08002130
 8012a7c:	08002108 	.word	0x08002108
 8012a80:	08001d00 	.word	0x08001d00
 8012a84:	2000283c 	.word	0x2000283c
 8012a88:	2000077c 	.word	0x2000077c
 8012a8c:	08000960 	.word	0x08000960
 8012a90:	08000964 	.word	0x08000964
 8012a94:	0800215c 	.word	0x0800215c
 8012a98:	20000298 	.word	0x20000298
 8012a9c:	200001d0 	.word	0x200001d0
 8012aa0:	08000970 	.word	0x08000970
 8012aa4:	08001c4c 	.word	0x08001c4c
 8012aa8:	0800211c 	.word	0x0800211c
 8012aac:	080020f4 	.word	0x080020f4
 8012ab0:	08001ce8 	.word	0x08001ce8
      else
        Value2Str(NumStr, Tmp, T[0], 3, SIGN);
 8012ab4:	2300      	movs	r3, #0
 8012ab6:	9300      	str	r3, [sp, #0]
 8012ab8:	2303      	movs	r3, #3
 8012aba:	4aa3      	ldr	r2, [pc, #652]	; (8012d48 <Update_Blink+0x8c8>)
 8012abc:	6879      	ldr	r1, [r7, #4]
 8012abe:	48a3      	ldr	r0, [pc, #652]	; (8012d4c <Update_Blink+0x8cc>)
 8012ac0:	f7fe ffb6 	bl	8011a30 <Value2Str>
      SetColor(GRY, TCOLOR[XN]);
 8012ac4:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8012ac8:	4619      	mov	r1, r3
 8012aca:	f643 10e7 	movw	r0, #14823	; 0x39e7
 8012ace:	f7fb f8bf 	bl	800dc50 <SetColor>
      Draw_Circle_D(Twink, S_X[T1_POSI]-3, LABLE_Y, 11, 0, 6*9);
 8012ad2:	4b9f      	ldr	r3, [pc, #636]	; (8012d50 <Update_Blink+0x8d0>)
 8012ad4:	781b      	ldrb	r3, [r3, #0]
 8012ad6:	b2d8      	uxtb	r0, r3
 8012ad8:	2307      	movs	r3, #7
 8012ada:	b29b      	uxth	r3, r3
 8012adc:	3b03      	subs	r3, #3
 8012ade:	b29b      	uxth	r3, r3
 8012ae0:	b219      	sxth	r1, r3
 8012ae2:	2336      	movs	r3, #54	; 0x36
 8012ae4:	9301      	str	r3, [sp, #4]
 8012ae6:	2300      	movs	r3, #0
 8012ae8:	9300      	str	r3, [sp, #0]
 8012aea:	230b      	movs	r3, #11
 8012aec:	2203      	movs	r2, #3
 8012aee:	f7fb f99d 	bl	800de2c <Draw_Circle_D>
      DispStr(S_X[T1_POSI]+0*6, LABLE_Y, Twink+SYMB, "]");
 8012af2:	2007      	movs	r0, #7
 8012af4:	4b96      	ldr	r3, [pc, #600]	; (8012d50 <Update_Blink+0x8d0>)
 8012af6:	781b      	ldrb	r3, [r3, #0]
 8012af8:	b2db      	uxtb	r3, r3
 8012afa:	3310      	adds	r3, #16
 8012afc:	b2da      	uxtb	r2, r3
 8012afe:	4b95      	ldr	r3, [pc, #596]	; (8012d54 <Update_Blink+0x8d4>)
 8012b00:	2103      	movs	r1, #3
 8012b02:	f7fb f8bd 	bl	800dc80 <DispStr>
      DispStr(S_X[T1_POSI]+1*6, LABLE_Y, Twink,      "T:      ");
 8012b06:	2307      	movs	r3, #7
 8012b08:	b29b      	uxth	r3, r3
 8012b0a:	3306      	adds	r3, #6
 8012b0c:	b29b      	uxth	r3, r3
 8012b0e:	b218      	sxth	r0, r3
 8012b10:	4b8f      	ldr	r3, [pc, #572]	; (8012d50 <Update_Blink+0x8d0>)
 8012b12:	781b      	ldrb	r3, [r3, #0]
 8012b14:	b2da      	uxtb	r2, r3
 8012b16:	4b90      	ldr	r3, [pc, #576]	; (8012d58 <Update_Blink+0x8d8>)
 8012b18:	2103      	movs	r1, #3
 8012b1a:	f7fb f8b1 	bl	800dc80 <DispStr>
      DispStr(S_X[T1_POSI]+3*6, LABLE_Y, Twink,      (char *)NumStr);
 8012b1e:	2307      	movs	r3, #7
 8012b20:	b29b      	uxth	r3, r3
 8012b22:	3312      	adds	r3, #18
 8012b24:	b29b      	uxth	r3, r3
 8012b26:	b218      	sxth	r0, r3
 8012b28:	4b89      	ldr	r3, [pc, #548]	; (8012d50 <Update_Blink+0x8d0>)
 8012b2a:	781b      	ldrb	r3, [r3, #0]
 8012b2c:	b2da      	uxtb	r2, r3
 8012b2e:	4b87      	ldr	r3, [pc, #540]	; (8012d4c <Update_Blink+0x8cc>)
 8012b30:	2103      	movs	r1, #3
 8012b32:	f7fb f8a5 	bl	800dc80 <DispStr>
      break;
 8012b36:	e398      	b.n	801326a <Update_Blink+0xdea>

    case XN_TYPE:
      if(Twink) ParamTab[T1F] |=  D_HID;
 8012b38:	4b85      	ldr	r3, [pc, #532]	; (8012d50 <Update_Blink+0x8d0>)
 8012b3a:	781b      	ldrb	r3, [r3, #0]
 8012b3c:	b2db      	uxtb	r3, r3
 8012b3e:	2b00      	cmp	r3, #0
 8012b40:	d008      	beq.n	8012b54 <Update_Blink+0x6d4>
 8012b42:	4b86      	ldr	r3, [pc, #536]	; (8012d5c <Update_Blink+0x8dc>)
 8012b44:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8012b48:	f043 0301 	orr.w	r3, r3, #1
 8012b4c:	b21a      	sxth	r2, r3
 8012b4e:	4b83      	ldr	r3, [pc, #524]	; (8012d5c <Update_Blink+0x8dc>)
 8012b50:	821a      	strh	r2, [r3, #16]
 8012b52:	e007      	b.n	8012b64 <Update_Blink+0x6e4>
      else      ParamTab[T1F] &= ~D_HID;
 8012b54:	4b81      	ldr	r3, [pc, #516]	; (8012d5c <Update_Blink+0x8dc>)
 8012b56:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8012b5a:	f023 0301 	bic.w	r3, r3, #1
 8012b5e:	b21a      	sxth	r2, r3
 8012b60:	4b7e      	ldr	r3, [pc, #504]	; (8012d5c <Update_Blink+0x8dc>)
 8012b62:	821a      	strh	r2, [r3, #16]
      if(Twink) ParamTab[T2F] |=  D_HID;
 8012b64:	4b7a      	ldr	r3, [pc, #488]	; (8012d50 <Update_Blink+0x8d0>)
 8012b66:	781b      	ldrb	r3, [r3, #0]
 8012b68:	b2db      	uxtb	r3, r3
 8012b6a:	2b00      	cmp	r3, #0
 8012b6c:	d008      	beq.n	8012b80 <Update_Blink+0x700>
 8012b6e:	4b7b      	ldr	r3, [pc, #492]	; (8012d5c <Update_Blink+0x8dc>)
 8012b70:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8012b74:	f043 0301 	orr.w	r3, r3, #1
 8012b78:	b21a      	sxth	r2, r3
 8012b7a:	4b78      	ldr	r3, [pc, #480]	; (8012d5c <Update_Blink+0x8dc>)
 8012b7c:	825a      	strh	r2, [r3, #18]
      else      ParamTab[T2F] &= ~D_HID;
      break;
 8012b7e:	e374      	b.n	801326a <Update_Blink+0xdea>
      else      ParamTab[T2F] &= ~D_HID;
 8012b80:	4b76      	ldr	r3, [pc, #472]	; (8012d5c <Update_Blink+0x8dc>)
 8012b82:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8012b86:	f023 0301 	bic.w	r3, r3, #1
 8012b8a:	b21a      	sxth	r2, r3
 8012b8c:	4b73      	ldr	r3, [pc, #460]	; (8012d5c <Update_Blink+0x8dc>)
 8012b8e:	825a      	strh	r2, [r3, #18]
      break;
 8012b90:	e36b      	b.n	801326a <Update_Blink+0xdea>

    case SYNCMODE:
      if(!(Status &  STOP))
 8012b92:	4b73      	ldr	r3, [pc, #460]	; (8012d60 <Update_Blink+0x8e0>)
 8012b94:	f9b3 3000 	ldrsh.w	r3, [r3]
 8012b98:	b29b      	uxth	r3, r3
 8012b9a:	f003 0301 	and.w	r3, r3, #1
 8012b9e:	2b00      	cmp	r3, #0
 8012ba0:	f040 8362 	bne.w	8013268 <Update_Blink+0xde8>
      {
      SetColor(GRY, TCOLOR[TRG]);
 8012ba4:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8012ba8:	4619      	mov	r1, r3
 8012baa:	f643 10e7 	movw	r0, #14823	; 0x39e7
 8012bae:	f7fb f84f 	bl	800dc50 <SetColor>
      Draw_Circle_D(Twink, S_X[i]-3, TITLE_Y_POS, 11, 1, 6*4);
 8012bb2:	4b67      	ldr	r3, [pc, #412]	; (8012d50 <Update_Blink+0x8d0>)
 8012bb4:	781b      	ldrb	r3, [r3, #0]
 8012bb6:	b2d8      	uxtb	r0, r3
 8012bb8:	89bb      	ldrh	r3, [r7, #12]
 8012bba:	4a6a      	ldr	r2, [pc, #424]	; (8012d64 <Update_Blink+0x8e4>)
 8012bbc:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8012bc0:	b29b      	uxth	r3, r3
 8012bc2:	3b03      	subs	r3, #3
 8012bc4:	b29b      	uxth	r3, r3
 8012bc6:	b219      	sxth	r1, r3
 8012bc8:	2318      	movs	r3, #24
 8012bca:	9301      	str	r3, [sp, #4]
 8012bcc:	2301      	movs	r3, #1
 8012bce:	9300      	str	r3, [sp, #0]
 8012bd0:	230b      	movs	r3, #11
 8012bd2:	22e1      	movs	r2, #225	; 0xe1
 8012bd4:	f7fb f92a 	bl	800de2c <Draw_Circle_D>
      DispStr(S_X[i], TITLE_Y_POS, Twink, (char *)ptr);
 8012bd8:	89bb      	ldrh	r3, [r7, #12]
 8012bda:	4a62      	ldr	r2, [pc, #392]	; (8012d64 <Update_Blink+0x8e4>)
 8012bdc:	f932 0013 	ldrsh.w	r0, [r2, r3, lsl #1]
 8012be0:	4b5b      	ldr	r3, [pc, #364]	; (8012d50 <Update_Blink+0x8d0>)
 8012be2:	781b      	ldrb	r3, [r3, #0]
 8012be4:	b2da      	uxtb	r2, r3
 8012be6:	68bb      	ldr	r3, [r7, #8]
 8012be8:	21e1      	movs	r1, #225	; 0xe1
 8012bea:	f7fb f849 	bl	800dc80 <DispStr>
      }
      break;
 8012bee:	e33b      	b.n	8013268 <Update_Blink+0xde8>

    case TR_MODE:
    case SENSITIVE:
      SetColor(GRY, TCOLOR[TRG]);
 8012bf0:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8012bf4:	4619      	mov	r1, r3
 8012bf6:	f643 10e7 	movw	r0, #14823	; 0x39e7
 8012bfa:	f7fb f829 	bl	800dc50 <SetColor>
      Draw_Circle_D(Twink, S_X[TR_MODE]-3, TITLE_Y_POS, 11, 0, 6*8);
 8012bfe:	4b54      	ldr	r3, [pc, #336]	; (8012d50 <Update_Blink+0x8d0>)
 8012c00:	781b      	ldrb	r3, [r3, #0]
 8012c02:	b2d8      	uxtb	r0, r3
 8012c04:	23dd      	movs	r3, #221	; 0xdd
 8012c06:	b29b      	uxth	r3, r3
 8012c08:	3b03      	subs	r3, #3
 8012c0a:	b29b      	uxth	r3, r3
 8012c0c:	b219      	sxth	r1, r3
 8012c0e:	2330      	movs	r3, #48	; 0x30
 8012c10:	9301      	str	r3, [sp, #4]
 8012c12:	2300      	movs	r3, #0
 8012c14:	9300      	str	r3, [sp, #0]
 8012c16:	230b      	movs	r3, #11
 8012c18:	22e1      	movs	r2, #225	; 0xe1
 8012c1a:	f7fb f907 	bl	800de2c <Draw_Circle_D>
      DispStr10x14(S_X[TR_MODE], TITLE_Y_POS, Twink+SYMB,(List[TR_MODE].Val?("D"):("C")));
 8012c1e:	20dd      	movs	r0, #221	; 0xdd
 8012c20:	4b4b      	ldr	r3, [pc, #300]	; (8012d50 <Update_Blink+0x8d0>)
 8012c22:	781b      	ldrb	r3, [r3, #0]
 8012c24:	b2db      	uxtb	r3, r3
 8012c26:	3310      	adds	r3, #16
 8012c28:	b2da      	uxtb	r2, r3
 8012c2a:	4b4f      	ldr	r3, [pc, #316]	; (8012d68 <Update_Blink+0x8e8>)
 8012c2c:	f9b3 3074 	ldrsh.w	r3, [r3, #116]	; 0x74
 8012c30:	2b00      	cmp	r3, #0
 8012c32:	d001      	beq.n	8012c38 <Update_Blink+0x7b8>
 8012c34:	4b4d      	ldr	r3, [pc, #308]	; (8012d6c <Update_Blink+0x8ec>)
 8012c36:	e000      	b.n	8012c3a <Update_Blink+0x7ba>
 8012c38:	4b4d      	ldr	r3, [pc, #308]	; (8012d70 <Update_Blink+0x8f0>)
 8012c3a:	21e1      	movs	r1, #225	; 0xe1
 8012c3c:	f7fb fa88 	bl	800e150 <DispStr10x14>

      Tmp  = List[SENSITIVE].Val;                        // �����ز�ֵ
 8012c40:	4b49      	ldr	r3, [pc, #292]	; (8012d68 <Update_Blink+0x8e8>)
 8012c42:	f9b3 308c 	ldrsh.w	r3, [r3, #140]	; 0x8c
 8012c46:	607b      	str	r3, [r7, #4]
      Tmp *= X_SCALE[Range]* Exp(V_SCALE[Range]);
 8012c48:	89fb      	ldrh	r3, [r7, #14]
 8012c4a:	4a4a      	ldr	r2, [pc, #296]	; (8012d74 <Update_Blink+0x8f4>)
 8012c4c:	5cd3      	ldrb	r3, [r2, r3]
 8012c4e:	461c      	mov	r4, r3
 8012c50:	89fb      	ldrh	r3, [r7, #14]
 8012c52:	4a49      	ldr	r2, [pc, #292]	; (8012d78 <Update_Blink+0x8f8>)
 8012c54:	5cd3      	ldrb	r3, [r2, r3]
 8012c56:	4618      	mov	r0, r3
 8012c58:	f7fe ffe6 	bl	8011c28 <Exp>
 8012c5c:	4603      	mov	r3, r0
 8012c5e:	fb03 f204 	mul.w	r2, r3, r4
 8012c62:	687b      	ldr	r3, [r7, #4]
 8012c64:	fb02 f303 	mul.w	r3, r2, r3
 8012c68:	607b      	str	r3, [r7, #4]
      Value2Str(NumStr, Tmp, V[0], 2, UNSIGN);
 8012c6a:	2301      	movs	r3, #1
 8012c6c:	9300      	str	r3, [sp, #0]
 8012c6e:	2302      	movs	r3, #2
 8012c70:	4a42      	ldr	r2, [pc, #264]	; (8012d7c <Update_Blink+0x8fc>)
 8012c72:	6879      	ldr	r1, [r7, #4]
 8012c74:	4835      	ldr	r0, [pc, #212]	; (8012d4c <Update_Blink+0x8cc>)
 8012c76:	f7fe fedb 	bl	8011a30 <Value2Str>
      DispStr(S_X[SENSITIVE]+9, TITLE_Y_POS, Twink,  "     ");
 8012c7a:	23e7      	movs	r3, #231	; 0xe7
 8012c7c:	b29b      	uxth	r3, r3
 8012c7e:	3309      	adds	r3, #9
 8012c80:	b29b      	uxth	r3, r3
 8012c82:	b218      	sxth	r0, r3
 8012c84:	4b32      	ldr	r3, [pc, #200]	; (8012d50 <Update_Blink+0x8d0>)
 8012c86:	781b      	ldrb	r3, [r3, #0]
 8012c88:	b2da      	uxtb	r2, r3
 8012c8a:	4b3d      	ldr	r3, [pc, #244]	; (8012d80 <Update_Blink+0x900>)
 8012c8c:	21e1      	movs	r1, #225	; 0xe1
 8012c8e:	f7fa fff7 	bl	800dc80 <DispStr>
      DispStr10x14(S_X[SENSITIVE], TITLE_Y_POS, Twink+SYMB,"E");
 8012c92:	20e7      	movs	r0, #231	; 0xe7
 8012c94:	4b2e      	ldr	r3, [pc, #184]	; (8012d50 <Update_Blink+0x8d0>)
 8012c96:	781b      	ldrb	r3, [r3, #0]
 8012c98:	b2db      	uxtb	r3, r3
 8012c9a:	3310      	adds	r3, #16
 8012c9c:	b2da      	uxtb	r2, r3
 8012c9e:	4b39      	ldr	r3, [pc, #228]	; (8012d84 <Update_Blink+0x904>)
 8012ca0:	21e1      	movs	r1, #225	; 0xe1
 8012ca2:	f7fb fa55 	bl	800e150 <DispStr10x14>
      DispStr(S_X[SENSITIVE]+9, TITLE_Y_POS, Twink     ,  (char *)NumStr);
 8012ca6:	23e7      	movs	r3, #231	; 0xe7
 8012ca8:	b29b      	uxth	r3, r3
 8012caa:	3309      	adds	r3, #9
 8012cac:	b29b      	uxth	r3, r3
 8012cae:	b218      	sxth	r0, r3
 8012cb0:	4b27      	ldr	r3, [pc, #156]	; (8012d50 <Update_Blink+0x8d0>)
 8012cb2:	781b      	ldrb	r3, [r3, #0]
 8012cb4:	b2da      	uxtb	r2, r3
 8012cb6:	4b25      	ldr	r3, [pc, #148]	; (8012d4c <Update_Blink+0x8cc>)
 8012cb8:	21e1      	movs	r1, #225	; 0xe1
 8012cba:	f7fa ffe1 	bl	800dc80 <DispStr>
      break;
 8012cbe:	e2d4      	b.n	801326a <Update_Blink+0xdea>

    case FITTRIGG:
      SetColor(GRY, TCOLOR[TRG]);
 8012cc0:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8012cc4:	4619      	mov	r1, r3
 8012cc6:	f643 10e7 	movw	r0, #14823	; 0x39e7
 8012cca:	f7fa ffc1 	bl	800dc50 <SetColor>
      DispStr10x14(S_X[FITTRIGG], TITLE_Y_POS, PRN+SYMB,(List[FITTRIGG].Val?("F"):("B")));
 8012cce:	20cf      	movs	r0, #207	; 0xcf
 8012cd0:	4b25      	ldr	r3, [pc, #148]	; (8012d68 <Update_Blink+0x8e8>)
 8012cd2:	f9b3 307c 	ldrsh.w	r3, [r3, #124]	; 0x7c
 8012cd6:	2b00      	cmp	r3, #0
 8012cd8:	d001      	beq.n	8012cde <Update_Blink+0x85e>
 8012cda:	4b2b      	ldr	r3, [pc, #172]	; (8012d88 <Update_Blink+0x908>)
 8012cdc:	e000      	b.n	8012ce0 <Update_Blink+0x860>
 8012cde:	4b2b      	ldr	r3, [pc, #172]	; (8012d8c <Update_Blink+0x90c>)
 8012ce0:	2210      	movs	r2, #16
 8012ce2:	21e1      	movs	r1, #225	; 0xe1
 8012ce4:	f7fb fa34 	bl	800e150 <DispStr10x14>
      break;
 8012ce8:	e2bf      	b.n	801326a <Update_Blink+0xdea>

    case THRESHOLD:
      if(Twink) ParamTab[VTF] |=  D_HID;
 8012cea:	4b19      	ldr	r3, [pc, #100]	; (8012d50 <Update_Blink+0x8d0>)
 8012cec:	781b      	ldrb	r3, [r3, #0]
 8012cee:	b2db      	uxtb	r3, r3
 8012cf0:	2b00      	cmp	r3, #0
 8012cf2:	d008      	beq.n	8012d06 <Update_Blink+0x886>
 8012cf4:	4b19      	ldr	r3, [pc, #100]	; (8012d5c <Update_Blink+0x8dc>)
 8012cf6:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8012cfa:	f043 0301 	orr.w	r3, r3, #1
 8012cfe:	b21a      	sxth	r2, r3
 8012d00:	4b16      	ldr	r3, [pc, #88]	; (8012d5c <Update_Blink+0x8dc>)
 8012d02:	811a      	strh	r2, [r3, #8]
      else      ParamTab[VTF] &= ~D_HID;
      break;
 8012d04:	e2b1      	b.n	801326a <Update_Blink+0xdea>
      else      ParamTab[VTF] &= ~D_HID;
 8012d06:	4b15      	ldr	r3, [pc, #84]	; (8012d5c <Update_Blink+0x8dc>)
 8012d08:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8012d0c:	f023 0301 	bic.w	r3, r3, #1
 8012d10:	b21a      	sxth	r2, r3
 8012d12:	4b12      	ldr	r3, [pc, #72]	; (8012d5c <Update_Blink+0x8dc>)
 8012d14:	811a      	strh	r2, [r3, #8]
      break;
 8012d16:	e2a8      	b.n	801326a <Update_Blink+0xdea>

    case TR_TYPE:
      if(Twink) ParamTab[VTF] |=  D_HID;
 8012d18:	4b0d      	ldr	r3, [pc, #52]	; (8012d50 <Update_Blink+0x8d0>)
 8012d1a:	781b      	ldrb	r3, [r3, #0]
 8012d1c:	b2db      	uxtb	r3, r3
 8012d1e:	2b00      	cmp	r3, #0
 8012d20:	d008      	beq.n	8012d34 <Update_Blink+0x8b4>
 8012d22:	4b0e      	ldr	r3, [pc, #56]	; (8012d5c <Update_Blink+0x8dc>)
 8012d24:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8012d28:	f043 0301 	orr.w	r3, r3, #1
 8012d2c:	b21a      	sxth	r2, r3
 8012d2e:	4b0b      	ldr	r3, [pc, #44]	; (8012d5c <Update_Blink+0x8dc>)
 8012d30:	811a      	strh	r2, [r3, #8]
      else      ParamTab[VTF] &= ~D_HID;
      break;
 8012d32:	e29a      	b.n	801326a <Update_Blink+0xdea>
      else      ParamTab[VTF] &= ~D_HID;
 8012d34:	4b09      	ldr	r3, [pc, #36]	; (8012d5c <Update_Blink+0x8dc>)
 8012d36:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8012d3a:	f023 0301 	bic.w	r3, r3, #1
 8012d3e:	b21a      	sxth	r2, r3
 8012d40:	4b06      	ldr	r3, [pc, #24]	; (8012d5c <Update_Blink+0x8dc>)
 8012d42:	811a      	strh	r2, [r3, #8]
      break;
 8012d44:	e291      	b.n	801326a <Update_Blink+0xdea>
 8012d46:	bf00      	nop
 8012d48:	08001ce8 	.word	0x08001ce8
 8012d4c:	2000283c 	.word	0x2000283c
 8012d50:	2000077c 	.word	0x2000077c
 8012d54:	08000960 	.word	0x08000960
 8012d58:	0800097c 	.word	0x0800097c
 8012d5c:	20000140 	.word	0x20000140
 8012d60:	200007a0 	.word	0x200007a0
 8012d64:	0800215c 	.word	0x0800215c
 8012d68:	20000298 	.word	0x20000298
 8012d6c:	08000988 	.word	0x08000988
 8012d70:	0800098c 	.word	0x0800098c
 8012d74:	08002130 	.word	0x08002130
 8012d78:	08002108 	.word	0x08002108
 8012d7c:	08001d00 	.word	0x08001d00
 8012d80:	08000990 	.word	0x08000990
 8012d84:	08000998 	.word	0x08000998
 8012d88:	0800099c 	.word	0x0800099c
 8012d8c:	0800095c 	.word	0x0800095c

    case EXT_REFN:
      SetColor(GRY, TCOLOR[EX]);
 8012d90:	f64f 031f 	movw	r3, #63519	; 0xf81f
 8012d94:	4619      	mov	r1, r3
 8012d96:	f643 10e7 	movw	r0, #14823	; 0x39e7
 8012d9a:	f7fa ff59 	bl	800dc50 <SetColor>
      Draw_Circle_D(Twink, S_X[i]-3, TITLE_Y_POS, 11, 1, 6*5);
 8012d9e:	4b93      	ldr	r3, [pc, #588]	; (8012fec <Update_Blink+0xb6c>)
 8012da0:	781b      	ldrb	r3, [r3, #0]
 8012da2:	b2d8      	uxtb	r0, r3
 8012da4:	89bb      	ldrh	r3, [r7, #12]
 8012da6:	4a92      	ldr	r2, [pc, #584]	; (8012ff0 <Update_Blink+0xb70>)
 8012da8:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8012dac:	b29b      	uxth	r3, r3
 8012dae:	3b03      	subs	r3, #3
 8012db0:	b29b      	uxth	r3, r3
 8012db2:	b219      	sxth	r1, r3
 8012db4:	231e      	movs	r3, #30
 8012db6:	9301      	str	r3, [sp, #4]
 8012db8:	2301      	movs	r3, #1
 8012dba:	9300      	str	r3, [sp, #0]
 8012dbc:	230b      	movs	r3, #11
 8012dbe:	22e1      	movs	r2, #225	; 0xe1
 8012dc0:	f7fb f834 	bl	800de2c <Draw_Circle_D>
      DispStr(S_X[i], TITLE_Y_POS, Twink, (char*)(List[EXT_HIDE].Val? I[List[EXT_REFN].Val] : I[6]));
 8012dc4:	89bb      	ldrh	r3, [r7, #12]
 8012dc6:	4a8a      	ldr	r2, [pc, #552]	; (8012ff0 <Update_Blink+0xb70>)
 8012dc8:	f932 0013 	ldrsh.w	r0, [r2, r3, lsl #1]
 8012dcc:	4b87      	ldr	r3, [pc, #540]	; (8012fec <Update_Blink+0xb6c>)
 8012dce:	781b      	ldrb	r3, [r3, #0]
 8012dd0:	b2da      	uxtb	r2, r3
 8012dd2:	4b88      	ldr	r3, [pc, #544]	; (8012ff4 <Update_Blink+0xb74>)
 8012dd4:	f9b3 30e4 	ldrsh.w	r3, [r3, #228]	; 0xe4
 8012dd8:	2b00      	cmp	r3, #0
 8012dda:	d00a      	beq.n	8012df2 <Update_Blink+0x972>
 8012ddc:	4b85      	ldr	r3, [pc, #532]	; (8012ff4 <Update_Blink+0xb74>)
 8012dde:	f9b3 30d4 	ldrsh.w	r3, [r3, #212]	; 0xd4
 8012de2:	4619      	mov	r1, r3
 8012de4:	460b      	mov	r3, r1
 8012de6:	005b      	lsls	r3, r3, #1
 8012de8:	440b      	add	r3, r1
 8012dea:	005b      	lsls	r3, r3, #1
 8012dec:	4982      	ldr	r1, [pc, #520]	; (8012ff8 <Update_Blink+0xb78>)
 8012dee:	440b      	add	r3, r1
 8012df0:	e000      	b.n	8012df4 <Update_Blink+0x974>
 8012df2:	4b82      	ldr	r3, [pc, #520]	; (8012ffc <Update_Blink+0xb7c>)
 8012df4:	21e1      	movs	r1, #225	; 0xe1
 8012df6:	f7fa ff43 	bl	800dc80 <DispStr>
      ParamTab[P2F] &= ~D_HID;
 8012dfa:	4b81      	ldr	r3, [pc, #516]	; (8013000 <Update_Blink+0xb80>)
 8012dfc:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8012e00:	f023 0301 	bic.w	r3, r3, #1
 8012e04:	b21a      	sxth	r2, r3
 8012e06:	4b7e      	ldr	r3, [pc, #504]	; (8013000 <Update_Blink+0xb80>)
 8012e08:	805a      	strh	r2, [r3, #2]
      break;
 8012e0a:	e22e      	b.n	801326a <Update_Blink+0xdea>

    case EXT_POSI:
      if(Twink) ParamTab[P2F] |=  D_HID;
 8012e0c:	4b77      	ldr	r3, [pc, #476]	; (8012fec <Update_Blink+0xb6c>)
 8012e0e:	781b      	ldrb	r3, [r3, #0]
 8012e10:	b2db      	uxtb	r3, r3
 8012e12:	2b00      	cmp	r3, #0
 8012e14:	d008      	beq.n	8012e28 <Update_Blink+0x9a8>
 8012e16:	4b7a      	ldr	r3, [pc, #488]	; (8013000 <Update_Blink+0xb80>)
 8012e18:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8012e1c:	f043 0301 	orr.w	r3, r3, #1
 8012e20:	b21a      	sxth	r2, r3
 8012e22:	4b77      	ldr	r3, [pc, #476]	; (8013000 <Update_Blink+0xb80>)
 8012e24:	805a      	strh	r2, [r3, #2]
      else      ParamTab[P2F] &= ~D_HID;
      break;
 8012e26:	e220      	b.n	801326a <Update_Blink+0xdea>
      else      ParamTab[P2F] &= ~D_HID;
 8012e28:	4b75      	ldr	r3, [pc, #468]	; (8013000 <Update_Blink+0xb80>)
 8012e2a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8012e2e:	f023 0301 	bic.w	r3, r3, #1
 8012e32:	b21a      	sxth	r2, r3
 8012e34:	4b72      	ldr	r3, [pc, #456]	; (8013000 <Update_Blink+0xb80>)
 8012e36:	805a      	strh	r2, [r3, #2]
      break;
 8012e38:	e217      	b.n	801326a <Update_Blink+0xdea>

    case EXT_HIDE:
      SetColor(GRY, TCOLOR[EX]);
 8012e3a:	f64f 031f 	movw	r3, #63519	; 0xf81f
 8012e3e:	4619      	mov	r1, r3
 8012e40:	f643 10e7 	movw	r0, #14823	; 0x39e7
 8012e44:	f7fa ff04 	bl	800dc50 <SetColor>
      Draw_Circle_D(Twink, S_X[i]-3, TITLE_Y_POS, 11, 1, 6*5);
 8012e48:	4b68      	ldr	r3, [pc, #416]	; (8012fec <Update_Blink+0xb6c>)
 8012e4a:	781b      	ldrb	r3, [r3, #0]
 8012e4c:	b2d8      	uxtb	r0, r3
 8012e4e:	89bb      	ldrh	r3, [r7, #12]
 8012e50:	4a67      	ldr	r2, [pc, #412]	; (8012ff0 <Update_Blink+0xb70>)
 8012e52:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8012e56:	b29b      	uxth	r3, r3
 8012e58:	3b03      	subs	r3, #3
 8012e5a:	b29b      	uxth	r3, r3
 8012e5c:	b219      	sxth	r1, r3
 8012e5e:	231e      	movs	r3, #30
 8012e60:	9301      	str	r3, [sp, #4]
 8012e62:	2301      	movs	r3, #1
 8012e64:	9300      	str	r3, [sp, #0]
 8012e66:	230b      	movs	r3, #11
 8012e68:	22e1      	movs	r2, #225	; 0xe1
 8012e6a:	f7fa ffdf 	bl	800de2c <Draw_Circle_D>
      DispStr(S_X[i], TITLE_Y_POS, Twink, (char*)(List[EXT_HIDE].Val? I[List[EXT_REFN].Val] : I[6]));
 8012e6e:	89bb      	ldrh	r3, [r7, #12]
 8012e70:	4a5f      	ldr	r2, [pc, #380]	; (8012ff0 <Update_Blink+0xb70>)
 8012e72:	f932 0013 	ldrsh.w	r0, [r2, r3, lsl #1]
 8012e76:	4b5d      	ldr	r3, [pc, #372]	; (8012fec <Update_Blink+0xb6c>)
 8012e78:	781b      	ldrb	r3, [r3, #0]
 8012e7a:	b2da      	uxtb	r2, r3
 8012e7c:	4b5d      	ldr	r3, [pc, #372]	; (8012ff4 <Update_Blink+0xb74>)
 8012e7e:	f9b3 30e4 	ldrsh.w	r3, [r3, #228]	; 0xe4
 8012e82:	2b00      	cmp	r3, #0
 8012e84:	d00a      	beq.n	8012e9c <Update_Blink+0xa1c>
 8012e86:	4b5b      	ldr	r3, [pc, #364]	; (8012ff4 <Update_Blink+0xb74>)
 8012e88:	f9b3 30d4 	ldrsh.w	r3, [r3, #212]	; 0xd4
 8012e8c:	4619      	mov	r1, r3
 8012e8e:	460b      	mov	r3, r1
 8012e90:	005b      	lsls	r3, r3, #1
 8012e92:	440b      	add	r3, r1
 8012e94:	005b      	lsls	r3, r3, #1
 8012e96:	4958      	ldr	r1, [pc, #352]	; (8012ff8 <Update_Blink+0xb78>)
 8012e98:	440b      	add	r3, r1
 8012e9a:	e000      	b.n	8012e9e <Update_Blink+0xa1e>
 8012e9c:	4b57      	ldr	r3, [pc, #348]	; (8012ffc <Update_Blink+0xb7c>)
 8012e9e:	21e1      	movs	r1, #225	; 0xe1
 8012ea0:	f7fa feee 	bl	800dc80 <DispStr>
      ParamTab[P2F] &= ~D_HID;
 8012ea4:	4b56      	ldr	r3, [pc, #344]	; (8013000 <Update_Blink+0xb80>)
 8012ea6:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8012eaa:	f023 0301 	bic.w	r3, r3, #1
 8012eae:	b21a      	sxth	r2, r3
 8012eb0:	4b53      	ldr	r3, [pc, #332]	; (8013000 <Update_Blink+0xb80>)
 8012eb2:	805a      	strh	r2, [r3, #2]
      break;
 8012eb4:	e1d9      	b.n	801326a <Update_Blink+0xdea>

    case TPYE_OUT:
      SetColor(GRY, TCOLOR[SN]);
 8012eb6:	f240 531f 	movw	r3, #1311	; 0x51f
 8012eba:	4619      	mov	r1, r3
 8012ebc:	f643 10e7 	movw	r0, #14823	; 0x39e7
 8012ec0:	f7fa fec6 	bl	800dc50 <SetColor>
      Draw_Circle_D(Twink, S_X[TPYE_OUT]-3, LABLE_Y, 11, 0, 6*9);
 8012ec4:	4b49      	ldr	r3, [pc, #292]	; (8012fec <Update_Blink+0xb6c>)
 8012ec6:	781b      	ldrb	r3, [r3, #0]
 8012ec8:	b2d8      	uxtb	r0, r3
 8012eca:	2307      	movs	r3, #7
 8012ecc:	b29b      	uxth	r3, r3
 8012ece:	3b03      	subs	r3, #3
 8012ed0:	b29b      	uxth	r3, r3
 8012ed2:	b219      	sxth	r1, r3
 8012ed4:	2336      	movs	r3, #54	; 0x36
 8012ed6:	9301      	str	r3, [sp, #4]
 8012ed8:	2300      	movs	r3, #0
 8012eda:	9300      	str	r3, [sp, #0]
 8012edc:	230b      	movs	r3, #11
 8012ede:	2203      	movs	r2, #3
 8012ee0:	f7fa ffa4 	bl	800de2c <Draw_Circle_D>
      DispStr(S_X[i],    LABLE_Y, Twink, "FO: ");
 8012ee4:	89bb      	ldrh	r3, [r7, #12]
 8012ee6:	4a42      	ldr	r2, [pc, #264]	; (8012ff0 <Update_Blink+0xb70>)
 8012ee8:	f932 0013 	ldrsh.w	r0, [r2, r3, lsl #1]
 8012eec:	4b3f      	ldr	r3, [pc, #252]	; (8012fec <Update_Blink+0xb6c>)
 8012eee:	781b      	ldrb	r3, [r3, #0]
 8012ef0:	b2da      	uxtb	r2, r3
 8012ef2:	4b44      	ldr	r3, [pc, #272]	; (8013004 <Update_Blink+0xb84>)
 8012ef4:	2103      	movs	r1, #3
 8012ef6:	f7fa fec3 	bl	800dc80 <DispStr>
      DispStr(S_X[i]+24, LABLE_Y, Twink, "     ");
 8012efa:	89bb      	ldrh	r3, [r7, #12]
 8012efc:	4a3c      	ldr	r2, [pc, #240]	; (8012ff0 <Update_Blink+0xb70>)
 8012efe:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8012f02:	b29b      	uxth	r3, r3
 8012f04:	3318      	adds	r3, #24
 8012f06:	b29b      	uxth	r3, r3
 8012f08:	b218      	sxth	r0, r3
 8012f0a:	4b38      	ldr	r3, [pc, #224]	; (8012fec <Update_Blink+0xb6c>)
 8012f0c:	781b      	ldrb	r3, [r3, #0]
 8012f0e:	b2da      	uxtb	r2, r3
 8012f10:	4b3d      	ldr	r3, [pc, #244]	; (8013008 <Update_Blink+0xb88>)
 8012f12:	2103      	movs	r1, #3
 8012f14:	f7fa feb4 	bl	800dc80 <DispStr>
      DispStr(S_X[i]+24, LABLE_Y, Twink, (char*)OT[List[i].Val]);
 8012f18:	89bb      	ldrh	r3, [r7, #12]
 8012f1a:	4a35      	ldr	r2, [pc, #212]	; (8012ff0 <Update_Blink+0xb70>)
 8012f1c:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8012f20:	b29b      	uxth	r3, r3
 8012f22:	3318      	adds	r3, #24
 8012f24:	b29b      	uxth	r3, r3
 8012f26:	b218      	sxth	r0, r3
 8012f28:	4b30      	ldr	r3, [pc, #192]	; (8012fec <Update_Blink+0xb6c>)
 8012f2a:	781b      	ldrb	r3, [r3, #0]
 8012f2c:	b2da      	uxtb	r2, r3
 8012f2e:	89bb      	ldrh	r3, [r7, #12]
 8012f30:	4930      	ldr	r1, [pc, #192]	; (8012ff4 <Update_Blink+0xb74>)
 8012f32:	00db      	lsls	r3, r3, #3
 8012f34:	440b      	add	r3, r1
 8012f36:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8012f3a:	4619      	mov	r1, r3
 8012f3c:	460b      	mov	r3, r1
 8012f3e:	005b      	lsls	r3, r3, #1
 8012f40:	440b      	add	r3, r1
 8012f42:	005b      	lsls	r3, r3, #1
 8012f44:	4931      	ldr	r1, [pc, #196]	; (801300c <Update_Blink+0xb8c>)
 8012f46:	440b      	add	r3, r1
 8012f48:	2103      	movs	r1, #3
 8012f4a:	f7fa fe99 	bl	800dc80 <DispStr>
      break;
 8012f4e:	e18c      	b.n	801326a <Update_Blink+0xdea>

    case FREQ_OUT:
      SetColor(GRY, TCOLOR[SN]);
 8012f50:	f240 531f 	movw	r3, #1311	; 0x51f
 8012f54:	4619      	mov	r1, r3
 8012f56:	f643 10e7 	movw	r0, #14823	; 0x39e7
 8012f5a:	f7fa fe79 	bl	800dc50 <SetColor>
      Draw_Circle_D(Twink, S_X[FREQ_OUT]-3, LABLE_Y, 11, 0, 6*9);
 8012f5e:	4b23      	ldr	r3, [pc, #140]	; (8012fec <Update_Blink+0xb6c>)
 8012f60:	781b      	ldrb	r3, [r3, #0]
 8012f62:	b2d8      	uxtb	r0, r3
 8012f64:	2307      	movs	r3, #7
 8012f66:	b29b      	uxth	r3, r3
 8012f68:	3b03      	subs	r3, #3
 8012f6a:	b29b      	uxth	r3, r3
 8012f6c:	b219      	sxth	r1, r3
 8012f6e:	2336      	movs	r3, #54	; 0x36
 8012f70:	9301      	str	r3, [sp, #4]
 8012f72:	2300      	movs	r3, #0
 8012f74:	9300      	str	r3, [sp, #0]
 8012f76:	230b      	movs	r3, #11
 8012f78:	2203      	movs	r2, #3
 8012f7a:	f7fa ff57 	bl	800de2c <Draw_Circle_D>
      DispStr(S_X[i],    LABLE_Y, Twink, "FO: ");
 8012f7e:	89bb      	ldrh	r3, [r7, #12]
 8012f80:	4a1b      	ldr	r2, [pc, #108]	; (8012ff0 <Update_Blink+0xb70>)
 8012f82:	f932 0013 	ldrsh.w	r0, [r2, r3, lsl #1]
 8012f86:	4b19      	ldr	r3, [pc, #100]	; (8012fec <Update_Blink+0xb6c>)
 8012f88:	781b      	ldrb	r3, [r3, #0]
 8012f8a:	b2da      	uxtb	r2, r3
 8012f8c:	4b1d      	ldr	r3, [pc, #116]	; (8013004 <Update_Blink+0xb84>)
 8012f8e:	2103      	movs	r1, #3
 8012f90:	f7fa fe76 	bl	800dc80 <DispStr>
      DispStr(S_X[i]+24, LABLE_Y, Twink, "     ");
 8012f94:	89bb      	ldrh	r3, [r7, #12]
 8012f96:	4a16      	ldr	r2, [pc, #88]	; (8012ff0 <Update_Blink+0xb70>)
 8012f98:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8012f9c:	b29b      	uxth	r3, r3
 8012f9e:	3318      	adds	r3, #24
 8012fa0:	b29b      	uxth	r3, r3
 8012fa2:	b218      	sxth	r0, r3
 8012fa4:	4b11      	ldr	r3, [pc, #68]	; (8012fec <Update_Blink+0xb6c>)
 8012fa6:	781b      	ldrb	r3, [r3, #0]
 8012fa8:	b2da      	uxtb	r2, r3
 8012faa:	4b17      	ldr	r3, [pc, #92]	; (8013008 <Update_Blink+0xb88>)
 8012fac:	2103      	movs	r1, #3
 8012fae:	f7fa fe67 	bl	800dc80 <DispStr>
      DispStr(S_X[i]+24, LABLE_Y, Twink, (char*)Q[List[i].Val]);
 8012fb2:	89bb      	ldrh	r3, [r7, #12]
 8012fb4:	4a0e      	ldr	r2, [pc, #56]	; (8012ff0 <Update_Blink+0xb70>)
 8012fb6:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8012fba:	b29b      	uxth	r3, r3
 8012fbc:	3318      	adds	r3, #24
 8012fbe:	b29b      	uxth	r3, r3
 8012fc0:	b218      	sxth	r0, r3
 8012fc2:	4b0a      	ldr	r3, [pc, #40]	; (8012fec <Update_Blink+0xb6c>)
 8012fc4:	781b      	ldrb	r3, [r3, #0]
 8012fc6:	b2da      	uxtb	r2, r3
 8012fc8:	89bb      	ldrh	r3, [r7, #12]
 8012fca:	490a      	ldr	r1, [pc, #40]	; (8012ff4 <Update_Blink+0xb74>)
 8012fcc:	00db      	lsls	r3, r3, #3
 8012fce:	440b      	add	r3, r1
 8012fd0:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8012fd4:	4619      	mov	r1, r3
 8012fd6:	460b      	mov	r3, r1
 8012fd8:	005b      	lsls	r3, r3, #1
 8012fda:	440b      	add	r3, r1
 8012fdc:	005b      	lsls	r3, r3, #1
 8012fde:	490c      	ldr	r1, [pc, #48]	; (8013010 <Update_Blink+0xb90>)
 8012fe0:	440b      	add	r3, r1
 8012fe2:	2103      	movs	r1, #3
 8012fe4:	f7fa fe4c 	bl	800dc80 <DispStr>
      break;
 8012fe8:	e13f      	b.n	801326a <Update_Blink+0xdea>
 8012fea:	bf00      	nop
 8012fec:	2000077c 	.word	0x2000077c
 8012ff0:	0800215c 	.word	0x0800215c
 8012ff4:	20000298 	.word	0x20000298
 8012ff8:	08001c88 	.word	0x08001c88
 8012ffc:	08001cac 	.word	0x08001cac
 8013000:	20000140 	.word	0x20000140
 8013004:	080009a0 	.word	0x080009a0
 8013008:	08000990 	.word	0x08000990
 801300c:	08001d50 	.word	0x08001d50
 8013010:	08001e98 	.word	0x08001e98

    case FREQ_DUT:
      SetColor(GRY, TCOLOR[SN]);
 8013014:	f240 531f 	movw	r3, #1311	; 0x51f
 8013018:	4619      	mov	r1, r3
 801301a:	f643 10e7 	movw	r0, #14823	; 0x39e7
 801301e:	f7fa fe17 	bl	800dc50 <SetColor>
      Value2Str(NumStr, List[i].Val*10, List[i].PTR, 2, UNSIGN);
 8013022:	89bb      	ldrh	r3, [r7, #12]
 8013024:	4a96      	ldr	r2, [pc, #600]	; (8013280 <Update_Blink+0xe00>)
 8013026:	00db      	lsls	r3, r3, #3
 8013028:	4413      	add	r3, r2
 801302a:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801302e:	461a      	mov	r2, r3
 8013030:	4613      	mov	r3, r2
 8013032:	009b      	lsls	r3, r3, #2
 8013034:	4413      	add	r3, r2
 8013036:	005b      	lsls	r3, r3, #1
 8013038:	4619      	mov	r1, r3
 801303a:	89bb      	ldrh	r3, [r7, #12]
 801303c:	4a90      	ldr	r2, [pc, #576]	; (8013280 <Update_Blink+0xe00>)
 801303e:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 8013042:	2301      	movs	r3, #1
 8013044:	9300      	str	r3, [sp, #0]
 8013046:	2302      	movs	r3, #2
 8013048:	488e      	ldr	r0, [pc, #568]	; (8013284 <Update_Blink+0xe04>)
 801304a:	f7fe fcf1 	bl	8011a30 <Value2Str>
      Draw_Circle_D(Twink, S_X[FREQ_DUT]-3, LABLE_Y, 11, 0, 6*9);
 801304e:	4b8e      	ldr	r3, [pc, #568]	; (8013288 <Update_Blink+0xe08>)
 8013050:	781b      	ldrb	r3, [r3, #0]
 8013052:	b2d8      	uxtb	r0, r3
 8013054:	2307      	movs	r3, #7
 8013056:	b29b      	uxth	r3, r3
 8013058:	3b03      	subs	r3, #3
 801305a:	b29b      	uxth	r3, r3
 801305c:	b219      	sxth	r1, r3
 801305e:	2336      	movs	r3, #54	; 0x36
 8013060:	9301      	str	r3, [sp, #4]
 8013062:	2300      	movs	r3, #0
 8013064:	9300      	str	r3, [sp, #0]
 8013066:	230b      	movs	r3, #11
 8013068:	2203      	movs	r2, #3
 801306a:	f7fa fedf 	bl	800de2c <Draw_Circle_D>
      DispStr(S_X[i],    LABLE_Y, Twink, "Duty: ");
 801306e:	89bb      	ldrh	r3, [r7, #12]
 8013070:	4a86      	ldr	r2, [pc, #536]	; (801328c <Update_Blink+0xe0c>)
 8013072:	f932 0013 	ldrsh.w	r0, [r2, r3, lsl #1]
 8013076:	4b84      	ldr	r3, [pc, #528]	; (8013288 <Update_Blink+0xe08>)
 8013078:	781b      	ldrb	r3, [r3, #0]
 801307a:	b2da      	uxtb	r2, r3
 801307c:	4b84      	ldr	r3, [pc, #528]	; (8013290 <Update_Blink+0xe10>)
 801307e:	2103      	movs	r1, #3
 8013080:	f7fa fdfe 	bl	800dc80 <DispStr>
      DispStr(S_X[i]+36, LABLE_Y, Twink, "   ");
 8013084:	89bb      	ldrh	r3, [r7, #12]
 8013086:	4a81      	ldr	r2, [pc, #516]	; (801328c <Update_Blink+0xe0c>)
 8013088:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 801308c:	b29b      	uxth	r3, r3
 801308e:	3324      	adds	r3, #36	; 0x24
 8013090:	b29b      	uxth	r3, r3
 8013092:	b218      	sxth	r0, r3
 8013094:	4b7c      	ldr	r3, [pc, #496]	; (8013288 <Update_Blink+0xe08>)
 8013096:	781b      	ldrb	r3, [r3, #0]
 8013098:	b2da      	uxtb	r2, r3
 801309a:	4b7e      	ldr	r3, [pc, #504]	; (8013294 <Update_Blink+0xe14>)
 801309c:	2103      	movs	r1, #3
 801309e:	f7fa fdef 	bl	800dc80 <DispStr>
      DispStr(S_X[i]+36, LABLE_Y, Twink, (char *)NumStr);
 80130a2:	89bb      	ldrh	r3, [r7, #12]
 80130a4:	4a79      	ldr	r2, [pc, #484]	; (801328c <Update_Blink+0xe0c>)
 80130a6:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 80130aa:	b29b      	uxth	r3, r3
 80130ac:	3324      	adds	r3, #36	; 0x24
 80130ae:	b29b      	uxth	r3, r3
 80130b0:	b218      	sxth	r0, r3
 80130b2:	4b75      	ldr	r3, [pc, #468]	; (8013288 <Update_Blink+0xe08>)
 80130b4:	781b      	ldrb	r3, [r3, #0]
 80130b6:	b2da      	uxtb	r2, r3
 80130b8:	4b72      	ldr	r3, [pc, #456]	; (8013284 <Update_Blink+0xe04>)
 80130ba:	2103      	movs	r1, #3
 80130bc:	f7fa fde0 	bl	800dc80 <DispStr>
      break;
 80130c0:	e0d3      	b.n	801326a <Update_Blink+0xdea>

    case AUTO_CAL:
      if(Twink) ParamTab[P1F] |=  W_HID;
 80130c2:	4b71      	ldr	r3, [pc, #452]	; (8013288 <Update_Blink+0xe08>)
 80130c4:	781b      	ldrb	r3, [r3, #0]
 80130c6:	b2db      	uxtb	r3, r3
 80130c8:	2b00      	cmp	r3, #0
 80130ca:	d008      	beq.n	80130de <Update_Blink+0xc5e>
 80130cc:	4b72      	ldr	r3, [pc, #456]	; (8013298 <Update_Blink+0xe18>)
 80130ce:	f9b3 3000 	ldrsh.w	r3, [r3]
 80130d2:	f043 0304 	orr.w	r3, r3, #4
 80130d6:	b21a      	sxth	r2, r3
 80130d8:	4b6f      	ldr	r3, [pc, #444]	; (8013298 <Update_Blink+0xe18>)
 80130da:	801a      	strh	r2, [r3, #0]
 80130dc:	e007      	b.n	80130ee <Update_Blink+0xc6e>
      else      ParamTab[P1F] &= ~W_HID;
 80130de:	4b6e      	ldr	r3, [pc, #440]	; (8013298 <Update_Blink+0xe18>)
 80130e0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80130e4:	f023 0304 	bic.w	r3, r3, #4
 80130e8:	b21a      	sxth	r2, r3
 80130ea:	4b6b      	ldr	r3, [pc, #428]	; (8013298 <Update_Blink+0xe18>)
 80130ec:	801a      	strh	r2, [r3, #0]

      SetColor(GRY, TCOLOR[ST]);
 80130ee:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 80130f2:	4619      	mov	r1, r3
 80130f4:	f643 10e7 	movw	r0, #14823	; 0x39e7
 80130f8:	f7fa fdaa 	bl	800dc50 <SetColor>
      Draw_Circle_D(Twink, S_X[i]-3, LABLE_Y, 11, 0, 6*9);
 80130fc:	4b62      	ldr	r3, [pc, #392]	; (8013288 <Update_Blink+0xe08>)
 80130fe:	781b      	ldrb	r3, [r3, #0]
 8013100:	b2d8      	uxtb	r0, r3
 8013102:	89bb      	ldrh	r3, [r7, #12]
 8013104:	4a61      	ldr	r2, [pc, #388]	; (801328c <Update_Blink+0xe0c>)
 8013106:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 801310a:	b29b      	uxth	r3, r3
 801310c:	3b03      	subs	r3, #3
 801310e:	b29b      	uxth	r3, r3
 8013110:	b219      	sxth	r1, r3
 8013112:	2336      	movs	r3, #54	; 0x36
 8013114:	9301      	str	r3, [sp, #4]
 8013116:	2300      	movs	r3, #0
 8013118:	9300      	str	r3, [sp, #0]
 801311a:	230b      	movs	r3, #11
 801311c:	2203      	movs	r2, #3
 801311e:	f7fa fe85 	bl	800de2c <Draw_Circle_D>
      DispStr( S_X[i]+0, LABLE_Y, Twink+PRN,  "Press:   ");
 8013122:	89bb      	ldrh	r3, [r7, #12]
 8013124:	4a59      	ldr	r2, [pc, #356]	; (801328c <Update_Blink+0xe0c>)
 8013126:	f932 0013 	ldrsh.w	r0, [r2, r3, lsl #1]
 801312a:	4b57      	ldr	r3, [pc, #348]	; (8013288 <Update_Blink+0xe08>)
 801312c:	781b      	ldrb	r3, [r3, #0]
 801312e:	b2da      	uxtb	r2, r3
 8013130:	4b5a      	ldr	r3, [pc, #360]	; (801329c <Update_Blink+0xe1c>)
 8013132:	2103      	movs	r1, #3
 8013134:	f7fa fda4 	bl	800dc80 <DispStr>
      DispStr(S_X[i]+40, LABLE_Y, Twink+SYMB, "{|");//������ͣͼ��
 8013138:	89bb      	ldrh	r3, [r7, #12]
 801313a:	4a54      	ldr	r2, [pc, #336]	; (801328c <Update_Blink+0xe0c>)
 801313c:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8013140:	b29b      	uxth	r3, r3
 8013142:	3328      	adds	r3, #40	; 0x28
 8013144:	b29b      	uxth	r3, r3
 8013146:	b218      	sxth	r0, r3
 8013148:	4b4f      	ldr	r3, [pc, #316]	; (8013288 <Update_Blink+0xe08>)
 801314a:	781b      	ldrb	r3, [r3, #0]
 801314c:	b2db      	uxtb	r3, r3
 801314e:	3310      	adds	r3, #16
 8013150:	b2da      	uxtb	r2, r3
 8013152:	4b53      	ldr	r3, [pc, #332]	; (80132a0 <Update_Blink+0xe20>)
 8013154:	2103      	movs	r1, #3
 8013156:	f7fa fd93 	bl	800dc80 <DispStr>
      break;
 801315a:	e086      	b.n	801326a <Update_Blink+0xdea>

    case RESTORE:
      SetColor(GRY, TCOLOR[ST]);
 801315c:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8013160:	4619      	mov	r1, r3
 8013162:	f643 10e7 	movw	r0, #14823	; 0x39e7
 8013166:	f7fa fd73 	bl	800dc50 <SetColor>
      Draw_Circle_D(Twink, S_X[i]-3, LABLE_Y, 11, 0, 6*9);
 801316a:	4b47      	ldr	r3, [pc, #284]	; (8013288 <Update_Blink+0xe08>)
 801316c:	781b      	ldrb	r3, [r3, #0]
 801316e:	b2d8      	uxtb	r0, r3
 8013170:	89bb      	ldrh	r3, [r7, #12]
 8013172:	4a46      	ldr	r2, [pc, #280]	; (801328c <Update_Blink+0xe0c>)
 8013174:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8013178:	b29b      	uxth	r3, r3
 801317a:	3b03      	subs	r3, #3
 801317c:	b29b      	uxth	r3, r3
 801317e:	b219      	sxth	r1, r3
 8013180:	2336      	movs	r3, #54	; 0x36
 8013182:	9301      	str	r3, [sp, #4]
 8013184:	2300      	movs	r3, #0
 8013186:	9300      	str	r3, [sp, #0]
 8013188:	230b      	movs	r3, #11
 801318a:	2203      	movs	r2, #3
 801318c:	f7fa fe4e 	bl	800de2c <Draw_Circle_D>
      DispStr( S_X[i]+0, LABLE_Y, Twink+PRN,  "Press:   ");
 8013190:	89bb      	ldrh	r3, [r7, #12]
 8013192:	4a3e      	ldr	r2, [pc, #248]	; (801328c <Update_Blink+0xe0c>)
 8013194:	f932 0013 	ldrsh.w	r0, [r2, r3, lsl #1]
 8013198:	4b3b      	ldr	r3, [pc, #236]	; (8013288 <Update_Blink+0xe08>)
 801319a:	781b      	ldrb	r3, [r3, #0]
 801319c:	b2da      	uxtb	r2, r3
 801319e:	4b3f      	ldr	r3, [pc, #252]	; (801329c <Update_Blink+0xe1c>)
 80131a0:	2103      	movs	r1, #3
 80131a2:	f7fa fd6d 	bl	800dc80 <DispStr>
      DispStr( S_X[i]+40, LABLE_Y, Twink+SYMB, "{|");//������ͣͼ��
 80131a6:	89bb      	ldrh	r3, [r7, #12]
 80131a8:	4a38      	ldr	r2, [pc, #224]	; (801328c <Update_Blink+0xe0c>)
 80131aa:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 80131ae:	b29b      	uxth	r3, r3
 80131b0:	3328      	adds	r3, #40	; 0x28
 80131b2:	b29b      	uxth	r3, r3
 80131b4:	b218      	sxth	r0, r3
 80131b6:	4b34      	ldr	r3, [pc, #208]	; (8013288 <Update_Blink+0xe08>)
 80131b8:	781b      	ldrb	r3, [r3, #0]
 80131ba:	b2db      	uxtb	r3, r3
 80131bc:	3310      	adds	r3, #16
 80131be:	b2da      	uxtb	r2, r3
 80131c0:	4b37      	ldr	r3, [pc, #220]	; (80132a0 <Update_Blink+0xe20>)
 80131c2:	2103      	movs	r1, #3
 80131c4:	f7fa fd5c 	bl	800dc80 <DispStr>
      break;
 80131c8:	e04f      	b.n	801326a <Update_Blink+0xdea>

    case STANDBY:
      SetColor(GRY, TCOLOR[ST]);
 80131ca:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 80131ce:	4619      	mov	r1, r3
 80131d0:	f643 10e7 	movw	r0, #14823	; 0x39e7
 80131d4:	f7fa fd3c 	bl	800dc50 <SetColor>
      Value2Str(NumStr, List[STANDBY].Val, NSTR[0], 2, UNSIGN);
 80131d8:	4b29      	ldr	r3, [pc, #164]	; (8013280 <Update_Blink+0xe00>)
 80131da:	f9b3 314c 	ldrsh.w	r3, [r3, #332]	; 0x14c
 80131de:	4619      	mov	r1, r3
 80131e0:	2301      	movs	r3, #1
 80131e2:	9300      	str	r3, [sp, #0]
 80131e4:	2302      	movs	r3, #2
 80131e6:	4a2f      	ldr	r2, [pc, #188]	; (80132a4 <Update_Blink+0xe24>)
 80131e8:	4826      	ldr	r0, [pc, #152]	; (8013284 <Update_Blink+0xe04>)
 80131ea:	f7fe fc21 	bl	8011a30 <Value2Str>
      Draw_Circle_D(Twink, S_X[i]-3, LABLE_Y, 11, 0, 6*9);
 80131ee:	4b26      	ldr	r3, [pc, #152]	; (8013288 <Update_Blink+0xe08>)
 80131f0:	781b      	ldrb	r3, [r3, #0]
 80131f2:	b2d8      	uxtb	r0, r3
 80131f4:	89bb      	ldrh	r3, [r7, #12]
 80131f6:	4a25      	ldr	r2, [pc, #148]	; (801328c <Update_Blink+0xe0c>)
 80131f8:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 80131fc:	b29b      	uxth	r3, r3
 80131fe:	3b03      	subs	r3, #3
 8013200:	b29b      	uxth	r3, r3
 8013202:	b219      	sxth	r1, r3
 8013204:	2336      	movs	r3, #54	; 0x36
 8013206:	9301      	str	r3, [sp, #4]
 8013208:	2300      	movs	r3, #0
 801320a:	9300      	str	r3, [sp, #0]
 801320c:	230b      	movs	r3, #11
 801320e:	2203      	movs	r2, #3
 8013210:	f7fa fe0c 	bl	800de2c <Draw_Circle_D>
      DispStr(S_X[i],    LABLE_Y, Twink+PRN,  " ");
 8013214:	89bb      	ldrh	r3, [r7, #12]
 8013216:	4a1d      	ldr	r2, [pc, #116]	; (801328c <Update_Blink+0xe0c>)
 8013218:	f932 0013 	ldrsh.w	r0, [r2, r3, lsl #1]
 801321c:	4b1a      	ldr	r3, [pc, #104]	; (8013288 <Update_Blink+0xe08>)
 801321e:	781b      	ldrb	r3, [r3, #0]
 8013220:	b2da      	uxtb	r2, r3
 8013222:	4b21      	ldr	r3, [pc, #132]	; (80132a8 <Update_Blink+0xe28>)
 8013224:	2103      	movs	r1, #3
 8013226:	f7fa fd2b 	bl	800dc80 <DispStr>
      DispStr(S_X[i]+6, LABLE_Y, Twink+PRN,  (char *)NumStr);
 801322a:	89bb      	ldrh	r3, [r7, #12]
 801322c:	4a17      	ldr	r2, [pc, #92]	; (801328c <Update_Blink+0xe0c>)
 801322e:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8013232:	b29b      	uxth	r3, r3
 8013234:	3306      	adds	r3, #6
 8013236:	b29b      	uxth	r3, r3
 8013238:	b218      	sxth	r0, r3
 801323a:	4b13      	ldr	r3, [pc, #76]	; (8013288 <Update_Blink+0xe08>)
 801323c:	781b      	ldrb	r3, [r3, #0]
 801323e:	b2da      	uxtb	r2, r3
 8013240:	4b10      	ldr	r3, [pc, #64]	; (8013284 <Update_Blink+0xe04>)
 8013242:	2103      	movs	r1, #3
 8013244:	f7fa fd1c 	bl	800dc80 <DispStr>
      DispStr(S_X[i]+30, LABLE_Y, Twink+PRN,  "min ");
 8013248:	89bb      	ldrh	r3, [r7, #12]
 801324a:	4a10      	ldr	r2, [pc, #64]	; (801328c <Update_Blink+0xe0c>)
 801324c:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8013250:	b29b      	uxth	r3, r3
 8013252:	331e      	adds	r3, #30
 8013254:	b29b      	uxth	r3, r3
 8013256:	b218      	sxth	r0, r3
 8013258:	4b0b      	ldr	r3, [pc, #44]	; (8013288 <Update_Blink+0xe08>)
 801325a:	781b      	ldrb	r3, [r3, #0]
 801325c:	b2da      	uxtb	r2, r3
 801325e:	4b13      	ldr	r3, [pc, #76]	; (80132ac <Update_Blink+0xe2c>)
 8013260:	2103      	movs	r1, #3
 8013262:	f7fa fd0d 	bl	800dc80 <DispStr>
      break;
 8013266:	e000      	b.n	801326a <Update_Blink+0xdea>
      break;
 8013268:	bf00      	nop

    }
    if(i != V0_POSI)  ParamTab[P1F]   = L_HID ;//0513
 801326a:	89bb      	ldrh	r3, [r7, #12]
 801326c:	2b03      	cmp	r3, #3
 801326e:	d002      	beq.n	8013276 <Update_Blink+0xdf6>
 8013270:	4b09      	ldr	r3, [pc, #36]	; (8013298 <Update_Blink+0xe18>)
 8013272:	2202      	movs	r2, #2
 8013274:	801a      	strh	r2, [r3, #0]
  }
}
 8013276:	bf00      	nop
 8013278:	3714      	adds	r7, #20
 801327a:	46bd      	mov	sp, r7
 801327c:	bd90      	pop	{r4, r7, pc}
 801327e:	bf00      	nop
 8013280:	20000298 	.word	0x20000298
 8013284:	2000283c 	.word	0x2000283c
 8013288:	2000077c 	.word	0x2000077c
 801328c:	0800215c 	.word	0x0800215c
 8013290:	080009a8 	.word	0x080009a8
 8013294:	080009b0 	.word	0x080009b0
 8013298:	20000140 	.word	0x20000140
 801329c:	080009b4 	.word	0x080009b4
 80132a0:	080009c0 	.word	0x080009c0
 80132a4:	20000548 	.word	0x20000548
 80132a8:	080009c4 	.word	0x080009c4
 80132ac:	080009c8 	.word	0x080009c8

080132b0 <Update_Detail>:
/*******************************************************************************
 Update_Detail:
*******************************************************************************/
void Update_Detail(void)
{
 80132b0:	b590      	push	{r4, r7, lr}
 80132b2:	b089      	sub	sp, #36	; 0x24
 80132b4:	af02      	add	r7, sp, #8
  long scale = 0;
 80132b6:	2300      	movs	r3, #0
 80132b8:	60bb      	str	r3, [r7, #8]
  int  Ak = (KgA[KindA+(StateA?1:0)]*4)/GK[GainA];
 80132ba:	4ba9      	ldr	r3, [pc, #676]	; (8013560 <Update_Detail+0x2b0>)
 80132bc:	681a      	ldr	r2, [r3, #0]
 80132be:	4ba9      	ldr	r3, [pc, #676]	; (8013564 <Update_Detail+0x2b4>)
 80132c0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80132c4:	4619      	mov	r1, r3
 80132c6:	4ba8      	ldr	r3, [pc, #672]	; (8013568 <Update_Detail+0x2b8>)
 80132c8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80132cc:	2b00      	cmp	r3, #0
 80132ce:	bf14      	ite	ne
 80132d0:	2301      	movne	r3, #1
 80132d2:	2300      	moveq	r3, #0
 80132d4:	b2db      	uxtb	r3, r3
 80132d6:	440b      	add	r3, r1
 80132d8:	005b      	lsls	r3, r3, #1
 80132da:	4413      	add	r3, r2
 80132dc:	f9b3 3000 	ldrsh.w	r3, [r3]
 80132e0:	009b      	lsls	r3, r3, #2
 80132e2:	4aa2      	ldr	r2, [pc, #648]	; (801356c <Update_Detail+0x2bc>)
 80132e4:	f9b2 2000 	ldrsh.w	r2, [r2]
 80132e8:	4611      	mov	r1, r2
 80132ea:	4aa1      	ldr	r2, [pc, #644]	; (8013570 <Update_Detail+0x2c0>)
 80132ec:	5c52      	ldrb	r2, [r2, r1]
 80132ee:	fb93 f3f2 	sdiv	r3, r3, r2
 80132f2:	607b      	str	r3, [r7, #4]
  unsigned short i, k = HighT+LowT;
 80132f4:	4b9f      	ldr	r3, [pc, #636]	; (8013574 <Update_Detail+0x2c4>)
 80132f6:	681b      	ldr	r3, [r3, #0]
 80132f8:	b29a      	uxth	r2, r3
 80132fa:	4b9f      	ldr	r3, [pc, #636]	; (8013578 <Update_Detail+0x2c8>)
 80132fc:	681b      	ldr	r3, [r3, #0]
 80132fe:	b29b      	uxth	r3, r3
 8013300:	4413      	add	r3, r2
 8013302:	807b      	strh	r3, [r7, #2]
  long Tmp = 0;
 8013304:	2300      	movs	r3, #0
 8013306:	613b      	str	r3, [r7, #16]
  short Range = List[Y_RANGES].Val + 10*List[PROBEATT].Val;
 8013308:	4b9c      	ldr	r3, [pc, #624]	; (801357c <Update_Detail+0x2cc>)
 801330a:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801330e:	b29a      	uxth	r2, r3
 8013310:	4b9a      	ldr	r3, [pc, #616]	; (801357c <Update_Detail+0x2cc>)
 8013312:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8013316:	b29b      	uxth	r3, r3
 8013318:	4619      	mov	r1, r3
 801331a:	0089      	lsls	r1, r1, #2
 801331c:	440b      	add	r3, r1
 801331e:	005b      	lsls	r3, r3, #1
 8013320:	b29b      	uxth	r3, r3
 8013322:	4413      	add	r3, r2
 8013324:	b29b      	uxth	r3, r3
 8013326:	803b      	strh	r3, [r7, #0]
  unsigned long FTmp;

  for(i=Y_RANGES; i<=STANDBY; i++){
 8013328:	2300      	movs	r3, #0
 801332a:	82fb      	strh	r3, [r7, #22]
 801332c:	f000 bfb3 	b.w	8014296 <Update_Detail+0xfe6>
    if(i==FREQUENC)
 8013330:	8afb      	ldrh	r3, [r7, #22]
 8013332:	2b13      	cmp	r3, #19
 8013334:	d118      	bne.n	8013368 <Update_Detail+0xb8>
    {
      if(Freq_Cnt > 10){
 8013336:	4b92      	ldr	r3, [pc, #584]	; (8013580 <Update_Detail+0x2d0>)
 8013338:	f9b3 3000 	ldrsh.w	r3, [r3]
 801333c:	2b0a      	cmp	r3, #10
 801333e:	dd0a      	ble.n	8013356 <Update_Detail+0xa6>
        Freq_Cnt = 0;
 8013340:	4b8f      	ldr	r3, [pc, #572]	; (8013580 <Update_Detail+0x2d0>)
 8013342:	2200      	movs	r2, #0
 8013344:	801a      	strh	r2, [r3, #0]
        Freq_Flag |= UPD;
 8013346:	4b8f      	ldr	r3, [pc, #572]	; (8013584 <Update_Detail+0x2d4>)
 8013348:	781b      	ldrb	r3, [r3, #0]
 801334a:	f043 0320 	orr.w	r3, r3, #32
 801334e:	b2da      	uxtb	r2, r3
 8013350:	4b8c      	ldr	r3, [pc, #560]	; (8013584 <Update_Detail+0x2d4>)
 8013352:	701a      	strb	r2, [r3, #0]
 8013354:	e008      	b.n	8013368 <Update_Detail+0xb8>
      }
      else Freq_Cnt++;
 8013356:	4b8a      	ldr	r3, [pc, #552]	; (8013580 <Update_Detail+0x2d0>)
 8013358:	f9b3 3000 	ldrsh.w	r3, [r3]
 801335c:	b29b      	uxth	r3, r3
 801335e:	3301      	adds	r3, #1
 8013360:	b29b      	uxth	r3, r3
 8013362:	b21a      	sxth	r2, r3
 8013364:	4b86      	ldr	r3, [pc, #536]	; (8013580 <Update_Detail+0x2d0>)
 8013366:	801a      	strh	r2, [r3, #0]
    }

    if(List[i].Flg & UPD){
 8013368:	8afb      	ldrh	r3, [r7, #22]
 801336a:	4a84      	ldr	r2, [pc, #528]	; (801357c <Update_Detail+0x2cc>)
 801336c:	00db      	lsls	r3, r3, #3
 801336e:	4413      	add	r3, r2
 8013370:	799b      	ldrb	r3, [r3, #6]
 8013372:	f003 0320 	and.w	r3, r3, #32
 8013376:	2b00      	cmp	r3, #0
 8013378:	f000 878a 	beq.w	8014290 <Update_Detail+0xfe0>
      List[i].Flg &= ~UPD;
 801337c:	8afb      	ldrh	r3, [r7, #22]
 801337e:	4a7f      	ldr	r2, [pc, #508]	; (801357c <Update_Detail+0x2cc>)
 8013380:	00db      	lsls	r3, r3, #3
 8013382:	4413      	add	r3, r2
 8013384:	799a      	ldrb	r2, [r3, #6]
 8013386:	8afb      	ldrh	r3, [r7, #22]
 8013388:	f022 0220 	bic.w	r2, r2, #32
 801338c:	b2d1      	uxtb	r1, r2
 801338e:	4a7b      	ldr	r2, [pc, #492]	; (801357c <Update_Detail+0x2cc>)
 8013390:	00db      	lsls	r3, r3, #3
 8013392:	4413      	add	r3, r2
 8013394:	460a      	mov	r2, r1
 8013396:	719a      	strb	r2, [r3, #6]
      switch (i){
 8013398:	8afb      	ldrh	r3, [r7, #22]
 801339a:	2b29      	cmp	r3, #41	; 0x29
 801339c:	f200 8739 	bhi.w	8014212 <Update_Detail+0xf62>
 80133a0:	a201      	add	r2, pc, #4	; (adr r2, 80133a8 <Update_Detail+0xf8>)
 80133a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80133a6:	bf00      	nop
 80133a8:	08013451 	.word	0x08013451
 80133ac:	08013451 	.word	0x08013451
 80133b0:	08013451 	.word	0x08013451
 80133b4:	08013451 	.word	0x08013451
 80133b8:	08013451 	.word	0x08013451
 80133bc:	08013451 	.word	0x08013451
 80133c0:	08013451 	.word	0x08013451
 80133c4:	08013c59 	.word	0x08013c59
 80133c8:	08013c59 	.word	0x08013c59
 80133cc:	08013c59 	.word	0x08013c59
 80133d0:	08013c59 	.word	0x08013c59
 80133d4:	08013c59 	.word	0x08013c59
 80133d8:	08013c59 	.word	0x08013c59
 80133dc:	08013aef 	.word	0x08013aef
 80133e0:	08013aef 	.word	0x08013aef
 80133e4:	08013aef 	.word	0x08013aef
 80133e8:	08013aef 	.word	0x08013aef
 80133ec:	08013aef 	.word	0x08013aef
 80133f0:	08013aef 	.word	0x08013aef
 80133f4:	08013eb1 	.word	0x08013eb1
 80133f8:	08013f25 	.word	0x08013f25
 80133fc:	08013f45 	.word	0x08013f45
 8013400:	0801404b 	.word	0x0801404b
 8013404:	08013fbb 	.word	0x08013fbb
 8013408:	080140d1 	.word	0x080140d1
 801340c:	08014157 	.word	0x08014157
 8013410:	080139d3 	.word	0x080139d3
 8013414:	080139d3 	.word	0x080139d3
 8013418:	08013a6b 	.word	0x08013a6b
 801341c:	08013751 	.word	0x08013751
 8013420:	08013751 	.word	0x08013751
 8013424:	08013751 	.word	0x08013751
 8013428:	08013751 	.word	0x08013751
 801342c:	08013751 	.word	0x08013751
 8013430:	08013751 	.word	0x08013751
 8013434:	08013751 	.word	0x08013751
 8013438:	08013801 	.word	0x08013801
 801343c:	080138ed 	.word	0x080138ed
 8013440:	0801398f 	.word	0x0801398f
 8013444:	08014213 	.word	0x08014213
 8013448:	08014213 	.word	0x08014213
 801344c:	08014213 	.word	0x08014213
      case COUPLING:   // ˢ����ʾ���ģʽ״̬
      case V0_POSI:    // ˢ����ʾ��ֱƫ��λ��
      case V1_POSI:    // ˢ����ʾ��λ�α�λ��
      case V2_POSI:    // ˢ����ʾ��λ�α�λ��
      case YN_TYPE:    // ˢ����ʾ�α���ʽ
        SetColor(GRY, TCOLOR[YN]);
 8013450:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8013454:	4619      	mov	r1, r3
 8013456:	f643 10e7 	movw	r0, #14823	; 0x39e7
 801345a:	f7fa fbf9 	bl	800dc50 <SetColor>
        if(i == Y_RANGES || i == COUPLING||i == PROBEATT)
 801345e:	8afb      	ldrh	r3, [r7, #22]
 8013460:	2b00      	cmp	r3, #0
 8013462:	d005      	beq.n	8013470 <Update_Detail+0x1c0>
 8013464:	8afb      	ldrh	r3, [r7, #22]
 8013466:	2b01      	cmp	r3, #1
 8013468:	d002      	beq.n	8013470 <Update_Detail+0x1c0>
 801346a:	8afb      	ldrh	r3, [r7, #22]
 801346c:	2b02      	cmp	r3, #2
 801346e:	d138      	bne.n	80134e2 <Update_Detail+0x232>
        {
      Draw_Circle_D(INV, S_X[Y_RANGES]-3, TITLE_Y_POS, 11, 0, 6*7);
 8013470:	232f      	movs	r3, #47	; 0x2f
 8013472:	b29b      	uxth	r3, r3
 8013474:	3b03      	subs	r3, #3
 8013476:	b29b      	uxth	r3, r3
 8013478:	b219      	sxth	r1, r3
 801347a:	232a      	movs	r3, #42	; 0x2a
 801347c:	9301      	str	r3, [sp, #4]
 801347e:	2300      	movs	r3, #0
 8013480:	9300      	str	r3, [sp, #0]
 8013482:	230b      	movs	r3, #11
 8013484:	22e1      	movs	r2, #225	; 0xe1
 8013486:	2001      	movs	r0, #1
 8013488:	f7fa fcd0 	bl	800de2c <Draw_Circle_D>
      DispStr(S_X[Y_RANGES], TITLE_Y_POS, INV,      (List[Y_RANGES].PTR +(Range)*6));
 801348c:	202f      	movs	r0, #47	; 0x2f
 801348e:	4b3b      	ldr	r3, [pc, #236]	; (801357c <Update_Detail+0x2cc>)
 8013490:	6819      	ldr	r1, [r3, #0]
 8013492:	f9b7 2000 	ldrsh.w	r2, [r7]
 8013496:	4613      	mov	r3, r2
 8013498:	005b      	lsls	r3, r3, #1
 801349a:	4413      	add	r3, r2
 801349c:	005b      	lsls	r3, r3, #1
 801349e:	440b      	add	r3, r1
 80134a0:	2201      	movs	r2, #1
 80134a2:	21e1      	movs	r1, #225	; 0xe1
 80134a4:	f7fa fbec 	bl	800dc80 <DispStr>
      DispStr(S_X[COUPLING], TITLE_Y_POS, INV,      (List[COUPLING].PTR +(List[COUPLING].Val)*6));
 80134a8:	2047      	movs	r0, #71	; 0x47
 80134aa:	4b34      	ldr	r3, [pc, #208]	; (801357c <Update_Detail+0x2cc>)
 80134ac:	689a      	ldr	r2, [r3, #8]
 80134ae:	4b33      	ldr	r3, [pc, #204]	; (801357c <Update_Detail+0x2cc>)
 80134b0:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 80134b4:	4619      	mov	r1, r3
 80134b6:	460b      	mov	r3, r1
 80134b8:	005b      	lsls	r3, r3, #1
 80134ba:	440b      	add	r3, r1
 80134bc:	005b      	lsls	r3, r3, #1
 80134be:	4413      	add	r3, r2
 80134c0:	2201      	movs	r2, #1
 80134c2:	21e1      	movs	r1, #225	; 0xe1
 80134c4:	f7fa fbdc 	bl	800dc80 <DispStr>
      DispStr10x14(S_X[PROBEATT], TITLE_Y_POS, PRN+SYMB,(List[PROBEATT].Val?("A"):("B")));
 80134c8:	2020      	movs	r0, #32
 80134ca:	4b2c      	ldr	r3, [pc, #176]	; (801357c <Update_Detail+0x2cc>)
 80134cc:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 80134d0:	2b00      	cmp	r3, #0
 80134d2:	d001      	beq.n	80134d8 <Update_Detail+0x228>
 80134d4:	4b2c      	ldr	r3, [pc, #176]	; (8013588 <Update_Detail+0x2d8>)
 80134d6:	e000      	b.n	80134da <Update_Detail+0x22a>
 80134d8:	4b2c      	ldr	r3, [pc, #176]	; (801358c <Update_Detail+0x2dc>)
 80134da:	2210      	movs	r2, #16
 80134dc:	21e1      	movs	r1, #225	; 0xe1
 80134de:	f7fa fe37 	bl	800e150 <DispStr10x14>
        }
        ParamTab[P1x2] = 2*((List[V0_POSI].Val+1));
 80134e2:	4b26      	ldr	r3, [pc, #152]	; (801357c <Update_Detail+0x2cc>)
 80134e4:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 80134e8:	3301      	adds	r3, #1
 80134ea:	b29b      	uxth	r3, r3
 80134ec:	005b      	lsls	r3, r3, #1
 80134ee:	b29b      	uxth	r3, r3
 80134f0:	b21a      	sxth	r2, r3
 80134f2:	4b27      	ldr	r3, [pc, #156]	; (8013590 <Update_Detail+0x2e0>)
 80134f4:	829a      	strh	r2, [r3, #20]
        ParamTab[VTx2] = ParamTab[P1x2]+ 2*(List[THRESHOLD].Val+1);
 80134f6:	4b26      	ldr	r3, [pc, #152]	; (8013590 <Update_Detail+0x2e0>)
 80134f8:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 80134fc:	b29a      	uxth	r2, r3
 80134fe:	4b1f      	ldr	r3, [pc, #124]	; (801357c <Update_Detail+0x2cc>)
 8013500:	f9b3 3084 	ldrsh.w	r3, [r3, #132]	; 0x84
 8013504:	3301      	adds	r3, #1
 8013506:	b29b      	uxth	r3, r3
 8013508:	005b      	lsls	r3, r3, #1
 801350a:	b29b      	uxth	r3, r3
 801350c:	4413      	add	r3, r2
 801350e:	b29b      	uxth	r3, r3
 8013510:	b21a      	sxth	r2, r3
 8013512:	4b1f      	ldr	r3, [pc, #124]	; (8013590 <Update_Detail+0x2e0>)
 8013514:	839a      	strh	r2, [r3, #28]
        ParamTab[V1x2] = 2*(List[V1_POSI].Val+1);
 8013516:	4b19      	ldr	r3, [pc, #100]	; (801357c <Update_Detail+0x2cc>)
 8013518:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	; 0x24
 801351c:	3301      	adds	r3, #1
 801351e:	b29b      	uxth	r3, r3
 8013520:	005b      	lsls	r3, r3, #1
 8013522:	b29b      	uxth	r3, r3
 8013524:	b21a      	sxth	r2, r3
 8013526:	4b1a      	ldr	r3, [pc, #104]	; (8013590 <Update_Detail+0x2e0>)
 8013528:	83da      	strh	r2, [r3, #30]
        ParamTab[V2x2] = 2*(List[V2_POSI].Val+1);
 801352a:	4b14      	ldr	r3, [pc, #80]	; (801357c <Update_Detail+0x2cc>)
 801352c:	f9b3 302c 	ldrsh.w	r3, [r3, #44]	; 0x2c
 8013530:	3301      	adds	r3, #1
 8013532:	b29b      	uxth	r3, r3
 8013534:	005b      	lsls	r3, r3, #1
 8013536:	b29b      	uxth	r3, r3
 8013538:	b21a      	sxth	r2, r3
 801353a:	4b15      	ldr	r3, [pc, #84]	; (8013590 <Update_Detail+0x2e0>)
 801353c:	841a      	strh	r2, [r3, #32]
        ParamTab[V1F]  = (List[YN_TYPE].Val)? L_HID : SHOW;
 801353e:	4b0f      	ldr	r3, [pc, #60]	; (801357c <Update_Detail+0x2cc>)
 8013540:	f9b3 3034 	ldrsh.w	r3, [r3, #52]	; 0x34
 8013544:	2b00      	cmp	r3, #0
 8013546:	d001      	beq.n	801354c <Update_Detail+0x29c>
 8013548:	2202      	movs	r2, #2
 801354a:	e000      	b.n	801354e <Update_Detail+0x29e>
 801354c:	2200      	movs	r2, #0
 801354e:	4b10      	ldr	r3, [pc, #64]	; (8013590 <Update_Detail+0x2e0>)
 8013550:	815a      	strh	r2, [r3, #10]
        ParamTab[V2F]  = (List[YN_TYPE].Val)? L_HID : SHOW;
 8013552:	4b0a      	ldr	r3, [pc, #40]	; (801357c <Update_Detail+0x2cc>)
 8013554:	f9b3 3034 	ldrsh.w	r3, [r3, #52]	; 0x34
 8013558:	2b00      	cmp	r3, #0
 801355a:	d01b      	beq.n	8013594 <Update_Detail+0x2e4>
 801355c:	2202      	movs	r2, #2
 801355e:	e01a      	b.n	8013596 <Update_Detail+0x2e6>
 8013560:	2000057c 	.word	0x2000057c
 8013564:	20006886 	.word	0x20006886
 8013568:	20002862 	.word	0x20002862
 801356c:	2000284a 	.word	0x2000284a
 8013570:	20000560 	.word	0x20000560
 8013574:	20006878 	.word	0x20006878
 8013578:	2000688c 	.word	0x2000688c
 801357c:	20000298 	.word	0x20000298
 8013580:	200007a4 	.word	0x200007a4
 8013584:	200001cc 	.word	0x200001cc
 8013588:	08000958 	.word	0x08000958
 801358c:	0800095c 	.word	0x0800095c
 8013590:	20000140 	.word	0x20000140
 8013594:	2200      	movs	r2, #0
 8013596:	4ba6      	ldr	r3, [pc, #664]	; (8013830 <Update_Detail+0x580>)
 8013598:	819a      	strh	r2, [r3, #12]

        Tmp  =(ParamTab[V1x2]- ParamTab[V2x2])/2;         // ˢ����ʾV2-V1��ֵ
 801359a:	4ba5      	ldr	r3, [pc, #660]	; (8013830 <Update_Detail+0x580>)
 801359c:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 80135a0:	461a      	mov	r2, r3
 80135a2:	4ba3      	ldr	r3, [pc, #652]	; (8013830 <Update_Detail+0x580>)
 80135a4:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 80135a8:	1ad3      	subs	r3, r2, r3
 80135aa:	0fda      	lsrs	r2, r3, #31
 80135ac:	4413      	add	r3, r2
 80135ae:	105b      	asrs	r3, r3, #1
 80135b0:	613b      	str	r3, [r7, #16]
        Tmp *= X_SCALE[Range]* Exp(V_SCALE[Range]);
 80135b2:	f9b7 3000 	ldrsh.w	r3, [r7]
 80135b6:	4a9f      	ldr	r2, [pc, #636]	; (8013834 <Update_Detail+0x584>)
 80135b8:	5cd3      	ldrb	r3, [r2, r3]
 80135ba:	461c      	mov	r4, r3
 80135bc:	f9b7 3000 	ldrsh.w	r3, [r7]
 80135c0:	4a9d      	ldr	r2, [pc, #628]	; (8013838 <Update_Detail+0x588>)
 80135c2:	5cd3      	ldrb	r3, [r2, r3]
 80135c4:	4618      	mov	r0, r3
 80135c6:	f7fe fb2f 	bl	8011c28 <Exp>
 80135ca:	4603      	mov	r3, r0
 80135cc:	fb03 f204 	mul.w	r2, r3, r4
 80135d0:	693b      	ldr	r3, [r7, #16]
 80135d2:	fb02 f303 	mul.w	r3, r2, r3
 80135d6:	613b      	str	r3, [r7, #16]
        Value2Str(NumStr, Tmp, V[0], 3, UNSIGN);
 80135d8:	2301      	movs	r3, #1
 80135da:	9300      	str	r3, [sp, #0]
 80135dc:	2303      	movs	r3, #3
 80135de:	4a97      	ldr	r2, [pc, #604]	; (801383c <Update_Detail+0x58c>)
 80135e0:	6939      	ldr	r1, [r7, #16]
 80135e2:	4897      	ldr	r0, [pc, #604]	; (8013840 <Update_Detail+0x590>)
 80135e4:	f7fe fa24 	bl	8011a30 <Value2Str>
        Draw_Circle_D(INV, S_X[V1_POSI]-3, LABLE_Y, 11, 0, 6*9);
 80135e8:	2307      	movs	r3, #7
 80135ea:	b29b      	uxth	r3, r3
 80135ec:	3b03      	subs	r3, #3
 80135ee:	b29b      	uxth	r3, r3
 80135f0:	b219      	sxth	r1, r3
 80135f2:	2336      	movs	r3, #54	; 0x36
 80135f4:	9301      	str	r3, [sp, #4]
 80135f6:	2300      	movs	r3, #0
 80135f8:	9300      	str	r3, [sp, #0]
 80135fa:	230b      	movs	r3, #11
 80135fc:	2203      	movs	r2, #3
 80135fe:	2001      	movs	r0, #1
 8013600:	f7fa fc14 	bl	800de2c <Draw_Circle_D>
        DispStr(S_X[V1_POSI]+0*6, LABLE_Y, INV+SYMB, "]");
 8013604:	2007      	movs	r0, #7
 8013606:	4b8f      	ldr	r3, [pc, #572]	; (8013844 <Update_Detail+0x594>)
 8013608:	2211      	movs	r2, #17
 801360a:	2103      	movs	r1, #3
 801360c:	f7fa fb38 	bl	800dc80 <DispStr>
        DispStr(S_X[V1_POSI]+1*6, LABLE_Y, INV,      "V:      ");
 8013610:	2307      	movs	r3, #7
 8013612:	b29b      	uxth	r3, r3
 8013614:	3306      	adds	r3, #6
 8013616:	b29b      	uxth	r3, r3
 8013618:	b218      	sxth	r0, r3
 801361a:	4b8b      	ldr	r3, [pc, #556]	; (8013848 <Update_Detail+0x598>)
 801361c:	2201      	movs	r2, #1
 801361e:	2103      	movs	r1, #3
 8013620:	f7fa fb2e 	bl	800dc80 <DispStr>
        DispStr(S_X[V1_POSI]+7*6, LABLE_Y, INV,  "  ");
 8013624:	2307      	movs	r3, #7
 8013626:	b29b      	uxth	r3, r3
 8013628:	332a      	adds	r3, #42	; 0x2a
 801362a:	b29b      	uxth	r3, r3
 801362c:	b218      	sxth	r0, r3
 801362e:	4b87      	ldr	r3, [pc, #540]	; (801384c <Update_Detail+0x59c>)
 8013630:	2201      	movs	r2, #1
 8013632:	2103      	movs	r1, #3
 8013634:	f7fa fb24 	bl	800dc80 <DispStr>
        DispStr(S_X[V1_POSI]+3*6, LABLE_Y, INV,  (char *)NumStr);
 8013638:	2307      	movs	r3, #7
 801363a:	b29b      	uxth	r3, r3
 801363c:	3312      	adds	r3, #18
 801363e:	b29b      	uxth	r3, r3
 8013640:	b218      	sxth	r0, r3
 8013642:	4b7f      	ldr	r3, [pc, #508]	; (8013840 <Update_Detail+0x590>)
 8013644:	2201      	movs	r2, #1
 8013646:	2103      	movs	r1, #3
 8013648:	f7fa fb1a 	bl	800dc80 <DispStr>

        SetColor(GRY, TCOLOR[TRG]);
 801364c:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8013650:	4619      	mov	r1, r3
 8013652:	f643 10e7 	movw	r0, #14823	; 0x39e7
 8013656:	f7fa fafb 	bl	800dc50 <SetColor>
        Tmp  = List[SENSITIVE].Val;                       // ˢ����ʾ�����ز�ֵ
 801365a:	4b7d      	ldr	r3, [pc, #500]	; (8013850 <Update_Detail+0x5a0>)
 801365c:	f9b3 308c 	ldrsh.w	r3, [r3, #140]	; 0x8c
 8013660:	613b      	str	r3, [r7, #16]
        Tmp *= X_SCALE[Range]* Exp(V_SCALE[Range]);
 8013662:	f9b7 3000 	ldrsh.w	r3, [r7]
 8013666:	4a73      	ldr	r2, [pc, #460]	; (8013834 <Update_Detail+0x584>)
 8013668:	5cd3      	ldrb	r3, [r2, r3]
 801366a:	461c      	mov	r4, r3
 801366c:	f9b7 3000 	ldrsh.w	r3, [r7]
 8013670:	4a71      	ldr	r2, [pc, #452]	; (8013838 <Update_Detail+0x588>)
 8013672:	5cd3      	ldrb	r3, [r2, r3]
 8013674:	4618      	mov	r0, r3
 8013676:	f7fe fad7 	bl	8011c28 <Exp>
 801367a:	4603      	mov	r3, r0
 801367c:	fb03 f204 	mul.w	r2, r3, r4
 8013680:	693b      	ldr	r3, [r7, #16]
 8013682:	fb02 f303 	mul.w	r3, r2, r3
 8013686:	613b      	str	r3, [r7, #16]
        Value2Str(NumStr, Tmp,V[0], 2, UNSIGN);
 8013688:	2301      	movs	r3, #1
 801368a:	9300      	str	r3, [sp, #0]
 801368c:	2302      	movs	r3, #2
 801368e:	4a6b      	ldr	r2, [pc, #428]	; (801383c <Update_Detail+0x58c>)
 8013690:	6939      	ldr	r1, [r7, #16]
 8013692:	486b      	ldr	r0, [pc, #428]	; (8013840 <Update_Detail+0x590>)
 8013694:	f7fe f9cc 	bl	8011a30 <Value2Str>
        DispStr(S_X[SENSITIVE]+9, TITLE_Y_POS, INV,  "     ");
 8013698:	23e7      	movs	r3, #231	; 0xe7
 801369a:	b29b      	uxth	r3, r3
 801369c:	3309      	adds	r3, #9
 801369e:	b29b      	uxth	r3, r3
 80136a0:	b218      	sxth	r0, r3
 80136a2:	4b6c      	ldr	r3, [pc, #432]	; (8013854 <Update_Detail+0x5a4>)
 80136a4:	2201      	movs	r2, #1
 80136a6:	21e1      	movs	r1, #225	; 0xe1
 80136a8:	f7fa faea 	bl	800dc80 <DispStr>
        DispStr(S_X[SENSITIVE]+9, TITLE_Y_POS, INV,  (char *)NumStr);
 80136ac:	23e7      	movs	r3, #231	; 0xe7
 80136ae:	b29b      	uxth	r3, r3
 80136b0:	3309      	adds	r3, #9
 80136b2:	b29b      	uxth	r3, r3
 80136b4:	b218      	sxth	r0, r3
 80136b6:	4b62      	ldr	r3, [pc, #392]	; (8013840 <Update_Detail+0x590>)
 80136b8:	2201      	movs	r2, #1
 80136ba:	21e1      	movs	r1, #225	; 0xe1
 80136bc:	f7fa fae0 	bl	800dc80 <DispStr>
        DispStr10x14(S_X[SENSITIVE], TITLE_Y_POS, INV+SYMB,"E");
 80136c0:	20e7      	movs	r0, #231	; 0xe7
 80136c2:	4b65      	ldr	r3, [pc, #404]	; (8013858 <Update_Detail+0x5a8>)
 80136c4:	2211      	movs	r2, #17
 80136c6:	21e1      	movs	r1, #225	; 0xe1
 80136c8:	f7fa fd42 	bl	800e150 <DispStr10x14>
        GainA  = (char)List[Y_RANGES].Val;
 80136cc:	4b60      	ldr	r3, [pc, #384]	; (8013850 <Update_Detail+0x5a0>)
 80136ce:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80136d2:	b2db      	uxtb	r3, r3
 80136d4:	b21a      	sxth	r2, r3
 80136d6:	4b61      	ldr	r3, [pc, #388]	; (801385c <Update_Detail+0x5ac>)
 80136d8:	801a      	strh	r2, [r3, #0]

        if((char)List[Y_RANGES].Val>1)
 80136da:	4b5d      	ldr	r3, [pc, #372]	; (8013850 <Update_Detail+0x5a0>)
 80136dc:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80136e0:	b2db      	uxtb	r3, r3
 80136e2:	2b01      	cmp	r3, #1
 80136e4:	d903      	bls.n	80136ee <Update_Detail+0x43e>
          KindA  = HV;
 80136e6:	4b5e      	ldr	r3, [pc, #376]	; (8013860 <Update_Detail+0x5b0>)
 80136e8:	2201      	movs	r2, #1
 80136ea:	801a      	strh	r2, [r3, #0]
 80136ec:	e002      	b.n	80136f4 <Update_Detail+0x444>
        else
          KindA  = LV;                //Ch1ѡ���ѹ���ѹ����
 80136ee:	4b5c      	ldr	r3, [pc, #368]	; (8013860 <Update_Detail+0x5b0>)
 80136f0:	2200      	movs	r2, #0
 80136f2:	801a      	strh	r2, [r3, #0]
        StateA =  ((char)List[Y_RANGES].Val>5)?ACT: GND;
 80136f4:	4b56      	ldr	r3, [pc, #344]	; (8013850 <Update_Detail+0x5a0>)
 80136f6:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80136fa:	b2db      	uxtb	r3, r3
 80136fc:	2b05      	cmp	r3, #5
 80136fe:	d901      	bls.n	8013704 <Update_Detail+0x454>
 8013700:	2204      	movs	r2, #4
 8013702:	e000      	b.n	8013706 <Update_Detail+0x456>
 8013704:	2200      	movs	r2, #0
 8013706:	4b57      	ldr	r3, [pc, #348]	; (8013864 <Update_Detail+0x5b4>)
 8013708:	801a      	strh	r2, [r3, #0]

        CouplA = (List[COUPLING].Val)? AC : DC;                      // AC);  //AC/DC��Ϸ�ʽ
 801370a:	4b51      	ldr	r3, [pc, #324]	; (8013850 <Update_Detail+0x5a0>)
 801370c:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8013710:	2b00      	cmp	r3, #0
 8013712:	d001      	beq.n	8013718 <Update_Detail+0x468>
 8013714:	2200      	movs	r2, #0
 8013716:	e000      	b.n	801371a <Update_Detail+0x46a>
 8013718:	2202      	movs	r2, #2
 801371a:	4b53      	ldr	r3, [pc, #332]	; (8013868 <Update_Detail+0x5b8>)
 801371c:	801a      	strh	r2, [r3, #0]
        BIOS_Ctrl(AiRANGE, KindA+CouplA+StateA);             //Ch1״̬ˢ��
 801371e:	4b50      	ldr	r3, [pc, #320]	; (8013860 <Update_Detail+0x5b0>)
 8013720:	f9b3 3000 	ldrsh.w	r3, [r3]
 8013724:	461a      	mov	r2, r3
 8013726:	4b50      	ldr	r3, [pc, #320]	; (8013868 <Update_Detail+0x5b8>)
 8013728:	f9b3 3000 	ldrsh.w	r3, [r3]
 801372c:	4413      	add	r3, r2
 801372e:	4a4d      	ldr	r2, [pc, #308]	; (8013864 <Update_Detail+0x5b4>)
 8013730:	f9b2 2000 	ldrsh.w	r2, [r2]
 8013734:	4413      	add	r3, r2
 8013736:	4619      	mov	r1, r3
 8013738:	2007      	movs	r0, #7
 801373a:	f7f8 fe1b 	bl	800c374 <BIOS_Ctrl>
        AiPosi(List[V0_POSI].Val);                        //Ch1Ӳ����Ӧλ��
 801373e:	4b44      	ldr	r3, [pc, #272]	; (8013850 <Update_Detail+0x5a0>)
 8013740:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 8013744:	b2db      	uxtb	r3, r3
 8013746:	4618      	mov	r0, r3
 8013748:	f001 fc5c 	bl	8015004 <AiPosi>
        break;
 801374c:	f000 bd61 	b.w	8014212 <Update_Detail+0xf62>
      case SAVE_BUF:
      case SAVE_CSV:
      case SAVE_SVG:
      case LOAD_DAT: //��ʾ��ѡ��Ҫ��ȡ���ļ����
      case LOAD_BUF:
        SetColor(GRY, TCOLOR[FN]);
 8013750:	f64f 4310 	movw	r3, #64528	; 0xfc10
 8013754:	4619      	mov	r1, r3
 8013756:	f643 10e7 	movw	r0, #14823	; 0x39e7
 801375a:	f7fa fa79 	bl	800dc50 <SetColor>
        u8ToDec3(NumStr, List[i].Val);
 801375e:	8afb      	ldrh	r3, [r7, #22]
 8013760:	4a3b      	ldr	r2, [pc, #236]	; (8013850 <Update_Detail+0x5a0>)
 8013762:	00db      	lsls	r3, r3, #3
 8013764:	4413      	add	r3, r2
 8013766:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801376a:	b2db      	uxtb	r3, r3
 801376c:	4619      	mov	r1, r3
 801376e:	4834      	ldr	r0, [pc, #208]	; (8013840 <Update_Detail+0x590>)
 8013770:	f7fe f8f6 	bl	8011960 <u8ToDec3>
        Draw_Circle_D(INV, S_X[i]-3, LABLE_Y, 11, 0, 6*11);
 8013774:	8afb      	ldrh	r3, [r7, #22]
 8013776:	4a3d      	ldr	r2, [pc, #244]	; (801386c <Update_Detail+0x5bc>)
 8013778:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 801377c:	b29b      	uxth	r3, r3
 801377e:	3b03      	subs	r3, #3
 8013780:	b29b      	uxth	r3, r3
 8013782:	b219      	sxth	r1, r3
 8013784:	2342      	movs	r3, #66	; 0x42
 8013786:	9301      	str	r3, [sp, #4]
 8013788:	2300      	movs	r3, #0
 801378a:	9300      	str	r3, [sp, #0]
 801378c:	230b      	movs	r3, #11
 801378e:	2203      	movs	r2, #3
 8013790:	2001      	movs	r0, #1
 8013792:	f7fa fb4b 	bl	800de2c <Draw_Circle_D>
        DispStr(S_X[i],    LABLE_Y, INV, ((i > SAVE_SVG)? "Load" : "Save"));//0513
 8013796:	8afb      	ldrh	r3, [r7, #22]
 8013798:	4a34      	ldr	r2, [pc, #208]	; (801386c <Update_Detail+0x5bc>)
 801379a:	f932 0013 	ldrsh.w	r0, [r2, r3, lsl #1]
 801379e:	8afb      	ldrh	r3, [r7, #22]
 80137a0:	2b21      	cmp	r3, #33	; 0x21
 80137a2:	d901      	bls.n	80137a8 <Update_Detail+0x4f8>
 80137a4:	4b32      	ldr	r3, [pc, #200]	; (8013870 <Update_Detail+0x5c0>)
 80137a6:	e000      	b.n	80137aa <Update_Detail+0x4fa>
 80137a8:	4b32      	ldr	r3, [pc, #200]	; (8013874 <Update_Detail+0x5c4>)
 80137aa:	2201      	movs	r2, #1
 80137ac:	2103      	movs	r1, #3
 80137ae:	f7fa fa67 	bl	800dc80 <DispStr>
        DispStr(S_X[i]+24, LABLE_Y, INV, (char *)NumStr);
 80137b2:	8afb      	ldrh	r3, [r7, #22]
 80137b4:	4a2d      	ldr	r2, [pc, #180]	; (801386c <Update_Detail+0x5bc>)
 80137b6:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 80137ba:	b29b      	uxth	r3, r3
 80137bc:	3318      	adds	r3, #24
 80137be:	b29b      	uxth	r3, r3
 80137c0:	b218      	sxth	r0, r3
 80137c2:	4b1f      	ldr	r3, [pc, #124]	; (8013840 <Update_Detail+0x590>)
 80137c4:	2201      	movs	r2, #1
 80137c6:	2103      	movs	r1, #3
 80137c8:	f7fa fa5a 	bl	800dc80 <DispStr>
        DispStr(S_X[i]+42, LABLE_Y, INV, (List[i].PTR +(i - SAVE_BMP)*6));
 80137cc:	8afb      	ldrh	r3, [r7, #22]
 80137ce:	4a27      	ldr	r2, [pc, #156]	; (801386c <Update_Detail+0x5bc>)
 80137d0:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 80137d4:	b29b      	uxth	r3, r3
 80137d6:	332a      	adds	r3, #42	; 0x2a
 80137d8:	b29b      	uxth	r3, r3
 80137da:	b218      	sxth	r0, r3
 80137dc:	8afb      	ldrh	r3, [r7, #22]
 80137de:	4a1c      	ldr	r2, [pc, #112]	; (8013850 <Update_Detail+0x5a0>)
 80137e0:	f852 1033 	ldr.w	r1, [r2, r3, lsl #3]
 80137e4:	8afb      	ldrh	r3, [r7, #22]
 80137e6:	f1a3 021d 	sub.w	r2, r3, #29
 80137ea:	4613      	mov	r3, r2
 80137ec:	005b      	lsls	r3, r3, #1
 80137ee:	4413      	add	r3, r2
 80137f0:	005b      	lsls	r3, r3, #1
 80137f2:	440b      	add	r3, r1
 80137f4:	2201      	movs	r2, #1
 80137f6:	2103      	movs	r1, #3
 80137f8:	f7fa fa42 	bl	800dc80 <DispStr>
        break;
 80137fc:	f000 bd09 	b.w	8014212 <Update_Detail+0xf62>

      case TPYE_OUT:
        if(List[TPYE_OUT].Val ==0) //suqar
 8013800:	4b13      	ldr	r3, [pc, #76]	; (8013850 <Update_Detail+0x5a0>)
 8013802:	f9b3 3124 	ldrsh.w	r3, [r3, #292]	; 0x124
 8013806:	2b00      	cmp	r3, #0
 8013808:	d136      	bne.n	8013878 <Update_Detail+0x5c8>
        {
          BIOS_Ctrl(OUT_MOD, DISABLE);            // �ر����ģʽ
 801380a:	2100      	movs	r1, #0
 801380c:	2000      	movs	r0, #0
 801380e:	f7f8 fdb1 	bl	800c374 <BIOS_Ctrl>
          Set_Fout(List[FREQ_OUT].Val);
 8013812:	4b0f      	ldr	r3, [pc, #60]	; (8013850 <Update_Detail+0x5a0>)
 8013814:	f9b3 312c 	ldrsh.w	r3, [r3, #300]	; 0x12c
 8013818:	4618      	mov	r0, r3
 801381a:	f7f8 ff43 	bl	800c6a4 <Set_Fout>
          Set_Duty();
 801381e:	f7f8 ff15 	bl	800c64c <Set_Duty>
          BIOS_Ctrl(OUT_MOD, PULSED);             // �趨�������ģʽ
 8013822:	2104      	movs	r1, #4
 8013824:	2000      	movs	r0, #0
 8013826:	f7f8 fda5 	bl	800c374 <BIOS_Ctrl>
           BIOS_Ctrl(OUT_CNT, 180);
           BIOS_Ctrl(OUT_BUF, BIOS_Info(List[TPYE_OUT].Val));    // ����ģ��������Ҳ������ݱ�
           BIOS_Ctrl(OUT_MOD, ANALOG);             // �趨ģ�����ģʽ
        }

      break;
 801382a:	f000 bcf2 	b.w	8014212 <Update_Detail+0xf62>
 801382e:	bf00      	nop
 8013830:	20000140 	.word	0x20000140
 8013834:	08002130 	.word	0x08002130
 8013838:	08002108 	.word	0x08002108
 801383c:	08001d00 	.word	0x08001d00
 8013840:	2000283c 	.word	0x2000283c
 8013844:	08000960 	.word	0x08000960
 8013848:	08000964 	.word	0x08000964
 801384c:	080009d0 	.word	0x080009d0
 8013850:	20000298 	.word	0x20000298
 8013854:	08000990 	.word	0x08000990
 8013858:	08000998 	.word	0x08000998
 801385c:	2000284a 	.word	0x2000284a
 8013860:	20006886 	.word	0x20006886
 8013864:	20002862 	.word	0x20002862
 8013868:	20006888 	.word	0x20006888
 801386c:	0800215c 	.word	0x0800215c
 8013870:	08000948 	.word	0x08000948
 8013874:	08000950 	.word	0x08000950
          if(List[FREQ_OUT].Val > MAX_FREQ)
 8013878:	4bbf      	ldr	r3, [pc, #764]	; (8013b78 <Update_Detail+0x8c8>)
 801387a:	f9b3 312c 	ldrsh.w	r3, [r3, #300]	; 0x12c
 801387e:	2b09      	cmp	r3, #9
 8013880:	dd03      	ble.n	801388a <Update_Detail+0x5da>
             List[FREQ_OUT].Val = MAX_FREQ ;   //10KHz
 8013882:	4bbd      	ldr	r3, [pc, #756]	; (8013b78 <Update_Detail+0x8c8>)
 8013884:	2209      	movs	r2, #9
 8013886:	f8a3 212c 	strh.w	r2, [r3, #300]	; 0x12c
           BIOS_Ctrl(OUT_MOD, DISABLE);            // �ر����ģʽ
 801388a:	2100      	movs	r1, #0
 801388c:	2000      	movs	r0, #0
 801388e:	f7f8 fd71 	bl	800c374 <BIOS_Ctrl>
           htim7.Init.Prescaler = Dac_Psc[List[FREQ_OUT].Val] - 1;
 8013892:	4bb9      	ldr	r3, [pc, #740]	; (8013b78 <Update_Detail+0x8c8>)
 8013894:	f9b3 312c 	ldrsh.w	r3, [r3, #300]	; 0x12c
 8013898:	461a      	mov	r2, r3
 801389a:	4bb8      	ldr	r3, [pc, #736]	; (8013b7c <Update_Detail+0x8cc>)
 801389c:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 80138a0:	3b01      	subs	r3, #1
 80138a2:	461a      	mov	r2, r3
 80138a4:	4bb6      	ldr	r3, [pc, #728]	; (8013b80 <Update_Detail+0x8d0>)
 80138a6:	605a      	str	r2, [r3, #4]
           BIOS_Ctrl(DAC_TIM, Dac_Tim[List[FREQ_OUT].Val]-1); // 72MHz/2/180/100 = 2KHz ģ���������(ÿ����36��)
 80138a8:	4bb3      	ldr	r3, [pc, #716]	; (8013b78 <Update_Detail+0x8c8>)
 80138aa:	f9b3 312c 	ldrsh.w	r3, [r3, #300]	; 0x12c
 80138ae:	461a      	mov	r2, r3
 80138b0:	4bb4      	ldr	r3, [pc, #720]	; (8013b84 <Update_Detail+0x8d4>)
 80138b2:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 80138b6:	3b01      	subs	r3, #1
 80138b8:	4619      	mov	r1, r3
 80138ba:	2001      	movs	r0, #1
 80138bc:	f7f8 fd5a 	bl	800c374 <BIOS_Ctrl>
           BIOS_Ctrl(OUT_CNT, 180);
 80138c0:	21b4      	movs	r1, #180	; 0xb4
 80138c2:	2002      	movs	r0, #2
 80138c4:	f7f8 fd56 	bl	800c374 <BIOS_Ctrl>
           BIOS_Ctrl(OUT_BUF, BIOS_Info(List[TPYE_OUT].Val));    // ����ģ��������Ҳ������ݱ�
 80138c8:	4bab      	ldr	r3, [pc, #684]	; (8013b78 <Update_Detail+0x8c8>)
 80138ca:	f9b3 3124 	ldrsh.w	r3, [r3, #292]	; 0x124
 80138ce:	b2db      	uxtb	r3, r3
 80138d0:	4618      	mov	r0, r3
 80138d2:	f7f8 fd39 	bl	800c348 <BIOS_Info>
 80138d6:	4603      	mov	r3, r0
 80138d8:	4619      	mov	r1, r3
 80138da:	2003      	movs	r0, #3
 80138dc:	f7f8 fd4a 	bl	800c374 <BIOS_Ctrl>
           BIOS_Ctrl(OUT_MOD, ANALOG);             // �趨ģ�����ģʽ
 80138e0:	2102      	movs	r1, #2
 80138e2:	2000      	movs	r0, #0
 80138e4:	f7f8 fd46 	bl	800c374 <BIOS_Ctrl>
      break;
 80138e8:	f000 bc93 	b.w	8014212 <Update_Detail+0xf62>

      case FREQ_OUT: // ��ʾ�������Ƶ��
        if(List[TPYE_OUT].Val ==0) //suqar
 80138ec:	4ba2      	ldr	r3, [pc, #648]	; (8013b78 <Update_Detail+0x8c8>)
 80138ee:	f9b3 3124 	ldrsh.w	r3, [r3, #292]	; 0x124
 80138f2:	2b00      	cmp	r3, #0
 80138f4:	d111      	bne.n	801391a <Update_Detail+0x66a>
        {
          BIOS_Ctrl(OUT_MOD, DISABLE);            // �ر����ģʽ
 80138f6:	2100      	movs	r1, #0
 80138f8:	2000      	movs	r0, #0
 80138fa:	f7f8 fd3b 	bl	800c374 <BIOS_Ctrl>
          Set_Fout(List[FREQ_OUT].Val);
 80138fe:	4b9e      	ldr	r3, [pc, #632]	; (8013b78 <Update_Detail+0x8c8>)
 8013900:	f9b3 312c 	ldrsh.w	r3, [r3, #300]	; 0x12c
 8013904:	4618      	mov	r0, r3
 8013906:	f7f8 fecd 	bl	800c6a4 <Set_Fout>
          Set_Duty();
 801390a:	f7f8 fe9f 	bl	800c64c <Set_Duty>
          BIOS_Ctrl(OUT_MOD, PULSED);             // �趨�������ģʽ
 801390e:	2104      	movs	r1, #4
 8013910:	2000      	movs	r0, #0
 8013912:	f7f8 fd2f 	bl	800c374 <BIOS_Ctrl>
          BIOS_Ctrl(DAC_TIM, Dac_Tim[List[FREQ_OUT].Val]-1); // 72MHz/2/180/100 = 2KHz ģ���������(ÿ����36��)
          BIOS_Ctrl(OUT_CNT, 180);
          BIOS_Ctrl(OUT_BUF, BIOS_Info(List[TPYE_OUT].Val));    // ����ģ��������Ҳ������ݱ�
          BIOS_Ctrl(OUT_MOD, ANALOG);             // �趨ģ�����ģʽ
        }
        break;
 8013916:	f000 bc7c 	b.w	8014212 <Update_Detail+0xf62>
          if(List[FREQ_OUT].Val > MAX_FREQ)
 801391a:	4b97      	ldr	r3, [pc, #604]	; (8013b78 <Update_Detail+0x8c8>)
 801391c:	f9b3 312c 	ldrsh.w	r3, [r3, #300]	; 0x12c
 8013920:	2b09      	cmp	r3, #9
 8013922:	dd03      	ble.n	801392c <Update_Detail+0x67c>
            List[FREQ_OUT].Val = MAX_FREQ ;   //10KHz
 8013924:	4b94      	ldr	r3, [pc, #592]	; (8013b78 <Update_Detail+0x8c8>)
 8013926:	2209      	movs	r2, #9
 8013928:	f8a3 212c 	strh.w	r2, [r3, #300]	; 0x12c
          BIOS_Ctrl(OUT_MOD, DISABLE);            // �ر����ģʽ
 801392c:	2100      	movs	r1, #0
 801392e:	2000      	movs	r0, #0
 8013930:	f7f8 fd20 	bl	800c374 <BIOS_Ctrl>
          htim7.Init.Prescaler = Dac_Psc[List[FREQ_OUT].Val] - 1;
 8013934:	4b90      	ldr	r3, [pc, #576]	; (8013b78 <Update_Detail+0x8c8>)
 8013936:	f9b3 312c 	ldrsh.w	r3, [r3, #300]	; 0x12c
 801393a:	461a      	mov	r2, r3
 801393c:	4b8f      	ldr	r3, [pc, #572]	; (8013b7c <Update_Detail+0x8cc>)
 801393e:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8013942:	3b01      	subs	r3, #1
 8013944:	461a      	mov	r2, r3
 8013946:	4b8e      	ldr	r3, [pc, #568]	; (8013b80 <Update_Detail+0x8d0>)
 8013948:	605a      	str	r2, [r3, #4]
          BIOS_Ctrl(DAC_TIM, Dac_Tim[List[FREQ_OUT].Val]-1); // 72MHz/2/180/100 = 2KHz ģ���������(ÿ����36��)
 801394a:	4b8b      	ldr	r3, [pc, #556]	; (8013b78 <Update_Detail+0x8c8>)
 801394c:	f9b3 312c 	ldrsh.w	r3, [r3, #300]	; 0x12c
 8013950:	461a      	mov	r2, r3
 8013952:	4b8c      	ldr	r3, [pc, #560]	; (8013b84 <Update_Detail+0x8d4>)
 8013954:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8013958:	3b01      	subs	r3, #1
 801395a:	4619      	mov	r1, r3
 801395c:	2001      	movs	r0, #1
 801395e:	f7f8 fd09 	bl	800c374 <BIOS_Ctrl>
          BIOS_Ctrl(OUT_CNT, 180);
 8013962:	21b4      	movs	r1, #180	; 0xb4
 8013964:	2002      	movs	r0, #2
 8013966:	f7f8 fd05 	bl	800c374 <BIOS_Ctrl>
          BIOS_Ctrl(OUT_BUF, BIOS_Info(List[TPYE_OUT].Val));    // ����ģ��������Ҳ������ݱ�
 801396a:	4b83      	ldr	r3, [pc, #524]	; (8013b78 <Update_Detail+0x8c8>)
 801396c:	f9b3 3124 	ldrsh.w	r3, [r3, #292]	; 0x124
 8013970:	b2db      	uxtb	r3, r3
 8013972:	4618      	mov	r0, r3
 8013974:	f7f8 fce8 	bl	800c348 <BIOS_Info>
 8013978:	4603      	mov	r3, r0
 801397a:	4619      	mov	r1, r3
 801397c:	2003      	movs	r0, #3
 801397e:	f7f8 fcf9 	bl	800c374 <BIOS_Ctrl>
          BIOS_Ctrl(OUT_MOD, ANALOG);             // �趨ģ�����ģʽ
 8013982:	2102      	movs	r1, #2
 8013984:	2000      	movs	r0, #0
 8013986:	f7f8 fcf5 	bl	800c374 <BIOS_Ctrl>
        break;
 801398a:	f000 bc42 	b.w	8014212 <Update_Detail+0xf62>

      case FREQ_DUT: // ��ʾ�������ռ�ձ�
        SetColor(GRY, TCOLOR[SN]);
 801398e:	f240 531f 	movw	r3, #1311	; 0x51f
 8013992:	4619      	mov	r1, r3
 8013994:	f643 10e7 	movw	r0, #14823	; 0x39e7
 8013998:	f7fa f95a 	bl	800dc50 <SetColor>
        Draw_Circle_D(INV, S_X[i]-3, LABLE_Y, 11, 0, 6*9);
 801399c:	8afb      	ldrh	r3, [r7, #22]
 801399e:	4a7a      	ldr	r2, [pc, #488]	; (8013b88 <Update_Detail+0x8d8>)
 80139a0:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 80139a4:	b29b      	uxth	r3, r3
 80139a6:	3b03      	subs	r3, #3
 80139a8:	b29b      	uxth	r3, r3
 80139aa:	b219      	sxth	r1, r3
 80139ac:	2336      	movs	r3, #54	; 0x36
 80139ae:	9301      	str	r3, [sp, #4]
 80139b0:	2300      	movs	r3, #0
 80139b2:	9300      	str	r3, [sp, #0]
 80139b4:	230b      	movs	r3, #11
 80139b6:	2203      	movs	r2, #3
 80139b8:	2001      	movs	r0, #1
 80139ba:	f7fa fa37 	bl	800de2c <Draw_Circle_D>
        if(List[TPYE_OUT].Val == 0) //suqar
 80139be:	4b6e      	ldr	r3, [pc, #440]	; (8013b78 <Update_Detail+0x8c8>)
 80139c0:	f9b3 3124 	ldrsh.w	r3, [r3, #292]	; 0x124
 80139c4:	2b00      	cmp	r3, #0
 80139c6:	f040 8423 	bne.w	8014210 <Update_Detail+0xf60>
        {
          Set_Duty();
 80139ca:	f7f8 fe3f 	bl	800c64c <Set_Duty>
        }
        break;
 80139ce:	f000 bc1f 	b.w	8014210 <Update_Detail+0xf60>

      case EXT_REFN: // ��ʾ�ο���������
      case EXT_POSI: // ��ʾ�ο�����ƫ��
        SetColor(GRY, TCOLOR[EX]);
 80139d2:	f64f 031f 	movw	r3, #63519	; 0xf81f
 80139d6:	4619      	mov	r1, r3
 80139d8:	f643 10e7 	movw	r0, #14823	; 0x39e7
 80139dc:	f7fa f938 	bl	800dc50 <SetColor>
        if((i == EXT_REFN) || (i == EXT_POSI))
 80139e0:	8afb      	ldrh	r3, [r7, #22]
 80139e2:	2b1a      	cmp	r3, #26
 80139e4:	d002      	beq.n	80139ec <Update_Detail+0x73c>
 80139e6:	8afb      	ldrh	r3, [r7, #22]
 80139e8:	2b1b      	cmp	r3, #27
 80139ea:	d123      	bne.n	8013a34 <Update_Detail+0x784>
        {
          Draw_Circle_D(INV, S_X[EXT_REFN]-3, TITLE_Y_POS, 11, 1, 6*5);
 80139ec:	23a8      	movs	r3, #168	; 0xa8
 80139ee:	b29b      	uxth	r3, r3
 80139f0:	3b03      	subs	r3, #3
 80139f2:	b29b      	uxth	r3, r3
 80139f4:	b219      	sxth	r1, r3
 80139f6:	231e      	movs	r3, #30
 80139f8:	9301      	str	r3, [sp, #4]
 80139fa:	2301      	movs	r3, #1
 80139fc:	9300      	str	r3, [sp, #0]
 80139fe:	230b      	movs	r3, #11
 8013a00:	22e1      	movs	r2, #225	; 0xe1
 8013a02:	2001      	movs	r0, #1
 8013a04:	f7fa fa12 	bl	800de2c <Draw_Circle_D>
          DispStr(S_X[EXT_REFN], TITLE_Y_POS, INV, (char*)(List[EXT_HIDE].Val? I[List[EXT_REFN].Val] : I[6]));
 8013a08:	20a8      	movs	r0, #168	; 0xa8
 8013a0a:	4b5b      	ldr	r3, [pc, #364]	; (8013b78 <Update_Detail+0x8c8>)
 8013a0c:	f9b3 30e4 	ldrsh.w	r3, [r3, #228]	; 0xe4
 8013a10:	2b00      	cmp	r3, #0
 8013a12:	d00a      	beq.n	8013a2a <Update_Detail+0x77a>
 8013a14:	4b58      	ldr	r3, [pc, #352]	; (8013b78 <Update_Detail+0x8c8>)
 8013a16:	f9b3 30d4 	ldrsh.w	r3, [r3, #212]	; 0xd4
 8013a1a:	461a      	mov	r2, r3
 8013a1c:	4613      	mov	r3, r2
 8013a1e:	005b      	lsls	r3, r3, #1
 8013a20:	4413      	add	r3, r2
 8013a22:	005b      	lsls	r3, r3, #1
 8013a24:	4a59      	ldr	r2, [pc, #356]	; (8013b8c <Update_Detail+0x8dc>)
 8013a26:	4413      	add	r3, r2
 8013a28:	e000      	b.n	8013a2c <Update_Detail+0x77c>
 8013a2a:	4b59      	ldr	r3, [pc, #356]	; (8013b90 <Update_Detail+0x8e0>)
 8013a2c:	2201      	movs	r2, #1
 8013a2e:	21e1      	movs	r1, #225	; 0xe1
 8013a30:	f7fa f926 	bl	800dc80 <DispStr>
        }
        if(List[EXT_REFN].Val < 6) ParamTab[P2x2]=(List[EXT_POSI].Val + 1)*2;
 8013a34:	4b50      	ldr	r3, [pc, #320]	; (8013b78 <Update_Detail+0x8c8>)
 8013a36:	f9b3 30d4 	ldrsh.w	r3, [r3, #212]	; 0xd4
 8013a3a:	2b05      	cmp	r3, #5
 8013a3c:	dc0a      	bgt.n	8013a54 <Update_Detail+0x7a4>
 8013a3e:	4b4e      	ldr	r3, [pc, #312]	; (8013b78 <Update_Detail+0x8c8>)
 8013a40:	f9b3 30dc 	ldrsh.w	r3, [r3, #220]	; 0xdc
 8013a44:	3301      	adds	r3, #1
 8013a46:	b29b      	uxth	r3, r3
 8013a48:	005b      	lsls	r3, r3, #1
 8013a4a:	b29b      	uxth	r3, r3
 8013a4c:	b21a      	sxth	r2, r3
 8013a4e:	4b51      	ldr	r3, [pc, #324]	; (8013b94 <Update_Detail+0x8e4>)
 8013a50:	82da      	strh	r2, [r3, #22]
        else                       ParamTab[P2x2]=(List[ V0_POSI].Val + 1)*2;
        break;
 8013a52:	e3de      	b.n	8014212 <Update_Detail+0xf62>
        else                       ParamTab[P2x2]=(List[ V0_POSI].Val + 1)*2;
 8013a54:	4b48      	ldr	r3, [pc, #288]	; (8013b78 <Update_Detail+0x8c8>)
 8013a56:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 8013a5a:	3301      	adds	r3, #1
 8013a5c:	b29b      	uxth	r3, r3
 8013a5e:	005b      	lsls	r3, r3, #1
 8013a60:	b29b      	uxth	r3, r3
 8013a62:	b21a      	sxth	r2, r3
 8013a64:	4b4b      	ldr	r3, [pc, #300]	; (8013b94 <Update_Detail+0x8e4>)
 8013a66:	82da      	strh	r2, [r3, #22]
        break;
 8013a68:	e3d3      	b.n	8014212 <Update_Detail+0xf62>

      case EXT_HIDE:
        if(List[EXT_HIDE].Val == 0) ParamTab[P2F] |=  W_HID;  // W_HID�����ο�����
 8013a6a:	4b43      	ldr	r3, [pc, #268]	; (8013b78 <Update_Detail+0x8c8>)
 8013a6c:	f9b3 30e4 	ldrsh.w	r3, [r3, #228]	; 0xe4
 8013a70:	2b00      	cmp	r3, #0
 8013a72:	d108      	bne.n	8013a86 <Update_Detail+0x7d6>
 8013a74:	4b47      	ldr	r3, [pc, #284]	; (8013b94 <Update_Detail+0x8e4>)
 8013a76:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8013a7a:	f043 0304 	orr.w	r3, r3, #4
 8013a7e:	b21a      	sxth	r2, r3
 8013a80:	4b44      	ldr	r3, [pc, #272]	; (8013b94 <Update_Detail+0x8e4>)
 8013a82:	805a      	strh	r2, [r3, #2]
 8013a84:	e007      	b.n	8013a96 <Update_Detail+0x7e6>
        else                        ParamTab[P2F] &= ~W_HID;  // W_HID��ʾ�ο�����
 8013a86:	4b43      	ldr	r3, [pc, #268]	; (8013b94 <Update_Detail+0x8e4>)
 8013a88:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8013a8c:	f023 0304 	bic.w	r3, r3, #4
 8013a90:	b21a      	sxth	r2, r3
 8013a92:	4b40      	ldr	r3, [pc, #256]	; (8013b94 <Update_Detail+0x8e4>)
 8013a94:	805a      	strh	r2, [r3, #2]
        SetColor(GRY, TCOLOR[EX]);
 8013a96:	f64f 031f 	movw	r3, #63519	; 0xf81f
 8013a9a:	4619      	mov	r1, r3
 8013a9c:	f643 10e7 	movw	r0, #14823	; 0x39e7
 8013aa0:	f7fa f8d6 	bl	800dc50 <SetColor>
        Draw_Circle_D(INV, S_X[EXT_REFN]-3, TITLE_Y_POS, 11, 1, 6*5);
 8013aa4:	23a8      	movs	r3, #168	; 0xa8
 8013aa6:	b29b      	uxth	r3, r3
 8013aa8:	3b03      	subs	r3, #3
 8013aaa:	b29b      	uxth	r3, r3
 8013aac:	b219      	sxth	r1, r3
 8013aae:	231e      	movs	r3, #30
 8013ab0:	9301      	str	r3, [sp, #4]
 8013ab2:	2301      	movs	r3, #1
 8013ab4:	9300      	str	r3, [sp, #0]
 8013ab6:	230b      	movs	r3, #11
 8013ab8:	22e1      	movs	r2, #225	; 0xe1
 8013aba:	2001      	movs	r0, #1
 8013abc:	f7fa f9b6 	bl	800de2c <Draw_Circle_D>
        DispStr(S_X[EXT_REFN], TITLE_Y_POS, INV, (char*)(List[EXT_HIDE].Val? I[List[EXT_REFN].Val] : I[6]));
 8013ac0:	20a8      	movs	r0, #168	; 0xa8
 8013ac2:	4b2d      	ldr	r3, [pc, #180]	; (8013b78 <Update_Detail+0x8c8>)
 8013ac4:	f9b3 30e4 	ldrsh.w	r3, [r3, #228]	; 0xe4
 8013ac8:	2b00      	cmp	r3, #0
 8013aca:	d00a      	beq.n	8013ae2 <Update_Detail+0x832>
 8013acc:	4b2a      	ldr	r3, [pc, #168]	; (8013b78 <Update_Detail+0x8c8>)
 8013ace:	f9b3 30d4 	ldrsh.w	r3, [r3, #212]	; 0xd4
 8013ad2:	461a      	mov	r2, r3
 8013ad4:	4613      	mov	r3, r2
 8013ad6:	005b      	lsls	r3, r3, #1
 8013ad8:	4413      	add	r3, r2
 8013ada:	005b      	lsls	r3, r3, #1
 8013adc:	4a2b      	ldr	r2, [pc, #172]	; (8013b8c <Update_Detail+0x8dc>)
 8013ade:	4413      	add	r3, r2
 8013ae0:	e000      	b.n	8013ae4 <Update_Detail+0x834>
 8013ae2:	4b2b      	ldr	r3, [pc, #172]	; (8013b90 <Update_Detail+0x8e0>)
 8013ae4:	2201      	movs	r2, #1
 8013ae6:	21e1      	movs	r1, #225	; 0xe1
 8013ae8:	f7fa f8ca 	bl	800dc80 <DispStr>
      break;
 8013aec:	e391      	b.n	8014212 <Update_Detail+0xf62>
      case TR_MODE:   // ˢ����ʾ������ʽ
      case FITTRIGG:  // ˢ����ʾ�Զ�������ֵ
      case THRESHOLD: // ˢ����ʾ������ֵ
      case SENSITIVE: // ˢ����ʾ����������
      case TR_TYPE:   // ˢ����ʾ�α���ʽ
        DispStatus();
 8013aee:	f000 fc6b 	bl	80143c8 <DispStatus>
        SetColor(GRY, TCOLOR[TRG]);
 8013af2:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8013af6:	4619      	mov	r1, r3
 8013af8:	f643 10e7 	movw	r0, #14823	; 0x39e7
 8013afc:	f7fa f8a8 	bl	800dc50 <SetColor>
        if(i == TR_MODE || i==SENSITIVE)
 8013b00:	8afb      	ldrh	r3, [r7, #22]
 8013b02:	2b0e      	cmp	r3, #14
 8013b04:	d002      	beq.n	8013b0c <Update_Detail+0x85c>
 8013b06:	8afb      	ldrh	r3, [r7, #22]
 8013b08:	2b11      	cmp	r3, #17
 8013b0a:	d11a      	bne.n	8013b42 <Update_Detail+0x892>
        {
          Draw_Circle_D(INV, S_X[TR_MODE]-3, TITLE_Y_POS, 11, 0, 6*8);
 8013b0c:	23dd      	movs	r3, #221	; 0xdd
 8013b0e:	b29b      	uxth	r3, r3
 8013b10:	3b03      	subs	r3, #3
 8013b12:	b29b      	uxth	r3, r3
 8013b14:	b219      	sxth	r1, r3
 8013b16:	2330      	movs	r3, #48	; 0x30
 8013b18:	9301      	str	r3, [sp, #4]
 8013b1a:	2300      	movs	r3, #0
 8013b1c:	9300      	str	r3, [sp, #0]
 8013b1e:	230b      	movs	r3, #11
 8013b20:	22e1      	movs	r2, #225	; 0xe1
 8013b22:	2001      	movs	r0, #1
 8013b24:	f7fa f982 	bl	800de2c <Draw_Circle_D>
          DispStr10x14(S_X[TR_MODE], TITLE_Y_POS, INV+SYMB,(List[TR_MODE].Val?("D"):("C")));
 8013b28:	20dd      	movs	r0, #221	; 0xdd
 8013b2a:	4b13      	ldr	r3, [pc, #76]	; (8013b78 <Update_Detail+0x8c8>)
 8013b2c:	f9b3 3074 	ldrsh.w	r3, [r3, #116]	; 0x74
 8013b30:	2b00      	cmp	r3, #0
 8013b32:	d001      	beq.n	8013b38 <Update_Detail+0x888>
 8013b34:	4b18      	ldr	r3, [pc, #96]	; (8013b98 <Update_Detail+0x8e8>)
 8013b36:	e000      	b.n	8013b3a <Update_Detail+0x88a>
 8013b38:	4b18      	ldr	r3, [pc, #96]	; (8013b9c <Update_Detail+0x8ec>)
 8013b3a:	2211      	movs	r2, #17
 8013b3c:	21e1      	movs	r1, #225	; 0xe1
 8013b3e:	f7fa fb07 	bl	800e150 <DispStr10x14>
        }
        if(i == FITTRIGG)
 8013b42:	8afb      	ldrh	r3, [r7, #22]
 8013b44:	2b0f      	cmp	r3, #15
 8013b46:	d134      	bne.n	8013bb2 <Update_Detail+0x902>
        {
          DispStr10x14(S_X[FITTRIGG], TITLE_Y_POS, PRN+SYMB,(List[FITTRIGG].Val?("F"):("B")));
 8013b48:	20cf      	movs	r0, #207	; 0xcf
 8013b4a:	4b0b      	ldr	r3, [pc, #44]	; (8013b78 <Update_Detail+0x8c8>)
 8013b4c:	f9b3 307c 	ldrsh.w	r3, [r3, #124]	; 0x7c
 8013b50:	2b00      	cmp	r3, #0
 8013b52:	d001      	beq.n	8013b58 <Update_Detail+0x8a8>
 8013b54:	4b12      	ldr	r3, [pc, #72]	; (8013ba0 <Update_Detail+0x8f0>)
 8013b56:	e000      	b.n	8013b5a <Update_Detail+0x8aa>
 8013b58:	4b12      	ldr	r3, [pc, #72]	; (8013ba4 <Update_Detail+0x8f4>)
 8013b5a:	2210      	movs	r2, #16
 8013b5c:	21e1      	movs	r1, #225	; 0xe1
 8013b5e:	f7fa faf7 	bl	800e150 <DispStr10x14>
          if(List[FITTRIGG].Val)KEYTIME = 300;
 8013b62:	4b05      	ldr	r3, [pc, #20]	; (8013b78 <Update_Detail+0x8c8>)
 8013b64:	f9b3 307c 	ldrsh.w	r3, [r3, #124]	; 0x7c
 8013b68:	2b00      	cmp	r3, #0
 8013b6a:	d01f      	beq.n	8013bac <Update_Detail+0x8fc>
 8013b6c:	4b0e      	ldr	r3, [pc, #56]	; (8013ba8 <Update_Detail+0x8f8>)
 8013b6e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8013b72:	801a      	strh	r2, [r3, #0]
 8013b74:	e01d      	b.n	8013bb2 <Update_Detail+0x902>
 8013b76:	bf00      	nop
 8013b78:	20000298 	.word	0x20000298
 8013b7c:	08002338 	.word	0x08002338
 8013b80:	20006bd0 	.word	0x20006bd0
 8013b84:	08001d90 	.word	0x08001d90
 8013b88:	0800215c 	.word	0x0800215c
 8013b8c:	08001c88 	.word	0x08001c88
 8013b90:	08001cac 	.word	0x08001cac
 8013b94:	20000140 	.word	0x20000140
 8013b98:	08000988 	.word	0x08000988
 8013b9c:	0800098c 	.word	0x0800098c
 8013ba0:	0800099c 	.word	0x0800099c
 8013ba4:	0800095c 	.word	0x0800095c
 8013ba8:	2000077e 	.word	0x2000077e
          else KEYTIME = 0;
 8013bac:	4bac      	ldr	r3, [pc, #688]	; (8013e60 <Update_Detail+0xbb0>)
 8013bae:	2200      	movs	r2, #0
 8013bb0:	801a      	strh	r2, [r3, #0]
        }
        ParamTab[VTx2]= ParamTab[P1x2]+2*List[THRESHOLD].Val;
 8013bb2:	4bac      	ldr	r3, [pc, #688]	; (8013e64 <Update_Detail+0xbb4>)
 8013bb4:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8013bb8:	b29a      	uxth	r2, r3
 8013bba:	4bab      	ldr	r3, [pc, #684]	; (8013e68 <Update_Detail+0xbb8>)
 8013bbc:	f9b3 3084 	ldrsh.w	r3, [r3, #132]	; 0x84
 8013bc0:	b29b      	uxth	r3, r3
 8013bc2:	005b      	lsls	r3, r3, #1
 8013bc4:	b29b      	uxth	r3, r3
 8013bc6:	4413      	add	r3, r2
 8013bc8:	b29b      	uxth	r3, r3
 8013bca:	b21a      	sxth	r2, r3
 8013bcc:	4ba5      	ldr	r3, [pc, #660]	; (8013e64 <Update_Detail+0xbb4>)
 8013bce:	839a      	strh	r2, [r3, #28]
        Tmp  = List[SENSITIVE].Val;
 8013bd0:	4ba5      	ldr	r3, [pc, #660]	; (8013e68 <Update_Detail+0xbb8>)
 8013bd2:	f9b3 308c 	ldrsh.w	r3, [r3, #140]	; 0x8c
 8013bd6:	613b      	str	r3, [r7, #16]
        Tmp *= X_SCALE[Range]* Exp(V_SCALE[Range]);
 8013bd8:	f9b7 3000 	ldrsh.w	r3, [r7]
 8013bdc:	4aa3      	ldr	r2, [pc, #652]	; (8013e6c <Update_Detail+0xbbc>)
 8013bde:	5cd3      	ldrb	r3, [r2, r3]
 8013be0:	461c      	mov	r4, r3
 8013be2:	f9b7 3000 	ldrsh.w	r3, [r7]
 8013be6:	4aa2      	ldr	r2, [pc, #648]	; (8013e70 <Update_Detail+0xbc0>)
 8013be8:	5cd3      	ldrb	r3, [r2, r3]
 8013bea:	4618      	mov	r0, r3
 8013bec:	f7fe f81c 	bl	8011c28 <Exp>
 8013bf0:	4603      	mov	r3, r0
 8013bf2:	fb03 f204 	mul.w	r2, r3, r4
 8013bf6:	693b      	ldr	r3, [r7, #16]
 8013bf8:	fb02 f303 	mul.w	r3, r2, r3
 8013bfc:	613b      	str	r3, [r7, #16]
        Value2Str(NumStr, Tmp, V[0], 2, UNSIGN);
 8013bfe:	2301      	movs	r3, #1
 8013c00:	9300      	str	r3, [sp, #0]
 8013c02:	2302      	movs	r3, #2
 8013c04:	4a9b      	ldr	r2, [pc, #620]	; (8013e74 <Update_Detail+0xbc4>)
 8013c06:	6939      	ldr	r1, [r7, #16]
 8013c08:	489b      	ldr	r0, [pc, #620]	; (8013e78 <Update_Detail+0xbc8>)
 8013c0a:	f7fd ff11 	bl	8011a30 <Value2Str>
        DispStr10x14(S_X[SENSITIVE], TITLE_Y_POS, INV+SYMB,"E");
 8013c0e:	20e7      	movs	r0, #231	; 0xe7
 8013c10:	4b9a      	ldr	r3, [pc, #616]	; (8013e7c <Update_Detail+0xbcc>)
 8013c12:	2211      	movs	r2, #17
 8013c14:	21e1      	movs	r1, #225	; 0xe1
 8013c16:	f7fa fa9b 	bl	800e150 <DispStr10x14>
        DispStr(S_X[SENSITIVE]+9, TITLE_Y_POS, INV,  "     ");
 8013c1a:	23e7      	movs	r3, #231	; 0xe7
 8013c1c:	b29b      	uxth	r3, r3
 8013c1e:	3309      	adds	r3, #9
 8013c20:	b29b      	uxth	r3, r3
 8013c22:	b218      	sxth	r0, r3
 8013c24:	4b96      	ldr	r3, [pc, #600]	; (8013e80 <Update_Detail+0xbd0>)
 8013c26:	2201      	movs	r2, #1
 8013c28:	21e1      	movs	r1, #225	; 0xe1
 8013c2a:	f7fa f829 	bl	800dc80 <DispStr>
        DispStr(S_X[SENSITIVE]+9, TITLE_Y_POS, INV,  (char *)NumStr);
 8013c2e:	23e7      	movs	r3, #231	; 0xe7
 8013c30:	b29b      	uxth	r3, r3
 8013c32:	3309      	adds	r3, #9
 8013c34:	b29b      	uxth	r3, r3
 8013c36:	b218      	sxth	r0, r3
 8013c38:	4b8f      	ldr	r3, [pc, #572]	; (8013e78 <Update_Detail+0xbc8>)
 8013c3a:	2201      	movs	r2, #1
 8013c3c:	21e1      	movs	r1, #225	; 0xe1
 8013c3e:	f7fa f81f 	bl	800dc80 <DispStr>
        ParamTab[VTF]=(List[TR_TYPE].Val)? L_HID : SHOW;
 8013c42:	4b89      	ldr	r3, [pc, #548]	; (8013e68 <Update_Detail+0xbb8>)
 8013c44:	f9b3 3094 	ldrsh.w	r3, [r3, #148]	; 0x94
 8013c48:	2b00      	cmp	r3, #0
 8013c4a:	d001      	beq.n	8013c50 <Update_Detail+0x9a0>
 8013c4c:	2202      	movs	r2, #2
 8013c4e:	e000      	b.n	8013c52 <Update_Detail+0x9a2>
 8013c50:	2200      	movs	r2, #0
 8013c52:	4b84      	ldr	r3, [pc, #528]	; (8013e64 <Update_Detail+0xbb4>)
 8013c54:	811a      	strh	r2, [r3, #8]
        break;
 8013c56:	e2dc      	b.n	8014212 <Update_Detail+0xf62>
      case VIEWPOSI:  // ˢ����ʾˮƽ�Ӵ�λ��
      case SMPL_DPTH: // ˢ����ʾ�������
      case T1_POSI:   // ˢ����ʾ����α�λ��
      case T2_POSI:   // ˢ����ʾ�Ҷ��α�λ��
      case XN_TYPE:   // ˢ����ʾ�α���ʽ
        SetColor(GRY, TCOLOR[XN]);
 8013c58:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8013c5c:	4619      	mov	r1, r3
 8013c5e:	f643 10e7 	movw	r0, #14823	; 0x39e7
 8013c62:	f7f9 fff5 	bl	800dc50 <SetColor>
        if(i == TIM_BASE)
 8013c66:	8afb      	ldrh	r3, [r7, #22]
 8013c68:	2b07      	cmp	r3, #7
 8013c6a:	d11e      	bne.n	8013caa <Update_Detail+0x9fa>
        {
          Draw_Circle_D(INV, S_X[i]-3, TITLE_Y_POS, 11, 2, 6*5);
 8013c6c:	8afb      	ldrh	r3, [r7, #22]
 8013c6e:	4a85      	ldr	r2, [pc, #532]	; (8013e84 <Update_Detail+0xbd4>)
 8013c70:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8013c74:	b29b      	uxth	r3, r3
 8013c76:	3b03      	subs	r3, #3
 8013c78:	b29b      	uxth	r3, r3
 8013c7a:	b219      	sxth	r1, r3
 8013c7c:	231e      	movs	r3, #30
 8013c7e:	9301      	str	r3, [sp, #4]
 8013c80:	2302      	movs	r3, #2
 8013c82:	9300      	str	r3, [sp, #0]
 8013c84:	230b      	movs	r3, #11
 8013c86:	22e1      	movs	r2, #225	; 0xe1
 8013c88:	2001      	movs	r0, #1
 8013c8a:	f7fa f8cf 	bl	800de2c <Draw_Circle_D>
          DispStr(S_X[i], TITLE_Y_POS, INV, TimeBase_Str[List[TIM_BASE].Val]);
 8013c8e:	8afb      	ldrh	r3, [r7, #22]
 8013c90:	4a7c      	ldr	r2, [pc, #496]	; (8013e84 <Update_Detail+0xbd4>)
 8013c92:	f932 0013 	ldrsh.w	r0, [r2, r3, lsl #1]
 8013c96:	4b74      	ldr	r3, [pc, #464]	; (8013e68 <Update_Detail+0xbb8>)
 8013c98:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8013c9c:	00db      	lsls	r3, r3, #3
 8013c9e:	4a7a      	ldr	r2, [pc, #488]	; (8013e88 <Update_Detail+0xbd8>)
 8013ca0:	4413      	add	r3, r2
 8013ca2:	2201      	movs	r2, #1
 8013ca4:	21e1      	movs	r1, #225	; 0xe1
 8013ca6:	f7f9 ffeb 	bl	800dc80 <DispStr>
        }
        if(i == SMPL_DPTH){
 8013caa:	8afb      	ldrh	r3, [r7, #22]
 8013cac:	2b09      	cmp	r3, #9
 8013cae:	d126      	bne.n	8013cfe <Update_Detail+0xa4e>
          Draw_Circle_D(INV, S_X[SMPL_DPTH]-3, LABLE_Y, 11, 0, 6*11);
 8013cb0:	23f8      	movs	r3, #248	; 0xf8
 8013cb2:	b29b      	uxth	r3, r3
 8013cb4:	3b03      	subs	r3, #3
 8013cb6:	b29b      	uxth	r3, r3
 8013cb8:	b219      	sxth	r1, r3
 8013cba:	2342      	movs	r3, #66	; 0x42
 8013cbc:	9301      	str	r3, [sp, #4]
 8013cbe:	2300      	movs	r3, #0
 8013cc0:	9300      	str	r3, [sp, #0]
 8013cc2:	230b      	movs	r3, #11
 8013cc4:	2203      	movs	r2, #3
 8013cc6:	2001      	movs	r0, #1
 8013cc8:	f7fa f8b0 	bl	800de2c <Draw_Circle_D>
          DispStr(S_X[SMPL_DPTH],    LABLE_Y,  INV, "SmplDpth:  ");
 8013ccc:	20f8      	movs	r0, #248	; 0xf8
 8013cce:	4b6f      	ldr	r3, [pc, #444]	; (8013e8c <Update_Detail+0xbdc>)
 8013cd0:	2201      	movs	r2, #1
 8013cd2:	2103      	movs	r1, #3
 8013cd4:	f7f9 ffd4 	bl	800dc80 <DispStr>
          DispStr(S_X[SMPL_DPTH]+6*9, LABLE_Y,  INV, (char *)&D[List[SMPL_DPTH].Val]);
 8013cd8:	23f8      	movs	r3, #248	; 0xf8
 8013cda:	b29b      	uxth	r3, r3
 8013cdc:	3336      	adds	r3, #54	; 0x36
 8013cde:	b29b      	uxth	r3, r3
 8013ce0:	b218      	sxth	r0, r3
 8013ce2:	4b61      	ldr	r3, [pc, #388]	; (8013e68 <Update_Detail+0xbb8>)
 8013ce4:	f9b3 304c 	ldrsh.w	r3, [r3, #76]	; 0x4c
 8013ce8:	461a      	mov	r2, r3
 8013cea:	4613      	mov	r3, r2
 8013cec:	005b      	lsls	r3, r3, #1
 8013cee:	4413      	add	r3, r2
 8013cf0:	005b      	lsls	r3, r3, #1
 8013cf2:	4a67      	ldr	r2, [pc, #412]	; (8013e90 <Update_Detail+0xbe0>)
 8013cf4:	4413      	add	r3, r2
 8013cf6:	2201      	movs	r2, #1
 8013cf8:	2103      	movs	r1, #3
 8013cfa:	f7f9 ffc1 	bl	800dc80 <DispStr>
        }
        Update_Windows();
 8013cfe:	f000 fbad 	bl	801445c <Update_Windows>

        ParamTab[T0x1] = 2 + Presampling - List[VIEWPOSI].Val;
 8013d02:	4b64      	ldr	r3, [pc, #400]	; (8013e94 <Update_Detail+0xbe4>)
 8013d04:	f9b3 3000 	ldrsh.w	r3, [r3]
 8013d08:	b29a      	uxth	r2, r3
 8013d0a:	4b57      	ldr	r3, [pc, #348]	; (8013e68 <Update_Detail+0xbb8>)
 8013d0c:	f9b3 3044 	ldrsh.w	r3, [r3, #68]	; 0x44
 8013d10:	b29b      	uxth	r3, r3
 8013d12:	1ad3      	subs	r3, r2, r3
 8013d14:	b29b      	uxth	r3, r3
 8013d16:	3302      	adds	r3, #2
 8013d18:	b29b      	uxth	r3, r3
 8013d1a:	b21a      	sxth	r2, r3
 8013d1c:	4b51      	ldr	r3, [pc, #324]	; (8013e64 <Update_Detail+0xbb4>)
 8013d1e:	845a      	strh	r2, [r3, #34]	; 0x22
        ParamTab[T0F] &= ~D_HID;
 8013d20:	4b50      	ldr	r3, [pc, #320]	; (8013e64 <Update_Detail+0xbb4>)
 8013d22:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8013d26:	f023 0301 	bic.w	r3, r3, #1
 8013d2a:	b21a      	sxth	r2, r3
 8013d2c:	4b4d      	ldr	r3, [pc, #308]	; (8013e64 <Update_Detail+0xbb4>)
 8013d2e:	81da      	strh	r2, [r3, #14]
        ParamTab[T1F] &= ~D_HID;
 8013d30:	4b4c      	ldr	r3, [pc, #304]	; (8013e64 <Update_Detail+0xbb4>)
 8013d32:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8013d36:	f023 0301 	bic.w	r3, r3, #1
 8013d3a:	b21a      	sxth	r2, r3
 8013d3c:	4b49      	ldr	r3, [pc, #292]	; (8013e64 <Update_Detail+0xbb4>)
 8013d3e:	821a      	strh	r2, [r3, #16]
        ParamTab[T1F] &= ~D_HID;
 8013d40:	4b48      	ldr	r3, [pc, #288]	; (8013e64 <Update_Detail+0xbb4>)
 8013d42:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8013d46:	f023 0301 	bic.w	r3, r3, #1
 8013d4a:	b21a      	sxth	r2, r3
 8013d4c:	4b45      	ldr	r3, [pc, #276]	; (8013e64 <Update_Detail+0xbb4>)
 8013d4e:	821a      	strh	r2, [r3, #16]
        ParamTab[T1x1] = List[T1_POSI].Val+1;
 8013d50:	4b45      	ldr	r3, [pc, #276]	; (8013e68 <Update_Detail+0xbb8>)
 8013d52:	f9b3 3054 	ldrsh.w	r3, [r3, #84]	; 0x54
 8013d56:	b29b      	uxth	r3, r3
 8013d58:	3301      	adds	r3, #1
 8013d5a:	b29b      	uxth	r3, r3
 8013d5c:	b21a      	sxth	r2, r3
 8013d5e:	4b41      	ldr	r3, [pc, #260]	; (8013e64 <Update_Detail+0xbb4>)
 8013d60:	849a      	strh	r2, [r3, #36]	; 0x24
        ParamTab[T2x1] = List[T2_POSI].Val+1;
 8013d62:	4b41      	ldr	r3, [pc, #260]	; (8013e68 <Update_Detail+0xbb8>)
 8013d64:	f9b3 305c 	ldrsh.w	r3, [r3, #92]	; 0x5c
 8013d68:	b29b      	uxth	r3, r3
 8013d6a:	3301      	adds	r3, #1
 8013d6c:	b29b      	uxth	r3, r3
 8013d6e:	b21a      	sxth	r2, r3
 8013d70:	4b3c      	ldr	r3, [pc, #240]	; (8013e64 <Update_Detail+0xbb4>)
 8013d72:	84da      	strh	r2, [r3, #38]	; 0x26
        ParamTab[T1F]  = (List[XN_TYPE].Val)? L_HID : SHOW;
 8013d74:	4b3c      	ldr	r3, [pc, #240]	; (8013e68 <Update_Detail+0xbb8>)
 8013d76:	f9b3 3064 	ldrsh.w	r3, [r3, #100]	; 0x64
 8013d7a:	2b00      	cmp	r3, #0
 8013d7c:	d001      	beq.n	8013d82 <Update_Detail+0xad2>
 8013d7e:	2202      	movs	r2, #2
 8013d80:	e000      	b.n	8013d84 <Update_Detail+0xad4>
 8013d82:	2200      	movs	r2, #0
 8013d84:	4b37      	ldr	r3, [pc, #220]	; (8013e64 <Update_Detail+0xbb4>)
 8013d86:	821a      	strh	r2, [r3, #16]
        ParamTab[T2F]  = (List[XN_TYPE].Val)? L_HID : SHOW;
 8013d88:	4b37      	ldr	r3, [pc, #220]	; (8013e68 <Update_Detail+0xbb8>)
 8013d8a:	f9b3 3064 	ldrsh.w	r3, [r3, #100]	; 0x64
 8013d8e:	2b00      	cmp	r3, #0
 8013d90:	d001      	beq.n	8013d96 <Update_Detail+0xae6>
 8013d92:	2202      	movs	r2, #2
 8013d94:	e000      	b.n	8013d98 <Update_Detail+0xae8>
 8013d96:	2200      	movs	r2, #0
 8013d98:	4b32      	ldr	r3, [pc, #200]	; (8013e64 <Update_Detail+0xbb4>)
 8013d9a:	825a      	strh	r2, [r3, #18]
        Tmp  = ParamTab[T2x1] - ParamTab[T1x1];
 8013d9c:	4b31      	ldr	r3, [pc, #196]	; (8013e64 <Update_Detail+0xbb4>)
 8013d9e:	f9b3 3026 	ldrsh.w	r3, [r3, #38]	; 0x26
 8013da2:	461a      	mov	r2, r3
 8013da4:	4b2f      	ldr	r3, [pc, #188]	; (8013e64 <Update_Detail+0xbb4>)
 8013da6:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	; 0x24
 8013daa:	1ad3      	subs	r3, r2, r3
 8013dac:	613b      	str	r3, [r7, #16]
        Tmp *= B_SCALE[List[TIM_BASE].Val]* Exp(T_SCALE[List[TIM_BASE].Val]);
 8013dae:	4b2e      	ldr	r3, [pc, #184]	; (8013e68 <Update_Detail+0xbb8>)
 8013db0:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8013db4:	461a      	mov	r2, r3
 8013db6:	4b38      	ldr	r3, [pc, #224]	; (8013e98 <Update_Detail+0xbe8>)
 8013db8:	5c9b      	ldrb	r3, [r3, r2]
 8013dba:	461c      	mov	r4, r3
 8013dbc:	4b2a      	ldr	r3, [pc, #168]	; (8013e68 <Update_Detail+0xbb8>)
 8013dbe:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8013dc2:	461a      	mov	r2, r3
 8013dc4:	4b35      	ldr	r3, [pc, #212]	; (8013e9c <Update_Detail+0xbec>)
 8013dc6:	5c9b      	ldrb	r3, [r3, r2]
 8013dc8:	4618      	mov	r0, r3
 8013dca:	f7fd ff2d 	bl	8011c28 <Exp>
 8013dce:	4603      	mov	r3, r0
 8013dd0:	fb03 f204 	mul.w	r2, r3, r4
 8013dd4:	693b      	ldr	r3, [r7, #16]
 8013dd6:	fb02 f303 	mul.w	r3, r2, r3
 8013dda:	613b      	str	r3, [r7, #16]
        Value2Str(NumStr, Tmp, T[0], 3, UNSIGN);
 8013ddc:	2301      	movs	r3, #1
 8013dde:	9300      	str	r3, [sp, #0]
 8013de0:	2303      	movs	r3, #3
 8013de2:	4a2f      	ldr	r2, [pc, #188]	; (8013ea0 <Update_Detail+0xbf0>)
 8013de4:	6939      	ldr	r1, [r7, #16]
 8013de6:	4824      	ldr	r0, [pc, #144]	; (8013e78 <Update_Detail+0xbc8>)
 8013de8:	f7fd fe22 	bl	8011a30 <Value2Str>
        Draw_Circle_D(INV, S_X[V1_POSI]-3, LABLE_Y, 11, 0, 6*9);
 8013dec:	2307      	movs	r3, #7
 8013dee:	b29b      	uxth	r3, r3
 8013df0:	3b03      	subs	r3, #3
 8013df2:	b29b      	uxth	r3, r3
 8013df4:	b219      	sxth	r1, r3
 8013df6:	2336      	movs	r3, #54	; 0x36
 8013df8:	9301      	str	r3, [sp, #4]
 8013dfa:	2300      	movs	r3, #0
 8013dfc:	9300      	str	r3, [sp, #0]
 8013dfe:	230b      	movs	r3, #11
 8013e00:	2203      	movs	r2, #3
 8013e02:	2001      	movs	r0, #1
 8013e04:	f7fa f812 	bl	800de2c <Draw_Circle_D>
        DispStr(S_X[T1_POSI]+0*6, LABLE_Y, INV+SYMB, "]");
 8013e08:	2007      	movs	r0, #7
 8013e0a:	4b26      	ldr	r3, [pc, #152]	; (8013ea4 <Update_Detail+0xbf4>)
 8013e0c:	2211      	movs	r2, #17
 8013e0e:	2103      	movs	r1, #3
 8013e10:	f7f9 ff36 	bl	800dc80 <DispStr>
        DispStr(S_X[T1_POSI]+1*6, LABLE_Y, INV,      "T:      ");
 8013e14:	2307      	movs	r3, #7
 8013e16:	b29b      	uxth	r3, r3
 8013e18:	3306      	adds	r3, #6
 8013e1a:	b29b      	uxth	r3, r3
 8013e1c:	b218      	sxth	r0, r3
 8013e1e:	4b22      	ldr	r3, [pc, #136]	; (8013ea8 <Update_Detail+0xbf8>)
 8013e20:	2201      	movs	r2, #1
 8013e22:	2103      	movs	r1, #3
 8013e24:	f7f9 ff2c 	bl	800dc80 <DispStr>
        DispStr(S_X[T1_POSI]+7*6, LABLE_Y, INV,  "  ");
 8013e28:	2307      	movs	r3, #7
 8013e2a:	b29b      	uxth	r3, r3
 8013e2c:	332a      	adds	r3, #42	; 0x2a
 8013e2e:	b29b      	uxth	r3, r3
 8013e30:	b218      	sxth	r0, r3
 8013e32:	4b1e      	ldr	r3, [pc, #120]	; (8013eac <Update_Detail+0xbfc>)
 8013e34:	2201      	movs	r2, #1
 8013e36:	2103      	movs	r1, #3
 8013e38:	f7f9 ff22 	bl	800dc80 <DispStr>
        DispStr(S_X[T1_POSI]+3*6, LABLE_Y, INV,  (char *)NumStr);
 8013e3c:	2307      	movs	r3, #7
 8013e3e:	b29b      	uxth	r3, r3
 8013e40:	3312      	adds	r3, #18
 8013e42:	b29b      	uxth	r3, r3
 8013e44:	b218      	sxth	r0, r3
 8013e46:	4b0c      	ldr	r3, [pc, #48]	; (8013e78 <Update_Detail+0xbc8>)
 8013e48:	2201      	movs	r2, #1
 8013e4a:	2103      	movs	r1, #3
 8013e4c:	f7f9 ff18 	bl	800dc80 <DispStr>
        Set_Base(List[TIM_BASE].Val);          // Ӳ������ɨ��ʱ����λ
 8013e50:	4b05      	ldr	r3, [pc, #20]	; (8013e68 <Update_Detail+0xbb8>)
 8013e52:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8013e56:	4618      	mov	r0, r3
 8013e58:	f7f8 fbc2 	bl	800c5e0 <Set_Base>
      break;
 8013e5c:	e1d9      	b.n	8014212 <Update_Detail+0xf62>
 8013e5e:	bf00      	nop
 8013e60:	2000077e 	.word	0x2000077e
 8013e64:	20000140 	.word	0x20000140
 8013e68:	20000298 	.word	0x20000298
 8013e6c:	08002130 	.word	0x08002130
 8013e70:	08002108 	.word	0x08002108
 8013e74:	08001d00 	.word	0x08001d00
 8013e78:	2000283c 	.word	0x2000283c
 8013e7c:	08000998 	.word	0x08000998
 8013e80:	08000990 	.word	0x08000990
 8013e84:	0800215c 	.word	0x0800215c
 8013e88:	200001d0 	.word	0x200001d0
 8013e8c:	08000970 	.word	0x08000970
 8013e90:	08001c4c 	.word	0x08001c4c
 8013e94:	2000055a 	.word	0x2000055a
 8013e98:	0800211c 	.word	0x0800211c
 8013e9c:	080020f4 	.word	0x080020f4
 8013ea0:	08001ce8 	.word	0x08001ce8
 8013ea4:	08000960 	.word	0x08000960
 8013ea8:	0800097c 	.word	0x0800097c
 8013eac:	080009d0 	.word	0x080009d0

      case FREQUENC://��ʾƵ��
        FTmp=Edge*25*1000/2;
 8013eb0:	4bb7      	ldr	r3, [pc, #732]	; (8014190 <Update_Detail+0xee0>)
 8013eb2:	681b      	ldr	r3, [r3, #0]
 8013eb4:	f243 02d4 	movw	r2, #12500	; 0x30d4
 8013eb8:	fb02 f303 	mul.w	r3, r2, r3
 8013ebc:	60fb      	str	r3, [r7, #12]
        if(List[TIM_BASE].Val<9)FTmp= FTmp*1000000;
 8013ebe:	4bb5      	ldr	r3, [pc, #724]	; (8014194 <Update_Detail+0xee4>)
 8013ec0:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8013ec4:	2b08      	cmp	r3, #8
 8013ec6:	dc05      	bgt.n	8013ed4 <Update_Detail+0xc24>
 8013ec8:	68fb      	ldr	r3, [r7, #12]
 8013eca:	4ab3      	ldr	r2, [pc, #716]	; (8014198 <Update_Detail+0xee8>)
 8013ecc:	fb02 f303 	mul.w	r3, r2, r3
 8013ed0:	60fb      	str	r3, [r7, #12]
 8013ed2:	e00a      	b.n	8013eea <Update_Detail+0xc3a>
        else if(List[TIM_BASE].Val<18)FTmp= FTmp*1000;
 8013ed4:	4baf      	ldr	r3, [pc, #700]	; (8014194 <Update_Detail+0xee4>)
 8013ed6:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8013eda:	2b11      	cmp	r3, #17
 8013edc:	dc05      	bgt.n	8013eea <Update_Detail+0xc3a>
 8013ede:	68fb      	ldr	r3, [r7, #12]
 8013ee0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8013ee4:	fb02 f303 	mul.w	r3, r2, r3
 8013ee8:	60fb      	str	r3, [r7, #12]
        FTmp=FTmp/Ts[List[TIM_BASE].Val]/DEPTH[List[SMPL_DPTH].Val];
 8013eea:	4baa      	ldr	r3, [pc, #680]	; (8014194 <Update_Detail+0xee4>)
 8013eec:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8013ef0:	461a      	mov	r2, r3
 8013ef2:	4baa      	ldr	r3, [pc, #680]	; (801419c <Update_Detail+0xeec>)
 8013ef4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013ef8:	461a      	mov	r2, r3
 8013efa:	68fb      	ldr	r3, [r7, #12]
 8013efc:	fbb3 f3f2 	udiv	r3, r3, r2
 8013f00:	4aa4      	ldr	r2, [pc, #656]	; (8014194 <Update_Detail+0xee4>)
 8013f02:	f9b2 204c 	ldrsh.w	r2, [r2, #76]	; 0x4c
 8013f06:	4611      	mov	r1, r2
 8013f08:	4aa5      	ldr	r2, [pc, #660]	; (80141a0 <Update_Detail+0xef0>)
 8013f0a:	f932 2011 	ldrsh.w	r2, [r2, r1, lsl #1]
 8013f0e:	fbb3 f3f2 	udiv	r3, r3, r2
 8013f12:	60fb      	str	r3, [r7, #12]
          DispMeter(i, 1, UNSIGN,FTmp);
 8013f14:	f9b7 0016 	ldrsh.w	r0, [r7, #22]
 8013f18:	68fb      	ldr	r3, [r7, #12]
 8013f1a:	2201      	movs	r2, #1
 8013f1c:	2101      	movs	r1, #1
 8013f1e:	f000 f9d3 	bl	80142c8 <DispMeter>
      break;
 8013f22:	e176      	b.n	8014212 <Update_Detail+0xf62>

      case DUTY:    //��ʾռ�ձ�
         DispMeter(i, k, UNSIGN,(HighT*100)/k);
 8013f24:	f9b7 0016 	ldrsh.w	r0, [r7, #22]
 8013f28:	887b      	ldrh	r3, [r7, #2]
 8013f2a:	b2d9      	uxtb	r1, r3
 8013f2c:	4b9d      	ldr	r3, [pc, #628]	; (80141a4 <Update_Detail+0xef4>)
 8013f2e:	681b      	ldr	r3, [r3, #0]
 8013f30:	2264      	movs	r2, #100	; 0x64
 8013f32:	fb02 f203 	mul.w	r2, r2, r3
 8013f36:	887b      	ldrh	r3, [r7, #2]
 8013f38:	fb92 f3f3 	sdiv	r3, r2, r3
 8013f3c:	2201      	movs	r2, #1
 8013f3e:	f000 f9c3 	bl	80142c8 <DispMeter>
        break;
 8013f42:	e166      	b.n	8014212 <Update_Detail+0xf62>

      case VRMS://��ʾ��ѹ��Чֵ
        if(abs(Vrms)<4)
 8013f44:	4b98      	ldr	r3, [pc, #608]	; (80141a8 <Update_Detail+0xef8>)
 8013f46:	681b      	ldr	r3, [r3, #0]
 8013f48:	f113 0f03 	cmn.w	r3, #3
 8013f4c:	db06      	blt.n	8013f5c <Update_Detail+0xcac>
 8013f4e:	4b96      	ldr	r3, [pc, #600]	; (80141a8 <Update_Detail+0xef8>)
 8013f50:	681b      	ldr	r3, [r3, #0]
 8013f52:	2b03      	cmp	r3, #3
 8013f54:	dc02      	bgt.n	8013f5c <Update_Detail+0xcac>
        {
          Tmp = 0.00;
 8013f56:	2300      	movs	r3, #0
 8013f58:	613b      	str	r3, [r7, #16]
 8013f5a:	e026      	b.n	8013faa <Update_Detail+0xcfa>
        }else{
		  scale = (List[PROBEATT].Val?
 8013f5c:	4b8d      	ldr	r3, [pc, #564]	; (8014194 <Update_Detail+0xee4>)
 8013f5e:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
                  VScale_10X[List[Y_RANGES].Val]:VScale[List[Y_RANGES].Val])*40;
 8013f62:	2b00      	cmp	r3, #0
 8013f64:	d00b      	beq.n	8013f7e <Update_Detail+0xcce>
 8013f66:	4b8b      	ldr	r3, [pc, #556]	; (8014194 <Update_Detail+0xee4>)
 8013f68:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8013f6c:	461a      	mov	r2, r3
 8013f6e:	4b8f      	ldr	r3, [pc, #572]	; (80141ac <Update_Detail+0xefc>)
 8013f70:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8013f74:	4613      	mov	r3, r2
 8013f76:	009b      	lsls	r3, r3, #2
 8013f78:	4413      	add	r3, r2
 8013f7a:	00db      	lsls	r3, r3, #3
 8013f7c:	e00a      	b.n	8013f94 <Update_Detail+0xce4>
 8013f7e:	4b85      	ldr	r3, [pc, #532]	; (8014194 <Update_Detail+0xee4>)
 8013f80:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8013f84:	461a      	mov	r2, r3
 8013f86:	4b8a      	ldr	r3, [pc, #552]	; (80141b0 <Update_Detail+0xf00>)
 8013f88:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8013f8c:	4613      	mov	r3, r2
 8013f8e:	009b      	lsls	r3, r3, #2
 8013f90:	4413      	add	r3, r2
 8013f92:	00db      	lsls	r3, r3, #3
		  scale = (List[PROBEATT].Val?
 8013f94:	60bb      	str	r3, [r7, #8]
	          Tmp  = ((((Vrms)*Ak)>>12))*scale;
 8013f96:	4b84      	ldr	r3, [pc, #528]	; (80141a8 <Update_Detail+0xef8>)
 8013f98:	681b      	ldr	r3, [r3, #0]
 8013f9a:	687a      	ldr	r2, [r7, #4]
 8013f9c:	fb02 f303 	mul.w	r3, r2, r3
 8013fa0:	131a      	asrs	r2, r3, #12
 8013fa2:	68bb      	ldr	r3, [r7, #8]
 8013fa4:	fb02 f303 	mul.w	r3, r2, r3
 8013fa8:	613b      	str	r3, [r7, #16]
        }
        DispMeter(i, 1, UNSIGN, Tmp);
 8013faa:	f9b7 0016 	ldrsh.w	r0, [r7, #22]
 8013fae:	693b      	ldr	r3, [r7, #16]
 8013fb0:	2201      	movs	r2, #1
 8013fb2:	2101      	movs	r1, #1
 8013fb4:	f000 f988 	bl	80142c8 <DispMeter>
        break;
 8013fb8:	e12b      	b.n	8014212 <Update_Detail+0xf62>

      case VP_P://��ʾ��ѹ���ֵ
        if(abs(Vpp)<7){
 8013fba:	4b7e      	ldr	r3, [pc, #504]	; (80141b4 <Update_Detail+0xf04>)
 8013fbc:	681b      	ldr	r3, [r3, #0]
 8013fbe:	f113 0f06 	cmn.w	r3, #6
 8013fc2:	db06      	blt.n	8013fd2 <Update_Detail+0xd22>
 8013fc4:	4b7b      	ldr	r3, [pc, #492]	; (80141b4 <Update_Detail+0xf04>)
 8013fc6:	681b      	ldr	r3, [r3, #0]
 8013fc8:	2b06      	cmp	r3, #6
 8013fca:	dc02      	bgt.n	8013fd2 <Update_Detail+0xd22>
          Tmp = 0.00;
 8013fcc:	2300      	movs	r3, #0
 8013fce:	613b      	str	r3, [r7, #16]
 8013fd0:	e033      	b.n	801403a <Update_Detail+0xd8a>
        }
        else
        {
           scale = (List[PROBEATT].Val?
 8013fd2:	4b70      	ldr	r3, [pc, #448]	; (8014194 <Update_Detail+0xee4>)
 8013fd4:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
                  VScale_10X[List[Y_RANGES].Val]:VScale[List[Y_RANGES].Val])*40;
 8013fd8:	2b00      	cmp	r3, #0
 8013fda:	d00b      	beq.n	8013ff4 <Update_Detail+0xd44>
 8013fdc:	4b6d      	ldr	r3, [pc, #436]	; (8014194 <Update_Detail+0xee4>)
 8013fde:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8013fe2:	461a      	mov	r2, r3
 8013fe4:	4b71      	ldr	r3, [pc, #452]	; (80141ac <Update_Detail+0xefc>)
 8013fe6:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8013fea:	4613      	mov	r3, r2
 8013fec:	009b      	lsls	r3, r3, #2
 8013fee:	4413      	add	r3, r2
 8013ff0:	00db      	lsls	r3, r3, #3
 8013ff2:	e00a      	b.n	801400a <Update_Detail+0xd5a>
 8013ff4:	4b67      	ldr	r3, [pc, #412]	; (8014194 <Update_Detail+0xee4>)
 8013ff6:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8013ffa:	461a      	mov	r2, r3
 8013ffc:	4b6c      	ldr	r3, [pc, #432]	; (80141b0 <Update_Detail+0xf00>)
 8013ffe:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8014002:	4613      	mov	r3, r2
 8014004:	009b      	lsls	r3, r3, #2
 8014006:	4413      	add	r3, r2
 8014008:	00db      	lsls	r3, r3, #3
           scale = (List[PROBEATT].Val?
 801400a:	60bb      	str	r3, [r7, #8]
          Tmp  = ((((Vmax-2048)*(Ak))>>12)-(((Vmin-2048)*(Ak))>>12))*scale;
 801400c:	4b6a      	ldr	r3, [pc, #424]	; (80141b8 <Update_Detail+0xf08>)
 801400e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8014012:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 8014016:	687a      	ldr	r2, [r7, #4]
 8014018:	fb02 f303 	mul.w	r3, r2, r3
 801401c:	131a      	asrs	r2, r3, #12
 801401e:	4b67      	ldr	r3, [pc, #412]	; (80141bc <Update_Detail+0xf0c>)
 8014020:	f9b3 3000 	ldrsh.w	r3, [r3]
 8014024:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 8014028:	6879      	ldr	r1, [r7, #4]
 801402a:	fb01 f303 	mul.w	r3, r1, r3
 801402e:	131b      	asrs	r3, r3, #12
 8014030:	1ad2      	subs	r2, r2, r3
 8014032:	68bb      	ldr	r3, [r7, #8]
 8014034:	fb02 f303 	mul.w	r3, r2, r3
 8014038:	613b      	str	r3, [r7, #16]
        }
        DispMeter(i, 1, UNSIGN, Tmp);
 801403a:	f9b7 0016 	ldrsh.w	r0, [r7, #22]
 801403e:	693b      	ldr	r3, [r7, #16]
 8014040:	2201      	movs	r2, #1
 8014042:	2101      	movs	r1, #1
 8014044:	f000 f940 	bl	80142c8 <DispMeter>
        break;
 8014048:	e0e3      	b.n	8014212 <Update_Detail+0xf62>

      case VAVG://��ʾ��ѹƽ��ֵ
        if(abs(Vavg)<4)
 801404a:	4b5d      	ldr	r3, [pc, #372]	; (80141c0 <Update_Detail+0xf10>)
 801404c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8014050:	2b00      	cmp	r3, #0
 8014052:	bfb8      	it	lt
 8014054:	425b      	neglt	r3, r3
 8014056:	b29b      	uxth	r3, r3
 8014058:	2b03      	cmp	r3, #3
 801405a:	d802      	bhi.n	8014062 <Update_Detail+0xdb2>
        {
          Tmp = 0.00;
 801405c:	2300      	movs	r3, #0
 801405e:	613b      	str	r3, [r7, #16]
 8014060:	e02e      	b.n	80140c0 <Update_Detail+0xe10>
        }else{
          scale = (List[PROBEATT].Val?
 8014062:	4b4c      	ldr	r3, [pc, #304]	; (8014194 <Update_Detail+0xee4>)
 8014064:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
                  VScale_10X[List[Y_RANGES].Val]:VScale[List[Y_RANGES].Val])*40;
 8014068:	2b00      	cmp	r3, #0
 801406a:	d00b      	beq.n	8014084 <Update_Detail+0xdd4>
 801406c:	4b49      	ldr	r3, [pc, #292]	; (8014194 <Update_Detail+0xee4>)
 801406e:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8014072:	461a      	mov	r2, r3
 8014074:	4b4d      	ldr	r3, [pc, #308]	; (80141ac <Update_Detail+0xefc>)
 8014076:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 801407a:	4613      	mov	r3, r2
 801407c:	009b      	lsls	r3, r3, #2
 801407e:	4413      	add	r3, r2
 8014080:	00db      	lsls	r3, r3, #3
 8014082:	e00a      	b.n	801409a <Update_Detail+0xdea>
 8014084:	4b43      	ldr	r3, [pc, #268]	; (8014194 <Update_Detail+0xee4>)
 8014086:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801408a:	461a      	mov	r2, r3
 801408c:	4b48      	ldr	r3, [pc, #288]	; (80141b0 <Update_Detail+0xf00>)
 801408e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8014092:	4613      	mov	r3, r2
 8014094:	009b      	lsls	r3, r3, #2
 8014096:	4413      	add	r3, r2
 8014098:	00db      	lsls	r3, r3, #3
          scale = (List[PROBEATT].Val?
 801409a:	60bb      	str	r3, [r7, #8]
          Tmp = ((((Vavg-2048)*(Ak))>>12)+100-List[V0_POSI].Val)*scale;
 801409c:	4b48      	ldr	r3, [pc, #288]	; (80141c0 <Update_Detail+0xf10>)
 801409e:	f9b3 3000 	ldrsh.w	r3, [r3]
 80140a2:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 80140a6:	687a      	ldr	r2, [r7, #4]
 80140a8:	fb02 f303 	mul.w	r3, r2, r3
 80140ac:	131b      	asrs	r3, r3, #12
 80140ae:	3364      	adds	r3, #100	; 0x64
 80140b0:	4a38      	ldr	r2, [pc, #224]	; (8014194 <Update_Detail+0xee4>)
 80140b2:	f9b2 201c 	ldrsh.w	r2, [r2, #28]
 80140b6:	1a9a      	subs	r2, r3, r2
 80140b8:	68bb      	ldr	r3, [r7, #8]
 80140ba:	fb02 f303 	mul.w	r3, r2, r3
 80140be:	613b      	str	r3, [r7, #16]
        }
        DispMeter(i, 1, UNSIGN, Tmp);
 80140c0:	f9b7 0016 	ldrsh.w	r0, [r7, #22]
 80140c4:	693b      	ldr	r3, [r7, #16]
 80140c6:	2201      	movs	r2, #1
 80140c8:	2101      	movs	r1, #1
 80140ca:	f000 f8fd 	bl	80142c8 <DispMeter>
        break;
 80140ce:	e0a0      	b.n	8014212 <Update_Detail+0xf62>

      case VMAX://��ʾ��ѹ���ֵ
        if(abs(Vmax)<4){
 80140d0:	4b39      	ldr	r3, [pc, #228]	; (80141b8 <Update_Detail+0xf08>)
 80140d2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80140d6:	2b00      	cmp	r3, #0
 80140d8:	bfb8      	it	lt
 80140da:	425b      	neglt	r3, r3
 80140dc:	b29b      	uxth	r3, r3
 80140de:	2b03      	cmp	r3, #3
 80140e0:	d802      	bhi.n	80140e8 <Update_Detail+0xe38>
          Tmp = 0.00;
 80140e2:	2300      	movs	r3, #0
 80140e4:	613b      	str	r3, [r7, #16]
 80140e6:	e02e      	b.n	8014146 <Update_Detail+0xe96>
        }else{
		  scale = (List[PROBEATT].Val?
 80140e8:	4b2a      	ldr	r3, [pc, #168]	; (8014194 <Update_Detail+0xee4>)
 80140ea:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
                  VScale_10X[List[Y_RANGES].Val]:VScale[List[Y_RANGES].Val])*40;
 80140ee:	2b00      	cmp	r3, #0
 80140f0:	d00b      	beq.n	801410a <Update_Detail+0xe5a>
 80140f2:	4b28      	ldr	r3, [pc, #160]	; (8014194 <Update_Detail+0xee4>)
 80140f4:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80140f8:	461a      	mov	r2, r3
 80140fa:	4b2c      	ldr	r3, [pc, #176]	; (80141ac <Update_Detail+0xefc>)
 80140fc:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8014100:	4613      	mov	r3, r2
 8014102:	009b      	lsls	r3, r3, #2
 8014104:	4413      	add	r3, r2
 8014106:	00db      	lsls	r3, r3, #3
 8014108:	e00a      	b.n	8014120 <Update_Detail+0xe70>
 801410a:	4b22      	ldr	r3, [pc, #136]	; (8014194 <Update_Detail+0xee4>)
 801410c:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8014110:	461a      	mov	r2, r3
 8014112:	4b27      	ldr	r3, [pc, #156]	; (80141b0 <Update_Detail+0xf00>)
 8014114:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8014118:	4613      	mov	r3, r2
 801411a:	009b      	lsls	r3, r3, #2
 801411c:	4413      	add	r3, r2
 801411e:	00db      	lsls	r3, r3, #3
		  scale = (List[PROBEATT].Val?
 8014120:	60bb      	str	r3, [r7, #8]
          Tmp  = ((((Vmax-2048)*(Ak))>>12)+100-List[V0_POSI].Val)*scale;
 8014122:	4b25      	ldr	r3, [pc, #148]	; (80141b8 <Update_Detail+0xf08>)
 8014124:	f9b3 3000 	ldrsh.w	r3, [r3]
 8014128:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 801412c:	687a      	ldr	r2, [r7, #4]
 801412e:	fb02 f303 	mul.w	r3, r2, r3
 8014132:	131b      	asrs	r3, r3, #12
 8014134:	3364      	adds	r3, #100	; 0x64
 8014136:	4a17      	ldr	r2, [pc, #92]	; (8014194 <Update_Detail+0xee4>)
 8014138:	f9b2 201c 	ldrsh.w	r2, [r2, #28]
 801413c:	1a9a      	subs	r2, r3, r2
 801413e:	68bb      	ldr	r3, [r7, #8]
 8014140:	fb02 f303 	mul.w	r3, r2, r3
 8014144:	613b      	str	r3, [r7, #16]
        }
        DispMeter(i, 1, UNSIGN, Tmp);
 8014146:	f9b7 0016 	ldrsh.w	r0, [r7, #22]
 801414a:	693b      	ldr	r3, [r7, #16]
 801414c:	2201      	movs	r2, #1
 801414e:	2101      	movs	r1, #1
 8014150:	f000 f8ba 	bl	80142c8 <DispMeter>
        break;
 8014154:	e05d      	b.n	8014212 <Update_Detail+0xf62>

      case VMIN://��ʾ��ѹ��Сֵ
        if(abs(Vmin)<4){
 8014156:	4b19      	ldr	r3, [pc, #100]	; (80141bc <Update_Detail+0xf0c>)
 8014158:	f9b3 3000 	ldrsh.w	r3, [r3]
 801415c:	2b00      	cmp	r3, #0
 801415e:	bfb8      	it	lt
 8014160:	425b      	neglt	r3, r3
 8014162:	b29b      	uxth	r3, r3
 8014164:	2b03      	cmp	r3, #3
 8014166:	d802      	bhi.n	801416e <Update_Detail+0xebe>
          Tmp = 0.00;
 8014168:	2300      	movs	r3, #0
 801416a:	613b      	str	r3, [r7, #16]
 801416c:	e048      	b.n	8014200 <Update_Detail+0xf50>
        }else{
		  scale = (List[PROBEATT].Val?
 801416e:	4b09      	ldr	r3, [pc, #36]	; (8014194 <Update_Detail+0xee4>)
 8014170:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
                           VScale_10X[List[Y_RANGES].Val]:VScale[List[Y_RANGES].Val])*40;
 8014174:	2b00      	cmp	r3, #0
 8014176:	d025      	beq.n	80141c4 <Update_Detail+0xf14>
 8014178:	4b06      	ldr	r3, [pc, #24]	; (8014194 <Update_Detail+0xee4>)
 801417a:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801417e:	461a      	mov	r2, r3
 8014180:	4b0a      	ldr	r3, [pc, #40]	; (80141ac <Update_Detail+0xefc>)
 8014182:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8014186:	4613      	mov	r3, r2
 8014188:	009b      	lsls	r3, r3, #2
 801418a:	4413      	add	r3, r2
 801418c:	00db      	lsls	r3, r3, #3
 801418e:	e024      	b.n	80141da <Update_Detail+0xf2a>
 8014190:	20002850 	.word	0x20002850
 8014194:	20000298 	.word	0x20000298
 8014198:	000f4240 	.word	0x000f4240
 801419c:	080022a0 	.word	0x080022a0
 80141a0:	08002270 	.word	0x08002270
 80141a4:	20006878 	.word	0x20006878
 80141a8:	20002864 	.word	0x20002864
 80141ac:	20000270 	.word	0x20000270
 80141b0:	08001d68 	.word	0x08001d68
 80141b4:	20006880 	.word	0x20006880
 80141b8:	20002856 	.word	0x20002856
 80141bc:	20002868 	.word	0x20002868
 80141c0:	20002858 	.word	0x20002858
 80141c4:	4b38      	ldr	r3, [pc, #224]	; (80142a8 <Update_Detail+0xff8>)
 80141c6:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80141ca:	461a      	mov	r2, r3
 80141cc:	4b37      	ldr	r3, [pc, #220]	; (80142ac <Update_Detail+0xffc>)
 80141ce:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80141d2:	4613      	mov	r3, r2
 80141d4:	009b      	lsls	r3, r3, #2
 80141d6:	4413      	add	r3, r2
 80141d8:	00db      	lsls	r3, r3, #3
		  scale = (List[PROBEATT].Val?
 80141da:	60bb      	str	r3, [r7, #8]
                  Tmp  = ((((Vmin-2048)*(Ak))>>12)+100-List[V0_POSI].Val)*scale;
 80141dc:	4b34      	ldr	r3, [pc, #208]	; (80142b0 <Update_Detail+0x1000>)
 80141de:	f9b3 3000 	ldrsh.w	r3, [r3]
 80141e2:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 80141e6:	687a      	ldr	r2, [r7, #4]
 80141e8:	fb02 f303 	mul.w	r3, r2, r3
 80141ec:	131b      	asrs	r3, r3, #12
 80141ee:	3364      	adds	r3, #100	; 0x64
 80141f0:	4a2d      	ldr	r2, [pc, #180]	; (80142a8 <Update_Detail+0xff8>)
 80141f2:	f9b2 201c 	ldrsh.w	r2, [r2, #28]
 80141f6:	1a9a      	subs	r2, r3, r2
 80141f8:	68bb      	ldr	r3, [r7, #8]
 80141fa:	fb02 f303 	mul.w	r3, r2, r3
 80141fe:	613b      	str	r3, [r7, #16]
        }
        DispMeter(i, 1, SIGN, Tmp);
 8014200:	f9b7 0016 	ldrsh.w	r0, [r7, #22]
 8014204:	693b      	ldr	r3, [r7, #16]
 8014206:	2200      	movs	r2, #0
 8014208:	2101      	movs	r1, #1
 801420a:	f000 f85d 	bl	80142c8 <DispMeter>
        break;
 801420e:	e000      	b.n	8014212 <Update_Detail+0xf62>
        break;
 8014210:	bf00      	nop

        break;

      }
      /**/
      if(Freq_Flag){
 8014212:	4b28      	ldr	r3, [pc, #160]	; (80142b4 <Update_Detail+0x1004>)
 8014214:	781b      	ldrb	r3, [r3, #0]
 8014216:	2b00      	cmp	r3, #0
 8014218:	d03a      	beq.n	8014290 <Update_Detail+0xfe0>
        Freq_Flag = 0;
 801421a:	4b26      	ldr	r3, [pc, #152]	; (80142b4 <Update_Detail+0x1004>)
 801421c:	2200      	movs	r2, #0
 801421e:	701a      	strb	r2, [r3, #0]
        FTmp=Edge*25*1000/2;
 8014220:	4b25      	ldr	r3, [pc, #148]	; (80142b8 <Update_Detail+0x1008>)
 8014222:	681b      	ldr	r3, [r3, #0]
 8014224:	f243 02d4 	movw	r2, #12500	; 0x30d4
 8014228:	fb02 f303 	mul.w	r3, r2, r3
 801422c:	60fb      	str	r3, [r7, #12]
        if(List[TIM_BASE].Val<9)FTmp= FTmp*1000000;
 801422e:	4b1e      	ldr	r3, [pc, #120]	; (80142a8 <Update_Detail+0xff8>)
 8014230:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8014234:	2b08      	cmp	r3, #8
 8014236:	dc05      	bgt.n	8014244 <Update_Detail+0xf94>
 8014238:	68fb      	ldr	r3, [r7, #12]
 801423a:	4a20      	ldr	r2, [pc, #128]	; (80142bc <Update_Detail+0x100c>)
 801423c:	fb02 f303 	mul.w	r3, r2, r3
 8014240:	60fb      	str	r3, [r7, #12]
 8014242:	e00a      	b.n	801425a <Update_Detail+0xfaa>
        else if(List[TIM_BASE].Val<18)FTmp= FTmp*1000;
 8014244:	4b18      	ldr	r3, [pc, #96]	; (80142a8 <Update_Detail+0xff8>)
 8014246:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 801424a:	2b11      	cmp	r3, #17
 801424c:	dc05      	bgt.n	801425a <Update_Detail+0xfaa>
 801424e:	68fb      	ldr	r3, [r7, #12]
 8014250:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8014254:	fb02 f303 	mul.w	r3, r2, r3
 8014258:	60fb      	str	r3, [r7, #12]
        FTmp=FTmp/Ts[List[TIM_BASE].Val]/DEPTH[List[SMPL_DPTH].Val];
 801425a:	4b13      	ldr	r3, [pc, #76]	; (80142a8 <Update_Detail+0xff8>)
 801425c:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8014260:	461a      	mov	r2, r3
 8014262:	4b17      	ldr	r3, [pc, #92]	; (80142c0 <Update_Detail+0x1010>)
 8014264:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014268:	461a      	mov	r2, r3
 801426a:	68fb      	ldr	r3, [r7, #12]
 801426c:	fbb3 f3f2 	udiv	r3, r3, r2
 8014270:	4a0d      	ldr	r2, [pc, #52]	; (80142a8 <Update_Detail+0xff8>)
 8014272:	f9b2 204c 	ldrsh.w	r2, [r2, #76]	; 0x4c
 8014276:	4611      	mov	r1, r2
 8014278:	4a12      	ldr	r2, [pc, #72]	; (80142c4 <Update_Detail+0x1014>)
 801427a:	f932 2011 	ldrsh.w	r2, [r2, r1, lsl #1]
 801427e:	fbb3 f3f2 	udiv	r3, r3, r2
 8014282:	60fb      	str	r3, [r7, #12]
        DispFreq(    1, UNSIGN,FTmp);
 8014284:	68fb      	ldr	r3, [r7, #12]
 8014286:	461a      	mov	r2, r3
 8014288:	2101      	movs	r1, #1
 801428a:	2001      	movs	r0, #1
 801428c:	f000 fa08 	bl	80146a0 <DispFreq>
  for(i=Y_RANGES; i<=STANDBY; i++){
 8014290:	8afb      	ldrh	r3, [r7, #22]
 8014292:	3301      	adds	r3, #1
 8014294:	82fb      	strh	r3, [r7, #22]
 8014296:	8afb      	ldrh	r3, [r7, #22]
 8014298:	2b29      	cmp	r3, #41	; 0x29
 801429a:	f67f a849 	bls.w	8013330 <Update_Detail+0x80>
      }
    }
  }

}
 801429e:	bf00      	nop
 80142a0:	bf00      	nop
 80142a2:	371c      	adds	r7, #28
 80142a4:	46bd      	mov	sp, r7
 80142a6:	bd90      	pop	{r4, r7, pc}
 80142a8:	20000298 	.word	0x20000298
 80142ac:	08001d68 	.word	0x08001d68
 80142b0:	20002868 	.word	0x20002868
 80142b4:	200001cc 	.word	0x200001cc
 80142b8:	20002850 	.word	0x20002850
 80142bc:	000f4240 	.word	0x000f4240
 80142c0:	080022a0 	.word	0x080022a0
 80142c4:	08002270 	.word	0x08002270

080142c8 <DispMeter>:
/*******************************************************************************

*******************************************************************************/
void DispMeter(short Item, char St, char Mode, int Val)
{
 80142c8:	b580      	push	{r7, lr}
 80142ca:	b084      	sub	sp, #16
 80142cc:	af02      	add	r7, sp, #8
 80142ce:	603b      	str	r3, [r7, #0]
 80142d0:	4603      	mov	r3, r0
 80142d2:	80fb      	strh	r3, [r7, #6]
 80142d4:	460b      	mov	r3, r1
 80142d6:	717b      	strb	r3, [r7, #5]
 80142d8:	4613      	mov	r3, r2
 80142da:	713b      	strb	r3, [r7, #4]
  SetColor(GRY, TCOLOR[ME]);
 80142dc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80142e0:	4619      	mov	r1, r3
 80142e2:	f643 10e7 	movw	r0, #14823	; 0x39e7
 80142e6:	f7f9 fcb3 	bl	800dc50 <SetColor>

  Draw_Circle_D(INV, S_X[Item]-3, LABLE_Y, 11, 0, 6*12);
 80142ea:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80142ee:	4a30      	ldr	r2, [pc, #192]	; (80143b0 <DispMeter+0xe8>)
 80142f0:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 80142f4:	b29b      	uxth	r3, r3
 80142f6:	3b03      	subs	r3, #3
 80142f8:	b29b      	uxth	r3, r3
 80142fa:	b219      	sxth	r1, r3
 80142fc:	2348      	movs	r3, #72	; 0x48
 80142fe:	9301      	str	r3, [sp, #4]
 8014300:	2300      	movs	r3, #0
 8014302:	9300      	str	r3, [sp, #0]
 8014304:	230b      	movs	r3, #11
 8014306:	2203      	movs	r2, #3
 8014308:	2001      	movs	r0, #1
 801430a:	f7f9 fd8f 	bl	800de2c <Draw_Circle_D>
  DispStr(S_X[Item], LABLE_Y, INV, (char *)&Z[Item-FREQUENC]);// ��ʾ������Ŀ����
 801430e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8014312:	4a27      	ldr	r2, [pc, #156]	; (80143b0 <DispMeter+0xe8>)
 8014314:	f932 0013 	ldrsh.w	r0, [r2, r3, lsl #1]
 8014318:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801431c:	f1a3 0213 	sub.w	r2, r3, #19
 8014320:	4613      	mov	r3, r2
 8014322:	005b      	lsls	r3, r3, #1
 8014324:	4413      	add	r3, r2
 8014326:	005b      	lsls	r3, r3, #1
 8014328:	4a22      	ldr	r2, [pc, #136]	; (80143b4 <DispMeter+0xec>)
 801432a:	4413      	add	r3, r2
 801432c:	2201      	movs	r2, #1
 801432e:	2103      	movs	r1, #3
 8014330:	f7f9 fca6 	bl	800dc80 <DispStr>
  Value2Str(NumStr, Val, List[Item].PTR, 3, Mode);
 8014334:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8014338:	4a1f      	ldr	r2, [pc, #124]	; (80143b8 <DispMeter+0xf0>)
 801433a:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 801433e:	793b      	ldrb	r3, [r7, #4]
 8014340:	9300      	str	r3, [sp, #0]
 8014342:	2303      	movs	r3, #3
 8014344:	6839      	ldr	r1, [r7, #0]
 8014346:	481d      	ldr	r0, [pc, #116]	; (80143bc <DispMeter+0xf4>)
 8014348:	f7fd fb72 	bl	8011a30 <Value2Str>

  if(St)
 801434c:	797b      	ldrb	r3, [r7, #5]
 801434e:	2b00      	cmp	r3, #0
 8014350:	d01c      	beq.n	801438c <DispMeter+0xc4>
  {
    DispStr(S_X[Item]+24, LABLE_Y, INV, ":       ");
 8014352:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8014356:	4a16      	ldr	r2, [pc, #88]	; (80143b0 <DispMeter+0xe8>)
 8014358:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 801435c:	b29b      	uxth	r3, r3
 801435e:	3318      	adds	r3, #24
 8014360:	b29b      	uxth	r3, r3
 8014362:	b218      	sxth	r0, r3
 8014364:	4b16      	ldr	r3, [pc, #88]	; (80143c0 <DispMeter+0xf8>)
 8014366:	2201      	movs	r2, #1
 8014368:	2103      	movs	r1, #3
 801436a:	f7f9 fc89 	bl	800dc80 <DispStr>
    DispStr(S_X[Item]+30, LABLE_Y, INV, (char *)NumStr);   // ��ʾ������ֵ+����
 801436e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8014372:	4a0f      	ldr	r2, [pc, #60]	; (80143b0 <DispMeter+0xe8>)
 8014374:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8014378:	b29b      	uxth	r3, r3
 801437a:	331e      	adds	r3, #30
 801437c:	b29b      	uxth	r3, r3
 801437e:	b218      	sxth	r0, r3
 8014380:	4b0e      	ldr	r3, [pc, #56]	; (80143bc <DispMeter+0xf4>)
 8014382:	2201      	movs	r2, #1
 8014384:	2103      	movs	r1, #3
 8014386:	f7f9 fc7b 	bl	800dc80 <DispStr>
  }
  else
	  DispStr(S_X[Item]+24, LABLE_Y, INV, ": ----- ");
}
 801438a:	e00d      	b.n	80143a8 <DispMeter+0xe0>
	  DispStr(S_X[Item]+24, LABLE_Y, INV, ": ----- ");
 801438c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8014390:	4a07      	ldr	r2, [pc, #28]	; (80143b0 <DispMeter+0xe8>)
 8014392:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8014396:	b29b      	uxth	r3, r3
 8014398:	3318      	adds	r3, #24
 801439a:	b29b      	uxth	r3, r3
 801439c:	b218      	sxth	r0, r3
 801439e:	4b09      	ldr	r3, [pc, #36]	; (80143c4 <DispMeter+0xfc>)
 80143a0:	2201      	movs	r2, #1
 80143a2:	2103      	movs	r1, #3
 80143a4:	f7f9 fc6c 	bl	800dc80 <DispStr>
}
 80143a8:	bf00      	nop
 80143aa:	3708      	adds	r7, #8
 80143ac:	46bd      	mov	sp, r7
 80143ae:	bd80      	pop	{r7, pc}
 80143b0:	0800215c 	.word	0x0800215c
 80143b4:	08001d18 	.word	0x08001d18
 80143b8:	20000298 	.word	0x20000298
 80143bc:	2000283c 	.word	0x2000283c
 80143c0:	080009d4 	.word	0x080009d4
 80143c4:	080009e0 	.word	0x080009e0

080143c8 <DispStatus>:

/*******************************************************************************

*******************************************************************************/
void DispStatus(void)
{
 80143c8:	b580      	push	{r7, lr}
 80143ca:	b084      	sub	sp, #16
 80143cc:	af02      	add	r7, sp, #8
  char* p;
  SetColor(GRY, (Status & STOP) ? RED : TCOLOR[TRG]);
 80143ce:	4b20      	ldr	r3, [pc, #128]	; (8014450 <DispStatus+0x88>)
 80143d0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80143d4:	b29b      	uxth	r3, r3
 80143d6:	f003 0301 	and.w	r3, r3, #1
 80143da:	2b00      	cmp	r3, #0
 80143dc:	d102      	bne.n	80143e4 <DispStatus+0x1c>
 80143de:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 80143e2:	e000      	b.n	80143e6 <DispStatus+0x1e>
 80143e4:	231f      	movs	r3, #31
 80143e6:	4619      	mov	r1, r3
 80143e8:	f643 10e7 	movw	r0, #14823	; 0x39e7
 80143ec:	f7f9 fc30 	bl	800dc50 <SetColor>
  p =(Status & STOP)?(char*)M :(List[SYNCMODE].PTR +(List[SYNCMODE].Val)*6);
 80143f0:	4b17      	ldr	r3, [pc, #92]	; (8014450 <DispStatus+0x88>)
 80143f2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80143f6:	b29b      	uxth	r3, r3
 80143f8:	f003 0301 	and.w	r3, r3, #1
 80143fc:	2b00      	cmp	r3, #0
 80143fe:	d10b      	bne.n	8014418 <DispStatus+0x50>
 8014400:	4b14      	ldr	r3, [pc, #80]	; (8014454 <DispStatus+0x8c>)
 8014402:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8014404:	4b13      	ldr	r3, [pc, #76]	; (8014454 <DispStatus+0x8c>)
 8014406:	f9b3 306c 	ldrsh.w	r3, [r3, #108]	; 0x6c
 801440a:	4619      	mov	r1, r3
 801440c:	460b      	mov	r3, r1
 801440e:	005b      	lsls	r3, r3, #1
 8014410:	440b      	add	r3, r1
 8014412:	005b      	lsls	r3, r3, #1
 8014414:	4413      	add	r3, r2
 8014416:	e000      	b.n	801441a <DispStatus+0x52>
 8014418:	4b0f      	ldr	r3, [pc, #60]	; (8014458 <DispStatus+0x90>)
 801441a:	607b      	str	r3, [r7, #4]
  Draw_Circle_D(INV, S_X[SYNCMODE]-3, TITLE_Y_POS, 11, 1, 6*4);
 801441c:	f240 1321 	movw	r3, #289	; 0x121
 8014420:	b29b      	uxth	r3, r3
 8014422:	3b03      	subs	r3, #3
 8014424:	b29b      	uxth	r3, r3
 8014426:	b219      	sxth	r1, r3
 8014428:	2318      	movs	r3, #24
 801442a:	9301      	str	r3, [sp, #4]
 801442c:	2301      	movs	r3, #1
 801442e:	9300      	str	r3, [sp, #0]
 8014430:	230b      	movs	r3, #11
 8014432:	22e1      	movs	r2, #225	; 0xe1
 8014434:	2001      	movs	r0, #1
 8014436:	f7f9 fcf9 	bl	800de2c <Draw_Circle_D>
  DispStr(S_X[SYNCMODE], TITLE_Y_POS, INV, (char *)p);
 801443a:	f240 1021 	movw	r0, #289	; 0x121
 801443e:	687b      	ldr	r3, [r7, #4]
 8014440:	2201      	movs	r2, #1
 8014442:	21e1      	movs	r1, #225	; 0xe1
 8014444:	f7f9 fc1c 	bl	800dc80 <DispStr>
}
 8014448:	bf00      	nop
 801444a:	3708      	adds	r7, #8
 801444c:	46bd      	mov	sp, r7
 801444e:	bd80      	pop	{r7, pc}
 8014450:	200007a0 	.word	0x200007a0
 8014454:	20000298 	.word	0x20000298
 8014458:	08001cb4 	.word	0x08001cb4

0801445c <Update_Windows>:

/*******************************************************************************
���»���������λ��
*******************************************************************************/
void Update_Windows(void)
{
 801445c:	b580      	push	{r7, lr}
 801445e:	b084      	sub	sp, #16
 8014460:	af00      	add	r7, sp, #0
  short  x0,x,y,i,j,Width;
  short  Depth =  DEPTH[List[SMPL_DPTH].Val];
 8014462:	4b6a      	ldr	r3, [pc, #424]	; (801460c <Update_Windows+0x1b0>)
 8014464:	f9b3 304c 	ldrsh.w	r3, [r3, #76]	; 0x4c
 8014468:	461a      	mov	r2, r3
 801446a:	4b69      	ldr	r3, [pc, #420]	; (8014610 <Update_Windows+0x1b4>)
 801446c:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8014470:	80fb      	strh	r3, [r7, #6]
  Width =(300*300)/Depth;
 8014472:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8014476:	4a67      	ldr	r2, [pc, #412]	; (8014614 <Update_Windows+0x1b8>)
 8014478:	fb92 f3f3 	sdiv	r3, r2, r3
 801447c:	80bb      	strh	r3, [r7, #4]
  if(Current == XN &&(PopType & LIST_POP) )
 801447e:	4b66      	ldr	r3, [pc, #408]	; (8014618 <Update_Windows+0x1bc>)
 8014480:	f9b3 3000 	ldrsh.w	r3, [r3]
 8014484:	2b01      	cmp	r3, #1
 8014486:	f040 80a9 	bne.w	80145dc <Update_Windows+0x180>
 801448a:	4b64      	ldr	r3, [pc, #400]	; (801461c <Update_Windows+0x1c0>)
 801448c:	781b      	ldrb	r3, [r3, #0]
 801448e:	f003 0302 	and.w	r3, r3, #2
 8014492:	2b00      	cmp	r3, #0
 8014494:	f000 80a2 	beq.w	80145dc <Update_Windows+0x180>
  {
      Windows_Pop = 1;
 8014498:	4b61      	ldr	r3, [pc, #388]	; (8014620 <Update_Windows+0x1c4>)
 801449a:	2201      	movs	r2, #1
 801449c:	701a      	strb	r2, [r3, #0]
      x0=2+(List[VIEWPOSI].Val)*300/Depth;
 801449e:	4b5b      	ldr	r3, [pc, #364]	; (801460c <Update_Windows+0x1b0>)
 80144a0:	f9b3 3044 	ldrsh.w	r3, [r3, #68]	; 0x44
 80144a4:	461a      	mov	r2, r3
 80144a6:	f44f 7396 	mov.w	r3, #300	; 0x12c
 80144aa:	fb03 f202 	mul.w	r2, r3, r2
 80144ae:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80144b2:	fb92 f3f3 	sdiv	r3, r2, r3
 80144b6:	b29b      	uxth	r3, r3
 80144b8:	3302      	adds	r3, #2
 80144ba:	b29b      	uxth	r3, r3
 80144bc:	81fb      	strh	r3, [r7, #14]
      x=2;
 80144be:	2302      	movs	r3, #2
 80144c0:	81bb      	strh	r3, [r7, #12]
      y=15;
 80144c2:	230f      	movs	r3, #15
 80144c4:	807b      	strh	r3, [r7, #2]
      for(i=0;i<300;i++){    //��������
 80144c6:	2300      	movs	r3, #0
 80144c8:	817b      	strh	r3, [r7, #10]
 80144ca:	e029      	b.n	8014520 <Update_Windows+0xc4>
        LCD_Set_Posi(x++, y);
 80144cc:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 80144d0:	b293      	uxth	r3, r2
 80144d2:	3301      	adds	r3, #1
 80144d4:	b29b      	uxth	r3, r3
 80144d6:	81bb      	strh	r3, [r7, #12]
 80144d8:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80144dc:	4619      	mov	r1, r3
 80144de:	4610      	mov	r0, r2
 80144e0:	f7fd fe66 	bl	80121b0 <LCD_Set_Posi>
        LCD_Set_Pixel(DAR);
 80144e4:	f643 10e7 	movw	r0, #14823	; 0x39e7
 80144e8:	f7fd feb0 	bl	801224c <LCD_Set_Pixel>
        for(j=0; j<2; j++)LCD_Set_Pixel(RED);
 80144ec:	2300      	movs	r3, #0
 80144ee:	813b      	strh	r3, [r7, #8]
 80144f0:	e008      	b.n	8014504 <Update_Windows+0xa8>
 80144f2:	201f      	movs	r0, #31
 80144f4:	f7fd feaa 	bl	801224c <LCD_Set_Pixel>
 80144f8:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 80144fc:	b29b      	uxth	r3, r3
 80144fe:	3301      	adds	r3, #1
 8014500:	b29b      	uxth	r3, r3
 8014502:	813b      	strh	r3, [r7, #8]
 8014504:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8014508:	2b01      	cmp	r3, #1
 801450a:	ddf2      	ble.n	80144f2 <Update_Windows+0x96>
        LCD_Set_Pixel(DAR);
 801450c:	f643 10e7 	movw	r0, #14823	; 0x39e7
 8014510:	f7fd fe9c 	bl	801224c <LCD_Set_Pixel>
      for(i=0;i<300;i++){    //��������
 8014514:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8014518:	b29b      	uxth	r3, r3
 801451a:	3301      	adds	r3, #1
 801451c:	b29b      	uxth	r3, r3
 801451e:	817b      	strh	r3, [r7, #10]
 8014520:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8014524:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8014528:	dbd0      	blt.n	80144cc <Update_Windows+0x70>
      }
      if(Current == XN && (MenuNow[XN]==SMPL_DPTH ))
 801452a:	4b3b      	ldr	r3, [pc, #236]	; (8014618 <Update_Windows+0x1bc>)
 801452c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8014530:	2b01      	cmp	r3, #1
 8014532:	d122      	bne.n	801457a <Update_Windows+0x11e>
 8014534:	4b3b      	ldr	r3, [pc, #236]	; (8014624 <Update_Windows+0x1c8>)
 8014536:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801453a:	2b09      	cmp	r3, #9
 801453c:	d11d      	bne.n	801457a <Update_Windows+0x11e>
      {  //Depthѡ��
        if(Key_Buffer == KEYCODE_RIGHT || Key_Buffer == KEYCODE_LEFT)
 801453e:	4b3a      	ldr	r3, [pc, #232]	; (8014628 <Update_Windows+0x1cc>)
 8014540:	781b      	ldrb	r3, [r3, #0]
 8014542:	b2db      	uxtb	r3, r3
 8014544:	2b06      	cmp	r3, #6
 8014546:	d004      	beq.n	8014552 <Update_Windows+0xf6>
 8014548:	4b37      	ldr	r3, [pc, #220]	; (8014628 <Update_Windows+0x1cc>)
 801454a:	781b      	ldrb	r3, [r3, #0]
 801454c:	b2db      	uxtb	r3, r3
 801454e:	2b05      	cmp	r3, #5
 8014550:	d113      	bne.n	801457a <Update_Windows+0x11e>
        {  //ѡ���б䶯ʱ�ı�Ԥ����λ��
          List[VIEWPOSI].Val= 0;
 8014552:	4b2e      	ldr	r3, [pc, #184]	; (801460c <Update_Windows+0x1b0>)
 8014554:	2200      	movs	r2, #0
 8014556:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
          x0=2+(List[VIEWPOSI].Val)*300/Depth;
 801455a:	4b2c      	ldr	r3, [pc, #176]	; (801460c <Update_Windows+0x1b0>)
 801455c:	f9b3 3044 	ldrsh.w	r3, [r3, #68]	; 0x44
 8014560:	461a      	mov	r2, r3
 8014562:	f44f 7396 	mov.w	r3, #300	; 0x12c
 8014566:	fb03 f202 	mul.w	r2, r3, r2
 801456a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801456e:	fb92 f3f3 	sdiv	r3, r2, r3
 8014572:	b29b      	uxth	r3, r3
 8014574:	3302      	adds	r3, #2
 8014576:	b29b      	uxth	r3, r3
 8014578:	81fb      	strh	r3, [r7, #14]
        }
      }
      x = x0;               //��ǰ�����ڻ�����λ��
 801457a:	89fb      	ldrh	r3, [r7, #14]
 801457c:	81bb      	strh	r3, [r7, #12]
      y=15;
 801457e:	230f      	movs	r3, #15
 8014580:	807b      	strh	r3, [r7, #2]
      for(i=0;i<Width;i++){
 8014582:	2300      	movs	r3, #0
 8014584:	817b      	strh	r3, [r7, #10]
 8014586:	e022      	b.n	80145ce <Update_Windows+0x172>
        LCD_Set_Posi(x++, y);
 8014588:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 801458c:	b293      	uxth	r3, r2
 801458e:	3301      	adds	r3, #1
 8014590:	b29b      	uxth	r3, r3
 8014592:	81bb      	strh	r3, [r7, #12]
 8014594:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8014598:	4619      	mov	r1, r3
 801459a:	4610      	mov	r0, r2
 801459c:	f7fd fe08 	bl	80121b0 <LCD_Set_Posi>
        for(j=0; j<4; j++)LCD_Set_Pixel(GRN);
 80145a0:	2300      	movs	r3, #0
 80145a2:	813b      	strh	r3, [r7, #8]
 80145a4:	e009      	b.n	80145ba <Update_Windows+0x15e>
 80145a6:	f44f 60fc 	mov.w	r0, #2016	; 0x7e0
 80145aa:	f7fd fe4f 	bl	801224c <LCD_Set_Pixel>
 80145ae:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 80145b2:	b29b      	uxth	r3, r3
 80145b4:	3301      	adds	r3, #1
 80145b6:	b29b      	uxth	r3, r3
 80145b8:	813b      	strh	r3, [r7, #8]
 80145ba:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 80145be:	2b03      	cmp	r3, #3
 80145c0:	ddf1      	ble.n	80145a6 <Update_Windows+0x14a>
      for(i=0;i<Width;i++){
 80145c2:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80145c6:	b29b      	uxth	r3, r3
 80145c8:	3301      	adds	r3, #1
 80145ca:	b29b      	uxth	r3, r3
 80145cc:	817b      	strh	r3, [r7, #10]
 80145ce:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 80145d2:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80145d6:	429a      	cmp	r2, r3
 80145d8:	dbd6      	blt.n	8014588 <Update_Windows+0x12c>
  if(Current == XN &&(PopType & LIST_POP) )
 80145da:	e012      	b.n	8014602 <Update_Windows+0x1a6>
      }
  }
  else if(Current == XN &&!(PopType & LIST_POP))
 80145dc:	4b0e      	ldr	r3, [pc, #56]	; (8014618 <Update_Windows+0x1bc>)
 80145de:	f9b3 3000 	ldrsh.w	r3, [r3]
 80145e2:	2b01      	cmp	r3, #1
 80145e4:	d10d      	bne.n	8014602 <Update_Windows+0x1a6>
 80145e6:	4b0d      	ldr	r3, [pc, #52]	; (801461c <Update_Windows+0x1c0>)
 80145e8:	781b      	ldrb	r3, [r3, #0]
 80145ea:	f003 0302 	and.w	r3, r3, #2
 80145ee:	2b00      	cmp	r3, #0
 80145f0:	d107      	bne.n	8014602 <Update_Windows+0x1a6>
  {
    Windows_Pop = 0;
 80145f2:	4b0b      	ldr	r3, [pc, #44]	; (8014620 <Update_Windows+0x1c4>)
 80145f4:	2200      	movs	r2, #0
 80145f6:	701a      	strb	r2, [r3, #0]
    Clr_WavePosi(DAR);
 80145f8:	f643 10e7 	movw	r0, #14823	; 0x39e7
 80145fc:	f000 f816 	bl	801462c <Clr_WavePosi>
  }
}
 8014600:	e7ff      	b.n	8014602 <Update_Windows+0x1a6>
 8014602:	bf00      	nop
 8014604:	3710      	adds	r7, #16
 8014606:	46bd      	mov	sp, r7
 8014608:	bd80      	pop	{r7, pc}
 801460a:	bf00      	nop
 801460c:	20000298 	.word	0x20000298
 8014610:	08002270 	.word	0x08002270
 8014614:	00015f90 	.word	0x00015f90
 8014618:	2000079e 	.word	0x2000079e
 801461c:	2000078e 	.word	0x2000078e
 8014620:	200007a6 	.word	0x200007a6
 8014624:	20000538 	.word	0x20000538
 8014628:	2000077d 	.word	0x2000077d

0801462c <Clr_WavePosi>:

/*******************************************************************************
 void Clr_WavePosi(u16 Col)  �������λ����ʾ
*******************************************************************************/
void Clr_WavePosi(short Col)
{
 801462c:	b580      	push	{r7, lr}
 801462e:	b084      	sub	sp, #16
 8014630:	af00      	add	r7, sp, #0
 8014632:	4603      	mov	r3, r0
 8014634:	80fb      	strh	r3, [r7, #6]
  short x,y,i,j;
  x=2;
 8014636:	2302      	movs	r3, #2
 8014638:	81fb      	strh	r3, [r7, #14]
  y=14;
 801463a:	230e      	movs	r3, #14
 801463c:	813b      	strh	r3, [r7, #8]
  for(i=0;i<300;i++)
 801463e:	2300      	movs	r3, #0
 8014640:	81bb      	strh	r3, [r7, #12]
 8014642:	e022      	b.n	801468a <Clr_WavePosi+0x5e>
  {
    LCD_Set_Posi(x++, y);
 8014644:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8014648:	b293      	uxth	r3, r2
 801464a:	3301      	adds	r3, #1
 801464c:	b29b      	uxth	r3, r3
 801464e:	81fb      	strh	r3, [r7, #14]
 8014650:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8014654:	4619      	mov	r1, r3
 8014656:	4610      	mov	r0, r2
 8014658:	f7fd fdaa 	bl	80121b0 <LCD_Set_Posi>
    for(j=0; j<6; j++)
 801465c:	2300      	movs	r3, #0
 801465e:	817b      	strh	r3, [r7, #10]
 8014660:	e009      	b.n	8014676 <Clr_WavePosi+0x4a>
    	LCD_Set_Pixel(Col);
 8014662:	88fb      	ldrh	r3, [r7, #6]
 8014664:	4618      	mov	r0, r3
 8014666:	f7fd fdf1 	bl	801224c <LCD_Set_Pixel>
    for(j=0; j<6; j++)
 801466a:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 801466e:	b29b      	uxth	r3, r3
 8014670:	3301      	adds	r3, #1
 8014672:	b29b      	uxth	r3, r3
 8014674:	817b      	strh	r3, [r7, #10]
 8014676:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 801467a:	2b05      	cmp	r3, #5
 801467c:	ddf1      	ble.n	8014662 <Clr_WavePosi+0x36>
  for(i=0;i<300;i++)
 801467e:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8014682:	b29b      	uxth	r3, r3
 8014684:	3301      	adds	r3, #1
 8014686:	b29b      	uxth	r3, r3
 8014688:	81bb      	strh	r3, [r7, #12]
 801468a:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 801468e:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8014692:	dbd7      	blt.n	8014644 <Clr_WavePosi+0x18>
  }
}
 8014694:	bf00      	nop
 8014696:	bf00      	nop
 8014698:	3710      	adds	r7, #16
 801469a:	46bd      	mov	sp, r7
 801469c:	bd80      	pop	{r7, pc}
	...

080146a0 <DispFreq>:

/*******************************************************************************

*******************************************************************************/
void DispFreq(char St, char Mode, int Val)
{
 80146a0:	b580      	push	{r7, lr}
 80146a2:	b084      	sub	sp, #16
 80146a4:	af02      	add	r7, sp, #8
 80146a6:	4603      	mov	r3, r0
 80146a8:	603a      	str	r2, [r7, #0]
 80146aa:	71fb      	strb	r3, [r7, #7]
 80146ac:	460b      	mov	r3, r1
 80146ae:	71bb      	strb	r3, [r7, #6]
  SetColor(GRY, TCOLOR[ME]);
 80146b0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80146b4:	4619      	mov	r1, r3
 80146b6:	f643 10e7 	movw	r0, #14823	; 0x39e7
 80146ba:	f7f9 fac9 	bl	800dc50 <SetColor>

  Draw_Circle_D(INV, S_X[FREQUENC]-6*15-3+4, LABLE_Y, 11, 0, 6*12);
 80146be:	23a2      	movs	r3, #162	; 0xa2
 80146c0:	b29b      	uxth	r3, r3
 80146c2:	3b59      	subs	r3, #89	; 0x59
 80146c4:	b29b      	uxth	r3, r3
 80146c6:	b219      	sxth	r1, r3
 80146c8:	2348      	movs	r3, #72	; 0x48
 80146ca:	9301      	str	r3, [sp, #4]
 80146cc:	2300      	movs	r3, #0
 80146ce:	9300      	str	r3, [sp, #0]
 80146d0:	230b      	movs	r3, #11
 80146d2:	2203      	movs	r2, #3
 80146d4:	2001      	movs	r0, #1
 80146d6:	f7f9 fba9 	bl	800de2c <Draw_Circle_D>
  DispStr(S_X[FREQUENC]-6*15+4, LABLE_Y, INV, (char*)&Z[0]);// ��ʾ������Ŀ����
 80146da:	23a2      	movs	r3, #162	; 0xa2
 80146dc:	b29b      	uxth	r3, r3
 80146de:	3b56      	subs	r3, #86	; 0x56
 80146e0:	b29b      	uxth	r3, r3
 80146e2:	b218      	sxth	r0, r3
 80146e4:	4b1a      	ldr	r3, [pc, #104]	; (8014750 <DispFreq+0xb0>)
 80146e6:	2201      	movs	r2, #1
 80146e8:	2103      	movs	r1, #3
 80146ea:	f7f9 fac9 	bl	800dc80 <DispStr>
  Value2Str(NumStr, Val, List[FREQUENC].PTR, 3, Mode);
 80146ee:	4b19      	ldr	r3, [pc, #100]	; (8014754 <DispFreq+0xb4>)
 80146f0:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 80146f4:	79bb      	ldrb	r3, [r7, #6]
 80146f6:	9300      	str	r3, [sp, #0]
 80146f8:	2303      	movs	r3, #3
 80146fa:	6839      	ldr	r1, [r7, #0]
 80146fc:	4816      	ldr	r0, [pc, #88]	; (8014758 <DispFreq+0xb8>)
 80146fe:	f7fd f997 	bl	8011a30 <Value2Str>

  if(St) {
 8014702:	79fb      	ldrb	r3, [r7, #7]
 8014704:	2b00      	cmp	r3, #0
 8014706:	d014      	beq.n	8014732 <DispFreq+0x92>
    DispStr(24+S_X[FREQUENC]-6*15+4, LABLE_Y, INV, ":       ");
 8014708:	23a2      	movs	r3, #162	; 0xa2
 801470a:	b29b      	uxth	r3, r3
 801470c:	3b3e      	subs	r3, #62	; 0x3e
 801470e:	b29b      	uxth	r3, r3
 8014710:	b218      	sxth	r0, r3
 8014712:	4b12      	ldr	r3, [pc, #72]	; (801475c <DispFreq+0xbc>)
 8014714:	2201      	movs	r2, #1
 8014716:	2103      	movs	r1, #3
 8014718:	f7f9 fab2 	bl	800dc80 <DispStr>
    DispStr(30+S_X[FREQUENC]-6*15+4, LABLE_Y, INV, (char *)NumStr);   // ��ʾ������ֵ+����
 801471c:	23a2      	movs	r3, #162	; 0xa2
 801471e:	b29b      	uxth	r3, r3
 8014720:	3b38      	subs	r3, #56	; 0x38
 8014722:	b29b      	uxth	r3, r3
 8014724:	b218      	sxth	r0, r3
 8014726:	4b0c      	ldr	r3, [pc, #48]	; (8014758 <DispFreq+0xb8>)
 8014728:	2201      	movs	r2, #1
 801472a:	2103      	movs	r1, #3
 801472c:	f7f9 faa8 	bl	800dc80 <DispStr>
  }
  else   DispStr(24+S_X[FREQUENC]-6*15+4, LABLE_Y, INV, ": ---- ");
}
 8014730:	e009      	b.n	8014746 <DispFreq+0xa6>
  else   DispStr(24+S_X[FREQUENC]-6*15+4, LABLE_Y, INV, ": ---- ");
 8014732:	23a2      	movs	r3, #162	; 0xa2
 8014734:	b29b      	uxth	r3, r3
 8014736:	3b3e      	subs	r3, #62	; 0x3e
 8014738:	b29b      	uxth	r3, r3
 801473a:	b218      	sxth	r0, r3
 801473c:	4b08      	ldr	r3, [pc, #32]	; (8014760 <DispFreq+0xc0>)
 801473e:	2201      	movs	r2, #1
 8014740:	2103      	movs	r1, #3
 8014742:	f7f9 fa9d 	bl	800dc80 <DispStr>
}
 8014746:	bf00      	nop
 8014748:	3708      	adds	r7, #8
 801474a:	46bd      	mov	sp, r7
 801474c:	bd80      	pop	{r7, pc}
 801474e:	bf00      	nop
 8014750:	08001d18 	.word	0x08001d18
 8014754:	20000298 	.word	0x20000298
 8014758:	2000283c 	.word	0x2000283c
 801475c:	080009d4 	.word	0x080009d4
 8014760:	080009ec 	.word	0x080009ec

08014764 <Show_List>:

/*******************************************************************************
 Show_List: ���ò˵���λ�á��ߴ硢��ɫ����ʾ����
*******************************************************************************/
void Show_List(void)
{
 8014764:	b580      	push	{r7, lr}
 8014766:	b088      	sub	sp, #32
 8014768:	af02      	add	r7, sp, #8
  short i, Ny0, Nx0, CurrentMax = MU_BEGN[Current]+ M_ITEMS[Current];
 801476a:	4b59      	ldr	r3, [pc, #356]	; (80148d0 <Show_List+0x16c>)
 801476c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8014770:	461a      	mov	r2, r3
 8014772:	4b58      	ldr	r3, [pc, #352]	; (80148d4 <Show_List+0x170>)
 8014774:	5c9b      	ldrb	r3, [r3, r2]
 8014776:	b29a      	uxth	r2, r3
 8014778:	4b55      	ldr	r3, [pc, #340]	; (80148d0 <Show_List+0x16c>)
 801477a:	f9b3 3000 	ldrsh.w	r3, [r3]
 801477e:	4619      	mov	r1, r3
 8014780:	4b55      	ldr	r3, [pc, #340]	; (80148d8 <Show_List+0x174>)
 8014782:	5c5b      	ldrb	r3, [r3, r1]
 8014784:	b29b      	uxth	r3, r3
 8014786:	4413      	add	r3, r2
 8014788:	b29b      	uxth	r3, r3
 801478a:	827b      	strh	r3, [r7, #18]
  char  Flag = 0;
 801478c:	2300      	movs	r3, #0
 801478e:	757b      	strb	r3, [r7, #21]
  char  str[12];
  ParamTab[BXx1]= BLOCK_X[Current];
 8014790:	4b4f      	ldr	r3, [pc, #316]	; (80148d0 <Show_List+0x16c>)
 8014792:	f9b3 3000 	ldrsh.w	r3, [r3]
 8014796:	461a      	mov	r2, r3
 8014798:	4b50      	ldr	r3, [pc, #320]	; (80148dc <Show_List+0x178>)
 801479a:	5c9b      	ldrb	r3, [r3, r2]
 801479c:	b21a      	sxth	r2, r3
 801479e:	4b50      	ldr	r3, [pc, #320]	; (80148e0 <Show_List+0x17c>)
 80147a0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  ParamTab[BYx2]= BLOCK_Y[Current]*2;
 80147a4:	4b4a      	ldr	r3, [pc, #296]	; (80148d0 <Show_List+0x16c>)
 80147a6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80147aa:	461a      	mov	r2, r3
 80147ac:	4b4d      	ldr	r3, [pc, #308]	; (80148e4 <Show_List+0x180>)
 80147ae:	5c9b      	ldrb	r3, [r3, r2]
 80147b0:	b29b      	uxth	r3, r3
 80147b2:	005b      	lsls	r3, r3, #1
 80147b4:	b29b      	uxth	r3, r3
 80147b6:	b21a      	sxth	r2, r3
 80147b8:	4b49      	ldr	r3, [pc, #292]	; (80148e0 <Show_List+0x17c>)
 80147ba:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
  ParamTab[WXx1]= BLOCK_W[Current];
 80147be:	4b44      	ldr	r3, [pc, #272]	; (80148d0 <Show_List+0x16c>)
 80147c0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80147c4:	461a      	mov	r2, r3
 80147c6:	4b48      	ldr	r3, [pc, #288]	; (80148e8 <Show_List+0x184>)
 80147c8:	5c9b      	ldrb	r3, [r3, r2]
 80147ca:	b21a      	sxth	r2, r3
 80147cc:	4b44      	ldr	r3, [pc, #272]	; (80148e0 <Show_List+0x17c>)
 80147ce:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  ParamTab[HYx2]=(M_ITEMS[Current]+1)*32;
 80147d2:	4b3f      	ldr	r3, [pc, #252]	; (80148d0 <Show_List+0x16c>)
 80147d4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80147d8:	461a      	mov	r2, r3
 80147da:	4b3f      	ldr	r3, [pc, #252]	; (80148d8 <Show_List+0x174>)
 80147dc:	5c9b      	ldrb	r3, [r3, r2]
 80147de:	3301      	adds	r3, #1
 80147e0:	b29b      	uxth	r3, r3
 80147e2:	015b      	lsls	r3, r3, #5
 80147e4:	b29b      	uxth	r3, r3
 80147e6:	b21a      	sxth	r2, r3
 80147e8:	4b3d      	ldr	r3, [pc, #244]	; (80148e0 <Show_List+0x17c>)
 80147ea:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
  PopColor(WHT, DAR);
 80147ee:	f643 11e7 	movw	r1, #14823	; 0x39e7
 80147f2:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80147f6:	f7f9 ff95 	bl	800e724 <PopColor>
  Buil_Pop();
 80147fa:	f7f9 fe85 	bl	800e508 <Buil_Pop>
  for(i=MU_BEGN[Current]; i<CurrentMax; i++){
 80147fe:	4b34      	ldr	r3, [pc, #208]	; (80148d0 <Show_List+0x16c>)
 8014800:	f9b3 3000 	ldrsh.w	r3, [r3]
 8014804:	461a      	mov	r2, r3
 8014806:	4b33      	ldr	r3, [pc, #204]	; (80148d4 <Show_List+0x170>)
 8014808:	5c9b      	ldrb	r3, [r3, r2]
 801480a:	82fb      	strh	r3, [r7, #22]
 801480c:	e054      	b.n	80148b8 <Show_List+0x154>
    if(i == MenuNow[Current]) {
 801480e:	4b30      	ldr	r3, [pc, #192]	; (80148d0 <Show_List+0x16c>)
 8014810:	f9b3 3000 	ldrsh.w	r3, [r3]
 8014814:	461a      	mov	r2, r3
 8014816:	4b35      	ldr	r3, [pc, #212]	; (80148ec <Show_List+0x188>)
 8014818:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 801481c:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8014820:	429a      	cmp	r2, r3
 8014822:	d102      	bne.n	801482a <Show_List+0xc6>
      Flag = INV;
 8014824:	2301      	movs	r3, #1
 8014826:	757b      	strb	r3, [r7, #21]
 8014828:	e007      	b.n	801483a <Show_List+0xd6>
    }
    else                      {
      PopColor(WHT, DAR);
 801482a:	f643 11e7 	movw	r1, #14823	; 0x39e7
 801482e:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8014832:	f7f9 ff77 	bl	800e724 <PopColor>
      Flag = PRN;
 8014836:	2300      	movs	r3, #0
 8014838:	757b      	strb	r3, [r7, #21]
    }
    Ny0 = ((CurrentMax - i)*17 - 10);
 801483a:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 801483e:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8014842:	1ad3      	subs	r3, r2, r3
 8014844:	b29b      	uxth	r3, r3
 8014846:	461a      	mov	r2, r3
 8014848:	0112      	lsls	r2, r2, #4
 801484a:	4413      	add	r3, r2
 801484c:	b29b      	uxth	r3, r3
 801484e:	3b0a      	subs	r3, #10
 8014850:	b29b      	uxth	r3, r3
 8014852:	823b      	strh	r3, [r7, #16]
    Nx0 = N_X ;
 8014854:	2304      	movs	r3, #4
 8014856:	81fb      	strh	r3, [r7, #14]
    memset(str,0,12);
 8014858:	463b      	mov	r3, r7
 801485a:	220c      	movs	r2, #12
 801485c:	2100      	movs	r1, #0
 801485e:	4618      	mov	r0, r3
 8014860:	f00e f998 	bl	8022b94 <memset>
    memcpy(str,&ESTR[i],10);
 8014864:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8014868:	4613      	mov	r3, r2
 801486a:	009b      	lsls	r3, r3, #2
 801486c:	4413      	add	r3, r2
 801486e:	005b      	lsls	r3, r3, #1
 8014870:	4a1f      	ldr	r2, [pc, #124]	; (80148f0 <Show_List+0x18c>)
 8014872:	1899      	adds	r1, r3, r2
 8014874:	463b      	mov	r3, r7
 8014876:	220a      	movs	r2, #10
 8014878:	4618      	mov	r0, r3
 801487a:	f00e f97d 	bl	8022b78 <memcpy>
    NoteSTR(Nx0, Ny0, Flag, (char *)str);
 801487e:	463b      	mov	r3, r7
 8014880:	7d7a      	ldrb	r2, [r7, #21]
 8014882:	f9b7 1010 	ldrsh.w	r1, [r7, #16]
 8014886:	f9b7 000e 	ldrsh.w	r0, [r7, #14]
 801488a:	f7fa f89b 	bl	800e9c4 <NoteSTR>
    Note_4Point(PRN, Nx0, Ny0, strlen((char*)str), Font6x8_H);
 801488e:	463b      	mov	r3, r7
 8014890:	4618      	mov	r0, r3
 8014892:	f7f7 fbd5 	bl	800c040 <strlen>
 8014896:	4603      	mov	r3, r0
 8014898:	b2db      	uxtb	r3, r3
 801489a:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 801489e:	f9b7 100e 	ldrsh.w	r1, [r7, #14]
 80148a2:	200a      	movs	r0, #10
 80148a4:	9000      	str	r0, [sp, #0]
 80148a6:	2000      	movs	r0, #0
 80148a8:	f7fa f932 	bl	800eb10 <Note_4Point>
  for(i=MU_BEGN[Current]; i<CurrentMax; i++){
 80148ac:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80148b0:	b29b      	uxth	r3, r3
 80148b2:	3301      	adds	r3, #1
 80148b4:	b29b      	uxth	r3, r3
 80148b6:	82fb      	strh	r3, [r7, #22]
 80148b8:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80148bc:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80148c0:	429a      	cmp	r2, r3
 80148c2:	dba4      	blt.n	801480e <Show_List+0xaa>
  }
  List_Pop();
 80148c4:	f7f9 ff5e 	bl	800e784 <List_Pop>
}
 80148c8:	bf00      	nop
 80148ca:	3718      	adds	r7, #24
 80148cc:	46bd      	mov	sp, r7
 80148ce:	bd80      	pop	{r7, pc}
 80148d0:	2000079e 	.word	0x2000079e
 80148d4:	08001f40 	.word	0x08001f40
 80148d8:	08001f48 	.word	0x08001f48
 80148dc:	08002144 	.word	0x08002144
 80148e0:	20000140 	.word	0x20000140
 80148e4:	0800214c 	.word	0x0800214c
 80148e8:	08002154 	.word	0x08002154
 80148ec:	20000538 	.word	0x20000538
 80148f0:	08001f50 	.word	0x08001f50

080148f4 <DispFileInfo>:

/*******************************************************************************

*******************************************************************************/
void DispFileInfo(char Info)
{
 80148f4:	b580      	push	{r7, lr}
 80148f6:	b084      	sub	sp, #16
 80148f8:	af02      	add	r7, sp, #8
 80148fa:	4603      	mov	r3, r0
 80148fc:	71fb      	strb	r3, [r7, #7]
  SetColor(DAR, BLU);
 80148fe:	f64f 4110 	movw	r1, #64528	; 0xfc10
 8014902:	f643 10e7 	movw	r0, #14823	; 0x39e7
 8014906:	f7f9 f9a3 	bl	800dc50 <SetColor>
  Draw_Circle_D(INV, S_X[SAVE_BMP]-3, LABLE_Y, 11, 0, 6*11);
 801490a:	23f8      	movs	r3, #248	; 0xf8
 801490c:	b29b      	uxth	r3, r3
 801490e:	3b03      	subs	r3, #3
 8014910:	b29b      	uxth	r3, r3
 8014912:	b219      	sxth	r1, r3
 8014914:	2342      	movs	r3, #66	; 0x42
 8014916:	9301      	str	r3, [sp, #4]
 8014918:	2300      	movs	r3, #0
 801491a:	9300      	str	r3, [sp, #0]
 801491c:	230b      	movs	r3, #11
 801491e:	2203      	movs	r2, #3
 8014920:	2001      	movs	r0, #1
 8014922:	f7f9 fa83 	bl	800de2c <Draw_Circle_D>
  DispStr(S_X[SAVE_BMP], LABLE_Y, INV, (char *)(&FnNote+14*Info));
 8014926:	20f8      	movs	r0, #248	; 0xf8
 8014928:	79fb      	ldrb	r3, [r7, #7]
 801492a:	f44f 7275 	mov.w	r2, #980	; 0x3d4
 801492e:	fb02 f303 	mul.w	r3, r2, r3
 8014932:	4a07      	ldr	r2, [pc, #28]	; (8014950 <DispFileInfo+0x5c>)
 8014934:	4413      	add	r3, r2
 8014936:	2201      	movs	r2, #1
 8014938:	2103      	movs	r1, #3
 801493a:	f7f9 f9a1 	bl	800dc80 <DispStr>
  HAL_Delay(2000);
 801493e:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8014942:	f003 fcf3 	bl	801832c <HAL_Delay>

}
 8014946:	bf00      	nop
 8014948:	3708      	adds	r7, #8
 801494a:	46bd      	mov	sp, r7
 801494c:	bd80      	pop	{r7, pc}
 801494e:	bf00      	nop
 8014950:	080022f0 	.word	0x080022f0

08014954 <DispBMPInfo>:

/*******************************************************************************

*******************************************************************************/
void DispBMPInfo(void)
{
 8014954:	b580      	push	{r7, lr}
 8014956:	b082      	sub	sp, #8
 8014958:	af02      	add	r7, sp, #8
  SetColor(GRY, TCOLOR[FN]);
 801495a:	f64f 4310 	movw	r3, #64528	; 0xfc10
 801495e:	4619      	mov	r1, r3
 8014960:	f643 10e7 	movw	r0, #14823	; 0x39e7
 8014964:	f7f9 f974 	bl	800dc50 <SetColor>
  u8ToDec3(NumStr, List[SAVE_BMP].Val);
 8014968:	4b1a      	ldr	r3, [pc, #104]	; (80149d4 <DispBMPInfo+0x80>)
 801496a:	f9b3 30ec 	ldrsh.w	r3, [r3, #236]	; 0xec
 801496e:	b2db      	uxtb	r3, r3
 8014970:	4619      	mov	r1, r3
 8014972:	4819      	ldr	r0, [pc, #100]	; (80149d8 <DispBMPInfo+0x84>)
 8014974:	f7fc fff4 	bl	8011960 <u8ToDec3>
  Draw_Circle_D(INV, S_X[SAVE_BMP]-3, LABLE_Y, 11, 0, 6*11);
 8014978:	23f8      	movs	r3, #248	; 0xf8
 801497a:	b29b      	uxth	r3, r3
 801497c:	3b03      	subs	r3, #3
 801497e:	b29b      	uxth	r3, r3
 8014980:	b219      	sxth	r1, r3
 8014982:	2342      	movs	r3, #66	; 0x42
 8014984:	9301      	str	r3, [sp, #4]
 8014986:	2300      	movs	r3, #0
 8014988:	9300      	str	r3, [sp, #0]
 801498a:	230b      	movs	r3, #11
 801498c:	2203      	movs	r2, #3
 801498e:	2001      	movs	r0, #1
 8014990:	f7f9 fa4c 	bl	800de2c <Draw_Circle_D>
  DispStr(S_X[SAVE_BMP],    LABLE_Y, INV, ("Save"));//0513
 8014994:	20f8      	movs	r0, #248	; 0xf8
 8014996:	4b11      	ldr	r3, [pc, #68]	; (80149dc <DispBMPInfo+0x88>)
 8014998:	2201      	movs	r2, #1
 801499a:	2103      	movs	r1, #3
 801499c:	f7f9 f970 	bl	800dc80 <DispStr>
  DispStr(S_X[SAVE_BMP]+24, LABLE_Y, INV, (char *)NumStr);
 80149a0:	23f8      	movs	r3, #248	; 0xf8
 80149a2:	b29b      	uxth	r3, r3
 80149a4:	3318      	adds	r3, #24
 80149a6:	b29b      	uxth	r3, r3
 80149a8:	b218      	sxth	r0, r3
 80149aa:	4b0b      	ldr	r3, [pc, #44]	; (80149d8 <DispBMPInfo+0x84>)
 80149ac:	2201      	movs	r2, #1
 80149ae:	2103      	movs	r1, #3
 80149b0:	f7f9 f966 	bl	800dc80 <DispStr>
  DispStr(S_X[SAVE_BMP]+42, LABLE_Y, INV, (List[SAVE_BMP].PTR ));
 80149b4:	23f8      	movs	r3, #248	; 0xf8
 80149b6:	b29b      	uxth	r3, r3
 80149b8:	332a      	adds	r3, #42	; 0x2a
 80149ba:	b29b      	uxth	r3, r3
 80149bc:	b218      	sxth	r0, r3
 80149be:	4b05      	ldr	r3, [pc, #20]	; (80149d4 <DispBMPInfo+0x80>)
 80149c0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80149c4:	2201      	movs	r2, #1
 80149c6:	2103      	movs	r1, #3
 80149c8:	f7f9 f95a 	bl	800dc80 <DispStr>
}
 80149cc:	bf00      	nop
 80149ce:	46bd      	mov	sp, r7
 80149d0:	bd80      	pop	{r7, pc}
 80149d2:	bf00      	nop
 80149d4:	20000298 	.word	0x20000298
 80149d8:	2000283c 	.word	0x2000283c
 80149dc:	08000950 	.word	0x08000950

080149e0 <Update_Proc_All>:

/*******************************************************************************
Update_Proc_All  ȫ��ˢ��
*******************************************************************************/
void Update_Proc_All(void)
{
 80149e0:	b590      	push	{r4, r7, lr}
 80149e2:	b087      	sub	sp, #28
 80149e4:	af02      	add	r7, sp, #8
  short i;
  long Tmp = 0;
 80149e6:	2300      	movs	r3, #0
 80149e8:	60bb      	str	r3, [r7, #8]
  short Range = List[Y_RANGES].Val + 10*List[PROBEATT].Val;
 80149ea:	4ba3      	ldr	r3, [pc, #652]	; (8014c78 <Update_Proc_All+0x298>)
 80149ec:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80149f0:	b29a      	uxth	r2, r3
 80149f2:	4ba1      	ldr	r3, [pc, #644]	; (8014c78 <Update_Proc_All+0x298>)
 80149f4:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 80149f8:	b29b      	uxth	r3, r3
 80149fa:	4619      	mov	r1, r3
 80149fc:	0089      	lsls	r1, r1, #2
 80149fe:	440b      	add	r3, r1
 8014a00:	005b      	lsls	r3, r3, #1
 8014a02:	b29b      	uxth	r3, r3
 8014a04:	4413      	add	r3, r2
 8014a06:	b29b      	uxth	r3, r3
 8014a08:	80fb      	strh	r3, [r7, #6]

  for(i=Y_RANGES; i<=STANDBY; i++){
 8014a0a:	2300      	movs	r3, #0
 8014a0c:	81fb      	strh	r3, [r7, #14]
 8014a0e:	e015      	b.n	8014a3c <Update_Proc_All+0x5c>
    List[i].Flg |= UPD;
 8014a10:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8014a14:	4a98      	ldr	r2, [pc, #608]	; (8014c78 <Update_Proc_All+0x298>)
 8014a16:	00db      	lsls	r3, r3, #3
 8014a18:	4413      	add	r3, r2
 8014a1a:	799a      	ldrb	r2, [r3, #6]
 8014a1c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8014a20:	f042 0220 	orr.w	r2, r2, #32
 8014a24:	b2d1      	uxtb	r1, r2
 8014a26:	4a94      	ldr	r2, [pc, #592]	; (8014c78 <Update_Proc_All+0x298>)
 8014a28:	00db      	lsls	r3, r3, #3
 8014a2a:	4413      	add	r3, r2
 8014a2c:	460a      	mov	r2, r1
 8014a2e:	719a      	strb	r2, [r3, #6]
  for(i=Y_RANGES; i<=STANDBY; i++){
 8014a30:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8014a34:	b29b      	uxth	r3, r3
 8014a36:	3301      	adds	r3, #1
 8014a38:	b29b      	uxth	r3, r3
 8014a3a:	81fb      	strh	r3, [r7, #14]
 8014a3c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8014a40:	2b29      	cmp	r3, #41	; 0x29
 8014a42:	dde5      	ble.n	8014a10 <Update_Proc_All+0x30>
  }

  for(i=Y_RANGES; i<=STANDBY; i++){
 8014a44:	2300      	movs	r3, #0
 8014a46:	81fb      	strh	r3, [r7, #14]
 8014a48:	e1be      	b.n	8014dc8 <Update_Proc_All+0x3e8>
    if(List[i].Flg & UPD){
 8014a4a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8014a4e:	4a8a      	ldr	r2, [pc, #552]	; (8014c78 <Update_Proc_All+0x298>)
 8014a50:	00db      	lsls	r3, r3, #3
 8014a52:	4413      	add	r3, r2
 8014a54:	799b      	ldrb	r3, [r3, #6]
 8014a56:	f003 0320 	and.w	r3, r3, #32
 8014a5a:	2b00      	cmp	r3, #0
 8014a5c:	f000 81ad 	beq.w	8014dba <Update_Proc_All+0x3da>
      List[i].Flg &= ~UPD;
 8014a60:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8014a64:	4a84      	ldr	r2, [pc, #528]	; (8014c78 <Update_Proc_All+0x298>)
 8014a66:	00db      	lsls	r3, r3, #3
 8014a68:	4413      	add	r3, r2
 8014a6a:	799a      	ldrb	r2, [r3, #6]
 8014a6c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8014a70:	f022 0220 	bic.w	r2, r2, #32
 8014a74:	b2d1      	uxtb	r1, r2
 8014a76:	4a80      	ldr	r2, [pc, #512]	; (8014c78 <Update_Proc_All+0x298>)
 8014a78:	00db      	lsls	r3, r3, #3
 8014a7a:	4413      	add	r3, r2
 8014a7c:	460a      	mov	r2, r1
 8014a7e:	719a      	strb	r2, [r3, #6]
      switch (i){
 8014a80:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8014a84:	2b12      	cmp	r3, #18
 8014a86:	f300 8199 	bgt.w	8014dbc <Update_Proc_All+0x3dc>
 8014a8a:	2b0d      	cmp	r3, #13
 8014a8c:	f280 80ac 	bge.w	8014be8 <Update_Proc_All+0x208>
 8014a90:	2b03      	cmp	r3, #3
 8014a92:	dc02      	bgt.n	8014a9a <Update_Proc_All+0xba>
 8014a94:	2b00      	cmp	r3, #0
 8014a96:	da04      	bge.n	8014aa2 <Update_Proc_All+0xc2>
 8014a98:	e190      	b.n	8014dbc <Update_Proc_All+0x3dc>
 8014a9a:	2b07      	cmp	r3, #7
 8014a9c:	f000 815a 	beq.w	8014d54 <Update_Proc_All+0x374>
 8014aa0:	e18c      	b.n	8014dbc <Update_Proc_All+0x3dc>
      case Y_RANGES:   // ˢ����ʾ Y ���̵�λ
      case PROBEATT:   // ˢ����ʾ̽ͷ˥������
      case COUPLING:   // ˢ����ʾ���ģʽ״̬
      case V0_POSI:    // ˢ����ʾ��ֱƫ��λ��
        SetColor(GRY, TCOLOR[YN]);
 8014aa2:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8014aa6:	4619      	mov	r1, r3
 8014aa8:	f643 10e7 	movw	r0, #14823	; 0x39e7
 8014aac:	f7f9 f8d0 	bl	800dc50 <SetColor>
        if(i == Y_RANGES || i == COUPLING||i == PROBEATT){
 8014ab0:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8014ab4:	2b00      	cmp	r3, #0
 8014ab6:	d007      	beq.n	8014ac8 <Update_Proc_All+0xe8>
 8014ab8:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8014abc:	2b01      	cmp	r3, #1
 8014abe:	d003      	beq.n	8014ac8 <Update_Proc_All+0xe8>
 8014ac0:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8014ac4:	2b02      	cmp	r3, #2
 8014ac6:	d138      	bne.n	8014b3a <Update_Proc_All+0x15a>
          Draw_Circle_D(INV, S_X[Y_RANGES]-3, TITLE_Y_POS, 11, 0, 6*7);
 8014ac8:	232f      	movs	r3, #47	; 0x2f
 8014aca:	b29b      	uxth	r3, r3
 8014acc:	3b03      	subs	r3, #3
 8014ace:	b29b      	uxth	r3, r3
 8014ad0:	b219      	sxth	r1, r3
 8014ad2:	232a      	movs	r3, #42	; 0x2a
 8014ad4:	9301      	str	r3, [sp, #4]
 8014ad6:	2300      	movs	r3, #0
 8014ad8:	9300      	str	r3, [sp, #0]
 8014ada:	230b      	movs	r3, #11
 8014adc:	22e1      	movs	r2, #225	; 0xe1
 8014ade:	2001      	movs	r0, #1
 8014ae0:	f7f9 f9a4 	bl	800de2c <Draw_Circle_D>
          DispStr(S_X[Y_RANGES], TITLE_Y_POS, INV,      (List[Y_RANGES].PTR +(Range)*6));
 8014ae4:	202f      	movs	r0, #47	; 0x2f
 8014ae6:	4b64      	ldr	r3, [pc, #400]	; (8014c78 <Update_Proc_All+0x298>)
 8014ae8:	6819      	ldr	r1, [r3, #0]
 8014aea:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8014aee:	4613      	mov	r3, r2
 8014af0:	005b      	lsls	r3, r3, #1
 8014af2:	4413      	add	r3, r2
 8014af4:	005b      	lsls	r3, r3, #1
 8014af6:	440b      	add	r3, r1
 8014af8:	2201      	movs	r2, #1
 8014afa:	21e1      	movs	r1, #225	; 0xe1
 8014afc:	f7f9 f8c0 	bl	800dc80 <DispStr>
          DispStr(S_X[COUPLING], TITLE_Y_POS, INV,      (List[COUPLING].PTR +(List[COUPLING].Val)*6));
 8014b00:	2047      	movs	r0, #71	; 0x47
 8014b02:	4b5d      	ldr	r3, [pc, #372]	; (8014c78 <Update_Proc_All+0x298>)
 8014b04:	689a      	ldr	r2, [r3, #8]
 8014b06:	4b5c      	ldr	r3, [pc, #368]	; (8014c78 <Update_Proc_All+0x298>)
 8014b08:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8014b0c:	4619      	mov	r1, r3
 8014b0e:	460b      	mov	r3, r1
 8014b10:	005b      	lsls	r3, r3, #1
 8014b12:	440b      	add	r3, r1
 8014b14:	005b      	lsls	r3, r3, #1
 8014b16:	4413      	add	r3, r2
 8014b18:	2201      	movs	r2, #1
 8014b1a:	21e1      	movs	r1, #225	; 0xe1
 8014b1c:	f7f9 f8b0 	bl	800dc80 <DispStr>
          DispStr10x14(S_X[PROBEATT], TITLE_Y_POS, PRN+SYMB,(List[PROBEATT].Val?("A"):("B")));
 8014b20:	2020      	movs	r0, #32
 8014b22:	4b55      	ldr	r3, [pc, #340]	; (8014c78 <Update_Proc_All+0x298>)
 8014b24:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8014b28:	2b00      	cmp	r3, #0
 8014b2a:	d001      	beq.n	8014b30 <Update_Proc_All+0x150>
 8014b2c:	4b53      	ldr	r3, [pc, #332]	; (8014c7c <Update_Proc_All+0x29c>)
 8014b2e:	e000      	b.n	8014b32 <Update_Proc_All+0x152>
 8014b30:	4b53      	ldr	r3, [pc, #332]	; (8014c80 <Update_Proc_All+0x2a0>)
 8014b32:	2210      	movs	r2, #16
 8014b34:	21e1      	movs	r1, #225	; 0xe1
 8014b36:	f7f9 fb0b 	bl	800e150 <DispStr10x14>
        }
        ParamTab[P1x2] = 2*((List[V0_POSI].Val+1));
 8014b3a:	4b4f      	ldr	r3, [pc, #316]	; (8014c78 <Update_Proc_All+0x298>)
 8014b3c:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 8014b40:	3301      	adds	r3, #1
 8014b42:	b29b      	uxth	r3, r3
 8014b44:	005b      	lsls	r3, r3, #1
 8014b46:	b29b      	uxth	r3, r3
 8014b48:	b21a      	sxth	r2, r3
 8014b4a:	4b4e      	ldr	r3, [pc, #312]	; (8014c84 <Update_Proc_All+0x2a4>)
 8014b4c:	829a      	strh	r2, [r3, #20]
        ParamTab[VTx2] = ParamTab[P1x2]+ 2*(List[THRESHOLD].Val+1);
 8014b4e:	4b4d      	ldr	r3, [pc, #308]	; (8014c84 <Update_Proc_All+0x2a4>)
 8014b50:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8014b54:	b29a      	uxth	r2, r3
 8014b56:	4b48      	ldr	r3, [pc, #288]	; (8014c78 <Update_Proc_All+0x298>)
 8014b58:	f9b3 3084 	ldrsh.w	r3, [r3, #132]	; 0x84
 8014b5c:	3301      	adds	r3, #1
 8014b5e:	b29b      	uxth	r3, r3
 8014b60:	005b      	lsls	r3, r3, #1
 8014b62:	b29b      	uxth	r3, r3
 8014b64:	4413      	add	r3, r2
 8014b66:	b29b      	uxth	r3, r3
 8014b68:	b21a      	sxth	r2, r3
 8014b6a:	4b46      	ldr	r3, [pc, #280]	; (8014c84 <Update_Proc_All+0x2a4>)
 8014b6c:	839a      	strh	r2, [r3, #28]

        StateA =  (List[Y_RANGES].Val>5)?ACT: GND;                                    //ACT GND �ӵػ򼤻�״̬
 8014b6e:	4b42      	ldr	r3, [pc, #264]	; (8014c78 <Update_Proc_All+0x298>)
 8014b70:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8014b74:	2b05      	cmp	r3, #5
 8014b76:	dd01      	ble.n	8014b7c <Update_Proc_All+0x19c>
 8014b78:	2204      	movs	r2, #4
 8014b7a:	e000      	b.n	8014b7e <Update_Proc_All+0x19e>
 8014b7c:	2200      	movs	r2, #0
 8014b7e:	4b42      	ldr	r3, [pc, #264]	; (8014c88 <Update_Proc_All+0x2a8>)
 8014b80:	801a      	strh	r2, [r3, #0]
        GainA  = List[Y_RANGES].Val;
 8014b82:	4b3d      	ldr	r3, [pc, #244]	; (8014c78 <Update_Proc_All+0x298>)
 8014b84:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
 8014b88:	4b40      	ldr	r3, [pc, #256]	; (8014c8c <Update_Proc_All+0x2ac>)
 8014b8a:	801a      	strh	r2, [r3, #0]
        if(List[Y_RANGES].Val>1)
 8014b8c:	4b3a      	ldr	r3, [pc, #232]	; (8014c78 <Update_Proc_All+0x298>)
 8014b8e:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8014b92:	2b01      	cmp	r3, #1
 8014b94:	dd03      	ble.n	8014b9e <Update_Proc_All+0x1be>
          KindA  = HV;
 8014b96:	4b3e      	ldr	r3, [pc, #248]	; (8014c90 <Update_Proc_All+0x2b0>)
 8014b98:	2201      	movs	r2, #1
 8014b9a:	801a      	strh	r2, [r3, #0]
 8014b9c:	e002      	b.n	8014ba4 <Update_Proc_All+0x1c4>
        else
          KindA  = LV;                //Ch1ѡ���ѹ���ѹ����
 8014b9e:	4b3c      	ldr	r3, [pc, #240]	; (8014c90 <Update_Proc_All+0x2b0>)
 8014ba0:	2200      	movs	r2, #0
 8014ba2:	801a      	strh	r2, [r3, #0]

        CouplA = (List[COUPLING].Val)? AC : DC;                      // AC);  //AC/DC��Ϸ�ʽ
 8014ba4:	4b34      	ldr	r3, [pc, #208]	; (8014c78 <Update_Proc_All+0x298>)
 8014ba6:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8014baa:	2b00      	cmp	r3, #0
 8014bac:	d001      	beq.n	8014bb2 <Update_Proc_All+0x1d2>
 8014bae:	2200      	movs	r2, #0
 8014bb0:	e000      	b.n	8014bb4 <Update_Proc_All+0x1d4>
 8014bb2:	2202      	movs	r2, #2
 8014bb4:	4b37      	ldr	r3, [pc, #220]	; (8014c94 <Update_Proc_All+0x2b4>)
 8014bb6:	801a      	strh	r2, [r3, #0]
        BIOS_Ctrl(AiRANGE, KindA+CouplA+StateA);             //Ch1״̬ˢ��
 8014bb8:	4b35      	ldr	r3, [pc, #212]	; (8014c90 <Update_Proc_All+0x2b0>)
 8014bba:	f9b3 3000 	ldrsh.w	r3, [r3]
 8014bbe:	461a      	mov	r2, r3
 8014bc0:	4b34      	ldr	r3, [pc, #208]	; (8014c94 <Update_Proc_All+0x2b4>)
 8014bc2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8014bc6:	4413      	add	r3, r2
 8014bc8:	4a2f      	ldr	r2, [pc, #188]	; (8014c88 <Update_Proc_All+0x2a8>)
 8014bca:	f9b2 2000 	ldrsh.w	r2, [r2]
 8014bce:	4413      	add	r3, r2
 8014bd0:	4619      	mov	r1, r3
 8014bd2:	2007      	movs	r0, #7
 8014bd4:	f7f7 fbce 	bl	800c374 <BIOS_Ctrl>
        AiPosi(List[V0_POSI].Val);                        //Ch1Ӳ����Ӧλ��
 8014bd8:	4b27      	ldr	r3, [pc, #156]	; (8014c78 <Update_Proc_All+0x298>)
 8014bda:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 8014bde:	b2db      	uxtb	r3, r3
 8014be0:	4618      	mov	r0, r3
 8014be2:	f000 fa0f 	bl	8015004 <AiPosi>

        break;
 8014be6:	e0e9      	b.n	8014dbc <Update_Proc_All+0x3dc>
      case TR_MODE:   // ˢ����ʾ������ʽ
      case FITTRIGG:  // ˢ����ʾ�Զ�������ֵ
      case THRESHOLD: // ˢ����ʾ������ֵ
      case SENSITIVE: // ˢ����ʾ����������
      case TR_TYPE:   // ˢ����ʾ�α���ʽ
        DispStatus();
 8014be8:	f7ff fbee 	bl	80143c8 <DispStatus>
        SetColor(GRY, TCOLOR[TRG]);
 8014bec:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8014bf0:	4619      	mov	r1, r3
 8014bf2:	f643 10e7 	movw	r0, #14823	; 0x39e7
 8014bf6:	f7f9 f82b 	bl	800dc50 <SetColor>
        if(i == TR_MODE || i==SENSITIVE)
 8014bfa:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8014bfe:	2b0e      	cmp	r3, #14
 8014c00:	d003      	beq.n	8014c0a <Update_Proc_All+0x22a>
 8014c02:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8014c06:	2b11      	cmp	r3, #17
 8014c08:	d11a      	bne.n	8014c40 <Update_Proc_All+0x260>
        {
          Draw_Circle_D(INV, S_X[TR_MODE]-3, TITLE_Y_POS, 11, 0, 6*8);
 8014c0a:	23dd      	movs	r3, #221	; 0xdd
 8014c0c:	b29b      	uxth	r3, r3
 8014c0e:	3b03      	subs	r3, #3
 8014c10:	b29b      	uxth	r3, r3
 8014c12:	b219      	sxth	r1, r3
 8014c14:	2330      	movs	r3, #48	; 0x30
 8014c16:	9301      	str	r3, [sp, #4]
 8014c18:	2300      	movs	r3, #0
 8014c1a:	9300      	str	r3, [sp, #0]
 8014c1c:	230b      	movs	r3, #11
 8014c1e:	22e1      	movs	r2, #225	; 0xe1
 8014c20:	2001      	movs	r0, #1
 8014c22:	f7f9 f903 	bl	800de2c <Draw_Circle_D>
          DispStr10x14(S_X[TR_MODE], TITLE_Y_POS, INV+SYMB,(List[TR_MODE].Val?("D"):("C")));
 8014c26:	20dd      	movs	r0, #221	; 0xdd
 8014c28:	4b13      	ldr	r3, [pc, #76]	; (8014c78 <Update_Proc_All+0x298>)
 8014c2a:	f9b3 3074 	ldrsh.w	r3, [r3, #116]	; 0x74
 8014c2e:	2b00      	cmp	r3, #0
 8014c30:	d001      	beq.n	8014c36 <Update_Proc_All+0x256>
 8014c32:	4b19      	ldr	r3, [pc, #100]	; (8014c98 <Update_Proc_All+0x2b8>)
 8014c34:	e000      	b.n	8014c38 <Update_Proc_All+0x258>
 8014c36:	4b19      	ldr	r3, [pc, #100]	; (8014c9c <Update_Proc_All+0x2bc>)
 8014c38:	2211      	movs	r2, #17
 8014c3a:	21e1      	movs	r1, #225	; 0xe1
 8014c3c:	f7f9 fa88 	bl	800e150 <DispStr10x14>
        }
        if(i == FITTRIGG)
 8014c40:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8014c44:	2b0f      	cmp	r3, #15
 8014c46:	d132      	bne.n	8014cae <Update_Proc_All+0x2ce>
        {
          DispStr10x14(S_X[FITTRIGG], TITLE_Y_POS, PRN+SYMB,(List[FITTRIGG].Val?("F"):("B")));
 8014c48:	20cf      	movs	r0, #207	; 0xcf
 8014c4a:	4b0b      	ldr	r3, [pc, #44]	; (8014c78 <Update_Proc_All+0x298>)
 8014c4c:	f9b3 307c 	ldrsh.w	r3, [r3, #124]	; 0x7c
 8014c50:	2b00      	cmp	r3, #0
 8014c52:	d001      	beq.n	8014c58 <Update_Proc_All+0x278>
 8014c54:	4b12      	ldr	r3, [pc, #72]	; (8014ca0 <Update_Proc_All+0x2c0>)
 8014c56:	e000      	b.n	8014c5a <Update_Proc_All+0x27a>
 8014c58:	4b09      	ldr	r3, [pc, #36]	; (8014c80 <Update_Proc_All+0x2a0>)
 8014c5a:	2210      	movs	r2, #16
 8014c5c:	21e1      	movs	r1, #225	; 0xe1
 8014c5e:	f7f9 fa77 	bl	800e150 <DispStr10x14>
          if(List[FITTRIGG].Val)KEYTIME = 300;
 8014c62:	4b05      	ldr	r3, [pc, #20]	; (8014c78 <Update_Proc_All+0x298>)
 8014c64:	f9b3 307c 	ldrsh.w	r3, [r3, #124]	; 0x7c
 8014c68:	2b00      	cmp	r3, #0
 8014c6a:	d01d      	beq.n	8014ca8 <Update_Proc_All+0x2c8>
 8014c6c:	4b0d      	ldr	r3, [pc, #52]	; (8014ca4 <Update_Proc_All+0x2c4>)
 8014c6e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8014c72:	801a      	strh	r2, [r3, #0]
 8014c74:	e01b      	b.n	8014cae <Update_Proc_All+0x2ce>
 8014c76:	bf00      	nop
 8014c78:	20000298 	.word	0x20000298
 8014c7c:	08000958 	.word	0x08000958
 8014c80:	0800095c 	.word	0x0800095c
 8014c84:	20000140 	.word	0x20000140
 8014c88:	20002862 	.word	0x20002862
 8014c8c:	2000284a 	.word	0x2000284a
 8014c90:	20006886 	.word	0x20006886
 8014c94:	20006888 	.word	0x20006888
 8014c98:	08000988 	.word	0x08000988
 8014c9c:	0800098c 	.word	0x0800098c
 8014ca0:	0800099c 	.word	0x0800099c
 8014ca4:	2000077e 	.word	0x2000077e
          else KEYTIME = 0;
 8014ca8:	4b4c      	ldr	r3, [pc, #304]	; (8014ddc <Update_Proc_All+0x3fc>)
 8014caa:	2200      	movs	r2, #0
 8014cac:	801a      	strh	r2, [r3, #0]
        };
        ParamTab[VTx2]= ParamTab[P1x2]+2*List[THRESHOLD].Val;
 8014cae:	4b4c      	ldr	r3, [pc, #304]	; (8014de0 <Update_Proc_All+0x400>)
 8014cb0:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8014cb4:	b29a      	uxth	r2, r3
 8014cb6:	4b4b      	ldr	r3, [pc, #300]	; (8014de4 <Update_Proc_All+0x404>)
 8014cb8:	f9b3 3084 	ldrsh.w	r3, [r3, #132]	; 0x84
 8014cbc:	b29b      	uxth	r3, r3
 8014cbe:	005b      	lsls	r3, r3, #1
 8014cc0:	b29b      	uxth	r3, r3
 8014cc2:	4413      	add	r3, r2
 8014cc4:	b29b      	uxth	r3, r3
 8014cc6:	b21a      	sxth	r2, r3
 8014cc8:	4b45      	ldr	r3, [pc, #276]	; (8014de0 <Update_Proc_All+0x400>)
 8014cca:	839a      	strh	r2, [r3, #28]
        Tmp  = List[SENSITIVE].Val;
 8014ccc:	4b45      	ldr	r3, [pc, #276]	; (8014de4 <Update_Proc_All+0x404>)
 8014cce:	f9b3 308c 	ldrsh.w	r3, [r3, #140]	; 0x8c
 8014cd2:	60bb      	str	r3, [r7, #8]
        Tmp *= X_SCALE[Range]* Exp(V_SCALE[Range]);
 8014cd4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8014cd8:	4a43      	ldr	r2, [pc, #268]	; (8014de8 <Update_Proc_All+0x408>)
 8014cda:	5cd3      	ldrb	r3, [r2, r3]
 8014cdc:	461c      	mov	r4, r3
 8014cde:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8014ce2:	4a42      	ldr	r2, [pc, #264]	; (8014dec <Update_Proc_All+0x40c>)
 8014ce4:	5cd3      	ldrb	r3, [r2, r3]
 8014ce6:	4618      	mov	r0, r3
 8014ce8:	f7fc ff9e 	bl	8011c28 <Exp>
 8014cec:	4603      	mov	r3, r0
 8014cee:	fb03 f204 	mul.w	r2, r3, r4
 8014cf2:	68bb      	ldr	r3, [r7, #8]
 8014cf4:	fb02 f303 	mul.w	r3, r2, r3
 8014cf8:	60bb      	str	r3, [r7, #8]
        Value2Str(NumStr, Tmp, V[2], 2, UNSIGN);
 8014cfa:	2301      	movs	r3, #1
 8014cfc:	9300      	str	r3, [sp, #0]
 8014cfe:	2302      	movs	r3, #2
 8014d00:	4a3b      	ldr	r2, [pc, #236]	; (8014df0 <Update_Proc_All+0x410>)
 8014d02:	68b9      	ldr	r1, [r7, #8]
 8014d04:	483b      	ldr	r0, [pc, #236]	; (8014df4 <Update_Proc_All+0x414>)
 8014d06:	f7fc fe93 	bl	8011a30 <Value2Str>
        DispStr10x14(S_X[SENSITIVE], TITLE_Y_POS, INV+SYMB,"E");
 8014d0a:	20e7      	movs	r0, #231	; 0xe7
 8014d0c:	4b3a      	ldr	r3, [pc, #232]	; (8014df8 <Update_Proc_All+0x418>)
 8014d0e:	2211      	movs	r2, #17
 8014d10:	21e1      	movs	r1, #225	; 0xe1
 8014d12:	f7f9 fa1d 	bl	800e150 <DispStr10x14>
        DispStr(S_X[SENSITIVE]+9, TITLE_Y_POS, INV,  "     ");
 8014d16:	23e7      	movs	r3, #231	; 0xe7
 8014d18:	b29b      	uxth	r3, r3
 8014d1a:	3309      	adds	r3, #9
 8014d1c:	b29b      	uxth	r3, r3
 8014d1e:	b218      	sxth	r0, r3
 8014d20:	4b36      	ldr	r3, [pc, #216]	; (8014dfc <Update_Proc_All+0x41c>)
 8014d22:	2201      	movs	r2, #1
 8014d24:	21e1      	movs	r1, #225	; 0xe1
 8014d26:	f7f8 ffab 	bl	800dc80 <DispStr>
        DispStr(S_X[SENSITIVE]+9, TITLE_Y_POS, INV,  (char *)NumStr);
 8014d2a:	23e7      	movs	r3, #231	; 0xe7
 8014d2c:	b29b      	uxth	r3, r3
 8014d2e:	3309      	adds	r3, #9
 8014d30:	b29b      	uxth	r3, r3
 8014d32:	b218      	sxth	r0, r3
 8014d34:	4b2f      	ldr	r3, [pc, #188]	; (8014df4 <Update_Proc_All+0x414>)
 8014d36:	2201      	movs	r2, #1
 8014d38:	21e1      	movs	r1, #225	; 0xe1
 8014d3a:	f7f8 ffa1 	bl	800dc80 <DispStr>
        ParamTab[VTF]=(List[TR_TYPE].Val)? L_HID : SHOW;
 8014d3e:	4b29      	ldr	r3, [pc, #164]	; (8014de4 <Update_Proc_All+0x404>)
 8014d40:	f9b3 3094 	ldrsh.w	r3, [r3, #148]	; 0x94
 8014d44:	2b00      	cmp	r3, #0
 8014d46:	d001      	beq.n	8014d4c <Update_Proc_All+0x36c>
 8014d48:	2202      	movs	r2, #2
 8014d4a:	e000      	b.n	8014d4e <Update_Proc_All+0x36e>
 8014d4c:	2200      	movs	r2, #0
 8014d4e:	4b24      	ldr	r3, [pc, #144]	; (8014de0 <Update_Proc_All+0x400>)
 8014d50:	811a      	strh	r2, [r3, #8]
        break;
 8014d52:	e033      	b.n	8014dbc <Update_Proc_All+0x3dc>

      case TIM_BASE:  // ˢ����ʾʱ����λ
        SetColor(GRY, TCOLOR[XN]);
 8014d54:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8014d58:	4619      	mov	r1, r3
 8014d5a:	f643 10e7 	movw	r0, #14823	; 0x39e7
 8014d5e:	f7f8 ff77 	bl	800dc50 <SetColor>
        if(i == TIM_BASE)
 8014d62:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8014d66:	2b07      	cmp	r3, #7
 8014d68:	d120      	bne.n	8014dac <Update_Proc_All+0x3cc>
        {
          Draw_Circle_D(INV, S_X[i]-3, TITLE_Y_POS, 11, 2, 6*5);
 8014d6a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8014d6e:	4a24      	ldr	r2, [pc, #144]	; (8014e00 <Update_Proc_All+0x420>)
 8014d70:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8014d74:	b29b      	uxth	r3, r3
 8014d76:	3b03      	subs	r3, #3
 8014d78:	b29b      	uxth	r3, r3
 8014d7a:	b219      	sxth	r1, r3
 8014d7c:	231e      	movs	r3, #30
 8014d7e:	9301      	str	r3, [sp, #4]
 8014d80:	2302      	movs	r3, #2
 8014d82:	9300      	str	r3, [sp, #0]
 8014d84:	230b      	movs	r3, #11
 8014d86:	22e1      	movs	r2, #225	; 0xe1
 8014d88:	2001      	movs	r0, #1
 8014d8a:	f7f9 f84f 	bl	800de2c <Draw_Circle_D>
          DispStr(S_X[i], TITLE_Y_POS, INV, (char *)TimeBase_Str[List[TIM_BASE].Val]);
 8014d8e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8014d92:	4a1b      	ldr	r2, [pc, #108]	; (8014e00 <Update_Proc_All+0x420>)
 8014d94:	f932 0013 	ldrsh.w	r0, [r2, r3, lsl #1]
 8014d98:	4b12      	ldr	r3, [pc, #72]	; (8014de4 <Update_Proc_All+0x404>)
 8014d9a:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8014d9e:	00db      	lsls	r3, r3, #3
 8014da0:	4a18      	ldr	r2, [pc, #96]	; (8014e04 <Update_Proc_All+0x424>)
 8014da2:	4413      	add	r3, r2
 8014da4:	2201      	movs	r2, #1
 8014da6:	21e1      	movs	r1, #225	; 0xe1
 8014da8:	f7f8 ff6a 	bl	800dc80 <DispStr>
        }
        Set_Base(List[TIM_BASE].Val);          // Ӳ������ɨ��ʱ����λ
 8014dac:	4b0d      	ldr	r3, [pc, #52]	; (8014de4 <Update_Proc_All+0x404>)
 8014dae:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8014db2:	4618      	mov	r0, r3
 8014db4:	f7f7 fc14 	bl	800c5e0 <Set_Base>
      break;
 8014db8:	e000      	b.n	8014dbc <Update_Proc_All+0x3dc>

      }
    }
 8014dba:	bf00      	nop
  for(i=Y_RANGES; i<=STANDBY; i++){
 8014dbc:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8014dc0:	b29b      	uxth	r3, r3
 8014dc2:	3301      	adds	r3, #1
 8014dc4:	b29b      	uxth	r3, r3
 8014dc6:	81fb      	strh	r3, [r7, #14]
 8014dc8:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8014dcc:	2b29      	cmp	r3, #41	; 0x29
 8014dce:	f77f ae3c 	ble.w	8014a4a <Update_Proc_All+0x6a>
  }
}
 8014dd2:	bf00      	nop
 8014dd4:	bf00      	nop
 8014dd6:	3714      	adds	r7, #20
 8014dd8:	46bd      	mov	sp, r7
 8014dda:	bd90      	pop	{r4, r7, pc}
 8014ddc:	2000077e 	.word	0x2000077e
 8014de0:	20000140 	.word	0x20000140
 8014de4:	20000298 	.word	0x20000298
 8014de8:	08002130 	.word	0x08002130
 8014dec:	08002108 	.word	0x08002108
 8014df0:	08001d0c 	.word	0x08001d0c
 8014df4:	2000283c 	.word	0x2000283c
 8014df8:	08000998 	.word	0x08000998
 8014dfc:	08000990 	.word	0x08000990
 8014e00:	0800215c 	.word	0x0800215c
 8014e04:	200001d0 	.word	0x200001d0

08014e08 <Align_Set>:

/*******************************************************************************
 Align_Set:
*******************************************************************************/
void Align_Set(void)
{
 8014e08:	b580      	push	{r7, lr}
 8014e0a:	b082      	sub	sp, #8
 8014e0c:	af00      	add	r7, sp, #0
  unsigned short i, TmpA = 0, StA = 0;
 8014e0e:	2300      	movs	r3, #0
 8014e10:	807b      	strh	r3, [r7, #2]
 8014e12:	2300      	movs	r3, #0
 8014e14:	80bb      	strh	r3, [r7, #4]

  Analys();
 8014e16:	f000 f8b1 	bl	8014f7c <Analys>
  for(i=0; i<100; i++)
 8014e1a:	2300      	movs	r3, #0
 8014e1c:	80fb      	strh	r3, [r7, #6]
 8014e1e:	e051      	b.n	8014ec4 <Align_Set+0xbc>
  {
    AiPosi(100);
 8014e20:	2064      	movs	r0, #100	; 0x64
 8014e22:	f000 f8ef 	bl	8015004 <AiPosi>
    HAL_Delay(10);                             // Wait 10mS
 8014e26:	200a      	movs	r0, #10
 8014e28:	f003 fa80 	bl	801832c <HAL_Delay>
    Analys();
 8014e2c:	f000 f8a6 	bl	8014f7c <Analys>
    TmpA = 2048-Vavg;
 8014e30:	4b28      	ldr	r3, [pc, #160]	; (8014ed4 <Align_Set+0xcc>)
 8014e32:	f9b3 3000 	ldrsh.w	r3, [r3]
 8014e36:	b29b      	uxth	r3, r3
 8014e38:	f5c3 6300 	rsb	r3, r3, #2048	; 0x800
 8014e3c:	807b      	strh	r3, [r7, #2]

    if(TmpA != 0)
 8014e3e:	887b      	ldrh	r3, [r7, #2]
 8014e40:	2b00      	cmp	r3, #0
 8014e42:	d036      	beq.n	8014eb2 <Align_Set+0xaa>
    {
      KpA[KindA+(StateA?1:0)] += 700*TmpA/2048;
 8014e44:	4b24      	ldr	r3, [pc, #144]	; (8014ed8 <Align_Set+0xd0>)
 8014e46:	681a      	ldr	r2, [r3, #0]
 8014e48:	4b24      	ldr	r3, [pc, #144]	; (8014edc <Align_Set+0xd4>)
 8014e4a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8014e4e:	4619      	mov	r1, r3
 8014e50:	4b23      	ldr	r3, [pc, #140]	; (8014ee0 <Align_Set+0xd8>)
 8014e52:	f9b3 3000 	ldrsh.w	r3, [r3]
 8014e56:	2b00      	cmp	r3, #0
 8014e58:	bf14      	ite	ne
 8014e5a:	2301      	movne	r3, #1
 8014e5c:	2300      	moveq	r3, #0
 8014e5e:	b2db      	uxtb	r3, r3
 8014e60:	440b      	add	r3, r1
 8014e62:	005b      	lsls	r3, r3, #1
 8014e64:	4413      	add	r3, r2
 8014e66:	f9b3 3000 	ldrsh.w	r3, [r3]
 8014e6a:	b29a      	uxth	r2, r3
 8014e6c:	887b      	ldrh	r3, [r7, #2]
 8014e6e:	f44f 712f 	mov.w	r1, #700	; 0x2bc
 8014e72:	fb01 f303 	mul.w	r3, r1, r3
 8014e76:	2b00      	cmp	r3, #0
 8014e78:	da01      	bge.n	8014e7e <Align_Set+0x76>
 8014e7a:	f203 73ff 	addw	r3, r3, #2047	; 0x7ff
 8014e7e:	12db      	asrs	r3, r3, #11
 8014e80:	b29b      	uxth	r3, r3
 8014e82:	4413      	add	r3, r2
 8014e84:	b299      	uxth	r1, r3
 8014e86:	4b14      	ldr	r3, [pc, #80]	; (8014ed8 <Align_Set+0xd0>)
 8014e88:	681a      	ldr	r2, [r3, #0]
 8014e8a:	4b14      	ldr	r3, [pc, #80]	; (8014edc <Align_Set+0xd4>)
 8014e8c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8014e90:	4618      	mov	r0, r3
 8014e92:	4b13      	ldr	r3, [pc, #76]	; (8014ee0 <Align_Set+0xd8>)
 8014e94:	f9b3 3000 	ldrsh.w	r3, [r3]
 8014e98:	2b00      	cmp	r3, #0
 8014e9a:	bf14      	ite	ne
 8014e9c:	2301      	movne	r3, #1
 8014e9e:	2300      	moveq	r3, #0
 8014ea0:	b2db      	uxtb	r3, r3
 8014ea2:	4403      	add	r3, r0
 8014ea4:	005b      	lsls	r3, r3, #1
 8014ea6:	4413      	add	r3, r2
 8014ea8:	b20a      	sxth	r2, r1
 8014eaa:	801a      	strh	r2, [r3, #0]
      StA = 0;
 8014eac:	2300      	movs	r3, #0
 8014eae:	80bb      	strh	r3, [r7, #4]
 8014eb0:	e002      	b.n	8014eb8 <Align_Set+0xb0>
    }
    else
      StA++;
 8014eb2:	88bb      	ldrh	r3, [r7, #4]
 8014eb4:	3301      	adds	r3, #1
 8014eb6:	80bb      	strh	r3, [r7, #4]

    if(StA > 4)
 8014eb8:	88bb      	ldrh	r3, [r7, #4]
 8014eba:	2b04      	cmp	r3, #4
 8014ebc:	d806      	bhi.n	8014ecc <Align_Set+0xc4>
  for(i=0; i<100; i++)
 8014ebe:	88fb      	ldrh	r3, [r7, #6]
 8014ec0:	3301      	adds	r3, #1
 8014ec2:	80fb      	strh	r3, [r7, #6]
 8014ec4:	88fb      	ldrh	r3, [r7, #6]
 8014ec6:	2b63      	cmp	r3, #99	; 0x63
 8014ec8:	d9aa      	bls.n	8014e20 <Align_Set+0x18>
 8014eca:	e000      	b.n	8014ece <Align_Set+0xc6>
    	return;
 8014ecc:	bf00      	nop
  }

}
 8014ece:	3708      	adds	r7, #8
 8014ed0:	46bd      	mov	sp, r7
 8014ed2:	bd80      	pop	{r7, pc}
 8014ed4:	20002858 	.word	0x20002858
 8014ed8:	20000578 	.word	0x20000578
 8014edc:	20006886 	.word	0x20006886
 8014ee0:	20002862 	.word	0x20002862

08014ee4 <Zero_Align>:

/*******************************************************************************
 Channel's zero alignment:
*******************************************************************************/
void Zero_Align(void)
{
 8014ee4:	b580      	push	{r7, lr}
 8014ee6:	af00      	add	r7, sp, #0
  GainA  = 0;//0x20;
 8014ee8:	4b21      	ldr	r3, [pc, #132]	; (8014f70 <Zero_Align+0x8c>)
 8014eea:	2200      	movs	r2, #0
 8014eec:	801a      	strh	r2, [r3, #0]
  KindA  = HV;
 8014eee:	4b21      	ldr	r3, [pc, #132]	; (8014f74 <Zero_Align+0x90>)
 8014ef0:	2201      	movs	r2, #1
 8014ef2:	801a      	strh	r2, [r3, #0]
  StateA = ACT;
 8014ef4:	4b20      	ldr	r3, [pc, #128]	; (8014f78 <Zero_Align+0x94>)
 8014ef6:	2204      	movs	r2, #4
 8014ef8:	801a      	strh	r2, [r3, #0]
  BIOS_Ctrl(AiRANGE, HV+AC+ACT);
 8014efa:	2105      	movs	r1, #5
 8014efc:	2007      	movs	r0, #7
 8014efe:	f7f7 fa39 	bl	800c374 <BIOS_Ctrl>
  AiPosi(100);
 8014f02:	2064      	movs	r0, #100	; 0x64
 8014f04:	f000 f87e 	bl	8015004 <AiPosi>
  HAL_Delay(1000);
 8014f08:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8014f0c:	f003 fa0e 	bl	801832c <HAL_Delay>
  Align_Set();
 8014f10:	f7ff ff7a 	bl	8014e08 <Align_Set>

  GainA  = 0;//0x20;
 8014f14:	4b16      	ldr	r3, [pc, #88]	; (8014f70 <Zero_Align+0x8c>)
 8014f16:	2200      	movs	r2, #0
 8014f18:	801a      	strh	r2, [r3, #0]
  KindA  = HV;
 8014f1a:	4b16      	ldr	r3, [pc, #88]	; (8014f74 <Zero_Align+0x90>)
 8014f1c:	2201      	movs	r2, #1
 8014f1e:	801a      	strh	r2, [r3, #0]
  StateA = GND;
 8014f20:	4b15      	ldr	r3, [pc, #84]	; (8014f78 <Zero_Align+0x94>)
 8014f22:	2200      	movs	r2, #0
 8014f24:	801a      	strh	r2, [r3, #0]
  BIOS_Ctrl(AiRANGE, HV+AC+GND);
 8014f26:	2101      	movs	r1, #1
 8014f28:	2007      	movs	r0, #7
 8014f2a:	f7f7 fa23 	bl	800c374 <BIOS_Ctrl>
  AiPosi(100);
 8014f2e:	2064      	movs	r0, #100	; 0x64
 8014f30:	f000 f868 	bl	8015004 <AiPosi>
  HAL_Delay(1000);
 8014f34:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8014f38:	f003 f9f8 	bl	801832c <HAL_Delay>
  Align_Set();
 8014f3c:	f7ff ff64 	bl	8014e08 <Align_Set>

  GainA  = 0;//0x20;
 8014f40:	4b0b      	ldr	r3, [pc, #44]	; (8014f70 <Zero_Align+0x8c>)
 8014f42:	2200      	movs	r2, #0
 8014f44:	801a      	strh	r2, [r3, #0]
  KindA  = LV;
 8014f46:	4b0b      	ldr	r3, [pc, #44]	; (8014f74 <Zero_Align+0x90>)
 8014f48:	2200      	movs	r2, #0
 8014f4a:	801a      	strh	r2, [r3, #0]
  StateA = GND;
 8014f4c:	4b0a      	ldr	r3, [pc, #40]	; (8014f78 <Zero_Align+0x94>)
 8014f4e:	2200      	movs	r2, #0
 8014f50:	801a      	strh	r2, [r3, #0]
  BIOS_Ctrl(AiRANGE, LV+AC+GND);
 8014f52:	2100      	movs	r1, #0
 8014f54:	2007      	movs	r0, #7
 8014f56:	f7f7 fa0d 	bl	800c374 <BIOS_Ctrl>
  AiPosi(100);
 8014f5a:	2064      	movs	r0, #100	; 0x64
 8014f5c:	f000 f852 	bl	8015004 <AiPosi>
  HAL_Delay(1000);
 8014f60:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8014f64:	f003 f9e2 	bl	801832c <HAL_Delay>
  Align_Set();
 8014f68:	f7ff ff4e 	bl	8014e08 <Align_Set>

}
 8014f6c:	bf00      	nop
 8014f6e:	bd80      	pop	{r7, pc}
 8014f70:	2000284a 	.word	0x2000284a
 8014f74:	20006886 	.word	0x20006886
 8014f78:	20002862 	.word	0x20002862

08014f7c <Analys>:

/*******************************************************************************
 Channel's error analys
*******************************************************************************/
void Analys(void)
{
 8014f7c:	b580      	push	{r7, lr}
 8014f7e:	b082      	sub	sp, #8
 8014f80:	af00      	add	r7, sp, #0
  unsigned i, SumA = 0;
 8014f82:	2300      	movs	r3, #0
 8014f84:	603b      	str	r3, [r7, #0]

  BIOS_Ctrl(SMPL_ST, DISABLE);
 8014f86:	2100      	movs	r1, #0
 8014f88:	2004      	movs	r0, #4
 8014f8a:	f7f7 f9f3 	bl	800c374 <BIOS_Ctrl>
  BIOS_Ctrl(SMPLTIM, 720-1);      // 72MHz/360 = 400kHz = 2.5uS
 8014f8e:	f240 21cf 	movw	r1, #719	; 0x2cf
 8014f92:	2005      	movs	r0, #5
 8014f94:	f7f7 f9ee 	bl	800c374 <BIOS_Ctrl>
  BIOS_Ctrl(SMPLNUM, 4096);       // 8192
 8014f98:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8014f9c:	2006      	movs	r0, #6
 8014f9e:	f7f7 f9e9 	bl	800c374 <BIOS_Ctrl>
  BIOS_Ctrl(SMPL_ST, ENABLE);
 8014fa2:	2101      	movs	r1, #1
 8014fa4:	2004      	movs	r0, #4
 8014fa6:	f7f7 f9e5 	bl	800c374 <BIOS_Ctrl>
  while((BIOS_Info(CHA_CNT) != 0)) {};
 8014faa:	bf00      	nop
 8014fac:	2000      	movs	r0, #0
 8014fae:	f7f7 f9cb 	bl	800c348 <BIOS_Info>
 8014fb2:	4603      	mov	r3, r0
 8014fb4:	2b00      	cmp	r3, #0
 8014fb6:	d1f9      	bne.n	8014fac <Analys+0x30>
  for(i=2; i<4000+2; i++){
 8014fb8:	2302      	movs	r3, #2
 8014fba:	607b      	str	r3, [r7, #4]
 8014fbc:	e00a      	b.n	8014fd4 <Analys+0x58>
    SumA += Sampl[i];
 8014fbe:	4a0e      	ldr	r2, [pc, #56]	; (8014ff8 <Analys+0x7c>)
 8014fc0:	687b      	ldr	r3, [r7, #4]
 8014fc2:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8014fc6:	461a      	mov	r2, r3
 8014fc8:	683b      	ldr	r3, [r7, #0]
 8014fca:	4413      	add	r3, r2
 8014fcc:	603b      	str	r3, [r7, #0]
  for(i=2; i<4000+2; i++){
 8014fce:	687b      	ldr	r3, [r7, #4]
 8014fd0:	3301      	adds	r3, #1
 8014fd2:	607b      	str	r3, [r7, #4]
 8014fd4:	687b      	ldr	r3, [r7, #4]
 8014fd6:	f640 72a1 	movw	r2, #4001	; 0xfa1
 8014fda:	4293      	cmp	r3, r2
 8014fdc:	d9ef      	bls.n	8014fbe <Analys+0x42>
  }
  Vavg = SumA/4000; // 4000
 8014fde:	683b      	ldr	r3, [r7, #0]
 8014fe0:	4a06      	ldr	r2, [pc, #24]	; (8014ffc <Analys+0x80>)
 8014fe2:	fba2 2303 	umull	r2, r3, r2, r3
 8014fe6:	0a1b      	lsrs	r3, r3, #8
 8014fe8:	b21a      	sxth	r2, r3
 8014fea:	4b05      	ldr	r3, [pc, #20]	; (8015000 <Analys+0x84>)
 8014fec:	801a      	strh	r2, [r3, #0]
}
 8014fee:	bf00      	nop
 8014ff0:	3708      	adds	r7, #8
 8014ff2:	46bd      	mov	sp, r7
 8014ff4:	bd80      	pop	{r7, pc}
 8014ff6:	bf00      	nop
 8014ff8:	20002870 	.word	0x20002870
 8014ffc:	10624dd3 	.word	0x10624dd3
 8015000:	20002858 	.word	0x20002858

08015004 <AiPosi>:

/*******************************************************************************
 DevCtrl:  offset
*******************************************************************************/
void AiPosi(char Val)
{
 8015004:	b580      	push	{r7, lr}
 8015006:	b082      	sub	sp, #8
 8015008:	af00      	add	r7, sp, #0
 801500a:	4603      	mov	r3, r0
 801500c:	71fb      	strb	r3, [r7, #7]
   BIOS_Ctrl(AOFFSET,((char)Val-100)*(KpA[KindA+(StateA?1:0)]/2)*GK[GainA]/KgA[KindA+(StateA?1:0)]+KpA[KindA+(StateA?1:0)]);
 801500e:	79fb      	ldrb	r3, [r7, #7]
 8015010:	f1a3 0264 	sub.w	r2, r3, #100	; 0x64
 8015014:	4b28      	ldr	r3, [pc, #160]	; (80150b8 <AiPosi+0xb4>)
 8015016:	6819      	ldr	r1, [r3, #0]
 8015018:	4b28      	ldr	r3, [pc, #160]	; (80150bc <AiPosi+0xb8>)
 801501a:	f9b3 3000 	ldrsh.w	r3, [r3]
 801501e:	4618      	mov	r0, r3
 8015020:	4b27      	ldr	r3, [pc, #156]	; (80150c0 <AiPosi+0xbc>)
 8015022:	f9b3 3000 	ldrsh.w	r3, [r3]
 8015026:	2b00      	cmp	r3, #0
 8015028:	bf14      	ite	ne
 801502a:	2301      	movne	r3, #1
 801502c:	2300      	moveq	r3, #0
 801502e:	b2db      	uxtb	r3, r3
 8015030:	4403      	add	r3, r0
 8015032:	005b      	lsls	r3, r3, #1
 8015034:	440b      	add	r3, r1
 8015036:	f9b3 3000 	ldrsh.w	r3, [r3]
 801503a:	0fd9      	lsrs	r1, r3, #31
 801503c:	440b      	add	r3, r1
 801503e:	105b      	asrs	r3, r3, #1
 8015040:	b21b      	sxth	r3, r3
 8015042:	fb03 f302 	mul.w	r3, r3, r2
 8015046:	4a1f      	ldr	r2, [pc, #124]	; (80150c4 <AiPosi+0xc0>)
 8015048:	f9b2 2000 	ldrsh.w	r2, [r2]
 801504c:	4611      	mov	r1, r2
 801504e:	4a1e      	ldr	r2, [pc, #120]	; (80150c8 <AiPosi+0xc4>)
 8015050:	5c52      	ldrb	r2, [r2, r1]
 8015052:	fb02 f303 	mul.w	r3, r2, r3
 8015056:	4a1d      	ldr	r2, [pc, #116]	; (80150cc <AiPosi+0xc8>)
 8015058:	6811      	ldr	r1, [r2, #0]
 801505a:	4a18      	ldr	r2, [pc, #96]	; (80150bc <AiPosi+0xb8>)
 801505c:	f9b2 2000 	ldrsh.w	r2, [r2]
 8015060:	4610      	mov	r0, r2
 8015062:	4a17      	ldr	r2, [pc, #92]	; (80150c0 <AiPosi+0xbc>)
 8015064:	f9b2 2000 	ldrsh.w	r2, [r2]
 8015068:	2a00      	cmp	r2, #0
 801506a:	bf14      	ite	ne
 801506c:	2201      	movne	r2, #1
 801506e:	2200      	moveq	r2, #0
 8015070:	b2d2      	uxtb	r2, r2
 8015072:	4402      	add	r2, r0
 8015074:	0052      	lsls	r2, r2, #1
 8015076:	440a      	add	r2, r1
 8015078:	f9b2 2000 	ldrsh.w	r2, [r2]
 801507c:	fb93 f3f2 	sdiv	r3, r3, r2
 8015080:	4a0d      	ldr	r2, [pc, #52]	; (80150b8 <AiPosi+0xb4>)
 8015082:	6811      	ldr	r1, [r2, #0]
 8015084:	4a0d      	ldr	r2, [pc, #52]	; (80150bc <AiPosi+0xb8>)
 8015086:	f9b2 2000 	ldrsh.w	r2, [r2]
 801508a:	4610      	mov	r0, r2
 801508c:	4a0c      	ldr	r2, [pc, #48]	; (80150c0 <AiPosi+0xbc>)
 801508e:	f9b2 2000 	ldrsh.w	r2, [r2]
 8015092:	2a00      	cmp	r2, #0
 8015094:	bf14      	ite	ne
 8015096:	2201      	movne	r2, #1
 8015098:	2200      	moveq	r2, #0
 801509a:	b2d2      	uxtb	r2, r2
 801509c:	4402      	add	r2, r0
 801509e:	0052      	lsls	r2, r2, #1
 80150a0:	440a      	add	r2, r1
 80150a2:	f9b2 2000 	ldrsh.w	r2, [r2]
 80150a6:	4413      	add	r3, r2
 80150a8:	4619      	mov	r1, r3
 80150aa:	2008      	movs	r0, #8
 80150ac:	f7f7 f962 	bl	800c374 <BIOS_Ctrl>
}
 80150b0:	bf00      	nop
 80150b2:	3708      	adds	r7, #8
 80150b4:	46bd      	mov	sp, r7
 80150b6:	bd80      	pop	{r7, pc}
 80150b8:	20000578 	.word	0x20000578
 80150bc:	20006886 	.word	0x20006886
 80150c0:	20002862 	.word	0x20002862
 80150c4:	2000284a 	.word	0x2000284a
 80150c8:	20000560 	.word	0x20000560
 80150cc:	2000057c 	.word	0x2000057c

080150d0 <WaveProcess>:
/*******************************************************************************
 WaveProcess: ���㴦���������������
*******************************************************************************/

void WaveProcess(void)
{
 80150d0:	b580      	push	{r7, lr}
 80150d2:	b094      	sub	sp, #80	; 0x50
 80150d4:	af00      	add	r7, sp, #0
  //------------------ ����Ԥ����,���ɽ���ָ��������ݵ���Ч�� -----------------//

  short* Ain  = (short*)&Sampl[2];
 80150d6:	4bb0      	ldr	r3, [pc, #704]	; (8015398 <WaveProcess+0x2c8>)
 80150d8:	617b      	str	r3, [r7, #20]

  int  Ak = (KgA[KindA+(StateA?1:0)]*4)/GK[GainA];
 80150da:	4bb0      	ldr	r3, [pc, #704]	; (801539c <WaveProcess+0x2cc>)
 80150dc:	681a      	ldr	r2, [r3, #0]
 80150de:	4bb0      	ldr	r3, [pc, #704]	; (80153a0 <WaveProcess+0x2d0>)
 80150e0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80150e4:	4619      	mov	r1, r3
 80150e6:	4baf      	ldr	r3, [pc, #700]	; (80153a4 <WaveProcess+0x2d4>)
 80150e8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80150ec:	2b00      	cmp	r3, #0
 80150ee:	bf14      	ite	ne
 80150f0:	2301      	movne	r3, #1
 80150f2:	2300      	moveq	r3, #0
 80150f4:	b2db      	uxtb	r3, r3
 80150f6:	440b      	add	r3, r1
 80150f8:	005b      	lsls	r3, r3, #1
 80150fa:	4413      	add	r3, r2
 80150fc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8015100:	009b      	lsls	r3, r3, #2
 8015102:	4aa9      	ldr	r2, [pc, #676]	; (80153a8 <WaveProcess+0x2d8>)
 8015104:	f9b2 2000 	ldrsh.w	r2, [r2]
 8015108:	4611      	mov	r1, r2
 801510a:	4aa8      	ldr	r2, [pc, #672]	; (80153ac <WaveProcess+0x2dc>)
 801510c:	5c52      	ldrb	r2, [r2, r1]
 801510e:	fb93 f3f2 	sdiv	r3, r3, r2
 8015112:	613b      	str	r3, [r7, #16]
  short  i, n, k, p = 0;
 8015114:	2300      	movs	r3, #0
 8015116:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48

  short  VtlA, ViA, VthA, VeA, VpA, VoA;            // VtA,

  short  DtA   = 0, TslA  =  0, TshA = 0, StA  = 2;
 801511a:	2300      	movs	r3, #0
 801511c:	87bb      	strh	r3, [r7, #60]	; 0x3c
 801511e:	2300      	movs	r3, #0
 8015120:	877b      	strh	r3, [r7, #58]	; 0x3a
 8015122:	2300      	movs	r3, #0
 8015124:	873b      	strh	r3, [r7, #56]	; 0x38
 8015126:	2302      	movs	r3, #2
 8015128:	86fb      	strh	r3, [r7, #54]	; 0x36
  short  FallA = 0, RiseA =  0, UpA  = 0, DnA  = 0;
 801512a:	2300      	movs	r3, #0
 801512c:	86bb      	strh	r3, [r7, #52]	; 0x34
 801512e:	2300      	movs	r3, #0
 8015130:	867b      	strh	r3, [r7, #50]	; 0x32
 8015132:	2300      	movs	r3, #0
 8015134:	863b      	strh	r3, [r7, #48]	; 0x30
 8015136:	2300      	movs	r3, #0
 8015138:	85fb      	strh	r3, [r7, #46]	; 0x2e
  int  MaxA  = 0, MinA  = ~0, SumA = 0, SsqA = 0; // ���/��Сֵ,�ۼ�/ƽ���� = 0
 801513a:	2300      	movs	r3, #0
 801513c:	62bb      	str	r3, [r7, #40]	; 0x28
 801513e:	f04f 33ff 	mov.w	r3, #4294967295
 8015142:	627b      	str	r3, [r7, #36]	; 0x24
 8015144:	2300      	movs	r3, #0
 8015146:	623b      	str	r3, [r7, #32]
 8015148:	2300      	movs	r3, #0
 801514a:	61fb      	str	r3, [r7, #28]

  short  Dpth  = DEPTH[List[SMPL_DPTH].Val] - 1;
 801514c:	4b98      	ldr	r3, [pc, #608]	; (80153b0 <WaveProcess+0x2e0>)
 801514e:	f9b3 304c 	ldrsh.w	r3, [r3, #76]	; 0x4c
 8015152:	461a      	mov	r2, r3
 8015154:	4b97      	ldr	r3, [pc, #604]	; (80153b4 <WaveProcess+0x2e4>)
 8015156:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 801515a:	b29b      	uxth	r3, r3
 801515c:	3b01      	subs	r3, #1
 801515e:	b29b      	uxth	r3, r3
 8015160:	837b      	strh	r3, [r7, #26]
  short  Tp    = PRE_SMPL+1, Tm = List[TR_MODE].Val & 1;
 8015162:	2397      	movs	r3, #151	; 0x97
 8015164:	81fb      	strh	r3, [r7, #14]
 8015166:	4b92      	ldr	r3, [pc, #584]	; (80153b0 <WaveProcess+0x2e0>)
 8015168:	f9b3 3074 	ldrsh.w	r3, [r3, #116]	; 0x74
 801516c:	f003 0301 	and.w	r3, r3, #1
 8015170:	81bb      	strh	r3, [r7, #12]
  short  Ks    = KS[List[TIM_BASE].Val],  Sm = List[SYNCMODE].Val;
 8015172:	4b8f      	ldr	r3, [pc, #572]	; (80153b0 <WaveProcess+0x2e0>)
 8015174:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8015178:	461a      	mov	r2, r3
 801517a:	4b8f      	ldr	r3, [pc, #572]	; (80153b8 <WaveProcess+0x2e8>)
 801517c:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8015180:	817b      	strh	r3, [r7, #10]
 8015182:	4b8b      	ldr	r3, [pc, #556]	; (80153b0 <WaveProcess+0x2e0>)
 8015184:	f8b3 306c 	ldrh.w	r3, [r3, #108]	; 0x6c
 8015188:	813b      	strh	r3, [r7, #8]
  char   Ext = List[EXT_REFN].Val;
 801518a:	4b89      	ldr	r3, [pc, #548]	; (80153b0 <WaveProcess+0x2e0>)
 801518c:	f9b3 30d4 	ldrsh.w	r3, [r3, #212]	; 0xd4
 8015190:	71fb      	strb	r3, [r7, #7]

//---------------------- ��������Ԥ����,����ʵ�ʴ�����ֵ ---------------------//
  if(Status == STOP)
 8015192:	4b8a      	ldr	r3, [pc, #552]	; (80153bc <WaveProcess+0x2ec>)
 8015194:	f9b3 3000 	ldrsh.w	r3, [r3]
 8015198:	2b01      	cmp	r3, #1
 801519a:	d13c      	bne.n	8015216 <WaveProcess+0x146>
  {
    VtlA  = (((Tri_Posi + Ch1_Posi - List[SENSITIVE].Val-100)<<12)/Ak)+2048;
 801519c:	4b88      	ldr	r3, [pc, #544]	; (80153c0 <WaveProcess+0x2f0>)
 801519e:	f9b3 3000 	ldrsh.w	r3, [r3]
 80151a2:	461a      	mov	r2, r3
 80151a4:	4b87      	ldr	r3, [pc, #540]	; (80153c4 <WaveProcess+0x2f4>)
 80151a6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80151aa:	4413      	add	r3, r2
 80151ac:	4a80      	ldr	r2, [pc, #512]	; (80153b0 <WaveProcess+0x2e0>)
 80151ae:	f9b2 208c 	ldrsh.w	r2, [r2, #140]	; 0x8c
 80151b2:	1a9b      	subs	r3, r3, r2
 80151b4:	3b64      	subs	r3, #100	; 0x64
 80151b6:	031a      	lsls	r2, r3, #12
 80151b8:	693b      	ldr	r3, [r7, #16]
 80151ba:	fb92 f3f3 	sdiv	r3, r2, r3
 80151be:	b29b      	uxth	r3, r3
 80151c0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80151c4:	b29b      	uxth	r3, r3
 80151c6:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
    VthA  = (((Tri_Posi + Ch1_Posi + List[SENSITIVE].Val-100)<<12)/Ak)+2048;
 80151ca:	4b7d      	ldr	r3, [pc, #500]	; (80153c0 <WaveProcess+0x2f0>)
 80151cc:	f9b3 3000 	ldrsh.w	r3, [r3]
 80151d0:	461a      	mov	r2, r3
 80151d2:	4b7c      	ldr	r3, [pc, #496]	; (80153c4 <WaveProcess+0x2f4>)
 80151d4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80151d8:	4413      	add	r3, r2
 80151da:	4a75      	ldr	r2, [pc, #468]	; (80153b0 <WaveProcess+0x2e0>)
 80151dc:	f9b2 208c 	ldrsh.w	r2, [r2, #140]	; 0x8c
 80151e0:	4413      	add	r3, r2
 80151e2:	3b64      	subs	r3, #100	; 0x64
 80151e4:	031a      	lsls	r2, r3, #12
 80151e6:	693b      	ldr	r3, [r7, #16]
 80151e8:	fb92 f3f3 	sdiv	r3, r2, r3
 80151ec:	b29b      	uxth	r3, r3
 80151ee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80151f2:	b29b      	uxth	r3, r3
 80151f4:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
    VpA   = ((((List[V0_POSI].Val)       -100)<<12)/Ak)+2048; //??
 80151f8:	4b6d      	ldr	r3, [pc, #436]	; (80153b0 <WaveProcess+0x2e0>)
 80151fa:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 80151fe:	3b64      	subs	r3, #100	; 0x64
 8015200:	031a      	lsls	r2, r3, #12
 8015202:	693b      	ldr	r3, [r7, #16]
 8015204:	fb92 f3f3 	sdiv	r3, r2, r3
 8015208:	b29b      	uxth	r3, r3
 801520a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801520e:	b29b      	uxth	r3, r3
 8015210:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8015214:	e03b      	b.n	801528e <WaveProcess+0x1be>
  }
  else
  {
    VtlA  = (((List[THRESHOLD].Val + List[V0_POSI].Val - List[SENSITIVE].Val-100)<<12)/Ak)+2048;
 8015216:	4b66      	ldr	r3, [pc, #408]	; (80153b0 <WaveProcess+0x2e0>)
 8015218:	f9b3 3084 	ldrsh.w	r3, [r3, #132]	; 0x84
 801521c:	461a      	mov	r2, r3
 801521e:	4b64      	ldr	r3, [pc, #400]	; (80153b0 <WaveProcess+0x2e0>)
 8015220:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 8015224:	4413      	add	r3, r2
 8015226:	4a62      	ldr	r2, [pc, #392]	; (80153b0 <WaveProcess+0x2e0>)
 8015228:	f9b2 208c 	ldrsh.w	r2, [r2, #140]	; 0x8c
 801522c:	1a9b      	subs	r3, r3, r2
 801522e:	3b64      	subs	r3, #100	; 0x64
 8015230:	031a      	lsls	r2, r3, #12
 8015232:	693b      	ldr	r3, [r7, #16]
 8015234:	fb92 f3f3 	sdiv	r3, r2, r3
 8015238:	b29b      	uxth	r3, r3
 801523a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801523e:	b29b      	uxth	r3, r3
 8015240:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
    VthA  = (((List[THRESHOLD].Val + List[V0_POSI].Val + List[SENSITIVE].Val-100)<<12)/Ak)+2048;
 8015244:	4b5a      	ldr	r3, [pc, #360]	; (80153b0 <WaveProcess+0x2e0>)
 8015246:	f9b3 3084 	ldrsh.w	r3, [r3, #132]	; 0x84
 801524a:	461a      	mov	r2, r3
 801524c:	4b58      	ldr	r3, [pc, #352]	; (80153b0 <WaveProcess+0x2e0>)
 801524e:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 8015252:	4413      	add	r3, r2
 8015254:	4a56      	ldr	r2, [pc, #344]	; (80153b0 <WaveProcess+0x2e0>)
 8015256:	f9b2 208c 	ldrsh.w	r2, [r2, #140]	; 0x8c
 801525a:	4413      	add	r3, r2
 801525c:	3b64      	subs	r3, #100	; 0x64
 801525e:	031a      	lsls	r2, r3, #12
 8015260:	693b      	ldr	r3, [r7, #16]
 8015262:	fb92 f3f3 	sdiv	r3, r2, r3
 8015266:	b29b      	uxth	r3, r3
 8015268:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801526c:	b29b      	uxth	r3, r3
 801526e:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
    VpA   = ((((List[V0_POSI].Val)       -100)<<12)/Ak)+2048;
 8015272:	4b4f      	ldr	r3, [pc, #316]	; (80153b0 <WaveProcess+0x2e0>)
 8015274:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 8015278:	3b64      	subs	r3, #100	; 0x64
 801527a:	031a      	lsls	r2, r3, #12
 801527c:	693b      	ldr	r3, [r7, #16]
 801527e:	fb92 f3f3 	sdiv	r3, r2, r3
 8015282:	b29b      	uxth	r3, r3
 8015284:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8015288:	b29b      	uxth	r3, r3
 801528a:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  }
//-------------------------- ��������ͳ������� ------------------------------//


  if(((List[SYNCMODE].Val == NONE)||(List[SYNCMODE].Val == SCAN))
 801528e:	4b48      	ldr	r3, [pc, #288]	; (80153b0 <WaveProcess+0x2e0>)
 8015290:	f9b3 306c 	ldrsh.w	r3, [r3, #108]	; 0x6c
 8015294:	2b05      	cmp	r3, #5
 8015296:	d004      	beq.n	80152a2 <WaveProcess+0x1d2>
 8015298:	4b45      	ldr	r3, [pc, #276]	; (80153b0 <WaveProcess+0x2e0>)
 801529a:	f9b3 306c 	ldrsh.w	r3, [r3, #108]	; 0x6c
 801529e:	2b01      	cmp	r3, #1
 80152a0:	d10b      	bne.n	80152ba <WaveProcess+0x1ea>
     &&(List[TIM_BASE].Val>11))
 80152a2:	4b43      	ldr	r3, [pc, #268]	; (80153b0 <WaveProcess+0x2e0>)
 80152a4:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 80152a8:	2b0b      	cmp	r3, #11
 80152aa:	dd06      	ble.n	80152ba <WaveProcess+0x1ea>
  {
    Dpth = 302;
 80152ac:	f44f 7397 	mov.w	r3, #302	; 0x12e
 80152b0:	837b      	strh	r3, [r7, #26]
    List[VIEWPOSI].Val = 0;
 80152b2:	4b3f      	ldr	r3, [pc, #252]	; (80153b0 <WaveProcess+0x2e0>)
 80152b4:	2200      	movs	r2, #0
 80152b6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  for(i=0; i<Dpth; i++)
 80152ba:	2300      	movs	r3, #0
 80152bc:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 80152c0:	e0ad      	b.n	801541e <WaveProcess+0x34e>
  {
	n = __HAL_DMA_GET_COUNTER(&hdma_adc1);//    DMA1_Channel1->CNDTR;              //DMA_CH_A->CNDTR; //DMA1_CNDTR1
 80152c2:	4b41      	ldr	r3, [pc, #260]	; (80153c8 <WaveProcess+0x2f8>)
 80152c4:	681b      	ldr	r3, [r3, #0]
 80152c6:	685b      	ldr	r3, [r3, #4]
 80152c8:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
    if(i >= (Dpth-n)) break;      // ����һ���ڵȴ�A/Dת�����
 80152cc:	f9b7 204e 	ldrsh.w	r2, [r7, #78]	; 0x4e
 80152d0:	f9b7 101a 	ldrsh.w	r1, [r7, #26]
 80152d4:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 80152d8:	1acb      	subs	r3, r1, r3
 80152da:	429a      	cmp	r2, r3
 80152dc:	f280 80a7 	bge.w	801542e <WaveProcess+0x35e>
    ViA = Ain[i];
 80152e0:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 80152e4:	005b      	lsls	r3, r3, #1
 80152e6:	697a      	ldr	r2, [r7, #20]
 80152e8:	4413      	add	r3, r2
 80152ea:	881b      	ldrh	r3, [r3, #0]
 80152ec:	80bb      	strh	r3, [r7, #4]

    if(MaxA < ViA) MaxA = ViA;    // ͳ�����ֵ
 80152ee:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80152f2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80152f4:	429a      	cmp	r2, r3
 80152f6:	da02      	bge.n	80152fe <WaveProcess+0x22e>
 80152f8:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80152fc:	62bb      	str	r3, [r7, #40]	; 0x28
    if(MinA > ViA) MinA = ViA;    // ͳ����Сֵ
 80152fe:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8015302:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8015304:	429a      	cmp	r2, r3
 8015306:	dd02      	ble.n	801530e <WaveProcess+0x23e>
 8015308:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 801530c:	627b      	str	r3, [r7, #36]	; 0x24
    SumA += ViA;                  // ͳ���ۼӺ�
 801530e:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8015312:	6a3a      	ldr	r2, [r7, #32]
 8015314:	4413      	add	r3, r2
 8015316:	623b      	str	r3, [r7, #32]
    SsqA +=(ViA-VpA)*(ViA-VpA);   // ͳ��ƽ����
 8015318:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 801531c:	f9b7 3040 	ldrsh.w	r3, [r7, #64]	; 0x40
 8015320:	1ad3      	subs	r3, r2, r3
 8015322:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8015326:	f9b7 2040 	ldrsh.w	r2, [r7, #64]	; 0x40
 801532a:	1a8a      	subs	r2, r1, r2
 801532c:	fb02 f303 	mul.w	r3, r2, r3
 8015330:	69fa      	ldr	r2, [r7, #28]
 8015332:	4413      	add	r3, r2
 8015334:	61fb      	str	r3, [r7, #28]


    if(StA == 2) DtA = 0;                  // ����CH_A�׸�������ǰ��ʱ���ۼ�
 8015336:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 801533a:	2b02      	cmp	r3, #2
 801533c:	d102      	bne.n	8015344 <WaveProcess+0x274>
 801533e:	2300      	movs	r3, #0
 8015340:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8015342:	e005      	b.n	8015350 <WaveProcess+0x280>
    else         DtA++;
 8015344:	f9b7 303c 	ldrsh.w	r3, [r7, #60]	; 0x3c
 8015348:	b29b      	uxth	r3, r3
 801534a:	3301      	adds	r3, #1
 801534c:	b29b      	uxth	r3, r3
 801534e:	87bb      	strh	r3, [r7, #60]	; 0x3c

    if(ViA > VthA){                        // ViA ������ֵ����
 8015350:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8015354:	f9b7 3044 	ldrsh.w	r3, [r7, #68]	; 0x44
 8015358:	429a      	cmp	r2, r3
 801535a:	dd37      	ble.n	80153cc <WaveProcess+0x2fc>
      if(StA == 0){
 801535c:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 8015360:	2b00      	cmp	r3, #0
 8015362:	d115      	bne.n	8015390 <WaveProcess+0x2c0>
        TslA += DtA; DtA = 0; RiseA++;     // CH_A��λʱ���ۼƣ��������ۼ�
 8015364:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8015366:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8015368:	4413      	add	r3, r2
 801536a:	b29b      	uxth	r3, r3
 801536c:	877b      	strh	r3, [r7, #58]	; 0x3a
 801536e:	2300      	movs	r3, #0
 8015370:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8015372:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 8015376:	b29b      	uxth	r3, r3
 8015378:	3301      	adds	r3, #1
 801537a:	b29b      	uxth	r3, r3
 801537c:	867b      	strh	r3, [r7, #50]	; 0x32
        if(UpA < Tp) UpA = i;              // ��¼Ԥ������CH_A��һ��������λ��
 801537e:	f9b7 2030 	ldrsh.w	r2, [r7, #48]	; 0x30
 8015382:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8015386:	429a      	cmp	r2, r3
 8015388:	da02      	bge.n	8015390 <WaveProcess+0x2c0>
 801538a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 801538e:	863b      	strh	r3, [r7, #48]	; 0x30
      }
      StA = 1;                             // ��ǰCH_A״̬��Ϊ��λ
 8015390:	2301      	movs	r3, #1
 8015392:	86fb      	strh	r3, [r7, #54]	; 0x36
 8015394:	e03c      	b.n	8015410 <WaveProcess+0x340>
 8015396:	bf00      	nop
 8015398:	20002874 	.word	0x20002874
 801539c:	2000057c 	.word	0x2000057c
 80153a0:	20006886 	.word	0x20006886
 80153a4:	20002862 	.word	0x20002862
 80153a8:	2000284a 	.word	0x2000284a
 80153ac:	20000560 	.word	0x20000560
 80153b0:	20000298 	.word	0x20000298
 80153b4:	08002270 	.word	0x08002270
 80153b8:	08002278 	.word	0x08002278
 80153bc:	200007a0 	.word	0x200007a0
 80153c0:	20002860 	.word	0x20002860
 80153c4:	20006884 	.word	0x20006884
 80153c8:	20006b0c 	.word	0x20006b0c
    } else if(ViA < VtlA){                 // ViA ������ֵ����
 80153cc:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 80153d0:	f9b7 3046 	ldrsh.w	r3, [r7, #70]	; 0x46
 80153d4:	429a      	cmp	r2, r3
 80153d6:	da1b      	bge.n	8015410 <WaveProcess+0x340>
      if(StA == 1){
 80153d8:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 80153dc:	2b01      	cmp	r3, #1
 80153de:	d115      	bne.n	801540c <WaveProcess+0x33c>
        TshA += DtA; DtA = 0; FallA++;     // CH_A��λʱ���ۼƣ��½����ۼ�
 80153e0:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 80153e2:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80153e4:	4413      	add	r3, r2
 80153e6:	b29b      	uxth	r3, r3
 80153e8:	873b      	strh	r3, [r7, #56]	; 0x38
 80153ea:	2300      	movs	r3, #0
 80153ec:	87bb      	strh	r3, [r7, #60]	; 0x3c
 80153ee:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	; 0x34
 80153f2:	b29b      	uxth	r3, r3
 80153f4:	3301      	adds	r3, #1
 80153f6:	b29b      	uxth	r3, r3
 80153f8:	86bb      	strh	r3, [r7, #52]	; 0x34
        if(DnA < Tp) DnA = i;              // ��¼Ԥ������CH_A��һ���½���λ��
 80153fa:	f9b7 202e 	ldrsh.w	r2, [r7, #46]	; 0x2e
 80153fe:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8015402:	429a      	cmp	r2, r3
 8015404:	da02      	bge.n	801540c <WaveProcess+0x33c>
 8015406:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 801540a:	85fb      	strh	r3, [r7, #46]	; 0x2e
      }
      StA = 0;                             // ��ǰCH_A״̬��Ϊ��λ
 801540c:	2300      	movs	r3, #0
 801540e:	86fb      	strh	r3, [r7, #54]	; 0x36
  for(i=0; i<Dpth; i++)
 8015410:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 8015414:	b29b      	uxth	r3, r3
 8015416:	3301      	adds	r3, #1
 8015418:	b29b      	uxth	r3, r3
 801541a:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 801541e:	f9b7 204e 	ldrsh.w	r2, [r7, #78]	; 0x4e
 8015422:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8015426:	429a      	cmp	r2, r3
 8015428:	f6ff af4b 	blt.w	80152c2 <WaveProcess+0x1f2>
 801542c:	e000      	b.n	8015430 <WaveProcess+0x360>
    if(i >= (Dpth-n)) break;      // ����һ���ڵȴ�A/Dת�����
 801542e:	bf00      	nop
    }
  }
  if(n == 0)
 8015430:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 8015434:	2b00      	cmp	r3, #0
 8015436:	d14f      	bne.n	80154d8 <WaveProcess+0x408>
  {                              // ����ȫ����ɺ��������ֵ i == Dpth
    Vmax = MaxA; Vmin = MinA; Vavg = SumA/i; Vssq = SsqA/(i+1);
 8015438:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801543a:	b21a      	sxth	r2, r3
 801543c:	4b9a      	ldr	r3, [pc, #616]	; (80156a8 <WaveProcess+0x5d8>)
 801543e:	801a      	strh	r2, [r3, #0]
 8015440:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015442:	b21a      	sxth	r2, r3
 8015444:	4b99      	ldr	r3, [pc, #612]	; (80156ac <WaveProcess+0x5dc>)
 8015446:	801a      	strh	r2, [r3, #0]
 8015448:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 801544c:	6a3a      	ldr	r2, [r7, #32]
 801544e:	fb92 f3f3 	sdiv	r3, r2, r3
 8015452:	b21a      	sxth	r2, r3
 8015454:	4b96      	ldr	r3, [pc, #600]	; (80156b0 <WaveProcess+0x5e0>)
 8015456:	801a      	strh	r2, [r3, #0]
 8015458:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 801545c:	3301      	adds	r3, #1
 801545e:	69fa      	ldr	r2, [r7, #28]
 8015460:	fb92 f3f3 	sdiv	r3, r2, r3
 8015464:	4a93      	ldr	r2, [pc, #588]	; (80156b4 <WaveProcess+0x5e4>)
 8015466:	6013      	str	r3, [r2, #0]
    Vrms = (Sqrt32(Vssq)); Vmid = (Vmax + Vmin)/2; Vpp = Vmax - Vmin;
 8015468:	4b92      	ldr	r3, [pc, #584]	; (80156b4 <WaveProcess+0x5e4>)
 801546a:	681b      	ldr	r3, [r3, #0]
 801546c:	4618      	mov	r0, r3
 801546e:	f7fc fbf5 	bl	8011c5c <Sqrt32>
 8015472:	4603      	mov	r3, r0
 8015474:	461a      	mov	r2, r3
 8015476:	4b90      	ldr	r3, [pc, #576]	; (80156b8 <WaveProcess+0x5e8>)
 8015478:	601a      	str	r2, [r3, #0]
 801547a:	4b8b      	ldr	r3, [pc, #556]	; (80156a8 <WaveProcess+0x5d8>)
 801547c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8015480:	461a      	mov	r2, r3
 8015482:	4b8a      	ldr	r3, [pc, #552]	; (80156ac <WaveProcess+0x5dc>)
 8015484:	f9b3 3000 	ldrsh.w	r3, [r3]
 8015488:	4413      	add	r3, r2
 801548a:	0fda      	lsrs	r2, r3, #31
 801548c:	4413      	add	r3, r2
 801548e:	105b      	asrs	r3, r3, #1
 8015490:	b21a      	sxth	r2, r3
 8015492:	4b8a      	ldr	r3, [pc, #552]	; (80156bc <WaveProcess+0x5ec>)
 8015494:	801a      	strh	r2, [r3, #0]
 8015496:	4b84      	ldr	r3, [pc, #528]	; (80156a8 <WaveProcess+0x5d8>)
 8015498:	f9b3 3000 	ldrsh.w	r3, [r3]
 801549c:	461a      	mov	r2, r3
 801549e:	4b83      	ldr	r3, [pc, #524]	; (80156ac <WaveProcess+0x5dc>)
 80154a0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80154a4:	1ad3      	subs	r3, r2, r3
 80154a6:	4a86      	ldr	r2, [pc, #536]	; (80156c0 <WaveProcess+0x5f0>)
 80154a8:	6013      	str	r3, [r2, #0]
    HighT = TshA/FallA; LowT = TslA/RiseA; Edge = FallA+ RiseA;
 80154aa:	f9b7 2038 	ldrsh.w	r2, [r7, #56]	; 0x38
 80154ae:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	; 0x34
 80154b2:	fb92 f3f3 	sdiv	r3, r2, r3
 80154b6:	4a83      	ldr	r2, [pc, #524]	; (80156c4 <WaveProcess+0x5f4>)
 80154b8:	6013      	str	r3, [r2, #0]
 80154ba:	f9b7 203a 	ldrsh.w	r2, [r7, #58]	; 0x3a
 80154be:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 80154c2:	fb92 f3f3 	sdiv	r3, r2, r3
 80154c6:	4a80      	ldr	r2, [pc, #512]	; (80156c8 <WaveProcess+0x5f8>)
 80154c8:	6013      	str	r3, [r2, #0]
 80154ca:	f9b7 2034 	ldrsh.w	r2, [r7, #52]	; 0x34
 80154ce:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 80154d2:	4413      	add	r3, r2
 80154d4:	4a7d      	ldr	r2, [pc, #500]	; (80156cc <WaveProcess+0x5fc>)
 80154d6:	6013      	str	r3, [r2, #0]

  }
//--------------------------- ���ɲ�����ʾ���� -------------------------------//

  if(((Sm == NONE)||(Sm == SCAN))){
 80154d8:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 80154dc:	2b05      	cmp	r3, #5
 80154de:	d003      	beq.n	80154e8 <WaveProcess+0x418>
 80154e0:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 80154e4:	2b01      	cmp	r3, #1
 80154e6:	d12f      	bne.n	8015548 <WaveProcess+0x478>
    if(List[TIM_BASE].Val > 11)
 80154e8:	4b79      	ldr	r3, [pc, #484]	; (80156d0 <WaveProcess+0x600>)
 80154ea:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 80154ee:	2b0b      	cmp	r3, #11
 80154f0:	dd03      	ble.n	80154fa <WaveProcess+0x42a>
      k = 1;                         // NONE SCAN ģʽ��ǿ�ƴ���
 80154f2:	2301      	movs	r3, #1
 80154f4:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
    if(List[TIM_BASE].Val > 11)
 80154f8:	e033      	b.n	8015562 <WaveProcess+0x492>
    else
    {
      k =((Tm == RISE)? UpA : DnA)-Tp; // k:Ԥ�����󴥷���λ��
 80154fa:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80154fe:	2b00      	cmp	r3, #0
 8015500:	d101      	bne.n	8015506 <WaveProcess+0x436>
 8015502:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8015504:	e000      	b.n	8015508 <WaveProcess+0x438>
 8015506:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8015508:	89fa      	ldrh	r2, [r7, #14]
 801550a:	1a9b      	subs	r3, r3, r2
 801550c:	b29b      	uxth	r3, r3
 801550e:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

      if((Sm == SCAN)&&(k < 0)){ // AUTO ģʽ���޴���ʱ
 8015512:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8015516:	2b01      	cmp	r3, #1
 8015518:	d123      	bne.n	8015562 <WaveProcess+0x492>
 801551a:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 801551e:	2b00      	cmp	r3, #0
 8015520:	da1f      	bge.n	8015562 <WaveProcess+0x492>
        if(i > Dpth/4) k = 1;    // ������1/4����ǿ�ƴ���
 8015522:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8015526:	2b00      	cmp	r3, #0
 8015528:	da00      	bge.n	801552c <WaveProcess+0x45c>
 801552a:	3303      	adds	r3, #3
 801552c:	109b      	asrs	r3, r3, #2
 801552e:	b21b      	sxth	r3, r3
 8015530:	f9b7 204e 	ldrsh.w	r2, [r7, #78]	; 0x4e
 8015534:	429a      	cmp	r2, r3
 8015536:	dd03      	ble.n	8015540 <WaveProcess+0x470>
 8015538:	2301      	movs	r3, #1
 801553a:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
    if(List[TIM_BASE].Val > 11)
 801553e:	e010      	b.n	8015562 <WaveProcess+0x492>
        else           k = 0;    // ������1/4��ǰ����ʾ
 8015540:	2300      	movs	r3, #0
 8015542:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
    if(List[TIM_BASE].Val > 11)
 8015546:	e00c      	b.n	8015562 <WaveProcess+0x492>
      }

    }
  } else
    k =((Tm == RISE)? UpA : DnA)-Tp; // k:Ԥ�����󴥷���λ��
 8015548:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 801554c:	2b00      	cmp	r3, #0
 801554e:	d101      	bne.n	8015554 <WaveProcess+0x484>
 8015550:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8015552:	e000      	b.n	8015556 <WaveProcess+0x486>
 8015554:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8015556:	89fa      	ldrh	r2, [r7, #14]
 8015558:	1a9b      	subs	r3, r3, r2
 801555a:	b29b      	uxth	r3, r3
 801555c:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8015560:	e000      	b.n	8015564 <WaveProcess+0x494>
    if(List[TIM_BASE].Val > 11)
 8015562:	bf00      	nop

  if((!n)&&(Sm == SINGL)&&(k > 0)){ // SNGL ģʽ���д���ʱ�����������Զ�ֹͣ
 8015564:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 8015568:	2b00      	cmp	r3, #0
 801556a:	d10c      	bne.n	8015586 <WaveProcess+0x4b6>
 801556c:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8015570:	2b04      	cmp	r3, #4
 8015572:	d108      	bne.n	8015586 <WaveProcess+0x4b6>
 8015574:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 8015578:	2b00      	cmp	r3, #0
 801557a:	dd04      	ble.n	8015586 <WaveProcess+0x4b6>
    Status = STOP;
 801557c:	4b55      	ldr	r3, [pc, #340]	; (80156d4 <WaveProcess+0x604>)
 801557e:	2201      	movs	r2, #1
 8015580:	801a      	strh	r2, [r3, #0]
    DispStatus();
 8015582:	f7fe ff21 	bl	80143c8 <DispStatus>
  }

  if((Sm == AUTO)&&(k < 0)){ // AUTO ģʽ���޴���ʱ
 8015586:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 801558a:	2b02      	cmp	r3, #2
 801558c:	d115      	bne.n	80155ba <WaveProcess+0x4ea>
 801558e:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 8015592:	2b00      	cmp	r3, #0
 8015594:	da11      	bge.n	80155ba <WaveProcess+0x4ea>
    if(i > Dpth/4) k = 1;    // ������1/4����ǿ�ƴ���
 8015596:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 801559a:	2b00      	cmp	r3, #0
 801559c:	da00      	bge.n	80155a0 <WaveProcess+0x4d0>
 801559e:	3303      	adds	r3, #3
 80155a0:	109b      	asrs	r3, r3, #2
 80155a2:	b21b      	sxth	r3, r3
 80155a4:	f9b7 204e 	ldrsh.w	r2, [r7, #78]	; 0x4e
 80155a8:	429a      	cmp	r2, r3
 80155aa:	dd03      	ble.n	80155b4 <WaveProcess+0x4e4>
 80155ac:	2301      	movs	r3, #1
 80155ae:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 80155b2:	e002      	b.n	80155ba <WaveProcess+0x4ea>
    else           k = 0;    // ������1/4��ǰ����ʾ
 80155b4:	2300      	movs	r3, #0
 80155b6:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
  }

  Trigger_k = k;
 80155ba:	4a47      	ldr	r2, [pc, #284]	; (80156d8 <WaveProcess+0x608>)
 80155bc:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80155c0:	8013      	strh	r3, [r2, #0]

  if(Trigger_k>0)NORM_Kflag = 1;
 80155c2:	4b45      	ldr	r3, [pc, #276]	; (80156d8 <WaveProcess+0x608>)
 80155c4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80155c8:	2b00      	cmp	r3, #0
 80155ca:	dd02      	ble.n	80155d2 <WaveProcess+0x502>
 80155cc:	4b43      	ldr	r3, [pc, #268]	; (80156dc <WaveProcess+0x60c>)
 80155ce:	2201      	movs	r2, #1
 80155d0:	701a      	strb	r2, [r3, #0]

  if((SNGL_Kflag)&&(Status == STOP))
 80155d2:	4b43      	ldr	r3, [pc, #268]	; (80156e0 <WaveProcess+0x610>)
 80155d4:	781b      	ldrb	r3, [r3, #0]
 80155d6:	2b00      	cmp	r3, #0
 80155d8:	d016      	beq.n	8015608 <WaveProcess+0x538>
 80155da:	4b3e      	ldr	r3, [pc, #248]	; (80156d4 <WaveProcess+0x604>)
 80155dc:	f9b3 3000 	ldrsh.w	r3, [r3]
 80155e0:	2b01      	cmp	r3, #1
 80155e2:	d111      	bne.n	8015608 <WaveProcess+0x538>
  {
    Ch1_Posi = List[V0_POSI].Val;
 80155e4:	4b3a      	ldr	r3, [pc, #232]	; (80156d0 <WaveProcess+0x600>)
 80155e6:	f9b3 201c 	ldrsh.w	r2, [r3, #28]
 80155ea:	4b3e      	ldr	r3, [pc, #248]	; (80156e4 <WaveProcess+0x614>)
 80155ec:	801a      	strh	r2, [r3, #0]
    Ch2_Posi = List[EXT_POSI].Val;
 80155ee:	4b38      	ldr	r3, [pc, #224]	; (80156d0 <WaveProcess+0x600>)
 80155f0:	f9b3 20dc 	ldrsh.w	r2, [r3, #220]	; 0xdc
 80155f4:	4b3c      	ldr	r3, [pc, #240]	; (80156e8 <WaveProcess+0x618>)
 80155f6:	801a      	strh	r2, [r3, #0]
    Tri_Posi = List[THRESHOLD].Val;
 80155f8:	4b35      	ldr	r3, [pc, #212]	; (80156d0 <WaveProcess+0x600>)
 80155fa:	f9b3 2084 	ldrsh.w	r2, [r3, #132]	; 0x84
 80155fe:	4b3b      	ldr	r3, [pc, #236]	; (80156ec <WaveProcess+0x61c>)
 8015600:	801a      	strh	r2, [r3, #0]
    SNGL_Kflag = 0;
 8015602:	4b37      	ldr	r3, [pc, #220]	; (80156e0 <WaveProcess+0x610>)
 8015604:	2200      	movs	r2, #0
 8015606:	701a      	strb	r2, [r3, #0]
  }

  if(k > 0)
 8015608:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 801560c:	2b00      	cmp	r3, #0
 801560e:	f340 8104 	ble.w	801581a <WaveProcess+0x74a>
  {                                               // �д���ʱ����ʾ����
    k += List[VIEWPOSI].Val+((1024-Ks)*Tp+512)/1024; // ���β�ֵ���
 8015612:	4b2f      	ldr	r3, [pc, #188]	; (80156d0 <WaveProcess+0x600>)
 8015614:	f9b3 3044 	ldrsh.w	r3, [r3, #68]	; 0x44
 8015618:	b29a      	uxth	r2, r3
 801561a:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 801561e:	f5c3 6380 	rsb	r3, r3, #1024	; 0x400
 8015622:	f9b7 100e 	ldrsh.w	r1, [r7, #14]
 8015626:	fb01 f303 	mul.w	r3, r1, r3
 801562a:	f503 7300 	add.w	r3, r3, #512	; 0x200
 801562e:	2b00      	cmp	r3, #0
 8015630:	da01      	bge.n	8015636 <WaveProcess+0x566>
 8015632:	f203 33ff 	addw	r3, r3, #1023	; 0x3ff
 8015636:	129b      	asrs	r3, r3, #10
 8015638:	b29b      	uxth	r3, r3
 801563a:	4413      	add	r3, r2
 801563c:	b29a      	uxth	r2, r3
 801563e:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8015642:	4413      	add	r3, r2
 8015644:	b29b      	uxth	r3, r3
 8015646:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
    VeA =(((Ain[k]-2048)*Ak)>>12)+100;
 801564a:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 801564e:	005b      	lsls	r3, r3, #1
 8015650:	697a      	ldr	r2, [r7, #20]
 8015652:	4413      	add	r3, r2
 8015654:	f9b3 3000 	ldrsh.w	r3, [r3]
 8015658:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 801565c:	693a      	ldr	r2, [r7, #16]
 801565e:	fb02 f303 	mul.w	r3, r2, r3
 8015662:	131b      	asrs	r3, r3, #12
 8015664:	b29b      	uxth	r3, r3
 8015666:	3364      	adds	r3, #100	; 0x64
 8015668:	b29b      	uxth	r3, r3
 801566a:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

    for(n=0; n<300;)
 801566e:	2300      	movs	r3, #0
 8015670:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 8015674:	e0c7      	b.n	8015806 <WaveProcess+0x736>
    {
      ViA =(((Ain[k]-2048)*Ak)>>12)+100;
 8015676:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 801567a:	005b      	lsls	r3, r3, #1
 801567c:	697a      	ldr	r2, [r7, #20]
 801567e:	4413      	add	r3, r2
 8015680:	f9b3 3000 	ldrsh.w	r3, [r3]
 8015684:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 8015688:	693a      	ldr	r2, [r7, #16]
 801568a:	fb02 f303 	mul.w	r3, r2, r3
 801568e:	131b      	asrs	r3, r3, #12
 8015690:	b29b      	uxth	r3, r3
 8015692:	3364      	adds	r3, #100	; 0x64
 8015694:	b29b      	uxth	r3, r3
 8015696:	80bb      	strh	r3, [r7, #4]
      k++;
 8015698:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 801569c:	b29b      	uxth	r3, r3
 801569e:	3301      	adds	r3, #1
 80156a0:	b29b      	uxth	r3, r3
 80156a2:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
      while(p > 0){
 80156a6:	e09e      	b.n	80157e6 <WaveProcess+0x716>
 80156a8:	20002856 	.word	0x20002856
 80156ac:	20002868 	.word	0x20002868
 80156b0:	20002858 	.word	0x20002858
 80156b4:	2000285c 	.word	0x2000285c
 80156b8:	20002864 	.word	0x20002864
 80156bc:	2000286a 	.word	0x2000286a
 80156c0:	20006880 	.word	0x20006880
 80156c4:	20006878 	.word	0x20006878
 80156c8:	2000688c 	.word	0x2000688c
 80156cc:	20002850 	.word	0x20002850
 80156d0:	20000298 	.word	0x20000298
 80156d4:	200007a0 	.word	0x200007a0
 80156d8:	20002854 	.word	0x20002854
 80156dc:	2000286c 	.word	0x2000286c
 80156e0:	2000055c 	.word	0x2000055c
 80156e4:	20006884 	.word	0x20006884
 80156e8:	2000687c 	.word	0x2000687c
 80156ec:	20002860 	.word	0x20002860
        VoA = VeA +((ViA-VeA)*(1024-p))/1024; // ���� A ͨ����ǰ���ε�Ĳ�ֵ
 80156f0:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 80156f4:	f9b7 3042 	ldrsh.w	r3, [r7, #66]	; 0x42
 80156f8:	1ad3      	subs	r3, r2, r3
 80156fa:	f9b7 2048 	ldrsh.w	r2, [r7, #72]	; 0x48
 80156fe:	f5c2 6280 	rsb	r2, r2, #1024	; 0x400
 8015702:	fb02 f303 	mul.w	r3, r2, r3
 8015706:	2b00      	cmp	r3, #0
 8015708:	da01      	bge.n	801570e <WaveProcess+0x63e>
 801570a:	f203 33ff 	addw	r3, r3, #1023	; 0x3ff
 801570e:	129b      	asrs	r3, r3, #10
 8015710:	b29a      	uxth	r2, r3
 8015712:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8015716:	4413      	add	r3, r2
 8015718:	b29b      	uxth	r3, r3
 801571a:	87fb      	strh	r3, [r7, #62]	; 0x3e
        if(Status == STOP){
 801571c:	4b63      	ldr	r3, [pc, #396]	; (80158ac <WaveProcess+0x7dc>)
 801571e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8015722:	2b01      	cmp	r3, #1
 8015724:	d132      	bne.n	801578c <WaveProcess+0x6bc>

          Vo_Temp = VoA+(List[V0_POSI].Val-Ch1_Posi);
 8015726:	4b62      	ldr	r3, [pc, #392]	; (80158b0 <WaveProcess+0x7e0>)
 8015728:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 801572c:	b29a      	uxth	r2, r3
 801572e:	4b61      	ldr	r3, [pc, #388]	; (80158b4 <WaveProcess+0x7e4>)
 8015730:	f9b3 3000 	ldrsh.w	r3, [r3]
 8015734:	b29b      	uxth	r3, r3
 8015736:	1ad3      	subs	r3, r2, r3
 8015738:	b29a      	uxth	r2, r3
 801573a:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801573c:	4413      	add	r3, r2
 801573e:	b29b      	uxth	r3, r3
 8015740:	b21a      	sxth	r2, r3
 8015742:	4b5d      	ldr	r3, [pc, #372]	; (80158b8 <WaveProcess+0x7e8>)
 8015744:	801a      	strh	r2, [r3, #0]

          if(Vo_Temp > 199) Vo_Temp = 202;
 8015746:	4b5c      	ldr	r3, [pc, #368]	; (80158b8 <WaveProcess+0x7e8>)
 8015748:	f9b3 3000 	ldrsh.w	r3, [r3]
 801574c:	2bc7      	cmp	r3, #199	; 0xc7
 801574e:	dd02      	ble.n	8015756 <WaveProcess+0x686>
 8015750:	4b59      	ldr	r3, [pc, #356]	; (80158b8 <WaveProcess+0x7e8>)
 8015752:	22ca      	movs	r2, #202	; 0xca
 8015754:	801a      	strh	r2, [r3, #0]
          if(Vo_Temp <   3) Vo_Temp = 1;                     // �����޷�
 8015756:	4b58      	ldr	r3, [pc, #352]	; (80158b8 <WaveProcess+0x7e8>)
 8015758:	f9b3 3000 	ldrsh.w	r3, [r3]
 801575c:	2b02      	cmp	r3, #2
 801575e:	dc02      	bgt.n	8015766 <WaveProcess+0x696>
 8015760:	4b55      	ldr	r3, [pc, #340]	; (80158b8 <WaveProcess+0x7e8>)
 8015762:	2201      	movs	r2, #1
 8015764:	801a      	strh	r2, [r3, #0]

          WaveBuf[n]= Vo_Temp;
 8015766:	4b54      	ldr	r3, [pc, #336]	; (80158b8 <WaveProcess+0x7e8>)
 8015768:	f9b3 2000 	ldrsh.w	r2, [r3]
 801576c:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 8015770:	b2d1      	uxtb	r1, r2
 8015772:	4a52      	ldr	r2, [pc, #328]	; (80158bc <WaveProcess+0x7ec>)
 8015774:	54d1      	strb	r1, [r2, r3]

          Build_Ext(n, Ext, List[V0_POSI].Val);
 8015776:	4b4e      	ldr	r3, [pc, #312]	; (80158b0 <WaveProcess+0x7e0>)
 8015778:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 801577c:	b2da      	uxtb	r2, r3
 801577e:	79f9      	ldrb	r1, [r7, #7]
 8015780:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 8015784:	4618      	mov	r0, r3
 8015786:	f000 f89d 	bl	80158c4 <Build_Ext>
 801578a:	e01b      	b.n	80157c4 <WaveProcess+0x6f4>
        }
        else{
          if(VoA > 199) VoA = 202;                   // �����޷�  ��������
 801578c:	f9b7 303e 	ldrsh.w	r3, [r7, #62]	; 0x3e
 8015790:	2bc7      	cmp	r3, #199	; 0xc7
 8015792:	dd01      	ble.n	8015798 <WaveProcess+0x6c8>
 8015794:	23ca      	movs	r3, #202	; 0xca
 8015796:	87fb      	strh	r3, [r7, #62]	; 0x3e
          if(VoA <   3) VoA = 2;                     // �����޷�
 8015798:	f9b7 303e 	ldrsh.w	r3, [r7, #62]	; 0x3e
 801579c:	2b02      	cmp	r3, #2
 801579e:	dc01      	bgt.n	80157a4 <WaveProcess+0x6d4>
 80157a0:	2302      	movs	r3, #2
 80157a2:	87fb      	strh	r3, [r7, #62]	; 0x3e
          WaveBuf[n]= VoA;
 80157a4:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 80157a8:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 80157aa:	b2d1      	uxtb	r1, r2
 80157ac:	4a43      	ldr	r2, [pc, #268]	; (80158bc <WaveProcess+0x7ec>)
 80157ae:	54d1      	strb	r1, [r2, r3]

          Build_Ext(n, Ext, List[V0_POSI].Val);
 80157b0:	4b3f      	ldr	r3, [pc, #252]	; (80158b0 <WaveProcess+0x7e0>)
 80157b2:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 80157b6:	b2da      	uxtb	r2, r3
 80157b8:	79f9      	ldrb	r1, [r7, #7]
 80157ba:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 80157be:	4618      	mov	r0, r3
 80157c0:	f000 f880 	bl	80158c4 <Build_Ext>
        }

        if(n++ >= 300) break;
 80157c4:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 80157c8:	b29a      	uxth	r2, r3
 80157ca:	3201      	adds	r2, #1
 80157cc:	b292      	uxth	r2, r2
 80157ce:	f8a7 204c 	strh.w	r2, [r7, #76]	; 0x4c
 80157d2:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 80157d6:	da0b      	bge.n	80157f0 <WaveProcess+0x720>
        p -= Ks;
 80157d8:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 80157dc:	897b      	ldrh	r3, [r7, #10]
 80157de:	1ad3      	subs	r3, r2, r3
 80157e0:	b29b      	uxth	r3, r3
 80157e2:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
      while(p > 0){
 80157e6:	f9b7 3048 	ldrsh.w	r3, [r7, #72]	; 0x48
 80157ea:	2b00      	cmp	r3, #0
 80157ec:	dc80      	bgt.n	80156f0 <WaveProcess+0x620>
 80157ee:	e000      	b.n	80157f2 <WaveProcess+0x722>
        if(n++ >= 300) break;
 80157f0:	bf00      	nop
      }
      p += 1024;
 80157f2:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80157f6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80157fa:	b29b      	uxth	r3, r3
 80157fc:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
      VeA = ViA;                              // �ݴ浱ǰ���ε��ֵ
 8015800:	88bb      	ldrh	r3, [r7, #4]
 8015802:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
    for(n=0; n<300;)
 8015806:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 801580a:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 801580e:	f6ff af32 	blt.w	8015676 <WaveProcess+0x5a6>
    }
    Norm_Clr = 0;                                          //NORM����
 8015812:	4b2b      	ldr	r3, [pc, #172]	; (80158c0 <WaveProcess+0x7f0>)
 8015814:	2200      	movs	r2, #0
 8015816:	701a      	strb	r2, [r3, #0]
 8015818:	e037      	b.n	801588a <WaveProcess+0x7ba>
  }
  else if((k < 0) && ((Sm != NORM)||(Norm_Clr))){          //NORM��������Ļ
 801581a:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 801581e:	2b00      	cmp	r3, #0
 8015820:	da33      	bge.n	801588a <WaveProcess+0x7ba>
 8015822:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8015826:	2b03      	cmp	r3, #3
 8015828:	d103      	bne.n	8015832 <WaveProcess+0x762>
 801582a:	4b25      	ldr	r3, [pc, #148]	; (80158c0 <WaveProcess+0x7f0>)
 801582c:	781b      	ldrb	r3, [r3, #0]
 801582e:	2b00      	cmp	r3, #0
 8015830:	d02b      	beq.n	801588a <WaveProcess+0x7ba>
    for(n=0; n<300;){
 8015832:	2300      	movs	r3, #0
 8015834:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 8015838:	e022      	b.n	8015880 <WaveProcess+0x7b0>
      while(p > 0){
        WaveBuf[n]= 255;
 801583a:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 801583e:	4a1f      	ldr	r2, [pc, #124]	; (80158bc <WaveProcess+0x7ec>)
 8015840:	21ff      	movs	r1, #255	; 0xff
 8015842:	54d1      	strb	r1, [r2, r3]

        if(n++ >= 300) break;
 8015844:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 8015848:	b29a      	uxth	r2, r3
 801584a:	3201      	adds	r2, #1
 801584c:	b292      	uxth	r2, r2
 801584e:	f8a7 204c 	strh.w	r2, [r7, #76]	; 0x4c
 8015852:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8015856:	da0b      	bge.n	8015870 <WaveProcess+0x7a0>
        p -= Ks;
 8015858:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 801585c:	897b      	ldrh	r3, [r7, #10]
 801585e:	1ad3      	subs	r3, r2, r3
 8015860:	b29b      	uxth	r3, r3
 8015862:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
      while(p > 0){
 8015866:	f9b7 3048 	ldrsh.w	r3, [r7, #72]	; 0x48
 801586a:	2b00      	cmp	r3, #0
 801586c:	dce5      	bgt.n	801583a <WaveProcess+0x76a>
 801586e:	e000      	b.n	8015872 <WaveProcess+0x7a2>
        if(n++ >= 300) break;
 8015870:	bf00      	nop
      }
      p += 1024;
 8015872:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8015876:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 801587a:	b29b      	uxth	r3, r3
 801587c:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
    for(n=0; n<300;){
 8015880:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 8015884:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8015888:	dbed      	blt.n	8015866 <WaveProcess+0x796>
    }
  }
  if((i == Dpth)&&(Status != STOP))
 801588a:	f9b7 204e 	ldrsh.w	r2, [r7, #78]	; 0x4e
 801588e:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8015892:	429a      	cmp	r2, r3
 8015894:	d106      	bne.n	80158a4 <WaveProcess+0x7d4>
 8015896:	4b05      	ldr	r3, [pc, #20]	; (80158ac <WaveProcess+0x7dc>)
 8015898:	f9b3 3000 	ldrsh.w	r3, [r3]
 801589c:	2b01      	cmp	r3, #1
 801589e:	d001      	beq.n	80158a4 <WaveProcess+0x7d4>
  {
	  ADC_Start();       // ���¿�ʼ ADC ɨ�����
 80158a0:	f7f6 ff36 	bl	800c710 <ADC_Start>
  }
}
 80158a4:	bf00      	nop
 80158a6:	3750      	adds	r7, #80	; 0x50
 80158a8:	46bd      	mov	sp, r7
 80158aa:	bd80      	pop	{r7, pc}
 80158ac:	200007a0 	.word	0x200007a0
 80158b0:	20000298 	.word	0x20000298
 80158b4:	20006884 	.word	0x20006884
 80158b8:	20002848 	.word	0x20002848
 80158bc:	20000c08 	.word	0x20000c08
 80158c0:	200007a7 	.word	0x200007a7

080158c4 <Build_Ext>:

/*******************************************************************************
 Build_Ext: ��չͨ��������ʾ
*******************************************************************************/
void  Build_Ext(short x, char Ext, char Yp)
{
 80158c4:	b480      	push	{r7}
 80158c6:	b085      	sub	sp, #20
 80158c8:	af00      	add	r7, sp, #0
 80158ca:	4603      	mov	r3, r0
 80158cc:	80fb      	strh	r3, [r7, #6]
 80158ce:	460b      	mov	r3, r1
 80158d0:	717b      	strb	r3, [r7, #5]
 80158d2:	4613      	mov	r3, r2
 80158d4:	713b      	strb	r3, [r7, #4]
  char* Buf = WaveBuf + TRACK1_SIZE;
 80158d6:	4b69      	ldr	r3, [pc, #420]	; (8015a7c <Build_Ext+0x1b8>)
 80158d8:	60bb      	str	r3, [r7, #8]
  short  Vo;

  Posi_2F1 = List[EXT_POSI].Val -  Data[1] - List[V0_POSI].Val;
 80158da:	4b69      	ldr	r3, [pc, #420]	; (8015a80 <Build_Ext+0x1bc>)
 80158dc:	f9b3 30dc 	ldrsh.w	r3, [r3, #220]	; 0xdc
 80158e0:	b29a      	uxth	r2, r3
 80158e2:	4b68      	ldr	r3, [pc, #416]	; (8015a84 <Build_Ext+0x1c0>)
 80158e4:	785b      	ldrb	r3, [r3, #1]
 80158e6:	b29b      	uxth	r3, r3
 80158e8:	1ad3      	subs	r3, r2, r3
 80158ea:	b29a      	uxth	r2, r3
 80158ec:	4b64      	ldr	r3, [pc, #400]	; (8015a80 <Build_Ext+0x1bc>)
 80158ee:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 80158f2:	b29b      	uxth	r3, r3
 80158f4:	1ad3      	subs	r3, r2, r3
 80158f6:	b29b      	uxth	r3, r3
 80158f8:	b21a      	sxth	r2, r3
 80158fa:	4b63      	ldr	r3, [pc, #396]	; (8015a88 <Build_Ext+0x1c4>)
 80158fc:	801a      	strh	r2, [r3, #0]
  Posi_2F2 = List[EXT_POSI].Val;// - Data[2];
 80158fe:	4b60      	ldr	r3, [pc, #384]	; (8015a80 <Build_Ext+0x1bc>)
 8015900:	f9b3 20dc 	ldrsh.w	r2, [r3, #220]	; 0xdc
 8015904:	4b61      	ldr	r3, [pc, #388]	; (8015a8c <Build_Ext+0x1c8>)
 8015906:	801a      	strh	r2, [r3, #0]

  switch(Ext)
 8015908:	797b      	ldrb	r3, [r7, #5]
 801590a:	2b05      	cmp	r3, #5
 801590c:	f200 809c 	bhi.w	8015a48 <Build_Ext+0x184>
 8015910:	a201      	add	r2, pc, #4	; (adr r2, 8015918 <Build_Ext+0x54>)
 8015912:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015916:	bf00      	nop
 8015918:	08015931 	.word	0x08015931
 801591c:	08015957 	.word	0x08015957
 8015920:	0801597d 	.word	0x0801597d
 8015924:	080159a7 	.word	0x080159a7
 8015928:	080159e7 	.word	0x080159e7
 801592c:	08015a27 	.word	0x08015a27
  {
  case 0: // D
    Vo = Data[x+10]-Data[1]+List[EXT_POSI].Val; break;
 8015930:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8015934:	330a      	adds	r3, #10
 8015936:	4a53      	ldr	r2, [pc, #332]	; (8015a84 <Build_Ext+0x1c0>)
 8015938:	5cd3      	ldrb	r3, [r2, r3]
 801593a:	b29a      	uxth	r2, r3
 801593c:	4b51      	ldr	r3, [pc, #324]	; (8015a84 <Build_Ext+0x1c0>)
 801593e:	785b      	ldrb	r3, [r3, #1]
 8015940:	b29b      	uxth	r3, r3
 8015942:	1ad3      	subs	r3, r2, r3
 8015944:	b29a      	uxth	r2, r3
 8015946:	4b4e      	ldr	r3, [pc, #312]	; (8015a80 <Build_Ext+0x1bc>)
 8015948:	f9b3 30dc 	ldrsh.w	r3, [r3, #220]	; 0xdc
 801594c:	b29b      	uxth	r3, r3
 801594e:	4413      	add	r3, r2
 8015950:	b29b      	uxth	r3, r3
 8015952:	81fb      	strh	r3, [r7, #14]
 8015954:	e078      	b.n	8015a48 <Build_Ext+0x184>
  case 1: // -D
    Vo = List[EXT_POSI].Val+Data[1]-Data[x+10]; break;
 8015956:	4b4a      	ldr	r3, [pc, #296]	; (8015a80 <Build_Ext+0x1bc>)
 8015958:	f9b3 30dc 	ldrsh.w	r3, [r3, #220]	; 0xdc
 801595c:	b29a      	uxth	r2, r3
 801595e:	4b49      	ldr	r3, [pc, #292]	; (8015a84 <Build_Ext+0x1c0>)
 8015960:	785b      	ldrb	r3, [r3, #1]
 8015962:	b29b      	uxth	r3, r3
 8015964:	4413      	add	r3, r2
 8015966:	b29a      	uxth	r2, r3
 8015968:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801596c:	330a      	adds	r3, #10
 801596e:	4945      	ldr	r1, [pc, #276]	; (8015a84 <Build_Ext+0x1c0>)
 8015970:	5ccb      	ldrb	r3, [r1, r3]
 8015972:	b29b      	uxth	r3, r3
 8015974:	1ad3      	subs	r3, r2, r3
 8015976:	b29b      	uxth	r3, r3
 8015978:	81fb      	strh	r3, [r7, #14]
 801597a:	e065      	b.n	8015a48 <Build_Ext+0x184>
  case 2: // Inp+D
    Vo = Data[x+10]+ WaveBuf[x]+Posi_2F1; break;
 801597c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8015980:	330a      	adds	r3, #10
 8015982:	4a40      	ldr	r2, [pc, #256]	; (8015a84 <Build_Ext+0x1c0>)
 8015984:	5cd3      	ldrb	r3, [r2, r3]
 8015986:	b29a      	uxth	r2, r3
 8015988:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801598c:	4940      	ldr	r1, [pc, #256]	; (8015a90 <Build_Ext+0x1cc>)
 801598e:	5ccb      	ldrb	r3, [r1, r3]
 8015990:	b29b      	uxth	r3, r3
 8015992:	4413      	add	r3, r2
 8015994:	b29a      	uxth	r2, r3
 8015996:	4b3c      	ldr	r3, [pc, #240]	; (8015a88 <Build_Ext+0x1c4>)
 8015998:	f9b3 3000 	ldrsh.w	r3, [r3]
 801599c:	b29b      	uxth	r3, r3
 801599e:	4413      	add	r3, r2
 80159a0:	b29b      	uxth	r3, r3
 80159a2:	81fb      	strh	r3, [r7, #14]
 80159a4:	e050      	b.n	8015a48 <Build_Ext+0x184>
  case 3: // D-Inp
    Vo = (Data[x+10]-Data[1])- (WaveBuf[x]-List[V0_POSI].Val)+ List[EXT_POSI].Val; break;
 80159a6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80159aa:	330a      	adds	r3, #10
 80159ac:	4a35      	ldr	r2, [pc, #212]	; (8015a84 <Build_Ext+0x1c0>)
 80159ae:	5cd3      	ldrb	r3, [r2, r3]
 80159b0:	b29a      	uxth	r2, r3
 80159b2:	4b34      	ldr	r3, [pc, #208]	; (8015a84 <Build_Ext+0x1c0>)
 80159b4:	785b      	ldrb	r3, [r3, #1]
 80159b6:	b29b      	uxth	r3, r3
 80159b8:	1ad3      	subs	r3, r2, r3
 80159ba:	b29a      	uxth	r2, r3
 80159bc:	4b30      	ldr	r3, [pc, #192]	; (8015a80 <Build_Ext+0x1bc>)
 80159be:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 80159c2:	b299      	uxth	r1, r3
 80159c4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80159c8:	4831      	ldr	r0, [pc, #196]	; (8015a90 <Build_Ext+0x1cc>)
 80159ca:	5cc3      	ldrb	r3, [r0, r3]
 80159cc:	b29b      	uxth	r3, r3
 80159ce:	1acb      	subs	r3, r1, r3
 80159d0:	b29b      	uxth	r3, r3
 80159d2:	4413      	add	r3, r2
 80159d4:	b29a      	uxth	r2, r3
 80159d6:	4b2a      	ldr	r3, [pc, #168]	; (8015a80 <Build_Ext+0x1bc>)
 80159d8:	f9b3 30dc 	ldrsh.w	r3, [r3, #220]	; 0xdc
 80159dc:	b29b      	uxth	r3, r3
 80159de:	4413      	add	r3, r2
 80159e0:	b29b      	uxth	r3, r3
 80159e2:	81fb      	strh	r3, [r7, #14]
 80159e4:	e030      	b.n	8015a48 <Build_Ext+0x184>
  case 4: // Inp-D
    Vo = (WaveBuf[x]-List[V0_POSI].Val)-(Data[x+10]-Data[1]) + List[EXT_POSI].Val; break;
 80159e6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80159ea:	4a29      	ldr	r2, [pc, #164]	; (8015a90 <Build_Ext+0x1cc>)
 80159ec:	5cd3      	ldrb	r3, [r2, r3]
 80159ee:	b29a      	uxth	r2, r3
 80159f0:	4b23      	ldr	r3, [pc, #140]	; (8015a80 <Build_Ext+0x1bc>)
 80159f2:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 80159f6:	b29b      	uxth	r3, r3
 80159f8:	1ad3      	subs	r3, r2, r3
 80159fa:	b29a      	uxth	r2, r3
 80159fc:	4b21      	ldr	r3, [pc, #132]	; (8015a84 <Build_Ext+0x1c0>)
 80159fe:	785b      	ldrb	r3, [r3, #1]
 8015a00:	b299      	uxth	r1, r3
 8015a02:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8015a06:	330a      	adds	r3, #10
 8015a08:	481e      	ldr	r0, [pc, #120]	; (8015a84 <Build_Ext+0x1c0>)
 8015a0a:	5cc3      	ldrb	r3, [r0, r3]
 8015a0c:	b29b      	uxth	r3, r3
 8015a0e:	1acb      	subs	r3, r1, r3
 8015a10:	b29b      	uxth	r3, r3
 8015a12:	4413      	add	r3, r2
 8015a14:	b29a      	uxth	r2, r3
 8015a16:	4b1a      	ldr	r3, [pc, #104]	; (8015a80 <Build_Ext+0x1bc>)
 8015a18:	f9b3 30dc 	ldrsh.w	r3, [r3, #220]	; 0xdc
 8015a1c:	b29b      	uxth	r3, r3
 8015a1e:	4413      	add	r3, r2
 8015a20:	b29b      	uxth	r3, r3
 8015a22:	81fb      	strh	r3, [r7, #14]
 8015a24:	e010      	b.n	8015a48 <Build_Ext+0x184>
  case 5: // -Inp
    Vo = Yp+List[EXT_POSI].Val - WaveBuf[x]; break;
 8015a26:	793b      	ldrb	r3, [r7, #4]
 8015a28:	b29a      	uxth	r2, r3
 8015a2a:	4b15      	ldr	r3, [pc, #84]	; (8015a80 <Build_Ext+0x1bc>)
 8015a2c:	f9b3 30dc 	ldrsh.w	r3, [r3, #220]	; 0xdc
 8015a30:	b29b      	uxth	r3, r3
 8015a32:	4413      	add	r3, r2
 8015a34:	b29a      	uxth	r2, r3
 8015a36:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8015a3a:	4915      	ldr	r1, [pc, #84]	; (8015a90 <Build_Ext+0x1cc>)
 8015a3c:	5ccb      	ldrb	r3, [r1, r3]
 8015a3e:	b29b      	uxth	r3, r3
 8015a40:	1ad3      	subs	r3, r2, r3
 8015a42:	b29b      	uxth	r3, r3
 8015a44:	81fb      	strh	r3, [r7, #14]
 8015a46:	bf00      	nop
  }
  if(Vo > 199) Vo = 202;
 8015a48:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8015a4c:	2bc7      	cmp	r3, #199	; 0xc7
 8015a4e:	dd01      	ble.n	8015a54 <Build_Ext+0x190>
 8015a50:	23ca      	movs	r3, #202	; 0xca
 8015a52:	81fb      	strh	r3, [r7, #14]
  if(Vo <   3) Vo = 1;                     // �����޷�
 8015a54:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8015a58:	2b02      	cmp	r3, #2
 8015a5a:	dc01      	bgt.n	8015a60 <Build_Ext+0x19c>
 8015a5c:	2301      	movs	r3, #1
 8015a5e:	81fb      	strh	r3, [r7, #14]
  Buf[x]= Vo;
 8015a60:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8015a64:	68ba      	ldr	r2, [r7, #8]
 8015a66:	4413      	add	r3, r2
 8015a68:	89fa      	ldrh	r2, [r7, #14]
 8015a6a:	b2d2      	uxtb	r2, r2
 8015a6c:	701a      	strb	r2, [r3, #0]
}
 8015a6e:	bf00      	nop
 8015a70:	3714      	adds	r7, #20
 8015a72:	46bd      	mov	sp, r7
 8015a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015a78:	4770      	bx	lr
 8015a7a:	bf00      	nop
 8015a7c:	20000d34 	.word	0x20000d34
 8015a80:	20000298 	.word	0x20000298
 8015a84:	20000008 	.word	0x20000008
 8015a88:	2000284c 	.word	0x2000284c
 8015a8c:	20006874 	.word	0x20006874
 8015a90:	20000c08 	.word	0x20000c08

08015a94 <Auto_Fit>:

void Auto_Fit(void)
{
 8015a94:	b590      	push	{r4, r7, lr}
 8015a96:	b083      	sub	sp, #12
 8015a98:	af00      	add	r7, sp, #0
  char i,j,k=0;
 8015a9a:	2300      	movs	r3, #0
 8015a9c:	717b      	strb	r3, [r7, #5]
  short Tmp,Tmp1;

  if(Status != STOP){
 8015a9e:	4b38      	ldr	r3, [pc, #224]	; (8015b80 <Auto_Fit+0xec>)
 8015aa0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8015aa4:	2b01      	cmp	r3, #1
 8015aa6:	f000 83de 	beq.w	8016266 <Auto_Fit+0x7d2>
    //======��ѹ���Զ�ѡ��==============
    for(i=0;i<9;i++){
 8015aaa:	2300      	movs	r3, #0
 8015aac:	71fb      	strb	r3, [r7, #7]
 8015aae:	e098      	b.n	8015be2 <Auto_Fit+0x14e>
      //******Aͨ��***********
      Tmp1 = ((((Vmax-2048)*((KgA[KindA+(StateA?1:0)]*4)/GK[GainA]))>>12)+100-List[V0_POSI].Val)
 8015ab0:	4b34      	ldr	r3, [pc, #208]	; (8015b84 <Auto_Fit+0xf0>)
 8015ab2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8015ab6:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 8015aba:	4a33      	ldr	r2, [pc, #204]	; (8015b88 <Auto_Fit+0xf4>)
 8015abc:	6811      	ldr	r1, [r2, #0]
 8015abe:	4a33      	ldr	r2, [pc, #204]	; (8015b8c <Auto_Fit+0xf8>)
 8015ac0:	f9b2 2000 	ldrsh.w	r2, [r2]
 8015ac4:	4610      	mov	r0, r2
 8015ac6:	4a32      	ldr	r2, [pc, #200]	; (8015b90 <Auto_Fit+0xfc>)
 8015ac8:	f9b2 2000 	ldrsh.w	r2, [r2]
 8015acc:	2a00      	cmp	r2, #0
 8015ace:	bf14      	ite	ne
 8015ad0:	2201      	movne	r2, #1
 8015ad2:	2200      	moveq	r2, #0
 8015ad4:	b2d2      	uxtb	r2, r2
 8015ad6:	4402      	add	r2, r0
 8015ad8:	0052      	lsls	r2, r2, #1
 8015ada:	440a      	add	r2, r1
 8015adc:	f9b2 2000 	ldrsh.w	r2, [r2]
 8015ae0:	0092      	lsls	r2, r2, #2
 8015ae2:	492c      	ldr	r1, [pc, #176]	; (8015b94 <Auto_Fit+0x100>)
 8015ae4:	f9b1 1000 	ldrsh.w	r1, [r1]
 8015ae8:	4608      	mov	r0, r1
 8015aea:	492b      	ldr	r1, [pc, #172]	; (8015b98 <Auto_Fit+0x104>)
 8015aec:	5c09      	ldrb	r1, [r1, r0]
 8015aee:	fb92 f2f1 	sdiv	r2, r2, r1
 8015af2:	fb02 f303 	mul.w	r3, r2, r3
 8015af6:	131b      	asrs	r3, r3, #12
           - ((((Vmin-2048)*((KgA[KindA+(StateA?1:0)]*4)/GK[GainA]))>>12)+100-List[V0_POSI].Val);
 8015af8:	b29a      	uxth	r2, r3
 8015afa:	4b28      	ldr	r3, [pc, #160]	; (8015b9c <Auto_Fit+0x108>)
 8015afc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8015b00:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 8015b04:	4920      	ldr	r1, [pc, #128]	; (8015b88 <Auto_Fit+0xf4>)
 8015b06:	6808      	ldr	r0, [r1, #0]
 8015b08:	4920      	ldr	r1, [pc, #128]	; (8015b8c <Auto_Fit+0xf8>)
 8015b0a:	f9b1 1000 	ldrsh.w	r1, [r1]
 8015b0e:	460c      	mov	r4, r1
 8015b10:	491f      	ldr	r1, [pc, #124]	; (8015b90 <Auto_Fit+0xfc>)
 8015b12:	f9b1 1000 	ldrsh.w	r1, [r1]
 8015b16:	2900      	cmp	r1, #0
 8015b18:	bf14      	ite	ne
 8015b1a:	2101      	movne	r1, #1
 8015b1c:	2100      	moveq	r1, #0
 8015b1e:	b2c9      	uxtb	r1, r1
 8015b20:	4421      	add	r1, r4
 8015b22:	0049      	lsls	r1, r1, #1
 8015b24:	4401      	add	r1, r0
 8015b26:	f9b1 1000 	ldrsh.w	r1, [r1]
 8015b2a:	0089      	lsls	r1, r1, #2
 8015b2c:	4819      	ldr	r0, [pc, #100]	; (8015b94 <Auto_Fit+0x100>)
 8015b2e:	f9b0 0000 	ldrsh.w	r0, [r0]
 8015b32:	4604      	mov	r4, r0
 8015b34:	4818      	ldr	r0, [pc, #96]	; (8015b98 <Auto_Fit+0x104>)
 8015b36:	5d00      	ldrb	r0, [r0, r4]
 8015b38:	fb91 f1f0 	sdiv	r1, r1, r0
 8015b3c:	fb01 f303 	mul.w	r3, r1, r3
 8015b40:	131b      	asrs	r3, r3, #12
 8015b42:	b29b      	uxth	r3, r3
 8015b44:	1ad3      	subs	r3, r2, r3
 8015b46:	b29b      	uxth	r3, r3
      Tmp1 = ((((Vmax-2048)*((KgA[KindA+(StateA?1:0)]*4)/GK[GainA]))>>12)+100-List[V0_POSI].Val)
 8015b48:	803b      	strh	r3, [r7, #0]
      if((Tmp1 < 40)&&(List[Y_RANGES].Val > 2)){       //40
 8015b4a:	f9b7 3000 	ldrsh.w	r3, [r7]
 8015b4e:	2b27      	cmp	r3, #39	; 0x27
 8015b50:	dc28      	bgt.n	8015ba4 <Auto_Fit+0x110>
 8015b52:	4b13      	ldr	r3, [pc, #76]	; (8015ba0 <Auto_Fit+0x10c>)
 8015b54:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8015b58:	2b02      	cmp	r3, #2
 8015b5a:	dd23      	ble.n	8015ba4 <Auto_Fit+0x110>
        List[Y_RANGES].Val--;
 8015b5c:	4b10      	ldr	r3, [pc, #64]	; (8015ba0 <Auto_Fit+0x10c>)
 8015b5e:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8015b62:	b29b      	uxth	r3, r3
 8015b64:	3b01      	subs	r3, #1
 8015b66:	b29b      	uxth	r3, r3
 8015b68:	b21a      	sxth	r2, r3
 8015b6a:	4b0d      	ldr	r3, [pc, #52]	; (8015ba0 <Auto_Fit+0x10c>)
 8015b6c:	809a      	strh	r2, [r3, #4]
        List[V0_POSI].Val=100;
 8015b6e:	4b0c      	ldr	r3, [pc, #48]	; (8015ba0 <Auto_Fit+0x10c>)
 8015b70:	2264      	movs	r2, #100	; 0x64
 8015b72:	839a      	strh	r2, [r3, #28]
        WaveProcess();
 8015b74:	f7ff faac 	bl	80150d0 <WaveProcess>
        Update_Proc_All();
 8015b78:	f7fe ff32 	bl	80149e0 <Update_Proc_All>
 8015b7c:	e02b      	b.n	8015bd6 <Auto_Fit+0x142>
 8015b7e:	bf00      	nop
 8015b80:	200007a0 	.word	0x200007a0
 8015b84:	20002856 	.word	0x20002856
 8015b88:	2000057c 	.word	0x2000057c
 8015b8c:	20006886 	.word	0x20006886
 8015b90:	20002862 	.word	0x20002862
 8015b94:	2000284a 	.word	0x2000284a
 8015b98:	20000560 	.word	0x20000560
 8015b9c:	20002868 	.word	0x20002868
 8015ba0:	20000298 	.word	0x20000298
      }
      else if((Tmp1 > 110)&&(List[Y_RANGES].Val < 9)){ //110
 8015ba4:	f9b7 3000 	ldrsh.w	r3, [r7]
 8015ba8:	2b6e      	cmp	r3, #110	; 0x6e
 8015baa:	dd14      	ble.n	8015bd6 <Auto_Fit+0x142>
 8015bac:	4bbe      	ldr	r3, [pc, #760]	; (8015ea8 <Auto_Fit+0x414>)
 8015bae:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8015bb2:	2b08      	cmp	r3, #8
 8015bb4:	dc0f      	bgt.n	8015bd6 <Auto_Fit+0x142>
        List[Y_RANGES].Val++;
 8015bb6:	4bbc      	ldr	r3, [pc, #752]	; (8015ea8 <Auto_Fit+0x414>)
 8015bb8:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8015bbc:	b29b      	uxth	r3, r3
 8015bbe:	3301      	adds	r3, #1
 8015bc0:	b29b      	uxth	r3, r3
 8015bc2:	b21a      	sxth	r2, r3
 8015bc4:	4bb8      	ldr	r3, [pc, #736]	; (8015ea8 <Auto_Fit+0x414>)
 8015bc6:	809a      	strh	r2, [r3, #4]
        List[V0_POSI].Val=100;
 8015bc8:	4bb7      	ldr	r3, [pc, #732]	; (8015ea8 <Auto_Fit+0x414>)
 8015bca:	2264      	movs	r2, #100	; 0x64
 8015bcc:	839a      	strh	r2, [r3, #28]
        WaveProcess();
 8015bce:	f7ff fa7f 	bl	80150d0 <WaveProcess>
        Update_Proc_All();
 8015bd2:	f7fe ff05 	bl	80149e0 <Update_Proc_All>
      }
      HAL_Delay(50);
 8015bd6:	2032      	movs	r0, #50	; 0x32
 8015bd8:	f002 fba8 	bl	801832c <HAL_Delay>
    for(i=0;i<9;i++){
 8015bdc:	79fb      	ldrb	r3, [r7, #7]
 8015bde:	3301      	adds	r3, #1
 8015be0:	71fb      	strb	r3, [r7, #7]
 8015be2:	79fb      	ldrb	r3, [r7, #7]
 8015be4:	2b08      	cmp	r3, #8
 8015be6:	f67f af63 	bls.w	8015ab0 <Auto_Fit+0x1c>
    //============ʶ�𴥷�Դ======================


    //======�������Զ�ѡ��==============
    //if(!List[TRI_Ch]){//******Aͨ��***********
      Tmp = (((((Vmax-2048)*((KgA[KindA+(StateA?1:0)]*4)/GK[GainA]))>>12)+100-List[V0_POSI].Val)
 8015bea:	4bb0      	ldr	r3, [pc, #704]	; (8015eac <Auto_Fit+0x418>)
 8015bec:	f9b3 3000 	ldrsh.w	r3, [r3]
 8015bf0:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 8015bf4:	4aae      	ldr	r2, [pc, #696]	; (8015eb0 <Auto_Fit+0x41c>)
 8015bf6:	6811      	ldr	r1, [r2, #0]
 8015bf8:	4aae      	ldr	r2, [pc, #696]	; (8015eb4 <Auto_Fit+0x420>)
 8015bfa:	f9b2 2000 	ldrsh.w	r2, [r2]
 8015bfe:	4610      	mov	r0, r2
 8015c00:	4aad      	ldr	r2, [pc, #692]	; (8015eb8 <Auto_Fit+0x424>)
 8015c02:	f9b2 2000 	ldrsh.w	r2, [r2]
 8015c06:	2a00      	cmp	r2, #0
 8015c08:	bf14      	ite	ne
 8015c0a:	2201      	movne	r2, #1
 8015c0c:	2200      	moveq	r2, #0
 8015c0e:	b2d2      	uxtb	r2, r2
 8015c10:	4402      	add	r2, r0
 8015c12:	0052      	lsls	r2, r2, #1
 8015c14:	440a      	add	r2, r1
 8015c16:	f9b2 2000 	ldrsh.w	r2, [r2]
 8015c1a:	0092      	lsls	r2, r2, #2
 8015c1c:	49a7      	ldr	r1, [pc, #668]	; (8015ebc <Auto_Fit+0x428>)
 8015c1e:	f9b1 1000 	ldrsh.w	r1, [r1]
 8015c22:	4608      	mov	r0, r1
 8015c24:	49a6      	ldr	r1, [pc, #664]	; (8015ec0 <Auto_Fit+0x42c>)
 8015c26:	5c09      	ldrb	r1, [r1, r0]
 8015c28:	fb92 f2f1 	sdiv	r2, r2, r1
 8015c2c:	fb02 f303 	mul.w	r3, r2, r3
 8015c30:	131a      	asrs	r2, r3, #12
           - ((((Vmin-2048)*((KgA[KindA+(StateA?1:0)]*4)/GK[GainA]))>>12)+100-List[V0_POSI].Val))/4;
 8015c32:	4ba4      	ldr	r3, [pc, #656]	; (8015ec4 <Auto_Fit+0x430>)
 8015c34:	f9b3 3000 	ldrsh.w	r3, [r3]
 8015c38:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 8015c3c:	499c      	ldr	r1, [pc, #624]	; (8015eb0 <Auto_Fit+0x41c>)
 8015c3e:	6808      	ldr	r0, [r1, #0]
 8015c40:	499c      	ldr	r1, [pc, #624]	; (8015eb4 <Auto_Fit+0x420>)
 8015c42:	f9b1 1000 	ldrsh.w	r1, [r1]
 8015c46:	460c      	mov	r4, r1
 8015c48:	499b      	ldr	r1, [pc, #620]	; (8015eb8 <Auto_Fit+0x424>)
 8015c4a:	f9b1 1000 	ldrsh.w	r1, [r1]
 8015c4e:	2900      	cmp	r1, #0
 8015c50:	bf14      	ite	ne
 8015c52:	2101      	movne	r1, #1
 8015c54:	2100      	moveq	r1, #0
 8015c56:	b2c9      	uxtb	r1, r1
 8015c58:	4421      	add	r1, r4
 8015c5a:	0049      	lsls	r1, r1, #1
 8015c5c:	4401      	add	r1, r0
 8015c5e:	f9b1 1000 	ldrsh.w	r1, [r1]
 8015c62:	0089      	lsls	r1, r1, #2
 8015c64:	4895      	ldr	r0, [pc, #596]	; (8015ebc <Auto_Fit+0x428>)
 8015c66:	f9b0 0000 	ldrsh.w	r0, [r0]
 8015c6a:	4604      	mov	r4, r0
 8015c6c:	4894      	ldr	r0, [pc, #592]	; (8015ec0 <Auto_Fit+0x42c>)
 8015c6e:	5d00      	ldrb	r0, [r0, r4]
 8015c70:	fb91 f1f0 	sdiv	r1, r1, r0
 8015c74:	fb01 f303 	mul.w	r3, r1, r3
 8015c78:	131b      	asrs	r3, r3, #12
 8015c7a:	1ad3      	subs	r3, r2, r3
 8015c7c:	2b00      	cmp	r3, #0
 8015c7e:	da00      	bge.n	8015c82 <Auto_Fit+0x1ee>
 8015c80:	3303      	adds	r3, #3
 8015c82:	109b      	asrs	r3, r3, #2
      Tmp = (((((Vmax-2048)*((KgA[KindA+(StateA?1:0)]*4)/GK[GainA]))>>12)+100-List[V0_POSI].Val)
 8015c84:	807b      	strh	r3, [r7, #2]
      if((List[THRESHOLD].Val > (((((Vmid-2048)*((KgA[KindA+(StateA?1:0)]*4)/GK[GainA]))>>12)+100-List[V0_POSI].Val)  + Tmp))||
 8015c86:	4b88      	ldr	r3, [pc, #544]	; (8015ea8 <Auto_Fit+0x414>)
 8015c88:	f9b3 3084 	ldrsh.w	r3, [r3, #132]	; 0x84
 8015c8c:	4618      	mov	r0, r3
 8015c8e:	4b8e      	ldr	r3, [pc, #568]	; (8015ec8 <Auto_Fit+0x434>)
 8015c90:	f9b3 3000 	ldrsh.w	r3, [r3]
 8015c94:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 8015c98:	4a85      	ldr	r2, [pc, #532]	; (8015eb0 <Auto_Fit+0x41c>)
 8015c9a:	6811      	ldr	r1, [r2, #0]
 8015c9c:	4a85      	ldr	r2, [pc, #532]	; (8015eb4 <Auto_Fit+0x420>)
 8015c9e:	f9b2 2000 	ldrsh.w	r2, [r2]
 8015ca2:	4614      	mov	r4, r2
 8015ca4:	4a84      	ldr	r2, [pc, #528]	; (8015eb8 <Auto_Fit+0x424>)
 8015ca6:	f9b2 2000 	ldrsh.w	r2, [r2]
 8015caa:	2a00      	cmp	r2, #0
 8015cac:	bf14      	ite	ne
 8015cae:	2201      	movne	r2, #1
 8015cb0:	2200      	moveq	r2, #0
 8015cb2:	b2d2      	uxtb	r2, r2
 8015cb4:	4422      	add	r2, r4
 8015cb6:	0052      	lsls	r2, r2, #1
 8015cb8:	440a      	add	r2, r1
 8015cba:	f9b2 2000 	ldrsh.w	r2, [r2]
 8015cbe:	0092      	lsls	r2, r2, #2
 8015cc0:	497e      	ldr	r1, [pc, #504]	; (8015ebc <Auto_Fit+0x428>)
 8015cc2:	f9b1 1000 	ldrsh.w	r1, [r1]
 8015cc6:	460c      	mov	r4, r1
 8015cc8:	497d      	ldr	r1, [pc, #500]	; (8015ec0 <Auto_Fit+0x42c>)
 8015cca:	5d09      	ldrb	r1, [r1, r4]
 8015ccc:	fb92 f2f1 	sdiv	r2, r2, r1
 8015cd0:	fb02 f303 	mul.w	r3, r2, r3
 8015cd4:	131b      	asrs	r3, r3, #12
 8015cd6:	3364      	adds	r3, #100	; 0x64
 8015cd8:	4a73      	ldr	r2, [pc, #460]	; (8015ea8 <Auto_Fit+0x414>)
 8015cda:	f9b2 201c 	ldrsh.w	r2, [r2, #28]
 8015cde:	1a9a      	subs	r2, r3, r2
 8015ce0:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8015ce4:	4413      	add	r3, r2
 8015ce6:	4298      	cmp	r0, r3
 8015ce8:	dc32      	bgt.n	8015d50 <Auto_Fit+0x2bc>
         (List[THRESHOLD].Val < (((((Vmid-2048)*((KgA[KindA+(StateA?1:0)]*4)/GK[GainA]))>>12)+100-List[V0_POSI].Val)  - Tmp))){
 8015cea:	4b6f      	ldr	r3, [pc, #444]	; (8015ea8 <Auto_Fit+0x414>)
 8015cec:	f9b3 3084 	ldrsh.w	r3, [r3, #132]	; 0x84
 8015cf0:	4618      	mov	r0, r3
 8015cf2:	4b75      	ldr	r3, [pc, #468]	; (8015ec8 <Auto_Fit+0x434>)
 8015cf4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8015cf8:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 8015cfc:	4a6c      	ldr	r2, [pc, #432]	; (8015eb0 <Auto_Fit+0x41c>)
 8015cfe:	6811      	ldr	r1, [r2, #0]
 8015d00:	4a6c      	ldr	r2, [pc, #432]	; (8015eb4 <Auto_Fit+0x420>)
 8015d02:	f9b2 2000 	ldrsh.w	r2, [r2]
 8015d06:	4614      	mov	r4, r2
 8015d08:	4a6b      	ldr	r2, [pc, #428]	; (8015eb8 <Auto_Fit+0x424>)
 8015d0a:	f9b2 2000 	ldrsh.w	r2, [r2]
 8015d0e:	2a00      	cmp	r2, #0
 8015d10:	bf14      	ite	ne
 8015d12:	2201      	movne	r2, #1
 8015d14:	2200      	moveq	r2, #0
 8015d16:	b2d2      	uxtb	r2, r2
 8015d18:	4422      	add	r2, r4
 8015d1a:	0052      	lsls	r2, r2, #1
 8015d1c:	440a      	add	r2, r1
 8015d1e:	f9b2 2000 	ldrsh.w	r2, [r2]
 8015d22:	0092      	lsls	r2, r2, #2
 8015d24:	4965      	ldr	r1, [pc, #404]	; (8015ebc <Auto_Fit+0x428>)
 8015d26:	f9b1 1000 	ldrsh.w	r1, [r1]
 8015d2a:	460c      	mov	r4, r1
 8015d2c:	4964      	ldr	r1, [pc, #400]	; (8015ec0 <Auto_Fit+0x42c>)
 8015d2e:	5d09      	ldrb	r1, [r1, r4]
 8015d30:	fb92 f2f1 	sdiv	r2, r2, r1
 8015d34:	fb02 f303 	mul.w	r3, r2, r3
 8015d38:	131b      	asrs	r3, r3, #12
 8015d3a:	3364      	adds	r3, #100	; 0x64
 8015d3c:	4a5a      	ldr	r2, [pc, #360]	; (8015ea8 <Auto_Fit+0x414>)
 8015d3e:	f9b2 201c 	ldrsh.w	r2, [r2, #28]
 8015d42:	1a9a      	subs	r2, r3, r2
 8015d44:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8015d48:	1ad3      	subs	r3, r2, r3
      if((List[THRESHOLD].Val > (((((Vmid-2048)*((KgA[KindA+(StateA?1:0)]*4)/GK[GainA]))>>12)+100-List[V0_POSI].Val)  + Tmp))||
 8015d4a:	4298      	cmp	r0, r3
 8015d4c:	f280 808e 	bge.w	8015e6c <Auto_Fit+0x3d8>
           if(abs(((((Vmid-2048)*((KgA[KindA+(StateA?1:0)]*4)/GK[GainA]))>>12)+100-List[V0_POSI].Val)+15)<195)
 8015d50:	4b5d      	ldr	r3, [pc, #372]	; (8015ec8 <Auto_Fit+0x434>)
 8015d52:	f9b3 3000 	ldrsh.w	r3, [r3]
 8015d56:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 8015d5a:	4a55      	ldr	r2, [pc, #340]	; (8015eb0 <Auto_Fit+0x41c>)
 8015d5c:	6811      	ldr	r1, [r2, #0]
 8015d5e:	4a55      	ldr	r2, [pc, #340]	; (8015eb4 <Auto_Fit+0x420>)
 8015d60:	f9b2 2000 	ldrsh.w	r2, [r2]
 8015d64:	4610      	mov	r0, r2
 8015d66:	4a54      	ldr	r2, [pc, #336]	; (8015eb8 <Auto_Fit+0x424>)
 8015d68:	f9b2 2000 	ldrsh.w	r2, [r2]
 8015d6c:	2a00      	cmp	r2, #0
 8015d6e:	bf14      	ite	ne
 8015d70:	2201      	movne	r2, #1
 8015d72:	2200      	moveq	r2, #0
 8015d74:	b2d2      	uxtb	r2, r2
 8015d76:	4402      	add	r2, r0
 8015d78:	0052      	lsls	r2, r2, #1
 8015d7a:	440a      	add	r2, r1
 8015d7c:	f9b2 2000 	ldrsh.w	r2, [r2]
 8015d80:	0092      	lsls	r2, r2, #2
 8015d82:	494e      	ldr	r1, [pc, #312]	; (8015ebc <Auto_Fit+0x428>)
 8015d84:	f9b1 1000 	ldrsh.w	r1, [r1]
 8015d88:	4608      	mov	r0, r1
 8015d8a:	494d      	ldr	r1, [pc, #308]	; (8015ec0 <Auto_Fit+0x42c>)
 8015d8c:	5c09      	ldrb	r1, [r1, r0]
 8015d8e:	fb92 f2f1 	sdiv	r2, r2, r1
 8015d92:	fb02 f303 	mul.w	r3, r2, r3
 8015d96:	131b      	asrs	r3, r3, #12
 8015d98:	3364      	adds	r3, #100	; 0x64
 8015d9a:	4a43      	ldr	r2, [pc, #268]	; (8015ea8 <Auto_Fit+0x414>)
 8015d9c:	f9b2 201c 	ldrsh.w	r2, [r2, #28]
 8015da0:	1a9b      	subs	r3, r3, r2
 8015da2:	330f      	adds	r3, #15
 8015da4:	f113 0fc2 	cmn.w	r3, #194	; 0xc2
 8015da8:	db5c      	blt.n	8015e64 <Auto_Fit+0x3d0>
 8015daa:	4b47      	ldr	r3, [pc, #284]	; (8015ec8 <Auto_Fit+0x434>)
 8015dac:	f9b3 3000 	ldrsh.w	r3, [r3]
 8015db0:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 8015db4:	4a3e      	ldr	r2, [pc, #248]	; (8015eb0 <Auto_Fit+0x41c>)
 8015db6:	6811      	ldr	r1, [r2, #0]
 8015db8:	4a3e      	ldr	r2, [pc, #248]	; (8015eb4 <Auto_Fit+0x420>)
 8015dba:	f9b2 2000 	ldrsh.w	r2, [r2]
 8015dbe:	4610      	mov	r0, r2
 8015dc0:	4a3d      	ldr	r2, [pc, #244]	; (8015eb8 <Auto_Fit+0x424>)
 8015dc2:	f9b2 2000 	ldrsh.w	r2, [r2]
 8015dc6:	2a00      	cmp	r2, #0
 8015dc8:	bf14      	ite	ne
 8015dca:	2201      	movne	r2, #1
 8015dcc:	2200      	moveq	r2, #0
 8015dce:	b2d2      	uxtb	r2, r2
 8015dd0:	4402      	add	r2, r0
 8015dd2:	0052      	lsls	r2, r2, #1
 8015dd4:	440a      	add	r2, r1
 8015dd6:	f9b2 2000 	ldrsh.w	r2, [r2]
 8015dda:	0092      	lsls	r2, r2, #2
 8015ddc:	4937      	ldr	r1, [pc, #220]	; (8015ebc <Auto_Fit+0x428>)
 8015dde:	f9b1 1000 	ldrsh.w	r1, [r1]
 8015de2:	4608      	mov	r0, r1
 8015de4:	4936      	ldr	r1, [pc, #216]	; (8015ec0 <Auto_Fit+0x42c>)
 8015de6:	5c09      	ldrb	r1, [r1, r0]
 8015de8:	fb92 f2f1 	sdiv	r2, r2, r1
 8015dec:	fb02 f303 	mul.w	r3, r2, r3
 8015df0:	131b      	asrs	r3, r3, #12
 8015df2:	3364      	adds	r3, #100	; 0x64
 8015df4:	4a2c      	ldr	r2, [pc, #176]	; (8015ea8 <Auto_Fit+0x414>)
 8015df6:	f9b2 201c 	ldrsh.w	r2, [r2, #28]
 8015dfa:	1a9b      	subs	r3, r3, r2
 8015dfc:	330f      	adds	r3, #15
 8015dfe:	2bc2      	cmp	r3, #194	; 0xc2
 8015e00:	dc30      	bgt.n	8015e64 <Auto_Fit+0x3d0>
             List[THRESHOLD].Val = ((((Vmid-2048)*((KgA[KindA+(StateA?1:0)]*4)/GK[GainA]))>>12)+100-List[V0_POSI].Val)+15 ;
 8015e02:	4b31      	ldr	r3, [pc, #196]	; (8015ec8 <Auto_Fit+0x434>)
 8015e04:	f9b3 3000 	ldrsh.w	r3, [r3]
 8015e08:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 8015e0c:	4a28      	ldr	r2, [pc, #160]	; (8015eb0 <Auto_Fit+0x41c>)
 8015e0e:	6811      	ldr	r1, [r2, #0]
 8015e10:	4a28      	ldr	r2, [pc, #160]	; (8015eb4 <Auto_Fit+0x420>)
 8015e12:	f9b2 2000 	ldrsh.w	r2, [r2]
 8015e16:	4610      	mov	r0, r2
 8015e18:	4a27      	ldr	r2, [pc, #156]	; (8015eb8 <Auto_Fit+0x424>)
 8015e1a:	f9b2 2000 	ldrsh.w	r2, [r2]
 8015e1e:	2a00      	cmp	r2, #0
 8015e20:	bf14      	ite	ne
 8015e22:	2201      	movne	r2, #1
 8015e24:	2200      	moveq	r2, #0
 8015e26:	b2d2      	uxtb	r2, r2
 8015e28:	4402      	add	r2, r0
 8015e2a:	0052      	lsls	r2, r2, #1
 8015e2c:	440a      	add	r2, r1
 8015e2e:	f9b2 2000 	ldrsh.w	r2, [r2]
 8015e32:	0092      	lsls	r2, r2, #2
 8015e34:	4921      	ldr	r1, [pc, #132]	; (8015ebc <Auto_Fit+0x428>)
 8015e36:	f9b1 1000 	ldrsh.w	r1, [r1]
 8015e3a:	4608      	mov	r0, r1
 8015e3c:	4920      	ldr	r1, [pc, #128]	; (8015ec0 <Auto_Fit+0x42c>)
 8015e3e:	5c09      	ldrb	r1, [r1, r0]
 8015e40:	fb92 f2f1 	sdiv	r2, r2, r1
 8015e44:	fb02 f303 	mul.w	r3, r2, r3
 8015e48:	131b      	asrs	r3, r3, #12
 8015e4a:	b29a      	uxth	r2, r3
 8015e4c:	4b16      	ldr	r3, [pc, #88]	; (8015ea8 <Auto_Fit+0x414>)
 8015e4e:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 8015e52:	b29b      	uxth	r3, r3
 8015e54:	1ad3      	subs	r3, r2, r3
 8015e56:	b29b      	uxth	r3, r3
 8015e58:	3373      	adds	r3, #115	; 0x73
 8015e5a:	b29b      	uxth	r3, r3
 8015e5c:	b21a      	sxth	r2, r3
 8015e5e:	4b12      	ldr	r3, [pc, #72]	; (8015ea8 <Auto_Fit+0x414>)
 8015e60:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84
           WaveProcess();
 8015e64:	f7ff f934 	bl	80150d0 <WaveProcess>
           Update_Proc_All();
 8015e68:	f7fe fdba 	bl	80149e0 <Update_Proc_All>
         }

      ParamTab[VTx2]= ParamTab[P1x2] + 2*List[THRESHOLD].Val;
 8015e6c:	4b17      	ldr	r3, [pc, #92]	; (8015ecc <Auto_Fit+0x438>)
 8015e6e:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8015e72:	b29a      	uxth	r2, r3
 8015e74:	4b0c      	ldr	r3, [pc, #48]	; (8015ea8 <Auto_Fit+0x414>)
 8015e76:	f9b3 3084 	ldrsh.w	r3, [r3, #132]	; 0x84
 8015e7a:	b29b      	uxth	r3, r3
 8015e7c:	005b      	lsls	r3, r3, #1
 8015e7e:	b29b      	uxth	r3, r3
 8015e80:	4413      	add	r3, r2
 8015e82:	b29b      	uxth	r3, r3
 8015e84:	b21a      	sxth	r2, r3
 8015e86:	4b11      	ldr	r3, [pc, #68]	; (8015ecc <Auto_Fit+0x438>)
 8015e88:	839a      	strh	r2, [r3, #28]
      List[THRESHOLD].Flg |= UPD;
 8015e8a:	4b07      	ldr	r3, [pc, #28]	; (8015ea8 <Auto_Fit+0x414>)
 8015e8c:	f893 3086 	ldrb.w	r3, [r3, #134]	; 0x86
 8015e90:	f043 0320 	orr.w	r3, r3, #32
 8015e94:	b2da      	uxtb	r2, r3
 8015e96:	4b04      	ldr	r3, [pc, #16]	; (8015ea8 <Auto_Fit+0x414>)
 8015e98:	f883 2086 	strb.w	r2, [r3, #134]	; 0x86
      Update_Title();
 8015e9c:	f7fc fa9c 	bl	80123d8 <Update_Title>

    //===========��ƽʱ��������==================
    HAL_Delay(100);
 8015ea0:	2064      	movs	r0, #100	; 0x64
 8015ea2:	f002 fa43 	bl	801832c <HAL_Delay>
 8015ea6:	e013      	b.n	8015ed0 <Auto_Fit+0x43c>
 8015ea8:	20000298 	.word	0x20000298
 8015eac:	20002856 	.word	0x20002856
 8015eb0:	2000057c 	.word	0x2000057c
 8015eb4:	20006886 	.word	0x20006886
 8015eb8:	20002862 	.word	0x20002862
 8015ebc:	2000284a 	.word	0x2000284a
 8015ec0:	20000560 	.word	0x20000560
 8015ec4:	20002868 	.word	0x20002868
 8015ec8:	2000286a 	.word	0x2000286a
 8015ecc:	20000140 	.word	0x20000140

        if(((((Vmid-2048)*((KgA[KindA+(StateA?1:0)]*4)/GK[GainA]))>>12)+100-List[V0_POSI].Val)>10){
 8015ed0:	4ba3      	ldr	r3, [pc, #652]	; (8016160 <Auto_Fit+0x6cc>)
 8015ed2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8015ed6:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 8015eda:	4aa2      	ldr	r2, [pc, #648]	; (8016164 <Auto_Fit+0x6d0>)
 8015edc:	6811      	ldr	r1, [r2, #0]
 8015ede:	4aa2      	ldr	r2, [pc, #648]	; (8016168 <Auto_Fit+0x6d4>)
 8015ee0:	f9b2 2000 	ldrsh.w	r2, [r2]
 8015ee4:	4610      	mov	r0, r2
 8015ee6:	4aa1      	ldr	r2, [pc, #644]	; (801616c <Auto_Fit+0x6d8>)
 8015ee8:	f9b2 2000 	ldrsh.w	r2, [r2]
 8015eec:	2a00      	cmp	r2, #0
 8015eee:	bf14      	ite	ne
 8015ef0:	2201      	movne	r2, #1
 8015ef2:	2200      	moveq	r2, #0
 8015ef4:	b2d2      	uxtb	r2, r2
 8015ef6:	4402      	add	r2, r0
 8015ef8:	0052      	lsls	r2, r2, #1
 8015efa:	440a      	add	r2, r1
 8015efc:	f9b2 2000 	ldrsh.w	r2, [r2]
 8015f00:	0092      	lsls	r2, r2, #2
 8015f02:	499b      	ldr	r1, [pc, #620]	; (8016170 <Auto_Fit+0x6dc>)
 8015f04:	f9b1 1000 	ldrsh.w	r1, [r1]
 8015f08:	4608      	mov	r0, r1
 8015f0a:	499a      	ldr	r1, [pc, #616]	; (8016174 <Auto_Fit+0x6e0>)
 8015f0c:	5c09      	ldrb	r1, [r1, r0]
 8015f0e:	fb92 f2f1 	sdiv	r2, r2, r1
 8015f12:	fb02 f303 	mul.w	r3, r2, r3
 8015f16:	131b      	asrs	r3, r3, #12
 8015f18:	3364      	adds	r3, #100	; 0x64
 8015f1a:	4a97      	ldr	r2, [pc, #604]	; (8016178 <Auto_Fit+0x6e4>)
 8015f1c:	f9b2 201c 	ldrsh.w	r2, [r2, #28]
 8015f20:	1a9b      	subs	r3, r3, r2
 8015f22:	2b0a      	cmp	r3, #10
 8015f24:	dd76      	ble.n	8016014 <Auto_Fit+0x580>
      WaveProcess();
 8015f26:	f7ff f8d3 	bl	80150d0 <WaveProcess>
      Update_Proc_All();
 8015f2a:	f7fe fd59 	bl	80149e0 <Update_Proc_All>
      HAL_Delay(100);
 8015f2e:	2064      	movs	r0, #100	; 0x64
 8015f30:	f002 f9fc 	bl	801832c <HAL_Delay>
      for(i=0;i<9;i++){
 8015f34:	2300      	movs	r3, #0
 8015f36:	71fb      	strb	r3, [r7, #7]
 8015f38:	e068      	b.n	801600c <Auto_Fit+0x578>
        WaveProcess();
 8015f3a:	f7ff f8c9 	bl	80150d0 <WaveProcess>
        Tmp1 = (((Vmax-2048)*((KgA[KindA+(StateA?1:0)]*4)/GK[GainA]))>>12)+100-List[V0_POSI].Val;
 8015f3e:	4b8f      	ldr	r3, [pc, #572]	; (801617c <Auto_Fit+0x6e8>)
 8015f40:	f9b3 3000 	ldrsh.w	r3, [r3]
 8015f44:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 8015f48:	4a86      	ldr	r2, [pc, #536]	; (8016164 <Auto_Fit+0x6d0>)
 8015f4a:	6811      	ldr	r1, [r2, #0]
 8015f4c:	4a86      	ldr	r2, [pc, #536]	; (8016168 <Auto_Fit+0x6d4>)
 8015f4e:	f9b2 2000 	ldrsh.w	r2, [r2]
 8015f52:	4610      	mov	r0, r2
 8015f54:	4a85      	ldr	r2, [pc, #532]	; (801616c <Auto_Fit+0x6d8>)
 8015f56:	f9b2 2000 	ldrsh.w	r2, [r2]
 8015f5a:	2a00      	cmp	r2, #0
 8015f5c:	bf14      	ite	ne
 8015f5e:	2201      	movne	r2, #1
 8015f60:	2200      	moveq	r2, #0
 8015f62:	b2d2      	uxtb	r2, r2
 8015f64:	4402      	add	r2, r0
 8015f66:	0052      	lsls	r2, r2, #1
 8015f68:	440a      	add	r2, r1
 8015f6a:	f9b2 2000 	ldrsh.w	r2, [r2]
 8015f6e:	0092      	lsls	r2, r2, #2
 8015f70:	497f      	ldr	r1, [pc, #508]	; (8016170 <Auto_Fit+0x6dc>)
 8015f72:	f9b1 1000 	ldrsh.w	r1, [r1]
 8015f76:	4608      	mov	r0, r1
 8015f78:	497e      	ldr	r1, [pc, #504]	; (8016174 <Auto_Fit+0x6e0>)
 8015f7a:	5c09      	ldrb	r1, [r1, r0]
 8015f7c:	fb92 f2f1 	sdiv	r2, r2, r1
 8015f80:	fb02 f303 	mul.w	r3, r2, r3
 8015f84:	131b      	asrs	r3, r3, #12
 8015f86:	b29a      	uxth	r2, r3
 8015f88:	4b7b      	ldr	r3, [pc, #492]	; (8016178 <Auto_Fit+0x6e4>)
 8015f8a:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 8015f8e:	b29b      	uxth	r3, r3
 8015f90:	1ad3      	subs	r3, r2, r3
 8015f92:	b29b      	uxth	r3, r3
 8015f94:	3364      	adds	r3, #100	; 0x64
 8015f96:	b29b      	uxth	r3, r3
 8015f98:	803b      	strh	r3, [r7, #0]
        if((Tmp1 < 40)&&(List[Y_RANGES].Val > 2)){       //40
 8015f9a:	f9b7 3000 	ldrsh.w	r3, [r7]
 8015f9e:	2b27      	cmp	r3, #39	; 0x27
 8015fa0:	dc15      	bgt.n	8015fce <Auto_Fit+0x53a>
 8015fa2:	4b75      	ldr	r3, [pc, #468]	; (8016178 <Auto_Fit+0x6e4>)
 8015fa4:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8015fa8:	2b02      	cmp	r3, #2
 8015faa:	dd10      	ble.n	8015fce <Auto_Fit+0x53a>
          List[Y_RANGES].Val--;
 8015fac:	4b72      	ldr	r3, [pc, #456]	; (8016178 <Auto_Fit+0x6e4>)
 8015fae:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8015fb2:	b29b      	uxth	r3, r3
 8015fb4:	3b01      	subs	r3, #1
 8015fb6:	b29b      	uxth	r3, r3
 8015fb8:	b21a      	sxth	r2, r3
 8015fba:	4b6f      	ldr	r3, [pc, #444]	; (8016178 <Auto_Fit+0x6e4>)
 8015fbc:	809a      	strh	r2, [r3, #4]
          List[V0_POSI].Val=100;
 8015fbe:	4b6e      	ldr	r3, [pc, #440]	; (8016178 <Auto_Fit+0x6e4>)
 8015fc0:	2264      	movs	r2, #100	; 0x64
 8015fc2:	839a      	strh	r2, [r3, #28]
          WaveProcess();
 8015fc4:	f7ff f884 	bl	80150d0 <WaveProcess>
          Update_Proc_All();
 8015fc8:	f7fe fd0a 	bl	80149e0 <Update_Proc_All>
 8015fcc:	e018      	b.n	8016000 <Auto_Fit+0x56c>
        }
        else if((Tmp1 > 100)&&(List[Y_RANGES].Val < 9)){ //110
 8015fce:	f9b7 3000 	ldrsh.w	r3, [r7]
 8015fd2:	2b64      	cmp	r3, #100	; 0x64
 8015fd4:	dd14      	ble.n	8016000 <Auto_Fit+0x56c>
 8015fd6:	4b68      	ldr	r3, [pc, #416]	; (8016178 <Auto_Fit+0x6e4>)
 8015fd8:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8015fdc:	2b08      	cmp	r3, #8
 8015fde:	dc0f      	bgt.n	8016000 <Auto_Fit+0x56c>
          List[Y_RANGES].Val++;
 8015fe0:	4b65      	ldr	r3, [pc, #404]	; (8016178 <Auto_Fit+0x6e4>)
 8015fe2:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8015fe6:	b29b      	uxth	r3, r3
 8015fe8:	3301      	adds	r3, #1
 8015fea:	b29b      	uxth	r3, r3
 8015fec:	b21a      	sxth	r2, r3
 8015fee:	4b62      	ldr	r3, [pc, #392]	; (8016178 <Auto_Fit+0x6e4>)
 8015ff0:	809a      	strh	r2, [r3, #4]
          List[V0_POSI].Val=100;
 8015ff2:	4b61      	ldr	r3, [pc, #388]	; (8016178 <Auto_Fit+0x6e4>)
 8015ff4:	2264      	movs	r2, #100	; 0x64
 8015ff6:	839a      	strh	r2, [r3, #28]
          WaveProcess();
 8015ff8:	f7ff f86a 	bl	80150d0 <WaveProcess>
          Update_Proc_All();
 8015ffc:	f7fe fcf0 	bl	80149e0 <Update_Proc_All>
        }
        HAL_Delay(50);
 8016000:	2032      	movs	r0, #50	; 0x32
 8016002:	f002 f993 	bl	801832c <HAL_Delay>
      for(i=0;i<9;i++){
 8016006:	79fb      	ldrb	r3, [r7, #7]
 8016008:	3301      	adds	r3, #1
 801600a:	71fb      	strb	r3, [r7, #7]
 801600c:	79fb      	ldrb	r3, [r7, #7]
 801600e:	2b08      	cmp	r3, #8
 8016010:	d993      	bls.n	8015f3a <Auto_Fit+0x4a6>
 8016012:	e054      	b.n	80160be <Auto_Fit+0x62a>
      }
    }
    else if((((((Vmax-2048)*((KgA[KindA+(StateA?1:0)]*4)/GK[GainA]))>>12)+100-List[V0_POSI].Val)
 8016014:	4b59      	ldr	r3, [pc, #356]	; (801617c <Auto_Fit+0x6e8>)
 8016016:	f9b3 3000 	ldrsh.w	r3, [r3]
 801601a:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 801601e:	4a51      	ldr	r2, [pc, #324]	; (8016164 <Auto_Fit+0x6d0>)
 8016020:	6811      	ldr	r1, [r2, #0]
 8016022:	4a51      	ldr	r2, [pc, #324]	; (8016168 <Auto_Fit+0x6d4>)
 8016024:	f9b2 2000 	ldrsh.w	r2, [r2]
 8016028:	4610      	mov	r0, r2
 801602a:	4a50      	ldr	r2, [pc, #320]	; (801616c <Auto_Fit+0x6d8>)
 801602c:	f9b2 2000 	ldrsh.w	r2, [r2]
 8016030:	2a00      	cmp	r2, #0
 8016032:	bf14      	ite	ne
 8016034:	2201      	movne	r2, #1
 8016036:	2200      	moveq	r2, #0
 8016038:	b2d2      	uxtb	r2, r2
 801603a:	4402      	add	r2, r0
 801603c:	0052      	lsls	r2, r2, #1
 801603e:	440a      	add	r2, r1
 8016040:	f9b2 2000 	ldrsh.w	r2, [r2]
 8016044:	0092      	lsls	r2, r2, #2
 8016046:	494a      	ldr	r1, [pc, #296]	; (8016170 <Auto_Fit+0x6dc>)
 8016048:	f9b1 1000 	ldrsh.w	r1, [r1]
 801604c:	4608      	mov	r0, r1
 801604e:	4949      	ldr	r1, [pc, #292]	; (8016174 <Auto_Fit+0x6e0>)
 8016050:	5c09      	ldrb	r1, [r1, r0]
 8016052:	fb92 f2f1 	sdiv	r2, r2, r1
 8016056:	fb02 f303 	mul.w	r3, r2, r3
 801605a:	131a      	asrs	r2, r3, #12
         - ((((Vmin-2048)*((KgA[KindA+(StateA?1:0)]*4)/GK[GainA]))>>12)+100-List[V0_POSI].Val)) <10){
 801605c:	4b48      	ldr	r3, [pc, #288]	; (8016180 <Auto_Fit+0x6ec>)
 801605e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016062:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 8016066:	493f      	ldr	r1, [pc, #252]	; (8016164 <Auto_Fit+0x6d0>)
 8016068:	6808      	ldr	r0, [r1, #0]
 801606a:	493f      	ldr	r1, [pc, #252]	; (8016168 <Auto_Fit+0x6d4>)
 801606c:	f9b1 1000 	ldrsh.w	r1, [r1]
 8016070:	460c      	mov	r4, r1
 8016072:	493e      	ldr	r1, [pc, #248]	; (801616c <Auto_Fit+0x6d8>)
 8016074:	f9b1 1000 	ldrsh.w	r1, [r1]
 8016078:	2900      	cmp	r1, #0
 801607a:	bf14      	ite	ne
 801607c:	2101      	movne	r1, #1
 801607e:	2100      	moveq	r1, #0
 8016080:	b2c9      	uxtb	r1, r1
 8016082:	4421      	add	r1, r4
 8016084:	0049      	lsls	r1, r1, #1
 8016086:	4401      	add	r1, r0
 8016088:	f9b1 1000 	ldrsh.w	r1, [r1]
 801608c:	0089      	lsls	r1, r1, #2
 801608e:	4838      	ldr	r0, [pc, #224]	; (8016170 <Auto_Fit+0x6dc>)
 8016090:	f9b0 0000 	ldrsh.w	r0, [r0]
 8016094:	4604      	mov	r4, r0
 8016096:	4837      	ldr	r0, [pc, #220]	; (8016174 <Auto_Fit+0x6e0>)
 8016098:	5d00      	ldrb	r0, [r0, r4]
 801609a:	fb91 f1f0 	sdiv	r1, r1, r0
 801609e:	fb01 f303 	mul.w	r3, r1, r3
 80160a2:	131b      	asrs	r3, r3, #12
 80160a4:	1ad3      	subs	r3, r2, r3
    else if((((((Vmax-2048)*((KgA[KindA+(StateA?1:0)]*4)/GK[GainA]))>>12)+100-List[V0_POSI].Val)
 80160a6:	2b09      	cmp	r3, #9
 80160a8:	dc09      	bgt.n	80160be <Auto_Fit+0x62a>
      //===========���ź�ʱ��ѹ��2V==================
        List[Y_RANGES].Val=7; //2v
 80160aa:	4b33      	ldr	r3, [pc, #204]	; (8016178 <Auto_Fit+0x6e4>)
 80160ac:	2207      	movs	r2, #7
 80160ae:	809a      	strh	r2, [r3, #4]
        WaveProcess();
 80160b0:	f7ff f80e 	bl	80150d0 <WaveProcess>
        Update_Proc_All();
 80160b4:	f7fe fc94 	bl	80149e0 <Update_Proc_All>
        HAL_Delay(50);
 80160b8:	2032      	movs	r0, #50	; 0x32
 80160ba:	f002 f937 	bl	801832c <HAL_Delay>


    //======ʱ���Զ�ѡ��==============

    //if(!List[TRI_Ch].Val){//******Aͨ��***********
      Tmp1 = ((((Vmax-2048)*((KgA[KindA+(StateA?1:0)]*4)/GK[GainA]))>>12)+100-List[V0_POSI].Val)
 80160be:	4b2f      	ldr	r3, [pc, #188]	; (801617c <Auto_Fit+0x6e8>)
 80160c0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80160c4:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 80160c8:	4a26      	ldr	r2, [pc, #152]	; (8016164 <Auto_Fit+0x6d0>)
 80160ca:	6811      	ldr	r1, [r2, #0]
 80160cc:	4a26      	ldr	r2, [pc, #152]	; (8016168 <Auto_Fit+0x6d4>)
 80160ce:	f9b2 2000 	ldrsh.w	r2, [r2]
 80160d2:	4610      	mov	r0, r2
 80160d4:	4a25      	ldr	r2, [pc, #148]	; (801616c <Auto_Fit+0x6d8>)
 80160d6:	f9b2 2000 	ldrsh.w	r2, [r2]
 80160da:	2a00      	cmp	r2, #0
 80160dc:	bf14      	ite	ne
 80160de:	2201      	movne	r2, #1
 80160e0:	2200      	moveq	r2, #0
 80160e2:	b2d2      	uxtb	r2, r2
 80160e4:	4402      	add	r2, r0
 80160e6:	0052      	lsls	r2, r2, #1
 80160e8:	440a      	add	r2, r1
 80160ea:	f9b2 2000 	ldrsh.w	r2, [r2]
 80160ee:	0092      	lsls	r2, r2, #2
 80160f0:	491f      	ldr	r1, [pc, #124]	; (8016170 <Auto_Fit+0x6dc>)
 80160f2:	f9b1 1000 	ldrsh.w	r1, [r1]
 80160f6:	4608      	mov	r0, r1
 80160f8:	491e      	ldr	r1, [pc, #120]	; (8016174 <Auto_Fit+0x6e0>)
 80160fa:	5c09      	ldrb	r1, [r1, r0]
 80160fc:	fb92 f2f1 	sdiv	r2, r2, r1
 8016100:	fb02 f303 	mul.w	r3, r2, r3
 8016104:	131b      	asrs	r3, r3, #12
           - ((((Vmin-2048)*((KgA[KindA+(StateA?1:0)]*4)/GK[GainA]))>>12)+100-List[V0_POSI].Val);
 8016106:	b29a      	uxth	r2, r3
 8016108:	4b1d      	ldr	r3, [pc, #116]	; (8016180 <Auto_Fit+0x6ec>)
 801610a:	f9b3 3000 	ldrsh.w	r3, [r3]
 801610e:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 8016112:	4914      	ldr	r1, [pc, #80]	; (8016164 <Auto_Fit+0x6d0>)
 8016114:	6808      	ldr	r0, [r1, #0]
 8016116:	4914      	ldr	r1, [pc, #80]	; (8016168 <Auto_Fit+0x6d4>)
 8016118:	f9b1 1000 	ldrsh.w	r1, [r1]
 801611c:	460c      	mov	r4, r1
 801611e:	4913      	ldr	r1, [pc, #76]	; (801616c <Auto_Fit+0x6d8>)
 8016120:	f9b1 1000 	ldrsh.w	r1, [r1]
 8016124:	2900      	cmp	r1, #0
 8016126:	bf14      	ite	ne
 8016128:	2101      	movne	r1, #1
 801612a:	2100      	moveq	r1, #0
 801612c:	b2c9      	uxtb	r1, r1
 801612e:	4421      	add	r1, r4
 8016130:	0049      	lsls	r1, r1, #1
 8016132:	4401      	add	r1, r0
 8016134:	f9b1 1000 	ldrsh.w	r1, [r1]
 8016138:	0089      	lsls	r1, r1, #2
 801613a:	480d      	ldr	r0, [pc, #52]	; (8016170 <Auto_Fit+0x6dc>)
 801613c:	f9b0 0000 	ldrsh.w	r0, [r0]
 8016140:	4604      	mov	r4, r0
 8016142:	480c      	ldr	r0, [pc, #48]	; (8016174 <Auto_Fit+0x6e0>)
 8016144:	5d00      	ldrb	r0, [r0, r4]
 8016146:	fb91 f1f0 	sdiv	r1, r1, r0
 801614a:	fb01 f303 	mul.w	r3, r1, r3
 801614e:	131b      	asrs	r3, r3, #12
 8016150:	b29b      	uxth	r3, r3
 8016152:	1ad3      	subs	r3, r2, r3
 8016154:	b29b      	uxth	r3, r3
      Tmp1 = ((((Vmax-2048)*((KgA[KindA+(StateA?1:0)]*4)/GK[GainA]))>>12)+100-List[V0_POSI].Val)
 8016156:	803b      	strh	r3, [r7, #0]
      for(j=0;j<11;j++){
 8016158:	2300      	movs	r3, #0
 801615a:	71bb      	strb	r3, [r7, #6]
 801615c:	e06e      	b.n	801623c <Auto_Fit+0x7a8>
 801615e:	bf00      	nop
 8016160:	2000286a 	.word	0x2000286a
 8016164:	2000057c 	.word	0x2000057c
 8016168:	20006886 	.word	0x20006886
 801616c:	20002862 	.word	0x20002862
 8016170:	2000284a 	.word	0x2000284a
 8016174:	20000560 	.word	0x20000560
 8016178:	20000298 	.word	0x20000298
 801617c:	20002856 	.word	0x20002856
 8016180:	20002868 	.word	0x20002868
        WaveProcess();
 8016184:	f7fe ffa4 	bl	80150d0 <WaveProcess>
        if((k==0)&&(Edge < 60)&&(List[TIM_BASE].Val >5)){
 8016188:	797b      	ldrb	r3, [r7, #5]
 801618a:	2b00      	cmp	r3, #0
 801618c:	d114      	bne.n	80161b8 <Auto_Fit+0x724>
 801618e:	4b38      	ldr	r3, [pc, #224]	; (8016270 <Auto_Fit+0x7dc>)
 8016190:	681b      	ldr	r3, [r3, #0]
 8016192:	2b3b      	cmp	r3, #59	; 0x3b
 8016194:	dc10      	bgt.n	80161b8 <Auto_Fit+0x724>
 8016196:	4b37      	ldr	r3, [pc, #220]	; (8016274 <Auto_Fit+0x7e0>)
 8016198:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 801619c:	2b05      	cmp	r3, #5
 801619e:	dd0b      	ble.n	80161b8 <Auto_Fit+0x724>
          Set_Base(5);                           // Ӳ������ɨ��ʱ����λ
 80161a0:	2005      	movs	r0, #5
 80161a2:	f7f6 fa1d 	bl	800c5e0 <Set_Base>
          List[TIM_BASE].Val = 5;
 80161a6:	4b33      	ldr	r3, [pc, #204]	; (8016274 <Auto_Fit+0x7e0>)
 80161a8:	2205      	movs	r2, #5
 80161aa:	879a      	strh	r2, [r3, #60]	; 0x3c
          WaveProcess();
 80161ac:	f7fe ff90 	bl	80150d0 <WaveProcess>
          Update_Proc_All();
 80161b0:	f7fe fc16 	bl	80149e0 <Update_Proc_All>
          k=1;
 80161b4:	2301      	movs	r3, #1
 80161b6:	717b      	strb	r3, [r7, #5]
        }
        if((Edge > 180)&&(List[TIM_BASE].Val > 2)){
 80161b8:	4b2d      	ldr	r3, [pc, #180]	; (8016270 <Auto_Fit+0x7dc>)
 80161ba:	681b      	ldr	r3, [r3, #0]
 80161bc:	2bb4      	cmp	r3, #180	; 0xb4
 80161be:	dd1b      	ble.n	80161f8 <Auto_Fit+0x764>
 80161c0:	4b2c      	ldr	r3, [pc, #176]	; (8016274 <Auto_Fit+0x7e0>)
 80161c2:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 80161c6:	2b02      	cmp	r3, #2
 80161c8:	dd16      	ble.n	80161f8 <Auto_Fit+0x764>
          List[TIM_BASE].Val--;
 80161ca:	4b2a      	ldr	r3, [pc, #168]	; (8016274 <Auto_Fit+0x7e0>)
 80161cc:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 80161d0:	b29b      	uxth	r3, r3
 80161d2:	3b01      	subs	r3, #1
 80161d4:	b29b      	uxth	r3, r3
 80161d6:	b21a      	sxth	r2, r3
 80161d8:	4b26      	ldr	r3, [pc, #152]	; (8016274 <Auto_Fit+0x7e0>)
 80161da:	879a      	strh	r2, [r3, #60]	; 0x3c
          Set_Base(List[TIM_BASE].Val);   // Ӳ������ɨ��ʱ����λ
 80161dc:	4b25      	ldr	r3, [pc, #148]	; (8016274 <Auto_Fit+0x7e0>)
 80161de:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 80161e2:	4618      	mov	r0, r3
 80161e4:	f7f6 f9fc 	bl	800c5e0 <Set_Base>
          WaveProcess();
 80161e8:	f7fe ff72 	bl	80150d0 <WaveProcess>
                 Update_Proc_All();
 80161ec:	f7fe fbf8 	bl	80149e0 <Update_Proc_All>
          HAL_Delay(50);
 80161f0:	2032      	movs	r0, #50	; 0x32
 80161f2:	f002 f89b 	bl	801832c <HAL_Delay>
 80161f6:	e01e      	b.n	8016236 <Auto_Fit+0x7a2>
        }
        else if((Edge < 80)&&(List[TIM_BASE].Val< 11)){
 80161f8:	4b1d      	ldr	r3, [pc, #116]	; (8016270 <Auto_Fit+0x7dc>)
 80161fa:	681b      	ldr	r3, [r3, #0]
 80161fc:	2b4f      	cmp	r3, #79	; 0x4f
 80161fe:	dc1a      	bgt.n	8016236 <Auto_Fit+0x7a2>
 8016200:	4b1c      	ldr	r3, [pc, #112]	; (8016274 <Auto_Fit+0x7e0>)
 8016202:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8016206:	2b0a      	cmp	r3, #10
 8016208:	dc15      	bgt.n	8016236 <Auto_Fit+0x7a2>
          List[TIM_BASE].Val++;
 801620a:	4b1a      	ldr	r3, [pc, #104]	; (8016274 <Auto_Fit+0x7e0>)
 801620c:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8016210:	b29b      	uxth	r3, r3
 8016212:	3301      	adds	r3, #1
 8016214:	b29b      	uxth	r3, r3
 8016216:	b21a      	sxth	r2, r3
 8016218:	4b16      	ldr	r3, [pc, #88]	; (8016274 <Auto_Fit+0x7e0>)
 801621a:	879a      	strh	r2, [r3, #60]	; 0x3c
          Set_Base(List[TIM_BASE].Val);   // Ӳ������ɨ��ʱ����λ
 801621c:	4b15      	ldr	r3, [pc, #84]	; (8016274 <Auto_Fit+0x7e0>)
 801621e:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8016222:	4618      	mov	r0, r3
 8016224:	f7f6 f9dc 	bl	800c5e0 <Set_Base>
          WaveProcess();
 8016228:	f7fe ff52 	bl	80150d0 <WaveProcess>
                 Update_Proc_All();
 801622c:	f7fe fbd8 	bl	80149e0 <Update_Proc_All>
          HAL_Delay(50);
 8016230:	2032      	movs	r0, #50	; 0x32
 8016232:	f002 f87b 	bl	801832c <HAL_Delay>
      for(j=0;j<11;j++){
 8016236:	79bb      	ldrb	r3, [r7, #6]
 8016238:	3301      	adds	r3, #1
 801623a:	71bb      	strb	r3, [r7, #6]
 801623c:	79bb      	ldrb	r3, [r7, #6]
 801623e:	2b0a      	cmp	r3, #10
 8016240:	d9a0      	bls.n	8016184 <Auto_Fit+0x6f0>
        }
      }

      if(Tmp1 < 20){
 8016242:	f9b7 3000 	ldrsh.w	r3, [r7]
 8016246:	2b13      	cmp	r3, #19
 8016248:	dc0b      	bgt.n	8016262 <Auto_Fit+0x7ce>
        List[TIM_BASE].Val=5; //50us
 801624a:	4b0a      	ldr	r3, [pc, #40]	; (8016274 <Auto_Fit+0x7e0>)
 801624c:	2205      	movs	r2, #5
 801624e:	879a      	strh	r2, [r3, #60]	; 0x3c
        Set_Base(List[TIM_BASE].Val);   // Ӳ������ɨ��ʱ����λ
 8016250:	4b08      	ldr	r3, [pc, #32]	; (8016274 <Auto_Fit+0x7e0>)
 8016252:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8016256:	4618      	mov	r0, r3
 8016258:	f7f6 f9c2 	bl	800c5e0 <Set_Base>
        HAL_Delay(50);
 801625c:	2032      	movs	r0, #50	; 0x32
 801625e:	f002 f865 	bl	801832c <HAL_Delay>
      }
       Update_Proc_All();
 8016262:	f7fe fbbd 	bl	80149e0 <Update_Proc_All>
  }
}
 8016266:	bf00      	nop
 8016268:	370c      	adds	r7, #12
 801626a:	46bd      	mov	sp, r7
 801626c:	bd90      	pop	{r4, r7, pc}
 801626e:	bf00      	nop
 8016270:	20002850 	.word	0x20002850
 8016274:	20000298 	.word	0x20000298

08016278 <Init_Touch>:

unsigned char val[2]; //input buffer

// initialize touch screen
void Init_Touch(void)
{
 8016278:	b580      	push	{r7, lr}
 801627a:	af00      	add	r7, sp, #0
	Touch_SPI();
 801627c:	f000 f810 	bl	80162a0 <Touch_SPI>
	HAL_GPIO_WritePin( TpCs_GPIO_Port, TpCs_Pin, GPIO_PIN_RESET);
 8016280:	2200      	movs	r2, #0
 8016282:	2140      	movs	r1, #64	; 0x40
 8016284:	4805      	ldr	r0, [pc, #20]	; (801629c <Init_Touch+0x24>)
 8016286:	f003 fc2f 	bl	8019ae8 <HAL_GPIO_WritePin>
// not needed yet
	HAL_GPIO_WritePin( TpCs_GPIO_Port, TpCs_Pin, GPIO_PIN_SET);
 801628a:	2201      	movs	r2, #1
 801628c:	2140      	movs	r1, #64	; 0x40
 801628e:	4803      	ldr	r0, [pc, #12]	; (801629c <Init_Touch+0x24>)
 8016290:	f003 fc2a 	bl	8019ae8 <HAL_GPIO_WritePin>
	LCD_SPI();
 8016294:	f000 f814 	bl	80162c0 <LCD_SPI>
}
 8016298:	bf00      	nop
 801629a:	bd80      	pop	{r7, pc}
 801629c:	40020400 	.word	0x40020400

080162a0 <Touch_SPI>:

// set SPI for touch controller
void Touch_SPI(void)
{
 80162a0:	b580      	push	{r7, lr}
 80162a2:	af00      	add	r7, sp, #0
//	HAL_SPI_DeInit(&hspi3);  switch on the fly
	hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 80162a4:	4b05      	ldr	r3, [pc, #20]	; (80162bc <Touch_SPI+0x1c>)
 80162a6:	2200      	movs	r2, #0
 80162a8:	60da      	str	r2, [r3, #12]
	hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16; //slow clock for touch controller
 80162aa:	4b04      	ldr	r3, [pc, #16]	; (80162bc <Touch_SPI+0x1c>)
 80162ac:	2218      	movs	r2, #24
 80162ae:	61da      	str	r2, [r3, #28]
	HAL_SPI_Init(&hspi3);
 80162b0:	4802      	ldr	r0, [pc, #8]	; (80162bc <Touch_SPI+0x1c>)
 80162b2:	f005 fe95 	bl	801bfe0 <HAL_SPI_Init>
}
 80162b6:	bf00      	nop
 80162b8:	bd80      	pop	{r7, pc}
 80162ba:	bf00      	nop
 80162bc:	200069c0 	.word	0x200069c0

080162c0 <LCD_SPI>:

// set SPI for LCD display
void LCD_SPI(void)
{
 80162c0:	b580      	push	{r7, lr}
 80162c2:	af00      	add	r7, sp, #0
//	HAL_SPI_DeInit(&hspi3); switch on fly
	hspi3.Init.DataSize = SPI_DATASIZE_16BIT;
 80162c4:	4b05      	ldr	r3, [pc, #20]	; (80162dc <LCD_SPI+0x1c>)
 80162c6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80162ca:	60da      	str	r2, [r3, #12]
	hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 80162cc:	4b03      	ldr	r3, [pc, #12]	; (80162dc <LCD_SPI+0x1c>)
 80162ce:	2210      	movs	r2, #16
 80162d0:	61da      	str	r2, [r3, #28]
	HAL_SPI_Init(&hspi3);
 80162d2:	4802      	ldr	r0, [pc, #8]	; (80162dc <LCD_SPI+0x1c>)
 80162d4:	f005 fe84 	bl	801bfe0 <HAL_SPI_Init>
}
 80162d8:	bf00      	nop
 80162da:	bd80      	pop	{r7, pc}
 80162dc:	200069c0 	.word	0x200069c0

080162e0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80162e0:	b580      	push	{r7, lr}
 80162e2:	b082      	sub	sp, #8
 80162e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
  short i;
  char SAVE_FLAG = 0;
 80162e6:	2300      	movs	r3, #0
 80162e8:	717b      	strb	r3, [r7, #5]
  char Pop_Num = 0;
 80162ea:	2300      	movs	r3, #0
 80162ec:	713b      	strb	r3, [r7, #4]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80162ee:	f001 ffab 	bl	8018248 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80162f2:	f001 f81d 	bl	8017330 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80162f6:	f001 fbbf 	bl	8017a78 <MX_GPIO_Init>
  MX_DMA_Init();
 80162fa:	f001 fb87 	bl	8017a0c <MX_DMA_Init>
  MX_ADC1_Init();
 80162fe:	f001 f88b 	bl	8017418 <MX_ADC1_Init>
  MX_ADC2_Init();
 8016302:	f001 f8db 	bl	80174bc <MX_ADC2_Init>
  MX_DAC_Init();
 8016306:	f001 f92b 	bl	8017560 <MX_DAC_Init>
  MX_SPI2_Init();
 801630a:	f001 f967 	bl	80175dc <MX_SPI2_Init>
  MX_SPI3_Init();
 801630e:	f001 f99b 	bl	8017648 <MX_SPI3_Init>
  MX_TIM1_Init();
 8016312:	f001 f9d1 	bl	80176b8 <MX_TIM1_Init>
  MX_TIM3_Init();
 8016316:	f001 fa45 	bl	80177a4 <MX_TIM3_Init>
  MX_TIM5_Init();
 801631a:	f001 faa3 	bl	8017864 <MX_TIM5_Init>
  MX_USB_DEVICE_Init();
 801631e:	f00b fe8d 	bl	802203c <MX_USB_DEVICE_Init>
  MX_TIM7_Init();
 8016322:	f001 fb2d 	bl	8017980 <MX_TIM7_Init>
  /* USER CODE BEGIN 2 */

  Init_LCD();
 8016326:	f7fb fd9f 	bl	8011e68 <Init_LCD>
  Init_Touch();
 801632a:	f7ff ffa5 	bl	8016278 <Init_Touch>

  SetColor(BLK, WHT);
 801632e:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8016332:	2000      	movs	r0, #0
 8016334:	f7f7 fc8c 	bl	800dc50 <SetColor>

  DispStr8x14(8, 90, PRN, "         Oscilloscope              ");
 8016338:	4bb3      	ldr	r3, [pc, #716]	; (8016608 <main+0x328>)
 801633a:	2200      	movs	r2, #0
 801633c:	215a      	movs	r1, #90	; 0x5a
 801633e:	2008      	movs	r0, #8
 8016340:	f7f7 fc2e 	bl	800dba0 <DispStr8x14>
  DispStr8x14(8+22*8, 90, PRN, APP_VERSION);
 8016344:	4bb1      	ldr	r3, [pc, #708]	; (801660c <main+0x32c>)
 8016346:	2200      	movs	r2, #0
 8016348:	215a      	movs	r1, #90	; 0x5a
 801634a:	20b8      	movs	r0, #184	; 0xb8
 801634c:	f7f7 fc28 	bl	800dba0 <DispStr8x14>
  DispStr8x14(8, 70, PRN, "        System Initializing...       ");
 8016350:	4baf      	ldr	r3, [pc, #700]	; (8016610 <main+0x330>)
 8016352:	2200      	movs	r2, #0
 8016354:	2146      	movs	r1, #70	; 0x46
 8016356:	2008      	movs	r0, #8
 8016358:	f7f7 fc22 	bl	800dba0 <DispStr8x14>

  HAL_Delay(1000);
 801635c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8016360:	f001 ffe4 	bl	801832c <HAL_Delay>

//=============================check callibration׼===========================
  Read_CalFlag();
 8016364:	f7fa ffe8 	bl	8011338 <Read_CalFlag>

  if(Cal_Flag == 1)
 8016368:	4baa      	ldr	r3, [pc, #680]	; (8016614 <main+0x334>)
 801636a:	781b      	ldrb	r3, [r3, #0]
 801636c:	2b01      	cmp	r3, #1
 801636e:	d10f      	bne.n	8016390 <main+0xb0>
  {
	  Cal_Flag = 0;
 8016370:	4ba8      	ldr	r3, [pc, #672]	; (8016614 <main+0x334>)
 8016372:	2200      	movs	r2, #0
 8016374:	701a      	strb	r2, [r3, #0]
	  SetColor(BLK, WHT);
 8016376:	f64f 71ff 	movw	r1, #65535	; 0xffff
 801637a:	2000      	movs	r0, #0
 801637c:	f7f7 fc68 	bl	800dc50 <SetColor>
	  Zero_Align();                              //set zero
 8016380:	f7fe fdb0 	bl	8014ee4 <Zero_Align>
	  Restore();                                 //restore list
 8016384:	f7fb f9e2 	bl	801174c <Restore>
	  Save_Parameter();                          //save list
 8016388:	f7fa fffe 	bl	8011388 <Save_Parameter>
	  Save_Kpg();
 801638c:	f7fb f926 	bl	80115dc <Save_Kpg>
  }
  Read_Kpg();
 8016390:	f7fb f99a 	bl	80116c8 <Read_Kpg>
  Read_Parameter();
 8016394:	f7fb f894 	bl	80114c0 <Read_Parameter>
  File_Num();
 8016398:	f7f9 fcda 	bl	800fd50 <File_Num>
  memcpy(Data, DEMO, 310);
 801639c:	f44f 729b 	mov.w	r2, #310	; 0x136
 80163a0:	499d      	ldr	r1, [pc, #628]	; (8016618 <main+0x338>)
 80163a2:	489e      	ldr	r0, [pc, #632]	; (801661c <main+0x33c>)
 80163a4:	f00c fbe8 	bl	8022b78 <memcpy>

  LCD_ClrScrn(GRY);
 80163a8:	f643 10e7 	movw	r0, #14823	; 0x39e7
 80163ac:	f7fb fe72 	bl	8012094 <LCD_ClrScrn>
  Update_Title();
 80163b0:	f7fc f812 	bl	80123d8 <Update_Title>

  List[SMPL_DPTH].Flg |= UPD;
 80163b4:	4b9a      	ldr	r3, [pc, #616]	; (8016620 <main+0x340>)
 80163b6:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 80163ba:	f043 0320 	orr.w	r3, r3, #32
 80163be:	b2da      	uxtb	r2, r3
 80163c0:	4b97      	ldr	r3, [pc, #604]	; (8016620 <main+0x340>)
 80163c2:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e

  StdBy_Time = List[STANDBY].Val * MIN_UNIT;
 80163c6:	4b96      	ldr	r3, [pc, #600]	; (8016620 <main+0x340>)
 80163c8:	f9b3 314c 	ldrsh.w	r3, [r3, #332]	; 0x14c
 80163cc:	b29b      	uxth	r3, r3
 80163ce:	461a      	mov	r2, r3
 80163d0:	0112      	lsls	r2, r2, #4
 80163d2:	1ad3      	subs	r3, r2, r3
 80163d4:	009b      	lsls	r3, r3, #2
 80163d6:	b29b      	uxth	r3, r3
 80163d8:	b21a      	sxth	r2, r3
 80163da:	4b92      	ldr	r3, [pc, #584]	; (8016624 <main+0x344>)
 80163dc:	801a      	strh	r2, [r3, #0]

  // Start timer
  HAL_TIM_Base_Start_IT(&htim3);
 80163de:	4892      	ldr	r0, [pc, #584]	; (8016628 <main+0x348>)
 80163e0:	f006 fd22 	bl	801ce28 <HAL_TIM_Base_Start_IT>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	    if((List[STANDBY].Val != 0)&&(StdBy_Time == 0))
 80163e4:	4b8e      	ldr	r3, [pc, #568]	; (8016620 <main+0x340>)
 80163e6:	f9b3 314c 	ldrsh.w	r3, [r3, #332]	; 0x14c
 80163ea:	2b00      	cmp	r3, #0
 80163ec:	d007      	beq.n	80163fe <main+0x11e>
 80163ee:	4b8d      	ldr	r3, [pc, #564]	; (8016624 <main+0x344>)
 80163f0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80163f4:	2b00      	cmp	r3, #0
 80163f6:	d102      	bne.n	80163fe <main+0x11e>
	    {
	      StdBy_Flag = 1;
 80163f8:	4b8c      	ldr	r3, [pc, #560]	; (801662c <main+0x34c>)
 80163fa:	2201      	movs	r2, #1
 80163fc:	701a      	strb	r2, [r3, #0]
	    }

	    Update_Detail();
 80163fe:	f7fc ff57 	bl	80132b0 <Update_Detail>
	    Update_Blink();
 8016402:	f7fc f83d 	bl	8012480 <Update_Blink>
	    WaveProcess();
 8016406:	f7fe fe63 	bl	80150d0 <WaveProcess>
	    DrawWindow(WaveBuf, ParamTab);
 801640a:	4989      	ldr	r1, [pc, #548]	; (8016630 <main+0x350>)
 801640c:	4889      	ldr	r0, [pc, #548]	; (8016634 <main+0x354>)
 801640e:	f7f7 f9a3 	bl	800d758 <DrawWindow>

	   if(TIM_BASE_Val!=0)
 8016412:	4b89      	ldr	r3, [pc, #548]	; (8016638 <main+0x358>)
 8016414:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016418:	2b00      	cmp	r3, #0
 801641a:	d01c      	beq.n	8016456 <main+0x176>
	    {
	      List[TIM_BASE].Val=TIM_BASE_Val;
 801641c:	4b86      	ldr	r3, [pc, #536]	; (8016638 <main+0x358>)
 801641e:	f9b3 2000 	ldrsh.w	r2, [r3]
 8016422:	4b7f      	ldr	r3, [pc, #508]	; (8016620 <main+0x340>)
 8016424:	879a      	strh	r2, [r3, #60]	; 0x3c
	      List[TIM_BASE].Flg |= UPD;
 8016426:	4b7e      	ldr	r3, [pc, #504]	; (8016620 <main+0x340>)
 8016428:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 801642c:	f043 0320 	orr.w	r3, r3, #32
 8016430:	b2da      	uxtb	r2, r3
 8016432:	4b7b      	ldr	r3, [pc, #492]	; (8016620 <main+0x340>)
 8016434:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
	      TIM_BASE_Val=Current;
 8016438:	4b80      	ldr	r3, [pc, #512]	; (801663c <main+0x35c>)
 801643a:	f9b3 2000 	ldrsh.w	r2, [r3]
 801643e:	4b7e      	ldr	r3, [pc, #504]	; (8016638 <main+0x358>)
 8016440:	801a      	strh	r2, [r3, #0]
	      Update_Title();
 8016442:	f7fb ffc9 	bl	80123d8 <Update_Title>
	      Current=TIM_BASE_Val;
 8016446:	4b7c      	ldr	r3, [pc, #496]	; (8016638 <main+0x358>)
 8016448:	f9b3 2000 	ldrsh.w	r2, [r3]
 801644c:	4b7b      	ldr	r3, [pc, #492]	; (801663c <main+0x35c>)
 801644e:	801a      	strh	r2, [r3, #0]
	      TIM_BASE_Val=0;
 8016450:	4b79      	ldr	r3, [pc, #484]	; (8016638 <main+0x358>)
 8016452:	2200      	movs	r2, #0
 8016454:	801a      	strh	r2, [r3, #0]
	    }
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	    if(Key_Buffer != 0)
 8016456:	4b7a      	ldr	r3, [pc, #488]	; (8016640 <main+0x360>)
 8016458:	781b      	ldrb	r3, [r3, #0]
 801645a:	b2db      	uxtb	r3, r3
 801645c:	2b00      	cmp	r3, #0
 801645e:	d0c1      	beq.n	80163e4 <main+0x104>
	    {
	      StdBy_Flag = 0;
 8016460:	4b72      	ldr	r3, [pc, #456]	; (801662c <main+0x34c>)
 8016462:	2200      	movs	r2, #0
 8016464:	701a      	strb	r2, [r3, #0]
	      PopupCnt = 10;                  // �ް���ʱ�˵���ά����ʾ 10��
 8016466:	4b77      	ldr	r3, [pc, #476]	; (8016644 <main+0x364>)
 8016468:	220a      	movs	r2, #10
 801646a:	801a      	strh	r2, [r3, #0]
	      List[MenuNow[Current]].Flg |= UPD;
 801646c:	4b73      	ldr	r3, [pc, #460]	; (801663c <main+0x35c>)
 801646e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016472:	461a      	mov	r2, r3
 8016474:	4b74      	ldr	r3, [pc, #464]	; (8016648 <main+0x368>)
 8016476:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 801647a:	4a69      	ldr	r2, [pc, #420]	; (8016620 <main+0x340>)
 801647c:	00db      	lsls	r3, r3, #3
 801647e:	4413      	add	r3, r2
 8016480:	799b      	ldrb	r3, [r3, #6]
 8016482:	4a6e      	ldr	r2, [pc, #440]	; (801663c <main+0x35c>)
 8016484:	f9b2 2000 	ldrsh.w	r2, [r2]
 8016488:	4611      	mov	r1, r2
 801648a:	4a6f      	ldr	r2, [pc, #444]	; (8016648 <main+0x368>)
 801648c:	f932 2011 	ldrsh.w	r2, [r2, r1, lsl #1]
 8016490:	4610      	mov	r0, r2
 8016492:	f043 0320 	orr.w	r3, r3, #32
 8016496:	b2d9      	uxtb	r1, r3
 8016498:	4a61      	ldr	r2, [pc, #388]	; (8016620 <main+0x340>)
 801649a:	00c3      	lsls	r3, r0, #3
 801649c:	4413      	add	r3, r2
 801649e:	460a      	mov	r2, r1
 80164a0:	719a      	strb	r2, [r3, #6]

	      switch (Key_Buffer)
 80164a2:	4b67      	ldr	r3, [pc, #412]	; (8016640 <main+0x360>)
 80164a4:	781b      	ldrb	r3, [r3, #0]
 80164a6:	b2db      	uxtb	r3, r3
 80164a8:	3b01      	subs	r3, #1
 80164aa:	2b09      	cmp	r3, #9
 80164ac:	f200 86fc 	bhi.w	80172a8 <main+0xfc8>
 80164b0:	a201      	add	r2, pc, #4	; (adr r2, 80164b8 <main+0x1d8>)
 80164b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80164b6:	bf00      	nop
 80164b8:	08016529 	.word	0x08016529
 80164bc:	08016833 	.word	0x08016833
 80164c0:	0801697d 	.word	0x0801697d
 80164c4:	08016a2b 	.word	0x08016a2b
 80164c8:	08016ac7 	.word	0x08016ac7
 80164cc:	08016e85 	.word	0x08016e85
 80164d0:	080172a9 	.word	0x080172a9
 80164d4:	08016503 	.word	0x08016503
 80164d8:	080164e1 	.word	0x080164e1
 80164dc:	0801681f 	.word	0x0801681f
	      {
	     case KEYCODE_MEM:
	         i = Save_Bmp(List[SAVE_BMP].Val);
 80164e0:	4b4f      	ldr	r3, [pc, #316]	; (8016620 <main+0x340>)
 80164e2:	f9b3 30ec 	ldrsh.w	r3, [r3, #236]	; 0xec
 80164e6:	4618      	mov	r0, r3
 80164e8:	f7f9 ff54 	bl	8010394 <Save_Bmp>
 80164ec:	4603      	mov	r3, r0
 80164ee:	80fb      	strh	r3, [r7, #6]
	         DispFileInfo(i);
 80164f0:	88fb      	ldrh	r3, [r7, #6]
 80164f2:	b2db      	uxtb	r3, r3
 80164f4:	4618      	mov	r0, r3
 80164f6:	f7fe f9fd 	bl	80148f4 <DispFileInfo>
	         DispBMPInfo();
 80164fa:	f7fe fa2b 	bl	8014954 <DispBMPInfo>
	        break;
 80164fe:	f000 bed3 	b.w	80172a8 <main+0xfc8>

	     case KEYCODE_ACT:
	       SAVE_FLAG=0;
 8016502:	2300      	movs	r3, #0
 8016504:	717b      	strb	r3, [r7, #5]
	       if(PopType & DAILOG_POP) Close_Pop();
 8016506:	4b51      	ldr	r3, [pc, #324]	; (801664c <main+0x36c>)
 8016508:	781b      	ldrb	r3, [r3, #0]
 801650a:	f003 0304 	and.w	r3, r3, #4
 801650e:	2b00      	cmp	r3, #0
 8016510:	d003      	beq.n	801651a <main+0x23a>
 8016512:	f7f8 f921 	bl	800e758 <Close_Pop>
	       else {
	         Dialog_Pop("Save All ParamTab?");
	         Pop_Num = 1;
	       }
	       break;
 8016516:	f000 bec7 	b.w	80172a8 <main+0xfc8>
	         Dialog_Pop("Save All ParamTab?");
 801651a:	484d      	ldr	r0, [pc, #308]	; (8016650 <main+0x370>)
 801651c:	f7f8 f948 	bl	800e7b0 <Dialog_Pop>
	         Pop_Num = 1;
 8016520:	2301      	movs	r3, #1
 8016522:	713b      	strb	r3, [r7, #4]
	       break;
 8016524:	f000 bec0 	b.w	80172a8 <main+0xfc8>

	     case KEYCODE_PLAY:
	       if((Current == ST)&&(Cal_Flag==0))
 8016528:	4b44      	ldr	r3, [pc, #272]	; (801663c <main+0x35c>)
 801652a:	f9b3 3000 	ldrsh.w	r3, [r3]
 801652e:	2b07      	cmp	r3, #7
 8016530:	d151      	bne.n	80165d6 <main+0x2f6>
 8016532:	4b38      	ldr	r3, [pc, #224]	; (8016614 <main+0x334>)
 8016534:	781b      	ldrb	r3, [r3, #0]
 8016536:	2b00      	cmp	r3, #0
 8016538:	d14d      	bne.n	80165d6 <main+0x2f6>
	       {
	         if(PopType & DAILOG_POP){
 801653a:	4b44      	ldr	r3, [pc, #272]	; (801664c <main+0x36c>)
 801653c:	781b      	ldrb	r3, [r3, #0]
 801653e:	f003 0304 	and.w	r3, r3, #4
 8016542:	2b00      	cmp	r3, #0
 8016544:	d00e      	beq.n	8016564 <main+0x284>
	           if(Pop_Num == 1){
 8016546:	793b      	ldrb	r3, [r7, #4]
 8016548:	2b01      	cmp	r3, #1
 801654a:	d105      	bne.n	8016558 <main+0x278>
	             Save_Parameter();
 801654c:	f7fa ff1c 	bl	8011388 <Save_Parameter>
	             Close_Pop();
 8016550:	f7f8 f902 	bl	800e758 <Close_Pop>
	           Zero_Align();
	           Update_Proc_All();
	           Close_Pop();
	           CalSave_Pop("Save Cal ParamTab?");
	         }
	         break;
 8016554:	f000 be99 	b.w	801728a <main+0xfaa>
	             Close_Pop();
 8016558:	f7f8 f8fe 	bl	800e758 <Close_Pop>
	             List_Pop();
 801655c:	f7f8 f912 	bl	800e784 <List_Pop>
	         break;
 8016560:	f000 be93 	b.w	801728a <main+0xfaa>
	         else if((PopType & LIST_POP) && (MenuNow[ST]==RESTORE )) {
 8016564:	4b39      	ldr	r3, [pc, #228]	; (801664c <main+0x36c>)
 8016566:	781b      	ldrb	r3, [r3, #0]
 8016568:	f003 0302 	and.w	r3, r3, #2
 801656c:	2b00      	cmp	r3, #0
 801656e:	d00e      	beq.n	801658e <main+0x2ae>
 8016570:	4b35      	ldr	r3, [pc, #212]	; (8016648 <main+0x368>)
 8016572:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8016576:	2b28      	cmp	r3, #40	; 0x28
 8016578:	d109      	bne.n	801658e <main+0x2ae>
	           Restore_CalPar();
 801657a:	f7fb f951 	bl	8011820 <Restore_CalPar>
	           Dialog_Pop("Save All ParamTab?");
 801657e:	4834      	ldr	r0, [pc, #208]	; (8016650 <main+0x370>)
 8016580:	f7f8 f916 	bl	800e7b0 <Dialog_Pop>
	           Cal_Flag = 1;
 8016584:	4b23      	ldr	r3, [pc, #140]	; (8016614 <main+0x334>)
 8016586:	2201      	movs	r2, #1
 8016588:	701a      	strb	r2, [r3, #0]
	         break;
 801658a:	f000 be7e 	b.w	801728a <main+0xfaa>
	         else if((PopType & LIST_POP) && (MenuNow[ST]==AUTO_CAL )) {
 801658e:	4b2f      	ldr	r3, [pc, #188]	; (801664c <main+0x36c>)
 8016590:	781b      	ldrb	r3, [r3, #0]
 8016592:	f003 0302 	and.w	r3, r3, #2
 8016596:	2b00      	cmp	r3, #0
 8016598:	f000 8677 	beq.w	801728a <main+0xfaa>
 801659c:	4b2a      	ldr	r3, [pc, #168]	; (8016648 <main+0x368>)
 801659e:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 80165a2:	2b27      	cmp	r3, #39	; 0x27
 80165a4:	f040 8671 	bne.w	801728a <main+0xfaa>
	           Close_Pop();
 80165a8:	f7f8 f8d6 	bl	800e758 <Close_Pop>
	           Calibrate_Pop("Waiting for Calibration...");
 80165ac:	4829      	ldr	r0, [pc, #164]	; (8016654 <main+0x374>)
 80165ae:	f7f8 f965 	bl	800e87c <Calibrate_Pop>
	           Cal_Flag = 1;
 80165b2:	4b18      	ldr	r3, [pc, #96]	; (8016614 <main+0x334>)
 80165b4:	2201      	movs	r2, #1
 80165b6:	701a      	strb	r2, [r3, #0]
	           DrawWindow(WaveBuf, ParamTab);
 80165b8:	491d      	ldr	r1, [pc, #116]	; (8016630 <main+0x350>)
 80165ba:	481e      	ldr	r0, [pc, #120]	; (8016634 <main+0x354>)
 80165bc:	f7f7 f8cc 	bl	800d758 <DrawWindow>
	           Zero_Align();
 80165c0:	f7fe fc90 	bl	8014ee4 <Zero_Align>
	           Update_Proc_All();
 80165c4:	f7fe fa0c 	bl	80149e0 <Update_Proc_All>
	           Close_Pop();
 80165c8:	f7f8 f8c6 	bl	800e758 <Close_Pop>
	           CalSave_Pop("Save Cal ParamTab?");
 80165cc:	4822      	ldr	r0, [pc, #136]	; (8016658 <main+0x378>)
 80165ce:	f7f8 f98b 	bl	800e8e8 <CalSave_Pop>
	         break;
 80165d2:	f000 be5a 	b.w	801728a <main+0xfaa>
	       }
	       else if((Current == ST)&&(Cal_Flag==1)){
 80165d6:	4b19      	ldr	r3, [pc, #100]	; (801663c <main+0x35c>)
 80165d8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80165dc:	2b07      	cmp	r3, #7
 80165de:	d13d      	bne.n	801665c <main+0x37c>
 80165e0:	4b0c      	ldr	r3, [pc, #48]	; (8016614 <main+0x334>)
 80165e2:	781b      	ldrb	r3, [r3, #0]
 80165e4:	2b01      	cmp	r3, #1
 80165e6:	d139      	bne.n	801665c <main+0x37c>
	         if(PopType & DAILOG_POP){
 80165e8:	4b18      	ldr	r3, [pc, #96]	; (801664c <main+0x36c>)
 80165ea:	781b      	ldrb	r3, [r3, #0]
 80165ec:	f003 0304 	and.w	r3, r3, #4
 80165f0:	2b00      	cmp	r3, #0
 80165f2:	f000 864c 	beq.w	801728e <main+0xfae>
	           Save_Kpg();
 80165f6:	f7fa fff1 	bl	80115dc <Save_Kpg>
	           Close_Pop();
 80165fa:	f7f8 f8ad 	bl	800e758 <Close_Pop>
	           Cal_Flag = 0;
 80165fe:	4b05      	ldr	r3, [pc, #20]	; (8016614 <main+0x334>)
 8016600:	2200      	movs	r2, #0
 8016602:	701a      	strb	r2, [r3, #0]
	         }
	         break;
 8016604:	f000 be43 	b.w	801728e <main+0xfae>
 8016608:	080009f4 	.word	0x080009f4
 801660c:	20000580 	.word	0x20000580
 8016610:	08000a18 	.word	0x08000a18
 8016614:	200001b4 	.word	0x200001b4
 8016618:	08000b58 	.word	0x08000b58
 801661c:	20000008 	.word	0x20000008
 8016620:	20000298 	.word	0x20000298
 8016624:	2000079c 	.word	0x2000079c
 8016628:	20006978 	.word	0x20006978
 801662c:	200007a2 	.word	0x200007a2
 8016630:	20000140 	.word	0x20000140
 8016634:	20000c08 	.word	0x20000c08
 8016638:	20002814 	.word	0x20002814
 801663c:	2000079e 	.word	0x2000079e
 8016640:	2000077d 	.word	0x2000077d
 8016644:	20000000 	.word	0x20000000
 8016648:	20000538 	.word	0x20000538
 801664c:	2000078e 	.word	0x2000078e
 8016650:	08000a40 	.word	0x08000a40
 8016654:	08000a54 	.word	0x08000a54
 8016658:	08000a70 	.word	0x08000a70
	       }

	       if ((Current == FN)&&(PopType & LIST_POP)){
 801665c:	4bbc      	ldr	r3, [pc, #752]	; (8016950 <main+0x670>)
 801665e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016662:	2b05      	cmp	r3, #5
 8016664:	d177      	bne.n	8016756 <main+0x476>
 8016666:	4bbb      	ldr	r3, [pc, #748]	; (8016954 <main+0x674>)
 8016668:	781b      	ldrb	r3, [r3, #0]
 801666a:	f003 0302 	and.w	r3, r3, #2
 801666e:	2b00      	cmp	r3, #0
 8016670:	d071      	beq.n	8016756 <main+0x476>
	         i = 0;
 8016672:	2300      	movs	r3, #0
 8016674:	80fb      	strh	r3, [r7, #6]
	         {
	           if(SAVE_FLAG==KEYCODE_MEM)Close_Pop();
 8016676:	797b      	ldrb	r3, [r7, #5]
 8016678:	2b09      	cmp	r3, #9
 801667a:	d101      	bne.n	8016680 <main+0x3a0>
 801667c:	f7f8 f86c 	bl	800e758 <Close_Pop>
	           if(MenuNow[FN] == SAVE_BMP) i = Save_Bmp(List[SAVE_BMP].Val);
 8016680:	4bb5      	ldr	r3, [pc, #724]	; (8016958 <main+0x678>)
 8016682:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8016686:	2b1d      	cmp	r3, #29
 8016688:	d107      	bne.n	801669a <main+0x3ba>
 801668a:	4bb4      	ldr	r3, [pc, #720]	; (801695c <main+0x67c>)
 801668c:	f9b3 30ec 	ldrsh.w	r3, [r3, #236]	; 0xec
 8016690:	4618      	mov	r0, r3
 8016692:	f7f9 fe7f 	bl	8010394 <Save_Bmp>
 8016696:	4603      	mov	r3, r0
 8016698:	80fb      	strh	r3, [r7, #6]
	           if(MenuNow[FN] == SAVE_DAT) i = Save_Dat(List[SAVE_DAT].Val);
 801669a:	4baf      	ldr	r3, [pc, #700]	; (8016958 <main+0x678>)
 801669c:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 80166a0:	2b1e      	cmp	r3, #30
 80166a2:	d107      	bne.n	80166b4 <main+0x3d4>
 80166a4:	4bad      	ldr	r3, [pc, #692]	; (801695c <main+0x67c>)
 80166a6:	f9b3 30f4 	ldrsh.w	r3, [r3, #244]	; 0xf4
 80166aa:	4618      	mov	r0, r3
 80166ac:	f7f9 fd32 	bl	8010114 <Save_Dat>
 80166b0:	4603      	mov	r3, r0
 80166b2:	80fb      	strh	r3, [r7, #6]
	           if(MenuNow[FN] == SAVE_BUF) i = Save_Buf(List[SAVE_BUF].Val);
 80166b4:	4ba8      	ldr	r3, [pc, #672]	; (8016958 <main+0x678>)
 80166b6:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 80166ba:	2b1f      	cmp	r3, #31
 80166bc:	d107      	bne.n	80166ce <main+0x3ee>
 80166be:	4ba7      	ldr	r3, [pc, #668]	; (801695c <main+0x67c>)
 80166c0:	f9b3 30fc 	ldrsh.w	r3, [r3, #252]	; 0xfc
 80166c4:	4618      	mov	r0, r3
 80166c6:	f7f9 fc4f 	bl	800ff68 <Save_Buf>
 80166ca:	4603      	mov	r3, r0
 80166cc:	80fb      	strh	r3, [r7, #6]
	           if(MenuNow[FN] == SAVE_CSV) i = Save_Csv(List[SAVE_CSV].Val);
 80166ce:	4ba2      	ldr	r3, [pc, #648]	; (8016958 <main+0x678>)
 80166d0:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 80166d4:	2b20      	cmp	r3, #32
 80166d6:	d107      	bne.n	80166e8 <main+0x408>
 80166d8:	4ba0      	ldr	r3, [pc, #640]	; (801695c <main+0x67c>)
 80166da:	f9b3 3104 	ldrsh.w	r3, [r3, #260]	; 0x104
 80166de:	4618      	mov	r0, r3
 80166e0:	f7f9 ffc2 	bl	8010668 <Save_Csv>
 80166e4:	4603      	mov	r3, r0
 80166e6:	80fb      	strh	r3, [r7, #6]
	           if(MenuNow[FN] == SAVE_SVG) i = Save_Svg(List[SAVE_SVG].Val);
 80166e8:	4b9b      	ldr	r3, [pc, #620]	; (8016958 <main+0x678>)
 80166ea:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 80166ee:	2b21      	cmp	r3, #33	; 0x21
 80166f0:	d107      	bne.n	8016702 <main+0x422>
 80166f2:	4b9a      	ldr	r3, [pc, #616]	; (801695c <main+0x67c>)
 80166f4:	f9b3 310c 	ldrsh.w	r3, [r3, #268]	; 0x10c
 80166f8:	4618      	mov	r0, r3
 80166fa:	f7fa f9db 	bl	8010ab4 <Save_Svg>
 80166fe:	4603      	mov	r3, r0
 8016700:	80fb      	strh	r3, [r7, #6]
	           if(MenuNow[FN] == LOAD_DAT) i = Load_Dat(List[LOAD_DAT].Val);
 8016702:	4b95      	ldr	r3, [pc, #596]	; (8016958 <main+0x678>)
 8016704:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8016708:	2b22      	cmp	r3, #34	; 0x22
 801670a:	d107      	bne.n	801671c <main+0x43c>
 801670c:	4b93      	ldr	r3, [pc, #588]	; (801695c <main+0x67c>)
 801670e:	f9b3 3114 	ldrsh.w	r3, [r3, #276]	; 0x114
 8016712:	4618      	mov	r0, r3
 8016714:	f7f9 fd92 	bl	801023c <Load_Dat>
 8016718:	4603      	mov	r3, r0
 801671a:	80fb      	strh	r3, [r7, #6]
	           if(MenuNow[FN] == LOAD_BUF) i = Load_Buf(List[LOAD_BUF].Val);
 801671c:	4b8e      	ldr	r3, [pc, #568]	; (8016958 <main+0x678>)
 801671e:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8016722:	2b23      	cmp	r3, #35	; 0x23
 8016724:	d107      	bne.n	8016736 <main+0x456>
 8016726:	4b8d      	ldr	r3, [pc, #564]	; (801695c <main+0x67c>)
 8016728:	f9b3 311c 	ldrsh.w	r3, [r3, #284]	; 0x11c
 801672c:	4618      	mov	r0, r3
 801672e:	f7f9 fb3d 	bl	800fdac <Load_Buf>
 8016732:	4603      	mov	r3, r0
 8016734:	80fb      	strh	r3, [r7, #6]
	           SAVE_FLAG = 0;
 8016736:	2300      	movs	r3, #0
 8016738:	717b      	strb	r3, [r7, #5]
	         }
	         DispFileInfo(i);
 801673a:	88fb      	ldrh	r3, [r7, #6]
 801673c:	b2db      	uxtb	r3, r3
 801673e:	4618      	mov	r0, r3
 8016740:	f7fe f8d8 	bl	80148f4 <DispFileInfo>

	         if(PopType & DAILOG_POP)  Close_Pop();
 8016744:	4b83      	ldr	r3, [pc, #524]	; (8016954 <main+0x674>)
 8016746:	781b      	ldrb	r3, [r3, #0]
 8016748:	f003 0304 	and.w	r3, r3, #4
 801674c:	2b00      	cmp	r3, #0
 801674e:	d062      	beq.n	8016816 <main+0x536>
 8016750:	f7f8 f802 	bl	800e758 <Close_Pop>
 8016754:	e05f      	b.n	8016816 <main+0x536>

	       }
	       else if((PopType & DAILOG_POP ) &&(SAVE_FLAG!=KEYCODE_MEM)){
 8016756:	4b7f      	ldr	r3, [pc, #508]	; (8016954 <main+0x674>)
 8016758:	781b      	ldrb	r3, [r3, #0]
 801675a:	f003 0304 	and.w	r3, r3, #4
 801675e:	2b00      	cmp	r3, #0
 8016760:	d00b      	beq.n	801677a <main+0x49a>
 8016762:	797b      	ldrb	r3, [r7, #5]
 8016764:	2b09      	cmp	r3, #9
 8016766:	d008      	beq.n	801677a <main+0x49a>
	         Save_Parameter();
 8016768:	f7fa fe0e 	bl	8011388 <Save_Parameter>
	         Cal_Flag = 0;
 801676c:	4b7c      	ldr	r3, [pc, #496]	; (8016960 <main+0x680>)
 801676e:	2200      	movs	r2, #0
 8016770:	701a      	strb	r2, [r3, #0]
	         Close_Pop();
 8016772:	f7f7 fff1 	bl	800e758 <Close_Pop>
	         break;
 8016776:	f000 bd97 	b.w	80172a8 <main+0xfc8>
	       }
	       else {
	          if(Status & STOP){
 801677a:	4b7a      	ldr	r3, [pc, #488]	; (8016964 <main+0x684>)
 801677c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016780:	b29b      	uxth	r3, r3
 8016782:	f003 0301 	and.w	r3, r3, #1
 8016786:	2b00      	cmp	r3, #0
 8016788:	d02e      	beq.n	80167e8 <main+0x508>
	            if(Status & LOADM )Status &= ~LOADM;
 801678a:	4b76      	ldr	r3, [pc, #472]	; (8016964 <main+0x684>)
 801678c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016790:	b29b      	uxth	r3, r3
 8016792:	f003 0310 	and.w	r3, r3, #16
 8016796:	2b00      	cmp	r3, #0
 8016798:	d007      	beq.n	80167aa <main+0x4ca>
 801679a:	4b72      	ldr	r3, [pc, #456]	; (8016964 <main+0x684>)
 801679c:	f9b3 3000 	ldrsh.w	r3, [r3]
 80167a0:	f023 0310 	bic.w	r3, r3, #16
 80167a4:	b21a      	sxth	r2, r3
 80167a6:	4b6f      	ldr	r3, [pc, #444]	; (8016964 <main+0x684>)
 80167a8:	801a      	strh	r2, [r3, #0]
	            Status &= ~STOP;     // ��������״̬
 80167aa:	4b6e      	ldr	r3, [pc, #440]	; (8016964 <main+0x684>)
 80167ac:	f9b3 3000 	ldrsh.w	r3, [r3]
 80167b0:	f023 0301 	bic.w	r3, r3, #1
 80167b4:	b21a      	sxth	r2, r3
 80167b6:	4b6b      	ldr	r3, [pc, #428]	; (8016964 <main+0x684>)
 80167b8:	801a      	strh	r2, [r3, #0]
	            if(List[SYNCMODE].Val==SINGL) ADC_Start();
 80167ba:	4b68      	ldr	r3, [pc, #416]	; (801695c <main+0x67c>)
 80167bc:	f9b3 306c 	ldrsh.w	r3, [r3, #108]	; 0x6c
 80167c0:	2b04      	cmp	r3, #4
 80167c2:	d101      	bne.n	80167c8 <main+0x4e8>
 80167c4:	f7f5 ffa4 	bl	800c710 <ADC_Start>
	            if(List[SYNCMODE].Val==NORM)  ADC_Start();
 80167c8:	4b64      	ldr	r3, [pc, #400]	; (801695c <main+0x67c>)
 80167ca:	f9b3 306c 	ldrsh.w	r3, [r3, #108]	; 0x6c
 80167ce:	2b03      	cmp	r3, #3
 80167d0:	d101      	bne.n	80167d6 <main+0x4f6>
 80167d2:	f7f5 ff9d 	bl	800c710 <ADC_Start>
	            Norm_Clr = 1;
 80167d6:	4b64      	ldr	r3, [pc, #400]	; (8016968 <main+0x688>)
 80167d8:	2201      	movs	r2, #1
 80167da:	701a      	strb	r2, [r3, #0]
	            SNGL_Kflag = 1;
 80167dc:	4b63      	ldr	r3, [pc, #396]	; (801696c <main+0x68c>)
 80167de:	2201      	movs	r2, #1
 80167e0:	701a      	strb	r2, [r3, #0]
	            Update_Proc_All();
 80167e2:	f7fe f8fd 	bl	80149e0 <Update_Proc_All>
 80167e6:	e016      	b.n	8016816 <main+0x536>

	            if(*(short*)F_Sector==0xaa55)Restore_Scene();

	          }
	          else {
	            Status |=  STOP;     // ������ͣ״̬
 80167e8:	4b5e      	ldr	r3, [pc, #376]	; (8016964 <main+0x684>)
 80167ea:	f9b3 3000 	ldrsh.w	r3, [r3]
 80167ee:	f043 0301 	orr.w	r3, r3, #1
 80167f2:	b21a      	sxth	r2, r3
 80167f4:	4b5b      	ldr	r3, [pc, #364]	; (8016964 <main+0x684>)
 80167f6:	801a      	strh	r2, [r3, #0]
	            Ch1_Posi = List[V0_POSI].Val;
 80167f8:	4b58      	ldr	r3, [pc, #352]	; (801695c <main+0x67c>)
 80167fa:	f9b3 201c 	ldrsh.w	r2, [r3, #28]
 80167fe:	4b5c      	ldr	r3, [pc, #368]	; (8016970 <main+0x690>)
 8016800:	801a      	strh	r2, [r3, #0]
	            Ch2_Posi = List[EXT_POSI].Val;
 8016802:	4b56      	ldr	r3, [pc, #344]	; (801695c <main+0x67c>)
 8016804:	f9b3 20dc 	ldrsh.w	r2, [r3, #220]	; 0xdc
 8016808:	4b5a      	ldr	r3, [pc, #360]	; (8016974 <main+0x694>)
 801680a:	801a      	strh	r2, [r3, #0]
	            Tri_Posi = List[THRESHOLD].Val;
 801680c:	4b53      	ldr	r3, [pc, #332]	; (801695c <main+0x67c>)
 801680e:	f9b3 2084 	ldrsh.w	r2, [r3, #132]	; 0x84
 8016812:	4b59      	ldr	r3, [pc, #356]	; (8016978 <main+0x698>)
 8016814:	801a      	strh	r2, [r3, #0]
	            Save_Bmp(List[SAVE_BMP].Val);
	            List[SAVE_BMP].Val++;
	          #endif
	          }
	        }
	        DispStatus();            // ��ʾ����״̬
 8016816:	f7fd fdd7 	bl	80143c8 <DispStatus>
 	       break;
 801681a:	f000 bd45 	b.w	80172a8 <main+0xfc8>

	      case KEYCODE_D_MANU:
	        if(List[FITTRIGG].Val)
 801681e:	4b4f      	ldr	r3, [pc, #316]	; (801695c <main+0x67c>)
 8016820:	f9b3 307c 	ldrsh.w	r3, [r3, #124]	; 0x7c
 8016824:	2b00      	cmp	r3, #0
 8016826:	f000 8534 	beq.w	8017292 <main+0xfb2>
	        {
	          Auto_Fit();
 801682a:	f7ff f933 	bl	8015a94 <Auto_Fit>
	        }
	        break;
 801682e:	f000 bd30 	b.w	8017292 <main+0xfb2>

	      case KEYCODE_MANU:
	        if(!(PopType & LIST_POP)){
 8016832:	4b48      	ldr	r3, [pc, #288]	; (8016954 <main+0x674>)
 8016834:	781b      	ldrb	r3, [r3, #0]
 8016836:	f003 0302 	and.w	r3, r3, #2
 801683a:	2b00      	cmp	r3, #0
 801683c:	d111      	bne.n	8016862 <main+0x582>
	            if(Cal_Flag){
 801683e:	4b48      	ldr	r3, [pc, #288]	; (8016960 <main+0x680>)
 8016840:	781b      	ldrb	r3, [r3, #0]
 8016842:	2b00      	cmp	r3, #0
 8016844:	d006      	beq.n	8016854 <main+0x574>
	              Cal_Flag = 0;
 8016846:	4b46      	ldr	r3, [pc, #280]	; (8016960 <main+0x680>)
 8016848:	2200      	movs	r2, #0
 801684a:	701a      	strb	r2, [r3, #0]
	              Close_Pop();
 801684c:	f7f7 ff84 	bl	800e758 <Close_Pop>
	          // ------------ �ָ���ʾ��Ϣ��ʾ���Ҷ�ԭ����ʾ��Ϣ ------------
	          if(MenuNow[Current] == SMPL_DPTH) List[SMPL_DPTH].Flg  |= UPD; // ������ȸ�����ʾ
	          else if(Current == FN)           List[MenuNow[FN]].Flg |= UPD; // ָ�����ļ���д�������ʾ
	          else                             List[MenuNow[ME]].Flg |= UPD; // ָ���Ĳ��β����������ʾ
	        }
	        break;
 8016850:	f000 bd2a 	b.w	80172a8 <main+0xfc8>
	              Cal_Flag = 0;
 8016854:	4b42      	ldr	r3, [pc, #264]	; (8016960 <main+0x680>)
 8016856:	2200      	movs	r2, #0
 8016858:	701a      	strb	r2, [r3, #0]
	              List_Pop(); // �˵����ر�ʱ, �򿪲˵���
 801685a:	f7f7 ff93 	bl	800e784 <List_Pop>
	        break;
 801685e:	f000 bd23 	b.w	80172a8 <main+0xfc8>
	          Close_Pop();                // �˵����Ѵ�ʱ, �رղ˵���
 8016862:	f7f7 ff79 	bl	800e758 <Close_Pop>
	          if(Current == XN)      List[T1_POSI   ].Flg |= UPD;
 8016866:	4b3a      	ldr	r3, [pc, #232]	; (8016950 <main+0x670>)
 8016868:	f9b3 3000 	ldrsh.w	r3, [r3]
 801686c:	2b01      	cmp	r3, #1
 801686e:	d109      	bne.n	8016884 <main+0x5a4>
 8016870:	4b3a      	ldr	r3, [pc, #232]	; (801695c <main+0x67c>)
 8016872:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8016876:	f043 0320 	orr.w	r3, r3, #32
 801687a:	b2da      	uxtb	r2, r3
 801687c:	4b37      	ldr	r3, [pc, #220]	; (801695c <main+0x67c>)
 801687e:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
 8016882:	e021      	b.n	80168c8 <main+0x5e8>
	          else if(Current == YN) List[V1_POSI   ].Flg |= UPD;
 8016884:	4b32      	ldr	r3, [pc, #200]	; (8016950 <main+0x670>)
 8016886:	f9b3 3000 	ldrsh.w	r3, [r3]
 801688a:	2b00      	cmp	r3, #0
 801688c:	d109      	bne.n	80168a2 <main+0x5c2>
 801688e:	4b33      	ldr	r3, [pc, #204]	; (801695c <main+0x67c>)
 8016890:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8016894:	f043 0320 	orr.w	r3, r3, #32
 8016898:	b2da      	uxtb	r2, r3
 801689a:	4b30      	ldr	r3, [pc, #192]	; (801695c <main+0x67c>)
 801689c:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
 80168a0:	e012      	b.n	80168c8 <main+0x5e8>
	          else                   List[MenuNow[SN]].Flg |= UPD;
 80168a2:	4b2d      	ldr	r3, [pc, #180]	; (8016958 <main+0x678>)
 80168a4:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 80168a8:	4a2c      	ldr	r2, [pc, #176]	; (801695c <main+0x67c>)
 80168aa:	00db      	lsls	r3, r3, #3
 80168ac:	4413      	add	r3, r2
 80168ae:	799b      	ldrb	r3, [r3, #6]
 80168b0:	4a29      	ldr	r2, [pc, #164]	; (8016958 <main+0x678>)
 80168b2:	f9b2 200c 	ldrsh.w	r2, [r2, #12]
 80168b6:	4610      	mov	r0, r2
 80168b8:	f043 0320 	orr.w	r3, r3, #32
 80168bc:	b2d9      	uxtb	r1, r3
 80168be:	4a27      	ldr	r2, [pc, #156]	; (801695c <main+0x67c>)
 80168c0:	00c3      	lsls	r3, r0, #3
 80168c2:	4413      	add	r3, r2
 80168c4:	460a      	mov	r2, r1
 80168c6:	719a      	strb	r2, [r3, #6]
	          if(MenuNow[Current] == SMPL_DPTH) List[SMPL_DPTH].Flg  |= UPD; // ������ȸ�����ʾ
 80168c8:	4b21      	ldr	r3, [pc, #132]	; (8016950 <main+0x670>)
 80168ca:	f9b3 3000 	ldrsh.w	r3, [r3]
 80168ce:	461a      	mov	r2, r3
 80168d0:	4b21      	ldr	r3, [pc, #132]	; (8016958 <main+0x678>)
 80168d2:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 80168d6:	2b09      	cmp	r3, #9
 80168d8:	d10a      	bne.n	80168f0 <main+0x610>
 80168da:	4b20      	ldr	r3, [pc, #128]	; (801695c <main+0x67c>)
 80168dc:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 80168e0:	f043 0320 	orr.w	r3, r3, #32
 80168e4:	b2da      	uxtb	r2, r3
 80168e6:	4b1d      	ldr	r3, [pc, #116]	; (801695c <main+0x67c>)
 80168e8:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
	        break;
 80168ec:	f000 bcdc 	b.w	80172a8 <main+0xfc8>
	          else if(Current == FN)           List[MenuNow[FN]].Flg |= UPD; // ָ�����ļ���д�������ʾ
 80168f0:	4b17      	ldr	r3, [pc, #92]	; (8016950 <main+0x670>)
 80168f2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80168f6:	2b05      	cmp	r3, #5
 80168f8:	d114      	bne.n	8016924 <main+0x644>
 80168fa:	4b17      	ldr	r3, [pc, #92]	; (8016958 <main+0x678>)
 80168fc:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8016900:	4a16      	ldr	r2, [pc, #88]	; (801695c <main+0x67c>)
 8016902:	00db      	lsls	r3, r3, #3
 8016904:	4413      	add	r3, r2
 8016906:	799b      	ldrb	r3, [r3, #6]
 8016908:	4a13      	ldr	r2, [pc, #76]	; (8016958 <main+0x678>)
 801690a:	f9b2 200a 	ldrsh.w	r2, [r2, #10]
 801690e:	4610      	mov	r0, r2
 8016910:	f043 0320 	orr.w	r3, r3, #32
 8016914:	b2d9      	uxtb	r1, r3
 8016916:	4a11      	ldr	r2, [pc, #68]	; (801695c <main+0x67c>)
 8016918:	00c3      	lsls	r3, r0, #3
 801691a:	4413      	add	r3, r2
 801691c:	460a      	mov	r2, r1
 801691e:	719a      	strb	r2, [r3, #6]
	        break;
 8016920:	f000 bcc2 	b.w	80172a8 <main+0xfc8>
	          else                             List[MenuNow[ME]].Flg |= UPD; // ָ���Ĳ��β����������ʾ
 8016924:	4b0c      	ldr	r3, [pc, #48]	; (8016958 <main+0x678>)
 8016926:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 801692a:	4a0c      	ldr	r2, [pc, #48]	; (801695c <main+0x67c>)
 801692c:	00db      	lsls	r3, r3, #3
 801692e:	4413      	add	r3, r2
 8016930:	799b      	ldrb	r3, [r3, #6]
 8016932:	4a09      	ldr	r2, [pc, #36]	; (8016958 <main+0x678>)
 8016934:	f9b2 2006 	ldrsh.w	r2, [r2, #6]
 8016938:	4610      	mov	r0, r2
 801693a:	f043 0320 	orr.w	r3, r3, #32
 801693e:	b2d9      	uxtb	r1, r3
 8016940:	4a06      	ldr	r2, [pc, #24]	; (801695c <main+0x67c>)
 8016942:	00c3      	lsls	r3, r0, #3
 8016944:	4413      	add	r3, r2
 8016946:	460a      	mov	r2, r1
 8016948:	719a      	strb	r2, [r3, #6]
	        break;
 801694a:	f000 bcad 	b.w	80172a8 <main+0xfc8>
 801694e:	bf00      	nop
 8016950:	2000079e 	.word	0x2000079e
 8016954:	2000078e 	.word	0x2000078e
 8016958:	20000538 	.word	0x20000538
 801695c:	20000298 	.word	0x20000298
 8016960:	200001b4 	.word	0x200001b4
 8016964:	200007a0 	.word	0x200007a0
 8016968:	200007a7 	.word	0x200007a7
 801696c:	2000055c 	.word	0x2000055c
 8016970:	20006884 	.word	0x20006884
 8016974:	2000687c 	.word	0x2000687c
 8016978:	20002860 	.word	0x20002860

	      case KEYCODE_UP:
	        if (PopType & LIST_POP){
 801697c:	4bac      	ldr	r3, [pc, #688]	; (8016c30 <main+0x950>)
 801697e:	781b      	ldrb	r3, [r3, #0]
 8016980:	f003 0302 	and.w	r3, r3, #2
 8016984:	2b00      	cmp	r3, #0
 8016986:	d03b      	beq.n	8016a00 <main+0x720>
	          if(MenuNow[Current] > MU_BEGN[Current]) MenuNow[Current]--;
 8016988:	4baa      	ldr	r3, [pc, #680]	; (8016c34 <main+0x954>)
 801698a:	f9b3 3000 	ldrsh.w	r3, [r3]
 801698e:	461a      	mov	r2, r3
 8016990:	4ba9      	ldr	r3, [pc, #676]	; (8016c38 <main+0x958>)
 8016992:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8016996:	461a      	mov	r2, r3
 8016998:	4ba6      	ldr	r3, [pc, #664]	; (8016c34 <main+0x954>)
 801699a:	f9b3 3000 	ldrsh.w	r3, [r3]
 801699e:	4619      	mov	r1, r3
 80169a0:	4ba6      	ldr	r3, [pc, #664]	; (8016c3c <main+0x95c>)
 80169a2:	5c5b      	ldrb	r3, [r3, r1]
 80169a4:	429a      	cmp	r2, r3
 80169a6:	dd0e      	ble.n	80169c6 <main+0x6e6>
 80169a8:	4ba2      	ldr	r3, [pc, #648]	; (8016c34 <main+0x954>)
 80169aa:	f9b3 3000 	ldrsh.w	r3, [r3]
 80169ae:	4aa2      	ldr	r2, [pc, #648]	; (8016c38 <main+0x958>)
 80169b0:	f932 2013 	ldrsh.w	r2, [r2, r3, lsl #1]
 80169b4:	b292      	uxth	r2, r2
 80169b6:	3a01      	subs	r2, #1
 80169b8:	b292      	uxth	r2, r2
 80169ba:	b211      	sxth	r1, r2
 80169bc:	4a9e      	ldr	r2, [pc, #632]	; (8016c38 <main+0x958>)
 80169be:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	          else                  MenuNow[Current] += M_ITEMS[Current]-1;
	        } else {
	          if (Current > 0) Current--;
	          else             Current = ST;
	        }
	        break;
 80169c2:	f000 bc71 	b.w	80172a8 <main+0xfc8>
	          else                  MenuNow[Current] += M_ITEMS[Current]-1;
 80169c6:	4b9b      	ldr	r3, [pc, #620]	; (8016c34 <main+0x954>)
 80169c8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80169cc:	461a      	mov	r2, r3
 80169ce:	4b9a      	ldr	r3, [pc, #616]	; (8016c38 <main+0x958>)
 80169d0:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 80169d4:	b29a      	uxth	r2, r3
 80169d6:	4b97      	ldr	r3, [pc, #604]	; (8016c34 <main+0x954>)
 80169d8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80169dc:	4619      	mov	r1, r3
 80169de:	4b98      	ldr	r3, [pc, #608]	; (8016c40 <main+0x960>)
 80169e0:	5c5b      	ldrb	r3, [r3, r1]
 80169e2:	b29b      	uxth	r3, r3
 80169e4:	4413      	add	r3, r2
 80169e6:	b29b      	uxth	r3, r3
 80169e8:	3b01      	subs	r3, #1
 80169ea:	b299      	uxth	r1, r3
 80169ec:	4b91      	ldr	r3, [pc, #580]	; (8016c34 <main+0x954>)
 80169ee:	f9b3 3000 	ldrsh.w	r3, [r3]
 80169f2:	461a      	mov	r2, r3
 80169f4:	b209      	sxth	r1, r1
 80169f6:	4b90      	ldr	r3, [pc, #576]	; (8016c38 <main+0x958>)
 80169f8:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
	        break;
 80169fc:	f000 bc54 	b.w	80172a8 <main+0xfc8>
	          if (Current > 0) Current--;
 8016a00:	4b8c      	ldr	r3, [pc, #560]	; (8016c34 <main+0x954>)
 8016a02:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016a06:	2b00      	cmp	r3, #0
 8016a08:	dd0a      	ble.n	8016a20 <main+0x740>
 8016a0a:	4b8a      	ldr	r3, [pc, #552]	; (8016c34 <main+0x954>)
 8016a0c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016a10:	b29b      	uxth	r3, r3
 8016a12:	3b01      	subs	r3, #1
 8016a14:	b29b      	uxth	r3, r3
 8016a16:	b21a      	sxth	r2, r3
 8016a18:	4b86      	ldr	r3, [pc, #536]	; (8016c34 <main+0x954>)
 8016a1a:	801a      	strh	r2, [r3, #0]
	        break;
 8016a1c:	f000 bc44 	b.w	80172a8 <main+0xfc8>
	          else             Current = ST;
 8016a20:	4b84      	ldr	r3, [pc, #528]	; (8016c34 <main+0x954>)
 8016a22:	2207      	movs	r2, #7
 8016a24:	801a      	strh	r2, [r3, #0]
	        break;
 8016a26:	f000 bc3f 	b.w	80172a8 <main+0xfc8>

	     case KEYCODE_DOWN:
	        if(PopType & LIST_POP){
 8016a2a:	4b81      	ldr	r3, [pc, #516]	; (8016c30 <main+0x950>)
 8016a2c:	781b      	ldrb	r3, [r3, #0]
 8016a2e:	f003 0302 	and.w	r3, r3, #2
 8016a32:	2b00      	cmp	r3, #0
 8016a34:	d034      	beq.n	8016aa0 <main+0x7c0>
	          MenuNow[Current]++;
 8016a36:	4b7f      	ldr	r3, [pc, #508]	; (8016c34 <main+0x954>)
 8016a38:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016a3c:	4a7e      	ldr	r2, [pc, #504]	; (8016c38 <main+0x958>)
 8016a3e:	f932 2013 	ldrsh.w	r2, [r2, r3, lsl #1]
 8016a42:	b292      	uxth	r2, r2
 8016a44:	3201      	adds	r2, #1
 8016a46:	b292      	uxth	r2, r2
 8016a48:	b211      	sxth	r1, r2
 8016a4a:	4a7b      	ldr	r2, [pc, #492]	; (8016c38 <main+0x958>)
 8016a4c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	          if(MenuNow[Current] >=(MU_BEGN[Current]+M_ITEMS[Current])){
 8016a50:	4b78      	ldr	r3, [pc, #480]	; (8016c34 <main+0x954>)
 8016a52:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016a56:	461a      	mov	r2, r3
 8016a58:	4b77      	ldr	r3, [pc, #476]	; (8016c38 <main+0x958>)
 8016a5a:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8016a5e:	461a      	mov	r2, r3
 8016a60:	4b74      	ldr	r3, [pc, #464]	; (8016c34 <main+0x954>)
 8016a62:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016a66:	4619      	mov	r1, r3
 8016a68:	4b74      	ldr	r3, [pc, #464]	; (8016c3c <main+0x95c>)
 8016a6a:	5c5b      	ldrb	r3, [r3, r1]
 8016a6c:	4619      	mov	r1, r3
 8016a6e:	4b71      	ldr	r3, [pc, #452]	; (8016c34 <main+0x954>)
 8016a70:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016a74:	4618      	mov	r0, r3
 8016a76:	4b72      	ldr	r3, [pc, #456]	; (8016c40 <main+0x960>)
 8016a78:	5c1b      	ldrb	r3, [r3, r0]
 8016a7a:	440b      	add	r3, r1
 8016a7c:	429a      	cmp	r2, r3
 8016a7e:	f2c0 840a 	blt.w	8017296 <main+0xfb6>
	            MenuNow[Current] = MU_BEGN[Current];
 8016a82:	4b6c      	ldr	r3, [pc, #432]	; (8016c34 <main+0x954>)
 8016a84:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016a88:	461a      	mov	r2, r3
 8016a8a:	4b6c      	ldr	r3, [pc, #432]	; (8016c3c <main+0x95c>)
 8016a8c:	5c99      	ldrb	r1, [r3, r2]
 8016a8e:	4b69      	ldr	r3, [pc, #420]	; (8016c34 <main+0x954>)
 8016a90:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016a94:	461a      	mov	r2, r3
 8016a96:	b209      	sxth	r1, r1
 8016a98:	4b67      	ldr	r3, [pc, #412]	; (8016c38 <main+0x958>)
 8016a9a:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
	          }
	        } else {
	          if (Current < 7) Current++;
	          else             Current = YN;
	        }
	        break;
 8016a9e:	e3fa      	b.n	8017296 <main+0xfb6>
	          if (Current < 7) Current++;
 8016aa0:	4b64      	ldr	r3, [pc, #400]	; (8016c34 <main+0x954>)
 8016aa2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016aa6:	2b06      	cmp	r3, #6
 8016aa8:	dc09      	bgt.n	8016abe <main+0x7de>
 8016aaa:	4b62      	ldr	r3, [pc, #392]	; (8016c34 <main+0x954>)
 8016aac:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016ab0:	b29b      	uxth	r3, r3
 8016ab2:	3301      	adds	r3, #1
 8016ab4:	b29b      	uxth	r3, r3
 8016ab6:	b21a      	sxth	r2, r3
 8016ab8:	4b5e      	ldr	r3, [pc, #376]	; (8016c34 <main+0x954>)
 8016aba:	801a      	strh	r2, [r3, #0]
	        break;
 8016abc:	e3eb      	b.n	8017296 <main+0xfb6>
	          else             Current = YN;
 8016abe:	4b5d      	ldr	r3, [pc, #372]	; (8016c34 <main+0x954>)
 8016ac0:	2200      	movs	r2, #0
 8016ac2:	801a      	strh	r2, [r3, #0]
	        break;
 8016ac4:	e3e7      	b.n	8017296 <main+0xfb6>

	      case KEYCODE_LEFT:
	        if((Current==ST)&& !(PopType & LIST_POP))break;
 8016ac6:	4b5b      	ldr	r3, [pc, #364]	; (8016c34 <main+0x954>)
 8016ac8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016acc:	2b07      	cmp	r3, #7
 8016ace:	d106      	bne.n	8016ade <main+0x7fe>
 8016ad0:	4b57      	ldr	r3, [pc, #348]	; (8016c30 <main+0x950>)
 8016ad2:	781b      	ldrb	r3, [r3, #0]
 8016ad4:	f003 0302 	and.w	r3, r3, #2
 8016ad8:	2b00      	cmp	r3, #0
 8016ada:	f000 83de 	beq.w	801729a <main+0xfba>
	        List[MenuNow[Current]].Flg |= UPD;  // ˢ�±��ǰԭ��ʾ��Ŀ����
 8016ade:	4b55      	ldr	r3, [pc, #340]	; (8016c34 <main+0x954>)
 8016ae0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016ae4:	461a      	mov	r2, r3
 8016ae6:	4b54      	ldr	r3, [pc, #336]	; (8016c38 <main+0x958>)
 8016ae8:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8016aec:	4a55      	ldr	r2, [pc, #340]	; (8016c44 <main+0x964>)
 8016aee:	00db      	lsls	r3, r3, #3
 8016af0:	4413      	add	r3, r2
 8016af2:	799b      	ldrb	r3, [r3, #6]
 8016af4:	4a4f      	ldr	r2, [pc, #316]	; (8016c34 <main+0x954>)
 8016af6:	f9b2 2000 	ldrsh.w	r2, [r2]
 8016afa:	4611      	mov	r1, r2
 8016afc:	4a4e      	ldr	r2, [pc, #312]	; (8016c38 <main+0x958>)
 8016afe:	f932 2011 	ldrsh.w	r2, [r2, r1, lsl #1]
 8016b02:	4610      	mov	r0, r2
 8016b04:	f043 0320 	orr.w	r3, r3, #32
 8016b08:	b2d9      	uxtb	r1, r3
 8016b0a:	4a4e      	ldr	r2, [pc, #312]	; (8016c44 <main+0x964>)
 8016b0c:	00c3      	lsls	r3, r0, #3
 8016b0e:	4413      	add	r3, r2
 8016b10:	460a      	mov	r2, r1
 8016b12:	719a      	strb	r2, [r3, #6]
	        if(List[MenuNow[Current]].Val <=MIN[MenuNow[Current]]){
 8016b14:	4b47      	ldr	r3, [pc, #284]	; (8016c34 <main+0x954>)
 8016b16:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016b1a:	461a      	mov	r2, r3
 8016b1c:	4b46      	ldr	r3, [pc, #280]	; (8016c38 <main+0x958>)
 8016b1e:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8016b22:	4a48      	ldr	r2, [pc, #288]	; (8016c44 <main+0x964>)
 8016b24:	00db      	lsls	r3, r3, #3
 8016b26:	4413      	add	r3, r2
 8016b28:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
 8016b2c:	4b41      	ldr	r3, [pc, #260]	; (8016c34 <main+0x954>)
 8016b2e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016b32:	4619      	mov	r1, r3
 8016b34:	4b40      	ldr	r3, [pc, #256]	; (8016c38 <main+0x958>)
 8016b36:	f933 3011 	ldrsh.w	r3, [r3, r1, lsl #1]
 8016b3a:	4619      	mov	r1, r3
 8016b3c:	4b42      	ldr	r3, [pc, #264]	; (8016c48 <main+0x968>)
 8016b3e:	f933 3011 	ldrsh.w	r3, [r3, r1, lsl #1]
 8016b42:	429a      	cmp	r2, r3
 8016b44:	f300 8084 	bgt.w	8016c50 <main+0x970>
	          if((MenuNow[Current] == COUPLING)||(MenuNow[Current] == YN_TYPE )||
 8016b48:	4b3a      	ldr	r3, [pc, #232]	; (8016c34 <main+0x954>)
 8016b4a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016b4e:	461a      	mov	r2, r3
 8016b50:	4b39      	ldr	r3, [pc, #228]	; (8016c38 <main+0x958>)
 8016b52:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8016b56:	2b01      	cmp	r3, #1
 8016b58:	d051      	beq.n	8016bfe <main+0x91e>
 8016b5a:	4b36      	ldr	r3, [pc, #216]	; (8016c34 <main+0x954>)
 8016b5c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016b60:	461a      	mov	r2, r3
 8016b62:	4b35      	ldr	r3, [pc, #212]	; (8016c38 <main+0x958>)
 8016b64:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8016b68:	2b06      	cmp	r3, #6
 8016b6a:	d048      	beq.n	8016bfe <main+0x91e>
	            (MenuNow[Current] == XN_TYPE )||(MenuNow[Current] == EXT_HIDE)||
 8016b6c:	4b31      	ldr	r3, [pc, #196]	; (8016c34 <main+0x954>)
 8016b6e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016b72:	461a      	mov	r2, r3
 8016b74:	4b30      	ldr	r3, [pc, #192]	; (8016c38 <main+0x958>)
 8016b76:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
	          if((MenuNow[Current] == COUPLING)||(MenuNow[Current] == YN_TYPE )||
 8016b7a:	2b0c      	cmp	r3, #12
 8016b7c:	d03f      	beq.n	8016bfe <main+0x91e>
	            (MenuNow[Current] == XN_TYPE )||(MenuNow[Current] == EXT_HIDE)||
 8016b7e:	4b2d      	ldr	r3, [pc, #180]	; (8016c34 <main+0x954>)
 8016b80:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016b84:	461a      	mov	r2, r3
 8016b86:	4b2c      	ldr	r3, [pc, #176]	; (8016c38 <main+0x958>)
 8016b88:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8016b8c:	2b1c      	cmp	r3, #28
 8016b8e:	d036      	beq.n	8016bfe <main+0x91e>
	            ( MenuNow[Current] == FITTRIGG)||(MenuNow[Current] == TR_MODE )||
 8016b90:	4b28      	ldr	r3, [pc, #160]	; (8016c34 <main+0x954>)
 8016b92:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016b96:	461a      	mov	r2, r3
 8016b98:	4b27      	ldr	r3, [pc, #156]	; (8016c38 <main+0x958>)
 8016b9a:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
	            (MenuNow[Current] == XN_TYPE )||(MenuNow[Current] == EXT_HIDE)||
 8016b9e:	2b0f      	cmp	r3, #15
 8016ba0:	d02d      	beq.n	8016bfe <main+0x91e>
	            ( MenuNow[Current] == FITTRIGG)||(MenuNow[Current] == TR_MODE )||
 8016ba2:	4b24      	ldr	r3, [pc, #144]	; (8016c34 <main+0x954>)
 8016ba4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016ba8:	461a      	mov	r2, r3
 8016baa:	4b23      	ldr	r3, [pc, #140]	; (8016c38 <main+0x958>)
 8016bac:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8016bb0:	2b0e      	cmp	r3, #14
 8016bb2:	d024      	beq.n	8016bfe <main+0x91e>
	            ( MenuNow[Current] == SYNCMODE)||(MenuNow[Current] == EXT_REFN)||
 8016bb4:	4b1f      	ldr	r3, [pc, #124]	; (8016c34 <main+0x954>)
 8016bb6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016bba:	461a      	mov	r2, r3
 8016bbc:	4b1e      	ldr	r3, [pc, #120]	; (8016c38 <main+0x958>)
 8016bbe:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
	            ( MenuNow[Current] == FITTRIGG)||(MenuNow[Current] == TR_MODE )||
 8016bc2:	2b0d      	cmp	r3, #13
 8016bc4:	d01b      	beq.n	8016bfe <main+0x91e>
	            ( MenuNow[Current] == SYNCMODE)||(MenuNow[Current] == EXT_REFN)||
 8016bc6:	4b1b      	ldr	r3, [pc, #108]	; (8016c34 <main+0x954>)
 8016bc8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016bcc:	461a      	mov	r2, r3
 8016bce:	4b1a      	ldr	r3, [pc, #104]	; (8016c38 <main+0x958>)
 8016bd0:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8016bd4:	2b1a      	cmp	r3, #26
 8016bd6:	d012      	beq.n	8016bfe <main+0x91e>
	            (MenuNow[Current] == PROBEATT)||(MenuNow[Current] == TPYE_OUT))
 8016bd8:	4b16      	ldr	r3, [pc, #88]	; (8016c34 <main+0x954>)
 8016bda:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016bde:	461a      	mov	r2, r3
 8016be0:	4b15      	ldr	r3, [pc, #84]	; (8016c38 <main+0x958>)
 8016be2:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
	            ( MenuNow[Current] == SYNCMODE)||(MenuNow[Current] == EXT_REFN)||
 8016be6:	2b02      	cmp	r3, #2
 8016be8:	d009      	beq.n	8016bfe <main+0x91e>
	            (MenuNow[Current] == PROBEATT)||(MenuNow[Current] == TPYE_OUT))
 8016bea:	4b12      	ldr	r3, [pc, #72]	; (8016c34 <main+0x954>)
 8016bec:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016bf0:	461a      	mov	r2, r3
 8016bf2:	4b11      	ldr	r3, [pc, #68]	; (8016c38 <main+0x958>)
 8016bf4:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8016bf8:	2b24      	cmp	r3, #36	; 0x24
 8016bfa:	f040 812c 	bne.w	8016e56 <main+0xb76>
	            List[MenuNow[Current]].Val =MAX[MenuNow[Current]] ;
 8016bfe:	4b0d      	ldr	r3, [pc, #52]	; (8016c34 <main+0x954>)
 8016c00:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016c04:	461a      	mov	r2, r3
 8016c06:	4b0c      	ldr	r3, [pc, #48]	; (8016c38 <main+0x958>)
 8016c08:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8016c0c:	461a      	mov	r2, r3
 8016c0e:	4b09      	ldr	r3, [pc, #36]	; (8016c34 <main+0x954>)
 8016c10:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016c14:	4619      	mov	r1, r3
 8016c16:	4b08      	ldr	r3, [pc, #32]	; (8016c38 <main+0x958>)
 8016c18:	f933 3011 	ldrsh.w	r3, [r3, r1, lsl #1]
 8016c1c:	4618      	mov	r0, r3
 8016c1e:	4b0b      	ldr	r3, [pc, #44]	; (8016c4c <main+0x96c>)
 8016c20:	f933 1012 	ldrsh.w	r1, [r3, r2, lsl #1]
 8016c24:	4a07      	ldr	r2, [pc, #28]	; (8016c44 <main+0x964>)
 8016c26:	00c3      	lsls	r3, r0, #3
 8016c28:	4413      	add	r3, r2
 8016c2a:	460a      	mov	r2, r1
 8016c2c:	809a      	strh	r2, [r3, #4]
 8016c2e:	e112      	b.n	8016e56 <main+0xb76>
 8016c30:	2000078e 	.word	0x2000078e
 8016c34:	2000079e 	.word	0x2000079e
 8016c38:	20000538 	.word	0x20000538
 8016c3c:	08001f40 	.word	0x08001f40
 8016c40:	08001f48 	.word	0x08001f48
 8016c44:	20000298 	.word	0x20000298
 8016c48:	08002214 	.word	0x08002214
 8016c4c:	080021b8 	.word	0x080021b8
	        } else {
	          if((MenuNow[Current] == VIEWPOSI)&&((List[MenuNow[Current]].Val) >=150 ))
 8016c50:	4b88      	ldr	r3, [pc, #544]	; (8016e74 <main+0xb94>)
 8016c52:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016c56:	461a      	mov	r2, r3
 8016c58:	4b87      	ldr	r3, [pc, #540]	; (8016e78 <main+0xb98>)
 8016c5a:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8016c5e:	2b08      	cmp	r3, #8
 8016c60:	d12a      	bne.n	8016cb8 <main+0x9d8>
 8016c62:	4b84      	ldr	r3, [pc, #528]	; (8016e74 <main+0xb94>)
 8016c64:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016c68:	461a      	mov	r2, r3
 8016c6a:	4b83      	ldr	r3, [pc, #524]	; (8016e78 <main+0xb98>)
 8016c6c:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8016c70:	4a82      	ldr	r2, [pc, #520]	; (8016e7c <main+0xb9c>)
 8016c72:	00db      	lsls	r3, r3, #3
 8016c74:	4413      	add	r3, r2
 8016c76:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8016c7a:	2b95      	cmp	r3, #149	; 0x95
 8016c7c:	dd1c      	ble.n	8016cb8 <main+0x9d8>
	            List[MenuNow[Current]].Val-=25;
 8016c7e:	4b7d      	ldr	r3, [pc, #500]	; (8016e74 <main+0xb94>)
 8016c80:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016c84:	461a      	mov	r2, r3
 8016c86:	4b7c      	ldr	r3, [pc, #496]	; (8016e78 <main+0xb98>)
 8016c88:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8016c8c:	4a7b      	ldr	r2, [pc, #492]	; (8016e7c <main+0xb9c>)
 8016c8e:	00db      	lsls	r3, r3, #3
 8016c90:	4413      	add	r3, r2
 8016c92:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8016c96:	b29b      	uxth	r3, r3
 8016c98:	3b19      	subs	r3, #25
 8016c9a:	b29a      	uxth	r2, r3
 8016c9c:	4b75      	ldr	r3, [pc, #468]	; (8016e74 <main+0xb94>)
 8016c9e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016ca2:	4619      	mov	r1, r3
 8016ca4:	4b74      	ldr	r3, [pc, #464]	; (8016e78 <main+0xb98>)
 8016ca6:	f933 3011 	ldrsh.w	r3, [r3, r1, lsl #1]
 8016caa:	b211      	sxth	r1, r2
 8016cac:	4a73      	ldr	r2, [pc, #460]	; (8016e7c <main+0xb9c>)
 8016cae:	00db      	lsls	r3, r3, #3
 8016cb0:	4413      	add	r3, r2
 8016cb2:	460a      	mov	r2, r1
 8016cb4:	809a      	strh	r2, [r3, #4]
 8016cb6:	e0a0      	b.n	8016dfa <main+0xb1a>
	          else{
	          //============5.04�޸������߳�����������========
	            if(MenuNow[Current] == THRESHOLD){
 8016cb8:	4b6e      	ldr	r3, [pc, #440]	; (8016e74 <main+0xb94>)
 8016cba:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016cbe:	461a      	mov	r2, r3
 8016cc0:	4b6d      	ldr	r3, [pc, #436]	; (8016e78 <main+0xb98>)
 8016cc2:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8016cc6:	2b10      	cmp	r3, #16
 8016cc8:	d121      	bne.n	8016d0e <main+0xa2e>
	              if((List[V0_POSI].Val + List[THRESHOLD].Val) > 2)  //����������
 8016cca:	4b6c      	ldr	r3, [pc, #432]	; (8016e7c <main+0xb9c>)
 8016ccc:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 8016cd0:	461a      	mov	r2, r3
 8016cd2:	4b6a      	ldr	r3, [pc, #424]	; (8016e7c <main+0xb9c>)
 8016cd4:	f9b3 3084 	ldrsh.w	r3, [r3, #132]	; 0x84
 8016cd8:	4413      	add	r3, r2
 8016cda:	2b02      	cmp	r3, #2
 8016cdc:	f340 808d 	ble.w	8016dfa <main+0xb1a>
	                List[MenuNow[Current]].Val--;
 8016ce0:	4b64      	ldr	r3, [pc, #400]	; (8016e74 <main+0xb94>)
 8016ce2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016ce6:	461a      	mov	r2, r3
 8016ce8:	4b63      	ldr	r3, [pc, #396]	; (8016e78 <main+0xb98>)
 8016cea:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8016cee:	461a      	mov	r2, r3
 8016cf0:	4962      	ldr	r1, [pc, #392]	; (8016e7c <main+0xb9c>)
 8016cf2:	00d3      	lsls	r3, r2, #3
 8016cf4:	440b      	add	r3, r1
 8016cf6:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8016cfa:	b29b      	uxth	r3, r3
 8016cfc:	3b01      	subs	r3, #1
 8016cfe:	b29b      	uxth	r3, r3
 8016d00:	b218      	sxth	r0, r3
 8016d02:	495e      	ldr	r1, [pc, #376]	; (8016e7c <main+0xb9c>)
 8016d04:	00d3      	lsls	r3, r2, #3
 8016d06:	440b      	add	r3, r1
 8016d08:	4602      	mov	r2, r0
 8016d0a:	809a      	strh	r2, [r3, #4]
 8016d0c:	e075      	b.n	8016dfa <main+0xb1a>
	            }
	            else if(MenuNow[Current] == V0_POSI){
 8016d0e:	4b59      	ldr	r3, [pc, #356]	; (8016e74 <main+0xb94>)
 8016d10:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016d14:	461a      	mov	r2, r3
 8016d16:	4b58      	ldr	r3, [pc, #352]	; (8016e78 <main+0xb98>)
 8016d18:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8016d1c:	2b03      	cmp	r3, #3
 8016d1e:	d134      	bne.n	8016d8a <main+0xaaa>
	              if((List[V0_POSI].Val + List[THRESHOLD].Val) <2){
 8016d20:	4b56      	ldr	r3, [pc, #344]	; (8016e7c <main+0xb9c>)
 8016d22:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 8016d26:	461a      	mov	r2, r3
 8016d28:	4b54      	ldr	r3, [pc, #336]	; (8016e7c <main+0xb9c>)
 8016d2a:	f9b3 3084 	ldrsh.w	r3, [r3, #132]	; 0x84
 8016d2e:	4413      	add	r3, r2
 8016d30:	2b01      	cmp	r3, #1
 8016d32:	dc13      	bgt.n	8016d5c <main+0xa7c>
	                List[V0_POSI].Val--;
 8016d34:	4b51      	ldr	r3, [pc, #324]	; (8016e7c <main+0xb9c>)
 8016d36:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 8016d3a:	b29b      	uxth	r3, r3
 8016d3c:	3b01      	subs	r3, #1
 8016d3e:	b29b      	uxth	r3, r3
 8016d40:	b21a      	sxth	r2, r3
 8016d42:	4b4e      	ldr	r3, [pc, #312]	; (8016e7c <main+0xb9c>)
 8016d44:	839a      	strh	r2, [r3, #28]
	                List[THRESHOLD].Val++;
 8016d46:	4b4d      	ldr	r3, [pc, #308]	; (8016e7c <main+0xb9c>)
 8016d48:	f9b3 3084 	ldrsh.w	r3, [r3, #132]	; 0x84
 8016d4c:	b29b      	uxth	r3, r3
 8016d4e:	3301      	adds	r3, #1
 8016d50:	b29b      	uxth	r3, r3
 8016d52:	b21a      	sxth	r2, r3
 8016d54:	4b49      	ldr	r3, [pc, #292]	; (8016e7c <main+0xb9c>)
 8016d56:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84
 8016d5a:	e04e      	b.n	8016dfa <main+0xb1a>
	              }else List[MenuNow[Current]].Val--;
 8016d5c:	4b45      	ldr	r3, [pc, #276]	; (8016e74 <main+0xb94>)
 8016d5e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016d62:	461a      	mov	r2, r3
 8016d64:	4b44      	ldr	r3, [pc, #272]	; (8016e78 <main+0xb98>)
 8016d66:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8016d6a:	461a      	mov	r2, r3
 8016d6c:	4943      	ldr	r1, [pc, #268]	; (8016e7c <main+0xb9c>)
 8016d6e:	00d3      	lsls	r3, r2, #3
 8016d70:	440b      	add	r3, r1
 8016d72:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8016d76:	b29b      	uxth	r3, r3
 8016d78:	3b01      	subs	r3, #1
 8016d7a:	b29b      	uxth	r3, r3
 8016d7c:	b218      	sxth	r0, r3
 8016d7e:	493f      	ldr	r1, [pc, #252]	; (8016e7c <main+0xb9c>)
 8016d80:	00d3      	lsls	r3, r2, #3
 8016d82:	440b      	add	r3, r1
 8016d84:	4602      	mov	r2, r0
 8016d86:	809a      	strh	r2, [r3, #4]
 8016d88:	e037      	b.n	8016dfa <main+0xb1a>
	            }
	            else if((MenuNow[Current] ==V1_POSI) && (List[V1_POSI].Val <= List[V2_POSI].Val))
 8016d8a:	4b3a      	ldr	r3, [pc, #232]	; (8016e74 <main+0xb94>)
 8016d8c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016d90:	461a      	mov	r2, r3
 8016d92:	4b39      	ldr	r3, [pc, #228]	; (8016e78 <main+0xb98>)
 8016d94:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8016d98:	2b04      	cmp	r3, #4
 8016d9a:	d118      	bne.n	8016dce <main+0xaee>
 8016d9c:	4b37      	ldr	r3, [pc, #220]	; (8016e7c <main+0xb9c>)
 8016d9e:	f9b3 2024 	ldrsh.w	r2, [r3, #36]	; 0x24
 8016da2:	4b36      	ldr	r3, [pc, #216]	; (8016e7c <main+0xb9c>)
 8016da4:	f9b3 302c 	ldrsh.w	r3, [r3, #44]	; 0x2c
 8016da8:	429a      	cmp	r2, r3
 8016daa:	dc10      	bgt.n	8016dce <main+0xaee>
	            List[MenuNow[Current]].Val=List[V2_POSI].Val;
 8016dac:	4b31      	ldr	r3, [pc, #196]	; (8016e74 <main+0xb94>)
 8016dae:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016db2:	461a      	mov	r2, r3
 8016db4:	4b30      	ldr	r3, [pc, #192]	; (8016e78 <main+0xb98>)
 8016db6:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8016dba:	4618      	mov	r0, r3
 8016dbc:	4b2f      	ldr	r3, [pc, #188]	; (8016e7c <main+0xb9c>)
 8016dbe:	f9b3 102c 	ldrsh.w	r1, [r3, #44]	; 0x2c
 8016dc2:	4a2e      	ldr	r2, [pc, #184]	; (8016e7c <main+0xb9c>)
 8016dc4:	00c3      	lsls	r3, r0, #3
 8016dc6:	4413      	add	r3, r2
 8016dc8:	460a      	mov	r2, r1
 8016dca:	809a      	strh	r2, [r3, #4]
 8016dcc:	e015      	b.n	8016dfa <main+0xb1a>
	            else List[MenuNow[Current]].Val--;
 8016dce:	4b29      	ldr	r3, [pc, #164]	; (8016e74 <main+0xb94>)
 8016dd0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016dd4:	461a      	mov	r2, r3
 8016dd6:	4b28      	ldr	r3, [pc, #160]	; (8016e78 <main+0xb98>)
 8016dd8:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8016ddc:	461a      	mov	r2, r3
 8016dde:	4927      	ldr	r1, [pc, #156]	; (8016e7c <main+0xb9c>)
 8016de0:	00d3      	lsls	r3, r2, #3
 8016de2:	440b      	add	r3, r1
 8016de4:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8016de8:	b29b      	uxth	r3, r3
 8016dea:	3b01      	subs	r3, #1
 8016dec:	b29b      	uxth	r3, r3
 8016dee:	b218      	sxth	r0, r3
 8016df0:	4922      	ldr	r1, [pc, #136]	; (8016e7c <main+0xb9c>)
 8016df2:	00d3      	lsls	r3, r2, #3
 8016df4:	440b      	add	r3, r1
 8016df6:	4602      	mov	r2, r0
 8016df8:	809a      	strh	r2, [r3, #4]
	          }
	          //==============================================
	            if(MenuNow[Current] == SMPL_DPTH){
 8016dfa:	4b1e      	ldr	r3, [pc, #120]	; (8016e74 <main+0xb94>)
 8016dfc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016e00:	461a      	mov	r2, r3
 8016e02:	4b1d      	ldr	r3, [pc, #116]	; (8016e78 <main+0xb98>)
 8016e04:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8016e08:	2b09      	cmp	r3, #9
 8016e0a:	d103      	bne.n	8016e14 <main+0xb34>
	              List[VIEWPOSI].Val=1 ;
 8016e0c:	4b1b      	ldr	r3, [pc, #108]	; (8016e7c <main+0xb9c>)
 8016e0e:	2201      	movs	r2, #1
 8016e10:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
	           }
	            if((MenuNow[Current] ==T2_POSI) && (List[T2_POSI].Val <= List[T1_POSI].Val))
 8016e14:	4b17      	ldr	r3, [pc, #92]	; (8016e74 <main+0xb94>)
 8016e16:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016e1a:	461a      	mov	r2, r3
 8016e1c:	4b16      	ldr	r3, [pc, #88]	; (8016e78 <main+0xb98>)
 8016e1e:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8016e22:	2b0b      	cmp	r3, #11
 8016e24:	d117      	bne.n	8016e56 <main+0xb76>
 8016e26:	4b15      	ldr	r3, [pc, #84]	; (8016e7c <main+0xb9c>)
 8016e28:	f9b3 205c 	ldrsh.w	r2, [r3, #92]	; 0x5c
 8016e2c:	4b13      	ldr	r3, [pc, #76]	; (8016e7c <main+0xb9c>)
 8016e2e:	f9b3 3054 	ldrsh.w	r3, [r3, #84]	; 0x54
 8016e32:	429a      	cmp	r2, r3
 8016e34:	dc0f      	bgt.n	8016e56 <main+0xb76>
	              List[MenuNow[Current]].Val=List[T1_POSI].Val;
 8016e36:	4b0f      	ldr	r3, [pc, #60]	; (8016e74 <main+0xb94>)
 8016e38:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016e3c:	461a      	mov	r2, r3
 8016e3e:	4b0e      	ldr	r3, [pc, #56]	; (8016e78 <main+0xb98>)
 8016e40:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8016e44:	4618      	mov	r0, r3
 8016e46:	4b0d      	ldr	r3, [pc, #52]	; (8016e7c <main+0xb9c>)
 8016e48:	f9b3 1054 	ldrsh.w	r1, [r3, #84]	; 0x54
 8016e4c:	4a0b      	ldr	r2, [pc, #44]	; (8016e7c <main+0xb9c>)
 8016e4e:	00c3      	lsls	r3, r0, #3
 8016e50:	4413      	add	r3, r2
 8016e52:	460a      	mov	r2, r1
 8016e54:	809a      	strh	r2, [r3, #4]
	        }
	        if(Current == TRG) Status &= ~STOP; // �ı�ͬ��ģʽ��ָ�����״̬
 8016e56:	4b07      	ldr	r3, [pc, #28]	; (8016e74 <main+0xb94>)
 8016e58:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016e5c:	2b02      	cmp	r3, #2
 8016e5e:	f040 821e 	bne.w	801729e <main+0xfbe>
 8016e62:	4b07      	ldr	r3, [pc, #28]	; (8016e80 <main+0xba0>)
 8016e64:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016e68:	f023 0301 	bic.w	r3, r3, #1
 8016e6c:	b21a      	sxth	r2, r3
 8016e6e:	4b04      	ldr	r3, [pc, #16]	; (8016e80 <main+0xba0>)
 8016e70:	801a      	strh	r2, [r3, #0]
	        break;
 8016e72:	e214      	b.n	801729e <main+0xfbe>
 8016e74:	2000079e 	.word	0x2000079e
 8016e78:	20000538 	.word	0x20000538
 8016e7c:	20000298 	.word	0x20000298
 8016e80:	200007a0 	.word	0x200007a0

	      case KEYCODE_RIGHT:
	        if((Current==ST)&& !(PopType & LIST_POP))break;
 8016e84:	4bb7      	ldr	r3, [pc, #732]	; (8017164 <main+0xe84>)
 8016e86:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016e8a:	2b07      	cmp	r3, #7
 8016e8c:	d106      	bne.n	8016e9c <main+0xbbc>
 8016e8e:	4bb6      	ldr	r3, [pc, #728]	; (8017168 <main+0xe88>)
 8016e90:	781b      	ldrb	r3, [r3, #0]
 8016e92:	f003 0302 	and.w	r3, r3, #2
 8016e96:	2b00      	cmp	r3, #0
 8016e98:	f000 8203 	beq.w	80172a2 <main+0xfc2>
	        List[MenuNow[Current]].Flg |= UPD;  // ˢ�±��ǰԭ��ʾ��Ŀ����
 8016e9c:	4bb1      	ldr	r3, [pc, #708]	; (8017164 <main+0xe84>)
 8016e9e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016ea2:	461a      	mov	r2, r3
 8016ea4:	4bb1      	ldr	r3, [pc, #708]	; (801716c <main+0xe8c>)
 8016ea6:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8016eaa:	4ab1      	ldr	r2, [pc, #708]	; (8017170 <main+0xe90>)
 8016eac:	00db      	lsls	r3, r3, #3
 8016eae:	4413      	add	r3, r2
 8016eb0:	799b      	ldrb	r3, [r3, #6]
 8016eb2:	4aac      	ldr	r2, [pc, #688]	; (8017164 <main+0xe84>)
 8016eb4:	f9b2 2000 	ldrsh.w	r2, [r2]
 8016eb8:	4611      	mov	r1, r2
 8016eba:	4aac      	ldr	r2, [pc, #688]	; (801716c <main+0xe8c>)
 8016ebc:	f932 2011 	ldrsh.w	r2, [r2, r1, lsl #1]
 8016ec0:	4610      	mov	r0, r2
 8016ec2:	f043 0320 	orr.w	r3, r3, #32
 8016ec6:	b2d9      	uxtb	r1, r3
 8016ec8:	4aa9      	ldr	r2, [pc, #676]	; (8017170 <main+0xe90>)
 8016eca:	00c3      	lsls	r3, r0, #3
 8016ecc:	4413      	add	r3, r2
 8016ece:	460a      	mov	r2, r1
 8016ed0:	719a      	strb	r2, [r3, #6]
	        if(List[MenuNow[Current]].Val >=MAX[MenuNow[Current]] ){
 8016ed2:	4ba4      	ldr	r3, [pc, #656]	; (8017164 <main+0xe84>)
 8016ed4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016ed8:	461a      	mov	r2, r3
 8016eda:	4ba4      	ldr	r3, [pc, #656]	; (801716c <main+0xe8c>)
 8016edc:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8016ee0:	4aa3      	ldr	r2, [pc, #652]	; (8017170 <main+0xe90>)
 8016ee2:	00db      	lsls	r3, r3, #3
 8016ee4:	4413      	add	r3, r2
 8016ee6:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
 8016eea:	4b9e      	ldr	r3, [pc, #632]	; (8017164 <main+0xe84>)
 8016eec:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016ef0:	4619      	mov	r1, r3
 8016ef2:	4b9e      	ldr	r3, [pc, #632]	; (801716c <main+0xe8c>)
 8016ef4:	f933 3011 	ldrsh.w	r3, [r3, r1, lsl #1]
 8016ef8:	4619      	mov	r1, r3
 8016efa:	4b9e      	ldr	r3, [pc, #632]	; (8017174 <main+0xe94>)
 8016efc:	f933 3011 	ldrsh.w	r3, [r3, r1, lsl #1]
 8016f00:	429a      	cmp	r2, r3
 8016f02:	db73      	blt.n	8016fec <main+0xd0c>
	          if((MenuNow[Current] == COUPLING)||(MenuNow[Current] == YN_TYPE )||
 8016f04:	4b97      	ldr	r3, [pc, #604]	; (8017164 <main+0xe84>)
 8016f06:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016f0a:	461a      	mov	r2, r3
 8016f0c:	4b97      	ldr	r3, [pc, #604]	; (801716c <main+0xe8c>)
 8016f0e:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8016f12:	2b01      	cmp	r3, #1
 8016f14:	d051      	beq.n	8016fba <main+0xcda>
 8016f16:	4b93      	ldr	r3, [pc, #588]	; (8017164 <main+0xe84>)
 8016f18:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016f1c:	461a      	mov	r2, r3
 8016f1e:	4b93      	ldr	r3, [pc, #588]	; (801716c <main+0xe8c>)
 8016f20:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8016f24:	2b06      	cmp	r3, #6
 8016f26:	d048      	beq.n	8016fba <main+0xcda>
	            (MenuNow[Current] == XN_TYPE )||(MenuNow[Current] == EXT_HIDE)||
 8016f28:	4b8e      	ldr	r3, [pc, #568]	; (8017164 <main+0xe84>)
 8016f2a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016f2e:	461a      	mov	r2, r3
 8016f30:	4b8e      	ldr	r3, [pc, #568]	; (801716c <main+0xe8c>)
 8016f32:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
	          if((MenuNow[Current] == COUPLING)||(MenuNow[Current] == YN_TYPE )||
 8016f36:	2b0c      	cmp	r3, #12
 8016f38:	d03f      	beq.n	8016fba <main+0xcda>
	            (MenuNow[Current] == XN_TYPE )||(MenuNow[Current] == EXT_HIDE)||
 8016f3a:	4b8a      	ldr	r3, [pc, #552]	; (8017164 <main+0xe84>)
 8016f3c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016f40:	461a      	mov	r2, r3
 8016f42:	4b8a      	ldr	r3, [pc, #552]	; (801716c <main+0xe8c>)
 8016f44:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8016f48:	2b1c      	cmp	r3, #28
 8016f4a:	d036      	beq.n	8016fba <main+0xcda>
	            ( MenuNow[Current] == FITTRIGG)||(MenuNow[Current] == TR_MODE )||
 8016f4c:	4b85      	ldr	r3, [pc, #532]	; (8017164 <main+0xe84>)
 8016f4e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016f52:	461a      	mov	r2, r3
 8016f54:	4b85      	ldr	r3, [pc, #532]	; (801716c <main+0xe8c>)
 8016f56:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
	            (MenuNow[Current] == XN_TYPE )||(MenuNow[Current] == EXT_HIDE)||
 8016f5a:	2b0f      	cmp	r3, #15
 8016f5c:	d02d      	beq.n	8016fba <main+0xcda>
	            ( MenuNow[Current] == FITTRIGG)||(MenuNow[Current] == TR_MODE )||
 8016f5e:	4b81      	ldr	r3, [pc, #516]	; (8017164 <main+0xe84>)
 8016f60:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016f64:	461a      	mov	r2, r3
 8016f66:	4b81      	ldr	r3, [pc, #516]	; (801716c <main+0xe8c>)
 8016f68:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8016f6c:	2b0e      	cmp	r3, #14
 8016f6e:	d024      	beq.n	8016fba <main+0xcda>
	            ( MenuNow[Current] == SYNCMODE)||(MenuNow[Current] == EXT_REFN)||
 8016f70:	4b7c      	ldr	r3, [pc, #496]	; (8017164 <main+0xe84>)
 8016f72:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016f76:	461a      	mov	r2, r3
 8016f78:	4b7c      	ldr	r3, [pc, #496]	; (801716c <main+0xe8c>)
 8016f7a:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
	            ( MenuNow[Current] == FITTRIGG)||(MenuNow[Current] == TR_MODE )||
 8016f7e:	2b0d      	cmp	r3, #13
 8016f80:	d01b      	beq.n	8016fba <main+0xcda>
	            ( MenuNow[Current] == SYNCMODE)||(MenuNow[Current] == EXT_REFN)||
 8016f82:	4b78      	ldr	r3, [pc, #480]	; (8017164 <main+0xe84>)
 8016f84:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016f88:	461a      	mov	r2, r3
 8016f8a:	4b78      	ldr	r3, [pc, #480]	; (801716c <main+0xe8c>)
 8016f8c:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8016f90:	2b1a      	cmp	r3, #26
 8016f92:	d012      	beq.n	8016fba <main+0xcda>
	            (MenuNow[Current] == PROBEATT)||(MenuNow[Current] == TPYE_OUT))
 8016f94:	4b73      	ldr	r3, [pc, #460]	; (8017164 <main+0xe84>)
 8016f96:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016f9a:	461a      	mov	r2, r3
 8016f9c:	4b73      	ldr	r3, [pc, #460]	; (801716c <main+0xe8c>)
 8016f9e:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
	            ( MenuNow[Current] == SYNCMODE)||(MenuNow[Current] == EXT_REFN)||
 8016fa2:	2b02      	cmp	r3, #2
 8016fa4:	d009      	beq.n	8016fba <main+0xcda>
	            (MenuNow[Current] == PROBEATT)||(MenuNow[Current] == TPYE_OUT))
 8016fa6:	4b6f      	ldr	r3, [pc, #444]	; (8017164 <main+0xe84>)
 8016fa8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016fac:	461a      	mov	r2, r3
 8016fae:	4b6f      	ldr	r3, [pc, #444]	; (801716c <main+0xe8c>)
 8016fb0:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8016fb4:	2b24      	cmp	r3, #36	; 0x24
 8016fb6:	f040 8153 	bne.w	8017260 <main+0xf80>
	            List[MenuNow[Current]].Val =MIN[MenuNow[Current]] ;
 8016fba:	4b6a      	ldr	r3, [pc, #424]	; (8017164 <main+0xe84>)
 8016fbc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016fc0:	461a      	mov	r2, r3
 8016fc2:	4b6a      	ldr	r3, [pc, #424]	; (801716c <main+0xe8c>)
 8016fc4:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8016fc8:	461a      	mov	r2, r3
 8016fca:	4b66      	ldr	r3, [pc, #408]	; (8017164 <main+0xe84>)
 8016fcc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016fd0:	4619      	mov	r1, r3
 8016fd2:	4b66      	ldr	r3, [pc, #408]	; (801716c <main+0xe8c>)
 8016fd4:	f933 3011 	ldrsh.w	r3, [r3, r1, lsl #1]
 8016fd8:	4618      	mov	r0, r3
 8016fda:	4b67      	ldr	r3, [pc, #412]	; (8017178 <main+0xe98>)
 8016fdc:	f933 1012 	ldrsh.w	r1, [r3, r2, lsl #1]
 8016fe0:	4a63      	ldr	r2, [pc, #396]	; (8017170 <main+0xe90>)
 8016fe2:	00c3      	lsls	r3, r0, #3
 8016fe4:	4413      	add	r3, r2
 8016fe6:	460a      	mov	r2, r1
 8016fe8:	809a      	strh	r2, [r3, #4]
 8016fea:	e139      	b.n	8017260 <main+0xf80>
	        } else {
	            if(MenuNow[Current] == VIEWPOSI)
 8016fec:	4b5d      	ldr	r3, [pc, #372]	; (8017164 <main+0xe84>)
 8016fee:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016ff2:	461a      	mov	r2, r3
 8016ff4:	4b5d      	ldr	r3, [pc, #372]	; (801716c <main+0xe8c>)
 8016ff6:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8016ffa:	2b08      	cmp	r3, #8
 8016ffc:	d15f      	bne.n	80170be <main+0xdde>
	            {
	              if(List[MenuNow[Current]].Val <(DEPTH[List[SMPL_DPTH].Val]-(350-List[SMPL_DPTH].Val)))
 8016ffe:	4b59      	ldr	r3, [pc, #356]	; (8017164 <main+0xe84>)
 8017000:	f9b3 3000 	ldrsh.w	r3, [r3]
 8017004:	461a      	mov	r2, r3
 8017006:	4b59      	ldr	r3, [pc, #356]	; (801716c <main+0xe8c>)
 8017008:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 801700c:	4a58      	ldr	r2, [pc, #352]	; (8017170 <main+0xe90>)
 801700e:	00db      	lsls	r3, r3, #3
 8017010:	4413      	add	r3, r2
 8017012:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8017016:	461a      	mov	r2, r3
 8017018:	4b55      	ldr	r3, [pc, #340]	; (8017170 <main+0xe90>)
 801701a:	f9b3 304c 	ldrsh.w	r3, [r3, #76]	; 0x4c
 801701e:	4619      	mov	r1, r3
 8017020:	4b56      	ldr	r3, [pc, #344]	; (801717c <main+0xe9c>)
 8017022:	f933 3011 	ldrsh.w	r3, [r3, r1, lsl #1]
 8017026:	4619      	mov	r1, r3
 8017028:	4b51      	ldr	r3, [pc, #324]	; (8017170 <main+0xe90>)
 801702a:	f9b3 304c 	ldrsh.w	r3, [r3, #76]	; 0x4c
 801702e:	f5c3 73af 	rsb	r3, r3, #350	; 0x15e
 8017032:	1acb      	subs	r3, r1, r3
 8017034:	429a      	cmp	r2, r3
 8017036:	f280 80f2 	bge.w	801721e <main+0xf3e>
	              {
	                if(List[MenuNow[Current]].Val >150 )
 801703a:	4b4a      	ldr	r3, [pc, #296]	; (8017164 <main+0xe84>)
 801703c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8017040:	461a      	mov	r2, r3
 8017042:	4b4a      	ldr	r3, [pc, #296]	; (801716c <main+0xe8c>)
 8017044:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8017048:	4a49      	ldr	r2, [pc, #292]	; (8017170 <main+0xe90>)
 801704a:	00db      	lsls	r3, r3, #3
 801704c:	4413      	add	r3, r2
 801704e:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8017052:	2b96      	cmp	r3, #150	; 0x96
 8017054:	dd1c      	ble.n	8017090 <main+0xdb0>
	                  List[MenuNow[Current]].Val += 25;
 8017056:	4b43      	ldr	r3, [pc, #268]	; (8017164 <main+0xe84>)
 8017058:	f9b3 3000 	ldrsh.w	r3, [r3]
 801705c:	461a      	mov	r2, r3
 801705e:	4b43      	ldr	r3, [pc, #268]	; (801716c <main+0xe8c>)
 8017060:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8017064:	4a42      	ldr	r2, [pc, #264]	; (8017170 <main+0xe90>)
 8017066:	00db      	lsls	r3, r3, #3
 8017068:	4413      	add	r3, r2
 801706a:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801706e:	b29b      	uxth	r3, r3
 8017070:	3319      	adds	r3, #25
 8017072:	b29a      	uxth	r2, r3
 8017074:	4b3b      	ldr	r3, [pc, #236]	; (8017164 <main+0xe84>)
 8017076:	f9b3 3000 	ldrsh.w	r3, [r3]
 801707a:	4619      	mov	r1, r3
 801707c:	4b3b      	ldr	r3, [pc, #236]	; (801716c <main+0xe8c>)
 801707e:	f933 3011 	ldrsh.w	r3, [r3, r1, lsl #1]
 8017082:	b211      	sxth	r1, r2
 8017084:	4a3a      	ldr	r2, [pc, #232]	; (8017170 <main+0xe90>)
 8017086:	00db      	lsls	r3, r3, #3
 8017088:	4413      	add	r3, r2
 801708a:	460a      	mov	r2, r1
 801708c:	809a      	strh	r2, [r3, #4]
 801708e:	e0c6      	b.n	801721e <main+0xf3e>
	                else
	                  List[MenuNow[Current]].Val++;
 8017090:	4b34      	ldr	r3, [pc, #208]	; (8017164 <main+0xe84>)
 8017092:	f9b3 3000 	ldrsh.w	r3, [r3]
 8017096:	461a      	mov	r2, r3
 8017098:	4b34      	ldr	r3, [pc, #208]	; (801716c <main+0xe8c>)
 801709a:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 801709e:	461a      	mov	r2, r3
 80170a0:	4933      	ldr	r1, [pc, #204]	; (8017170 <main+0xe90>)
 80170a2:	00d3      	lsls	r3, r2, #3
 80170a4:	440b      	add	r3, r1
 80170a6:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80170aa:	b29b      	uxth	r3, r3
 80170ac:	3301      	adds	r3, #1
 80170ae:	b29b      	uxth	r3, r3
 80170b0:	b218      	sxth	r0, r3
 80170b2:	492f      	ldr	r1, [pc, #188]	; (8017170 <main+0xe90>)
 80170b4:	00d3      	lsls	r3, r2, #3
 80170b6:	440b      	add	r3, r1
 80170b8:	4602      	mov	r2, r0
 80170ba:	809a      	strh	r2, [r3, #4]
 80170bc:	e0af      	b.n	801721e <main+0xf3e>
	              }
	            }
	            else{
	              //============4.27�޸������߳�����������========
	              if(MenuNow[Current] == THRESHOLD){
 80170be:	4b29      	ldr	r3, [pc, #164]	; (8017164 <main+0xe84>)
 80170c0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80170c4:	461a      	mov	r2, r3
 80170c6:	4b29      	ldr	r3, [pc, #164]	; (801716c <main+0xe8c>)
 80170c8:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 80170cc:	2b10      	cmp	r3, #16
 80170ce:	d121      	bne.n	8017114 <main+0xe34>
	                if((List[V0_POSI].Val + List[THRESHOLD].Val) < 198)
 80170d0:	4b27      	ldr	r3, [pc, #156]	; (8017170 <main+0xe90>)
 80170d2:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 80170d6:	461a      	mov	r2, r3
 80170d8:	4b25      	ldr	r3, [pc, #148]	; (8017170 <main+0xe90>)
 80170da:	f9b3 3084 	ldrsh.w	r3, [r3, #132]	; 0x84
 80170de:	4413      	add	r3, r2
 80170e0:	2bc5      	cmp	r3, #197	; 0xc5
 80170e2:	f300 809c 	bgt.w	801721e <main+0xf3e>
	                 List[MenuNow[Current]].Val++;
 80170e6:	4b1f      	ldr	r3, [pc, #124]	; (8017164 <main+0xe84>)
 80170e8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80170ec:	461a      	mov	r2, r3
 80170ee:	4b1f      	ldr	r3, [pc, #124]	; (801716c <main+0xe8c>)
 80170f0:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 80170f4:	461a      	mov	r2, r3
 80170f6:	491e      	ldr	r1, [pc, #120]	; (8017170 <main+0xe90>)
 80170f8:	00d3      	lsls	r3, r2, #3
 80170fa:	440b      	add	r3, r1
 80170fc:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8017100:	b29b      	uxth	r3, r3
 8017102:	3301      	adds	r3, #1
 8017104:	b29b      	uxth	r3, r3
 8017106:	b218      	sxth	r0, r3
 8017108:	4919      	ldr	r1, [pc, #100]	; (8017170 <main+0xe90>)
 801710a:	00d3      	lsls	r3, r2, #3
 801710c:	440b      	add	r3, r1
 801710e:	4602      	mov	r2, r0
 8017110:	809a      	strh	r2, [r3, #4]
 8017112:	e084      	b.n	801721e <main+0xf3e>
	              }
	              else if(MenuNow[Current] == V0_POSI){
 8017114:	4b13      	ldr	r3, [pc, #76]	; (8017164 <main+0xe84>)
 8017116:	f9b3 3000 	ldrsh.w	r3, [r3]
 801711a:	461a      	mov	r2, r3
 801711c:	4b13      	ldr	r3, [pc, #76]	; (801716c <main+0xe8c>)
 801711e:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8017122:	2b03      	cmp	r3, #3
 8017124:	d143      	bne.n	80171ae <main+0xece>
	                if((List[V0_POSI].Val + List[THRESHOLD].Val) > 198){
 8017126:	4b12      	ldr	r3, [pc, #72]	; (8017170 <main+0xe90>)
 8017128:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 801712c:	461a      	mov	r2, r3
 801712e:	4b10      	ldr	r3, [pc, #64]	; (8017170 <main+0xe90>)
 8017130:	f9b3 3084 	ldrsh.w	r3, [r3, #132]	; 0x84
 8017134:	4413      	add	r3, r2
 8017136:	2bc6      	cmp	r3, #198	; 0xc6
 8017138:	dd22      	ble.n	8017180 <main+0xea0>
	                  List[V0_POSI].Val++;
 801713a:	4b0d      	ldr	r3, [pc, #52]	; (8017170 <main+0xe90>)
 801713c:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 8017140:	b29b      	uxth	r3, r3
 8017142:	3301      	adds	r3, #1
 8017144:	b29b      	uxth	r3, r3
 8017146:	b21a      	sxth	r2, r3
 8017148:	4b09      	ldr	r3, [pc, #36]	; (8017170 <main+0xe90>)
 801714a:	839a      	strh	r2, [r3, #28]
	                  List[THRESHOLD].Val--;
 801714c:	4b08      	ldr	r3, [pc, #32]	; (8017170 <main+0xe90>)
 801714e:	f9b3 3084 	ldrsh.w	r3, [r3, #132]	; 0x84
 8017152:	b29b      	uxth	r3, r3
 8017154:	3b01      	subs	r3, #1
 8017156:	b29b      	uxth	r3, r3
 8017158:	b21a      	sxth	r2, r3
 801715a:	4b05      	ldr	r3, [pc, #20]	; (8017170 <main+0xe90>)
 801715c:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84
 8017160:	e05d      	b.n	801721e <main+0xf3e>
 8017162:	bf00      	nop
 8017164:	2000079e 	.word	0x2000079e
 8017168:	2000078e 	.word	0x2000078e
 801716c:	20000538 	.word	0x20000538
 8017170:	20000298 	.word	0x20000298
 8017174:	080021b8 	.word	0x080021b8
 8017178:	08002214 	.word	0x08002214
 801717c:	08002270 	.word	0x08002270
	                }else List[MenuNow[Current]].Val++;
 8017180:	4b64      	ldr	r3, [pc, #400]	; (8017314 <main+0x1034>)
 8017182:	f9b3 3000 	ldrsh.w	r3, [r3]
 8017186:	461a      	mov	r2, r3
 8017188:	4b63      	ldr	r3, [pc, #396]	; (8017318 <main+0x1038>)
 801718a:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 801718e:	461a      	mov	r2, r3
 8017190:	4962      	ldr	r1, [pc, #392]	; (801731c <main+0x103c>)
 8017192:	00d3      	lsls	r3, r2, #3
 8017194:	440b      	add	r3, r1
 8017196:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801719a:	b29b      	uxth	r3, r3
 801719c:	3301      	adds	r3, #1
 801719e:	b29b      	uxth	r3, r3
 80171a0:	b218      	sxth	r0, r3
 80171a2:	495e      	ldr	r1, [pc, #376]	; (801731c <main+0x103c>)
 80171a4:	00d3      	lsls	r3, r2, #3
 80171a6:	440b      	add	r3, r1
 80171a8:	4602      	mov	r2, r0
 80171aa:	809a      	strh	r2, [r3, #4]
 80171ac:	e037      	b.n	801721e <main+0xf3e>
	              }
	              else if((MenuNow[Current] ==V2_POSI) && (List[V2_POSI].Val >= List[V1_POSI].Val))
 80171ae:	4b59      	ldr	r3, [pc, #356]	; (8017314 <main+0x1034>)
 80171b0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80171b4:	461a      	mov	r2, r3
 80171b6:	4b58      	ldr	r3, [pc, #352]	; (8017318 <main+0x1038>)
 80171b8:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 80171bc:	2b05      	cmp	r3, #5
 80171be:	d118      	bne.n	80171f2 <main+0xf12>
 80171c0:	4b56      	ldr	r3, [pc, #344]	; (801731c <main+0x103c>)
 80171c2:	f9b3 202c 	ldrsh.w	r2, [r3, #44]	; 0x2c
 80171c6:	4b55      	ldr	r3, [pc, #340]	; (801731c <main+0x103c>)
 80171c8:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	; 0x24
 80171cc:	429a      	cmp	r2, r3
 80171ce:	db10      	blt.n	80171f2 <main+0xf12>
	                List[MenuNow[Current]].Val=List[V1_POSI].Val;
 80171d0:	4b50      	ldr	r3, [pc, #320]	; (8017314 <main+0x1034>)
 80171d2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80171d6:	461a      	mov	r2, r3
 80171d8:	4b4f      	ldr	r3, [pc, #316]	; (8017318 <main+0x1038>)
 80171da:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 80171de:	4618      	mov	r0, r3
 80171e0:	4b4e      	ldr	r3, [pc, #312]	; (801731c <main+0x103c>)
 80171e2:	f9b3 1024 	ldrsh.w	r1, [r3, #36]	; 0x24
 80171e6:	4a4d      	ldr	r2, [pc, #308]	; (801731c <main+0x103c>)
 80171e8:	00c3      	lsls	r3, r0, #3
 80171ea:	4413      	add	r3, r2
 80171ec:	460a      	mov	r2, r1
 80171ee:	809a      	strh	r2, [r3, #4]
 80171f0:	e015      	b.n	801721e <main+0xf3e>
	              else List[MenuNow[Current]].Val++;
 80171f2:	4b48      	ldr	r3, [pc, #288]	; (8017314 <main+0x1034>)
 80171f4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80171f8:	461a      	mov	r2, r3
 80171fa:	4b47      	ldr	r3, [pc, #284]	; (8017318 <main+0x1038>)
 80171fc:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8017200:	461a      	mov	r2, r3
 8017202:	4946      	ldr	r1, [pc, #280]	; (801731c <main+0x103c>)
 8017204:	00d3      	lsls	r3, r2, #3
 8017206:	440b      	add	r3, r1
 8017208:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801720c:	b29b      	uxth	r3, r3
 801720e:	3301      	adds	r3, #1
 8017210:	b29b      	uxth	r3, r3
 8017212:	b218      	sxth	r0, r3
 8017214:	4941      	ldr	r1, [pc, #260]	; (801731c <main+0x103c>)
 8017216:	00d3      	lsls	r3, r2, #3
 8017218:	440b      	add	r3, r1
 801721a:	4602      	mov	r2, r0
 801721c:	809a      	strh	r2, [r3, #4]
	            }
	            //==============================================
	            if((MenuNow[Current] ==T1_POSI) && (List[T1_POSI].Val >= List[T2_POSI].Val))
 801721e:	4b3d      	ldr	r3, [pc, #244]	; (8017314 <main+0x1034>)
 8017220:	f9b3 3000 	ldrsh.w	r3, [r3]
 8017224:	461a      	mov	r2, r3
 8017226:	4b3c      	ldr	r3, [pc, #240]	; (8017318 <main+0x1038>)
 8017228:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 801722c:	2b0a      	cmp	r3, #10
 801722e:	d117      	bne.n	8017260 <main+0xf80>
 8017230:	4b3a      	ldr	r3, [pc, #232]	; (801731c <main+0x103c>)
 8017232:	f9b3 2054 	ldrsh.w	r2, [r3, #84]	; 0x54
 8017236:	4b39      	ldr	r3, [pc, #228]	; (801731c <main+0x103c>)
 8017238:	f9b3 305c 	ldrsh.w	r3, [r3, #92]	; 0x5c
 801723c:	429a      	cmp	r2, r3
 801723e:	db0f      	blt.n	8017260 <main+0xf80>
	               List[MenuNow[Current]].Val=List[T2_POSI].Val;
 8017240:	4b34      	ldr	r3, [pc, #208]	; (8017314 <main+0x1034>)
 8017242:	f9b3 3000 	ldrsh.w	r3, [r3]
 8017246:	461a      	mov	r2, r3
 8017248:	4b33      	ldr	r3, [pc, #204]	; (8017318 <main+0x1038>)
 801724a:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 801724e:	4618      	mov	r0, r3
 8017250:	4b32      	ldr	r3, [pc, #200]	; (801731c <main+0x103c>)
 8017252:	f9b3 105c 	ldrsh.w	r1, [r3, #92]	; 0x5c
 8017256:	4a31      	ldr	r2, [pc, #196]	; (801731c <main+0x103c>)
 8017258:	00c3      	lsls	r3, r0, #3
 801725a:	4413      	add	r3, r2
 801725c:	460a      	mov	r2, r1
 801725e:	809a      	strh	r2, [r3, #4]
	        }
	        if(Current == TRG) {Status &= ~STOP; // �ı�ͬ��ģʽ��ָ�����״̬
 8017260:	4b2c      	ldr	r3, [pc, #176]	; (8017314 <main+0x1034>)
 8017262:	f9b3 3000 	ldrsh.w	r3, [r3]
 8017266:	2b02      	cmp	r3, #2
 8017268:	d11d      	bne.n	80172a6 <main+0xfc6>
 801726a:	4b2d      	ldr	r3, [pc, #180]	; (8017320 <main+0x1040>)
 801726c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8017270:	f023 0301 	bic.w	r3, r3, #1
 8017274:	b21a      	sxth	r2, r3
 8017276:	4b2a      	ldr	r3, [pc, #168]	; (8017320 <main+0x1040>)
 8017278:	801a      	strh	r2, [r3, #0]
	        if(List[SYNCMODE].Val==SINGL)ADC_Start(); }
 801727a:	4b28      	ldr	r3, [pc, #160]	; (801731c <main+0x103c>)
 801727c:	f9b3 306c 	ldrsh.w	r3, [r3, #108]	; 0x6c
 8017280:	2b04      	cmp	r3, #4
 8017282:	d110      	bne.n	80172a6 <main+0xfc6>
 8017284:	f7f5 fa44 	bl	800c710 <ADC_Start>
	        break;
 8017288:	e00d      	b.n	80172a6 <main+0xfc6>
	         break;
 801728a:	bf00      	nop
 801728c:	e00c      	b.n	80172a8 <main+0xfc8>
	         break;
 801728e:	bf00      	nop
 8017290:	e00a      	b.n	80172a8 <main+0xfc8>
	        break;
 8017292:	bf00      	nop
 8017294:	e008      	b.n	80172a8 <main+0xfc8>
	        break;
 8017296:	bf00      	nop
 8017298:	e006      	b.n	80172a8 <main+0xfc8>
	        if((Current==ST)&& !(PopType & LIST_POP))break;
 801729a:	bf00      	nop
 801729c:	e004      	b.n	80172a8 <main+0xfc8>
	        break;
 801729e:	bf00      	nop
 80172a0:	e002      	b.n	80172a8 <main+0xfc8>
	        if((Current==ST)&& !(PopType & LIST_POP))break;
 80172a2:	bf00      	nop
 80172a4:	e000      	b.n	80172a8 <main+0xfc8>
	        break;
 80172a6:	bf00      	nop

	     } //switch end
	     List[MenuNow[Current]].Flg |= UPD;
 80172a8:	4b1a      	ldr	r3, [pc, #104]	; (8017314 <main+0x1034>)
 80172aa:	f9b3 3000 	ldrsh.w	r3, [r3]
 80172ae:	461a      	mov	r2, r3
 80172b0:	4b19      	ldr	r3, [pc, #100]	; (8017318 <main+0x1038>)
 80172b2:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 80172b6:	4a19      	ldr	r2, [pc, #100]	; (801731c <main+0x103c>)
 80172b8:	00db      	lsls	r3, r3, #3
 80172ba:	4413      	add	r3, r2
 80172bc:	799b      	ldrb	r3, [r3, #6]
 80172be:	4a15      	ldr	r2, [pc, #84]	; (8017314 <main+0x1034>)
 80172c0:	f9b2 2000 	ldrsh.w	r2, [r2]
 80172c4:	4611      	mov	r1, r2
 80172c6:	4a14      	ldr	r2, [pc, #80]	; (8017318 <main+0x1038>)
 80172c8:	f932 2011 	ldrsh.w	r2, [r2, r1, lsl #1]
 80172cc:	4610      	mov	r0, r2
 80172ce:	f043 0320 	orr.w	r3, r3, #32
 80172d2:	b2d9      	uxtb	r1, r3
 80172d4:	4a11      	ldr	r2, [pc, #68]	; (801731c <main+0x103c>)
 80172d6:	00c3      	lsls	r3, r0, #3
 80172d8:	4413      	add	r3, r2
 80172da:	460a      	mov	r2, r1
 80172dc:	719a      	strb	r2, [r3, #6]
	     StdBy_Time  = List[STANDBY].Val * MIN_UNIT;  //����
 80172de:	4b0f      	ldr	r3, [pc, #60]	; (801731c <main+0x103c>)
 80172e0:	f9b3 314c 	ldrsh.w	r3, [r3, #332]	; 0x14c
 80172e4:	b29b      	uxth	r3, r3
 80172e6:	461a      	mov	r2, r3
 80172e8:	0112      	lsls	r2, r2, #4
 80172ea:	1ad3      	subs	r3, r2, r3
 80172ec:	009b      	lsls	r3, r3, #2
 80172ee:	b29b      	uxth	r3, r3
 80172f0:	b21a      	sxth	r2, r3
 80172f2:	4b0c      	ldr	r3, [pc, #48]	; (8017324 <main+0x1044>)
 80172f4:	801a      	strh	r2, [r3, #0]

	      if(PopType & LIST_POP) Show_List();
 80172f6:	4b0c      	ldr	r3, [pc, #48]	; (8017328 <main+0x1048>)
 80172f8:	781b      	ldrb	r3, [r3, #0]
 80172fa:	f003 0302 	and.w	r3, r3, #2
 80172fe:	2b00      	cmp	r3, #0
 8017300:	d001      	beq.n	8017306 <main+0x1026>
 8017302:	f7fd fa2f 	bl	8014764 <Show_List>
	      Update_Title();
 8017306:	f7fb f867 	bl	80123d8 <Update_Title>
	      Key_Buffer = 0;
 801730a:	4b08      	ldr	r3, [pc, #32]	; (801732c <main+0x104c>)
 801730c:	2200      	movs	r2, #0
 801730e:	701a      	strb	r2, [r3, #0]
	    if((List[STANDBY].Val != 0)&&(StdBy_Time == 0))
 8017310:	f7ff b868 	b.w	80163e4 <main+0x104>
 8017314:	2000079e 	.word	0x2000079e
 8017318:	20000538 	.word	0x20000538
 801731c:	20000298 	.word	0x20000298
 8017320:	200007a0 	.word	0x200007a0
 8017324:	2000079c 	.word	0x2000079c
 8017328:	2000078e 	.word	0x2000078e
 801732c:	2000077d 	.word	0x2000077d

08017330 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8017330:	b580      	push	{r7, lr}
 8017332:	b094      	sub	sp, #80	; 0x50
 8017334:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8017336:	f107 031c 	add.w	r3, r7, #28
 801733a:	2234      	movs	r2, #52	; 0x34
 801733c:	2100      	movs	r1, #0
 801733e:	4618      	mov	r0, r3
 8017340:	f00b fc28 	bl	8022b94 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8017344:	f107 0308 	add.w	r3, r7, #8
 8017348:	2200      	movs	r2, #0
 801734a:	601a      	str	r2, [r3, #0]
 801734c:	605a      	str	r2, [r3, #4]
 801734e:	609a      	str	r2, [r3, #8]
 8017350:	60da      	str	r2, [r3, #12]
 8017352:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8017354:	2300      	movs	r3, #0
 8017356:	607b      	str	r3, [r7, #4]
 8017358:	4b2d      	ldr	r3, [pc, #180]	; (8017410 <SystemClock_Config+0xe0>)
 801735a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801735c:	4a2c      	ldr	r2, [pc, #176]	; (8017410 <SystemClock_Config+0xe0>)
 801735e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8017362:	6413      	str	r3, [r2, #64]	; 0x40
 8017364:	4b2a      	ldr	r3, [pc, #168]	; (8017410 <SystemClock_Config+0xe0>)
 8017366:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8017368:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 801736c:	607b      	str	r3, [r7, #4]
 801736e:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8017370:	2300      	movs	r3, #0
 8017372:	603b      	str	r3, [r7, #0]
 8017374:	4b27      	ldr	r3, [pc, #156]	; (8017414 <SystemClock_Config+0xe4>)
 8017376:	681b      	ldr	r3, [r3, #0]
 8017378:	4a26      	ldr	r2, [pc, #152]	; (8017414 <SystemClock_Config+0xe4>)
 801737a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 801737e:	6013      	str	r3, [r2, #0]
 8017380:	4b24      	ldr	r3, [pc, #144]	; (8017414 <SystemClock_Config+0xe4>)
 8017382:	681b      	ldr	r3, [r3, #0]
 8017384:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8017388:	603b      	str	r3, [r7, #0]
 801738a:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 801738c:	2301      	movs	r3, #1
 801738e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8017390:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8017394:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8017396:	2302      	movs	r3, #2
 8017398:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 801739a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 801739e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 25;
 80173a0:	2319      	movs	r3, #25
 80173a2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 360;
 80173a4:	f44f 73b4 	mov.w	r3, #360	; 0x168
 80173a8:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80173aa:	2302      	movs	r3, #2
 80173ac:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 5;
 80173ae:	2305      	movs	r3, #5
 80173b0:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80173b2:	2302      	movs	r3, #2
 80173b4:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80173b6:	f107 031c 	add.w	r3, r7, #28
 80173ba:	4618      	mov	r0, r3
 80173bc:	f004 fb72 	bl	801baa4 <HAL_RCC_OscConfig>
 80173c0:	4603      	mov	r3, r0
 80173c2:	2b00      	cmp	r3, #0
 80173c4:	d001      	beq.n	80173ca <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80173c6:	f000 fc1d 	bl	8017c04 <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80173ca:	f003 fda3 	bl	801af14 <HAL_PWREx_EnableOverDrive>
 80173ce:	4603      	mov	r3, r0
 80173d0:	2b00      	cmp	r3, #0
 80173d2:	d001      	beq.n	80173d8 <SystemClock_Config+0xa8>
  {
    Error_Handler();
 80173d4:	f000 fc16 	bl	8017c04 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80173d8:	230f      	movs	r3, #15
 80173da:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80173dc:	2302      	movs	r3, #2
 80173de:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80173e0:	2300      	movs	r3, #0
 80173e2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80173e4:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80173e8:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80173ea:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80173ee:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80173f0:	f107 0308 	add.w	r3, r7, #8
 80173f4:	2105      	movs	r1, #5
 80173f6:	4618      	mov	r0, r3
 80173f8:	f003 fddc 	bl	801afb4 <HAL_RCC_ClockConfig>
 80173fc:	4603      	mov	r3, r0
 80173fe:	2b00      	cmp	r3, #0
 8017400:	d001      	beq.n	8017406 <SystemClock_Config+0xd6>
  {
    Error_Handler();
 8017402:	f000 fbff 	bl	8017c04 <Error_Handler>
  }
}
 8017406:	bf00      	nop
 8017408:	3750      	adds	r7, #80	; 0x50
 801740a:	46bd      	mov	sp, r7
 801740c:	bd80      	pop	{r7, pc}
 801740e:	bf00      	nop
 8017410:	40023800 	.word	0x40023800
 8017414:	40007000 	.word	0x40007000

08017418 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8017418:	b580      	push	{r7, lr}
 801741a:	b084      	sub	sp, #16
 801741c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 801741e:	463b      	mov	r3, r7
 8017420:	2200      	movs	r2, #0
 8017422:	601a      	str	r2, [r3, #0]
 8017424:	605a      	str	r2, [r3, #4]
 8017426:	609a      	str	r2, [r3, #8]
 8017428:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 801742a:	4b22      	ldr	r3, [pc, #136]	; (80174b4 <MX_ADC1_Init+0x9c>)
 801742c:	4a22      	ldr	r2, [pc, #136]	; (80174b8 <MX_ADC1_Init+0xa0>)
 801742e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8017430:	4b20      	ldr	r3, [pc, #128]	; (80174b4 <MX_ADC1_Init+0x9c>)
 8017432:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8017436:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8017438:	4b1e      	ldr	r3, [pc, #120]	; (80174b4 <MX_ADC1_Init+0x9c>)
 801743a:	2200      	movs	r2, #0
 801743c:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 801743e:	4b1d      	ldr	r3, [pc, #116]	; (80174b4 <MX_ADC1_Init+0x9c>)
 8017440:	2200      	movs	r2, #0
 8017442:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8017444:	4b1b      	ldr	r3, [pc, #108]	; (80174b4 <MX_ADC1_Init+0x9c>)
 8017446:	2200      	movs	r2, #0
 8017448:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 801744a:	4b1a      	ldr	r3, [pc, #104]	; (80174b4 <MX_ADC1_Init+0x9c>)
 801744c:	2200      	movs	r2, #0
 801744e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8017452:	4b18      	ldr	r3, [pc, #96]	; (80174b4 <MX_ADC1_Init+0x9c>)
 8017454:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8017458:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T1_CC1;
 801745a:	4b16      	ldr	r3, [pc, #88]	; (80174b4 <MX_ADC1_Init+0x9c>)
 801745c:	2200      	movs	r2, #0
 801745e:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8017460:	4b14      	ldr	r3, [pc, #80]	; (80174b4 <MX_ADC1_Init+0x9c>)
 8017462:	2200      	movs	r2, #0
 8017464:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8017466:	4b13      	ldr	r3, [pc, #76]	; (80174b4 <MX_ADC1_Init+0x9c>)
 8017468:	2201      	movs	r2, #1
 801746a:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 801746c:	4b11      	ldr	r3, [pc, #68]	; (80174b4 <MX_ADC1_Init+0x9c>)
 801746e:	2200      	movs	r2, #0
 8017470:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8017474:	4b0f      	ldr	r3, [pc, #60]	; (80174b4 <MX_ADC1_Init+0x9c>)
 8017476:	2201      	movs	r2, #1
 8017478:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 801747a:	480e      	ldr	r0, [pc, #56]	; (80174b4 <MX_ADC1_Init+0x9c>)
 801747c:	f000 ff7a 	bl	8018374 <HAL_ADC_Init>
 8017480:	4603      	mov	r3, r0
 8017482:	2b00      	cmp	r3, #0
 8017484:	d001      	beq.n	801748a <MX_ADC1_Init+0x72>
  {
    Error_Handler();
 8017486:	f000 fbbd 	bl	8017c04 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 801748a:	2306      	movs	r3, #6
 801748c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 801748e:	2301      	movs	r3, #1
 8017490:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8017492:	2300      	movs	r3, #0
 8017494:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8017496:	463b      	mov	r3, r7
 8017498:	4619      	mov	r1, r3
 801749a:	4806      	ldr	r0, [pc, #24]	; (80174b4 <MX_ADC1_Init+0x9c>)
 801749c:	f000 ffae 	bl	80183fc <HAL_ADC_ConfigChannel>
 80174a0:	4603      	mov	r3, r0
 80174a2:	2b00      	cmp	r3, #0
 80174a4:	d001      	beq.n	80174aa <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 80174a6:	f000 fbad 	bl	8017c04 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80174aa:	bf00      	nop
 80174ac:	3710      	adds	r7, #16
 80174ae:	46bd      	mov	sp, r7
 80174b0:	bd80      	pop	{r7, pc}
 80174b2:	bf00      	nop
 80174b4:	20006a78 	.word	0x20006a78
 80174b8:	40012000 	.word	0x40012000

080174bc <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 80174bc:	b580      	push	{r7, lr}
 80174be:	b084      	sub	sp, #16
 80174c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80174c2:	463b      	mov	r3, r7
 80174c4:	2200      	movs	r2, #0
 80174c6:	601a      	str	r2, [r3, #0]
 80174c8:	605a      	str	r2, [r3, #4]
 80174ca:	609a      	str	r2, [r3, #8]
 80174cc:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC2_Init 1 */

  /* USER CODE END ADC2_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 80174ce:	4b22      	ldr	r3, [pc, #136]	; (8017558 <MX_ADC2_Init+0x9c>)
 80174d0:	4a22      	ldr	r2, [pc, #136]	; (801755c <MX_ADC2_Init+0xa0>)
 80174d2:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80174d4:	4b20      	ldr	r3, [pc, #128]	; (8017558 <MX_ADC2_Init+0x9c>)
 80174d6:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80174da:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 80174dc:	4b1e      	ldr	r3, [pc, #120]	; (8017558 <MX_ADC2_Init+0x9c>)
 80174de:	2200      	movs	r2, #0
 80174e0:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = DISABLE;
 80174e2:	4b1d      	ldr	r3, [pc, #116]	; (8017558 <MX_ADC2_Init+0x9c>)
 80174e4:	2200      	movs	r2, #0
 80174e6:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = DISABLE;
 80174e8:	4b1b      	ldr	r3, [pc, #108]	; (8017558 <MX_ADC2_Init+0x9c>)
 80174ea:	2200      	movs	r2, #0
 80174ec:	761a      	strb	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 80174ee:	4b1a      	ldr	r3, [pc, #104]	; (8017558 <MX_ADC2_Init+0x9c>)
 80174f0:	2200      	movs	r2, #0
 80174f2:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 80174f6:	4b18      	ldr	r3, [pc, #96]	; (8017558 <MX_ADC2_Init+0x9c>)
 80174f8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80174fc:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T1_CC1;
 80174fe:	4b16      	ldr	r3, [pc, #88]	; (8017558 <MX_ADC2_Init+0x9c>)
 8017500:	2200      	movs	r2, #0
 8017502:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8017504:	4b14      	ldr	r3, [pc, #80]	; (8017558 <MX_ADC2_Init+0x9c>)
 8017506:	2200      	movs	r2, #0
 8017508:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 1;
 801750a:	4b13      	ldr	r3, [pc, #76]	; (8017558 <MX_ADC2_Init+0x9c>)
 801750c:	2201      	movs	r2, #1
 801750e:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8017510:	4b11      	ldr	r3, [pc, #68]	; (8017558 <MX_ADC2_Init+0x9c>)
 8017512:	2200      	movs	r2, #0
 8017514:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8017518:	4b0f      	ldr	r3, [pc, #60]	; (8017558 <MX_ADC2_Init+0x9c>)
 801751a:	2201      	movs	r2, #1
 801751c:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 801751e:	480e      	ldr	r0, [pc, #56]	; (8017558 <MX_ADC2_Init+0x9c>)
 8017520:	f000 ff28 	bl	8018374 <HAL_ADC_Init>
 8017524:	4603      	mov	r3, r0
 8017526:	2b00      	cmp	r3, #0
 8017528:	d001      	beq.n	801752e <MX_ADC2_Init+0x72>
  {
    Error_Handler();
 801752a:	f000 fb6b 	bl	8017c04 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_7;
 801752e:	2307      	movs	r3, #7
 8017530:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8017532:	2301      	movs	r3, #1
 8017534:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8017536:	2300      	movs	r3, #0
 8017538:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 801753a:	463b      	mov	r3, r7
 801753c:	4619      	mov	r1, r3
 801753e:	4806      	ldr	r0, [pc, #24]	; (8017558 <MX_ADC2_Init+0x9c>)
 8017540:	f000 ff5c 	bl	80183fc <HAL_ADC_ConfigChannel>
 8017544:	4603      	mov	r3, r0
 8017546:	2b00      	cmp	r3, #0
 8017548:	d001      	beq.n	801754e <MX_ADC2_Init+0x92>
  {
    Error_Handler();
 801754a:	f000 fb5b 	bl	8017c04 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 801754e:	bf00      	nop
 8017550:	3710      	adds	r7, #16
 8017552:	46bd      	mov	sp, r7
 8017554:	bd80      	pop	{r7, pc}
 8017556:	bf00      	nop
 8017558:	200068e8 	.word	0x200068e8
 801755c:	40012100 	.word	0x40012100

08017560 <MX_DAC_Init>:
  * @brief DAC Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC_Init(void)
{
 8017560:	b580      	push	{r7, lr}
 8017562:	b082      	sub	sp, #8
 8017564:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8017566:	463b      	mov	r3, r7
 8017568:	2200      	movs	r2, #0
 801756a:	601a      	str	r2, [r3, #0]
 801756c:	605a      	str	r2, [r3, #4]
  /* USER CODE BEGIN DAC_Init 1 */

  /* USER CODE END DAC_Init 1 */
  /** DAC Initialization
  */
  hdac.Instance = DAC;
 801756e:	4b19      	ldr	r3, [pc, #100]	; (80175d4 <MX_DAC_Init+0x74>)
 8017570:	4a19      	ldr	r2, [pc, #100]	; (80175d8 <MX_DAC_Init+0x78>)
 8017572:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 8017574:	4817      	ldr	r0, [pc, #92]	; (80175d4 <MX_DAC_Init+0x74>)
 8017576:	f001 fa80 	bl	8018a7a <HAL_DAC_Init>
 801757a:	4603      	mov	r3, r0
 801757c:	2b00      	cmp	r3, #0
 801757e:	d001      	beq.n	8017584 <MX_DAC_Init+0x24>
  {
    Error_Handler();
 8017580:	f000 fb40 	bl	8017c04 <Error_Handler>
  }
  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8017584:	2300      	movs	r3, #0
 8017586:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8017588:	2300      	movs	r3, #0
 801758a:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 801758c:	463b      	mov	r3, r7
 801758e:	2200      	movs	r2, #0
 8017590:	4619      	mov	r1, r3
 8017592:	4810      	ldr	r0, [pc, #64]	; (80175d4 <MX_DAC_Init+0x74>)
 8017594:	f001 fab8 	bl	8018b08 <HAL_DAC_ConfigChannel>
 8017598:	4603      	mov	r3, r0
 801759a:	2b00      	cmp	r3, #0
 801759c:	d001      	beq.n	80175a2 <MX_DAC_Init+0x42>
  {
    Error_Handler();
 801759e:	f000 fb31 	bl	8017c04 <Error_Handler>
  }
  /** DAC channel OUT2 config
  */
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_DISABLE;
 80175a2:	2302      	movs	r3, #2
 80175a4:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 80175a6:	463b      	mov	r3, r7
 80175a8:	2210      	movs	r2, #16
 80175aa:	4619      	mov	r1, r3
 80175ac:	4809      	ldr	r0, [pc, #36]	; (80175d4 <MX_DAC_Init+0x74>)
 80175ae:	f001 faab 	bl	8018b08 <HAL_DAC_ConfigChannel>
 80175b2:	4603      	mov	r3, r0
 80175b4:	2b00      	cmp	r3, #0
 80175b6:	d001      	beq.n	80175bc <MX_DAC_Init+0x5c>
  {
    Error_Handler();
 80175b8:	f000 fb24 	bl	8017c04 <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */
  HAL_DAC_SetValue(&hdac, DAC_CHANNEL_2, DAC_ALIGN_12B_R, 620);  //(620*4095)/330;//50mv
 80175bc:	f44f 731b 	mov.w	r3, #620	; 0x26c
 80175c0:	2200      	movs	r2, #0
 80175c2:	2110      	movs	r1, #16
 80175c4:	4803      	ldr	r0, [pc, #12]	; (80175d4 <MX_DAC_Init+0x74>)
 80175c6:	f001 fa7a 	bl	8018abe <HAL_DAC_SetValue>
  /* USER CODE END DAC_Init 2 */

}
 80175ca:	bf00      	nop
 80175cc:	3708      	adds	r7, #8
 80175ce:	46bd      	mov	sp, r7
 80175d0:	bd80      	pop	{r7, pc}
 80175d2:	bf00      	nop
 80175d4:	20006af8 	.word	0x20006af8
 80175d8:	40007400 	.word	0x40007400

080175dc <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80175dc:	b580      	push	{r7, lr}
 80175de:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80175e0:	4b17      	ldr	r3, [pc, #92]	; (8017640 <MX_SPI2_Init+0x64>)
 80175e2:	4a18      	ldr	r2, [pc, #96]	; (8017644 <MX_SPI2_Init+0x68>)
 80175e4:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80175e6:	4b16      	ldr	r3, [pc, #88]	; (8017640 <MX_SPI2_Init+0x64>)
 80175e8:	f44f 7282 	mov.w	r2, #260	; 0x104
 80175ec:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80175ee:	4b14      	ldr	r3, [pc, #80]	; (8017640 <MX_SPI2_Init+0x64>)
 80175f0:	2200      	movs	r2, #0
 80175f2:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80175f4:	4b12      	ldr	r3, [pc, #72]	; (8017640 <MX_SPI2_Init+0x64>)
 80175f6:	2200      	movs	r2, #0
 80175f8:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_HIGH;
 80175fa:	4b11      	ldr	r3, [pc, #68]	; (8017640 <MX_SPI2_Init+0x64>)
 80175fc:	2202      	movs	r2, #2
 80175fe:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_2EDGE;
 8017600:	4b0f      	ldr	r3, [pc, #60]	; (8017640 <MX_SPI2_Init+0x64>)
 8017602:	2201      	movs	r2, #1
 8017604:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8017606:	4b0e      	ldr	r3, [pc, #56]	; (8017640 <MX_SPI2_Init+0x64>)
 8017608:	f44f 7200 	mov.w	r2, #512	; 0x200
 801760c:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 801760e:	4b0c      	ldr	r3, [pc, #48]	; (8017640 <MX_SPI2_Init+0x64>)
 8017610:	2200      	movs	r2, #0
 8017612:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_LSB;
 8017614:	4b0a      	ldr	r3, [pc, #40]	; (8017640 <MX_SPI2_Init+0x64>)
 8017616:	2280      	movs	r2, #128	; 0x80
 8017618:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 801761a:	4b09      	ldr	r3, [pc, #36]	; (8017640 <MX_SPI2_Init+0x64>)
 801761c:	2200      	movs	r2, #0
 801761e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8017620:	4b07      	ldr	r3, [pc, #28]	; (8017640 <MX_SPI2_Init+0x64>)
 8017622:	2200      	movs	r2, #0
 8017624:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8017626:	4b06      	ldr	r3, [pc, #24]	; (8017640 <MX_SPI2_Init+0x64>)
 8017628:	220a      	movs	r2, #10
 801762a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 801762c:	4804      	ldr	r0, [pc, #16]	; (8017640 <MX_SPI2_Init+0x64>)
 801762e:	f004 fcd7 	bl	801bfe0 <HAL_SPI_Init>
 8017632:	4603      	mov	r3, r0
 8017634:	2b00      	cmp	r3, #0
 8017636:	d001      	beq.n	801763c <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8017638:	f000 fae4 	bl	8017c04 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 801763c:	bf00      	nop
 801763e:	bd80      	pop	{r7, pc}
 8017640:	20006890 	.word	0x20006890
 8017644:	40003800 	.word	0x40003800

08017648 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8017648:	b580      	push	{r7, lr}
 801764a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 801764c:	4b18      	ldr	r3, [pc, #96]	; (80176b0 <MX_SPI3_Init+0x68>)
 801764e:	4a19      	ldr	r2, [pc, #100]	; (80176b4 <MX_SPI3_Init+0x6c>)
 8017650:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8017652:	4b17      	ldr	r3, [pc, #92]	; (80176b0 <MX_SPI3_Init+0x68>)
 8017654:	f44f 7282 	mov.w	r2, #260	; 0x104
 8017658:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 801765a:	4b15      	ldr	r3, [pc, #84]	; (80176b0 <MX_SPI3_Init+0x68>)
 801765c:	2200      	movs	r2, #0
 801765e:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_16BIT;
 8017660:	4b13      	ldr	r3, [pc, #76]	; (80176b0 <MX_SPI3_Init+0x68>)
 8017662:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8017666:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8017668:	4b11      	ldr	r3, [pc, #68]	; (80176b0 <MX_SPI3_Init+0x68>)
 801766a:	2200      	movs	r2, #0
 801766c:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 801766e:	4b10      	ldr	r3, [pc, #64]	; (80176b0 <MX_SPI3_Init+0x68>)
 8017670:	2200      	movs	r2, #0
 8017672:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8017674:	4b0e      	ldr	r3, [pc, #56]	; (80176b0 <MX_SPI3_Init+0x68>)
 8017676:	f44f 7200 	mov.w	r2, #512	; 0x200
 801767a:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 801767c:	4b0c      	ldr	r3, [pc, #48]	; (80176b0 <MX_SPI3_Init+0x68>)
 801767e:	2210      	movs	r2, #16
 8017680:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_LSB;
 8017682:	4b0b      	ldr	r3, [pc, #44]	; (80176b0 <MX_SPI3_Init+0x68>)
 8017684:	2280      	movs	r2, #128	; 0x80
 8017686:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8017688:	4b09      	ldr	r3, [pc, #36]	; (80176b0 <MX_SPI3_Init+0x68>)
 801768a:	2200      	movs	r2, #0
 801768c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 801768e:	4b08      	ldr	r3, [pc, #32]	; (80176b0 <MX_SPI3_Init+0x68>)
 8017690:	2200      	movs	r2, #0
 8017692:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 10;
 8017694:	4b06      	ldr	r3, [pc, #24]	; (80176b0 <MX_SPI3_Init+0x68>)
 8017696:	220a      	movs	r2, #10
 8017698:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 801769a:	4805      	ldr	r0, [pc, #20]	; (80176b0 <MX_SPI3_Init+0x68>)
 801769c:	f004 fca0 	bl	801bfe0 <HAL_SPI_Init>
 80176a0:	4603      	mov	r3, r0
 80176a2:	2b00      	cmp	r3, #0
 80176a4:	d001      	beq.n	80176aa <MX_SPI3_Init+0x62>
  {
    Error_Handler();
 80176a6:	f000 faad 	bl	8017c04 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 80176aa:	bf00      	nop
 80176ac:	bd80      	pop	{r7, pc}
 80176ae:	bf00      	nop
 80176b0:	200069c0 	.word	0x200069c0
 80176b4:	40003c00 	.word	0x40003c00

080176b8 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80176b8:	b580      	push	{r7, lr}
 80176ba:	b086      	sub	sp, #24
 80176bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80176be:	f107 0308 	add.w	r3, r7, #8
 80176c2:	2200      	movs	r2, #0
 80176c4:	601a      	str	r2, [r3, #0]
 80176c6:	605a      	str	r2, [r3, #4]
 80176c8:	609a      	str	r2, [r3, #8]
 80176ca:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80176cc:	463b      	mov	r3, r7
 80176ce:	2200      	movs	r2, #0
 80176d0:	601a      	str	r2, [r3, #0]
 80176d2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */
  octim1.Pulse = 500;
 80176d4:	4b30      	ldr	r3, [pc, #192]	; (8017798 <MX_TIM1_Init+0xe0>)
 80176d6:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80176da:	605a      	str	r2, [r3, #4]
  octim1.OCMode = TIM_OCMODE_PWM2;
 80176dc:	4b2e      	ldr	r3, [pc, #184]	; (8017798 <MX_TIM1_Init+0xe0>)
 80176de:	2270      	movs	r2, #112	; 0x70
 80176e0:	601a      	str	r2, [r3, #0]
  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80176e2:	4b2e      	ldr	r3, [pc, #184]	; (801779c <MX_TIM1_Init+0xe4>)
 80176e4:	4a2e      	ldr	r2, [pc, #184]	; (80177a0 <MX_TIM1_Init+0xe8>)
 80176e6:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 89;
 80176e8:	4b2c      	ldr	r3, [pc, #176]	; (801779c <MX_TIM1_Init+0xe4>)
 80176ea:	2259      	movs	r2, #89	; 0x59
 80176ec:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_DOWN;
 80176ee:	4b2b      	ldr	r3, [pc, #172]	; (801779c <MX_TIM1_Init+0xe4>)
 80176f0:	2210      	movs	r2, #16
 80176f2:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 999;
 80176f4:	4b29      	ldr	r3, [pc, #164]	; (801779c <MX_TIM1_Init+0xe4>)
 80176f6:	f240 32e7 	movw	r2, #999	; 0x3e7
 80176fa:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80176fc:	4b27      	ldr	r3, [pc, #156]	; (801779c <MX_TIM1_Init+0xe4>)
 80176fe:	2200      	movs	r2, #0
 8017700:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8017702:	4b26      	ldr	r3, [pc, #152]	; (801779c <MX_TIM1_Init+0xe4>)
 8017704:	2200      	movs	r2, #0
 8017706:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8017708:	4b24      	ldr	r3, [pc, #144]	; (801779c <MX_TIM1_Init+0xe4>)
 801770a:	2280      	movs	r2, #128	; 0x80
 801770c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 801770e:	4823      	ldr	r0, [pc, #140]	; (801779c <MX_TIM1_Init+0xe4>)
 8017710:	f005 fb3a 	bl	801cd88 <HAL_TIM_Base_Init>
 8017714:	4603      	mov	r3, r0
 8017716:	2b00      	cmp	r3, #0
 8017718:	d001      	beq.n	801771e <MX_TIM1_Init+0x66>
  {
    Error_Handler();
 801771a:	f000 fa73 	bl	8017c04 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 801771e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8017722:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8017724:	f107 0308 	add.w	r3, r7, #8
 8017728:	4619      	mov	r1, r3
 801772a:	481c      	ldr	r0, [pc, #112]	; (801779c <MX_TIM1_Init+0xe4>)
 801772c:	f005 fd50 	bl	801d1d0 <HAL_TIM_ConfigClockSource>
 8017730:	4603      	mov	r3, r0
 8017732:	2b00      	cmp	r3, #0
 8017734:	d001      	beq.n	801773a <MX_TIM1_Init+0x82>
  {
    Error_Handler();
 8017736:	f000 fa65 	bl	8017c04 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 801773a:	2300      	movs	r3, #0
 801773c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 801773e:	2300      	movs	r3, #0
 8017740:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8017742:	463b      	mov	r3, r7
 8017744:	4619      	mov	r1, r3
 8017746:	4815      	ldr	r0, [pc, #84]	; (801779c <MX_TIM1_Init+0xe4>)
 8017748:	f006 f91c 	bl	801d984 <HAL_TIMEx_MasterConfigSynchronization>
 801774c:	4603      	mov	r3, r0
 801774e:	2b00      	cmp	r3, #0
 8017750:	d001      	beq.n	8017756 <MX_TIM1_Init+0x9e>
  {
    Error_Handler();
 8017752:	f000 fa57 	bl	8017c04 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */
  HAL_TIM_OC_ConfigChannel(&htim1, &octim1, 1 );
 8017756:	2201      	movs	r2, #1
 8017758:	490f      	ldr	r1, [pc, #60]	; (8017798 <MX_TIM1_Init+0xe0>)
 801775a:	4810      	ldr	r0, [pc, #64]	; (801779c <MX_TIM1_Init+0xe4>)
 801775c:	f005 fcdc 	bl	801d118 <HAL_TIM_OC_ConfigChannel>
  __HAL_TIM_URS_ENABLE(&htim1);
 8017760:	4b0e      	ldr	r3, [pc, #56]	; (801779c <MX_TIM1_Init+0xe4>)
 8017762:	681b      	ldr	r3, [r3, #0]
 8017764:	681a      	ldr	r2, [r3, #0]
 8017766:	4b0d      	ldr	r3, [pc, #52]	; (801779c <MX_TIM1_Init+0xe4>)
 8017768:	681b      	ldr	r3, [r3, #0]
 801776a:	f042 0204 	orr.w	r2, r2, #4
 801776e:	601a      	str	r2, [r3, #0]
  __HAL_TIM_ENABLE_DMA(&htim1, TIM_DMA_CC1 | TIM_DMA_TRIGGER);
 8017770:	4b0a      	ldr	r3, [pc, #40]	; (801779c <MX_TIM1_Init+0xe4>)
 8017772:	681b      	ldr	r3, [r3, #0]
 8017774:	68da      	ldr	r2, [r3, #12]
 8017776:	4b09      	ldr	r3, [pc, #36]	; (801779c <MX_TIM1_Init+0xe4>)
 8017778:	681b      	ldr	r3, [r3, #0]
 801777a:	f442 4284 	orr.w	r2, r2, #16896	; 0x4200
 801777e:	60da      	str	r2, [r3, #12]
  __HAL_TIM_ENABLE(&htim1);
 8017780:	4b06      	ldr	r3, [pc, #24]	; (801779c <MX_TIM1_Init+0xe4>)
 8017782:	681b      	ldr	r3, [r3, #0]
 8017784:	681a      	ldr	r2, [r3, #0]
 8017786:	4b05      	ldr	r3, [pc, #20]	; (801779c <MX_TIM1_Init+0xe4>)
 8017788:	681b      	ldr	r3, [r3, #0]
 801778a:	f042 0201 	orr.w	r2, r2, #1
 801778e:	601a      	str	r2, [r3, #0]
  /* USER CODE END TIM1_Init 2 */

}
 8017790:	bf00      	nop
 8017792:	3718      	adds	r7, #24
 8017794:	46bd      	mov	sp, r7
 8017796:	bd80      	pop	{r7, pc}
 8017798:	20006b6c 	.word	0x20006b6c
 801779c:	20006b88 	.word	0x20006b88
 80177a0:	40010000 	.word	0x40010000

080177a4 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80177a4:	b580      	push	{r7, lr}
 80177a6:	b086      	sub	sp, #24
 80177a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80177aa:	f107 0308 	add.w	r3, r7, #8
 80177ae:	2200      	movs	r2, #0
 80177b0:	601a      	str	r2, [r3, #0]
 80177b2:	605a      	str	r2, [r3, #4]
 80177b4:	609a      	str	r2, [r3, #8]
 80177b6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80177b8:	463b      	mov	r3, r7
 80177ba:	2200      	movs	r2, #0
 80177bc:	601a      	str	r2, [r3, #0]
 80177be:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */
  octim3.Pulse = 3750;
 80177c0:	4b25      	ldr	r3, [pc, #148]	; (8017858 <MX_TIM3_Init+0xb4>)
 80177c2:	f640 62a6 	movw	r2, #3750	; 0xea6
 80177c6:	605a      	str	r2, [r3, #4]
  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80177c8:	4b24      	ldr	r3, [pc, #144]	; (801785c <MX_TIM3_Init+0xb8>)
 80177ca:	4a25      	ldr	r2, [pc, #148]	; (8017860 <MX_TIM3_Init+0xbc>)
 80177cc:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 11;
 80177ce:	4b23      	ldr	r3, [pc, #140]	; (801785c <MX_TIM3_Init+0xb8>)
 80177d0:	220b      	movs	r2, #11
 80177d2:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80177d4:	4b21      	ldr	r3, [pc, #132]	; (801785c <MX_TIM3_Init+0xb8>)
 80177d6:	2200      	movs	r2, #0
 80177d8:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 7499;
 80177da:	4b20      	ldr	r3, [pc, #128]	; (801785c <MX_TIM3_Init+0xb8>)
 80177dc:	f641 524b 	movw	r2, #7499	; 0x1d4b
 80177e0:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80177e2:	4b1e      	ldr	r3, [pc, #120]	; (801785c <MX_TIM3_Init+0xb8>)
 80177e4:	2200      	movs	r2, #0
 80177e6:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80177e8:	4b1c      	ldr	r3, [pc, #112]	; (801785c <MX_TIM3_Init+0xb8>)
 80177ea:	2280      	movs	r2, #128	; 0x80
 80177ec:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80177ee:	481b      	ldr	r0, [pc, #108]	; (801785c <MX_TIM3_Init+0xb8>)
 80177f0:	f005 faca 	bl	801cd88 <HAL_TIM_Base_Init>
 80177f4:	4603      	mov	r3, r0
 80177f6:	2b00      	cmp	r3, #0
 80177f8:	d001      	beq.n	80177fe <MX_TIM3_Init+0x5a>
  {
    Error_Handler();
 80177fa:	f000 fa03 	bl	8017c04 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80177fe:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8017802:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8017804:	f107 0308 	add.w	r3, r7, #8
 8017808:	4619      	mov	r1, r3
 801780a:	4814      	ldr	r0, [pc, #80]	; (801785c <MX_TIM3_Init+0xb8>)
 801780c:	f005 fce0 	bl	801d1d0 <HAL_TIM_ConfigClockSource>
 8017810:	4603      	mov	r3, r0
 8017812:	2b00      	cmp	r3, #0
 8017814:	d001      	beq.n	801781a <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 8017816:	f000 f9f5 	bl	8017c04 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 801781a:	2320      	movs	r3, #32
 801781c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 801781e:	2300      	movs	r3, #0
 8017820:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8017822:	463b      	mov	r3, r7
 8017824:	4619      	mov	r1, r3
 8017826:	480d      	ldr	r0, [pc, #52]	; (801785c <MX_TIM3_Init+0xb8>)
 8017828:	f006 f8ac 	bl	801d984 <HAL_TIMEx_MasterConfigSynchronization>
 801782c:	4603      	mov	r3, r0
 801782e:	2b00      	cmp	r3, #0
 8017830:	d001      	beq.n	8017836 <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8017832:	f000 f9e7 	bl	8017c04 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */
  HAL_TIM_OC_ConfigChannel(&htim3, &octim3, 1 );
 8017836:	2201      	movs	r2, #1
 8017838:	4907      	ldr	r1, [pc, #28]	; (8017858 <MX_TIM3_Init+0xb4>)
 801783a:	4808      	ldr	r0, [pc, #32]	; (801785c <MX_TIM3_Init+0xb8>)
 801783c:	f005 fc6c 	bl	801d118 <HAL_TIM_OC_ConfigChannel>
  __HAL_TIM_ENABLE(&htim3);
 8017840:	4b06      	ldr	r3, [pc, #24]	; (801785c <MX_TIM3_Init+0xb8>)
 8017842:	681b      	ldr	r3, [r3, #0]
 8017844:	681a      	ldr	r2, [r3, #0]
 8017846:	4b05      	ldr	r3, [pc, #20]	; (801785c <MX_TIM3_Init+0xb8>)
 8017848:	681b      	ldr	r3, [r3, #0]
 801784a:	f042 0201 	orr.w	r2, r2, #1
 801784e:	601a      	str	r2, [r3, #0]

  /* USER CODE END TIM3_Init 2 */

}
 8017850:	bf00      	nop
 8017852:	3718      	adds	r7, #24
 8017854:	46bd      	mov	sp, r7
 8017856:	bd80      	pop	{r7, pc}
 8017858:	20006ac0 	.word	0x20006ac0
 801785c:	20006978 	.word	0x20006978
 8017860:	40000400 	.word	0x40000400

08017864 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8017864:	b580      	push	{r7, lr}
 8017866:	b086      	sub	sp, #24
 8017868:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 801786a:	f107 0308 	add.w	r3, r7, #8
 801786e:	2200      	movs	r2, #0
 8017870:	601a      	str	r2, [r3, #0]
 8017872:	605a      	str	r2, [r3, #4]
 8017874:	609a      	str	r2, [r3, #8]
 8017876:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8017878:	463b      	mov	r3, r7
 801787a:	2200      	movs	r2, #0
 801787c:	601a      	str	r2, [r3, #0]
 801787e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */
  octim5.Pulse = (FARR[List[FREQ_OUT].Val]+1)/2;
 8017880:	4b3a      	ldr	r3, [pc, #232]	; (801796c <MX_TIM5_Init+0x108>)
 8017882:	f9b3 312c 	ldrsh.w	r3, [r3, #300]	; 0x12c
 8017886:	461a      	mov	r2, r3
 8017888:	4b39      	ldr	r3, [pc, #228]	; (8017970 <MX_TIM5_Init+0x10c>)
 801788a:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 801788e:	3301      	adds	r3, #1
 8017890:	0fda      	lsrs	r2, r3, #31
 8017892:	4413      	add	r3, r2
 8017894:	105b      	asrs	r3, r3, #1
 8017896:	461a      	mov	r2, r3
 8017898:	4b36      	ldr	r3, [pc, #216]	; (8017974 <MX_TIM5_Init+0x110>)
 801789a:	605a      	str	r2, [r3, #4]
  octim5.OCMode = TIM_OCMODE_PWM2;
 801789c:	4b35      	ldr	r3, [pc, #212]	; (8017974 <MX_TIM5_Init+0x110>)
 801789e:	2270      	movs	r2, #112	; 0x70
 80178a0:	601a      	str	r2, [r3, #0]
  octim5.OCFastMode = TIM_OCFAST_ENABLE;
 80178a2:	4b34      	ldr	r3, [pc, #208]	; (8017974 <MX_TIM5_Init+0x110>)
 80178a4:	2204      	movs	r2, #4
 80178a6:	611a      	str	r2, [r3, #16]
  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 80178a8:	4b33      	ldr	r3, [pc, #204]	; (8017978 <MX_TIM5_Init+0x114>)
 80178aa:	4a34      	ldr	r2, [pc, #208]	; (801797c <MX_TIM5_Init+0x118>)
 80178ac:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 9;
 80178ae:	4b32      	ldr	r3, [pc, #200]	; (8017978 <MX_TIM5_Init+0x114>)
 80178b0:	2209      	movs	r2, #9
 80178b2:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 80178b4:	4b30      	ldr	r3, [pc, #192]	; (8017978 <MX_TIM5_Init+0x114>)
 80178b6:	2200      	movs	r2, #0
 80178b8:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 18000;
 80178ba:	4b2f      	ldr	r3, [pc, #188]	; (8017978 <MX_TIM5_Init+0x114>)
 80178bc:	f244 6250 	movw	r2, #18000	; 0x4650
 80178c0:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80178c2:	4b2d      	ldr	r3, [pc, #180]	; (8017978 <MX_TIM5_Init+0x114>)
 80178c4:	2200      	movs	r2, #0
 80178c6:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80178c8:	4b2b      	ldr	r3, [pc, #172]	; (8017978 <MX_TIM5_Init+0x114>)
 80178ca:	2280      	movs	r2, #128	; 0x80
 80178cc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 80178ce:	482a      	ldr	r0, [pc, #168]	; (8017978 <MX_TIM5_Init+0x114>)
 80178d0:	f005 fa5a 	bl	801cd88 <HAL_TIM_Base_Init>
 80178d4:	4603      	mov	r3, r0
 80178d6:	2b00      	cmp	r3, #0
 80178d8:	d001      	beq.n	80178de <MX_TIM5_Init+0x7a>
  {
    Error_Handler();
 80178da:	f000 f993 	bl	8017c04 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80178de:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80178e2:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 80178e4:	f107 0308 	add.w	r3, r7, #8
 80178e8:	4619      	mov	r1, r3
 80178ea:	4823      	ldr	r0, [pc, #140]	; (8017978 <MX_TIM5_Init+0x114>)
 80178ec:	f005 fc70 	bl	801d1d0 <HAL_TIM_ConfigClockSource>
 80178f0:	4603      	mov	r3, r0
 80178f2:	2b00      	cmp	r3, #0
 80178f4:	d001      	beq.n	80178fa <MX_TIM5_Init+0x96>
  {
    Error_Handler();
 80178f6:	f000 f985 	bl	8017c04 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80178fa:	2300      	movs	r3, #0
 80178fc:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80178fe:	2300      	movs	r3, #0
 8017900:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8017902:	463b      	mov	r3, r7
 8017904:	4619      	mov	r1, r3
 8017906:	481c      	ldr	r0, [pc, #112]	; (8017978 <MX_TIM5_Init+0x114>)
 8017908:	f006 f83c 	bl	801d984 <HAL_TIMEx_MasterConfigSynchronization>
 801790c:	4603      	mov	r3, r0
 801790e:	2b00      	cmp	r3, #0
 8017910:	d001      	beq.n	8017916 <MX_TIM5_Init+0xb2>
  {
    Error_Handler();
 8017912:	f000 f977 	bl	8017c04 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */
  htim5.Init.Period = FARR[List[FREQ_OUT].Val];
 8017916:	4b15      	ldr	r3, [pc, #84]	; (801796c <MX_TIM5_Init+0x108>)
 8017918:	f9b3 312c 	ldrsh.w	r3, [r3, #300]	; 0x12c
 801791c:	461a      	mov	r2, r3
 801791e:	4b14      	ldr	r3, [pc, #80]	; (8017970 <MX_TIM5_Init+0x10c>)
 8017920:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8017924:	461a      	mov	r2, r3
 8017926:	4b14      	ldr	r3, [pc, #80]	; (8017978 <MX_TIM5_Init+0x114>)
 8017928:	60da      	str	r2, [r3, #12]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 801792a:	4813      	ldr	r0, [pc, #76]	; (8017978 <MX_TIM5_Init+0x114>)
 801792c:	f005 fa2c 	bl	801cd88 <HAL_TIM_Base_Init>
 8017930:	4603      	mov	r3, r0
 8017932:	2b00      	cmp	r3, #0
 8017934:	d001      	beq.n	801793a <MX_TIM5_Init+0xd6>
  {
    Error_Handler();
 8017936:	f000 f965 	bl	8017c04 <Error_Handler>
  }
  HAL_TIM_OC_ConfigChannel(&htim5, &octim5, 3 );
 801793a:	2203      	movs	r2, #3
 801793c:	490d      	ldr	r1, [pc, #52]	; (8017974 <MX_TIM5_Init+0x110>)
 801793e:	480e      	ldr	r0, [pc, #56]	; (8017978 <MX_TIM5_Init+0x114>)
 8017940:	f005 fbea 	bl	801d118 <HAL_TIM_OC_ConfigChannel>
  __HAL_TIM_URS_ENABLE(&htim5);
 8017944:	4b0c      	ldr	r3, [pc, #48]	; (8017978 <MX_TIM5_Init+0x114>)
 8017946:	681b      	ldr	r3, [r3, #0]
 8017948:	681a      	ldr	r2, [r3, #0]
 801794a:	4b0b      	ldr	r3, [pc, #44]	; (8017978 <MX_TIM5_Init+0x114>)
 801794c:	681b      	ldr	r3, [r3, #0]
 801794e:	f042 0204 	orr.w	r2, r2, #4
 8017952:	601a      	str	r2, [r3, #0]
  __HAL_TIM_ENABLE(&htim5);
 8017954:	4b08      	ldr	r3, [pc, #32]	; (8017978 <MX_TIM5_Init+0x114>)
 8017956:	681b      	ldr	r3, [r3, #0]
 8017958:	681a      	ldr	r2, [r3, #0]
 801795a:	4b07      	ldr	r3, [pc, #28]	; (8017978 <MX_TIM5_Init+0x114>)
 801795c:	681b      	ldr	r3, [r3, #0]
 801795e:	f042 0201 	orr.w	r2, r2, #1
 8017962:	601a      	str	r2, [r3, #0]
  /* USER CODE END TIM5_Init 2 */

}
 8017964:	bf00      	nop
 8017966:	3718      	adds	r7, #24
 8017968:	46bd      	mov	sp, r7
 801796a:	bd80      	pop	{r7, pc}
 801796c:	20000298 	.word	0x20000298
 8017970:	08000ae8 	.word	0x08000ae8
 8017974:	20006adc 	.word	0x20006adc
 8017978:	20006930 	.word	0x20006930
 801797c:	40000c00 	.word	0x40000c00

08017980 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 8017980:	b580      	push	{r7, lr}
 8017982:	b082      	sub	sp, #8
 8017984:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */
  // aka tim_da
  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8017986:	463b      	mov	r3, r7
 8017988:	2200      	movs	r2, #0
 801798a:	601a      	str	r2, [r3, #0]
 801798c:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 801798e:	4b1d      	ldr	r3, [pc, #116]	; (8017a04 <MX_TIM7_Init+0x84>)
 8017990:	4a1d      	ldr	r2, [pc, #116]	; (8017a08 <MX_TIM7_Init+0x88>)
 8017992:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 2;
 8017994:	4b1b      	ldr	r3, [pc, #108]	; (8017a04 <MX_TIM7_Init+0x84>)
 8017996:	2202      	movs	r2, #2
 8017998:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 801799a:	4b1a      	ldr	r3, [pc, #104]	; (8017a04 <MX_TIM7_Init+0x84>)
 801799c:	2200      	movs	r2, #0
 801799e:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 999;
 80179a0:	4b18      	ldr	r3, [pc, #96]	; (8017a04 <MX_TIM7_Init+0x84>)
 80179a2:	f240 32e7 	movw	r2, #999	; 0x3e7
 80179a6:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80179a8:	4b16      	ldr	r3, [pc, #88]	; (8017a04 <MX_TIM7_Init+0x84>)
 80179aa:	2200      	movs	r2, #0
 80179ac:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 80179ae:	4815      	ldr	r0, [pc, #84]	; (8017a04 <MX_TIM7_Init+0x84>)
 80179b0:	f005 f9ea 	bl	801cd88 <HAL_TIM_Base_Init>
 80179b4:	4603      	mov	r3, r0
 80179b6:	2b00      	cmp	r3, #0
 80179b8:	d001      	beq.n	80179be <MX_TIM7_Init+0x3e>
  {
    Error_Handler();
 80179ba:	f000 f923 	bl	8017c04 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80179be:	2300      	movs	r3, #0
 80179c0:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80179c2:	2300      	movs	r3, #0
 80179c4:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 80179c6:	463b      	mov	r3, r7
 80179c8:	4619      	mov	r1, r3
 80179ca:	480e      	ldr	r0, [pc, #56]	; (8017a04 <MX_TIM7_Init+0x84>)
 80179cc:	f005 ffda 	bl	801d984 <HAL_TIMEx_MasterConfigSynchronization>
 80179d0:	4603      	mov	r3, r0
 80179d2:	2b00      	cmp	r3, #0
 80179d4:	d001      	beq.n	80179da <MX_TIM7_Init+0x5a>
  {
    Error_Handler();
 80179d6:	f000 f915 	bl	8017c04 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */
  __HAL_TIM_ENABLE_DMA(&htim7,TIM_DMA_UPDATE);
 80179da:	4b0a      	ldr	r3, [pc, #40]	; (8017a04 <MX_TIM7_Init+0x84>)
 80179dc:	681b      	ldr	r3, [r3, #0]
 80179de:	68da      	ldr	r2, [r3, #12]
 80179e0:	4b08      	ldr	r3, [pc, #32]	; (8017a04 <MX_TIM7_Init+0x84>)
 80179e2:	681b      	ldr	r3, [r3, #0]
 80179e4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80179e8:	60da      	str	r2, [r3, #12]
  __HAL_TIM_ENABLE(&htim7);
 80179ea:	4b06      	ldr	r3, [pc, #24]	; (8017a04 <MX_TIM7_Init+0x84>)
 80179ec:	681b      	ldr	r3, [r3, #0]
 80179ee:	681a      	ldr	r2, [r3, #0]
 80179f0:	4b04      	ldr	r3, [pc, #16]	; (8017a04 <MX_TIM7_Init+0x84>)
 80179f2:	681b      	ldr	r3, [r3, #0]
 80179f4:	f042 0201 	orr.w	r2, r2, #1
 80179f8:	601a      	str	r2, [r3, #0]
  /* USER CODE END TIM7_Init 2 */

}
 80179fa:	bf00      	nop
 80179fc:	3708      	adds	r7, #8
 80179fe:	46bd      	mov	sp, r7
 8017a00:	bd80      	pop	{r7, pc}
 8017a02:	bf00      	nop
 8017a04:	20006bd0 	.word	0x20006bd0
 8017a08:	40001400 	.word	0x40001400

08017a0c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8017a0c:	b580      	push	{r7, lr}
 8017a0e:	b082      	sub	sp, #8
 8017a10:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8017a12:	2300      	movs	r3, #0
 8017a14:	607b      	str	r3, [r7, #4]
 8017a16:	4b17      	ldr	r3, [pc, #92]	; (8017a74 <MX_DMA_Init+0x68>)
 8017a18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8017a1a:	4a16      	ldr	r2, [pc, #88]	; (8017a74 <MX_DMA_Init+0x68>)
 8017a1c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8017a20:	6313      	str	r3, [r2, #48]	; 0x30
 8017a22:	4b14      	ldr	r3, [pc, #80]	; (8017a74 <MX_DMA_Init+0x68>)
 8017a24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8017a26:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8017a2a:	607b      	str	r3, [r7, #4]
 8017a2c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8017a2e:	2300      	movs	r3, #0
 8017a30:	603b      	str	r3, [r7, #0]
 8017a32:	4b10      	ldr	r3, [pc, #64]	; (8017a74 <MX_DMA_Init+0x68>)
 8017a34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8017a36:	4a0f      	ldr	r2, [pc, #60]	; (8017a74 <MX_DMA_Init+0x68>)
 8017a38:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8017a3c:	6313      	str	r3, [r2, #48]	; 0x30
 8017a3e:	4b0d      	ldr	r3, [pc, #52]	; (8017a74 <MX_DMA_Init+0x68>)
 8017a40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8017a42:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8017a46:	603b      	str	r3, [r7, #0]
 8017a48:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8017a4a:	2200      	movs	r2, #0
 8017a4c:	2100      	movs	r1, #0
 8017a4e:	2010      	movs	r0, #16
 8017a50:	f000 ffdd 	bl	8018a0e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8017a54:	2010      	movs	r0, #16
 8017a56:	f000 fff6 	bl	8018a46 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8017a5a:	2200      	movs	r2, #0
 8017a5c:	2100      	movs	r1, #0
 8017a5e:	2038      	movs	r0, #56	; 0x38
 8017a60:	f000 ffd5 	bl	8018a0e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8017a64:	2038      	movs	r0, #56	; 0x38
 8017a66:	f000 ffee 	bl	8018a46 <HAL_NVIC_EnableIRQ>

}
 8017a6a:	bf00      	nop
 8017a6c:	3708      	adds	r7, #8
 8017a6e:	46bd      	mov	sp, r7
 8017a70:	bd80      	pop	{r7, pc}
 8017a72:	bf00      	nop
 8017a74:	40023800 	.word	0x40023800

08017a78 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8017a78:	b580      	push	{r7, lr}
 8017a7a:	b08a      	sub	sp, #40	; 0x28
 8017a7c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8017a7e:	f107 0314 	add.w	r3, r7, #20
 8017a82:	2200      	movs	r2, #0
 8017a84:	601a      	str	r2, [r3, #0]
 8017a86:	605a      	str	r2, [r3, #4]
 8017a88:	609a      	str	r2, [r3, #8]
 8017a8a:	60da      	str	r2, [r3, #12]
 8017a8c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8017a8e:	2300      	movs	r3, #0
 8017a90:	613b      	str	r3, [r7, #16]
 8017a92:	4b4e      	ldr	r3, [pc, #312]	; (8017bcc <MX_GPIO_Init+0x154>)
 8017a94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8017a96:	4a4d      	ldr	r2, [pc, #308]	; (8017bcc <MX_GPIO_Init+0x154>)
 8017a98:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8017a9c:	6313      	str	r3, [r2, #48]	; 0x30
 8017a9e:	4b4b      	ldr	r3, [pc, #300]	; (8017bcc <MX_GPIO_Init+0x154>)
 8017aa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8017aa2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8017aa6:	613b      	str	r3, [r7, #16]
 8017aa8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8017aaa:	2300      	movs	r3, #0
 8017aac:	60fb      	str	r3, [r7, #12]
 8017aae:	4b47      	ldr	r3, [pc, #284]	; (8017bcc <MX_GPIO_Init+0x154>)
 8017ab0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8017ab2:	4a46      	ldr	r2, [pc, #280]	; (8017bcc <MX_GPIO_Init+0x154>)
 8017ab4:	f043 0301 	orr.w	r3, r3, #1
 8017ab8:	6313      	str	r3, [r2, #48]	; 0x30
 8017aba:	4b44      	ldr	r3, [pc, #272]	; (8017bcc <MX_GPIO_Init+0x154>)
 8017abc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8017abe:	f003 0301 	and.w	r3, r3, #1
 8017ac2:	60fb      	str	r3, [r7, #12]
 8017ac4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8017ac6:	2300      	movs	r3, #0
 8017ac8:	60bb      	str	r3, [r7, #8]
 8017aca:	4b40      	ldr	r3, [pc, #256]	; (8017bcc <MX_GPIO_Init+0x154>)
 8017acc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8017ace:	4a3f      	ldr	r2, [pc, #252]	; (8017bcc <MX_GPIO_Init+0x154>)
 8017ad0:	f043 0304 	orr.w	r3, r3, #4
 8017ad4:	6313      	str	r3, [r2, #48]	; 0x30
 8017ad6:	4b3d      	ldr	r3, [pc, #244]	; (8017bcc <MX_GPIO_Init+0x154>)
 8017ad8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8017ada:	f003 0304 	and.w	r3, r3, #4
 8017ade:	60bb      	str	r3, [r7, #8]
 8017ae0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8017ae2:	2300      	movs	r3, #0
 8017ae4:	607b      	str	r3, [r7, #4]
 8017ae6:	4b39      	ldr	r3, [pc, #228]	; (8017bcc <MX_GPIO_Init+0x154>)
 8017ae8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8017aea:	4a38      	ldr	r2, [pc, #224]	; (8017bcc <MX_GPIO_Init+0x154>)
 8017aec:	f043 0302 	orr.w	r3, r3, #2
 8017af0:	6313      	str	r3, [r2, #48]	; 0x30
 8017af2:	4b36      	ldr	r3, [pc, #216]	; (8017bcc <MX_GPIO_Init+0x154>)
 8017af4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8017af6:	f003 0302 	and.w	r3, r3, #2
 8017afa:	607b      	str	r3, [r7, #4]
 8017afc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Fo2_GPIO_Port, Fo2_Pin, GPIO_PIN_RESET);
 8017afe:	2200      	movs	r2, #0
 8017b00:	2104      	movs	r1, #4
 8017b02:	4833      	ldr	r0, [pc, #204]	; (8017bd0 <MX_GPIO_Init+0x158>)
 8017b04:	f001 fff0 	bl	8019ae8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, Az_Pin|Ay_Pin|LcdRs_Pin, GPIO_PIN_RESET);
 8017b08:	2200      	movs	r2, #0
 8017b0a:	f44f 6103 	mov.w	r1, #2096	; 0x830
 8017b0e:	4831      	ldr	r0, [pc, #196]	; (8017bd4 <MX_GPIO_Init+0x15c>)
 8017b10:	f001 ffea 	bl	8019ae8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, Ax_Pin|Dres_Pin, GPIO_PIN_RESET);
 8017b14:	2200      	movs	r2, #0
 8017b16:	f240 2101 	movw	r1, #513	; 0x201
 8017b1a:	482f      	ldr	r0, [pc, #188]	; (8017bd8 <MX_GPIO_Init+0x160>)
 8017b1c:	f001 ffe4 	bl	8019ae8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SS_Pin|TpCs_Pin, GPIO_PIN_SET);
 8017b20:	2201      	movs	r2, #1
 8017b22:	f44f 5182 	mov.w	r1, #4160	; 0x1040
 8017b26:	482c      	ldr	r0, [pc, #176]	; (8017bd8 <MX_GPIO_Init+0x160>)
 8017b28:	f001 ffde 	bl	8019ae8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LcdCs_GPIO_Port, LcdCs_Pin, GPIO_PIN_SET);
 8017b2c:	2201      	movs	r2, #1
 8017b2e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8017b32:	4828      	ldr	r0, [pc, #160]	; (8017bd4 <MX_GPIO_Init+0x15c>)
 8017b34:	f001 ffd8 	bl	8019ae8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : Fo2_Pin */
  GPIO_InitStruct.Pin = Fo2_Pin;
 8017b38:	2304      	movs	r3, #4
 8017b3a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8017b3c:	2301      	movs	r3, #1
 8017b3e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8017b40:	2300      	movs	r3, #0
 8017b42:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8017b44:	2300      	movs	r3, #0
 8017b46:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(Fo2_GPIO_Port, &GPIO_InitStruct);
 8017b48:	f107 0314 	add.w	r3, r7, #20
 8017b4c:	4619      	mov	r1, r3
 8017b4e:	4820      	ldr	r0, [pc, #128]	; (8017bd0 <MX_GPIO_Init+0x158>)
 8017b50:	f001 fe1e 	bl	8019790 <HAL_GPIO_Init>

  /*Configure GPIO pins : Az_Pin Ay_Pin LcdRs_Pin LcdCs_Pin */
  GPIO_InitStruct.Pin = Az_Pin|Ay_Pin|LcdRs_Pin|LcdCs_Pin;
 8017b54:	f641 0330 	movw	r3, #6192	; 0x1830
 8017b58:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8017b5a:	2301      	movs	r3, #1
 8017b5c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8017b5e:	2300      	movs	r3, #0
 8017b60:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8017b62:	2300      	movs	r3, #0
 8017b64:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8017b66:	f107 0314 	add.w	r3, r7, #20
 8017b6a:	4619      	mov	r1, r3
 8017b6c:	4819      	ldr	r0, [pc, #100]	; (8017bd4 <MX_GPIO_Init+0x15c>)
 8017b6e:	f001 fe0f 	bl	8019790 <HAL_GPIO_Init>

  /*Configure GPIO pins : Ax_Pin SS_Pin TpCs_Pin Dres_Pin */
  GPIO_InitStruct.Pin = Ax_Pin|SS_Pin|TpCs_Pin|Dres_Pin;
 8017b72:	f241 2341 	movw	r3, #4673	; 0x1241
 8017b76:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8017b78:	2301      	movs	r3, #1
 8017b7a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8017b7c:	2300      	movs	r3, #0
 8017b7e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8017b80:	2300      	movs	r3, #0
 8017b82:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8017b84:	f107 0314 	add.w	r3, r7, #20
 8017b88:	4619      	mov	r1, r3
 8017b8a:	4813      	ldr	r0, [pc, #76]	; (8017bd8 <MX_GPIO_Init+0x160>)
 8017b8c:	f001 fe00 	bl	8019790 <HAL_GPIO_Init>

  /*Configure GPIO pin : Boot1_Pin */
  GPIO_InitStruct.Pin = Boot1_Pin;
 8017b90:	2304      	movs	r3, #4
 8017b92:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8017b94:	2300      	movs	r3, #0
 8017b96:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8017b98:	2300      	movs	r3, #0
 8017b9a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Boot1_GPIO_Port, &GPIO_InitStruct);
 8017b9c:	f107 0314 	add.w	r3, r7, #20
 8017ba0:	4619      	mov	r1, r3
 8017ba2:	480d      	ldr	r0, [pc, #52]	; (8017bd8 <MX_GPIO_Init+0x160>)
 8017ba4:	f001 fdf4 	bl	8019790 <HAL_GPIO_Init>

  /*Configure GPIO pin : TpI_Pin */
  GPIO_InitStruct.Pin = TpI_Pin;
 8017ba8:	f44f 7380 	mov.w	r3, #256	; 0x100
 8017bac:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8017bae:	2300      	movs	r3, #0
 8017bb0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8017bb2:	2301      	movs	r3, #1
 8017bb4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(TpI_GPIO_Port, &GPIO_InitStruct);
 8017bb6:	f107 0314 	add.w	r3, r7, #20
 8017bba:	4619      	mov	r1, r3
 8017bbc:	4806      	ldr	r0, [pc, #24]	; (8017bd8 <MX_GPIO_Init+0x160>)
 8017bbe:	f001 fde7 	bl	8019790 <HAL_GPIO_Init>

}
 8017bc2:	bf00      	nop
 8017bc4:	3728      	adds	r7, #40	; 0x28
 8017bc6:	46bd      	mov	sp, r7
 8017bc8:	bd80      	pop	{r7, pc}
 8017bca:	bf00      	nop
 8017bcc:	40023800 	.word	0x40023800
 8017bd0:	40020000 	.word	0x40020000
 8017bd4:	40020800 	.word	0x40020800
 8017bd8:	40020400 	.word	0x40020400

08017bdc <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
// Callback: timer has rolled over
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8017bdc:	b580      	push	{r7, lr}
 8017bde:	b082      	sub	sp, #8
 8017be0:	af00      	add	r7, sp, #0
 8017be2:	6078      	str	r0, [r7, #4]
  // Check which version of the timer triggered this callback
  if (htim == &htim3 )
 8017be4:	687b      	ldr	r3, [r7, #4]
 8017be6:	4a06      	ldr	r2, [pc, #24]	; (8017c00 <HAL_TIM_PeriodElapsedCallback+0x24>)
 8017be8:	4293      	cmp	r3, r2
 8017bea:	d105      	bne.n	8017bf8 <HAL_TIM_PeriodElapsedCallback+0x1c>
  {
	  htim->Instance->SR =0;
 8017bec:	687b      	ldr	r3, [r7, #4]
 8017bee:	681b      	ldr	r3, [r3, #0]
 8017bf0:	2200      	movs	r2, #0
 8017bf2:	611a      	str	r2, [r3, #16]
	  Tim3_ISP();
 8017bf4:	f7f4 fdd2 	bl	800c79c <Tim3_ISP>
  }
}
 8017bf8:	bf00      	nop
 8017bfa:	3708      	adds	r7, #8
 8017bfc:	46bd      	mov	sp, r7
 8017bfe:	bd80      	pop	{r7, pc}
 8017c00:	20006978 	.word	0x20006978

08017c04 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8017c04:	b480      	push	{r7}
 8017c06:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8017c08:	b672      	cpsid	i
}
 8017c0a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8017c0c:	e7fe      	b.n	8017c0c <Error_Handler+0x8>
	...

08017c10 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8017c10:	b480      	push	{r7}
 8017c12:	b083      	sub	sp, #12
 8017c14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8017c16:	2300      	movs	r3, #0
 8017c18:	607b      	str	r3, [r7, #4]
 8017c1a:	4b10      	ldr	r3, [pc, #64]	; (8017c5c <HAL_MspInit+0x4c>)
 8017c1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8017c1e:	4a0f      	ldr	r2, [pc, #60]	; (8017c5c <HAL_MspInit+0x4c>)
 8017c20:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8017c24:	6453      	str	r3, [r2, #68]	; 0x44
 8017c26:	4b0d      	ldr	r3, [pc, #52]	; (8017c5c <HAL_MspInit+0x4c>)
 8017c28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8017c2a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8017c2e:	607b      	str	r3, [r7, #4]
 8017c30:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8017c32:	2300      	movs	r3, #0
 8017c34:	603b      	str	r3, [r7, #0]
 8017c36:	4b09      	ldr	r3, [pc, #36]	; (8017c5c <HAL_MspInit+0x4c>)
 8017c38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8017c3a:	4a08      	ldr	r2, [pc, #32]	; (8017c5c <HAL_MspInit+0x4c>)
 8017c3c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8017c40:	6413      	str	r3, [r2, #64]	; 0x40
 8017c42:	4b06      	ldr	r3, [pc, #24]	; (8017c5c <HAL_MspInit+0x4c>)
 8017c44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8017c46:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8017c4a:	603b      	str	r3, [r7, #0]
 8017c4c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8017c4e:	bf00      	nop
 8017c50:	370c      	adds	r7, #12
 8017c52:	46bd      	mov	sp, r7
 8017c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017c58:	4770      	bx	lr
 8017c5a:	bf00      	nop
 8017c5c:	40023800 	.word	0x40023800

08017c60 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8017c60:	b580      	push	{r7, lr}
 8017c62:	b08c      	sub	sp, #48	; 0x30
 8017c64:	af00      	add	r7, sp, #0
 8017c66:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8017c68:	f107 031c 	add.w	r3, r7, #28
 8017c6c:	2200      	movs	r2, #0
 8017c6e:	601a      	str	r2, [r3, #0]
 8017c70:	605a      	str	r2, [r3, #4]
 8017c72:	609a      	str	r2, [r3, #8]
 8017c74:	60da      	str	r2, [r3, #12]
 8017c76:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8017c78:	687b      	ldr	r3, [r7, #4]
 8017c7a:	681b      	ldr	r3, [r3, #0]
 8017c7c:	4a45      	ldr	r2, [pc, #276]	; (8017d94 <HAL_ADC_MspInit+0x134>)
 8017c7e:	4293      	cmp	r3, r2
 8017c80:	d157      	bne.n	8017d32 <HAL_ADC_MspInit+0xd2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8017c82:	2300      	movs	r3, #0
 8017c84:	61bb      	str	r3, [r7, #24]
 8017c86:	4b44      	ldr	r3, [pc, #272]	; (8017d98 <HAL_ADC_MspInit+0x138>)
 8017c88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8017c8a:	4a43      	ldr	r2, [pc, #268]	; (8017d98 <HAL_ADC_MspInit+0x138>)
 8017c8c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8017c90:	6453      	str	r3, [r2, #68]	; 0x44
 8017c92:	4b41      	ldr	r3, [pc, #260]	; (8017d98 <HAL_ADC_MspInit+0x138>)
 8017c94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8017c96:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8017c9a:	61bb      	str	r3, [r7, #24]
 8017c9c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8017c9e:	2300      	movs	r3, #0
 8017ca0:	617b      	str	r3, [r7, #20]
 8017ca2:	4b3d      	ldr	r3, [pc, #244]	; (8017d98 <HAL_ADC_MspInit+0x138>)
 8017ca4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8017ca6:	4a3c      	ldr	r2, [pc, #240]	; (8017d98 <HAL_ADC_MspInit+0x138>)
 8017ca8:	f043 0301 	orr.w	r3, r3, #1
 8017cac:	6313      	str	r3, [r2, #48]	; 0x30
 8017cae:	4b3a      	ldr	r3, [pc, #232]	; (8017d98 <HAL_ADC_MspInit+0x138>)
 8017cb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8017cb2:	f003 0301 	and.w	r3, r3, #1
 8017cb6:	617b      	str	r3, [r7, #20]
 8017cb8:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PA6     ------> ADC1_IN6
    */
    GPIO_InitStruct.Pin = Ao_Pin;
 8017cba:	2340      	movs	r3, #64	; 0x40
 8017cbc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8017cbe:	2303      	movs	r3, #3
 8017cc0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8017cc2:	2300      	movs	r3, #0
 8017cc4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(Ao_GPIO_Port, &GPIO_InitStruct);
 8017cc6:	f107 031c 	add.w	r3, r7, #28
 8017cca:	4619      	mov	r1, r3
 8017ccc:	4833      	ldr	r0, [pc, #204]	; (8017d9c <HAL_ADC_MspInit+0x13c>)
 8017cce:	f001 fd5f 	bl	8019790 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8017cd2:	4b33      	ldr	r3, [pc, #204]	; (8017da0 <HAL_ADC_MspInit+0x140>)
 8017cd4:	4a33      	ldr	r2, [pc, #204]	; (8017da4 <HAL_ADC_MspInit+0x144>)
 8017cd6:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8017cd8:	4b31      	ldr	r3, [pc, #196]	; (8017da0 <HAL_ADC_MspInit+0x140>)
 8017cda:	2200      	movs	r2, #0
 8017cdc:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8017cde:	4b30      	ldr	r3, [pc, #192]	; (8017da0 <HAL_ADC_MspInit+0x140>)
 8017ce0:	2200      	movs	r2, #0
 8017ce2:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8017ce4:	4b2e      	ldr	r3, [pc, #184]	; (8017da0 <HAL_ADC_MspInit+0x140>)
 8017ce6:	2200      	movs	r2, #0
 8017ce8:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8017cea:	4b2d      	ldr	r3, [pc, #180]	; (8017da0 <HAL_ADC_MspInit+0x140>)
 8017cec:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8017cf0:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8017cf2:	4b2b      	ldr	r3, [pc, #172]	; (8017da0 <HAL_ADC_MspInit+0x140>)
 8017cf4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8017cf8:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8017cfa:	4b29      	ldr	r3, [pc, #164]	; (8017da0 <HAL_ADC_MspInit+0x140>)
 8017cfc:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8017d00:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 8017d02:	4b27      	ldr	r3, [pc, #156]	; (8017da0 <HAL_ADC_MspInit+0x140>)
 8017d04:	2200      	movs	r2, #0
 8017d06:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8017d08:	4b25      	ldr	r3, [pc, #148]	; (8017da0 <HAL_ADC_MspInit+0x140>)
 8017d0a:	2200      	movs	r2, #0
 8017d0c:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8017d0e:	4b24      	ldr	r3, [pc, #144]	; (8017da0 <HAL_ADC_MspInit+0x140>)
 8017d10:	2200      	movs	r2, #0
 8017d12:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8017d14:	4822      	ldr	r0, [pc, #136]	; (8017da0 <HAL_ADC_MspInit+0x140>)
 8017d16:	f000 ff47 	bl	8018ba8 <HAL_DMA_Init>
 8017d1a:	4603      	mov	r3, r0
 8017d1c:	2b00      	cmp	r3, #0
 8017d1e:	d001      	beq.n	8017d24 <HAL_ADC_MspInit+0xc4>
    {
      Error_Handler();
 8017d20:	f7ff ff70 	bl	8017c04 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8017d24:	687b      	ldr	r3, [r7, #4]
 8017d26:	4a1e      	ldr	r2, [pc, #120]	; (8017da0 <HAL_ADC_MspInit+0x140>)
 8017d28:	639a      	str	r2, [r3, #56]	; 0x38
 8017d2a:	4a1d      	ldr	r2, [pc, #116]	; (8017da0 <HAL_ADC_MspInit+0x140>)
 8017d2c:	687b      	ldr	r3, [r7, #4]
 8017d2e:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8017d30:	e02c      	b.n	8017d8c <HAL_ADC_MspInit+0x12c>
  else if(hadc->Instance==ADC2)
 8017d32:	687b      	ldr	r3, [r7, #4]
 8017d34:	681b      	ldr	r3, [r3, #0]
 8017d36:	4a1c      	ldr	r2, [pc, #112]	; (8017da8 <HAL_ADC_MspInit+0x148>)
 8017d38:	4293      	cmp	r3, r2
 8017d3a:	d127      	bne.n	8017d8c <HAL_ADC_MspInit+0x12c>
    __HAL_RCC_ADC2_CLK_ENABLE();
 8017d3c:	2300      	movs	r3, #0
 8017d3e:	613b      	str	r3, [r7, #16]
 8017d40:	4b15      	ldr	r3, [pc, #84]	; (8017d98 <HAL_ADC_MspInit+0x138>)
 8017d42:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8017d44:	4a14      	ldr	r2, [pc, #80]	; (8017d98 <HAL_ADC_MspInit+0x138>)
 8017d46:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8017d4a:	6453      	str	r3, [r2, #68]	; 0x44
 8017d4c:	4b12      	ldr	r3, [pc, #72]	; (8017d98 <HAL_ADC_MspInit+0x138>)
 8017d4e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8017d50:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8017d54:	613b      	str	r3, [r7, #16]
 8017d56:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8017d58:	2300      	movs	r3, #0
 8017d5a:	60fb      	str	r3, [r7, #12]
 8017d5c:	4b0e      	ldr	r3, [pc, #56]	; (8017d98 <HAL_ADC_MspInit+0x138>)
 8017d5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8017d60:	4a0d      	ldr	r2, [pc, #52]	; (8017d98 <HAL_ADC_MspInit+0x138>)
 8017d62:	f043 0301 	orr.w	r3, r3, #1
 8017d66:	6313      	str	r3, [r2, #48]	; 0x30
 8017d68:	4b0b      	ldr	r3, [pc, #44]	; (8017d98 <HAL_ADC_MspInit+0x138>)
 8017d6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8017d6c:	f003 0301 	and.w	r3, r3, #1
 8017d70:	60fb      	str	r3, [r7, #12]
 8017d72:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = AoA7_Pin;
 8017d74:	2380      	movs	r3, #128	; 0x80
 8017d76:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8017d78:	2303      	movs	r3, #3
 8017d7a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8017d7c:	2300      	movs	r3, #0
 8017d7e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(AoA7_GPIO_Port, &GPIO_InitStruct);
 8017d80:	f107 031c 	add.w	r3, r7, #28
 8017d84:	4619      	mov	r1, r3
 8017d86:	4805      	ldr	r0, [pc, #20]	; (8017d9c <HAL_ADC_MspInit+0x13c>)
 8017d88:	f001 fd02 	bl	8019790 <HAL_GPIO_Init>
}
 8017d8c:	bf00      	nop
 8017d8e:	3730      	adds	r7, #48	; 0x30
 8017d90:	46bd      	mov	sp, r7
 8017d92:	bd80      	pop	{r7, pc}
 8017d94:	40012000 	.word	0x40012000
 8017d98:	40023800 	.word	0x40023800
 8017d9c:	40020000 	.word	0x40020000
 8017da0:	20006b0c 	.word	0x20006b0c
 8017da4:	40026410 	.word	0x40026410
 8017da8:	40012100 	.word	0x40012100

08017dac <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8017dac:	b580      	push	{r7, lr}
 8017dae:	b08a      	sub	sp, #40	; 0x28
 8017db0:	af00      	add	r7, sp, #0
 8017db2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8017db4:	f107 0314 	add.w	r3, r7, #20
 8017db8:	2200      	movs	r2, #0
 8017dba:	601a      	str	r2, [r3, #0]
 8017dbc:	605a      	str	r2, [r3, #4]
 8017dbe:	609a      	str	r2, [r3, #8]
 8017dc0:	60da      	str	r2, [r3, #12]
 8017dc2:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC)
 8017dc4:	687b      	ldr	r3, [r7, #4]
 8017dc6:	681b      	ldr	r3, [r3, #0]
 8017dc8:	4a33      	ldr	r2, [pc, #204]	; (8017e98 <HAL_DAC_MspInit+0xec>)
 8017dca:	4293      	cmp	r3, r2
 8017dcc:	d15f      	bne.n	8017e8e <HAL_DAC_MspInit+0xe2>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 8017dce:	2300      	movs	r3, #0
 8017dd0:	613b      	str	r3, [r7, #16]
 8017dd2:	4b32      	ldr	r3, [pc, #200]	; (8017e9c <HAL_DAC_MspInit+0xf0>)
 8017dd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8017dd6:	4a31      	ldr	r2, [pc, #196]	; (8017e9c <HAL_DAC_MspInit+0xf0>)
 8017dd8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8017ddc:	6413      	str	r3, [r2, #64]	; 0x40
 8017dde:	4b2f      	ldr	r3, [pc, #188]	; (8017e9c <HAL_DAC_MspInit+0xf0>)
 8017de0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8017de2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8017de6:	613b      	str	r3, [r7, #16]
 8017de8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8017dea:	2300      	movs	r3, #0
 8017dec:	60fb      	str	r3, [r7, #12]
 8017dee:	4b2b      	ldr	r3, [pc, #172]	; (8017e9c <HAL_DAC_MspInit+0xf0>)
 8017df0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8017df2:	4a2a      	ldr	r2, [pc, #168]	; (8017e9c <HAL_DAC_MspInit+0xf0>)
 8017df4:	f043 0301 	orr.w	r3, r3, #1
 8017df8:	6313      	str	r3, [r2, #48]	; 0x30
 8017dfa:	4b28      	ldr	r3, [pc, #160]	; (8017e9c <HAL_DAC_MspInit+0xf0>)
 8017dfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8017dfe:	f003 0301 	and.w	r3, r3, #1
 8017e02:	60fb      	str	r3, [r7, #12]
 8017e04:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    PA5     ------> DAC_OUT2
    */
    GPIO_InitStruct.Pin = Fo4_Pin|Ap_Pin;
 8017e06:	2330      	movs	r3, #48	; 0x30
 8017e08:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8017e0a:	2303      	movs	r3, #3
 8017e0c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8017e0e:	2300      	movs	r3, #0
 8017e10:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8017e12:	f107 0314 	add.w	r3, r7, #20
 8017e16:	4619      	mov	r1, r3
 8017e18:	4821      	ldr	r0, [pc, #132]	; (8017ea0 <HAL_DAC_MspInit+0xf4>)
 8017e1a:	f001 fcb9 	bl	8019790 <HAL_GPIO_Init>

    /* DAC DMA Init */
    /* DAC1 Init */
    hdma_dac1.Instance = DMA1_Stream5;
 8017e1e:	4b21      	ldr	r3, [pc, #132]	; (8017ea4 <HAL_DAC_MspInit+0xf8>)
 8017e20:	4a21      	ldr	r2, [pc, #132]	; (8017ea8 <HAL_DAC_MspInit+0xfc>)
 8017e22:	601a      	str	r2, [r3, #0]
    hdma_dac1.Init.Channel = DMA_CHANNEL_7;
 8017e24:	4b1f      	ldr	r3, [pc, #124]	; (8017ea4 <HAL_DAC_MspInit+0xf8>)
 8017e26:	f04f 6260 	mov.w	r2, #234881024	; 0xe000000
 8017e2a:	605a      	str	r2, [r3, #4]
    hdma_dac1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8017e2c:	4b1d      	ldr	r3, [pc, #116]	; (8017ea4 <HAL_DAC_MspInit+0xf8>)
 8017e2e:	2240      	movs	r2, #64	; 0x40
 8017e30:	609a      	str	r2, [r3, #8]
    hdma_dac1.Init.PeriphInc = DMA_PINC_DISABLE;
 8017e32:	4b1c      	ldr	r3, [pc, #112]	; (8017ea4 <HAL_DAC_MspInit+0xf8>)
 8017e34:	2200      	movs	r2, #0
 8017e36:	60da      	str	r2, [r3, #12]
    hdma_dac1.Init.MemInc = DMA_MINC_ENABLE;
 8017e38:	4b1a      	ldr	r3, [pc, #104]	; (8017ea4 <HAL_DAC_MspInit+0xf8>)
 8017e3a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8017e3e:	611a      	str	r2, [r3, #16]
    hdma_dac1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8017e40:	4b18      	ldr	r3, [pc, #96]	; (8017ea4 <HAL_DAC_MspInit+0xf8>)
 8017e42:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8017e46:	615a      	str	r2, [r3, #20]
    hdma_dac1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8017e48:	4b16      	ldr	r3, [pc, #88]	; (8017ea4 <HAL_DAC_MspInit+0xf8>)
 8017e4a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8017e4e:	619a      	str	r2, [r3, #24]
    hdma_dac1.Init.Mode = DMA_NORMAL;
 8017e50:	4b14      	ldr	r3, [pc, #80]	; (8017ea4 <HAL_DAC_MspInit+0xf8>)
 8017e52:	2200      	movs	r2, #0
 8017e54:	61da      	str	r2, [r3, #28]
    hdma_dac1.Init.Priority = DMA_PRIORITY_LOW;
 8017e56:	4b13      	ldr	r3, [pc, #76]	; (8017ea4 <HAL_DAC_MspInit+0xf8>)
 8017e58:	2200      	movs	r2, #0
 8017e5a:	621a      	str	r2, [r3, #32]
    hdma_dac1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8017e5c:	4b11      	ldr	r3, [pc, #68]	; (8017ea4 <HAL_DAC_MspInit+0xf8>)
 8017e5e:	2200      	movs	r2, #0
 8017e60:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_dac1) != HAL_OK)
 8017e62:	4810      	ldr	r0, [pc, #64]	; (8017ea4 <HAL_DAC_MspInit+0xf8>)
 8017e64:	f000 fea0 	bl	8018ba8 <HAL_DMA_Init>
 8017e68:	4603      	mov	r3, r0
 8017e6a:	2b00      	cmp	r3, #0
 8017e6c:	d001      	beq.n	8017e72 <HAL_DAC_MspInit+0xc6>
    {
      Error_Handler();
 8017e6e:	f7ff fec9 	bl	8017c04 <Error_Handler>
    }

    __HAL_LINKDMA(hdac,DMA_Handle1,hdma_dac1);
 8017e72:	687b      	ldr	r3, [r7, #4]
 8017e74:	4a0b      	ldr	r2, [pc, #44]	; (8017ea4 <HAL_DAC_MspInit+0xf8>)
 8017e76:	609a      	str	r2, [r3, #8]
 8017e78:	4a0a      	ldr	r2, [pc, #40]	; (8017ea4 <HAL_DAC_MspInit+0xf8>)
 8017e7a:	687b      	ldr	r3, [r7, #4]
 8017e7c:	6393      	str	r3, [r2, #56]	; 0x38

    /* DAC interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8017e7e:	2200      	movs	r2, #0
 8017e80:	2100      	movs	r1, #0
 8017e82:	2036      	movs	r0, #54	; 0x36
 8017e84:	f000 fdc3 	bl	8018a0e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8017e88:	2036      	movs	r0, #54	; 0x36
 8017e8a:	f000 fddc 	bl	8018a46 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }

}
 8017e8e:	bf00      	nop
 8017e90:	3728      	adds	r7, #40	; 0x28
 8017e92:	46bd      	mov	sp, r7
 8017e94:	bd80      	pop	{r7, pc}
 8017e96:	bf00      	nop
 8017e98:	40007400 	.word	0x40007400
 8017e9c:	40023800 	.word	0x40023800
 8017ea0:	40020000 	.word	0x40020000
 8017ea4:	20006a18 	.word	0x20006a18
 8017ea8:	40026088 	.word	0x40026088

08017eac <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8017eac:	b580      	push	{r7, lr}
 8017eae:	b08c      	sub	sp, #48	; 0x30
 8017eb0:	af00      	add	r7, sp, #0
 8017eb2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8017eb4:	f107 031c 	add.w	r3, r7, #28
 8017eb8:	2200      	movs	r2, #0
 8017eba:	601a      	str	r2, [r3, #0]
 8017ebc:	605a      	str	r2, [r3, #4]
 8017ebe:	609a      	str	r2, [r3, #8]
 8017ec0:	60da      	str	r2, [r3, #12]
 8017ec2:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8017ec4:	687b      	ldr	r3, [r7, #4]
 8017ec6:	681b      	ldr	r3, [r3, #0]
 8017ec8:	4a3a      	ldr	r2, [pc, #232]	; (8017fb4 <HAL_SPI_MspInit+0x108>)
 8017eca:	4293      	cmp	r3, r2
 8017ecc:	d135      	bne.n	8017f3a <HAL_SPI_MspInit+0x8e>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8017ece:	2300      	movs	r3, #0
 8017ed0:	61bb      	str	r3, [r7, #24]
 8017ed2:	4b39      	ldr	r3, [pc, #228]	; (8017fb8 <HAL_SPI_MspInit+0x10c>)
 8017ed4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8017ed6:	4a38      	ldr	r2, [pc, #224]	; (8017fb8 <HAL_SPI_MspInit+0x10c>)
 8017ed8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8017edc:	6413      	str	r3, [r2, #64]	; 0x40
 8017ede:	4b36      	ldr	r3, [pc, #216]	; (8017fb8 <HAL_SPI_MspInit+0x10c>)
 8017ee0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8017ee2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8017ee6:	61bb      	str	r3, [r7, #24]
 8017ee8:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8017eea:	2300      	movs	r3, #0
 8017eec:	617b      	str	r3, [r7, #20]
 8017eee:	4b32      	ldr	r3, [pc, #200]	; (8017fb8 <HAL_SPI_MspInit+0x10c>)
 8017ef0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8017ef2:	4a31      	ldr	r2, [pc, #196]	; (8017fb8 <HAL_SPI_MspInit+0x10c>)
 8017ef4:	f043 0302 	orr.w	r3, r3, #2
 8017ef8:	6313      	str	r3, [r2, #48]	; 0x30
 8017efa:	4b2f      	ldr	r3, [pc, #188]	; (8017fb8 <HAL_SPI_MspInit+0x10c>)
 8017efc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8017efe:	f003 0302 	and.w	r3, r3, #2
 8017f02:	617b      	str	r3, [r7, #20]
 8017f04:	697b      	ldr	r3, [r7, #20]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = SCK_Pin|So_Pin|Si_Pin;
 8017f06:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8017f0a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8017f0c:	2302      	movs	r3, #2
 8017f0e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8017f10:	2300      	movs	r3, #0
 8017f12:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8017f14:	2303      	movs	r3, #3
 8017f16:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8017f18:	2305      	movs	r3, #5
 8017f1a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8017f1c:	f107 031c 	add.w	r3, r7, #28
 8017f20:	4619      	mov	r1, r3
 8017f22:	4826      	ldr	r0, [pc, #152]	; (8017fbc <HAL_SPI_MspInit+0x110>)
 8017f24:	f001 fc34 	bl	8019790 <HAL_GPIO_Init>

    /* SPI2 interrupt Init */
    HAL_NVIC_SetPriority(SPI2_IRQn, 1, 0);
 8017f28:	2200      	movs	r2, #0
 8017f2a:	2101      	movs	r1, #1
 8017f2c:	2024      	movs	r0, #36	; 0x24
 8017f2e:	f000 fd6e 	bl	8018a0e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 8017f32:	2024      	movs	r0, #36	; 0x24
 8017f34:	f000 fd87 	bl	8018a46 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8017f38:	e038      	b.n	8017fac <HAL_SPI_MspInit+0x100>
  else if(hspi->Instance==SPI3)
 8017f3a:	687b      	ldr	r3, [r7, #4]
 8017f3c:	681b      	ldr	r3, [r3, #0]
 8017f3e:	4a20      	ldr	r2, [pc, #128]	; (8017fc0 <HAL_SPI_MspInit+0x114>)
 8017f40:	4293      	cmp	r3, r2
 8017f42:	d133      	bne.n	8017fac <HAL_SPI_MspInit+0x100>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8017f44:	2300      	movs	r3, #0
 8017f46:	613b      	str	r3, [r7, #16]
 8017f48:	4b1b      	ldr	r3, [pc, #108]	; (8017fb8 <HAL_SPI_MspInit+0x10c>)
 8017f4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8017f4c:	4a1a      	ldr	r2, [pc, #104]	; (8017fb8 <HAL_SPI_MspInit+0x10c>)
 8017f4e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8017f52:	6413      	str	r3, [r2, #64]	; 0x40
 8017f54:	4b18      	ldr	r3, [pc, #96]	; (8017fb8 <HAL_SPI_MspInit+0x10c>)
 8017f56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8017f58:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8017f5c:	613b      	str	r3, [r7, #16]
 8017f5e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8017f60:	2300      	movs	r3, #0
 8017f62:	60fb      	str	r3, [r7, #12]
 8017f64:	4b14      	ldr	r3, [pc, #80]	; (8017fb8 <HAL_SPI_MspInit+0x10c>)
 8017f66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8017f68:	4a13      	ldr	r2, [pc, #76]	; (8017fb8 <HAL_SPI_MspInit+0x10c>)
 8017f6a:	f043 0302 	orr.w	r3, r3, #2
 8017f6e:	6313      	str	r3, [r2, #48]	; 0x30
 8017f70:	4b11      	ldr	r3, [pc, #68]	; (8017fb8 <HAL_SPI_MspInit+0x10c>)
 8017f72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8017f74:	f003 0302 	and.w	r3, r3, #2
 8017f78:	60fb      	str	r3, [r7, #12]
 8017f7a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = TpCk_Pin|TpSo_Pin|TpSi_Pin;
 8017f7c:	2338      	movs	r3, #56	; 0x38
 8017f7e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8017f80:	2302      	movs	r3, #2
 8017f82:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8017f84:	2300      	movs	r3, #0
 8017f86:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8017f88:	2303      	movs	r3, #3
 8017f8a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8017f8c:	2306      	movs	r3, #6
 8017f8e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8017f90:	f107 031c 	add.w	r3, r7, #28
 8017f94:	4619      	mov	r1, r3
 8017f96:	4809      	ldr	r0, [pc, #36]	; (8017fbc <HAL_SPI_MspInit+0x110>)
 8017f98:	f001 fbfa 	bl	8019790 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(SPI3_IRQn, 1, 0);
 8017f9c:	2200      	movs	r2, #0
 8017f9e:	2101      	movs	r1, #1
 8017fa0:	2033      	movs	r0, #51	; 0x33
 8017fa2:	f000 fd34 	bl	8018a0e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI3_IRQn);
 8017fa6:	2033      	movs	r0, #51	; 0x33
 8017fa8:	f000 fd4d 	bl	8018a46 <HAL_NVIC_EnableIRQ>
}
 8017fac:	bf00      	nop
 8017fae:	3730      	adds	r7, #48	; 0x30
 8017fb0:	46bd      	mov	sp, r7
 8017fb2:	bd80      	pop	{r7, pc}
 8017fb4:	40003800 	.word	0x40003800
 8017fb8:	40023800 	.word	0x40023800
 8017fbc:	40020400 	.word	0x40020400
 8017fc0:	40003c00 	.word	0x40003c00

08017fc4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8017fc4:	b580      	push	{r7, lr}
 8017fc6:	b086      	sub	sp, #24
 8017fc8:	af00      	add	r7, sp, #0
 8017fca:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8017fcc:	687b      	ldr	r3, [r7, #4]
 8017fce:	681b      	ldr	r3, [r3, #0]
 8017fd0:	4a2c      	ldr	r2, [pc, #176]	; (8018084 <HAL_TIM_Base_MspInit+0xc0>)
 8017fd2:	4293      	cmp	r3, r2
 8017fd4:	d10e      	bne.n	8017ff4 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8017fd6:	2300      	movs	r3, #0
 8017fd8:	617b      	str	r3, [r7, #20]
 8017fda:	4b2b      	ldr	r3, [pc, #172]	; (8018088 <HAL_TIM_Base_MspInit+0xc4>)
 8017fdc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8017fde:	4a2a      	ldr	r2, [pc, #168]	; (8018088 <HAL_TIM_Base_MspInit+0xc4>)
 8017fe0:	f043 0301 	orr.w	r3, r3, #1
 8017fe4:	6453      	str	r3, [r2, #68]	; 0x44
 8017fe6:	4b28      	ldr	r3, [pc, #160]	; (8018088 <HAL_TIM_Base_MspInit+0xc4>)
 8017fe8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8017fea:	f003 0301 	and.w	r3, r3, #1
 8017fee:	617b      	str	r3, [r7, #20]
 8017ff0:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }

}
 8017ff2:	e042      	b.n	801807a <HAL_TIM_Base_MspInit+0xb6>
  else if(htim_base->Instance==TIM3)
 8017ff4:	687b      	ldr	r3, [r7, #4]
 8017ff6:	681b      	ldr	r3, [r3, #0]
 8017ff8:	4a24      	ldr	r2, [pc, #144]	; (801808c <HAL_TIM_Base_MspInit+0xc8>)
 8017ffa:	4293      	cmp	r3, r2
 8017ffc:	d116      	bne.n	801802c <HAL_TIM_Base_MspInit+0x68>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8017ffe:	2300      	movs	r3, #0
 8018000:	613b      	str	r3, [r7, #16]
 8018002:	4b21      	ldr	r3, [pc, #132]	; (8018088 <HAL_TIM_Base_MspInit+0xc4>)
 8018004:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8018006:	4a20      	ldr	r2, [pc, #128]	; (8018088 <HAL_TIM_Base_MspInit+0xc4>)
 8018008:	f043 0302 	orr.w	r3, r3, #2
 801800c:	6413      	str	r3, [r2, #64]	; 0x40
 801800e:	4b1e      	ldr	r3, [pc, #120]	; (8018088 <HAL_TIM_Base_MspInit+0xc4>)
 8018010:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8018012:	f003 0302 	and.w	r3, r3, #2
 8018016:	613b      	str	r3, [r7, #16]
 8018018:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 801801a:	2200      	movs	r2, #0
 801801c:	2100      	movs	r1, #0
 801801e:	201d      	movs	r0, #29
 8018020:	f000 fcf5 	bl	8018a0e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8018024:	201d      	movs	r0, #29
 8018026:	f000 fd0e 	bl	8018a46 <HAL_NVIC_EnableIRQ>
}
 801802a:	e026      	b.n	801807a <HAL_TIM_Base_MspInit+0xb6>
  else if(htim_base->Instance==TIM5)
 801802c:	687b      	ldr	r3, [r7, #4]
 801802e:	681b      	ldr	r3, [r3, #0]
 8018030:	4a17      	ldr	r2, [pc, #92]	; (8018090 <HAL_TIM_Base_MspInit+0xcc>)
 8018032:	4293      	cmp	r3, r2
 8018034:	d10e      	bne.n	8018054 <HAL_TIM_Base_MspInit+0x90>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8018036:	2300      	movs	r3, #0
 8018038:	60fb      	str	r3, [r7, #12]
 801803a:	4b13      	ldr	r3, [pc, #76]	; (8018088 <HAL_TIM_Base_MspInit+0xc4>)
 801803c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801803e:	4a12      	ldr	r2, [pc, #72]	; (8018088 <HAL_TIM_Base_MspInit+0xc4>)
 8018040:	f043 0308 	orr.w	r3, r3, #8
 8018044:	6413      	str	r3, [r2, #64]	; 0x40
 8018046:	4b10      	ldr	r3, [pc, #64]	; (8018088 <HAL_TIM_Base_MspInit+0xc4>)
 8018048:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801804a:	f003 0308 	and.w	r3, r3, #8
 801804e:	60fb      	str	r3, [r7, #12]
 8018050:	68fb      	ldr	r3, [r7, #12]
}
 8018052:	e012      	b.n	801807a <HAL_TIM_Base_MspInit+0xb6>
  else if(htim_base->Instance==TIM7)
 8018054:	687b      	ldr	r3, [r7, #4]
 8018056:	681b      	ldr	r3, [r3, #0]
 8018058:	4a0e      	ldr	r2, [pc, #56]	; (8018094 <HAL_TIM_Base_MspInit+0xd0>)
 801805a:	4293      	cmp	r3, r2
 801805c:	d10d      	bne.n	801807a <HAL_TIM_Base_MspInit+0xb6>
    __HAL_RCC_TIM7_CLK_ENABLE();
 801805e:	2300      	movs	r3, #0
 8018060:	60bb      	str	r3, [r7, #8]
 8018062:	4b09      	ldr	r3, [pc, #36]	; (8018088 <HAL_TIM_Base_MspInit+0xc4>)
 8018064:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8018066:	4a08      	ldr	r2, [pc, #32]	; (8018088 <HAL_TIM_Base_MspInit+0xc4>)
 8018068:	f043 0320 	orr.w	r3, r3, #32
 801806c:	6413      	str	r3, [r2, #64]	; 0x40
 801806e:	4b06      	ldr	r3, [pc, #24]	; (8018088 <HAL_TIM_Base_MspInit+0xc4>)
 8018070:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8018072:	f003 0320 	and.w	r3, r3, #32
 8018076:	60bb      	str	r3, [r7, #8]
 8018078:	68bb      	ldr	r3, [r7, #8]
}
 801807a:	bf00      	nop
 801807c:	3718      	adds	r7, #24
 801807e:	46bd      	mov	sp, r7
 8018080:	bd80      	pop	{r7, pc}
 8018082:	bf00      	nop
 8018084:	40010000 	.word	0x40010000
 8018088:	40023800 	.word	0x40023800
 801808c:	40000400 	.word	0x40000400
 8018090:	40000c00 	.word	0x40000c00
 8018094:	40001400 	.word	0x40001400

08018098 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8018098:	b480      	push	{r7}
 801809a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 801809c:	e7fe      	b.n	801809c <NMI_Handler+0x4>

0801809e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 801809e:	b480      	push	{r7}
 80180a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80180a2:	e7fe      	b.n	80180a2 <HardFault_Handler+0x4>

080180a4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80180a4:	b480      	push	{r7}
 80180a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80180a8:	e7fe      	b.n	80180a8 <MemManage_Handler+0x4>

080180aa <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80180aa:	b480      	push	{r7}
 80180ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80180ae:	e7fe      	b.n	80180ae <BusFault_Handler+0x4>

080180b0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80180b0:	b480      	push	{r7}
 80180b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80180b4:	e7fe      	b.n	80180b4 <UsageFault_Handler+0x4>

080180b6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80180b6:	b480      	push	{r7}
 80180b8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80180ba:	bf00      	nop
 80180bc:	46bd      	mov	sp, r7
 80180be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80180c2:	4770      	bx	lr

080180c4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80180c4:	b480      	push	{r7}
 80180c6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80180c8:	bf00      	nop
 80180ca:	46bd      	mov	sp, r7
 80180cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80180d0:	4770      	bx	lr

080180d2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80180d2:	b480      	push	{r7}
 80180d4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80180d6:	bf00      	nop
 80180d8:	46bd      	mov	sp, r7
 80180da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80180de:	4770      	bx	lr

080180e0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80180e0:	b580      	push	{r7, lr}
 80180e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80180e4:	f000 f902 	bl	80182ec <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80180e8:	bf00      	nop
 80180ea:	bd80      	pop	{r7, pc}

080180ec <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 80180ec:	b580      	push	{r7, lr}
 80180ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1);
 80180f0:	4802      	ldr	r0, [pc, #8]	; (80180fc <DMA1_Stream5_IRQHandler+0x10>)
 80180f2:	f000 fe29 	bl	8018d48 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 80180f6:	bf00      	nop
 80180f8:	bd80      	pop	{r7, pc}
 80180fa:	bf00      	nop
 80180fc:	20006a18 	.word	0x20006a18

08018100 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8018100:	b580      	push	{r7, lr}
 8018102:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8018104:	4802      	ldr	r0, [pc, #8]	; (8018110 <TIM3_IRQHandler+0x10>)
 8018106:	f004 feff 	bl	801cf08 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 801810a:	bf00      	nop
 801810c:	bd80      	pop	{r7, pc}
 801810e:	bf00      	nop
 8018110:	20006978 	.word	0x20006978

08018114 <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 8018114:	b580      	push	{r7, lr}
 8018116:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 8018118:	4802      	ldr	r0, [pc, #8]	; (8018124 <SPI2_IRQHandler+0x10>)
 801811a:	f004 fbd9 	bl	801c8d0 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 801811e:	bf00      	nop
 8018120:	bd80      	pop	{r7, pc}
 8018122:	bf00      	nop
 8018124:	20006890 	.word	0x20006890

08018128 <SPI3_IRQHandler>:

/**
  * @brief This function handles SPI3 global interrupt.
  */
void SPI3_IRQHandler(void)
{
 8018128:	b580      	push	{r7, lr}
 801812a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI3_IRQn 0 */

  /* USER CODE END SPI3_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi3);
 801812c:	4802      	ldr	r0, [pc, #8]	; (8018138 <SPI3_IRQHandler+0x10>)
 801812e:	f004 fbcf 	bl	801c8d0 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI3_IRQn 1 */

  /* USER CODE END SPI3_IRQn 1 */
}
 8018132:	bf00      	nop
 8018134:	bd80      	pop	{r7, pc}
 8018136:	bf00      	nop
 8018138:	200069c0 	.word	0x200069c0

0801813c <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 801813c:	b580      	push	{r7, lr}
 801813e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8018140:	4802      	ldr	r0, [pc, #8]	; (801814c <DMA2_Stream0_IRQHandler+0x10>)
 8018142:	f000 fe01 	bl	8018d48 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8018146:	bf00      	nop
 8018148:	bd80      	pop	{r7, pc}
 801814a:	bf00      	nop
 801814c:	20006b0c 	.word	0x20006b0c

08018150 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8018150:	b580      	push	{r7, lr}
 8018152:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8018154:	4802      	ldr	r0, [pc, #8]	; (8018160 <OTG_FS_IRQHandler+0x10>)
 8018156:	f001 fe37 	bl	8019dc8 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 801815a:	bf00      	nop
 801815c:	bd80      	pop	{r7, pc}
 801815e:	bf00      	nop
 8018160:	2000710c 	.word	0x2000710c

08018164 <_sbrk>:
 8018164:	b580      	push	{r7, lr}
 8018166:	b086      	sub	sp, #24
 8018168:	af00      	add	r7, sp, #0
 801816a:	6078      	str	r0, [r7, #4]
 801816c:	4a14      	ldr	r2, [pc, #80]	; (80181c0 <_sbrk+0x5c>)
 801816e:	4b15      	ldr	r3, [pc, #84]	; (80181c4 <_sbrk+0x60>)
 8018170:	1ad3      	subs	r3, r2, r3
 8018172:	617b      	str	r3, [r7, #20]
 8018174:	697b      	ldr	r3, [r7, #20]
 8018176:	613b      	str	r3, [r7, #16]
 8018178:	4b13      	ldr	r3, [pc, #76]	; (80181c8 <_sbrk+0x64>)
 801817a:	681b      	ldr	r3, [r3, #0]
 801817c:	2b00      	cmp	r3, #0
 801817e:	d102      	bne.n	8018186 <_sbrk+0x22>
 8018180:	4b11      	ldr	r3, [pc, #68]	; (80181c8 <_sbrk+0x64>)
 8018182:	4a12      	ldr	r2, [pc, #72]	; (80181cc <_sbrk+0x68>)
 8018184:	601a      	str	r2, [r3, #0]
 8018186:	4b10      	ldr	r3, [pc, #64]	; (80181c8 <_sbrk+0x64>)
 8018188:	681a      	ldr	r2, [r3, #0]
 801818a:	687b      	ldr	r3, [r7, #4]
 801818c:	4413      	add	r3, r2
 801818e:	693a      	ldr	r2, [r7, #16]
 8018190:	429a      	cmp	r2, r3
 8018192:	d207      	bcs.n	80181a4 <_sbrk+0x40>
 8018194:	f00a fcb6 	bl	8022b04 <__errno>
 8018198:	4603      	mov	r3, r0
 801819a:	220c      	movs	r2, #12
 801819c:	601a      	str	r2, [r3, #0]
 801819e:	f04f 33ff 	mov.w	r3, #4294967295
 80181a2:	e009      	b.n	80181b8 <_sbrk+0x54>
 80181a4:	4b08      	ldr	r3, [pc, #32]	; (80181c8 <_sbrk+0x64>)
 80181a6:	681b      	ldr	r3, [r3, #0]
 80181a8:	60fb      	str	r3, [r7, #12]
 80181aa:	4b07      	ldr	r3, [pc, #28]	; (80181c8 <_sbrk+0x64>)
 80181ac:	681a      	ldr	r2, [r3, #0]
 80181ae:	687b      	ldr	r3, [r7, #4]
 80181b0:	4413      	add	r3, r2
 80181b2:	4a05      	ldr	r2, [pc, #20]	; (80181c8 <_sbrk+0x64>)
 80181b4:	6013      	str	r3, [r2, #0]
 80181b6:	68fb      	ldr	r3, [r7, #12]
 80181b8:	4618      	mov	r0, r3
 80181ba:	3718      	adds	r7, #24
 80181bc:	46bd      	mov	sp, r7
 80181be:	bd80      	pop	{r7, pc}
 80181c0:	20020000 	.word	0x20020000
 80181c4:	00000600 	.word	0x00000600
 80181c8:	200007a8 	.word	0x200007a8
 80181cc:	20007528 	.word	0x20007528

080181d0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80181d0:	b480      	push	{r7}
 80181d2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80181d4:	4b06      	ldr	r3, [pc, #24]	; (80181f0 <SystemInit+0x20>)
 80181d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80181da:	4a05      	ldr	r2, [pc, #20]	; (80181f0 <SystemInit+0x20>)
 80181dc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80181e0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80181e4:	bf00      	nop
 80181e6:	46bd      	mov	sp, r7
 80181e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80181ec:	4770      	bx	lr
 80181ee:	bf00      	nop
 80181f0:	e000ed00 	.word	0xe000ed00

080181f4 <Reset_Handler>:
 80181f4:	f8df d034 	ldr.w	sp, [pc, #52]	; 801822c <LoopFillZerobss+0x12>
 80181f8:	480d      	ldr	r0, [pc, #52]	; (8018230 <LoopFillZerobss+0x16>)
 80181fa:	490e      	ldr	r1, [pc, #56]	; (8018234 <LoopFillZerobss+0x1a>)
 80181fc:	4a0e      	ldr	r2, [pc, #56]	; (8018238 <LoopFillZerobss+0x1e>)
 80181fe:	2300      	movs	r3, #0
 8018200:	e002      	b.n	8018208 <LoopCopyDataInit>

08018202 <CopyDataInit>:
 8018202:	58d4      	ldr	r4, [r2, r3]
 8018204:	50c4      	str	r4, [r0, r3]
 8018206:	3304      	adds	r3, #4

08018208 <LoopCopyDataInit>:
 8018208:	18c4      	adds	r4, r0, r3
 801820a:	428c      	cmp	r4, r1
 801820c:	d3f9      	bcc.n	8018202 <CopyDataInit>
 801820e:	4a0b      	ldr	r2, [pc, #44]	; (801823c <LoopFillZerobss+0x22>)
 8018210:	4c0b      	ldr	r4, [pc, #44]	; (8018240 <LoopFillZerobss+0x26>)
 8018212:	2300      	movs	r3, #0
 8018214:	e001      	b.n	801821a <LoopFillZerobss>

08018216 <FillZerobss>:
 8018216:	6013      	str	r3, [r2, #0]
 8018218:	3204      	adds	r2, #4

0801821a <LoopFillZerobss>:
 801821a:	42a2      	cmp	r2, r4
 801821c:	d3fb      	bcc.n	8018216 <FillZerobss>
 801821e:	f7ff ffd7 	bl	80181d0 <SystemInit>
 8018222:	f00a fc75 	bl	8022b10 <__libc_init_array>
 8018226:	f7fe f85b 	bl	80162e0 <main>
 801822a:	4770      	bx	lr
 801822c:	20020000 	.word	0x20020000
 8018230:	20000000 	.word	0x20000000
 8018234:	20000760 	.word	0x20000760
 8018238:	08022d5c 	.word	0x08022d5c
 801823c:	20000760 	.word	0x20000760
 8018240:	20007524 	.word	0x20007524

08018244 <ADC_IRQHandler>:
 8018244:	e7fe      	b.n	8018244 <ADC_IRQHandler>
	...

08018248 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8018248:	b580      	push	{r7, lr}
 801824a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 801824c:	4b0e      	ldr	r3, [pc, #56]	; (8018288 <HAL_Init+0x40>)
 801824e:	681b      	ldr	r3, [r3, #0]
 8018250:	4a0d      	ldr	r2, [pc, #52]	; (8018288 <HAL_Init+0x40>)
 8018252:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8018256:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8018258:	4b0b      	ldr	r3, [pc, #44]	; (8018288 <HAL_Init+0x40>)
 801825a:	681b      	ldr	r3, [r3, #0]
 801825c:	4a0a      	ldr	r2, [pc, #40]	; (8018288 <HAL_Init+0x40>)
 801825e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8018262:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8018264:	4b08      	ldr	r3, [pc, #32]	; (8018288 <HAL_Init+0x40>)
 8018266:	681b      	ldr	r3, [r3, #0]
 8018268:	4a07      	ldr	r2, [pc, #28]	; (8018288 <HAL_Init+0x40>)
 801826a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 801826e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8018270:	2003      	movs	r0, #3
 8018272:	f000 fbc1 	bl	80189f8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8018276:	2000      	movs	r0, #0
 8018278:	f000 f808 	bl	801828c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 801827c:	f7ff fcc8 	bl	8017c10 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8018280:	2300      	movs	r3, #0
}
 8018282:	4618      	mov	r0, r3
 8018284:	bd80      	pop	{r7, pc}
 8018286:	bf00      	nop
 8018288:	40023c00 	.word	0x40023c00

0801828c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 801828c:	b580      	push	{r7, lr}
 801828e:	b082      	sub	sp, #8
 8018290:	af00      	add	r7, sp, #0
 8018292:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8018294:	4b12      	ldr	r3, [pc, #72]	; (80182e0 <HAL_InitTick+0x54>)
 8018296:	681a      	ldr	r2, [r3, #0]
 8018298:	4b12      	ldr	r3, [pc, #72]	; (80182e4 <HAL_InitTick+0x58>)
 801829a:	781b      	ldrb	r3, [r3, #0]
 801829c:	4619      	mov	r1, r3
 801829e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80182a2:	fbb3 f3f1 	udiv	r3, r3, r1
 80182a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80182aa:	4618      	mov	r0, r3
 80182ac:	f000 fbd9 	bl	8018a62 <HAL_SYSTICK_Config>
 80182b0:	4603      	mov	r3, r0
 80182b2:	2b00      	cmp	r3, #0
 80182b4:	d001      	beq.n	80182ba <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80182b6:	2301      	movs	r3, #1
 80182b8:	e00e      	b.n	80182d8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80182ba:	687b      	ldr	r3, [r7, #4]
 80182bc:	2b0f      	cmp	r3, #15
 80182be:	d80a      	bhi.n	80182d6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80182c0:	2200      	movs	r2, #0
 80182c2:	6879      	ldr	r1, [r7, #4]
 80182c4:	f04f 30ff 	mov.w	r0, #4294967295
 80182c8:	f000 fba1 	bl	8018a0e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80182cc:	4a06      	ldr	r2, [pc, #24]	; (80182e8 <HAL_InitTick+0x5c>)
 80182ce:	687b      	ldr	r3, [r7, #4]
 80182d0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80182d2:	2300      	movs	r3, #0
 80182d4:	e000      	b.n	80182d8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80182d6:	2301      	movs	r3, #1
}
 80182d8:	4618      	mov	r0, r3
 80182da:	3708      	adds	r7, #8
 80182dc:	46bd      	mov	sp, r7
 80182de:	bd80      	pop	{r7, pc}
 80182e0:	20000588 	.word	0x20000588
 80182e4:	20000590 	.word	0x20000590
 80182e8:	2000058c 	.word	0x2000058c

080182ec <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80182ec:	b480      	push	{r7}
 80182ee:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80182f0:	4b06      	ldr	r3, [pc, #24]	; (801830c <HAL_IncTick+0x20>)
 80182f2:	781b      	ldrb	r3, [r3, #0]
 80182f4:	461a      	mov	r2, r3
 80182f6:	4b06      	ldr	r3, [pc, #24]	; (8018310 <HAL_IncTick+0x24>)
 80182f8:	681b      	ldr	r3, [r3, #0]
 80182fa:	4413      	add	r3, r2
 80182fc:	4a04      	ldr	r2, [pc, #16]	; (8018310 <HAL_IncTick+0x24>)
 80182fe:	6013      	str	r3, [r2, #0]
}
 8018300:	bf00      	nop
 8018302:	46bd      	mov	sp, r7
 8018304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018308:	4770      	bx	lr
 801830a:	bf00      	nop
 801830c:	20000590 	.word	0x20000590
 8018310:	20006c18 	.word	0x20006c18

08018314 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8018314:	b480      	push	{r7}
 8018316:	af00      	add	r7, sp, #0
  return uwTick;
 8018318:	4b03      	ldr	r3, [pc, #12]	; (8018328 <HAL_GetTick+0x14>)
 801831a:	681b      	ldr	r3, [r3, #0]
}
 801831c:	4618      	mov	r0, r3
 801831e:	46bd      	mov	sp, r7
 8018320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018324:	4770      	bx	lr
 8018326:	bf00      	nop
 8018328:	20006c18 	.word	0x20006c18

0801832c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 801832c:	b580      	push	{r7, lr}
 801832e:	b084      	sub	sp, #16
 8018330:	af00      	add	r7, sp, #0
 8018332:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8018334:	f7ff ffee 	bl	8018314 <HAL_GetTick>
 8018338:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 801833a:	687b      	ldr	r3, [r7, #4]
 801833c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 801833e:	68fb      	ldr	r3, [r7, #12]
 8018340:	f1b3 3fff 	cmp.w	r3, #4294967295
 8018344:	d005      	beq.n	8018352 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8018346:	4b0a      	ldr	r3, [pc, #40]	; (8018370 <HAL_Delay+0x44>)
 8018348:	781b      	ldrb	r3, [r3, #0]
 801834a:	461a      	mov	r2, r3
 801834c:	68fb      	ldr	r3, [r7, #12]
 801834e:	4413      	add	r3, r2
 8018350:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8018352:	bf00      	nop
 8018354:	f7ff ffde 	bl	8018314 <HAL_GetTick>
 8018358:	4602      	mov	r2, r0
 801835a:	68bb      	ldr	r3, [r7, #8]
 801835c:	1ad3      	subs	r3, r2, r3
 801835e:	68fa      	ldr	r2, [r7, #12]
 8018360:	429a      	cmp	r2, r3
 8018362:	d8f7      	bhi.n	8018354 <HAL_Delay+0x28>
  {
  }
}
 8018364:	bf00      	nop
 8018366:	bf00      	nop
 8018368:	3710      	adds	r7, #16
 801836a:	46bd      	mov	sp, r7
 801836c:	bd80      	pop	{r7, pc}
 801836e:	bf00      	nop
 8018370:	20000590 	.word	0x20000590

08018374 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8018374:	b580      	push	{r7, lr}
 8018376:	b084      	sub	sp, #16
 8018378:	af00      	add	r7, sp, #0
 801837a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 801837c:	2300      	movs	r3, #0
 801837e:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8018380:	687b      	ldr	r3, [r7, #4]
 8018382:	2b00      	cmp	r3, #0
 8018384:	d101      	bne.n	801838a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8018386:	2301      	movs	r3, #1
 8018388:	e033      	b.n	80183f2 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 801838a:	687b      	ldr	r3, [r7, #4]
 801838c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801838e:	2b00      	cmp	r3, #0
 8018390:	d109      	bne.n	80183a6 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8018392:	6878      	ldr	r0, [r7, #4]
 8018394:	f7ff fc64 	bl	8017c60 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8018398:	687b      	ldr	r3, [r7, #4]
 801839a:	2200      	movs	r2, #0
 801839c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 801839e:	687b      	ldr	r3, [r7, #4]
 80183a0:	2200      	movs	r2, #0
 80183a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80183a6:	687b      	ldr	r3, [r7, #4]
 80183a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80183aa:	f003 0310 	and.w	r3, r3, #16
 80183ae:	2b00      	cmp	r3, #0
 80183b0:	d118      	bne.n	80183e4 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80183b2:	687b      	ldr	r3, [r7, #4]
 80183b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80183b6:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80183ba:	f023 0302 	bic.w	r3, r3, #2
 80183be:	f043 0202 	orr.w	r2, r3, #2
 80183c2:	687b      	ldr	r3, [r7, #4]
 80183c4:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80183c6:	6878      	ldr	r0, [r7, #4]
 80183c8:	f000 f94a 	bl	8018660 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80183cc:	687b      	ldr	r3, [r7, #4]
 80183ce:	2200      	movs	r2, #0
 80183d0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80183d2:	687b      	ldr	r3, [r7, #4]
 80183d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80183d6:	f023 0303 	bic.w	r3, r3, #3
 80183da:	f043 0201 	orr.w	r2, r3, #1
 80183de:	687b      	ldr	r3, [r7, #4]
 80183e0:	641a      	str	r2, [r3, #64]	; 0x40
 80183e2:	e001      	b.n	80183e8 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80183e4:	2301      	movs	r3, #1
 80183e6:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80183e8:	687b      	ldr	r3, [r7, #4]
 80183ea:	2200      	movs	r2, #0
 80183ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80183f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80183f2:	4618      	mov	r0, r3
 80183f4:	3710      	adds	r7, #16
 80183f6:	46bd      	mov	sp, r7
 80183f8:	bd80      	pop	{r7, pc}
	...

080183fc <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80183fc:	b480      	push	{r7}
 80183fe:	b085      	sub	sp, #20
 8018400:	af00      	add	r7, sp, #0
 8018402:	6078      	str	r0, [r7, #4]
 8018404:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8018406:	2300      	movs	r3, #0
 8018408:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 801840a:	687b      	ldr	r3, [r7, #4]
 801840c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8018410:	2b01      	cmp	r3, #1
 8018412:	d101      	bne.n	8018418 <HAL_ADC_ConfigChannel+0x1c>
 8018414:	2302      	movs	r3, #2
 8018416:	e113      	b.n	8018640 <HAL_ADC_ConfigChannel+0x244>
 8018418:	687b      	ldr	r3, [r7, #4]
 801841a:	2201      	movs	r2, #1
 801841c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8018420:	683b      	ldr	r3, [r7, #0]
 8018422:	681b      	ldr	r3, [r3, #0]
 8018424:	2b09      	cmp	r3, #9
 8018426:	d925      	bls.n	8018474 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8018428:	687b      	ldr	r3, [r7, #4]
 801842a:	681b      	ldr	r3, [r3, #0]
 801842c:	68d9      	ldr	r1, [r3, #12]
 801842e:	683b      	ldr	r3, [r7, #0]
 8018430:	681b      	ldr	r3, [r3, #0]
 8018432:	b29b      	uxth	r3, r3
 8018434:	461a      	mov	r2, r3
 8018436:	4613      	mov	r3, r2
 8018438:	005b      	lsls	r3, r3, #1
 801843a:	4413      	add	r3, r2
 801843c:	3b1e      	subs	r3, #30
 801843e:	2207      	movs	r2, #7
 8018440:	fa02 f303 	lsl.w	r3, r2, r3
 8018444:	43da      	mvns	r2, r3
 8018446:	687b      	ldr	r3, [r7, #4]
 8018448:	681b      	ldr	r3, [r3, #0]
 801844a:	400a      	ands	r2, r1
 801844c:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 801844e:	687b      	ldr	r3, [r7, #4]
 8018450:	681b      	ldr	r3, [r3, #0]
 8018452:	68d9      	ldr	r1, [r3, #12]
 8018454:	683b      	ldr	r3, [r7, #0]
 8018456:	689a      	ldr	r2, [r3, #8]
 8018458:	683b      	ldr	r3, [r7, #0]
 801845a:	681b      	ldr	r3, [r3, #0]
 801845c:	b29b      	uxth	r3, r3
 801845e:	4618      	mov	r0, r3
 8018460:	4603      	mov	r3, r0
 8018462:	005b      	lsls	r3, r3, #1
 8018464:	4403      	add	r3, r0
 8018466:	3b1e      	subs	r3, #30
 8018468:	409a      	lsls	r2, r3
 801846a:	687b      	ldr	r3, [r7, #4]
 801846c:	681b      	ldr	r3, [r3, #0]
 801846e:	430a      	orrs	r2, r1
 8018470:	60da      	str	r2, [r3, #12]
 8018472:	e022      	b.n	80184ba <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8018474:	687b      	ldr	r3, [r7, #4]
 8018476:	681b      	ldr	r3, [r3, #0]
 8018478:	6919      	ldr	r1, [r3, #16]
 801847a:	683b      	ldr	r3, [r7, #0]
 801847c:	681b      	ldr	r3, [r3, #0]
 801847e:	b29b      	uxth	r3, r3
 8018480:	461a      	mov	r2, r3
 8018482:	4613      	mov	r3, r2
 8018484:	005b      	lsls	r3, r3, #1
 8018486:	4413      	add	r3, r2
 8018488:	2207      	movs	r2, #7
 801848a:	fa02 f303 	lsl.w	r3, r2, r3
 801848e:	43da      	mvns	r2, r3
 8018490:	687b      	ldr	r3, [r7, #4]
 8018492:	681b      	ldr	r3, [r3, #0]
 8018494:	400a      	ands	r2, r1
 8018496:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8018498:	687b      	ldr	r3, [r7, #4]
 801849a:	681b      	ldr	r3, [r3, #0]
 801849c:	6919      	ldr	r1, [r3, #16]
 801849e:	683b      	ldr	r3, [r7, #0]
 80184a0:	689a      	ldr	r2, [r3, #8]
 80184a2:	683b      	ldr	r3, [r7, #0]
 80184a4:	681b      	ldr	r3, [r3, #0]
 80184a6:	b29b      	uxth	r3, r3
 80184a8:	4618      	mov	r0, r3
 80184aa:	4603      	mov	r3, r0
 80184ac:	005b      	lsls	r3, r3, #1
 80184ae:	4403      	add	r3, r0
 80184b0:	409a      	lsls	r2, r3
 80184b2:	687b      	ldr	r3, [r7, #4]
 80184b4:	681b      	ldr	r3, [r3, #0]
 80184b6:	430a      	orrs	r2, r1
 80184b8:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80184ba:	683b      	ldr	r3, [r7, #0]
 80184bc:	685b      	ldr	r3, [r3, #4]
 80184be:	2b06      	cmp	r3, #6
 80184c0:	d824      	bhi.n	801850c <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80184c2:	687b      	ldr	r3, [r7, #4]
 80184c4:	681b      	ldr	r3, [r3, #0]
 80184c6:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80184c8:	683b      	ldr	r3, [r7, #0]
 80184ca:	685a      	ldr	r2, [r3, #4]
 80184cc:	4613      	mov	r3, r2
 80184ce:	009b      	lsls	r3, r3, #2
 80184d0:	4413      	add	r3, r2
 80184d2:	3b05      	subs	r3, #5
 80184d4:	221f      	movs	r2, #31
 80184d6:	fa02 f303 	lsl.w	r3, r2, r3
 80184da:	43da      	mvns	r2, r3
 80184dc:	687b      	ldr	r3, [r7, #4]
 80184de:	681b      	ldr	r3, [r3, #0]
 80184e0:	400a      	ands	r2, r1
 80184e2:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80184e4:	687b      	ldr	r3, [r7, #4]
 80184e6:	681b      	ldr	r3, [r3, #0]
 80184e8:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80184ea:	683b      	ldr	r3, [r7, #0]
 80184ec:	681b      	ldr	r3, [r3, #0]
 80184ee:	b29b      	uxth	r3, r3
 80184f0:	4618      	mov	r0, r3
 80184f2:	683b      	ldr	r3, [r7, #0]
 80184f4:	685a      	ldr	r2, [r3, #4]
 80184f6:	4613      	mov	r3, r2
 80184f8:	009b      	lsls	r3, r3, #2
 80184fa:	4413      	add	r3, r2
 80184fc:	3b05      	subs	r3, #5
 80184fe:	fa00 f203 	lsl.w	r2, r0, r3
 8018502:	687b      	ldr	r3, [r7, #4]
 8018504:	681b      	ldr	r3, [r3, #0]
 8018506:	430a      	orrs	r2, r1
 8018508:	635a      	str	r2, [r3, #52]	; 0x34
 801850a:	e04c      	b.n	80185a6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 801850c:	683b      	ldr	r3, [r7, #0]
 801850e:	685b      	ldr	r3, [r3, #4]
 8018510:	2b0c      	cmp	r3, #12
 8018512:	d824      	bhi.n	801855e <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8018514:	687b      	ldr	r3, [r7, #4]
 8018516:	681b      	ldr	r3, [r3, #0]
 8018518:	6b19      	ldr	r1, [r3, #48]	; 0x30
 801851a:	683b      	ldr	r3, [r7, #0]
 801851c:	685a      	ldr	r2, [r3, #4]
 801851e:	4613      	mov	r3, r2
 8018520:	009b      	lsls	r3, r3, #2
 8018522:	4413      	add	r3, r2
 8018524:	3b23      	subs	r3, #35	; 0x23
 8018526:	221f      	movs	r2, #31
 8018528:	fa02 f303 	lsl.w	r3, r2, r3
 801852c:	43da      	mvns	r2, r3
 801852e:	687b      	ldr	r3, [r7, #4]
 8018530:	681b      	ldr	r3, [r3, #0]
 8018532:	400a      	ands	r2, r1
 8018534:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8018536:	687b      	ldr	r3, [r7, #4]
 8018538:	681b      	ldr	r3, [r3, #0]
 801853a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 801853c:	683b      	ldr	r3, [r7, #0]
 801853e:	681b      	ldr	r3, [r3, #0]
 8018540:	b29b      	uxth	r3, r3
 8018542:	4618      	mov	r0, r3
 8018544:	683b      	ldr	r3, [r7, #0]
 8018546:	685a      	ldr	r2, [r3, #4]
 8018548:	4613      	mov	r3, r2
 801854a:	009b      	lsls	r3, r3, #2
 801854c:	4413      	add	r3, r2
 801854e:	3b23      	subs	r3, #35	; 0x23
 8018550:	fa00 f203 	lsl.w	r2, r0, r3
 8018554:	687b      	ldr	r3, [r7, #4]
 8018556:	681b      	ldr	r3, [r3, #0]
 8018558:	430a      	orrs	r2, r1
 801855a:	631a      	str	r2, [r3, #48]	; 0x30
 801855c:	e023      	b.n	80185a6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 801855e:	687b      	ldr	r3, [r7, #4]
 8018560:	681b      	ldr	r3, [r3, #0]
 8018562:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8018564:	683b      	ldr	r3, [r7, #0]
 8018566:	685a      	ldr	r2, [r3, #4]
 8018568:	4613      	mov	r3, r2
 801856a:	009b      	lsls	r3, r3, #2
 801856c:	4413      	add	r3, r2
 801856e:	3b41      	subs	r3, #65	; 0x41
 8018570:	221f      	movs	r2, #31
 8018572:	fa02 f303 	lsl.w	r3, r2, r3
 8018576:	43da      	mvns	r2, r3
 8018578:	687b      	ldr	r3, [r7, #4]
 801857a:	681b      	ldr	r3, [r3, #0]
 801857c:	400a      	ands	r2, r1
 801857e:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8018580:	687b      	ldr	r3, [r7, #4]
 8018582:	681b      	ldr	r3, [r3, #0]
 8018584:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8018586:	683b      	ldr	r3, [r7, #0]
 8018588:	681b      	ldr	r3, [r3, #0]
 801858a:	b29b      	uxth	r3, r3
 801858c:	4618      	mov	r0, r3
 801858e:	683b      	ldr	r3, [r7, #0]
 8018590:	685a      	ldr	r2, [r3, #4]
 8018592:	4613      	mov	r3, r2
 8018594:	009b      	lsls	r3, r3, #2
 8018596:	4413      	add	r3, r2
 8018598:	3b41      	subs	r3, #65	; 0x41
 801859a:	fa00 f203 	lsl.w	r2, r0, r3
 801859e:	687b      	ldr	r3, [r7, #4]
 80185a0:	681b      	ldr	r3, [r3, #0]
 80185a2:	430a      	orrs	r2, r1
 80185a4:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80185a6:	4b29      	ldr	r3, [pc, #164]	; (801864c <HAL_ADC_ConfigChannel+0x250>)
 80185a8:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80185aa:	687b      	ldr	r3, [r7, #4]
 80185ac:	681b      	ldr	r3, [r3, #0]
 80185ae:	4a28      	ldr	r2, [pc, #160]	; (8018650 <HAL_ADC_ConfigChannel+0x254>)
 80185b0:	4293      	cmp	r3, r2
 80185b2:	d10f      	bne.n	80185d4 <HAL_ADC_ConfigChannel+0x1d8>
 80185b4:	683b      	ldr	r3, [r7, #0]
 80185b6:	681b      	ldr	r3, [r3, #0]
 80185b8:	2b12      	cmp	r3, #18
 80185ba:	d10b      	bne.n	80185d4 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 80185bc:	68fb      	ldr	r3, [r7, #12]
 80185be:	685b      	ldr	r3, [r3, #4]
 80185c0:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 80185c4:	68fb      	ldr	r3, [r7, #12]
 80185c6:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80185c8:	68fb      	ldr	r3, [r7, #12]
 80185ca:	685b      	ldr	r3, [r3, #4]
 80185cc:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80185d0:	68fb      	ldr	r3, [r7, #12]
 80185d2:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80185d4:	687b      	ldr	r3, [r7, #4]
 80185d6:	681b      	ldr	r3, [r3, #0]
 80185d8:	4a1d      	ldr	r2, [pc, #116]	; (8018650 <HAL_ADC_ConfigChannel+0x254>)
 80185da:	4293      	cmp	r3, r2
 80185dc:	d12b      	bne.n	8018636 <HAL_ADC_ConfigChannel+0x23a>
 80185de:	683b      	ldr	r3, [r7, #0]
 80185e0:	681b      	ldr	r3, [r3, #0]
 80185e2:	4a1c      	ldr	r2, [pc, #112]	; (8018654 <HAL_ADC_ConfigChannel+0x258>)
 80185e4:	4293      	cmp	r3, r2
 80185e6:	d003      	beq.n	80185f0 <HAL_ADC_ConfigChannel+0x1f4>
 80185e8:	683b      	ldr	r3, [r7, #0]
 80185ea:	681b      	ldr	r3, [r3, #0]
 80185ec:	2b11      	cmp	r3, #17
 80185ee:	d122      	bne.n	8018636 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 80185f0:	68fb      	ldr	r3, [r7, #12]
 80185f2:	685b      	ldr	r3, [r3, #4]
 80185f4:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80185f8:	68fb      	ldr	r3, [r7, #12]
 80185fa:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80185fc:	68fb      	ldr	r3, [r7, #12]
 80185fe:	685b      	ldr	r3, [r3, #4]
 8018600:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8018604:	68fb      	ldr	r3, [r7, #12]
 8018606:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8018608:	683b      	ldr	r3, [r7, #0]
 801860a:	681b      	ldr	r3, [r3, #0]
 801860c:	4a11      	ldr	r2, [pc, #68]	; (8018654 <HAL_ADC_ConfigChannel+0x258>)
 801860e:	4293      	cmp	r3, r2
 8018610:	d111      	bne.n	8018636 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8018612:	4b11      	ldr	r3, [pc, #68]	; (8018658 <HAL_ADC_ConfigChannel+0x25c>)
 8018614:	681b      	ldr	r3, [r3, #0]
 8018616:	4a11      	ldr	r2, [pc, #68]	; (801865c <HAL_ADC_ConfigChannel+0x260>)
 8018618:	fba2 2303 	umull	r2, r3, r2, r3
 801861c:	0c9a      	lsrs	r2, r3, #18
 801861e:	4613      	mov	r3, r2
 8018620:	009b      	lsls	r3, r3, #2
 8018622:	4413      	add	r3, r2
 8018624:	005b      	lsls	r3, r3, #1
 8018626:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8018628:	e002      	b.n	8018630 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 801862a:	68bb      	ldr	r3, [r7, #8]
 801862c:	3b01      	subs	r3, #1
 801862e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8018630:	68bb      	ldr	r3, [r7, #8]
 8018632:	2b00      	cmp	r3, #0
 8018634:	d1f9      	bne.n	801862a <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8018636:	687b      	ldr	r3, [r7, #4]
 8018638:	2200      	movs	r2, #0
 801863a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 801863e:	2300      	movs	r3, #0
}
 8018640:	4618      	mov	r0, r3
 8018642:	3714      	adds	r7, #20
 8018644:	46bd      	mov	sp, r7
 8018646:	f85d 7b04 	ldr.w	r7, [sp], #4
 801864a:	4770      	bx	lr
 801864c:	40012300 	.word	0x40012300
 8018650:	40012000 	.word	0x40012000
 8018654:	10000012 	.word	0x10000012
 8018658:	20000588 	.word	0x20000588
 801865c:	431bde83 	.word	0x431bde83

08018660 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8018660:	b480      	push	{r7}
 8018662:	b085      	sub	sp, #20
 8018664:	af00      	add	r7, sp, #0
 8018666:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8018668:	4b79      	ldr	r3, [pc, #484]	; (8018850 <ADC_Init+0x1f0>)
 801866a:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 801866c:	68fb      	ldr	r3, [r7, #12]
 801866e:	685b      	ldr	r3, [r3, #4]
 8018670:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8018674:	68fb      	ldr	r3, [r7, #12]
 8018676:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8018678:	68fb      	ldr	r3, [r7, #12]
 801867a:	685a      	ldr	r2, [r3, #4]
 801867c:	687b      	ldr	r3, [r7, #4]
 801867e:	685b      	ldr	r3, [r3, #4]
 8018680:	431a      	orrs	r2, r3
 8018682:	68fb      	ldr	r3, [r7, #12]
 8018684:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8018686:	687b      	ldr	r3, [r7, #4]
 8018688:	681b      	ldr	r3, [r3, #0]
 801868a:	685a      	ldr	r2, [r3, #4]
 801868c:	687b      	ldr	r3, [r7, #4]
 801868e:	681b      	ldr	r3, [r3, #0]
 8018690:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8018694:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8018696:	687b      	ldr	r3, [r7, #4]
 8018698:	681b      	ldr	r3, [r3, #0]
 801869a:	6859      	ldr	r1, [r3, #4]
 801869c:	687b      	ldr	r3, [r7, #4]
 801869e:	691b      	ldr	r3, [r3, #16]
 80186a0:	021a      	lsls	r2, r3, #8
 80186a2:	687b      	ldr	r3, [r7, #4]
 80186a4:	681b      	ldr	r3, [r3, #0]
 80186a6:	430a      	orrs	r2, r1
 80186a8:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80186aa:	687b      	ldr	r3, [r7, #4]
 80186ac:	681b      	ldr	r3, [r3, #0]
 80186ae:	685a      	ldr	r2, [r3, #4]
 80186b0:	687b      	ldr	r3, [r7, #4]
 80186b2:	681b      	ldr	r3, [r3, #0]
 80186b4:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80186b8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80186ba:	687b      	ldr	r3, [r7, #4]
 80186bc:	681b      	ldr	r3, [r3, #0]
 80186be:	6859      	ldr	r1, [r3, #4]
 80186c0:	687b      	ldr	r3, [r7, #4]
 80186c2:	689a      	ldr	r2, [r3, #8]
 80186c4:	687b      	ldr	r3, [r7, #4]
 80186c6:	681b      	ldr	r3, [r3, #0]
 80186c8:	430a      	orrs	r2, r1
 80186ca:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80186cc:	687b      	ldr	r3, [r7, #4]
 80186ce:	681b      	ldr	r3, [r3, #0]
 80186d0:	689a      	ldr	r2, [r3, #8]
 80186d2:	687b      	ldr	r3, [r7, #4]
 80186d4:	681b      	ldr	r3, [r3, #0]
 80186d6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80186da:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80186dc:	687b      	ldr	r3, [r7, #4]
 80186de:	681b      	ldr	r3, [r3, #0]
 80186e0:	6899      	ldr	r1, [r3, #8]
 80186e2:	687b      	ldr	r3, [r7, #4]
 80186e4:	68da      	ldr	r2, [r3, #12]
 80186e6:	687b      	ldr	r3, [r7, #4]
 80186e8:	681b      	ldr	r3, [r3, #0]
 80186ea:	430a      	orrs	r2, r1
 80186ec:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80186ee:	687b      	ldr	r3, [r7, #4]
 80186f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80186f2:	4a58      	ldr	r2, [pc, #352]	; (8018854 <ADC_Init+0x1f4>)
 80186f4:	4293      	cmp	r3, r2
 80186f6:	d022      	beq.n	801873e <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80186f8:	687b      	ldr	r3, [r7, #4]
 80186fa:	681b      	ldr	r3, [r3, #0]
 80186fc:	689a      	ldr	r2, [r3, #8]
 80186fe:	687b      	ldr	r3, [r7, #4]
 8018700:	681b      	ldr	r3, [r3, #0]
 8018702:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8018706:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8018708:	687b      	ldr	r3, [r7, #4]
 801870a:	681b      	ldr	r3, [r3, #0]
 801870c:	6899      	ldr	r1, [r3, #8]
 801870e:	687b      	ldr	r3, [r7, #4]
 8018710:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8018712:	687b      	ldr	r3, [r7, #4]
 8018714:	681b      	ldr	r3, [r3, #0]
 8018716:	430a      	orrs	r2, r1
 8018718:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 801871a:	687b      	ldr	r3, [r7, #4]
 801871c:	681b      	ldr	r3, [r3, #0]
 801871e:	689a      	ldr	r2, [r3, #8]
 8018720:	687b      	ldr	r3, [r7, #4]
 8018722:	681b      	ldr	r3, [r3, #0]
 8018724:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8018728:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 801872a:	687b      	ldr	r3, [r7, #4]
 801872c:	681b      	ldr	r3, [r3, #0]
 801872e:	6899      	ldr	r1, [r3, #8]
 8018730:	687b      	ldr	r3, [r7, #4]
 8018732:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8018734:	687b      	ldr	r3, [r7, #4]
 8018736:	681b      	ldr	r3, [r3, #0]
 8018738:	430a      	orrs	r2, r1
 801873a:	609a      	str	r2, [r3, #8]
 801873c:	e00f      	b.n	801875e <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 801873e:	687b      	ldr	r3, [r7, #4]
 8018740:	681b      	ldr	r3, [r3, #0]
 8018742:	689a      	ldr	r2, [r3, #8]
 8018744:	687b      	ldr	r3, [r7, #4]
 8018746:	681b      	ldr	r3, [r3, #0]
 8018748:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 801874c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 801874e:	687b      	ldr	r3, [r7, #4]
 8018750:	681b      	ldr	r3, [r3, #0]
 8018752:	689a      	ldr	r2, [r3, #8]
 8018754:	687b      	ldr	r3, [r7, #4]
 8018756:	681b      	ldr	r3, [r3, #0]
 8018758:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 801875c:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 801875e:	687b      	ldr	r3, [r7, #4]
 8018760:	681b      	ldr	r3, [r3, #0]
 8018762:	689a      	ldr	r2, [r3, #8]
 8018764:	687b      	ldr	r3, [r7, #4]
 8018766:	681b      	ldr	r3, [r3, #0]
 8018768:	f022 0202 	bic.w	r2, r2, #2
 801876c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 801876e:	687b      	ldr	r3, [r7, #4]
 8018770:	681b      	ldr	r3, [r3, #0]
 8018772:	6899      	ldr	r1, [r3, #8]
 8018774:	687b      	ldr	r3, [r7, #4]
 8018776:	7e1b      	ldrb	r3, [r3, #24]
 8018778:	005a      	lsls	r2, r3, #1
 801877a:	687b      	ldr	r3, [r7, #4]
 801877c:	681b      	ldr	r3, [r3, #0]
 801877e:	430a      	orrs	r2, r1
 8018780:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8018782:	687b      	ldr	r3, [r7, #4]
 8018784:	f893 3020 	ldrb.w	r3, [r3, #32]
 8018788:	2b00      	cmp	r3, #0
 801878a:	d01b      	beq.n	80187c4 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 801878c:	687b      	ldr	r3, [r7, #4]
 801878e:	681b      	ldr	r3, [r3, #0]
 8018790:	685a      	ldr	r2, [r3, #4]
 8018792:	687b      	ldr	r3, [r7, #4]
 8018794:	681b      	ldr	r3, [r3, #0]
 8018796:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 801879a:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 801879c:	687b      	ldr	r3, [r7, #4]
 801879e:	681b      	ldr	r3, [r3, #0]
 80187a0:	685a      	ldr	r2, [r3, #4]
 80187a2:	687b      	ldr	r3, [r7, #4]
 80187a4:	681b      	ldr	r3, [r3, #0]
 80187a6:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80187aa:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80187ac:	687b      	ldr	r3, [r7, #4]
 80187ae:	681b      	ldr	r3, [r3, #0]
 80187b0:	6859      	ldr	r1, [r3, #4]
 80187b2:	687b      	ldr	r3, [r7, #4]
 80187b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80187b6:	3b01      	subs	r3, #1
 80187b8:	035a      	lsls	r2, r3, #13
 80187ba:	687b      	ldr	r3, [r7, #4]
 80187bc:	681b      	ldr	r3, [r3, #0]
 80187be:	430a      	orrs	r2, r1
 80187c0:	605a      	str	r2, [r3, #4]
 80187c2:	e007      	b.n	80187d4 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80187c4:	687b      	ldr	r3, [r7, #4]
 80187c6:	681b      	ldr	r3, [r3, #0]
 80187c8:	685a      	ldr	r2, [r3, #4]
 80187ca:	687b      	ldr	r3, [r7, #4]
 80187cc:	681b      	ldr	r3, [r3, #0]
 80187ce:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80187d2:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80187d4:	687b      	ldr	r3, [r7, #4]
 80187d6:	681b      	ldr	r3, [r3, #0]
 80187d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80187da:	687b      	ldr	r3, [r7, #4]
 80187dc:	681b      	ldr	r3, [r3, #0]
 80187de:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80187e2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80187e4:	687b      	ldr	r3, [r7, #4]
 80187e6:	681b      	ldr	r3, [r3, #0]
 80187e8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80187ea:	687b      	ldr	r3, [r7, #4]
 80187ec:	69db      	ldr	r3, [r3, #28]
 80187ee:	3b01      	subs	r3, #1
 80187f0:	051a      	lsls	r2, r3, #20
 80187f2:	687b      	ldr	r3, [r7, #4]
 80187f4:	681b      	ldr	r3, [r3, #0]
 80187f6:	430a      	orrs	r2, r1
 80187f8:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80187fa:	687b      	ldr	r3, [r7, #4]
 80187fc:	681b      	ldr	r3, [r3, #0]
 80187fe:	689a      	ldr	r2, [r3, #8]
 8018800:	687b      	ldr	r3, [r7, #4]
 8018802:	681b      	ldr	r3, [r3, #0]
 8018804:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8018808:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 801880a:	687b      	ldr	r3, [r7, #4]
 801880c:	681b      	ldr	r3, [r3, #0]
 801880e:	6899      	ldr	r1, [r3, #8]
 8018810:	687b      	ldr	r3, [r7, #4]
 8018812:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8018816:	025a      	lsls	r2, r3, #9
 8018818:	687b      	ldr	r3, [r7, #4]
 801881a:	681b      	ldr	r3, [r3, #0]
 801881c:	430a      	orrs	r2, r1
 801881e:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8018820:	687b      	ldr	r3, [r7, #4]
 8018822:	681b      	ldr	r3, [r3, #0]
 8018824:	689a      	ldr	r2, [r3, #8]
 8018826:	687b      	ldr	r3, [r7, #4]
 8018828:	681b      	ldr	r3, [r3, #0]
 801882a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 801882e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8018830:	687b      	ldr	r3, [r7, #4]
 8018832:	681b      	ldr	r3, [r3, #0]
 8018834:	6899      	ldr	r1, [r3, #8]
 8018836:	687b      	ldr	r3, [r7, #4]
 8018838:	695b      	ldr	r3, [r3, #20]
 801883a:	029a      	lsls	r2, r3, #10
 801883c:	687b      	ldr	r3, [r7, #4]
 801883e:	681b      	ldr	r3, [r3, #0]
 8018840:	430a      	orrs	r2, r1
 8018842:	609a      	str	r2, [r3, #8]
}
 8018844:	bf00      	nop
 8018846:	3714      	adds	r7, #20
 8018848:	46bd      	mov	sp, r7
 801884a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801884e:	4770      	bx	lr
 8018850:	40012300 	.word	0x40012300
 8018854:	0f000001 	.word	0x0f000001

08018858 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8018858:	b480      	push	{r7}
 801885a:	b085      	sub	sp, #20
 801885c:	af00      	add	r7, sp, #0
 801885e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8018860:	687b      	ldr	r3, [r7, #4]
 8018862:	f003 0307 	and.w	r3, r3, #7
 8018866:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8018868:	4b0c      	ldr	r3, [pc, #48]	; (801889c <__NVIC_SetPriorityGrouping+0x44>)
 801886a:	68db      	ldr	r3, [r3, #12]
 801886c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 801886e:	68ba      	ldr	r2, [r7, #8]
 8018870:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8018874:	4013      	ands	r3, r2
 8018876:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8018878:	68fb      	ldr	r3, [r7, #12]
 801887a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 801887c:	68bb      	ldr	r3, [r7, #8]
 801887e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8018880:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8018884:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8018888:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 801888a:	4a04      	ldr	r2, [pc, #16]	; (801889c <__NVIC_SetPriorityGrouping+0x44>)
 801888c:	68bb      	ldr	r3, [r7, #8]
 801888e:	60d3      	str	r3, [r2, #12]
}
 8018890:	bf00      	nop
 8018892:	3714      	adds	r7, #20
 8018894:	46bd      	mov	sp, r7
 8018896:	f85d 7b04 	ldr.w	r7, [sp], #4
 801889a:	4770      	bx	lr
 801889c:	e000ed00 	.word	0xe000ed00

080188a0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80188a0:	b480      	push	{r7}
 80188a2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80188a4:	4b04      	ldr	r3, [pc, #16]	; (80188b8 <__NVIC_GetPriorityGrouping+0x18>)
 80188a6:	68db      	ldr	r3, [r3, #12]
 80188a8:	0a1b      	lsrs	r3, r3, #8
 80188aa:	f003 0307 	and.w	r3, r3, #7
}
 80188ae:	4618      	mov	r0, r3
 80188b0:	46bd      	mov	sp, r7
 80188b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80188b6:	4770      	bx	lr
 80188b8:	e000ed00 	.word	0xe000ed00

080188bc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80188bc:	b480      	push	{r7}
 80188be:	b083      	sub	sp, #12
 80188c0:	af00      	add	r7, sp, #0
 80188c2:	4603      	mov	r3, r0
 80188c4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80188c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80188ca:	2b00      	cmp	r3, #0
 80188cc:	db0b      	blt.n	80188e6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80188ce:	79fb      	ldrb	r3, [r7, #7]
 80188d0:	f003 021f 	and.w	r2, r3, #31
 80188d4:	4907      	ldr	r1, [pc, #28]	; (80188f4 <__NVIC_EnableIRQ+0x38>)
 80188d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80188da:	095b      	lsrs	r3, r3, #5
 80188dc:	2001      	movs	r0, #1
 80188de:	fa00 f202 	lsl.w	r2, r0, r2
 80188e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80188e6:	bf00      	nop
 80188e8:	370c      	adds	r7, #12
 80188ea:	46bd      	mov	sp, r7
 80188ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80188f0:	4770      	bx	lr
 80188f2:	bf00      	nop
 80188f4:	e000e100 	.word	0xe000e100

080188f8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80188f8:	b480      	push	{r7}
 80188fa:	b083      	sub	sp, #12
 80188fc:	af00      	add	r7, sp, #0
 80188fe:	4603      	mov	r3, r0
 8018900:	6039      	str	r1, [r7, #0]
 8018902:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8018904:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8018908:	2b00      	cmp	r3, #0
 801890a:	db0a      	blt.n	8018922 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 801890c:	683b      	ldr	r3, [r7, #0]
 801890e:	b2da      	uxtb	r2, r3
 8018910:	490c      	ldr	r1, [pc, #48]	; (8018944 <__NVIC_SetPriority+0x4c>)
 8018912:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8018916:	0112      	lsls	r2, r2, #4
 8018918:	b2d2      	uxtb	r2, r2
 801891a:	440b      	add	r3, r1
 801891c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8018920:	e00a      	b.n	8018938 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8018922:	683b      	ldr	r3, [r7, #0]
 8018924:	b2da      	uxtb	r2, r3
 8018926:	4908      	ldr	r1, [pc, #32]	; (8018948 <__NVIC_SetPriority+0x50>)
 8018928:	79fb      	ldrb	r3, [r7, #7]
 801892a:	f003 030f 	and.w	r3, r3, #15
 801892e:	3b04      	subs	r3, #4
 8018930:	0112      	lsls	r2, r2, #4
 8018932:	b2d2      	uxtb	r2, r2
 8018934:	440b      	add	r3, r1
 8018936:	761a      	strb	r2, [r3, #24]
}
 8018938:	bf00      	nop
 801893a:	370c      	adds	r7, #12
 801893c:	46bd      	mov	sp, r7
 801893e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018942:	4770      	bx	lr
 8018944:	e000e100 	.word	0xe000e100
 8018948:	e000ed00 	.word	0xe000ed00

0801894c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 801894c:	b480      	push	{r7}
 801894e:	b089      	sub	sp, #36	; 0x24
 8018950:	af00      	add	r7, sp, #0
 8018952:	60f8      	str	r0, [r7, #12]
 8018954:	60b9      	str	r1, [r7, #8]
 8018956:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8018958:	68fb      	ldr	r3, [r7, #12]
 801895a:	f003 0307 	and.w	r3, r3, #7
 801895e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8018960:	69fb      	ldr	r3, [r7, #28]
 8018962:	f1c3 0307 	rsb	r3, r3, #7
 8018966:	2b04      	cmp	r3, #4
 8018968:	bf28      	it	cs
 801896a:	2304      	movcs	r3, #4
 801896c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 801896e:	69fb      	ldr	r3, [r7, #28]
 8018970:	3304      	adds	r3, #4
 8018972:	2b06      	cmp	r3, #6
 8018974:	d902      	bls.n	801897c <NVIC_EncodePriority+0x30>
 8018976:	69fb      	ldr	r3, [r7, #28]
 8018978:	3b03      	subs	r3, #3
 801897a:	e000      	b.n	801897e <NVIC_EncodePriority+0x32>
 801897c:	2300      	movs	r3, #0
 801897e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8018980:	f04f 32ff 	mov.w	r2, #4294967295
 8018984:	69bb      	ldr	r3, [r7, #24]
 8018986:	fa02 f303 	lsl.w	r3, r2, r3
 801898a:	43da      	mvns	r2, r3
 801898c:	68bb      	ldr	r3, [r7, #8]
 801898e:	401a      	ands	r2, r3
 8018990:	697b      	ldr	r3, [r7, #20]
 8018992:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8018994:	f04f 31ff 	mov.w	r1, #4294967295
 8018998:	697b      	ldr	r3, [r7, #20]
 801899a:	fa01 f303 	lsl.w	r3, r1, r3
 801899e:	43d9      	mvns	r1, r3
 80189a0:	687b      	ldr	r3, [r7, #4]
 80189a2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80189a4:	4313      	orrs	r3, r2
         );
}
 80189a6:	4618      	mov	r0, r3
 80189a8:	3724      	adds	r7, #36	; 0x24
 80189aa:	46bd      	mov	sp, r7
 80189ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80189b0:	4770      	bx	lr
	...

080189b4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80189b4:	b580      	push	{r7, lr}
 80189b6:	b082      	sub	sp, #8
 80189b8:	af00      	add	r7, sp, #0
 80189ba:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80189bc:	687b      	ldr	r3, [r7, #4]
 80189be:	3b01      	subs	r3, #1
 80189c0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80189c4:	d301      	bcc.n	80189ca <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80189c6:	2301      	movs	r3, #1
 80189c8:	e00f      	b.n	80189ea <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80189ca:	4a0a      	ldr	r2, [pc, #40]	; (80189f4 <SysTick_Config+0x40>)
 80189cc:	687b      	ldr	r3, [r7, #4]
 80189ce:	3b01      	subs	r3, #1
 80189d0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80189d2:	210f      	movs	r1, #15
 80189d4:	f04f 30ff 	mov.w	r0, #4294967295
 80189d8:	f7ff ff8e 	bl	80188f8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80189dc:	4b05      	ldr	r3, [pc, #20]	; (80189f4 <SysTick_Config+0x40>)
 80189de:	2200      	movs	r2, #0
 80189e0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80189e2:	4b04      	ldr	r3, [pc, #16]	; (80189f4 <SysTick_Config+0x40>)
 80189e4:	2207      	movs	r2, #7
 80189e6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80189e8:	2300      	movs	r3, #0
}
 80189ea:	4618      	mov	r0, r3
 80189ec:	3708      	adds	r7, #8
 80189ee:	46bd      	mov	sp, r7
 80189f0:	bd80      	pop	{r7, pc}
 80189f2:	bf00      	nop
 80189f4:	e000e010 	.word	0xe000e010

080189f8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80189f8:	b580      	push	{r7, lr}
 80189fa:	b082      	sub	sp, #8
 80189fc:	af00      	add	r7, sp, #0
 80189fe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8018a00:	6878      	ldr	r0, [r7, #4]
 8018a02:	f7ff ff29 	bl	8018858 <__NVIC_SetPriorityGrouping>
}
 8018a06:	bf00      	nop
 8018a08:	3708      	adds	r7, #8
 8018a0a:	46bd      	mov	sp, r7
 8018a0c:	bd80      	pop	{r7, pc}

08018a0e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8018a0e:	b580      	push	{r7, lr}
 8018a10:	b086      	sub	sp, #24
 8018a12:	af00      	add	r7, sp, #0
 8018a14:	4603      	mov	r3, r0
 8018a16:	60b9      	str	r1, [r7, #8]
 8018a18:	607a      	str	r2, [r7, #4]
 8018a1a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8018a1c:	2300      	movs	r3, #0
 8018a1e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8018a20:	f7ff ff3e 	bl	80188a0 <__NVIC_GetPriorityGrouping>
 8018a24:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8018a26:	687a      	ldr	r2, [r7, #4]
 8018a28:	68b9      	ldr	r1, [r7, #8]
 8018a2a:	6978      	ldr	r0, [r7, #20]
 8018a2c:	f7ff ff8e 	bl	801894c <NVIC_EncodePriority>
 8018a30:	4602      	mov	r2, r0
 8018a32:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8018a36:	4611      	mov	r1, r2
 8018a38:	4618      	mov	r0, r3
 8018a3a:	f7ff ff5d 	bl	80188f8 <__NVIC_SetPriority>
}
 8018a3e:	bf00      	nop
 8018a40:	3718      	adds	r7, #24
 8018a42:	46bd      	mov	sp, r7
 8018a44:	bd80      	pop	{r7, pc}

08018a46 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8018a46:	b580      	push	{r7, lr}
 8018a48:	b082      	sub	sp, #8
 8018a4a:	af00      	add	r7, sp, #0
 8018a4c:	4603      	mov	r3, r0
 8018a4e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8018a50:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8018a54:	4618      	mov	r0, r3
 8018a56:	f7ff ff31 	bl	80188bc <__NVIC_EnableIRQ>
}
 8018a5a:	bf00      	nop
 8018a5c:	3708      	adds	r7, #8
 8018a5e:	46bd      	mov	sp, r7
 8018a60:	bd80      	pop	{r7, pc}

08018a62 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8018a62:	b580      	push	{r7, lr}
 8018a64:	b082      	sub	sp, #8
 8018a66:	af00      	add	r7, sp, #0
 8018a68:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8018a6a:	6878      	ldr	r0, [r7, #4]
 8018a6c:	f7ff ffa2 	bl	80189b4 <SysTick_Config>
 8018a70:	4603      	mov	r3, r0
}
 8018a72:	4618      	mov	r0, r3
 8018a74:	3708      	adds	r7, #8
 8018a76:	46bd      	mov	sp, r7
 8018a78:	bd80      	pop	{r7, pc}

08018a7a <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8018a7a:	b580      	push	{r7, lr}
 8018a7c:	b082      	sub	sp, #8
 8018a7e:	af00      	add	r7, sp, #0
 8018a80:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 8018a82:	687b      	ldr	r3, [r7, #4]
 8018a84:	2b00      	cmp	r3, #0
 8018a86:	d101      	bne.n	8018a8c <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8018a88:	2301      	movs	r3, #1
 8018a8a:	e014      	b.n	8018ab6 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8018a8c:	687b      	ldr	r3, [r7, #4]
 8018a8e:	791b      	ldrb	r3, [r3, #4]
 8018a90:	b2db      	uxtb	r3, r3
 8018a92:	2b00      	cmp	r3, #0
 8018a94:	d105      	bne.n	8018aa2 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8018a96:	687b      	ldr	r3, [r7, #4]
 8018a98:	2200      	movs	r2, #0
 8018a9a:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8018a9c:	6878      	ldr	r0, [r7, #4]
 8018a9e:	f7ff f985 	bl	8017dac <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8018aa2:	687b      	ldr	r3, [r7, #4]
 8018aa4:	2202      	movs	r2, #2
 8018aa6:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8018aa8:	687b      	ldr	r3, [r7, #4]
 8018aaa:	2200      	movs	r2, #0
 8018aac:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8018aae:	687b      	ldr	r3, [r7, #4]
 8018ab0:	2201      	movs	r2, #1
 8018ab2:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8018ab4:	2300      	movs	r3, #0
}
 8018ab6:	4618      	mov	r0, r3
 8018ab8:	3708      	adds	r7, #8
 8018aba:	46bd      	mov	sp, r7
 8018abc:	bd80      	pop	{r7, pc}

08018abe <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 8018abe:	b480      	push	{r7}
 8018ac0:	b087      	sub	sp, #28
 8018ac2:	af00      	add	r7, sp, #0
 8018ac4:	60f8      	str	r0, [r7, #12]
 8018ac6:	60b9      	str	r1, [r7, #8]
 8018ac8:	607a      	str	r2, [r7, #4]
 8018aca:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0UL;
 8018acc:	2300      	movs	r3, #0
 8018ace:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));

  tmp = (uint32_t)hdac->Instance;
 8018ad0:	68fb      	ldr	r3, [r7, #12]
 8018ad2:	681b      	ldr	r3, [r3, #0]
 8018ad4:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 8018ad6:	68bb      	ldr	r3, [r7, #8]
 8018ad8:	2b00      	cmp	r3, #0
 8018ada:	d105      	bne.n	8018ae8 <HAL_DAC_SetValue+0x2a>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 8018adc:	697a      	ldr	r2, [r7, #20]
 8018ade:	687b      	ldr	r3, [r7, #4]
 8018ae0:	4413      	add	r3, r2
 8018ae2:	3308      	adds	r3, #8
 8018ae4:	617b      	str	r3, [r7, #20]
 8018ae6:	e004      	b.n	8018af2 <HAL_DAC_SetValue+0x34>
  }
#if defined(DAC_CHANNEL2_SUPPORT)
  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 8018ae8:	697a      	ldr	r2, [r7, #20]
 8018aea:	687b      	ldr	r3, [r7, #4]
 8018aec:	4413      	add	r3, r2
 8018aee:	3314      	adds	r3, #20
 8018af0:	617b      	str	r3, [r7, #20]
  }
#endif /* DAC_CHANNEL2_SUPPORT */

  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 8018af2:	697b      	ldr	r3, [r7, #20]
 8018af4:	461a      	mov	r2, r3
 8018af6:	683b      	ldr	r3, [r7, #0]
 8018af8:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 8018afa:	2300      	movs	r3, #0
}
 8018afc:	4618      	mov	r0, r3
 8018afe:	371c      	adds	r7, #28
 8018b00:	46bd      	mov	sp, r7
 8018b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018b06:	4770      	bx	lr

08018b08 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8018b08:	b480      	push	{r7}
 8018b0a:	b087      	sub	sp, #28
 8018b0c:	af00      	add	r7, sp, #0
 8018b0e:	60f8      	str	r0, [r7, #12]
 8018b10:	60b9      	str	r1, [r7, #8]
 8018b12:	607a      	str	r2, [r7, #4]
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8018b14:	68fb      	ldr	r3, [r7, #12]
 8018b16:	795b      	ldrb	r3, [r3, #5]
 8018b18:	2b01      	cmp	r3, #1
 8018b1a:	d101      	bne.n	8018b20 <HAL_DAC_ConfigChannel+0x18>
 8018b1c:	2302      	movs	r3, #2
 8018b1e:	e03c      	b.n	8018b9a <HAL_DAC_ConfigChannel+0x92>
 8018b20:	68fb      	ldr	r3, [r7, #12]
 8018b22:	2201      	movs	r2, #1
 8018b24:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8018b26:	68fb      	ldr	r3, [r7, #12]
 8018b28:	2202      	movs	r2, #2
 8018b2a:	711a      	strb	r2, [r3, #4]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8018b2c:	68fb      	ldr	r3, [r7, #12]
 8018b2e:	681b      	ldr	r3, [r3, #0]
 8018b30:	681b      	ldr	r3, [r3, #0]
 8018b32:	617b      	str	r3, [r7, #20]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << (Channel & 0x10UL));
 8018b34:	687b      	ldr	r3, [r7, #4]
 8018b36:	f003 0310 	and.w	r3, r3, #16
 8018b3a:	f640 72fe 	movw	r2, #4094	; 0xffe
 8018b3e:	fa02 f303 	lsl.w	r3, r2, r3
 8018b42:	43db      	mvns	r3, r3
 8018b44:	697a      	ldr	r2, [r7, #20]
 8018b46:	4013      	ands	r3, r2
 8018b48:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 8018b4a:	68bb      	ldr	r3, [r7, #8]
 8018b4c:	681a      	ldr	r2, [r3, #0]
 8018b4e:	68bb      	ldr	r3, [r7, #8]
 8018b50:	685b      	ldr	r3, [r3, #4]
 8018b52:	4313      	orrs	r3, r2
 8018b54:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8018b56:	687b      	ldr	r3, [r7, #4]
 8018b58:	f003 0310 	and.w	r3, r3, #16
 8018b5c:	693a      	ldr	r2, [r7, #16]
 8018b5e:	fa02 f303 	lsl.w	r3, r2, r3
 8018b62:	697a      	ldr	r2, [r7, #20]
 8018b64:	4313      	orrs	r3, r2
 8018b66:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8018b68:	68fb      	ldr	r3, [r7, #12]
 8018b6a:	681b      	ldr	r3, [r3, #0]
 8018b6c:	697a      	ldr	r2, [r7, #20]
 8018b6e:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8018b70:	68fb      	ldr	r3, [r7, #12]
 8018b72:	681b      	ldr	r3, [r3, #0]
 8018b74:	6819      	ldr	r1, [r3, #0]
 8018b76:	687b      	ldr	r3, [r7, #4]
 8018b78:	f003 0310 	and.w	r3, r3, #16
 8018b7c:	22c0      	movs	r2, #192	; 0xc0
 8018b7e:	fa02 f303 	lsl.w	r3, r2, r3
 8018b82:	43da      	mvns	r2, r3
 8018b84:	68fb      	ldr	r3, [r7, #12]
 8018b86:	681b      	ldr	r3, [r3, #0]
 8018b88:	400a      	ands	r2, r1
 8018b8a:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8018b8c:	68fb      	ldr	r3, [r7, #12]
 8018b8e:	2201      	movs	r2, #1
 8018b90:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8018b92:	68fb      	ldr	r3, [r7, #12]
 8018b94:	2200      	movs	r2, #0
 8018b96:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8018b98:	2300      	movs	r3, #0
}
 8018b9a:	4618      	mov	r0, r3
 8018b9c:	371c      	adds	r7, #28
 8018b9e:	46bd      	mov	sp, r7
 8018ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018ba4:	4770      	bx	lr
	...

08018ba8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8018ba8:	b580      	push	{r7, lr}
 8018baa:	b086      	sub	sp, #24
 8018bac:	af00      	add	r7, sp, #0
 8018bae:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8018bb0:	2300      	movs	r3, #0
 8018bb2:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8018bb4:	f7ff fbae 	bl	8018314 <HAL_GetTick>
 8018bb8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8018bba:	687b      	ldr	r3, [r7, #4]
 8018bbc:	2b00      	cmp	r3, #0
 8018bbe:	d101      	bne.n	8018bc4 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8018bc0:	2301      	movs	r3, #1
 8018bc2:	e099      	b.n	8018cf8 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8018bc4:	687b      	ldr	r3, [r7, #4]
 8018bc6:	2202      	movs	r2, #2
 8018bc8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8018bcc:	687b      	ldr	r3, [r7, #4]
 8018bce:	2200      	movs	r2, #0
 8018bd0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8018bd4:	687b      	ldr	r3, [r7, #4]
 8018bd6:	681b      	ldr	r3, [r3, #0]
 8018bd8:	681a      	ldr	r2, [r3, #0]
 8018bda:	687b      	ldr	r3, [r7, #4]
 8018bdc:	681b      	ldr	r3, [r3, #0]
 8018bde:	f022 0201 	bic.w	r2, r2, #1
 8018be2:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8018be4:	e00f      	b.n	8018c06 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8018be6:	f7ff fb95 	bl	8018314 <HAL_GetTick>
 8018bea:	4602      	mov	r2, r0
 8018bec:	693b      	ldr	r3, [r7, #16]
 8018bee:	1ad3      	subs	r3, r2, r3
 8018bf0:	2b05      	cmp	r3, #5
 8018bf2:	d908      	bls.n	8018c06 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8018bf4:	687b      	ldr	r3, [r7, #4]
 8018bf6:	2220      	movs	r2, #32
 8018bf8:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8018bfa:	687b      	ldr	r3, [r7, #4]
 8018bfc:	2203      	movs	r2, #3
 8018bfe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8018c02:	2303      	movs	r3, #3
 8018c04:	e078      	b.n	8018cf8 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8018c06:	687b      	ldr	r3, [r7, #4]
 8018c08:	681b      	ldr	r3, [r3, #0]
 8018c0a:	681b      	ldr	r3, [r3, #0]
 8018c0c:	f003 0301 	and.w	r3, r3, #1
 8018c10:	2b00      	cmp	r3, #0
 8018c12:	d1e8      	bne.n	8018be6 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8018c14:	687b      	ldr	r3, [r7, #4]
 8018c16:	681b      	ldr	r3, [r3, #0]
 8018c18:	681b      	ldr	r3, [r3, #0]
 8018c1a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8018c1c:	697a      	ldr	r2, [r7, #20]
 8018c1e:	4b38      	ldr	r3, [pc, #224]	; (8018d00 <HAL_DMA_Init+0x158>)
 8018c20:	4013      	ands	r3, r2
 8018c22:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8018c24:	687b      	ldr	r3, [r7, #4]
 8018c26:	685a      	ldr	r2, [r3, #4]
 8018c28:	687b      	ldr	r3, [r7, #4]
 8018c2a:	689b      	ldr	r3, [r3, #8]
 8018c2c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8018c2e:	687b      	ldr	r3, [r7, #4]
 8018c30:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8018c32:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8018c34:	687b      	ldr	r3, [r7, #4]
 8018c36:	691b      	ldr	r3, [r3, #16]
 8018c38:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8018c3a:	687b      	ldr	r3, [r7, #4]
 8018c3c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8018c3e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8018c40:	687b      	ldr	r3, [r7, #4]
 8018c42:	699b      	ldr	r3, [r3, #24]
 8018c44:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8018c46:	687b      	ldr	r3, [r7, #4]
 8018c48:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8018c4a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8018c4c:	687b      	ldr	r3, [r7, #4]
 8018c4e:	6a1b      	ldr	r3, [r3, #32]
 8018c50:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8018c52:	697a      	ldr	r2, [r7, #20]
 8018c54:	4313      	orrs	r3, r2
 8018c56:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8018c58:	687b      	ldr	r3, [r7, #4]
 8018c5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018c5c:	2b04      	cmp	r3, #4
 8018c5e:	d107      	bne.n	8018c70 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8018c60:	687b      	ldr	r3, [r7, #4]
 8018c62:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8018c64:	687b      	ldr	r3, [r7, #4]
 8018c66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8018c68:	4313      	orrs	r3, r2
 8018c6a:	697a      	ldr	r2, [r7, #20]
 8018c6c:	4313      	orrs	r3, r2
 8018c6e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8018c70:	687b      	ldr	r3, [r7, #4]
 8018c72:	681b      	ldr	r3, [r3, #0]
 8018c74:	697a      	ldr	r2, [r7, #20]
 8018c76:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8018c78:	687b      	ldr	r3, [r7, #4]
 8018c7a:	681b      	ldr	r3, [r3, #0]
 8018c7c:	695b      	ldr	r3, [r3, #20]
 8018c7e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8018c80:	697b      	ldr	r3, [r7, #20]
 8018c82:	f023 0307 	bic.w	r3, r3, #7
 8018c86:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8018c88:	687b      	ldr	r3, [r7, #4]
 8018c8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018c8c:	697a      	ldr	r2, [r7, #20]
 8018c8e:	4313      	orrs	r3, r2
 8018c90:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8018c92:	687b      	ldr	r3, [r7, #4]
 8018c94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018c96:	2b04      	cmp	r3, #4
 8018c98:	d117      	bne.n	8018cca <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8018c9a:	687b      	ldr	r3, [r7, #4]
 8018c9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8018c9e:	697a      	ldr	r2, [r7, #20]
 8018ca0:	4313      	orrs	r3, r2
 8018ca2:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8018ca4:	687b      	ldr	r3, [r7, #4]
 8018ca6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018ca8:	2b00      	cmp	r3, #0
 8018caa:	d00e      	beq.n	8018cca <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8018cac:	6878      	ldr	r0, [r7, #4]
 8018cae:	f000 fa0b 	bl	80190c8 <DMA_CheckFifoParam>
 8018cb2:	4603      	mov	r3, r0
 8018cb4:	2b00      	cmp	r3, #0
 8018cb6:	d008      	beq.n	8018cca <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8018cb8:	687b      	ldr	r3, [r7, #4]
 8018cba:	2240      	movs	r2, #64	; 0x40
 8018cbc:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8018cbe:	687b      	ldr	r3, [r7, #4]
 8018cc0:	2201      	movs	r2, #1
 8018cc2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8018cc6:	2301      	movs	r3, #1
 8018cc8:	e016      	b.n	8018cf8 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8018cca:	687b      	ldr	r3, [r7, #4]
 8018ccc:	681b      	ldr	r3, [r3, #0]
 8018cce:	697a      	ldr	r2, [r7, #20]
 8018cd0:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8018cd2:	6878      	ldr	r0, [r7, #4]
 8018cd4:	f000 f9c2 	bl	801905c <DMA_CalcBaseAndBitshift>
 8018cd8:	4603      	mov	r3, r0
 8018cda:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8018cdc:	687b      	ldr	r3, [r7, #4]
 8018cde:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8018ce0:	223f      	movs	r2, #63	; 0x3f
 8018ce2:	409a      	lsls	r2, r3
 8018ce4:	68fb      	ldr	r3, [r7, #12]
 8018ce6:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8018ce8:	687b      	ldr	r3, [r7, #4]
 8018cea:	2200      	movs	r2, #0
 8018cec:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8018cee:	687b      	ldr	r3, [r7, #4]
 8018cf0:	2201      	movs	r2, #1
 8018cf2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8018cf6:	2300      	movs	r3, #0
}
 8018cf8:	4618      	mov	r0, r3
 8018cfa:	3718      	adds	r7, #24
 8018cfc:	46bd      	mov	sp, r7
 8018cfe:	bd80      	pop	{r7, pc}
 8018d00:	f010803f 	.word	0xf010803f

08018d04 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8018d04:	b480      	push	{r7}
 8018d06:	b083      	sub	sp, #12
 8018d08:	af00      	add	r7, sp, #0
 8018d0a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8018d0c:	687b      	ldr	r3, [r7, #4]
 8018d0e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8018d12:	b2db      	uxtb	r3, r3
 8018d14:	2b02      	cmp	r3, #2
 8018d16:	d004      	beq.n	8018d22 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8018d18:	687b      	ldr	r3, [r7, #4]
 8018d1a:	2280      	movs	r2, #128	; 0x80
 8018d1c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8018d1e:	2301      	movs	r3, #1
 8018d20:	e00c      	b.n	8018d3c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8018d22:	687b      	ldr	r3, [r7, #4]
 8018d24:	2205      	movs	r2, #5
 8018d26:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8018d2a:	687b      	ldr	r3, [r7, #4]
 8018d2c:	681b      	ldr	r3, [r3, #0]
 8018d2e:	681a      	ldr	r2, [r3, #0]
 8018d30:	687b      	ldr	r3, [r7, #4]
 8018d32:	681b      	ldr	r3, [r3, #0]
 8018d34:	f022 0201 	bic.w	r2, r2, #1
 8018d38:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8018d3a:	2300      	movs	r3, #0
}
 8018d3c:	4618      	mov	r0, r3
 8018d3e:	370c      	adds	r7, #12
 8018d40:	46bd      	mov	sp, r7
 8018d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018d46:	4770      	bx	lr

08018d48 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8018d48:	b580      	push	{r7, lr}
 8018d4a:	b086      	sub	sp, #24
 8018d4c:	af00      	add	r7, sp, #0
 8018d4e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8018d50:	2300      	movs	r3, #0
 8018d52:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8018d54:	4b92      	ldr	r3, [pc, #584]	; (8018fa0 <HAL_DMA_IRQHandler+0x258>)
 8018d56:	681b      	ldr	r3, [r3, #0]
 8018d58:	4a92      	ldr	r2, [pc, #584]	; (8018fa4 <HAL_DMA_IRQHandler+0x25c>)
 8018d5a:	fba2 2303 	umull	r2, r3, r2, r3
 8018d5e:	0a9b      	lsrs	r3, r3, #10
 8018d60:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8018d62:	687b      	ldr	r3, [r7, #4]
 8018d64:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8018d66:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8018d68:	693b      	ldr	r3, [r7, #16]
 8018d6a:	681b      	ldr	r3, [r3, #0]
 8018d6c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8018d6e:	687b      	ldr	r3, [r7, #4]
 8018d70:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8018d72:	2208      	movs	r2, #8
 8018d74:	409a      	lsls	r2, r3
 8018d76:	68fb      	ldr	r3, [r7, #12]
 8018d78:	4013      	ands	r3, r2
 8018d7a:	2b00      	cmp	r3, #0
 8018d7c:	d01a      	beq.n	8018db4 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8018d7e:	687b      	ldr	r3, [r7, #4]
 8018d80:	681b      	ldr	r3, [r3, #0]
 8018d82:	681b      	ldr	r3, [r3, #0]
 8018d84:	f003 0304 	and.w	r3, r3, #4
 8018d88:	2b00      	cmp	r3, #0
 8018d8a:	d013      	beq.n	8018db4 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8018d8c:	687b      	ldr	r3, [r7, #4]
 8018d8e:	681b      	ldr	r3, [r3, #0]
 8018d90:	681a      	ldr	r2, [r3, #0]
 8018d92:	687b      	ldr	r3, [r7, #4]
 8018d94:	681b      	ldr	r3, [r3, #0]
 8018d96:	f022 0204 	bic.w	r2, r2, #4
 8018d9a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8018d9c:	687b      	ldr	r3, [r7, #4]
 8018d9e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8018da0:	2208      	movs	r2, #8
 8018da2:	409a      	lsls	r2, r3
 8018da4:	693b      	ldr	r3, [r7, #16]
 8018da6:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8018da8:	687b      	ldr	r3, [r7, #4]
 8018daa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8018dac:	f043 0201 	orr.w	r2, r3, #1
 8018db0:	687b      	ldr	r3, [r7, #4]
 8018db2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8018db4:	687b      	ldr	r3, [r7, #4]
 8018db6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8018db8:	2201      	movs	r2, #1
 8018dba:	409a      	lsls	r2, r3
 8018dbc:	68fb      	ldr	r3, [r7, #12]
 8018dbe:	4013      	ands	r3, r2
 8018dc0:	2b00      	cmp	r3, #0
 8018dc2:	d012      	beq.n	8018dea <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8018dc4:	687b      	ldr	r3, [r7, #4]
 8018dc6:	681b      	ldr	r3, [r3, #0]
 8018dc8:	695b      	ldr	r3, [r3, #20]
 8018dca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8018dce:	2b00      	cmp	r3, #0
 8018dd0:	d00b      	beq.n	8018dea <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8018dd2:	687b      	ldr	r3, [r7, #4]
 8018dd4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8018dd6:	2201      	movs	r2, #1
 8018dd8:	409a      	lsls	r2, r3
 8018dda:	693b      	ldr	r3, [r7, #16]
 8018ddc:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8018dde:	687b      	ldr	r3, [r7, #4]
 8018de0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8018de2:	f043 0202 	orr.w	r2, r3, #2
 8018de6:	687b      	ldr	r3, [r7, #4]
 8018de8:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8018dea:	687b      	ldr	r3, [r7, #4]
 8018dec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8018dee:	2204      	movs	r2, #4
 8018df0:	409a      	lsls	r2, r3
 8018df2:	68fb      	ldr	r3, [r7, #12]
 8018df4:	4013      	ands	r3, r2
 8018df6:	2b00      	cmp	r3, #0
 8018df8:	d012      	beq.n	8018e20 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8018dfa:	687b      	ldr	r3, [r7, #4]
 8018dfc:	681b      	ldr	r3, [r3, #0]
 8018dfe:	681b      	ldr	r3, [r3, #0]
 8018e00:	f003 0302 	and.w	r3, r3, #2
 8018e04:	2b00      	cmp	r3, #0
 8018e06:	d00b      	beq.n	8018e20 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8018e08:	687b      	ldr	r3, [r7, #4]
 8018e0a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8018e0c:	2204      	movs	r2, #4
 8018e0e:	409a      	lsls	r2, r3
 8018e10:	693b      	ldr	r3, [r7, #16]
 8018e12:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8018e14:	687b      	ldr	r3, [r7, #4]
 8018e16:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8018e18:	f043 0204 	orr.w	r2, r3, #4
 8018e1c:	687b      	ldr	r3, [r7, #4]
 8018e1e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8018e20:	687b      	ldr	r3, [r7, #4]
 8018e22:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8018e24:	2210      	movs	r2, #16
 8018e26:	409a      	lsls	r2, r3
 8018e28:	68fb      	ldr	r3, [r7, #12]
 8018e2a:	4013      	ands	r3, r2
 8018e2c:	2b00      	cmp	r3, #0
 8018e2e:	d043      	beq.n	8018eb8 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8018e30:	687b      	ldr	r3, [r7, #4]
 8018e32:	681b      	ldr	r3, [r3, #0]
 8018e34:	681b      	ldr	r3, [r3, #0]
 8018e36:	f003 0308 	and.w	r3, r3, #8
 8018e3a:	2b00      	cmp	r3, #0
 8018e3c:	d03c      	beq.n	8018eb8 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8018e3e:	687b      	ldr	r3, [r7, #4]
 8018e40:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8018e42:	2210      	movs	r2, #16
 8018e44:	409a      	lsls	r2, r3
 8018e46:	693b      	ldr	r3, [r7, #16]
 8018e48:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8018e4a:	687b      	ldr	r3, [r7, #4]
 8018e4c:	681b      	ldr	r3, [r3, #0]
 8018e4e:	681b      	ldr	r3, [r3, #0]
 8018e50:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8018e54:	2b00      	cmp	r3, #0
 8018e56:	d018      	beq.n	8018e8a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8018e58:	687b      	ldr	r3, [r7, #4]
 8018e5a:	681b      	ldr	r3, [r3, #0]
 8018e5c:	681b      	ldr	r3, [r3, #0]
 8018e5e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8018e62:	2b00      	cmp	r3, #0
 8018e64:	d108      	bne.n	8018e78 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8018e66:	687b      	ldr	r3, [r7, #4]
 8018e68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8018e6a:	2b00      	cmp	r3, #0
 8018e6c:	d024      	beq.n	8018eb8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8018e6e:	687b      	ldr	r3, [r7, #4]
 8018e70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8018e72:	6878      	ldr	r0, [r7, #4]
 8018e74:	4798      	blx	r3
 8018e76:	e01f      	b.n	8018eb8 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8018e78:	687b      	ldr	r3, [r7, #4]
 8018e7a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8018e7c:	2b00      	cmp	r3, #0
 8018e7e:	d01b      	beq.n	8018eb8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8018e80:	687b      	ldr	r3, [r7, #4]
 8018e82:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8018e84:	6878      	ldr	r0, [r7, #4]
 8018e86:	4798      	blx	r3
 8018e88:	e016      	b.n	8018eb8 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8018e8a:	687b      	ldr	r3, [r7, #4]
 8018e8c:	681b      	ldr	r3, [r3, #0]
 8018e8e:	681b      	ldr	r3, [r3, #0]
 8018e90:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8018e94:	2b00      	cmp	r3, #0
 8018e96:	d107      	bne.n	8018ea8 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8018e98:	687b      	ldr	r3, [r7, #4]
 8018e9a:	681b      	ldr	r3, [r3, #0]
 8018e9c:	681a      	ldr	r2, [r3, #0]
 8018e9e:	687b      	ldr	r3, [r7, #4]
 8018ea0:	681b      	ldr	r3, [r3, #0]
 8018ea2:	f022 0208 	bic.w	r2, r2, #8
 8018ea6:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8018ea8:	687b      	ldr	r3, [r7, #4]
 8018eaa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8018eac:	2b00      	cmp	r3, #0
 8018eae:	d003      	beq.n	8018eb8 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8018eb0:	687b      	ldr	r3, [r7, #4]
 8018eb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8018eb4:	6878      	ldr	r0, [r7, #4]
 8018eb6:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8018eb8:	687b      	ldr	r3, [r7, #4]
 8018eba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8018ebc:	2220      	movs	r2, #32
 8018ebe:	409a      	lsls	r2, r3
 8018ec0:	68fb      	ldr	r3, [r7, #12]
 8018ec2:	4013      	ands	r3, r2
 8018ec4:	2b00      	cmp	r3, #0
 8018ec6:	f000 808e 	beq.w	8018fe6 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8018eca:	687b      	ldr	r3, [r7, #4]
 8018ecc:	681b      	ldr	r3, [r3, #0]
 8018ece:	681b      	ldr	r3, [r3, #0]
 8018ed0:	f003 0310 	and.w	r3, r3, #16
 8018ed4:	2b00      	cmp	r3, #0
 8018ed6:	f000 8086 	beq.w	8018fe6 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8018eda:	687b      	ldr	r3, [r7, #4]
 8018edc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8018ede:	2220      	movs	r2, #32
 8018ee0:	409a      	lsls	r2, r3
 8018ee2:	693b      	ldr	r3, [r7, #16]
 8018ee4:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8018ee6:	687b      	ldr	r3, [r7, #4]
 8018ee8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8018eec:	b2db      	uxtb	r3, r3
 8018eee:	2b05      	cmp	r3, #5
 8018ef0:	d136      	bne.n	8018f60 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8018ef2:	687b      	ldr	r3, [r7, #4]
 8018ef4:	681b      	ldr	r3, [r3, #0]
 8018ef6:	681a      	ldr	r2, [r3, #0]
 8018ef8:	687b      	ldr	r3, [r7, #4]
 8018efa:	681b      	ldr	r3, [r3, #0]
 8018efc:	f022 0216 	bic.w	r2, r2, #22
 8018f00:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8018f02:	687b      	ldr	r3, [r7, #4]
 8018f04:	681b      	ldr	r3, [r3, #0]
 8018f06:	695a      	ldr	r2, [r3, #20]
 8018f08:	687b      	ldr	r3, [r7, #4]
 8018f0a:	681b      	ldr	r3, [r3, #0]
 8018f0c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8018f10:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8018f12:	687b      	ldr	r3, [r7, #4]
 8018f14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8018f16:	2b00      	cmp	r3, #0
 8018f18:	d103      	bne.n	8018f22 <HAL_DMA_IRQHandler+0x1da>
 8018f1a:	687b      	ldr	r3, [r7, #4]
 8018f1c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8018f1e:	2b00      	cmp	r3, #0
 8018f20:	d007      	beq.n	8018f32 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8018f22:	687b      	ldr	r3, [r7, #4]
 8018f24:	681b      	ldr	r3, [r3, #0]
 8018f26:	681a      	ldr	r2, [r3, #0]
 8018f28:	687b      	ldr	r3, [r7, #4]
 8018f2a:	681b      	ldr	r3, [r3, #0]
 8018f2c:	f022 0208 	bic.w	r2, r2, #8
 8018f30:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8018f32:	687b      	ldr	r3, [r7, #4]
 8018f34:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8018f36:	223f      	movs	r2, #63	; 0x3f
 8018f38:	409a      	lsls	r2, r3
 8018f3a:	693b      	ldr	r3, [r7, #16]
 8018f3c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8018f3e:	687b      	ldr	r3, [r7, #4]
 8018f40:	2201      	movs	r2, #1
 8018f42:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8018f46:	687b      	ldr	r3, [r7, #4]
 8018f48:	2200      	movs	r2, #0
 8018f4a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8018f4e:	687b      	ldr	r3, [r7, #4]
 8018f50:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8018f52:	2b00      	cmp	r3, #0
 8018f54:	d07d      	beq.n	8019052 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8018f56:	687b      	ldr	r3, [r7, #4]
 8018f58:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8018f5a:	6878      	ldr	r0, [r7, #4]
 8018f5c:	4798      	blx	r3
        }
        return;
 8018f5e:	e078      	b.n	8019052 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8018f60:	687b      	ldr	r3, [r7, #4]
 8018f62:	681b      	ldr	r3, [r3, #0]
 8018f64:	681b      	ldr	r3, [r3, #0]
 8018f66:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8018f6a:	2b00      	cmp	r3, #0
 8018f6c:	d01c      	beq.n	8018fa8 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8018f6e:	687b      	ldr	r3, [r7, #4]
 8018f70:	681b      	ldr	r3, [r3, #0]
 8018f72:	681b      	ldr	r3, [r3, #0]
 8018f74:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8018f78:	2b00      	cmp	r3, #0
 8018f7a:	d108      	bne.n	8018f8e <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8018f7c:	687b      	ldr	r3, [r7, #4]
 8018f7e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8018f80:	2b00      	cmp	r3, #0
 8018f82:	d030      	beq.n	8018fe6 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8018f84:	687b      	ldr	r3, [r7, #4]
 8018f86:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8018f88:	6878      	ldr	r0, [r7, #4]
 8018f8a:	4798      	blx	r3
 8018f8c:	e02b      	b.n	8018fe6 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8018f8e:	687b      	ldr	r3, [r7, #4]
 8018f90:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8018f92:	2b00      	cmp	r3, #0
 8018f94:	d027      	beq.n	8018fe6 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8018f96:	687b      	ldr	r3, [r7, #4]
 8018f98:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8018f9a:	6878      	ldr	r0, [r7, #4]
 8018f9c:	4798      	blx	r3
 8018f9e:	e022      	b.n	8018fe6 <HAL_DMA_IRQHandler+0x29e>
 8018fa0:	20000588 	.word	0x20000588
 8018fa4:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8018fa8:	687b      	ldr	r3, [r7, #4]
 8018faa:	681b      	ldr	r3, [r3, #0]
 8018fac:	681b      	ldr	r3, [r3, #0]
 8018fae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8018fb2:	2b00      	cmp	r3, #0
 8018fb4:	d10f      	bne.n	8018fd6 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8018fb6:	687b      	ldr	r3, [r7, #4]
 8018fb8:	681b      	ldr	r3, [r3, #0]
 8018fba:	681a      	ldr	r2, [r3, #0]
 8018fbc:	687b      	ldr	r3, [r7, #4]
 8018fbe:	681b      	ldr	r3, [r3, #0]
 8018fc0:	f022 0210 	bic.w	r2, r2, #16
 8018fc4:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8018fc6:	687b      	ldr	r3, [r7, #4]
 8018fc8:	2201      	movs	r2, #1
 8018fca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8018fce:	687b      	ldr	r3, [r7, #4]
 8018fd0:	2200      	movs	r2, #0
 8018fd2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8018fd6:	687b      	ldr	r3, [r7, #4]
 8018fd8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8018fda:	2b00      	cmp	r3, #0
 8018fdc:	d003      	beq.n	8018fe6 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8018fde:	687b      	ldr	r3, [r7, #4]
 8018fe0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8018fe2:	6878      	ldr	r0, [r7, #4]
 8018fe4:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8018fe6:	687b      	ldr	r3, [r7, #4]
 8018fe8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8018fea:	2b00      	cmp	r3, #0
 8018fec:	d032      	beq.n	8019054 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8018fee:	687b      	ldr	r3, [r7, #4]
 8018ff0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8018ff2:	f003 0301 	and.w	r3, r3, #1
 8018ff6:	2b00      	cmp	r3, #0
 8018ff8:	d022      	beq.n	8019040 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8018ffa:	687b      	ldr	r3, [r7, #4]
 8018ffc:	2205      	movs	r2, #5
 8018ffe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8019002:	687b      	ldr	r3, [r7, #4]
 8019004:	681b      	ldr	r3, [r3, #0]
 8019006:	681a      	ldr	r2, [r3, #0]
 8019008:	687b      	ldr	r3, [r7, #4]
 801900a:	681b      	ldr	r3, [r3, #0]
 801900c:	f022 0201 	bic.w	r2, r2, #1
 8019010:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8019012:	68bb      	ldr	r3, [r7, #8]
 8019014:	3301      	adds	r3, #1
 8019016:	60bb      	str	r3, [r7, #8]
 8019018:	697a      	ldr	r2, [r7, #20]
 801901a:	429a      	cmp	r2, r3
 801901c:	d307      	bcc.n	801902e <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 801901e:	687b      	ldr	r3, [r7, #4]
 8019020:	681b      	ldr	r3, [r3, #0]
 8019022:	681b      	ldr	r3, [r3, #0]
 8019024:	f003 0301 	and.w	r3, r3, #1
 8019028:	2b00      	cmp	r3, #0
 801902a:	d1f2      	bne.n	8019012 <HAL_DMA_IRQHandler+0x2ca>
 801902c:	e000      	b.n	8019030 <HAL_DMA_IRQHandler+0x2e8>
          break;
 801902e:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8019030:	687b      	ldr	r3, [r7, #4]
 8019032:	2201      	movs	r2, #1
 8019034:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8019038:	687b      	ldr	r3, [r7, #4]
 801903a:	2200      	movs	r2, #0
 801903c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8019040:	687b      	ldr	r3, [r7, #4]
 8019042:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8019044:	2b00      	cmp	r3, #0
 8019046:	d005      	beq.n	8019054 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8019048:	687b      	ldr	r3, [r7, #4]
 801904a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801904c:	6878      	ldr	r0, [r7, #4]
 801904e:	4798      	blx	r3
 8019050:	e000      	b.n	8019054 <HAL_DMA_IRQHandler+0x30c>
        return;
 8019052:	bf00      	nop
    }
  }
}
 8019054:	3718      	adds	r7, #24
 8019056:	46bd      	mov	sp, r7
 8019058:	bd80      	pop	{r7, pc}
 801905a:	bf00      	nop

0801905c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 801905c:	b480      	push	{r7}
 801905e:	b085      	sub	sp, #20
 8019060:	af00      	add	r7, sp, #0
 8019062:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8019064:	687b      	ldr	r3, [r7, #4]
 8019066:	681b      	ldr	r3, [r3, #0]
 8019068:	b2db      	uxtb	r3, r3
 801906a:	3b10      	subs	r3, #16
 801906c:	4a14      	ldr	r2, [pc, #80]	; (80190c0 <DMA_CalcBaseAndBitshift+0x64>)
 801906e:	fba2 2303 	umull	r2, r3, r2, r3
 8019072:	091b      	lsrs	r3, r3, #4
 8019074:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8019076:	4a13      	ldr	r2, [pc, #76]	; (80190c4 <DMA_CalcBaseAndBitshift+0x68>)
 8019078:	68fb      	ldr	r3, [r7, #12]
 801907a:	4413      	add	r3, r2
 801907c:	781b      	ldrb	r3, [r3, #0]
 801907e:	461a      	mov	r2, r3
 8019080:	687b      	ldr	r3, [r7, #4]
 8019082:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8019084:	68fb      	ldr	r3, [r7, #12]
 8019086:	2b03      	cmp	r3, #3
 8019088:	d909      	bls.n	801909e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 801908a:	687b      	ldr	r3, [r7, #4]
 801908c:	681b      	ldr	r3, [r3, #0]
 801908e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8019092:	f023 0303 	bic.w	r3, r3, #3
 8019096:	1d1a      	adds	r2, r3, #4
 8019098:	687b      	ldr	r3, [r7, #4]
 801909a:	659a      	str	r2, [r3, #88]	; 0x58
 801909c:	e007      	b.n	80190ae <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 801909e:	687b      	ldr	r3, [r7, #4]
 80190a0:	681b      	ldr	r3, [r3, #0]
 80190a2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80190a6:	f023 0303 	bic.w	r3, r3, #3
 80190aa:	687a      	ldr	r2, [r7, #4]
 80190ac:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80190ae:	687b      	ldr	r3, [r7, #4]
 80190b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80190b2:	4618      	mov	r0, r3
 80190b4:	3714      	adds	r7, #20
 80190b6:	46bd      	mov	sp, r7
 80190b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80190bc:	4770      	bx	lr
 80190be:	bf00      	nop
 80190c0:	aaaaaaab 	.word	0xaaaaaaab
 80190c4:	08002360 	.word	0x08002360

080190c8 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80190c8:	b480      	push	{r7}
 80190ca:	b085      	sub	sp, #20
 80190cc:	af00      	add	r7, sp, #0
 80190ce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80190d0:	2300      	movs	r3, #0
 80190d2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80190d4:	687b      	ldr	r3, [r7, #4]
 80190d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80190d8:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80190da:	687b      	ldr	r3, [r7, #4]
 80190dc:	699b      	ldr	r3, [r3, #24]
 80190de:	2b00      	cmp	r3, #0
 80190e0:	d11f      	bne.n	8019122 <DMA_CheckFifoParam+0x5a>
 80190e2:	68bb      	ldr	r3, [r7, #8]
 80190e4:	2b03      	cmp	r3, #3
 80190e6:	d856      	bhi.n	8019196 <DMA_CheckFifoParam+0xce>
 80190e8:	a201      	add	r2, pc, #4	; (adr r2, 80190f0 <DMA_CheckFifoParam+0x28>)
 80190ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80190ee:	bf00      	nop
 80190f0:	08019101 	.word	0x08019101
 80190f4:	08019113 	.word	0x08019113
 80190f8:	08019101 	.word	0x08019101
 80190fc:	08019197 	.word	0x08019197
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8019100:	687b      	ldr	r3, [r7, #4]
 8019102:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8019104:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8019108:	2b00      	cmp	r3, #0
 801910a:	d046      	beq.n	801919a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 801910c:	2301      	movs	r3, #1
 801910e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8019110:	e043      	b.n	801919a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8019112:	687b      	ldr	r3, [r7, #4]
 8019114:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8019116:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 801911a:	d140      	bne.n	801919e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 801911c:	2301      	movs	r3, #1
 801911e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8019120:	e03d      	b.n	801919e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8019122:	687b      	ldr	r3, [r7, #4]
 8019124:	699b      	ldr	r3, [r3, #24]
 8019126:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 801912a:	d121      	bne.n	8019170 <DMA_CheckFifoParam+0xa8>
 801912c:	68bb      	ldr	r3, [r7, #8]
 801912e:	2b03      	cmp	r3, #3
 8019130:	d837      	bhi.n	80191a2 <DMA_CheckFifoParam+0xda>
 8019132:	a201      	add	r2, pc, #4	; (adr r2, 8019138 <DMA_CheckFifoParam+0x70>)
 8019134:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8019138:	08019149 	.word	0x08019149
 801913c:	0801914f 	.word	0x0801914f
 8019140:	08019149 	.word	0x08019149
 8019144:	08019161 	.word	0x08019161
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8019148:	2301      	movs	r3, #1
 801914a:	73fb      	strb	r3, [r7, #15]
      break;
 801914c:	e030      	b.n	80191b0 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 801914e:	687b      	ldr	r3, [r7, #4]
 8019150:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8019152:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8019156:	2b00      	cmp	r3, #0
 8019158:	d025      	beq.n	80191a6 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 801915a:	2301      	movs	r3, #1
 801915c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 801915e:	e022      	b.n	80191a6 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8019160:	687b      	ldr	r3, [r7, #4]
 8019162:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8019164:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8019168:	d11f      	bne.n	80191aa <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 801916a:	2301      	movs	r3, #1
 801916c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 801916e:	e01c      	b.n	80191aa <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8019170:	68bb      	ldr	r3, [r7, #8]
 8019172:	2b02      	cmp	r3, #2
 8019174:	d903      	bls.n	801917e <DMA_CheckFifoParam+0xb6>
 8019176:	68bb      	ldr	r3, [r7, #8]
 8019178:	2b03      	cmp	r3, #3
 801917a:	d003      	beq.n	8019184 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 801917c:	e018      	b.n	80191b0 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 801917e:	2301      	movs	r3, #1
 8019180:	73fb      	strb	r3, [r7, #15]
      break;
 8019182:	e015      	b.n	80191b0 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8019184:	687b      	ldr	r3, [r7, #4]
 8019186:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8019188:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 801918c:	2b00      	cmp	r3, #0
 801918e:	d00e      	beq.n	80191ae <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8019190:	2301      	movs	r3, #1
 8019192:	73fb      	strb	r3, [r7, #15]
      break;
 8019194:	e00b      	b.n	80191ae <DMA_CheckFifoParam+0xe6>
      break;
 8019196:	bf00      	nop
 8019198:	e00a      	b.n	80191b0 <DMA_CheckFifoParam+0xe8>
      break;
 801919a:	bf00      	nop
 801919c:	e008      	b.n	80191b0 <DMA_CheckFifoParam+0xe8>
      break;
 801919e:	bf00      	nop
 80191a0:	e006      	b.n	80191b0 <DMA_CheckFifoParam+0xe8>
      break;
 80191a2:	bf00      	nop
 80191a4:	e004      	b.n	80191b0 <DMA_CheckFifoParam+0xe8>
      break;
 80191a6:	bf00      	nop
 80191a8:	e002      	b.n	80191b0 <DMA_CheckFifoParam+0xe8>
      break;   
 80191aa:	bf00      	nop
 80191ac:	e000      	b.n	80191b0 <DMA_CheckFifoParam+0xe8>
      break;
 80191ae:	bf00      	nop
    }
  } 
  
  return status; 
 80191b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80191b2:	4618      	mov	r0, r3
 80191b4:	3714      	adds	r7, #20
 80191b6:	46bd      	mov	sp, r7
 80191b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80191bc:	4770      	bx	lr
 80191be:	bf00      	nop

080191c0 <HAL_FLASH_Program>:
  * @param  Data specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 80191c0:	b580      	push	{r7, lr}
 80191c2:	b086      	sub	sp, #24
 80191c4:	af00      	add	r7, sp, #0
 80191c6:	60f8      	str	r0, [r7, #12]
 80191c8:	60b9      	str	r1, [r7, #8]
 80191ca:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 80191ce:	2301      	movs	r3, #1
 80191d0:	75fb      	strb	r3, [r7, #23]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80191d2:	4b23      	ldr	r3, [pc, #140]	; (8019260 <HAL_FLASH_Program+0xa0>)
 80191d4:	7e1b      	ldrb	r3, [r3, #24]
 80191d6:	2b01      	cmp	r3, #1
 80191d8:	d101      	bne.n	80191de <HAL_FLASH_Program+0x1e>
 80191da:	2302      	movs	r3, #2
 80191dc:	e03b      	b.n	8019256 <HAL_FLASH_Program+0x96>
 80191de:	4b20      	ldr	r3, [pc, #128]	; (8019260 <HAL_FLASH_Program+0xa0>)
 80191e0:	2201      	movs	r2, #1
 80191e2:	761a      	strb	r2, [r3, #24]
  
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80191e4:	f24c 3050 	movw	r0, #50000	; 0xc350
 80191e8:	f000 f870 	bl	80192cc <FLASH_WaitForLastOperation>
 80191ec:	4603      	mov	r3, r0
 80191ee:	75fb      	strb	r3, [r7, #23]
  
  if(status == HAL_OK)
 80191f0:	7dfb      	ldrb	r3, [r7, #23]
 80191f2:	2b00      	cmp	r3, #0
 80191f4:	d12b      	bne.n	801924e <HAL_FLASH_Program+0x8e>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 80191f6:	68fb      	ldr	r3, [r7, #12]
 80191f8:	2b00      	cmp	r3, #0
 80191fa:	d105      	bne.n	8019208 <HAL_FLASH_Program+0x48>
    {
      /*Program byte (8-bit) at a specified address.*/
      FLASH_Program_Byte(Address, (uint8_t) Data);
 80191fc:	783b      	ldrb	r3, [r7, #0]
 80191fe:	4619      	mov	r1, r3
 8019200:	68b8      	ldr	r0, [r7, #8]
 8019202:	f000 f91b 	bl	801943c <FLASH_Program_Byte>
 8019206:	e016      	b.n	8019236 <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8019208:	68fb      	ldr	r3, [r7, #12]
 801920a:	2b01      	cmp	r3, #1
 801920c:	d105      	bne.n	801921a <HAL_FLASH_Program+0x5a>
    {
      /*Program halfword (16-bit) at a specified address.*/
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
 801920e:	883b      	ldrh	r3, [r7, #0]
 8019210:	4619      	mov	r1, r3
 8019212:	68b8      	ldr	r0, [r7, #8]
 8019214:	f000 f8ee 	bl	80193f4 <FLASH_Program_HalfWord>
 8019218:	e00d      	b.n	8019236 <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 801921a:	68fb      	ldr	r3, [r7, #12]
 801921c:	2b02      	cmp	r3, #2
 801921e:	d105      	bne.n	801922c <HAL_FLASH_Program+0x6c>
    {
      /*Program word (32-bit) at a specified address.*/
      FLASH_Program_Word(Address, (uint32_t) Data);
 8019220:	683b      	ldr	r3, [r7, #0]
 8019222:	4619      	mov	r1, r3
 8019224:	68b8      	ldr	r0, [r7, #8]
 8019226:	f000 f8c3 	bl	80193b0 <FLASH_Program_Word>
 801922a:	e004      	b.n	8019236 <HAL_FLASH_Program+0x76>
    }
    else
    {
      /*Program double word (64-bit) at a specified address.*/
      FLASH_Program_DoubleWord(Address, Data);
 801922c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8019230:	68b8      	ldr	r0, [r7, #8]
 8019232:	f000 f88b 	bl	801934c <FLASH_Program_DoubleWord>
    }
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8019236:	f24c 3050 	movw	r0, #50000	; 0xc350
 801923a:	f000 f847 	bl	80192cc <FLASH_WaitForLastOperation>
 801923e:	4603      	mov	r3, r0
 8019240:	75fb      	strb	r3, [r7, #23]
    
    /* If the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);  
 8019242:	4b08      	ldr	r3, [pc, #32]	; (8019264 <HAL_FLASH_Program+0xa4>)
 8019244:	691b      	ldr	r3, [r3, #16]
 8019246:	4a07      	ldr	r2, [pc, #28]	; (8019264 <HAL_FLASH_Program+0xa4>)
 8019248:	f023 0301 	bic.w	r3, r3, #1
 801924c:	6113      	str	r3, [r2, #16]
  }
  
  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 801924e:	4b04      	ldr	r3, [pc, #16]	; (8019260 <HAL_FLASH_Program+0xa0>)
 8019250:	2200      	movs	r2, #0
 8019252:	761a      	strb	r2, [r3, #24]
  
  return status;
 8019254:	7dfb      	ldrb	r3, [r7, #23]
}
 8019256:	4618      	mov	r0, r3
 8019258:	3718      	adds	r7, #24
 801925a:	46bd      	mov	sp, r7
 801925c:	bd80      	pop	{r7, pc}
 801925e:	bf00      	nop
 8019260:	20006c1c 	.word	0x20006c1c
 8019264:	40023c00 	.word	0x40023c00

08019268 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8019268:	b480      	push	{r7}
 801926a:	b083      	sub	sp, #12
 801926c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 801926e:	2300      	movs	r3, #0
 8019270:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8019272:	4b0b      	ldr	r3, [pc, #44]	; (80192a0 <HAL_FLASH_Unlock+0x38>)
 8019274:	691b      	ldr	r3, [r3, #16]
 8019276:	2b00      	cmp	r3, #0
 8019278:	da0b      	bge.n	8019292 <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 801927a:	4b09      	ldr	r3, [pc, #36]	; (80192a0 <HAL_FLASH_Unlock+0x38>)
 801927c:	4a09      	ldr	r2, [pc, #36]	; (80192a4 <HAL_FLASH_Unlock+0x3c>)
 801927e:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8019280:	4b07      	ldr	r3, [pc, #28]	; (80192a0 <HAL_FLASH_Unlock+0x38>)
 8019282:	4a09      	ldr	r2, [pc, #36]	; (80192a8 <HAL_FLASH_Unlock+0x40>)
 8019284:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8019286:	4b06      	ldr	r3, [pc, #24]	; (80192a0 <HAL_FLASH_Unlock+0x38>)
 8019288:	691b      	ldr	r3, [r3, #16]
 801928a:	2b00      	cmp	r3, #0
 801928c:	da01      	bge.n	8019292 <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 801928e:	2301      	movs	r3, #1
 8019290:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 8019292:	79fb      	ldrb	r3, [r7, #7]
}
 8019294:	4618      	mov	r0, r3
 8019296:	370c      	adds	r7, #12
 8019298:	46bd      	mov	sp, r7
 801929a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801929e:	4770      	bx	lr
 80192a0:	40023c00 	.word	0x40023c00
 80192a4:	45670123 	.word	0x45670123
 80192a8:	cdef89ab 	.word	0xcdef89ab

080192ac <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 80192ac:	b480      	push	{r7}
 80192ae:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 80192b0:	4b05      	ldr	r3, [pc, #20]	; (80192c8 <HAL_FLASH_Lock+0x1c>)
 80192b2:	691b      	ldr	r3, [r3, #16]
 80192b4:	4a04      	ldr	r2, [pc, #16]	; (80192c8 <HAL_FLASH_Lock+0x1c>)
 80192b6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80192ba:	6113      	str	r3, [r2, #16]
  
  return HAL_OK;  
 80192bc:	2300      	movs	r3, #0
}
 80192be:	4618      	mov	r0, r3
 80192c0:	46bd      	mov	sp, r7
 80192c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80192c6:	4770      	bx	lr
 80192c8:	40023c00 	.word	0x40023c00

080192cc <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{ 
 80192cc:	b580      	push	{r7, lr}
 80192ce:	b084      	sub	sp, #16
 80192d0:	af00      	add	r7, sp, #0
 80192d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80192d4:	2300      	movs	r3, #0
 80192d6:	60fb      	str	r3, [r7, #12]
  
  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80192d8:	4b1a      	ldr	r3, [pc, #104]	; (8019344 <FLASH_WaitForLastOperation+0x78>)
 80192da:	2200      	movs	r2, #0
 80192dc:	61da      	str	r2, [r3, #28]
  
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 80192de:	f7ff f819 	bl	8018314 <HAL_GetTick>
 80192e2:	60f8      	str	r0, [r7, #12]

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 80192e4:	e010      	b.n	8019308 <FLASH_WaitForLastOperation+0x3c>
  { 
    if(Timeout != HAL_MAX_DELAY)
 80192e6:	687b      	ldr	r3, [r7, #4]
 80192e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80192ec:	d00c      	beq.n	8019308 <FLASH_WaitForLastOperation+0x3c>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 80192ee:	687b      	ldr	r3, [r7, #4]
 80192f0:	2b00      	cmp	r3, #0
 80192f2:	d007      	beq.n	8019304 <FLASH_WaitForLastOperation+0x38>
 80192f4:	f7ff f80e 	bl	8018314 <HAL_GetTick>
 80192f8:	4602      	mov	r2, r0
 80192fa:	68fb      	ldr	r3, [r7, #12]
 80192fc:	1ad3      	subs	r3, r2, r3
 80192fe:	687a      	ldr	r2, [r7, #4]
 8019300:	429a      	cmp	r2, r3
 8019302:	d201      	bcs.n	8019308 <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 8019304:	2303      	movs	r3, #3
 8019306:	e019      	b.n	801933c <FLASH_WaitForLastOperation+0x70>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8019308:	4b0f      	ldr	r3, [pc, #60]	; (8019348 <FLASH_WaitForLastOperation+0x7c>)
 801930a:	68db      	ldr	r3, [r3, #12]
 801930c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8019310:	2b00      	cmp	r3, #0
 8019312:	d1e8      	bne.n	80192e6 <FLASH_WaitForLastOperation+0x1a>
      }
    } 
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 8019314:	4b0c      	ldr	r3, [pc, #48]	; (8019348 <FLASH_WaitForLastOperation+0x7c>)
 8019316:	68db      	ldr	r3, [r3, #12]
 8019318:	f003 0301 	and.w	r3, r3, #1
 801931c:	2b00      	cmp	r3, #0
 801931e:	d002      	beq.n	8019326 <FLASH_WaitForLastOperation+0x5a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8019320:	4b09      	ldr	r3, [pc, #36]	; (8019348 <FLASH_WaitForLastOperation+0x7c>)
 8019322:	2201      	movs	r2, #1
 8019324:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)  
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 8019326:	4b08      	ldr	r3, [pc, #32]	; (8019348 <FLASH_WaitForLastOperation+0x7c>)
 8019328:	68db      	ldr	r3, [r3, #12]
 801932a:	f403 73f9 	and.w	r3, r3, #498	; 0x1f2
 801932e:	2b00      	cmp	r3, #0
 8019330:	d003      	beq.n	801933a <FLASH_WaitForLastOperation+0x6e>
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 8019332:	f000 f8a5 	bl	8019480 <FLASH_SetErrorCode>
    return HAL_ERROR;
 8019336:	2301      	movs	r3, #1
 8019338:	e000      	b.n	801933c <FLASH_WaitForLastOperation+0x70>
  }

  /* If there is no error flag set */
  return HAL_OK;
 801933a:	2300      	movs	r3, #0
  
}  
 801933c:	4618      	mov	r0, r3
 801933e:	3710      	adds	r7, #16
 8019340:	46bd      	mov	sp, r7
 8019342:	bd80      	pop	{r7, pc}
 8019344:	20006c1c 	.word	0x20006c1c
 8019348:	40023c00 	.word	0x40023c00

0801934c <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 801934c:	b480      	push	{r7}
 801934e:	b085      	sub	sp, #20
 8019350:	af00      	add	r7, sp, #0
 8019352:	60f8      	str	r0, [r7, #12]
 8019354:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8019358:	4b14      	ldr	r3, [pc, #80]	; (80193ac <FLASH_Program_DoubleWord+0x60>)
 801935a:	691b      	ldr	r3, [r3, #16]
 801935c:	4a13      	ldr	r2, [pc, #76]	; (80193ac <FLASH_Program_DoubleWord+0x60>)
 801935e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8019362:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 8019364:	4b11      	ldr	r3, [pc, #68]	; (80193ac <FLASH_Program_DoubleWord+0x60>)
 8019366:	691b      	ldr	r3, [r3, #16]
 8019368:	4a10      	ldr	r2, [pc, #64]	; (80193ac <FLASH_Program_DoubleWord+0x60>)
 801936a:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 801936e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8019370:	4b0e      	ldr	r3, [pc, #56]	; (80193ac <FLASH_Program_DoubleWord+0x60>)
 8019372:	691b      	ldr	r3, [r3, #16]
 8019374:	4a0d      	ldr	r2, [pc, #52]	; (80193ac <FLASH_Program_DoubleWord+0x60>)
 8019376:	f043 0301 	orr.w	r3, r3, #1
 801937a:	6113      	str	r3, [r2, #16]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 801937c:	68fb      	ldr	r3, [r7, #12]
 801937e:	683a      	ldr	r2, [r7, #0]
 8019380:	601a      	str	r2, [r3, #0]
           so that all instructions following the ISB are fetched from cache or memory,
           after the instruction has been completed.
 */
__STATIC_FORCEINLINE void __ISB(void)
{
  __ASM volatile ("isb 0xF":::"memory");
 8019382:	f3bf 8f6f 	isb	sy
}
 8019386:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4) = (uint32_t)(Data >> 32);
 8019388:	e9d7 0100 	ldrd	r0, r1, [r7]
 801938c:	f04f 0200 	mov.w	r2, #0
 8019390:	f04f 0300 	mov.w	r3, #0
 8019394:	000a      	movs	r2, r1
 8019396:	2300      	movs	r3, #0
 8019398:	68f9      	ldr	r1, [r7, #12]
 801939a:	3104      	adds	r1, #4
 801939c:	4613      	mov	r3, r2
 801939e:	600b      	str	r3, [r1, #0]
}
 80193a0:	bf00      	nop
 80193a2:	3714      	adds	r7, #20
 80193a4:	46bd      	mov	sp, r7
 80193a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80193aa:	4770      	bx	lr
 80193ac:	40023c00 	.word	0x40023c00

080193b0 <FLASH_Program_Word>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
 80193b0:	b480      	push	{r7}
 80193b2:	b083      	sub	sp, #12
 80193b4:	af00      	add	r7, sp, #0
 80193b6:	6078      	str	r0, [r7, #4]
 80193b8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80193ba:	4b0d      	ldr	r3, [pc, #52]	; (80193f0 <FLASH_Program_Word+0x40>)
 80193bc:	691b      	ldr	r3, [r3, #16]
 80193be:	4a0c      	ldr	r2, [pc, #48]	; (80193f0 <FLASH_Program_Word+0x40>)
 80193c0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80193c4:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 80193c6:	4b0a      	ldr	r3, [pc, #40]	; (80193f0 <FLASH_Program_Word+0x40>)
 80193c8:	691b      	ldr	r3, [r3, #16]
 80193ca:	4a09      	ldr	r2, [pc, #36]	; (80193f0 <FLASH_Program_Word+0x40>)
 80193cc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80193d0:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 80193d2:	4b07      	ldr	r3, [pc, #28]	; (80193f0 <FLASH_Program_Word+0x40>)
 80193d4:	691b      	ldr	r3, [r3, #16]
 80193d6:	4a06      	ldr	r2, [pc, #24]	; (80193f0 <FLASH_Program_Word+0x40>)
 80193d8:	f043 0301 	orr.w	r3, r3, #1
 80193dc:	6113      	str	r3, [r2, #16]

  *(__IO uint32_t*)Address = Data;
 80193de:	687b      	ldr	r3, [r7, #4]
 80193e0:	683a      	ldr	r2, [r7, #0]
 80193e2:	601a      	str	r2, [r3, #0]
}
 80193e4:	bf00      	nop
 80193e6:	370c      	adds	r7, #12
 80193e8:	46bd      	mov	sp, r7
 80193ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80193ee:	4770      	bx	lr
 80193f0:	40023c00 	.word	0x40023c00

080193f4 <FLASH_Program_HalfWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 80193f4:	b480      	push	{r7}
 80193f6:	b083      	sub	sp, #12
 80193f8:	af00      	add	r7, sp, #0
 80193fa:	6078      	str	r0, [r7, #4]
 80193fc:	460b      	mov	r3, r1
 80193fe:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8019400:	4b0d      	ldr	r3, [pc, #52]	; (8019438 <FLASH_Program_HalfWord+0x44>)
 8019402:	691b      	ldr	r3, [r3, #16]
 8019404:	4a0c      	ldr	r2, [pc, #48]	; (8019438 <FLASH_Program_HalfWord+0x44>)
 8019406:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 801940a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 801940c:	4b0a      	ldr	r3, [pc, #40]	; (8019438 <FLASH_Program_HalfWord+0x44>)
 801940e:	691b      	ldr	r3, [r3, #16]
 8019410:	4a09      	ldr	r2, [pc, #36]	; (8019438 <FLASH_Program_HalfWord+0x44>)
 8019412:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8019416:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8019418:	4b07      	ldr	r3, [pc, #28]	; (8019438 <FLASH_Program_HalfWord+0x44>)
 801941a:	691b      	ldr	r3, [r3, #16]
 801941c:	4a06      	ldr	r2, [pc, #24]	; (8019438 <FLASH_Program_HalfWord+0x44>)
 801941e:	f043 0301 	orr.w	r3, r3, #1
 8019422:	6113      	str	r3, [r2, #16]

  *(__IO uint16_t*)Address = Data;
 8019424:	687b      	ldr	r3, [r7, #4]
 8019426:	887a      	ldrh	r2, [r7, #2]
 8019428:	801a      	strh	r2, [r3, #0]
}
 801942a:	bf00      	nop
 801942c:	370c      	adds	r7, #12
 801942e:	46bd      	mov	sp, r7
 8019430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019434:	4770      	bx	lr
 8019436:	bf00      	nop
 8019438:	40023c00 	.word	0x40023c00

0801943c <FLASH_Program_Byte>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
{
 801943c:	b480      	push	{r7}
 801943e:	b083      	sub	sp, #12
 8019440:	af00      	add	r7, sp, #0
 8019442:	6078      	str	r0, [r7, #4]
 8019444:	460b      	mov	r3, r1
 8019446:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8019448:	4b0c      	ldr	r3, [pc, #48]	; (801947c <FLASH_Program_Byte+0x40>)
 801944a:	691b      	ldr	r3, [r3, #16]
 801944c:	4a0b      	ldr	r2, [pc, #44]	; (801947c <FLASH_Program_Byte+0x40>)
 801944e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8019452:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 8019454:	4b09      	ldr	r3, [pc, #36]	; (801947c <FLASH_Program_Byte+0x40>)
 8019456:	4a09      	ldr	r2, [pc, #36]	; (801947c <FLASH_Program_Byte+0x40>)
 8019458:	691b      	ldr	r3, [r3, #16]
 801945a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 801945c:	4b07      	ldr	r3, [pc, #28]	; (801947c <FLASH_Program_Byte+0x40>)
 801945e:	691b      	ldr	r3, [r3, #16]
 8019460:	4a06      	ldr	r2, [pc, #24]	; (801947c <FLASH_Program_Byte+0x40>)
 8019462:	f043 0301 	orr.w	r3, r3, #1
 8019466:	6113      	str	r3, [r2, #16]

  *(__IO uint8_t*)Address = Data;
 8019468:	687b      	ldr	r3, [r7, #4]
 801946a:	78fa      	ldrb	r2, [r7, #3]
 801946c:	701a      	strb	r2, [r3, #0]
}
 801946e:	bf00      	nop
 8019470:	370c      	adds	r7, #12
 8019472:	46bd      	mov	sp, r7
 8019474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019478:	4770      	bx	lr
 801947a:	bf00      	nop
 801947c:	40023c00 	.word	0x40023c00

08019480 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
 8019480:	b480      	push	{r7}
 8019482:	af00      	add	r7, sp, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 8019484:	4b2f      	ldr	r3, [pc, #188]	; (8019544 <FLASH_SetErrorCode+0xc4>)
 8019486:	68db      	ldr	r3, [r3, #12]
 8019488:	f003 0310 	and.w	r3, r3, #16
 801948c:	2b00      	cmp	r3, #0
 801948e:	d008      	beq.n	80194a2 <FLASH_SetErrorCode+0x22>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8019490:	4b2d      	ldr	r3, [pc, #180]	; (8019548 <FLASH_SetErrorCode+0xc8>)
 8019492:	69db      	ldr	r3, [r3, #28]
 8019494:	f043 0310 	orr.w	r3, r3, #16
 8019498:	4a2b      	ldr	r2, [pc, #172]	; (8019548 <FLASH_SetErrorCode+0xc8>)
 801949a:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH write protection error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 801949c:	4b29      	ldr	r3, [pc, #164]	; (8019544 <FLASH_SetErrorCode+0xc4>)
 801949e:	2210      	movs	r2, #16
 80194a0:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 80194a2:	4b28      	ldr	r3, [pc, #160]	; (8019544 <FLASH_SetErrorCode+0xc4>)
 80194a4:	68db      	ldr	r3, [r3, #12]
 80194a6:	f003 0320 	and.w	r3, r3, #32
 80194aa:	2b00      	cmp	r3, #0
 80194ac:	d008      	beq.n	80194c0 <FLASH_SetErrorCode+0x40>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 80194ae:	4b26      	ldr	r3, [pc, #152]	; (8019548 <FLASH_SetErrorCode+0xc8>)
 80194b0:	69db      	ldr	r3, [r3, #28]
 80194b2:	f043 0308 	orr.w	r3, r3, #8
 80194b6:	4a24      	ldr	r2, [pc, #144]	; (8019548 <FLASH_SetErrorCode+0xc8>)
 80194b8:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH Programming alignment error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 80194ba:	4b22      	ldr	r3, [pc, #136]	; (8019544 <FLASH_SetErrorCode+0xc4>)
 80194bc:	2220      	movs	r2, #32
 80194be:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 80194c0:	4b20      	ldr	r3, [pc, #128]	; (8019544 <FLASH_SetErrorCode+0xc4>)
 80194c2:	68db      	ldr	r3, [r3, #12]
 80194c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80194c8:	2b00      	cmp	r3, #0
 80194ca:	d008      	beq.n	80194de <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 80194cc:	4b1e      	ldr	r3, [pc, #120]	; (8019548 <FLASH_SetErrorCode+0xc8>)
 80194ce:	69db      	ldr	r3, [r3, #28]
 80194d0:	f043 0304 	orr.w	r3, r3, #4
 80194d4:	4a1c      	ldr	r2, [pc, #112]	; (8019548 <FLASH_SetErrorCode+0xc8>)
 80194d6:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 80194d8:	4b1a      	ldr	r3, [pc, #104]	; (8019544 <FLASH_SetErrorCode+0xc4>)
 80194da:	2240      	movs	r2, #64	; 0x40
 80194dc:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 80194de:	4b19      	ldr	r3, [pc, #100]	; (8019544 <FLASH_SetErrorCode+0xc4>)
 80194e0:	68db      	ldr	r3, [r3, #12]
 80194e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80194e6:	2b00      	cmp	r3, #0
 80194e8:	d008      	beq.n	80194fc <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 80194ea:	4b17      	ldr	r3, [pc, #92]	; (8019548 <FLASH_SetErrorCode+0xc8>)
 80194ec:	69db      	ldr	r3, [r3, #28]
 80194ee:	f043 0302 	orr.w	r3, r3, #2
 80194f2:	4a15      	ldr	r2, [pc, #84]	; (8019548 <FLASH_SetErrorCode+0xc8>)
 80194f4:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 80194f6:	4b13      	ldr	r3, [pc, #76]	; (8019544 <FLASH_SetErrorCode+0xc4>)
 80194f8:	2280      	movs	r2, #128	; 0x80
 80194fa:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR) 
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR) != RESET)
 80194fc:	4b11      	ldr	r3, [pc, #68]	; (8019544 <FLASH_SetErrorCode+0xc4>)
 80194fe:	68db      	ldr	r3, [r3, #12]
 8019500:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8019504:	2b00      	cmp	r3, #0
 8019506:	d009      	beq.n	801951c <FLASH_SetErrorCode+0x9c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_RD;
 8019508:	4b0f      	ldr	r3, [pc, #60]	; (8019548 <FLASH_SetErrorCode+0xc8>)
 801950a:	69db      	ldr	r3, [r3, #28]
 801950c:	f043 0301 	orr.w	r3, r3, #1
 8019510:	4a0d      	ldr	r2, [pc, #52]	; (8019548 <FLASH_SetErrorCode+0xc8>)
 8019512:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
 8019514:	4b0b      	ldr	r3, [pc, #44]	; (8019544 <FLASH_SetErrorCode+0xc4>)
 8019516:	f44f 7280 	mov.w	r2, #256	; 0x100
 801951a:	60da      	str	r2, [r3, #12]
  }
#endif /* FLASH_SR_RDERR */  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 801951c:	4b09      	ldr	r3, [pc, #36]	; (8019544 <FLASH_SetErrorCode+0xc4>)
 801951e:	68db      	ldr	r3, [r3, #12]
 8019520:	f003 0302 	and.w	r3, r3, #2
 8019524:	2b00      	cmp	r3, #0
 8019526:	d008      	beq.n	801953a <FLASH_SetErrorCode+0xba>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 8019528:	4b07      	ldr	r3, [pc, #28]	; (8019548 <FLASH_SetErrorCode+0xc8>)
 801952a:	69db      	ldr	r3, [r3, #28]
 801952c:	f043 0320 	orr.w	r3, r3, #32
 8019530:	4a05      	ldr	r2, [pc, #20]	; (8019548 <FLASH_SetErrorCode+0xc8>)
 8019532:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 8019534:	4b03      	ldr	r3, [pc, #12]	; (8019544 <FLASH_SetErrorCode+0xc4>)
 8019536:	2202      	movs	r2, #2
 8019538:	60da      	str	r2, [r3, #12]
  }
}
 801953a:	bf00      	nop
 801953c:	46bd      	mov	sp, r7
 801953e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019542:	4770      	bx	lr
 8019544:	40023c00 	.word	0x40023c00
 8019548:	20006c1c 	.word	0x20006c1c

0801954c <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFFU means that all the sectors have been correctly erased)
  *
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *SectorError)
{
 801954c:	b580      	push	{r7, lr}
 801954e:	b084      	sub	sp, #16
 8019550:	af00      	add	r7, sp, #0
 8019552:	6078      	str	r0, [r7, #4]
 8019554:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 8019556:	2301      	movs	r3, #1
 8019558:	73fb      	strb	r3, [r7, #15]
  uint32_t index = 0U;
 801955a:	2300      	movs	r3, #0
 801955c:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 801955e:	4b31      	ldr	r3, [pc, #196]	; (8019624 <HAL_FLASHEx_Erase+0xd8>)
 8019560:	7e1b      	ldrb	r3, [r3, #24]
 8019562:	2b01      	cmp	r3, #1
 8019564:	d101      	bne.n	801956a <HAL_FLASHEx_Erase+0x1e>
 8019566:	2302      	movs	r3, #2
 8019568:	e058      	b.n	801961c <HAL_FLASHEx_Erase+0xd0>
 801956a:	4b2e      	ldr	r3, [pc, #184]	; (8019624 <HAL_FLASHEx_Erase+0xd8>)
 801956c:	2201      	movs	r2, #1
 801956e:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8019570:	f24c 3050 	movw	r0, #50000	; 0xc350
 8019574:	f7ff feaa 	bl	80192cc <FLASH_WaitForLastOperation>
 8019578:	4603      	mov	r3, r0
 801957a:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 801957c:	7bfb      	ldrb	r3, [r7, #15]
 801957e:	2b00      	cmp	r3, #0
 8019580:	d148      	bne.n	8019614 <HAL_FLASHEx_Erase+0xc8>
  {
    /*Initialization of SectorError variable*/
    *SectorError = 0xFFFFFFFFU;
 8019582:	683b      	ldr	r3, [r7, #0]
 8019584:	f04f 32ff 	mov.w	r2, #4294967295
 8019588:	601a      	str	r2, [r3, #0]

    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 801958a:	687b      	ldr	r3, [r7, #4]
 801958c:	681b      	ldr	r3, [r3, #0]
 801958e:	2b01      	cmp	r3, #1
 8019590:	d115      	bne.n	80195be <HAL_FLASHEx_Erase+0x72>
    {
      /*Mass erase to be done*/
      FLASH_MassErase((uint8_t) pEraseInit->VoltageRange, pEraseInit->Banks);
 8019592:	687b      	ldr	r3, [r7, #4]
 8019594:	691b      	ldr	r3, [r3, #16]
 8019596:	b2da      	uxtb	r2, r3
 8019598:	687b      	ldr	r3, [r7, #4]
 801959a:	685b      	ldr	r3, [r3, #4]
 801959c:	4619      	mov	r1, r3
 801959e:	4610      	mov	r0, r2
 80195a0:	f000 f844 	bl	801962c <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80195a4:	f24c 3050 	movw	r0, #50000	; 0xc350
 80195a8:	f7ff fe90 	bl	80192cc <FLASH_WaitForLastOperation>
 80195ac:	4603      	mov	r3, r0
 80195ae:	73fb      	strb	r3, [r7, #15]

      /* if the erase operation is completed, disable the MER Bit */
      FLASH->CR &= (~FLASH_MER_BIT);
 80195b0:	4b1d      	ldr	r3, [pc, #116]	; (8019628 <HAL_FLASHEx_Erase+0xdc>)
 80195b2:	691b      	ldr	r3, [r3, #16]
 80195b4:	4a1c      	ldr	r2, [pc, #112]	; (8019628 <HAL_FLASHEx_Erase+0xdc>)
 80195b6:	f023 0304 	bic.w	r3, r3, #4
 80195ba:	6113      	str	r3, [r2, #16]
 80195bc:	e028      	b.n	8019610 <HAL_FLASHEx_Erase+0xc4>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_NBSECTORS(pEraseInit->NbSectors + pEraseInit->Sector));

      /* Erase by sector by sector to be done*/
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 80195be:	687b      	ldr	r3, [r7, #4]
 80195c0:	689b      	ldr	r3, [r3, #8]
 80195c2:	60bb      	str	r3, [r7, #8]
 80195c4:	e01c      	b.n	8019600 <HAL_FLASHEx_Erase+0xb4>
      {
        FLASH_Erase_Sector(index, (uint8_t) pEraseInit->VoltageRange);
 80195c6:	687b      	ldr	r3, [r7, #4]
 80195c8:	691b      	ldr	r3, [r3, #16]
 80195ca:	b2db      	uxtb	r3, r3
 80195cc:	4619      	mov	r1, r3
 80195ce:	68b8      	ldr	r0, [r7, #8]
 80195d0:	f000 f850 	bl	8019674 <FLASH_Erase_Sector>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80195d4:	f24c 3050 	movw	r0, #50000	; 0xc350
 80195d8:	f7ff fe78 	bl	80192cc <FLASH_WaitForLastOperation>
 80195dc:	4603      	mov	r3, r0
 80195de:	73fb      	strb	r3, [r7, #15]

        /* If the erase operation is completed, disable the SER and SNB Bits */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB));
 80195e0:	4b11      	ldr	r3, [pc, #68]	; (8019628 <HAL_FLASHEx_Erase+0xdc>)
 80195e2:	691b      	ldr	r3, [r3, #16]
 80195e4:	4a10      	ldr	r2, [pc, #64]	; (8019628 <HAL_FLASHEx_Erase+0xdc>)
 80195e6:	f023 03fa 	bic.w	r3, r3, #250	; 0xfa
 80195ea:	6113      	str	r3, [r2, #16]

        if (status != HAL_OK)
 80195ec:	7bfb      	ldrb	r3, [r7, #15]
 80195ee:	2b00      	cmp	r3, #0
 80195f0:	d003      	beq.n	80195fa <HAL_FLASHEx_Erase+0xae>
        {
          /* In case of error, stop erase procedure and return the faulty sector*/
          *SectorError = index;
 80195f2:	683b      	ldr	r3, [r7, #0]
 80195f4:	68ba      	ldr	r2, [r7, #8]
 80195f6:	601a      	str	r2, [r3, #0]
          break;
 80195f8:	e00a      	b.n	8019610 <HAL_FLASHEx_Erase+0xc4>
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 80195fa:	68bb      	ldr	r3, [r7, #8]
 80195fc:	3301      	adds	r3, #1
 80195fe:	60bb      	str	r3, [r7, #8]
 8019600:	687b      	ldr	r3, [r7, #4]
 8019602:	68da      	ldr	r2, [r3, #12]
 8019604:	687b      	ldr	r3, [r7, #4]
 8019606:	689b      	ldr	r3, [r3, #8]
 8019608:	4413      	add	r3, r2
 801960a:	68ba      	ldr	r2, [r7, #8]
 801960c:	429a      	cmp	r2, r3
 801960e:	d3da      	bcc.n	80195c6 <HAL_FLASHEx_Erase+0x7a>
        }
      }
    }
    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 8019610:	f000 f878 	bl	8019704 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8019614:	4b03      	ldr	r3, [pc, #12]	; (8019624 <HAL_FLASHEx_Erase+0xd8>)
 8019616:	2200      	movs	r2, #0
 8019618:	761a      	strb	r2, [r3, #24]

  return status;
 801961a:	7bfb      	ldrb	r3, [r7, #15]
}
 801961c:	4618      	mov	r0, r3
 801961e:	3710      	adds	r7, #16
 8019620:	46bd      	mov	sp, r7
 8019622:	bd80      	pop	{r7, pc}
 8019624:	20006c1c 	.word	0x20006c1c
 8019628:	40023c00 	.word	0x40023c00

0801962c <FLASH_MassErase>:
  *            @arg FLASH_BANK_1: Bank1 to be erased
  *
  * @retval None
  */
static void FLASH_MassErase(uint8_t VoltageRange, uint32_t Banks)
{
 801962c:	b480      	push	{r7}
 801962e:	b083      	sub	sp, #12
 8019630:	af00      	add	r7, sp, #0
 8019632:	4603      	mov	r3, r0
 8019634:	6039      	str	r1, [r7, #0]
 8019636:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  assert_param(IS_FLASH_BANK(Banks));

  /* If the previous operation is completed, proceed to erase all sectors */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8019638:	4b0d      	ldr	r3, [pc, #52]	; (8019670 <FLASH_MassErase+0x44>)
 801963a:	691b      	ldr	r3, [r3, #16]
 801963c:	4a0c      	ldr	r2, [pc, #48]	; (8019670 <FLASH_MassErase+0x44>)
 801963e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8019642:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_MER;
 8019644:	4b0a      	ldr	r3, [pc, #40]	; (8019670 <FLASH_MassErase+0x44>)
 8019646:	691b      	ldr	r3, [r3, #16]
 8019648:	4a09      	ldr	r2, [pc, #36]	; (8019670 <FLASH_MassErase+0x44>)
 801964a:	f043 0304 	orr.w	r3, r3, #4
 801964e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT | ((uint32_t)VoltageRange << 8U);
 8019650:	4b07      	ldr	r3, [pc, #28]	; (8019670 <FLASH_MassErase+0x44>)
 8019652:	691a      	ldr	r2, [r3, #16]
 8019654:	79fb      	ldrb	r3, [r7, #7]
 8019656:	021b      	lsls	r3, r3, #8
 8019658:	4313      	orrs	r3, r2
 801965a:	4a05      	ldr	r2, [pc, #20]	; (8019670 <FLASH_MassErase+0x44>)
 801965c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8019660:	6113      	str	r3, [r2, #16]
}
 8019662:	bf00      	nop
 8019664:	370c      	adds	r7, #12
 8019666:	46bd      	mov	sp, r7
 8019668:	f85d 7b04 	ldr.w	r7, [sp], #4
 801966c:	4770      	bx	lr
 801966e:	bf00      	nop
 8019670:	40023c00 	.word	0x40023c00

08019674 <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  *
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 8019674:	b480      	push	{r7}
 8019676:	b085      	sub	sp, #20
 8019678:	af00      	add	r7, sp, #0
 801967a:	6078      	str	r0, [r7, #4]
 801967c:	460b      	mov	r3, r1
 801967e:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
 8019680:	2300      	movs	r3, #0
 8019682:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));

  if (VoltageRange == FLASH_VOLTAGE_RANGE_1)
 8019684:	78fb      	ldrb	r3, [r7, #3]
 8019686:	2b00      	cmp	r3, #0
 8019688:	d102      	bne.n	8019690 <FLASH_Erase_Sector+0x1c>
  {
    tmp_psize = FLASH_PSIZE_BYTE;
 801968a:	2300      	movs	r3, #0
 801968c:	60fb      	str	r3, [r7, #12]
 801968e:	e010      	b.n	80196b2 <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_2)
 8019690:	78fb      	ldrb	r3, [r7, #3]
 8019692:	2b01      	cmp	r3, #1
 8019694:	d103      	bne.n	801969e <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 8019696:	f44f 7380 	mov.w	r3, #256	; 0x100
 801969a:	60fb      	str	r3, [r7, #12]
 801969c:	e009      	b.n	80196b2 <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_3)
 801969e:	78fb      	ldrb	r3, [r7, #3]
 80196a0:	2b02      	cmp	r3, #2
 80196a2:	d103      	bne.n	80196ac <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 80196a4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80196a8:	60fb      	str	r3, [r7, #12]
 80196aa:	e002      	b.n	80196b2 <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 80196ac:	f44f 7340 	mov.w	r3, #768	; 0x300
 80196b0:	60fb      	str	r3, [r7, #12]
  }

  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80196b2:	4b13      	ldr	r3, [pc, #76]	; (8019700 <FLASH_Erase_Sector+0x8c>)
 80196b4:	691b      	ldr	r3, [r3, #16]
 80196b6:	4a12      	ldr	r2, [pc, #72]	; (8019700 <FLASH_Erase_Sector+0x8c>)
 80196b8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80196bc:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 80196be:	4b10      	ldr	r3, [pc, #64]	; (8019700 <FLASH_Erase_Sector+0x8c>)
 80196c0:	691a      	ldr	r2, [r3, #16]
 80196c2:	490f      	ldr	r1, [pc, #60]	; (8019700 <FLASH_Erase_Sector+0x8c>)
 80196c4:	68fb      	ldr	r3, [r7, #12]
 80196c6:	4313      	orrs	r3, r2
 80196c8:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 80196ca:	4b0d      	ldr	r3, [pc, #52]	; (8019700 <FLASH_Erase_Sector+0x8c>)
 80196cc:	691b      	ldr	r3, [r3, #16]
 80196ce:	4a0c      	ldr	r2, [pc, #48]	; (8019700 <FLASH_Erase_Sector+0x8c>)
 80196d0:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80196d4:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 80196d6:	4b0a      	ldr	r3, [pc, #40]	; (8019700 <FLASH_Erase_Sector+0x8c>)
 80196d8:	691a      	ldr	r2, [r3, #16]
 80196da:	687b      	ldr	r3, [r7, #4]
 80196dc:	00db      	lsls	r3, r3, #3
 80196de:	4313      	orrs	r3, r2
 80196e0:	4a07      	ldr	r2, [pc, #28]	; (8019700 <FLASH_Erase_Sector+0x8c>)
 80196e2:	f043 0302 	orr.w	r3, r3, #2
 80196e6:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 80196e8:	4b05      	ldr	r3, [pc, #20]	; (8019700 <FLASH_Erase_Sector+0x8c>)
 80196ea:	691b      	ldr	r3, [r3, #16]
 80196ec:	4a04      	ldr	r2, [pc, #16]	; (8019700 <FLASH_Erase_Sector+0x8c>)
 80196ee:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80196f2:	6113      	str	r3, [r2, #16]
}
 80196f4:	bf00      	nop
 80196f6:	3714      	adds	r7, #20
 80196f8:	46bd      	mov	sp, r7
 80196fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80196fe:	4770      	bx	lr
 8019700:	40023c00 	.word	0x40023c00

08019704 <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 8019704:	b480      	push	{r7}
 8019706:	af00      	add	r7, sp, #0
  /* Flush instruction cache  */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != RESET)
 8019708:	4b20      	ldr	r3, [pc, #128]	; (801978c <FLASH_FlushCaches+0x88>)
 801970a:	681b      	ldr	r3, [r3, #0]
 801970c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8019710:	2b00      	cmp	r3, #0
 8019712:	d017      	beq.n	8019744 <FLASH_FlushCaches+0x40>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 8019714:	4b1d      	ldr	r3, [pc, #116]	; (801978c <FLASH_FlushCaches+0x88>)
 8019716:	681b      	ldr	r3, [r3, #0]
 8019718:	4a1c      	ldr	r2, [pc, #112]	; (801978c <FLASH_FlushCaches+0x88>)
 801971a:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 801971e:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 8019720:	4b1a      	ldr	r3, [pc, #104]	; (801978c <FLASH_FlushCaches+0x88>)
 8019722:	681b      	ldr	r3, [r3, #0]
 8019724:	4a19      	ldr	r2, [pc, #100]	; (801978c <FLASH_FlushCaches+0x88>)
 8019726:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 801972a:	6013      	str	r3, [r2, #0]
 801972c:	4b17      	ldr	r3, [pc, #92]	; (801978c <FLASH_FlushCaches+0x88>)
 801972e:	681b      	ldr	r3, [r3, #0]
 8019730:	4a16      	ldr	r2, [pc, #88]	; (801978c <FLASH_FlushCaches+0x88>)
 8019732:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8019736:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8019738:	4b14      	ldr	r3, [pc, #80]	; (801978c <FLASH_FlushCaches+0x88>)
 801973a:	681b      	ldr	r3, [r3, #0]
 801973c:	4a13      	ldr	r2, [pc, #76]	; (801978c <FLASH_FlushCaches+0x88>)
 801973e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8019742:	6013      	str	r3, [r2, #0]
  }

  /* Flush data cache */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != RESET)
 8019744:	4b11      	ldr	r3, [pc, #68]	; (801978c <FLASH_FlushCaches+0x88>)
 8019746:	681b      	ldr	r3, [r3, #0]
 8019748:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 801974c:	2b00      	cmp	r3, #0
 801974e:	d017      	beq.n	8019780 <FLASH_FlushCaches+0x7c>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 8019750:	4b0e      	ldr	r3, [pc, #56]	; (801978c <FLASH_FlushCaches+0x88>)
 8019752:	681b      	ldr	r3, [r3, #0]
 8019754:	4a0d      	ldr	r2, [pc, #52]	; (801978c <FLASH_FlushCaches+0x88>)
 8019756:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 801975a:	6013      	str	r3, [r2, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 801975c:	4b0b      	ldr	r3, [pc, #44]	; (801978c <FLASH_FlushCaches+0x88>)
 801975e:	681b      	ldr	r3, [r3, #0]
 8019760:	4a0a      	ldr	r2, [pc, #40]	; (801978c <FLASH_FlushCaches+0x88>)
 8019762:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8019766:	6013      	str	r3, [r2, #0]
 8019768:	4b08      	ldr	r3, [pc, #32]	; (801978c <FLASH_FlushCaches+0x88>)
 801976a:	681b      	ldr	r3, [r3, #0]
 801976c:	4a07      	ldr	r2, [pc, #28]	; (801978c <FLASH_FlushCaches+0x88>)
 801976e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8019772:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 8019774:	4b05      	ldr	r3, [pc, #20]	; (801978c <FLASH_FlushCaches+0x88>)
 8019776:	681b      	ldr	r3, [r3, #0]
 8019778:	4a04      	ldr	r2, [pc, #16]	; (801978c <FLASH_FlushCaches+0x88>)
 801977a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 801977e:	6013      	str	r3, [r2, #0]
  }
}
 8019780:	bf00      	nop
 8019782:	46bd      	mov	sp, r7
 8019784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019788:	4770      	bx	lr
 801978a:	bf00      	nop
 801978c:	40023c00 	.word	0x40023c00

08019790 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8019790:	b480      	push	{r7}
 8019792:	b089      	sub	sp, #36	; 0x24
 8019794:	af00      	add	r7, sp, #0
 8019796:	6078      	str	r0, [r7, #4]
 8019798:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 801979a:	2300      	movs	r3, #0
 801979c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 801979e:	2300      	movs	r3, #0
 80197a0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80197a2:	2300      	movs	r3, #0
 80197a4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80197a6:	2300      	movs	r3, #0
 80197a8:	61fb      	str	r3, [r7, #28]
 80197aa:	e165      	b.n	8019a78 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80197ac:	2201      	movs	r2, #1
 80197ae:	69fb      	ldr	r3, [r7, #28]
 80197b0:	fa02 f303 	lsl.w	r3, r2, r3
 80197b4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80197b6:	683b      	ldr	r3, [r7, #0]
 80197b8:	681b      	ldr	r3, [r3, #0]
 80197ba:	697a      	ldr	r2, [r7, #20]
 80197bc:	4013      	ands	r3, r2
 80197be:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80197c0:	693a      	ldr	r2, [r7, #16]
 80197c2:	697b      	ldr	r3, [r7, #20]
 80197c4:	429a      	cmp	r2, r3
 80197c6:	f040 8154 	bne.w	8019a72 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80197ca:	683b      	ldr	r3, [r7, #0]
 80197cc:	685b      	ldr	r3, [r3, #4]
 80197ce:	f003 0303 	and.w	r3, r3, #3
 80197d2:	2b01      	cmp	r3, #1
 80197d4:	d005      	beq.n	80197e2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80197d6:	683b      	ldr	r3, [r7, #0]
 80197d8:	685b      	ldr	r3, [r3, #4]
 80197da:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80197de:	2b02      	cmp	r3, #2
 80197e0:	d130      	bne.n	8019844 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80197e2:	687b      	ldr	r3, [r7, #4]
 80197e4:	689b      	ldr	r3, [r3, #8]
 80197e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80197e8:	69fb      	ldr	r3, [r7, #28]
 80197ea:	005b      	lsls	r3, r3, #1
 80197ec:	2203      	movs	r2, #3
 80197ee:	fa02 f303 	lsl.w	r3, r2, r3
 80197f2:	43db      	mvns	r3, r3
 80197f4:	69ba      	ldr	r2, [r7, #24]
 80197f6:	4013      	ands	r3, r2
 80197f8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80197fa:	683b      	ldr	r3, [r7, #0]
 80197fc:	68da      	ldr	r2, [r3, #12]
 80197fe:	69fb      	ldr	r3, [r7, #28]
 8019800:	005b      	lsls	r3, r3, #1
 8019802:	fa02 f303 	lsl.w	r3, r2, r3
 8019806:	69ba      	ldr	r2, [r7, #24]
 8019808:	4313      	orrs	r3, r2
 801980a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 801980c:	687b      	ldr	r3, [r7, #4]
 801980e:	69ba      	ldr	r2, [r7, #24]
 8019810:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8019812:	687b      	ldr	r3, [r7, #4]
 8019814:	685b      	ldr	r3, [r3, #4]
 8019816:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8019818:	2201      	movs	r2, #1
 801981a:	69fb      	ldr	r3, [r7, #28]
 801981c:	fa02 f303 	lsl.w	r3, r2, r3
 8019820:	43db      	mvns	r3, r3
 8019822:	69ba      	ldr	r2, [r7, #24]
 8019824:	4013      	ands	r3, r2
 8019826:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8019828:	683b      	ldr	r3, [r7, #0]
 801982a:	685b      	ldr	r3, [r3, #4]
 801982c:	091b      	lsrs	r3, r3, #4
 801982e:	f003 0201 	and.w	r2, r3, #1
 8019832:	69fb      	ldr	r3, [r7, #28]
 8019834:	fa02 f303 	lsl.w	r3, r2, r3
 8019838:	69ba      	ldr	r2, [r7, #24]
 801983a:	4313      	orrs	r3, r2
 801983c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 801983e:	687b      	ldr	r3, [r7, #4]
 8019840:	69ba      	ldr	r2, [r7, #24]
 8019842:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8019844:	683b      	ldr	r3, [r7, #0]
 8019846:	685b      	ldr	r3, [r3, #4]
 8019848:	f003 0303 	and.w	r3, r3, #3
 801984c:	2b03      	cmp	r3, #3
 801984e:	d017      	beq.n	8019880 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8019850:	687b      	ldr	r3, [r7, #4]
 8019852:	68db      	ldr	r3, [r3, #12]
 8019854:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8019856:	69fb      	ldr	r3, [r7, #28]
 8019858:	005b      	lsls	r3, r3, #1
 801985a:	2203      	movs	r2, #3
 801985c:	fa02 f303 	lsl.w	r3, r2, r3
 8019860:	43db      	mvns	r3, r3
 8019862:	69ba      	ldr	r2, [r7, #24]
 8019864:	4013      	ands	r3, r2
 8019866:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8019868:	683b      	ldr	r3, [r7, #0]
 801986a:	689a      	ldr	r2, [r3, #8]
 801986c:	69fb      	ldr	r3, [r7, #28]
 801986e:	005b      	lsls	r3, r3, #1
 8019870:	fa02 f303 	lsl.w	r3, r2, r3
 8019874:	69ba      	ldr	r2, [r7, #24]
 8019876:	4313      	orrs	r3, r2
 8019878:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 801987a:	687b      	ldr	r3, [r7, #4]
 801987c:	69ba      	ldr	r2, [r7, #24]
 801987e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8019880:	683b      	ldr	r3, [r7, #0]
 8019882:	685b      	ldr	r3, [r3, #4]
 8019884:	f003 0303 	and.w	r3, r3, #3
 8019888:	2b02      	cmp	r3, #2
 801988a:	d123      	bne.n	80198d4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 801988c:	69fb      	ldr	r3, [r7, #28]
 801988e:	08da      	lsrs	r2, r3, #3
 8019890:	687b      	ldr	r3, [r7, #4]
 8019892:	3208      	adds	r2, #8
 8019894:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8019898:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 801989a:	69fb      	ldr	r3, [r7, #28]
 801989c:	f003 0307 	and.w	r3, r3, #7
 80198a0:	009b      	lsls	r3, r3, #2
 80198a2:	220f      	movs	r2, #15
 80198a4:	fa02 f303 	lsl.w	r3, r2, r3
 80198a8:	43db      	mvns	r3, r3
 80198aa:	69ba      	ldr	r2, [r7, #24]
 80198ac:	4013      	ands	r3, r2
 80198ae:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80198b0:	683b      	ldr	r3, [r7, #0]
 80198b2:	691a      	ldr	r2, [r3, #16]
 80198b4:	69fb      	ldr	r3, [r7, #28]
 80198b6:	f003 0307 	and.w	r3, r3, #7
 80198ba:	009b      	lsls	r3, r3, #2
 80198bc:	fa02 f303 	lsl.w	r3, r2, r3
 80198c0:	69ba      	ldr	r2, [r7, #24]
 80198c2:	4313      	orrs	r3, r2
 80198c4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80198c6:	69fb      	ldr	r3, [r7, #28]
 80198c8:	08da      	lsrs	r2, r3, #3
 80198ca:	687b      	ldr	r3, [r7, #4]
 80198cc:	3208      	adds	r2, #8
 80198ce:	69b9      	ldr	r1, [r7, #24]
 80198d0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80198d4:	687b      	ldr	r3, [r7, #4]
 80198d6:	681b      	ldr	r3, [r3, #0]
 80198d8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80198da:	69fb      	ldr	r3, [r7, #28]
 80198dc:	005b      	lsls	r3, r3, #1
 80198de:	2203      	movs	r2, #3
 80198e0:	fa02 f303 	lsl.w	r3, r2, r3
 80198e4:	43db      	mvns	r3, r3
 80198e6:	69ba      	ldr	r2, [r7, #24]
 80198e8:	4013      	ands	r3, r2
 80198ea:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80198ec:	683b      	ldr	r3, [r7, #0]
 80198ee:	685b      	ldr	r3, [r3, #4]
 80198f0:	f003 0203 	and.w	r2, r3, #3
 80198f4:	69fb      	ldr	r3, [r7, #28]
 80198f6:	005b      	lsls	r3, r3, #1
 80198f8:	fa02 f303 	lsl.w	r3, r2, r3
 80198fc:	69ba      	ldr	r2, [r7, #24]
 80198fe:	4313      	orrs	r3, r2
 8019900:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8019902:	687b      	ldr	r3, [r7, #4]
 8019904:	69ba      	ldr	r2, [r7, #24]
 8019906:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8019908:	683b      	ldr	r3, [r7, #0]
 801990a:	685b      	ldr	r3, [r3, #4]
 801990c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8019910:	2b00      	cmp	r3, #0
 8019912:	f000 80ae 	beq.w	8019a72 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8019916:	2300      	movs	r3, #0
 8019918:	60fb      	str	r3, [r7, #12]
 801991a:	4b5d      	ldr	r3, [pc, #372]	; (8019a90 <HAL_GPIO_Init+0x300>)
 801991c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801991e:	4a5c      	ldr	r2, [pc, #368]	; (8019a90 <HAL_GPIO_Init+0x300>)
 8019920:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8019924:	6453      	str	r3, [r2, #68]	; 0x44
 8019926:	4b5a      	ldr	r3, [pc, #360]	; (8019a90 <HAL_GPIO_Init+0x300>)
 8019928:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801992a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 801992e:	60fb      	str	r3, [r7, #12]
 8019930:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8019932:	4a58      	ldr	r2, [pc, #352]	; (8019a94 <HAL_GPIO_Init+0x304>)
 8019934:	69fb      	ldr	r3, [r7, #28]
 8019936:	089b      	lsrs	r3, r3, #2
 8019938:	3302      	adds	r3, #2
 801993a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801993e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8019940:	69fb      	ldr	r3, [r7, #28]
 8019942:	f003 0303 	and.w	r3, r3, #3
 8019946:	009b      	lsls	r3, r3, #2
 8019948:	220f      	movs	r2, #15
 801994a:	fa02 f303 	lsl.w	r3, r2, r3
 801994e:	43db      	mvns	r3, r3
 8019950:	69ba      	ldr	r2, [r7, #24]
 8019952:	4013      	ands	r3, r2
 8019954:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8019956:	687b      	ldr	r3, [r7, #4]
 8019958:	4a4f      	ldr	r2, [pc, #316]	; (8019a98 <HAL_GPIO_Init+0x308>)
 801995a:	4293      	cmp	r3, r2
 801995c:	d025      	beq.n	80199aa <HAL_GPIO_Init+0x21a>
 801995e:	687b      	ldr	r3, [r7, #4]
 8019960:	4a4e      	ldr	r2, [pc, #312]	; (8019a9c <HAL_GPIO_Init+0x30c>)
 8019962:	4293      	cmp	r3, r2
 8019964:	d01f      	beq.n	80199a6 <HAL_GPIO_Init+0x216>
 8019966:	687b      	ldr	r3, [r7, #4]
 8019968:	4a4d      	ldr	r2, [pc, #308]	; (8019aa0 <HAL_GPIO_Init+0x310>)
 801996a:	4293      	cmp	r3, r2
 801996c:	d019      	beq.n	80199a2 <HAL_GPIO_Init+0x212>
 801996e:	687b      	ldr	r3, [r7, #4]
 8019970:	4a4c      	ldr	r2, [pc, #304]	; (8019aa4 <HAL_GPIO_Init+0x314>)
 8019972:	4293      	cmp	r3, r2
 8019974:	d013      	beq.n	801999e <HAL_GPIO_Init+0x20e>
 8019976:	687b      	ldr	r3, [r7, #4]
 8019978:	4a4b      	ldr	r2, [pc, #300]	; (8019aa8 <HAL_GPIO_Init+0x318>)
 801997a:	4293      	cmp	r3, r2
 801997c:	d00d      	beq.n	801999a <HAL_GPIO_Init+0x20a>
 801997e:	687b      	ldr	r3, [r7, #4]
 8019980:	4a4a      	ldr	r2, [pc, #296]	; (8019aac <HAL_GPIO_Init+0x31c>)
 8019982:	4293      	cmp	r3, r2
 8019984:	d007      	beq.n	8019996 <HAL_GPIO_Init+0x206>
 8019986:	687b      	ldr	r3, [r7, #4]
 8019988:	4a49      	ldr	r2, [pc, #292]	; (8019ab0 <HAL_GPIO_Init+0x320>)
 801998a:	4293      	cmp	r3, r2
 801998c:	d101      	bne.n	8019992 <HAL_GPIO_Init+0x202>
 801998e:	2306      	movs	r3, #6
 8019990:	e00c      	b.n	80199ac <HAL_GPIO_Init+0x21c>
 8019992:	2307      	movs	r3, #7
 8019994:	e00a      	b.n	80199ac <HAL_GPIO_Init+0x21c>
 8019996:	2305      	movs	r3, #5
 8019998:	e008      	b.n	80199ac <HAL_GPIO_Init+0x21c>
 801999a:	2304      	movs	r3, #4
 801999c:	e006      	b.n	80199ac <HAL_GPIO_Init+0x21c>
 801999e:	2303      	movs	r3, #3
 80199a0:	e004      	b.n	80199ac <HAL_GPIO_Init+0x21c>
 80199a2:	2302      	movs	r3, #2
 80199a4:	e002      	b.n	80199ac <HAL_GPIO_Init+0x21c>
 80199a6:	2301      	movs	r3, #1
 80199a8:	e000      	b.n	80199ac <HAL_GPIO_Init+0x21c>
 80199aa:	2300      	movs	r3, #0
 80199ac:	69fa      	ldr	r2, [r7, #28]
 80199ae:	f002 0203 	and.w	r2, r2, #3
 80199b2:	0092      	lsls	r2, r2, #2
 80199b4:	4093      	lsls	r3, r2
 80199b6:	69ba      	ldr	r2, [r7, #24]
 80199b8:	4313      	orrs	r3, r2
 80199ba:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80199bc:	4935      	ldr	r1, [pc, #212]	; (8019a94 <HAL_GPIO_Init+0x304>)
 80199be:	69fb      	ldr	r3, [r7, #28]
 80199c0:	089b      	lsrs	r3, r3, #2
 80199c2:	3302      	adds	r3, #2
 80199c4:	69ba      	ldr	r2, [r7, #24]
 80199c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80199ca:	4b3a      	ldr	r3, [pc, #232]	; (8019ab4 <HAL_GPIO_Init+0x324>)
 80199cc:	681b      	ldr	r3, [r3, #0]
 80199ce:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80199d0:	693b      	ldr	r3, [r7, #16]
 80199d2:	43db      	mvns	r3, r3
 80199d4:	69ba      	ldr	r2, [r7, #24]
 80199d6:	4013      	ands	r3, r2
 80199d8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80199da:	683b      	ldr	r3, [r7, #0]
 80199dc:	685b      	ldr	r3, [r3, #4]
 80199de:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80199e2:	2b00      	cmp	r3, #0
 80199e4:	d003      	beq.n	80199ee <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80199e6:	69ba      	ldr	r2, [r7, #24]
 80199e8:	693b      	ldr	r3, [r7, #16]
 80199ea:	4313      	orrs	r3, r2
 80199ec:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80199ee:	4a31      	ldr	r2, [pc, #196]	; (8019ab4 <HAL_GPIO_Init+0x324>)
 80199f0:	69bb      	ldr	r3, [r7, #24]
 80199f2:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80199f4:	4b2f      	ldr	r3, [pc, #188]	; (8019ab4 <HAL_GPIO_Init+0x324>)
 80199f6:	685b      	ldr	r3, [r3, #4]
 80199f8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80199fa:	693b      	ldr	r3, [r7, #16]
 80199fc:	43db      	mvns	r3, r3
 80199fe:	69ba      	ldr	r2, [r7, #24]
 8019a00:	4013      	ands	r3, r2
 8019a02:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8019a04:	683b      	ldr	r3, [r7, #0]
 8019a06:	685b      	ldr	r3, [r3, #4]
 8019a08:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8019a0c:	2b00      	cmp	r3, #0
 8019a0e:	d003      	beq.n	8019a18 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8019a10:	69ba      	ldr	r2, [r7, #24]
 8019a12:	693b      	ldr	r3, [r7, #16]
 8019a14:	4313      	orrs	r3, r2
 8019a16:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8019a18:	4a26      	ldr	r2, [pc, #152]	; (8019ab4 <HAL_GPIO_Init+0x324>)
 8019a1a:	69bb      	ldr	r3, [r7, #24]
 8019a1c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8019a1e:	4b25      	ldr	r3, [pc, #148]	; (8019ab4 <HAL_GPIO_Init+0x324>)
 8019a20:	689b      	ldr	r3, [r3, #8]
 8019a22:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8019a24:	693b      	ldr	r3, [r7, #16]
 8019a26:	43db      	mvns	r3, r3
 8019a28:	69ba      	ldr	r2, [r7, #24]
 8019a2a:	4013      	ands	r3, r2
 8019a2c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8019a2e:	683b      	ldr	r3, [r7, #0]
 8019a30:	685b      	ldr	r3, [r3, #4]
 8019a32:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8019a36:	2b00      	cmp	r3, #0
 8019a38:	d003      	beq.n	8019a42 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8019a3a:	69ba      	ldr	r2, [r7, #24]
 8019a3c:	693b      	ldr	r3, [r7, #16]
 8019a3e:	4313      	orrs	r3, r2
 8019a40:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8019a42:	4a1c      	ldr	r2, [pc, #112]	; (8019ab4 <HAL_GPIO_Init+0x324>)
 8019a44:	69bb      	ldr	r3, [r7, #24]
 8019a46:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8019a48:	4b1a      	ldr	r3, [pc, #104]	; (8019ab4 <HAL_GPIO_Init+0x324>)
 8019a4a:	68db      	ldr	r3, [r3, #12]
 8019a4c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8019a4e:	693b      	ldr	r3, [r7, #16]
 8019a50:	43db      	mvns	r3, r3
 8019a52:	69ba      	ldr	r2, [r7, #24]
 8019a54:	4013      	ands	r3, r2
 8019a56:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8019a58:	683b      	ldr	r3, [r7, #0]
 8019a5a:	685b      	ldr	r3, [r3, #4]
 8019a5c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8019a60:	2b00      	cmp	r3, #0
 8019a62:	d003      	beq.n	8019a6c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8019a64:	69ba      	ldr	r2, [r7, #24]
 8019a66:	693b      	ldr	r3, [r7, #16]
 8019a68:	4313      	orrs	r3, r2
 8019a6a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8019a6c:	4a11      	ldr	r2, [pc, #68]	; (8019ab4 <HAL_GPIO_Init+0x324>)
 8019a6e:	69bb      	ldr	r3, [r7, #24]
 8019a70:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8019a72:	69fb      	ldr	r3, [r7, #28]
 8019a74:	3301      	adds	r3, #1
 8019a76:	61fb      	str	r3, [r7, #28]
 8019a78:	69fb      	ldr	r3, [r7, #28]
 8019a7a:	2b0f      	cmp	r3, #15
 8019a7c:	f67f ae96 	bls.w	80197ac <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8019a80:	bf00      	nop
 8019a82:	bf00      	nop
 8019a84:	3724      	adds	r7, #36	; 0x24
 8019a86:	46bd      	mov	sp, r7
 8019a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019a8c:	4770      	bx	lr
 8019a8e:	bf00      	nop
 8019a90:	40023800 	.word	0x40023800
 8019a94:	40013800 	.word	0x40013800
 8019a98:	40020000 	.word	0x40020000
 8019a9c:	40020400 	.word	0x40020400
 8019aa0:	40020800 	.word	0x40020800
 8019aa4:	40020c00 	.word	0x40020c00
 8019aa8:	40021000 	.word	0x40021000
 8019aac:	40021400 	.word	0x40021400
 8019ab0:	40021800 	.word	0x40021800
 8019ab4:	40013c00 	.word	0x40013c00

08019ab8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8019ab8:	b480      	push	{r7}
 8019aba:	b085      	sub	sp, #20
 8019abc:	af00      	add	r7, sp, #0
 8019abe:	6078      	str	r0, [r7, #4]
 8019ac0:	460b      	mov	r3, r1
 8019ac2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8019ac4:	687b      	ldr	r3, [r7, #4]
 8019ac6:	691a      	ldr	r2, [r3, #16]
 8019ac8:	887b      	ldrh	r3, [r7, #2]
 8019aca:	4013      	ands	r3, r2
 8019acc:	2b00      	cmp	r3, #0
 8019ace:	d002      	beq.n	8019ad6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8019ad0:	2301      	movs	r3, #1
 8019ad2:	73fb      	strb	r3, [r7, #15]
 8019ad4:	e001      	b.n	8019ada <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8019ad6:	2300      	movs	r3, #0
 8019ad8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8019ada:	7bfb      	ldrb	r3, [r7, #15]
}
 8019adc:	4618      	mov	r0, r3
 8019ade:	3714      	adds	r7, #20
 8019ae0:	46bd      	mov	sp, r7
 8019ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019ae6:	4770      	bx	lr

08019ae8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8019ae8:	b480      	push	{r7}
 8019aea:	b083      	sub	sp, #12
 8019aec:	af00      	add	r7, sp, #0
 8019aee:	6078      	str	r0, [r7, #4]
 8019af0:	460b      	mov	r3, r1
 8019af2:	807b      	strh	r3, [r7, #2]
 8019af4:	4613      	mov	r3, r2
 8019af6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8019af8:	787b      	ldrb	r3, [r7, #1]
 8019afa:	2b00      	cmp	r3, #0
 8019afc:	d003      	beq.n	8019b06 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8019afe:	887a      	ldrh	r2, [r7, #2]
 8019b00:	687b      	ldr	r3, [r7, #4]
 8019b02:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8019b04:	e003      	b.n	8019b0e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8019b06:	887b      	ldrh	r3, [r7, #2]
 8019b08:	041a      	lsls	r2, r3, #16
 8019b0a:	687b      	ldr	r3, [r7, #4]
 8019b0c:	619a      	str	r2, [r3, #24]
}
 8019b0e:	bf00      	nop
 8019b10:	370c      	adds	r7, #12
 8019b12:	46bd      	mov	sp, r7
 8019b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019b18:	4770      	bx	lr

08019b1a <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8019b1a:	b5f0      	push	{r4, r5, r6, r7, lr}
 8019b1c:	b08f      	sub	sp, #60	; 0x3c
 8019b1e:	af0a      	add	r7, sp, #40	; 0x28
 8019b20:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8019b22:	687b      	ldr	r3, [r7, #4]
 8019b24:	2b00      	cmp	r3, #0
 8019b26:	d101      	bne.n	8019b2c <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8019b28:	2301      	movs	r3, #1
 8019b2a:	e116      	b.n	8019d5a <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8019b2c:	687b      	ldr	r3, [r7, #4]
 8019b2e:	681b      	ldr	r3, [r3, #0]
 8019b30:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8019b32:	687b      	ldr	r3, [r7, #4]
 8019b34:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8019b38:	b2db      	uxtb	r3, r3
 8019b3a:	2b00      	cmp	r3, #0
 8019b3c:	d106      	bne.n	8019b4c <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8019b3e:	687b      	ldr	r3, [r7, #4]
 8019b40:	2200      	movs	r2, #0
 8019b42:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8019b46:	6878      	ldr	r0, [r7, #4]
 8019b48:	f008 fc38 	bl	80223bc <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8019b4c:	687b      	ldr	r3, [r7, #4]
 8019b4e:	2203      	movs	r2, #3
 8019b50:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8019b54:	68bb      	ldr	r3, [r7, #8]
 8019b56:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8019b58:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8019b5c:	2b00      	cmp	r3, #0
 8019b5e:	d102      	bne.n	8019b66 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8019b60:	687b      	ldr	r3, [r7, #4]
 8019b62:	2200      	movs	r2, #0
 8019b64:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8019b66:	687b      	ldr	r3, [r7, #4]
 8019b68:	681b      	ldr	r3, [r3, #0]
 8019b6a:	4618      	mov	r0, r3
 8019b6c:	f004 f8af 	bl	801dcce <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8019b70:	687b      	ldr	r3, [r7, #4]
 8019b72:	681b      	ldr	r3, [r3, #0]
 8019b74:	603b      	str	r3, [r7, #0]
 8019b76:	687e      	ldr	r6, [r7, #4]
 8019b78:	466d      	mov	r5, sp
 8019b7a:	f106 0410 	add.w	r4, r6, #16
 8019b7e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8019b80:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8019b82:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8019b84:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8019b86:	e894 0003 	ldmia.w	r4, {r0, r1}
 8019b8a:	e885 0003 	stmia.w	r5, {r0, r1}
 8019b8e:	1d33      	adds	r3, r6, #4
 8019b90:	cb0e      	ldmia	r3, {r1, r2, r3}
 8019b92:	6838      	ldr	r0, [r7, #0]
 8019b94:	f003 ff86 	bl	801daa4 <USB_CoreInit>
 8019b98:	4603      	mov	r3, r0
 8019b9a:	2b00      	cmp	r3, #0
 8019b9c:	d005      	beq.n	8019baa <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8019b9e:	687b      	ldr	r3, [r7, #4]
 8019ba0:	2202      	movs	r2, #2
 8019ba2:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8019ba6:	2301      	movs	r3, #1
 8019ba8:	e0d7      	b.n	8019d5a <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8019baa:	687b      	ldr	r3, [r7, #4]
 8019bac:	681b      	ldr	r3, [r3, #0]
 8019bae:	2100      	movs	r1, #0
 8019bb0:	4618      	mov	r0, r3
 8019bb2:	f004 f89d 	bl	801dcf0 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8019bb6:	2300      	movs	r3, #0
 8019bb8:	73fb      	strb	r3, [r7, #15]
 8019bba:	e04a      	b.n	8019c52 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8019bbc:	7bfa      	ldrb	r2, [r7, #15]
 8019bbe:	6879      	ldr	r1, [r7, #4]
 8019bc0:	4613      	mov	r3, r2
 8019bc2:	00db      	lsls	r3, r3, #3
 8019bc4:	1a9b      	subs	r3, r3, r2
 8019bc6:	009b      	lsls	r3, r3, #2
 8019bc8:	440b      	add	r3, r1
 8019bca:	333d      	adds	r3, #61	; 0x3d
 8019bcc:	2201      	movs	r2, #1
 8019bce:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8019bd0:	7bfa      	ldrb	r2, [r7, #15]
 8019bd2:	6879      	ldr	r1, [r7, #4]
 8019bd4:	4613      	mov	r3, r2
 8019bd6:	00db      	lsls	r3, r3, #3
 8019bd8:	1a9b      	subs	r3, r3, r2
 8019bda:	009b      	lsls	r3, r3, #2
 8019bdc:	440b      	add	r3, r1
 8019bde:	333c      	adds	r3, #60	; 0x3c
 8019be0:	7bfa      	ldrb	r2, [r7, #15]
 8019be2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8019be4:	7bfa      	ldrb	r2, [r7, #15]
 8019be6:	7bfb      	ldrb	r3, [r7, #15]
 8019be8:	b298      	uxth	r0, r3
 8019bea:	6879      	ldr	r1, [r7, #4]
 8019bec:	4613      	mov	r3, r2
 8019bee:	00db      	lsls	r3, r3, #3
 8019bf0:	1a9b      	subs	r3, r3, r2
 8019bf2:	009b      	lsls	r3, r3, #2
 8019bf4:	440b      	add	r3, r1
 8019bf6:	3342      	adds	r3, #66	; 0x42
 8019bf8:	4602      	mov	r2, r0
 8019bfa:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8019bfc:	7bfa      	ldrb	r2, [r7, #15]
 8019bfe:	6879      	ldr	r1, [r7, #4]
 8019c00:	4613      	mov	r3, r2
 8019c02:	00db      	lsls	r3, r3, #3
 8019c04:	1a9b      	subs	r3, r3, r2
 8019c06:	009b      	lsls	r3, r3, #2
 8019c08:	440b      	add	r3, r1
 8019c0a:	333f      	adds	r3, #63	; 0x3f
 8019c0c:	2200      	movs	r2, #0
 8019c0e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8019c10:	7bfa      	ldrb	r2, [r7, #15]
 8019c12:	6879      	ldr	r1, [r7, #4]
 8019c14:	4613      	mov	r3, r2
 8019c16:	00db      	lsls	r3, r3, #3
 8019c18:	1a9b      	subs	r3, r3, r2
 8019c1a:	009b      	lsls	r3, r3, #2
 8019c1c:	440b      	add	r3, r1
 8019c1e:	3344      	adds	r3, #68	; 0x44
 8019c20:	2200      	movs	r2, #0
 8019c22:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8019c24:	7bfa      	ldrb	r2, [r7, #15]
 8019c26:	6879      	ldr	r1, [r7, #4]
 8019c28:	4613      	mov	r3, r2
 8019c2a:	00db      	lsls	r3, r3, #3
 8019c2c:	1a9b      	subs	r3, r3, r2
 8019c2e:	009b      	lsls	r3, r3, #2
 8019c30:	440b      	add	r3, r1
 8019c32:	3348      	adds	r3, #72	; 0x48
 8019c34:	2200      	movs	r2, #0
 8019c36:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8019c38:	7bfa      	ldrb	r2, [r7, #15]
 8019c3a:	6879      	ldr	r1, [r7, #4]
 8019c3c:	4613      	mov	r3, r2
 8019c3e:	00db      	lsls	r3, r3, #3
 8019c40:	1a9b      	subs	r3, r3, r2
 8019c42:	009b      	lsls	r3, r3, #2
 8019c44:	440b      	add	r3, r1
 8019c46:	3350      	adds	r3, #80	; 0x50
 8019c48:	2200      	movs	r2, #0
 8019c4a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8019c4c:	7bfb      	ldrb	r3, [r7, #15]
 8019c4e:	3301      	adds	r3, #1
 8019c50:	73fb      	strb	r3, [r7, #15]
 8019c52:	7bfa      	ldrb	r2, [r7, #15]
 8019c54:	687b      	ldr	r3, [r7, #4]
 8019c56:	685b      	ldr	r3, [r3, #4]
 8019c58:	429a      	cmp	r2, r3
 8019c5a:	d3af      	bcc.n	8019bbc <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8019c5c:	2300      	movs	r3, #0
 8019c5e:	73fb      	strb	r3, [r7, #15]
 8019c60:	e044      	b.n	8019cec <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8019c62:	7bfa      	ldrb	r2, [r7, #15]
 8019c64:	6879      	ldr	r1, [r7, #4]
 8019c66:	4613      	mov	r3, r2
 8019c68:	00db      	lsls	r3, r3, #3
 8019c6a:	1a9b      	subs	r3, r3, r2
 8019c6c:	009b      	lsls	r3, r3, #2
 8019c6e:	440b      	add	r3, r1
 8019c70:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8019c74:	2200      	movs	r2, #0
 8019c76:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8019c78:	7bfa      	ldrb	r2, [r7, #15]
 8019c7a:	6879      	ldr	r1, [r7, #4]
 8019c7c:	4613      	mov	r3, r2
 8019c7e:	00db      	lsls	r3, r3, #3
 8019c80:	1a9b      	subs	r3, r3, r2
 8019c82:	009b      	lsls	r3, r3, #2
 8019c84:	440b      	add	r3, r1
 8019c86:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8019c8a:	7bfa      	ldrb	r2, [r7, #15]
 8019c8c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8019c8e:	7bfa      	ldrb	r2, [r7, #15]
 8019c90:	6879      	ldr	r1, [r7, #4]
 8019c92:	4613      	mov	r3, r2
 8019c94:	00db      	lsls	r3, r3, #3
 8019c96:	1a9b      	subs	r3, r3, r2
 8019c98:	009b      	lsls	r3, r3, #2
 8019c9a:	440b      	add	r3, r1
 8019c9c:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8019ca0:	2200      	movs	r2, #0
 8019ca2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8019ca4:	7bfa      	ldrb	r2, [r7, #15]
 8019ca6:	6879      	ldr	r1, [r7, #4]
 8019ca8:	4613      	mov	r3, r2
 8019caa:	00db      	lsls	r3, r3, #3
 8019cac:	1a9b      	subs	r3, r3, r2
 8019cae:	009b      	lsls	r3, r3, #2
 8019cb0:	440b      	add	r3, r1
 8019cb2:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8019cb6:	2200      	movs	r2, #0
 8019cb8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8019cba:	7bfa      	ldrb	r2, [r7, #15]
 8019cbc:	6879      	ldr	r1, [r7, #4]
 8019cbe:	4613      	mov	r3, r2
 8019cc0:	00db      	lsls	r3, r3, #3
 8019cc2:	1a9b      	subs	r3, r3, r2
 8019cc4:	009b      	lsls	r3, r3, #2
 8019cc6:	440b      	add	r3, r1
 8019cc8:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8019ccc:	2200      	movs	r2, #0
 8019cce:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8019cd0:	7bfa      	ldrb	r2, [r7, #15]
 8019cd2:	6879      	ldr	r1, [r7, #4]
 8019cd4:	4613      	mov	r3, r2
 8019cd6:	00db      	lsls	r3, r3, #3
 8019cd8:	1a9b      	subs	r3, r3, r2
 8019cda:	009b      	lsls	r3, r3, #2
 8019cdc:	440b      	add	r3, r1
 8019cde:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8019ce2:	2200      	movs	r2, #0
 8019ce4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8019ce6:	7bfb      	ldrb	r3, [r7, #15]
 8019ce8:	3301      	adds	r3, #1
 8019cea:	73fb      	strb	r3, [r7, #15]
 8019cec:	7bfa      	ldrb	r2, [r7, #15]
 8019cee:	687b      	ldr	r3, [r7, #4]
 8019cf0:	685b      	ldr	r3, [r3, #4]
 8019cf2:	429a      	cmp	r2, r3
 8019cf4:	d3b5      	bcc.n	8019c62 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8019cf6:	687b      	ldr	r3, [r7, #4]
 8019cf8:	681b      	ldr	r3, [r3, #0]
 8019cfa:	603b      	str	r3, [r7, #0]
 8019cfc:	687e      	ldr	r6, [r7, #4]
 8019cfe:	466d      	mov	r5, sp
 8019d00:	f106 0410 	add.w	r4, r6, #16
 8019d04:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8019d06:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8019d08:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8019d0a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8019d0c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8019d10:	e885 0003 	stmia.w	r5, {r0, r1}
 8019d14:	1d33      	adds	r3, r6, #4
 8019d16:	cb0e      	ldmia	r3, {r1, r2, r3}
 8019d18:	6838      	ldr	r0, [r7, #0]
 8019d1a:	f004 f835 	bl	801dd88 <USB_DevInit>
 8019d1e:	4603      	mov	r3, r0
 8019d20:	2b00      	cmp	r3, #0
 8019d22:	d005      	beq.n	8019d30 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8019d24:	687b      	ldr	r3, [r7, #4]
 8019d26:	2202      	movs	r2, #2
 8019d28:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8019d2c:	2301      	movs	r3, #1
 8019d2e:	e014      	b.n	8019d5a <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8019d30:	687b      	ldr	r3, [r7, #4]
 8019d32:	2200      	movs	r2, #0
 8019d34:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8019d38:	687b      	ldr	r3, [r7, #4]
 8019d3a:	2201      	movs	r2, #1
 8019d3c:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8019d40:	687b      	ldr	r3, [r7, #4]
 8019d42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019d44:	2b01      	cmp	r3, #1
 8019d46:	d102      	bne.n	8019d4e <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8019d48:	6878      	ldr	r0, [r7, #4]
 8019d4a:	f001 f8bf 	bl	801aecc <HAL_PCDEx_ActivateLPM>
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8019d4e:	687b      	ldr	r3, [r7, #4]
 8019d50:	681b      	ldr	r3, [r3, #0]
 8019d52:	4618      	mov	r0, r3
 8019d54:	f005 f8a4 	bl	801eea0 <USB_DevDisconnect>

  return HAL_OK;
 8019d58:	2300      	movs	r3, #0
}
 8019d5a:	4618      	mov	r0, r3
 8019d5c:	3714      	adds	r7, #20
 8019d5e:	46bd      	mov	sp, r7
 8019d60:	bdf0      	pop	{r4, r5, r6, r7, pc}

08019d62 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8019d62:	b580      	push	{r7, lr}
 8019d64:	b084      	sub	sp, #16
 8019d66:	af00      	add	r7, sp, #0
 8019d68:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8019d6a:	687b      	ldr	r3, [r7, #4]
 8019d6c:	681b      	ldr	r3, [r3, #0]
 8019d6e:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8019d70:	687b      	ldr	r3, [r7, #4]
 8019d72:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8019d76:	2b01      	cmp	r3, #1
 8019d78:	d101      	bne.n	8019d7e <HAL_PCD_Start+0x1c>
 8019d7a:	2302      	movs	r3, #2
 8019d7c:	e020      	b.n	8019dc0 <HAL_PCD_Start+0x5e>
 8019d7e:	687b      	ldr	r3, [r7, #4]
 8019d80:	2201      	movs	r2, #1
 8019d82:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8019d86:	687b      	ldr	r3, [r7, #4]
 8019d88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8019d8a:	2b01      	cmp	r3, #1
 8019d8c:	d109      	bne.n	8019da2 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8019d8e:	687b      	ldr	r3, [r7, #4]
 8019d90:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8019d92:	2b01      	cmp	r3, #1
 8019d94:	d005      	beq.n	8019da2 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8019d96:	68fb      	ldr	r3, [r7, #12]
 8019d98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8019d9a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8019d9e:	68fb      	ldr	r3, [r7, #12]
 8019da0:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8019da2:	687b      	ldr	r3, [r7, #4]
 8019da4:	681b      	ldr	r3, [r3, #0]
 8019da6:	4618      	mov	r0, r3
 8019da8:	f003 ff80 	bl	801dcac <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8019dac:	687b      	ldr	r3, [r7, #4]
 8019dae:	681b      	ldr	r3, [r3, #0]
 8019db0:	4618      	mov	r0, r3
 8019db2:	f005 f854 	bl	801ee5e <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8019db6:	687b      	ldr	r3, [r7, #4]
 8019db8:	2200      	movs	r2, #0
 8019dba:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8019dbe:	2300      	movs	r3, #0
}
 8019dc0:	4618      	mov	r0, r3
 8019dc2:	3710      	adds	r7, #16
 8019dc4:	46bd      	mov	sp, r7
 8019dc6:	bd80      	pop	{r7, pc}

08019dc8 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8019dc8:	b590      	push	{r4, r7, lr}
 8019dca:	b08d      	sub	sp, #52	; 0x34
 8019dcc:	af00      	add	r7, sp, #0
 8019dce:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8019dd0:	687b      	ldr	r3, [r7, #4]
 8019dd2:	681b      	ldr	r3, [r3, #0]
 8019dd4:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8019dd6:	6a3b      	ldr	r3, [r7, #32]
 8019dd8:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t temp;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8019dda:	687b      	ldr	r3, [r7, #4]
 8019ddc:	681b      	ldr	r3, [r3, #0]
 8019dde:	4618      	mov	r0, r3
 8019de0:	f005 f912 	bl	801f008 <USB_GetMode>
 8019de4:	4603      	mov	r3, r0
 8019de6:	2b00      	cmp	r3, #0
 8019de8:	f040 83ca 	bne.w	801a580 <HAL_PCD_IRQHandler+0x7b8>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8019dec:	687b      	ldr	r3, [r7, #4]
 8019dee:	681b      	ldr	r3, [r3, #0]
 8019df0:	4618      	mov	r0, r3
 8019df2:	f005 f876 	bl	801eee2 <USB_ReadInterrupts>
 8019df6:	4603      	mov	r3, r0
 8019df8:	2b00      	cmp	r3, #0
 8019dfa:	f000 83c0 	beq.w	801a57e <HAL_PCD_IRQHandler+0x7b6>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8019dfe:	687b      	ldr	r3, [r7, #4]
 8019e00:	681b      	ldr	r3, [r3, #0]
 8019e02:	4618      	mov	r0, r3
 8019e04:	f005 f86d 	bl	801eee2 <USB_ReadInterrupts>
 8019e08:	4603      	mov	r3, r0
 8019e0a:	f003 0302 	and.w	r3, r3, #2
 8019e0e:	2b02      	cmp	r3, #2
 8019e10:	d107      	bne.n	8019e22 <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8019e12:	687b      	ldr	r3, [r7, #4]
 8019e14:	681b      	ldr	r3, [r3, #0]
 8019e16:	695a      	ldr	r2, [r3, #20]
 8019e18:	687b      	ldr	r3, [r7, #4]
 8019e1a:	681b      	ldr	r3, [r3, #0]
 8019e1c:	f002 0202 	and.w	r2, r2, #2
 8019e20:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8019e22:	687b      	ldr	r3, [r7, #4]
 8019e24:	681b      	ldr	r3, [r3, #0]
 8019e26:	4618      	mov	r0, r3
 8019e28:	f005 f85b 	bl	801eee2 <USB_ReadInterrupts>
 8019e2c:	4603      	mov	r3, r0
 8019e2e:	f003 0310 	and.w	r3, r3, #16
 8019e32:	2b10      	cmp	r3, #16
 8019e34:	d161      	bne.n	8019efa <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8019e36:	687b      	ldr	r3, [r7, #4]
 8019e38:	681b      	ldr	r3, [r3, #0]
 8019e3a:	699a      	ldr	r2, [r3, #24]
 8019e3c:	687b      	ldr	r3, [r7, #4]
 8019e3e:	681b      	ldr	r3, [r3, #0]
 8019e40:	f022 0210 	bic.w	r2, r2, #16
 8019e44:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 8019e46:	6a3b      	ldr	r3, [r7, #32]
 8019e48:	6a1b      	ldr	r3, [r3, #32]
 8019e4a:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 8019e4c:	69bb      	ldr	r3, [r7, #24]
 8019e4e:	f003 020f 	and.w	r2, r3, #15
 8019e52:	4613      	mov	r3, r2
 8019e54:	00db      	lsls	r3, r3, #3
 8019e56:	1a9b      	subs	r3, r3, r2
 8019e58:	009b      	lsls	r3, r3, #2
 8019e5a:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8019e5e:	687a      	ldr	r2, [r7, #4]
 8019e60:	4413      	add	r3, r2
 8019e62:	3304      	adds	r3, #4
 8019e64:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8019e66:	69bb      	ldr	r3, [r7, #24]
 8019e68:	0c5b      	lsrs	r3, r3, #17
 8019e6a:	f003 030f 	and.w	r3, r3, #15
 8019e6e:	2b02      	cmp	r3, #2
 8019e70:	d124      	bne.n	8019ebc <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 8019e72:	69ba      	ldr	r2, [r7, #24]
 8019e74:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8019e78:	4013      	ands	r3, r2
 8019e7a:	2b00      	cmp	r3, #0
 8019e7c:	d035      	beq.n	8019eea <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8019e7e:	697b      	ldr	r3, [r7, #20]
 8019e80:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 8019e82:	69bb      	ldr	r3, [r7, #24]
 8019e84:	091b      	lsrs	r3, r3, #4
 8019e86:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8019e88:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8019e8c:	b29b      	uxth	r3, r3
 8019e8e:	461a      	mov	r2, r3
 8019e90:	6a38      	ldr	r0, [r7, #32]
 8019e92:	f004 fe92 	bl	801ebba <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8019e96:	697b      	ldr	r3, [r7, #20]
 8019e98:	68da      	ldr	r2, [r3, #12]
 8019e9a:	69bb      	ldr	r3, [r7, #24]
 8019e9c:	091b      	lsrs	r3, r3, #4
 8019e9e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8019ea2:	441a      	add	r2, r3
 8019ea4:	697b      	ldr	r3, [r7, #20]
 8019ea6:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8019ea8:	697b      	ldr	r3, [r7, #20]
 8019eaa:	699a      	ldr	r2, [r3, #24]
 8019eac:	69bb      	ldr	r3, [r7, #24]
 8019eae:	091b      	lsrs	r3, r3, #4
 8019eb0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8019eb4:	441a      	add	r2, r3
 8019eb6:	697b      	ldr	r3, [r7, #20]
 8019eb8:	619a      	str	r2, [r3, #24]
 8019eba:	e016      	b.n	8019eea <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 8019ebc:	69bb      	ldr	r3, [r7, #24]
 8019ebe:	0c5b      	lsrs	r3, r3, #17
 8019ec0:	f003 030f 	and.w	r3, r3, #15
 8019ec4:	2b06      	cmp	r3, #6
 8019ec6:	d110      	bne.n	8019eea <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8019ec8:	687b      	ldr	r3, [r7, #4]
 8019eca:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8019ece:	2208      	movs	r2, #8
 8019ed0:	4619      	mov	r1, r3
 8019ed2:	6a38      	ldr	r0, [r7, #32]
 8019ed4:	f004 fe71 	bl	801ebba <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8019ed8:	697b      	ldr	r3, [r7, #20]
 8019eda:	699a      	ldr	r2, [r3, #24]
 8019edc:	69bb      	ldr	r3, [r7, #24]
 8019ede:	091b      	lsrs	r3, r3, #4
 8019ee0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8019ee4:	441a      	add	r2, r3
 8019ee6:	697b      	ldr	r3, [r7, #20]
 8019ee8:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8019eea:	687b      	ldr	r3, [r7, #4]
 8019eec:	681b      	ldr	r3, [r3, #0]
 8019eee:	699a      	ldr	r2, [r3, #24]
 8019ef0:	687b      	ldr	r3, [r7, #4]
 8019ef2:	681b      	ldr	r3, [r3, #0]
 8019ef4:	f042 0210 	orr.w	r2, r2, #16
 8019ef8:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8019efa:	687b      	ldr	r3, [r7, #4]
 8019efc:	681b      	ldr	r3, [r3, #0]
 8019efe:	4618      	mov	r0, r3
 8019f00:	f004 ffef 	bl	801eee2 <USB_ReadInterrupts>
 8019f04:	4603      	mov	r3, r0
 8019f06:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8019f0a:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8019f0e:	d16e      	bne.n	8019fee <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 8019f10:	2300      	movs	r3, #0
 8019f12:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8019f14:	687b      	ldr	r3, [r7, #4]
 8019f16:	681b      	ldr	r3, [r3, #0]
 8019f18:	4618      	mov	r0, r3
 8019f1a:	f004 fff5 	bl	801ef08 <USB_ReadDevAllOutEpInterrupt>
 8019f1e:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8019f20:	e062      	b.n	8019fe8 <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 8019f22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019f24:	f003 0301 	and.w	r3, r3, #1
 8019f28:	2b00      	cmp	r3, #0
 8019f2a:	d057      	beq.n	8019fdc <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8019f2c:	687b      	ldr	r3, [r7, #4]
 8019f2e:	681b      	ldr	r3, [r3, #0]
 8019f30:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8019f32:	b2d2      	uxtb	r2, r2
 8019f34:	4611      	mov	r1, r2
 8019f36:	4618      	mov	r0, r3
 8019f38:	f005 f81a 	bl	801ef70 <USB_ReadDevOutEPInterrupt>
 8019f3c:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8019f3e:	693b      	ldr	r3, [r7, #16]
 8019f40:	f003 0301 	and.w	r3, r3, #1
 8019f44:	2b00      	cmp	r3, #0
 8019f46:	d00c      	beq.n	8019f62 <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8019f48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019f4a:	015a      	lsls	r2, r3, #5
 8019f4c:	69fb      	ldr	r3, [r7, #28]
 8019f4e:	4413      	add	r3, r2
 8019f50:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8019f54:	461a      	mov	r2, r3
 8019f56:	2301      	movs	r3, #1
 8019f58:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8019f5a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8019f5c:	6878      	ldr	r0, [r7, #4]
 8019f5e:	f000 fe0b 	bl	801ab78 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8019f62:	693b      	ldr	r3, [r7, #16]
 8019f64:	f003 0308 	and.w	r3, r3, #8
 8019f68:	2b00      	cmp	r3, #0
 8019f6a:	d00c      	beq.n	8019f86 <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8019f6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019f6e:	015a      	lsls	r2, r3, #5
 8019f70:	69fb      	ldr	r3, [r7, #28]
 8019f72:	4413      	add	r3, r2
 8019f74:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8019f78:	461a      	mov	r2, r3
 8019f7a:	2308      	movs	r3, #8
 8019f7c:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8019f7e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8019f80:	6878      	ldr	r0, [r7, #4]
 8019f82:	f000 ff05 	bl	801ad90 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8019f86:	693b      	ldr	r3, [r7, #16]
 8019f88:	f003 0310 	and.w	r3, r3, #16
 8019f8c:	2b00      	cmp	r3, #0
 8019f8e:	d008      	beq.n	8019fa2 <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8019f90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019f92:	015a      	lsls	r2, r3, #5
 8019f94:	69fb      	ldr	r3, [r7, #28]
 8019f96:	4413      	add	r3, r2
 8019f98:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8019f9c:	461a      	mov	r2, r3
 8019f9e:	2310      	movs	r3, #16
 8019fa0:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8019fa2:	693b      	ldr	r3, [r7, #16]
 8019fa4:	f003 0320 	and.w	r3, r3, #32
 8019fa8:	2b00      	cmp	r3, #0
 8019faa:	d008      	beq.n	8019fbe <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8019fac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019fae:	015a      	lsls	r2, r3, #5
 8019fb0:	69fb      	ldr	r3, [r7, #28]
 8019fb2:	4413      	add	r3, r2
 8019fb4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8019fb8:	461a      	mov	r2, r3
 8019fba:	2320      	movs	r3, #32
 8019fbc:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8019fbe:	693b      	ldr	r3, [r7, #16]
 8019fc0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8019fc4:	2b00      	cmp	r3, #0
 8019fc6:	d009      	beq.n	8019fdc <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8019fc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019fca:	015a      	lsls	r2, r3, #5
 8019fcc:	69fb      	ldr	r3, [r7, #28]
 8019fce:	4413      	add	r3, r2
 8019fd0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8019fd4:	461a      	mov	r2, r3
 8019fd6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8019fda:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8019fdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019fde:	3301      	adds	r3, #1
 8019fe0:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8019fe2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019fe4:	085b      	lsrs	r3, r3, #1
 8019fe6:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8019fe8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019fea:	2b00      	cmp	r3, #0
 8019fec:	d199      	bne.n	8019f22 <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8019fee:	687b      	ldr	r3, [r7, #4]
 8019ff0:	681b      	ldr	r3, [r3, #0]
 8019ff2:	4618      	mov	r0, r3
 8019ff4:	f004 ff75 	bl	801eee2 <USB_ReadInterrupts>
 8019ff8:	4603      	mov	r3, r0
 8019ffa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8019ffe:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 801a002:	f040 80c0 	bne.w	801a186 <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 801a006:	687b      	ldr	r3, [r7, #4]
 801a008:	681b      	ldr	r3, [r3, #0]
 801a00a:	4618      	mov	r0, r3
 801a00c:	f004 ff96 	bl	801ef3c <USB_ReadDevAllInEpInterrupt>
 801a010:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 801a012:	2300      	movs	r3, #0
 801a014:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 801a016:	e0b2      	b.n	801a17e <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 801a018:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a01a:	f003 0301 	and.w	r3, r3, #1
 801a01e:	2b00      	cmp	r3, #0
 801a020:	f000 80a7 	beq.w	801a172 <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 801a024:	687b      	ldr	r3, [r7, #4]
 801a026:	681b      	ldr	r3, [r3, #0]
 801a028:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801a02a:	b2d2      	uxtb	r2, r2
 801a02c:	4611      	mov	r1, r2
 801a02e:	4618      	mov	r0, r3
 801a030:	f004 ffbc 	bl	801efac <USB_ReadDevInEPInterrupt>
 801a034:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 801a036:	693b      	ldr	r3, [r7, #16]
 801a038:	f003 0301 	and.w	r3, r3, #1
 801a03c:	2b00      	cmp	r3, #0
 801a03e:	d057      	beq.n	801a0f0 <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 801a040:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a042:	f003 030f 	and.w	r3, r3, #15
 801a046:	2201      	movs	r2, #1
 801a048:	fa02 f303 	lsl.w	r3, r2, r3
 801a04c:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 801a04e:	69fb      	ldr	r3, [r7, #28]
 801a050:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801a054:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 801a056:	68fb      	ldr	r3, [r7, #12]
 801a058:	43db      	mvns	r3, r3
 801a05a:	69f9      	ldr	r1, [r7, #28]
 801a05c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 801a060:	4013      	ands	r3, r2
 801a062:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 801a064:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a066:	015a      	lsls	r2, r3, #5
 801a068:	69fb      	ldr	r3, [r7, #28]
 801a06a:	4413      	add	r3, r2
 801a06c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801a070:	461a      	mov	r2, r3
 801a072:	2301      	movs	r3, #1
 801a074:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 801a076:	687b      	ldr	r3, [r7, #4]
 801a078:	691b      	ldr	r3, [r3, #16]
 801a07a:	2b01      	cmp	r3, #1
 801a07c:	d132      	bne.n	801a0e4 <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 801a07e:	6879      	ldr	r1, [r7, #4]
 801a080:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801a082:	4613      	mov	r3, r2
 801a084:	00db      	lsls	r3, r3, #3
 801a086:	1a9b      	subs	r3, r3, r2
 801a088:	009b      	lsls	r3, r3, #2
 801a08a:	440b      	add	r3, r1
 801a08c:	3348      	adds	r3, #72	; 0x48
 801a08e:	6819      	ldr	r1, [r3, #0]
 801a090:	6878      	ldr	r0, [r7, #4]
 801a092:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801a094:	4613      	mov	r3, r2
 801a096:	00db      	lsls	r3, r3, #3
 801a098:	1a9b      	subs	r3, r3, r2
 801a09a:	009b      	lsls	r3, r3, #2
 801a09c:	4403      	add	r3, r0
 801a09e:	3344      	adds	r3, #68	; 0x44
 801a0a0:	681b      	ldr	r3, [r3, #0]
 801a0a2:	4419      	add	r1, r3
 801a0a4:	6878      	ldr	r0, [r7, #4]
 801a0a6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801a0a8:	4613      	mov	r3, r2
 801a0aa:	00db      	lsls	r3, r3, #3
 801a0ac:	1a9b      	subs	r3, r3, r2
 801a0ae:	009b      	lsls	r3, r3, #2
 801a0b0:	4403      	add	r3, r0
 801a0b2:	3348      	adds	r3, #72	; 0x48
 801a0b4:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 801a0b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a0b8:	2b00      	cmp	r3, #0
 801a0ba:	d113      	bne.n	801a0e4 <HAL_PCD_IRQHandler+0x31c>
 801a0bc:	6879      	ldr	r1, [r7, #4]
 801a0be:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801a0c0:	4613      	mov	r3, r2
 801a0c2:	00db      	lsls	r3, r3, #3
 801a0c4:	1a9b      	subs	r3, r3, r2
 801a0c6:	009b      	lsls	r3, r3, #2
 801a0c8:	440b      	add	r3, r1
 801a0ca:	3350      	adds	r3, #80	; 0x50
 801a0cc:	681b      	ldr	r3, [r3, #0]
 801a0ce:	2b00      	cmp	r3, #0
 801a0d0:	d108      	bne.n	801a0e4 <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 801a0d2:	687b      	ldr	r3, [r7, #4]
 801a0d4:	6818      	ldr	r0, [r3, #0]
 801a0d6:	687b      	ldr	r3, [r7, #4]
 801a0d8:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 801a0dc:	461a      	mov	r2, r3
 801a0de:	2101      	movs	r1, #1
 801a0e0:	f004 ffc4 	bl	801f06c <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 801a0e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a0e6:	b2db      	uxtb	r3, r3
 801a0e8:	4619      	mov	r1, r3
 801a0ea:	6878      	ldr	r0, [r7, #4]
 801a0ec:	f008 fa09 	bl	8022502 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 801a0f0:	693b      	ldr	r3, [r7, #16]
 801a0f2:	f003 0308 	and.w	r3, r3, #8
 801a0f6:	2b00      	cmp	r3, #0
 801a0f8:	d008      	beq.n	801a10c <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 801a0fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a0fc:	015a      	lsls	r2, r3, #5
 801a0fe:	69fb      	ldr	r3, [r7, #28]
 801a100:	4413      	add	r3, r2
 801a102:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801a106:	461a      	mov	r2, r3
 801a108:	2308      	movs	r3, #8
 801a10a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 801a10c:	693b      	ldr	r3, [r7, #16]
 801a10e:	f003 0310 	and.w	r3, r3, #16
 801a112:	2b00      	cmp	r3, #0
 801a114:	d008      	beq.n	801a128 <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 801a116:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a118:	015a      	lsls	r2, r3, #5
 801a11a:	69fb      	ldr	r3, [r7, #28]
 801a11c:	4413      	add	r3, r2
 801a11e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801a122:	461a      	mov	r2, r3
 801a124:	2310      	movs	r3, #16
 801a126:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 801a128:	693b      	ldr	r3, [r7, #16]
 801a12a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801a12e:	2b00      	cmp	r3, #0
 801a130:	d008      	beq.n	801a144 <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 801a132:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a134:	015a      	lsls	r2, r3, #5
 801a136:	69fb      	ldr	r3, [r7, #28]
 801a138:	4413      	add	r3, r2
 801a13a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801a13e:	461a      	mov	r2, r3
 801a140:	2340      	movs	r3, #64	; 0x40
 801a142:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 801a144:	693b      	ldr	r3, [r7, #16]
 801a146:	f003 0302 	and.w	r3, r3, #2
 801a14a:	2b00      	cmp	r3, #0
 801a14c:	d008      	beq.n	801a160 <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 801a14e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a150:	015a      	lsls	r2, r3, #5
 801a152:	69fb      	ldr	r3, [r7, #28]
 801a154:	4413      	add	r3, r2
 801a156:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801a15a:	461a      	mov	r2, r3
 801a15c:	2302      	movs	r3, #2
 801a15e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 801a160:	693b      	ldr	r3, [r7, #16]
 801a162:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801a166:	2b00      	cmp	r3, #0
 801a168:	d003      	beq.n	801a172 <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 801a16a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801a16c:	6878      	ldr	r0, [r7, #4]
 801a16e:	f000 fc75 	bl	801aa5c <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 801a172:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a174:	3301      	adds	r3, #1
 801a176:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 801a178:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a17a:	085b      	lsrs	r3, r3, #1
 801a17c:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 801a17e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a180:	2b00      	cmp	r3, #0
 801a182:	f47f af49 	bne.w	801a018 <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 801a186:	687b      	ldr	r3, [r7, #4]
 801a188:	681b      	ldr	r3, [r3, #0]
 801a18a:	4618      	mov	r0, r3
 801a18c:	f004 fea9 	bl	801eee2 <USB_ReadInterrupts>
 801a190:	4603      	mov	r3, r0
 801a192:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 801a196:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 801a19a:	d122      	bne.n	801a1e2 <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 801a19c:	69fb      	ldr	r3, [r7, #28]
 801a19e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801a1a2:	685b      	ldr	r3, [r3, #4]
 801a1a4:	69fa      	ldr	r2, [r7, #28]
 801a1a6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 801a1aa:	f023 0301 	bic.w	r3, r3, #1
 801a1ae:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 801a1b0:	687b      	ldr	r3, [r7, #4]
 801a1b2:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 801a1b6:	2b01      	cmp	r3, #1
 801a1b8:	d108      	bne.n	801a1cc <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 801a1ba:	687b      	ldr	r3, [r7, #4]
 801a1bc:	2200      	movs	r2, #0
 801a1be:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 801a1c2:	2100      	movs	r1, #0
 801a1c4:	6878      	ldr	r0, [r7, #4]
 801a1c6:	f008 fc0b 	bl	80229e0 <HAL_PCDEx_LPM_Callback>
 801a1ca:	e002      	b.n	801a1d2 <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 801a1cc:	6878      	ldr	r0, [r7, #4]
 801a1ce:	f008 fa0f 	bl	80225f0 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 801a1d2:	687b      	ldr	r3, [r7, #4]
 801a1d4:	681b      	ldr	r3, [r3, #0]
 801a1d6:	695a      	ldr	r2, [r3, #20]
 801a1d8:	687b      	ldr	r3, [r7, #4]
 801a1da:	681b      	ldr	r3, [r3, #0]
 801a1dc:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 801a1e0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 801a1e2:	687b      	ldr	r3, [r7, #4]
 801a1e4:	681b      	ldr	r3, [r3, #0]
 801a1e6:	4618      	mov	r0, r3
 801a1e8:	f004 fe7b 	bl	801eee2 <USB_ReadInterrupts>
 801a1ec:	4603      	mov	r3, r0
 801a1ee:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 801a1f2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 801a1f6:	d112      	bne.n	801a21e <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 801a1f8:	69fb      	ldr	r3, [r7, #28]
 801a1fa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801a1fe:	689b      	ldr	r3, [r3, #8]
 801a200:	f003 0301 	and.w	r3, r3, #1
 801a204:	2b01      	cmp	r3, #1
 801a206:	d102      	bne.n	801a20e <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 801a208:	6878      	ldr	r0, [r7, #4]
 801a20a:	f008 f9cb 	bl	80225a4 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 801a20e:	687b      	ldr	r3, [r7, #4]
 801a210:	681b      	ldr	r3, [r3, #0]
 801a212:	695a      	ldr	r2, [r3, #20]
 801a214:	687b      	ldr	r3, [r7, #4]
 801a216:	681b      	ldr	r3, [r3, #0]
 801a218:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 801a21c:	615a      	str	r2, [r3, #20]
    }
#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 801a21e:	687b      	ldr	r3, [r7, #4]
 801a220:	681b      	ldr	r3, [r3, #0]
 801a222:	4618      	mov	r0, r3
 801a224:	f004 fe5d 	bl	801eee2 <USB_ReadInterrupts>
 801a228:	4603      	mov	r3, r0
 801a22a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 801a22e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 801a232:	d121      	bne.n	801a278 <HAL_PCD_IRQHandler+0x4b0>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 801a234:	687b      	ldr	r3, [r7, #4]
 801a236:	681b      	ldr	r3, [r3, #0]
 801a238:	695a      	ldr	r2, [r3, #20]
 801a23a:	687b      	ldr	r3, [r7, #4]
 801a23c:	681b      	ldr	r3, [r3, #0]
 801a23e:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 801a242:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 801a244:	687b      	ldr	r3, [r7, #4]
 801a246:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 801a24a:	2b00      	cmp	r3, #0
 801a24c:	d111      	bne.n	801a272 <HAL_PCD_IRQHandler+0x4aa>
      {
        hpcd->LPM_State = LPM_L1;
 801a24e:	687b      	ldr	r3, [r7, #4]
 801a250:	2201      	movs	r2, #1
 801a252:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 801a256:	687b      	ldr	r3, [r7, #4]
 801a258:	681b      	ldr	r3, [r3, #0]
 801a25a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801a25c:	089b      	lsrs	r3, r3, #2
 801a25e:	f003 020f 	and.w	r2, r3, #15
 801a262:	687b      	ldr	r3, [r7, #4]
 801a264:	f8c3 23f8 	str.w	r2, [r3, #1016]	; 0x3f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 801a268:	2101      	movs	r1, #1
 801a26a:	6878      	ldr	r0, [r7, #4]
 801a26c:	f008 fbb8 	bl	80229e0 <HAL_PCDEx_LPM_Callback>
 801a270:	e002      	b.n	801a278 <HAL_PCD_IRQHandler+0x4b0>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 801a272:	6878      	ldr	r0, [r7, #4]
 801a274:	f008 f996 	bl	80225a4 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 801a278:	687b      	ldr	r3, [r7, #4]
 801a27a:	681b      	ldr	r3, [r3, #0]
 801a27c:	4618      	mov	r0, r3
 801a27e:	f004 fe30 	bl	801eee2 <USB_ReadInterrupts>
 801a282:	4603      	mov	r3, r0
 801a284:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 801a288:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801a28c:	f040 80c7 	bne.w	801a41e <HAL_PCD_IRQHandler+0x656>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 801a290:	69fb      	ldr	r3, [r7, #28]
 801a292:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801a296:	685b      	ldr	r3, [r3, #4]
 801a298:	69fa      	ldr	r2, [r7, #28]
 801a29a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 801a29e:	f023 0301 	bic.w	r3, r3, #1
 801a2a2:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 801a2a4:	687b      	ldr	r3, [r7, #4]
 801a2a6:	681b      	ldr	r3, [r3, #0]
 801a2a8:	2110      	movs	r1, #16
 801a2aa:	4618      	mov	r0, r3
 801a2ac:	f003 feca 	bl	801e044 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 801a2b0:	2300      	movs	r3, #0
 801a2b2:	62fb      	str	r3, [r7, #44]	; 0x2c
 801a2b4:	e056      	b.n	801a364 <HAL_PCD_IRQHandler+0x59c>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 801a2b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a2b8:	015a      	lsls	r2, r3, #5
 801a2ba:	69fb      	ldr	r3, [r7, #28]
 801a2bc:	4413      	add	r3, r2
 801a2be:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801a2c2:	461a      	mov	r2, r3
 801a2c4:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 801a2c8:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 801a2ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a2cc:	015a      	lsls	r2, r3, #5
 801a2ce:	69fb      	ldr	r3, [r7, #28]
 801a2d0:	4413      	add	r3, r2
 801a2d2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801a2d6:	681b      	ldr	r3, [r3, #0]
 801a2d8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801a2da:	0151      	lsls	r1, r2, #5
 801a2dc:	69fa      	ldr	r2, [r7, #28]
 801a2de:	440a      	add	r2, r1
 801a2e0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801a2e4:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 801a2e8:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 801a2ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a2ec:	015a      	lsls	r2, r3, #5
 801a2ee:	69fb      	ldr	r3, [r7, #28]
 801a2f0:	4413      	add	r3, r2
 801a2f2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801a2f6:	681b      	ldr	r3, [r3, #0]
 801a2f8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801a2fa:	0151      	lsls	r1, r2, #5
 801a2fc:	69fa      	ldr	r2, [r7, #28]
 801a2fe:	440a      	add	r2, r1
 801a300:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801a304:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 801a308:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 801a30a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a30c:	015a      	lsls	r2, r3, #5
 801a30e:	69fb      	ldr	r3, [r7, #28]
 801a310:	4413      	add	r3, r2
 801a312:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801a316:	461a      	mov	r2, r3
 801a318:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 801a31c:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 801a31e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a320:	015a      	lsls	r2, r3, #5
 801a322:	69fb      	ldr	r3, [r7, #28]
 801a324:	4413      	add	r3, r2
 801a326:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801a32a:	681b      	ldr	r3, [r3, #0]
 801a32c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801a32e:	0151      	lsls	r1, r2, #5
 801a330:	69fa      	ldr	r2, [r7, #28]
 801a332:	440a      	add	r2, r1
 801a334:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801a338:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 801a33c:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 801a33e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a340:	015a      	lsls	r2, r3, #5
 801a342:	69fb      	ldr	r3, [r7, #28]
 801a344:	4413      	add	r3, r2
 801a346:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801a34a:	681b      	ldr	r3, [r3, #0]
 801a34c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801a34e:	0151      	lsls	r1, r2, #5
 801a350:	69fa      	ldr	r2, [r7, #28]
 801a352:	440a      	add	r2, r1
 801a354:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801a358:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 801a35c:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 801a35e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a360:	3301      	adds	r3, #1
 801a362:	62fb      	str	r3, [r7, #44]	; 0x2c
 801a364:	687b      	ldr	r3, [r7, #4]
 801a366:	685b      	ldr	r3, [r3, #4]
 801a368:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801a36a:	429a      	cmp	r2, r3
 801a36c:	d3a3      	bcc.n	801a2b6 <HAL_PCD_IRQHandler+0x4ee>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 801a36e:	69fb      	ldr	r3, [r7, #28]
 801a370:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801a374:	69db      	ldr	r3, [r3, #28]
 801a376:	69fa      	ldr	r2, [r7, #28]
 801a378:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 801a37c:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 801a380:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 801a382:	687b      	ldr	r3, [r7, #4]
 801a384:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801a386:	2b00      	cmp	r3, #0
 801a388:	d016      	beq.n	801a3b8 <HAL_PCD_IRQHandler+0x5f0>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 801a38a:	69fb      	ldr	r3, [r7, #28]
 801a38c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801a390:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801a394:	69fa      	ldr	r2, [r7, #28]
 801a396:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 801a39a:	f043 030b 	orr.w	r3, r3, #11
 801a39e:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 801a3a2:	69fb      	ldr	r3, [r7, #28]
 801a3a4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801a3a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801a3aa:	69fa      	ldr	r2, [r7, #28]
 801a3ac:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 801a3b0:	f043 030b 	orr.w	r3, r3, #11
 801a3b4:	6453      	str	r3, [r2, #68]	; 0x44
 801a3b6:	e015      	b.n	801a3e4 <HAL_PCD_IRQHandler+0x61c>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 801a3b8:	69fb      	ldr	r3, [r7, #28]
 801a3ba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801a3be:	695b      	ldr	r3, [r3, #20]
 801a3c0:	69fa      	ldr	r2, [r7, #28]
 801a3c2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 801a3c6:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 801a3ca:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 801a3ce:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 801a3d0:	69fb      	ldr	r3, [r7, #28]
 801a3d2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801a3d6:	691b      	ldr	r3, [r3, #16]
 801a3d8:	69fa      	ldr	r2, [r7, #28]
 801a3da:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 801a3de:	f043 030b 	orr.w	r3, r3, #11
 801a3e2:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 801a3e4:	69fb      	ldr	r3, [r7, #28]
 801a3e6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801a3ea:	681b      	ldr	r3, [r3, #0]
 801a3ec:	69fa      	ldr	r2, [r7, #28]
 801a3ee:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 801a3f2:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 801a3f6:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 801a3f8:	687b      	ldr	r3, [r7, #4]
 801a3fa:	6818      	ldr	r0, [r3, #0]
 801a3fc:	687b      	ldr	r3, [r7, #4]
 801a3fe:	691b      	ldr	r3, [r3, #16]
 801a400:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 801a402:	687b      	ldr	r3, [r7, #4]
 801a404:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 801a408:	461a      	mov	r2, r3
 801a40a:	f004 fe2f 	bl	801f06c <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 801a40e:	687b      	ldr	r3, [r7, #4]
 801a410:	681b      	ldr	r3, [r3, #0]
 801a412:	695a      	ldr	r2, [r3, #20]
 801a414:	687b      	ldr	r3, [r7, #4]
 801a416:	681b      	ldr	r3, [r3, #0]
 801a418:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 801a41c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 801a41e:	687b      	ldr	r3, [r7, #4]
 801a420:	681b      	ldr	r3, [r3, #0]
 801a422:	4618      	mov	r0, r3
 801a424:	f004 fd5d 	bl	801eee2 <USB_ReadInterrupts>
 801a428:	4603      	mov	r3, r0
 801a42a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 801a42e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 801a432:	d124      	bne.n	801a47e <HAL_PCD_IRQHandler+0x6b6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 801a434:	687b      	ldr	r3, [r7, #4]
 801a436:	681b      	ldr	r3, [r3, #0]
 801a438:	4618      	mov	r0, r3
 801a43a:	f004 fdf3 	bl	801f024 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 801a43e:	687b      	ldr	r3, [r7, #4]
 801a440:	681b      	ldr	r3, [r3, #0]
 801a442:	4618      	mov	r0, r3
 801a444:	f003 fe5b 	bl	801e0fe <USB_GetDevSpeed>
 801a448:	4603      	mov	r3, r0
 801a44a:	461a      	mov	r2, r3
 801a44c:	687b      	ldr	r3, [r7, #4]
 801a44e:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 801a450:	687b      	ldr	r3, [r7, #4]
 801a452:	681c      	ldr	r4, [r3, #0]
 801a454:	f000 fe94 	bl	801b180 <HAL_RCC_GetHCLKFreq>
 801a458:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 801a45a:	687b      	ldr	r3, [r7, #4]
 801a45c:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 801a45e:	b2db      	uxtb	r3, r3
 801a460:	461a      	mov	r2, r3
 801a462:	4620      	mov	r0, r4
 801a464:	f003 fb80 	bl	801db68 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 801a468:	6878      	ldr	r0, [r7, #4]
 801a46a:	f008 f872 	bl	8022552 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 801a46e:	687b      	ldr	r3, [r7, #4]
 801a470:	681b      	ldr	r3, [r3, #0]
 801a472:	695a      	ldr	r2, [r3, #20]
 801a474:	687b      	ldr	r3, [r7, #4]
 801a476:	681b      	ldr	r3, [r3, #0]
 801a478:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 801a47c:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 801a47e:	687b      	ldr	r3, [r7, #4]
 801a480:	681b      	ldr	r3, [r3, #0]
 801a482:	4618      	mov	r0, r3
 801a484:	f004 fd2d 	bl	801eee2 <USB_ReadInterrupts>
 801a488:	4603      	mov	r3, r0
 801a48a:	f003 0308 	and.w	r3, r3, #8
 801a48e:	2b08      	cmp	r3, #8
 801a490:	d10a      	bne.n	801a4a8 <HAL_PCD_IRQHandler+0x6e0>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 801a492:	6878      	ldr	r0, [r7, #4]
 801a494:	f008 f84f 	bl	8022536 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 801a498:	687b      	ldr	r3, [r7, #4]
 801a49a:	681b      	ldr	r3, [r3, #0]
 801a49c:	695a      	ldr	r2, [r3, #20]
 801a49e:	687b      	ldr	r3, [r7, #4]
 801a4a0:	681b      	ldr	r3, [r3, #0]
 801a4a2:	f002 0208 	and.w	r2, r2, #8
 801a4a6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 801a4a8:	687b      	ldr	r3, [r7, #4]
 801a4aa:	681b      	ldr	r3, [r3, #0]
 801a4ac:	4618      	mov	r0, r3
 801a4ae:	f004 fd18 	bl	801eee2 <USB_ReadInterrupts>
 801a4b2:	4603      	mov	r3, r0
 801a4b4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 801a4b8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 801a4bc:	d10f      	bne.n	801a4de <HAL_PCD_IRQHandler+0x716>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 801a4be:	2300      	movs	r3, #0
 801a4c0:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 801a4c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a4c4:	b2db      	uxtb	r3, r3
 801a4c6:	4619      	mov	r1, r3
 801a4c8:	6878      	ldr	r0, [r7, #4]
 801a4ca:	f008 f8b1 	bl	8022630 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 801a4ce:	687b      	ldr	r3, [r7, #4]
 801a4d0:	681b      	ldr	r3, [r3, #0]
 801a4d2:	695a      	ldr	r2, [r3, #20]
 801a4d4:	687b      	ldr	r3, [r7, #4]
 801a4d6:	681b      	ldr	r3, [r3, #0]
 801a4d8:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 801a4dc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 801a4de:	687b      	ldr	r3, [r7, #4]
 801a4e0:	681b      	ldr	r3, [r3, #0]
 801a4e2:	4618      	mov	r0, r3
 801a4e4:	f004 fcfd 	bl	801eee2 <USB_ReadInterrupts>
 801a4e8:	4603      	mov	r3, r0
 801a4ea:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 801a4ee:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 801a4f2:	d10f      	bne.n	801a514 <HAL_PCD_IRQHandler+0x74c>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 801a4f4:	2300      	movs	r3, #0
 801a4f6:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 801a4f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a4fa:	b2db      	uxtb	r3, r3
 801a4fc:	4619      	mov	r1, r3
 801a4fe:	6878      	ldr	r0, [r7, #4]
 801a500:	f008 f884 	bl	802260c <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 801a504:	687b      	ldr	r3, [r7, #4]
 801a506:	681b      	ldr	r3, [r3, #0]
 801a508:	695a      	ldr	r2, [r3, #20]
 801a50a:	687b      	ldr	r3, [r7, #4]
 801a50c:	681b      	ldr	r3, [r3, #0]
 801a50e:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 801a512:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 801a514:	687b      	ldr	r3, [r7, #4]
 801a516:	681b      	ldr	r3, [r3, #0]
 801a518:	4618      	mov	r0, r3
 801a51a:	f004 fce2 	bl	801eee2 <USB_ReadInterrupts>
 801a51e:	4603      	mov	r3, r0
 801a520:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 801a524:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801a528:	d10a      	bne.n	801a540 <HAL_PCD_IRQHandler+0x778>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 801a52a:	6878      	ldr	r0, [r7, #4]
 801a52c:	f008 f892 	bl	8022654 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 801a530:	687b      	ldr	r3, [r7, #4]
 801a532:	681b      	ldr	r3, [r3, #0]
 801a534:	695a      	ldr	r2, [r3, #20]
 801a536:	687b      	ldr	r3, [r7, #4]
 801a538:	681b      	ldr	r3, [r3, #0]
 801a53a:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 801a53e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 801a540:	687b      	ldr	r3, [r7, #4]
 801a542:	681b      	ldr	r3, [r3, #0]
 801a544:	4618      	mov	r0, r3
 801a546:	f004 fccc 	bl	801eee2 <USB_ReadInterrupts>
 801a54a:	4603      	mov	r3, r0
 801a54c:	f003 0304 	and.w	r3, r3, #4
 801a550:	2b04      	cmp	r3, #4
 801a552:	d115      	bne.n	801a580 <HAL_PCD_IRQHandler+0x7b8>
    {
      temp = hpcd->Instance->GOTGINT;
 801a554:	687b      	ldr	r3, [r7, #4]
 801a556:	681b      	ldr	r3, [r3, #0]
 801a558:	685b      	ldr	r3, [r3, #4]
 801a55a:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 801a55c:	69bb      	ldr	r3, [r7, #24]
 801a55e:	f003 0304 	and.w	r3, r3, #4
 801a562:	2b00      	cmp	r3, #0
 801a564:	d002      	beq.n	801a56c <HAL_PCD_IRQHandler+0x7a4>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 801a566:	6878      	ldr	r0, [r7, #4]
 801a568:	f008 f882 	bl	8022670 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 801a56c:	687b      	ldr	r3, [r7, #4]
 801a56e:	681b      	ldr	r3, [r3, #0]
 801a570:	6859      	ldr	r1, [r3, #4]
 801a572:	687b      	ldr	r3, [r7, #4]
 801a574:	681b      	ldr	r3, [r3, #0]
 801a576:	69ba      	ldr	r2, [r7, #24]
 801a578:	430a      	orrs	r2, r1
 801a57a:	605a      	str	r2, [r3, #4]
 801a57c:	e000      	b.n	801a580 <HAL_PCD_IRQHandler+0x7b8>
      return;
 801a57e:	bf00      	nop
    }
  }
}
 801a580:	3734      	adds	r7, #52	; 0x34
 801a582:	46bd      	mov	sp, r7
 801a584:	bd90      	pop	{r4, r7, pc}

0801a586 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 801a586:	b580      	push	{r7, lr}
 801a588:	b082      	sub	sp, #8
 801a58a:	af00      	add	r7, sp, #0
 801a58c:	6078      	str	r0, [r7, #4]
 801a58e:	460b      	mov	r3, r1
 801a590:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 801a592:	687b      	ldr	r3, [r7, #4]
 801a594:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 801a598:	2b01      	cmp	r3, #1
 801a59a:	d101      	bne.n	801a5a0 <HAL_PCD_SetAddress+0x1a>
 801a59c:	2302      	movs	r3, #2
 801a59e:	e013      	b.n	801a5c8 <HAL_PCD_SetAddress+0x42>
 801a5a0:	687b      	ldr	r3, [r7, #4]
 801a5a2:	2201      	movs	r2, #1
 801a5a4:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 801a5a8:	687b      	ldr	r3, [r7, #4]
 801a5aa:	78fa      	ldrb	r2, [r7, #3]
 801a5ac:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 801a5b0:	687b      	ldr	r3, [r7, #4]
 801a5b2:	681b      	ldr	r3, [r3, #0]
 801a5b4:	78fa      	ldrb	r2, [r7, #3]
 801a5b6:	4611      	mov	r1, r2
 801a5b8:	4618      	mov	r0, r3
 801a5ba:	f004 fc2a 	bl	801ee12 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 801a5be:	687b      	ldr	r3, [r7, #4]
 801a5c0:	2200      	movs	r2, #0
 801a5c2:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 801a5c6:	2300      	movs	r3, #0
}
 801a5c8:	4618      	mov	r0, r3
 801a5ca:	3708      	adds	r7, #8
 801a5cc:	46bd      	mov	sp, r7
 801a5ce:	bd80      	pop	{r7, pc}

0801a5d0 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 801a5d0:	b580      	push	{r7, lr}
 801a5d2:	b084      	sub	sp, #16
 801a5d4:	af00      	add	r7, sp, #0
 801a5d6:	6078      	str	r0, [r7, #4]
 801a5d8:	4608      	mov	r0, r1
 801a5da:	4611      	mov	r1, r2
 801a5dc:	461a      	mov	r2, r3
 801a5de:	4603      	mov	r3, r0
 801a5e0:	70fb      	strb	r3, [r7, #3]
 801a5e2:	460b      	mov	r3, r1
 801a5e4:	803b      	strh	r3, [r7, #0]
 801a5e6:	4613      	mov	r3, r2
 801a5e8:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 801a5ea:	2300      	movs	r3, #0
 801a5ec:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 801a5ee:	f997 3003 	ldrsb.w	r3, [r7, #3]
 801a5f2:	2b00      	cmp	r3, #0
 801a5f4:	da0f      	bge.n	801a616 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 801a5f6:	78fb      	ldrb	r3, [r7, #3]
 801a5f8:	f003 020f 	and.w	r2, r3, #15
 801a5fc:	4613      	mov	r3, r2
 801a5fe:	00db      	lsls	r3, r3, #3
 801a600:	1a9b      	subs	r3, r3, r2
 801a602:	009b      	lsls	r3, r3, #2
 801a604:	3338      	adds	r3, #56	; 0x38
 801a606:	687a      	ldr	r2, [r7, #4]
 801a608:	4413      	add	r3, r2
 801a60a:	3304      	adds	r3, #4
 801a60c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 801a60e:	68fb      	ldr	r3, [r7, #12]
 801a610:	2201      	movs	r2, #1
 801a612:	705a      	strb	r2, [r3, #1]
 801a614:	e00f      	b.n	801a636 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 801a616:	78fb      	ldrb	r3, [r7, #3]
 801a618:	f003 020f 	and.w	r2, r3, #15
 801a61c:	4613      	mov	r3, r2
 801a61e:	00db      	lsls	r3, r3, #3
 801a620:	1a9b      	subs	r3, r3, r2
 801a622:	009b      	lsls	r3, r3, #2
 801a624:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 801a628:	687a      	ldr	r2, [r7, #4]
 801a62a:	4413      	add	r3, r2
 801a62c:	3304      	adds	r3, #4
 801a62e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 801a630:	68fb      	ldr	r3, [r7, #12]
 801a632:	2200      	movs	r2, #0
 801a634:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 801a636:	78fb      	ldrb	r3, [r7, #3]
 801a638:	f003 030f 	and.w	r3, r3, #15
 801a63c:	b2da      	uxtb	r2, r3
 801a63e:	68fb      	ldr	r3, [r7, #12]
 801a640:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 801a642:	883a      	ldrh	r2, [r7, #0]
 801a644:	68fb      	ldr	r3, [r7, #12]
 801a646:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 801a648:	68fb      	ldr	r3, [r7, #12]
 801a64a:	78ba      	ldrb	r2, [r7, #2]
 801a64c:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 801a64e:	68fb      	ldr	r3, [r7, #12]
 801a650:	785b      	ldrb	r3, [r3, #1]
 801a652:	2b00      	cmp	r3, #0
 801a654:	d004      	beq.n	801a660 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 801a656:	68fb      	ldr	r3, [r7, #12]
 801a658:	781b      	ldrb	r3, [r3, #0]
 801a65a:	b29a      	uxth	r2, r3
 801a65c:	68fb      	ldr	r3, [r7, #12]
 801a65e:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 801a660:	78bb      	ldrb	r3, [r7, #2]
 801a662:	2b02      	cmp	r3, #2
 801a664:	d102      	bne.n	801a66c <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 801a666:	68fb      	ldr	r3, [r7, #12]
 801a668:	2200      	movs	r2, #0
 801a66a:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 801a66c:	687b      	ldr	r3, [r7, #4]
 801a66e:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 801a672:	2b01      	cmp	r3, #1
 801a674:	d101      	bne.n	801a67a <HAL_PCD_EP_Open+0xaa>
 801a676:	2302      	movs	r3, #2
 801a678:	e00e      	b.n	801a698 <HAL_PCD_EP_Open+0xc8>
 801a67a:	687b      	ldr	r3, [r7, #4]
 801a67c:	2201      	movs	r2, #1
 801a67e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 801a682:	687b      	ldr	r3, [r7, #4]
 801a684:	681b      	ldr	r3, [r3, #0]
 801a686:	68f9      	ldr	r1, [r7, #12]
 801a688:	4618      	mov	r0, r3
 801a68a:	f003 fd5d 	bl	801e148 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 801a68e:	687b      	ldr	r3, [r7, #4]
 801a690:	2200      	movs	r2, #0
 801a692:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 801a696:	7afb      	ldrb	r3, [r7, #11]
}
 801a698:	4618      	mov	r0, r3
 801a69a:	3710      	adds	r7, #16
 801a69c:	46bd      	mov	sp, r7
 801a69e:	bd80      	pop	{r7, pc}

0801a6a0 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 801a6a0:	b580      	push	{r7, lr}
 801a6a2:	b084      	sub	sp, #16
 801a6a4:	af00      	add	r7, sp, #0
 801a6a6:	6078      	str	r0, [r7, #4]
 801a6a8:	460b      	mov	r3, r1
 801a6aa:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 801a6ac:	f997 3003 	ldrsb.w	r3, [r7, #3]
 801a6b0:	2b00      	cmp	r3, #0
 801a6b2:	da0f      	bge.n	801a6d4 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 801a6b4:	78fb      	ldrb	r3, [r7, #3]
 801a6b6:	f003 020f 	and.w	r2, r3, #15
 801a6ba:	4613      	mov	r3, r2
 801a6bc:	00db      	lsls	r3, r3, #3
 801a6be:	1a9b      	subs	r3, r3, r2
 801a6c0:	009b      	lsls	r3, r3, #2
 801a6c2:	3338      	adds	r3, #56	; 0x38
 801a6c4:	687a      	ldr	r2, [r7, #4]
 801a6c6:	4413      	add	r3, r2
 801a6c8:	3304      	adds	r3, #4
 801a6ca:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 801a6cc:	68fb      	ldr	r3, [r7, #12]
 801a6ce:	2201      	movs	r2, #1
 801a6d0:	705a      	strb	r2, [r3, #1]
 801a6d2:	e00f      	b.n	801a6f4 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 801a6d4:	78fb      	ldrb	r3, [r7, #3]
 801a6d6:	f003 020f 	and.w	r2, r3, #15
 801a6da:	4613      	mov	r3, r2
 801a6dc:	00db      	lsls	r3, r3, #3
 801a6de:	1a9b      	subs	r3, r3, r2
 801a6e0:	009b      	lsls	r3, r3, #2
 801a6e2:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 801a6e6:	687a      	ldr	r2, [r7, #4]
 801a6e8:	4413      	add	r3, r2
 801a6ea:	3304      	adds	r3, #4
 801a6ec:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 801a6ee:	68fb      	ldr	r3, [r7, #12]
 801a6f0:	2200      	movs	r2, #0
 801a6f2:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 801a6f4:	78fb      	ldrb	r3, [r7, #3]
 801a6f6:	f003 030f 	and.w	r3, r3, #15
 801a6fa:	b2da      	uxtb	r2, r3
 801a6fc:	68fb      	ldr	r3, [r7, #12]
 801a6fe:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 801a700:	687b      	ldr	r3, [r7, #4]
 801a702:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 801a706:	2b01      	cmp	r3, #1
 801a708:	d101      	bne.n	801a70e <HAL_PCD_EP_Close+0x6e>
 801a70a:	2302      	movs	r3, #2
 801a70c:	e00e      	b.n	801a72c <HAL_PCD_EP_Close+0x8c>
 801a70e:	687b      	ldr	r3, [r7, #4]
 801a710:	2201      	movs	r2, #1
 801a712:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 801a716:	687b      	ldr	r3, [r7, #4]
 801a718:	681b      	ldr	r3, [r3, #0]
 801a71a:	68f9      	ldr	r1, [r7, #12]
 801a71c:	4618      	mov	r0, r3
 801a71e:	f003 fd9b 	bl	801e258 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 801a722:	687b      	ldr	r3, [r7, #4]
 801a724:	2200      	movs	r2, #0
 801a726:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 801a72a:	2300      	movs	r3, #0
}
 801a72c:	4618      	mov	r0, r3
 801a72e:	3710      	adds	r7, #16
 801a730:	46bd      	mov	sp, r7
 801a732:	bd80      	pop	{r7, pc}

0801a734 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 801a734:	b580      	push	{r7, lr}
 801a736:	b086      	sub	sp, #24
 801a738:	af00      	add	r7, sp, #0
 801a73a:	60f8      	str	r0, [r7, #12]
 801a73c:	607a      	str	r2, [r7, #4]
 801a73e:	603b      	str	r3, [r7, #0]
 801a740:	460b      	mov	r3, r1
 801a742:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 801a744:	7afb      	ldrb	r3, [r7, #11]
 801a746:	f003 020f 	and.w	r2, r3, #15
 801a74a:	4613      	mov	r3, r2
 801a74c:	00db      	lsls	r3, r3, #3
 801a74e:	1a9b      	subs	r3, r3, r2
 801a750:	009b      	lsls	r3, r3, #2
 801a752:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 801a756:	68fa      	ldr	r2, [r7, #12]
 801a758:	4413      	add	r3, r2
 801a75a:	3304      	adds	r3, #4
 801a75c:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 801a75e:	697b      	ldr	r3, [r7, #20]
 801a760:	687a      	ldr	r2, [r7, #4]
 801a762:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 801a764:	697b      	ldr	r3, [r7, #20]
 801a766:	683a      	ldr	r2, [r7, #0]
 801a768:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 801a76a:	697b      	ldr	r3, [r7, #20]
 801a76c:	2200      	movs	r2, #0
 801a76e:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 801a770:	697b      	ldr	r3, [r7, #20]
 801a772:	2200      	movs	r2, #0
 801a774:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 801a776:	7afb      	ldrb	r3, [r7, #11]
 801a778:	f003 030f 	and.w	r3, r3, #15
 801a77c:	b2da      	uxtb	r2, r3
 801a77e:	697b      	ldr	r3, [r7, #20]
 801a780:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 801a782:	68fb      	ldr	r3, [r7, #12]
 801a784:	691b      	ldr	r3, [r3, #16]
 801a786:	2b01      	cmp	r3, #1
 801a788:	d102      	bne.n	801a790 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 801a78a:	687a      	ldr	r2, [r7, #4]
 801a78c:	697b      	ldr	r3, [r7, #20]
 801a78e:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 801a790:	7afb      	ldrb	r3, [r7, #11]
 801a792:	f003 030f 	and.w	r3, r3, #15
 801a796:	2b00      	cmp	r3, #0
 801a798:	d109      	bne.n	801a7ae <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 801a79a:	68fb      	ldr	r3, [r7, #12]
 801a79c:	6818      	ldr	r0, [r3, #0]
 801a79e:	68fb      	ldr	r3, [r7, #12]
 801a7a0:	691b      	ldr	r3, [r3, #16]
 801a7a2:	b2db      	uxtb	r3, r3
 801a7a4:	461a      	mov	r2, r3
 801a7a6:	6979      	ldr	r1, [r7, #20]
 801a7a8:	f004 f876 	bl	801e898 <USB_EP0StartXfer>
 801a7ac:	e008      	b.n	801a7c0 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 801a7ae:	68fb      	ldr	r3, [r7, #12]
 801a7b0:	6818      	ldr	r0, [r3, #0]
 801a7b2:	68fb      	ldr	r3, [r7, #12]
 801a7b4:	691b      	ldr	r3, [r3, #16]
 801a7b6:	b2db      	uxtb	r3, r3
 801a7b8:	461a      	mov	r2, r3
 801a7ba:	6979      	ldr	r1, [r7, #20]
 801a7bc:	f003 fe28 	bl	801e410 <USB_EPStartXfer>
  }

  return HAL_OK;
 801a7c0:	2300      	movs	r3, #0
}
 801a7c2:	4618      	mov	r0, r3
 801a7c4:	3718      	adds	r7, #24
 801a7c6:	46bd      	mov	sp, r7
 801a7c8:	bd80      	pop	{r7, pc}

0801a7ca <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 801a7ca:	b480      	push	{r7}
 801a7cc:	b083      	sub	sp, #12
 801a7ce:	af00      	add	r7, sp, #0
 801a7d0:	6078      	str	r0, [r7, #4]
 801a7d2:	460b      	mov	r3, r1
 801a7d4:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 801a7d6:	78fb      	ldrb	r3, [r7, #3]
 801a7d8:	f003 020f 	and.w	r2, r3, #15
 801a7dc:	6879      	ldr	r1, [r7, #4]
 801a7de:	4613      	mov	r3, r2
 801a7e0:	00db      	lsls	r3, r3, #3
 801a7e2:	1a9b      	subs	r3, r3, r2
 801a7e4:	009b      	lsls	r3, r3, #2
 801a7e6:	440b      	add	r3, r1
 801a7e8:	f503 7305 	add.w	r3, r3, #532	; 0x214
 801a7ec:	681b      	ldr	r3, [r3, #0]
}
 801a7ee:	4618      	mov	r0, r3
 801a7f0:	370c      	adds	r7, #12
 801a7f2:	46bd      	mov	sp, r7
 801a7f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a7f8:	4770      	bx	lr

0801a7fa <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 801a7fa:	b580      	push	{r7, lr}
 801a7fc:	b086      	sub	sp, #24
 801a7fe:	af00      	add	r7, sp, #0
 801a800:	60f8      	str	r0, [r7, #12]
 801a802:	607a      	str	r2, [r7, #4]
 801a804:	603b      	str	r3, [r7, #0]
 801a806:	460b      	mov	r3, r1
 801a808:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 801a80a:	7afb      	ldrb	r3, [r7, #11]
 801a80c:	f003 020f 	and.w	r2, r3, #15
 801a810:	4613      	mov	r3, r2
 801a812:	00db      	lsls	r3, r3, #3
 801a814:	1a9b      	subs	r3, r3, r2
 801a816:	009b      	lsls	r3, r3, #2
 801a818:	3338      	adds	r3, #56	; 0x38
 801a81a:	68fa      	ldr	r2, [r7, #12]
 801a81c:	4413      	add	r3, r2
 801a81e:	3304      	adds	r3, #4
 801a820:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 801a822:	697b      	ldr	r3, [r7, #20]
 801a824:	687a      	ldr	r2, [r7, #4]
 801a826:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 801a828:	697b      	ldr	r3, [r7, #20]
 801a82a:	683a      	ldr	r2, [r7, #0]
 801a82c:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 801a82e:	697b      	ldr	r3, [r7, #20]
 801a830:	2200      	movs	r2, #0
 801a832:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 801a834:	697b      	ldr	r3, [r7, #20]
 801a836:	2201      	movs	r2, #1
 801a838:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 801a83a:	7afb      	ldrb	r3, [r7, #11]
 801a83c:	f003 030f 	and.w	r3, r3, #15
 801a840:	b2da      	uxtb	r2, r3
 801a842:	697b      	ldr	r3, [r7, #20]
 801a844:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 801a846:	68fb      	ldr	r3, [r7, #12]
 801a848:	691b      	ldr	r3, [r3, #16]
 801a84a:	2b01      	cmp	r3, #1
 801a84c:	d102      	bne.n	801a854 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 801a84e:	687a      	ldr	r2, [r7, #4]
 801a850:	697b      	ldr	r3, [r7, #20]
 801a852:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 801a854:	7afb      	ldrb	r3, [r7, #11]
 801a856:	f003 030f 	and.w	r3, r3, #15
 801a85a:	2b00      	cmp	r3, #0
 801a85c:	d109      	bne.n	801a872 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 801a85e:	68fb      	ldr	r3, [r7, #12]
 801a860:	6818      	ldr	r0, [r3, #0]
 801a862:	68fb      	ldr	r3, [r7, #12]
 801a864:	691b      	ldr	r3, [r3, #16]
 801a866:	b2db      	uxtb	r3, r3
 801a868:	461a      	mov	r2, r3
 801a86a:	6979      	ldr	r1, [r7, #20]
 801a86c:	f004 f814 	bl	801e898 <USB_EP0StartXfer>
 801a870:	e008      	b.n	801a884 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 801a872:	68fb      	ldr	r3, [r7, #12]
 801a874:	6818      	ldr	r0, [r3, #0]
 801a876:	68fb      	ldr	r3, [r7, #12]
 801a878:	691b      	ldr	r3, [r3, #16]
 801a87a:	b2db      	uxtb	r3, r3
 801a87c:	461a      	mov	r2, r3
 801a87e:	6979      	ldr	r1, [r7, #20]
 801a880:	f003 fdc6 	bl	801e410 <USB_EPStartXfer>
  }

  return HAL_OK;
 801a884:	2300      	movs	r3, #0
}
 801a886:	4618      	mov	r0, r3
 801a888:	3718      	adds	r7, #24
 801a88a:	46bd      	mov	sp, r7
 801a88c:	bd80      	pop	{r7, pc}

0801a88e <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 801a88e:	b580      	push	{r7, lr}
 801a890:	b084      	sub	sp, #16
 801a892:	af00      	add	r7, sp, #0
 801a894:	6078      	str	r0, [r7, #4]
 801a896:	460b      	mov	r3, r1
 801a898:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 801a89a:	78fb      	ldrb	r3, [r7, #3]
 801a89c:	f003 020f 	and.w	r2, r3, #15
 801a8a0:	687b      	ldr	r3, [r7, #4]
 801a8a2:	685b      	ldr	r3, [r3, #4]
 801a8a4:	429a      	cmp	r2, r3
 801a8a6:	d901      	bls.n	801a8ac <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 801a8a8:	2301      	movs	r3, #1
 801a8aa:	e050      	b.n	801a94e <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 801a8ac:	f997 3003 	ldrsb.w	r3, [r7, #3]
 801a8b0:	2b00      	cmp	r3, #0
 801a8b2:	da0f      	bge.n	801a8d4 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 801a8b4:	78fb      	ldrb	r3, [r7, #3]
 801a8b6:	f003 020f 	and.w	r2, r3, #15
 801a8ba:	4613      	mov	r3, r2
 801a8bc:	00db      	lsls	r3, r3, #3
 801a8be:	1a9b      	subs	r3, r3, r2
 801a8c0:	009b      	lsls	r3, r3, #2
 801a8c2:	3338      	adds	r3, #56	; 0x38
 801a8c4:	687a      	ldr	r2, [r7, #4]
 801a8c6:	4413      	add	r3, r2
 801a8c8:	3304      	adds	r3, #4
 801a8ca:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 801a8cc:	68fb      	ldr	r3, [r7, #12]
 801a8ce:	2201      	movs	r2, #1
 801a8d0:	705a      	strb	r2, [r3, #1]
 801a8d2:	e00d      	b.n	801a8f0 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 801a8d4:	78fa      	ldrb	r2, [r7, #3]
 801a8d6:	4613      	mov	r3, r2
 801a8d8:	00db      	lsls	r3, r3, #3
 801a8da:	1a9b      	subs	r3, r3, r2
 801a8dc:	009b      	lsls	r3, r3, #2
 801a8de:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 801a8e2:	687a      	ldr	r2, [r7, #4]
 801a8e4:	4413      	add	r3, r2
 801a8e6:	3304      	adds	r3, #4
 801a8e8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 801a8ea:	68fb      	ldr	r3, [r7, #12]
 801a8ec:	2200      	movs	r2, #0
 801a8ee:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 801a8f0:	68fb      	ldr	r3, [r7, #12]
 801a8f2:	2201      	movs	r2, #1
 801a8f4:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 801a8f6:	78fb      	ldrb	r3, [r7, #3]
 801a8f8:	f003 030f 	and.w	r3, r3, #15
 801a8fc:	b2da      	uxtb	r2, r3
 801a8fe:	68fb      	ldr	r3, [r7, #12]
 801a900:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 801a902:	687b      	ldr	r3, [r7, #4]
 801a904:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 801a908:	2b01      	cmp	r3, #1
 801a90a:	d101      	bne.n	801a910 <HAL_PCD_EP_SetStall+0x82>
 801a90c:	2302      	movs	r3, #2
 801a90e:	e01e      	b.n	801a94e <HAL_PCD_EP_SetStall+0xc0>
 801a910:	687b      	ldr	r3, [r7, #4]
 801a912:	2201      	movs	r2, #1
 801a914:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 801a918:	687b      	ldr	r3, [r7, #4]
 801a91a:	681b      	ldr	r3, [r3, #0]
 801a91c:	68f9      	ldr	r1, [r7, #12]
 801a91e:	4618      	mov	r0, r3
 801a920:	f004 f9a3 	bl	801ec6a <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 801a924:	78fb      	ldrb	r3, [r7, #3]
 801a926:	f003 030f 	and.w	r3, r3, #15
 801a92a:	2b00      	cmp	r3, #0
 801a92c:	d10a      	bne.n	801a944 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 801a92e:	687b      	ldr	r3, [r7, #4]
 801a930:	6818      	ldr	r0, [r3, #0]
 801a932:	687b      	ldr	r3, [r7, #4]
 801a934:	691b      	ldr	r3, [r3, #16]
 801a936:	b2d9      	uxtb	r1, r3
 801a938:	687b      	ldr	r3, [r7, #4]
 801a93a:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 801a93e:	461a      	mov	r2, r3
 801a940:	f004 fb94 	bl	801f06c <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 801a944:	687b      	ldr	r3, [r7, #4]
 801a946:	2200      	movs	r2, #0
 801a948:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 801a94c:	2300      	movs	r3, #0
}
 801a94e:	4618      	mov	r0, r3
 801a950:	3710      	adds	r7, #16
 801a952:	46bd      	mov	sp, r7
 801a954:	bd80      	pop	{r7, pc}

0801a956 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 801a956:	b580      	push	{r7, lr}
 801a958:	b084      	sub	sp, #16
 801a95a:	af00      	add	r7, sp, #0
 801a95c:	6078      	str	r0, [r7, #4]
 801a95e:	460b      	mov	r3, r1
 801a960:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 801a962:	78fb      	ldrb	r3, [r7, #3]
 801a964:	f003 020f 	and.w	r2, r3, #15
 801a968:	687b      	ldr	r3, [r7, #4]
 801a96a:	685b      	ldr	r3, [r3, #4]
 801a96c:	429a      	cmp	r2, r3
 801a96e:	d901      	bls.n	801a974 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 801a970:	2301      	movs	r3, #1
 801a972:	e042      	b.n	801a9fa <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 801a974:	f997 3003 	ldrsb.w	r3, [r7, #3]
 801a978:	2b00      	cmp	r3, #0
 801a97a:	da0f      	bge.n	801a99c <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 801a97c:	78fb      	ldrb	r3, [r7, #3]
 801a97e:	f003 020f 	and.w	r2, r3, #15
 801a982:	4613      	mov	r3, r2
 801a984:	00db      	lsls	r3, r3, #3
 801a986:	1a9b      	subs	r3, r3, r2
 801a988:	009b      	lsls	r3, r3, #2
 801a98a:	3338      	adds	r3, #56	; 0x38
 801a98c:	687a      	ldr	r2, [r7, #4]
 801a98e:	4413      	add	r3, r2
 801a990:	3304      	adds	r3, #4
 801a992:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 801a994:	68fb      	ldr	r3, [r7, #12]
 801a996:	2201      	movs	r2, #1
 801a998:	705a      	strb	r2, [r3, #1]
 801a99a:	e00f      	b.n	801a9bc <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 801a99c:	78fb      	ldrb	r3, [r7, #3]
 801a99e:	f003 020f 	and.w	r2, r3, #15
 801a9a2:	4613      	mov	r3, r2
 801a9a4:	00db      	lsls	r3, r3, #3
 801a9a6:	1a9b      	subs	r3, r3, r2
 801a9a8:	009b      	lsls	r3, r3, #2
 801a9aa:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 801a9ae:	687a      	ldr	r2, [r7, #4]
 801a9b0:	4413      	add	r3, r2
 801a9b2:	3304      	adds	r3, #4
 801a9b4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 801a9b6:	68fb      	ldr	r3, [r7, #12]
 801a9b8:	2200      	movs	r2, #0
 801a9ba:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 801a9bc:	68fb      	ldr	r3, [r7, #12]
 801a9be:	2200      	movs	r2, #0
 801a9c0:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 801a9c2:	78fb      	ldrb	r3, [r7, #3]
 801a9c4:	f003 030f 	and.w	r3, r3, #15
 801a9c8:	b2da      	uxtb	r2, r3
 801a9ca:	68fb      	ldr	r3, [r7, #12]
 801a9cc:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 801a9ce:	687b      	ldr	r3, [r7, #4]
 801a9d0:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 801a9d4:	2b01      	cmp	r3, #1
 801a9d6:	d101      	bne.n	801a9dc <HAL_PCD_EP_ClrStall+0x86>
 801a9d8:	2302      	movs	r3, #2
 801a9da:	e00e      	b.n	801a9fa <HAL_PCD_EP_ClrStall+0xa4>
 801a9dc:	687b      	ldr	r3, [r7, #4]
 801a9de:	2201      	movs	r2, #1
 801a9e0:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 801a9e4:	687b      	ldr	r3, [r7, #4]
 801a9e6:	681b      	ldr	r3, [r3, #0]
 801a9e8:	68f9      	ldr	r1, [r7, #12]
 801a9ea:	4618      	mov	r0, r3
 801a9ec:	f004 f9ab 	bl	801ed46 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 801a9f0:	687b      	ldr	r3, [r7, #4]
 801a9f2:	2200      	movs	r2, #0
 801a9f4:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 801a9f8:	2300      	movs	r3, #0
}
 801a9fa:	4618      	mov	r0, r3
 801a9fc:	3710      	adds	r7, #16
 801a9fe:	46bd      	mov	sp, r7
 801aa00:	bd80      	pop	{r7, pc}

0801aa02 <HAL_PCD_EP_Flush>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Flush(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 801aa02:	b580      	push	{r7, lr}
 801aa04:	b082      	sub	sp, #8
 801aa06:	af00      	add	r7, sp, #0
 801aa08:	6078      	str	r0, [r7, #4]
 801aa0a:	460b      	mov	r3, r1
 801aa0c:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 801aa0e:	687b      	ldr	r3, [r7, #4]
 801aa10:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 801aa14:	2b01      	cmp	r3, #1
 801aa16:	d101      	bne.n	801aa1c <HAL_PCD_EP_Flush+0x1a>
 801aa18:	2302      	movs	r3, #2
 801aa1a:	e01b      	b.n	801aa54 <HAL_PCD_EP_Flush+0x52>
 801aa1c:	687b      	ldr	r3, [r7, #4]
 801aa1e:	2201      	movs	r2, #1
 801aa20:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  if ((ep_addr & 0x80U) == 0x80U)
 801aa24:	f997 3003 	ldrsb.w	r3, [r7, #3]
 801aa28:	2b00      	cmp	r3, #0
 801aa2a:	da09      	bge.n	801aa40 <HAL_PCD_EP_Flush+0x3e>
  {
    (void)USB_FlushTxFifo(hpcd->Instance, (uint32_t)ep_addr & EP_ADDR_MSK);
 801aa2c:	687b      	ldr	r3, [r7, #4]
 801aa2e:	681a      	ldr	r2, [r3, #0]
 801aa30:	78fb      	ldrb	r3, [r7, #3]
 801aa32:	f003 030f 	and.w	r3, r3, #15
 801aa36:	4619      	mov	r1, r3
 801aa38:	4610      	mov	r0, r2
 801aa3a:	f003 fb03 	bl	801e044 <USB_FlushTxFifo>
 801aa3e:	e004      	b.n	801aa4a <HAL_PCD_EP_Flush+0x48>
  }
  else
  {
    (void)USB_FlushRxFifo(hpcd->Instance);
 801aa40:	687b      	ldr	r3, [r7, #4]
 801aa42:	681b      	ldr	r3, [r3, #0]
 801aa44:	4618      	mov	r0, r3
 801aa46:	f003 fb21 	bl	801e08c <USB_FlushRxFifo>
  }

  __HAL_UNLOCK(hpcd);
 801aa4a:	687b      	ldr	r3, [r7, #4]
 801aa4c:	2200      	movs	r2, #0
 801aa4e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 801aa52:	2300      	movs	r3, #0
}
 801aa54:	4618      	mov	r0, r3
 801aa56:	3708      	adds	r7, #8
 801aa58:	46bd      	mov	sp, r7
 801aa5a:	bd80      	pop	{r7, pc}

0801aa5c <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 801aa5c:	b580      	push	{r7, lr}
 801aa5e:	b08a      	sub	sp, #40	; 0x28
 801aa60:	af02      	add	r7, sp, #8
 801aa62:	6078      	str	r0, [r7, #4]
 801aa64:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 801aa66:	687b      	ldr	r3, [r7, #4]
 801aa68:	681b      	ldr	r3, [r3, #0]
 801aa6a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801aa6c:	697b      	ldr	r3, [r7, #20]
 801aa6e:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 801aa70:	683a      	ldr	r2, [r7, #0]
 801aa72:	4613      	mov	r3, r2
 801aa74:	00db      	lsls	r3, r3, #3
 801aa76:	1a9b      	subs	r3, r3, r2
 801aa78:	009b      	lsls	r3, r3, #2
 801aa7a:	3338      	adds	r3, #56	; 0x38
 801aa7c:	687a      	ldr	r2, [r7, #4]
 801aa7e:	4413      	add	r3, r2
 801aa80:	3304      	adds	r3, #4
 801aa82:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 801aa84:	68fb      	ldr	r3, [r7, #12]
 801aa86:	699a      	ldr	r2, [r3, #24]
 801aa88:	68fb      	ldr	r3, [r7, #12]
 801aa8a:	695b      	ldr	r3, [r3, #20]
 801aa8c:	429a      	cmp	r2, r3
 801aa8e:	d901      	bls.n	801aa94 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 801aa90:	2301      	movs	r3, #1
 801aa92:	e06c      	b.n	801ab6e <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 801aa94:	68fb      	ldr	r3, [r7, #12]
 801aa96:	695a      	ldr	r2, [r3, #20]
 801aa98:	68fb      	ldr	r3, [r7, #12]
 801aa9a:	699b      	ldr	r3, [r3, #24]
 801aa9c:	1ad3      	subs	r3, r2, r3
 801aa9e:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 801aaa0:	68fb      	ldr	r3, [r7, #12]
 801aaa2:	689b      	ldr	r3, [r3, #8]
 801aaa4:	69fa      	ldr	r2, [r7, #28]
 801aaa6:	429a      	cmp	r2, r3
 801aaa8:	d902      	bls.n	801aab0 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 801aaaa:	68fb      	ldr	r3, [r7, #12]
 801aaac:	689b      	ldr	r3, [r3, #8]
 801aaae:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 801aab0:	69fb      	ldr	r3, [r7, #28]
 801aab2:	3303      	adds	r3, #3
 801aab4:	089b      	lsrs	r3, r3, #2
 801aab6:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 801aab8:	e02b      	b.n	801ab12 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 801aaba:	68fb      	ldr	r3, [r7, #12]
 801aabc:	695a      	ldr	r2, [r3, #20]
 801aabe:	68fb      	ldr	r3, [r7, #12]
 801aac0:	699b      	ldr	r3, [r3, #24]
 801aac2:	1ad3      	subs	r3, r2, r3
 801aac4:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 801aac6:	68fb      	ldr	r3, [r7, #12]
 801aac8:	689b      	ldr	r3, [r3, #8]
 801aaca:	69fa      	ldr	r2, [r7, #28]
 801aacc:	429a      	cmp	r2, r3
 801aace:	d902      	bls.n	801aad6 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 801aad0:	68fb      	ldr	r3, [r7, #12]
 801aad2:	689b      	ldr	r3, [r3, #8]
 801aad4:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 801aad6:	69fb      	ldr	r3, [r7, #28]
 801aad8:	3303      	adds	r3, #3
 801aada:	089b      	lsrs	r3, r3, #2
 801aadc:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 801aade:	68fb      	ldr	r3, [r7, #12]
 801aae0:	68d9      	ldr	r1, [r3, #12]
 801aae2:	683b      	ldr	r3, [r7, #0]
 801aae4:	b2da      	uxtb	r2, r3
 801aae6:	69fb      	ldr	r3, [r7, #28]
 801aae8:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 801aaea:	687b      	ldr	r3, [r7, #4]
 801aaec:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 801aaee:	b2db      	uxtb	r3, r3
 801aaf0:	9300      	str	r3, [sp, #0]
 801aaf2:	4603      	mov	r3, r0
 801aaf4:	6978      	ldr	r0, [r7, #20]
 801aaf6:	f004 f822 	bl	801eb3e <USB_WritePacket>

    ep->xfer_buff  += len;
 801aafa:	68fb      	ldr	r3, [r7, #12]
 801aafc:	68da      	ldr	r2, [r3, #12]
 801aafe:	69fb      	ldr	r3, [r7, #28]
 801ab00:	441a      	add	r2, r3
 801ab02:	68fb      	ldr	r3, [r7, #12]
 801ab04:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 801ab06:	68fb      	ldr	r3, [r7, #12]
 801ab08:	699a      	ldr	r2, [r3, #24]
 801ab0a:	69fb      	ldr	r3, [r7, #28]
 801ab0c:	441a      	add	r2, r3
 801ab0e:	68fb      	ldr	r3, [r7, #12]
 801ab10:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 801ab12:	683b      	ldr	r3, [r7, #0]
 801ab14:	015a      	lsls	r2, r3, #5
 801ab16:	693b      	ldr	r3, [r7, #16]
 801ab18:	4413      	add	r3, r2
 801ab1a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801ab1e:	699b      	ldr	r3, [r3, #24]
 801ab20:	b29b      	uxth	r3, r3
 801ab22:	69ba      	ldr	r2, [r7, #24]
 801ab24:	429a      	cmp	r2, r3
 801ab26:	d809      	bhi.n	801ab3c <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 801ab28:	68fb      	ldr	r3, [r7, #12]
 801ab2a:	699a      	ldr	r2, [r3, #24]
 801ab2c:	68fb      	ldr	r3, [r7, #12]
 801ab2e:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 801ab30:	429a      	cmp	r2, r3
 801ab32:	d203      	bcs.n	801ab3c <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 801ab34:	68fb      	ldr	r3, [r7, #12]
 801ab36:	695b      	ldr	r3, [r3, #20]
 801ab38:	2b00      	cmp	r3, #0
 801ab3a:	d1be      	bne.n	801aaba <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 801ab3c:	68fb      	ldr	r3, [r7, #12]
 801ab3e:	695a      	ldr	r2, [r3, #20]
 801ab40:	68fb      	ldr	r3, [r7, #12]
 801ab42:	699b      	ldr	r3, [r3, #24]
 801ab44:	429a      	cmp	r2, r3
 801ab46:	d811      	bhi.n	801ab6c <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 801ab48:	683b      	ldr	r3, [r7, #0]
 801ab4a:	f003 030f 	and.w	r3, r3, #15
 801ab4e:	2201      	movs	r2, #1
 801ab50:	fa02 f303 	lsl.w	r3, r2, r3
 801ab54:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 801ab56:	693b      	ldr	r3, [r7, #16]
 801ab58:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801ab5c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 801ab5e:	68bb      	ldr	r3, [r7, #8]
 801ab60:	43db      	mvns	r3, r3
 801ab62:	6939      	ldr	r1, [r7, #16]
 801ab64:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 801ab68:	4013      	ands	r3, r2
 801ab6a:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 801ab6c:	2300      	movs	r3, #0
}
 801ab6e:	4618      	mov	r0, r3
 801ab70:	3720      	adds	r7, #32
 801ab72:	46bd      	mov	sp, r7
 801ab74:	bd80      	pop	{r7, pc}
	...

0801ab78 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 801ab78:	b580      	push	{r7, lr}
 801ab7a:	b086      	sub	sp, #24
 801ab7c:	af00      	add	r7, sp, #0
 801ab7e:	6078      	str	r0, [r7, #4]
 801ab80:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 801ab82:	687b      	ldr	r3, [r7, #4]
 801ab84:	681b      	ldr	r3, [r3, #0]
 801ab86:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801ab88:	697b      	ldr	r3, [r7, #20]
 801ab8a:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 801ab8c:	697b      	ldr	r3, [r7, #20]
 801ab8e:	333c      	adds	r3, #60	; 0x3c
 801ab90:	3304      	adds	r3, #4
 801ab92:	681b      	ldr	r3, [r3, #0]
 801ab94:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 801ab96:	683b      	ldr	r3, [r7, #0]
 801ab98:	015a      	lsls	r2, r3, #5
 801ab9a:	693b      	ldr	r3, [r7, #16]
 801ab9c:	4413      	add	r3, r2
 801ab9e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801aba2:	689b      	ldr	r3, [r3, #8]
 801aba4:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 801aba6:	687b      	ldr	r3, [r7, #4]
 801aba8:	691b      	ldr	r3, [r3, #16]
 801abaa:	2b01      	cmp	r3, #1
 801abac:	f040 80a0 	bne.w	801acf0 <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 801abb0:	68bb      	ldr	r3, [r7, #8]
 801abb2:	f003 0308 	and.w	r3, r3, #8
 801abb6:	2b00      	cmp	r3, #0
 801abb8:	d015      	beq.n	801abe6 <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 801abba:	68fb      	ldr	r3, [r7, #12]
 801abbc:	4a72      	ldr	r2, [pc, #456]	; (801ad88 <PCD_EP_OutXfrComplete_int+0x210>)
 801abbe:	4293      	cmp	r3, r2
 801abc0:	f240 80dd 	bls.w	801ad7e <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 801abc4:	68bb      	ldr	r3, [r7, #8]
 801abc6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 801abca:	2b00      	cmp	r3, #0
 801abcc:	f000 80d7 	beq.w	801ad7e <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 801abd0:	683b      	ldr	r3, [r7, #0]
 801abd2:	015a      	lsls	r2, r3, #5
 801abd4:	693b      	ldr	r3, [r7, #16]
 801abd6:	4413      	add	r3, r2
 801abd8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801abdc:	461a      	mov	r2, r3
 801abde:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 801abe2:	6093      	str	r3, [r2, #8]
 801abe4:	e0cb      	b.n	801ad7e <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 801abe6:	68bb      	ldr	r3, [r7, #8]
 801abe8:	f003 0320 	and.w	r3, r3, #32
 801abec:	2b00      	cmp	r3, #0
 801abee:	d009      	beq.n	801ac04 <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 801abf0:	683b      	ldr	r3, [r7, #0]
 801abf2:	015a      	lsls	r2, r3, #5
 801abf4:	693b      	ldr	r3, [r7, #16]
 801abf6:	4413      	add	r3, r2
 801abf8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801abfc:	461a      	mov	r2, r3
 801abfe:	2320      	movs	r3, #32
 801ac00:	6093      	str	r3, [r2, #8]
 801ac02:	e0bc      	b.n	801ad7e <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 801ac04:	68bb      	ldr	r3, [r7, #8]
 801ac06:	f003 0328 	and.w	r3, r3, #40	; 0x28
 801ac0a:	2b00      	cmp	r3, #0
 801ac0c:	f040 80b7 	bne.w	801ad7e <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 801ac10:	68fb      	ldr	r3, [r7, #12]
 801ac12:	4a5d      	ldr	r2, [pc, #372]	; (801ad88 <PCD_EP_OutXfrComplete_int+0x210>)
 801ac14:	4293      	cmp	r3, r2
 801ac16:	d90f      	bls.n	801ac38 <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 801ac18:	68bb      	ldr	r3, [r7, #8]
 801ac1a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 801ac1e:	2b00      	cmp	r3, #0
 801ac20:	d00a      	beq.n	801ac38 <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 801ac22:	683b      	ldr	r3, [r7, #0]
 801ac24:	015a      	lsls	r2, r3, #5
 801ac26:	693b      	ldr	r3, [r7, #16]
 801ac28:	4413      	add	r3, r2
 801ac2a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801ac2e:	461a      	mov	r2, r3
 801ac30:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 801ac34:	6093      	str	r3, [r2, #8]
 801ac36:	e0a2      	b.n	801ad7e <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 801ac38:	6879      	ldr	r1, [r7, #4]
 801ac3a:	683a      	ldr	r2, [r7, #0]
 801ac3c:	4613      	mov	r3, r2
 801ac3e:	00db      	lsls	r3, r3, #3
 801ac40:	1a9b      	subs	r3, r3, r2
 801ac42:	009b      	lsls	r3, r3, #2
 801ac44:	440b      	add	r3, r1
 801ac46:	f503 7301 	add.w	r3, r3, #516	; 0x204
 801ac4a:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 801ac4c:	683b      	ldr	r3, [r7, #0]
 801ac4e:	0159      	lsls	r1, r3, #5
 801ac50:	693b      	ldr	r3, [r7, #16]
 801ac52:	440b      	add	r3, r1
 801ac54:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801ac58:	691b      	ldr	r3, [r3, #16]
 801ac5a:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 801ac5e:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 801ac60:	6878      	ldr	r0, [r7, #4]
 801ac62:	683a      	ldr	r2, [r7, #0]
 801ac64:	4613      	mov	r3, r2
 801ac66:	00db      	lsls	r3, r3, #3
 801ac68:	1a9b      	subs	r3, r3, r2
 801ac6a:	009b      	lsls	r3, r3, #2
 801ac6c:	4403      	add	r3, r0
 801ac6e:	f503 7305 	add.w	r3, r3, #532	; 0x214
 801ac72:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 801ac74:	6879      	ldr	r1, [r7, #4]
 801ac76:	683a      	ldr	r2, [r7, #0]
 801ac78:	4613      	mov	r3, r2
 801ac7a:	00db      	lsls	r3, r3, #3
 801ac7c:	1a9b      	subs	r3, r3, r2
 801ac7e:	009b      	lsls	r3, r3, #2
 801ac80:	440b      	add	r3, r1
 801ac82:	f503 7302 	add.w	r3, r3, #520	; 0x208
 801ac86:	6819      	ldr	r1, [r3, #0]
 801ac88:	6878      	ldr	r0, [r7, #4]
 801ac8a:	683a      	ldr	r2, [r7, #0]
 801ac8c:	4613      	mov	r3, r2
 801ac8e:	00db      	lsls	r3, r3, #3
 801ac90:	1a9b      	subs	r3, r3, r2
 801ac92:	009b      	lsls	r3, r3, #2
 801ac94:	4403      	add	r3, r0
 801ac96:	f503 7301 	add.w	r3, r3, #516	; 0x204
 801ac9a:	681b      	ldr	r3, [r3, #0]
 801ac9c:	4419      	add	r1, r3
 801ac9e:	6878      	ldr	r0, [r7, #4]
 801aca0:	683a      	ldr	r2, [r7, #0]
 801aca2:	4613      	mov	r3, r2
 801aca4:	00db      	lsls	r3, r3, #3
 801aca6:	1a9b      	subs	r3, r3, r2
 801aca8:	009b      	lsls	r3, r3, #2
 801acaa:	4403      	add	r3, r0
 801acac:	f503 7302 	add.w	r3, r3, #520	; 0x208
 801acb0:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 801acb2:	683b      	ldr	r3, [r7, #0]
 801acb4:	2b00      	cmp	r3, #0
 801acb6:	d114      	bne.n	801ace2 <PCD_EP_OutXfrComplete_int+0x16a>
 801acb8:	6879      	ldr	r1, [r7, #4]
 801acba:	683a      	ldr	r2, [r7, #0]
 801acbc:	4613      	mov	r3, r2
 801acbe:	00db      	lsls	r3, r3, #3
 801acc0:	1a9b      	subs	r3, r3, r2
 801acc2:	009b      	lsls	r3, r3, #2
 801acc4:	440b      	add	r3, r1
 801acc6:	f503 7304 	add.w	r3, r3, #528	; 0x210
 801acca:	681b      	ldr	r3, [r3, #0]
 801accc:	2b00      	cmp	r3, #0
 801acce:	d108      	bne.n	801ace2 <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 801acd0:	687b      	ldr	r3, [r7, #4]
 801acd2:	6818      	ldr	r0, [r3, #0]
 801acd4:	687b      	ldr	r3, [r7, #4]
 801acd6:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 801acda:	461a      	mov	r2, r3
 801acdc:	2101      	movs	r1, #1
 801acde:	f004 f9c5 	bl	801f06c <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 801ace2:	683b      	ldr	r3, [r7, #0]
 801ace4:	b2db      	uxtb	r3, r3
 801ace6:	4619      	mov	r1, r3
 801ace8:	6878      	ldr	r0, [r7, #4]
 801acea:	f007 fbef 	bl	80224cc <HAL_PCD_DataOutStageCallback>
 801acee:	e046      	b.n	801ad7e <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 801acf0:	68fb      	ldr	r3, [r7, #12]
 801acf2:	4a26      	ldr	r2, [pc, #152]	; (801ad8c <PCD_EP_OutXfrComplete_int+0x214>)
 801acf4:	4293      	cmp	r3, r2
 801acf6:	d124      	bne.n	801ad42 <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 801acf8:	68bb      	ldr	r3, [r7, #8]
 801acfa:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 801acfe:	2b00      	cmp	r3, #0
 801ad00:	d00a      	beq.n	801ad18 <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 801ad02:	683b      	ldr	r3, [r7, #0]
 801ad04:	015a      	lsls	r2, r3, #5
 801ad06:	693b      	ldr	r3, [r7, #16]
 801ad08:	4413      	add	r3, r2
 801ad0a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801ad0e:	461a      	mov	r2, r3
 801ad10:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 801ad14:	6093      	str	r3, [r2, #8]
 801ad16:	e032      	b.n	801ad7e <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 801ad18:	68bb      	ldr	r3, [r7, #8]
 801ad1a:	f003 0320 	and.w	r3, r3, #32
 801ad1e:	2b00      	cmp	r3, #0
 801ad20:	d008      	beq.n	801ad34 <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 801ad22:	683b      	ldr	r3, [r7, #0]
 801ad24:	015a      	lsls	r2, r3, #5
 801ad26:	693b      	ldr	r3, [r7, #16]
 801ad28:	4413      	add	r3, r2
 801ad2a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801ad2e:	461a      	mov	r2, r3
 801ad30:	2320      	movs	r3, #32
 801ad32:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 801ad34:	683b      	ldr	r3, [r7, #0]
 801ad36:	b2db      	uxtb	r3, r3
 801ad38:	4619      	mov	r1, r3
 801ad3a:	6878      	ldr	r0, [r7, #4]
 801ad3c:	f007 fbc6 	bl	80224cc <HAL_PCD_DataOutStageCallback>
 801ad40:	e01d      	b.n	801ad7e <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 801ad42:	683b      	ldr	r3, [r7, #0]
 801ad44:	2b00      	cmp	r3, #0
 801ad46:	d114      	bne.n	801ad72 <PCD_EP_OutXfrComplete_int+0x1fa>
 801ad48:	6879      	ldr	r1, [r7, #4]
 801ad4a:	683a      	ldr	r2, [r7, #0]
 801ad4c:	4613      	mov	r3, r2
 801ad4e:	00db      	lsls	r3, r3, #3
 801ad50:	1a9b      	subs	r3, r3, r2
 801ad52:	009b      	lsls	r3, r3, #2
 801ad54:	440b      	add	r3, r1
 801ad56:	f503 7304 	add.w	r3, r3, #528	; 0x210
 801ad5a:	681b      	ldr	r3, [r3, #0]
 801ad5c:	2b00      	cmp	r3, #0
 801ad5e:	d108      	bne.n	801ad72 <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 801ad60:	687b      	ldr	r3, [r7, #4]
 801ad62:	6818      	ldr	r0, [r3, #0]
 801ad64:	687b      	ldr	r3, [r7, #4]
 801ad66:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 801ad6a:	461a      	mov	r2, r3
 801ad6c:	2100      	movs	r1, #0
 801ad6e:	f004 f97d 	bl	801f06c <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 801ad72:	683b      	ldr	r3, [r7, #0]
 801ad74:	b2db      	uxtb	r3, r3
 801ad76:	4619      	mov	r1, r3
 801ad78:	6878      	ldr	r0, [r7, #4]
 801ad7a:	f007 fba7 	bl	80224cc <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 801ad7e:	2300      	movs	r3, #0
}
 801ad80:	4618      	mov	r0, r3
 801ad82:	3718      	adds	r7, #24
 801ad84:	46bd      	mov	sp, r7
 801ad86:	bd80      	pop	{r7, pc}
 801ad88:	4f54300a 	.word	0x4f54300a
 801ad8c:	4f54310a 	.word	0x4f54310a

0801ad90 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 801ad90:	b580      	push	{r7, lr}
 801ad92:	b086      	sub	sp, #24
 801ad94:	af00      	add	r7, sp, #0
 801ad96:	6078      	str	r0, [r7, #4]
 801ad98:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 801ad9a:	687b      	ldr	r3, [r7, #4]
 801ad9c:	681b      	ldr	r3, [r3, #0]
 801ad9e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801ada0:	697b      	ldr	r3, [r7, #20]
 801ada2:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 801ada4:	697b      	ldr	r3, [r7, #20]
 801ada6:	333c      	adds	r3, #60	; 0x3c
 801ada8:	3304      	adds	r3, #4
 801adaa:	681b      	ldr	r3, [r3, #0]
 801adac:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 801adae:	683b      	ldr	r3, [r7, #0]
 801adb0:	015a      	lsls	r2, r3, #5
 801adb2:	693b      	ldr	r3, [r7, #16]
 801adb4:	4413      	add	r3, r2
 801adb6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801adba:	689b      	ldr	r3, [r3, #8]
 801adbc:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 801adbe:	68fb      	ldr	r3, [r7, #12]
 801adc0:	4a15      	ldr	r2, [pc, #84]	; (801ae18 <PCD_EP_OutSetupPacket_int+0x88>)
 801adc2:	4293      	cmp	r3, r2
 801adc4:	d90e      	bls.n	801ade4 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 801adc6:	68bb      	ldr	r3, [r7, #8]
 801adc8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 801adcc:	2b00      	cmp	r3, #0
 801adce:	d009      	beq.n	801ade4 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 801add0:	683b      	ldr	r3, [r7, #0]
 801add2:	015a      	lsls	r2, r3, #5
 801add4:	693b      	ldr	r3, [r7, #16]
 801add6:	4413      	add	r3, r2
 801add8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801addc:	461a      	mov	r2, r3
 801adde:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 801ade2:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 801ade4:	6878      	ldr	r0, [r7, #4]
 801ade6:	f007 fb5f 	bl	80224a8 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 801adea:	68fb      	ldr	r3, [r7, #12]
 801adec:	4a0a      	ldr	r2, [pc, #40]	; (801ae18 <PCD_EP_OutSetupPacket_int+0x88>)
 801adee:	4293      	cmp	r3, r2
 801adf0:	d90c      	bls.n	801ae0c <PCD_EP_OutSetupPacket_int+0x7c>
 801adf2:	687b      	ldr	r3, [r7, #4]
 801adf4:	691b      	ldr	r3, [r3, #16]
 801adf6:	2b01      	cmp	r3, #1
 801adf8:	d108      	bne.n	801ae0c <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 801adfa:	687b      	ldr	r3, [r7, #4]
 801adfc:	6818      	ldr	r0, [r3, #0]
 801adfe:	687b      	ldr	r3, [r7, #4]
 801ae00:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 801ae04:	461a      	mov	r2, r3
 801ae06:	2101      	movs	r1, #1
 801ae08:	f004 f930 	bl	801f06c <USB_EP0_OutStart>
  }

  return HAL_OK;
 801ae0c:	2300      	movs	r3, #0
}
 801ae0e:	4618      	mov	r0, r3
 801ae10:	3718      	adds	r7, #24
 801ae12:	46bd      	mov	sp, r7
 801ae14:	bd80      	pop	{r7, pc}
 801ae16:	bf00      	nop
 801ae18:	4f54300a 	.word	0x4f54300a

0801ae1c <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 801ae1c:	b480      	push	{r7}
 801ae1e:	b085      	sub	sp, #20
 801ae20:	af00      	add	r7, sp, #0
 801ae22:	6078      	str	r0, [r7, #4]
 801ae24:	460b      	mov	r3, r1
 801ae26:	70fb      	strb	r3, [r7, #3]
 801ae28:	4613      	mov	r3, r2
 801ae2a:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 801ae2c:	687b      	ldr	r3, [r7, #4]
 801ae2e:	681b      	ldr	r3, [r3, #0]
 801ae30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801ae32:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 801ae34:	78fb      	ldrb	r3, [r7, #3]
 801ae36:	2b00      	cmp	r3, #0
 801ae38:	d107      	bne.n	801ae4a <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 801ae3a:	883b      	ldrh	r3, [r7, #0]
 801ae3c:	0419      	lsls	r1, r3, #16
 801ae3e:	687b      	ldr	r3, [r7, #4]
 801ae40:	681b      	ldr	r3, [r3, #0]
 801ae42:	68ba      	ldr	r2, [r7, #8]
 801ae44:	430a      	orrs	r2, r1
 801ae46:	629a      	str	r2, [r3, #40]	; 0x28
 801ae48:	e028      	b.n	801ae9c <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 801ae4a:	687b      	ldr	r3, [r7, #4]
 801ae4c:	681b      	ldr	r3, [r3, #0]
 801ae4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801ae50:	0c1b      	lsrs	r3, r3, #16
 801ae52:	68ba      	ldr	r2, [r7, #8]
 801ae54:	4413      	add	r3, r2
 801ae56:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 801ae58:	2300      	movs	r3, #0
 801ae5a:	73fb      	strb	r3, [r7, #15]
 801ae5c:	e00d      	b.n	801ae7a <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 801ae5e:	687b      	ldr	r3, [r7, #4]
 801ae60:	681a      	ldr	r2, [r3, #0]
 801ae62:	7bfb      	ldrb	r3, [r7, #15]
 801ae64:	3340      	adds	r3, #64	; 0x40
 801ae66:	009b      	lsls	r3, r3, #2
 801ae68:	4413      	add	r3, r2
 801ae6a:	685b      	ldr	r3, [r3, #4]
 801ae6c:	0c1b      	lsrs	r3, r3, #16
 801ae6e:	68ba      	ldr	r2, [r7, #8]
 801ae70:	4413      	add	r3, r2
 801ae72:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 801ae74:	7bfb      	ldrb	r3, [r7, #15]
 801ae76:	3301      	adds	r3, #1
 801ae78:	73fb      	strb	r3, [r7, #15]
 801ae7a:	7bfa      	ldrb	r2, [r7, #15]
 801ae7c:	78fb      	ldrb	r3, [r7, #3]
 801ae7e:	3b01      	subs	r3, #1
 801ae80:	429a      	cmp	r2, r3
 801ae82:	d3ec      	bcc.n	801ae5e <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 801ae84:	883b      	ldrh	r3, [r7, #0]
 801ae86:	0418      	lsls	r0, r3, #16
 801ae88:	687b      	ldr	r3, [r7, #4]
 801ae8a:	6819      	ldr	r1, [r3, #0]
 801ae8c:	78fb      	ldrb	r3, [r7, #3]
 801ae8e:	3b01      	subs	r3, #1
 801ae90:	68ba      	ldr	r2, [r7, #8]
 801ae92:	4302      	orrs	r2, r0
 801ae94:	3340      	adds	r3, #64	; 0x40
 801ae96:	009b      	lsls	r3, r3, #2
 801ae98:	440b      	add	r3, r1
 801ae9a:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 801ae9c:	2300      	movs	r3, #0
}
 801ae9e:	4618      	mov	r0, r3
 801aea0:	3714      	adds	r7, #20
 801aea2:	46bd      	mov	sp, r7
 801aea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 801aea8:	4770      	bx	lr

0801aeaa <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 801aeaa:	b480      	push	{r7}
 801aeac:	b083      	sub	sp, #12
 801aeae:	af00      	add	r7, sp, #0
 801aeb0:	6078      	str	r0, [r7, #4]
 801aeb2:	460b      	mov	r3, r1
 801aeb4:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 801aeb6:	687b      	ldr	r3, [r7, #4]
 801aeb8:	681b      	ldr	r3, [r3, #0]
 801aeba:	887a      	ldrh	r2, [r7, #2]
 801aebc:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 801aebe:	2300      	movs	r3, #0
}
 801aec0:	4618      	mov	r0, r3
 801aec2:	370c      	adds	r7, #12
 801aec4:	46bd      	mov	sp, r7
 801aec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801aeca:	4770      	bx	lr

0801aecc <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 801aecc:	b480      	push	{r7}
 801aece:	b085      	sub	sp, #20
 801aed0:	af00      	add	r7, sp, #0
 801aed2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 801aed4:	687b      	ldr	r3, [r7, #4]
 801aed6:	681b      	ldr	r3, [r3, #0]
 801aed8:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 801aeda:	687b      	ldr	r3, [r7, #4]
 801aedc:	2201      	movs	r2, #1
 801aede:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 801aee2:	687b      	ldr	r3, [r7, #4]
 801aee4:	2200      	movs	r2, #0
 801aee6:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 801aeea:	68fb      	ldr	r3, [r7, #12]
 801aeec:	699b      	ldr	r3, [r3, #24]
 801aeee:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 801aef2:	68fb      	ldr	r3, [r7, #12]
 801aef4:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 801aef6:	68fb      	ldr	r3, [r7, #12]
 801aef8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801aefa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 801aefe:	f043 0303 	orr.w	r3, r3, #3
 801af02:	68fa      	ldr	r2, [r7, #12]
 801af04:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 801af06:	2300      	movs	r3, #0
}
 801af08:	4618      	mov	r0, r3
 801af0a:	3714      	adds	r7, #20
 801af0c:	46bd      	mov	sp, r7
 801af0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801af12:	4770      	bx	lr

0801af14 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 801af14:	b580      	push	{r7, lr}
 801af16:	b082      	sub	sp, #8
 801af18:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 801af1a:	2300      	movs	r3, #0
 801af1c:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 801af1e:	2300      	movs	r3, #0
 801af20:	603b      	str	r3, [r7, #0]
 801af22:	4b20      	ldr	r3, [pc, #128]	; (801afa4 <HAL_PWREx_EnableOverDrive+0x90>)
 801af24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801af26:	4a1f      	ldr	r2, [pc, #124]	; (801afa4 <HAL_PWREx_EnableOverDrive+0x90>)
 801af28:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 801af2c:	6413      	str	r3, [r2, #64]	; 0x40
 801af2e:	4b1d      	ldr	r3, [pc, #116]	; (801afa4 <HAL_PWREx_EnableOverDrive+0x90>)
 801af30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801af32:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 801af36:	603b      	str	r3, [r7, #0]
 801af38:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 801af3a:	4b1b      	ldr	r3, [pc, #108]	; (801afa8 <HAL_PWREx_EnableOverDrive+0x94>)
 801af3c:	2201      	movs	r2, #1
 801af3e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 801af40:	f7fd f9e8 	bl	8018314 <HAL_GetTick>
 801af44:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 801af46:	e009      	b.n	801af5c <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 801af48:	f7fd f9e4 	bl	8018314 <HAL_GetTick>
 801af4c:	4602      	mov	r2, r0
 801af4e:	687b      	ldr	r3, [r7, #4]
 801af50:	1ad3      	subs	r3, r2, r3
 801af52:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 801af56:	d901      	bls.n	801af5c <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 801af58:	2303      	movs	r3, #3
 801af5a:	e01f      	b.n	801af9c <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 801af5c:	4b13      	ldr	r3, [pc, #76]	; (801afac <HAL_PWREx_EnableOverDrive+0x98>)
 801af5e:	685b      	ldr	r3, [r3, #4]
 801af60:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 801af64:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801af68:	d1ee      	bne.n	801af48 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 801af6a:	4b11      	ldr	r3, [pc, #68]	; (801afb0 <HAL_PWREx_EnableOverDrive+0x9c>)
 801af6c:	2201      	movs	r2, #1
 801af6e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 801af70:	f7fd f9d0 	bl	8018314 <HAL_GetTick>
 801af74:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 801af76:	e009      	b.n	801af8c <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 801af78:	f7fd f9cc 	bl	8018314 <HAL_GetTick>
 801af7c:	4602      	mov	r2, r0
 801af7e:	687b      	ldr	r3, [r7, #4]
 801af80:	1ad3      	subs	r3, r2, r3
 801af82:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 801af86:	d901      	bls.n	801af8c <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 801af88:	2303      	movs	r3, #3
 801af8a:	e007      	b.n	801af9c <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 801af8c:	4b07      	ldr	r3, [pc, #28]	; (801afac <HAL_PWREx_EnableOverDrive+0x98>)
 801af8e:	685b      	ldr	r3, [r3, #4]
 801af90:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801af94:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 801af98:	d1ee      	bne.n	801af78 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 801af9a:	2300      	movs	r3, #0
}
 801af9c:	4618      	mov	r0, r3
 801af9e:	3708      	adds	r7, #8
 801afa0:	46bd      	mov	sp, r7
 801afa2:	bd80      	pop	{r7, pc}
 801afa4:	40023800 	.word	0x40023800
 801afa8:	420e0040 	.word	0x420e0040
 801afac:	40007000 	.word	0x40007000
 801afb0:	420e0044 	.word	0x420e0044

0801afb4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 801afb4:	b580      	push	{r7, lr}
 801afb6:	b084      	sub	sp, #16
 801afb8:	af00      	add	r7, sp, #0
 801afba:	6078      	str	r0, [r7, #4]
 801afbc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 801afbe:	687b      	ldr	r3, [r7, #4]
 801afc0:	2b00      	cmp	r3, #0
 801afc2:	d101      	bne.n	801afc8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 801afc4:	2301      	movs	r3, #1
 801afc6:	e0cc      	b.n	801b162 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 801afc8:	4b68      	ldr	r3, [pc, #416]	; (801b16c <HAL_RCC_ClockConfig+0x1b8>)
 801afca:	681b      	ldr	r3, [r3, #0]
 801afcc:	f003 030f 	and.w	r3, r3, #15
 801afd0:	683a      	ldr	r2, [r7, #0]
 801afd2:	429a      	cmp	r2, r3
 801afd4:	d90c      	bls.n	801aff0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 801afd6:	4b65      	ldr	r3, [pc, #404]	; (801b16c <HAL_RCC_ClockConfig+0x1b8>)
 801afd8:	683a      	ldr	r2, [r7, #0]
 801afda:	b2d2      	uxtb	r2, r2
 801afdc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 801afde:	4b63      	ldr	r3, [pc, #396]	; (801b16c <HAL_RCC_ClockConfig+0x1b8>)
 801afe0:	681b      	ldr	r3, [r3, #0]
 801afe2:	f003 030f 	and.w	r3, r3, #15
 801afe6:	683a      	ldr	r2, [r7, #0]
 801afe8:	429a      	cmp	r2, r3
 801afea:	d001      	beq.n	801aff0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 801afec:	2301      	movs	r3, #1
 801afee:	e0b8      	b.n	801b162 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 801aff0:	687b      	ldr	r3, [r7, #4]
 801aff2:	681b      	ldr	r3, [r3, #0]
 801aff4:	f003 0302 	and.w	r3, r3, #2
 801aff8:	2b00      	cmp	r3, #0
 801affa:	d020      	beq.n	801b03e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 801affc:	687b      	ldr	r3, [r7, #4]
 801affe:	681b      	ldr	r3, [r3, #0]
 801b000:	f003 0304 	and.w	r3, r3, #4
 801b004:	2b00      	cmp	r3, #0
 801b006:	d005      	beq.n	801b014 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 801b008:	4b59      	ldr	r3, [pc, #356]	; (801b170 <HAL_RCC_ClockConfig+0x1bc>)
 801b00a:	689b      	ldr	r3, [r3, #8]
 801b00c:	4a58      	ldr	r2, [pc, #352]	; (801b170 <HAL_RCC_ClockConfig+0x1bc>)
 801b00e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 801b012:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 801b014:	687b      	ldr	r3, [r7, #4]
 801b016:	681b      	ldr	r3, [r3, #0]
 801b018:	f003 0308 	and.w	r3, r3, #8
 801b01c:	2b00      	cmp	r3, #0
 801b01e:	d005      	beq.n	801b02c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 801b020:	4b53      	ldr	r3, [pc, #332]	; (801b170 <HAL_RCC_ClockConfig+0x1bc>)
 801b022:	689b      	ldr	r3, [r3, #8]
 801b024:	4a52      	ldr	r2, [pc, #328]	; (801b170 <HAL_RCC_ClockConfig+0x1bc>)
 801b026:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 801b02a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 801b02c:	4b50      	ldr	r3, [pc, #320]	; (801b170 <HAL_RCC_ClockConfig+0x1bc>)
 801b02e:	689b      	ldr	r3, [r3, #8]
 801b030:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 801b034:	687b      	ldr	r3, [r7, #4]
 801b036:	689b      	ldr	r3, [r3, #8]
 801b038:	494d      	ldr	r1, [pc, #308]	; (801b170 <HAL_RCC_ClockConfig+0x1bc>)
 801b03a:	4313      	orrs	r3, r2
 801b03c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 801b03e:	687b      	ldr	r3, [r7, #4]
 801b040:	681b      	ldr	r3, [r3, #0]
 801b042:	f003 0301 	and.w	r3, r3, #1
 801b046:	2b00      	cmp	r3, #0
 801b048:	d044      	beq.n	801b0d4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 801b04a:	687b      	ldr	r3, [r7, #4]
 801b04c:	685b      	ldr	r3, [r3, #4]
 801b04e:	2b01      	cmp	r3, #1
 801b050:	d107      	bne.n	801b062 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 801b052:	4b47      	ldr	r3, [pc, #284]	; (801b170 <HAL_RCC_ClockConfig+0x1bc>)
 801b054:	681b      	ldr	r3, [r3, #0]
 801b056:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801b05a:	2b00      	cmp	r3, #0
 801b05c:	d119      	bne.n	801b092 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 801b05e:	2301      	movs	r3, #1
 801b060:	e07f      	b.n	801b162 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 801b062:	687b      	ldr	r3, [r7, #4]
 801b064:	685b      	ldr	r3, [r3, #4]
 801b066:	2b02      	cmp	r3, #2
 801b068:	d003      	beq.n	801b072 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 801b06a:	687b      	ldr	r3, [r7, #4]
 801b06c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 801b06e:	2b03      	cmp	r3, #3
 801b070:	d107      	bne.n	801b082 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 801b072:	4b3f      	ldr	r3, [pc, #252]	; (801b170 <HAL_RCC_ClockConfig+0x1bc>)
 801b074:	681b      	ldr	r3, [r3, #0]
 801b076:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 801b07a:	2b00      	cmp	r3, #0
 801b07c:	d109      	bne.n	801b092 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 801b07e:	2301      	movs	r3, #1
 801b080:	e06f      	b.n	801b162 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 801b082:	4b3b      	ldr	r3, [pc, #236]	; (801b170 <HAL_RCC_ClockConfig+0x1bc>)
 801b084:	681b      	ldr	r3, [r3, #0]
 801b086:	f003 0302 	and.w	r3, r3, #2
 801b08a:	2b00      	cmp	r3, #0
 801b08c:	d101      	bne.n	801b092 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 801b08e:	2301      	movs	r3, #1
 801b090:	e067      	b.n	801b162 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 801b092:	4b37      	ldr	r3, [pc, #220]	; (801b170 <HAL_RCC_ClockConfig+0x1bc>)
 801b094:	689b      	ldr	r3, [r3, #8]
 801b096:	f023 0203 	bic.w	r2, r3, #3
 801b09a:	687b      	ldr	r3, [r7, #4]
 801b09c:	685b      	ldr	r3, [r3, #4]
 801b09e:	4934      	ldr	r1, [pc, #208]	; (801b170 <HAL_RCC_ClockConfig+0x1bc>)
 801b0a0:	4313      	orrs	r3, r2
 801b0a2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 801b0a4:	f7fd f936 	bl	8018314 <HAL_GetTick>
 801b0a8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 801b0aa:	e00a      	b.n	801b0c2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 801b0ac:	f7fd f932 	bl	8018314 <HAL_GetTick>
 801b0b0:	4602      	mov	r2, r0
 801b0b2:	68fb      	ldr	r3, [r7, #12]
 801b0b4:	1ad3      	subs	r3, r2, r3
 801b0b6:	f241 3288 	movw	r2, #5000	; 0x1388
 801b0ba:	4293      	cmp	r3, r2
 801b0bc:	d901      	bls.n	801b0c2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 801b0be:	2303      	movs	r3, #3
 801b0c0:	e04f      	b.n	801b162 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 801b0c2:	4b2b      	ldr	r3, [pc, #172]	; (801b170 <HAL_RCC_ClockConfig+0x1bc>)
 801b0c4:	689b      	ldr	r3, [r3, #8]
 801b0c6:	f003 020c 	and.w	r2, r3, #12
 801b0ca:	687b      	ldr	r3, [r7, #4]
 801b0cc:	685b      	ldr	r3, [r3, #4]
 801b0ce:	009b      	lsls	r3, r3, #2
 801b0d0:	429a      	cmp	r2, r3
 801b0d2:	d1eb      	bne.n	801b0ac <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 801b0d4:	4b25      	ldr	r3, [pc, #148]	; (801b16c <HAL_RCC_ClockConfig+0x1b8>)
 801b0d6:	681b      	ldr	r3, [r3, #0]
 801b0d8:	f003 030f 	and.w	r3, r3, #15
 801b0dc:	683a      	ldr	r2, [r7, #0]
 801b0de:	429a      	cmp	r2, r3
 801b0e0:	d20c      	bcs.n	801b0fc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 801b0e2:	4b22      	ldr	r3, [pc, #136]	; (801b16c <HAL_RCC_ClockConfig+0x1b8>)
 801b0e4:	683a      	ldr	r2, [r7, #0]
 801b0e6:	b2d2      	uxtb	r2, r2
 801b0e8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 801b0ea:	4b20      	ldr	r3, [pc, #128]	; (801b16c <HAL_RCC_ClockConfig+0x1b8>)
 801b0ec:	681b      	ldr	r3, [r3, #0]
 801b0ee:	f003 030f 	and.w	r3, r3, #15
 801b0f2:	683a      	ldr	r2, [r7, #0]
 801b0f4:	429a      	cmp	r2, r3
 801b0f6:	d001      	beq.n	801b0fc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 801b0f8:	2301      	movs	r3, #1
 801b0fa:	e032      	b.n	801b162 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 801b0fc:	687b      	ldr	r3, [r7, #4]
 801b0fe:	681b      	ldr	r3, [r3, #0]
 801b100:	f003 0304 	and.w	r3, r3, #4
 801b104:	2b00      	cmp	r3, #0
 801b106:	d008      	beq.n	801b11a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 801b108:	4b19      	ldr	r3, [pc, #100]	; (801b170 <HAL_RCC_ClockConfig+0x1bc>)
 801b10a:	689b      	ldr	r3, [r3, #8]
 801b10c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 801b110:	687b      	ldr	r3, [r7, #4]
 801b112:	68db      	ldr	r3, [r3, #12]
 801b114:	4916      	ldr	r1, [pc, #88]	; (801b170 <HAL_RCC_ClockConfig+0x1bc>)
 801b116:	4313      	orrs	r3, r2
 801b118:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 801b11a:	687b      	ldr	r3, [r7, #4]
 801b11c:	681b      	ldr	r3, [r3, #0]
 801b11e:	f003 0308 	and.w	r3, r3, #8
 801b122:	2b00      	cmp	r3, #0
 801b124:	d009      	beq.n	801b13a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 801b126:	4b12      	ldr	r3, [pc, #72]	; (801b170 <HAL_RCC_ClockConfig+0x1bc>)
 801b128:	689b      	ldr	r3, [r3, #8]
 801b12a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 801b12e:	687b      	ldr	r3, [r7, #4]
 801b130:	691b      	ldr	r3, [r3, #16]
 801b132:	00db      	lsls	r3, r3, #3
 801b134:	490e      	ldr	r1, [pc, #56]	; (801b170 <HAL_RCC_ClockConfig+0x1bc>)
 801b136:	4313      	orrs	r3, r2
 801b138:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 801b13a:	f000 fb57 	bl	801b7ec <HAL_RCC_GetSysClockFreq>
 801b13e:	4602      	mov	r2, r0
 801b140:	4b0b      	ldr	r3, [pc, #44]	; (801b170 <HAL_RCC_ClockConfig+0x1bc>)
 801b142:	689b      	ldr	r3, [r3, #8]
 801b144:	091b      	lsrs	r3, r3, #4
 801b146:	f003 030f 	and.w	r3, r3, #15
 801b14a:	490a      	ldr	r1, [pc, #40]	; (801b174 <HAL_RCC_ClockConfig+0x1c0>)
 801b14c:	5ccb      	ldrb	r3, [r1, r3]
 801b14e:	fa22 f303 	lsr.w	r3, r2, r3
 801b152:	4a09      	ldr	r2, [pc, #36]	; (801b178 <HAL_RCC_ClockConfig+0x1c4>)
 801b154:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 801b156:	4b09      	ldr	r3, [pc, #36]	; (801b17c <HAL_RCC_ClockConfig+0x1c8>)
 801b158:	681b      	ldr	r3, [r3, #0]
 801b15a:	4618      	mov	r0, r3
 801b15c:	f7fd f896 	bl	801828c <HAL_InitTick>

  return HAL_OK;
 801b160:	2300      	movs	r3, #0
}
 801b162:	4618      	mov	r0, r3
 801b164:	3710      	adds	r7, #16
 801b166:	46bd      	mov	sp, r7
 801b168:	bd80      	pop	{r7, pc}
 801b16a:	bf00      	nop
 801b16c:	40023c00 	.word	0x40023c00
 801b170:	40023800 	.word	0x40023800
 801b174:	08002350 	.word	0x08002350
 801b178:	20000588 	.word	0x20000588
 801b17c:	2000058c 	.word	0x2000058c

0801b180 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 801b180:	b480      	push	{r7}
 801b182:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 801b184:	4b03      	ldr	r3, [pc, #12]	; (801b194 <HAL_RCC_GetHCLKFreq+0x14>)
 801b186:	681b      	ldr	r3, [r3, #0]
}
 801b188:	4618      	mov	r0, r3
 801b18a:	46bd      	mov	sp, r7
 801b18c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b190:	4770      	bx	lr
 801b192:	bf00      	nop
 801b194:	20000588 	.word	0x20000588

0801b198 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 801b198:	b580      	push	{r7, lr}
 801b19a:	b08c      	sub	sp, #48	; 0x30
 801b19c:	af00      	add	r7, sp, #0
 801b19e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 801b1a0:	2300      	movs	r3, #0
 801b1a2:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmpreg1 = 0U;
 801b1a4:	2300      	movs	r3, #0
 801b1a6:	623b      	str	r3, [r7, #32]
  uint32_t plli2sp = 0U;
 801b1a8:	2300      	movs	r3, #0
 801b1aa:	61fb      	str	r3, [r7, #28]
  uint32_t plli2sq = 0U;
 801b1ac:	2300      	movs	r3, #0
 801b1ae:	61bb      	str	r3, [r7, #24]
  uint32_t plli2sr = 0U;
 801b1b0:	2300      	movs	r3, #0
 801b1b2:	617b      	str	r3, [r7, #20]
  uint32_t pllsaip = 0U;
 801b1b4:	2300      	movs	r3, #0
 801b1b6:	613b      	str	r3, [r7, #16]
  uint32_t pllsaiq = 0U;
 801b1b8:	2300      	movs	r3, #0
 801b1ba:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0U;
 801b1bc:	2300      	movs	r3, #0
 801b1be:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t pllsaiused = 0U;
 801b1c0:	2300      	movs	r3, #0
 801b1c2:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the peripheral clock selection parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------ I2S APB1 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 801b1c4:	687b      	ldr	r3, [r7, #4]
 801b1c6:	681b      	ldr	r3, [r3, #0]
 801b1c8:	f003 0301 	and.w	r3, r3, #1
 801b1cc:	2b00      	cmp	r3, #0
 801b1ce:	d010      	beq.n	801b1f2 <HAL_RCCEx_PeriphCLKConfig+0x5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB1CLKSOURCE(PeriphClkInit->I2sApb1ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 801b1d0:	4b6f      	ldr	r3, [pc, #444]	; (801b390 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 801b1d2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801b1d6:	f023 62c0 	bic.w	r2, r3, #100663296	; 0x6000000
 801b1da:	687b      	ldr	r3, [r7, #4]
 801b1dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801b1de:	496c      	ldr	r1, [pc, #432]	; (801b390 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 801b1e0:	4313      	orrs	r3, r2
 801b1e2:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
 801b1e6:	687b      	ldr	r3, [r7, #4]
 801b1e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801b1ea:	2b00      	cmp	r3, #0
 801b1ec:	d101      	bne.n	801b1f2 <HAL_RCCEx_PeriphCLKConfig+0x5a>
    {
      plli2sused = 1U;
 801b1ee:	2301      	movs	r3, #1
 801b1f0:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- I2S APB2 configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == (RCC_PERIPHCLK_I2S_APB2))
 801b1f2:	687b      	ldr	r3, [r7, #4]
 801b1f4:	681b      	ldr	r3, [r3, #0]
 801b1f6:	f003 0302 	and.w	r3, r3, #2
 801b1fa:	2b00      	cmp	r3, #0
 801b1fc:	d010      	beq.n	801b220 <HAL_RCCEx_PeriphCLKConfig+0x88>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB2CLKSOURCE(PeriphClkInit->I2sApb2ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 801b1fe:	4b64      	ldr	r3, [pc, #400]	; (801b390 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 801b200:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801b204:	f023 52c0 	bic.w	r2, r3, #402653184	; 0x18000000
 801b208:	687b      	ldr	r3, [r7, #4]
 801b20a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801b20c:	4960      	ldr	r1, [pc, #384]	; (801b390 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 801b20e:	4313      	orrs	r3, r2
 801b210:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)
 801b214:	687b      	ldr	r3, [r7, #4]
 801b216:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801b218:	2b00      	cmp	r3, #0
 801b21a:	d101      	bne.n	801b220 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      plli2sused = 1U;
 801b21c:	2301      	movs	r3, #1
 801b21e:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*--------------------------- SAI1 configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 801b220:	687b      	ldr	r3, [r7, #4]
 801b222:	681b      	ldr	r3, [r3, #0]
 801b224:	f003 0304 	and.w	r3, r3, #4
 801b228:	2b00      	cmp	r3, #0
 801b22a:	d017      	beq.n	801b25c <HAL_RCCEx_PeriphCLKConfig+0xc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 801b22c:	4b58      	ldr	r3, [pc, #352]	; (801b390 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 801b22e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801b232:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 801b236:	687b      	ldr	r3, [r7, #4]
 801b238:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801b23a:	4955      	ldr	r1, [pc, #340]	; (801b390 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 801b23c:	4313      	orrs	r3, r2
 801b23e:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 801b242:	687b      	ldr	r3, [r7, #4]
 801b244:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801b246:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 801b24a:	d101      	bne.n	801b250 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      plli2sused = 1U;
 801b24c:	2301      	movs	r3, #1
 801b24e:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 801b250:	687b      	ldr	r3, [r7, #4]
 801b252:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801b254:	2b00      	cmp	r3, #0
 801b256:	d101      	bne.n	801b25c <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      pllsaiused = 1U;
 801b258:	2301      	movs	r3, #1
 801b25a:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------------- SAI2 configuration ----------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 801b25c:	687b      	ldr	r3, [r7, #4]
 801b25e:	681b      	ldr	r3, [r3, #0]
 801b260:	f003 0308 	and.w	r3, r3, #8
 801b264:	2b00      	cmp	r3, #0
 801b266:	d017      	beq.n	801b298 <HAL_RCCEx_PeriphCLKConfig+0x100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 801b268:	4b49      	ldr	r3, [pc, #292]	; (801b390 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 801b26a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801b26e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 801b272:	687b      	ldr	r3, [r7, #4]
 801b274:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801b276:	4946      	ldr	r1, [pc, #280]	; (801b390 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 801b278:	4313      	orrs	r3, r2
 801b27a:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 801b27e:	687b      	ldr	r3, [r7, #4]
 801b280:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801b282:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 801b286:	d101      	bne.n	801b28c <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      plli2sused = 1U;
 801b288:	2301      	movs	r3, #1
 801b28a:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 801b28c:	687b      	ldr	r3, [r7, #4]
 801b28e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801b290:	2b00      	cmp	r3, #0
 801b292:	d101      	bne.n	801b298 <HAL_RCCEx_PeriphCLKConfig+0x100>
    {
      pllsaiused = 1U;
 801b294:	2301      	movs	r3, #1
 801b296:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- RTC configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 801b298:	687b      	ldr	r3, [r7, #4]
 801b29a:	681b      	ldr	r3, [r3, #0]
 801b29c:	f003 0320 	and.w	r3, r3, #32
 801b2a0:	2b00      	cmp	r3, #0
 801b2a2:	f000 808a 	beq.w	801b3ba <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 801b2a6:	2300      	movs	r3, #0
 801b2a8:	60bb      	str	r3, [r7, #8]
 801b2aa:	4b39      	ldr	r3, [pc, #228]	; (801b390 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 801b2ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801b2ae:	4a38      	ldr	r2, [pc, #224]	; (801b390 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 801b2b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 801b2b4:	6413      	str	r3, [r2, #64]	; 0x40
 801b2b6:	4b36      	ldr	r3, [pc, #216]	; (801b390 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 801b2b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801b2ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 801b2be:	60bb      	str	r3, [r7, #8]
 801b2c0:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 801b2c2:	4b34      	ldr	r3, [pc, #208]	; (801b394 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 801b2c4:	681b      	ldr	r3, [r3, #0]
 801b2c6:	4a33      	ldr	r2, [pc, #204]	; (801b394 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 801b2c8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 801b2cc:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 801b2ce:	f7fd f821 	bl	8018314 <HAL_GetTick>
 801b2d2:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR & PWR_CR_DBP) == RESET)
 801b2d4:	e008      	b.n	801b2e8 <HAL_RCCEx_PeriphCLKConfig+0x150>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 801b2d6:	f7fd f81d 	bl	8018314 <HAL_GetTick>
 801b2da:	4602      	mov	r2, r0
 801b2dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b2de:	1ad3      	subs	r3, r2, r3
 801b2e0:	2b02      	cmp	r3, #2
 801b2e2:	d901      	bls.n	801b2e8 <HAL_RCCEx_PeriphCLKConfig+0x150>
      {
        return HAL_TIMEOUT;
 801b2e4:	2303      	movs	r3, #3
 801b2e6:	e278      	b.n	801b7da <HAL_RCCEx_PeriphCLKConfig+0x642>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 801b2e8:	4b2a      	ldr	r3, [pc, #168]	; (801b394 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 801b2ea:	681b      	ldr	r3, [r3, #0]
 801b2ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801b2f0:	2b00      	cmp	r3, #0
 801b2f2:	d0f0      	beq.n	801b2d6 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 801b2f4:	4b26      	ldr	r3, [pc, #152]	; (801b390 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 801b2f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801b2f8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 801b2fc:	623b      	str	r3, [r7, #32]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 801b2fe:	6a3b      	ldr	r3, [r7, #32]
 801b300:	2b00      	cmp	r3, #0
 801b302:	d02f      	beq.n	801b364 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 801b304:	687b      	ldr	r3, [r7, #4]
 801b306:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801b308:	f403 7340 	and.w	r3, r3, #768	; 0x300
 801b30c:	6a3a      	ldr	r2, [r7, #32]
 801b30e:	429a      	cmp	r2, r3
 801b310:	d028      	beq.n	801b364 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 801b312:	4b1f      	ldr	r3, [pc, #124]	; (801b390 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 801b314:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801b316:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 801b31a:	623b      	str	r3, [r7, #32]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 801b31c:	4b1e      	ldr	r3, [pc, #120]	; (801b398 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 801b31e:	2201      	movs	r2, #1
 801b320:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 801b322:	4b1d      	ldr	r3, [pc, #116]	; (801b398 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 801b324:	2200      	movs	r2, #0
 801b326:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 801b328:	4a19      	ldr	r2, [pc, #100]	; (801b390 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 801b32a:	6a3b      	ldr	r3, [r7, #32]
 801b32c:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 801b32e:	4b18      	ldr	r3, [pc, #96]	; (801b390 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 801b330:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801b332:	f003 0301 	and.w	r3, r3, #1
 801b336:	2b01      	cmp	r3, #1
 801b338:	d114      	bne.n	801b364 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 801b33a:	f7fc ffeb 	bl	8018314 <HAL_GetTick>
 801b33e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 801b340:	e00a      	b.n	801b358 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 801b342:	f7fc ffe7 	bl	8018314 <HAL_GetTick>
 801b346:	4602      	mov	r2, r0
 801b348:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b34a:	1ad3      	subs	r3, r2, r3
 801b34c:	f241 3288 	movw	r2, #5000	; 0x1388
 801b350:	4293      	cmp	r3, r2
 801b352:	d901      	bls.n	801b358 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
          {
            return HAL_TIMEOUT;
 801b354:	2303      	movs	r3, #3
 801b356:	e240      	b.n	801b7da <HAL_RCCEx_PeriphCLKConfig+0x642>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 801b358:	4b0d      	ldr	r3, [pc, #52]	; (801b390 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 801b35a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801b35c:	f003 0302 	and.w	r3, r3, #2
 801b360:	2b00      	cmp	r3, #0
 801b362:	d0ee      	beq.n	801b342 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 801b364:	687b      	ldr	r3, [r7, #4]
 801b366:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801b368:	f403 7340 	and.w	r3, r3, #768	; 0x300
 801b36c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 801b370:	d114      	bne.n	801b39c <HAL_RCCEx_PeriphCLKConfig+0x204>
 801b372:	4b07      	ldr	r3, [pc, #28]	; (801b390 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 801b374:	689b      	ldr	r3, [r3, #8]
 801b376:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 801b37a:	687b      	ldr	r3, [r7, #4]
 801b37c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801b37e:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 801b382:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 801b386:	4902      	ldr	r1, [pc, #8]	; (801b390 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 801b388:	4313      	orrs	r3, r2
 801b38a:	608b      	str	r3, [r1, #8]
 801b38c:	e00c      	b.n	801b3a8 <HAL_RCCEx_PeriphCLKConfig+0x210>
 801b38e:	bf00      	nop
 801b390:	40023800 	.word	0x40023800
 801b394:	40007000 	.word	0x40007000
 801b398:	42470e40 	.word	0x42470e40
 801b39c:	4b4a      	ldr	r3, [pc, #296]	; (801b4c8 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 801b39e:	689b      	ldr	r3, [r3, #8]
 801b3a0:	4a49      	ldr	r2, [pc, #292]	; (801b4c8 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 801b3a2:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 801b3a6:	6093      	str	r3, [r2, #8]
 801b3a8:	4b47      	ldr	r3, [pc, #284]	; (801b4c8 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 801b3aa:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 801b3ac:	687b      	ldr	r3, [r7, #4]
 801b3ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801b3b0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 801b3b4:	4944      	ldr	r1, [pc, #272]	; (801b4c8 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 801b3b6:	4313      	orrs	r3, r2
 801b3b8:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 801b3ba:	687b      	ldr	r3, [r7, #4]
 801b3bc:	681b      	ldr	r3, [r3, #0]
 801b3be:	f003 0310 	and.w	r3, r3, #16
 801b3c2:	2b00      	cmp	r3, #0
 801b3c4:	d004      	beq.n	801b3d0 <HAL_RCCEx_PeriphCLKConfig+0x238>
  {
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 801b3c6:	687b      	ldr	r3, [r7, #4]
 801b3c8:	f893 2058 	ldrb.w	r2, [r3, #88]	; 0x58
 801b3cc:	4b3f      	ldr	r3, [pc, #252]	; (801b4cc <HAL_RCCEx_PeriphCLKConfig+0x334>)
 801b3ce:	601a      	str	r2, [r3, #0]
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- FMPI2C1 Configuration -----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMPI2C1) == RCC_PERIPHCLK_FMPI2C1)
 801b3d0:	687b      	ldr	r3, [r7, #4]
 801b3d2:	681b      	ldr	r3, [r3, #0]
 801b3d4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801b3d8:	2b00      	cmp	r3, #0
 801b3da:	d00a      	beq.n	801b3f2 <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMPI2C1CLKSOURCE(PeriphClkInit->Fmpi2c1ClockSelection));

    /* Configure the FMPI2C1 clock source */
    __HAL_RCC_FMPI2C1_CONFIG(PeriphClkInit->Fmpi2c1ClockSelection);
 801b3dc:	4b3a      	ldr	r3, [pc, #232]	; (801b4c8 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 801b3de:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 801b3e2:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 801b3e6:	687b      	ldr	r3, [r7, #4]
 801b3e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801b3ea:	4937      	ldr	r1, [pc, #220]	; (801b4c8 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 801b3ec:	4313      	orrs	r3, r2
 801b3ee:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ CEC Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 801b3f2:	687b      	ldr	r3, [r7, #4]
 801b3f4:	681b      	ldr	r3, [r3, #0]
 801b3f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801b3fa:	2b00      	cmp	r3, #0
 801b3fc:	d00a      	beq.n	801b414 <HAL_RCCEx_PeriphCLKConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 801b3fe:	4b32      	ldr	r3, [pc, #200]	; (801b4c8 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 801b400:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 801b404:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 801b408:	687b      	ldr	r3, [r7, #4]
 801b40a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801b40c:	492e      	ldr	r1, [pc, #184]	; (801b4c8 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 801b40e:	4313      	orrs	r3, r2
 801b410:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- CLK48 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 801b414:	687b      	ldr	r3, [r7, #4]
 801b416:	681b      	ldr	r3, [r3, #0]
 801b418:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801b41c:	2b00      	cmp	r3, #0
 801b41e:	d011      	beq.n	801b444 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 801b420:	4b29      	ldr	r3, [pc, #164]	; (801b4c8 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 801b422:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 801b426:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 801b42a:	687b      	ldr	r3, [r7, #4]
 801b42c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801b42e:	4926      	ldr	r1, [pc, #152]	; (801b4c8 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 801b430:	4313      	orrs	r3, r2
 801b432:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94

    /* Enable the PLLSAI when it's used as clock source for CLK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP)
 801b436:	687b      	ldr	r3, [r7, #4]
 801b438:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801b43a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 801b43e:	d101      	bne.n	801b444 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      pllsaiused = 1U;
 801b440:	2301      	movs	r3, #1
 801b442:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- SDIO Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 801b444:	687b      	ldr	r3, [r7, #4]
 801b446:	681b      	ldr	r3, [r3, #0]
 801b448:	f403 7300 	and.w	r3, r3, #512	; 0x200
 801b44c:	2b00      	cmp	r3, #0
 801b44e:	d00a      	beq.n	801b466 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 801b450:	4b1d      	ldr	r3, [pc, #116]	; (801b4c8 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 801b452:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 801b456:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 801b45a:	687b      	ldr	r3, [r7, #4]
 801b45c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801b45e:	491a      	ldr	r1, [pc, #104]	; (801b4c8 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 801b460:	4313      	orrs	r3, r2
 801b462:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ SPDIFRX Configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 801b466:	687b      	ldr	r3, [r7, #4]
 801b468:	681b      	ldr	r3, [r3, #0]
 801b46a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 801b46e:	2b00      	cmp	r3, #0
 801b470:	d011      	beq.n	801b496 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPDIFRXCLKSOURCE(PeriphClkInit->SpdifClockSelection));

    /* Configure the SPDIFRX clock source */
    __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifClockSelection);
 801b472:	4b15      	ldr	r3, [pc, #84]	; (801b4c8 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 801b474:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 801b478:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 801b47c:	687b      	ldr	r3, [r7, #4]
 801b47e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801b480:	4911      	ldr	r1, [pc, #68]	; (801b4c8 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 801b482:	4313      	orrs	r3, r2
 801b484:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
    /* Enable the PLLI2S when it's used as clock source for SPDIFRX */
    if(PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP)
 801b488:	687b      	ldr	r3, [r7, #4]
 801b48a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801b48c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 801b490:	d101      	bne.n	801b496 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
    {
      plli2sused = 1U;
 801b492:	2301      	movs	r3, #1
 801b494:	62fb      	str	r3, [r7, #44]	; 0x2c
  /*--------------------------------------------------------------------------*/

  /*---------------------------- PLLI2S Configuration ------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S on APB1,
     I2S on APB2 or SPDIFRX */
  if((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 801b496:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801b498:	2b01      	cmp	r3, #1
 801b49a:	d005      	beq.n	801b4a8 <HAL_RCCEx_PeriphCLKConfig+0x310>
 801b49c:	687b      	ldr	r3, [r7, #4]
 801b49e:	681b      	ldr	r3, [r3, #0]
 801b4a0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 801b4a4:	f040 80ff 	bne.w	801b6a6 <HAL_RCCEx_PeriphCLKConfig+0x50e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 801b4a8:	4b09      	ldr	r3, [pc, #36]	; (801b4d0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 801b4aa:	2200      	movs	r2, #0
 801b4ac:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 801b4ae:	f7fc ff31 	bl	8018314 <HAL_GetTick>
 801b4b2:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 801b4b4:	e00e      	b.n	801b4d4 <HAL_RCCEx_PeriphCLKConfig+0x33c>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 801b4b6:	f7fc ff2d 	bl	8018314 <HAL_GetTick>
 801b4ba:	4602      	mov	r2, r0
 801b4bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b4be:	1ad3      	subs	r3, r2, r3
 801b4c0:	2b02      	cmp	r3, #2
 801b4c2:	d907      	bls.n	801b4d4 <HAL_RCCEx_PeriphCLKConfig+0x33c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 801b4c4:	2303      	movs	r3, #3
 801b4c6:	e188      	b.n	801b7da <HAL_RCCEx_PeriphCLKConfig+0x642>
 801b4c8:	40023800 	.word	0x40023800
 801b4cc:	424711e0 	.word	0x424711e0
 801b4d0:	42470068 	.word	0x42470068
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 801b4d4:	4b7e      	ldr	r3, [pc, #504]	; (801b6d0 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 801b4d6:	681b      	ldr	r3, [r3, #0]
 801b4d8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 801b4dc:	2b00      	cmp	r3, #0
 801b4de:	d1ea      	bne.n	801b4b6 <HAL_RCCEx_PeriphCLKConfig+0x31e>
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*------ In Case of PLLI2S is selected as source clock for I2S -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 801b4e0:	687b      	ldr	r3, [r7, #4]
 801b4e2:	681b      	ldr	r3, [r3, #0]
 801b4e4:	f003 0301 	and.w	r3, r3, #1
 801b4e8:	2b00      	cmp	r3, #0
 801b4ea:	d003      	beq.n	801b4f4 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 801b4ec:	687b      	ldr	r3, [r7, #4]
 801b4ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801b4f0:	2b00      	cmp	r3, #0
 801b4f2:	d009      	beq.n	801b508 <HAL_RCCEx_PeriphCLKConfig+0x370>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 801b4f4:	687b      	ldr	r3, [r7, #4]
 801b4f6:	681b      	ldr	r3, [r3, #0]
 801b4f8:	f003 0302 	and.w	r3, r3, #2
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 801b4fc:	2b00      	cmp	r3, #0
 801b4fe:	d028      	beq.n	801b552 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 801b500:	687b      	ldr	r3, [r7, #4]
 801b502:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801b504:	2b00      	cmp	r3, #0
 801b506:	d124      	bne.n	801b552 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP/PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 801b508:	4b71      	ldr	r3, [pc, #452]	; (801b6d0 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 801b50a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801b50e:	0c1b      	lsrs	r3, r3, #16
 801b510:	f003 0303 	and.w	r3, r3, #3
 801b514:	3301      	adds	r3, #1
 801b516:	005b      	lsls	r3, r3, #1
 801b518:	61fb      	str	r3, [r7, #28]
      plli2sq = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 801b51a:	4b6d      	ldr	r3, [pc, #436]	; (801b6d0 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 801b51c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801b520:	0e1b      	lsrs	r3, r3, #24
 801b522:	f003 030f 	and.w	r3, r3, #15
 801b526:	61bb      	str	r3, [r7, #24]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, plli2sq, PeriphClkInit->PLLI2S.PLLI2SR);
 801b528:	687b      	ldr	r3, [r7, #4]
 801b52a:	685a      	ldr	r2, [r3, #4]
 801b52c:	687b      	ldr	r3, [r7, #4]
 801b52e:	689b      	ldr	r3, [r3, #8]
 801b530:	019b      	lsls	r3, r3, #6
 801b532:	431a      	orrs	r2, r3
 801b534:	69fb      	ldr	r3, [r7, #28]
 801b536:	085b      	lsrs	r3, r3, #1
 801b538:	3b01      	subs	r3, #1
 801b53a:	041b      	lsls	r3, r3, #16
 801b53c:	431a      	orrs	r2, r3
 801b53e:	69bb      	ldr	r3, [r7, #24]
 801b540:	061b      	lsls	r3, r3, #24
 801b542:	431a      	orrs	r2, r3
 801b544:	687b      	ldr	r3, [r7, #4]
 801b546:	695b      	ldr	r3, [r3, #20]
 801b548:	071b      	lsls	r3, r3, #28
 801b54a:	4961      	ldr	r1, [pc, #388]	; (801b6d0 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 801b54c:	4313      	orrs	r3, r2
 801b54e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*------- In Case of PLLI2S is selected as source clock for SAI ----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 801b552:	687b      	ldr	r3, [r7, #4]
 801b554:	681b      	ldr	r3, [r3, #0]
 801b556:	f003 0304 	and.w	r3, r3, #4
 801b55a:	2b00      	cmp	r3, #0
 801b55c:	d004      	beq.n	801b568 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
 801b55e:	687b      	ldr	r3, [r7, #4]
 801b560:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801b562:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 801b566:	d00a      	beq.n	801b57e <HAL_RCCEx_PeriphCLKConfig+0x3e6>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 801b568:	687b      	ldr	r3, [r7, #4]
 801b56a:	681b      	ldr	r3, [r3, #0]
 801b56c:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 801b570:	2b00      	cmp	r3, #0
 801b572:	d035      	beq.n	801b5e0 <HAL_RCCEx_PeriphCLKConfig+0x448>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 801b574:	687b      	ldr	r3, [r7, #4]
 801b576:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801b578:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 801b57c:	d130      	bne.n	801b5e0 <HAL_RCCEx_PeriphCLKConfig+0x448>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP/PLLI2SR value from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 801b57e:	4b54      	ldr	r3, [pc, #336]	; (801b6d0 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 801b580:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801b584:	0c1b      	lsrs	r3, r3, #16
 801b586:	f003 0303 	and.w	r3, r3, #3
 801b58a:	3301      	adds	r3, #1
 801b58c:	005b      	lsls	r3, r3, #1
 801b58e:	61fb      	str	r3, [r7, #28]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 801b590:	4b4f      	ldr	r3, [pc, #316]	; (801b6d0 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 801b592:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801b596:	0f1b      	lsrs	r3, r3, #28
 801b598:	f003 0307 	and.w	r3, r3, #7
 801b59c:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, PeriphClkInit->PLLI2S.PLLI2SQ, plli2sr);
 801b59e:	687b      	ldr	r3, [r7, #4]
 801b5a0:	685a      	ldr	r2, [r3, #4]
 801b5a2:	687b      	ldr	r3, [r7, #4]
 801b5a4:	689b      	ldr	r3, [r3, #8]
 801b5a6:	019b      	lsls	r3, r3, #6
 801b5a8:	431a      	orrs	r2, r3
 801b5aa:	69fb      	ldr	r3, [r7, #28]
 801b5ac:	085b      	lsrs	r3, r3, #1
 801b5ae:	3b01      	subs	r3, #1
 801b5b0:	041b      	lsls	r3, r3, #16
 801b5b2:	431a      	orrs	r2, r3
 801b5b4:	687b      	ldr	r3, [r7, #4]
 801b5b6:	691b      	ldr	r3, [r3, #16]
 801b5b8:	061b      	lsls	r3, r3, #24
 801b5ba:	431a      	orrs	r2, r3
 801b5bc:	697b      	ldr	r3, [r7, #20]
 801b5be:	071b      	lsls	r3, r3, #28
 801b5c0:	4943      	ldr	r1, [pc, #268]	; (801b6d0 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 801b5c2:	4313      	orrs	r3, r2
 801b5c4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 801b5c8:	4b41      	ldr	r3, [pc, #260]	; (801b6d0 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 801b5ca:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801b5ce:	f023 021f 	bic.w	r2, r3, #31
 801b5d2:	687b      	ldr	r3, [r7, #4]
 801b5d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801b5d6:	3b01      	subs	r3, #1
 801b5d8:	493d      	ldr	r1, [pc, #244]	; (801b6d0 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 801b5da:	4313      	orrs	r3, r2
 801b5dc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLI2S is selected as source clock for SPDIFRX -------*/
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX) && (PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP))
 801b5e0:	687b      	ldr	r3, [r7, #4]
 801b5e2:	681b      	ldr	r3, [r3, #0]
 801b5e4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 801b5e8:	2b00      	cmp	r3, #0
 801b5ea:	d029      	beq.n	801b640 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 801b5ec:	687b      	ldr	r3, [r7, #4]
 801b5ee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801b5f0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 801b5f4:	d124      	bne.n	801b640 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      plli2sq = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 801b5f6:	4b36      	ldr	r3, [pc, #216]	; (801b6d0 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 801b5f8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801b5fc:	0c1b      	lsrs	r3, r3, #16
 801b5fe:	f003 0303 	and.w	r3, r3, #3
 801b602:	3301      	adds	r3, #1
 801b604:	005b      	lsls	r3, r3, #1
 801b606:	61bb      	str	r3, [r7, #24]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 801b608:	4b31      	ldr	r3, [pc, #196]	; (801b6d0 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 801b60a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801b60e:	0f1b      	lsrs	r3, r3, #28
 801b610:	f003 0307 	and.w	r3, r3, #7
 801b614:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, plli2sq, plli2sr);
 801b616:	687b      	ldr	r3, [r7, #4]
 801b618:	685a      	ldr	r2, [r3, #4]
 801b61a:	687b      	ldr	r3, [r7, #4]
 801b61c:	689b      	ldr	r3, [r3, #8]
 801b61e:	019b      	lsls	r3, r3, #6
 801b620:	431a      	orrs	r2, r3
 801b622:	687b      	ldr	r3, [r7, #4]
 801b624:	68db      	ldr	r3, [r3, #12]
 801b626:	085b      	lsrs	r3, r3, #1
 801b628:	3b01      	subs	r3, #1
 801b62a:	041b      	lsls	r3, r3, #16
 801b62c:	431a      	orrs	r2, r3
 801b62e:	69bb      	ldr	r3, [r7, #24]
 801b630:	061b      	lsls	r3, r3, #24
 801b632:	431a      	orrs	r2, r3
 801b634:	697b      	ldr	r3, [r7, #20]
 801b636:	071b      	lsls	r3, r3, #28
 801b638:	4925      	ldr	r1, [pc, #148]	; (801b6d0 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 801b63a:	4313      	orrs	r3, r2
 801b63c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

     /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 801b640:	687b      	ldr	r3, [r7, #4]
 801b642:	681b      	ldr	r3, [r3, #0]
 801b644:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 801b648:	2b00      	cmp	r3, #0
 801b64a:	d016      	beq.n	801b67a <HAL_RCCEx_PeriphCLKConfig+0x4e2>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 801b64c:	687b      	ldr	r3, [r7, #4]
 801b64e:	685a      	ldr	r2, [r3, #4]
 801b650:	687b      	ldr	r3, [r7, #4]
 801b652:	689b      	ldr	r3, [r3, #8]
 801b654:	019b      	lsls	r3, r3, #6
 801b656:	431a      	orrs	r2, r3
 801b658:	687b      	ldr	r3, [r7, #4]
 801b65a:	68db      	ldr	r3, [r3, #12]
 801b65c:	085b      	lsrs	r3, r3, #1
 801b65e:	3b01      	subs	r3, #1
 801b660:	041b      	lsls	r3, r3, #16
 801b662:	431a      	orrs	r2, r3
 801b664:	687b      	ldr	r3, [r7, #4]
 801b666:	691b      	ldr	r3, [r3, #16]
 801b668:	061b      	lsls	r3, r3, #24
 801b66a:	431a      	orrs	r2, r3
 801b66c:	687b      	ldr	r3, [r7, #4]
 801b66e:	695b      	ldr	r3, [r3, #20]
 801b670:	071b      	lsls	r3, r3, #28
 801b672:	4917      	ldr	r1, [pc, #92]	; (801b6d0 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 801b674:	4313      	orrs	r3, r2
 801b676:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 801b67a:	4b16      	ldr	r3, [pc, #88]	; (801b6d4 <HAL_RCCEx_PeriphCLKConfig+0x53c>)
 801b67c:	2201      	movs	r2, #1
 801b67e:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 801b680:	f7fc fe48 	bl	8018314 <HAL_GetTick>
 801b684:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 801b686:	e008      	b.n	801b69a <HAL_RCCEx_PeriphCLKConfig+0x502>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 801b688:	f7fc fe44 	bl	8018314 <HAL_GetTick>
 801b68c:	4602      	mov	r2, r0
 801b68e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b690:	1ad3      	subs	r3, r2, r3
 801b692:	2b02      	cmp	r3, #2
 801b694:	d901      	bls.n	801b69a <HAL_RCCEx_PeriphCLKConfig+0x502>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 801b696:	2303      	movs	r3, #3
 801b698:	e09f      	b.n	801b7da <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 801b69a:	4b0d      	ldr	r3, [pc, #52]	; (801b6d0 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 801b69c:	681b      	ldr	r3, [r3, #0]
 801b69e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 801b6a2:	2b00      	cmp	r3, #0
 801b6a4:	d0f0      	beq.n	801b688 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- PLLSAI Configuration -----------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, CLK48 or SDIO */
  if(pllsaiused == 1U)
 801b6a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801b6a8:	2b01      	cmp	r3, #1
 801b6aa:	f040 8095 	bne.w	801b7d8 <HAL_RCCEx_PeriphCLKConfig+0x640>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 801b6ae:	4b0a      	ldr	r3, [pc, #40]	; (801b6d8 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 801b6b0:	2200      	movs	r2, #0
 801b6b2:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 801b6b4:	f7fc fe2e 	bl	8018314 <HAL_GetTick>
 801b6b8:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 801b6ba:	e00f      	b.n	801b6dc <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 801b6bc:	f7fc fe2a 	bl	8018314 <HAL_GetTick>
 801b6c0:	4602      	mov	r2, r0
 801b6c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b6c4:	1ad3      	subs	r3, r2, r3
 801b6c6:	2b02      	cmp	r3, #2
 801b6c8:	d908      	bls.n	801b6dc <HAL_RCCEx_PeriphCLKConfig+0x544>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 801b6ca:	2303      	movs	r3, #3
 801b6cc:	e085      	b.n	801b7da <HAL_RCCEx_PeriphCLKConfig+0x642>
 801b6ce:	bf00      	nop
 801b6d0:	40023800 	.word	0x40023800
 801b6d4:	42470068 	.word	0x42470068
 801b6d8:	42470070 	.word	0x42470070
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 801b6dc:	4b41      	ldr	r3, [pc, #260]	; (801b7e4 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 801b6de:	681b      	ldr	r3, [r3, #0]
 801b6e0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 801b6e4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 801b6e8:	d0e8      	beq.n	801b6bc <HAL_RCCEx_PeriphCLKConfig+0x524>
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIM_VALUE(PeriphClkInit->PLLSAI.PLLSAIM));
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*------ In Case of PLLSAI is selected as source clock for SAI -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 801b6ea:	687b      	ldr	r3, [r7, #4]
 801b6ec:	681b      	ldr	r3, [r3, #0]
 801b6ee:	f003 0304 	and.w	r3, r3, #4
 801b6f2:	2b00      	cmp	r3, #0
 801b6f4:	d003      	beq.n	801b6fe <HAL_RCCEx_PeriphCLKConfig+0x566>
 801b6f6:	687b      	ldr	r3, [r7, #4]
 801b6f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801b6fa:	2b00      	cmp	r3, #0
 801b6fc:	d009      	beq.n	801b712 <HAL_RCCEx_PeriphCLKConfig+0x57a>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 801b6fe:	687b      	ldr	r3, [r7, #4]
 801b700:	681b      	ldr	r3, [r3, #0]
 801b702:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 801b706:	2b00      	cmp	r3, #0
 801b708:	d02b      	beq.n	801b762 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 801b70a:	687b      	ldr	r3, [r7, #4]
 801b70c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801b70e:	2b00      	cmp	r3, #0
 801b710:	d127      	bne.n	801b762 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 801b712:	4b34      	ldr	r3, [pc, #208]	; (801b7e4 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 801b714:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801b718:	0c1b      	lsrs	r3, r3, #16
 801b71a:	f003 0303 	and.w	r3, r3, #3
 801b71e:	3301      	adds	r3, #1
 801b720:	005b      	lsls	r3, r3, #1
 801b722:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , pllsaip, PeriphClkInit->PLLSAI.PLLSAIQ, 0U);
 801b724:	687b      	ldr	r3, [r7, #4]
 801b726:	699a      	ldr	r2, [r3, #24]
 801b728:	687b      	ldr	r3, [r7, #4]
 801b72a:	69db      	ldr	r3, [r3, #28]
 801b72c:	019b      	lsls	r3, r3, #6
 801b72e:	431a      	orrs	r2, r3
 801b730:	693b      	ldr	r3, [r7, #16]
 801b732:	085b      	lsrs	r3, r3, #1
 801b734:	3b01      	subs	r3, #1
 801b736:	041b      	lsls	r3, r3, #16
 801b738:	431a      	orrs	r2, r3
 801b73a:	687b      	ldr	r3, [r7, #4]
 801b73c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801b73e:	061b      	lsls	r3, r3, #24
 801b740:	4928      	ldr	r1, [pc, #160]	; (801b7e4 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 801b742:	4313      	orrs	r3, r2
 801b744:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 801b748:	4b26      	ldr	r3, [pc, #152]	; (801b7e4 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 801b74a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801b74e:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 801b752:	687b      	ldr	r3, [r7, #4]
 801b754:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801b756:	3b01      	subs	r3, #1
 801b758:	021b      	lsls	r3, r3, #8
 801b75a:	4922      	ldr	r1, [pc, #136]	; (801b7e4 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 801b75c:	4313      	orrs	r3, r2
 801b75e:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLSAI is selected as source clock for CLK48 ---------*/
    /* In Case of PLLI2S is selected as source clock for CLK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP))
 801b762:	687b      	ldr	r3, [r7, #4]
 801b764:	681b      	ldr	r3, [r3, #0]
 801b766:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801b76a:	2b00      	cmp	r3, #0
 801b76c:	d01d      	beq.n	801b7aa <HAL_RCCEx_PeriphCLKConfig+0x612>
 801b76e:	687b      	ldr	r3, [r7, #4]
 801b770:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801b772:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 801b776:	d118      	bne.n	801b7aa <HAL_RCCEx_PeriphCLKConfig+0x612>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 801b778:	4b1a      	ldr	r3, [pc, #104]	; (801b7e4 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 801b77a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801b77e:	0e1b      	lsrs	r3, r3, #24
 801b780:	f003 030f 	and.w	r3, r3, #15
 801b784:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) * (PLLI2SN/PLLSAIM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, pllsaiq, 0U);
 801b786:	687b      	ldr	r3, [r7, #4]
 801b788:	699a      	ldr	r2, [r3, #24]
 801b78a:	687b      	ldr	r3, [r7, #4]
 801b78c:	69db      	ldr	r3, [r3, #28]
 801b78e:	019b      	lsls	r3, r3, #6
 801b790:	431a      	orrs	r2, r3
 801b792:	687b      	ldr	r3, [r7, #4]
 801b794:	6a1b      	ldr	r3, [r3, #32]
 801b796:	085b      	lsrs	r3, r3, #1
 801b798:	3b01      	subs	r3, #1
 801b79a:	041b      	lsls	r3, r3, #16
 801b79c:	431a      	orrs	r2, r3
 801b79e:	68fb      	ldr	r3, [r7, #12]
 801b7a0:	061b      	lsls	r3, r3, #24
 801b7a2:	4910      	ldr	r1, [pc, #64]	; (801b7e4 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 801b7a4:	4313      	orrs	r3, r2
 801b7a6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 801b7aa:	4b0f      	ldr	r3, [pc, #60]	; (801b7e8 <HAL_RCCEx_PeriphCLKConfig+0x650>)
 801b7ac:	2201      	movs	r2, #1
 801b7ae:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 801b7b0:	f7fc fdb0 	bl	8018314 <HAL_GetTick>
 801b7b4:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 801b7b6:	e008      	b.n	801b7ca <HAL_RCCEx_PeriphCLKConfig+0x632>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 801b7b8:	f7fc fdac 	bl	8018314 <HAL_GetTick>
 801b7bc:	4602      	mov	r2, r0
 801b7be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b7c0:	1ad3      	subs	r3, r2, r3
 801b7c2:	2b02      	cmp	r3, #2
 801b7c4:	d901      	bls.n	801b7ca <HAL_RCCEx_PeriphCLKConfig+0x632>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 801b7c6:	2303      	movs	r3, #3
 801b7c8:	e007      	b.n	801b7da <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 801b7ca:	4b06      	ldr	r3, [pc, #24]	; (801b7e4 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 801b7cc:	681b      	ldr	r3, [r3, #0]
 801b7ce:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 801b7d2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 801b7d6:	d1ef      	bne.n	801b7b8 <HAL_RCCEx_PeriphCLKConfig+0x620>
      }
    }
  }
  return HAL_OK;
 801b7d8:	2300      	movs	r3, #0
}
 801b7da:	4618      	mov	r0, r3
 801b7dc:	3730      	adds	r7, #48	; 0x30
 801b7de:	46bd      	mov	sp, r7
 801b7e0:	bd80      	pop	{r7, pc}
 801b7e2:	bf00      	nop
 801b7e4:	40023800 	.word	0x40023800
 801b7e8:	42470070 	.word	0x42470070

0801b7ec <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 801b7ec:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801b7f0:	b087      	sub	sp, #28
 801b7f2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 801b7f4:	2600      	movs	r6, #0
 801b7f6:	60fe      	str	r6, [r7, #12]
  uint32_t pllvco = 0U;
 801b7f8:	2600      	movs	r6, #0
 801b7fa:	617e      	str	r6, [r7, #20]
  uint32_t pllp = 0U;
 801b7fc:	2600      	movs	r6, #0
 801b7fe:	60be      	str	r6, [r7, #8]
  uint32_t pllr = 0U;
 801b800:	2600      	movs	r6, #0
 801b802:	607e      	str	r6, [r7, #4]
  uint32_t sysclockfreq = 0U;
 801b804:	2600      	movs	r6, #0
 801b806:	613e      	str	r6, [r7, #16]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 801b808:	4ea3      	ldr	r6, [pc, #652]	; (801ba98 <HAL_RCC_GetSysClockFreq+0x2ac>)
 801b80a:	68b6      	ldr	r6, [r6, #8]
 801b80c:	f006 060c 	and.w	r6, r6, #12
 801b810:	2e0c      	cmp	r6, #12
 801b812:	f200 8137 	bhi.w	801ba84 <HAL_RCC_GetSysClockFreq+0x298>
 801b816:	f20f 0c08 	addw	ip, pc, #8
 801b81a:	f85c f026 	ldr.w	pc, [ip, r6, lsl #2]
 801b81e:	bf00      	nop
 801b820:	0801b855 	.word	0x0801b855
 801b824:	0801ba85 	.word	0x0801ba85
 801b828:	0801ba85 	.word	0x0801ba85
 801b82c:	0801ba85 	.word	0x0801ba85
 801b830:	0801b85b 	.word	0x0801b85b
 801b834:	0801ba85 	.word	0x0801ba85
 801b838:	0801ba85 	.word	0x0801ba85
 801b83c:	0801ba85 	.word	0x0801ba85
 801b840:	0801b861 	.word	0x0801b861
 801b844:	0801ba85 	.word	0x0801ba85
 801b848:	0801ba85 	.word	0x0801ba85
 801b84c:	0801ba85 	.word	0x0801ba85
 801b850:	0801b977 	.word	0x0801b977
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 801b854:	4b91      	ldr	r3, [pc, #580]	; (801ba9c <HAL_RCC_GetSysClockFreq+0x2b0>)
 801b856:	613b      	str	r3, [r7, #16]
       break;
 801b858:	e117      	b.n	801ba8a <HAL_RCC_GetSysClockFreq+0x29e>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 801b85a:	4b91      	ldr	r3, [pc, #580]	; (801baa0 <HAL_RCC_GetSysClockFreq+0x2b4>)
 801b85c:	613b      	str	r3, [r7, #16]
      break;
 801b85e:	e114      	b.n	801ba8a <HAL_RCC_GetSysClockFreq+0x29e>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 801b860:	4b8d      	ldr	r3, [pc, #564]	; (801ba98 <HAL_RCC_GetSysClockFreq+0x2ac>)
 801b862:	685b      	ldr	r3, [r3, #4]
 801b864:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801b868:	60fb      	str	r3, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 801b86a:	4b8b      	ldr	r3, [pc, #556]	; (801ba98 <HAL_RCC_GetSysClockFreq+0x2ac>)
 801b86c:	685b      	ldr	r3, [r3, #4]
 801b86e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 801b872:	2b00      	cmp	r3, #0
 801b874:	d024      	beq.n	801b8c0 <HAL_RCC_GetSysClockFreq+0xd4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 801b876:	4b88      	ldr	r3, [pc, #544]	; (801ba98 <HAL_RCC_GetSysClockFreq+0x2ac>)
 801b878:	685b      	ldr	r3, [r3, #4]
 801b87a:	099b      	lsrs	r3, r3, #6
 801b87c:	461a      	mov	r2, r3
 801b87e:	f04f 0300 	mov.w	r3, #0
 801b882:	f240 14ff 	movw	r4, #511	; 0x1ff
 801b886:	f04f 0500 	mov.w	r5, #0
 801b88a:	ea02 0004 	and.w	r0, r2, r4
 801b88e:	ea03 0105 	and.w	r1, r3, r5
 801b892:	4b83      	ldr	r3, [pc, #524]	; (801baa0 <HAL_RCC_GetSysClockFreq+0x2b4>)
 801b894:	fb03 f201 	mul.w	r2, r3, r1
 801b898:	2300      	movs	r3, #0
 801b89a:	fb03 f300 	mul.w	r3, r3, r0
 801b89e:	4413      	add	r3, r2
 801b8a0:	4a7f      	ldr	r2, [pc, #508]	; (801baa0 <HAL_RCC_GetSysClockFreq+0x2b4>)
 801b8a2:	fba0 0102 	umull	r0, r1, r0, r2
 801b8a6:	440b      	add	r3, r1
 801b8a8:	4619      	mov	r1, r3
 801b8aa:	68fb      	ldr	r3, [r7, #12]
 801b8ac:	461a      	mov	r2, r3
 801b8ae:	f04f 0300 	mov.w	r3, #0
 801b8b2:	f7f0 fbcd 	bl	800c050 <__aeabi_uldivmod>
 801b8b6:	4602      	mov	r2, r0
 801b8b8:	460b      	mov	r3, r1
 801b8ba:	4613      	mov	r3, r2
 801b8bc:	617b      	str	r3, [r7, #20]
 801b8be:	e04c      	b.n	801b95a <HAL_RCC_GetSysClockFreq+0x16e>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 801b8c0:	4b75      	ldr	r3, [pc, #468]	; (801ba98 <HAL_RCC_GetSysClockFreq+0x2ac>)
 801b8c2:	685b      	ldr	r3, [r3, #4]
 801b8c4:	099b      	lsrs	r3, r3, #6
 801b8c6:	461a      	mov	r2, r3
 801b8c8:	f04f 0300 	mov.w	r3, #0
 801b8cc:	f240 10ff 	movw	r0, #511	; 0x1ff
 801b8d0:	f04f 0100 	mov.w	r1, #0
 801b8d4:	ea02 0800 	and.w	r8, r2, r0
 801b8d8:	ea03 0901 	and.w	r9, r3, r1
 801b8dc:	4640      	mov	r0, r8
 801b8de:	4649      	mov	r1, r9
 801b8e0:	f04f 0200 	mov.w	r2, #0
 801b8e4:	f04f 0300 	mov.w	r3, #0
 801b8e8:	014b      	lsls	r3, r1, #5
 801b8ea:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 801b8ee:	0142      	lsls	r2, r0, #5
 801b8f0:	4610      	mov	r0, r2
 801b8f2:	4619      	mov	r1, r3
 801b8f4:	ebb0 0008 	subs.w	r0, r0, r8
 801b8f8:	eb61 0109 	sbc.w	r1, r1, r9
 801b8fc:	f04f 0200 	mov.w	r2, #0
 801b900:	f04f 0300 	mov.w	r3, #0
 801b904:	018b      	lsls	r3, r1, #6
 801b906:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 801b90a:	0182      	lsls	r2, r0, #6
 801b90c:	1a12      	subs	r2, r2, r0
 801b90e:	eb63 0301 	sbc.w	r3, r3, r1
 801b912:	f04f 0000 	mov.w	r0, #0
 801b916:	f04f 0100 	mov.w	r1, #0
 801b91a:	00d9      	lsls	r1, r3, #3
 801b91c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 801b920:	00d0      	lsls	r0, r2, #3
 801b922:	4602      	mov	r2, r0
 801b924:	460b      	mov	r3, r1
 801b926:	eb12 0208 	adds.w	r2, r2, r8
 801b92a:	eb43 0309 	adc.w	r3, r3, r9
 801b92e:	f04f 0000 	mov.w	r0, #0
 801b932:	f04f 0100 	mov.w	r1, #0
 801b936:	0299      	lsls	r1, r3, #10
 801b938:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 801b93c:	0290      	lsls	r0, r2, #10
 801b93e:	4602      	mov	r2, r0
 801b940:	460b      	mov	r3, r1
 801b942:	4610      	mov	r0, r2
 801b944:	4619      	mov	r1, r3
 801b946:	68fb      	ldr	r3, [r7, #12]
 801b948:	461a      	mov	r2, r3
 801b94a:	f04f 0300 	mov.w	r3, #0
 801b94e:	f7f0 fb7f 	bl	800c050 <__aeabi_uldivmod>
 801b952:	4602      	mov	r2, r0
 801b954:	460b      	mov	r3, r1
 801b956:	4613      	mov	r3, r2
 801b958:	617b      	str	r3, [r7, #20]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 801b95a:	4b4f      	ldr	r3, [pc, #316]	; (801ba98 <HAL_RCC_GetSysClockFreq+0x2ac>)
 801b95c:	685b      	ldr	r3, [r3, #4]
 801b95e:	0c1b      	lsrs	r3, r3, #16
 801b960:	f003 0303 	and.w	r3, r3, #3
 801b964:	3301      	adds	r3, #1
 801b966:	005b      	lsls	r3, r3, #1
 801b968:	60bb      	str	r3, [r7, #8]

      sysclockfreq = pllvco/pllp;
 801b96a:	697a      	ldr	r2, [r7, #20]
 801b96c:	68bb      	ldr	r3, [r7, #8]
 801b96e:	fbb2 f3f3 	udiv	r3, r2, r3
 801b972:	613b      	str	r3, [r7, #16]
      break;
 801b974:	e089      	b.n	801ba8a <HAL_RCC_GetSysClockFreq+0x29e>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 801b976:	4948      	ldr	r1, [pc, #288]	; (801ba98 <HAL_RCC_GetSysClockFreq+0x2ac>)
 801b978:	6849      	ldr	r1, [r1, #4]
 801b97a:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 801b97e:	60f9      	str	r1, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 801b980:	4945      	ldr	r1, [pc, #276]	; (801ba98 <HAL_RCC_GetSysClockFreq+0x2ac>)
 801b982:	6849      	ldr	r1, [r1, #4]
 801b984:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 801b988:	2900      	cmp	r1, #0
 801b98a:	d024      	beq.n	801b9d6 <HAL_RCC_GetSysClockFreq+0x1ea>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 801b98c:	4942      	ldr	r1, [pc, #264]	; (801ba98 <HAL_RCC_GetSysClockFreq+0x2ac>)
 801b98e:	6849      	ldr	r1, [r1, #4]
 801b990:	0989      	lsrs	r1, r1, #6
 801b992:	4608      	mov	r0, r1
 801b994:	f04f 0100 	mov.w	r1, #0
 801b998:	f240 14ff 	movw	r4, #511	; 0x1ff
 801b99c:	f04f 0500 	mov.w	r5, #0
 801b9a0:	ea00 0204 	and.w	r2, r0, r4
 801b9a4:	ea01 0305 	and.w	r3, r1, r5
 801b9a8:	493d      	ldr	r1, [pc, #244]	; (801baa0 <HAL_RCC_GetSysClockFreq+0x2b4>)
 801b9aa:	fb01 f003 	mul.w	r0, r1, r3
 801b9ae:	2100      	movs	r1, #0
 801b9b0:	fb01 f102 	mul.w	r1, r1, r2
 801b9b4:	1844      	adds	r4, r0, r1
 801b9b6:	493a      	ldr	r1, [pc, #232]	; (801baa0 <HAL_RCC_GetSysClockFreq+0x2b4>)
 801b9b8:	fba2 0101 	umull	r0, r1, r2, r1
 801b9bc:	1863      	adds	r3, r4, r1
 801b9be:	4619      	mov	r1, r3
 801b9c0:	68fb      	ldr	r3, [r7, #12]
 801b9c2:	461a      	mov	r2, r3
 801b9c4:	f04f 0300 	mov.w	r3, #0
 801b9c8:	f7f0 fb42 	bl	800c050 <__aeabi_uldivmod>
 801b9cc:	4602      	mov	r2, r0
 801b9ce:	460b      	mov	r3, r1
 801b9d0:	4613      	mov	r3, r2
 801b9d2:	617b      	str	r3, [r7, #20]
 801b9d4:	e04a      	b.n	801ba6c <HAL_RCC_GetSysClockFreq+0x280>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 801b9d6:	4b30      	ldr	r3, [pc, #192]	; (801ba98 <HAL_RCC_GetSysClockFreq+0x2ac>)
 801b9d8:	685b      	ldr	r3, [r3, #4]
 801b9da:	099b      	lsrs	r3, r3, #6
 801b9dc:	461a      	mov	r2, r3
 801b9de:	f04f 0300 	mov.w	r3, #0
 801b9e2:	f240 10ff 	movw	r0, #511	; 0x1ff
 801b9e6:	f04f 0100 	mov.w	r1, #0
 801b9ea:	ea02 0400 	and.w	r4, r2, r0
 801b9ee:	ea03 0501 	and.w	r5, r3, r1
 801b9f2:	4620      	mov	r0, r4
 801b9f4:	4629      	mov	r1, r5
 801b9f6:	f04f 0200 	mov.w	r2, #0
 801b9fa:	f04f 0300 	mov.w	r3, #0
 801b9fe:	014b      	lsls	r3, r1, #5
 801ba00:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 801ba04:	0142      	lsls	r2, r0, #5
 801ba06:	4610      	mov	r0, r2
 801ba08:	4619      	mov	r1, r3
 801ba0a:	1b00      	subs	r0, r0, r4
 801ba0c:	eb61 0105 	sbc.w	r1, r1, r5
 801ba10:	f04f 0200 	mov.w	r2, #0
 801ba14:	f04f 0300 	mov.w	r3, #0
 801ba18:	018b      	lsls	r3, r1, #6
 801ba1a:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 801ba1e:	0182      	lsls	r2, r0, #6
 801ba20:	1a12      	subs	r2, r2, r0
 801ba22:	eb63 0301 	sbc.w	r3, r3, r1
 801ba26:	f04f 0000 	mov.w	r0, #0
 801ba2a:	f04f 0100 	mov.w	r1, #0
 801ba2e:	00d9      	lsls	r1, r3, #3
 801ba30:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 801ba34:	00d0      	lsls	r0, r2, #3
 801ba36:	4602      	mov	r2, r0
 801ba38:	460b      	mov	r3, r1
 801ba3a:	1912      	adds	r2, r2, r4
 801ba3c:	eb45 0303 	adc.w	r3, r5, r3
 801ba40:	f04f 0000 	mov.w	r0, #0
 801ba44:	f04f 0100 	mov.w	r1, #0
 801ba48:	0299      	lsls	r1, r3, #10
 801ba4a:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 801ba4e:	0290      	lsls	r0, r2, #10
 801ba50:	4602      	mov	r2, r0
 801ba52:	460b      	mov	r3, r1
 801ba54:	4610      	mov	r0, r2
 801ba56:	4619      	mov	r1, r3
 801ba58:	68fb      	ldr	r3, [r7, #12]
 801ba5a:	461a      	mov	r2, r3
 801ba5c:	f04f 0300 	mov.w	r3, #0
 801ba60:	f7f0 faf6 	bl	800c050 <__aeabi_uldivmod>
 801ba64:	4602      	mov	r2, r0
 801ba66:	460b      	mov	r3, r1
 801ba68:	4613      	mov	r3, r2
 801ba6a:	617b      	str	r3, [r7, #20]
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 801ba6c:	4b0a      	ldr	r3, [pc, #40]	; (801ba98 <HAL_RCC_GetSysClockFreq+0x2ac>)
 801ba6e:	685b      	ldr	r3, [r3, #4]
 801ba70:	0f1b      	lsrs	r3, r3, #28
 801ba72:	f003 0307 	and.w	r3, r3, #7
 801ba76:	607b      	str	r3, [r7, #4]

      sysclockfreq = pllvco/pllr;
 801ba78:	697a      	ldr	r2, [r7, #20]
 801ba7a:	687b      	ldr	r3, [r7, #4]
 801ba7c:	fbb2 f3f3 	udiv	r3, r2, r3
 801ba80:	613b      	str	r3, [r7, #16]
      break;
 801ba82:	e002      	b.n	801ba8a <HAL_RCC_GetSysClockFreq+0x29e>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 801ba84:	4b05      	ldr	r3, [pc, #20]	; (801ba9c <HAL_RCC_GetSysClockFreq+0x2b0>)
 801ba86:	613b      	str	r3, [r7, #16]
      break;
 801ba88:	bf00      	nop
    }
  }
  return sysclockfreq;
 801ba8a:	693b      	ldr	r3, [r7, #16]
}
 801ba8c:	4618      	mov	r0, r3
 801ba8e:	371c      	adds	r7, #28
 801ba90:	46bd      	mov	sp, r7
 801ba92:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801ba96:	bf00      	nop
 801ba98:	40023800 	.word	0x40023800
 801ba9c:	00f42400 	.word	0x00f42400
 801baa0:	017d7840 	.word	0x017d7840

0801baa4 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 801baa4:	b580      	push	{r7, lr}
 801baa6:	b086      	sub	sp, #24
 801baa8:	af00      	add	r7, sp, #0
 801baaa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 801baac:	687b      	ldr	r3, [r7, #4]
 801baae:	2b00      	cmp	r3, #0
 801bab0:	d101      	bne.n	801bab6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 801bab2:	2301      	movs	r3, #1
 801bab4:	e28d      	b.n	801bfd2 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 801bab6:	687b      	ldr	r3, [r7, #4]
 801bab8:	681b      	ldr	r3, [r3, #0]
 801baba:	f003 0301 	and.w	r3, r3, #1
 801babe:	2b00      	cmp	r3, #0
 801bac0:	f000 8083 	beq.w	801bbca <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 801bac4:	4b94      	ldr	r3, [pc, #592]	; (801bd18 <HAL_RCC_OscConfig+0x274>)
 801bac6:	689b      	ldr	r3, [r3, #8]
 801bac8:	f003 030c 	and.w	r3, r3, #12
 801bacc:	2b04      	cmp	r3, #4
 801bace:	d019      	beq.n	801bb04 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 801bad0:	4b91      	ldr	r3, [pc, #580]	; (801bd18 <HAL_RCC_OscConfig+0x274>)
 801bad2:	689b      	ldr	r3, [r3, #8]
 801bad4:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 801bad8:	2b08      	cmp	r3, #8
 801bada:	d106      	bne.n	801baea <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 801badc:	4b8e      	ldr	r3, [pc, #568]	; (801bd18 <HAL_RCC_OscConfig+0x274>)
 801bade:	685b      	ldr	r3, [r3, #4]
 801bae0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 801bae4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 801bae8:	d00c      	beq.n	801bb04 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 801baea:	4b8b      	ldr	r3, [pc, #556]	; (801bd18 <HAL_RCC_OscConfig+0x274>)
 801baec:	689b      	ldr	r3, [r3, #8]
 801baee:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 801baf2:	2b0c      	cmp	r3, #12
 801baf4:	d112      	bne.n	801bb1c <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 801baf6:	4b88      	ldr	r3, [pc, #544]	; (801bd18 <HAL_RCC_OscConfig+0x274>)
 801baf8:	685b      	ldr	r3, [r3, #4]
 801bafa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 801bafe:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 801bb02:	d10b      	bne.n	801bb1c <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 801bb04:	4b84      	ldr	r3, [pc, #528]	; (801bd18 <HAL_RCC_OscConfig+0x274>)
 801bb06:	681b      	ldr	r3, [r3, #0]
 801bb08:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801bb0c:	2b00      	cmp	r3, #0
 801bb0e:	d05b      	beq.n	801bbc8 <HAL_RCC_OscConfig+0x124>
 801bb10:	687b      	ldr	r3, [r7, #4]
 801bb12:	685b      	ldr	r3, [r3, #4]
 801bb14:	2b00      	cmp	r3, #0
 801bb16:	d157      	bne.n	801bbc8 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 801bb18:	2301      	movs	r3, #1
 801bb1a:	e25a      	b.n	801bfd2 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 801bb1c:	687b      	ldr	r3, [r7, #4]
 801bb1e:	685b      	ldr	r3, [r3, #4]
 801bb20:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801bb24:	d106      	bne.n	801bb34 <HAL_RCC_OscConfig+0x90>
 801bb26:	4b7c      	ldr	r3, [pc, #496]	; (801bd18 <HAL_RCC_OscConfig+0x274>)
 801bb28:	681b      	ldr	r3, [r3, #0]
 801bb2a:	4a7b      	ldr	r2, [pc, #492]	; (801bd18 <HAL_RCC_OscConfig+0x274>)
 801bb2c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 801bb30:	6013      	str	r3, [r2, #0]
 801bb32:	e01d      	b.n	801bb70 <HAL_RCC_OscConfig+0xcc>
 801bb34:	687b      	ldr	r3, [r7, #4]
 801bb36:	685b      	ldr	r3, [r3, #4]
 801bb38:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 801bb3c:	d10c      	bne.n	801bb58 <HAL_RCC_OscConfig+0xb4>
 801bb3e:	4b76      	ldr	r3, [pc, #472]	; (801bd18 <HAL_RCC_OscConfig+0x274>)
 801bb40:	681b      	ldr	r3, [r3, #0]
 801bb42:	4a75      	ldr	r2, [pc, #468]	; (801bd18 <HAL_RCC_OscConfig+0x274>)
 801bb44:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 801bb48:	6013      	str	r3, [r2, #0]
 801bb4a:	4b73      	ldr	r3, [pc, #460]	; (801bd18 <HAL_RCC_OscConfig+0x274>)
 801bb4c:	681b      	ldr	r3, [r3, #0]
 801bb4e:	4a72      	ldr	r2, [pc, #456]	; (801bd18 <HAL_RCC_OscConfig+0x274>)
 801bb50:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 801bb54:	6013      	str	r3, [r2, #0]
 801bb56:	e00b      	b.n	801bb70 <HAL_RCC_OscConfig+0xcc>
 801bb58:	4b6f      	ldr	r3, [pc, #444]	; (801bd18 <HAL_RCC_OscConfig+0x274>)
 801bb5a:	681b      	ldr	r3, [r3, #0]
 801bb5c:	4a6e      	ldr	r2, [pc, #440]	; (801bd18 <HAL_RCC_OscConfig+0x274>)
 801bb5e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 801bb62:	6013      	str	r3, [r2, #0]
 801bb64:	4b6c      	ldr	r3, [pc, #432]	; (801bd18 <HAL_RCC_OscConfig+0x274>)
 801bb66:	681b      	ldr	r3, [r3, #0]
 801bb68:	4a6b      	ldr	r2, [pc, #428]	; (801bd18 <HAL_RCC_OscConfig+0x274>)
 801bb6a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 801bb6e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 801bb70:	687b      	ldr	r3, [r7, #4]
 801bb72:	685b      	ldr	r3, [r3, #4]
 801bb74:	2b00      	cmp	r3, #0
 801bb76:	d013      	beq.n	801bba0 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801bb78:	f7fc fbcc 	bl	8018314 <HAL_GetTick>
 801bb7c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 801bb7e:	e008      	b.n	801bb92 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 801bb80:	f7fc fbc8 	bl	8018314 <HAL_GetTick>
 801bb84:	4602      	mov	r2, r0
 801bb86:	693b      	ldr	r3, [r7, #16]
 801bb88:	1ad3      	subs	r3, r2, r3
 801bb8a:	2b64      	cmp	r3, #100	; 0x64
 801bb8c:	d901      	bls.n	801bb92 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 801bb8e:	2303      	movs	r3, #3
 801bb90:	e21f      	b.n	801bfd2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 801bb92:	4b61      	ldr	r3, [pc, #388]	; (801bd18 <HAL_RCC_OscConfig+0x274>)
 801bb94:	681b      	ldr	r3, [r3, #0]
 801bb96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801bb9a:	2b00      	cmp	r3, #0
 801bb9c:	d0f0      	beq.n	801bb80 <HAL_RCC_OscConfig+0xdc>
 801bb9e:	e014      	b.n	801bbca <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801bba0:	f7fc fbb8 	bl	8018314 <HAL_GetTick>
 801bba4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 801bba6:	e008      	b.n	801bbba <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 801bba8:	f7fc fbb4 	bl	8018314 <HAL_GetTick>
 801bbac:	4602      	mov	r2, r0
 801bbae:	693b      	ldr	r3, [r7, #16]
 801bbb0:	1ad3      	subs	r3, r2, r3
 801bbb2:	2b64      	cmp	r3, #100	; 0x64
 801bbb4:	d901      	bls.n	801bbba <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 801bbb6:	2303      	movs	r3, #3
 801bbb8:	e20b      	b.n	801bfd2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 801bbba:	4b57      	ldr	r3, [pc, #348]	; (801bd18 <HAL_RCC_OscConfig+0x274>)
 801bbbc:	681b      	ldr	r3, [r3, #0]
 801bbbe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801bbc2:	2b00      	cmp	r3, #0
 801bbc4:	d1f0      	bne.n	801bba8 <HAL_RCC_OscConfig+0x104>
 801bbc6:	e000      	b.n	801bbca <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 801bbc8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 801bbca:	687b      	ldr	r3, [r7, #4]
 801bbcc:	681b      	ldr	r3, [r3, #0]
 801bbce:	f003 0302 	and.w	r3, r3, #2
 801bbd2:	2b00      	cmp	r3, #0
 801bbd4:	d06f      	beq.n	801bcb6 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 801bbd6:	4b50      	ldr	r3, [pc, #320]	; (801bd18 <HAL_RCC_OscConfig+0x274>)
 801bbd8:	689b      	ldr	r3, [r3, #8]
 801bbda:	f003 030c 	and.w	r3, r3, #12
 801bbde:	2b00      	cmp	r3, #0
 801bbe0:	d017      	beq.n	801bc12 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 801bbe2:	4b4d      	ldr	r3, [pc, #308]	; (801bd18 <HAL_RCC_OscConfig+0x274>)
 801bbe4:	689b      	ldr	r3, [r3, #8]
 801bbe6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 801bbea:	2b08      	cmp	r3, #8
 801bbec:	d105      	bne.n	801bbfa <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 801bbee:	4b4a      	ldr	r3, [pc, #296]	; (801bd18 <HAL_RCC_OscConfig+0x274>)
 801bbf0:	685b      	ldr	r3, [r3, #4]
 801bbf2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 801bbf6:	2b00      	cmp	r3, #0
 801bbf8:	d00b      	beq.n	801bc12 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 801bbfa:	4b47      	ldr	r3, [pc, #284]	; (801bd18 <HAL_RCC_OscConfig+0x274>)
 801bbfc:	689b      	ldr	r3, [r3, #8]
 801bbfe:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 801bc02:	2b0c      	cmp	r3, #12
 801bc04:	d11c      	bne.n	801bc40 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 801bc06:	4b44      	ldr	r3, [pc, #272]	; (801bd18 <HAL_RCC_OscConfig+0x274>)
 801bc08:	685b      	ldr	r3, [r3, #4]
 801bc0a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 801bc0e:	2b00      	cmp	r3, #0
 801bc10:	d116      	bne.n	801bc40 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 801bc12:	4b41      	ldr	r3, [pc, #260]	; (801bd18 <HAL_RCC_OscConfig+0x274>)
 801bc14:	681b      	ldr	r3, [r3, #0]
 801bc16:	f003 0302 	and.w	r3, r3, #2
 801bc1a:	2b00      	cmp	r3, #0
 801bc1c:	d005      	beq.n	801bc2a <HAL_RCC_OscConfig+0x186>
 801bc1e:	687b      	ldr	r3, [r7, #4]
 801bc20:	68db      	ldr	r3, [r3, #12]
 801bc22:	2b01      	cmp	r3, #1
 801bc24:	d001      	beq.n	801bc2a <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 801bc26:	2301      	movs	r3, #1
 801bc28:	e1d3      	b.n	801bfd2 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 801bc2a:	4b3b      	ldr	r3, [pc, #236]	; (801bd18 <HAL_RCC_OscConfig+0x274>)
 801bc2c:	681b      	ldr	r3, [r3, #0]
 801bc2e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 801bc32:	687b      	ldr	r3, [r7, #4]
 801bc34:	691b      	ldr	r3, [r3, #16]
 801bc36:	00db      	lsls	r3, r3, #3
 801bc38:	4937      	ldr	r1, [pc, #220]	; (801bd18 <HAL_RCC_OscConfig+0x274>)
 801bc3a:	4313      	orrs	r3, r2
 801bc3c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 801bc3e:	e03a      	b.n	801bcb6 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 801bc40:	687b      	ldr	r3, [r7, #4]
 801bc42:	68db      	ldr	r3, [r3, #12]
 801bc44:	2b00      	cmp	r3, #0
 801bc46:	d020      	beq.n	801bc8a <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 801bc48:	4b34      	ldr	r3, [pc, #208]	; (801bd1c <HAL_RCC_OscConfig+0x278>)
 801bc4a:	2201      	movs	r2, #1
 801bc4c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801bc4e:	f7fc fb61 	bl	8018314 <HAL_GetTick>
 801bc52:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 801bc54:	e008      	b.n	801bc68 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 801bc56:	f7fc fb5d 	bl	8018314 <HAL_GetTick>
 801bc5a:	4602      	mov	r2, r0
 801bc5c:	693b      	ldr	r3, [r7, #16]
 801bc5e:	1ad3      	subs	r3, r2, r3
 801bc60:	2b02      	cmp	r3, #2
 801bc62:	d901      	bls.n	801bc68 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 801bc64:	2303      	movs	r3, #3
 801bc66:	e1b4      	b.n	801bfd2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 801bc68:	4b2b      	ldr	r3, [pc, #172]	; (801bd18 <HAL_RCC_OscConfig+0x274>)
 801bc6a:	681b      	ldr	r3, [r3, #0]
 801bc6c:	f003 0302 	and.w	r3, r3, #2
 801bc70:	2b00      	cmp	r3, #0
 801bc72:	d0f0      	beq.n	801bc56 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 801bc74:	4b28      	ldr	r3, [pc, #160]	; (801bd18 <HAL_RCC_OscConfig+0x274>)
 801bc76:	681b      	ldr	r3, [r3, #0]
 801bc78:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 801bc7c:	687b      	ldr	r3, [r7, #4]
 801bc7e:	691b      	ldr	r3, [r3, #16]
 801bc80:	00db      	lsls	r3, r3, #3
 801bc82:	4925      	ldr	r1, [pc, #148]	; (801bd18 <HAL_RCC_OscConfig+0x274>)
 801bc84:	4313      	orrs	r3, r2
 801bc86:	600b      	str	r3, [r1, #0]
 801bc88:	e015      	b.n	801bcb6 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 801bc8a:	4b24      	ldr	r3, [pc, #144]	; (801bd1c <HAL_RCC_OscConfig+0x278>)
 801bc8c:	2200      	movs	r2, #0
 801bc8e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801bc90:	f7fc fb40 	bl	8018314 <HAL_GetTick>
 801bc94:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 801bc96:	e008      	b.n	801bcaa <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 801bc98:	f7fc fb3c 	bl	8018314 <HAL_GetTick>
 801bc9c:	4602      	mov	r2, r0
 801bc9e:	693b      	ldr	r3, [r7, #16]
 801bca0:	1ad3      	subs	r3, r2, r3
 801bca2:	2b02      	cmp	r3, #2
 801bca4:	d901      	bls.n	801bcaa <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 801bca6:	2303      	movs	r3, #3
 801bca8:	e193      	b.n	801bfd2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 801bcaa:	4b1b      	ldr	r3, [pc, #108]	; (801bd18 <HAL_RCC_OscConfig+0x274>)
 801bcac:	681b      	ldr	r3, [r3, #0]
 801bcae:	f003 0302 	and.w	r3, r3, #2
 801bcb2:	2b00      	cmp	r3, #0
 801bcb4:	d1f0      	bne.n	801bc98 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 801bcb6:	687b      	ldr	r3, [r7, #4]
 801bcb8:	681b      	ldr	r3, [r3, #0]
 801bcba:	f003 0308 	and.w	r3, r3, #8
 801bcbe:	2b00      	cmp	r3, #0
 801bcc0:	d036      	beq.n	801bd30 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 801bcc2:	687b      	ldr	r3, [r7, #4]
 801bcc4:	695b      	ldr	r3, [r3, #20]
 801bcc6:	2b00      	cmp	r3, #0
 801bcc8:	d016      	beq.n	801bcf8 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 801bcca:	4b15      	ldr	r3, [pc, #84]	; (801bd20 <HAL_RCC_OscConfig+0x27c>)
 801bccc:	2201      	movs	r2, #1
 801bcce:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 801bcd0:	f7fc fb20 	bl	8018314 <HAL_GetTick>
 801bcd4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 801bcd6:	e008      	b.n	801bcea <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 801bcd8:	f7fc fb1c 	bl	8018314 <HAL_GetTick>
 801bcdc:	4602      	mov	r2, r0
 801bcde:	693b      	ldr	r3, [r7, #16]
 801bce0:	1ad3      	subs	r3, r2, r3
 801bce2:	2b02      	cmp	r3, #2
 801bce4:	d901      	bls.n	801bcea <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 801bce6:	2303      	movs	r3, #3
 801bce8:	e173      	b.n	801bfd2 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 801bcea:	4b0b      	ldr	r3, [pc, #44]	; (801bd18 <HAL_RCC_OscConfig+0x274>)
 801bcec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801bcee:	f003 0302 	and.w	r3, r3, #2
 801bcf2:	2b00      	cmp	r3, #0
 801bcf4:	d0f0      	beq.n	801bcd8 <HAL_RCC_OscConfig+0x234>
 801bcf6:	e01b      	b.n	801bd30 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 801bcf8:	4b09      	ldr	r3, [pc, #36]	; (801bd20 <HAL_RCC_OscConfig+0x27c>)
 801bcfa:	2200      	movs	r2, #0
 801bcfc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 801bcfe:	f7fc fb09 	bl	8018314 <HAL_GetTick>
 801bd02:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 801bd04:	e00e      	b.n	801bd24 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 801bd06:	f7fc fb05 	bl	8018314 <HAL_GetTick>
 801bd0a:	4602      	mov	r2, r0
 801bd0c:	693b      	ldr	r3, [r7, #16]
 801bd0e:	1ad3      	subs	r3, r2, r3
 801bd10:	2b02      	cmp	r3, #2
 801bd12:	d907      	bls.n	801bd24 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 801bd14:	2303      	movs	r3, #3
 801bd16:	e15c      	b.n	801bfd2 <HAL_RCC_OscConfig+0x52e>
 801bd18:	40023800 	.word	0x40023800
 801bd1c:	42470000 	.word	0x42470000
 801bd20:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 801bd24:	4b8a      	ldr	r3, [pc, #552]	; (801bf50 <HAL_RCC_OscConfig+0x4ac>)
 801bd26:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801bd28:	f003 0302 	and.w	r3, r3, #2
 801bd2c:	2b00      	cmp	r3, #0
 801bd2e:	d1ea      	bne.n	801bd06 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 801bd30:	687b      	ldr	r3, [r7, #4]
 801bd32:	681b      	ldr	r3, [r3, #0]
 801bd34:	f003 0304 	and.w	r3, r3, #4
 801bd38:	2b00      	cmp	r3, #0
 801bd3a:	f000 8097 	beq.w	801be6c <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 801bd3e:	2300      	movs	r3, #0
 801bd40:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 801bd42:	4b83      	ldr	r3, [pc, #524]	; (801bf50 <HAL_RCC_OscConfig+0x4ac>)
 801bd44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801bd46:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 801bd4a:	2b00      	cmp	r3, #0
 801bd4c:	d10f      	bne.n	801bd6e <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 801bd4e:	2300      	movs	r3, #0
 801bd50:	60bb      	str	r3, [r7, #8]
 801bd52:	4b7f      	ldr	r3, [pc, #508]	; (801bf50 <HAL_RCC_OscConfig+0x4ac>)
 801bd54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801bd56:	4a7e      	ldr	r2, [pc, #504]	; (801bf50 <HAL_RCC_OscConfig+0x4ac>)
 801bd58:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 801bd5c:	6413      	str	r3, [r2, #64]	; 0x40
 801bd5e:	4b7c      	ldr	r3, [pc, #496]	; (801bf50 <HAL_RCC_OscConfig+0x4ac>)
 801bd60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801bd62:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 801bd66:	60bb      	str	r3, [r7, #8]
 801bd68:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 801bd6a:	2301      	movs	r3, #1
 801bd6c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 801bd6e:	4b79      	ldr	r3, [pc, #484]	; (801bf54 <HAL_RCC_OscConfig+0x4b0>)
 801bd70:	681b      	ldr	r3, [r3, #0]
 801bd72:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801bd76:	2b00      	cmp	r3, #0
 801bd78:	d118      	bne.n	801bdac <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 801bd7a:	4b76      	ldr	r3, [pc, #472]	; (801bf54 <HAL_RCC_OscConfig+0x4b0>)
 801bd7c:	681b      	ldr	r3, [r3, #0]
 801bd7e:	4a75      	ldr	r2, [pc, #468]	; (801bf54 <HAL_RCC_OscConfig+0x4b0>)
 801bd80:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 801bd84:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 801bd86:	f7fc fac5 	bl	8018314 <HAL_GetTick>
 801bd8a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 801bd8c:	e008      	b.n	801bda0 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 801bd8e:	f7fc fac1 	bl	8018314 <HAL_GetTick>
 801bd92:	4602      	mov	r2, r0
 801bd94:	693b      	ldr	r3, [r7, #16]
 801bd96:	1ad3      	subs	r3, r2, r3
 801bd98:	2b02      	cmp	r3, #2
 801bd9a:	d901      	bls.n	801bda0 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 801bd9c:	2303      	movs	r3, #3
 801bd9e:	e118      	b.n	801bfd2 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 801bda0:	4b6c      	ldr	r3, [pc, #432]	; (801bf54 <HAL_RCC_OscConfig+0x4b0>)
 801bda2:	681b      	ldr	r3, [r3, #0]
 801bda4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801bda8:	2b00      	cmp	r3, #0
 801bdaa:	d0f0      	beq.n	801bd8e <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 801bdac:	687b      	ldr	r3, [r7, #4]
 801bdae:	689b      	ldr	r3, [r3, #8]
 801bdb0:	2b01      	cmp	r3, #1
 801bdb2:	d106      	bne.n	801bdc2 <HAL_RCC_OscConfig+0x31e>
 801bdb4:	4b66      	ldr	r3, [pc, #408]	; (801bf50 <HAL_RCC_OscConfig+0x4ac>)
 801bdb6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801bdb8:	4a65      	ldr	r2, [pc, #404]	; (801bf50 <HAL_RCC_OscConfig+0x4ac>)
 801bdba:	f043 0301 	orr.w	r3, r3, #1
 801bdbe:	6713      	str	r3, [r2, #112]	; 0x70
 801bdc0:	e01c      	b.n	801bdfc <HAL_RCC_OscConfig+0x358>
 801bdc2:	687b      	ldr	r3, [r7, #4]
 801bdc4:	689b      	ldr	r3, [r3, #8]
 801bdc6:	2b05      	cmp	r3, #5
 801bdc8:	d10c      	bne.n	801bde4 <HAL_RCC_OscConfig+0x340>
 801bdca:	4b61      	ldr	r3, [pc, #388]	; (801bf50 <HAL_RCC_OscConfig+0x4ac>)
 801bdcc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801bdce:	4a60      	ldr	r2, [pc, #384]	; (801bf50 <HAL_RCC_OscConfig+0x4ac>)
 801bdd0:	f043 0304 	orr.w	r3, r3, #4
 801bdd4:	6713      	str	r3, [r2, #112]	; 0x70
 801bdd6:	4b5e      	ldr	r3, [pc, #376]	; (801bf50 <HAL_RCC_OscConfig+0x4ac>)
 801bdd8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801bdda:	4a5d      	ldr	r2, [pc, #372]	; (801bf50 <HAL_RCC_OscConfig+0x4ac>)
 801bddc:	f043 0301 	orr.w	r3, r3, #1
 801bde0:	6713      	str	r3, [r2, #112]	; 0x70
 801bde2:	e00b      	b.n	801bdfc <HAL_RCC_OscConfig+0x358>
 801bde4:	4b5a      	ldr	r3, [pc, #360]	; (801bf50 <HAL_RCC_OscConfig+0x4ac>)
 801bde6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801bde8:	4a59      	ldr	r2, [pc, #356]	; (801bf50 <HAL_RCC_OscConfig+0x4ac>)
 801bdea:	f023 0301 	bic.w	r3, r3, #1
 801bdee:	6713      	str	r3, [r2, #112]	; 0x70
 801bdf0:	4b57      	ldr	r3, [pc, #348]	; (801bf50 <HAL_RCC_OscConfig+0x4ac>)
 801bdf2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801bdf4:	4a56      	ldr	r2, [pc, #344]	; (801bf50 <HAL_RCC_OscConfig+0x4ac>)
 801bdf6:	f023 0304 	bic.w	r3, r3, #4
 801bdfa:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 801bdfc:	687b      	ldr	r3, [r7, #4]
 801bdfe:	689b      	ldr	r3, [r3, #8]
 801be00:	2b00      	cmp	r3, #0
 801be02:	d015      	beq.n	801be30 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 801be04:	f7fc fa86 	bl	8018314 <HAL_GetTick>
 801be08:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 801be0a:	e00a      	b.n	801be22 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 801be0c:	f7fc fa82 	bl	8018314 <HAL_GetTick>
 801be10:	4602      	mov	r2, r0
 801be12:	693b      	ldr	r3, [r7, #16]
 801be14:	1ad3      	subs	r3, r2, r3
 801be16:	f241 3288 	movw	r2, #5000	; 0x1388
 801be1a:	4293      	cmp	r3, r2
 801be1c:	d901      	bls.n	801be22 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 801be1e:	2303      	movs	r3, #3
 801be20:	e0d7      	b.n	801bfd2 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 801be22:	4b4b      	ldr	r3, [pc, #300]	; (801bf50 <HAL_RCC_OscConfig+0x4ac>)
 801be24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801be26:	f003 0302 	and.w	r3, r3, #2
 801be2a:	2b00      	cmp	r3, #0
 801be2c:	d0ee      	beq.n	801be0c <HAL_RCC_OscConfig+0x368>
 801be2e:	e014      	b.n	801be5a <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 801be30:	f7fc fa70 	bl	8018314 <HAL_GetTick>
 801be34:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 801be36:	e00a      	b.n	801be4e <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 801be38:	f7fc fa6c 	bl	8018314 <HAL_GetTick>
 801be3c:	4602      	mov	r2, r0
 801be3e:	693b      	ldr	r3, [r7, #16]
 801be40:	1ad3      	subs	r3, r2, r3
 801be42:	f241 3288 	movw	r2, #5000	; 0x1388
 801be46:	4293      	cmp	r3, r2
 801be48:	d901      	bls.n	801be4e <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 801be4a:	2303      	movs	r3, #3
 801be4c:	e0c1      	b.n	801bfd2 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 801be4e:	4b40      	ldr	r3, [pc, #256]	; (801bf50 <HAL_RCC_OscConfig+0x4ac>)
 801be50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801be52:	f003 0302 	and.w	r3, r3, #2
 801be56:	2b00      	cmp	r3, #0
 801be58:	d1ee      	bne.n	801be38 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 801be5a:	7dfb      	ldrb	r3, [r7, #23]
 801be5c:	2b01      	cmp	r3, #1
 801be5e:	d105      	bne.n	801be6c <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 801be60:	4b3b      	ldr	r3, [pc, #236]	; (801bf50 <HAL_RCC_OscConfig+0x4ac>)
 801be62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801be64:	4a3a      	ldr	r2, [pc, #232]	; (801bf50 <HAL_RCC_OscConfig+0x4ac>)
 801be66:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 801be6a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 801be6c:	687b      	ldr	r3, [r7, #4]
 801be6e:	699b      	ldr	r3, [r3, #24]
 801be70:	2b00      	cmp	r3, #0
 801be72:	f000 80ad 	beq.w	801bfd0 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 801be76:	4b36      	ldr	r3, [pc, #216]	; (801bf50 <HAL_RCC_OscConfig+0x4ac>)
 801be78:	689b      	ldr	r3, [r3, #8]
 801be7a:	f003 030c 	and.w	r3, r3, #12
 801be7e:	2b08      	cmp	r3, #8
 801be80:	d060      	beq.n	801bf44 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 801be82:	687b      	ldr	r3, [r7, #4]
 801be84:	699b      	ldr	r3, [r3, #24]
 801be86:	2b02      	cmp	r3, #2
 801be88:	d145      	bne.n	801bf16 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 801be8a:	4b33      	ldr	r3, [pc, #204]	; (801bf58 <HAL_RCC_OscConfig+0x4b4>)
 801be8c:	2200      	movs	r2, #0
 801be8e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801be90:	f7fc fa40 	bl	8018314 <HAL_GetTick>
 801be94:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 801be96:	e008      	b.n	801beaa <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 801be98:	f7fc fa3c 	bl	8018314 <HAL_GetTick>
 801be9c:	4602      	mov	r2, r0
 801be9e:	693b      	ldr	r3, [r7, #16]
 801bea0:	1ad3      	subs	r3, r2, r3
 801bea2:	2b02      	cmp	r3, #2
 801bea4:	d901      	bls.n	801beaa <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 801bea6:	2303      	movs	r3, #3
 801bea8:	e093      	b.n	801bfd2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 801beaa:	4b29      	ldr	r3, [pc, #164]	; (801bf50 <HAL_RCC_OscConfig+0x4ac>)
 801beac:	681b      	ldr	r3, [r3, #0]
 801beae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 801beb2:	2b00      	cmp	r3, #0
 801beb4:	d1f0      	bne.n	801be98 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 801beb6:	687b      	ldr	r3, [r7, #4]
 801beb8:	69da      	ldr	r2, [r3, #28]
 801beba:	687b      	ldr	r3, [r7, #4]
 801bebc:	6a1b      	ldr	r3, [r3, #32]
 801bebe:	431a      	orrs	r2, r3
 801bec0:	687b      	ldr	r3, [r7, #4]
 801bec2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801bec4:	019b      	lsls	r3, r3, #6
 801bec6:	431a      	orrs	r2, r3
 801bec8:	687b      	ldr	r3, [r7, #4]
 801beca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801becc:	085b      	lsrs	r3, r3, #1
 801bece:	3b01      	subs	r3, #1
 801bed0:	041b      	lsls	r3, r3, #16
 801bed2:	431a      	orrs	r2, r3
 801bed4:	687b      	ldr	r3, [r7, #4]
 801bed6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801bed8:	061b      	lsls	r3, r3, #24
 801beda:	431a      	orrs	r2, r3
 801bedc:	687b      	ldr	r3, [r7, #4]
 801bede:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801bee0:	071b      	lsls	r3, r3, #28
 801bee2:	491b      	ldr	r1, [pc, #108]	; (801bf50 <HAL_RCC_OscConfig+0x4ac>)
 801bee4:	4313      	orrs	r3, r2
 801bee6:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 801bee8:	4b1b      	ldr	r3, [pc, #108]	; (801bf58 <HAL_RCC_OscConfig+0x4b4>)
 801beea:	2201      	movs	r2, #1
 801beec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801beee:	f7fc fa11 	bl	8018314 <HAL_GetTick>
 801bef2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 801bef4:	e008      	b.n	801bf08 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 801bef6:	f7fc fa0d 	bl	8018314 <HAL_GetTick>
 801befa:	4602      	mov	r2, r0
 801befc:	693b      	ldr	r3, [r7, #16]
 801befe:	1ad3      	subs	r3, r2, r3
 801bf00:	2b02      	cmp	r3, #2
 801bf02:	d901      	bls.n	801bf08 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 801bf04:	2303      	movs	r3, #3
 801bf06:	e064      	b.n	801bfd2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 801bf08:	4b11      	ldr	r3, [pc, #68]	; (801bf50 <HAL_RCC_OscConfig+0x4ac>)
 801bf0a:	681b      	ldr	r3, [r3, #0]
 801bf0c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 801bf10:	2b00      	cmp	r3, #0
 801bf12:	d0f0      	beq.n	801bef6 <HAL_RCC_OscConfig+0x452>
 801bf14:	e05c      	b.n	801bfd0 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 801bf16:	4b10      	ldr	r3, [pc, #64]	; (801bf58 <HAL_RCC_OscConfig+0x4b4>)
 801bf18:	2200      	movs	r2, #0
 801bf1a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801bf1c:	f7fc f9fa 	bl	8018314 <HAL_GetTick>
 801bf20:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 801bf22:	e008      	b.n	801bf36 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 801bf24:	f7fc f9f6 	bl	8018314 <HAL_GetTick>
 801bf28:	4602      	mov	r2, r0
 801bf2a:	693b      	ldr	r3, [r7, #16]
 801bf2c:	1ad3      	subs	r3, r2, r3
 801bf2e:	2b02      	cmp	r3, #2
 801bf30:	d901      	bls.n	801bf36 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 801bf32:	2303      	movs	r3, #3
 801bf34:	e04d      	b.n	801bfd2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 801bf36:	4b06      	ldr	r3, [pc, #24]	; (801bf50 <HAL_RCC_OscConfig+0x4ac>)
 801bf38:	681b      	ldr	r3, [r3, #0]
 801bf3a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 801bf3e:	2b00      	cmp	r3, #0
 801bf40:	d1f0      	bne.n	801bf24 <HAL_RCC_OscConfig+0x480>
 801bf42:	e045      	b.n	801bfd0 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 801bf44:	687b      	ldr	r3, [r7, #4]
 801bf46:	699b      	ldr	r3, [r3, #24]
 801bf48:	2b01      	cmp	r3, #1
 801bf4a:	d107      	bne.n	801bf5c <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 801bf4c:	2301      	movs	r3, #1
 801bf4e:	e040      	b.n	801bfd2 <HAL_RCC_OscConfig+0x52e>
 801bf50:	40023800 	.word	0x40023800
 801bf54:	40007000 	.word	0x40007000
 801bf58:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 801bf5c:	4b1f      	ldr	r3, [pc, #124]	; (801bfdc <HAL_RCC_OscConfig+0x538>)
 801bf5e:	685b      	ldr	r3, [r3, #4]
 801bf60:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 801bf62:	687b      	ldr	r3, [r7, #4]
 801bf64:	699b      	ldr	r3, [r3, #24]
 801bf66:	2b01      	cmp	r3, #1
 801bf68:	d030      	beq.n	801bfcc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 801bf6a:	68fb      	ldr	r3, [r7, #12]
 801bf6c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 801bf70:	687b      	ldr	r3, [r7, #4]
 801bf72:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 801bf74:	429a      	cmp	r2, r3
 801bf76:	d129      	bne.n	801bfcc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 801bf78:	68fb      	ldr	r3, [r7, #12]
 801bf7a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 801bf7e:	687b      	ldr	r3, [r7, #4]
 801bf80:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 801bf82:	429a      	cmp	r2, r3
 801bf84:	d122      	bne.n	801bfcc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 801bf86:	68fa      	ldr	r2, [r7, #12]
 801bf88:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 801bf8c:	4013      	ands	r3, r2
 801bf8e:	687a      	ldr	r2, [r7, #4]
 801bf90:	6a52      	ldr	r2, [r2, #36]	; 0x24
 801bf92:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 801bf94:	4293      	cmp	r3, r2
 801bf96:	d119      	bne.n	801bfcc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 801bf98:	68fb      	ldr	r3, [r7, #12]
 801bf9a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 801bf9e:	687b      	ldr	r3, [r7, #4]
 801bfa0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801bfa2:	085b      	lsrs	r3, r3, #1
 801bfa4:	3b01      	subs	r3, #1
 801bfa6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 801bfa8:	429a      	cmp	r2, r3
 801bfaa:	d10f      	bne.n	801bfcc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 801bfac:	68fb      	ldr	r3, [r7, #12]
 801bfae:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 801bfb2:	687b      	ldr	r3, [r7, #4]
 801bfb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801bfb6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 801bfb8:	429a      	cmp	r2, r3
 801bfba:	d107      	bne.n	801bfcc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 801bfbc:	68fb      	ldr	r3, [r7, #12]
 801bfbe:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 801bfc2:	687b      	ldr	r3, [r7, #4]
 801bfc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801bfc6:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 801bfc8:	429a      	cmp	r2, r3
 801bfca:	d001      	beq.n	801bfd0 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 801bfcc:	2301      	movs	r3, #1
 801bfce:	e000      	b.n	801bfd2 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 801bfd0:	2300      	movs	r3, #0
}
 801bfd2:	4618      	mov	r0, r3
 801bfd4:	3718      	adds	r7, #24
 801bfd6:	46bd      	mov	sp, r7
 801bfd8:	bd80      	pop	{r7, pc}
 801bfda:	bf00      	nop
 801bfdc:	40023800 	.word	0x40023800

0801bfe0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 801bfe0:	b580      	push	{r7, lr}
 801bfe2:	b082      	sub	sp, #8
 801bfe4:	af00      	add	r7, sp, #0
 801bfe6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 801bfe8:	687b      	ldr	r3, [r7, #4]
 801bfea:	2b00      	cmp	r3, #0
 801bfec:	d101      	bne.n	801bff2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 801bfee:	2301      	movs	r3, #1
 801bff0:	e07b      	b.n	801c0ea <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 801bff2:	687b      	ldr	r3, [r7, #4]
 801bff4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801bff6:	2b00      	cmp	r3, #0
 801bff8:	d108      	bne.n	801c00c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 801bffa:	687b      	ldr	r3, [r7, #4]
 801bffc:	685b      	ldr	r3, [r3, #4]
 801bffe:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 801c002:	d009      	beq.n	801c018 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 801c004:	687b      	ldr	r3, [r7, #4]
 801c006:	2200      	movs	r2, #0
 801c008:	61da      	str	r2, [r3, #28]
 801c00a:	e005      	b.n	801c018 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 801c00c:	687b      	ldr	r3, [r7, #4]
 801c00e:	2200      	movs	r2, #0
 801c010:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 801c012:	687b      	ldr	r3, [r7, #4]
 801c014:	2200      	movs	r2, #0
 801c016:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 801c018:	687b      	ldr	r3, [r7, #4]
 801c01a:	2200      	movs	r2, #0
 801c01c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 801c01e:	687b      	ldr	r3, [r7, #4]
 801c020:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 801c024:	b2db      	uxtb	r3, r3
 801c026:	2b00      	cmp	r3, #0
 801c028:	d106      	bne.n	801c038 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 801c02a:	687b      	ldr	r3, [r7, #4]
 801c02c:	2200      	movs	r2, #0
 801c02e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 801c032:	6878      	ldr	r0, [r7, #4]
 801c034:	f7fb ff3a 	bl	8017eac <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 801c038:	687b      	ldr	r3, [r7, #4]
 801c03a:	2202      	movs	r2, #2
 801c03c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 801c040:	687b      	ldr	r3, [r7, #4]
 801c042:	681b      	ldr	r3, [r3, #0]
 801c044:	681a      	ldr	r2, [r3, #0]
 801c046:	687b      	ldr	r3, [r7, #4]
 801c048:	681b      	ldr	r3, [r3, #0]
 801c04a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 801c04e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 801c050:	687b      	ldr	r3, [r7, #4]
 801c052:	685b      	ldr	r3, [r3, #4]
 801c054:	f403 7282 	and.w	r2, r3, #260	; 0x104
 801c058:	687b      	ldr	r3, [r7, #4]
 801c05a:	689b      	ldr	r3, [r3, #8]
 801c05c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 801c060:	431a      	orrs	r2, r3
 801c062:	687b      	ldr	r3, [r7, #4]
 801c064:	68db      	ldr	r3, [r3, #12]
 801c066:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 801c06a:	431a      	orrs	r2, r3
 801c06c:	687b      	ldr	r3, [r7, #4]
 801c06e:	691b      	ldr	r3, [r3, #16]
 801c070:	f003 0302 	and.w	r3, r3, #2
 801c074:	431a      	orrs	r2, r3
 801c076:	687b      	ldr	r3, [r7, #4]
 801c078:	695b      	ldr	r3, [r3, #20]
 801c07a:	f003 0301 	and.w	r3, r3, #1
 801c07e:	431a      	orrs	r2, r3
 801c080:	687b      	ldr	r3, [r7, #4]
 801c082:	699b      	ldr	r3, [r3, #24]
 801c084:	f403 7300 	and.w	r3, r3, #512	; 0x200
 801c088:	431a      	orrs	r2, r3
 801c08a:	687b      	ldr	r3, [r7, #4]
 801c08c:	69db      	ldr	r3, [r3, #28]
 801c08e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 801c092:	431a      	orrs	r2, r3
 801c094:	687b      	ldr	r3, [r7, #4]
 801c096:	6a1b      	ldr	r3, [r3, #32]
 801c098:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801c09c:	ea42 0103 	orr.w	r1, r2, r3
 801c0a0:	687b      	ldr	r3, [r7, #4]
 801c0a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801c0a4:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 801c0a8:	687b      	ldr	r3, [r7, #4]
 801c0aa:	681b      	ldr	r3, [r3, #0]
 801c0ac:	430a      	orrs	r2, r1
 801c0ae:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 801c0b0:	687b      	ldr	r3, [r7, #4]
 801c0b2:	699b      	ldr	r3, [r3, #24]
 801c0b4:	0c1b      	lsrs	r3, r3, #16
 801c0b6:	f003 0104 	and.w	r1, r3, #4
 801c0ba:	687b      	ldr	r3, [r7, #4]
 801c0bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801c0be:	f003 0210 	and.w	r2, r3, #16
 801c0c2:	687b      	ldr	r3, [r7, #4]
 801c0c4:	681b      	ldr	r3, [r3, #0]
 801c0c6:	430a      	orrs	r2, r1
 801c0c8:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 801c0ca:	687b      	ldr	r3, [r7, #4]
 801c0cc:	681b      	ldr	r3, [r3, #0]
 801c0ce:	69da      	ldr	r2, [r3, #28]
 801c0d0:	687b      	ldr	r3, [r7, #4]
 801c0d2:	681b      	ldr	r3, [r3, #0]
 801c0d4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 801c0d8:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 801c0da:	687b      	ldr	r3, [r7, #4]
 801c0dc:	2200      	movs	r2, #0
 801c0de:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 801c0e0:	687b      	ldr	r3, [r7, #4]
 801c0e2:	2201      	movs	r2, #1
 801c0e4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 801c0e8:	2300      	movs	r3, #0
}
 801c0ea:	4618      	mov	r0, r3
 801c0ec:	3708      	adds	r7, #8
 801c0ee:	46bd      	mov	sp, r7
 801c0f0:	bd80      	pop	{r7, pc}

0801c0f2 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 801c0f2:	b580      	push	{r7, lr}
 801c0f4:	b088      	sub	sp, #32
 801c0f6:	af00      	add	r7, sp, #0
 801c0f8:	60f8      	str	r0, [r7, #12]
 801c0fa:	60b9      	str	r1, [r7, #8]
 801c0fc:	603b      	str	r3, [r7, #0]
 801c0fe:	4613      	mov	r3, r2
 801c100:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 801c102:	2300      	movs	r3, #0
 801c104:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 801c106:	68fb      	ldr	r3, [r7, #12]
 801c108:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 801c10c:	2b01      	cmp	r3, #1
 801c10e:	d101      	bne.n	801c114 <HAL_SPI_Transmit+0x22>
 801c110:	2302      	movs	r3, #2
 801c112:	e126      	b.n	801c362 <HAL_SPI_Transmit+0x270>
 801c114:	68fb      	ldr	r3, [r7, #12]
 801c116:	2201      	movs	r2, #1
 801c118:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 801c11c:	f7fc f8fa 	bl	8018314 <HAL_GetTick>
 801c120:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 801c122:	88fb      	ldrh	r3, [r7, #6]
 801c124:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 801c126:	68fb      	ldr	r3, [r7, #12]
 801c128:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 801c12c:	b2db      	uxtb	r3, r3
 801c12e:	2b01      	cmp	r3, #1
 801c130:	d002      	beq.n	801c138 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 801c132:	2302      	movs	r3, #2
 801c134:	77fb      	strb	r3, [r7, #31]
    goto error;
 801c136:	e10b      	b.n	801c350 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 801c138:	68bb      	ldr	r3, [r7, #8]
 801c13a:	2b00      	cmp	r3, #0
 801c13c:	d002      	beq.n	801c144 <HAL_SPI_Transmit+0x52>
 801c13e:	88fb      	ldrh	r3, [r7, #6]
 801c140:	2b00      	cmp	r3, #0
 801c142:	d102      	bne.n	801c14a <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 801c144:	2301      	movs	r3, #1
 801c146:	77fb      	strb	r3, [r7, #31]
    goto error;
 801c148:	e102      	b.n	801c350 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 801c14a:	68fb      	ldr	r3, [r7, #12]
 801c14c:	2203      	movs	r2, #3
 801c14e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 801c152:	68fb      	ldr	r3, [r7, #12]
 801c154:	2200      	movs	r2, #0
 801c156:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 801c158:	68fb      	ldr	r3, [r7, #12]
 801c15a:	68ba      	ldr	r2, [r7, #8]
 801c15c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 801c15e:	68fb      	ldr	r3, [r7, #12]
 801c160:	88fa      	ldrh	r2, [r7, #6]
 801c162:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 801c164:	68fb      	ldr	r3, [r7, #12]
 801c166:	88fa      	ldrh	r2, [r7, #6]
 801c168:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 801c16a:	68fb      	ldr	r3, [r7, #12]
 801c16c:	2200      	movs	r2, #0
 801c16e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 801c170:	68fb      	ldr	r3, [r7, #12]
 801c172:	2200      	movs	r2, #0
 801c174:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 801c176:	68fb      	ldr	r3, [r7, #12]
 801c178:	2200      	movs	r2, #0
 801c17a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 801c17c:	68fb      	ldr	r3, [r7, #12]
 801c17e:	2200      	movs	r2, #0
 801c180:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 801c182:	68fb      	ldr	r3, [r7, #12]
 801c184:	2200      	movs	r2, #0
 801c186:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 801c188:	68fb      	ldr	r3, [r7, #12]
 801c18a:	689b      	ldr	r3, [r3, #8]
 801c18c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801c190:	d10f      	bne.n	801c1b2 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 801c192:	68fb      	ldr	r3, [r7, #12]
 801c194:	681b      	ldr	r3, [r3, #0]
 801c196:	681a      	ldr	r2, [r3, #0]
 801c198:	68fb      	ldr	r3, [r7, #12]
 801c19a:	681b      	ldr	r3, [r3, #0]
 801c19c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 801c1a0:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 801c1a2:	68fb      	ldr	r3, [r7, #12]
 801c1a4:	681b      	ldr	r3, [r3, #0]
 801c1a6:	681a      	ldr	r2, [r3, #0]
 801c1a8:	68fb      	ldr	r3, [r7, #12]
 801c1aa:	681b      	ldr	r3, [r3, #0]
 801c1ac:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 801c1b0:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 801c1b2:	68fb      	ldr	r3, [r7, #12]
 801c1b4:	681b      	ldr	r3, [r3, #0]
 801c1b6:	681b      	ldr	r3, [r3, #0]
 801c1b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801c1bc:	2b40      	cmp	r3, #64	; 0x40
 801c1be:	d007      	beq.n	801c1d0 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 801c1c0:	68fb      	ldr	r3, [r7, #12]
 801c1c2:	681b      	ldr	r3, [r3, #0]
 801c1c4:	681a      	ldr	r2, [r3, #0]
 801c1c6:	68fb      	ldr	r3, [r7, #12]
 801c1c8:	681b      	ldr	r3, [r3, #0]
 801c1ca:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 801c1ce:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 801c1d0:	68fb      	ldr	r3, [r7, #12]
 801c1d2:	68db      	ldr	r3, [r3, #12]
 801c1d4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 801c1d8:	d14b      	bne.n	801c272 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 801c1da:	68fb      	ldr	r3, [r7, #12]
 801c1dc:	685b      	ldr	r3, [r3, #4]
 801c1de:	2b00      	cmp	r3, #0
 801c1e0:	d002      	beq.n	801c1e8 <HAL_SPI_Transmit+0xf6>
 801c1e2:	8afb      	ldrh	r3, [r7, #22]
 801c1e4:	2b01      	cmp	r3, #1
 801c1e6:	d13e      	bne.n	801c266 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 801c1e8:	68fb      	ldr	r3, [r7, #12]
 801c1ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801c1ec:	881a      	ldrh	r2, [r3, #0]
 801c1ee:	68fb      	ldr	r3, [r7, #12]
 801c1f0:	681b      	ldr	r3, [r3, #0]
 801c1f2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 801c1f4:	68fb      	ldr	r3, [r7, #12]
 801c1f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801c1f8:	1c9a      	adds	r2, r3, #2
 801c1fa:	68fb      	ldr	r3, [r7, #12]
 801c1fc:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 801c1fe:	68fb      	ldr	r3, [r7, #12]
 801c200:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 801c202:	b29b      	uxth	r3, r3
 801c204:	3b01      	subs	r3, #1
 801c206:	b29a      	uxth	r2, r3
 801c208:	68fb      	ldr	r3, [r7, #12]
 801c20a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 801c20c:	e02b      	b.n	801c266 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 801c20e:	68fb      	ldr	r3, [r7, #12]
 801c210:	681b      	ldr	r3, [r3, #0]
 801c212:	689b      	ldr	r3, [r3, #8]
 801c214:	f003 0302 	and.w	r3, r3, #2
 801c218:	2b02      	cmp	r3, #2
 801c21a:	d112      	bne.n	801c242 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 801c21c:	68fb      	ldr	r3, [r7, #12]
 801c21e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801c220:	881a      	ldrh	r2, [r3, #0]
 801c222:	68fb      	ldr	r3, [r7, #12]
 801c224:	681b      	ldr	r3, [r3, #0]
 801c226:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 801c228:	68fb      	ldr	r3, [r7, #12]
 801c22a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801c22c:	1c9a      	adds	r2, r3, #2
 801c22e:	68fb      	ldr	r3, [r7, #12]
 801c230:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 801c232:	68fb      	ldr	r3, [r7, #12]
 801c234:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 801c236:	b29b      	uxth	r3, r3
 801c238:	3b01      	subs	r3, #1
 801c23a:	b29a      	uxth	r2, r3
 801c23c:	68fb      	ldr	r3, [r7, #12]
 801c23e:	86da      	strh	r2, [r3, #54]	; 0x36
 801c240:	e011      	b.n	801c266 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 801c242:	f7fc f867 	bl	8018314 <HAL_GetTick>
 801c246:	4602      	mov	r2, r0
 801c248:	69bb      	ldr	r3, [r7, #24]
 801c24a:	1ad3      	subs	r3, r2, r3
 801c24c:	683a      	ldr	r2, [r7, #0]
 801c24e:	429a      	cmp	r2, r3
 801c250:	d803      	bhi.n	801c25a <HAL_SPI_Transmit+0x168>
 801c252:	683b      	ldr	r3, [r7, #0]
 801c254:	f1b3 3fff 	cmp.w	r3, #4294967295
 801c258:	d102      	bne.n	801c260 <HAL_SPI_Transmit+0x16e>
 801c25a:	683b      	ldr	r3, [r7, #0]
 801c25c:	2b00      	cmp	r3, #0
 801c25e:	d102      	bne.n	801c266 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 801c260:	2303      	movs	r3, #3
 801c262:	77fb      	strb	r3, [r7, #31]
          goto error;
 801c264:	e074      	b.n	801c350 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 801c266:	68fb      	ldr	r3, [r7, #12]
 801c268:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 801c26a:	b29b      	uxth	r3, r3
 801c26c:	2b00      	cmp	r3, #0
 801c26e:	d1ce      	bne.n	801c20e <HAL_SPI_Transmit+0x11c>
 801c270:	e04c      	b.n	801c30c <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 801c272:	68fb      	ldr	r3, [r7, #12]
 801c274:	685b      	ldr	r3, [r3, #4]
 801c276:	2b00      	cmp	r3, #0
 801c278:	d002      	beq.n	801c280 <HAL_SPI_Transmit+0x18e>
 801c27a:	8afb      	ldrh	r3, [r7, #22]
 801c27c:	2b01      	cmp	r3, #1
 801c27e:	d140      	bne.n	801c302 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 801c280:	68fb      	ldr	r3, [r7, #12]
 801c282:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801c284:	68fb      	ldr	r3, [r7, #12]
 801c286:	681b      	ldr	r3, [r3, #0]
 801c288:	330c      	adds	r3, #12
 801c28a:	7812      	ldrb	r2, [r2, #0]
 801c28c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 801c28e:	68fb      	ldr	r3, [r7, #12]
 801c290:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801c292:	1c5a      	adds	r2, r3, #1
 801c294:	68fb      	ldr	r3, [r7, #12]
 801c296:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 801c298:	68fb      	ldr	r3, [r7, #12]
 801c29a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 801c29c:	b29b      	uxth	r3, r3
 801c29e:	3b01      	subs	r3, #1
 801c2a0:	b29a      	uxth	r2, r3
 801c2a2:	68fb      	ldr	r3, [r7, #12]
 801c2a4:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 801c2a6:	e02c      	b.n	801c302 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 801c2a8:	68fb      	ldr	r3, [r7, #12]
 801c2aa:	681b      	ldr	r3, [r3, #0]
 801c2ac:	689b      	ldr	r3, [r3, #8]
 801c2ae:	f003 0302 	and.w	r3, r3, #2
 801c2b2:	2b02      	cmp	r3, #2
 801c2b4:	d113      	bne.n	801c2de <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 801c2b6:	68fb      	ldr	r3, [r7, #12]
 801c2b8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801c2ba:	68fb      	ldr	r3, [r7, #12]
 801c2bc:	681b      	ldr	r3, [r3, #0]
 801c2be:	330c      	adds	r3, #12
 801c2c0:	7812      	ldrb	r2, [r2, #0]
 801c2c2:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 801c2c4:	68fb      	ldr	r3, [r7, #12]
 801c2c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801c2c8:	1c5a      	adds	r2, r3, #1
 801c2ca:	68fb      	ldr	r3, [r7, #12]
 801c2cc:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 801c2ce:	68fb      	ldr	r3, [r7, #12]
 801c2d0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 801c2d2:	b29b      	uxth	r3, r3
 801c2d4:	3b01      	subs	r3, #1
 801c2d6:	b29a      	uxth	r2, r3
 801c2d8:	68fb      	ldr	r3, [r7, #12]
 801c2da:	86da      	strh	r2, [r3, #54]	; 0x36
 801c2dc:	e011      	b.n	801c302 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 801c2de:	f7fc f819 	bl	8018314 <HAL_GetTick>
 801c2e2:	4602      	mov	r2, r0
 801c2e4:	69bb      	ldr	r3, [r7, #24]
 801c2e6:	1ad3      	subs	r3, r2, r3
 801c2e8:	683a      	ldr	r2, [r7, #0]
 801c2ea:	429a      	cmp	r2, r3
 801c2ec:	d803      	bhi.n	801c2f6 <HAL_SPI_Transmit+0x204>
 801c2ee:	683b      	ldr	r3, [r7, #0]
 801c2f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 801c2f4:	d102      	bne.n	801c2fc <HAL_SPI_Transmit+0x20a>
 801c2f6:	683b      	ldr	r3, [r7, #0]
 801c2f8:	2b00      	cmp	r3, #0
 801c2fa:	d102      	bne.n	801c302 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 801c2fc:	2303      	movs	r3, #3
 801c2fe:	77fb      	strb	r3, [r7, #31]
          goto error;
 801c300:	e026      	b.n	801c350 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 801c302:	68fb      	ldr	r3, [r7, #12]
 801c304:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 801c306:	b29b      	uxth	r3, r3
 801c308:	2b00      	cmp	r3, #0
 801c30a:	d1cd      	bne.n	801c2a8 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 801c30c:	69ba      	ldr	r2, [r7, #24]
 801c30e:	6839      	ldr	r1, [r7, #0]
 801c310:	68f8      	ldr	r0, [r7, #12]
 801c312:	f000 fcf7 	bl	801cd04 <SPI_EndRxTxTransaction>
 801c316:	4603      	mov	r3, r0
 801c318:	2b00      	cmp	r3, #0
 801c31a:	d002      	beq.n	801c322 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 801c31c:	68fb      	ldr	r3, [r7, #12]
 801c31e:	2220      	movs	r2, #32
 801c320:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 801c322:	68fb      	ldr	r3, [r7, #12]
 801c324:	689b      	ldr	r3, [r3, #8]
 801c326:	2b00      	cmp	r3, #0
 801c328:	d10a      	bne.n	801c340 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 801c32a:	2300      	movs	r3, #0
 801c32c:	613b      	str	r3, [r7, #16]
 801c32e:	68fb      	ldr	r3, [r7, #12]
 801c330:	681b      	ldr	r3, [r3, #0]
 801c332:	68db      	ldr	r3, [r3, #12]
 801c334:	613b      	str	r3, [r7, #16]
 801c336:	68fb      	ldr	r3, [r7, #12]
 801c338:	681b      	ldr	r3, [r3, #0]
 801c33a:	689b      	ldr	r3, [r3, #8]
 801c33c:	613b      	str	r3, [r7, #16]
 801c33e:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 801c340:	68fb      	ldr	r3, [r7, #12]
 801c342:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801c344:	2b00      	cmp	r3, #0
 801c346:	d002      	beq.n	801c34e <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 801c348:	2301      	movs	r3, #1
 801c34a:	77fb      	strb	r3, [r7, #31]
 801c34c:	e000      	b.n	801c350 <HAL_SPI_Transmit+0x25e>
  }

error:
 801c34e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 801c350:	68fb      	ldr	r3, [r7, #12]
 801c352:	2201      	movs	r2, #1
 801c354:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 801c358:	68fb      	ldr	r3, [r7, #12]
 801c35a:	2200      	movs	r2, #0
 801c35c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 801c360:	7ffb      	ldrb	r3, [r7, #31]
}
 801c362:	4618      	mov	r0, r3
 801c364:	3720      	adds	r7, #32
 801c366:	46bd      	mov	sp, r7
 801c368:	bd80      	pop	{r7, pc}

0801c36a <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 801c36a:	b580      	push	{r7, lr}
 801c36c:	b088      	sub	sp, #32
 801c36e:	af02      	add	r7, sp, #8
 801c370:	60f8      	str	r0, [r7, #12]
 801c372:	60b9      	str	r1, [r7, #8]
 801c374:	603b      	str	r3, [r7, #0]
 801c376:	4613      	mov	r3, r2
 801c378:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 801c37a:	2300      	movs	r3, #0
 801c37c:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 801c37e:	68fb      	ldr	r3, [r7, #12]
 801c380:	685b      	ldr	r3, [r3, #4]
 801c382:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 801c386:	d112      	bne.n	801c3ae <HAL_SPI_Receive+0x44>
 801c388:	68fb      	ldr	r3, [r7, #12]
 801c38a:	689b      	ldr	r3, [r3, #8]
 801c38c:	2b00      	cmp	r3, #0
 801c38e:	d10e      	bne.n	801c3ae <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 801c390:	68fb      	ldr	r3, [r7, #12]
 801c392:	2204      	movs	r2, #4
 801c394:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 801c398:	88fa      	ldrh	r2, [r7, #6]
 801c39a:	683b      	ldr	r3, [r7, #0]
 801c39c:	9300      	str	r3, [sp, #0]
 801c39e:	4613      	mov	r3, r2
 801c3a0:	68ba      	ldr	r2, [r7, #8]
 801c3a2:	68b9      	ldr	r1, [r7, #8]
 801c3a4:	68f8      	ldr	r0, [r7, #12]
 801c3a6:	f000 f8f1 	bl	801c58c <HAL_SPI_TransmitReceive>
 801c3aa:	4603      	mov	r3, r0
 801c3ac:	e0ea      	b.n	801c584 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 801c3ae:	68fb      	ldr	r3, [r7, #12]
 801c3b0:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 801c3b4:	2b01      	cmp	r3, #1
 801c3b6:	d101      	bne.n	801c3bc <HAL_SPI_Receive+0x52>
 801c3b8:	2302      	movs	r3, #2
 801c3ba:	e0e3      	b.n	801c584 <HAL_SPI_Receive+0x21a>
 801c3bc:	68fb      	ldr	r3, [r7, #12]
 801c3be:	2201      	movs	r2, #1
 801c3c0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 801c3c4:	f7fb ffa6 	bl	8018314 <HAL_GetTick>
 801c3c8:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 801c3ca:	68fb      	ldr	r3, [r7, #12]
 801c3cc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 801c3d0:	b2db      	uxtb	r3, r3
 801c3d2:	2b01      	cmp	r3, #1
 801c3d4:	d002      	beq.n	801c3dc <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 801c3d6:	2302      	movs	r3, #2
 801c3d8:	75fb      	strb	r3, [r7, #23]
    goto error;
 801c3da:	e0ca      	b.n	801c572 <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 801c3dc:	68bb      	ldr	r3, [r7, #8]
 801c3de:	2b00      	cmp	r3, #0
 801c3e0:	d002      	beq.n	801c3e8 <HAL_SPI_Receive+0x7e>
 801c3e2:	88fb      	ldrh	r3, [r7, #6]
 801c3e4:	2b00      	cmp	r3, #0
 801c3e6:	d102      	bne.n	801c3ee <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 801c3e8:	2301      	movs	r3, #1
 801c3ea:	75fb      	strb	r3, [r7, #23]
    goto error;
 801c3ec:	e0c1      	b.n	801c572 <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 801c3ee:	68fb      	ldr	r3, [r7, #12]
 801c3f0:	2204      	movs	r2, #4
 801c3f2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 801c3f6:	68fb      	ldr	r3, [r7, #12]
 801c3f8:	2200      	movs	r2, #0
 801c3fa:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 801c3fc:	68fb      	ldr	r3, [r7, #12]
 801c3fe:	68ba      	ldr	r2, [r7, #8]
 801c400:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 801c402:	68fb      	ldr	r3, [r7, #12]
 801c404:	88fa      	ldrh	r2, [r7, #6]
 801c406:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 801c408:	68fb      	ldr	r3, [r7, #12]
 801c40a:	88fa      	ldrh	r2, [r7, #6]
 801c40c:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 801c40e:	68fb      	ldr	r3, [r7, #12]
 801c410:	2200      	movs	r2, #0
 801c412:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 801c414:	68fb      	ldr	r3, [r7, #12]
 801c416:	2200      	movs	r2, #0
 801c418:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 801c41a:	68fb      	ldr	r3, [r7, #12]
 801c41c:	2200      	movs	r2, #0
 801c41e:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 801c420:	68fb      	ldr	r3, [r7, #12]
 801c422:	2200      	movs	r2, #0
 801c424:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 801c426:	68fb      	ldr	r3, [r7, #12]
 801c428:	2200      	movs	r2, #0
 801c42a:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 801c42c:	68fb      	ldr	r3, [r7, #12]
 801c42e:	689b      	ldr	r3, [r3, #8]
 801c430:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801c434:	d10f      	bne.n	801c456 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 801c436:	68fb      	ldr	r3, [r7, #12]
 801c438:	681b      	ldr	r3, [r3, #0]
 801c43a:	681a      	ldr	r2, [r3, #0]
 801c43c:	68fb      	ldr	r3, [r7, #12]
 801c43e:	681b      	ldr	r3, [r3, #0]
 801c440:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 801c444:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 801c446:	68fb      	ldr	r3, [r7, #12]
 801c448:	681b      	ldr	r3, [r3, #0]
 801c44a:	681a      	ldr	r2, [r3, #0]
 801c44c:	68fb      	ldr	r3, [r7, #12]
 801c44e:	681b      	ldr	r3, [r3, #0]
 801c450:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 801c454:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 801c456:	68fb      	ldr	r3, [r7, #12]
 801c458:	681b      	ldr	r3, [r3, #0]
 801c45a:	681b      	ldr	r3, [r3, #0]
 801c45c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801c460:	2b40      	cmp	r3, #64	; 0x40
 801c462:	d007      	beq.n	801c474 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 801c464:	68fb      	ldr	r3, [r7, #12]
 801c466:	681b      	ldr	r3, [r3, #0]
 801c468:	681a      	ldr	r2, [r3, #0]
 801c46a:	68fb      	ldr	r3, [r7, #12]
 801c46c:	681b      	ldr	r3, [r3, #0]
 801c46e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 801c472:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 801c474:	68fb      	ldr	r3, [r7, #12]
 801c476:	68db      	ldr	r3, [r3, #12]
 801c478:	2b00      	cmp	r3, #0
 801c47a:	d162      	bne.n	801c542 <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 801c47c:	e02e      	b.n	801c4dc <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 801c47e:	68fb      	ldr	r3, [r7, #12]
 801c480:	681b      	ldr	r3, [r3, #0]
 801c482:	689b      	ldr	r3, [r3, #8]
 801c484:	f003 0301 	and.w	r3, r3, #1
 801c488:	2b01      	cmp	r3, #1
 801c48a:	d115      	bne.n	801c4b8 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 801c48c:	68fb      	ldr	r3, [r7, #12]
 801c48e:	681b      	ldr	r3, [r3, #0]
 801c490:	f103 020c 	add.w	r2, r3, #12
 801c494:	68fb      	ldr	r3, [r7, #12]
 801c496:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801c498:	7812      	ldrb	r2, [r2, #0]
 801c49a:	b2d2      	uxtb	r2, r2
 801c49c:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 801c49e:	68fb      	ldr	r3, [r7, #12]
 801c4a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801c4a2:	1c5a      	adds	r2, r3, #1
 801c4a4:	68fb      	ldr	r3, [r7, #12]
 801c4a6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 801c4a8:	68fb      	ldr	r3, [r7, #12]
 801c4aa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801c4ac:	b29b      	uxth	r3, r3
 801c4ae:	3b01      	subs	r3, #1
 801c4b0:	b29a      	uxth	r2, r3
 801c4b2:	68fb      	ldr	r3, [r7, #12]
 801c4b4:	87da      	strh	r2, [r3, #62]	; 0x3e
 801c4b6:	e011      	b.n	801c4dc <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 801c4b8:	f7fb ff2c 	bl	8018314 <HAL_GetTick>
 801c4bc:	4602      	mov	r2, r0
 801c4be:	693b      	ldr	r3, [r7, #16]
 801c4c0:	1ad3      	subs	r3, r2, r3
 801c4c2:	683a      	ldr	r2, [r7, #0]
 801c4c4:	429a      	cmp	r2, r3
 801c4c6:	d803      	bhi.n	801c4d0 <HAL_SPI_Receive+0x166>
 801c4c8:	683b      	ldr	r3, [r7, #0]
 801c4ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 801c4ce:	d102      	bne.n	801c4d6 <HAL_SPI_Receive+0x16c>
 801c4d0:	683b      	ldr	r3, [r7, #0]
 801c4d2:	2b00      	cmp	r3, #0
 801c4d4:	d102      	bne.n	801c4dc <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 801c4d6:	2303      	movs	r3, #3
 801c4d8:	75fb      	strb	r3, [r7, #23]
          goto error;
 801c4da:	e04a      	b.n	801c572 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 801c4dc:	68fb      	ldr	r3, [r7, #12]
 801c4de:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801c4e0:	b29b      	uxth	r3, r3
 801c4e2:	2b00      	cmp	r3, #0
 801c4e4:	d1cb      	bne.n	801c47e <HAL_SPI_Receive+0x114>
 801c4e6:	e031      	b.n	801c54c <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 801c4e8:	68fb      	ldr	r3, [r7, #12]
 801c4ea:	681b      	ldr	r3, [r3, #0]
 801c4ec:	689b      	ldr	r3, [r3, #8]
 801c4ee:	f003 0301 	and.w	r3, r3, #1
 801c4f2:	2b01      	cmp	r3, #1
 801c4f4:	d113      	bne.n	801c51e <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 801c4f6:	68fb      	ldr	r3, [r7, #12]
 801c4f8:	681b      	ldr	r3, [r3, #0]
 801c4fa:	68da      	ldr	r2, [r3, #12]
 801c4fc:	68fb      	ldr	r3, [r7, #12]
 801c4fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801c500:	b292      	uxth	r2, r2
 801c502:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 801c504:	68fb      	ldr	r3, [r7, #12]
 801c506:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801c508:	1c9a      	adds	r2, r3, #2
 801c50a:	68fb      	ldr	r3, [r7, #12]
 801c50c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 801c50e:	68fb      	ldr	r3, [r7, #12]
 801c510:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801c512:	b29b      	uxth	r3, r3
 801c514:	3b01      	subs	r3, #1
 801c516:	b29a      	uxth	r2, r3
 801c518:	68fb      	ldr	r3, [r7, #12]
 801c51a:	87da      	strh	r2, [r3, #62]	; 0x3e
 801c51c:	e011      	b.n	801c542 <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 801c51e:	f7fb fef9 	bl	8018314 <HAL_GetTick>
 801c522:	4602      	mov	r2, r0
 801c524:	693b      	ldr	r3, [r7, #16]
 801c526:	1ad3      	subs	r3, r2, r3
 801c528:	683a      	ldr	r2, [r7, #0]
 801c52a:	429a      	cmp	r2, r3
 801c52c:	d803      	bhi.n	801c536 <HAL_SPI_Receive+0x1cc>
 801c52e:	683b      	ldr	r3, [r7, #0]
 801c530:	f1b3 3fff 	cmp.w	r3, #4294967295
 801c534:	d102      	bne.n	801c53c <HAL_SPI_Receive+0x1d2>
 801c536:	683b      	ldr	r3, [r7, #0]
 801c538:	2b00      	cmp	r3, #0
 801c53a:	d102      	bne.n	801c542 <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 801c53c:	2303      	movs	r3, #3
 801c53e:	75fb      	strb	r3, [r7, #23]
          goto error;
 801c540:	e017      	b.n	801c572 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 801c542:	68fb      	ldr	r3, [r7, #12]
 801c544:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801c546:	b29b      	uxth	r3, r3
 801c548:	2b00      	cmp	r3, #0
 801c54a:	d1cd      	bne.n	801c4e8 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 801c54c:	693a      	ldr	r2, [r7, #16]
 801c54e:	6839      	ldr	r1, [r7, #0]
 801c550:	68f8      	ldr	r0, [r7, #12]
 801c552:	f000 fb71 	bl	801cc38 <SPI_EndRxTransaction>
 801c556:	4603      	mov	r3, r0
 801c558:	2b00      	cmp	r3, #0
 801c55a:	d002      	beq.n	801c562 <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 801c55c:	68fb      	ldr	r3, [r7, #12]
 801c55e:	2220      	movs	r2, #32
 801c560:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 801c562:	68fb      	ldr	r3, [r7, #12]
 801c564:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801c566:	2b00      	cmp	r3, #0
 801c568:	d002      	beq.n	801c570 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 801c56a:	2301      	movs	r3, #1
 801c56c:	75fb      	strb	r3, [r7, #23]
 801c56e:	e000      	b.n	801c572 <HAL_SPI_Receive+0x208>
  }

error :
 801c570:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 801c572:	68fb      	ldr	r3, [r7, #12]
 801c574:	2201      	movs	r2, #1
 801c576:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 801c57a:	68fb      	ldr	r3, [r7, #12]
 801c57c:	2200      	movs	r2, #0
 801c57e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 801c582:	7dfb      	ldrb	r3, [r7, #23]
}
 801c584:	4618      	mov	r0, r3
 801c586:	3718      	adds	r7, #24
 801c588:	46bd      	mov	sp, r7
 801c58a:	bd80      	pop	{r7, pc}

0801c58c <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 801c58c:	b580      	push	{r7, lr}
 801c58e:	b08c      	sub	sp, #48	; 0x30
 801c590:	af00      	add	r7, sp, #0
 801c592:	60f8      	str	r0, [r7, #12]
 801c594:	60b9      	str	r1, [r7, #8]
 801c596:	607a      	str	r2, [r7, #4]
 801c598:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 801c59a:	2301      	movs	r3, #1
 801c59c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 801c59e:	2300      	movs	r3, #0
 801c5a0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 801c5a4:	68fb      	ldr	r3, [r7, #12]
 801c5a6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 801c5aa:	2b01      	cmp	r3, #1
 801c5ac:	d101      	bne.n	801c5b2 <HAL_SPI_TransmitReceive+0x26>
 801c5ae:	2302      	movs	r3, #2
 801c5b0:	e18a      	b.n	801c8c8 <HAL_SPI_TransmitReceive+0x33c>
 801c5b2:	68fb      	ldr	r3, [r7, #12]
 801c5b4:	2201      	movs	r2, #1
 801c5b6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 801c5ba:	f7fb feab 	bl	8018314 <HAL_GetTick>
 801c5be:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 801c5c0:	68fb      	ldr	r3, [r7, #12]
 801c5c2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 801c5c6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 801c5ca:	68fb      	ldr	r3, [r7, #12]
 801c5cc:	685b      	ldr	r3, [r3, #4]
 801c5ce:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 801c5d0:	887b      	ldrh	r3, [r7, #2]
 801c5d2:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 801c5d4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 801c5d8:	2b01      	cmp	r3, #1
 801c5da:	d00f      	beq.n	801c5fc <HAL_SPI_TransmitReceive+0x70>
 801c5dc:	69fb      	ldr	r3, [r7, #28]
 801c5de:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 801c5e2:	d107      	bne.n	801c5f4 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 801c5e4:	68fb      	ldr	r3, [r7, #12]
 801c5e6:	689b      	ldr	r3, [r3, #8]
 801c5e8:	2b00      	cmp	r3, #0
 801c5ea:	d103      	bne.n	801c5f4 <HAL_SPI_TransmitReceive+0x68>
 801c5ec:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 801c5f0:	2b04      	cmp	r3, #4
 801c5f2:	d003      	beq.n	801c5fc <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 801c5f4:	2302      	movs	r3, #2
 801c5f6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 801c5fa:	e15b      	b.n	801c8b4 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 801c5fc:	68bb      	ldr	r3, [r7, #8]
 801c5fe:	2b00      	cmp	r3, #0
 801c600:	d005      	beq.n	801c60e <HAL_SPI_TransmitReceive+0x82>
 801c602:	687b      	ldr	r3, [r7, #4]
 801c604:	2b00      	cmp	r3, #0
 801c606:	d002      	beq.n	801c60e <HAL_SPI_TransmitReceive+0x82>
 801c608:	887b      	ldrh	r3, [r7, #2]
 801c60a:	2b00      	cmp	r3, #0
 801c60c:	d103      	bne.n	801c616 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 801c60e:	2301      	movs	r3, #1
 801c610:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 801c614:	e14e      	b.n	801c8b4 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 801c616:	68fb      	ldr	r3, [r7, #12]
 801c618:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 801c61c:	b2db      	uxtb	r3, r3
 801c61e:	2b04      	cmp	r3, #4
 801c620:	d003      	beq.n	801c62a <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 801c622:	68fb      	ldr	r3, [r7, #12]
 801c624:	2205      	movs	r2, #5
 801c626:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 801c62a:	68fb      	ldr	r3, [r7, #12]
 801c62c:	2200      	movs	r2, #0
 801c62e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 801c630:	68fb      	ldr	r3, [r7, #12]
 801c632:	687a      	ldr	r2, [r7, #4]
 801c634:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 801c636:	68fb      	ldr	r3, [r7, #12]
 801c638:	887a      	ldrh	r2, [r7, #2]
 801c63a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 801c63c:	68fb      	ldr	r3, [r7, #12]
 801c63e:	887a      	ldrh	r2, [r7, #2]
 801c640:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 801c642:	68fb      	ldr	r3, [r7, #12]
 801c644:	68ba      	ldr	r2, [r7, #8]
 801c646:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 801c648:	68fb      	ldr	r3, [r7, #12]
 801c64a:	887a      	ldrh	r2, [r7, #2]
 801c64c:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 801c64e:	68fb      	ldr	r3, [r7, #12]
 801c650:	887a      	ldrh	r2, [r7, #2]
 801c652:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 801c654:	68fb      	ldr	r3, [r7, #12]
 801c656:	2200      	movs	r2, #0
 801c658:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 801c65a:	68fb      	ldr	r3, [r7, #12]
 801c65c:	2200      	movs	r2, #0
 801c65e:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 801c660:	68fb      	ldr	r3, [r7, #12]
 801c662:	681b      	ldr	r3, [r3, #0]
 801c664:	681b      	ldr	r3, [r3, #0]
 801c666:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801c66a:	2b40      	cmp	r3, #64	; 0x40
 801c66c:	d007      	beq.n	801c67e <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 801c66e:	68fb      	ldr	r3, [r7, #12]
 801c670:	681b      	ldr	r3, [r3, #0]
 801c672:	681a      	ldr	r2, [r3, #0]
 801c674:	68fb      	ldr	r3, [r7, #12]
 801c676:	681b      	ldr	r3, [r3, #0]
 801c678:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 801c67c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 801c67e:	68fb      	ldr	r3, [r7, #12]
 801c680:	68db      	ldr	r3, [r3, #12]
 801c682:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 801c686:	d178      	bne.n	801c77a <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 801c688:	68fb      	ldr	r3, [r7, #12]
 801c68a:	685b      	ldr	r3, [r3, #4]
 801c68c:	2b00      	cmp	r3, #0
 801c68e:	d002      	beq.n	801c696 <HAL_SPI_TransmitReceive+0x10a>
 801c690:	8b7b      	ldrh	r3, [r7, #26]
 801c692:	2b01      	cmp	r3, #1
 801c694:	d166      	bne.n	801c764 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 801c696:	68fb      	ldr	r3, [r7, #12]
 801c698:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801c69a:	881a      	ldrh	r2, [r3, #0]
 801c69c:	68fb      	ldr	r3, [r7, #12]
 801c69e:	681b      	ldr	r3, [r3, #0]
 801c6a0:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 801c6a2:	68fb      	ldr	r3, [r7, #12]
 801c6a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801c6a6:	1c9a      	adds	r2, r3, #2
 801c6a8:	68fb      	ldr	r3, [r7, #12]
 801c6aa:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 801c6ac:	68fb      	ldr	r3, [r7, #12]
 801c6ae:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 801c6b0:	b29b      	uxth	r3, r3
 801c6b2:	3b01      	subs	r3, #1
 801c6b4:	b29a      	uxth	r2, r3
 801c6b6:	68fb      	ldr	r3, [r7, #12]
 801c6b8:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 801c6ba:	e053      	b.n	801c764 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 801c6bc:	68fb      	ldr	r3, [r7, #12]
 801c6be:	681b      	ldr	r3, [r3, #0]
 801c6c0:	689b      	ldr	r3, [r3, #8]
 801c6c2:	f003 0302 	and.w	r3, r3, #2
 801c6c6:	2b02      	cmp	r3, #2
 801c6c8:	d11b      	bne.n	801c702 <HAL_SPI_TransmitReceive+0x176>
 801c6ca:	68fb      	ldr	r3, [r7, #12]
 801c6cc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 801c6ce:	b29b      	uxth	r3, r3
 801c6d0:	2b00      	cmp	r3, #0
 801c6d2:	d016      	beq.n	801c702 <HAL_SPI_TransmitReceive+0x176>
 801c6d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801c6d6:	2b01      	cmp	r3, #1
 801c6d8:	d113      	bne.n	801c702 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 801c6da:	68fb      	ldr	r3, [r7, #12]
 801c6dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801c6de:	881a      	ldrh	r2, [r3, #0]
 801c6e0:	68fb      	ldr	r3, [r7, #12]
 801c6e2:	681b      	ldr	r3, [r3, #0]
 801c6e4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 801c6e6:	68fb      	ldr	r3, [r7, #12]
 801c6e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801c6ea:	1c9a      	adds	r2, r3, #2
 801c6ec:	68fb      	ldr	r3, [r7, #12]
 801c6ee:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 801c6f0:	68fb      	ldr	r3, [r7, #12]
 801c6f2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 801c6f4:	b29b      	uxth	r3, r3
 801c6f6:	3b01      	subs	r3, #1
 801c6f8:	b29a      	uxth	r2, r3
 801c6fa:	68fb      	ldr	r3, [r7, #12]
 801c6fc:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 801c6fe:	2300      	movs	r3, #0
 801c700:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 801c702:	68fb      	ldr	r3, [r7, #12]
 801c704:	681b      	ldr	r3, [r3, #0]
 801c706:	689b      	ldr	r3, [r3, #8]
 801c708:	f003 0301 	and.w	r3, r3, #1
 801c70c:	2b01      	cmp	r3, #1
 801c70e:	d119      	bne.n	801c744 <HAL_SPI_TransmitReceive+0x1b8>
 801c710:	68fb      	ldr	r3, [r7, #12]
 801c712:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801c714:	b29b      	uxth	r3, r3
 801c716:	2b00      	cmp	r3, #0
 801c718:	d014      	beq.n	801c744 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 801c71a:	68fb      	ldr	r3, [r7, #12]
 801c71c:	681b      	ldr	r3, [r3, #0]
 801c71e:	68da      	ldr	r2, [r3, #12]
 801c720:	68fb      	ldr	r3, [r7, #12]
 801c722:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801c724:	b292      	uxth	r2, r2
 801c726:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 801c728:	68fb      	ldr	r3, [r7, #12]
 801c72a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801c72c:	1c9a      	adds	r2, r3, #2
 801c72e:	68fb      	ldr	r3, [r7, #12]
 801c730:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 801c732:	68fb      	ldr	r3, [r7, #12]
 801c734:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801c736:	b29b      	uxth	r3, r3
 801c738:	3b01      	subs	r3, #1
 801c73a:	b29a      	uxth	r2, r3
 801c73c:	68fb      	ldr	r3, [r7, #12]
 801c73e:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 801c740:	2301      	movs	r3, #1
 801c742:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 801c744:	f7fb fde6 	bl	8018314 <HAL_GetTick>
 801c748:	4602      	mov	r2, r0
 801c74a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c74c:	1ad3      	subs	r3, r2, r3
 801c74e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801c750:	429a      	cmp	r2, r3
 801c752:	d807      	bhi.n	801c764 <HAL_SPI_TransmitReceive+0x1d8>
 801c754:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801c756:	f1b3 3fff 	cmp.w	r3, #4294967295
 801c75a:	d003      	beq.n	801c764 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 801c75c:	2303      	movs	r3, #3
 801c75e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 801c762:	e0a7      	b.n	801c8b4 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 801c764:	68fb      	ldr	r3, [r7, #12]
 801c766:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 801c768:	b29b      	uxth	r3, r3
 801c76a:	2b00      	cmp	r3, #0
 801c76c:	d1a6      	bne.n	801c6bc <HAL_SPI_TransmitReceive+0x130>
 801c76e:	68fb      	ldr	r3, [r7, #12]
 801c770:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801c772:	b29b      	uxth	r3, r3
 801c774:	2b00      	cmp	r3, #0
 801c776:	d1a1      	bne.n	801c6bc <HAL_SPI_TransmitReceive+0x130>
 801c778:	e07c      	b.n	801c874 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 801c77a:	68fb      	ldr	r3, [r7, #12]
 801c77c:	685b      	ldr	r3, [r3, #4]
 801c77e:	2b00      	cmp	r3, #0
 801c780:	d002      	beq.n	801c788 <HAL_SPI_TransmitReceive+0x1fc>
 801c782:	8b7b      	ldrh	r3, [r7, #26]
 801c784:	2b01      	cmp	r3, #1
 801c786:	d16b      	bne.n	801c860 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 801c788:	68fb      	ldr	r3, [r7, #12]
 801c78a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801c78c:	68fb      	ldr	r3, [r7, #12]
 801c78e:	681b      	ldr	r3, [r3, #0]
 801c790:	330c      	adds	r3, #12
 801c792:	7812      	ldrb	r2, [r2, #0]
 801c794:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 801c796:	68fb      	ldr	r3, [r7, #12]
 801c798:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801c79a:	1c5a      	adds	r2, r3, #1
 801c79c:	68fb      	ldr	r3, [r7, #12]
 801c79e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 801c7a0:	68fb      	ldr	r3, [r7, #12]
 801c7a2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 801c7a4:	b29b      	uxth	r3, r3
 801c7a6:	3b01      	subs	r3, #1
 801c7a8:	b29a      	uxth	r2, r3
 801c7aa:	68fb      	ldr	r3, [r7, #12]
 801c7ac:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 801c7ae:	e057      	b.n	801c860 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 801c7b0:	68fb      	ldr	r3, [r7, #12]
 801c7b2:	681b      	ldr	r3, [r3, #0]
 801c7b4:	689b      	ldr	r3, [r3, #8]
 801c7b6:	f003 0302 	and.w	r3, r3, #2
 801c7ba:	2b02      	cmp	r3, #2
 801c7bc:	d11c      	bne.n	801c7f8 <HAL_SPI_TransmitReceive+0x26c>
 801c7be:	68fb      	ldr	r3, [r7, #12]
 801c7c0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 801c7c2:	b29b      	uxth	r3, r3
 801c7c4:	2b00      	cmp	r3, #0
 801c7c6:	d017      	beq.n	801c7f8 <HAL_SPI_TransmitReceive+0x26c>
 801c7c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801c7ca:	2b01      	cmp	r3, #1
 801c7cc:	d114      	bne.n	801c7f8 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 801c7ce:	68fb      	ldr	r3, [r7, #12]
 801c7d0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801c7d2:	68fb      	ldr	r3, [r7, #12]
 801c7d4:	681b      	ldr	r3, [r3, #0]
 801c7d6:	330c      	adds	r3, #12
 801c7d8:	7812      	ldrb	r2, [r2, #0]
 801c7da:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 801c7dc:	68fb      	ldr	r3, [r7, #12]
 801c7de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801c7e0:	1c5a      	adds	r2, r3, #1
 801c7e2:	68fb      	ldr	r3, [r7, #12]
 801c7e4:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 801c7e6:	68fb      	ldr	r3, [r7, #12]
 801c7e8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 801c7ea:	b29b      	uxth	r3, r3
 801c7ec:	3b01      	subs	r3, #1
 801c7ee:	b29a      	uxth	r2, r3
 801c7f0:	68fb      	ldr	r3, [r7, #12]
 801c7f2:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 801c7f4:	2300      	movs	r3, #0
 801c7f6:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 801c7f8:	68fb      	ldr	r3, [r7, #12]
 801c7fa:	681b      	ldr	r3, [r3, #0]
 801c7fc:	689b      	ldr	r3, [r3, #8]
 801c7fe:	f003 0301 	and.w	r3, r3, #1
 801c802:	2b01      	cmp	r3, #1
 801c804:	d119      	bne.n	801c83a <HAL_SPI_TransmitReceive+0x2ae>
 801c806:	68fb      	ldr	r3, [r7, #12]
 801c808:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801c80a:	b29b      	uxth	r3, r3
 801c80c:	2b00      	cmp	r3, #0
 801c80e:	d014      	beq.n	801c83a <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 801c810:	68fb      	ldr	r3, [r7, #12]
 801c812:	681b      	ldr	r3, [r3, #0]
 801c814:	68da      	ldr	r2, [r3, #12]
 801c816:	68fb      	ldr	r3, [r7, #12]
 801c818:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801c81a:	b2d2      	uxtb	r2, r2
 801c81c:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 801c81e:	68fb      	ldr	r3, [r7, #12]
 801c820:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801c822:	1c5a      	adds	r2, r3, #1
 801c824:	68fb      	ldr	r3, [r7, #12]
 801c826:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 801c828:	68fb      	ldr	r3, [r7, #12]
 801c82a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801c82c:	b29b      	uxth	r3, r3
 801c82e:	3b01      	subs	r3, #1
 801c830:	b29a      	uxth	r2, r3
 801c832:	68fb      	ldr	r3, [r7, #12]
 801c834:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 801c836:	2301      	movs	r3, #1
 801c838:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 801c83a:	f7fb fd6b 	bl	8018314 <HAL_GetTick>
 801c83e:	4602      	mov	r2, r0
 801c840:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c842:	1ad3      	subs	r3, r2, r3
 801c844:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801c846:	429a      	cmp	r2, r3
 801c848:	d803      	bhi.n	801c852 <HAL_SPI_TransmitReceive+0x2c6>
 801c84a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801c84c:	f1b3 3fff 	cmp.w	r3, #4294967295
 801c850:	d102      	bne.n	801c858 <HAL_SPI_TransmitReceive+0x2cc>
 801c852:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801c854:	2b00      	cmp	r3, #0
 801c856:	d103      	bne.n	801c860 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 801c858:	2303      	movs	r3, #3
 801c85a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 801c85e:	e029      	b.n	801c8b4 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 801c860:	68fb      	ldr	r3, [r7, #12]
 801c862:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 801c864:	b29b      	uxth	r3, r3
 801c866:	2b00      	cmp	r3, #0
 801c868:	d1a2      	bne.n	801c7b0 <HAL_SPI_TransmitReceive+0x224>
 801c86a:	68fb      	ldr	r3, [r7, #12]
 801c86c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801c86e:	b29b      	uxth	r3, r3
 801c870:	2b00      	cmp	r3, #0
 801c872:	d19d      	bne.n	801c7b0 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 801c874:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801c876:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 801c878:	68f8      	ldr	r0, [r7, #12]
 801c87a:	f000 fa43 	bl	801cd04 <SPI_EndRxTxTransaction>
 801c87e:	4603      	mov	r3, r0
 801c880:	2b00      	cmp	r3, #0
 801c882:	d006      	beq.n	801c892 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 801c884:	2301      	movs	r3, #1
 801c886:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 801c88a:	68fb      	ldr	r3, [r7, #12]
 801c88c:	2220      	movs	r2, #32
 801c88e:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 801c890:	e010      	b.n	801c8b4 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 801c892:	68fb      	ldr	r3, [r7, #12]
 801c894:	689b      	ldr	r3, [r3, #8]
 801c896:	2b00      	cmp	r3, #0
 801c898:	d10b      	bne.n	801c8b2 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 801c89a:	2300      	movs	r3, #0
 801c89c:	617b      	str	r3, [r7, #20]
 801c89e:	68fb      	ldr	r3, [r7, #12]
 801c8a0:	681b      	ldr	r3, [r3, #0]
 801c8a2:	68db      	ldr	r3, [r3, #12]
 801c8a4:	617b      	str	r3, [r7, #20]
 801c8a6:	68fb      	ldr	r3, [r7, #12]
 801c8a8:	681b      	ldr	r3, [r3, #0]
 801c8aa:	689b      	ldr	r3, [r3, #8]
 801c8ac:	617b      	str	r3, [r7, #20]
 801c8ae:	697b      	ldr	r3, [r7, #20]
 801c8b0:	e000      	b.n	801c8b4 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 801c8b2:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 801c8b4:	68fb      	ldr	r3, [r7, #12]
 801c8b6:	2201      	movs	r2, #1
 801c8b8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 801c8bc:	68fb      	ldr	r3, [r7, #12]
 801c8be:	2200      	movs	r2, #0
 801c8c0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 801c8c4:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 801c8c8:	4618      	mov	r0, r3
 801c8ca:	3730      	adds	r7, #48	; 0x30
 801c8cc:	46bd      	mov	sp, r7
 801c8ce:	bd80      	pop	{r7, pc}

0801c8d0 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 801c8d0:	b580      	push	{r7, lr}
 801c8d2:	b088      	sub	sp, #32
 801c8d4:	af00      	add	r7, sp, #0
 801c8d6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 801c8d8:	687b      	ldr	r3, [r7, #4]
 801c8da:	681b      	ldr	r3, [r3, #0]
 801c8dc:	685b      	ldr	r3, [r3, #4]
 801c8de:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 801c8e0:	687b      	ldr	r3, [r7, #4]
 801c8e2:	681b      	ldr	r3, [r3, #0]
 801c8e4:	689b      	ldr	r3, [r3, #8]
 801c8e6:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 801c8e8:	69bb      	ldr	r3, [r7, #24]
 801c8ea:	099b      	lsrs	r3, r3, #6
 801c8ec:	f003 0301 	and.w	r3, r3, #1
 801c8f0:	2b00      	cmp	r3, #0
 801c8f2:	d10f      	bne.n	801c914 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 801c8f4:	69bb      	ldr	r3, [r7, #24]
 801c8f6:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 801c8fa:	2b00      	cmp	r3, #0
 801c8fc:	d00a      	beq.n	801c914 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 801c8fe:	69fb      	ldr	r3, [r7, #28]
 801c900:	099b      	lsrs	r3, r3, #6
 801c902:	f003 0301 	and.w	r3, r3, #1
 801c906:	2b00      	cmp	r3, #0
 801c908:	d004      	beq.n	801c914 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 801c90a:	687b      	ldr	r3, [r7, #4]
 801c90c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801c90e:	6878      	ldr	r0, [r7, #4]
 801c910:	4798      	blx	r3
    return;
 801c912:	e0d7      	b.n	801cac4 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 801c914:	69bb      	ldr	r3, [r7, #24]
 801c916:	085b      	lsrs	r3, r3, #1
 801c918:	f003 0301 	and.w	r3, r3, #1
 801c91c:	2b00      	cmp	r3, #0
 801c91e:	d00a      	beq.n	801c936 <HAL_SPI_IRQHandler+0x66>
 801c920:	69fb      	ldr	r3, [r7, #28]
 801c922:	09db      	lsrs	r3, r3, #7
 801c924:	f003 0301 	and.w	r3, r3, #1
 801c928:	2b00      	cmp	r3, #0
 801c92a:	d004      	beq.n	801c936 <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 801c92c:	687b      	ldr	r3, [r7, #4]
 801c92e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801c930:	6878      	ldr	r0, [r7, #4]
 801c932:	4798      	blx	r3
    return;
 801c934:	e0c6      	b.n	801cac4 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 801c936:	69bb      	ldr	r3, [r7, #24]
 801c938:	095b      	lsrs	r3, r3, #5
 801c93a:	f003 0301 	and.w	r3, r3, #1
 801c93e:	2b00      	cmp	r3, #0
 801c940:	d10c      	bne.n	801c95c <HAL_SPI_IRQHandler+0x8c>
 801c942:	69bb      	ldr	r3, [r7, #24]
 801c944:	099b      	lsrs	r3, r3, #6
 801c946:	f003 0301 	and.w	r3, r3, #1
 801c94a:	2b00      	cmp	r3, #0
 801c94c:	d106      	bne.n	801c95c <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 801c94e:	69bb      	ldr	r3, [r7, #24]
 801c950:	0a1b      	lsrs	r3, r3, #8
 801c952:	f003 0301 	and.w	r3, r3, #1
 801c956:	2b00      	cmp	r3, #0
 801c958:	f000 80b4 	beq.w	801cac4 <HAL_SPI_IRQHandler+0x1f4>
 801c95c:	69fb      	ldr	r3, [r7, #28]
 801c95e:	095b      	lsrs	r3, r3, #5
 801c960:	f003 0301 	and.w	r3, r3, #1
 801c964:	2b00      	cmp	r3, #0
 801c966:	f000 80ad 	beq.w	801cac4 <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 801c96a:	69bb      	ldr	r3, [r7, #24]
 801c96c:	099b      	lsrs	r3, r3, #6
 801c96e:	f003 0301 	and.w	r3, r3, #1
 801c972:	2b00      	cmp	r3, #0
 801c974:	d023      	beq.n	801c9be <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 801c976:	687b      	ldr	r3, [r7, #4]
 801c978:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 801c97c:	b2db      	uxtb	r3, r3
 801c97e:	2b03      	cmp	r3, #3
 801c980:	d011      	beq.n	801c9a6 <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 801c982:	687b      	ldr	r3, [r7, #4]
 801c984:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801c986:	f043 0204 	orr.w	r2, r3, #4
 801c98a:	687b      	ldr	r3, [r7, #4]
 801c98c:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 801c98e:	2300      	movs	r3, #0
 801c990:	617b      	str	r3, [r7, #20]
 801c992:	687b      	ldr	r3, [r7, #4]
 801c994:	681b      	ldr	r3, [r3, #0]
 801c996:	68db      	ldr	r3, [r3, #12]
 801c998:	617b      	str	r3, [r7, #20]
 801c99a:	687b      	ldr	r3, [r7, #4]
 801c99c:	681b      	ldr	r3, [r3, #0]
 801c99e:	689b      	ldr	r3, [r3, #8]
 801c9a0:	617b      	str	r3, [r7, #20]
 801c9a2:	697b      	ldr	r3, [r7, #20]
 801c9a4:	e00b      	b.n	801c9be <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 801c9a6:	2300      	movs	r3, #0
 801c9a8:	613b      	str	r3, [r7, #16]
 801c9aa:	687b      	ldr	r3, [r7, #4]
 801c9ac:	681b      	ldr	r3, [r3, #0]
 801c9ae:	68db      	ldr	r3, [r3, #12]
 801c9b0:	613b      	str	r3, [r7, #16]
 801c9b2:	687b      	ldr	r3, [r7, #4]
 801c9b4:	681b      	ldr	r3, [r3, #0]
 801c9b6:	689b      	ldr	r3, [r3, #8]
 801c9b8:	613b      	str	r3, [r7, #16]
 801c9ba:	693b      	ldr	r3, [r7, #16]
        return;
 801c9bc:	e082      	b.n	801cac4 <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 801c9be:	69bb      	ldr	r3, [r7, #24]
 801c9c0:	095b      	lsrs	r3, r3, #5
 801c9c2:	f003 0301 	and.w	r3, r3, #1
 801c9c6:	2b00      	cmp	r3, #0
 801c9c8:	d014      	beq.n	801c9f4 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 801c9ca:	687b      	ldr	r3, [r7, #4]
 801c9cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801c9ce:	f043 0201 	orr.w	r2, r3, #1
 801c9d2:	687b      	ldr	r3, [r7, #4]
 801c9d4:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 801c9d6:	2300      	movs	r3, #0
 801c9d8:	60fb      	str	r3, [r7, #12]
 801c9da:	687b      	ldr	r3, [r7, #4]
 801c9dc:	681b      	ldr	r3, [r3, #0]
 801c9de:	689b      	ldr	r3, [r3, #8]
 801c9e0:	60fb      	str	r3, [r7, #12]
 801c9e2:	687b      	ldr	r3, [r7, #4]
 801c9e4:	681b      	ldr	r3, [r3, #0]
 801c9e6:	681a      	ldr	r2, [r3, #0]
 801c9e8:	687b      	ldr	r3, [r7, #4]
 801c9ea:	681b      	ldr	r3, [r3, #0]
 801c9ec:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 801c9f0:	601a      	str	r2, [r3, #0]
 801c9f2:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 801c9f4:	69bb      	ldr	r3, [r7, #24]
 801c9f6:	0a1b      	lsrs	r3, r3, #8
 801c9f8:	f003 0301 	and.w	r3, r3, #1
 801c9fc:	2b00      	cmp	r3, #0
 801c9fe:	d00c      	beq.n	801ca1a <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 801ca00:	687b      	ldr	r3, [r7, #4]
 801ca02:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801ca04:	f043 0208 	orr.w	r2, r3, #8
 801ca08:	687b      	ldr	r3, [r7, #4]
 801ca0a:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 801ca0c:	2300      	movs	r3, #0
 801ca0e:	60bb      	str	r3, [r7, #8]
 801ca10:	687b      	ldr	r3, [r7, #4]
 801ca12:	681b      	ldr	r3, [r3, #0]
 801ca14:	689b      	ldr	r3, [r3, #8]
 801ca16:	60bb      	str	r3, [r7, #8]
 801ca18:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 801ca1a:	687b      	ldr	r3, [r7, #4]
 801ca1c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801ca1e:	2b00      	cmp	r3, #0
 801ca20:	d04f      	beq.n	801cac2 <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 801ca22:	687b      	ldr	r3, [r7, #4]
 801ca24:	681b      	ldr	r3, [r3, #0]
 801ca26:	685a      	ldr	r2, [r3, #4]
 801ca28:	687b      	ldr	r3, [r7, #4]
 801ca2a:	681b      	ldr	r3, [r3, #0]
 801ca2c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 801ca30:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 801ca32:	687b      	ldr	r3, [r7, #4]
 801ca34:	2201      	movs	r2, #1
 801ca36:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 801ca3a:	69fb      	ldr	r3, [r7, #28]
 801ca3c:	f003 0302 	and.w	r3, r3, #2
 801ca40:	2b00      	cmp	r3, #0
 801ca42:	d104      	bne.n	801ca4e <HAL_SPI_IRQHandler+0x17e>
 801ca44:	69fb      	ldr	r3, [r7, #28]
 801ca46:	f003 0301 	and.w	r3, r3, #1
 801ca4a:	2b00      	cmp	r3, #0
 801ca4c:	d034      	beq.n	801cab8 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 801ca4e:	687b      	ldr	r3, [r7, #4]
 801ca50:	681b      	ldr	r3, [r3, #0]
 801ca52:	685a      	ldr	r2, [r3, #4]
 801ca54:	687b      	ldr	r3, [r7, #4]
 801ca56:	681b      	ldr	r3, [r3, #0]
 801ca58:	f022 0203 	bic.w	r2, r2, #3
 801ca5c:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 801ca5e:	687b      	ldr	r3, [r7, #4]
 801ca60:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801ca62:	2b00      	cmp	r3, #0
 801ca64:	d011      	beq.n	801ca8a <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 801ca66:	687b      	ldr	r3, [r7, #4]
 801ca68:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801ca6a:	4a18      	ldr	r2, [pc, #96]	; (801cacc <HAL_SPI_IRQHandler+0x1fc>)
 801ca6c:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 801ca6e:	687b      	ldr	r3, [r7, #4]
 801ca70:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801ca72:	4618      	mov	r0, r3
 801ca74:	f7fc f946 	bl	8018d04 <HAL_DMA_Abort_IT>
 801ca78:	4603      	mov	r3, r0
 801ca7a:	2b00      	cmp	r3, #0
 801ca7c:	d005      	beq.n	801ca8a <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 801ca7e:	687b      	ldr	r3, [r7, #4]
 801ca80:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801ca82:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 801ca86:	687b      	ldr	r3, [r7, #4]
 801ca88:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 801ca8a:	687b      	ldr	r3, [r7, #4]
 801ca8c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801ca8e:	2b00      	cmp	r3, #0
 801ca90:	d016      	beq.n	801cac0 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 801ca92:	687b      	ldr	r3, [r7, #4]
 801ca94:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801ca96:	4a0d      	ldr	r2, [pc, #52]	; (801cacc <HAL_SPI_IRQHandler+0x1fc>)
 801ca98:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 801ca9a:	687b      	ldr	r3, [r7, #4]
 801ca9c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801ca9e:	4618      	mov	r0, r3
 801caa0:	f7fc f930 	bl	8018d04 <HAL_DMA_Abort_IT>
 801caa4:	4603      	mov	r3, r0
 801caa6:	2b00      	cmp	r3, #0
 801caa8:	d00a      	beq.n	801cac0 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 801caaa:	687b      	ldr	r3, [r7, #4]
 801caac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801caae:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 801cab2:	687b      	ldr	r3, [r7, #4]
 801cab4:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 801cab6:	e003      	b.n	801cac0 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 801cab8:	6878      	ldr	r0, [r7, #4]
 801caba:	f000 f809 	bl	801cad0 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 801cabe:	e000      	b.n	801cac2 <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 801cac0:	bf00      	nop
    return;
 801cac2:	bf00      	nop
  }
}
 801cac4:	3720      	adds	r7, #32
 801cac6:	46bd      	mov	sp, r7
 801cac8:	bd80      	pop	{r7, pc}
 801caca:	bf00      	nop
 801cacc:	0801cb01 	.word	0x0801cb01

0801cad0 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 801cad0:	b480      	push	{r7}
 801cad2:	b083      	sub	sp, #12
 801cad4:	af00      	add	r7, sp, #0
 801cad6:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 801cad8:	bf00      	nop
 801cada:	370c      	adds	r7, #12
 801cadc:	46bd      	mov	sp, r7
 801cade:	f85d 7b04 	ldr.w	r7, [sp], #4
 801cae2:	4770      	bx	lr

0801cae4 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 801cae4:	b480      	push	{r7}
 801cae6:	b083      	sub	sp, #12
 801cae8:	af00      	add	r7, sp, #0
 801caea:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 801caec:	687b      	ldr	r3, [r7, #4]
 801caee:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 801caf2:	b2db      	uxtb	r3, r3
}
 801caf4:	4618      	mov	r0, r3
 801caf6:	370c      	adds	r7, #12
 801caf8:	46bd      	mov	sp, r7
 801cafa:	f85d 7b04 	ldr.w	r7, [sp], #4
 801cafe:	4770      	bx	lr

0801cb00 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 801cb00:	b580      	push	{r7, lr}
 801cb02:	b084      	sub	sp, #16
 801cb04:	af00      	add	r7, sp, #0
 801cb06:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 801cb08:	687b      	ldr	r3, [r7, #4]
 801cb0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801cb0c:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 801cb0e:	68fb      	ldr	r3, [r7, #12]
 801cb10:	2200      	movs	r2, #0
 801cb12:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 801cb14:	68fb      	ldr	r3, [r7, #12]
 801cb16:	2200      	movs	r2, #0
 801cb18:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 801cb1a:	68f8      	ldr	r0, [r7, #12]
 801cb1c:	f7ff ffd8 	bl	801cad0 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 801cb20:	bf00      	nop
 801cb22:	3710      	adds	r7, #16
 801cb24:	46bd      	mov	sp, r7
 801cb26:	bd80      	pop	{r7, pc}

0801cb28 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 801cb28:	b580      	push	{r7, lr}
 801cb2a:	b088      	sub	sp, #32
 801cb2c:	af00      	add	r7, sp, #0
 801cb2e:	60f8      	str	r0, [r7, #12]
 801cb30:	60b9      	str	r1, [r7, #8]
 801cb32:	603b      	str	r3, [r7, #0]
 801cb34:	4613      	mov	r3, r2
 801cb36:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 801cb38:	f7fb fbec 	bl	8018314 <HAL_GetTick>
 801cb3c:	4602      	mov	r2, r0
 801cb3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801cb40:	1a9b      	subs	r3, r3, r2
 801cb42:	683a      	ldr	r2, [r7, #0]
 801cb44:	4413      	add	r3, r2
 801cb46:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 801cb48:	f7fb fbe4 	bl	8018314 <HAL_GetTick>
 801cb4c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 801cb4e:	4b39      	ldr	r3, [pc, #228]	; (801cc34 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 801cb50:	681b      	ldr	r3, [r3, #0]
 801cb52:	015b      	lsls	r3, r3, #5
 801cb54:	0d1b      	lsrs	r3, r3, #20
 801cb56:	69fa      	ldr	r2, [r7, #28]
 801cb58:	fb02 f303 	mul.w	r3, r2, r3
 801cb5c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 801cb5e:	e054      	b.n	801cc0a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 801cb60:	683b      	ldr	r3, [r7, #0]
 801cb62:	f1b3 3fff 	cmp.w	r3, #4294967295
 801cb66:	d050      	beq.n	801cc0a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 801cb68:	f7fb fbd4 	bl	8018314 <HAL_GetTick>
 801cb6c:	4602      	mov	r2, r0
 801cb6e:	69bb      	ldr	r3, [r7, #24]
 801cb70:	1ad3      	subs	r3, r2, r3
 801cb72:	69fa      	ldr	r2, [r7, #28]
 801cb74:	429a      	cmp	r2, r3
 801cb76:	d902      	bls.n	801cb7e <SPI_WaitFlagStateUntilTimeout+0x56>
 801cb78:	69fb      	ldr	r3, [r7, #28]
 801cb7a:	2b00      	cmp	r3, #0
 801cb7c:	d13d      	bne.n	801cbfa <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 801cb7e:	68fb      	ldr	r3, [r7, #12]
 801cb80:	681b      	ldr	r3, [r3, #0]
 801cb82:	685a      	ldr	r2, [r3, #4]
 801cb84:	68fb      	ldr	r3, [r7, #12]
 801cb86:	681b      	ldr	r3, [r3, #0]
 801cb88:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 801cb8c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 801cb8e:	68fb      	ldr	r3, [r7, #12]
 801cb90:	685b      	ldr	r3, [r3, #4]
 801cb92:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 801cb96:	d111      	bne.n	801cbbc <SPI_WaitFlagStateUntilTimeout+0x94>
 801cb98:	68fb      	ldr	r3, [r7, #12]
 801cb9a:	689b      	ldr	r3, [r3, #8]
 801cb9c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801cba0:	d004      	beq.n	801cbac <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 801cba2:	68fb      	ldr	r3, [r7, #12]
 801cba4:	689b      	ldr	r3, [r3, #8]
 801cba6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801cbaa:	d107      	bne.n	801cbbc <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 801cbac:	68fb      	ldr	r3, [r7, #12]
 801cbae:	681b      	ldr	r3, [r3, #0]
 801cbb0:	681a      	ldr	r2, [r3, #0]
 801cbb2:	68fb      	ldr	r3, [r7, #12]
 801cbb4:	681b      	ldr	r3, [r3, #0]
 801cbb6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 801cbba:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 801cbbc:	68fb      	ldr	r3, [r7, #12]
 801cbbe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801cbc0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 801cbc4:	d10f      	bne.n	801cbe6 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 801cbc6:	68fb      	ldr	r3, [r7, #12]
 801cbc8:	681b      	ldr	r3, [r3, #0]
 801cbca:	681a      	ldr	r2, [r3, #0]
 801cbcc:	68fb      	ldr	r3, [r7, #12]
 801cbce:	681b      	ldr	r3, [r3, #0]
 801cbd0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 801cbd4:	601a      	str	r2, [r3, #0]
 801cbd6:	68fb      	ldr	r3, [r7, #12]
 801cbd8:	681b      	ldr	r3, [r3, #0]
 801cbda:	681a      	ldr	r2, [r3, #0]
 801cbdc:	68fb      	ldr	r3, [r7, #12]
 801cbde:	681b      	ldr	r3, [r3, #0]
 801cbe0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 801cbe4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 801cbe6:	68fb      	ldr	r3, [r7, #12]
 801cbe8:	2201      	movs	r2, #1
 801cbea:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 801cbee:	68fb      	ldr	r3, [r7, #12]
 801cbf0:	2200      	movs	r2, #0
 801cbf2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 801cbf6:	2303      	movs	r3, #3
 801cbf8:	e017      	b.n	801cc2a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 801cbfa:	697b      	ldr	r3, [r7, #20]
 801cbfc:	2b00      	cmp	r3, #0
 801cbfe:	d101      	bne.n	801cc04 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 801cc00:	2300      	movs	r3, #0
 801cc02:	61fb      	str	r3, [r7, #28]
      }
      count--;
 801cc04:	697b      	ldr	r3, [r7, #20]
 801cc06:	3b01      	subs	r3, #1
 801cc08:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 801cc0a:	68fb      	ldr	r3, [r7, #12]
 801cc0c:	681b      	ldr	r3, [r3, #0]
 801cc0e:	689a      	ldr	r2, [r3, #8]
 801cc10:	68bb      	ldr	r3, [r7, #8]
 801cc12:	4013      	ands	r3, r2
 801cc14:	68ba      	ldr	r2, [r7, #8]
 801cc16:	429a      	cmp	r2, r3
 801cc18:	bf0c      	ite	eq
 801cc1a:	2301      	moveq	r3, #1
 801cc1c:	2300      	movne	r3, #0
 801cc1e:	b2db      	uxtb	r3, r3
 801cc20:	461a      	mov	r2, r3
 801cc22:	79fb      	ldrb	r3, [r7, #7]
 801cc24:	429a      	cmp	r2, r3
 801cc26:	d19b      	bne.n	801cb60 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 801cc28:	2300      	movs	r3, #0
}
 801cc2a:	4618      	mov	r0, r3
 801cc2c:	3720      	adds	r7, #32
 801cc2e:	46bd      	mov	sp, r7
 801cc30:	bd80      	pop	{r7, pc}
 801cc32:	bf00      	nop
 801cc34:	20000588 	.word	0x20000588

0801cc38 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 801cc38:	b580      	push	{r7, lr}
 801cc3a:	b086      	sub	sp, #24
 801cc3c:	af02      	add	r7, sp, #8
 801cc3e:	60f8      	str	r0, [r7, #12]
 801cc40:	60b9      	str	r1, [r7, #8]
 801cc42:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 801cc44:	68fb      	ldr	r3, [r7, #12]
 801cc46:	685b      	ldr	r3, [r3, #4]
 801cc48:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 801cc4c:	d111      	bne.n	801cc72 <SPI_EndRxTransaction+0x3a>
 801cc4e:	68fb      	ldr	r3, [r7, #12]
 801cc50:	689b      	ldr	r3, [r3, #8]
 801cc52:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801cc56:	d004      	beq.n	801cc62 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 801cc58:	68fb      	ldr	r3, [r7, #12]
 801cc5a:	689b      	ldr	r3, [r3, #8]
 801cc5c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801cc60:	d107      	bne.n	801cc72 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 801cc62:	68fb      	ldr	r3, [r7, #12]
 801cc64:	681b      	ldr	r3, [r3, #0]
 801cc66:	681a      	ldr	r2, [r3, #0]
 801cc68:	68fb      	ldr	r3, [r7, #12]
 801cc6a:	681b      	ldr	r3, [r3, #0]
 801cc6c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 801cc70:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 801cc72:	68fb      	ldr	r3, [r7, #12]
 801cc74:	685b      	ldr	r3, [r3, #4]
 801cc76:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 801cc7a:	d12a      	bne.n	801ccd2 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 801cc7c:	68fb      	ldr	r3, [r7, #12]
 801cc7e:	689b      	ldr	r3, [r3, #8]
 801cc80:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801cc84:	d012      	beq.n	801ccac <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 801cc86:	687b      	ldr	r3, [r7, #4]
 801cc88:	9300      	str	r3, [sp, #0]
 801cc8a:	68bb      	ldr	r3, [r7, #8]
 801cc8c:	2200      	movs	r2, #0
 801cc8e:	2180      	movs	r1, #128	; 0x80
 801cc90:	68f8      	ldr	r0, [r7, #12]
 801cc92:	f7ff ff49 	bl	801cb28 <SPI_WaitFlagStateUntilTimeout>
 801cc96:	4603      	mov	r3, r0
 801cc98:	2b00      	cmp	r3, #0
 801cc9a:	d02d      	beq.n	801ccf8 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 801cc9c:	68fb      	ldr	r3, [r7, #12]
 801cc9e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801cca0:	f043 0220 	orr.w	r2, r3, #32
 801cca4:	68fb      	ldr	r3, [r7, #12]
 801cca6:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 801cca8:	2303      	movs	r3, #3
 801ccaa:	e026      	b.n	801ccfa <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 801ccac:	687b      	ldr	r3, [r7, #4]
 801ccae:	9300      	str	r3, [sp, #0]
 801ccb0:	68bb      	ldr	r3, [r7, #8]
 801ccb2:	2200      	movs	r2, #0
 801ccb4:	2101      	movs	r1, #1
 801ccb6:	68f8      	ldr	r0, [r7, #12]
 801ccb8:	f7ff ff36 	bl	801cb28 <SPI_WaitFlagStateUntilTimeout>
 801ccbc:	4603      	mov	r3, r0
 801ccbe:	2b00      	cmp	r3, #0
 801ccc0:	d01a      	beq.n	801ccf8 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 801ccc2:	68fb      	ldr	r3, [r7, #12]
 801ccc4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801ccc6:	f043 0220 	orr.w	r2, r3, #32
 801ccca:	68fb      	ldr	r3, [r7, #12]
 801cccc:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 801ccce:	2303      	movs	r3, #3
 801ccd0:	e013      	b.n	801ccfa <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 801ccd2:	687b      	ldr	r3, [r7, #4]
 801ccd4:	9300      	str	r3, [sp, #0]
 801ccd6:	68bb      	ldr	r3, [r7, #8]
 801ccd8:	2200      	movs	r2, #0
 801ccda:	2101      	movs	r1, #1
 801ccdc:	68f8      	ldr	r0, [r7, #12]
 801ccde:	f7ff ff23 	bl	801cb28 <SPI_WaitFlagStateUntilTimeout>
 801cce2:	4603      	mov	r3, r0
 801cce4:	2b00      	cmp	r3, #0
 801cce6:	d007      	beq.n	801ccf8 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 801cce8:	68fb      	ldr	r3, [r7, #12]
 801ccea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801ccec:	f043 0220 	orr.w	r2, r3, #32
 801ccf0:	68fb      	ldr	r3, [r7, #12]
 801ccf2:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 801ccf4:	2303      	movs	r3, #3
 801ccf6:	e000      	b.n	801ccfa <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 801ccf8:	2300      	movs	r3, #0
}
 801ccfa:	4618      	mov	r0, r3
 801ccfc:	3710      	adds	r7, #16
 801ccfe:	46bd      	mov	sp, r7
 801cd00:	bd80      	pop	{r7, pc}
	...

0801cd04 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 801cd04:	b580      	push	{r7, lr}
 801cd06:	b088      	sub	sp, #32
 801cd08:	af02      	add	r7, sp, #8
 801cd0a:	60f8      	str	r0, [r7, #12]
 801cd0c:	60b9      	str	r1, [r7, #8]
 801cd0e:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 801cd10:	4b1b      	ldr	r3, [pc, #108]	; (801cd80 <SPI_EndRxTxTransaction+0x7c>)
 801cd12:	681b      	ldr	r3, [r3, #0]
 801cd14:	4a1b      	ldr	r2, [pc, #108]	; (801cd84 <SPI_EndRxTxTransaction+0x80>)
 801cd16:	fba2 2303 	umull	r2, r3, r2, r3
 801cd1a:	0d5b      	lsrs	r3, r3, #21
 801cd1c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 801cd20:	fb02 f303 	mul.w	r3, r2, r3
 801cd24:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 801cd26:	68fb      	ldr	r3, [r7, #12]
 801cd28:	685b      	ldr	r3, [r3, #4]
 801cd2a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 801cd2e:	d112      	bne.n	801cd56 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 801cd30:	687b      	ldr	r3, [r7, #4]
 801cd32:	9300      	str	r3, [sp, #0]
 801cd34:	68bb      	ldr	r3, [r7, #8]
 801cd36:	2200      	movs	r2, #0
 801cd38:	2180      	movs	r1, #128	; 0x80
 801cd3a:	68f8      	ldr	r0, [r7, #12]
 801cd3c:	f7ff fef4 	bl	801cb28 <SPI_WaitFlagStateUntilTimeout>
 801cd40:	4603      	mov	r3, r0
 801cd42:	2b00      	cmp	r3, #0
 801cd44:	d016      	beq.n	801cd74 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 801cd46:	68fb      	ldr	r3, [r7, #12]
 801cd48:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801cd4a:	f043 0220 	orr.w	r2, r3, #32
 801cd4e:	68fb      	ldr	r3, [r7, #12]
 801cd50:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 801cd52:	2303      	movs	r3, #3
 801cd54:	e00f      	b.n	801cd76 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 801cd56:	697b      	ldr	r3, [r7, #20]
 801cd58:	2b00      	cmp	r3, #0
 801cd5a:	d00a      	beq.n	801cd72 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 801cd5c:	697b      	ldr	r3, [r7, #20]
 801cd5e:	3b01      	subs	r3, #1
 801cd60:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 801cd62:	68fb      	ldr	r3, [r7, #12]
 801cd64:	681b      	ldr	r3, [r3, #0]
 801cd66:	689b      	ldr	r3, [r3, #8]
 801cd68:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801cd6c:	2b80      	cmp	r3, #128	; 0x80
 801cd6e:	d0f2      	beq.n	801cd56 <SPI_EndRxTxTransaction+0x52>
 801cd70:	e000      	b.n	801cd74 <SPI_EndRxTxTransaction+0x70>
        break;
 801cd72:	bf00      	nop
  }

  return HAL_OK;
 801cd74:	2300      	movs	r3, #0
}
 801cd76:	4618      	mov	r0, r3
 801cd78:	3718      	adds	r7, #24
 801cd7a:	46bd      	mov	sp, r7
 801cd7c:	bd80      	pop	{r7, pc}
 801cd7e:	bf00      	nop
 801cd80:	20000588 	.word	0x20000588
 801cd84:	165e9f81 	.word	0x165e9f81

0801cd88 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 801cd88:	b580      	push	{r7, lr}
 801cd8a:	b082      	sub	sp, #8
 801cd8c:	af00      	add	r7, sp, #0
 801cd8e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 801cd90:	687b      	ldr	r3, [r7, #4]
 801cd92:	2b00      	cmp	r3, #0
 801cd94:	d101      	bne.n	801cd9a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 801cd96:	2301      	movs	r3, #1
 801cd98:	e041      	b.n	801ce1e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 801cd9a:	687b      	ldr	r3, [r7, #4]
 801cd9c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801cda0:	b2db      	uxtb	r3, r3
 801cda2:	2b00      	cmp	r3, #0
 801cda4:	d106      	bne.n	801cdb4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 801cda6:	687b      	ldr	r3, [r7, #4]
 801cda8:	2200      	movs	r2, #0
 801cdaa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 801cdae:	6878      	ldr	r0, [r7, #4]
 801cdb0:	f7fb f908 	bl	8017fc4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 801cdb4:	687b      	ldr	r3, [r7, #4]
 801cdb6:	2202      	movs	r2, #2
 801cdb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 801cdbc:	687b      	ldr	r3, [r7, #4]
 801cdbe:	681a      	ldr	r2, [r3, #0]
 801cdc0:	687b      	ldr	r3, [r7, #4]
 801cdc2:	3304      	adds	r3, #4
 801cdc4:	4619      	mov	r1, r3
 801cdc6:	4610      	mov	r0, r2
 801cdc8:	f000 faf2 	bl	801d3b0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 801cdcc:	687b      	ldr	r3, [r7, #4]
 801cdce:	2201      	movs	r2, #1
 801cdd0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 801cdd4:	687b      	ldr	r3, [r7, #4]
 801cdd6:	2201      	movs	r2, #1
 801cdd8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 801cddc:	687b      	ldr	r3, [r7, #4]
 801cdde:	2201      	movs	r2, #1
 801cde0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 801cde4:	687b      	ldr	r3, [r7, #4]
 801cde6:	2201      	movs	r2, #1
 801cde8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 801cdec:	687b      	ldr	r3, [r7, #4]
 801cdee:	2201      	movs	r2, #1
 801cdf0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 801cdf4:	687b      	ldr	r3, [r7, #4]
 801cdf6:	2201      	movs	r2, #1
 801cdf8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 801cdfc:	687b      	ldr	r3, [r7, #4]
 801cdfe:	2201      	movs	r2, #1
 801ce00:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 801ce04:	687b      	ldr	r3, [r7, #4]
 801ce06:	2201      	movs	r2, #1
 801ce08:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 801ce0c:	687b      	ldr	r3, [r7, #4]
 801ce0e:	2201      	movs	r2, #1
 801ce10:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 801ce14:	687b      	ldr	r3, [r7, #4]
 801ce16:	2201      	movs	r2, #1
 801ce18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 801ce1c:	2300      	movs	r3, #0
}
 801ce1e:	4618      	mov	r0, r3
 801ce20:	3708      	adds	r7, #8
 801ce22:	46bd      	mov	sp, r7
 801ce24:	bd80      	pop	{r7, pc}
	...

0801ce28 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 801ce28:	b480      	push	{r7}
 801ce2a:	b085      	sub	sp, #20
 801ce2c:	af00      	add	r7, sp, #0
 801ce2e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 801ce30:	687b      	ldr	r3, [r7, #4]
 801ce32:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801ce36:	b2db      	uxtb	r3, r3
 801ce38:	2b01      	cmp	r3, #1
 801ce3a:	d001      	beq.n	801ce40 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 801ce3c:	2301      	movs	r3, #1
 801ce3e:	e04e      	b.n	801cede <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 801ce40:	687b      	ldr	r3, [r7, #4]
 801ce42:	2202      	movs	r2, #2
 801ce44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 801ce48:	687b      	ldr	r3, [r7, #4]
 801ce4a:	681b      	ldr	r3, [r3, #0]
 801ce4c:	68da      	ldr	r2, [r3, #12]
 801ce4e:	687b      	ldr	r3, [r7, #4]
 801ce50:	681b      	ldr	r3, [r3, #0]
 801ce52:	f042 0201 	orr.w	r2, r2, #1
 801ce56:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 801ce58:	687b      	ldr	r3, [r7, #4]
 801ce5a:	681b      	ldr	r3, [r3, #0]
 801ce5c:	4a23      	ldr	r2, [pc, #140]	; (801ceec <HAL_TIM_Base_Start_IT+0xc4>)
 801ce5e:	4293      	cmp	r3, r2
 801ce60:	d022      	beq.n	801cea8 <HAL_TIM_Base_Start_IT+0x80>
 801ce62:	687b      	ldr	r3, [r7, #4]
 801ce64:	681b      	ldr	r3, [r3, #0]
 801ce66:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801ce6a:	d01d      	beq.n	801cea8 <HAL_TIM_Base_Start_IT+0x80>
 801ce6c:	687b      	ldr	r3, [r7, #4]
 801ce6e:	681b      	ldr	r3, [r3, #0]
 801ce70:	4a1f      	ldr	r2, [pc, #124]	; (801cef0 <HAL_TIM_Base_Start_IT+0xc8>)
 801ce72:	4293      	cmp	r3, r2
 801ce74:	d018      	beq.n	801cea8 <HAL_TIM_Base_Start_IT+0x80>
 801ce76:	687b      	ldr	r3, [r7, #4]
 801ce78:	681b      	ldr	r3, [r3, #0]
 801ce7a:	4a1e      	ldr	r2, [pc, #120]	; (801cef4 <HAL_TIM_Base_Start_IT+0xcc>)
 801ce7c:	4293      	cmp	r3, r2
 801ce7e:	d013      	beq.n	801cea8 <HAL_TIM_Base_Start_IT+0x80>
 801ce80:	687b      	ldr	r3, [r7, #4]
 801ce82:	681b      	ldr	r3, [r3, #0]
 801ce84:	4a1c      	ldr	r2, [pc, #112]	; (801cef8 <HAL_TIM_Base_Start_IT+0xd0>)
 801ce86:	4293      	cmp	r3, r2
 801ce88:	d00e      	beq.n	801cea8 <HAL_TIM_Base_Start_IT+0x80>
 801ce8a:	687b      	ldr	r3, [r7, #4]
 801ce8c:	681b      	ldr	r3, [r3, #0]
 801ce8e:	4a1b      	ldr	r2, [pc, #108]	; (801cefc <HAL_TIM_Base_Start_IT+0xd4>)
 801ce90:	4293      	cmp	r3, r2
 801ce92:	d009      	beq.n	801cea8 <HAL_TIM_Base_Start_IT+0x80>
 801ce94:	687b      	ldr	r3, [r7, #4]
 801ce96:	681b      	ldr	r3, [r3, #0]
 801ce98:	4a19      	ldr	r2, [pc, #100]	; (801cf00 <HAL_TIM_Base_Start_IT+0xd8>)
 801ce9a:	4293      	cmp	r3, r2
 801ce9c:	d004      	beq.n	801cea8 <HAL_TIM_Base_Start_IT+0x80>
 801ce9e:	687b      	ldr	r3, [r7, #4]
 801cea0:	681b      	ldr	r3, [r3, #0]
 801cea2:	4a18      	ldr	r2, [pc, #96]	; (801cf04 <HAL_TIM_Base_Start_IT+0xdc>)
 801cea4:	4293      	cmp	r3, r2
 801cea6:	d111      	bne.n	801cecc <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 801cea8:	687b      	ldr	r3, [r7, #4]
 801ceaa:	681b      	ldr	r3, [r3, #0]
 801ceac:	689b      	ldr	r3, [r3, #8]
 801ceae:	f003 0307 	and.w	r3, r3, #7
 801ceb2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801ceb4:	68fb      	ldr	r3, [r7, #12]
 801ceb6:	2b06      	cmp	r3, #6
 801ceb8:	d010      	beq.n	801cedc <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 801ceba:	687b      	ldr	r3, [r7, #4]
 801cebc:	681b      	ldr	r3, [r3, #0]
 801cebe:	681a      	ldr	r2, [r3, #0]
 801cec0:	687b      	ldr	r3, [r7, #4]
 801cec2:	681b      	ldr	r3, [r3, #0]
 801cec4:	f042 0201 	orr.w	r2, r2, #1
 801cec8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801ceca:	e007      	b.n	801cedc <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 801cecc:	687b      	ldr	r3, [r7, #4]
 801cece:	681b      	ldr	r3, [r3, #0]
 801ced0:	681a      	ldr	r2, [r3, #0]
 801ced2:	687b      	ldr	r3, [r7, #4]
 801ced4:	681b      	ldr	r3, [r3, #0]
 801ced6:	f042 0201 	orr.w	r2, r2, #1
 801ceda:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 801cedc:	2300      	movs	r3, #0
}
 801cede:	4618      	mov	r0, r3
 801cee0:	3714      	adds	r7, #20
 801cee2:	46bd      	mov	sp, r7
 801cee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 801cee8:	4770      	bx	lr
 801ceea:	bf00      	nop
 801ceec:	40010000 	.word	0x40010000
 801cef0:	40000400 	.word	0x40000400
 801cef4:	40000800 	.word	0x40000800
 801cef8:	40000c00 	.word	0x40000c00
 801cefc:	40010400 	.word	0x40010400
 801cf00:	40014000 	.word	0x40014000
 801cf04:	40001800 	.word	0x40001800

0801cf08 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 801cf08:	b580      	push	{r7, lr}
 801cf0a:	b082      	sub	sp, #8
 801cf0c:	af00      	add	r7, sp, #0
 801cf0e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 801cf10:	687b      	ldr	r3, [r7, #4]
 801cf12:	681b      	ldr	r3, [r3, #0]
 801cf14:	691b      	ldr	r3, [r3, #16]
 801cf16:	f003 0302 	and.w	r3, r3, #2
 801cf1a:	2b02      	cmp	r3, #2
 801cf1c:	d122      	bne.n	801cf64 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 801cf1e:	687b      	ldr	r3, [r7, #4]
 801cf20:	681b      	ldr	r3, [r3, #0]
 801cf22:	68db      	ldr	r3, [r3, #12]
 801cf24:	f003 0302 	and.w	r3, r3, #2
 801cf28:	2b02      	cmp	r3, #2
 801cf2a:	d11b      	bne.n	801cf64 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 801cf2c:	687b      	ldr	r3, [r7, #4]
 801cf2e:	681b      	ldr	r3, [r3, #0]
 801cf30:	f06f 0202 	mvn.w	r2, #2
 801cf34:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 801cf36:	687b      	ldr	r3, [r7, #4]
 801cf38:	2201      	movs	r2, #1
 801cf3a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 801cf3c:	687b      	ldr	r3, [r7, #4]
 801cf3e:	681b      	ldr	r3, [r3, #0]
 801cf40:	699b      	ldr	r3, [r3, #24]
 801cf42:	f003 0303 	and.w	r3, r3, #3
 801cf46:	2b00      	cmp	r3, #0
 801cf48:	d003      	beq.n	801cf52 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 801cf4a:	6878      	ldr	r0, [r7, #4]
 801cf4c:	f000 fa11 	bl	801d372 <HAL_TIM_IC_CaptureCallback>
 801cf50:	e005      	b.n	801cf5e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 801cf52:	6878      	ldr	r0, [r7, #4]
 801cf54:	f000 fa03 	bl	801d35e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 801cf58:	6878      	ldr	r0, [r7, #4]
 801cf5a:	f000 fa14 	bl	801d386 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 801cf5e:	687b      	ldr	r3, [r7, #4]
 801cf60:	2200      	movs	r2, #0
 801cf62:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 801cf64:	687b      	ldr	r3, [r7, #4]
 801cf66:	681b      	ldr	r3, [r3, #0]
 801cf68:	691b      	ldr	r3, [r3, #16]
 801cf6a:	f003 0304 	and.w	r3, r3, #4
 801cf6e:	2b04      	cmp	r3, #4
 801cf70:	d122      	bne.n	801cfb8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 801cf72:	687b      	ldr	r3, [r7, #4]
 801cf74:	681b      	ldr	r3, [r3, #0]
 801cf76:	68db      	ldr	r3, [r3, #12]
 801cf78:	f003 0304 	and.w	r3, r3, #4
 801cf7c:	2b04      	cmp	r3, #4
 801cf7e:	d11b      	bne.n	801cfb8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 801cf80:	687b      	ldr	r3, [r7, #4]
 801cf82:	681b      	ldr	r3, [r3, #0]
 801cf84:	f06f 0204 	mvn.w	r2, #4
 801cf88:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 801cf8a:	687b      	ldr	r3, [r7, #4]
 801cf8c:	2202      	movs	r2, #2
 801cf8e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 801cf90:	687b      	ldr	r3, [r7, #4]
 801cf92:	681b      	ldr	r3, [r3, #0]
 801cf94:	699b      	ldr	r3, [r3, #24]
 801cf96:	f403 7340 	and.w	r3, r3, #768	; 0x300
 801cf9a:	2b00      	cmp	r3, #0
 801cf9c:	d003      	beq.n	801cfa6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 801cf9e:	6878      	ldr	r0, [r7, #4]
 801cfa0:	f000 f9e7 	bl	801d372 <HAL_TIM_IC_CaptureCallback>
 801cfa4:	e005      	b.n	801cfb2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 801cfa6:	6878      	ldr	r0, [r7, #4]
 801cfa8:	f000 f9d9 	bl	801d35e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 801cfac:	6878      	ldr	r0, [r7, #4]
 801cfae:	f000 f9ea 	bl	801d386 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 801cfb2:	687b      	ldr	r3, [r7, #4]
 801cfb4:	2200      	movs	r2, #0
 801cfb6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 801cfb8:	687b      	ldr	r3, [r7, #4]
 801cfba:	681b      	ldr	r3, [r3, #0]
 801cfbc:	691b      	ldr	r3, [r3, #16]
 801cfbe:	f003 0308 	and.w	r3, r3, #8
 801cfc2:	2b08      	cmp	r3, #8
 801cfc4:	d122      	bne.n	801d00c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 801cfc6:	687b      	ldr	r3, [r7, #4]
 801cfc8:	681b      	ldr	r3, [r3, #0]
 801cfca:	68db      	ldr	r3, [r3, #12]
 801cfcc:	f003 0308 	and.w	r3, r3, #8
 801cfd0:	2b08      	cmp	r3, #8
 801cfd2:	d11b      	bne.n	801d00c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 801cfd4:	687b      	ldr	r3, [r7, #4]
 801cfd6:	681b      	ldr	r3, [r3, #0]
 801cfd8:	f06f 0208 	mvn.w	r2, #8
 801cfdc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 801cfde:	687b      	ldr	r3, [r7, #4]
 801cfe0:	2204      	movs	r2, #4
 801cfe2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 801cfe4:	687b      	ldr	r3, [r7, #4]
 801cfe6:	681b      	ldr	r3, [r3, #0]
 801cfe8:	69db      	ldr	r3, [r3, #28]
 801cfea:	f003 0303 	and.w	r3, r3, #3
 801cfee:	2b00      	cmp	r3, #0
 801cff0:	d003      	beq.n	801cffa <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 801cff2:	6878      	ldr	r0, [r7, #4]
 801cff4:	f000 f9bd 	bl	801d372 <HAL_TIM_IC_CaptureCallback>
 801cff8:	e005      	b.n	801d006 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 801cffa:	6878      	ldr	r0, [r7, #4]
 801cffc:	f000 f9af 	bl	801d35e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 801d000:	6878      	ldr	r0, [r7, #4]
 801d002:	f000 f9c0 	bl	801d386 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 801d006:	687b      	ldr	r3, [r7, #4]
 801d008:	2200      	movs	r2, #0
 801d00a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 801d00c:	687b      	ldr	r3, [r7, #4]
 801d00e:	681b      	ldr	r3, [r3, #0]
 801d010:	691b      	ldr	r3, [r3, #16]
 801d012:	f003 0310 	and.w	r3, r3, #16
 801d016:	2b10      	cmp	r3, #16
 801d018:	d122      	bne.n	801d060 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 801d01a:	687b      	ldr	r3, [r7, #4]
 801d01c:	681b      	ldr	r3, [r3, #0]
 801d01e:	68db      	ldr	r3, [r3, #12]
 801d020:	f003 0310 	and.w	r3, r3, #16
 801d024:	2b10      	cmp	r3, #16
 801d026:	d11b      	bne.n	801d060 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 801d028:	687b      	ldr	r3, [r7, #4]
 801d02a:	681b      	ldr	r3, [r3, #0]
 801d02c:	f06f 0210 	mvn.w	r2, #16
 801d030:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 801d032:	687b      	ldr	r3, [r7, #4]
 801d034:	2208      	movs	r2, #8
 801d036:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 801d038:	687b      	ldr	r3, [r7, #4]
 801d03a:	681b      	ldr	r3, [r3, #0]
 801d03c:	69db      	ldr	r3, [r3, #28]
 801d03e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 801d042:	2b00      	cmp	r3, #0
 801d044:	d003      	beq.n	801d04e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 801d046:	6878      	ldr	r0, [r7, #4]
 801d048:	f000 f993 	bl	801d372 <HAL_TIM_IC_CaptureCallback>
 801d04c:	e005      	b.n	801d05a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 801d04e:	6878      	ldr	r0, [r7, #4]
 801d050:	f000 f985 	bl	801d35e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 801d054:	6878      	ldr	r0, [r7, #4]
 801d056:	f000 f996 	bl	801d386 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 801d05a:	687b      	ldr	r3, [r7, #4]
 801d05c:	2200      	movs	r2, #0
 801d05e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 801d060:	687b      	ldr	r3, [r7, #4]
 801d062:	681b      	ldr	r3, [r3, #0]
 801d064:	691b      	ldr	r3, [r3, #16]
 801d066:	f003 0301 	and.w	r3, r3, #1
 801d06a:	2b01      	cmp	r3, #1
 801d06c:	d10e      	bne.n	801d08c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 801d06e:	687b      	ldr	r3, [r7, #4]
 801d070:	681b      	ldr	r3, [r3, #0]
 801d072:	68db      	ldr	r3, [r3, #12]
 801d074:	f003 0301 	and.w	r3, r3, #1
 801d078:	2b01      	cmp	r3, #1
 801d07a:	d107      	bne.n	801d08c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 801d07c:	687b      	ldr	r3, [r7, #4]
 801d07e:	681b      	ldr	r3, [r3, #0]
 801d080:	f06f 0201 	mvn.w	r2, #1
 801d084:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 801d086:	6878      	ldr	r0, [r7, #4]
 801d088:	f7fa fda8 	bl	8017bdc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 801d08c:	687b      	ldr	r3, [r7, #4]
 801d08e:	681b      	ldr	r3, [r3, #0]
 801d090:	691b      	ldr	r3, [r3, #16]
 801d092:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801d096:	2b80      	cmp	r3, #128	; 0x80
 801d098:	d10e      	bne.n	801d0b8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 801d09a:	687b      	ldr	r3, [r7, #4]
 801d09c:	681b      	ldr	r3, [r3, #0]
 801d09e:	68db      	ldr	r3, [r3, #12]
 801d0a0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801d0a4:	2b80      	cmp	r3, #128	; 0x80
 801d0a6:	d107      	bne.n	801d0b8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 801d0a8:	687b      	ldr	r3, [r7, #4]
 801d0aa:	681b      	ldr	r3, [r3, #0]
 801d0ac:	f06f 0280 	mvn.w	r2, #128	; 0x80
 801d0b0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 801d0b2:	6878      	ldr	r0, [r7, #4]
 801d0b4:	f000 fcec 	bl	801da90 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 801d0b8:	687b      	ldr	r3, [r7, #4]
 801d0ba:	681b      	ldr	r3, [r3, #0]
 801d0bc:	691b      	ldr	r3, [r3, #16]
 801d0be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801d0c2:	2b40      	cmp	r3, #64	; 0x40
 801d0c4:	d10e      	bne.n	801d0e4 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 801d0c6:	687b      	ldr	r3, [r7, #4]
 801d0c8:	681b      	ldr	r3, [r3, #0]
 801d0ca:	68db      	ldr	r3, [r3, #12]
 801d0cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801d0d0:	2b40      	cmp	r3, #64	; 0x40
 801d0d2:	d107      	bne.n	801d0e4 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 801d0d4:	687b      	ldr	r3, [r7, #4]
 801d0d6:	681b      	ldr	r3, [r3, #0]
 801d0d8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 801d0dc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 801d0de:	6878      	ldr	r0, [r7, #4]
 801d0e0:	f000 f95b 	bl	801d39a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 801d0e4:	687b      	ldr	r3, [r7, #4]
 801d0e6:	681b      	ldr	r3, [r3, #0]
 801d0e8:	691b      	ldr	r3, [r3, #16]
 801d0ea:	f003 0320 	and.w	r3, r3, #32
 801d0ee:	2b20      	cmp	r3, #32
 801d0f0:	d10e      	bne.n	801d110 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 801d0f2:	687b      	ldr	r3, [r7, #4]
 801d0f4:	681b      	ldr	r3, [r3, #0]
 801d0f6:	68db      	ldr	r3, [r3, #12]
 801d0f8:	f003 0320 	and.w	r3, r3, #32
 801d0fc:	2b20      	cmp	r3, #32
 801d0fe:	d107      	bne.n	801d110 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 801d100:	687b      	ldr	r3, [r7, #4]
 801d102:	681b      	ldr	r3, [r3, #0]
 801d104:	f06f 0220 	mvn.w	r2, #32
 801d108:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 801d10a:	6878      	ldr	r0, [r7, #4]
 801d10c:	f000 fcb6 	bl	801da7c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 801d110:	bf00      	nop
 801d112:	3708      	adds	r7, #8
 801d114:	46bd      	mov	sp, r7
 801d116:	bd80      	pop	{r7, pc}

0801d118 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 801d118:	b580      	push	{r7, lr}
 801d11a:	b086      	sub	sp, #24
 801d11c:	af00      	add	r7, sp, #0
 801d11e:	60f8      	str	r0, [r7, #12]
 801d120:	60b9      	str	r1, [r7, #8]
 801d122:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 801d124:	2300      	movs	r3, #0
 801d126:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 801d128:	68fb      	ldr	r3, [r7, #12]
 801d12a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 801d12e:	2b01      	cmp	r3, #1
 801d130:	d101      	bne.n	801d136 <HAL_TIM_OC_ConfigChannel+0x1e>
 801d132:	2302      	movs	r3, #2
 801d134:	e048      	b.n	801d1c8 <HAL_TIM_OC_ConfigChannel+0xb0>
 801d136:	68fb      	ldr	r3, [r7, #12]
 801d138:	2201      	movs	r2, #1
 801d13a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 801d13e:	687b      	ldr	r3, [r7, #4]
 801d140:	2b0c      	cmp	r3, #12
 801d142:	d839      	bhi.n	801d1b8 <HAL_TIM_OC_ConfigChannel+0xa0>
 801d144:	a201      	add	r2, pc, #4	; (adr r2, 801d14c <HAL_TIM_OC_ConfigChannel+0x34>)
 801d146:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801d14a:	bf00      	nop
 801d14c:	0801d181 	.word	0x0801d181
 801d150:	0801d1b9 	.word	0x0801d1b9
 801d154:	0801d1b9 	.word	0x0801d1b9
 801d158:	0801d1b9 	.word	0x0801d1b9
 801d15c:	0801d18f 	.word	0x0801d18f
 801d160:	0801d1b9 	.word	0x0801d1b9
 801d164:	0801d1b9 	.word	0x0801d1b9
 801d168:	0801d1b9 	.word	0x0801d1b9
 801d16c:	0801d19d 	.word	0x0801d19d
 801d170:	0801d1b9 	.word	0x0801d1b9
 801d174:	0801d1b9 	.word	0x0801d1b9
 801d178:	0801d1b9 	.word	0x0801d1b9
 801d17c:	0801d1ab 	.word	0x0801d1ab
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 801d180:	68fb      	ldr	r3, [r7, #12]
 801d182:	681b      	ldr	r3, [r3, #0]
 801d184:	68b9      	ldr	r1, [r7, #8]
 801d186:	4618      	mov	r0, r3
 801d188:	f000 f9b2 	bl	801d4f0 <TIM_OC1_SetConfig>
      break;
 801d18c:	e017      	b.n	801d1be <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 801d18e:	68fb      	ldr	r3, [r7, #12]
 801d190:	681b      	ldr	r3, [r3, #0]
 801d192:	68b9      	ldr	r1, [r7, #8]
 801d194:	4618      	mov	r0, r3
 801d196:	f000 fa1b 	bl	801d5d0 <TIM_OC2_SetConfig>
      break;
 801d19a:	e010      	b.n	801d1be <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 801d19c:	68fb      	ldr	r3, [r7, #12]
 801d19e:	681b      	ldr	r3, [r3, #0]
 801d1a0:	68b9      	ldr	r1, [r7, #8]
 801d1a2:	4618      	mov	r0, r3
 801d1a4:	f000 fa8a 	bl	801d6bc <TIM_OC3_SetConfig>
      break;
 801d1a8:	e009      	b.n	801d1be <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 801d1aa:	68fb      	ldr	r3, [r7, #12]
 801d1ac:	681b      	ldr	r3, [r3, #0]
 801d1ae:	68b9      	ldr	r1, [r7, #8]
 801d1b0:	4618      	mov	r0, r3
 801d1b2:	f000 faf7 	bl	801d7a4 <TIM_OC4_SetConfig>
      break;
 801d1b6:	e002      	b.n	801d1be <HAL_TIM_OC_ConfigChannel+0xa6>
    }

    default:
      status = HAL_ERROR;
 801d1b8:	2301      	movs	r3, #1
 801d1ba:	75fb      	strb	r3, [r7, #23]
      break;
 801d1bc:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 801d1be:	68fb      	ldr	r3, [r7, #12]
 801d1c0:	2200      	movs	r2, #0
 801d1c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 801d1c6:	7dfb      	ldrb	r3, [r7, #23]
}
 801d1c8:	4618      	mov	r0, r3
 801d1ca:	3718      	adds	r7, #24
 801d1cc:	46bd      	mov	sp, r7
 801d1ce:	bd80      	pop	{r7, pc}

0801d1d0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 801d1d0:	b580      	push	{r7, lr}
 801d1d2:	b084      	sub	sp, #16
 801d1d4:	af00      	add	r7, sp, #0
 801d1d6:	6078      	str	r0, [r7, #4]
 801d1d8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 801d1da:	2300      	movs	r3, #0
 801d1dc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 801d1de:	687b      	ldr	r3, [r7, #4]
 801d1e0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 801d1e4:	2b01      	cmp	r3, #1
 801d1e6:	d101      	bne.n	801d1ec <HAL_TIM_ConfigClockSource+0x1c>
 801d1e8:	2302      	movs	r3, #2
 801d1ea:	e0b4      	b.n	801d356 <HAL_TIM_ConfigClockSource+0x186>
 801d1ec:	687b      	ldr	r3, [r7, #4]
 801d1ee:	2201      	movs	r2, #1
 801d1f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 801d1f4:	687b      	ldr	r3, [r7, #4]
 801d1f6:	2202      	movs	r2, #2
 801d1f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 801d1fc:	687b      	ldr	r3, [r7, #4]
 801d1fe:	681b      	ldr	r3, [r3, #0]
 801d200:	689b      	ldr	r3, [r3, #8]
 801d202:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 801d204:	68bb      	ldr	r3, [r7, #8]
 801d206:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 801d20a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 801d20c:	68bb      	ldr	r3, [r7, #8]
 801d20e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 801d212:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 801d214:	687b      	ldr	r3, [r7, #4]
 801d216:	681b      	ldr	r3, [r3, #0]
 801d218:	68ba      	ldr	r2, [r7, #8]
 801d21a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 801d21c:	683b      	ldr	r3, [r7, #0]
 801d21e:	681b      	ldr	r3, [r3, #0]
 801d220:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 801d224:	d03e      	beq.n	801d2a4 <HAL_TIM_ConfigClockSource+0xd4>
 801d226:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 801d22a:	f200 8087 	bhi.w	801d33c <HAL_TIM_ConfigClockSource+0x16c>
 801d22e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801d232:	f000 8086 	beq.w	801d342 <HAL_TIM_ConfigClockSource+0x172>
 801d236:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801d23a:	d87f      	bhi.n	801d33c <HAL_TIM_ConfigClockSource+0x16c>
 801d23c:	2b70      	cmp	r3, #112	; 0x70
 801d23e:	d01a      	beq.n	801d276 <HAL_TIM_ConfigClockSource+0xa6>
 801d240:	2b70      	cmp	r3, #112	; 0x70
 801d242:	d87b      	bhi.n	801d33c <HAL_TIM_ConfigClockSource+0x16c>
 801d244:	2b60      	cmp	r3, #96	; 0x60
 801d246:	d050      	beq.n	801d2ea <HAL_TIM_ConfigClockSource+0x11a>
 801d248:	2b60      	cmp	r3, #96	; 0x60
 801d24a:	d877      	bhi.n	801d33c <HAL_TIM_ConfigClockSource+0x16c>
 801d24c:	2b50      	cmp	r3, #80	; 0x50
 801d24e:	d03c      	beq.n	801d2ca <HAL_TIM_ConfigClockSource+0xfa>
 801d250:	2b50      	cmp	r3, #80	; 0x50
 801d252:	d873      	bhi.n	801d33c <HAL_TIM_ConfigClockSource+0x16c>
 801d254:	2b40      	cmp	r3, #64	; 0x40
 801d256:	d058      	beq.n	801d30a <HAL_TIM_ConfigClockSource+0x13a>
 801d258:	2b40      	cmp	r3, #64	; 0x40
 801d25a:	d86f      	bhi.n	801d33c <HAL_TIM_ConfigClockSource+0x16c>
 801d25c:	2b30      	cmp	r3, #48	; 0x30
 801d25e:	d064      	beq.n	801d32a <HAL_TIM_ConfigClockSource+0x15a>
 801d260:	2b30      	cmp	r3, #48	; 0x30
 801d262:	d86b      	bhi.n	801d33c <HAL_TIM_ConfigClockSource+0x16c>
 801d264:	2b20      	cmp	r3, #32
 801d266:	d060      	beq.n	801d32a <HAL_TIM_ConfigClockSource+0x15a>
 801d268:	2b20      	cmp	r3, #32
 801d26a:	d867      	bhi.n	801d33c <HAL_TIM_ConfigClockSource+0x16c>
 801d26c:	2b00      	cmp	r3, #0
 801d26e:	d05c      	beq.n	801d32a <HAL_TIM_ConfigClockSource+0x15a>
 801d270:	2b10      	cmp	r3, #16
 801d272:	d05a      	beq.n	801d32a <HAL_TIM_ConfigClockSource+0x15a>
 801d274:	e062      	b.n	801d33c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 801d276:	687b      	ldr	r3, [r7, #4]
 801d278:	6818      	ldr	r0, [r3, #0]
 801d27a:	683b      	ldr	r3, [r7, #0]
 801d27c:	6899      	ldr	r1, [r3, #8]
 801d27e:	683b      	ldr	r3, [r7, #0]
 801d280:	685a      	ldr	r2, [r3, #4]
 801d282:	683b      	ldr	r3, [r7, #0]
 801d284:	68db      	ldr	r3, [r3, #12]
 801d286:	f000 fb5d 	bl	801d944 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 801d28a:	687b      	ldr	r3, [r7, #4]
 801d28c:	681b      	ldr	r3, [r3, #0]
 801d28e:	689b      	ldr	r3, [r3, #8]
 801d290:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 801d292:	68bb      	ldr	r3, [r7, #8]
 801d294:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 801d298:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 801d29a:	687b      	ldr	r3, [r7, #4]
 801d29c:	681b      	ldr	r3, [r3, #0]
 801d29e:	68ba      	ldr	r2, [r7, #8]
 801d2a0:	609a      	str	r2, [r3, #8]
      break;
 801d2a2:	e04f      	b.n	801d344 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 801d2a4:	687b      	ldr	r3, [r7, #4]
 801d2a6:	6818      	ldr	r0, [r3, #0]
 801d2a8:	683b      	ldr	r3, [r7, #0]
 801d2aa:	6899      	ldr	r1, [r3, #8]
 801d2ac:	683b      	ldr	r3, [r7, #0]
 801d2ae:	685a      	ldr	r2, [r3, #4]
 801d2b0:	683b      	ldr	r3, [r7, #0]
 801d2b2:	68db      	ldr	r3, [r3, #12]
 801d2b4:	f000 fb46 	bl	801d944 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 801d2b8:	687b      	ldr	r3, [r7, #4]
 801d2ba:	681b      	ldr	r3, [r3, #0]
 801d2bc:	689a      	ldr	r2, [r3, #8]
 801d2be:	687b      	ldr	r3, [r7, #4]
 801d2c0:	681b      	ldr	r3, [r3, #0]
 801d2c2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 801d2c6:	609a      	str	r2, [r3, #8]
      break;
 801d2c8:	e03c      	b.n	801d344 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 801d2ca:	687b      	ldr	r3, [r7, #4]
 801d2cc:	6818      	ldr	r0, [r3, #0]
 801d2ce:	683b      	ldr	r3, [r7, #0]
 801d2d0:	6859      	ldr	r1, [r3, #4]
 801d2d2:	683b      	ldr	r3, [r7, #0]
 801d2d4:	68db      	ldr	r3, [r3, #12]
 801d2d6:	461a      	mov	r2, r3
 801d2d8:	f000 faba 	bl	801d850 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 801d2dc:	687b      	ldr	r3, [r7, #4]
 801d2de:	681b      	ldr	r3, [r3, #0]
 801d2e0:	2150      	movs	r1, #80	; 0x50
 801d2e2:	4618      	mov	r0, r3
 801d2e4:	f000 fb13 	bl	801d90e <TIM_ITRx_SetConfig>
      break;
 801d2e8:	e02c      	b.n	801d344 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 801d2ea:	687b      	ldr	r3, [r7, #4]
 801d2ec:	6818      	ldr	r0, [r3, #0]
 801d2ee:	683b      	ldr	r3, [r7, #0]
 801d2f0:	6859      	ldr	r1, [r3, #4]
 801d2f2:	683b      	ldr	r3, [r7, #0]
 801d2f4:	68db      	ldr	r3, [r3, #12]
 801d2f6:	461a      	mov	r2, r3
 801d2f8:	f000 fad9 	bl	801d8ae <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 801d2fc:	687b      	ldr	r3, [r7, #4]
 801d2fe:	681b      	ldr	r3, [r3, #0]
 801d300:	2160      	movs	r1, #96	; 0x60
 801d302:	4618      	mov	r0, r3
 801d304:	f000 fb03 	bl	801d90e <TIM_ITRx_SetConfig>
      break;
 801d308:	e01c      	b.n	801d344 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 801d30a:	687b      	ldr	r3, [r7, #4]
 801d30c:	6818      	ldr	r0, [r3, #0]
 801d30e:	683b      	ldr	r3, [r7, #0]
 801d310:	6859      	ldr	r1, [r3, #4]
 801d312:	683b      	ldr	r3, [r7, #0]
 801d314:	68db      	ldr	r3, [r3, #12]
 801d316:	461a      	mov	r2, r3
 801d318:	f000 fa9a 	bl	801d850 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 801d31c:	687b      	ldr	r3, [r7, #4]
 801d31e:	681b      	ldr	r3, [r3, #0]
 801d320:	2140      	movs	r1, #64	; 0x40
 801d322:	4618      	mov	r0, r3
 801d324:	f000 faf3 	bl	801d90e <TIM_ITRx_SetConfig>
      break;
 801d328:	e00c      	b.n	801d344 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 801d32a:	687b      	ldr	r3, [r7, #4]
 801d32c:	681a      	ldr	r2, [r3, #0]
 801d32e:	683b      	ldr	r3, [r7, #0]
 801d330:	681b      	ldr	r3, [r3, #0]
 801d332:	4619      	mov	r1, r3
 801d334:	4610      	mov	r0, r2
 801d336:	f000 faea 	bl	801d90e <TIM_ITRx_SetConfig>
      break;
 801d33a:	e003      	b.n	801d344 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 801d33c:	2301      	movs	r3, #1
 801d33e:	73fb      	strb	r3, [r7, #15]
      break;
 801d340:	e000      	b.n	801d344 <HAL_TIM_ConfigClockSource+0x174>
      break;
 801d342:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 801d344:	687b      	ldr	r3, [r7, #4]
 801d346:	2201      	movs	r2, #1
 801d348:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 801d34c:	687b      	ldr	r3, [r7, #4]
 801d34e:	2200      	movs	r2, #0
 801d350:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 801d354:	7bfb      	ldrb	r3, [r7, #15]
}
 801d356:	4618      	mov	r0, r3
 801d358:	3710      	adds	r7, #16
 801d35a:	46bd      	mov	sp, r7
 801d35c:	bd80      	pop	{r7, pc}

0801d35e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 801d35e:	b480      	push	{r7}
 801d360:	b083      	sub	sp, #12
 801d362:	af00      	add	r7, sp, #0
 801d364:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 801d366:	bf00      	nop
 801d368:	370c      	adds	r7, #12
 801d36a:	46bd      	mov	sp, r7
 801d36c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d370:	4770      	bx	lr

0801d372 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 801d372:	b480      	push	{r7}
 801d374:	b083      	sub	sp, #12
 801d376:	af00      	add	r7, sp, #0
 801d378:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 801d37a:	bf00      	nop
 801d37c:	370c      	adds	r7, #12
 801d37e:	46bd      	mov	sp, r7
 801d380:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d384:	4770      	bx	lr

0801d386 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 801d386:	b480      	push	{r7}
 801d388:	b083      	sub	sp, #12
 801d38a:	af00      	add	r7, sp, #0
 801d38c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 801d38e:	bf00      	nop
 801d390:	370c      	adds	r7, #12
 801d392:	46bd      	mov	sp, r7
 801d394:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d398:	4770      	bx	lr

0801d39a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 801d39a:	b480      	push	{r7}
 801d39c:	b083      	sub	sp, #12
 801d39e:	af00      	add	r7, sp, #0
 801d3a0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 801d3a2:	bf00      	nop
 801d3a4:	370c      	adds	r7, #12
 801d3a6:	46bd      	mov	sp, r7
 801d3a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d3ac:	4770      	bx	lr
	...

0801d3b0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 801d3b0:	b480      	push	{r7}
 801d3b2:	b085      	sub	sp, #20
 801d3b4:	af00      	add	r7, sp, #0
 801d3b6:	6078      	str	r0, [r7, #4]
 801d3b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 801d3ba:	687b      	ldr	r3, [r7, #4]
 801d3bc:	681b      	ldr	r3, [r3, #0]
 801d3be:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 801d3c0:	687b      	ldr	r3, [r7, #4]
 801d3c2:	4a40      	ldr	r2, [pc, #256]	; (801d4c4 <TIM_Base_SetConfig+0x114>)
 801d3c4:	4293      	cmp	r3, r2
 801d3c6:	d013      	beq.n	801d3f0 <TIM_Base_SetConfig+0x40>
 801d3c8:	687b      	ldr	r3, [r7, #4]
 801d3ca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801d3ce:	d00f      	beq.n	801d3f0 <TIM_Base_SetConfig+0x40>
 801d3d0:	687b      	ldr	r3, [r7, #4]
 801d3d2:	4a3d      	ldr	r2, [pc, #244]	; (801d4c8 <TIM_Base_SetConfig+0x118>)
 801d3d4:	4293      	cmp	r3, r2
 801d3d6:	d00b      	beq.n	801d3f0 <TIM_Base_SetConfig+0x40>
 801d3d8:	687b      	ldr	r3, [r7, #4]
 801d3da:	4a3c      	ldr	r2, [pc, #240]	; (801d4cc <TIM_Base_SetConfig+0x11c>)
 801d3dc:	4293      	cmp	r3, r2
 801d3de:	d007      	beq.n	801d3f0 <TIM_Base_SetConfig+0x40>
 801d3e0:	687b      	ldr	r3, [r7, #4]
 801d3e2:	4a3b      	ldr	r2, [pc, #236]	; (801d4d0 <TIM_Base_SetConfig+0x120>)
 801d3e4:	4293      	cmp	r3, r2
 801d3e6:	d003      	beq.n	801d3f0 <TIM_Base_SetConfig+0x40>
 801d3e8:	687b      	ldr	r3, [r7, #4]
 801d3ea:	4a3a      	ldr	r2, [pc, #232]	; (801d4d4 <TIM_Base_SetConfig+0x124>)
 801d3ec:	4293      	cmp	r3, r2
 801d3ee:	d108      	bne.n	801d402 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 801d3f0:	68fb      	ldr	r3, [r7, #12]
 801d3f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801d3f6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 801d3f8:	683b      	ldr	r3, [r7, #0]
 801d3fa:	685b      	ldr	r3, [r3, #4]
 801d3fc:	68fa      	ldr	r2, [r7, #12]
 801d3fe:	4313      	orrs	r3, r2
 801d400:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 801d402:	687b      	ldr	r3, [r7, #4]
 801d404:	4a2f      	ldr	r2, [pc, #188]	; (801d4c4 <TIM_Base_SetConfig+0x114>)
 801d406:	4293      	cmp	r3, r2
 801d408:	d02b      	beq.n	801d462 <TIM_Base_SetConfig+0xb2>
 801d40a:	687b      	ldr	r3, [r7, #4]
 801d40c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801d410:	d027      	beq.n	801d462 <TIM_Base_SetConfig+0xb2>
 801d412:	687b      	ldr	r3, [r7, #4]
 801d414:	4a2c      	ldr	r2, [pc, #176]	; (801d4c8 <TIM_Base_SetConfig+0x118>)
 801d416:	4293      	cmp	r3, r2
 801d418:	d023      	beq.n	801d462 <TIM_Base_SetConfig+0xb2>
 801d41a:	687b      	ldr	r3, [r7, #4]
 801d41c:	4a2b      	ldr	r2, [pc, #172]	; (801d4cc <TIM_Base_SetConfig+0x11c>)
 801d41e:	4293      	cmp	r3, r2
 801d420:	d01f      	beq.n	801d462 <TIM_Base_SetConfig+0xb2>
 801d422:	687b      	ldr	r3, [r7, #4]
 801d424:	4a2a      	ldr	r2, [pc, #168]	; (801d4d0 <TIM_Base_SetConfig+0x120>)
 801d426:	4293      	cmp	r3, r2
 801d428:	d01b      	beq.n	801d462 <TIM_Base_SetConfig+0xb2>
 801d42a:	687b      	ldr	r3, [r7, #4]
 801d42c:	4a29      	ldr	r2, [pc, #164]	; (801d4d4 <TIM_Base_SetConfig+0x124>)
 801d42e:	4293      	cmp	r3, r2
 801d430:	d017      	beq.n	801d462 <TIM_Base_SetConfig+0xb2>
 801d432:	687b      	ldr	r3, [r7, #4]
 801d434:	4a28      	ldr	r2, [pc, #160]	; (801d4d8 <TIM_Base_SetConfig+0x128>)
 801d436:	4293      	cmp	r3, r2
 801d438:	d013      	beq.n	801d462 <TIM_Base_SetConfig+0xb2>
 801d43a:	687b      	ldr	r3, [r7, #4]
 801d43c:	4a27      	ldr	r2, [pc, #156]	; (801d4dc <TIM_Base_SetConfig+0x12c>)
 801d43e:	4293      	cmp	r3, r2
 801d440:	d00f      	beq.n	801d462 <TIM_Base_SetConfig+0xb2>
 801d442:	687b      	ldr	r3, [r7, #4]
 801d444:	4a26      	ldr	r2, [pc, #152]	; (801d4e0 <TIM_Base_SetConfig+0x130>)
 801d446:	4293      	cmp	r3, r2
 801d448:	d00b      	beq.n	801d462 <TIM_Base_SetConfig+0xb2>
 801d44a:	687b      	ldr	r3, [r7, #4]
 801d44c:	4a25      	ldr	r2, [pc, #148]	; (801d4e4 <TIM_Base_SetConfig+0x134>)
 801d44e:	4293      	cmp	r3, r2
 801d450:	d007      	beq.n	801d462 <TIM_Base_SetConfig+0xb2>
 801d452:	687b      	ldr	r3, [r7, #4]
 801d454:	4a24      	ldr	r2, [pc, #144]	; (801d4e8 <TIM_Base_SetConfig+0x138>)
 801d456:	4293      	cmp	r3, r2
 801d458:	d003      	beq.n	801d462 <TIM_Base_SetConfig+0xb2>
 801d45a:	687b      	ldr	r3, [r7, #4]
 801d45c:	4a23      	ldr	r2, [pc, #140]	; (801d4ec <TIM_Base_SetConfig+0x13c>)
 801d45e:	4293      	cmp	r3, r2
 801d460:	d108      	bne.n	801d474 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 801d462:	68fb      	ldr	r3, [r7, #12]
 801d464:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 801d468:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 801d46a:	683b      	ldr	r3, [r7, #0]
 801d46c:	68db      	ldr	r3, [r3, #12]
 801d46e:	68fa      	ldr	r2, [r7, #12]
 801d470:	4313      	orrs	r3, r2
 801d472:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 801d474:	68fb      	ldr	r3, [r7, #12]
 801d476:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 801d47a:	683b      	ldr	r3, [r7, #0]
 801d47c:	695b      	ldr	r3, [r3, #20]
 801d47e:	4313      	orrs	r3, r2
 801d480:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 801d482:	687b      	ldr	r3, [r7, #4]
 801d484:	68fa      	ldr	r2, [r7, #12]
 801d486:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 801d488:	683b      	ldr	r3, [r7, #0]
 801d48a:	689a      	ldr	r2, [r3, #8]
 801d48c:	687b      	ldr	r3, [r7, #4]
 801d48e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 801d490:	683b      	ldr	r3, [r7, #0]
 801d492:	681a      	ldr	r2, [r3, #0]
 801d494:	687b      	ldr	r3, [r7, #4]
 801d496:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 801d498:	687b      	ldr	r3, [r7, #4]
 801d49a:	4a0a      	ldr	r2, [pc, #40]	; (801d4c4 <TIM_Base_SetConfig+0x114>)
 801d49c:	4293      	cmp	r3, r2
 801d49e:	d003      	beq.n	801d4a8 <TIM_Base_SetConfig+0xf8>
 801d4a0:	687b      	ldr	r3, [r7, #4]
 801d4a2:	4a0c      	ldr	r2, [pc, #48]	; (801d4d4 <TIM_Base_SetConfig+0x124>)
 801d4a4:	4293      	cmp	r3, r2
 801d4a6:	d103      	bne.n	801d4b0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 801d4a8:	683b      	ldr	r3, [r7, #0]
 801d4aa:	691a      	ldr	r2, [r3, #16]
 801d4ac:	687b      	ldr	r3, [r7, #4]
 801d4ae:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 801d4b0:	687b      	ldr	r3, [r7, #4]
 801d4b2:	2201      	movs	r2, #1
 801d4b4:	615a      	str	r2, [r3, #20]
}
 801d4b6:	bf00      	nop
 801d4b8:	3714      	adds	r7, #20
 801d4ba:	46bd      	mov	sp, r7
 801d4bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d4c0:	4770      	bx	lr
 801d4c2:	bf00      	nop
 801d4c4:	40010000 	.word	0x40010000
 801d4c8:	40000400 	.word	0x40000400
 801d4cc:	40000800 	.word	0x40000800
 801d4d0:	40000c00 	.word	0x40000c00
 801d4d4:	40010400 	.word	0x40010400
 801d4d8:	40014000 	.word	0x40014000
 801d4dc:	40014400 	.word	0x40014400
 801d4e0:	40014800 	.word	0x40014800
 801d4e4:	40001800 	.word	0x40001800
 801d4e8:	40001c00 	.word	0x40001c00
 801d4ec:	40002000 	.word	0x40002000

0801d4f0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 801d4f0:	b480      	push	{r7}
 801d4f2:	b087      	sub	sp, #28
 801d4f4:	af00      	add	r7, sp, #0
 801d4f6:	6078      	str	r0, [r7, #4]
 801d4f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 801d4fa:	687b      	ldr	r3, [r7, #4]
 801d4fc:	6a1b      	ldr	r3, [r3, #32]
 801d4fe:	f023 0201 	bic.w	r2, r3, #1
 801d502:	687b      	ldr	r3, [r7, #4]
 801d504:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801d506:	687b      	ldr	r3, [r7, #4]
 801d508:	6a1b      	ldr	r3, [r3, #32]
 801d50a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 801d50c:	687b      	ldr	r3, [r7, #4]
 801d50e:	685b      	ldr	r3, [r3, #4]
 801d510:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 801d512:	687b      	ldr	r3, [r7, #4]
 801d514:	699b      	ldr	r3, [r3, #24]
 801d516:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 801d518:	68fb      	ldr	r3, [r7, #12]
 801d51a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801d51e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 801d520:	68fb      	ldr	r3, [r7, #12]
 801d522:	f023 0303 	bic.w	r3, r3, #3
 801d526:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 801d528:	683b      	ldr	r3, [r7, #0]
 801d52a:	681b      	ldr	r3, [r3, #0]
 801d52c:	68fa      	ldr	r2, [r7, #12]
 801d52e:	4313      	orrs	r3, r2
 801d530:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 801d532:	697b      	ldr	r3, [r7, #20]
 801d534:	f023 0302 	bic.w	r3, r3, #2
 801d538:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 801d53a:	683b      	ldr	r3, [r7, #0]
 801d53c:	689b      	ldr	r3, [r3, #8]
 801d53e:	697a      	ldr	r2, [r7, #20]
 801d540:	4313      	orrs	r3, r2
 801d542:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 801d544:	687b      	ldr	r3, [r7, #4]
 801d546:	4a20      	ldr	r2, [pc, #128]	; (801d5c8 <TIM_OC1_SetConfig+0xd8>)
 801d548:	4293      	cmp	r3, r2
 801d54a:	d003      	beq.n	801d554 <TIM_OC1_SetConfig+0x64>
 801d54c:	687b      	ldr	r3, [r7, #4]
 801d54e:	4a1f      	ldr	r2, [pc, #124]	; (801d5cc <TIM_OC1_SetConfig+0xdc>)
 801d550:	4293      	cmp	r3, r2
 801d552:	d10c      	bne.n	801d56e <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 801d554:	697b      	ldr	r3, [r7, #20]
 801d556:	f023 0308 	bic.w	r3, r3, #8
 801d55a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 801d55c:	683b      	ldr	r3, [r7, #0]
 801d55e:	68db      	ldr	r3, [r3, #12]
 801d560:	697a      	ldr	r2, [r7, #20]
 801d562:	4313      	orrs	r3, r2
 801d564:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 801d566:	697b      	ldr	r3, [r7, #20]
 801d568:	f023 0304 	bic.w	r3, r3, #4
 801d56c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 801d56e:	687b      	ldr	r3, [r7, #4]
 801d570:	4a15      	ldr	r2, [pc, #84]	; (801d5c8 <TIM_OC1_SetConfig+0xd8>)
 801d572:	4293      	cmp	r3, r2
 801d574:	d003      	beq.n	801d57e <TIM_OC1_SetConfig+0x8e>
 801d576:	687b      	ldr	r3, [r7, #4]
 801d578:	4a14      	ldr	r2, [pc, #80]	; (801d5cc <TIM_OC1_SetConfig+0xdc>)
 801d57a:	4293      	cmp	r3, r2
 801d57c:	d111      	bne.n	801d5a2 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 801d57e:	693b      	ldr	r3, [r7, #16]
 801d580:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 801d584:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 801d586:	693b      	ldr	r3, [r7, #16]
 801d588:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 801d58c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 801d58e:	683b      	ldr	r3, [r7, #0]
 801d590:	695b      	ldr	r3, [r3, #20]
 801d592:	693a      	ldr	r2, [r7, #16]
 801d594:	4313      	orrs	r3, r2
 801d596:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 801d598:	683b      	ldr	r3, [r7, #0]
 801d59a:	699b      	ldr	r3, [r3, #24]
 801d59c:	693a      	ldr	r2, [r7, #16]
 801d59e:	4313      	orrs	r3, r2
 801d5a0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801d5a2:	687b      	ldr	r3, [r7, #4]
 801d5a4:	693a      	ldr	r2, [r7, #16]
 801d5a6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 801d5a8:	687b      	ldr	r3, [r7, #4]
 801d5aa:	68fa      	ldr	r2, [r7, #12]
 801d5ac:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 801d5ae:	683b      	ldr	r3, [r7, #0]
 801d5b0:	685a      	ldr	r2, [r3, #4]
 801d5b2:	687b      	ldr	r3, [r7, #4]
 801d5b4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 801d5b6:	687b      	ldr	r3, [r7, #4]
 801d5b8:	697a      	ldr	r2, [r7, #20]
 801d5ba:	621a      	str	r2, [r3, #32]
}
 801d5bc:	bf00      	nop
 801d5be:	371c      	adds	r7, #28
 801d5c0:	46bd      	mov	sp, r7
 801d5c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d5c6:	4770      	bx	lr
 801d5c8:	40010000 	.word	0x40010000
 801d5cc:	40010400 	.word	0x40010400

0801d5d0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 801d5d0:	b480      	push	{r7}
 801d5d2:	b087      	sub	sp, #28
 801d5d4:	af00      	add	r7, sp, #0
 801d5d6:	6078      	str	r0, [r7, #4]
 801d5d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 801d5da:	687b      	ldr	r3, [r7, #4]
 801d5dc:	6a1b      	ldr	r3, [r3, #32]
 801d5de:	f023 0210 	bic.w	r2, r3, #16
 801d5e2:	687b      	ldr	r3, [r7, #4]
 801d5e4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801d5e6:	687b      	ldr	r3, [r7, #4]
 801d5e8:	6a1b      	ldr	r3, [r3, #32]
 801d5ea:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 801d5ec:	687b      	ldr	r3, [r7, #4]
 801d5ee:	685b      	ldr	r3, [r3, #4]
 801d5f0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 801d5f2:	687b      	ldr	r3, [r7, #4]
 801d5f4:	699b      	ldr	r3, [r3, #24]
 801d5f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 801d5f8:	68fb      	ldr	r3, [r7, #12]
 801d5fa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 801d5fe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 801d600:	68fb      	ldr	r3, [r7, #12]
 801d602:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 801d606:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 801d608:	683b      	ldr	r3, [r7, #0]
 801d60a:	681b      	ldr	r3, [r3, #0]
 801d60c:	021b      	lsls	r3, r3, #8
 801d60e:	68fa      	ldr	r2, [r7, #12]
 801d610:	4313      	orrs	r3, r2
 801d612:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 801d614:	697b      	ldr	r3, [r7, #20]
 801d616:	f023 0320 	bic.w	r3, r3, #32
 801d61a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 801d61c:	683b      	ldr	r3, [r7, #0]
 801d61e:	689b      	ldr	r3, [r3, #8]
 801d620:	011b      	lsls	r3, r3, #4
 801d622:	697a      	ldr	r2, [r7, #20]
 801d624:	4313      	orrs	r3, r2
 801d626:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 801d628:	687b      	ldr	r3, [r7, #4]
 801d62a:	4a22      	ldr	r2, [pc, #136]	; (801d6b4 <TIM_OC2_SetConfig+0xe4>)
 801d62c:	4293      	cmp	r3, r2
 801d62e:	d003      	beq.n	801d638 <TIM_OC2_SetConfig+0x68>
 801d630:	687b      	ldr	r3, [r7, #4]
 801d632:	4a21      	ldr	r2, [pc, #132]	; (801d6b8 <TIM_OC2_SetConfig+0xe8>)
 801d634:	4293      	cmp	r3, r2
 801d636:	d10d      	bne.n	801d654 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 801d638:	697b      	ldr	r3, [r7, #20]
 801d63a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 801d63e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 801d640:	683b      	ldr	r3, [r7, #0]
 801d642:	68db      	ldr	r3, [r3, #12]
 801d644:	011b      	lsls	r3, r3, #4
 801d646:	697a      	ldr	r2, [r7, #20]
 801d648:	4313      	orrs	r3, r2
 801d64a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 801d64c:	697b      	ldr	r3, [r7, #20]
 801d64e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 801d652:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 801d654:	687b      	ldr	r3, [r7, #4]
 801d656:	4a17      	ldr	r2, [pc, #92]	; (801d6b4 <TIM_OC2_SetConfig+0xe4>)
 801d658:	4293      	cmp	r3, r2
 801d65a:	d003      	beq.n	801d664 <TIM_OC2_SetConfig+0x94>
 801d65c:	687b      	ldr	r3, [r7, #4]
 801d65e:	4a16      	ldr	r2, [pc, #88]	; (801d6b8 <TIM_OC2_SetConfig+0xe8>)
 801d660:	4293      	cmp	r3, r2
 801d662:	d113      	bne.n	801d68c <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 801d664:	693b      	ldr	r3, [r7, #16]
 801d666:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 801d66a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 801d66c:	693b      	ldr	r3, [r7, #16]
 801d66e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 801d672:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 801d674:	683b      	ldr	r3, [r7, #0]
 801d676:	695b      	ldr	r3, [r3, #20]
 801d678:	009b      	lsls	r3, r3, #2
 801d67a:	693a      	ldr	r2, [r7, #16]
 801d67c:	4313      	orrs	r3, r2
 801d67e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 801d680:	683b      	ldr	r3, [r7, #0]
 801d682:	699b      	ldr	r3, [r3, #24]
 801d684:	009b      	lsls	r3, r3, #2
 801d686:	693a      	ldr	r2, [r7, #16]
 801d688:	4313      	orrs	r3, r2
 801d68a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801d68c:	687b      	ldr	r3, [r7, #4]
 801d68e:	693a      	ldr	r2, [r7, #16]
 801d690:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 801d692:	687b      	ldr	r3, [r7, #4]
 801d694:	68fa      	ldr	r2, [r7, #12]
 801d696:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 801d698:	683b      	ldr	r3, [r7, #0]
 801d69a:	685a      	ldr	r2, [r3, #4]
 801d69c:	687b      	ldr	r3, [r7, #4]
 801d69e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 801d6a0:	687b      	ldr	r3, [r7, #4]
 801d6a2:	697a      	ldr	r2, [r7, #20]
 801d6a4:	621a      	str	r2, [r3, #32]
}
 801d6a6:	bf00      	nop
 801d6a8:	371c      	adds	r7, #28
 801d6aa:	46bd      	mov	sp, r7
 801d6ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d6b0:	4770      	bx	lr
 801d6b2:	bf00      	nop
 801d6b4:	40010000 	.word	0x40010000
 801d6b8:	40010400 	.word	0x40010400

0801d6bc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 801d6bc:	b480      	push	{r7}
 801d6be:	b087      	sub	sp, #28
 801d6c0:	af00      	add	r7, sp, #0
 801d6c2:	6078      	str	r0, [r7, #4]
 801d6c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 801d6c6:	687b      	ldr	r3, [r7, #4]
 801d6c8:	6a1b      	ldr	r3, [r3, #32]
 801d6ca:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 801d6ce:	687b      	ldr	r3, [r7, #4]
 801d6d0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801d6d2:	687b      	ldr	r3, [r7, #4]
 801d6d4:	6a1b      	ldr	r3, [r3, #32]
 801d6d6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 801d6d8:	687b      	ldr	r3, [r7, #4]
 801d6da:	685b      	ldr	r3, [r3, #4]
 801d6dc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 801d6de:	687b      	ldr	r3, [r7, #4]
 801d6e0:	69db      	ldr	r3, [r3, #28]
 801d6e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 801d6e4:	68fb      	ldr	r3, [r7, #12]
 801d6e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801d6ea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 801d6ec:	68fb      	ldr	r3, [r7, #12]
 801d6ee:	f023 0303 	bic.w	r3, r3, #3
 801d6f2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 801d6f4:	683b      	ldr	r3, [r7, #0]
 801d6f6:	681b      	ldr	r3, [r3, #0]
 801d6f8:	68fa      	ldr	r2, [r7, #12]
 801d6fa:	4313      	orrs	r3, r2
 801d6fc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 801d6fe:	697b      	ldr	r3, [r7, #20]
 801d700:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 801d704:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 801d706:	683b      	ldr	r3, [r7, #0]
 801d708:	689b      	ldr	r3, [r3, #8]
 801d70a:	021b      	lsls	r3, r3, #8
 801d70c:	697a      	ldr	r2, [r7, #20]
 801d70e:	4313      	orrs	r3, r2
 801d710:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 801d712:	687b      	ldr	r3, [r7, #4]
 801d714:	4a21      	ldr	r2, [pc, #132]	; (801d79c <TIM_OC3_SetConfig+0xe0>)
 801d716:	4293      	cmp	r3, r2
 801d718:	d003      	beq.n	801d722 <TIM_OC3_SetConfig+0x66>
 801d71a:	687b      	ldr	r3, [r7, #4]
 801d71c:	4a20      	ldr	r2, [pc, #128]	; (801d7a0 <TIM_OC3_SetConfig+0xe4>)
 801d71e:	4293      	cmp	r3, r2
 801d720:	d10d      	bne.n	801d73e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 801d722:	697b      	ldr	r3, [r7, #20]
 801d724:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 801d728:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 801d72a:	683b      	ldr	r3, [r7, #0]
 801d72c:	68db      	ldr	r3, [r3, #12]
 801d72e:	021b      	lsls	r3, r3, #8
 801d730:	697a      	ldr	r2, [r7, #20]
 801d732:	4313      	orrs	r3, r2
 801d734:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 801d736:	697b      	ldr	r3, [r7, #20]
 801d738:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 801d73c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 801d73e:	687b      	ldr	r3, [r7, #4]
 801d740:	4a16      	ldr	r2, [pc, #88]	; (801d79c <TIM_OC3_SetConfig+0xe0>)
 801d742:	4293      	cmp	r3, r2
 801d744:	d003      	beq.n	801d74e <TIM_OC3_SetConfig+0x92>
 801d746:	687b      	ldr	r3, [r7, #4]
 801d748:	4a15      	ldr	r2, [pc, #84]	; (801d7a0 <TIM_OC3_SetConfig+0xe4>)
 801d74a:	4293      	cmp	r3, r2
 801d74c:	d113      	bne.n	801d776 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 801d74e:	693b      	ldr	r3, [r7, #16]
 801d750:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801d754:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 801d756:	693b      	ldr	r3, [r7, #16]
 801d758:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 801d75c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 801d75e:	683b      	ldr	r3, [r7, #0]
 801d760:	695b      	ldr	r3, [r3, #20]
 801d762:	011b      	lsls	r3, r3, #4
 801d764:	693a      	ldr	r2, [r7, #16]
 801d766:	4313      	orrs	r3, r2
 801d768:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 801d76a:	683b      	ldr	r3, [r7, #0]
 801d76c:	699b      	ldr	r3, [r3, #24]
 801d76e:	011b      	lsls	r3, r3, #4
 801d770:	693a      	ldr	r2, [r7, #16]
 801d772:	4313      	orrs	r3, r2
 801d774:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801d776:	687b      	ldr	r3, [r7, #4]
 801d778:	693a      	ldr	r2, [r7, #16]
 801d77a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 801d77c:	687b      	ldr	r3, [r7, #4]
 801d77e:	68fa      	ldr	r2, [r7, #12]
 801d780:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 801d782:	683b      	ldr	r3, [r7, #0]
 801d784:	685a      	ldr	r2, [r3, #4]
 801d786:	687b      	ldr	r3, [r7, #4]
 801d788:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 801d78a:	687b      	ldr	r3, [r7, #4]
 801d78c:	697a      	ldr	r2, [r7, #20]
 801d78e:	621a      	str	r2, [r3, #32]
}
 801d790:	bf00      	nop
 801d792:	371c      	adds	r7, #28
 801d794:	46bd      	mov	sp, r7
 801d796:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d79a:	4770      	bx	lr
 801d79c:	40010000 	.word	0x40010000
 801d7a0:	40010400 	.word	0x40010400

0801d7a4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 801d7a4:	b480      	push	{r7}
 801d7a6:	b087      	sub	sp, #28
 801d7a8:	af00      	add	r7, sp, #0
 801d7aa:	6078      	str	r0, [r7, #4]
 801d7ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 801d7ae:	687b      	ldr	r3, [r7, #4]
 801d7b0:	6a1b      	ldr	r3, [r3, #32]
 801d7b2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 801d7b6:	687b      	ldr	r3, [r7, #4]
 801d7b8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801d7ba:	687b      	ldr	r3, [r7, #4]
 801d7bc:	6a1b      	ldr	r3, [r3, #32]
 801d7be:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 801d7c0:	687b      	ldr	r3, [r7, #4]
 801d7c2:	685b      	ldr	r3, [r3, #4]
 801d7c4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 801d7c6:	687b      	ldr	r3, [r7, #4]
 801d7c8:	69db      	ldr	r3, [r3, #28]
 801d7ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 801d7cc:	68fb      	ldr	r3, [r7, #12]
 801d7ce:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 801d7d2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 801d7d4:	68fb      	ldr	r3, [r7, #12]
 801d7d6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 801d7da:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 801d7dc:	683b      	ldr	r3, [r7, #0]
 801d7de:	681b      	ldr	r3, [r3, #0]
 801d7e0:	021b      	lsls	r3, r3, #8
 801d7e2:	68fa      	ldr	r2, [r7, #12]
 801d7e4:	4313      	orrs	r3, r2
 801d7e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 801d7e8:	693b      	ldr	r3, [r7, #16]
 801d7ea:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 801d7ee:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 801d7f0:	683b      	ldr	r3, [r7, #0]
 801d7f2:	689b      	ldr	r3, [r3, #8]
 801d7f4:	031b      	lsls	r3, r3, #12
 801d7f6:	693a      	ldr	r2, [r7, #16]
 801d7f8:	4313      	orrs	r3, r2
 801d7fa:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 801d7fc:	687b      	ldr	r3, [r7, #4]
 801d7fe:	4a12      	ldr	r2, [pc, #72]	; (801d848 <TIM_OC4_SetConfig+0xa4>)
 801d800:	4293      	cmp	r3, r2
 801d802:	d003      	beq.n	801d80c <TIM_OC4_SetConfig+0x68>
 801d804:	687b      	ldr	r3, [r7, #4]
 801d806:	4a11      	ldr	r2, [pc, #68]	; (801d84c <TIM_OC4_SetConfig+0xa8>)
 801d808:	4293      	cmp	r3, r2
 801d80a:	d109      	bne.n	801d820 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 801d80c:	697b      	ldr	r3, [r7, #20]
 801d80e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 801d812:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 801d814:	683b      	ldr	r3, [r7, #0]
 801d816:	695b      	ldr	r3, [r3, #20]
 801d818:	019b      	lsls	r3, r3, #6
 801d81a:	697a      	ldr	r2, [r7, #20]
 801d81c:	4313      	orrs	r3, r2
 801d81e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801d820:	687b      	ldr	r3, [r7, #4]
 801d822:	697a      	ldr	r2, [r7, #20]
 801d824:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 801d826:	687b      	ldr	r3, [r7, #4]
 801d828:	68fa      	ldr	r2, [r7, #12]
 801d82a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 801d82c:	683b      	ldr	r3, [r7, #0]
 801d82e:	685a      	ldr	r2, [r3, #4]
 801d830:	687b      	ldr	r3, [r7, #4]
 801d832:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 801d834:	687b      	ldr	r3, [r7, #4]
 801d836:	693a      	ldr	r2, [r7, #16]
 801d838:	621a      	str	r2, [r3, #32]
}
 801d83a:	bf00      	nop
 801d83c:	371c      	adds	r7, #28
 801d83e:	46bd      	mov	sp, r7
 801d840:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d844:	4770      	bx	lr
 801d846:	bf00      	nop
 801d848:	40010000 	.word	0x40010000
 801d84c:	40010400 	.word	0x40010400

0801d850 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 801d850:	b480      	push	{r7}
 801d852:	b087      	sub	sp, #28
 801d854:	af00      	add	r7, sp, #0
 801d856:	60f8      	str	r0, [r7, #12]
 801d858:	60b9      	str	r1, [r7, #8]
 801d85a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 801d85c:	68fb      	ldr	r3, [r7, #12]
 801d85e:	6a1b      	ldr	r3, [r3, #32]
 801d860:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 801d862:	68fb      	ldr	r3, [r7, #12]
 801d864:	6a1b      	ldr	r3, [r3, #32]
 801d866:	f023 0201 	bic.w	r2, r3, #1
 801d86a:	68fb      	ldr	r3, [r7, #12]
 801d86c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 801d86e:	68fb      	ldr	r3, [r7, #12]
 801d870:	699b      	ldr	r3, [r3, #24]
 801d872:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 801d874:	693b      	ldr	r3, [r7, #16]
 801d876:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 801d87a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 801d87c:	687b      	ldr	r3, [r7, #4]
 801d87e:	011b      	lsls	r3, r3, #4
 801d880:	693a      	ldr	r2, [r7, #16]
 801d882:	4313      	orrs	r3, r2
 801d884:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 801d886:	697b      	ldr	r3, [r7, #20]
 801d888:	f023 030a 	bic.w	r3, r3, #10
 801d88c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 801d88e:	697a      	ldr	r2, [r7, #20]
 801d890:	68bb      	ldr	r3, [r7, #8]
 801d892:	4313      	orrs	r3, r2
 801d894:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 801d896:	68fb      	ldr	r3, [r7, #12]
 801d898:	693a      	ldr	r2, [r7, #16]
 801d89a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 801d89c:	68fb      	ldr	r3, [r7, #12]
 801d89e:	697a      	ldr	r2, [r7, #20]
 801d8a0:	621a      	str	r2, [r3, #32]
}
 801d8a2:	bf00      	nop
 801d8a4:	371c      	adds	r7, #28
 801d8a6:	46bd      	mov	sp, r7
 801d8a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d8ac:	4770      	bx	lr

0801d8ae <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 801d8ae:	b480      	push	{r7}
 801d8b0:	b087      	sub	sp, #28
 801d8b2:	af00      	add	r7, sp, #0
 801d8b4:	60f8      	str	r0, [r7, #12]
 801d8b6:	60b9      	str	r1, [r7, #8]
 801d8b8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 801d8ba:	68fb      	ldr	r3, [r7, #12]
 801d8bc:	6a1b      	ldr	r3, [r3, #32]
 801d8be:	f023 0210 	bic.w	r2, r3, #16
 801d8c2:	68fb      	ldr	r3, [r7, #12]
 801d8c4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 801d8c6:	68fb      	ldr	r3, [r7, #12]
 801d8c8:	699b      	ldr	r3, [r3, #24]
 801d8ca:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 801d8cc:	68fb      	ldr	r3, [r7, #12]
 801d8ce:	6a1b      	ldr	r3, [r3, #32]
 801d8d0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 801d8d2:	697b      	ldr	r3, [r7, #20]
 801d8d4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 801d8d8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 801d8da:	687b      	ldr	r3, [r7, #4]
 801d8dc:	031b      	lsls	r3, r3, #12
 801d8de:	697a      	ldr	r2, [r7, #20]
 801d8e0:	4313      	orrs	r3, r2
 801d8e2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 801d8e4:	693b      	ldr	r3, [r7, #16]
 801d8e6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 801d8ea:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 801d8ec:	68bb      	ldr	r3, [r7, #8]
 801d8ee:	011b      	lsls	r3, r3, #4
 801d8f0:	693a      	ldr	r2, [r7, #16]
 801d8f2:	4313      	orrs	r3, r2
 801d8f4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 801d8f6:	68fb      	ldr	r3, [r7, #12]
 801d8f8:	697a      	ldr	r2, [r7, #20]
 801d8fa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 801d8fc:	68fb      	ldr	r3, [r7, #12]
 801d8fe:	693a      	ldr	r2, [r7, #16]
 801d900:	621a      	str	r2, [r3, #32]
}
 801d902:	bf00      	nop
 801d904:	371c      	adds	r7, #28
 801d906:	46bd      	mov	sp, r7
 801d908:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d90c:	4770      	bx	lr

0801d90e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 801d90e:	b480      	push	{r7}
 801d910:	b085      	sub	sp, #20
 801d912:	af00      	add	r7, sp, #0
 801d914:	6078      	str	r0, [r7, #4]
 801d916:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 801d918:	687b      	ldr	r3, [r7, #4]
 801d91a:	689b      	ldr	r3, [r3, #8]
 801d91c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 801d91e:	68fb      	ldr	r3, [r7, #12]
 801d920:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801d924:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 801d926:	683a      	ldr	r2, [r7, #0]
 801d928:	68fb      	ldr	r3, [r7, #12]
 801d92a:	4313      	orrs	r3, r2
 801d92c:	f043 0307 	orr.w	r3, r3, #7
 801d930:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 801d932:	687b      	ldr	r3, [r7, #4]
 801d934:	68fa      	ldr	r2, [r7, #12]
 801d936:	609a      	str	r2, [r3, #8]
}
 801d938:	bf00      	nop
 801d93a:	3714      	adds	r7, #20
 801d93c:	46bd      	mov	sp, r7
 801d93e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d942:	4770      	bx	lr

0801d944 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 801d944:	b480      	push	{r7}
 801d946:	b087      	sub	sp, #28
 801d948:	af00      	add	r7, sp, #0
 801d94a:	60f8      	str	r0, [r7, #12]
 801d94c:	60b9      	str	r1, [r7, #8]
 801d94e:	607a      	str	r2, [r7, #4]
 801d950:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 801d952:	68fb      	ldr	r3, [r7, #12]
 801d954:	689b      	ldr	r3, [r3, #8]
 801d956:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 801d958:	697b      	ldr	r3, [r7, #20]
 801d95a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 801d95e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 801d960:	683b      	ldr	r3, [r7, #0]
 801d962:	021a      	lsls	r2, r3, #8
 801d964:	687b      	ldr	r3, [r7, #4]
 801d966:	431a      	orrs	r2, r3
 801d968:	68bb      	ldr	r3, [r7, #8]
 801d96a:	4313      	orrs	r3, r2
 801d96c:	697a      	ldr	r2, [r7, #20]
 801d96e:	4313      	orrs	r3, r2
 801d970:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 801d972:	68fb      	ldr	r3, [r7, #12]
 801d974:	697a      	ldr	r2, [r7, #20]
 801d976:	609a      	str	r2, [r3, #8]
}
 801d978:	bf00      	nop
 801d97a:	371c      	adds	r7, #28
 801d97c:	46bd      	mov	sp, r7
 801d97e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d982:	4770      	bx	lr

0801d984 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 801d984:	b480      	push	{r7}
 801d986:	b085      	sub	sp, #20
 801d988:	af00      	add	r7, sp, #0
 801d98a:	6078      	str	r0, [r7, #4]
 801d98c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 801d98e:	687b      	ldr	r3, [r7, #4]
 801d990:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 801d994:	2b01      	cmp	r3, #1
 801d996:	d101      	bne.n	801d99c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 801d998:	2302      	movs	r3, #2
 801d99a:	e05a      	b.n	801da52 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 801d99c:	687b      	ldr	r3, [r7, #4]
 801d99e:	2201      	movs	r2, #1
 801d9a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 801d9a4:	687b      	ldr	r3, [r7, #4]
 801d9a6:	2202      	movs	r2, #2
 801d9a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 801d9ac:	687b      	ldr	r3, [r7, #4]
 801d9ae:	681b      	ldr	r3, [r3, #0]
 801d9b0:	685b      	ldr	r3, [r3, #4]
 801d9b2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 801d9b4:	687b      	ldr	r3, [r7, #4]
 801d9b6:	681b      	ldr	r3, [r3, #0]
 801d9b8:	689b      	ldr	r3, [r3, #8]
 801d9ba:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 801d9bc:	68fb      	ldr	r3, [r7, #12]
 801d9be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801d9c2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 801d9c4:	683b      	ldr	r3, [r7, #0]
 801d9c6:	681b      	ldr	r3, [r3, #0]
 801d9c8:	68fa      	ldr	r2, [r7, #12]
 801d9ca:	4313      	orrs	r3, r2
 801d9cc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 801d9ce:	687b      	ldr	r3, [r7, #4]
 801d9d0:	681b      	ldr	r3, [r3, #0]
 801d9d2:	68fa      	ldr	r2, [r7, #12]
 801d9d4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 801d9d6:	687b      	ldr	r3, [r7, #4]
 801d9d8:	681b      	ldr	r3, [r3, #0]
 801d9da:	4a21      	ldr	r2, [pc, #132]	; (801da60 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 801d9dc:	4293      	cmp	r3, r2
 801d9de:	d022      	beq.n	801da26 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 801d9e0:	687b      	ldr	r3, [r7, #4]
 801d9e2:	681b      	ldr	r3, [r3, #0]
 801d9e4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801d9e8:	d01d      	beq.n	801da26 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 801d9ea:	687b      	ldr	r3, [r7, #4]
 801d9ec:	681b      	ldr	r3, [r3, #0]
 801d9ee:	4a1d      	ldr	r2, [pc, #116]	; (801da64 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 801d9f0:	4293      	cmp	r3, r2
 801d9f2:	d018      	beq.n	801da26 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 801d9f4:	687b      	ldr	r3, [r7, #4]
 801d9f6:	681b      	ldr	r3, [r3, #0]
 801d9f8:	4a1b      	ldr	r2, [pc, #108]	; (801da68 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 801d9fa:	4293      	cmp	r3, r2
 801d9fc:	d013      	beq.n	801da26 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 801d9fe:	687b      	ldr	r3, [r7, #4]
 801da00:	681b      	ldr	r3, [r3, #0]
 801da02:	4a1a      	ldr	r2, [pc, #104]	; (801da6c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 801da04:	4293      	cmp	r3, r2
 801da06:	d00e      	beq.n	801da26 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 801da08:	687b      	ldr	r3, [r7, #4]
 801da0a:	681b      	ldr	r3, [r3, #0]
 801da0c:	4a18      	ldr	r2, [pc, #96]	; (801da70 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 801da0e:	4293      	cmp	r3, r2
 801da10:	d009      	beq.n	801da26 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 801da12:	687b      	ldr	r3, [r7, #4]
 801da14:	681b      	ldr	r3, [r3, #0]
 801da16:	4a17      	ldr	r2, [pc, #92]	; (801da74 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 801da18:	4293      	cmp	r3, r2
 801da1a:	d004      	beq.n	801da26 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 801da1c:	687b      	ldr	r3, [r7, #4]
 801da1e:	681b      	ldr	r3, [r3, #0]
 801da20:	4a15      	ldr	r2, [pc, #84]	; (801da78 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 801da22:	4293      	cmp	r3, r2
 801da24:	d10c      	bne.n	801da40 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 801da26:	68bb      	ldr	r3, [r7, #8]
 801da28:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 801da2c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 801da2e:	683b      	ldr	r3, [r7, #0]
 801da30:	685b      	ldr	r3, [r3, #4]
 801da32:	68ba      	ldr	r2, [r7, #8]
 801da34:	4313      	orrs	r3, r2
 801da36:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 801da38:	687b      	ldr	r3, [r7, #4]
 801da3a:	681b      	ldr	r3, [r3, #0]
 801da3c:	68ba      	ldr	r2, [r7, #8]
 801da3e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 801da40:	687b      	ldr	r3, [r7, #4]
 801da42:	2201      	movs	r2, #1
 801da44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 801da48:	687b      	ldr	r3, [r7, #4]
 801da4a:	2200      	movs	r2, #0
 801da4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 801da50:	2300      	movs	r3, #0
}
 801da52:	4618      	mov	r0, r3
 801da54:	3714      	adds	r7, #20
 801da56:	46bd      	mov	sp, r7
 801da58:	f85d 7b04 	ldr.w	r7, [sp], #4
 801da5c:	4770      	bx	lr
 801da5e:	bf00      	nop
 801da60:	40010000 	.word	0x40010000
 801da64:	40000400 	.word	0x40000400
 801da68:	40000800 	.word	0x40000800
 801da6c:	40000c00 	.word	0x40000c00
 801da70:	40010400 	.word	0x40010400
 801da74:	40014000 	.word	0x40014000
 801da78:	40001800 	.word	0x40001800

0801da7c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 801da7c:	b480      	push	{r7}
 801da7e:	b083      	sub	sp, #12
 801da80:	af00      	add	r7, sp, #0
 801da82:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 801da84:	bf00      	nop
 801da86:	370c      	adds	r7, #12
 801da88:	46bd      	mov	sp, r7
 801da8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801da8e:	4770      	bx	lr

0801da90 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 801da90:	b480      	push	{r7}
 801da92:	b083      	sub	sp, #12
 801da94:	af00      	add	r7, sp, #0
 801da96:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 801da98:	bf00      	nop
 801da9a:	370c      	adds	r7, #12
 801da9c:	46bd      	mov	sp, r7
 801da9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801daa2:	4770      	bx	lr

0801daa4 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 801daa4:	b084      	sub	sp, #16
 801daa6:	b580      	push	{r7, lr}
 801daa8:	b084      	sub	sp, #16
 801daaa:	af00      	add	r7, sp, #0
 801daac:	6078      	str	r0, [r7, #4]
 801daae:	f107 001c 	add.w	r0, r7, #28
 801dab2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 801dab6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801dab8:	2b01      	cmp	r3, #1
 801daba:	d122      	bne.n	801db02 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 801dabc:	687b      	ldr	r3, [r7, #4]
 801dabe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801dac0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 801dac4:	687b      	ldr	r3, [r7, #4]
 801dac6:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 801dac8:	687b      	ldr	r3, [r7, #4]
 801daca:	68db      	ldr	r3, [r3, #12]
 801dacc:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 801dad0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 801dad4:	687a      	ldr	r2, [r7, #4]
 801dad6:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 801dad8:	687b      	ldr	r3, [r7, #4]
 801dada:	68db      	ldr	r3, [r3, #12]
 801dadc:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 801dae0:	687b      	ldr	r3, [r7, #4]
 801dae2:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 801dae4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801dae6:	2b01      	cmp	r3, #1
 801dae8:	d105      	bne.n	801daf6 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 801daea:	687b      	ldr	r3, [r7, #4]
 801daec:	68db      	ldr	r3, [r3, #12]
 801daee:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 801daf2:	687b      	ldr	r3, [r7, #4]
 801daf4:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 801daf6:	6878      	ldr	r0, [r7, #4]
 801daf8:	f001 fb16 	bl	801f128 <USB_CoreReset>
 801dafc:	4603      	mov	r3, r0
 801dafe:	73fb      	strb	r3, [r7, #15]
 801db00:	e01a      	b.n	801db38 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 801db02:	687b      	ldr	r3, [r7, #4]
 801db04:	68db      	ldr	r3, [r3, #12]
 801db06:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 801db0a:	687b      	ldr	r3, [r7, #4]
 801db0c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 801db0e:	6878      	ldr	r0, [r7, #4]
 801db10:	f001 fb0a 	bl	801f128 <USB_CoreReset>
 801db14:	4603      	mov	r3, r0
 801db16:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 801db18:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801db1a:	2b00      	cmp	r3, #0
 801db1c:	d106      	bne.n	801db2c <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 801db1e:	687b      	ldr	r3, [r7, #4]
 801db20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801db22:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 801db26:	687b      	ldr	r3, [r7, #4]
 801db28:	639a      	str	r2, [r3, #56]	; 0x38
 801db2a:	e005      	b.n	801db38 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 801db2c:	687b      	ldr	r3, [r7, #4]
 801db2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801db30:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 801db34:	687b      	ldr	r3, [r7, #4]
 801db36:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 801db38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801db3a:	2b01      	cmp	r3, #1
 801db3c:	d10b      	bne.n	801db56 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 801db3e:	687b      	ldr	r3, [r7, #4]
 801db40:	689b      	ldr	r3, [r3, #8]
 801db42:	f043 0206 	orr.w	r2, r3, #6
 801db46:	687b      	ldr	r3, [r7, #4]
 801db48:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 801db4a:	687b      	ldr	r3, [r7, #4]
 801db4c:	689b      	ldr	r3, [r3, #8]
 801db4e:	f043 0220 	orr.w	r2, r3, #32
 801db52:	687b      	ldr	r3, [r7, #4]
 801db54:	609a      	str	r2, [r3, #8]
  }

  return ret;
 801db56:	7bfb      	ldrb	r3, [r7, #15]
}
 801db58:	4618      	mov	r0, r3
 801db5a:	3710      	adds	r7, #16
 801db5c:	46bd      	mov	sp, r7
 801db5e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 801db62:	b004      	add	sp, #16
 801db64:	4770      	bx	lr
	...

0801db68 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 801db68:	b480      	push	{r7}
 801db6a:	b087      	sub	sp, #28
 801db6c:	af00      	add	r7, sp, #0
 801db6e:	60f8      	str	r0, [r7, #12]
 801db70:	60b9      	str	r1, [r7, #8]
 801db72:	4613      	mov	r3, r2
 801db74:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 801db76:	79fb      	ldrb	r3, [r7, #7]
 801db78:	2b02      	cmp	r3, #2
 801db7a:	d165      	bne.n	801dc48 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 801db7c:	68bb      	ldr	r3, [r7, #8]
 801db7e:	4a41      	ldr	r2, [pc, #260]	; (801dc84 <USB_SetTurnaroundTime+0x11c>)
 801db80:	4293      	cmp	r3, r2
 801db82:	d906      	bls.n	801db92 <USB_SetTurnaroundTime+0x2a>
 801db84:	68bb      	ldr	r3, [r7, #8]
 801db86:	4a40      	ldr	r2, [pc, #256]	; (801dc88 <USB_SetTurnaroundTime+0x120>)
 801db88:	4293      	cmp	r3, r2
 801db8a:	d202      	bcs.n	801db92 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 801db8c:	230f      	movs	r3, #15
 801db8e:	617b      	str	r3, [r7, #20]
 801db90:	e062      	b.n	801dc58 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 801db92:	68bb      	ldr	r3, [r7, #8]
 801db94:	4a3c      	ldr	r2, [pc, #240]	; (801dc88 <USB_SetTurnaroundTime+0x120>)
 801db96:	4293      	cmp	r3, r2
 801db98:	d306      	bcc.n	801dba8 <USB_SetTurnaroundTime+0x40>
 801db9a:	68bb      	ldr	r3, [r7, #8]
 801db9c:	4a3b      	ldr	r2, [pc, #236]	; (801dc8c <USB_SetTurnaroundTime+0x124>)
 801db9e:	4293      	cmp	r3, r2
 801dba0:	d202      	bcs.n	801dba8 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 801dba2:	230e      	movs	r3, #14
 801dba4:	617b      	str	r3, [r7, #20]
 801dba6:	e057      	b.n	801dc58 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 801dba8:	68bb      	ldr	r3, [r7, #8]
 801dbaa:	4a38      	ldr	r2, [pc, #224]	; (801dc8c <USB_SetTurnaroundTime+0x124>)
 801dbac:	4293      	cmp	r3, r2
 801dbae:	d306      	bcc.n	801dbbe <USB_SetTurnaroundTime+0x56>
 801dbb0:	68bb      	ldr	r3, [r7, #8]
 801dbb2:	4a37      	ldr	r2, [pc, #220]	; (801dc90 <USB_SetTurnaroundTime+0x128>)
 801dbb4:	4293      	cmp	r3, r2
 801dbb6:	d202      	bcs.n	801dbbe <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 801dbb8:	230d      	movs	r3, #13
 801dbba:	617b      	str	r3, [r7, #20]
 801dbbc:	e04c      	b.n	801dc58 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 801dbbe:	68bb      	ldr	r3, [r7, #8]
 801dbc0:	4a33      	ldr	r2, [pc, #204]	; (801dc90 <USB_SetTurnaroundTime+0x128>)
 801dbc2:	4293      	cmp	r3, r2
 801dbc4:	d306      	bcc.n	801dbd4 <USB_SetTurnaroundTime+0x6c>
 801dbc6:	68bb      	ldr	r3, [r7, #8]
 801dbc8:	4a32      	ldr	r2, [pc, #200]	; (801dc94 <USB_SetTurnaroundTime+0x12c>)
 801dbca:	4293      	cmp	r3, r2
 801dbcc:	d802      	bhi.n	801dbd4 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 801dbce:	230c      	movs	r3, #12
 801dbd0:	617b      	str	r3, [r7, #20]
 801dbd2:	e041      	b.n	801dc58 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 801dbd4:	68bb      	ldr	r3, [r7, #8]
 801dbd6:	4a2f      	ldr	r2, [pc, #188]	; (801dc94 <USB_SetTurnaroundTime+0x12c>)
 801dbd8:	4293      	cmp	r3, r2
 801dbda:	d906      	bls.n	801dbea <USB_SetTurnaroundTime+0x82>
 801dbdc:	68bb      	ldr	r3, [r7, #8]
 801dbde:	4a2e      	ldr	r2, [pc, #184]	; (801dc98 <USB_SetTurnaroundTime+0x130>)
 801dbe0:	4293      	cmp	r3, r2
 801dbe2:	d802      	bhi.n	801dbea <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 801dbe4:	230b      	movs	r3, #11
 801dbe6:	617b      	str	r3, [r7, #20]
 801dbe8:	e036      	b.n	801dc58 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 801dbea:	68bb      	ldr	r3, [r7, #8]
 801dbec:	4a2a      	ldr	r2, [pc, #168]	; (801dc98 <USB_SetTurnaroundTime+0x130>)
 801dbee:	4293      	cmp	r3, r2
 801dbf0:	d906      	bls.n	801dc00 <USB_SetTurnaroundTime+0x98>
 801dbf2:	68bb      	ldr	r3, [r7, #8]
 801dbf4:	4a29      	ldr	r2, [pc, #164]	; (801dc9c <USB_SetTurnaroundTime+0x134>)
 801dbf6:	4293      	cmp	r3, r2
 801dbf8:	d802      	bhi.n	801dc00 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 801dbfa:	230a      	movs	r3, #10
 801dbfc:	617b      	str	r3, [r7, #20]
 801dbfe:	e02b      	b.n	801dc58 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 801dc00:	68bb      	ldr	r3, [r7, #8]
 801dc02:	4a26      	ldr	r2, [pc, #152]	; (801dc9c <USB_SetTurnaroundTime+0x134>)
 801dc04:	4293      	cmp	r3, r2
 801dc06:	d906      	bls.n	801dc16 <USB_SetTurnaroundTime+0xae>
 801dc08:	68bb      	ldr	r3, [r7, #8]
 801dc0a:	4a25      	ldr	r2, [pc, #148]	; (801dca0 <USB_SetTurnaroundTime+0x138>)
 801dc0c:	4293      	cmp	r3, r2
 801dc0e:	d202      	bcs.n	801dc16 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 801dc10:	2309      	movs	r3, #9
 801dc12:	617b      	str	r3, [r7, #20]
 801dc14:	e020      	b.n	801dc58 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 801dc16:	68bb      	ldr	r3, [r7, #8]
 801dc18:	4a21      	ldr	r2, [pc, #132]	; (801dca0 <USB_SetTurnaroundTime+0x138>)
 801dc1a:	4293      	cmp	r3, r2
 801dc1c:	d306      	bcc.n	801dc2c <USB_SetTurnaroundTime+0xc4>
 801dc1e:	68bb      	ldr	r3, [r7, #8]
 801dc20:	4a20      	ldr	r2, [pc, #128]	; (801dca4 <USB_SetTurnaroundTime+0x13c>)
 801dc22:	4293      	cmp	r3, r2
 801dc24:	d802      	bhi.n	801dc2c <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 801dc26:	2308      	movs	r3, #8
 801dc28:	617b      	str	r3, [r7, #20]
 801dc2a:	e015      	b.n	801dc58 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 801dc2c:	68bb      	ldr	r3, [r7, #8]
 801dc2e:	4a1d      	ldr	r2, [pc, #116]	; (801dca4 <USB_SetTurnaroundTime+0x13c>)
 801dc30:	4293      	cmp	r3, r2
 801dc32:	d906      	bls.n	801dc42 <USB_SetTurnaroundTime+0xda>
 801dc34:	68bb      	ldr	r3, [r7, #8]
 801dc36:	4a1c      	ldr	r2, [pc, #112]	; (801dca8 <USB_SetTurnaroundTime+0x140>)
 801dc38:	4293      	cmp	r3, r2
 801dc3a:	d202      	bcs.n	801dc42 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 801dc3c:	2307      	movs	r3, #7
 801dc3e:	617b      	str	r3, [r7, #20]
 801dc40:	e00a      	b.n	801dc58 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 801dc42:	2306      	movs	r3, #6
 801dc44:	617b      	str	r3, [r7, #20]
 801dc46:	e007      	b.n	801dc58 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 801dc48:	79fb      	ldrb	r3, [r7, #7]
 801dc4a:	2b00      	cmp	r3, #0
 801dc4c:	d102      	bne.n	801dc54 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 801dc4e:	2309      	movs	r3, #9
 801dc50:	617b      	str	r3, [r7, #20]
 801dc52:	e001      	b.n	801dc58 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 801dc54:	2309      	movs	r3, #9
 801dc56:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 801dc58:	68fb      	ldr	r3, [r7, #12]
 801dc5a:	68db      	ldr	r3, [r3, #12]
 801dc5c:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 801dc60:	68fb      	ldr	r3, [r7, #12]
 801dc62:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 801dc64:	68fb      	ldr	r3, [r7, #12]
 801dc66:	68da      	ldr	r2, [r3, #12]
 801dc68:	697b      	ldr	r3, [r7, #20]
 801dc6a:	029b      	lsls	r3, r3, #10
 801dc6c:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 801dc70:	431a      	orrs	r2, r3
 801dc72:	68fb      	ldr	r3, [r7, #12]
 801dc74:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 801dc76:	2300      	movs	r3, #0
}
 801dc78:	4618      	mov	r0, r3
 801dc7a:	371c      	adds	r7, #28
 801dc7c:	46bd      	mov	sp, r7
 801dc7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801dc82:	4770      	bx	lr
 801dc84:	00d8acbf 	.word	0x00d8acbf
 801dc88:	00e4e1c0 	.word	0x00e4e1c0
 801dc8c:	00f42400 	.word	0x00f42400
 801dc90:	01067380 	.word	0x01067380
 801dc94:	011a499f 	.word	0x011a499f
 801dc98:	01312cff 	.word	0x01312cff
 801dc9c:	014ca43f 	.word	0x014ca43f
 801dca0:	016e3600 	.word	0x016e3600
 801dca4:	01a6ab1f 	.word	0x01a6ab1f
 801dca8:	01e84800 	.word	0x01e84800

0801dcac <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 801dcac:	b480      	push	{r7}
 801dcae:	b083      	sub	sp, #12
 801dcb0:	af00      	add	r7, sp, #0
 801dcb2:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 801dcb4:	687b      	ldr	r3, [r7, #4]
 801dcb6:	689b      	ldr	r3, [r3, #8]
 801dcb8:	f043 0201 	orr.w	r2, r3, #1
 801dcbc:	687b      	ldr	r3, [r7, #4]
 801dcbe:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 801dcc0:	2300      	movs	r3, #0
}
 801dcc2:	4618      	mov	r0, r3
 801dcc4:	370c      	adds	r7, #12
 801dcc6:	46bd      	mov	sp, r7
 801dcc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 801dccc:	4770      	bx	lr

0801dcce <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 801dcce:	b480      	push	{r7}
 801dcd0:	b083      	sub	sp, #12
 801dcd2:	af00      	add	r7, sp, #0
 801dcd4:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 801dcd6:	687b      	ldr	r3, [r7, #4]
 801dcd8:	689b      	ldr	r3, [r3, #8]
 801dcda:	f023 0201 	bic.w	r2, r3, #1
 801dcde:	687b      	ldr	r3, [r7, #4]
 801dce0:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 801dce2:	2300      	movs	r3, #0
}
 801dce4:	4618      	mov	r0, r3
 801dce6:	370c      	adds	r7, #12
 801dce8:	46bd      	mov	sp, r7
 801dcea:	f85d 7b04 	ldr.w	r7, [sp], #4
 801dcee:	4770      	bx	lr

0801dcf0 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 801dcf0:	b580      	push	{r7, lr}
 801dcf2:	b084      	sub	sp, #16
 801dcf4:	af00      	add	r7, sp, #0
 801dcf6:	6078      	str	r0, [r7, #4]
 801dcf8:	460b      	mov	r3, r1
 801dcfa:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 801dcfc:	2300      	movs	r3, #0
 801dcfe:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 801dd00:	687b      	ldr	r3, [r7, #4]
 801dd02:	68db      	ldr	r3, [r3, #12]
 801dd04:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 801dd08:	687b      	ldr	r3, [r7, #4]
 801dd0a:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 801dd0c:	78fb      	ldrb	r3, [r7, #3]
 801dd0e:	2b01      	cmp	r3, #1
 801dd10:	d115      	bne.n	801dd3e <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 801dd12:	687b      	ldr	r3, [r7, #4]
 801dd14:	68db      	ldr	r3, [r3, #12]
 801dd16:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 801dd1a:	687b      	ldr	r3, [r7, #4]
 801dd1c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 801dd1e:	2001      	movs	r0, #1
 801dd20:	f7fa fb04 	bl	801832c <HAL_Delay>
      ms++;
 801dd24:	68fb      	ldr	r3, [r7, #12]
 801dd26:	3301      	adds	r3, #1
 801dd28:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 801dd2a:	6878      	ldr	r0, [r7, #4]
 801dd2c:	f001 f96c 	bl	801f008 <USB_GetMode>
 801dd30:	4603      	mov	r3, r0
 801dd32:	2b01      	cmp	r3, #1
 801dd34:	d01e      	beq.n	801dd74 <USB_SetCurrentMode+0x84>
 801dd36:	68fb      	ldr	r3, [r7, #12]
 801dd38:	2b31      	cmp	r3, #49	; 0x31
 801dd3a:	d9f0      	bls.n	801dd1e <USB_SetCurrentMode+0x2e>
 801dd3c:	e01a      	b.n	801dd74 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 801dd3e:	78fb      	ldrb	r3, [r7, #3]
 801dd40:	2b00      	cmp	r3, #0
 801dd42:	d115      	bne.n	801dd70 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 801dd44:	687b      	ldr	r3, [r7, #4]
 801dd46:	68db      	ldr	r3, [r3, #12]
 801dd48:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 801dd4c:	687b      	ldr	r3, [r7, #4]
 801dd4e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 801dd50:	2001      	movs	r0, #1
 801dd52:	f7fa faeb 	bl	801832c <HAL_Delay>
      ms++;
 801dd56:	68fb      	ldr	r3, [r7, #12]
 801dd58:	3301      	adds	r3, #1
 801dd5a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 801dd5c:	6878      	ldr	r0, [r7, #4]
 801dd5e:	f001 f953 	bl	801f008 <USB_GetMode>
 801dd62:	4603      	mov	r3, r0
 801dd64:	2b00      	cmp	r3, #0
 801dd66:	d005      	beq.n	801dd74 <USB_SetCurrentMode+0x84>
 801dd68:	68fb      	ldr	r3, [r7, #12]
 801dd6a:	2b31      	cmp	r3, #49	; 0x31
 801dd6c:	d9f0      	bls.n	801dd50 <USB_SetCurrentMode+0x60>
 801dd6e:	e001      	b.n	801dd74 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 801dd70:	2301      	movs	r3, #1
 801dd72:	e005      	b.n	801dd80 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 801dd74:	68fb      	ldr	r3, [r7, #12]
 801dd76:	2b32      	cmp	r3, #50	; 0x32
 801dd78:	d101      	bne.n	801dd7e <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 801dd7a:	2301      	movs	r3, #1
 801dd7c:	e000      	b.n	801dd80 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 801dd7e:	2300      	movs	r3, #0
}
 801dd80:	4618      	mov	r0, r3
 801dd82:	3710      	adds	r7, #16
 801dd84:	46bd      	mov	sp, r7
 801dd86:	bd80      	pop	{r7, pc}

0801dd88 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 801dd88:	b084      	sub	sp, #16
 801dd8a:	b580      	push	{r7, lr}
 801dd8c:	b086      	sub	sp, #24
 801dd8e:	af00      	add	r7, sp, #0
 801dd90:	6078      	str	r0, [r7, #4]
 801dd92:	f107 0024 	add.w	r0, r7, #36	; 0x24
 801dd96:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 801dd9a:	2300      	movs	r3, #0
 801dd9c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801dd9e:	687b      	ldr	r3, [r7, #4]
 801dda0:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 801dda2:	2300      	movs	r3, #0
 801dda4:	613b      	str	r3, [r7, #16]
 801dda6:	e009      	b.n	801ddbc <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 801dda8:	687a      	ldr	r2, [r7, #4]
 801ddaa:	693b      	ldr	r3, [r7, #16]
 801ddac:	3340      	adds	r3, #64	; 0x40
 801ddae:	009b      	lsls	r3, r3, #2
 801ddb0:	4413      	add	r3, r2
 801ddb2:	2200      	movs	r2, #0
 801ddb4:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 801ddb6:	693b      	ldr	r3, [r7, #16]
 801ddb8:	3301      	adds	r3, #1
 801ddba:	613b      	str	r3, [r7, #16]
 801ddbc:	693b      	ldr	r3, [r7, #16]
 801ddbe:	2b0e      	cmp	r3, #14
 801ddc0:	d9f2      	bls.n	801dda8 <USB_DevInit+0x20>
  }

#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 801ddc2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801ddc4:	2b00      	cmp	r3, #0
 801ddc6:	d11c      	bne.n	801de02 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 801ddc8:	68fb      	ldr	r3, [r7, #12]
 801ddca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801ddce:	685b      	ldr	r3, [r3, #4]
 801ddd0:	68fa      	ldr	r2, [r7, #12]
 801ddd2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 801ddd6:	f043 0302 	orr.w	r3, r3, #2
 801ddda:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 801dddc:	687b      	ldr	r3, [r7, #4]
 801ddde:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801dde0:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 801dde4:	687b      	ldr	r3, [r7, #4]
 801dde6:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 801dde8:	687b      	ldr	r3, [r7, #4]
 801ddea:	681b      	ldr	r3, [r3, #0]
 801ddec:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 801ddf0:	687b      	ldr	r3, [r7, #4]
 801ddf2:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 801ddf4:	687b      	ldr	r3, [r7, #4]
 801ddf6:	681b      	ldr	r3, [r3, #0]
 801ddf8:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 801ddfc:	687b      	ldr	r3, [r7, #4]
 801ddfe:	601a      	str	r2, [r3, #0]
 801de00:	e005      	b.n	801de0e <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 801de02:	687b      	ldr	r3, [r7, #4]
 801de04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801de06:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 801de0a:	687b      	ldr	r3, [r7, #4]
 801de0c:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 801de0e:	68fb      	ldr	r3, [r7, #12]
 801de10:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 801de14:	461a      	mov	r2, r3
 801de16:	2300      	movs	r3, #0
 801de18:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 801de1a:	68fb      	ldr	r3, [r7, #12]
 801de1c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801de20:	4619      	mov	r1, r3
 801de22:	68fb      	ldr	r3, [r7, #12]
 801de24:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801de28:	461a      	mov	r2, r3
 801de2a:	680b      	ldr	r3, [r1, #0]
 801de2c:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 801de2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801de30:	2b01      	cmp	r3, #1
 801de32:	d10c      	bne.n	801de4e <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 801de34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801de36:	2b00      	cmp	r3, #0
 801de38:	d104      	bne.n	801de44 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 801de3a:	2100      	movs	r1, #0
 801de3c:	6878      	ldr	r0, [r7, #4]
 801de3e:	f000 f945 	bl	801e0cc <USB_SetDevSpeed>
 801de42:	e008      	b.n	801de56 <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 801de44:	2101      	movs	r1, #1
 801de46:	6878      	ldr	r0, [r7, #4]
 801de48:	f000 f940 	bl	801e0cc <USB_SetDevSpeed>
 801de4c:	e003      	b.n	801de56 <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 801de4e:	2103      	movs	r1, #3
 801de50:	6878      	ldr	r0, [r7, #4]
 801de52:	f000 f93b 	bl	801e0cc <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 801de56:	2110      	movs	r1, #16
 801de58:	6878      	ldr	r0, [r7, #4]
 801de5a:	f000 f8f3 	bl	801e044 <USB_FlushTxFifo>
 801de5e:	4603      	mov	r3, r0
 801de60:	2b00      	cmp	r3, #0
 801de62:	d001      	beq.n	801de68 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 801de64:	2301      	movs	r3, #1
 801de66:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 801de68:	6878      	ldr	r0, [r7, #4]
 801de6a:	f000 f90f 	bl	801e08c <USB_FlushRxFifo>
 801de6e:	4603      	mov	r3, r0
 801de70:	2b00      	cmp	r3, #0
 801de72:	d001      	beq.n	801de78 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 801de74:	2301      	movs	r3, #1
 801de76:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 801de78:	68fb      	ldr	r3, [r7, #12]
 801de7a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801de7e:	461a      	mov	r2, r3
 801de80:	2300      	movs	r3, #0
 801de82:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 801de84:	68fb      	ldr	r3, [r7, #12]
 801de86:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801de8a:	461a      	mov	r2, r3
 801de8c:	2300      	movs	r3, #0
 801de8e:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 801de90:	68fb      	ldr	r3, [r7, #12]
 801de92:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801de96:	461a      	mov	r2, r3
 801de98:	2300      	movs	r3, #0
 801de9a:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 801de9c:	2300      	movs	r3, #0
 801de9e:	613b      	str	r3, [r7, #16]
 801dea0:	e043      	b.n	801df2a <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 801dea2:	693b      	ldr	r3, [r7, #16]
 801dea4:	015a      	lsls	r2, r3, #5
 801dea6:	68fb      	ldr	r3, [r7, #12]
 801dea8:	4413      	add	r3, r2
 801deaa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801deae:	681b      	ldr	r3, [r3, #0]
 801deb0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 801deb4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 801deb8:	d118      	bne.n	801deec <USB_DevInit+0x164>
    {
      if (i == 0U)
 801deba:	693b      	ldr	r3, [r7, #16]
 801debc:	2b00      	cmp	r3, #0
 801debe:	d10a      	bne.n	801ded6 <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 801dec0:	693b      	ldr	r3, [r7, #16]
 801dec2:	015a      	lsls	r2, r3, #5
 801dec4:	68fb      	ldr	r3, [r7, #12]
 801dec6:	4413      	add	r3, r2
 801dec8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801decc:	461a      	mov	r2, r3
 801dece:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 801ded2:	6013      	str	r3, [r2, #0]
 801ded4:	e013      	b.n	801defe <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 801ded6:	693b      	ldr	r3, [r7, #16]
 801ded8:	015a      	lsls	r2, r3, #5
 801deda:	68fb      	ldr	r3, [r7, #12]
 801dedc:	4413      	add	r3, r2
 801dede:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801dee2:	461a      	mov	r2, r3
 801dee4:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 801dee8:	6013      	str	r3, [r2, #0]
 801deea:	e008      	b.n	801defe <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 801deec:	693b      	ldr	r3, [r7, #16]
 801deee:	015a      	lsls	r2, r3, #5
 801def0:	68fb      	ldr	r3, [r7, #12]
 801def2:	4413      	add	r3, r2
 801def4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801def8:	461a      	mov	r2, r3
 801defa:	2300      	movs	r3, #0
 801defc:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 801defe:	693b      	ldr	r3, [r7, #16]
 801df00:	015a      	lsls	r2, r3, #5
 801df02:	68fb      	ldr	r3, [r7, #12]
 801df04:	4413      	add	r3, r2
 801df06:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801df0a:	461a      	mov	r2, r3
 801df0c:	2300      	movs	r3, #0
 801df0e:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 801df10:	693b      	ldr	r3, [r7, #16]
 801df12:	015a      	lsls	r2, r3, #5
 801df14:	68fb      	ldr	r3, [r7, #12]
 801df16:	4413      	add	r3, r2
 801df18:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801df1c:	461a      	mov	r2, r3
 801df1e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 801df22:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 801df24:	693b      	ldr	r3, [r7, #16]
 801df26:	3301      	adds	r3, #1
 801df28:	613b      	str	r3, [r7, #16]
 801df2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801df2c:	693a      	ldr	r2, [r7, #16]
 801df2e:	429a      	cmp	r2, r3
 801df30:	d3b7      	bcc.n	801dea2 <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 801df32:	2300      	movs	r3, #0
 801df34:	613b      	str	r3, [r7, #16]
 801df36:	e043      	b.n	801dfc0 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 801df38:	693b      	ldr	r3, [r7, #16]
 801df3a:	015a      	lsls	r2, r3, #5
 801df3c:	68fb      	ldr	r3, [r7, #12]
 801df3e:	4413      	add	r3, r2
 801df40:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801df44:	681b      	ldr	r3, [r3, #0]
 801df46:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 801df4a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 801df4e:	d118      	bne.n	801df82 <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 801df50:	693b      	ldr	r3, [r7, #16]
 801df52:	2b00      	cmp	r3, #0
 801df54:	d10a      	bne.n	801df6c <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 801df56:	693b      	ldr	r3, [r7, #16]
 801df58:	015a      	lsls	r2, r3, #5
 801df5a:	68fb      	ldr	r3, [r7, #12]
 801df5c:	4413      	add	r3, r2
 801df5e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801df62:	461a      	mov	r2, r3
 801df64:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 801df68:	6013      	str	r3, [r2, #0]
 801df6a:	e013      	b.n	801df94 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 801df6c:	693b      	ldr	r3, [r7, #16]
 801df6e:	015a      	lsls	r2, r3, #5
 801df70:	68fb      	ldr	r3, [r7, #12]
 801df72:	4413      	add	r3, r2
 801df74:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801df78:	461a      	mov	r2, r3
 801df7a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 801df7e:	6013      	str	r3, [r2, #0]
 801df80:	e008      	b.n	801df94 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 801df82:	693b      	ldr	r3, [r7, #16]
 801df84:	015a      	lsls	r2, r3, #5
 801df86:	68fb      	ldr	r3, [r7, #12]
 801df88:	4413      	add	r3, r2
 801df8a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801df8e:	461a      	mov	r2, r3
 801df90:	2300      	movs	r3, #0
 801df92:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 801df94:	693b      	ldr	r3, [r7, #16]
 801df96:	015a      	lsls	r2, r3, #5
 801df98:	68fb      	ldr	r3, [r7, #12]
 801df9a:	4413      	add	r3, r2
 801df9c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801dfa0:	461a      	mov	r2, r3
 801dfa2:	2300      	movs	r3, #0
 801dfa4:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 801dfa6:	693b      	ldr	r3, [r7, #16]
 801dfa8:	015a      	lsls	r2, r3, #5
 801dfaa:	68fb      	ldr	r3, [r7, #12]
 801dfac:	4413      	add	r3, r2
 801dfae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801dfb2:	461a      	mov	r2, r3
 801dfb4:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 801dfb8:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 801dfba:	693b      	ldr	r3, [r7, #16]
 801dfbc:	3301      	adds	r3, #1
 801dfbe:	613b      	str	r3, [r7, #16]
 801dfc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801dfc2:	693a      	ldr	r2, [r7, #16]
 801dfc4:	429a      	cmp	r2, r3
 801dfc6:	d3b7      	bcc.n	801df38 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 801dfc8:	68fb      	ldr	r3, [r7, #12]
 801dfca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801dfce:	691b      	ldr	r3, [r3, #16]
 801dfd0:	68fa      	ldr	r2, [r7, #12]
 801dfd2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 801dfd6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 801dfda:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 801dfdc:	687b      	ldr	r3, [r7, #4]
 801dfde:	2200      	movs	r2, #0
 801dfe0:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 801dfe2:	687b      	ldr	r3, [r7, #4]
 801dfe4:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 801dfe8:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 801dfea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801dfec:	2b00      	cmp	r3, #0
 801dfee:	d105      	bne.n	801dffc <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 801dff0:	687b      	ldr	r3, [r7, #4]
 801dff2:	699b      	ldr	r3, [r3, #24]
 801dff4:	f043 0210 	orr.w	r2, r3, #16
 801dff8:	687b      	ldr	r3, [r7, #4]
 801dffa:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 801dffc:	687b      	ldr	r3, [r7, #4]
 801dffe:	699a      	ldr	r2, [r3, #24]
 801e000:	4b0f      	ldr	r3, [pc, #60]	; (801e040 <USB_DevInit+0x2b8>)
 801e002:	4313      	orrs	r3, r2
 801e004:	687a      	ldr	r2, [r7, #4]
 801e006:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 801e008:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801e00a:	2b00      	cmp	r3, #0
 801e00c:	d005      	beq.n	801e01a <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 801e00e:	687b      	ldr	r3, [r7, #4]
 801e010:	699b      	ldr	r3, [r3, #24]
 801e012:	f043 0208 	orr.w	r2, r3, #8
 801e016:	687b      	ldr	r3, [r7, #4]
 801e018:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 801e01a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801e01c:	2b01      	cmp	r3, #1
 801e01e:	d107      	bne.n	801e030 <USB_DevInit+0x2a8>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 801e020:	687b      	ldr	r3, [r7, #4]
 801e022:	699b      	ldr	r3, [r3, #24]
 801e024:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 801e028:	f043 0304 	orr.w	r3, r3, #4
 801e02c:	687a      	ldr	r2, [r7, #4]
 801e02e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 801e030:	7dfb      	ldrb	r3, [r7, #23]
}
 801e032:	4618      	mov	r0, r3
 801e034:	3718      	adds	r7, #24
 801e036:	46bd      	mov	sp, r7
 801e038:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 801e03c:	b004      	add	sp, #16
 801e03e:	4770      	bx	lr
 801e040:	803c3800 	.word	0x803c3800

0801e044 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 801e044:	b480      	push	{r7}
 801e046:	b085      	sub	sp, #20
 801e048:	af00      	add	r7, sp, #0
 801e04a:	6078      	str	r0, [r7, #4]
 801e04c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 801e04e:	2300      	movs	r3, #0
 801e050:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 801e052:	683b      	ldr	r3, [r7, #0]
 801e054:	019b      	lsls	r3, r3, #6
 801e056:	f043 0220 	orr.w	r2, r3, #32
 801e05a:	687b      	ldr	r3, [r7, #4]
 801e05c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 801e05e:	68fb      	ldr	r3, [r7, #12]
 801e060:	3301      	adds	r3, #1
 801e062:	60fb      	str	r3, [r7, #12]
 801e064:	4a08      	ldr	r2, [pc, #32]	; (801e088 <USB_FlushTxFifo+0x44>)
 801e066:	4293      	cmp	r3, r2
 801e068:	d901      	bls.n	801e06e <USB_FlushTxFifo+0x2a>
    {
      return HAL_TIMEOUT;
 801e06a:	2303      	movs	r3, #3
 801e06c:	e006      	b.n	801e07c <USB_FlushTxFifo+0x38>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 801e06e:	687b      	ldr	r3, [r7, #4]
 801e070:	691b      	ldr	r3, [r3, #16]
 801e072:	f003 0320 	and.w	r3, r3, #32
 801e076:	2b20      	cmp	r3, #32
 801e078:	d0f1      	beq.n	801e05e <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 801e07a:	2300      	movs	r3, #0
}
 801e07c:	4618      	mov	r0, r3
 801e07e:	3714      	adds	r7, #20
 801e080:	46bd      	mov	sp, r7
 801e082:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e086:	4770      	bx	lr
 801e088:	00030d40 	.word	0x00030d40

0801e08c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 801e08c:	b480      	push	{r7}
 801e08e:	b085      	sub	sp, #20
 801e090:	af00      	add	r7, sp, #0
 801e092:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 801e094:	2300      	movs	r3, #0
 801e096:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 801e098:	687b      	ldr	r3, [r7, #4]
 801e09a:	2210      	movs	r2, #16
 801e09c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 801e09e:	68fb      	ldr	r3, [r7, #12]
 801e0a0:	3301      	adds	r3, #1
 801e0a2:	60fb      	str	r3, [r7, #12]
 801e0a4:	4a08      	ldr	r2, [pc, #32]	; (801e0c8 <USB_FlushRxFifo+0x3c>)
 801e0a6:	4293      	cmp	r3, r2
 801e0a8:	d901      	bls.n	801e0ae <USB_FlushRxFifo+0x22>
    {
      return HAL_TIMEOUT;
 801e0aa:	2303      	movs	r3, #3
 801e0ac:	e006      	b.n	801e0bc <USB_FlushRxFifo+0x30>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 801e0ae:	687b      	ldr	r3, [r7, #4]
 801e0b0:	691b      	ldr	r3, [r3, #16]
 801e0b2:	f003 0310 	and.w	r3, r3, #16
 801e0b6:	2b10      	cmp	r3, #16
 801e0b8:	d0f1      	beq.n	801e09e <USB_FlushRxFifo+0x12>

  return HAL_OK;
 801e0ba:	2300      	movs	r3, #0
}
 801e0bc:	4618      	mov	r0, r3
 801e0be:	3714      	adds	r7, #20
 801e0c0:	46bd      	mov	sp, r7
 801e0c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e0c6:	4770      	bx	lr
 801e0c8:	00030d40 	.word	0x00030d40

0801e0cc <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 801e0cc:	b480      	push	{r7}
 801e0ce:	b085      	sub	sp, #20
 801e0d0:	af00      	add	r7, sp, #0
 801e0d2:	6078      	str	r0, [r7, #4]
 801e0d4:	460b      	mov	r3, r1
 801e0d6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801e0d8:	687b      	ldr	r3, [r7, #4]
 801e0da:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 801e0dc:	68fb      	ldr	r3, [r7, #12]
 801e0de:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801e0e2:	681a      	ldr	r2, [r3, #0]
 801e0e4:	78fb      	ldrb	r3, [r7, #3]
 801e0e6:	68f9      	ldr	r1, [r7, #12]
 801e0e8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 801e0ec:	4313      	orrs	r3, r2
 801e0ee:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 801e0f0:	2300      	movs	r3, #0
}
 801e0f2:	4618      	mov	r0, r3
 801e0f4:	3714      	adds	r7, #20
 801e0f6:	46bd      	mov	sp, r7
 801e0f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e0fc:	4770      	bx	lr

0801e0fe <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 801e0fe:	b480      	push	{r7}
 801e100:	b087      	sub	sp, #28
 801e102:	af00      	add	r7, sp, #0
 801e104:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801e106:	687b      	ldr	r3, [r7, #4]
 801e108:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 801e10a:	693b      	ldr	r3, [r7, #16]
 801e10c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801e110:	689b      	ldr	r3, [r3, #8]
 801e112:	f003 0306 	and.w	r3, r3, #6
 801e116:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 801e118:	68fb      	ldr	r3, [r7, #12]
 801e11a:	2b00      	cmp	r3, #0
 801e11c:	d102      	bne.n	801e124 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 801e11e:	2300      	movs	r3, #0
 801e120:	75fb      	strb	r3, [r7, #23]
 801e122:	e00a      	b.n	801e13a <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 801e124:	68fb      	ldr	r3, [r7, #12]
 801e126:	2b02      	cmp	r3, #2
 801e128:	d002      	beq.n	801e130 <USB_GetDevSpeed+0x32>
 801e12a:	68fb      	ldr	r3, [r7, #12]
 801e12c:	2b06      	cmp	r3, #6
 801e12e:	d102      	bne.n	801e136 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 801e130:	2302      	movs	r3, #2
 801e132:	75fb      	strb	r3, [r7, #23]
 801e134:	e001      	b.n	801e13a <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 801e136:	230f      	movs	r3, #15
 801e138:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 801e13a:	7dfb      	ldrb	r3, [r7, #23]
}
 801e13c:	4618      	mov	r0, r3
 801e13e:	371c      	adds	r7, #28
 801e140:	46bd      	mov	sp, r7
 801e142:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e146:	4770      	bx	lr

0801e148 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 801e148:	b480      	push	{r7}
 801e14a:	b085      	sub	sp, #20
 801e14c:	af00      	add	r7, sp, #0
 801e14e:	6078      	str	r0, [r7, #4]
 801e150:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801e152:	687b      	ldr	r3, [r7, #4]
 801e154:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 801e156:	683b      	ldr	r3, [r7, #0]
 801e158:	781b      	ldrb	r3, [r3, #0]
 801e15a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 801e15c:	683b      	ldr	r3, [r7, #0]
 801e15e:	785b      	ldrb	r3, [r3, #1]
 801e160:	2b01      	cmp	r3, #1
 801e162:	d13a      	bne.n	801e1da <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 801e164:	68fb      	ldr	r3, [r7, #12]
 801e166:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801e16a:	69da      	ldr	r2, [r3, #28]
 801e16c:	683b      	ldr	r3, [r7, #0]
 801e16e:	781b      	ldrb	r3, [r3, #0]
 801e170:	f003 030f 	and.w	r3, r3, #15
 801e174:	2101      	movs	r1, #1
 801e176:	fa01 f303 	lsl.w	r3, r1, r3
 801e17a:	b29b      	uxth	r3, r3
 801e17c:	68f9      	ldr	r1, [r7, #12]
 801e17e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 801e182:	4313      	orrs	r3, r2
 801e184:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 801e186:	68bb      	ldr	r3, [r7, #8]
 801e188:	015a      	lsls	r2, r3, #5
 801e18a:	68fb      	ldr	r3, [r7, #12]
 801e18c:	4413      	add	r3, r2
 801e18e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801e192:	681b      	ldr	r3, [r3, #0]
 801e194:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 801e198:	2b00      	cmp	r3, #0
 801e19a:	d155      	bne.n	801e248 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 801e19c:	68bb      	ldr	r3, [r7, #8]
 801e19e:	015a      	lsls	r2, r3, #5
 801e1a0:	68fb      	ldr	r3, [r7, #12]
 801e1a2:	4413      	add	r3, r2
 801e1a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801e1a8:	681a      	ldr	r2, [r3, #0]
 801e1aa:	683b      	ldr	r3, [r7, #0]
 801e1ac:	689b      	ldr	r3, [r3, #8]
 801e1ae:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 801e1b2:	683b      	ldr	r3, [r7, #0]
 801e1b4:	78db      	ldrb	r3, [r3, #3]
 801e1b6:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 801e1b8:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 801e1ba:	68bb      	ldr	r3, [r7, #8]
 801e1bc:	059b      	lsls	r3, r3, #22
 801e1be:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 801e1c0:	4313      	orrs	r3, r2
 801e1c2:	68ba      	ldr	r2, [r7, #8]
 801e1c4:	0151      	lsls	r1, r2, #5
 801e1c6:	68fa      	ldr	r2, [r7, #12]
 801e1c8:	440a      	add	r2, r1
 801e1ca:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801e1ce:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 801e1d2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 801e1d6:	6013      	str	r3, [r2, #0]
 801e1d8:	e036      	b.n	801e248 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 801e1da:	68fb      	ldr	r3, [r7, #12]
 801e1dc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801e1e0:	69da      	ldr	r2, [r3, #28]
 801e1e2:	683b      	ldr	r3, [r7, #0]
 801e1e4:	781b      	ldrb	r3, [r3, #0]
 801e1e6:	f003 030f 	and.w	r3, r3, #15
 801e1ea:	2101      	movs	r1, #1
 801e1ec:	fa01 f303 	lsl.w	r3, r1, r3
 801e1f0:	041b      	lsls	r3, r3, #16
 801e1f2:	68f9      	ldr	r1, [r7, #12]
 801e1f4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 801e1f8:	4313      	orrs	r3, r2
 801e1fa:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 801e1fc:	68bb      	ldr	r3, [r7, #8]
 801e1fe:	015a      	lsls	r2, r3, #5
 801e200:	68fb      	ldr	r3, [r7, #12]
 801e202:	4413      	add	r3, r2
 801e204:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801e208:	681b      	ldr	r3, [r3, #0]
 801e20a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 801e20e:	2b00      	cmp	r3, #0
 801e210:	d11a      	bne.n	801e248 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 801e212:	68bb      	ldr	r3, [r7, #8]
 801e214:	015a      	lsls	r2, r3, #5
 801e216:	68fb      	ldr	r3, [r7, #12]
 801e218:	4413      	add	r3, r2
 801e21a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801e21e:	681a      	ldr	r2, [r3, #0]
 801e220:	683b      	ldr	r3, [r7, #0]
 801e222:	689b      	ldr	r3, [r3, #8]
 801e224:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 801e228:	683b      	ldr	r3, [r7, #0]
 801e22a:	78db      	ldrb	r3, [r3, #3]
 801e22c:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 801e22e:	430b      	orrs	r3, r1
 801e230:	4313      	orrs	r3, r2
 801e232:	68ba      	ldr	r2, [r7, #8]
 801e234:	0151      	lsls	r1, r2, #5
 801e236:	68fa      	ldr	r2, [r7, #12]
 801e238:	440a      	add	r2, r1
 801e23a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801e23e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 801e242:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 801e246:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 801e248:	2300      	movs	r3, #0
}
 801e24a:	4618      	mov	r0, r3
 801e24c:	3714      	adds	r7, #20
 801e24e:	46bd      	mov	sp, r7
 801e250:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e254:	4770      	bx	lr
	...

0801e258 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 801e258:	b480      	push	{r7}
 801e25a:	b085      	sub	sp, #20
 801e25c:	af00      	add	r7, sp, #0
 801e25e:	6078      	str	r0, [r7, #4]
 801e260:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801e262:	687b      	ldr	r3, [r7, #4]
 801e264:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 801e266:	683b      	ldr	r3, [r7, #0]
 801e268:	781b      	ldrb	r3, [r3, #0]
 801e26a:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 801e26c:	683b      	ldr	r3, [r7, #0]
 801e26e:	785b      	ldrb	r3, [r3, #1]
 801e270:	2b01      	cmp	r3, #1
 801e272:	d161      	bne.n	801e338 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 801e274:	68bb      	ldr	r3, [r7, #8]
 801e276:	015a      	lsls	r2, r3, #5
 801e278:	68fb      	ldr	r3, [r7, #12]
 801e27a:	4413      	add	r3, r2
 801e27c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801e280:	681b      	ldr	r3, [r3, #0]
 801e282:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 801e286:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 801e28a:	d11f      	bne.n	801e2cc <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 801e28c:	68bb      	ldr	r3, [r7, #8]
 801e28e:	015a      	lsls	r2, r3, #5
 801e290:	68fb      	ldr	r3, [r7, #12]
 801e292:	4413      	add	r3, r2
 801e294:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801e298:	681b      	ldr	r3, [r3, #0]
 801e29a:	68ba      	ldr	r2, [r7, #8]
 801e29c:	0151      	lsls	r1, r2, #5
 801e29e:	68fa      	ldr	r2, [r7, #12]
 801e2a0:	440a      	add	r2, r1
 801e2a2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801e2a6:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 801e2aa:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 801e2ac:	68bb      	ldr	r3, [r7, #8]
 801e2ae:	015a      	lsls	r2, r3, #5
 801e2b0:	68fb      	ldr	r3, [r7, #12]
 801e2b2:	4413      	add	r3, r2
 801e2b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801e2b8:	681b      	ldr	r3, [r3, #0]
 801e2ba:	68ba      	ldr	r2, [r7, #8]
 801e2bc:	0151      	lsls	r1, r2, #5
 801e2be:	68fa      	ldr	r2, [r7, #12]
 801e2c0:	440a      	add	r2, r1
 801e2c2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801e2c6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 801e2ca:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 801e2cc:	68fb      	ldr	r3, [r7, #12]
 801e2ce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801e2d2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 801e2d4:	683b      	ldr	r3, [r7, #0]
 801e2d6:	781b      	ldrb	r3, [r3, #0]
 801e2d8:	f003 030f 	and.w	r3, r3, #15
 801e2dc:	2101      	movs	r1, #1
 801e2de:	fa01 f303 	lsl.w	r3, r1, r3
 801e2e2:	b29b      	uxth	r3, r3
 801e2e4:	43db      	mvns	r3, r3
 801e2e6:	68f9      	ldr	r1, [r7, #12]
 801e2e8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 801e2ec:	4013      	ands	r3, r2
 801e2ee:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 801e2f0:	68fb      	ldr	r3, [r7, #12]
 801e2f2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801e2f6:	69da      	ldr	r2, [r3, #28]
 801e2f8:	683b      	ldr	r3, [r7, #0]
 801e2fa:	781b      	ldrb	r3, [r3, #0]
 801e2fc:	f003 030f 	and.w	r3, r3, #15
 801e300:	2101      	movs	r1, #1
 801e302:	fa01 f303 	lsl.w	r3, r1, r3
 801e306:	b29b      	uxth	r3, r3
 801e308:	43db      	mvns	r3, r3
 801e30a:	68f9      	ldr	r1, [r7, #12]
 801e30c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 801e310:	4013      	ands	r3, r2
 801e312:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 801e314:	68bb      	ldr	r3, [r7, #8]
 801e316:	015a      	lsls	r2, r3, #5
 801e318:	68fb      	ldr	r3, [r7, #12]
 801e31a:	4413      	add	r3, r2
 801e31c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801e320:	681a      	ldr	r2, [r3, #0]
 801e322:	68bb      	ldr	r3, [r7, #8]
 801e324:	0159      	lsls	r1, r3, #5
 801e326:	68fb      	ldr	r3, [r7, #12]
 801e328:	440b      	add	r3, r1
 801e32a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801e32e:	4619      	mov	r1, r3
 801e330:	4b35      	ldr	r3, [pc, #212]	; (801e408 <USB_DeactivateEndpoint+0x1b0>)
 801e332:	4013      	ands	r3, r2
 801e334:	600b      	str	r3, [r1, #0]
 801e336:	e060      	b.n	801e3fa <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 801e338:	68bb      	ldr	r3, [r7, #8]
 801e33a:	015a      	lsls	r2, r3, #5
 801e33c:	68fb      	ldr	r3, [r7, #12]
 801e33e:	4413      	add	r3, r2
 801e340:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801e344:	681b      	ldr	r3, [r3, #0]
 801e346:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 801e34a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 801e34e:	d11f      	bne.n	801e390 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 801e350:	68bb      	ldr	r3, [r7, #8]
 801e352:	015a      	lsls	r2, r3, #5
 801e354:	68fb      	ldr	r3, [r7, #12]
 801e356:	4413      	add	r3, r2
 801e358:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801e35c:	681b      	ldr	r3, [r3, #0]
 801e35e:	68ba      	ldr	r2, [r7, #8]
 801e360:	0151      	lsls	r1, r2, #5
 801e362:	68fa      	ldr	r2, [r7, #12]
 801e364:	440a      	add	r2, r1
 801e366:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801e36a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 801e36e:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 801e370:	68bb      	ldr	r3, [r7, #8]
 801e372:	015a      	lsls	r2, r3, #5
 801e374:	68fb      	ldr	r3, [r7, #12]
 801e376:	4413      	add	r3, r2
 801e378:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801e37c:	681b      	ldr	r3, [r3, #0]
 801e37e:	68ba      	ldr	r2, [r7, #8]
 801e380:	0151      	lsls	r1, r2, #5
 801e382:	68fa      	ldr	r2, [r7, #12]
 801e384:	440a      	add	r2, r1
 801e386:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801e38a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 801e38e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 801e390:	68fb      	ldr	r3, [r7, #12]
 801e392:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801e396:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 801e398:	683b      	ldr	r3, [r7, #0]
 801e39a:	781b      	ldrb	r3, [r3, #0]
 801e39c:	f003 030f 	and.w	r3, r3, #15
 801e3a0:	2101      	movs	r1, #1
 801e3a2:	fa01 f303 	lsl.w	r3, r1, r3
 801e3a6:	041b      	lsls	r3, r3, #16
 801e3a8:	43db      	mvns	r3, r3
 801e3aa:	68f9      	ldr	r1, [r7, #12]
 801e3ac:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 801e3b0:	4013      	ands	r3, r2
 801e3b2:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 801e3b4:	68fb      	ldr	r3, [r7, #12]
 801e3b6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801e3ba:	69da      	ldr	r2, [r3, #28]
 801e3bc:	683b      	ldr	r3, [r7, #0]
 801e3be:	781b      	ldrb	r3, [r3, #0]
 801e3c0:	f003 030f 	and.w	r3, r3, #15
 801e3c4:	2101      	movs	r1, #1
 801e3c6:	fa01 f303 	lsl.w	r3, r1, r3
 801e3ca:	041b      	lsls	r3, r3, #16
 801e3cc:	43db      	mvns	r3, r3
 801e3ce:	68f9      	ldr	r1, [r7, #12]
 801e3d0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 801e3d4:	4013      	ands	r3, r2
 801e3d6:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 801e3d8:	68bb      	ldr	r3, [r7, #8]
 801e3da:	015a      	lsls	r2, r3, #5
 801e3dc:	68fb      	ldr	r3, [r7, #12]
 801e3de:	4413      	add	r3, r2
 801e3e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801e3e4:	681a      	ldr	r2, [r3, #0]
 801e3e6:	68bb      	ldr	r3, [r7, #8]
 801e3e8:	0159      	lsls	r1, r3, #5
 801e3ea:	68fb      	ldr	r3, [r7, #12]
 801e3ec:	440b      	add	r3, r1
 801e3ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801e3f2:	4619      	mov	r1, r3
 801e3f4:	4b05      	ldr	r3, [pc, #20]	; (801e40c <USB_DeactivateEndpoint+0x1b4>)
 801e3f6:	4013      	ands	r3, r2
 801e3f8:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 801e3fa:	2300      	movs	r3, #0
}
 801e3fc:	4618      	mov	r0, r3
 801e3fe:	3714      	adds	r7, #20
 801e400:	46bd      	mov	sp, r7
 801e402:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e406:	4770      	bx	lr
 801e408:	ec337800 	.word	0xec337800
 801e40c:	eff37800 	.word	0xeff37800

0801e410 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 801e410:	b580      	push	{r7, lr}
 801e412:	b08a      	sub	sp, #40	; 0x28
 801e414:	af02      	add	r7, sp, #8
 801e416:	60f8      	str	r0, [r7, #12]
 801e418:	60b9      	str	r1, [r7, #8]
 801e41a:	4613      	mov	r3, r2
 801e41c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801e41e:	68fb      	ldr	r3, [r7, #12]
 801e420:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 801e422:	68bb      	ldr	r3, [r7, #8]
 801e424:	781b      	ldrb	r3, [r3, #0]
 801e426:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 801e428:	68bb      	ldr	r3, [r7, #8]
 801e42a:	785b      	ldrb	r3, [r3, #1]
 801e42c:	2b01      	cmp	r3, #1
 801e42e:	f040 815c 	bne.w	801e6ea <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 801e432:	68bb      	ldr	r3, [r7, #8]
 801e434:	695b      	ldr	r3, [r3, #20]
 801e436:	2b00      	cmp	r3, #0
 801e438:	d132      	bne.n	801e4a0 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 801e43a:	69bb      	ldr	r3, [r7, #24]
 801e43c:	015a      	lsls	r2, r3, #5
 801e43e:	69fb      	ldr	r3, [r7, #28]
 801e440:	4413      	add	r3, r2
 801e442:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801e446:	691b      	ldr	r3, [r3, #16]
 801e448:	69ba      	ldr	r2, [r7, #24]
 801e44a:	0151      	lsls	r1, r2, #5
 801e44c:	69fa      	ldr	r2, [r7, #28]
 801e44e:	440a      	add	r2, r1
 801e450:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801e454:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 801e458:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 801e45c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 801e45e:	69bb      	ldr	r3, [r7, #24]
 801e460:	015a      	lsls	r2, r3, #5
 801e462:	69fb      	ldr	r3, [r7, #28]
 801e464:	4413      	add	r3, r2
 801e466:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801e46a:	691b      	ldr	r3, [r3, #16]
 801e46c:	69ba      	ldr	r2, [r7, #24]
 801e46e:	0151      	lsls	r1, r2, #5
 801e470:	69fa      	ldr	r2, [r7, #28]
 801e472:	440a      	add	r2, r1
 801e474:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801e478:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 801e47c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 801e47e:	69bb      	ldr	r3, [r7, #24]
 801e480:	015a      	lsls	r2, r3, #5
 801e482:	69fb      	ldr	r3, [r7, #28]
 801e484:	4413      	add	r3, r2
 801e486:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801e48a:	691b      	ldr	r3, [r3, #16]
 801e48c:	69ba      	ldr	r2, [r7, #24]
 801e48e:	0151      	lsls	r1, r2, #5
 801e490:	69fa      	ldr	r2, [r7, #28]
 801e492:	440a      	add	r2, r1
 801e494:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801e498:	0cdb      	lsrs	r3, r3, #19
 801e49a:	04db      	lsls	r3, r3, #19
 801e49c:	6113      	str	r3, [r2, #16]
 801e49e:	e074      	b.n	801e58a <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 801e4a0:	69bb      	ldr	r3, [r7, #24]
 801e4a2:	015a      	lsls	r2, r3, #5
 801e4a4:	69fb      	ldr	r3, [r7, #28]
 801e4a6:	4413      	add	r3, r2
 801e4a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801e4ac:	691b      	ldr	r3, [r3, #16]
 801e4ae:	69ba      	ldr	r2, [r7, #24]
 801e4b0:	0151      	lsls	r1, r2, #5
 801e4b2:	69fa      	ldr	r2, [r7, #28]
 801e4b4:	440a      	add	r2, r1
 801e4b6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801e4ba:	0cdb      	lsrs	r3, r3, #19
 801e4bc:	04db      	lsls	r3, r3, #19
 801e4be:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 801e4c0:	69bb      	ldr	r3, [r7, #24]
 801e4c2:	015a      	lsls	r2, r3, #5
 801e4c4:	69fb      	ldr	r3, [r7, #28]
 801e4c6:	4413      	add	r3, r2
 801e4c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801e4cc:	691b      	ldr	r3, [r3, #16]
 801e4ce:	69ba      	ldr	r2, [r7, #24]
 801e4d0:	0151      	lsls	r1, r2, #5
 801e4d2:	69fa      	ldr	r2, [r7, #28]
 801e4d4:	440a      	add	r2, r1
 801e4d6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801e4da:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 801e4de:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 801e4e2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 801e4e4:	69bb      	ldr	r3, [r7, #24]
 801e4e6:	015a      	lsls	r2, r3, #5
 801e4e8:	69fb      	ldr	r3, [r7, #28]
 801e4ea:	4413      	add	r3, r2
 801e4ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801e4f0:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 801e4f2:	68bb      	ldr	r3, [r7, #8]
 801e4f4:	6959      	ldr	r1, [r3, #20]
 801e4f6:	68bb      	ldr	r3, [r7, #8]
 801e4f8:	689b      	ldr	r3, [r3, #8]
 801e4fa:	440b      	add	r3, r1
 801e4fc:	1e59      	subs	r1, r3, #1
 801e4fe:	68bb      	ldr	r3, [r7, #8]
 801e500:	689b      	ldr	r3, [r3, #8]
 801e502:	fbb1 f3f3 	udiv	r3, r1, r3
 801e506:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 801e508:	4b9d      	ldr	r3, [pc, #628]	; (801e780 <USB_EPStartXfer+0x370>)
 801e50a:	400b      	ands	r3, r1
 801e50c:	69b9      	ldr	r1, [r7, #24]
 801e50e:	0148      	lsls	r0, r1, #5
 801e510:	69f9      	ldr	r1, [r7, #28]
 801e512:	4401      	add	r1, r0
 801e514:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 801e518:	4313      	orrs	r3, r2
 801e51a:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 801e51c:	69bb      	ldr	r3, [r7, #24]
 801e51e:	015a      	lsls	r2, r3, #5
 801e520:	69fb      	ldr	r3, [r7, #28]
 801e522:	4413      	add	r3, r2
 801e524:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801e528:	691a      	ldr	r2, [r3, #16]
 801e52a:	68bb      	ldr	r3, [r7, #8]
 801e52c:	695b      	ldr	r3, [r3, #20]
 801e52e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 801e532:	69b9      	ldr	r1, [r7, #24]
 801e534:	0148      	lsls	r0, r1, #5
 801e536:	69f9      	ldr	r1, [r7, #28]
 801e538:	4401      	add	r1, r0
 801e53a:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 801e53e:	4313      	orrs	r3, r2
 801e540:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 801e542:	68bb      	ldr	r3, [r7, #8]
 801e544:	78db      	ldrb	r3, [r3, #3]
 801e546:	2b01      	cmp	r3, #1
 801e548:	d11f      	bne.n	801e58a <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 801e54a:	69bb      	ldr	r3, [r7, #24]
 801e54c:	015a      	lsls	r2, r3, #5
 801e54e:	69fb      	ldr	r3, [r7, #28]
 801e550:	4413      	add	r3, r2
 801e552:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801e556:	691b      	ldr	r3, [r3, #16]
 801e558:	69ba      	ldr	r2, [r7, #24]
 801e55a:	0151      	lsls	r1, r2, #5
 801e55c:	69fa      	ldr	r2, [r7, #28]
 801e55e:	440a      	add	r2, r1
 801e560:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801e564:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 801e568:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 801e56a:	69bb      	ldr	r3, [r7, #24]
 801e56c:	015a      	lsls	r2, r3, #5
 801e56e:	69fb      	ldr	r3, [r7, #28]
 801e570:	4413      	add	r3, r2
 801e572:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801e576:	691b      	ldr	r3, [r3, #16]
 801e578:	69ba      	ldr	r2, [r7, #24]
 801e57a:	0151      	lsls	r1, r2, #5
 801e57c:	69fa      	ldr	r2, [r7, #28]
 801e57e:	440a      	add	r2, r1
 801e580:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801e584:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 801e588:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 801e58a:	79fb      	ldrb	r3, [r7, #7]
 801e58c:	2b01      	cmp	r3, #1
 801e58e:	d14b      	bne.n	801e628 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 801e590:	68bb      	ldr	r3, [r7, #8]
 801e592:	691b      	ldr	r3, [r3, #16]
 801e594:	2b00      	cmp	r3, #0
 801e596:	d009      	beq.n	801e5ac <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 801e598:	69bb      	ldr	r3, [r7, #24]
 801e59a:	015a      	lsls	r2, r3, #5
 801e59c:	69fb      	ldr	r3, [r7, #28]
 801e59e:	4413      	add	r3, r2
 801e5a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801e5a4:	461a      	mov	r2, r3
 801e5a6:	68bb      	ldr	r3, [r7, #8]
 801e5a8:	691b      	ldr	r3, [r3, #16]
 801e5aa:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 801e5ac:	68bb      	ldr	r3, [r7, #8]
 801e5ae:	78db      	ldrb	r3, [r3, #3]
 801e5b0:	2b01      	cmp	r3, #1
 801e5b2:	d128      	bne.n	801e606 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 801e5b4:	69fb      	ldr	r3, [r7, #28]
 801e5b6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801e5ba:	689b      	ldr	r3, [r3, #8]
 801e5bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801e5c0:	2b00      	cmp	r3, #0
 801e5c2:	d110      	bne.n	801e5e6 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 801e5c4:	69bb      	ldr	r3, [r7, #24]
 801e5c6:	015a      	lsls	r2, r3, #5
 801e5c8:	69fb      	ldr	r3, [r7, #28]
 801e5ca:	4413      	add	r3, r2
 801e5cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801e5d0:	681b      	ldr	r3, [r3, #0]
 801e5d2:	69ba      	ldr	r2, [r7, #24]
 801e5d4:	0151      	lsls	r1, r2, #5
 801e5d6:	69fa      	ldr	r2, [r7, #28]
 801e5d8:	440a      	add	r2, r1
 801e5da:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801e5de:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 801e5e2:	6013      	str	r3, [r2, #0]
 801e5e4:	e00f      	b.n	801e606 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 801e5e6:	69bb      	ldr	r3, [r7, #24]
 801e5e8:	015a      	lsls	r2, r3, #5
 801e5ea:	69fb      	ldr	r3, [r7, #28]
 801e5ec:	4413      	add	r3, r2
 801e5ee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801e5f2:	681b      	ldr	r3, [r3, #0]
 801e5f4:	69ba      	ldr	r2, [r7, #24]
 801e5f6:	0151      	lsls	r1, r2, #5
 801e5f8:	69fa      	ldr	r2, [r7, #28]
 801e5fa:	440a      	add	r2, r1
 801e5fc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801e600:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 801e604:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 801e606:	69bb      	ldr	r3, [r7, #24]
 801e608:	015a      	lsls	r2, r3, #5
 801e60a:	69fb      	ldr	r3, [r7, #28]
 801e60c:	4413      	add	r3, r2
 801e60e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801e612:	681b      	ldr	r3, [r3, #0]
 801e614:	69ba      	ldr	r2, [r7, #24]
 801e616:	0151      	lsls	r1, r2, #5
 801e618:	69fa      	ldr	r2, [r7, #28]
 801e61a:	440a      	add	r2, r1
 801e61c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801e620:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 801e624:	6013      	str	r3, [r2, #0]
 801e626:	e12f      	b.n	801e888 <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 801e628:	69bb      	ldr	r3, [r7, #24]
 801e62a:	015a      	lsls	r2, r3, #5
 801e62c:	69fb      	ldr	r3, [r7, #28]
 801e62e:	4413      	add	r3, r2
 801e630:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801e634:	681b      	ldr	r3, [r3, #0]
 801e636:	69ba      	ldr	r2, [r7, #24]
 801e638:	0151      	lsls	r1, r2, #5
 801e63a:	69fa      	ldr	r2, [r7, #28]
 801e63c:	440a      	add	r2, r1
 801e63e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801e642:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 801e646:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 801e648:	68bb      	ldr	r3, [r7, #8]
 801e64a:	78db      	ldrb	r3, [r3, #3]
 801e64c:	2b01      	cmp	r3, #1
 801e64e:	d015      	beq.n	801e67c <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 801e650:	68bb      	ldr	r3, [r7, #8]
 801e652:	695b      	ldr	r3, [r3, #20]
 801e654:	2b00      	cmp	r3, #0
 801e656:	f000 8117 	beq.w	801e888 <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 801e65a:	69fb      	ldr	r3, [r7, #28]
 801e65c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801e660:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 801e662:	68bb      	ldr	r3, [r7, #8]
 801e664:	781b      	ldrb	r3, [r3, #0]
 801e666:	f003 030f 	and.w	r3, r3, #15
 801e66a:	2101      	movs	r1, #1
 801e66c:	fa01 f303 	lsl.w	r3, r1, r3
 801e670:	69f9      	ldr	r1, [r7, #28]
 801e672:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 801e676:	4313      	orrs	r3, r2
 801e678:	634b      	str	r3, [r1, #52]	; 0x34
 801e67a:	e105      	b.n	801e888 <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 801e67c:	69fb      	ldr	r3, [r7, #28]
 801e67e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801e682:	689b      	ldr	r3, [r3, #8]
 801e684:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801e688:	2b00      	cmp	r3, #0
 801e68a:	d110      	bne.n	801e6ae <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 801e68c:	69bb      	ldr	r3, [r7, #24]
 801e68e:	015a      	lsls	r2, r3, #5
 801e690:	69fb      	ldr	r3, [r7, #28]
 801e692:	4413      	add	r3, r2
 801e694:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801e698:	681b      	ldr	r3, [r3, #0]
 801e69a:	69ba      	ldr	r2, [r7, #24]
 801e69c:	0151      	lsls	r1, r2, #5
 801e69e:	69fa      	ldr	r2, [r7, #28]
 801e6a0:	440a      	add	r2, r1
 801e6a2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801e6a6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 801e6aa:	6013      	str	r3, [r2, #0]
 801e6ac:	e00f      	b.n	801e6ce <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 801e6ae:	69bb      	ldr	r3, [r7, #24]
 801e6b0:	015a      	lsls	r2, r3, #5
 801e6b2:	69fb      	ldr	r3, [r7, #28]
 801e6b4:	4413      	add	r3, r2
 801e6b6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801e6ba:	681b      	ldr	r3, [r3, #0]
 801e6bc:	69ba      	ldr	r2, [r7, #24]
 801e6be:	0151      	lsls	r1, r2, #5
 801e6c0:	69fa      	ldr	r2, [r7, #28]
 801e6c2:	440a      	add	r2, r1
 801e6c4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801e6c8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 801e6cc:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 801e6ce:	68bb      	ldr	r3, [r7, #8]
 801e6d0:	68d9      	ldr	r1, [r3, #12]
 801e6d2:	68bb      	ldr	r3, [r7, #8]
 801e6d4:	781a      	ldrb	r2, [r3, #0]
 801e6d6:	68bb      	ldr	r3, [r7, #8]
 801e6d8:	695b      	ldr	r3, [r3, #20]
 801e6da:	b298      	uxth	r0, r3
 801e6dc:	79fb      	ldrb	r3, [r7, #7]
 801e6de:	9300      	str	r3, [sp, #0]
 801e6e0:	4603      	mov	r3, r0
 801e6e2:	68f8      	ldr	r0, [r7, #12]
 801e6e4:	f000 fa2b 	bl	801eb3e <USB_WritePacket>
 801e6e8:	e0ce      	b.n	801e888 <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 801e6ea:	69bb      	ldr	r3, [r7, #24]
 801e6ec:	015a      	lsls	r2, r3, #5
 801e6ee:	69fb      	ldr	r3, [r7, #28]
 801e6f0:	4413      	add	r3, r2
 801e6f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801e6f6:	691b      	ldr	r3, [r3, #16]
 801e6f8:	69ba      	ldr	r2, [r7, #24]
 801e6fa:	0151      	lsls	r1, r2, #5
 801e6fc:	69fa      	ldr	r2, [r7, #28]
 801e6fe:	440a      	add	r2, r1
 801e700:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801e704:	0cdb      	lsrs	r3, r3, #19
 801e706:	04db      	lsls	r3, r3, #19
 801e708:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 801e70a:	69bb      	ldr	r3, [r7, #24]
 801e70c:	015a      	lsls	r2, r3, #5
 801e70e:	69fb      	ldr	r3, [r7, #28]
 801e710:	4413      	add	r3, r2
 801e712:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801e716:	691b      	ldr	r3, [r3, #16]
 801e718:	69ba      	ldr	r2, [r7, #24]
 801e71a:	0151      	lsls	r1, r2, #5
 801e71c:	69fa      	ldr	r2, [r7, #28]
 801e71e:	440a      	add	r2, r1
 801e720:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801e724:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 801e728:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 801e72c:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 801e72e:	68bb      	ldr	r3, [r7, #8]
 801e730:	695b      	ldr	r3, [r3, #20]
 801e732:	2b00      	cmp	r3, #0
 801e734:	d126      	bne.n	801e784 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 801e736:	69bb      	ldr	r3, [r7, #24]
 801e738:	015a      	lsls	r2, r3, #5
 801e73a:	69fb      	ldr	r3, [r7, #28]
 801e73c:	4413      	add	r3, r2
 801e73e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801e742:	691a      	ldr	r2, [r3, #16]
 801e744:	68bb      	ldr	r3, [r7, #8]
 801e746:	689b      	ldr	r3, [r3, #8]
 801e748:	f3c3 0312 	ubfx	r3, r3, #0, #19
 801e74c:	69b9      	ldr	r1, [r7, #24]
 801e74e:	0148      	lsls	r0, r1, #5
 801e750:	69f9      	ldr	r1, [r7, #28]
 801e752:	4401      	add	r1, r0
 801e754:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 801e758:	4313      	orrs	r3, r2
 801e75a:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 801e75c:	69bb      	ldr	r3, [r7, #24]
 801e75e:	015a      	lsls	r2, r3, #5
 801e760:	69fb      	ldr	r3, [r7, #28]
 801e762:	4413      	add	r3, r2
 801e764:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801e768:	691b      	ldr	r3, [r3, #16]
 801e76a:	69ba      	ldr	r2, [r7, #24]
 801e76c:	0151      	lsls	r1, r2, #5
 801e76e:	69fa      	ldr	r2, [r7, #28]
 801e770:	440a      	add	r2, r1
 801e772:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801e776:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 801e77a:	6113      	str	r3, [r2, #16]
 801e77c:	e036      	b.n	801e7ec <USB_EPStartXfer+0x3dc>
 801e77e:	bf00      	nop
 801e780:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 801e784:	68bb      	ldr	r3, [r7, #8]
 801e786:	695a      	ldr	r2, [r3, #20]
 801e788:	68bb      	ldr	r3, [r7, #8]
 801e78a:	689b      	ldr	r3, [r3, #8]
 801e78c:	4413      	add	r3, r2
 801e78e:	1e5a      	subs	r2, r3, #1
 801e790:	68bb      	ldr	r3, [r7, #8]
 801e792:	689b      	ldr	r3, [r3, #8]
 801e794:	fbb2 f3f3 	udiv	r3, r2, r3
 801e798:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 801e79a:	69bb      	ldr	r3, [r7, #24]
 801e79c:	015a      	lsls	r2, r3, #5
 801e79e:	69fb      	ldr	r3, [r7, #28]
 801e7a0:	4413      	add	r3, r2
 801e7a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801e7a6:	691a      	ldr	r2, [r3, #16]
 801e7a8:	8afb      	ldrh	r3, [r7, #22]
 801e7aa:	04d9      	lsls	r1, r3, #19
 801e7ac:	4b39      	ldr	r3, [pc, #228]	; (801e894 <USB_EPStartXfer+0x484>)
 801e7ae:	400b      	ands	r3, r1
 801e7b0:	69b9      	ldr	r1, [r7, #24]
 801e7b2:	0148      	lsls	r0, r1, #5
 801e7b4:	69f9      	ldr	r1, [r7, #28]
 801e7b6:	4401      	add	r1, r0
 801e7b8:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 801e7bc:	4313      	orrs	r3, r2
 801e7be:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 801e7c0:	69bb      	ldr	r3, [r7, #24]
 801e7c2:	015a      	lsls	r2, r3, #5
 801e7c4:	69fb      	ldr	r3, [r7, #28]
 801e7c6:	4413      	add	r3, r2
 801e7c8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801e7cc:	691a      	ldr	r2, [r3, #16]
 801e7ce:	68bb      	ldr	r3, [r7, #8]
 801e7d0:	689b      	ldr	r3, [r3, #8]
 801e7d2:	8af9      	ldrh	r1, [r7, #22]
 801e7d4:	fb01 f303 	mul.w	r3, r1, r3
 801e7d8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 801e7dc:	69b9      	ldr	r1, [r7, #24]
 801e7de:	0148      	lsls	r0, r1, #5
 801e7e0:	69f9      	ldr	r1, [r7, #28]
 801e7e2:	4401      	add	r1, r0
 801e7e4:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 801e7e8:	4313      	orrs	r3, r2
 801e7ea:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 801e7ec:	79fb      	ldrb	r3, [r7, #7]
 801e7ee:	2b01      	cmp	r3, #1
 801e7f0:	d10d      	bne.n	801e80e <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 801e7f2:	68bb      	ldr	r3, [r7, #8]
 801e7f4:	68db      	ldr	r3, [r3, #12]
 801e7f6:	2b00      	cmp	r3, #0
 801e7f8:	d009      	beq.n	801e80e <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 801e7fa:	68bb      	ldr	r3, [r7, #8]
 801e7fc:	68d9      	ldr	r1, [r3, #12]
 801e7fe:	69bb      	ldr	r3, [r7, #24]
 801e800:	015a      	lsls	r2, r3, #5
 801e802:	69fb      	ldr	r3, [r7, #28]
 801e804:	4413      	add	r3, r2
 801e806:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801e80a:	460a      	mov	r2, r1
 801e80c:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 801e80e:	68bb      	ldr	r3, [r7, #8]
 801e810:	78db      	ldrb	r3, [r3, #3]
 801e812:	2b01      	cmp	r3, #1
 801e814:	d128      	bne.n	801e868 <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 801e816:	69fb      	ldr	r3, [r7, #28]
 801e818:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801e81c:	689b      	ldr	r3, [r3, #8]
 801e81e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801e822:	2b00      	cmp	r3, #0
 801e824:	d110      	bne.n	801e848 <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 801e826:	69bb      	ldr	r3, [r7, #24]
 801e828:	015a      	lsls	r2, r3, #5
 801e82a:	69fb      	ldr	r3, [r7, #28]
 801e82c:	4413      	add	r3, r2
 801e82e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801e832:	681b      	ldr	r3, [r3, #0]
 801e834:	69ba      	ldr	r2, [r7, #24]
 801e836:	0151      	lsls	r1, r2, #5
 801e838:	69fa      	ldr	r2, [r7, #28]
 801e83a:	440a      	add	r2, r1
 801e83c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801e840:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 801e844:	6013      	str	r3, [r2, #0]
 801e846:	e00f      	b.n	801e868 <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 801e848:	69bb      	ldr	r3, [r7, #24]
 801e84a:	015a      	lsls	r2, r3, #5
 801e84c:	69fb      	ldr	r3, [r7, #28]
 801e84e:	4413      	add	r3, r2
 801e850:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801e854:	681b      	ldr	r3, [r3, #0]
 801e856:	69ba      	ldr	r2, [r7, #24]
 801e858:	0151      	lsls	r1, r2, #5
 801e85a:	69fa      	ldr	r2, [r7, #28]
 801e85c:	440a      	add	r2, r1
 801e85e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801e862:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 801e866:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 801e868:	69bb      	ldr	r3, [r7, #24]
 801e86a:	015a      	lsls	r2, r3, #5
 801e86c:	69fb      	ldr	r3, [r7, #28]
 801e86e:	4413      	add	r3, r2
 801e870:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801e874:	681b      	ldr	r3, [r3, #0]
 801e876:	69ba      	ldr	r2, [r7, #24]
 801e878:	0151      	lsls	r1, r2, #5
 801e87a:	69fa      	ldr	r2, [r7, #28]
 801e87c:	440a      	add	r2, r1
 801e87e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801e882:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 801e886:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 801e888:	2300      	movs	r3, #0
}
 801e88a:	4618      	mov	r0, r3
 801e88c:	3720      	adds	r7, #32
 801e88e:	46bd      	mov	sp, r7
 801e890:	bd80      	pop	{r7, pc}
 801e892:	bf00      	nop
 801e894:	1ff80000 	.word	0x1ff80000

0801e898 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 801e898:	b480      	push	{r7}
 801e89a:	b087      	sub	sp, #28
 801e89c:	af00      	add	r7, sp, #0
 801e89e:	60f8      	str	r0, [r7, #12]
 801e8a0:	60b9      	str	r1, [r7, #8]
 801e8a2:	4613      	mov	r3, r2
 801e8a4:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801e8a6:	68fb      	ldr	r3, [r7, #12]
 801e8a8:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 801e8aa:	68bb      	ldr	r3, [r7, #8]
 801e8ac:	781b      	ldrb	r3, [r3, #0]
 801e8ae:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 801e8b0:	68bb      	ldr	r3, [r7, #8]
 801e8b2:	785b      	ldrb	r3, [r3, #1]
 801e8b4:	2b01      	cmp	r3, #1
 801e8b6:	f040 80cd 	bne.w	801ea54 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 801e8ba:	68bb      	ldr	r3, [r7, #8]
 801e8bc:	695b      	ldr	r3, [r3, #20]
 801e8be:	2b00      	cmp	r3, #0
 801e8c0:	d132      	bne.n	801e928 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 801e8c2:	693b      	ldr	r3, [r7, #16]
 801e8c4:	015a      	lsls	r2, r3, #5
 801e8c6:	697b      	ldr	r3, [r7, #20]
 801e8c8:	4413      	add	r3, r2
 801e8ca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801e8ce:	691b      	ldr	r3, [r3, #16]
 801e8d0:	693a      	ldr	r2, [r7, #16]
 801e8d2:	0151      	lsls	r1, r2, #5
 801e8d4:	697a      	ldr	r2, [r7, #20]
 801e8d6:	440a      	add	r2, r1
 801e8d8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801e8dc:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 801e8e0:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 801e8e4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 801e8e6:	693b      	ldr	r3, [r7, #16]
 801e8e8:	015a      	lsls	r2, r3, #5
 801e8ea:	697b      	ldr	r3, [r7, #20]
 801e8ec:	4413      	add	r3, r2
 801e8ee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801e8f2:	691b      	ldr	r3, [r3, #16]
 801e8f4:	693a      	ldr	r2, [r7, #16]
 801e8f6:	0151      	lsls	r1, r2, #5
 801e8f8:	697a      	ldr	r2, [r7, #20]
 801e8fa:	440a      	add	r2, r1
 801e8fc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801e900:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 801e904:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 801e906:	693b      	ldr	r3, [r7, #16]
 801e908:	015a      	lsls	r2, r3, #5
 801e90a:	697b      	ldr	r3, [r7, #20]
 801e90c:	4413      	add	r3, r2
 801e90e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801e912:	691b      	ldr	r3, [r3, #16]
 801e914:	693a      	ldr	r2, [r7, #16]
 801e916:	0151      	lsls	r1, r2, #5
 801e918:	697a      	ldr	r2, [r7, #20]
 801e91a:	440a      	add	r2, r1
 801e91c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801e920:	0cdb      	lsrs	r3, r3, #19
 801e922:	04db      	lsls	r3, r3, #19
 801e924:	6113      	str	r3, [r2, #16]
 801e926:	e04e      	b.n	801e9c6 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 801e928:	693b      	ldr	r3, [r7, #16]
 801e92a:	015a      	lsls	r2, r3, #5
 801e92c:	697b      	ldr	r3, [r7, #20]
 801e92e:	4413      	add	r3, r2
 801e930:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801e934:	691b      	ldr	r3, [r3, #16]
 801e936:	693a      	ldr	r2, [r7, #16]
 801e938:	0151      	lsls	r1, r2, #5
 801e93a:	697a      	ldr	r2, [r7, #20]
 801e93c:	440a      	add	r2, r1
 801e93e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801e942:	0cdb      	lsrs	r3, r3, #19
 801e944:	04db      	lsls	r3, r3, #19
 801e946:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 801e948:	693b      	ldr	r3, [r7, #16]
 801e94a:	015a      	lsls	r2, r3, #5
 801e94c:	697b      	ldr	r3, [r7, #20]
 801e94e:	4413      	add	r3, r2
 801e950:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801e954:	691b      	ldr	r3, [r3, #16]
 801e956:	693a      	ldr	r2, [r7, #16]
 801e958:	0151      	lsls	r1, r2, #5
 801e95a:	697a      	ldr	r2, [r7, #20]
 801e95c:	440a      	add	r2, r1
 801e95e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801e962:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 801e966:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 801e96a:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 801e96c:	68bb      	ldr	r3, [r7, #8]
 801e96e:	695a      	ldr	r2, [r3, #20]
 801e970:	68bb      	ldr	r3, [r7, #8]
 801e972:	689b      	ldr	r3, [r3, #8]
 801e974:	429a      	cmp	r2, r3
 801e976:	d903      	bls.n	801e980 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 801e978:	68bb      	ldr	r3, [r7, #8]
 801e97a:	689a      	ldr	r2, [r3, #8]
 801e97c:	68bb      	ldr	r3, [r7, #8]
 801e97e:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 801e980:	693b      	ldr	r3, [r7, #16]
 801e982:	015a      	lsls	r2, r3, #5
 801e984:	697b      	ldr	r3, [r7, #20]
 801e986:	4413      	add	r3, r2
 801e988:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801e98c:	691b      	ldr	r3, [r3, #16]
 801e98e:	693a      	ldr	r2, [r7, #16]
 801e990:	0151      	lsls	r1, r2, #5
 801e992:	697a      	ldr	r2, [r7, #20]
 801e994:	440a      	add	r2, r1
 801e996:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801e99a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 801e99e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 801e9a0:	693b      	ldr	r3, [r7, #16]
 801e9a2:	015a      	lsls	r2, r3, #5
 801e9a4:	697b      	ldr	r3, [r7, #20]
 801e9a6:	4413      	add	r3, r2
 801e9a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801e9ac:	691a      	ldr	r2, [r3, #16]
 801e9ae:	68bb      	ldr	r3, [r7, #8]
 801e9b0:	695b      	ldr	r3, [r3, #20]
 801e9b2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 801e9b6:	6939      	ldr	r1, [r7, #16]
 801e9b8:	0148      	lsls	r0, r1, #5
 801e9ba:	6979      	ldr	r1, [r7, #20]
 801e9bc:	4401      	add	r1, r0
 801e9be:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 801e9c2:	4313      	orrs	r3, r2
 801e9c4:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 801e9c6:	79fb      	ldrb	r3, [r7, #7]
 801e9c8:	2b01      	cmp	r3, #1
 801e9ca:	d11e      	bne.n	801ea0a <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 801e9cc:	68bb      	ldr	r3, [r7, #8]
 801e9ce:	691b      	ldr	r3, [r3, #16]
 801e9d0:	2b00      	cmp	r3, #0
 801e9d2:	d009      	beq.n	801e9e8 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 801e9d4:	693b      	ldr	r3, [r7, #16]
 801e9d6:	015a      	lsls	r2, r3, #5
 801e9d8:	697b      	ldr	r3, [r7, #20]
 801e9da:	4413      	add	r3, r2
 801e9dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801e9e0:	461a      	mov	r2, r3
 801e9e2:	68bb      	ldr	r3, [r7, #8]
 801e9e4:	691b      	ldr	r3, [r3, #16]
 801e9e6:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 801e9e8:	693b      	ldr	r3, [r7, #16]
 801e9ea:	015a      	lsls	r2, r3, #5
 801e9ec:	697b      	ldr	r3, [r7, #20]
 801e9ee:	4413      	add	r3, r2
 801e9f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801e9f4:	681b      	ldr	r3, [r3, #0]
 801e9f6:	693a      	ldr	r2, [r7, #16]
 801e9f8:	0151      	lsls	r1, r2, #5
 801e9fa:	697a      	ldr	r2, [r7, #20]
 801e9fc:	440a      	add	r2, r1
 801e9fe:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801ea02:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 801ea06:	6013      	str	r3, [r2, #0]
 801ea08:	e092      	b.n	801eb30 <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 801ea0a:	693b      	ldr	r3, [r7, #16]
 801ea0c:	015a      	lsls	r2, r3, #5
 801ea0e:	697b      	ldr	r3, [r7, #20]
 801ea10:	4413      	add	r3, r2
 801ea12:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801ea16:	681b      	ldr	r3, [r3, #0]
 801ea18:	693a      	ldr	r2, [r7, #16]
 801ea1a:	0151      	lsls	r1, r2, #5
 801ea1c:	697a      	ldr	r2, [r7, #20]
 801ea1e:	440a      	add	r2, r1
 801ea20:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801ea24:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 801ea28:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 801ea2a:	68bb      	ldr	r3, [r7, #8]
 801ea2c:	695b      	ldr	r3, [r3, #20]
 801ea2e:	2b00      	cmp	r3, #0
 801ea30:	d07e      	beq.n	801eb30 <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 801ea32:	697b      	ldr	r3, [r7, #20]
 801ea34:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801ea38:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 801ea3a:	68bb      	ldr	r3, [r7, #8]
 801ea3c:	781b      	ldrb	r3, [r3, #0]
 801ea3e:	f003 030f 	and.w	r3, r3, #15
 801ea42:	2101      	movs	r1, #1
 801ea44:	fa01 f303 	lsl.w	r3, r1, r3
 801ea48:	6979      	ldr	r1, [r7, #20]
 801ea4a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 801ea4e:	4313      	orrs	r3, r2
 801ea50:	634b      	str	r3, [r1, #52]	; 0x34
 801ea52:	e06d      	b.n	801eb30 <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 801ea54:	693b      	ldr	r3, [r7, #16]
 801ea56:	015a      	lsls	r2, r3, #5
 801ea58:	697b      	ldr	r3, [r7, #20]
 801ea5a:	4413      	add	r3, r2
 801ea5c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801ea60:	691b      	ldr	r3, [r3, #16]
 801ea62:	693a      	ldr	r2, [r7, #16]
 801ea64:	0151      	lsls	r1, r2, #5
 801ea66:	697a      	ldr	r2, [r7, #20]
 801ea68:	440a      	add	r2, r1
 801ea6a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801ea6e:	0cdb      	lsrs	r3, r3, #19
 801ea70:	04db      	lsls	r3, r3, #19
 801ea72:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 801ea74:	693b      	ldr	r3, [r7, #16]
 801ea76:	015a      	lsls	r2, r3, #5
 801ea78:	697b      	ldr	r3, [r7, #20]
 801ea7a:	4413      	add	r3, r2
 801ea7c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801ea80:	691b      	ldr	r3, [r3, #16]
 801ea82:	693a      	ldr	r2, [r7, #16]
 801ea84:	0151      	lsls	r1, r2, #5
 801ea86:	697a      	ldr	r2, [r7, #20]
 801ea88:	440a      	add	r2, r1
 801ea8a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801ea8e:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 801ea92:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 801ea96:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 801ea98:	68bb      	ldr	r3, [r7, #8]
 801ea9a:	695b      	ldr	r3, [r3, #20]
 801ea9c:	2b00      	cmp	r3, #0
 801ea9e:	d003      	beq.n	801eaa8 <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 801eaa0:	68bb      	ldr	r3, [r7, #8]
 801eaa2:	689a      	ldr	r2, [r3, #8]
 801eaa4:	68bb      	ldr	r3, [r7, #8]
 801eaa6:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 801eaa8:	693b      	ldr	r3, [r7, #16]
 801eaaa:	015a      	lsls	r2, r3, #5
 801eaac:	697b      	ldr	r3, [r7, #20]
 801eaae:	4413      	add	r3, r2
 801eab0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801eab4:	691b      	ldr	r3, [r3, #16]
 801eab6:	693a      	ldr	r2, [r7, #16]
 801eab8:	0151      	lsls	r1, r2, #5
 801eaba:	697a      	ldr	r2, [r7, #20]
 801eabc:	440a      	add	r2, r1
 801eabe:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801eac2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 801eac6:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 801eac8:	693b      	ldr	r3, [r7, #16]
 801eaca:	015a      	lsls	r2, r3, #5
 801eacc:	697b      	ldr	r3, [r7, #20]
 801eace:	4413      	add	r3, r2
 801ead0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801ead4:	691a      	ldr	r2, [r3, #16]
 801ead6:	68bb      	ldr	r3, [r7, #8]
 801ead8:	689b      	ldr	r3, [r3, #8]
 801eada:	f3c3 0312 	ubfx	r3, r3, #0, #19
 801eade:	6939      	ldr	r1, [r7, #16]
 801eae0:	0148      	lsls	r0, r1, #5
 801eae2:	6979      	ldr	r1, [r7, #20]
 801eae4:	4401      	add	r1, r0
 801eae6:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 801eaea:	4313      	orrs	r3, r2
 801eaec:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 801eaee:	79fb      	ldrb	r3, [r7, #7]
 801eaf0:	2b01      	cmp	r3, #1
 801eaf2:	d10d      	bne.n	801eb10 <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 801eaf4:	68bb      	ldr	r3, [r7, #8]
 801eaf6:	68db      	ldr	r3, [r3, #12]
 801eaf8:	2b00      	cmp	r3, #0
 801eafa:	d009      	beq.n	801eb10 <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 801eafc:	68bb      	ldr	r3, [r7, #8]
 801eafe:	68d9      	ldr	r1, [r3, #12]
 801eb00:	693b      	ldr	r3, [r7, #16]
 801eb02:	015a      	lsls	r2, r3, #5
 801eb04:	697b      	ldr	r3, [r7, #20]
 801eb06:	4413      	add	r3, r2
 801eb08:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801eb0c:	460a      	mov	r2, r1
 801eb0e:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 801eb10:	693b      	ldr	r3, [r7, #16]
 801eb12:	015a      	lsls	r2, r3, #5
 801eb14:	697b      	ldr	r3, [r7, #20]
 801eb16:	4413      	add	r3, r2
 801eb18:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801eb1c:	681b      	ldr	r3, [r3, #0]
 801eb1e:	693a      	ldr	r2, [r7, #16]
 801eb20:	0151      	lsls	r1, r2, #5
 801eb22:	697a      	ldr	r2, [r7, #20]
 801eb24:	440a      	add	r2, r1
 801eb26:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801eb2a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 801eb2e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 801eb30:	2300      	movs	r3, #0
}
 801eb32:	4618      	mov	r0, r3
 801eb34:	371c      	adds	r7, #28
 801eb36:	46bd      	mov	sp, r7
 801eb38:	f85d 7b04 	ldr.w	r7, [sp], #4
 801eb3c:	4770      	bx	lr

0801eb3e <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 801eb3e:	b480      	push	{r7}
 801eb40:	b089      	sub	sp, #36	; 0x24
 801eb42:	af00      	add	r7, sp, #0
 801eb44:	60f8      	str	r0, [r7, #12]
 801eb46:	60b9      	str	r1, [r7, #8]
 801eb48:	4611      	mov	r1, r2
 801eb4a:	461a      	mov	r2, r3
 801eb4c:	460b      	mov	r3, r1
 801eb4e:	71fb      	strb	r3, [r7, #7]
 801eb50:	4613      	mov	r3, r2
 801eb52:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801eb54:	68fb      	ldr	r3, [r7, #12]
 801eb56:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 801eb58:	68bb      	ldr	r3, [r7, #8]
 801eb5a:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 801eb5c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 801eb60:	2b00      	cmp	r3, #0
 801eb62:	d123      	bne.n	801ebac <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 801eb64:	88bb      	ldrh	r3, [r7, #4]
 801eb66:	3303      	adds	r3, #3
 801eb68:	089b      	lsrs	r3, r3, #2
 801eb6a:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 801eb6c:	2300      	movs	r3, #0
 801eb6e:	61bb      	str	r3, [r7, #24]
 801eb70:	e018      	b.n	801eba4 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 801eb72:	79fb      	ldrb	r3, [r7, #7]
 801eb74:	031a      	lsls	r2, r3, #12
 801eb76:	697b      	ldr	r3, [r7, #20]
 801eb78:	4413      	add	r3, r2
 801eb7a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801eb7e:	461a      	mov	r2, r3
 801eb80:	69fb      	ldr	r3, [r7, #28]
 801eb82:	681b      	ldr	r3, [r3, #0]
 801eb84:	6013      	str	r3, [r2, #0]
      pSrc++;
 801eb86:	69fb      	ldr	r3, [r7, #28]
 801eb88:	3301      	adds	r3, #1
 801eb8a:	61fb      	str	r3, [r7, #28]
      pSrc++;
 801eb8c:	69fb      	ldr	r3, [r7, #28]
 801eb8e:	3301      	adds	r3, #1
 801eb90:	61fb      	str	r3, [r7, #28]
      pSrc++;
 801eb92:	69fb      	ldr	r3, [r7, #28]
 801eb94:	3301      	adds	r3, #1
 801eb96:	61fb      	str	r3, [r7, #28]
      pSrc++;
 801eb98:	69fb      	ldr	r3, [r7, #28]
 801eb9a:	3301      	adds	r3, #1
 801eb9c:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 801eb9e:	69bb      	ldr	r3, [r7, #24]
 801eba0:	3301      	adds	r3, #1
 801eba2:	61bb      	str	r3, [r7, #24]
 801eba4:	69ba      	ldr	r2, [r7, #24]
 801eba6:	693b      	ldr	r3, [r7, #16]
 801eba8:	429a      	cmp	r2, r3
 801ebaa:	d3e2      	bcc.n	801eb72 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 801ebac:	2300      	movs	r3, #0
}
 801ebae:	4618      	mov	r0, r3
 801ebb0:	3724      	adds	r7, #36	; 0x24
 801ebb2:	46bd      	mov	sp, r7
 801ebb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ebb8:	4770      	bx	lr

0801ebba <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 801ebba:	b480      	push	{r7}
 801ebbc:	b08b      	sub	sp, #44	; 0x2c
 801ebbe:	af00      	add	r7, sp, #0
 801ebc0:	60f8      	str	r0, [r7, #12]
 801ebc2:	60b9      	str	r1, [r7, #8]
 801ebc4:	4613      	mov	r3, r2
 801ebc6:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801ebc8:	68fb      	ldr	r3, [r7, #12]
 801ebca:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 801ebcc:	68bb      	ldr	r3, [r7, #8]
 801ebce:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 801ebd0:	88fb      	ldrh	r3, [r7, #6]
 801ebd2:	089b      	lsrs	r3, r3, #2
 801ebd4:	b29b      	uxth	r3, r3
 801ebd6:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 801ebd8:	88fb      	ldrh	r3, [r7, #6]
 801ebda:	f003 0303 	and.w	r3, r3, #3
 801ebde:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 801ebe0:	2300      	movs	r3, #0
 801ebe2:	623b      	str	r3, [r7, #32]
 801ebe4:	e014      	b.n	801ec10 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 801ebe6:	69bb      	ldr	r3, [r7, #24]
 801ebe8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801ebec:	681a      	ldr	r2, [r3, #0]
 801ebee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ebf0:	601a      	str	r2, [r3, #0]
    pDest++;
 801ebf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ebf4:	3301      	adds	r3, #1
 801ebf6:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 801ebf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ebfa:	3301      	adds	r3, #1
 801ebfc:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 801ebfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ec00:	3301      	adds	r3, #1
 801ec02:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 801ec04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ec06:	3301      	adds	r3, #1
 801ec08:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 801ec0a:	6a3b      	ldr	r3, [r7, #32]
 801ec0c:	3301      	adds	r3, #1
 801ec0e:	623b      	str	r3, [r7, #32]
 801ec10:	6a3a      	ldr	r2, [r7, #32]
 801ec12:	697b      	ldr	r3, [r7, #20]
 801ec14:	429a      	cmp	r2, r3
 801ec16:	d3e6      	bcc.n	801ebe6 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 801ec18:	8bfb      	ldrh	r3, [r7, #30]
 801ec1a:	2b00      	cmp	r3, #0
 801ec1c:	d01e      	beq.n	801ec5c <USB_ReadPacket+0xa2>
  {
    i = 0U;
 801ec1e:	2300      	movs	r3, #0
 801ec20:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 801ec22:	69bb      	ldr	r3, [r7, #24]
 801ec24:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801ec28:	461a      	mov	r2, r3
 801ec2a:	f107 0310 	add.w	r3, r7, #16
 801ec2e:	6812      	ldr	r2, [r2, #0]
 801ec30:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 801ec32:	693a      	ldr	r2, [r7, #16]
 801ec34:	6a3b      	ldr	r3, [r7, #32]
 801ec36:	b2db      	uxtb	r3, r3
 801ec38:	00db      	lsls	r3, r3, #3
 801ec3a:	fa22 f303 	lsr.w	r3, r2, r3
 801ec3e:	b2da      	uxtb	r2, r3
 801ec40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ec42:	701a      	strb	r2, [r3, #0]
      i++;
 801ec44:	6a3b      	ldr	r3, [r7, #32]
 801ec46:	3301      	adds	r3, #1
 801ec48:	623b      	str	r3, [r7, #32]
      pDest++;
 801ec4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ec4c:	3301      	adds	r3, #1
 801ec4e:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 801ec50:	8bfb      	ldrh	r3, [r7, #30]
 801ec52:	3b01      	subs	r3, #1
 801ec54:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 801ec56:	8bfb      	ldrh	r3, [r7, #30]
 801ec58:	2b00      	cmp	r3, #0
 801ec5a:	d1ea      	bne.n	801ec32 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 801ec5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 801ec5e:	4618      	mov	r0, r3
 801ec60:	372c      	adds	r7, #44	; 0x2c
 801ec62:	46bd      	mov	sp, r7
 801ec64:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ec68:	4770      	bx	lr

0801ec6a <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 801ec6a:	b480      	push	{r7}
 801ec6c:	b085      	sub	sp, #20
 801ec6e:	af00      	add	r7, sp, #0
 801ec70:	6078      	str	r0, [r7, #4]
 801ec72:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801ec74:	687b      	ldr	r3, [r7, #4]
 801ec76:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 801ec78:	683b      	ldr	r3, [r7, #0]
 801ec7a:	781b      	ldrb	r3, [r3, #0]
 801ec7c:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 801ec7e:	683b      	ldr	r3, [r7, #0]
 801ec80:	785b      	ldrb	r3, [r3, #1]
 801ec82:	2b01      	cmp	r3, #1
 801ec84:	d12c      	bne.n	801ece0 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 801ec86:	68bb      	ldr	r3, [r7, #8]
 801ec88:	015a      	lsls	r2, r3, #5
 801ec8a:	68fb      	ldr	r3, [r7, #12]
 801ec8c:	4413      	add	r3, r2
 801ec8e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801ec92:	681b      	ldr	r3, [r3, #0]
 801ec94:	2b00      	cmp	r3, #0
 801ec96:	db12      	blt.n	801ecbe <USB_EPSetStall+0x54>
 801ec98:	68bb      	ldr	r3, [r7, #8]
 801ec9a:	2b00      	cmp	r3, #0
 801ec9c:	d00f      	beq.n	801ecbe <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 801ec9e:	68bb      	ldr	r3, [r7, #8]
 801eca0:	015a      	lsls	r2, r3, #5
 801eca2:	68fb      	ldr	r3, [r7, #12]
 801eca4:	4413      	add	r3, r2
 801eca6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801ecaa:	681b      	ldr	r3, [r3, #0]
 801ecac:	68ba      	ldr	r2, [r7, #8]
 801ecae:	0151      	lsls	r1, r2, #5
 801ecb0:	68fa      	ldr	r2, [r7, #12]
 801ecb2:	440a      	add	r2, r1
 801ecb4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801ecb8:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 801ecbc:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 801ecbe:	68bb      	ldr	r3, [r7, #8]
 801ecc0:	015a      	lsls	r2, r3, #5
 801ecc2:	68fb      	ldr	r3, [r7, #12]
 801ecc4:	4413      	add	r3, r2
 801ecc6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801ecca:	681b      	ldr	r3, [r3, #0]
 801eccc:	68ba      	ldr	r2, [r7, #8]
 801ecce:	0151      	lsls	r1, r2, #5
 801ecd0:	68fa      	ldr	r2, [r7, #12]
 801ecd2:	440a      	add	r2, r1
 801ecd4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801ecd8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 801ecdc:	6013      	str	r3, [r2, #0]
 801ecde:	e02b      	b.n	801ed38 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 801ece0:	68bb      	ldr	r3, [r7, #8]
 801ece2:	015a      	lsls	r2, r3, #5
 801ece4:	68fb      	ldr	r3, [r7, #12]
 801ece6:	4413      	add	r3, r2
 801ece8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801ecec:	681b      	ldr	r3, [r3, #0]
 801ecee:	2b00      	cmp	r3, #0
 801ecf0:	db12      	blt.n	801ed18 <USB_EPSetStall+0xae>
 801ecf2:	68bb      	ldr	r3, [r7, #8]
 801ecf4:	2b00      	cmp	r3, #0
 801ecf6:	d00f      	beq.n	801ed18 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 801ecf8:	68bb      	ldr	r3, [r7, #8]
 801ecfa:	015a      	lsls	r2, r3, #5
 801ecfc:	68fb      	ldr	r3, [r7, #12]
 801ecfe:	4413      	add	r3, r2
 801ed00:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801ed04:	681b      	ldr	r3, [r3, #0]
 801ed06:	68ba      	ldr	r2, [r7, #8]
 801ed08:	0151      	lsls	r1, r2, #5
 801ed0a:	68fa      	ldr	r2, [r7, #12]
 801ed0c:	440a      	add	r2, r1
 801ed0e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801ed12:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 801ed16:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 801ed18:	68bb      	ldr	r3, [r7, #8]
 801ed1a:	015a      	lsls	r2, r3, #5
 801ed1c:	68fb      	ldr	r3, [r7, #12]
 801ed1e:	4413      	add	r3, r2
 801ed20:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801ed24:	681b      	ldr	r3, [r3, #0]
 801ed26:	68ba      	ldr	r2, [r7, #8]
 801ed28:	0151      	lsls	r1, r2, #5
 801ed2a:	68fa      	ldr	r2, [r7, #12]
 801ed2c:	440a      	add	r2, r1
 801ed2e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801ed32:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 801ed36:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 801ed38:	2300      	movs	r3, #0
}
 801ed3a:	4618      	mov	r0, r3
 801ed3c:	3714      	adds	r7, #20
 801ed3e:	46bd      	mov	sp, r7
 801ed40:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ed44:	4770      	bx	lr

0801ed46 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 801ed46:	b480      	push	{r7}
 801ed48:	b085      	sub	sp, #20
 801ed4a:	af00      	add	r7, sp, #0
 801ed4c:	6078      	str	r0, [r7, #4]
 801ed4e:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801ed50:	687b      	ldr	r3, [r7, #4]
 801ed52:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 801ed54:	683b      	ldr	r3, [r7, #0]
 801ed56:	781b      	ldrb	r3, [r3, #0]
 801ed58:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 801ed5a:	683b      	ldr	r3, [r7, #0]
 801ed5c:	785b      	ldrb	r3, [r3, #1]
 801ed5e:	2b01      	cmp	r3, #1
 801ed60:	d128      	bne.n	801edb4 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 801ed62:	68bb      	ldr	r3, [r7, #8]
 801ed64:	015a      	lsls	r2, r3, #5
 801ed66:	68fb      	ldr	r3, [r7, #12]
 801ed68:	4413      	add	r3, r2
 801ed6a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801ed6e:	681b      	ldr	r3, [r3, #0]
 801ed70:	68ba      	ldr	r2, [r7, #8]
 801ed72:	0151      	lsls	r1, r2, #5
 801ed74:	68fa      	ldr	r2, [r7, #12]
 801ed76:	440a      	add	r2, r1
 801ed78:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801ed7c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 801ed80:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 801ed82:	683b      	ldr	r3, [r7, #0]
 801ed84:	78db      	ldrb	r3, [r3, #3]
 801ed86:	2b03      	cmp	r3, #3
 801ed88:	d003      	beq.n	801ed92 <USB_EPClearStall+0x4c>
 801ed8a:	683b      	ldr	r3, [r7, #0]
 801ed8c:	78db      	ldrb	r3, [r3, #3]
 801ed8e:	2b02      	cmp	r3, #2
 801ed90:	d138      	bne.n	801ee04 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 801ed92:	68bb      	ldr	r3, [r7, #8]
 801ed94:	015a      	lsls	r2, r3, #5
 801ed96:	68fb      	ldr	r3, [r7, #12]
 801ed98:	4413      	add	r3, r2
 801ed9a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801ed9e:	681b      	ldr	r3, [r3, #0]
 801eda0:	68ba      	ldr	r2, [r7, #8]
 801eda2:	0151      	lsls	r1, r2, #5
 801eda4:	68fa      	ldr	r2, [r7, #12]
 801eda6:	440a      	add	r2, r1
 801eda8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801edac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 801edb0:	6013      	str	r3, [r2, #0]
 801edb2:	e027      	b.n	801ee04 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 801edb4:	68bb      	ldr	r3, [r7, #8]
 801edb6:	015a      	lsls	r2, r3, #5
 801edb8:	68fb      	ldr	r3, [r7, #12]
 801edba:	4413      	add	r3, r2
 801edbc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801edc0:	681b      	ldr	r3, [r3, #0]
 801edc2:	68ba      	ldr	r2, [r7, #8]
 801edc4:	0151      	lsls	r1, r2, #5
 801edc6:	68fa      	ldr	r2, [r7, #12]
 801edc8:	440a      	add	r2, r1
 801edca:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801edce:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 801edd2:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 801edd4:	683b      	ldr	r3, [r7, #0]
 801edd6:	78db      	ldrb	r3, [r3, #3]
 801edd8:	2b03      	cmp	r3, #3
 801edda:	d003      	beq.n	801ede4 <USB_EPClearStall+0x9e>
 801eddc:	683b      	ldr	r3, [r7, #0]
 801edde:	78db      	ldrb	r3, [r3, #3]
 801ede0:	2b02      	cmp	r3, #2
 801ede2:	d10f      	bne.n	801ee04 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 801ede4:	68bb      	ldr	r3, [r7, #8]
 801ede6:	015a      	lsls	r2, r3, #5
 801ede8:	68fb      	ldr	r3, [r7, #12]
 801edea:	4413      	add	r3, r2
 801edec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801edf0:	681b      	ldr	r3, [r3, #0]
 801edf2:	68ba      	ldr	r2, [r7, #8]
 801edf4:	0151      	lsls	r1, r2, #5
 801edf6:	68fa      	ldr	r2, [r7, #12]
 801edf8:	440a      	add	r2, r1
 801edfa:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801edfe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 801ee02:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 801ee04:	2300      	movs	r3, #0
}
 801ee06:	4618      	mov	r0, r3
 801ee08:	3714      	adds	r7, #20
 801ee0a:	46bd      	mov	sp, r7
 801ee0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ee10:	4770      	bx	lr

0801ee12 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 801ee12:	b480      	push	{r7}
 801ee14:	b085      	sub	sp, #20
 801ee16:	af00      	add	r7, sp, #0
 801ee18:	6078      	str	r0, [r7, #4]
 801ee1a:	460b      	mov	r3, r1
 801ee1c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801ee1e:	687b      	ldr	r3, [r7, #4]
 801ee20:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 801ee22:	68fb      	ldr	r3, [r7, #12]
 801ee24:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801ee28:	681b      	ldr	r3, [r3, #0]
 801ee2a:	68fa      	ldr	r2, [r7, #12]
 801ee2c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 801ee30:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 801ee34:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 801ee36:	68fb      	ldr	r3, [r7, #12]
 801ee38:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801ee3c:	681a      	ldr	r2, [r3, #0]
 801ee3e:	78fb      	ldrb	r3, [r7, #3]
 801ee40:	011b      	lsls	r3, r3, #4
 801ee42:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 801ee46:	68f9      	ldr	r1, [r7, #12]
 801ee48:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 801ee4c:	4313      	orrs	r3, r2
 801ee4e:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 801ee50:	2300      	movs	r3, #0
}
 801ee52:	4618      	mov	r0, r3
 801ee54:	3714      	adds	r7, #20
 801ee56:	46bd      	mov	sp, r7
 801ee58:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ee5c:	4770      	bx	lr

0801ee5e <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 801ee5e:	b480      	push	{r7}
 801ee60:	b085      	sub	sp, #20
 801ee62:	af00      	add	r7, sp, #0
 801ee64:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801ee66:	687b      	ldr	r3, [r7, #4]
 801ee68:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 801ee6a:	68fb      	ldr	r3, [r7, #12]
 801ee6c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 801ee70:	681b      	ldr	r3, [r3, #0]
 801ee72:	68fa      	ldr	r2, [r7, #12]
 801ee74:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 801ee78:	f023 0303 	bic.w	r3, r3, #3
 801ee7c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 801ee7e:	68fb      	ldr	r3, [r7, #12]
 801ee80:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801ee84:	685b      	ldr	r3, [r3, #4]
 801ee86:	68fa      	ldr	r2, [r7, #12]
 801ee88:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 801ee8c:	f023 0302 	bic.w	r3, r3, #2
 801ee90:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 801ee92:	2300      	movs	r3, #0
}
 801ee94:	4618      	mov	r0, r3
 801ee96:	3714      	adds	r7, #20
 801ee98:	46bd      	mov	sp, r7
 801ee9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ee9e:	4770      	bx	lr

0801eea0 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 801eea0:	b480      	push	{r7}
 801eea2:	b085      	sub	sp, #20
 801eea4:	af00      	add	r7, sp, #0
 801eea6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801eea8:	687b      	ldr	r3, [r7, #4]
 801eeaa:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 801eeac:	68fb      	ldr	r3, [r7, #12]
 801eeae:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 801eeb2:	681b      	ldr	r3, [r3, #0]
 801eeb4:	68fa      	ldr	r2, [r7, #12]
 801eeb6:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 801eeba:	f023 0303 	bic.w	r3, r3, #3
 801eebe:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 801eec0:	68fb      	ldr	r3, [r7, #12]
 801eec2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801eec6:	685b      	ldr	r3, [r3, #4]
 801eec8:	68fa      	ldr	r2, [r7, #12]
 801eeca:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 801eece:	f043 0302 	orr.w	r3, r3, #2
 801eed2:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 801eed4:	2300      	movs	r3, #0
}
 801eed6:	4618      	mov	r0, r3
 801eed8:	3714      	adds	r7, #20
 801eeda:	46bd      	mov	sp, r7
 801eedc:	f85d 7b04 	ldr.w	r7, [sp], #4
 801eee0:	4770      	bx	lr

0801eee2 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 801eee2:	b480      	push	{r7}
 801eee4:	b085      	sub	sp, #20
 801eee6:	af00      	add	r7, sp, #0
 801eee8:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 801eeea:	687b      	ldr	r3, [r7, #4]
 801eeec:	695b      	ldr	r3, [r3, #20]
 801eeee:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 801eef0:	687b      	ldr	r3, [r7, #4]
 801eef2:	699b      	ldr	r3, [r3, #24]
 801eef4:	68fa      	ldr	r2, [r7, #12]
 801eef6:	4013      	ands	r3, r2
 801eef8:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 801eefa:	68fb      	ldr	r3, [r7, #12]
}
 801eefc:	4618      	mov	r0, r3
 801eefe:	3714      	adds	r7, #20
 801ef00:	46bd      	mov	sp, r7
 801ef02:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ef06:	4770      	bx	lr

0801ef08 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 801ef08:	b480      	push	{r7}
 801ef0a:	b085      	sub	sp, #20
 801ef0c:	af00      	add	r7, sp, #0
 801ef0e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801ef10:	687b      	ldr	r3, [r7, #4]
 801ef12:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 801ef14:	68fb      	ldr	r3, [r7, #12]
 801ef16:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801ef1a:	699b      	ldr	r3, [r3, #24]
 801ef1c:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 801ef1e:	68fb      	ldr	r3, [r7, #12]
 801ef20:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801ef24:	69db      	ldr	r3, [r3, #28]
 801ef26:	68ba      	ldr	r2, [r7, #8]
 801ef28:	4013      	ands	r3, r2
 801ef2a:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 801ef2c:	68bb      	ldr	r3, [r7, #8]
 801ef2e:	0c1b      	lsrs	r3, r3, #16
}
 801ef30:	4618      	mov	r0, r3
 801ef32:	3714      	adds	r7, #20
 801ef34:	46bd      	mov	sp, r7
 801ef36:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ef3a:	4770      	bx	lr

0801ef3c <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 801ef3c:	b480      	push	{r7}
 801ef3e:	b085      	sub	sp, #20
 801ef40:	af00      	add	r7, sp, #0
 801ef42:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801ef44:	687b      	ldr	r3, [r7, #4]
 801ef46:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 801ef48:	68fb      	ldr	r3, [r7, #12]
 801ef4a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801ef4e:	699b      	ldr	r3, [r3, #24]
 801ef50:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 801ef52:	68fb      	ldr	r3, [r7, #12]
 801ef54:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801ef58:	69db      	ldr	r3, [r3, #28]
 801ef5a:	68ba      	ldr	r2, [r7, #8]
 801ef5c:	4013      	ands	r3, r2
 801ef5e:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 801ef60:	68bb      	ldr	r3, [r7, #8]
 801ef62:	b29b      	uxth	r3, r3
}
 801ef64:	4618      	mov	r0, r3
 801ef66:	3714      	adds	r7, #20
 801ef68:	46bd      	mov	sp, r7
 801ef6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ef6e:	4770      	bx	lr

0801ef70 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 801ef70:	b480      	push	{r7}
 801ef72:	b085      	sub	sp, #20
 801ef74:	af00      	add	r7, sp, #0
 801ef76:	6078      	str	r0, [r7, #4]
 801ef78:	460b      	mov	r3, r1
 801ef7a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801ef7c:	687b      	ldr	r3, [r7, #4]
 801ef7e:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 801ef80:	78fb      	ldrb	r3, [r7, #3]
 801ef82:	015a      	lsls	r2, r3, #5
 801ef84:	68fb      	ldr	r3, [r7, #12]
 801ef86:	4413      	add	r3, r2
 801ef88:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801ef8c:	689b      	ldr	r3, [r3, #8]
 801ef8e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 801ef90:	68fb      	ldr	r3, [r7, #12]
 801ef92:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801ef96:	695b      	ldr	r3, [r3, #20]
 801ef98:	68ba      	ldr	r2, [r7, #8]
 801ef9a:	4013      	ands	r3, r2
 801ef9c:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 801ef9e:	68bb      	ldr	r3, [r7, #8]
}
 801efa0:	4618      	mov	r0, r3
 801efa2:	3714      	adds	r7, #20
 801efa4:	46bd      	mov	sp, r7
 801efa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801efaa:	4770      	bx	lr

0801efac <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 801efac:	b480      	push	{r7}
 801efae:	b087      	sub	sp, #28
 801efb0:	af00      	add	r7, sp, #0
 801efb2:	6078      	str	r0, [r7, #4]
 801efb4:	460b      	mov	r3, r1
 801efb6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801efb8:	687b      	ldr	r3, [r7, #4]
 801efba:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 801efbc:	697b      	ldr	r3, [r7, #20]
 801efbe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801efc2:	691b      	ldr	r3, [r3, #16]
 801efc4:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 801efc6:	697b      	ldr	r3, [r7, #20]
 801efc8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801efcc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801efce:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 801efd0:	78fb      	ldrb	r3, [r7, #3]
 801efd2:	f003 030f 	and.w	r3, r3, #15
 801efd6:	68fa      	ldr	r2, [r7, #12]
 801efd8:	fa22 f303 	lsr.w	r3, r2, r3
 801efdc:	01db      	lsls	r3, r3, #7
 801efde:	b2db      	uxtb	r3, r3
 801efe0:	693a      	ldr	r2, [r7, #16]
 801efe2:	4313      	orrs	r3, r2
 801efe4:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 801efe6:	78fb      	ldrb	r3, [r7, #3]
 801efe8:	015a      	lsls	r2, r3, #5
 801efea:	697b      	ldr	r3, [r7, #20]
 801efec:	4413      	add	r3, r2
 801efee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801eff2:	689b      	ldr	r3, [r3, #8]
 801eff4:	693a      	ldr	r2, [r7, #16]
 801eff6:	4013      	ands	r3, r2
 801eff8:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 801effa:	68bb      	ldr	r3, [r7, #8]
}
 801effc:	4618      	mov	r0, r3
 801effe:	371c      	adds	r7, #28
 801f000:	46bd      	mov	sp, r7
 801f002:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f006:	4770      	bx	lr

0801f008 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 801f008:	b480      	push	{r7}
 801f00a:	b083      	sub	sp, #12
 801f00c:	af00      	add	r7, sp, #0
 801f00e:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 801f010:	687b      	ldr	r3, [r7, #4]
 801f012:	695b      	ldr	r3, [r3, #20]
 801f014:	f003 0301 	and.w	r3, r3, #1
}
 801f018:	4618      	mov	r0, r3
 801f01a:	370c      	adds	r7, #12
 801f01c:	46bd      	mov	sp, r7
 801f01e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f022:	4770      	bx	lr

0801f024 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 801f024:	b480      	push	{r7}
 801f026:	b085      	sub	sp, #20
 801f028:	af00      	add	r7, sp, #0
 801f02a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801f02c:	687b      	ldr	r3, [r7, #4]
 801f02e:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 801f030:	68fb      	ldr	r3, [r7, #12]
 801f032:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801f036:	681b      	ldr	r3, [r3, #0]
 801f038:	68fa      	ldr	r2, [r7, #12]
 801f03a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801f03e:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 801f042:	f023 0307 	bic.w	r3, r3, #7
 801f046:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 801f048:	68fb      	ldr	r3, [r7, #12]
 801f04a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801f04e:	685b      	ldr	r3, [r3, #4]
 801f050:	68fa      	ldr	r2, [r7, #12]
 801f052:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 801f056:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 801f05a:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 801f05c:	2300      	movs	r3, #0
}
 801f05e:	4618      	mov	r0, r3
 801f060:	3714      	adds	r7, #20
 801f062:	46bd      	mov	sp, r7
 801f064:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f068:	4770      	bx	lr
	...

0801f06c <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 801f06c:	b480      	push	{r7}
 801f06e:	b087      	sub	sp, #28
 801f070:	af00      	add	r7, sp, #0
 801f072:	60f8      	str	r0, [r7, #12]
 801f074:	460b      	mov	r3, r1
 801f076:	607a      	str	r2, [r7, #4]
 801f078:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801f07a:	68fb      	ldr	r3, [r7, #12]
 801f07c:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 801f07e:	68fb      	ldr	r3, [r7, #12]
 801f080:	333c      	adds	r3, #60	; 0x3c
 801f082:	3304      	adds	r3, #4
 801f084:	681b      	ldr	r3, [r3, #0]
 801f086:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 801f088:	693b      	ldr	r3, [r7, #16]
 801f08a:	4a26      	ldr	r2, [pc, #152]	; (801f124 <USB_EP0_OutStart+0xb8>)
 801f08c:	4293      	cmp	r3, r2
 801f08e:	d90a      	bls.n	801f0a6 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 801f090:	697b      	ldr	r3, [r7, #20]
 801f092:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801f096:	681b      	ldr	r3, [r3, #0]
 801f098:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 801f09c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 801f0a0:	d101      	bne.n	801f0a6 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 801f0a2:	2300      	movs	r3, #0
 801f0a4:	e037      	b.n	801f116 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 801f0a6:	697b      	ldr	r3, [r7, #20]
 801f0a8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801f0ac:	461a      	mov	r2, r3
 801f0ae:	2300      	movs	r3, #0
 801f0b0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 801f0b2:	697b      	ldr	r3, [r7, #20]
 801f0b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801f0b8:	691b      	ldr	r3, [r3, #16]
 801f0ba:	697a      	ldr	r2, [r7, #20]
 801f0bc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801f0c0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 801f0c4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 801f0c6:	697b      	ldr	r3, [r7, #20]
 801f0c8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801f0cc:	691b      	ldr	r3, [r3, #16]
 801f0ce:	697a      	ldr	r2, [r7, #20]
 801f0d0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801f0d4:	f043 0318 	orr.w	r3, r3, #24
 801f0d8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 801f0da:	697b      	ldr	r3, [r7, #20]
 801f0dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801f0e0:	691b      	ldr	r3, [r3, #16]
 801f0e2:	697a      	ldr	r2, [r7, #20]
 801f0e4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801f0e8:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 801f0ec:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 801f0ee:	7afb      	ldrb	r3, [r7, #11]
 801f0f0:	2b01      	cmp	r3, #1
 801f0f2:	d10f      	bne.n	801f114 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 801f0f4:	697b      	ldr	r3, [r7, #20]
 801f0f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801f0fa:	461a      	mov	r2, r3
 801f0fc:	687b      	ldr	r3, [r7, #4]
 801f0fe:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 801f100:	697b      	ldr	r3, [r7, #20]
 801f102:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801f106:	681b      	ldr	r3, [r3, #0]
 801f108:	697a      	ldr	r2, [r7, #20]
 801f10a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801f10e:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 801f112:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 801f114:	2300      	movs	r3, #0
}
 801f116:	4618      	mov	r0, r3
 801f118:	371c      	adds	r7, #28
 801f11a:	46bd      	mov	sp, r7
 801f11c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f120:	4770      	bx	lr
 801f122:	bf00      	nop
 801f124:	4f54300a 	.word	0x4f54300a

0801f128 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 801f128:	b480      	push	{r7}
 801f12a:	b085      	sub	sp, #20
 801f12c:	af00      	add	r7, sp, #0
 801f12e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 801f130:	2300      	movs	r3, #0
 801f132:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 801f134:	68fb      	ldr	r3, [r7, #12]
 801f136:	3301      	adds	r3, #1
 801f138:	60fb      	str	r3, [r7, #12]
 801f13a:	4a13      	ldr	r2, [pc, #76]	; (801f188 <USB_CoreReset+0x60>)
 801f13c:	4293      	cmp	r3, r2
 801f13e:	d901      	bls.n	801f144 <USB_CoreReset+0x1c>
    {
      return HAL_TIMEOUT;
 801f140:	2303      	movs	r3, #3
 801f142:	e01a      	b.n	801f17a <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 801f144:	687b      	ldr	r3, [r7, #4]
 801f146:	691b      	ldr	r3, [r3, #16]
 801f148:	2b00      	cmp	r3, #0
 801f14a:	daf3      	bge.n	801f134 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 801f14c:	2300      	movs	r3, #0
 801f14e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 801f150:	687b      	ldr	r3, [r7, #4]
 801f152:	691b      	ldr	r3, [r3, #16]
 801f154:	f043 0201 	orr.w	r2, r3, #1
 801f158:	687b      	ldr	r3, [r7, #4]
 801f15a:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 801f15c:	68fb      	ldr	r3, [r7, #12]
 801f15e:	3301      	adds	r3, #1
 801f160:	60fb      	str	r3, [r7, #12]
 801f162:	4a09      	ldr	r2, [pc, #36]	; (801f188 <USB_CoreReset+0x60>)
 801f164:	4293      	cmp	r3, r2
 801f166:	d901      	bls.n	801f16c <USB_CoreReset+0x44>
    {
      return HAL_TIMEOUT;
 801f168:	2303      	movs	r3, #3
 801f16a:	e006      	b.n	801f17a <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 801f16c:	687b      	ldr	r3, [r7, #4]
 801f16e:	691b      	ldr	r3, [r3, #16]
 801f170:	f003 0301 	and.w	r3, r3, #1
 801f174:	2b01      	cmp	r3, #1
 801f176:	d0f1      	beq.n	801f15c <USB_CoreReset+0x34>

  return HAL_OK;
 801f178:	2300      	movs	r3, #0
}
 801f17a:	4618      	mov	r0, r3
 801f17c:	3714      	adds	r7, #20
 801f17e:	46bd      	mov	sp, r7
 801f180:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f184:	4770      	bx	lr
 801f186:	bf00      	nop
 801f188:	00030d40 	.word	0x00030d40

0801f18c <USBD_MSC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
uint8_t USBD_MSC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 801f18c:	b580      	push	{r7, lr}
 801f18e:	b084      	sub	sp, #16
 801f190:	af00      	add	r7, sp, #0
 801f192:	6078      	str	r0, [r7, #4]
 801f194:	460b      	mov	r3, r1
 801f196:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_MSC_BOT_HandleTypeDef *hmsc;

  hmsc = USBD_malloc(sizeof(USBD_MSC_BOT_HandleTypeDef));
 801f198:	f44f 701d 	mov.w	r0, #628	; 0x274
 801f19c:	f003 fc6e 	bl	8022a7c <USBD_static_malloc>
 801f1a0:	60f8      	str	r0, [r7, #12]

  if (hmsc == NULL)
 801f1a2:	68fb      	ldr	r3, [r7, #12]
 801f1a4:	2b00      	cmp	r3, #0
 801f1a6:	d105      	bne.n	801f1b4 <USBD_MSC_Init+0x28>
  {
    pdev->pClassData = NULL;
 801f1a8:	687b      	ldr	r3, [r7, #4]
 801f1aa:	2200      	movs	r2, #0
 801f1ac:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 801f1b0:	2302      	movs	r3, #2
 801f1b2:	e034      	b.n	801f21e <USBD_MSC_Init+0x92>
  }

  pdev->pClassData = (void *)hmsc;
 801f1b4:	687b      	ldr	r3, [r7, #4]
 801f1b6:	68fa      	ldr	r2, [r7, #12]
 801f1b8:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 801f1bc:	687b      	ldr	r3, [r7, #4]
 801f1be:	7c1b      	ldrb	r3, [r3, #16]
 801f1c0:	2b00      	cmp	r3, #0
 801f1c2:	d115      	bne.n	801f1f0 <USBD_MSC_Init+0x64>
  {
    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, MSC_EPOUT_ADDR, USBD_EP_TYPE_BULK, MSC_MAX_HS_PACKET);
 801f1c4:	f44f 7300 	mov.w	r3, #512	; 0x200
 801f1c8:	2202      	movs	r2, #2
 801f1ca:	2101      	movs	r1, #1
 801f1cc:	6878      	ldr	r0, [r7, #4]
 801f1ce:	f003 fac4 	bl	802275a <USBD_LL_OpenEP>
    pdev->ep_out[MSC_EPOUT_ADDR & 0xFU].is_used = 1U;
 801f1d2:	687b      	ldr	r3, [r7, #4]
 801f1d4:	2201      	movs	r2, #1
 801f1d6:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, MSC_EPIN_ADDR, USBD_EP_TYPE_BULK, MSC_MAX_HS_PACKET);
 801f1da:	f44f 7300 	mov.w	r3, #512	; 0x200
 801f1de:	2202      	movs	r2, #2
 801f1e0:	2181      	movs	r1, #129	; 0x81
 801f1e2:	6878      	ldr	r0, [r7, #4]
 801f1e4:	f003 fab9 	bl	802275a <USBD_LL_OpenEP>
    pdev->ep_in[MSC_EPIN_ADDR & 0xFU].is_used = 1U;
 801f1e8:	687b      	ldr	r3, [r7, #4]
 801f1ea:	2201      	movs	r2, #1
 801f1ec:	871a      	strh	r2, [r3, #56]	; 0x38
 801f1ee:	e012      	b.n	801f216 <USBD_MSC_Init+0x8a>
  }
  else
  {
    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, MSC_EPOUT_ADDR, USBD_EP_TYPE_BULK, MSC_MAX_FS_PACKET);
 801f1f0:	2340      	movs	r3, #64	; 0x40
 801f1f2:	2202      	movs	r2, #2
 801f1f4:	2101      	movs	r1, #1
 801f1f6:	6878      	ldr	r0, [r7, #4]
 801f1f8:	f003 faaf 	bl	802275a <USBD_LL_OpenEP>
    pdev->ep_out[MSC_EPOUT_ADDR & 0xFU].is_used = 1U;
 801f1fc:	687b      	ldr	r3, [r7, #4]
 801f1fe:	2201      	movs	r2, #1
 801f200:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, MSC_EPIN_ADDR, USBD_EP_TYPE_BULK, MSC_MAX_FS_PACKET);
 801f204:	2340      	movs	r3, #64	; 0x40
 801f206:	2202      	movs	r2, #2
 801f208:	2181      	movs	r1, #129	; 0x81
 801f20a:	6878      	ldr	r0, [r7, #4]
 801f20c:	f003 faa5 	bl	802275a <USBD_LL_OpenEP>
    pdev->ep_in[MSC_EPIN_ADDR & 0xFU].is_used = 1U;
 801f210:	687b      	ldr	r3, [r7, #4]
 801f212:	2201      	movs	r2, #1
 801f214:	871a      	strh	r2, [r3, #56]	; 0x38
  }

  /* Init the BOT  layer */
  MSC_BOT_Init(pdev);
 801f216:	6878      	ldr	r0, [r7, #4]
 801f218:	f000 f999 	bl	801f54e <MSC_BOT_Init>

  return (uint8_t)USBD_OK;
 801f21c:	2300      	movs	r3, #0
}
 801f21e:	4618      	mov	r0, r3
 801f220:	3710      	adds	r7, #16
 801f222:	46bd      	mov	sp, r7
 801f224:	bd80      	pop	{r7, pc}

0801f226 <USBD_MSC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
uint8_t USBD_MSC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 801f226:	b580      	push	{r7, lr}
 801f228:	b082      	sub	sp, #8
 801f22a:	af00      	add	r7, sp, #0
 801f22c:	6078      	str	r0, [r7, #4]
 801f22e:	460b      	mov	r3, r1
 801f230:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close MSC EPs */
  (void)USBD_LL_CloseEP(pdev, MSC_EPOUT_ADDR);
 801f232:	2101      	movs	r1, #1
 801f234:	6878      	ldr	r0, [r7, #4]
 801f236:	f003 fab6 	bl	80227a6 <USBD_LL_CloseEP>
  pdev->ep_out[MSC_EPOUT_ADDR & 0xFU].is_used = 0U;
 801f23a:	687b      	ldr	r3, [r7, #4]
 801f23c:	2200      	movs	r2, #0
 801f23e:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, MSC_EPIN_ADDR);
 801f242:	2181      	movs	r1, #129	; 0x81
 801f244:	6878      	ldr	r0, [r7, #4]
 801f246:	f003 faae 	bl	80227a6 <USBD_LL_CloseEP>
  pdev->ep_in[MSC_EPIN_ADDR & 0xFU].is_used = 0U;
 801f24a:	687b      	ldr	r3, [r7, #4]
 801f24c:	2200      	movs	r2, #0
 801f24e:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Free MSC Class Resources */
  if (pdev->pClassData != NULL)
 801f250:	687b      	ldr	r3, [r7, #4]
 801f252:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801f256:	2b00      	cmp	r3, #0
 801f258:	d00c      	beq.n	801f274 <USBD_MSC_DeInit+0x4e>
  {
    /* De-Init the BOT layer */
    MSC_BOT_DeInit(pdev);
 801f25a:	6878      	ldr	r0, [r7, #4]
 801f25c:	f000 f9d5 	bl	801f60a <MSC_BOT_DeInit>

    (void)USBD_free(pdev->pClassData);
 801f260:	687b      	ldr	r3, [r7, #4]
 801f262:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801f266:	4618      	mov	r0, r3
 801f268:	f003 fc16 	bl	8022a98 <USBD_static_free>
    pdev->pClassData = NULL;
 801f26c:	687b      	ldr	r3, [r7, #4]
 801f26e:	2200      	movs	r2, #0
 801f270:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 801f274:	2300      	movs	r3, #0
}
 801f276:	4618      	mov	r0, r3
 801f278:	3708      	adds	r7, #8
 801f27a:	46bd      	mov	sp, r7
 801f27c:	bd80      	pop	{r7, pc}
	...

0801f280 <USBD_MSC_Setup>:
  * @param  pdev: device instance
  * @param  req: USB request
  * @retval status
  */
uint8_t USBD_MSC_Setup(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801f280:	b580      	push	{r7, lr}
 801f282:	b086      	sub	sp, #24
 801f284:	af00      	add	r7, sp, #0
 801f286:	6078      	str	r0, [r7, #4]
 801f288:	6039      	str	r1, [r7, #0]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 801f28a:	687b      	ldr	r3, [r7, #4]
 801f28c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801f290:	613b      	str	r3, [r7, #16]
  USBD_StatusTypeDef ret = USBD_OK;
 801f292:	2300      	movs	r3, #0
 801f294:	75fb      	strb	r3, [r7, #23]
  uint16_t status_info = 0U;
 801f296:	2300      	movs	r3, #0
 801f298:	81fb      	strh	r3, [r7, #14]

  if (hmsc == NULL)
 801f29a:	693b      	ldr	r3, [r7, #16]
 801f29c:	2b00      	cmp	r3, #0
 801f29e:	d101      	bne.n	801f2a4 <USBD_MSC_Setup+0x24>
  {
    return (uint8_t)USBD_FAIL;
 801f2a0:	2303      	movs	r3, #3
 801f2a2:	e0db      	b.n	801f45c <USBD_MSC_Setup+0x1dc>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 801f2a4:	683b      	ldr	r3, [r7, #0]
 801f2a6:	781b      	ldrb	r3, [r3, #0]
 801f2a8:	f003 0360 	and.w	r3, r3, #96	; 0x60
 801f2ac:	2b00      	cmp	r3, #0
 801f2ae:	d04e      	beq.n	801f34e <USBD_MSC_Setup+0xce>
 801f2b0:	2b20      	cmp	r3, #32
 801f2b2:	f040 80cb 	bne.w	801f44c <USBD_MSC_Setup+0x1cc>
  {
    /* Class request */
    case USB_REQ_TYPE_CLASS:
      switch (req->bRequest)
 801f2b6:	683b      	ldr	r3, [r7, #0]
 801f2b8:	785b      	ldrb	r3, [r3, #1]
 801f2ba:	2bfe      	cmp	r3, #254	; 0xfe
 801f2bc:	d002      	beq.n	801f2c4 <USBD_MSC_Setup+0x44>
 801f2be:	2bff      	cmp	r3, #255	; 0xff
 801f2c0:	d025      	beq.n	801f30e <USBD_MSC_Setup+0x8e>
 801f2c2:	e03c      	b.n	801f33e <USBD_MSC_Setup+0xbe>
      {
        case BOT_GET_MAX_LUN:
          if ((req->wValue  == 0U) && (req->wLength == 1U) &&
 801f2c4:	683b      	ldr	r3, [r7, #0]
 801f2c6:	885b      	ldrh	r3, [r3, #2]
 801f2c8:	2b00      	cmp	r3, #0
 801f2ca:	d119      	bne.n	801f300 <USBD_MSC_Setup+0x80>
 801f2cc:	683b      	ldr	r3, [r7, #0]
 801f2ce:	88db      	ldrh	r3, [r3, #6]
 801f2d0:	2b01      	cmp	r3, #1
 801f2d2:	d115      	bne.n	801f300 <USBD_MSC_Setup+0x80>
              ((req->bmRequest & 0x80U) == 0x80U))
 801f2d4:	683b      	ldr	r3, [r7, #0]
 801f2d6:	781b      	ldrb	r3, [r3, #0]
 801f2d8:	b25b      	sxtb	r3, r3
          if ((req->wValue  == 0U) && (req->wLength == 1U) &&
 801f2da:	2b00      	cmp	r3, #0
 801f2dc:	da10      	bge.n	801f300 <USBD_MSC_Setup+0x80>
          {
            hmsc->max_lun = (uint32_t)((USBD_StorageTypeDef *)pdev->pUserData)->GetMaxLun();
 801f2de:	687b      	ldr	r3, [r7, #4]
 801f2e0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 801f2e4:	699b      	ldr	r3, [r3, #24]
 801f2e6:	4798      	blx	r3
 801f2e8:	4603      	mov	r3, r0
 801f2ea:	461a      	mov	r2, r3
 801f2ec:	693b      	ldr	r3, [r7, #16]
 801f2ee:	601a      	str	r2, [r3, #0]
            (void)USBD_CtlSendData(pdev, (uint8_t *)&hmsc->max_lun, 1U);
 801f2f0:	693b      	ldr	r3, [r7, #16]
 801f2f2:	2201      	movs	r2, #1
 801f2f4:	4619      	mov	r1, r3
 801f2f6:	6878      	ldr	r0, [r7, #4]
 801f2f8:	f002 fe3d 	bl	8021f76 <USBD_CtlSendData>
 801f2fc:	bf00      	nop
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 801f2fe:	e025      	b.n	801f34c <USBD_MSC_Setup+0xcc>
            USBD_CtlError(pdev, req);
 801f300:	6839      	ldr	r1, [r7, #0]
 801f302:	6878      	ldr	r0, [r7, #4]
 801f304:	f002 fdc6 	bl	8021e94 <USBD_CtlError>
            ret = USBD_FAIL;
 801f308:	2303      	movs	r3, #3
 801f30a:	75fb      	strb	r3, [r7, #23]
          break;
 801f30c:	e01e      	b.n	801f34c <USBD_MSC_Setup+0xcc>

        case BOT_RESET :
          if ((req->wValue  == 0U) && (req->wLength == 0U) &&
 801f30e:	683b      	ldr	r3, [r7, #0]
 801f310:	885b      	ldrh	r3, [r3, #2]
 801f312:	2b00      	cmp	r3, #0
 801f314:	d10c      	bne.n	801f330 <USBD_MSC_Setup+0xb0>
 801f316:	683b      	ldr	r3, [r7, #0]
 801f318:	88db      	ldrh	r3, [r3, #6]
 801f31a:	2b00      	cmp	r3, #0
 801f31c:	d108      	bne.n	801f330 <USBD_MSC_Setup+0xb0>
              ((req->bmRequest & 0x80U) != 0x80U))
 801f31e:	683b      	ldr	r3, [r7, #0]
 801f320:	781b      	ldrb	r3, [r3, #0]
 801f322:	b25b      	sxtb	r3, r3
          if ((req->wValue  == 0U) && (req->wLength == 0U) &&
 801f324:	2b00      	cmp	r3, #0
 801f326:	db03      	blt.n	801f330 <USBD_MSC_Setup+0xb0>
          {
            MSC_BOT_Reset(pdev);
 801f328:	6878      	ldr	r0, [r7, #4]
 801f32a:	f000 f948 	bl	801f5be <MSC_BOT_Reset>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 801f32e:	e00d      	b.n	801f34c <USBD_MSC_Setup+0xcc>
            USBD_CtlError(pdev, req);
 801f330:	6839      	ldr	r1, [r7, #0]
 801f332:	6878      	ldr	r0, [r7, #4]
 801f334:	f002 fdae 	bl	8021e94 <USBD_CtlError>
            ret = USBD_FAIL;
 801f338:	2303      	movs	r3, #3
 801f33a:	75fb      	strb	r3, [r7, #23]
          break;
 801f33c:	e006      	b.n	801f34c <USBD_MSC_Setup+0xcc>

        default:
          USBD_CtlError(pdev, req);
 801f33e:	6839      	ldr	r1, [r7, #0]
 801f340:	6878      	ldr	r0, [r7, #4]
 801f342:	f002 fda7 	bl	8021e94 <USBD_CtlError>
          ret = USBD_FAIL;
 801f346:	2303      	movs	r3, #3
 801f348:	75fb      	strb	r3, [r7, #23]
          break;
 801f34a:	bf00      	nop
      }
      break;
 801f34c:	e085      	b.n	801f45a <USBD_MSC_Setup+0x1da>
    /* Interface & Endpoint request */
    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 801f34e:	683b      	ldr	r3, [r7, #0]
 801f350:	785b      	ldrb	r3, [r3, #1]
 801f352:	2b0b      	cmp	r3, #11
 801f354:	d871      	bhi.n	801f43a <USBD_MSC_Setup+0x1ba>
 801f356:	a201      	add	r2, pc, #4	; (adr r2, 801f35c <USBD_MSC_Setup+0xdc>)
 801f358:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801f35c:	0801f38d 	.word	0x0801f38d
 801f360:	0801f409 	.word	0x0801f409
 801f364:	0801f43b 	.word	0x0801f43b
 801f368:	0801f43b 	.word	0x0801f43b
 801f36c:	0801f43b 	.word	0x0801f43b
 801f370:	0801f43b 	.word	0x0801f43b
 801f374:	0801f43b 	.word	0x0801f43b
 801f378:	0801f43b 	.word	0x0801f43b
 801f37c:	0801f43b 	.word	0x0801f43b
 801f380:	0801f43b 	.word	0x0801f43b
 801f384:	0801f3b7 	.word	0x0801f3b7
 801f388:	0801f3e1 	.word	0x0801f3e1
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801f38c:	687b      	ldr	r3, [r7, #4]
 801f38e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801f392:	b2db      	uxtb	r3, r3
 801f394:	2b03      	cmp	r3, #3
 801f396:	d107      	bne.n	801f3a8 <USBD_MSC_Setup+0x128>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 801f398:	f107 030e 	add.w	r3, r7, #14
 801f39c:	2202      	movs	r2, #2
 801f39e:	4619      	mov	r1, r3
 801f3a0:	6878      	ldr	r0, [r7, #4]
 801f3a2:	f002 fde8 	bl	8021f76 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 801f3a6:	e050      	b.n	801f44a <USBD_MSC_Setup+0x1ca>
            USBD_CtlError(pdev, req);
 801f3a8:	6839      	ldr	r1, [r7, #0]
 801f3aa:	6878      	ldr	r0, [r7, #4]
 801f3ac:	f002 fd72 	bl	8021e94 <USBD_CtlError>
            ret = USBD_FAIL;
 801f3b0:	2303      	movs	r3, #3
 801f3b2:	75fb      	strb	r3, [r7, #23]
          break;
 801f3b4:	e049      	b.n	801f44a <USBD_MSC_Setup+0x1ca>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801f3b6:	687b      	ldr	r3, [r7, #4]
 801f3b8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801f3bc:	b2db      	uxtb	r3, r3
 801f3be:	2b03      	cmp	r3, #3
 801f3c0:	d107      	bne.n	801f3d2 <USBD_MSC_Setup+0x152>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&hmsc->interface, 1U);
 801f3c2:	693b      	ldr	r3, [r7, #16]
 801f3c4:	3304      	adds	r3, #4
 801f3c6:	2201      	movs	r2, #1
 801f3c8:	4619      	mov	r1, r3
 801f3ca:	6878      	ldr	r0, [r7, #4]
 801f3cc:	f002 fdd3 	bl	8021f76 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 801f3d0:	e03b      	b.n	801f44a <USBD_MSC_Setup+0x1ca>
            USBD_CtlError(pdev, req);
 801f3d2:	6839      	ldr	r1, [r7, #0]
 801f3d4:	6878      	ldr	r0, [r7, #4]
 801f3d6:	f002 fd5d 	bl	8021e94 <USBD_CtlError>
            ret = USBD_FAIL;
 801f3da:	2303      	movs	r3, #3
 801f3dc:	75fb      	strb	r3, [r7, #23]
          break;
 801f3de:	e034      	b.n	801f44a <USBD_MSC_Setup+0x1ca>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801f3e0:	687b      	ldr	r3, [r7, #4]
 801f3e2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801f3e6:	b2db      	uxtb	r3, r3
 801f3e8:	2b03      	cmp	r3, #3
 801f3ea:	d106      	bne.n	801f3fa <USBD_MSC_Setup+0x17a>
          {
            hmsc->interface = (uint8_t)(req->wValue);
 801f3ec:	683b      	ldr	r3, [r7, #0]
 801f3ee:	885b      	ldrh	r3, [r3, #2]
 801f3f0:	b2db      	uxtb	r3, r3
 801f3f2:	461a      	mov	r2, r3
 801f3f4:	693b      	ldr	r3, [r7, #16]
 801f3f6:	605a      	str	r2, [r3, #4]
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 801f3f8:	e027      	b.n	801f44a <USBD_MSC_Setup+0x1ca>
            USBD_CtlError(pdev, req);
 801f3fa:	6839      	ldr	r1, [r7, #0]
 801f3fc:	6878      	ldr	r0, [r7, #4]
 801f3fe:	f002 fd49 	bl	8021e94 <USBD_CtlError>
            ret = USBD_FAIL;
 801f402:	2303      	movs	r3, #3
 801f404:	75fb      	strb	r3, [r7, #23]
          break;
 801f406:	e020      	b.n	801f44a <USBD_MSC_Setup+0x1ca>

        case USB_REQ_CLEAR_FEATURE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801f408:	687b      	ldr	r3, [r7, #4]
 801f40a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801f40e:	b2db      	uxtb	r3, r3
 801f410:	2b03      	cmp	r3, #3
 801f412:	d119      	bne.n	801f448 <USBD_MSC_Setup+0x1c8>
          {
            if (req->wValue == USB_FEATURE_EP_HALT)
 801f414:	683b      	ldr	r3, [r7, #0]
 801f416:	885b      	ldrh	r3, [r3, #2]
 801f418:	2b00      	cmp	r3, #0
 801f41a:	d115      	bne.n	801f448 <USBD_MSC_Setup+0x1c8>
            {
              /* Flush the FIFO */
              (void)USBD_LL_FlushEP(pdev, (uint8_t)req->wIndex);
 801f41c:	683b      	ldr	r3, [r7, #0]
 801f41e:	889b      	ldrh	r3, [r3, #4]
 801f420:	b2db      	uxtb	r3, r3
 801f422:	4619      	mov	r1, r3
 801f424:	6878      	ldr	r0, [r7, #4]
 801f426:	f003 f9dd 	bl	80227e4 <USBD_LL_FlushEP>

              /* Handle BOT error */
              MSC_BOT_CplClrFeature(pdev, (uint8_t)req->wIndex);
 801f42a:	683b      	ldr	r3, [r7, #0]
 801f42c:	889b      	ldrh	r3, [r3, #4]
 801f42e:	b2db      	uxtb	r3, r3
 801f430:	4619      	mov	r1, r3
 801f432:	6878      	ldr	r0, [r7, #4]
 801f434:	f000 fa82 	bl	801f93c <MSC_BOT_CplClrFeature>
            }
          }
          break;
 801f438:	e006      	b.n	801f448 <USBD_MSC_Setup+0x1c8>

        default:
          USBD_CtlError(pdev, req);
 801f43a:	6839      	ldr	r1, [r7, #0]
 801f43c:	6878      	ldr	r0, [r7, #4]
 801f43e:	f002 fd29 	bl	8021e94 <USBD_CtlError>
          ret = USBD_FAIL;
 801f442:	2303      	movs	r3, #3
 801f444:	75fb      	strb	r3, [r7, #23]
          break;
 801f446:	e000      	b.n	801f44a <USBD_MSC_Setup+0x1ca>
          break;
 801f448:	bf00      	nop
      }
      break;
 801f44a:	e006      	b.n	801f45a <USBD_MSC_Setup+0x1da>

    default:
      USBD_CtlError(pdev, req);
 801f44c:	6839      	ldr	r1, [r7, #0]
 801f44e:	6878      	ldr	r0, [r7, #4]
 801f450:	f002 fd20 	bl	8021e94 <USBD_CtlError>
      ret = USBD_FAIL;
 801f454:	2303      	movs	r3, #3
 801f456:	75fb      	strb	r3, [r7, #23]
      break;
 801f458:	bf00      	nop
  }

  return (uint8_t)ret;
 801f45a:	7dfb      	ldrb	r3, [r7, #23]
}
 801f45c:	4618      	mov	r0, r3
 801f45e:	3718      	adds	r7, #24
 801f460:	46bd      	mov	sp, r7
 801f462:	bd80      	pop	{r7, pc}

0801f464 <USBD_MSC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
uint8_t USBD_MSC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 801f464:	b580      	push	{r7, lr}
 801f466:	b082      	sub	sp, #8
 801f468:	af00      	add	r7, sp, #0
 801f46a:	6078      	str	r0, [r7, #4]
 801f46c:	460b      	mov	r3, r1
 801f46e:	70fb      	strb	r3, [r7, #3]
  MSC_BOT_DataIn(pdev, epnum);
 801f470:	78fb      	ldrb	r3, [r7, #3]
 801f472:	4619      	mov	r1, r3
 801f474:	6878      	ldr	r0, [r7, #4]
 801f476:	f000 f8dc 	bl	801f632 <MSC_BOT_DataIn>

  return (uint8_t)USBD_OK;
 801f47a:	2300      	movs	r3, #0
}
 801f47c:	4618      	mov	r0, r3
 801f47e:	3708      	adds	r7, #8
 801f480:	46bd      	mov	sp, r7
 801f482:	bd80      	pop	{r7, pc}

0801f484 <USBD_MSC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
uint8_t USBD_MSC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 801f484:	b580      	push	{r7, lr}
 801f486:	b082      	sub	sp, #8
 801f488:	af00      	add	r7, sp, #0
 801f48a:	6078      	str	r0, [r7, #4]
 801f48c:	460b      	mov	r3, r1
 801f48e:	70fb      	strb	r3, [r7, #3]
  MSC_BOT_DataOut(pdev, epnum);
 801f490:	78fb      	ldrb	r3, [r7, #3]
 801f492:	4619      	mov	r1, r3
 801f494:	6878      	ldr	r0, [r7, #4]
 801f496:	f000 f902 	bl	801f69e <MSC_BOT_DataOut>

  return (uint8_t)USBD_OK;
 801f49a:	2300      	movs	r3, #0
}
 801f49c:	4618      	mov	r0, r3
 801f49e:	3708      	adds	r7, #8
 801f4a0:	46bd      	mov	sp, r7
 801f4a2:	bd80      	pop	{r7, pc}

0801f4a4 <USBD_MSC_GetHSCfgDesc>:
  *         return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_MSC_GetHSCfgDesc(uint16_t *length)
{
 801f4a4:	b480      	push	{r7}
 801f4a6:	b083      	sub	sp, #12
 801f4a8:	af00      	add	r7, sp, #0
 801f4aa:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_MSC_CfgHSDesc);
 801f4ac:	687b      	ldr	r3, [r7, #4]
 801f4ae:	2220      	movs	r2, #32
 801f4b0:	801a      	strh	r2, [r3, #0]

  return USBD_MSC_CfgHSDesc;
 801f4b2:	4b03      	ldr	r3, [pc, #12]	; (801f4c0 <USBD_MSC_GetHSCfgDesc+0x1c>)
}
 801f4b4:	4618      	mov	r0, r3
 801f4b6:	370c      	adds	r7, #12
 801f4b8:	46bd      	mov	sp, r7
 801f4ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f4be:	4770      	bx	lr
 801f4c0:	200005cc 	.word	0x200005cc

0801f4c4 <USBD_MSC_GetFSCfgDesc>:
  *         return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_MSC_GetFSCfgDesc(uint16_t *length)
{
 801f4c4:	b480      	push	{r7}
 801f4c6:	b083      	sub	sp, #12
 801f4c8:	af00      	add	r7, sp, #0
 801f4ca:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_MSC_CfgFSDesc);
 801f4cc:	687b      	ldr	r3, [r7, #4]
 801f4ce:	2220      	movs	r2, #32
 801f4d0:	801a      	strh	r2, [r3, #0]

  return USBD_MSC_CfgFSDesc;
 801f4d2:	4b03      	ldr	r3, [pc, #12]	; (801f4e0 <USBD_MSC_GetFSCfgDesc+0x1c>)
}
 801f4d4:	4618      	mov	r0, r3
 801f4d6:	370c      	adds	r7, #12
 801f4d8:	46bd      	mov	sp, r7
 801f4da:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f4de:	4770      	bx	lr
 801f4e0:	200005ec 	.word	0x200005ec

0801f4e4 <USBD_MSC_GetOtherSpeedCfgDesc>:
  *         return other speed configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_MSC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 801f4e4:	b480      	push	{r7}
 801f4e6:	b083      	sub	sp, #12
 801f4e8:	af00      	add	r7, sp, #0
 801f4ea:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_MSC_OtherSpeedCfgDesc);
 801f4ec:	687b      	ldr	r3, [r7, #4]
 801f4ee:	2220      	movs	r2, #32
 801f4f0:	801a      	strh	r2, [r3, #0]

  return USBD_MSC_OtherSpeedCfgDesc;
 801f4f2:	4b03      	ldr	r3, [pc, #12]	; (801f500 <USBD_MSC_GetOtherSpeedCfgDesc+0x1c>)
}
 801f4f4:	4618      	mov	r0, r3
 801f4f6:	370c      	adds	r7, #12
 801f4f8:	46bd      	mov	sp, r7
 801f4fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f4fe:	4770      	bx	lr
 801f500:	2000060c 	.word	0x2000060c

0801f504 <USBD_MSC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_MSC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 801f504:	b480      	push	{r7}
 801f506:	b083      	sub	sp, #12
 801f508:	af00      	add	r7, sp, #0
 801f50a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_MSC_DeviceQualifierDesc);
 801f50c:	687b      	ldr	r3, [r7, #4]
 801f50e:	220a      	movs	r2, #10
 801f510:	801a      	strh	r2, [r3, #0]

  return USBD_MSC_DeviceQualifierDesc;
 801f512:	4b03      	ldr	r3, [pc, #12]	; (801f520 <USBD_MSC_GetDeviceQualifierDescriptor+0x1c>)
}
 801f514:	4618      	mov	r0, r3
 801f516:	370c      	adds	r7, #12
 801f518:	46bd      	mov	sp, r7
 801f51a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f51e:	4770      	bx	lr
 801f520:	2000062c 	.word	0x2000062c

0801f524 <USBD_MSC_RegisterStorage>:
  * @brief  USBD_MSC_RegisterStorage
  * @param  fops: storage callback
  * @retval status
  */
uint8_t USBD_MSC_RegisterStorage(USBD_HandleTypeDef *pdev, USBD_StorageTypeDef *fops)
{
 801f524:	b480      	push	{r7}
 801f526:	b083      	sub	sp, #12
 801f528:	af00      	add	r7, sp, #0
 801f52a:	6078      	str	r0, [r7, #4]
 801f52c:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 801f52e:	683b      	ldr	r3, [r7, #0]
 801f530:	2b00      	cmp	r3, #0
 801f532:	d101      	bne.n	801f538 <USBD_MSC_RegisterStorage+0x14>
  {
    return (uint8_t)USBD_FAIL;
 801f534:	2303      	movs	r3, #3
 801f536:	e004      	b.n	801f542 <USBD_MSC_RegisterStorage+0x1e>
  }

  pdev->pUserData = fops;
 801f538:	687b      	ldr	r3, [r7, #4]
 801f53a:	683a      	ldr	r2, [r7, #0]
 801f53c:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 801f540:	2300      	movs	r3, #0
}
 801f542:	4618      	mov	r0, r3
 801f544:	370c      	adds	r7, #12
 801f546:	46bd      	mov	sp, r7
 801f548:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f54c:	4770      	bx	lr

0801f54e <MSC_BOT_Init>:
  *         Initialize the BOT Process
  * @param  pdev: device instance
  * @retval None
  */
void MSC_BOT_Init(USBD_HandleTypeDef *pdev)
{
 801f54e:	b580      	push	{r7, lr}
 801f550:	b084      	sub	sp, #16
 801f552:	af00      	add	r7, sp, #0
 801f554:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 801f556:	687b      	ldr	r3, [r7, #4]
 801f558:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801f55c:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 801f55e:	68fb      	ldr	r3, [r7, #12]
 801f560:	2b00      	cmp	r3, #0
 801f562:	d028      	beq.n	801f5b6 <MSC_BOT_Init+0x68>
  {
    return;
  }

  hmsc->bot_state = USBD_BOT_IDLE;
 801f564:	68fb      	ldr	r3, [r7, #12]
 801f566:	2200      	movs	r2, #0
 801f568:	721a      	strb	r2, [r3, #8]
  hmsc->bot_status = USBD_BOT_STATUS_NORMAL;
 801f56a:	68fb      	ldr	r3, [r7, #12]
 801f56c:	2200      	movs	r2, #0
 801f56e:	725a      	strb	r2, [r3, #9]

  hmsc->scsi_sense_tail = 0U;
 801f570:	68fb      	ldr	r3, [r7, #12]
 801f572:	2200      	movs	r2, #0
 801f574:	f883 2261 	strb.w	r2, [r3, #609]	; 0x261
  hmsc->scsi_sense_head = 0U;
 801f578:	68fb      	ldr	r3, [r7, #12]
 801f57a:	2200      	movs	r2, #0
 801f57c:	f883 2260 	strb.w	r2, [r3, #608]	; 0x260
  hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 801f580:	68fb      	ldr	r3, [r7, #12]
 801f582:	2200      	movs	r2, #0
 801f584:	f883 2262 	strb.w	r2, [r3, #610]	; 0x262

  ((USBD_StorageTypeDef *)pdev->pUserData)->Init(0U);
 801f588:	687b      	ldr	r3, [r7, #4]
 801f58a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 801f58e:	681b      	ldr	r3, [r3, #0]
 801f590:	2000      	movs	r0, #0
 801f592:	4798      	blx	r3

  (void)USBD_LL_FlushEP(pdev, MSC_EPOUT_ADDR);
 801f594:	2101      	movs	r1, #1
 801f596:	6878      	ldr	r0, [r7, #4]
 801f598:	f003 f924 	bl	80227e4 <USBD_LL_FlushEP>
  (void)USBD_LL_FlushEP(pdev, MSC_EPIN_ADDR);
 801f59c:	2181      	movs	r1, #129	; 0x81
 801f59e:	6878      	ldr	r0, [r7, #4]
 801f5a0:	f003 f920 	bl	80227e4 <USBD_LL_FlushEP>

  /* Prepare EP to Receive First BOT Cmd */
  (void)USBD_LL_PrepareReceive(pdev, MSC_EPOUT_ADDR, (uint8_t *)&hmsc->cbw,
 801f5a4:	68fb      	ldr	r3, [r7, #12]
 801f5a6:	f503 7204 	add.w	r2, r3, #528	; 0x210
 801f5aa:	231f      	movs	r3, #31
 801f5ac:	2101      	movs	r1, #1
 801f5ae:	6878      	ldr	r0, [r7, #4]
 801f5b0:	f003 f9e1 	bl	8022976 <USBD_LL_PrepareReceive>
 801f5b4:	e000      	b.n	801f5b8 <MSC_BOT_Init+0x6a>
    return;
 801f5b6:	bf00      	nop
                               USBD_BOT_CBW_LENGTH);
}
 801f5b8:	3710      	adds	r7, #16
 801f5ba:	46bd      	mov	sp, r7
 801f5bc:	bd80      	pop	{r7, pc}

0801f5be <MSC_BOT_Reset>:
  *         Reset the BOT Machine
  * @param  pdev: device instance
  * @retval  None
  */
void MSC_BOT_Reset(USBD_HandleTypeDef *pdev)
{
 801f5be:	b580      	push	{r7, lr}
 801f5c0:	b084      	sub	sp, #16
 801f5c2:	af00      	add	r7, sp, #0
 801f5c4:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 801f5c6:	687b      	ldr	r3, [r7, #4]
 801f5c8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801f5cc:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 801f5ce:	68fb      	ldr	r3, [r7, #12]
 801f5d0:	2b00      	cmp	r3, #0
 801f5d2:	d016      	beq.n	801f602 <MSC_BOT_Reset+0x44>
  {
    return;
  }

  hmsc->bot_state  = USBD_BOT_IDLE;
 801f5d4:	68fb      	ldr	r3, [r7, #12]
 801f5d6:	2200      	movs	r2, #0
 801f5d8:	721a      	strb	r2, [r3, #8]
  hmsc->bot_status = USBD_BOT_STATUS_RECOVERY;
 801f5da:	68fb      	ldr	r3, [r7, #12]
 801f5dc:	2201      	movs	r2, #1
 801f5de:	725a      	strb	r2, [r3, #9]

  (void)USBD_LL_ClearStallEP(pdev, MSC_EPIN_ADDR);
 801f5e0:	2181      	movs	r1, #129	; 0x81
 801f5e2:	6878      	ldr	r0, [r7, #4]
 801f5e4:	f003 f93c 	bl	8022860 <USBD_LL_ClearStallEP>
  (void)USBD_LL_ClearStallEP(pdev, MSC_EPOUT_ADDR);
 801f5e8:	2101      	movs	r1, #1
 801f5ea:	6878      	ldr	r0, [r7, #4]
 801f5ec:	f003 f938 	bl	8022860 <USBD_LL_ClearStallEP>

  /* Prepare EP to Receive First BOT Cmd */
  (void)USBD_LL_PrepareReceive(pdev, MSC_EPOUT_ADDR, (uint8_t *)&hmsc->cbw,
 801f5f0:	68fb      	ldr	r3, [r7, #12]
 801f5f2:	f503 7204 	add.w	r2, r3, #528	; 0x210
 801f5f6:	231f      	movs	r3, #31
 801f5f8:	2101      	movs	r1, #1
 801f5fa:	6878      	ldr	r0, [r7, #4]
 801f5fc:	f003 f9bb 	bl	8022976 <USBD_LL_PrepareReceive>
 801f600:	e000      	b.n	801f604 <MSC_BOT_Reset+0x46>
    return;
 801f602:	bf00      	nop
                               USBD_BOT_CBW_LENGTH);
}
 801f604:	3710      	adds	r7, #16
 801f606:	46bd      	mov	sp, r7
 801f608:	bd80      	pop	{r7, pc}

0801f60a <MSC_BOT_DeInit>:
  *         DeInitialize the BOT Machine
  * @param  pdev: device instance
  * @retval None
  */
void MSC_BOT_DeInit(USBD_HandleTypeDef  *pdev)
{
 801f60a:	b480      	push	{r7}
 801f60c:	b085      	sub	sp, #20
 801f60e:	af00      	add	r7, sp, #0
 801f610:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 801f612:	687b      	ldr	r3, [r7, #4]
 801f614:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801f618:	60fb      	str	r3, [r7, #12]

  if (hmsc != NULL)
 801f61a:	68fb      	ldr	r3, [r7, #12]
 801f61c:	2b00      	cmp	r3, #0
 801f61e:	d002      	beq.n	801f626 <MSC_BOT_DeInit+0x1c>
  {
    hmsc->bot_state = USBD_BOT_IDLE;
 801f620:	68fb      	ldr	r3, [r7, #12]
 801f622:	2200      	movs	r2, #0
 801f624:	721a      	strb	r2, [r3, #8]
  }
}
 801f626:	bf00      	nop
 801f628:	3714      	adds	r7, #20
 801f62a:	46bd      	mov	sp, r7
 801f62c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f630:	4770      	bx	lr

0801f632 <MSC_BOT_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval None
  */
void MSC_BOT_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 801f632:	b580      	push	{r7, lr}
 801f634:	b084      	sub	sp, #16
 801f636:	af00      	add	r7, sp, #0
 801f638:	6078      	str	r0, [r7, #4]
 801f63a:	460b      	mov	r3, r1
 801f63c:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 801f63e:	687b      	ldr	r3, [r7, #4]
 801f640:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801f644:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 801f646:	68fb      	ldr	r3, [r7, #12]
 801f648:	2b00      	cmp	r3, #0
 801f64a:	d020      	beq.n	801f68e <MSC_BOT_DataIn+0x5c>
  {
    return;
  }

  switch (hmsc->bot_state)
 801f64c:	68fb      	ldr	r3, [r7, #12]
 801f64e:	7a1b      	ldrb	r3, [r3, #8]
 801f650:	2b02      	cmp	r3, #2
 801f652:	d005      	beq.n	801f660 <MSC_BOT_DataIn+0x2e>
 801f654:	2b02      	cmp	r3, #2
 801f656:	db1c      	blt.n	801f692 <MSC_BOT_DataIn+0x60>
 801f658:	3b03      	subs	r3, #3
 801f65a:	2b01      	cmp	r3, #1
 801f65c:	d819      	bhi.n	801f692 <MSC_BOT_DataIn+0x60>
 801f65e:	e011      	b.n	801f684 <MSC_BOT_DataIn+0x52>
  {
    case USBD_BOT_DATA_IN:
      if (SCSI_ProcessCmd(pdev, hmsc->cbw.bLUN, &hmsc->cbw.CB[0]) < 0)
 801f660:	68fb      	ldr	r3, [r7, #12]
 801f662:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 801f666:	68fb      	ldr	r3, [r7, #12]
 801f668:	f203 231f 	addw	r3, r3, #543	; 0x21f
 801f66c:	461a      	mov	r2, r3
 801f66e:	6878      	ldr	r0, [r7, #4]
 801f670:	f000 f992 	bl	801f998 <SCSI_ProcessCmd>
 801f674:	4603      	mov	r3, r0
 801f676:	2b00      	cmp	r3, #0
 801f678:	da0d      	bge.n	801f696 <MSC_BOT_DataIn+0x64>
      {
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 801f67a:	2101      	movs	r1, #1
 801f67c:	6878      	ldr	r0, [r7, #4]
 801f67e:	f000 f8fb 	bl	801f878 <MSC_BOT_SendCSW>
      }
      break;
 801f682:	e008      	b.n	801f696 <MSC_BOT_DataIn+0x64>

    case USBD_BOT_SEND_DATA:
    case USBD_BOT_LAST_DATA_IN:
      MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_PASSED);
 801f684:	2100      	movs	r1, #0
 801f686:	6878      	ldr	r0, [r7, #4]
 801f688:	f000 f8f6 	bl	801f878 <MSC_BOT_SendCSW>
      break;
 801f68c:	e004      	b.n	801f698 <MSC_BOT_DataIn+0x66>
    return;
 801f68e:	bf00      	nop
 801f690:	e002      	b.n	801f698 <MSC_BOT_DataIn+0x66>

    default:
      break;
 801f692:	bf00      	nop
 801f694:	e000      	b.n	801f698 <MSC_BOT_DataIn+0x66>
      break;
 801f696:	bf00      	nop
  }
}
 801f698:	3710      	adds	r7, #16
 801f69a:	46bd      	mov	sp, r7
 801f69c:	bd80      	pop	{r7, pc}

0801f69e <MSC_BOT_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval None
  */
void MSC_BOT_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 801f69e:	b580      	push	{r7, lr}
 801f6a0:	b084      	sub	sp, #16
 801f6a2:	af00      	add	r7, sp, #0
 801f6a4:	6078      	str	r0, [r7, #4]
 801f6a6:	460b      	mov	r3, r1
 801f6a8:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 801f6aa:	687b      	ldr	r3, [r7, #4]
 801f6ac:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801f6b0:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 801f6b2:	68fb      	ldr	r3, [r7, #12]
 801f6b4:	2b00      	cmp	r3, #0
 801f6b6:	d01c      	beq.n	801f6f2 <MSC_BOT_DataOut+0x54>
  {
    return;
  }

  switch (hmsc->bot_state)
 801f6b8:	68fb      	ldr	r3, [r7, #12]
 801f6ba:	7a1b      	ldrb	r3, [r3, #8]
 801f6bc:	2b00      	cmp	r3, #0
 801f6be:	d002      	beq.n	801f6c6 <MSC_BOT_DataOut+0x28>
 801f6c0:	2b01      	cmp	r3, #1
 801f6c2:	d004      	beq.n	801f6ce <MSC_BOT_DataOut+0x30>
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
      }
      break;

    default:
      break;
 801f6c4:	e018      	b.n	801f6f8 <MSC_BOT_DataOut+0x5a>
      MSC_BOT_CBW_Decode(pdev);
 801f6c6:	6878      	ldr	r0, [r7, #4]
 801f6c8:	f000 f81a 	bl	801f700 <MSC_BOT_CBW_Decode>
      break;
 801f6cc:	e014      	b.n	801f6f8 <MSC_BOT_DataOut+0x5a>
      if (SCSI_ProcessCmd(pdev, hmsc->cbw.bLUN, &hmsc->cbw.CB[0]) < 0)
 801f6ce:	68fb      	ldr	r3, [r7, #12]
 801f6d0:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 801f6d4:	68fb      	ldr	r3, [r7, #12]
 801f6d6:	f203 231f 	addw	r3, r3, #543	; 0x21f
 801f6da:	461a      	mov	r2, r3
 801f6dc:	6878      	ldr	r0, [r7, #4]
 801f6de:	f000 f95b 	bl	801f998 <SCSI_ProcessCmd>
 801f6e2:	4603      	mov	r3, r0
 801f6e4:	2b00      	cmp	r3, #0
 801f6e6:	da06      	bge.n	801f6f6 <MSC_BOT_DataOut+0x58>
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 801f6e8:	2101      	movs	r1, #1
 801f6ea:	6878      	ldr	r0, [r7, #4]
 801f6ec:	f000 f8c4 	bl	801f878 <MSC_BOT_SendCSW>
      break;
 801f6f0:	e001      	b.n	801f6f6 <MSC_BOT_DataOut+0x58>
    return;
 801f6f2:	bf00      	nop
 801f6f4:	e000      	b.n	801f6f8 <MSC_BOT_DataOut+0x5a>
      break;
 801f6f6:	bf00      	nop
  }
}
 801f6f8:	3710      	adds	r7, #16
 801f6fa:	46bd      	mov	sp, r7
 801f6fc:	bd80      	pop	{r7, pc}
	...

0801f700 <MSC_BOT_CBW_Decode>:
  *         Decode the CBW command and set the BOT state machine accordingly
  * @param  pdev: device instance
  * @retval None
  */
static void  MSC_BOT_CBW_Decode(USBD_HandleTypeDef *pdev)
{
 801f700:	b580      	push	{r7, lr}
 801f702:	b084      	sub	sp, #16
 801f704:	af00      	add	r7, sp, #0
 801f706:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 801f708:	687b      	ldr	r3, [r7, #4]
 801f70a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801f70e:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 801f710:	68fb      	ldr	r3, [r7, #12]
 801f712:	2b00      	cmp	r3, #0
 801f714:	d077      	beq.n	801f806 <MSC_BOT_CBW_Decode+0x106>
  {
    return;
  }

  hmsc->csw.dTag = hmsc->cbw.dTag;
 801f716:	68fb      	ldr	r3, [r7, #12]
 801f718:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 801f71c:	68fb      	ldr	r3, [r7, #12]
 801f71e:	f8c3 2234 	str.w	r2, [r3, #564]	; 0x234
  hmsc->csw.dDataResidue = hmsc->cbw.dDataLength;
 801f722:	68fb      	ldr	r3, [r7, #12]
 801f724:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 801f728:	68fb      	ldr	r3, [r7, #12]
 801f72a:	f8c3 2238 	str.w	r2, [r3, #568]	; 0x238

  if ((USBD_LL_GetRxDataSize(pdev, MSC_EPOUT_ADDR) != USBD_BOT_CBW_LENGTH) ||
 801f72e:	2101      	movs	r1, #1
 801f730:	6878      	ldr	r0, [r7, #4]
 801f732:	f003 f941 	bl	80229b8 <USBD_LL_GetRxDataSize>
 801f736:	4603      	mov	r3, r0
 801f738:	2b1f      	cmp	r3, #31
 801f73a:	d114      	bne.n	801f766 <MSC_BOT_CBW_Decode+0x66>
      (hmsc->cbw.dSignature != USBD_BOT_CBW_SIGNATURE) ||
 801f73c:	68fb      	ldr	r3, [r7, #12]
 801f73e:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
  if ((USBD_LL_GetRxDataSize(pdev, MSC_EPOUT_ADDR) != USBD_BOT_CBW_LENGTH) ||
 801f742:	4a34      	ldr	r2, [pc, #208]	; (801f814 <MSC_BOT_CBW_Decode+0x114>)
 801f744:	4293      	cmp	r3, r2
 801f746:	d10e      	bne.n	801f766 <MSC_BOT_CBW_Decode+0x66>
      (hmsc->cbw.bLUN > 1U) || (hmsc->cbw.bCBLength < 1U) ||
 801f748:	68fb      	ldr	r3, [r7, #12]
 801f74a:	f893 321d 	ldrb.w	r3, [r3, #541]	; 0x21d
      (hmsc->cbw.dSignature != USBD_BOT_CBW_SIGNATURE) ||
 801f74e:	2b01      	cmp	r3, #1
 801f750:	d809      	bhi.n	801f766 <MSC_BOT_CBW_Decode+0x66>
      (hmsc->cbw.bLUN > 1U) || (hmsc->cbw.bCBLength < 1U) ||
 801f752:	68fb      	ldr	r3, [r7, #12]
 801f754:	f893 321e 	ldrb.w	r3, [r3, #542]	; 0x21e
 801f758:	2b00      	cmp	r3, #0
 801f75a:	d004      	beq.n	801f766 <MSC_BOT_CBW_Decode+0x66>
      (hmsc->cbw.bCBLength > 16U))
 801f75c:	68fb      	ldr	r3, [r7, #12]
 801f75e:	f893 321e 	ldrb.w	r3, [r3, #542]	; 0x21e
      (hmsc->cbw.bLUN > 1U) || (hmsc->cbw.bCBLength < 1U) ||
 801f762:	2b10      	cmp	r3, #16
 801f764:	d90e      	bls.n	801f784 <MSC_BOT_CBW_Decode+0x84>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 801f766:	68fb      	ldr	r3, [r7, #12]
 801f768:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 801f76c:	2320      	movs	r3, #32
 801f76e:	2205      	movs	r2, #5
 801f770:	6878      	ldr	r0, [r7, #4]
 801f772:	f000 fdbc 	bl	80202ee <SCSI_SenseCode>

    hmsc->bot_status = USBD_BOT_STATUS_ERROR;
 801f776:	68fb      	ldr	r3, [r7, #12]
 801f778:	2202      	movs	r2, #2
 801f77a:	725a      	strb	r2, [r3, #9]
    MSC_BOT_Abort(pdev);
 801f77c:	6878      	ldr	r0, [r7, #4]
 801f77e:	f000 f8ab 	bl	801f8d8 <MSC_BOT_Abort>
 801f782:	e043      	b.n	801f80c <MSC_BOT_CBW_Decode+0x10c>
  }
  else
  {
    if (SCSI_ProcessCmd(pdev, hmsc->cbw.bLUN, &hmsc->cbw.CB[0]) < 0)
 801f784:	68fb      	ldr	r3, [r7, #12]
 801f786:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 801f78a:	68fb      	ldr	r3, [r7, #12]
 801f78c:	f203 231f 	addw	r3, r3, #543	; 0x21f
 801f790:	461a      	mov	r2, r3
 801f792:	6878      	ldr	r0, [r7, #4]
 801f794:	f000 f900 	bl	801f998 <SCSI_ProcessCmd>
 801f798:	4603      	mov	r3, r0
 801f79a:	2b00      	cmp	r3, #0
 801f79c:	da0c      	bge.n	801f7b8 <MSC_BOT_CBW_Decode+0xb8>
    {
      if (hmsc->bot_state == USBD_BOT_NO_DATA)
 801f79e:	68fb      	ldr	r3, [r7, #12]
 801f7a0:	7a1b      	ldrb	r3, [r3, #8]
 801f7a2:	2b05      	cmp	r3, #5
 801f7a4:	d104      	bne.n	801f7b0 <MSC_BOT_CBW_Decode+0xb0>
      {
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 801f7a6:	2101      	movs	r1, #1
 801f7a8:	6878      	ldr	r0, [r7, #4]
 801f7aa:	f000 f865 	bl	801f878 <MSC_BOT_SendCSW>
 801f7ae:	e02d      	b.n	801f80c <MSC_BOT_CBW_Decode+0x10c>
      }
      else
      {
        MSC_BOT_Abort(pdev);
 801f7b0:	6878      	ldr	r0, [r7, #4]
 801f7b2:	f000 f891 	bl	801f8d8 <MSC_BOT_Abort>
 801f7b6:	e029      	b.n	801f80c <MSC_BOT_CBW_Decode+0x10c>
      }
    }
    /* Burst xfer handled internally */
    else if ((hmsc->bot_state != USBD_BOT_DATA_IN) &&
 801f7b8:	68fb      	ldr	r3, [r7, #12]
 801f7ba:	7a1b      	ldrb	r3, [r3, #8]
 801f7bc:	2b02      	cmp	r3, #2
 801f7be:	d024      	beq.n	801f80a <MSC_BOT_CBW_Decode+0x10a>
             (hmsc->bot_state != USBD_BOT_DATA_OUT) &&
 801f7c0:	68fb      	ldr	r3, [r7, #12]
 801f7c2:	7a1b      	ldrb	r3, [r3, #8]
    else if ((hmsc->bot_state != USBD_BOT_DATA_IN) &&
 801f7c4:	2b01      	cmp	r3, #1
 801f7c6:	d020      	beq.n	801f80a <MSC_BOT_CBW_Decode+0x10a>
             (hmsc->bot_state != USBD_BOT_LAST_DATA_IN))
 801f7c8:	68fb      	ldr	r3, [r7, #12]
 801f7ca:	7a1b      	ldrb	r3, [r3, #8]
             (hmsc->bot_state != USBD_BOT_DATA_OUT) &&
 801f7cc:	2b03      	cmp	r3, #3
 801f7ce:	d01c      	beq.n	801f80a <MSC_BOT_CBW_Decode+0x10a>
    {
      if (hmsc->bot_data_length > 0U)
 801f7d0:	68fb      	ldr	r3, [r7, #12]
 801f7d2:	68db      	ldr	r3, [r3, #12]
 801f7d4:	2b00      	cmp	r3, #0
 801f7d6:	d009      	beq.n	801f7ec <MSC_BOT_CBW_Decode+0xec>
      {
        MSC_BOT_SendData(pdev, hmsc->bot_data, hmsc->bot_data_length);
 801f7d8:	68fb      	ldr	r3, [r7, #12]
 801f7da:	f103 0110 	add.w	r1, r3, #16
 801f7de:	68fb      	ldr	r3, [r7, #12]
 801f7e0:	68db      	ldr	r3, [r3, #12]
 801f7e2:	461a      	mov	r2, r3
 801f7e4:	6878      	ldr	r0, [r7, #4]
 801f7e6:	f000 f817 	bl	801f818 <MSC_BOT_SendData>
      if (hmsc->bot_data_length > 0U)
 801f7ea:	e00f      	b.n	801f80c <MSC_BOT_CBW_Decode+0x10c>
      }
      else if (hmsc->bot_data_length == 0U)
 801f7ec:	68fb      	ldr	r3, [r7, #12]
 801f7ee:	68db      	ldr	r3, [r3, #12]
 801f7f0:	2b00      	cmp	r3, #0
 801f7f2:	d104      	bne.n	801f7fe <MSC_BOT_CBW_Decode+0xfe>
      {
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_PASSED);
 801f7f4:	2100      	movs	r1, #0
 801f7f6:	6878      	ldr	r0, [r7, #4]
 801f7f8:	f000 f83e 	bl	801f878 <MSC_BOT_SendCSW>
      if (hmsc->bot_data_length > 0U)
 801f7fc:	e006      	b.n	801f80c <MSC_BOT_CBW_Decode+0x10c>
      }
      else
      {
        MSC_BOT_Abort(pdev);
 801f7fe:	6878      	ldr	r0, [r7, #4]
 801f800:	f000 f86a 	bl	801f8d8 <MSC_BOT_Abort>
      if (hmsc->bot_data_length > 0U)
 801f804:	e002      	b.n	801f80c <MSC_BOT_CBW_Decode+0x10c>
    return;
 801f806:	bf00      	nop
 801f808:	e000      	b.n	801f80c <MSC_BOT_CBW_Decode+0x10c>
      }
    }
    else
    {
      return;
 801f80a:	bf00      	nop
    }
  }
}
 801f80c:	3710      	adds	r7, #16
 801f80e:	46bd      	mov	sp, r7
 801f810:	bd80      	pop	{r7, pc}
 801f812:	bf00      	nop
 801f814:	43425355 	.word	0x43425355

0801f818 <MSC_BOT_SendData>:
  * @param  buf: pointer to data buffer
  * @param  len: Data Length
  * @retval None
  */
static void  MSC_BOT_SendData(USBD_HandleTypeDef *pdev, uint8_t *pbuf, uint32_t len)
{
 801f818:	b580      	push	{r7, lr}
 801f81a:	b086      	sub	sp, #24
 801f81c:	af00      	add	r7, sp, #0
 801f81e:	60f8      	str	r0, [r7, #12]
 801f820:	60b9      	str	r1, [r7, #8]
 801f822:	607a      	str	r2, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 801f824:	68fb      	ldr	r3, [r7, #12]
 801f826:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801f82a:	617b      	str	r3, [r7, #20]

  uint32_t length = MIN(hmsc->cbw.dDataLength, len);
 801f82c:	697b      	ldr	r3, [r7, #20]
 801f82e:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 801f832:	687a      	ldr	r2, [r7, #4]
 801f834:	4293      	cmp	r3, r2
 801f836:	bf28      	it	cs
 801f838:	4613      	movcs	r3, r2
 801f83a:	613b      	str	r3, [r7, #16]

  if (hmsc == NULL)
 801f83c:	697b      	ldr	r3, [r7, #20]
 801f83e:	2b00      	cmp	r3, #0
 801f840:	d015      	beq.n	801f86e <MSC_BOT_SendData+0x56>
  {
    return;
  }

  hmsc->csw.dDataResidue -= len;
 801f842:	697b      	ldr	r3, [r7, #20]
 801f844:	f8d3 2238 	ldr.w	r2, [r3, #568]	; 0x238
 801f848:	687b      	ldr	r3, [r7, #4]
 801f84a:	1ad2      	subs	r2, r2, r3
 801f84c:	697b      	ldr	r3, [r7, #20]
 801f84e:	f8c3 2238 	str.w	r2, [r3, #568]	; 0x238
  hmsc->csw.bStatus = USBD_CSW_CMD_PASSED;
 801f852:	697b      	ldr	r3, [r7, #20]
 801f854:	2200      	movs	r2, #0
 801f856:	f883 223c 	strb.w	r2, [r3, #572]	; 0x23c
  hmsc->bot_state = USBD_BOT_SEND_DATA;
 801f85a:	697b      	ldr	r3, [r7, #20]
 801f85c:	2204      	movs	r2, #4
 801f85e:	721a      	strb	r2, [r3, #8]

  (void)USBD_LL_Transmit(pdev, MSC_EPIN_ADDR, pbuf, length);
 801f860:	693b      	ldr	r3, [r7, #16]
 801f862:	68ba      	ldr	r2, [r7, #8]
 801f864:	2181      	movs	r1, #129	; 0x81
 801f866:	68f8      	ldr	r0, [r7, #12]
 801f868:	f003 f864 	bl	8022934 <USBD_LL_Transmit>
 801f86c:	e000      	b.n	801f870 <MSC_BOT_SendData+0x58>
    return;
 801f86e:	bf00      	nop
}
 801f870:	3718      	adds	r7, #24
 801f872:	46bd      	mov	sp, r7
 801f874:	bd80      	pop	{r7, pc}
	...

0801f878 <MSC_BOT_SendCSW>:
  * @param  pdev: device instance
  * @param  status : CSW status
  * @retval None
  */
void  MSC_BOT_SendCSW(USBD_HandleTypeDef *pdev, uint8_t CSW_Status)
{
 801f878:	b580      	push	{r7, lr}
 801f87a:	b084      	sub	sp, #16
 801f87c:	af00      	add	r7, sp, #0
 801f87e:	6078      	str	r0, [r7, #4]
 801f880:	460b      	mov	r3, r1
 801f882:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 801f884:	687b      	ldr	r3, [r7, #4]
 801f886:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801f88a:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 801f88c:	68fb      	ldr	r3, [r7, #12]
 801f88e:	2b00      	cmp	r3, #0
 801f890:	d01b      	beq.n	801f8ca <MSC_BOT_SendCSW+0x52>
  {
    return;
  }

  hmsc->csw.dSignature = USBD_BOT_CSW_SIGNATURE;
 801f892:	68fb      	ldr	r3, [r7, #12]
 801f894:	4a0f      	ldr	r2, [pc, #60]	; (801f8d4 <MSC_BOT_SendCSW+0x5c>)
 801f896:	f8c3 2230 	str.w	r2, [r3, #560]	; 0x230
  hmsc->csw.bStatus = CSW_Status;
 801f89a:	68fb      	ldr	r3, [r7, #12]
 801f89c:	78fa      	ldrb	r2, [r7, #3]
 801f89e:	f883 223c 	strb.w	r2, [r3, #572]	; 0x23c
  hmsc->bot_state = USBD_BOT_IDLE;
 801f8a2:	68fb      	ldr	r3, [r7, #12]
 801f8a4:	2200      	movs	r2, #0
 801f8a6:	721a      	strb	r2, [r3, #8]

  (void)USBD_LL_Transmit(pdev, MSC_EPIN_ADDR, (uint8_t *)&hmsc->csw,
 801f8a8:	68fb      	ldr	r3, [r7, #12]
 801f8aa:	f503 720c 	add.w	r2, r3, #560	; 0x230
 801f8ae:	230d      	movs	r3, #13
 801f8b0:	2181      	movs	r1, #129	; 0x81
 801f8b2:	6878      	ldr	r0, [r7, #4]
 801f8b4:	f003 f83e 	bl	8022934 <USBD_LL_Transmit>
                         USBD_BOT_CSW_LENGTH);

  /* Prepare EP to Receive next Cmd */
  (void)USBD_LL_PrepareReceive(pdev, MSC_EPOUT_ADDR, (uint8_t *)&hmsc->cbw,
 801f8b8:	68fb      	ldr	r3, [r7, #12]
 801f8ba:	f503 7204 	add.w	r2, r3, #528	; 0x210
 801f8be:	231f      	movs	r3, #31
 801f8c0:	2101      	movs	r1, #1
 801f8c2:	6878      	ldr	r0, [r7, #4]
 801f8c4:	f003 f857 	bl	8022976 <USBD_LL_PrepareReceive>
 801f8c8:	e000      	b.n	801f8cc <MSC_BOT_SendCSW+0x54>
    return;
 801f8ca:	bf00      	nop
                               USBD_BOT_CBW_LENGTH);
}
 801f8cc:	3710      	adds	r7, #16
 801f8ce:	46bd      	mov	sp, r7
 801f8d0:	bd80      	pop	{r7, pc}
 801f8d2:	bf00      	nop
 801f8d4:	53425355 	.word	0x53425355

0801f8d8 <MSC_BOT_Abort>:
  * @param  pdev: device instance
  * @retval status
  */

static void  MSC_BOT_Abort(USBD_HandleTypeDef *pdev)
{
 801f8d8:	b580      	push	{r7, lr}
 801f8da:	b084      	sub	sp, #16
 801f8dc:	af00      	add	r7, sp, #0
 801f8de:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 801f8e0:	687b      	ldr	r3, [r7, #4]
 801f8e2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801f8e6:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 801f8e8:	68fb      	ldr	r3, [r7, #12]
 801f8ea:	2b00      	cmp	r3, #0
 801f8ec:	d022      	beq.n	801f934 <MSC_BOT_Abort+0x5c>
  {
    return;
  }

  if ((hmsc->cbw.bmFlags == 0U) &&
 801f8ee:	68fb      	ldr	r3, [r7, #12]
 801f8f0:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
 801f8f4:	2b00      	cmp	r3, #0
 801f8f6:	d10c      	bne.n	801f912 <MSC_BOT_Abort+0x3a>
      (hmsc->cbw.dDataLength != 0U) &&
 801f8f8:	68fb      	ldr	r3, [r7, #12]
 801f8fa:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
  if ((hmsc->cbw.bmFlags == 0U) &&
 801f8fe:	2b00      	cmp	r3, #0
 801f900:	d007      	beq.n	801f912 <MSC_BOT_Abort+0x3a>
      (hmsc->bot_status == USBD_BOT_STATUS_NORMAL))
 801f902:	68fb      	ldr	r3, [r7, #12]
 801f904:	7a5b      	ldrb	r3, [r3, #9]
      (hmsc->cbw.dDataLength != 0U) &&
 801f906:	2b00      	cmp	r3, #0
 801f908:	d103      	bne.n	801f912 <MSC_BOT_Abort+0x3a>
  {
    (void)USBD_LL_StallEP(pdev, MSC_EPOUT_ADDR);
 801f90a:	2101      	movs	r1, #1
 801f90c:	6878      	ldr	r0, [r7, #4]
 801f90e:	f002 ff88 	bl	8022822 <USBD_LL_StallEP>
  }

  (void)USBD_LL_StallEP(pdev, MSC_EPIN_ADDR);
 801f912:	2181      	movs	r1, #129	; 0x81
 801f914:	6878      	ldr	r0, [r7, #4]
 801f916:	f002 ff84 	bl	8022822 <USBD_LL_StallEP>

  if (hmsc->bot_status == USBD_BOT_STATUS_ERROR)
 801f91a:	68fb      	ldr	r3, [r7, #12]
 801f91c:	7a5b      	ldrb	r3, [r3, #9]
 801f91e:	2b02      	cmp	r3, #2
 801f920:	d109      	bne.n	801f936 <MSC_BOT_Abort+0x5e>
  {
    (void)USBD_LL_StallEP(pdev, MSC_EPIN_ADDR);
 801f922:	2181      	movs	r1, #129	; 0x81
 801f924:	6878      	ldr	r0, [r7, #4]
 801f926:	f002 ff7c 	bl	8022822 <USBD_LL_StallEP>
    (void)USBD_LL_StallEP(pdev, MSC_EPOUT_ADDR);
 801f92a:	2101      	movs	r1, #1
 801f92c:	6878      	ldr	r0, [r7, #4]
 801f92e:	f002 ff78 	bl	8022822 <USBD_LL_StallEP>
 801f932:	e000      	b.n	801f936 <MSC_BOT_Abort+0x5e>
    return;
 801f934:	bf00      	nop
  }
}
 801f936:	3710      	adds	r7, #16
 801f938:	46bd      	mov	sp, r7
 801f93a:	bd80      	pop	{r7, pc}

0801f93c <MSC_BOT_CplClrFeature>:
  * @param  epnum: endpoint index
  * @retval None
  */

void  MSC_BOT_CplClrFeature(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 801f93c:	b580      	push	{r7, lr}
 801f93e:	b084      	sub	sp, #16
 801f940:	af00      	add	r7, sp, #0
 801f942:	6078      	str	r0, [r7, #4]
 801f944:	460b      	mov	r3, r1
 801f946:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 801f948:	687b      	ldr	r3, [r7, #4]
 801f94a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801f94e:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 801f950:	68fb      	ldr	r3, [r7, #12]
 801f952:	2b00      	cmp	r3, #0
 801f954:	d019      	beq.n	801f98a <MSC_BOT_CplClrFeature+0x4e>
  {
    return;
  }

  if (hmsc->bot_status == USBD_BOT_STATUS_ERROR) /* Bad CBW Signature */
 801f956:	68fb      	ldr	r3, [r7, #12]
 801f958:	7a5b      	ldrb	r3, [r3, #9]
 801f95a:	2b02      	cmp	r3, #2
 801f95c:	d108      	bne.n	801f970 <MSC_BOT_CplClrFeature+0x34>
  {
    (void)USBD_LL_StallEP(pdev, MSC_EPIN_ADDR);
 801f95e:	2181      	movs	r1, #129	; 0x81
 801f960:	6878      	ldr	r0, [r7, #4]
 801f962:	f002 ff5e 	bl	8022822 <USBD_LL_StallEP>
    (void)USBD_LL_StallEP(pdev, MSC_EPOUT_ADDR);
 801f966:	2101      	movs	r1, #1
 801f968:	6878      	ldr	r0, [r7, #4]
 801f96a:	f002 ff5a 	bl	8022822 <USBD_LL_StallEP>
 801f96e:	e00f      	b.n	801f990 <MSC_BOT_CplClrFeature+0x54>
  }
  else if (((epnum & 0x80U) == 0x80U) && (hmsc->bot_status != USBD_BOT_STATUS_RECOVERY))
 801f970:	f997 3003 	ldrsb.w	r3, [r7, #3]
 801f974:	2b00      	cmp	r3, #0
 801f976:	da0a      	bge.n	801f98e <MSC_BOT_CplClrFeature+0x52>
 801f978:	68fb      	ldr	r3, [r7, #12]
 801f97a:	7a5b      	ldrb	r3, [r3, #9]
 801f97c:	2b01      	cmp	r3, #1
 801f97e:	d006      	beq.n	801f98e <MSC_BOT_CplClrFeature+0x52>
  {
    MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 801f980:	2101      	movs	r1, #1
 801f982:	6878      	ldr	r0, [r7, #4]
 801f984:	f7ff ff78 	bl	801f878 <MSC_BOT_SendCSW>
 801f988:	e002      	b.n	801f990 <MSC_BOT_CplClrFeature+0x54>
    return;
 801f98a:	bf00      	nop
 801f98c:	e000      	b.n	801f990 <MSC_BOT_CplClrFeature+0x54>
  }
  else
  {
    return;
 801f98e:	bf00      	nop
  }
}
 801f990:	3710      	adds	r7, #16
 801f992:	46bd      	mov	sp, r7
 801f994:	bd80      	pop	{r7, pc}
	...

0801f998 <SCSI_ProcessCmd>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
int8_t SCSI_ProcessCmd(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *cmd)
{
 801f998:	b580      	push	{r7, lr}
 801f99a:	b086      	sub	sp, #24
 801f99c:	af00      	add	r7, sp, #0
 801f99e:	60f8      	str	r0, [r7, #12]
 801f9a0:	460b      	mov	r3, r1
 801f9a2:	607a      	str	r2, [r7, #4]
 801f9a4:	72fb      	strb	r3, [r7, #11]
  int8_t ret;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 801f9a6:	68fb      	ldr	r3, [r7, #12]
 801f9a8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801f9ac:	613b      	str	r3, [r7, #16]

  if (hmsc == NULL)
 801f9ae:	693b      	ldr	r3, [r7, #16]
 801f9b0:	2b00      	cmp	r3, #0
 801f9b2:	d102      	bne.n	801f9ba <SCSI_ProcessCmd+0x22>
  {
    return -1;
 801f9b4:	f04f 33ff 	mov.w	r3, #4294967295
 801f9b8:	e168      	b.n	801fc8c <SCSI_ProcessCmd+0x2f4>
  }

  switch (cmd[0])
 801f9ba:	687b      	ldr	r3, [r7, #4]
 801f9bc:	781b      	ldrb	r3, [r3, #0]
 801f9be:	2baa      	cmp	r3, #170	; 0xaa
 801f9c0:	f000 8144 	beq.w	801fc4c <SCSI_ProcessCmd+0x2b4>
 801f9c4:	2baa      	cmp	r3, #170	; 0xaa
 801f9c6:	f300 8153 	bgt.w	801fc70 <SCSI_ProcessCmd+0x2d8>
 801f9ca:	2ba8      	cmp	r3, #168	; 0xa8
 801f9cc:	f000 812c 	beq.w	801fc28 <SCSI_ProcessCmd+0x290>
 801f9d0:	2ba8      	cmp	r3, #168	; 0xa8
 801f9d2:	f300 814d 	bgt.w	801fc70 <SCSI_ProcessCmd+0x2d8>
 801f9d6:	2b5a      	cmp	r3, #90	; 0x5a
 801f9d8:	f300 80c0 	bgt.w	801fb5c <SCSI_ProcessCmd+0x1c4>
 801f9dc:	2b00      	cmp	r3, #0
 801f9de:	f2c0 8147 	blt.w	801fc70 <SCSI_ProcessCmd+0x2d8>
 801f9e2:	2b5a      	cmp	r3, #90	; 0x5a
 801f9e4:	f200 8144 	bhi.w	801fc70 <SCSI_ProcessCmd+0x2d8>
 801f9e8:	a201      	add	r2, pc, #4	; (adr r2, 801f9f0 <SCSI_ProcessCmd+0x58>)
 801f9ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801f9ee:	bf00      	nop
 801f9f0:	0801fb63 	.word	0x0801fb63
 801f9f4:	0801fc71 	.word	0x0801fc71
 801f9f8:	0801fc71 	.word	0x0801fc71
 801f9fc:	0801fb75 	.word	0x0801fb75
 801fa00:	0801fc71 	.word	0x0801fc71
 801fa04:	0801fc71 	.word	0x0801fc71
 801fa08:	0801fc71 	.word	0x0801fc71
 801fa0c:	0801fc71 	.word	0x0801fc71
 801fa10:	0801fc71 	.word	0x0801fc71
 801fa14:	0801fc71 	.word	0x0801fc71
 801fa18:	0801fc71 	.word	0x0801fc71
 801fa1c:	0801fc71 	.word	0x0801fc71
 801fa20:	0801fc71 	.word	0x0801fc71
 801fa24:	0801fc71 	.word	0x0801fc71
 801fa28:	0801fc71 	.word	0x0801fc71
 801fa2c:	0801fc71 	.word	0x0801fc71
 801fa30:	0801fc71 	.word	0x0801fc71
 801fa34:	0801fc71 	.word	0x0801fc71
 801fa38:	0801fb87 	.word	0x0801fb87
 801fa3c:	0801fc71 	.word	0x0801fc71
 801fa40:	0801fc71 	.word	0x0801fc71
 801fa44:	0801fc71 	.word	0x0801fc71
 801fa48:	0801fc71 	.word	0x0801fc71
 801fa4c:	0801fc71 	.word	0x0801fc71
 801fa50:	0801fc71 	.word	0x0801fc71
 801fa54:	0801fc71 	.word	0x0801fc71
 801fa58:	0801fbbd 	.word	0x0801fbbd
 801fa5c:	0801fb99 	.word	0x0801fb99
 801fa60:	0801fc71 	.word	0x0801fc71
 801fa64:	0801fc71 	.word	0x0801fc71
 801fa68:	0801fbab 	.word	0x0801fbab
 801fa6c:	0801fc71 	.word	0x0801fc71
 801fa70:	0801fc71 	.word	0x0801fc71
 801fa74:	0801fc71 	.word	0x0801fc71
 801fa78:	0801fc71 	.word	0x0801fc71
 801fa7c:	0801fbe1 	.word	0x0801fbe1
 801fa80:	0801fc71 	.word	0x0801fc71
 801fa84:	0801fbf3 	.word	0x0801fbf3
 801fa88:	0801fc71 	.word	0x0801fc71
 801fa8c:	0801fc71 	.word	0x0801fc71
 801fa90:	0801fc17 	.word	0x0801fc17
 801fa94:	0801fc71 	.word	0x0801fc71
 801fa98:	0801fc3b 	.word	0x0801fc3b
 801fa9c:	0801fc71 	.word	0x0801fc71
 801faa0:	0801fc71 	.word	0x0801fc71
 801faa4:	0801fc71 	.word	0x0801fc71
 801faa8:	0801fc71 	.word	0x0801fc71
 801faac:	0801fc5f 	.word	0x0801fc5f
 801fab0:	0801fc71 	.word	0x0801fc71
 801fab4:	0801fc71 	.word	0x0801fc71
 801fab8:	0801fc71 	.word	0x0801fc71
 801fabc:	0801fc71 	.word	0x0801fc71
 801fac0:	0801fc71 	.word	0x0801fc71
 801fac4:	0801fc71 	.word	0x0801fc71
 801fac8:	0801fc71 	.word	0x0801fc71
 801facc:	0801fc71 	.word	0x0801fc71
 801fad0:	0801fc71 	.word	0x0801fc71
 801fad4:	0801fc71 	.word	0x0801fc71
 801fad8:	0801fc71 	.word	0x0801fc71
 801fadc:	0801fc71 	.word	0x0801fc71
 801fae0:	0801fc71 	.word	0x0801fc71
 801fae4:	0801fc71 	.word	0x0801fc71
 801fae8:	0801fc71 	.word	0x0801fc71
 801faec:	0801fc71 	.word	0x0801fc71
 801faf0:	0801fc71 	.word	0x0801fc71
 801faf4:	0801fc71 	.word	0x0801fc71
 801faf8:	0801fc71 	.word	0x0801fc71
 801fafc:	0801fc71 	.word	0x0801fc71
 801fb00:	0801fc71 	.word	0x0801fc71
 801fb04:	0801fc71 	.word	0x0801fc71
 801fb08:	0801fc71 	.word	0x0801fc71
 801fb0c:	0801fc71 	.word	0x0801fc71
 801fb10:	0801fc71 	.word	0x0801fc71
 801fb14:	0801fc71 	.word	0x0801fc71
 801fb18:	0801fc71 	.word	0x0801fc71
 801fb1c:	0801fc71 	.word	0x0801fc71
 801fb20:	0801fc71 	.word	0x0801fc71
 801fb24:	0801fc71 	.word	0x0801fc71
 801fb28:	0801fc71 	.word	0x0801fc71
 801fb2c:	0801fc71 	.word	0x0801fc71
 801fb30:	0801fc71 	.word	0x0801fc71
 801fb34:	0801fc71 	.word	0x0801fc71
 801fb38:	0801fc71 	.word	0x0801fc71
 801fb3c:	0801fc71 	.word	0x0801fc71
 801fb40:	0801fc71 	.word	0x0801fc71
 801fb44:	0801fc71 	.word	0x0801fc71
 801fb48:	0801fc71 	.word	0x0801fc71
 801fb4c:	0801fc71 	.word	0x0801fc71
 801fb50:	0801fc71 	.word	0x0801fc71
 801fb54:	0801fc71 	.word	0x0801fc71
 801fb58:	0801fbcf 	.word	0x0801fbcf
 801fb5c:	2b9e      	cmp	r3, #158	; 0x9e
 801fb5e:	d051      	beq.n	801fc04 <SCSI_ProcessCmd+0x26c>
 801fb60:	e086      	b.n	801fc70 <SCSI_ProcessCmd+0x2d8>
  {
    case SCSI_TEST_UNIT_READY:
      ret = SCSI_TestUnitReady(pdev, lun, cmd);
 801fb62:	7afb      	ldrb	r3, [r7, #11]
 801fb64:	687a      	ldr	r2, [r7, #4]
 801fb66:	4619      	mov	r1, r3
 801fb68:	68f8      	ldr	r0, [r7, #12]
 801fb6a:	f000 f893 	bl	801fc94 <SCSI_TestUnitReady>
 801fb6e:	4603      	mov	r3, r0
 801fb70:	75fb      	strb	r3, [r7, #23]
      break;
 801fb72:	e089      	b.n	801fc88 <SCSI_ProcessCmd+0x2f0>

    case SCSI_REQUEST_SENSE:
      ret = SCSI_RequestSense(pdev, lun, cmd);
 801fb74:	7afb      	ldrb	r3, [r7, #11]
 801fb76:	687a      	ldr	r2, [r7, #4]
 801fb78:	4619      	mov	r1, r3
 801fb7a:	68f8      	ldr	r0, [r7, #12]
 801fb7c:	f000 fb38 	bl	80201f0 <SCSI_RequestSense>
 801fb80:	4603      	mov	r3, r0
 801fb82:	75fb      	strb	r3, [r7, #23]
      break;
 801fb84:	e080      	b.n	801fc88 <SCSI_ProcessCmd+0x2f0>

    case SCSI_INQUIRY:
      ret = SCSI_Inquiry(pdev, lun, cmd);
 801fb86:	7afb      	ldrb	r3, [r7, #11]
 801fb88:	687a      	ldr	r2, [r7, #4]
 801fb8a:	4619      	mov	r1, r3
 801fb8c:	68f8      	ldr	r0, [r7, #12]
 801fb8e:	f000 f8d1 	bl	801fd34 <SCSI_Inquiry>
 801fb92:	4603      	mov	r3, r0
 801fb94:	75fb      	strb	r3, [r7, #23]
      break;
 801fb96:	e077      	b.n	801fc88 <SCSI_ProcessCmd+0x2f0>

    case SCSI_START_STOP_UNIT:
      ret = SCSI_StartStopUnit(pdev, lun, cmd);
 801fb98:	7afb      	ldrb	r3, [r7, #11]
 801fb9a:	687a      	ldr	r2, [r7, #4]
 801fb9c:	4619      	mov	r1, r3
 801fb9e:	68f8      	ldr	r0, [r7, #12]
 801fba0:	f000 fbec 	bl	802037c <SCSI_StartStopUnit>
 801fba4:	4603      	mov	r3, r0
 801fba6:	75fb      	strb	r3, [r7, #23]
      break;
 801fba8:	e06e      	b.n	801fc88 <SCSI_ProcessCmd+0x2f0>

    case SCSI_ALLOW_MEDIUM_REMOVAL:
      ret = SCSI_AllowPreventRemovable(pdev, lun, cmd);
 801fbaa:	7afb      	ldrb	r3, [r7, #11]
 801fbac:	687a      	ldr	r2, [r7, #4]
 801fbae:	4619      	mov	r1, r3
 801fbb0:	68f8      	ldr	r0, [r7, #12]
 801fbb2:	f000 fc34 	bl	802041e <SCSI_AllowPreventRemovable>
 801fbb6:	4603      	mov	r3, r0
 801fbb8:	75fb      	strb	r3, [r7, #23]
      break;
 801fbba:	e065      	b.n	801fc88 <SCSI_ProcessCmd+0x2f0>

    case SCSI_MODE_SENSE6:
      ret = SCSI_ModeSense6(pdev, lun, cmd);
 801fbbc:	7afb      	ldrb	r3, [r7, #11]
 801fbbe:	687a      	ldr	r2, [r7, #4]
 801fbc0:	4619      	mov	r1, r3
 801fbc2:	68f8      	ldr	r0, [r7, #12]
 801fbc4:	f000 fabc 	bl	8020140 <SCSI_ModeSense6>
 801fbc8:	4603      	mov	r3, r0
 801fbca:	75fb      	strb	r3, [r7, #23]
      break;
 801fbcc:	e05c      	b.n	801fc88 <SCSI_ProcessCmd+0x2f0>

    case SCSI_MODE_SENSE10:
      ret = SCSI_ModeSense10(pdev, lun, cmd);
 801fbce:	7afb      	ldrb	r3, [r7, #11]
 801fbd0:	687a      	ldr	r2, [r7, #4]
 801fbd2:	4619      	mov	r1, r3
 801fbd4:	68f8      	ldr	r0, [r7, #12]
 801fbd6:	f000 fadf 	bl	8020198 <SCSI_ModeSense10>
 801fbda:	4603      	mov	r3, r0
 801fbdc:	75fb      	strb	r3, [r7, #23]
      break;
 801fbde:	e053      	b.n	801fc88 <SCSI_ProcessCmd+0x2f0>

    case SCSI_READ_FORMAT_CAPACITIES:
      ret = SCSI_ReadFormatCapacity(pdev, lun, cmd);
 801fbe0:	7afb      	ldrb	r3, [r7, #11]
 801fbe2:	687a      	ldr	r2, [r7, #4]
 801fbe4:	4619      	mov	r1, r3
 801fbe6:	68f8      	ldr	r0, [r7, #12]
 801fbe8:	f000 fa37 	bl	802005a <SCSI_ReadFormatCapacity>
 801fbec:	4603      	mov	r3, r0
 801fbee:	75fb      	strb	r3, [r7, #23]
      break;
 801fbf0:	e04a      	b.n	801fc88 <SCSI_ProcessCmd+0x2f0>

    case SCSI_READ_CAPACITY10:
      ret = SCSI_ReadCapacity10(pdev, lun, cmd);
 801fbf2:	7afb      	ldrb	r3, [r7, #11]
 801fbf4:	687a      	ldr	r2, [r7, #4]
 801fbf6:	4619      	mov	r1, r3
 801fbf8:	68f8      	ldr	r0, [r7, #12]
 801fbfa:	f000 f90f 	bl	801fe1c <SCSI_ReadCapacity10>
 801fbfe:	4603      	mov	r3, r0
 801fc00:	75fb      	strb	r3, [r7, #23]
      break;
 801fc02:	e041      	b.n	801fc88 <SCSI_ProcessCmd+0x2f0>

    case SCSI_READ_CAPACITY16:
      ret = SCSI_ReadCapacity16(pdev, lun, cmd);
 801fc04:	7afb      	ldrb	r3, [r7, #11]
 801fc06:	687a      	ldr	r2, [r7, #4]
 801fc08:	4619      	mov	r1, r3
 801fc0a:	68f8      	ldr	r0, [r7, #12]
 801fc0c:	f000 f97b 	bl	801ff06 <SCSI_ReadCapacity16>
 801fc10:	4603      	mov	r3, r0
 801fc12:	75fb      	strb	r3, [r7, #23]
      break;
 801fc14:	e038      	b.n	801fc88 <SCSI_ProcessCmd+0x2f0>

    case SCSI_READ10:
      ret = SCSI_Read10(pdev, lun, cmd);
 801fc16:	7afb      	ldrb	r3, [r7, #11]
 801fc18:	687a      	ldr	r2, [r7, #4]
 801fc1a:	4619      	mov	r1, r3
 801fc1c:	68f8      	ldr	r0, [r7, #12]
 801fc1e:	f000 fc27 	bl	8020470 <SCSI_Read10>
 801fc22:	4603      	mov	r3, r0
 801fc24:	75fb      	strb	r3, [r7, #23]
      break;
 801fc26:	e02f      	b.n	801fc88 <SCSI_ProcessCmd+0x2f0>

    case SCSI_READ12:
      ret = SCSI_Read12(pdev, lun, cmd);
 801fc28:	7afb      	ldrb	r3, [r7, #11]
 801fc2a:	687a      	ldr	r2, [r7, #4]
 801fc2c:	4619      	mov	r1, r3
 801fc2e:	68f8      	ldr	r0, [r7, #12]
 801fc30:	f000 fcbe 	bl	80205b0 <SCSI_Read12>
 801fc34:	4603      	mov	r3, r0
 801fc36:	75fb      	strb	r3, [r7, #23]
      break;
 801fc38:	e026      	b.n	801fc88 <SCSI_ProcessCmd+0x2f0>

    case SCSI_WRITE10:
      ret = SCSI_Write10(pdev, lun, cmd);
 801fc3a:	7afb      	ldrb	r3, [r7, #11]
 801fc3c:	687a      	ldr	r2, [r7, #4]
 801fc3e:	4619      	mov	r1, r3
 801fc40:	68f8      	ldr	r0, [r7, #12]
 801fc42:	f000 fd60 	bl	8020706 <SCSI_Write10>
 801fc46:	4603      	mov	r3, r0
 801fc48:	75fb      	strb	r3, [r7, #23]
      break;
 801fc4a:	e01d      	b.n	801fc88 <SCSI_ProcessCmd+0x2f0>

    case SCSI_WRITE12:
      ret = SCSI_Write12(pdev, lun, cmd);
 801fc4c:	7afb      	ldrb	r3, [r7, #11]
 801fc4e:	687a      	ldr	r2, [r7, #4]
 801fc50:	4619      	mov	r1, r3
 801fc52:	68f8      	ldr	r0, [r7, #12]
 801fc54:	f000 fe1c 	bl	8020890 <SCSI_Write12>
 801fc58:	4603      	mov	r3, r0
 801fc5a:	75fb      	strb	r3, [r7, #23]
      break;
 801fc5c:	e014      	b.n	801fc88 <SCSI_ProcessCmd+0x2f0>

    case SCSI_VERIFY10:
      ret = SCSI_Verify10(pdev, lun, cmd);
 801fc5e:	7afb      	ldrb	r3, [r7, #11]
 801fc60:	687a      	ldr	r2, [r7, #4]
 801fc62:	4619      	mov	r1, r3
 801fc64:	68f8      	ldr	r0, [r7, #12]
 801fc66:	f000 fee8 	bl	8020a3a <SCSI_Verify10>
 801fc6a:	4603      	mov	r3, r0
 801fc6c:	75fb      	strb	r3, [r7, #23]
      break;
 801fc6e:	e00b      	b.n	801fc88 <SCSI_ProcessCmd+0x2f0>

    default:
      SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, INVALID_CDB);
 801fc70:	7af9      	ldrb	r1, [r7, #11]
 801fc72:	2320      	movs	r3, #32
 801fc74:	2205      	movs	r2, #5
 801fc76:	68f8      	ldr	r0, [r7, #12]
 801fc78:	f000 fb39 	bl	80202ee <SCSI_SenseCode>
      hmsc->bot_status = USBD_BOT_STATUS_ERROR;
 801fc7c:	693b      	ldr	r3, [r7, #16]
 801fc7e:	2202      	movs	r2, #2
 801fc80:	725a      	strb	r2, [r3, #9]
      ret = -1;
 801fc82:	23ff      	movs	r3, #255	; 0xff
 801fc84:	75fb      	strb	r3, [r7, #23]
      break;
 801fc86:	bf00      	nop
  }

  return ret;
 801fc88:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801fc8c:	4618      	mov	r0, r3
 801fc8e:	3718      	adds	r7, #24
 801fc90:	46bd      	mov	sp, r7
 801fc92:	bd80      	pop	{r7, pc}

0801fc94 <SCSI_TestUnitReady>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_TestUnitReady(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 801fc94:	b580      	push	{r7, lr}
 801fc96:	b086      	sub	sp, #24
 801fc98:	af00      	add	r7, sp, #0
 801fc9a:	60f8      	str	r0, [r7, #12]
 801fc9c:	460b      	mov	r3, r1
 801fc9e:	607a      	str	r2, [r7, #4]
 801fca0:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 801fca2:	68fb      	ldr	r3, [r7, #12]
 801fca4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801fca8:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 801fcaa:	697b      	ldr	r3, [r7, #20]
 801fcac:	2b00      	cmp	r3, #0
 801fcae:	d102      	bne.n	801fcb6 <SCSI_TestUnitReady+0x22>
  {
    return -1;
 801fcb0:	f04f 33ff 	mov.w	r3, #4294967295
 801fcb4:	e03a      	b.n	801fd2c <SCSI_TestUnitReady+0x98>
  }

  /* case 9 : Hi > D0 */
  if (hmsc->cbw.dDataLength != 0U)
 801fcb6:	697b      	ldr	r3, [r7, #20]
 801fcb8:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 801fcbc:	2b00      	cmp	r3, #0
 801fcbe:	d00a      	beq.n	801fcd6 <SCSI_TestUnitReady+0x42>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 801fcc0:	697b      	ldr	r3, [r7, #20]
 801fcc2:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 801fcc6:	2320      	movs	r3, #32
 801fcc8:	2205      	movs	r2, #5
 801fcca:	68f8      	ldr	r0, [r7, #12]
 801fccc:	f000 fb0f 	bl	80202ee <SCSI_SenseCode>

    return -1;
 801fcd0:	f04f 33ff 	mov.w	r3, #4294967295
 801fcd4:	e02a      	b.n	801fd2c <SCSI_TestUnitReady+0x98>
  }

  if (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED)
 801fcd6:	697b      	ldr	r3, [r7, #20]
 801fcd8:	f893 3262 	ldrb.w	r3, [r3, #610]	; 0x262
 801fcdc:	2b02      	cmp	r3, #2
 801fcde:	d10b      	bne.n	801fcf8 <SCSI_TestUnitReady+0x64>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 801fce0:	7af9      	ldrb	r1, [r7, #11]
 801fce2:	233a      	movs	r3, #58	; 0x3a
 801fce4:	2202      	movs	r2, #2
 801fce6:	68f8      	ldr	r0, [r7, #12]
 801fce8:	f000 fb01 	bl	80202ee <SCSI_SenseCode>
    hmsc->bot_state = USBD_BOT_NO_DATA;
 801fcec:	697b      	ldr	r3, [r7, #20]
 801fcee:	2205      	movs	r2, #5
 801fcf0:	721a      	strb	r2, [r3, #8]
    return -1;
 801fcf2:	f04f 33ff 	mov.w	r3, #4294967295
 801fcf6:	e019      	b.n	801fd2c <SCSI_TestUnitReady+0x98>
  }

  if (((USBD_StorageTypeDef *)pdev->pUserData)->IsReady(lun) != 0)
 801fcf8:	68fb      	ldr	r3, [r7, #12]
 801fcfa:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 801fcfe:	689b      	ldr	r3, [r3, #8]
 801fd00:	7afa      	ldrb	r2, [r7, #11]
 801fd02:	4610      	mov	r0, r2
 801fd04:	4798      	blx	r3
 801fd06:	4603      	mov	r3, r0
 801fd08:	2b00      	cmp	r3, #0
 801fd0a:	d00b      	beq.n	801fd24 <SCSI_TestUnitReady+0x90>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 801fd0c:	7af9      	ldrb	r1, [r7, #11]
 801fd0e:	233a      	movs	r3, #58	; 0x3a
 801fd10:	2202      	movs	r2, #2
 801fd12:	68f8      	ldr	r0, [r7, #12]
 801fd14:	f000 faeb 	bl	80202ee <SCSI_SenseCode>
    hmsc->bot_state = USBD_BOT_NO_DATA;
 801fd18:	697b      	ldr	r3, [r7, #20]
 801fd1a:	2205      	movs	r2, #5
 801fd1c:	721a      	strb	r2, [r3, #8]

    return -1;
 801fd1e:	f04f 33ff 	mov.w	r3, #4294967295
 801fd22:	e003      	b.n	801fd2c <SCSI_TestUnitReady+0x98>
  }
  hmsc->bot_data_length = 0U;
 801fd24:	697b      	ldr	r3, [r7, #20]
 801fd26:	2200      	movs	r2, #0
 801fd28:	60da      	str	r2, [r3, #12]

  return 0;
 801fd2a:	2300      	movs	r3, #0
}
 801fd2c:	4618      	mov	r0, r3
 801fd2e:	3718      	adds	r7, #24
 801fd30:	46bd      	mov	sp, r7
 801fd32:	bd80      	pop	{r7, pc}

0801fd34 <SCSI_Inquiry>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Inquiry(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 801fd34:	b580      	push	{r7, lr}
 801fd36:	b088      	sub	sp, #32
 801fd38:	af00      	add	r7, sp, #0
 801fd3a:	60f8      	str	r0, [r7, #12]
 801fd3c:	460b      	mov	r3, r1
 801fd3e:	607a      	str	r2, [r7, #4]
 801fd40:	72fb      	strb	r3, [r7, #11]
  uint8_t *pPage;
  uint16_t len;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 801fd42:	68fb      	ldr	r3, [r7, #12]
 801fd44:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801fd48:	61bb      	str	r3, [r7, #24]

  if (hmsc == NULL)
 801fd4a:	69bb      	ldr	r3, [r7, #24]
 801fd4c:	2b00      	cmp	r3, #0
 801fd4e:	d102      	bne.n	801fd56 <SCSI_Inquiry+0x22>
  {
    return -1;
 801fd50:	f04f 33ff 	mov.w	r3, #4294967295
 801fd54:	e05a      	b.n	801fe0c <SCSI_Inquiry+0xd8>
  }

  if (hmsc->cbw.dDataLength == 0U)
 801fd56:	69bb      	ldr	r3, [r7, #24]
 801fd58:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 801fd5c:	2b00      	cmp	r3, #0
 801fd5e:	d10a      	bne.n	801fd76 <SCSI_Inquiry+0x42>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 801fd60:	69bb      	ldr	r3, [r7, #24]
 801fd62:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 801fd66:	2320      	movs	r3, #32
 801fd68:	2205      	movs	r2, #5
 801fd6a:	68f8      	ldr	r0, [r7, #12]
 801fd6c:	f000 fabf 	bl	80202ee <SCSI_SenseCode>
    return -1;
 801fd70:	f04f 33ff 	mov.w	r3, #4294967295
 801fd74:	e04a      	b.n	801fe0c <SCSI_Inquiry+0xd8>
  }

  if ((params[1] & 0x01U) != 0U) /* Evpd is set */
 801fd76:	687b      	ldr	r3, [r7, #4]
 801fd78:	3301      	adds	r3, #1
 801fd7a:	781b      	ldrb	r3, [r3, #0]
 801fd7c:	f003 0301 	and.w	r3, r3, #1
 801fd80:	2b00      	cmp	r3, #0
 801fd82:	d020      	beq.n	801fdc6 <SCSI_Inquiry+0x92>
  {
    if (params[2] == 0U) /* Request for Supported Vital Product Data Pages*/
 801fd84:	687b      	ldr	r3, [r7, #4]
 801fd86:	3302      	adds	r3, #2
 801fd88:	781b      	ldrb	r3, [r3, #0]
 801fd8a:	2b00      	cmp	r3, #0
 801fd8c:	d105      	bne.n	801fd9a <SCSI_Inquiry+0x66>
    {
      (void)SCSI_UpdateBotData(hmsc, MSC_Page00_Inquiry_Data, LENGTH_INQUIRY_PAGE00);
 801fd8e:	2206      	movs	r2, #6
 801fd90:	4920      	ldr	r1, [pc, #128]	; (801fe14 <SCSI_Inquiry+0xe0>)
 801fd92:	69b8      	ldr	r0, [r7, #24]
 801fd94:	f000 ffb4 	bl	8020d00 <SCSI_UpdateBotData>
 801fd98:	e037      	b.n	801fe0a <SCSI_Inquiry+0xd6>
    }
    else if (params[2] == 0x80U) /* Request for VPD page 0x80 Unit Serial Number */
 801fd9a:	687b      	ldr	r3, [r7, #4]
 801fd9c:	3302      	adds	r3, #2
 801fd9e:	781b      	ldrb	r3, [r3, #0]
 801fda0:	2b80      	cmp	r3, #128	; 0x80
 801fda2:	d105      	bne.n	801fdb0 <SCSI_Inquiry+0x7c>
    {
      (void)SCSI_UpdateBotData(hmsc, MSC_Page80_Inquiry_Data, LENGTH_INQUIRY_PAGE80);
 801fda4:	2208      	movs	r2, #8
 801fda6:	491c      	ldr	r1, [pc, #112]	; (801fe18 <SCSI_Inquiry+0xe4>)
 801fda8:	69b8      	ldr	r0, [r7, #24]
 801fdaa:	f000 ffa9 	bl	8020d00 <SCSI_UpdateBotData>
 801fdae:	e02c      	b.n	801fe0a <SCSI_Inquiry+0xd6>
    }
    else /* Request Not supported */
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST,
 801fdb0:	69bb      	ldr	r3, [r7, #24]
 801fdb2:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 801fdb6:	2324      	movs	r3, #36	; 0x24
 801fdb8:	2205      	movs	r2, #5
 801fdba:	68f8      	ldr	r0, [r7, #12]
 801fdbc:	f000 fa97 	bl	80202ee <SCSI_SenseCode>
                     INVALID_FIELED_IN_COMMAND);

      return -1;
 801fdc0:	f04f 33ff 	mov.w	r3, #4294967295
 801fdc4:	e022      	b.n	801fe0c <SCSI_Inquiry+0xd8>
    }
  }
  else
  {
    pPage = (uint8_t *) &((USBD_StorageTypeDef *)pdev->pUserData)->pInquiry[lun * STANDARD_INQUIRY_DATA_LEN];
 801fdc6:	68fb      	ldr	r3, [r7, #12]
 801fdc8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 801fdcc:	69d9      	ldr	r1, [r3, #28]
 801fdce:	7afa      	ldrb	r2, [r7, #11]
 801fdd0:	4613      	mov	r3, r2
 801fdd2:	00db      	lsls	r3, r3, #3
 801fdd4:	4413      	add	r3, r2
 801fdd6:	009b      	lsls	r3, r3, #2
 801fdd8:	440b      	add	r3, r1
 801fdda:	617b      	str	r3, [r7, #20]
    len = (uint16_t)pPage[4] + 5U;
 801fddc:	697b      	ldr	r3, [r7, #20]
 801fdde:	3304      	adds	r3, #4
 801fde0:	781b      	ldrb	r3, [r3, #0]
 801fde2:	b29b      	uxth	r3, r3
 801fde4:	3305      	adds	r3, #5
 801fde6:	83fb      	strh	r3, [r7, #30]

    if (params[4] <= len)
 801fde8:	687b      	ldr	r3, [r7, #4]
 801fdea:	3304      	adds	r3, #4
 801fdec:	781b      	ldrb	r3, [r3, #0]
 801fdee:	b29b      	uxth	r3, r3
 801fdf0:	8bfa      	ldrh	r2, [r7, #30]
 801fdf2:	429a      	cmp	r2, r3
 801fdf4:	d303      	bcc.n	801fdfe <SCSI_Inquiry+0xca>
    {
      len = params[4];
 801fdf6:	687b      	ldr	r3, [r7, #4]
 801fdf8:	3304      	adds	r3, #4
 801fdfa:	781b      	ldrb	r3, [r3, #0]
 801fdfc:	83fb      	strh	r3, [r7, #30]
    }

    (void)SCSI_UpdateBotData(hmsc, pPage, len);
 801fdfe:	8bfb      	ldrh	r3, [r7, #30]
 801fe00:	461a      	mov	r2, r3
 801fe02:	6979      	ldr	r1, [r7, #20]
 801fe04:	69b8      	ldr	r0, [r7, #24]
 801fe06:	f000 ff7b 	bl	8020d00 <SCSI_UpdateBotData>
  }

  return 0;
 801fe0a:	2300      	movs	r3, #0
}
 801fe0c:	4618      	mov	r0, r3
 801fe0e:	3720      	adds	r7, #32
 801fe10:	46bd      	mov	sp, r7
 801fe12:	bd80      	pop	{r7, pc}
 801fe14:	20000638 	.word	0x20000638
 801fe18:	20000640 	.word	0x20000640

0801fe1c <SCSI_ReadCapacity10>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_ReadCapacity10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 801fe1c:	b580      	push	{r7, lr}
 801fe1e:	b086      	sub	sp, #24
 801fe20:	af00      	add	r7, sp, #0
 801fe22:	60f8      	str	r0, [r7, #12]
 801fe24:	460b      	mov	r3, r1
 801fe26:	607a      	str	r2, [r7, #4]
 801fe28:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  int8_t ret;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 801fe2a:	68fb      	ldr	r3, [r7, #12]
 801fe2c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801fe30:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 801fe32:	697b      	ldr	r3, [r7, #20]
 801fe34:	2b00      	cmp	r3, #0
 801fe36:	d102      	bne.n	801fe3e <SCSI_ReadCapacity10+0x22>
  {
    return -1;
 801fe38:	f04f 33ff 	mov.w	r3, #4294967295
 801fe3c:	e05f      	b.n	801fefe <SCSI_ReadCapacity10+0xe2>
  }

  ret = ((USBD_StorageTypeDef *)pdev->pUserData)->GetCapacity(lun, &hmsc->scsi_blk_nbr, &hmsc->scsi_blk_size);
 801fe3e:	68fb      	ldr	r3, [r7, #12]
 801fe40:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 801fe44:	685b      	ldr	r3, [r3, #4]
 801fe46:	697a      	ldr	r2, [r7, #20]
 801fe48:	f502 711a 	add.w	r1, r2, #616	; 0x268
 801fe4c:	697a      	ldr	r2, [r7, #20]
 801fe4e:	f502 7219 	add.w	r2, r2, #612	; 0x264
 801fe52:	7af8      	ldrb	r0, [r7, #11]
 801fe54:	4798      	blx	r3
 801fe56:	4603      	mov	r3, r0
 801fe58:	74fb      	strb	r3, [r7, #19]

  if ((ret != 0) || (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED))
 801fe5a:	f997 3013 	ldrsb.w	r3, [r7, #19]
 801fe5e:	2b00      	cmp	r3, #0
 801fe60:	d104      	bne.n	801fe6c <SCSI_ReadCapacity10+0x50>
 801fe62:	697b      	ldr	r3, [r7, #20]
 801fe64:	f893 3262 	ldrb.w	r3, [r3, #610]	; 0x262
 801fe68:	2b02      	cmp	r3, #2
 801fe6a:	d108      	bne.n	801fe7e <SCSI_ReadCapacity10+0x62>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 801fe6c:	7af9      	ldrb	r1, [r7, #11]
 801fe6e:	233a      	movs	r3, #58	; 0x3a
 801fe70:	2202      	movs	r2, #2
 801fe72:	68f8      	ldr	r0, [r7, #12]
 801fe74:	f000 fa3b 	bl	80202ee <SCSI_SenseCode>
    return -1;
 801fe78:	f04f 33ff 	mov.w	r3, #4294967295
 801fe7c:	e03f      	b.n	801fefe <SCSI_ReadCapacity10+0xe2>
  }

  hmsc->bot_data[0] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 24);
 801fe7e:	697b      	ldr	r3, [r7, #20]
 801fe80:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 801fe84:	3b01      	subs	r3, #1
 801fe86:	0e1b      	lsrs	r3, r3, #24
 801fe88:	b2da      	uxtb	r2, r3
 801fe8a:	697b      	ldr	r3, [r7, #20]
 801fe8c:	741a      	strb	r2, [r3, #16]
  hmsc->bot_data[1] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 16);
 801fe8e:	697b      	ldr	r3, [r7, #20]
 801fe90:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 801fe94:	3b01      	subs	r3, #1
 801fe96:	0c1b      	lsrs	r3, r3, #16
 801fe98:	b2da      	uxtb	r2, r3
 801fe9a:	697b      	ldr	r3, [r7, #20]
 801fe9c:	745a      	strb	r2, [r3, #17]
  hmsc->bot_data[2] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >>  8);
 801fe9e:	697b      	ldr	r3, [r7, #20]
 801fea0:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 801fea4:	3b01      	subs	r3, #1
 801fea6:	0a1b      	lsrs	r3, r3, #8
 801fea8:	b2da      	uxtb	r2, r3
 801feaa:	697b      	ldr	r3, [r7, #20]
 801feac:	749a      	strb	r2, [r3, #18]
  hmsc->bot_data[3] = (uint8_t)(hmsc->scsi_blk_nbr - 1U);
 801feae:	697b      	ldr	r3, [r7, #20]
 801feb0:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 801feb4:	b2db      	uxtb	r3, r3
 801feb6:	3b01      	subs	r3, #1
 801feb8:	b2da      	uxtb	r2, r3
 801feba:	697b      	ldr	r3, [r7, #20]
 801febc:	74da      	strb	r2, [r3, #19]

  hmsc->bot_data[4] = (uint8_t)(hmsc->scsi_blk_size >>  24);
 801febe:	697b      	ldr	r3, [r7, #20]
 801fec0:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 801fec4:	161b      	asrs	r3, r3, #24
 801fec6:	b2da      	uxtb	r2, r3
 801fec8:	697b      	ldr	r3, [r7, #20]
 801feca:	751a      	strb	r2, [r3, #20]
  hmsc->bot_data[5] = (uint8_t)(hmsc->scsi_blk_size >>  16);
 801fecc:	697b      	ldr	r3, [r7, #20]
 801fece:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 801fed2:	141b      	asrs	r3, r3, #16
 801fed4:	b2da      	uxtb	r2, r3
 801fed6:	697b      	ldr	r3, [r7, #20]
 801fed8:	755a      	strb	r2, [r3, #21]
  hmsc->bot_data[6] = (uint8_t)(hmsc->scsi_blk_size >>  8);
 801feda:	697b      	ldr	r3, [r7, #20]
 801fedc:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 801fee0:	0a1b      	lsrs	r3, r3, #8
 801fee2:	b29b      	uxth	r3, r3
 801fee4:	b2da      	uxtb	r2, r3
 801fee6:	697b      	ldr	r3, [r7, #20]
 801fee8:	759a      	strb	r2, [r3, #22]
  hmsc->bot_data[7] = (uint8_t)(hmsc->scsi_blk_size);
 801feea:	697b      	ldr	r3, [r7, #20]
 801feec:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 801fef0:	b2da      	uxtb	r2, r3
 801fef2:	697b      	ldr	r3, [r7, #20]
 801fef4:	75da      	strb	r2, [r3, #23]

  hmsc->bot_data_length = 8U;
 801fef6:	697b      	ldr	r3, [r7, #20]
 801fef8:	2208      	movs	r2, #8
 801fefa:	60da      	str	r2, [r3, #12]

  return 0;
 801fefc:	2300      	movs	r3, #0

}
 801fefe:	4618      	mov	r0, r3
 801ff00:	3718      	adds	r7, #24
 801ff02:	46bd      	mov	sp, r7
 801ff04:	bd80      	pop	{r7, pc}

0801ff06 <SCSI_ReadCapacity16>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_ReadCapacity16(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 801ff06:	b580      	push	{r7, lr}
 801ff08:	b088      	sub	sp, #32
 801ff0a:	af00      	add	r7, sp, #0
 801ff0c:	60f8      	str	r0, [r7, #12]
 801ff0e:	460b      	mov	r3, r1
 801ff10:	607a      	str	r2, [r7, #4]
 801ff12:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  uint8_t idx;
  int8_t ret;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 801ff14:	68fb      	ldr	r3, [r7, #12]
 801ff16:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801ff1a:	61bb      	str	r3, [r7, #24]

  if (hmsc == NULL)
 801ff1c:	69bb      	ldr	r3, [r7, #24]
 801ff1e:	2b00      	cmp	r3, #0
 801ff20:	d102      	bne.n	801ff28 <SCSI_ReadCapacity16+0x22>
  {
    return -1;
 801ff22:	f04f 33ff 	mov.w	r3, #4294967295
 801ff26:	e094      	b.n	8020052 <SCSI_ReadCapacity16+0x14c>
  }

  ret = ((USBD_StorageTypeDef *)pdev->pUserData)->GetCapacity(lun, &hmsc->scsi_blk_nbr, &hmsc->scsi_blk_size);
 801ff28:	68fb      	ldr	r3, [r7, #12]
 801ff2a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 801ff2e:	685b      	ldr	r3, [r3, #4]
 801ff30:	69ba      	ldr	r2, [r7, #24]
 801ff32:	f502 711a 	add.w	r1, r2, #616	; 0x268
 801ff36:	69ba      	ldr	r2, [r7, #24]
 801ff38:	f502 7219 	add.w	r2, r2, #612	; 0x264
 801ff3c:	7af8      	ldrb	r0, [r7, #11]
 801ff3e:	4798      	blx	r3
 801ff40:	4603      	mov	r3, r0
 801ff42:	75fb      	strb	r3, [r7, #23]

  if ((ret != 0) || (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED))
 801ff44:	f997 3017 	ldrsb.w	r3, [r7, #23]
 801ff48:	2b00      	cmp	r3, #0
 801ff4a:	d104      	bne.n	801ff56 <SCSI_ReadCapacity16+0x50>
 801ff4c:	69bb      	ldr	r3, [r7, #24]
 801ff4e:	f893 3262 	ldrb.w	r3, [r3, #610]	; 0x262
 801ff52:	2b02      	cmp	r3, #2
 801ff54:	d108      	bne.n	801ff68 <SCSI_ReadCapacity16+0x62>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 801ff56:	7af9      	ldrb	r1, [r7, #11]
 801ff58:	233a      	movs	r3, #58	; 0x3a
 801ff5a:	2202      	movs	r2, #2
 801ff5c:	68f8      	ldr	r0, [r7, #12]
 801ff5e:	f000 f9c6 	bl	80202ee <SCSI_SenseCode>
    return -1;
 801ff62:	f04f 33ff 	mov.w	r3, #4294967295
 801ff66:	e074      	b.n	8020052 <SCSI_ReadCapacity16+0x14c>
  }

  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 801ff68:	687b      	ldr	r3, [r7, #4]
 801ff6a:	330a      	adds	r3, #10
 801ff6c:	781b      	ldrb	r3, [r3, #0]
 801ff6e:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[11] << 16) |
 801ff70:	687b      	ldr	r3, [r7, #4]
 801ff72:	330b      	adds	r3, #11
 801ff74:	781b      	ldrb	r3, [r3, #0]
 801ff76:	041b      	lsls	r3, r3, #16
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 801ff78:	431a      	orrs	r2, r3
                          ((uint32_t)params[12] <<  8) |
 801ff7a:	687b      	ldr	r3, [r7, #4]
 801ff7c:	330c      	adds	r3, #12
 801ff7e:	781b      	ldrb	r3, [r3, #0]
 801ff80:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[11] << 16) |
 801ff82:	4313      	orrs	r3, r2
                          (uint32_t)params[13];
 801ff84:	687a      	ldr	r2, [r7, #4]
 801ff86:	320d      	adds	r2, #13
 801ff88:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[12] <<  8) |
 801ff8a:	431a      	orrs	r2, r3
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 801ff8c:	69bb      	ldr	r3, [r7, #24]
 801ff8e:	60da      	str	r2, [r3, #12]

  for (idx = 0U; idx < hmsc->bot_data_length; idx++)
 801ff90:	2300      	movs	r3, #0
 801ff92:	77fb      	strb	r3, [r7, #31]
 801ff94:	e007      	b.n	801ffa6 <SCSI_ReadCapacity16+0xa0>
  {
    hmsc->bot_data[idx] = 0U;
 801ff96:	7ffb      	ldrb	r3, [r7, #31]
 801ff98:	69ba      	ldr	r2, [r7, #24]
 801ff9a:	4413      	add	r3, r2
 801ff9c:	2200      	movs	r2, #0
 801ff9e:	741a      	strb	r2, [r3, #16]
  for (idx = 0U; idx < hmsc->bot_data_length; idx++)
 801ffa0:	7ffb      	ldrb	r3, [r7, #31]
 801ffa2:	3301      	adds	r3, #1
 801ffa4:	77fb      	strb	r3, [r7, #31]
 801ffa6:	7ffa      	ldrb	r2, [r7, #31]
 801ffa8:	69bb      	ldr	r3, [r7, #24]
 801ffaa:	68db      	ldr	r3, [r3, #12]
 801ffac:	429a      	cmp	r2, r3
 801ffae:	d3f2      	bcc.n	801ff96 <SCSI_ReadCapacity16+0x90>
  }

  hmsc->bot_data[4] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 24);
 801ffb0:	69bb      	ldr	r3, [r7, #24]
 801ffb2:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 801ffb6:	3b01      	subs	r3, #1
 801ffb8:	0e1b      	lsrs	r3, r3, #24
 801ffba:	b2da      	uxtb	r2, r3
 801ffbc:	69bb      	ldr	r3, [r7, #24]
 801ffbe:	751a      	strb	r2, [r3, #20]
  hmsc->bot_data[5] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 16);
 801ffc0:	69bb      	ldr	r3, [r7, #24]
 801ffc2:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 801ffc6:	3b01      	subs	r3, #1
 801ffc8:	0c1b      	lsrs	r3, r3, #16
 801ffca:	b2da      	uxtb	r2, r3
 801ffcc:	69bb      	ldr	r3, [r7, #24]
 801ffce:	755a      	strb	r2, [r3, #21]
  hmsc->bot_data[6] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >>  8);
 801ffd0:	69bb      	ldr	r3, [r7, #24]
 801ffd2:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 801ffd6:	3b01      	subs	r3, #1
 801ffd8:	0a1b      	lsrs	r3, r3, #8
 801ffda:	b2da      	uxtb	r2, r3
 801ffdc:	69bb      	ldr	r3, [r7, #24]
 801ffde:	759a      	strb	r2, [r3, #22]
  hmsc->bot_data[7] = (uint8_t)(hmsc->scsi_blk_nbr - 1U);
 801ffe0:	69bb      	ldr	r3, [r7, #24]
 801ffe2:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 801ffe6:	b2db      	uxtb	r3, r3
 801ffe8:	3b01      	subs	r3, #1
 801ffea:	b2da      	uxtb	r2, r3
 801ffec:	69bb      	ldr	r3, [r7, #24]
 801ffee:	75da      	strb	r2, [r3, #23]

  hmsc->bot_data[8] = (uint8_t)(hmsc->scsi_blk_size >>  24);
 801fff0:	69bb      	ldr	r3, [r7, #24]
 801fff2:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 801fff6:	161b      	asrs	r3, r3, #24
 801fff8:	b2da      	uxtb	r2, r3
 801fffa:	69bb      	ldr	r3, [r7, #24]
 801fffc:	761a      	strb	r2, [r3, #24]
  hmsc->bot_data[9] = (uint8_t)(hmsc->scsi_blk_size >>  16);
 801fffe:	69bb      	ldr	r3, [r7, #24]
 8020000:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 8020004:	141b      	asrs	r3, r3, #16
 8020006:	b2da      	uxtb	r2, r3
 8020008:	69bb      	ldr	r3, [r7, #24]
 802000a:	765a      	strb	r2, [r3, #25]
  hmsc->bot_data[10] = (uint8_t)(hmsc->scsi_blk_size >>  8);
 802000c:	69bb      	ldr	r3, [r7, #24]
 802000e:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 8020012:	0a1b      	lsrs	r3, r3, #8
 8020014:	b29b      	uxth	r3, r3
 8020016:	b2da      	uxtb	r2, r3
 8020018:	69bb      	ldr	r3, [r7, #24]
 802001a:	769a      	strb	r2, [r3, #26]
  hmsc->bot_data[11] = (uint8_t)(hmsc->scsi_blk_size);
 802001c:	69bb      	ldr	r3, [r7, #24]
 802001e:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 8020022:	b2da      	uxtb	r2, r3
 8020024:	69bb      	ldr	r3, [r7, #24]
 8020026:	76da      	strb	r2, [r3, #27]

  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 8020028:	687b      	ldr	r3, [r7, #4]
 802002a:	330a      	adds	r3, #10
 802002c:	781b      	ldrb	r3, [r3, #0]
 802002e:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[11] << 16) |
 8020030:	687b      	ldr	r3, [r7, #4]
 8020032:	330b      	adds	r3, #11
 8020034:	781b      	ldrb	r3, [r3, #0]
 8020036:	041b      	lsls	r3, r3, #16
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 8020038:	431a      	orrs	r2, r3
                          ((uint32_t)params[12] <<  8) |
 802003a:	687b      	ldr	r3, [r7, #4]
 802003c:	330c      	adds	r3, #12
 802003e:	781b      	ldrb	r3, [r3, #0]
 8020040:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[11] << 16) |
 8020042:	4313      	orrs	r3, r2
                          (uint32_t)params[13];
 8020044:	687a      	ldr	r2, [r7, #4]
 8020046:	320d      	adds	r2, #13
 8020048:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[12] <<  8) |
 802004a:	431a      	orrs	r2, r3
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 802004c:	69bb      	ldr	r3, [r7, #24]
 802004e:	60da      	str	r2, [r3, #12]

  return 0;
 8020050:	2300      	movs	r3, #0
}
 8020052:	4618      	mov	r0, r3
 8020054:	3720      	adds	r7, #32
 8020056:	46bd      	mov	sp, r7
 8020058:	bd80      	pop	{r7, pc}

0802005a <SCSI_ReadFormatCapacity>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_ReadFormatCapacity(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 802005a:	b580      	push	{r7, lr}
 802005c:	b088      	sub	sp, #32
 802005e:	af00      	add	r7, sp, #0
 8020060:	60f8      	str	r0, [r7, #12]
 8020062:	460b      	mov	r3, r1
 8020064:	607a      	str	r2, [r7, #4]
 8020066:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  uint16_t blk_size;
  uint32_t blk_nbr;
  uint16_t i;
  int8_t ret;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8020068:	68fb      	ldr	r3, [r7, #12]
 802006a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 802006e:	61bb      	str	r3, [r7, #24]

  if (hmsc == NULL)
 8020070:	69bb      	ldr	r3, [r7, #24]
 8020072:	2b00      	cmp	r3, #0
 8020074:	d102      	bne.n	802007c <SCSI_ReadFormatCapacity+0x22>
  {
    return -1;
 8020076:	f04f 33ff 	mov.w	r3, #4294967295
 802007a:	e05c      	b.n	8020136 <SCSI_ReadFormatCapacity+0xdc>
  }

  ret = ((USBD_StorageTypeDef *)pdev->pUserData)->GetCapacity(lun, &blk_nbr, &blk_size);
 802007c:	68fb      	ldr	r3, [r7, #12]
 802007e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8020082:	685b      	ldr	r3, [r3, #4]
 8020084:	f107 0214 	add.w	r2, r7, #20
 8020088:	f107 0110 	add.w	r1, r7, #16
 802008c:	7af8      	ldrb	r0, [r7, #11]
 802008e:	4798      	blx	r3
 8020090:	4603      	mov	r3, r0
 8020092:	75fb      	strb	r3, [r7, #23]

  if ((ret != 0) || (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED))
 8020094:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8020098:	2b00      	cmp	r3, #0
 802009a:	d104      	bne.n	80200a6 <SCSI_ReadFormatCapacity+0x4c>
 802009c:	69bb      	ldr	r3, [r7, #24]
 802009e:	f893 3262 	ldrb.w	r3, [r3, #610]	; 0x262
 80200a2:	2b02      	cmp	r3, #2
 80200a4:	d108      	bne.n	80200b8 <SCSI_ReadFormatCapacity+0x5e>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 80200a6:	7af9      	ldrb	r1, [r7, #11]
 80200a8:	233a      	movs	r3, #58	; 0x3a
 80200aa:	2202      	movs	r2, #2
 80200ac:	68f8      	ldr	r0, [r7, #12]
 80200ae:	f000 f91e 	bl	80202ee <SCSI_SenseCode>
    return -1;
 80200b2:	f04f 33ff 	mov.w	r3, #4294967295
 80200b6:	e03e      	b.n	8020136 <SCSI_ReadFormatCapacity+0xdc>
  }

  for (i = 0U; i < 12U ; i++)
 80200b8:	2300      	movs	r3, #0
 80200ba:	83fb      	strh	r3, [r7, #30]
 80200bc:	e007      	b.n	80200ce <SCSI_ReadFormatCapacity+0x74>
  {
    hmsc->bot_data[i] = 0U;
 80200be:	8bfb      	ldrh	r3, [r7, #30]
 80200c0:	69ba      	ldr	r2, [r7, #24]
 80200c2:	4413      	add	r3, r2
 80200c4:	2200      	movs	r2, #0
 80200c6:	741a      	strb	r2, [r3, #16]
  for (i = 0U; i < 12U ; i++)
 80200c8:	8bfb      	ldrh	r3, [r7, #30]
 80200ca:	3301      	adds	r3, #1
 80200cc:	83fb      	strh	r3, [r7, #30]
 80200ce:	8bfb      	ldrh	r3, [r7, #30]
 80200d0:	2b0b      	cmp	r3, #11
 80200d2:	d9f4      	bls.n	80200be <SCSI_ReadFormatCapacity+0x64>
  }

  hmsc->bot_data[3] = 0x08U;
 80200d4:	69bb      	ldr	r3, [r7, #24]
 80200d6:	2208      	movs	r2, #8
 80200d8:	74da      	strb	r2, [r3, #19]
  hmsc->bot_data[4] = (uint8_t)((blk_nbr - 1U) >> 24);
 80200da:	693b      	ldr	r3, [r7, #16]
 80200dc:	3b01      	subs	r3, #1
 80200de:	0e1b      	lsrs	r3, r3, #24
 80200e0:	b2da      	uxtb	r2, r3
 80200e2:	69bb      	ldr	r3, [r7, #24]
 80200e4:	751a      	strb	r2, [r3, #20]
  hmsc->bot_data[5] = (uint8_t)((blk_nbr - 1U) >> 16);
 80200e6:	693b      	ldr	r3, [r7, #16]
 80200e8:	3b01      	subs	r3, #1
 80200ea:	0c1b      	lsrs	r3, r3, #16
 80200ec:	b2da      	uxtb	r2, r3
 80200ee:	69bb      	ldr	r3, [r7, #24]
 80200f0:	755a      	strb	r2, [r3, #21]
  hmsc->bot_data[6] = (uint8_t)((blk_nbr - 1U) >>  8);
 80200f2:	693b      	ldr	r3, [r7, #16]
 80200f4:	3b01      	subs	r3, #1
 80200f6:	0a1b      	lsrs	r3, r3, #8
 80200f8:	b2da      	uxtb	r2, r3
 80200fa:	69bb      	ldr	r3, [r7, #24]
 80200fc:	759a      	strb	r2, [r3, #22]
  hmsc->bot_data[7] = (uint8_t)(blk_nbr - 1U);
 80200fe:	693b      	ldr	r3, [r7, #16]
 8020100:	b2db      	uxtb	r3, r3
 8020102:	3b01      	subs	r3, #1
 8020104:	b2da      	uxtb	r2, r3
 8020106:	69bb      	ldr	r3, [r7, #24]
 8020108:	75da      	strb	r2, [r3, #23]

  hmsc->bot_data[8] = 0x02U;
 802010a:	69bb      	ldr	r3, [r7, #24]
 802010c:	2202      	movs	r2, #2
 802010e:	761a      	strb	r2, [r3, #24]
  hmsc->bot_data[9] = (uint8_t)(blk_size >>  16);
 8020110:	8abb      	ldrh	r3, [r7, #20]
 8020112:	141b      	asrs	r3, r3, #16
 8020114:	b2da      	uxtb	r2, r3
 8020116:	69bb      	ldr	r3, [r7, #24]
 8020118:	765a      	strb	r2, [r3, #25]
  hmsc->bot_data[10] = (uint8_t)(blk_size >>  8);
 802011a:	8abb      	ldrh	r3, [r7, #20]
 802011c:	0a1b      	lsrs	r3, r3, #8
 802011e:	b29b      	uxth	r3, r3
 8020120:	b2da      	uxtb	r2, r3
 8020122:	69bb      	ldr	r3, [r7, #24]
 8020124:	769a      	strb	r2, [r3, #26]
  hmsc->bot_data[11] = (uint8_t)(blk_size);
 8020126:	8abb      	ldrh	r3, [r7, #20]
 8020128:	b2da      	uxtb	r2, r3
 802012a:	69bb      	ldr	r3, [r7, #24]
 802012c:	76da      	strb	r2, [r3, #27]

  hmsc->bot_data_length = 12U;
 802012e:	69bb      	ldr	r3, [r7, #24]
 8020130:	220c      	movs	r2, #12
 8020132:	60da      	str	r2, [r3, #12]

  return 0;
 8020134:	2300      	movs	r3, #0
}
 8020136:	4618      	mov	r0, r3
 8020138:	3720      	adds	r7, #32
 802013a:	46bd      	mov	sp, r7
 802013c:	bd80      	pop	{r7, pc}
	...

08020140 <SCSI_ModeSense6>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_ModeSense6(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8020140:	b580      	push	{r7, lr}
 8020142:	b086      	sub	sp, #24
 8020144:	af00      	add	r7, sp, #0
 8020146:	60f8      	str	r0, [r7, #12]
 8020148:	460b      	mov	r3, r1
 802014a:	607a      	str	r2, [r7, #4]
 802014c:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 802014e:	68fb      	ldr	r3, [r7, #12]
 8020150:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8020154:	613b      	str	r3, [r7, #16]
  uint16_t len = MODE_SENSE6_LEN;
 8020156:	2317      	movs	r3, #23
 8020158:	82fb      	strh	r3, [r7, #22]

  if (hmsc == NULL)
 802015a:	693b      	ldr	r3, [r7, #16]
 802015c:	2b00      	cmp	r3, #0
 802015e:	d102      	bne.n	8020166 <SCSI_ModeSense6+0x26>
  {
    return -1;
 8020160:	f04f 33ff 	mov.w	r3, #4294967295
 8020164:	e011      	b.n	802018a <SCSI_ModeSense6+0x4a>
  }

  if (params[4] <= len)
 8020166:	687b      	ldr	r3, [r7, #4]
 8020168:	3304      	adds	r3, #4
 802016a:	781b      	ldrb	r3, [r3, #0]
 802016c:	b29b      	uxth	r3, r3
 802016e:	8afa      	ldrh	r2, [r7, #22]
 8020170:	429a      	cmp	r2, r3
 8020172:	d303      	bcc.n	802017c <SCSI_ModeSense6+0x3c>
  {
    len = params[4];
 8020174:	687b      	ldr	r3, [r7, #4]
 8020176:	3304      	adds	r3, #4
 8020178:	781b      	ldrb	r3, [r3, #0]
 802017a:	82fb      	strh	r3, [r7, #22]
  }

  (void)SCSI_UpdateBotData(hmsc, MSC_Mode_Sense6_data, len);
 802017c:	8afb      	ldrh	r3, [r7, #22]
 802017e:	461a      	mov	r2, r3
 8020180:	4904      	ldr	r1, [pc, #16]	; (8020194 <SCSI_ModeSense6+0x54>)
 8020182:	6938      	ldr	r0, [r7, #16]
 8020184:	f000 fdbc 	bl	8020d00 <SCSI_UpdateBotData>

  return 0;
 8020188:	2300      	movs	r3, #0
}
 802018a:	4618      	mov	r0, r3
 802018c:	3718      	adds	r7, #24
 802018e:	46bd      	mov	sp, r7
 8020190:	bd80      	pop	{r7, pc}
 8020192:	bf00      	nop
 8020194:	20000648 	.word	0x20000648

08020198 <SCSI_ModeSense10>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_ModeSense10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8020198:	b580      	push	{r7, lr}
 802019a:	b086      	sub	sp, #24
 802019c:	af00      	add	r7, sp, #0
 802019e:	60f8      	str	r0, [r7, #12]
 80201a0:	460b      	mov	r3, r1
 80201a2:	607a      	str	r2, [r7, #4]
 80201a4:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 80201a6:	68fb      	ldr	r3, [r7, #12]
 80201a8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80201ac:	613b      	str	r3, [r7, #16]
  uint16_t len = MODE_SENSE10_LEN;
 80201ae:	231b      	movs	r3, #27
 80201b0:	82fb      	strh	r3, [r7, #22]

  if (hmsc == NULL)
 80201b2:	693b      	ldr	r3, [r7, #16]
 80201b4:	2b00      	cmp	r3, #0
 80201b6:	d102      	bne.n	80201be <SCSI_ModeSense10+0x26>
  {
    return -1;
 80201b8:	f04f 33ff 	mov.w	r3, #4294967295
 80201bc:	e011      	b.n	80201e2 <SCSI_ModeSense10+0x4a>
  }

  if (params[8] <= len)
 80201be:	687b      	ldr	r3, [r7, #4]
 80201c0:	3308      	adds	r3, #8
 80201c2:	781b      	ldrb	r3, [r3, #0]
 80201c4:	b29b      	uxth	r3, r3
 80201c6:	8afa      	ldrh	r2, [r7, #22]
 80201c8:	429a      	cmp	r2, r3
 80201ca:	d303      	bcc.n	80201d4 <SCSI_ModeSense10+0x3c>
  {
    len = params[8];
 80201cc:	687b      	ldr	r3, [r7, #4]
 80201ce:	3308      	adds	r3, #8
 80201d0:	781b      	ldrb	r3, [r3, #0]
 80201d2:	82fb      	strh	r3, [r7, #22]
  }

  (void)SCSI_UpdateBotData(hmsc, MSC_Mode_Sense10_data, len);
 80201d4:	8afb      	ldrh	r3, [r7, #22]
 80201d6:	461a      	mov	r2, r3
 80201d8:	4904      	ldr	r1, [pc, #16]	; (80201ec <SCSI_ModeSense10+0x54>)
 80201da:	6938      	ldr	r0, [r7, #16]
 80201dc:	f000 fd90 	bl	8020d00 <SCSI_UpdateBotData>

  return 0;
 80201e0:	2300      	movs	r3, #0
}
 80201e2:	4618      	mov	r0, r3
 80201e4:	3718      	adds	r7, #24
 80201e6:	46bd      	mov	sp, r7
 80201e8:	bd80      	pop	{r7, pc}
 80201ea:	bf00      	nop
 80201ec:	20000660 	.word	0x20000660

080201f0 <SCSI_RequestSense>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_RequestSense(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 80201f0:	b580      	push	{r7, lr}
 80201f2:	b086      	sub	sp, #24
 80201f4:	af00      	add	r7, sp, #0
 80201f6:	60f8      	str	r0, [r7, #12]
 80201f8:	460b      	mov	r3, r1
 80201fa:	607a      	str	r2, [r7, #4]
 80201fc:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  uint8_t i;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 80201fe:	68fb      	ldr	r3, [r7, #12]
 8020200:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8020204:	613b      	str	r3, [r7, #16]

  if (hmsc == NULL)
 8020206:	693b      	ldr	r3, [r7, #16]
 8020208:	2b00      	cmp	r3, #0
 802020a:	d102      	bne.n	8020212 <SCSI_RequestSense+0x22>
  {
    return -1;
 802020c:	f04f 33ff 	mov.w	r3, #4294967295
 8020210:	e069      	b.n	80202e6 <SCSI_RequestSense+0xf6>
  }

  if (hmsc->cbw.dDataLength == 0U)
 8020212:	693b      	ldr	r3, [r7, #16]
 8020214:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8020218:	2b00      	cmp	r3, #0
 802021a:	d10a      	bne.n	8020232 <SCSI_RequestSense+0x42>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 802021c:	693b      	ldr	r3, [r7, #16]
 802021e:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 8020222:	2320      	movs	r3, #32
 8020224:	2205      	movs	r2, #5
 8020226:	68f8      	ldr	r0, [r7, #12]
 8020228:	f000 f861 	bl	80202ee <SCSI_SenseCode>
    return -1;
 802022c:	f04f 33ff 	mov.w	r3, #4294967295
 8020230:	e059      	b.n	80202e6 <SCSI_RequestSense+0xf6>
  }

  for (i = 0U; i < REQUEST_SENSE_DATA_LEN; i++)
 8020232:	2300      	movs	r3, #0
 8020234:	75fb      	strb	r3, [r7, #23]
 8020236:	e007      	b.n	8020248 <SCSI_RequestSense+0x58>
  {
    hmsc->bot_data[i] = 0U;
 8020238:	7dfb      	ldrb	r3, [r7, #23]
 802023a:	693a      	ldr	r2, [r7, #16]
 802023c:	4413      	add	r3, r2
 802023e:	2200      	movs	r2, #0
 8020240:	741a      	strb	r2, [r3, #16]
  for (i = 0U; i < REQUEST_SENSE_DATA_LEN; i++)
 8020242:	7dfb      	ldrb	r3, [r7, #23]
 8020244:	3301      	adds	r3, #1
 8020246:	75fb      	strb	r3, [r7, #23]
 8020248:	7dfb      	ldrb	r3, [r7, #23]
 802024a:	2b11      	cmp	r3, #17
 802024c:	d9f4      	bls.n	8020238 <SCSI_RequestSense+0x48>
  }

  hmsc->bot_data[0] = 0x70U;
 802024e:	693b      	ldr	r3, [r7, #16]
 8020250:	2270      	movs	r2, #112	; 0x70
 8020252:	741a      	strb	r2, [r3, #16]
  hmsc->bot_data[7] = REQUEST_SENSE_DATA_LEN - 6U;
 8020254:	693b      	ldr	r3, [r7, #16]
 8020256:	220c      	movs	r2, #12
 8020258:	75da      	strb	r2, [r3, #23]

  if ((hmsc->scsi_sense_head != hmsc->scsi_sense_tail))
 802025a:	693b      	ldr	r3, [r7, #16]
 802025c:	f893 2260 	ldrb.w	r2, [r3, #608]	; 0x260
 8020260:	693b      	ldr	r3, [r7, #16]
 8020262:	f893 3261 	ldrb.w	r3, [r3, #609]	; 0x261
 8020266:	429a      	cmp	r2, r3
 8020268:	d02e      	beq.n	80202c8 <SCSI_RequestSense+0xd8>
  {
    hmsc->bot_data[2] = (uint8_t)hmsc->scsi_sense[hmsc->scsi_sense_head].Skey;
 802026a:	693b      	ldr	r3, [r7, #16]
 802026c:	f893 3260 	ldrb.w	r3, [r3, #608]	; 0x260
 8020270:	461a      	mov	r2, r3
 8020272:	693b      	ldr	r3, [r7, #16]
 8020274:	3248      	adds	r2, #72	; 0x48
 8020276:	f813 2032 	ldrb.w	r2, [r3, r2, lsl #3]
 802027a:	693b      	ldr	r3, [r7, #16]
 802027c:	749a      	strb	r2, [r3, #18]
    hmsc->bot_data[12] = (uint8_t)hmsc->scsi_sense[hmsc->scsi_sense_head].w.b.ASC;
 802027e:	693b      	ldr	r3, [r7, #16]
 8020280:	f893 3260 	ldrb.w	r3, [r3, #608]	; 0x260
 8020284:	693a      	ldr	r2, [r7, #16]
 8020286:	3348      	adds	r3, #72	; 0x48
 8020288:	00db      	lsls	r3, r3, #3
 802028a:	4413      	add	r3, r2
 802028c:	791a      	ldrb	r2, [r3, #4]
 802028e:	693b      	ldr	r3, [r7, #16]
 8020290:	771a      	strb	r2, [r3, #28]
    hmsc->bot_data[13] = (uint8_t)hmsc->scsi_sense[hmsc->scsi_sense_head].w.b.ASCQ;
 8020292:	693b      	ldr	r3, [r7, #16]
 8020294:	f893 3260 	ldrb.w	r3, [r3, #608]	; 0x260
 8020298:	693a      	ldr	r2, [r7, #16]
 802029a:	3348      	adds	r3, #72	; 0x48
 802029c:	00db      	lsls	r3, r3, #3
 802029e:	4413      	add	r3, r2
 80202a0:	795a      	ldrb	r2, [r3, #5]
 80202a2:	693b      	ldr	r3, [r7, #16]
 80202a4:	775a      	strb	r2, [r3, #29]
    hmsc->scsi_sense_head++;
 80202a6:	693b      	ldr	r3, [r7, #16]
 80202a8:	f893 3260 	ldrb.w	r3, [r3, #608]	; 0x260
 80202ac:	3301      	adds	r3, #1
 80202ae:	b2da      	uxtb	r2, r3
 80202b0:	693b      	ldr	r3, [r7, #16]
 80202b2:	f883 2260 	strb.w	r2, [r3, #608]	; 0x260

    if (hmsc->scsi_sense_head == SENSE_LIST_DEEPTH)
 80202b6:	693b      	ldr	r3, [r7, #16]
 80202b8:	f893 3260 	ldrb.w	r3, [r3, #608]	; 0x260
 80202bc:	2b04      	cmp	r3, #4
 80202be:	d103      	bne.n	80202c8 <SCSI_RequestSense+0xd8>
    {
      hmsc->scsi_sense_head = 0U;
 80202c0:	693b      	ldr	r3, [r7, #16]
 80202c2:	2200      	movs	r2, #0
 80202c4:	f883 2260 	strb.w	r2, [r3, #608]	; 0x260
    }
  }

  hmsc->bot_data_length = REQUEST_SENSE_DATA_LEN;
 80202c8:	693b      	ldr	r3, [r7, #16]
 80202ca:	2212      	movs	r2, #18
 80202cc:	60da      	str	r2, [r3, #12]

  if (params[4] <= REQUEST_SENSE_DATA_LEN)
 80202ce:	687b      	ldr	r3, [r7, #4]
 80202d0:	3304      	adds	r3, #4
 80202d2:	781b      	ldrb	r3, [r3, #0]
 80202d4:	2b12      	cmp	r3, #18
 80202d6:	d805      	bhi.n	80202e4 <SCSI_RequestSense+0xf4>
  {
    hmsc->bot_data_length = params[4];
 80202d8:	687b      	ldr	r3, [r7, #4]
 80202da:	3304      	adds	r3, #4
 80202dc:	781b      	ldrb	r3, [r3, #0]
 80202de:	461a      	mov	r2, r3
 80202e0:	693b      	ldr	r3, [r7, #16]
 80202e2:	60da      	str	r2, [r3, #12]
  }

  return 0;
 80202e4:	2300      	movs	r3, #0
}
 80202e6:	4618      	mov	r0, r3
 80202e8:	3718      	adds	r7, #24
 80202ea:	46bd      	mov	sp, r7
 80202ec:	bd80      	pop	{r7, pc}

080202ee <SCSI_SenseCode>:
  * @param  ASC: Additional Sense Code
  * @retval none

  */
void SCSI_SenseCode(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t sKey, uint8_t ASC)
{
 80202ee:	b480      	push	{r7}
 80202f0:	b085      	sub	sp, #20
 80202f2:	af00      	add	r7, sp, #0
 80202f4:	6078      	str	r0, [r7, #4]
 80202f6:	4608      	mov	r0, r1
 80202f8:	4611      	mov	r1, r2
 80202fa:	461a      	mov	r2, r3
 80202fc:	4603      	mov	r3, r0
 80202fe:	70fb      	strb	r3, [r7, #3]
 8020300:	460b      	mov	r3, r1
 8020302:	70bb      	strb	r3, [r7, #2]
 8020304:	4613      	mov	r3, r2
 8020306:	707b      	strb	r3, [r7, #1]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8020308:	687b      	ldr	r3, [r7, #4]
 802030a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 802030e:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 8020310:	68fb      	ldr	r3, [r7, #12]
 8020312:	2b00      	cmp	r3, #0
 8020314:	d02c      	beq.n	8020370 <SCSI_SenseCode+0x82>
  {
    return;
  }

  hmsc->scsi_sense[hmsc->scsi_sense_tail].Skey = sKey;
 8020316:	68fb      	ldr	r3, [r7, #12]
 8020318:	f893 3261 	ldrb.w	r3, [r3, #609]	; 0x261
 802031c:	461a      	mov	r2, r3
 802031e:	68fb      	ldr	r3, [r7, #12]
 8020320:	3248      	adds	r2, #72	; 0x48
 8020322:	78b9      	ldrb	r1, [r7, #2]
 8020324:	f803 1032 	strb.w	r1, [r3, r2, lsl #3]
  hmsc->scsi_sense[hmsc->scsi_sense_tail].w.b.ASC = ASC;
 8020328:	68fb      	ldr	r3, [r7, #12]
 802032a:	f893 3261 	ldrb.w	r3, [r3, #609]	; 0x261
 802032e:	68fa      	ldr	r2, [r7, #12]
 8020330:	3348      	adds	r3, #72	; 0x48
 8020332:	00db      	lsls	r3, r3, #3
 8020334:	4413      	add	r3, r2
 8020336:	787a      	ldrb	r2, [r7, #1]
 8020338:	711a      	strb	r2, [r3, #4]
  hmsc->scsi_sense[hmsc->scsi_sense_tail].w.b.ASCQ = 0U;
 802033a:	68fb      	ldr	r3, [r7, #12]
 802033c:	f893 3261 	ldrb.w	r3, [r3, #609]	; 0x261
 8020340:	68fa      	ldr	r2, [r7, #12]
 8020342:	3348      	adds	r3, #72	; 0x48
 8020344:	00db      	lsls	r3, r3, #3
 8020346:	4413      	add	r3, r2
 8020348:	2200      	movs	r2, #0
 802034a:	715a      	strb	r2, [r3, #5]
  hmsc->scsi_sense_tail++;
 802034c:	68fb      	ldr	r3, [r7, #12]
 802034e:	f893 3261 	ldrb.w	r3, [r3, #609]	; 0x261
 8020352:	3301      	adds	r3, #1
 8020354:	b2da      	uxtb	r2, r3
 8020356:	68fb      	ldr	r3, [r7, #12]
 8020358:	f883 2261 	strb.w	r2, [r3, #609]	; 0x261

  if (hmsc->scsi_sense_tail == SENSE_LIST_DEEPTH)
 802035c:	68fb      	ldr	r3, [r7, #12]
 802035e:	f893 3261 	ldrb.w	r3, [r3, #609]	; 0x261
 8020362:	2b04      	cmp	r3, #4
 8020364:	d105      	bne.n	8020372 <SCSI_SenseCode+0x84>
  {
    hmsc->scsi_sense_tail = 0U;
 8020366:	68fb      	ldr	r3, [r7, #12]
 8020368:	2200      	movs	r2, #0
 802036a:	f883 2261 	strb.w	r2, [r3, #609]	; 0x261
 802036e:	e000      	b.n	8020372 <SCSI_SenseCode+0x84>
    return;
 8020370:	bf00      	nop
  }
}
 8020372:	3714      	adds	r7, #20
 8020374:	46bd      	mov	sp, r7
 8020376:	f85d 7b04 	ldr.w	r7, [sp], #4
 802037a:	4770      	bx	lr

0802037c <SCSI_StartStopUnit>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_StartStopUnit(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 802037c:	b580      	push	{r7, lr}
 802037e:	b086      	sub	sp, #24
 8020380:	af00      	add	r7, sp, #0
 8020382:	60f8      	str	r0, [r7, #12]
 8020384:	460b      	mov	r3, r1
 8020386:	607a      	str	r2, [r7, #4]
 8020388:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 802038a:	68fb      	ldr	r3, [r7, #12]
 802038c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8020390:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 8020392:	697b      	ldr	r3, [r7, #20]
 8020394:	2b00      	cmp	r3, #0
 8020396:	d102      	bne.n	802039e <SCSI_StartStopUnit+0x22>
  {
    return -1;
 8020398:	f04f 33ff 	mov.w	r3, #4294967295
 802039c:	e03b      	b.n	8020416 <SCSI_StartStopUnit+0x9a>
  }

  if ((hmsc->scsi_medium_state == SCSI_MEDIUM_LOCKED) && ((params[4] & 0x3U) == 2U))
 802039e:	697b      	ldr	r3, [r7, #20]
 80203a0:	f893 3262 	ldrb.w	r3, [r3, #610]	; 0x262
 80203a4:	2b01      	cmp	r3, #1
 80203a6:	d10f      	bne.n	80203c8 <SCSI_StartStopUnit+0x4c>
 80203a8:	687b      	ldr	r3, [r7, #4]
 80203aa:	3304      	adds	r3, #4
 80203ac:	781b      	ldrb	r3, [r3, #0]
 80203ae:	f003 0303 	and.w	r3, r3, #3
 80203b2:	2b02      	cmp	r3, #2
 80203b4:	d108      	bne.n	80203c8 <SCSI_StartStopUnit+0x4c>
  {
    SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, INVALID_FIELED_IN_COMMAND);
 80203b6:	7af9      	ldrb	r1, [r7, #11]
 80203b8:	2324      	movs	r3, #36	; 0x24
 80203ba:	2205      	movs	r2, #5
 80203bc:	68f8      	ldr	r0, [r7, #12]
 80203be:	f7ff ff96 	bl	80202ee <SCSI_SenseCode>

    return -1;
 80203c2:	f04f 33ff 	mov.w	r3, #4294967295
 80203c6:	e026      	b.n	8020416 <SCSI_StartStopUnit+0x9a>
  }

  if ((params[4] & 0x3U) == 0x1U) /* START=1 */
 80203c8:	687b      	ldr	r3, [r7, #4]
 80203ca:	3304      	adds	r3, #4
 80203cc:	781b      	ldrb	r3, [r3, #0]
 80203ce:	f003 0303 	and.w	r3, r3, #3
 80203d2:	2b01      	cmp	r3, #1
 80203d4:	d104      	bne.n	80203e0 <SCSI_StartStopUnit+0x64>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 80203d6:	697b      	ldr	r3, [r7, #20]
 80203d8:	2200      	movs	r2, #0
 80203da:	f883 2262 	strb.w	r2, [r3, #610]	; 0x262
 80203de:	e016      	b.n	802040e <SCSI_StartStopUnit+0x92>
  }
  else if ((params[4] & 0x3U) == 0x2U) /* START=0 and LOEJ Load Eject=1 */
 80203e0:	687b      	ldr	r3, [r7, #4]
 80203e2:	3304      	adds	r3, #4
 80203e4:	781b      	ldrb	r3, [r3, #0]
 80203e6:	f003 0303 	and.w	r3, r3, #3
 80203ea:	2b02      	cmp	r3, #2
 80203ec:	d104      	bne.n	80203f8 <SCSI_StartStopUnit+0x7c>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_EJECTED;
 80203ee:	697b      	ldr	r3, [r7, #20]
 80203f0:	2202      	movs	r2, #2
 80203f2:	f883 2262 	strb.w	r2, [r3, #610]	; 0x262
 80203f6:	e00a      	b.n	802040e <SCSI_StartStopUnit+0x92>
  }
  else if ((params[4] & 0x3U) == 0x3U) /* START=1 and LOEJ Load Eject=1 */
 80203f8:	687b      	ldr	r3, [r7, #4]
 80203fa:	3304      	adds	r3, #4
 80203fc:	781b      	ldrb	r3, [r3, #0]
 80203fe:	f003 0303 	and.w	r3, r3, #3
 8020402:	2b03      	cmp	r3, #3
 8020404:	d103      	bne.n	802040e <SCSI_StartStopUnit+0x92>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 8020406:	697b      	ldr	r3, [r7, #20]
 8020408:	2200      	movs	r2, #0
 802040a:	f883 2262 	strb.w	r2, [r3, #610]	; 0x262
  }
  else
  {
    /* .. */
  }
  hmsc->bot_data_length = 0U;
 802040e:	697b      	ldr	r3, [r7, #20]
 8020410:	2200      	movs	r2, #0
 8020412:	60da      	str	r2, [r3, #12]

  return 0;
 8020414:	2300      	movs	r3, #0
}
 8020416:	4618      	mov	r0, r3
 8020418:	3718      	adds	r7, #24
 802041a:	46bd      	mov	sp, r7
 802041c:	bd80      	pop	{r7, pc}

0802041e <SCSI_AllowPreventRemovable>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_AllowPreventRemovable(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 802041e:	b480      	push	{r7}
 8020420:	b087      	sub	sp, #28
 8020422:	af00      	add	r7, sp, #0
 8020424:	60f8      	str	r0, [r7, #12]
 8020426:	460b      	mov	r3, r1
 8020428:	607a      	str	r2, [r7, #4]
 802042a:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 802042c:	68fb      	ldr	r3, [r7, #12]
 802042e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8020432:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 8020434:	697b      	ldr	r3, [r7, #20]
 8020436:	2b00      	cmp	r3, #0
 8020438:	d102      	bne.n	8020440 <SCSI_AllowPreventRemovable+0x22>
  {
    return -1;
 802043a:	f04f 33ff 	mov.w	r3, #4294967295
 802043e:	e011      	b.n	8020464 <SCSI_AllowPreventRemovable+0x46>
  }

  if (params[4] == 0U)
 8020440:	687b      	ldr	r3, [r7, #4]
 8020442:	3304      	adds	r3, #4
 8020444:	781b      	ldrb	r3, [r3, #0]
 8020446:	2b00      	cmp	r3, #0
 8020448:	d104      	bne.n	8020454 <SCSI_AllowPreventRemovable+0x36>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 802044a:	697b      	ldr	r3, [r7, #20]
 802044c:	2200      	movs	r2, #0
 802044e:	f883 2262 	strb.w	r2, [r3, #610]	; 0x262
 8020452:	e003      	b.n	802045c <SCSI_AllowPreventRemovable+0x3e>
  }
  else
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_LOCKED;
 8020454:	697b      	ldr	r3, [r7, #20]
 8020456:	2201      	movs	r2, #1
 8020458:	f883 2262 	strb.w	r2, [r3, #610]	; 0x262
  }

  hmsc->bot_data_length = 0U;
 802045c:	697b      	ldr	r3, [r7, #20]
 802045e:	2200      	movs	r2, #0
 8020460:	60da      	str	r2, [r3, #12]

  return 0;
 8020462:	2300      	movs	r3, #0
}
 8020464:	4618      	mov	r0, r3
 8020466:	371c      	adds	r7, #28
 8020468:	46bd      	mov	sp, r7
 802046a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802046e:	4770      	bx	lr

08020470 <SCSI_Read10>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Read10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8020470:	b580      	push	{r7, lr}
 8020472:	b086      	sub	sp, #24
 8020474:	af00      	add	r7, sp, #0
 8020476:	60f8      	str	r0, [r7, #12]
 8020478:	460b      	mov	r3, r1
 802047a:	607a      	str	r2, [r7, #4]
 802047c:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 802047e:	68fb      	ldr	r3, [r7, #12]
 8020480:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8020484:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 8020486:	697b      	ldr	r3, [r7, #20]
 8020488:	2b00      	cmp	r3, #0
 802048a:	d102      	bne.n	8020492 <SCSI_Read10+0x22>
  {
    return -1;
 802048c:	f04f 33ff 	mov.w	r3, #4294967295
 8020490:	e08a      	b.n	80205a8 <SCSI_Read10+0x138>
  }

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 8020492:	697b      	ldr	r3, [r7, #20]
 8020494:	7a1b      	ldrb	r3, [r3, #8]
 8020496:	2b00      	cmp	r3, #0
 8020498:	d17c      	bne.n	8020594 <SCSI_Read10+0x124>
  {
    /* case 10 : Ho <> Di */
    if ((hmsc->cbw.bmFlags & 0x80U) != 0x80U)
 802049a:	697b      	ldr	r3, [r7, #20]
 802049c:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
 80204a0:	b25b      	sxtb	r3, r3
 80204a2:	2b00      	cmp	r3, #0
 80204a4:	db0a      	blt.n	80204bc <SCSI_Read10+0x4c>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 80204a6:	697b      	ldr	r3, [r7, #20]
 80204a8:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 80204ac:	2320      	movs	r3, #32
 80204ae:	2205      	movs	r2, #5
 80204b0:	68f8      	ldr	r0, [r7, #12]
 80204b2:	f7ff ff1c 	bl	80202ee <SCSI_SenseCode>
      return -1;
 80204b6:	f04f 33ff 	mov.w	r3, #4294967295
 80204ba:	e075      	b.n	80205a8 <SCSI_Read10+0x138>
    }

    if (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED)
 80204bc:	697b      	ldr	r3, [r7, #20]
 80204be:	f893 3262 	ldrb.w	r3, [r3, #610]	; 0x262
 80204c2:	2b02      	cmp	r3, #2
 80204c4:	d108      	bne.n	80204d8 <SCSI_Read10+0x68>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 80204c6:	7af9      	ldrb	r1, [r7, #11]
 80204c8:	233a      	movs	r3, #58	; 0x3a
 80204ca:	2202      	movs	r2, #2
 80204cc:	68f8      	ldr	r0, [r7, #12]
 80204ce:	f7ff ff0e 	bl	80202ee <SCSI_SenseCode>

      return -1;
 80204d2:	f04f 33ff 	mov.w	r3, #4294967295
 80204d6:	e067      	b.n	80205a8 <SCSI_Read10+0x138>
    }

    if (((USBD_StorageTypeDef *)pdev->pUserData)->IsReady(lun) != 0)
 80204d8:	68fb      	ldr	r3, [r7, #12]
 80204da:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80204de:	689b      	ldr	r3, [r3, #8]
 80204e0:	7afa      	ldrb	r2, [r7, #11]
 80204e2:	4610      	mov	r0, r2
 80204e4:	4798      	blx	r3
 80204e6:	4603      	mov	r3, r0
 80204e8:	2b00      	cmp	r3, #0
 80204ea:	d008      	beq.n	80204fe <SCSI_Read10+0x8e>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 80204ec:	7af9      	ldrb	r1, [r7, #11]
 80204ee:	233a      	movs	r3, #58	; 0x3a
 80204f0:	2202      	movs	r2, #2
 80204f2:	68f8      	ldr	r0, [r7, #12]
 80204f4:	f7ff fefb 	bl	80202ee <SCSI_SenseCode>
      return -1;
 80204f8:	f04f 33ff 	mov.w	r3, #4294967295
 80204fc:	e054      	b.n	80205a8 <SCSI_Read10+0x138>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 80204fe:	687b      	ldr	r3, [r7, #4]
 8020500:	3302      	adds	r3, #2
 8020502:	781b      	ldrb	r3, [r3, #0]
 8020504:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 8020506:	687b      	ldr	r3, [r7, #4]
 8020508:	3303      	adds	r3, #3
 802050a:	781b      	ldrb	r3, [r3, #0]
 802050c:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 802050e:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] <<  8) |
 8020510:	687b      	ldr	r3, [r7, #4]
 8020512:	3304      	adds	r3, #4
 8020514:	781b      	ldrb	r3, [r3, #0]
 8020516:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 8020518:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 802051a:	687a      	ldr	r2, [r7, #4]
 802051c:	3205      	adds	r2, #5
 802051e:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] <<  8) |
 8020520:	431a      	orrs	r2, r3
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8020522:	697b      	ldr	r3, [r7, #20]
 8020524:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

    hmsc->scsi_blk_len = ((uint32_t)params[7] <<  8) | (uint32_t)params[8];
 8020528:	687b      	ldr	r3, [r7, #4]
 802052a:	3307      	adds	r3, #7
 802052c:	781b      	ldrb	r3, [r3, #0]
 802052e:	021b      	lsls	r3, r3, #8
 8020530:	687a      	ldr	r2, [r7, #4]
 8020532:	3208      	adds	r2, #8
 8020534:	7812      	ldrb	r2, [r2, #0]
 8020536:	431a      	orrs	r2, r3
 8020538:	697b      	ldr	r3, [r7, #20]
 802053a:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 802053e:	697b      	ldr	r3, [r7, #20]
 8020540:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
 8020544:	697b      	ldr	r3, [r7, #20]
 8020546:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 802054a:	7af9      	ldrb	r1, [r7, #11]
 802054c:	68f8      	ldr	r0, [r7, #12]
 802054e:	f000 faad 	bl	8020aac <SCSI_CheckAddressRange>
 8020552:	4603      	mov	r3, r0
 8020554:	2b00      	cmp	r3, #0
 8020556:	da02      	bge.n	802055e <SCSI_Read10+0xee>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 8020558:	f04f 33ff 	mov.w	r3, #4294967295
 802055c:	e024      	b.n	80205a8 <SCSI_Read10+0x138>
    }

    /* cases 4,5 : Hi <> Dn */
    if (hmsc->cbw.dDataLength != (hmsc->scsi_blk_len * hmsc->scsi_blk_size))
 802055e:	697b      	ldr	r3, [r7, #20]
 8020560:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 8020564:	697b      	ldr	r3, [r7, #20]
 8020566:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 802056a:	6979      	ldr	r1, [r7, #20]
 802056c:	f8b1 1264 	ldrh.w	r1, [r1, #612]	; 0x264
 8020570:	fb01 f303 	mul.w	r3, r1, r3
 8020574:	429a      	cmp	r2, r3
 8020576:	d00a      	beq.n	802058e <SCSI_Read10+0x11e>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8020578:	697b      	ldr	r3, [r7, #20]
 802057a:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 802057e:	2320      	movs	r3, #32
 8020580:	2205      	movs	r2, #5
 8020582:	68f8      	ldr	r0, [r7, #12]
 8020584:	f7ff feb3 	bl	80202ee <SCSI_SenseCode>
      return -1;
 8020588:	f04f 33ff 	mov.w	r3, #4294967295
 802058c:	e00c      	b.n	80205a8 <SCSI_Read10+0x138>
    }

    hmsc->bot_state = USBD_BOT_DATA_IN;
 802058e:	697b      	ldr	r3, [r7, #20]
 8020590:	2202      	movs	r2, #2
 8020592:	721a      	strb	r2, [r3, #8]
  }
  hmsc->bot_data_length = MSC_MEDIA_PACKET;
 8020594:	697b      	ldr	r3, [r7, #20]
 8020596:	f44f 7200 	mov.w	r2, #512	; 0x200
 802059a:	60da      	str	r2, [r3, #12]

  return SCSI_ProcessRead(pdev, lun);
 802059c:	7afb      	ldrb	r3, [r7, #11]
 802059e:	4619      	mov	r1, r3
 80205a0:	68f8      	ldr	r0, [r7, #12]
 80205a2:	f000 faab 	bl	8020afc <SCSI_ProcessRead>
 80205a6:	4603      	mov	r3, r0
}
 80205a8:	4618      	mov	r0, r3
 80205aa:	3718      	adds	r7, #24
 80205ac:	46bd      	mov	sp, r7
 80205ae:	bd80      	pop	{r7, pc}

080205b0 <SCSI_Read12>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Read12(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 80205b0:	b580      	push	{r7, lr}
 80205b2:	b086      	sub	sp, #24
 80205b4:	af00      	add	r7, sp, #0
 80205b6:	60f8      	str	r0, [r7, #12]
 80205b8:	460b      	mov	r3, r1
 80205ba:	607a      	str	r2, [r7, #4]
 80205bc:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 80205be:	68fb      	ldr	r3, [r7, #12]
 80205c0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80205c4:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 80205c6:	697b      	ldr	r3, [r7, #20]
 80205c8:	2b00      	cmp	r3, #0
 80205ca:	d102      	bne.n	80205d2 <SCSI_Read12+0x22>
  {
    return -1;
 80205cc:	f04f 33ff 	mov.w	r3, #4294967295
 80205d0:	e095      	b.n	80206fe <SCSI_Read12+0x14e>
  }

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 80205d2:	697b      	ldr	r3, [r7, #20]
 80205d4:	7a1b      	ldrb	r3, [r3, #8]
 80205d6:	2b00      	cmp	r3, #0
 80205d8:	f040 8087 	bne.w	80206ea <SCSI_Read12+0x13a>
  {
    /* case 10 : Ho <> Di */
    if ((hmsc->cbw.bmFlags & 0x80U) != 0x80U)
 80205dc:	697b      	ldr	r3, [r7, #20]
 80205de:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
 80205e2:	b25b      	sxtb	r3, r3
 80205e4:	2b00      	cmp	r3, #0
 80205e6:	db0a      	blt.n	80205fe <SCSI_Read12+0x4e>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 80205e8:	697b      	ldr	r3, [r7, #20]
 80205ea:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 80205ee:	2320      	movs	r3, #32
 80205f0:	2205      	movs	r2, #5
 80205f2:	68f8      	ldr	r0, [r7, #12]
 80205f4:	f7ff fe7b 	bl	80202ee <SCSI_SenseCode>
      return -1;
 80205f8:	f04f 33ff 	mov.w	r3, #4294967295
 80205fc:	e07f      	b.n	80206fe <SCSI_Read12+0x14e>
    }

    if (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED)
 80205fe:	697b      	ldr	r3, [r7, #20]
 8020600:	f893 3262 	ldrb.w	r3, [r3, #610]	; 0x262
 8020604:	2b02      	cmp	r3, #2
 8020606:	d108      	bne.n	802061a <SCSI_Read12+0x6a>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8020608:	7af9      	ldrb	r1, [r7, #11]
 802060a:	233a      	movs	r3, #58	; 0x3a
 802060c:	2202      	movs	r2, #2
 802060e:	68f8      	ldr	r0, [r7, #12]
 8020610:	f7ff fe6d 	bl	80202ee <SCSI_SenseCode>
      return -1;
 8020614:	f04f 33ff 	mov.w	r3, #4294967295
 8020618:	e071      	b.n	80206fe <SCSI_Read12+0x14e>
    }

    if (((USBD_StorageTypeDef *)pdev->pUserData)->IsReady(lun) != 0)
 802061a:	68fb      	ldr	r3, [r7, #12]
 802061c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8020620:	689b      	ldr	r3, [r3, #8]
 8020622:	7afa      	ldrb	r2, [r7, #11]
 8020624:	4610      	mov	r0, r2
 8020626:	4798      	blx	r3
 8020628:	4603      	mov	r3, r0
 802062a:	2b00      	cmp	r3, #0
 802062c:	d008      	beq.n	8020640 <SCSI_Read12+0x90>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 802062e:	7af9      	ldrb	r1, [r7, #11]
 8020630:	233a      	movs	r3, #58	; 0x3a
 8020632:	2202      	movs	r2, #2
 8020634:	68f8      	ldr	r0, [r7, #12]
 8020636:	f7ff fe5a 	bl	80202ee <SCSI_SenseCode>
      return -1;
 802063a:	f04f 33ff 	mov.w	r3, #4294967295
 802063e:	e05e      	b.n	80206fe <SCSI_Read12+0x14e>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8020640:	687b      	ldr	r3, [r7, #4]
 8020642:	3302      	adds	r3, #2
 8020644:	781b      	ldrb	r3, [r3, #0]
 8020646:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 8020648:	687b      	ldr	r3, [r7, #4]
 802064a:	3303      	adds	r3, #3
 802064c:	781b      	ldrb	r3, [r3, #0]
 802064e:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8020650:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] <<  8) |
 8020652:	687b      	ldr	r3, [r7, #4]
 8020654:	3304      	adds	r3, #4
 8020656:	781b      	ldrb	r3, [r3, #0]
 8020658:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 802065a:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 802065c:	687a      	ldr	r2, [r7, #4]
 802065e:	3205      	adds	r2, #5
 8020660:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] <<  8) |
 8020662:	431a      	orrs	r2, r3
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8020664:	697b      	ldr	r3, [r7, #20]
 8020666:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 802066a:	687b      	ldr	r3, [r7, #4]
 802066c:	3306      	adds	r3, #6
 802066e:	781b      	ldrb	r3, [r3, #0]
 8020670:	061a      	lsls	r2, r3, #24
                         ((uint32_t)params[7] << 16) |
 8020672:	687b      	ldr	r3, [r7, #4]
 8020674:	3307      	adds	r3, #7
 8020676:	781b      	ldrb	r3, [r3, #0]
 8020678:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 802067a:	431a      	orrs	r2, r3
                         ((uint32_t)params[8] << 8) |
 802067c:	687b      	ldr	r3, [r7, #4]
 802067e:	3308      	adds	r3, #8
 8020680:	781b      	ldrb	r3, [r3, #0]
 8020682:	021b      	lsls	r3, r3, #8
                         ((uint32_t)params[7] << 16) |
 8020684:	4313      	orrs	r3, r2
                         (uint32_t)params[9];
 8020686:	687a      	ldr	r2, [r7, #4]
 8020688:	3209      	adds	r2, #9
 802068a:	7812      	ldrb	r2, [r2, #0]
                         ((uint32_t)params[8] << 8) |
 802068c:	431a      	orrs	r2, r3
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 802068e:	697b      	ldr	r3, [r7, #20]
 8020690:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 8020694:	697b      	ldr	r3, [r7, #20]
 8020696:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
 802069a:	697b      	ldr	r3, [r7, #20]
 802069c:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 80206a0:	7af9      	ldrb	r1, [r7, #11]
 80206a2:	68f8      	ldr	r0, [r7, #12]
 80206a4:	f000 fa02 	bl	8020aac <SCSI_CheckAddressRange>
 80206a8:	4603      	mov	r3, r0
 80206aa:	2b00      	cmp	r3, #0
 80206ac:	da02      	bge.n	80206b4 <SCSI_Read12+0x104>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 80206ae:	f04f 33ff 	mov.w	r3, #4294967295
 80206b2:	e024      	b.n	80206fe <SCSI_Read12+0x14e>
    }

    /* cases 4,5 : Hi <> Dn */
    if (hmsc->cbw.dDataLength != (hmsc->scsi_blk_len * hmsc->scsi_blk_size))
 80206b4:	697b      	ldr	r3, [r7, #20]
 80206b6:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 80206ba:	697b      	ldr	r3, [r7, #20]
 80206bc:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 80206c0:	6979      	ldr	r1, [r7, #20]
 80206c2:	f8b1 1264 	ldrh.w	r1, [r1, #612]	; 0x264
 80206c6:	fb01 f303 	mul.w	r3, r1, r3
 80206ca:	429a      	cmp	r2, r3
 80206cc:	d00a      	beq.n	80206e4 <SCSI_Read12+0x134>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 80206ce:	697b      	ldr	r3, [r7, #20]
 80206d0:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 80206d4:	2320      	movs	r3, #32
 80206d6:	2205      	movs	r2, #5
 80206d8:	68f8      	ldr	r0, [r7, #12]
 80206da:	f7ff fe08 	bl	80202ee <SCSI_SenseCode>
      return -1;
 80206de:	f04f 33ff 	mov.w	r3, #4294967295
 80206e2:	e00c      	b.n	80206fe <SCSI_Read12+0x14e>
    }

    hmsc->bot_state = USBD_BOT_DATA_IN;
 80206e4:	697b      	ldr	r3, [r7, #20]
 80206e6:	2202      	movs	r2, #2
 80206e8:	721a      	strb	r2, [r3, #8]
  }
  hmsc->bot_data_length = MSC_MEDIA_PACKET;
 80206ea:	697b      	ldr	r3, [r7, #20]
 80206ec:	f44f 7200 	mov.w	r2, #512	; 0x200
 80206f0:	60da      	str	r2, [r3, #12]

  return SCSI_ProcessRead(pdev, lun);
 80206f2:	7afb      	ldrb	r3, [r7, #11]
 80206f4:	4619      	mov	r1, r3
 80206f6:	68f8      	ldr	r0, [r7, #12]
 80206f8:	f000 fa00 	bl	8020afc <SCSI_ProcessRead>
 80206fc:	4603      	mov	r3, r0
}
 80206fe:	4618      	mov	r0, r3
 8020700:	3718      	adds	r7, #24
 8020702:	46bd      	mov	sp, r7
 8020704:	bd80      	pop	{r7, pc}

08020706 <SCSI_Write10>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Write10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8020706:	b580      	push	{r7, lr}
 8020708:	b086      	sub	sp, #24
 802070a:	af00      	add	r7, sp, #0
 802070c:	60f8      	str	r0, [r7, #12]
 802070e:	460b      	mov	r3, r1
 8020710:	607a      	str	r2, [r7, #4]
 8020712:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8020714:	68fb      	ldr	r3, [r7, #12]
 8020716:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 802071a:	617b      	str	r3, [r7, #20]
  uint32_t len;

  if (hmsc == NULL)
 802071c:	697b      	ldr	r3, [r7, #20]
 802071e:	2b00      	cmp	r3, #0
 8020720:	d102      	bne.n	8020728 <SCSI_Write10+0x22>
  {
    return -1;
 8020722:	f04f 33ff 	mov.w	r3, #4294967295
 8020726:	e0af      	b.n	8020888 <SCSI_Write10+0x182>
  }

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 8020728:	697b      	ldr	r3, [r7, #20]
 802072a:	7a1b      	ldrb	r3, [r3, #8]
 802072c:	2b00      	cmp	r3, #0
 802072e:	f040 80a5 	bne.w	802087c <SCSI_Write10+0x176>
  {
    if (hmsc->cbw.dDataLength == 0U)
 8020732:	697b      	ldr	r3, [r7, #20]
 8020734:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8020738:	2b00      	cmp	r3, #0
 802073a:	d10a      	bne.n	8020752 <SCSI_Write10+0x4c>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 802073c:	697b      	ldr	r3, [r7, #20]
 802073e:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 8020742:	2320      	movs	r3, #32
 8020744:	2205      	movs	r2, #5
 8020746:	68f8      	ldr	r0, [r7, #12]
 8020748:	f7ff fdd1 	bl	80202ee <SCSI_SenseCode>
      return -1;
 802074c:	f04f 33ff 	mov.w	r3, #4294967295
 8020750:	e09a      	b.n	8020888 <SCSI_Write10+0x182>
    }

    /* case 8 : Hi <> Do */
    if ((hmsc->cbw.bmFlags & 0x80U) == 0x80U)
 8020752:	697b      	ldr	r3, [r7, #20]
 8020754:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
 8020758:	b25b      	sxtb	r3, r3
 802075a:	2b00      	cmp	r3, #0
 802075c:	da0a      	bge.n	8020774 <SCSI_Write10+0x6e>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 802075e:	697b      	ldr	r3, [r7, #20]
 8020760:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 8020764:	2320      	movs	r3, #32
 8020766:	2205      	movs	r2, #5
 8020768:	68f8      	ldr	r0, [r7, #12]
 802076a:	f7ff fdc0 	bl	80202ee <SCSI_SenseCode>
      return -1;
 802076e:	f04f 33ff 	mov.w	r3, #4294967295
 8020772:	e089      	b.n	8020888 <SCSI_Write10+0x182>
    }

    /* Check whether Media is ready */
    if (((USBD_StorageTypeDef *)pdev->pUserData)->IsReady(lun) != 0)
 8020774:	68fb      	ldr	r3, [r7, #12]
 8020776:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 802077a:	689b      	ldr	r3, [r3, #8]
 802077c:	7afa      	ldrb	r2, [r7, #11]
 802077e:	4610      	mov	r0, r2
 8020780:	4798      	blx	r3
 8020782:	4603      	mov	r3, r0
 8020784:	2b00      	cmp	r3, #0
 8020786:	d008      	beq.n	802079a <SCSI_Write10+0x94>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8020788:	7af9      	ldrb	r1, [r7, #11]
 802078a:	233a      	movs	r3, #58	; 0x3a
 802078c:	2202      	movs	r2, #2
 802078e:	68f8      	ldr	r0, [r7, #12]
 8020790:	f7ff fdad 	bl	80202ee <SCSI_SenseCode>
      return -1;
 8020794:	f04f 33ff 	mov.w	r3, #4294967295
 8020798:	e076      	b.n	8020888 <SCSI_Write10+0x182>
    }

    /* Check If media is write-protected */
    if (((USBD_StorageTypeDef *)pdev->pUserData)->IsWriteProtected(lun) != 0)
 802079a:	68fb      	ldr	r3, [r7, #12]
 802079c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80207a0:	68db      	ldr	r3, [r3, #12]
 80207a2:	7afa      	ldrb	r2, [r7, #11]
 80207a4:	4610      	mov	r0, r2
 80207a6:	4798      	blx	r3
 80207a8:	4603      	mov	r3, r0
 80207aa:	2b00      	cmp	r3, #0
 80207ac:	d008      	beq.n	80207c0 <SCSI_Write10+0xba>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, WRITE_PROTECTED);
 80207ae:	7af9      	ldrb	r1, [r7, #11]
 80207b0:	2327      	movs	r3, #39	; 0x27
 80207b2:	2202      	movs	r2, #2
 80207b4:	68f8      	ldr	r0, [r7, #12]
 80207b6:	f7ff fd9a 	bl	80202ee <SCSI_SenseCode>
      return -1;
 80207ba:	f04f 33ff 	mov.w	r3, #4294967295
 80207be:	e063      	b.n	8020888 <SCSI_Write10+0x182>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 80207c0:	687b      	ldr	r3, [r7, #4]
 80207c2:	3302      	adds	r3, #2
 80207c4:	781b      	ldrb	r3, [r3, #0]
 80207c6:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 80207c8:	687b      	ldr	r3, [r7, #4]
 80207ca:	3303      	adds	r3, #3
 80207cc:	781b      	ldrb	r3, [r3, #0]
 80207ce:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 80207d0:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] << 8) |
 80207d2:	687b      	ldr	r3, [r7, #4]
 80207d4:	3304      	adds	r3, #4
 80207d6:	781b      	ldrb	r3, [r3, #0]
 80207d8:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 80207da:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 80207dc:	687a      	ldr	r2, [r7, #4]
 80207de:	3205      	adds	r2, #5
 80207e0:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] << 8) |
 80207e2:	431a      	orrs	r2, r3
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 80207e4:	697b      	ldr	r3, [r7, #20]
 80207e6:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

    hmsc->scsi_blk_len = ((uint32_t)params[7] << 8) |
 80207ea:	687b      	ldr	r3, [r7, #4]
 80207ec:	3307      	adds	r3, #7
 80207ee:	781b      	ldrb	r3, [r3, #0]
 80207f0:	021b      	lsls	r3, r3, #8
                         (uint32_t)params[8];
 80207f2:	687a      	ldr	r2, [r7, #4]
 80207f4:	3208      	adds	r2, #8
 80207f6:	7812      	ldrb	r2, [r2, #0]
    hmsc->scsi_blk_len = ((uint32_t)params[7] << 8) |
 80207f8:	431a      	orrs	r2, r3
 80207fa:	697b      	ldr	r3, [r7, #20]
 80207fc:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

    /* check if LBA address is in the right range */
    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 8020800:	697b      	ldr	r3, [r7, #20]
 8020802:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
 8020806:	697b      	ldr	r3, [r7, #20]
 8020808:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 802080c:	7af9      	ldrb	r1, [r7, #11]
 802080e:	68f8      	ldr	r0, [r7, #12]
 8020810:	f000 f94c 	bl	8020aac <SCSI_CheckAddressRange>
 8020814:	4603      	mov	r3, r0
 8020816:	2b00      	cmp	r3, #0
 8020818:	da02      	bge.n	8020820 <SCSI_Write10+0x11a>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 802081a:	f04f 33ff 	mov.w	r3, #4294967295
 802081e:	e033      	b.n	8020888 <SCSI_Write10+0x182>
    }

    len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 8020820:	697b      	ldr	r3, [r7, #20]
 8020822:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 8020826:	697a      	ldr	r2, [r7, #20]
 8020828:	f8b2 2264 	ldrh.w	r2, [r2, #612]	; 0x264
 802082c:	fb02 f303 	mul.w	r3, r2, r3
 8020830:	613b      	str	r3, [r7, #16]

    /* cases 3,11,13 : Hn,Ho <> D0 */
    if (hmsc->cbw.dDataLength != len)
 8020832:	697b      	ldr	r3, [r7, #20]
 8020834:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8020838:	693a      	ldr	r2, [r7, #16]
 802083a:	429a      	cmp	r2, r3
 802083c:	d00a      	beq.n	8020854 <SCSI_Write10+0x14e>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 802083e:	697b      	ldr	r3, [r7, #20]
 8020840:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 8020844:	2320      	movs	r3, #32
 8020846:	2205      	movs	r2, #5
 8020848:	68f8      	ldr	r0, [r7, #12]
 802084a:	f7ff fd50 	bl	80202ee <SCSI_SenseCode>
      return -1;
 802084e:	f04f 33ff 	mov.w	r3, #4294967295
 8020852:	e019      	b.n	8020888 <SCSI_Write10+0x182>
    }

    len = MIN(len, MSC_MEDIA_PACKET);
 8020854:	693b      	ldr	r3, [r7, #16]
 8020856:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 802085a:	bf28      	it	cs
 802085c:	f44f 7300 	movcs.w	r3, #512	; 0x200
 8020860:	613b      	str	r3, [r7, #16]

    /* Prepare EP to receive first data packet */
    hmsc->bot_state = USBD_BOT_DATA_OUT;
 8020862:	697b      	ldr	r3, [r7, #20]
 8020864:	2201      	movs	r2, #1
 8020866:	721a      	strb	r2, [r3, #8]
    (void)USBD_LL_PrepareReceive(pdev, MSC_EPOUT_ADDR, hmsc->bot_data, len);
 8020868:	697b      	ldr	r3, [r7, #20]
 802086a:	f103 0210 	add.w	r2, r3, #16
 802086e:	693b      	ldr	r3, [r7, #16]
 8020870:	2101      	movs	r1, #1
 8020872:	68f8      	ldr	r0, [r7, #12]
 8020874:	f002 f87f 	bl	8022976 <USBD_LL_PrepareReceive>
  else /* Write Process ongoing */
  {
    return SCSI_ProcessWrite(pdev, lun);
  }

  return 0;
 8020878:	2300      	movs	r3, #0
 802087a:	e005      	b.n	8020888 <SCSI_Write10+0x182>
    return SCSI_ProcessWrite(pdev, lun);
 802087c:	7afb      	ldrb	r3, [r7, #11]
 802087e:	4619      	mov	r1, r3
 8020880:	68f8      	ldr	r0, [r7, #12]
 8020882:	f000 f9b4 	bl	8020bee <SCSI_ProcessWrite>
 8020886:	4603      	mov	r3, r0
}
 8020888:	4618      	mov	r0, r3
 802088a:	3718      	adds	r7, #24
 802088c:	46bd      	mov	sp, r7
 802088e:	bd80      	pop	{r7, pc}

08020890 <SCSI_Write12>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Write12(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8020890:	b580      	push	{r7, lr}
 8020892:	b086      	sub	sp, #24
 8020894:	af00      	add	r7, sp, #0
 8020896:	60f8      	str	r0, [r7, #12]
 8020898:	460b      	mov	r3, r1
 802089a:	607a      	str	r2, [r7, #4]
 802089c:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 802089e:	68fb      	ldr	r3, [r7, #12]
 80208a0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80208a4:	617b      	str	r3, [r7, #20]
  uint32_t len;

  if (hmsc == NULL)
 80208a6:	697b      	ldr	r3, [r7, #20]
 80208a8:	2b00      	cmp	r3, #0
 80208aa:	d102      	bne.n	80208b2 <SCSI_Write12+0x22>
  {
    return -1;
 80208ac:	f04f 33ff 	mov.w	r3, #4294967295
 80208b0:	e0bf      	b.n	8020a32 <SCSI_Write12+0x1a2>
  }

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 80208b2:	697b      	ldr	r3, [r7, #20]
 80208b4:	7a1b      	ldrb	r3, [r3, #8]
 80208b6:	2b00      	cmp	r3, #0
 80208b8:	f040 80b5 	bne.w	8020a26 <SCSI_Write12+0x196>
  {
    if (hmsc->cbw.dDataLength == 0U)
 80208bc:	697b      	ldr	r3, [r7, #20]
 80208be:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 80208c2:	2b00      	cmp	r3, #0
 80208c4:	d10a      	bne.n	80208dc <SCSI_Write12+0x4c>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 80208c6:	697b      	ldr	r3, [r7, #20]
 80208c8:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 80208cc:	2320      	movs	r3, #32
 80208ce:	2205      	movs	r2, #5
 80208d0:	68f8      	ldr	r0, [r7, #12]
 80208d2:	f7ff fd0c 	bl	80202ee <SCSI_SenseCode>
      return -1;
 80208d6:	f04f 33ff 	mov.w	r3, #4294967295
 80208da:	e0aa      	b.n	8020a32 <SCSI_Write12+0x1a2>
    }

    /* case 8 : Hi <> Do */
    if ((hmsc->cbw.bmFlags & 0x80U) == 0x80U)
 80208dc:	697b      	ldr	r3, [r7, #20]
 80208de:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
 80208e2:	b25b      	sxtb	r3, r3
 80208e4:	2b00      	cmp	r3, #0
 80208e6:	da0a      	bge.n	80208fe <SCSI_Write12+0x6e>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 80208e8:	697b      	ldr	r3, [r7, #20]
 80208ea:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 80208ee:	2320      	movs	r3, #32
 80208f0:	2205      	movs	r2, #5
 80208f2:	68f8      	ldr	r0, [r7, #12]
 80208f4:	f7ff fcfb 	bl	80202ee <SCSI_SenseCode>
      return -1;
 80208f8:	f04f 33ff 	mov.w	r3, #4294967295
 80208fc:	e099      	b.n	8020a32 <SCSI_Write12+0x1a2>
    }

    /* Check whether Media is ready */
    if (((USBD_StorageTypeDef *)pdev->pUserData)->IsReady(lun) != 0)
 80208fe:	68fb      	ldr	r3, [r7, #12]
 8020900:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8020904:	689b      	ldr	r3, [r3, #8]
 8020906:	7afa      	ldrb	r2, [r7, #11]
 8020908:	4610      	mov	r0, r2
 802090a:	4798      	blx	r3
 802090c:	4603      	mov	r3, r0
 802090e:	2b00      	cmp	r3, #0
 8020910:	d00b      	beq.n	802092a <SCSI_Write12+0x9a>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8020912:	7af9      	ldrb	r1, [r7, #11]
 8020914:	233a      	movs	r3, #58	; 0x3a
 8020916:	2202      	movs	r2, #2
 8020918:	68f8      	ldr	r0, [r7, #12]
 802091a:	f7ff fce8 	bl	80202ee <SCSI_SenseCode>
      hmsc->bot_state = USBD_BOT_NO_DATA;
 802091e:	697b      	ldr	r3, [r7, #20]
 8020920:	2205      	movs	r2, #5
 8020922:	721a      	strb	r2, [r3, #8]
      return -1;
 8020924:	f04f 33ff 	mov.w	r3, #4294967295
 8020928:	e083      	b.n	8020a32 <SCSI_Write12+0x1a2>
    }

    /* Check If media is write-protected */
    if (((USBD_StorageTypeDef *)pdev->pUserData)->IsWriteProtected(lun) != 0)
 802092a:	68fb      	ldr	r3, [r7, #12]
 802092c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8020930:	68db      	ldr	r3, [r3, #12]
 8020932:	7afa      	ldrb	r2, [r7, #11]
 8020934:	4610      	mov	r0, r2
 8020936:	4798      	blx	r3
 8020938:	4603      	mov	r3, r0
 802093a:	2b00      	cmp	r3, #0
 802093c:	d00b      	beq.n	8020956 <SCSI_Write12+0xc6>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, WRITE_PROTECTED);
 802093e:	7af9      	ldrb	r1, [r7, #11]
 8020940:	2327      	movs	r3, #39	; 0x27
 8020942:	2202      	movs	r2, #2
 8020944:	68f8      	ldr	r0, [r7, #12]
 8020946:	f7ff fcd2 	bl	80202ee <SCSI_SenseCode>
      hmsc->bot_state = USBD_BOT_NO_DATA;
 802094a:	697b      	ldr	r3, [r7, #20]
 802094c:	2205      	movs	r2, #5
 802094e:	721a      	strb	r2, [r3, #8]
      return -1;
 8020950:	f04f 33ff 	mov.w	r3, #4294967295
 8020954:	e06d      	b.n	8020a32 <SCSI_Write12+0x1a2>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8020956:	687b      	ldr	r3, [r7, #4]
 8020958:	3302      	adds	r3, #2
 802095a:	781b      	ldrb	r3, [r3, #0]
 802095c:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 802095e:	687b      	ldr	r3, [r7, #4]
 8020960:	3303      	adds	r3, #3
 8020962:	781b      	ldrb	r3, [r3, #0]
 8020964:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8020966:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] << 8) |
 8020968:	687b      	ldr	r3, [r7, #4]
 802096a:	3304      	adds	r3, #4
 802096c:	781b      	ldrb	r3, [r3, #0]
 802096e:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 8020970:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 8020972:	687a      	ldr	r2, [r7, #4]
 8020974:	3205      	adds	r2, #5
 8020976:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] << 8) |
 8020978:	431a      	orrs	r2, r3
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 802097a:	697b      	ldr	r3, [r7, #20]
 802097c:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 8020980:	687b      	ldr	r3, [r7, #4]
 8020982:	3306      	adds	r3, #6
 8020984:	781b      	ldrb	r3, [r3, #0]
 8020986:	061a      	lsls	r2, r3, #24
                         ((uint32_t)params[7] << 16) |
 8020988:	687b      	ldr	r3, [r7, #4]
 802098a:	3307      	adds	r3, #7
 802098c:	781b      	ldrb	r3, [r3, #0]
 802098e:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 8020990:	431a      	orrs	r2, r3
                         ((uint32_t)params[8] << 8) |
 8020992:	687b      	ldr	r3, [r7, #4]
 8020994:	3308      	adds	r3, #8
 8020996:	781b      	ldrb	r3, [r3, #0]
 8020998:	021b      	lsls	r3, r3, #8
                         ((uint32_t)params[7] << 16) |
 802099a:	4313      	orrs	r3, r2
                         (uint32_t)params[9];
 802099c:	687a      	ldr	r2, [r7, #4]
 802099e:	3209      	adds	r2, #9
 80209a0:	7812      	ldrb	r2, [r2, #0]
                         ((uint32_t)params[8] << 8) |
 80209a2:	431a      	orrs	r2, r3
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 80209a4:	697b      	ldr	r3, [r7, #20]
 80209a6:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

    /* check if LBA address is in the right range */
    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 80209aa:	697b      	ldr	r3, [r7, #20]
 80209ac:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
 80209b0:	697b      	ldr	r3, [r7, #20]
 80209b2:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 80209b6:	7af9      	ldrb	r1, [r7, #11]
 80209b8:	68f8      	ldr	r0, [r7, #12]
 80209ba:	f000 f877 	bl	8020aac <SCSI_CheckAddressRange>
 80209be:	4603      	mov	r3, r0
 80209c0:	2b00      	cmp	r3, #0
 80209c2:	da02      	bge.n	80209ca <SCSI_Write12+0x13a>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 80209c4:	f04f 33ff 	mov.w	r3, #4294967295
 80209c8:	e033      	b.n	8020a32 <SCSI_Write12+0x1a2>
    }

    len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 80209ca:	697b      	ldr	r3, [r7, #20]
 80209cc:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 80209d0:	697a      	ldr	r2, [r7, #20]
 80209d2:	f8b2 2264 	ldrh.w	r2, [r2, #612]	; 0x264
 80209d6:	fb02 f303 	mul.w	r3, r2, r3
 80209da:	613b      	str	r3, [r7, #16]

    /* cases 3,11,13 : Hn,Ho <> D0 */
    if (hmsc->cbw.dDataLength != len)
 80209dc:	697b      	ldr	r3, [r7, #20]
 80209de:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 80209e2:	693a      	ldr	r2, [r7, #16]
 80209e4:	429a      	cmp	r2, r3
 80209e6:	d00a      	beq.n	80209fe <SCSI_Write12+0x16e>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 80209e8:	697b      	ldr	r3, [r7, #20]
 80209ea:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 80209ee:	2320      	movs	r3, #32
 80209f0:	2205      	movs	r2, #5
 80209f2:	68f8      	ldr	r0, [r7, #12]
 80209f4:	f7ff fc7b 	bl	80202ee <SCSI_SenseCode>
      return -1;
 80209f8:	f04f 33ff 	mov.w	r3, #4294967295
 80209fc:	e019      	b.n	8020a32 <SCSI_Write12+0x1a2>
    }

    len = MIN(len, MSC_MEDIA_PACKET);
 80209fe:	693b      	ldr	r3, [r7, #16]
 8020a00:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8020a04:	bf28      	it	cs
 8020a06:	f44f 7300 	movcs.w	r3, #512	; 0x200
 8020a0a:	613b      	str	r3, [r7, #16]

    /* Prepare EP to receive first data packet */
    hmsc->bot_state = USBD_BOT_DATA_OUT;
 8020a0c:	697b      	ldr	r3, [r7, #20]
 8020a0e:	2201      	movs	r2, #1
 8020a10:	721a      	strb	r2, [r3, #8]
    (void)USBD_LL_PrepareReceive(pdev, MSC_EPOUT_ADDR, hmsc->bot_data, len);
 8020a12:	697b      	ldr	r3, [r7, #20]
 8020a14:	f103 0210 	add.w	r2, r3, #16
 8020a18:	693b      	ldr	r3, [r7, #16]
 8020a1a:	2101      	movs	r1, #1
 8020a1c:	68f8      	ldr	r0, [r7, #12]
 8020a1e:	f001 ffaa 	bl	8022976 <USBD_LL_PrepareReceive>
  else /* Write Process ongoing */
  {
    return SCSI_ProcessWrite(pdev, lun);
  }

  return 0;
 8020a22:	2300      	movs	r3, #0
 8020a24:	e005      	b.n	8020a32 <SCSI_Write12+0x1a2>
    return SCSI_ProcessWrite(pdev, lun);
 8020a26:	7afb      	ldrb	r3, [r7, #11]
 8020a28:	4619      	mov	r1, r3
 8020a2a:	68f8      	ldr	r0, [r7, #12]
 8020a2c:	f000 f8df 	bl	8020bee <SCSI_ProcessWrite>
 8020a30:	4603      	mov	r3, r0
}
 8020a32:	4618      	mov	r0, r3
 8020a34:	3718      	adds	r7, #24
 8020a36:	46bd      	mov	sp, r7
 8020a38:	bd80      	pop	{r7, pc}

08020a3a <SCSI_Verify10>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Verify10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8020a3a:	b580      	push	{r7, lr}
 8020a3c:	b086      	sub	sp, #24
 8020a3e:	af00      	add	r7, sp, #0
 8020a40:	60f8      	str	r0, [r7, #12]
 8020a42:	460b      	mov	r3, r1
 8020a44:	607a      	str	r2, [r7, #4]
 8020a46:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8020a48:	68fb      	ldr	r3, [r7, #12]
 8020a4a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8020a4e:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 8020a50:	697b      	ldr	r3, [r7, #20]
 8020a52:	2b00      	cmp	r3, #0
 8020a54:	d102      	bne.n	8020a5c <SCSI_Verify10+0x22>
  {
    return -1;
 8020a56:	f04f 33ff 	mov.w	r3, #4294967295
 8020a5a:	e023      	b.n	8020aa4 <SCSI_Verify10+0x6a>
  }

  if ((params[1] & 0x02U) == 0x02U)
 8020a5c:	687b      	ldr	r3, [r7, #4]
 8020a5e:	3301      	adds	r3, #1
 8020a60:	781b      	ldrb	r3, [r3, #0]
 8020a62:	f003 0302 	and.w	r3, r3, #2
 8020a66:	2b00      	cmp	r3, #0
 8020a68:	d008      	beq.n	8020a7c <SCSI_Verify10+0x42>
  {
    SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, INVALID_FIELED_IN_COMMAND);
 8020a6a:	7af9      	ldrb	r1, [r7, #11]
 8020a6c:	2324      	movs	r3, #36	; 0x24
 8020a6e:	2205      	movs	r2, #5
 8020a70:	68f8      	ldr	r0, [r7, #12]
 8020a72:	f7ff fc3c 	bl	80202ee <SCSI_SenseCode>
    return -1; /* Error, Verify Mode Not supported*/
 8020a76:	f04f 33ff 	mov.w	r3, #4294967295
 8020a7a:	e013      	b.n	8020aa4 <SCSI_Verify10+0x6a>
  }

  if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr, hmsc->scsi_blk_len) < 0)
 8020a7c:	697b      	ldr	r3, [r7, #20]
 8020a7e:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
 8020a82:	697b      	ldr	r3, [r7, #20]
 8020a84:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 8020a88:	7af9      	ldrb	r1, [r7, #11]
 8020a8a:	68f8      	ldr	r0, [r7, #12]
 8020a8c:	f000 f80e 	bl	8020aac <SCSI_CheckAddressRange>
 8020a90:	4603      	mov	r3, r0
 8020a92:	2b00      	cmp	r3, #0
 8020a94:	da02      	bge.n	8020a9c <SCSI_Verify10+0x62>
  {
    return -1; /* error */
 8020a96:	f04f 33ff 	mov.w	r3, #4294967295
 8020a9a:	e003      	b.n	8020aa4 <SCSI_Verify10+0x6a>
  }

  hmsc->bot_data_length = 0U;
 8020a9c:	697b      	ldr	r3, [r7, #20]
 8020a9e:	2200      	movs	r2, #0
 8020aa0:	60da      	str	r2, [r3, #12]

  return 0;
 8020aa2:	2300      	movs	r3, #0
}
 8020aa4:	4618      	mov	r0, r3
 8020aa6:	3718      	adds	r7, #24
 8020aa8:	46bd      	mov	sp, r7
 8020aaa:	bd80      	pop	{r7, pc}

08020aac <SCSI_CheckAddressRange>:
  * @param  blk_nbr: number of block to be processed
  * @retval status
  */
static int8_t SCSI_CheckAddressRange(USBD_HandleTypeDef *pdev, uint8_t lun,
                                     uint32_t blk_offset, uint32_t blk_nbr)
{
 8020aac:	b580      	push	{r7, lr}
 8020aae:	b086      	sub	sp, #24
 8020ab0:	af00      	add	r7, sp, #0
 8020ab2:	60f8      	str	r0, [r7, #12]
 8020ab4:	607a      	str	r2, [r7, #4]
 8020ab6:	603b      	str	r3, [r7, #0]
 8020ab8:	460b      	mov	r3, r1
 8020aba:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8020abc:	68fb      	ldr	r3, [r7, #12]
 8020abe:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8020ac2:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 8020ac4:	697b      	ldr	r3, [r7, #20]
 8020ac6:	2b00      	cmp	r3, #0
 8020ac8:	d102      	bne.n	8020ad0 <SCSI_CheckAddressRange+0x24>
  {
    return -1;
 8020aca:	f04f 33ff 	mov.w	r3, #4294967295
 8020ace:	e011      	b.n	8020af4 <SCSI_CheckAddressRange+0x48>
  }

  if ((blk_offset + blk_nbr) > hmsc->scsi_blk_nbr)
 8020ad0:	687a      	ldr	r2, [r7, #4]
 8020ad2:	683b      	ldr	r3, [r7, #0]
 8020ad4:	441a      	add	r2, r3
 8020ad6:	697b      	ldr	r3, [r7, #20]
 8020ad8:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8020adc:	429a      	cmp	r2, r3
 8020ade:	d908      	bls.n	8020af2 <SCSI_CheckAddressRange+0x46>
  {
    SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, ADDRESS_OUT_OF_RANGE);
 8020ae0:	7af9      	ldrb	r1, [r7, #11]
 8020ae2:	2321      	movs	r3, #33	; 0x21
 8020ae4:	2205      	movs	r2, #5
 8020ae6:	68f8      	ldr	r0, [r7, #12]
 8020ae8:	f7ff fc01 	bl	80202ee <SCSI_SenseCode>
    return -1;
 8020aec:	f04f 33ff 	mov.w	r3, #4294967295
 8020af0:	e000      	b.n	8020af4 <SCSI_CheckAddressRange+0x48>
  }

  return 0;
 8020af2:	2300      	movs	r3, #0
}
 8020af4:	4618      	mov	r0, r3
 8020af6:	3718      	adds	r7, #24
 8020af8:	46bd      	mov	sp, r7
 8020afa:	bd80      	pop	{r7, pc}

08020afc <SCSI_ProcessRead>:
  *         Handle Read Process
  * @param  lun: Logical unit number
  * @retval status
  */
static int8_t SCSI_ProcessRead(USBD_HandleTypeDef *pdev, uint8_t lun)
{
 8020afc:	b590      	push	{r4, r7, lr}
 8020afe:	b085      	sub	sp, #20
 8020b00:	af00      	add	r7, sp, #0
 8020b02:	6078      	str	r0, [r7, #4]
 8020b04:	460b      	mov	r3, r1
 8020b06:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8020b08:	687b      	ldr	r3, [r7, #4]
 8020b0a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8020b0e:	60fb      	str	r3, [r7, #12]
  uint32_t len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 8020b10:	68fb      	ldr	r3, [r7, #12]
 8020b12:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 8020b16:	68fa      	ldr	r2, [r7, #12]
 8020b18:	f8b2 2264 	ldrh.w	r2, [r2, #612]	; 0x264
 8020b1c:	fb02 f303 	mul.w	r3, r2, r3
 8020b20:	60bb      	str	r3, [r7, #8]

  if (hmsc == NULL)
 8020b22:	68fb      	ldr	r3, [r7, #12]
 8020b24:	2b00      	cmp	r3, #0
 8020b26:	d102      	bne.n	8020b2e <SCSI_ProcessRead+0x32>
  {
    return -1;
 8020b28:	f04f 33ff 	mov.w	r3, #4294967295
 8020b2c:	e05b      	b.n	8020be6 <SCSI_ProcessRead+0xea>
  }

  len = MIN(len, MSC_MEDIA_PACKET);
 8020b2e:	68bb      	ldr	r3, [r7, #8]
 8020b30:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8020b34:	bf28      	it	cs
 8020b36:	f44f 7300 	movcs.w	r3, #512	; 0x200
 8020b3a:	60bb      	str	r3, [r7, #8]

  if (((USBD_StorageTypeDef *)pdev->pUserData)->Read(lun, hmsc->bot_data,
 8020b3c:	687b      	ldr	r3, [r7, #4]
 8020b3e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8020b42:	691c      	ldr	r4, [r3, #16]
 8020b44:	68fb      	ldr	r3, [r7, #12]
 8020b46:	f103 0110 	add.w	r1, r3, #16
 8020b4a:	68fb      	ldr	r3, [r7, #12]
 8020b4c:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
                                                     hmsc->scsi_blk_addr,
                                                     (len / hmsc->scsi_blk_size)) < 0)
 8020b50:	68fb      	ldr	r3, [r7, #12]
 8020b52:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 8020b56:	4618      	mov	r0, r3
 8020b58:	68bb      	ldr	r3, [r7, #8]
 8020b5a:	fbb3 f3f0 	udiv	r3, r3, r0
  if (((USBD_StorageTypeDef *)pdev->pUserData)->Read(lun, hmsc->bot_data,
 8020b5e:	b29b      	uxth	r3, r3
 8020b60:	78f8      	ldrb	r0, [r7, #3]
 8020b62:	47a0      	blx	r4
 8020b64:	4603      	mov	r3, r0
 8020b66:	2b00      	cmp	r3, #0
 8020b68:	da08      	bge.n	8020b7c <SCSI_ProcessRead+0x80>
  {
    SCSI_SenseCode(pdev, lun, HARDWARE_ERROR, UNRECOVERED_READ_ERROR);
 8020b6a:	78f9      	ldrb	r1, [r7, #3]
 8020b6c:	2311      	movs	r3, #17
 8020b6e:	2204      	movs	r2, #4
 8020b70:	6878      	ldr	r0, [r7, #4]
 8020b72:	f7ff fbbc 	bl	80202ee <SCSI_SenseCode>
    return -1;
 8020b76:	f04f 33ff 	mov.w	r3, #4294967295
 8020b7a:	e034      	b.n	8020be6 <SCSI_ProcessRead+0xea>
  }

  (void)USBD_LL_Transmit(pdev, MSC_EPIN_ADDR, hmsc->bot_data, len);
 8020b7c:	68fb      	ldr	r3, [r7, #12]
 8020b7e:	f103 0210 	add.w	r2, r3, #16
 8020b82:	68bb      	ldr	r3, [r7, #8]
 8020b84:	2181      	movs	r1, #129	; 0x81
 8020b86:	6878      	ldr	r0, [r7, #4]
 8020b88:	f001 fed4 	bl	8022934 <USBD_LL_Transmit>

  hmsc->scsi_blk_addr += (len / hmsc->scsi_blk_size);
 8020b8c:	68fb      	ldr	r3, [r7, #12]
 8020b8e:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
 8020b92:	68fb      	ldr	r3, [r7, #12]
 8020b94:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 8020b98:	4619      	mov	r1, r3
 8020b9a:	68bb      	ldr	r3, [r7, #8]
 8020b9c:	fbb3 f3f1 	udiv	r3, r3, r1
 8020ba0:	441a      	add	r2, r3
 8020ba2:	68fb      	ldr	r3, [r7, #12]
 8020ba4:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
  hmsc->scsi_blk_len -= (len / hmsc->scsi_blk_size);
 8020ba8:	68fb      	ldr	r3, [r7, #12]
 8020baa:	f8d3 2270 	ldr.w	r2, [r3, #624]	; 0x270
 8020bae:	68fb      	ldr	r3, [r7, #12]
 8020bb0:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 8020bb4:	4619      	mov	r1, r3
 8020bb6:	68bb      	ldr	r3, [r7, #8]
 8020bb8:	fbb3 f3f1 	udiv	r3, r3, r1
 8020bbc:	1ad2      	subs	r2, r2, r3
 8020bbe:	68fb      	ldr	r3, [r7, #12]
 8020bc0:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

  /* case 6 : Hi = Di */
  hmsc->csw.dDataResidue -= len;
 8020bc4:	68fb      	ldr	r3, [r7, #12]
 8020bc6:	f8d3 2238 	ldr.w	r2, [r3, #568]	; 0x238
 8020bca:	68bb      	ldr	r3, [r7, #8]
 8020bcc:	1ad2      	subs	r2, r2, r3
 8020bce:	68fb      	ldr	r3, [r7, #12]
 8020bd0:	f8c3 2238 	str.w	r2, [r3, #568]	; 0x238

  if (hmsc->scsi_blk_len == 0U)
 8020bd4:	68fb      	ldr	r3, [r7, #12]
 8020bd6:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 8020bda:	2b00      	cmp	r3, #0
 8020bdc:	d102      	bne.n	8020be4 <SCSI_ProcessRead+0xe8>
  {
    hmsc->bot_state = USBD_BOT_LAST_DATA_IN;
 8020bde:	68fb      	ldr	r3, [r7, #12]
 8020be0:	2203      	movs	r2, #3
 8020be2:	721a      	strb	r2, [r3, #8]
  }

  return 0;
 8020be4:	2300      	movs	r3, #0
}
 8020be6:	4618      	mov	r0, r3
 8020be8:	3714      	adds	r7, #20
 8020bea:	46bd      	mov	sp, r7
 8020bec:	bd90      	pop	{r4, r7, pc}

08020bee <SCSI_ProcessWrite>:
  *         Handle Write Process
  * @param  lun: Logical unit number
  * @retval status
  */
static int8_t SCSI_ProcessWrite(USBD_HandleTypeDef *pdev, uint8_t lun)
{
 8020bee:	b590      	push	{r4, r7, lr}
 8020bf0:	b085      	sub	sp, #20
 8020bf2:	af00      	add	r7, sp, #0
 8020bf4:	6078      	str	r0, [r7, #4]
 8020bf6:	460b      	mov	r3, r1
 8020bf8:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8020bfa:	687b      	ldr	r3, [r7, #4]
 8020bfc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8020c00:	60fb      	str	r3, [r7, #12]
  uint32_t len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 8020c02:	68fb      	ldr	r3, [r7, #12]
 8020c04:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 8020c08:	68fa      	ldr	r2, [r7, #12]
 8020c0a:	f8b2 2264 	ldrh.w	r2, [r2, #612]	; 0x264
 8020c0e:	fb02 f303 	mul.w	r3, r2, r3
 8020c12:	60bb      	str	r3, [r7, #8]

  if (hmsc == NULL)
 8020c14:	68fb      	ldr	r3, [r7, #12]
 8020c16:	2b00      	cmp	r3, #0
 8020c18:	d102      	bne.n	8020c20 <SCSI_ProcessWrite+0x32>
  {
    return -1;
 8020c1a:	f04f 33ff 	mov.w	r3, #4294967295
 8020c1e:	e06b      	b.n	8020cf8 <SCSI_ProcessWrite+0x10a>
  }

  len = MIN(len, MSC_MEDIA_PACKET);
 8020c20:	68bb      	ldr	r3, [r7, #8]
 8020c22:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8020c26:	bf28      	it	cs
 8020c28:	f44f 7300 	movcs.w	r3, #512	; 0x200
 8020c2c:	60bb      	str	r3, [r7, #8]

  if (((USBD_StorageTypeDef *)pdev->pUserData)->Write(lun, hmsc->bot_data,
 8020c2e:	687b      	ldr	r3, [r7, #4]
 8020c30:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8020c34:	695c      	ldr	r4, [r3, #20]
 8020c36:	68fb      	ldr	r3, [r7, #12]
 8020c38:	f103 0110 	add.w	r1, r3, #16
 8020c3c:	68fb      	ldr	r3, [r7, #12]
 8020c3e:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
                                                      hmsc->scsi_blk_addr,
                                                      (len / hmsc->scsi_blk_size)) < 0)
 8020c42:	68fb      	ldr	r3, [r7, #12]
 8020c44:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 8020c48:	4618      	mov	r0, r3
 8020c4a:	68bb      	ldr	r3, [r7, #8]
 8020c4c:	fbb3 f3f0 	udiv	r3, r3, r0
  if (((USBD_StorageTypeDef *)pdev->pUserData)->Write(lun, hmsc->bot_data,
 8020c50:	b29b      	uxth	r3, r3
 8020c52:	78f8      	ldrb	r0, [r7, #3]
 8020c54:	47a0      	blx	r4
 8020c56:	4603      	mov	r3, r0
 8020c58:	2b00      	cmp	r3, #0
 8020c5a:	da08      	bge.n	8020c6e <SCSI_ProcessWrite+0x80>
  {
    SCSI_SenseCode(pdev, lun, HARDWARE_ERROR, WRITE_FAULT);
 8020c5c:	78f9      	ldrb	r1, [r7, #3]
 8020c5e:	2303      	movs	r3, #3
 8020c60:	2204      	movs	r2, #4
 8020c62:	6878      	ldr	r0, [r7, #4]
 8020c64:	f7ff fb43 	bl	80202ee <SCSI_SenseCode>
    return -1;
 8020c68:	f04f 33ff 	mov.w	r3, #4294967295
 8020c6c:	e044      	b.n	8020cf8 <SCSI_ProcessWrite+0x10a>
  }

  hmsc->scsi_blk_addr += (len / hmsc->scsi_blk_size);
 8020c6e:	68fb      	ldr	r3, [r7, #12]
 8020c70:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
 8020c74:	68fb      	ldr	r3, [r7, #12]
 8020c76:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 8020c7a:	4619      	mov	r1, r3
 8020c7c:	68bb      	ldr	r3, [r7, #8]
 8020c7e:	fbb3 f3f1 	udiv	r3, r3, r1
 8020c82:	441a      	add	r2, r3
 8020c84:	68fb      	ldr	r3, [r7, #12]
 8020c86:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
  hmsc->scsi_blk_len -= (len / hmsc->scsi_blk_size);
 8020c8a:	68fb      	ldr	r3, [r7, #12]
 8020c8c:	f8d3 2270 	ldr.w	r2, [r3, #624]	; 0x270
 8020c90:	68fb      	ldr	r3, [r7, #12]
 8020c92:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 8020c96:	4619      	mov	r1, r3
 8020c98:	68bb      	ldr	r3, [r7, #8]
 8020c9a:	fbb3 f3f1 	udiv	r3, r3, r1
 8020c9e:	1ad2      	subs	r2, r2, r3
 8020ca0:	68fb      	ldr	r3, [r7, #12]
 8020ca2:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

  /* case 12 : Ho = Do */
  hmsc->csw.dDataResidue -= len;
 8020ca6:	68fb      	ldr	r3, [r7, #12]
 8020ca8:	f8d3 2238 	ldr.w	r2, [r3, #568]	; 0x238
 8020cac:	68bb      	ldr	r3, [r7, #8]
 8020cae:	1ad2      	subs	r2, r2, r3
 8020cb0:	68fb      	ldr	r3, [r7, #12]
 8020cb2:	f8c3 2238 	str.w	r2, [r3, #568]	; 0x238

  if (hmsc->scsi_blk_len == 0U)
 8020cb6:	68fb      	ldr	r3, [r7, #12]
 8020cb8:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 8020cbc:	2b00      	cmp	r3, #0
 8020cbe:	d104      	bne.n	8020cca <SCSI_ProcessWrite+0xdc>
  {
    MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_PASSED);
 8020cc0:	2100      	movs	r1, #0
 8020cc2:	6878      	ldr	r0, [r7, #4]
 8020cc4:	f7fe fdd8 	bl	801f878 <MSC_BOT_SendCSW>
 8020cc8:	e015      	b.n	8020cf6 <SCSI_ProcessWrite+0x108>
  }
  else
  {
    len = MIN((hmsc->scsi_blk_len * hmsc->scsi_blk_size), MSC_MEDIA_PACKET);
 8020cca:	68fb      	ldr	r3, [r7, #12]
 8020ccc:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 8020cd0:	68fa      	ldr	r2, [r7, #12]
 8020cd2:	f8b2 2264 	ldrh.w	r2, [r2, #612]	; 0x264
 8020cd6:	fb02 f303 	mul.w	r3, r2, r3
 8020cda:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8020cde:	bf28      	it	cs
 8020ce0:	f44f 7300 	movcs.w	r3, #512	; 0x200
 8020ce4:	60bb      	str	r3, [r7, #8]

    /* Prepare EP to Receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, MSC_EPOUT_ADDR, hmsc->bot_data, len);
 8020ce6:	68fb      	ldr	r3, [r7, #12]
 8020ce8:	f103 0210 	add.w	r2, r3, #16
 8020cec:	68bb      	ldr	r3, [r7, #8]
 8020cee:	2101      	movs	r1, #1
 8020cf0:	6878      	ldr	r0, [r7, #4]
 8020cf2:	f001 fe40 	bl	8022976 <USBD_LL_PrepareReceive>
  }

  return 0;
 8020cf6:	2300      	movs	r3, #0
}
 8020cf8:	4618      	mov	r0, r3
 8020cfa:	3714      	adds	r7, #20
 8020cfc:	46bd      	mov	sp, r7
 8020cfe:	bd90      	pop	{r4, r7, pc}

08020d00 <SCSI_UpdateBotData>:
  * @param  length: Data length
  * @retval status
  */
static int8_t SCSI_UpdateBotData(USBD_MSC_BOT_HandleTypeDef *hmsc,
                                 uint8_t *pBuff, uint16_t length)
{
 8020d00:	b480      	push	{r7}
 8020d02:	b087      	sub	sp, #28
 8020d04:	af00      	add	r7, sp, #0
 8020d06:	60f8      	str	r0, [r7, #12]
 8020d08:	60b9      	str	r1, [r7, #8]
 8020d0a:	4613      	mov	r3, r2
 8020d0c:	80fb      	strh	r3, [r7, #6]
  uint16_t len = length;
 8020d0e:	88fb      	ldrh	r3, [r7, #6]
 8020d10:	82fb      	strh	r3, [r7, #22]

  if (hmsc == NULL)
 8020d12:	68fb      	ldr	r3, [r7, #12]
 8020d14:	2b00      	cmp	r3, #0
 8020d16:	d102      	bne.n	8020d1e <SCSI_UpdateBotData+0x1e>
  {
    return -1;
 8020d18:	f04f 33ff 	mov.w	r3, #4294967295
 8020d1c:	e013      	b.n	8020d46 <SCSI_UpdateBotData+0x46>
  }

  hmsc->bot_data_length = len;
 8020d1e:	8afa      	ldrh	r2, [r7, #22]
 8020d20:	68fb      	ldr	r3, [r7, #12]
 8020d22:	60da      	str	r2, [r3, #12]

  while (len != 0U)
 8020d24:	e00b      	b.n	8020d3e <SCSI_UpdateBotData+0x3e>
  {
    len--;
 8020d26:	8afb      	ldrh	r3, [r7, #22]
 8020d28:	3b01      	subs	r3, #1
 8020d2a:	82fb      	strh	r3, [r7, #22]
    hmsc->bot_data[len] = pBuff[len];
 8020d2c:	8afb      	ldrh	r3, [r7, #22]
 8020d2e:	68ba      	ldr	r2, [r7, #8]
 8020d30:	441a      	add	r2, r3
 8020d32:	8afb      	ldrh	r3, [r7, #22]
 8020d34:	7811      	ldrb	r1, [r2, #0]
 8020d36:	68fa      	ldr	r2, [r7, #12]
 8020d38:	4413      	add	r3, r2
 8020d3a:	460a      	mov	r2, r1
 8020d3c:	741a      	strb	r2, [r3, #16]
  while (len != 0U)
 8020d3e:	8afb      	ldrh	r3, [r7, #22]
 8020d40:	2b00      	cmp	r3, #0
 8020d42:	d1f0      	bne.n	8020d26 <SCSI_UpdateBotData+0x26>
  }

  return 0;
 8020d44:	2300      	movs	r3, #0
}
 8020d46:	4618      	mov	r0, r3
 8020d48:	371c      	adds	r7, #28
 8020d4a:	46bd      	mov	sp, r7
 8020d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020d50:	4770      	bx	lr

08020d52 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8020d52:	b580      	push	{r7, lr}
 8020d54:	b086      	sub	sp, #24
 8020d56:	af00      	add	r7, sp, #0
 8020d58:	60f8      	str	r0, [r7, #12]
 8020d5a:	60b9      	str	r1, [r7, #8]
 8020d5c:	4613      	mov	r3, r2
 8020d5e:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8020d60:	68fb      	ldr	r3, [r7, #12]
 8020d62:	2b00      	cmp	r3, #0
 8020d64:	d101      	bne.n	8020d6a <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8020d66:	2303      	movs	r3, #3
 8020d68:	e01f      	b.n	8020daa <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 8020d6a:	68fb      	ldr	r3, [r7, #12]
 8020d6c:	2200      	movs	r2, #0
 8020d6e:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 8020d72:	68fb      	ldr	r3, [r7, #12]
 8020d74:	2200      	movs	r2, #0
 8020d76:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 8020d7a:	68fb      	ldr	r3, [r7, #12]
 8020d7c:	2200      	movs	r2, #0
 8020d7e:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8020d82:	68bb      	ldr	r3, [r7, #8]
 8020d84:	2b00      	cmp	r3, #0
 8020d86:	d003      	beq.n	8020d90 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8020d88:	68fb      	ldr	r3, [r7, #12]
 8020d8a:	68ba      	ldr	r2, [r7, #8]
 8020d8c:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8020d90:	68fb      	ldr	r3, [r7, #12]
 8020d92:	2201      	movs	r2, #1
 8020d94:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8020d98:	68fb      	ldr	r3, [r7, #12]
 8020d9a:	79fa      	ldrb	r2, [r7, #7]
 8020d9c:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8020d9e:	68f8      	ldr	r0, [r7, #12]
 8020da0:	f001 fc74 	bl	802268c <USBD_LL_Init>
 8020da4:	4603      	mov	r3, r0
 8020da6:	75fb      	strb	r3, [r7, #23]

  return ret;
 8020da8:	7dfb      	ldrb	r3, [r7, #23]
}
 8020daa:	4618      	mov	r0, r3
 8020dac:	3718      	adds	r7, #24
 8020dae:	46bd      	mov	sp, r7
 8020db0:	bd80      	pop	{r7, pc}

08020db2 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8020db2:	b580      	push	{r7, lr}
 8020db4:	b084      	sub	sp, #16
 8020db6:	af00      	add	r7, sp, #0
 8020db8:	6078      	str	r0, [r7, #4]
 8020dba:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8020dbc:	2300      	movs	r3, #0
 8020dbe:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8020dc0:	683b      	ldr	r3, [r7, #0]
 8020dc2:	2b00      	cmp	r3, #0
 8020dc4:	d101      	bne.n	8020dca <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 8020dc6:	2303      	movs	r3, #3
 8020dc8:	e016      	b.n	8020df8 <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 8020dca:	687b      	ldr	r3, [r7, #4]
 8020dcc:	683a      	ldr	r2, [r7, #0]
 8020dce:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 8020dd2:	687b      	ldr	r3, [r7, #4]
 8020dd4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8020dd8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8020dda:	2b00      	cmp	r3, #0
 8020ddc:	d00b      	beq.n	8020df6 <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 8020dde:	687b      	ldr	r3, [r7, #4]
 8020de0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8020de4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8020de6:	f107 020e 	add.w	r2, r7, #14
 8020dea:	4610      	mov	r0, r2
 8020dec:	4798      	blx	r3
 8020dee:	4602      	mov	r2, r0
 8020df0:	687b      	ldr	r3, [r7, #4]
 8020df2:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 8020df6:	2300      	movs	r3, #0
}
 8020df8:	4618      	mov	r0, r3
 8020dfa:	3710      	adds	r7, #16
 8020dfc:	46bd      	mov	sp, r7
 8020dfe:	bd80      	pop	{r7, pc}

08020e00 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8020e00:	b580      	push	{r7, lr}
 8020e02:	b082      	sub	sp, #8
 8020e04:	af00      	add	r7, sp, #0
 8020e06:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8020e08:	6878      	ldr	r0, [r7, #4]
 8020e0a:	f001 fc8b 	bl	8022724 <USBD_LL_Start>
 8020e0e:	4603      	mov	r3, r0
}
 8020e10:	4618      	mov	r0, r3
 8020e12:	3708      	adds	r7, #8
 8020e14:	46bd      	mov	sp, r7
 8020e16:	bd80      	pop	{r7, pc}

08020e18 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8020e18:	b480      	push	{r7}
 8020e1a:	b083      	sub	sp, #12
 8020e1c:	af00      	add	r7, sp, #0
 8020e1e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8020e20:	2300      	movs	r3, #0
}
 8020e22:	4618      	mov	r0, r3
 8020e24:	370c      	adds	r7, #12
 8020e26:	46bd      	mov	sp, r7
 8020e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020e2c:	4770      	bx	lr

08020e2e <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8020e2e:	b580      	push	{r7, lr}
 8020e30:	b084      	sub	sp, #16
 8020e32:	af00      	add	r7, sp, #0
 8020e34:	6078      	str	r0, [r7, #4]
 8020e36:	460b      	mov	r3, r1
 8020e38:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8020e3a:	2303      	movs	r3, #3
 8020e3c:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8020e3e:	687b      	ldr	r3, [r7, #4]
 8020e40:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8020e44:	2b00      	cmp	r3, #0
 8020e46:	d009      	beq.n	8020e5c <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 8020e48:	687b      	ldr	r3, [r7, #4]
 8020e4a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8020e4e:	681b      	ldr	r3, [r3, #0]
 8020e50:	78fa      	ldrb	r2, [r7, #3]
 8020e52:	4611      	mov	r1, r2
 8020e54:	6878      	ldr	r0, [r7, #4]
 8020e56:	4798      	blx	r3
 8020e58:	4603      	mov	r3, r0
 8020e5a:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8020e5c:	7bfb      	ldrb	r3, [r7, #15]
}
 8020e5e:	4618      	mov	r0, r3
 8020e60:	3710      	adds	r7, #16
 8020e62:	46bd      	mov	sp, r7
 8020e64:	bd80      	pop	{r7, pc}

08020e66 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8020e66:	b580      	push	{r7, lr}
 8020e68:	b082      	sub	sp, #8
 8020e6a:	af00      	add	r7, sp, #0
 8020e6c:	6078      	str	r0, [r7, #4]
 8020e6e:	460b      	mov	r3, r1
 8020e70:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 8020e72:	687b      	ldr	r3, [r7, #4]
 8020e74:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8020e78:	2b00      	cmp	r3, #0
 8020e7a:	d007      	beq.n	8020e8c <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 8020e7c:	687b      	ldr	r3, [r7, #4]
 8020e7e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8020e82:	685b      	ldr	r3, [r3, #4]
 8020e84:	78fa      	ldrb	r2, [r7, #3]
 8020e86:	4611      	mov	r1, r2
 8020e88:	6878      	ldr	r0, [r7, #4]
 8020e8a:	4798      	blx	r3
  }

  return USBD_OK;
 8020e8c:	2300      	movs	r3, #0
}
 8020e8e:	4618      	mov	r0, r3
 8020e90:	3708      	adds	r7, #8
 8020e92:	46bd      	mov	sp, r7
 8020e94:	bd80      	pop	{r7, pc}

08020e96 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8020e96:	b580      	push	{r7, lr}
 8020e98:	b084      	sub	sp, #16
 8020e9a:	af00      	add	r7, sp, #0
 8020e9c:	6078      	str	r0, [r7, #4]
 8020e9e:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8020ea0:	687b      	ldr	r3, [r7, #4]
 8020ea2:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8020ea6:	6839      	ldr	r1, [r7, #0]
 8020ea8:	4618      	mov	r0, r3
 8020eaa:	f000 ffb9 	bl	8021e20 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8020eae:	687b      	ldr	r3, [r7, #4]
 8020eb0:	2201      	movs	r2, #1
 8020eb2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8020eb6:	687b      	ldr	r3, [r7, #4]
 8020eb8:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8020ebc:	461a      	mov	r2, r3
 8020ebe:	687b      	ldr	r3, [r7, #4]
 8020ec0:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8020ec4:	687b      	ldr	r3, [r7, #4]
 8020ec6:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8020eca:	f003 031f 	and.w	r3, r3, #31
 8020ece:	2b02      	cmp	r3, #2
 8020ed0:	d01a      	beq.n	8020f08 <USBD_LL_SetupStage+0x72>
 8020ed2:	2b02      	cmp	r3, #2
 8020ed4:	d822      	bhi.n	8020f1c <USBD_LL_SetupStage+0x86>
 8020ed6:	2b00      	cmp	r3, #0
 8020ed8:	d002      	beq.n	8020ee0 <USBD_LL_SetupStage+0x4a>
 8020eda:	2b01      	cmp	r3, #1
 8020edc:	d00a      	beq.n	8020ef4 <USBD_LL_SetupStage+0x5e>
 8020ede:	e01d      	b.n	8020f1c <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8020ee0:	687b      	ldr	r3, [r7, #4]
 8020ee2:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8020ee6:	4619      	mov	r1, r3
 8020ee8:	6878      	ldr	r0, [r7, #4]
 8020eea:	f000 fa61 	bl	80213b0 <USBD_StdDevReq>
 8020eee:	4603      	mov	r3, r0
 8020ef0:	73fb      	strb	r3, [r7, #15]
      break;
 8020ef2:	e020      	b.n	8020f36 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8020ef4:	687b      	ldr	r3, [r7, #4]
 8020ef6:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8020efa:	4619      	mov	r1, r3
 8020efc:	6878      	ldr	r0, [r7, #4]
 8020efe:	f000 fac5 	bl	802148c <USBD_StdItfReq>
 8020f02:	4603      	mov	r3, r0
 8020f04:	73fb      	strb	r3, [r7, #15]
      break;
 8020f06:	e016      	b.n	8020f36 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8020f08:	687b      	ldr	r3, [r7, #4]
 8020f0a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8020f0e:	4619      	mov	r1, r3
 8020f10:	6878      	ldr	r0, [r7, #4]
 8020f12:	f000 fb04 	bl	802151e <USBD_StdEPReq>
 8020f16:	4603      	mov	r3, r0
 8020f18:	73fb      	strb	r3, [r7, #15]
      break;
 8020f1a:	e00c      	b.n	8020f36 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8020f1c:	687b      	ldr	r3, [r7, #4]
 8020f1e:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8020f22:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8020f26:	b2db      	uxtb	r3, r3
 8020f28:	4619      	mov	r1, r3
 8020f2a:	6878      	ldr	r0, [r7, #4]
 8020f2c:	f001 fc79 	bl	8022822 <USBD_LL_StallEP>
 8020f30:	4603      	mov	r3, r0
 8020f32:	73fb      	strb	r3, [r7, #15]
      break;
 8020f34:	bf00      	nop
  }

  return ret;
 8020f36:	7bfb      	ldrb	r3, [r7, #15]
}
 8020f38:	4618      	mov	r0, r3
 8020f3a:	3710      	adds	r7, #16
 8020f3c:	46bd      	mov	sp, r7
 8020f3e:	bd80      	pop	{r7, pc}

08020f40 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8020f40:	b580      	push	{r7, lr}
 8020f42:	b086      	sub	sp, #24
 8020f44:	af00      	add	r7, sp, #0
 8020f46:	60f8      	str	r0, [r7, #12]
 8020f48:	460b      	mov	r3, r1
 8020f4a:	607a      	str	r2, [r7, #4]
 8020f4c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8020f4e:	7afb      	ldrb	r3, [r7, #11]
 8020f50:	2b00      	cmp	r3, #0
 8020f52:	d138      	bne.n	8020fc6 <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 8020f54:	68fb      	ldr	r3, [r7, #12]
 8020f56:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8020f5a:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8020f5c:	68fb      	ldr	r3, [r7, #12]
 8020f5e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8020f62:	2b03      	cmp	r3, #3
 8020f64:	d14a      	bne.n	8020ffc <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 8020f66:	693b      	ldr	r3, [r7, #16]
 8020f68:	689a      	ldr	r2, [r3, #8]
 8020f6a:	693b      	ldr	r3, [r7, #16]
 8020f6c:	68db      	ldr	r3, [r3, #12]
 8020f6e:	429a      	cmp	r2, r3
 8020f70:	d913      	bls.n	8020f9a <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8020f72:	693b      	ldr	r3, [r7, #16]
 8020f74:	689a      	ldr	r2, [r3, #8]
 8020f76:	693b      	ldr	r3, [r7, #16]
 8020f78:	68db      	ldr	r3, [r3, #12]
 8020f7a:	1ad2      	subs	r2, r2, r3
 8020f7c:	693b      	ldr	r3, [r7, #16]
 8020f7e:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8020f80:	693b      	ldr	r3, [r7, #16]
 8020f82:	68da      	ldr	r2, [r3, #12]
 8020f84:	693b      	ldr	r3, [r7, #16]
 8020f86:	689b      	ldr	r3, [r3, #8]
 8020f88:	4293      	cmp	r3, r2
 8020f8a:	bf28      	it	cs
 8020f8c:	4613      	movcs	r3, r2
 8020f8e:	461a      	mov	r2, r3
 8020f90:	6879      	ldr	r1, [r7, #4]
 8020f92:	68f8      	ldr	r0, [r7, #12]
 8020f94:	f001 f81b 	bl	8021fce <USBD_CtlContinueRx>
 8020f98:	e030      	b.n	8020ffc <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8020f9a:	68fb      	ldr	r3, [r7, #12]
 8020f9c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8020fa0:	b2db      	uxtb	r3, r3
 8020fa2:	2b03      	cmp	r3, #3
 8020fa4:	d10b      	bne.n	8020fbe <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 8020fa6:	68fb      	ldr	r3, [r7, #12]
 8020fa8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8020fac:	691b      	ldr	r3, [r3, #16]
 8020fae:	2b00      	cmp	r3, #0
 8020fb0:	d005      	beq.n	8020fbe <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 8020fb2:	68fb      	ldr	r3, [r7, #12]
 8020fb4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8020fb8:	691b      	ldr	r3, [r3, #16]
 8020fba:	68f8      	ldr	r0, [r7, #12]
 8020fbc:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8020fbe:	68f8      	ldr	r0, [r7, #12]
 8020fc0:	f001 f816 	bl	8021ff0 <USBD_CtlSendStatus>
 8020fc4:	e01a      	b.n	8020ffc <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8020fc6:	68fb      	ldr	r3, [r7, #12]
 8020fc8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8020fcc:	b2db      	uxtb	r3, r3
 8020fce:	2b03      	cmp	r3, #3
 8020fd0:	d114      	bne.n	8020ffc <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 8020fd2:	68fb      	ldr	r3, [r7, #12]
 8020fd4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8020fd8:	699b      	ldr	r3, [r3, #24]
 8020fda:	2b00      	cmp	r3, #0
 8020fdc:	d00e      	beq.n	8020ffc <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 8020fde:	68fb      	ldr	r3, [r7, #12]
 8020fe0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8020fe4:	699b      	ldr	r3, [r3, #24]
 8020fe6:	7afa      	ldrb	r2, [r7, #11]
 8020fe8:	4611      	mov	r1, r2
 8020fea:	68f8      	ldr	r0, [r7, #12]
 8020fec:	4798      	blx	r3
 8020fee:	4603      	mov	r3, r0
 8020ff0:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8020ff2:	7dfb      	ldrb	r3, [r7, #23]
 8020ff4:	2b00      	cmp	r3, #0
 8020ff6:	d001      	beq.n	8020ffc <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 8020ff8:	7dfb      	ldrb	r3, [r7, #23]
 8020ffa:	e000      	b.n	8020ffe <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 8020ffc:	2300      	movs	r3, #0
}
 8020ffe:	4618      	mov	r0, r3
 8021000:	3718      	adds	r7, #24
 8021002:	46bd      	mov	sp, r7
 8021004:	bd80      	pop	{r7, pc}

08021006 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8021006:	b580      	push	{r7, lr}
 8021008:	b086      	sub	sp, #24
 802100a:	af00      	add	r7, sp, #0
 802100c:	60f8      	str	r0, [r7, #12]
 802100e:	460b      	mov	r3, r1
 8021010:	607a      	str	r2, [r7, #4]
 8021012:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8021014:	7afb      	ldrb	r3, [r7, #11]
 8021016:	2b00      	cmp	r3, #0
 8021018:	d16b      	bne.n	80210f2 <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 802101a:	68fb      	ldr	r3, [r7, #12]
 802101c:	3314      	adds	r3, #20
 802101e:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8021020:	68fb      	ldr	r3, [r7, #12]
 8021022:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8021026:	2b02      	cmp	r3, #2
 8021028:	d156      	bne.n	80210d8 <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 802102a:	693b      	ldr	r3, [r7, #16]
 802102c:	689a      	ldr	r2, [r3, #8]
 802102e:	693b      	ldr	r3, [r7, #16]
 8021030:	68db      	ldr	r3, [r3, #12]
 8021032:	429a      	cmp	r2, r3
 8021034:	d914      	bls.n	8021060 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8021036:	693b      	ldr	r3, [r7, #16]
 8021038:	689a      	ldr	r2, [r3, #8]
 802103a:	693b      	ldr	r3, [r7, #16]
 802103c:	68db      	ldr	r3, [r3, #12]
 802103e:	1ad2      	subs	r2, r2, r3
 8021040:	693b      	ldr	r3, [r7, #16]
 8021042:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8021044:	693b      	ldr	r3, [r7, #16]
 8021046:	689b      	ldr	r3, [r3, #8]
 8021048:	461a      	mov	r2, r3
 802104a:	6879      	ldr	r1, [r7, #4]
 802104c:	68f8      	ldr	r0, [r7, #12]
 802104e:	f000 ffad 	bl	8021fac <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8021052:	2300      	movs	r3, #0
 8021054:	2200      	movs	r2, #0
 8021056:	2100      	movs	r1, #0
 8021058:	68f8      	ldr	r0, [r7, #12]
 802105a:	f001 fc8c 	bl	8022976 <USBD_LL_PrepareReceive>
 802105e:	e03b      	b.n	80210d8 <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8021060:	693b      	ldr	r3, [r7, #16]
 8021062:	68da      	ldr	r2, [r3, #12]
 8021064:	693b      	ldr	r3, [r7, #16]
 8021066:	689b      	ldr	r3, [r3, #8]
 8021068:	429a      	cmp	r2, r3
 802106a:	d11c      	bne.n	80210a6 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 802106c:	693b      	ldr	r3, [r7, #16]
 802106e:	685a      	ldr	r2, [r3, #4]
 8021070:	693b      	ldr	r3, [r7, #16]
 8021072:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8021074:	429a      	cmp	r2, r3
 8021076:	d316      	bcc.n	80210a6 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8021078:	693b      	ldr	r3, [r7, #16]
 802107a:	685a      	ldr	r2, [r3, #4]
 802107c:	68fb      	ldr	r3, [r7, #12]
 802107e:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8021082:	429a      	cmp	r2, r3
 8021084:	d20f      	bcs.n	80210a6 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8021086:	2200      	movs	r2, #0
 8021088:	2100      	movs	r1, #0
 802108a:	68f8      	ldr	r0, [r7, #12]
 802108c:	f000 ff8e 	bl	8021fac <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8021090:	68fb      	ldr	r3, [r7, #12]
 8021092:	2200      	movs	r2, #0
 8021094:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8021098:	2300      	movs	r3, #0
 802109a:	2200      	movs	r2, #0
 802109c:	2100      	movs	r1, #0
 802109e:	68f8      	ldr	r0, [r7, #12]
 80210a0:	f001 fc69 	bl	8022976 <USBD_LL_PrepareReceive>
 80210a4:	e018      	b.n	80210d8 <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80210a6:	68fb      	ldr	r3, [r7, #12]
 80210a8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80210ac:	b2db      	uxtb	r3, r3
 80210ae:	2b03      	cmp	r3, #3
 80210b0:	d10b      	bne.n	80210ca <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 80210b2:	68fb      	ldr	r3, [r7, #12]
 80210b4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80210b8:	68db      	ldr	r3, [r3, #12]
 80210ba:	2b00      	cmp	r3, #0
 80210bc:	d005      	beq.n	80210ca <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 80210be:	68fb      	ldr	r3, [r7, #12]
 80210c0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80210c4:	68db      	ldr	r3, [r3, #12]
 80210c6:	68f8      	ldr	r0, [r7, #12]
 80210c8:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80210ca:	2180      	movs	r1, #128	; 0x80
 80210cc:	68f8      	ldr	r0, [r7, #12]
 80210ce:	f001 fba8 	bl	8022822 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 80210d2:	68f8      	ldr	r0, [r7, #12]
 80210d4:	f000 ff9f 	bl	8022016 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 80210d8:	68fb      	ldr	r3, [r7, #12]
 80210da:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 80210de:	2b01      	cmp	r3, #1
 80210e0:	d122      	bne.n	8021128 <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 80210e2:	68f8      	ldr	r0, [r7, #12]
 80210e4:	f7ff fe98 	bl	8020e18 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80210e8:	68fb      	ldr	r3, [r7, #12]
 80210ea:	2200      	movs	r2, #0
 80210ec:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 80210f0:	e01a      	b.n	8021128 <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80210f2:	68fb      	ldr	r3, [r7, #12]
 80210f4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80210f8:	b2db      	uxtb	r3, r3
 80210fa:	2b03      	cmp	r3, #3
 80210fc:	d114      	bne.n	8021128 <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 80210fe:	68fb      	ldr	r3, [r7, #12]
 8021100:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8021104:	695b      	ldr	r3, [r3, #20]
 8021106:	2b00      	cmp	r3, #0
 8021108:	d00e      	beq.n	8021128 <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 802110a:	68fb      	ldr	r3, [r7, #12]
 802110c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8021110:	695b      	ldr	r3, [r3, #20]
 8021112:	7afa      	ldrb	r2, [r7, #11]
 8021114:	4611      	mov	r1, r2
 8021116:	68f8      	ldr	r0, [r7, #12]
 8021118:	4798      	blx	r3
 802111a:	4603      	mov	r3, r0
 802111c:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 802111e:	7dfb      	ldrb	r3, [r7, #23]
 8021120:	2b00      	cmp	r3, #0
 8021122:	d001      	beq.n	8021128 <USBD_LL_DataInStage+0x122>
        {
          return ret;
 8021124:	7dfb      	ldrb	r3, [r7, #23]
 8021126:	e000      	b.n	802112a <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 8021128:	2300      	movs	r3, #0
}
 802112a:	4618      	mov	r0, r3
 802112c:	3718      	adds	r7, #24
 802112e:	46bd      	mov	sp, r7
 8021130:	bd80      	pop	{r7, pc}

08021132 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8021132:	b580      	push	{r7, lr}
 8021134:	b082      	sub	sp, #8
 8021136:	af00      	add	r7, sp, #0
 8021138:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 802113a:	687b      	ldr	r3, [r7, #4]
 802113c:	2201      	movs	r2, #1
 802113e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8021142:	687b      	ldr	r3, [r7, #4]
 8021144:	2200      	movs	r2, #0
 8021146:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 802114a:	687b      	ldr	r3, [r7, #4]
 802114c:	2200      	movs	r2, #0
 802114e:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8021150:	687b      	ldr	r3, [r7, #4]
 8021152:	2200      	movs	r2, #0
 8021154:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 8021158:	687b      	ldr	r3, [r7, #4]
 802115a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 802115e:	2b00      	cmp	r3, #0
 8021160:	d101      	bne.n	8021166 <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 8021162:	2303      	movs	r3, #3
 8021164:	e02f      	b.n	80211c6 <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 8021166:	687b      	ldr	r3, [r7, #4]
 8021168:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 802116c:	2b00      	cmp	r3, #0
 802116e:	d00f      	beq.n	8021190 <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 8021170:	687b      	ldr	r3, [r7, #4]
 8021172:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8021176:	685b      	ldr	r3, [r3, #4]
 8021178:	2b00      	cmp	r3, #0
 802117a:	d009      	beq.n	8021190 <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 802117c:	687b      	ldr	r3, [r7, #4]
 802117e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8021182:	685b      	ldr	r3, [r3, #4]
 8021184:	687a      	ldr	r2, [r7, #4]
 8021186:	6852      	ldr	r2, [r2, #4]
 8021188:	b2d2      	uxtb	r2, r2
 802118a:	4611      	mov	r1, r2
 802118c:	6878      	ldr	r0, [r7, #4]
 802118e:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8021190:	2340      	movs	r3, #64	; 0x40
 8021192:	2200      	movs	r2, #0
 8021194:	2100      	movs	r1, #0
 8021196:	6878      	ldr	r0, [r7, #4]
 8021198:	f001 fadf 	bl	802275a <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 802119c:	687b      	ldr	r3, [r7, #4]
 802119e:	2201      	movs	r2, #1
 80211a0:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80211a4:	687b      	ldr	r3, [r7, #4]
 80211a6:	2240      	movs	r2, #64	; 0x40
 80211a8:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80211ac:	2340      	movs	r3, #64	; 0x40
 80211ae:	2200      	movs	r2, #0
 80211b0:	2180      	movs	r1, #128	; 0x80
 80211b2:	6878      	ldr	r0, [r7, #4]
 80211b4:	f001 fad1 	bl	802275a <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80211b8:	687b      	ldr	r3, [r7, #4]
 80211ba:	2201      	movs	r2, #1
 80211bc:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80211be:	687b      	ldr	r3, [r7, #4]
 80211c0:	2240      	movs	r2, #64	; 0x40
 80211c2:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 80211c4:	2300      	movs	r3, #0
}
 80211c6:	4618      	mov	r0, r3
 80211c8:	3708      	adds	r7, #8
 80211ca:	46bd      	mov	sp, r7
 80211cc:	bd80      	pop	{r7, pc}

080211ce <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80211ce:	b480      	push	{r7}
 80211d0:	b083      	sub	sp, #12
 80211d2:	af00      	add	r7, sp, #0
 80211d4:	6078      	str	r0, [r7, #4]
 80211d6:	460b      	mov	r3, r1
 80211d8:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80211da:	687b      	ldr	r3, [r7, #4]
 80211dc:	78fa      	ldrb	r2, [r7, #3]
 80211de:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80211e0:	2300      	movs	r3, #0
}
 80211e2:	4618      	mov	r0, r3
 80211e4:	370c      	adds	r7, #12
 80211e6:	46bd      	mov	sp, r7
 80211e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80211ec:	4770      	bx	lr

080211ee <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80211ee:	b480      	push	{r7}
 80211f0:	b083      	sub	sp, #12
 80211f2:	af00      	add	r7, sp, #0
 80211f4:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 80211f6:	687b      	ldr	r3, [r7, #4]
 80211f8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80211fc:	b2da      	uxtb	r2, r3
 80211fe:	687b      	ldr	r3, [r7, #4]
 8021200:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8021204:	687b      	ldr	r3, [r7, #4]
 8021206:	2204      	movs	r2, #4
 8021208:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 802120c:	2300      	movs	r3, #0
}
 802120e:	4618      	mov	r0, r3
 8021210:	370c      	adds	r7, #12
 8021212:	46bd      	mov	sp, r7
 8021214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021218:	4770      	bx	lr

0802121a <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 802121a:	b480      	push	{r7}
 802121c:	b083      	sub	sp, #12
 802121e:	af00      	add	r7, sp, #0
 8021220:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8021222:	687b      	ldr	r3, [r7, #4]
 8021224:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8021228:	b2db      	uxtb	r3, r3
 802122a:	2b04      	cmp	r3, #4
 802122c:	d106      	bne.n	802123c <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 802122e:	687b      	ldr	r3, [r7, #4]
 8021230:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8021234:	b2da      	uxtb	r2, r3
 8021236:	687b      	ldr	r3, [r7, #4]
 8021238:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 802123c:	2300      	movs	r3, #0
}
 802123e:	4618      	mov	r0, r3
 8021240:	370c      	adds	r7, #12
 8021242:	46bd      	mov	sp, r7
 8021244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021248:	4770      	bx	lr

0802124a <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 802124a:	b580      	push	{r7, lr}
 802124c:	b082      	sub	sp, #8
 802124e:	af00      	add	r7, sp, #0
 8021250:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 8021252:	687b      	ldr	r3, [r7, #4]
 8021254:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8021258:	2b00      	cmp	r3, #0
 802125a:	d101      	bne.n	8021260 <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 802125c:	2303      	movs	r3, #3
 802125e:	e012      	b.n	8021286 <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8021260:	687b      	ldr	r3, [r7, #4]
 8021262:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8021266:	b2db      	uxtb	r3, r3
 8021268:	2b03      	cmp	r3, #3
 802126a:	d10b      	bne.n	8021284 <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 802126c:	687b      	ldr	r3, [r7, #4]
 802126e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8021272:	69db      	ldr	r3, [r3, #28]
 8021274:	2b00      	cmp	r3, #0
 8021276:	d005      	beq.n	8021284 <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 8021278:	687b      	ldr	r3, [r7, #4]
 802127a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 802127e:	69db      	ldr	r3, [r3, #28]
 8021280:	6878      	ldr	r0, [r7, #4]
 8021282:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8021284:	2300      	movs	r3, #0
}
 8021286:	4618      	mov	r0, r3
 8021288:	3708      	adds	r7, #8
 802128a:	46bd      	mov	sp, r7
 802128c:	bd80      	pop	{r7, pc}

0802128e <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 802128e:	b580      	push	{r7, lr}
 8021290:	b082      	sub	sp, #8
 8021292:	af00      	add	r7, sp, #0
 8021294:	6078      	str	r0, [r7, #4]
 8021296:	460b      	mov	r3, r1
 8021298:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 802129a:	687b      	ldr	r3, [r7, #4]
 802129c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80212a0:	2b00      	cmp	r3, #0
 80212a2:	d101      	bne.n	80212a8 <USBD_LL_IsoINIncomplete+0x1a>
  {
    return USBD_FAIL;
 80212a4:	2303      	movs	r3, #3
 80212a6:	e014      	b.n	80212d2 <USBD_LL_IsoINIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80212a8:	687b      	ldr	r3, [r7, #4]
 80212aa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80212ae:	b2db      	uxtb	r3, r3
 80212b0:	2b03      	cmp	r3, #3
 80212b2:	d10d      	bne.n	80212d0 <USBD_LL_IsoINIncomplete+0x42>
  {
    if (pdev->pClass->IsoINIncomplete != NULL)
 80212b4:	687b      	ldr	r3, [r7, #4]
 80212b6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80212ba:	6a1b      	ldr	r3, [r3, #32]
 80212bc:	2b00      	cmp	r3, #0
 80212be:	d007      	beq.n	80212d0 <USBD_LL_IsoINIncomplete+0x42>
    {
      (void)pdev->pClass->IsoINIncomplete(pdev, epnum);
 80212c0:	687b      	ldr	r3, [r7, #4]
 80212c2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80212c6:	6a1b      	ldr	r3, [r3, #32]
 80212c8:	78fa      	ldrb	r2, [r7, #3]
 80212ca:	4611      	mov	r1, r2
 80212cc:	6878      	ldr	r0, [r7, #4]
 80212ce:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80212d0:	2300      	movs	r3, #0
}
 80212d2:	4618      	mov	r0, r3
 80212d4:	3708      	adds	r7, #8
 80212d6:	46bd      	mov	sp, r7
 80212d8:	bd80      	pop	{r7, pc}

080212da <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 80212da:	b580      	push	{r7, lr}
 80212dc:	b082      	sub	sp, #8
 80212de:	af00      	add	r7, sp, #0
 80212e0:	6078      	str	r0, [r7, #4]
 80212e2:	460b      	mov	r3, r1
 80212e4:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 80212e6:	687b      	ldr	r3, [r7, #4]
 80212e8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80212ec:	2b00      	cmp	r3, #0
 80212ee:	d101      	bne.n	80212f4 <USBD_LL_IsoOUTIncomplete+0x1a>
  {
    return USBD_FAIL;
 80212f0:	2303      	movs	r3, #3
 80212f2:	e014      	b.n	802131e <USBD_LL_IsoOUTIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80212f4:	687b      	ldr	r3, [r7, #4]
 80212f6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80212fa:	b2db      	uxtb	r3, r3
 80212fc:	2b03      	cmp	r3, #3
 80212fe:	d10d      	bne.n	802131c <USBD_LL_IsoOUTIncomplete+0x42>
  {
    if (pdev->pClass->IsoOUTIncomplete != NULL)
 8021300:	687b      	ldr	r3, [r7, #4]
 8021302:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8021306:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8021308:	2b00      	cmp	r3, #0
 802130a:	d007      	beq.n	802131c <USBD_LL_IsoOUTIncomplete+0x42>
    {
      (void)pdev->pClass->IsoOUTIncomplete(pdev, epnum);
 802130c:	687b      	ldr	r3, [r7, #4]
 802130e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8021312:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8021314:	78fa      	ldrb	r2, [r7, #3]
 8021316:	4611      	mov	r1, r2
 8021318:	6878      	ldr	r0, [r7, #4]
 802131a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 802131c:	2300      	movs	r3, #0
}
 802131e:	4618      	mov	r0, r3
 8021320:	3708      	adds	r7, #8
 8021322:	46bd      	mov	sp, r7
 8021324:	bd80      	pop	{r7, pc}

08021326 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8021326:	b480      	push	{r7}
 8021328:	b083      	sub	sp, #12
 802132a:	af00      	add	r7, sp, #0
 802132c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 802132e:	2300      	movs	r3, #0
}
 8021330:	4618      	mov	r0, r3
 8021332:	370c      	adds	r7, #12
 8021334:	46bd      	mov	sp, r7
 8021336:	f85d 7b04 	ldr.w	r7, [sp], #4
 802133a:	4770      	bx	lr

0802133c <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 802133c:	b580      	push	{r7, lr}
 802133e:	b082      	sub	sp, #8
 8021340:	af00      	add	r7, sp, #0
 8021342:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8021344:	687b      	ldr	r3, [r7, #4]
 8021346:	2201      	movs	r2, #1
 8021348:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 802134c:	687b      	ldr	r3, [r7, #4]
 802134e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8021352:	2b00      	cmp	r3, #0
 8021354:	d009      	beq.n	802136a <USBD_LL_DevDisconnected+0x2e>
  {
    (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8021356:	687b      	ldr	r3, [r7, #4]
 8021358:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 802135c:	685b      	ldr	r3, [r3, #4]
 802135e:	687a      	ldr	r2, [r7, #4]
 8021360:	6852      	ldr	r2, [r2, #4]
 8021362:	b2d2      	uxtb	r2, r2
 8021364:	4611      	mov	r1, r2
 8021366:	6878      	ldr	r0, [r7, #4]
 8021368:	4798      	blx	r3
  }

  return USBD_OK;
 802136a:	2300      	movs	r3, #0
}
 802136c:	4618      	mov	r0, r3
 802136e:	3708      	adds	r7, #8
 8021370:	46bd      	mov	sp, r7
 8021372:	bd80      	pop	{r7, pc}

08021374 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8021374:	b480      	push	{r7}
 8021376:	b087      	sub	sp, #28
 8021378:	af00      	add	r7, sp, #0
 802137a:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 802137c:	687b      	ldr	r3, [r7, #4]
 802137e:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8021380:	697b      	ldr	r3, [r7, #20]
 8021382:	781b      	ldrb	r3, [r3, #0]
 8021384:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8021386:	697b      	ldr	r3, [r7, #20]
 8021388:	3301      	adds	r3, #1
 802138a:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 802138c:	697b      	ldr	r3, [r7, #20]
 802138e:	781b      	ldrb	r3, [r3, #0]
 8021390:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8021392:	8a3b      	ldrh	r3, [r7, #16]
 8021394:	021b      	lsls	r3, r3, #8
 8021396:	b21a      	sxth	r2, r3
 8021398:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 802139c:	4313      	orrs	r3, r2
 802139e:	b21b      	sxth	r3, r3
 80213a0:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 80213a2:	89fb      	ldrh	r3, [r7, #14]
}
 80213a4:	4618      	mov	r0, r3
 80213a6:	371c      	adds	r7, #28
 80213a8:	46bd      	mov	sp, r7
 80213aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80213ae:	4770      	bx	lr

080213b0 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80213b0:	b580      	push	{r7, lr}
 80213b2:	b084      	sub	sp, #16
 80213b4:	af00      	add	r7, sp, #0
 80213b6:	6078      	str	r0, [r7, #4]
 80213b8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80213ba:	2300      	movs	r3, #0
 80213bc:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80213be:	683b      	ldr	r3, [r7, #0]
 80213c0:	781b      	ldrb	r3, [r3, #0]
 80213c2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80213c6:	2b40      	cmp	r3, #64	; 0x40
 80213c8:	d005      	beq.n	80213d6 <USBD_StdDevReq+0x26>
 80213ca:	2b40      	cmp	r3, #64	; 0x40
 80213cc:	d853      	bhi.n	8021476 <USBD_StdDevReq+0xc6>
 80213ce:	2b00      	cmp	r3, #0
 80213d0:	d00b      	beq.n	80213ea <USBD_StdDevReq+0x3a>
 80213d2:	2b20      	cmp	r3, #32
 80213d4:	d14f      	bne.n	8021476 <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80213d6:	687b      	ldr	r3, [r7, #4]
 80213d8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80213dc:	689b      	ldr	r3, [r3, #8]
 80213de:	6839      	ldr	r1, [r7, #0]
 80213e0:	6878      	ldr	r0, [r7, #4]
 80213e2:	4798      	blx	r3
 80213e4:	4603      	mov	r3, r0
 80213e6:	73fb      	strb	r3, [r7, #15]
      break;
 80213e8:	e04a      	b.n	8021480 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80213ea:	683b      	ldr	r3, [r7, #0]
 80213ec:	785b      	ldrb	r3, [r3, #1]
 80213ee:	2b09      	cmp	r3, #9
 80213f0:	d83b      	bhi.n	802146a <USBD_StdDevReq+0xba>
 80213f2:	a201      	add	r2, pc, #4	; (adr r2, 80213f8 <USBD_StdDevReq+0x48>)
 80213f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80213f8:	0802144d 	.word	0x0802144d
 80213fc:	08021461 	.word	0x08021461
 8021400:	0802146b 	.word	0x0802146b
 8021404:	08021457 	.word	0x08021457
 8021408:	0802146b 	.word	0x0802146b
 802140c:	0802142b 	.word	0x0802142b
 8021410:	08021421 	.word	0x08021421
 8021414:	0802146b 	.word	0x0802146b
 8021418:	08021443 	.word	0x08021443
 802141c:	08021435 	.word	0x08021435
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8021420:	6839      	ldr	r1, [r7, #0]
 8021422:	6878      	ldr	r0, [r7, #4]
 8021424:	f000 f9de 	bl	80217e4 <USBD_GetDescriptor>
          break;
 8021428:	e024      	b.n	8021474 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 802142a:	6839      	ldr	r1, [r7, #0]
 802142c:	6878      	ldr	r0, [r7, #4]
 802142e:	f000 fb6d 	bl	8021b0c <USBD_SetAddress>
          break;
 8021432:	e01f      	b.n	8021474 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8021434:	6839      	ldr	r1, [r7, #0]
 8021436:	6878      	ldr	r0, [r7, #4]
 8021438:	f000 fbac 	bl	8021b94 <USBD_SetConfig>
 802143c:	4603      	mov	r3, r0
 802143e:	73fb      	strb	r3, [r7, #15]
          break;
 8021440:	e018      	b.n	8021474 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8021442:	6839      	ldr	r1, [r7, #0]
 8021444:	6878      	ldr	r0, [r7, #4]
 8021446:	f000 fc4b 	bl	8021ce0 <USBD_GetConfig>
          break;
 802144a:	e013      	b.n	8021474 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 802144c:	6839      	ldr	r1, [r7, #0]
 802144e:	6878      	ldr	r0, [r7, #4]
 8021450:	f000 fc7c 	bl	8021d4c <USBD_GetStatus>
          break;
 8021454:	e00e      	b.n	8021474 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8021456:	6839      	ldr	r1, [r7, #0]
 8021458:	6878      	ldr	r0, [r7, #4]
 802145a:	f000 fcab 	bl	8021db4 <USBD_SetFeature>
          break;
 802145e:	e009      	b.n	8021474 <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8021460:	6839      	ldr	r1, [r7, #0]
 8021462:	6878      	ldr	r0, [r7, #4]
 8021464:	f000 fcba 	bl	8021ddc <USBD_ClrFeature>
          break;
 8021468:	e004      	b.n	8021474 <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 802146a:	6839      	ldr	r1, [r7, #0]
 802146c:	6878      	ldr	r0, [r7, #4]
 802146e:	f000 fd11 	bl	8021e94 <USBD_CtlError>
          break;
 8021472:	bf00      	nop
      }
      break;
 8021474:	e004      	b.n	8021480 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 8021476:	6839      	ldr	r1, [r7, #0]
 8021478:	6878      	ldr	r0, [r7, #4]
 802147a:	f000 fd0b 	bl	8021e94 <USBD_CtlError>
      break;
 802147e:	bf00      	nop
  }

  return ret;
 8021480:	7bfb      	ldrb	r3, [r7, #15]
}
 8021482:	4618      	mov	r0, r3
 8021484:	3710      	adds	r7, #16
 8021486:	46bd      	mov	sp, r7
 8021488:	bd80      	pop	{r7, pc}
 802148a:	bf00      	nop

0802148c <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 802148c:	b580      	push	{r7, lr}
 802148e:	b084      	sub	sp, #16
 8021490:	af00      	add	r7, sp, #0
 8021492:	6078      	str	r0, [r7, #4]
 8021494:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8021496:	2300      	movs	r3, #0
 8021498:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 802149a:	683b      	ldr	r3, [r7, #0]
 802149c:	781b      	ldrb	r3, [r3, #0]
 802149e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80214a2:	2b40      	cmp	r3, #64	; 0x40
 80214a4:	d005      	beq.n	80214b2 <USBD_StdItfReq+0x26>
 80214a6:	2b40      	cmp	r3, #64	; 0x40
 80214a8:	d82f      	bhi.n	802150a <USBD_StdItfReq+0x7e>
 80214aa:	2b00      	cmp	r3, #0
 80214ac:	d001      	beq.n	80214b2 <USBD_StdItfReq+0x26>
 80214ae:	2b20      	cmp	r3, #32
 80214b0:	d12b      	bne.n	802150a <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 80214b2:	687b      	ldr	r3, [r7, #4]
 80214b4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80214b8:	b2db      	uxtb	r3, r3
 80214ba:	3b01      	subs	r3, #1
 80214bc:	2b02      	cmp	r3, #2
 80214be:	d81d      	bhi.n	80214fc <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80214c0:	683b      	ldr	r3, [r7, #0]
 80214c2:	889b      	ldrh	r3, [r3, #4]
 80214c4:	b2db      	uxtb	r3, r3
 80214c6:	2b01      	cmp	r3, #1
 80214c8:	d813      	bhi.n	80214f2 <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80214ca:	687b      	ldr	r3, [r7, #4]
 80214cc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80214d0:	689b      	ldr	r3, [r3, #8]
 80214d2:	6839      	ldr	r1, [r7, #0]
 80214d4:	6878      	ldr	r0, [r7, #4]
 80214d6:	4798      	blx	r3
 80214d8:	4603      	mov	r3, r0
 80214da:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 80214dc:	683b      	ldr	r3, [r7, #0]
 80214de:	88db      	ldrh	r3, [r3, #6]
 80214e0:	2b00      	cmp	r3, #0
 80214e2:	d110      	bne.n	8021506 <USBD_StdItfReq+0x7a>
 80214e4:	7bfb      	ldrb	r3, [r7, #15]
 80214e6:	2b00      	cmp	r3, #0
 80214e8:	d10d      	bne.n	8021506 <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 80214ea:	6878      	ldr	r0, [r7, #4]
 80214ec:	f000 fd80 	bl	8021ff0 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 80214f0:	e009      	b.n	8021506 <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 80214f2:	6839      	ldr	r1, [r7, #0]
 80214f4:	6878      	ldr	r0, [r7, #4]
 80214f6:	f000 fccd 	bl	8021e94 <USBD_CtlError>
          break;
 80214fa:	e004      	b.n	8021506 <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 80214fc:	6839      	ldr	r1, [r7, #0]
 80214fe:	6878      	ldr	r0, [r7, #4]
 8021500:	f000 fcc8 	bl	8021e94 <USBD_CtlError>
          break;
 8021504:	e000      	b.n	8021508 <USBD_StdItfReq+0x7c>
          break;
 8021506:	bf00      	nop
      }
      break;
 8021508:	e004      	b.n	8021514 <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 802150a:	6839      	ldr	r1, [r7, #0]
 802150c:	6878      	ldr	r0, [r7, #4]
 802150e:	f000 fcc1 	bl	8021e94 <USBD_CtlError>
      break;
 8021512:	bf00      	nop
  }

  return ret;
 8021514:	7bfb      	ldrb	r3, [r7, #15]
}
 8021516:	4618      	mov	r0, r3
 8021518:	3710      	adds	r7, #16
 802151a:	46bd      	mov	sp, r7
 802151c:	bd80      	pop	{r7, pc}

0802151e <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 802151e:	b580      	push	{r7, lr}
 8021520:	b084      	sub	sp, #16
 8021522:	af00      	add	r7, sp, #0
 8021524:	6078      	str	r0, [r7, #4]
 8021526:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8021528:	2300      	movs	r3, #0
 802152a:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 802152c:	683b      	ldr	r3, [r7, #0]
 802152e:	889b      	ldrh	r3, [r3, #4]
 8021530:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8021532:	683b      	ldr	r3, [r7, #0]
 8021534:	781b      	ldrb	r3, [r3, #0]
 8021536:	f003 0360 	and.w	r3, r3, #96	; 0x60
 802153a:	2b40      	cmp	r3, #64	; 0x40
 802153c:	d007      	beq.n	802154e <USBD_StdEPReq+0x30>
 802153e:	2b40      	cmp	r3, #64	; 0x40
 8021540:	f200 8145 	bhi.w	80217ce <USBD_StdEPReq+0x2b0>
 8021544:	2b00      	cmp	r3, #0
 8021546:	d00c      	beq.n	8021562 <USBD_StdEPReq+0x44>
 8021548:	2b20      	cmp	r3, #32
 802154a:	f040 8140 	bne.w	80217ce <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 802154e:	687b      	ldr	r3, [r7, #4]
 8021550:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8021554:	689b      	ldr	r3, [r3, #8]
 8021556:	6839      	ldr	r1, [r7, #0]
 8021558:	6878      	ldr	r0, [r7, #4]
 802155a:	4798      	blx	r3
 802155c:	4603      	mov	r3, r0
 802155e:	73fb      	strb	r3, [r7, #15]
      break;
 8021560:	e13a      	b.n	80217d8 <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8021562:	683b      	ldr	r3, [r7, #0]
 8021564:	785b      	ldrb	r3, [r3, #1]
 8021566:	2b03      	cmp	r3, #3
 8021568:	d007      	beq.n	802157a <USBD_StdEPReq+0x5c>
 802156a:	2b03      	cmp	r3, #3
 802156c:	f300 8129 	bgt.w	80217c2 <USBD_StdEPReq+0x2a4>
 8021570:	2b00      	cmp	r3, #0
 8021572:	d07f      	beq.n	8021674 <USBD_StdEPReq+0x156>
 8021574:	2b01      	cmp	r3, #1
 8021576:	d03c      	beq.n	80215f2 <USBD_StdEPReq+0xd4>
 8021578:	e123      	b.n	80217c2 <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 802157a:	687b      	ldr	r3, [r7, #4]
 802157c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8021580:	b2db      	uxtb	r3, r3
 8021582:	2b02      	cmp	r3, #2
 8021584:	d002      	beq.n	802158c <USBD_StdEPReq+0x6e>
 8021586:	2b03      	cmp	r3, #3
 8021588:	d016      	beq.n	80215b8 <USBD_StdEPReq+0x9a>
 802158a:	e02c      	b.n	80215e6 <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 802158c:	7bbb      	ldrb	r3, [r7, #14]
 802158e:	2b00      	cmp	r3, #0
 8021590:	d00d      	beq.n	80215ae <USBD_StdEPReq+0x90>
 8021592:	7bbb      	ldrb	r3, [r7, #14]
 8021594:	2b80      	cmp	r3, #128	; 0x80
 8021596:	d00a      	beq.n	80215ae <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8021598:	7bbb      	ldrb	r3, [r7, #14]
 802159a:	4619      	mov	r1, r3
 802159c:	6878      	ldr	r0, [r7, #4]
 802159e:	f001 f940 	bl	8022822 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80215a2:	2180      	movs	r1, #128	; 0x80
 80215a4:	6878      	ldr	r0, [r7, #4]
 80215a6:	f001 f93c 	bl	8022822 <USBD_LL_StallEP>
 80215aa:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80215ac:	e020      	b.n	80215f0 <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 80215ae:	6839      	ldr	r1, [r7, #0]
 80215b0:	6878      	ldr	r0, [r7, #4]
 80215b2:	f000 fc6f 	bl	8021e94 <USBD_CtlError>
              break;
 80215b6:	e01b      	b.n	80215f0 <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80215b8:	683b      	ldr	r3, [r7, #0]
 80215ba:	885b      	ldrh	r3, [r3, #2]
 80215bc:	2b00      	cmp	r3, #0
 80215be:	d10e      	bne.n	80215de <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80215c0:	7bbb      	ldrb	r3, [r7, #14]
 80215c2:	2b00      	cmp	r3, #0
 80215c4:	d00b      	beq.n	80215de <USBD_StdEPReq+0xc0>
 80215c6:	7bbb      	ldrb	r3, [r7, #14]
 80215c8:	2b80      	cmp	r3, #128	; 0x80
 80215ca:	d008      	beq.n	80215de <USBD_StdEPReq+0xc0>
 80215cc:	683b      	ldr	r3, [r7, #0]
 80215ce:	88db      	ldrh	r3, [r3, #6]
 80215d0:	2b00      	cmp	r3, #0
 80215d2:	d104      	bne.n	80215de <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 80215d4:	7bbb      	ldrb	r3, [r7, #14]
 80215d6:	4619      	mov	r1, r3
 80215d8:	6878      	ldr	r0, [r7, #4]
 80215da:	f001 f922 	bl	8022822 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 80215de:	6878      	ldr	r0, [r7, #4]
 80215e0:	f000 fd06 	bl	8021ff0 <USBD_CtlSendStatus>

              break;
 80215e4:	e004      	b.n	80215f0 <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 80215e6:	6839      	ldr	r1, [r7, #0]
 80215e8:	6878      	ldr	r0, [r7, #4]
 80215ea:	f000 fc53 	bl	8021e94 <USBD_CtlError>
              break;
 80215ee:	bf00      	nop
          }
          break;
 80215f0:	e0ec      	b.n	80217cc <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 80215f2:	687b      	ldr	r3, [r7, #4]
 80215f4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80215f8:	b2db      	uxtb	r3, r3
 80215fa:	2b02      	cmp	r3, #2
 80215fc:	d002      	beq.n	8021604 <USBD_StdEPReq+0xe6>
 80215fe:	2b03      	cmp	r3, #3
 8021600:	d016      	beq.n	8021630 <USBD_StdEPReq+0x112>
 8021602:	e030      	b.n	8021666 <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8021604:	7bbb      	ldrb	r3, [r7, #14]
 8021606:	2b00      	cmp	r3, #0
 8021608:	d00d      	beq.n	8021626 <USBD_StdEPReq+0x108>
 802160a:	7bbb      	ldrb	r3, [r7, #14]
 802160c:	2b80      	cmp	r3, #128	; 0x80
 802160e:	d00a      	beq.n	8021626 <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8021610:	7bbb      	ldrb	r3, [r7, #14]
 8021612:	4619      	mov	r1, r3
 8021614:	6878      	ldr	r0, [r7, #4]
 8021616:	f001 f904 	bl	8022822 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 802161a:	2180      	movs	r1, #128	; 0x80
 802161c:	6878      	ldr	r0, [r7, #4]
 802161e:	f001 f900 	bl	8022822 <USBD_LL_StallEP>
 8021622:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8021624:	e025      	b.n	8021672 <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 8021626:	6839      	ldr	r1, [r7, #0]
 8021628:	6878      	ldr	r0, [r7, #4]
 802162a:	f000 fc33 	bl	8021e94 <USBD_CtlError>
              break;
 802162e:	e020      	b.n	8021672 <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8021630:	683b      	ldr	r3, [r7, #0]
 8021632:	885b      	ldrh	r3, [r3, #2]
 8021634:	2b00      	cmp	r3, #0
 8021636:	d11b      	bne.n	8021670 <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8021638:	7bbb      	ldrb	r3, [r7, #14]
 802163a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 802163e:	2b00      	cmp	r3, #0
 8021640:	d004      	beq.n	802164c <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8021642:	7bbb      	ldrb	r3, [r7, #14]
 8021644:	4619      	mov	r1, r3
 8021646:	6878      	ldr	r0, [r7, #4]
 8021648:	f001 f90a 	bl	8022860 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 802164c:	6878      	ldr	r0, [r7, #4]
 802164e:	f000 fccf 	bl	8021ff0 <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8021652:	687b      	ldr	r3, [r7, #4]
 8021654:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8021658:	689b      	ldr	r3, [r3, #8]
 802165a:	6839      	ldr	r1, [r7, #0]
 802165c:	6878      	ldr	r0, [r7, #4]
 802165e:	4798      	blx	r3
 8021660:	4603      	mov	r3, r0
 8021662:	73fb      	strb	r3, [r7, #15]
              }
              break;
 8021664:	e004      	b.n	8021670 <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 8021666:	6839      	ldr	r1, [r7, #0]
 8021668:	6878      	ldr	r0, [r7, #4]
 802166a:	f000 fc13 	bl	8021e94 <USBD_CtlError>
              break;
 802166e:	e000      	b.n	8021672 <USBD_StdEPReq+0x154>
              break;
 8021670:	bf00      	nop
          }
          break;
 8021672:	e0ab      	b.n	80217cc <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8021674:	687b      	ldr	r3, [r7, #4]
 8021676:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 802167a:	b2db      	uxtb	r3, r3
 802167c:	2b02      	cmp	r3, #2
 802167e:	d002      	beq.n	8021686 <USBD_StdEPReq+0x168>
 8021680:	2b03      	cmp	r3, #3
 8021682:	d032      	beq.n	80216ea <USBD_StdEPReq+0x1cc>
 8021684:	e097      	b.n	80217b6 <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8021686:	7bbb      	ldrb	r3, [r7, #14]
 8021688:	2b00      	cmp	r3, #0
 802168a:	d007      	beq.n	802169c <USBD_StdEPReq+0x17e>
 802168c:	7bbb      	ldrb	r3, [r7, #14]
 802168e:	2b80      	cmp	r3, #128	; 0x80
 8021690:	d004      	beq.n	802169c <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 8021692:	6839      	ldr	r1, [r7, #0]
 8021694:	6878      	ldr	r0, [r7, #4]
 8021696:	f000 fbfd 	bl	8021e94 <USBD_CtlError>
                break;
 802169a:	e091      	b.n	80217c0 <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 802169c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80216a0:	2b00      	cmp	r3, #0
 80216a2:	da0b      	bge.n	80216bc <USBD_StdEPReq+0x19e>
 80216a4:	7bbb      	ldrb	r3, [r7, #14]
 80216a6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80216aa:	4613      	mov	r3, r2
 80216ac:	009b      	lsls	r3, r3, #2
 80216ae:	4413      	add	r3, r2
 80216b0:	009b      	lsls	r3, r3, #2
 80216b2:	3310      	adds	r3, #16
 80216b4:	687a      	ldr	r2, [r7, #4]
 80216b6:	4413      	add	r3, r2
 80216b8:	3304      	adds	r3, #4
 80216ba:	e00b      	b.n	80216d4 <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80216bc:	7bbb      	ldrb	r3, [r7, #14]
 80216be:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80216c2:	4613      	mov	r3, r2
 80216c4:	009b      	lsls	r3, r3, #2
 80216c6:	4413      	add	r3, r2
 80216c8:	009b      	lsls	r3, r3, #2
 80216ca:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80216ce:	687a      	ldr	r2, [r7, #4]
 80216d0:	4413      	add	r3, r2
 80216d2:	3304      	adds	r3, #4
 80216d4:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 80216d6:	68bb      	ldr	r3, [r7, #8]
 80216d8:	2200      	movs	r2, #0
 80216da:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80216dc:	68bb      	ldr	r3, [r7, #8]
 80216de:	2202      	movs	r2, #2
 80216e0:	4619      	mov	r1, r3
 80216e2:	6878      	ldr	r0, [r7, #4]
 80216e4:	f000 fc47 	bl	8021f76 <USBD_CtlSendData>
              break;
 80216e8:	e06a      	b.n	80217c0 <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 80216ea:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80216ee:	2b00      	cmp	r3, #0
 80216f0:	da11      	bge.n	8021716 <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80216f2:	7bbb      	ldrb	r3, [r7, #14]
 80216f4:	f003 020f 	and.w	r2, r3, #15
 80216f8:	6879      	ldr	r1, [r7, #4]
 80216fa:	4613      	mov	r3, r2
 80216fc:	009b      	lsls	r3, r3, #2
 80216fe:	4413      	add	r3, r2
 8021700:	009b      	lsls	r3, r3, #2
 8021702:	440b      	add	r3, r1
 8021704:	3324      	adds	r3, #36	; 0x24
 8021706:	881b      	ldrh	r3, [r3, #0]
 8021708:	2b00      	cmp	r3, #0
 802170a:	d117      	bne.n	802173c <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 802170c:	6839      	ldr	r1, [r7, #0]
 802170e:	6878      	ldr	r0, [r7, #4]
 8021710:	f000 fbc0 	bl	8021e94 <USBD_CtlError>
                  break;
 8021714:	e054      	b.n	80217c0 <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8021716:	7bbb      	ldrb	r3, [r7, #14]
 8021718:	f003 020f 	and.w	r2, r3, #15
 802171c:	6879      	ldr	r1, [r7, #4]
 802171e:	4613      	mov	r3, r2
 8021720:	009b      	lsls	r3, r3, #2
 8021722:	4413      	add	r3, r2
 8021724:	009b      	lsls	r3, r3, #2
 8021726:	440b      	add	r3, r1
 8021728:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 802172c:	881b      	ldrh	r3, [r3, #0]
 802172e:	2b00      	cmp	r3, #0
 8021730:	d104      	bne.n	802173c <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8021732:	6839      	ldr	r1, [r7, #0]
 8021734:	6878      	ldr	r0, [r7, #4]
 8021736:	f000 fbad 	bl	8021e94 <USBD_CtlError>
                  break;
 802173a:	e041      	b.n	80217c0 <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 802173c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8021740:	2b00      	cmp	r3, #0
 8021742:	da0b      	bge.n	802175c <USBD_StdEPReq+0x23e>
 8021744:	7bbb      	ldrb	r3, [r7, #14]
 8021746:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 802174a:	4613      	mov	r3, r2
 802174c:	009b      	lsls	r3, r3, #2
 802174e:	4413      	add	r3, r2
 8021750:	009b      	lsls	r3, r3, #2
 8021752:	3310      	adds	r3, #16
 8021754:	687a      	ldr	r2, [r7, #4]
 8021756:	4413      	add	r3, r2
 8021758:	3304      	adds	r3, #4
 802175a:	e00b      	b.n	8021774 <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 802175c:	7bbb      	ldrb	r3, [r7, #14]
 802175e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8021762:	4613      	mov	r3, r2
 8021764:	009b      	lsls	r3, r3, #2
 8021766:	4413      	add	r3, r2
 8021768:	009b      	lsls	r3, r3, #2
 802176a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 802176e:	687a      	ldr	r2, [r7, #4]
 8021770:	4413      	add	r3, r2
 8021772:	3304      	adds	r3, #4
 8021774:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8021776:	7bbb      	ldrb	r3, [r7, #14]
 8021778:	2b00      	cmp	r3, #0
 802177a:	d002      	beq.n	8021782 <USBD_StdEPReq+0x264>
 802177c:	7bbb      	ldrb	r3, [r7, #14]
 802177e:	2b80      	cmp	r3, #128	; 0x80
 8021780:	d103      	bne.n	802178a <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 8021782:	68bb      	ldr	r3, [r7, #8]
 8021784:	2200      	movs	r2, #0
 8021786:	601a      	str	r2, [r3, #0]
 8021788:	e00e      	b.n	80217a8 <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 802178a:	7bbb      	ldrb	r3, [r7, #14]
 802178c:	4619      	mov	r1, r3
 802178e:	6878      	ldr	r0, [r7, #4]
 8021790:	f001 f885 	bl	802289e <USBD_LL_IsStallEP>
 8021794:	4603      	mov	r3, r0
 8021796:	2b00      	cmp	r3, #0
 8021798:	d003      	beq.n	80217a2 <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 802179a:	68bb      	ldr	r3, [r7, #8]
 802179c:	2201      	movs	r2, #1
 802179e:	601a      	str	r2, [r3, #0]
 80217a0:	e002      	b.n	80217a8 <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 80217a2:	68bb      	ldr	r3, [r7, #8]
 80217a4:	2200      	movs	r2, #0
 80217a6:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80217a8:	68bb      	ldr	r3, [r7, #8]
 80217aa:	2202      	movs	r2, #2
 80217ac:	4619      	mov	r1, r3
 80217ae:	6878      	ldr	r0, [r7, #4]
 80217b0:	f000 fbe1 	bl	8021f76 <USBD_CtlSendData>
              break;
 80217b4:	e004      	b.n	80217c0 <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 80217b6:	6839      	ldr	r1, [r7, #0]
 80217b8:	6878      	ldr	r0, [r7, #4]
 80217ba:	f000 fb6b 	bl	8021e94 <USBD_CtlError>
              break;
 80217be:	bf00      	nop
          }
          break;
 80217c0:	e004      	b.n	80217cc <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 80217c2:	6839      	ldr	r1, [r7, #0]
 80217c4:	6878      	ldr	r0, [r7, #4]
 80217c6:	f000 fb65 	bl	8021e94 <USBD_CtlError>
          break;
 80217ca:	bf00      	nop
      }
      break;
 80217cc:	e004      	b.n	80217d8 <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 80217ce:	6839      	ldr	r1, [r7, #0]
 80217d0:	6878      	ldr	r0, [r7, #4]
 80217d2:	f000 fb5f 	bl	8021e94 <USBD_CtlError>
      break;
 80217d6:	bf00      	nop
  }

  return ret;
 80217d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80217da:	4618      	mov	r0, r3
 80217dc:	3710      	adds	r7, #16
 80217de:	46bd      	mov	sp, r7
 80217e0:	bd80      	pop	{r7, pc}
	...

080217e4 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80217e4:	b580      	push	{r7, lr}
 80217e6:	b084      	sub	sp, #16
 80217e8:	af00      	add	r7, sp, #0
 80217ea:	6078      	str	r0, [r7, #4]
 80217ec:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80217ee:	2300      	movs	r3, #0
 80217f0:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 80217f2:	2300      	movs	r3, #0
 80217f4:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80217f6:	2300      	movs	r3, #0
 80217f8:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 80217fa:	683b      	ldr	r3, [r7, #0]
 80217fc:	885b      	ldrh	r3, [r3, #2]
 80217fe:	0a1b      	lsrs	r3, r3, #8
 8021800:	b29b      	uxth	r3, r3
 8021802:	3b01      	subs	r3, #1
 8021804:	2b0e      	cmp	r3, #14
 8021806:	f200 8152 	bhi.w	8021aae <USBD_GetDescriptor+0x2ca>
 802180a:	a201      	add	r2, pc, #4	; (adr r2, 8021810 <USBD_GetDescriptor+0x2c>)
 802180c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8021810:	08021881 	.word	0x08021881
 8021814:	08021899 	.word	0x08021899
 8021818:	080218d9 	.word	0x080218d9
 802181c:	08021aaf 	.word	0x08021aaf
 8021820:	08021aaf 	.word	0x08021aaf
 8021824:	08021a4f 	.word	0x08021a4f
 8021828:	08021a7b 	.word	0x08021a7b
 802182c:	08021aaf 	.word	0x08021aaf
 8021830:	08021aaf 	.word	0x08021aaf
 8021834:	08021aaf 	.word	0x08021aaf
 8021838:	08021aaf 	.word	0x08021aaf
 802183c:	08021aaf 	.word	0x08021aaf
 8021840:	08021aaf 	.word	0x08021aaf
 8021844:	08021aaf 	.word	0x08021aaf
 8021848:	0802184d 	.word	0x0802184d
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 802184c:	687b      	ldr	r3, [r7, #4]
 802184e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8021852:	69db      	ldr	r3, [r3, #28]
 8021854:	2b00      	cmp	r3, #0
 8021856:	d00b      	beq.n	8021870 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 8021858:	687b      	ldr	r3, [r7, #4]
 802185a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 802185e:	69db      	ldr	r3, [r3, #28]
 8021860:	687a      	ldr	r2, [r7, #4]
 8021862:	7c12      	ldrb	r2, [r2, #16]
 8021864:	f107 0108 	add.w	r1, r7, #8
 8021868:	4610      	mov	r0, r2
 802186a:	4798      	blx	r3
 802186c:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 802186e:	e126      	b.n	8021abe <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8021870:	6839      	ldr	r1, [r7, #0]
 8021872:	6878      	ldr	r0, [r7, #4]
 8021874:	f000 fb0e 	bl	8021e94 <USBD_CtlError>
        err++;
 8021878:	7afb      	ldrb	r3, [r7, #11]
 802187a:	3301      	adds	r3, #1
 802187c:	72fb      	strb	r3, [r7, #11]
      break;
 802187e:	e11e      	b.n	8021abe <USBD_GetDescriptor+0x2da>
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8021880:	687b      	ldr	r3, [r7, #4]
 8021882:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8021886:	681b      	ldr	r3, [r3, #0]
 8021888:	687a      	ldr	r2, [r7, #4]
 802188a:	7c12      	ldrb	r2, [r2, #16]
 802188c:	f107 0108 	add.w	r1, r7, #8
 8021890:	4610      	mov	r0, r2
 8021892:	4798      	blx	r3
 8021894:	60f8      	str	r0, [r7, #12]
      break;
 8021896:	e112      	b.n	8021abe <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8021898:	687b      	ldr	r3, [r7, #4]
 802189a:	7c1b      	ldrb	r3, [r3, #16]
 802189c:	2b00      	cmp	r3, #0
 802189e:	d10d      	bne.n	80218bc <USBD_GetDescriptor+0xd8>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 80218a0:	687b      	ldr	r3, [r7, #4]
 80218a2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80218a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80218a8:	f107 0208 	add.w	r2, r7, #8
 80218ac:	4610      	mov	r0, r2
 80218ae:	4798      	blx	r3
 80218b0:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80218b2:	68fb      	ldr	r3, [r7, #12]
 80218b4:	3301      	adds	r3, #1
 80218b6:	2202      	movs	r2, #2
 80218b8:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 80218ba:	e100      	b.n	8021abe <USBD_GetDescriptor+0x2da>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 80218bc:	687b      	ldr	r3, [r7, #4]
 80218be:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80218c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80218c4:	f107 0208 	add.w	r2, r7, #8
 80218c8:	4610      	mov	r0, r2
 80218ca:	4798      	blx	r3
 80218cc:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80218ce:	68fb      	ldr	r3, [r7, #12]
 80218d0:	3301      	adds	r3, #1
 80218d2:	2202      	movs	r2, #2
 80218d4:	701a      	strb	r2, [r3, #0]
      break;
 80218d6:	e0f2      	b.n	8021abe <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 80218d8:	683b      	ldr	r3, [r7, #0]
 80218da:	885b      	ldrh	r3, [r3, #2]
 80218dc:	b2db      	uxtb	r3, r3
 80218de:	2b05      	cmp	r3, #5
 80218e0:	f200 80ac 	bhi.w	8021a3c <USBD_GetDescriptor+0x258>
 80218e4:	a201      	add	r2, pc, #4	; (adr r2, 80218ec <USBD_GetDescriptor+0x108>)
 80218e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80218ea:	bf00      	nop
 80218ec:	08021905 	.word	0x08021905
 80218f0:	08021939 	.word	0x08021939
 80218f4:	0802196d 	.word	0x0802196d
 80218f8:	080219a1 	.word	0x080219a1
 80218fc:	080219d5 	.word	0x080219d5
 8021900:	08021a09 	.word	0x08021a09
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8021904:	687b      	ldr	r3, [r7, #4]
 8021906:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 802190a:	685b      	ldr	r3, [r3, #4]
 802190c:	2b00      	cmp	r3, #0
 802190e:	d00b      	beq.n	8021928 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8021910:	687b      	ldr	r3, [r7, #4]
 8021912:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8021916:	685b      	ldr	r3, [r3, #4]
 8021918:	687a      	ldr	r2, [r7, #4]
 802191a:	7c12      	ldrb	r2, [r2, #16]
 802191c:	f107 0108 	add.w	r1, r7, #8
 8021920:	4610      	mov	r0, r2
 8021922:	4798      	blx	r3
 8021924:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8021926:	e091      	b.n	8021a4c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8021928:	6839      	ldr	r1, [r7, #0]
 802192a:	6878      	ldr	r0, [r7, #4]
 802192c:	f000 fab2 	bl	8021e94 <USBD_CtlError>
            err++;
 8021930:	7afb      	ldrb	r3, [r7, #11]
 8021932:	3301      	adds	r3, #1
 8021934:	72fb      	strb	r3, [r7, #11]
          break;
 8021936:	e089      	b.n	8021a4c <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8021938:	687b      	ldr	r3, [r7, #4]
 802193a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 802193e:	689b      	ldr	r3, [r3, #8]
 8021940:	2b00      	cmp	r3, #0
 8021942:	d00b      	beq.n	802195c <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8021944:	687b      	ldr	r3, [r7, #4]
 8021946:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 802194a:	689b      	ldr	r3, [r3, #8]
 802194c:	687a      	ldr	r2, [r7, #4]
 802194e:	7c12      	ldrb	r2, [r2, #16]
 8021950:	f107 0108 	add.w	r1, r7, #8
 8021954:	4610      	mov	r0, r2
 8021956:	4798      	blx	r3
 8021958:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 802195a:	e077      	b.n	8021a4c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 802195c:	6839      	ldr	r1, [r7, #0]
 802195e:	6878      	ldr	r0, [r7, #4]
 8021960:	f000 fa98 	bl	8021e94 <USBD_CtlError>
            err++;
 8021964:	7afb      	ldrb	r3, [r7, #11]
 8021966:	3301      	adds	r3, #1
 8021968:	72fb      	strb	r3, [r7, #11]
          break;
 802196a:	e06f      	b.n	8021a4c <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 802196c:	687b      	ldr	r3, [r7, #4]
 802196e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8021972:	68db      	ldr	r3, [r3, #12]
 8021974:	2b00      	cmp	r3, #0
 8021976:	d00b      	beq.n	8021990 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8021978:	687b      	ldr	r3, [r7, #4]
 802197a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 802197e:	68db      	ldr	r3, [r3, #12]
 8021980:	687a      	ldr	r2, [r7, #4]
 8021982:	7c12      	ldrb	r2, [r2, #16]
 8021984:	f107 0108 	add.w	r1, r7, #8
 8021988:	4610      	mov	r0, r2
 802198a:	4798      	blx	r3
 802198c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 802198e:	e05d      	b.n	8021a4c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8021990:	6839      	ldr	r1, [r7, #0]
 8021992:	6878      	ldr	r0, [r7, #4]
 8021994:	f000 fa7e 	bl	8021e94 <USBD_CtlError>
            err++;
 8021998:	7afb      	ldrb	r3, [r7, #11]
 802199a:	3301      	adds	r3, #1
 802199c:	72fb      	strb	r3, [r7, #11]
          break;
 802199e:	e055      	b.n	8021a4c <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80219a0:	687b      	ldr	r3, [r7, #4]
 80219a2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80219a6:	691b      	ldr	r3, [r3, #16]
 80219a8:	2b00      	cmp	r3, #0
 80219aa:	d00b      	beq.n	80219c4 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80219ac:	687b      	ldr	r3, [r7, #4]
 80219ae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80219b2:	691b      	ldr	r3, [r3, #16]
 80219b4:	687a      	ldr	r2, [r7, #4]
 80219b6:	7c12      	ldrb	r2, [r2, #16]
 80219b8:	f107 0108 	add.w	r1, r7, #8
 80219bc:	4610      	mov	r0, r2
 80219be:	4798      	blx	r3
 80219c0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80219c2:	e043      	b.n	8021a4c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80219c4:	6839      	ldr	r1, [r7, #0]
 80219c6:	6878      	ldr	r0, [r7, #4]
 80219c8:	f000 fa64 	bl	8021e94 <USBD_CtlError>
            err++;
 80219cc:	7afb      	ldrb	r3, [r7, #11]
 80219ce:	3301      	adds	r3, #1
 80219d0:	72fb      	strb	r3, [r7, #11]
          break;
 80219d2:	e03b      	b.n	8021a4c <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80219d4:	687b      	ldr	r3, [r7, #4]
 80219d6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80219da:	695b      	ldr	r3, [r3, #20]
 80219dc:	2b00      	cmp	r3, #0
 80219de:	d00b      	beq.n	80219f8 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80219e0:	687b      	ldr	r3, [r7, #4]
 80219e2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80219e6:	695b      	ldr	r3, [r3, #20]
 80219e8:	687a      	ldr	r2, [r7, #4]
 80219ea:	7c12      	ldrb	r2, [r2, #16]
 80219ec:	f107 0108 	add.w	r1, r7, #8
 80219f0:	4610      	mov	r0, r2
 80219f2:	4798      	blx	r3
 80219f4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80219f6:	e029      	b.n	8021a4c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80219f8:	6839      	ldr	r1, [r7, #0]
 80219fa:	6878      	ldr	r0, [r7, #4]
 80219fc:	f000 fa4a 	bl	8021e94 <USBD_CtlError>
            err++;
 8021a00:	7afb      	ldrb	r3, [r7, #11]
 8021a02:	3301      	adds	r3, #1
 8021a04:	72fb      	strb	r3, [r7, #11]
          break;
 8021a06:	e021      	b.n	8021a4c <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8021a08:	687b      	ldr	r3, [r7, #4]
 8021a0a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8021a0e:	699b      	ldr	r3, [r3, #24]
 8021a10:	2b00      	cmp	r3, #0
 8021a12:	d00b      	beq.n	8021a2c <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8021a14:	687b      	ldr	r3, [r7, #4]
 8021a16:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8021a1a:	699b      	ldr	r3, [r3, #24]
 8021a1c:	687a      	ldr	r2, [r7, #4]
 8021a1e:	7c12      	ldrb	r2, [r2, #16]
 8021a20:	f107 0108 	add.w	r1, r7, #8
 8021a24:	4610      	mov	r0, r2
 8021a26:	4798      	blx	r3
 8021a28:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8021a2a:	e00f      	b.n	8021a4c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8021a2c:	6839      	ldr	r1, [r7, #0]
 8021a2e:	6878      	ldr	r0, [r7, #4]
 8021a30:	f000 fa30 	bl	8021e94 <USBD_CtlError>
            err++;
 8021a34:	7afb      	ldrb	r3, [r7, #11]
 8021a36:	3301      	adds	r3, #1
 8021a38:	72fb      	strb	r3, [r7, #11]
          break;
 8021a3a:	e007      	b.n	8021a4c <USBD_GetDescriptor+0x268>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8021a3c:	6839      	ldr	r1, [r7, #0]
 8021a3e:	6878      	ldr	r0, [r7, #4]
 8021a40:	f000 fa28 	bl	8021e94 <USBD_CtlError>
          err++;
 8021a44:	7afb      	ldrb	r3, [r7, #11]
 8021a46:	3301      	adds	r3, #1
 8021a48:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 8021a4a:	bf00      	nop
      }
      break;
 8021a4c:	e037      	b.n	8021abe <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8021a4e:	687b      	ldr	r3, [r7, #4]
 8021a50:	7c1b      	ldrb	r3, [r3, #16]
 8021a52:	2b00      	cmp	r3, #0
 8021a54:	d109      	bne.n	8021a6a <USBD_GetDescriptor+0x286>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8021a56:	687b      	ldr	r3, [r7, #4]
 8021a58:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8021a5c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8021a5e:	f107 0208 	add.w	r2, r7, #8
 8021a62:	4610      	mov	r0, r2
 8021a64:	4798      	blx	r3
 8021a66:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8021a68:	e029      	b.n	8021abe <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8021a6a:	6839      	ldr	r1, [r7, #0]
 8021a6c:	6878      	ldr	r0, [r7, #4]
 8021a6e:	f000 fa11 	bl	8021e94 <USBD_CtlError>
        err++;
 8021a72:	7afb      	ldrb	r3, [r7, #11]
 8021a74:	3301      	adds	r3, #1
 8021a76:	72fb      	strb	r3, [r7, #11]
      break;
 8021a78:	e021      	b.n	8021abe <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8021a7a:	687b      	ldr	r3, [r7, #4]
 8021a7c:	7c1b      	ldrb	r3, [r3, #16]
 8021a7e:	2b00      	cmp	r3, #0
 8021a80:	d10d      	bne.n	8021a9e <USBD_GetDescriptor+0x2ba>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8021a82:	687b      	ldr	r3, [r7, #4]
 8021a84:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8021a88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8021a8a:	f107 0208 	add.w	r2, r7, #8
 8021a8e:	4610      	mov	r0, r2
 8021a90:	4798      	blx	r3
 8021a92:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8021a94:	68fb      	ldr	r3, [r7, #12]
 8021a96:	3301      	adds	r3, #1
 8021a98:	2207      	movs	r2, #7
 8021a9a:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8021a9c:	e00f      	b.n	8021abe <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8021a9e:	6839      	ldr	r1, [r7, #0]
 8021aa0:	6878      	ldr	r0, [r7, #4]
 8021aa2:	f000 f9f7 	bl	8021e94 <USBD_CtlError>
        err++;
 8021aa6:	7afb      	ldrb	r3, [r7, #11]
 8021aa8:	3301      	adds	r3, #1
 8021aaa:	72fb      	strb	r3, [r7, #11]
      break;
 8021aac:	e007      	b.n	8021abe <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 8021aae:	6839      	ldr	r1, [r7, #0]
 8021ab0:	6878      	ldr	r0, [r7, #4]
 8021ab2:	f000 f9ef 	bl	8021e94 <USBD_CtlError>
      err++;
 8021ab6:	7afb      	ldrb	r3, [r7, #11]
 8021ab8:	3301      	adds	r3, #1
 8021aba:	72fb      	strb	r3, [r7, #11]
      break;
 8021abc:	bf00      	nop
  }

  if (err != 0U)
 8021abe:	7afb      	ldrb	r3, [r7, #11]
 8021ac0:	2b00      	cmp	r3, #0
 8021ac2:	d11e      	bne.n	8021b02 <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 8021ac4:	683b      	ldr	r3, [r7, #0]
 8021ac6:	88db      	ldrh	r3, [r3, #6]
 8021ac8:	2b00      	cmp	r3, #0
 8021aca:	d016      	beq.n	8021afa <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 8021acc:	893b      	ldrh	r3, [r7, #8]
 8021ace:	2b00      	cmp	r3, #0
 8021ad0:	d00e      	beq.n	8021af0 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 8021ad2:	683b      	ldr	r3, [r7, #0]
 8021ad4:	88da      	ldrh	r2, [r3, #6]
 8021ad6:	893b      	ldrh	r3, [r7, #8]
 8021ad8:	4293      	cmp	r3, r2
 8021ada:	bf28      	it	cs
 8021adc:	4613      	movcs	r3, r2
 8021ade:	b29b      	uxth	r3, r3
 8021ae0:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8021ae2:	893b      	ldrh	r3, [r7, #8]
 8021ae4:	461a      	mov	r2, r3
 8021ae6:	68f9      	ldr	r1, [r7, #12]
 8021ae8:	6878      	ldr	r0, [r7, #4]
 8021aea:	f000 fa44 	bl	8021f76 <USBD_CtlSendData>
 8021aee:	e009      	b.n	8021b04 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8021af0:	6839      	ldr	r1, [r7, #0]
 8021af2:	6878      	ldr	r0, [r7, #4]
 8021af4:	f000 f9ce 	bl	8021e94 <USBD_CtlError>
 8021af8:	e004      	b.n	8021b04 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8021afa:	6878      	ldr	r0, [r7, #4]
 8021afc:	f000 fa78 	bl	8021ff0 <USBD_CtlSendStatus>
 8021b00:	e000      	b.n	8021b04 <USBD_GetDescriptor+0x320>
    return;
 8021b02:	bf00      	nop
  }
}
 8021b04:	3710      	adds	r7, #16
 8021b06:	46bd      	mov	sp, r7
 8021b08:	bd80      	pop	{r7, pc}
 8021b0a:	bf00      	nop

08021b0c <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8021b0c:	b580      	push	{r7, lr}
 8021b0e:	b084      	sub	sp, #16
 8021b10:	af00      	add	r7, sp, #0
 8021b12:	6078      	str	r0, [r7, #4]
 8021b14:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8021b16:	683b      	ldr	r3, [r7, #0]
 8021b18:	889b      	ldrh	r3, [r3, #4]
 8021b1a:	2b00      	cmp	r3, #0
 8021b1c:	d131      	bne.n	8021b82 <USBD_SetAddress+0x76>
 8021b1e:	683b      	ldr	r3, [r7, #0]
 8021b20:	88db      	ldrh	r3, [r3, #6]
 8021b22:	2b00      	cmp	r3, #0
 8021b24:	d12d      	bne.n	8021b82 <USBD_SetAddress+0x76>
 8021b26:	683b      	ldr	r3, [r7, #0]
 8021b28:	885b      	ldrh	r3, [r3, #2]
 8021b2a:	2b7f      	cmp	r3, #127	; 0x7f
 8021b2c:	d829      	bhi.n	8021b82 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8021b2e:	683b      	ldr	r3, [r7, #0]
 8021b30:	885b      	ldrh	r3, [r3, #2]
 8021b32:	b2db      	uxtb	r3, r3
 8021b34:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8021b38:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8021b3a:	687b      	ldr	r3, [r7, #4]
 8021b3c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8021b40:	b2db      	uxtb	r3, r3
 8021b42:	2b03      	cmp	r3, #3
 8021b44:	d104      	bne.n	8021b50 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8021b46:	6839      	ldr	r1, [r7, #0]
 8021b48:	6878      	ldr	r0, [r7, #4]
 8021b4a:	f000 f9a3 	bl	8021e94 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8021b4e:	e01d      	b.n	8021b8c <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8021b50:	687b      	ldr	r3, [r7, #4]
 8021b52:	7bfa      	ldrb	r2, [r7, #15]
 8021b54:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8021b58:	7bfb      	ldrb	r3, [r7, #15]
 8021b5a:	4619      	mov	r1, r3
 8021b5c:	6878      	ldr	r0, [r7, #4]
 8021b5e:	f000 feca 	bl	80228f6 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8021b62:	6878      	ldr	r0, [r7, #4]
 8021b64:	f000 fa44 	bl	8021ff0 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8021b68:	7bfb      	ldrb	r3, [r7, #15]
 8021b6a:	2b00      	cmp	r3, #0
 8021b6c:	d004      	beq.n	8021b78 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8021b6e:	687b      	ldr	r3, [r7, #4]
 8021b70:	2202      	movs	r2, #2
 8021b72:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8021b76:	e009      	b.n	8021b8c <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8021b78:	687b      	ldr	r3, [r7, #4]
 8021b7a:	2201      	movs	r2, #1
 8021b7c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8021b80:	e004      	b.n	8021b8c <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8021b82:	6839      	ldr	r1, [r7, #0]
 8021b84:	6878      	ldr	r0, [r7, #4]
 8021b86:	f000 f985 	bl	8021e94 <USBD_CtlError>
  }
}
 8021b8a:	bf00      	nop
 8021b8c:	bf00      	nop
 8021b8e:	3710      	adds	r7, #16
 8021b90:	46bd      	mov	sp, r7
 8021b92:	bd80      	pop	{r7, pc}

08021b94 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8021b94:	b580      	push	{r7, lr}
 8021b96:	b084      	sub	sp, #16
 8021b98:	af00      	add	r7, sp, #0
 8021b9a:	6078      	str	r0, [r7, #4]
 8021b9c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8021b9e:	2300      	movs	r3, #0
 8021ba0:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8021ba2:	683b      	ldr	r3, [r7, #0]
 8021ba4:	885b      	ldrh	r3, [r3, #2]
 8021ba6:	b2da      	uxtb	r2, r3
 8021ba8:	4b4c      	ldr	r3, [pc, #304]	; (8021cdc <USBD_SetConfig+0x148>)
 8021baa:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8021bac:	4b4b      	ldr	r3, [pc, #300]	; (8021cdc <USBD_SetConfig+0x148>)
 8021bae:	781b      	ldrb	r3, [r3, #0]
 8021bb0:	2b01      	cmp	r3, #1
 8021bb2:	d905      	bls.n	8021bc0 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8021bb4:	6839      	ldr	r1, [r7, #0]
 8021bb6:	6878      	ldr	r0, [r7, #4]
 8021bb8:	f000 f96c 	bl	8021e94 <USBD_CtlError>
    return USBD_FAIL;
 8021bbc:	2303      	movs	r3, #3
 8021bbe:	e088      	b.n	8021cd2 <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 8021bc0:	687b      	ldr	r3, [r7, #4]
 8021bc2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8021bc6:	b2db      	uxtb	r3, r3
 8021bc8:	2b02      	cmp	r3, #2
 8021bca:	d002      	beq.n	8021bd2 <USBD_SetConfig+0x3e>
 8021bcc:	2b03      	cmp	r3, #3
 8021bce:	d025      	beq.n	8021c1c <USBD_SetConfig+0x88>
 8021bd0:	e071      	b.n	8021cb6 <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8021bd2:	4b42      	ldr	r3, [pc, #264]	; (8021cdc <USBD_SetConfig+0x148>)
 8021bd4:	781b      	ldrb	r3, [r3, #0]
 8021bd6:	2b00      	cmp	r3, #0
 8021bd8:	d01c      	beq.n	8021c14 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 8021bda:	4b40      	ldr	r3, [pc, #256]	; (8021cdc <USBD_SetConfig+0x148>)
 8021bdc:	781b      	ldrb	r3, [r3, #0]
 8021bde:	461a      	mov	r2, r3
 8021be0:	687b      	ldr	r3, [r7, #4]
 8021be2:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8021be4:	4b3d      	ldr	r3, [pc, #244]	; (8021cdc <USBD_SetConfig+0x148>)
 8021be6:	781b      	ldrb	r3, [r3, #0]
 8021be8:	4619      	mov	r1, r3
 8021bea:	6878      	ldr	r0, [r7, #4]
 8021bec:	f7ff f91f 	bl	8020e2e <USBD_SetClassConfig>
 8021bf0:	4603      	mov	r3, r0
 8021bf2:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8021bf4:	7bfb      	ldrb	r3, [r7, #15]
 8021bf6:	2b00      	cmp	r3, #0
 8021bf8:	d004      	beq.n	8021c04 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 8021bfa:	6839      	ldr	r1, [r7, #0]
 8021bfc:	6878      	ldr	r0, [r7, #4]
 8021bfe:	f000 f949 	bl	8021e94 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8021c02:	e065      	b.n	8021cd0 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8021c04:	6878      	ldr	r0, [r7, #4]
 8021c06:	f000 f9f3 	bl	8021ff0 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8021c0a:	687b      	ldr	r3, [r7, #4]
 8021c0c:	2203      	movs	r2, #3
 8021c0e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8021c12:	e05d      	b.n	8021cd0 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8021c14:	6878      	ldr	r0, [r7, #4]
 8021c16:	f000 f9eb 	bl	8021ff0 <USBD_CtlSendStatus>
      break;
 8021c1a:	e059      	b.n	8021cd0 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8021c1c:	4b2f      	ldr	r3, [pc, #188]	; (8021cdc <USBD_SetConfig+0x148>)
 8021c1e:	781b      	ldrb	r3, [r3, #0]
 8021c20:	2b00      	cmp	r3, #0
 8021c22:	d112      	bne.n	8021c4a <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8021c24:	687b      	ldr	r3, [r7, #4]
 8021c26:	2202      	movs	r2, #2
 8021c28:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8021c2c:	4b2b      	ldr	r3, [pc, #172]	; (8021cdc <USBD_SetConfig+0x148>)
 8021c2e:	781b      	ldrb	r3, [r3, #0]
 8021c30:	461a      	mov	r2, r3
 8021c32:	687b      	ldr	r3, [r7, #4]
 8021c34:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8021c36:	4b29      	ldr	r3, [pc, #164]	; (8021cdc <USBD_SetConfig+0x148>)
 8021c38:	781b      	ldrb	r3, [r3, #0]
 8021c3a:	4619      	mov	r1, r3
 8021c3c:	6878      	ldr	r0, [r7, #4]
 8021c3e:	f7ff f912 	bl	8020e66 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8021c42:	6878      	ldr	r0, [r7, #4]
 8021c44:	f000 f9d4 	bl	8021ff0 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8021c48:	e042      	b.n	8021cd0 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 8021c4a:	4b24      	ldr	r3, [pc, #144]	; (8021cdc <USBD_SetConfig+0x148>)
 8021c4c:	781b      	ldrb	r3, [r3, #0]
 8021c4e:	461a      	mov	r2, r3
 8021c50:	687b      	ldr	r3, [r7, #4]
 8021c52:	685b      	ldr	r3, [r3, #4]
 8021c54:	429a      	cmp	r2, r3
 8021c56:	d02a      	beq.n	8021cae <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8021c58:	687b      	ldr	r3, [r7, #4]
 8021c5a:	685b      	ldr	r3, [r3, #4]
 8021c5c:	b2db      	uxtb	r3, r3
 8021c5e:	4619      	mov	r1, r3
 8021c60:	6878      	ldr	r0, [r7, #4]
 8021c62:	f7ff f900 	bl	8020e66 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8021c66:	4b1d      	ldr	r3, [pc, #116]	; (8021cdc <USBD_SetConfig+0x148>)
 8021c68:	781b      	ldrb	r3, [r3, #0]
 8021c6a:	461a      	mov	r2, r3
 8021c6c:	687b      	ldr	r3, [r7, #4]
 8021c6e:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8021c70:	4b1a      	ldr	r3, [pc, #104]	; (8021cdc <USBD_SetConfig+0x148>)
 8021c72:	781b      	ldrb	r3, [r3, #0]
 8021c74:	4619      	mov	r1, r3
 8021c76:	6878      	ldr	r0, [r7, #4]
 8021c78:	f7ff f8d9 	bl	8020e2e <USBD_SetClassConfig>
 8021c7c:	4603      	mov	r3, r0
 8021c7e:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8021c80:	7bfb      	ldrb	r3, [r7, #15]
 8021c82:	2b00      	cmp	r3, #0
 8021c84:	d00f      	beq.n	8021ca6 <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 8021c86:	6839      	ldr	r1, [r7, #0]
 8021c88:	6878      	ldr	r0, [r7, #4]
 8021c8a:	f000 f903 	bl	8021e94 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8021c8e:	687b      	ldr	r3, [r7, #4]
 8021c90:	685b      	ldr	r3, [r3, #4]
 8021c92:	b2db      	uxtb	r3, r3
 8021c94:	4619      	mov	r1, r3
 8021c96:	6878      	ldr	r0, [r7, #4]
 8021c98:	f7ff f8e5 	bl	8020e66 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8021c9c:	687b      	ldr	r3, [r7, #4]
 8021c9e:	2202      	movs	r2, #2
 8021ca0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8021ca4:	e014      	b.n	8021cd0 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8021ca6:	6878      	ldr	r0, [r7, #4]
 8021ca8:	f000 f9a2 	bl	8021ff0 <USBD_CtlSendStatus>
      break;
 8021cac:	e010      	b.n	8021cd0 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8021cae:	6878      	ldr	r0, [r7, #4]
 8021cb0:	f000 f99e 	bl	8021ff0 <USBD_CtlSendStatus>
      break;
 8021cb4:	e00c      	b.n	8021cd0 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 8021cb6:	6839      	ldr	r1, [r7, #0]
 8021cb8:	6878      	ldr	r0, [r7, #4]
 8021cba:	f000 f8eb 	bl	8021e94 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8021cbe:	4b07      	ldr	r3, [pc, #28]	; (8021cdc <USBD_SetConfig+0x148>)
 8021cc0:	781b      	ldrb	r3, [r3, #0]
 8021cc2:	4619      	mov	r1, r3
 8021cc4:	6878      	ldr	r0, [r7, #4]
 8021cc6:	f7ff f8ce 	bl	8020e66 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8021cca:	2303      	movs	r3, #3
 8021ccc:	73fb      	strb	r3, [r7, #15]
      break;
 8021cce:	bf00      	nop
  }

  return ret;
 8021cd0:	7bfb      	ldrb	r3, [r7, #15]
}
 8021cd2:	4618      	mov	r0, r3
 8021cd4:	3710      	adds	r7, #16
 8021cd6:	46bd      	mov	sp, r7
 8021cd8:	bd80      	pop	{r7, pc}
 8021cda:	bf00      	nop
 8021cdc:	200007ac 	.word	0x200007ac

08021ce0 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8021ce0:	b580      	push	{r7, lr}
 8021ce2:	b082      	sub	sp, #8
 8021ce4:	af00      	add	r7, sp, #0
 8021ce6:	6078      	str	r0, [r7, #4]
 8021ce8:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8021cea:	683b      	ldr	r3, [r7, #0]
 8021cec:	88db      	ldrh	r3, [r3, #6]
 8021cee:	2b01      	cmp	r3, #1
 8021cf0:	d004      	beq.n	8021cfc <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8021cf2:	6839      	ldr	r1, [r7, #0]
 8021cf4:	6878      	ldr	r0, [r7, #4]
 8021cf6:	f000 f8cd 	bl	8021e94 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8021cfa:	e023      	b.n	8021d44 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8021cfc:	687b      	ldr	r3, [r7, #4]
 8021cfe:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8021d02:	b2db      	uxtb	r3, r3
 8021d04:	2b02      	cmp	r3, #2
 8021d06:	dc02      	bgt.n	8021d0e <USBD_GetConfig+0x2e>
 8021d08:	2b00      	cmp	r3, #0
 8021d0a:	dc03      	bgt.n	8021d14 <USBD_GetConfig+0x34>
 8021d0c:	e015      	b.n	8021d3a <USBD_GetConfig+0x5a>
 8021d0e:	2b03      	cmp	r3, #3
 8021d10:	d00b      	beq.n	8021d2a <USBD_GetConfig+0x4a>
 8021d12:	e012      	b.n	8021d3a <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8021d14:	687b      	ldr	r3, [r7, #4]
 8021d16:	2200      	movs	r2, #0
 8021d18:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8021d1a:	687b      	ldr	r3, [r7, #4]
 8021d1c:	3308      	adds	r3, #8
 8021d1e:	2201      	movs	r2, #1
 8021d20:	4619      	mov	r1, r3
 8021d22:	6878      	ldr	r0, [r7, #4]
 8021d24:	f000 f927 	bl	8021f76 <USBD_CtlSendData>
        break;
 8021d28:	e00c      	b.n	8021d44 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8021d2a:	687b      	ldr	r3, [r7, #4]
 8021d2c:	3304      	adds	r3, #4
 8021d2e:	2201      	movs	r2, #1
 8021d30:	4619      	mov	r1, r3
 8021d32:	6878      	ldr	r0, [r7, #4]
 8021d34:	f000 f91f 	bl	8021f76 <USBD_CtlSendData>
        break;
 8021d38:	e004      	b.n	8021d44 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8021d3a:	6839      	ldr	r1, [r7, #0]
 8021d3c:	6878      	ldr	r0, [r7, #4]
 8021d3e:	f000 f8a9 	bl	8021e94 <USBD_CtlError>
        break;
 8021d42:	bf00      	nop
}
 8021d44:	bf00      	nop
 8021d46:	3708      	adds	r7, #8
 8021d48:	46bd      	mov	sp, r7
 8021d4a:	bd80      	pop	{r7, pc}

08021d4c <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8021d4c:	b580      	push	{r7, lr}
 8021d4e:	b082      	sub	sp, #8
 8021d50:	af00      	add	r7, sp, #0
 8021d52:	6078      	str	r0, [r7, #4]
 8021d54:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8021d56:	687b      	ldr	r3, [r7, #4]
 8021d58:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8021d5c:	b2db      	uxtb	r3, r3
 8021d5e:	3b01      	subs	r3, #1
 8021d60:	2b02      	cmp	r3, #2
 8021d62:	d81e      	bhi.n	8021da2 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8021d64:	683b      	ldr	r3, [r7, #0]
 8021d66:	88db      	ldrh	r3, [r3, #6]
 8021d68:	2b02      	cmp	r3, #2
 8021d6a:	d004      	beq.n	8021d76 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8021d6c:	6839      	ldr	r1, [r7, #0]
 8021d6e:	6878      	ldr	r0, [r7, #4]
 8021d70:	f000 f890 	bl	8021e94 <USBD_CtlError>
        break;
 8021d74:	e01a      	b.n	8021dac <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8021d76:	687b      	ldr	r3, [r7, #4]
 8021d78:	2201      	movs	r2, #1
 8021d7a:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 8021d7c:	687b      	ldr	r3, [r7, #4]
 8021d7e:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8021d82:	2b00      	cmp	r3, #0
 8021d84:	d005      	beq.n	8021d92 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8021d86:	687b      	ldr	r3, [r7, #4]
 8021d88:	68db      	ldr	r3, [r3, #12]
 8021d8a:	f043 0202 	orr.w	r2, r3, #2
 8021d8e:	687b      	ldr	r3, [r7, #4]
 8021d90:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8021d92:	687b      	ldr	r3, [r7, #4]
 8021d94:	330c      	adds	r3, #12
 8021d96:	2202      	movs	r2, #2
 8021d98:	4619      	mov	r1, r3
 8021d9a:	6878      	ldr	r0, [r7, #4]
 8021d9c:	f000 f8eb 	bl	8021f76 <USBD_CtlSendData>
      break;
 8021da0:	e004      	b.n	8021dac <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8021da2:	6839      	ldr	r1, [r7, #0]
 8021da4:	6878      	ldr	r0, [r7, #4]
 8021da6:	f000 f875 	bl	8021e94 <USBD_CtlError>
      break;
 8021daa:	bf00      	nop
  }
}
 8021dac:	bf00      	nop
 8021dae:	3708      	adds	r7, #8
 8021db0:	46bd      	mov	sp, r7
 8021db2:	bd80      	pop	{r7, pc}

08021db4 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8021db4:	b580      	push	{r7, lr}
 8021db6:	b082      	sub	sp, #8
 8021db8:	af00      	add	r7, sp, #0
 8021dba:	6078      	str	r0, [r7, #4]
 8021dbc:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8021dbe:	683b      	ldr	r3, [r7, #0]
 8021dc0:	885b      	ldrh	r3, [r3, #2]
 8021dc2:	2b01      	cmp	r3, #1
 8021dc4:	d106      	bne.n	8021dd4 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8021dc6:	687b      	ldr	r3, [r7, #4]
 8021dc8:	2201      	movs	r2, #1
 8021dca:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8021dce:	6878      	ldr	r0, [r7, #4]
 8021dd0:	f000 f90e 	bl	8021ff0 <USBD_CtlSendStatus>
  }
}
 8021dd4:	bf00      	nop
 8021dd6:	3708      	adds	r7, #8
 8021dd8:	46bd      	mov	sp, r7
 8021dda:	bd80      	pop	{r7, pc}

08021ddc <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8021ddc:	b580      	push	{r7, lr}
 8021dde:	b082      	sub	sp, #8
 8021de0:	af00      	add	r7, sp, #0
 8021de2:	6078      	str	r0, [r7, #4]
 8021de4:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8021de6:	687b      	ldr	r3, [r7, #4]
 8021de8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8021dec:	b2db      	uxtb	r3, r3
 8021dee:	3b01      	subs	r3, #1
 8021df0:	2b02      	cmp	r3, #2
 8021df2:	d80b      	bhi.n	8021e0c <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8021df4:	683b      	ldr	r3, [r7, #0]
 8021df6:	885b      	ldrh	r3, [r3, #2]
 8021df8:	2b01      	cmp	r3, #1
 8021dfa:	d10c      	bne.n	8021e16 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8021dfc:	687b      	ldr	r3, [r7, #4]
 8021dfe:	2200      	movs	r2, #0
 8021e00:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8021e04:	6878      	ldr	r0, [r7, #4]
 8021e06:	f000 f8f3 	bl	8021ff0 <USBD_CtlSendStatus>
      }
      break;
 8021e0a:	e004      	b.n	8021e16 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8021e0c:	6839      	ldr	r1, [r7, #0]
 8021e0e:	6878      	ldr	r0, [r7, #4]
 8021e10:	f000 f840 	bl	8021e94 <USBD_CtlError>
      break;
 8021e14:	e000      	b.n	8021e18 <USBD_ClrFeature+0x3c>
      break;
 8021e16:	bf00      	nop
  }
}
 8021e18:	bf00      	nop
 8021e1a:	3708      	adds	r7, #8
 8021e1c:	46bd      	mov	sp, r7
 8021e1e:	bd80      	pop	{r7, pc}

08021e20 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8021e20:	b580      	push	{r7, lr}
 8021e22:	b084      	sub	sp, #16
 8021e24:	af00      	add	r7, sp, #0
 8021e26:	6078      	str	r0, [r7, #4]
 8021e28:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8021e2a:	683b      	ldr	r3, [r7, #0]
 8021e2c:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8021e2e:	68fb      	ldr	r3, [r7, #12]
 8021e30:	781a      	ldrb	r2, [r3, #0]
 8021e32:	687b      	ldr	r3, [r7, #4]
 8021e34:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8021e36:	68fb      	ldr	r3, [r7, #12]
 8021e38:	3301      	adds	r3, #1
 8021e3a:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8021e3c:	68fb      	ldr	r3, [r7, #12]
 8021e3e:	781a      	ldrb	r2, [r3, #0]
 8021e40:	687b      	ldr	r3, [r7, #4]
 8021e42:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8021e44:	68fb      	ldr	r3, [r7, #12]
 8021e46:	3301      	adds	r3, #1
 8021e48:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8021e4a:	68f8      	ldr	r0, [r7, #12]
 8021e4c:	f7ff fa92 	bl	8021374 <SWAPBYTE>
 8021e50:	4603      	mov	r3, r0
 8021e52:	461a      	mov	r2, r3
 8021e54:	687b      	ldr	r3, [r7, #4]
 8021e56:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8021e58:	68fb      	ldr	r3, [r7, #12]
 8021e5a:	3301      	adds	r3, #1
 8021e5c:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8021e5e:	68fb      	ldr	r3, [r7, #12]
 8021e60:	3301      	adds	r3, #1
 8021e62:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8021e64:	68f8      	ldr	r0, [r7, #12]
 8021e66:	f7ff fa85 	bl	8021374 <SWAPBYTE>
 8021e6a:	4603      	mov	r3, r0
 8021e6c:	461a      	mov	r2, r3
 8021e6e:	687b      	ldr	r3, [r7, #4]
 8021e70:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8021e72:	68fb      	ldr	r3, [r7, #12]
 8021e74:	3301      	adds	r3, #1
 8021e76:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8021e78:	68fb      	ldr	r3, [r7, #12]
 8021e7a:	3301      	adds	r3, #1
 8021e7c:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8021e7e:	68f8      	ldr	r0, [r7, #12]
 8021e80:	f7ff fa78 	bl	8021374 <SWAPBYTE>
 8021e84:	4603      	mov	r3, r0
 8021e86:	461a      	mov	r2, r3
 8021e88:	687b      	ldr	r3, [r7, #4]
 8021e8a:	80da      	strh	r2, [r3, #6]
}
 8021e8c:	bf00      	nop
 8021e8e:	3710      	adds	r7, #16
 8021e90:	46bd      	mov	sp, r7
 8021e92:	bd80      	pop	{r7, pc}

08021e94 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8021e94:	b580      	push	{r7, lr}
 8021e96:	b082      	sub	sp, #8
 8021e98:	af00      	add	r7, sp, #0
 8021e9a:	6078      	str	r0, [r7, #4]
 8021e9c:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8021e9e:	2180      	movs	r1, #128	; 0x80
 8021ea0:	6878      	ldr	r0, [r7, #4]
 8021ea2:	f000 fcbe 	bl	8022822 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8021ea6:	2100      	movs	r1, #0
 8021ea8:	6878      	ldr	r0, [r7, #4]
 8021eaa:	f000 fcba 	bl	8022822 <USBD_LL_StallEP>
}
 8021eae:	bf00      	nop
 8021eb0:	3708      	adds	r7, #8
 8021eb2:	46bd      	mov	sp, r7
 8021eb4:	bd80      	pop	{r7, pc}

08021eb6 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8021eb6:	b580      	push	{r7, lr}
 8021eb8:	b086      	sub	sp, #24
 8021eba:	af00      	add	r7, sp, #0
 8021ebc:	60f8      	str	r0, [r7, #12]
 8021ebe:	60b9      	str	r1, [r7, #8]
 8021ec0:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8021ec2:	2300      	movs	r3, #0
 8021ec4:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8021ec6:	68fb      	ldr	r3, [r7, #12]
 8021ec8:	2b00      	cmp	r3, #0
 8021eca:	d036      	beq.n	8021f3a <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8021ecc:	68fb      	ldr	r3, [r7, #12]
 8021ece:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8021ed0:	6938      	ldr	r0, [r7, #16]
 8021ed2:	f000 f836 	bl	8021f42 <USBD_GetLen>
 8021ed6:	4603      	mov	r3, r0
 8021ed8:	3301      	adds	r3, #1
 8021eda:	b29b      	uxth	r3, r3
 8021edc:	005b      	lsls	r3, r3, #1
 8021ede:	b29a      	uxth	r2, r3
 8021ee0:	687b      	ldr	r3, [r7, #4]
 8021ee2:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8021ee4:	7dfb      	ldrb	r3, [r7, #23]
 8021ee6:	68ba      	ldr	r2, [r7, #8]
 8021ee8:	4413      	add	r3, r2
 8021eea:	687a      	ldr	r2, [r7, #4]
 8021eec:	7812      	ldrb	r2, [r2, #0]
 8021eee:	701a      	strb	r2, [r3, #0]
  idx++;
 8021ef0:	7dfb      	ldrb	r3, [r7, #23]
 8021ef2:	3301      	adds	r3, #1
 8021ef4:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8021ef6:	7dfb      	ldrb	r3, [r7, #23]
 8021ef8:	68ba      	ldr	r2, [r7, #8]
 8021efa:	4413      	add	r3, r2
 8021efc:	2203      	movs	r2, #3
 8021efe:	701a      	strb	r2, [r3, #0]
  idx++;
 8021f00:	7dfb      	ldrb	r3, [r7, #23]
 8021f02:	3301      	adds	r3, #1
 8021f04:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8021f06:	e013      	b.n	8021f30 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8021f08:	7dfb      	ldrb	r3, [r7, #23]
 8021f0a:	68ba      	ldr	r2, [r7, #8]
 8021f0c:	4413      	add	r3, r2
 8021f0e:	693a      	ldr	r2, [r7, #16]
 8021f10:	7812      	ldrb	r2, [r2, #0]
 8021f12:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8021f14:	693b      	ldr	r3, [r7, #16]
 8021f16:	3301      	adds	r3, #1
 8021f18:	613b      	str	r3, [r7, #16]
    idx++;
 8021f1a:	7dfb      	ldrb	r3, [r7, #23]
 8021f1c:	3301      	adds	r3, #1
 8021f1e:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8021f20:	7dfb      	ldrb	r3, [r7, #23]
 8021f22:	68ba      	ldr	r2, [r7, #8]
 8021f24:	4413      	add	r3, r2
 8021f26:	2200      	movs	r2, #0
 8021f28:	701a      	strb	r2, [r3, #0]
    idx++;
 8021f2a:	7dfb      	ldrb	r3, [r7, #23]
 8021f2c:	3301      	adds	r3, #1
 8021f2e:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8021f30:	693b      	ldr	r3, [r7, #16]
 8021f32:	781b      	ldrb	r3, [r3, #0]
 8021f34:	2b00      	cmp	r3, #0
 8021f36:	d1e7      	bne.n	8021f08 <USBD_GetString+0x52>
 8021f38:	e000      	b.n	8021f3c <USBD_GetString+0x86>
    return;
 8021f3a:	bf00      	nop
  }
}
 8021f3c:	3718      	adds	r7, #24
 8021f3e:	46bd      	mov	sp, r7
 8021f40:	bd80      	pop	{r7, pc}

08021f42 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8021f42:	b480      	push	{r7}
 8021f44:	b085      	sub	sp, #20
 8021f46:	af00      	add	r7, sp, #0
 8021f48:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8021f4a:	2300      	movs	r3, #0
 8021f4c:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8021f4e:	687b      	ldr	r3, [r7, #4]
 8021f50:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8021f52:	e005      	b.n	8021f60 <USBD_GetLen+0x1e>
  {
    len++;
 8021f54:	7bfb      	ldrb	r3, [r7, #15]
 8021f56:	3301      	adds	r3, #1
 8021f58:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8021f5a:	68bb      	ldr	r3, [r7, #8]
 8021f5c:	3301      	adds	r3, #1
 8021f5e:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8021f60:	68bb      	ldr	r3, [r7, #8]
 8021f62:	781b      	ldrb	r3, [r3, #0]
 8021f64:	2b00      	cmp	r3, #0
 8021f66:	d1f5      	bne.n	8021f54 <USBD_GetLen+0x12>
  }

  return len;
 8021f68:	7bfb      	ldrb	r3, [r7, #15]
}
 8021f6a:	4618      	mov	r0, r3
 8021f6c:	3714      	adds	r7, #20
 8021f6e:	46bd      	mov	sp, r7
 8021f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021f74:	4770      	bx	lr

08021f76 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8021f76:	b580      	push	{r7, lr}
 8021f78:	b084      	sub	sp, #16
 8021f7a:	af00      	add	r7, sp, #0
 8021f7c:	60f8      	str	r0, [r7, #12]
 8021f7e:	60b9      	str	r1, [r7, #8]
 8021f80:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8021f82:	68fb      	ldr	r3, [r7, #12]
 8021f84:	2202      	movs	r2, #2
 8021f86:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8021f8a:	68fb      	ldr	r3, [r7, #12]
 8021f8c:	687a      	ldr	r2, [r7, #4]
 8021f8e:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8021f90:	68fb      	ldr	r3, [r7, #12]
 8021f92:	687a      	ldr	r2, [r7, #4]
 8021f94:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8021f96:	687b      	ldr	r3, [r7, #4]
 8021f98:	68ba      	ldr	r2, [r7, #8]
 8021f9a:	2100      	movs	r1, #0
 8021f9c:	68f8      	ldr	r0, [r7, #12]
 8021f9e:	f000 fcc9 	bl	8022934 <USBD_LL_Transmit>

  return USBD_OK;
 8021fa2:	2300      	movs	r3, #0
}
 8021fa4:	4618      	mov	r0, r3
 8021fa6:	3710      	adds	r7, #16
 8021fa8:	46bd      	mov	sp, r7
 8021faa:	bd80      	pop	{r7, pc}

08021fac <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8021fac:	b580      	push	{r7, lr}
 8021fae:	b084      	sub	sp, #16
 8021fb0:	af00      	add	r7, sp, #0
 8021fb2:	60f8      	str	r0, [r7, #12]
 8021fb4:	60b9      	str	r1, [r7, #8]
 8021fb6:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8021fb8:	687b      	ldr	r3, [r7, #4]
 8021fba:	68ba      	ldr	r2, [r7, #8]
 8021fbc:	2100      	movs	r1, #0
 8021fbe:	68f8      	ldr	r0, [r7, #12]
 8021fc0:	f000 fcb8 	bl	8022934 <USBD_LL_Transmit>

  return USBD_OK;
 8021fc4:	2300      	movs	r3, #0
}
 8021fc6:	4618      	mov	r0, r3
 8021fc8:	3710      	adds	r7, #16
 8021fca:	46bd      	mov	sp, r7
 8021fcc:	bd80      	pop	{r7, pc}

08021fce <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8021fce:	b580      	push	{r7, lr}
 8021fd0:	b084      	sub	sp, #16
 8021fd2:	af00      	add	r7, sp, #0
 8021fd4:	60f8      	str	r0, [r7, #12]
 8021fd6:	60b9      	str	r1, [r7, #8]
 8021fd8:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8021fda:	687b      	ldr	r3, [r7, #4]
 8021fdc:	68ba      	ldr	r2, [r7, #8]
 8021fde:	2100      	movs	r1, #0
 8021fe0:	68f8      	ldr	r0, [r7, #12]
 8021fe2:	f000 fcc8 	bl	8022976 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8021fe6:	2300      	movs	r3, #0
}
 8021fe8:	4618      	mov	r0, r3
 8021fea:	3710      	adds	r7, #16
 8021fec:	46bd      	mov	sp, r7
 8021fee:	bd80      	pop	{r7, pc}

08021ff0 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8021ff0:	b580      	push	{r7, lr}
 8021ff2:	b082      	sub	sp, #8
 8021ff4:	af00      	add	r7, sp, #0
 8021ff6:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8021ff8:	687b      	ldr	r3, [r7, #4]
 8021ffa:	2204      	movs	r2, #4
 8021ffc:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8022000:	2300      	movs	r3, #0
 8022002:	2200      	movs	r2, #0
 8022004:	2100      	movs	r1, #0
 8022006:	6878      	ldr	r0, [r7, #4]
 8022008:	f000 fc94 	bl	8022934 <USBD_LL_Transmit>

  return USBD_OK;
 802200c:	2300      	movs	r3, #0
}
 802200e:	4618      	mov	r0, r3
 8022010:	3708      	adds	r7, #8
 8022012:	46bd      	mov	sp, r7
 8022014:	bd80      	pop	{r7, pc}

08022016 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8022016:	b580      	push	{r7, lr}
 8022018:	b082      	sub	sp, #8
 802201a:	af00      	add	r7, sp, #0
 802201c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 802201e:	687b      	ldr	r3, [r7, #4]
 8022020:	2205      	movs	r2, #5
 8022022:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8022026:	2300      	movs	r3, #0
 8022028:	2200      	movs	r2, #0
 802202a:	2100      	movs	r1, #0
 802202c:	6878      	ldr	r0, [r7, #4]
 802202e:	f000 fca2 	bl	8022976 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8022032:	2300      	movs	r3, #0
}
 8022034:	4618      	mov	r0, r3
 8022036:	3708      	adds	r7, #8
 8022038:	46bd      	mov	sp, r7
 802203a:	bd80      	pop	{r7, pc}

0802203c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 802203c:	b580      	push	{r7, lr}
 802203e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8022040:	2200      	movs	r2, #0
 8022042:	4912      	ldr	r1, [pc, #72]	; (802208c <MX_USB_DEVICE_Init+0x50>)
 8022044:	4812      	ldr	r0, [pc, #72]	; (8022090 <MX_USB_DEVICE_Init+0x54>)
 8022046:	f7fe fe84 	bl	8020d52 <USBD_Init>
 802204a:	4603      	mov	r3, r0
 802204c:	2b00      	cmp	r3, #0
 802204e:	d001      	beq.n	8022054 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8022050:	f7f5 fdd8 	bl	8017c04 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_MSC) != USBD_OK)
 8022054:	490f      	ldr	r1, [pc, #60]	; (8022094 <MX_USB_DEVICE_Init+0x58>)
 8022056:	480e      	ldr	r0, [pc, #56]	; (8022090 <MX_USB_DEVICE_Init+0x54>)
 8022058:	f7fe feab 	bl	8020db2 <USBD_RegisterClass>
 802205c:	4603      	mov	r3, r0
 802205e:	2b00      	cmp	r3, #0
 8022060:	d001      	beq.n	8022066 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8022062:	f7f5 fdcf 	bl	8017c04 <Error_Handler>
  }
  if (USBD_MSC_RegisterStorage(&hUsbDeviceFS, &USBD_Storage_Interface_fops_FS) != USBD_OK)
 8022066:	490c      	ldr	r1, [pc, #48]	; (8022098 <MX_USB_DEVICE_Init+0x5c>)
 8022068:	4809      	ldr	r0, [pc, #36]	; (8022090 <MX_USB_DEVICE_Init+0x54>)
 802206a:	f7fd fa5b 	bl	801f524 <USBD_MSC_RegisterStorage>
 802206e:	4603      	mov	r3, r0
 8022070:	2b00      	cmp	r3, #0
 8022072:	d001      	beq.n	8022078 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8022074:	f7f5 fdc6 	bl	8017c04 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8022078:	4805      	ldr	r0, [pc, #20]	; (8022090 <MX_USB_DEVICE_Init+0x54>)
 802207a:	f7fe fec1 	bl	8020e00 <USBD_Start>
 802207e:	4603      	mov	r3, r0
 8022080:	2b00      	cmp	r3, #0
 8022082:	d001      	beq.n	8022088 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8022084:	f7f5 fdbe 	bl	8017c04 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8022088:	bf00      	nop
 802208a:	bd80      	pop	{r7, pc}
 802208c:	2000067c 	.word	0x2000067c
 8022090:	20006c3c 	.word	0x20006c3c
 8022094:	20000594 	.word	0x20000594
 8022098:	200006dc 	.word	0x200006dc

0802209c <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 802209c:	b480      	push	{r7}
 802209e:	b083      	sub	sp, #12
 80220a0:	af00      	add	r7, sp, #0
 80220a2:	4603      	mov	r3, r0
 80220a4:	6039      	str	r1, [r7, #0]
 80220a6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 80220a8:	683b      	ldr	r3, [r7, #0]
 80220aa:	2212      	movs	r2, #18
 80220ac:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 80220ae:	4b03      	ldr	r3, [pc, #12]	; (80220bc <USBD_FS_DeviceDescriptor+0x20>)
}
 80220b0:	4618      	mov	r0, r3
 80220b2:	370c      	adds	r7, #12
 80220b4:	46bd      	mov	sp, r7
 80220b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80220ba:	4770      	bx	lr
 80220bc:	2000069c 	.word	0x2000069c

080220c0 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80220c0:	b480      	push	{r7}
 80220c2:	b083      	sub	sp, #12
 80220c4:	af00      	add	r7, sp, #0
 80220c6:	4603      	mov	r3, r0
 80220c8:	6039      	str	r1, [r7, #0]
 80220ca:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80220cc:	683b      	ldr	r3, [r7, #0]
 80220ce:	2204      	movs	r2, #4
 80220d0:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 80220d2:	4b03      	ldr	r3, [pc, #12]	; (80220e0 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 80220d4:	4618      	mov	r0, r3
 80220d6:	370c      	adds	r7, #12
 80220d8:	46bd      	mov	sp, r7
 80220da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80220de:	4770      	bx	lr
 80220e0:	200006bc 	.word	0x200006bc

080220e4 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80220e4:	b580      	push	{r7, lr}
 80220e6:	b082      	sub	sp, #8
 80220e8:	af00      	add	r7, sp, #0
 80220ea:	4603      	mov	r3, r0
 80220ec:	6039      	str	r1, [r7, #0]
 80220ee:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80220f0:	79fb      	ldrb	r3, [r7, #7]
 80220f2:	2b00      	cmp	r3, #0
 80220f4:	d105      	bne.n	8022102 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80220f6:	683a      	ldr	r2, [r7, #0]
 80220f8:	4907      	ldr	r1, [pc, #28]	; (8022118 <USBD_FS_ProductStrDescriptor+0x34>)
 80220fa:	4808      	ldr	r0, [pc, #32]	; (802211c <USBD_FS_ProductStrDescriptor+0x38>)
 80220fc:	f7ff fedb 	bl	8021eb6 <USBD_GetString>
 8022100:	e004      	b.n	802210c <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8022102:	683a      	ldr	r2, [r7, #0]
 8022104:	4904      	ldr	r1, [pc, #16]	; (8022118 <USBD_FS_ProductStrDescriptor+0x34>)
 8022106:	4805      	ldr	r0, [pc, #20]	; (802211c <USBD_FS_ProductStrDescriptor+0x38>)
 8022108:	f7ff fed5 	bl	8021eb6 <USBD_GetString>
  }
  return USBD_StrDesc;
 802210c:	4b02      	ldr	r3, [pc, #8]	; (8022118 <USBD_FS_ProductStrDescriptor+0x34>)
}
 802210e:	4618      	mov	r0, r3
 8022110:	3708      	adds	r7, #8
 8022112:	46bd      	mov	sp, r7
 8022114:	bd80      	pop	{r7, pc}
 8022116:	bf00      	nop
 8022118:	20006f0c 	.word	0x20006f0c
 802211c:	08000a84 	.word	0x08000a84

08022120 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8022120:	b580      	push	{r7, lr}
 8022122:	b082      	sub	sp, #8
 8022124:	af00      	add	r7, sp, #0
 8022126:	4603      	mov	r3, r0
 8022128:	6039      	str	r1, [r7, #0]
 802212a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 802212c:	683a      	ldr	r2, [r7, #0]
 802212e:	4904      	ldr	r1, [pc, #16]	; (8022140 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8022130:	4804      	ldr	r0, [pc, #16]	; (8022144 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8022132:	f7ff fec0 	bl	8021eb6 <USBD_GetString>
  return USBD_StrDesc;
 8022136:	4b02      	ldr	r3, [pc, #8]	; (8022140 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8022138:	4618      	mov	r0, r3
 802213a:	3708      	adds	r7, #8
 802213c:	46bd      	mov	sp, r7
 802213e:	bd80      	pop	{r7, pc}
 8022140:	20006f0c 	.word	0x20006f0c
 8022144:	08000a98 	.word	0x08000a98

08022148 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8022148:	b580      	push	{r7, lr}
 802214a:	b082      	sub	sp, #8
 802214c:	af00      	add	r7, sp, #0
 802214e:	4603      	mov	r3, r0
 8022150:	6039      	str	r1, [r7, #0]
 8022152:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8022154:	683b      	ldr	r3, [r7, #0]
 8022156:	221a      	movs	r2, #26
 8022158:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 802215a:	f000 f855 	bl	8022208 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 802215e:	4b02      	ldr	r3, [pc, #8]	; (8022168 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8022160:	4618      	mov	r0, r3
 8022162:	3708      	adds	r7, #8
 8022164:	46bd      	mov	sp, r7
 8022166:	bd80      	pop	{r7, pc}
 8022168:	200006c0 	.word	0x200006c0

0802216c <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 802216c:	b580      	push	{r7, lr}
 802216e:	b082      	sub	sp, #8
 8022170:	af00      	add	r7, sp, #0
 8022172:	4603      	mov	r3, r0
 8022174:	6039      	str	r1, [r7, #0]
 8022176:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8022178:	79fb      	ldrb	r3, [r7, #7]
 802217a:	2b00      	cmp	r3, #0
 802217c:	d105      	bne.n	802218a <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 802217e:	683a      	ldr	r2, [r7, #0]
 8022180:	4907      	ldr	r1, [pc, #28]	; (80221a0 <USBD_FS_ConfigStrDescriptor+0x34>)
 8022182:	4808      	ldr	r0, [pc, #32]	; (80221a4 <USBD_FS_ConfigStrDescriptor+0x38>)
 8022184:	f7ff fe97 	bl	8021eb6 <USBD_GetString>
 8022188:	e004      	b.n	8022194 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 802218a:	683a      	ldr	r2, [r7, #0]
 802218c:	4904      	ldr	r1, [pc, #16]	; (80221a0 <USBD_FS_ConfigStrDescriptor+0x34>)
 802218e:	4805      	ldr	r0, [pc, #20]	; (80221a4 <USBD_FS_ConfigStrDescriptor+0x38>)
 8022190:	f7ff fe91 	bl	8021eb6 <USBD_GetString>
  }
  return USBD_StrDesc;
 8022194:	4b02      	ldr	r3, [pc, #8]	; (80221a0 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8022196:	4618      	mov	r0, r3
 8022198:	3708      	adds	r7, #8
 802219a:	46bd      	mov	sp, r7
 802219c:	bd80      	pop	{r7, pc}
 802219e:	bf00      	nop
 80221a0:	20006f0c 	.word	0x20006f0c
 80221a4:	08000aac 	.word	0x08000aac

080221a8 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80221a8:	b580      	push	{r7, lr}
 80221aa:	b082      	sub	sp, #8
 80221ac:	af00      	add	r7, sp, #0
 80221ae:	4603      	mov	r3, r0
 80221b0:	6039      	str	r1, [r7, #0]
 80221b2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80221b4:	79fb      	ldrb	r3, [r7, #7]
 80221b6:	2b00      	cmp	r3, #0
 80221b8:	d105      	bne.n	80221c6 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80221ba:	683a      	ldr	r2, [r7, #0]
 80221bc:	4907      	ldr	r1, [pc, #28]	; (80221dc <USBD_FS_InterfaceStrDescriptor+0x34>)
 80221be:	4808      	ldr	r0, [pc, #32]	; (80221e0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80221c0:	f7ff fe79 	bl	8021eb6 <USBD_GetString>
 80221c4:	e004      	b.n	80221d0 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80221c6:	683a      	ldr	r2, [r7, #0]
 80221c8:	4904      	ldr	r1, [pc, #16]	; (80221dc <USBD_FS_InterfaceStrDescriptor+0x34>)
 80221ca:	4805      	ldr	r0, [pc, #20]	; (80221e0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80221cc:	f7ff fe73 	bl	8021eb6 <USBD_GetString>
  }
  return USBD_StrDesc;
 80221d0:	4b02      	ldr	r3, [pc, #8]	; (80221dc <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 80221d2:	4618      	mov	r0, r3
 80221d4:	3708      	adds	r7, #8
 80221d6:	46bd      	mov	sp, r7
 80221d8:	bd80      	pop	{r7, pc}
 80221da:	bf00      	nop
 80221dc:	20006f0c 	.word	0x20006f0c
 80221e0:	08000ab8 	.word	0x08000ab8

080221e4 <USBD_FS_USR_BOSDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80221e4:	b480      	push	{r7}
 80221e6:	b083      	sub	sp, #12
 80221e8:	af00      	add	r7, sp, #0
 80221ea:	4603      	mov	r3, r0
 80221ec:	6039      	str	r1, [r7, #0]
 80221ee:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_BOSDesc);
 80221f0:	683b      	ldr	r3, [r7, #0]
 80221f2:	220c      	movs	r2, #12
 80221f4:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)USBD_FS_BOSDesc;
 80221f6:	4b03      	ldr	r3, [pc, #12]	; (8022204 <USBD_FS_USR_BOSDescriptor+0x20>)
}
 80221f8:	4618      	mov	r0, r3
 80221fa:	370c      	adds	r7, #12
 80221fc:	46bd      	mov	sp, r7
 80221fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022202:	4770      	bx	lr
 8022204:	200006b0 	.word	0x200006b0

08022208 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8022208:	b580      	push	{r7, lr}
 802220a:	b084      	sub	sp, #16
 802220c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 802220e:	4b0f      	ldr	r3, [pc, #60]	; (802224c <Get_SerialNum+0x44>)
 8022210:	681b      	ldr	r3, [r3, #0]
 8022212:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8022214:	4b0e      	ldr	r3, [pc, #56]	; (8022250 <Get_SerialNum+0x48>)
 8022216:	681b      	ldr	r3, [r3, #0]
 8022218:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 802221a:	4b0e      	ldr	r3, [pc, #56]	; (8022254 <Get_SerialNum+0x4c>)
 802221c:	681b      	ldr	r3, [r3, #0]
 802221e:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8022220:	68fa      	ldr	r2, [r7, #12]
 8022222:	687b      	ldr	r3, [r7, #4]
 8022224:	4413      	add	r3, r2
 8022226:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8022228:	68fb      	ldr	r3, [r7, #12]
 802222a:	2b00      	cmp	r3, #0
 802222c:	d009      	beq.n	8022242 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 802222e:	2208      	movs	r2, #8
 8022230:	4909      	ldr	r1, [pc, #36]	; (8022258 <Get_SerialNum+0x50>)
 8022232:	68f8      	ldr	r0, [r7, #12]
 8022234:	f000 f814 	bl	8022260 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8022238:	2204      	movs	r2, #4
 802223a:	4908      	ldr	r1, [pc, #32]	; (802225c <Get_SerialNum+0x54>)
 802223c:	68b8      	ldr	r0, [r7, #8]
 802223e:	f000 f80f 	bl	8022260 <IntToUnicode>
  }
}
 8022242:	bf00      	nop
 8022244:	3710      	adds	r7, #16
 8022246:	46bd      	mov	sp, r7
 8022248:	bd80      	pop	{r7, pc}
 802224a:	bf00      	nop
 802224c:	1fff7a10 	.word	0x1fff7a10
 8022250:	1fff7a14 	.word	0x1fff7a14
 8022254:	1fff7a18 	.word	0x1fff7a18
 8022258:	200006c2 	.word	0x200006c2
 802225c:	200006d2 	.word	0x200006d2

08022260 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8022260:	b480      	push	{r7}
 8022262:	b087      	sub	sp, #28
 8022264:	af00      	add	r7, sp, #0
 8022266:	60f8      	str	r0, [r7, #12]
 8022268:	60b9      	str	r1, [r7, #8]
 802226a:	4613      	mov	r3, r2
 802226c:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 802226e:	2300      	movs	r3, #0
 8022270:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8022272:	2300      	movs	r3, #0
 8022274:	75fb      	strb	r3, [r7, #23]
 8022276:	e027      	b.n	80222c8 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8022278:	68fb      	ldr	r3, [r7, #12]
 802227a:	0f1b      	lsrs	r3, r3, #28
 802227c:	2b09      	cmp	r3, #9
 802227e:	d80b      	bhi.n	8022298 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8022280:	68fb      	ldr	r3, [r7, #12]
 8022282:	0f1b      	lsrs	r3, r3, #28
 8022284:	b2da      	uxtb	r2, r3
 8022286:	7dfb      	ldrb	r3, [r7, #23]
 8022288:	005b      	lsls	r3, r3, #1
 802228a:	4619      	mov	r1, r3
 802228c:	68bb      	ldr	r3, [r7, #8]
 802228e:	440b      	add	r3, r1
 8022290:	3230      	adds	r2, #48	; 0x30
 8022292:	b2d2      	uxtb	r2, r2
 8022294:	701a      	strb	r2, [r3, #0]
 8022296:	e00a      	b.n	80222ae <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8022298:	68fb      	ldr	r3, [r7, #12]
 802229a:	0f1b      	lsrs	r3, r3, #28
 802229c:	b2da      	uxtb	r2, r3
 802229e:	7dfb      	ldrb	r3, [r7, #23]
 80222a0:	005b      	lsls	r3, r3, #1
 80222a2:	4619      	mov	r1, r3
 80222a4:	68bb      	ldr	r3, [r7, #8]
 80222a6:	440b      	add	r3, r1
 80222a8:	3237      	adds	r2, #55	; 0x37
 80222aa:	b2d2      	uxtb	r2, r2
 80222ac:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 80222ae:	68fb      	ldr	r3, [r7, #12]
 80222b0:	011b      	lsls	r3, r3, #4
 80222b2:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 80222b4:	7dfb      	ldrb	r3, [r7, #23]
 80222b6:	005b      	lsls	r3, r3, #1
 80222b8:	3301      	adds	r3, #1
 80222ba:	68ba      	ldr	r2, [r7, #8]
 80222bc:	4413      	add	r3, r2
 80222be:	2200      	movs	r2, #0
 80222c0:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 80222c2:	7dfb      	ldrb	r3, [r7, #23]
 80222c4:	3301      	adds	r3, #1
 80222c6:	75fb      	strb	r3, [r7, #23]
 80222c8:	7dfa      	ldrb	r2, [r7, #23]
 80222ca:	79fb      	ldrb	r3, [r7, #7]
 80222cc:	429a      	cmp	r2, r3
 80222ce:	d3d3      	bcc.n	8022278 <IntToUnicode+0x18>
  }
}
 80222d0:	bf00      	nop
 80222d2:	bf00      	nop
 80222d4:	371c      	adds	r7, #28
 80222d6:	46bd      	mov	sp, r7
 80222d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80222dc:	4770      	bx	lr

080222de <STORAGE_Init_FS>:
  * @brief  Initializes over USB FS IP
  * @param  lun:
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_Init_FS(uint8_t lun)
{
 80222de:	b480      	push	{r7}
 80222e0:	b083      	sub	sp, #12
 80222e2:	af00      	add	r7, sp, #0
 80222e4:	4603      	mov	r3, r0
 80222e6:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 2 */
  return (USBD_OK);
 80222e8:	2300      	movs	r3, #0
  /* USER CODE END 2 */
}
 80222ea:	4618      	mov	r0, r3
 80222ec:	370c      	adds	r7, #12
 80222ee:	46bd      	mov	sp, r7
 80222f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80222f4:	4770      	bx	lr

080222f6 <STORAGE_GetCapacity_FS>:
  * @param  block_num: .
  * @param  block_size: .
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_GetCapacity_FS(uint8_t lun, uint32_t *block_num, uint16_t *block_size)
{
 80222f6:	b480      	push	{r7}
 80222f8:	b085      	sub	sp, #20
 80222fa:	af00      	add	r7, sp, #0
 80222fc:	4603      	mov	r3, r0
 80222fe:	60b9      	str	r1, [r7, #8]
 8022300:	607a      	str	r2, [r7, #4]
 8022302:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 3 */
  *block_num  = STORAGE_BLK_NBR;
 8022304:	68bb      	ldr	r3, [r7, #8]
 8022306:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 802230a:	601a      	str	r2, [r3, #0]
  *block_size = STORAGE_BLK_SIZ;
 802230c:	687b      	ldr	r3, [r7, #4]
 802230e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8022312:	801a      	strh	r2, [r3, #0]
  return (USBD_OK);
 8022314:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8022316:	4618      	mov	r0, r3
 8022318:	3714      	adds	r7, #20
 802231a:	46bd      	mov	sp, r7
 802231c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022320:	4770      	bx	lr

08022322 <STORAGE_IsReady_FS>:
  * @brief  .
  * @param  lun: .
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_IsReady_FS(uint8_t lun)
{
 8022322:	b480      	push	{r7}
 8022324:	b083      	sub	sp, #12
 8022326:	af00      	add	r7, sp, #0
 8022328:	4603      	mov	r3, r0
 802232a:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 802232c:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 802232e:	4618      	mov	r0, r3
 8022330:	370c      	adds	r7, #12
 8022332:	46bd      	mov	sp, r7
 8022334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022338:	4770      	bx	lr

0802233a <STORAGE_IsWriteProtected_FS>:
  * @brief  .
  * @param  lun: .
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_IsWriteProtected_FS(uint8_t lun)
{
 802233a:	b480      	push	{r7}
 802233c:	b083      	sub	sp, #12
 802233e:	af00      	add	r7, sp, #0
 8022340:	4603      	mov	r3, r0
 8022342:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 5 */
  return (USBD_OK);
 8022344:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8022346:	4618      	mov	r0, r3
 8022348:	370c      	adds	r7, #12
 802234a:	46bd      	mov	sp, r7
 802234c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022350:	4770      	bx	lr

08022352 <STORAGE_Read_FS>:
  * @brief  .
  * @param  lun: .
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_Read_FS(uint8_t lun, uint8_t *buf, uint32_t blk_addr, uint16_t blk_len)
{
 8022352:	b580      	push	{r7, lr}
 8022354:	b084      	sub	sp, #16
 8022356:	af00      	add	r7, sp, #0
 8022358:	60b9      	str	r1, [r7, #8]
 802235a:	607a      	str	r2, [r7, #4]
 802235c:	461a      	mov	r2, r3
 802235e:	4603      	mov	r3, r0
 8022360:	73fb      	strb	r3, [r7, #15]
 8022362:	4613      	mov	r3, r2
 8022364:	81bb      	strh	r3, [r7, #12]
  /* USER CODE BEGIN 6 */
	ExtFlash_PageRD( (char *)buf, blk_addr*STORAGE_BLK_SIZ, blk_len);
 8022366:	687b      	ldr	r3, [r7, #4]
 8022368:	025b      	lsls	r3, r3, #9
 802236a:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 802236e:	4619      	mov	r1, r3
 8022370:	68b8      	ldr	r0, [r7, #8]
 8022372:	f7ec fcbd 	bl	800ecf0 <ExtFlash_PageRD>
  return (USBD_OK);
 8022376:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8022378:	4618      	mov	r0, r3
 802237a:	3710      	adds	r7, #16
 802237c:	46bd      	mov	sp, r7
 802237e:	bd80      	pop	{r7, pc}

08022380 <STORAGE_Write_FS>:
  * @brief  .
  * @param  lun: .
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_Write_FS(uint8_t lun, uint8_t *buf, uint32_t blk_addr, uint16_t blk_len)
{
 8022380:	b580      	push	{r7, lr}
 8022382:	b084      	sub	sp, #16
 8022384:	af00      	add	r7, sp, #0
 8022386:	60b9      	str	r1, [r7, #8]
 8022388:	607a      	str	r2, [r7, #4]
 802238a:	461a      	mov	r2, r3
 802238c:	4603      	mov	r3, r0
 802238e:	73fb      	strb	r3, [r7, #15]
 8022390:	4613      	mov	r3, r2
 8022392:	81bb      	strh	r3, [r7, #12]
  /* USER CODE BEGIN 7 */
	ExtFlash_PageWR( (char *)buf, blk_addr*STORAGE_BLK_SIZ);
 8022394:	687b      	ldr	r3, [r7, #4]
 8022396:	025b      	lsls	r3, r3, #9
 8022398:	4619      	mov	r1, r3
 802239a:	68b8      	ldr	r0, [r7, #8]
 802239c:	f7ec fd80 	bl	800eea0 <ExtFlash_PageWR>
	return (USBD_OK);
 80223a0:	2300      	movs	r3, #0
  /* USER CODE END 7 */
}
 80223a2:	4618      	mov	r0, r3
 80223a4:	3710      	adds	r7, #16
 80223a6:	46bd      	mov	sp, r7
 80223a8:	bd80      	pop	{r7, pc}

080223aa <STORAGE_GetMaxLun_FS>:
  * @brief  .
  * @param  None
  * @retval .
  */
int8_t STORAGE_GetMaxLun_FS(void)
{
 80223aa:	b480      	push	{r7}
 80223ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 8 */
  return (STORAGE_LUN_NBR - 1);
 80223ae:	2300      	movs	r3, #0
  /* USER CODE END 8 */
}
 80223b0:	4618      	mov	r0, r3
 80223b2:	46bd      	mov	sp, r7
 80223b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80223b8:	4770      	bx	lr
	...

080223bc <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80223bc:	b580      	push	{r7, lr}
 80223be:	b0a0      	sub	sp, #128	; 0x80
 80223c0:	af00      	add	r7, sp, #0
 80223c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80223c4:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80223c8:	2200      	movs	r2, #0
 80223ca:	601a      	str	r2, [r3, #0]
 80223cc:	605a      	str	r2, [r3, #4]
 80223ce:	609a      	str	r2, [r3, #8]
 80223d0:	60da      	str	r2, [r3, #12]
 80223d2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80223d4:	f107 0310 	add.w	r3, r7, #16
 80223d8:	225c      	movs	r2, #92	; 0x5c
 80223da:	2100      	movs	r1, #0
 80223dc:	4618      	mov	r0, r3
 80223de:	f000 fbd9 	bl	8022b94 <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 80223e2:	687b      	ldr	r3, [r7, #4]
 80223e4:	681b      	ldr	r3, [r3, #0]
 80223e6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80223ea:	d154      	bne.n	8022496 <HAL_PCD_MspInit+0xda>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 80223ec:	f44f 7380 	mov.w	r3, #256	; 0x100
 80223f0:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.PLLSAI.PLLSAIM = 25;
 80223f2:	2319      	movs	r3, #25
 80223f4:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.PLLSAI.PLLSAIN = 192;
 80223f6:	23c0      	movs	r3, #192	; 0xc0
 80223f8:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInitStruct.PLLSAI.PLLSAIQ = 2;
 80223fa:	2302      	movs	r3, #2
 80223fc:	637b      	str	r3, [r7, #52]	; 0x34
    PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV4;
 80223fe:	2304      	movs	r3, #4
 8022400:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInitStruct.PLLSAIDivQ = 1;
 8022402:	2301      	movs	r3, #1
 8022404:	63fb      	str	r3, [r7, #60]	; 0x3c
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48CLKSOURCE_PLLSAIP;
 8022406:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 802240a:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 802240c:	f107 0310 	add.w	r3, r7, #16
 8022410:	4618      	mov	r0, r3
 8022412:	f7f8 fec1 	bl	801b198 <HAL_RCCEx_PeriphCLKConfig>
 8022416:	4603      	mov	r3, r0
 8022418:	2b00      	cmp	r3, #0
 802241a:	d001      	beq.n	8022420 <HAL_PCD_MspInit+0x64>
    {
      Error_Handler();
 802241c:	f7f5 fbf2 	bl	8017c04 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8022420:	2300      	movs	r3, #0
 8022422:	60fb      	str	r3, [r7, #12]
 8022424:	4b1e      	ldr	r3, [pc, #120]	; (80224a0 <HAL_PCD_MspInit+0xe4>)
 8022426:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8022428:	4a1d      	ldr	r2, [pc, #116]	; (80224a0 <HAL_PCD_MspInit+0xe4>)
 802242a:	f043 0301 	orr.w	r3, r3, #1
 802242e:	6313      	str	r3, [r2, #48]	; 0x30
 8022430:	4b1b      	ldr	r3, [pc, #108]	; (80224a0 <HAL_PCD_MspInit+0xe4>)
 8022432:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8022434:	f003 0301 	and.w	r3, r3, #1
 8022438:	60fb      	str	r3, [r7, #12]
 802243a:	68fb      	ldr	r3, [r7, #12]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = D__Pin|D_A12_Pin;
 802243c:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8022440:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8022442:	2302      	movs	r3, #2
 8022444:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8022446:	2300      	movs	r3, #0
 8022448:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 802244a:	2303      	movs	r3, #3
 802244c:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 802244e:	230a      	movs	r3, #10
 8022450:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8022452:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8022456:	4619      	mov	r1, r3
 8022458:	4812      	ldr	r0, [pc, #72]	; (80224a4 <HAL_PCD_MspInit+0xe8>)
 802245a:	f7f7 f999 	bl	8019790 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 802245e:	4b10      	ldr	r3, [pc, #64]	; (80224a0 <HAL_PCD_MspInit+0xe4>)
 8022460:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8022462:	4a0f      	ldr	r2, [pc, #60]	; (80224a0 <HAL_PCD_MspInit+0xe4>)
 8022464:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8022468:	6353      	str	r3, [r2, #52]	; 0x34
 802246a:	2300      	movs	r3, #0
 802246c:	60bb      	str	r3, [r7, #8]
 802246e:	4b0c      	ldr	r3, [pc, #48]	; (80224a0 <HAL_PCD_MspInit+0xe4>)
 8022470:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8022472:	4a0b      	ldr	r2, [pc, #44]	; (80224a0 <HAL_PCD_MspInit+0xe4>)
 8022474:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8022478:	6453      	str	r3, [r2, #68]	; 0x44
 802247a:	4b09      	ldr	r3, [pc, #36]	; (80224a0 <HAL_PCD_MspInit+0xe4>)
 802247c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 802247e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8022482:	60bb      	str	r3, [r7, #8]
 8022484:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8022486:	2200      	movs	r2, #0
 8022488:	2100      	movs	r1, #0
 802248a:	2043      	movs	r0, #67	; 0x43
 802248c:	f7f6 fabf 	bl	8018a0e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8022490:	2043      	movs	r0, #67	; 0x43
 8022492:	f7f6 fad8 	bl	8018a46 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8022496:	bf00      	nop
 8022498:	3780      	adds	r7, #128	; 0x80
 802249a:	46bd      	mov	sp, r7
 802249c:	bd80      	pop	{r7, pc}
 802249e:	bf00      	nop
 80224a0:	40023800 	.word	0x40023800
 80224a4:	40020000 	.word	0x40020000

080224a8 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80224a8:	b580      	push	{r7, lr}
 80224aa:	b082      	sub	sp, #8
 80224ac:	af00      	add	r7, sp, #0
 80224ae:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80224b0:	687b      	ldr	r3, [r7, #4]
 80224b2:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 80224b6:	687b      	ldr	r3, [r7, #4]
 80224b8:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80224bc:	4619      	mov	r1, r3
 80224be:	4610      	mov	r0, r2
 80224c0:	f7fe fce9 	bl	8020e96 <USBD_LL_SetupStage>
}
 80224c4:	bf00      	nop
 80224c6:	3708      	adds	r7, #8
 80224c8:	46bd      	mov	sp, r7
 80224ca:	bd80      	pop	{r7, pc}

080224cc <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80224cc:	b580      	push	{r7, lr}
 80224ce:	b082      	sub	sp, #8
 80224d0:	af00      	add	r7, sp, #0
 80224d2:	6078      	str	r0, [r7, #4]
 80224d4:	460b      	mov	r3, r1
 80224d6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80224d8:	687b      	ldr	r3, [r7, #4]
 80224da:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 80224de:	78fa      	ldrb	r2, [r7, #3]
 80224e0:	6879      	ldr	r1, [r7, #4]
 80224e2:	4613      	mov	r3, r2
 80224e4:	00db      	lsls	r3, r3, #3
 80224e6:	1a9b      	subs	r3, r3, r2
 80224e8:	009b      	lsls	r3, r3, #2
 80224ea:	440b      	add	r3, r1
 80224ec:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80224f0:	681a      	ldr	r2, [r3, #0]
 80224f2:	78fb      	ldrb	r3, [r7, #3]
 80224f4:	4619      	mov	r1, r3
 80224f6:	f7fe fd23 	bl	8020f40 <USBD_LL_DataOutStage>
}
 80224fa:	bf00      	nop
 80224fc:	3708      	adds	r7, #8
 80224fe:	46bd      	mov	sp, r7
 8022500:	bd80      	pop	{r7, pc}

08022502 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8022502:	b580      	push	{r7, lr}
 8022504:	b082      	sub	sp, #8
 8022506:	af00      	add	r7, sp, #0
 8022508:	6078      	str	r0, [r7, #4]
 802250a:	460b      	mov	r3, r1
 802250c:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 802250e:	687b      	ldr	r3, [r7, #4]
 8022510:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8022514:	78fa      	ldrb	r2, [r7, #3]
 8022516:	6879      	ldr	r1, [r7, #4]
 8022518:	4613      	mov	r3, r2
 802251a:	00db      	lsls	r3, r3, #3
 802251c:	1a9b      	subs	r3, r3, r2
 802251e:	009b      	lsls	r3, r3, #2
 8022520:	440b      	add	r3, r1
 8022522:	3348      	adds	r3, #72	; 0x48
 8022524:	681a      	ldr	r2, [r3, #0]
 8022526:	78fb      	ldrb	r3, [r7, #3]
 8022528:	4619      	mov	r1, r3
 802252a:	f7fe fd6c 	bl	8021006 <USBD_LL_DataInStage>
}
 802252e:	bf00      	nop
 8022530:	3708      	adds	r7, #8
 8022532:	46bd      	mov	sp, r7
 8022534:	bd80      	pop	{r7, pc}

08022536 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8022536:	b580      	push	{r7, lr}
 8022538:	b082      	sub	sp, #8
 802253a:	af00      	add	r7, sp, #0
 802253c:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 802253e:	687b      	ldr	r3, [r7, #4]
 8022540:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8022544:	4618      	mov	r0, r3
 8022546:	f7fe fe80 	bl	802124a <USBD_LL_SOF>
}
 802254a:	bf00      	nop
 802254c:	3708      	adds	r7, #8
 802254e:	46bd      	mov	sp, r7
 8022550:	bd80      	pop	{r7, pc}

08022552 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8022552:	b580      	push	{r7, lr}
 8022554:	b084      	sub	sp, #16
 8022556:	af00      	add	r7, sp, #0
 8022558:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 802255a:	2301      	movs	r3, #1
 802255c:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 802255e:	687b      	ldr	r3, [r7, #4]
 8022560:	68db      	ldr	r3, [r3, #12]
 8022562:	2b00      	cmp	r3, #0
 8022564:	d102      	bne.n	802256c <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 8022566:	2300      	movs	r3, #0
 8022568:	73fb      	strb	r3, [r7, #15]
 802256a:	e008      	b.n	802257e <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 802256c:	687b      	ldr	r3, [r7, #4]
 802256e:	68db      	ldr	r3, [r3, #12]
 8022570:	2b02      	cmp	r3, #2
 8022572:	d102      	bne.n	802257a <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8022574:	2301      	movs	r3, #1
 8022576:	73fb      	strb	r3, [r7, #15]
 8022578:	e001      	b.n	802257e <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 802257a:	f7f5 fb43 	bl	8017c04 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 802257e:	687b      	ldr	r3, [r7, #4]
 8022580:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8022584:	7bfa      	ldrb	r2, [r7, #15]
 8022586:	4611      	mov	r1, r2
 8022588:	4618      	mov	r0, r3
 802258a:	f7fe fe20 	bl	80211ce <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 802258e:	687b      	ldr	r3, [r7, #4]
 8022590:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8022594:	4618      	mov	r0, r3
 8022596:	f7fe fdcc 	bl	8021132 <USBD_LL_Reset>
}
 802259a:	bf00      	nop
 802259c:	3710      	adds	r7, #16
 802259e:	46bd      	mov	sp, r7
 80225a0:	bd80      	pop	{r7, pc}
	...

080225a4 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80225a4:	b580      	push	{r7, lr}
 80225a6:	b082      	sub	sp, #8
 80225a8:	af00      	add	r7, sp, #0
 80225aa:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80225ac:	687b      	ldr	r3, [r7, #4]
 80225ae:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80225b2:	4618      	mov	r0, r3
 80225b4:	f7fe fe1b 	bl	80211ee <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 80225b8:	687b      	ldr	r3, [r7, #4]
 80225ba:	681b      	ldr	r3, [r3, #0]
 80225bc:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80225c0:	681b      	ldr	r3, [r3, #0]
 80225c2:	687a      	ldr	r2, [r7, #4]
 80225c4:	6812      	ldr	r2, [r2, #0]
 80225c6:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80225ca:	f043 0301 	orr.w	r3, r3, #1
 80225ce:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80225d0:	687b      	ldr	r3, [r7, #4]
 80225d2:	6a1b      	ldr	r3, [r3, #32]
 80225d4:	2b00      	cmp	r3, #0
 80225d6:	d005      	beq.n	80225e4 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80225d8:	4b04      	ldr	r3, [pc, #16]	; (80225ec <HAL_PCD_SuspendCallback+0x48>)
 80225da:	691b      	ldr	r3, [r3, #16]
 80225dc:	4a03      	ldr	r2, [pc, #12]	; (80225ec <HAL_PCD_SuspendCallback+0x48>)
 80225de:	f043 0306 	orr.w	r3, r3, #6
 80225e2:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 80225e4:	bf00      	nop
 80225e6:	3708      	adds	r7, #8
 80225e8:	46bd      	mov	sp, r7
 80225ea:	bd80      	pop	{r7, pc}
 80225ec:	e000ed00 	.word	0xe000ed00

080225f0 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80225f0:	b580      	push	{r7, lr}
 80225f2:	b082      	sub	sp, #8
 80225f4:	af00      	add	r7, sp, #0
 80225f6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80225f8:	687b      	ldr	r3, [r7, #4]
 80225fa:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80225fe:	4618      	mov	r0, r3
 8022600:	f7fe fe0b 	bl	802121a <USBD_LL_Resume>
}
 8022604:	bf00      	nop
 8022606:	3708      	adds	r7, #8
 8022608:	46bd      	mov	sp, r7
 802260a:	bd80      	pop	{r7, pc}

0802260c <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 802260c:	b580      	push	{r7, lr}
 802260e:	b082      	sub	sp, #8
 8022610:	af00      	add	r7, sp, #0
 8022612:	6078      	str	r0, [r7, #4]
 8022614:	460b      	mov	r3, r1
 8022616:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8022618:	687b      	ldr	r3, [r7, #4]
 802261a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 802261e:	78fa      	ldrb	r2, [r7, #3]
 8022620:	4611      	mov	r1, r2
 8022622:	4618      	mov	r0, r3
 8022624:	f7fe fe59 	bl	80212da <USBD_LL_IsoOUTIncomplete>
}
 8022628:	bf00      	nop
 802262a:	3708      	adds	r7, #8
 802262c:	46bd      	mov	sp, r7
 802262e:	bd80      	pop	{r7, pc}

08022630 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8022630:	b580      	push	{r7, lr}
 8022632:	b082      	sub	sp, #8
 8022634:	af00      	add	r7, sp, #0
 8022636:	6078      	str	r0, [r7, #4]
 8022638:	460b      	mov	r3, r1
 802263a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 802263c:	687b      	ldr	r3, [r7, #4]
 802263e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8022642:	78fa      	ldrb	r2, [r7, #3]
 8022644:	4611      	mov	r1, r2
 8022646:	4618      	mov	r0, r3
 8022648:	f7fe fe21 	bl	802128e <USBD_LL_IsoINIncomplete>
}
 802264c:	bf00      	nop
 802264e:	3708      	adds	r7, #8
 8022650:	46bd      	mov	sp, r7
 8022652:	bd80      	pop	{r7, pc}

08022654 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8022654:	b580      	push	{r7, lr}
 8022656:	b082      	sub	sp, #8
 8022658:	af00      	add	r7, sp, #0
 802265a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 802265c:	687b      	ldr	r3, [r7, #4]
 802265e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8022662:	4618      	mov	r0, r3
 8022664:	f7fe fe5f 	bl	8021326 <USBD_LL_DevConnected>
}
 8022668:	bf00      	nop
 802266a:	3708      	adds	r7, #8
 802266c:	46bd      	mov	sp, r7
 802266e:	bd80      	pop	{r7, pc}

08022670 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8022670:	b580      	push	{r7, lr}
 8022672:	b082      	sub	sp, #8
 8022674:	af00      	add	r7, sp, #0
 8022676:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8022678:	687b      	ldr	r3, [r7, #4]
 802267a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 802267e:	4618      	mov	r0, r3
 8022680:	f7fe fe5c 	bl	802133c <USBD_LL_DevDisconnected>
}
 8022684:	bf00      	nop
 8022686:	3708      	adds	r7, #8
 8022688:	46bd      	mov	sp, r7
 802268a:	bd80      	pop	{r7, pc}

0802268c <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 802268c:	b580      	push	{r7, lr}
 802268e:	b082      	sub	sp, #8
 8022690:	af00      	add	r7, sp, #0
 8022692:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8022694:	687b      	ldr	r3, [r7, #4]
 8022696:	781b      	ldrb	r3, [r3, #0]
 8022698:	2b00      	cmp	r3, #0
 802269a:	d13c      	bne.n	8022716 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 802269c:	4a20      	ldr	r2, [pc, #128]	; (8022720 <USBD_LL_Init+0x94>)
 802269e:	687b      	ldr	r3, [r7, #4]
 80226a0:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 80226a4:	687b      	ldr	r3, [r7, #4]
 80226a6:	4a1e      	ldr	r2, [pc, #120]	; (8022720 <USBD_LL_Init+0x94>)
 80226a8:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80226ac:	4b1c      	ldr	r3, [pc, #112]	; (8022720 <USBD_LL_Init+0x94>)
 80226ae:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80226b2:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 80226b4:	4b1a      	ldr	r3, [pc, #104]	; (8022720 <USBD_LL_Init+0x94>)
 80226b6:	2206      	movs	r2, #6
 80226b8:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80226ba:	4b19      	ldr	r3, [pc, #100]	; (8022720 <USBD_LL_Init+0x94>)
 80226bc:	2202      	movs	r2, #2
 80226be:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80226c0:	4b17      	ldr	r3, [pc, #92]	; (8022720 <USBD_LL_Init+0x94>)
 80226c2:	2200      	movs	r2, #0
 80226c4:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80226c6:	4b16      	ldr	r3, [pc, #88]	; (8022720 <USBD_LL_Init+0x94>)
 80226c8:	2202      	movs	r2, #2
 80226ca:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 80226cc:	4b14      	ldr	r3, [pc, #80]	; (8022720 <USBD_LL_Init+0x94>)
 80226ce:	2200      	movs	r2, #0
 80226d0:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80226d2:	4b13      	ldr	r3, [pc, #76]	; (8022720 <USBD_LL_Init+0x94>)
 80226d4:	2200      	movs	r2, #0
 80226d6:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80226d8:	4b11      	ldr	r3, [pc, #68]	; (8022720 <USBD_LL_Init+0x94>)
 80226da:	2200      	movs	r2, #0
 80226dc:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 80226de:	4b10      	ldr	r3, [pc, #64]	; (8022720 <USBD_LL_Init+0x94>)
 80226e0:	2200      	movs	r2, #0
 80226e2:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80226e4:	4b0e      	ldr	r3, [pc, #56]	; (8022720 <USBD_LL_Init+0x94>)
 80226e6:	2200      	movs	r2, #0
 80226e8:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80226ea:	480d      	ldr	r0, [pc, #52]	; (8022720 <USBD_LL_Init+0x94>)
 80226ec:	f7f7 fa15 	bl	8019b1a <HAL_PCD_Init>
 80226f0:	4603      	mov	r3, r0
 80226f2:	2b00      	cmp	r3, #0
 80226f4:	d001      	beq.n	80226fa <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 80226f6:	f7f5 fa85 	bl	8017c04 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 80226fa:	2180      	movs	r1, #128	; 0x80
 80226fc:	4808      	ldr	r0, [pc, #32]	; (8022720 <USBD_LL_Init+0x94>)
 80226fe:	f7f8 fbd4 	bl	801aeaa <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8022702:	2240      	movs	r2, #64	; 0x40
 8022704:	2100      	movs	r1, #0
 8022706:	4806      	ldr	r0, [pc, #24]	; (8022720 <USBD_LL_Init+0x94>)
 8022708:	f7f8 fb88 	bl	801ae1c <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 802270c:	2280      	movs	r2, #128	; 0x80
 802270e:	2101      	movs	r1, #1
 8022710:	4803      	ldr	r0, [pc, #12]	; (8022720 <USBD_LL_Init+0x94>)
 8022712:	f7f8 fb83 	bl	801ae1c <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8022716:	2300      	movs	r3, #0
}
 8022718:	4618      	mov	r0, r3
 802271a:	3708      	adds	r7, #8
 802271c:	46bd      	mov	sp, r7
 802271e:	bd80      	pop	{r7, pc}
 8022720:	2000710c 	.word	0x2000710c

08022724 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8022724:	b580      	push	{r7, lr}
 8022726:	b084      	sub	sp, #16
 8022728:	af00      	add	r7, sp, #0
 802272a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 802272c:	2300      	movs	r3, #0
 802272e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8022730:	2300      	movs	r3, #0
 8022732:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8022734:	687b      	ldr	r3, [r7, #4]
 8022736:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 802273a:	4618      	mov	r0, r3
 802273c:	f7f7 fb11 	bl	8019d62 <HAL_PCD_Start>
 8022740:	4603      	mov	r3, r0
 8022742:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8022744:	7bfb      	ldrb	r3, [r7, #15]
 8022746:	4618      	mov	r0, r3
 8022748:	f000 f9b0 	bl	8022aac <USBD_Get_USB_Status>
 802274c:	4603      	mov	r3, r0
 802274e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8022750:	7bbb      	ldrb	r3, [r7, #14]
}
 8022752:	4618      	mov	r0, r3
 8022754:	3710      	adds	r7, #16
 8022756:	46bd      	mov	sp, r7
 8022758:	bd80      	pop	{r7, pc}

0802275a <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 802275a:	b580      	push	{r7, lr}
 802275c:	b084      	sub	sp, #16
 802275e:	af00      	add	r7, sp, #0
 8022760:	6078      	str	r0, [r7, #4]
 8022762:	4608      	mov	r0, r1
 8022764:	4611      	mov	r1, r2
 8022766:	461a      	mov	r2, r3
 8022768:	4603      	mov	r3, r0
 802276a:	70fb      	strb	r3, [r7, #3]
 802276c:	460b      	mov	r3, r1
 802276e:	70bb      	strb	r3, [r7, #2]
 8022770:	4613      	mov	r3, r2
 8022772:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8022774:	2300      	movs	r3, #0
 8022776:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8022778:	2300      	movs	r3, #0
 802277a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 802277c:	687b      	ldr	r3, [r7, #4]
 802277e:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8022782:	78bb      	ldrb	r3, [r7, #2]
 8022784:	883a      	ldrh	r2, [r7, #0]
 8022786:	78f9      	ldrb	r1, [r7, #3]
 8022788:	f7f7 ff22 	bl	801a5d0 <HAL_PCD_EP_Open>
 802278c:	4603      	mov	r3, r0
 802278e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8022790:	7bfb      	ldrb	r3, [r7, #15]
 8022792:	4618      	mov	r0, r3
 8022794:	f000 f98a 	bl	8022aac <USBD_Get_USB_Status>
 8022798:	4603      	mov	r3, r0
 802279a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 802279c:	7bbb      	ldrb	r3, [r7, #14]
}
 802279e:	4618      	mov	r0, r3
 80227a0:	3710      	adds	r7, #16
 80227a2:	46bd      	mov	sp, r7
 80227a4:	bd80      	pop	{r7, pc}

080227a6 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80227a6:	b580      	push	{r7, lr}
 80227a8:	b084      	sub	sp, #16
 80227aa:	af00      	add	r7, sp, #0
 80227ac:	6078      	str	r0, [r7, #4]
 80227ae:	460b      	mov	r3, r1
 80227b0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80227b2:	2300      	movs	r3, #0
 80227b4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80227b6:	2300      	movs	r3, #0
 80227b8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80227ba:	687b      	ldr	r3, [r7, #4]
 80227bc:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80227c0:	78fa      	ldrb	r2, [r7, #3]
 80227c2:	4611      	mov	r1, r2
 80227c4:	4618      	mov	r0, r3
 80227c6:	f7f7 ff6b 	bl	801a6a0 <HAL_PCD_EP_Close>
 80227ca:	4603      	mov	r3, r0
 80227cc:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80227ce:	7bfb      	ldrb	r3, [r7, #15]
 80227d0:	4618      	mov	r0, r3
 80227d2:	f000 f96b 	bl	8022aac <USBD_Get_USB_Status>
 80227d6:	4603      	mov	r3, r0
 80227d8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80227da:	7bbb      	ldrb	r3, [r7, #14]
}
 80227dc:	4618      	mov	r0, r3
 80227de:	3710      	adds	r7, #16
 80227e0:	46bd      	mov	sp, r7
 80227e2:	bd80      	pop	{r7, pc}

080227e4 <USBD_LL_FlushEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_FlushEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80227e4:	b580      	push	{r7, lr}
 80227e6:	b084      	sub	sp, #16
 80227e8:	af00      	add	r7, sp, #0
 80227ea:	6078      	str	r0, [r7, #4]
 80227ec:	460b      	mov	r3, r1
 80227ee:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80227f0:	2300      	movs	r3, #0
 80227f2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80227f4:	2300      	movs	r3, #0
 80227f6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Flush(pdev->pData, ep_addr);
 80227f8:	687b      	ldr	r3, [r7, #4]
 80227fa:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80227fe:	78fa      	ldrb	r2, [r7, #3]
 8022800:	4611      	mov	r1, r2
 8022802:	4618      	mov	r0, r3
 8022804:	f7f8 f8fd 	bl	801aa02 <HAL_PCD_EP_Flush>
 8022808:	4603      	mov	r3, r0
 802280a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 802280c:	7bfb      	ldrb	r3, [r7, #15]
 802280e:	4618      	mov	r0, r3
 8022810:	f000 f94c 	bl	8022aac <USBD_Get_USB_Status>
 8022814:	4603      	mov	r3, r0
 8022816:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8022818:	7bbb      	ldrb	r3, [r7, #14]
}
 802281a:	4618      	mov	r0, r3
 802281c:	3710      	adds	r7, #16
 802281e:	46bd      	mov	sp, r7
 8022820:	bd80      	pop	{r7, pc}

08022822 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8022822:	b580      	push	{r7, lr}
 8022824:	b084      	sub	sp, #16
 8022826:	af00      	add	r7, sp, #0
 8022828:	6078      	str	r0, [r7, #4]
 802282a:	460b      	mov	r3, r1
 802282c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 802282e:	2300      	movs	r3, #0
 8022830:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8022832:	2300      	movs	r3, #0
 8022834:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8022836:	687b      	ldr	r3, [r7, #4]
 8022838:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 802283c:	78fa      	ldrb	r2, [r7, #3]
 802283e:	4611      	mov	r1, r2
 8022840:	4618      	mov	r0, r3
 8022842:	f7f8 f824 	bl	801a88e <HAL_PCD_EP_SetStall>
 8022846:	4603      	mov	r3, r0
 8022848:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 802284a:	7bfb      	ldrb	r3, [r7, #15]
 802284c:	4618      	mov	r0, r3
 802284e:	f000 f92d 	bl	8022aac <USBD_Get_USB_Status>
 8022852:	4603      	mov	r3, r0
 8022854:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8022856:	7bbb      	ldrb	r3, [r7, #14]
}
 8022858:	4618      	mov	r0, r3
 802285a:	3710      	adds	r7, #16
 802285c:	46bd      	mov	sp, r7
 802285e:	bd80      	pop	{r7, pc}

08022860 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8022860:	b580      	push	{r7, lr}
 8022862:	b084      	sub	sp, #16
 8022864:	af00      	add	r7, sp, #0
 8022866:	6078      	str	r0, [r7, #4]
 8022868:	460b      	mov	r3, r1
 802286a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 802286c:	2300      	movs	r3, #0
 802286e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8022870:	2300      	movs	r3, #0
 8022872:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8022874:	687b      	ldr	r3, [r7, #4]
 8022876:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 802287a:	78fa      	ldrb	r2, [r7, #3]
 802287c:	4611      	mov	r1, r2
 802287e:	4618      	mov	r0, r3
 8022880:	f7f8 f869 	bl	801a956 <HAL_PCD_EP_ClrStall>
 8022884:	4603      	mov	r3, r0
 8022886:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8022888:	7bfb      	ldrb	r3, [r7, #15]
 802288a:	4618      	mov	r0, r3
 802288c:	f000 f90e 	bl	8022aac <USBD_Get_USB_Status>
 8022890:	4603      	mov	r3, r0
 8022892:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8022894:	7bbb      	ldrb	r3, [r7, #14]
}
 8022896:	4618      	mov	r0, r3
 8022898:	3710      	adds	r7, #16
 802289a:	46bd      	mov	sp, r7
 802289c:	bd80      	pop	{r7, pc}

0802289e <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 802289e:	b480      	push	{r7}
 80228a0:	b085      	sub	sp, #20
 80228a2:	af00      	add	r7, sp, #0
 80228a4:	6078      	str	r0, [r7, #4]
 80228a6:	460b      	mov	r3, r1
 80228a8:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80228aa:	687b      	ldr	r3, [r7, #4]
 80228ac:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80228b0:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 80228b2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80228b6:	2b00      	cmp	r3, #0
 80228b8:	da0b      	bge.n	80228d2 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 80228ba:	78fb      	ldrb	r3, [r7, #3]
 80228bc:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80228c0:	68f9      	ldr	r1, [r7, #12]
 80228c2:	4613      	mov	r3, r2
 80228c4:	00db      	lsls	r3, r3, #3
 80228c6:	1a9b      	subs	r3, r3, r2
 80228c8:	009b      	lsls	r3, r3, #2
 80228ca:	440b      	add	r3, r1
 80228cc:	333e      	adds	r3, #62	; 0x3e
 80228ce:	781b      	ldrb	r3, [r3, #0]
 80228d0:	e00b      	b.n	80228ea <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 80228d2:	78fb      	ldrb	r3, [r7, #3]
 80228d4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80228d8:	68f9      	ldr	r1, [r7, #12]
 80228da:	4613      	mov	r3, r2
 80228dc:	00db      	lsls	r3, r3, #3
 80228de:	1a9b      	subs	r3, r3, r2
 80228e0:	009b      	lsls	r3, r3, #2
 80228e2:	440b      	add	r3, r1
 80228e4:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80228e8:	781b      	ldrb	r3, [r3, #0]
  }
}
 80228ea:	4618      	mov	r0, r3
 80228ec:	3714      	adds	r7, #20
 80228ee:	46bd      	mov	sp, r7
 80228f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80228f4:	4770      	bx	lr

080228f6 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 80228f6:	b580      	push	{r7, lr}
 80228f8:	b084      	sub	sp, #16
 80228fa:	af00      	add	r7, sp, #0
 80228fc:	6078      	str	r0, [r7, #4]
 80228fe:	460b      	mov	r3, r1
 8022900:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8022902:	2300      	movs	r3, #0
 8022904:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8022906:	2300      	movs	r3, #0
 8022908:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 802290a:	687b      	ldr	r3, [r7, #4]
 802290c:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8022910:	78fa      	ldrb	r2, [r7, #3]
 8022912:	4611      	mov	r1, r2
 8022914:	4618      	mov	r0, r3
 8022916:	f7f7 fe36 	bl	801a586 <HAL_PCD_SetAddress>
 802291a:	4603      	mov	r3, r0
 802291c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 802291e:	7bfb      	ldrb	r3, [r7, #15]
 8022920:	4618      	mov	r0, r3
 8022922:	f000 f8c3 	bl	8022aac <USBD_Get_USB_Status>
 8022926:	4603      	mov	r3, r0
 8022928:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 802292a:	7bbb      	ldrb	r3, [r7, #14]
}
 802292c:	4618      	mov	r0, r3
 802292e:	3710      	adds	r7, #16
 8022930:	46bd      	mov	sp, r7
 8022932:	bd80      	pop	{r7, pc}

08022934 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8022934:	b580      	push	{r7, lr}
 8022936:	b086      	sub	sp, #24
 8022938:	af00      	add	r7, sp, #0
 802293a:	60f8      	str	r0, [r7, #12]
 802293c:	607a      	str	r2, [r7, #4]
 802293e:	603b      	str	r3, [r7, #0]
 8022940:	460b      	mov	r3, r1
 8022942:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8022944:	2300      	movs	r3, #0
 8022946:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8022948:	2300      	movs	r3, #0
 802294a:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 802294c:	68fb      	ldr	r3, [r7, #12]
 802294e:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8022952:	7af9      	ldrb	r1, [r7, #11]
 8022954:	683b      	ldr	r3, [r7, #0]
 8022956:	687a      	ldr	r2, [r7, #4]
 8022958:	f7f7 ff4f 	bl	801a7fa <HAL_PCD_EP_Transmit>
 802295c:	4603      	mov	r3, r0
 802295e:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8022960:	7dfb      	ldrb	r3, [r7, #23]
 8022962:	4618      	mov	r0, r3
 8022964:	f000 f8a2 	bl	8022aac <USBD_Get_USB_Status>
 8022968:	4603      	mov	r3, r0
 802296a:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 802296c:	7dbb      	ldrb	r3, [r7, #22]
}
 802296e:	4618      	mov	r0, r3
 8022970:	3718      	adds	r7, #24
 8022972:	46bd      	mov	sp, r7
 8022974:	bd80      	pop	{r7, pc}

08022976 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8022976:	b580      	push	{r7, lr}
 8022978:	b086      	sub	sp, #24
 802297a:	af00      	add	r7, sp, #0
 802297c:	60f8      	str	r0, [r7, #12]
 802297e:	607a      	str	r2, [r7, #4]
 8022980:	603b      	str	r3, [r7, #0]
 8022982:	460b      	mov	r3, r1
 8022984:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8022986:	2300      	movs	r3, #0
 8022988:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 802298a:	2300      	movs	r3, #0
 802298c:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 802298e:	68fb      	ldr	r3, [r7, #12]
 8022990:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8022994:	7af9      	ldrb	r1, [r7, #11]
 8022996:	683b      	ldr	r3, [r7, #0]
 8022998:	687a      	ldr	r2, [r7, #4]
 802299a:	f7f7 fecb 	bl	801a734 <HAL_PCD_EP_Receive>
 802299e:	4603      	mov	r3, r0
 80229a0:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80229a2:	7dfb      	ldrb	r3, [r7, #23]
 80229a4:	4618      	mov	r0, r3
 80229a6:	f000 f881 	bl	8022aac <USBD_Get_USB_Status>
 80229aa:	4603      	mov	r3, r0
 80229ac:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80229ae:	7dbb      	ldrb	r3, [r7, #22]
}
 80229b0:	4618      	mov	r0, r3
 80229b2:	3718      	adds	r7, #24
 80229b4:	46bd      	mov	sp, r7
 80229b6:	bd80      	pop	{r7, pc}

080229b8 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80229b8:	b580      	push	{r7, lr}
 80229ba:	b082      	sub	sp, #8
 80229bc:	af00      	add	r7, sp, #0
 80229be:	6078      	str	r0, [r7, #4]
 80229c0:	460b      	mov	r3, r1
 80229c2:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 80229c4:	687b      	ldr	r3, [r7, #4]
 80229c6:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80229ca:	78fa      	ldrb	r2, [r7, #3]
 80229cc:	4611      	mov	r1, r2
 80229ce:	4618      	mov	r0, r3
 80229d0:	f7f7 fefb 	bl	801a7ca <HAL_PCD_EP_GetRxCount>
 80229d4:	4603      	mov	r3, r0
}
 80229d6:	4618      	mov	r0, r3
 80229d8:	3708      	adds	r7, #8
 80229da:	46bd      	mov	sp, r7
 80229dc:	bd80      	pop	{r7, pc}
	...

080229e0 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 80229e0:	b580      	push	{r7, lr}
 80229e2:	b082      	sub	sp, #8
 80229e4:	af00      	add	r7, sp, #0
 80229e6:	6078      	str	r0, [r7, #4]
 80229e8:	460b      	mov	r3, r1
 80229ea:	70fb      	strb	r3, [r7, #3]
  switch (msg)
 80229ec:	78fb      	ldrb	r3, [r7, #3]
 80229ee:	2b00      	cmp	r3, #0
 80229f0:	d002      	beq.n	80229f8 <HAL_PCDEx_LPM_Callback+0x18>
 80229f2:	2b01      	cmp	r3, #1
 80229f4:	d01f      	beq.n	8022a36 <HAL_PCDEx_LPM_Callback+0x56>
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
}
 80229f6:	e03b      	b.n	8022a70 <HAL_PCDEx_LPM_Callback+0x90>
    if (hpcd->Init.low_power_enable)
 80229f8:	687b      	ldr	r3, [r7, #4]
 80229fa:	6a1b      	ldr	r3, [r3, #32]
 80229fc:	2b00      	cmp	r3, #0
 80229fe:	d007      	beq.n	8022a10 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClock_Config();
 8022a00:	f7f4 fc96 	bl	8017330 <SystemClock_Config>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8022a04:	4b1c      	ldr	r3, [pc, #112]	; (8022a78 <HAL_PCDEx_LPM_Callback+0x98>)
 8022a06:	691b      	ldr	r3, [r3, #16]
 8022a08:	4a1b      	ldr	r2, [pc, #108]	; (8022a78 <HAL_PCDEx_LPM_Callback+0x98>)
 8022a0a:	f023 0306 	bic.w	r3, r3, #6
 8022a0e:	6113      	str	r3, [r2, #16]
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 8022a10:	687b      	ldr	r3, [r7, #4]
 8022a12:	681b      	ldr	r3, [r3, #0]
 8022a14:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8022a18:	681b      	ldr	r3, [r3, #0]
 8022a1a:	687a      	ldr	r2, [r7, #4]
 8022a1c:	6812      	ldr	r2, [r2, #0]
 8022a1e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8022a22:	f023 0301 	bic.w	r3, r3, #1
 8022a26:	6013      	str	r3, [r2, #0]
    USBD_LL_Resume(hpcd->pData);
 8022a28:	687b      	ldr	r3, [r7, #4]
 8022a2a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8022a2e:	4618      	mov	r0, r3
 8022a30:	f7fe fbf3 	bl	802121a <USBD_LL_Resume>
    break;
 8022a34:	e01c      	b.n	8022a70 <HAL_PCDEx_LPM_Callback+0x90>
    __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8022a36:	687b      	ldr	r3, [r7, #4]
 8022a38:	681b      	ldr	r3, [r3, #0]
 8022a3a:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8022a3e:	681b      	ldr	r3, [r3, #0]
 8022a40:	687a      	ldr	r2, [r7, #4]
 8022a42:	6812      	ldr	r2, [r2, #0]
 8022a44:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8022a48:	f043 0301 	orr.w	r3, r3, #1
 8022a4c:	6013      	str	r3, [r2, #0]
    USBD_LL_Suspend(hpcd->pData);
 8022a4e:	687b      	ldr	r3, [r7, #4]
 8022a50:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8022a54:	4618      	mov	r0, r3
 8022a56:	f7fe fbca 	bl	80211ee <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 8022a5a:	687b      	ldr	r3, [r7, #4]
 8022a5c:	6a1b      	ldr	r3, [r3, #32]
 8022a5e:	2b00      	cmp	r3, #0
 8022a60:	d005      	beq.n	8022a6e <HAL_PCDEx_LPM_Callback+0x8e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8022a62:	4b05      	ldr	r3, [pc, #20]	; (8022a78 <HAL_PCDEx_LPM_Callback+0x98>)
 8022a64:	691b      	ldr	r3, [r3, #16]
 8022a66:	4a04      	ldr	r2, [pc, #16]	; (8022a78 <HAL_PCDEx_LPM_Callback+0x98>)
 8022a68:	f043 0306 	orr.w	r3, r3, #6
 8022a6c:	6113      	str	r3, [r2, #16]
    break;
 8022a6e:	bf00      	nop
}
 8022a70:	bf00      	nop
 8022a72:	3708      	adds	r7, #8
 8022a74:	46bd      	mov	sp, r7
 8022a76:	bd80      	pop	{r7, pc}
 8022a78:	e000ed00 	.word	0xe000ed00

08022a7c <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8022a7c:	b480      	push	{r7}
 8022a7e:	b083      	sub	sp, #12
 8022a80:	af00      	add	r7, sp, #0
 8022a82:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_MSC_BOT_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8022a84:	4b03      	ldr	r3, [pc, #12]	; (8022a94 <USBD_static_malloc+0x18>)
}
 8022a86:	4618      	mov	r0, r3
 8022a88:	370c      	adds	r7, #12
 8022a8a:	46bd      	mov	sp, r7
 8022a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022a90:	4770      	bx	lr
 8022a92:	bf00      	nop
 8022a94:	200007b0 	.word	0x200007b0

08022a98 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8022a98:	b480      	push	{r7}
 8022a9a:	b083      	sub	sp, #12
 8022a9c:	af00      	add	r7, sp, #0
 8022a9e:	6078      	str	r0, [r7, #4]

}
 8022aa0:	bf00      	nop
 8022aa2:	370c      	adds	r7, #12
 8022aa4:	46bd      	mov	sp, r7
 8022aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022aaa:	4770      	bx	lr

08022aac <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8022aac:	b480      	push	{r7}
 8022aae:	b085      	sub	sp, #20
 8022ab0:	af00      	add	r7, sp, #0
 8022ab2:	4603      	mov	r3, r0
 8022ab4:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8022ab6:	2300      	movs	r3, #0
 8022ab8:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8022aba:	79fb      	ldrb	r3, [r7, #7]
 8022abc:	2b03      	cmp	r3, #3
 8022abe:	d817      	bhi.n	8022af0 <USBD_Get_USB_Status+0x44>
 8022ac0:	a201      	add	r2, pc, #4	; (adr r2, 8022ac8 <USBD_Get_USB_Status+0x1c>)
 8022ac2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8022ac6:	bf00      	nop
 8022ac8:	08022ad9 	.word	0x08022ad9
 8022acc:	08022adf 	.word	0x08022adf
 8022ad0:	08022ae5 	.word	0x08022ae5
 8022ad4:	08022aeb 	.word	0x08022aeb
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8022ad8:	2300      	movs	r3, #0
 8022ada:	73fb      	strb	r3, [r7, #15]
    break;
 8022adc:	e00b      	b.n	8022af6 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8022ade:	2303      	movs	r3, #3
 8022ae0:	73fb      	strb	r3, [r7, #15]
    break;
 8022ae2:	e008      	b.n	8022af6 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8022ae4:	2301      	movs	r3, #1
 8022ae6:	73fb      	strb	r3, [r7, #15]
    break;
 8022ae8:	e005      	b.n	8022af6 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8022aea:	2303      	movs	r3, #3
 8022aec:	73fb      	strb	r3, [r7, #15]
    break;
 8022aee:	e002      	b.n	8022af6 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8022af0:	2303      	movs	r3, #3
 8022af2:	73fb      	strb	r3, [r7, #15]
    break;
 8022af4:	bf00      	nop
  }
  return usb_status;
 8022af6:	7bfb      	ldrb	r3, [r7, #15]
}
 8022af8:	4618      	mov	r0, r3
 8022afa:	3714      	adds	r7, #20
 8022afc:	46bd      	mov	sp, r7
 8022afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022b02:	4770      	bx	lr

08022b04 <__errno>:
 8022b04:	4b01      	ldr	r3, [pc, #4]	; (8022b0c <__errno+0x8>)
 8022b06:	6818      	ldr	r0, [r3, #0]
 8022b08:	4770      	bx	lr
 8022b0a:	bf00      	nop
 8022b0c:	200006fc 	.word	0x200006fc

08022b10 <__libc_init_array>:
 8022b10:	b570      	push	{r4, r5, r6, lr}
 8022b12:	4d0d      	ldr	r5, [pc, #52]	; (8022b48 <__libc_init_array+0x38>)
 8022b14:	4c0d      	ldr	r4, [pc, #52]	; (8022b4c <__libc_init_array+0x3c>)
 8022b16:	1b64      	subs	r4, r4, r5
 8022b18:	10a4      	asrs	r4, r4, #2
 8022b1a:	2600      	movs	r6, #0
 8022b1c:	42a6      	cmp	r6, r4
 8022b1e:	d109      	bne.n	8022b34 <__libc_init_array+0x24>
 8022b20:	4d0b      	ldr	r5, [pc, #44]	; (8022b50 <__libc_init_array+0x40>)
 8022b22:	4c0c      	ldr	r4, [pc, #48]	; (8022b54 <__libc_init_array+0x44>)
 8022b24:	f000 f906 	bl	8022d34 <_init>
 8022b28:	1b64      	subs	r4, r4, r5
 8022b2a:	10a4      	asrs	r4, r4, #2
 8022b2c:	2600      	movs	r6, #0
 8022b2e:	42a6      	cmp	r6, r4
 8022b30:	d105      	bne.n	8022b3e <__libc_init_array+0x2e>
 8022b32:	bd70      	pop	{r4, r5, r6, pc}
 8022b34:	f855 3b04 	ldr.w	r3, [r5], #4
 8022b38:	4798      	blx	r3
 8022b3a:	3601      	adds	r6, #1
 8022b3c:	e7ee      	b.n	8022b1c <__libc_init_array+0xc>
 8022b3e:	f855 3b04 	ldr.w	r3, [r5], #4
 8022b42:	4798      	blx	r3
 8022b44:	3601      	adds	r6, #1
 8022b46:	e7f2      	b.n	8022b2e <__libc_init_array+0x1e>
 8022b48:	08022d54 	.word	0x08022d54
 8022b4c:	08022d54 	.word	0x08022d54
 8022b50:	08022d54 	.word	0x08022d54
 8022b54:	08022d58 	.word	0x08022d58

08022b58 <malloc>:
 8022b58:	4b02      	ldr	r3, [pc, #8]	; (8022b64 <malloc+0xc>)
 8022b5a:	4601      	mov	r1, r0
 8022b5c:	6818      	ldr	r0, [r3, #0]
 8022b5e:	f000 b871 	b.w	8022c44 <_malloc_r>
 8022b62:	bf00      	nop
 8022b64:	200006fc 	.word	0x200006fc

08022b68 <free>:
 8022b68:	4b02      	ldr	r3, [pc, #8]	; (8022b74 <free+0xc>)
 8022b6a:	4601      	mov	r1, r0
 8022b6c:	6818      	ldr	r0, [r3, #0]
 8022b6e:	f000 b819 	b.w	8022ba4 <_free_r>
 8022b72:	bf00      	nop
 8022b74:	200006fc 	.word	0x200006fc

08022b78 <memcpy>:
 8022b78:	440a      	add	r2, r1
 8022b7a:	4291      	cmp	r1, r2
 8022b7c:	f100 33ff 	add.w	r3, r0, #4294967295
 8022b80:	d100      	bne.n	8022b84 <memcpy+0xc>
 8022b82:	4770      	bx	lr
 8022b84:	b510      	push	{r4, lr}
 8022b86:	f811 4b01 	ldrb.w	r4, [r1], #1
 8022b8a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8022b8e:	4291      	cmp	r1, r2
 8022b90:	d1f9      	bne.n	8022b86 <memcpy+0xe>
 8022b92:	bd10      	pop	{r4, pc}

08022b94 <memset>:
 8022b94:	4402      	add	r2, r0
 8022b96:	4603      	mov	r3, r0
 8022b98:	4293      	cmp	r3, r2
 8022b9a:	d100      	bne.n	8022b9e <memset+0xa>
 8022b9c:	4770      	bx	lr
 8022b9e:	f803 1b01 	strb.w	r1, [r3], #1
 8022ba2:	e7f9      	b.n	8022b98 <memset+0x4>

08022ba4 <_free_r>:
 8022ba4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8022ba6:	2900      	cmp	r1, #0
 8022ba8:	d048      	beq.n	8022c3c <_free_r+0x98>
 8022baa:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8022bae:	9001      	str	r0, [sp, #4]
 8022bb0:	2b00      	cmp	r3, #0
 8022bb2:	f1a1 0404 	sub.w	r4, r1, #4
 8022bb6:	bfb8      	it	lt
 8022bb8:	18e4      	addlt	r4, r4, r3
 8022bba:	f000 f8ad 	bl	8022d18 <__malloc_lock>
 8022bbe:	4a20      	ldr	r2, [pc, #128]	; (8022c40 <_free_r+0x9c>)
 8022bc0:	9801      	ldr	r0, [sp, #4]
 8022bc2:	6813      	ldr	r3, [r2, #0]
 8022bc4:	4615      	mov	r5, r2
 8022bc6:	b933      	cbnz	r3, 8022bd6 <_free_r+0x32>
 8022bc8:	6063      	str	r3, [r4, #4]
 8022bca:	6014      	str	r4, [r2, #0]
 8022bcc:	b003      	add	sp, #12
 8022bce:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8022bd2:	f000 b8a7 	b.w	8022d24 <__malloc_unlock>
 8022bd6:	42a3      	cmp	r3, r4
 8022bd8:	d90b      	bls.n	8022bf2 <_free_r+0x4e>
 8022bda:	6821      	ldr	r1, [r4, #0]
 8022bdc:	1862      	adds	r2, r4, r1
 8022bde:	4293      	cmp	r3, r2
 8022be0:	bf04      	itt	eq
 8022be2:	681a      	ldreq	r2, [r3, #0]
 8022be4:	685b      	ldreq	r3, [r3, #4]
 8022be6:	6063      	str	r3, [r4, #4]
 8022be8:	bf04      	itt	eq
 8022bea:	1852      	addeq	r2, r2, r1
 8022bec:	6022      	streq	r2, [r4, #0]
 8022bee:	602c      	str	r4, [r5, #0]
 8022bf0:	e7ec      	b.n	8022bcc <_free_r+0x28>
 8022bf2:	461a      	mov	r2, r3
 8022bf4:	685b      	ldr	r3, [r3, #4]
 8022bf6:	b10b      	cbz	r3, 8022bfc <_free_r+0x58>
 8022bf8:	42a3      	cmp	r3, r4
 8022bfa:	d9fa      	bls.n	8022bf2 <_free_r+0x4e>
 8022bfc:	6811      	ldr	r1, [r2, #0]
 8022bfe:	1855      	adds	r5, r2, r1
 8022c00:	42a5      	cmp	r5, r4
 8022c02:	d10b      	bne.n	8022c1c <_free_r+0x78>
 8022c04:	6824      	ldr	r4, [r4, #0]
 8022c06:	4421      	add	r1, r4
 8022c08:	1854      	adds	r4, r2, r1
 8022c0a:	42a3      	cmp	r3, r4
 8022c0c:	6011      	str	r1, [r2, #0]
 8022c0e:	d1dd      	bne.n	8022bcc <_free_r+0x28>
 8022c10:	681c      	ldr	r4, [r3, #0]
 8022c12:	685b      	ldr	r3, [r3, #4]
 8022c14:	6053      	str	r3, [r2, #4]
 8022c16:	4421      	add	r1, r4
 8022c18:	6011      	str	r1, [r2, #0]
 8022c1a:	e7d7      	b.n	8022bcc <_free_r+0x28>
 8022c1c:	d902      	bls.n	8022c24 <_free_r+0x80>
 8022c1e:	230c      	movs	r3, #12
 8022c20:	6003      	str	r3, [r0, #0]
 8022c22:	e7d3      	b.n	8022bcc <_free_r+0x28>
 8022c24:	6825      	ldr	r5, [r4, #0]
 8022c26:	1961      	adds	r1, r4, r5
 8022c28:	428b      	cmp	r3, r1
 8022c2a:	bf04      	itt	eq
 8022c2c:	6819      	ldreq	r1, [r3, #0]
 8022c2e:	685b      	ldreq	r3, [r3, #4]
 8022c30:	6063      	str	r3, [r4, #4]
 8022c32:	bf04      	itt	eq
 8022c34:	1949      	addeq	r1, r1, r5
 8022c36:	6021      	streq	r1, [r4, #0]
 8022c38:	6054      	str	r4, [r2, #4]
 8022c3a:	e7c7      	b.n	8022bcc <_free_r+0x28>
 8022c3c:	b003      	add	sp, #12
 8022c3e:	bd30      	pop	{r4, r5, pc}
 8022c40:	20000a28 	.word	0x20000a28

08022c44 <_malloc_r>:
 8022c44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8022c46:	1ccd      	adds	r5, r1, #3
 8022c48:	f025 0503 	bic.w	r5, r5, #3
 8022c4c:	3508      	adds	r5, #8
 8022c4e:	2d0c      	cmp	r5, #12
 8022c50:	bf38      	it	cc
 8022c52:	250c      	movcc	r5, #12
 8022c54:	2d00      	cmp	r5, #0
 8022c56:	4606      	mov	r6, r0
 8022c58:	db01      	blt.n	8022c5e <_malloc_r+0x1a>
 8022c5a:	42a9      	cmp	r1, r5
 8022c5c:	d903      	bls.n	8022c66 <_malloc_r+0x22>
 8022c5e:	230c      	movs	r3, #12
 8022c60:	6033      	str	r3, [r6, #0]
 8022c62:	2000      	movs	r0, #0
 8022c64:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8022c66:	f000 f857 	bl	8022d18 <__malloc_lock>
 8022c6a:	4921      	ldr	r1, [pc, #132]	; (8022cf0 <_malloc_r+0xac>)
 8022c6c:	680a      	ldr	r2, [r1, #0]
 8022c6e:	4614      	mov	r4, r2
 8022c70:	b99c      	cbnz	r4, 8022c9a <_malloc_r+0x56>
 8022c72:	4f20      	ldr	r7, [pc, #128]	; (8022cf4 <_malloc_r+0xb0>)
 8022c74:	683b      	ldr	r3, [r7, #0]
 8022c76:	b923      	cbnz	r3, 8022c82 <_malloc_r+0x3e>
 8022c78:	4621      	mov	r1, r4
 8022c7a:	4630      	mov	r0, r6
 8022c7c:	f000 f83c 	bl	8022cf8 <_sbrk_r>
 8022c80:	6038      	str	r0, [r7, #0]
 8022c82:	4629      	mov	r1, r5
 8022c84:	4630      	mov	r0, r6
 8022c86:	f000 f837 	bl	8022cf8 <_sbrk_r>
 8022c8a:	1c43      	adds	r3, r0, #1
 8022c8c:	d123      	bne.n	8022cd6 <_malloc_r+0x92>
 8022c8e:	230c      	movs	r3, #12
 8022c90:	6033      	str	r3, [r6, #0]
 8022c92:	4630      	mov	r0, r6
 8022c94:	f000 f846 	bl	8022d24 <__malloc_unlock>
 8022c98:	e7e3      	b.n	8022c62 <_malloc_r+0x1e>
 8022c9a:	6823      	ldr	r3, [r4, #0]
 8022c9c:	1b5b      	subs	r3, r3, r5
 8022c9e:	d417      	bmi.n	8022cd0 <_malloc_r+0x8c>
 8022ca0:	2b0b      	cmp	r3, #11
 8022ca2:	d903      	bls.n	8022cac <_malloc_r+0x68>
 8022ca4:	6023      	str	r3, [r4, #0]
 8022ca6:	441c      	add	r4, r3
 8022ca8:	6025      	str	r5, [r4, #0]
 8022caa:	e004      	b.n	8022cb6 <_malloc_r+0x72>
 8022cac:	6863      	ldr	r3, [r4, #4]
 8022cae:	42a2      	cmp	r2, r4
 8022cb0:	bf0c      	ite	eq
 8022cb2:	600b      	streq	r3, [r1, #0]
 8022cb4:	6053      	strne	r3, [r2, #4]
 8022cb6:	4630      	mov	r0, r6
 8022cb8:	f000 f834 	bl	8022d24 <__malloc_unlock>
 8022cbc:	f104 000b 	add.w	r0, r4, #11
 8022cc0:	1d23      	adds	r3, r4, #4
 8022cc2:	f020 0007 	bic.w	r0, r0, #7
 8022cc6:	1ac2      	subs	r2, r0, r3
 8022cc8:	d0cc      	beq.n	8022c64 <_malloc_r+0x20>
 8022cca:	1a1b      	subs	r3, r3, r0
 8022ccc:	50a3      	str	r3, [r4, r2]
 8022cce:	e7c9      	b.n	8022c64 <_malloc_r+0x20>
 8022cd0:	4622      	mov	r2, r4
 8022cd2:	6864      	ldr	r4, [r4, #4]
 8022cd4:	e7cc      	b.n	8022c70 <_malloc_r+0x2c>
 8022cd6:	1cc4      	adds	r4, r0, #3
 8022cd8:	f024 0403 	bic.w	r4, r4, #3
 8022cdc:	42a0      	cmp	r0, r4
 8022cde:	d0e3      	beq.n	8022ca8 <_malloc_r+0x64>
 8022ce0:	1a21      	subs	r1, r4, r0
 8022ce2:	4630      	mov	r0, r6
 8022ce4:	f000 f808 	bl	8022cf8 <_sbrk_r>
 8022ce8:	3001      	adds	r0, #1
 8022cea:	d1dd      	bne.n	8022ca8 <_malloc_r+0x64>
 8022cec:	e7cf      	b.n	8022c8e <_malloc_r+0x4a>
 8022cee:	bf00      	nop
 8022cf0:	20000a28 	.word	0x20000a28
 8022cf4:	20000a2c 	.word	0x20000a2c

08022cf8 <_sbrk_r>:
 8022cf8:	b538      	push	{r3, r4, r5, lr}
 8022cfa:	4d06      	ldr	r5, [pc, #24]	; (8022d14 <_sbrk_r+0x1c>)
 8022cfc:	2300      	movs	r3, #0
 8022cfe:	4604      	mov	r4, r0
 8022d00:	4608      	mov	r0, r1
 8022d02:	602b      	str	r3, [r5, #0]
 8022d04:	f7f5 fa2e 	bl	8018164 <_sbrk>
 8022d08:	1c43      	adds	r3, r0, #1
 8022d0a:	d102      	bne.n	8022d12 <_sbrk_r+0x1a>
 8022d0c:	682b      	ldr	r3, [r5, #0]
 8022d0e:	b103      	cbz	r3, 8022d12 <_sbrk_r+0x1a>
 8022d10:	6023      	str	r3, [r4, #0]
 8022d12:	bd38      	pop	{r3, r4, r5, pc}
 8022d14:	20007514 	.word	0x20007514

08022d18 <__malloc_lock>:
 8022d18:	4801      	ldr	r0, [pc, #4]	; (8022d20 <__malloc_lock+0x8>)
 8022d1a:	f000 b809 	b.w	8022d30 <__retarget_lock_acquire_recursive>
 8022d1e:	bf00      	nop
 8022d20:	2000751c 	.word	0x2000751c

08022d24 <__malloc_unlock>:
 8022d24:	4801      	ldr	r0, [pc, #4]	; (8022d2c <__malloc_unlock+0x8>)
 8022d26:	f000 b804 	b.w	8022d32 <__retarget_lock_release_recursive>
 8022d2a:	bf00      	nop
 8022d2c:	2000751c 	.word	0x2000751c

08022d30 <__retarget_lock_acquire_recursive>:
 8022d30:	4770      	bx	lr

08022d32 <__retarget_lock_release_recursive>:
 8022d32:	4770      	bx	lr

08022d34 <_init>:
 8022d34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8022d36:	bf00      	nop
 8022d38:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8022d3a:	bc08      	pop	{r3}
 8022d3c:	469e      	mov	lr, r3
 8022d3e:	4770      	bx	lr

08022d40 <_fini>:
 8022d40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8022d42:	bf00      	nop
 8022d44:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8022d46:	bc08      	pop	{r3}
 8022d48:	469e      	mov	lr, r3
 8022d4a:	4770      	bx	lr
