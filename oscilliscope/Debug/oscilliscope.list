
oscilliscope.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00016e10  0800c000  0800c000  0001c000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000021c8  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08022e10  08022e10  00040760  2**0
                  CONTENTS
  4 .ARM          00000008  08022e10  08022e10  00032e10  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08022e18  08022e18  00040760  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08022e18  08022e18  00032e18  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08022e1c  08022e1c  00032e1c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000760  20000000  08022e20  00040000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00006e24  20000760  08023580  00040760  2**2
                  ALLOC
 10 ._user_heap_stack 00000e04  20007584  08023580  00047584  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00040760  2**0
                  CONTENTS, READONLY
 12 .debug_info   0003acc9  00000000  00000000  00040790  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00006837  00000000  00000000  0007b459  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001d60  00000000  00000000  00081c90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001a80  00000000  00000000  000839f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002aad1  00000000  00000000  00085470  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00029fb4  00000000  00000000  000aff41  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e516f  00000000  00000000  000d9ef5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001bf064  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000793c  00000000  00000000  001bf0b8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800c000 <__do_global_dtors_aux>:
 800c000:	b510      	push	{r4, lr}
 800c002:	4c05      	ldr	r4, [pc, #20]	; (800c018 <__do_global_dtors_aux+0x18>)
 800c004:	7823      	ldrb	r3, [r4, #0]
 800c006:	b933      	cbnz	r3, 800c016 <__do_global_dtors_aux+0x16>
 800c008:	4b04      	ldr	r3, [pc, #16]	; (800c01c <__do_global_dtors_aux+0x1c>)
 800c00a:	b113      	cbz	r3, 800c012 <__do_global_dtors_aux+0x12>
 800c00c:	4804      	ldr	r0, [pc, #16]	; (800c020 <__do_global_dtors_aux+0x20>)
 800c00e:	f3af 8000 	nop.w
 800c012:	2301      	movs	r3, #1
 800c014:	7023      	strb	r3, [r4, #0]
 800c016:	bd10      	pop	{r4, pc}
 800c018:	20000760 	.word	0x20000760
 800c01c:	00000000 	.word	0x00000000
 800c020:	08022df8 	.word	0x08022df8

0800c024 <frame_dummy>:
 800c024:	b508      	push	{r3, lr}
 800c026:	4b03      	ldr	r3, [pc, #12]	; (800c034 <frame_dummy+0x10>)
 800c028:	b11b      	cbz	r3, 800c032 <frame_dummy+0xe>
 800c02a:	4903      	ldr	r1, [pc, #12]	; (800c038 <frame_dummy+0x14>)
 800c02c:	4803      	ldr	r0, [pc, #12]	; (800c03c <frame_dummy+0x18>)
 800c02e:	f3af 8000 	nop.w
 800c032:	bd08      	pop	{r3, pc}
 800c034:	00000000 	.word	0x00000000
 800c038:	20000764 	.word	0x20000764
 800c03c:	08022df8 	.word	0x08022df8

0800c040 <strlen>:
 800c040:	4603      	mov	r3, r0
 800c042:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c046:	2a00      	cmp	r2, #0
 800c048:	d1fb      	bne.n	800c042 <strlen+0x2>
 800c04a:	1a18      	subs	r0, r3, r0
 800c04c:	3801      	subs	r0, #1
 800c04e:	4770      	bx	lr

0800c050 <__aeabi_uldivmod>:
 800c050:	b953      	cbnz	r3, 800c068 <__aeabi_uldivmod+0x18>
 800c052:	b94a      	cbnz	r2, 800c068 <__aeabi_uldivmod+0x18>
 800c054:	2900      	cmp	r1, #0
 800c056:	bf08      	it	eq
 800c058:	2800      	cmpeq	r0, #0
 800c05a:	bf1c      	itt	ne
 800c05c:	f04f 31ff 	movne.w	r1, #4294967295
 800c060:	f04f 30ff 	movne.w	r0, #4294967295
 800c064:	f000 b96e 	b.w	800c344 <__aeabi_idiv0>
 800c068:	f1ad 0c08 	sub.w	ip, sp, #8
 800c06c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800c070:	f000 f806 	bl	800c080 <__udivmoddi4>
 800c074:	f8dd e004 	ldr.w	lr, [sp, #4]
 800c078:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800c07c:	b004      	add	sp, #16
 800c07e:	4770      	bx	lr

0800c080 <__udivmoddi4>:
 800c080:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c084:	9d08      	ldr	r5, [sp, #32]
 800c086:	4604      	mov	r4, r0
 800c088:	468c      	mov	ip, r1
 800c08a:	2b00      	cmp	r3, #0
 800c08c:	f040 8083 	bne.w	800c196 <__udivmoddi4+0x116>
 800c090:	428a      	cmp	r2, r1
 800c092:	4617      	mov	r7, r2
 800c094:	d947      	bls.n	800c126 <__udivmoddi4+0xa6>
 800c096:	fab2 f282 	clz	r2, r2
 800c09a:	b142      	cbz	r2, 800c0ae <__udivmoddi4+0x2e>
 800c09c:	f1c2 0020 	rsb	r0, r2, #32
 800c0a0:	fa24 f000 	lsr.w	r0, r4, r0
 800c0a4:	4091      	lsls	r1, r2
 800c0a6:	4097      	lsls	r7, r2
 800c0a8:	ea40 0c01 	orr.w	ip, r0, r1
 800c0ac:	4094      	lsls	r4, r2
 800c0ae:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800c0b2:	0c23      	lsrs	r3, r4, #16
 800c0b4:	fbbc f6f8 	udiv	r6, ip, r8
 800c0b8:	fa1f fe87 	uxth.w	lr, r7
 800c0bc:	fb08 c116 	mls	r1, r8, r6, ip
 800c0c0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800c0c4:	fb06 f10e 	mul.w	r1, r6, lr
 800c0c8:	4299      	cmp	r1, r3
 800c0ca:	d909      	bls.n	800c0e0 <__udivmoddi4+0x60>
 800c0cc:	18fb      	adds	r3, r7, r3
 800c0ce:	f106 30ff 	add.w	r0, r6, #4294967295
 800c0d2:	f080 8119 	bcs.w	800c308 <__udivmoddi4+0x288>
 800c0d6:	4299      	cmp	r1, r3
 800c0d8:	f240 8116 	bls.w	800c308 <__udivmoddi4+0x288>
 800c0dc:	3e02      	subs	r6, #2
 800c0de:	443b      	add	r3, r7
 800c0e0:	1a5b      	subs	r3, r3, r1
 800c0e2:	b2a4      	uxth	r4, r4
 800c0e4:	fbb3 f0f8 	udiv	r0, r3, r8
 800c0e8:	fb08 3310 	mls	r3, r8, r0, r3
 800c0ec:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800c0f0:	fb00 fe0e 	mul.w	lr, r0, lr
 800c0f4:	45a6      	cmp	lr, r4
 800c0f6:	d909      	bls.n	800c10c <__udivmoddi4+0x8c>
 800c0f8:	193c      	adds	r4, r7, r4
 800c0fa:	f100 33ff 	add.w	r3, r0, #4294967295
 800c0fe:	f080 8105 	bcs.w	800c30c <__udivmoddi4+0x28c>
 800c102:	45a6      	cmp	lr, r4
 800c104:	f240 8102 	bls.w	800c30c <__udivmoddi4+0x28c>
 800c108:	3802      	subs	r0, #2
 800c10a:	443c      	add	r4, r7
 800c10c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800c110:	eba4 040e 	sub.w	r4, r4, lr
 800c114:	2600      	movs	r6, #0
 800c116:	b11d      	cbz	r5, 800c120 <__udivmoddi4+0xa0>
 800c118:	40d4      	lsrs	r4, r2
 800c11a:	2300      	movs	r3, #0
 800c11c:	e9c5 4300 	strd	r4, r3, [r5]
 800c120:	4631      	mov	r1, r6
 800c122:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c126:	b902      	cbnz	r2, 800c12a <__udivmoddi4+0xaa>
 800c128:	deff      	udf	#255	; 0xff
 800c12a:	fab2 f282 	clz	r2, r2
 800c12e:	2a00      	cmp	r2, #0
 800c130:	d150      	bne.n	800c1d4 <__udivmoddi4+0x154>
 800c132:	1bcb      	subs	r3, r1, r7
 800c134:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800c138:	fa1f f887 	uxth.w	r8, r7
 800c13c:	2601      	movs	r6, #1
 800c13e:	fbb3 fcfe 	udiv	ip, r3, lr
 800c142:	0c21      	lsrs	r1, r4, #16
 800c144:	fb0e 331c 	mls	r3, lr, ip, r3
 800c148:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800c14c:	fb08 f30c 	mul.w	r3, r8, ip
 800c150:	428b      	cmp	r3, r1
 800c152:	d907      	bls.n	800c164 <__udivmoddi4+0xe4>
 800c154:	1879      	adds	r1, r7, r1
 800c156:	f10c 30ff 	add.w	r0, ip, #4294967295
 800c15a:	d202      	bcs.n	800c162 <__udivmoddi4+0xe2>
 800c15c:	428b      	cmp	r3, r1
 800c15e:	f200 80e9 	bhi.w	800c334 <__udivmoddi4+0x2b4>
 800c162:	4684      	mov	ip, r0
 800c164:	1ac9      	subs	r1, r1, r3
 800c166:	b2a3      	uxth	r3, r4
 800c168:	fbb1 f0fe 	udiv	r0, r1, lr
 800c16c:	fb0e 1110 	mls	r1, lr, r0, r1
 800c170:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 800c174:	fb08 f800 	mul.w	r8, r8, r0
 800c178:	45a0      	cmp	r8, r4
 800c17a:	d907      	bls.n	800c18c <__udivmoddi4+0x10c>
 800c17c:	193c      	adds	r4, r7, r4
 800c17e:	f100 33ff 	add.w	r3, r0, #4294967295
 800c182:	d202      	bcs.n	800c18a <__udivmoddi4+0x10a>
 800c184:	45a0      	cmp	r8, r4
 800c186:	f200 80d9 	bhi.w	800c33c <__udivmoddi4+0x2bc>
 800c18a:	4618      	mov	r0, r3
 800c18c:	eba4 0408 	sub.w	r4, r4, r8
 800c190:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800c194:	e7bf      	b.n	800c116 <__udivmoddi4+0x96>
 800c196:	428b      	cmp	r3, r1
 800c198:	d909      	bls.n	800c1ae <__udivmoddi4+0x12e>
 800c19a:	2d00      	cmp	r5, #0
 800c19c:	f000 80b1 	beq.w	800c302 <__udivmoddi4+0x282>
 800c1a0:	2600      	movs	r6, #0
 800c1a2:	e9c5 0100 	strd	r0, r1, [r5]
 800c1a6:	4630      	mov	r0, r6
 800c1a8:	4631      	mov	r1, r6
 800c1aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c1ae:	fab3 f683 	clz	r6, r3
 800c1b2:	2e00      	cmp	r6, #0
 800c1b4:	d14a      	bne.n	800c24c <__udivmoddi4+0x1cc>
 800c1b6:	428b      	cmp	r3, r1
 800c1b8:	d302      	bcc.n	800c1c0 <__udivmoddi4+0x140>
 800c1ba:	4282      	cmp	r2, r0
 800c1bc:	f200 80b8 	bhi.w	800c330 <__udivmoddi4+0x2b0>
 800c1c0:	1a84      	subs	r4, r0, r2
 800c1c2:	eb61 0103 	sbc.w	r1, r1, r3
 800c1c6:	2001      	movs	r0, #1
 800c1c8:	468c      	mov	ip, r1
 800c1ca:	2d00      	cmp	r5, #0
 800c1cc:	d0a8      	beq.n	800c120 <__udivmoddi4+0xa0>
 800c1ce:	e9c5 4c00 	strd	r4, ip, [r5]
 800c1d2:	e7a5      	b.n	800c120 <__udivmoddi4+0xa0>
 800c1d4:	f1c2 0320 	rsb	r3, r2, #32
 800c1d8:	fa20 f603 	lsr.w	r6, r0, r3
 800c1dc:	4097      	lsls	r7, r2
 800c1de:	fa01 f002 	lsl.w	r0, r1, r2
 800c1e2:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800c1e6:	40d9      	lsrs	r1, r3
 800c1e8:	4330      	orrs	r0, r6
 800c1ea:	0c03      	lsrs	r3, r0, #16
 800c1ec:	fbb1 f6fe 	udiv	r6, r1, lr
 800c1f0:	fa1f f887 	uxth.w	r8, r7
 800c1f4:	fb0e 1116 	mls	r1, lr, r6, r1
 800c1f8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800c1fc:	fb06 f108 	mul.w	r1, r6, r8
 800c200:	4299      	cmp	r1, r3
 800c202:	fa04 f402 	lsl.w	r4, r4, r2
 800c206:	d909      	bls.n	800c21c <__udivmoddi4+0x19c>
 800c208:	18fb      	adds	r3, r7, r3
 800c20a:	f106 3cff 	add.w	ip, r6, #4294967295
 800c20e:	f080 808d 	bcs.w	800c32c <__udivmoddi4+0x2ac>
 800c212:	4299      	cmp	r1, r3
 800c214:	f240 808a 	bls.w	800c32c <__udivmoddi4+0x2ac>
 800c218:	3e02      	subs	r6, #2
 800c21a:	443b      	add	r3, r7
 800c21c:	1a5b      	subs	r3, r3, r1
 800c21e:	b281      	uxth	r1, r0
 800c220:	fbb3 f0fe 	udiv	r0, r3, lr
 800c224:	fb0e 3310 	mls	r3, lr, r0, r3
 800c228:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800c22c:	fb00 f308 	mul.w	r3, r0, r8
 800c230:	428b      	cmp	r3, r1
 800c232:	d907      	bls.n	800c244 <__udivmoddi4+0x1c4>
 800c234:	1879      	adds	r1, r7, r1
 800c236:	f100 3cff 	add.w	ip, r0, #4294967295
 800c23a:	d273      	bcs.n	800c324 <__udivmoddi4+0x2a4>
 800c23c:	428b      	cmp	r3, r1
 800c23e:	d971      	bls.n	800c324 <__udivmoddi4+0x2a4>
 800c240:	3802      	subs	r0, #2
 800c242:	4439      	add	r1, r7
 800c244:	1acb      	subs	r3, r1, r3
 800c246:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800c24a:	e778      	b.n	800c13e <__udivmoddi4+0xbe>
 800c24c:	f1c6 0c20 	rsb	ip, r6, #32
 800c250:	fa03 f406 	lsl.w	r4, r3, r6
 800c254:	fa22 f30c 	lsr.w	r3, r2, ip
 800c258:	431c      	orrs	r4, r3
 800c25a:	fa20 f70c 	lsr.w	r7, r0, ip
 800c25e:	fa01 f306 	lsl.w	r3, r1, r6
 800c262:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 800c266:	fa21 f10c 	lsr.w	r1, r1, ip
 800c26a:	431f      	orrs	r7, r3
 800c26c:	0c3b      	lsrs	r3, r7, #16
 800c26e:	fbb1 f9fe 	udiv	r9, r1, lr
 800c272:	fa1f f884 	uxth.w	r8, r4
 800c276:	fb0e 1119 	mls	r1, lr, r9, r1
 800c27a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800c27e:	fb09 fa08 	mul.w	sl, r9, r8
 800c282:	458a      	cmp	sl, r1
 800c284:	fa02 f206 	lsl.w	r2, r2, r6
 800c288:	fa00 f306 	lsl.w	r3, r0, r6
 800c28c:	d908      	bls.n	800c2a0 <__udivmoddi4+0x220>
 800c28e:	1861      	adds	r1, r4, r1
 800c290:	f109 30ff 	add.w	r0, r9, #4294967295
 800c294:	d248      	bcs.n	800c328 <__udivmoddi4+0x2a8>
 800c296:	458a      	cmp	sl, r1
 800c298:	d946      	bls.n	800c328 <__udivmoddi4+0x2a8>
 800c29a:	f1a9 0902 	sub.w	r9, r9, #2
 800c29e:	4421      	add	r1, r4
 800c2a0:	eba1 010a 	sub.w	r1, r1, sl
 800c2a4:	b2bf      	uxth	r7, r7
 800c2a6:	fbb1 f0fe 	udiv	r0, r1, lr
 800c2aa:	fb0e 1110 	mls	r1, lr, r0, r1
 800c2ae:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800c2b2:	fb00 f808 	mul.w	r8, r0, r8
 800c2b6:	45b8      	cmp	r8, r7
 800c2b8:	d907      	bls.n	800c2ca <__udivmoddi4+0x24a>
 800c2ba:	19e7      	adds	r7, r4, r7
 800c2bc:	f100 31ff 	add.w	r1, r0, #4294967295
 800c2c0:	d22e      	bcs.n	800c320 <__udivmoddi4+0x2a0>
 800c2c2:	45b8      	cmp	r8, r7
 800c2c4:	d92c      	bls.n	800c320 <__udivmoddi4+0x2a0>
 800c2c6:	3802      	subs	r0, #2
 800c2c8:	4427      	add	r7, r4
 800c2ca:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800c2ce:	eba7 0708 	sub.w	r7, r7, r8
 800c2d2:	fba0 8902 	umull	r8, r9, r0, r2
 800c2d6:	454f      	cmp	r7, r9
 800c2d8:	46c6      	mov	lr, r8
 800c2da:	4649      	mov	r1, r9
 800c2dc:	d31a      	bcc.n	800c314 <__udivmoddi4+0x294>
 800c2de:	d017      	beq.n	800c310 <__udivmoddi4+0x290>
 800c2e0:	b15d      	cbz	r5, 800c2fa <__udivmoddi4+0x27a>
 800c2e2:	ebb3 020e 	subs.w	r2, r3, lr
 800c2e6:	eb67 0701 	sbc.w	r7, r7, r1
 800c2ea:	fa07 fc0c 	lsl.w	ip, r7, ip
 800c2ee:	40f2      	lsrs	r2, r6
 800c2f0:	ea4c 0202 	orr.w	r2, ip, r2
 800c2f4:	40f7      	lsrs	r7, r6
 800c2f6:	e9c5 2700 	strd	r2, r7, [r5]
 800c2fa:	2600      	movs	r6, #0
 800c2fc:	4631      	mov	r1, r6
 800c2fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c302:	462e      	mov	r6, r5
 800c304:	4628      	mov	r0, r5
 800c306:	e70b      	b.n	800c120 <__udivmoddi4+0xa0>
 800c308:	4606      	mov	r6, r0
 800c30a:	e6e9      	b.n	800c0e0 <__udivmoddi4+0x60>
 800c30c:	4618      	mov	r0, r3
 800c30e:	e6fd      	b.n	800c10c <__udivmoddi4+0x8c>
 800c310:	4543      	cmp	r3, r8
 800c312:	d2e5      	bcs.n	800c2e0 <__udivmoddi4+0x260>
 800c314:	ebb8 0e02 	subs.w	lr, r8, r2
 800c318:	eb69 0104 	sbc.w	r1, r9, r4
 800c31c:	3801      	subs	r0, #1
 800c31e:	e7df      	b.n	800c2e0 <__udivmoddi4+0x260>
 800c320:	4608      	mov	r0, r1
 800c322:	e7d2      	b.n	800c2ca <__udivmoddi4+0x24a>
 800c324:	4660      	mov	r0, ip
 800c326:	e78d      	b.n	800c244 <__udivmoddi4+0x1c4>
 800c328:	4681      	mov	r9, r0
 800c32a:	e7b9      	b.n	800c2a0 <__udivmoddi4+0x220>
 800c32c:	4666      	mov	r6, ip
 800c32e:	e775      	b.n	800c21c <__udivmoddi4+0x19c>
 800c330:	4630      	mov	r0, r6
 800c332:	e74a      	b.n	800c1ca <__udivmoddi4+0x14a>
 800c334:	f1ac 0c02 	sub.w	ip, ip, #2
 800c338:	4439      	add	r1, r7
 800c33a:	e713      	b.n	800c164 <__udivmoddi4+0xe4>
 800c33c:	3802      	subs	r0, #2
 800c33e:	443c      	add	r4, r7
 800c340:	e724      	b.n	800c18c <__udivmoddi4+0x10c>
 800c342:	bf00      	nop

0800c344 <__aeabi_idiv0>:
 800c344:	4770      	bx	lr
 800c346:	bf00      	nop

0800c348 <BIOS_Info>:

/*******************************************************************************
 Info :  Ӳ���豸��Ϣ
*******************************************************************************/
unsigned BIOS_Info(char Item)
{
 800c348:	b480      	push	{r7}
 800c34a:	b083      	sub	sp, #12
 800c34c:	af00      	add	r7, sp, #0
 800c34e:	4603      	mov	r3, r0
 800c350:	71fb      	strb	r3, [r7, #7]
  switch (Item){
 800c352:	79fb      	ldrb	r3, [r7, #7]
 800c354:	2b00      	cmp	r3, #0
 800c356:	d101      	bne.n	800c35c <BIOS_Info+0x14>
    case CHA_CNT:
    	return /*(u16)DMA_CH_A->CNDTR*/0;
 800c358:	2300      	movs	r3, #0
 800c35a:	e000      	b.n	800c35e <BIOS_Info+0x16>
/*    case SIN_TAB: return (u32)SIN_DATA;
    case TRG_TAB: return (u32)TRG_DATA;
    case SAW_TAB: return (u32)SAW_DATA;    */
    default:
    	return 0;
 800c35c:	2300      	movs	r3, #0
  }
}
 800c35e:	4618      	mov	r0, r3
 800c360:	370c      	adds	r7, #12
 800c362:	46bd      	mov	sp, r7
 800c364:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c368:	4770      	bx	lr
	...

0800c36c <BIOS_Ctrl>:
/*******************************************************************************
 DevCtrl:  Ӳ���豸����
*******************************************************************************/
void BIOS_Ctrl(char Item, unsigned Val)
{
 800c36c:	b580      	push	{r7, lr}
 800c36e:	b088      	sub	sp, #32
 800c370:	af00      	add	r7, sp, #0
 800c372:	4603      	mov	r3, r0
 800c374:	6039      	str	r1, [r7, #0]
 800c376:	71fb      	strb	r3, [r7, #7]
  GPIO_InitTypeDef         GPIO_InitStructure;

  switch (Item){
 800c378:	79fb      	ldrb	r3, [r7, #7]
 800c37a:	2b08      	cmp	r3, #8
 800c37c:	f200 8102 	bhi.w	800c584 <BIOS_Ctrl+0x218>
 800c380:	a201      	add	r2, pc, #4	; (adr r2, 800c388 <BIOS_Ctrl+0x1c>)
 800c382:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c386:	bf00      	nop
 800c388:	0800c4b7 	.word	0x0800c4b7
 800c38c:	0800c4a7 	.word	0x0800c4a7
 800c390:	0800c585 	.word	0x0800c585
 800c394:	0800c585 	.word	0x0800c585
 800c398:	0800c3ad 	.word	0x0800c3ad
 800c39c:	0800c3ef 	.word	0x0800c3ef
 800c3a0:	0800c419 	.word	0x0800c419
 800c3a4:	0800c437 	.word	0x0800c437
 800c3a8:	0800c499 	.word	0x0800c499
    case SMPL_ST: if(Val == DISABLE)
 800c3ac:	683b      	ldr	r3, [r7, #0]
 800c3ae:	2b00      	cmp	r3, #0
 800c3b0:	f000 80ea 	beq.w	800c588 <BIOS_Ctrl+0x21c>
    			  {
                    /*DMA1_Channel1->CCR &= (~ENABLE);*/
                  }
    			  else
    				  if(Val == ENABLE)
 800c3b4:	683b      	ldr	r3, [r7, #0]
 800c3b6:	2b01      	cmp	r3, #1
 800c3b8:	f040 80e6 	bne.w	800c588 <BIOS_Ctrl+0x21c>
    				  {
                   /* DMA1_Channel1->CCR |= ENABLE; */
                    __HAL_ADC_ENABLE(&hadc1);  //ADC1->CR2 |= 0x00000001; //AD_ON
 800c3bc:	4b76      	ldr	r3, [pc, #472]	; (800c598 <BIOS_Ctrl+0x22c>)
 800c3be:	681b      	ldr	r3, [r3, #0]
 800c3c0:	689a      	ldr	r2, [r3, #8]
 800c3c2:	4b75      	ldr	r3, [pc, #468]	; (800c598 <BIOS_Ctrl+0x22c>)
 800c3c4:	681b      	ldr	r3, [r3, #0]
 800c3c6:	f042 0201 	orr.w	r2, r2, #1
 800c3ca:	609a      	str	r2, [r3, #8]
                    __HAL_ADC_ENABLE(&hadc2);  //ADC2->CR2 |= 0x00000001; //AD_ON
 800c3cc:	4b73      	ldr	r3, [pc, #460]	; (800c59c <BIOS_Ctrl+0x230>)
 800c3ce:	681b      	ldr	r3, [r3, #0]
 800c3d0:	689a      	ldr	r2, [r3, #8]
 800c3d2:	4b72      	ldr	r3, [pc, #456]	; (800c59c <BIOS_Ctrl+0x230>)
 800c3d4:	681b      	ldr	r3, [r3, #0]
 800c3d6:	f042 0201 	orr.w	r2, r2, #1
 800c3da:	609a      	str	r2, [r3, #8]
                    __HAL_TIM_ENABLE(&htim1);  /*TIM1->CR1 = 0x0081; */
 800c3dc:	4b70      	ldr	r3, [pc, #448]	; (800c5a0 <BIOS_Ctrl+0x234>)
 800c3de:	681b      	ldr	r3, [r3, #0]
 800c3e0:	681a      	ldr	r2, [r3, #0]
 800c3e2:	4b6f      	ldr	r3, [pc, #444]	; (800c5a0 <BIOS_Ctrl+0x234>)
 800c3e4:	681b      	ldr	r3, [r3, #0]
 800c3e6:	f042 0201 	orr.w	r2, r2, #1
 800c3ea:	601a      	str	r2, [r3, #0]
                    if(Val == INTERLEAVE)
                    {
                      DMA1_Channel1->CCR = 0x3A80;
                    } */
                  }
    			  break;
 800c3ec:	e0cc      	b.n	800c588 <BIOS_Ctrl+0x21c>

    case SMPLTIM:
    			  octim1.Pulse = (Val+1)/2;
 800c3ee:	683b      	ldr	r3, [r7, #0]
 800c3f0:	3301      	adds	r3, #1
 800c3f2:	085b      	lsrs	r3, r3, #1
 800c3f4:	4a6b      	ldr	r2, [pc, #428]	; (800c5a4 <BIOS_Ctrl+0x238>)
 800c3f6:	6053      	str	r3, [r2, #4]
    			  HAL_TIM_OC_ConfigChannel(&htim1, &octim1, 1 );
 800c3f8:	2201      	movs	r2, #1
 800c3fa:	496a      	ldr	r1, [pc, #424]	; (800c5a4 <BIOS_Ctrl+0x238>)
 800c3fc:	4868      	ldr	r0, [pc, #416]	; (800c5a0 <BIOS_Ctrl+0x234>)
 800c3fe:	f010 feed 	bl	801d1dc <HAL_TIM_OC_ConfigChannel>
    			  htim1.Init.Prescaler = 0;
 800c402:	4b67      	ldr	r3, [pc, #412]	; (800c5a0 <BIOS_Ctrl+0x234>)
 800c404:	2200      	movs	r2, #0
 800c406:	605a      	str	r2, [r3, #4]
    			  htim1.Init.Period = Val -1;
 800c408:	683b      	ldr	r3, [r7, #0]
 800c40a:	3b01      	subs	r3, #1
 800c40c:	4a64      	ldr	r2, [pc, #400]	; (800c5a0 <BIOS_Ctrl+0x234>)
 800c40e:	60d3      	str	r3, [r2, #12]
    			  HAL_TIM_Base_Init(&htim1);
 800c410:	4863      	ldr	r0, [pc, #396]	; (800c5a0 <BIOS_Ctrl+0x234>)
 800c412:	f010 fd1b 	bl	801ce4c <HAL_TIM_Base_Init>
                  break;
 800c416:	e0ba      	b.n	800c58e <BIOS_Ctrl+0x222>

    case SMPLNUM:
    			  __HAL_TIM_URS_DISABLE(&htim1);
 800c418:	4b61      	ldr	r3, [pc, #388]	; (800c5a0 <BIOS_Ctrl+0x234>)
 800c41a:	681b      	ldr	r3, [r3, #0]
 800c41c:	681a      	ldr	r2, [r3, #0]
 800c41e:	4b60      	ldr	r3, [pc, #384]	; (800c5a0 <BIOS_Ctrl+0x234>)
 800c420:	681b      	ldr	r3, [r3, #0]
 800c422:	f022 0204 	bic.w	r2, r2, #4
 800c426:	601a      	str	r2, [r3, #0]
    			  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800c428:	4b5d      	ldr	r3, [pc, #372]	; (800c5a0 <BIOS_Ctrl+0x234>)
 800c42a:	2200      	movs	r2, #0
 800c42c:	609a      	str	r2, [r3, #8]
    			  HAL_TIM_Base_Init(&htim1);
 800c42e:	485c      	ldr	r0, [pc, #368]	; (800c5a0 <BIOS_Ctrl+0x234>)
 800c430:	f010 fd0c 	bl	801ce4c <HAL_TIM_Base_Init>
                  /* DMA_CH_A->CNDTR = (u32)Val;    */
                  break;
 800c434:	e0ab      	b.n	800c58e <BIOS_Ctrl+0x222>

    case AiRANGE: if(Val & DC)
 800c436:	683b      	ldr	r3, [r7, #0]
 800c438:	f003 0302 	and.w	r3, r3, #2
 800c43c:	2b00      	cmp	r3, #0
 800c43e:	d005      	beq.n	800c44c <BIOS_Ctrl+0xe0>
    				  HAL_GPIO_WritePin(Az_GPIO_Port, Az_Pin,GPIO_PIN_SET);  // AZ_HIGH;
 800c440:	2201      	movs	r2, #1
 800c442:	2110      	movs	r1, #16
 800c444:	4858      	ldr	r0, [pc, #352]	; (800c5a8 <BIOS_Ctrl+0x23c>)
 800c446:	f00d fbb1 	bl	8019bac <HAL_GPIO_WritePin>
 800c44a:	e004      	b.n	800c456 <BIOS_Ctrl+0xea>
                  else
                	  HAL_GPIO_WritePin(Az_GPIO_Port, Az_Pin,GPIO_PIN_RESET);  //AZ_LOW;   CH_A_AC
 800c44c:	2200      	movs	r2, #0
 800c44e:	2110      	movs	r1, #16
 800c450:	4855      	ldr	r0, [pc, #340]	; (800c5a8 <BIOS_Ctrl+0x23c>)
 800c452:	f00d fbab 	bl	8019bac <HAL_GPIO_WritePin>
                  if(Val & HV)
 800c456:	683b      	ldr	r3, [r7, #0]
 800c458:	f003 0301 	and.w	r3, r3, #1
 800c45c:	2b00      	cmp	r3, #0
 800c45e:	d005      	beq.n	800c46c <BIOS_Ctrl+0x100>
                	  HAL_GPIO_WritePin(Ay_GPIO_Port, Ay_Pin,GPIO_PIN_SET);  //AY_HIGH;  CH_A_HV
 800c460:	2201      	movs	r2, #1
 800c462:	2120      	movs	r1, #32
 800c464:	4850      	ldr	r0, [pc, #320]	; (800c5a8 <BIOS_Ctrl+0x23c>)
 800c466:	f00d fba1 	bl	8019bac <HAL_GPIO_WritePin>
 800c46a:	e004      	b.n	800c476 <BIOS_Ctrl+0x10a>
                  else
                	  HAL_GPIO_WritePin(Ay_GPIO_Port, Ay_Pin,GPIO_PIN_RESET);  //AY_LOW;   CH_A_LV
 800c46c:	2200      	movs	r2, #0
 800c46e:	2120      	movs	r1, #32
 800c470:	484d      	ldr	r0, [pc, #308]	; (800c5a8 <BIOS_Ctrl+0x23c>)
 800c472:	f00d fb9b 	bl	8019bac <HAL_GPIO_WritePin>
                  if(Val & ACT)
 800c476:	683b      	ldr	r3, [r7, #0]
 800c478:	f003 0304 	and.w	r3, r3, #4
 800c47c:	2b00      	cmp	r3, #0
 800c47e:	d005      	beq.n	800c48c <BIOS_Ctrl+0x120>
                	  HAL_GPIO_WritePin(Ax_GPIO_Port, Ax_Pin,GPIO_PIN_SET);  //AX_HIGH;  CH_A_ACT
 800c480:	2201      	movs	r2, #1
 800c482:	2101      	movs	r1, #1
 800c484:	4849      	ldr	r0, [pc, #292]	; (800c5ac <BIOS_Ctrl+0x240>)
 800c486:	f00d fb91 	bl	8019bac <HAL_GPIO_WritePin>
                  else
                	  HAL_GPIO_WritePin(Ax_GPIO_Port, Ax_Pin,GPIO_PIN_RESET);  //AX_LOW;   CH_A_GND
                  break;
 800c48a:	e080      	b.n	800c58e <BIOS_Ctrl+0x222>
                	  HAL_GPIO_WritePin(Ax_GPIO_Port, Ax_Pin,GPIO_PIN_RESET);  //AX_LOW;   CH_A_GND
 800c48c:	2200      	movs	r2, #0
 800c48e:	2101      	movs	r1, #1
 800c490:	4846      	ldr	r0, [pc, #280]	; (800c5ac <BIOS_Ctrl+0x240>)
 800c492:	f00d fb8b 	bl	8019bac <HAL_GPIO_WritePin>
                  break;
 800c496:	e07a      	b.n	800c58e <BIOS_Ctrl+0x222>

    case AOFFSET: HAL_DAC_SetValue( &hdac, DAC_CHANNEL_2, DAC_ALIGN_12B_R, Val);  /*DAC->DHR12R2  = (u16)Val; */
 800c498:	683b      	ldr	r3, [r7, #0]
 800c49a:	2200      	movs	r2, #0
 800c49c:	2110      	movs	r1, #16
 800c49e:	4844      	ldr	r0, [pc, #272]	; (800c5b0 <BIOS_Ctrl+0x244>)
 800c4a0:	f00c fb6f 	bl	8018b82 <HAL_DAC_SetValue>
                  break;
 800c4a4:	e073      	b.n	800c58e <BIOS_Ctrl+0x222>

    case DAC_TIM:
    			  htim7.Init.Period = Val-1;
 800c4a6:	683b      	ldr	r3, [r7, #0]
 800c4a8:	3b01      	subs	r3, #1
 800c4aa:	4a42      	ldr	r2, [pc, #264]	; (800c5b4 <BIOS_Ctrl+0x248>)
 800c4ac:	60d3      	str	r3, [r2, #12]
    			  HAL_TIM_Base_Init(&htim7);
 800c4ae:	4841      	ldr	r0, [pc, #260]	; (800c5b4 <BIOS_Ctrl+0x248>)
 800c4b0:	f010 fccc 	bl	801ce4c <HAL_TIM_Base_Init>
    			  break;
 800c4b4:	e06b      	b.n	800c58e <BIOS_Ctrl+0x222>
                  break;

    case OUT_CNT: /*OUT_DMA->CNDTR = (u16)Val; */    break;

    case OUT_MOD:
      GPIO_InitStructure.Speed = GPIO_SPEED_FREQ_MEDIUM;
 800c4b6:	2301      	movs	r3, #1
 800c4b8:	61bb      	str	r3, [r7, #24]
 800c4ba:	683b      	ldr	r3, [r7, #0]
 800c4bc:	2b04      	cmp	r3, #4
 800c4be:	d009      	beq.n	800c4d4 <BIOS_Ctrl+0x168>
 800c4c0:	683b      	ldr	r3, [r7, #0]
 800c4c2:	2b04      	cmp	r3, #4
 800c4c4:	d862      	bhi.n	800c58c <BIOS_Ctrl+0x220>
 800c4c6:	683b      	ldr	r3, [r7, #0]
 800c4c8:	2b00      	cmp	r3, #0
 800c4ca:	d03d      	beq.n	800c548 <BIOS_Ctrl+0x1dc>
 800c4cc:	683b      	ldr	r3, [r7, #0]
 800c4ce:	2b02      	cmp	r3, #2
 800c4d0:	d01d      	beq.n	800c50e <BIOS_Ctrl+0x1a2>
                                  GPIO_InitStructure.Pin   = Fo4_Pin ;
                                  GPIO_InitStructure.Mode  = GPIO_MODE_INPUT;
                                  HAL_GPIO_Init(Fo4_GPIO_Port, &GPIO_InitStructure);
                                  break;
                  }
                  break;
 800c4d2:	e05b      	b.n	800c58c <BIOS_Ctrl+0x220>
                    		      __HAL_DAC_DISABLE(&hdac, DAC_CHANNEL_1);
 800c4d4:	4b36      	ldr	r3, [pc, #216]	; (800c5b0 <BIOS_Ctrl+0x244>)
 800c4d6:	681b      	ldr	r3, [r3, #0]
 800c4d8:	681a      	ldr	r2, [r3, #0]
 800c4da:	4b35      	ldr	r3, [pc, #212]	; (800c5b0 <BIOS_Ctrl+0x244>)
 800c4dc:	681b      	ldr	r3, [r3, #0]
 800c4de:	f022 0201 	bic.w	r2, r2, #1
 800c4e2:	601a      	str	r2, [r3, #0]
                                  GPIO_InitStructure.Pin   = Fo2_Pin;
 800c4e4:	2304      	movs	r3, #4
 800c4e6:	60fb      	str	r3, [r7, #12]
                                  GPIO_InitStructure.Mode  = GPIO_MODE_AF_PP;
 800c4e8:	2302      	movs	r3, #2
 800c4ea:	613b      	str	r3, [r7, #16]
                                  HAL_GPIO_Init(Fo2_GPIO_Port, &GPIO_InitStructure);
 800c4ec:	f107 030c 	add.w	r3, r7, #12
 800c4f0:	4619      	mov	r1, r3
 800c4f2:	4831      	ldr	r0, [pc, #196]	; (800c5b8 <BIOS_Ctrl+0x24c>)
 800c4f4:	f00d f9ae 	bl	8019854 <HAL_GPIO_Init>
                                  GPIO_InitStructure.Pin   = Fo4_Pin ;
 800c4f8:	2310      	movs	r3, #16
 800c4fa:	60fb      	str	r3, [r7, #12]
                                  GPIO_InitStructure.Mode  = GPIO_MODE_INPUT;
 800c4fc:	2300      	movs	r3, #0
 800c4fe:	613b      	str	r3, [r7, #16]
                                  HAL_GPIO_Init(Fo4_GPIO_Port, &GPIO_InitStructure);
 800c500:	f107 030c 	add.w	r3, r7, #12
 800c504:	4619      	mov	r1, r3
 800c506:	482c      	ldr	r0, [pc, #176]	; (800c5b8 <BIOS_Ctrl+0x24c>)
 800c508:	f00d f9a4 	bl	8019854 <HAL_GPIO_Init>
                                  break;
 800c50c:	e039      	b.n	800c582 <BIOS_Ctrl+0x216>
                    			  GPIO_InitStructure.Pin   = Fo2_Pin ;
 800c50e:	2304      	movs	r3, #4
 800c510:	60fb      	str	r3, [r7, #12]
                                  GPIO_InitStructure.Mode  = GPIO_MODE_INPUT;
 800c512:	2300      	movs	r3, #0
 800c514:	613b      	str	r3, [r7, #16]
                                  HAL_GPIO_Init(Fo2_GPIO_Port, &GPIO_InitStructure);
 800c516:	f107 030c 	add.w	r3, r7, #12
 800c51a:	4619      	mov	r1, r3
 800c51c:	4826      	ldr	r0, [pc, #152]	; (800c5b8 <BIOS_Ctrl+0x24c>)
 800c51e:	f00d f999 	bl	8019854 <HAL_GPIO_Init>
                                  GPIO_InitStructure.Pin   = Fo4_Pin ;
 800c522:	2310      	movs	r3, #16
 800c524:	60fb      	str	r3, [r7, #12]
                                  GPIO_InitStructure.Mode  = GPIO_MODE_ANALOG;
 800c526:	2303      	movs	r3, #3
 800c528:	613b      	str	r3, [r7, #16]
                                  HAL_GPIO_Init(Fo4_GPIO_Port, &GPIO_InitStructure);
 800c52a:	f107 030c 	add.w	r3, r7, #12
 800c52e:	4619      	mov	r1, r3
 800c530:	4821      	ldr	r0, [pc, #132]	; (800c5b8 <BIOS_Ctrl+0x24c>)
 800c532:	f00d f98f 	bl	8019854 <HAL_GPIO_Init>
                                  __HAL_DAC_ENABLE(&hdac, DAC_CHANNEL_1);
 800c536:	4b1e      	ldr	r3, [pc, #120]	; (800c5b0 <BIOS_Ctrl+0x244>)
 800c538:	681b      	ldr	r3, [r3, #0]
 800c53a:	681a      	ldr	r2, [r3, #0]
 800c53c:	4b1c      	ldr	r3, [pc, #112]	; (800c5b0 <BIOS_Ctrl+0x244>)
 800c53e:	681b      	ldr	r3, [r3, #0]
 800c540:	f042 0201 	orr.w	r2, r2, #1
 800c544:	601a      	str	r2, [r3, #0]
                                  break;
 800c546:	e01c      	b.n	800c582 <BIOS_Ctrl+0x216>
                    		      __HAL_DAC_DISABLE(&hdac, DAC_CHANNEL_1);
 800c548:	4b19      	ldr	r3, [pc, #100]	; (800c5b0 <BIOS_Ctrl+0x244>)
 800c54a:	681b      	ldr	r3, [r3, #0]
 800c54c:	681a      	ldr	r2, [r3, #0]
 800c54e:	4b18      	ldr	r3, [pc, #96]	; (800c5b0 <BIOS_Ctrl+0x244>)
 800c550:	681b      	ldr	r3, [r3, #0]
 800c552:	f022 0201 	bic.w	r2, r2, #1
 800c556:	601a      	str	r2, [r3, #0]
                                  GPIO_InitStructure.Pin   = Fo2_Pin ;
 800c558:	2304      	movs	r3, #4
 800c55a:	60fb      	str	r3, [r7, #12]
                                  GPIO_InitStructure.Mode  = GPIO_MODE_AF_PP;
 800c55c:	2302      	movs	r3, #2
 800c55e:	613b      	str	r3, [r7, #16]
                                  HAL_GPIO_Init(Fo2_GPIO_Port, &GPIO_InitStructure);
 800c560:	f107 030c 	add.w	r3, r7, #12
 800c564:	4619      	mov	r1, r3
 800c566:	4814      	ldr	r0, [pc, #80]	; (800c5b8 <BIOS_Ctrl+0x24c>)
 800c568:	f00d f974 	bl	8019854 <HAL_GPIO_Init>
                                  GPIO_InitStructure.Pin   = Fo4_Pin ;
 800c56c:	2310      	movs	r3, #16
 800c56e:	60fb      	str	r3, [r7, #12]
                                  GPIO_InitStructure.Mode  = GPIO_MODE_INPUT;
 800c570:	2300      	movs	r3, #0
 800c572:	613b      	str	r3, [r7, #16]
                                  HAL_GPIO_Init(Fo4_GPIO_Port, &GPIO_InitStructure);
 800c574:	f107 030c 	add.w	r3, r7, #12
 800c578:	4619      	mov	r1, r3
 800c57a:	480f      	ldr	r0, [pc, #60]	; (800c5b8 <BIOS_Ctrl+0x24c>)
 800c57c:	f00d f96a 	bl	8019854 <HAL_GPIO_Init>
                                  break;
 800c580:	bf00      	nop
                  break;
 800c582:	e003      	b.n	800c58c <BIOS_Ctrl+0x220>

    default: break;
 800c584:	bf00      	nop
 800c586:	e002      	b.n	800c58e <BIOS_Ctrl+0x222>
    			  break;
 800c588:	bf00      	nop
 800c58a:	e000      	b.n	800c58e <BIOS_Ctrl+0x222>
                  break;
 800c58c:	bf00      	nop
  }
}
 800c58e:	bf00      	nop
 800c590:	3720      	adds	r7, #32
 800c592:	46bd      	mov	sp, r7
 800c594:	bd80      	pop	{r7, pc}
 800c596:	bf00      	nop
 800c598:	20006ad8 	.word	0x20006ad8
 800c59c:	200068e8 	.word	0x200068e8
 800c5a0:	20006be8 	.word	0x20006be8
 800c5a4:	20006bcc 	.word	0x20006bcc
 800c5a8:	40020800 	.word	0x40020800
 800c5ac:	40020400 	.word	0x40020400
 800c5b0:	20006b58 	.word	0x20006b58
 800c5b4:	20006c30 	.word	0x20006c30
 800c5b8:	40020000 	.word	0x40020000

0800c5bc <Set_Base>:

/*******************************************************************************
 Set_Base: ˮƽɨ��ʱ��ת������
*******************************************************************************/
void Set_Base(short Base)
{
 800c5bc:	b580      	push	{r7, lr}
 800c5be:	b082      	sub	sp, #8
 800c5c0:	af00      	add	r7, sp, #0
 800c5c2:	4603      	mov	r3, r0
 800c5c4:	80fb      	strh	r3, [r7, #6]
	octim1.Pulse = (ARR[Base]+1)/2;
 800c5c6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800c5ca:	4a13      	ldr	r2, [pc, #76]	; (800c618 <Set_Base+0x5c>)
 800c5cc:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800c5d0:	3301      	adds	r3, #1
 800c5d2:	0fda      	lsrs	r2, r3, #31
 800c5d4:	4413      	add	r3, r2
 800c5d6:	105b      	asrs	r3, r3, #1
 800c5d8:	461a      	mov	r2, r3
 800c5da:	4b10      	ldr	r3, [pc, #64]	; (800c61c <Set_Base+0x60>)
 800c5dc:	605a      	str	r2, [r3, #4]
	HAL_TIM_OC_ConfigChannel(&htim1, &octim1, 1 );
 800c5de:	2201      	movs	r2, #1
 800c5e0:	490e      	ldr	r1, [pc, #56]	; (800c61c <Set_Base+0x60>)
 800c5e2:	480f      	ldr	r0, [pc, #60]	; (800c620 <Set_Base+0x64>)
 800c5e4:	f010 fdfa 	bl	801d1dc <HAL_TIM_OC_ConfigChannel>
	htim1.Init.Prescaler = PSC[Base];
 800c5e8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800c5ec:	4a0d      	ldr	r2, [pc, #52]	; (800c624 <Set_Base+0x68>)
 800c5ee:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800c5f2:	461a      	mov	r2, r3
 800c5f4:	4b0a      	ldr	r3, [pc, #40]	; (800c620 <Set_Base+0x64>)
 800c5f6:	605a      	str	r2, [r3, #4]
	htim1.Init.Period = ARR[Base];
 800c5f8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800c5fc:	4a06      	ldr	r2, [pc, #24]	; (800c618 <Set_Base+0x5c>)
 800c5fe:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800c602:	461a      	mov	r2, r3
 800c604:	4b06      	ldr	r3, [pc, #24]	; (800c620 <Set_Base+0x64>)
 800c606:	60da      	str	r2, [r3, #12]
	HAL_TIM_Base_Init(&htim1);
 800c608:	4805      	ldr	r0, [pc, #20]	; (800c620 <Set_Base+0x64>)
 800c60a:	f010 fc1f 	bl	801ce4c <HAL_TIM_Base_Init>
}
 800c60e:	bf00      	nop
 800c610:	3708      	adds	r7, #8
 800c612:	46bd      	mov	sp, r7
 800c614:	bd80      	pop	{r7, pc}
 800c616:	bf00      	nop
 800c618:	08000b30 	.word	0x08000b30
 800c61c:	20006bcc 	.word	0x20006bcc
 800c620:	20006be8 	.word	0x20006be8
 800c624:	08000b08 	.word	0x08000b08

0800c628 <Set_Duty>:

/*******************************************************************************
 Set_Duty: �������ռ�ձ�����
*******************************************************************************/
void Set_Duty(void)
{
 800c628:	b580      	push	{r7, lr}
 800c62a:	af00      	add	r7, sp, #0
	 octim5.Pulse = (FARR[List[FREQ_OUT].Val]+1)*(10-List[FREQ_DUT].Val)/10;
 800c62c:	4b0f      	ldr	r3, [pc, #60]	; (800c66c <Set_Duty+0x44>)
 800c62e:	f9b3 312c 	ldrsh.w	r3, [r3, #300]	; 0x12c
 800c632:	461a      	mov	r2, r3
 800c634:	4b0e      	ldr	r3, [pc, #56]	; (800c670 <Set_Duty+0x48>)
 800c636:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 800c63a:	3301      	adds	r3, #1
 800c63c:	4a0b      	ldr	r2, [pc, #44]	; (800c66c <Set_Duty+0x44>)
 800c63e:	f9b2 2134 	ldrsh.w	r2, [r2, #308]	; 0x134
 800c642:	f1c2 020a 	rsb	r2, r2, #10
 800c646:	fb02 f303 	mul.w	r3, r2, r3
 800c64a:	4a0a      	ldr	r2, [pc, #40]	; (800c674 <Set_Duty+0x4c>)
 800c64c:	fb82 1203 	smull	r1, r2, r2, r3
 800c650:	1092      	asrs	r2, r2, #2
 800c652:	17db      	asrs	r3, r3, #31
 800c654:	1ad3      	subs	r3, r2, r3
 800c656:	461a      	mov	r2, r3
 800c658:	4b07      	ldr	r3, [pc, #28]	; (800c678 <Set_Duty+0x50>)
 800c65a:	605a      	str	r2, [r3, #4]
	 HAL_TIM_OC_ConfigChannel(&htim5, &octim5, 3 );
 800c65c:	2203      	movs	r2, #3
 800c65e:	4906      	ldr	r1, [pc, #24]	; (800c678 <Set_Duty+0x50>)
 800c660:	4806      	ldr	r0, [pc, #24]	; (800c67c <Set_Duty+0x54>)
 800c662:	f010 fdbb 	bl	801d1dc <HAL_TIM_OC_ConfigChannel>
}
 800c666:	bf00      	nop
 800c668:	bd80      	pop	{r7, pc}
 800c66a:	bf00      	nop
 800c66c:	20000298 	.word	0x20000298
 800c670:	08000ae8 	.word	0x08000ae8
 800c674:	66666667 	.word	0x66666667
 800c678:	20006b3c 	.word	0x20006b3c
 800c67c:	20006990 	.word	0x20006990

0800c680 <Set_Fout>:

/*******************************************************************************
 Set_Fout: �������Ƶ������
*******************************************************************************/
void Set_Fout(short Range)
{
 800c680:	b580      	push	{r7, lr}
 800c682:	b082      	sub	sp, #8
 800c684:	af00      	add	r7, sp, #0
 800c686:	4603      	mov	r3, r0
 800c688:	80fb      	strh	r3, [r7, #6]
	octim5.Pulse = (FARR[Range]+1)/2;
 800c68a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800c68e:	4a13      	ldr	r2, [pc, #76]	; (800c6dc <Set_Fout+0x5c>)
 800c690:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800c694:	3301      	adds	r3, #1
 800c696:	0fda      	lsrs	r2, r3, #31
 800c698:	4413      	add	r3, r2
 800c69a:	105b      	asrs	r3, r3, #1
 800c69c:	461a      	mov	r2, r3
 800c69e:	4b10      	ldr	r3, [pc, #64]	; (800c6e0 <Set_Fout+0x60>)
 800c6a0:	605a      	str	r2, [r3, #4]
	HAL_TIM_OC_ConfigChannel(&htim5, &octim5, 3 );
 800c6a2:	2203      	movs	r2, #3
 800c6a4:	490e      	ldr	r1, [pc, #56]	; (800c6e0 <Set_Fout+0x60>)
 800c6a6:	480f      	ldr	r0, [pc, #60]	; (800c6e4 <Set_Fout+0x64>)
 800c6a8:	f010 fd98 	bl	801d1dc <HAL_TIM_OC_ConfigChannel>
	htim5.Init.Prescaler = FPSC[Range];
 800c6ac:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800c6b0:	4a0d      	ldr	r2, [pc, #52]	; (800c6e8 <Set_Fout+0x68>)
 800c6b2:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800c6b6:	461a      	mov	r2, r3
 800c6b8:	4b0a      	ldr	r3, [pc, #40]	; (800c6e4 <Set_Fout+0x64>)
 800c6ba:	605a      	str	r2, [r3, #4]
	htim5.Init.Period = FARR[Range];
 800c6bc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800c6c0:	4a06      	ldr	r2, [pc, #24]	; (800c6dc <Set_Fout+0x5c>)
 800c6c2:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800c6c6:	461a      	mov	r2, r3
 800c6c8:	4b06      	ldr	r3, [pc, #24]	; (800c6e4 <Set_Fout+0x64>)
 800c6ca:	60da      	str	r2, [r3, #12]
	HAL_TIM_Base_Init(&htim5);
 800c6cc:	4805      	ldr	r0, [pc, #20]	; (800c6e4 <Set_Fout+0x64>)
 800c6ce:	f010 fbbd 	bl	801ce4c <HAL_TIM_Base_Init>
}
 800c6d2:	bf00      	nop
 800c6d4:	3708      	adds	r7, #8
 800c6d6:	46bd      	mov	sp, r7
 800c6d8:	bd80      	pop	{r7, pc}
 800c6da:	bf00      	nop
 800c6dc:	08000ae8 	.word	0x08000ae8
 800c6e0:	20006b3c 	.word	0x20006b3c
 800c6e4:	20006990 	.word	0x20006990
 800c6e8:	08000ac8 	.word	0x08000ac8

0800c6ec <ADC_Start>:

/*******************************************************************************
 ADC_Start: ���¿�ʼADCɨ�����
*******************************************************************************/
void ADC_Start(void)
{
 800c6ec:	b480      	push	{r7}
 800c6ee:	af00      	add	r7, sp, #0
  Sampl[0]   = List[TIM_BASE].Val;         // �������ʱ����λֵ
 800c6f0:	4b17      	ldr	r3, [pc, #92]	; (800c750 <ADC_Start+0x64>)
 800c6f2:	f9b3 203c 	ldrsh.w	r2, [r3, #60]	; 0x3c
 800c6f6:	4b17      	ldr	r3, [pc, #92]	; (800c754 <ADC_Start+0x68>)
 800c6f8:	801a      	strh	r2, [r3, #0]
//  DMA1_Channel1->CCR   &= 0xFFFFFFFFE;
//  DMA1_Channel1->CMAR  = (u32)&Sampl[2];             // �����趨DMAͨ��1
  if(( List[SYNCMODE].Val == NONE|| List[SYNCMODE].Val == SCAN)
 800c6fa:	4b15      	ldr	r3, [pc, #84]	; (800c750 <ADC_Start+0x64>)
 800c6fc:	f9b3 306c 	ldrsh.w	r3, [r3, #108]	; 0x6c
 800c700:	2b05      	cmp	r3, #5
 800c702:	d004      	beq.n	800c70e <ADC_Start+0x22>
 800c704:	4b12      	ldr	r3, [pc, #72]	; (800c750 <ADC_Start+0x64>)
 800c706:	f9b3 306c 	ldrsh.w	r3, [r3, #108]	; 0x6c
 800c70a:	2b01      	cmp	r3, #1
 800c70c:	d10e      	bne.n	800c72c <ADC_Start+0x40>
     &&( List[TIM_BASE].Val>11))
 800c70e:	4b10      	ldr	r3, [pc, #64]	; (800c750 <ADC_Start+0x64>)
 800c710:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800c714:	2b0b      	cmp	r3, #11
 800c716:	dd09      	ble.n	800c72c <ADC_Start+0x40>
  {
	  __HAL_DMA_SET_COUNTER(&hdma_adc1, 302);//       DMA1_Channel1->CNDTR  = 302;                       //10ms
 800c718:	4b0f      	ldr	r3, [pc, #60]	; (800c758 <ADC_Start+0x6c>)
 800c71a:	681b      	ldr	r3, [r3, #0]
 800c71c:	f44f 7297 	mov.w	r2, #302	; 0x12e
 800c720:	605a      	str	r2, [r3, #4]
       List[VIEWPOSI].Val= 0;
 800c722:	4b0b      	ldr	r3, [pc, #44]	; (800c750 <ADC_Start+0x64>)
 800c724:	2200      	movs	r2, #0
 800c726:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
 800c72a:	e00b      	b.n	800c744 <ADC_Start+0x58>
     }
  else
  __HAL_DMA_SET_COUNTER(&hdma_adc1, DEPTH[List[SMPL_DPTH].Val]);//    DMA1_Channel1->CNDTR = DEPTH[List[SMPL_DPTH].Val]; // 0x00001000;
 800c72c:	4b08      	ldr	r3, [pc, #32]	; (800c750 <ADC_Start+0x64>)
 800c72e:	f9b3 304c 	ldrsh.w	r3, [r3, #76]	; 0x4c
 800c732:	461a      	mov	r2, r3
 800c734:	4b09      	ldr	r3, [pc, #36]	; (800c75c <ADC_Start+0x70>)
 800c736:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 800c73a:	b29a      	uxth	r2, r3
 800c73c:	4b06      	ldr	r3, [pc, #24]	; (800c758 <ADC_Start+0x6c>)
 800c73e:	681b      	ldr	r3, [r3, #0]
 800c740:	605a      	str	r2, [r3, #4]
//  DMA1_Channel1->CCR  |= 0x00000001;                 // ���¿�ʼɨ�����
}
 800c742:	bf00      	nop
 800c744:	bf00      	nop
 800c746:	46bd      	mov	sp, r7
 800c748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c74c:	4770      	bx	lr
 800c74e:	bf00      	nop
 800c750:	20000298 	.word	0x20000298
 800c754:	2000286c 	.word	0x2000286c
 800c758:	20006b6c 	.word	0x20006b6c
 800c75c:	08002270 	.word	0x08002270

0800c760 <Tim3_ISP>:

/*******************************************************************************
* Tim3�жϴ������
*******************************************************************************/
void Tim3_ISP(void)
{
 800c760:	b580      	push	{r7, lr}
 800c762:	b082      	sub	sp, #8
 800c764:	af00      	add	r7, sp, #0
	char checkpress;
	short x,y;
//  unsigned char KeyCode;
//  TIM3->SR = 0;                             //���жϱ�־
//  if(KeymS_F)KeymS_Cnt++;                  //�������ʱ
  Tim_Cnt++;
 800c766:	4b5c      	ldr	r3, [pc, #368]	; (800c8d8 <Tim3_ISP+0x178>)
 800c768:	881b      	ldrh	r3, [r3, #0]
 800c76a:	b21b      	sxth	r3, r3
 800c76c:	b29b      	uxth	r3, r3
 800c76e:	3301      	adds	r3, #1
 800c770:	b29b      	uxth	r3, r3
 800c772:	b21a      	sxth	r2, r3
 800c774:	4b58      	ldr	r3, [pc, #352]	; (800c8d8 <Tim3_ISP+0x178>)
 800c776:	801a      	strh	r2, [r3, #0]
  if(Delay_Cnt>0) Delay_Cnt--;
 800c778:	4b58      	ldr	r3, [pc, #352]	; (800c8dc <Tim3_ISP+0x17c>)
 800c77a:	881b      	ldrh	r3, [r3, #0]
 800c77c:	b21b      	sxth	r3, r3
 800c77e:	2b00      	cmp	r3, #0
 800c780:	dd08      	ble.n	800c794 <Tim3_ISP+0x34>
 800c782:	4b56      	ldr	r3, [pc, #344]	; (800c8dc <Tim3_ISP+0x17c>)
 800c784:	881b      	ldrh	r3, [r3, #0]
 800c786:	b21b      	sxth	r3, r3
 800c788:	b29b      	uxth	r3, r3
 800c78a:	3b01      	subs	r3, #1
 800c78c:	b29b      	uxth	r3, r3
 800c78e:	b21a      	sxth	r2, r3
 800c790:	4b52      	ldr	r3, [pc, #328]	; (800c8dc <Tim3_ISP+0x17c>)
 800c792:	801a      	strh	r2, [r3, #0]
  if (mS_Cnt > 0)
 800c794:	4b52      	ldr	r3, [pc, #328]	; (800c8e0 <Tim3_ISP+0x180>)
 800c796:	881b      	ldrh	r3, [r3, #0]
 800c798:	b21b      	sxth	r3, r3
 800c79a:	2b00      	cmp	r3, #0
 800c79c:	dd61      	ble.n	800c862 <Tim3_ISP+0x102>
  {
    mS_Cnt--;
 800c79e:	4b50      	ldr	r3, [pc, #320]	; (800c8e0 <Tim3_ISP+0x180>)
 800c7a0:	881b      	ldrh	r3, [r3, #0]
 800c7a2:	b21b      	sxth	r3, r3
 800c7a4:	b29b      	uxth	r3, r3
 800c7a6:	3b01      	subs	r3, #1
 800c7a8:	b29b      	uxth	r3, r3
 800c7aa:	b21a      	sxth	r2, r3
 800c7ac:	4b4c      	ldr	r3, [pc, #304]	; (800c8e0 <Tim3_ISP+0x180>)
 800c7ae:	801a      	strh	r2, [r3, #0]
    if ((mS_Cnt%20)== 0)
 800c7b0:	4b4b      	ldr	r3, [pc, #300]	; (800c8e0 <Tim3_ISP+0x180>)
 800c7b2:	881b      	ldrh	r3, [r3, #0]
 800c7b4:	b21a      	sxth	r2, r3
 800c7b6:	4b4b      	ldr	r3, [pc, #300]	; (800c8e4 <Tim3_ISP+0x184>)
 800c7b8:	fb83 1302 	smull	r1, r3, r3, r2
 800c7bc:	10d9      	asrs	r1, r3, #3
 800c7be:	17d3      	asrs	r3, r2, #31
 800c7c0:	1ac9      	subs	r1, r1, r3
 800c7c2:	460b      	mov	r3, r1
 800c7c4:	009b      	lsls	r3, r3, #2
 800c7c6:	440b      	add	r3, r1
 800c7c8:	009b      	lsls	r3, r3, #2
 800c7ca:	1ad3      	subs	r3, r2, r3
 800c7cc:	b21b      	sxth	r3, r3
 800c7ce:	2b00      	cmp	r3, #0
 800c7d0:	d17e      	bne.n	800c8d0 <Tim3_ISP+0x170>
    {                 //  20mS  ÿ20mS��1�μ���
    	checkpress =0 ;
 800c7d2:	2300      	movs	r3, #0
 800c7d4:	71fb      	strb	r3, [r7, #7]
    	Touch = HAL_GPIO_ReadPin(TpI_GPIO_Port, TpI_Pin);  //read pen
 800c7d6:	f44f 7180 	mov.w	r1, #256	; 0x100
 800c7da:	4843      	ldr	r0, [pc, #268]	; (800c8e8 <Tim3_ISP+0x188>)
 800c7dc:	f00d f9ce 	bl	8019b7c <HAL_GPIO_ReadPin>
 800c7e0:	4603      	mov	r3, r0
 800c7e2:	461a      	mov	r2, r3
 800c7e4:	4b41      	ldr	r3, [pc, #260]	; (800c8ec <Tim3_ISP+0x18c>)
 800c7e6:	701a      	strb	r2, [r3, #0]
    	if (Touch != LastTouch)
 800c7e8:	4b40      	ldr	r3, [pc, #256]	; (800c8ec <Tim3_ISP+0x18c>)
 800c7ea:	781a      	ldrb	r2, [r3, #0]
 800c7ec:	4b40      	ldr	r3, [pc, #256]	; (800c8f0 <Tim3_ISP+0x190>)
 800c7ee:	781b      	ldrb	r3, [r3, #0]
 800c7f0:	429a      	cmp	r2, r3
 800c7f2:	d006      	beq.n	800c802 <Tim3_ISP+0xa2>
    	{
    	// pen changed
    		checkpress =1; //check pressure if pen changed
 800c7f4:	2301      	movs	r3, #1
 800c7f6:	71fb      	strb	r3, [r7, #7]
    		LastTouch = Touch;
 800c7f8:	4b3c      	ldr	r3, [pc, #240]	; (800c8ec <Tim3_ISP+0x18c>)
 800c7fa:	781a      	ldrb	r2, [r3, #0]
 800c7fc:	4b3c      	ldr	r3, [pc, #240]	; (800c8f0 <Tim3_ISP+0x190>)
 800c7fe:	701a      	strb	r2, [r3, #0]
 800c800:	e005      	b.n	800c80e <Tim3_ISP+0xae>
    	}
    	else
    	{
    	  if(Touch != 0)
 800c802:	4b3a      	ldr	r3, [pc, #232]	; (800c8ec <Tim3_ISP+0x18c>)
 800c804:	781b      	ldrb	r3, [r3, #0]
 800c806:	2b00      	cmp	r3, #0
 800c808:	d001      	beq.n	800c80e <Tim3_ISP+0xae>
    	  {
    	    //check that press is valid
    		checkpress =1;
 800c80a:	2301      	movs	r3, #1
 800c80c:	71fb      	strb	r3, [r7, #7]
    	  }
    	}

    	if(checkpress !=0)
 800c80e:	79fb      	ldrb	r3, [r7, #7]
 800c810:	2b00      	cmp	r3, #0
 800c812:	d005      	beq.n	800c820 <Tim3_ISP+0xc0>
    	{
    		Touch_Read(&x,&y);
 800c814:	1cba      	adds	r2, r7, #2
 800c816:	1d3b      	adds	r3, r7, #4
 800c818:	4611      	mov	r1, r2
 800c81a:	4618      	mov	r0, r3
 800c81c:	f009 fd34 	bl	8016288 <Touch_Read>
//      if(Key_Wait_Cnt)    Key_Wait_Cnt--;
//      if(Key_Repeat_Cnt)  Key_Repeat_Cnt--;
//      KeyCode = KeyScan();
//      if(KeyCode !=0) Key_Buffer = KeyCode;

      if(Cursor_Cnt >0)
 800c820:	4b34      	ldr	r3, [pc, #208]	; (800c8f4 <Tim3_ISP+0x194>)
 800c822:	881b      	ldrh	r3, [r3, #0]
 800c824:	b21b      	sxth	r3, r3
 800c826:	2b00      	cmp	r3, #0
 800c828:	dd09      	ble.n	800c83e <Tim3_ISP+0xde>
    	  Cursor_Cnt--;
 800c82a:	4b32      	ldr	r3, [pc, #200]	; (800c8f4 <Tim3_ISP+0x194>)
 800c82c:	881b      	ldrh	r3, [r3, #0]
 800c82e:	b21b      	sxth	r3, r3
 800c830:	b29b      	uxth	r3, r3
 800c832:	3b01      	subs	r3, #1
 800c834:	b29b      	uxth	r3, r3
 800c836:	b21a      	sxth	r2, r3
 800c838:	4b2e      	ldr	r3, [pc, #184]	; (800c8f4 <Tim3_ISP+0x194>)
 800c83a:	801a      	strh	r2, [r3, #0]
        Windows_Pop = 0;
        Clr_WavePosi(DAR);
      }
    }
  }
}
 800c83c:	e048      	b.n	800c8d0 <Tim3_ISP+0x170>
        Cursor_Cnt = 12;                  // 12*20mS=240mS
 800c83e:	4b2d      	ldr	r3, [pc, #180]	; (800c8f4 <Tim3_ISP+0x194>)
 800c840:	220c      	movs	r2, #12
 800c842:	801a      	strh	r2, [r3, #0]
        Twink = !Twink;
 800c844:	4b2c      	ldr	r3, [pc, #176]	; (800c8f8 <Tim3_ISP+0x198>)
 800c846:	781b      	ldrb	r3, [r3, #0]
 800c848:	b2db      	uxtb	r3, r3
 800c84a:	2b00      	cmp	r3, #0
 800c84c:	bf0c      	ite	eq
 800c84e:	2301      	moveq	r3, #1
 800c850:	2300      	movne	r3, #0
 800c852:	b2db      	uxtb	r3, r3
 800c854:	461a      	mov	r2, r3
 800c856:	4b28      	ldr	r3, [pc, #160]	; (800c8f8 <Tim3_ISP+0x198>)
 800c858:	701a      	strb	r2, [r3, #0]
        Blink =  BLINK;
 800c85a:	4b28      	ldr	r3, [pc, #160]	; (800c8fc <Tim3_ISP+0x19c>)
 800c85c:	2201      	movs	r2, #1
 800c85e:	701a      	strb	r2, [r3, #0]
}
 800c860:	e036      	b.n	800c8d0 <Tim3_ISP+0x170>
    mS_Cnt = 1000;
 800c862:	4b1f      	ldr	r3, [pc, #124]	; (800c8e0 <Tim3_ISP+0x180>)
 800c864:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800c868:	801a      	strh	r2, [r3, #0]
    if((List[STANDBY].Val !=0) && (StdBy_Time > 0))
 800c86a:	4b25      	ldr	r3, [pc, #148]	; (800c900 <Tim3_ISP+0x1a0>)
 800c86c:	f9b3 314c 	ldrsh.w	r3, [r3, #332]	; 0x14c
 800c870:	2b00      	cmp	r3, #0
 800c872:	d00d      	beq.n	800c890 <Tim3_ISP+0x130>
 800c874:	4b23      	ldr	r3, [pc, #140]	; (800c904 <Tim3_ISP+0x1a4>)
 800c876:	f9b3 3000 	ldrsh.w	r3, [r3]
 800c87a:	2b00      	cmp	r3, #0
 800c87c:	dd08      	ble.n	800c890 <Tim3_ISP+0x130>
      StdBy_Time--;      //������ʱ
 800c87e:	4b21      	ldr	r3, [pc, #132]	; (800c904 <Tim3_ISP+0x1a4>)
 800c880:	f9b3 3000 	ldrsh.w	r3, [r3]
 800c884:	b29b      	uxth	r3, r3
 800c886:	3b01      	subs	r3, #1
 800c888:	b29b      	uxth	r3, r3
 800c88a:	b21a      	sxth	r2, r3
 800c88c:	4b1d      	ldr	r3, [pc, #116]	; (800c904 <Tim3_ISP+0x1a4>)
 800c88e:	801a      	strh	r2, [r3, #0]
    if(PopupCnt > 0)
 800c890:	4b1d      	ldr	r3, [pc, #116]	; (800c908 <Tim3_ISP+0x1a8>)
 800c892:	881b      	ldrh	r3, [r3, #0]
 800c894:	b21b      	sxth	r3, r3
 800c896:	2b00      	cmp	r3, #0
 800c898:	dd0d      	ble.n	800c8b6 <Tim3_ISP+0x156>
      if(Cal_Flag == 0)
 800c89a:	4b1c      	ldr	r3, [pc, #112]	; (800c90c <Tim3_ISP+0x1ac>)
 800c89c:	781b      	ldrb	r3, [r3, #0]
 800c89e:	2b00      	cmp	r3, #0
 800c8a0:	d116      	bne.n	800c8d0 <Tim3_ISP+0x170>
    	  PopupCnt--;
 800c8a2:	4b19      	ldr	r3, [pc, #100]	; (800c908 <Tim3_ISP+0x1a8>)
 800c8a4:	881b      	ldrh	r3, [r3, #0]
 800c8a6:	b21b      	sxth	r3, r3
 800c8a8:	b29b      	uxth	r3, r3
 800c8aa:	3b01      	subs	r3, #1
 800c8ac:	b29b      	uxth	r3, r3
 800c8ae:	b21a      	sxth	r2, r3
 800c8b0:	4b15      	ldr	r3, [pc, #84]	; (800c908 <Tim3_ISP+0x1a8>)
 800c8b2:	801a      	strh	r2, [r3, #0]
}
 800c8b4:	e00c      	b.n	800c8d0 <Tim3_ISP+0x170>
      Close_Pop();        // �رնԻ���
 800c8b6:	f001 fef9 	bl	800e6ac <Close_Pop>
      if(Windows_Pop)
 800c8ba:	4b15      	ldr	r3, [pc, #84]	; (800c910 <Tim3_ISP+0x1b0>)
 800c8bc:	781b      	ldrb	r3, [r3, #0]
 800c8be:	2b00      	cmp	r3, #0
 800c8c0:	d006      	beq.n	800c8d0 <Tim3_ISP+0x170>
        Windows_Pop = 0;
 800c8c2:	4b13      	ldr	r3, [pc, #76]	; (800c910 <Tim3_ISP+0x1b0>)
 800c8c4:	2200      	movs	r2, #0
 800c8c6:	701a      	strb	r2, [r3, #0]
        Clr_WavePosi(DAR);
 800c8c8:	f643 10e7 	movw	r0, #14823	; 0x39e7
 800c8cc:	f007 fe58 	bl	8014580 <Clr_WavePosi>
}
 800c8d0:	bf00      	nop
 800c8d2:	3708      	adds	r7, #8
 800c8d4:	46bd      	mov	sp, r7
 800c8d6:	bd80      	pop	{r7, pc}
 800c8d8:	20000a32 	.word	0x20000a32
 800c8dc:	20000784 	.word	0x20000784
 800c8e0:	20000782 	.word	0x20000782
 800c8e4:	66666667 	.word	0x66666667
 800c8e8:	40020400 	.word	0x40020400
 800c8ec:	20000a30 	.word	0x20000a30
 800c8f0:	20000786 	.word	0x20000786
 800c8f4:	20000780 	.word	0x20000780
 800c8f8:	2000077c 	.word	0x2000077c
 800c8fc:	20000a31 	.word	0x20000a31
 800c900:	20000298 	.word	0x20000298
 800c904:	2000079c 	.word	0x2000079c
 800c908:	20000000 	.word	0x20000000
 800c90c:	200001b4 	.word	0x200001b4
 800c910:	200007a6 	.word	0x200007a6

0800c914 <Fill_Base>:
 800c914:	b480      	push	{r7}
 800c916:	af00      	add	r7, sp, #0
 800c918:	4b12      	ldr	r3, [pc, #72]	; (800c964 <Fill_Base+0x50>)
 800c91a:	4a13      	ldr	r2, [pc, #76]	; (800c968 <Fill_Base+0x54>)
 800c91c:	601a      	str	r2, [r3, #0]
 800c91e:	4b13      	ldr	r3, [pc, #76]	; (800c96c <Fill_Base+0x58>)
 800c920:	2266      	movs	r2, #102	; 0x66
 800c922:	601a      	str	r2, [r3, #0]
 800c924:	4b0f      	ldr	r3, [pc, #60]	; (800c964 <Fill_Base+0x50>)
 800c926:	681b      	ldr	r3, [r3, #0]
 800c928:	4a11      	ldr	r2, [pc, #68]	; (800c970 <Fill_Base+0x5c>)
 800c92a:	6812      	ldr	r2, [r2, #0]
 800c92c:	601a      	str	r2, [r3, #0]
 800c92e:	4b0d      	ldr	r3, [pc, #52]	; (800c964 <Fill_Base+0x50>)
 800c930:	681b      	ldr	r3, [r3, #0]
 800c932:	3304      	adds	r3, #4
 800c934:	4a0b      	ldr	r2, [pc, #44]	; (800c964 <Fill_Base+0x50>)
 800c936:	6013      	str	r3, [r2, #0]
 800c938:	4b0c      	ldr	r3, [pc, #48]	; (800c96c <Fill_Base+0x58>)
 800c93a:	681b      	ldr	r3, [r3, #0]
 800c93c:	3b01      	subs	r3, #1
 800c93e:	4a0b      	ldr	r2, [pc, #44]	; (800c96c <Fill_Base+0x58>)
 800c940:	6013      	str	r3, [r2, #0]
 800c942:	4b0a      	ldr	r3, [pc, #40]	; (800c96c <Fill_Base+0x58>)
 800c944:	681b      	ldr	r3, [r3, #0]
 800c946:	2b00      	cmp	r3, #0
 800c948:	d000      	beq.n	800c94c <Fill_Base+0x38>
 800c94a:	e7eb      	b.n	800c924 <Fill_Base+0x10>
 800c94c:	4b05      	ldr	r3, [pc, #20]	; (800c964 <Fill_Base+0x50>)
 800c94e:	4a09      	ldr	r2, [pc, #36]	; (800c974 <Fill_Base+0x60>)
 800c950:	601a      	str	r2, [r3, #0]
 800c952:	4b07      	ldr	r3, [pc, #28]	; (800c970 <Fill_Base+0x5c>)
 800c954:	f647 32ef 	movw	r2, #31727	; 0x7bef
 800c958:	601a      	str	r2, [r3, #0]
 800c95a:	bf00      	nop
 800c95c:	46bd      	mov	sp, r7
 800c95e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c962:	4770      	bx	lr
 800c964:	20000be8 	.word	0x20000be8
 800c968:	20000bdc 	.word	0x20000bdc
 800c96c:	20000a38 	.word	0x20000a38
 800c970:	20000a3c 	.word	0x20000a3c
 800c974:	20000bda 	.word	0x20000bda

0800c978 <Buld_0>:
 800c978:	b580      	push	{r7, lr}
 800c97a:	af00      	add	r7, sp, #0
 800c97c:	4b03      	ldr	r3, [pc, #12]	; (800c98c <Buld_0+0x14>)
 800c97e:	2200      	movs	r2, #0
 800c980:	601a      	str	r2, [r3, #0]
 800c982:	f7ff ffc7 	bl	800c914 <Fill_Base>
 800c986:	bf00      	nop
 800c988:	bd80      	pop	{r7, pc}
 800c98a:	bf00      	nop
 800c98c:	20000a3c 	.word	0x20000a3c

0800c990 <Buld_1>:
 800c990:	b580      	push	{r7, lr}
 800c992:	af00      	add	r7, sp, #0
 800c994:	4b0e      	ldr	r3, [pc, #56]	; (800c9d0 <Buld_1+0x40>)
 800c996:	4a0f      	ldr	r2, [pc, #60]	; (800c9d4 <Buld_1+0x44>)
 800c998:	601a      	str	r2, [r3, #0]
 800c99a:	f7ff ffbb 	bl	800c914 <Fill_Base>
 800c99e:	4b0c      	ldr	r3, [pc, #48]	; (800c9d0 <Buld_1+0x40>)
 800c9a0:	2200      	movs	r2, #0
 800c9a2:	601a      	str	r2, [r3, #0]
 800c9a4:	4b0c      	ldr	r3, [pc, #48]	; (800c9d8 <Buld_1+0x48>)
 800c9a6:	f44f 72c9 	mov.w	r2, #402	; 0x192
 800c9aa:	601a      	str	r2, [r3, #0]
 800c9ac:	4b08      	ldr	r3, [pc, #32]	; (800c9d0 <Buld_1+0x40>)
 800c9ae:	6819      	ldr	r1, [r3, #0]
 800c9b0:	4b0a      	ldr	r3, [pc, #40]	; (800c9dc <Buld_1+0x4c>)
 800c9b2:	681a      	ldr	r2, [r3, #0]
 800c9b4:	4b08      	ldr	r3, [pc, #32]	; (800c9d8 <Buld_1+0x48>)
 800c9b6:	681b      	ldr	r3, [r3, #0]
 800c9b8:	4413      	add	r3, r2
 800c9ba:	b28a      	uxth	r2, r1
 800c9bc:	801a      	strh	r2, [r3, #0]
 800c9be:	4b04      	ldr	r3, [pc, #16]	; (800c9d0 <Buld_1+0x40>)
 800c9c0:	681a      	ldr	r2, [r3, #0]
 800c9c2:	4b06      	ldr	r3, [pc, #24]	; (800c9dc <Buld_1+0x4c>)
 800c9c4:	681b      	ldr	r3, [r3, #0]
 800c9c6:	3b02      	subs	r3, #2
 800c9c8:	b292      	uxth	r2, r2
 800c9ca:	801a      	strh	r2, [r3, #0]
 800c9cc:	bf00      	nop
 800c9ce:	bd80      	pop	{r7, pc}
 800c9d0:	20000a3c 	.word	0x20000a3c
 800c9d4:	7bef7bef 	.word	0x7bef7bef
 800c9d8:	20000a38 	.word	0x20000a38
 800c9dc:	20000be8 	.word	0x20000be8

0800c9e0 <Buld_2>:
 800c9e0:	b580      	push	{r7, lr}
 800c9e2:	af00      	add	r7, sp, #0
 800c9e4:	4b0c      	ldr	r3, [pc, #48]	; (800ca18 <Buld_2+0x38>)
 800c9e6:	2200      	movs	r2, #0
 800c9e8:	601a      	str	r2, [r3, #0]
 800c9ea:	f7ff ff93 	bl	800c914 <Fill_Base>
 800c9ee:	4b0b      	ldr	r3, [pc, #44]	; (800ca1c <Buld_2+0x3c>)
 800c9f0:	f44f 72c8 	mov.w	r2, #400	; 0x190
 800c9f4:	601a      	str	r2, [r3, #0]
 800c9f6:	4b08      	ldr	r3, [pc, #32]	; (800ca18 <Buld_2+0x38>)
 800c9f8:	6819      	ldr	r1, [r3, #0]
 800c9fa:	4b09      	ldr	r3, [pc, #36]	; (800ca20 <Buld_2+0x40>)
 800c9fc:	681a      	ldr	r2, [r3, #0]
 800c9fe:	4b07      	ldr	r3, [pc, #28]	; (800ca1c <Buld_2+0x3c>)
 800ca00:	681b      	ldr	r3, [r3, #0]
 800ca02:	4413      	add	r3, r2
 800ca04:	b28a      	uxth	r2, r1
 800ca06:	801a      	strh	r2, [r3, #0]
 800ca08:	4b03      	ldr	r3, [pc, #12]	; (800ca18 <Buld_2+0x38>)
 800ca0a:	681a      	ldr	r2, [r3, #0]
 800ca0c:	4b04      	ldr	r3, [pc, #16]	; (800ca20 <Buld_2+0x40>)
 800ca0e:	681b      	ldr	r3, [r3, #0]
 800ca10:	b292      	uxth	r2, r2
 800ca12:	801a      	strh	r2, [r3, #0]
 800ca14:	bf00      	nop
 800ca16:	bd80      	pop	{r7, pc}
 800ca18:	20000a3c 	.word	0x20000a3c
 800ca1c:	20000a38 	.word	0x20000a38
 800ca20:	20000be8 	.word	0x20000be8

0800ca24 <Buld_3>:
 800ca24:	b580      	push	{r7, lr}
 800ca26:	af00      	add	r7, sp, #0
 800ca28:	4b0e      	ldr	r3, [pc, #56]	; (800ca64 <Buld_3+0x40>)
 800ca2a:	2200      	movs	r2, #0
 800ca2c:	601a      	str	r2, [r3, #0]
 800ca2e:	f7ff ff71 	bl	800c914 <Fill_Base>
 800ca32:	4b0d      	ldr	r3, [pc, #52]	; (800ca68 <Buld_3+0x44>)
 800ca34:	f44f 72e1 	mov.w	r2, #450	; 0x1c2
 800ca38:	601a      	str	r2, [r3, #0]
 800ca3a:	4b0b      	ldr	r3, [pc, #44]	; (800ca68 <Buld_3+0x44>)
 800ca3c:	681b      	ldr	r3, [r3, #0]
 800ca3e:	3b32      	subs	r3, #50	; 0x32
 800ca40:	4a09      	ldr	r2, [pc, #36]	; (800ca68 <Buld_3+0x44>)
 800ca42:	6013      	str	r3, [r2, #0]
 800ca44:	4b07      	ldr	r3, [pc, #28]	; (800ca64 <Buld_3+0x40>)
 800ca46:	6819      	ldr	r1, [r3, #0]
 800ca48:	4b08      	ldr	r3, [pc, #32]	; (800ca6c <Buld_3+0x48>)
 800ca4a:	681a      	ldr	r2, [r3, #0]
 800ca4c:	4b06      	ldr	r3, [pc, #24]	; (800ca68 <Buld_3+0x44>)
 800ca4e:	681b      	ldr	r3, [r3, #0]
 800ca50:	4413      	add	r3, r2
 800ca52:	b28a      	uxth	r2, r1
 800ca54:	801a      	strh	r2, [r3, #0]
 800ca56:	4b04      	ldr	r3, [pc, #16]	; (800ca68 <Buld_3+0x44>)
 800ca58:	681b      	ldr	r3, [r3, #0]
 800ca5a:	2b00      	cmp	r3, #0
 800ca5c:	d000      	beq.n	800ca60 <Buld_3+0x3c>
 800ca5e:	e7ec      	b.n	800ca3a <Buld_3+0x16>
 800ca60:	bf00      	nop
 800ca62:	bd80      	pop	{r7, pc}
 800ca64:	20000a3c 	.word	0x20000a3c
 800ca68:	20000a38 	.word	0x20000a38
 800ca6c:	20000be8 	.word	0x20000be8

0800ca70 <Buld_4>:
 800ca70:	b580      	push	{r7, lr}
 800ca72:	af00      	add	r7, sp, #0
 800ca74:	4b0e      	ldr	r3, [pc, #56]	; (800cab0 <Buld_4+0x40>)
 800ca76:	2200      	movs	r2, #0
 800ca78:	601a      	str	r2, [r3, #0]
 800ca7a:	f7ff ff4b 	bl	800c914 <Fill_Base>
 800ca7e:	4b0d      	ldr	r3, [pc, #52]	; (800cab4 <Buld_4+0x44>)
 800ca80:	f44f 72cd 	mov.w	r2, #410	; 0x19a
 800ca84:	601a      	str	r2, [r3, #0]
 800ca86:	4b0b      	ldr	r3, [pc, #44]	; (800cab4 <Buld_4+0x44>)
 800ca88:	681b      	ldr	r3, [r3, #0]
 800ca8a:	3b0a      	subs	r3, #10
 800ca8c:	4a09      	ldr	r2, [pc, #36]	; (800cab4 <Buld_4+0x44>)
 800ca8e:	6013      	str	r3, [r2, #0]
 800ca90:	4b07      	ldr	r3, [pc, #28]	; (800cab0 <Buld_4+0x40>)
 800ca92:	6819      	ldr	r1, [r3, #0]
 800ca94:	4b08      	ldr	r3, [pc, #32]	; (800cab8 <Buld_4+0x48>)
 800ca96:	681a      	ldr	r2, [r3, #0]
 800ca98:	4b06      	ldr	r3, [pc, #24]	; (800cab4 <Buld_4+0x44>)
 800ca9a:	681b      	ldr	r3, [r3, #0]
 800ca9c:	4413      	add	r3, r2
 800ca9e:	b28a      	uxth	r2, r1
 800caa0:	801a      	strh	r2, [r3, #0]
 800caa2:	4b04      	ldr	r3, [pc, #16]	; (800cab4 <Buld_4+0x44>)
 800caa4:	681b      	ldr	r3, [r3, #0]
 800caa6:	2b00      	cmp	r3, #0
 800caa8:	d000      	beq.n	800caac <Buld_4+0x3c>
 800caaa:	e7ec      	b.n	800ca86 <Buld_4+0x16>
 800caac:	bf00      	nop
 800caae:	bd80      	pop	{r7, pc}
 800cab0:	20000a3c 	.word	0x20000a3c
 800cab4:	20000a38 	.word	0x20000a38
 800cab8:	20000be8 	.word	0x20000be8

0800cabc <Draw_Digit_Analog>:
 800cabc:	b480      	push	{r7}
 800cabe:	b083      	sub	sp, #12
 800cac0:	af00      	add	r7, sp, #0
 800cac2:	4603      	mov	r3, r0
 800cac4:	80fb      	strh	r3, [r7, #6]
 800cac6:	88fb      	ldrh	r3, [r7, #6]
 800cac8:	2b01      	cmp	r3, #1
 800caca:	d144      	bne.n	800cb56 <Draw_Digit_Analog+0x9a>
 800cacc:	4b7d      	ldr	r3, [pc, #500]	; (800ccc4 <Draw_Digit_Analog+0x208>)
 800cace:	681b      	ldr	r3, [r3, #0]
 800cad0:	f503 7361 	add.w	r3, r3, #900	; 0x384
 800cad4:	4a7c      	ldr	r2, [pc, #496]	; (800ccc8 <Draw_Digit_Analog+0x20c>)
 800cad6:	6013      	str	r3, [r2, #0]
 800cad8:	4b7b      	ldr	r3, [pc, #492]	; (800ccc8 <Draw_Digit_Analog+0x20c>)
 800cada:	681a      	ldr	r2, [r3, #0]
 800cadc:	4b7b      	ldr	r3, [pc, #492]	; (800cccc <Draw_Digit_Analog+0x210>)
 800cade:	681b      	ldr	r3, [r3, #0]
 800cae0:	4413      	add	r3, r2
 800cae2:	4a79      	ldr	r2, [pc, #484]	; (800ccc8 <Draw_Digit_Analog+0x20c>)
 800cae4:	6013      	str	r3, [r2, #0]
 800cae6:	4b78      	ldr	r3, [pc, #480]	; (800ccc8 <Draw_Digit_Analog+0x20c>)
 800cae8:	681b      	ldr	r3, [r3, #0]
 800caea:	781b      	ldrb	r3, [r3, #0]
 800caec:	461a      	mov	r2, r3
 800caee:	4b78      	ldr	r3, [pc, #480]	; (800ccd0 <Draw_Digit_Analog+0x214>)
 800caf0:	601a      	str	r2, [r3, #0]
 800caf2:	4b75      	ldr	r3, [pc, #468]	; (800ccc8 <Draw_Digit_Analog+0x20c>)
 800caf4:	681b      	ldr	r3, [r3, #0]
 800caf6:	3b01      	subs	r3, #1
 800caf8:	781b      	ldrb	r3, [r3, #0]
 800cafa:	461a      	mov	r2, r3
 800cafc:	4b75      	ldr	r3, [pc, #468]	; (800ccd4 <Draw_Digit_Analog+0x218>)
 800cafe:	601a      	str	r2, [r3, #0]
 800cb00:	4b75      	ldr	r3, [pc, #468]	; (800ccd8 <Draw_Digit_Analog+0x21c>)
 800cb02:	681b      	ldr	r3, [r3, #0]
 800cb04:	085b      	lsrs	r3, r3, #1
 800cb06:	4a74      	ldr	r2, [pc, #464]	; (800ccd8 <Draw_Digit_Analog+0x21c>)
 800cb08:	6013      	str	r3, [r2, #0]
 800cb0a:	4b71      	ldr	r3, [pc, #452]	; (800ccd0 <Draw_Digit_Analog+0x214>)
 800cb0c:	681a      	ldr	r2, [r3, #0]
 800cb0e:	4b73      	ldr	r3, [pc, #460]	; (800ccdc <Draw_Digit_Analog+0x220>)
 800cb10:	681b      	ldr	r3, [r3, #0]
 800cb12:	4013      	ands	r3, r2
 800cb14:	4a6e      	ldr	r2, [pc, #440]	; (800ccd0 <Draw_Digit_Analog+0x214>)
 800cb16:	6013      	str	r3, [r2, #0]
 800cb18:	4b6d      	ldr	r3, [pc, #436]	; (800ccd0 <Draw_Digit_Analog+0x214>)
 800cb1a:	681b      	ldr	r3, [r3, #0]
 800cb1c:	2b00      	cmp	r3, #0
 800cb1e:	d104      	bne.n	800cb2a <Draw_Digit_Analog+0x6e>
 800cb20:	4b6d      	ldr	r3, [pc, #436]	; (800ccd8 <Draw_Digit_Analog+0x21c>)
 800cb22:	681b      	ldr	r3, [r3, #0]
 800cb24:	4a6a      	ldr	r2, [pc, #424]	; (800ccd0 <Draw_Digit_Analog+0x214>)
 800cb26:	6013      	str	r3, [r2, #0]
 800cb28:	e004      	b.n	800cb34 <Draw_Digit_Analog+0x78>
 800cb2a:	4b6b      	ldr	r3, [pc, #428]	; (800ccd8 <Draw_Digit_Analog+0x21c>)
 800cb2c:	681b      	ldr	r3, [r3, #0]
 800cb2e:	331e      	adds	r3, #30
 800cb30:	4a67      	ldr	r2, [pc, #412]	; (800ccd0 <Draw_Digit_Analog+0x214>)
 800cb32:	6013      	str	r3, [r2, #0]
 800cb34:	4b67      	ldr	r3, [pc, #412]	; (800ccd4 <Draw_Digit_Analog+0x218>)
 800cb36:	681a      	ldr	r2, [r3, #0]
 800cb38:	4b68      	ldr	r3, [pc, #416]	; (800ccdc <Draw_Digit_Analog+0x220>)
 800cb3a:	681b      	ldr	r3, [r3, #0]
 800cb3c:	4013      	ands	r3, r2
 800cb3e:	4a65      	ldr	r2, [pc, #404]	; (800ccd4 <Draw_Digit_Analog+0x218>)
 800cb40:	6013      	str	r3, [r2, #0]
 800cb42:	4b64      	ldr	r3, [pc, #400]	; (800ccd4 <Draw_Digit_Analog+0x218>)
 800cb44:	681b      	ldr	r3, [r3, #0]
 800cb46:	2b00      	cmp	r3, #0
 800cb48:	d01c      	beq.n	800cb84 <Draw_Digit_Analog+0xc8>
 800cb4a:	4b63      	ldr	r3, [pc, #396]	; (800ccd8 <Draw_Digit_Analog+0x21c>)
 800cb4c:	681b      	ldr	r3, [r3, #0]
 800cb4e:	331e      	adds	r3, #30
 800cb50:	4a61      	ldr	r2, [pc, #388]	; (800ccd8 <Draw_Digit_Analog+0x21c>)
 800cb52:	6013      	str	r3, [r2, #0]
 800cb54:	e016      	b.n	800cb84 <Draw_Digit_Analog+0xc8>
 800cb56:	88fb      	ldrh	r3, [r7, #6]
 800cb58:	2b00      	cmp	r3, #0
 800cb5a:	f040 80a5 	bne.w	800cca8 <Draw_Digit_Analog+0x1ec>
 800cb5e:	4b5e      	ldr	r3, [pc, #376]	; (800ccd8 <Draw_Digit_Analog+0x21c>)
 800cb60:	681b      	ldr	r3, [r3, #0]
 800cb62:	3302      	adds	r3, #2
 800cb64:	4a5c      	ldr	r2, [pc, #368]	; (800ccd8 <Draw_Digit_Analog+0x21c>)
 800cb66:	6013      	str	r3, [r2, #0]
 800cb68:	4b5b      	ldr	r3, [pc, #364]	; (800ccd8 <Draw_Digit_Analog+0x21c>)
 800cb6a:	681b      	ldr	r3, [r3, #0]
 800cb6c:	781b      	ldrb	r3, [r3, #0]
 800cb6e:	461a      	mov	r2, r3
 800cb70:	4b57      	ldr	r3, [pc, #348]	; (800ccd0 <Draw_Digit_Analog+0x214>)
 800cb72:	601a      	str	r2, [r3, #0]
 800cb74:	4b58      	ldr	r3, [pc, #352]	; (800ccd8 <Draw_Digit_Analog+0x21c>)
 800cb76:	681b      	ldr	r3, [r3, #0]
 800cb78:	3b01      	subs	r3, #1
 800cb7a:	781b      	ldrb	r3, [r3, #0]
 800cb7c:	461a      	mov	r2, r3
 800cb7e:	4b56      	ldr	r3, [pc, #344]	; (800ccd8 <Draw_Digit_Analog+0x21c>)
 800cb80:	601a      	str	r2, [r3, #0]
 800cb82:	e000      	b.n	800cb86 <Draw_Digit_Analog+0xca>
 800cb84:	bf00      	nop
 800cb86:	4b52      	ldr	r3, [pc, #328]	; (800ccd0 <Draw_Digit_Analog+0x214>)
 800cb88:	681b      	ldr	r3, [r3, #0]
 800cb8a:	2bff      	cmp	r3, #255	; 0xff
 800cb8c:	f000 808e 	beq.w	800ccac <Draw_Digit_Analog+0x1f0>
 800cb90:	4b4f      	ldr	r3, [pc, #316]	; (800ccd0 <Draw_Digit_Analog+0x214>)
 800cb92:	681b      	ldr	r3, [r3, #0]
 800cb94:	2b00      	cmp	r3, #0
 800cb96:	f000 808b 	beq.w	800ccb0 <Draw_Digit_Analog+0x1f4>
 800cb9a:	4b4f      	ldr	r3, [pc, #316]	; (800ccd8 <Draw_Digit_Analog+0x21c>)
 800cb9c:	681a      	ldr	r2, [r3, #0]
 800cb9e:	4b4c      	ldr	r3, [pc, #304]	; (800ccd0 <Draw_Digit_Analog+0x214>)
 800cba0:	681b      	ldr	r3, [r3, #0]
 800cba2:	429a      	cmp	r2, r3
 800cba4:	d80b      	bhi.n	800cbbe <Draw_Digit_Analog+0x102>
 800cba6:	4b4c      	ldr	r3, [pc, #304]	; (800ccd8 <Draw_Digit_Analog+0x21c>)
 800cba8:	681b      	ldr	r3, [r3, #0]
 800cbaa:	4a4a      	ldr	r2, [pc, #296]	; (800ccd4 <Draw_Digit_Analog+0x218>)
 800cbac:	6013      	str	r3, [r2, #0]
 800cbae:	4b48      	ldr	r3, [pc, #288]	; (800ccd0 <Draw_Digit_Analog+0x214>)
 800cbb0:	681a      	ldr	r2, [r3, #0]
 800cbb2:	4b49      	ldr	r3, [pc, #292]	; (800ccd8 <Draw_Digit_Analog+0x21c>)
 800cbb4:	681b      	ldr	r3, [r3, #0]
 800cbb6:	1ad3      	subs	r3, r2, r3
 800cbb8:	4a45      	ldr	r2, [pc, #276]	; (800ccd0 <Draw_Digit_Analog+0x214>)
 800cbba:	6013      	str	r3, [r2, #0]
 800cbbc:	e00a      	b.n	800cbd4 <Draw_Digit_Analog+0x118>
 800cbbe:	4b44      	ldr	r3, [pc, #272]	; (800ccd0 <Draw_Digit_Analog+0x214>)
 800cbc0:	681b      	ldr	r3, [r3, #0]
 800cbc2:	4a44      	ldr	r2, [pc, #272]	; (800ccd4 <Draw_Digit_Analog+0x218>)
 800cbc4:	6013      	str	r3, [r2, #0]
 800cbc6:	4b44      	ldr	r3, [pc, #272]	; (800ccd8 <Draw_Digit_Analog+0x21c>)
 800cbc8:	681a      	ldr	r2, [r3, #0]
 800cbca:	4b41      	ldr	r3, [pc, #260]	; (800ccd0 <Draw_Digit_Analog+0x214>)
 800cbcc:	681b      	ldr	r3, [r3, #0]
 800cbce:	1ad3      	subs	r3, r2, r3
 800cbd0:	4a3f      	ldr	r2, [pc, #252]	; (800ccd0 <Draw_Digit_Analog+0x214>)
 800cbd2:	6013      	str	r3, [r2, #0]
 800cbd4:	4b3f      	ldr	r3, [pc, #252]	; (800ccd4 <Draw_Digit_Analog+0x218>)
 800cbd6:	681b      	ldr	r3, [r3, #0]
 800cbd8:	2bc7      	cmp	r3, #199	; 0xc7
 800cbda:	d86b      	bhi.n	800ccb4 <Draw_Digit_Analog+0x1f8>
 800cbdc:	4b3c      	ldr	r3, [pc, #240]	; (800ccd0 <Draw_Digit_Analog+0x214>)
 800cbde:	681a      	ldr	r2, [r3, #0]
 800cbe0:	4b3c      	ldr	r3, [pc, #240]	; (800ccd4 <Draw_Digit_Analog+0x218>)
 800cbe2:	681b      	ldr	r3, [r3, #0]
 800cbe4:	4413      	add	r3, r2
 800cbe6:	4a3c      	ldr	r2, [pc, #240]	; (800ccd8 <Draw_Digit_Analog+0x21c>)
 800cbe8:	6013      	str	r3, [r2, #0]
 800cbea:	4b3b      	ldr	r3, [pc, #236]	; (800ccd8 <Draw_Digit_Analog+0x21c>)
 800cbec:	681b      	ldr	r3, [r3, #0]
 800cbee:	2bc7      	cmp	r3, #199	; 0xc7
 800cbf0:	d906      	bls.n	800cc00 <Draw_Digit_Analog+0x144>
 800cbf2:	4b38      	ldr	r3, [pc, #224]	; (800ccd4 <Draw_Digit_Analog+0x218>)
 800cbf4:	681b      	ldr	r3, [r3, #0]
 800cbf6:	f1c3 03c7 	rsb	r3, r3, #199	; 0xc7
 800cbfa:	4a35      	ldr	r2, [pc, #212]	; (800ccd0 <Draw_Digit_Analog+0x214>)
 800cbfc:	6013      	str	r3, [r2, #0]
 800cbfe:	e020      	b.n	800cc42 <Draw_Digit_Analog+0x186>
 800cc00:	4b35      	ldr	r3, [pc, #212]	; (800ccd8 <Draw_Digit_Analog+0x21c>)
 800cc02:	681b      	ldr	r3, [r3, #0]
 800cc04:	2b02      	cmp	r3, #2
 800cc06:	d957      	bls.n	800ccb8 <Draw_Digit_Analog+0x1fc>
 800cc08:	4b32      	ldr	r3, [pc, #200]	; (800ccd4 <Draw_Digit_Analog+0x218>)
 800cc0a:	681b      	ldr	r3, [r3, #0]
 800cc0c:	2b02      	cmp	r3, #2
 800cc0e:	d808      	bhi.n	800cc22 <Draw_Digit_Analog+0x166>
 800cc10:	4b30      	ldr	r3, [pc, #192]	; (800ccd4 <Draw_Digit_Analog+0x218>)
 800cc12:	2203      	movs	r2, #3
 800cc14:	601a      	str	r2, [r3, #0]
 800cc16:	4b30      	ldr	r3, [pc, #192]	; (800ccd8 <Draw_Digit_Analog+0x21c>)
 800cc18:	681b      	ldr	r3, [r3, #0]
 800cc1a:	3b03      	subs	r3, #3
 800cc1c:	4a2c      	ldr	r2, [pc, #176]	; (800ccd0 <Draw_Digit_Analog+0x214>)
 800cc1e:	6013      	str	r3, [r2, #0]
 800cc20:	e00f      	b.n	800cc42 <Draw_Digit_Analog+0x186>
 800cc22:	4b2b      	ldr	r3, [pc, #172]	; (800ccd0 <Draw_Digit_Analog+0x214>)
 800cc24:	681b      	ldr	r3, [r3, #0]
 800cc26:	2b00      	cmp	r3, #0
 800cc28:	d10a      	bne.n	800cc40 <Draw_Digit_Analog+0x184>
 800cc2a:	4b2a      	ldr	r3, [pc, #168]	; (800ccd4 <Draw_Digit_Analog+0x218>)
 800cc2c:	681b      	ldr	r3, [r3, #0]
 800cc2e:	3b01      	subs	r3, #1
 800cc30:	4a28      	ldr	r2, [pc, #160]	; (800ccd4 <Draw_Digit_Analog+0x218>)
 800cc32:	6013      	str	r3, [r2, #0]
 800cc34:	4b26      	ldr	r3, [pc, #152]	; (800ccd0 <Draw_Digit_Analog+0x214>)
 800cc36:	681b      	ldr	r3, [r3, #0]
 800cc38:	3302      	adds	r3, #2
 800cc3a:	4a25      	ldr	r2, [pc, #148]	; (800ccd0 <Draw_Digit_Analog+0x214>)
 800cc3c:	6013      	str	r3, [r2, #0]
 800cc3e:	e000      	b.n	800cc42 <Draw_Digit_Analog+0x186>
 800cc40:	bf00      	nop
 800cc42:	4b23      	ldr	r3, [pc, #140]	; (800ccd0 <Draw_Digit_Analog+0x214>)
 800cc44:	681b      	ldr	r3, [r3, #0]
 800cc46:	2b13      	cmp	r3, #19
 800cc48:	d904      	bls.n	800cc54 <Draw_Digit_Analog+0x198>
 800cc4a:	4b25      	ldr	r3, [pc, #148]	; (800cce0 <Draw_Digit_Analog+0x224>)
 800cc4c:	681b      	ldr	r3, [r3, #0]
 800cc4e:	3314      	adds	r3, #20
 800cc50:	4a23      	ldr	r2, [pc, #140]	; (800cce0 <Draw_Digit_Analog+0x224>)
 800cc52:	6013      	str	r3, [r2, #0]
 800cc54:	4b23      	ldr	r3, [pc, #140]	; (800cce4 <Draw_Digit_Analog+0x228>)
 800cc56:	681a      	ldr	r2, [r3, #0]
 800cc58:	4b21      	ldr	r3, [pc, #132]	; (800cce0 <Draw_Digit_Analog+0x224>)
 800cc5a:	681b      	ldr	r3, [r3, #0]
 800cc5c:	4413      	add	r3, r2
 800cc5e:	881b      	ldrh	r3, [r3, #0]
 800cc60:	461a      	mov	r2, r3
 800cc62:	4b1f      	ldr	r3, [pc, #124]	; (800cce0 <Draw_Digit_Analog+0x224>)
 800cc64:	601a      	str	r2, [r3, #0]
 800cc66:	4b1b      	ldr	r3, [pc, #108]	; (800ccd4 <Draw_Digit_Analog+0x218>)
 800cc68:	681b      	ldr	r3, [r3, #0]
 800cc6a:	005b      	lsls	r3, r3, #1
 800cc6c:	4a19      	ldr	r2, [pc, #100]	; (800ccd4 <Draw_Digit_Analog+0x218>)
 800cc6e:	6013      	str	r3, [r2, #0]
 800cc70:	4b18      	ldr	r3, [pc, #96]	; (800ccd4 <Draw_Digit_Analog+0x218>)
 800cc72:	681b      	ldr	r3, [r3, #0]
 800cc74:	085b      	lsrs	r3, r3, #1
 800cc76:	f1c3 03cc 	rsb	r3, r3, #204	; 0xcc
 800cc7a:	005b      	lsls	r3, r3, #1
 800cc7c:	4a1a      	ldr	r2, [pc, #104]	; (800cce8 <Draw_Digit_Analog+0x22c>)
 800cc7e:	4413      	add	r3, r2
 800cc80:	461a      	mov	r2, r3
 800cc82:	4b14      	ldr	r3, [pc, #80]	; (800ccd4 <Draw_Digit_Analog+0x218>)
 800cc84:	601a      	str	r2, [r3, #0]
 800cc86:	4b16      	ldr	r3, [pc, #88]	; (800cce0 <Draw_Digit_Analog+0x224>)
 800cc88:	681a      	ldr	r2, [r3, #0]
 800cc8a:	4b12      	ldr	r3, [pc, #72]	; (800ccd4 <Draw_Digit_Analog+0x218>)
 800cc8c:	681b      	ldr	r3, [r3, #0]
 800cc8e:	b292      	uxth	r2, r2
 800cc90:	801a      	strh	r2, [r3, #0]
 800cc92:	4b10      	ldr	r3, [pc, #64]	; (800ccd4 <Draw_Digit_Analog+0x218>)
 800cc94:	681b      	ldr	r3, [r3, #0]
 800cc96:	3302      	adds	r3, #2
 800cc98:	4a0e      	ldr	r2, [pc, #56]	; (800ccd4 <Draw_Digit_Analog+0x218>)
 800cc9a:	6013      	str	r3, [r2, #0]
 800cc9c:	4b0c      	ldr	r3, [pc, #48]	; (800ccd0 <Draw_Digit_Analog+0x214>)
 800cc9e:	681b      	ldr	r3, [r3, #0]
 800cca0:	3b01      	subs	r3, #1
 800cca2:	4a0b      	ldr	r2, [pc, #44]	; (800ccd0 <Draw_Digit_Analog+0x214>)
 800cca4:	6013      	str	r3, [r2, #0]
 800cca6:	e7ee      	b.n	800cc86 <Draw_Digit_Analog+0x1ca>
 800cca8:	bf00      	nop
 800ccaa:	e006      	b.n	800ccba <Draw_Digit_Analog+0x1fe>
 800ccac:	bf00      	nop
 800ccae:	e004      	b.n	800ccba <Draw_Digit_Analog+0x1fe>
 800ccb0:	bf00      	nop
 800ccb2:	e002      	b.n	800ccba <Draw_Digit_Analog+0x1fe>
 800ccb4:	bf00      	nop
 800ccb6:	e000      	b.n	800ccba <Draw_Digit_Analog+0x1fe>
 800ccb8:	bf00      	nop
 800ccba:	370c      	adds	r7, #12
 800ccbc:	46bd      	mov	sp, r7
 800ccbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccc2:	4770      	bx	lr
 800ccc4:	20000a40 	.word	0x20000a40
 800ccc8:	20000bfc 	.word	0x20000bfc
 800cccc:	20000bf4 	.word	0x20000bf4
 800ccd0:	20000a38 	.word	0x20000a38
 800ccd4:	20000be4 	.word	0x20000be4
 800ccd8:	20000be8 	.word	0x20000be8
 800ccdc:	20000a34 	.word	0x20000a34
 800cce0:	20000a3c 	.word	0x20000a3c
 800cce4:	20000bec 	.word	0x20000bec
 800cce8:	20000a44 	.word	0x20000a44

0800ccec <Cursor_0>:
 800ccec:	b480      	push	{r7}
 800ccee:	b083      	sub	sp, #12
 800ccf0:	af00      	add	r7, sp, #0
 800ccf2:	6078      	str	r0, [r7, #4]
 800ccf4:	4b3c      	ldr	r3, [pc, #240]	; (800cde8 <Cursor_0+0xfc>)
 800ccf6:	2206      	movs	r2, #6
 800ccf8:	601a      	str	r2, [r3, #0]
 800ccfa:	4b3c      	ldr	r3, [pc, #240]	; (800cdec <Cursor_0+0x100>)
 800ccfc:	4a3c      	ldr	r2, [pc, #240]	; (800cdf0 <Cursor_0+0x104>)
 800ccfe:	601a      	str	r2, [r3, #0]
 800cd00:	4b39      	ldr	r3, [pc, #228]	; (800cde8 <Cursor_0+0xfc>)
 800cd02:	681b      	ldr	r3, [r3, #0]
 800cd04:	005b      	lsls	r3, r3, #1
 800cd06:	687a      	ldr	r2, [r7, #4]
 800cd08:	4413      	add	r3, r2
 800cd0a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800cd0e:	461a      	mov	r2, r3
 800cd10:	4b38      	ldr	r3, [pc, #224]	; (800cdf4 <Cursor_0+0x108>)
 800cd12:	601a      	str	r2, [r3, #0]
 800cd14:	4b37      	ldr	r3, [pc, #220]	; (800cdf4 <Cursor_0+0x108>)
 800cd16:	681b      	ldr	r3, [r3, #0]
 800cd18:	f003 0301 	and.w	r3, r3, #1
 800cd1c:	2b00      	cmp	r3, #0
 800cd1e:	d15c      	bne.n	800cdda <Cursor_0+0xee>
 800cd20:	4b31      	ldr	r3, [pc, #196]	; (800cde8 <Cursor_0+0xfc>)
 800cd22:	681b      	ldr	r3, [r3, #0]
 800cd24:	330a      	adds	r3, #10
 800cd26:	005b      	lsls	r3, r3, #1
 800cd28:	687a      	ldr	r2, [r7, #4]
 800cd2a:	4413      	add	r3, r2
 800cd2c:	f9b3 3000 	ldrsh.w	r3, [r3]
 800cd30:	461a      	mov	r2, r3
 800cd32:	4b30      	ldr	r3, [pc, #192]	; (800cdf4 <Cursor_0+0x108>)
 800cd34:	601a      	str	r2, [r3, #0]
 800cd36:	4b2f      	ldr	r3, [pc, #188]	; (800cdf4 <Cursor_0+0x108>)
 800cd38:	681b      	ldr	r3, [r3, #0]
 800cd3a:	085b      	lsrs	r3, r3, #1
 800cd3c:	f1c3 03cc 	rsb	r3, r3, #204	; 0xcc
 800cd40:	005b      	lsls	r3, r3, #1
 800cd42:	4a2d      	ldr	r2, [pc, #180]	; (800cdf8 <Cursor_0+0x10c>)
 800cd44:	4413      	add	r3, r2
 800cd46:	4a29      	ldr	r2, [pc, #164]	; (800cdec <Cursor_0+0x100>)
 800cd48:	6013      	str	r3, [r2, #0]
 800cd4a:	4b27      	ldr	r3, [pc, #156]	; (800cde8 <Cursor_0+0xfc>)
 800cd4c:	681b      	ldr	r3, [r3, #0]
 800cd4e:	3314      	adds	r3, #20
 800cd50:	005b      	lsls	r3, r3, #1
 800cd52:	687a      	ldr	r2, [r7, #4]
 800cd54:	4413      	add	r3, r2
 800cd56:	f9b3 3000 	ldrsh.w	r3, [r3]
 800cd5a:	461a      	mov	r2, r3
 800cd5c:	4b27      	ldr	r3, [pc, #156]	; (800cdfc <Cursor_0+0x110>)
 800cd5e:	601a      	str	r2, [r3, #0]
 800cd60:	4b22      	ldr	r3, [pc, #136]	; (800cdec <Cursor_0+0x100>)
 800cd62:	681b      	ldr	r3, [r3, #0]
 800cd64:	3b04      	subs	r3, #4
 800cd66:	4a21      	ldr	r2, [pc, #132]	; (800cdec <Cursor_0+0x100>)
 800cd68:	6013      	str	r3, [r2, #0]
 800cd6a:	4b24      	ldr	r3, [pc, #144]	; (800cdfc <Cursor_0+0x110>)
 800cd6c:	681a      	ldr	r2, [r3, #0]
 800cd6e:	4b1f      	ldr	r3, [pc, #124]	; (800cdec <Cursor_0+0x100>)
 800cd70:	681b      	ldr	r3, [r3, #0]
 800cd72:	b292      	uxth	r2, r2
 800cd74:	801a      	strh	r2, [r3, #0]
 800cd76:	4b1d      	ldr	r3, [pc, #116]	; (800cdec <Cursor_0+0x100>)
 800cd78:	681b      	ldr	r3, [r3, #0]
 800cd7a:	3302      	adds	r3, #2
 800cd7c:	4a1b      	ldr	r2, [pc, #108]	; (800cdec <Cursor_0+0x100>)
 800cd7e:	6013      	str	r3, [r2, #0]
 800cd80:	4b1e      	ldr	r3, [pc, #120]	; (800cdfc <Cursor_0+0x110>)
 800cd82:	681a      	ldr	r2, [r3, #0]
 800cd84:	4b19      	ldr	r3, [pc, #100]	; (800cdec <Cursor_0+0x100>)
 800cd86:	681b      	ldr	r3, [r3, #0]
 800cd88:	b292      	uxth	r2, r2
 800cd8a:	801a      	strh	r2, [r3, #0]
 800cd8c:	4b17      	ldr	r3, [pc, #92]	; (800cdec <Cursor_0+0x100>)
 800cd8e:	681b      	ldr	r3, [r3, #0]
 800cd90:	3302      	adds	r3, #2
 800cd92:	4a16      	ldr	r2, [pc, #88]	; (800cdec <Cursor_0+0x100>)
 800cd94:	6013      	str	r3, [r2, #0]
 800cd96:	4b19      	ldr	r3, [pc, #100]	; (800cdfc <Cursor_0+0x110>)
 800cd98:	681a      	ldr	r2, [r3, #0]
 800cd9a:	4b14      	ldr	r3, [pc, #80]	; (800cdec <Cursor_0+0x100>)
 800cd9c:	681b      	ldr	r3, [r3, #0]
 800cd9e:	b292      	uxth	r2, r2
 800cda0:	801a      	strh	r2, [r3, #0]
 800cda2:	4b12      	ldr	r3, [pc, #72]	; (800cdec <Cursor_0+0x100>)
 800cda4:	681b      	ldr	r3, [r3, #0]
 800cda6:	3302      	adds	r3, #2
 800cda8:	4a10      	ldr	r2, [pc, #64]	; (800cdec <Cursor_0+0x100>)
 800cdaa:	6013      	str	r3, [r2, #0]
 800cdac:	4b13      	ldr	r3, [pc, #76]	; (800cdfc <Cursor_0+0x110>)
 800cdae:	681a      	ldr	r2, [r3, #0]
 800cdb0:	4b0e      	ldr	r3, [pc, #56]	; (800cdec <Cursor_0+0x100>)
 800cdb2:	681b      	ldr	r3, [r3, #0]
 800cdb4:	b292      	uxth	r2, r2
 800cdb6:	801a      	strh	r2, [r3, #0]
 800cdb8:	4b0c      	ldr	r3, [pc, #48]	; (800cdec <Cursor_0+0x100>)
 800cdba:	681b      	ldr	r3, [r3, #0]
 800cdbc:	3302      	adds	r3, #2
 800cdbe:	4a0b      	ldr	r2, [pc, #44]	; (800cdec <Cursor_0+0x100>)
 800cdc0:	6013      	str	r3, [r2, #0]
 800cdc2:	4b0e      	ldr	r3, [pc, #56]	; (800cdfc <Cursor_0+0x110>)
 800cdc4:	681a      	ldr	r2, [r3, #0]
 800cdc6:	4b09      	ldr	r3, [pc, #36]	; (800cdec <Cursor_0+0x100>)
 800cdc8:	681b      	ldr	r3, [r3, #0]
 800cdca:	b292      	uxth	r2, r2
 800cdcc:	801a      	strh	r2, [r3, #0]
 800cdce:	4b07      	ldr	r3, [pc, #28]	; (800cdec <Cursor_0+0x100>)
 800cdd0:	681b      	ldr	r3, [r3, #0]
 800cdd2:	3302      	adds	r3, #2
 800cdd4:	4a05      	ldr	r2, [pc, #20]	; (800cdec <Cursor_0+0x100>)
 800cdd6:	6013      	str	r3, [r2, #0]
 800cdd8:	e000      	b.n	800cddc <Cursor_0+0xf0>
 800cdda:	bf00      	nop
 800cddc:	4b02      	ldr	r3, [pc, #8]	; (800cde8 <Cursor_0+0xfc>)
 800cdde:	681b      	ldr	r3, [r3, #0]
 800cde0:	3b01      	subs	r3, #1
 800cde2:	4a01      	ldr	r2, [pc, #4]	; (800cde8 <Cursor_0+0xfc>)
 800cde4:	6013      	str	r3, [r2, #0]
 800cde6:	e78b      	b.n	800cd00 <Cursor_0+0x14>
 800cde8:	20000a3c 	.word	0x20000a3c
 800cdec:	20000be8 	.word	0x20000be8
 800cdf0:	20000bdc 	.word	0x20000bdc
 800cdf4:	20000a38 	.word	0x20000a38
 800cdf8:	20000a44 	.word	0x20000a44
 800cdfc:	20000be4 	.word	0x20000be4

0800ce00 <Cursor_1>:
 800ce00:	b480      	push	{r7}
 800ce02:	b083      	sub	sp, #12
 800ce04:	af00      	add	r7, sp, #0
 800ce06:	6078      	str	r0, [r7, #4]
 800ce08:	4b31      	ldr	r3, [pc, #196]	; (800ced0 <Cursor_1+0xd0>)
 800ce0a:	2206      	movs	r2, #6
 800ce0c:	601a      	str	r2, [r3, #0]
 800ce0e:	4b31      	ldr	r3, [pc, #196]	; (800ced4 <Cursor_1+0xd4>)
 800ce10:	4a31      	ldr	r2, [pc, #196]	; (800ced8 <Cursor_1+0xd8>)
 800ce12:	601a      	str	r2, [r3, #0]
 800ce14:	4b2e      	ldr	r3, [pc, #184]	; (800ced0 <Cursor_1+0xd0>)
 800ce16:	681b      	ldr	r3, [r3, #0]
 800ce18:	005b      	lsls	r3, r3, #1
 800ce1a:	687a      	ldr	r2, [r7, #4]
 800ce1c:	4413      	add	r3, r2
 800ce1e:	f9b3 3000 	ldrsh.w	r3, [r3]
 800ce22:	461a      	mov	r2, r3
 800ce24:	4b2d      	ldr	r3, [pc, #180]	; (800cedc <Cursor_1+0xdc>)
 800ce26:	601a      	str	r2, [r3, #0]
 800ce28:	4b2c      	ldr	r3, [pc, #176]	; (800cedc <Cursor_1+0xdc>)
 800ce2a:	681b      	ldr	r3, [r3, #0]
 800ce2c:	f003 0301 	and.w	r3, r3, #1
 800ce30:	2b00      	cmp	r3, #0
 800ce32:	d146      	bne.n	800cec2 <Cursor_1+0xc2>
 800ce34:	4b26      	ldr	r3, [pc, #152]	; (800ced0 <Cursor_1+0xd0>)
 800ce36:	681b      	ldr	r3, [r3, #0]
 800ce38:	330a      	adds	r3, #10
 800ce3a:	005b      	lsls	r3, r3, #1
 800ce3c:	687a      	ldr	r2, [r7, #4]
 800ce3e:	4413      	add	r3, r2
 800ce40:	f9b3 3000 	ldrsh.w	r3, [r3]
 800ce44:	461a      	mov	r2, r3
 800ce46:	4b25      	ldr	r3, [pc, #148]	; (800cedc <Cursor_1+0xdc>)
 800ce48:	601a      	str	r2, [r3, #0]
 800ce4a:	4b24      	ldr	r3, [pc, #144]	; (800cedc <Cursor_1+0xdc>)
 800ce4c:	681b      	ldr	r3, [r3, #0]
 800ce4e:	085b      	lsrs	r3, r3, #1
 800ce50:	f1c3 03cc 	rsb	r3, r3, #204	; 0xcc
 800ce54:	005b      	lsls	r3, r3, #1
 800ce56:	4a22      	ldr	r2, [pc, #136]	; (800cee0 <Cursor_1+0xe0>)
 800ce58:	4413      	add	r3, r2
 800ce5a:	4a1e      	ldr	r2, [pc, #120]	; (800ced4 <Cursor_1+0xd4>)
 800ce5c:	6013      	str	r3, [r2, #0]
 800ce5e:	4b1c      	ldr	r3, [pc, #112]	; (800ced0 <Cursor_1+0xd0>)
 800ce60:	681b      	ldr	r3, [r3, #0]
 800ce62:	3314      	adds	r3, #20
 800ce64:	005b      	lsls	r3, r3, #1
 800ce66:	687a      	ldr	r2, [r7, #4]
 800ce68:	4413      	add	r3, r2
 800ce6a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800ce6e:	461a      	mov	r2, r3
 800ce70:	4b1c      	ldr	r3, [pc, #112]	; (800cee4 <Cursor_1+0xe4>)
 800ce72:	601a      	str	r2, [r3, #0]
 800ce74:	4b17      	ldr	r3, [pc, #92]	; (800ced4 <Cursor_1+0xd4>)
 800ce76:	681b      	ldr	r3, [r3, #0]
 800ce78:	3b02      	subs	r3, #2
 800ce7a:	4a16      	ldr	r2, [pc, #88]	; (800ced4 <Cursor_1+0xd4>)
 800ce7c:	6013      	str	r3, [r2, #0]
 800ce7e:	4b19      	ldr	r3, [pc, #100]	; (800cee4 <Cursor_1+0xe4>)
 800ce80:	681a      	ldr	r2, [r3, #0]
 800ce82:	4b14      	ldr	r3, [pc, #80]	; (800ced4 <Cursor_1+0xd4>)
 800ce84:	681b      	ldr	r3, [r3, #0]
 800ce86:	b292      	uxth	r2, r2
 800ce88:	801a      	strh	r2, [r3, #0]
 800ce8a:	4b12      	ldr	r3, [pc, #72]	; (800ced4 <Cursor_1+0xd4>)
 800ce8c:	681b      	ldr	r3, [r3, #0]
 800ce8e:	3302      	adds	r3, #2
 800ce90:	4a10      	ldr	r2, [pc, #64]	; (800ced4 <Cursor_1+0xd4>)
 800ce92:	6013      	str	r3, [r2, #0]
 800ce94:	4b13      	ldr	r3, [pc, #76]	; (800cee4 <Cursor_1+0xe4>)
 800ce96:	681a      	ldr	r2, [r3, #0]
 800ce98:	4b0e      	ldr	r3, [pc, #56]	; (800ced4 <Cursor_1+0xd4>)
 800ce9a:	681b      	ldr	r3, [r3, #0]
 800ce9c:	b292      	uxth	r2, r2
 800ce9e:	801a      	strh	r2, [r3, #0]
 800cea0:	4b0c      	ldr	r3, [pc, #48]	; (800ced4 <Cursor_1+0xd4>)
 800cea2:	681b      	ldr	r3, [r3, #0]
 800cea4:	3302      	adds	r3, #2
 800cea6:	4a0b      	ldr	r2, [pc, #44]	; (800ced4 <Cursor_1+0xd4>)
 800cea8:	6013      	str	r3, [r2, #0]
 800ceaa:	4b0e      	ldr	r3, [pc, #56]	; (800cee4 <Cursor_1+0xe4>)
 800ceac:	681a      	ldr	r2, [r3, #0]
 800ceae:	4b09      	ldr	r3, [pc, #36]	; (800ced4 <Cursor_1+0xd4>)
 800ceb0:	681b      	ldr	r3, [r3, #0]
 800ceb2:	b292      	uxth	r2, r2
 800ceb4:	801a      	strh	r2, [r3, #0]
 800ceb6:	4b07      	ldr	r3, [pc, #28]	; (800ced4 <Cursor_1+0xd4>)
 800ceb8:	681b      	ldr	r3, [r3, #0]
 800ceba:	3302      	adds	r3, #2
 800cebc:	4a05      	ldr	r2, [pc, #20]	; (800ced4 <Cursor_1+0xd4>)
 800cebe:	6013      	str	r3, [r2, #0]
 800cec0:	e000      	b.n	800cec4 <Cursor_1+0xc4>
 800cec2:	bf00      	nop
 800cec4:	4b02      	ldr	r3, [pc, #8]	; (800ced0 <Cursor_1+0xd0>)
 800cec6:	681b      	ldr	r3, [r3, #0]
 800cec8:	3b01      	subs	r3, #1
 800ceca:	4a01      	ldr	r2, [pc, #4]	; (800ced0 <Cursor_1+0xd0>)
 800cecc:	6013      	str	r3, [r2, #0]
 800cece:	e7a1      	b.n	800ce14 <Cursor_1+0x14>
 800ced0:	20000a3c 	.word	0x20000a3c
 800ced4:	20000be8 	.word	0x20000be8
 800ced8:	20000bdc 	.word	0x20000bdc
 800cedc:	20000a38 	.word	0x20000a38
 800cee0:	20000a44 	.word	0x20000a44
 800cee4:	20000be4 	.word	0x20000be4

0800cee8 <Cursor_2>:
 800cee8:	b480      	push	{r7}
 800ceea:	b083      	sub	sp, #12
 800ceec:	af00      	add	r7, sp, #0
 800ceee:	6078      	str	r0, [r7, #4]
 800cef0:	4b21      	ldr	r3, [pc, #132]	; (800cf78 <Cursor_2+0x90>)
 800cef2:	2206      	movs	r2, #6
 800cef4:	601a      	str	r2, [r3, #0]
 800cef6:	4b21      	ldr	r3, [pc, #132]	; (800cf7c <Cursor_2+0x94>)
 800cef8:	4a21      	ldr	r2, [pc, #132]	; (800cf80 <Cursor_2+0x98>)
 800cefa:	601a      	str	r2, [r3, #0]
 800cefc:	4b1e      	ldr	r3, [pc, #120]	; (800cf78 <Cursor_2+0x90>)
 800cefe:	681b      	ldr	r3, [r3, #0]
 800cf00:	005b      	lsls	r3, r3, #1
 800cf02:	687a      	ldr	r2, [r7, #4]
 800cf04:	4413      	add	r3, r2
 800cf06:	f9b3 3000 	ldrsh.w	r3, [r3]
 800cf0a:	461a      	mov	r2, r3
 800cf0c:	4b1d      	ldr	r3, [pc, #116]	; (800cf84 <Cursor_2+0x9c>)
 800cf0e:	601a      	str	r2, [r3, #0]
 800cf10:	4b1c      	ldr	r3, [pc, #112]	; (800cf84 <Cursor_2+0x9c>)
 800cf12:	681b      	ldr	r3, [r3, #0]
 800cf14:	f003 0301 	and.w	r3, r3, #1
 800cf18:	2b00      	cmp	r3, #0
 800cf1a:	d126      	bne.n	800cf6a <Cursor_2+0x82>
 800cf1c:	4b16      	ldr	r3, [pc, #88]	; (800cf78 <Cursor_2+0x90>)
 800cf1e:	681b      	ldr	r3, [r3, #0]
 800cf20:	330a      	adds	r3, #10
 800cf22:	005b      	lsls	r3, r3, #1
 800cf24:	687a      	ldr	r2, [r7, #4]
 800cf26:	4413      	add	r3, r2
 800cf28:	f9b3 3000 	ldrsh.w	r3, [r3]
 800cf2c:	461a      	mov	r2, r3
 800cf2e:	4b15      	ldr	r3, [pc, #84]	; (800cf84 <Cursor_2+0x9c>)
 800cf30:	601a      	str	r2, [r3, #0]
 800cf32:	4b14      	ldr	r3, [pc, #80]	; (800cf84 <Cursor_2+0x9c>)
 800cf34:	681b      	ldr	r3, [r3, #0]
 800cf36:	085b      	lsrs	r3, r3, #1
 800cf38:	f1c3 03cc 	rsb	r3, r3, #204	; 0xcc
 800cf3c:	005b      	lsls	r3, r3, #1
 800cf3e:	4a12      	ldr	r2, [pc, #72]	; (800cf88 <Cursor_2+0xa0>)
 800cf40:	4413      	add	r3, r2
 800cf42:	4a0e      	ldr	r2, [pc, #56]	; (800cf7c <Cursor_2+0x94>)
 800cf44:	6013      	str	r3, [r2, #0]
 800cf46:	4b0c      	ldr	r3, [pc, #48]	; (800cf78 <Cursor_2+0x90>)
 800cf48:	681b      	ldr	r3, [r3, #0]
 800cf4a:	3314      	adds	r3, #20
 800cf4c:	005b      	lsls	r3, r3, #1
 800cf4e:	687a      	ldr	r2, [r7, #4]
 800cf50:	4413      	add	r3, r2
 800cf52:	f9b3 3000 	ldrsh.w	r3, [r3]
 800cf56:	461a      	mov	r2, r3
 800cf58:	4b0c      	ldr	r3, [pc, #48]	; (800cf8c <Cursor_2+0xa4>)
 800cf5a:	601a      	str	r2, [r3, #0]
 800cf5c:	4b0b      	ldr	r3, [pc, #44]	; (800cf8c <Cursor_2+0xa4>)
 800cf5e:	681a      	ldr	r2, [r3, #0]
 800cf60:	4b06      	ldr	r3, [pc, #24]	; (800cf7c <Cursor_2+0x94>)
 800cf62:	681b      	ldr	r3, [r3, #0]
 800cf64:	b292      	uxth	r2, r2
 800cf66:	801a      	strh	r2, [r3, #0]
 800cf68:	e000      	b.n	800cf6c <Cursor_2+0x84>
 800cf6a:	bf00      	nop
 800cf6c:	4b02      	ldr	r3, [pc, #8]	; (800cf78 <Cursor_2+0x90>)
 800cf6e:	681b      	ldr	r3, [r3, #0]
 800cf70:	3b01      	subs	r3, #1
 800cf72:	4a01      	ldr	r2, [pc, #4]	; (800cf78 <Cursor_2+0x90>)
 800cf74:	6013      	str	r3, [r2, #0]
 800cf76:	e7c1      	b.n	800cefc <Cursor_2+0x14>
 800cf78:	20000a3c 	.word	0x20000a3c
 800cf7c:	20000be8 	.word	0x20000be8
 800cf80:	20000bdc 	.word	0x20000bdc
 800cf84:	20000a38 	.word	0x20000a38
 800cf88:	20000a44 	.word	0x20000a44
 800cf8c:	20000be4 	.word	0x20000be4

0800cf90 <Cursor_3>:
 800cf90:	b480      	push	{r7}
 800cf92:	b083      	sub	sp, #12
 800cf94:	af00      	add	r7, sp, #0
 800cf96:	6078      	str	r0, [r7, #4]
 800cf98:	4b2a      	ldr	r3, [pc, #168]	; (800d044 <Cursor_3+0xb4>)
 800cf9a:	2206      	movs	r2, #6
 800cf9c:	601a      	str	r2, [r3, #0]
 800cf9e:	4b2a      	ldr	r3, [pc, #168]	; (800d048 <Cursor_3+0xb8>)
 800cfa0:	4a2a      	ldr	r2, [pc, #168]	; (800d04c <Cursor_3+0xbc>)
 800cfa2:	601a      	str	r2, [r3, #0]
 800cfa4:	4b27      	ldr	r3, [pc, #156]	; (800d044 <Cursor_3+0xb4>)
 800cfa6:	681b      	ldr	r3, [r3, #0]
 800cfa8:	005b      	lsls	r3, r3, #1
 800cfaa:	687a      	ldr	r2, [r7, #4]
 800cfac:	4413      	add	r3, r2
 800cfae:	f9b3 3000 	ldrsh.w	r3, [r3]
 800cfb2:	461a      	mov	r2, r3
 800cfb4:	4b26      	ldr	r3, [pc, #152]	; (800d050 <Cursor_3+0xc0>)
 800cfb6:	601a      	str	r2, [r3, #0]
 800cfb8:	4b25      	ldr	r3, [pc, #148]	; (800d050 <Cursor_3+0xc0>)
 800cfba:	681b      	ldr	r3, [r3, #0]
 800cfbc:	f003 0302 	and.w	r3, r3, #2
 800cfc0:	2b00      	cmp	r3, #0
 800cfc2:	d135      	bne.n	800d030 <Cursor_3+0xa0>
 800cfc4:	4b23      	ldr	r3, [pc, #140]	; (800d054 <Cursor_3+0xc4>)
 800cfc6:	681b      	ldr	r3, [r3, #0]
 800cfc8:	3b01      	subs	r3, #1
 800cfca:	4a21      	ldr	r2, [pc, #132]	; (800d050 <Cursor_3+0xc0>)
 800cfcc:	6013      	str	r3, [r2, #0]
 800cfce:	4b20      	ldr	r3, [pc, #128]	; (800d050 <Cursor_3+0xc0>)
 800cfd0:	681b      	ldr	r3, [r3, #0]
 800cfd2:	f003 0303 	and.w	r3, r3, #3
 800cfd6:	4a1e      	ldr	r2, [pc, #120]	; (800d050 <Cursor_3+0xc0>)
 800cfd8:	6013      	str	r3, [r2, #0]
 800cfda:	4b1d      	ldr	r3, [pc, #116]	; (800d050 <Cursor_3+0xc0>)
 800cfdc:	681b      	ldr	r3, [r3, #0]
 800cfde:	2b00      	cmp	r3, #0
 800cfe0:	d128      	bne.n	800d034 <Cursor_3+0xa4>
 800cfe2:	4b18      	ldr	r3, [pc, #96]	; (800d044 <Cursor_3+0xb4>)
 800cfe4:	681b      	ldr	r3, [r3, #0]
 800cfe6:	330a      	adds	r3, #10
 800cfe8:	005b      	lsls	r3, r3, #1
 800cfea:	687a      	ldr	r2, [r7, #4]
 800cfec:	4413      	add	r3, r2
 800cfee:	f9b3 3000 	ldrsh.w	r3, [r3]
 800cff2:	461a      	mov	r2, r3
 800cff4:	4b16      	ldr	r3, [pc, #88]	; (800d050 <Cursor_3+0xc0>)
 800cff6:	601a      	str	r2, [r3, #0]
 800cff8:	4b15      	ldr	r3, [pc, #84]	; (800d050 <Cursor_3+0xc0>)
 800cffa:	681b      	ldr	r3, [r3, #0]
 800cffc:	085b      	lsrs	r3, r3, #1
 800cffe:	f1c3 03cc 	rsb	r3, r3, #204	; 0xcc
 800d002:	005b      	lsls	r3, r3, #1
 800d004:	4a14      	ldr	r2, [pc, #80]	; (800d058 <Cursor_3+0xc8>)
 800d006:	4413      	add	r3, r2
 800d008:	4a0f      	ldr	r2, [pc, #60]	; (800d048 <Cursor_3+0xb8>)
 800d00a:	6013      	str	r3, [r2, #0]
 800d00c:	4b0d      	ldr	r3, [pc, #52]	; (800d044 <Cursor_3+0xb4>)
 800d00e:	681b      	ldr	r3, [r3, #0]
 800d010:	3314      	adds	r3, #20
 800d012:	005b      	lsls	r3, r3, #1
 800d014:	687a      	ldr	r2, [r7, #4]
 800d016:	4413      	add	r3, r2
 800d018:	f9b3 3000 	ldrsh.w	r3, [r3]
 800d01c:	461a      	mov	r2, r3
 800d01e:	4b0f      	ldr	r3, [pc, #60]	; (800d05c <Cursor_3+0xcc>)
 800d020:	601a      	str	r2, [r3, #0]
 800d022:	4b0e      	ldr	r3, [pc, #56]	; (800d05c <Cursor_3+0xcc>)
 800d024:	681a      	ldr	r2, [r3, #0]
 800d026:	4b08      	ldr	r3, [pc, #32]	; (800d048 <Cursor_3+0xb8>)
 800d028:	681b      	ldr	r3, [r3, #0]
 800d02a:	b292      	uxth	r2, r2
 800d02c:	801a      	strh	r2, [r3, #0]
 800d02e:	e002      	b.n	800d036 <Cursor_3+0xa6>
 800d030:	bf00      	nop
 800d032:	e000      	b.n	800d036 <Cursor_3+0xa6>
 800d034:	bf00      	nop
 800d036:	4b03      	ldr	r3, [pc, #12]	; (800d044 <Cursor_3+0xb4>)
 800d038:	681b      	ldr	r3, [r3, #0]
 800d03a:	3b01      	subs	r3, #1
 800d03c:	4a01      	ldr	r2, [pc, #4]	; (800d044 <Cursor_3+0xb4>)
 800d03e:	6013      	str	r3, [r2, #0]
 800d040:	e7b0      	b.n	800cfa4 <Cursor_3+0x14>
 800d042:	bf00      	nop
 800d044:	20000a3c 	.word	0x20000a3c
 800d048:	20000be8 	.word	0x20000be8
 800d04c:	20000bdc 	.word	0x20000bdc
 800d050:	20000a38 	.word	0x20000a38
 800d054:	20000bf4 	.word	0x20000bf4
 800d058:	20000a44 	.word	0x20000a44
 800d05c:	20000be4 	.word	0x20000be4

0800d060 <Cursor_4>:
 800d060:	b480      	push	{r7}
 800d062:	b083      	sub	sp, #12
 800d064:	af00      	add	r7, sp, #0
 800d066:	6078      	str	r0, [r7, #4]
 800d068:	4b7a      	ldr	r3, [pc, #488]	; (800d254 <Cursor_4+0x1f4>)
 800d06a:	2207      	movs	r2, #7
 800d06c:	601a      	str	r2, [r3, #0]
 800d06e:	4b7a      	ldr	r3, [pc, #488]	; (800d258 <Cursor_4+0x1f8>)
 800d070:	4a7a      	ldr	r2, [pc, #488]	; (800d25c <Cursor_4+0x1fc>)
 800d072:	601a      	str	r2, [r3, #0]
 800d074:	4b77      	ldr	r3, [pc, #476]	; (800d254 <Cursor_4+0x1f4>)
 800d076:	681b      	ldr	r3, [r3, #0]
 800d078:	005b      	lsls	r3, r3, #1
 800d07a:	687a      	ldr	r2, [r7, #4]
 800d07c:	4413      	add	r3, r2
 800d07e:	f9b3 3000 	ldrsh.w	r3, [r3]
 800d082:	461a      	mov	r2, r3
 800d084:	4b76      	ldr	r3, [pc, #472]	; (800d260 <Cursor_4+0x200>)
 800d086:	601a      	str	r2, [r3, #0]
 800d088:	4b75      	ldr	r3, [pc, #468]	; (800d260 <Cursor_4+0x200>)
 800d08a:	681b      	ldr	r3, [r3, #0]
 800d08c:	f003 0301 	and.w	r3, r3, #1
 800d090:	2b00      	cmp	r3, #0
 800d092:	f040 8145 	bne.w	800d320 <Cursor_4+0x2c0>
 800d096:	bf00      	nop
 800d098:	4b6e      	ldr	r3, [pc, #440]	; (800d254 <Cursor_4+0x1f4>)
 800d09a:	681b      	ldr	r3, [r3, #0]
 800d09c:	330a      	adds	r3, #10
 800d09e:	005b      	lsls	r3, r3, #1
 800d0a0:	687a      	ldr	r2, [r7, #4]
 800d0a2:	4413      	add	r3, r2
 800d0a4:	f9b3 3000 	ldrsh.w	r3, [r3]
 800d0a8:	461a      	mov	r2, r3
 800d0aa:	4b6d      	ldr	r3, [pc, #436]	; (800d260 <Cursor_4+0x200>)
 800d0ac:	601a      	str	r2, [r3, #0]
 800d0ae:	4b69      	ldr	r3, [pc, #420]	; (800d254 <Cursor_4+0x1f4>)
 800d0b0:	681b      	ldr	r3, [r3, #0]
 800d0b2:	3314      	adds	r3, #20
 800d0b4:	005b      	lsls	r3, r3, #1
 800d0b6:	687a      	ldr	r2, [r7, #4]
 800d0b8:	4413      	add	r3, r2
 800d0ba:	f9b3 3000 	ldrsh.w	r3, [r3]
 800d0be:	461a      	mov	r2, r3
 800d0c0:	4b68      	ldr	r3, [pc, #416]	; (800d264 <Cursor_4+0x204>)
 800d0c2:	601a      	str	r2, [r3, #0]
 800d0c4:	4b66      	ldr	r3, [pc, #408]	; (800d260 <Cursor_4+0x200>)
 800d0c6:	681b      	ldr	r3, [r3, #0]
 800d0c8:	3b02      	subs	r3, #2
 800d0ca:	4a67      	ldr	r2, [pc, #412]	; (800d268 <Cursor_4+0x208>)
 800d0cc:	6013      	str	r3, [r2, #0]
 800d0ce:	4b64      	ldr	r3, [pc, #400]	; (800d260 <Cursor_4+0x200>)
 800d0d0:	681a      	ldr	r2, [r3, #0]
 800d0d2:	4b65      	ldr	r3, [pc, #404]	; (800d268 <Cursor_4+0x208>)
 800d0d4:	681b      	ldr	r3, [r3, #0]
 800d0d6:	429a      	cmp	r2, r3
 800d0d8:	d112      	bne.n	800d100 <Cursor_4+0xa0>
 800d0da:	4b62      	ldr	r3, [pc, #392]	; (800d264 <Cursor_4+0x204>)
 800d0dc:	681a      	ldr	r2, [r3, #0]
 800d0de:	4b5e      	ldr	r3, [pc, #376]	; (800d258 <Cursor_4+0x1f8>)
 800d0e0:	681b      	ldr	r3, [r3, #0]
 800d0e2:	b292      	uxth	r2, r2
 800d0e4:	801a      	strh	r2, [r3, #0]
 800d0e6:	4b5c      	ldr	r3, [pc, #368]	; (800d258 <Cursor_4+0x1f8>)
 800d0e8:	681b      	ldr	r3, [r3, #0]
 800d0ea:	f503 73ca 	add.w	r3, r3, #404	; 0x194
 800d0ee:	4a5a      	ldr	r2, [pc, #360]	; (800d258 <Cursor_4+0x1f8>)
 800d0f0:	6013      	str	r3, [r2, #0]
 800d0f2:	4b5c      	ldr	r3, [pc, #368]	; (800d264 <Cursor_4+0x204>)
 800d0f4:	681a      	ldr	r2, [r3, #0]
 800d0f6:	4b58      	ldr	r3, [pc, #352]	; (800d258 <Cursor_4+0x1f8>)
 800d0f8:	681b      	ldr	r3, [r3, #0]
 800d0fa:	b292      	uxth	r2, r2
 800d0fc:	801a      	strh	r2, [r3, #0]
 800d0fe:	e114      	b.n	800d32a <Cursor_4+0x2ca>
 800d100:	bf00      	nop
 800d102:	4b59      	ldr	r3, [pc, #356]	; (800d268 <Cursor_4+0x208>)
 800d104:	681b      	ldr	r3, [r3, #0]
 800d106:	3301      	adds	r3, #1
 800d108:	4a57      	ldr	r2, [pc, #348]	; (800d268 <Cursor_4+0x208>)
 800d10a:	6013      	str	r3, [r2, #0]
 800d10c:	4b57      	ldr	r3, [pc, #348]	; (800d26c <Cursor_4+0x20c>)
 800d10e:	681a      	ldr	r2, [r3, #0]
 800d110:	4b55      	ldr	r3, [pc, #340]	; (800d268 <Cursor_4+0x208>)
 800d112:	681b      	ldr	r3, [r3, #0]
 800d114:	429a      	cmp	r2, r3
 800d116:	d128      	bne.n	800d16a <Cursor_4+0x10a>
 800d118:	4b52      	ldr	r3, [pc, #328]	; (800d264 <Cursor_4+0x204>)
 800d11a:	681a      	ldr	r2, [r3, #0]
 800d11c:	4b4e      	ldr	r3, [pc, #312]	; (800d258 <Cursor_4+0x1f8>)
 800d11e:	681b      	ldr	r3, [r3, #0]
 800d120:	b292      	uxth	r2, r2
 800d122:	801a      	strh	r2, [r3, #0]
 800d124:	4b4c      	ldr	r3, [pc, #304]	; (800d258 <Cursor_4+0x1f8>)
 800d126:	681b      	ldr	r3, [r3, #0]
 800d128:	3302      	adds	r3, #2
 800d12a:	4a4b      	ldr	r2, [pc, #300]	; (800d258 <Cursor_4+0x1f8>)
 800d12c:	6013      	str	r3, [r2, #0]
 800d12e:	4b4d      	ldr	r3, [pc, #308]	; (800d264 <Cursor_4+0x204>)
 800d130:	681a      	ldr	r2, [r3, #0]
 800d132:	4b49      	ldr	r3, [pc, #292]	; (800d258 <Cursor_4+0x1f8>)
 800d134:	681b      	ldr	r3, [r3, #0]
 800d136:	b292      	uxth	r2, r2
 800d138:	801a      	strh	r2, [r3, #0]
 800d13a:	4b47      	ldr	r3, [pc, #284]	; (800d258 <Cursor_4+0x1f8>)
 800d13c:	681b      	ldr	r3, [r3, #0]
 800d13e:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 800d142:	4a45      	ldr	r2, [pc, #276]	; (800d258 <Cursor_4+0x1f8>)
 800d144:	6013      	str	r3, [r2, #0]
 800d146:	4b47      	ldr	r3, [pc, #284]	; (800d264 <Cursor_4+0x204>)
 800d148:	681a      	ldr	r2, [r3, #0]
 800d14a:	4b43      	ldr	r3, [pc, #268]	; (800d258 <Cursor_4+0x1f8>)
 800d14c:	681b      	ldr	r3, [r3, #0]
 800d14e:	b292      	uxth	r2, r2
 800d150:	801a      	strh	r2, [r3, #0]
 800d152:	4b41      	ldr	r3, [pc, #260]	; (800d258 <Cursor_4+0x1f8>)
 800d154:	681b      	ldr	r3, [r3, #0]
 800d156:	3302      	adds	r3, #2
 800d158:	4a3f      	ldr	r2, [pc, #252]	; (800d258 <Cursor_4+0x1f8>)
 800d15a:	6013      	str	r3, [r2, #0]
 800d15c:	4b41      	ldr	r3, [pc, #260]	; (800d264 <Cursor_4+0x204>)
 800d15e:	681a      	ldr	r2, [r3, #0]
 800d160:	4b3d      	ldr	r3, [pc, #244]	; (800d258 <Cursor_4+0x1f8>)
 800d162:	681b      	ldr	r3, [r3, #0]
 800d164:	b292      	uxth	r2, r2
 800d166:	801a      	strh	r2, [r3, #0]
 800d168:	e0df      	b.n	800d32a <Cursor_4+0x2ca>
 800d16a:	bf00      	nop
 800d16c:	4b3e      	ldr	r3, [pc, #248]	; (800d268 <Cursor_4+0x208>)
 800d16e:	681b      	ldr	r3, [r3, #0]
 800d170:	3301      	adds	r3, #1
 800d172:	4a3d      	ldr	r2, [pc, #244]	; (800d268 <Cursor_4+0x208>)
 800d174:	6013      	str	r3, [r2, #0]
 800d176:	4b3d      	ldr	r3, [pc, #244]	; (800d26c <Cursor_4+0x20c>)
 800d178:	681a      	ldr	r2, [r3, #0]
 800d17a:	4b3b      	ldr	r3, [pc, #236]	; (800d268 <Cursor_4+0x208>)
 800d17c:	681b      	ldr	r3, [r3, #0]
 800d17e:	429a      	cmp	r2, r3
 800d180:	d166      	bne.n	800d250 <Cursor_4+0x1f0>
 800d182:	4b38      	ldr	r3, [pc, #224]	; (800d264 <Cursor_4+0x204>)
 800d184:	681a      	ldr	r2, [r3, #0]
 800d186:	4b34      	ldr	r3, [pc, #208]	; (800d258 <Cursor_4+0x1f8>)
 800d188:	681b      	ldr	r3, [r3, #0]
 800d18a:	b292      	uxth	r2, r2
 800d18c:	801a      	strh	r2, [r3, #0]
 800d18e:	4b32      	ldr	r3, [pc, #200]	; (800d258 <Cursor_4+0x1f8>)
 800d190:	681b      	ldr	r3, [r3, #0]
 800d192:	3302      	adds	r3, #2
 800d194:	4a30      	ldr	r2, [pc, #192]	; (800d258 <Cursor_4+0x1f8>)
 800d196:	6013      	str	r3, [r2, #0]
 800d198:	4b32      	ldr	r3, [pc, #200]	; (800d264 <Cursor_4+0x204>)
 800d19a:	681a      	ldr	r2, [r3, #0]
 800d19c:	4b2e      	ldr	r3, [pc, #184]	; (800d258 <Cursor_4+0x1f8>)
 800d19e:	681b      	ldr	r3, [r3, #0]
 800d1a0:	b292      	uxth	r2, r2
 800d1a2:	801a      	strh	r2, [r3, #0]
 800d1a4:	4b2c      	ldr	r3, [pc, #176]	; (800d258 <Cursor_4+0x1f8>)
 800d1a6:	681b      	ldr	r3, [r3, #0]
 800d1a8:	3302      	adds	r3, #2
 800d1aa:	4a2b      	ldr	r2, [pc, #172]	; (800d258 <Cursor_4+0x1f8>)
 800d1ac:	6013      	str	r3, [r2, #0]
 800d1ae:	4b2d      	ldr	r3, [pc, #180]	; (800d264 <Cursor_4+0x204>)
 800d1b0:	681a      	ldr	r2, [r3, #0]
 800d1b2:	4b29      	ldr	r3, [pc, #164]	; (800d258 <Cursor_4+0x1f8>)
 800d1b4:	681b      	ldr	r3, [r3, #0]
 800d1b6:	b292      	uxth	r2, r2
 800d1b8:	801a      	strh	r2, [r3, #0]
 800d1ba:	4b27      	ldr	r3, [pc, #156]	; (800d258 <Cursor_4+0x1f8>)
 800d1bc:	4a2c      	ldr	r2, [pc, #176]	; (800d270 <Cursor_4+0x210>)
 800d1be:	601a      	str	r2, [r3, #0]
 800d1c0:	4b28      	ldr	r3, [pc, #160]	; (800d264 <Cursor_4+0x204>)
 800d1c2:	681a      	ldr	r2, [r3, #0]
 800d1c4:	4b24      	ldr	r3, [pc, #144]	; (800d258 <Cursor_4+0x1f8>)
 800d1c6:	681b      	ldr	r3, [r3, #0]
 800d1c8:	b292      	uxth	r2, r2
 800d1ca:	801a      	strh	r2, [r3, #0]
 800d1cc:	4b22      	ldr	r3, [pc, #136]	; (800d258 <Cursor_4+0x1f8>)
 800d1ce:	681b      	ldr	r3, [r3, #0]
 800d1d0:	3302      	adds	r3, #2
 800d1d2:	4a21      	ldr	r2, [pc, #132]	; (800d258 <Cursor_4+0x1f8>)
 800d1d4:	6013      	str	r3, [r2, #0]
 800d1d6:	4b23      	ldr	r3, [pc, #140]	; (800d264 <Cursor_4+0x204>)
 800d1d8:	681a      	ldr	r2, [r3, #0]
 800d1da:	4b1f      	ldr	r3, [pc, #124]	; (800d258 <Cursor_4+0x1f8>)
 800d1dc:	681b      	ldr	r3, [r3, #0]
 800d1de:	b292      	uxth	r2, r2
 800d1e0:	801a      	strh	r2, [r3, #0]
 800d1e2:	4b1d      	ldr	r3, [pc, #116]	; (800d258 <Cursor_4+0x1f8>)
 800d1e4:	681b      	ldr	r3, [r3, #0]
 800d1e6:	3302      	adds	r3, #2
 800d1e8:	4a1b      	ldr	r2, [pc, #108]	; (800d258 <Cursor_4+0x1f8>)
 800d1ea:	6013      	str	r3, [r2, #0]
 800d1ec:	4b1d      	ldr	r3, [pc, #116]	; (800d264 <Cursor_4+0x204>)
 800d1ee:	681a      	ldr	r2, [r3, #0]
 800d1f0:	4b19      	ldr	r3, [pc, #100]	; (800d258 <Cursor_4+0x1f8>)
 800d1f2:	681b      	ldr	r3, [r3, #0]
 800d1f4:	b292      	uxth	r2, r2
 800d1f6:	801a      	strh	r2, [r3, #0]
 800d1f8:	4b16      	ldr	r3, [pc, #88]	; (800d254 <Cursor_4+0x1f4>)
 800d1fa:	681b      	ldr	r3, [r3, #0]
 800d1fc:	330a      	adds	r3, #10
 800d1fe:	005b      	lsls	r3, r3, #1
 800d200:	687a      	ldr	r2, [r7, #4]
 800d202:	4413      	add	r3, r2
 800d204:	f9b3 3000 	ldrsh.w	r3, [r3]
 800d208:	461a      	mov	r2, r3
 800d20a:	4b15      	ldr	r3, [pc, #84]	; (800d260 <Cursor_4+0x200>)
 800d20c:	601a      	str	r2, [r3, #0]
 800d20e:	4b14      	ldr	r3, [pc, #80]	; (800d260 <Cursor_4+0x200>)
 800d210:	681b      	ldr	r3, [r3, #0]
 800d212:	f003 0302 	and.w	r3, r3, #2
 800d216:	2b00      	cmp	r3, #0
 800d218:	d12e      	bne.n	800d278 <Cursor_4+0x218>
 800d21a:	4b0f      	ldr	r3, [pc, #60]	; (800d258 <Cursor_4+0x1f8>)
 800d21c:	4a0f      	ldr	r2, [pc, #60]	; (800d25c <Cursor_4+0x1fc>)
 800d21e:	601a      	str	r2, [r3, #0]
 800d220:	4b0d      	ldr	r3, [pc, #52]	; (800d258 <Cursor_4+0x1f8>)
 800d222:	681b      	ldr	r3, [r3, #0]
 800d224:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 800d228:	4a12      	ldr	r2, [pc, #72]	; (800d274 <Cursor_4+0x214>)
 800d22a:	6013      	str	r3, [r2, #0]
 800d22c:	4b0a      	ldr	r3, [pc, #40]	; (800d258 <Cursor_4+0x1f8>)
 800d22e:	681b      	ldr	r3, [r3, #0]
 800d230:	3308      	adds	r3, #8
 800d232:	4a09      	ldr	r2, [pc, #36]	; (800d258 <Cursor_4+0x1f8>)
 800d234:	6013      	str	r3, [r2, #0]
 800d236:	4b0b      	ldr	r3, [pc, #44]	; (800d264 <Cursor_4+0x204>)
 800d238:	681a      	ldr	r2, [r3, #0]
 800d23a:	4b07      	ldr	r3, [pc, #28]	; (800d258 <Cursor_4+0x1f8>)
 800d23c:	681b      	ldr	r3, [r3, #0]
 800d23e:	b292      	uxth	r2, r2
 800d240:	801a      	strh	r2, [r3, #0]
 800d242:	4b05      	ldr	r3, [pc, #20]	; (800d258 <Cursor_4+0x1f8>)
 800d244:	681a      	ldr	r2, [r3, #0]
 800d246:	4b0b      	ldr	r3, [pc, #44]	; (800d274 <Cursor_4+0x214>)
 800d248:	681b      	ldr	r3, [r3, #0]
 800d24a:	429a      	cmp	r2, r3
 800d24c:	d86a      	bhi.n	800d324 <Cursor_4+0x2c4>
 800d24e:	e7ed      	b.n	800d22c <Cursor_4+0x1cc>
 800d250:	bf00      	nop
 800d252:	e012      	b.n	800d27a <Cursor_4+0x21a>
 800d254:	20000a3c 	.word	0x20000a3c
 800d258:	20000be8 	.word	0x20000be8
 800d25c:	20000bdc 	.word	0x20000bdc
 800d260:	20000a38 	.word	0x20000a38
 800d264:	20000be4 	.word	0x20000be4
 800d268:	20000a34 	.word	0x20000a34
 800d26c:	20000bf4 	.word	0x20000bf4
 800d270:	20000a4c 	.word	0x20000a4c
 800d274:	20000bfc 	.word	0x20000bfc
 800d278:	bf00      	nop
 800d27a:	4b34      	ldr	r3, [pc, #208]	; (800d34c <Cursor_4+0x2ec>)
 800d27c:	681b      	ldr	r3, [r3, #0]
 800d27e:	3301      	adds	r3, #1
 800d280:	4a32      	ldr	r2, [pc, #200]	; (800d34c <Cursor_4+0x2ec>)
 800d282:	6013      	str	r3, [r2, #0]
 800d284:	4b31      	ldr	r3, [pc, #196]	; (800d34c <Cursor_4+0x2ec>)
 800d286:	681a      	ldr	r2, [r3, #0]
 800d288:	4b31      	ldr	r3, [pc, #196]	; (800d350 <Cursor_4+0x2f0>)
 800d28a:	681b      	ldr	r3, [r3, #0]
 800d28c:	429a      	cmp	r2, r3
 800d28e:	d128      	bne.n	800d2e2 <Cursor_4+0x282>
 800d290:	4b30      	ldr	r3, [pc, #192]	; (800d354 <Cursor_4+0x2f4>)
 800d292:	681a      	ldr	r2, [r3, #0]
 800d294:	4b30      	ldr	r3, [pc, #192]	; (800d358 <Cursor_4+0x2f8>)
 800d296:	681b      	ldr	r3, [r3, #0]
 800d298:	b292      	uxth	r2, r2
 800d29a:	801a      	strh	r2, [r3, #0]
 800d29c:	4b2e      	ldr	r3, [pc, #184]	; (800d358 <Cursor_4+0x2f8>)
 800d29e:	681b      	ldr	r3, [r3, #0]
 800d2a0:	3302      	adds	r3, #2
 800d2a2:	4a2d      	ldr	r2, [pc, #180]	; (800d358 <Cursor_4+0x2f8>)
 800d2a4:	6013      	str	r3, [r2, #0]
 800d2a6:	4b2b      	ldr	r3, [pc, #172]	; (800d354 <Cursor_4+0x2f4>)
 800d2a8:	681a      	ldr	r2, [r3, #0]
 800d2aa:	4b2b      	ldr	r3, [pc, #172]	; (800d358 <Cursor_4+0x2f8>)
 800d2ac:	681b      	ldr	r3, [r3, #0]
 800d2ae:	b292      	uxth	r2, r2
 800d2b0:	801a      	strh	r2, [r3, #0]
 800d2b2:	4b29      	ldr	r3, [pc, #164]	; (800d358 <Cursor_4+0x2f8>)
 800d2b4:	681b      	ldr	r3, [r3, #0]
 800d2b6:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 800d2ba:	4a27      	ldr	r2, [pc, #156]	; (800d358 <Cursor_4+0x2f8>)
 800d2bc:	6013      	str	r3, [r2, #0]
 800d2be:	4b25      	ldr	r3, [pc, #148]	; (800d354 <Cursor_4+0x2f4>)
 800d2c0:	681a      	ldr	r2, [r3, #0]
 800d2c2:	4b25      	ldr	r3, [pc, #148]	; (800d358 <Cursor_4+0x2f8>)
 800d2c4:	681b      	ldr	r3, [r3, #0]
 800d2c6:	b292      	uxth	r2, r2
 800d2c8:	801a      	strh	r2, [r3, #0]
 800d2ca:	4b23      	ldr	r3, [pc, #140]	; (800d358 <Cursor_4+0x2f8>)
 800d2cc:	681b      	ldr	r3, [r3, #0]
 800d2ce:	3302      	adds	r3, #2
 800d2d0:	4a21      	ldr	r2, [pc, #132]	; (800d358 <Cursor_4+0x2f8>)
 800d2d2:	6013      	str	r3, [r2, #0]
 800d2d4:	4b1f      	ldr	r3, [pc, #124]	; (800d354 <Cursor_4+0x2f4>)
 800d2d6:	681a      	ldr	r2, [r3, #0]
 800d2d8:	4b1f      	ldr	r3, [pc, #124]	; (800d358 <Cursor_4+0x2f8>)
 800d2da:	681b      	ldr	r3, [r3, #0]
 800d2dc:	b292      	uxth	r2, r2
 800d2de:	801a      	strh	r2, [r3, #0]
 800d2e0:	e023      	b.n	800d32a <Cursor_4+0x2ca>
 800d2e2:	bf00      	nop
 800d2e4:	4b19      	ldr	r3, [pc, #100]	; (800d34c <Cursor_4+0x2ec>)
 800d2e6:	681b      	ldr	r3, [r3, #0]
 800d2e8:	3301      	adds	r3, #1
 800d2ea:	4a18      	ldr	r2, [pc, #96]	; (800d34c <Cursor_4+0x2ec>)
 800d2ec:	6013      	str	r3, [r2, #0]
 800d2ee:	4b17      	ldr	r3, [pc, #92]	; (800d34c <Cursor_4+0x2ec>)
 800d2f0:	681a      	ldr	r2, [r3, #0]
 800d2f2:	4b17      	ldr	r3, [pc, #92]	; (800d350 <Cursor_4+0x2f0>)
 800d2f4:	681b      	ldr	r3, [r3, #0]
 800d2f6:	429a      	cmp	r2, r3
 800d2f8:	d116      	bne.n	800d328 <Cursor_4+0x2c8>
 800d2fa:	4b16      	ldr	r3, [pc, #88]	; (800d354 <Cursor_4+0x2f4>)
 800d2fc:	681a      	ldr	r2, [r3, #0]
 800d2fe:	4b16      	ldr	r3, [pc, #88]	; (800d358 <Cursor_4+0x2f8>)
 800d300:	681b      	ldr	r3, [r3, #0]
 800d302:	b292      	uxth	r2, r2
 800d304:	801a      	strh	r2, [r3, #0]
 800d306:	4b14      	ldr	r3, [pc, #80]	; (800d358 <Cursor_4+0x2f8>)
 800d308:	681b      	ldr	r3, [r3, #0]
 800d30a:	f503 73ca 	add.w	r3, r3, #404	; 0x194
 800d30e:	4a12      	ldr	r2, [pc, #72]	; (800d358 <Cursor_4+0x2f8>)
 800d310:	6013      	str	r3, [r2, #0]
 800d312:	4b10      	ldr	r3, [pc, #64]	; (800d354 <Cursor_4+0x2f4>)
 800d314:	681a      	ldr	r2, [r3, #0]
 800d316:	4b10      	ldr	r3, [pc, #64]	; (800d358 <Cursor_4+0x2f8>)
 800d318:	681b      	ldr	r3, [r3, #0]
 800d31a:	b292      	uxth	r2, r2
 800d31c:	801a      	strh	r2, [r3, #0]
 800d31e:	e004      	b.n	800d32a <Cursor_4+0x2ca>
 800d320:	bf00      	nop
 800d322:	e002      	b.n	800d32a <Cursor_4+0x2ca>
 800d324:	bf00      	nop
 800d326:	e000      	b.n	800d32a <Cursor_4+0x2ca>
 800d328:	bf00      	nop
 800d32a:	4b0c      	ldr	r3, [pc, #48]	; (800d35c <Cursor_4+0x2fc>)
 800d32c:	681b      	ldr	r3, [r3, #0]
 800d32e:	3301      	adds	r3, #1
 800d330:	4a0a      	ldr	r2, [pc, #40]	; (800d35c <Cursor_4+0x2fc>)
 800d332:	6013      	str	r3, [r2, #0]
 800d334:	4b09      	ldr	r3, [pc, #36]	; (800d35c <Cursor_4+0x2fc>)
 800d336:	681b      	ldr	r3, [r3, #0]
 800d338:	2b0a      	cmp	r3, #10
 800d33a:	d000      	beq.n	800d33e <Cursor_4+0x2de>
 800d33c:	e697      	b.n	800d06e <Cursor_4+0xe>
 800d33e:	bf00      	nop
 800d340:	370c      	adds	r7, #12
 800d342:	46bd      	mov	sp, r7
 800d344:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d348:	4770      	bx	lr
 800d34a:	bf00      	nop
 800d34c:	20000a34 	.word	0x20000a34
 800d350:	20000bf4 	.word	0x20000bf4
 800d354:	20000be4 	.word	0x20000be4
 800d358:	20000be8 	.word	0x20000be8
 800d35c:	20000a3c 	.word	0x20000a3c

0800d360 <Send_LCD>:
 800d360:	b580      	push	{r7, lr}
 800d362:	b082      	sub	sp, #8
 800d364:	af00      	add	r7, sp, #0
 800d366:	6078      	str	r0, [r7, #4]
 800d368:	4a12      	ldr	r2, [pc, #72]	; (800d3b4 <Send_LCD+0x54>)
 800d36a:	4b13      	ldr	r3, [pc, #76]	; (800d3b8 <Send_LCD+0x58>)
 800d36c:	601a      	str	r2, [r3, #0]
 800d36e:	4b13      	ldr	r3, [pc, #76]	; (800d3bc <Send_LCD+0x5c>)
 800d370:	681b      	ldr	r3, [r3, #0]
 800d372:	b21b      	sxth	r3, r3
 800d374:	2113      	movs	r1, #19
 800d376:	4618      	mov	r0, r3
 800d378:	f004 fec4 	bl	8012104 <LCD_Set_Posi>
 800d37c:	4b10      	ldr	r3, [pc, #64]	; (800d3c0 <Send_LCD+0x60>)
 800d37e:	22cb      	movs	r2, #203	; 0xcb
 800d380:	601a      	str	r2, [r3, #0]
 800d382:	4b0d      	ldr	r3, [pc, #52]	; (800d3b8 <Send_LCD+0x58>)
 800d384:	681b      	ldr	r3, [r3, #0]
 800d386:	881b      	ldrh	r3, [r3, #0]
 800d388:	4618      	mov	r0, r3
 800d38a:	f004 ff09 	bl	80121a0 <LCD_Set_Pixel>
 800d38e:	4b0a      	ldr	r3, [pc, #40]	; (800d3b8 <Send_LCD+0x58>)
 800d390:	681b      	ldr	r3, [r3, #0]
 800d392:	3302      	adds	r3, #2
 800d394:	4a08      	ldr	r2, [pc, #32]	; (800d3b8 <Send_LCD+0x58>)
 800d396:	6013      	str	r3, [r2, #0]
 800d398:	4b09      	ldr	r3, [pc, #36]	; (800d3c0 <Send_LCD+0x60>)
 800d39a:	681b      	ldr	r3, [r3, #0]
 800d39c:	3b01      	subs	r3, #1
 800d39e:	4a08      	ldr	r2, [pc, #32]	; (800d3c0 <Send_LCD+0x60>)
 800d3a0:	6013      	str	r3, [r2, #0]
 800d3a2:	4b07      	ldr	r3, [pc, #28]	; (800d3c0 <Send_LCD+0x60>)
 800d3a4:	681b      	ldr	r3, [r3, #0]
 800d3a6:	2b00      	cmp	r3, #0
 800d3a8:	d000      	beq.n	800d3ac <Send_LCD+0x4c>
 800d3aa:	e7ea      	b.n	800d382 <Send_LCD+0x22>
 800d3ac:	bf00      	nop
 800d3ae:	3708      	adds	r7, #8
 800d3b0:	46bd      	mov	sp, r7
 800d3b2:	bd80      	pop	{r7, pc}
 800d3b4:	20000bdc 	.word	0x20000bdc
 800d3b8:	20000a38 	.word	0x20000a38
 800d3bc:	20000bf4 	.word	0x20000bf4
 800d3c0:	20000be8 	.word	0x20000be8

0800d3c4 <Draw_Pop>:
 800d3c4:	b480      	push	{r7}
 800d3c6:	b083      	sub	sp, #12
 800d3c8:	af00      	add	r7, sp, #0
 800d3ca:	6078      	str	r0, [r7, #4]
 800d3cc:	4b85      	ldr	r3, [pc, #532]	; (800d5e4 <Draw_Pop+0x220>)
 800d3ce:	f04f 1201 	mov.w	r2, #65537	; 0x10001
 800d3d2:	601a      	str	r2, [r3, #0]
 800d3d4:	687b      	ldr	r3, [r7, #4]
 800d3d6:	3348      	adds	r3, #72	; 0x48
 800d3d8:	f9b3 3000 	ldrsh.w	r3, [r3]
 800d3dc:	461a      	mov	r2, r3
 800d3de:	4b82      	ldr	r3, [pc, #520]	; (800d5e8 <Draw_Pop+0x224>)
 800d3e0:	601a      	str	r2, [r3, #0]
 800d3e2:	687b      	ldr	r3, [r7, #4]
 800d3e4:	334a      	adds	r3, #74	; 0x4a
 800d3e6:	f9b3 3000 	ldrsh.w	r3, [r3]
 800d3ea:	461a      	mov	r2, r3
 800d3ec:	4b7f      	ldr	r3, [pc, #508]	; (800d5ec <Draw_Pop+0x228>)
 800d3ee:	601a      	str	r2, [r3, #0]
 800d3f0:	4b7f      	ldr	r3, [pc, #508]	; (800d5f0 <Draw_Pop+0x22c>)
 800d3f2:	681b      	ldr	r3, [r3, #0]
 800d3f4:	4a7f      	ldr	r2, [pc, #508]	; (800d5f4 <Draw_Pop+0x230>)
 800d3f6:	6013      	str	r3, [r2, #0]
 800d3f8:	4b7f      	ldr	r3, [pc, #508]	; (800d5f8 <Draw_Pop+0x234>)
 800d3fa:	681a      	ldr	r2, [r3, #0]
 800d3fc:	4b7d      	ldr	r3, [pc, #500]	; (800d5f4 <Draw_Pop+0x230>)
 800d3fe:	681b      	ldr	r3, [r3, #0]
 800d400:	429a      	cmp	r2, r3
 800d402:	d10d      	bne.n	800d420 <Draw_Pop+0x5c>
 800d404:	4b78      	ldr	r3, [pc, #480]	; (800d5e8 <Draw_Pop+0x224>)
 800d406:	681b      	ldr	r3, [r3, #0]
 800d408:	3306      	adds	r3, #6
 800d40a:	4a77      	ldr	r2, [pc, #476]	; (800d5e8 <Draw_Pop+0x224>)
 800d40c:	6013      	str	r3, [r2, #0]
 800d40e:	4b77      	ldr	r3, [pc, #476]	; (800d5ec <Draw_Pop+0x228>)
 800d410:	681b      	ldr	r3, [r3, #0]
 800d412:	3b0c      	subs	r3, #12
 800d414:	4a75      	ldr	r2, [pc, #468]	; (800d5ec <Draw_Pop+0x228>)
 800d416:	6013      	str	r3, [r2, #0]
 800d418:	4b72      	ldr	r3, [pc, #456]	; (800d5e4 <Draw_Pop+0x220>)
 800d41a:	f04f 1208 	mov.w	r2, #524296	; 0x80008
 800d41e:	601a      	str	r2, [r3, #0]
 800d420:	4b73      	ldr	r3, [pc, #460]	; (800d5f0 <Draw_Pop+0x22c>)
 800d422:	681b      	ldr	r3, [r3, #0]
 800d424:	3301      	adds	r3, #1
 800d426:	4a73      	ldr	r2, [pc, #460]	; (800d5f4 <Draw_Pop+0x230>)
 800d428:	6013      	str	r3, [r2, #0]
 800d42a:	4b73      	ldr	r3, [pc, #460]	; (800d5f8 <Draw_Pop+0x234>)
 800d42c:	681a      	ldr	r2, [r3, #0]
 800d42e:	4b71      	ldr	r3, [pc, #452]	; (800d5f4 <Draw_Pop+0x230>)
 800d430:	681b      	ldr	r3, [r3, #0]
 800d432:	429a      	cmp	r2, r3
 800d434:	d10d      	bne.n	800d452 <Draw_Pop+0x8e>
 800d436:	4b6c      	ldr	r3, [pc, #432]	; (800d5e8 <Draw_Pop+0x224>)
 800d438:	681b      	ldr	r3, [r3, #0]
 800d43a:	3304      	adds	r3, #4
 800d43c:	4a6a      	ldr	r2, [pc, #424]	; (800d5e8 <Draw_Pop+0x224>)
 800d43e:	6013      	str	r3, [r2, #0]
 800d440:	4b6a      	ldr	r3, [pc, #424]	; (800d5ec <Draw_Pop+0x228>)
 800d442:	681b      	ldr	r3, [r3, #0]
 800d444:	3b08      	subs	r3, #8
 800d446:	4a69      	ldr	r2, [pc, #420]	; (800d5ec <Draw_Pop+0x228>)
 800d448:	6013      	str	r3, [r2, #0]
 800d44a:	4b66      	ldr	r3, [pc, #408]	; (800d5e4 <Draw_Pop+0x220>)
 800d44c:	f04f 1204 	mov.w	r2, #262148	; 0x40004
 800d450:	601a      	str	r2, [r3, #0]
 800d452:	4b67      	ldr	r3, [pc, #412]	; (800d5f0 <Draw_Pop+0x22c>)
 800d454:	681b      	ldr	r3, [r3, #0]
 800d456:	3302      	adds	r3, #2
 800d458:	4a66      	ldr	r2, [pc, #408]	; (800d5f4 <Draw_Pop+0x230>)
 800d45a:	6013      	str	r3, [r2, #0]
 800d45c:	4b66      	ldr	r3, [pc, #408]	; (800d5f8 <Draw_Pop+0x234>)
 800d45e:	681a      	ldr	r2, [r3, #0]
 800d460:	4b64      	ldr	r3, [pc, #400]	; (800d5f4 <Draw_Pop+0x230>)
 800d462:	681b      	ldr	r3, [r3, #0]
 800d464:	429a      	cmp	r2, r3
 800d466:	d10d      	bne.n	800d484 <Draw_Pop+0xc0>
 800d468:	4b5f      	ldr	r3, [pc, #380]	; (800d5e8 <Draw_Pop+0x224>)
 800d46a:	681b      	ldr	r3, [r3, #0]
 800d46c:	3302      	adds	r3, #2
 800d46e:	4a5e      	ldr	r2, [pc, #376]	; (800d5e8 <Draw_Pop+0x224>)
 800d470:	6013      	str	r3, [r2, #0]
 800d472:	4b5e      	ldr	r3, [pc, #376]	; (800d5ec <Draw_Pop+0x228>)
 800d474:	681b      	ldr	r3, [r3, #0]
 800d476:	3b04      	subs	r3, #4
 800d478:	4a5c      	ldr	r2, [pc, #368]	; (800d5ec <Draw_Pop+0x228>)
 800d47a:	6013      	str	r3, [r2, #0]
 800d47c:	4b59      	ldr	r3, [pc, #356]	; (800d5e4 <Draw_Pop+0x220>)
 800d47e:	f04f 1202 	mov.w	r2, #131074	; 0x20002
 800d482:	601a      	str	r2, [r3, #0]
 800d484:	4b5d      	ldr	r3, [pc, #372]	; (800d5fc <Draw_Pop+0x238>)
 800d486:	681b      	ldr	r3, [r3, #0]
 800d488:	3b03      	subs	r3, #3
 800d48a:	4a5a      	ldr	r2, [pc, #360]	; (800d5f4 <Draw_Pop+0x230>)
 800d48c:	6013      	str	r3, [r2, #0]
 800d48e:	4b5a      	ldr	r3, [pc, #360]	; (800d5f8 <Draw_Pop+0x234>)
 800d490:	681a      	ldr	r2, [r3, #0]
 800d492:	4b58      	ldr	r3, [pc, #352]	; (800d5f4 <Draw_Pop+0x230>)
 800d494:	681b      	ldr	r3, [r3, #0]
 800d496:	429a      	cmp	r2, r3
 800d498:	d10d      	bne.n	800d4b6 <Draw_Pop+0xf2>
 800d49a:	4b53      	ldr	r3, [pc, #332]	; (800d5e8 <Draw_Pop+0x224>)
 800d49c:	681b      	ldr	r3, [r3, #0]
 800d49e:	3302      	adds	r3, #2
 800d4a0:	4a51      	ldr	r2, [pc, #324]	; (800d5e8 <Draw_Pop+0x224>)
 800d4a2:	6013      	str	r3, [r2, #0]
 800d4a4:	4b51      	ldr	r3, [pc, #324]	; (800d5ec <Draw_Pop+0x228>)
 800d4a6:	681b      	ldr	r3, [r3, #0]
 800d4a8:	3b04      	subs	r3, #4
 800d4aa:	4a50      	ldr	r2, [pc, #320]	; (800d5ec <Draw_Pop+0x228>)
 800d4ac:	6013      	str	r3, [r2, #0]
 800d4ae:	4b4d      	ldr	r3, [pc, #308]	; (800d5e4 <Draw_Pop+0x220>)
 800d4b0:	f04f 1202 	mov.w	r2, #131074	; 0x20002
 800d4b4:	601a      	str	r2, [r3, #0]
 800d4b6:	4b51      	ldr	r3, [pc, #324]	; (800d5fc <Draw_Pop+0x238>)
 800d4b8:	681b      	ldr	r3, [r3, #0]
 800d4ba:	3b02      	subs	r3, #2
 800d4bc:	4a4d      	ldr	r2, [pc, #308]	; (800d5f4 <Draw_Pop+0x230>)
 800d4be:	6013      	str	r3, [r2, #0]
 800d4c0:	4b4d      	ldr	r3, [pc, #308]	; (800d5f8 <Draw_Pop+0x234>)
 800d4c2:	681a      	ldr	r2, [r3, #0]
 800d4c4:	4b4b      	ldr	r3, [pc, #300]	; (800d5f4 <Draw_Pop+0x230>)
 800d4c6:	681b      	ldr	r3, [r3, #0]
 800d4c8:	429a      	cmp	r2, r3
 800d4ca:	d10d      	bne.n	800d4e8 <Draw_Pop+0x124>
 800d4cc:	4b46      	ldr	r3, [pc, #280]	; (800d5e8 <Draw_Pop+0x224>)
 800d4ce:	681b      	ldr	r3, [r3, #0]
 800d4d0:	3304      	adds	r3, #4
 800d4d2:	4a45      	ldr	r2, [pc, #276]	; (800d5e8 <Draw_Pop+0x224>)
 800d4d4:	6013      	str	r3, [r2, #0]
 800d4d6:	4b45      	ldr	r3, [pc, #276]	; (800d5ec <Draw_Pop+0x228>)
 800d4d8:	681b      	ldr	r3, [r3, #0]
 800d4da:	3b08      	subs	r3, #8
 800d4dc:	4a43      	ldr	r2, [pc, #268]	; (800d5ec <Draw_Pop+0x228>)
 800d4de:	6013      	str	r3, [r2, #0]
 800d4e0:	4b40      	ldr	r3, [pc, #256]	; (800d5e4 <Draw_Pop+0x220>)
 800d4e2:	f04f 1204 	mov.w	r2, #262148	; 0x40004
 800d4e6:	601a      	str	r2, [r3, #0]
 800d4e8:	4b44      	ldr	r3, [pc, #272]	; (800d5fc <Draw_Pop+0x238>)
 800d4ea:	681b      	ldr	r3, [r3, #0]
 800d4ec:	3b01      	subs	r3, #1
 800d4ee:	4a41      	ldr	r2, [pc, #260]	; (800d5f4 <Draw_Pop+0x230>)
 800d4f0:	6013      	str	r3, [r2, #0]
 800d4f2:	4b41      	ldr	r3, [pc, #260]	; (800d5f8 <Draw_Pop+0x234>)
 800d4f4:	681a      	ldr	r2, [r3, #0]
 800d4f6:	4b3f      	ldr	r3, [pc, #252]	; (800d5f4 <Draw_Pop+0x230>)
 800d4f8:	681b      	ldr	r3, [r3, #0]
 800d4fa:	429a      	cmp	r2, r3
 800d4fc:	d10d      	bne.n	800d51a <Draw_Pop+0x156>
 800d4fe:	4b3a      	ldr	r3, [pc, #232]	; (800d5e8 <Draw_Pop+0x224>)
 800d500:	681b      	ldr	r3, [r3, #0]
 800d502:	3306      	adds	r3, #6
 800d504:	4a38      	ldr	r2, [pc, #224]	; (800d5e8 <Draw_Pop+0x224>)
 800d506:	6013      	str	r3, [r2, #0]
 800d508:	4b38      	ldr	r3, [pc, #224]	; (800d5ec <Draw_Pop+0x228>)
 800d50a:	681b      	ldr	r3, [r3, #0]
 800d50c:	3b0c      	subs	r3, #12
 800d50e:	4a37      	ldr	r2, [pc, #220]	; (800d5ec <Draw_Pop+0x228>)
 800d510:	6013      	str	r3, [r2, #0]
 800d512:	4b34      	ldr	r3, [pc, #208]	; (800d5e4 <Draw_Pop+0x220>)
 800d514:	f04f 1208 	mov.w	r2, #524296	; 0x80008
 800d518:	601a      	str	r2, [r3, #0]
 800d51a:	4b33      	ldr	r3, [pc, #204]	; (800d5e8 <Draw_Pop+0x224>)
 800d51c:	681b      	ldr	r3, [r3, #0]
 800d51e:	085b      	lsrs	r3, r3, #1
 800d520:	f1c3 03cc 	rsb	r3, r3, #204	; 0xcc
 800d524:	005b      	lsls	r3, r3, #1
 800d526:	4a36      	ldr	r2, [pc, #216]	; (800d600 <Draw_Pop+0x23c>)
 800d528:	4413      	add	r3, r2
 800d52a:	4a36      	ldr	r2, [pc, #216]	; (800d604 <Draw_Pop+0x240>)
 800d52c:	6013      	str	r3, [r2, #0]
 800d52e:	687b      	ldr	r3, [r7, #4]
 800d530:	334e      	adds	r3, #78	; 0x4e
 800d532:	f9b3 3000 	ldrsh.w	r3, [r3]
 800d536:	461a      	mov	r2, r3
 800d538:	4b33      	ldr	r3, [pc, #204]	; (800d608 <Draw_Pop+0x244>)
 800d53a:	601a      	str	r2, [r3, #0]
 800d53c:	687b      	ldr	r3, [r7, #4]
 800d53e:	3350      	adds	r3, #80	; 0x50
 800d540:	f9b3 3000 	ldrsh.w	r3, [r3]
 800d544:	461a      	mov	r2, r3
 800d546:	4b31      	ldr	r3, [pc, #196]	; (800d60c <Draw_Pop+0x248>)
 800d548:	601a      	str	r2, [r3, #0]
 800d54a:	4b31      	ldr	r3, [pc, #196]	; (800d610 <Draw_Pop+0x24c>)
 800d54c:	681b      	ldr	r3, [r3, #0]
 800d54e:	881b      	ldrh	r3, [r3, #0]
 800d550:	461a      	mov	r2, r3
 800d552:	4b28      	ldr	r3, [pc, #160]	; (800d5f4 <Draw_Pop+0x230>)
 800d554:	601a      	str	r2, [r3, #0]
 800d556:	4b2e      	ldr	r3, [pc, #184]	; (800d610 <Draw_Pop+0x24c>)
 800d558:	681b      	ldr	r3, [r3, #0]
 800d55a:	3302      	adds	r3, #2
 800d55c:	4a2c      	ldr	r2, [pc, #176]	; (800d610 <Draw_Pop+0x24c>)
 800d55e:	6013      	str	r3, [r2, #0]
 800d560:	4b29      	ldr	r3, [pc, #164]	; (800d608 <Draw_Pop+0x244>)
 800d562:	681b      	ldr	r3, [r3, #0]
 800d564:	2b00      	cmp	r3, #0
 800d566:	d100      	bne.n	800d56a <Draw_Pop+0x1a6>
 800d568:	e054      	b.n	800d614 <Draw_Pop+0x250>
 800d56a:	bf00      	nop
 800d56c:	4b21      	ldr	r3, [pc, #132]	; (800d5f4 <Draw_Pop+0x230>)
 800d56e:	681a      	ldr	r2, [r3, #0]
 800d570:	4b1c      	ldr	r3, [pc, #112]	; (800d5e4 <Draw_Pop+0x220>)
 800d572:	681b      	ldr	r3, [r3, #0]
 800d574:	4013      	ands	r3, r2
 800d576:	2b00      	cmp	r3, #0
 800d578:	d006      	beq.n	800d588 <Draw_Pop+0x1c4>
 800d57a:	4b22      	ldr	r3, [pc, #136]	; (800d604 <Draw_Pop+0x240>)
 800d57c:	681b      	ldr	r3, [r3, #0]
 800d57e:	781b      	ldrb	r3, [r3, #0]
 800d580:	461a      	mov	r2, r3
 800d582:	4b22      	ldr	r3, [pc, #136]	; (800d60c <Draw_Pop+0x248>)
 800d584:	601a      	str	r2, [r3, #0]
 800d586:	e005      	b.n	800d594 <Draw_Pop+0x1d0>
 800d588:	4b1e      	ldr	r3, [pc, #120]	; (800d604 <Draw_Pop+0x240>)
 800d58a:	681b      	ldr	r3, [r3, #0]
 800d58c:	781b      	ldrb	r3, [r3, #0]
 800d58e:	461a      	mov	r2, r3
 800d590:	4b1d      	ldr	r3, [pc, #116]	; (800d608 <Draw_Pop+0x244>)
 800d592:	601a      	str	r2, [r3, #0]
 800d594:	4b1b      	ldr	r3, [pc, #108]	; (800d604 <Draw_Pop+0x240>)
 800d596:	681b      	ldr	r3, [r3, #0]
 800d598:	3301      	adds	r3, #1
 800d59a:	4a1a      	ldr	r2, [pc, #104]	; (800d604 <Draw_Pop+0x240>)
 800d59c:	6013      	str	r3, [r2, #0]
 800d59e:	4b13      	ldr	r3, [pc, #76]	; (800d5ec <Draw_Pop+0x228>)
 800d5a0:	681b      	ldr	r3, [r3, #0]
 800d5a2:	3b02      	subs	r3, #2
 800d5a4:	4a11      	ldr	r2, [pc, #68]	; (800d5ec <Draw_Pop+0x228>)
 800d5a6:	6013      	str	r3, [r2, #0]
 800d5a8:	4b10      	ldr	r3, [pc, #64]	; (800d5ec <Draw_Pop+0x228>)
 800d5aa:	681b      	ldr	r3, [r3, #0]
 800d5ac:	2b00      	cmp	r3, #0
 800d5ae:	d066      	beq.n	800d67e <Draw_Pop+0x2ba>
 800d5b0:	4b0c      	ldr	r3, [pc, #48]	; (800d5e4 <Draw_Pop+0x220>)
 800d5b2:	681b      	ldr	r3, [r3, #0]
 800d5b4:	2b00      	cmp	r3, #0
 800d5b6:	da0f      	bge.n	800d5d8 <Draw_Pop+0x214>
 800d5b8:	4b15      	ldr	r3, [pc, #84]	; (800d610 <Draw_Pop+0x24c>)
 800d5ba:	681b      	ldr	r3, [r3, #0]
 800d5bc:	881b      	ldrh	r3, [r3, #0]
 800d5be:	461a      	mov	r2, r3
 800d5c0:	4b0c      	ldr	r3, [pc, #48]	; (800d5f4 <Draw_Pop+0x230>)
 800d5c2:	601a      	str	r2, [r3, #0]
 800d5c4:	4b12      	ldr	r3, [pc, #72]	; (800d610 <Draw_Pop+0x24c>)
 800d5c6:	681b      	ldr	r3, [r3, #0]
 800d5c8:	3302      	adds	r3, #2
 800d5ca:	4a11      	ldr	r2, [pc, #68]	; (800d610 <Draw_Pop+0x24c>)
 800d5cc:	6013      	str	r3, [r2, #0]
 800d5ce:	4b05      	ldr	r3, [pc, #20]	; (800d5e4 <Draw_Pop+0x220>)
 800d5d0:	f04f 1201 	mov.w	r2, #65537	; 0x10001
 800d5d4:	601a      	str	r2, [r3, #0]
 800d5d6:	e7c9      	b.n	800d56c <Draw_Pop+0x1a8>
 800d5d8:	4b02      	ldr	r3, [pc, #8]	; (800d5e4 <Draw_Pop+0x220>)
 800d5da:	681b      	ldr	r3, [r3, #0]
 800d5dc:	005b      	lsls	r3, r3, #1
 800d5de:	4a01      	ldr	r2, [pc, #4]	; (800d5e4 <Draw_Pop+0x220>)
 800d5e0:	6013      	str	r3, [r2, #0]
 800d5e2:	e7c3      	b.n	800d56c <Draw_Pop+0x1a8>
 800d5e4:	20000bfc 	.word	0x20000bfc
 800d5e8:	20000a38 	.word	0x20000a38
 800d5ec:	20000be4 	.word	0x20000be4
 800d5f0:	20000be0 	.word	0x20000be0
 800d5f4:	20000a3c 	.word	0x20000a3c
 800d5f8:	20000bf4 	.word	0x20000bf4
 800d5fc:	20000bf0 	.word	0x20000bf0
 800d600:	20000a44 	.word	0x20000a44
 800d604:	20000be8 	.word	0x20000be8
 800d608:	20000a34 	.word	0x20000a34
 800d60c:	20000bf8 	.word	0x20000bf8
 800d610:	20000c00 	.word	0x20000c00
 800d614:	4b1e      	ldr	r3, [pc, #120]	; (800d690 <Draw_Pop+0x2cc>)
 800d616:	681a      	ldr	r2, [r3, #0]
 800d618:	4b1e      	ldr	r3, [pc, #120]	; (800d694 <Draw_Pop+0x2d0>)
 800d61a:	681b      	ldr	r3, [r3, #0]
 800d61c:	4013      	ands	r3, r2
 800d61e:	2b00      	cmp	r3, #0
 800d620:	d005      	beq.n	800d62e <Draw_Pop+0x26a>
 800d622:	4b1d      	ldr	r3, [pc, #116]	; (800d698 <Draw_Pop+0x2d4>)
 800d624:	681b      	ldr	r3, [r3, #0]
 800d626:	781b      	ldrb	r3, [r3, #0]
 800d628:	461a      	mov	r2, r3
 800d62a:	4b1c      	ldr	r3, [pc, #112]	; (800d69c <Draw_Pop+0x2d8>)
 800d62c:	601a      	str	r2, [r3, #0]
 800d62e:	4b1a      	ldr	r3, [pc, #104]	; (800d698 <Draw_Pop+0x2d4>)
 800d630:	681b      	ldr	r3, [r3, #0]
 800d632:	3301      	adds	r3, #1
 800d634:	4a18      	ldr	r2, [pc, #96]	; (800d698 <Draw_Pop+0x2d4>)
 800d636:	6013      	str	r3, [r2, #0]
 800d638:	4b19      	ldr	r3, [pc, #100]	; (800d6a0 <Draw_Pop+0x2dc>)
 800d63a:	681b      	ldr	r3, [r3, #0]
 800d63c:	3b02      	subs	r3, #2
 800d63e:	4a18      	ldr	r2, [pc, #96]	; (800d6a0 <Draw_Pop+0x2dc>)
 800d640:	6013      	str	r3, [r2, #0]
 800d642:	4b17      	ldr	r3, [pc, #92]	; (800d6a0 <Draw_Pop+0x2dc>)
 800d644:	681b      	ldr	r3, [r3, #0]
 800d646:	2b00      	cmp	r3, #0
 800d648:	d01b      	beq.n	800d682 <Draw_Pop+0x2be>
 800d64a:	4b12      	ldr	r3, [pc, #72]	; (800d694 <Draw_Pop+0x2d0>)
 800d64c:	681b      	ldr	r3, [r3, #0]
 800d64e:	2b00      	cmp	r3, #0
 800d650:	da0f      	bge.n	800d672 <Draw_Pop+0x2ae>
 800d652:	4b14      	ldr	r3, [pc, #80]	; (800d6a4 <Draw_Pop+0x2e0>)
 800d654:	681b      	ldr	r3, [r3, #0]
 800d656:	881b      	ldrh	r3, [r3, #0]
 800d658:	461a      	mov	r2, r3
 800d65a:	4b13      	ldr	r3, [pc, #76]	; (800d6a8 <Draw_Pop+0x2e4>)
 800d65c:	601a      	str	r2, [r3, #0]
 800d65e:	4b11      	ldr	r3, [pc, #68]	; (800d6a4 <Draw_Pop+0x2e0>)
 800d660:	681b      	ldr	r3, [r3, #0]
 800d662:	3302      	adds	r3, #2
 800d664:	4a0f      	ldr	r2, [pc, #60]	; (800d6a4 <Draw_Pop+0x2e0>)
 800d666:	6013      	str	r3, [r2, #0]
 800d668:	4b0a      	ldr	r3, [pc, #40]	; (800d694 <Draw_Pop+0x2d0>)
 800d66a:	f04f 1201 	mov.w	r2, #65537	; 0x10001
 800d66e:	601a      	str	r2, [r3, #0]
 800d670:	e7d0      	b.n	800d614 <Draw_Pop+0x250>
 800d672:	4b08      	ldr	r3, [pc, #32]	; (800d694 <Draw_Pop+0x2d0>)
 800d674:	681b      	ldr	r3, [r3, #0]
 800d676:	005b      	lsls	r3, r3, #1
 800d678:	4a06      	ldr	r2, [pc, #24]	; (800d694 <Draw_Pop+0x2d0>)
 800d67a:	6013      	str	r3, [r2, #0]
 800d67c:	e7ca      	b.n	800d614 <Draw_Pop+0x250>
 800d67e:	bf00      	nop
 800d680:	e000      	b.n	800d684 <Draw_Pop+0x2c0>
 800d682:	bf00      	nop
 800d684:	370c      	adds	r7, #12
 800d686:	46bd      	mov	sp, r7
 800d688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d68c:	4770      	bx	lr
 800d68e:	bf00      	nop
 800d690:	20000bf4 	.word	0x20000bf4
 800d694:	20000bfc 	.word	0x20000bfc
 800d698:	20000be8 	.word	0x20000be8
 800d69c:	20000bf8 	.word	0x20000bf8
 800d6a0:	20000be4 	.word	0x20000be4
 800d6a4:	20000c00 	.word	0x20000c00
 800d6a8:	20000a3c 	.word	0x20000a3c

0800d6ac <DrawWindow>:
 800d6ac:	b580      	push	{r7, lr}
 800d6ae:	b082      	sub	sp, #8
 800d6b0:	af00      	add	r7, sp, #0
 800d6b2:	6078      	str	r0, [r7, #4]
 800d6b4:	6039      	str	r1, [r7, #0]
 800d6b6:	687b      	ldr	r3, [r7, #4]
 800d6b8:	4a9b      	ldr	r2, [pc, #620]	; (800d928 <DrawWindow+0x27c>)
 800d6ba:	6013      	str	r3, [r2, #0]
 800d6bc:	4b9b      	ldr	r3, [pc, #620]	; (800d92c <DrawWindow+0x280>)
 800d6be:	2200      	movs	r2, #0
 800d6c0:	601a      	str	r2, [r3, #0]
 800d6c2:	687b      	ldr	r3, [r7, #4]
 800d6c4:	f503 7361 	add.w	r3, r3, #900	; 0x384
 800d6c8:	4a99      	ldr	r2, [pc, #612]	; (800d930 <DrawWindow+0x284>)
 800d6ca:	6013      	str	r3, [r2, #0]
 800d6cc:	683b      	ldr	r3, [r7, #0]
 800d6ce:	3344      	adds	r3, #68	; 0x44
 800d6d0:	f9b3 3000 	ldrsh.w	r3, [r3]
 800d6d4:	461a      	mov	r2, r3
 800d6d6:	4b97      	ldr	r3, [pc, #604]	; (800d934 <DrawWindow+0x288>)
 800d6d8:	601a      	str	r2, [r3, #0]
 800d6da:	683b      	ldr	r3, [r7, #0]
 800d6dc:	3346      	adds	r3, #70	; 0x46
 800d6de:	f9b3 3000 	ldrsh.w	r3, [r3]
 800d6e2:	461a      	mov	r2, r3
 800d6e4:	4b94      	ldr	r3, [pc, #592]	; (800d938 <DrawWindow+0x28c>)
 800d6e6:	601a      	str	r2, [r3, #0]
 800d6e8:	4b92      	ldr	r3, [pc, #584]	; (800d934 <DrawWindow+0x288>)
 800d6ea:	681a      	ldr	r2, [r3, #0]
 800d6ec:	4b92      	ldr	r3, [pc, #584]	; (800d938 <DrawWindow+0x28c>)
 800d6ee:	681b      	ldr	r3, [r3, #0]
 800d6f0:	4413      	add	r3, r2
 800d6f2:	4a91      	ldr	r2, [pc, #580]	; (800d938 <DrawWindow+0x28c>)
 800d6f4:	6013      	str	r3, [r2, #0]
 800d6f6:	4b8d      	ldr	r3, [pc, #564]	; (800d92c <DrawWindow+0x280>)
 800d6f8:	681b      	ldr	r3, [r3, #0]
 800d6fa:	2b00      	cmp	r3, #0
 800d6fc:	d102      	bne.n	800d704 <DrawWindow+0x58>
 800d6fe:	f7ff f93b 	bl	800c978 <Buld_0>
 800d702:	e064      	b.n	800d7ce <DrawWindow+0x122>
 800d704:	4b89      	ldr	r3, [pc, #548]	; (800d92c <DrawWindow+0x280>)
 800d706:	681b      	ldr	r3, [r3, #0]
 800d708:	f5b3 7f97 	cmp.w	r3, #302	; 0x12e
 800d70c:	d102      	bne.n	800d714 <DrawWindow+0x68>
 800d70e:	f7ff f933 	bl	800c978 <Buld_0>
 800d712:	e05c      	b.n	800d7ce <DrawWindow+0x122>
 800d714:	4b85      	ldr	r3, [pc, #532]	; (800d92c <DrawWindow+0x280>)
 800d716:	681b      	ldr	r3, [r3, #0]
 800d718:	2b01      	cmp	r3, #1
 800d71a:	d102      	bne.n	800d722 <DrawWindow+0x76>
 800d71c:	f7ff f938 	bl	800c990 <Buld_1>
 800d720:	e055      	b.n	800d7ce <DrawWindow+0x122>
 800d722:	4b86      	ldr	r3, [pc, #536]	; (800d93c <DrawWindow+0x290>)
 800d724:	f240 122d 	movw	r2, #301	; 0x12d
 800d728:	601a      	str	r2, [r3, #0]
 800d72a:	4b80      	ldr	r3, [pc, #512]	; (800d92c <DrawWindow+0x280>)
 800d72c:	681a      	ldr	r2, [r3, #0]
 800d72e:	4b83      	ldr	r3, [pc, #524]	; (800d93c <DrawWindow+0x290>)
 800d730:	681b      	ldr	r3, [r3, #0]
 800d732:	429a      	cmp	r2, r3
 800d734:	d102      	bne.n	800d73c <DrawWindow+0x90>
 800d736:	f7ff f92b 	bl	800c990 <Buld_1>
 800d73a:	e048      	b.n	800d7ce <DrawWindow+0x122>
 800d73c:	4b7b      	ldr	r3, [pc, #492]	; (800d92c <DrawWindow+0x280>)
 800d73e:	681b      	ldr	r3, [r3, #0]
 800d740:	3b01      	subs	r3, #1
 800d742:	4a7e      	ldr	r2, [pc, #504]	; (800d93c <DrawWindow+0x290>)
 800d744:	6013      	str	r3, [r2, #0]
 800d746:	4b7e      	ldr	r3, [pc, #504]	; (800d940 <DrawWindow+0x294>)
 800d748:	2219      	movs	r2, #25
 800d74a:	601a      	str	r2, [r3, #0]
 800d74c:	4b7b      	ldr	r3, [pc, #492]	; (800d93c <DrawWindow+0x290>)
 800d74e:	681a      	ldr	r2, [r3, #0]
 800d750:	4b7b      	ldr	r3, [pc, #492]	; (800d940 <DrawWindow+0x294>)
 800d752:	681b      	ldr	r3, [r3, #0]
 800d754:	fbb2 f3f3 	udiv	r3, r2, r3
 800d758:	4a7a      	ldr	r2, [pc, #488]	; (800d944 <DrawWindow+0x298>)
 800d75a:	6013      	str	r3, [r2, #0]
 800d75c:	4b79      	ldr	r3, [pc, #484]	; (800d944 <DrawWindow+0x298>)
 800d75e:	681b      	ldr	r3, [r3, #0]
 800d760:	4a77      	ldr	r2, [pc, #476]	; (800d940 <DrawWindow+0x294>)
 800d762:	6812      	ldr	r2, [r2, #0]
 800d764:	fb02 f303 	mul.w	r3, r2, r3
 800d768:	4a76      	ldr	r2, [pc, #472]	; (800d944 <DrawWindow+0x298>)
 800d76a:	6013      	str	r3, [r2, #0]
 800d76c:	4b73      	ldr	r3, [pc, #460]	; (800d93c <DrawWindow+0x290>)
 800d76e:	681a      	ldr	r2, [r3, #0]
 800d770:	4b74      	ldr	r3, [pc, #464]	; (800d944 <DrawWindow+0x298>)
 800d772:	681b      	ldr	r3, [r3, #0]
 800d774:	1ad3      	subs	r3, r2, r3
 800d776:	4a73      	ldr	r2, [pc, #460]	; (800d944 <DrawWindow+0x298>)
 800d778:	6013      	str	r3, [r2, #0]
 800d77a:	4b72      	ldr	r3, [pc, #456]	; (800d944 <DrawWindow+0x298>)
 800d77c:	681b      	ldr	r3, [r3, #0]
 800d77e:	2b00      	cmp	r3, #0
 800d780:	d102      	bne.n	800d788 <DrawWindow+0xdc>
 800d782:	f7ff f975 	bl	800ca70 <Buld_4>
 800d786:	e022      	b.n	800d7ce <DrawWindow+0x122>
 800d788:	4b6d      	ldr	r3, [pc, #436]	; (800d940 <DrawWindow+0x294>)
 800d78a:	2205      	movs	r2, #5
 800d78c:	601a      	str	r2, [r3, #0]
 800d78e:	4b6b      	ldr	r3, [pc, #428]	; (800d93c <DrawWindow+0x290>)
 800d790:	681a      	ldr	r2, [r3, #0]
 800d792:	4b6b      	ldr	r3, [pc, #428]	; (800d940 <DrawWindow+0x294>)
 800d794:	681b      	ldr	r3, [r3, #0]
 800d796:	fbb2 f3f3 	udiv	r3, r2, r3
 800d79a:	4a6a      	ldr	r2, [pc, #424]	; (800d944 <DrawWindow+0x298>)
 800d79c:	6013      	str	r3, [r2, #0]
 800d79e:	4b69      	ldr	r3, [pc, #420]	; (800d944 <DrawWindow+0x298>)
 800d7a0:	681b      	ldr	r3, [r3, #0]
 800d7a2:	4a67      	ldr	r2, [pc, #412]	; (800d940 <DrawWindow+0x294>)
 800d7a4:	6812      	ldr	r2, [r2, #0]
 800d7a6:	fb02 f303 	mul.w	r3, r2, r3
 800d7aa:	4a66      	ldr	r2, [pc, #408]	; (800d944 <DrawWindow+0x298>)
 800d7ac:	6013      	str	r3, [r2, #0]
 800d7ae:	4b63      	ldr	r3, [pc, #396]	; (800d93c <DrawWindow+0x290>)
 800d7b0:	681a      	ldr	r2, [r3, #0]
 800d7b2:	4b64      	ldr	r3, [pc, #400]	; (800d944 <DrawWindow+0x298>)
 800d7b4:	681b      	ldr	r3, [r3, #0]
 800d7b6:	1ad3      	subs	r3, r2, r3
 800d7b8:	4a62      	ldr	r2, [pc, #392]	; (800d944 <DrawWindow+0x298>)
 800d7ba:	6013      	str	r3, [r2, #0]
 800d7bc:	4b61      	ldr	r3, [pc, #388]	; (800d944 <DrawWindow+0x298>)
 800d7be:	681b      	ldr	r3, [r3, #0]
 800d7c0:	2b00      	cmp	r3, #0
 800d7c2:	d102      	bne.n	800d7ca <DrawWindow+0x11e>
 800d7c4:	f7ff f92e 	bl	800ca24 <Buld_3>
 800d7c8:	e001      	b.n	800d7ce <DrawWindow+0x122>
 800d7ca:	f7ff f909 	bl	800c9e0 <Buld_2>
 800d7ce:	4b57      	ldr	r3, [pc, #348]	; (800d92c <DrawWindow+0x280>)
 800d7d0:	681b      	ldr	r3, [r3, #0]
 800d7d2:	2b02      	cmp	r3, #2
 800d7d4:	d96c      	bls.n	800d8b0 <DrawWindow+0x204>
 800d7d6:	4b55      	ldr	r3, [pc, #340]	; (800d92c <DrawWindow+0x280>)
 800d7d8:	681b      	ldr	r3, [r3, #0]
 800d7da:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 800d7de:	d267      	bcs.n	800d8b0 <DrawWindow+0x204>
 800d7e0:	683b      	ldr	r3, [r7, #0]
 800d7e2:	3306      	adds	r3, #6
 800d7e4:	f9b3 3000 	ldrsh.w	r3, [r3]
 800d7e8:	461a      	mov	r2, r3
 800d7ea:	4b54      	ldr	r3, [pc, #336]	; (800d93c <DrawWindow+0x290>)
 800d7ec:	601a      	str	r2, [r3, #0]
 800d7ee:	4b53      	ldr	r3, [pc, #332]	; (800d93c <DrawWindow+0x290>)
 800d7f0:	681b      	ldr	r3, [r3, #0]
 800d7f2:	f003 0304 	and.w	r3, r3, #4
 800d7f6:	2b00      	cmp	r3, #0
 800d7f8:	d10f      	bne.n	800d81a <DrawWindow+0x16e>
 800d7fa:	4b50      	ldr	r3, [pc, #320]	; (800d93c <DrawWindow+0x290>)
 800d7fc:	222e      	movs	r2, #46	; 0x2e
 800d7fe:	601a      	str	r2, [r3, #0]
 800d800:	683b      	ldr	r3, [r7, #0]
 800d802:	331a      	adds	r3, #26
 800d804:	f9b3 3000 	ldrsh.w	r3, [r3]
 800d808:	461a      	mov	r2, r3
 800d80a:	4b4f      	ldr	r3, [pc, #316]	; (800d948 <DrawWindow+0x29c>)
 800d80c:	601a      	str	r2, [r3, #0]
 800d80e:	4b4f      	ldr	r3, [pc, #316]	; (800d94c <DrawWindow+0x2a0>)
 800d810:	2208      	movs	r2, #8
 800d812:	601a      	str	r2, [r3, #0]
 800d814:	2001      	movs	r0, #1
 800d816:	f7ff f951 	bl	800cabc <Draw_Digit_Analog>
 800d81a:	683b      	ldr	r3, [r7, #0]
 800d81c:	3304      	adds	r3, #4
 800d81e:	f9b3 3000 	ldrsh.w	r3, [r3]
 800d822:	461a      	mov	r2, r3
 800d824:	4b45      	ldr	r3, [pc, #276]	; (800d93c <DrawWindow+0x290>)
 800d826:	601a      	str	r2, [r3, #0]
 800d828:	4b44      	ldr	r3, [pc, #272]	; (800d93c <DrawWindow+0x290>)
 800d82a:	681b      	ldr	r3, [r3, #0]
 800d82c:	f003 0304 	and.w	r3, r3, #4
 800d830:	2b00      	cmp	r3, #0
 800d832:	d10f      	bne.n	800d854 <DrawWindow+0x1a8>
 800d834:	4b41      	ldr	r3, [pc, #260]	; (800d93c <DrawWindow+0x290>)
 800d836:	222c      	movs	r2, #44	; 0x2c
 800d838:	601a      	str	r2, [r3, #0]
 800d83a:	683b      	ldr	r3, [r7, #0]
 800d83c:	3318      	adds	r3, #24
 800d83e:	f9b3 3000 	ldrsh.w	r3, [r3]
 800d842:	461a      	mov	r2, r3
 800d844:	4b40      	ldr	r3, [pc, #256]	; (800d948 <DrawWindow+0x29c>)
 800d846:	601a      	str	r2, [r3, #0]
 800d848:	4b40      	ldr	r3, [pc, #256]	; (800d94c <DrawWindow+0x2a0>)
 800d84a:	2204      	movs	r2, #4
 800d84c:	601a      	str	r2, [r3, #0]
 800d84e:	2001      	movs	r0, #1
 800d850:	f7ff f934 	bl	800cabc <Draw_Digit_Analog>
 800d854:	683b      	ldr	r3, [r7, #0]
 800d856:	3302      	adds	r3, #2
 800d858:	f9b3 3000 	ldrsh.w	r3, [r3]
 800d85c:	461a      	mov	r2, r3
 800d85e:	4b37      	ldr	r3, [pc, #220]	; (800d93c <DrawWindow+0x290>)
 800d860:	601a      	str	r2, [r3, #0]
 800d862:	4b36      	ldr	r3, [pc, #216]	; (800d93c <DrawWindow+0x290>)
 800d864:	681b      	ldr	r3, [r3, #0]
 800d866:	f003 0304 	and.w	r3, r3, #4
 800d86a:	2b00      	cmp	r3, #0
 800d86c:	d10a      	bne.n	800d884 <DrawWindow+0x1d8>
 800d86e:	4b33      	ldr	r3, [pc, #204]	; (800d93c <DrawWindow+0x290>)
 800d870:	222a      	movs	r2, #42	; 0x2a
 800d872:	601a      	str	r2, [r3, #0]
 800d874:	687b      	ldr	r3, [r7, #4]
 800d876:	f503 7396 	add.w	r3, r3, #300	; 0x12c
 800d87a:	4a33      	ldr	r2, [pc, #204]	; (800d948 <DrawWindow+0x29c>)
 800d87c:	6013      	str	r3, [r2, #0]
 800d87e:	2000      	movs	r0, #0
 800d880:	f7ff f91c 	bl	800cabc <Draw_Digit_Analog>
 800d884:	683b      	ldr	r3, [r7, #0]
 800d886:	f9b3 3000 	ldrsh.w	r3, [r3]
 800d88a:	461a      	mov	r2, r3
 800d88c:	4b2b      	ldr	r3, [pc, #172]	; (800d93c <DrawWindow+0x290>)
 800d88e:	601a      	str	r2, [r3, #0]
 800d890:	4b2a      	ldr	r3, [pc, #168]	; (800d93c <DrawWindow+0x290>)
 800d892:	681b      	ldr	r3, [r3, #0]
 800d894:	f003 0304 	and.w	r3, r3, #4
 800d898:	2b00      	cmp	r3, #0
 800d89a:	d10b      	bne.n	800d8b4 <DrawWindow+0x208>
 800d89c:	4b27      	ldr	r3, [pc, #156]	; (800d93c <DrawWindow+0x290>)
 800d89e:	2228      	movs	r2, #40	; 0x28
 800d8a0:	601a      	str	r2, [r3, #0]
 800d8a2:	4a29      	ldr	r2, [pc, #164]	; (800d948 <DrawWindow+0x29c>)
 800d8a4:	687b      	ldr	r3, [r7, #4]
 800d8a6:	6013      	str	r3, [r2, #0]
 800d8a8:	2000      	movs	r0, #0
 800d8aa:	f7ff f907 	bl	800cabc <Draw_Digit_Analog>
 800d8ae:	e002      	b.n	800d8b6 <DrawWindow+0x20a>
 800d8b0:	bf00      	nop
 800d8b2:	e000      	b.n	800d8b6 <DrawWindow+0x20a>
 800d8b4:	bf00      	nop
 800d8b6:	4b1d      	ldr	r3, [pc, #116]	; (800d92c <DrawWindow+0x280>)
 800d8b8:	681b      	ldr	r3, [r3, #0]
 800d8ba:	2b00      	cmp	r3, #0
 800d8bc:	d103      	bne.n	800d8c6 <DrawWindow+0x21a>
 800d8be:	6838      	ldr	r0, [r7, #0]
 800d8c0:	f7ff fa14 	bl	800ccec <Cursor_0>
 800d8c4:	e047      	b.n	800d956 <DrawWindow+0x2aa>
 800d8c6:	4b19      	ldr	r3, [pc, #100]	; (800d92c <DrawWindow+0x280>)
 800d8c8:	681b      	ldr	r3, [r3, #0]
 800d8ca:	f5b3 7f97 	cmp.w	r3, #302	; 0x12e
 800d8ce:	d103      	bne.n	800d8d8 <DrawWindow+0x22c>
 800d8d0:	6838      	ldr	r0, [r7, #0]
 800d8d2:	f7ff fa0b 	bl	800ccec <Cursor_0>
 800d8d6:	e03e      	b.n	800d956 <DrawWindow+0x2aa>
 800d8d8:	4b14      	ldr	r3, [pc, #80]	; (800d92c <DrawWindow+0x280>)
 800d8da:	681b      	ldr	r3, [r3, #0]
 800d8dc:	2b01      	cmp	r3, #1
 800d8de:	d103      	bne.n	800d8e8 <DrawWindow+0x23c>
 800d8e0:	6838      	ldr	r0, [r7, #0]
 800d8e2:	f7ff fa8d 	bl	800ce00 <Cursor_1>
 800d8e6:	e036      	b.n	800d956 <DrawWindow+0x2aa>
 800d8e8:	4b16      	ldr	r3, [pc, #88]	; (800d944 <DrawWindow+0x298>)
 800d8ea:	f240 122d 	movw	r2, #301	; 0x12d
 800d8ee:	601a      	str	r2, [r3, #0]
 800d8f0:	4b0e      	ldr	r3, [pc, #56]	; (800d92c <DrawWindow+0x280>)
 800d8f2:	681a      	ldr	r2, [r3, #0]
 800d8f4:	4b13      	ldr	r3, [pc, #76]	; (800d944 <DrawWindow+0x298>)
 800d8f6:	681b      	ldr	r3, [r3, #0]
 800d8f8:	429a      	cmp	r2, r3
 800d8fa:	d103      	bne.n	800d904 <DrawWindow+0x258>
 800d8fc:	6838      	ldr	r0, [r7, #0]
 800d8fe:	f7ff fa7f 	bl	800ce00 <Cursor_1>
 800d902:	e028      	b.n	800d956 <DrawWindow+0x2aa>
 800d904:	4b09      	ldr	r3, [pc, #36]	; (800d92c <DrawWindow+0x280>)
 800d906:	681b      	ldr	r3, [r3, #0]
 800d908:	2b02      	cmp	r3, #2
 800d90a:	d103      	bne.n	800d914 <DrawWindow+0x268>
 800d90c:	6838      	ldr	r0, [r7, #0]
 800d90e:	f7ff faeb 	bl	800cee8 <Cursor_2>
 800d912:	e020      	b.n	800d956 <DrawWindow+0x2aa>
 800d914:	4b05      	ldr	r3, [pc, #20]	; (800d92c <DrawWindow+0x280>)
 800d916:	681b      	ldr	r3, [r3, #0]
 800d918:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 800d91c:	d118      	bne.n	800d950 <DrawWindow+0x2a4>
 800d91e:	6838      	ldr	r0, [r7, #0]
 800d920:	f7ff fae2 	bl	800cee8 <Cursor_2>
 800d924:	e017      	b.n	800d956 <DrawWindow+0x2aa>
 800d926:	bf00      	nop
 800d928:	20000a40 	.word	0x20000a40
 800d92c:	20000bf4 	.word	0x20000bf4
 800d930:	20000c00 	.word	0x20000c00
 800d934:	20000be0 	.word	0x20000be0
 800d938:	20000bf0 	.word	0x20000bf0
 800d93c:	20000a3c 	.word	0x20000a3c
 800d940:	20000be4 	.word	0x20000be4
 800d944:	20000a38 	.word	0x20000a38
 800d948:	20000be8 	.word	0x20000be8
 800d94c:	20000a34 	.word	0x20000a34
 800d950:	6838      	ldr	r0, [r7, #0]
 800d952:	f7ff fb1d 	bl	800cf90 <Cursor_3>
 800d956:	6838      	ldr	r0, [r7, #0]
 800d958:	f7ff fb82 	bl	800d060 <Cursor_4>
 800d95c:	683b      	ldr	r3, [r7, #0]
 800d95e:	334c      	adds	r3, #76	; 0x4c
 800d960:	f9b3 3000 	ldrsh.w	r3, [r3]
 800d964:	461a      	mov	r2, r3
 800d966:	4b17      	ldr	r3, [pc, #92]	; (800d9c4 <DrawWindow+0x318>)
 800d968:	601a      	str	r2, [r3, #0]
 800d96a:	4b16      	ldr	r3, [pc, #88]	; (800d9c4 <DrawWindow+0x318>)
 800d96c:	681b      	ldr	r3, [r3, #0]
 800d96e:	f003 0301 	and.w	r3, r3, #1
 800d972:	2b00      	cmp	r3, #0
 800d974:	d00f      	beq.n	800d996 <DrawWindow+0x2ea>
 800d976:	4b14      	ldr	r3, [pc, #80]	; (800d9c8 <DrawWindow+0x31c>)
 800d978:	681a      	ldr	r2, [r3, #0]
 800d97a:	4b14      	ldr	r3, [pc, #80]	; (800d9cc <DrawWindow+0x320>)
 800d97c:	681b      	ldr	r3, [r3, #0]
 800d97e:	429a      	cmp	r2, r3
 800d980:	d30b      	bcc.n	800d99a <DrawWindow+0x2ee>
 800d982:	4b11      	ldr	r3, [pc, #68]	; (800d9c8 <DrawWindow+0x31c>)
 800d984:	681a      	ldr	r2, [r3, #0]
 800d986:	4b12      	ldr	r3, [pc, #72]	; (800d9d0 <DrawWindow+0x324>)
 800d988:	681b      	ldr	r3, [r3, #0]
 800d98a:	429a      	cmp	r2, r3
 800d98c:	d207      	bcs.n	800d99e <DrawWindow+0x2f2>
 800d98e:	6838      	ldr	r0, [r7, #0]
 800d990:	f7ff fd18 	bl	800d3c4 <Draw_Pop>
 800d994:	e004      	b.n	800d9a0 <DrawWindow+0x2f4>
 800d996:	bf00      	nop
 800d998:	e002      	b.n	800d9a0 <DrawWindow+0x2f4>
 800d99a:	bf00      	nop
 800d99c:	e000      	b.n	800d9a0 <DrawWindow+0x2f4>
 800d99e:	bf00      	nop
 800d9a0:	6838      	ldr	r0, [r7, #0]
 800d9a2:	f7ff fcdd 	bl	800d360 <Send_LCD>
 800d9a6:	4b08      	ldr	r3, [pc, #32]	; (800d9c8 <DrawWindow+0x31c>)
 800d9a8:	681b      	ldr	r3, [r3, #0]
 800d9aa:	f5b3 7f97 	cmp.w	r3, #302	; 0x12e
 800d9ae:	d005      	beq.n	800d9bc <DrawWindow+0x310>
 800d9b0:	4b05      	ldr	r3, [pc, #20]	; (800d9c8 <DrawWindow+0x31c>)
 800d9b2:	681b      	ldr	r3, [r3, #0]
 800d9b4:	3301      	adds	r3, #1
 800d9b6:	4a04      	ldr	r2, [pc, #16]	; (800d9c8 <DrawWindow+0x31c>)
 800d9b8:	6013      	str	r3, [r2, #0]
 800d9ba:	e69c      	b.n	800d6f6 <DrawWindow+0x4a>
 800d9bc:	bf00      	nop
 800d9be:	3708      	adds	r7, #8
 800d9c0:	46bd      	mov	sp, r7
 800d9c2:	bd80      	pop	{r7, pc}
 800d9c4:	20000a3c 	.word	0x20000a3c
 800d9c8:	20000bf4 	.word	0x20000bf4
 800d9cc:	20000be0 	.word	0x20000be0
 800d9d0:	20000bf0 	.word	0x20000bf0

0800d9d4 <DispChar8x14>:
 800d9d4:	b580      	push	{r7, lr}
 800d9d6:	b084      	sub	sp, #16
 800d9d8:	af00      	add	r7, sp, #0
 800d9da:	4603      	mov	r3, r0
 800d9dc:	460a      	mov	r2, r1
 800d9de:	71fb      	strb	r3, [r7, #7]
 800d9e0:	4613      	mov	r3, r2
 800d9e2:	71bb      	strb	r3, [r7, #6]
 800d9e4:	2300      	movs	r3, #0
 800d9e6:	81fb      	strh	r3, [r7, #14]
 800d9e8:	e06d      	b.n	800dac6 <DispChar8x14+0xf2>
 800d9ea:	79fb      	ldrb	r3, [r7, #7]
 800d9ec:	f003 0310 	and.w	r3, r3, #16
 800d9f0:	2b00      	cmp	r3, #0
 800d9f2:	d00a      	beq.n	800da0a <DispChar8x14+0x36>
 800d9f4:	79bb      	ldrb	r3, [r7, #6]
 800d9f6:	3b40      	subs	r3, #64	; 0x40
 800d9f8:	00da      	lsls	r2, r3, #3
 800d9fa:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800d9fe:	4413      	add	r3, r2
 800da00:	4a35      	ldr	r2, [pc, #212]	; (800dad8 <DispChar8x14+0x104>)
 800da02:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800da06:	817b      	strh	r3, [r7, #10]
 800da08:	e005      	b.n	800da16 <DispChar8x14+0x42>
 800da0a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800da0e:	4a33      	ldr	r2, [pc, #204]	; (800dadc <DispChar8x14+0x108>)
 800da10:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800da14:	817b      	strh	r3, [r7, #10]
 800da16:	79fb      	ldrb	r3, [r7, #7]
 800da18:	f003 0320 	and.w	r3, r3, #32
 800da1c:	2b00      	cmp	r3, #0
 800da1e:	d00c      	beq.n	800da3a <DispChar8x14+0x66>
 800da20:	89fb      	ldrh	r3, [r7, #14]
 800da22:	f003 0301 	and.w	r3, r3, #1
 800da26:	b29b      	uxth	r3, r3
 800da28:	2b00      	cmp	r3, #0
 800da2a:	d001      	beq.n	800da30 <DispChar8x14+0x5c>
 800da2c:	4a2c      	ldr	r2, [pc, #176]	; (800dae0 <DispChar8x14+0x10c>)
 800da2e:	e001      	b.n	800da34 <DispChar8x14+0x60>
 800da30:	f245 5255 	movw	r2, #21845	; 0x5555
 800da34:	897b      	ldrh	r3, [r7, #10]
 800da36:	4013      	ands	r3, r2
 800da38:	817b      	strh	r3, [r7, #10]
 800da3a:	4b2a      	ldr	r3, [pc, #168]	; (800dae4 <DispChar8x14+0x110>)
 800da3c:	f9b3 3000 	ldrsh.w	r3, [r3]
 800da40:	4a29      	ldr	r2, [pc, #164]	; (800dae8 <DispChar8x14+0x114>)
 800da42:	f9b2 2000 	ldrsh.w	r2, [r2]
 800da46:	4611      	mov	r1, r2
 800da48:	4618      	mov	r0, r3
 800da4a:	f004 fb5b 	bl	8012104 <LCD_Set_Posi>
 800da4e:	2300      	movs	r3, #0
 800da50:	81bb      	strh	r3, [r7, #12]
 800da52:	e027      	b.n	800daa4 <DispChar8x14+0xd0>
 800da54:	897b      	ldrh	r3, [r7, #10]
 800da56:	f003 0304 	and.w	r3, r3, #4
 800da5a:	2b00      	cmp	r3, #0
 800da5c:	d00d      	beq.n	800da7a <DispChar8x14+0xa6>
 800da5e:	79fb      	ldrb	r3, [r7, #7]
 800da60:	f003 0301 	and.w	r3, r3, #1
 800da64:	2b00      	cmp	r3, #0
 800da66:	d002      	beq.n	800da6e <DispChar8x14+0x9a>
 800da68:	4b20      	ldr	r3, [pc, #128]	; (800daec <DispChar8x14+0x118>)
 800da6a:	881b      	ldrh	r3, [r3, #0]
 800da6c:	e001      	b.n	800da72 <DispChar8x14+0x9e>
 800da6e:	4b20      	ldr	r3, [pc, #128]	; (800daf0 <DispChar8x14+0x11c>)
 800da70:	881b      	ldrh	r3, [r3, #0]
 800da72:	4618      	mov	r0, r3
 800da74:	f004 fb94 	bl	80121a0 <LCD_Set_Pixel>
 800da78:	e00c      	b.n	800da94 <DispChar8x14+0xc0>
 800da7a:	79fb      	ldrb	r3, [r7, #7]
 800da7c:	f003 0301 	and.w	r3, r3, #1
 800da80:	2b00      	cmp	r3, #0
 800da82:	d002      	beq.n	800da8a <DispChar8x14+0xb6>
 800da84:	4b1a      	ldr	r3, [pc, #104]	; (800daf0 <DispChar8x14+0x11c>)
 800da86:	881b      	ldrh	r3, [r3, #0]
 800da88:	e001      	b.n	800da8e <DispChar8x14+0xba>
 800da8a:	4b18      	ldr	r3, [pc, #96]	; (800daec <DispChar8x14+0x118>)
 800da8c:	881b      	ldrh	r3, [r3, #0]
 800da8e:	4618      	mov	r0, r3
 800da90:	f004 fb86 	bl	80121a0 <LCD_Set_Pixel>
 800da94:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800da98:	105b      	asrs	r3, r3, #1
 800da9a:	817b      	strh	r3, [r7, #10]
 800da9c:	89bb      	ldrh	r3, [r7, #12]
 800da9e:	3301      	adds	r3, #1
 800daa0:	b29b      	uxth	r3, r3
 800daa2:	81bb      	strh	r3, [r7, #12]
 800daa4:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800daa8:	2b0d      	cmp	r3, #13
 800daaa:	ddd3      	ble.n	800da54 <DispChar8x14+0x80>
 800daac:	4b0d      	ldr	r3, [pc, #52]	; (800dae4 <DispChar8x14+0x110>)
 800daae:	f9b3 3000 	ldrsh.w	r3, [r3]
 800dab2:	b29b      	uxth	r3, r3
 800dab4:	3301      	adds	r3, #1
 800dab6:	b29b      	uxth	r3, r3
 800dab8:	b21a      	sxth	r2, r3
 800daba:	4b0a      	ldr	r3, [pc, #40]	; (800dae4 <DispChar8x14+0x110>)
 800dabc:	801a      	strh	r2, [r3, #0]
 800dabe:	89fb      	ldrh	r3, [r7, #14]
 800dac0:	3301      	adds	r3, #1
 800dac2:	b29b      	uxth	r3, r3
 800dac4:	81fb      	strh	r3, [r7, #14]
 800dac6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800daca:	2b07      	cmp	r3, #7
 800dacc:	dd8d      	ble.n	800d9ea <DispChar8x14+0x16>
 800dace:	bf00      	nop
 800dad0:	bf00      	nop
 800dad2:	3710      	adds	r7, #16
 800dad4:	46bd      	mov	sp, r7
 800dad6:	bd80      	pop	{r7, pc}
 800dad8:	08001290 	.word	0x08001290
 800dadc:	08000c90 	.word	0x08000c90
 800dae0:	ffffaaaa 	.word	0xffffaaaa
 800dae4:	20000788 	.word	0x20000788
 800dae8:	2000078a 	.word	0x2000078a
 800daec:	200015ca 	.word	0x200015ca
 800daf0:	200015c8 	.word	0x200015c8

0800daf4 <DispStr8x14>:
 800daf4:	b580      	push	{r7, lr}
 800daf6:	b086      	sub	sp, #24
 800daf8:	af00      	add	r7, sp, #0
 800dafa:	607b      	str	r3, [r7, #4]
 800dafc:	4603      	mov	r3, r0
 800dafe:	81fb      	strh	r3, [r7, #14]
 800db00:	460b      	mov	r3, r1
 800db02:	81bb      	strh	r3, [r7, #12]
 800db04:	4613      	mov	r3, r2
 800db06:	72fb      	strb	r3, [r7, #11]
 800db08:	4a22      	ldr	r2, [pc, #136]	; (800db94 <DispStr8x14+0xa0>)
 800db0a:	89fb      	ldrh	r3, [r7, #14]
 800db0c:	8013      	strh	r3, [r2, #0]
 800db0e:	4a22      	ldr	r2, [pc, #136]	; (800db98 <DispStr8x14+0xa4>)
 800db10:	89bb      	ldrh	r3, [r7, #12]
 800db12:	8013      	strh	r3, [r2, #0]
 800db14:	4b1f      	ldr	r3, [pc, #124]	; (800db94 <DispStr8x14+0xa0>)
 800db16:	f9b3 3000 	ldrsh.w	r3, [r3]
 800db1a:	4a1f      	ldr	r2, [pc, #124]	; (800db98 <DispStr8x14+0xa4>)
 800db1c:	f9b2 2000 	ldrsh.w	r2, [r2]
 800db20:	4611      	mov	r1, r2
 800db22:	4618      	mov	r0, r3
 800db24:	f004 faee 	bl	8012104 <LCD_Set_Posi>
 800db28:	2300      	movs	r3, #0
 800db2a:	82fb      	strh	r3, [r7, #22]
 800db2c:	e012      	b.n	800db54 <DispStr8x14+0x60>
 800db2e:	7afb      	ldrb	r3, [r7, #11]
 800db30:	f003 0301 	and.w	r3, r3, #1
 800db34:	2b00      	cmp	r3, #0
 800db36:	d002      	beq.n	800db3e <DispStr8x14+0x4a>
 800db38:	4b18      	ldr	r3, [pc, #96]	; (800db9c <DispStr8x14+0xa8>)
 800db3a:	881b      	ldrh	r3, [r3, #0]
 800db3c:	e001      	b.n	800db42 <DispStr8x14+0x4e>
 800db3e:	4b18      	ldr	r3, [pc, #96]	; (800dba0 <DispStr8x14+0xac>)
 800db40:	881b      	ldrh	r3, [r3, #0]
 800db42:	4618      	mov	r0, r3
 800db44:	f004 fb2c 	bl	80121a0 <LCD_Set_Pixel>
 800db48:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800db4c:	b29b      	uxth	r3, r3
 800db4e:	3301      	adds	r3, #1
 800db50:	b29b      	uxth	r3, r3
 800db52:	82fb      	strh	r3, [r7, #22]
 800db54:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800db58:	2b0d      	cmp	r3, #13
 800db5a:	dde8      	ble.n	800db2e <DispStr8x14+0x3a>
 800db5c:	4b0d      	ldr	r3, [pc, #52]	; (800db94 <DispStr8x14+0xa0>)
 800db5e:	f9b3 3000 	ldrsh.w	r3, [r3]
 800db62:	b29b      	uxth	r3, r3
 800db64:	3301      	adds	r3, #1
 800db66:	b29b      	uxth	r3, r3
 800db68:	b21a      	sxth	r2, r3
 800db6a:	4b0a      	ldr	r3, [pc, #40]	; (800db94 <DispStr8x14+0xa0>)
 800db6c:	801a      	strh	r2, [r3, #0]
 800db6e:	e008      	b.n	800db82 <DispStr8x14+0x8e>
 800db70:	687b      	ldr	r3, [r7, #4]
 800db72:	1c5a      	adds	r2, r3, #1
 800db74:	607a      	str	r2, [r7, #4]
 800db76:	781a      	ldrb	r2, [r3, #0]
 800db78:	7afb      	ldrb	r3, [r7, #11]
 800db7a:	4611      	mov	r1, r2
 800db7c:	4618      	mov	r0, r3
 800db7e:	f7ff ff29 	bl	800d9d4 <DispChar8x14>
 800db82:	687b      	ldr	r3, [r7, #4]
 800db84:	781b      	ldrb	r3, [r3, #0]
 800db86:	2b00      	cmp	r3, #0
 800db88:	d1f2      	bne.n	800db70 <DispStr8x14+0x7c>
 800db8a:	bf00      	nop
 800db8c:	bf00      	nop
 800db8e:	3718      	adds	r7, #24
 800db90:	46bd      	mov	sp, r7
 800db92:	bd80      	pop	{r7, pc}
 800db94:	20000788 	.word	0x20000788
 800db98:	2000078a 	.word	0x2000078a
 800db9c:	200015c8 	.word	0x200015c8
 800dba0:	200015ca 	.word	0x200015ca

0800dba4 <SetColor>:
 800dba4:	b480      	push	{r7}
 800dba6:	b083      	sub	sp, #12
 800dba8:	af00      	add	r7, sp, #0
 800dbaa:	4603      	mov	r3, r0
 800dbac:	460a      	mov	r2, r1
 800dbae:	80fb      	strh	r3, [r7, #6]
 800dbb0:	4613      	mov	r3, r2
 800dbb2:	80bb      	strh	r3, [r7, #4]
 800dbb4:	4a05      	ldr	r2, [pc, #20]	; (800dbcc <SetColor+0x28>)
 800dbb6:	88fb      	ldrh	r3, [r7, #6]
 800dbb8:	8013      	strh	r3, [r2, #0]
 800dbba:	4a05      	ldr	r2, [pc, #20]	; (800dbd0 <SetColor+0x2c>)
 800dbbc:	88bb      	ldrh	r3, [r7, #4]
 800dbbe:	8013      	strh	r3, [r2, #0]
 800dbc0:	bf00      	nop
 800dbc2:	370c      	adds	r7, #12
 800dbc4:	46bd      	mov	sp, r7
 800dbc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbca:	4770      	bx	lr
 800dbcc:	200015ca 	.word	0x200015ca
 800dbd0:	200015c8 	.word	0x200015c8

0800dbd4 <DispStr>:
 800dbd4:	b580      	push	{r7, lr}
 800dbd6:	b086      	sub	sp, #24
 800dbd8:	af00      	add	r7, sp, #0
 800dbda:	607b      	str	r3, [r7, #4]
 800dbdc:	4603      	mov	r3, r0
 800dbde:	81fb      	strh	r3, [r7, #14]
 800dbe0:	460b      	mov	r3, r1
 800dbe2:	81bb      	strh	r3, [r7, #12]
 800dbe4:	4613      	mov	r3, r2
 800dbe6:	72fb      	strb	r3, [r7, #11]
 800dbe8:	4a5e      	ldr	r2, [pc, #376]	; (800dd64 <DispStr+0x190>)
 800dbea:	89fb      	ldrh	r3, [r7, #14]
 800dbec:	8013      	strh	r3, [r2, #0]
 800dbee:	4a5e      	ldr	r2, [pc, #376]	; (800dd68 <DispStr+0x194>)
 800dbf0:	89bb      	ldrh	r3, [r7, #12]
 800dbf2:	8013      	strh	r3, [r2, #0]
 800dbf4:	4b5b      	ldr	r3, [pc, #364]	; (800dd64 <DispStr+0x190>)
 800dbf6:	f9b3 3000 	ldrsh.w	r3, [r3]
 800dbfa:	4a5b      	ldr	r2, [pc, #364]	; (800dd68 <DispStr+0x194>)
 800dbfc:	f9b2 2000 	ldrsh.w	r2, [r2]
 800dc00:	4611      	mov	r1, r2
 800dc02:	4618      	mov	r0, r3
 800dc04:	f004 fa7e 	bl	8012104 <LCD_Set_Posi>
 800dc08:	e0a1      	b.n	800dd4e <DispStr+0x17a>
 800dc0a:	687b      	ldr	r3, [r7, #4]
 800dc0c:	1c5a      	adds	r2, r3, #1
 800dc0e:	607a      	str	r2, [r7, #4]
 800dc10:	781b      	ldrb	r3, [r3, #0]
 800dc12:	747b      	strb	r3, [r7, #17]
 800dc14:	2300      	movs	r3, #0
 800dc16:	82fb      	strh	r3, [r7, #22]
 800dc18:	e094      	b.n	800dd44 <DispStr+0x170>
 800dc1a:	7afb      	ldrb	r3, [r7, #11]
 800dc1c:	f003 0310 	and.w	r3, r3, #16
 800dc20:	2b00      	cmp	r3, #0
 800dc22:	d10e      	bne.n	800dc42 <DispStr+0x6e>
 800dc24:	7c7b      	ldrb	r3, [r7, #17]
 800dc26:	f1a3 0221 	sub.w	r2, r3, #33	; 0x21
 800dc2a:	4613      	mov	r3, r2
 800dc2c:	005b      	lsls	r3, r3, #1
 800dc2e:	4413      	add	r3, r2
 800dc30:	005b      	lsls	r3, r3, #1
 800dc32:	461a      	mov	r2, r3
 800dc34:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800dc38:	4413      	add	r3, r2
 800dc3a:	4a4c      	ldr	r2, [pc, #304]	; (800dd6c <DispStr+0x198>)
 800dc3c:	5cd3      	ldrb	r3, [r2, r3]
 800dc3e:	827b      	strh	r3, [r7, #18]
 800dc40:	e00d      	b.n	800dc5e <DispStr+0x8a>
 800dc42:	7c7b      	ldrb	r3, [r7, #17]
 800dc44:	f1a3 0221 	sub.w	r2, r3, #33	; 0x21
 800dc48:	4613      	mov	r3, r2
 800dc4a:	005b      	lsls	r3, r3, #1
 800dc4c:	4413      	add	r3, r2
 800dc4e:	005b      	lsls	r3, r3, #1
 800dc50:	461a      	mov	r2, r3
 800dc52:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800dc56:	4413      	add	r3, r2
 800dc58:	4a45      	ldr	r2, [pc, #276]	; (800dd70 <DispStr+0x19c>)
 800dc5a:	5cd3      	ldrb	r3, [r2, r3]
 800dc5c:	827b      	strh	r3, [r7, #18]
 800dc5e:	7afb      	ldrb	r3, [r7, #11]
 800dc60:	f003 0320 	and.w	r3, r3, #32
 800dc64:	2b00      	cmp	r3, #0
 800dc66:	d00c      	beq.n	800dc82 <DispStr+0xae>
 800dc68:	8afb      	ldrh	r3, [r7, #22]
 800dc6a:	f003 0301 	and.w	r3, r3, #1
 800dc6e:	b29b      	uxth	r3, r3
 800dc70:	2b00      	cmp	r3, #0
 800dc72:	d001      	beq.n	800dc78 <DispStr+0xa4>
 800dc74:	4a3f      	ldr	r2, [pc, #252]	; (800dd74 <DispStr+0x1a0>)
 800dc76:	e001      	b.n	800dc7c <DispStr+0xa8>
 800dc78:	f245 5255 	movw	r2, #21845	; 0x5555
 800dc7c:	8a7b      	ldrh	r3, [r7, #18]
 800dc7e:	4013      	ands	r3, r2
 800dc80:	827b      	strh	r3, [r7, #18]
 800dc82:	4b38      	ldr	r3, [pc, #224]	; (800dd64 <DispStr+0x190>)
 800dc84:	f9b3 3000 	ldrsh.w	r3, [r3]
 800dc88:	4a37      	ldr	r2, [pc, #220]	; (800dd68 <DispStr+0x194>)
 800dc8a:	f9b2 2000 	ldrsh.w	r2, [r2]
 800dc8e:	4611      	mov	r1, r2
 800dc90:	4618      	mov	r0, r3
 800dc92:	f004 fa37 	bl	8012104 <LCD_Set_Posi>
 800dc96:	7afb      	ldrb	r3, [r7, #11]
 800dc98:	f003 0301 	and.w	r3, r3, #1
 800dc9c:	2b00      	cmp	r3, #0
 800dc9e:	d002      	beq.n	800dca6 <DispStr+0xd2>
 800dca0:	4b35      	ldr	r3, [pc, #212]	; (800dd78 <DispStr+0x1a4>)
 800dca2:	881b      	ldrh	r3, [r3, #0]
 800dca4:	e001      	b.n	800dcaa <DispStr+0xd6>
 800dca6:	4b35      	ldr	r3, [pc, #212]	; (800dd7c <DispStr+0x1a8>)
 800dca8:	881b      	ldrh	r3, [r3, #0]
 800dcaa:	4618      	mov	r0, r3
 800dcac:	f004 fa78 	bl	80121a0 <LCD_Set_Pixel>
 800dcb0:	4b2c      	ldr	r3, [pc, #176]	; (800dd64 <DispStr+0x190>)
 800dcb2:	f9b3 2000 	ldrsh.w	r2, [r3]
 800dcb6:	4b2c      	ldr	r3, [pc, #176]	; (800dd68 <DispStr+0x194>)
 800dcb8:	f9b3 3000 	ldrsh.w	r3, [r3]
 800dcbc:	b29b      	uxth	r3, r3
 800dcbe:	3301      	adds	r3, #1
 800dcc0:	b29b      	uxth	r3, r3
 800dcc2:	b21b      	sxth	r3, r3
 800dcc4:	4619      	mov	r1, r3
 800dcc6:	4610      	mov	r0, r2
 800dcc8:	f004 fa1c 	bl	8012104 <LCD_Set_Posi>
 800dccc:	2300      	movs	r3, #0
 800dcce:	82bb      	strh	r3, [r7, #20]
 800dcd0:	e027      	b.n	800dd22 <DispStr+0x14e>
 800dcd2:	8a7b      	ldrh	r3, [r7, #18]
 800dcd4:	f003 0301 	and.w	r3, r3, #1
 800dcd8:	2b00      	cmp	r3, #0
 800dcda:	d00d      	beq.n	800dcf8 <DispStr+0x124>
 800dcdc:	7afb      	ldrb	r3, [r7, #11]
 800dcde:	f003 0301 	and.w	r3, r3, #1
 800dce2:	2b00      	cmp	r3, #0
 800dce4:	d002      	beq.n	800dcec <DispStr+0x118>
 800dce6:	4b25      	ldr	r3, [pc, #148]	; (800dd7c <DispStr+0x1a8>)
 800dce8:	881b      	ldrh	r3, [r3, #0]
 800dcea:	e001      	b.n	800dcf0 <DispStr+0x11c>
 800dcec:	4b22      	ldr	r3, [pc, #136]	; (800dd78 <DispStr+0x1a4>)
 800dcee:	881b      	ldrh	r3, [r3, #0]
 800dcf0:	4618      	mov	r0, r3
 800dcf2:	f004 fa55 	bl	80121a0 <LCD_Set_Pixel>
 800dcf6:	e00c      	b.n	800dd12 <DispStr+0x13e>
 800dcf8:	7afb      	ldrb	r3, [r7, #11]
 800dcfa:	f003 0301 	and.w	r3, r3, #1
 800dcfe:	2b00      	cmp	r3, #0
 800dd00:	d002      	beq.n	800dd08 <DispStr+0x134>
 800dd02:	4b1d      	ldr	r3, [pc, #116]	; (800dd78 <DispStr+0x1a4>)
 800dd04:	881b      	ldrh	r3, [r3, #0]
 800dd06:	e001      	b.n	800dd0c <DispStr+0x138>
 800dd08:	4b1c      	ldr	r3, [pc, #112]	; (800dd7c <DispStr+0x1a8>)
 800dd0a:	881b      	ldrh	r3, [r3, #0]
 800dd0c:	4618      	mov	r0, r3
 800dd0e:	f004 fa47 	bl	80121a0 <LCD_Set_Pixel>
 800dd12:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800dd16:	105b      	asrs	r3, r3, #1
 800dd18:	827b      	strh	r3, [r7, #18]
 800dd1a:	8abb      	ldrh	r3, [r7, #20]
 800dd1c:	3301      	adds	r3, #1
 800dd1e:	b29b      	uxth	r3, r3
 800dd20:	82bb      	strh	r3, [r7, #20]
 800dd22:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800dd26:	2b09      	cmp	r3, #9
 800dd28:	ddd3      	ble.n	800dcd2 <DispStr+0xfe>
 800dd2a:	4b0e      	ldr	r3, [pc, #56]	; (800dd64 <DispStr+0x190>)
 800dd2c:	f9b3 3000 	ldrsh.w	r3, [r3]
 800dd30:	b29b      	uxth	r3, r3
 800dd32:	3301      	adds	r3, #1
 800dd34:	b29b      	uxth	r3, r3
 800dd36:	b21a      	sxth	r2, r3
 800dd38:	4b0a      	ldr	r3, [pc, #40]	; (800dd64 <DispStr+0x190>)
 800dd3a:	801a      	strh	r2, [r3, #0]
 800dd3c:	8afb      	ldrh	r3, [r7, #22]
 800dd3e:	3301      	adds	r3, #1
 800dd40:	b29b      	uxth	r3, r3
 800dd42:	82fb      	strh	r3, [r7, #22]
 800dd44:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800dd48:	2b05      	cmp	r3, #5
 800dd4a:	f77f af66 	ble.w	800dc1a <DispStr+0x46>
 800dd4e:	687b      	ldr	r3, [r7, #4]
 800dd50:	781b      	ldrb	r3, [r3, #0]
 800dd52:	2b00      	cmp	r3, #0
 800dd54:	f47f af59 	bne.w	800dc0a <DispStr+0x36>
 800dd58:	bf00      	nop
 800dd5a:	bf00      	nop
 800dd5c:	3718      	adds	r7, #24
 800dd5e:	46bd      	mov	sp, r7
 800dd60:	bd80      	pop	{r7, pc}
 800dd62:	bf00      	nop
 800dd64:	20000788 	.word	0x20000788
 800dd68:	2000078a 	.word	0x2000078a
 800dd6c:	080016c4 	.word	0x080016c4
 800dd70:	08001490 	.word	0x08001490
 800dd74:	ffffaaaa 	.word	0xffffaaaa
 800dd78:	200015c8 	.word	0x200015c8
 800dd7c:	200015ca 	.word	0x200015ca

0800dd80 <Draw_Circle_D>:
 800dd80:	b590      	push	{r4, r7, lr}
 800dd82:	b085      	sub	sp, #20
 800dd84:	af00      	add	r7, sp, #0
 800dd86:	4604      	mov	r4, r0
 800dd88:	4608      	mov	r0, r1
 800dd8a:	4611      	mov	r1, r2
 800dd8c:	461a      	mov	r2, r3
 800dd8e:	4623      	mov	r3, r4
 800dd90:	71fb      	strb	r3, [r7, #7]
 800dd92:	4603      	mov	r3, r0
 800dd94:	80bb      	strh	r3, [r7, #4]
 800dd96:	460b      	mov	r3, r1
 800dd98:	807b      	strh	r3, [r7, #2]
 800dd9a:	4613      	mov	r3, r2
 800dd9c:	803b      	strh	r3, [r7, #0]
 800dd9e:	8c3b      	ldrh	r3, [r7, #32]
 800dda0:	005b      	lsls	r3, r3, #1
 800dda2:	b29a      	uxth	r2, r3
 800dda4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800dda6:	4413      	add	r3, r2
 800dda8:	b29b      	uxth	r3, r3
 800ddaa:	3305      	adds	r3, #5
 800ddac:	b29b      	uxth	r3, r3
 800ddae:	84bb      	strh	r3, [r7, #36]	; 0x24
 800ddb0:	88ba      	ldrh	r2, [r7, #4]
 800ddb2:	8c3b      	ldrh	r3, [r7, #32]
 800ddb4:	1ad3      	subs	r3, r2, r3
 800ddb6:	b29b      	uxth	r3, r3
 800ddb8:	80bb      	strh	r3, [r7, #4]
 800ddba:	88bb      	ldrh	r3, [r7, #4]
 800ddbc:	817b      	strh	r3, [r7, #10]
 800ddbe:	887b      	ldrh	r3, [r7, #2]
 800ddc0:	3302      	adds	r3, #2
 800ddc2:	b29b      	uxth	r3, r3
 800ddc4:	813b      	strh	r3, [r7, #8]
 800ddc6:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 800ddca:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800ddce:	4611      	mov	r1, r2
 800ddd0:	4618      	mov	r0, r3
 800ddd2:	f004 f997 	bl	8012104 <LCD_Set_Posi>
 800ddd6:	2300      	movs	r3, #0
 800ddd8:	81bb      	strh	r3, [r7, #12]
 800ddda:	e012      	b.n	800de02 <Draw_Circle_D+0x82>
 800dddc:	79fb      	ldrb	r3, [r7, #7]
 800ddde:	f003 0301 	and.w	r3, r3, #1
 800dde2:	2b00      	cmp	r3, #0
 800dde4:	d002      	beq.n	800ddec <Draw_Circle_D+0x6c>
 800dde6:	4bad      	ldr	r3, [pc, #692]	; (800e09c <Draw_Circle_D+0x31c>)
 800dde8:	881b      	ldrh	r3, [r3, #0]
 800ddea:	e001      	b.n	800ddf0 <Draw_Circle_D+0x70>
 800ddec:	4bac      	ldr	r3, [pc, #688]	; (800e0a0 <Draw_Circle_D+0x320>)
 800ddee:	881b      	ldrh	r3, [r3, #0]
 800ddf0:	4618      	mov	r0, r3
 800ddf2:	f004 f9d5 	bl	80121a0 <LCD_Set_Pixel>
 800ddf6:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800ddfa:	b29b      	uxth	r3, r3
 800ddfc:	3301      	adds	r3, #1
 800ddfe:	b29b      	uxth	r3, r3
 800de00:	81bb      	strh	r3, [r7, #12]
 800de02:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 800de06:	f9b7 3000 	ldrsh.w	r3, [r7]
 800de0a:	3b04      	subs	r3, #4
 800de0c:	429a      	cmp	r2, r3
 800de0e:	dbe5      	blt.n	800dddc <Draw_Circle_D+0x5c>
 800de10:	88ba      	ldrh	r2, [r7, #4]
 800de12:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800de14:	4413      	add	r3, r2
 800de16:	b29b      	uxth	r3, r3
 800de18:	817b      	strh	r3, [r7, #10]
 800de1a:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 800de1e:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800de22:	4611      	mov	r1, r2
 800de24:	4618      	mov	r0, r3
 800de26:	f004 f96d 	bl	8012104 <LCD_Set_Posi>
 800de2a:	2300      	movs	r3, #0
 800de2c:	81bb      	strh	r3, [r7, #12]
 800de2e:	e012      	b.n	800de56 <Draw_Circle_D+0xd6>
 800de30:	79fb      	ldrb	r3, [r7, #7]
 800de32:	f003 0301 	and.w	r3, r3, #1
 800de36:	2b00      	cmp	r3, #0
 800de38:	d002      	beq.n	800de40 <Draw_Circle_D+0xc0>
 800de3a:	4b98      	ldr	r3, [pc, #608]	; (800e09c <Draw_Circle_D+0x31c>)
 800de3c:	881b      	ldrh	r3, [r3, #0]
 800de3e:	e001      	b.n	800de44 <Draw_Circle_D+0xc4>
 800de40:	4b97      	ldr	r3, [pc, #604]	; (800e0a0 <Draw_Circle_D+0x320>)
 800de42:	881b      	ldrh	r3, [r3, #0]
 800de44:	4618      	mov	r0, r3
 800de46:	f004 f9ab 	bl	80121a0 <LCD_Set_Pixel>
 800de4a:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800de4e:	b29b      	uxth	r3, r3
 800de50:	3301      	adds	r3, #1
 800de52:	b29b      	uxth	r3, r3
 800de54:	81bb      	strh	r3, [r7, #12]
 800de56:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 800de5a:	f9b7 3000 	ldrsh.w	r3, [r7]
 800de5e:	3b04      	subs	r3, #4
 800de60:	429a      	cmp	r2, r3
 800de62:	dbe5      	blt.n	800de30 <Draw_Circle_D+0xb0>
 800de64:	88bb      	ldrh	r3, [r7, #4]
 800de66:	3301      	adds	r3, #1
 800de68:	b29b      	uxth	r3, r3
 800de6a:	817b      	strh	r3, [r7, #10]
 800de6c:	887b      	ldrh	r3, [r7, #2]
 800de6e:	3301      	adds	r3, #1
 800de70:	b29b      	uxth	r3, r3
 800de72:	813b      	strh	r3, [r7, #8]
 800de74:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 800de78:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800de7c:	4611      	mov	r1, r2
 800de7e:	4618      	mov	r0, r3
 800de80:	f004 f940 	bl	8012104 <LCD_Set_Posi>
 800de84:	2300      	movs	r3, #0
 800de86:	81bb      	strh	r3, [r7, #12]
 800de88:	e012      	b.n	800deb0 <Draw_Circle_D+0x130>
 800de8a:	79fb      	ldrb	r3, [r7, #7]
 800de8c:	f003 0301 	and.w	r3, r3, #1
 800de90:	2b00      	cmp	r3, #0
 800de92:	d002      	beq.n	800de9a <Draw_Circle_D+0x11a>
 800de94:	4b81      	ldr	r3, [pc, #516]	; (800e09c <Draw_Circle_D+0x31c>)
 800de96:	881b      	ldrh	r3, [r3, #0]
 800de98:	e001      	b.n	800de9e <Draw_Circle_D+0x11e>
 800de9a:	4b81      	ldr	r3, [pc, #516]	; (800e0a0 <Draw_Circle_D+0x320>)
 800de9c:	881b      	ldrh	r3, [r3, #0]
 800de9e:	4618      	mov	r0, r3
 800dea0:	f004 f97e 	bl	80121a0 <LCD_Set_Pixel>
 800dea4:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800dea8:	b29b      	uxth	r3, r3
 800deaa:	3301      	adds	r3, #1
 800deac:	b29b      	uxth	r3, r3
 800deae:	81bb      	strh	r3, [r7, #12]
 800deb0:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 800deb4:	f9b7 3000 	ldrsh.w	r3, [r7]
 800deb8:	3b02      	subs	r3, #2
 800deba:	429a      	cmp	r2, r3
 800debc:	dbe5      	blt.n	800de8a <Draw_Circle_D+0x10a>
 800debe:	88ba      	ldrh	r2, [r7, #4]
 800dec0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800dec2:	4413      	add	r3, r2
 800dec4:	b29b      	uxth	r3, r3
 800dec6:	3b01      	subs	r3, #1
 800dec8:	b29b      	uxth	r3, r3
 800deca:	817b      	strh	r3, [r7, #10]
 800decc:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 800ded0:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800ded4:	4611      	mov	r1, r2
 800ded6:	4618      	mov	r0, r3
 800ded8:	f004 f914 	bl	8012104 <LCD_Set_Posi>
 800dedc:	2300      	movs	r3, #0
 800dede:	81bb      	strh	r3, [r7, #12]
 800dee0:	e012      	b.n	800df08 <Draw_Circle_D+0x188>
 800dee2:	79fb      	ldrb	r3, [r7, #7]
 800dee4:	f003 0301 	and.w	r3, r3, #1
 800dee8:	2b00      	cmp	r3, #0
 800deea:	d002      	beq.n	800def2 <Draw_Circle_D+0x172>
 800deec:	4b6b      	ldr	r3, [pc, #428]	; (800e09c <Draw_Circle_D+0x31c>)
 800deee:	881b      	ldrh	r3, [r3, #0]
 800def0:	e001      	b.n	800def6 <Draw_Circle_D+0x176>
 800def2:	4b6b      	ldr	r3, [pc, #428]	; (800e0a0 <Draw_Circle_D+0x320>)
 800def4:	881b      	ldrh	r3, [r3, #0]
 800def6:	4618      	mov	r0, r3
 800def8:	f004 f952 	bl	80121a0 <LCD_Set_Pixel>
 800defc:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800df00:	b29b      	uxth	r3, r3
 800df02:	3301      	adds	r3, #1
 800df04:	b29b      	uxth	r3, r3
 800df06:	81bb      	strh	r3, [r7, #12]
 800df08:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 800df0c:	f9b7 3000 	ldrsh.w	r3, [r7]
 800df10:	3b02      	subs	r3, #2
 800df12:	429a      	cmp	r2, r3
 800df14:	dbe5      	blt.n	800dee2 <Draw_Circle_D+0x162>
 800df16:	88bb      	ldrh	r3, [r7, #4]
 800df18:	3302      	adds	r3, #2
 800df1a:	b29b      	uxth	r3, r3
 800df1c:	817b      	strh	r3, [r7, #10]
 800df1e:	887b      	ldrh	r3, [r7, #2]
 800df20:	813b      	strh	r3, [r7, #8]
 800df22:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 800df26:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800df2a:	4611      	mov	r1, r2
 800df2c:	4618      	mov	r0, r3
 800df2e:	f004 f8e9 	bl	8012104 <LCD_Set_Posi>
 800df32:	2300      	movs	r3, #0
 800df34:	81bb      	strh	r3, [r7, #12]
 800df36:	e012      	b.n	800df5e <Draw_Circle_D+0x1de>
 800df38:	79fb      	ldrb	r3, [r7, #7]
 800df3a:	f003 0301 	and.w	r3, r3, #1
 800df3e:	2b00      	cmp	r3, #0
 800df40:	d002      	beq.n	800df48 <Draw_Circle_D+0x1c8>
 800df42:	4b56      	ldr	r3, [pc, #344]	; (800e09c <Draw_Circle_D+0x31c>)
 800df44:	881b      	ldrh	r3, [r3, #0]
 800df46:	e001      	b.n	800df4c <Draw_Circle_D+0x1cc>
 800df48:	4b55      	ldr	r3, [pc, #340]	; (800e0a0 <Draw_Circle_D+0x320>)
 800df4a:	881b      	ldrh	r3, [r3, #0]
 800df4c:	4618      	mov	r0, r3
 800df4e:	f004 f927 	bl	80121a0 <LCD_Set_Pixel>
 800df52:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800df56:	b29b      	uxth	r3, r3
 800df58:	3301      	adds	r3, #1
 800df5a:	b29b      	uxth	r3, r3
 800df5c:	81bb      	strh	r3, [r7, #12]
 800df5e:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 800df62:	f9b7 3000 	ldrsh.w	r3, [r7]
 800df66:	429a      	cmp	r2, r3
 800df68:	dbe6      	blt.n	800df38 <Draw_Circle_D+0x1b8>
 800df6a:	88ba      	ldrh	r2, [r7, #4]
 800df6c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800df6e:	4413      	add	r3, r2
 800df70:	b29b      	uxth	r3, r3
 800df72:	3b02      	subs	r3, #2
 800df74:	b29b      	uxth	r3, r3
 800df76:	817b      	strh	r3, [r7, #10]
 800df78:	887b      	ldrh	r3, [r7, #2]
 800df7a:	813b      	strh	r3, [r7, #8]
 800df7c:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 800df80:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800df84:	4611      	mov	r1, r2
 800df86:	4618      	mov	r0, r3
 800df88:	f004 f8bc 	bl	8012104 <LCD_Set_Posi>
 800df8c:	2300      	movs	r3, #0
 800df8e:	81bb      	strh	r3, [r7, #12]
 800df90:	e012      	b.n	800dfb8 <Draw_Circle_D+0x238>
 800df92:	79fb      	ldrb	r3, [r7, #7]
 800df94:	f003 0301 	and.w	r3, r3, #1
 800df98:	2b00      	cmp	r3, #0
 800df9a:	d002      	beq.n	800dfa2 <Draw_Circle_D+0x222>
 800df9c:	4b3f      	ldr	r3, [pc, #252]	; (800e09c <Draw_Circle_D+0x31c>)
 800df9e:	881b      	ldrh	r3, [r3, #0]
 800dfa0:	e001      	b.n	800dfa6 <Draw_Circle_D+0x226>
 800dfa2:	4b3f      	ldr	r3, [pc, #252]	; (800e0a0 <Draw_Circle_D+0x320>)
 800dfa4:	881b      	ldrh	r3, [r3, #0]
 800dfa6:	4618      	mov	r0, r3
 800dfa8:	f004 f8fa 	bl	80121a0 <LCD_Set_Pixel>
 800dfac:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800dfb0:	b29b      	uxth	r3, r3
 800dfb2:	3301      	adds	r3, #1
 800dfb4:	b29b      	uxth	r3, r3
 800dfb6:	81bb      	strh	r3, [r7, #12]
 800dfb8:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 800dfbc:	f9b7 3000 	ldrsh.w	r3, [r7]
 800dfc0:	429a      	cmp	r2, r3
 800dfc2:	dbe6      	blt.n	800df92 <Draw_Circle_D+0x212>
 800dfc4:	887b      	ldrh	r3, [r7, #2]
 800dfc6:	813b      	strh	r3, [r7, #8]
 800dfc8:	2300      	movs	r3, #0
 800dfca:	81fb      	strh	r3, [r7, #14]
 800dfcc:	e05a      	b.n	800e084 <Draw_Circle_D+0x304>
 800dfce:	88ba      	ldrh	r2, [r7, #4]
 800dfd0:	89fb      	ldrh	r3, [r7, #14]
 800dfd2:	4413      	add	r3, r2
 800dfd4:	b29b      	uxth	r3, r3
 800dfd6:	3303      	adds	r3, #3
 800dfd8:	b29b      	uxth	r3, r3
 800dfda:	b21b      	sxth	r3, r3
 800dfdc:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 800dfe0:	4611      	mov	r1, r2
 800dfe2:	4618      	mov	r0, r3
 800dfe4:	f004 f88e 	bl	8012104 <LCD_Set_Posi>
 800dfe8:	2300      	movs	r3, #0
 800dfea:	81bb      	strh	r3, [r7, #12]
 800dfec:	e012      	b.n	800e014 <Draw_Circle_D+0x294>
 800dfee:	79fb      	ldrb	r3, [r7, #7]
 800dff0:	f003 0301 	and.w	r3, r3, #1
 800dff4:	2b00      	cmp	r3, #0
 800dff6:	d002      	beq.n	800dffe <Draw_Circle_D+0x27e>
 800dff8:	4b28      	ldr	r3, [pc, #160]	; (800e09c <Draw_Circle_D+0x31c>)
 800dffa:	881b      	ldrh	r3, [r3, #0]
 800dffc:	e001      	b.n	800e002 <Draw_Circle_D+0x282>
 800dffe:	4b28      	ldr	r3, [pc, #160]	; (800e0a0 <Draw_Circle_D+0x320>)
 800e000:	881b      	ldrh	r3, [r3, #0]
 800e002:	4618      	mov	r0, r3
 800e004:	f004 f8cc 	bl	80121a0 <LCD_Set_Pixel>
 800e008:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800e00c:	b29b      	uxth	r3, r3
 800e00e:	3301      	adds	r3, #1
 800e010:	b29b      	uxth	r3, r3
 800e012:	81bb      	strh	r3, [r7, #12]
 800e014:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 800e018:	f9b7 3000 	ldrsh.w	r3, [r7]
 800e01c:	429a      	cmp	r2, r3
 800e01e:	dbe6      	blt.n	800dfee <Draw_Circle_D+0x26e>
 800e020:	88ba      	ldrh	r2, [r7, #4]
 800e022:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e024:	4413      	add	r3, r2
 800e026:	b29a      	uxth	r2, r3
 800e028:	89fb      	ldrh	r3, [r7, #14]
 800e02a:	1ad3      	subs	r3, r2, r3
 800e02c:	b29b      	uxth	r3, r3
 800e02e:	3b03      	subs	r3, #3
 800e030:	b29b      	uxth	r3, r3
 800e032:	b21b      	sxth	r3, r3
 800e034:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 800e038:	4611      	mov	r1, r2
 800e03a:	4618      	mov	r0, r3
 800e03c:	f004 f862 	bl	8012104 <LCD_Set_Posi>
 800e040:	2300      	movs	r3, #0
 800e042:	81bb      	strh	r3, [r7, #12]
 800e044:	e012      	b.n	800e06c <Draw_Circle_D+0x2ec>
 800e046:	79fb      	ldrb	r3, [r7, #7]
 800e048:	f003 0301 	and.w	r3, r3, #1
 800e04c:	2b00      	cmp	r3, #0
 800e04e:	d002      	beq.n	800e056 <Draw_Circle_D+0x2d6>
 800e050:	4b12      	ldr	r3, [pc, #72]	; (800e09c <Draw_Circle_D+0x31c>)
 800e052:	881b      	ldrh	r3, [r3, #0]
 800e054:	e001      	b.n	800e05a <Draw_Circle_D+0x2da>
 800e056:	4b12      	ldr	r3, [pc, #72]	; (800e0a0 <Draw_Circle_D+0x320>)
 800e058:	881b      	ldrh	r3, [r3, #0]
 800e05a:	4618      	mov	r0, r3
 800e05c:	f004 f8a0 	bl	80121a0 <LCD_Set_Pixel>
 800e060:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800e064:	b29b      	uxth	r3, r3
 800e066:	3301      	adds	r3, #1
 800e068:	b29b      	uxth	r3, r3
 800e06a:	81bb      	strh	r3, [r7, #12]
 800e06c:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 800e070:	f9b7 3000 	ldrsh.w	r3, [r7]
 800e074:	429a      	cmp	r2, r3
 800e076:	dbe6      	blt.n	800e046 <Draw_Circle_D+0x2c6>
 800e078:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800e07c:	b29b      	uxth	r3, r3
 800e07e:	3301      	adds	r3, #1
 800e080:	b29b      	uxth	r3, r3
 800e082:	81fb      	strh	r3, [r7, #14]
 800e084:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 800e088:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800e08c:	429a      	cmp	r2, r3
 800e08e:	db9e      	blt.n	800dfce <Draw_Circle_D+0x24e>
 800e090:	bf00      	nop
 800e092:	bf00      	nop
 800e094:	3714      	adds	r7, #20
 800e096:	46bd      	mov	sp, r7
 800e098:	bd90      	pop	{r4, r7, pc}
 800e09a:	bf00      	nop
 800e09c:	200015c8 	.word	0x200015c8
 800e0a0:	200015ca 	.word	0x200015ca

0800e0a4 <DispStr10x14>:
 800e0a4:	b580      	push	{r7, lr}
 800e0a6:	b084      	sub	sp, #16
 800e0a8:	af00      	add	r7, sp, #0
 800e0aa:	607b      	str	r3, [r7, #4]
 800e0ac:	4603      	mov	r3, r0
 800e0ae:	81fb      	strh	r3, [r7, #14]
 800e0b0:	460b      	mov	r3, r1
 800e0b2:	81bb      	strh	r3, [r7, #12]
 800e0b4:	4613      	mov	r3, r2
 800e0b6:	72fb      	strb	r3, [r7, #11]
 800e0b8:	4a0c      	ldr	r2, [pc, #48]	; (800e0ec <DispStr10x14+0x48>)
 800e0ba:	89fb      	ldrh	r3, [r7, #14]
 800e0bc:	8013      	strh	r3, [r2, #0]
 800e0be:	4a0c      	ldr	r2, [pc, #48]	; (800e0f0 <DispStr10x14+0x4c>)
 800e0c0:	89bb      	ldrh	r3, [r7, #12]
 800e0c2:	8013      	strh	r3, [r2, #0]
 800e0c4:	e008      	b.n	800e0d8 <DispStr10x14+0x34>
 800e0c6:	687b      	ldr	r3, [r7, #4]
 800e0c8:	1c5a      	adds	r2, r3, #1
 800e0ca:	607a      	str	r2, [r7, #4]
 800e0cc:	781a      	ldrb	r2, [r3, #0]
 800e0ce:	7afb      	ldrb	r3, [r7, #11]
 800e0d0:	4611      	mov	r1, r2
 800e0d2:	4618      	mov	r0, r3
 800e0d4:	f000 f80e 	bl	800e0f4 <DispChar10x14>
 800e0d8:	687b      	ldr	r3, [r7, #4]
 800e0da:	781b      	ldrb	r3, [r3, #0]
 800e0dc:	2b00      	cmp	r3, #0
 800e0de:	d1f2      	bne.n	800e0c6 <DispStr10x14+0x22>
 800e0e0:	bf00      	nop
 800e0e2:	bf00      	nop
 800e0e4:	3710      	adds	r7, #16
 800e0e6:	46bd      	mov	sp, r7
 800e0e8:	bd80      	pop	{r7, pc}
 800e0ea:	bf00      	nop
 800e0ec:	20000788 	.word	0x20000788
 800e0f0:	2000078a 	.word	0x2000078a

0800e0f4 <DispChar10x14>:
 800e0f4:	b580      	push	{r7, lr}
 800e0f6:	b084      	sub	sp, #16
 800e0f8:	af00      	add	r7, sp, #0
 800e0fa:	4603      	mov	r3, r0
 800e0fc:	460a      	mov	r2, r1
 800e0fe:	71fb      	strb	r3, [r7, #7]
 800e100:	4613      	mov	r3, r2
 800e102:	71bb      	strb	r3, [r7, #6]
 800e104:	2300      	movs	r3, #0
 800e106:	81fb      	strh	r3, [r7, #14]
 800e108:	e0fe      	b.n	800e308 <DispChar10x14+0x214>
 800e10a:	79fb      	ldrb	r3, [r7, #7]
 800e10c:	f003 0310 	and.w	r3, r3, #16
 800e110:	2b00      	cmp	r3, #0
 800e112:	d00f      	beq.n	800e134 <DispChar10x14+0x40>
 800e114:	79bb      	ldrb	r3, [r7, #6]
 800e116:	f1a3 0240 	sub.w	r2, r3, #64	; 0x40
 800e11a:	4613      	mov	r3, r2
 800e11c:	009b      	lsls	r3, r3, #2
 800e11e:	4413      	add	r3, r2
 800e120:	005b      	lsls	r3, r3, #1
 800e122:	461a      	mov	r2, r3
 800e124:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800e128:	4413      	add	r3, r2
 800e12a:	4a7c      	ldr	r2, [pc, #496]	; (800e31c <DispChar10x14+0x228>)
 800e12c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800e130:	817b      	strh	r3, [r7, #10]
 800e132:	e00e      	b.n	800e152 <DispChar10x14+0x5e>
 800e134:	79bb      	ldrb	r3, [r7, #6]
 800e136:	f1a3 0221 	sub.w	r2, r3, #33	; 0x21
 800e13a:	4613      	mov	r3, r2
 800e13c:	009b      	lsls	r3, r3, #2
 800e13e:	4413      	add	r3, r2
 800e140:	005b      	lsls	r3, r3, #1
 800e142:	461a      	mov	r2, r3
 800e144:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800e148:	4413      	add	r3, r2
 800e14a:	4a75      	ldr	r2, [pc, #468]	; (800e320 <DispChar10x14+0x22c>)
 800e14c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800e150:	817b      	strh	r3, [r7, #10]
 800e152:	79fb      	ldrb	r3, [r7, #7]
 800e154:	f003 0320 	and.w	r3, r3, #32
 800e158:	2b00      	cmp	r3, #0
 800e15a:	d00c      	beq.n	800e176 <DispChar10x14+0x82>
 800e15c:	89fb      	ldrh	r3, [r7, #14]
 800e15e:	f003 0301 	and.w	r3, r3, #1
 800e162:	b29b      	uxth	r3, r3
 800e164:	2b00      	cmp	r3, #0
 800e166:	d001      	beq.n	800e16c <DispChar10x14+0x78>
 800e168:	4a6e      	ldr	r2, [pc, #440]	; (800e324 <DispChar10x14+0x230>)
 800e16a:	e001      	b.n	800e170 <DispChar10x14+0x7c>
 800e16c:	f245 5255 	movw	r2, #21845	; 0x5555
 800e170:	897b      	ldrh	r3, [r7, #10]
 800e172:	4013      	ands	r3, r2
 800e174:	817b      	strh	r3, [r7, #10]
 800e176:	4b6c      	ldr	r3, [pc, #432]	; (800e328 <DispChar10x14+0x234>)
 800e178:	f9b3 3000 	ldrsh.w	r3, [r3]
 800e17c:	4a6b      	ldr	r2, [pc, #428]	; (800e32c <DispChar10x14+0x238>)
 800e17e:	f9b2 2000 	ldrsh.w	r2, [r2]
 800e182:	4611      	mov	r1, r2
 800e184:	4618      	mov	r0, r3
 800e186:	f003 ffbd 	bl	8012104 <LCD_Set_Posi>
 800e18a:	79fb      	ldrb	r3, [r7, #7]
 800e18c:	f003 0310 	and.w	r3, r3, #16
 800e190:	2b00      	cmp	r3, #0
 800e192:	d038      	beq.n	800e206 <DispChar10x14+0x112>
 800e194:	79bb      	ldrb	r3, [r7, #6]
 800e196:	2b43      	cmp	r3, #67	; 0x43
 800e198:	d005      	beq.n	800e1a6 <DispChar10x14+0xb2>
 800e19a:	79bb      	ldrb	r3, [r7, #6]
 800e19c:	2b44      	cmp	r3, #68	; 0x44
 800e19e:	d002      	beq.n	800e1a6 <DispChar10x14+0xb2>
 800e1a0:	79bb      	ldrb	r3, [r7, #6]
 800e1a2:	2b45      	cmp	r3, #69	; 0x45
 800e1a4:	d12f      	bne.n	800e206 <DispChar10x14+0x112>
 800e1a6:	2300      	movs	r3, #0
 800e1a8:	81bb      	strh	r3, [r7, #12]
 800e1aa:	e027      	b.n	800e1fc <DispChar10x14+0x108>
 800e1ac:	897b      	ldrh	r3, [r7, #10]
 800e1ae:	f003 0304 	and.w	r3, r3, #4
 800e1b2:	2b00      	cmp	r3, #0
 800e1b4:	d00d      	beq.n	800e1d2 <DispChar10x14+0xde>
 800e1b6:	79fb      	ldrb	r3, [r7, #7]
 800e1b8:	f003 0301 	and.w	r3, r3, #1
 800e1bc:	2b00      	cmp	r3, #0
 800e1be:	d002      	beq.n	800e1c6 <DispChar10x14+0xd2>
 800e1c0:	4b5b      	ldr	r3, [pc, #364]	; (800e330 <DispChar10x14+0x23c>)
 800e1c2:	881b      	ldrh	r3, [r3, #0]
 800e1c4:	e001      	b.n	800e1ca <DispChar10x14+0xd6>
 800e1c6:	4b5b      	ldr	r3, [pc, #364]	; (800e334 <DispChar10x14+0x240>)
 800e1c8:	881b      	ldrh	r3, [r3, #0]
 800e1ca:	4618      	mov	r0, r3
 800e1cc:	f003 ffe8 	bl	80121a0 <LCD_Set_Pixel>
 800e1d0:	e00c      	b.n	800e1ec <DispChar10x14+0xf8>
 800e1d2:	79fb      	ldrb	r3, [r7, #7]
 800e1d4:	f003 0301 	and.w	r3, r3, #1
 800e1d8:	2b00      	cmp	r3, #0
 800e1da:	d002      	beq.n	800e1e2 <DispChar10x14+0xee>
 800e1dc:	4b55      	ldr	r3, [pc, #340]	; (800e334 <DispChar10x14+0x240>)
 800e1de:	881b      	ldrh	r3, [r3, #0]
 800e1e0:	e001      	b.n	800e1e6 <DispChar10x14+0xf2>
 800e1e2:	4b53      	ldr	r3, [pc, #332]	; (800e330 <DispChar10x14+0x23c>)
 800e1e4:	881b      	ldrh	r3, [r3, #0]
 800e1e6:	4618      	mov	r0, r3
 800e1e8:	f003 ffda 	bl	80121a0 <LCD_Set_Pixel>
 800e1ec:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800e1f0:	105b      	asrs	r3, r3, #1
 800e1f2:	817b      	strh	r3, [r7, #10]
 800e1f4:	89bb      	ldrh	r3, [r7, #12]
 800e1f6:	3301      	adds	r3, #1
 800e1f8:	b29b      	uxth	r3, r3
 800e1fa:	81bb      	strh	r3, [r7, #12]
 800e1fc:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800e200:	2b0a      	cmp	r3, #10
 800e202:	ddd3      	ble.n	800e1ac <DispChar10x14+0xb8>
 800e204:	e073      	b.n	800e2ee <DispChar10x14+0x1fa>
 800e206:	79fb      	ldrb	r3, [r7, #7]
 800e208:	f003 0310 	and.w	r3, r3, #16
 800e20c:	2b00      	cmp	r3, #0
 800e20e:	d03f      	beq.n	800e290 <DispChar10x14+0x19c>
 800e210:	79bb      	ldrb	r3, [r7, #6]
 800e212:	2b4c      	cmp	r3, #76	; 0x4c
 800e214:	d002      	beq.n	800e21c <DispChar10x14+0x128>
 800e216:	79bb      	ldrb	r3, [r7, #6]
 800e218:	2b48      	cmp	r3, #72	; 0x48
 800e21a:	d139      	bne.n	800e290 <DispChar10x14+0x19c>
 800e21c:	4b42      	ldr	r3, [pc, #264]	; (800e328 <DispChar10x14+0x234>)
 800e21e:	f9b3 3000 	ldrsh.w	r3, [r3]
 800e222:	4a42      	ldr	r2, [pc, #264]	; (800e32c <DispChar10x14+0x238>)
 800e224:	f9b2 2000 	ldrsh.w	r2, [r2]
 800e228:	4611      	mov	r1, r2
 800e22a:	4618      	mov	r0, r3
 800e22c:	f003 ff6a 	bl	8012104 <LCD_Set_Posi>
 800e230:	2300      	movs	r3, #0
 800e232:	81bb      	strh	r3, [r7, #12]
 800e234:	e027      	b.n	800e286 <DispChar10x14+0x192>
 800e236:	897b      	ldrh	r3, [r7, #10]
 800e238:	f003 0304 	and.w	r3, r3, #4
 800e23c:	2b00      	cmp	r3, #0
 800e23e:	d00d      	beq.n	800e25c <DispChar10x14+0x168>
 800e240:	79fb      	ldrb	r3, [r7, #7]
 800e242:	f003 0301 	and.w	r3, r3, #1
 800e246:	2b00      	cmp	r3, #0
 800e248:	d002      	beq.n	800e250 <DispChar10x14+0x15c>
 800e24a:	4b39      	ldr	r3, [pc, #228]	; (800e330 <DispChar10x14+0x23c>)
 800e24c:	881b      	ldrh	r3, [r3, #0]
 800e24e:	e001      	b.n	800e254 <DispChar10x14+0x160>
 800e250:	4b38      	ldr	r3, [pc, #224]	; (800e334 <DispChar10x14+0x240>)
 800e252:	881b      	ldrh	r3, [r3, #0]
 800e254:	4618      	mov	r0, r3
 800e256:	f003 ffa3 	bl	80121a0 <LCD_Set_Pixel>
 800e25a:	e00c      	b.n	800e276 <DispChar10x14+0x182>
 800e25c:	79fb      	ldrb	r3, [r7, #7]
 800e25e:	f003 0301 	and.w	r3, r3, #1
 800e262:	2b00      	cmp	r3, #0
 800e264:	d002      	beq.n	800e26c <DispChar10x14+0x178>
 800e266:	4b33      	ldr	r3, [pc, #204]	; (800e334 <DispChar10x14+0x240>)
 800e268:	881b      	ldrh	r3, [r3, #0]
 800e26a:	e001      	b.n	800e270 <DispChar10x14+0x17c>
 800e26c:	4b30      	ldr	r3, [pc, #192]	; (800e330 <DispChar10x14+0x23c>)
 800e26e:	881b      	ldrh	r3, [r3, #0]
 800e270:	4618      	mov	r0, r3
 800e272:	f003 ff95 	bl	80121a0 <LCD_Set_Pixel>
 800e276:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800e27a:	105b      	asrs	r3, r3, #1
 800e27c:	817b      	strh	r3, [r7, #10]
 800e27e:	89bb      	ldrh	r3, [r7, #12]
 800e280:	3301      	adds	r3, #1
 800e282:	b29b      	uxth	r3, r3
 800e284:	81bb      	strh	r3, [r7, #12]
 800e286:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800e28a:	2b0a      	cmp	r3, #10
 800e28c:	ddd3      	ble.n	800e236 <DispChar10x14+0x142>
 800e28e:	e02e      	b.n	800e2ee <DispChar10x14+0x1fa>
 800e290:	2300      	movs	r3, #0
 800e292:	81bb      	strh	r3, [r7, #12]
 800e294:	e027      	b.n	800e2e6 <DispChar10x14+0x1f2>
 800e296:	897b      	ldrh	r3, [r7, #10]
 800e298:	f003 0304 	and.w	r3, r3, #4
 800e29c:	2b00      	cmp	r3, #0
 800e29e:	d00d      	beq.n	800e2bc <DispChar10x14+0x1c8>
 800e2a0:	79fb      	ldrb	r3, [r7, #7]
 800e2a2:	f003 0301 	and.w	r3, r3, #1
 800e2a6:	2b00      	cmp	r3, #0
 800e2a8:	d002      	beq.n	800e2b0 <DispChar10x14+0x1bc>
 800e2aa:	4b21      	ldr	r3, [pc, #132]	; (800e330 <DispChar10x14+0x23c>)
 800e2ac:	881b      	ldrh	r3, [r3, #0]
 800e2ae:	e001      	b.n	800e2b4 <DispChar10x14+0x1c0>
 800e2b0:	4b20      	ldr	r3, [pc, #128]	; (800e334 <DispChar10x14+0x240>)
 800e2b2:	881b      	ldrh	r3, [r3, #0]
 800e2b4:	4618      	mov	r0, r3
 800e2b6:	f003 ff73 	bl	80121a0 <LCD_Set_Pixel>
 800e2ba:	e00c      	b.n	800e2d6 <DispChar10x14+0x1e2>
 800e2bc:	79fb      	ldrb	r3, [r7, #7]
 800e2be:	f003 0301 	and.w	r3, r3, #1
 800e2c2:	2b00      	cmp	r3, #0
 800e2c4:	d002      	beq.n	800e2cc <DispChar10x14+0x1d8>
 800e2c6:	4b1b      	ldr	r3, [pc, #108]	; (800e334 <DispChar10x14+0x240>)
 800e2c8:	881b      	ldrh	r3, [r3, #0]
 800e2ca:	e001      	b.n	800e2d0 <DispChar10x14+0x1dc>
 800e2cc:	4b18      	ldr	r3, [pc, #96]	; (800e330 <DispChar10x14+0x23c>)
 800e2ce:	881b      	ldrh	r3, [r3, #0]
 800e2d0:	4618      	mov	r0, r3
 800e2d2:	f003 ff65 	bl	80121a0 <LCD_Set_Pixel>
 800e2d6:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800e2da:	105b      	asrs	r3, r3, #1
 800e2dc:	817b      	strh	r3, [r7, #10]
 800e2de:	89bb      	ldrh	r3, [r7, #12]
 800e2e0:	3301      	adds	r3, #1
 800e2e2:	b29b      	uxth	r3, r3
 800e2e4:	81bb      	strh	r3, [r7, #12]
 800e2e6:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800e2ea:	2b0d      	cmp	r3, #13
 800e2ec:	ddd3      	ble.n	800e296 <DispChar10x14+0x1a2>
 800e2ee:	4b0e      	ldr	r3, [pc, #56]	; (800e328 <DispChar10x14+0x234>)
 800e2f0:	f9b3 3000 	ldrsh.w	r3, [r3]
 800e2f4:	b29b      	uxth	r3, r3
 800e2f6:	3301      	adds	r3, #1
 800e2f8:	b29b      	uxth	r3, r3
 800e2fa:	b21a      	sxth	r2, r3
 800e2fc:	4b0a      	ldr	r3, [pc, #40]	; (800e328 <DispChar10x14+0x234>)
 800e2fe:	801a      	strh	r2, [r3, #0]
 800e300:	89fb      	ldrh	r3, [r7, #14]
 800e302:	3301      	adds	r3, #1
 800e304:	b29b      	uxth	r3, r3
 800e306:	81fb      	strh	r3, [r7, #14]
 800e308:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800e30c:	2b09      	cmp	r3, #9
 800e30e:	f77f aefc 	ble.w	800e10a <DispChar10x14+0x16>
 800e312:	bf00      	nop
 800e314:	bf00      	nop
 800e316:	3710      	adds	r7, #16
 800e318:	46bd      	mov	sp, r7
 800e31a:	bd80      	pop	{r7, pc}
 800e31c:	080018f8 	.word	0x080018f8
 800e320:	08001998 	.word	0x08001998
 800e324:	ffffaaaa 	.word	0xffffaaaa
 800e328:	20000788 	.word	0x20000788
 800e32c:	2000078a 	.word	0x2000078a
 800e330:	200015ca 	.word	0x200015ca
 800e334:	200015c8 	.word	0x200015c8

0800e338 <NotePixel>:
 800e338:	b480      	push	{r7}
 800e33a:	b085      	sub	sp, #20
 800e33c:	af00      	add	r7, sp, #0
 800e33e:	4603      	mov	r3, r0
 800e340:	71fb      	strb	r3, [r7, #7]
 800e342:	4b42      	ldr	r3, [pc, #264]	; (800e44c <NotePixel+0x114>)
 800e344:	60fb      	str	r3, [r7, #12]
 800e346:	4b42      	ldr	r3, [pc, #264]	; (800e450 <NotePixel+0x118>)
 800e348:	f9b3 3000 	ldrsh.w	r3, [r3]
 800e34c:	4a41      	ldr	r2, [pc, #260]	; (800e454 <NotePixel+0x11c>)
 800e34e:	f9b2 2046 	ldrsh.w	r2, [r2, #70]	; 0x46
 800e352:	fb93 f1f2 	sdiv	r1, r3, r2
 800e356:	fb02 f201 	mul.w	r2, r2, r1
 800e35a:	1a9b      	subs	r3, r3, r2
 800e35c:	b21a      	sxth	r2, r3
 800e35e:	4b3c      	ldr	r3, [pc, #240]	; (800e450 <NotePixel+0x118>)
 800e360:	801a      	strh	r2, [r3, #0]
 800e362:	4b3d      	ldr	r3, [pc, #244]	; (800e458 <NotePixel+0x120>)
 800e364:	f9b3 3000 	ldrsh.w	r3, [r3]
 800e368:	4a3a      	ldr	r2, [pc, #232]	; (800e454 <NotePixel+0x11c>)
 800e36a:	f9b2 204a 	ldrsh.w	r2, [r2, #74]	; 0x4a
 800e36e:	fb93 f1f2 	sdiv	r1, r3, r2
 800e372:	fb02 f201 	mul.w	r2, r2, r1
 800e376:	1a9b      	subs	r3, r3, r2
 800e378:	b21a      	sxth	r2, r3
 800e37a:	4b37      	ldr	r3, [pc, #220]	; (800e458 <NotePixel+0x120>)
 800e37c:	801a      	strh	r2, [r3, #0]
 800e37e:	4b35      	ldr	r3, [pc, #212]	; (800e454 <NotePixel+0x11c>)
 800e380:	f9b3 304a 	ldrsh.w	r3, [r3, #74]	; 0x4a
 800e384:	2b00      	cmp	r3, #0
 800e386:	da00      	bge.n	800e38a <NotePixel+0x52>
 800e388:	331f      	adds	r3, #31
 800e38a:	115b      	asrs	r3, r3, #5
 800e38c:	b21b      	sxth	r3, r3
 800e38e:	b29a      	uxth	r2, r3
 800e390:	4b2f      	ldr	r3, [pc, #188]	; (800e450 <NotePixel+0x118>)
 800e392:	f9b3 3000 	ldrsh.w	r3, [r3]
 800e396:	b29b      	uxth	r3, r3
 800e398:	fb12 f303 	smulbb	r3, r2, r3
 800e39c:	b29a      	uxth	r2, r3
 800e39e:	4b2e      	ldr	r3, [pc, #184]	; (800e458 <NotePixel+0x120>)
 800e3a0:	f9b3 3000 	ldrsh.w	r3, [r3]
 800e3a4:	2b00      	cmp	r3, #0
 800e3a6:	da00      	bge.n	800e3aa <NotePixel+0x72>
 800e3a8:	330f      	adds	r3, #15
 800e3aa:	111b      	asrs	r3, r3, #4
 800e3ac:	b21b      	sxth	r3, r3
 800e3ae:	b29b      	uxth	r3, r3
 800e3b0:	4413      	add	r3, r2
 800e3b2:	b29b      	uxth	r3, r3
 800e3b4:	817b      	strh	r3, [r7, #10]
 800e3b6:	4b28      	ldr	r3, [pc, #160]	; (800e458 <NotePixel+0x120>)
 800e3b8:	f9b3 3000 	ldrsh.w	r3, [r3]
 800e3bc:	425a      	negs	r2, r3
 800e3be:	f003 030f 	and.w	r3, r3, #15
 800e3c2:	f002 020f 	and.w	r2, r2, #15
 800e3c6:	bf58      	it	pl
 800e3c8:	4253      	negpl	r3, r2
 800e3ca:	813b      	strh	r3, [r7, #8]
 800e3cc:	79fb      	ldrb	r3, [r7, #7]
 800e3ce:	2b00      	cmp	r3, #0
 800e3d0:	d015      	beq.n	800e3fe <NotePixel+0xc6>
 800e3d2:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800e3d6:	005b      	lsls	r3, r3, #1
 800e3d8:	68fa      	ldr	r2, [r7, #12]
 800e3da:	4413      	add	r3, r2
 800e3dc:	f9b3 1000 	ldrsh.w	r1, [r3]
 800e3e0:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 800e3e4:	2201      	movs	r2, #1
 800e3e6:	fa02 f303 	lsl.w	r3, r2, r3
 800e3ea:	b21a      	sxth	r2, r3
 800e3ec:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800e3f0:	005b      	lsls	r3, r3, #1
 800e3f2:	68f8      	ldr	r0, [r7, #12]
 800e3f4:	4403      	add	r3, r0
 800e3f6:	430a      	orrs	r2, r1
 800e3f8:	b212      	sxth	r2, r2
 800e3fa:	801a      	strh	r2, [r3, #0]
 800e3fc:	e016      	b.n	800e42c <NotePixel+0xf4>
 800e3fe:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800e402:	005b      	lsls	r3, r3, #1
 800e404:	68fa      	ldr	r2, [r7, #12]
 800e406:	4413      	add	r3, r2
 800e408:	f9b3 1000 	ldrsh.w	r1, [r3]
 800e40c:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 800e410:	2201      	movs	r2, #1
 800e412:	fa02 f303 	lsl.w	r3, r2, r3
 800e416:	b21b      	sxth	r3, r3
 800e418:	43db      	mvns	r3, r3
 800e41a:	b21a      	sxth	r2, r3
 800e41c:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800e420:	005b      	lsls	r3, r3, #1
 800e422:	68f8      	ldr	r0, [r7, #12]
 800e424:	4403      	add	r3, r0
 800e426:	400a      	ands	r2, r1
 800e428:	b212      	sxth	r2, r2
 800e42a:	801a      	strh	r2, [r3, #0]
 800e42c:	4b0a      	ldr	r3, [pc, #40]	; (800e458 <NotePixel+0x120>)
 800e42e:	f9b3 3000 	ldrsh.w	r3, [r3]
 800e432:	b29b      	uxth	r3, r3
 800e434:	3301      	adds	r3, #1
 800e436:	b29b      	uxth	r3, r3
 800e438:	b21a      	sxth	r2, r3
 800e43a:	4b07      	ldr	r3, [pc, #28]	; (800e458 <NotePixel+0x120>)
 800e43c:	801a      	strh	r2, [r3, #0]
 800e43e:	bf00      	nop
 800e440:	3714      	adds	r7, #20
 800e442:	46bd      	mov	sp, r7
 800e444:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e448:	4770      	bx	lr
 800e44a:	bf00      	nop
 800e44c:	20000f88 	.word	0x20000f88
 800e450:	20000002 	.word	0x20000002
 800e454:	20000140 	.word	0x20000140
 800e458:	20000004 	.word	0x20000004

0800e45c <Buil_Pop>:
 800e45c:	b580      	push	{r7, lr}
 800e45e:	b082      	sub	sp, #8
 800e460:	af00      	add	r7, sp, #0
 800e462:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800e466:	2100      	movs	r1, #0
 800e468:	487f      	ldr	r0, [pc, #508]	; (800e668 <Buil_Pop+0x20c>)
 800e46a:	f014 fbf5 	bl	8022c58 <memset>
 800e46e:	4b7f      	ldr	r3, [pc, #508]	; (800e66c <Buil_Pop+0x210>)
 800e470:	2200      	movs	r2, #0
 800e472:	801a      	strh	r2, [r3, #0]
 800e474:	4b7e      	ldr	r3, [pc, #504]	; (800e670 <Buil_Pop+0x214>)
 800e476:	2203      	movs	r2, #3
 800e478:	801a      	strh	r2, [r3, #0]
 800e47a:	2300      	movs	r3, #0
 800e47c:	80fb      	strh	r3, [r7, #6]
 800e47e:	e008      	b.n	800e492 <Buil_Pop+0x36>
 800e480:	2001      	movs	r0, #1
 800e482:	f7ff ff59 	bl	800e338 <NotePixel>
 800e486:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800e48a:	b29b      	uxth	r3, r3
 800e48c:	3301      	adds	r3, #1
 800e48e:	b29b      	uxth	r3, r3
 800e490:	80fb      	strh	r3, [r7, #6]
 800e492:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800e496:	4b77      	ldr	r3, [pc, #476]	; (800e674 <Buil_Pop+0x218>)
 800e498:	f9b3 304a 	ldrsh.w	r3, [r3, #74]	; 0x4a
 800e49c:	0fd9      	lsrs	r1, r3, #31
 800e49e:	440b      	add	r3, r1
 800e4a0:	105b      	asrs	r3, r3, #1
 800e4a2:	b21b      	sxth	r3, r3
 800e4a4:	3b06      	subs	r3, #6
 800e4a6:	429a      	cmp	r2, r3
 800e4a8:	dbea      	blt.n	800e480 <Buil_Pop+0x24>
 800e4aa:	4b70      	ldr	r3, [pc, #448]	; (800e66c <Buil_Pop+0x210>)
 800e4ac:	2201      	movs	r2, #1
 800e4ae:	801a      	strh	r2, [r3, #0]
 800e4b0:	4b6f      	ldr	r3, [pc, #444]	; (800e670 <Buil_Pop+0x214>)
 800e4b2:	2202      	movs	r2, #2
 800e4b4:	801a      	strh	r2, [r3, #0]
 800e4b6:	2001      	movs	r0, #1
 800e4b8:	f7ff ff3e 	bl	800e338 <NotePixel>
 800e4bc:	4b6b      	ldr	r3, [pc, #428]	; (800e66c <Buil_Pop+0x210>)
 800e4be:	2201      	movs	r2, #1
 800e4c0:	801a      	strh	r2, [r3, #0]
 800e4c2:	4b6c      	ldr	r3, [pc, #432]	; (800e674 <Buil_Pop+0x218>)
 800e4c4:	f9b3 304a 	ldrsh.w	r3, [r3, #74]	; 0x4a
 800e4c8:	0fda      	lsrs	r2, r3, #31
 800e4ca:	4413      	add	r3, r2
 800e4cc:	105b      	asrs	r3, r3, #1
 800e4ce:	b21b      	sxth	r3, r3
 800e4d0:	b29b      	uxth	r3, r3
 800e4d2:	3b03      	subs	r3, #3
 800e4d4:	b29b      	uxth	r3, r3
 800e4d6:	b21a      	sxth	r2, r3
 800e4d8:	4b65      	ldr	r3, [pc, #404]	; (800e670 <Buil_Pop+0x214>)
 800e4da:	801a      	strh	r2, [r3, #0]
 800e4dc:	2001      	movs	r0, #1
 800e4de:	f7ff ff2b 	bl	800e338 <NotePixel>
 800e4e2:	4b62      	ldr	r3, [pc, #392]	; (800e66c <Buil_Pop+0x210>)
 800e4e4:	2202      	movs	r2, #2
 800e4e6:	801a      	strh	r2, [r3, #0]
 800e4e8:	4b61      	ldr	r3, [pc, #388]	; (800e670 <Buil_Pop+0x214>)
 800e4ea:	2201      	movs	r2, #1
 800e4ec:	801a      	strh	r2, [r3, #0]
 800e4ee:	2001      	movs	r0, #1
 800e4f0:	f7ff ff22 	bl	800e338 <NotePixel>
 800e4f4:	4b5d      	ldr	r3, [pc, #372]	; (800e66c <Buil_Pop+0x210>)
 800e4f6:	2202      	movs	r2, #2
 800e4f8:	801a      	strh	r2, [r3, #0]
 800e4fa:	4b5e      	ldr	r3, [pc, #376]	; (800e674 <Buil_Pop+0x218>)
 800e4fc:	f9b3 304a 	ldrsh.w	r3, [r3, #74]	; 0x4a
 800e500:	0fda      	lsrs	r2, r3, #31
 800e502:	4413      	add	r3, r2
 800e504:	105b      	asrs	r3, r3, #1
 800e506:	b21b      	sxth	r3, r3
 800e508:	b29b      	uxth	r3, r3
 800e50a:	3b02      	subs	r3, #2
 800e50c:	b29b      	uxth	r3, r3
 800e50e:	b21a      	sxth	r2, r3
 800e510:	4b57      	ldr	r3, [pc, #348]	; (800e670 <Buil_Pop+0x214>)
 800e512:	801a      	strh	r2, [r3, #0]
 800e514:	2001      	movs	r0, #1
 800e516:	f7ff ff0f 	bl	800e338 <NotePixel>
 800e51a:	4b54      	ldr	r3, [pc, #336]	; (800e66c <Buil_Pop+0x210>)
 800e51c:	2203      	movs	r2, #3
 800e51e:	801a      	strh	r2, [r3, #0]
 800e520:	e01e      	b.n	800e560 <Buil_Pop+0x104>
 800e522:	4b53      	ldr	r3, [pc, #332]	; (800e670 <Buil_Pop+0x214>)
 800e524:	2200      	movs	r2, #0
 800e526:	801a      	strh	r2, [r3, #0]
 800e528:	2001      	movs	r0, #1
 800e52a:	f7ff ff05 	bl	800e338 <NotePixel>
 800e52e:	4b51      	ldr	r3, [pc, #324]	; (800e674 <Buil_Pop+0x218>)
 800e530:	f9b3 304a 	ldrsh.w	r3, [r3, #74]	; 0x4a
 800e534:	0fda      	lsrs	r2, r3, #31
 800e536:	4413      	add	r3, r2
 800e538:	105b      	asrs	r3, r3, #1
 800e53a:	b21b      	sxth	r3, r3
 800e53c:	b29b      	uxth	r3, r3
 800e53e:	3b01      	subs	r3, #1
 800e540:	b29b      	uxth	r3, r3
 800e542:	b21a      	sxth	r2, r3
 800e544:	4b4a      	ldr	r3, [pc, #296]	; (800e670 <Buil_Pop+0x214>)
 800e546:	801a      	strh	r2, [r3, #0]
 800e548:	2001      	movs	r0, #1
 800e54a:	f7ff fef5 	bl	800e338 <NotePixel>
 800e54e:	4b47      	ldr	r3, [pc, #284]	; (800e66c <Buil_Pop+0x210>)
 800e550:	f9b3 3000 	ldrsh.w	r3, [r3]
 800e554:	b29b      	uxth	r3, r3
 800e556:	3301      	adds	r3, #1
 800e558:	b29b      	uxth	r3, r3
 800e55a:	b21a      	sxth	r2, r3
 800e55c:	4b43      	ldr	r3, [pc, #268]	; (800e66c <Buil_Pop+0x210>)
 800e55e:	801a      	strh	r2, [r3, #0]
 800e560:	4b42      	ldr	r3, [pc, #264]	; (800e66c <Buil_Pop+0x210>)
 800e562:	f9b3 3000 	ldrsh.w	r3, [r3]
 800e566:	461a      	mov	r2, r3
 800e568:	4b42      	ldr	r3, [pc, #264]	; (800e674 <Buil_Pop+0x218>)
 800e56a:	f9b3 3046 	ldrsh.w	r3, [r3, #70]	; 0x46
 800e56e:	3b02      	subs	r3, #2
 800e570:	429a      	cmp	r2, r3
 800e572:	dbd6      	blt.n	800e522 <Buil_Pop+0xc6>
 800e574:	4b3f      	ldr	r3, [pc, #252]	; (800e674 <Buil_Pop+0x218>)
 800e576:	f9b3 3046 	ldrsh.w	r3, [r3, #70]	; 0x46
 800e57a:	b29b      	uxth	r3, r3
 800e57c:	3b03      	subs	r3, #3
 800e57e:	b29b      	uxth	r3, r3
 800e580:	b21a      	sxth	r2, r3
 800e582:	4b3a      	ldr	r3, [pc, #232]	; (800e66c <Buil_Pop+0x210>)
 800e584:	801a      	strh	r2, [r3, #0]
 800e586:	4b3a      	ldr	r3, [pc, #232]	; (800e670 <Buil_Pop+0x214>)
 800e588:	2201      	movs	r2, #1
 800e58a:	801a      	strh	r2, [r3, #0]
 800e58c:	2001      	movs	r0, #1
 800e58e:	f7ff fed3 	bl	800e338 <NotePixel>
 800e592:	4b38      	ldr	r3, [pc, #224]	; (800e674 <Buil_Pop+0x218>)
 800e594:	f9b3 3046 	ldrsh.w	r3, [r3, #70]	; 0x46
 800e598:	b29b      	uxth	r3, r3
 800e59a:	3b03      	subs	r3, #3
 800e59c:	b29b      	uxth	r3, r3
 800e59e:	b21a      	sxth	r2, r3
 800e5a0:	4b32      	ldr	r3, [pc, #200]	; (800e66c <Buil_Pop+0x210>)
 800e5a2:	801a      	strh	r2, [r3, #0]
 800e5a4:	4b33      	ldr	r3, [pc, #204]	; (800e674 <Buil_Pop+0x218>)
 800e5a6:	f9b3 304a 	ldrsh.w	r3, [r3, #74]	; 0x4a
 800e5aa:	0fda      	lsrs	r2, r3, #31
 800e5ac:	4413      	add	r3, r2
 800e5ae:	105b      	asrs	r3, r3, #1
 800e5b0:	b21b      	sxth	r3, r3
 800e5b2:	b29b      	uxth	r3, r3
 800e5b4:	3b02      	subs	r3, #2
 800e5b6:	b29b      	uxth	r3, r3
 800e5b8:	b21a      	sxth	r2, r3
 800e5ba:	4b2d      	ldr	r3, [pc, #180]	; (800e670 <Buil_Pop+0x214>)
 800e5bc:	801a      	strh	r2, [r3, #0]
 800e5be:	2001      	movs	r0, #1
 800e5c0:	f7ff feba 	bl	800e338 <NotePixel>
 800e5c4:	4b2b      	ldr	r3, [pc, #172]	; (800e674 <Buil_Pop+0x218>)
 800e5c6:	f9b3 3046 	ldrsh.w	r3, [r3, #70]	; 0x46
 800e5ca:	b29b      	uxth	r3, r3
 800e5cc:	3b02      	subs	r3, #2
 800e5ce:	b29b      	uxth	r3, r3
 800e5d0:	b21a      	sxth	r2, r3
 800e5d2:	4b26      	ldr	r3, [pc, #152]	; (800e66c <Buil_Pop+0x210>)
 800e5d4:	801a      	strh	r2, [r3, #0]
 800e5d6:	4b26      	ldr	r3, [pc, #152]	; (800e670 <Buil_Pop+0x214>)
 800e5d8:	2202      	movs	r2, #2
 800e5da:	801a      	strh	r2, [r3, #0]
 800e5dc:	2001      	movs	r0, #1
 800e5de:	f7ff feab 	bl	800e338 <NotePixel>
 800e5e2:	4b24      	ldr	r3, [pc, #144]	; (800e674 <Buil_Pop+0x218>)
 800e5e4:	f9b3 3046 	ldrsh.w	r3, [r3, #70]	; 0x46
 800e5e8:	b29b      	uxth	r3, r3
 800e5ea:	3b02      	subs	r3, #2
 800e5ec:	b29b      	uxth	r3, r3
 800e5ee:	b21a      	sxth	r2, r3
 800e5f0:	4b1e      	ldr	r3, [pc, #120]	; (800e66c <Buil_Pop+0x210>)
 800e5f2:	801a      	strh	r2, [r3, #0]
 800e5f4:	4b1f      	ldr	r3, [pc, #124]	; (800e674 <Buil_Pop+0x218>)
 800e5f6:	f9b3 304a 	ldrsh.w	r3, [r3, #74]	; 0x4a
 800e5fa:	0fda      	lsrs	r2, r3, #31
 800e5fc:	4413      	add	r3, r2
 800e5fe:	105b      	asrs	r3, r3, #1
 800e600:	b21b      	sxth	r3, r3
 800e602:	b29b      	uxth	r3, r3
 800e604:	3b03      	subs	r3, #3
 800e606:	b29b      	uxth	r3, r3
 800e608:	b21a      	sxth	r2, r3
 800e60a:	4b19      	ldr	r3, [pc, #100]	; (800e670 <Buil_Pop+0x214>)
 800e60c:	801a      	strh	r2, [r3, #0]
 800e60e:	2001      	movs	r0, #1
 800e610:	f7ff fe92 	bl	800e338 <NotePixel>
 800e614:	4b17      	ldr	r3, [pc, #92]	; (800e674 <Buil_Pop+0x218>)
 800e616:	f9b3 3046 	ldrsh.w	r3, [r3, #70]	; 0x46
 800e61a:	b29b      	uxth	r3, r3
 800e61c:	3b01      	subs	r3, #1
 800e61e:	b29b      	uxth	r3, r3
 800e620:	b21a      	sxth	r2, r3
 800e622:	4b12      	ldr	r3, [pc, #72]	; (800e66c <Buil_Pop+0x210>)
 800e624:	801a      	strh	r2, [r3, #0]
 800e626:	4b12      	ldr	r3, [pc, #72]	; (800e670 <Buil_Pop+0x214>)
 800e628:	2203      	movs	r2, #3
 800e62a:	801a      	strh	r2, [r3, #0]
 800e62c:	2300      	movs	r3, #0
 800e62e:	80fb      	strh	r3, [r7, #6]
 800e630:	e008      	b.n	800e644 <Buil_Pop+0x1e8>
 800e632:	2001      	movs	r0, #1
 800e634:	f7ff fe80 	bl	800e338 <NotePixel>
 800e638:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800e63c:	b29b      	uxth	r3, r3
 800e63e:	3301      	adds	r3, #1
 800e640:	b29b      	uxth	r3, r3
 800e642:	80fb      	strh	r3, [r7, #6]
 800e644:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800e648:	4b0a      	ldr	r3, [pc, #40]	; (800e674 <Buil_Pop+0x218>)
 800e64a:	f9b3 304a 	ldrsh.w	r3, [r3, #74]	; 0x4a
 800e64e:	0fd9      	lsrs	r1, r3, #31
 800e650:	440b      	add	r3, r1
 800e652:	105b      	asrs	r3, r3, #1
 800e654:	b21b      	sxth	r3, r3
 800e656:	3b06      	subs	r3, #6
 800e658:	429a      	cmp	r2, r3
 800e65a:	dbea      	blt.n	800e632 <Buil_Pop+0x1d6>
 800e65c:	bf00      	nop
 800e65e:	bf00      	nop
 800e660:	3708      	adds	r7, #8
 800e662:	46bd      	mov	sp, r7
 800e664:	bd80      	pop	{r7, pc}
 800e666:	bf00      	nop
 800e668:	20000f88 	.word	0x20000f88
 800e66c:	20000002 	.word	0x20000002
 800e670:	20000004 	.word	0x20000004
 800e674:	20000140 	.word	0x20000140

0800e678 <PopColor>:
 800e678:	b480      	push	{r7}
 800e67a:	b083      	sub	sp, #12
 800e67c:	af00      	add	r7, sp, #0
 800e67e:	4603      	mov	r3, r0
 800e680:	460a      	mov	r2, r1
 800e682:	80fb      	strh	r3, [r7, #6]
 800e684:	4613      	mov	r3, r2
 800e686:	80bb      	strh	r3, [r7, #4]
 800e688:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800e68c:	4b06      	ldr	r3, [pc, #24]	; (800e6a8 <PopColor+0x30>)
 800e68e:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 800e692:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 800e696:	4b04      	ldr	r3, [pc, #16]	; (800e6a8 <PopColor+0x30>)
 800e698:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
 800e69c:	bf00      	nop
 800e69e:	370c      	adds	r7, #12
 800e6a0:	46bd      	mov	sp, r7
 800e6a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6a6:	4770      	bx	lr
 800e6a8:	20000140 	.word	0x20000140

0800e6ac <Close_Pop>:
 800e6ac:	b480      	push	{r7}
 800e6ae:	af00      	add	r7, sp, #0
 800e6b0:	4b07      	ldr	r3, [pc, #28]	; (800e6d0 <Close_Pop+0x24>)
 800e6b2:	781b      	ldrb	r3, [r3, #0]
 800e6b4:	f023 0306 	bic.w	r3, r3, #6
 800e6b8:	b2da      	uxtb	r2, r3
 800e6ba:	4b05      	ldr	r3, [pc, #20]	; (800e6d0 <Close_Pop+0x24>)
 800e6bc:	701a      	strb	r2, [r3, #0]
 800e6be:	4b05      	ldr	r3, [pc, #20]	; (800e6d4 <Close_Pop+0x28>)
 800e6c0:	2201      	movs	r2, #1
 800e6c2:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
 800e6c6:	bf00      	nop
 800e6c8:	46bd      	mov	sp, r7
 800e6ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6ce:	4770      	bx	lr
 800e6d0:	2000078c 	.word	0x2000078c
 800e6d4:	20000140 	.word	0x20000140

0800e6d8 <List_Pop>:
 800e6d8:	b480      	push	{r7}
 800e6da:	af00      	add	r7, sp, #0
 800e6dc:	4b07      	ldr	r3, [pc, #28]	; (800e6fc <List_Pop+0x24>)
 800e6de:	781b      	ldrb	r3, [r3, #0]
 800e6e0:	f043 0302 	orr.w	r3, r3, #2
 800e6e4:	b2da      	uxtb	r2, r3
 800e6e6:	4b05      	ldr	r3, [pc, #20]	; (800e6fc <List_Pop+0x24>)
 800e6e8:	701a      	strb	r2, [r3, #0]
 800e6ea:	4b05      	ldr	r3, [pc, #20]	; (800e700 <List_Pop+0x28>)
 800e6ec:	2200      	movs	r2, #0
 800e6ee:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
 800e6f2:	bf00      	nop
 800e6f4:	46bd      	mov	sp, r7
 800e6f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6fa:	4770      	bx	lr
 800e6fc:	2000078c 	.word	0x2000078c
 800e700:	20000140 	.word	0x20000140

0800e704 <Dialog_Pop>:
 800e704:	b580      	push	{r7, lr}
 800e706:	b084      	sub	sp, #16
 800e708:	af02      	add	r7, sp, #8
 800e70a:	6078      	str	r0, [r7, #4]
 800e70c:	4b2a      	ldr	r3, [pc, #168]	; (800e7b8 <Dialog_Pop+0xb4>)
 800e70e:	781b      	ldrb	r3, [r3, #0]
 800e710:	f043 0304 	orr.w	r3, r3, #4
 800e714:	b2da      	uxtb	r2, r3
 800e716:	4b28      	ldr	r3, [pc, #160]	; (800e7b8 <Dialog_Pop+0xb4>)
 800e718:	701a      	strb	r2, [r3, #0]
 800e71a:	4b28      	ldr	r3, [pc, #160]	; (800e7bc <Dialog_Pop+0xb8>)
 800e71c:	2280      	movs	r2, #128	; 0x80
 800e71e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 800e722:	4b26      	ldr	r3, [pc, #152]	; (800e7bc <Dialog_Pop+0xb8>)
 800e724:	2260      	movs	r2, #96	; 0x60
 800e726:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
 800e72a:	4b24      	ldr	r3, [pc, #144]	; (800e7bc <Dialog_Pop+0xb8>)
 800e72c:	2250      	movs	r2, #80	; 0x50
 800e72e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
 800e732:	4b22      	ldr	r3, [pc, #136]	; (800e7bc <Dialog_Pop+0xb8>)
 800e734:	22c8      	movs	r2, #200	; 0xc8
 800e736:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800e73a:	f643 11e7 	movw	r1, #14823	; 0x39e7
 800e73e:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800e742:	f7ff ff99 	bl	800e678 <PopColor>
 800e746:	f7ff fe89 	bl	800e45c <Buil_Pop>
 800e74a:	687b      	ldr	r3, [r7, #4]
 800e74c:	2200      	movs	r2, #0
 800e74e:	211c      	movs	r1, #28
 800e750:	2008      	movs	r0, #8
 800e752:	f000 f8e1 	bl	800e918 <NoteSTR>
 800e756:	4b1a      	ldr	r3, [pc, #104]	; (800e7c0 <Dialog_Pop+0xbc>)
 800e758:	2211      	movs	r2, #17
 800e75a:	2108      	movs	r1, #8
 800e75c:	200c      	movs	r0, #12
 800e75e:	f000 f8db 	bl	800e918 <NoteSTR>
 800e762:	230a      	movs	r3, #10
 800e764:	9300      	str	r3, [sp, #0]
 800e766:	2302      	movs	r3, #2
 800e768:	2208      	movs	r2, #8
 800e76a:	210c      	movs	r1, #12
 800e76c:	2000      	movs	r0, #0
 800e76e:	f000 f979 	bl	800ea64 <Note_4Point>
 800e772:	4b14      	ldr	r3, [pc, #80]	; (800e7c4 <Dialog_Pop+0xc0>)
 800e774:	2200      	movs	r2, #0
 800e776:	2108      	movs	r1, #8
 800e778:	2018      	movs	r0, #24
 800e77a:	f000 f8cd 	bl	800e918 <NoteSTR>
 800e77e:	4b12      	ldr	r3, [pc, #72]	; (800e7c8 <Dialog_Pop+0xc4>)
 800e780:	2211      	movs	r2, #17
 800e782:	2108      	movs	r1, #8
 800e784:	2048      	movs	r0, #72	; 0x48
 800e786:	f000 f8c7 	bl	800e918 <NoteSTR>
 800e78a:	230a      	movs	r3, #10
 800e78c:	9300      	str	r3, [sp, #0]
 800e78e:	2302      	movs	r3, #2
 800e790:	2208      	movs	r2, #8
 800e792:	2148      	movs	r1, #72	; 0x48
 800e794:	2000      	movs	r0, #0
 800e796:	f000 f965 	bl	800ea64 <Note_4Point>
 800e79a:	4b0c      	ldr	r3, [pc, #48]	; (800e7cc <Dialog_Pop+0xc8>)
 800e79c:	2200      	movs	r2, #0
 800e79e:	2108      	movs	r1, #8
 800e7a0:	2054      	movs	r0, #84	; 0x54
 800e7a2:	f000 f8b9 	bl	800e918 <NoteSTR>
 800e7a6:	4b05      	ldr	r3, [pc, #20]	; (800e7bc <Dialog_Pop+0xb8>)
 800e7a8:	2200      	movs	r2, #0
 800e7aa:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
 800e7ae:	bf00      	nop
 800e7b0:	3708      	adds	r7, #8
 800e7b2:	46bd      	mov	sp, r7
 800e7b4:	bd80      	pop	{r7, pc}
 800e7b6:	bf00      	nop
 800e7b8:	2000078c 	.word	0x2000078c
 800e7bc:	20000140 	.word	0x20000140
 800e7c0:	080001c4 	.word	0x080001c4
 800e7c4:	080001c8 	.word	0x080001c8
 800e7c8:	080001d0 	.word	0x080001d0
 800e7cc:	080001d4 	.word	0x080001d4

0800e7d0 <Calibrate_Pop>:
 800e7d0:	b580      	push	{r7, lr}
 800e7d2:	b082      	sub	sp, #8
 800e7d4:	af00      	add	r7, sp, #0
 800e7d6:	6078      	str	r0, [r7, #4]
 800e7d8:	4b16      	ldr	r3, [pc, #88]	; (800e834 <Calibrate_Pop+0x64>)
 800e7da:	781b      	ldrb	r3, [r3, #0]
 800e7dc:	f043 0304 	orr.w	r3, r3, #4
 800e7e0:	b2da      	uxtb	r2, r3
 800e7e2:	4b14      	ldr	r3, [pc, #80]	; (800e834 <Calibrate_Pop+0x64>)
 800e7e4:	701a      	strb	r2, [r3, #0]
 800e7e6:	4b14      	ldr	r3, [pc, #80]	; (800e838 <Calibrate_Pop+0x68>)
 800e7e8:	22c8      	movs	r2, #200	; 0xc8
 800e7ea:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 800e7ee:	4b12      	ldr	r3, [pc, #72]	; (800e838 <Calibrate_Pop+0x68>)
 800e7f0:	2240      	movs	r2, #64	; 0x40
 800e7f2:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
 800e7f6:	4b10      	ldr	r3, [pc, #64]	; (800e838 <Calibrate_Pop+0x68>)
 800e7f8:	2232      	movs	r2, #50	; 0x32
 800e7fa:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
 800e7fe:	4b0e      	ldr	r3, [pc, #56]	; (800e838 <Calibrate_Pop+0x68>)
 800e800:	22e6      	movs	r2, #230	; 0xe6
 800e802:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800e806:	f643 11e7 	movw	r1, #14823	; 0x39e7
 800e80a:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800e80e:	f7ff ff33 	bl	800e678 <PopColor>
 800e812:	f7ff fe23 	bl	800e45c <Buil_Pop>
 800e816:	687b      	ldr	r3, [r7, #4]
 800e818:	2200      	movs	r2, #0
 800e81a:	210a      	movs	r1, #10
 800e81c:	2010      	movs	r0, #16
 800e81e:	f000 f87b 	bl	800e918 <NoteSTR>
 800e822:	4b05      	ldr	r3, [pc, #20]	; (800e838 <Calibrate_Pop+0x68>)
 800e824:	2200      	movs	r2, #0
 800e826:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
 800e82a:	bf00      	nop
 800e82c:	3708      	adds	r7, #8
 800e82e:	46bd      	mov	sp, r7
 800e830:	bd80      	pop	{r7, pc}
 800e832:	bf00      	nop
 800e834:	2000078c 	.word	0x2000078c
 800e838:	20000140 	.word	0x20000140

0800e83c <CalSave_Pop>:
 800e83c:	b580      	push	{r7, lr}
 800e83e:	b084      	sub	sp, #16
 800e840:	af02      	add	r7, sp, #8
 800e842:	6078      	str	r0, [r7, #4]
 800e844:	4b2d      	ldr	r3, [pc, #180]	; (800e8fc <CalSave_Pop+0xc0>)
 800e846:	781b      	ldrb	r3, [r3, #0]
 800e848:	f043 0304 	orr.w	r3, r3, #4
 800e84c:	b2da      	uxtb	r2, r3
 800e84e:	4b2b      	ldr	r3, [pc, #172]	; (800e8fc <CalSave_Pop+0xc0>)
 800e850:	701a      	strb	r2, [r3, #0]
 800e852:	4b2b      	ldr	r3, [pc, #172]	; (800e900 <CalSave_Pop+0xc4>)
 800e854:	22d0      	movs	r2, #208	; 0xd0
 800e856:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 800e85a:	4b29      	ldr	r3, [pc, #164]	; (800e900 <CalSave_Pop+0xc4>)
 800e85c:	2260      	movs	r2, #96	; 0x60
 800e85e:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
 800e862:	4b27      	ldr	r3, [pc, #156]	; (800e900 <CalSave_Pop+0xc4>)
 800e864:	221e      	movs	r2, #30
 800e866:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
 800e86a:	4b25      	ldr	r3, [pc, #148]	; (800e900 <CalSave_Pop+0xc4>)
 800e86c:	22c8      	movs	r2, #200	; 0xc8
 800e86e:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800e872:	f643 11e7 	movw	r1, #14823	; 0x39e7
 800e876:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800e87a:	f7ff fefd 	bl	800e678 <PopColor>
 800e87e:	f7ff fded 	bl	800e45c <Buil_Pop>
 800e882:	4b20      	ldr	r3, [pc, #128]	; (800e904 <CalSave_Pop+0xc8>)
 800e884:	2200      	movs	r2, #0
 800e886:	211c      	movs	r1, #28
 800e888:	2006      	movs	r0, #6
 800e88a:	f000 f845 	bl	800e918 <NoteSTR>
 800e88e:	687b      	ldr	r3, [r7, #4]
 800e890:	2200      	movs	r2, #0
 800e892:	211c      	movs	r1, #28
 800e894:	205a      	movs	r0, #90	; 0x5a
 800e896:	f000 f83f 	bl	800e918 <NoteSTR>
 800e89a:	4b1b      	ldr	r3, [pc, #108]	; (800e908 <CalSave_Pop+0xcc>)
 800e89c:	2211      	movs	r2, #17
 800e89e:	2108      	movs	r1, #8
 800e8a0:	201e      	movs	r0, #30
 800e8a2:	f000 f839 	bl	800e918 <NoteSTR>
 800e8a6:	230a      	movs	r3, #10
 800e8a8:	9300      	str	r3, [sp, #0]
 800e8aa:	2302      	movs	r3, #2
 800e8ac:	2208      	movs	r2, #8
 800e8ae:	211e      	movs	r1, #30
 800e8b0:	2000      	movs	r0, #0
 800e8b2:	f000 f8d7 	bl	800ea64 <Note_4Point>
 800e8b6:	4b15      	ldr	r3, [pc, #84]	; (800e90c <CalSave_Pop+0xd0>)
 800e8b8:	2200      	movs	r2, #0
 800e8ba:	2108      	movs	r1, #8
 800e8bc:	202a      	movs	r0, #42	; 0x2a
 800e8be:	f000 f82b 	bl	800e918 <NoteSTR>
 800e8c2:	4b13      	ldr	r3, [pc, #76]	; (800e910 <CalSave_Pop+0xd4>)
 800e8c4:	2211      	movs	r2, #17
 800e8c6:	2108      	movs	r1, #8
 800e8c8:	2078      	movs	r0, #120	; 0x78
 800e8ca:	f000 f825 	bl	800e918 <NoteSTR>
 800e8ce:	230a      	movs	r3, #10
 800e8d0:	9300      	str	r3, [sp, #0]
 800e8d2:	2302      	movs	r3, #2
 800e8d4:	2208      	movs	r2, #8
 800e8d6:	2178      	movs	r1, #120	; 0x78
 800e8d8:	2000      	movs	r0, #0
 800e8da:	f000 f8c3 	bl	800ea64 <Note_4Point>
 800e8de:	4b0d      	ldr	r3, [pc, #52]	; (800e914 <CalSave_Pop+0xd8>)
 800e8e0:	2200      	movs	r2, #0
 800e8e2:	2108      	movs	r1, #8
 800e8e4:	2084      	movs	r0, #132	; 0x84
 800e8e6:	f000 f817 	bl	800e918 <NoteSTR>
 800e8ea:	4b05      	ldr	r3, [pc, #20]	; (800e900 <CalSave_Pop+0xc4>)
 800e8ec:	2200      	movs	r2, #0
 800e8ee:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
 800e8f2:	bf00      	nop
 800e8f4:	3708      	adds	r7, #8
 800e8f6:	46bd      	mov	sp, r7
 800e8f8:	bd80      	pop	{r7, pc}
 800e8fa:	bf00      	nop
 800e8fc:	2000078c 	.word	0x2000078c
 800e900:	20000140 	.word	0x20000140
 800e904:	080001dc 	.word	0x080001dc
 800e908:	080001c4 	.word	0x080001c4
 800e90c:	080001c8 	.word	0x080001c8
 800e910:	080001d0 	.word	0x080001d0
 800e914:	080001d4 	.word	0x080001d4

0800e918 <NoteSTR>:
 800e918:	b580      	push	{r7, lr}
 800e91a:	b086      	sub	sp, #24
 800e91c:	af00      	add	r7, sp, #0
 800e91e:	607b      	str	r3, [r7, #4]
 800e920:	4603      	mov	r3, r0
 800e922:	81fb      	strh	r3, [r7, #14]
 800e924:	460b      	mov	r3, r1
 800e926:	81bb      	strh	r3, [r7, #12]
 800e928:	4613      	mov	r3, r2
 800e92a:	72fb      	strb	r3, [r7, #11]
 800e92c:	4a48      	ldr	r2, [pc, #288]	; (800ea50 <NoteSTR+0x138>)
 800e92e:	89fb      	ldrh	r3, [r7, #14]
 800e930:	8013      	strh	r3, [r2, #0]
 800e932:	4a48      	ldr	r2, [pc, #288]	; (800ea54 <NoteSTR+0x13c>)
 800e934:	89bb      	ldrh	r3, [r7, #12]
 800e936:	8013      	strh	r3, [r2, #0]
 800e938:	e080      	b.n	800ea3c <NoteSTR+0x124>
 800e93a:	687b      	ldr	r3, [r7, #4]
 800e93c:	1c5a      	adds	r2, r3, #1
 800e93e:	607a      	str	r2, [r7, #4]
 800e940:	781b      	ldrb	r3, [r3, #0]
 800e942:	747b      	strb	r3, [r7, #17]
 800e944:	2300      	movs	r3, #0
 800e946:	82fb      	strh	r3, [r7, #22]
 800e948:	e074      	b.n	800ea34 <NoteSTR+0x11c>
 800e94a:	7afb      	ldrb	r3, [r7, #11]
 800e94c:	f003 0310 	and.w	r3, r3, #16
 800e950:	2b00      	cmp	r3, #0
 800e952:	d10e      	bne.n	800e972 <NoteSTR+0x5a>
 800e954:	7c7b      	ldrb	r3, [r7, #17]
 800e956:	f1a3 0221 	sub.w	r2, r3, #33	; 0x21
 800e95a:	4613      	mov	r3, r2
 800e95c:	005b      	lsls	r3, r3, #1
 800e95e:	4413      	add	r3, r2
 800e960:	005b      	lsls	r3, r3, #1
 800e962:	461a      	mov	r2, r3
 800e964:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800e968:	4413      	add	r3, r2
 800e96a:	4a3b      	ldr	r2, [pc, #236]	; (800ea58 <NoteSTR+0x140>)
 800e96c:	5cd3      	ldrb	r3, [r2, r3]
 800e96e:	827b      	strh	r3, [r7, #18]
 800e970:	e00d      	b.n	800e98e <NoteSTR+0x76>
 800e972:	7c7b      	ldrb	r3, [r7, #17]
 800e974:	f1a3 0221 	sub.w	r2, r3, #33	; 0x21
 800e978:	4613      	mov	r3, r2
 800e97a:	005b      	lsls	r3, r3, #1
 800e97c:	4413      	add	r3, r2
 800e97e:	005b      	lsls	r3, r3, #1
 800e980:	461a      	mov	r2, r3
 800e982:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800e986:	4413      	add	r3, r2
 800e988:	4a34      	ldr	r2, [pc, #208]	; (800ea5c <NoteSTR+0x144>)
 800e98a:	5cd3      	ldrb	r3, [r2, r3]
 800e98c:	827b      	strh	r3, [r7, #18]
 800e98e:	7afb      	ldrb	r3, [r7, #11]
 800e990:	f003 0320 	and.w	r3, r3, #32
 800e994:	2b00      	cmp	r3, #0
 800e996:	d00c      	beq.n	800e9b2 <NoteSTR+0x9a>
 800e998:	8afb      	ldrh	r3, [r7, #22]
 800e99a:	f003 0301 	and.w	r3, r3, #1
 800e99e:	b29b      	uxth	r3, r3
 800e9a0:	2b00      	cmp	r3, #0
 800e9a2:	d001      	beq.n	800e9a8 <NoteSTR+0x90>
 800e9a4:	4a2e      	ldr	r2, [pc, #184]	; (800ea60 <NoteSTR+0x148>)
 800e9a6:	e001      	b.n	800e9ac <NoteSTR+0x94>
 800e9a8:	f245 5255 	movw	r2, #21845	; 0x5555
 800e9ac:	8a7b      	ldrh	r3, [r7, #18]
 800e9ae:	4013      	ands	r3, r2
 800e9b0:	827b      	strh	r3, [r7, #18]
 800e9b2:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800e9b6:	009b      	lsls	r3, r3, #2
 800e9b8:	827b      	strh	r3, [r7, #18]
 800e9ba:	2300      	movs	r3, #0
 800e9bc:	82bb      	strh	r3, [r7, #20]
 800e9be:	e01f      	b.n	800ea00 <NoteSTR+0xe8>
 800e9c0:	8a7b      	ldrh	r3, [r7, #18]
 800e9c2:	f003 0301 	and.w	r3, r3, #1
 800e9c6:	2b00      	cmp	r3, #0
 800e9c8:	d00b      	beq.n	800e9e2 <NoteSTR+0xca>
 800e9ca:	7afb      	ldrb	r3, [r7, #11]
 800e9cc:	f003 0301 	and.w	r3, r3, #1
 800e9d0:	2b00      	cmp	r3, #0
 800e9d2:	bf0c      	ite	eq
 800e9d4:	2301      	moveq	r3, #1
 800e9d6:	2300      	movne	r3, #0
 800e9d8:	b2db      	uxtb	r3, r3
 800e9da:	4618      	mov	r0, r3
 800e9dc:	f7ff fcac 	bl	800e338 <NotePixel>
 800e9e0:	e006      	b.n	800e9f0 <NoteSTR+0xd8>
 800e9e2:	7afb      	ldrb	r3, [r7, #11]
 800e9e4:	f003 0301 	and.w	r3, r3, #1
 800e9e8:	b2db      	uxtb	r3, r3
 800e9ea:	4618      	mov	r0, r3
 800e9ec:	f7ff fca4 	bl	800e338 <NotePixel>
 800e9f0:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800e9f4:	105b      	asrs	r3, r3, #1
 800e9f6:	827b      	strh	r3, [r7, #18]
 800e9f8:	8abb      	ldrh	r3, [r7, #20]
 800e9fa:	3301      	adds	r3, #1
 800e9fc:	b29b      	uxth	r3, r3
 800e9fe:	82bb      	strh	r3, [r7, #20]
 800ea00:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800ea04:	2b0d      	cmp	r3, #13
 800ea06:	dddb      	ble.n	800e9c0 <NoteSTR+0xa8>
 800ea08:	4b11      	ldr	r3, [pc, #68]	; (800ea50 <NoteSTR+0x138>)
 800ea0a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800ea0e:	b29b      	uxth	r3, r3
 800ea10:	3301      	adds	r3, #1
 800ea12:	b29b      	uxth	r3, r3
 800ea14:	b21a      	sxth	r2, r3
 800ea16:	4b0e      	ldr	r3, [pc, #56]	; (800ea50 <NoteSTR+0x138>)
 800ea18:	801a      	strh	r2, [r3, #0]
 800ea1a:	4b0e      	ldr	r3, [pc, #56]	; (800ea54 <NoteSTR+0x13c>)
 800ea1c:	f9b3 3000 	ldrsh.w	r3, [r3]
 800ea20:	b29b      	uxth	r3, r3
 800ea22:	3b0e      	subs	r3, #14
 800ea24:	b29b      	uxth	r3, r3
 800ea26:	b21a      	sxth	r2, r3
 800ea28:	4b0a      	ldr	r3, [pc, #40]	; (800ea54 <NoteSTR+0x13c>)
 800ea2a:	801a      	strh	r2, [r3, #0]
 800ea2c:	8afb      	ldrh	r3, [r7, #22]
 800ea2e:	3301      	adds	r3, #1
 800ea30:	b29b      	uxth	r3, r3
 800ea32:	82fb      	strh	r3, [r7, #22]
 800ea34:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800ea38:	2b05      	cmp	r3, #5
 800ea3a:	dd86      	ble.n	800e94a <NoteSTR+0x32>
 800ea3c:	687b      	ldr	r3, [r7, #4]
 800ea3e:	781b      	ldrb	r3, [r3, #0]
 800ea40:	2b00      	cmp	r3, #0
 800ea42:	f47f af7a 	bne.w	800e93a <NoteSTR+0x22>
 800ea46:	bf00      	nop
 800ea48:	bf00      	nop
 800ea4a:	3718      	adds	r7, #24
 800ea4c:	46bd      	mov	sp, r7
 800ea4e:	bd80      	pop	{r7, pc}
 800ea50:	20000002 	.word	0x20000002
 800ea54:	20000004 	.word	0x20000004
 800ea58:	080016c4 	.word	0x080016c4
 800ea5c:	08001490 	.word	0x08001490
 800ea60:	ffffaaaa 	.word	0xffffaaaa

0800ea64 <Note_4Point>:
 800ea64:	b590      	push	{r4, r7, lr}
 800ea66:	b083      	sub	sp, #12
 800ea68:	af00      	add	r7, sp, #0
 800ea6a:	4604      	mov	r4, r0
 800ea6c:	4608      	mov	r0, r1
 800ea6e:	4611      	mov	r1, r2
 800ea70:	461a      	mov	r2, r3
 800ea72:	4623      	mov	r3, r4
 800ea74:	71fb      	strb	r3, [r7, #7]
 800ea76:	4603      	mov	r3, r0
 800ea78:	80bb      	strh	r3, [r7, #4]
 800ea7a:	460b      	mov	r3, r1
 800ea7c:	807b      	strh	r3, [r7, #2]
 800ea7e:	4613      	mov	r3, r2
 800ea80:	71bb      	strb	r3, [r7, #6]
 800ea82:	7e3b      	ldrb	r3, [r7, #24]
 800ea84:	3304      	adds	r3, #4
 800ea86:	763b      	strb	r3, [r7, #24]
 800ea88:	4a2e      	ldr	r2, [pc, #184]	; (800eb44 <Note_4Point+0xe0>)
 800ea8a:	88bb      	ldrh	r3, [r7, #4]
 800ea8c:	8013      	strh	r3, [r2, #0]
 800ea8e:	4a2e      	ldr	r2, [pc, #184]	; (800eb48 <Note_4Point+0xe4>)
 800ea90:	887b      	ldrh	r3, [r7, #2]
 800ea92:	8013      	strh	r3, [r2, #0]
 800ea94:	79fb      	ldrb	r3, [r7, #7]
 800ea96:	f003 0301 	and.w	r3, r3, #1
 800ea9a:	b2db      	uxtb	r3, r3
 800ea9c:	4618      	mov	r0, r3
 800ea9e:	f7ff fc4b 	bl	800e338 <NotePixel>
 800eaa2:	4a28      	ldr	r2, [pc, #160]	; (800eb44 <Note_4Point+0xe0>)
 800eaa4:	88bb      	ldrh	r3, [r7, #4]
 800eaa6:	8013      	strh	r3, [r2, #0]
 800eaa8:	7e3b      	ldrb	r3, [r7, #24]
 800eaaa:	b29a      	uxth	r2, r3
 800eaac:	887b      	ldrh	r3, [r7, #2]
 800eaae:	4413      	add	r3, r2
 800eab0:	b29b      	uxth	r3, r3
 800eab2:	3b01      	subs	r3, #1
 800eab4:	b29b      	uxth	r3, r3
 800eab6:	b21a      	sxth	r2, r3
 800eab8:	4b23      	ldr	r3, [pc, #140]	; (800eb48 <Note_4Point+0xe4>)
 800eaba:	801a      	strh	r2, [r3, #0]
 800eabc:	79fb      	ldrb	r3, [r7, #7]
 800eabe:	f003 0301 	and.w	r3, r3, #1
 800eac2:	b2db      	uxtb	r3, r3
 800eac4:	4618      	mov	r0, r3
 800eac6:	f7ff fc37 	bl	800e338 <NotePixel>
 800eaca:	79bb      	ldrb	r3, [r7, #6]
 800eacc:	b29b      	uxth	r3, r3
 800eace:	461a      	mov	r2, r3
 800ead0:	0052      	lsls	r2, r2, #1
 800ead2:	4413      	add	r3, r2
 800ead4:	005b      	lsls	r3, r3, #1
 800ead6:	b29a      	uxth	r2, r3
 800ead8:	88bb      	ldrh	r3, [r7, #4]
 800eada:	4413      	add	r3, r2
 800eadc:	b29b      	uxth	r3, r3
 800eade:	3b01      	subs	r3, #1
 800eae0:	b29b      	uxth	r3, r3
 800eae2:	b21a      	sxth	r2, r3
 800eae4:	4b17      	ldr	r3, [pc, #92]	; (800eb44 <Note_4Point+0xe0>)
 800eae6:	801a      	strh	r2, [r3, #0]
 800eae8:	4a17      	ldr	r2, [pc, #92]	; (800eb48 <Note_4Point+0xe4>)
 800eaea:	887b      	ldrh	r3, [r7, #2]
 800eaec:	8013      	strh	r3, [r2, #0]
 800eaee:	79fb      	ldrb	r3, [r7, #7]
 800eaf0:	f003 0301 	and.w	r3, r3, #1
 800eaf4:	b2db      	uxtb	r3, r3
 800eaf6:	4618      	mov	r0, r3
 800eaf8:	f7ff fc1e 	bl	800e338 <NotePixel>
 800eafc:	79bb      	ldrb	r3, [r7, #6]
 800eafe:	b29b      	uxth	r3, r3
 800eb00:	461a      	mov	r2, r3
 800eb02:	0052      	lsls	r2, r2, #1
 800eb04:	4413      	add	r3, r2
 800eb06:	005b      	lsls	r3, r3, #1
 800eb08:	b29a      	uxth	r2, r3
 800eb0a:	88bb      	ldrh	r3, [r7, #4]
 800eb0c:	4413      	add	r3, r2
 800eb0e:	b29b      	uxth	r3, r3
 800eb10:	3b01      	subs	r3, #1
 800eb12:	b29b      	uxth	r3, r3
 800eb14:	b21a      	sxth	r2, r3
 800eb16:	4b0b      	ldr	r3, [pc, #44]	; (800eb44 <Note_4Point+0xe0>)
 800eb18:	801a      	strh	r2, [r3, #0]
 800eb1a:	7e3b      	ldrb	r3, [r7, #24]
 800eb1c:	b29a      	uxth	r2, r3
 800eb1e:	887b      	ldrh	r3, [r7, #2]
 800eb20:	4413      	add	r3, r2
 800eb22:	b29b      	uxth	r3, r3
 800eb24:	3b01      	subs	r3, #1
 800eb26:	b29b      	uxth	r3, r3
 800eb28:	b21a      	sxth	r2, r3
 800eb2a:	4b07      	ldr	r3, [pc, #28]	; (800eb48 <Note_4Point+0xe4>)
 800eb2c:	801a      	strh	r2, [r3, #0]
 800eb2e:	79fb      	ldrb	r3, [r7, #7]
 800eb30:	f003 0301 	and.w	r3, r3, #1
 800eb34:	b2db      	uxtb	r3, r3
 800eb36:	4618      	mov	r0, r3
 800eb38:	f7ff fbfe 	bl	800e338 <NotePixel>
 800eb3c:	bf00      	nop
 800eb3e:	370c      	adds	r7, #12
 800eb40:	46bd      	mov	sp, r7
 800eb42:	bd90      	pop	{r4, r7, pc}
 800eb44:	20000002 	.word	0x20000002
 800eb48:	20000004 	.word	0x20000004

0800eb4c <ExtFlash_SendByte>:

/*******************************************************************************
 SPI_FLASH_SendByte
*******************************************************************************/
char ExtFlash_SendByte(char byte)
{
 800eb4c:	b580      	push	{r7, lr}
 800eb4e:	b084      	sub	sp, #16
 800eb50:	af00      	add	r7, sp, #0
 800eb52:	4603      	mov	r3, r0
 800eb54:	71fb      	strb	r3, [r7, #7]
   char retbyte=0;
 800eb56:	2300      	movs	r3, #0
 800eb58:	73fb      	strb	r3, [r7, #15]
	Tout = 0;
 800eb5a:	4b1d      	ldr	r3, [pc, #116]	; (800ebd0 <ExtFlash_SendByte+0x84>)
 800eb5c:	2200      	movs	r2, #0
 800eb5e:	601a      	str	r2, [r3, #0]
  while(HAL_SPI_GetState( &hspi2 ) != HAL_SPI_STATE_READY) /*SPI_I2S_GetFlagStatus(SPI2, SPI_I2S_FLAG_TXE) == RESET*/
 800eb60:	e009      	b.n	800eb76 <ExtFlash_SendByte+0x2a>
  {
    if(Tout++ > TMAX)
 800eb62:	4b1b      	ldr	r3, [pc, #108]	; (800ebd0 <ExtFlash_SendByte+0x84>)
 800eb64:	681b      	ldr	r3, [r3, #0]
 800eb66:	1c5a      	adds	r2, r3, #1
 800eb68:	4919      	ldr	r1, [pc, #100]	; (800ebd0 <ExtFlash_SendByte+0x84>)
 800eb6a:	600a      	str	r2, [r1, #0]
 800eb6c:	4a19      	ldr	r2, [pc, #100]	; (800ebd4 <ExtFlash_SendByte+0x88>)
 800eb6e:	4293      	cmp	r3, r2
 800eb70:	d901      	bls.n	800eb76 <ExtFlash_SendByte+0x2a>
    	return 255;
 800eb72:	23ff      	movs	r3, #255	; 0xff
 800eb74:	e027      	b.n	800ebc6 <ExtFlash_SendByte+0x7a>
  while(HAL_SPI_GetState( &hspi2 ) != HAL_SPI_STATE_READY) /*SPI_I2S_GetFlagStatus(SPI2, SPI_I2S_FLAG_TXE) == RESET*/
 800eb76:	4818      	ldr	r0, [pc, #96]	; (800ebd8 <ExtFlash_SendByte+0x8c>)
 800eb78:	f00e f816 	bl	801cba8 <HAL_SPI_GetState>
 800eb7c:	4603      	mov	r3, r0
 800eb7e:	2b01      	cmp	r3, #1
 800eb80:	d1ef      	bne.n	800eb62 <ExtFlash_SendByte+0x16>
  }
  HAL_SPI_Transmit(&hspi2, (unsigned char*)&byte, 1, 1);// timeout 1 ms  SPI_I2S_SendData(SPI2, byte);
 800eb82:	1df9      	adds	r1, r7, #7
 800eb84:	2301      	movs	r3, #1
 800eb86:	2201      	movs	r2, #1
 800eb88:	4813      	ldr	r0, [pc, #76]	; (800ebd8 <ExtFlash_SendByte+0x8c>)
 800eb8a:	f00d fb14 	bl	801c1b6 <HAL_SPI_Transmit>
  Tout = 0;
 800eb8e:	4b10      	ldr	r3, [pc, #64]	; (800ebd0 <ExtFlash_SendByte+0x84>)
 800eb90:	2200      	movs	r2, #0
 800eb92:	601a      	str	r2, [r3, #0]
  while(HAL_SPI_GetState( &hspi2 ) != HAL_SPI_STATE_READY) //  while(SPI_I2S_GetFlagStatus(SPI2, SPI_I2S_FLAG_RXNE) == RESET)
 800eb94:	e009      	b.n	800ebaa <ExtFlash_SendByte+0x5e>
  {
    if(Tout++ > TMAX)
 800eb96:	4b0e      	ldr	r3, [pc, #56]	; (800ebd0 <ExtFlash_SendByte+0x84>)
 800eb98:	681b      	ldr	r3, [r3, #0]
 800eb9a:	1c5a      	adds	r2, r3, #1
 800eb9c:	490c      	ldr	r1, [pc, #48]	; (800ebd0 <ExtFlash_SendByte+0x84>)
 800eb9e:	600a      	str	r2, [r1, #0]
 800eba0:	4a0c      	ldr	r2, [pc, #48]	; (800ebd4 <ExtFlash_SendByte+0x88>)
 800eba2:	4293      	cmp	r3, r2
 800eba4:	d901      	bls.n	800ebaa <ExtFlash_SendByte+0x5e>
    	return 255;
 800eba6:	23ff      	movs	r3, #255	; 0xff
 800eba8:	e00d      	b.n	800ebc6 <ExtFlash_SendByte+0x7a>
  while(HAL_SPI_GetState( &hspi2 ) != HAL_SPI_STATE_READY) //  while(SPI_I2S_GetFlagStatus(SPI2, SPI_I2S_FLAG_RXNE) == RESET)
 800ebaa:	480b      	ldr	r0, [pc, #44]	; (800ebd8 <ExtFlash_SendByte+0x8c>)
 800ebac:	f00d fffc 	bl	801cba8 <HAL_SPI_GetState>
 800ebb0:	4603      	mov	r3, r0
 800ebb2:	2b01      	cmp	r3, #1
 800ebb4:	d1ef      	bne.n	800eb96 <ExtFlash_SendByte+0x4a>
  }
  HAL_SPI_Receive(&hspi2, (unsigned char*)&retbyte, 1, 1); //timeout 1 ms
 800ebb6:	f107 010f 	add.w	r1, r7, #15
 800ebba:	2301      	movs	r3, #1
 800ebbc:	2201      	movs	r2, #1
 800ebbe:	4806      	ldr	r0, [pc, #24]	; (800ebd8 <ExtFlash_SendByte+0x8c>)
 800ebc0:	f00d fc35 	bl	801c42e <HAL_SPI_Receive>
  return retbyte/*SPI_I2S_ReceiveData(SPI2)*/;
 800ebc4:	7bfb      	ldrb	r3, [r7, #15]
}
 800ebc6:	4618      	mov	r0, r3
 800ebc8:	3710      	adds	r7, #16
 800ebca:	46bd      	mov	sp, r7
 800ebcc:	bd80      	pop	{r7, pc}
 800ebce:	bf00      	nop
 800ebd0:	200015cc 	.word	0x200015cc
 800ebd4:	000186a0 	.word	0x000186a0
 800ebd8:	20006890 	.word	0x20006890

0800ebdc <ExtFlash_WaitForWriteEnd>:

/*******************************************************************************
 SPI_FLASH_WaitForWriteEnd
*******************************************************************************/
void ExtFlash_WaitForWriteEnd(void)
{
 800ebdc:	b580      	push	{r7, lr}
 800ebde:	b082      	sub	sp, #8
 800ebe0:	af00      	add	r7, sp, #0
  char FLASH_Status = 0;
 800ebe2:	2300      	movs	r3, #0
 800ebe4:	71fb      	strb	r3, [r7, #7]

  HAL_GPIO_WritePin(SS_GPIO_Port, SS_Pin, GPIO_PIN_RESET); //ExtFlash_CS_LOW();
 800ebe6:	2200      	movs	r2, #0
 800ebe8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800ebec:	4812      	ldr	r0, [pc, #72]	; (800ec38 <ExtFlash_WaitForWriteEnd+0x5c>)
 800ebee:	f00a ffdd 	bl	8019bac <HAL_GPIO_WritePin>
  ExtFlash_SendByte(RDSR);
 800ebf2:	2005      	movs	r0, #5
 800ebf4:	f7ff ffaa 	bl	800eb4c <ExtFlash_SendByte>
  Tout = 0;
 800ebf8:	4b10      	ldr	r3, [pc, #64]	; (800ec3c <ExtFlash_WaitForWriteEnd+0x60>)
 800ebfa:	2200      	movs	r2, #0
 800ebfc:	601a      	str	r2, [r3, #0]
  do
  {
	  FLASH_Status = ExtFlash_SendByte(Dummy_Byte);
 800ebfe:	20a5      	movs	r0, #165	; 0xa5
 800ec00:	f7ff ffa4 	bl	800eb4c <ExtFlash_SendByte>
 800ec04:	4603      	mov	r3, r0
 800ec06:	71fb      	strb	r3, [r7, #7]
      if(Tout++ > TMAX)
 800ec08:	4b0c      	ldr	r3, [pc, #48]	; (800ec3c <ExtFlash_WaitForWriteEnd+0x60>)
 800ec0a:	681b      	ldr	r3, [r3, #0]
 800ec0c:	1c5a      	adds	r2, r3, #1
 800ec0e:	490b      	ldr	r1, [pc, #44]	; (800ec3c <ExtFlash_WaitForWriteEnd+0x60>)
 800ec10:	600a      	str	r2, [r1, #0]
 800ec12:	4a0b      	ldr	r2, [pc, #44]	; (800ec40 <ExtFlash_WaitForWriteEnd+0x64>)
 800ec14:	4293      	cmp	r3, r2
 800ec16:	d80b      	bhi.n	800ec30 <ExtFlash_WaitForWriteEnd+0x54>
    	  return;
  }
  while((FLASH_Status & WIP_Flag) == SET);              // Write in progress
 800ec18:	79fb      	ldrb	r3, [r7, #7]
 800ec1a:	f003 0301 	and.w	r3, r3, #1
 800ec1e:	2b00      	cmp	r3, #0
 800ec20:	d1ed      	bne.n	800ebfe <ExtFlash_WaitForWriteEnd+0x22>
  HAL_GPIO_WritePin(SS_GPIO_Port, SS_Pin, GPIO_PIN_SET);
 800ec22:	2201      	movs	r2, #1
 800ec24:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800ec28:	4803      	ldr	r0, [pc, #12]	; (800ec38 <ExtFlash_WaitForWriteEnd+0x5c>)
 800ec2a:	f00a ffbf 	bl	8019bac <HAL_GPIO_WritePin>
 800ec2e:	e000      	b.n	800ec32 <ExtFlash_WaitForWriteEnd+0x56>
    	  return;
 800ec30:	bf00      	nop
}
 800ec32:	3708      	adds	r7, #8
 800ec34:	46bd      	mov	sp, r7
 800ec36:	bd80      	pop	{r7, pc}
 800ec38:	40020400 	.word	0x40020400
 800ec3c:	200015cc 	.word	0x200015cc
 800ec40:	000186a0 	.word	0x000186a0

0800ec44 <ExtFlash_PageRD>:

/*******************************************************************************
 SPI_FLASH_BufferRead
*******************************************************************************/
void ExtFlash_PageRD(char* pBuffer, unsigned ReadAddr, short Length)
{
 800ec44:	b580      	push	{r7, lr}
 800ec46:	b084      	sub	sp, #16
 800ec48:	af00      	add	r7, sp, #0
 800ec4a:	60f8      	str	r0, [r7, #12]
 800ec4c:	60b9      	str	r1, [r7, #8]
 800ec4e:	4613      	mov	r3, r2
 800ec50:	80fb      	strh	r3, [r7, #6]
  HAL_GPIO_WritePin(SS_GPIO_Port, SS_Pin, GPIO_PIN_SET); //ExtFlash_CS_HIGH();
 800ec52:	2201      	movs	r2, #1
 800ec54:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800ec58:	481d      	ldr	r0, [pc, #116]	; (800ecd0 <ExtFlash_PageRD+0x8c>)
 800ec5a:	f00a ffa7 	bl	8019bac <HAL_GPIO_WritePin>
  ExtFlash_WaitForWriteEnd();
 800ec5e:	f7ff ffbd 	bl	800ebdc <ExtFlash_WaitForWriteEnd>
  HAL_GPIO_WritePin(SS_GPIO_Port, SS_Pin, GPIO_PIN_RESET); //ExtFlash_CS_LOW();
 800ec62:	2200      	movs	r2, #0
 800ec64:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800ec68:	4819      	ldr	r0, [pc, #100]	; (800ecd0 <ExtFlash_PageRD+0x8c>)
 800ec6a:	f00a ff9f 	bl	8019bac <HAL_GPIO_WritePin>
  ExtFlash_SendByte(READ);
 800ec6e:	2003      	movs	r0, #3
 800ec70:	f7ff ff6c 	bl	800eb4c <ExtFlash_SendByte>
  ExtFlash_SendByte((ReadAddr & 0xFF0000) >> 16);
 800ec74:	68bb      	ldr	r3, [r7, #8]
 800ec76:	0c1b      	lsrs	r3, r3, #16
 800ec78:	b2db      	uxtb	r3, r3
 800ec7a:	4618      	mov	r0, r3
 800ec7c:	f7ff ff66 	bl	800eb4c <ExtFlash_SendByte>
  ExtFlash_SendByte((ReadAddr& 0xFF00) >> 8);
 800ec80:	68bb      	ldr	r3, [r7, #8]
 800ec82:	0a1b      	lsrs	r3, r3, #8
 800ec84:	b2db      	uxtb	r3, r3
 800ec86:	4618      	mov	r0, r3
 800ec88:	f7ff ff60 	bl	800eb4c <ExtFlash_SendByte>
  ExtFlash_SendByte(ReadAddr & 0xFF);
 800ec8c:	68bb      	ldr	r3, [r7, #8]
 800ec8e:	b2db      	uxtb	r3, r3
 800ec90:	4618      	mov	r0, r3
 800ec92:	f7ff ff5b 	bl	800eb4c <ExtFlash_SendByte>

  while(Length--)
 800ec96:	e009      	b.n	800ecac <ExtFlash_PageRD+0x68>
  { // while there is data to be read
    *pBuffer = (ExtFlash_SendByte(Dummy_Byte));
 800ec98:	20a5      	movs	r0, #165	; 0xa5
 800ec9a:	f7ff ff57 	bl	800eb4c <ExtFlash_SendByte>
 800ec9e:	4603      	mov	r3, r0
 800eca0:	461a      	mov	r2, r3
 800eca2:	68fb      	ldr	r3, [r7, #12]
 800eca4:	701a      	strb	r2, [r3, #0]
    pBuffer++;
 800eca6:	68fb      	ldr	r3, [r7, #12]
 800eca8:	3301      	adds	r3, #1
 800ecaa:	60fb      	str	r3, [r7, #12]
  while(Length--)
 800ecac:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800ecb0:	b29a      	uxth	r2, r3
 800ecb2:	3a01      	subs	r2, #1
 800ecb4:	b292      	uxth	r2, r2
 800ecb6:	80fa      	strh	r2, [r7, #6]
 800ecb8:	2b00      	cmp	r3, #0
 800ecba:	d1ed      	bne.n	800ec98 <ExtFlash_PageRD+0x54>
  }
  HAL_GPIO_WritePin(SS_GPIO_Port, SS_Pin, GPIO_PIN_SET);
 800ecbc:	2201      	movs	r2, #1
 800ecbe:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800ecc2:	4803      	ldr	r0, [pc, #12]	; (800ecd0 <ExtFlash_PageRD+0x8c>)
 800ecc4:	f00a ff72 	bl	8019bac <HAL_GPIO_WritePin>
}
 800ecc8:	bf00      	nop
 800ecca:	3710      	adds	r7, #16
 800eccc:	46bd      	mov	sp, r7
 800ecce:	bd80      	pop	{r7, pc}
 800ecd0:	40020400 	.word	0x40020400

0800ecd4 <ExtFlash_WriteEnable>:

/*******************************************************************************
 SPI_FLASH_WriteEnable
*******************************************************************************/
void ExtFlash_WriteEnable(void)
{
 800ecd4:	b580      	push	{r7, lr}
 800ecd6:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(SS_GPIO_Port, SS_Pin, GPIO_PIN_RESET); //ExtFlash_CS_LOW();
 800ecd8:	2200      	movs	r2, #0
 800ecda:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800ecde:	4807      	ldr	r0, [pc, #28]	; (800ecfc <ExtFlash_WriteEnable+0x28>)
 800ece0:	f00a ff64 	bl	8019bac <HAL_GPIO_WritePin>
  ExtFlash_SendByte(WREN);
 800ece4:	2006      	movs	r0, #6
 800ece6:	f7ff ff31 	bl	800eb4c <ExtFlash_SendByte>
  HAL_GPIO_WritePin(SS_GPIO_Port, SS_Pin, GPIO_PIN_SET); //ExtFlash_CS_HIGH();
 800ecea:	2201      	movs	r2, #1
 800ecec:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800ecf0:	4802      	ldr	r0, [pc, #8]	; (800ecfc <ExtFlash_WriteEnable+0x28>)
 800ecf2:	f00a ff5b 	bl	8019bac <HAL_GPIO_WritePin>
}
 800ecf6:	bf00      	nop
 800ecf8:	bd80      	pop	{r7, pc}
 800ecfa:	bf00      	nop
 800ecfc:	40020400 	.word	0x40020400

0800ed00 <ExtFlash_PageProg>:

/*******************************************************************************
 дFLASHҳ(256 Bytes)�� Mode=0: ��0��1���ݸ�д   Mode=1: ������д
*******************************************************************************/
void ExtFlash_PageProg(char* pBuffer, unsigned WriteAddr)
{
 800ed00:	b580      	push	{r7, lr}
 800ed02:	b084      	sub	sp, #16
 800ed04:	af00      	add	r7, sp, #0
 800ed06:	6078      	str	r0, [r7, #4]
 800ed08:	6039      	str	r1, [r7, #0]
  short   Lenght = 256;
 800ed0a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800ed0e:	81fb      	strh	r3, [r7, #14]

  HAL_GPIO_WritePin(SS_GPIO_Port, SS_Pin, GPIO_PIN_SET); //ExtFlash_CS_HIGH();
 800ed10:	2201      	movs	r2, #1
 800ed12:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800ed16:	481f      	ldr	r0, [pc, #124]	; (800ed94 <ExtFlash_PageProg+0x94>)
 800ed18:	f00a ff48 	bl	8019bac <HAL_GPIO_WritePin>
  ExtFlash_WaitForWriteEnd();
 800ed1c:	f7ff ff5e 	bl	800ebdc <ExtFlash_WaitForWriteEnd>
  ExtFlash_WriteEnable();
 800ed20:	f7ff ffd8 	bl	800ecd4 <ExtFlash_WriteEnable>
  HAL_GPIO_WritePin(SS_GPIO_Port, SS_Pin, GPIO_PIN_RESET); //ExtFlash_CS_LOW();
 800ed24:	2200      	movs	r2, #0
 800ed26:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800ed2a:	481a      	ldr	r0, [pc, #104]	; (800ed94 <ExtFlash_PageProg+0x94>)
 800ed2c:	f00a ff3e 	bl	8019bac <HAL_GPIO_WritePin>
  ExtFlash_SendByte(PP);
 800ed30:	2002      	movs	r0, #2
 800ed32:	f7ff ff0b 	bl	800eb4c <ExtFlash_SendByte>
  ExtFlash_SendByte((WriteAddr & 0xFF0000) >> 16);
 800ed36:	683b      	ldr	r3, [r7, #0]
 800ed38:	0c1b      	lsrs	r3, r3, #16
 800ed3a:	b2db      	uxtb	r3, r3
 800ed3c:	4618      	mov	r0, r3
 800ed3e:	f7ff ff05 	bl	800eb4c <ExtFlash_SendByte>
  ExtFlash_SendByte((WriteAddr & 0xFF00) >> 8);
 800ed42:	683b      	ldr	r3, [r7, #0]
 800ed44:	0a1b      	lsrs	r3, r3, #8
 800ed46:	b2db      	uxtb	r3, r3
 800ed48:	4618      	mov	r0, r3
 800ed4a:	f7ff feff 	bl	800eb4c <ExtFlash_SendByte>
  ExtFlash_SendByte(WriteAddr & 0xFF);
 800ed4e:	683b      	ldr	r3, [r7, #0]
 800ed50:	b2db      	uxtb	r3, r3
 800ed52:	4618      	mov	r0, r3
 800ed54:	f7ff fefa 	bl	800eb4c <ExtFlash_SendByte>
  while(Lenght--) {
 800ed58:	e007      	b.n	800ed6a <ExtFlash_PageProg+0x6a>
    ExtFlash_SendByte((*pBuffer));
 800ed5a:	687b      	ldr	r3, [r7, #4]
 800ed5c:	781b      	ldrb	r3, [r3, #0]
 800ed5e:	4618      	mov	r0, r3
 800ed60:	f7ff fef4 	bl	800eb4c <ExtFlash_SendByte>
    pBuffer++;
 800ed64:	687b      	ldr	r3, [r7, #4]
 800ed66:	3301      	adds	r3, #1
 800ed68:	607b      	str	r3, [r7, #4]
  while(Lenght--) {
 800ed6a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800ed6e:	b29a      	uxth	r2, r3
 800ed70:	3a01      	subs	r2, #1
 800ed72:	b292      	uxth	r2, r2
 800ed74:	81fa      	strh	r2, [r7, #14]
 800ed76:	2b00      	cmp	r3, #0
 800ed78:	d1ef      	bne.n	800ed5a <ExtFlash_PageProg+0x5a>
  }
  HAL_GPIO_WritePin(SS_GPIO_Port, SS_Pin, GPIO_PIN_SET); //ExtFlash_CS_HIGH();
 800ed7a:	2201      	movs	r2, #1
 800ed7c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800ed80:	4804      	ldr	r0, [pc, #16]	; (800ed94 <ExtFlash_PageProg+0x94>)
 800ed82:	f00a ff13 	bl	8019bac <HAL_GPIO_WritePin>
  ExtFlash_WaitForWriteEnd();
 800ed86:	f7ff ff29 	bl	800ebdc <ExtFlash_WaitForWriteEnd>
}
 800ed8a:	bf00      	nop
 800ed8c:	3710      	adds	r7, #16
 800ed8e:	46bd      	mov	sp, r7
 800ed90:	bd80      	pop	{r7, pc}
 800ed92:	bf00      	nop
 800ed94:	40020400 	.word	0x40020400

0800ed98 <ExtFLASH_SectorErase>:

/*******************************************************************************
 SPI_FLASH_SectorErase  : Sector Erases the specified FLASH Page.(4k/sector)
*******************************************************************************/
void ExtFLASH_SectorErase(unsigned SectorAddr)
{
 800ed98:	b580      	push	{r7, lr}
 800ed9a:	b082      	sub	sp, #8
 800ed9c:	af00      	add	r7, sp, #0
 800ed9e:	6078      	str	r0, [r7, #4]
    ExtFlash_WriteEnable();
 800eda0:	f7ff ff98 	bl	800ecd4 <ExtFlash_WriteEnable>
    HAL_GPIO_WritePin(SS_GPIO_Port, SS_Pin, GPIO_PIN_RESET); //ExtFlash_CS_LOW();
 800eda4:	2200      	movs	r2, #0
 800eda6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800edaa:	4811      	ldr	r0, [pc, #68]	; (800edf0 <ExtFLASH_SectorErase+0x58>)
 800edac:	f00a fefe 	bl	8019bac <HAL_GPIO_WritePin>
    ExtFlash_SendByte(SE);
 800edb0:	2020      	movs	r0, #32
 800edb2:	f7ff fecb 	bl	800eb4c <ExtFlash_SendByte>
    ExtFlash_SendByte((SectorAddr & 0xFF0000) >> 16);   //Send high address byte
 800edb6:	687b      	ldr	r3, [r7, #4]
 800edb8:	0c1b      	lsrs	r3, r3, #16
 800edba:	b2db      	uxtb	r3, r3
 800edbc:	4618      	mov	r0, r3
 800edbe:	f7ff fec5 	bl	800eb4c <ExtFlash_SendByte>
    ExtFlash_SendByte((SectorAddr & 0xFF00) >> 8);      //Send medium address byte
 800edc2:	687b      	ldr	r3, [r7, #4]
 800edc4:	0a1b      	lsrs	r3, r3, #8
 800edc6:	b2db      	uxtb	r3, r3
 800edc8:	4618      	mov	r0, r3
 800edca:	f7ff febf 	bl	800eb4c <ExtFlash_SendByte>
    ExtFlash_SendByte(SectorAddr & 0xFF);               //Send low address byte */
 800edce:	687b      	ldr	r3, [r7, #4]
 800edd0:	b2db      	uxtb	r3, r3
 800edd2:	4618      	mov	r0, r3
 800edd4:	f7ff feba 	bl	800eb4c <ExtFlash_SendByte>
    HAL_GPIO_WritePin(SS_GPIO_Port, SS_Pin, GPIO_PIN_SET); //ExtFlash_CS_HIGH();
 800edd8:	2201      	movs	r2, #1
 800edda:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800edde:	4804      	ldr	r0, [pc, #16]	; (800edf0 <ExtFLASH_SectorErase+0x58>)
 800ede0:	f00a fee4 	bl	8019bac <HAL_GPIO_WritePin>
    ExtFlash_WaitForWriteEnd();                         // Wait the end of Flash writing
 800ede4:	f7ff fefa 	bl	800ebdc <ExtFlash_WaitForWriteEnd>
}
 800ede8:	bf00      	nop
 800edea:	3708      	adds	r7, #8
 800edec:	46bd      	mov	sp, r7
 800edee:	bd80      	pop	{r7, pc}
 800edf0:	40020400 	.word	0x40020400

0800edf4 <ExtFlash_PageWR>:

void ExtFlash_PageWR(char* pBuffer, unsigned WriteAddr)
{
 800edf4:	b580      	push	{r7, lr}
 800edf6:	b0c8      	sub	sp, #288	; 0x120
 800edf8:	af00      	add	r7, sp, #0
 800edfa:	1d3b      	adds	r3, r7, #4
 800edfc:	6018      	str	r0, [r3, #0]
 800edfe:	463b      	mov	r3, r7
 800ee00:	6019      	str	r1, [r3, #0]
  unsigned addr,i,j;
  char* ptr;
  char  page=0,flag=0;
 800ee02:	2300      	movs	r3, #0
 800ee04:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 800ee08:	2300      	movs	r3, #0
 800ee0a:	f887 310e 	strb.w	r3, [r7, #270]	; 0x10e
  char  buffer[256];

  flag=0;
 800ee0e:	2300      	movs	r3, #0
 800ee10:	f887 310e 	strb.w	r3, [r7, #270]	; 0x10e
    addr=WriteAddr & 0xFFF000;
 800ee14:	463b      	mov	r3, r7
 800ee16:	681a      	ldr	r2, [r3, #0]
 800ee18:	4b3b      	ldr	r3, [pc, #236]	; (800ef08 <ExtFlash_PageWR+0x114>)
 800ee1a:	4013      	ands	r3, r2
 800ee1c:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
    page=16;
 800ee20:	2310      	movs	r3, #16
 800ee22:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
  while(page>0)
 800ee26:	e02e      	b.n	800ee86 <ExtFlash_PageWR+0x92>
  {
    ExtFlash_PageRD((char*)&buffer,addr, 256);
 800ee28:	f107 030c 	add.w	r3, r7, #12
 800ee2c:	f44f 7280 	mov.w	r2, #256	; 0x100
 800ee30:	f8d7 111c 	ldr.w	r1, [r7, #284]	; 0x11c
 800ee34:	4618      	mov	r0, r3
 800ee36:	f7ff ff05 	bl	800ec44 <ExtFlash_PageRD>
    for(j=0;j<255;j++){
 800ee3a:	2300      	movs	r3, #0
 800ee3c:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 800ee40:	e012      	b.n	800ee68 <ExtFlash_PageWR+0x74>
      if(buffer[j++]!=0xff){
 800ee42:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ee46:	1c5a      	adds	r2, r3, #1
 800ee48:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
 800ee4c:	f107 020c 	add.w	r2, r7, #12
 800ee50:	5cd3      	ldrb	r3, [r2, r3]
 800ee52:	2bff      	cmp	r3, #255	; 0xff
 800ee54:	d003      	beq.n	800ee5e <ExtFlash_PageWR+0x6a>
        flag=1;
 800ee56:	2301      	movs	r3, #1
 800ee58:	f887 310e 	strb.w	r3, [r7, #270]	; 0x10e
        break;
 800ee5c:	e008      	b.n	800ee70 <ExtFlash_PageWR+0x7c>
    for(j=0;j<255;j++){
 800ee5e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ee62:	3301      	adds	r3, #1
 800ee64:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 800ee68:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ee6c:	2bfe      	cmp	r3, #254	; 0xfe
 800ee6e:	d9e8      	bls.n	800ee42 <ExtFlash_PageWR+0x4e>
      }
    }
    addr+=256;
 800ee70:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800ee74:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800ee78:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
    page--;
 800ee7c:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 800ee80:	3b01      	subs	r3, #1
 800ee82:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
  while(page>0)
 800ee86:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 800ee8a:	2b00      	cmp	r3, #0
 800ee8c:	d1cc      	bne.n	800ee28 <ExtFlash_PageWR+0x34>
  }
    page=16;
 800ee8e:	2310      	movs	r3, #16
 800ee90:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
    addr=WriteAddr & 0xFFF000;
 800ee94:	463b      	mov	r3, r7
 800ee96:	681a      	ldr	r2, [r3, #0]
 800ee98:	4b1b      	ldr	r3, [pc, #108]	; (800ef08 <ExtFlash_PageWR+0x114>)
 800ee9a:	4013      	ands	r3, r2
 800ee9c:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
    if(flag==1)ExtFLASH_SectorErase(addr);
 800eea0:	f897 310e 	ldrb.w	r3, [r7, #270]	; 0x10e
 800eea4:	2b01      	cmp	r3, #1
 800eea6:	d103      	bne.n	800eeb0 <ExtFlash_PageWR+0xbc>
 800eea8:	f8d7 011c 	ldr.w	r0, [r7, #284]	; 0x11c
 800eeac:	f7ff ff74 	bl	800ed98 <ExtFLASH_SectorErase>
  ptr=pBuffer;
 800eeb0:	1d3b      	adds	r3, r7, #4
 800eeb2:	681b      	ldr	r3, [r3, #0]
 800eeb4:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  for(i=0;i<page;i++){
 800eeb8:	2300      	movs	r3, #0
 800eeba:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 800eebe:	e016      	b.n	800eeee <ExtFlash_PageWR+0xfa>
    ExtFlash_PageProg(ptr, addr);
 800eec0:	f8d7 111c 	ldr.w	r1, [r7, #284]	; 0x11c
 800eec4:	f8d7 0110 	ldr.w	r0, [r7, #272]	; 0x110
 800eec8:	f7ff ff1a 	bl	800ed00 <ExtFlash_PageProg>
    addr+=256;
 800eecc:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800eed0:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800eed4:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
    ptr+=256;
 800eed8:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800eedc:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800eee0:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  for(i=0;i<page;i++){
 800eee4:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800eee8:	3301      	adds	r3, #1
 800eeea:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 800eeee:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 800eef2:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 800eef6:	429a      	cmp	r2, r3
 800eef8:	d3e2      	bcc.n	800eec0 <ExtFlash_PageWR+0xcc>
  }
}
 800eefa:	bf00      	nop
 800eefc:	bf00      	nop
 800eefe:	f507 7790 	add.w	r7, r7, #288	; 0x120
 800ef02:	46bd      	mov	sp, r7
 800ef04:	bd80      	pop	{r7, pc}
 800ef06:	bf00      	nop
 800ef08:	00fff000 	.word	0x00fff000

0800ef0c <ReadDiskData>:
 800ef0c:	b580      	push	{r7, lr}
 800ef0e:	b086      	sub	sp, #24
 800ef10:	af00      	add	r7, sp, #0
 800ef12:	60f8      	str	r0, [r7, #12]
 800ef14:	60b9      	str	r1, [r7, #8]
 800ef16:	4613      	mov	r3, r2
 800ef18:	80fb      	strh	r3, [r7, #6]
 800ef1a:	2300      	movs	r3, #0
 800ef1c:	75fb      	strb	r3, [r7, #23]
 800ef1e:	4b0d      	ldr	r3, [pc, #52]	; (800ef54 <ReadDiskData+0x48>)
 800ef20:	2200      	movs	r2, #0
 800ef22:	701a      	strb	r2, [r3, #0]
 800ef24:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800ef28:	461a      	mov	r2, r3
 800ef2a:	68b9      	ldr	r1, [r7, #8]
 800ef2c:	68f8      	ldr	r0, [r7, #12]
 800ef2e:	f7ff fe89 	bl	800ec44 <ExtFlash_PageRD>
 800ef32:	7dfb      	ldrb	r3, [r7, #23]
 800ef34:	1c5a      	adds	r2, r3, #1
 800ef36:	75fa      	strb	r2, [r7, #23]
 800ef38:	2b06      	cmp	r3, #6
 800ef3a:	d901      	bls.n	800ef40 <ReadDiskData+0x34>
 800ef3c:	2301      	movs	r3, #1
 800ef3e:	e004      	b.n	800ef4a <ReadDiskData+0x3e>
 800ef40:	4b04      	ldr	r3, [pc, #16]	; (800ef54 <ReadDiskData+0x48>)
 800ef42:	781b      	ldrb	r3, [r3, #0]
 800ef44:	2b00      	cmp	r3, #0
 800ef46:	d1ea      	bne.n	800ef1e <ReadDiskData+0x12>
 800ef48:	2300      	movs	r3, #0
 800ef4a:	4618      	mov	r0, r3
 800ef4c:	3718      	adds	r7, #24
 800ef4e:	46bd      	mov	sp, r7
 800ef50:	bd80      	pop	{r7, pc}
 800ef52:	bf00      	nop
 800ef54:	2000078d 	.word	0x2000078d

0800ef58 <OpenFileRd>:
 800ef58:	b580      	push	{r7, lr}
 800ef5a:	b086      	sub	sp, #24
 800ef5c:	af00      	add	r7, sp, #0
 800ef5e:	60f8      	str	r0, [r7, #12]
 800ef60:	60b9      	str	r1, [r7, #8]
 800ef62:	607a      	str	r2, [r7, #4]
 800ef64:	603b      	str	r3, [r7, #0]
 800ef66:	687b      	ldr	r3, [r7, #4]
 800ef68:	2200      	movs	r2, #0
 800ef6a:	801a      	strh	r2, [r3, #0]
 800ef6c:	4b35      	ldr	r3, [pc, #212]	; (800f044 <OpenFileRd+0xec>)
 800ef6e:	689a      	ldr	r2, [r3, #8]
 800ef70:	683b      	ldr	r3, [r7, #0]
 800ef72:	601a      	str	r2, [r3, #0]
 800ef74:	e05b      	b.n	800f02e <OpenFileRd+0xd6>
 800ef76:	683b      	ldr	r3, [r7, #0]
 800ef78:	681b      	ldr	r3, [r3, #0]
 800ef7a:	4a32      	ldr	r2, [pc, #200]	; (800f044 <OpenFileRd+0xec>)
 800ef7c:	6952      	ldr	r2, [r2, #20]
 800ef7e:	b212      	sxth	r2, r2
 800ef80:	4619      	mov	r1, r3
 800ef82:	68f8      	ldr	r0, [r7, #12]
 800ef84:	f7ff ffc2 	bl	800ef0c <ReadDiskData>
 800ef88:	4603      	mov	r3, r0
 800ef8a:	2b00      	cmp	r3, #0
 800ef8c:	d001      	beq.n	800ef92 <OpenFileRd+0x3a>
 800ef8e:	2301      	movs	r3, #1
 800ef90:	e054      	b.n	800f03c <OpenFileRd+0xe4>
 800ef92:	2300      	movs	r3, #0
 800ef94:	82bb      	strh	r3, [r7, #20]
 800ef96:	e044      	b.n	800f022 <OpenFileRd+0xca>
 800ef98:	2300      	movs	r3, #0
 800ef9a:	82fb      	strh	r3, [r7, #22]
 800ef9c:	e031      	b.n	800f002 <OpenFileRd+0xaa>
 800ef9e:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 800efa2:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800efa6:	4413      	add	r3, r2
 800efa8:	461a      	mov	r2, r3
 800efaa:	68fb      	ldr	r3, [r7, #12]
 800efac:	4413      	add	r3, r2
 800efae:	781b      	ldrb	r3, [r3, #0]
 800efb0:	2b00      	cmp	r3, #0
 800efb2:	d01e      	beq.n	800eff2 <OpenFileRd+0x9a>
 800efb4:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 800efb8:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800efbc:	4413      	add	r3, r2
 800efbe:	461a      	mov	r2, r3
 800efc0:	68fb      	ldr	r3, [r7, #12]
 800efc2:	4413      	add	r3, r2
 800efc4:	781a      	ldrb	r2, [r3, #0]
 800efc6:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800efca:	68b9      	ldr	r1, [r7, #8]
 800efcc:	440b      	add	r3, r1
 800efce:	781b      	ldrb	r3, [r3, #0]
 800efd0:	429a      	cmp	r2, r3
 800efd2:	d11b      	bne.n	800f00c <OpenFileRd+0xb4>
 800efd4:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800efd8:	2b0a      	cmp	r3, #10
 800efda:	d10c      	bne.n	800eff6 <OpenFileRd+0x9e>
 800efdc:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800efe0:	331a      	adds	r3, #26
 800efe2:	68fa      	ldr	r2, [r7, #12]
 800efe4:	4413      	add	r3, r2
 800efe6:	f9b3 2000 	ldrsh.w	r2, [r3]
 800efea:	687b      	ldr	r3, [r7, #4]
 800efec:	801a      	strh	r2, [r3, #0]
 800efee:	2300      	movs	r3, #0
 800eff0:	e024      	b.n	800f03c <OpenFileRd+0xe4>
 800eff2:	2304      	movs	r3, #4
 800eff4:	e022      	b.n	800f03c <OpenFileRd+0xe4>
 800eff6:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800effa:	b29b      	uxth	r3, r3
 800effc:	3301      	adds	r3, #1
 800effe:	b29b      	uxth	r3, r3
 800f000:	82fb      	strh	r3, [r7, #22]
 800f002:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800f006:	2b0a      	cmp	r3, #10
 800f008:	ddc9      	ble.n	800ef9e <OpenFileRd+0x46>
 800f00a:	e000      	b.n	800f00e <OpenFileRd+0xb6>
 800f00c:	bf00      	nop
 800f00e:	683b      	ldr	r3, [r7, #0]
 800f010:	681b      	ldr	r3, [r3, #0]
 800f012:	f103 0220 	add.w	r2, r3, #32
 800f016:	683b      	ldr	r3, [r7, #0]
 800f018:	601a      	str	r2, [r3, #0]
 800f01a:	8abb      	ldrh	r3, [r7, #20]
 800f01c:	3320      	adds	r3, #32
 800f01e:	b29b      	uxth	r3, r3
 800f020:	82bb      	strh	r3, [r7, #20]
 800f022:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 800f026:	4b07      	ldr	r3, [pc, #28]	; (800f044 <OpenFileRd+0xec>)
 800f028:	695b      	ldr	r3, [r3, #20]
 800f02a:	429a      	cmp	r2, r3
 800f02c:	d3b4      	bcc.n	800ef98 <OpenFileRd+0x40>
 800f02e:	683b      	ldr	r3, [r7, #0]
 800f030:	681a      	ldr	r2, [r3, #0]
 800f032:	4b04      	ldr	r3, [pc, #16]	; (800f044 <OpenFileRd+0xec>)
 800f034:	68db      	ldr	r3, [r3, #12]
 800f036:	429a      	cmp	r2, r3
 800f038:	d39d      	bcc.n	800ef76 <OpenFileRd+0x1e>
 800f03a:	2303      	movs	r3, #3
 800f03c:	4618      	mov	r0, r3
 800f03e:	3718      	adds	r7, #24
 800f040:	46bd      	mov	sp, r7
 800f042:	bd80      	pop	{r7, pc}
 800f044:	20000194 	.word	0x20000194

0800f048 <ProgDiskPage>:
 800f048:	b580      	push	{r7, lr}
 800f04a:	b084      	sub	sp, #16
 800f04c:	af00      	add	r7, sp, #0
 800f04e:	6078      	str	r0, [r7, #4]
 800f050:	6039      	str	r1, [r7, #0]
 800f052:	2300      	movs	r3, #0
 800f054:	73fb      	strb	r3, [r7, #15]
 800f056:	4b0c      	ldr	r3, [pc, #48]	; (800f088 <ProgDiskPage+0x40>)
 800f058:	2200      	movs	r2, #0
 800f05a:	701a      	strb	r2, [r3, #0]
 800f05c:	683b      	ldr	r3, [r7, #0]
 800f05e:	4619      	mov	r1, r3
 800f060:	6878      	ldr	r0, [r7, #4]
 800f062:	f7ff fec7 	bl	800edf4 <ExtFlash_PageWR>
 800f066:	7bfb      	ldrb	r3, [r7, #15]
 800f068:	1c5a      	adds	r2, r3, #1
 800f06a:	73fa      	strb	r2, [r7, #15]
 800f06c:	2b06      	cmp	r3, #6
 800f06e:	d901      	bls.n	800f074 <ProgDiskPage+0x2c>
 800f070:	2301      	movs	r3, #1
 800f072:	e004      	b.n	800f07e <ProgDiskPage+0x36>
 800f074:	4b04      	ldr	r3, [pc, #16]	; (800f088 <ProgDiskPage+0x40>)
 800f076:	781b      	ldrb	r3, [r3, #0]
 800f078:	2b00      	cmp	r3, #0
 800f07a:	d1ec      	bne.n	800f056 <ProgDiskPage+0xe>
 800f07c:	2300      	movs	r3, #0
 800f07e:	4618      	mov	r0, r3
 800f080:	3710      	adds	r7, #16
 800f082:	46bd      	mov	sp, r7
 800f084:	bd80      	pop	{r7, pc}
 800f086:	bf00      	nop
 800f088:	2000078d 	.word	0x2000078d

0800f08c <SeekBlank>:
 800f08c:	b580      	push	{r7, lr}
 800f08e:	b084      	sub	sp, #16
 800f090:	af00      	add	r7, sp, #0
 800f092:	6078      	str	r0, [r7, #4]
 800f094:	6039      	str	r1, [r7, #0]
 800f096:	2301      	movs	r3, #1
 800f098:	73fb      	strb	r3, [r7, #15]
 800f09a:	683b      	ldr	r3, [r7, #0]
 800f09c:	3302      	adds	r3, #2
 800f09e:	683a      	ldr	r2, [r7, #0]
 800f0a0:	f9b2 2000 	ldrsh.w	r2, [r2]
 800f0a4:	801a      	strh	r2, [r3, #0]
 800f0a6:	683b      	ldr	r3, [r7, #0]
 800f0a8:	2200      	movs	r2, #0
 800f0aa:	801a      	strh	r2, [r3, #0]
 800f0ac:	e05b      	b.n	800f166 <SeekBlank+0xda>
 800f0ae:	4b34      	ldr	r3, [pc, #208]	; (800f180 <SeekBlank+0xf4>)
 800f0b0:	681b      	ldr	r3, [r3, #0]
 800f0b2:	683a      	ldr	r2, [r7, #0]
 800f0b4:	f9b2 2000 	ldrsh.w	r2, [r2]
 800f0b8:	441a      	add	r2, r3
 800f0ba:	683b      	ldr	r3, [r7, #0]
 800f0bc:	f9b3 3000 	ldrsh.w	r3, [r3]
 800f0c0:	0fd9      	lsrs	r1, r3, #31
 800f0c2:	440b      	add	r3, r1
 800f0c4:	105b      	asrs	r3, r3, #1
 800f0c6:	b21b      	sxth	r3, r3
 800f0c8:	18d1      	adds	r1, r2, r3
 800f0ca:	f107 0308 	add.w	r3, r7, #8
 800f0ce:	2202      	movs	r2, #2
 800f0d0:	4618      	mov	r0, r3
 800f0d2:	f7ff ff1b 	bl	800ef0c <ReadDiskData>
 800f0d6:	4603      	mov	r3, r0
 800f0d8:	2b00      	cmp	r3, #0
 800f0da:	d001      	beq.n	800f0e0 <SeekBlank+0x54>
 800f0dc:	2301      	movs	r3, #1
 800f0de:	e04a      	b.n	800f176 <SeekBlank+0xea>
 800f0e0:	683b      	ldr	r3, [r7, #0]
 800f0e2:	f9b3 3000 	ldrsh.w	r3, [r3]
 800f0e6:	b29b      	uxth	r3, r3
 800f0e8:	f003 0301 	and.w	r3, r3, #1
 800f0ec:	2b00      	cmp	r3, #0
 800f0ee:	d006      	beq.n	800f0fe <SeekBlank+0x72>
 800f0f0:	f107 0308 	add.w	r3, r7, #8
 800f0f4:	f9b3 3000 	ldrsh.w	r3, [r3]
 800f0f8:	111b      	asrs	r3, r3, #4
 800f0fa:	b21b      	sxth	r3, r3
 800f0fc:	e006      	b.n	800f10c <SeekBlank+0x80>
 800f0fe:	f107 0308 	add.w	r3, r7, #8
 800f102:	f9b3 3000 	ldrsh.w	r3, [r3]
 800f106:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800f10a:	b21b      	sxth	r3, r3
 800f10c:	81bb      	strh	r3, [r7, #12]
 800f10e:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800f112:	2b00      	cmp	r3, #0
 800f114:	d10f      	bne.n	800f136 <SeekBlank+0xaa>
 800f116:	7bfb      	ldrb	r3, [r7, #15]
 800f118:	2b00      	cmp	r3, #0
 800f11a:	d10c      	bne.n	800f136 <SeekBlank+0xaa>
 800f11c:	683b      	ldr	r3, [r7, #0]
 800f11e:	f9b3 2000 	ldrsh.w	r2, [r3]
 800f122:	683b      	ldr	r3, [r7, #0]
 800f124:	3302      	adds	r3, #2
 800f126:	f9b3 3000 	ldrsh.w	r3, [r3]
 800f12a:	429a      	cmp	r2, r3
 800f12c:	d003      	beq.n	800f136 <SeekBlank+0xaa>
 800f12e:	2301      	movs	r3, #1
 800f130:	73fb      	strb	r3, [r7, #15]
 800f132:	2300      	movs	r3, #0
 800f134:	e01f      	b.n	800f176 <SeekBlank+0xea>
 800f136:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800f13a:	2b00      	cmp	r3, #0
 800f13c:	d10a      	bne.n	800f154 <SeekBlank+0xc8>
 800f13e:	7bfb      	ldrb	r3, [r7, #15]
 800f140:	2b01      	cmp	r3, #1
 800f142:	d107      	bne.n	800f154 <SeekBlank+0xc8>
 800f144:	683b      	ldr	r3, [r7, #0]
 800f146:	3304      	adds	r3, #4
 800f148:	683a      	ldr	r2, [r7, #0]
 800f14a:	f9b2 2000 	ldrsh.w	r2, [r2]
 800f14e:	801a      	strh	r2, [r3, #0]
 800f150:	2300      	movs	r3, #0
 800f152:	73fb      	strb	r3, [r7, #15]
 800f154:	683b      	ldr	r3, [r7, #0]
 800f156:	f9b3 3000 	ldrsh.w	r3, [r3]
 800f15a:	b29b      	uxth	r3, r3
 800f15c:	3301      	adds	r3, #1
 800f15e:	b29b      	uxth	r3, r3
 800f160:	b21a      	sxth	r2, r3
 800f162:	683b      	ldr	r3, [r7, #0]
 800f164:	801a      	strh	r2, [r3, #0]
 800f166:	683b      	ldr	r3, [r7, #0]
 800f168:	f9b3 3000 	ldrsh.w	r3, [r3]
 800f16c:	f640 72fe 	movw	r2, #4094	; 0xffe
 800f170:	4293      	cmp	r3, r2
 800f172:	dd9c      	ble.n	800f0ae <SeekBlank+0x22>
 800f174:	2300      	movs	r3, #0
 800f176:	4618      	mov	r0, r3
 800f178:	3710      	adds	r7, #16
 800f17a:	46bd      	mov	sp, r7
 800f17c:	bd80      	pop	{r7, pc}
 800f17e:	bf00      	nop
 800f180:	20000194 	.word	0x20000194

0800f184 <SetCluster>:
 800f184:	b580      	push	{r7, lr}
 800f186:	b086      	sub	sp, #24
 800f188:	af00      	add	r7, sp, #0
 800f18a:	6078      	str	r0, [r7, #4]
 800f18c:	6039      	str	r1, [r7, #0]
 800f18e:	683b      	ldr	r3, [r7, #0]
 800f190:	885b      	ldrh	r3, [r3, #2]
 800f192:	82fb      	strh	r3, [r7, #22]
 800f194:	683b      	ldr	r3, [r7, #0]
 800f196:	881b      	ldrh	r3, [r3, #0]
 800f198:	82bb      	strh	r3, [r7, #20]
 800f19a:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800f19e:	0fda      	lsrs	r2, r3, #31
 800f1a0:	4413      	add	r3, r2
 800f1a2:	105b      	asrs	r3, r3, #1
 800f1a4:	b21b      	sxth	r3, r3
 800f1a6:	b29a      	uxth	r2, r3
 800f1a8:	8afb      	ldrh	r3, [r7, #22]
 800f1aa:	4413      	add	r3, r2
 800f1ac:	b29b      	uxth	r3, r3
 800f1ae:	827b      	strh	r3, [r7, #18]
 800f1b0:	4b36      	ldr	r3, [pc, #216]	; (800f28c <SetCluster+0x108>)
 800f1b2:	681a      	ldr	r2, [r3, #0]
 800f1b4:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800f1b8:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 800f1bc:	4413      	add	r3, r2
 800f1be:	60fb      	str	r3, [r7, #12]
 800f1c0:	8a7b      	ldrh	r3, [r7, #18]
 800f1c2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800f1c6:	827b      	strh	r3, [r7, #18]
 800f1c8:	68fb      	ldr	r3, [r7, #12]
 800f1ca:	4a30      	ldr	r2, [pc, #192]	; (800f28c <SetCluster+0x108>)
 800f1cc:	6952      	ldr	r2, [r2, #20]
 800f1ce:	b212      	sxth	r2, r2
 800f1d0:	4619      	mov	r1, r3
 800f1d2:	6878      	ldr	r0, [r7, #4]
 800f1d4:	f7ff fe9a 	bl	800ef0c <ReadDiskData>
 800f1d8:	4603      	mov	r3, r0
 800f1da:	2b00      	cmp	r3, #0
 800f1dc:	d001      	beq.n	800f1e2 <SetCluster+0x5e>
 800f1de:	2301      	movs	r3, #1
 800f1e0:	e04f      	b.n	800f282 <SetCluster+0xfe>
 800f1e2:	8afb      	ldrh	r3, [r7, #22]
 800f1e4:	f003 0301 	and.w	r3, r3, #1
 800f1e8:	2b00      	cmp	r3, #0
 800f1ea:	d01e      	beq.n	800f22a <SetCluster+0xa6>
 800f1ec:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800f1f0:	687a      	ldr	r2, [r7, #4]
 800f1f2:	4413      	add	r3, r2
 800f1f4:	781b      	ldrb	r3, [r3, #0]
 800f1f6:	f003 030f 	and.w	r3, r3, #15
 800f1fa:	b2d9      	uxtb	r1, r3
 800f1fc:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800f200:	011b      	lsls	r3, r3, #4
 800f202:	b2da      	uxtb	r2, r3
 800f204:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800f208:	6878      	ldr	r0, [r7, #4]
 800f20a:	4403      	add	r3, r0
 800f20c:	440a      	add	r2, r1
 800f20e:	b2d2      	uxtb	r2, r2
 800f210:	701a      	strb	r2, [r3, #0]
 800f212:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800f216:	111b      	asrs	r3, r3, #4
 800f218:	b219      	sxth	r1, r3
 800f21a:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800f21e:	3301      	adds	r3, #1
 800f220:	687a      	ldr	r2, [r7, #4]
 800f222:	4413      	add	r3, r2
 800f224:	b2ca      	uxtb	r2, r1
 800f226:	701a      	strb	r2, [r3, #0]
 800f228:	e021      	b.n	800f26e <SetCluster+0xea>
 800f22a:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800f22e:	687a      	ldr	r2, [r7, #4]
 800f230:	4413      	add	r3, r2
 800f232:	8aba      	ldrh	r2, [r7, #20]
 800f234:	b2d2      	uxtb	r2, r2
 800f236:	701a      	strb	r2, [r3, #0]
 800f238:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800f23c:	3301      	adds	r3, #1
 800f23e:	687a      	ldr	r2, [r7, #4]
 800f240:	4413      	add	r3, r2
 800f242:	781b      	ldrb	r3, [r3, #0]
 800f244:	b25b      	sxtb	r3, r3
 800f246:	f023 030f 	bic.w	r3, r3, #15
 800f24a:	b25a      	sxtb	r2, r3
 800f24c:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800f250:	121b      	asrs	r3, r3, #8
 800f252:	b21b      	sxth	r3, r3
 800f254:	b25b      	sxtb	r3, r3
 800f256:	f003 030f 	and.w	r3, r3, #15
 800f25a:	b25b      	sxtb	r3, r3
 800f25c:	4313      	orrs	r3, r2
 800f25e:	b259      	sxtb	r1, r3
 800f260:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800f264:	3301      	adds	r3, #1
 800f266:	687a      	ldr	r2, [r7, #4]
 800f268:	4413      	add	r3, r2
 800f26a:	b2ca      	uxtb	r2, r1
 800f26c:	701a      	strb	r2, [r3, #0]
 800f26e:	68f9      	ldr	r1, [r7, #12]
 800f270:	6878      	ldr	r0, [r7, #4]
 800f272:	f7ff fee9 	bl	800f048 <ProgDiskPage>
 800f276:	4603      	mov	r3, r0
 800f278:	2b00      	cmp	r3, #0
 800f27a:	d001      	beq.n	800f280 <SetCluster+0xfc>
 800f27c:	2301      	movs	r3, #1
 800f27e:	e000      	b.n	800f282 <SetCluster+0xfe>
 800f280:	2300      	movs	r3, #0
 800f282:	4618      	mov	r0, r3
 800f284:	3718      	adds	r7, #24
 800f286:	46bd      	mov	sp, r7
 800f288:	bd80      	pop	{r7, pc}
 800f28a:	bf00      	nop
 800f28c:	20000194 	.word	0x20000194

0800f290 <NextCluster>:
 800f290:	b580      	push	{r7, lr}
 800f292:	b084      	sub	sp, #16
 800f294:	af00      	add	r7, sp, #0
 800f296:	6078      	str	r0, [r7, #4]
 800f298:	4b27      	ldr	r3, [pc, #156]	; (800f338 <NextCluster+0xa8>)
 800f29a:	681a      	ldr	r2, [r3, #0]
 800f29c:	687b      	ldr	r3, [r7, #4]
 800f29e:	f9b3 3000 	ldrsh.w	r3, [r3]
 800f2a2:	4618      	mov	r0, r3
 800f2a4:	687b      	ldr	r3, [r7, #4]
 800f2a6:	f9b3 3000 	ldrsh.w	r3, [r3]
 800f2aa:	0fd9      	lsrs	r1, r3, #31
 800f2ac:	440b      	add	r3, r1
 800f2ae:	105b      	asrs	r3, r3, #1
 800f2b0:	b21b      	sxth	r3, r3
 800f2b2:	4403      	add	r3, r0
 800f2b4:	4413      	add	r3, r2
 800f2b6:	60fb      	str	r3, [r7, #12]
 800f2b8:	687b      	ldr	r3, [r7, #4]
 800f2ba:	3302      	adds	r3, #2
 800f2bc:	687a      	ldr	r2, [r7, #4]
 800f2be:	f9b2 2000 	ldrsh.w	r2, [r2]
 800f2c2:	801a      	strh	r2, [r3, #0]
 800f2c4:	687b      	ldr	r3, [r7, #4]
 800f2c6:	2200      	movs	r2, #0
 800f2c8:	801a      	strh	r2, [r3, #0]
 800f2ca:	687b      	ldr	r3, [r7, #4]
 800f2cc:	3302      	adds	r3, #2
 800f2ce:	f9b3 3000 	ldrsh.w	r3, [r3]
 800f2d2:	461a      	mov	r2, r3
 800f2d4:	4b18      	ldr	r3, [pc, #96]	; (800f338 <NextCluster+0xa8>)
 800f2d6:	699b      	ldr	r3, [r3, #24]
 800f2d8:	429a      	cmp	r2, r3
 800f2da:	d205      	bcs.n	800f2e8 <NextCluster+0x58>
 800f2dc:	687b      	ldr	r3, [r7, #4]
 800f2de:	3302      	adds	r3, #2
 800f2e0:	f9b3 3000 	ldrsh.w	r3, [r3]
 800f2e4:	2b01      	cmp	r3, #1
 800f2e6:	dc01      	bgt.n	800f2ec <NextCluster+0x5c>
 800f2e8:	2301      	movs	r3, #1
 800f2ea:	e021      	b.n	800f330 <NextCluster+0xa0>
 800f2ec:	68f9      	ldr	r1, [r7, #12]
 800f2ee:	f107 030a 	add.w	r3, r7, #10
 800f2f2:	2202      	movs	r2, #2
 800f2f4:	4618      	mov	r0, r3
 800f2f6:	f7ff fe09 	bl	800ef0c <ReadDiskData>
 800f2fa:	4603      	mov	r3, r0
 800f2fc:	2b00      	cmp	r3, #0
 800f2fe:	d001      	beq.n	800f304 <NextCluster+0x74>
 800f300:	2301      	movs	r3, #1
 800f302:	e015      	b.n	800f330 <NextCluster+0xa0>
 800f304:	687b      	ldr	r3, [r7, #4]
 800f306:	3302      	adds	r3, #2
 800f308:	f9b3 3000 	ldrsh.w	r3, [r3]
 800f30c:	b29b      	uxth	r3, r3
 800f30e:	f003 0301 	and.w	r3, r3, #1
 800f312:	2b00      	cmp	r3, #0
 800f314:	d004      	beq.n	800f320 <NextCluster+0x90>
 800f316:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800f31a:	111b      	asrs	r3, r3, #4
 800f31c:	b21b      	sxth	r3, r3
 800f31e:	e004      	b.n	800f32a <NextCluster+0x9a>
 800f320:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800f324:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800f328:	b21b      	sxth	r3, r3
 800f32a:	687a      	ldr	r2, [r7, #4]
 800f32c:	8013      	strh	r3, [r2, #0]
 800f32e:	2300      	movs	r3, #0
 800f330:	4618      	mov	r0, r3
 800f332:	3710      	adds	r7, #16
 800f334:	46bd      	mov	sp, r7
 800f336:	bd80      	pop	{r7, pc}
 800f338:	20000194 	.word	0x20000194

0800f33c <ProgFileSec>:
 800f33c:	b580      	push	{r7, lr}
 800f33e:	b084      	sub	sp, #16
 800f340:	af00      	add	r7, sp, #0
 800f342:	6078      	str	r0, [r7, #4]
 800f344:	6039      	str	r1, [r7, #0]
 800f346:	4b1f      	ldr	r3, [pc, #124]	; (800f3c4 <ProgFileSec+0x88>)
 800f348:	68da      	ldr	r2, [r3, #12]
 800f34a:	4b1e      	ldr	r3, [pc, #120]	; (800f3c4 <ProgFileSec+0x88>)
 800f34c:	695b      	ldr	r3, [r3, #20]
 800f34e:	6839      	ldr	r1, [r7, #0]
 800f350:	f9b1 1000 	ldrsh.w	r1, [r1]
 800f354:	3902      	subs	r1, #2
 800f356:	fb01 f303 	mul.w	r3, r1, r3
 800f35a:	4413      	add	r3, r2
 800f35c:	60fb      	str	r3, [r7, #12]
 800f35e:	68f9      	ldr	r1, [r7, #12]
 800f360:	6878      	ldr	r0, [r7, #4]
 800f362:	f7ff fe71 	bl	800f048 <ProgDiskPage>
 800f366:	4603      	mov	r3, r0
 800f368:	2b00      	cmp	r3, #0
 800f36a:	d001      	beq.n	800f370 <ProgFileSec+0x34>
 800f36c:	2301      	movs	r3, #1
 800f36e:	e025      	b.n	800f3bc <ProgFileSec+0x80>
 800f370:	6838      	ldr	r0, [r7, #0]
 800f372:	f7ff ff8d 	bl	800f290 <NextCluster>
 800f376:	4603      	mov	r3, r0
 800f378:	2b00      	cmp	r3, #0
 800f37a:	d001      	beq.n	800f380 <ProgFileSec+0x44>
 800f37c:	2302      	movs	r3, #2
 800f37e:	e01d      	b.n	800f3bc <ProgFileSec+0x80>
 800f380:	683b      	ldr	r3, [r7, #0]
 800f382:	885b      	ldrh	r3, [r3, #2]
 800f384:	817b      	strh	r3, [r7, #10]
 800f386:	683b      	ldr	r3, [r7, #0]
 800f388:	f9b3 3000 	ldrsh.w	r3, [r3]
 800f38c:	2b00      	cmp	r3, #0
 800f38e:	d114      	bne.n	800f3ba <ProgFileSec+0x7e>
 800f390:	683b      	ldr	r3, [r7, #0]
 800f392:	897a      	ldrh	r2, [r7, #10]
 800f394:	801a      	strh	r2, [r3, #0]
 800f396:	6839      	ldr	r1, [r7, #0]
 800f398:	6878      	ldr	r0, [r7, #4]
 800f39a:	f7ff fe77 	bl	800f08c <SeekBlank>
 800f39e:	4603      	mov	r3, r0
 800f3a0:	2b00      	cmp	r3, #0
 800f3a2:	d001      	beq.n	800f3a8 <ProgFileSec+0x6c>
 800f3a4:	2303      	movs	r3, #3
 800f3a6:	e009      	b.n	800f3bc <ProgFileSec+0x80>
 800f3a8:	6839      	ldr	r1, [r7, #0]
 800f3aa:	6878      	ldr	r0, [r7, #4]
 800f3ac:	f7ff feea 	bl	800f184 <SetCluster>
 800f3b0:	4603      	mov	r3, r0
 800f3b2:	2b00      	cmp	r3, #0
 800f3b4:	d001      	beq.n	800f3ba <ProgFileSec+0x7e>
 800f3b6:	2301      	movs	r3, #1
 800f3b8:	e000      	b.n	800f3bc <ProgFileSec+0x80>
 800f3ba:	2300      	movs	r3, #0
 800f3bc:	4618      	mov	r0, r3
 800f3be:	3710      	adds	r7, #16
 800f3c0:	46bd      	mov	sp, r7
 800f3c2:	bd80      	pop	{r7, pc}
 800f3c4:	20000194 	.word	0x20000194

0800f3c8 <ReadFileSec>:
 800f3c8:	b580      	push	{r7, lr}
 800f3ca:	b084      	sub	sp, #16
 800f3cc:	af00      	add	r7, sp, #0
 800f3ce:	6078      	str	r0, [r7, #4]
 800f3d0:	6039      	str	r1, [r7, #0]
 800f3d2:	4b13      	ldr	r3, [pc, #76]	; (800f420 <ReadFileSec+0x58>)
 800f3d4:	68da      	ldr	r2, [r3, #12]
 800f3d6:	4b12      	ldr	r3, [pc, #72]	; (800f420 <ReadFileSec+0x58>)
 800f3d8:	695b      	ldr	r3, [r3, #20]
 800f3da:	6839      	ldr	r1, [r7, #0]
 800f3dc:	f9b1 1000 	ldrsh.w	r1, [r1]
 800f3e0:	3902      	subs	r1, #2
 800f3e2:	fb01 f303 	mul.w	r3, r1, r3
 800f3e6:	4413      	add	r3, r2
 800f3e8:	60fb      	str	r3, [r7, #12]
 800f3ea:	68fb      	ldr	r3, [r7, #12]
 800f3ec:	4a0c      	ldr	r2, [pc, #48]	; (800f420 <ReadFileSec+0x58>)
 800f3ee:	6952      	ldr	r2, [r2, #20]
 800f3f0:	b212      	sxth	r2, r2
 800f3f2:	4619      	mov	r1, r3
 800f3f4:	6878      	ldr	r0, [r7, #4]
 800f3f6:	f7ff fd89 	bl	800ef0c <ReadDiskData>
 800f3fa:	4603      	mov	r3, r0
 800f3fc:	2b00      	cmp	r3, #0
 800f3fe:	d001      	beq.n	800f404 <ReadFileSec+0x3c>
 800f400:	2301      	movs	r3, #1
 800f402:	e008      	b.n	800f416 <ReadFileSec+0x4e>
 800f404:	6838      	ldr	r0, [r7, #0]
 800f406:	f7ff ff43 	bl	800f290 <NextCluster>
 800f40a:	4603      	mov	r3, r0
 800f40c:	2b00      	cmp	r3, #0
 800f40e:	d001      	beq.n	800f414 <ReadFileSec+0x4c>
 800f410:	2302      	movs	r3, #2
 800f412:	e000      	b.n	800f416 <ReadFileSec+0x4e>
 800f414:	2300      	movs	r3, #0
 800f416:	4618      	mov	r0, r3
 800f418:	3710      	adds	r7, #16
 800f41a:	46bd      	mov	sp, r7
 800f41c:	bd80      	pop	{r7, pc}
 800f41e:	bf00      	nop
 800f420:	20000194 	.word	0x20000194

0800f424 <CloseFile>:
 800f424:	b580      	push	{r7, lr}
 800f426:	b086      	sub	sp, #24
 800f428:	af00      	add	r7, sp, #0
 800f42a:	60f8      	str	r0, [r7, #12]
 800f42c:	60b9      	str	r1, [r7, #8]
 800f42e:	607a      	str	r2, [r7, #4]
 800f430:	603b      	str	r3, [r7, #0]
 800f432:	f640 73ff 	movw	r3, #4095	; 0xfff
 800f436:	617b      	str	r3, [r7, #20]
 800f438:	687b      	ldr	r3, [r7, #4]
 800f43a:	f640 72ff 	movw	r2, #4095	; 0xfff
 800f43e:	801a      	strh	r2, [r3, #0]
 800f440:	6879      	ldr	r1, [r7, #4]
 800f442:	68f8      	ldr	r0, [r7, #12]
 800f444:	f7ff fe9e 	bl	800f184 <SetCluster>
 800f448:	683b      	ldr	r3, [r7, #0]
 800f44a:	681a      	ldr	r2, [r3, #0]
 800f44c:	697b      	ldr	r3, [r7, #20]
 800f44e:	43db      	mvns	r3, r3
 800f450:	4013      	ands	r3, r2
 800f452:	4619      	mov	r1, r3
 800f454:	4b24      	ldr	r3, [pc, #144]	; (800f4e8 <CloseFile+0xc4>)
 800f456:	695b      	ldr	r3, [r3, #20]
 800f458:	b21b      	sxth	r3, r3
 800f45a:	461a      	mov	r2, r3
 800f45c:	68f8      	ldr	r0, [r7, #12]
 800f45e:	f7ff fd55 	bl	800ef0c <ReadDiskData>
 800f462:	4603      	mov	r3, r0
 800f464:	2b00      	cmp	r3, #0
 800f466:	d001      	beq.n	800f46c <CloseFile+0x48>
 800f468:	2301      	movs	r3, #1
 800f46a:	e039      	b.n	800f4e0 <CloseFile+0xbc>
 800f46c:	683b      	ldr	r3, [r7, #0]
 800f46e:	681a      	ldr	r2, [r3, #0]
 800f470:	697b      	ldr	r3, [r7, #20]
 800f472:	4013      	ands	r3, r2
 800f474:	330b      	adds	r3, #11
 800f476:	68fa      	ldr	r2, [r7, #12]
 800f478:	4413      	add	r3, r2
 800f47a:	2220      	movs	r2, #32
 800f47c:	701a      	strb	r2, [r3, #0]
 800f47e:	683b      	ldr	r3, [r7, #0]
 800f480:	681a      	ldr	r2, [r3, #0]
 800f482:	697b      	ldr	r3, [r7, #20]
 800f484:	4013      	ands	r3, r2
 800f486:	331c      	adds	r3, #28
 800f488:	68fa      	ldr	r2, [r7, #12]
 800f48a:	4413      	add	r3, r2
 800f48c:	68ba      	ldr	r2, [r7, #8]
 800f48e:	601a      	str	r2, [r3, #0]
 800f490:	683b      	ldr	r3, [r7, #0]
 800f492:	681a      	ldr	r2, [r3, #0]
 800f494:	697b      	ldr	r3, [r7, #20]
 800f496:	43db      	mvns	r3, r3
 800f498:	4013      	ands	r3, r2
 800f49a:	4619      	mov	r1, r3
 800f49c:	68f8      	ldr	r0, [r7, #12]
 800f49e:	f7ff fdd3 	bl	800f048 <ProgDiskPage>
 800f4a2:	4603      	mov	r3, r0
 800f4a4:	2b00      	cmp	r3, #0
 800f4a6:	d001      	beq.n	800f4ac <CloseFile+0x88>
 800f4a8:	2301      	movs	r3, #1
 800f4aa:	e019      	b.n	800f4e0 <CloseFile+0xbc>
 800f4ac:	4b0e      	ldr	r3, [pc, #56]	; (800f4e8 <CloseFile+0xc4>)
 800f4ae:	681b      	ldr	r3, [r3, #0]
 800f4b0:	4a0d      	ldr	r2, [pc, #52]	; (800f4e8 <CloseFile+0xc4>)
 800f4b2:	6952      	ldr	r2, [r2, #20]
 800f4b4:	b212      	sxth	r2, r2
 800f4b6:	4619      	mov	r1, r3
 800f4b8:	68f8      	ldr	r0, [r7, #12]
 800f4ba:	f7ff fd27 	bl	800ef0c <ReadDiskData>
 800f4be:	4603      	mov	r3, r0
 800f4c0:	2b00      	cmp	r3, #0
 800f4c2:	d001      	beq.n	800f4c8 <CloseFile+0xa4>
 800f4c4:	2301      	movs	r3, #1
 800f4c6:	e00b      	b.n	800f4e0 <CloseFile+0xbc>
 800f4c8:	4b07      	ldr	r3, [pc, #28]	; (800f4e8 <CloseFile+0xc4>)
 800f4ca:	685b      	ldr	r3, [r3, #4]
 800f4cc:	4619      	mov	r1, r3
 800f4ce:	68f8      	ldr	r0, [r7, #12]
 800f4d0:	f7ff fdba 	bl	800f048 <ProgDiskPage>
 800f4d4:	4603      	mov	r3, r0
 800f4d6:	2b00      	cmp	r3, #0
 800f4d8:	d001      	beq.n	800f4de <CloseFile+0xba>
 800f4da:	2301      	movs	r3, #1
 800f4dc:	e000      	b.n	800f4e0 <CloseFile+0xbc>
 800f4de:	2300      	movs	r3, #0
 800f4e0:	4618      	mov	r0, r3
 800f4e2:	3718      	adds	r7, #24
 800f4e4:	46bd      	mov	sp, r7
 800f4e6:	bd80      	pop	{r7, pc}
 800f4e8:	20000194 	.word	0x20000194

0800f4ec <OpenFileWr>:
 800f4ec:	b580      	push	{r7, lr}
 800f4ee:	b088      	sub	sp, #32
 800f4f0:	af00      	add	r7, sp, #0
 800f4f2:	60f8      	str	r0, [r7, #12]
 800f4f4:	60b9      	str	r1, [r7, #8]
 800f4f6:	607a      	str	r2, [r7, #4]
 800f4f8:	603b      	str	r3, [r7, #0]
 800f4fa:	683b      	ldr	r3, [r7, #0]
 800f4fc:	687a      	ldr	r2, [r7, #4]
 800f4fe:	68b9      	ldr	r1, [r7, #8]
 800f500:	68f8      	ldr	r0, [r7, #12]
 800f502:	f7ff fd29 	bl	800ef58 <OpenFileRd>
 800f506:	4603      	mov	r3, r0
 800f508:	61fb      	str	r3, [r7, #28]
 800f50a:	69fb      	ldr	r3, [r7, #28]
 800f50c:	2b04      	cmp	r3, #4
 800f50e:	d002      	beq.n	800f516 <OpenFileWr+0x2a>
 800f510:	69fb      	ldr	r3, [r7, #28]
 800f512:	b2db      	uxtb	r3, r3
 800f514:	e045      	b.n	800f5a2 <OpenFileWr+0xb6>
 800f516:	6879      	ldr	r1, [r7, #4]
 800f518:	68f8      	ldr	r0, [r7, #12]
 800f51a:	f7ff fdb7 	bl	800f08c <SeekBlank>
 800f51e:	4603      	mov	r3, r0
 800f520:	2b00      	cmp	r3, #0
 800f522:	d001      	beq.n	800f528 <OpenFileWr+0x3c>
 800f524:	2303      	movs	r3, #3
 800f526:	e03c      	b.n	800f5a2 <OpenFileWr+0xb6>
 800f528:	683b      	ldr	r3, [r7, #0]
 800f52a:	681b      	ldr	r3, [r3, #0]
 800f52c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800f530:	61bb      	str	r3, [r7, #24]
 800f532:	683b      	ldr	r3, [r7, #0]
 800f534:	681a      	ldr	r2, [r3, #0]
 800f536:	69bb      	ldr	r3, [r7, #24]
 800f538:	1ad3      	subs	r3, r2, r3
 800f53a:	617b      	str	r3, [r7, #20]
 800f53c:	697b      	ldr	r3, [r7, #20]
 800f53e:	4a1b      	ldr	r2, [pc, #108]	; (800f5ac <OpenFileWr+0xc0>)
 800f540:	6952      	ldr	r2, [r2, #20]
 800f542:	b212      	sxth	r2, r2
 800f544:	4619      	mov	r1, r3
 800f546:	68f8      	ldr	r0, [r7, #12]
 800f548:	f7ff fce0 	bl	800ef0c <ReadDiskData>
 800f54c:	4603      	mov	r3, r0
 800f54e:	2b00      	cmp	r3, #0
 800f550:	d001      	beq.n	800f556 <OpenFileWr+0x6a>
 800f552:	2301      	movs	r3, #1
 800f554:	e025      	b.n	800f5a2 <OpenFileWr+0xb6>
 800f556:	2300      	movs	r3, #0
 800f558:	61fb      	str	r3, [r7, #28]
 800f55a:	e00d      	b.n	800f578 <OpenFileWr+0x8c>
 800f55c:	69fb      	ldr	r3, [r7, #28]
 800f55e:	68ba      	ldr	r2, [r7, #8]
 800f560:	441a      	add	r2, r3
 800f562:	69b9      	ldr	r1, [r7, #24]
 800f564:	69fb      	ldr	r3, [r7, #28]
 800f566:	440b      	add	r3, r1
 800f568:	4619      	mov	r1, r3
 800f56a:	68fb      	ldr	r3, [r7, #12]
 800f56c:	440b      	add	r3, r1
 800f56e:	7812      	ldrb	r2, [r2, #0]
 800f570:	701a      	strb	r2, [r3, #0]
 800f572:	69fb      	ldr	r3, [r7, #28]
 800f574:	3301      	adds	r3, #1
 800f576:	61fb      	str	r3, [r7, #28]
 800f578:	69fb      	ldr	r3, [r7, #28]
 800f57a:	2b0a      	cmp	r3, #10
 800f57c:	ddee      	ble.n	800f55c <OpenFileWr+0x70>
 800f57e:	69bb      	ldr	r3, [r7, #24]
 800f580:	331a      	adds	r3, #26
 800f582:	68fa      	ldr	r2, [r7, #12]
 800f584:	4413      	add	r3, r2
 800f586:	687a      	ldr	r2, [r7, #4]
 800f588:	f9b2 2000 	ldrsh.w	r2, [r2]
 800f58c:	801a      	strh	r2, [r3, #0]
 800f58e:	6979      	ldr	r1, [r7, #20]
 800f590:	68f8      	ldr	r0, [r7, #12]
 800f592:	f7ff fd59 	bl	800f048 <ProgDiskPage>
 800f596:	4603      	mov	r3, r0
 800f598:	2b00      	cmp	r3, #0
 800f59a:	d001      	beq.n	800f5a0 <OpenFileWr+0xb4>
 800f59c:	2301      	movs	r3, #1
 800f59e:	e000      	b.n	800f5a2 <OpenFileWr+0xb6>
 800f5a0:	2300      	movs	r3, #0
 800f5a2:	4618      	mov	r0, r3
 800f5a4:	3720      	adds	r7, #32
 800f5a6:	46bd      	mov	sp, r7
 800f5a8:	bd80      	pop	{r7, pc}
 800f5aa:	bf00      	nop
 800f5ac:	20000194 	.word	0x20000194

0800f5b0 <Color_Num>:
 800f5b0:	b480      	push	{r7}
 800f5b2:	b083      	sub	sp, #12
 800f5b4:	af00      	add	r7, sp, #0
 800f5b6:	4603      	mov	r3, r0
 800f5b8:	80fb      	strh	r3, [r7, #6]
 800f5ba:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800f5be:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 800f5c2:	4013      	ands	r3, r2
 800f5c4:	f64f 72e0 	movw	r2, #65504	; 0xffe0
 800f5c8:	4293      	cmp	r3, r2
 800f5ca:	d101      	bne.n	800f5d0 <Color_Num+0x20>
 800f5cc:	2301      	movs	r3, #1
 800f5ce:	e068      	b.n	800f6a2 <Color_Num+0xf2>
 800f5d0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800f5d4:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800f5d8:	f5b3 4f04 	cmp.w	r3, #33792	; 0x8400
 800f5dc:	d101      	bne.n	800f5e2 <Color_Num+0x32>
 800f5de:	2302      	movs	r3, #2
 800f5e0:	e05f      	b.n	800f6a2 <Color_Num+0xf2>
 800f5e2:	88fb      	ldrh	r3, [r7, #6]
 800f5e4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800f5e8:	f240 72ff 	movw	r2, #2047	; 0x7ff
 800f5ec:	4293      	cmp	r3, r2
 800f5ee:	d101      	bne.n	800f5f4 <Color_Num+0x44>
 800f5f0:	2303      	movs	r3, #3
 800f5f2:	e056      	b.n	800f6a2 <Color_Num+0xf2>
 800f5f4:	88fb      	ldrh	r3, [r7, #6]
 800f5f6:	f403 6382 	and.w	r3, r3, #1040	; 0x410
 800f5fa:	f5b3 6f82 	cmp.w	r3, #1040	; 0x410
 800f5fe:	d101      	bne.n	800f604 <Color_Num+0x54>
 800f600:	2304      	movs	r3, #4
 800f602:	e04e      	b.n	800f6a2 <Color_Num+0xf2>
 800f604:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800f608:	f64f 031f 	movw	r3, #63519	; 0xf81f
 800f60c:	4013      	ands	r3, r2
 800f60e:	f64f 021f 	movw	r2, #63519	; 0xf81f
 800f612:	4293      	cmp	r3, r2
 800f614:	d101      	bne.n	800f61a <Color_Num+0x6a>
 800f616:	2305      	movs	r3, #5
 800f618:	e043      	b.n	800f6a2 <Color_Num+0xf2>
 800f61a:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800f61e:	f248 0310 	movw	r3, #32784	; 0x8010
 800f622:	4013      	ands	r3, r2
 800f624:	f248 0210 	movw	r2, #32784	; 0x8010
 800f628:	4293      	cmp	r3, r2
 800f62a:	d101      	bne.n	800f630 <Color_Num+0x80>
 800f62c:	2306      	movs	r3, #6
 800f62e:	e038      	b.n	800f6a2 <Color_Num+0xf2>
 800f630:	88fb      	ldrh	r3, [r7, #6]
 800f632:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 800f636:	f5b3 6ffc 	cmp.w	r3, #2016	; 0x7e0
 800f63a:	d101      	bne.n	800f640 <Color_Num+0x90>
 800f63c:	2307      	movs	r3, #7
 800f63e:	e030      	b.n	800f6a2 <Color_Num+0xf2>
 800f640:	88fb      	ldrh	r3, [r7, #6]
 800f642:	f403 6382 	and.w	r3, r3, #1040	; 0x410
 800f646:	f5b3 6f82 	cmp.w	r3, #1040	; 0x410
 800f64a:	d101      	bne.n	800f650 <Color_Num+0xa0>
 800f64c:	2308      	movs	r3, #8
 800f64e:	e028      	b.n	800f6a2 <Color_Num+0xf2>
 800f650:	88fb      	ldrh	r3, [r7, #6]
 800f652:	461a      	mov	r2, r3
 800f654:	f643 13e7 	movw	r3, #14823	; 0x39e7
 800f658:	4013      	ands	r3, r2
 800f65a:	f643 12e7 	movw	r2, #14823	; 0x39e7
 800f65e:	4293      	cmp	r3, r2
 800f660:	d101      	bne.n	800f666 <Color_Num+0xb6>
 800f662:	2309      	movs	r3, #9
 800f664:	e01d      	b.n	800f6a2 <Color_Num+0xf2>
 800f666:	88fb      	ldrh	r3, [r7, #6]
 800f668:	461a      	mov	r2, r3
 800f66a:	f240 531f 	movw	r3, #1311	; 0x51f
 800f66e:	4013      	ands	r3, r2
 800f670:	f240 521f 	movw	r2, #1311	; 0x51f
 800f674:	4293      	cmp	r3, r2
 800f676:	d101      	bne.n	800f67c <Color_Num+0xcc>
 800f678:	230a      	movs	r3, #10
 800f67a:	e012      	b.n	800f6a2 <Color_Num+0xf2>
 800f67c:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800f680:	f64f 4310 	movw	r3, #64528	; 0xfc10
 800f684:	4013      	ands	r3, r2
 800f686:	f64f 4210 	movw	r2, #64528	; 0xfc10
 800f68a:	4293      	cmp	r3, r2
 800f68c:	d101      	bne.n	800f692 <Color_Num+0xe2>
 800f68e:	230b      	movs	r3, #11
 800f690:	e007      	b.n	800f6a2 <Color_Num+0xf2>
 800f692:	88fb      	ldrh	r3, [r7, #6]
 800f694:	f003 031f 	and.w	r3, r3, #31
 800f698:	2b1f      	cmp	r3, #31
 800f69a:	d101      	bne.n	800f6a0 <Color_Num+0xf0>
 800f69c:	230c      	movs	r3, #12
 800f69e:	e000      	b.n	800f6a2 <Color_Num+0xf2>
 800f6a0:	230d      	movs	r3, #13
 800f6a2:	4618      	mov	r0, r3
 800f6a4:	370c      	adds	r7, #12
 800f6a6:	46bd      	mov	sp, r7
 800f6a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6ac:	4770      	bx	lr
	...

0800f6b0 <PrintClk>:
 800f6b0:	b580      	push	{r7, lr}
 800f6b2:	b084      	sub	sp, #16
 800f6b4:	af00      	add	r7, sp, #0
 800f6b6:	4603      	mov	r3, r0
 800f6b8:	80fb      	strh	r3, [r7, #6]
 800f6ba:	460b      	mov	r3, r1
 800f6bc:	80bb      	strh	r3, [r7, #4]
 800f6be:	4613      	mov	r3, r2
 800f6c0:	70fb      	strb	r3, [r7, #3]
 800f6c2:	4b31      	ldr	r3, [pc, #196]	; (800f788 <PrintClk+0xd8>)
 800f6c4:	895b      	ldrh	r3, [r3, #10]
 800f6c6:	4619      	mov	r1, r3
 800f6c8:	f643 10e7 	movw	r0, #14823	; 0x39e7
 800f6cc:	f7fe fa6a 	bl	800dba4 <SetColor>
 800f6d0:	4b2e      	ldr	r3, [pc, #184]	; (800f78c <PrintClk+0xdc>)
 800f6d2:	f9b3 303a 	ldrsh.w	r3, [r3, #58]	; 0x3a
 800f6d6:	b29b      	uxth	r3, r3
 800f6d8:	331e      	adds	r3, #30
 800f6da:	b29b      	uxth	r3, r3
 800f6dc:	80fb      	strh	r3, [r7, #6]
 800f6de:	4b2b      	ldr	r3, [pc, #172]	; (800f78c <PrintClk+0xdc>)
 800f6e0:	f9b3 303a 	ldrsh.w	r3, [r3, #58]	; 0x3a
 800f6e4:	b29b      	uxth	r3, r3
 800f6e6:	3b03      	subs	r3, #3
 800f6e8:	b29b      	uxth	r3, r3
 800f6ea:	b218      	sxth	r0, r3
 800f6ec:	4b28      	ldr	r3, [pc, #160]	; (800f790 <PrintClk+0xe0>)
 800f6ee:	2200      	movs	r2, #0
 800f6f0:	2103      	movs	r1, #3
 800f6f2:	f7fe fa6f 	bl	800dbd4 <DispStr>
 800f6f6:	2301      	movs	r3, #1
 800f6f8:	81fb      	strh	r3, [r7, #14]
 800f6fa:	e03c      	b.n	800f776 <PrintClk+0xc6>
 800f6fc:	78fa      	ldrb	r2, [r7, #3]
 800f6fe:	4613      	mov	r3, r2
 800f700:	009b      	lsls	r3, r3, #2
 800f702:	4413      	add	r3, r2
 800f704:	005b      	lsls	r3, r3, #1
 800f706:	441a      	add	r2, r3
 800f708:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800f70c:	4413      	add	r3, r2
 800f70e:	4a21      	ldr	r2, [pc, #132]	; (800f794 <PrintClk+0xe4>)
 800f710:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800f714:	817b      	strh	r3, [r7, #10]
 800f716:	2300      	movs	r3, #0
 800f718:	81bb      	strh	r3, [r7, #12]
 800f71a:	e024      	b.n	800f766 <PrintClk+0xb6>
 800f71c:	88fa      	ldrh	r2, [r7, #6]
 800f71e:	89bb      	ldrh	r3, [r7, #12]
 800f720:	4413      	add	r3, r2
 800f722:	b29b      	uxth	r3, r3
 800f724:	b218      	sxth	r0, r3
 800f726:	88ba      	ldrh	r2, [r7, #4]
 800f728:	89fb      	ldrh	r3, [r7, #14]
 800f72a:	4413      	add	r3, r2
 800f72c:	b29b      	uxth	r3, r3
 800f72e:	b21b      	sxth	r3, r3
 800f730:	4619      	mov	r1, r3
 800f732:	f002 fce7 	bl	8012104 <LCD_Set_Posi>
 800f736:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 800f73a:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800f73e:	fa42 f303 	asr.w	r3, r2, r3
 800f742:	f003 0301 	and.w	r3, r3, #1
 800f746:	2b00      	cmp	r3, #0
 800f748:	d004      	beq.n	800f754 <PrintClk+0xa4>
 800f74a:	f64f 4010 	movw	r0, #64528	; 0xfc10
 800f74e:	f002 fd27 	bl	80121a0 <LCD_Set_Pixel>
 800f752:	e004      	b.n	800f75e <PrintClk+0xae>
 800f754:	4b10      	ldr	r3, [pc, #64]	; (800f798 <PrintClk+0xe8>)
 800f756:	881b      	ldrh	r3, [r3, #0]
 800f758:	4618      	mov	r0, r3
 800f75a:	f002 fd21 	bl	80121a0 <LCD_Set_Pixel>
 800f75e:	89bb      	ldrh	r3, [r7, #12]
 800f760:	3301      	adds	r3, #1
 800f762:	b29b      	uxth	r3, r3
 800f764:	81bb      	strh	r3, [r7, #12]
 800f766:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800f76a:	2b0a      	cmp	r3, #10
 800f76c:	ddd6      	ble.n	800f71c <PrintClk+0x6c>
 800f76e:	89fb      	ldrh	r3, [r7, #14]
 800f770:	3301      	adds	r3, #1
 800f772:	b29b      	uxth	r3, r3
 800f774:	81fb      	strh	r3, [r7, #14]
 800f776:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800f77a:	2b0a      	cmp	r3, #10
 800f77c:	ddbe      	ble.n	800f6fc <PrintClk+0x4c>
 800f77e:	bf00      	nop
 800f780:	bf00      	nop
 800f782:	3710      	adds	r7, #16
 800f784:	46bd      	mov	sp, r7
 800f786:	bd80      	pop	{r7, pc}
 800f788:	08001f08 	.word	0x08001f08
 800f78c:	0800215c 	.word	0x0800215c
 800f790:	080001ec 	.word	0x080001ec
 800f794:	08001bbc 	.word	0x08001bbc
 800f798:	200015ca 	.word	0x200015ca

0800f79c <WriteVar>:
 800f79c:	b580      	push	{r7, lr}
 800f79e:	b084      	sub	sp, #16
 800f7a0:	af00      	add	r7, sp, #0
 800f7a2:	4603      	mov	r3, r0
 800f7a4:	6039      	str	r1, [r7, #0]
 800f7a6:	80fb      	strh	r3, [r7, #6]
 800f7a8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800f7ac:	81fb      	strh	r3, [r7, #14]
 800f7ae:	2204      	movs	r2, #4
 800f7b0:	2100      	movs	r1, #0
 800f7b2:	4847      	ldr	r0, [pc, #284]	; (800f8d0 <WriteVar+0x134>)
 800f7b4:	f013 fa50 	bl	8022c58 <memset>
 800f7b8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800f7bc:	4619      	mov	r1, r3
 800f7be:	4844      	ldr	r0, [pc, #272]	; (800f8d0 <WriteVar+0x134>)
 800f7c0:	f002 fa1e 	bl	8011c00 <u16ToDec4Str>
 800f7c4:	4842      	ldr	r0, [pc, #264]	; (800f8d0 <WriteVar+0x134>)
 800f7c6:	f7fc fc3b 	bl	800c040 <strlen>
 800f7ca:	4603      	mov	r3, r0
 800f7cc:	b21a      	sxth	r2, r3
 800f7ce:	4b41      	ldr	r3, [pc, #260]	; (800f8d4 <WriteVar+0x138>)
 800f7d0:	801a      	strh	r2, [r3, #0]
 800f7d2:	4b41      	ldr	r3, [pc, #260]	; (800f8d8 <WriteVar+0x13c>)
 800f7d4:	f9b3 3000 	ldrsh.w	r3, [r3]
 800f7d8:	461a      	mov	r2, r3
 800f7da:	4b40      	ldr	r3, [pc, #256]	; (800f8dc <WriteVar+0x140>)
 800f7dc:	4413      	add	r3, r2
 800f7de:	4a3d      	ldr	r2, [pc, #244]	; (800f8d4 <WriteVar+0x138>)
 800f7e0:	f9b2 2000 	ldrsh.w	r2, [r2]
 800f7e4:	493a      	ldr	r1, [pc, #232]	; (800f8d0 <WriteVar+0x134>)
 800f7e6:	4618      	mov	r0, r3
 800f7e8:	f013 fa28 	bl	8022c3c <memcpy>
 800f7ec:	4b3a      	ldr	r3, [pc, #232]	; (800f8d8 <WriteVar+0x13c>)
 800f7ee:	f9b3 3000 	ldrsh.w	r3, [r3]
 800f7f2:	b29a      	uxth	r2, r3
 800f7f4:	4b37      	ldr	r3, [pc, #220]	; (800f8d4 <WriteVar+0x138>)
 800f7f6:	f9b3 3000 	ldrsh.w	r3, [r3]
 800f7fa:	b29b      	uxth	r3, r3
 800f7fc:	4413      	add	r3, r2
 800f7fe:	b29b      	uxth	r3, r3
 800f800:	b21a      	sxth	r2, r3
 800f802:	4b35      	ldr	r3, [pc, #212]	; (800f8d8 <WriteVar+0x13c>)
 800f804:	801a      	strh	r2, [r3, #0]
 800f806:	4b33      	ldr	r3, [pc, #204]	; (800f8d4 <WriteVar+0x138>)
 800f808:	f9b3 3000 	ldrsh.w	r3, [r3]
 800f80c:	461a      	mov	r2, r3
 800f80e:	4b34      	ldr	r3, [pc, #208]	; (800f8e0 <WriteVar+0x144>)
 800f810:	681b      	ldr	r3, [r3, #0]
 800f812:	4413      	add	r3, r2
 800f814:	4a32      	ldr	r2, [pc, #200]	; (800f8e0 <WriteVar+0x144>)
 800f816:	6013      	str	r3, [r2, #0]
 800f818:	4b2f      	ldr	r3, [pc, #188]	; (800f8d8 <WriteVar+0x13c>)
 800f81a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800f81e:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 800f822:	429a      	cmp	r2, r3
 800f824:	dc4f      	bgt.n	800f8c6 <WriteVar+0x12a>
 800f826:	6839      	ldr	r1, [r7, #0]
 800f828:	482c      	ldr	r0, [pc, #176]	; (800f8dc <WriteVar+0x140>)
 800f82a:	f7ff fd87 	bl	800f33c <ProgFileSec>
 800f82e:	4b2d      	ldr	r3, [pc, #180]	; (800f8e4 <WriteVar+0x148>)
 800f830:	681b      	ldr	r3, [r3, #0]
 800f832:	1c5a      	adds	r2, r3, #1
 800f834:	492b      	ldr	r1, [pc, #172]	; (800f8e4 <WriteVar+0x148>)
 800f836:	600a      	str	r2, [r1, #0]
 800f838:	105b      	asrs	r3, r3, #1
 800f83a:	b2db      	uxtb	r3, r3
 800f83c:	f003 0303 	and.w	r3, r3, #3
 800f840:	b2db      	uxtb	r3, r3
 800f842:	461a      	mov	r2, r3
 800f844:	2102      	movs	r1, #2
 800f846:	f44f 7084 	mov.w	r0, #264	; 0x108
 800f84a:	f7ff ff31 	bl	800f6b0 <PrintClk>
 800f84e:	4b22      	ldr	r3, [pc, #136]	; (800f8d8 <WriteVar+0x13c>)
 800f850:	f9b3 3000 	ldrsh.w	r3, [r3]
 800f854:	b29a      	uxth	r2, r3
 800f856:	89fb      	ldrh	r3, [r7, #14]
 800f858:	1ad3      	subs	r3, r2, r3
 800f85a:	b29b      	uxth	r3, r3
 800f85c:	81bb      	strh	r3, [r7, #12]
 800f85e:	4b1d      	ldr	r3, [pc, #116]	; (800f8d4 <WriteVar+0x138>)
 800f860:	f9b3 3000 	ldrsh.w	r3, [r3]
 800f864:	b29a      	uxth	r2, r3
 800f866:	89bb      	ldrh	r3, [r7, #12]
 800f868:	1ad3      	subs	r3, r2, r3
 800f86a:	b29b      	uxth	r3, r3
 800f86c:	817b      	strh	r3, [r7, #10]
 800f86e:	4b1a      	ldr	r3, [pc, #104]	; (800f8d8 <WriteVar+0x13c>)
 800f870:	2200      	movs	r2, #0
 800f872:	801a      	strh	r2, [r3, #0]
 800f874:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800f878:	461a      	mov	r2, r3
 800f87a:	2100      	movs	r1, #0
 800f87c:	4817      	ldr	r0, [pc, #92]	; (800f8dc <WriteVar+0x140>)
 800f87e:	f013 f9eb 	bl	8022c58 <memset>
 800f882:	f44f 729b 	mov.w	r2, #310	; 0x136
 800f886:	2100      	movs	r1, #0
 800f888:	4817      	ldr	r0, [pc, #92]	; (800f8e8 <WriteVar+0x14c>)
 800f88a:	f013 f9e5 	bl	8022c58 <memset>
 800f88e:	4b12      	ldr	r3, [pc, #72]	; (800f8d8 <WriteVar+0x13c>)
 800f890:	f9b3 3000 	ldrsh.w	r3, [r3]
 800f894:	461a      	mov	r2, r3
 800f896:	4b11      	ldr	r3, [pc, #68]	; (800f8dc <WriteVar+0x140>)
 800f898:	18d0      	adds	r0, r2, r3
 800f89a:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800f89e:	4a0c      	ldr	r2, [pc, #48]	; (800f8d0 <WriteVar+0x134>)
 800f8a0:	4413      	add	r3, r2
 800f8a2:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 800f8a6:	4619      	mov	r1, r3
 800f8a8:	f013 f9c8 	bl	8022c3c <memcpy>
 800f8ac:	4b0a      	ldr	r3, [pc, #40]	; (800f8d8 <WriteVar+0x13c>)
 800f8ae:	f9b3 3000 	ldrsh.w	r3, [r3]
 800f8b2:	b29a      	uxth	r2, r3
 800f8b4:	89bb      	ldrh	r3, [r7, #12]
 800f8b6:	4413      	add	r3, r2
 800f8b8:	b29b      	uxth	r3, r3
 800f8ba:	b21a      	sxth	r2, r3
 800f8bc:	4b06      	ldr	r3, [pc, #24]	; (800f8d8 <WriteVar+0x13c>)
 800f8be:	801a      	strh	r2, [r3, #0]
 800f8c0:	4b04      	ldr	r3, [pc, #16]	; (800f8d4 <WriteVar+0x138>)
 800f8c2:	2200      	movs	r2, #0
 800f8c4:	801a      	strh	r2, [r3, #0]
 800f8c6:	bf00      	nop
 800f8c8:	3710      	adds	r7, #16
 800f8ca:	46bd      	mov	sp, r7
 800f8cc:	bd80      	pop	{r7, pc}
 800f8ce:	bf00      	nop
 800f8d0:	200015d0 	.word	0x200015d0
 800f8d4:	20000790 	.word	0x20000790
 800f8d8:	2000078e 	.word	0x2000078e
 800f8dc:	200017d4 	.word	0x200017d4
 800f8e0:	20000794 	.word	0x20000794
 800f8e4:	20000798 	.word	0x20000798
 800f8e8:	20000008 	.word	0x20000008

0800f8ec <WriteStr>:
 800f8ec:	b580      	push	{r7, lr}
 800f8ee:	b084      	sub	sp, #16
 800f8f0:	af00      	add	r7, sp, #0
 800f8f2:	6078      	str	r0, [r7, #4]
 800f8f4:	6039      	str	r1, [r7, #0]
 800f8f6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800f8fa:	81fb      	strh	r3, [r7, #14]
 800f8fc:	6878      	ldr	r0, [r7, #4]
 800f8fe:	f7fc fb9f 	bl	800c040 <strlen>
 800f902:	4603      	mov	r3, r0
 800f904:	b21a      	sxth	r2, r3
 800f906:	4b40      	ldr	r3, [pc, #256]	; (800fa08 <WriteStr+0x11c>)
 800f908:	801a      	strh	r2, [r3, #0]
 800f90a:	4b40      	ldr	r3, [pc, #256]	; (800fa0c <WriteStr+0x120>)
 800f90c:	f9b3 3000 	ldrsh.w	r3, [r3]
 800f910:	461a      	mov	r2, r3
 800f912:	4b3f      	ldr	r3, [pc, #252]	; (800fa10 <WriteStr+0x124>)
 800f914:	4413      	add	r3, r2
 800f916:	4a3c      	ldr	r2, [pc, #240]	; (800fa08 <WriteStr+0x11c>)
 800f918:	f9b2 2000 	ldrsh.w	r2, [r2]
 800f91c:	6879      	ldr	r1, [r7, #4]
 800f91e:	4618      	mov	r0, r3
 800f920:	f013 f98c 	bl	8022c3c <memcpy>
 800f924:	4b39      	ldr	r3, [pc, #228]	; (800fa0c <WriteStr+0x120>)
 800f926:	f9b3 3000 	ldrsh.w	r3, [r3]
 800f92a:	b29a      	uxth	r2, r3
 800f92c:	4b36      	ldr	r3, [pc, #216]	; (800fa08 <WriteStr+0x11c>)
 800f92e:	f9b3 3000 	ldrsh.w	r3, [r3]
 800f932:	b29b      	uxth	r3, r3
 800f934:	4413      	add	r3, r2
 800f936:	b29b      	uxth	r3, r3
 800f938:	b21a      	sxth	r2, r3
 800f93a:	4b34      	ldr	r3, [pc, #208]	; (800fa0c <WriteStr+0x120>)
 800f93c:	801a      	strh	r2, [r3, #0]
 800f93e:	4b32      	ldr	r3, [pc, #200]	; (800fa08 <WriteStr+0x11c>)
 800f940:	f9b3 3000 	ldrsh.w	r3, [r3]
 800f944:	461a      	mov	r2, r3
 800f946:	4b33      	ldr	r3, [pc, #204]	; (800fa14 <WriteStr+0x128>)
 800f948:	681b      	ldr	r3, [r3, #0]
 800f94a:	4413      	add	r3, r2
 800f94c:	4a31      	ldr	r2, [pc, #196]	; (800fa14 <WriteStr+0x128>)
 800f94e:	6013      	str	r3, [r2, #0]
 800f950:	4b2e      	ldr	r3, [pc, #184]	; (800fa0c <WriteStr+0x120>)
 800f952:	f9b3 3000 	ldrsh.w	r3, [r3]
 800f956:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 800f95a:	429a      	cmp	r2, r3
 800f95c:	dc4f      	bgt.n	800f9fe <WriteStr+0x112>
 800f95e:	6839      	ldr	r1, [r7, #0]
 800f960:	482b      	ldr	r0, [pc, #172]	; (800fa10 <WriteStr+0x124>)
 800f962:	f7ff fceb 	bl	800f33c <ProgFileSec>
 800f966:	4b2c      	ldr	r3, [pc, #176]	; (800fa18 <WriteStr+0x12c>)
 800f968:	681b      	ldr	r3, [r3, #0]
 800f96a:	1c5a      	adds	r2, r3, #1
 800f96c:	492a      	ldr	r1, [pc, #168]	; (800fa18 <WriteStr+0x12c>)
 800f96e:	600a      	str	r2, [r1, #0]
 800f970:	105b      	asrs	r3, r3, #1
 800f972:	b2db      	uxtb	r3, r3
 800f974:	f003 0303 	and.w	r3, r3, #3
 800f978:	b2db      	uxtb	r3, r3
 800f97a:	461a      	mov	r2, r3
 800f97c:	2102      	movs	r1, #2
 800f97e:	f44f 7084 	mov.w	r0, #264	; 0x108
 800f982:	f7ff fe95 	bl	800f6b0 <PrintClk>
 800f986:	4b21      	ldr	r3, [pc, #132]	; (800fa0c <WriteStr+0x120>)
 800f988:	f9b3 3000 	ldrsh.w	r3, [r3]
 800f98c:	b29a      	uxth	r2, r3
 800f98e:	89fb      	ldrh	r3, [r7, #14]
 800f990:	1ad3      	subs	r3, r2, r3
 800f992:	b29b      	uxth	r3, r3
 800f994:	81bb      	strh	r3, [r7, #12]
 800f996:	4b1c      	ldr	r3, [pc, #112]	; (800fa08 <WriteStr+0x11c>)
 800f998:	f9b3 3000 	ldrsh.w	r3, [r3]
 800f99c:	b29a      	uxth	r2, r3
 800f99e:	89bb      	ldrh	r3, [r7, #12]
 800f9a0:	1ad3      	subs	r3, r2, r3
 800f9a2:	b29b      	uxth	r3, r3
 800f9a4:	817b      	strh	r3, [r7, #10]
 800f9a6:	4b19      	ldr	r3, [pc, #100]	; (800fa0c <WriteStr+0x120>)
 800f9a8:	2200      	movs	r2, #0
 800f9aa:	801a      	strh	r2, [r3, #0]
 800f9ac:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800f9b0:	461a      	mov	r2, r3
 800f9b2:	2100      	movs	r1, #0
 800f9b4:	4816      	ldr	r0, [pc, #88]	; (800fa10 <WriteStr+0x124>)
 800f9b6:	f013 f94f 	bl	8022c58 <memset>
 800f9ba:	f44f 729b 	mov.w	r2, #310	; 0x136
 800f9be:	2100      	movs	r1, #0
 800f9c0:	4816      	ldr	r0, [pc, #88]	; (800fa1c <WriteStr+0x130>)
 800f9c2:	f013 f949 	bl	8022c58 <memset>
 800f9c6:	4b11      	ldr	r3, [pc, #68]	; (800fa0c <WriteStr+0x120>)
 800f9c8:	f9b3 3000 	ldrsh.w	r3, [r3]
 800f9cc:	461a      	mov	r2, r3
 800f9ce:	4b10      	ldr	r3, [pc, #64]	; (800fa10 <WriteStr+0x124>)
 800f9d0:	18d0      	adds	r0, r2, r3
 800f9d2:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800f9d6:	687a      	ldr	r2, [r7, #4]
 800f9d8:	4413      	add	r3, r2
 800f9da:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 800f9de:	4619      	mov	r1, r3
 800f9e0:	f013 f92c 	bl	8022c3c <memcpy>
 800f9e4:	4b09      	ldr	r3, [pc, #36]	; (800fa0c <WriteStr+0x120>)
 800f9e6:	f9b3 3000 	ldrsh.w	r3, [r3]
 800f9ea:	b29a      	uxth	r2, r3
 800f9ec:	89bb      	ldrh	r3, [r7, #12]
 800f9ee:	4413      	add	r3, r2
 800f9f0:	b29b      	uxth	r3, r3
 800f9f2:	b21a      	sxth	r2, r3
 800f9f4:	4b05      	ldr	r3, [pc, #20]	; (800fa0c <WriteStr+0x120>)
 800f9f6:	801a      	strh	r2, [r3, #0]
 800f9f8:	4b03      	ldr	r3, [pc, #12]	; (800fa08 <WriteStr+0x11c>)
 800f9fa:	2200      	movs	r2, #0
 800f9fc:	801a      	strh	r2, [r3, #0]
 800f9fe:	bf00      	nop
 800fa00:	3710      	adds	r7, #16
 800fa02:	46bd      	mov	sp, r7
 800fa04:	bd80      	pop	{r7, pc}
 800fa06:	bf00      	nop
 800fa08:	20000790 	.word	0x20000790
 800fa0c:	2000078e 	.word	0x2000078e
 800fa10:	200017d4 	.word	0x200017d4
 800fa14:	20000794 	.word	0x20000794
 800fa18:	20000798 	.word	0x20000798
 800fa1c:	20000008 	.word	0x20000008

0800fa20 <Make_Filename>:
 800fa20:	b580      	push	{r7, lr}
 800fa22:	b084      	sub	sp, #16
 800fa24:	af00      	add	r7, sp, #0
 800fa26:	4603      	mov	r3, r0
 800fa28:	6039      	str	r1, [r7, #0]
 800fa2a:	80fb      	strh	r3, [r7, #6]
 800fa2c:	88fb      	ldrh	r3, [r7, #6]
 800fa2e:	b2da      	uxtb	r2, r3
 800fa30:	f107 030c 	add.w	r3, r7, #12
 800fa34:	4611      	mov	r1, r2
 800fa36:	4618      	mov	r0, r3
 800fa38:	f001 ff3c 	bl	80118b4 <u8ToDec3>
 800fa3c:	683b      	ldr	r3, [r7, #0]
 800fa3e:	3304      	adds	r3, #4
 800fa40:	7b3a      	ldrb	r2, [r7, #12]
 800fa42:	701a      	strb	r2, [r3, #0]
 800fa44:	683b      	ldr	r3, [r7, #0]
 800fa46:	3305      	adds	r3, #5
 800fa48:	7b7a      	ldrb	r2, [r7, #13]
 800fa4a:	701a      	strb	r2, [r3, #0]
 800fa4c:	683b      	ldr	r3, [r7, #0]
 800fa4e:	3306      	adds	r3, #6
 800fa50:	7bba      	ldrb	r2, [r7, #14]
 800fa52:	701a      	strb	r2, [r3, #0]
 800fa54:	bf00      	nop
 800fa56:	3710      	adds	r7, #16
 800fa58:	46bd      	mov	sp, r7
 800fa5a:	bd80      	pop	{r7, pc}

0800fa5c <Load_File_Num>:
 800fa5c:	b580      	push	{r7, lr}
 800fa5e:	b08a      	sub	sp, #40	; 0x28
 800fa60:	af00      	add	r7, sp, #0
 800fa62:	4603      	mov	r3, r0
 800fa64:	71fb      	strb	r3, [r7, #7]
 800fa66:	2300      	movs	r3, #0
 800fa68:	84fb      	strh	r3, [r7, #38]	; 0x26
 800fa6a:	4a87      	ldr	r2, [pc, #540]	; (800fc88 <Load_File_Num+0x22c>)
 800fa6c:	f107 0318 	add.w	r3, r7, #24
 800fa70:	ca07      	ldmia	r2, {r0, r1, r2}
 800fa72:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800fa76:	79fb      	ldrb	r3, [r7, #7]
 800fa78:	3b1d      	subs	r3, #29
 800fa7a:	2b04      	cmp	r3, #4
 800fa7c:	f200 80fe 	bhi.w	800fc7c <Load_File_Num+0x220>
 800fa80:	a201      	add	r2, pc, #4	; (adr r2, 800fa88 <Load_File_Num+0x2c>)
 800fa82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fa86:	bf00      	nop
 800fa88:	0800fa9d 	.word	0x0800fa9d
 800fa8c:	0800fafd 	.word	0x0800fafd
 800fa90:	0800fb5d 	.word	0x0800fb5d
 800fa94:	0800fbbd 	.word	0x0800fbbd
 800fa98:	0800fc1d 	.word	0x0800fc1d
 800fa9c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800faa0:	2100      	movs	r1, #0
 800faa2:	487a      	ldr	r0, [pc, #488]	; (800fc8c <Load_File_Num+0x230>)
 800faa4:	f013 f8d8 	bl	8022c58 <memset>
 800faa8:	4a79      	ldr	r2, [pc, #484]	; (800fc90 <Load_File_Num+0x234>)
 800faaa:	f107 0318 	add.w	r3, r7, #24
 800faae:	ca07      	ldmia	r2, {r0, r1, r2}
 800fab0:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800fab4:	f107 0218 	add.w	r2, r7, #24
 800fab8:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 800fabc:	4611      	mov	r1, r2
 800fabe:	4618      	mov	r0, r3
 800fac0:	f7ff ffae 	bl	800fa20 <Make_Filename>
 800fac4:	e00d      	b.n	800fae2 <Load_File_Num+0x86>
 800fac6:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 800faca:	b29b      	uxth	r3, r3
 800facc:	3301      	adds	r3, #1
 800face:	b29b      	uxth	r3, r3
 800fad0:	84fb      	strh	r3, [r7, #38]	; 0x26
 800fad2:	f107 0218 	add.w	r2, r7, #24
 800fad6:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 800fada:	4611      	mov	r1, r2
 800fadc:	4618      	mov	r0, r3
 800fade:	f7ff ff9f 	bl	800fa20 <Make_Filename>
 800fae2:	f107 030c 	add.w	r3, r7, #12
 800fae6:	f107 0210 	add.w	r2, r7, #16
 800faea:	f107 0118 	add.w	r1, r7, #24
 800faee:	4867      	ldr	r0, [pc, #412]	; (800fc8c <Load_File_Num+0x230>)
 800faf0:	f7ff fa32 	bl	800ef58 <OpenFileRd>
 800faf4:	4603      	mov	r3, r0
 800faf6:	2b00      	cmp	r3, #0
 800faf8:	d0e5      	beq.n	800fac6 <Load_File_Num+0x6a>
 800fafa:	e0bf      	b.n	800fc7c <Load_File_Num+0x220>
 800fafc:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800fb00:	2100      	movs	r1, #0
 800fb02:	4862      	ldr	r0, [pc, #392]	; (800fc8c <Load_File_Num+0x230>)
 800fb04:	f013 f8a8 	bl	8022c58 <memset>
 800fb08:	4a62      	ldr	r2, [pc, #392]	; (800fc94 <Load_File_Num+0x238>)
 800fb0a:	f107 0318 	add.w	r3, r7, #24
 800fb0e:	ca07      	ldmia	r2, {r0, r1, r2}
 800fb10:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800fb14:	f107 0218 	add.w	r2, r7, #24
 800fb18:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 800fb1c:	4611      	mov	r1, r2
 800fb1e:	4618      	mov	r0, r3
 800fb20:	f7ff ff7e 	bl	800fa20 <Make_Filename>
 800fb24:	e00d      	b.n	800fb42 <Load_File_Num+0xe6>
 800fb26:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 800fb2a:	b29b      	uxth	r3, r3
 800fb2c:	3301      	adds	r3, #1
 800fb2e:	b29b      	uxth	r3, r3
 800fb30:	84fb      	strh	r3, [r7, #38]	; 0x26
 800fb32:	f107 0218 	add.w	r2, r7, #24
 800fb36:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 800fb3a:	4611      	mov	r1, r2
 800fb3c:	4618      	mov	r0, r3
 800fb3e:	f7ff ff6f 	bl	800fa20 <Make_Filename>
 800fb42:	f107 030c 	add.w	r3, r7, #12
 800fb46:	f107 0210 	add.w	r2, r7, #16
 800fb4a:	f107 0118 	add.w	r1, r7, #24
 800fb4e:	484f      	ldr	r0, [pc, #316]	; (800fc8c <Load_File_Num+0x230>)
 800fb50:	f7ff fa02 	bl	800ef58 <OpenFileRd>
 800fb54:	4603      	mov	r3, r0
 800fb56:	2b00      	cmp	r3, #0
 800fb58:	d0e5      	beq.n	800fb26 <Load_File_Num+0xca>
 800fb5a:	e08f      	b.n	800fc7c <Load_File_Num+0x220>
 800fb5c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800fb60:	2100      	movs	r1, #0
 800fb62:	484a      	ldr	r0, [pc, #296]	; (800fc8c <Load_File_Num+0x230>)
 800fb64:	f013 f878 	bl	8022c58 <memset>
 800fb68:	4a4b      	ldr	r2, [pc, #300]	; (800fc98 <Load_File_Num+0x23c>)
 800fb6a:	f107 0318 	add.w	r3, r7, #24
 800fb6e:	ca07      	ldmia	r2, {r0, r1, r2}
 800fb70:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800fb74:	f107 0218 	add.w	r2, r7, #24
 800fb78:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 800fb7c:	4611      	mov	r1, r2
 800fb7e:	4618      	mov	r0, r3
 800fb80:	f7ff ff4e 	bl	800fa20 <Make_Filename>
 800fb84:	e00d      	b.n	800fba2 <Load_File_Num+0x146>
 800fb86:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 800fb8a:	b29b      	uxth	r3, r3
 800fb8c:	3301      	adds	r3, #1
 800fb8e:	b29b      	uxth	r3, r3
 800fb90:	84fb      	strh	r3, [r7, #38]	; 0x26
 800fb92:	f107 0218 	add.w	r2, r7, #24
 800fb96:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 800fb9a:	4611      	mov	r1, r2
 800fb9c:	4618      	mov	r0, r3
 800fb9e:	f7ff ff3f 	bl	800fa20 <Make_Filename>
 800fba2:	f107 030c 	add.w	r3, r7, #12
 800fba6:	f107 0210 	add.w	r2, r7, #16
 800fbaa:	f107 0118 	add.w	r1, r7, #24
 800fbae:	4837      	ldr	r0, [pc, #220]	; (800fc8c <Load_File_Num+0x230>)
 800fbb0:	f7ff f9d2 	bl	800ef58 <OpenFileRd>
 800fbb4:	4603      	mov	r3, r0
 800fbb6:	2b00      	cmp	r3, #0
 800fbb8:	d0e5      	beq.n	800fb86 <Load_File_Num+0x12a>
 800fbba:	e05f      	b.n	800fc7c <Load_File_Num+0x220>
 800fbbc:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800fbc0:	2100      	movs	r1, #0
 800fbc2:	4832      	ldr	r0, [pc, #200]	; (800fc8c <Load_File_Num+0x230>)
 800fbc4:	f013 f848 	bl	8022c58 <memset>
 800fbc8:	4a34      	ldr	r2, [pc, #208]	; (800fc9c <Load_File_Num+0x240>)
 800fbca:	f107 0318 	add.w	r3, r7, #24
 800fbce:	ca07      	ldmia	r2, {r0, r1, r2}
 800fbd0:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800fbd4:	f107 0218 	add.w	r2, r7, #24
 800fbd8:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 800fbdc:	4611      	mov	r1, r2
 800fbde:	4618      	mov	r0, r3
 800fbe0:	f7ff ff1e 	bl	800fa20 <Make_Filename>
 800fbe4:	e00d      	b.n	800fc02 <Load_File_Num+0x1a6>
 800fbe6:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 800fbea:	b29b      	uxth	r3, r3
 800fbec:	3301      	adds	r3, #1
 800fbee:	b29b      	uxth	r3, r3
 800fbf0:	84fb      	strh	r3, [r7, #38]	; 0x26
 800fbf2:	f107 0218 	add.w	r2, r7, #24
 800fbf6:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 800fbfa:	4611      	mov	r1, r2
 800fbfc:	4618      	mov	r0, r3
 800fbfe:	f7ff ff0f 	bl	800fa20 <Make_Filename>
 800fc02:	f107 030c 	add.w	r3, r7, #12
 800fc06:	f107 0210 	add.w	r2, r7, #16
 800fc0a:	f107 0118 	add.w	r1, r7, #24
 800fc0e:	481f      	ldr	r0, [pc, #124]	; (800fc8c <Load_File_Num+0x230>)
 800fc10:	f7ff f9a2 	bl	800ef58 <OpenFileRd>
 800fc14:	4603      	mov	r3, r0
 800fc16:	2b00      	cmp	r3, #0
 800fc18:	d0e5      	beq.n	800fbe6 <Load_File_Num+0x18a>
 800fc1a:	e02f      	b.n	800fc7c <Load_File_Num+0x220>
 800fc1c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800fc20:	2100      	movs	r1, #0
 800fc22:	481a      	ldr	r0, [pc, #104]	; (800fc8c <Load_File_Num+0x230>)
 800fc24:	f013 f818 	bl	8022c58 <memset>
 800fc28:	4a1d      	ldr	r2, [pc, #116]	; (800fca0 <Load_File_Num+0x244>)
 800fc2a:	f107 0318 	add.w	r3, r7, #24
 800fc2e:	ca07      	ldmia	r2, {r0, r1, r2}
 800fc30:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800fc34:	f107 0218 	add.w	r2, r7, #24
 800fc38:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 800fc3c:	4611      	mov	r1, r2
 800fc3e:	4618      	mov	r0, r3
 800fc40:	f7ff feee 	bl	800fa20 <Make_Filename>
 800fc44:	e00d      	b.n	800fc62 <Load_File_Num+0x206>
 800fc46:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 800fc4a:	b29b      	uxth	r3, r3
 800fc4c:	3301      	adds	r3, #1
 800fc4e:	b29b      	uxth	r3, r3
 800fc50:	84fb      	strh	r3, [r7, #38]	; 0x26
 800fc52:	f107 0218 	add.w	r2, r7, #24
 800fc56:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 800fc5a:	4611      	mov	r1, r2
 800fc5c:	4618      	mov	r0, r3
 800fc5e:	f7ff fedf 	bl	800fa20 <Make_Filename>
 800fc62:	f107 030c 	add.w	r3, r7, #12
 800fc66:	f107 0210 	add.w	r2, r7, #16
 800fc6a:	f107 0118 	add.w	r1, r7, #24
 800fc6e:	4807      	ldr	r0, [pc, #28]	; (800fc8c <Load_File_Num+0x230>)
 800fc70:	f7ff f972 	bl	800ef58 <OpenFileRd>
 800fc74:	4603      	mov	r3, r0
 800fc76:	2b00      	cmp	r3, #0
 800fc78:	d0e5      	beq.n	800fc46 <Load_File_Num+0x1ea>
 800fc7a:	bf00      	nop
 800fc7c:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 800fc80:	4618      	mov	r0, r3
 800fc82:	3728      	adds	r7, #40	; 0x28
 800fc84:	46bd      	mov	sp, r7
 800fc86:	bd80      	pop	{r7, pc}
 800fc88:	08000238 	.word	0x08000238
 800fc8c:	200017d4 	.word	0x200017d4
 800fc90:	080001fc 	.word	0x080001fc
 800fc94:	08000208 	.word	0x08000208
 800fc98:	08000214 	.word	0x08000214
 800fc9c:	08000220 	.word	0x08000220
 800fca0:	0800022c 	.word	0x0800022c

0800fca4 <File_Num>:
 800fca4:	b580      	push	{r7, lr}
 800fca6:	af00      	add	r7, sp, #0
 800fca8:	201d      	movs	r0, #29
 800fcaa:	f7ff fed7 	bl	800fa5c <Load_File_Num>
 800fcae:	4603      	mov	r3, r0
 800fcb0:	461a      	mov	r2, r3
 800fcb2:	4b12      	ldr	r3, [pc, #72]	; (800fcfc <File_Num+0x58>)
 800fcb4:	f8a3 20ec 	strh.w	r2, [r3, #236]	; 0xec
 800fcb8:	201e      	movs	r0, #30
 800fcba:	f7ff fecf 	bl	800fa5c <Load_File_Num>
 800fcbe:	4603      	mov	r3, r0
 800fcc0:	461a      	mov	r2, r3
 800fcc2:	4b0e      	ldr	r3, [pc, #56]	; (800fcfc <File_Num+0x58>)
 800fcc4:	f8a3 20f4 	strh.w	r2, [r3, #244]	; 0xf4
 800fcc8:	201f      	movs	r0, #31
 800fcca:	f7ff fec7 	bl	800fa5c <Load_File_Num>
 800fcce:	4603      	mov	r3, r0
 800fcd0:	461a      	mov	r2, r3
 800fcd2:	4b0a      	ldr	r3, [pc, #40]	; (800fcfc <File_Num+0x58>)
 800fcd4:	f8a3 20fc 	strh.w	r2, [r3, #252]	; 0xfc
 800fcd8:	2020      	movs	r0, #32
 800fcda:	f7ff febf 	bl	800fa5c <Load_File_Num>
 800fcde:	4603      	mov	r3, r0
 800fce0:	461a      	mov	r2, r3
 800fce2:	4b06      	ldr	r3, [pc, #24]	; (800fcfc <File_Num+0x58>)
 800fce4:	f8a3 2104 	strh.w	r2, [r3, #260]	; 0x104
 800fce8:	2021      	movs	r0, #33	; 0x21
 800fcea:	f7ff feb7 	bl	800fa5c <Load_File_Num>
 800fcee:	4603      	mov	r3, r0
 800fcf0:	461a      	mov	r2, r3
 800fcf2:	4b02      	ldr	r3, [pc, #8]	; (800fcfc <File_Num+0x58>)
 800fcf4:	f8a3 210c 	strh.w	r2, [r3, #268]	; 0x10c
 800fcf8:	bf00      	nop
 800fcfa:	bd80      	pop	{r7, pc}
 800fcfc:	20000298 	.word	0x20000298

0800fd00 <Load_Buf>:
 800fd00:	b580      	push	{r7, lr}
 800fd02:	b08e      	sub	sp, #56	; 0x38
 800fd04:	af00      	add	r7, sp, #0
 800fd06:	4603      	mov	r3, r0
 800fd08:	80fb      	strh	r3, [r7, #6]
 800fd0a:	4a66      	ldr	r2, [pc, #408]	; (800fea4 <Load_Buf+0x1a4>)
 800fd0c:	f107 0318 	add.w	r3, r7, #24
 800fd10:	ca07      	ldmia	r2, {r0, r1, r2}
 800fd12:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800fd16:	2301      	movs	r3, #1
 800fd18:	62fb      	str	r3, [r7, #44]	; 0x2c
 800fd1a:	f107 0218 	add.w	r2, r7, #24
 800fd1e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800fd22:	4611      	mov	r1, r2
 800fd24:	4618      	mov	r0, r3
 800fd26:	f7ff fe7b 	bl	800fa20 <Make_Filename>
 800fd2a:	f107 030c 	add.w	r3, r7, #12
 800fd2e:	f107 0210 	add.w	r2, r7, #16
 800fd32:	f107 0118 	add.w	r1, r7, #24
 800fd36:	485c      	ldr	r0, [pc, #368]	; (800fea8 <Load_Buf+0x1a8>)
 800fd38:	f7ff f90e 	bl	800ef58 <OpenFileRd>
 800fd3c:	4603      	mov	r3, r0
 800fd3e:	62fb      	str	r3, [r7, #44]	; 0x2c
 800fd40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fd42:	2b00      	cmp	r3, #0
 800fd44:	d002      	beq.n	800fd4c <Load_Buf+0x4c>
 800fd46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fd48:	b2db      	uxtb	r3, r3
 800fd4a:	e0a6      	b.n	800fe9a <Load_Buf+0x19a>
 800fd4c:	2302      	movs	r3, #2
 800fd4e:	633b      	str	r3, [r7, #48]	; 0x30
 800fd50:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800fd54:	62bb      	str	r3, [r7, #40]	; 0x28
 800fd56:	4b55      	ldr	r3, [pc, #340]	; (800feac <Load_Buf+0x1ac>)
 800fd58:	f9b3 304c 	ldrsh.w	r3, [r3, #76]	; 0x4c
 800fd5c:	2b03      	cmp	r3, #3
 800fd5e:	d101      	bne.n	800fd64 <Load_Buf+0x64>
 800fd60:	2304      	movs	r3, #4
 800fd62:	633b      	str	r3, [r7, #48]	; 0x30
 800fd64:	2300      	movs	r3, #0
 800fd66:	637b      	str	r3, [r7, #52]	; 0x34
 800fd68:	e01d      	b.n	800fda6 <Load_Buf+0xa6>
 800fd6a:	f107 0310 	add.w	r3, r7, #16
 800fd6e:	4619      	mov	r1, r3
 800fd70:	484d      	ldr	r0, [pc, #308]	; (800fea8 <Load_Buf+0x1a8>)
 800fd72:	f7ff fb29 	bl	800f3c8 <ReadFileSec>
 800fd76:	4603      	mov	r3, r0
 800fd78:	2b00      	cmp	r3, #0
 800fd7a:	d001      	beq.n	800fd80 <Load_Buf+0x80>
 800fd7c:	2303      	movs	r3, #3
 800fd7e:	e08c      	b.n	800fe9a <Load_Buf+0x19a>
 800fd80:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fd82:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800fd84:	fb02 f303 	mul.w	r3, r2, r3
 800fd88:	0fda      	lsrs	r2, r3, #31
 800fd8a:	4413      	add	r3, r2
 800fd8c:	105b      	asrs	r3, r3, #1
 800fd8e:	3302      	adds	r3, #2
 800fd90:	005b      	lsls	r3, r3, #1
 800fd92:	4a47      	ldr	r2, [pc, #284]	; (800feb0 <Load_Buf+0x1b0>)
 800fd94:	4413      	add	r3, r2
 800fd96:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800fd98:	4943      	ldr	r1, [pc, #268]	; (800fea8 <Load_Buf+0x1a8>)
 800fd9a:	4618      	mov	r0, r3
 800fd9c:	f012 ff4e 	bl	8022c3c <memcpy>
 800fda0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fda2:	3301      	adds	r3, #1
 800fda4:	637b      	str	r3, [r7, #52]	; 0x34
 800fda6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800fda8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fdaa:	429a      	cmp	r2, r3
 800fdac:	dbdd      	blt.n	800fd6a <Load_Buf+0x6a>
 800fdae:	f107 0310 	add.w	r3, r7, #16
 800fdb2:	4619      	mov	r1, r3
 800fdb4:	483c      	ldr	r0, [pc, #240]	; (800fea8 <Load_Buf+0x1a8>)
 800fdb6:	f7ff fb07 	bl	800f3c8 <ReadFileSec>
 800fdba:	4603      	mov	r3, r0
 800fdbc:	2b00      	cmp	r3, #0
 800fdbe:	d001      	beq.n	800fdc4 <Load_Buf+0xc4>
 800fdc0:	2303      	movs	r3, #3
 800fdc2:	e06a      	b.n	800fe9a <Load_Buf+0x19a>
 800fdc4:	4b3b      	ldr	r3, [pc, #236]	; (800feb4 <Load_Buf+0x1b4>)
 800fdc6:	627b      	str	r3, [r7, #36]	; 0x24
 800fdc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fdca:	1c9a      	adds	r2, r3, #2
 800fdcc:	627a      	str	r2, [r7, #36]	; 0x24
 800fdce:	f64a 2255 	movw	r2, #43605	; 0xaa55
 800fdd2:	801a      	strh	r2, [r3, #0]
 800fdd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fdd6:	1c9a      	adds	r2, r3, #2
 800fdd8:	627a      	str	r2, [r7, #36]	; 0x24
 800fdda:	4a35      	ldr	r2, [pc, #212]	; (800feb0 <Load_Buf+0x1b0>)
 800fddc:	f9b2 2000 	ldrsh.w	r2, [r2]
 800fde0:	801a      	strh	r2, [r3, #0]
 800fde2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fde4:	1c9a      	adds	r2, r3, #2
 800fde6:	627a      	str	r2, [r7, #36]	; 0x24
 800fde8:	4a31      	ldr	r2, [pc, #196]	; (800feb0 <Load_Buf+0x1b0>)
 800fdea:	f9b2 2002 	ldrsh.w	r2, [r2, #2]
 800fdee:	801a      	strh	r2, [r3, #0]
 800fdf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fdf2:	1c9a      	adds	r2, r3, #2
 800fdf4:	627a      	str	r2, [r7, #36]	; 0x24
 800fdf6:	4a2d      	ldr	r2, [pc, #180]	; (800feac <Load_Buf+0x1ac>)
 800fdf8:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 800fdfc:	801a      	strh	r2, [r3, #0]
 800fdfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fe00:	1c9a      	adds	r2, r3, #2
 800fe02:	627a      	str	r2, [r7, #36]	; 0x24
 800fe04:	4a29      	ldr	r2, [pc, #164]	; (800feac <Load_Buf+0x1ac>)
 800fe06:	f9b2 2014 	ldrsh.w	r2, [r2, #20]
 800fe0a:	801a      	strh	r2, [r3, #0]
 800fe0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fe0e:	1c9a      	adds	r2, r3, #2
 800fe10:	627a      	str	r2, [r7, #36]	; 0x24
 800fe12:	4a26      	ldr	r2, [pc, #152]	; (800feac <Load_Buf+0x1ac>)
 800fe14:	f9b2 204c 	ldrsh.w	r2, [r2, #76]	; 0x4c
 800fe18:	801a      	strh	r2, [r3, #0]
 800fe1a:	4b23      	ldr	r3, [pc, #140]	; (800fea8 <Load_Buf+0x1a8>)
 800fe1c:	627b      	str	r3, [r7, #36]	; 0x24
 800fe1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fe20:	1c9a      	adds	r2, r3, #2
 800fe22:	627a      	str	r2, [r7, #36]	; 0x24
 800fe24:	f9b3 2000 	ldrsh.w	r2, [r3]
 800fe28:	4b21      	ldr	r3, [pc, #132]	; (800feb0 <Load_Buf+0x1b0>)
 800fe2a:	801a      	strh	r2, [r3, #0]
 800fe2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fe2e:	1c9a      	adds	r2, r3, #2
 800fe30:	627a      	str	r2, [r7, #36]	; 0x24
 800fe32:	f9b3 2000 	ldrsh.w	r2, [r3]
 800fe36:	4b1e      	ldr	r3, [pc, #120]	; (800feb0 <Load_Buf+0x1b0>)
 800fe38:	805a      	strh	r2, [r3, #2]
 800fe3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fe3c:	1c9a      	adds	r2, r3, #2
 800fe3e:	627a      	str	r2, [r7, #36]	; 0x24
 800fe40:	f9b3 2000 	ldrsh.w	r2, [r3]
 800fe44:	4b19      	ldr	r3, [pc, #100]	; (800feac <Load_Buf+0x1ac>)
 800fe46:	809a      	strh	r2, [r3, #4]
 800fe48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fe4a:	1c9a      	adds	r2, r3, #2
 800fe4c:	627a      	str	r2, [r7, #36]	; 0x24
 800fe4e:	f9b3 2000 	ldrsh.w	r2, [r3]
 800fe52:	4b16      	ldr	r3, [pc, #88]	; (800feac <Load_Buf+0x1ac>)
 800fe54:	829a      	strh	r2, [r3, #20]
 800fe56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fe58:	1c9a      	adds	r2, r3, #2
 800fe5a:	627a      	str	r2, [r7, #36]	; 0x24
 800fe5c:	f9b3 2000 	ldrsh.w	r2, [r3]
 800fe60:	4b12      	ldr	r3, [pc, #72]	; (800feac <Load_Buf+0x1ac>)
 800fe62:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
 800fe66:	4b14      	ldr	r3, [pc, #80]	; (800feb8 <Load_Buf+0x1b8>)
 800fe68:	f9b3 3000 	ldrsh.w	r3, [r3]
 800fe6c:	f043 0301 	orr.w	r3, r3, #1
 800fe70:	b21a      	sxth	r2, r3
 800fe72:	4b11      	ldr	r3, [pc, #68]	; (800feb8 <Load_Buf+0x1b8>)
 800fe74:	801a      	strh	r2, [r3, #0]
 800fe76:	f004 fa51 	bl	801431c <DispStatus>
 800fe7a:	4b0c      	ldr	r3, [pc, #48]	; (800feac <Load_Buf+0x1ac>)
 800fe7c:	f9b3 311c 	ldrsh.w	r3, [r3, #284]	; 0x11c
 800fe80:	2b62      	cmp	r3, #98	; 0x62
 800fe82:	dc09      	bgt.n	800fe98 <Load_Buf+0x198>
 800fe84:	4b09      	ldr	r3, [pc, #36]	; (800feac <Load_Buf+0x1ac>)
 800fe86:	f9b3 311c 	ldrsh.w	r3, [r3, #284]	; 0x11c
 800fe8a:	b29b      	uxth	r3, r3
 800fe8c:	3301      	adds	r3, #1
 800fe8e:	b29b      	uxth	r3, r3
 800fe90:	b21a      	sxth	r2, r3
 800fe92:	4b06      	ldr	r3, [pc, #24]	; (800feac <Load_Buf+0x1ac>)
 800fe94:	f8a3 211c 	strh.w	r2, [r3, #284]	; 0x11c
 800fe98:	2300      	movs	r3, #0
 800fe9a:	4618      	mov	r0, r3
 800fe9c:	3738      	adds	r7, #56	; 0x38
 800fe9e:	46bd      	mov	sp, r7
 800fea0:	bd80      	pop	{r7, pc}
 800fea2:	bf00      	nop
 800fea4:	08000214 	.word	0x08000214
 800fea8:	200017d4 	.word	0x200017d4
 800feac:	20000298 	.word	0x20000298
 800feb0:	2000286c 	.word	0x2000286c
 800feb4:	200015d4 	.word	0x200015d4
 800feb8:	200007a0 	.word	0x200007a0

0800febc <Save_Buf>:
 800febc:	b580      	push	{r7, lr}
 800febe:	b08e      	sub	sp, #56	; 0x38
 800fec0:	af00      	add	r7, sp, #0
 800fec2:	4603      	mov	r3, r0
 800fec4:	80fb      	strh	r3, [r7, #6]
 800fec6:	4a64      	ldr	r2, [pc, #400]	; (8010058 <Save_Buf+0x19c>)
 800fec8:	f107 0318 	add.w	r3, r7, #24
 800fecc:	ca07      	ldmia	r2, {r0, r1, r2}
 800fece:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800fed2:	2300      	movs	r3, #0
 800fed4:	637b      	str	r3, [r7, #52]	; 0x34
 800fed6:	2304      	movs	r3, #4
 800fed8:	62fb      	str	r3, [r7, #44]	; 0x2c
 800feda:	2300      	movs	r3, #0
 800fedc:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800fee0:	2302      	movs	r3, #2
 800fee2:	863b      	strh	r3, [r7, #48]	; 0x30
 800fee4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800fee8:	857b      	strh	r3, [r7, #42]	; 0x2a
 800feea:	4b5c      	ldr	r3, [pc, #368]	; (801005c <Save_Buf+0x1a0>)
 800feec:	f9b3 304c 	ldrsh.w	r3, [r3, #76]	; 0x4c
 800fef0:	2b03      	cmp	r3, #3
 800fef2:	d101      	bne.n	800fef8 <Save_Buf+0x3c>
 800fef4:	2304      	movs	r3, #4
 800fef6:	863b      	strh	r3, [r7, #48]	; 0x30
 800fef8:	f107 0218 	add.w	r2, r7, #24
 800fefc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800ff00:	4611      	mov	r1, r2
 800ff02:	4618      	mov	r0, r3
 800ff04:	f7ff fd8c 	bl	800fa20 <Make_Filename>
 800ff08:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800ff0c:	2100      	movs	r1, #0
 800ff0e:	4854      	ldr	r0, [pc, #336]	; (8010060 <Save_Buf+0x1a4>)
 800ff10:	f012 fea2 	bl	8022c58 <memset>
 800ff14:	f107 030c 	add.w	r3, r7, #12
 800ff18:	f107 0210 	add.w	r2, r7, #16
 800ff1c:	f107 0118 	add.w	r1, r7, #24
 800ff20:	484f      	ldr	r0, [pc, #316]	; (8010060 <Save_Buf+0x1a4>)
 800ff22:	f7ff fae3 	bl	800f4ec <OpenFileWr>
 800ff26:	4603      	mov	r3, r0
 800ff28:	2b00      	cmp	r3, #0
 800ff2a:	d002      	beq.n	800ff32 <Save_Buf+0x76>
 800ff2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ff2e:	b2db      	uxtb	r3, r3
 800ff30:	e08e      	b.n	8010050 <Save_Buf+0x194>
 800ff32:	2300      	movs	r3, #0
 800ff34:	637b      	str	r3, [r7, #52]	; 0x34
 800ff36:	e02f      	b.n	800ff98 <Save_Buf+0xdc>
 800ff38:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 800ff3c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ff3e:	fb02 f303 	mul.w	r3, r2, r3
 800ff42:	0fda      	lsrs	r2, r3, #31
 800ff44:	4413      	add	r3, r2
 800ff46:	105b      	asrs	r3, r3, #1
 800ff48:	3302      	adds	r3, #2
 800ff4a:	005b      	lsls	r3, r3, #1
 800ff4c:	4a45      	ldr	r2, [pc, #276]	; (8010064 <Save_Buf+0x1a8>)
 800ff4e:	4413      	add	r3, r2
 800ff50:	f9b7 202a 	ldrsh.w	r2, [r7, #42]	; 0x2a
 800ff54:	4619      	mov	r1, r3
 800ff56:	4842      	ldr	r0, [pc, #264]	; (8010060 <Save_Buf+0x1a4>)
 800ff58:	f012 fe70 	bl	8022c3c <memcpy>
 800ff5c:	f107 0310 	add.w	r3, r7, #16
 800ff60:	4619      	mov	r1, r3
 800ff62:	483f      	ldr	r0, [pc, #252]	; (8010060 <Save_Buf+0x1a4>)
 800ff64:	f7ff f9ea 	bl	800f33c <ProgFileSec>
 800ff68:	4603      	mov	r3, r0
 800ff6a:	2b00      	cmp	r3, #0
 800ff6c:	d001      	beq.n	800ff72 <Save_Buf+0xb6>
 800ff6e:	2303      	movs	r3, #3
 800ff70:	e06e      	b.n	8010050 <Save_Buf+0x194>
 800ff72:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800ff76:	1c5a      	adds	r2, r3, #1
 800ff78:	f887 2033 	strb.w	r2, [r7, #51]	; 0x33
 800ff7c:	085b      	lsrs	r3, r3, #1
 800ff7e:	b2db      	uxtb	r3, r3
 800ff80:	f003 0303 	and.w	r3, r3, #3
 800ff84:	b2db      	uxtb	r3, r3
 800ff86:	461a      	mov	r2, r3
 800ff88:	2102      	movs	r1, #2
 800ff8a:	f44f 7084 	mov.w	r0, #264	; 0x108
 800ff8e:	f7ff fb8f 	bl	800f6b0 <PrintClk>
 800ff92:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ff94:	3301      	adds	r3, #1
 800ff96:	637b      	str	r3, [r7, #52]	; 0x34
 800ff98:	f9b7 3030 	ldrsh.w	r3, [r7, #48]	; 0x30
 800ff9c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ff9e:	429a      	cmp	r2, r3
 800ffa0:	dbca      	blt.n	800ff38 <Save_Buf+0x7c>
 800ffa2:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 800ffa6:	461a      	mov	r2, r3
 800ffa8:	2100      	movs	r1, #0
 800ffaa:	482d      	ldr	r0, [pc, #180]	; (8010060 <Save_Buf+0x1a4>)
 800ffac:	f012 fe54 	bl	8022c58 <memset>
 800ffb0:	4b2b      	ldr	r3, [pc, #172]	; (8010060 <Save_Buf+0x1a4>)
 800ffb2:	627b      	str	r3, [r7, #36]	; 0x24
 800ffb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ffb6:	1c9a      	adds	r2, r3, #2
 800ffb8:	627a      	str	r2, [r7, #36]	; 0x24
 800ffba:	4a2a      	ldr	r2, [pc, #168]	; (8010064 <Save_Buf+0x1a8>)
 800ffbc:	f9b2 2000 	ldrsh.w	r2, [r2]
 800ffc0:	801a      	strh	r2, [r3, #0]
 800ffc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ffc4:	1c9a      	adds	r2, r3, #2
 800ffc6:	627a      	str	r2, [r7, #36]	; 0x24
 800ffc8:	4a26      	ldr	r2, [pc, #152]	; (8010064 <Save_Buf+0x1a8>)
 800ffca:	f9b2 2002 	ldrsh.w	r2, [r2, #2]
 800ffce:	801a      	strh	r2, [r3, #0]
 800ffd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ffd2:	1c9a      	adds	r2, r3, #2
 800ffd4:	627a      	str	r2, [r7, #36]	; 0x24
 800ffd6:	4a21      	ldr	r2, [pc, #132]	; (801005c <Save_Buf+0x1a0>)
 800ffd8:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 800ffdc:	801a      	strh	r2, [r3, #0]
 800ffde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ffe0:	1c9a      	adds	r2, r3, #2
 800ffe2:	627a      	str	r2, [r7, #36]	; 0x24
 800ffe4:	4a1d      	ldr	r2, [pc, #116]	; (801005c <Save_Buf+0x1a0>)
 800ffe6:	f9b2 2014 	ldrsh.w	r2, [r2, #20]
 800ffea:	801a      	strh	r2, [r3, #0]
 800ffec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ffee:	1c9a      	adds	r2, r3, #2
 800fff0:	627a      	str	r2, [r7, #36]	; 0x24
 800fff2:	4a1a      	ldr	r2, [pc, #104]	; (801005c <Save_Buf+0x1a0>)
 800fff4:	f9b2 204c 	ldrsh.w	r2, [r2, #76]	; 0x4c
 800fff8:	801a      	strh	r2, [r3, #0]
 800fffa:	f107 0310 	add.w	r3, r7, #16
 800fffe:	4619      	mov	r1, r3
 8010000:	4817      	ldr	r0, [pc, #92]	; (8010060 <Save_Buf+0x1a4>)
 8010002:	f7ff f99b 	bl	800f33c <ProgFileSec>
 8010006:	4603      	mov	r3, r0
 8010008:	2b00      	cmp	r3, #0
 801000a:	d001      	beq.n	8010010 <Save_Buf+0x154>
 801000c:	2303      	movs	r3, #3
 801000e:	e01f      	b.n	8010050 <Save_Buf+0x194>
 8010010:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8010014:	f503 5100 	add.w	r1, r3, #8192	; 0x2000
 8010018:	f107 030c 	add.w	r3, r7, #12
 801001c:	f107 0210 	add.w	r2, r7, #16
 8010020:	480f      	ldr	r0, [pc, #60]	; (8010060 <Save_Buf+0x1a4>)
 8010022:	f7ff f9ff 	bl	800f424 <CloseFile>
 8010026:	4603      	mov	r3, r0
 8010028:	2b00      	cmp	r3, #0
 801002a:	d001      	beq.n	8010030 <Save_Buf+0x174>
 801002c:	2303      	movs	r3, #3
 801002e:	e00f      	b.n	8010050 <Save_Buf+0x194>
 8010030:	4b0a      	ldr	r3, [pc, #40]	; (801005c <Save_Buf+0x1a0>)
 8010032:	f9b3 30fc 	ldrsh.w	r3, [r3, #252]	; 0xfc
 8010036:	2b62      	cmp	r3, #98	; 0x62
 8010038:	dc09      	bgt.n	801004e <Save_Buf+0x192>
 801003a:	4b08      	ldr	r3, [pc, #32]	; (801005c <Save_Buf+0x1a0>)
 801003c:	f9b3 30fc 	ldrsh.w	r3, [r3, #252]	; 0xfc
 8010040:	b29b      	uxth	r3, r3
 8010042:	3301      	adds	r3, #1
 8010044:	b29b      	uxth	r3, r3
 8010046:	b21a      	sxth	r2, r3
 8010048:	4b04      	ldr	r3, [pc, #16]	; (801005c <Save_Buf+0x1a0>)
 801004a:	f8a3 20fc 	strh.w	r2, [r3, #252]	; 0xfc
 801004e:	2300      	movs	r3, #0
 8010050:	4618      	mov	r0, r3
 8010052:	3738      	adds	r7, #56	; 0x38
 8010054:	46bd      	mov	sp, r7
 8010056:	bd80      	pop	{r7, pc}
 8010058:	08000214 	.word	0x08000214
 801005c:	20000298 	.word	0x20000298
 8010060:	200017d4 	.word	0x200017d4
 8010064:	2000286c 	.word	0x2000286c

08010068 <Save_Dat>:
 8010068:	b580      	push	{r7, lr}
 801006a:	b08a      	sub	sp, #40	; 0x28
 801006c:	af00      	add	r7, sp, #0
 801006e:	4603      	mov	r3, r0
 8010070:	80fb      	strh	r3, [r7, #6]
 8010072:	4a42      	ldr	r2, [pc, #264]	; (801017c <Save_Dat+0x114>)
 8010074:	f107 0318 	add.w	r3, r7, #24
 8010078:	ca07      	ldmia	r2, {r0, r1, r2}
 801007a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 801007e:	2304      	movs	r3, #4
 8010080:	84fb      	strh	r3, [r7, #38]	; 0x26
 8010082:	f107 0218 	add.w	r2, r7, #24
 8010086:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801008a:	4611      	mov	r1, r2
 801008c:	4618      	mov	r0, r3
 801008e:	f7ff fcc7 	bl	800fa20 <Make_Filename>
 8010092:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8010096:	2100      	movs	r1, #0
 8010098:	4839      	ldr	r0, [pc, #228]	; (8010180 <Save_Dat+0x118>)
 801009a:	f012 fddd 	bl	8022c58 <memset>
 801009e:	f107 030c 	add.w	r3, r7, #12
 80100a2:	f107 0210 	add.w	r2, r7, #16
 80100a6:	f107 0118 	add.w	r1, r7, #24
 80100aa:	4835      	ldr	r0, [pc, #212]	; (8010180 <Save_Dat+0x118>)
 80100ac:	f7ff fa1e 	bl	800f4ec <OpenFileWr>
 80100b0:	4603      	mov	r3, r0
 80100b2:	2b00      	cmp	r3, #0
 80100b4:	d002      	beq.n	80100bc <Save_Dat+0x54>
 80100b6:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80100b8:	b2db      	uxtb	r3, r3
 80100ba:	e05b      	b.n	8010174 <Save_Dat+0x10c>
 80100bc:	4b30      	ldr	r3, [pc, #192]	; (8010180 <Save_Dat+0x118>)
 80100be:	2201      	movs	r2, #1
 80100c0:	701a      	strb	r2, [r3, #0]
 80100c2:	4b30      	ldr	r3, [pc, #192]	; (8010184 <Save_Dat+0x11c>)
 80100c4:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 80100c8:	b2da      	uxtb	r2, r3
 80100ca:	4b2d      	ldr	r3, [pc, #180]	; (8010180 <Save_Dat+0x118>)
 80100cc:	705a      	strb	r2, [r3, #1]
 80100ce:	4b2d      	ldr	r3, [pc, #180]	; (8010184 <Save_Dat+0x11c>)
 80100d0:	f9b3 30dc 	ldrsh.w	r3, [r3, #220]	; 0xdc
 80100d4:	b2da      	uxtb	r2, r3
 80100d6:	4b2a      	ldr	r3, [pc, #168]	; (8010180 <Save_Dat+0x118>)
 80100d8:	709a      	strb	r2, [r3, #2]
 80100da:	4b2a      	ldr	r3, [pc, #168]	; (8010184 <Save_Dat+0x11c>)
 80100dc:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 80100e0:	b2da      	uxtb	r2, r3
 80100e2:	4b27      	ldr	r3, [pc, #156]	; (8010180 <Save_Dat+0x118>)
 80100e4:	70da      	strb	r2, [r3, #3]
 80100e6:	4b27      	ldr	r3, [pc, #156]	; (8010184 <Save_Dat+0x11c>)
 80100e8:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80100ec:	b2da      	uxtb	r2, r3
 80100ee:	4b24      	ldr	r3, [pc, #144]	; (8010180 <Save_Dat+0x118>)
 80100f0:	711a      	strb	r2, [r3, #4]
 80100f2:	4b24      	ldr	r3, [pc, #144]	; (8010184 <Save_Dat+0x11c>)
 80100f4:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 80100f8:	b2da      	uxtb	r2, r3
 80100fa:	4b21      	ldr	r3, [pc, #132]	; (8010180 <Save_Dat+0x118>)
 80100fc:	715a      	strb	r2, [r3, #5]
 80100fe:	4b21      	ldr	r3, [pc, #132]	; (8010184 <Save_Dat+0x11c>)
 8010100:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8010104:	b2da      	uxtb	r2, r3
 8010106:	4b1e      	ldr	r3, [pc, #120]	; (8010180 <Save_Dat+0x118>)
 8010108:	719a      	strb	r2, [r3, #6]
 801010a:	4b1e      	ldr	r3, [pc, #120]	; (8010184 <Save_Dat+0x11c>)
 801010c:	f9b3 3074 	ldrsh.w	r3, [r3, #116]	; 0x74
 8010110:	b2da      	uxtb	r2, r3
 8010112:	4b1b      	ldr	r3, [pc, #108]	; (8010180 <Save_Dat+0x118>)
 8010114:	71da      	strb	r2, [r3, #7]
 8010116:	f44f 7296 	mov.w	r2, #300	; 0x12c
 801011a:	491b      	ldr	r1, [pc, #108]	; (8010188 <Save_Dat+0x120>)
 801011c:	481b      	ldr	r0, [pc, #108]	; (801018c <Save_Dat+0x124>)
 801011e:	f012 fd8d 	bl	8022c3c <memcpy>
 8010122:	f107 0310 	add.w	r3, r7, #16
 8010126:	4619      	mov	r1, r3
 8010128:	4815      	ldr	r0, [pc, #84]	; (8010180 <Save_Dat+0x118>)
 801012a:	f7ff f907 	bl	800f33c <ProgFileSec>
 801012e:	4603      	mov	r3, r0
 8010130:	2b00      	cmp	r3, #0
 8010132:	d001      	beq.n	8010138 <Save_Dat+0xd0>
 8010134:	2303      	movs	r3, #3
 8010136:	e01d      	b.n	8010174 <Save_Dat+0x10c>
 8010138:	f107 030c 	add.w	r3, r7, #12
 801013c:	f107 0210 	add.w	r2, r7, #16
 8010140:	f44f 7100 	mov.w	r1, #512	; 0x200
 8010144:	480e      	ldr	r0, [pc, #56]	; (8010180 <Save_Dat+0x118>)
 8010146:	f7ff f96d 	bl	800f424 <CloseFile>
 801014a:	4603      	mov	r3, r0
 801014c:	2b00      	cmp	r3, #0
 801014e:	d001      	beq.n	8010154 <Save_Dat+0xec>
 8010150:	2303      	movs	r3, #3
 8010152:	e00f      	b.n	8010174 <Save_Dat+0x10c>
 8010154:	4b0b      	ldr	r3, [pc, #44]	; (8010184 <Save_Dat+0x11c>)
 8010156:	f9b3 30f4 	ldrsh.w	r3, [r3, #244]	; 0xf4
 801015a:	2b62      	cmp	r3, #98	; 0x62
 801015c:	dc09      	bgt.n	8010172 <Save_Dat+0x10a>
 801015e:	4b09      	ldr	r3, [pc, #36]	; (8010184 <Save_Dat+0x11c>)
 8010160:	f9b3 30f4 	ldrsh.w	r3, [r3, #244]	; 0xf4
 8010164:	b29b      	uxth	r3, r3
 8010166:	3301      	adds	r3, #1
 8010168:	b29b      	uxth	r3, r3
 801016a:	b21a      	sxth	r2, r3
 801016c:	4b05      	ldr	r3, [pc, #20]	; (8010184 <Save_Dat+0x11c>)
 801016e:	f8a3 20f4 	strh.w	r2, [r3, #244]	; 0xf4
 8010172:	2300      	movs	r3, #0
 8010174:	4618      	mov	r0, r3
 8010176:	3728      	adds	r7, #40	; 0x28
 8010178:	46bd      	mov	sp, r7
 801017a:	bd80      	pop	{r7, pc}
 801017c:	08000208 	.word	0x08000208
 8010180:	200017d4 	.word	0x200017d4
 8010184:	20000298 	.word	0x20000298
 8010188:	20000c04 	.word	0x20000c04
 801018c:	200017de 	.word	0x200017de

08010190 <Load_Dat>:
 8010190:	b580      	push	{r7, lr}
 8010192:	b08a      	sub	sp, #40	; 0x28
 8010194:	af00      	add	r7, sp, #0
 8010196:	4603      	mov	r3, r0
 8010198:	80fb      	strh	r3, [r7, #6]
 801019a:	4a4f      	ldr	r2, [pc, #316]	; (80102d8 <Load_Dat+0x148>)
 801019c:	f107 0314 	add.w	r3, r7, #20
 80101a0:	ca07      	ldmia	r2, {r0, r1, r2}
 80101a2:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80101a6:	2300      	movs	r3, #0
 80101a8:	847b      	strh	r3, [r7, #34]	; 0x22
 80101aa:	f107 0214 	add.w	r2, r7, #20
 80101ae:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80101b2:	4611      	mov	r1, r2
 80101b4:	4618      	mov	r0, r3
 80101b6:	f7ff fc33 	bl	800fa20 <Make_Filename>
 80101ba:	f107 0308 	add.w	r3, r7, #8
 80101be:	f107 020c 	add.w	r2, r7, #12
 80101c2:	f107 0114 	add.w	r1, r7, #20
 80101c6:	4845      	ldr	r0, [pc, #276]	; (80102dc <Load_Dat+0x14c>)
 80101c8:	f7fe fec6 	bl	800ef58 <OpenFileRd>
 80101cc:	4603      	mov	r3, r0
 80101ce:	847b      	strh	r3, [r7, #34]	; 0x22
 80101d0:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 80101d4:	2b00      	cmp	r3, #0
 80101d6:	d002      	beq.n	80101de <Load_Dat+0x4e>
 80101d8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80101da:	b2db      	uxtb	r3, r3
 80101dc:	e077      	b.n	80102ce <Load_Dat+0x13e>
 80101de:	f107 030c 	add.w	r3, r7, #12
 80101e2:	4619      	mov	r1, r3
 80101e4:	483d      	ldr	r0, [pc, #244]	; (80102dc <Load_Dat+0x14c>)
 80101e6:	f7ff f8ef 	bl	800f3c8 <ReadFileSec>
 80101ea:	4603      	mov	r3, r0
 80101ec:	2b00      	cmp	r3, #0
 80101ee:	d001      	beq.n	80101f4 <Load_Dat+0x64>
 80101f0:	2303      	movs	r3, #3
 80101f2:	e06c      	b.n	80102ce <Load_Dat+0x13e>
 80101f4:	f44f 729b 	mov.w	r2, #310	; 0x136
 80101f8:	4938      	ldr	r1, [pc, #224]	; (80102dc <Load_Dat+0x14c>)
 80101fa:	4839      	ldr	r0, [pc, #228]	; (80102e0 <Load_Dat+0x150>)
 80101fc:	f012 fd1e 	bl	8022c3c <memcpy>
 8010200:	4b36      	ldr	r3, [pc, #216]	; (80102dc <Load_Dat+0x14c>)
 8010202:	78db      	ldrb	r3, [r3, #3]
 8010204:	b21a      	sxth	r2, r3
 8010206:	4b37      	ldr	r3, [pc, #220]	; (80102e4 <Load_Dat+0x154>)
 8010208:	879a      	strh	r2, [r3, #60]	; 0x3c
 801020a:	4b34      	ldr	r3, [pc, #208]	; (80102dc <Load_Dat+0x14c>)
 801020c:	791b      	ldrb	r3, [r3, #4]
 801020e:	b21a      	sxth	r2, r3
 8010210:	4b34      	ldr	r3, [pc, #208]	; (80102e4 <Load_Dat+0x154>)
 8010212:	809a      	strh	r2, [r3, #4]
 8010214:	4b31      	ldr	r3, [pc, #196]	; (80102dc <Load_Dat+0x14c>)
 8010216:	795b      	ldrb	r3, [r3, #5]
 8010218:	b21a      	sxth	r2, r3
 801021a:	4b32      	ldr	r3, [pc, #200]	; (80102e4 <Load_Dat+0x154>)
 801021c:	819a      	strh	r2, [r3, #12]
 801021e:	4b2f      	ldr	r3, [pc, #188]	; (80102dc <Load_Dat+0x14c>)
 8010220:	799b      	ldrb	r3, [r3, #6]
 8010222:	b21a      	sxth	r2, r3
 8010224:	4b2f      	ldr	r3, [pc, #188]	; (80102e4 <Load_Dat+0x154>)
 8010226:	829a      	strh	r2, [r3, #20]
 8010228:	4b2c      	ldr	r3, [pc, #176]	; (80102dc <Load_Dat+0x14c>)
 801022a:	79db      	ldrb	r3, [r3, #7]
 801022c:	b21a      	sxth	r2, r3
 801022e:	4b2d      	ldr	r3, [pc, #180]	; (80102e4 <Load_Dat+0x154>)
 8010230:	f8a3 2074 	strh.w	r2, [r3, #116]	; 0x74
 8010234:	2300      	movs	r3, #0
 8010236:	627b      	str	r3, [r7, #36]	; 0x24
 8010238:	e010      	b.n	801025c <Load_Dat+0xcc>
 801023a:	4a2a      	ldr	r2, [pc, #168]	; (80102e4 <Load_Dat+0x154>)
 801023c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801023e:	00db      	lsls	r3, r3, #3
 8010240:	4413      	add	r3, r2
 8010242:	799b      	ldrb	r3, [r3, #6]
 8010244:	f043 0320 	orr.w	r3, r3, #32
 8010248:	b2d9      	uxtb	r1, r3
 801024a:	4a26      	ldr	r2, [pc, #152]	; (80102e4 <Load_Dat+0x154>)
 801024c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801024e:	00db      	lsls	r3, r3, #3
 8010250:	4413      	add	r3, r2
 8010252:	460a      	mov	r2, r1
 8010254:	719a      	strb	r2, [r3, #6]
 8010256:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010258:	3301      	adds	r3, #1
 801025a:	627b      	str	r3, [r7, #36]	; 0x24
 801025c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801025e:	2b03      	cmp	r3, #3
 8010260:	ddeb      	ble.n	801023a <Load_Dat+0xaa>
 8010262:	4b20      	ldr	r3, [pc, #128]	; (80102e4 <Load_Dat+0x154>)
 8010264:	f893 30d6 	ldrb.w	r3, [r3, #214]	; 0xd6
 8010268:	f043 0320 	orr.w	r3, r3, #32
 801026c:	b2da      	uxtb	r2, r3
 801026e:	4b1d      	ldr	r3, [pc, #116]	; (80102e4 <Load_Dat+0x154>)
 8010270:	f883 20d6 	strb.w	r2, [r3, #214]	; 0xd6
 8010274:	4b1b      	ldr	r3, [pc, #108]	; (80102e4 <Load_Dat+0x154>)
 8010276:	f893 30de 	ldrb.w	r3, [r3, #222]	; 0xde
 801027a:	f043 0320 	orr.w	r3, r3, #32
 801027e:	b2da      	uxtb	r2, r3
 8010280:	4b18      	ldr	r3, [pc, #96]	; (80102e4 <Load_Dat+0x154>)
 8010282:	f883 20de 	strb.w	r2, [r3, #222]	; 0xde
 8010286:	4b17      	ldr	r3, [pc, #92]	; (80102e4 <Load_Dat+0x154>)
 8010288:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 801028c:	f043 0320 	orr.w	r3, r3, #32
 8010290:	b2da      	uxtb	r2, r3
 8010292:	4b14      	ldr	r3, [pc, #80]	; (80102e4 <Load_Dat+0x154>)
 8010294:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8010298:	4b12      	ldr	r3, [pc, #72]	; (80102e4 <Load_Dat+0x154>)
 801029a:	f893 3076 	ldrb.w	r3, [r3, #118]	; 0x76
 801029e:	f043 0320 	orr.w	r3, r3, #32
 80102a2:	b2da      	uxtb	r2, r3
 80102a4:	4b0f      	ldr	r3, [pc, #60]	; (80102e4 <Load_Dat+0x154>)
 80102a6:	f883 2076 	strb.w	r2, [r3, #118]	; 0x76
 80102aa:	f002 ffab 	bl	8013204 <Update_Detail>
 80102ae:	4b0d      	ldr	r3, [pc, #52]	; (80102e4 <Load_Dat+0x154>)
 80102b0:	f9b3 3114 	ldrsh.w	r3, [r3, #276]	; 0x114
 80102b4:	2b62      	cmp	r3, #98	; 0x62
 80102b6:	dc09      	bgt.n	80102cc <Load_Dat+0x13c>
 80102b8:	4b0a      	ldr	r3, [pc, #40]	; (80102e4 <Load_Dat+0x154>)
 80102ba:	f9b3 3114 	ldrsh.w	r3, [r3, #276]	; 0x114
 80102be:	b29b      	uxth	r3, r3
 80102c0:	3301      	adds	r3, #1
 80102c2:	b29b      	uxth	r3, r3
 80102c4:	b21a      	sxth	r2, r3
 80102c6:	4b07      	ldr	r3, [pc, #28]	; (80102e4 <Load_Dat+0x154>)
 80102c8:	f8a3 2114 	strh.w	r2, [r3, #276]	; 0x114
 80102cc:	2300      	movs	r3, #0
 80102ce:	4618      	mov	r0, r3
 80102d0:	3728      	adds	r7, #40	; 0x28
 80102d2:	46bd      	mov	sp, r7
 80102d4:	bd80      	pop	{r7, pc}
 80102d6:	bf00      	nop
 80102d8:	08000208 	.word	0x08000208
 80102dc:	200017d4 	.word	0x200017d4
 80102e0:	20000008 	.word	0x20000008
 80102e4:	20000298 	.word	0x20000298

080102e8 <Save_Bmp>:
 80102e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80102ea:	b08f      	sub	sp, #60	; 0x3c
 80102ec:	af00      	add	r7, sp, #0
 80102ee:	4603      	mov	r3, r0
 80102f0:	80fb      	strh	r3, [r7, #6]
 80102f2:	4aaa      	ldr	r2, [pc, #680]	; (801059c <Save_Bmp+0x2b4>)
 80102f4:	f107 0314 	add.w	r3, r7, #20
 80102f8:	ca07      	ldmia	r2, {r0, r1, r2}
 80102fa:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80102fe:	2304      	movs	r3, #4
 8010300:	62bb      	str	r3, [r7, #40]	; 0x28
 8010302:	2336      	movs	r3, #54	; 0x36
 8010304:	867b      	strh	r3, [r7, #50]	; 0x32
 8010306:	2300      	movs	r3, #0
 8010308:	85fb      	strh	r3, [r7, #46]	; 0x2e
 801030a:	2300      	movs	r3, #0
 801030c:	85bb      	strh	r3, [r7, #44]	; 0x2c
 801030e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8010312:	627b      	str	r3, [r7, #36]	; 0x24
 8010314:	4ba2      	ldr	r3, [pc, #648]	; (80105a0 <Save_Bmp+0x2b8>)
 8010316:	f9b3 3000 	ldrsh.w	r3, [r3]
 801031a:	2b05      	cmp	r3, #5
 801031c:	d105      	bne.n	801032a <Save_Bmp+0x42>
 801031e:	f7fe f9c5 	bl	800e6ac <Close_Pop>
 8010322:	49a0      	ldr	r1, [pc, #640]	; (80105a4 <Save_Bmp+0x2bc>)
 8010324:	48a0      	ldr	r0, [pc, #640]	; (80105a8 <Save_Bmp+0x2c0>)
 8010326:	f7fd f9c1 	bl	800d6ac <DrawWindow>
 801032a:	f107 0214 	add.w	r2, r7, #20
 801032e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8010332:	4611      	mov	r1, r2
 8010334:	4618      	mov	r0, r3
 8010336:	f7ff fb73 	bl	800fa20 <Make_Filename>
 801033a:	f107 0308 	add.w	r3, r7, #8
 801033e:	f107 020c 	add.w	r2, r7, #12
 8010342:	f107 0114 	add.w	r1, r7, #20
 8010346:	4899      	ldr	r0, [pc, #612]	; (80105ac <Save_Bmp+0x2c4>)
 8010348:	f7ff f8d0 	bl	800f4ec <OpenFileWr>
 801034c:	4603      	mov	r3, r0
 801034e:	2b00      	cmp	r3, #0
 8010350:	d002      	beq.n	8010358 <Save_Bmp+0x70>
 8010352:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010354:	b2db      	uxtb	r3, r3
 8010356:	e11c      	b.n	8010592 <Save_Bmp+0x2aa>
 8010358:	4b94      	ldr	r3, [pc, #592]	; (80105ac <Save_Bmp+0x2c4>)
 801035a:	4a95      	ldr	r2, [pc, #596]	; (80105b0 <Save_Bmp+0x2c8>)
 801035c:	4614      	mov	r4, r2
 801035e:	469c      	mov	ip, r3
 8010360:	f104 0e30 	add.w	lr, r4, #48	; 0x30
 8010364:	4665      	mov	r5, ip
 8010366:	4626      	mov	r6, r4
 8010368:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 801036a:	6028      	str	r0, [r5, #0]
 801036c:	6069      	str	r1, [r5, #4]
 801036e:	60aa      	str	r2, [r5, #8]
 8010370:	60eb      	str	r3, [r5, #12]
 8010372:	3410      	adds	r4, #16
 8010374:	f10c 0c10 	add.w	ip, ip, #16
 8010378:	4574      	cmp	r4, lr
 801037a:	d1f3      	bne.n	8010364 <Save_Bmp+0x7c>
 801037c:	4663      	mov	r3, ip
 801037e:	4622      	mov	r2, r4
 8010380:	6810      	ldr	r0, [r2, #0]
 8010382:	6018      	str	r0, [r3, #0]
 8010384:	8892      	ldrh	r2, [r2, #4]
 8010386:	809a      	strh	r2, [r3, #4]
 8010388:	2336      	movs	r3, #54	; 0x36
 801038a:	867b      	strh	r3, [r7, #50]	; 0x32
 801038c:	2300      	movs	r3, #0
 801038e:	863b      	strh	r3, [r7, #48]	; 0x30
 8010390:	e042      	b.n	8010418 <Save_Bmp+0x130>
 8010392:	f9b7 3030 	ldrsh.w	r3, [r7, #48]	; 0x30
 8010396:	4a87      	ldr	r2, [pc, #540]	; (80105b4 <Save_Bmp+0x2cc>)
 8010398:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801039c:	121b      	asrs	r3, r3, #8
 801039e:	b2da      	uxtb	r2, r3
 80103a0:	f9b7 3030 	ldrsh.w	r3, [r7, #48]	; 0x30
 80103a4:	0099      	lsls	r1, r3, #2
 80103a6:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 80103aa:	440b      	add	r3, r1
 80103ac:	f022 0207 	bic.w	r2, r2, #7
 80103b0:	b2d1      	uxtb	r1, r2
 80103b2:	4a7e      	ldr	r2, [pc, #504]	; (80105ac <Save_Bmp+0x2c4>)
 80103b4:	54d1      	strb	r1, [r2, r3]
 80103b6:	f9b7 3030 	ldrsh.w	r3, [r7, #48]	; 0x30
 80103ba:	4a7e      	ldr	r2, [pc, #504]	; (80105b4 <Save_Bmp+0x2cc>)
 80103bc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80103c0:	10db      	asrs	r3, r3, #3
 80103c2:	b2da      	uxtb	r2, r3
 80103c4:	f9b7 3030 	ldrsh.w	r3, [r7, #48]	; 0x30
 80103c8:	0099      	lsls	r1, r3, #2
 80103ca:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 80103ce:	440b      	add	r3, r1
 80103d0:	3301      	adds	r3, #1
 80103d2:	f022 0203 	bic.w	r2, r2, #3
 80103d6:	b2d1      	uxtb	r1, r2
 80103d8:	4a74      	ldr	r2, [pc, #464]	; (80105ac <Save_Bmp+0x2c4>)
 80103da:	54d1      	strb	r1, [r2, r3]
 80103dc:	f9b7 3030 	ldrsh.w	r3, [r7, #48]	; 0x30
 80103e0:	4a74      	ldr	r2, [pc, #464]	; (80105b4 <Save_Bmp+0x2cc>)
 80103e2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80103e6:	00d9      	lsls	r1, r3, #3
 80103e8:	f9b7 3030 	ldrsh.w	r3, [r7, #48]	; 0x30
 80103ec:	009a      	lsls	r2, r3, #2
 80103ee:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 80103f2:	4413      	add	r3, r2
 80103f4:	3302      	adds	r3, #2
 80103f6:	b2c9      	uxtb	r1, r1
 80103f8:	4a6c      	ldr	r2, [pc, #432]	; (80105ac <Save_Bmp+0x2c4>)
 80103fa:	54d1      	strb	r1, [r2, r3]
 80103fc:	f9b7 3030 	ldrsh.w	r3, [r7, #48]	; 0x30
 8010400:	009a      	lsls	r2, r3, #2
 8010402:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 8010406:	4413      	add	r3, r2
 8010408:	3303      	adds	r3, #3
 801040a:	4a68      	ldr	r2, [pc, #416]	; (80105ac <Save_Bmp+0x2c4>)
 801040c:	2100      	movs	r1, #0
 801040e:	54d1      	strb	r1, [r2, r3]
 8010410:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8010412:	3301      	adds	r3, #1
 8010414:	b29b      	uxth	r3, r3
 8010416:	863b      	strh	r3, [r7, #48]	; 0x30
 8010418:	f9b7 3030 	ldrsh.w	r3, [r7, #48]	; 0x30
 801041c:	2b0f      	cmp	r3, #15
 801041e:	ddb8      	ble.n	8010392 <Save_Bmp+0xaa>
 8010420:	2376      	movs	r3, #118	; 0x76
 8010422:	867b      	strh	r3, [r7, #50]	; 0x32
 8010424:	2300      	movs	r3, #0
 8010426:	86bb      	strh	r3, [r7, #52]	; 0x34
 8010428:	e079      	b.n	801051e <Save_Bmp+0x236>
 801042a:	2300      	movs	r3, #0
 801042c:	86fb      	strh	r3, [r7, #54]	; 0x36
 801042e:	e06b      	b.n	8010508 <Save_Bmp+0x220>
 8010430:	f9b7 2034 	ldrsh.w	r2, [r7, #52]	; 0x34
 8010434:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 8010438:	4611      	mov	r1, r2
 801043a:	4618      	mov	r0, r3
 801043c:	f001 fe62 	bl	8012104 <LCD_Set_Posi>
 8010440:	f001 fed6 	bl	80121f0 <LCD_Get_Pixel>
 8010444:	4603      	mov	r3, r0
 8010446:	847b      	strh	r3, [r7, #34]	; 0x22
 8010448:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 801044a:	3301      	adds	r3, #1
 801044c:	b29b      	uxth	r3, r3
 801044e:	b21b      	sxth	r3, r3
 8010450:	f9b7 2034 	ldrsh.w	r2, [r7, #52]	; 0x34
 8010454:	4611      	mov	r1, r2
 8010456:	4618      	mov	r0, r3
 8010458:	f001 fe54 	bl	8012104 <LCD_Set_Posi>
 801045c:	f001 fec8 	bl	80121f0 <LCD_Get_Pixel>
 8010460:	4603      	mov	r3, r0
 8010462:	843b      	strh	r3, [r7, #32]
 8010464:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8010468:	4618      	mov	r0, r3
 801046a:	f7ff f8a1 	bl	800f5b0 <Color_Num>
 801046e:	4603      	mov	r3, r0
 8010470:	011b      	lsls	r3, r3, #4
 8010472:	b2dc      	uxtb	r4, r3
 8010474:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8010478:	4618      	mov	r0, r3
 801047a:	f7ff f899 	bl	800f5b0 <Color_Num>
 801047e:	4603      	mov	r3, r0
 8010480:	461a      	mov	r2, r3
 8010482:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 8010486:	4422      	add	r2, r4
 8010488:	b2d1      	uxtb	r1, r2
 801048a:	4a48      	ldr	r2, [pc, #288]	; (80105ac <Save_Bmp+0x2c4>)
 801048c:	54d1      	strb	r1, [r2, r3]
 801048e:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 8010492:	b29b      	uxth	r3, r3
 8010494:	3301      	adds	r3, #1
 8010496:	b29b      	uxth	r3, r3
 8010498:	867b      	strh	r3, [r7, #50]	; 0x32
 801049a:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 801049e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80104a0:	429a      	cmp	r2, r3
 80104a2:	dc2d      	bgt.n	8010500 <Save_Bmp+0x218>
 80104a4:	2300      	movs	r3, #0
 80104a6:	867b      	strh	r3, [r7, #50]	; 0x32
 80104a8:	f107 030c 	add.w	r3, r7, #12
 80104ac:	4619      	mov	r1, r3
 80104ae:	483f      	ldr	r0, [pc, #252]	; (80105ac <Save_Bmp+0x2c4>)
 80104b0:	f7fe ff44 	bl	800f33c <ProgFileSec>
 80104b4:	4603      	mov	r3, r0
 80104b6:	2b00      	cmp	r3, #0
 80104b8:	d001      	beq.n	80104be <Save_Bmp+0x1d6>
 80104ba:	2303      	movs	r3, #3
 80104bc:	e069      	b.n	8010592 <Save_Bmp+0x2aa>
 80104be:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	; 0x2c
 80104c2:	2b00      	cmp	r3, #0
 80104c4:	d110      	bne.n	80104e8 <Save_Bmp+0x200>
 80104c6:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 80104ca:	b29a      	uxth	r2, r3
 80104cc:	3201      	adds	r2, #1
 80104ce:	b292      	uxth	r2, r2
 80104d0:	85fa      	strh	r2, [r7, #46]	; 0x2e
 80104d2:	105b      	asrs	r3, r3, #1
 80104d4:	b21b      	sxth	r3, r3
 80104d6:	b2db      	uxtb	r3, r3
 80104d8:	f003 0303 	and.w	r3, r3, #3
 80104dc:	b2db      	uxtb	r3, r3
 80104de:	461a      	mov	r2, r3
 80104e0:	2102      	movs	r1, #2
 80104e2:	20a8      	movs	r0, #168	; 0xa8
 80104e4:	f7ff f8e4 	bl	800f6b0 <PrintClk>
 80104e8:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	; 0x2c
 80104ec:	b29b      	uxth	r3, r3
 80104ee:	3301      	adds	r3, #1
 80104f0:	b29b      	uxth	r3, r3
 80104f2:	85bb      	strh	r3, [r7, #44]	; 0x2c
 80104f4:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	; 0x2c
 80104f8:	2b01      	cmp	r3, #1
 80104fa:	dd01      	ble.n	8010500 <Save_Bmp+0x218>
 80104fc:	2300      	movs	r3, #0
 80104fe:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8010500:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8010502:	3302      	adds	r3, #2
 8010504:	b29b      	uxth	r3, r3
 8010506:	86fb      	strh	r3, [r7, #54]	; 0x36
 8010508:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 801050c:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8010510:	db8e      	blt.n	8010430 <Save_Bmp+0x148>
 8010512:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	; 0x34
 8010516:	b29b      	uxth	r3, r3
 8010518:	3301      	adds	r3, #1
 801051a:	b29b      	uxth	r3, r3
 801051c:	86bb      	strh	r3, [r7, #52]	; 0x34
 801051e:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	; 0x34
 8010522:	2bef      	cmp	r3, #239	; 0xef
 8010524:	dd81      	ble.n	801042a <Save_Bmp+0x142>
 8010526:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 801052a:	2b00      	cmp	r3, #0
 801052c:	d00c      	beq.n	8010548 <Save_Bmp+0x260>
 801052e:	f107 030c 	add.w	r3, r7, #12
 8010532:	4619      	mov	r1, r3
 8010534:	481d      	ldr	r0, [pc, #116]	; (80105ac <Save_Bmp+0x2c4>)
 8010536:	f7fe ff01 	bl	800f33c <ProgFileSec>
 801053a:	4603      	mov	r3, r0
 801053c:	2b00      	cmp	r3, #0
 801053e:	d003      	beq.n	8010548 <Save_Bmp+0x260>
 8010540:	f7fe f8ca 	bl	800e6d8 <List_Pop>
 8010544:	2303      	movs	r3, #3
 8010546:	e024      	b.n	8010592 <Save_Bmp+0x2aa>
 8010548:	f107 0308 	add.w	r3, r7, #8
 801054c:	f107 020c 	add.w	r2, r7, #12
 8010550:	f44f 4118 	mov.w	r1, #38912	; 0x9800
 8010554:	4815      	ldr	r0, [pc, #84]	; (80105ac <Save_Bmp+0x2c4>)
 8010556:	f7fe ff65 	bl	800f424 <CloseFile>
 801055a:	4603      	mov	r3, r0
 801055c:	2b00      	cmp	r3, #0
 801055e:	d001      	beq.n	8010564 <Save_Bmp+0x27c>
 8010560:	2303      	movs	r3, #3
 8010562:	e016      	b.n	8010592 <Save_Bmp+0x2aa>
 8010564:	4b0e      	ldr	r3, [pc, #56]	; (80105a0 <Save_Bmp+0x2b8>)
 8010566:	f9b3 3000 	ldrsh.w	r3, [r3]
 801056a:	2b05      	cmp	r3, #5
 801056c:	d101      	bne.n	8010572 <Save_Bmp+0x28a>
 801056e:	f7fe f8b3 	bl	800e6d8 <List_Pop>
 8010572:	4b11      	ldr	r3, [pc, #68]	; (80105b8 <Save_Bmp+0x2d0>)
 8010574:	f9b3 30ec 	ldrsh.w	r3, [r3, #236]	; 0xec
 8010578:	2b62      	cmp	r3, #98	; 0x62
 801057a:	dc09      	bgt.n	8010590 <Save_Bmp+0x2a8>
 801057c:	4b0e      	ldr	r3, [pc, #56]	; (80105b8 <Save_Bmp+0x2d0>)
 801057e:	f9b3 30ec 	ldrsh.w	r3, [r3, #236]	; 0xec
 8010582:	b29b      	uxth	r3, r3
 8010584:	3301      	adds	r3, #1
 8010586:	b29b      	uxth	r3, r3
 8010588:	b21a      	sxth	r2, r3
 801058a:	4b0b      	ldr	r3, [pc, #44]	; (80105b8 <Save_Bmp+0x2d0>)
 801058c:	f8a3 20ec 	strh.w	r2, [r3, #236]	; 0xec
 8010590:	2300      	movs	r3, #0
 8010592:	4618      	mov	r0, r3
 8010594:	373c      	adds	r7, #60	; 0x3c
 8010596:	46bd      	mov	sp, r7
 8010598:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801059a:	bf00      	nop
 801059c:	080001fc 	.word	0x080001fc
 80105a0:	2000079e 	.word	0x2000079e
 80105a4:	20000140 	.word	0x20000140
 80105a8:	20000c04 	.word	0x20000c04
 80105ac:	200017d4 	.word	0x200017d4
 80105b0:	08001b84 	.word	0x08001b84
 80105b4:	08001b64 	.word	0x08001b64
 80105b8:	20000298 	.word	0x20000298

080105bc <Save_Csv>:
 80105bc:	b580      	push	{r7, lr}
 80105be:	b094      	sub	sp, #80	; 0x50
 80105c0:	af00      	add	r7, sp, #0
 80105c2:	4603      	mov	r3, r0
 80105c4:	80fb      	strh	r3, [r7, #6]
 80105c6:	4baf      	ldr	r3, [pc, #700]	; (8010884 <Save_Csv+0x2c8>)
 80105c8:	681a      	ldr	r2, [r3, #0]
 80105ca:	4baf      	ldr	r3, [pc, #700]	; (8010888 <Save_Csv+0x2cc>)
 80105cc:	f9b3 3000 	ldrsh.w	r3, [r3]
 80105d0:	4619      	mov	r1, r3
 80105d2:	4bae      	ldr	r3, [pc, #696]	; (801088c <Save_Csv+0x2d0>)
 80105d4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80105d8:	2b00      	cmp	r3, #0
 80105da:	bf14      	ite	ne
 80105dc:	2301      	movne	r3, #1
 80105de:	2300      	moveq	r3, #0
 80105e0:	b2db      	uxtb	r3, r3
 80105e2:	440b      	add	r3, r1
 80105e4:	005b      	lsls	r3, r3, #1
 80105e6:	4413      	add	r3, r2
 80105e8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80105ec:	009b      	lsls	r3, r3, #2
 80105ee:	4aa8      	ldr	r2, [pc, #672]	; (8010890 <Save_Csv+0x2d4>)
 80105f0:	f9b2 2000 	ldrsh.w	r2, [r2]
 80105f4:	4611      	mov	r1, r2
 80105f6:	4aa7      	ldr	r2, [pc, #668]	; (8010894 <Save_Csv+0x2d8>)
 80105f8:	5c52      	ldrb	r2, [r2, r1]
 80105fa:	fb93 f3f2 	sdiv	r3, r3, r2
 80105fe:	63bb      	str	r3, [r7, #56]	; 0x38
 8010600:	4aa5      	ldr	r2, [pc, #660]	; (8010898 <Save_Csv+0x2dc>)
 8010602:	f107 031c 	add.w	r3, r7, #28
 8010606:	ca07      	ldmia	r2, {r0, r1, r2}
 8010608:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 801060c:	2300      	movs	r3, #0
 801060e:	64bb      	str	r3, [r7, #72]	; 0x48
 8010610:	2300      	movs	r3, #0
 8010612:	647b      	str	r3, [r7, #68]	; 0x44
 8010614:	2304      	movs	r3, #4
 8010616:	637b      	str	r3, [r7, #52]	; 0x34
 8010618:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 801061c:	633b      	str	r3, [r7, #48]	; 0x30
 801061e:	f107 021c 	add.w	r2, r7, #28
 8010622:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8010626:	4611      	mov	r1, r2
 8010628:	4618      	mov	r0, r3
 801062a:	f7ff f9f9 	bl	800fa20 <Make_Filename>
 801062e:	f107 0310 	add.w	r3, r7, #16
 8010632:	f107 0214 	add.w	r2, r7, #20
 8010636:	f107 011c 	add.w	r1, r7, #28
 801063a:	4898      	ldr	r0, [pc, #608]	; (801089c <Save_Csv+0x2e0>)
 801063c:	f7fe ff56 	bl	800f4ec <OpenFileWr>
 8010640:	4603      	mov	r3, r0
 8010642:	2b00      	cmp	r3, #0
 8010644:	d002      	beq.n	801064c <Save_Csv+0x90>
 8010646:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010648:	b2db      	uxtb	r3, r3
 801064a:	e1d3      	b.n	80109f4 <Save_Csv+0x438>
 801064c:	4b94      	ldr	r3, [pc, #592]	; (80108a0 <Save_Csv+0x2e4>)
 801064e:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8010652:	00db      	lsls	r3, r3, #3
 8010654:	4a93      	ldr	r2, [pc, #588]	; (80108a4 <Save_Csv+0x2e8>)
 8010656:	4413      	add	r3, r2
 8010658:	2205      	movs	r2, #5
 801065a:	4619      	mov	r1, r3
 801065c:	488f      	ldr	r0, [pc, #572]	; (801089c <Save_Csv+0x2e0>)
 801065e:	f012 faed 	bl	8022c3c <memcpy>
 8010662:	2203      	movs	r2, #3
 8010664:	4990      	ldr	r1, [pc, #576]	; (80108a8 <Save_Csv+0x2ec>)
 8010666:	4891      	ldr	r0, [pc, #580]	; (80108ac <Save_Csv+0x2f0>)
 8010668:	f012 fae8 	bl	8022c3c <memcpy>
 801066c:	4b90      	ldr	r3, [pc, #576]	; (80108b0 <Save_Csv+0x2f4>)
 801066e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8010670:	2300      	movs	r3, #0
 8010672:	64fb      	str	r3, [r7, #76]	; 0x4c
 8010674:	4b8a      	ldr	r3, [pc, #552]	; (80108a0 <Save_Csv+0x2e4>)
 8010676:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801067a:	461a      	mov	r2, r3
 801067c:	4613      	mov	r3, r2
 801067e:	005b      	lsls	r3, r3, #1
 8010680:	4413      	add	r3, r2
 8010682:	005b      	lsls	r3, r3, #1
 8010684:	4a8b      	ldr	r2, [pc, #556]	; (80108b4 <Save_Csv+0x2f8>)
 8010686:	4413      	add	r3, r2
 8010688:	63fb      	str	r3, [r7, #60]	; 0x3c
 801068a:	e00a      	b.n	80106a2 <Save_Csv+0xe6>
 801068c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801068e:	1c5a      	adds	r2, r3, #1
 8010690:	63fa      	str	r2, [r7, #60]	; 0x3c
 8010692:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8010694:	1c51      	adds	r1, r2, #1
 8010696:	64f9      	str	r1, [r7, #76]	; 0x4c
 8010698:	4611      	mov	r1, r2
 801069a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801069c:	440a      	add	r2, r1
 801069e:	781b      	ldrb	r3, [r3, #0]
 80106a0:	7013      	strb	r3, [r2, #0]
 80106a2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80106a4:	781b      	ldrb	r3, [r3, #0]
 80106a6:	2b00      	cmp	r3, #0
 80106a8:	d1f0      	bne.n	801068c <Save_Csv+0xd0>
 80106aa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80106ac:	1c5a      	adds	r2, r3, #1
 80106ae:	64fa      	str	r2, [r7, #76]	; 0x4c
 80106b0:	461a      	mov	r2, r3
 80106b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80106b4:	4413      	add	r3, r2
 80106b6:	222a      	movs	r2, #42	; 0x2a
 80106b8:	701a      	strb	r2, [r3, #0]
 80106ba:	4b79      	ldr	r3, [pc, #484]	; (80108a0 <Save_Csv+0x2e4>)
 80106bc:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 80106c0:	461a      	mov	r2, r3
 80106c2:	4613      	mov	r3, r2
 80106c4:	005b      	lsls	r3, r3, #1
 80106c6:	4413      	add	r3, r2
 80106c8:	005b      	lsls	r3, r3, #1
 80106ca:	4a7b      	ldr	r2, [pc, #492]	; (80108b8 <Save_Csv+0x2fc>)
 80106cc:	4413      	add	r3, r2
 80106ce:	63fb      	str	r3, [r7, #60]	; 0x3c
 80106d0:	e00a      	b.n	80106e8 <Save_Csv+0x12c>
 80106d2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80106d4:	1c5a      	adds	r2, r3, #1
 80106d6:	63fa      	str	r2, [r7, #60]	; 0x3c
 80106d8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80106da:	1c51      	adds	r1, r2, #1
 80106dc:	64f9      	str	r1, [r7, #76]	; 0x4c
 80106de:	4611      	mov	r1, r2
 80106e0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80106e2:	440a      	add	r2, r1
 80106e4:	781b      	ldrb	r3, [r3, #0]
 80106e6:	7013      	strb	r3, [r2, #0]
 80106e8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80106ea:	781b      	ldrb	r3, [r3, #0]
 80106ec:	2b00      	cmp	r3, #0
 80106ee:	d1f0      	bne.n	80106d2 <Save_Csv+0x116>
 80106f0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80106f2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80106f4:	4413      	add	r3, r2
 80106f6:	222c      	movs	r2, #44	; 0x2c
 80106f8:	701a      	strb	r2, [r3, #0]
 80106fa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80106fc:	3301      	adds	r3, #1
 80106fe:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8010700:	4413      	add	r3, r2
 8010702:	2200      	movs	r2, #0
 8010704:	701a      	strb	r2, [r3, #0]
 8010706:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010708:	b29b      	uxth	r3, r3
 801070a:	3301      	adds	r3, #1
 801070c:	b29b      	uxth	r3, r3
 801070e:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8010712:	f9b7 3042 	ldrsh.w	r3, [r7, #66]	; 0x42
 8010716:	3308      	adds	r3, #8
 8010718:	64bb      	str	r3, [r7, #72]	; 0x48
 801071a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801071c:	4a5f      	ldr	r2, [pc, #380]	; (801089c <Save_Csv+0x2e0>)
 801071e:	4413      	add	r3, r2
 8010720:	2202      	movs	r2, #2
 8010722:	4966      	ldr	r1, [pc, #408]	; (80108bc <Save_Csv+0x300>)
 8010724:	4618      	mov	r0, r3
 8010726:	f012 fa89 	bl	8022c3c <memcpy>
 801072a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801072c:	3302      	adds	r3, #2
 801072e:	64bb      	str	r3, [r7, #72]	; 0x48
 8010730:	2300      	movs	r3, #0
 8010732:	64fb      	str	r3, [r7, #76]	; 0x4c
 8010734:	e0fe      	b.n	8010934 <Save_Csv+0x378>
 8010736:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010738:	3302      	adds	r3, #2
 801073a:	4a61      	ldr	r2, [pc, #388]	; (80108c0 <Save_Csv+0x304>)
 801073c:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8010740:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 8010744:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8010746:	fb02 f303 	mul.w	r3, r2, r3
 801074a:	131b      	asrs	r3, r3, #12
 801074c:	b29b      	uxth	r3, r3
 801074e:	3364      	adds	r3, #100	; 0x64
 8010750:	b29b      	uxth	r3, r3
 8010752:	857b      	strh	r3, [r7, #42]	; 0x2a
 8010754:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8010758:	2b00      	cmp	r3, #0
 801075a:	dd0a      	ble.n	8010772 <Save_Csv+0x1b6>
 801075c:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8010760:	2bc8      	cmp	r3, #200	; 0xc8
 8010762:	dd02      	ble.n	801076a <Save_Csv+0x1ae>
 8010764:	23c7      	movs	r3, #199	; 0xc7
 8010766:	723b      	strb	r3, [r7, #8]
 8010768:	e005      	b.n	8010776 <Save_Csv+0x1ba>
 801076a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 801076c:	b2db      	uxtb	r3, r3
 801076e:	723b      	strb	r3, [r7, #8]
 8010770:	e001      	b.n	8010776 <Save_Csv+0x1ba>
 8010772:	2300      	movs	r3, #0
 8010774:	723b      	strb	r3, [r7, #8]
 8010776:	7a3a      	ldrb	r2, [r7, #8]
 8010778:	f107 030c 	add.w	r3, r7, #12
 801077c:	4611      	mov	r1, r2
 801077e:	4618      	mov	r0, r3
 8010780:	f001 f898 	bl	80118b4 <u8ToDec3>
 8010784:	2300      	movs	r3, #0
 8010786:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 801078a:	e03a      	b.n	8010802 <Save_Csv+0x246>
 801078c:	f9b7 3042 	ldrsh.w	r3, [r7, #66]	; 0x42
 8010790:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8010794:	4413      	add	r3, r2
 8010796:	f813 3c44 	ldrb.w	r3, [r3, #-68]
 801079a:	2b00      	cmp	r3, #0
 801079c:	d036      	beq.n	801080c <Save_Csv+0x250>
 801079e:	f9b7 2042 	ldrsh.w	r2, [r7, #66]	; 0x42
 80107a2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80107a4:	1c59      	adds	r1, r3, #1
 80107a6:	64b9      	str	r1, [r7, #72]	; 0x48
 80107a8:	f107 0150 	add.w	r1, r7, #80	; 0x50
 80107ac:	440a      	add	r2, r1
 80107ae:	f812 1c44 	ldrb.w	r1, [r2, #-68]
 80107b2:	4a3a      	ldr	r2, [pc, #232]	; (801089c <Save_Csv+0x2e0>)
 80107b4:	54d1      	strb	r1, [r2, r3]
 80107b6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80107b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80107ba:	429a      	cmp	r2, r3
 80107bc:	db1a      	blt.n	80107f4 <Save_Csv+0x238>
 80107be:	f107 0314 	add.w	r3, r7, #20
 80107c2:	4619      	mov	r1, r3
 80107c4:	4835      	ldr	r0, [pc, #212]	; (801089c <Save_Csv+0x2e0>)
 80107c6:	f7fe fdb9 	bl	800f33c <ProgFileSec>
 80107ca:	4603      	mov	r3, r0
 80107cc:	2b00      	cmp	r3, #0
 80107ce:	d001      	beq.n	80107d4 <Save_Csv+0x218>
 80107d0:	2303      	movs	r3, #3
 80107d2:	e10f      	b.n	80109f4 <Save_Csv+0x438>
 80107d4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80107d6:	1c5a      	adds	r2, r3, #1
 80107d8:	647a      	str	r2, [r7, #68]	; 0x44
 80107da:	105b      	asrs	r3, r3, #1
 80107dc:	b2db      	uxtb	r3, r3
 80107de:	f003 0303 	and.w	r3, r3, #3
 80107e2:	b2db      	uxtb	r3, r3
 80107e4:	461a      	mov	r2, r3
 80107e6:	2102      	movs	r1, #2
 80107e8:	f44f 7084 	mov.w	r0, #264	; 0x108
 80107ec:	f7fe ff60 	bl	800f6b0 <PrintClk>
 80107f0:	2300      	movs	r3, #0
 80107f2:	64bb      	str	r3, [r7, #72]	; 0x48
 80107f4:	f9b7 3042 	ldrsh.w	r3, [r7, #66]	; 0x42
 80107f8:	b29b      	uxth	r3, r3
 80107fa:	3301      	adds	r3, #1
 80107fc:	b29b      	uxth	r3, r3
 80107fe:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8010802:	f9b7 3042 	ldrsh.w	r3, [r7, #66]	; 0x42
 8010806:	2b02      	cmp	r3, #2
 8010808:	ddc0      	ble.n	801078c <Save_Csv+0x1d0>
 801080a:	e000      	b.n	801080e <Save_Csv+0x252>
 801080c:	bf00      	nop
 801080e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010810:	1c5a      	adds	r2, r3, #1
 8010812:	64ba      	str	r2, [r7, #72]	; 0x48
 8010814:	4a21      	ldr	r2, [pc, #132]	; (801089c <Save_Csv+0x2e0>)
 8010816:	212c      	movs	r1, #44	; 0x2c
 8010818:	54d1      	strb	r1, [r2, r3]
 801081a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801081c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801081e:	429a      	cmp	r2, r3
 8010820:	db1a      	blt.n	8010858 <Save_Csv+0x29c>
 8010822:	f107 0314 	add.w	r3, r7, #20
 8010826:	4619      	mov	r1, r3
 8010828:	481c      	ldr	r0, [pc, #112]	; (801089c <Save_Csv+0x2e0>)
 801082a:	f7fe fd87 	bl	800f33c <ProgFileSec>
 801082e:	4603      	mov	r3, r0
 8010830:	2b00      	cmp	r3, #0
 8010832:	d001      	beq.n	8010838 <Save_Csv+0x27c>
 8010834:	2303      	movs	r3, #3
 8010836:	e0dd      	b.n	80109f4 <Save_Csv+0x438>
 8010838:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801083a:	1c5a      	adds	r2, r3, #1
 801083c:	647a      	str	r2, [r7, #68]	; 0x44
 801083e:	105b      	asrs	r3, r3, #1
 8010840:	b2db      	uxtb	r3, r3
 8010842:	f003 0303 	and.w	r3, r3, #3
 8010846:	b2db      	uxtb	r3, r3
 8010848:	461a      	mov	r2, r3
 801084a:	2102      	movs	r1, #2
 801084c:	f44f 7084 	mov.w	r0, #264	; 0x108
 8010850:	f7fe ff2e 	bl	800f6b0 <PrintClk>
 8010854:	2300      	movs	r3, #0
 8010856:	64bb      	str	r3, [r7, #72]	; 0x48
 8010858:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801085a:	1c5a      	adds	r2, r3, #1
 801085c:	64ba      	str	r2, [r7, #72]	; 0x48
 801085e:	4a0f      	ldr	r2, [pc, #60]	; (801089c <Save_Csv+0x2e0>)
 8010860:	210d      	movs	r1, #13
 8010862:	54d1      	strb	r1, [r2, r3]
 8010864:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8010866:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010868:	429a      	cmp	r2, r3
 801086a:	db3b      	blt.n	80108e4 <Save_Csv+0x328>
 801086c:	f107 0314 	add.w	r3, r7, #20
 8010870:	4619      	mov	r1, r3
 8010872:	480a      	ldr	r0, [pc, #40]	; (801089c <Save_Csv+0x2e0>)
 8010874:	f7fe fd62 	bl	800f33c <ProgFileSec>
 8010878:	4603      	mov	r3, r0
 801087a:	2b00      	cmp	r3, #0
 801087c:	d022      	beq.n	80108c4 <Save_Csv+0x308>
 801087e:	2303      	movs	r3, #3
 8010880:	e0b8      	b.n	80109f4 <Save_Csv+0x438>
 8010882:	bf00      	nop
 8010884:	2000057c 	.word	0x2000057c
 8010888:	20006882 	.word	0x20006882
 801088c:	2000285e 	.word	0x2000285e
 8010890:	20002846 	.word	0x20002846
 8010894:	20000560 	.word	0x20000560
 8010898:	08000220 	.word	0x08000220
 801089c:	200017d4 	.word	0x200017d4
 80108a0:	20000298 	.word	0x20000298
 80108a4:	200001d0 	.word	0x200001d0
 80108a8:	08000244 	.word	0x08000244
 80108ac:	200017d9 	.word	0x200017d9
 80108b0:	200017dc 	.word	0x200017dc
 80108b4:	08001da8 	.word	0x08001da8
 80108b8:	08001cd4 	.word	0x08001cd4
 80108bc:	08000248 	.word	0x08000248
 80108c0:	2000286c 	.word	0x2000286c
 80108c4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80108c6:	1c5a      	adds	r2, r3, #1
 80108c8:	647a      	str	r2, [r7, #68]	; 0x44
 80108ca:	105b      	asrs	r3, r3, #1
 80108cc:	b2db      	uxtb	r3, r3
 80108ce:	f003 0303 	and.w	r3, r3, #3
 80108d2:	b2db      	uxtb	r3, r3
 80108d4:	461a      	mov	r2, r3
 80108d6:	2102      	movs	r1, #2
 80108d8:	f44f 7084 	mov.w	r0, #264	; 0x108
 80108dc:	f7fe fee8 	bl	800f6b0 <PrintClk>
 80108e0:	2300      	movs	r3, #0
 80108e2:	64bb      	str	r3, [r7, #72]	; 0x48
 80108e4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80108e6:	1c5a      	adds	r2, r3, #1
 80108e8:	64ba      	str	r2, [r7, #72]	; 0x48
 80108ea:	4a44      	ldr	r2, [pc, #272]	; (80109fc <Save_Csv+0x440>)
 80108ec:	210a      	movs	r1, #10
 80108ee:	54d1      	strb	r1, [r2, r3]
 80108f0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80108f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80108f4:	429a      	cmp	r2, r3
 80108f6:	db1a      	blt.n	801092e <Save_Csv+0x372>
 80108f8:	f107 0314 	add.w	r3, r7, #20
 80108fc:	4619      	mov	r1, r3
 80108fe:	483f      	ldr	r0, [pc, #252]	; (80109fc <Save_Csv+0x440>)
 8010900:	f7fe fd1c 	bl	800f33c <ProgFileSec>
 8010904:	4603      	mov	r3, r0
 8010906:	2b00      	cmp	r3, #0
 8010908:	d001      	beq.n	801090e <Save_Csv+0x352>
 801090a:	2303      	movs	r3, #3
 801090c:	e072      	b.n	80109f4 <Save_Csv+0x438>
 801090e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010910:	1c5a      	adds	r2, r3, #1
 8010912:	647a      	str	r2, [r7, #68]	; 0x44
 8010914:	105b      	asrs	r3, r3, #1
 8010916:	b2db      	uxtb	r3, r3
 8010918:	f003 0303 	and.w	r3, r3, #3
 801091c:	b2db      	uxtb	r3, r3
 801091e:	461a      	mov	r2, r3
 8010920:	2102      	movs	r1, #2
 8010922:	f44f 7084 	mov.w	r0, #264	; 0x108
 8010926:	f7fe fec3 	bl	800f6b0 <PrintClk>
 801092a:	2300      	movs	r3, #0
 801092c:	64bb      	str	r3, [r7, #72]	; 0x48
 801092e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010930:	3301      	adds	r3, #1
 8010932:	64fb      	str	r3, [r7, #76]	; 0x4c
 8010934:	4b32      	ldr	r3, [pc, #200]	; (8010a00 <Save_Csv+0x444>)
 8010936:	f9b3 304c 	ldrsh.w	r3, [r3, #76]	; 0x4c
 801093a:	461a      	mov	r2, r3
 801093c:	4b31      	ldr	r3, [pc, #196]	; (8010a04 <Save_Csv+0x448>)
 801093e:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8010942:	461a      	mov	r2, r3
 8010944:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010946:	4293      	cmp	r3, r2
 8010948:	f6ff aef5 	blt.w	8010736 <Save_Csv+0x17a>
 801094c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801094e:	2b00      	cmp	r3, #0
 8010950:	d030      	beq.n	80109b4 <Save_Csv+0x3f8>
 8010952:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010954:	1c5a      	adds	r2, r3, #1
 8010956:	64ba      	str	r2, [r7, #72]	; 0x48
 8010958:	4a28      	ldr	r2, [pc, #160]	; (80109fc <Save_Csv+0x440>)
 801095a:	210d      	movs	r1, #13
 801095c:	54d1      	strb	r1, [r2, r3]
 801095e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010960:	1c5a      	adds	r2, r3, #1
 8010962:	64ba      	str	r2, [r7, #72]	; 0x48
 8010964:	4a25      	ldr	r2, [pc, #148]	; (80109fc <Save_Csv+0x440>)
 8010966:	210a      	movs	r1, #10
 8010968:	54d1      	strb	r1, [r2, r3]
 801096a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801096c:	4a23      	ldr	r2, [pc, #140]	; (80109fc <Save_Csv+0x440>)
 801096e:	1898      	adds	r0, r3, r2
 8010970:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010972:	f5c3 5380 	rsb	r3, r3, #4096	; 0x1000
 8010976:	461a      	mov	r2, r3
 8010978:	2120      	movs	r1, #32
 801097a:	f012 f96d 	bl	8022c58 <memset>
 801097e:	2300      	movs	r3, #0
 8010980:	64bb      	str	r3, [r7, #72]	; 0x48
 8010982:	f107 0314 	add.w	r3, r7, #20
 8010986:	4619      	mov	r1, r3
 8010988:	481c      	ldr	r0, [pc, #112]	; (80109fc <Save_Csv+0x440>)
 801098a:	f7fe fcd7 	bl	800f33c <ProgFileSec>
 801098e:	4603      	mov	r3, r0
 8010990:	2b00      	cmp	r3, #0
 8010992:	d001      	beq.n	8010998 <Save_Csv+0x3dc>
 8010994:	2303      	movs	r3, #3
 8010996:	e02d      	b.n	80109f4 <Save_Csv+0x438>
 8010998:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801099a:	1c5a      	adds	r2, r3, #1
 801099c:	647a      	str	r2, [r7, #68]	; 0x44
 801099e:	105b      	asrs	r3, r3, #1
 80109a0:	b2db      	uxtb	r3, r3
 80109a2:	f003 0303 	and.w	r3, r3, #3
 80109a6:	b2db      	uxtb	r3, r3
 80109a8:	461a      	mov	r2, r3
 80109aa:	2102      	movs	r1, #2
 80109ac:	f44f 7084 	mov.w	r0, #264	; 0x108
 80109b0:	f7fe fe7e 	bl	800f6b0 <PrintClk>
 80109b4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80109b6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80109b8:	fb02 f103 	mul.w	r1, r2, r3
 80109bc:	f107 0310 	add.w	r3, r7, #16
 80109c0:	f107 0214 	add.w	r2, r7, #20
 80109c4:	480d      	ldr	r0, [pc, #52]	; (80109fc <Save_Csv+0x440>)
 80109c6:	f7fe fd2d 	bl	800f424 <CloseFile>
 80109ca:	4603      	mov	r3, r0
 80109cc:	2b00      	cmp	r3, #0
 80109ce:	d001      	beq.n	80109d4 <Save_Csv+0x418>
 80109d0:	2304      	movs	r3, #4
 80109d2:	e00f      	b.n	80109f4 <Save_Csv+0x438>
 80109d4:	4b0a      	ldr	r3, [pc, #40]	; (8010a00 <Save_Csv+0x444>)
 80109d6:	f9b3 3104 	ldrsh.w	r3, [r3, #260]	; 0x104
 80109da:	2b62      	cmp	r3, #98	; 0x62
 80109dc:	dc09      	bgt.n	80109f2 <Save_Csv+0x436>
 80109de:	4b08      	ldr	r3, [pc, #32]	; (8010a00 <Save_Csv+0x444>)
 80109e0:	f9b3 3104 	ldrsh.w	r3, [r3, #260]	; 0x104
 80109e4:	b29b      	uxth	r3, r3
 80109e6:	3301      	adds	r3, #1
 80109e8:	b29b      	uxth	r3, r3
 80109ea:	b21a      	sxth	r2, r3
 80109ec:	4b04      	ldr	r3, [pc, #16]	; (8010a00 <Save_Csv+0x444>)
 80109ee:	f8a3 2104 	strh.w	r2, [r3, #260]	; 0x104
 80109f2:	2300      	movs	r3, #0
 80109f4:	4618      	mov	r0, r3
 80109f6:	3750      	adds	r7, #80	; 0x50
 80109f8:	46bd      	mov	sp, r7
 80109fa:	bd80      	pop	{r7, pc}
 80109fc:	200017d4 	.word	0x200017d4
 8010a00:	20000298 	.word	0x20000298
 8010a04:	08002270 	.word	0x08002270

08010a08 <Save_Svg>:
 8010a08:	b580      	push	{r7, lr}
 8010a0a:	b092      	sub	sp, #72	; 0x48
 8010a0c:	af00      	add	r7, sp, #0
 8010a0e:	4603      	mov	r3, r0
 8010a10:	80fb      	strh	r3, [r7, #6]
 8010a12:	4abb      	ldr	r2, [pc, #748]	; (8010d00 <Save_Svg+0x2f8>)
 8010a14:	f107 031c 	add.w	r3, r7, #28
 8010a18:	ca07      	ldmia	r2, {r0, r1, r2}
 8010a1a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8010a1e:	2304      	movs	r3, #4
 8010a20:	63bb      	str	r3, [r7, #56]	; 0x38
 8010a22:	2300      	movs	r3, #0
 8010a24:	637b      	str	r3, [r7, #52]	; 0x34
 8010a26:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8010a2a:	867b      	strh	r3, [r7, #50]	; 0x32
 8010a2c:	2300      	movs	r3, #0
 8010a2e:	863b      	strh	r3, [r7, #48]	; 0x30
 8010a30:	4bb4      	ldr	r3, [pc, #720]	; (8010d04 <Save_Svg+0x2fc>)
 8010a32:	681a      	ldr	r2, [r3, #0]
 8010a34:	4bb4      	ldr	r3, [pc, #720]	; (8010d08 <Save_Svg+0x300>)
 8010a36:	f9b3 3000 	ldrsh.w	r3, [r3]
 8010a3a:	4619      	mov	r1, r3
 8010a3c:	4bb3      	ldr	r3, [pc, #716]	; (8010d0c <Save_Svg+0x304>)
 8010a3e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8010a42:	2b00      	cmp	r3, #0
 8010a44:	bf14      	ite	ne
 8010a46:	2301      	movne	r3, #1
 8010a48:	2300      	moveq	r3, #0
 8010a4a:	b2db      	uxtb	r3, r3
 8010a4c:	440b      	add	r3, r1
 8010a4e:	005b      	lsls	r3, r3, #1
 8010a50:	4413      	add	r3, r2
 8010a52:	f9b3 3000 	ldrsh.w	r3, [r3]
 8010a56:	009b      	lsls	r3, r3, #2
 8010a58:	4aad      	ldr	r2, [pc, #692]	; (8010d10 <Save_Svg+0x308>)
 8010a5a:	f9b2 2000 	ldrsh.w	r2, [r2]
 8010a5e:	4611      	mov	r1, r2
 8010a60:	4aac      	ldr	r2, [pc, #688]	; (8010d14 <Save_Svg+0x30c>)
 8010a62:	5c52      	ldrb	r2, [r2, r1]
 8010a64:	fb93 f3f2 	sdiv	r3, r3, r2
 8010a68:	62fb      	str	r3, [r7, #44]	; 0x2c
 8010a6a:	4bab      	ldr	r3, [pc, #684]	; (8010d18 <Save_Svg+0x310>)
 8010a6c:	2200      	movs	r2, #0
 8010a6e:	601a      	str	r2, [r3, #0]
 8010a70:	4baa      	ldr	r3, [pc, #680]	; (8010d1c <Save_Svg+0x314>)
 8010a72:	2200      	movs	r2, #0
 8010a74:	801a      	strh	r2, [r3, #0]
 8010a76:	4baa      	ldr	r3, [pc, #680]	; (8010d20 <Save_Svg+0x318>)
 8010a78:	2200      	movs	r2, #0
 8010a7a:	801a      	strh	r2, [r3, #0]
 8010a7c:	4ba9      	ldr	r3, [pc, #676]	; (8010d24 <Save_Svg+0x31c>)
 8010a7e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8010a80:	f44f 729b 	mov.w	r2, #310	; 0x136
 8010a84:	2100      	movs	r1, #0
 8010a86:	48a7      	ldr	r0, [pc, #668]	; (8010d24 <Save_Svg+0x31c>)
 8010a88:	f012 f8e6 	bl	8022c58 <memset>
 8010a8c:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 8010a90:	461a      	mov	r2, r3
 8010a92:	2100      	movs	r1, #0
 8010a94:	48a4      	ldr	r0, [pc, #656]	; (8010d28 <Save_Svg+0x320>)
 8010a96:	f012 f8df 	bl	8022c58 <memset>
 8010a9a:	f107 021c 	add.w	r2, r7, #28
 8010a9e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8010aa2:	4611      	mov	r1, r2
 8010aa4:	4618      	mov	r0, r3
 8010aa6:	f7fe ffbb 	bl	800fa20 <Make_Filename>
 8010aaa:	f107 0310 	add.w	r3, r7, #16
 8010aae:	f107 0214 	add.w	r2, r7, #20
 8010ab2:	f107 011c 	add.w	r1, r7, #28
 8010ab6:	489c      	ldr	r0, [pc, #624]	; (8010d28 <Save_Svg+0x320>)
 8010ab8:	f7fe fd18 	bl	800f4ec <OpenFileWr>
 8010abc:	4603      	mov	r3, r0
 8010abe:	2b00      	cmp	r3, #0
 8010ac0:	d002      	beq.n	8010ac8 <Save_Svg+0xc0>
 8010ac2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010ac4:	b2db      	uxtb	r3, r3
 8010ac6:	e3d5      	b.n	8011274 <Save_Svg+0x86c>
 8010ac8:	4b98      	ldr	r3, [pc, #608]	; (8010d2c <Save_Svg+0x324>)
 8010aca:	63fb      	str	r3, [r7, #60]	; 0x3c
 8010acc:	f107 0314 	add.w	r3, r7, #20
 8010ad0:	4619      	mov	r1, r3
 8010ad2:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8010ad4:	f7fe ff0a 	bl	800f8ec <WriteStr>
 8010ad8:	4b95      	ldr	r3, [pc, #596]	; (8010d30 <Save_Svg+0x328>)
 8010ada:	63fb      	str	r3, [r7, #60]	; 0x3c
 8010adc:	f107 0314 	add.w	r3, r7, #20
 8010ae0:	4619      	mov	r1, r3
 8010ae2:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8010ae4:	f7fe ff02 	bl	800f8ec <WriteStr>
 8010ae8:	4b92      	ldr	r3, [pc, #584]	; (8010d34 <Save_Svg+0x32c>)
 8010aea:	63fb      	str	r3, [r7, #60]	; 0x3c
 8010aec:	f107 0314 	add.w	r3, r7, #20
 8010af0:	4619      	mov	r1, r3
 8010af2:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8010af4:	f7fe fefa 	bl	800f8ec <WriteStr>
 8010af8:	4b8f      	ldr	r3, [pc, #572]	; (8010d38 <Save_Svg+0x330>)
 8010afa:	f9b3 304c 	ldrsh.w	r3, [r3, #76]	; 0x4c
 8010afe:	461a      	mov	r2, r3
 8010b00:	4b8e      	ldr	r3, [pc, #568]	; (8010d3c <Save_Svg+0x334>)
 8010b02:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8010b06:	f107 0214 	add.w	r2, r7, #20
 8010b0a:	4611      	mov	r1, r2
 8010b0c:	4618      	mov	r0, r3
 8010b0e:	f7fe fe45 	bl	800f79c <WriteVar>
 8010b12:	4b8b      	ldr	r3, [pc, #556]	; (8010d40 <Save_Svg+0x338>)
 8010b14:	63fb      	str	r3, [r7, #60]	; 0x3c
 8010b16:	f107 0314 	add.w	r3, r7, #20
 8010b1a:	4619      	mov	r1, r3
 8010b1c:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8010b1e:	f7fe fee5 	bl	800f8ec <WriteStr>
 8010b22:	4b88      	ldr	r3, [pc, #544]	; (8010d44 <Save_Svg+0x33c>)
 8010b24:	63fb      	str	r3, [r7, #60]	; 0x3c
 8010b26:	f107 0314 	add.w	r3, r7, #20
 8010b2a:	4619      	mov	r1, r3
 8010b2c:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8010b2e:	f7fe fedd 	bl	800f8ec <WriteStr>
 8010b32:	4b81      	ldr	r3, [pc, #516]	; (8010d38 <Save_Svg+0x330>)
 8010b34:	f9b3 304c 	ldrsh.w	r3, [r3, #76]	; 0x4c
 8010b38:	461a      	mov	r2, r3
 8010b3a:	4b80      	ldr	r3, [pc, #512]	; (8010d3c <Save_Svg+0x334>)
 8010b3c:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8010b40:	f107 0214 	add.w	r2, r7, #20
 8010b44:	4611      	mov	r1, r2
 8010b46:	4618      	mov	r0, r3
 8010b48:	f7fe fe28 	bl	800f79c <WriteVar>
 8010b4c:	4b7e      	ldr	r3, [pc, #504]	; (8010d48 <Save_Svg+0x340>)
 8010b4e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8010b50:	f107 0314 	add.w	r3, r7, #20
 8010b54:	4619      	mov	r1, r3
 8010b56:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8010b58:	f7fe fec8 	bl	800f8ec <WriteStr>
 8010b5c:	4b7b      	ldr	r3, [pc, #492]	; (8010d4c <Save_Svg+0x344>)
 8010b5e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8010b60:	f107 0314 	add.w	r3, r7, #20
 8010b64:	4619      	mov	r1, r3
 8010b66:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8010b68:	f7fe fec0 	bl	800f8ec <WriteStr>
 8010b6c:	4b72      	ldr	r3, [pc, #456]	; (8010d38 <Save_Svg+0x330>)
 8010b6e:	f9b3 3044 	ldrsh.w	r3, [r3, #68]	; 0x44
 8010b72:	f107 0214 	add.w	r2, r7, #20
 8010b76:	4611      	mov	r1, r2
 8010b78:	4618      	mov	r0, r3
 8010b7a:	f7fe fe0f 	bl	800f79c <WriteVar>
 8010b7e:	4b74      	ldr	r3, [pc, #464]	; (8010d50 <Save_Svg+0x348>)
 8010b80:	63fb      	str	r3, [r7, #60]	; 0x3c
 8010b82:	f107 0314 	add.w	r3, r7, #20
 8010b86:	4619      	mov	r1, r3
 8010b88:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8010b8a:	f7fe feaf 	bl	800f8ec <WriteStr>
 8010b8e:	4b6a      	ldr	r3, [pc, #424]	; (8010d38 <Save_Svg+0x330>)
 8010b90:	f9b3 3044 	ldrsh.w	r3, [r3, #68]	; 0x44
 8010b94:	f107 0214 	add.w	r2, r7, #20
 8010b98:	4611      	mov	r1, r2
 8010b9a:	4618      	mov	r0, r3
 8010b9c:	f7fe fdfe 	bl	800f79c <WriteVar>
 8010ba0:	4b6c      	ldr	r3, [pc, #432]	; (8010d54 <Save_Svg+0x34c>)
 8010ba2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8010ba4:	f107 0314 	add.w	r3, r7, #20
 8010ba8:	4619      	mov	r1, r3
 8010baa:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8010bac:	f7fe fe9e 	bl	800f8ec <WriteStr>
 8010bb0:	4b61      	ldr	r3, [pc, #388]	; (8010d38 <Save_Svg+0x330>)
 8010bb2:	f9b3 3044 	ldrsh.w	r3, [r3, #68]	; 0x44
 8010bb6:	b29b      	uxth	r3, r3
 8010bb8:	f503 7396 	add.w	r3, r3, #300	; 0x12c
 8010bbc:	b29b      	uxth	r3, r3
 8010bbe:	b21b      	sxth	r3, r3
 8010bc0:	f107 0214 	add.w	r2, r7, #20
 8010bc4:	4611      	mov	r1, r2
 8010bc6:	4618      	mov	r0, r3
 8010bc8:	f7fe fde8 	bl	800f79c <WriteVar>
 8010bcc:	4b62      	ldr	r3, [pc, #392]	; (8010d58 <Save_Svg+0x350>)
 8010bce:	63fb      	str	r3, [r7, #60]	; 0x3c
 8010bd0:	f107 0314 	add.w	r3, r7, #20
 8010bd4:	4619      	mov	r1, r3
 8010bd6:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8010bd8:	f7fe fe88 	bl	800f8ec <WriteStr>
 8010bdc:	2300      	movs	r3, #0
 8010bde:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8010be2:	e032      	b.n	8010c4a <Save_Svg+0x242>
 8010be4:	4b5d      	ldr	r3, [pc, #372]	; (8010d5c <Save_Svg+0x354>)
 8010be6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8010be8:	f107 0314 	add.w	r3, r7, #20
 8010bec:	4619      	mov	r1, r3
 8010bee:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8010bf0:	f7fe fe7c 	bl	800f8ec <WriteStr>
 8010bf4:	f107 0214 	add.w	r2, r7, #20
 8010bf8:	f9b7 3042 	ldrsh.w	r3, [r7, #66]	; 0x42
 8010bfc:	4611      	mov	r1, r2
 8010bfe:	4618      	mov	r0, r3
 8010c00:	f7fe fdcc 	bl	800f79c <WriteVar>
 8010c04:	4b56      	ldr	r3, [pc, #344]	; (8010d60 <Save_Svg+0x358>)
 8010c06:	63fb      	str	r3, [r7, #60]	; 0x3c
 8010c08:	f107 0314 	add.w	r3, r7, #20
 8010c0c:	4619      	mov	r1, r3
 8010c0e:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8010c10:	f7fe fe6c 	bl	800f8ec <WriteStr>
 8010c14:	4b48      	ldr	r3, [pc, #288]	; (8010d38 <Save_Svg+0x330>)
 8010c16:	f9b3 304c 	ldrsh.w	r3, [r3, #76]	; 0x4c
 8010c1a:	461a      	mov	r2, r3
 8010c1c:	4b47      	ldr	r3, [pc, #284]	; (8010d3c <Save_Svg+0x334>)
 8010c1e:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8010c22:	f107 0214 	add.w	r2, r7, #20
 8010c26:	4611      	mov	r1, r2
 8010c28:	4618      	mov	r0, r3
 8010c2a:	f7fe fdb7 	bl	800f79c <WriteVar>
 8010c2e:	4b4d      	ldr	r3, [pc, #308]	; (8010d64 <Save_Svg+0x35c>)
 8010c30:	63fb      	str	r3, [r7, #60]	; 0x3c
 8010c32:	f107 0314 	add.w	r3, r7, #20
 8010c36:	4619      	mov	r1, r3
 8010c38:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8010c3a:	f7fe fe57 	bl	800f8ec <WriteStr>
 8010c3e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8010c42:	3319      	adds	r3, #25
 8010c44:	b29b      	uxth	r3, r3
 8010c46:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8010c4a:	f9b7 3042 	ldrsh.w	r3, [r7, #66]	; 0x42
 8010c4e:	2bc8      	cmp	r3, #200	; 0xc8
 8010c50:	ddc8      	ble.n	8010be4 <Save_Svg+0x1dc>
 8010c52:	2300      	movs	r3, #0
 8010c54:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8010c58:	e01d      	b.n	8010c96 <Save_Svg+0x28e>
 8010c5a:	4b43      	ldr	r3, [pc, #268]	; (8010d68 <Save_Svg+0x360>)
 8010c5c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8010c5e:	f107 0314 	add.w	r3, r7, #20
 8010c62:	4619      	mov	r1, r3
 8010c64:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8010c66:	f7fe fe41 	bl	800f8ec <WriteStr>
 8010c6a:	f107 0214 	add.w	r2, r7, #20
 8010c6e:	f9b7 3044 	ldrsh.w	r3, [r7, #68]	; 0x44
 8010c72:	4611      	mov	r1, r2
 8010c74:	4618      	mov	r0, r3
 8010c76:	f7fe fd91 	bl	800f79c <WriteVar>
 8010c7a:	4b3c      	ldr	r3, [pc, #240]	; (8010d6c <Save_Svg+0x364>)
 8010c7c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8010c7e:	f107 0314 	add.w	r3, r7, #20
 8010c82:	4619      	mov	r1, r3
 8010c84:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8010c86:	f7fe fe31 	bl	800f8ec <WriteStr>
 8010c8a:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8010c8e:	3319      	adds	r3, #25
 8010c90:	b29b      	uxth	r3, r3
 8010c92:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8010c96:	4b28      	ldr	r3, [pc, #160]	; (8010d38 <Save_Svg+0x330>)
 8010c98:	f9b3 304c 	ldrsh.w	r3, [r3, #76]	; 0x4c
 8010c9c:	461a      	mov	r2, r3
 8010c9e:	4b27      	ldr	r3, [pc, #156]	; (8010d3c <Save_Svg+0x334>)
 8010ca0:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8010ca4:	f9b7 2044 	ldrsh.w	r2, [r7, #68]	; 0x44
 8010ca8:	429a      	cmp	r2, r3
 8010caa:	ddd6      	ble.n	8010c5a <Save_Svg+0x252>
 8010cac:	4b30      	ldr	r3, [pc, #192]	; (8010d70 <Save_Svg+0x368>)
 8010cae:	63fb      	str	r3, [r7, #60]	; 0x3c
 8010cb0:	f107 0314 	add.w	r3, r7, #20
 8010cb4:	4619      	mov	r1, r3
 8010cb6:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8010cb8:	f7fe fe18 	bl	800f8ec <WriteStr>
 8010cbc:	2300      	movs	r3, #0
 8010cbe:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8010cc2:	e091      	b.n	8010de8 <Save_Svg+0x3e0>
 8010cc4:	f9b7 3046 	ldrsh.w	r3, [r7, #70]	; 0x46
 8010cc8:	3302      	adds	r3, #2
 8010cca:	4a2a      	ldr	r2, [pc, #168]	; (8010d74 <Save_Svg+0x36c>)
 8010ccc:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8010cd0:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 8010cd4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8010cd6:	fb02 f303 	mul.w	r3, r2, r3
 8010cda:	131b      	asrs	r3, r3, #12
 8010cdc:	b29b      	uxth	r3, r3
 8010cde:	3364      	adds	r3, #100	; 0x64
 8010ce0:	b29b      	uxth	r3, r3
 8010ce2:	857b      	strh	r3, [r7, #42]	; 0x2a
 8010ce4:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8010ce8:	2b00      	cmp	r3, #0
 8010cea:	dd45      	ble.n	8010d78 <Save_Svg+0x370>
 8010cec:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8010cf0:	2bc8      	cmp	r3, #200	; 0xc8
 8010cf2:	dd02      	ble.n	8010cfa <Save_Svg+0x2f2>
 8010cf4:	23c7      	movs	r3, #199	; 0xc7
 8010cf6:	813b      	strh	r3, [r7, #8]
 8010cf8:	e040      	b.n	8010d7c <Save_Svg+0x374>
 8010cfa:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8010cfc:	813b      	strh	r3, [r7, #8]
 8010cfe:	e03d      	b.n	8010d7c <Save_Svg+0x374>
 8010d00:	0800022c 	.word	0x0800022c
 8010d04:	2000057c 	.word	0x2000057c
 8010d08:	20006882 	.word	0x20006882
 8010d0c:	2000285e 	.word	0x2000285e
 8010d10:	20002846 	.word	0x20002846
 8010d14:	20000560 	.word	0x20000560
 8010d18:	20000794 	.word	0x20000794
 8010d1c:	2000078e 	.word	0x2000078e
 8010d20:	20000790 	.word	0x20000790
 8010d24:	20000008 	.word	0x20000008
 8010d28:	200017d4 	.word	0x200017d4
 8010d2c:	0800024c 	.word	0x0800024c
 8010d30:	0800027c 	.word	0x0800027c
 8010d34:	080002e8 	.word	0x080002e8
 8010d38:	20000298 	.word	0x20000298
 8010d3c:	08002270 	.word	0x08002270
 8010d40:	080002f8 	.word	0x080002f8
 8010d44:	08000384 	.word	0x08000384
 8010d48:	080003b0 	.word	0x080003b0
 8010d4c:	080003c0 	.word	0x080003c0
 8010d50:	080003e8 	.word	0x080003e8
 8010d54:	080003f0 	.word	0x080003f0
 8010d58:	080003f8 	.word	0x080003f8
 8010d5c:	08000404 	.word	0x08000404
 8010d60:	08000424 	.word	0x08000424
 8010d64:	08000428 	.word	0x08000428
 8010d68:	08000430 	.word	0x08000430
 8010d6c:	0800044c 	.word	0x0800044c
 8010d70:	08000458 	.word	0x08000458
 8010d74:	2000286c 	.word	0x2000286c
 8010d78:	2300      	movs	r3, #0
 8010d7a:	813b      	strh	r3, [r7, #8]
 8010d7c:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8010d80:	b29b      	uxth	r3, r3
 8010d82:	f1c3 03c8 	rsb	r3, r3, #200	; 0xc8
 8010d86:	b29b      	uxth	r3, r3
 8010d88:	b21b      	sxth	r3, r3
 8010d8a:	813b      	strh	r3, [r7, #8]
 8010d8c:	f9b7 3046 	ldrsh.w	r3, [r7, #70]	; 0x46
 8010d90:	2b00      	cmp	r3, #0
 8010d92:	d102      	bne.n	8010d9a <Save_Svg+0x392>
 8010d94:	4b3b      	ldr	r3, [pc, #236]	; (8010e84 <Save_Svg+0x47c>)
 8010d96:	63fb      	str	r3, [r7, #60]	; 0x3c
 8010d98:	e001      	b.n	8010d9e <Save_Svg+0x396>
 8010d9a:	4b3b      	ldr	r3, [pc, #236]	; (8010e88 <Save_Svg+0x480>)
 8010d9c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8010d9e:	f107 0314 	add.w	r3, r7, #20
 8010da2:	4619      	mov	r1, r3
 8010da4:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8010da6:	f7fe fda1 	bl	800f8ec <WriteStr>
 8010daa:	f107 0214 	add.w	r2, r7, #20
 8010dae:	f9b7 3046 	ldrsh.w	r3, [r7, #70]	; 0x46
 8010db2:	4611      	mov	r1, r2
 8010db4:	4618      	mov	r0, r3
 8010db6:	f7fe fcf1 	bl	800f79c <WriteVar>
 8010dba:	4b34      	ldr	r3, [pc, #208]	; (8010e8c <Save_Svg+0x484>)
 8010dbc:	63fb      	str	r3, [r7, #60]	; 0x3c
 8010dbe:	f107 0314 	add.w	r3, r7, #20
 8010dc2:	4619      	mov	r1, r3
 8010dc4:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8010dc6:	f7fe fd91 	bl	800f8ec <WriteStr>
 8010dca:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8010dce:	f107 0214 	add.w	r2, r7, #20
 8010dd2:	4611      	mov	r1, r2
 8010dd4:	4618      	mov	r0, r3
 8010dd6:	f7fe fce1 	bl	800f79c <WriteVar>
 8010dda:	f9b7 3046 	ldrsh.w	r3, [r7, #70]	; 0x46
 8010dde:	b29b      	uxth	r3, r3
 8010de0:	3301      	adds	r3, #1
 8010de2:	b29b      	uxth	r3, r3
 8010de4:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8010de8:	4b29      	ldr	r3, [pc, #164]	; (8010e90 <Save_Svg+0x488>)
 8010dea:	f9b3 304c 	ldrsh.w	r3, [r3, #76]	; 0x4c
 8010dee:	461a      	mov	r2, r3
 8010df0:	4b28      	ldr	r3, [pc, #160]	; (8010e94 <Save_Svg+0x48c>)
 8010df2:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8010df6:	f9b7 2046 	ldrsh.w	r2, [r7, #70]	; 0x46
 8010dfa:	429a      	cmp	r2, r3
 8010dfc:	f77f af62 	ble.w	8010cc4 <Save_Svg+0x2bc>
 8010e00:	4b25      	ldr	r3, [pc, #148]	; (8010e98 <Save_Svg+0x490>)
 8010e02:	63fb      	str	r3, [r7, #60]	; 0x3c
 8010e04:	f107 0314 	add.w	r3, r7, #20
 8010e08:	4619      	mov	r1, r3
 8010e0a:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8010e0c:	f7fe fd6e 	bl	800f8ec <WriteStr>
 8010e10:	4b22      	ldr	r3, [pc, #136]	; (8010e9c <Save_Svg+0x494>)
 8010e12:	63fb      	str	r3, [r7, #60]	; 0x3c
 8010e14:	f107 0314 	add.w	r3, r7, #20
 8010e18:	4619      	mov	r1, r3
 8010e1a:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8010e1c:	f7fe fd66 	bl	800f8ec <WriteStr>
 8010e20:	4b1b      	ldr	r3, [pc, #108]	; (8010e90 <Save_Svg+0x488>)
 8010e22:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8010e26:	2b00      	cmp	r3, #0
 8010e28:	d007      	beq.n	8010e3a <Save_Svg+0x432>
 8010e2a:	4b19      	ldr	r3, [pc, #100]	; (8010e90 <Save_Svg+0x488>)
 8010e2c:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8010e30:	00db      	lsls	r3, r3, #3
 8010e32:	4a1b      	ldr	r2, [pc, #108]	; (8010ea0 <Save_Svg+0x498>)
 8010e34:	4413      	add	r3, r2
 8010e36:	63fb      	str	r3, [r7, #60]	; 0x3c
 8010e38:	e006      	b.n	8010e48 <Save_Svg+0x440>
 8010e3a:	4b15      	ldr	r3, [pc, #84]	; (8010e90 <Save_Svg+0x488>)
 8010e3c:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8010e40:	00db      	lsls	r3, r3, #3
 8010e42:	4a18      	ldr	r2, [pc, #96]	; (8010ea4 <Save_Svg+0x49c>)
 8010e44:	4413      	add	r3, r2
 8010e46:	63fb      	str	r3, [r7, #60]	; 0x3c
 8010e48:	f107 0314 	add.w	r3, r7, #20
 8010e4c:	4619      	mov	r1, r3
 8010e4e:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8010e50:	f7fe fd4c 	bl	800f8ec <WriteStr>
 8010e54:	4b14      	ldr	r3, [pc, #80]	; (8010ea8 <Save_Svg+0x4a0>)
 8010e56:	63fb      	str	r3, [r7, #60]	; 0x3c
 8010e58:	f107 0314 	add.w	r3, r7, #20
 8010e5c:	4619      	mov	r1, r3
 8010e5e:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8010e60:	f7fe fd44 	bl	800f8ec <WriteStr>
 8010e64:	4b11      	ldr	r3, [pc, #68]	; (8010eac <Save_Svg+0x4a4>)
 8010e66:	63fb      	str	r3, [r7, #60]	; 0x3c
 8010e68:	f107 0314 	add.w	r3, r7, #20
 8010e6c:	4619      	mov	r1, r3
 8010e6e:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8010e70:	f7fe fd3c 	bl	800f8ec <WriteStr>
 8010e74:	4b06      	ldr	r3, [pc, #24]	; (8010e90 <Save_Svg+0x488>)
 8010e76:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8010e7a:	2b00      	cmp	r3, #0
 8010e7c:	d01a      	beq.n	8010eb4 <Save_Svg+0x4ac>
 8010e7e:	4b0c      	ldr	r3, [pc, #48]	; (8010eb0 <Save_Svg+0x4a8>)
 8010e80:	63fb      	str	r3, [r7, #60]	; 0x3c
 8010e82:	e019      	b.n	8010eb8 <Save_Svg+0x4b0>
 8010e84:	08000490 	.word	0x08000490
 8010e88:	08000494 	.word	0x08000494
 8010e8c:	08000498 	.word	0x08000498
 8010e90:	20000298 	.word	0x20000298
 8010e94:	08002270 	.word	0x08002270
 8010e98:	08000428 	.word	0x08000428
 8010e9c:	0800049c 	.word	0x0800049c
 8010ea0:	080019fc 	.word	0x080019fc
 8010ea4:	080019ac 	.word	0x080019ac
 8010ea8:	08000504 	.word	0x08000504
 8010eac:	0800050c 	.word	0x0800050c
 8010eb0:	08000510 	.word	0x08000510
 8010eb4:	4bb1      	ldr	r3, [pc, #708]	; (801117c <Save_Svg+0x774>)
 8010eb6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8010eb8:	f107 0314 	add.w	r3, r7, #20
 8010ebc:	4619      	mov	r1, r3
 8010ebe:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8010ec0:	f7fe fd14 	bl	800f8ec <WriteStr>
 8010ec4:	4bae      	ldr	r3, [pc, #696]	; (8011180 <Save_Svg+0x778>)
 8010ec6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8010ec8:	f107 0314 	add.w	r3, r7, #20
 8010ecc:	4619      	mov	r1, r3
 8010ece:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8010ed0:	f7fe fd0c 	bl	800f8ec <WriteStr>
 8010ed4:	4bab      	ldr	r3, [pc, #684]	; (8011184 <Save_Svg+0x77c>)
 8010ed6:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8010eda:	00db      	lsls	r3, r3, #3
 8010edc:	4aaa      	ldr	r2, [pc, #680]	; (8011188 <Save_Svg+0x780>)
 8010ede:	4413      	add	r3, r2
 8010ee0:	63fb      	str	r3, [r7, #60]	; 0x3c
 8010ee2:	f107 0314 	add.w	r3, r7, #20
 8010ee6:	4619      	mov	r1, r3
 8010ee8:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8010eea:	f7fe fcff 	bl	800f8ec <WriteStr>
 8010eee:	4ba7      	ldr	r3, [pc, #668]	; (801118c <Save_Svg+0x784>)
 8010ef0:	63fb      	str	r3, [r7, #60]	; 0x3c
 8010ef2:	f107 0314 	add.w	r3, r7, #20
 8010ef6:	4619      	mov	r1, r3
 8010ef8:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8010efa:	f7fe fcf7 	bl	800f8ec <WriteStr>
 8010efe:	4ba4      	ldr	r3, [pc, #656]	; (8011190 <Save_Svg+0x788>)
 8010f00:	63fb      	str	r3, [r7, #60]	; 0x3c
 8010f02:	f107 0314 	add.w	r3, r7, #20
 8010f06:	4619      	mov	r1, r3
 8010f08:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8010f0a:	f7fe fcef 	bl	800f8ec <WriteStr>
 8010f0e:	4b9d      	ldr	r3, [pc, #628]	; (8011184 <Save_Svg+0x77c>)
 8010f10:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 8010f14:	b29b      	uxth	r3, r3
 8010f16:	f1c3 03c7 	rsb	r3, r3, #199	; 0xc7
 8010f1a:	b29b      	uxth	r3, r3
 8010f1c:	863b      	strh	r3, [r7, #48]	; 0x30
 8010f1e:	4b9d      	ldr	r3, [pc, #628]	; (8011194 <Save_Svg+0x78c>)
 8010f20:	63fb      	str	r3, [r7, #60]	; 0x3c
 8010f22:	f107 0314 	add.w	r3, r7, #20
 8010f26:	4619      	mov	r1, r3
 8010f28:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8010f2a:	f7fe fcdf 	bl	800f8ec <WriteStr>
 8010f2e:	4b9a      	ldr	r3, [pc, #616]	; (8011198 <Save_Svg+0x790>)
 8010f30:	63fb      	str	r3, [r7, #60]	; 0x3c
 8010f32:	f107 0314 	add.w	r3, r7, #20
 8010f36:	4619      	mov	r1, r3
 8010f38:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8010f3a:	f7fe fcd7 	bl	800f8ec <WriteStr>
 8010f3e:	4b97      	ldr	r3, [pc, #604]	; (801119c <Save_Svg+0x794>)
 8010f40:	63fb      	str	r3, [r7, #60]	; 0x3c
 8010f42:	f107 0314 	add.w	r3, r7, #20
 8010f46:	4619      	mov	r1, r3
 8010f48:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8010f4a:	f7fe fccf 	bl	800f8ec <WriteStr>
 8010f4e:	4b94      	ldr	r3, [pc, #592]	; (80111a0 <Save_Svg+0x798>)
 8010f50:	63fb      	str	r3, [r7, #60]	; 0x3c
 8010f52:	f107 0314 	add.w	r3, r7, #20
 8010f56:	4619      	mov	r1, r3
 8010f58:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8010f5a:	f7fe fcc7 	bl	800f8ec <WriteStr>
 8010f5e:	4b91      	ldr	r3, [pc, #580]	; (80111a4 <Save_Svg+0x79c>)
 8010f60:	63fb      	str	r3, [r7, #60]	; 0x3c
 8010f62:	f107 0314 	add.w	r3, r7, #20
 8010f66:	4619      	mov	r1, r3
 8010f68:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8010f6a:	f7fe fcbf 	bl	800f8ec <WriteStr>
 8010f6e:	4b8e      	ldr	r3, [pc, #568]	; (80111a8 <Save_Svg+0x7a0>)
 8010f70:	63fb      	str	r3, [r7, #60]	; 0x3c
 8010f72:	f107 0314 	add.w	r3, r7, #20
 8010f76:	4619      	mov	r1, r3
 8010f78:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8010f7a:	f7fe fcb7 	bl	800f8ec <WriteStr>
 8010f7e:	4b8b      	ldr	r3, [pc, #556]	; (80111ac <Save_Svg+0x7a4>)
 8010f80:	63fb      	str	r3, [r7, #60]	; 0x3c
 8010f82:	f107 0314 	add.w	r3, r7, #20
 8010f86:	4619      	mov	r1, r3
 8010f88:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8010f8a:	f7fe fcaf 	bl	800f8ec <WriteStr>
 8010f8e:	4b88      	ldr	r3, [pc, #544]	; (80111b0 <Save_Svg+0x7a8>)
 8010f90:	63fb      	str	r3, [r7, #60]	; 0x3c
 8010f92:	f107 0314 	add.w	r3, r7, #20
 8010f96:	4619      	mov	r1, r3
 8010f98:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8010f9a:	f7fe fca7 	bl	800f8ec <WriteStr>
 8010f9e:	4b85      	ldr	r3, [pc, #532]	; (80111b4 <Save_Svg+0x7ac>)
 8010fa0:	63fb      	str	r3, [r7, #60]	; 0x3c
 8010fa2:	f107 0314 	add.w	r3, r7, #20
 8010fa6:	4619      	mov	r1, r3
 8010fa8:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8010faa:	f7fe fc9f 	bl	800f8ec <WriteStr>
 8010fae:	4b82      	ldr	r3, [pc, #520]	; (80111b8 <Save_Svg+0x7b0>)
 8010fb0:	63fb      	str	r3, [r7, #60]	; 0x3c
 8010fb2:	f107 0314 	add.w	r3, r7, #20
 8010fb6:	4619      	mov	r1, r3
 8010fb8:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8010fba:	f7fe fc97 	bl	800f8ec <WriteStr>
 8010fbe:	4b7f      	ldr	r3, [pc, #508]	; (80111bc <Save_Svg+0x7b4>)
 8010fc0:	63fb      	str	r3, [r7, #60]	; 0x3c
 8010fc2:	f107 0314 	add.w	r3, r7, #20
 8010fc6:	4619      	mov	r1, r3
 8010fc8:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8010fca:	f7fe fc8f 	bl	800f8ec <WriteStr>
 8010fce:	4b7c      	ldr	r3, [pc, #496]	; (80111c0 <Save_Svg+0x7b8>)
 8010fd0:	63fb      	str	r3, [r7, #60]	; 0x3c
 8010fd2:	f107 0314 	add.w	r3, r7, #20
 8010fd6:	4619      	mov	r1, r3
 8010fd8:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8010fda:	f7fe fc87 	bl	800f8ec <WriteStr>
 8010fde:	4b79      	ldr	r3, [pc, #484]	; (80111c4 <Save_Svg+0x7bc>)
 8010fe0:	63fb      	str	r3, [r7, #60]	; 0x3c
 8010fe2:	f107 0314 	add.w	r3, r7, #20
 8010fe6:	4619      	mov	r1, r3
 8010fe8:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8010fea:	f7fe fc7f 	bl	800f8ec <WriteStr>
 8010fee:	4b65      	ldr	r3, [pc, #404]	; (8011184 <Save_Svg+0x77c>)
 8010ff0:	f9b3 304c 	ldrsh.w	r3, [r3, #76]	; 0x4c
 8010ff4:	461a      	mov	r2, r3
 8010ff6:	4b74      	ldr	r3, [pc, #464]	; (80111c8 <Save_Svg+0x7c0>)
 8010ff8:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8010ffc:	f107 0214 	add.w	r2, r7, #20
 8011000:	4611      	mov	r1, r2
 8011002:	4618      	mov	r0, r3
 8011004:	f7fe fbca 	bl	800f79c <WriteVar>
 8011008:	4b70      	ldr	r3, [pc, #448]	; (80111cc <Save_Svg+0x7c4>)
 801100a:	63fb      	str	r3, [r7, #60]	; 0x3c
 801100c:	f107 0314 	add.w	r3, r7, #20
 8011010:	4619      	mov	r1, r3
 8011012:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8011014:	f7fe fc6a 	bl	800f8ec <WriteStr>
 8011018:	4b6d      	ldr	r3, [pc, #436]	; (80111d0 <Save_Svg+0x7c8>)
 801101a:	63fb      	str	r3, [r7, #60]	; 0x3c
 801101c:	f107 0314 	add.w	r3, r7, #20
 8011020:	4619      	mov	r1, r3
 8011022:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8011024:	f7fe fc62 	bl	800f8ec <WriteStr>
 8011028:	4b6a      	ldr	r3, [pc, #424]	; (80111d4 <Save_Svg+0x7cc>)
 801102a:	63fb      	str	r3, [r7, #60]	; 0x3c
 801102c:	f107 0314 	add.w	r3, r7, #20
 8011030:	4619      	mov	r1, r3
 8011032:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8011034:	f7fe fc5a 	bl	800f8ec <WriteStr>
 8011038:	4b67      	ldr	r3, [pc, #412]	; (80111d8 <Save_Svg+0x7d0>)
 801103a:	63fb      	str	r3, [r7, #60]	; 0x3c
 801103c:	f107 0314 	add.w	r3, r7, #20
 8011040:	4619      	mov	r1, r3
 8011042:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8011044:	f7fe fc52 	bl	800f8ec <WriteStr>
 8011048:	4b64      	ldr	r3, [pc, #400]	; (80111dc <Save_Svg+0x7d4>)
 801104a:	63fb      	str	r3, [r7, #60]	; 0x3c
 801104c:	f107 0314 	add.w	r3, r7, #20
 8011050:	4619      	mov	r1, r3
 8011052:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8011054:	f7fe fc4a 	bl	800f8ec <WriteStr>
 8011058:	4b61      	ldr	r3, [pc, #388]	; (80111e0 <Save_Svg+0x7d8>)
 801105a:	63fb      	str	r3, [r7, #60]	; 0x3c
 801105c:	f107 0314 	add.w	r3, r7, #20
 8011060:	4619      	mov	r1, r3
 8011062:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8011064:	f7fe fc42 	bl	800f8ec <WriteStr>
 8011068:	4b5e      	ldr	r3, [pc, #376]	; (80111e4 <Save_Svg+0x7dc>)
 801106a:	63fb      	str	r3, [r7, #60]	; 0x3c
 801106c:	f107 0314 	add.w	r3, r7, #20
 8011070:	4619      	mov	r1, r3
 8011072:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8011074:	f7fe fc3a 	bl	800f8ec <WriteStr>
 8011078:	4b58      	ldr	r3, [pc, #352]	; (80111dc <Save_Svg+0x7d4>)
 801107a:	63fb      	str	r3, [r7, #60]	; 0x3c
 801107c:	f107 0314 	add.w	r3, r7, #20
 8011080:	4619      	mov	r1, r3
 8011082:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8011084:	f7fe fc32 	bl	800f8ec <WriteStr>
 8011088:	4b57      	ldr	r3, [pc, #348]	; (80111e8 <Save_Svg+0x7e0>)
 801108a:	63fb      	str	r3, [r7, #60]	; 0x3c
 801108c:	f107 0314 	add.w	r3, r7, #20
 8011090:	4619      	mov	r1, r3
 8011092:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8011094:	f7fe fc2a 	bl	800f8ec <WriteStr>
 8011098:	4b3a      	ldr	r3, [pc, #232]	; (8011184 <Save_Svg+0x77c>)
 801109a:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 801109e:	2b00      	cmp	r3, #0
 80110a0:	d00b      	beq.n	80110ba <Save_Svg+0x6b2>
 80110a2:	4b38      	ldr	r3, [pc, #224]	; (8011184 <Save_Svg+0x77c>)
 80110a4:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80110a8:	461a      	mov	r2, r3
 80110aa:	4613      	mov	r3, r2
 80110ac:	005b      	lsls	r3, r3, #1
 80110ae:	4413      	add	r3, r2
 80110b0:	005b      	lsls	r3, r3, #1
 80110b2:	4a4e      	ldr	r2, [pc, #312]	; (80111ec <Save_Svg+0x7e4>)
 80110b4:	4413      	add	r3, r2
 80110b6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80110b8:	e00a      	b.n	80110d0 <Save_Svg+0x6c8>
 80110ba:	4b32      	ldr	r3, [pc, #200]	; (8011184 <Save_Svg+0x77c>)
 80110bc:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80110c0:	461a      	mov	r2, r3
 80110c2:	4613      	mov	r3, r2
 80110c4:	005b      	lsls	r3, r3, #1
 80110c6:	4413      	add	r3, r2
 80110c8:	005b      	lsls	r3, r3, #1
 80110ca:	4a49      	ldr	r2, [pc, #292]	; (80111f0 <Save_Svg+0x7e8>)
 80110cc:	4413      	add	r3, r2
 80110ce:	63fb      	str	r3, [r7, #60]	; 0x3c
 80110d0:	f107 0314 	add.w	r3, r7, #20
 80110d4:	4619      	mov	r1, r3
 80110d6:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80110d8:	f7fe fc08 	bl	800f8ec <WriteStr>
 80110dc:	4b45      	ldr	r3, [pc, #276]	; (80111f4 <Save_Svg+0x7ec>)
 80110de:	63fb      	str	r3, [r7, #60]	; 0x3c
 80110e0:	f107 0314 	add.w	r3, r7, #20
 80110e4:	4619      	mov	r1, r3
 80110e6:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80110e8:	f7fe fc00 	bl	800f8ec <WriteStr>
 80110ec:	f107 0214 	add.w	r2, r7, #20
 80110f0:	f9b7 3030 	ldrsh.w	r3, [r7, #48]	; 0x30
 80110f4:	4611      	mov	r1, r2
 80110f6:	4618      	mov	r0, r3
 80110f8:	f7fe fb50 	bl	800f79c <WriteVar>
 80110fc:	4b3e      	ldr	r3, [pc, #248]	; (80111f8 <Save_Svg+0x7f0>)
 80110fe:	63fb      	str	r3, [r7, #60]	; 0x3c
 8011100:	f107 0314 	add.w	r3, r7, #20
 8011104:	4619      	mov	r1, r3
 8011106:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8011108:	f7fe fbf0 	bl	800f8ec <WriteStr>
 801110c:	4b1d      	ldr	r3, [pc, #116]	; (8011184 <Save_Svg+0x77c>)
 801110e:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8011112:	00db      	lsls	r3, r3, #3
 8011114:	4a39      	ldr	r2, [pc, #228]	; (80111fc <Save_Svg+0x7f4>)
 8011116:	4413      	add	r3, r2
 8011118:	63fb      	str	r3, [r7, #60]	; 0x3c
 801111a:	f107 0314 	add.w	r3, r7, #20
 801111e:	4619      	mov	r1, r3
 8011120:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8011122:	f7fe fbe3 	bl	800f8ec <WriteStr>
 8011126:	4b36      	ldr	r3, [pc, #216]	; (8011200 <Save_Svg+0x7f8>)
 8011128:	63fb      	str	r3, [r7, #60]	; 0x3c
 801112a:	f107 0314 	add.w	r3, r7, #20
 801112e:	4619      	mov	r1, r3
 8011130:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8011132:	f7fe fbdb 	bl	800f8ec <WriteStr>
 8011136:	4b1d      	ldr	r3, [pc, #116]	; (80111ac <Save_Svg+0x7a4>)
 8011138:	63fb      	str	r3, [r7, #60]	; 0x3c
 801113a:	f107 0314 	add.w	r3, r7, #20
 801113e:	4619      	mov	r1, r3
 8011140:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8011142:	f7fe fbd3 	bl	800f8ec <WriteStr>
 8011146:	4b2f      	ldr	r3, [pc, #188]	; (8011204 <Save_Svg+0x7fc>)
 8011148:	63fb      	str	r3, [r7, #60]	; 0x3c
 801114a:	f107 0314 	add.w	r3, r7, #20
 801114e:	4619      	mov	r1, r3
 8011150:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8011152:	f7fe fbcb 	bl	800f8ec <WriteStr>
 8011156:	4b2c      	ldr	r3, [pc, #176]	; (8011208 <Save_Svg+0x800>)
 8011158:	63fb      	str	r3, [r7, #60]	; 0x3c
 801115a:	f107 0314 	add.w	r3, r7, #20
 801115e:	4619      	mov	r1, r3
 8011160:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8011162:	f7fe fbc3 	bl	800f8ec <WriteStr>
 8011166:	f107 0314 	add.w	r3, r7, #20
 801116a:	4619      	mov	r1, r3
 801116c:	4827      	ldr	r0, [pc, #156]	; (801120c <Save_Svg+0x804>)
 801116e:	f7fe f8e5 	bl	800f33c <ProgFileSec>
 8011172:	4603      	mov	r3, r0
 8011174:	2b00      	cmp	r3, #0
 8011176:	d04b      	beq.n	8011210 <Save_Svg+0x808>
 8011178:	2303      	movs	r3, #3
 801117a:	e07b      	b.n	8011274 <Save_Svg+0x86c>
 801117c:	08000514 	.word	0x08000514
 8011180:	08000518 	.word	0x08000518
 8011184:	20000298 	.word	0x20000298
 8011188:	200001d0 	.word	0x200001d0
 801118c:	0800051c 	.word	0x0800051c
 8011190:	0800052c 	.word	0x0800052c
 8011194:	08000598 	.word	0x08000598
 8011198:	080005c4 	.word	0x080005c4
 801119c:	08000628 	.word	0x08000628
 80111a0:	08000644 	.word	0x08000644
 80111a4:	08000684 	.word	0x08000684
 80111a8:	080006c0 	.word	0x080006c0
 80111ac:	080006f4 	.word	0x080006f4
 80111b0:	080006f8 	.word	0x080006f8
 80111b4:	0800074c 	.word	0x0800074c
 80111b8:	08000764 	.word	0x08000764
 80111bc:	08000768 	.word	0x08000768
 80111c0:	0800077c 	.word	0x0800077c
 80111c4:	08000794 	.word	0x08000794
 80111c8:	08002270 	.word	0x08002270
 80111cc:	080007b0 	.word	0x080007b0
 80111d0:	080007c0 	.word	0x080007c0
 80111d4:	080007cc 	.word	0x080007cc
 80111d8:	08000818 	.word	0x08000818
 80111dc:	08000838 	.word	0x08000838
 80111e0:	0800083c 	.word	0x0800083c
 80111e4:	08000880 	.word	0x08000880
 80111e8:	080008cc 	.word	0x080008cc
 80111ec:	08001a88 	.word	0x08001a88
 80111f0:	08001a4c 	.word	0x08001a4c
 80111f4:	08000914 	.word	0x08000914
 80111f8:	08000918 	.word	0x08000918
 80111fc:	08001ac4 	.word	0x08001ac4
 8011200:	0800092c 	.word	0x0800092c
 8011204:	08000930 	.word	0x08000930
 8011208:	08000940 	.word	0x08000940
 801120c:	200017d4 	.word	0x200017d4
 8011210:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011212:	1c5a      	adds	r2, r3, #1
 8011214:	637a      	str	r2, [r7, #52]	; 0x34
 8011216:	105b      	asrs	r3, r3, #1
 8011218:	b2db      	uxtb	r3, r3
 801121a:	f003 0303 	and.w	r3, r3, #3
 801121e:	b2db      	uxtb	r3, r3
 8011220:	461a      	mov	r2, r3
 8011222:	2102      	movs	r1, #2
 8011224:	f44f 7084 	mov.w	r0, #264	; 0x108
 8011228:	f7fe fa42 	bl	800f6b0 <PrintClk>
 801122c:	4b13      	ldr	r3, [pc, #76]	; (801127c <Save_Svg+0x874>)
 801122e:	6819      	ldr	r1, [r3, #0]
 8011230:	f107 0310 	add.w	r3, r7, #16
 8011234:	f107 0214 	add.w	r2, r7, #20
 8011238:	4811      	ldr	r0, [pc, #68]	; (8011280 <Save_Svg+0x878>)
 801123a:	f7fe f8f3 	bl	800f424 <CloseFile>
 801123e:	4603      	mov	r3, r0
 8011240:	2b00      	cmp	r3, #0
 8011242:	d001      	beq.n	8011248 <Save_Svg+0x840>
 8011244:	2304      	movs	r3, #4
 8011246:	e015      	b.n	8011274 <Save_Svg+0x86c>
 8011248:	4b0e      	ldr	r3, [pc, #56]	; (8011284 <Save_Svg+0x87c>)
 801124a:	f9b3 310c 	ldrsh.w	r3, [r3, #268]	; 0x10c
 801124e:	2b62      	cmp	r3, #98	; 0x62
 8011250:	dc09      	bgt.n	8011266 <Save_Svg+0x85e>
 8011252:	4b0c      	ldr	r3, [pc, #48]	; (8011284 <Save_Svg+0x87c>)
 8011254:	f9b3 310c 	ldrsh.w	r3, [r3, #268]	; 0x10c
 8011258:	b29b      	uxth	r3, r3
 801125a:	3301      	adds	r3, #1
 801125c:	b29b      	uxth	r3, r3
 801125e:	b21a      	sxth	r2, r3
 8011260:	4b08      	ldr	r3, [pc, #32]	; (8011284 <Save_Svg+0x87c>)
 8011262:	f8a3 210c 	strh.w	r2, [r3, #268]	; 0x10c
 8011266:	f44f 729b 	mov.w	r2, #310	; 0x136
 801126a:	2100      	movs	r1, #0
 801126c:	4806      	ldr	r0, [pc, #24]	; (8011288 <Save_Svg+0x880>)
 801126e:	f011 fcf3 	bl	8022c58 <memset>
 8011272:	2300      	movs	r3, #0
 8011274:	4618      	mov	r0, r3
 8011276:	3748      	adds	r7, #72	; 0x48
 8011278:	46bd      	mov	sp, r7
 801127a:	bd80      	pop	{r7, pc}
 801127c:	20000794 	.word	0x20000794
 8011280:	200017d4 	.word	0x200017d4
 8011284:	20000298 	.word	0x20000298
 8011288:	20000008 	.word	0x20000008

0801128c <Read_CalFlag>:
unsigned long err;

FLASH_EraseInitTypeDef Flash_Erase ={0, 1, 1, 1, 2};

 void Read_CalFlag(void)
 {
 801128c:	b480      	push	{r7}
 801128e:	b083      	sub	sp, #12
 8011290:	af00      	add	r7, sp, #0
	  unsigned short* ptr;
	  ptr=(unsigned short*)Kpg_Address;
 8011292:	4b10      	ldr	r3, [pc, #64]	; (80112d4 <Read_CalFlag+0x48>)
 8011294:	607b      	str	r3, [r7, #4]
	  if(*ptr++!=0xaa55)
 8011296:	687b      	ldr	r3, [r7, #4]
 8011298:	1c9a      	adds	r2, r3, #2
 801129a:	607a      	str	r2, [r7, #4]
 801129c:	881b      	ldrh	r3, [r3, #0]
 801129e:	f64a 2255 	movw	r2, #43605	; 0xaa55
 80112a2:	4293      	cmp	r3, r2
 80112a4:	d10e      	bne.n	80112c4 <Read_CalFlag+0x38>
		  return;
	  if(*ptr++!=0x0400)
 80112a6:	687b      	ldr	r3, [r7, #4]
 80112a8:	1c9a      	adds	r2, r3, #2
 80112aa:	607a      	str	r2, [r7, #4]
 80112ac:	881b      	ldrh	r3, [r3, #0]
 80112ae:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80112b2:	d109      	bne.n	80112c8 <Read_CalFlag+0x3c>
		  return;
	  Cal_Flag = *ptr++;
 80112b4:	687b      	ldr	r3, [r7, #4]
 80112b6:	1c9a      	adds	r2, r3, #2
 80112b8:	607a      	str	r2, [r7, #4]
 80112ba:	881b      	ldrh	r3, [r3, #0]
 80112bc:	b2da      	uxtb	r2, r3
 80112be:	4b06      	ldr	r3, [pc, #24]	; (80112d8 <Read_CalFlag+0x4c>)
 80112c0:	701a      	strb	r2, [r3, #0]
	  return;
 80112c2:	e002      	b.n	80112ca <Read_CalFlag+0x3e>
		  return;
 80112c4:	bf00      	nop
 80112c6:	e000      	b.n	80112ca <Read_CalFlag+0x3e>
		  return;
 80112c8:	bf00      	nop
 }
 80112ca:	370c      	adds	r7, #12
 80112cc:	46bd      	mov	sp, r7
 80112ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80112d2:	4770      	bx	lr
 80112d4:	08004000 	.word	0x08004000
 80112d8:	200001b4 	.word	0x200001b4

080112dc <Save_Parameter>:

 /*******************************************************************************
  Save_Parameter:                          Return: 0= Success
 *******************************************************************************/
 char Save_Parameter(void)
 {
 80112dc:	b580      	push	{r7, lr}
 80112de:	b082      	sub	sp, #8
 80112e0:	af00      	add	r7, sp, #0
   short i, j;
   unsigned short* ptr;

   Flash_Erase.Sector = 2;
 80112e2:	4b45      	ldr	r3, [pc, #276]	; (80113f8 <Save_Parameter+0x11c>)
 80112e4:	2202      	movs	r2, #2
 80112e6:	609a      	str	r2, [r3, #8]

   HAL_FLASH_Unlock();
 80112e8:	f008 f820 	bl	801932c <HAL_FLASH_Unlock>
   j=HAL_FLASHEx_Erase( &Flash_Erase, &err);
 80112ec:	4943      	ldr	r1, [pc, #268]	; (80113fc <Save_Parameter+0x120>)
 80112ee:	4842      	ldr	r0, [pc, #264]	; (80113f8 <Save_Parameter+0x11c>)
 80112f0:	f008 f98e 	bl	8019610 <HAL_FLASHEx_Erase>
 80112f4:	4603      	mov	r3, r0
 80112f6:	80bb      	strh	r3, [r7, #4]
   if(j== HAL_OK)
 80112f8:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80112fc:	2b00      	cmp	r3, #0
 80112fe:	d173      	bne.n	80113e8 <Save_Parameter+0x10c>
   {
     ptr=F_Buff;
 8011300:	4b3f      	ldr	r3, [pc, #252]	; (8011400 <Save_Parameter+0x124>)
 8011302:	603b      	str	r3, [r7, #0]
     *ptr++=0x0400;                              //Ver:4.00
 8011304:	683b      	ldr	r3, [r7, #0]
 8011306:	1c9a      	adds	r2, r3, #2
 8011308:	603a      	str	r2, [r7, #0]
 801130a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 801130e:	801a      	strh	r2, [r3, #0]
     *ptr++=Current;
 8011310:	4b3c      	ldr	r3, [pc, #240]	; (8011404 <Save_Parameter+0x128>)
 8011312:	f9b3 1000 	ldrsh.w	r1, [r3]
 8011316:	683b      	ldr	r3, [r7, #0]
 8011318:	1c9a      	adds	r2, r3, #2
 801131a:	603a      	str	r2, [r7, #0]
 801131c:	b28a      	uxth	r2, r1
 801131e:	801a      	strh	r2, [r3, #0]
     *ptr++=Status;
 8011320:	4b39      	ldr	r3, [pc, #228]	; (8011408 <Save_Parameter+0x12c>)
 8011322:	f9b3 1000 	ldrsh.w	r1, [r3]
 8011326:	683b      	ldr	r3, [r7, #0]
 8011328:	1c9a      	adds	r2, r3, #2
 801132a:	603a      	str	r2, [r7, #0]
 801132c:	b28a      	uxth	r2, r1
 801132e:	801a      	strh	r2, [r3, #0]
     for(i=0;i<42;i++)
 8011330:	2300      	movs	r3, #0
 8011332:	80fb      	strh	r3, [r7, #6]
 8011334:	e011      	b.n	801135a <Save_Parameter+0x7e>
    	 *ptr++=List[i].Val;
 8011336:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801133a:	4a34      	ldr	r2, [pc, #208]	; (801140c <Save_Parameter+0x130>)
 801133c:	00db      	lsls	r3, r3, #3
 801133e:	4413      	add	r3, r2
 8011340:	f9b3 1004 	ldrsh.w	r1, [r3, #4]
 8011344:	683b      	ldr	r3, [r7, #0]
 8011346:	1c9a      	adds	r2, r3, #2
 8011348:	603a      	str	r2, [r7, #0]
 801134a:	b28a      	uxth	r2, r1
 801134c:	801a      	strh	r2, [r3, #0]
     for(i=0;i<42;i++)
 801134e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8011352:	b29b      	uxth	r3, r3
 8011354:	3301      	adds	r3, #1
 8011356:	b29b      	uxth	r3, r3
 8011358:	80fb      	strh	r3, [r7, #6]
 801135a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801135e:	2b29      	cmp	r3, #41	; 0x29
 8011360:	dde9      	ble.n	8011336 <Save_Parameter+0x5a>
     for(i=0;i<8;i++)
 8011362:	2300      	movs	r3, #0
 8011364:	80fb      	strh	r3, [r7, #6]
 8011366:	e00f      	b.n	8011388 <Save_Parameter+0xac>
    	 *ptr++=MenuNow[i];
 8011368:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801136c:	4a28      	ldr	r2, [pc, #160]	; (8011410 <Save_Parameter+0x134>)
 801136e:	f932 1013 	ldrsh.w	r1, [r2, r3, lsl #1]
 8011372:	683b      	ldr	r3, [r7, #0]
 8011374:	1c9a      	adds	r2, r3, #2
 8011376:	603a      	str	r2, [r7, #0]
 8011378:	b28a      	uxth	r2, r1
 801137a:	801a      	strh	r2, [r3, #0]
     for(i=0;i<8;i++)
 801137c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8011380:	b29b      	uxth	r3, r3
 8011382:	3301      	adds	r3, #1
 8011384:	b29b      	uxth	r3, r3
 8011386:	80fb      	strh	r3, [r7, #6]
 8011388:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801138c:	2b07      	cmp	r3, #7
 801138e:	ddeb      	ble.n	8011368 <Save_Parameter+0x8c>
     *ptr++=0xaa55;
 8011390:	683b      	ldr	r3, [r7, #0]
 8011392:	1c9a      	adds	r2, r3, #2
 8011394:	603a      	str	r2, [r7, #0]
 8011396:	f64a 2255 	movw	r2, #43605	; 0xaa55
 801139a:	801a      	strh	r2, [r3, #0]
     ptr=F_Buff;
 801139c:	4b18      	ldr	r3, [pc, #96]	; (8011400 <Save_Parameter+0x124>)
 801139e:	603b      	str	r3, [r7, #0]
     for(i=0; i<256; i+=2)
 80113a0:	2300      	movs	r3, #0
 80113a2:	80fb      	strh	r3, [r7, #6]
 80113a4:	e01a      	b.n	80113dc <Save_Parameter+0x100>
     {                      //128 SHORT
       j= HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, Page_Address+i, *ptr++);
 80113a6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80113aa:	f103 6300 	add.w	r3, r3, #134217728	; 0x8000000
 80113ae:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 80113b2:	4619      	mov	r1, r3
 80113b4:	683b      	ldr	r3, [r7, #0]
 80113b6:	1c9a      	adds	r2, r3, #2
 80113b8:	603a      	str	r2, [r7, #0]
 80113ba:	881b      	ldrh	r3, [r3, #0]
 80113bc:	b29a      	uxth	r2, r3
 80113be:	f04f 0300 	mov.w	r3, #0
 80113c2:	2001      	movs	r0, #1
 80113c4:	f007 ff5e 	bl	8019284 <HAL_FLASH_Program>
 80113c8:	4603      	mov	r3, r0
 80113ca:	80bb      	strh	r3, [r7, #4]
       if(j!= HAL_OK)
 80113cc:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80113d0:	2b00      	cmp	r3, #0
 80113d2:	d108      	bne.n	80113e6 <Save_Parameter+0x10a>
     for(i=0; i<256; i+=2)
 80113d4:	88fb      	ldrh	r3, [r7, #6]
 80113d6:	3302      	adds	r3, #2
 80113d8:	b29b      	uxth	r3, r3
 80113da:	80fb      	strh	r3, [r7, #6]
 80113dc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80113e0:	2bff      	cmp	r3, #255	; 0xff
 80113e2:	dde0      	ble.n	80113a6 <Save_Parameter+0xca>
 80113e4:	e000      	b.n	80113e8 <Save_Parameter+0x10c>
    	   break;
 80113e6:	bf00      	nop
     }
   }
   HAL_FLASH_Lock();
 80113e8:	f007 ffc2 	bl	8019370 <HAL_FLASH_Lock>

   return j;
 80113ec:	88bb      	ldrh	r3, [r7, #4]
 80113ee:	b2db      	uxtb	r3, r3
 }
 80113f0:	4618      	mov	r0, r3
 80113f2:	3708      	adds	r7, #8
 80113f4:	46bd      	mov	sp, r7
 80113f6:	bd80      	pop	{r7, pc}
 80113f8:	200001b8 	.word	0x200001b8
 80113fc:	20002814 	.word	0x20002814
 8011400:	200017d4 	.word	0x200017d4
 8011404:	2000079e 	.word	0x2000079e
 8011408:	200007a0 	.word	0x200007a0
 801140c:	20000298 	.word	0x20000298
 8011410:	20000538 	.word	0x20000538

08011414 <Read_Parameter>:
 /*******************************************************************************
 Read_Parameter:
 *******************************************************************************/
 void Read_Parameter(void)
 {
 8011414:	b480      	push	{r7}
 8011416:	b083      	sub	sp, #12
 8011418:	af00      	add	r7, sp, #0
   short i;
   unsigned short* ptr;
   ptr=(unsigned short*)(Page_Address+55*2); //94*2-40
 801141a:	4b3f      	ldr	r3, [pc, #252]	; (8011518 <Read_Parameter+0x104>)
 801141c:	603b      	str	r3, [r7, #0]
   TIM_BASE_Val=List[TIM_BASE].Val;
 801141e:	4b3f      	ldr	r3, [pc, #252]	; (801151c <Read_Parameter+0x108>)
 8011420:	f9b3 203c 	ldrsh.w	r2, [r3, #60]	; 0x3c
 8011424:	4b3e      	ldr	r3, [pc, #248]	; (8011520 <Read_Parameter+0x10c>)
 8011426:	801a      	strh	r2, [r3, #0]
   List[TIM_BASE].Val=0;
 8011428:	4b3c      	ldr	r3, [pc, #240]	; (801151c <Read_Parameter+0x108>)
 801142a:	2200      	movs	r2, #0
 801142c:	879a      	strh	r2, [r3, #60]	; 0x3c
   if(*ptr!=0xaa55)
 801142e:	683b      	ldr	r3, [r7, #0]
 8011430:	881b      	ldrh	r3, [r3, #0]
 8011432:	f64a 2255 	movw	r2, #43605	; 0xaa55
 8011436:	4293      	cmp	r3, r2
 8011438:	d166      	bne.n	8011508 <Read_Parameter+0xf4>
	   return ;
   ptr=(unsigned short*)Page_Address;
 801143a:	4b3a      	ldr	r3, [pc, #232]	; (8011524 <Read_Parameter+0x110>)
 801143c:	603b      	str	r3, [r7, #0]
   if(*ptr++!=0x0400)
 801143e:	683b      	ldr	r3, [r7, #0]
 8011440:	1c9a      	adds	r2, r3, #2
 8011442:	603a      	str	r2, [r7, #0]
 8011444:	881b      	ldrh	r3, [r3, #0]
 8011446:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801144a:	d15f      	bne.n	801150c <Read_Parameter+0xf8>
	   return ;
   Current=*ptr++;
 801144c:	683b      	ldr	r3, [r7, #0]
 801144e:	1c9a      	adds	r2, r3, #2
 8011450:	603a      	str	r2, [r7, #0]
 8011452:	881b      	ldrh	r3, [r3, #0]
 8011454:	b21a      	sxth	r2, r3
 8011456:	4b34      	ldr	r3, [pc, #208]	; (8011528 <Read_Parameter+0x114>)
 8011458:	801a      	strh	r2, [r3, #0]
   List[MenuNow[Current]].Flg |= UPD;
 801145a:	4b33      	ldr	r3, [pc, #204]	; (8011528 <Read_Parameter+0x114>)
 801145c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8011460:	461a      	mov	r2, r3
 8011462:	4b32      	ldr	r3, [pc, #200]	; (801152c <Read_Parameter+0x118>)
 8011464:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8011468:	4a2c      	ldr	r2, [pc, #176]	; (801151c <Read_Parameter+0x108>)
 801146a:	00db      	lsls	r3, r3, #3
 801146c:	4413      	add	r3, r2
 801146e:	799b      	ldrb	r3, [r3, #6]
 8011470:	4a2d      	ldr	r2, [pc, #180]	; (8011528 <Read_Parameter+0x114>)
 8011472:	f9b2 2000 	ldrsh.w	r2, [r2]
 8011476:	4611      	mov	r1, r2
 8011478:	4a2c      	ldr	r2, [pc, #176]	; (801152c <Read_Parameter+0x118>)
 801147a:	f932 2011 	ldrsh.w	r2, [r2, r1, lsl #1]
 801147e:	4610      	mov	r0, r2
 8011480:	f043 0320 	orr.w	r3, r3, #32
 8011484:	b2d9      	uxtb	r1, r3
 8011486:	4a25      	ldr	r2, [pc, #148]	; (801151c <Read_Parameter+0x108>)
 8011488:	00c3      	lsls	r3, r0, #3
 801148a:	4413      	add	r3, r2
 801148c:	460a      	mov	r2, r1
 801148e:	719a      	strb	r2, [r3, #6]
   ptr++;
 8011490:	683b      	ldr	r3, [r7, #0]
 8011492:	3302      	adds	r3, #2
 8011494:	603b      	str	r3, [r7, #0]
   for(i=0;i<42;i++)
 8011496:	2300      	movs	r3, #0
 8011498:	80fb      	strh	r3, [r7, #6]
 801149a:	e011      	b.n	80114c0 <Read_Parameter+0xac>
	   List[i].Val=*ptr++;
 801149c:	683b      	ldr	r3, [r7, #0]
 801149e:	1c9a      	adds	r2, r3, #2
 80114a0:	603a      	str	r2, [r7, #0]
 80114a2:	881a      	ldrh	r2, [r3, #0]
 80114a4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80114a8:	b211      	sxth	r1, r2
 80114aa:	4a1c      	ldr	r2, [pc, #112]	; (801151c <Read_Parameter+0x108>)
 80114ac:	00db      	lsls	r3, r3, #3
 80114ae:	4413      	add	r3, r2
 80114b0:	460a      	mov	r2, r1
 80114b2:	809a      	strh	r2, [r3, #4]
   for(i=0;i<42;i++)
 80114b4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80114b8:	b29b      	uxth	r3, r3
 80114ba:	3301      	adds	r3, #1
 80114bc:	b29b      	uxth	r3, r3
 80114be:	80fb      	strh	r3, [r7, #6]
 80114c0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80114c4:	2b29      	cmp	r3, #41	; 0x29
 80114c6:	dde9      	ble.n	801149c <Read_Parameter+0x88>
   for(i=0;i<8;i++)
 80114c8:	2300      	movs	r3, #0
 80114ca:	80fb      	strh	r3, [r7, #6]
 80114cc:	e00f      	b.n	80114ee <Read_Parameter+0xda>
	   MenuNow[i]=*ptr++;
 80114ce:	683b      	ldr	r3, [r7, #0]
 80114d0:	1c9a      	adds	r2, r3, #2
 80114d2:	603a      	str	r2, [r7, #0]
 80114d4:	881a      	ldrh	r2, [r3, #0]
 80114d6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80114da:	b211      	sxth	r1, r2
 80114dc:	4a13      	ldr	r2, [pc, #76]	; (801152c <Read_Parameter+0x118>)
 80114de:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
   for(i=0;i<8;i++)
 80114e2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80114e6:	b29b      	uxth	r3, r3
 80114e8:	3301      	adds	r3, #1
 80114ea:	b29b      	uxth	r3, r3
 80114ec:	80fb      	strh	r3, [r7, #6]
 80114ee:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80114f2:	2b07      	cmp	r3, #7
 80114f4:	ddeb      	ble.n	80114ce <Read_Parameter+0xba>
   TIM_BASE_Val=List[TIM_BASE].Val;
 80114f6:	4b09      	ldr	r3, [pc, #36]	; (801151c <Read_Parameter+0x108>)
 80114f8:	f9b3 203c 	ldrsh.w	r2, [r3, #60]	; 0x3c
 80114fc:	4b08      	ldr	r3, [pc, #32]	; (8011520 <Read_Parameter+0x10c>)
 80114fe:	801a      	strh	r2, [r3, #0]
   List[TIM_BASE].Val=0;
 8011500:	4b06      	ldr	r3, [pc, #24]	; (801151c <Read_Parameter+0x108>)
 8011502:	2200      	movs	r2, #0
 8011504:	879a      	strh	r2, [r3, #60]	; 0x3c

   return ;
 8011506:	e002      	b.n	801150e <Read_Parameter+0xfa>
	   return ;
 8011508:	bf00      	nop
 801150a:	e000      	b.n	801150e <Read_Parameter+0xfa>
	   return ;
 801150c:	bf00      	nop
 }
 801150e:	370c      	adds	r7, #12
 8011510:	46bd      	mov	sp, r7
 8011512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011516:	4770      	bx	lr
 8011518:	0800806e 	.word	0x0800806e
 801151c:	20000298 	.word	0x20000298
 8011520:	20002810 	.word	0x20002810
 8011524:	08008000 	.word	0x08008000
 8011528:	2000079e 	.word	0x2000079e
 801152c:	20000538 	.word	0x20000538

08011530 <Save_Kpg>:
 /*******************************************************************************
  Save_Kpg:                       Return: 0= Success
 *******************************************************************************/
 char Save_Kpg(void)
 {
 8011530:	b580      	push	{r7, lr}
 8011532:	b082      	sub	sp, #8
 8011534:	af00      	add	r7, sp, #0
   short i, j;
   unsigned short* ptr;

   Flash_Erase.Sector = 1;
 8011536:	4b34      	ldr	r3, [pc, #208]	; (8011608 <Save_Kpg+0xd8>)
 8011538:	2201      	movs	r2, #1
 801153a:	609a      	str	r2, [r3, #8]

   HAL_FLASH_Unlock();
 801153c:	f007 fef6 	bl	801932c <HAL_FLASH_Unlock>
   j=HAL_FLASHEx_Erase( &Flash_Erase, &err);
 8011540:	4932      	ldr	r1, [pc, #200]	; (801160c <Save_Kpg+0xdc>)
 8011542:	4831      	ldr	r0, [pc, #196]	; (8011608 <Save_Kpg+0xd8>)
 8011544:	f008 f864 	bl	8019610 <HAL_FLASHEx_Erase>
 8011548:	4603      	mov	r3, r0
 801154a:	80bb      	strh	r3, [r7, #4]
   if(j== HAL_OK)
 801154c:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8011550:	2b00      	cmp	r3, #0
 8011552:	d151      	bne.n	80115f8 <Save_Kpg+0xc8>
   {
     ptr=F_Buff;
 8011554:	4b2e      	ldr	r3, [pc, #184]	; (8011610 <Save_Kpg+0xe0>)
 8011556:	603b      	str	r3, [r7, #0]
     *ptr++=0xaa55;
 8011558:	683b      	ldr	r3, [r7, #0]
 801155a:	1c9a      	adds	r2, r3, #2
 801155c:	603a      	str	r2, [r7, #0]
 801155e:	f64a 2255 	movw	r2, #43605	; 0xaa55
 8011562:	801a      	strh	r2, [r3, #0]
     *ptr++=0x0400;                              //Ver:3.00
 8011564:	683b      	ldr	r3, [r7, #0]
 8011566:	1c9a      	adds	r2, r3, #2
 8011568:	603a      	str	r2, [r7, #0]
 801156a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 801156e:	801a      	strh	r2, [r3, #0]
     *ptr++=Cal_Flag;
 8011570:	4b28      	ldr	r3, [pc, #160]	; (8011614 <Save_Kpg+0xe4>)
 8011572:	7819      	ldrb	r1, [r3, #0]
 8011574:	683b      	ldr	r3, [r7, #0]
 8011576:	1c9a      	adds	r2, r3, #2
 8011578:	603a      	str	r2, [r7, #0]
 801157a:	b28a      	uxth	r2, r1
 801157c:	801a      	strh	r2, [r3, #0]
     for(i=0;i<3;i++)
 801157e:	2300      	movs	r3, #0
 8011580:	80fb      	strh	r3, [r7, #6]
 8011582:	e00f      	b.n	80115a4 <Save_Kpg+0x74>
    	 *ptr++=Kpg[i];
 8011584:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8011588:	4a23      	ldr	r2, [pc, #140]	; (8011618 <Save_Kpg+0xe8>)
 801158a:	f932 1013 	ldrsh.w	r1, [r2, r3, lsl #1]
 801158e:	683b      	ldr	r3, [r7, #0]
 8011590:	1c9a      	adds	r2, r3, #2
 8011592:	603a      	str	r2, [r7, #0]
 8011594:	b28a      	uxth	r2, r1
 8011596:	801a      	strh	r2, [r3, #0]
     for(i=0;i<3;i++)
 8011598:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801159c:	b29b      	uxth	r3, r3
 801159e:	3301      	adds	r3, #1
 80115a0:	b29b      	uxth	r3, r3
 80115a2:	80fb      	strh	r3, [r7, #6]
 80115a4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80115a8:	2b02      	cmp	r3, #2
 80115aa:	ddeb      	ble.n	8011584 <Save_Kpg+0x54>
     ptr=F_Buff;
 80115ac:	4b18      	ldr	r3, [pc, #96]	; (8011610 <Save_Kpg+0xe0>)
 80115ae:	603b      	str	r3, [r7, #0]
     for(i=0; i<256; i+=2)
 80115b0:	2300      	movs	r3, #0
 80115b2:	80fb      	strh	r3, [r7, #6]
 80115b4:	e01a      	b.n	80115ec <Save_Kpg+0xbc>
     {                      //128 SHORT
       j= HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, Kpg_Address+i, *ptr++);
 80115b6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80115ba:	f103 6300 	add.w	r3, r3, #134217728	; 0x8000000
 80115be:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 80115c2:	4619      	mov	r1, r3
 80115c4:	683b      	ldr	r3, [r7, #0]
 80115c6:	1c9a      	adds	r2, r3, #2
 80115c8:	603a      	str	r2, [r7, #0]
 80115ca:	881b      	ldrh	r3, [r3, #0]
 80115cc:	b29a      	uxth	r2, r3
 80115ce:	f04f 0300 	mov.w	r3, #0
 80115d2:	2001      	movs	r0, #1
 80115d4:	f007 fe56 	bl	8019284 <HAL_FLASH_Program>
 80115d8:	4603      	mov	r3, r0
 80115da:	80bb      	strh	r3, [r7, #4]
       if(j!= HAL_OK)
 80115dc:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80115e0:	2b00      	cmp	r3, #0
 80115e2:	d108      	bne.n	80115f6 <Save_Kpg+0xc6>
     for(i=0; i<256; i+=2)
 80115e4:	88fb      	ldrh	r3, [r7, #6]
 80115e6:	3302      	adds	r3, #2
 80115e8:	b29b      	uxth	r3, r3
 80115ea:	80fb      	strh	r3, [r7, #6]
 80115ec:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80115f0:	2bff      	cmp	r3, #255	; 0xff
 80115f2:	dde0      	ble.n	80115b6 <Save_Kpg+0x86>
 80115f4:	e000      	b.n	80115f8 <Save_Kpg+0xc8>
    	   break;
 80115f6:	bf00      	nop
     }
   }
   HAL_FLASH_Lock();
 80115f8:	f007 feba 	bl	8019370 <HAL_FLASH_Lock>
   return j;
 80115fc:	88bb      	ldrh	r3, [r7, #4]
 80115fe:	b2db      	uxtb	r3, r3
 }
 8011600:	4618      	mov	r0, r3
 8011602:	3708      	adds	r7, #8
 8011604:	46bd      	mov	sp, r7
 8011606:	bd80      	pop	{r7, pc}
 8011608:	200001b8 	.word	0x200001b8
 801160c:	20002814 	.word	0x20002814
 8011610:	200017d4 	.word	0x200017d4
 8011614:	200001b4 	.word	0x200001b4
 8011618:	2000056c 	.word	0x2000056c

0801161c <Read_Kpg>:
 /*******************************************************************************
 Read_Kpg:
 *******************************************************************************/
 void Read_Kpg(void)
 {
 801161c:	b480      	push	{r7}
 801161e:	b083      	sub	sp, #12
 8011620:	af00      	add	r7, sp, #0
   short i;
   unsigned short* ptr;
   ptr=(unsigned short*)Kpg_Address;
 8011622:	4b1c      	ldr	r3, [pc, #112]	; (8011694 <Read_Kpg+0x78>)
 8011624:	603b      	str	r3, [r7, #0]
   if(*ptr++!=0xaa55)
 8011626:	683b      	ldr	r3, [r7, #0]
 8011628:	1c9a      	adds	r2, r3, #2
 801162a:	603a      	str	r2, [r7, #0]
 801162c:	881b      	ldrh	r3, [r3, #0]
 801162e:	f64a 2255 	movw	r2, #43605	; 0xaa55
 8011632:	4293      	cmp	r3, r2
 8011634:	d125      	bne.n	8011682 <Read_Kpg+0x66>
	   return ;
   if(*ptr++!=0x0400)
 8011636:	683b      	ldr	r3, [r7, #0]
 8011638:	1c9a      	adds	r2, r3, #2
 801163a:	603a      	str	r2, [r7, #0]
 801163c:	881b      	ldrh	r3, [r3, #0]
 801163e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8011642:	d120      	bne.n	8011686 <Read_Kpg+0x6a>
	   return ;
   Cal_Flag = *ptr++;
 8011644:	683b      	ldr	r3, [r7, #0]
 8011646:	1c9a      	adds	r2, r3, #2
 8011648:	603a      	str	r2, [r7, #0]
 801164a:	881b      	ldrh	r3, [r3, #0]
 801164c:	b2da      	uxtb	r2, r3
 801164e:	4b12      	ldr	r3, [pc, #72]	; (8011698 <Read_Kpg+0x7c>)
 8011650:	701a      	strb	r2, [r3, #0]
   for(i=0;i< 3;i++)
 8011652:	2300      	movs	r3, #0
 8011654:	80fb      	strh	r3, [r7, #6]
 8011656:	e00f      	b.n	8011678 <Read_Kpg+0x5c>
       Kpg[i] = *ptr++;  //CH_A,CH_B
 8011658:	683b      	ldr	r3, [r7, #0]
 801165a:	1c9a      	adds	r2, r3, #2
 801165c:	603a      	str	r2, [r7, #0]
 801165e:	881a      	ldrh	r2, [r3, #0]
 8011660:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8011664:	b211      	sxth	r1, r2
 8011666:	4a0d      	ldr	r2, [pc, #52]	; (801169c <Read_Kpg+0x80>)
 8011668:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
   for(i=0;i< 3;i++)
 801166c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8011670:	b29b      	uxth	r3, r3
 8011672:	3301      	adds	r3, #1
 8011674:	b29b      	uxth	r3, r3
 8011676:	80fb      	strh	r3, [r7, #6]
 8011678:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801167c:	2b02      	cmp	r3, #2
 801167e:	ddeb      	ble.n	8011658 <Read_Kpg+0x3c>
   return ;
 8011680:	e002      	b.n	8011688 <Read_Kpg+0x6c>
	   return ;
 8011682:	bf00      	nop
 8011684:	e000      	b.n	8011688 <Read_Kpg+0x6c>
	   return ;
 8011686:	bf00      	nop
 }
 8011688:	370c      	adds	r7, #12
 801168a:	46bd      	mov	sp, r7
 801168c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011690:	4770      	bx	lr
 8011692:	bf00      	nop
 8011694:	08004000 	.word	0x08004000
 8011698:	200001b4 	.word	0x200001b4
 801169c:	2000056c 	.word	0x2000056c

080116a0 <Restore>:

 void Restore(void)
 {
 80116a0:	b580      	push	{r7, lr}
 80116a2:	b082      	sub	sp, #8
 80116a4:	af00      	add	r7, sp, #0
   short i;
   TIM_BASE_Val=List[TIM_BASE].Val;
 80116a6:	4b2d      	ldr	r3, [pc, #180]	; (801175c <Restore+0xbc>)
 80116a8:	f9b3 203c 	ldrsh.w	r2, [r3, #60]	; 0x3c
 80116ac:	4b2c      	ldr	r3, [pc, #176]	; (8011760 <Restore+0xc0>)
 80116ae:	801a      	strh	r2, [r3, #0]
   Current=0;
 80116b0:	4b2c      	ldr	r3, [pc, #176]	; (8011764 <Restore+0xc4>)
 80116b2:	2200      	movs	r2, #0
 80116b4:	801a      	strh	r2, [r3, #0]
   List[MenuNow[Current]].Flg |= UPD;
 80116b6:	4b2b      	ldr	r3, [pc, #172]	; (8011764 <Restore+0xc4>)
 80116b8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80116bc:	461a      	mov	r2, r3
 80116be:	4b2a      	ldr	r3, [pc, #168]	; (8011768 <Restore+0xc8>)
 80116c0:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 80116c4:	4a25      	ldr	r2, [pc, #148]	; (801175c <Restore+0xbc>)
 80116c6:	00db      	lsls	r3, r3, #3
 80116c8:	4413      	add	r3, r2
 80116ca:	799b      	ldrb	r3, [r3, #6]
 80116cc:	4a25      	ldr	r2, [pc, #148]	; (8011764 <Restore+0xc4>)
 80116ce:	f9b2 2000 	ldrsh.w	r2, [r2]
 80116d2:	4611      	mov	r1, r2
 80116d4:	4a24      	ldr	r2, [pc, #144]	; (8011768 <Restore+0xc8>)
 80116d6:	f932 2011 	ldrsh.w	r2, [r2, r1, lsl #1]
 80116da:	4610      	mov	r0, r2
 80116dc:	f043 0320 	orr.w	r3, r3, #32
 80116e0:	b2d9      	uxtb	r1, r3
 80116e2:	4a1e      	ldr	r2, [pc, #120]	; (801175c <Restore+0xbc>)
 80116e4:	00c3      	lsls	r3, r0, #3
 80116e6:	4413      	add	r3, r2
 80116e8:	460a      	mov	r2, r1
 80116ea:	719a      	strb	r2, [r3, #6]
   for(i=0;i<42;i++)
 80116ec:	2300      	movs	r3, #0
 80116ee:	80fb      	strh	r3, [r7, #6]
 80116f0:	e013      	b.n	801171a <Restore+0x7a>
	   List[i].Val= List_c[i].Val;
 80116f2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80116f6:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80116fa:	491c      	ldr	r1, [pc, #112]	; (801176c <Restore+0xcc>)
 80116fc:	00db      	lsls	r3, r3, #3
 80116fe:	440b      	add	r3, r1
 8011700:	f9b3 0004 	ldrsh.w	r0, [r3, #4]
 8011704:	4915      	ldr	r1, [pc, #84]	; (801175c <Restore+0xbc>)
 8011706:	00d3      	lsls	r3, r2, #3
 8011708:	440b      	add	r3, r1
 801170a:	4602      	mov	r2, r0
 801170c:	809a      	strh	r2, [r3, #4]
   for(i=0;i<42;i++)
 801170e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8011712:	b29b      	uxth	r3, r3
 8011714:	3301      	adds	r3, #1
 8011716:	b29b      	uxth	r3, r3
 8011718:	80fb      	strh	r3, [r7, #6]
 801171a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801171e:	2b29      	cmp	r3, #41	; 0x29
 8011720:	dde7      	ble.n	80116f2 <Restore+0x52>
   for(i=0;i<8;i++)
 8011722:	2300      	movs	r3, #0
 8011724:	80fb      	strh	r3, [r7, #6]
 8011726:	e00f      	b.n	8011748 <Restore+0xa8>
	   MenuNow[i]= MenuNow_C[i];
 8011728:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 801172c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8011730:	490f      	ldr	r1, [pc, #60]	; (8011770 <Restore+0xd0>)
 8011732:	f931 1012 	ldrsh.w	r1, [r1, r2, lsl #1]
 8011736:	4a0c      	ldr	r2, [pc, #48]	; (8011768 <Restore+0xc8>)
 8011738:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
   for(i=0;i<8;i++)
 801173c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8011740:	b29b      	uxth	r3, r3
 8011742:	3301      	adds	r3, #1
 8011744:	b29b      	uxth	r3, r3
 8011746:	80fb      	strh	r3, [r7, #6]
 8011748:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801174c:	2b07      	cmp	r3, #7
 801174e:	ddeb      	ble.n	8011728 <Restore+0x88>
   Update_Title();
 8011750:	f000 fdec 	bl	801232c <Update_Title>
}
 8011754:	bf00      	nop
 8011756:	3708      	adds	r7, #8
 8011758:	46bd      	mov	sp, r7
 801175a:	bd80      	pop	{r7, pc}
 801175c:	20000298 	.word	0x20000298
 8011760:	20002810 	.word	0x20002810
 8011764:	2000079e 	.word	0x2000079e
 8011768:	20000538 	.word	0x20000538
 801176c:	200003e8 	.word	0x200003e8
 8011770:	08001ef8 	.word	0x08001ef8

08011774 <Restore_CalPar>:

 void Restore_CalPar(void)
 {
 8011774:	b580      	push	{r7, lr}
 8011776:	b082      	sub	sp, #8
 8011778:	af00      	add	r7, sp, #0
   short i = 0;
 801177a:	2300      	movs	r3, #0
 801177c:	80fb      	strh	r3, [r7, #6]
   List[SMPL_DPTH].Flg |= UPD;
 801177e:	4b47      	ldr	r3, [pc, #284]	; (801189c <Restore_CalPar+0x128>)
 8011780:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 8011784:	f043 0320 	orr.w	r3, r3, #32
 8011788:	b2da      	uxtb	r2, r3
 801178a:	4b44      	ldr	r3, [pc, #272]	; (801189c <Restore_CalPar+0x128>)
 801178c:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
   TIM_BASE_Val=List[TIM_BASE].Val;
 8011790:	4b42      	ldr	r3, [pc, #264]	; (801189c <Restore_CalPar+0x128>)
 8011792:	f9b3 203c 	ldrsh.w	r2, [r3, #60]	; 0x3c
 8011796:	4b42      	ldr	r3, [pc, #264]	; (80118a0 <Restore_CalPar+0x12c>)
 8011798:	801a      	strh	r2, [r3, #0]
   List[TIM_BASE].Val=0;
 801179a:	4b40      	ldr	r3, [pc, #256]	; (801189c <Restore_CalPar+0x128>)
 801179c:	2200      	movs	r2, #0
 801179e:	879a      	strh	r2, [r3, #60]	; 0x3c
   Current=0;
 80117a0:	4b40      	ldr	r3, [pc, #256]	; (80118a4 <Restore_CalPar+0x130>)
 80117a2:	2200      	movs	r2, #0
 80117a4:	801a      	strh	r2, [r3, #0]
   List[MenuNow[Current]].Flg |= UPD;
 80117a6:	4b3f      	ldr	r3, [pc, #252]	; (80118a4 <Restore_CalPar+0x130>)
 80117a8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80117ac:	461a      	mov	r2, r3
 80117ae:	4b3e      	ldr	r3, [pc, #248]	; (80118a8 <Restore_CalPar+0x134>)
 80117b0:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 80117b4:	4a39      	ldr	r2, [pc, #228]	; (801189c <Restore_CalPar+0x128>)
 80117b6:	00db      	lsls	r3, r3, #3
 80117b8:	4413      	add	r3, r2
 80117ba:	799b      	ldrb	r3, [r3, #6]
 80117bc:	4a39      	ldr	r2, [pc, #228]	; (80118a4 <Restore_CalPar+0x130>)
 80117be:	f9b2 2000 	ldrsh.w	r2, [r2]
 80117c2:	4611      	mov	r1, r2
 80117c4:	4a38      	ldr	r2, [pc, #224]	; (80118a8 <Restore_CalPar+0x134>)
 80117c6:	f932 2011 	ldrsh.w	r2, [r2, r1, lsl #1]
 80117ca:	4610      	mov	r0, r2
 80117cc:	f043 0320 	orr.w	r3, r3, #32
 80117d0:	b2d9      	uxtb	r1, r3
 80117d2:	4a32      	ldr	r2, [pc, #200]	; (801189c <Restore_CalPar+0x128>)
 80117d4:	00c3      	lsls	r3, r0, #3
 80117d6:	4413      	add	r3, r2
 80117d8:	460a      	mov	r2, r1
 80117da:	719a      	strb	r2, [r3, #6]
   for(i=0;i<42;i++) List[i].Val= List_c[i].Val;
 80117dc:	2300      	movs	r3, #0
 80117de:	80fb      	strh	r3, [r7, #6]
 80117e0:	e013      	b.n	801180a <Restore_CalPar+0x96>
 80117e2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80117e6:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80117ea:	4930      	ldr	r1, [pc, #192]	; (80118ac <Restore_CalPar+0x138>)
 80117ec:	00db      	lsls	r3, r3, #3
 80117ee:	440b      	add	r3, r1
 80117f0:	f9b3 0004 	ldrsh.w	r0, [r3, #4]
 80117f4:	4929      	ldr	r1, [pc, #164]	; (801189c <Restore_CalPar+0x128>)
 80117f6:	00d3      	lsls	r3, r2, #3
 80117f8:	440b      	add	r3, r1
 80117fa:	4602      	mov	r2, r0
 80117fc:	809a      	strh	r2, [r3, #4]
 80117fe:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8011802:	b29b      	uxth	r3, r3
 8011804:	3301      	adds	r3, #1
 8011806:	b29b      	uxth	r3, r3
 8011808:	80fb      	strh	r3, [r7, #6]
 801180a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801180e:	2b29      	cmp	r3, #41	; 0x29
 8011810:	dde7      	ble.n	80117e2 <Restore_CalPar+0x6e>
   for(i=0;i<8;i++)  MenuNow[i]= MenuNow_C[i];
 8011812:	2300      	movs	r3, #0
 8011814:	80fb      	strh	r3, [r7, #6]
 8011816:	e00f      	b.n	8011838 <Restore_CalPar+0xc4>
 8011818:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 801181c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8011820:	4923      	ldr	r1, [pc, #140]	; (80118b0 <Restore_CalPar+0x13c>)
 8011822:	f931 1012 	ldrsh.w	r1, [r1, r2, lsl #1]
 8011826:	4a20      	ldr	r2, [pc, #128]	; (80118a8 <Restore_CalPar+0x134>)
 8011828:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 801182c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8011830:	b29b      	uxth	r3, r3
 8011832:	3301      	adds	r3, #1
 8011834:	b29b      	uxth	r3, r3
 8011836:	80fb      	strh	r3, [r7, #6]
 8011838:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801183c:	2b07      	cmp	r3, #7
 801183e:	ddeb      	ble.n	8011818 <Restore_CalPar+0xa4>
   TIM_BASE_Val=List[TIM_BASE].Val;
 8011840:	4b16      	ldr	r3, [pc, #88]	; (801189c <Restore_CalPar+0x128>)
 8011842:	f9b3 203c 	ldrsh.w	r2, [r3, #60]	; 0x3c
 8011846:	4b16      	ldr	r3, [pc, #88]	; (80118a0 <Restore_CalPar+0x12c>)
 8011848:	801a      	strh	r2, [r3, #0]
   List[TIM_BASE].Val=0;
 801184a:	4b14      	ldr	r3, [pc, #80]	; (801189c <Restore_CalPar+0x128>)
 801184c:	2200      	movs	r2, #0
 801184e:	879a      	strh	r2, [r3, #60]	; 0x3c
   for(i=Y_RANGES; i<=STANDBY; i++){
 8011850:	2300      	movs	r3, #0
 8011852:	80fb      	strh	r3, [r7, #6]
 8011854:	e015      	b.n	8011882 <Restore_CalPar+0x10e>
   List[i].Flg |= UPD;
 8011856:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801185a:	4a10      	ldr	r2, [pc, #64]	; (801189c <Restore_CalPar+0x128>)
 801185c:	00db      	lsls	r3, r3, #3
 801185e:	4413      	add	r3, r2
 8011860:	799a      	ldrb	r2, [r3, #6]
 8011862:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8011866:	f042 0220 	orr.w	r2, r2, #32
 801186a:	b2d1      	uxtb	r1, r2
 801186c:	4a0b      	ldr	r2, [pc, #44]	; (801189c <Restore_CalPar+0x128>)
 801186e:	00db      	lsls	r3, r3, #3
 8011870:	4413      	add	r3, r2
 8011872:	460a      	mov	r2, r1
 8011874:	719a      	strb	r2, [r3, #6]
   for(i=Y_RANGES; i<=STANDBY; i++){
 8011876:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801187a:	b29b      	uxth	r3, r3
 801187c:	3301      	adds	r3, #1
 801187e:	b29b      	uxth	r3, r3
 8011880:	80fb      	strh	r3, [r7, #6]
 8011882:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8011886:	2b29      	cmp	r3, #41	; 0x29
 8011888:	dde5      	ble.n	8011856 <Restore_CalPar+0xe2>
   }
   Update_Title();
 801188a:	f000 fd4f 	bl	801232c <Update_Title>
   Close_Pop();
 801188e:	f7fc ff0d 	bl	800e6ac <Close_Pop>
 }
 8011892:	bf00      	nop
 8011894:	3708      	adds	r7, #8
 8011896:	46bd      	mov	sp, r7
 8011898:	bd80      	pop	{r7, pc}
 801189a:	bf00      	nop
 801189c:	20000298 	.word	0x20000298
 80118a0:	20002810 	.word	0x20002810
 80118a4:	2000079e 	.word	0x2000079e
 80118a8:	20000538 	.word	0x20000538
 80118ac:	200003e8 	.word	0x200003e8
 80118b0:	08001ef8 	.word	0x08001ef8

080118b4 <u8ToDec3>:
 80118b4:	b480      	push	{r7}
 80118b6:	b083      	sub	sp, #12
 80118b8:	af00      	add	r7, sp, #0
 80118ba:	6078      	str	r0, [r7, #4]
 80118bc:	460b      	mov	r3, r1
 80118be:	70fb      	strb	r3, [r7, #3]
 80118c0:	78fb      	ldrb	r3, [r7, #3]
 80118c2:	4a1e      	ldr	r2, [pc, #120]	; (801193c <u8ToDec3+0x88>)
 80118c4:	fba2 2303 	umull	r2, r3, r2, r3
 80118c8:	095b      	lsrs	r3, r3, #5
 80118ca:	b2da      	uxtb	r2, r3
 80118cc:	687b      	ldr	r3, [r7, #4]
 80118ce:	1c59      	adds	r1, r3, #1
 80118d0:	6079      	str	r1, [r7, #4]
 80118d2:	3230      	adds	r2, #48	; 0x30
 80118d4:	b2d2      	uxtb	r2, r2
 80118d6:	701a      	strb	r2, [r3, #0]
 80118d8:	78fb      	ldrb	r3, [r7, #3]
 80118da:	4a18      	ldr	r2, [pc, #96]	; (801193c <u8ToDec3+0x88>)
 80118dc:	fba2 1203 	umull	r1, r2, r2, r3
 80118e0:	0952      	lsrs	r2, r2, #5
 80118e2:	2164      	movs	r1, #100	; 0x64
 80118e4:	fb01 f202 	mul.w	r2, r1, r2
 80118e8:	1a9b      	subs	r3, r3, r2
 80118ea:	70fb      	strb	r3, [r7, #3]
 80118ec:	78fb      	ldrb	r3, [r7, #3]
 80118ee:	4a14      	ldr	r2, [pc, #80]	; (8011940 <u8ToDec3+0x8c>)
 80118f0:	fba2 2303 	umull	r2, r3, r2, r3
 80118f4:	08db      	lsrs	r3, r3, #3
 80118f6:	b2da      	uxtb	r2, r3
 80118f8:	687b      	ldr	r3, [r7, #4]
 80118fa:	1c59      	adds	r1, r3, #1
 80118fc:	6079      	str	r1, [r7, #4]
 80118fe:	3230      	adds	r2, #48	; 0x30
 8011900:	b2d2      	uxtb	r2, r2
 8011902:	701a      	strb	r2, [r3, #0]
 8011904:	78fa      	ldrb	r2, [r7, #3]
 8011906:	4b0e      	ldr	r3, [pc, #56]	; (8011940 <u8ToDec3+0x8c>)
 8011908:	fba3 1302 	umull	r1, r3, r3, r2
 801190c:	08d9      	lsrs	r1, r3, #3
 801190e:	460b      	mov	r3, r1
 8011910:	009b      	lsls	r3, r3, #2
 8011912:	440b      	add	r3, r1
 8011914:	005b      	lsls	r3, r3, #1
 8011916:	1ad3      	subs	r3, r2, r3
 8011918:	70fb      	strb	r3, [r7, #3]
 801191a:	687b      	ldr	r3, [r7, #4]
 801191c:	1c5a      	adds	r2, r3, #1
 801191e:	607a      	str	r2, [r7, #4]
 8011920:	78fa      	ldrb	r2, [r7, #3]
 8011922:	3230      	adds	r2, #48	; 0x30
 8011924:	b2d2      	uxtb	r2, r2
 8011926:	701a      	strb	r2, [r3, #0]
 8011928:	687b      	ldr	r3, [r7, #4]
 801192a:	2200      	movs	r2, #0
 801192c:	701a      	strb	r2, [r3, #0]
 801192e:	bf00      	nop
 8011930:	370c      	adds	r7, #12
 8011932:	46bd      	mov	sp, r7
 8011934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011938:	4770      	bx	lr
 801193a:	bf00      	nop
 801193c:	51eb851f 	.word	0x51eb851f
 8011940:	cccccccd 	.word	0xcccccccd

08011944 <memset16>:
 8011944:	b480      	push	{r7}
 8011946:	b083      	sub	sp, #12
 8011948:	af00      	add	r7, sp, #0
 801194a:	6078      	str	r0, [r7, #4]
 801194c:	460b      	mov	r3, r1
 801194e:	807b      	strh	r3, [r7, #2]
 8011950:	4613      	mov	r3, r2
 8011952:	803b      	strh	r3, [r7, #0]
 8011954:	e00a      	b.n	801196c <memset16+0x28>
 8011956:	687b      	ldr	r3, [r7, #4]
 8011958:	1c9a      	adds	r2, r3, #2
 801195a:	607a      	str	r2, [r7, #4]
 801195c:	887a      	ldrh	r2, [r7, #2]
 801195e:	801a      	strh	r2, [r3, #0]
 8011960:	f9b7 3000 	ldrsh.w	r3, [r7]
 8011964:	b29b      	uxth	r3, r3
 8011966:	3b01      	subs	r3, #1
 8011968:	b29b      	uxth	r3, r3
 801196a:	803b      	strh	r3, [r7, #0]
 801196c:	f9b7 3000 	ldrsh.w	r3, [r7]
 8011970:	2b00      	cmp	r3, #0
 8011972:	d1f0      	bne.n	8011956 <memset16+0x12>
 8011974:	bf00      	nop
 8011976:	bf00      	nop
 8011978:	370c      	adds	r7, #12
 801197a:	46bd      	mov	sp, r7
 801197c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011980:	4770      	bx	lr
	...

08011984 <Value2Str>:
 8011984:	b580      	push	{r7, lr}
 8011986:	b088      	sub	sp, #32
 8011988:	af00      	add	r7, sp, #0
 801198a:	60f8      	str	r0, [r7, #12]
 801198c:	60b9      	str	r1, [r7, #8]
 801198e:	607a      	str	r2, [r7, #4]
 8011990:	70fb      	strb	r3, [r7, #3]
 8011992:	2300      	movs	r3, #0
 8011994:	83fb      	strh	r3, [r7, #30]
 8011996:	68bb      	ldr	r3, [r7, #8]
 8011998:	61bb      	str	r3, [r7, #24]
 801199a:	2305      	movs	r3, #5
 801199c:	617b      	str	r3, [r7, #20]
 801199e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80119a2:	2b00      	cmp	r3, #0
 80119a4:	d129      	bne.n	80119fa <Value2Str+0x76>
 80119a6:	68bb      	ldr	r3, [r7, #8]
 80119a8:	2b00      	cmp	r3, #0
 80119aa:	d104      	bne.n	80119b6 <Value2Str+0x32>
 80119ac:	68fb      	ldr	r3, [r7, #12]
 80119ae:	1c5a      	adds	r2, r3, #1
 80119b0:	60fa      	str	r2, [r7, #12]
 80119b2:	2220      	movs	r2, #32
 80119b4:	701a      	strb	r2, [r3, #0]
 80119b6:	68bb      	ldr	r3, [r7, #8]
 80119b8:	2b00      	cmp	r3, #0
 80119ba:	dd04      	ble.n	80119c6 <Value2Str+0x42>
 80119bc:	68fb      	ldr	r3, [r7, #12]
 80119be:	1c5a      	adds	r2, r3, #1
 80119c0:	60fa      	str	r2, [r7, #12]
 80119c2:	222b      	movs	r2, #43	; 0x2b
 80119c4:	701a      	strb	r2, [r3, #0]
 80119c6:	68bb      	ldr	r3, [r7, #8]
 80119c8:	2b00      	cmp	r3, #0
 80119ca:	da16      	bge.n	80119fa <Value2Str+0x76>
 80119cc:	68fb      	ldr	r3, [r7, #12]
 80119ce:	1c5a      	adds	r2, r3, #1
 80119d0:	60fa      	str	r2, [r7, #12]
 80119d2:	222d      	movs	r2, #45	; 0x2d
 80119d4:	701a      	strb	r2, [r3, #0]
 80119d6:	68bb      	ldr	r3, [r7, #8]
 80119d8:	425b      	negs	r3, r3
 80119da:	60bb      	str	r3, [r7, #8]
 80119dc:	e00d      	b.n	80119fa <Value2Str+0x76>
 80119de:	69bb      	ldr	r3, [r7, #24]
 80119e0:	4a64      	ldr	r2, [pc, #400]	; (8011b74 <Value2Str+0x1f0>)
 80119e2:	fb82 1203 	smull	r1, r2, r2, r3
 80119e6:	1092      	asrs	r2, r2, #2
 80119e8:	17db      	asrs	r3, r3, #31
 80119ea:	1ad3      	subs	r3, r2, r3
 80119ec:	61bb      	str	r3, [r7, #24]
 80119ee:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80119f2:	b29b      	uxth	r3, r3
 80119f4:	3301      	adds	r3, #1
 80119f6:	b29b      	uxth	r3, r3
 80119f8:	83fb      	strh	r3, [r7, #30]
 80119fa:	69bb      	ldr	r3, [r7, #24]
 80119fc:	2b09      	cmp	r3, #9
 80119fe:	dcee      	bgt.n	80119de <Value2Str+0x5a>
 8011a00:	f9b7 201e 	ldrsh.w	r2, [r7, #30]
 8011a04:	4b5c      	ldr	r3, [pc, #368]	; (8011b78 <Value2Str+0x1f4>)
 8011a06:	fb83 3102 	smull	r3, r1, r3, r2
 8011a0a:	17d3      	asrs	r3, r2, #31
 8011a0c:	1ac9      	subs	r1, r1, r3
 8011a0e:	460b      	mov	r3, r1
 8011a10:	005b      	lsls	r3, r3, #1
 8011a12:	440b      	add	r3, r1
 8011a14:	1ad3      	subs	r3, r2, r3
 8011a16:	b21b      	sxth	r3, r3
 8011a18:	2b02      	cmp	r3, #2
 8011a1a:	d105      	bne.n	8011a28 <Value2Str+0xa4>
 8011a1c:	78fb      	ldrb	r3, [r7, #3]
 8011a1e:	2b02      	cmp	r3, #2
 8011a20:	d102      	bne.n	8011a28 <Value2Str+0xa4>
 8011a22:	78fb      	ldrb	r3, [r7, #3]
 8011a24:	3301      	adds	r3, #1
 8011a26:	70fb      	strb	r3, [r7, #3]
 8011a28:	68bb      	ldr	r3, [r7, #8]
 8011a2a:	61bb      	str	r3, [r7, #24]
 8011a2c:	2300      	movs	r3, #0
 8011a2e:	83fb      	strh	r3, [r7, #30]
 8011a30:	e016      	b.n	8011a60 <Value2Str+0xdc>
 8011a32:	69bb      	ldr	r3, [r7, #24]
 8011a34:	4a4f      	ldr	r2, [pc, #316]	; (8011b74 <Value2Str+0x1f0>)
 8011a36:	fb82 1203 	smull	r1, r2, r2, r3
 8011a3a:	1092      	asrs	r2, r2, #2
 8011a3c:	17db      	asrs	r3, r3, #31
 8011a3e:	1ad3      	subs	r3, r2, r3
 8011a40:	61bb      	str	r3, [r7, #24]
 8011a42:	8bfb      	ldrh	r3, [r7, #30]
 8011a44:	3301      	adds	r3, #1
 8011a46:	b29b      	uxth	r3, r3
 8011a48:	83fb      	strh	r3, [r7, #30]
 8011a4a:	f9b7 201e 	ldrsh.w	r2, [r7, #30]
 8011a4e:	78fb      	ldrb	r3, [r7, #3]
 8011a50:	429a      	cmp	r2, r3
 8011a52:	dd05      	ble.n	8011a60 <Value2Str+0xdc>
 8011a54:	697a      	ldr	r2, [r7, #20]
 8011a56:	4613      	mov	r3, r2
 8011a58:	009b      	lsls	r3, r3, #2
 8011a5a:	4413      	add	r3, r2
 8011a5c:	005b      	lsls	r3, r3, #1
 8011a5e:	617b      	str	r3, [r7, #20]
 8011a60:	69bb      	ldr	r3, [r7, #24]
 8011a62:	2b09      	cmp	r3, #9
 8011a64:	dce5      	bgt.n	8011a32 <Value2Str+0xae>
 8011a66:	f9b7 201e 	ldrsh.w	r2, [r7, #30]
 8011a6a:	78fb      	ldrb	r3, [r7, #3]
 8011a6c:	429a      	cmp	r2, r3
 8011a6e:	db03      	blt.n	8011a78 <Value2Str+0xf4>
 8011a70:	68ba      	ldr	r2, [r7, #8]
 8011a72:	697b      	ldr	r3, [r7, #20]
 8011a74:	4413      	add	r3, r2
 8011a76:	60bb      	str	r3, [r7, #8]
 8011a78:	68bb      	ldr	r3, [r7, #8]
 8011a7a:	61bb      	str	r3, [r7, #24]
 8011a7c:	2300      	movs	r3, #0
 8011a7e:	83fb      	strh	r3, [r7, #30]
 8011a80:	e00d      	b.n	8011a9e <Value2Str+0x11a>
 8011a82:	69bb      	ldr	r3, [r7, #24]
 8011a84:	4a3b      	ldr	r2, [pc, #236]	; (8011b74 <Value2Str+0x1f0>)
 8011a86:	fb82 1203 	smull	r1, r2, r2, r3
 8011a8a:	1092      	asrs	r2, r2, #2
 8011a8c:	17db      	asrs	r3, r3, #31
 8011a8e:	1ad3      	subs	r3, r2, r3
 8011a90:	61bb      	str	r3, [r7, #24]
 8011a92:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8011a96:	b29b      	uxth	r3, r3
 8011a98:	3301      	adds	r3, #1
 8011a9a:	b29b      	uxth	r3, r3
 8011a9c:	83fb      	strh	r3, [r7, #30]
 8011a9e:	69bb      	ldr	r3, [r7, #24]
 8011aa0:	2b09      	cmp	r3, #9
 8011aa2:	dcee      	bgt.n	8011a82 <Value2Str+0xfe>
 8011aa4:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8011aa8:	4a33      	ldr	r2, [pc, #204]	; (8011b78 <Value2Str+0x1f4>)
 8011aaa:	fb82 1203 	smull	r1, r2, r2, r3
 8011aae:	17db      	asrs	r3, r3, #31
 8011ab0:	1ad3      	subs	r3, r2, r3
 8011ab2:	b21b      	sxth	r3, r3
 8011ab4:	61bb      	str	r3, [r7, #24]
 8011ab6:	e03e      	b.n	8011b36 <Value2Str+0x1b2>
 8011ab8:	8bfb      	ldrh	r3, [r7, #30]
 8011aba:	b2db      	uxtb	r3, r3
 8011abc:	4618      	mov	r0, r3
 8011abe:	f000 f85d 	bl	8011b7c <Exp>
 8011ac2:	4602      	mov	r2, r0
 8011ac4:	68bb      	ldr	r3, [r7, #8]
 8011ac6:	fb93 f3f2 	sdiv	r3, r3, r2
 8011aca:	b2da      	uxtb	r2, r3
 8011acc:	68fb      	ldr	r3, [r7, #12]
 8011ace:	1c59      	adds	r1, r3, #1
 8011ad0:	60f9      	str	r1, [r7, #12]
 8011ad2:	3230      	adds	r2, #48	; 0x30
 8011ad4:	b2d2      	uxtb	r2, r2
 8011ad6:	701a      	strb	r2, [r3, #0]
 8011ad8:	78fb      	ldrb	r3, [r7, #3]
 8011ada:	2b00      	cmp	r3, #0
 8011adc:	d012      	beq.n	8011b04 <Value2Str+0x180>
 8011ade:	f9b7 201e 	ldrsh.w	r2, [r7, #30]
 8011ae2:	4b25      	ldr	r3, [pc, #148]	; (8011b78 <Value2Str+0x1f4>)
 8011ae4:	fb83 3102 	smull	r3, r1, r3, r2
 8011ae8:	17d3      	asrs	r3, r2, #31
 8011aea:	1ac9      	subs	r1, r1, r3
 8011aec:	460b      	mov	r3, r1
 8011aee:	005b      	lsls	r3, r3, #1
 8011af0:	440b      	add	r3, r1
 8011af2:	1ad3      	subs	r3, r2, r3
 8011af4:	b21b      	sxth	r3, r3
 8011af6:	2b00      	cmp	r3, #0
 8011af8:	d104      	bne.n	8011b04 <Value2Str+0x180>
 8011afa:	68fb      	ldr	r3, [r7, #12]
 8011afc:	1c5a      	adds	r2, r3, #1
 8011afe:	60fa      	str	r2, [r7, #12]
 8011b00:	222e      	movs	r2, #46	; 0x2e
 8011b02:	701a      	strb	r2, [r3, #0]
 8011b04:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8011b08:	2b00      	cmp	r3, #0
 8011b0a:	db0c      	blt.n	8011b26 <Value2Str+0x1a2>
 8011b0c:	8bfb      	ldrh	r3, [r7, #30]
 8011b0e:	b2db      	uxtb	r3, r3
 8011b10:	4618      	mov	r0, r3
 8011b12:	f000 f833 	bl	8011b7c <Exp>
 8011b16:	4602      	mov	r2, r0
 8011b18:	68bb      	ldr	r3, [r7, #8]
 8011b1a:	fb93 f1f2 	sdiv	r1, r3, r2
 8011b1e:	fb02 f201 	mul.w	r2, r2, r1
 8011b22:	1a9b      	subs	r3, r3, r2
 8011b24:	e000      	b.n	8011b28 <Value2Str+0x1a4>
 8011b26:	2300      	movs	r3, #0
 8011b28:	60bb      	str	r3, [r7, #8]
 8011b2a:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8011b2e:	b29b      	uxth	r3, r3
 8011b30:	3b01      	subs	r3, #1
 8011b32:	b29b      	uxth	r3, r3
 8011b34:	83fb      	strh	r3, [r7, #30]
 8011b36:	78fb      	ldrb	r3, [r7, #3]
 8011b38:	1e5a      	subs	r2, r3, #1
 8011b3a:	70fa      	strb	r2, [r7, #3]
 8011b3c:	2b00      	cmp	r3, #0
 8011b3e:	d1bb      	bne.n	8011ab8 <Value2Str+0x134>
 8011b40:	69ba      	ldr	r2, [r7, #24]
 8011b42:	4613      	mov	r3, r2
 8011b44:	005b      	lsls	r3, r3, #1
 8011b46:	4413      	add	r3, r2
 8011b48:	005b      	lsls	r3, r3, #1
 8011b4a:	461a      	mov	r2, r3
 8011b4c:	687b      	ldr	r3, [r7, #4]
 8011b4e:	4413      	add	r3, r2
 8011b50:	607b      	str	r3, [r7, #4]
 8011b52:	68fb      	ldr	r3, [r7, #12]
 8011b54:	1c5a      	adds	r2, r3, #1
 8011b56:	60fa      	str	r2, [r7, #12]
 8011b58:	687a      	ldr	r2, [r7, #4]
 8011b5a:	7812      	ldrb	r2, [r2, #0]
 8011b5c:	701a      	strb	r2, [r3, #0]
 8011b5e:	687b      	ldr	r3, [r7, #4]
 8011b60:	1c5a      	adds	r2, r3, #1
 8011b62:	607a      	str	r2, [r7, #4]
 8011b64:	781b      	ldrb	r3, [r3, #0]
 8011b66:	2b00      	cmp	r3, #0
 8011b68:	d1f3      	bne.n	8011b52 <Value2Str+0x1ce>
 8011b6a:	bf00      	nop
 8011b6c:	bf00      	nop
 8011b6e:	3720      	adds	r7, #32
 8011b70:	46bd      	mov	sp, r7
 8011b72:	bd80      	pop	{r7, pc}
 8011b74:	66666667 	.word	0x66666667
 8011b78:	55555556 	.word	0x55555556

08011b7c <Exp>:
 8011b7c:	b480      	push	{r7}
 8011b7e:	b085      	sub	sp, #20
 8011b80:	af00      	add	r7, sp, #0
 8011b82:	4603      	mov	r3, r0
 8011b84:	71fb      	strb	r3, [r7, #7]
 8011b86:	2301      	movs	r3, #1
 8011b88:	60fb      	str	r3, [r7, #12]
 8011b8a:	e005      	b.n	8011b98 <Exp+0x1c>
 8011b8c:	68fa      	ldr	r2, [r7, #12]
 8011b8e:	4613      	mov	r3, r2
 8011b90:	009b      	lsls	r3, r3, #2
 8011b92:	4413      	add	r3, r2
 8011b94:	005b      	lsls	r3, r3, #1
 8011b96:	60fb      	str	r3, [r7, #12]
 8011b98:	79fb      	ldrb	r3, [r7, #7]
 8011b9a:	1e5a      	subs	r2, r3, #1
 8011b9c:	71fa      	strb	r2, [r7, #7]
 8011b9e:	2b00      	cmp	r3, #0
 8011ba0:	d1f4      	bne.n	8011b8c <Exp+0x10>
 8011ba2:	68fb      	ldr	r3, [r7, #12]
 8011ba4:	4618      	mov	r0, r3
 8011ba6:	3714      	adds	r7, #20
 8011ba8:	46bd      	mov	sp, r7
 8011baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011bae:	4770      	bx	lr

08011bb0 <Sqrt32>:
 8011bb0:	b580      	push	{r7, lr}
 8011bb2:	b084      	sub	sp, #16
 8011bb4:	af00      	add	r7, sp, #0
 8011bb6:	6078      	str	r0, [r7, #4]
 8011bb8:	687b      	ldr	r3, [r7, #4]
 8011bba:	2b00      	cmp	r3, #0
 8011bbc:	d101      	bne.n	8011bc2 <Sqrt32+0x12>
 8011bbe:	2300      	movs	r3, #0
 8011bc0:	e019      	b.n	8011bf6 <Sqrt32+0x46>
 8011bc2:	687b      	ldr	r3, [r7, #4]
 8011bc4:	2b00      	cmp	r3, #0
 8011bc6:	da00      	bge.n	8011bca <Sqrt32+0x1a>
 8011bc8:	3303      	adds	r3, #3
 8011bca:	109b      	asrs	r3, r3, #2
 8011bcc:	4618      	mov	r0, r3
 8011bce:	f7ff ffef 	bl	8011bb0 <Sqrt32>
 8011bd2:	4603      	mov	r3, r0
 8011bd4:	005b      	lsls	r3, r3, #1
 8011bd6:	3301      	adds	r3, #1
 8011bd8:	60fb      	str	r3, [r7, #12]
 8011bda:	68fb      	ldr	r3, [r7, #12]
 8011bdc:	fb03 f303 	mul.w	r3, r3, r3
 8011be0:	687a      	ldr	r2, [r7, #4]
 8011be2:	429a      	cmp	r2, r3
 8011be4:	da05      	bge.n	8011bf2 <Sqrt32+0x42>
 8011be6:	68fb      	ldr	r3, [r7, #12]
 8011be8:	b29b      	uxth	r3, r3
 8011bea:	3b01      	subs	r3, #1
 8011bec:	b29b      	uxth	r3, r3
 8011bee:	b21b      	sxth	r3, r3
 8011bf0:	e001      	b.n	8011bf6 <Sqrt32+0x46>
 8011bf2:	68fb      	ldr	r3, [r7, #12]
 8011bf4:	b21b      	sxth	r3, r3
 8011bf6:	4618      	mov	r0, r3
 8011bf8:	3710      	adds	r7, #16
 8011bfa:	46bd      	mov	sp, r7
 8011bfc:	bd80      	pop	{r7, pc}
	...

08011c00 <u16ToDec4Str>:
 8011c00:	b480      	push	{r7}
 8011c02:	b083      	sub	sp, #12
 8011c04:	af00      	add	r7, sp, #0
 8011c06:	6078      	str	r0, [r7, #4]
 8011c08:	460b      	mov	r3, r1
 8011c0a:	807b      	strh	r3, [r7, #2]
 8011c0c:	887b      	ldrh	r3, [r7, #2]
 8011c0e:	f503 531c 	add.w	r3, r3, #9984	; 0x2700
 8011c12:	330f      	adds	r3, #15
 8011c14:	b29b      	uxth	r3, r3
 8011c16:	f644 621e 	movw	r2, #19998	; 0x4e1e
 8011c1a:	4293      	cmp	r3, r2
 8011c1c:	d917      	bls.n	8011c4e <u16ToDec4Str+0x4e>
 8011c1e:	687b      	ldr	r3, [r7, #4]
 8011c20:	1c5a      	adds	r2, r3, #1
 8011c22:	607a      	str	r2, [r7, #4]
 8011c24:	224f      	movs	r2, #79	; 0x4f
 8011c26:	701a      	strb	r2, [r3, #0]
 8011c28:	687b      	ldr	r3, [r7, #4]
 8011c2a:	1c5a      	adds	r2, r3, #1
 8011c2c:	607a      	str	r2, [r7, #4]
 8011c2e:	2276      	movs	r2, #118	; 0x76
 8011c30:	701a      	strb	r2, [r3, #0]
 8011c32:	687b      	ldr	r3, [r7, #4]
 8011c34:	1c5a      	adds	r2, r3, #1
 8011c36:	607a      	str	r2, [r7, #4]
 8011c38:	2265      	movs	r2, #101	; 0x65
 8011c3a:	701a      	strb	r2, [r3, #0]
 8011c3c:	687b      	ldr	r3, [r7, #4]
 8011c3e:	1c5a      	adds	r2, r3, #1
 8011c40:	607a      	str	r2, [r7, #4]
 8011c42:	2272      	movs	r2, #114	; 0x72
 8011c44:	701a      	strb	r2, [r3, #0]
 8011c46:	687b      	ldr	r3, [r7, #4]
 8011c48:	2200      	movs	r2, #0
 8011c4a:	701a      	strb	r2, [r3, #0]
 8011c4c:	e07e      	b.n	8011d4c <u16ToDec4Str+0x14c>
 8011c4e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8011c52:	4a41      	ldr	r2, [pc, #260]	; (8011d58 <u16ToDec4Str+0x158>)
 8011c54:	fb82 1203 	smull	r1, r2, r2, r3
 8011c58:	1192      	asrs	r2, r2, #6
 8011c5a:	17db      	asrs	r3, r3, #31
 8011c5c:	1ad3      	subs	r3, r2, r3
 8011c5e:	b21b      	sxth	r3, r3
 8011c60:	b2da      	uxtb	r2, r3
 8011c62:	687b      	ldr	r3, [r7, #4]
 8011c64:	1c59      	adds	r1, r3, #1
 8011c66:	6079      	str	r1, [r7, #4]
 8011c68:	3230      	adds	r2, #48	; 0x30
 8011c6a:	b2d2      	uxtb	r2, r2
 8011c6c:	701a      	strb	r2, [r3, #0]
 8011c6e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8011c72:	4a39      	ldr	r2, [pc, #228]	; (8011d58 <u16ToDec4Str+0x158>)
 8011c74:	fb82 1203 	smull	r1, r2, r2, r3
 8011c78:	1191      	asrs	r1, r2, #6
 8011c7a:	17da      	asrs	r2, r3, #31
 8011c7c:	1a8a      	subs	r2, r1, r2
 8011c7e:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8011c82:	fb01 f202 	mul.w	r2, r1, r2
 8011c86:	1a9b      	subs	r3, r3, r2
 8011c88:	807b      	strh	r3, [r7, #2]
 8011c8a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8011c8e:	4a33      	ldr	r2, [pc, #204]	; (8011d5c <u16ToDec4Str+0x15c>)
 8011c90:	fb82 1203 	smull	r1, r2, r2, r3
 8011c94:	1152      	asrs	r2, r2, #5
 8011c96:	17db      	asrs	r3, r3, #31
 8011c98:	1ad3      	subs	r3, r2, r3
 8011c9a:	b21b      	sxth	r3, r3
 8011c9c:	b2da      	uxtb	r2, r3
 8011c9e:	687b      	ldr	r3, [r7, #4]
 8011ca0:	1c59      	adds	r1, r3, #1
 8011ca2:	6079      	str	r1, [r7, #4]
 8011ca4:	3230      	adds	r2, #48	; 0x30
 8011ca6:	b2d2      	uxtb	r2, r2
 8011ca8:	701a      	strb	r2, [r3, #0]
 8011caa:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8011cae:	4a2b      	ldr	r2, [pc, #172]	; (8011d5c <u16ToDec4Str+0x15c>)
 8011cb0:	fb82 1203 	smull	r1, r2, r2, r3
 8011cb4:	1151      	asrs	r1, r2, #5
 8011cb6:	17da      	asrs	r2, r3, #31
 8011cb8:	1a8a      	subs	r2, r1, r2
 8011cba:	2164      	movs	r1, #100	; 0x64
 8011cbc:	fb01 f202 	mul.w	r2, r1, r2
 8011cc0:	1a9b      	subs	r3, r3, r2
 8011cc2:	807b      	strh	r3, [r7, #2]
 8011cc4:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8011cc8:	4a25      	ldr	r2, [pc, #148]	; (8011d60 <u16ToDec4Str+0x160>)
 8011cca:	fb82 1203 	smull	r1, r2, r2, r3
 8011cce:	1092      	asrs	r2, r2, #2
 8011cd0:	17db      	asrs	r3, r3, #31
 8011cd2:	1ad3      	subs	r3, r2, r3
 8011cd4:	b21b      	sxth	r3, r3
 8011cd6:	b2da      	uxtb	r2, r3
 8011cd8:	687b      	ldr	r3, [r7, #4]
 8011cda:	1c59      	adds	r1, r3, #1
 8011cdc:	6079      	str	r1, [r7, #4]
 8011cde:	3230      	adds	r2, #48	; 0x30
 8011ce0:	b2d2      	uxtb	r2, r2
 8011ce2:	701a      	strb	r2, [r3, #0]
 8011ce4:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8011ce8:	4b1d      	ldr	r3, [pc, #116]	; (8011d60 <u16ToDec4Str+0x160>)
 8011cea:	fb83 1302 	smull	r1, r3, r3, r2
 8011cee:	1099      	asrs	r1, r3, #2
 8011cf0:	17d3      	asrs	r3, r2, #31
 8011cf2:	1ac9      	subs	r1, r1, r3
 8011cf4:	460b      	mov	r3, r1
 8011cf6:	009b      	lsls	r3, r3, #2
 8011cf8:	440b      	add	r3, r1
 8011cfa:	005b      	lsls	r3, r3, #1
 8011cfc:	1ad3      	subs	r3, r2, r3
 8011cfe:	807b      	strh	r3, [r7, #2]
 8011d00:	887b      	ldrh	r3, [r7, #2]
 8011d02:	b2da      	uxtb	r2, r3
 8011d04:	687b      	ldr	r3, [r7, #4]
 8011d06:	1c59      	adds	r1, r3, #1
 8011d08:	6079      	str	r1, [r7, #4]
 8011d0a:	3230      	adds	r2, #48	; 0x30
 8011d0c:	b2d2      	uxtb	r2, r2
 8011d0e:	701a      	strb	r2, [r3, #0]
 8011d10:	687b      	ldr	r3, [r7, #4]
 8011d12:	2200      	movs	r2, #0
 8011d14:	701a      	strb	r2, [r3, #0]
 8011d16:	687b      	ldr	r3, [r7, #4]
 8011d18:	3b04      	subs	r3, #4
 8011d1a:	781b      	ldrb	r3, [r3, #0]
 8011d1c:	2b30      	cmp	r3, #48	; 0x30
 8011d1e:	d115      	bne.n	8011d4c <u16ToDec4Str+0x14c>
 8011d20:	687b      	ldr	r3, [r7, #4]
 8011d22:	3b04      	subs	r3, #4
 8011d24:	2220      	movs	r2, #32
 8011d26:	701a      	strb	r2, [r3, #0]
 8011d28:	687b      	ldr	r3, [r7, #4]
 8011d2a:	3b03      	subs	r3, #3
 8011d2c:	781b      	ldrb	r3, [r3, #0]
 8011d2e:	2b30      	cmp	r3, #48	; 0x30
 8011d30:	d10c      	bne.n	8011d4c <u16ToDec4Str+0x14c>
 8011d32:	687b      	ldr	r3, [r7, #4]
 8011d34:	3b03      	subs	r3, #3
 8011d36:	2220      	movs	r2, #32
 8011d38:	701a      	strb	r2, [r3, #0]
 8011d3a:	687b      	ldr	r3, [r7, #4]
 8011d3c:	3b02      	subs	r3, #2
 8011d3e:	781b      	ldrb	r3, [r3, #0]
 8011d40:	2b30      	cmp	r3, #48	; 0x30
 8011d42:	d103      	bne.n	8011d4c <u16ToDec4Str+0x14c>
 8011d44:	687b      	ldr	r3, [r7, #4]
 8011d46:	3b02      	subs	r3, #2
 8011d48:	2220      	movs	r2, #32
 8011d4a:	701a      	strb	r2, [r3, #0]
 8011d4c:	370c      	adds	r7, #12
 8011d4e:	46bd      	mov	sp, r7
 8011d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d54:	4770      	bx	lr
 8011d56:	bf00      	nop
 8011d58:	10624dd3 	.word	0x10624dd3
 8011d5c:	51eb851f 	.word	0x51eb851f
 8011d60:	66666667 	.word	0x66666667

08011d64 <lcd_write_cmd_data>:
#include "Func.h"

unsigned short data[15];

void lcd_write_cmd_data( unsigned short Cmd, short Len, unsigned short *Data )
{
 8011d64:	b580      	push	{r7, lr}
 8011d66:	b082      	sub	sp, #8
 8011d68:	af00      	add	r7, sp, #0
 8011d6a:	4603      	mov	r3, r0
 8011d6c:	603a      	str	r2, [r7, #0]
 8011d6e:	80fb      	strh	r3, [r7, #6]
 8011d70:	460b      	mov	r3, r1
 8011d72:	80bb      	strh	r3, [r7, #4]
	HAL_GPIO_WritePin( LcdRs_GPIO_Port, LcdRs_Pin, GPIO_PIN_RESET); // low for command
 8011d74:	2200      	movs	r2, #0
 8011d76:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8011d7a:	480e      	ldr	r0, [pc, #56]	; (8011db4 <lcd_write_cmd_data+0x50>)
 8011d7c:	f007 ff16 	bl	8019bac <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi3, (unsigned char*)&Cmd, 1, 1);// timeout 1 ms
 8011d80:	1db9      	adds	r1, r7, #6
 8011d82:	2301      	movs	r3, #1
 8011d84:	2201      	movs	r2, #1
 8011d86:	480c      	ldr	r0, [pc, #48]	; (8011db8 <lcd_write_cmd_data+0x54>)
 8011d88:	f00a fa15 	bl	801c1b6 <HAL_SPI_Transmit>

	if(Len !=0)
 8011d8c:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8011d90:	2b00      	cmp	r3, #0
 8011d92:	d00b      	beq.n	8011dac <lcd_write_cmd_data+0x48>
	{
		HAL_GPIO_WritePin( LcdRs_GPIO_Port, LcdRs_Pin, GPIO_PIN_SET);  //high for data
 8011d94:	2201      	movs	r2, #1
 8011d96:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8011d9a:	4806      	ldr	r0, [pc, #24]	; (8011db4 <lcd_write_cmd_data+0x50>)
 8011d9c:	f007 ff06 	bl	8019bac <HAL_GPIO_WritePin>
		HAL_SPI_Transmit(&hspi3, (unsigned char*)Data, Len, 1);// timeout 1 ms
 8011da0:	88ba      	ldrh	r2, [r7, #4]
 8011da2:	2301      	movs	r3, #1
 8011da4:	6839      	ldr	r1, [r7, #0]
 8011da6:	4804      	ldr	r0, [pc, #16]	; (8011db8 <lcd_write_cmd_data+0x54>)
 8011da8:	f00a fa05 	bl	801c1b6 <HAL_SPI_Transmit>
	}
}
 8011dac:	bf00      	nop
 8011dae:	3708      	adds	r7, #8
 8011db0:	46bd      	mov	sp, r7
 8011db2:	bd80      	pop	{r7, pc}
 8011db4:	40020800 	.word	0x40020800
 8011db8:	20006a20 	.word	0x20006a20

08011dbc <Init_LCD>:

// initialize the LCD
void Init_LCD(void)
{
 8011dbc:	b580      	push	{r7, lr}
 8011dbe:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin( LcdCs_GPIO_Port, LcdCs_Pin, GPIO_PIN_RESET);  //enable lcd controller
 8011dc0:	2200      	movs	r2, #0
 8011dc2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8011dc6:	4885      	ldr	r0, [pc, #532]	; (8011fdc <Init_LCD+0x220>)
 8011dc8:	f007 fef0 	bl	8019bac <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin( Dres_GPIO_Port, Dres_Pin, GPIO_PIN_SET);  //display reset
 8011dcc:	2201      	movs	r2, #1
 8011dce:	f44f 7100 	mov.w	r1, #512	; 0x200
 8011dd2:	4883      	ldr	r0, [pc, #524]	; (8011fe0 <Init_LCD+0x224>)
 8011dd4:	f007 feea 	bl	8019bac <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8011dd8:	2001      	movs	r0, #1
 8011dda:	f006 fb09 	bl	80183f0 <HAL_Delay>
	HAL_GPIO_WritePin( Dres_GPIO_Port, Dres_Pin, GPIO_PIN_RESET);
 8011dde:	2200      	movs	r2, #0
 8011de0:	f44f 7100 	mov.w	r1, #512	; 0x200
 8011de4:	487e      	ldr	r0, [pc, #504]	; (8011fe0 <Init_LCD+0x224>)
 8011de6:	f007 fee1 	bl	8019bac <HAL_GPIO_WritePin>
	HAL_Delay(10);
 8011dea:	200a      	movs	r0, #10
 8011dec:	f006 fb00 	bl	80183f0 <HAL_Delay>
	HAL_GPIO_WritePin( Dres_GPIO_Port, Dres_Pin, GPIO_PIN_SET);
 8011df0:	2201      	movs	r2, #1
 8011df2:	f44f 7100 	mov.w	r1, #512	; 0x200
 8011df6:	487a      	ldr	r0, [pc, #488]	; (8011fe0 <Init_LCD+0x224>)
 8011df8:	f007 fed8 	bl	8019bac <HAL_GPIO_WritePin>
	HAL_Delay(120);
 8011dfc:	2078      	movs	r0, #120	; 0x78
 8011dfe:	f006 faf7 	bl	80183f0 <HAL_Delay>

	data[0]=0;
 8011e02:	4b78      	ldr	r3, [pc, #480]	; (8011fe4 <Init_LCD+0x228>)
 8011e04:	2200      	movs	r2, #0
 8011e06:	801a      	strh	r2, [r3, #0]
	lcd_write_cmd_data(0xb0, 1, data);  //set interface
 8011e08:	4a76      	ldr	r2, [pc, #472]	; (8011fe4 <Init_LCD+0x228>)
 8011e0a:	2101      	movs	r1, #1
 8011e0c:	20b0      	movs	r0, #176	; 0xb0
 8011e0e:	f7ff ffa9 	bl	8011d64 <lcd_write_cmd_data>
	lcd_write_cmd_data(0x11, 0, data);  //sleep
 8011e12:	4a74      	ldr	r2, [pc, #464]	; (8011fe4 <Init_LCD+0x228>)
 8011e14:	2100      	movs	r1, #0
 8011e16:	2011      	movs	r0, #17
 8011e18:	f7ff ffa4 	bl	8011d64 <lcd_write_cmd_data>
	HAL_Delay(120);
 8011e1c:	2078      	movs	r0, #120	; 0x78
 8011e1e:	f006 fae7 	bl	80183f0 <HAL_Delay>
	data[0]=0x55;
 8011e22:	4b70      	ldr	r3, [pc, #448]	; (8011fe4 <Init_LCD+0x228>)
 8011e24:	2255      	movs	r2, #85	; 0x55
 8011e26:	801a      	strh	r2, [r3, #0]
	lcd_write_cmd_data(0x3A, 1, data);  //set pixels to 16 bit
 8011e28:	4a6e      	ldr	r2, [pc, #440]	; (8011fe4 <Init_LCD+0x228>)
 8011e2a:	2101      	movs	r1, #1
 8011e2c:	203a      	movs	r0, #58	; 0x3a
 8011e2e:	f7ff ff99 	bl	8011d64 <lcd_write_cmd_data>
	data[0]=data[1]=9;
 8011e32:	4b6c      	ldr	r3, [pc, #432]	; (8011fe4 <Init_LCD+0x228>)
 8011e34:	2209      	movs	r2, #9
 8011e36:	805a      	strh	r2, [r3, #2]
 8011e38:	4b6a      	ldr	r3, [pc, #424]	; (8011fe4 <Init_LCD+0x228>)
 8011e3a:	885a      	ldrh	r2, [r3, #2]
 8011e3c:	4b69      	ldr	r3, [pc, #420]	; (8011fe4 <Init_LCD+0x228>)
 8011e3e:	801a      	strh	r2, [r3, #0]
	lcd_write_cmd_data(0xc0, 2, data);  //set power
 8011e40:	4a68      	ldr	r2, [pc, #416]	; (8011fe4 <Init_LCD+0x228>)
 8011e42:	2102      	movs	r1, #2
 8011e44:	20c0      	movs	r0, #192	; 0xc0
 8011e46:	f7ff ff8d 	bl	8011d64 <lcd_write_cmd_data>
	data[0]= 0x41;
 8011e4a:	4b66      	ldr	r3, [pc, #408]	; (8011fe4 <Init_LCD+0x228>)
 8011e4c:	2241      	movs	r2, #65	; 0x41
 8011e4e:	801a      	strh	r2, [r3, #0]
	data[1]=0;
 8011e50:	4b64      	ldr	r3, [pc, #400]	; (8011fe4 <Init_LCD+0x228>)
 8011e52:	2200      	movs	r2, #0
 8011e54:	805a      	strh	r2, [r3, #2]
	lcd_write_cmd_data(0xc1, 2, data);  //set power
 8011e56:	4a63      	ldr	r2, [pc, #396]	; (8011fe4 <Init_LCD+0x228>)
 8011e58:	2102      	movs	r1, #2
 8011e5a:	20c1      	movs	r0, #193	; 0xc1
 8011e5c:	f7ff ff82 	bl	8011d64 <lcd_write_cmd_data>
	data[0]= 0x33;
 8011e60:	4b60      	ldr	r3, [pc, #384]	; (8011fe4 <Init_LCD+0x228>)
 8011e62:	2233      	movs	r2, #51	; 0x33
 8011e64:	801a      	strh	r2, [r3, #0]
	lcd_write_cmd_data(0xc2, 1, data);  //set power
 8011e66:	4a5f      	ldr	r2, [pc, #380]	; (8011fe4 <Init_LCD+0x228>)
 8011e68:	2101      	movs	r1, #1
 8011e6a:	20c2      	movs	r0, #194	; 0xc2
 8011e6c:	f7ff ff7a 	bl	8011d64 <lcd_write_cmd_data>
	data[0]=data[1]=0;
 8011e70:	4b5c      	ldr	r3, [pc, #368]	; (8011fe4 <Init_LCD+0x228>)
 8011e72:	2200      	movs	r2, #0
 8011e74:	805a      	strh	r2, [r3, #2]
 8011e76:	4b5b      	ldr	r3, [pc, #364]	; (8011fe4 <Init_LCD+0x228>)
 8011e78:	885a      	ldrh	r2, [r3, #2]
 8011e7a:	4b5a      	ldr	r3, [pc, #360]	; (8011fe4 <Init_LCD+0x228>)
 8011e7c:	801a      	strh	r2, [r3, #0]
	data[2]=data[3]=0;  //#3 may be 0x36
 8011e7e:	4b59      	ldr	r3, [pc, #356]	; (8011fe4 <Init_LCD+0x228>)
 8011e80:	2200      	movs	r2, #0
 8011e82:	80da      	strh	r2, [r3, #6]
 8011e84:	4b57      	ldr	r3, [pc, #348]	; (8011fe4 <Init_LCD+0x228>)
 8011e86:	88da      	ldrh	r2, [r3, #6]
 8011e88:	4b56      	ldr	r3, [pc, #344]	; (8011fe4 <Init_LCD+0x228>)
 8011e8a:	809a      	strh	r2, [r3, #4]
	lcd_write_cmd_data(0xc5, 4, data);  //Vcom control
 8011e8c:	4a55      	ldr	r2, [pc, #340]	; (8011fe4 <Init_LCD+0x228>)
 8011e8e:	2104      	movs	r1, #4
 8011e90:	20c5      	movs	r0, #197	; 0xc5
 8011e92:	f7ff ff67 	bl	8011d64 <lcd_write_cmd_data>

	data[0]=  0;
 8011e96:	4b53      	ldr	r3, [pc, #332]	; (8011fe4 <Init_LCD+0x228>)
 8011e98:	2200      	movs	r2, #0
 8011e9a:	801a      	strh	r2, [r3, #0]
	lcd_write_cmd_data(0x36, 1, data);  //madctl
 8011e9c:	4a51      	ldr	r2, [pc, #324]	; (8011fe4 <Init_LCD+0x228>)
 8011e9e:	2101      	movs	r1, #1
 8011ea0:	2036      	movs	r0, #54	; 0x36
 8011ea2:	f7ff ff5f 	bl	8011d64 <lcd_write_cmd_data>
	 Digital Gamma Control 1
	-1, 0xE2, 0x0F, 0x32, 0x2E, 0x0B, 0x0D, 0x05, 0x47, 0x75,
	          0x37, 0x06, 0x10, 0x03, 0x24, 0x20, 0x00,
    SPI_TRANSFER(0xE0 Positive Gamma Control, 0x00, 0x2C, 0x2C, 0x0B, 0x0C, 0x04, 0x4C, 0x64, 0x36, 0x03, 0x0E, 0x01, 0x10, 0x01, 0x00);
    SPI_TRANSFER(0xE1 Negative Gamma Control, 0x0F, 0x37, 0x37, 0x0C, 0x0F, 0x05, 0x50, 0x32, 0x36, 0x04, 0x0B, 0x00, 0x19, 0x14, 0x0F); */
	data[0]=data[14]=  0;
 8011ea6:	4b4f      	ldr	r3, [pc, #316]	; (8011fe4 <Init_LCD+0x228>)
 8011ea8:	2200      	movs	r2, #0
 8011eaa:	839a      	strh	r2, [r3, #28]
 8011eac:	4b4d      	ldr	r3, [pc, #308]	; (8011fe4 <Init_LCD+0x228>)
 8011eae:	8b9a      	ldrh	r2, [r3, #28]
 8011eb0:	4b4c      	ldr	r3, [pc, #304]	; (8011fe4 <Init_LCD+0x228>)
 8011eb2:	801a      	strh	r2, [r3, #0]
	data[1]=data[2]=   0x2C;
 8011eb4:	4b4b      	ldr	r3, [pc, #300]	; (8011fe4 <Init_LCD+0x228>)
 8011eb6:	222c      	movs	r2, #44	; 0x2c
 8011eb8:	809a      	strh	r2, [r3, #4]
 8011eba:	4b4a      	ldr	r3, [pc, #296]	; (8011fe4 <Init_LCD+0x228>)
 8011ebc:	889a      	ldrh	r2, [r3, #4]
 8011ebe:	4b49      	ldr	r3, [pc, #292]	; (8011fe4 <Init_LCD+0x228>)
 8011ec0:	805a      	strh	r2, [r3, #2]
	data[3]=  0x0B;
 8011ec2:	4b48      	ldr	r3, [pc, #288]	; (8011fe4 <Init_LCD+0x228>)
 8011ec4:	220b      	movs	r2, #11
 8011ec6:	80da      	strh	r2, [r3, #6]
	data[4]=  0x0C;
 8011ec8:	4b46      	ldr	r3, [pc, #280]	; (8011fe4 <Init_LCD+0x228>)
 8011eca:	220c      	movs	r2, #12
 8011ecc:	811a      	strh	r2, [r3, #8]
	data[5]=  0x04;
 8011ece:	4b45      	ldr	r3, [pc, #276]	; (8011fe4 <Init_LCD+0x228>)
 8011ed0:	2204      	movs	r2, #4
 8011ed2:	815a      	strh	r2, [r3, #10]
	data[6]=  0x4C;
 8011ed4:	4b43      	ldr	r3, [pc, #268]	; (8011fe4 <Init_LCD+0x228>)
 8011ed6:	224c      	movs	r2, #76	; 0x4c
 8011ed8:	819a      	strh	r2, [r3, #12]
	data[7]=  0x64;
 8011eda:	4b42      	ldr	r3, [pc, #264]	; (8011fe4 <Init_LCD+0x228>)
 8011edc:	2264      	movs	r2, #100	; 0x64
 8011ede:	81da      	strh	r2, [r3, #14]
	data[8]=  0x36;
 8011ee0:	4b40      	ldr	r3, [pc, #256]	; (8011fe4 <Init_LCD+0x228>)
 8011ee2:	2236      	movs	r2, #54	; 0x36
 8011ee4:	821a      	strh	r2, [r3, #16]
	data[9]=  0x03;
 8011ee6:	4b3f      	ldr	r3, [pc, #252]	; (8011fe4 <Init_LCD+0x228>)
 8011ee8:	2203      	movs	r2, #3
 8011eea:	825a      	strh	r2, [r3, #18]
	data[10]= 0x0E;
 8011eec:	4b3d      	ldr	r3, [pc, #244]	; (8011fe4 <Init_LCD+0x228>)
 8011eee:	220e      	movs	r2, #14
 8011ef0:	829a      	strh	r2, [r3, #20]
	data[11]=data[13]= 0x2C;
 8011ef2:	4b3c      	ldr	r3, [pc, #240]	; (8011fe4 <Init_LCD+0x228>)
 8011ef4:	222c      	movs	r2, #44	; 0x2c
 8011ef6:	835a      	strh	r2, [r3, #26]
 8011ef8:	4b3a      	ldr	r3, [pc, #232]	; (8011fe4 <Init_LCD+0x228>)
 8011efa:	8b5a      	ldrh	r2, [r3, #26]
 8011efc:	4b39      	ldr	r3, [pc, #228]	; (8011fe4 <Init_LCD+0x228>)
 8011efe:	82da      	strh	r2, [r3, #22]
	data[12]= 0x10;
 8011f00:	4b38      	ldr	r3, [pc, #224]	; (8011fe4 <Init_LCD+0x228>)
 8011f02:	2210      	movs	r2, #16
 8011f04:	831a      	strh	r2, [r3, #24]
	lcd_write_cmd_data(0xe0, 15, data);  //positive gamma control
 8011f06:	4a37      	ldr	r2, [pc, #220]	; (8011fe4 <Init_LCD+0x228>)
 8011f08:	210f      	movs	r1, #15
 8011f0a:	20e0      	movs	r0, #224	; 0xe0
 8011f0c:	f7ff ff2a 	bl	8011d64 <lcd_write_cmd_data>

	data[0]=data[4]= data[14]= 0x0F;
 8011f10:	4b34      	ldr	r3, [pc, #208]	; (8011fe4 <Init_LCD+0x228>)
 8011f12:	220f      	movs	r2, #15
 8011f14:	839a      	strh	r2, [r3, #28]
 8011f16:	4b33      	ldr	r3, [pc, #204]	; (8011fe4 <Init_LCD+0x228>)
 8011f18:	8b9a      	ldrh	r2, [r3, #28]
 8011f1a:	4b32      	ldr	r3, [pc, #200]	; (8011fe4 <Init_LCD+0x228>)
 8011f1c:	811a      	strh	r2, [r3, #8]
 8011f1e:	4b31      	ldr	r3, [pc, #196]	; (8011fe4 <Init_LCD+0x228>)
 8011f20:	891a      	ldrh	r2, [r3, #8]
 8011f22:	4b30      	ldr	r3, [pc, #192]	; (8011fe4 <Init_LCD+0x228>)
 8011f24:	801a      	strh	r2, [r3, #0]
	data[1]=data[2]= 0x37;
 8011f26:	4b2f      	ldr	r3, [pc, #188]	; (8011fe4 <Init_LCD+0x228>)
 8011f28:	2237      	movs	r2, #55	; 0x37
 8011f2a:	809a      	strh	r2, [r3, #4]
 8011f2c:	4b2d      	ldr	r3, [pc, #180]	; (8011fe4 <Init_LCD+0x228>)
 8011f2e:	889a      	ldrh	r2, [r3, #4]
 8011f30:	4b2c      	ldr	r3, [pc, #176]	; (8011fe4 <Init_LCD+0x228>)
 8011f32:	805a      	strh	r2, [r3, #2]
	data[3]=  0x0C;
 8011f34:	4b2b      	ldr	r3, [pc, #172]	; (8011fe4 <Init_LCD+0x228>)
 8011f36:	220c      	movs	r2, #12
 8011f38:	80da      	strh	r2, [r3, #6]
	data[5]=  0x05;
 8011f3a:	4b2a      	ldr	r3, [pc, #168]	; (8011fe4 <Init_LCD+0x228>)
 8011f3c:	2205      	movs	r2, #5
 8011f3e:	815a      	strh	r2, [r3, #10]
	data[6]=  0x50;
 8011f40:	4b28      	ldr	r3, [pc, #160]	; (8011fe4 <Init_LCD+0x228>)
 8011f42:	2250      	movs	r2, #80	; 0x50
 8011f44:	819a      	strh	r2, [r3, #12]
	data[7]=  0x32;
 8011f46:	4b27      	ldr	r3, [pc, #156]	; (8011fe4 <Init_LCD+0x228>)
 8011f48:	2232      	movs	r2, #50	; 0x32
 8011f4a:	81da      	strh	r2, [r3, #14]
	data[8]=  0x36;
 8011f4c:	4b25      	ldr	r3, [pc, #148]	; (8011fe4 <Init_LCD+0x228>)
 8011f4e:	2236      	movs	r2, #54	; 0x36
 8011f50:	821a      	strh	r2, [r3, #16]
	data[9]=  0x04;
 8011f52:	4b24      	ldr	r3, [pc, #144]	; (8011fe4 <Init_LCD+0x228>)
 8011f54:	2204      	movs	r2, #4
 8011f56:	825a      	strh	r2, [r3, #18]
	data[10]= 0x0B;
 8011f58:	4b22      	ldr	r3, [pc, #136]	; (8011fe4 <Init_LCD+0x228>)
 8011f5a:	220b      	movs	r2, #11
 8011f5c:	829a      	strh	r2, [r3, #20]
	data[11]= 0;
 8011f5e:	4b21      	ldr	r3, [pc, #132]	; (8011fe4 <Init_LCD+0x228>)
 8011f60:	2200      	movs	r2, #0
 8011f62:	82da      	strh	r2, [r3, #22]
	data[12]= 0x19;
 8011f64:	4b1f      	ldr	r3, [pc, #124]	; (8011fe4 <Init_LCD+0x228>)
 8011f66:	2219      	movs	r2, #25
 8011f68:	831a      	strh	r2, [r3, #24]
	data[13]= 0x14;
 8011f6a:	4b1e      	ldr	r3, [pc, #120]	; (8011fe4 <Init_LCD+0x228>)
 8011f6c:	2214      	movs	r2, #20
 8011f6e:	835a      	strh	r2, [r3, #26]
	lcd_write_cmd_data(0xe1, 15, data);  //Negitive gamma control
 8011f70:	4a1c      	ldr	r2, [pc, #112]	; (8011fe4 <Init_LCD+0x228>)
 8011f72:	210f      	movs	r1, #15
 8011f74:	20e1      	movs	r0, #225	; 0xe1
 8011f76:	f7ff fef5 	bl	8011d64 <lcd_write_cmd_data>

//	SPI_TRANSFER(0xB6/*Display Function Control*/, 0, /*ISC=2*/2, /*Display Height h=*/59); // Actual display height = (h+1)*8 so (59+1)*8=480
	data[0]=0;
 8011f7a:	4b1a      	ldr	r3, [pc, #104]	; (8011fe4 <Init_LCD+0x228>)
 8011f7c:	2200      	movs	r2, #0
 8011f7e:	801a      	strh	r2, [r3, #0]
	data[1]=2;
 8011f80:	4b18      	ldr	r3, [pc, #96]	; (8011fe4 <Init_LCD+0x228>)
 8011f82:	2202      	movs	r2, #2
 8011f84:	805a      	strh	r2, [r3, #2]
	data[2]=59;
 8011f86:	4b17      	ldr	r3, [pc, #92]	; (8011fe4 <Init_LCD+0x228>)
 8011f88:	223b      	movs	r2, #59	; 0x3b
 8011f8a:	809a      	strh	r2, [r3, #4]
	lcd_write_cmd_data(0xb6, 3, data);  //display function control
 8011f8c:	4a15      	ldr	r2, [pc, #84]	; (8011fe4 <Init_LCD+0x228>)
 8011f8e:	2103      	movs	r1, #3
 8011f90:	20b6      	movs	r0, #182	; 0xb6
 8011f92:	f7ff fee7 	bl	8011d64 <lcd_write_cmd_data>

	lcd_write_cmd_data(0x11, 0, data);  //sleep
 8011f96:	4a13      	ldr	r2, [pc, #76]	; (8011fe4 <Init_LCD+0x228>)
 8011f98:	2100      	movs	r1, #0
 8011f9a:	2011      	movs	r0, #17
 8011f9c:	f7ff fee2 	bl	8011d64 <lcd_write_cmd_data>
	HAL_Delay(120);
 8011fa0:	2078      	movs	r0, #120	; 0x78
 8011fa2:	f006 fa25 	bl	80183f0 <HAL_Delay>
	lcd_write_cmd_data(0x29, 0, data);  //display on
 8011fa6:	4a0f      	ldr	r2, [pc, #60]	; (8011fe4 <Init_LCD+0x228>)
 8011fa8:	2100      	movs	r1, #0
 8011faa:	2029      	movs	r0, #41	; 0x29
 8011fac:	f7ff feda 	bl	8011d64 <lcd_write_cmd_data>
	lcd_write_cmd_data(0x38, 0, data);  //idle off
 8011fb0:	4a0c      	ldr	r2, [pc, #48]	; (8011fe4 <Init_LCD+0x228>)
 8011fb2:	2100      	movs	r1, #0
 8011fb4:	2038      	movs	r0, #56	; 0x38
 8011fb6:	f7ff fed5 	bl	8011d64 <lcd_write_cmd_data>
	lcd_write_cmd_data(0x13, 0, data);  //Normal Display Mode ON
 8011fba:	4a0a      	ldr	r2, [pc, #40]	; (8011fe4 <Init_LCD+0x228>)
 8011fbc:	2100      	movs	r1, #0
 8011fbe:	2013      	movs	r0, #19
 8011fc0:	f7ff fed0 	bl	8011d64 <lcd_write_cmd_data>

	HAL_GPIO_WritePin( LcdCs_GPIO_Port, LcdCs_Pin, GPIO_PIN_SET);  //disable lcd controller
 8011fc4:	2201      	movs	r2, #1
 8011fc6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8011fca:	4804      	ldr	r0, [pc, #16]	; (8011fdc <Init_LCD+0x220>)
 8011fcc:	f007 fdee 	bl	8019bac <HAL_GPIO_WritePin>

	LCD_ClrScrn(0);  //clear screen to black
 8011fd0:	2000      	movs	r0, #0
 8011fd2:	f000 f809 	bl	8011fe8 <LCD_ClrScrn>
}
 8011fd6:	bf00      	nop
 8011fd8:	bd80      	pop	{r7, pc}
 8011fda:	bf00      	nop
 8011fdc:	40020800 	.word	0x40020800
 8011fe0:	40020400 	.word	0x40020400
 8011fe4:	20002818 	.word	0x20002818

08011fe8 <LCD_ClrScrn>:

void LCD_ClrScrn(unsigned short Color)
{
 8011fe8:	b580      	push	{r7, lr}
 8011fea:	b084      	sub	sp, #16
 8011fec:	af00      	add	r7, sp, #0
 8011fee:	4603      	mov	r3, r0
 8011ff0:	80fb      	strh	r3, [r7, #6]
short y;
unsigned short *ptr;

ptr = malloc(320*2);
 8011ff2:	f44f 7020 	mov.w	r0, #640	; 0x280
 8011ff6:	f010 fe11 	bl	8022c1c <malloc>
 8011ffa:	4603      	mov	r3, r0
 8011ffc:	60bb      	str	r3, [r7, #8]
HAL_GPIO_WritePin( LcdCs_GPIO_Port, LcdCs_Pin, GPIO_PIN_RESET);  //enable lcd controller
 8011ffe:	2200      	movs	r2, #0
 8012000:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8012004:	483d      	ldr	r0, [pc, #244]	; (80120fc <LCD_ClrScrn+0x114>)
 8012006:	f007 fdd1 	bl	8019bac <HAL_GPIO_WritePin>

for(y=0; y<480; ++y )
 801200a:	2300      	movs	r3, #0
 801200c:	81fb      	strh	r3, [r7, #14]
 801200e:	e03c      	b.n	801208a <LCD_ClrScrn+0xa2>
{
	data[0]=data[1]= 0;
 8012010:	4b3b      	ldr	r3, [pc, #236]	; (8012100 <LCD_ClrScrn+0x118>)
 8012012:	2200      	movs	r2, #0
 8012014:	805a      	strh	r2, [r3, #2]
 8012016:	4b3a      	ldr	r3, [pc, #232]	; (8012100 <LCD_ClrScrn+0x118>)
 8012018:	885a      	ldrh	r2, [r3, #2]
 801201a:	4b39      	ldr	r3, [pc, #228]	; (8012100 <LCD_ClrScrn+0x118>)
 801201c:	801a      	strh	r2, [r3, #0]
	data[2]= 319>>8;
 801201e:	4b38      	ldr	r3, [pc, #224]	; (8012100 <LCD_ClrScrn+0x118>)
 8012020:	2201      	movs	r2, #1
 8012022:	809a      	strh	r2, [r3, #4]
	data[3]= 319 & 0xFF;
 8012024:	4b36      	ldr	r3, [pc, #216]	; (8012100 <LCD_ClrScrn+0x118>)
 8012026:	223f      	movs	r2, #63	; 0x3f
 8012028:	80da      	strh	r2, [r3, #6]
	lcd_write_cmd_data(0x2A, 4, data);  //set x
 801202a:	4a35      	ldr	r2, [pc, #212]	; (8012100 <LCD_ClrScrn+0x118>)
 801202c:	2104      	movs	r1, #4
 801202e:	202a      	movs	r0, #42	; 0x2a
 8012030:	f7ff fe98 	bl	8011d64 <lcd_write_cmd_data>
	data[0]= y>>8;
 8012034:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8012038:	121b      	asrs	r3, r3, #8
 801203a:	b21b      	sxth	r3, r3
 801203c:	b29a      	uxth	r2, r3
 801203e:	4b30      	ldr	r3, [pc, #192]	; (8012100 <LCD_ClrScrn+0x118>)
 8012040:	801a      	strh	r2, [r3, #0]
	data[1]= y & 0xFF;
 8012042:	89fb      	ldrh	r3, [r7, #14]
 8012044:	b2db      	uxtb	r3, r3
 8012046:	b29a      	uxth	r2, r3
 8012048:	4b2d      	ldr	r3, [pc, #180]	; (8012100 <LCD_ClrScrn+0x118>)
 801204a:	805a      	strh	r2, [r3, #2]
	data[2]= 479>>8;
 801204c:	4b2c      	ldr	r3, [pc, #176]	; (8012100 <LCD_ClrScrn+0x118>)
 801204e:	2201      	movs	r2, #1
 8012050:	809a      	strh	r2, [r3, #4]
	data[3]= 479 & 0xFF;
 8012052:	4b2b      	ldr	r3, [pc, #172]	; (8012100 <LCD_ClrScrn+0x118>)
 8012054:	22df      	movs	r2, #223	; 0xdf
 8012056:	80da      	strh	r2, [r3, #6]
	lcd_write_cmd_data(0x2B, 4, data);  //set y
 8012058:	4a29      	ldr	r2, [pc, #164]	; (8012100 <LCD_ClrScrn+0x118>)
 801205a:	2104      	movs	r1, #4
 801205c:	202b      	movs	r0, #43	; 0x2b
 801205e:	f7ff fe81 	bl	8011d64 <lcd_write_cmd_data>

	if(ptr != NULL)
 8012062:	68bb      	ldr	r3, [r7, #8]
 8012064:	2b00      	cmp	r3, #0
 8012066:	d016      	beq.n	8012096 <LCD_ClrScrn+0xae>
	{
		memset16(ptr, Color, 320);
 8012068:	88fb      	ldrh	r3, [r7, #6]
 801206a:	f44f 72a0 	mov.w	r2, #320	; 0x140
 801206e:	4619      	mov	r1, r3
 8012070:	68b8      	ldr	r0, [r7, #8]
 8012072:	f7ff fc67 	bl	8011944 <memset16>
		lcd_write_cmd_data(0x2C, 320, ptr);  //write out pixels
 8012076:	68ba      	ldr	r2, [r7, #8]
 8012078:	f44f 71a0 	mov.w	r1, #320	; 0x140
 801207c:	202c      	movs	r0, #44	; 0x2c
 801207e:	f7ff fe71 	bl	8011d64 <lcd_write_cmd_data>
for(y=0; y<480; ++y )
 8012082:	89fb      	ldrh	r3, [r7, #14]
 8012084:	3301      	adds	r3, #1
 8012086:	b29b      	uxth	r3, r3
 8012088:	81fb      	strh	r3, [r7, #14]
 801208a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 801208e:	f5b3 7ff0 	cmp.w	r3, #480	; 0x1e0
 8012092:	dbbd      	blt.n	8012010 <LCD_ClrScrn+0x28>
 8012094:	e000      	b.n	8012098 <LCD_ClrScrn+0xb0>
	}
	else
		break; //bail out
 8012096:	bf00      	nop
}

free(ptr);
 8012098:	68b8      	ldr	r0, [r7, #8]
 801209a:	f010 fdc7 	bl	8022c2c <free>

data[0]=data[1]= 0;
 801209e:	4b18      	ldr	r3, [pc, #96]	; (8012100 <LCD_ClrScrn+0x118>)
 80120a0:	2200      	movs	r2, #0
 80120a2:	805a      	strh	r2, [r3, #2]
 80120a4:	4b16      	ldr	r3, [pc, #88]	; (8012100 <LCD_ClrScrn+0x118>)
 80120a6:	885a      	ldrh	r2, [r3, #2]
 80120a8:	4b15      	ldr	r3, [pc, #84]	; (8012100 <LCD_ClrScrn+0x118>)
 80120aa:	801a      	strh	r2, [r3, #0]
data[2]= 319>>8;
 80120ac:	4b14      	ldr	r3, [pc, #80]	; (8012100 <LCD_ClrScrn+0x118>)
 80120ae:	2201      	movs	r2, #1
 80120b0:	809a      	strh	r2, [r3, #4]
data[3]= 319 & 0xFF;
 80120b2:	4b13      	ldr	r3, [pc, #76]	; (8012100 <LCD_ClrScrn+0x118>)
 80120b4:	223f      	movs	r2, #63	; 0x3f
 80120b6:	80da      	strh	r2, [r3, #6]
lcd_write_cmd_data(0x2A, 4, data);  //set x
 80120b8:	4a11      	ldr	r2, [pc, #68]	; (8012100 <LCD_ClrScrn+0x118>)
 80120ba:	2104      	movs	r1, #4
 80120bc:	202a      	movs	r0, #42	; 0x2a
 80120be:	f7ff fe51 	bl	8011d64 <lcd_write_cmd_data>
data[0]=data[1]= 0;
 80120c2:	4b0f      	ldr	r3, [pc, #60]	; (8012100 <LCD_ClrScrn+0x118>)
 80120c4:	2200      	movs	r2, #0
 80120c6:	805a      	strh	r2, [r3, #2]
 80120c8:	4b0d      	ldr	r3, [pc, #52]	; (8012100 <LCD_ClrScrn+0x118>)
 80120ca:	885a      	ldrh	r2, [r3, #2]
 80120cc:	4b0c      	ldr	r3, [pc, #48]	; (8012100 <LCD_ClrScrn+0x118>)
 80120ce:	801a      	strh	r2, [r3, #0]
data[2]= 479>>8;
 80120d0:	4b0b      	ldr	r3, [pc, #44]	; (8012100 <LCD_ClrScrn+0x118>)
 80120d2:	2201      	movs	r2, #1
 80120d4:	809a      	strh	r2, [r3, #4]
data[3]= 479 & 0xFF;
 80120d6:	4b0a      	ldr	r3, [pc, #40]	; (8012100 <LCD_ClrScrn+0x118>)
 80120d8:	22df      	movs	r2, #223	; 0xdf
 80120da:	80da      	strh	r2, [r3, #6]
lcd_write_cmd_data(0x2B, 4, data);  //set y
 80120dc:	4a08      	ldr	r2, [pc, #32]	; (8012100 <LCD_ClrScrn+0x118>)
 80120de:	2104      	movs	r1, #4
 80120e0:	202b      	movs	r0, #43	; 0x2b
 80120e2:	f7ff fe3f 	bl	8011d64 <lcd_write_cmd_data>

HAL_GPIO_WritePin( LcdCs_GPIO_Port, LcdCs_Pin, GPIO_PIN_SET);  //disable lcd controller
 80120e6:	2201      	movs	r2, #1
 80120e8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80120ec:	4803      	ldr	r0, [pc, #12]	; (80120fc <LCD_ClrScrn+0x114>)
 80120ee:	f007 fd5d 	bl	8019bac <HAL_GPIO_WritePin>

}
 80120f2:	bf00      	nop
 80120f4:	3710      	adds	r7, #16
 80120f6:	46bd      	mov	sp, r7
 80120f8:	bd80      	pop	{r7, pc}
 80120fa:	bf00      	nop
 80120fc:	40020800 	.word	0x40020800
 8012100:	20002818 	.word	0x20002818

08012104 <LCD_Set_Posi>:

void LCD_Set_Posi(short Sx, short Sy)
{
 8012104:	b580      	push	{r7, lr}
 8012106:	b082      	sub	sp, #8
 8012108:	af00      	add	r7, sp, #0
 801210a:	4603      	mov	r3, r0
 801210c:	460a      	mov	r2, r1
 801210e:	80fb      	strh	r3, [r7, #6]
 8012110:	4613      	mov	r3, r2
 8012112:	80bb      	strh	r3, [r7, #4]
	HAL_GPIO_WritePin( LcdCs_GPIO_Port, LcdCs_Pin, GPIO_PIN_RESET);  //enable lcd controller
 8012114:	2200      	movs	r2, #0
 8012116:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 801211a:	481f      	ldr	r0, [pc, #124]	; (8012198 <LCD_Set_Posi+0x94>)
 801211c:	f007 fd46 	bl	8019bac <HAL_GPIO_WritePin>

	data[0]= data[2]= Sx>>8;
 8012120:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8012124:	121b      	asrs	r3, r3, #8
 8012126:	b21b      	sxth	r3, r3
 8012128:	b29a      	uxth	r2, r3
 801212a:	4b1c      	ldr	r3, [pc, #112]	; (801219c <LCD_Set_Posi+0x98>)
 801212c:	809a      	strh	r2, [r3, #4]
 801212e:	4b1b      	ldr	r3, [pc, #108]	; (801219c <LCD_Set_Posi+0x98>)
 8012130:	889a      	ldrh	r2, [r3, #4]
 8012132:	4b1a      	ldr	r3, [pc, #104]	; (801219c <LCD_Set_Posi+0x98>)
 8012134:	801a      	strh	r2, [r3, #0]
	data[1]= data[3]= Sx & 0xFF;
 8012136:	88fb      	ldrh	r3, [r7, #6]
 8012138:	b2db      	uxtb	r3, r3
 801213a:	b29a      	uxth	r2, r3
 801213c:	4b17      	ldr	r3, [pc, #92]	; (801219c <LCD_Set_Posi+0x98>)
 801213e:	80da      	strh	r2, [r3, #6]
 8012140:	4b16      	ldr	r3, [pc, #88]	; (801219c <LCD_Set_Posi+0x98>)
 8012142:	88da      	ldrh	r2, [r3, #6]
 8012144:	4b15      	ldr	r3, [pc, #84]	; (801219c <LCD_Set_Posi+0x98>)
 8012146:	805a      	strh	r2, [r3, #2]
	lcd_write_cmd_data(0x2A, 4, data);  //set x
 8012148:	4a14      	ldr	r2, [pc, #80]	; (801219c <LCD_Set_Posi+0x98>)
 801214a:	2104      	movs	r1, #4
 801214c:	202a      	movs	r0, #42	; 0x2a
 801214e:	f7ff fe09 	bl	8011d64 <lcd_write_cmd_data>
	data[0]= data[1]= Sy>>8;
 8012152:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8012156:	121b      	asrs	r3, r3, #8
 8012158:	b21b      	sxth	r3, r3
 801215a:	b29a      	uxth	r2, r3
 801215c:	4b0f      	ldr	r3, [pc, #60]	; (801219c <LCD_Set_Posi+0x98>)
 801215e:	805a      	strh	r2, [r3, #2]
 8012160:	4b0e      	ldr	r3, [pc, #56]	; (801219c <LCD_Set_Posi+0x98>)
 8012162:	885a      	ldrh	r2, [r3, #2]
 8012164:	4b0d      	ldr	r3, [pc, #52]	; (801219c <LCD_Set_Posi+0x98>)
 8012166:	801a      	strh	r2, [r3, #0]
	data[2]= data[3]= Sy & 0xFF;
 8012168:	88bb      	ldrh	r3, [r7, #4]
 801216a:	b2db      	uxtb	r3, r3
 801216c:	b29a      	uxth	r2, r3
 801216e:	4b0b      	ldr	r3, [pc, #44]	; (801219c <LCD_Set_Posi+0x98>)
 8012170:	80da      	strh	r2, [r3, #6]
 8012172:	4b0a      	ldr	r3, [pc, #40]	; (801219c <LCD_Set_Posi+0x98>)
 8012174:	88da      	ldrh	r2, [r3, #6]
 8012176:	4b09      	ldr	r3, [pc, #36]	; (801219c <LCD_Set_Posi+0x98>)
 8012178:	809a      	strh	r2, [r3, #4]
	lcd_write_cmd_data(0x2B, 4, data);  //set y
 801217a:	4a08      	ldr	r2, [pc, #32]	; (801219c <LCD_Set_Posi+0x98>)
 801217c:	2104      	movs	r1, #4
 801217e:	202b      	movs	r0, #43	; 0x2b
 8012180:	f7ff fdf0 	bl	8011d64 <lcd_write_cmd_data>

	HAL_GPIO_WritePin( LcdCs_GPIO_Port, LcdCs_Pin, GPIO_PIN_SET);    //disable lcd controller
 8012184:	2201      	movs	r2, #1
 8012186:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 801218a:	4803      	ldr	r0, [pc, #12]	; (8012198 <LCD_Set_Posi+0x94>)
 801218c:	f007 fd0e 	bl	8019bac <HAL_GPIO_WritePin>
}
 8012190:	bf00      	nop
 8012192:	3708      	adds	r7, #8
 8012194:	46bd      	mov	sp, r7
 8012196:	bd80      	pop	{r7, pc}
 8012198:	40020800 	.word	0x40020800
 801219c:	20002818 	.word	0x20002818

080121a0 <LCD_Set_Pixel>:

void LCD_Set_Pixel(unsigned short Color)
{
 80121a0:	b580      	push	{r7, lr}
 80121a2:	b082      	sub	sp, #8
 80121a4:	af00      	add	r7, sp, #0
 80121a6:	4603      	mov	r3, r0
 80121a8:	80fb      	strh	r3, [r7, #6]
	HAL_GPIO_WritePin( LcdCs_GPIO_Port, LcdCs_Pin, GPIO_PIN_RESET);  //enable lcd controller
 80121aa:	2200      	movs	r2, #0
 80121ac:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80121b0:	480d      	ldr	r0, [pc, #52]	; (80121e8 <LCD_Set_Pixel+0x48>)
 80121b2:	f007 fcfb 	bl	8019bac <HAL_GPIO_WritePin>

	data[0]= Color>>8;
 80121b6:	88fb      	ldrh	r3, [r7, #6]
 80121b8:	0a1b      	lsrs	r3, r3, #8
 80121ba:	b29a      	uxth	r2, r3
 80121bc:	4b0b      	ldr	r3, [pc, #44]	; (80121ec <LCD_Set_Pixel+0x4c>)
 80121be:	801a      	strh	r2, [r3, #0]
	data[1]= Color & 0xFF;
 80121c0:	88fb      	ldrh	r3, [r7, #6]
 80121c2:	b2db      	uxtb	r3, r3
 80121c4:	b29a      	uxth	r2, r3
 80121c6:	4b09      	ldr	r3, [pc, #36]	; (80121ec <LCD_Set_Pixel+0x4c>)
 80121c8:	805a      	strh	r2, [r3, #2]
	lcd_write_cmd_data(0x2C, 2, data);  //set pixel
 80121ca:	4a08      	ldr	r2, [pc, #32]	; (80121ec <LCD_Set_Pixel+0x4c>)
 80121cc:	2102      	movs	r1, #2
 80121ce:	202c      	movs	r0, #44	; 0x2c
 80121d0:	f7ff fdc8 	bl	8011d64 <lcd_write_cmd_data>
	HAL_GPIO_WritePin( LcdCs_GPIO_Port, LcdCs_Pin, GPIO_PIN_SET);    //disable lcd controller
 80121d4:	2201      	movs	r2, #1
 80121d6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80121da:	4803      	ldr	r0, [pc, #12]	; (80121e8 <LCD_Set_Pixel+0x48>)
 80121dc:	f007 fce6 	bl	8019bac <HAL_GPIO_WritePin>
}
 80121e0:	bf00      	nop
 80121e2:	3708      	adds	r7, #8
 80121e4:	46bd      	mov	sp, r7
 80121e6:	bd80      	pop	{r7, pc}
 80121e8:	40020800 	.word	0x40020800
 80121ec:	20002818 	.word	0x20002818

080121f0 <LCD_Get_Pixel>:

unsigned short LCD_Get_Pixel(void)
{
 80121f0:	b580      	push	{r7, lr}
 80121f2:	b082      	sub	sp, #8
 80121f4:	af00      	add	r7, sp, #0
	short ret;
	unsigned short fred;

	HAL_GPIO_WritePin( LcdCs_GPIO_Port, LcdCs_Pin, GPIO_PIN_RESET);  //enable lcd controller
 80121f6:	2200      	movs	r2, #0
 80121f8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80121fc:	4814      	ldr	r0, [pc, #80]	; (8012250 <LCD_Get_Pixel+0x60>)
 80121fe:	f007 fcd5 	bl	8019bac <HAL_GPIO_WritePin>
	lcd_write_cmd_data(0x2E, 0, data);  //read data
 8012202:	4a14      	ldr	r2, [pc, #80]	; (8012254 <LCD_Get_Pixel+0x64>)
 8012204:	2100      	movs	r1, #0
 8012206:	202e      	movs	r0, #46	; 0x2e
 8012208:	f7ff fdac 	bl	8011d64 <lcd_write_cmd_data>

	ret = HAL_SPI_Receive(&hspi3, (unsigned char *)data, 2, 1);
 801220c:	2301      	movs	r3, #1
 801220e:	2202      	movs	r2, #2
 8012210:	4910      	ldr	r1, [pc, #64]	; (8012254 <LCD_Get_Pixel+0x64>)
 8012212:	4811      	ldr	r0, [pc, #68]	; (8012258 <LCD_Get_Pixel+0x68>)
 8012214:	f00a f90b 	bl	801c42e <HAL_SPI_Receive>
 8012218:	4603      	mov	r3, r0
 801221a:	80fb      	strh	r3, [r7, #6]

	HAL_GPIO_WritePin( LcdCs_GPIO_Port, LcdCs_Pin, GPIO_PIN_SET);    //disable lcd controller
 801221c:	2201      	movs	r2, #1
 801221e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8012222:	480b      	ldr	r0, [pc, #44]	; (8012250 <LCD_Get_Pixel+0x60>)
 8012224:	f007 fcc2 	bl	8019bac <HAL_GPIO_WritePin>

	if( ret == HAL_OK )
 8012228:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801222c:	2b00      	cmp	r3, #0
 801222e:	d10a      	bne.n	8012246 <LCD_Get_Pixel+0x56>
		{
		fred =data[0]<<8;
 8012230:	4b08      	ldr	r3, [pc, #32]	; (8012254 <LCD_Get_Pixel+0x64>)
 8012232:	881b      	ldrh	r3, [r3, #0]
 8012234:	021b      	lsls	r3, r3, #8
 8012236:	80bb      	strh	r3, [r7, #4]
		fred |= data[1];
 8012238:	4b06      	ldr	r3, [pc, #24]	; (8012254 <LCD_Get_Pixel+0x64>)
 801223a:	885a      	ldrh	r2, [r3, #2]
 801223c:	88bb      	ldrh	r3, [r7, #4]
 801223e:	4313      	orrs	r3, r2
 8012240:	80bb      	strh	r3, [r7, #4]
		return (fred);
 8012242:	88bb      	ldrh	r3, [r7, #4]
 8012244:	e000      	b.n	8012248 <LCD_Get_Pixel+0x58>
		}
	else
		return 0;
 8012246:	2300      	movs	r3, #0

}
 8012248:	4618      	mov	r0, r3
 801224a:	3708      	adds	r7, #8
 801224c:	46bd      	mov	sp, r7
 801224e:	bd80      	pop	{r7, pc}
 8012250:	40020800 	.word	0x40020800
 8012254:	20002818 	.word	0x20002818
 8012258:	20006a20 	.word	0x20006a20

0801225c <Draw_4Point>:

/*******************************************************************************
Draw_4Point:
*******************************************************************************/
void Draw_4Point(short x, short y, char Str_Cnt, char High)
{
 801225c:	b590      	push	{r4, r7, lr}
 801225e:	b083      	sub	sp, #12
 8012260:	af00      	add	r7, sp, #0
 8012262:	4604      	mov	r4, r0
 8012264:	4608      	mov	r0, r1
 8012266:	4611      	mov	r1, r2
 8012268:	461a      	mov	r2, r3
 801226a:	4623      	mov	r3, r4
 801226c:	80fb      	strh	r3, [r7, #6]
 801226e:	4603      	mov	r3, r0
 8012270:	80bb      	strh	r3, [r7, #4]
 8012272:	460b      	mov	r3, r1
 8012274:	70fb      	strb	r3, [r7, #3]
 8012276:	4613      	mov	r3, r2
 8012278:	70bb      	strb	r3, [r7, #2]
  LCD_Set_Posi(x,y);
 801227a:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 801227e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8012282:	4611      	mov	r1, r2
 8012284:	4618      	mov	r0, r3
 8012286:	f7ff ff3d 	bl	8012104 <LCD_Set_Posi>
  LCD_Set_Pixel(DAR);
 801228a:	f643 10e7 	movw	r0, #14823	; 0x39e7
 801228e:	f7ff ff87 	bl	80121a0 <LCD_Set_Pixel>
  LCD_Set_Posi(x,y+High-1);
 8012292:	78bb      	ldrb	r3, [r7, #2]
 8012294:	b29a      	uxth	r2, r3
 8012296:	88bb      	ldrh	r3, [r7, #4]
 8012298:	4413      	add	r3, r2
 801229a:	b29b      	uxth	r3, r3
 801229c:	3b01      	subs	r3, #1
 801229e:	b29b      	uxth	r3, r3
 80122a0:	b21a      	sxth	r2, r3
 80122a2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80122a6:	4611      	mov	r1, r2
 80122a8:	4618      	mov	r0, r3
 80122aa:	f7ff ff2b 	bl	8012104 <LCD_Set_Posi>
  LCD_Set_Pixel(DAR);
 80122ae:	f643 10e7 	movw	r0, #14823	; 0x39e7
 80122b2:	f7ff ff75 	bl	80121a0 <LCD_Set_Pixel>
  LCD_Set_Posi(x+Str_Cnt*((High>10)? 8:6),y);
 80122b6:	78fb      	ldrb	r3, [r7, #3]
 80122b8:	b29b      	uxth	r3, r3
 80122ba:	78ba      	ldrb	r2, [r7, #2]
 80122bc:	2a0a      	cmp	r2, #10
 80122be:	d901      	bls.n	80122c4 <Draw_4Point+0x68>
 80122c0:	2208      	movs	r2, #8
 80122c2:	e000      	b.n	80122c6 <Draw_4Point+0x6a>
 80122c4:	2206      	movs	r2, #6
 80122c6:	fb12 f303 	smulbb	r3, r2, r3
 80122ca:	b29a      	uxth	r2, r3
 80122cc:	88fb      	ldrh	r3, [r7, #6]
 80122ce:	4413      	add	r3, r2
 80122d0:	b29b      	uxth	r3, r3
 80122d2:	b21b      	sxth	r3, r3
 80122d4:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 80122d8:	4611      	mov	r1, r2
 80122da:	4618      	mov	r0, r3
 80122dc:	f7ff ff12 	bl	8012104 <LCD_Set_Posi>
  LCD_Set_Pixel(DAR);
 80122e0:	f643 10e7 	movw	r0, #14823	; 0x39e7
 80122e4:	f7ff ff5c 	bl	80121a0 <LCD_Set_Pixel>
  LCD_Set_Posi(x+Str_Cnt*((High>10)? 8:6),y+High-1);
 80122e8:	78fb      	ldrb	r3, [r7, #3]
 80122ea:	b29b      	uxth	r3, r3
 80122ec:	78ba      	ldrb	r2, [r7, #2]
 80122ee:	2a0a      	cmp	r2, #10
 80122f0:	d901      	bls.n	80122f6 <Draw_4Point+0x9a>
 80122f2:	2208      	movs	r2, #8
 80122f4:	e000      	b.n	80122f8 <Draw_4Point+0x9c>
 80122f6:	2206      	movs	r2, #6
 80122f8:	fb12 f303 	smulbb	r3, r2, r3
 80122fc:	b29a      	uxth	r2, r3
 80122fe:	88fb      	ldrh	r3, [r7, #6]
 8012300:	4413      	add	r3, r2
 8012302:	b29b      	uxth	r3, r3
 8012304:	b218      	sxth	r0, r3
 8012306:	78bb      	ldrb	r3, [r7, #2]
 8012308:	b29a      	uxth	r2, r3
 801230a:	88bb      	ldrh	r3, [r7, #4]
 801230c:	4413      	add	r3, r2
 801230e:	b29b      	uxth	r3, r3
 8012310:	3b01      	subs	r3, #1
 8012312:	b29b      	uxth	r3, r3
 8012314:	b21b      	sxth	r3, r3
 8012316:	4619      	mov	r1, r3
 8012318:	f7ff fef4 	bl	8012104 <LCD_Set_Posi>
  LCD_Set_Pixel(DAR);
 801231c:	f643 10e7 	movw	r0, #14823	; 0x39e7
 8012320:	f7ff ff3e 	bl	80121a0 <LCD_Set_Pixel>
}
 8012324:	bf00      	nop
 8012326:	370c      	adds	r7, #12
 8012328:	46bd      	mov	sp, r7
 801232a:	bd90      	pop	{r4, r7, pc}

0801232c <Update_Title>:

/*******************************************************************************
 Update_Item:
*******************************************************************************/
void Update_Title(void)
{
 801232c:	b580      	push	{r7, lr}
 801232e:	b082      	sub	sp, #8
 8012330:	af00      	add	r7, sp, #0
  short i;

  for(i=0; i<8; i++)
 8012332:	2300      	movs	r3, #0
 8012334:	80fb      	strh	r3, [r7, #6]
 8012336:	e03b      	b.n	80123b0 <Update_Title+0x84>
  {
    SetColor(GRY, TCOLOR[i]);
 8012338:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801233c:	4a21      	ldr	r2, [pc, #132]	; (80123c4 <Update_Title+0x98>)
 801233e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8012342:	4619      	mov	r1, r3
 8012344:	f643 10e7 	movw	r0, #14823	; 0x39e7
 8012348:	f7fb fc2c 	bl	800dba4 <SetColor>
    DispStr8x14(T_X-2, TITLE_Y[i], (Current == i)? INV : PRN, (char*)TSTR[i]);
 801234c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8012350:	4a1d      	ldr	r2, [pc, #116]	; (80123c8 <Update_Title+0x9c>)
 8012352:	5cd3      	ldrb	r3, [r2, r3]
 8012354:	b219      	sxth	r1, r3
 8012356:	4b1d      	ldr	r3, [pc, #116]	; (80123cc <Update_Title+0xa0>)
 8012358:	f9b3 3000 	ldrsh.w	r3, [r3]
 801235c:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8012360:	429a      	cmp	r2, r3
 8012362:	bf0c      	ite	eq
 8012364:	2301      	moveq	r3, #1
 8012366:	2300      	movne	r3, #0
 8012368:	b2db      	uxtb	r3, r3
 801236a:	4618      	mov	r0, r3
 801236c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8012370:	009b      	lsls	r3, r3, #2
 8012372:	4a17      	ldr	r2, [pc, #92]	; (80123d0 <Update_Title+0xa4>)
 8012374:	4413      	add	r3, r2
 8012376:	4602      	mov	r2, r0
 8012378:	f240 102f 	movw	r0, #303	; 0x12f
 801237c:	f7fb fbba 	bl	800daf4 <DispStr8x14>
    if(Current == i)
 8012380:	4b12      	ldr	r3, [pc, #72]	; (80123cc <Update_Title+0xa0>)
 8012382:	f9b3 3000 	ldrsh.w	r3, [r3]
 8012386:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 801238a:	429a      	cmp	r2, r3
 801238c:	d10a      	bne.n	80123a4 <Update_Title+0x78>
    {
        Draw_4Point(T_X-2, TITLE_Y[i], 2, Font8x14_H);
 801238e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8012392:	4a0d      	ldr	r2, [pc, #52]	; (80123c8 <Update_Title+0x9c>)
 8012394:	5cd3      	ldrb	r3, [r2, r3]
 8012396:	b219      	sxth	r1, r3
 8012398:	230e      	movs	r3, #14
 801239a:	2202      	movs	r2, #2
 801239c:	f240 102f 	movw	r0, #303	; 0x12f
 80123a0:	f7ff ff5c 	bl	801225c <Draw_4Point>
  for(i=0; i<8; i++)
 80123a4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80123a8:	b29b      	uxth	r3, r3
 80123aa:	3301      	adds	r3, #1
 80123ac:	b29b      	uxth	r3, r3
 80123ae:	80fb      	strh	r3, [r7, #6]
 80123b0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80123b4:	2b07      	cmp	r3, #7
 80123b6:	ddbf      	ble.n	8012338 <Update_Title+0xc>
    }
  }
}
 80123b8:	bf00      	nop
 80123ba:	bf00      	nop
 80123bc:	3708      	adds	r7, #8
 80123be:	46bd      	mov	sp, r7
 80123c0:	bd80      	pop	{r7, pc}
 80123c2:	bf00      	nop
 80123c4:	08001f08 	.word	0x08001f08
 80123c8:	08001f38 	.word	0x08001f38
 80123cc:	2000079e 	.word	0x2000079e
 80123d0:	08001f18 	.word	0x08001f18

080123d4 <Update_Blink>:

/*******************************************************************************
 Update_Blink:
*******************************************************************************/
void Update_Blink(void)
{
 80123d4:	b590      	push	{r4, r7, lr}
 80123d6:	b087      	sub	sp, #28
 80123d8:	af02      	add	r7, sp, #8
  char* ptr;
  long Tmp;
  unsigned short i, Range = List[Y_RANGES].Val + 10*List[PROBEATT].Val;
 80123da:	4bbd      	ldr	r3, [pc, #756]	; (80126d0 <Update_Blink+0x2fc>)
 80123dc:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80123e0:	b29a      	uxth	r2, r3
 80123e2:	4bbb      	ldr	r3, [pc, #748]	; (80126d0 <Update_Blink+0x2fc>)
 80123e4:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 80123e8:	b29b      	uxth	r3, r3
 80123ea:	4619      	mov	r1, r3
 80123ec:	0089      	lsls	r1, r1, #2
 80123ee:	440b      	add	r3, r1
 80123f0:	005b      	lsls	r3, r3, #1
 80123f2:	b29b      	uxth	r3, r3
 80123f4:	4413      	add	r3, r2
 80123f6:	81fb      	strh	r3, [r7, #14]

  i = MenuNow[Current];
 80123f8:	4bb6      	ldr	r3, [pc, #728]	; (80126d4 <Update_Blink+0x300>)
 80123fa:	f9b3 3000 	ldrsh.w	r3, [r3]
 80123fe:	461a      	mov	r2, r3
 8012400:	4bb5      	ldr	r3, [pc, #724]	; (80126d8 <Update_Blink+0x304>)
 8012402:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8012406:	81bb      	strh	r3, [r7, #12]
  ptr = (char*)(List[i].PTR +(List[i].Val)*6);
 8012408:	89bb      	ldrh	r3, [r7, #12]
 801240a:	4ab1      	ldr	r2, [pc, #708]	; (80126d0 <Update_Blink+0x2fc>)
 801240c:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 8012410:	89bb      	ldrh	r3, [r7, #12]
 8012412:	49af      	ldr	r1, [pc, #700]	; (80126d0 <Update_Blink+0x2fc>)
 8012414:	00db      	lsls	r3, r3, #3
 8012416:	440b      	add	r3, r1
 8012418:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801241c:	4619      	mov	r1, r3
 801241e:	460b      	mov	r3, r1
 8012420:	005b      	lsls	r3, r3, #1
 8012422:	440b      	add	r3, r1
 8012424:	005b      	lsls	r3, r3, #1
 8012426:	4413      	add	r3, r2
 8012428:	60bb      	str	r3, [r7, #8]
  if(Blink == BLINK)
 801242a:	4bac      	ldr	r3, [pc, #688]	; (80126dc <Update_Blink+0x308>)
 801242c:	781b      	ldrb	r3, [r3, #0]
 801242e:	b2db      	uxtb	r3, r3
 8012430:	2b01      	cmp	r3, #1
 8012432:	f040 86ca 	bne.w	80131ca <Update_Blink+0xdf6>
  {
    Blink = 0;
 8012436:	4ba9      	ldr	r3, [pc, #676]	; (80126dc <Update_Blink+0x308>)
 8012438:	2200      	movs	r2, #0
 801243a:	701a      	strb	r2, [r3, #0]
    List[MenuNow[ME]].Flg |= UPD; //
 801243c:	4ba6      	ldr	r3, [pc, #664]	; (80126d8 <Update_Blink+0x304>)
 801243e:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8012442:	4aa3      	ldr	r2, [pc, #652]	; (80126d0 <Update_Blink+0x2fc>)
 8012444:	00db      	lsls	r3, r3, #3
 8012446:	4413      	add	r3, r2
 8012448:	799b      	ldrb	r3, [r3, #6]
 801244a:	4aa3      	ldr	r2, [pc, #652]	; (80126d8 <Update_Blink+0x304>)
 801244c:	f9b2 2006 	ldrsh.w	r2, [r2, #6]
 8012450:	4610      	mov	r0, r2
 8012452:	f043 0320 	orr.w	r3, r3, #32
 8012456:	b2d9      	uxtb	r1, r3
 8012458:	4a9d      	ldr	r2, [pc, #628]	; (80126d0 <Update_Blink+0x2fc>)
 801245a:	00c3      	lsls	r3, r0, #3
 801245c:	4413      	add	r3, r2
 801245e:	460a      	mov	r2, r1
 8012460:	719a      	strb	r2, [r3, #6]
    switch(i)
 8012462:	89bb      	ldrh	r3, [r7, #12]
 8012464:	2b29      	cmp	r3, #41	; 0x29
 8012466:	f200 86aa 	bhi.w	80131be <Update_Blink+0xdea>
 801246a:	a201      	add	r2, pc, #4	; (adr r2, 8012470 <Update_Blink+0x9c>)
 801246c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012470:	080125db 	.word	0x080125db
 8012474:	080125db 	.word	0x080125db
 8012478:	080125db 	.word	0x080125db
 801247c:	0801266f 	.word	0x0801266f
 8012480:	080126a1 	.word	0x080126a1
 8012484:	080126a1 	.word	0x080126a1
 8012488:	080127d7 	.word	0x080127d7
 801248c:	08012835 	.word	0x08012835
 8012490:	0801288d 	.word	0x0801288d
 8012494:	080128bf 	.word	0x080128bf
 8012498:	0801292b 	.word	0x0801292b
 801249c:	0801292b 	.word	0x0801292b
 80124a0:	08012a8d 	.word	0x08012a8d
 80124a4:	08012ae7 	.word	0x08012ae7
 80124a8:	08012b45 	.word	0x08012b45
 80124ac:	08012c15 	.word	0x08012c15
 80124b0:	08012c3f 	.word	0x08012c3f
 80124b4:	08012b45 	.word	0x08012b45
 80124b8:	08012c6d 	.word	0x08012c6d
 80124bc:	080131bf 	.word	0x080131bf
 80124c0:	080131bf 	.word	0x080131bf
 80124c4:	080131bf 	.word	0x080131bf
 80124c8:	080131bf 	.word	0x080131bf
 80124cc:	080131bf 	.word	0x080131bf
 80124d0:	080131bf 	.word	0x080131bf
 80124d4:	080131bf 	.word	0x080131bf
 80124d8:	08012ce5 	.word	0x08012ce5
 80124dc:	08012d61 	.word	0x08012d61
 80124e0:	08012d8f 	.word	0x08012d8f
 80124e4:	08012519 	.word	0x08012519
 80124e8:	08012519 	.word	0x08012519
 80124ec:	08012519 	.word	0x08012519
 80124f0:	08012519 	.word	0x08012519
 80124f4:	08012519 	.word	0x08012519
 80124f8:	08012519 	.word	0x08012519
 80124fc:	08012519 	.word	0x08012519
 8012500:	08012e0b 	.word	0x08012e0b
 8012504:	08012ea5 	.word	0x08012ea5
 8012508:	08012f69 	.word	0x08012f69
 801250c:	08013017 	.word	0x08013017
 8012510:	080130b1 	.word	0x080130b1
 8012514:	0801311f 	.word	0x0801311f
    case SAVE_BUF:
    case SAVE_CSV:
    case SAVE_SVG:
    case LOAD_DAT:
    case LOAD_BUF:
      SetColor(GRY, TCOLOR[FN]);
 8012518:	f64f 4310 	movw	r3, #64528	; 0xfc10
 801251c:	4619      	mov	r1, r3
 801251e:	f643 10e7 	movw	r0, #14823	; 0x39e7
 8012522:	f7fb fb3f 	bl	800dba4 <SetColor>
      u8ToDec3(NumStr, List[i].Val);
 8012526:	89bb      	ldrh	r3, [r7, #12]
 8012528:	4a69      	ldr	r2, [pc, #420]	; (80126d0 <Update_Blink+0x2fc>)
 801252a:	00db      	lsls	r3, r3, #3
 801252c:	4413      	add	r3, r2
 801252e:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8012532:	b2db      	uxtb	r3, r3
 8012534:	4619      	mov	r1, r3
 8012536:	486a      	ldr	r0, [pc, #424]	; (80126e0 <Update_Blink+0x30c>)
 8012538:	f7ff f9bc 	bl	80118b4 <u8ToDec3>
      Draw_Circle_D(Twink, S_X[i]-3, LABLE_Y, 11, 0, 6*11);
 801253c:	4b69      	ldr	r3, [pc, #420]	; (80126e4 <Update_Blink+0x310>)
 801253e:	781b      	ldrb	r3, [r3, #0]
 8012540:	b2d8      	uxtb	r0, r3
 8012542:	89bb      	ldrh	r3, [r7, #12]
 8012544:	4a68      	ldr	r2, [pc, #416]	; (80126e8 <Update_Blink+0x314>)
 8012546:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 801254a:	b29b      	uxth	r3, r3
 801254c:	3b03      	subs	r3, #3
 801254e:	b29b      	uxth	r3, r3
 8012550:	b219      	sxth	r1, r3
 8012552:	2342      	movs	r3, #66	; 0x42
 8012554:	9301      	str	r3, [sp, #4]
 8012556:	2300      	movs	r3, #0
 8012558:	9300      	str	r3, [sp, #0]
 801255a:	230b      	movs	r3, #11
 801255c:	2203      	movs	r2, #3
 801255e:	f7fb fc0f 	bl	800dd80 <Draw_Circle_D>
      DispStr(S_X[i],    LABLE_Y, Twink, ((i > SAVE_SVG)? "Load" : "Save"));//0513
 8012562:	89bb      	ldrh	r3, [r7, #12]
 8012564:	4a60      	ldr	r2, [pc, #384]	; (80126e8 <Update_Blink+0x314>)
 8012566:	f932 0013 	ldrsh.w	r0, [r2, r3, lsl #1]
 801256a:	4b5e      	ldr	r3, [pc, #376]	; (80126e4 <Update_Blink+0x310>)
 801256c:	781b      	ldrb	r3, [r3, #0]
 801256e:	b2da      	uxtb	r2, r3
 8012570:	89bb      	ldrh	r3, [r7, #12]
 8012572:	2b21      	cmp	r3, #33	; 0x21
 8012574:	d901      	bls.n	801257a <Update_Blink+0x1a6>
 8012576:	4b5d      	ldr	r3, [pc, #372]	; (80126ec <Update_Blink+0x318>)
 8012578:	e000      	b.n	801257c <Update_Blink+0x1a8>
 801257a:	4b5d      	ldr	r3, [pc, #372]	; (80126f0 <Update_Blink+0x31c>)
 801257c:	2103      	movs	r1, #3
 801257e:	f7fb fb29 	bl	800dbd4 <DispStr>
      DispStr(S_X[i]+24, LABLE_Y, Twink, (char *)NumStr);
 8012582:	89bb      	ldrh	r3, [r7, #12]
 8012584:	4a58      	ldr	r2, [pc, #352]	; (80126e8 <Update_Blink+0x314>)
 8012586:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 801258a:	b29b      	uxth	r3, r3
 801258c:	3318      	adds	r3, #24
 801258e:	b29b      	uxth	r3, r3
 8012590:	b218      	sxth	r0, r3
 8012592:	4b54      	ldr	r3, [pc, #336]	; (80126e4 <Update_Blink+0x310>)
 8012594:	781b      	ldrb	r3, [r3, #0]
 8012596:	b2da      	uxtb	r2, r3
 8012598:	4b51      	ldr	r3, [pc, #324]	; (80126e0 <Update_Blink+0x30c>)
 801259a:	2103      	movs	r1, #3
 801259c:	f7fb fb1a 	bl	800dbd4 <DispStr>
      DispStr(S_X[i]+42, LABLE_Y, Twink, (List[i].PTR +(i - SAVE_BMP)*6));
 80125a0:	89bb      	ldrh	r3, [r7, #12]
 80125a2:	4a51      	ldr	r2, [pc, #324]	; (80126e8 <Update_Blink+0x314>)
 80125a4:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 80125a8:	b29b      	uxth	r3, r3
 80125aa:	332a      	adds	r3, #42	; 0x2a
 80125ac:	b29b      	uxth	r3, r3
 80125ae:	b218      	sxth	r0, r3
 80125b0:	4b4c      	ldr	r3, [pc, #304]	; (80126e4 <Update_Blink+0x310>)
 80125b2:	781b      	ldrb	r3, [r3, #0]
 80125b4:	b2dc      	uxtb	r4, r3
 80125b6:	89bb      	ldrh	r3, [r7, #12]
 80125b8:	4a45      	ldr	r2, [pc, #276]	; (80126d0 <Update_Blink+0x2fc>)
 80125ba:	f852 1033 	ldr.w	r1, [r2, r3, lsl #3]
 80125be:	89bb      	ldrh	r3, [r7, #12]
 80125c0:	f1a3 021d 	sub.w	r2, r3, #29
 80125c4:	4613      	mov	r3, r2
 80125c6:	005b      	lsls	r3, r3, #1
 80125c8:	4413      	add	r3, r2
 80125ca:	005b      	lsls	r3, r3, #1
 80125cc:	440b      	add	r3, r1
 80125ce:	4622      	mov	r2, r4
 80125d0:	2103      	movs	r1, #3
 80125d2:	f7fb faff 	bl	800dbd4 <DispStr>
      break;
 80125d6:	f000 bdf2 	b.w	80131be <Update_Blink+0xdea>

    case Y_RANGES:
    case COUPLING:
    case PROBEATT:
      SetColor(GRY, TCOLOR[YN]);
 80125da:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 80125de:	4619      	mov	r1, r3
 80125e0:	f643 10e7 	movw	r0, #14823	; 0x39e7
 80125e4:	f7fb fade 	bl	800dba4 <SetColor>
      Draw_Circle_D(Twink, S_X[Y_RANGES]-3, TITLE_Y_POS, 11, 0, 6*7);
 80125e8:	4b3e      	ldr	r3, [pc, #248]	; (80126e4 <Update_Blink+0x310>)
 80125ea:	781b      	ldrb	r3, [r3, #0]
 80125ec:	b2d8      	uxtb	r0, r3
 80125ee:	232f      	movs	r3, #47	; 0x2f
 80125f0:	b29b      	uxth	r3, r3
 80125f2:	3b03      	subs	r3, #3
 80125f4:	b29b      	uxth	r3, r3
 80125f6:	b219      	sxth	r1, r3
 80125f8:	232a      	movs	r3, #42	; 0x2a
 80125fa:	9301      	str	r3, [sp, #4]
 80125fc:	2300      	movs	r3, #0
 80125fe:	9300      	str	r3, [sp, #0]
 8012600:	230b      	movs	r3, #11
 8012602:	22e1      	movs	r2, #225	; 0xe1
 8012604:	f7fb fbbc 	bl	800dd80 <Draw_Circle_D>
      DispStr(S_X[Y_RANGES], TITLE_Y_POS, Twink, (List[Y_RANGES].PTR +(Range)*6));
 8012608:	242f      	movs	r4, #47	; 0x2f
 801260a:	4b36      	ldr	r3, [pc, #216]	; (80126e4 <Update_Blink+0x310>)
 801260c:	781b      	ldrb	r3, [r3, #0]
 801260e:	b2d8      	uxtb	r0, r3
 8012610:	4b2f      	ldr	r3, [pc, #188]	; (80126d0 <Update_Blink+0x2fc>)
 8012612:	6819      	ldr	r1, [r3, #0]
 8012614:	89fa      	ldrh	r2, [r7, #14]
 8012616:	4613      	mov	r3, r2
 8012618:	005b      	lsls	r3, r3, #1
 801261a:	4413      	add	r3, r2
 801261c:	005b      	lsls	r3, r3, #1
 801261e:	440b      	add	r3, r1
 8012620:	4602      	mov	r2, r0
 8012622:	21e1      	movs	r1, #225	; 0xe1
 8012624:	4620      	mov	r0, r4
 8012626:	f7fb fad5 	bl	800dbd4 <DispStr>
      DispStr(S_X[COUPLING], TITLE_Y_POS, Twink, (List[COUPLING].PTR +(List[COUPLING].Val)*6));
 801262a:	2047      	movs	r0, #71	; 0x47
 801262c:	4b2d      	ldr	r3, [pc, #180]	; (80126e4 <Update_Blink+0x310>)
 801262e:	781b      	ldrb	r3, [r3, #0]
 8012630:	b2d9      	uxtb	r1, r3
 8012632:	4b27      	ldr	r3, [pc, #156]	; (80126d0 <Update_Blink+0x2fc>)
 8012634:	689a      	ldr	r2, [r3, #8]
 8012636:	4b26      	ldr	r3, [pc, #152]	; (80126d0 <Update_Blink+0x2fc>)
 8012638:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 801263c:	461c      	mov	r4, r3
 801263e:	4623      	mov	r3, r4
 8012640:	005b      	lsls	r3, r3, #1
 8012642:	4423      	add	r3, r4
 8012644:	005b      	lsls	r3, r3, #1
 8012646:	4413      	add	r3, r2
 8012648:	460a      	mov	r2, r1
 801264a:	21e1      	movs	r1, #225	; 0xe1
 801264c:	f7fb fac2 	bl	800dbd4 <DispStr>
      DispStr10x14(S_X[PROBEATT], TITLE_Y_POS, PRN+SYMB,(List[PROBEATT].Val?("A"):("B")));
 8012650:	2020      	movs	r0, #32
 8012652:	4b1f      	ldr	r3, [pc, #124]	; (80126d0 <Update_Blink+0x2fc>)
 8012654:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8012658:	2b00      	cmp	r3, #0
 801265a:	d001      	beq.n	8012660 <Update_Blink+0x28c>
 801265c:	4b25      	ldr	r3, [pc, #148]	; (80126f4 <Update_Blink+0x320>)
 801265e:	e000      	b.n	8012662 <Update_Blink+0x28e>
 8012660:	4b25      	ldr	r3, [pc, #148]	; (80126f8 <Update_Blink+0x324>)
 8012662:	2210      	movs	r2, #16
 8012664:	21e1      	movs	r1, #225	; 0xe1
 8012666:	f7fb fd1d 	bl	800e0a4 <DispStr10x14>
      break;
 801266a:	f000 bda8 	b.w	80131be <Update_Blink+0xdea>

    case V0_POSI:
      if(Twink) ParamTab[P1F] |=  D_HID;
 801266e:	4b1d      	ldr	r3, [pc, #116]	; (80126e4 <Update_Blink+0x310>)
 8012670:	781b      	ldrb	r3, [r3, #0]
 8012672:	b2db      	uxtb	r3, r3
 8012674:	2b00      	cmp	r3, #0
 8012676:	d009      	beq.n	801268c <Update_Blink+0x2b8>
 8012678:	4b20      	ldr	r3, [pc, #128]	; (80126fc <Update_Blink+0x328>)
 801267a:	f9b3 3000 	ldrsh.w	r3, [r3]
 801267e:	f043 0301 	orr.w	r3, r3, #1
 8012682:	b21a      	sxth	r2, r3
 8012684:	4b1d      	ldr	r3, [pc, #116]	; (80126fc <Update_Blink+0x328>)
 8012686:	801a      	strh	r2, [r3, #0]
      else      ParamTab[P1F] &= ~D_HID;
      break;
 8012688:	f000 bd99 	b.w	80131be <Update_Blink+0xdea>
      else      ParamTab[P1F] &= ~D_HID;
 801268c:	4b1b      	ldr	r3, [pc, #108]	; (80126fc <Update_Blink+0x328>)
 801268e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8012692:	f023 0301 	bic.w	r3, r3, #1
 8012696:	b21a      	sxth	r2, r3
 8012698:	4b18      	ldr	r3, [pc, #96]	; (80126fc <Update_Blink+0x328>)
 801269a:	801a      	strh	r2, [r3, #0]
      break;
 801269c:	f000 bd8f 	b.w	80131be <Update_Blink+0xdea>

    case V1_POSI:
    case V2_POSI:
      Tmp = (i == V1_POSI)? V1F : V2F;
 80126a0:	89bb      	ldrh	r3, [r7, #12]
 80126a2:	2b04      	cmp	r3, #4
 80126a4:	d101      	bne.n	80126aa <Update_Blink+0x2d6>
 80126a6:	2305      	movs	r3, #5
 80126a8:	e000      	b.n	80126ac <Update_Blink+0x2d8>
 80126aa:	2306      	movs	r3, #6
 80126ac:	607b      	str	r3, [r7, #4]
      if(Twink) ParamTab[Tmp] |=  D_HID;
 80126ae:	4b0d      	ldr	r3, [pc, #52]	; (80126e4 <Update_Blink+0x310>)
 80126b0:	781b      	ldrb	r3, [r3, #0]
 80126b2:	b2db      	uxtb	r3, r3
 80126b4:	2b00      	cmp	r3, #0
 80126b6:	d023      	beq.n	8012700 <Update_Blink+0x32c>
 80126b8:	4a10      	ldr	r2, [pc, #64]	; (80126fc <Update_Blink+0x328>)
 80126ba:	687b      	ldr	r3, [r7, #4]
 80126bc:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 80126c0:	f043 0301 	orr.w	r3, r3, #1
 80126c4:	b219      	sxth	r1, r3
 80126c6:	4a0d      	ldr	r2, [pc, #52]	; (80126fc <Update_Blink+0x328>)
 80126c8:	687b      	ldr	r3, [r7, #4]
 80126ca:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 80126ce:	e022      	b.n	8012716 <Update_Blink+0x342>
 80126d0:	20000298 	.word	0x20000298
 80126d4:	2000079e 	.word	0x2000079e
 80126d8:	20000538 	.word	0x20000538
 80126dc:	20000a31 	.word	0x20000a31
 80126e0:	20002838 	.word	0x20002838
 80126e4:	2000077c 	.word	0x2000077c
 80126e8:	0800215c 	.word	0x0800215c
 80126ec:	08000948 	.word	0x08000948
 80126f0:	08000950 	.word	0x08000950
 80126f4:	08000958 	.word	0x08000958
 80126f8:	0800095c 	.word	0x0800095c
 80126fc:	20000140 	.word	0x20000140
      else      ParamTab[Tmp] &= ~D_HID;
 8012700:	4ab1      	ldr	r2, [pc, #708]	; (80129c8 <Update_Blink+0x5f4>)
 8012702:	687b      	ldr	r3, [r7, #4]
 8012704:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8012708:	f023 0301 	bic.w	r3, r3, #1
 801270c:	b219      	sxth	r1, r3
 801270e:	4aae      	ldr	r2, [pc, #696]	; (80129c8 <Update_Blink+0x5f4>)
 8012710:	687b      	ldr	r3, [r7, #4]
 8012712:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
      Tmp  =(ParamTab[V1x2]- ParamTab[V2x2])/2;         // V2 - V1 ��ֵ
 8012716:	4bac      	ldr	r3, [pc, #688]	; (80129c8 <Update_Blink+0x5f4>)
 8012718:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 801271c:	461a      	mov	r2, r3
 801271e:	4baa      	ldr	r3, [pc, #680]	; (80129c8 <Update_Blink+0x5f4>)
 8012720:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 8012724:	1ad3      	subs	r3, r2, r3
 8012726:	0fda      	lsrs	r2, r3, #31
 8012728:	4413      	add	r3, r2
 801272a:	105b      	asrs	r3, r3, #1
 801272c:	607b      	str	r3, [r7, #4]
      Tmp *= X_SCALE[Range]* Exp(V_SCALE[Range]);
 801272e:	89fb      	ldrh	r3, [r7, #14]
 8012730:	4aa6      	ldr	r2, [pc, #664]	; (80129cc <Update_Blink+0x5f8>)
 8012732:	5cd3      	ldrb	r3, [r2, r3]
 8012734:	461c      	mov	r4, r3
 8012736:	89fb      	ldrh	r3, [r7, #14]
 8012738:	4aa5      	ldr	r2, [pc, #660]	; (80129d0 <Update_Blink+0x5fc>)
 801273a:	5cd3      	ldrb	r3, [r2, r3]
 801273c:	4618      	mov	r0, r3
 801273e:	f7ff fa1d 	bl	8011b7c <Exp>
 8012742:	4603      	mov	r3, r0
 8012744:	fb03 f204 	mul.w	r2, r3, r4
 8012748:	687b      	ldr	r3, [r7, #4]
 801274a:	fb02 f303 	mul.w	r3, r2, r3
 801274e:	607b      	str	r3, [r7, #4]
      Value2Str(NumStr, Tmp, V[0], 3, UNSIGN);
 8012750:	2301      	movs	r3, #1
 8012752:	9300      	str	r3, [sp, #0]
 8012754:	2303      	movs	r3, #3
 8012756:	4a9f      	ldr	r2, [pc, #636]	; (80129d4 <Update_Blink+0x600>)
 8012758:	6879      	ldr	r1, [r7, #4]
 801275a:	489f      	ldr	r0, [pc, #636]	; (80129d8 <Update_Blink+0x604>)
 801275c:	f7ff f912 	bl	8011984 <Value2Str>
      SetColor(GRY, TCOLOR[YN]);
 8012760:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8012764:	4619      	mov	r1, r3
 8012766:	f643 10e7 	movw	r0, #14823	; 0x39e7
 801276a:	f7fb fa1b 	bl	800dba4 <SetColor>
      Draw_Circle_D(Twink, S_X[V1_POSI]-3, LABLE_Y, 11, 0, 6*9);
 801276e:	4b9b      	ldr	r3, [pc, #620]	; (80129dc <Update_Blink+0x608>)
 8012770:	781b      	ldrb	r3, [r3, #0]
 8012772:	b2d8      	uxtb	r0, r3
 8012774:	2307      	movs	r3, #7
 8012776:	b29b      	uxth	r3, r3
 8012778:	3b03      	subs	r3, #3
 801277a:	b29b      	uxth	r3, r3
 801277c:	b219      	sxth	r1, r3
 801277e:	2336      	movs	r3, #54	; 0x36
 8012780:	9301      	str	r3, [sp, #4]
 8012782:	2300      	movs	r3, #0
 8012784:	9300      	str	r3, [sp, #0]
 8012786:	230b      	movs	r3, #11
 8012788:	2203      	movs	r2, #3
 801278a:	f7fb faf9 	bl	800dd80 <Draw_Circle_D>
      DispStr(S_X[V1_POSI]+0*6, LABLE_Y, Twink+SYMB, "]");
 801278e:	2007      	movs	r0, #7
 8012790:	4b92      	ldr	r3, [pc, #584]	; (80129dc <Update_Blink+0x608>)
 8012792:	781b      	ldrb	r3, [r3, #0]
 8012794:	b2db      	uxtb	r3, r3
 8012796:	3310      	adds	r3, #16
 8012798:	b2da      	uxtb	r2, r3
 801279a:	4b91      	ldr	r3, [pc, #580]	; (80129e0 <Update_Blink+0x60c>)
 801279c:	2103      	movs	r1, #3
 801279e:	f7fb fa19 	bl	800dbd4 <DispStr>
      DispStr(S_X[V1_POSI]+1*6, LABLE_Y, Twink,      "V:      ");
 80127a2:	2307      	movs	r3, #7
 80127a4:	b29b      	uxth	r3, r3
 80127a6:	3306      	adds	r3, #6
 80127a8:	b29b      	uxth	r3, r3
 80127aa:	b218      	sxth	r0, r3
 80127ac:	4b8b      	ldr	r3, [pc, #556]	; (80129dc <Update_Blink+0x608>)
 80127ae:	781b      	ldrb	r3, [r3, #0]
 80127b0:	b2da      	uxtb	r2, r3
 80127b2:	4b8c      	ldr	r3, [pc, #560]	; (80129e4 <Update_Blink+0x610>)
 80127b4:	2103      	movs	r1, #3
 80127b6:	f7fb fa0d 	bl	800dbd4 <DispStr>
      DispStr(S_X[V1_POSI]+3*6, LABLE_Y, Twink, (char *)NumStr);
 80127ba:	2307      	movs	r3, #7
 80127bc:	b29b      	uxth	r3, r3
 80127be:	3312      	adds	r3, #18
 80127c0:	b29b      	uxth	r3, r3
 80127c2:	b218      	sxth	r0, r3
 80127c4:	4b85      	ldr	r3, [pc, #532]	; (80129dc <Update_Blink+0x608>)
 80127c6:	781b      	ldrb	r3, [r3, #0]
 80127c8:	b2da      	uxtb	r2, r3
 80127ca:	4b83      	ldr	r3, [pc, #524]	; (80129d8 <Update_Blink+0x604>)
 80127cc:	2103      	movs	r1, #3
 80127ce:	f7fb fa01 	bl	800dbd4 <DispStr>
      break;
 80127d2:	f000 bcf4 	b.w	80131be <Update_Blink+0xdea>

    case YN_TYPE:
      if(Twink) ParamTab[V1F] |=  D_HID;
 80127d6:	4b81      	ldr	r3, [pc, #516]	; (80129dc <Update_Blink+0x608>)
 80127d8:	781b      	ldrb	r3, [r3, #0]
 80127da:	b2db      	uxtb	r3, r3
 80127dc:	2b00      	cmp	r3, #0
 80127de:	d008      	beq.n	80127f2 <Update_Blink+0x41e>
 80127e0:	4b79      	ldr	r3, [pc, #484]	; (80129c8 <Update_Blink+0x5f4>)
 80127e2:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 80127e6:	f043 0301 	orr.w	r3, r3, #1
 80127ea:	b21a      	sxth	r2, r3
 80127ec:	4b76      	ldr	r3, [pc, #472]	; (80129c8 <Update_Blink+0x5f4>)
 80127ee:	815a      	strh	r2, [r3, #10]
 80127f0:	e007      	b.n	8012802 <Update_Blink+0x42e>
      else      ParamTab[V1F] &= ~D_HID;
 80127f2:	4b75      	ldr	r3, [pc, #468]	; (80129c8 <Update_Blink+0x5f4>)
 80127f4:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 80127f8:	f023 0301 	bic.w	r3, r3, #1
 80127fc:	b21a      	sxth	r2, r3
 80127fe:	4b72      	ldr	r3, [pc, #456]	; (80129c8 <Update_Blink+0x5f4>)
 8012800:	815a      	strh	r2, [r3, #10]
      if(Twink) ParamTab[V2F] |=  D_HID;
 8012802:	4b76      	ldr	r3, [pc, #472]	; (80129dc <Update_Blink+0x608>)
 8012804:	781b      	ldrb	r3, [r3, #0]
 8012806:	b2db      	uxtb	r3, r3
 8012808:	2b00      	cmp	r3, #0
 801280a:	d009      	beq.n	8012820 <Update_Blink+0x44c>
 801280c:	4b6e      	ldr	r3, [pc, #440]	; (80129c8 <Update_Blink+0x5f4>)
 801280e:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8012812:	f043 0301 	orr.w	r3, r3, #1
 8012816:	b21a      	sxth	r2, r3
 8012818:	4b6b      	ldr	r3, [pc, #428]	; (80129c8 <Update_Blink+0x5f4>)
 801281a:	819a      	strh	r2, [r3, #12]
      else      ParamTab[V2F] &= ~D_HID;
      break;
 801281c:	f000 bccf 	b.w	80131be <Update_Blink+0xdea>
      else      ParamTab[V2F] &= ~D_HID;
 8012820:	4b69      	ldr	r3, [pc, #420]	; (80129c8 <Update_Blink+0x5f4>)
 8012822:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8012826:	f023 0301 	bic.w	r3, r3, #1
 801282a:	b21a      	sxth	r2, r3
 801282c:	4b66      	ldr	r3, [pc, #408]	; (80129c8 <Update_Blink+0x5f4>)
 801282e:	819a      	strh	r2, [r3, #12]
      break;
 8012830:	f000 bcc5 	b.w	80131be <Update_Blink+0xdea>

    case TIM_BASE:
      SetColor(GRY, TCOLOR[XN]);
 8012834:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8012838:	4619      	mov	r1, r3
 801283a:	f643 10e7 	movw	r0, #14823	; 0x39e7
 801283e:	f7fb f9b1 	bl	800dba4 <SetColor>
      Draw_Circle_D(Twink, S_X[i]-3, TITLE_Y_POS, 11, 2, 6*5);
 8012842:	4b66      	ldr	r3, [pc, #408]	; (80129dc <Update_Blink+0x608>)
 8012844:	781b      	ldrb	r3, [r3, #0]
 8012846:	b2d8      	uxtb	r0, r3
 8012848:	89bb      	ldrh	r3, [r7, #12]
 801284a:	4a67      	ldr	r2, [pc, #412]	; (80129e8 <Update_Blink+0x614>)
 801284c:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8012850:	b29b      	uxth	r3, r3
 8012852:	3b03      	subs	r3, #3
 8012854:	b29b      	uxth	r3, r3
 8012856:	b219      	sxth	r1, r3
 8012858:	231e      	movs	r3, #30
 801285a:	9301      	str	r3, [sp, #4]
 801285c:	2302      	movs	r3, #2
 801285e:	9300      	str	r3, [sp, #0]
 8012860:	230b      	movs	r3, #11
 8012862:	22e1      	movs	r2, #225	; 0xe1
 8012864:	f7fb fa8c 	bl	800dd80 <Draw_Circle_D>
      DispStr(S_X[i], TITLE_Y_POS, Twink, TimeBase_Str[List[TIM_BASE].Val]);
 8012868:	89bb      	ldrh	r3, [r7, #12]
 801286a:	4a5f      	ldr	r2, [pc, #380]	; (80129e8 <Update_Blink+0x614>)
 801286c:	f932 0013 	ldrsh.w	r0, [r2, r3, lsl #1]
 8012870:	4b5a      	ldr	r3, [pc, #360]	; (80129dc <Update_Blink+0x608>)
 8012872:	781b      	ldrb	r3, [r3, #0]
 8012874:	b2da      	uxtb	r2, r3
 8012876:	4b5d      	ldr	r3, [pc, #372]	; (80129ec <Update_Blink+0x618>)
 8012878:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 801287c:	00db      	lsls	r3, r3, #3
 801287e:	495c      	ldr	r1, [pc, #368]	; (80129f0 <Update_Blink+0x61c>)
 8012880:	440b      	add	r3, r1
 8012882:	21e1      	movs	r1, #225	; 0xe1
 8012884:	f7fb f9a6 	bl	800dbd4 <DispStr>
      break;
 8012888:	f000 bc99 	b.w	80131be <Update_Blink+0xdea>

    case VIEWPOSI:
      if(Twink) ParamTab[T0F] |=  D_HID;
 801288c:	4b53      	ldr	r3, [pc, #332]	; (80129dc <Update_Blink+0x608>)
 801288e:	781b      	ldrb	r3, [r3, #0]
 8012890:	b2db      	uxtb	r3, r3
 8012892:	2b00      	cmp	r3, #0
 8012894:	d009      	beq.n	80128aa <Update_Blink+0x4d6>
 8012896:	4b4c      	ldr	r3, [pc, #304]	; (80129c8 <Update_Blink+0x5f4>)
 8012898:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 801289c:	f043 0301 	orr.w	r3, r3, #1
 80128a0:	b21a      	sxth	r2, r3
 80128a2:	4b49      	ldr	r3, [pc, #292]	; (80129c8 <Update_Blink+0x5f4>)
 80128a4:	81da      	strh	r2, [r3, #14]
      else      ParamTab[T0F] &= ~D_HID;
      break;
 80128a6:	f000 bc8a 	b.w	80131be <Update_Blink+0xdea>
      else      ParamTab[T0F] &= ~D_HID;
 80128aa:	4b47      	ldr	r3, [pc, #284]	; (80129c8 <Update_Blink+0x5f4>)
 80128ac:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 80128b0:	f023 0301 	bic.w	r3, r3, #1
 80128b4:	b21a      	sxth	r2, r3
 80128b6:	4b44      	ldr	r3, [pc, #272]	; (80129c8 <Update_Blink+0x5f4>)
 80128b8:	81da      	strh	r2, [r3, #14]
      break;
 80128ba:	f000 bc80 	b.w	80131be <Update_Blink+0xdea>

    case SMPL_DPTH:
      SetColor(GRY, TCOLOR[XN]);
 80128be:	f240 73ff 	movw	r3, #2047	; 0x7ff
 80128c2:	4619      	mov	r1, r3
 80128c4:	f643 10e7 	movw	r0, #14823	; 0x39e7
 80128c8:	f7fb f96c 	bl	800dba4 <SetColor>
      Draw_Circle_D(Twink, S_X[SMPL_DPTH]-3, LABLE_Y, 11, 0, 6*11);
 80128cc:	4b43      	ldr	r3, [pc, #268]	; (80129dc <Update_Blink+0x608>)
 80128ce:	781b      	ldrb	r3, [r3, #0]
 80128d0:	b2d8      	uxtb	r0, r3
 80128d2:	23f8      	movs	r3, #248	; 0xf8
 80128d4:	b29b      	uxth	r3, r3
 80128d6:	3b03      	subs	r3, #3
 80128d8:	b29b      	uxth	r3, r3
 80128da:	b219      	sxth	r1, r3
 80128dc:	2342      	movs	r3, #66	; 0x42
 80128de:	9301      	str	r3, [sp, #4]
 80128e0:	2300      	movs	r3, #0
 80128e2:	9300      	str	r3, [sp, #0]
 80128e4:	230b      	movs	r3, #11
 80128e6:	2203      	movs	r2, #3
 80128e8:	f7fb fa4a 	bl	800dd80 <Draw_Circle_D>
      DispStr(S_X[SMPL_DPTH],    LABLE_Y,  Twink, "SmplDpth:  ");
 80128ec:	20f8      	movs	r0, #248	; 0xf8
 80128ee:	4b3b      	ldr	r3, [pc, #236]	; (80129dc <Update_Blink+0x608>)
 80128f0:	781b      	ldrb	r3, [r3, #0]
 80128f2:	b2da      	uxtb	r2, r3
 80128f4:	4b3f      	ldr	r3, [pc, #252]	; (80129f4 <Update_Blink+0x620>)
 80128f6:	2103      	movs	r1, #3
 80128f8:	f7fb f96c 	bl	800dbd4 <DispStr>
      DispStr(S_X[SMPL_DPTH]+6*9, LABLE_Y,  Twink, (char *)&D[List[SMPL_DPTH].Val]);
 80128fc:	23f8      	movs	r3, #248	; 0xf8
 80128fe:	b29b      	uxth	r3, r3
 8012900:	3336      	adds	r3, #54	; 0x36
 8012902:	b29b      	uxth	r3, r3
 8012904:	b218      	sxth	r0, r3
 8012906:	4b35      	ldr	r3, [pc, #212]	; (80129dc <Update_Blink+0x608>)
 8012908:	781b      	ldrb	r3, [r3, #0]
 801290a:	b2da      	uxtb	r2, r3
 801290c:	4b37      	ldr	r3, [pc, #220]	; (80129ec <Update_Blink+0x618>)
 801290e:	f9b3 304c 	ldrsh.w	r3, [r3, #76]	; 0x4c
 8012912:	4619      	mov	r1, r3
 8012914:	460b      	mov	r3, r1
 8012916:	005b      	lsls	r3, r3, #1
 8012918:	440b      	add	r3, r1
 801291a:	005b      	lsls	r3, r3, #1
 801291c:	4936      	ldr	r1, [pc, #216]	; (80129f8 <Update_Blink+0x624>)
 801291e:	440b      	add	r3, r1
 8012920:	2103      	movs	r1, #3
 8012922:	f7fb f957 	bl	800dbd4 <DispStr>
      break;
 8012926:	f000 bc4a 	b.w	80131be <Update_Blink+0xdea>

    case T1_POSI:
    case T2_POSI:
      Tmp = (i == T1_POSI)? T1F : T2F;
 801292a:	89bb      	ldrh	r3, [r7, #12]
 801292c:	2b0a      	cmp	r3, #10
 801292e:	d101      	bne.n	8012934 <Update_Blink+0x560>
 8012930:	2308      	movs	r3, #8
 8012932:	e000      	b.n	8012936 <Update_Blink+0x562>
 8012934:	2309      	movs	r3, #9
 8012936:	607b      	str	r3, [r7, #4]
      if(Twink) ParamTab[Tmp] |=  D_HID;
 8012938:	4b28      	ldr	r3, [pc, #160]	; (80129dc <Update_Blink+0x608>)
 801293a:	781b      	ldrb	r3, [r3, #0]
 801293c:	b2db      	uxtb	r3, r3
 801293e:	2b00      	cmp	r3, #0
 8012940:	d00b      	beq.n	801295a <Update_Blink+0x586>
 8012942:	4a21      	ldr	r2, [pc, #132]	; (80129c8 <Update_Blink+0x5f4>)
 8012944:	687b      	ldr	r3, [r7, #4]
 8012946:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 801294a:	f043 0301 	orr.w	r3, r3, #1
 801294e:	b219      	sxth	r1, r3
 8012950:	4a1d      	ldr	r2, [pc, #116]	; (80129c8 <Update_Blink+0x5f4>)
 8012952:	687b      	ldr	r3, [r7, #4]
 8012954:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8012958:	e00a      	b.n	8012970 <Update_Blink+0x59c>
      else      ParamTab[Tmp] &= ~D_HID;
 801295a:	4a1b      	ldr	r2, [pc, #108]	; (80129c8 <Update_Blink+0x5f4>)
 801295c:	687b      	ldr	r3, [r7, #4]
 801295e:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8012962:	f023 0301 	bic.w	r3, r3, #1
 8012966:	b219      	sxth	r1, r3
 8012968:	4a17      	ldr	r2, [pc, #92]	; (80129c8 <Update_Blink+0x5f4>)
 801296a:	687b      	ldr	r3, [r7, #4]
 801296c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
      Tmp  = ParamTab[T2x1] - ParamTab[T1x1];          // T2 - T1 ��ֵ
 8012970:	4b15      	ldr	r3, [pc, #84]	; (80129c8 <Update_Blink+0x5f4>)
 8012972:	f9b3 3026 	ldrsh.w	r3, [r3, #38]	; 0x26
 8012976:	461a      	mov	r2, r3
 8012978:	4b13      	ldr	r3, [pc, #76]	; (80129c8 <Update_Blink+0x5f4>)
 801297a:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	; 0x24
 801297e:	1ad3      	subs	r3, r2, r3
 8012980:	607b      	str	r3, [r7, #4]
      Tmp *= B_SCALE[List[TIM_BASE].Val]* Exp(T_SCALE[List[TIM_BASE].Val]);
 8012982:	4b1a      	ldr	r3, [pc, #104]	; (80129ec <Update_Blink+0x618>)
 8012984:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8012988:	461a      	mov	r2, r3
 801298a:	4b1c      	ldr	r3, [pc, #112]	; (80129fc <Update_Blink+0x628>)
 801298c:	5c9b      	ldrb	r3, [r3, r2]
 801298e:	461c      	mov	r4, r3
 8012990:	4b16      	ldr	r3, [pc, #88]	; (80129ec <Update_Blink+0x618>)
 8012992:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8012996:	461a      	mov	r2, r3
 8012998:	4b19      	ldr	r3, [pc, #100]	; (8012a00 <Update_Blink+0x62c>)
 801299a:	5c9b      	ldrb	r3, [r3, r2]
 801299c:	4618      	mov	r0, r3
 801299e:	f7ff f8ed 	bl	8011b7c <Exp>
 80129a2:	4603      	mov	r3, r0
 80129a4:	fb03 f204 	mul.w	r2, r3, r4
 80129a8:	687b      	ldr	r3, [r7, #4]
 80129aa:	fb02 f303 	mul.w	r3, r2, r3
 80129ae:	607b      	str	r3, [r7, #4]
      if(Tmp>=0)
 80129b0:	687b      	ldr	r3, [r7, #4]
 80129b2:	2b00      	cmp	r3, #0
 80129b4:	db28      	blt.n	8012a08 <Update_Blink+0x634>
        Value2Str(NumStr, Tmp, T[0], 3, UNSIGN);
 80129b6:	2301      	movs	r3, #1
 80129b8:	9300      	str	r3, [sp, #0]
 80129ba:	2303      	movs	r3, #3
 80129bc:	4a11      	ldr	r2, [pc, #68]	; (8012a04 <Update_Blink+0x630>)
 80129be:	6879      	ldr	r1, [r7, #4]
 80129c0:	4805      	ldr	r0, [pc, #20]	; (80129d8 <Update_Blink+0x604>)
 80129c2:	f7fe ffdf 	bl	8011984 <Value2Str>
 80129c6:	e027      	b.n	8012a18 <Update_Blink+0x644>
 80129c8:	20000140 	.word	0x20000140
 80129cc:	08002130 	.word	0x08002130
 80129d0:	08002108 	.word	0x08002108
 80129d4:	08001d00 	.word	0x08001d00
 80129d8:	20002838 	.word	0x20002838
 80129dc:	2000077c 	.word	0x2000077c
 80129e0:	08000960 	.word	0x08000960
 80129e4:	08000964 	.word	0x08000964
 80129e8:	0800215c 	.word	0x0800215c
 80129ec:	20000298 	.word	0x20000298
 80129f0:	200001d0 	.word	0x200001d0
 80129f4:	08000970 	.word	0x08000970
 80129f8:	08001c4c 	.word	0x08001c4c
 80129fc:	0800211c 	.word	0x0800211c
 8012a00:	080020f4 	.word	0x080020f4
 8012a04:	08001ce8 	.word	0x08001ce8
      else
        Value2Str(NumStr, Tmp, T[0], 3, SIGN);
 8012a08:	2300      	movs	r3, #0
 8012a0a:	9300      	str	r3, [sp, #0]
 8012a0c:	2303      	movs	r3, #3
 8012a0e:	4aa3      	ldr	r2, [pc, #652]	; (8012c9c <Update_Blink+0x8c8>)
 8012a10:	6879      	ldr	r1, [r7, #4]
 8012a12:	48a3      	ldr	r0, [pc, #652]	; (8012ca0 <Update_Blink+0x8cc>)
 8012a14:	f7fe ffb6 	bl	8011984 <Value2Str>
      SetColor(GRY, TCOLOR[XN]);
 8012a18:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8012a1c:	4619      	mov	r1, r3
 8012a1e:	f643 10e7 	movw	r0, #14823	; 0x39e7
 8012a22:	f7fb f8bf 	bl	800dba4 <SetColor>
      Draw_Circle_D(Twink, S_X[T1_POSI]-3, LABLE_Y, 11, 0, 6*9);
 8012a26:	4b9f      	ldr	r3, [pc, #636]	; (8012ca4 <Update_Blink+0x8d0>)
 8012a28:	781b      	ldrb	r3, [r3, #0]
 8012a2a:	b2d8      	uxtb	r0, r3
 8012a2c:	2307      	movs	r3, #7
 8012a2e:	b29b      	uxth	r3, r3
 8012a30:	3b03      	subs	r3, #3
 8012a32:	b29b      	uxth	r3, r3
 8012a34:	b219      	sxth	r1, r3
 8012a36:	2336      	movs	r3, #54	; 0x36
 8012a38:	9301      	str	r3, [sp, #4]
 8012a3a:	2300      	movs	r3, #0
 8012a3c:	9300      	str	r3, [sp, #0]
 8012a3e:	230b      	movs	r3, #11
 8012a40:	2203      	movs	r2, #3
 8012a42:	f7fb f99d 	bl	800dd80 <Draw_Circle_D>
      DispStr(S_X[T1_POSI]+0*6, LABLE_Y, Twink+SYMB, "]");
 8012a46:	2007      	movs	r0, #7
 8012a48:	4b96      	ldr	r3, [pc, #600]	; (8012ca4 <Update_Blink+0x8d0>)
 8012a4a:	781b      	ldrb	r3, [r3, #0]
 8012a4c:	b2db      	uxtb	r3, r3
 8012a4e:	3310      	adds	r3, #16
 8012a50:	b2da      	uxtb	r2, r3
 8012a52:	4b95      	ldr	r3, [pc, #596]	; (8012ca8 <Update_Blink+0x8d4>)
 8012a54:	2103      	movs	r1, #3
 8012a56:	f7fb f8bd 	bl	800dbd4 <DispStr>
      DispStr(S_X[T1_POSI]+1*6, LABLE_Y, Twink,      "T:      ");
 8012a5a:	2307      	movs	r3, #7
 8012a5c:	b29b      	uxth	r3, r3
 8012a5e:	3306      	adds	r3, #6
 8012a60:	b29b      	uxth	r3, r3
 8012a62:	b218      	sxth	r0, r3
 8012a64:	4b8f      	ldr	r3, [pc, #572]	; (8012ca4 <Update_Blink+0x8d0>)
 8012a66:	781b      	ldrb	r3, [r3, #0]
 8012a68:	b2da      	uxtb	r2, r3
 8012a6a:	4b90      	ldr	r3, [pc, #576]	; (8012cac <Update_Blink+0x8d8>)
 8012a6c:	2103      	movs	r1, #3
 8012a6e:	f7fb f8b1 	bl	800dbd4 <DispStr>
      DispStr(S_X[T1_POSI]+3*6, LABLE_Y, Twink,      (char *)NumStr);
 8012a72:	2307      	movs	r3, #7
 8012a74:	b29b      	uxth	r3, r3
 8012a76:	3312      	adds	r3, #18
 8012a78:	b29b      	uxth	r3, r3
 8012a7a:	b218      	sxth	r0, r3
 8012a7c:	4b89      	ldr	r3, [pc, #548]	; (8012ca4 <Update_Blink+0x8d0>)
 8012a7e:	781b      	ldrb	r3, [r3, #0]
 8012a80:	b2da      	uxtb	r2, r3
 8012a82:	4b87      	ldr	r3, [pc, #540]	; (8012ca0 <Update_Blink+0x8cc>)
 8012a84:	2103      	movs	r1, #3
 8012a86:	f7fb f8a5 	bl	800dbd4 <DispStr>
      break;
 8012a8a:	e398      	b.n	80131be <Update_Blink+0xdea>

    case XN_TYPE:
      if(Twink) ParamTab[T1F] |=  D_HID;
 8012a8c:	4b85      	ldr	r3, [pc, #532]	; (8012ca4 <Update_Blink+0x8d0>)
 8012a8e:	781b      	ldrb	r3, [r3, #0]
 8012a90:	b2db      	uxtb	r3, r3
 8012a92:	2b00      	cmp	r3, #0
 8012a94:	d008      	beq.n	8012aa8 <Update_Blink+0x6d4>
 8012a96:	4b86      	ldr	r3, [pc, #536]	; (8012cb0 <Update_Blink+0x8dc>)
 8012a98:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8012a9c:	f043 0301 	orr.w	r3, r3, #1
 8012aa0:	b21a      	sxth	r2, r3
 8012aa2:	4b83      	ldr	r3, [pc, #524]	; (8012cb0 <Update_Blink+0x8dc>)
 8012aa4:	821a      	strh	r2, [r3, #16]
 8012aa6:	e007      	b.n	8012ab8 <Update_Blink+0x6e4>
      else      ParamTab[T1F] &= ~D_HID;
 8012aa8:	4b81      	ldr	r3, [pc, #516]	; (8012cb0 <Update_Blink+0x8dc>)
 8012aaa:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8012aae:	f023 0301 	bic.w	r3, r3, #1
 8012ab2:	b21a      	sxth	r2, r3
 8012ab4:	4b7e      	ldr	r3, [pc, #504]	; (8012cb0 <Update_Blink+0x8dc>)
 8012ab6:	821a      	strh	r2, [r3, #16]
      if(Twink) ParamTab[T2F] |=  D_HID;
 8012ab8:	4b7a      	ldr	r3, [pc, #488]	; (8012ca4 <Update_Blink+0x8d0>)
 8012aba:	781b      	ldrb	r3, [r3, #0]
 8012abc:	b2db      	uxtb	r3, r3
 8012abe:	2b00      	cmp	r3, #0
 8012ac0:	d008      	beq.n	8012ad4 <Update_Blink+0x700>
 8012ac2:	4b7b      	ldr	r3, [pc, #492]	; (8012cb0 <Update_Blink+0x8dc>)
 8012ac4:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8012ac8:	f043 0301 	orr.w	r3, r3, #1
 8012acc:	b21a      	sxth	r2, r3
 8012ace:	4b78      	ldr	r3, [pc, #480]	; (8012cb0 <Update_Blink+0x8dc>)
 8012ad0:	825a      	strh	r2, [r3, #18]
      else      ParamTab[T2F] &= ~D_HID;
      break;
 8012ad2:	e374      	b.n	80131be <Update_Blink+0xdea>
      else      ParamTab[T2F] &= ~D_HID;
 8012ad4:	4b76      	ldr	r3, [pc, #472]	; (8012cb0 <Update_Blink+0x8dc>)
 8012ad6:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8012ada:	f023 0301 	bic.w	r3, r3, #1
 8012ade:	b21a      	sxth	r2, r3
 8012ae0:	4b73      	ldr	r3, [pc, #460]	; (8012cb0 <Update_Blink+0x8dc>)
 8012ae2:	825a      	strh	r2, [r3, #18]
      break;
 8012ae4:	e36b      	b.n	80131be <Update_Blink+0xdea>

    case SYNCMODE:
      if(!(Status &  STOP))
 8012ae6:	4b73      	ldr	r3, [pc, #460]	; (8012cb4 <Update_Blink+0x8e0>)
 8012ae8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8012aec:	b29b      	uxth	r3, r3
 8012aee:	f003 0301 	and.w	r3, r3, #1
 8012af2:	2b00      	cmp	r3, #0
 8012af4:	f040 8362 	bne.w	80131bc <Update_Blink+0xde8>
      {
      SetColor(GRY, TCOLOR[TRG]);
 8012af8:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8012afc:	4619      	mov	r1, r3
 8012afe:	f643 10e7 	movw	r0, #14823	; 0x39e7
 8012b02:	f7fb f84f 	bl	800dba4 <SetColor>
      Draw_Circle_D(Twink, S_X[i]-3, TITLE_Y_POS, 11, 1, 6*4);
 8012b06:	4b67      	ldr	r3, [pc, #412]	; (8012ca4 <Update_Blink+0x8d0>)
 8012b08:	781b      	ldrb	r3, [r3, #0]
 8012b0a:	b2d8      	uxtb	r0, r3
 8012b0c:	89bb      	ldrh	r3, [r7, #12]
 8012b0e:	4a6a      	ldr	r2, [pc, #424]	; (8012cb8 <Update_Blink+0x8e4>)
 8012b10:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8012b14:	b29b      	uxth	r3, r3
 8012b16:	3b03      	subs	r3, #3
 8012b18:	b29b      	uxth	r3, r3
 8012b1a:	b219      	sxth	r1, r3
 8012b1c:	2318      	movs	r3, #24
 8012b1e:	9301      	str	r3, [sp, #4]
 8012b20:	2301      	movs	r3, #1
 8012b22:	9300      	str	r3, [sp, #0]
 8012b24:	230b      	movs	r3, #11
 8012b26:	22e1      	movs	r2, #225	; 0xe1
 8012b28:	f7fb f92a 	bl	800dd80 <Draw_Circle_D>
      DispStr(S_X[i], TITLE_Y_POS, Twink, (char *)ptr);
 8012b2c:	89bb      	ldrh	r3, [r7, #12]
 8012b2e:	4a62      	ldr	r2, [pc, #392]	; (8012cb8 <Update_Blink+0x8e4>)
 8012b30:	f932 0013 	ldrsh.w	r0, [r2, r3, lsl #1]
 8012b34:	4b5b      	ldr	r3, [pc, #364]	; (8012ca4 <Update_Blink+0x8d0>)
 8012b36:	781b      	ldrb	r3, [r3, #0]
 8012b38:	b2da      	uxtb	r2, r3
 8012b3a:	68bb      	ldr	r3, [r7, #8]
 8012b3c:	21e1      	movs	r1, #225	; 0xe1
 8012b3e:	f7fb f849 	bl	800dbd4 <DispStr>
      }
      break;
 8012b42:	e33b      	b.n	80131bc <Update_Blink+0xde8>

    case TR_MODE:
    case SENSITIVE:
      SetColor(GRY, TCOLOR[TRG]);
 8012b44:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8012b48:	4619      	mov	r1, r3
 8012b4a:	f643 10e7 	movw	r0, #14823	; 0x39e7
 8012b4e:	f7fb f829 	bl	800dba4 <SetColor>
      Draw_Circle_D(Twink, S_X[TR_MODE]-3, TITLE_Y_POS, 11, 0, 6*8);
 8012b52:	4b54      	ldr	r3, [pc, #336]	; (8012ca4 <Update_Blink+0x8d0>)
 8012b54:	781b      	ldrb	r3, [r3, #0]
 8012b56:	b2d8      	uxtb	r0, r3
 8012b58:	23dd      	movs	r3, #221	; 0xdd
 8012b5a:	b29b      	uxth	r3, r3
 8012b5c:	3b03      	subs	r3, #3
 8012b5e:	b29b      	uxth	r3, r3
 8012b60:	b219      	sxth	r1, r3
 8012b62:	2330      	movs	r3, #48	; 0x30
 8012b64:	9301      	str	r3, [sp, #4]
 8012b66:	2300      	movs	r3, #0
 8012b68:	9300      	str	r3, [sp, #0]
 8012b6a:	230b      	movs	r3, #11
 8012b6c:	22e1      	movs	r2, #225	; 0xe1
 8012b6e:	f7fb f907 	bl	800dd80 <Draw_Circle_D>
      DispStr10x14(S_X[TR_MODE], TITLE_Y_POS, Twink+SYMB,(List[TR_MODE].Val?("D"):("C")));
 8012b72:	20dd      	movs	r0, #221	; 0xdd
 8012b74:	4b4b      	ldr	r3, [pc, #300]	; (8012ca4 <Update_Blink+0x8d0>)
 8012b76:	781b      	ldrb	r3, [r3, #0]
 8012b78:	b2db      	uxtb	r3, r3
 8012b7a:	3310      	adds	r3, #16
 8012b7c:	b2da      	uxtb	r2, r3
 8012b7e:	4b4f      	ldr	r3, [pc, #316]	; (8012cbc <Update_Blink+0x8e8>)
 8012b80:	f9b3 3074 	ldrsh.w	r3, [r3, #116]	; 0x74
 8012b84:	2b00      	cmp	r3, #0
 8012b86:	d001      	beq.n	8012b8c <Update_Blink+0x7b8>
 8012b88:	4b4d      	ldr	r3, [pc, #308]	; (8012cc0 <Update_Blink+0x8ec>)
 8012b8a:	e000      	b.n	8012b8e <Update_Blink+0x7ba>
 8012b8c:	4b4d      	ldr	r3, [pc, #308]	; (8012cc4 <Update_Blink+0x8f0>)
 8012b8e:	21e1      	movs	r1, #225	; 0xe1
 8012b90:	f7fb fa88 	bl	800e0a4 <DispStr10x14>

      Tmp  = List[SENSITIVE].Val;                        // �����ز�ֵ
 8012b94:	4b49      	ldr	r3, [pc, #292]	; (8012cbc <Update_Blink+0x8e8>)
 8012b96:	f9b3 308c 	ldrsh.w	r3, [r3, #140]	; 0x8c
 8012b9a:	607b      	str	r3, [r7, #4]
      Tmp *= X_SCALE[Range]* Exp(V_SCALE[Range]);
 8012b9c:	89fb      	ldrh	r3, [r7, #14]
 8012b9e:	4a4a      	ldr	r2, [pc, #296]	; (8012cc8 <Update_Blink+0x8f4>)
 8012ba0:	5cd3      	ldrb	r3, [r2, r3]
 8012ba2:	461c      	mov	r4, r3
 8012ba4:	89fb      	ldrh	r3, [r7, #14]
 8012ba6:	4a49      	ldr	r2, [pc, #292]	; (8012ccc <Update_Blink+0x8f8>)
 8012ba8:	5cd3      	ldrb	r3, [r2, r3]
 8012baa:	4618      	mov	r0, r3
 8012bac:	f7fe ffe6 	bl	8011b7c <Exp>
 8012bb0:	4603      	mov	r3, r0
 8012bb2:	fb03 f204 	mul.w	r2, r3, r4
 8012bb6:	687b      	ldr	r3, [r7, #4]
 8012bb8:	fb02 f303 	mul.w	r3, r2, r3
 8012bbc:	607b      	str	r3, [r7, #4]
      Value2Str(NumStr, Tmp, V[0], 2, UNSIGN);
 8012bbe:	2301      	movs	r3, #1
 8012bc0:	9300      	str	r3, [sp, #0]
 8012bc2:	2302      	movs	r3, #2
 8012bc4:	4a42      	ldr	r2, [pc, #264]	; (8012cd0 <Update_Blink+0x8fc>)
 8012bc6:	6879      	ldr	r1, [r7, #4]
 8012bc8:	4835      	ldr	r0, [pc, #212]	; (8012ca0 <Update_Blink+0x8cc>)
 8012bca:	f7fe fedb 	bl	8011984 <Value2Str>
      DispStr(S_X[SENSITIVE]+9, TITLE_Y_POS, Twink,  "     ");
 8012bce:	23e7      	movs	r3, #231	; 0xe7
 8012bd0:	b29b      	uxth	r3, r3
 8012bd2:	3309      	adds	r3, #9
 8012bd4:	b29b      	uxth	r3, r3
 8012bd6:	b218      	sxth	r0, r3
 8012bd8:	4b32      	ldr	r3, [pc, #200]	; (8012ca4 <Update_Blink+0x8d0>)
 8012bda:	781b      	ldrb	r3, [r3, #0]
 8012bdc:	b2da      	uxtb	r2, r3
 8012bde:	4b3d      	ldr	r3, [pc, #244]	; (8012cd4 <Update_Blink+0x900>)
 8012be0:	21e1      	movs	r1, #225	; 0xe1
 8012be2:	f7fa fff7 	bl	800dbd4 <DispStr>
      DispStr10x14(S_X[SENSITIVE], TITLE_Y_POS, Twink+SYMB,"E");
 8012be6:	20e7      	movs	r0, #231	; 0xe7
 8012be8:	4b2e      	ldr	r3, [pc, #184]	; (8012ca4 <Update_Blink+0x8d0>)
 8012bea:	781b      	ldrb	r3, [r3, #0]
 8012bec:	b2db      	uxtb	r3, r3
 8012bee:	3310      	adds	r3, #16
 8012bf0:	b2da      	uxtb	r2, r3
 8012bf2:	4b39      	ldr	r3, [pc, #228]	; (8012cd8 <Update_Blink+0x904>)
 8012bf4:	21e1      	movs	r1, #225	; 0xe1
 8012bf6:	f7fb fa55 	bl	800e0a4 <DispStr10x14>
      DispStr(S_X[SENSITIVE]+9, TITLE_Y_POS, Twink     ,  (char *)NumStr);
 8012bfa:	23e7      	movs	r3, #231	; 0xe7
 8012bfc:	b29b      	uxth	r3, r3
 8012bfe:	3309      	adds	r3, #9
 8012c00:	b29b      	uxth	r3, r3
 8012c02:	b218      	sxth	r0, r3
 8012c04:	4b27      	ldr	r3, [pc, #156]	; (8012ca4 <Update_Blink+0x8d0>)
 8012c06:	781b      	ldrb	r3, [r3, #0]
 8012c08:	b2da      	uxtb	r2, r3
 8012c0a:	4b25      	ldr	r3, [pc, #148]	; (8012ca0 <Update_Blink+0x8cc>)
 8012c0c:	21e1      	movs	r1, #225	; 0xe1
 8012c0e:	f7fa ffe1 	bl	800dbd4 <DispStr>
      break;
 8012c12:	e2d4      	b.n	80131be <Update_Blink+0xdea>

    case FITTRIGG:
      SetColor(GRY, TCOLOR[TRG]);
 8012c14:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8012c18:	4619      	mov	r1, r3
 8012c1a:	f643 10e7 	movw	r0, #14823	; 0x39e7
 8012c1e:	f7fa ffc1 	bl	800dba4 <SetColor>
      DispStr10x14(S_X[FITTRIGG], TITLE_Y_POS, PRN+SYMB,(List[FITTRIGG].Val?("F"):("B")));
 8012c22:	20cf      	movs	r0, #207	; 0xcf
 8012c24:	4b25      	ldr	r3, [pc, #148]	; (8012cbc <Update_Blink+0x8e8>)
 8012c26:	f9b3 307c 	ldrsh.w	r3, [r3, #124]	; 0x7c
 8012c2a:	2b00      	cmp	r3, #0
 8012c2c:	d001      	beq.n	8012c32 <Update_Blink+0x85e>
 8012c2e:	4b2b      	ldr	r3, [pc, #172]	; (8012cdc <Update_Blink+0x908>)
 8012c30:	e000      	b.n	8012c34 <Update_Blink+0x860>
 8012c32:	4b2b      	ldr	r3, [pc, #172]	; (8012ce0 <Update_Blink+0x90c>)
 8012c34:	2210      	movs	r2, #16
 8012c36:	21e1      	movs	r1, #225	; 0xe1
 8012c38:	f7fb fa34 	bl	800e0a4 <DispStr10x14>
      break;
 8012c3c:	e2bf      	b.n	80131be <Update_Blink+0xdea>

    case THRESHOLD:
      if(Twink) ParamTab[VTF] |=  D_HID;
 8012c3e:	4b19      	ldr	r3, [pc, #100]	; (8012ca4 <Update_Blink+0x8d0>)
 8012c40:	781b      	ldrb	r3, [r3, #0]
 8012c42:	b2db      	uxtb	r3, r3
 8012c44:	2b00      	cmp	r3, #0
 8012c46:	d008      	beq.n	8012c5a <Update_Blink+0x886>
 8012c48:	4b19      	ldr	r3, [pc, #100]	; (8012cb0 <Update_Blink+0x8dc>)
 8012c4a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8012c4e:	f043 0301 	orr.w	r3, r3, #1
 8012c52:	b21a      	sxth	r2, r3
 8012c54:	4b16      	ldr	r3, [pc, #88]	; (8012cb0 <Update_Blink+0x8dc>)
 8012c56:	811a      	strh	r2, [r3, #8]
      else      ParamTab[VTF] &= ~D_HID;
      break;
 8012c58:	e2b1      	b.n	80131be <Update_Blink+0xdea>
      else      ParamTab[VTF] &= ~D_HID;
 8012c5a:	4b15      	ldr	r3, [pc, #84]	; (8012cb0 <Update_Blink+0x8dc>)
 8012c5c:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8012c60:	f023 0301 	bic.w	r3, r3, #1
 8012c64:	b21a      	sxth	r2, r3
 8012c66:	4b12      	ldr	r3, [pc, #72]	; (8012cb0 <Update_Blink+0x8dc>)
 8012c68:	811a      	strh	r2, [r3, #8]
      break;
 8012c6a:	e2a8      	b.n	80131be <Update_Blink+0xdea>

    case TR_TYPE:
      if(Twink) ParamTab[VTF] |=  D_HID;
 8012c6c:	4b0d      	ldr	r3, [pc, #52]	; (8012ca4 <Update_Blink+0x8d0>)
 8012c6e:	781b      	ldrb	r3, [r3, #0]
 8012c70:	b2db      	uxtb	r3, r3
 8012c72:	2b00      	cmp	r3, #0
 8012c74:	d008      	beq.n	8012c88 <Update_Blink+0x8b4>
 8012c76:	4b0e      	ldr	r3, [pc, #56]	; (8012cb0 <Update_Blink+0x8dc>)
 8012c78:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8012c7c:	f043 0301 	orr.w	r3, r3, #1
 8012c80:	b21a      	sxth	r2, r3
 8012c82:	4b0b      	ldr	r3, [pc, #44]	; (8012cb0 <Update_Blink+0x8dc>)
 8012c84:	811a      	strh	r2, [r3, #8]
      else      ParamTab[VTF] &= ~D_HID;
      break;
 8012c86:	e29a      	b.n	80131be <Update_Blink+0xdea>
      else      ParamTab[VTF] &= ~D_HID;
 8012c88:	4b09      	ldr	r3, [pc, #36]	; (8012cb0 <Update_Blink+0x8dc>)
 8012c8a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8012c8e:	f023 0301 	bic.w	r3, r3, #1
 8012c92:	b21a      	sxth	r2, r3
 8012c94:	4b06      	ldr	r3, [pc, #24]	; (8012cb0 <Update_Blink+0x8dc>)
 8012c96:	811a      	strh	r2, [r3, #8]
      break;
 8012c98:	e291      	b.n	80131be <Update_Blink+0xdea>
 8012c9a:	bf00      	nop
 8012c9c:	08001ce8 	.word	0x08001ce8
 8012ca0:	20002838 	.word	0x20002838
 8012ca4:	2000077c 	.word	0x2000077c
 8012ca8:	08000960 	.word	0x08000960
 8012cac:	0800097c 	.word	0x0800097c
 8012cb0:	20000140 	.word	0x20000140
 8012cb4:	200007a0 	.word	0x200007a0
 8012cb8:	0800215c 	.word	0x0800215c
 8012cbc:	20000298 	.word	0x20000298
 8012cc0:	08000988 	.word	0x08000988
 8012cc4:	0800098c 	.word	0x0800098c
 8012cc8:	08002130 	.word	0x08002130
 8012ccc:	08002108 	.word	0x08002108
 8012cd0:	08001d00 	.word	0x08001d00
 8012cd4:	08000990 	.word	0x08000990
 8012cd8:	08000998 	.word	0x08000998
 8012cdc:	0800099c 	.word	0x0800099c
 8012ce0:	0800095c 	.word	0x0800095c

    case EXT_REFN:
      SetColor(GRY, TCOLOR[EX]);
 8012ce4:	f64f 031f 	movw	r3, #63519	; 0xf81f
 8012ce8:	4619      	mov	r1, r3
 8012cea:	f643 10e7 	movw	r0, #14823	; 0x39e7
 8012cee:	f7fa ff59 	bl	800dba4 <SetColor>
      Draw_Circle_D(Twink, S_X[i]-3, TITLE_Y_POS, 11, 1, 6*5);
 8012cf2:	4b93      	ldr	r3, [pc, #588]	; (8012f40 <Update_Blink+0xb6c>)
 8012cf4:	781b      	ldrb	r3, [r3, #0]
 8012cf6:	b2d8      	uxtb	r0, r3
 8012cf8:	89bb      	ldrh	r3, [r7, #12]
 8012cfa:	4a92      	ldr	r2, [pc, #584]	; (8012f44 <Update_Blink+0xb70>)
 8012cfc:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8012d00:	b29b      	uxth	r3, r3
 8012d02:	3b03      	subs	r3, #3
 8012d04:	b29b      	uxth	r3, r3
 8012d06:	b219      	sxth	r1, r3
 8012d08:	231e      	movs	r3, #30
 8012d0a:	9301      	str	r3, [sp, #4]
 8012d0c:	2301      	movs	r3, #1
 8012d0e:	9300      	str	r3, [sp, #0]
 8012d10:	230b      	movs	r3, #11
 8012d12:	22e1      	movs	r2, #225	; 0xe1
 8012d14:	f7fb f834 	bl	800dd80 <Draw_Circle_D>
      DispStr(S_X[i], TITLE_Y_POS, Twink, (char*)(List[EXT_HIDE].Val? I[List[EXT_REFN].Val] : I[6]));
 8012d18:	89bb      	ldrh	r3, [r7, #12]
 8012d1a:	4a8a      	ldr	r2, [pc, #552]	; (8012f44 <Update_Blink+0xb70>)
 8012d1c:	f932 0013 	ldrsh.w	r0, [r2, r3, lsl #1]
 8012d20:	4b87      	ldr	r3, [pc, #540]	; (8012f40 <Update_Blink+0xb6c>)
 8012d22:	781b      	ldrb	r3, [r3, #0]
 8012d24:	b2da      	uxtb	r2, r3
 8012d26:	4b88      	ldr	r3, [pc, #544]	; (8012f48 <Update_Blink+0xb74>)
 8012d28:	f9b3 30e4 	ldrsh.w	r3, [r3, #228]	; 0xe4
 8012d2c:	2b00      	cmp	r3, #0
 8012d2e:	d00a      	beq.n	8012d46 <Update_Blink+0x972>
 8012d30:	4b85      	ldr	r3, [pc, #532]	; (8012f48 <Update_Blink+0xb74>)
 8012d32:	f9b3 30d4 	ldrsh.w	r3, [r3, #212]	; 0xd4
 8012d36:	4619      	mov	r1, r3
 8012d38:	460b      	mov	r3, r1
 8012d3a:	005b      	lsls	r3, r3, #1
 8012d3c:	440b      	add	r3, r1
 8012d3e:	005b      	lsls	r3, r3, #1
 8012d40:	4982      	ldr	r1, [pc, #520]	; (8012f4c <Update_Blink+0xb78>)
 8012d42:	440b      	add	r3, r1
 8012d44:	e000      	b.n	8012d48 <Update_Blink+0x974>
 8012d46:	4b82      	ldr	r3, [pc, #520]	; (8012f50 <Update_Blink+0xb7c>)
 8012d48:	21e1      	movs	r1, #225	; 0xe1
 8012d4a:	f7fa ff43 	bl	800dbd4 <DispStr>
      ParamTab[P2F] &= ~D_HID;
 8012d4e:	4b81      	ldr	r3, [pc, #516]	; (8012f54 <Update_Blink+0xb80>)
 8012d50:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8012d54:	f023 0301 	bic.w	r3, r3, #1
 8012d58:	b21a      	sxth	r2, r3
 8012d5a:	4b7e      	ldr	r3, [pc, #504]	; (8012f54 <Update_Blink+0xb80>)
 8012d5c:	805a      	strh	r2, [r3, #2]
      break;
 8012d5e:	e22e      	b.n	80131be <Update_Blink+0xdea>

    case EXT_POSI:
      if(Twink) ParamTab[P2F] |=  D_HID;
 8012d60:	4b77      	ldr	r3, [pc, #476]	; (8012f40 <Update_Blink+0xb6c>)
 8012d62:	781b      	ldrb	r3, [r3, #0]
 8012d64:	b2db      	uxtb	r3, r3
 8012d66:	2b00      	cmp	r3, #0
 8012d68:	d008      	beq.n	8012d7c <Update_Blink+0x9a8>
 8012d6a:	4b7a      	ldr	r3, [pc, #488]	; (8012f54 <Update_Blink+0xb80>)
 8012d6c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8012d70:	f043 0301 	orr.w	r3, r3, #1
 8012d74:	b21a      	sxth	r2, r3
 8012d76:	4b77      	ldr	r3, [pc, #476]	; (8012f54 <Update_Blink+0xb80>)
 8012d78:	805a      	strh	r2, [r3, #2]
      else      ParamTab[P2F] &= ~D_HID;
      break;
 8012d7a:	e220      	b.n	80131be <Update_Blink+0xdea>
      else      ParamTab[P2F] &= ~D_HID;
 8012d7c:	4b75      	ldr	r3, [pc, #468]	; (8012f54 <Update_Blink+0xb80>)
 8012d7e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8012d82:	f023 0301 	bic.w	r3, r3, #1
 8012d86:	b21a      	sxth	r2, r3
 8012d88:	4b72      	ldr	r3, [pc, #456]	; (8012f54 <Update_Blink+0xb80>)
 8012d8a:	805a      	strh	r2, [r3, #2]
      break;
 8012d8c:	e217      	b.n	80131be <Update_Blink+0xdea>

    case EXT_HIDE:
      SetColor(GRY, TCOLOR[EX]);
 8012d8e:	f64f 031f 	movw	r3, #63519	; 0xf81f
 8012d92:	4619      	mov	r1, r3
 8012d94:	f643 10e7 	movw	r0, #14823	; 0x39e7
 8012d98:	f7fa ff04 	bl	800dba4 <SetColor>
      Draw_Circle_D(Twink, S_X[i]-3, TITLE_Y_POS, 11, 1, 6*5);
 8012d9c:	4b68      	ldr	r3, [pc, #416]	; (8012f40 <Update_Blink+0xb6c>)
 8012d9e:	781b      	ldrb	r3, [r3, #0]
 8012da0:	b2d8      	uxtb	r0, r3
 8012da2:	89bb      	ldrh	r3, [r7, #12]
 8012da4:	4a67      	ldr	r2, [pc, #412]	; (8012f44 <Update_Blink+0xb70>)
 8012da6:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8012daa:	b29b      	uxth	r3, r3
 8012dac:	3b03      	subs	r3, #3
 8012dae:	b29b      	uxth	r3, r3
 8012db0:	b219      	sxth	r1, r3
 8012db2:	231e      	movs	r3, #30
 8012db4:	9301      	str	r3, [sp, #4]
 8012db6:	2301      	movs	r3, #1
 8012db8:	9300      	str	r3, [sp, #0]
 8012dba:	230b      	movs	r3, #11
 8012dbc:	22e1      	movs	r2, #225	; 0xe1
 8012dbe:	f7fa ffdf 	bl	800dd80 <Draw_Circle_D>
      DispStr(S_X[i], TITLE_Y_POS, Twink, (char*)(List[EXT_HIDE].Val? I[List[EXT_REFN].Val] : I[6]));
 8012dc2:	89bb      	ldrh	r3, [r7, #12]
 8012dc4:	4a5f      	ldr	r2, [pc, #380]	; (8012f44 <Update_Blink+0xb70>)
 8012dc6:	f932 0013 	ldrsh.w	r0, [r2, r3, lsl #1]
 8012dca:	4b5d      	ldr	r3, [pc, #372]	; (8012f40 <Update_Blink+0xb6c>)
 8012dcc:	781b      	ldrb	r3, [r3, #0]
 8012dce:	b2da      	uxtb	r2, r3
 8012dd0:	4b5d      	ldr	r3, [pc, #372]	; (8012f48 <Update_Blink+0xb74>)
 8012dd2:	f9b3 30e4 	ldrsh.w	r3, [r3, #228]	; 0xe4
 8012dd6:	2b00      	cmp	r3, #0
 8012dd8:	d00a      	beq.n	8012df0 <Update_Blink+0xa1c>
 8012dda:	4b5b      	ldr	r3, [pc, #364]	; (8012f48 <Update_Blink+0xb74>)
 8012ddc:	f9b3 30d4 	ldrsh.w	r3, [r3, #212]	; 0xd4
 8012de0:	4619      	mov	r1, r3
 8012de2:	460b      	mov	r3, r1
 8012de4:	005b      	lsls	r3, r3, #1
 8012de6:	440b      	add	r3, r1
 8012de8:	005b      	lsls	r3, r3, #1
 8012dea:	4958      	ldr	r1, [pc, #352]	; (8012f4c <Update_Blink+0xb78>)
 8012dec:	440b      	add	r3, r1
 8012dee:	e000      	b.n	8012df2 <Update_Blink+0xa1e>
 8012df0:	4b57      	ldr	r3, [pc, #348]	; (8012f50 <Update_Blink+0xb7c>)
 8012df2:	21e1      	movs	r1, #225	; 0xe1
 8012df4:	f7fa feee 	bl	800dbd4 <DispStr>
      ParamTab[P2F] &= ~D_HID;
 8012df8:	4b56      	ldr	r3, [pc, #344]	; (8012f54 <Update_Blink+0xb80>)
 8012dfa:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8012dfe:	f023 0301 	bic.w	r3, r3, #1
 8012e02:	b21a      	sxth	r2, r3
 8012e04:	4b53      	ldr	r3, [pc, #332]	; (8012f54 <Update_Blink+0xb80>)
 8012e06:	805a      	strh	r2, [r3, #2]
      break;
 8012e08:	e1d9      	b.n	80131be <Update_Blink+0xdea>

    case TPYE_OUT:
      SetColor(GRY, TCOLOR[SN]);
 8012e0a:	f240 531f 	movw	r3, #1311	; 0x51f
 8012e0e:	4619      	mov	r1, r3
 8012e10:	f643 10e7 	movw	r0, #14823	; 0x39e7
 8012e14:	f7fa fec6 	bl	800dba4 <SetColor>
      Draw_Circle_D(Twink, S_X[TPYE_OUT]-3, LABLE_Y, 11, 0, 6*9);
 8012e18:	4b49      	ldr	r3, [pc, #292]	; (8012f40 <Update_Blink+0xb6c>)
 8012e1a:	781b      	ldrb	r3, [r3, #0]
 8012e1c:	b2d8      	uxtb	r0, r3
 8012e1e:	2307      	movs	r3, #7
 8012e20:	b29b      	uxth	r3, r3
 8012e22:	3b03      	subs	r3, #3
 8012e24:	b29b      	uxth	r3, r3
 8012e26:	b219      	sxth	r1, r3
 8012e28:	2336      	movs	r3, #54	; 0x36
 8012e2a:	9301      	str	r3, [sp, #4]
 8012e2c:	2300      	movs	r3, #0
 8012e2e:	9300      	str	r3, [sp, #0]
 8012e30:	230b      	movs	r3, #11
 8012e32:	2203      	movs	r2, #3
 8012e34:	f7fa ffa4 	bl	800dd80 <Draw_Circle_D>
      DispStr(S_X[i],    LABLE_Y, Twink, "FO: ");
 8012e38:	89bb      	ldrh	r3, [r7, #12]
 8012e3a:	4a42      	ldr	r2, [pc, #264]	; (8012f44 <Update_Blink+0xb70>)
 8012e3c:	f932 0013 	ldrsh.w	r0, [r2, r3, lsl #1]
 8012e40:	4b3f      	ldr	r3, [pc, #252]	; (8012f40 <Update_Blink+0xb6c>)
 8012e42:	781b      	ldrb	r3, [r3, #0]
 8012e44:	b2da      	uxtb	r2, r3
 8012e46:	4b44      	ldr	r3, [pc, #272]	; (8012f58 <Update_Blink+0xb84>)
 8012e48:	2103      	movs	r1, #3
 8012e4a:	f7fa fec3 	bl	800dbd4 <DispStr>
      DispStr(S_X[i]+24, LABLE_Y, Twink, "     ");
 8012e4e:	89bb      	ldrh	r3, [r7, #12]
 8012e50:	4a3c      	ldr	r2, [pc, #240]	; (8012f44 <Update_Blink+0xb70>)
 8012e52:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8012e56:	b29b      	uxth	r3, r3
 8012e58:	3318      	adds	r3, #24
 8012e5a:	b29b      	uxth	r3, r3
 8012e5c:	b218      	sxth	r0, r3
 8012e5e:	4b38      	ldr	r3, [pc, #224]	; (8012f40 <Update_Blink+0xb6c>)
 8012e60:	781b      	ldrb	r3, [r3, #0]
 8012e62:	b2da      	uxtb	r2, r3
 8012e64:	4b3d      	ldr	r3, [pc, #244]	; (8012f5c <Update_Blink+0xb88>)
 8012e66:	2103      	movs	r1, #3
 8012e68:	f7fa feb4 	bl	800dbd4 <DispStr>
      DispStr(S_X[i]+24, LABLE_Y, Twink, (char*)OT[List[i].Val]);
 8012e6c:	89bb      	ldrh	r3, [r7, #12]
 8012e6e:	4a35      	ldr	r2, [pc, #212]	; (8012f44 <Update_Blink+0xb70>)
 8012e70:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8012e74:	b29b      	uxth	r3, r3
 8012e76:	3318      	adds	r3, #24
 8012e78:	b29b      	uxth	r3, r3
 8012e7a:	b218      	sxth	r0, r3
 8012e7c:	4b30      	ldr	r3, [pc, #192]	; (8012f40 <Update_Blink+0xb6c>)
 8012e7e:	781b      	ldrb	r3, [r3, #0]
 8012e80:	b2da      	uxtb	r2, r3
 8012e82:	89bb      	ldrh	r3, [r7, #12]
 8012e84:	4930      	ldr	r1, [pc, #192]	; (8012f48 <Update_Blink+0xb74>)
 8012e86:	00db      	lsls	r3, r3, #3
 8012e88:	440b      	add	r3, r1
 8012e8a:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8012e8e:	4619      	mov	r1, r3
 8012e90:	460b      	mov	r3, r1
 8012e92:	005b      	lsls	r3, r3, #1
 8012e94:	440b      	add	r3, r1
 8012e96:	005b      	lsls	r3, r3, #1
 8012e98:	4931      	ldr	r1, [pc, #196]	; (8012f60 <Update_Blink+0xb8c>)
 8012e9a:	440b      	add	r3, r1
 8012e9c:	2103      	movs	r1, #3
 8012e9e:	f7fa fe99 	bl	800dbd4 <DispStr>
      break;
 8012ea2:	e18c      	b.n	80131be <Update_Blink+0xdea>

    case FREQ_OUT:
      SetColor(GRY, TCOLOR[SN]);
 8012ea4:	f240 531f 	movw	r3, #1311	; 0x51f
 8012ea8:	4619      	mov	r1, r3
 8012eaa:	f643 10e7 	movw	r0, #14823	; 0x39e7
 8012eae:	f7fa fe79 	bl	800dba4 <SetColor>
      Draw_Circle_D(Twink, S_X[FREQ_OUT]-3, LABLE_Y, 11, 0, 6*9);
 8012eb2:	4b23      	ldr	r3, [pc, #140]	; (8012f40 <Update_Blink+0xb6c>)
 8012eb4:	781b      	ldrb	r3, [r3, #0]
 8012eb6:	b2d8      	uxtb	r0, r3
 8012eb8:	2307      	movs	r3, #7
 8012eba:	b29b      	uxth	r3, r3
 8012ebc:	3b03      	subs	r3, #3
 8012ebe:	b29b      	uxth	r3, r3
 8012ec0:	b219      	sxth	r1, r3
 8012ec2:	2336      	movs	r3, #54	; 0x36
 8012ec4:	9301      	str	r3, [sp, #4]
 8012ec6:	2300      	movs	r3, #0
 8012ec8:	9300      	str	r3, [sp, #0]
 8012eca:	230b      	movs	r3, #11
 8012ecc:	2203      	movs	r2, #3
 8012ece:	f7fa ff57 	bl	800dd80 <Draw_Circle_D>
      DispStr(S_X[i],    LABLE_Y, Twink, "FO: ");
 8012ed2:	89bb      	ldrh	r3, [r7, #12]
 8012ed4:	4a1b      	ldr	r2, [pc, #108]	; (8012f44 <Update_Blink+0xb70>)
 8012ed6:	f932 0013 	ldrsh.w	r0, [r2, r3, lsl #1]
 8012eda:	4b19      	ldr	r3, [pc, #100]	; (8012f40 <Update_Blink+0xb6c>)
 8012edc:	781b      	ldrb	r3, [r3, #0]
 8012ede:	b2da      	uxtb	r2, r3
 8012ee0:	4b1d      	ldr	r3, [pc, #116]	; (8012f58 <Update_Blink+0xb84>)
 8012ee2:	2103      	movs	r1, #3
 8012ee4:	f7fa fe76 	bl	800dbd4 <DispStr>
      DispStr(S_X[i]+24, LABLE_Y, Twink, "     ");
 8012ee8:	89bb      	ldrh	r3, [r7, #12]
 8012eea:	4a16      	ldr	r2, [pc, #88]	; (8012f44 <Update_Blink+0xb70>)
 8012eec:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8012ef0:	b29b      	uxth	r3, r3
 8012ef2:	3318      	adds	r3, #24
 8012ef4:	b29b      	uxth	r3, r3
 8012ef6:	b218      	sxth	r0, r3
 8012ef8:	4b11      	ldr	r3, [pc, #68]	; (8012f40 <Update_Blink+0xb6c>)
 8012efa:	781b      	ldrb	r3, [r3, #0]
 8012efc:	b2da      	uxtb	r2, r3
 8012efe:	4b17      	ldr	r3, [pc, #92]	; (8012f5c <Update_Blink+0xb88>)
 8012f00:	2103      	movs	r1, #3
 8012f02:	f7fa fe67 	bl	800dbd4 <DispStr>
      DispStr(S_X[i]+24, LABLE_Y, Twink, (char*)Q[List[i].Val]);
 8012f06:	89bb      	ldrh	r3, [r7, #12]
 8012f08:	4a0e      	ldr	r2, [pc, #56]	; (8012f44 <Update_Blink+0xb70>)
 8012f0a:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8012f0e:	b29b      	uxth	r3, r3
 8012f10:	3318      	adds	r3, #24
 8012f12:	b29b      	uxth	r3, r3
 8012f14:	b218      	sxth	r0, r3
 8012f16:	4b0a      	ldr	r3, [pc, #40]	; (8012f40 <Update_Blink+0xb6c>)
 8012f18:	781b      	ldrb	r3, [r3, #0]
 8012f1a:	b2da      	uxtb	r2, r3
 8012f1c:	89bb      	ldrh	r3, [r7, #12]
 8012f1e:	490a      	ldr	r1, [pc, #40]	; (8012f48 <Update_Blink+0xb74>)
 8012f20:	00db      	lsls	r3, r3, #3
 8012f22:	440b      	add	r3, r1
 8012f24:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8012f28:	4619      	mov	r1, r3
 8012f2a:	460b      	mov	r3, r1
 8012f2c:	005b      	lsls	r3, r3, #1
 8012f2e:	440b      	add	r3, r1
 8012f30:	005b      	lsls	r3, r3, #1
 8012f32:	490c      	ldr	r1, [pc, #48]	; (8012f64 <Update_Blink+0xb90>)
 8012f34:	440b      	add	r3, r1
 8012f36:	2103      	movs	r1, #3
 8012f38:	f7fa fe4c 	bl	800dbd4 <DispStr>
      break;
 8012f3c:	e13f      	b.n	80131be <Update_Blink+0xdea>
 8012f3e:	bf00      	nop
 8012f40:	2000077c 	.word	0x2000077c
 8012f44:	0800215c 	.word	0x0800215c
 8012f48:	20000298 	.word	0x20000298
 8012f4c:	08001c88 	.word	0x08001c88
 8012f50:	08001cac 	.word	0x08001cac
 8012f54:	20000140 	.word	0x20000140
 8012f58:	080009a0 	.word	0x080009a0
 8012f5c:	08000990 	.word	0x08000990
 8012f60:	08001d50 	.word	0x08001d50
 8012f64:	08001e98 	.word	0x08001e98

    case FREQ_DUT:
      SetColor(GRY, TCOLOR[SN]);
 8012f68:	f240 531f 	movw	r3, #1311	; 0x51f
 8012f6c:	4619      	mov	r1, r3
 8012f6e:	f643 10e7 	movw	r0, #14823	; 0x39e7
 8012f72:	f7fa fe17 	bl	800dba4 <SetColor>
      Value2Str(NumStr, List[i].Val*10, List[i].PTR, 2, UNSIGN);
 8012f76:	89bb      	ldrh	r3, [r7, #12]
 8012f78:	4a96      	ldr	r2, [pc, #600]	; (80131d4 <Update_Blink+0xe00>)
 8012f7a:	00db      	lsls	r3, r3, #3
 8012f7c:	4413      	add	r3, r2
 8012f7e:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8012f82:	461a      	mov	r2, r3
 8012f84:	4613      	mov	r3, r2
 8012f86:	009b      	lsls	r3, r3, #2
 8012f88:	4413      	add	r3, r2
 8012f8a:	005b      	lsls	r3, r3, #1
 8012f8c:	4619      	mov	r1, r3
 8012f8e:	89bb      	ldrh	r3, [r7, #12]
 8012f90:	4a90      	ldr	r2, [pc, #576]	; (80131d4 <Update_Blink+0xe00>)
 8012f92:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 8012f96:	2301      	movs	r3, #1
 8012f98:	9300      	str	r3, [sp, #0]
 8012f9a:	2302      	movs	r3, #2
 8012f9c:	488e      	ldr	r0, [pc, #568]	; (80131d8 <Update_Blink+0xe04>)
 8012f9e:	f7fe fcf1 	bl	8011984 <Value2Str>
      Draw_Circle_D(Twink, S_X[FREQ_DUT]-3, LABLE_Y, 11, 0, 6*9);
 8012fa2:	4b8e      	ldr	r3, [pc, #568]	; (80131dc <Update_Blink+0xe08>)
 8012fa4:	781b      	ldrb	r3, [r3, #0]
 8012fa6:	b2d8      	uxtb	r0, r3
 8012fa8:	2307      	movs	r3, #7
 8012faa:	b29b      	uxth	r3, r3
 8012fac:	3b03      	subs	r3, #3
 8012fae:	b29b      	uxth	r3, r3
 8012fb0:	b219      	sxth	r1, r3
 8012fb2:	2336      	movs	r3, #54	; 0x36
 8012fb4:	9301      	str	r3, [sp, #4]
 8012fb6:	2300      	movs	r3, #0
 8012fb8:	9300      	str	r3, [sp, #0]
 8012fba:	230b      	movs	r3, #11
 8012fbc:	2203      	movs	r2, #3
 8012fbe:	f7fa fedf 	bl	800dd80 <Draw_Circle_D>
      DispStr(S_X[i],    LABLE_Y, Twink, "Duty: ");
 8012fc2:	89bb      	ldrh	r3, [r7, #12]
 8012fc4:	4a86      	ldr	r2, [pc, #536]	; (80131e0 <Update_Blink+0xe0c>)
 8012fc6:	f932 0013 	ldrsh.w	r0, [r2, r3, lsl #1]
 8012fca:	4b84      	ldr	r3, [pc, #528]	; (80131dc <Update_Blink+0xe08>)
 8012fcc:	781b      	ldrb	r3, [r3, #0]
 8012fce:	b2da      	uxtb	r2, r3
 8012fd0:	4b84      	ldr	r3, [pc, #528]	; (80131e4 <Update_Blink+0xe10>)
 8012fd2:	2103      	movs	r1, #3
 8012fd4:	f7fa fdfe 	bl	800dbd4 <DispStr>
      DispStr(S_X[i]+36, LABLE_Y, Twink, "   ");
 8012fd8:	89bb      	ldrh	r3, [r7, #12]
 8012fda:	4a81      	ldr	r2, [pc, #516]	; (80131e0 <Update_Blink+0xe0c>)
 8012fdc:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8012fe0:	b29b      	uxth	r3, r3
 8012fe2:	3324      	adds	r3, #36	; 0x24
 8012fe4:	b29b      	uxth	r3, r3
 8012fe6:	b218      	sxth	r0, r3
 8012fe8:	4b7c      	ldr	r3, [pc, #496]	; (80131dc <Update_Blink+0xe08>)
 8012fea:	781b      	ldrb	r3, [r3, #0]
 8012fec:	b2da      	uxtb	r2, r3
 8012fee:	4b7e      	ldr	r3, [pc, #504]	; (80131e8 <Update_Blink+0xe14>)
 8012ff0:	2103      	movs	r1, #3
 8012ff2:	f7fa fdef 	bl	800dbd4 <DispStr>
      DispStr(S_X[i]+36, LABLE_Y, Twink, (char *)NumStr);
 8012ff6:	89bb      	ldrh	r3, [r7, #12]
 8012ff8:	4a79      	ldr	r2, [pc, #484]	; (80131e0 <Update_Blink+0xe0c>)
 8012ffa:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8012ffe:	b29b      	uxth	r3, r3
 8013000:	3324      	adds	r3, #36	; 0x24
 8013002:	b29b      	uxth	r3, r3
 8013004:	b218      	sxth	r0, r3
 8013006:	4b75      	ldr	r3, [pc, #468]	; (80131dc <Update_Blink+0xe08>)
 8013008:	781b      	ldrb	r3, [r3, #0]
 801300a:	b2da      	uxtb	r2, r3
 801300c:	4b72      	ldr	r3, [pc, #456]	; (80131d8 <Update_Blink+0xe04>)
 801300e:	2103      	movs	r1, #3
 8013010:	f7fa fde0 	bl	800dbd4 <DispStr>
      break;
 8013014:	e0d3      	b.n	80131be <Update_Blink+0xdea>

    case AUTO_CAL:
      if(Twink) ParamTab[P1F] |=  W_HID;
 8013016:	4b71      	ldr	r3, [pc, #452]	; (80131dc <Update_Blink+0xe08>)
 8013018:	781b      	ldrb	r3, [r3, #0]
 801301a:	b2db      	uxtb	r3, r3
 801301c:	2b00      	cmp	r3, #0
 801301e:	d008      	beq.n	8013032 <Update_Blink+0xc5e>
 8013020:	4b72      	ldr	r3, [pc, #456]	; (80131ec <Update_Blink+0xe18>)
 8013022:	f9b3 3000 	ldrsh.w	r3, [r3]
 8013026:	f043 0304 	orr.w	r3, r3, #4
 801302a:	b21a      	sxth	r2, r3
 801302c:	4b6f      	ldr	r3, [pc, #444]	; (80131ec <Update_Blink+0xe18>)
 801302e:	801a      	strh	r2, [r3, #0]
 8013030:	e007      	b.n	8013042 <Update_Blink+0xc6e>
      else      ParamTab[P1F] &= ~W_HID;
 8013032:	4b6e      	ldr	r3, [pc, #440]	; (80131ec <Update_Blink+0xe18>)
 8013034:	f9b3 3000 	ldrsh.w	r3, [r3]
 8013038:	f023 0304 	bic.w	r3, r3, #4
 801303c:	b21a      	sxth	r2, r3
 801303e:	4b6b      	ldr	r3, [pc, #428]	; (80131ec <Update_Blink+0xe18>)
 8013040:	801a      	strh	r2, [r3, #0]

      SetColor(GRY, TCOLOR[ST]);
 8013042:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8013046:	4619      	mov	r1, r3
 8013048:	f643 10e7 	movw	r0, #14823	; 0x39e7
 801304c:	f7fa fdaa 	bl	800dba4 <SetColor>
      Draw_Circle_D(Twink, S_X[i]-3, LABLE_Y, 11, 0, 6*9);
 8013050:	4b62      	ldr	r3, [pc, #392]	; (80131dc <Update_Blink+0xe08>)
 8013052:	781b      	ldrb	r3, [r3, #0]
 8013054:	b2d8      	uxtb	r0, r3
 8013056:	89bb      	ldrh	r3, [r7, #12]
 8013058:	4a61      	ldr	r2, [pc, #388]	; (80131e0 <Update_Blink+0xe0c>)
 801305a:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 801305e:	b29b      	uxth	r3, r3
 8013060:	3b03      	subs	r3, #3
 8013062:	b29b      	uxth	r3, r3
 8013064:	b219      	sxth	r1, r3
 8013066:	2336      	movs	r3, #54	; 0x36
 8013068:	9301      	str	r3, [sp, #4]
 801306a:	2300      	movs	r3, #0
 801306c:	9300      	str	r3, [sp, #0]
 801306e:	230b      	movs	r3, #11
 8013070:	2203      	movs	r2, #3
 8013072:	f7fa fe85 	bl	800dd80 <Draw_Circle_D>
      DispStr( S_X[i]+0, LABLE_Y, Twink+PRN,  "Press:   ");
 8013076:	89bb      	ldrh	r3, [r7, #12]
 8013078:	4a59      	ldr	r2, [pc, #356]	; (80131e0 <Update_Blink+0xe0c>)
 801307a:	f932 0013 	ldrsh.w	r0, [r2, r3, lsl #1]
 801307e:	4b57      	ldr	r3, [pc, #348]	; (80131dc <Update_Blink+0xe08>)
 8013080:	781b      	ldrb	r3, [r3, #0]
 8013082:	b2da      	uxtb	r2, r3
 8013084:	4b5a      	ldr	r3, [pc, #360]	; (80131f0 <Update_Blink+0xe1c>)
 8013086:	2103      	movs	r1, #3
 8013088:	f7fa fda4 	bl	800dbd4 <DispStr>
      DispStr(S_X[i]+40, LABLE_Y, Twink+SYMB, "{|");//������ͣͼ��
 801308c:	89bb      	ldrh	r3, [r7, #12]
 801308e:	4a54      	ldr	r2, [pc, #336]	; (80131e0 <Update_Blink+0xe0c>)
 8013090:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8013094:	b29b      	uxth	r3, r3
 8013096:	3328      	adds	r3, #40	; 0x28
 8013098:	b29b      	uxth	r3, r3
 801309a:	b218      	sxth	r0, r3
 801309c:	4b4f      	ldr	r3, [pc, #316]	; (80131dc <Update_Blink+0xe08>)
 801309e:	781b      	ldrb	r3, [r3, #0]
 80130a0:	b2db      	uxtb	r3, r3
 80130a2:	3310      	adds	r3, #16
 80130a4:	b2da      	uxtb	r2, r3
 80130a6:	4b53      	ldr	r3, [pc, #332]	; (80131f4 <Update_Blink+0xe20>)
 80130a8:	2103      	movs	r1, #3
 80130aa:	f7fa fd93 	bl	800dbd4 <DispStr>
      break;
 80130ae:	e086      	b.n	80131be <Update_Blink+0xdea>

    case RESTORE:
      SetColor(GRY, TCOLOR[ST]);
 80130b0:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 80130b4:	4619      	mov	r1, r3
 80130b6:	f643 10e7 	movw	r0, #14823	; 0x39e7
 80130ba:	f7fa fd73 	bl	800dba4 <SetColor>
      Draw_Circle_D(Twink, S_X[i]-3, LABLE_Y, 11, 0, 6*9);
 80130be:	4b47      	ldr	r3, [pc, #284]	; (80131dc <Update_Blink+0xe08>)
 80130c0:	781b      	ldrb	r3, [r3, #0]
 80130c2:	b2d8      	uxtb	r0, r3
 80130c4:	89bb      	ldrh	r3, [r7, #12]
 80130c6:	4a46      	ldr	r2, [pc, #280]	; (80131e0 <Update_Blink+0xe0c>)
 80130c8:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 80130cc:	b29b      	uxth	r3, r3
 80130ce:	3b03      	subs	r3, #3
 80130d0:	b29b      	uxth	r3, r3
 80130d2:	b219      	sxth	r1, r3
 80130d4:	2336      	movs	r3, #54	; 0x36
 80130d6:	9301      	str	r3, [sp, #4]
 80130d8:	2300      	movs	r3, #0
 80130da:	9300      	str	r3, [sp, #0]
 80130dc:	230b      	movs	r3, #11
 80130de:	2203      	movs	r2, #3
 80130e0:	f7fa fe4e 	bl	800dd80 <Draw_Circle_D>
      DispStr( S_X[i]+0, LABLE_Y, Twink+PRN,  "Press:   ");
 80130e4:	89bb      	ldrh	r3, [r7, #12]
 80130e6:	4a3e      	ldr	r2, [pc, #248]	; (80131e0 <Update_Blink+0xe0c>)
 80130e8:	f932 0013 	ldrsh.w	r0, [r2, r3, lsl #1]
 80130ec:	4b3b      	ldr	r3, [pc, #236]	; (80131dc <Update_Blink+0xe08>)
 80130ee:	781b      	ldrb	r3, [r3, #0]
 80130f0:	b2da      	uxtb	r2, r3
 80130f2:	4b3f      	ldr	r3, [pc, #252]	; (80131f0 <Update_Blink+0xe1c>)
 80130f4:	2103      	movs	r1, #3
 80130f6:	f7fa fd6d 	bl	800dbd4 <DispStr>
      DispStr( S_X[i]+40, LABLE_Y, Twink+SYMB, "{|");//������ͣͼ��
 80130fa:	89bb      	ldrh	r3, [r7, #12]
 80130fc:	4a38      	ldr	r2, [pc, #224]	; (80131e0 <Update_Blink+0xe0c>)
 80130fe:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8013102:	b29b      	uxth	r3, r3
 8013104:	3328      	adds	r3, #40	; 0x28
 8013106:	b29b      	uxth	r3, r3
 8013108:	b218      	sxth	r0, r3
 801310a:	4b34      	ldr	r3, [pc, #208]	; (80131dc <Update_Blink+0xe08>)
 801310c:	781b      	ldrb	r3, [r3, #0]
 801310e:	b2db      	uxtb	r3, r3
 8013110:	3310      	adds	r3, #16
 8013112:	b2da      	uxtb	r2, r3
 8013114:	4b37      	ldr	r3, [pc, #220]	; (80131f4 <Update_Blink+0xe20>)
 8013116:	2103      	movs	r1, #3
 8013118:	f7fa fd5c 	bl	800dbd4 <DispStr>
      break;
 801311c:	e04f      	b.n	80131be <Update_Blink+0xdea>

    case STANDBY:
      SetColor(GRY, TCOLOR[ST]);
 801311e:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8013122:	4619      	mov	r1, r3
 8013124:	f643 10e7 	movw	r0, #14823	; 0x39e7
 8013128:	f7fa fd3c 	bl	800dba4 <SetColor>
      Value2Str(NumStr, List[STANDBY].Val, NSTR[0], 2, UNSIGN);
 801312c:	4b29      	ldr	r3, [pc, #164]	; (80131d4 <Update_Blink+0xe00>)
 801312e:	f9b3 314c 	ldrsh.w	r3, [r3, #332]	; 0x14c
 8013132:	4619      	mov	r1, r3
 8013134:	2301      	movs	r3, #1
 8013136:	9300      	str	r3, [sp, #0]
 8013138:	2302      	movs	r3, #2
 801313a:	4a2f      	ldr	r2, [pc, #188]	; (80131f8 <Update_Blink+0xe24>)
 801313c:	4826      	ldr	r0, [pc, #152]	; (80131d8 <Update_Blink+0xe04>)
 801313e:	f7fe fc21 	bl	8011984 <Value2Str>
      Draw_Circle_D(Twink, S_X[i]-3, LABLE_Y, 11, 0, 6*9);
 8013142:	4b26      	ldr	r3, [pc, #152]	; (80131dc <Update_Blink+0xe08>)
 8013144:	781b      	ldrb	r3, [r3, #0]
 8013146:	b2d8      	uxtb	r0, r3
 8013148:	89bb      	ldrh	r3, [r7, #12]
 801314a:	4a25      	ldr	r2, [pc, #148]	; (80131e0 <Update_Blink+0xe0c>)
 801314c:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8013150:	b29b      	uxth	r3, r3
 8013152:	3b03      	subs	r3, #3
 8013154:	b29b      	uxth	r3, r3
 8013156:	b219      	sxth	r1, r3
 8013158:	2336      	movs	r3, #54	; 0x36
 801315a:	9301      	str	r3, [sp, #4]
 801315c:	2300      	movs	r3, #0
 801315e:	9300      	str	r3, [sp, #0]
 8013160:	230b      	movs	r3, #11
 8013162:	2203      	movs	r2, #3
 8013164:	f7fa fe0c 	bl	800dd80 <Draw_Circle_D>
      DispStr(S_X[i],    LABLE_Y, Twink+PRN,  " ");
 8013168:	89bb      	ldrh	r3, [r7, #12]
 801316a:	4a1d      	ldr	r2, [pc, #116]	; (80131e0 <Update_Blink+0xe0c>)
 801316c:	f932 0013 	ldrsh.w	r0, [r2, r3, lsl #1]
 8013170:	4b1a      	ldr	r3, [pc, #104]	; (80131dc <Update_Blink+0xe08>)
 8013172:	781b      	ldrb	r3, [r3, #0]
 8013174:	b2da      	uxtb	r2, r3
 8013176:	4b21      	ldr	r3, [pc, #132]	; (80131fc <Update_Blink+0xe28>)
 8013178:	2103      	movs	r1, #3
 801317a:	f7fa fd2b 	bl	800dbd4 <DispStr>
      DispStr(S_X[i]+6, LABLE_Y, Twink+PRN,  (char *)NumStr);
 801317e:	89bb      	ldrh	r3, [r7, #12]
 8013180:	4a17      	ldr	r2, [pc, #92]	; (80131e0 <Update_Blink+0xe0c>)
 8013182:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8013186:	b29b      	uxth	r3, r3
 8013188:	3306      	adds	r3, #6
 801318a:	b29b      	uxth	r3, r3
 801318c:	b218      	sxth	r0, r3
 801318e:	4b13      	ldr	r3, [pc, #76]	; (80131dc <Update_Blink+0xe08>)
 8013190:	781b      	ldrb	r3, [r3, #0]
 8013192:	b2da      	uxtb	r2, r3
 8013194:	4b10      	ldr	r3, [pc, #64]	; (80131d8 <Update_Blink+0xe04>)
 8013196:	2103      	movs	r1, #3
 8013198:	f7fa fd1c 	bl	800dbd4 <DispStr>
      DispStr(S_X[i]+30, LABLE_Y, Twink+PRN,  "min ");
 801319c:	89bb      	ldrh	r3, [r7, #12]
 801319e:	4a10      	ldr	r2, [pc, #64]	; (80131e0 <Update_Blink+0xe0c>)
 80131a0:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 80131a4:	b29b      	uxth	r3, r3
 80131a6:	331e      	adds	r3, #30
 80131a8:	b29b      	uxth	r3, r3
 80131aa:	b218      	sxth	r0, r3
 80131ac:	4b0b      	ldr	r3, [pc, #44]	; (80131dc <Update_Blink+0xe08>)
 80131ae:	781b      	ldrb	r3, [r3, #0]
 80131b0:	b2da      	uxtb	r2, r3
 80131b2:	4b13      	ldr	r3, [pc, #76]	; (8013200 <Update_Blink+0xe2c>)
 80131b4:	2103      	movs	r1, #3
 80131b6:	f7fa fd0d 	bl	800dbd4 <DispStr>
      break;
 80131ba:	e000      	b.n	80131be <Update_Blink+0xdea>
      break;
 80131bc:	bf00      	nop

    }
    if(i != V0_POSI)  ParamTab[P1F]   = L_HID ;//0513
 80131be:	89bb      	ldrh	r3, [r7, #12]
 80131c0:	2b03      	cmp	r3, #3
 80131c2:	d002      	beq.n	80131ca <Update_Blink+0xdf6>
 80131c4:	4b09      	ldr	r3, [pc, #36]	; (80131ec <Update_Blink+0xe18>)
 80131c6:	2202      	movs	r2, #2
 80131c8:	801a      	strh	r2, [r3, #0]
  }
}
 80131ca:	bf00      	nop
 80131cc:	3714      	adds	r7, #20
 80131ce:	46bd      	mov	sp, r7
 80131d0:	bd90      	pop	{r4, r7, pc}
 80131d2:	bf00      	nop
 80131d4:	20000298 	.word	0x20000298
 80131d8:	20002838 	.word	0x20002838
 80131dc:	2000077c 	.word	0x2000077c
 80131e0:	0800215c 	.word	0x0800215c
 80131e4:	080009a8 	.word	0x080009a8
 80131e8:	080009b0 	.word	0x080009b0
 80131ec:	20000140 	.word	0x20000140
 80131f0:	080009b4 	.word	0x080009b4
 80131f4:	080009c0 	.word	0x080009c0
 80131f8:	20000548 	.word	0x20000548
 80131fc:	080009c4 	.word	0x080009c4
 8013200:	080009c8 	.word	0x080009c8

08013204 <Update_Detail>:
/*******************************************************************************
 Update_Detail:
*******************************************************************************/
void Update_Detail(void)
{
 8013204:	b590      	push	{r4, r7, lr}
 8013206:	b089      	sub	sp, #36	; 0x24
 8013208:	af02      	add	r7, sp, #8
  long scale = 0;
 801320a:	2300      	movs	r3, #0
 801320c:	60bb      	str	r3, [r7, #8]
  int  Ak = (KgA[KindA+(StateA?1:0)]*4)/GK[GainA];
 801320e:	4ba9      	ldr	r3, [pc, #676]	; (80134b4 <Update_Detail+0x2b0>)
 8013210:	681a      	ldr	r2, [r3, #0]
 8013212:	4ba9      	ldr	r3, [pc, #676]	; (80134b8 <Update_Detail+0x2b4>)
 8013214:	f9b3 3000 	ldrsh.w	r3, [r3]
 8013218:	4619      	mov	r1, r3
 801321a:	4ba8      	ldr	r3, [pc, #672]	; (80134bc <Update_Detail+0x2b8>)
 801321c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8013220:	2b00      	cmp	r3, #0
 8013222:	bf14      	ite	ne
 8013224:	2301      	movne	r3, #1
 8013226:	2300      	moveq	r3, #0
 8013228:	b2db      	uxtb	r3, r3
 801322a:	440b      	add	r3, r1
 801322c:	005b      	lsls	r3, r3, #1
 801322e:	4413      	add	r3, r2
 8013230:	f9b3 3000 	ldrsh.w	r3, [r3]
 8013234:	009b      	lsls	r3, r3, #2
 8013236:	4aa2      	ldr	r2, [pc, #648]	; (80134c0 <Update_Detail+0x2bc>)
 8013238:	f9b2 2000 	ldrsh.w	r2, [r2]
 801323c:	4611      	mov	r1, r2
 801323e:	4aa1      	ldr	r2, [pc, #644]	; (80134c4 <Update_Detail+0x2c0>)
 8013240:	5c52      	ldrb	r2, [r2, r1]
 8013242:	fb93 f3f2 	sdiv	r3, r3, r2
 8013246:	607b      	str	r3, [r7, #4]
  unsigned short i, k = HighT+LowT;
 8013248:	4b9f      	ldr	r3, [pc, #636]	; (80134c8 <Update_Detail+0x2c4>)
 801324a:	681b      	ldr	r3, [r3, #0]
 801324c:	b29a      	uxth	r2, r3
 801324e:	4b9f      	ldr	r3, [pc, #636]	; (80134cc <Update_Detail+0x2c8>)
 8013250:	681b      	ldr	r3, [r3, #0]
 8013252:	b29b      	uxth	r3, r3
 8013254:	4413      	add	r3, r2
 8013256:	807b      	strh	r3, [r7, #2]
  long Tmp = 0;
 8013258:	2300      	movs	r3, #0
 801325a:	613b      	str	r3, [r7, #16]
  short Range = List[Y_RANGES].Val + 10*List[PROBEATT].Val;
 801325c:	4b9c      	ldr	r3, [pc, #624]	; (80134d0 <Update_Detail+0x2cc>)
 801325e:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8013262:	b29a      	uxth	r2, r3
 8013264:	4b9a      	ldr	r3, [pc, #616]	; (80134d0 <Update_Detail+0x2cc>)
 8013266:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 801326a:	b29b      	uxth	r3, r3
 801326c:	4619      	mov	r1, r3
 801326e:	0089      	lsls	r1, r1, #2
 8013270:	440b      	add	r3, r1
 8013272:	005b      	lsls	r3, r3, #1
 8013274:	b29b      	uxth	r3, r3
 8013276:	4413      	add	r3, r2
 8013278:	b29b      	uxth	r3, r3
 801327a:	803b      	strh	r3, [r7, #0]
  unsigned long FTmp;

  for(i=Y_RANGES; i<=STANDBY; i++){
 801327c:	2300      	movs	r3, #0
 801327e:	82fb      	strh	r3, [r7, #22]
 8013280:	f000 bfb3 	b.w	80141ea <Update_Detail+0xfe6>
    if(i==FREQUENC)
 8013284:	8afb      	ldrh	r3, [r7, #22]
 8013286:	2b13      	cmp	r3, #19
 8013288:	d118      	bne.n	80132bc <Update_Detail+0xb8>
    {
      if(Freq_Cnt > 10){
 801328a:	4b92      	ldr	r3, [pc, #584]	; (80134d4 <Update_Detail+0x2d0>)
 801328c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8013290:	2b0a      	cmp	r3, #10
 8013292:	dd0a      	ble.n	80132aa <Update_Detail+0xa6>
        Freq_Cnt = 0;
 8013294:	4b8f      	ldr	r3, [pc, #572]	; (80134d4 <Update_Detail+0x2d0>)
 8013296:	2200      	movs	r2, #0
 8013298:	801a      	strh	r2, [r3, #0]
        Freq_Flag |= UPD;
 801329a:	4b8f      	ldr	r3, [pc, #572]	; (80134d8 <Update_Detail+0x2d4>)
 801329c:	781b      	ldrb	r3, [r3, #0]
 801329e:	f043 0320 	orr.w	r3, r3, #32
 80132a2:	b2da      	uxtb	r2, r3
 80132a4:	4b8c      	ldr	r3, [pc, #560]	; (80134d8 <Update_Detail+0x2d4>)
 80132a6:	701a      	strb	r2, [r3, #0]
 80132a8:	e008      	b.n	80132bc <Update_Detail+0xb8>
      }
      else Freq_Cnt++;
 80132aa:	4b8a      	ldr	r3, [pc, #552]	; (80134d4 <Update_Detail+0x2d0>)
 80132ac:	f9b3 3000 	ldrsh.w	r3, [r3]
 80132b0:	b29b      	uxth	r3, r3
 80132b2:	3301      	adds	r3, #1
 80132b4:	b29b      	uxth	r3, r3
 80132b6:	b21a      	sxth	r2, r3
 80132b8:	4b86      	ldr	r3, [pc, #536]	; (80134d4 <Update_Detail+0x2d0>)
 80132ba:	801a      	strh	r2, [r3, #0]
    }

    if(List[i].Flg & UPD){
 80132bc:	8afb      	ldrh	r3, [r7, #22]
 80132be:	4a84      	ldr	r2, [pc, #528]	; (80134d0 <Update_Detail+0x2cc>)
 80132c0:	00db      	lsls	r3, r3, #3
 80132c2:	4413      	add	r3, r2
 80132c4:	799b      	ldrb	r3, [r3, #6]
 80132c6:	f003 0320 	and.w	r3, r3, #32
 80132ca:	2b00      	cmp	r3, #0
 80132cc:	f000 878a 	beq.w	80141e4 <Update_Detail+0xfe0>
      List[i].Flg &= ~UPD;
 80132d0:	8afb      	ldrh	r3, [r7, #22]
 80132d2:	4a7f      	ldr	r2, [pc, #508]	; (80134d0 <Update_Detail+0x2cc>)
 80132d4:	00db      	lsls	r3, r3, #3
 80132d6:	4413      	add	r3, r2
 80132d8:	799a      	ldrb	r2, [r3, #6]
 80132da:	8afb      	ldrh	r3, [r7, #22]
 80132dc:	f022 0220 	bic.w	r2, r2, #32
 80132e0:	b2d1      	uxtb	r1, r2
 80132e2:	4a7b      	ldr	r2, [pc, #492]	; (80134d0 <Update_Detail+0x2cc>)
 80132e4:	00db      	lsls	r3, r3, #3
 80132e6:	4413      	add	r3, r2
 80132e8:	460a      	mov	r2, r1
 80132ea:	719a      	strb	r2, [r3, #6]
      switch (i){
 80132ec:	8afb      	ldrh	r3, [r7, #22]
 80132ee:	2b29      	cmp	r3, #41	; 0x29
 80132f0:	f200 8739 	bhi.w	8014166 <Update_Detail+0xf62>
 80132f4:	a201      	add	r2, pc, #4	; (adr r2, 80132fc <Update_Detail+0xf8>)
 80132f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80132fa:	bf00      	nop
 80132fc:	080133a5 	.word	0x080133a5
 8013300:	080133a5 	.word	0x080133a5
 8013304:	080133a5 	.word	0x080133a5
 8013308:	080133a5 	.word	0x080133a5
 801330c:	080133a5 	.word	0x080133a5
 8013310:	080133a5 	.word	0x080133a5
 8013314:	080133a5 	.word	0x080133a5
 8013318:	08013bad 	.word	0x08013bad
 801331c:	08013bad 	.word	0x08013bad
 8013320:	08013bad 	.word	0x08013bad
 8013324:	08013bad 	.word	0x08013bad
 8013328:	08013bad 	.word	0x08013bad
 801332c:	08013bad 	.word	0x08013bad
 8013330:	08013a43 	.word	0x08013a43
 8013334:	08013a43 	.word	0x08013a43
 8013338:	08013a43 	.word	0x08013a43
 801333c:	08013a43 	.word	0x08013a43
 8013340:	08013a43 	.word	0x08013a43
 8013344:	08013a43 	.word	0x08013a43
 8013348:	08013e05 	.word	0x08013e05
 801334c:	08013e79 	.word	0x08013e79
 8013350:	08013e99 	.word	0x08013e99
 8013354:	08013f9f 	.word	0x08013f9f
 8013358:	08013f0f 	.word	0x08013f0f
 801335c:	08014025 	.word	0x08014025
 8013360:	080140ab 	.word	0x080140ab
 8013364:	08013927 	.word	0x08013927
 8013368:	08013927 	.word	0x08013927
 801336c:	080139bf 	.word	0x080139bf
 8013370:	080136a5 	.word	0x080136a5
 8013374:	080136a5 	.word	0x080136a5
 8013378:	080136a5 	.word	0x080136a5
 801337c:	080136a5 	.word	0x080136a5
 8013380:	080136a5 	.word	0x080136a5
 8013384:	080136a5 	.word	0x080136a5
 8013388:	080136a5 	.word	0x080136a5
 801338c:	08013755 	.word	0x08013755
 8013390:	08013841 	.word	0x08013841
 8013394:	080138e3 	.word	0x080138e3
 8013398:	08014167 	.word	0x08014167
 801339c:	08014167 	.word	0x08014167
 80133a0:	08014167 	.word	0x08014167
      case COUPLING:   // ˢ����ʾ���ģʽ״̬
      case V0_POSI:    // ˢ����ʾ��ֱƫ��λ��
      case V1_POSI:    // ˢ����ʾ��λ�α�λ��
      case V2_POSI:    // ˢ����ʾ��λ�α�λ��
      case YN_TYPE:    // ˢ����ʾ�α���ʽ
        SetColor(GRY, TCOLOR[YN]);
 80133a4:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 80133a8:	4619      	mov	r1, r3
 80133aa:	f643 10e7 	movw	r0, #14823	; 0x39e7
 80133ae:	f7fa fbf9 	bl	800dba4 <SetColor>
        if(i == Y_RANGES || i == COUPLING||i == PROBEATT)
 80133b2:	8afb      	ldrh	r3, [r7, #22]
 80133b4:	2b00      	cmp	r3, #0
 80133b6:	d005      	beq.n	80133c4 <Update_Detail+0x1c0>
 80133b8:	8afb      	ldrh	r3, [r7, #22]
 80133ba:	2b01      	cmp	r3, #1
 80133bc:	d002      	beq.n	80133c4 <Update_Detail+0x1c0>
 80133be:	8afb      	ldrh	r3, [r7, #22]
 80133c0:	2b02      	cmp	r3, #2
 80133c2:	d138      	bne.n	8013436 <Update_Detail+0x232>
        {
      Draw_Circle_D(INV, S_X[Y_RANGES]-3, TITLE_Y_POS, 11, 0, 6*7);
 80133c4:	232f      	movs	r3, #47	; 0x2f
 80133c6:	b29b      	uxth	r3, r3
 80133c8:	3b03      	subs	r3, #3
 80133ca:	b29b      	uxth	r3, r3
 80133cc:	b219      	sxth	r1, r3
 80133ce:	232a      	movs	r3, #42	; 0x2a
 80133d0:	9301      	str	r3, [sp, #4]
 80133d2:	2300      	movs	r3, #0
 80133d4:	9300      	str	r3, [sp, #0]
 80133d6:	230b      	movs	r3, #11
 80133d8:	22e1      	movs	r2, #225	; 0xe1
 80133da:	2001      	movs	r0, #1
 80133dc:	f7fa fcd0 	bl	800dd80 <Draw_Circle_D>
      DispStr(S_X[Y_RANGES], TITLE_Y_POS, INV,      (List[Y_RANGES].PTR +(Range)*6));
 80133e0:	202f      	movs	r0, #47	; 0x2f
 80133e2:	4b3b      	ldr	r3, [pc, #236]	; (80134d0 <Update_Detail+0x2cc>)
 80133e4:	6819      	ldr	r1, [r3, #0]
 80133e6:	f9b7 2000 	ldrsh.w	r2, [r7]
 80133ea:	4613      	mov	r3, r2
 80133ec:	005b      	lsls	r3, r3, #1
 80133ee:	4413      	add	r3, r2
 80133f0:	005b      	lsls	r3, r3, #1
 80133f2:	440b      	add	r3, r1
 80133f4:	2201      	movs	r2, #1
 80133f6:	21e1      	movs	r1, #225	; 0xe1
 80133f8:	f7fa fbec 	bl	800dbd4 <DispStr>
      DispStr(S_X[COUPLING], TITLE_Y_POS, INV,      (List[COUPLING].PTR +(List[COUPLING].Val)*6));
 80133fc:	2047      	movs	r0, #71	; 0x47
 80133fe:	4b34      	ldr	r3, [pc, #208]	; (80134d0 <Update_Detail+0x2cc>)
 8013400:	689a      	ldr	r2, [r3, #8]
 8013402:	4b33      	ldr	r3, [pc, #204]	; (80134d0 <Update_Detail+0x2cc>)
 8013404:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8013408:	4619      	mov	r1, r3
 801340a:	460b      	mov	r3, r1
 801340c:	005b      	lsls	r3, r3, #1
 801340e:	440b      	add	r3, r1
 8013410:	005b      	lsls	r3, r3, #1
 8013412:	4413      	add	r3, r2
 8013414:	2201      	movs	r2, #1
 8013416:	21e1      	movs	r1, #225	; 0xe1
 8013418:	f7fa fbdc 	bl	800dbd4 <DispStr>
      DispStr10x14(S_X[PROBEATT], TITLE_Y_POS, PRN+SYMB,(List[PROBEATT].Val?("A"):("B")));
 801341c:	2020      	movs	r0, #32
 801341e:	4b2c      	ldr	r3, [pc, #176]	; (80134d0 <Update_Detail+0x2cc>)
 8013420:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8013424:	2b00      	cmp	r3, #0
 8013426:	d001      	beq.n	801342c <Update_Detail+0x228>
 8013428:	4b2c      	ldr	r3, [pc, #176]	; (80134dc <Update_Detail+0x2d8>)
 801342a:	e000      	b.n	801342e <Update_Detail+0x22a>
 801342c:	4b2c      	ldr	r3, [pc, #176]	; (80134e0 <Update_Detail+0x2dc>)
 801342e:	2210      	movs	r2, #16
 8013430:	21e1      	movs	r1, #225	; 0xe1
 8013432:	f7fa fe37 	bl	800e0a4 <DispStr10x14>
        }
        ParamTab[P1x2] = 2*((List[V0_POSI].Val+1));
 8013436:	4b26      	ldr	r3, [pc, #152]	; (80134d0 <Update_Detail+0x2cc>)
 8013438:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 801343c:	3301      	adds	r3, #1
 801343e:	b29b      	uxth	r3, r3
 8013440:	005b      	lsls	r3, r3, #1
 8013442:	b29b      	uxth	r3, r3
 8013444:	b21a      	sxth	r2, r3
 8013446:	4b27      	ldr	r3, [pc, #156]	; (80134e4 <Update_Detail+0x2e0>)
 8013448:	829a      	strh	r2, [r3, #20]
        ParamTab[VTx2] = ParamTab[P1x2]+ 2*(List[THRESHOLD].Val+1);
 801344a:	4b26      	ldr	r3, [pc, #152]	; (80134e4 <Update_Detail+0x2e0>)
 801344c:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8013450:	b29a      	uxth	r2, r3
 8013452:	4b1f      	ldr	r3, [pc, #124]	; (80134d0 <Update_Detail+0x2cc>)
 8013454:	f9b3 3084 	ldrsh.w	r3, [r3, #132]	; 0x84
 8013458:	3301      	adds	r3, #1
 801345a:	b29b      	uxth	r3, r3
 801345c:	005b      	lsls	r3, r3, #1
 801345e:	b29b      	uxth	r3, r3
 8013460:	4413      	add	r3, r2
 8013462:	b29b      	uxth	r3, r3
 8013464:	b21a      	sxth	r2, r3
 8013466:	4b1f      	ldr	r3, [pc, #124]	; (80134e4 <Update_Detail+0x2e0>)
 8013468:	839a      	strh	r2, [r3, #28]
        ParamTab[V1x2] = 2*(List[V1_POSI].Val+1);
 801346a:	4b19      	ldr	r3, [pc, #100]	; (80134d0 <Update_Detail+0x2cc>)
 801346c:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	; 0x24
 8013470:	3301      	adds	r3, #1
 8013472:	b29b      	uxth	r3, r3
 8013474:	005b      	lsls	r3, r3, #1
 8013476:	b29b      	uxth	r3, r3
 8013478:	b21a      	sxth	r2, r3
 801347a:	4b1a      	ldr	r3, [pc, #104]	; (80134e4 <Update_Detail+0x2e0>)
 801347c:	83da      	strh	r2, [r3, #30]
        ParamTab[V2x2] = 2*(List[V2_POSI].Val+1);
 801347e:	4b14      	ldr	r3, [pc, #80]	; (80134d0 <Update_Detail+0x2cc>)
 8013480:	f9b3 302c 	ldrsh.w	r3, [r3, #44]	; 0x2c
 8013484:	3301      	adds	r3, #1
 8013486:	b29b      	uxth	r3, r3
 8013488:	005b      	lsls	r3, r3, #1
 801348a:	b29b      	uxth	r3, r3
 801348c:	b21a      	sxth	r2, r3
 801348e:	4b15      	ldr	r3, [pc, #84]	; (80134e4 <Update_Detail+0x2e0>)
 8013490:	841a      	strh	r2, [r3, #32]
        ParamTab[V1F]  = (List[YN_TYPE].Val)? L_HID : SHOW;
 8013492:	4b0f      	ldr	r3, [pc, #60]	; (80134d0 <Update_Detail+0x2cc>)
 8013494:	f9b3 3034 	ldrsh.w	r3, [r3, #52]	; 0x34
 8013498:	2b00      	cmp	r3, #0
 801349a:	d001      	beq.n	80134a0 <Update_Detail+0x29c>
 801349c:	2202      	movs	r2, #2
 801349e:	e000      	b.n	80134a2 <Update_Detail+0x29e>
 80134a0:	2200      	movs	r2, #0
 80134a2:	4b10      	ldr	r3, [pc, #64]	; (80134e4 <Update_Detail+0x2e0>)
 80134a4:	815a      	strh	r2, [r3, #10]
        ParamTab[V2F]  = (List[YN_TYPE].Val)? L_HID : SHOW;
 80134a6:	4b0a      	ldr	r3, [pc, #40]	; (80134d0 <Update_Detail+0x2cc>)
 80134a8:	f9b3 3034 	ldrsh.w	r3, [r3, #52]	; 0x34
 80134ac:	2b00      	cmp	r3, #0
 80134ae:	d01b      	beq.n	80134e8 <Update_Detail+0x2e4>
 80134b0:	2202      	movs	r2, #2
 80134b2:	e01a      	b.n	80134ea <Update_Detail+0x2e6>
 80134b4:	2000057c 	.word	0x2000057c
 80134b8:	20006882 	.word	0x20006882
 80134bc:	2000285e 	.word	0x2000285e
 80134c0:	20002846 	.word	0x20002846
 80134c4:	20000560 	.word	0x20000560
 80134c8:	20006874 	.word	0x20006874
 80134cc:	20006888 	.word	0x20006888
 80134d0:	20000298 	.word	0x20000298
 80134d4:	200007a4 	.word	0x200007a4
 80134d8:	200001cc 	.word	0x200001cc
 80134dc:	08000958 	.word	0x08000958
 80134e0:	0800095c 	.word	0x0800095c
 80134e4:	20000140 	.word	0x20000140
 80134e8:	2200      	movs	r2, #0
 80134ea:	4ba6      	ldr	r3, [pc, #664]	; (8013784 <Update_Detail+0x580>)
 80134ec:	819a      	strh	r2, [r3, #12]

        Tmp  =(ParamTab[V1x2]- ParamTab[V2x2])/2;         // ˢ����ʾV2-V1��ֵ
 80134ee:	4ba5      	ldr	r3, [pc, #660]	; (8013784 <Update_Detail+0x580>)
 80134f0:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 80134f4:	461a      	mov	r2, r3
 80134f6:	4ba3      	ldr	r3, [pc, #652]	; (8013784 <Update_Detail+0x580>)
 80134f8:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 80134fc:	1ad3      	subs	r3, r2, r3
 80134fe:	0fda      	lsrs	r2, r3, #31
 8013500:	4413      	add	r3, r2
 8013502:	105b      	asrs	r3, r3, #1
 8013504:	613b      	str	r3, [r7, #16]
        Tmp *= X_SCALE[Range]* Exp(V_SCALE[Range]);
 8013506:	f9b7 3000 	ldrsh.w	r3, [r7]
 801350a:	4a9f      	ldr	r2, [pc, #636]	; (8013788 <Update_Detail+0x584>)
 801350c:	5cd3      	ldrb	r3, [r2, r3]
 801350e:	461c      	mov	r4, r3
 8013510:	f9b7 3000 	ldrsh.w	r3, [r7]
 8013514:	4a9d      	ldr	r2, [pc, #628]	; (801378c <Update_Detail+0x588>)
 8013516:	5cd3      	ldrb	r3, [r2, r3]
 8013518:	4618      	mov	r0, r3
 801351a:	f7fe fb2f 	bl	8011b7c <Exp>
 801351e:	4603      	mov	r3, r0
 8013520:	fb03 f204 	mul.w	r2, r3, r4
 8013524:	693b      	ldr	r3, [r7, #16]
 8013526:	fb02 f303 	mul.w	r3, r2, r3
 801352a:	613b      	str	r3, [r7, #16]
        Value2Str(NumStr, Tmp, V[0], 3, UNSIGN);
 801352c:	2301      	movs	r3, #1
 801352e:	9300      	str	r3, [sp, #0]
 8013530:	2303      	movs	r3, #3
 8013532:	4a97      	ldr	r2, [pc, #604]	; (8013790 <Update_Detail+0x58c>)
 8013534:	6939      	ldr	r1, [r7, #16]
 8013536:	4897      	ldr	r0, [pc, #604]	; (8013794 <Update_Detail+0x590>)
 8013538:	f7fe fa24 	bl	8011984 <Value2Str>
        Draw_Circle_D(INV, S_X[V1_POSI]-3, LABLE_Y, 11, 0, 6*9);
 801353c:	2307      	movs	r3, #7
 801353e:	b29b      	uxth	r3, r3
 8013540:	3b03      	subs	r3, #3
 8013542:	b29b      	uxth	r3, r3
 8013544:	b219      	sxth	r1, r3
 8013546:	2336      	movs	r3, #54	; 0x36
 8013548:	9301      	str	r3, [sp, #4]
 801354a:	2300      	movs	r3, #0
 801354c:	9300      	str	r3, [sp, #0]
 801354e:	230b      	movs	r3, #11
 8013550:	2203      	movs	r2, #3
 8013552:	2001      	movs	r0, #1
 8013554:	f7fa fc14 	bl	800dd80 <Draw_Circle_D>
        DispStr(S_X[V1_POSI]+0*6, LABLE_Y, INV+SYMB, "]");
 8013558:	2007      	movs	r0, #7
 801355a:	4b8f      	ldr	r3, [pc, #572]	; (8013798 <Update_Detail+0x594>)
 801355c:	2211      	movs	r2, #17
 801355e:	2103      	movs	r1, #3
 8013560:	f7fa fb38 	bl	800dbd4 <DispStr>
        DispStr(S_X[V1_POSI]+1*6, LABLE_Y, INV,      "V:      ");
 8013564:	2307      	movs	r3, #7
 8013566:	b29b      	uxth	r3, r3
 8013568:	3306      	adds	r3, #6
 801356a:	b29b      	uxth	r3, r3
 801356c:	b218      	sxth	r0, r3
 801356e:	4b8b      	ldr	r3, [pc, #556]	; (801379c <Update_Detail+0x598>)
 8013570:	2201      	movs	r2, #1
 8013572:	2103      	movs	r1, #3
 8013574:	f7fa fb2e 	bl	800dbd4 <DispStr>
        DispStr(S_X[V1_POSI]+7*6, LABLE_Y, INV,  "  ");
 8013578:	2307      	movs	r3, #7
 801357a:	b29b      	uxth	r3, r3
 801357c:	332a      	adds	r3, #42	; 0x2a
 801357e:	b29b      	uxth	r3, r3
 8013580:	b218      	sxth	r0, r3
 8013582:	4b87      	ldr	r3, [pc, #540]	; (80137a0 <Update_Detail+0x59c>)
 8013584:	2201      	movs	r2, #1
 8013586:	2103      	movs	r1, #3
 8013588:	f7fa fb24 	bl	800dbd4 <DispStr>
        DispStr(S_X[V1_POSI]+3*6, LABLE_Y, INV,  (char *)NumStr);
 801358c:	2307      	movs	r3, #7
 801358e:	b29b      	uxth	r3, r3
 8013590:	3312      	adds	r3, #18
 8013592:	b29b      	uxth	r3, r3
 8013594:	b218      	sxth	r0, r3
 8013596:	4b7f      	ldr	r3, [pc, #508]	; (8013794 <Update_Detail+0x590>)
 8013598:	2201      	movs	r2, #1
 801359a:	2103      	movs	r1, #3
 801359c:	f7fa fb1a 	bl	800dbd4 <DispStr>

        SetColor(GRY, TCOLOR[TRG]);
 80135a0:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 80135a4:	4619      	mov	r1, r3
 80135a6:	f643 10e7 	movw	r0, #14823	; 0x39e7
 80135aa:	f7fa fafb 	bl	800dba4 <SetColor>
        Tmp  = List[SENSITIVE].Val;                       // ˢ����ʾ�����ز�ֵ
 80135ae:	4b7d      	ldr	r3, [pc, #500]	; (80137a4 <Update_Detail+0x5a0>)
 80135b0:	f9b3 308c 	ldrsh.w	r3, [r3, #140]	; 0x8c
 80135b4:	613b      	str	r3, [r7, #16]
        Tmp *= X_SCALE[Range]* Exp(V_SCALE[Range]);
 80135b6:	f9b7 3000 	ldrsh.w	r3, [r7]
 80135ba:	4a73      	ldr	r2, [pc, #460]	; (8013788 <Update_Detail+0x584>)
 80135bc:	5cd3      	ldrb	r3, [r2, r3]
 80135be:	461c      	mov	r4, r3
 80135c0:	f9b7 3000 	ldrsh.w	r3, [r7]
 80135c4:	4a71      	ldr	r2, [pc, #452]	; (801378c <Update_Detail+0x588>)
 80135c6:	5cd3      	ldrb	r3, [r2, r3]
 80135c8:	4618      	mov	r0, r3
 80135ca:	f7fe fad7 	bl	8011b7c <Exp>
 80135ce:	4603      	mov	r3, r0
 80135d0:	fb03 f204 	mul.w	r2, r3, r4
 80135d4:	693b      	ldr	r3, [r7, #16]
 80135d6:	fb02 f303 	mul.w	r3, r2, r3
 80135da:	613b      	str	r3, [r7, #16]
        Value2Str(NumStr, Tmp,V[0], 2, UNSIGN);
 80135dc:	2301      	movs	r3, #1
 80135de:	9300      	str	r3, [sp, #0]
 80135e0:	2302      	movs	r3, #2
 80135e2:	4a6b      	ldr	r2, [pc, #428]	; (8013790 <Update_Detail+0x58c>)
 80135e4:	6939      	ldr	r1, [r7, #16]
 80135e6:	486b      	ldr	r0, [pc, #428]	; (8013794 <Update_Detail+0x590>)
 80135e8:	f7fe f9cc 	bl	8011984 <Value2Str>
        DispStr(S_X[SENSITIVE]+9, TITLE_Y_POS, INV,  "     ");
 80135ec:	23e7      	movs	r3, #231	; 0xe7
 80135ee:	b29b      	uxth	r3, r3
 80135f0:	3309      	adds	r3, #9
 80135f2:	b29b      	uxth	r3, r3
 80135f4:	b218      	sxth	r0, r3
 80135f6:	4b6c      	ldr	r3, [pc, #432]	; (80137a8 <Update_Detail+0x5a4>)
 80135f8:	2201      	movs	r2, #1
 80135fa:	21e1      	movs	r1, #225	; 0xe1
 80135fc:	f7fa faea 	bl	800dbd4 <DispStr>
        DispStr(S_X[SENSITIVE]+9, TITLE_Y_POS, INV,  (char *)NumStr);
 8013600:	23e7      	movs	r3, #231	; 0xe7
 8013602:	b29b      	uxth	r3, r3
 8013604:	3309      	adds	r3, #9
 8013606:	b29b      	uxth	r3, r3
 8013608:	b218      	sxth	r0, r3
 801360a:	4b62      	ldr	r3, [pc, #392]	; (8013794 <Update_Detail+0x590>)
 801360c:	2201      	movs	r2, #1
 801360e:	21e1      	movs	r1, #225	; 0xe1
 8013610:	f7fa fae0 	bl	800dbd4 <DispStr>
        DispStr10x14(S_X[SENSITIVE], TITLE_Y_POS, INV+SYMB,"E");
 8013614:	20e7      	movs	r0, #231	; 0xe7
 8013616:	4b65      	ldr	r3, [pc, #404]	; (80137ac <Update_Detail+0x5a8>)
 8013618:	2211      	movs	r2, #17
 801361a:	21e1      	movs	r1, #225	; 0xe1
 801361c:	f7fa fd42 	bl	800e0a4 <DispStr10x14>
        GainA  = (char)List[Y_RANGES].Val;
 8013620:	4b60      	ldr	r3, [pc, #384]	; (80137a4 <Update_Detail+0x5a0>)
 8013622:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8013626:	b2db      	uxtb	r3, r3
 8013628:	b21a      	sxth	r2, r3
 801362a:	4b61      	ldr	r3, [pc, #388]	; (80137b0 <Update_Detail+0x5ac>)
 801362c:	801a      	strh	r2, [r3, #0]

        if((char)List[Y_RANGES].Val>1)
 801362e:	4b5d      	ldr	r3, [pc, #372]	; (80137a4 <Update_Detail+0x5a0>)
 8013630:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8013634:	b2db      	uxtb	r3, r3
 8013636:	2b01      	cmp	r3, #1
 8013638:	d903      	bls.n	8013642 <Update_Detail+0x43e>
          KindA  = HV;
 801363a:	4b5e      	ldr	r3, [pc, #376]	; (80137b4 <Update_Detail+0x5b0>)
 801363c:	2201      	movs	r2, #1
 801363e:	801a      	strh	r2, [r3, #0]
 8013640:	e002      	b.n	8013648 <Update_Detail+0x444>
        else
          KindA  = LV;                //Ch1ѡ���ѹ���ѹ����
 8013642:	4b5c      	ldr	r3, [pc, #368]	; (80137b4 <Update_Detail+0x5b0>)
 8013644:	2200      	movs	r2, #0
 8013646:	801a      	strh	r2, [r3, #0]
        StateA =  ((char)List[Y_RANGES].Val>5)?ACT: GND;
 8013648:	4b56      	ldr	r3, [pc, #344]	; (80137a4 <Update_Detail+0x5a0>)
 801364a:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801364e:	b2db      	uxtb	r3, r3
 8013650:	2b05      	cmp	r3, #5
 8013652:	d901      	bls.n	8013658 <Update_Detail+0x454>
 8013654:	2204      	movs	r2, #4
 8013656:	e000      	b.n	801365a <Update_Detail+0x456>
 8013658:	2200      	movs	r2, #0
 801365a:	4b57      	ldr	r3, [pc, #348]	; (80137b8 <Update_Detail+0x5b4>)
 801365c:	801a      	strh	r2, [r3, #0]

        CouplA = (List[COUPLING].Val)? AC : DC;                      // AC);  //AC/DC��Ϸ�ʽ
 801365e:	4b51      	ldr	r3, [pc, #324]	; (80137a4 <Update_Detail+0x5a0>)
 8013660:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8013664:	2b00      	cmp	r3, #0
 8013666:	d001      	beq.n	801366c <Update_Detail+0x468>
 8013668:	2200      	movs	r2, #0
 801366a:	e000      	b.n	801366e <Update_Detail+0x46a>
 801366c:	2202      	movs	r2, #2
 801366e:	4b53      	ldr	r3, [pc, #332]	; (80137bc <Update_Detail+0x5b8>)
 8013670:	801a      	strh	r2, [r3, #0]
        BIOS_Ctrl(AiRANGE, KindA+CouplA+StateA);             //Ch1״̬ˢ��
 8013672:	4b50      	ldr	r3, [pc, #320]	; (80137b4 <Update_Detail+0x5b0>)
 8013674:	f9b3 3000 	ldrsh.w	r3, [r3]
 8013678:	461a      	mov	r2, r3
 801367a:	4b50      	ldr	r3, [pc, #320]	; (80137bc <Update_Detail+0x5b8>)
 801367c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8013680:	4413      	add	r3, r2
 8013682:	4a4d      	ldr	r2, [pc, #308]	; (80137b8 <Update_Detail+0x5b4>)
 8013684:	f9b2 2000 	ldrsh.w	r2, [r2]
 8013688:	4413      	add	r3, r2
 801368a:	4619      	mov	r1, r3
 801368c:	2007      	movs	r0, #7
 801368e:	f7f8 fe6d 	bl	800c36c <BIOS_Ctrl>
        AiPosi(List[V0_POSI].Val);                        //Ch1Ӳ����Ӧλ��
 8013692:	4b44      	ldr	r3, [pc, #272]	; (80137a4 <Update_Detail+0x5a0>)
 8013694:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 8013698:	b2db      	uxtb	r3, r3
 801369a:	4618      	mov	r0, r3
 801369c:	f001 fc5c 	bl	8014f58 <AiPosi>
        break;
 80136a0:	f000 bd61 	b.w	8014166 <Update_Detail+0xf62>
      case SAVE_BUF:
      case SAVE_CSV:
      case SAVE_SVG:
      case LOAD_DAT: //��ʾ��ѡ��Ҫ��ȡ���ļ����
      case LOAD_BUF:
        SetColor(GRY, TCOLOR[FN]);
 80136a4:	f64f 4310 	movw	r3, #64528	; 0xfc10
 80136a8:	4619      	mov	r1, r3
 80136aa:	f643 10e7 	movw	r0, #14823	; 0x39e7
 80136ae:	f7fa fa79 	bl	800dba4 <SetColor>
        u8ToDec3(NumStr, List[i].Val);
 80136b2:	8afb      	ldrh	r3, [r7, #22]
 80136b4:	4a3b      	ldr	r2, [pc, #236]	; (80137a4 <Update_Detail+0x5a0>)
 80136b6:	00db      	lsls	r3, r3, #3
 80136b8:	4413      	add	r3, r2
 80136ba:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80136be:	b2db      	uxtb	r3, r3
 80136c0:	4619      	mov	r1, r3
 80136c2:	4834      	ldr	r0, [pc, #208]	; (8013794 <Update_Detail+0x590>)
 80136c4:	f7fe f8f6 	bl	80118b4 <u8ToDec3>
        Draw_Circle_D(INV, S_X[i]-3, LABLE_Y, 11, 0, 6*11);
 80136c8:	8afb      	ldrh	r3, [r7, #22]
 80136ca:	4a3d      	ldr	r2, [pc, #244]	; (80137c0 <Update_Detail+0x5bc>)
 80136cc:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 80136d0:	b29b      	uxth	r3, r3
 80136d2:	3b03      	subs	r3, #3
 80136d4:	b29b      	uxth	r3, r3
 80136d6:	b219      	sxth	r1, r3
 80136d8:	2342      	movs	r3, #66	; 0x42
 80136da:	9301      	str	r3, [sp, #4]
 80136dc:	2300      	movs	r3, #0
 80136de:	9300      	str	r3, [sp, #0]
 80136e0:	230b      	movs	r3, #11
 80136e2:	2203      	movs	r2, #3
 80136e4:	2001      	movs	r0, #1
 80136e6:	f7fa fb4b 	bl	800dd80 <Draw_Circle_D>
        DispStr(S_X[i],    LABLE_Y, INV, ((i > SAVE_SVG)? "Load" : "Save"));//0513
 80136ea:	8afb      	ldrh	r3, [r7, #22]
 80136ec:	4a34      	ldr	r2, [pc, #208]	; (80137c0 <Update_Detail+0x5bc>)
 80136ee:	f932 0013 	ldrsh.w	r0, [r2, r3, lsl #1]
 80136f2:	8afb      	ldrh	r3, [r7, #22]
 80136f4:	2b21      	cmp	r3, #33	; 0x21
 80136f6:	d901      	bls.n	80136fc <Update_Detail+0x4f8>
 80136f8:	4b32      	ldr	r3, [pc, #200]	; (80137c4 <Update_Detail+0x5c0>)
 80136fa:	e000      	b.n	80136fe <Update_Detail+0x4fa>
 80136fc:	4b32      	ldr	r3, [pc, #200]	; (80137c8 <Update_Detail+0x5c4>)
 80136fe:	2201      	movs	r2, #1
 8013700:	2103      	movs	r1, #3
 8013702:	f7fa fa67 	bl	800dbd4 <DispStr>
        DispStr(S_X[i]+24, LABLE_Y, INV, (char *)NumStr);
 8013706:	8afb      	ldrh	r3, [r7, #22]
 8013708:	4a2d      	ldr	r2, [pc, #180]	; (80137c0 <Update_Detail+0x5bc>)
 801370a:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 801370e:	b29b      	uxth	r3, r3
 8013710:	3318      	adds	r3, #24
 8013712:	b29b      	uxth	r3, r3
 8013714:	b218      	sxth	r0, r3
 8013716:	4b1f      	ldr	r3, [pc, #124]	; (8013794 <Update_Detail+0x590>)
 8013718:	2201      	movs	r2, #1
 801371a:	2103      	movs	r1, #3
 801371c:	f7fa fa5a 	bl	800dbd4 <DispStr>
        DispStr(S_X[i]+42, LABLE_Y, INV, (List[i].PTR +(i - SAVE_BMP)*6));
 8013720:	8afb      	ldrh	r3, [r7, #22]
 8013722:	4a27      	ldr	r2, [pc, #156]	; (80137c0 <Update_Detail+0x5bc>)
 8013724:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8013728:	b29b      	uxth	r3, r3
 801372a:	332a      	adds	r3, #42	; 0x2a
 801372c:	b29b      	uxth	r3, r3
 801372e:	b218      	sxth	r0, r3
 8013730:	8afb      	ldrh	r3, [r7, #22]
 8013732:	4a1c      	ldr	r2, [pc, #112]	; (80137a4 <Update_Detail+0x5a0>)
 8013734:	f852 1033 	ldr.w	r1, [r2, r3, lsl #3]
 8013738:	8afb      	ldrh	r3, [r7, #22]
 801373a:	f1a3 021d 	sub.w	r2, r3, #29
 801373e:	4613      	mov	r3, r2
 8013740:	005b      	lsls	r3, r3, #1
 8013742:	4413      	add	r3, r2
 8013744:	005b      	lsls	r3, r3, #1
 8013746:	440b      	add	r3, r1
 8013748:	2201      	movs	r2, #1
 801374a:	2103      	movs	r1, #3
 801374c:	f7fa fa42 	bl	800dbd4 <DispStr>
        break;
 8013750:	f000 bd09 	b.w	8014166 <Update_Detail+0xf62>

      case TPYE_OUT:
        if(List[TPYE_OUT].Val ==0) //suqar
 8013754:	4b13      	ldr	r3, [pc, #76]	; (80137a4 <Update_Detail+0x5a0>)
 8013756:	f9b3 3124 	ldrsh.w	r3, [r3, #292]	; 0x124
 801375a:	2b00      	cmp	r3, #0
 801375c:	d136      	bne.n	80137cc <Update_Detail+0x5c8>
        {
          BIOS_Ctrl(OUT_MOD, DISABLE);            // �ر����ģʽ
 801375e:	2100      	movs	r1, #0
 8013760:	2000      	movs	r0, #0
 8013762:	f7f8 fe03 	bl	800c36c <BIOS_Ctrl>
          Set_Fout(List[FREQ_OUT].Val);
 8013766:	4b0f      	ldr	r3, [pc, #60]	; (80137a4 <Update_Detail+0x5a0>)
 8013768:	f9b3 312c 	ldrsh.w	r3, [r3, #300]	; 0x12c
 801376c:	4618      	mov	r0, r3
 801376e:	f7f8 ff87 	bl	800c680 <Set_Fout>
          Set_Duty();
 8013772:	f7f8 ff59 	bl	800c628 <Set_Duty>
          BIOS_Ctrl(OUT_MOD, PULSED);             // �趨�������ģʽ
 8013776:	2104      	movs	r1, #4
 8013778:	2000      	movs	r0, #0
 801377a:	f7f8 fdf7 	bl	800c36c <BIOS_Ctrl>
           BIOS_Ctrl(OUT_CNT, 180);
           BIOS_Ctrl(OUT_BUF, BIOS_Info(List[TPYE_OUT].Val));    // ����ģ��������Ҳ������ݱ�
           BIOS_Ctrl(OUT_MOD, ANALOG);             // �趨ģ�����ģʽ
        }

      break;
 801377e:	f000 bcf2 	b.w	8014166 <Update_Detail+0xf62>
 8013782:	bf00      	nop
 8013784:	20000140 	.word	0x20000140
 8013788:	08002130 	.word	0x08002130
 801378c:	08002108 	.word	0x08002108
 8013790:	08001d00 	.word	0x08001d00
 8013794:	20002838 	.word	0x20002838
 8013798:	08000960 	.word	0x08000960
 801379c:	08000964 	.word	0x08000964
 80137a0:	080009d0 	.word	0x080009d0
 80137a4:	20000298 	.word	0x20000298
 80137a8:	08000990 	.word	0x08000990
 80137ac:	08000998 	.word	0x08000998
 80137b0:	20002846 	.word	0x20002846
 80137b4:	20006882 	.word	0x20006882
 80137b8:	2000285e 	.word	0x2000285e
 80137bc:	20006884 	.word	0x20006884
 80137c0:	0800215c 	.word	0x0800215c
 80137c4:	08000948 	.word	0x08000948
 80137c8:	08000950 	.word	0x08000950
          if(List[FREQ_OUT].Val > MAX_FREQ)
 80137cc:	4bbf      	ldr	r3, [pc, #764]	; (8013acc <Update_Detail+0x8c8>)
 80137ce:	f9b3 312c 	ldrsh.w	r3, [r3, #300]	; 0x12c
 80137d2:	2b09      	cmp	r3, #9
 80137d4:	dd03      	ble.n	80137de <Update_Detail+0x5da>
             List[FREQ_OUT].Val = MAX_FREQ ;   //10KHz
 80137d6:	4bbd      	ldr	r3, [pc, #756]	; (8013acc <Update_Detail+0x8c8>)
 80137d8:	2209      	movs	r2, #9
 80137da:	f8a3 212c 	strh.w	r2, [r3, #300]	; 0x12c
           BIOS_Ctrl(OUT_MOD, DISABLE);            // �ر����ģʽ
 80137de:	2100      	movs	r1, #0
 80137e0:	2000      	movs	r0, #0
 80137e2:	f7f8 fdc3 	bl	800c36c <BIOS_Ctrl>
           htim7.Init.Prescaler = Dac_Psc[List[FREQ_OUT].Val] - 1;
 80137e6:	4bb9      	ldr	r3, [pc, #740]	; (8013acc <Update_Detail+0x8c8>)
 80137e8:	f9b3 312c 	ldrsh.w	r3, [r3, #300]	; 0x12c
 80137ec:	461a      	mov	r2, r3
 80137ee:	4bb8      	ldr	r3, [pc, #736]	; (8013ad0 <Update_Detail+0x8cc>)
 80137f0:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 80137f4:	3b01      	subs	r3, #1
 80137f6:	461a      	mov	r2, r3
 80137f8:	4bb6      	ldr	r3, [pc, #728]	; (8013ad4 <Update_Detail+0x8d0>)
 80137fa:	605a      	str	r2, [r3, #4]
           BIOS_Ctrl(DAC_TIM, Dac_Tim[List[FREQ_OUT].Val]-1); // 72MHz/2/180/100 = 2KHz ģ���������(ÿ����36��)
 80137fc:	4bb3      	ldr	r3, [pc, #716]	; (8013acc <Update_Detail+0x8c8>)
 80137fe:	f9b3 312c 	ldrsh.w	r3, [r3, #300]	; 0x12c
 8013802:	461a      	mov	r2, r3
 8013804:	4bb4      	ldr	r3, [pc, #720]	; (8013ad8 <Update_Detail+0x8d4>)
 8013806:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 801380a:	3b01      	subs	r3, #1
 801380c:	4619      	mov	r1, r3
 801380e:	2001      	movs	r0, #1
 8013810:	f7f8 fdac 	bl	800c36c <BIOS_Ctrl>
           BIOS_Ctrl(OUT_CNT, 180);
 8013814:	21b4      	movs	r1, #180	; 0xb4
 8013816:	2002      	movs	r0, #2
 8013818:	f7f8 fda8 	bl	800c36c <BIOS_Ctrl>
           BIOS_Ctrl(OUT_BUF, BIOS_Info(List[TPYE_OUT].Val));    // ����ģ��������Ҳ������ݱ�
 801381c:	4bab      	ldr	r3, [pc, #684]	; (8013acc <Update_Detail+0x8c8>)
 801381e:	f9b3 3124 	ldrsh.w	r3, [r3, #292]	; 0x124
 8013822:	b2db      	uxtb	r3, r3
 8013824:	4618      	mov	r0, r3
 8013826:	f7f8 fd8f 	bl	800c348 <BIOS_Info>
 801382a:	4603      	mov	r3, r0
 801382c:	4619      	mov	r1, r3
 801382e:	2003      	movs	r0, #3
 8013830:	f7f8 fd9c 	bl	800c36c <BIOS_Ctrl>
           BIOS_Ctrl(OUT_MOD, ANALOG);             // �趨ģ�����ģʽ
 8013834:	2102      	movs	r1, #2
 8013836:	2000      	movs	r0, #0
 8013838:	f7f8 fd98 	bl	800c36c <BIOS_Ctrl>
      break;
 801383c:	f000 bc93 	b.w	8014166 <Update_Detail+0xf62>

      case FREQ_OUT: // ��ʾ�������Ƶ��
        if(List[TPYE_OUT].Val ==0) //suqar
 8013840:	4ba2      	ldr	r3, [pc, #648]	; (8013acc <Update_Detail+0x8c8>)
 8013842:	f9b3 3124 	ldrsh.w	r3, [r3, #292]	; 0x124
 8013846:	2b00      	cmp	r3, #0
 8013848:	d111      	bne.n	801386e <Update_Detail+0x66a>
        {
          BIOS_Ctrl(OUT_MOD, DISABLE);            // �ر����ģʽ
 801384a:	2100      	movs	r1, #0
 801384c:	2000      	movs	r0, #0
 801384e:	f7f8 fd8d 	bl	800c36c <BIOS_Ctrl>
          Set_Fout(List[FREQ_OUT].Val);
 8013852:	4b9e      	ldr	r3, [pc, #632]	; (8013acc <Update_Detail+0x8c8>)
 8013854:	f9b3 312c 	ldrsh.w	r3, [r3, #300]	; 0x12c
 8013858:	4618      	mov	r0, r3
 801385a:	f7f8 ff11 	bl	800c680 <Set_Fout>
          Set_Duty();
 801385e:	f7f8 fee3 	bl	800c628 <Set_Duty>
          BIOS_Ctrl(OUT_MOD, PULSED);             // �趨�������ģʽ
 8013862:	2104      	movs	r1, #4
 8013864:	2000      	movs	r0, #0
 8013866:	f7f8 fd81 	bl	800c36c <BIOS_Ctrl>
          BIOS_Ctrl(DAC_TIM, Dac_Tim[List[FREQ_OUT].Val]-1); // 72MHz/2/180/100 = 2KHz ģ���������(ÿ����36��)
          BIOS_Ctrl(OUT_CNT, 180);
          BIOS_Ctrl(OUT_BUF, BIOS_Info(List[TPYE_OUT].Val));    // ����ģ��������Ҳ������ݱ�
          BIOS_Ctrl(OUT_MOD, ANALOG);             // �趨ģ�����ģʽ
        }
        break;
 801386a:	f000 bc7c 	b.w	8014166 <Update_Detail+0xf62>
          if(List[FREQ_OUT].Val > MAX_FREQ)
 801386e:	4b97      	ldr	r3, [pc, #604]	; (8013acc <Update_Detail+0x8c8>)
 8013870:	f9b3 312c 	ldrsh.w	r3, [r3, #300]	; 0x12c
 8013874:	2b09      	cmp	r3, #9
 8013876:	dd03      	ble.n	8013880 <Update_Detail+0x67c>
            List[FREQ_OUT].Val = MAX_FREQ ;   //10KHz
 8013878:	4b94      	ldr	r3, [pc, #592]	; (8013acc <Update_Detail+0x8c8>)
 801387a:	2209      	movs	r2, #9
 801387c:	f8a3 212c 	strh.w	r2, [r3, #300]	; 0x12c
          BIOS_Ctrl(OUT_MOD, DISABLE);            // �ر����ģʽ
 8013880:	2100      	movs	r1, #0
 8013882:	2000      	movs	r0, #0
 8013884:	f7f8 fd72 	bl	800c36c <BIOS_Ctrl>
          htim7.Init.Prescaler = Dac_Psc[List[FREQ_OUT].Val] - 1;
 8013888:	4b90      	ldr	r3, [pc, #576]	; (8013acc <Update_Detail+0x8c8>)
 801388a:	f9b3 312c 	ldrsh.w	r3, [r3, #300]	; 0x12c
 801388e:	461a      	mov	r2, r3
 8013890:	4b8f      	ldr	r3, [pc, #572]	; (8013ad0 <Update_Detail+0x8cc>)
 8013892:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8013896:	3b01      	subs	r3, #1
 8013898:	461a      	mov	r2, r3
 801389a:	4b8e      	ldr	r3, [pc, #568]	; (8013ad4 <Update_Detail+0x8d0>)
 801389c:	605a      	str	r2, [r3, #4]
          BIOS_Ctrl(DAC_TIM, Dac_Tim[List[FREQ_OUT].Val]-1); // 72MHz/2/180/100 = 2KHz ģ���������(ÿ����36��)
 801389e:	4b8b      	ldr	r3, [pc, #556]	; (8013acc <Update_Detail+0x8c8>)
 80138a0:	f9b3 312c 	ldrsh.w	r3, [r3, #300]	; 0x12c
 80138a4:	461a      	mov	r2, r3
 80138a6:	4b8c      	ldr	r3, [pc, #560]	; (8013ad8 <Update_Detail+0x8d4>)
 80138a8:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 80138ac:	3b01      	subs	r3, #1
 80138ae:	4619      	mov	r1, r3
 80138b0:	2001      	movs	r0, #1
 80138b2:	f7f8 fd5b 	bl	800c36c <BIOS_Ctrl>
          BIOS_Ctrl(OUT_CNT, 180);
 80138b6:	21b4      	movs	r1, #180	; 0xb4
 80138b8:	2002      	movs	r0, #2
 80138ba:	f7f8 fd57 	bl	800c36c <BIOS_Ctrl>
          BIOS_Ctrl(OUT_BUF, BIOS_Info(List[TPYE_OUT].Val));    // ����ģ��������Ҳ������ݱ�
 80138be:	4b83      	ldr	r3, [pc, #524]	; (8013acc <Update_Detail+0x8c8>)
 80138c0:	f9b3 3124 	ldrsh.w	r3, [r3, #292]	; 0x124
 80138c4:	b2db      	uxtb	r3, r3
 80138c6:	4618      	mov	r0, r3
 80138c8:	f7f8 fd3e 	bl	800c348 <BIOS_Info>
 80138cc:	4603      	mov	r3, r0
 80138ce:	4619      	mov	r1, r3
 80138d0:	2003      	movs	r0, #3
 80138d2:	f7f8 fd4b 	bl	800c36c <BIOS_Ctrl>
          BIOS_Ctrl(OUT_MOD, ANALOG);             // �趨ģ�����ģʽ
 80138d6:	2102      	movs	r1, #2
 80138d8:	2000      	movs	r0, #0
 80138da:	f7f8 fd47 	bl	800c36c <BIOS_Ctrl>
        break;
 80138de:	f000 bc42 	b.w	8014166 <Update_Detail+0xf62>

      case FREQ_DUT: // ��ʾ�������ռ�ձ�
        SetColor(GRY, TCOLOR[SN]);
 80138e2:	f240 531f 	movw	r3, #1311	; 0x51f
 80138e6:	4619      	mov	r1, r3
 80138e8:	f643 10e7 	movw	r0, #14823	; 0x39e7
 80138ec:	f7fa f95a 	bl	800dba4 <SetColor>
        Draw_Circle_D(INV, S_X[i]-3, LABLE_Y, 11, 0, 6*9);
 80138f0:	8afb      	ldrh	r3, [r7, #22]
 80138f2:	4a7a      	ldr	r2, [pc, #488]	; (8013adc <Update_Detail+0x8d8>)
 80138f4:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 80138f8:	b29b      	uxth	r3, r3
 80138fa:	3b03      	subs	r3, #3
 80138fc:	b29b      	uxth	r3, r3
 80138fe:	b219      	sxth	r1, r3
 8013900:	2336      	movs	r3, #54	; 0x36
 8013902:	9301      	str	r3, [sp, #4]
 8013904:	2300      	movs	r3, #0
 8013906:	9300      	str	r3, [sp, #0]
 8013908:	230b      	movs	r3, #11
 801390a:	2203      	movs	r2, #3
 801390c:	2001      	movs	r0, #1
 801390e:	f7fa fa37 	bl	800dd80 <Draw_Circle_D>
        if(List[TPYE_OUT].Val == 0) //suqar
 8013912:	4b6e      	ldr	r3, [pc, #440]	; (8013acc <Update_Detail+0x8c8>)
 8013914:	f9b3 3124 	ldrsh.w	r3, [r3, #292]	; 0x124
 8013918:	2b00      	cmp	r3, #0
 801391a:	f040 8423 	bne.w	8014164 <Update_Detail+0xf60>
        {
          Set_Duty();
 801391e:	f7f8 fe83 	bl	800c628 <Set_Duty>
        }
        break;
 8013922:	f000 bc1f 	b.w	8014164 <Update_Detail+0xf60>

      case EXT_REFN: // ��ʾ�ο���������
      case EXT_POSI: // ��ʾ�ο�����ƫ��
        SetColor(GRY, TCOLOR[EX]);
 8013926:	f64f 031f 	movw	r3, #63519	; 0xf81f
 801392a:	4619      	mov	r1, r3
 801392c:	f643 10e7 	movw	r0, #14823	; 0x39e7
 8013930:	f7fa f938 	bl	800dba4 <SetColor>
        if((i == EXT_REFN) || (i == EXT_POSI))
 8013934:	8afb      	ldrh	r3, [r7, #22]
 8013936:	2b1a      	cmp	r3, #26
 8013938:	d002      	beq.n	8013940 <Update_Detail+0x73c>
 801393a:	8afb      	ldrh	r3, [r7, #22]
 801393c:	2b1b      	cmp	r3, #27
 801393e:	d123      	bne.n	8013988 <Update_Detail+0x784>
        {
          Draw_Circle_D(INV, S_X[EXT_REFN]-3, TITLE_Y_POS, 11, 1, 6*5);
 8013940:	23a8      	movs	r3, #168	; 0xa8
 8013942:	b29b      	uxth	r3, r3
 8013944:	3b03      	subs	r3, #3
 8013946:	b29b      	uxth	r3, r3
 8013948:	b219      	sxth	r1, r3
 801394a:	231e      	movs	r3, #30
 801394c:	9301      	str	r3, [sp, #4]
 801394e:	2301      	movs	r3, #1
 8013950:	9300      	str	r3, [sp, #0]
 8013952:	230b      	movs	r3, #11
 8013954:	22e1      	movs	r2, #225	; 0xe1
 8013956:	2001      	movs	r0, #1
 8013958:	f7fa fa12 	bl	800dd80 <Draw_Circle_D>
          DispStr(S_X[EXT_REFN], TITLE_Y_POS, INV, (char*)(List[EXT_HIDE].Val? I[List[EXT_REFN].Val] : I[6]));
 801395c:	20a8      	movs	r0, #168	; 0xa8
 801395e:	4b5b      	ldr	r3, [pc, #364]	; (8013acc <Update_Detail+0x8c8>)
 8013960:	f9b3 30e4 	ldrsh.w	r3, [r3, #228]	; 0xe4
 8013964:	2b00      	cmp	r3, #0
 8013966:	d00a      	beq.n	801397e <Update_Detail+0x77a>
 8013968:	4b58      	ldr	r3, [pc, #352]	; (8013acc <Update_Detail+0x8c8>)
 801396a:	f9b3 30d4 	ldrsh.w	r3, [r3, #212]	; 0xd4
 801396e:	461a      	mov	r2, r3
 8013970:	4613      	mov	r3, r2
 8013972:	005b      	lsls	r3, r3, #1
 8013974:	4413      	add	r3, r2
 8013976:	005b      	lsls	r3, r3, #1
 8013978:	4a59      	ldr	r2, [pc, #356]	; (8013ae0 <Update_Detail+0x8dc>)
 801397a:	4413      	add	r3, r2
 801397c:	e000      	b.n	8013980 <Update_Detail+0x77c>
 801397e:	4b59      	ldr	r3, [pc, #356]	; (8013ae4 <Update_Detail+0x8e0>)
 8013980:	2201      	movs	r2, #1
 8013982:	21e1      	movs	r1, #225	; 0xe1
 8013984:	f7fa f926 	bl	800dbd4 <DispStr>
        }
        if(List[EXT_REFN].Val < 6) ParamTab[P2x2]=(List[EXT_POSI].Val + 1)*2;
 8013988:	4b50      	ldr	r3, [pc, #320]	; (8013acc <Update_Detail+0x8c8>)
 801398a:	f9b3 30d4 	ldrsh.w	r3, [r3, #212]	; 0xd4
 801398e:	2b05      	cmp	r3, #5
 8013990:	dc0a      	bgt.n	80139a8 <Update_Detail+0x7a4>
 8013992:	4b4e      	ldr	r3, [pc, #312]	; (8013acc <Update_Detail+0x8c8>)
 8013994:	f9b3 30dc 	ldrsh.w	r3, [r3, #220]	; 0xdc
 8013998:	3301      	adds	r3, #1
 801399a:	b29b      	uxth	r3, r3
 801399c:	005b      	lsls	r3, r3, #1
 801399e:	b29b      	uxth	r3, r3
 80139a0:	b21a      	sxth	r2, r3
 80139a2:	4b51      	ldr	r3, [pc, #324]	; (8013ae8 <Update_Detail+0x8e4>)
 80139a4:	82da      	strh	r2, [r3, #22]
        else                       ParamTab[P2x2]=(List[ V0_POSI].Val + 1)*2;
        break;
 80139a6:	e3de      	b.n	8014166 <Update_Detail+0xf62>
        else                       ParamTab[P2x2]=(List[ V0_POSI].Val + 1)*2;
 80139a8:	4b48      	ldr	r3, [pc, #288]	; (8013acc <Update_Detail+0x8c8>)
 80139aa:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 80139ae:	3301      	adds	r3, #1
 80139b0:	b29b      	uxth	r3, r3
 80139b2:	005b      	lsls	r3, r3, #1
 80139b4:	b29b      	uxth	r3, r3
 80139b6:	b21a      	sxth	r2, r3
 80139b8:	4b4b      	ldr	r3, [pc, #300]	; (8013ae8 <Update_Detail+0x8e4>)
 80139ba:	82da      	strh	r2, [r3, #22]
        break;
 80139bc:	e3d3      	b.n	8014166 <Update_Detail+0xf62>

      case EXT_HIDE:
        if(List[EXT_HIDE].Val == 0) ParamTab[P2F] |=  W_HID;  // W_HID�����ο�����
 80139be:	4b43      	ldr	r3, [pc, #268]	; (8013acc <Update_Detail+0x8c8>)
 80139c0:	f9b3 30e4 	ldrsh.w	r3, [r3, #228]	; 0xe4
 80139c4:	2b00      	cmp	r3, #0
 80139c6:	d108      	bne.n	80139da <Update_Detail+0x7d6>
 80139c8:	4b47      	ldr	r3, [pc, #284]	; (8013ae8 <Update_Detail+0x8e4>)
 80139ca:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80139ce:	f043 0304 	orr.w	r3, r3, #4
 80139d2:	b21a      	sxth	r2, r3
 80139d4:	4b44      	ldr	r3, [pc, #272]	; (8013ae8 <Update_Detail+0x8e4>)
 80139d6:	805a      	strh	r2, [r3, #2]
 80139d8:	e007      	b.n	80139ea <Update_Detail+0x7e6>
        else                        ParamTab[P2F] &= ~W_HID;  // W_HID��ʾ�ο�����
 80139da:	4b43      	ldr	r3, [pc, #268]	; (8013ae8 <Update_Detail+0x8e4>)
 80139dc:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80139e0:	f023 0304 	bic.w	r3, r3, #4
 80139e4:	b21a      	sxth	r2, r3
 80139e6:	4b40      	ldr	r3, [pc, #256]	; (8013ae8 <Update_Detail+0x8e4>)
 80139e8:	805a      	strh	r2, [r3, #2]
        SetColor(GRY, TCOLOR[EX]);
 80139ea:	f64f 031f 	movw	r3, #63519	; 0xf81f
 80139ee:	4619      	mov	r1, r3
 80139f0:	f643 10e7 	movw	r0, #14823	; 0x39e7
 80139f4:	f7fa f8d6 	bl	800dba4 <SetColor>
        Draw_Circle_D(INV, S_X[EXT_REFN]-3, TITLE_Y_POS, 11, 1, 6*5);
 80139f8:	23a8      	movs	r3, #168	; 0xa8
 80139fa:	b29b      	uxth	r3, r3
 80139fc:	3b03      	subs	r3, #3
 80139fe:	b29b      	uxth	r3, r3
 8013a00:	b219      	sxth	r1, r3
 8013a02:	231e      	movs	r3, #30
 8013a04:	9301      	str	r3, [sp, #4]
 8013a06:	2301      	movs	r3, #1
 8013a08:	9300      	str	r3, [sp, #0]
 8013a0a:	230b      	movs	r3, #11
 8013a0c:	22e1      	movs	r2, #225	; 0xe1
 8013a0e:	2001      	movs	r0, #1
 8013a10:	f7fa f9b6 	bl	800dd80 <Draw_Circle_D>
        DispStr(S_X[EXT_REFN], TITLE_Y_POS, INV, (char*)(List[EXT_HIDE].Val? I[List[EXT_REFN].Val] : I[6]));
 8013a14:	20a8      	movs	r0, #168	; 0xa8
 8013a16:	4b2d      	ldr	r3, [pc, #180]	; (8013acc <Update_Detail+0x8c8>)
 8013a18:	f9b3 30e4 	ldrsh.w	r3, [r3, #228]	; 0xe4
 8013a1c:	2b00      	cmp	r3, #0
 8013a1e:	d00a      	beq.n	8013a36 <Update_Detail+0x832>
 8013a20:	4b2a      	ldr	r3, [pc, #168]	; (8013acc <Update_Detail+0x8c8>)
 8013a22:	f9b3 30d4 	ldrsh.w	r3, [r3, #212]	; 0xd4
 8013a26:	461a      	mov	r2, r3
 8013a28:	4613      	mov	r3, r2
 8013a2a:	005b      	lsls	r3, r3, #1
 8013a2c:	4413      	add	r3, r2
 8013a2e:	005b      	lsls	r3, r3, #1
 8013a30:	4a2b      	ldr	r2, [pc, #172]	; (8013ae0 <Update_Detail+0x8dc>)
 8013a32:	4413      	add	r3, r2
 8013a34:	e000      	b.n	8013a38 <Update_Detail+0x834>
 8013a36:	4b2b      	ldr	r3, [pc, #172]	; (8013ae4 <Update_Detail+0x8e0>)
 8013a38:	2201      	movs	r2, #1
 8013a3a:	21e1      	movs	r1, #225	; 0xe1
 8013a3c:	f7fa f8ca 	bl	800dbd4 <DispStr>
      break;
 8013a40:	e391      	b.n	8014166 <Update_Detail+0xf62>
      case TR_MODE:   // ˢ����ʾ������ʽ
      case FITTRIGG:  // ˢ����ʾ�Զ�������ֵ
      case THRESHOLD: // ˢ����ʾ������ֵ
      case SENSITIVE: // ˢ����ʾ����������
      case TR_TYPE:   // ˢ����ʾ�α���ʽ
        DispStatus();
 8013a42:	f000 fc6b 	bl	801431c <DispStatus>
        SetColor(GRY, TCOLOR[TRG]);
 8013a46:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8013a4a:	4619      	mov	r1, r3
 8013a4c:	f643 10e7 	movw	r0, #14823	; 0x39e7
 8013a50:	f7fa f8a8 	bl	800dba4 <SetColor>
        if(i == TR_MODE || i==SENSITIVE)
 8013a54:	8afb      	ldrh	r3, [r7, #22]
 8013a56:	2b0e      	cmp	r3, #14
 8013a58:	d002      	beq.n	8013a60 <Update_Detail+0x85c>
 8013a5a:	8afb      	ldrh	r3, [r7, #22]
 8013a5c:	2b11      	cmp	r3, #17
 8013a5e:	d11a      	bne.n	8013a96 <Update_Detail+0x892>
        {
          Draw_Circle_D(INV, S_X[TR_MODE]-3, TITLE_Y_POS, 11, 0, 6*8);
 8013a60:	23dd      	movs	r3, #221	; 0xdd
 8013a62:	b29b      	uxth	r3, r3
 8013a64:	3b03      	subs	r3, #3
 8013a66:	b29b      	uxth	r3, r3
 8013a68:	b219      	sxth	r1, r3
 8013a6a:	2330      	movs	r3, #48	; 0x30
 8013a6c:	9301      	str	r3, [sp, #4]
 8013a6e:	2300      	movs	r3, #0
 8013a70:	9300      	str	r3, [sp, #0]
 8013a72:	230b      	movs	r3, #11
 8013a74:	22e1      	movs	r2, #225	; 0xe1
 8013a76:	2001      	movs	r0, #1
 8013a78:	f7fa f982 	bl	800dd80 <Draw_Circle_D>
          DispStr10x14(S_X[TR_MODE], TITLE_Y_POS, INV+SYMB,(List[TR_MODE].Val?("D"):("C")));
 8013a7c:	20dd      	movs	r0, #221	; 0xdd
 8013a7e:	4b13      	ldr	r3, [pc, #76]	; (8013acc <Update_Detail+0x8c8>)
 8013a80:	f9b3 3074 	ldrsh.w	r3, [r3, #116]	; 0x74
 8013a84:	2b00      	cmp	r3, #0
 8013a86:	d001      	beq.n	8013a8c <Update_Detail+0x888>
 8013a88:	4b18      	ldr	r3, [pc, #96]	; (8013aec <Update_Detail+0x8e8>)
 8013a8a:	e000      	b.n	8013a8e <Update_Detail+0x88a>
 8013a8c:	4b18      	ldr	r3, [pc, #96]	; (8013af0 <Update_Detail+0x8ec>)
 8013a8e:	2211      	movs	r2, #17
 8013a90:	21e1      	movs	r1, #225	; 0xe1
 8013a92:	f7fa fb07 	bl	800e0a4 <DispStr10x14>
        }
        if(i == FITTRIGG)
 8013a96:	8afb      	ldrh	r3, [r7, #22]
 8013a98:	2b0f      	cmp	r3, #15
 8013a9a:	d134      	bne.n	8013b06 <Update_Detail+0x902>
        {
          DispStr10x14(S_X[FITTRIGG], TITLE_Y_POS, PRN+SYMB,(List[FITTRIGG].Val?("F"):("B")));
 8013a9c:	20cf      	movs	r0, #207	; 0xcf
 8013a9e:	4b0b      	ldr	r3, [pc, #44]	; (8013acc <Update_Detail+0x8c8>)
 8013aa0:	f9b3 307c 	ldrsh.w	r3, [r3, #124]	; 0x7c
 8013aa4:	2b00      	cmp	r3, #0
 8013aa6:	d001      	beq.n	8013aac <Update_Detail+0x8a8>
 8013aa8:	4b12      	ldr	r3, [pc, #72]	; (8013af4 <Update_Detail+0x8f0>)
 8013aaa:	e000      	b.n	8013aae <Update_Detail+0x8aa>
 8013aac:	4b12      	ldr	r3, [pc, #72]	; (8013af8 <Update_Detail+0x8f4>)
 8013aae:	2210      	movs	r2, #16
 8013ab0:	21e1      	movs	r1, #225	; 0xe1
 8013ab2:	f7fa faf7 	bl	800e0a4 <DispStr10x14>
          if(List[FITTRIGG].Val)KEYTIME = 300;
 8013ab6:	4b05      	ldr	r3, [pc, #20]	; (8013acc <Update_Detail+0x8c8>)
 8013ab8:	f9b3 307c 	ldrsh.w	r3, [r3, #124]	; 0x7c
 8013abc:	2b00      	cmp	r3, #0
 8013abe:	d01f      	beq.n	8013b00 <Update_Detail+0x8fc>
 8013ac0:	4b0e      	ldr	r3, [pc, #56]	; (8013afc <Update_Detail+0x8f8>)
 8013ac2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8013ac6:	801a      	strh	r2, [r3, #0]
 8013ac8:	e01d      	b.n	8013b06 <Update_Detail+0x902>
 8013aca:	bf00      	nop
 8013acc:	20000298 	.word	0x20000298
 8013ad0:	08002338 	.word	0x08002338
 8013ad4:	20006c30 	.word	0x20006c30
 8013ad8:	08001d90 	.word	0x08001d90
 8013adc:	0800215c 	.word	0x0800215c
 8013ae0:	08001c88 	.word	0x08001c88
 8013ae4:	08001cac 	.word	0x08001cac
 8013ae8:	20000140 	.word	0x20000140
 8013aec:	08000988 	.word	0x08000988
 8013af0:	0800098c 	.word	0x0800098c
 8013af4:	0800099c 	.word	0x0800099c
 8013af8:	0800095c 	.word	0x0800095c
 8013afc:	2000077e 	.word	0x2000077e
          else KEYTIME = 0;
 8013b00:	4bac      	ldr	r3, [pc, #688]	; (8013db4 <Update_Detail+0xbb0>)
 8013b02:	2200      	movs	r2, #0
 8013b04:	801a      	strh	r2, [r3, #0]
        }
        ParamTab[VTx2]= ParamTab[P1x2]+2*List[THRESHOLD].Val;
 8013b06:	4bac      	ldr	r3, [pc, #688]	; (8013db8 <Update_Detail+0xbb4>)
 8013b08:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8013b0c:	b29a      	uxth	r2, r3
 8013b0e:	4bab      	ldr	r3, [pc, #684]	; (8013dbc <Update_Detail+0xbb8>)
 8013b10:	f9b3 3084 	ldrsh.w	r3, [r3, #132]	; 0x84
 8013b14:	b29b      	uxth	r3, r3
 8013b16:	005b      	lsls	r3, r3, #1
 8013b18:	b29b      	uxth	r3, r3
 8013b1a:	4413      	add	r3, r2
 8013b1c:	b29b      	uxth	r3, r3
 8013b1e:	b21a      	sxth	r2, r3
 8013b20:	4ba5      	ldr	r3, [pc, #660]	; (8013db8 <Update_Detail+0xbb4>)
 8013b22:	839a      	strh	r2, [r3, #28]
        Tmp  = List[SENSITIVE].Val;
 8013b24:	4ba5      	ldr	r3, [pc, #660]	; (8013dbc <Update_Detail+0xbb8>)
 8013b26:	f9b3 308c 	ldrsh.w	r3, [r3, #140]	; 0x8c
 8013b2a:	613b      	str	r3, [r7, #16]
        Tmp *= X_SCALE[Range]* Exp(V_SCALE[Range]);
 8013b2c:	f9b7 3000 	ldrsh.w	r3, [r7]
 8013b30:	4aa3      	ldr	r2, [pc, #652]	; (8013dc0 <Update_Detail+0xbbc>)
 8013b32:	5cd3      	ldrb	r3, [r2, r3]
 8013b34:	461c      	mov	r4, r3
 8013b36:	f9b7 3000 	ldrsh.w	r3, [r7]
 8013b3a:	4aa2      	ldr	r2, [pc, #648]	; (8013dc4 <Update_Detail+0xbc0>)
 8013b3c:	5cd3      	ldrb	r3, [r2, r3]
 8013b3e:	4618      	mov	r0, r3
 8013b40:	f7fe f81c 	bl	8011b7c <Exp>
 8013b44:	4603      	mov	r3, r0
 8013b46:	fb03 f204 	mul.w	r2, r3, r4
 8013b4a:	693b      	ldr	r3, [r7, #16]
 8013b4c:	fb02 f303 	mul.w	r3, r2, r3
 8013b50:	613b      	str	r3, [r7, #16]
        Value2Str(NumStr, Tmp, V[0], 2, UNSIGN);
 8013b52:	2301      	movs	r3, #1
 8013b54:	9300      	str	r3, [sp, #0]
 8013b56:	2302      	movs	r3, #2
 8013b58:	4a9b      	ldr	r2, [pc, #620]	; (8013dc8 <Update_Detail+0xbc4>)
 8013b5a:	6939      	ldr	r1, [r7, #16]
 8013b5c:	489b      	ldr	r0, [pc, #620]	; (8013dcc <Update_Detail+0xbc8>)
 8013b5e:	f7fd ff11 	bl	8011984 <Value2Str>
        DispStr10x14(S_X[SENSITIVE], TITLE_Y_POS, INV+SYMB,"E");
 8013b62:	20e7      	movs	r0, #231	; 0xe7
 8013b64:	4b9a      	ldr	r3, [pc, #616]	; (8013dd0 <Update_Detail+0xbcc>)
 8013b66:	2211      	movs	r2, #17
 8013b68:	21e1      	movs	r1, #225	; 0xe1
 8013b6a:	f7fa fa9b 	bl	800e0a4 <DispStr10x14>
        DispStr(S_X[SENSITIVE]+9, TITLE_Y_POS, INV,  "     ");
 8013b6e:	23e7      	movs	r3, #231	; 0xe7
 8013b70:	b29b      	uxth	r3, r3
 8013b72:	3309      	adds	r3, #9
 8013b74:	b29b      	uxth	r3, r3
 8013b76:	b218      	sxth	r0, r3
 8013b78:	4b96      	ldr	r3, [pc, #600]	; (8013dd4 <Update_Detail+0xbd0>)
 8013b7a:	2201      	movs	r2, #1
 8013b7c:	21e1      	movs	r1, #225	; 0xe1
 8013b7e:	f7fa f829 	bl	800dbd4 <DispStr>
        DispStr(S_X[SENSITIVE]+9, TITLE_Y_POS, INV,  (char *)NumStr);
 8013b82:	23e7      	movs	r3, #231	; 0xe7
 8013b84:	b29b      	uxth	r3, r3
 8013b86:	3309      	adds	r3, #9
 8013b88:	b29b      	uxth	r3, r3
 8013b8a:	b218      	sxth	r0, r3
 8013b8c:	4b8f      	ldr	r3, [pc, #572]	; (8013dcc <Update_Detail+0xbc8>)
 8013b8e:	2201      	movs	r2, #1
 8013b90:	21e1      	movs	r1, #225	; 0xe1
 8013b92:	f7fa f81f 	bl	800dbd4 <DispStr>
        ParamTab[VTF]=(List[TR_TYPE].Val)? L_HID : SHOW;
 8013b96:	4b89      	ldr	r3, [pc, #548]	; (8013dbc <Update_Detail+0xbb8>)
 8013b98:	f9b3 3094 	ldrsh.w	r3, [r3, #148]	; 0x94
 8013b9c:	2b00      	cmp	r3, #0
 8013b9e:	d001      	beq.n	8013ba4 <Update_Detail+0x9a0>
 8013ba0:	2202      	movs	r2, #2
 8013ba2:	e000      	b.n	8013ba6 <Update_Detail+0x9a2>
 8013ba4:	2200      	movs	r2, #0
 8013ba6:	4b84      	ldr	r3, [pc, #528]	; (8013db8 <Update_Detail+0xbb4>)
 8013ba8:	811a      	strh	r2, [r3, #8]
        break;
 8013baa:	e2dc      	b.n	8014166 <Update_Detail+0xf62>
      case VIEWPOSI:  // ˢ����ʾˮƽ�Ӵ�λ��
      case SMPL_DPTH: // ˢ����ʾ�������
      case T1_POSI:   // ˢ����ʾ����α�λ��
      case T2_POSI:   // ˢ����ʾ�Ҷ��α�λ��
      case XN_TYPE:   // ˢ����ʾ�α���ʽ
        SetColor(GRY, TCOLOR[XN]);
 8013bac:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8013bb0:	4619      	mov	r1, r3
 8013bb2:	f643 10e7 	movw	r0, #14823	; 0x39e7
 8013bb6:	f7f9 fff5 	bl	800dba4 <SetColor>
        if(i == TIM_BASE)
 8013bba:	8afb      	ldrh	r3, [r7, #22]
 8013bbc:	2b07      	cmp	r3, #7
 8013bbe:	d11e      	bne.n	8013bfe <Update_Detail+0x9fa>
        {
          Draw_Circle_D(INV, S_X[i]-3, TITLE_Y_POS, 11, 2, 6*5);
 8013bc0:	8afb      	ldrh	r3, [r7, #22]
 8013bc2:	4a85      	ldr	r2, [pc, #532]	; (8013dd8 <Update_Detail+0xbd4>)
 8013bc4:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8013bc8:	b29b      	uxth	r3, r3
 8013bca:	3b03      	subs	r3, #3
 8013bcc:	b29b      	uxth	r3, r3
 8013bce:	b219      	sxth	r1, r3
 8013bd0:	231e      	movs	r3, #30
 8013bd2:	9301      	str	r3, [sp, #4]
 8013bd4:	2302      	movs	r3, #2
 8013bd6:	9300      	str	r3, [sp, #0]
 8013bd8:	230b      	movs	r3, #11
 8013bda:	22e1      	movs	r2, #225	; 0xe1
 8013bdc:	2001      	movs	r0, #1
 8013bde:	f7fa f8cf 	bl	800dd80 <Draw_Circle_D>
          DispStr(S_X[i], TITLE_Y_POS, INV, TimeBase_Str[List[TIM_BASE].Val]);
 8013be2:	8afb      	ldrh	r3, [r7, #22]
 8013be4:	4a7c      	ldr	r2, [pc, #496]	; (8013dd8 <Update_Detail+0xbd4>)
 8013be6:	f932 0013 	ldrsh.w	r0, [r2, r3, lsl #1]
 8013bea:	4b74      	ldr	r3, [pc, #464]	; (8013dbc <Update_Detail+0xbb8>)
 8013bec:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8013bf0:	00db      	lsls	r3, r3, #3
 8013bf2:	4a7a      	ldr	r2, [pc, #488]	; (8013ddc <Update_Detail+0xbd8>)
 8013bf4:	4413      	add	r3, r2
 8013bf6:	2201      	movs	r2, #1
 8013bf8:	21e1      	movs	r1, #225	; 0xe1
 8013bfa:	f7f9 ffeb 	bl	800dbd4 <DispStr>
        }
        if(i == SMPL_DPTH){
 8013bfe:	8afb      	ldrh	r3, [r7, #22]
 8013c00:	2b09      	cmp	r3, #9
 8013c02:	d126      	bne.n	8013c52 <Update_Detail+0xa4e>
          Draw_Circle_D(INV, S_X[SMPL_DPTH]-3, LABLE_Y, 11, 0, 6*11);
 8013c04:	23f8      	movs	r3, #248	; 0xf8
 8013c06:	b29b      	uxth	r3, r3
 8013c08:	3b03      	subs	r3, #3
 8013c0a:	b29b      	uxth	r3, r3
 8013c0c:	b219      	sxth	r1, r3
 8013c0e:	2342      	movs	r3, #66	; 0x42
 8013c10:	9301      	str	r3, [sp, #4]
 8013c12:	2300      	movs	r3, #0
 8013c14:	9300      	str	r3, [sp, #0]
 8013c16:	230b      	movs	r3, #11
 8013c18:	2203      	movs	r2, #3
 8013c1a:	2001      	movs	r0, #1
 8013c1c:	f7fa f8b0 	bl	800dd80 <Draw_Circle_D>
          DispStr(S_X[SMPL_DPTH],    LABLE_Y,  INV, "SmplDpth:  ");
 8013c20:	20f8      	movs	r0, #248	; 0xf8
 8013c22:	4b6f      	ldr	r3, [pc, #444]	; (8013de0 <Update_Detail+0xbdc>)
 8013c24:	2201      	movs	r2, #1
 8013c26:	2103      	movs	r1, #3
 8013c28:	f7f9 ffd4 	bl	800dbd4 <DispStr>
          DispStr(S_X[SMPL_DPTH]+6*9, LABLE_Y,  INV, (char *)&D[List[SMPL_DPTH].Val]);
 8013c2c:	23f8      	movs	r3, #248	; 0xf8
 8013c2e:	b29b      	uxth	r3, r3
 8013c30:	3336      	adds	r3, #54	; 0x36
 8013c32:	b29b      	uxth	r3, r3
 8013c34:	b218      	sxth	r0, r3
 8013c36:	4b61      	ldr	r3, [pc, #388]	; (8013dbc <Update_Detail+0xbb8>)
 8013c38:	f9b3 304c 	ldrsh.w	r3, [r3, #76]	; 0x4c
 8013c3c:	461a      	mov	r2, r3
 8013c3e:	4613      	mov	r3, r2
 8013c40:	005b      	lsls	r3, r3, #1
 8013c42:	4413      	add	r3, r2
 8013c44:	005b      	lsls	r3, r3, #1
 8013c46:	4a67      	ldr	r2, [pc, #412]	; (8013de4 <Update_Detail+0xbe0>)
 8013c48:	4413      	add	r3, r2
 8013c4a:	2201      	movs	r2, #1
 8013c4c:	2103      	movs	r1, #3
 8013c4e:	f7f9 ffc1 	bl	800dbd4 <DispStr>
        }
        Update_Windows();
 8013c52:	f000 fbad 	bl	80143b0 <Update_Windows>

        ParamTab[T0x1] = 2 + Presampling - List[VIEWPOSI].Val;
 8013c56:	4b64      	ldr	r3, [pc, #400]	; (8013de8 <Update_Detail+0xbe4>)
 8013c58:	f9b3 3000 	ldrsh.w	r3, [r3]
 8013c5c:	b29a      	uxth	r2, r3
 8013c5e:	4b57      	ldr	r3, [pc, #348]	; (8013dbc <Update_Detail+0xbb8>)
 8013c60:	f9b3 3044 	ldrsh.w	r3, [r3, #68]	; 0x44
 8013c64:	b29b      	uxth	r3, r3
 8013c66:	1ad3      	subs	r3, r2, r3
 8013c68:	b29b      	uxth	r3, r3
 8013c6a:	3302      	adds	r3, #2
 8013c6c:	b29b      	uxth	r3, r3
 8013c6e:	b21a      	sxth	r2, r3
 8013c70:	4b51      	ldr	r3, [pc, #324]	; (8013db8 <Update_Detail+0xbb4>)
 8013c72:	845a      	strh	r2, [r3, #34]	; 0x22
        ParamTab[T0F] &= ~D_HID;
 8013c74:	4b50      	ldr	r3, [pc, #320]	; (8013db8 <Update_Detail+0xbb4>)
 8013c76:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8013c7a:	f023 0301 	bic.w	r3, r3, #1
 8013c7e:	b21a      	sxth	r2, r3
 8013c80:	4b4d      	ldr	r3, [pc, #308]	; (8013db8 <Update_Detail+0xbb4>)
 8013c82:	81da      	strh	r2, [r3, #14]
        ParamTab[T1F] &= ~D_HID;
 8013c84:	4b4c      	ldr	r3, [pc, #304]	; (8013db8 <Update_Detail+0xbb4>)
 8013c86:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8013c8a:	f023 0301 	bic.w	r3, r3, #1
 8013c8e:	b21a      	sxth	r2, r3
 8013c90:	4b49      	ldr	r3, [pc, #292]	; (8013db8 <Update_Detail+0xbb4>)
 8013c92:	821a      	strh	r2, [r3, #16]
        ParamTab[T1F] &= ~D_HID;
 8013c94:	4b48      	ldr	r3, [pc, #288]	; (8013db8 <Update_Detail+0xbb4>)
 8013c96:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8013c9a:	f023 0301 	bic.w	r3, r3, #1
 8013c9e:	b21a      	sxth	r2, r3
 8013ca0:	4b45      	ldr	r3, [pc, #276]	; (8013db8 <Update_Detail+0xbb4>)
 8013ca2:	821a      	strh	r2, [r3, #16]
        ParamTab[T1x1] = List[T1_POSI].Val+1;
 8013ca4:	4b45      	ldr	r3, [pc, #276]	; (8013dbc <Update_Detail+0xbb8>)
 8013ca6:	f9b3 3054 	ldrsh.w	r3, [r3, #84]	; 0x54
 8013caa:	b29b      	uxth	r3, r3
 8013cac:	3301      	adds	r3, #1
 8013cae:	b29b      	uxth	r3, r3
 8013cb0:	b21a      	sxth	r2, r3
 8013cb2:	4b41      	ldr	r3, [pc, #260]	; (8013db8 <Update_Detail+0xbb4>)
 8013cb4:	849a      	strh	r2, [r3, #36]	; 0x24
        ParamTab[T2x1] = List[T2_POSI].Val+1;
 8013cb6:	4b41      	ldr	r3, [pc, #260]	; (8013dbc <Update_Detail+0xbb8>)
 8013cb8:	f9b3 305c 	ldrsh.w	r3, [r3, #92]	; 0x5c
 8013cbc:	b29b      	uxth	r3, r3
 8013cbe:	3301      	adds	r3, #1
 8013cc0:	b29b      	uxth	r3, r3
 8013cc2:	b21a      	sxth	r2, r3
 8013cc4:	4b3c      	ldr	r3, [pc, #240]	; (8013db8 <Update_Detail+0xbb4>)
 8013cc6:	84da      	strh	r2, [r3, #38]	; 0x26
        ParamTab[T1F]  = (List[XN_TYPE].Val)? L_HID : SHOW;
 8013cc8:	4b3c      	ldr	r3, [pc, #240]	; (8013dbc <Update_Detail+0xbb8>)
 8013cca:	f9b3 3064 	ldrsh.w	r3, [r3, #100]	; 0x64
 8013cce:	2b00      	cmp	r3, #0
 8013cd0:	d001      	beq.n	8013cd6 <Update_Detail+0xad2>
 8013cd2:	2202      	movs	r2, #2
 8013cd4:	e000      	b.n	8013cd8 <Update_Detail+0xad4>
 8013cd6:	2200      	movs	r2, #0
 8013cd8:	4b37      	ldr	r3, [pc, #220]	; (8013db8 <Update_Detail+0xbb4>)
 8013cda:	821a      	strh	r2, [r3, #16]
        ParamTab[T2F]  = (List[XN_TYPE].Val)? L_HID : SHOW;
 8013cdc:	4b37      	ldr	r3, [pc, #220]	; (8013dbc <Update_Detail+0xbb8>)
 8013cde:	f9b3 3064 	ldrsh.w	r3, [r3, #100]	; 0x64
 8013ce2:	2b00      	cmp	r3, #0
 8013ce4:	d001      	beq.n	8013cea <Update_Detail+0xae6>
 8013ce6:	2202      	movs	r2, #2
 8013ce8:	e000      	b.n	8013cec <Update_Detail+0xae8>
 8013cea:	2200      	movs	r2, #0
 8013cec:	4b32      	ldr	r3, [pc, #200]	; (8013db8 <Update_Detail+0xbb4>)
 8013cee:	825a      	strh	r2, [r3, #18]
        Tmp  = ParamTab[T2x1] - ParamTab[T1x1];
 8013cf0:	4b31      	ldr	r3, [pc, #196]	; (8013db8 <Update_Detail+0xbb4>)
 8013cf2:	f9b3 3026 	ldrsh.w	r3, [r3, #38]	; 0x26
 8013cf6:	461a      	mov	r2, r3
 8013cf8:	4b2f      	ldr	r3, [pc, #188]	; (8013db8 <Update_Detail+0xbb4>)
 8013cfa:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	; 0x24
 8013cfe:	1ad3      	subs	r3, r2, r3
 8013d00:	613b      	str	r3, [r7, #16]
        Tmp *= B_SCALE[List[TIM_BASE].Val]* Exp(T_SCALE[List[TIM_BASE].Val]);
 8013d02:	4b2e      	ldr	r3, [pc, #184]	; (8013dbc <Update_Detail+0xbb8>)
 8013d04:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8013d08:	461a      	mov	r2, r3
 8013d0a:	4b38      	ldr	r3, [pc, #224]	; (8013dec <Update_Detail+0xbe8>)
 8013d0c:	5c9b      	ldrb	r3, [r3, r2]
 8013d0e:	461c      	mov	r4, r3
 8013d10:	4b2a      	ldr	r3, [pc, #168]	; (8013dbc <Update_Detail+0xbb8>)
 8013d12:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8013d16:	461a      	mov	r2, r3
 8013d18:	4b35      	ldr	r3, [pc, #212]	; (8013df0 <Update_Detail+0xbec>)
 8013d1a:	5c9b      	ldrb	r3, [r3, r2]
 8013d1c:	4618      	mov	r0, r3
 8013d1e:	f7fd ff2d 	bl	8011b7c <Exp>
 8013d22:	4603      	mov	r3, r0
 8013d24:	fb03 f204 	mul.w	r2, r3, r4
 8013d28:	693b      	ldr	r3, [r7, #16]
 8013d2a:	fb02 f303 	mul.w	r3, r2, r3
 8013d2e:	613b      	str	r3, [r7, #16]
        Value2Str(NumStr, Tmp, T[0], 3, UNSIGN);
 8013d30:	2301      	movs	r3, #1
 8013d32:	9300      	str	r3, [sp, #0]
 8013d34:	2303      	movs	r3, #3
 8013d36:	4a2f      	ldr	r2, [pc, #188]	; (8013df4 <Update_Detail+0xbf0>)
 8013d38:	6939      	ldr	r1, [r7, #16]
 8013d3a:	4824      	ldr	r0, [pc, #144]	; (8013dcc <Update_Detail+0xbc8>)
 8013d3c:	f7fd fe22 	bl	8011984 <Value2Str>
        Draw_Circle_D(INV, S_X[V1_POSI]-3, LABLE_Y, 11, 0, 6*9);
 8013d40:	2307      	movs	r3, #7
 8013d42:	b29b      	uxth	r3, r3
 8013d44:	3b03      	subs	r3, #3
 8013d46:	b29b      	uxth	r3, r3
 8013d48:	b219      	sxth	r1, r3
 8013d4a:	2336      	movs	r3, #54	; 0x36
 8013d4c:	9301      	str	r3, [sp, #4]
 8013d4e:	2300      	movs	r3, #0
 8013d50:	9300      	str	r3, [sp, #0]
 8013d52:	230b      	movs	r3, #11
 8013d54:	2203      	movs	r2, #3
 8013d56:	2001      	movs	r0, #1
 8013d58:	f7fa f812 	bl	800dd80 <Draw_Circle_D>
        DispStr(S_X[T1_POSI]+0*6, LABLE_Y, INV+SYMB, "]");
 8013d5c:	2007      	movs	r0, #7
 8013d5e:	4b26      	ldr	r3, [pc, #152]	; (8013df8 <Update_Detail+0xbf4>)
 8013d60:	2211      	movs	r2, #17
 8013d62:	2103      	movs	r1, #3
 8013d64:	f7f9 ff36 	bl	800dbd4 <DispStr>
        DispStr(S_X[T1_POSI]+1*6, LABLE_Y, INV,      "T:      ");
 8013d68:	2307      	movs	r3, #7
 8013d6a:	b29b      	uxth	r3, r3
 8013d6c:	3306      	adds	r3, #6
 8013d6e:	b29b      	uxth	r3, r3
 8013d70:	b218      	sxth	r0, r3
 8013d72:	4b22      	ldr	r3, [pc, #136]	; (8013dfc <Update_Detail+0xbf8>)
 8013d74:	2201      	movs	r2, #1
 8013d76:	2103      	movs	r1, #3
 8013d78:	f7f9 ff2c 	bl	800dbd4 <DispStr>
        DispStr(S_X[T1_POSI]+7*6, LABLE_Y, INV,  "  ");
 8013d7c:	2307      	movs	r3, #7
 8013d7e:	b29b      	uxth	r3, r3
 8013d80:	332a      	adds	r3, #42	; 0x2a
 8013d82:	b29b      	uxth	r3, r3
 8013d84:	b218      	sxth	r0, r3
 8013d86:	4b1e      	ldr	r3, [pc, #120]	; (8013e00 <Update_Detail+0xbfc>)
 8013d88:	2201      	movs	r2, #1
 8013d8a:	2103      	movs	r1, #3
 8013d8c:	f7f9 ff22 	bl	800dbd4 <DispStr>
        DispStr(S_X[T1_POSI]+3*6, LABLE_Y, INV,  (char *)NumStr);
 8013d90:	2307      	movs	r3, #7
 8013d92:	b29b      	uxth	r3, r3
 8013d94:	3312      	adds	r3, #18
 8013d96:	b29b      	uxth	r3, r3
 8013d98:	b218      	sxth	r0, r3
 8013d9a:	4b0c      	ldr	r3, [pc, #48]	; (8013dcc <Update_Detail+0xbc8>)
 8013d9c:	2201      	movs	r2, #1
 8013d9e:	2103      	movs	r1, #3
 8013da0:	f7f9 ff18 	bl	800dbd4 <DispStr>
        Set_Base(List[TIM_BASE].Val);          // Ӳ������ɨ��ʱ����λ
 8013da4:	4b05      	ldr	r3, [pc, #20]	; (8013dbc <Update_Detail+0xbb8>)
 8013da6:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8013daa:	4618      	mov	r0, r3
 8013dac:	f7f8 fc06 	bl	800c5bc <Set_Base>
      break;
 8013db0:	e1d9      	b.n	8014166 <Update_Detail+0xf62>
 8013db2:	bf00      	nop
 8013db4:	2000077e 	.word	0x2000077e
 8013db8:	20000140 	.word	0x20000140
 8013dbc:	20000298 	.word	0x20000298
 8013dc0:	08002130 	.word	0x08002130
 8013dc4:	08002108 	.word	0x08002108
 8013dc8:	08001d00 	.word	0x08001d00
 8013dcc:	20002838 	.word	0x20002838
 8013dd0:	08000998 	.word	0x08000998
 8013dd4:	08000990 	.word	0x08000990
 8013dd8:	0800215c 	.word	0x0800215c
 8013ddc:	200001d0 	.word	0x200001d0
 8013de0:	08000970 	.word	0x08000970
 8013de4:	08001c4c 	.word	0x08001c4c
 8013de8:	2000055a 	.word	0x2000055a
 8013dec:	0800211c 	.word	0x0800211c
 8013df0:	080020f4 	.word	0x080020f4
 8013df4:	08001ce8 	.word	0x08001ce8
 8013df8:	08000960 	.word	0x08000960
 8013dfc:	0800097c 	.word	0x0800097c
 8013e00:	080009d0 	.word	0x080009d0

      case FREQUENC://��ʾƵ��
        FTmp=Edge*25*1000/2;
 8013e04:	4bb7      	ldr	r3, [pc, #732]	; (80140e4 <Update_Detail+0xee0>)
 8013e06:	681b      	ldr	r3, [r3, #0]
 8013e08:	f243 02d4 	movw	r2, #12500	; 0x30d4
 8013e0c:	fb02 f303 	mul.w	r3, r2, r3
 8013e10:	60fb      	str	r3, [r7, #12]
        if(List[TIM_BASE].Val<9)FTmp= FTmp*1000000;
 8013e12:	4bb5      	ldr	r3, [pc, #724]	; (80140e8 <Update_Detail+0xee4>)
 8013e14:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8013e18:	2b08      	cmp	r3, #8
 8013e1a:	dc05      	bgt.n	8013e28 <Update_Detail+0xc24>
 8013e1c:	68fb      	ldr	r3, [r7, #12]
 8013e1e:	4ab3      	ldr	r2, [pc, #716]	; (80140ec <Update_Detail+0xee8>)
 8013e20:	fb02 f303 	mul.w	r3, r2, r3
 8013e24:	60fb      	str	r3, [r7, #12]
 8013e26:	e00a      	b.n	8013e3e <Update_Detail+0xc3a>
        else if(List[TIM_BASE].Val<18)FTmp= FTmp*1000;
 8013e28:	4baf      	ldr	r3, [pc, #700]	; (80140e8 <Update_Detail+0xee4>)
 8013e2a:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8013e2e:	2b11      	cmp	r3, #17
 8013e30:	dc05      	bgt.n	8013e3e <Update_Detail+0xc3a>
 8013e32:	68fb      	ldr	r3, [r7, #12]
 8013e34:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8013e38:	fb02 f303 	mul.w	r3, r2, r3
 8013e3c:	60fb      	str	r3, [r7, #12]
        FTmp=FTmp/Ts[List[TIM_BASE].Val]/DEPTH[List[SMPL_DPTH].Val];
 8013e3e:	4baa      	ldr	r3, [pc, #680]	; (80140e8 <Update_Detail+0xee4>)
 8013e40:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8013e44:	461a      	mov	r2, r3
 8013e46:	4baa      	ldr	r3, [pc, #680]	; (80140f0 <Update_Detail+0xeec>)
 8013e48:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013e4c:	461a      	mov	r2, r3
 8013e4e:	68fb      	ldr	r3, [r7, #12]
 8013e50:	fbb3 f3f2 	udiv	r3, r3, r2
 8013e54:	4aa4      	ldr	r2, [pc, #656]	; (80140e8 <Update_Detail+0xee4>)
 8013e56:	f9b2 204c 	ldrsh.w	r2, [r2, #76]	; 0x4c
 8013e5a:	4611      	mov	r1, r2
 8013e5c:	4aa5      	ldr	r2, [pc, #660]	; (80140f4 <Update_Detail+0xef0>)
 8013e5e:	f932 2011 	ldrsh.w	r2, [r2, r1, lsl #1]
 8013e62:	fbb3 f3f2 	udiv	r3, r3, r2
 8013e66:	60fb      	str	r3, [r7, #12]
          DispMeter(i, 1, UNSIGN,FTmp);
 8013e68:	f9b7 0016 	ldrsh.w	r0, [r7, #22]
 8013e6c:	68fb      	ldr	r3, [r7, #12]
 8013e6e:	2201      	movs	r2, #1
 8013e70:	2101      	movs	r1, #1
 8013e72:	f000 f9d3 	bl	801421c <DispMeter>
      break;
 8013e76:	e176      	b.n	8014166 <Update_Detail+0xf62>

      case DUTY:    //��ʾռ�ձ�
         DispMeter(i, k, UNSIGN,(HighT*100)/k);
 8013e78:	f9b7 0016 	ldrsh.w	r0, [r7, #22]
 8013e7c:	887b      	ldrh	r3, [r7, #2]
 8013e7e:	b2d9      	uxtb	r1, r3
 8013e80:	4b9d      	ldr	r3, [pc, #628]	; (80140f8 <Update_Detail+0xef4>)
 8013e82:	681b      	ldr	r3, [r3, #0]
 8013e84:	2264      	movs	r2, #100	; 0x64
 8013e86:	fb02 f203 	mul.w	r2, r2, r3
 8013e8a:	887b      	ldrh	r3, [r7, #2]
 8013e8c:	fb92 f3f3 	sdiv	r3, r2, r3
 8013e90:	2201      	movs	r2, #1
 8013e92:	f000 f9c3 	bl	801421c <DispMeter>
        break;
 8013e96:	e166      	b.n	8014166 <Update_Detail+0xf62>

      case VRMS://��ʾ��ѹ��Чֵ
        if(abs(Vrms)<4)
 8013e98:	4b98      	ldr	r3, [pc, #608]	; (80140fc <Update_Detail+0xef8>)
 8013e9a:	681b      	ldr	r3, [r3, #0]
 8013e9c:	f113 0f03 	cmn.w	r3, #3
 8013ea0:	db06      	blt.n	8013eb0 <Update_Detail+0xcac>
 8013ea2:	4b96      	ldr	r3, [pc, #600]	; (80140fc <Update_Detail+0xef8>)
 8013ea4:	681b      	ldr	r3, [r3, #0]
 8013ea6:	2b03      	cmp	r3, #3
 8013ea8:	dc02      	bgt.n	8013eb0 <Update_Detail+0xcac>
        {
          Tmp = 0.00;
 8013eaa:	2300      	movs	r3, #0
 8013eac:	613b      	str	r3, [r7, #16]
 8013eae:	e026      	b.n	8013efe <Update_Detail+0xcfa>
        }else{
		  scale = (List[PROBEATT].Val?
 8013eb0:	4b8d      	ldr	r3, [pc, #564]	; (80140e8 <Update_Detail+0xee4>)
 8013eb2:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
                  VScale_10X[List[Y_RANGES].Val]:VScale[List[Y_RANGES].Val])*40;
 8013eb6:	2b00      	cmp	r3, #0
 8013eb8:	d00b      	beq.n	8013ed2 <Update_Detail+0xcce>
 8013eba:	4b8b      	ldr	r3, [pc, #556]	; (80140e8 <Update_Detail+0xee4>)
 8013ebc:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8013ec0:	461a      	mov	r2, r3
 8013ec2:	4b8f      	ldr	r3, [pc, #572]	; (8014100 <Update_Detail+0xefc>)
 8013ec4:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8013ec8:	4613      	mov	r3, r2
 8013eca:	009b      	lsls	r3, r3, #2
 8013ecc:	4413      	add	r3, r2
 8013ece:	00db      	lsls	r3, r3, #3
 8013ed0:	e00a      	b.n	8013ee8 <Update_Detail+0xce4>
 8013ed2:	4b85      	ldr	r3, [pc, #532]	; (80140e8 <Update_Detail+0xee4>)
 8013ed4:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8013ed8:	461a      	mov	r2, r3
 8013eda:	4b8a      	ldr	r3, [pc, #552]	; (8014104 <Update_Detail+0xf00>)
 8013edc:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8013ee0:	4613      	mov	r3, r2
 8013ee2:	009b      	lsls	r3, r3, #2
 8013ee4:	4413      	add	r3, r2
 8013ee6:	00db      	lsls	r3, r3, #3
		  scale = (List[PROBEATT].Val?
 8013ee8:	60bb      	str	r3, [r7, #8]
	          Tmp  = ((((Vrms)*Ak)>>12))*scale;
 8013eea:	4b84      	ldr	r3, [pc, #528]	; (80140fc <Update_Detail+0xef8>)
 8013eec:	681b      	ldr	r3, [r3, #0]
 8013eee:	687a      	ldr	r2, [r7, #4]
 8013ef0:	fb02 f303 	mul.w	r3, r2, r3
 8013ef4:	131a      	asrs	r2, r3, #12
 8013ef6:	68bb      	ldr	r3, [r7, #8]
 8013ef8:	fb02 f303 	mul.w	r3, r2, r3
 8013efc:	613b      	str	r3, [r7, #16]
        }
        DispMeter(i, 1, UNSIGN, Tmp);
 8013efe:	f9b7 0016 	ldrsh.w	r0, [r7, #22]
 8013f02:	693b      	ldr	r3, [r7, #16]
 8013f04:	2201      	movs	r2, #1
 8013f06:	2101      	movs	r1, #1
 8013f08:	f000 f988 	bl	801421c <DispMeter>
        break;
 8013f0c:	e12b      	b.n	8014166 <Update_Detail+0xf62>

      case VP_P://��ʾ��ѹ���ֵ
        if(abs(Vpp)<7){
 8013f0e:	4b7e      	ldr	r3, [pc, #504]	; (8014108 <Update_Detail+0xf04>)
 8013f10:	681b      	ldr	r3, [r3, #0]
 8013f12:	f113 0f06 	cmn.w	r3, #6
 8013f16:	db06      	blt.n	8013f26 <Update_Detail+0xd22>
 8013f18:	4b7b      	ldr	r3, [pc, #492]	; (8014108 <Update_Detail+0xf04>)
 8013f1a:	681b      	ldr	r3, [r3, #0]
 8013f1c:	2b06      	cmp	r3, #6
 8013f1e:	dc02      	bgt.n	8013f26 <Update_Detail+0xd22>
          Tmp = 0.00;
 8013f20:	2300      	movs	r3, #0
 8013f22:	613b      	str	r3, [r7, #16]
 8013f24:	e033      	b.n	8013f8e <Update_Detail+0xd8a>
        }
        else
        {
           scale = (List[PROBEATT].Val?
 8013f26:	4b70      	ldr	r3, [pc, #448]	; (80140e8 <Update_Detail+0xee4>)
 8013f28:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
                  VScale_10X[List[Y_RANGES].Val]:VScale[List[Y_RANGES].Val])*40;
 8013f2c:	2b00      	cmp	r3, #0
 8013f2e:	d00b      	beq.n	8013f48 <Update_Detail+0xd44>
 8013f30:	4b6d      	ldr	r3, [pc, #436]	; (80140e8 <Update_Detail+0xee4>)
 8013f32:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8013f36:	461a      	mov	r2, r3
 8013f38:	4b71      	ldr	r3, [pc, #452]	; (8014100 <Update_Detail+0xefc>)
 8013f3a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8013f3e:	4613      	mov	r3, r2
 8013f40:	009b      	lsls	r3, r3, #2
 8013f42:	4413      	add	r3, r2
 8013f44:	00db      	lsls	r3, r3, #3
 8013f46:	e00a      	b.n	8013f5e <Update_Detail+0xd5a>
 8013f48:	4b67      	ldr	r3, [pc, #412]	; (80140e8 <Update_Detail+0xee4>)
 8013f4a:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8013f4e:	461a      	mov	r2, r3
 8013f50:	4b6c      	ldr	r3, [pc, #432]	; (8014104 <Update_Detail+0xf00>)
 8013f52:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8013f56:	4613      	mov	r3, r2
 8013f58:	009b      	lsls	r3, r3, #2
 8013f5a:	4413      	add	r3, r2
 8013f5c:	00db      	lsls	r3, r3, #3
           scale = (List[PROBEATT].Val?
 8013f5e:	60bb      	str	r3, [r7, #8]
          Tmp  = ((((Vmax-2048)*(Ak))>>12)-(((Vmin-2048)*(Ak))>>12))*scale;
 8013f60:	4b6a      	ldr	r3, [pc, #424]	; (801410c <Update_Detail+0xf08>)
 8013f62:	f9b3 3000 	ldrsh.w	r3, [r3]
 8013f66:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 8013f6a:	687a      	ldr	r2, [r7, #4]
 8013f6c:	fb02 f303 	mul.w	r3, r2, r3
 8013f70:	131a      	asrs	r2, r3, #12
 8013f72:	4b67      	ldr	r3, [pc, #412]	; (8014110 <Update_Detail+0xf0c>)
 8013f74:	f9b3 3000 	ldrsh.w	r3, [r3]
 8013f78:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 8013f7c:	6879      	ldr	r1, [r7, #4]
 8013f7e:	fb01 f303 	mul.w	r3, r1, r3
 8013f82:	131b      	asrs	r3, r3, #12
 8013f84:	1ad2      	subs	r2, r2, r3
 8013f86:	68bb      	ldr	r3, [r7, #8]
 8013f88:	fb02 f303 	mul.w	r3, r2, r3
 8013f8c:	613b      	str	r3, [r7, #16]
        }
        DispMeter(i, 1, UNSIGN, Tmp);
 8013f8e:	f9b7 0016 	ldrsh.w	r0, [r7, #22]
 8013f92:	693b      	ldr	r3, [r7, #16]
 8013f94:	2201      	movs	r2, #1
 8013f96:	2101      	movs	r1, #1
 8013f98:	f000 f940 	bl	801421c <DispMeter>
        break;
 8013f9c:	e0e3      	b.n	8014166 <Update_Detail+0xf62>

      case VAVG://��ʾ��ѹƽ��ֵ
        if(abs(Vavg)<4)
 8013f9e:	4b5d      	ldr	r3, [pc, #372]	; (8014114 <Update_Detail+0xf10>)
 8013fa0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8013fa4:	2b00      	cmp	r3, #0
 8013fa6:	bfb8      	it	lt
 8013fa8:	425b      	neglt	r3, r3
 8013faa:	b29b      	uxth	r3, r3
 8013fac:	2b03      	cmp	r3, #3
 8013fae:	d802      	bhi.n	8013fb6 <Update_Detail+0xdb2>
        {
          Tmp = 0.00;
 8013fb0:	2300      	movs	r3, #0
 8013fb2:	613b      	str	r3, [r7, #16]
 8013fb4:	e02e      	b.n	8014014 <Update_Detail+0xe10>
        }else{
          scale = (List[PROBEATT].Val?
 8013fb6:	4b4c      	ldr	r3, [pc, #304]	; (80140e8 <Update_Detail+0xee4>)
 8013fb8:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
                  VScale_10X[List[Y_RANGES].Val]:VScale[List[Y_RANGES].Val])*40;
 8013fbc:	2b00      	cmp	r3, #0
 8013fbe:	d00b      	beq.n	8013fd8 <Update_Detail+0xdd4>
 8013fc0:	4b49      	ldr	r3, [pc, #292]	; (80140e8 <Update_Detail+0xee4>)
 8013fc2:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8013fc6:	461a      	mov	r2, r3
 8013fc8:	4b4d      	ldr	r3, [pc, #308]	; (8014100 <Update_Detail+0xefc>)
 8013fca:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8013fce:	4613      	mov	r3, r2
 8013fd0:	009b      	lsls	r3, r3, #2
 8013fd2:	4413      	add	r3, r2
 8013fd4:	00db      	lsls	r3, r3, #3
 8013fd6:	e00a      	b.n	8013fee <Update_Detail+0xdea>
 8013fd8:	4b43      	ldr	r3, [pc, #268]	; (80140e8 <Update_Detail+0xee4>)
 8013fda:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8013fde:	461a      	mov	r2, r3
 8013fe0:	4b48      	ldr	r3, [pc, #288]	; (8014104 <Update_Detail+0xf00>)
 8013fe2:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8013fe6:	4613      	mov	r3, r2
 8013fe8:	009b      	lsls	r3, r3, #2
 8013fea:	4413      	add	r3, r2
 8013fec:	00db      	lsls	r3, r3, #3
          scale = (List[PROBEATT].Val?
 8013fee:	60bb      	str	r3, [r7, #8]
          Tmp = ((((Vavg-2048)*(Ak))>>12)+100-List[V0_POSI].Val)*scale;
 8013ff0:	4b48      	ldr	r3, [pc, #288]	; (8014114 <Update_Detail+0xf10>)
 8013ff2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8013ff6:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 8013ffa:	687a      	ldr	r2, [r7, #4]
 8013ffc:	fb02 f303 	mul.w	r3, r2, r3
 8014000:	131b      	asrs	r3, r3, #12
 8014002:	3364      	adds	r3, #100	; 0x64
 8014004:	4a38      	ldr	r2, [pc, #224]	; (80140e8 <Update_Detail+0xee4>)
 8014006:	f9b2 201c 	ldrsh.w	r2, [r2, #28]
 801400a:	1a9a      	subs	r2, r3, r2
 801400c:	68bb      	ldr	r3, [r7, #8]
 801400e:	fb02 f303 	mul.w	r3, r2, r3
 8014012:	613b      	str	r3, [r7, #16]
        }
        DispMeter(i, 1, UNSIGN, Tmp);
 8014014:	f9b7 0016 	ldrsh.w	r0, [r7, #22]
 8014018:	693b      	ldr	r3, [r7, #16]
 801401a:	2201      	movs	r2, #1
 801401c:	2101      	movs	r1, #1
 801401e:	f000 f8fd 	bl	801421c <DispMeter>
        break;
 8014022:	e0a0      	b.n	8014166 <Update_Detail+0xf62>

      case VMAX://��ʾ��ѹ���ֵ
        if(abs(Vmax)<4){
 8014024:	4b39      	ldr	r3, [pc, #228]	; (801410c <Update_Detail+0xf08>)
 8014026:	f9b3 3000 	ldrsh.w	r3, [r3]
 801402a:	2b00      	cmp	r3, #0
 801402c:	bfb8      	it	lt
 801402e:	425b      	neglt	r3, r3
 8014030:	b29b      	uxth	r3, r3
 8014032:	2b03      	cmp	r3, #3
 8014034:	d802      	bhi.n	801403c <Update_Detail+0xe38>
          Tmp = 0.00;
 8014036:	2300      	movs	r3, #0
 8014038:	613b      	str	r3, [r7, #16]
 801403a:	e02e      	b.n	801409a <Update_Detail+0xe96>
        }else{
		  scale = (List[PROBEATT].Val?
 801403c:	4b2a      	ldr	r3, [pc, #168]	; (80140e8 <Update_Detail+0xee4>)
 801403e:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
                  VScale_10X[List[Y_RANGES].Val]:VScale[List[Y_RANGES].Val])*40;
 8014042:	2b00      	cmp	r3, #0
 8014044:	d00b      	beq.n	801405e <Update_Detail+0xe5a>
 8014046:	4b28      	ldr	r3, [pc, #160]	; (80140e8 <Update_Detail+0xee4>)
 8014048:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801404c:	461a      	mov	r2, r3
 801404e:	4b2c      	ldr	r3, [pc, #176]	; (8014100 <Update_Detail+0xefc>)
 8014050:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8014054:	4613      	mov	r3, r2
 8014056:	009b      	lsls	r3, r3, #2
 8014058:	4413      	add	r3, r2
 801405a:	00db      	lsls	r3, r3, #3
 801405c:	e00a      	b.n	8014074 <Update_Detail+0xe70>
 801405e:	4b22      	ldr	r3, [pc, #136]	; (80140e8 <Update_Detail+0xee4>)
 8014060:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8014064:	461a      	mov	r2, r3
 8014066:	4b27      	ldr	r3, [pc, #156]	; (8014104 <Update_Detail+0xf00>)
 8014068:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 801406c:	4613      	mov	r3, r2
 801406e:	009b      	lsls	r3, r3, #2
 8014070:	4413      	add	r3, r2
 8014072:	00db      	lsls	r3, r3, #3
		  scale = (List[PROBEATT].Val?
 8014074:	60bb      	str	r3, [r7, #8]
          Tmp  = ((((Vmax-2048)*(Ak))>>12)+100-List[V0_POSI].Val)*scale;
 8014076:	4b25      	ldr	r3, [pc, #148]	; (801410c <Update_Detail+0xf08>)
 8014078:	f9b3 3000 	ldrsh.w	r3, [r3]
 801407c:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 8014080:	687a      	ldr	r2, [r7, #4]
 8014082:	fb02 f303 	mul.w	r3, r2, r3
 8014086:	131b      	asrs	r3, r3, #12
 8014088:	3364      	adds	r3, #100	; 0x64
 801408a:	4a17      	ldr	r2, [pc, #92]	; (80140e8 <Update_Detail+0xee4>)
 801408c:	f9b2 201c 	ldrsh.w	r2, [r2, #28]
 8014090:	1a9a      	subs	r2, r3, r2
 8014092:	68bb      	ldr	r3, [r7, #8]
 8014094:	fb02 f303 	mul.w	r3, r2, r3
 8014098:	613b      	str	r3, [r7, #16]
        }
        DispMeter(i, 1, UNSIGN, Tmp);
 801409a:	f9b7 0016 	ldrsh.w	r0, [r7, #22]
 801409e:	693b      	ldr	r3, [r7, #16]
 80140a0:	2201      	movs	r2, #1
 80140a2:	2101      	movs	r1, #1
 80140a4:	f000 f8ba 	bl	801421c <DispMeter>
        break;
 80140a8:	e05d      	b.n	8014166 <Update_Detail+0xf62>

      case VMIN://��ʾ��ѹ��Сֵ
        if(abs(Vmin)<4){
 80140aa:	4b19      	ldr	r3, [pc, #100]	; (8014110 <Update_Detail+0xf0c>)
 80140ac:	f9b3 3000 	ldrsh.w	r3, [r3]
 80140b0:	2b00      	cmp	r3, #0
 80140b2:	bfb8      	it	lt
 80140b4:	425b      	neglt	r3, r3
 80140b6:	b29b      	uxth	r3, r3
 80140b8:	2b03      	cmp	r3, #3
 80140ba:	d802      	bhi.n	80140c2 <Update_Detail+0xebe>
          Tmp = 0.00;
 80140bc:	2300      	movs	r3, #0
 80140be:	613b      	str	r3, [r7, #16]
 80140c0:	e048      	b.n	8014154 <Update_Detail+0xf50>
        }else{
		  scale = (List[PROBEATT].Val?
 80140c2:	4b09      	ldr	r3, [pc, #36]	; (80140e8 <Update_Detail+0xee4>)
 80140c4:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
                           VScale_10X[List[Y_RANGES].Val]:VScale[List[Y_RANGES].Val])*40;
 80140c8:	2b00      	cmp	r3, #0
 80140ca:	d025      	beq.n	8014118 <Update_Detail+0xf14>
 80140cc:	4b06      	ldr	r3, [pc, #24]	; (80140e8 <Update_Detail+0xee4>)
 80140ce:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80140d2:	461a      	mov	r2, r3
 80140d4:	4b0a      	ldr	r3, [pc, #40]	; (8014100 <Update_Detail+0xefc>)
 80140d6:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80140da:	4613      	mov	r3, r2
 80140dc:	009b      	lsls	r3, r3, #2
 80140de:	4413      	add	r3, r2
 80140e0:	00db      	lsls	r3, r3, #3
 80140e2:	e024      	b.n	801412e <Update_Detail+0xf2a>
 80140e4:	2000284c 	.word	0x2000284c
 80140e8:	20000298 	.word	0x20000298
 80140ec:	000f4240 	.word	0x000f4240
 80140f0:	080022a0 	.word	0x080022a0
 80140f4:	08002270 	.word	0x08002270
 80140f8:	20006874 	.word	0x20006874
 80140fc:	20002860 	.word	0x20002860
 8014100:	20000270 	.word	0x20000270
 8014104:	08001d68 	.word	0x08001d68
 8014108:	2000687c 	.word	0x2000687c
 801410c:	20002852 	.word	0x20002852
 8014110:	20002864 	.word	0x20002864
 8014114:	20002854 	.word	0x20002854
 8014118:	4b38      	ldr	r3, [pc, #224]	; (80141fc <Update_Detail+0xff8>)
 801411a:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801411e:	461a      	mov	r2, r3
 8014120:	4b37      	ldr	r3, [pc, #220]	; (8014200 <Update_Detail+0xffc>)
 8014122:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8014126:	4613      	mov	r3, r2
 8014128:	009b      	lsls	r3, r3, #2
 801412a:	4413      	add	r3, r2
 801412c:	00db      	lsls	r3, r3, #3
		  scale = (List[PROBEATT].Val?
 801412e:	60bb      	str	r3, [r7, #8]
                  Tmp  = ((((Vmin-2048)*(Ak))>>12)+100-List[V0_POSI].Val)*scale;
 8014130:	4b34      	ldr	r3, [pc, #208]	; (8014204 <Update_Detail+0x1000>)
 8014132:	f9b3 3000 	ldrsh.w	r3, [r3]
 8014136:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 801413a:	687a      	ldr	r2, [r7, #4]
 801413c:	fb02 f303 	mul.w	r3, r2, r3
 8014140:	131b      	asrs	r3, r3, #12
 8014142:	3364      	adds	r3, #100	; 0x64
 8014144:	4a2d      	ldr	r2, [pc, #180]	; (80141fc <Update_Detail+0xff8>)
 8014146:	f9b2 201c 	ldrsh.w	r2, [r2, #28]
 801414a:	1a9a      	subs	r2, r3, r2
 801414c:	68bb      	ldr	r3, [r7, #8]
 801414e:	fb02 f303 	mul.w	r3, r2, r3
 8014152:	613b      	str	r3, [r7, #16]
        }
        DispMeter(i, 1, SIGN, Tmp);
 8014154:	f9b7 0016 	ldrsh.w	r0, [r7, #22]
 8014158:	693b      	ldr	r3, [r7, #16]
 801415a:	2200      	movs	r2, #0
 801415c:	2101      	movs	r1, #1
 801415e:	f000 f85d 	bl	801421c <DispMeter>
        break;
 8014162:	e000      	b.n	8014166 <Update_Detail+0xf62>
        break;
 8014164:	bf00      	nop

        break;

      }
      /**/
      if(Freq_Flag){
 8014166:	4b28      	ldr	r3, [pc, #160]	; (8014208 <Update_Detail+0x1004>)
 8014168:	781b      	ldrb	r3, [r3, #0]
 801416a:	2b00      	cmp	r3, #0
 801416c:	d03a      	beq.n	80141e4 <Update_Detail+0xfe0>
        Freq_Flag = 0;
 801416e:	4b26      	ldr	r3, [pc, #152]	; (8014208 <Update_Detail+0x1004>)
 8014170:	2200      	movs	r2, #0
 8014172:	701a      	strb	r2, [r3, #0]
        FTmp=Edge*25*1000/2;
 8014174:	4b25      	ldr	r3, [pc, #148]	; (801420c <Update_Detail+0x1008>)
 8014176:	681b      	ldr	r3, [r3, #0]
 8014178:	f243 02d4 	movw	r2, #12500	; 0x30d4
 801417c:	fb02 f303 	mul.w	r3, r2, r3
 8014180:	60fb      	str	r3, [r7, #12]
        if(List[TIM_BASE].Val<9)FTmp= FTmp*1000000;
 8014182:	4b1e      	ldr	r3, [pc, #120]	; (80141fc <Update_Detail+0xff8>)
 8014184:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8014188:	2b08      	cmp	r3, #8
 801418a:	dc05      	bgt.n	8014198 <Update_Detail+0xf94>
 801418c:	68fb      	ldr	r3, [r7, #12]
 801418e:	4a20      	ldr	r2, [pc, #128]	; (8014210 <Update_Detail+0x100c>)
 8014190:	fb02 f303 	mul.w	r3, r2, r3
 8014194:	60fb      	str	r3, [r7, #12]
 8014196:	e00a      	b.n	80141ae <Update_Detail+0xfaa>
        else if(List[TIM_BASE].Val<18)FTmp= FTmp*1000;
 8014198:	4b18      	ldr	r3, [pc, #96]	; (80141fc <Update_Detail+0xff8>)
 801419a:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 801419e:	2b11      	cmp	r3, #17
 80141a0:	dc05      	bgt.n	80141ae <Update_Detail+0xfaa>
 80141a2:	68fb      	ldr	r3, [r7, #12]
 80141a4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80141a8:	fb02 f303 	mul.w	r3, r2, r3
 80141ac:	60fb      	str	r3, [r7, #12]
        FTmp=FTmp/Ts[List[TIM_BASE].Val]/DEPTH[List[SMPL_DPTH].Val];
 80141ae:	4b13      	ldr	r3, [pc, #76]	; (80141fc <Update_Detail+0xff8>)
 80141b0:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 80141b4:	461a      	mov	r2, r3
 80141b6:	4b17      	ldr	r3, [pc, #92]	; (8014214 <Update_Detail+0x1010>)
 80141b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80141bc:	461a      	mov	r2, r3
 80141be:	68fb      	ldr	r3, [r7, #12]
 80141c0:	fbb3 f3f2 	udiv	r3, r3, r2
 80141c4:	4a0d      	ldr	r2, [pc, #52]	; (80141fc <Update_Detail+0xff8>)
 80141c6:	f9b2 204c 	ldrsh.w	r2, [r2, #76]	; 0x4c
 80141ca:	4611      	mov	r1, r2
 80141cc:	4a12      	ldr	r2, [pc, #72]	; (8014218 <Update_Detail+0x1014>)
 80141ce:	f932 2011 	ldrsh.w	r2, [r2, r1, lsl #1]
 80141d2:	fbb3 f3f2 	udiv	r3, r3, r2
 80141d6:	60fb      	str	r3, [r7, #12]
        DispFreq(    1, UNSIGN,FTmp);
 80141d8:	68fb      	ldr	r3, [r7, #12]
 80141da:	461a      	mov	r2, r3
 80141dc:	2101      	movs	r1, #1
 80141de:	2001      	movs	r0, #1
 80141e0:	f000 fa08 	bl	80145f4 <DispFreq>
  for(i=Y_RANGES; i<=STANDBY; i++){
 80141e4:	8afb      	ldrh	r3, [r7, #22]
 80141e6:	3301      	adds	r3, #1
 80141e8:	82fb      	strh	r3, [r7, #22]
 80141ea:	8afb      	ldrh	r3, [r7, #22]
 80141ec:	2b29      	cmp	r3, #41	; 0x29
 80141ee:	f67f a849 	bls.w	8013284 <Update_Detail+0x80>
      }
    }
  }

}
 80141f2:	bf00      	nop
 80141f4:	bf00      	nop
 80141f6:	371c      	adds	r7, #28
 80141f8:	46bd      	mov	sp, r7
 80141fa:	bd90      	pop	{r4, r7, pc}
 80141fc:	20000298 	.word	0x20000298
 8014200:	08001d68 	.word	0x08001d68
 8014204:	20002864 	.word	0x20002864
 8014208:	200001cc 	.word	0x200001cc
 801420c:	2000284c 	.word	0x2000284c
 8014210:	000f4240 	.word	0x000f4240
 8014214:	080022a0 	.word	0x080022a0
 8014218:	08002270 	.word	0x08002270

0801421c <DispMeter>:
/*******************************************************************************

*******************************************************************************/
void DispMeter(short Item, char St, char Mode, int Val)
{
 801421c:	b580      	push	{r7, lr}
 801421e:	b084      	sub	sp, #16
 8014220:	af02      	add	r7, sp, #8
 8014222:	603b      	str	r3, [r7, #0]
 8014224:	4603      	mov	r3, r0
 8014226:	80fb      	strh	r3, [r7, #6]
 8014228:	460b      	mov	r3, r1
 801422a:	717b      	strb	r3, [r7, #5]
 801422c:	4613      	mov	r3, r2
 801422e:	713b      	strb	r3, [r7, #4]
  SetColor(GRY, TCOLOR[ME]);
 8014230:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8014234:	4619      	mov	r1, r3
 8014236:	f643 10e7 	movw	r0, #14823	; 0x39e7
 801423a:	f7f9 fcb3 	bl	800dba4 <SetColor>

  Draw_Circle_D(INV, S_X[Item]-3, LABLE_Y, 11, 0, 6*12);
 801423e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8014242:	4a30      	ldr	r2, [pc, #192]	; (8014304 <DispMeter+0xe8>)
 8014244:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8014248:	b29b      	uxth	r3, r3
 801424a:	3b03      	subs	r3, #3
 801424c:	b29b      	uxth	r3, r3
 801424e:	b219      	sxth	r1, r3
 8014250:	2348      	movs	r3, #72	; 0x48
 8014252:	9301      	str	r3, [sp, #4]
 8014254:	2300      	movs	r3, #0
 8014256:	9300      	str	r3, [sp, #0]
 8014258:	230b      	movs	r3, #11
 801425a:	2203      	movs	r2, #3
 801425c:	2001      	movs	r0, #1
 801425e:	f7f9 fd8f 	bl	800dd80 <Draw_Circle_D>
  DispStr(S_X[Item], LABLE_Y, INV, (char *)&Z[Item-FREQUENC]);// ��ʾ������Ŀ����
 8014262:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8014266:	4a27      	ldr	r2, [pc, #156]	; (8014304 <DispMeter+0xe8>)
 8014268:	f932 0013 	ldrsh.w	r0, [r2, r3, lsl #1]
 801426c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8014270:	f1a3 0213 	sub.w	r2, r3, #19
 8014274:	4613      	mov	r3, r2
 8014276:	005b      	lsls	r3, r3, #1
 8014278:	4413      	add	r3, r2
 801427a:	005b      	lsls	r3, r3, #1
 801427c:	4a22      	ldr	r2, [pc, #136]	; (8014308 <DispMeter+0xec>)
 801427e:	4413      	add	r3, r2
 8014280:	2201      	movs	r2, #1
 8014282:	2103      	movs	r1, #3
 8014284:	f7f9 fca6 	bl	800dbd4 <DispStr>
  Value2Str(NumStr, Val, List[Item].PTR, 3, Mode);
 8014288:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801428c:	4a1f      	ldr	r2, [pc, #124]	; (801430c <DispMeter+0xf0>)
 801428e:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 8014292:	793b      	ldrb	r3, [r7, #4]
 8014294:	9300      	str	r3, [sp, #0]
 8014296:	2303      	movs	r3, #3
 8014298:	6839      	ldr	r1, [r7, #0]
 801429a:	481d      	ldr	r0, [pc, #116]	; (8014310 <DispMeter+0xf4>)
 801429c:	f7fd fb72 	bl	8011984 <Value2Str>

  if(St)
 80142a0:	797b      	ldrb	r3, [r7, #5]
 80142a2:	2b00      	cmp	r3, #0
 80142a4:	d01c      	beq.n	80142e0 <DispMeter+0xc4>
  {
    DispStr(S_X[Item]+24, LABLE_Y, INV, ":       ");
 80142a6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80142aa:	4a16      	ldr	r2, [pc, #88]	; (8014304 <DispMeter+0xe8>)
 80142ac:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 80142b0:	b29b      	uxth	r3, r3
 80142b2:	3318      	adds	r3, #24
 80142b4:	b29b      	uxth	r3, r3
 80142b6:	b218      	sxth	r0, r3
 80142b8:	4b16      	ldr	r3, [pc, #88]	; (8014314 <DispMeter+0xf8>)
 80142ba:	2201      	movs	r2, #1
 80142bc:	2103      	movs	r1, #3
 80142be:	f7f9 fc89 	bl	800dbd4 <DispStr>
    DispStr(S_X[Item]+30, LABLE_Y, INV, (char *)NumStr);   // ��ʾ������ֵ+����
 80142c2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80142c6:	4a0f      	ldr	r2, [pc, #60]	; (8014304 <DispMeter+0xe8>)
 80142c8:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 80142cc:	b29b      	uxth	r3, r3
 80142ce:	331e      	adds	r3, #30
 80142d0:	b29b      	uxth	r3, r3
 80142d2:	b218      	sxth	r0, r3
 80142d4:	4b0e      	ldr	r3, [pc, #56]	; (8014310 <DispMeter+0xf4>)
 80142d6:	2201      	movs	r2, #1
 80142d8:	2103      	movs	r1, #3
 80142da:	f7f9 fc7b 	bl	800dbd4 <DispStr>
  }
  else
	  DispStr(S_X[Item]+24, LABLE_Y, INV, ": ----- ");
}
 80142de:	e00d      	b.n	80142fc <DispMeter+0xe0>
	  DispStr(S_X[Item]+24, LABLE_Y, INV, ": ----- ");
 80142e0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80142e4:	4a07      	ldr	r2, [pc, #28]	; (8014304 <DispMeter+0xe8>)
 80142e6:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 80142ea:	b29b      	uxth	r3, r3
 80142ec:	3318      	adds	r3, #24
 80142ee:	b29b      	uxth	r3, r3
 80142f0:	b218      	sxth	r0, r3
 80142f2:	4b09      	ldr	r3, [pc, #36]	; (8014318 <DispMeter+0xfc>)
 80142f4:	2201      	movs	r2, #1
 80142f6:	2103      	movs	r1, #3
 80142f8:	f7f9 fc6c 	bl	800dbd4 <DispStr>
}
 80142fc:	bf00      	nop
 80142fe:	3708      	adds	r7, #8
 8014300:	46bd      	mov	sp, r7
 8014302:	bd80      	pop	{r7, pc}
 8014304:	0800215c 	.word	0x0800215c
 8014308:	08001d18 	.word	0x08001d18
 801430c:	20000298 	.word	0x20000298
 8014310:	20002838 	.word	0x20002838
 8014314:	080009d4 	.word	0x080009d4
 8014318:	080009e0 	.word	0x080009e0

0801431c <DispStatus>:

/*******************************************************************************

*******************************************************************************/
void DispStatus(void)
{
 801431c:	b580      	push	{r7, lr}
 801431e:	b084      	sub	sp, #16
 8014320:	af02      	add	r7, sp, #8
  char* p;
  SetColor(GRY, (Status & STOP) ? RED : TCOLOR[TRG]);
 8014322:	4b20      	ldr	r3, [pc, #128]	; (80143a4 <DispStatus+0x88>)
 8014324:	f9b3 3000 	ldrsh.w	r3, [r3]
 8014328:	b29b      	uxth	r3, r3
 801432a:	f003 0301 	and.w	r3, r3, #1
 801432e:	2b00      	cmp	r3, #0
 8014330:	d102      	bne.n	8014338 <DispStatus+0x1c>
 8014332:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8014336:	e000      	b.n	801433a <DispStatus+0x1e>
 8014338:	231f      	movs	r3, #31
 801433a:	4619      	mov	r1, r3
 801433c:	f643 10e7 	movw	r0, #14823	; 0x39e7
 8014340:	f7f9 fc30 	bl	800dba4 <SetColor>
  p =(Status & STOP)?(char*)M :(List[SYNCMODE].PTR +(List[SYNCMODE].Val)*6);
 8014344:	4b17      	ldr	r3, [pc, #92]	; (80143a4 <DispStatus+0x88>)
 8014346:	f9b3 3000 	ldrsh.w	r3, [r3]
 801434a:	b29b      	uxth	r3, r3
 801434c:	f003 0301 	and.w	r3, r3, #1
 8014350:	2b00      	cmp	r3, #0
 8014352:	d10b      	bne.n	801436c <DispStatus+0x50>
 8014354:	4b14      	ldr	r3, [pc, #80]	; (80143a8 <DispStatus+0x8c>)
 8014356:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8014358:	4b13      	ldr	r3, [pc, #76]	; (80143a8 <DispStatus+0x8c>)
 801435a:	f9b3 306c 	ldrsh.w	r3, [r3, #108]	; 0x6c
 801435e:	4619      	mov	r1, r3
 8014360:	460b      	mov	r3, r1
 8014362:	005b      	lsls	r3, r3, #1
 8014364:	440b      	add	r3, r1
 8014366:	005b      	lsls	r3, r3, #1
 8014368:	4413      	add	r3, r2
 801436a:	e000      	b.n	801436e <DispStatus+0x52>
 801436c:	4b0f      	ldr	r3, [pc, #60]	; (80143ac <DispStatus+0x90>)
 801436e:	607b      	str	r3, [r7, #4]
  Draw_Circle_D(INV, S_X[SYNCMODE]-3, TITLE_Y_POS, 11, 1, 6*4);
 8014370:	f240 1321 	movw	r3, #289	; 0x121
 8014374:	b29b      	uxth	r3, r3
 8014376:	3b03      	subs	r3, #3
 8014378:	b29b      	uxth	r3, r3
 801437a:	b219      	sxth	r1, r3
 801437c:	2318      	movs	r3, #24
 801437e:	9301      	str	r3, [sp, #4]
 8014380:	2301      	movs	r3, #1
 8014382:	9300      	str	r3, [sp, #0]
 8014384:	230b      	movs	r3, #11
 8014386:	22e1      	movs	r2, #225	; 0xe1
 8014388:	2001      	movs	r0, #1
 801438a:	f7f9 fcf9 	bl	800dd80 <Draw_Circle_D>
  DispStr(S_X[SYNCMODE], TITLE_Y_POS, INV, (char *)p);
 801438e:	f240 1021 	movw	r0, #289	; 0x121
 8014392:	687b      	ldr	r3, [r7, #4]
 8014394:	2201      	movs	r2, #1
 8014396:	21e1      	movs	r1, #225	; 0xe1
 8014398:	f7f9 fc1c 	bl	800dbd4 <DispStr>
}
 801439c:	bf00      	nop
 801439e:	3708      	adds	r7, #8
 80143a0:	46bd      	mov	sp, r7
 80143a2:	bd80      	pop	{r7, pc}
 80143a4:	200007a0 	.word	0x200007a0
 80143a8:	20000298 	.word	0x20000298
 80143ac:	08001cb4 	.word	0x08001cb4

080143b0 <Update_Windows>:

/*******************************************************************************
���»���������λ��
*******************************************************************************/
void Update_Windows(void)
{
 80143b0:	b580      	push	{r7, lr}
 80143b2:	b084      	sub	sp, #16
 80143b4:	af00      	add	r7, sp, #0
  short  x0,x,y,i,j,Width;
  short  Depth =  DEPTH[List[SMPL_DPTH].Val];
 80143b6:	4b6a      	ldr	r3, [pc, #424]	; (8014560 <Update_Windows+0x1b0>)
 80143b8:	f9b3 304c 	ldrsh.w	r3, [r3, #76]	; 0x4c
 80143bc:	461a      	mov	r2, r3
 80143be:	4b69      	ldr	r3, [pc, #420]	; (8014564 <Update_Windows+0x1b4>)
 80143c0:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 80143c4:	80fb      	strh	r3, [r7, #6]
  Width =(300*300)/Depth;
 80143c6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80143ca:	4a67      	ldr	r2, [pc, #412]	; (8014568 <Update_Windows+0x1b8>)
 80143cc:	fb92 f3f3 	sdiv	r3, r2, r3
 80143d0:	80bb      	strh	r3, [r7, #4]
  if(Current == XN &&(PopType & LIST_POP) )
 80143d2:	4b66      	ldr	r3, [pc, #408]	; (801456c <Update_Windows+0x1bc>)
 80143d4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80143d8:	2b01      	cmp	r3, #1
 80143da:	f040 80a9 	bne.w	8014530 <Update_Windows+0x180>
 80143de:	4b64      	ldr	r3, [pc, #400]	; (8014570 <Update_Windows+0x1c0>)
 80143e0:	781b      	ldrb	r3, [r3, #0]
 80143e2:	f003 0302 	and.w	r3, r3, #2
 80143e6:	2b00      	cmp	r3, #0
 80143e8:	f000 80a2 	beq.w	8014530 <Update_Windows+0x180>
  {
      Windows_Pop = 1;
 80143ec:	4b61      	ldr	r3, [pc, #388]	; (8014574 <Update_Windows+0x1c4>)
 80143ee:	2201      	movs	r2, #1
 80143f0:	701a      	strb	r2, [r3, #0]
      x0=2+(List[VIEWPOSI].Val)*300/Depth;
 80143f2:	4b5b      	ldr	r3, [pc, #364]	; (8014560 <Update_Windows+0x1b0>)
 80143f4:	f9b3 3044 	ldrsh.w	r3, [r3, #68]	; 0x44
 80143f8:	461a      	mov	r2, r3
 80143fa:	f44f 7396 	mov.w	r3, #300	; 0x12c
 80143fe:	fb03 f202 	mul.w	r2, r3, r2
 8014402:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8014406:	fb92 f3f3 	sdiv	r3, r2, r3
 801440a:	b29b      	uxth	r3, r3
 801440c:	3302      	adds	r3, #2
 801440e:	b29b      	uxth	r3, r3
 8014410:	81fb      	strh	r3, [r7, #14]
      x=2;
 8014412:	2302      	movs	r3, #2
 8014414:	81bb      	strh	r3, [r7, #12]
      y=15;
 8014416:	230f      	movs	r3, #15
 8014418:	807b      	strh	r3, [r7, #2]
      for(i=0;i<300;i++){    //��������
 801441a:	2300      	movs	r3, #0
 801441c:	817b      	strh	r3, [r7, #10]
 801441e:	e029      	b.n	8014474 <Update_Windows+0xc4>
        LCD_Set_Posi(x++, y);
 8014420:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8014424:	b293      	uxth	r3, r2
 8014426:	3301      	adds	r3, #1
 8014428:	b29b      	uxth	r3, r3
 801442a:	81bb      	strh	r3, [r7, #12]
 801442c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8014430:	4619      	mov	r1, r3
 8014432:	4610      	mov	r0, r2
 8014434:	f7fd fe66 	bl	8012104 <LCD_Set_Posi>
        LCD_Set_Pixel(DAR);
 8014438:	f643 10e7 	movw	r0, #14823	; 0x39e7
 801443c:	f7fd feb0 	bl	80121a0 <LCD_Set_Pixel>
        for(j=0; j<2; j++)LCD_Set_Pixel(RED);
 8014440:	2300      	movs	r3, #0
 8014442:	813b      	strh	r3, [r7, #8]
 8014444:	e008      	b.n	8014458 <Update_Windows+0xa8>
 8014446:	201f      	movs	r0, #31
 8014448:	f7fd feaa 	bl	80121a0 <LCD_Set_Pixel>
 801444c:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8014450:	b29b      	uxth	r3, r3
 8014452:	3301      	adds	r3, #1
 8014454:	b29b      	uxth	r3, r3
 8014456:	813b      	strh	r3, [r7, #8]
 8014458:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 801445c:	2b01      	cmp	r3, #1
 801445e:	ddf2      	ble.n	8014446 <Update_Windows+0x96>
        LCD_Set_Pixel(DAR);
 8014460:	f643 10e7 	movw	r0, #14823	; 0x39e7
 8014464:	f7fd fe9c 	bl	80121a0 <LCD_Set_Pixel>
      for(i=0;i<300;i++){    //��������
 8014468:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 801446c:	b29b      	uxth	r3, r3
 801446e:	3301      	adds	r3, #1
 8014470:	b29b      	uxth	r3, r3
 8014472:	817b      	strh	r3, [r7, #10]
 8014474:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8014478:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 801447c:	dbd0      	blt.n	8014420 <Update_Windows+0x70>
      }
      if(Current == XN && (MenuNow[XN]==SMPL_DPTH ))
 801447e:	4b3b      	ldr	r3, [pc, #236]	; (801456c <Update_Windows+0x1bc>)
 8014480:	f9b3 3000 	ldrsh.w	r3, [r3]
 8014484:	2b01      	cmp	r3, #1
 8014486:	d122      	bne.n	80144ce <Update_Windows+0x11e>
 8014488:	4b3b      	ldr	r3, [pc, #236]	; (8014578 <Update_Windows+0x1c8>)
 801448a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801448e:	2b09      	cmp	r3, #9
 8014490:	d11d      	bne.n	80144ce <Update_Windows+0x11e>
      {  //Depthѡ��
        if(Key_Buffer == KEYCODE_RIGHT || Key_Buffer == KEYCODE_LEFT)
 8014492:	4b3a      	ldr	r3, [pc, #232]	; (801457c <Update_Windows+0x1cc>)
 8014494:	781b      	ldrb	r3, [r3, #0]
 8014496:	b2db      	uxtb	r3, r3
 8014498:	2b06      	cmp	r3, #6
 801449a:	d004      	beq.n	80144a6 <Update_Windows+0xf6>
 801449c:	4b37      	ldr	r3, [pc, #220]	; (801457c <Update_Windows+0x1cc>)
 801449e:	781b      	ldrb	r3, [r3, #0]
 80144a0:	b2db      	uxtb	r3, r3
 80144a2:	2b05      	cmp	r3, #5
 80144a4:	d113      	bne.n	80144ce <Update_Windows+0x11e>
        {  //ѡ���б䶯ʱ�ı�Ԥ����λ��
          List[VIEWPOSI].Val= 0;
 80144a6:	4b2e      	ldr	r3, [pc, #184]	; (8014560 <Update_Windows+0x1b0>)
 80144a8:	2200      	movs	r2, #0
 80144aa:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
          x0=2+(List[VIEWPOSI].Val)*300/Depth;
 80144ae:	4b2c      	ldr	r3, [pc, #176]	; (8014560 <Update_Windows+0x1b0>)
 80144b0:	f9b3 3044 	ldrsh.w	r3, [r3, #68]	; 0x44
 80144b4:	461a      	mov	r2, r3
 80144b6:	f44f 7396 	mov.w	r3, #300	; 0x12c
 80144ba:	fb03 f202 	mul.w	r2, r3, r2
 80144be:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80144c2:	fb92 f3f3 	sdiv	r3, r2, r3
 80144c6:	b29b      	uxth	r3, r3
 80144c8:	3302      	adds	r3, #2
 80144ca:	b29b      	uxth	r3, r3
 80144cc:	81fb      	strh	r3, [r7, #14]
        }
      }
      x = x0;               //��ǰ�����ڻ�����λ��
 80144ce:	89fb      	ldrh	r3, [r7, #14]
 80144d0:	81bb      	strh	r3, [r7, #12]
      y=15;
 80144d2:	230f      	movs	r3, #15
 80144d4:	807b      	strh	r3, [r7, #2]
      for(i=0;i<Width;i++){
 80144d6:	2300      	movs	r3, #0
 80144d8:	817b      	strh	r3, [r7, #10]
 80144da:	e022      	b.n	8014522 <Update_Windows+0x172>
        LCD_Set_Posi(x++, y);
 80144dc:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 80144e0:	b293      	uxth	r3, r2
 80144e2:	3301      	adds	r3, #1
 80144e4:	b29b      	uxth	r3, r3
 80144e6:	81bb      	strh	r3, [r7, #12]
 80144e8:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80144ec:	4619      	mov	r1, r3
 80144ee:	4610      	mov	r0, r2
 80144f0:	f7fd fe08 	bl	8012104 <LCD_Set_Posi>
        for(j=0; j<4; j++)LCD_Set_Pixel(GRN);
 80144f4:	2300      	movs	r3, #0
 80144f6:	813b      	strh	r3, [r7, #8]
 80144f8:	e009      	b.n	801450e <Update_Windows+0x15e>
 80144fa:	f44f 60fc 	mov.w	r0, #2016	; 0x7e0
 80144fe:	f7fd fe4f 	bl	80121a0 <LCD_Set_Pixel>
 8014502:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8014506:	b29b      	uxth	r3, r3
 8014508:	3301      	adds	r3, #1
 801450a:	b29b      	uxth	r3, r3
 801450c:	813b      	strh	r3, [r7, #8]
 801450e:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8014512:	2b03      	cmp	r3, #3
 8014514:	ddf1      	ble.n	80144fa <Update_Windows+0x14a>
      for(i=0;i<Width;i++){
 8014516:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 801451a:	b29b      	uxth	r3, r3
 801451c:	3301      	adds	r3, #1
 801451e:	b29b      	uxth	r3, r3
 8014520:	817b      	strh	r3, [r7, #10]
 8014522:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8014526:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 801452a:	429a      	cmp	r2, r3
 801452c:	dbd6      	blt.n	80144dc <Update_Windows+0x12c>
  if(Current == XN &&(PopType & LIST_POP) )
 801452e:	e012      	b.n	8014556 <Update_Windows+0x1a6>
      }
  }
  else if(Current == XN &&!(PopType & LIST_POP))
 8014530:	4b0e      	ldr	r3, [pc, #56]	; (801456c <Update_Windows+0x1bc>)
 8014532:	f9b3 3000 	ldrsh.w	r3, [r3]
 8014536:	2b01      	cmp	r3, #1
 8014538:	d10d      	bne.n	8014556 <Update_Windows+0x1a6>
 801453a:	4b0d      	ldr	r3, [pc, #52]	; (8014570 <Update_Windows+0x1c0>)
 801453c:	781b      	ldrb	r3, [r3, #0]
 801453e:	f003 0302 	and.w	r3, r3, #2
 8014542:	2b00      	cmp	r3, #0
 8014544:	d107      	bne.n	8014556 <Update_Windows+0x1a6>
  {
    Windows_Pop = 0;
 8014546:	4b0b      	ldr	r3, [pc, #44]	; (8014574 <Update_Windows+0x1c4>)
 8014548:	2200      	movs	r2, #0
 801454a:	701a      	strb	r2, [r3, #0]
    Clr_WavePosi(DAR);
 801454c:	f643 10e7 	movw	r0, #14823	; 0x39e7
 8014550:	f000 f816 	bl	8014580 <Clr_WavePosi>
  }
}
 8014554:	e7ff      	b.n	8014556 <Update_Windows+0x1a6>
 8014556:	bf00      	nop
 8014558:	3710      	adds	r7, #16
 801455a:	46bd      	mov	sp, r7
 801455c:	bd80      	pop	{r7, pc}
 801455e:	bf00      	nop
 8014560:	20000298 	.word	0x20000298
 8014564:	08002270 	.word	0x08002270
 8014568:	00015f90 	.word	0x00015f90
 801456c:	2000079e 	.word	0x2000079e
 8014570:	2000078c 	.word	0x2000078c
 8014574:	200007a6 	.word	0x200007a6
 8014578:	20000538 	.word	0x20000538
 801457c:	2000077d 	.word	0x2000077d

08014580 <Clr_WavePosi>:

/*******************************************************************************
 void Clr_WavePosi(u16 Col)  �������λ����ʾ
*******************************************************************************/
void Clr_WavePosi(short Col)
{
 8014580:	b580      	push	{r7, lr}
 8014582:	b084      	sub	sp, #16
 8014584:	af00      	add	r7, sp, #0
 8014586:	4603      	mov	r3, r0
 8014588:	80fb      	strh	r3, [r7, #6]
  short x,y,i,j;
  x=2;
 801458a:	2302      	movs	r3, #2
 801458c:	81fb      	strh	r3, [r7, #14]
  y=14;
 801458e:	230e      	movs	r3, #14
 8014590:	813b      	strh	r3, [r7, #8]
  for(i=0;i<300;i++)
 8014592:	2300      	movs	r3, #0
 8014594:	81bb      	strh	r3, [r7, #12]
 8014596:	e022      	b.n	80145de <Clr_WavePosi+0x5e>
  {
    LCD_Set_Posi(x++, y);
 8014598:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 801459c:	b293      	uxth	r3, r2
 801459e:	3301      	adds	r3, #1
 80145a0:	b29b      	uxth	r3, r3
 80145a2:	81fb      	strh	r3, [r7, #14]
 80145a4:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 80145a8:	4619      	mov	r1, r3
 80145aa:	4610      	mov	r0, r2
 80145ac:	f7fd fdaa 	bl	8012104 <LCD_Set_Posi>
    for(j=0; j<6; j++)
 80145b0:	2300      	movs	r3, #0
 80145b2:	817b      	strh	r3, [r7, #10]
 80145b4:	e009      	b.n	80145ca <Clr_WavePosi+0x4a>
    	LCD_Set_Pixel(Col);
 80145b6:	88fb      	ldrh	r3, [r7, #6]
 80145b8:	4618      	mov	r0, r3
 80145ba:	f7fd fdf1 	bl	80121a0 <LCD_Set_Pixel>
    for(j=0; j<6; j++)
 80145be:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80145c2:	b29b      	uxth	r3, r3
 80145c4:	3301      	adds	r3, #1
 80145c6:	b29b      	uxth	r3, r3
 80145c8:	817b      	strh	r3, [r7, #10]
 80145ca:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80145ce:	2b05      	cmp	r3, #5
 80145d0:	ddf1      	ble.n	80145b6 <Clr_WavePosi+0x36>
  for(i=0;i<300;i++)
 80145d2:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80145d6:	b29b      	uxth	r3, r3
 80145d8:	3301      	adds	r3, #1
 80145da:	b29b      	uxth	r3, r3
 80145dc:	81bb      	strh	r3, [r7, #12]
 80145de:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80145e2:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 80145e6:	dbd7      	blt.n	8014598 <Clr_WavePosi+0x18>
  }
}
 80145e8:	bf00      	nop
 80145ea:	bf00      	nop
 80145ec:	3710      	adds	r7, #16
 80145ee:	46bd      	mov	sp, r7
 80145f0:	bd80      	pop	{r7, pc}
	...

080145f4 <DispFreq>:

/*******************************************************************************

*******************************************************************************/
void DispFreq(char St, char Mode, int Val)
{
 80145f4:	b580      	push	{r7, lr}
 80145f6:	b084      	sub	sp, #16
 80145f8:	af02      	add	r7, sp, #8
 80145fa:	4603      	mov	r3, r0
 80145fc:	603a      	str	r2, [r7, #0]
 80145fe:	71fb      	strb	r3, [r7, #7]
 8014600:	460b      	mov	r3, r1
 8014602:	71bb      	strb	r3, [r7, #6]
  SetColor(GRY, TCOLOR[ME]);
 8014604:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8014608:	4619      	mov	r1, r3
 801460a:	f643 10e7 	movw	r0, #14823	; 0x39e7
 801460e:	f7f9 fac9 	bl	800dba4 <SetColor>

  Draw_Circle_D(INV, S_X[FREQUENC]-6*15-3+4, LABLE_Y, 11, 0, 6*12);
 8014612:	23a2      	movs	r3, #162	; 0xa2
 8014614:	b29b      	uxth	r3, r3
 8014616:	3b59      	subs	r3, #89	; 0x59
 8014618:	b29b      	uxth	r3, r3
 801461a:	b219      	sxth	r1, r3
 801461c:	2348      	movs	r3, #72	; 0x48
 801461e:	9301      	str	r3, [sp, #4]
 8014620:	2300      	movs	r3, #0
 8014622:	9300      	str	r3, [sp, #0]
 8014624:	230b      	movs	r3, #11
 8014626:	2203      	movs	r2, #3
 8014628:	2001      	movs	r0, #1
 801462a:	f7f9 fba9 	bl	800dd80 <Draw_Circle_D>
  DispStr(S_X[FREQUENC]-6*15+4, LABLE_Y, INV, (char*)&Z[0]);// ��ʾ������Ŀ����
 801462e:	23a2      	movs	r3, #162	; 0xa2
 8014630:	b29b      	uxth	r3, r3
 8014632:	3b56      	subs	r3, #86	; 0x56
 8014634:	b29b      	uxth	r3, r3
 8014636:	b218      	sxth	r0, r3
 8014638:	4b1a      	ldr	r3, [pc, #104]	; (80146a4 <DispFreq+0xb0>)
 801463a:	2201      	movs	r2, #1
 801463c:	2103      	movs	r1, #3
 801463e:	f7f9 fac9 	bl	800dbd4 <DispStr>
  Value2Str(NumStr, Val, List[FREQUENC].PTR, 3, Mode);
 8014642:	4b19      	ldr	r3, [pc, #100]	; (80146a8 <DispFreq+0xb4>)
 8014644:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 8014648:	79bb      	ldrb	r3, [r7, #6]
 801464a:	9300      	str	r3, [sp, #0]
 801464c:	2303      	movs	r3, #3
 801464e:	6839      	ldr	r1, [r7, #0]
 8014650:	4816      	ldr	r0, [pc, #88]	; (80146ac <DispFreq+0xb8>)
 8014652:	f7fd f997 	bl	8011984 <Value2Str>

  if(St) {
 8014656:	79fb      	ldrb	r3, [r7, #7]
 8014658:	2b00      	cmp	r3, #0
 801465a:	d014      	beq.n	8014686 <DispFreq+0x92>
    DispStr(24+S_X[FREQUENC]-6*15+4, LABLE_Y, INV, ":       ");
 801465c:	23a2      	movs	r3, #162	; 0xa2
 801465e:	b29b      	uxth	r3, r3
 8014660:	3b3e      	subs	r3, #62	; 0x3e
 8014662:	b29b      	uxth	r3, r3
 8014664:	b218      	sxth	r0, r3
 8014666:	4b12      	ldr	r3, [pc, #72]	; (80146b0 <DispFreq+0xbc>)
 8014668:	2201      	movs	r2, #1
 801466a:	2103      	movs	r1, #3
 801466c:	f7f9 fab2 	bl	800dbd4 <DispStr>
    DispStr(30+S_X[FREQUENC]-6*15+4, LABLE_Y, INV, (char *)NumStr);   // ��ʾ������ֵ+����
 8014670:	23a2      	movs	r3, #162	; 0xa2
 8014672:	b29b      	uxth	r3, r3
 8014674:	3b38      	subs	r3, #56	; 0x38
 8014676:	b29b      	uxth	r3, r3
 8014678:	b218      	sxth	r0, r3
 801467a:	4b0c      	ldr	r3, [pc, #48]	; (80146ac <DispFreq+0xb8>)
 801467c:	2201      	movs	r2, #1
 801467e:	2103      	movs	r1, #3
 8014680:	f7f9 faa8 	bl	800dbd4 <DispStr>
  }
  else   DispStr(24+S_X[FREQUENC]-6*15+4, LABLE_Y, INV, ": ---- ");
}
 8014684:	e009      	b.n	801469a <DispFreq+0xa6>
  else   DispStr(24+S_X[FREQUENC]-6*15+4, LABLE_Y, INV, ": ---- ");
 8014686:	23a2      	movs	r3, #162	; 0xa2
 8014688:	b29b      	uxth	r3, r3
 801468a:	3b3e      	subs	r3, #62	; 0x3e
 801468c:	b29b      	uxth	r3, r3
 801468e:	b218      	sxth	r0, r3
 8014690:	4b08      	ldr	r3, [pc, #32]	; (80146b4 <DispFreq+0xc0>)
 8014692:	2201      	movs	r2, #1
 8014694:	2103      	movs	r1, #3
 8014696:	f7f9 fa9d 	bl	800dbd4 <DispStr>
}
 801469a:	bf00      	nop
 801469c:	3708      	adds	r7, #8
 801469e:	46bd      	mov	sp, r7
 80146a0:	bd80      	pop	{r7, pc}
 80146a2:	bf00      	nop
 80146a4:	08001d18 	.word	0x08001d18
 80146a8:	20000298 	.word	0x20000298
 80146ac:	20002838 	.word	0x20002838
 80146b0:	080009d4 	.word	0x080009d4
 80146b4:	080009ec 	.word	0x080009ec

080146b8 <Show_List>:

/*******************************************************************************
 Show_List: ���ò˵���λ�á��ߴ硢��ɫ����ʾ����
*******************************************************************************/
void Show_List(void)
{
 80146b8:	b580      	push	{r7, lr}
 80146ba:	b088      	sub	sp, #32
 80146bc:	af02      	add	r7, sp, #8
  short i, Ny0, Nx0, CurrentMax = MU_BEGN[Current]+ M_ITEMS[Current];
 80146be:	4b59      	ldr	r3, [pc, #356]	; (8014824 <Show_List+0x16c>)
 80146c0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80146c4:	461a      	mov	r2, r3
 80146c6:	4b58      	ldr	r3, [pc, #352]	; (8014828 <Show_List+0x170>)
 80146c8:	5c9b      	ldrb	r3, [r3, r2]
 80146ca:	b29a      	uxth	r2, r3
 80146cc:	4b55      	ldr	r3, [pc, #340]	; (8014824 <Show_List+0x16c>)
 80146ce:	f9b3 3000 	ldrsh.w	r3, [r3]
 80146d2:	4619      	mov	r1, r3
 80146d4:	4b55      	ldr	r3, [pc, #340]	; (801482c <Show_List+0x174>)
 80146d6:	5c5b      	ldrb	r3, [r3, r1]
 80146d8:	b29b      	uxth	r3, r3
 80146da:	4413      	add	r3, r2
 80146dc:	b29b      	uxth	r3, r3
 80146de:	827b      	strh	r3, [r7, #18]
  char  Flag = 0;
 80146e0:	2300      	movs	r3, #0
 80146e2:	757b      	strb	r3, [r7, #21]
  char  str[12];
  ParamTab[BXx1]= BLOCK_X[Current];
 80146e4:	4b4f      	ldr	r3, [pc, #316]	; (8014824 <Show_List+0x16c>)
 80146e6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80146ea:	461a      	mov	r2, r3
 80146ec:	4b50      	ldr	r3, [pc, #320]	; (8014830 <Show_List+0x178>)
 80146ee:	5c9b      	ldrb	r3, [r3, r2]
 80146f0:	b21a      	sxth	r2, r3
 80146f2:	4b50      	ldr	r3, [pc, #320]	; (8014834 <Show_List+0x17c>)
 80146f4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  ParamTab[BYx2]= BLOCK_Y[Current]*2;
 80146f8:	4b4a      	ldr	r3, [pc, #296]	; (8014824 <Show_List+0x16c>)
 80146fa:	f9b3 3000 	ldrsh.w	r3, [r3]
 80146fe:	461a      	mov	r2, r3
 8014700:	4b4d      	ldr	r3, [pc, #308]	; (8014838 <Show_List+0x180>)
 8014702:	5c9b      	ldrb	r3, [r3, r2]
 8014704:	b29b      	uxth	r3, r3
 8014706:	005b      	lsls	r3, r3, #1
 8014708:	b29b      	uxth	r3, r3
 801470a:	b21a      	sxth	r2, r3
 801470c:	4b49      	ldr	r3, [pc, #292]	; (8014834 <Show_List+0x17c>)
 801470e:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
  ParamTab[WXx1]= BLOCK_W[Current];
 8014712:	4b44      	ldr	r3, [pc, #272]	; (8014824 <Show_List+0x16c>)
 8014714:	f9b3 3000 	ldrsh.w	r3, [r3]
 8014718:	461a      	mov	r2, r3
 801471a:	4b48      	ldr	r3, [pc, #288]	; (801483c <Show_List+0x184>)
 801471c:	5c9b      	ldrb	r3, [r3, r2]
 801471e:	b21a      	sxth	r2, r3
 8014720:	4b44      	ldr	r3, [pc, #272]	; (8014834 <Show_List+0x17c>)
 8014722:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  ParamTab[HYx2]=(M_ITEMS[Current]+1)*32;
 8014726:	4b3f      	ldr	r3, [pc, #252]	; (8014824 <Show_List+0x16c>)
 8014728:	f9b3 3000 	ldrsh.w	r3, [r3]
 801472c:	461a      	mov	r2, r3
 801472e:	4b3f      	ldr	r3, [pc, #252]	; (801482c <Show_List+0x174>)
 8014730:	5c9b      	ldrb	r3, [r3, r2]
 8014732:	3301      	adds	r3, #1
 8014734:	b29b      	uxth	r3, r3
 8014736:	015b      	lsls	r3, r3, #5
 8014738:	b29b      	uxth	r3, r3
 801473a:	b21a      	sxth	r2, r3
 801473c:	4b3d      	ldr	r3, [pc, #244]	; (8014834 <Show_List+0x17c>)
 801473e:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
  PopColor(WHT, DAR);
 8014742:	f643 11e7 	movw	r1, #14823	; 0x39e7
 8014746:	f64f 70ff 	movw	r0, #65535	; 0xffff
 801474a:	f7f9 ff95 	bl	800e678 <PopColor>
  Buil_Pop();
 801474e:	f7f9 fe85 	bl	800e45c <Buil_Pop>
  for(i=MU_BEGN[Current]; i<CurrentMax; i++){
 8014752:	4b34      	ldr	r3, [pc, #208]	; (8014824 <Show_List+0x16c>)
 8014754:	f9b3 3000 	ldrsh.w	r3, [r3]
 8014758:	461a      	mov	r2, r3
 801475a:	4b33      	ldr	r3, [pc, #204]	; (8014828 <Show_List+0x170>)
 801475c:	5c9b      	ldrb	r3, [r3, r2]
 801475e:	82fb      	strh	r3, [r7, #22]
 8014760:	e054      	b.n	801480c <Show_List+0x154>
    if(i == MenuNow[Current]) {
 8014762:	4b30      	ldr	r3, [pc, #192]	; (8014824 <Show_List+0x16c>)
 8014764:	f9b3 3000 	ldrsh.w	r3, [r3]
 8014768:	461a      	mov	r2, r3
 801476a:	4b35      	ldr	r3, [pc, #212]	; (8014840 <Show_List+0x188>)
 801476c:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8014770:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8014774:	429a      	cmp	r2, r3
 8014776:	d102      	bne.n	801477e <Show_List+0xc6>
      Flag = INV;
 8014778:	2301      	movs	r3, #1
 801477a:	757b      	strb	r3, [r7, #21]
 801477c:	e007      	b.n	801478e <Show_List+0xd6>
    }
    else                      {
      PopColor(WHT, DAR);
 801477e:	f643 11e7 	movw	r1, #14823	; 0x39e7
 8014782:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8014786:	f7f9 ff77 	bl	800e678 <PopColor>
      Flag = PRN;
 801478a:	2300      	movs	r3, #0
 801478c:	757b      	strb	r3, [r7, #21]
    }
    Ny0 = ((CurrentMax - i)*17 - 10);
 801478e:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8014792:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8014796:	1ad3      	subs	r3, r2, r3
 8014798:	b29b      	uxth	r3, r3
 801479a:	461a      	mov	r2, r3
 801479c:	0112      	lsls	r2, r2, #4
 801479e:	4413      	add	r3, r2
 80147a0:	b29b      	uxth	r3, r3
 80147a2:	3b0a      	subs	r3, #10
 80147a4:	b29b      	uxth	r3, r3
 80147a6:	823b      	strh	r3, [r7, #16]
    Nx0 = N_X ;
 80147a8:	2304      	movs	r3, #4
 80147aa:	81fb      	strh	r3, [r7, #14]
    memset(str,0,12);
 80147ac:	463b      	mov	r3, r7
 80147ae:	220c      	movs	r2, #12
 80147b0:	2100      	movs	r1, #0
 80147b2:	4618      	mov	r0, r3
 80147b4:	f00e fa50 	bl	8022c58 <memset>
    memcpy(str,&ESTR[i],10);
 80147b8:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80147bc:	4613      	mov	r3, r2
 80147be:	009b      	lsls	r3, r3, #2
 80147c0:	4413      	add	r3, r2
 80147c2:	005b      	lsls	r3, r3, #1
 80147c4:	4a1f      	ldr	r2, [pc, #124]	; (8014844 <Show_List+0x18c>)
 80147c6:	1899      	adds	r1, r3, r2
 80147c8:	463b      	mov	r3, r7
 80147ca:	220a      	movs	r2, #10
 80147cc:	4618      	mov	r0, r3
 80147ce:	f00e fa35 	bl	8022c3c <memcpy>
    NoteSTR(Nx0, Ny0, Flag, (char *)str);
 80147d2:	463b      	mov	r3, r7
 80147d4:	7d7a      	ldrb	r2, [r7, #21]
 80147d6:	f9b7 1010 	ldrsh.w	r1, [r7, #16]
 80147da:	f9b7 000e 	ldrsh.w	r0, [r7, #14]
 80147de:	f7fa f89b 	bl	800e918 <NoteSTR>
    Note_4Point(PRN, Nx0, Ny0, strlen((char*)str), Font6x8_H);
 80147e2:	463b      	mov	r3, r7
 80147e4:	4618      	mov	r0, r3
 80147e6:	f7f7 fc2b 	bl	800c040 <strlen>
 80147ea:	4603      	mov	r3, r0
 80147ec:	b2db      	uxtb	r3, r3
 80147ee:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 80147f2:	f9b7 100e 	ldrsh.w	r1, [r7, #14]
 80147f6:	200a      	movs	r0, #10
 80147f8:	9000      	str	r0, [sp, #0]
 80147fa:	2000      	movs	r0, #0
 80147fc:	f7fa f932 	bl	800ea64 <Note_4Point>
  for(i=MU_BEGN[Current]; i<CurrentMax; i++){
 8014800:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8014804:	b29b      	uxth	r3, r3
 8014806:	3301      	adds	r3, #1
 8014808:	b29b      	uxth	r3, r3
 801480a:	82fb      	strh	r3, [r7, #22]
 801480c:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8014810:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8014814:	429a      	cmp	r2, r3
 8014816:	dba4      	blt.n	8014762 <Show_List+0xaa>
  }
  List_Pop();
 8014818:	f7f9 ff5e 	bl	800e6d8 <List_Pop>
}
 801481c:	bf00      	nop
 801481e:	3718      	adds	r7, #24
 8014820:	46bd      	mov	sp, r7
 8014822:	bd80      	pop	{r7, pc}
 8014824:	2000079e 	.word	0x2000079e
 8014828:	08001f40 	.word	0x08001f40
 801482c:	08001f48 	.word	0x08001f48
 8014830:	08002144 	.word	0x08002144
 8014834:	20000140 	.word	0x20000140
 8014838:	0800214c 	.word	0x0800214c
 801483c:	08002154 	.word	0x08002154
 8014840:	20000538 	.word	0x20000538
 8014844:	08001f50 	.word	0x08001f50

08014848 <DispFileInfo>:

/*******************************************************************************

*******************************************************************************/
void DispFileInfo(char Info)
{
 8014848:	b580      	push	{r7, lr}
 801484a:	b084      	sub	sp, #16
 801484c:	af02      	add	r7, sp, #8
 801484e:	4603      	mov	r3, r0
 8014850:	71fb      	strb	r3, [r7, #7]
  SetColor(DAR, BLU);
 8014852:	f64f 4110 	movw	r1, #64528	; 0xfc10
 8014856:	f643 10e7 	movw	r0, #14823	; 0x39e7
 801485a:	f7f9 f9a3 	bl	800dba4 <SetColor>
  Draw_Circle_D(INV, S_X[SAVE_BMP]-3, LABLE_Y, 11, 0, 6*11);
 801485e:	23f8      	movs	r3, #248	; 0xf8
 8014860:	b29b      	uxth	r3, r3
 8014862:	3b03      	subs	r3, #3
 8014864:	b29b      	uxth	r3, r3
 8014866:	b219      	sxth	r1, r3
 8014868:	2342      	movs	r3, #66	; 0x42
 801486a:	9301      	str	r3, [sp, #4]
 801486c:	2300      	movs	r3, #0
 801486e:	9300      	str	r3, [sp, #0]
 8014870:	230b      	movs	r3, #11
 8014872:	2203      	movs	r2, #3
 8014874:	2001      	movs	r0, #1
 8014876:	f7f9 fa83 	bl	800dd80 <Draw_Circle_D>
  DispStr(S_X[SAVE_BMP], LABLE_Y, INV, (char *)(&FnNote+14*Info));
 801487a:	20f8      	movs	r0, #248	; 0xf8
 801487c:	79fb      	ldrb	r3, [r7, #7]
 801487e:	f44f 7275 	mov.w	r2, #980	; 0x3d4
 8014882:	fb02 f303 	mul.w	r3, r2, r3
 8014886:	4a07      	ldr	r2, [pc, #28]	; (80148a4 <DispFileInfo+0x5c>)
 8014888:	4413      	add	r3, r2
 801488a:	2201      	movs	r2, #1
 801488c:	2103      	movs	r1, #3
 801488e:	f7f9 f9a1 	bl	800dbd4 <DispStr>
  HAL_Delay(2000);
 8014892:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8014896:	f003 fdab 	bl	80183f0 <HAL_Delay>

}
 801489a:	bf00      	nop
 801489c:	3708      	adds	r7, #8
 801489e:	46bd      	mov	sp, r7
 80148a0:	bd80      	pop	{r7, pc}
 80148a2:	bf00      	nop
 80148a4:	080022f0 	.word	0x080022f0

080148a8 <DispBMPInfo>:

/*******************************************************************************

*******************************************************************************/
void DispBMPInfo(void)
{
 80148a8:	b580      	push	{r7, lr}
 80148aa:	b082      	sub	sp, #8
 80148ac:	af02      	add	r7, sp, #8
  SetColor(GRY, TCOLOR[FN]);
 80148ae:	f64f 4310 	movw	r3, #64528	; 0xfc10
 80148b2:	4619      	mov	r1, r3
 80148b4:	f643 10e7 	movw	r0, #14823	; 0x39e7
 80148b8:	f7f9 f974 	bl	800dba4 <SetColor>
  u8ToDec3(NumStr, List[SAVE_BMP].Val);
 80148bc:	4b1a      	ldr	r3, [pc, #104]	; (8014928 <DispBMPInfo+0x80>)
 80148be:	f9b3 30ec 	ldrsh.w	r3, [r3, #236]	; 0xec
 80148c2:	b2db      	uxtb	r3, r3
 80148c4:	4619      	mov	r1, r3
 80148c6:	4819      	ldr	r0, [pc, #100]	; (801492c <DispBMPInfo+0x84>)
 80148c8:	f7fc fff4 	bl	80118b4 <u8ToDec3>
  Draw_Circle_D(INV, S_X[SAVE_BMP]-3, LABLE_Y, 11, 0, 6*11);
 80148cc:	23f8      	movs	r3, #248	; 0xf8
 80148ce:	b29b      	uxth	r3, r3
 80148d0:	3b03      	subs	r3, #3
 80148d2:	b29b      	uxth	r3, r3
 80148d4:	b219      	sxth	r1, r3
 80148d6:	2342      	movs	r3, #66	; 0x42
 80148d8:	9301      	str	r3, [sp, #4]
 80148da:	2300      	movs	r3, #0
 80148dc:	9300      	str	r3, [sp, #0]
 80148de:	230b      	movs	r3, #11
 80148e0:	2203      	movs	r2, #3
 80148e2:	2001      	movs	r0, #1
 80148e4:	f7f9 fa4c 	bl	800dd80 <Draw_Circle_D>
  DispStr(S_X[SAVE_BMP],    LABLE_Y, INV, ("Save"));//0513
 80148e8:	20f8      	movs	r0, #248	; 0xf8
 80148ea:	4b11      	ldr	r3, [pc, #68]	; (8014930 <DispBMPInfo+0x88>)
 80148ec:	2201      	movs	r2, #1
 80148ee:	2103      	movs	r1, #3
 80148f0:	f7f9 f970 	bl	800dbd4 <DispStr>
  DispStr(S_X[SAVE_BMP]+24, LABLE_Y, INV, (char *)NumStr);
 80148f4:	23f8      	movs	r3, #248	; 0xf8
 80148f6:	b29b      	uxth	r3, r3
 80148f8:	3318      	adds	r3, #24
 80148fa:	b29b      	uxth	r3, r3
 80148fc:	b218      	sxth	r0, r3
 80148fe:	4b0b      	ldr	r3, [pc, #44]	; (801492c <DispBMPInfo+0x84>)
 8014900:	2201      	movs	r2, #1
 8014902:	2103      	movs	r1, #3
 8014904:	f7f9 f966 	bl	800dbd4 <DispStr>
  DispStr(S_X[SAVE_BMP]+42, LABLE_Y, INV, (List[SAVE_BMP].PTR ));
 8014908:	23f8      	movs	r3, #248	; 0xf8
 801490a:	b29b      	uxth	r3, r3
 801490c:	332a      	adds	r3, #42	; 0x2a
 801490e:	b29b      	uxth	r3, r3
 8014910:	b218      	sxth	r0, r3
 8014912:	4b05      	ldr	r3, [pc, #20]	; (8014928 <DispBMPInfo+0x80>)
 8014914:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8014918:	2201      	movs	r2, #1
 801491a:	2103      	movs	r1, #3
 801491c:	f7f9 f95a 	bl	800dbd4 <DispStr>
}
 8014920:	bf00      	nop
 8014922:	46bd      	mov	sp, r7
 8014924:	bd80      	pop	{r7, pc}
 8014926:	bf00      	nop
 8014928:	20000298 	.word	0x20000298
 801492c:	20002838 	.word	0x20002838
 8014930:	08000950 	.word	0x08000950

08014934 <Update_Proc_All>:

/*******************************************************************************
Update_Proc_All  ȫ��ˢ��
*******************************************************************************/
void Update_Proc_All(void)
{
 8014934:	b590      	push	{r4, r7, lr}
 8014936:	b087      	sub	sp, #28
 8014938:	af02      	add	r7, sp, #8
  short i;
  long Tmp = 0;
 801493a:	2300      	movs	r3, #0
 801493c:	60bb      	str	r3, [r7, #8]
  short Range = List[Y_RANGES].Val + 10*List[PROBEATT].Val;
 801493e:	4ba3      	ldr	r3, [pc, #652]	; (8014bcc <Update_Proc_All+0x298>)
 8014940:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8014944:	b29a      	uxth	r2, r3
 8014946:	4ba1      	ldr	r3, [pc, #644]	; (8014bcc <Update_Proc_All+0x298>)
 8014948:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 801494c:	b29b      	uxth	r3, r3
 801494e:	4619      	mov	r1, r3
 8014950:	0089      	lsls	r1, r1, #2
 8014952:	440b      	add	r3, r1
 8014954:	005b      	lsls	r3, r3, #1
 8014956:	b29b      	uxth	r3, r3
 8014958:	4413      	add	r3, r2
 801495a:	b29b      	uxth	r3, r3
 801495c:	80fb      	strh	r3, [r7, #6]

  for(i=Y_RANGES; i<=STANDBY; i++){
 801495e:	2300      	movs	r3, #0
 8014960:	81fb      	strh	r3, [r7, #14]
 8014962:	e015      	b.n	8014990 <Update_Proc_All+0x5c>
    List[i].Flg |= UPD;
 8014964:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8014968:	4a98      	ldr	r2, [pc, #608]	; (8014bcc <Update_Proc_All+0x298>)
 801496a:	00db      	lsls	r3, r3, #3
 801496c:	4413      	add	r3, r2
 801496e:	799a      	ldrb	r2, [r3, #6]
 8014970:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8014974:	f042 0220 	orr.w	r2, r2, #32
 8014978:	b2d1      	uxtb	r1, r2
 801497a:	4a94      	ldr	r2, [pc, #592]	; (8014bcc <Update_Proc_All+0x298>)
 801497c:	00db      	lsls	r3, r3, #3
 801497e:	4413      	add	r3, r2
 8014980:	460a      	mov	r2, r1
 8014982:	719a      	strb	r2, [r3, #6]
  for(i=Y_RANGES; i<=STANDBY; i++){
 8014984:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8014988:	b29b      	uxth	r3, r3
 801498a:	3301      	adds	r3, #1
 801498c:	b29b      	uxth	r3, r3
 801498e:	81fb      	strh	r3, [r7, #14]
 8014990:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8014994:	2b29      	cmp	r3, #41	; 0x29
 8014996:	dde5      	ble.n	8014964 <Update_Proc_All+0x30>
  }

  for(i=Y_RANGES; i<=STANDBY; i++){
 8014998:	2300      	movs	r3, #0
 801499a:	81fb      	strh	r3, [r7, #14]
 801499c:	e1be      	b.n	8014d1c <Update_Proc_All+0x3e8>
    if(List[i].Flg & UPD){
 801499e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80149a2:	4a8a      	ldr	r2, [pc, #552]	; (8014bcc <Update_Proc_All+0x298>)
 80149a4:	00db      	lsls	r3, r3, #3
 80149a6:	4413      	add	r3, r2
 80149a8:	799b      	ldrb	r3, [r3, #6]
 80149aa:	f003 0320 	and.w	r3, r3, #32
 80149ae:	2b00      	cmp	r3, #0
 80149b0:	f000 81ad 	beq.w	8014d0e <Update_Proc_All+0x3da>
      List[i].Flg &= ~UPD;
 80149b4:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80149b8:	4a84      	ldr	r2, [pc, #528]	; (8014bcc <Update_Proc_All+0x298>)
 80149ba:	00db      	lsls	r3, r3, #3
 80149bc:	4413      	add	r3, r2
 80149be:	799a      	ldrb	r2, [r3, #6]
 80149c0:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80149c4:	f022 0220 	bic.w	r2, r2, #32
 80149c8:	b2d1      	uxtb	r1, r2
 80149ca:	4a80      	ldr	r2, [pc, #512]	; (8014bcc <Update_Proc_All+0x298>)
 80149cc:	00db      	lsls	r3, r3, #3
 80149ce:	4413      	add	r3, r2
 80149d0:	460a      	mov	r2, r1
 80149d2:	719a      	strb	r2, [r3, #6]
      switch (i){
 80149d4:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80149d8:	2b12      	cmp	r3, #18
 80149da:	f300 8199 	bgt.w	8014d10 <Update_Proc_All+0x3dc>
 80149de:	2b0d      	cmp	r3, #13
 80149e0:	f280 80ac 	bge.w	8014b3c <Update_Proc_All+0x208>
 80149e4:	2b03      	cmp	r3, #3
 80149e6:	dc02      	bgt.n	80149ee <Update_Proc_All+0xba>
 80149e8:	2b00      	cmp	r3, #0
 80149ea:	da04      	bge.n	80149f6 <Update_Proc_All+0xc2>
 80149ec:	e190      	b.n	8014d10 <Update_Proc_All+0x3dc>
 80149ee:	2b07      	cmp	r3, #7
 80149f0:	f000 815a 	beq.w	8014ca8 <Update_Proc_All+0x374>
 80149f4:	e18c      	b.n	8014d10 <Update_Proc_All+0x3dc>
      case Y_RANGES:   // ˢ����ʾ Y ���̵�λ
      case PROBEATT:   // ˢ����ʾ̽ͷ˥������
      case COUPLING:   // ˢ����ʾ���ģʽ״̬
      case V0_POSI:    // ˢ����ʾ��ֱƫ��λ��
        SetColor(GRY, TCOLOR[YN]);
 80149f6:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 80149fa:	4619      	mov	r1, r3
 80149fc:	f643 10e7 	movw	r0, #14823	; 0x39e7
 8014a00:	f7f9 f8d0 	bl	800dba4 <SetColor>
        if(i == Y_RANGES || i == COUPLING||i == PROBEATT){
 8014a04:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8014a08:	2b00      	cmp	r3, #0
 8014a0a:	d007      	beq.n	8014a1c <Update_Proc_All+0xe8>
 8014a0c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8014a10:	2b01      	cmp	r3, #1
 8014a12:	d003      	beq.n	8014a1c <Update_Proc_All+0xe8>
 8014a14:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8014a18:	2b02      	cmp	r3, #2
 8014a1a:	d138      	bne.n	8014a8e <Update_Proc_All+0x15a>
          Draw_Circle_D(INV, S_X[Y_RANGES]-3, TITLE_Y_POS, 11, 0, 6*7);
 8014a1c:	232f      	movs	r3, #47	; 0x2f
 8014a1e:	b29b      	uxth	r3, r3
 8014a20:	3b03      	subs	r3, #3
 8014a22:	b29b      	uxth	r3, r3
 8014a24:	b219      	sxth	r1, r3
 8014a26:	232a      	movs	r3, #42	; 0x2a
 8014a28:	9301      	str	r3, [sp, #4]
 8014a2a:	2300      	movs	r3, #0
 8014a2c:	9300      	str	r3, [sp, #0]
 8014a2e:	230b      	movs	r3, #11
 8014a30:	22e1      	movs	r2, #225	; 0xe1
 8014a32:	2001      	movs	r0, #1
 8014a34:	f7f9 f9a4 	bl	800dd80 <Draw_Circle_D>
          DispStr(S_X[Y_RANGES], TITLE_Y_POS, INV,      (List[Y_RANGES].PTR +(Range)*6));
 8014a38:	202f      	movs	r0, #47	; 0x2f
 8014a3a:	4b64      	ldr	r3, [pc, #400]	; (8014bcc <Update_Proc_All+0x298>)
 8014a3c:	6819      	ldr	r1, [r3, #0]
 8014a3e:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8014a42:	4613      	mov	r3, r2
 8014a44:	005b      	lsls	r3, r3, #1
 8014a46:	4413      	add	r3, r2
 8014a48:	005b      	lsls	r3, r3, #1
 8014a4a:	440b      	add	r3, r1
 8014a4c:	2201      	movs	r2, #1
 8014a4e:	21e1      	movs	r1, #225	; 0xe1
 8014a50:	f7f9 f8c0 	bl	800dbd4 <DispStr>
          DispStr(S_X[COUPLING], TITLE_Y_POS, INV,      (List[COUPLING].PTR +(List[COUPLING].Val)*6));
 8014a54:	2047      	movs	r0, #71	; 0x47
 8014a56:	4b5d      	ldr	r3, [pc, #372]	; (8014bcc <Update_Proc_All+0x298>)
 8014a58:	689a      	ldr	r2, [r3, #8]
 8014a5a:	4b5c      	ldr	r3, [pc, #368]	; (8014bcc <Update_Proc_All+0x298>)
 8014a5c:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8014a60:	4619      	mov	r1, r3
 8014a62:	460b      	mov	r3, r1
 8014a64:	005b      	lsls	r3, r3, #1
 8014a66:	440b      	add	r3, r1
 8014a68:	005b      	lsls	r3, r3, #1
 8014a6a:	4413      	add	r3, r2
 8014a6c:	2201      	movs	r2, #1
 8014a6e:	21e1      	movs	r1, #225	; 0xe1
 8014a70:	f7f9 f8b0 	bl	800dbd4 <DispStr>
          DispStr10x14(S_X[PROBEATT], TITLE_Y_POS, PRN+SYMB,(List[PROBEATT].Val?("A"):("B")));
 8014a74:	2020      	movs	r0, #32
 8014a76:	4b55      	ldr	r3, [pc, #340]	; (8014bcc <Update_Proc_All+0x298>)
 8014a78:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8014a7c:	2b00      	cmp	r3, #0
 8014a7e:	d001      	beq.n	8014a84 <Update_Proc_All+0x150>
 8014a80:	4b53      	ldr	r3, [pc, #332]	; (8014bd0 <Update_Proc_All+0x29c>)
 8014a82:	e000      	b.n	8014a86 <Update_Proc_All+0x152>
 8014a84:	4b53      	ldr	r3, [pc, #332]	; (8014bd4 <Update_Proc_All+0x2a0>)
 8014a86:	2210      	movs	r2, #16
 8014a88:	21e1      	movs	r1, #225	; 0xe1
 8014a8a:	f7f9 fb0b 	bl	800e0a4 <DispStr10x14>
        }
        ParamTab[P1x2] = 2*((List[V0_POSI].Val+1));
 8014a8e:	4b4f      	ldr	r3, [pc, #316]	; (8014bcc <Update_Proc_All+0x298>)
 8014a90:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 8014a94:	3301      	adds	r3, #1
 8014a96:	b29b      	uxth	r3, r3
 8014a98:	005b      	lsls	r3, r3, #1
 8014a9a:	b29b      	uxth	r3, r3
 8014a9c:	b21a      	sxth	r2, r3
 8014a9e:	4b4e      	ldr	r3, [pc, #312]	; (8014bd8 <Update_Proc_All+0x2a4>)
 8014aa0:	829a      	strh	r2, [r3, #20]
        ParamTab[VTx2] = ParamTab[P1x2]+ 2*(List[THRESHOLD].Val+1);
 8014aa2:	4b4d      	ldr	r3, [pc, #308]	; (8014bd8 <Update_Proc_All+0x2a4>)
 8014aa4:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8014aa8:	b29a      	uxth	r2, r3
 8014aaa:	4b48      	ldr	r3, [pc, #288]	; (8014bcc <Update_Proc_All+0x298>)
 8014aac:	f9b3 3084 	ldrsh.w	r3, [r3, #132]	; 0x84
 8014ab0:	3301      	adds	r3, #1
 8014ab2:	b29b      	uxth	r3, r3
 8014ab4:	005b      	lsls	r3, r3, #1
 8014ab6:	b29b      	uxth	r3, r3
 8014ab8:	4413      	add	r3, r2
 8014aba:	b29b      	uxth	r3, r3
 8014abc:	b21a      	sxth	r2, r3
 8014abe:	4b46      	ldr	r3, [pc, #280]	; (8014bd8 <Update_Proc_All+0x2a4>)
 8014ac0:	839a      	strh	r2, [r3, #28]

        StateA =  (List[Y_RANGES].Val>5)?ACT: GND;                                    //ACT GND �ӵػ򼤻�״̬
 8014ac2:	4b42      	ldr	r3, [pc, #264]	; (8014bcc <Update_Proc_All+0x298>)
 8014ac4:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8014ac8:	2b05      	cmp	r3, #5
 8014aca:	dd01      	ble.n	8014ad0 <Update_Proc_All+0x19c>
 8014acc:	2204      	movs	r2, #4
 8014ace:	e000      	b.n	8014ad2 <Update_Proc_All+0x19e>
 8014ad0:	2200      	movs	r2, #0
 8014ad2:	4b42      	ldr	r3, [pc, #264]	; (8014bdc <Update_Proc_All+0x2a8>)
 8014ad4:	801a      	strh	r2, [r3, #0]
        GainA  = List[Y_RANGES].Val;
 8014ad6:	4b3d      	ldr	r3, [pc, #244]	; (8014bcc <Update_Proc_All+0x298>)
 8014ad8:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
 8014adc:	4b40      	ldr	r3, [pc, #256]	; (8014be0 <Update_Proc_All+0x2ac>)
 8014ade:	801a      	strh	r2, [r3, #0]
        if(List[Y_RANGES].Val>1)
 8014ae0:	4b3a      	ldr	r3, [pc, #232]	; (8014bcc <Update_Proc_All+0x298>)
 8014ae2:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8014ae6:	2b01      	cmp	r3, #1
 8014ae8:	dd03      	ble.n	8014af2 <Update_Proc_All+0x1be>
          KindA  = HV;
 8014aea:	4b3e      	ldr	r3, [pc, #248]	; (8014be4 <Update_Proc_All+0x2b0>)
 8014aec:	2201      	movs	r2, #1
 8014aee:	801a      	strh	r2, [r3, #0]
 8014af0:	e002      	b.n	8014af8 <Update_Proc_All+0x1c4>
        else
          KindA  = LV;                //Ch1ѡ���ѹ���ѹ����
 8014af2:	4b3c      	ldr	r3, [pc, #240]	; (8014be4 <Update_Proc_All+0x2b0>)
 8014af4:	2200      	movs	r2, #0
 8014af6:	801a      	strh	r2, [r3, #0]

        CouplA = (List[COUPLING].Val)? AC : DC;                      // AC);  //AC/DC��Ϸ�ʽ
 8014af8:	4b34      	ldr	r3, [pc, #208]	; (8014bcc <Update_Proc_All+0x298>)
 8014afa:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8014afe:	2b00      	cmp	r3, #0
 8014b00:	d001      	beq.n	8014b06 <Update_Proc_All+0x1d2>
 8014b02:	2200      	movs	r2, #0
 8014b04:	e000      	b.n	8014b08 <Update_Proc_All+0x1d4>
 8014b06:	2202      	movs	r2, #2
 8014b08:	4b37      	ldr	r3, [pc, #220]	; (8014be8 <Update_Proc_All+0x2b4>)
 8014b0a:	801a      	strh	r2, [r3, #0]
        BIOS_Ctrl(AiRANGE, KindA+CouplA+StateA);             //Ch1״̬ˢ��
 8014b0c:	4b35      	ldr	r3, [pc, #212]	; (8014be4 <Update_Proc_All+0x2b0>)
 8014b0e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8014b12:	461a      	mov	r2, r3
 8014b14:	4b34      	ldr	r3, [pc, #208]	; (8014be8 <Update_Proc_All+0x2b4>)
 8014b16:	f9b3 3000 	ldrsh.w	r3, [r3]
 8014b1a:	4413      	add	r3, r2
 8014b1c:	4a2f      	ldr	r2, [pc, #188]	; (8014bdc <Update_Proc_All+0x2a8>)
 8014b1e:	f9b2 2000 	ldrsh.w	r2, [r2]
 8014b22:	4413      	add	r3, r2
 8014b24:	4619      	mov	r1, r3
 8014b26:	2007      	movs	r0, #7
 8014b28:	f7f7 fc20 	bl	800c36c <BIOS_Ctrl>
        AiPosi(List[V0_POSI].Val);                        //Ch1Ӳ����Ӧλ��
 8014b2c:	4b27      	ldr	r3, [pc, #156]	; (8014bcc <Update_Proc_All+0x298>)
 8014b2e:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 8014b32:	b2db      	uxtb	r3, r3
 8014b34:	4618      	mov	r0, r3
 8014b36:	f000 fa0f 	bl	8014f58 <AiPosi>

        break;
 8014b3a:	e0e9      	b.n	8014d10 <Update_Proc_All+0x3dc>
      case TR_MODE:   // ˢ����ʾ������ʽ
      case FITTRIGG:  // ˢ����ʾ�Զ�������ֵ
      case THRESHOLD: // ˢ����ʾ������ֵ
      case SENSITIVE: // ˢ����ʾ����������
      case TR_TYPE:   // ˢ����ʾ�α���ʽ
        DispStatus();
 8014b3c:	f7ff fbee 	bl	801431c <DispStatus>
        SetColor(GRY, TCOLOR[TRG]);
 8014b40:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8014b44:	4619      	mov	r1, r3
 8014b46:	f643 10e7 	movw	r0, #14823	; 0x39e7
 8014b4a:	f7f9 f82b 	bl	800dba4 <SetColor>
        if(i == TR_MODE || i==SENSITIVE)
 8014b4e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8014b52:	2b0e      	cmp	r3, #14
 8014b54:	d003      	beq.n	8014b5e <Update_Proc_All+0x22a>
 8014b56:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8014b5a:	2b11      	cmp	r3, #17
 8014b5c:	d11a      	bne.n	8014b94 <Update_Proc_All+0x260>
        {
          Draw_Circle_D(INV, S_X[TR_MODE]-3, TITLE_Y_POS, 11, 0, 6*8);
 8014b5e:	23dd      	movs	r3, #221	; 0xdd
 8014b60:	b29b      	uxth	r3, r3
 8014b62:	3b03      	subs	r3, #3
 8014b64:	b29b      	uxth	r3, r3
 8014b66:	b219      	sxth	r1, r3
 8014b68:	2330      	movs	r3, #48	; 0x30
 8014b6a:	9301      	str	r3, [sp, #4]
 8014b6c:	2300      	movs	r3, #0
 8014b6e:	9300      	str	r3, [sp, #0]
 8014b70:	230b      	movs	r3, #11
 8014b72:	22e1      	movs	r2, #225	; 0xe1
 8014b74:	2001      	movs	r0, #1
 8014b76:	f7f9 f903 	bl	800dd80 <Draw_Circle_D>
          DispStr10x14(S_X[TR_MODE], TITLE_Y_POS, INV+SYMB,(List[TR_MODE].Val?("D"):("C")));
 8014b7a:	20dd      	movs	r0, #221	; 0xdd
 8014b7c:	4b13      	ldr	r3, [pc, #76]	; (8014bcc <Update_Proc_All+0x298>)
 8014b7e:	f9b3 3074 	ldrsh.w	r3, [r3, #116]	; 0x74
 8014b82:	2b00      	cmp	r3, #0
 8014b84:	d001      	beq.n	8014b8a <Update_Proc_All+0x256>
 8014b86:	4b19      	ldr	r3, [pc, #100]	; (8014bec <Update_Proc_All+0x2b8>)
 8014b88:	e000      	b.n	8014b8c <Update_Proc_All+0x258>
 8014b8a:	4b19      	ldr	r3, [pc, #100]	; (8014bf0 <Update_Proc_All+0x2bc>)
 8014b8c:	2211      	movs	r2, #17
 8014b8e:	21e1      	movs	r1, #225	; 0xe1
 8014b90:	f7f9 fa88 	bl	800e0a4 <DispStr10x14>
        }
        if(i == FITTRIGG)
 8014b94:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8014b98:	2b0f      	cmp	r3, #15
 8014b9a:	d132      	bne.n	8014c02 <Update_Proc_All+0x2ce>
        {
          DispStr10x14(S_X[FITTRIGG], TITLE_Y_POS, PRN+SYMB,(List[FITTRIGG].Val?("F"):("B")));
 8014b9c:	20cf      	movs	r0, #207	; 0xcf
 8014b9e:	4b0b      	ldr	r3, [pc, #44]	; (8014bcc <Update_Proc_All+0x298>)
 8014ba0:	f9b3 307c 	ldrsh.w	r3, [r3, #124]	; 0x7c
 8014ba4:	2b00      	cmp	r3, #0
 8014ba6:	d001      	beq.n	8014bac <Update_Proc_All+0x278>
 8014ba8:	4b12      	ldr	r3, [pc, #72]	; (8014bf4 <Update_Proc_All+0x2c0>)
 8014baa:	e000      	b.n	8014bae <Update_Proc_All+0x27a>
 8014bac:	4b09      	ldr	r3, [pc, #36]	; (8014bd4 <Update_Proc_All+0x2a0>)
 8014bae:	2210      	movs	r2, #16
 8014bb0:	21e1      	movs	r1, #225	; 0xe1
 8014bb2:	f7f9 fa77 	bl	800e0a4 <DispStr10x14>
          if(List[FITTRIGG].Val)KEYTIME = 300;
 8014bb6:	4b05      	ldr	r3, [pc, #20]	; (8014bcc <Update_Proc_All+0x298>)
 8014bb8:	f9b3 307c 	ldrsh.w	r3, [r3, #124]	; 0x7c
 8014bbc:	2b00      	cmp	r3, #0
 8014bbe:	d01d      	beq.n	8014bfc <Update_Proc_All+0x2c8>
 8014bc0:	4b0d      	ldr	r3, [pc, #52]	; (8014bf8 <Update_Proc_All+0x2c4>)
 8014bc2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8014bc6:	801a      	strh	r2, [r3, #0]
 8014bc8:	e01b      	b.n	8014c02 <Update_Proc_All+0x2ce>
 8014bca:	bf00      	nop
 8014bcc:	20000298 	.word	0x20000298
 8014bd0:	08000958 	.word	0x08000958
 8014bd4:	0800095c 	.word	0x0800095c
 8014bd8:	20000140 	.word	0x20000140
 8014bdc:	2000285e 	.word	0x2000285e
 8014be0:	20002846 	.word	0x20002846
 8014be4:	20006882 	.word	0x20006882
 8014be8:	20006884 	.word	0x20006884
 8014bec:	08000988 	.word	0x08000988
 8014bf0:	0800098c 	.word	0x0800098c
 8014bf4:	0800099c 	.word	0x0800099c
 8014bf8:	2000077e 	.word	0x2000077e
          else KEYTIME = 0;
 8014bfc:	4b4c      	ldr	r3, [pc, #304]	; (8014d30 <Update_Proc_All+0x3fc>)
 8014bfe:	2200      	movs	r2, #0
 8014c00:	801a      	strh	r2, [r3, #0]
        };
        ParamTab[VTx2]= ParamTab[P1x2]+2*List[THRESHOLD].Val;
 8014c02:	4b4c      	ldr	r3, [pc, #304]	; (8014d34 <Update_Proc_All+0x400>)
 8014c04:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8014c08:	b29a      	uxth	r2, r3
 8014c0a:	4b4b      	ldr	r3, [pc, #300]	; (8014d38 <Update_Proc_All+0x404>)
 8014c0c:	f9b3 3084 	ldrsh.w	r3, [r3, #132]	; 0x84
 8014c10:	b29b      	uxth	r3, r3
 8014c12:	005b      	lsls	r3, r3, #1
 8014c14:	b29b      	uxth	r3, r3
 8014c16:	4413      	add	r3, r2
 8014c18:	b29b      	uxth	r3, r3
 8014c1a:	b21a      	sxth	r2, r3
 8014c1c:	4b45      	ldr	r3, [pc, #276]	; (8014d34 <Update_Proc_All+0x400>)
 8014c1e:	839a      	strh	r2, [r3, #28]
        Tmp  = List[SENSITIVE].Val;
 8014c20:	4b45      	ldr	r3, [pc, #276]	; (8014d38 <Update_Proc_All+0x404>)
 8014c22:	f9b3 308c 	ldrsh.w	r3, [r3, #140]	; 0x8c
 8014c26:	60bb      	str	r3, [r7, #8]
        Tmp *= X_SCALE[Range]* Exp(V_SCALE[Range]);
 8014c28:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8014c2c:	4a43      	ldr	r2, [pc, #268]	; (8014d3c <Update_Proc_All+0x408>)
 8014c2e:	5cd3      	ldrb	r3, [r2, r3]
 8014c30:	461c      	mov	r4, r3
 8014c32:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8014c36:	4a42      	ldr	r2, [pc, #264]	; (8014d40 <Update_Proc_All+0x40c>)
 8014c38:	5cd3      	ldrb	r3, [r2, r3]
 8014c3a:	4618      	mov	r0, r3
 8014c3c:	f7fc ff9e 	bl	8011b7c <Exp>
 8014c40:	4603      	mov	r3, r0
 8014c42:	fb03 f204 	mul.w	r2, r3, r4
 8014c46:	68bb      	ldr	r3, [r7, #8]
 8014c48:	fb02 f303 	mul.w	r3, r2, r3
 8014c4c:	60bb      	str	r3, [r7, #8]
        Value2Str(NumStr, Tmp, V[2], 2, UNSIGN);
 8014c4e:	2301      	movs	r3, #1
 8014c50:	9300      	str	r3, [sp, #0]
 8014c52:	2302      	movs	r3, #2
 8014c54:	4a3b      	ldr	r2, [pc, #236]	; (8014d44 <Update_Proc_All+0x410>)
 8014c56:	68b9      	ldr	r1, [r7, #8]
 8014c58:	483b      	ldr	r0, [pc, #236]	; (8014d48 <Update_Proc_All+0x414>)
 8014c5a:	f7fc fe93 	bl	8011984 <Value2Str>
        DispStr10x14(S_X[SENSITIVE], TITLE_Y_POS, INV+SYMB,"E");
 8014c5e:	20e7      	movs	r0, #231	; 0xe7
 8014c60:	4b3a      	ldr	r3, [pc, #232]	; (8014d4c <Update_Proc_All+0x418>)
 8014c62:	2211      	movs	r2, #17
 8014c64:	21e1      	movs	r1, #225	; 0xe1
 8014c66:	f7f9 fa1d 	bl	800e0a4 <DispStr10x14>
        DispStr(S_X[SENSITIVE]+9, TITLE_Y_POS, INV,  "     ");
 8014c6a:	23e7      	movs	r3, #231	; 0xe7
 8014c6c:	b29b      	uxth	r3, r3
 8014c6e:	3309      	adds	r3, #9
 8014c70:	b29b      	uxth	r3, r3
 8014c72:	b218      	sxth	r0, r3
 8014c74:	4b36      	ldr	r3, [pc, #216]	; (8014d50 <Update_Proc_All+0x41c>)
 8014c76:	2201      	movs	r2, #1
 8014c78:	21e1      	movs	r1, #225	; 0xe1
 8014c7a:	f7f8 ffab 	bl	800dbd4 <DispStr>
        DispStr(S_X[SENSITIVE]+9, TITLE_Y_POS, INV,  (char *)NumStr);
 8014c7e:	23e7      	movs	r3, #231	; 0xe7
 8014c80:	b29b      	uxth	r3, r3
 8014c82:	3309      	adds	r3, #9
 8014c84:	b29b      	uxth	r3, r3
 8014c86:	b218      	sxth	r0, r3
 8014c88:	4b2f      	ldr	r3, [pc, #188]	; (8014d48 <Update_Proc_All+0x414>)
 8014c8a:	2201      	movs	r2, #1
 8014c8c:	21e1      	movs	r1, #225	; 0xe1
 8014c8e:	f7f8 ffa1 	bl	800dbd4 <DispStr>
        ParamTab[VTF]=(List[TR_TYPE].Val)? L_HID : SHOW;
 8014c92:	4b29      	ldr	r3, [pc, #164]	; (8014d38 <Update_Proc_All+0x404>)
 8014c94:	f9b3 3094 	ldrsh.w	r3, [r3, #148]	; 0x94
 8014c98:	2b00      	cmp	r3, #0
 8014c9a:	d001      	beq.n	8014ca0 <Update_Proc_All+0x36c>
 8014c9c:	2202      	movs	r2, #2
 8014c9e:	e000      	b.n	8014ca2 <Update_Proc_All+0x36e>
 8014ca0:	2200      	movs	r2, #0
 8014ca2:	4b24      	ldr	r3, [pc, #144]	; (8014d34 <Update_Proc_All+0x400>)
 8014ca4:	811a      	strh	r2, [r3, #8]
        break;
 8014ca6:	e033      	b.n	8014d10 <Update_Proc_All+0x3dc>

      case TIM_BASE:  // ˢ����ʾʱ����λ
        SetColor(GRY, TCOLOR[XN]);
 8014ca8:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8014cac:	4619      	mov	r1, r3
 8014cae:	f643 10e7 	movw	r0, #14823	; 0x39e7
 8014cb2:	f7f8 ff77 	bl	800dba4 <SetColor>
        if(i == TIM_BASE)
 8014cb6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8014cba:	2b07      	cmp	r3, #7
 8014cbc:	d120      	bne.n	8014d00 <Update_Proc_All+0x3cc>
        {
          Draw_Circle_D(INV, S_X[i]-3, TITLE_Y_POS, 11, 2, 6*5);
 8014cbe:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8014cc2:	4a24      	ldr	r2, [pc, #144]	; (8014d54 <Update_Proc_All+0x420>)
 8014cc4:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8014cc8:	b29b      	uxth	r3, r3
 8014cca:	3b03      	subs	r3, #3
 8014ccc:	b29b      	uxth	r3, r3
 8014cce:	b219      	sxth	r1, r3
 8014cd0:	231e      	movs	r3, #30
 8014cd2:	9301      	str	r3, [sp, #4]
 8014cd4:	2302      	movs	r3, #2
 8014cd6:	9300      	str	r3, [sp, #0]
 8014cd8:	230b      	movs	r3, #11
 8014cda:	22e1      	movs	r2, #225	; 0xe1
 8014cdc:	2001      	movs	r0, #1
 8014cde:	f7f9 f84f 	bl	800dd80 <Draw_Circle_D>
          DispStr(S_X[i], TITLE_Y_POS, INV, (char *)TimeBase_Str[List[TIM_BASE].Val]);
 8014ce2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8014ce6:	4a1b      	ldr	r2, [pc, #108]	; (8014d54 <Update_Proc_All+0x420>)
 8014ce8:	f932 0013 	ldrsh.w	r0, [r2, r3, lsl #1]
 8014cec:	4b12      	ldr	r3, [pc, #72]	; (8014d38 <Update_Proc_All+0x404>)
 8014cee:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8014cf2:	00db      	lsls	r3, r3, #3
 8014cf4:	4a18      	ldr	r2, [pc, #96]	; (8014d58 <Update_Proc_All+0x424>)
 8014cf6:	4413      	add	r3, r2
 8014cf8:	2201      	movs	r2, #1
 8014cfa:	21e1      	movs	r1, #225	; 0xe1
 8014cfc:	f7f8 ff6a 	bl	800dbd4 <DispStr>
        }
        Set_Base(List[TIM_BASE].Val);          // Ӳ������ɨ��ʱ����λ
 8014d00:	4b0d      	ldr	r3, [pc, #52]	; (8014d38 <Update_Proc_All+0x404>)
 8014d02:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8014d06:	4618      	mov	r0, r3
 8014d08:	f7f7 fc58 	bl	800c5bc <Set_Base>
      break;
 8014d0c:	e000      	b.n	8014d10 <Update_Proc_All+0x3dc>

      }
    }
 8014d0e:	bf00      	nop
  for(i=Y_RANGES; i<=STANDBY; i++){
 8014d10:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8014d14:	b29b      	uxth	r3, r3
 8014d16:	3301      	adds	r3, #1
 8014d18:	b29b      	uxth	r3, r3
 8014d1a:	81fb      	strh	r3, [r7, #14]
 8014d1c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8014d20:	2b29      	cmp	r3, #41	; 0x29
 8014d22:	f77f ae3c 	ble.w	801499e <Update_Proc_All+0x6a>
  }
}
 8014d26:	bf00      	nop
 8014d28:	bf00      	nop
 8014d2a:	3714      	adds	r7, #20
 8014d2c:	46bd      	mov	sp, r7
 8014d2e:	bd90      	pop	{r4, r7, pc}
 8014d30:	2000077e 	.word	0x2000077e
 8014d34:	20000140 	.word	0x20000140
 8014d38:	20000298 	.word	0x20000298
 8014d3c:	08002130 	.word	0x08002130
 8014d40:	08002108 	.word	0x08002108
 8014d44:	08001d0c 	.word	0x08001d0c
 8014d48:	20002838 	.word	0x20002838
 8014d4c:	08000998 	.word	0x08000998
 8014d50:	08000990 	.word	0x08000990
 8014d54:	0800215c 	.word	0x0800215c
 8014d58:	200001d0 	.word	0x200001d0

08014d5c <Align_Set>:

/*******************************************************************************
 Align_Set:
*******************************************************************************/
void Align_Set(void)
{
 8014d5c:	b580      	push	{r7, lr}
 8014d5e:	b082      	sub	sp, #8
 8014d60:	af00      	add	r7, sp, #0
  unsigned short i, TmpA = 0, StA = 0;
 8014d62:	2300      	movs	r3, #0
 8014d64:	807b      	strh	r3, [r7, #2]
 8014d66:	2300      	movs	r3, #0
 8014d68:	80bb      	strh	r3, [r7, #4]

  Analys();
 8014d6a:	f000 f8b1 	bl	8014ed0 <Analys>
  for(i=0; i<100; i++)
 8014d6e:	2300      	movs	r3, #0
 8014d70:	80fb      	strh	r3, [r7, #6]
 8014d72:	e051      	b.n	8014e18 <Align_Set+0xbc>
  {
    AiPosi(100);
 8014d74:	2064      	movs	r0, #100	; 0x64
 8014d76:	f000 f8ef 	bl	8014f58 <AiPosi>
    HAL_Delay(10);                             // Wait 10mS
 8014d7a:	200a      	movs	r0, #10
 8014d7c:	f003 fb38 	bl	80183f0 <HAL_Delay>
    Analys();
 8014d80:	f000 f8a6 	bl	8014ed0 <Analys>
    TmpA = 2048-Vavg;
 8014d84:	4b28      	ldr	r3, [pc, #160]	; (8014e28 <Align_Set+0xcc>)
 8014d86:	f9b3 3000 	ldrsh.w	r3, [r3]
 8014d8a:	b29b      	uxth	r3, r3
 8014d8c:	f5c3 6300 	rsb	r3, r3, #2048	; 0x800
 8014d90:	807b      	strh	r3, [r7, #2]

    if(TmpA != 0)
 8014d92:	887b      	ldrh	r3, [r7, #2]
 8014d94:	2b00      	cmp	r3, #0
 8014d96:	d036      	beq.n	8014e06 <Align_Set+0xaa>
    {
      KpA[KindA+(StateA?1:0)] += 700*TmpA/2048;
 8014d98:	4b24      	ldr	r3, [pc, #144]	; (8014e2c <Align_Set+0xd0>)
 8014d9a:	681a      	ldr	r2, [r3, #0]
 8014d9c:	4b24      	ldr	r3, [pc, #144]	; (8014e30 <Align_Set+0xd4>)
 8014d9e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8014da2:	4619      	mov	r1, r3
 8014da4:	4b23      	ldr	r3, [pc, #140]	; (8014e34 <Align_Set+0xd8>)
 8014da6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8014daa:	2b00      	cmp	r3, #0
 8014dac:	bf14      	ite	ne
 8014dae:	2301      	movne	r3, #1
 8014db0:	2300      	moveq	r3, #0
 8014db2:	b2db      	uxtb	r3, r3
 8014db4:	440b      	add	r3, r1
 8014db6:	005b      	lsls	r3, r3, #1
 8014db8:	4413      	add	r3, r2
 8014dba:	f9b3 3000 	ldrsh.w	r3, [r3]
 8014dbe:	b29a      	uxth	r2, r3
 8014dc0:	887b      	ldrh	r3, [r7, #2]
 8014dc2:	f44f 712f 	mov.w	r1, #700	; 0x2bc
 8014dc6:	fb01 f303 	mul.w	r3, r1, r3
 8014dca:	2b00      	cmp	r3, #0
 8014dcc:	da01      	bge.n	8014dd2 <Align_Set+0x76>
 8014dce:	f203 73ff 	addw	r3, r3, #2047	; 0x7ff
 8014dd2:	12db      	asrs	r3, r3, #11
 8014dd4:	b29b      	uxth	r3, r3
 8014dd6:	4413      	add	r3, r2
 8014dd8:	b299      	uxth	r1, r3
 8014dda:	4b14      	ldr	r3, [pc, #80]	; (8014e2c <Align_Set+0xd0>)
 8014ddc:	681a      	ldr	r2, [r3, #0]
 8014dde:	4b14      	ldr	r3, [pc, #80]	; (8014e30 <Align_Set+0xd4>)
 8014de0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8014de4:	4618      	mov	r0, r3
 8014de6:	4b13      	ldr	r3, [pc, #76]	; (8014e34 <Align_Set+0xd8>)
 8014de8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8014dec:	2b00      	cmp	r3, #0
 8014dee:	bf14      	ite	ne
 8014df0:	2301      	movne	r3, #1
 8014df2:	2300      	moveq	r3, #0
 8014df4:	b2db      	uxtb	r3, r3
 8014df6:	4403      	add	r3, r0
 8014df8:	005b      	lsls	r3, r3, #1
 8014dfa:	4413      	add	r3, r2
 8014dfc:	b20a      	sxth	r2, r1
 8014dfe:	801a      	strh	r2, [r3, #0]
      StA = 0;
 8014e00:	2300      	movs	r3, #0
 8014e02:	80bb      	strh	r3, [r7, #4]
 8014e04:	e002      	b.n	8014e0c <Align_Set+0xb0>
    }
    else
      StA++;
 8014e06:	88bb      	ldrh	r3, [r7, #4]
 8014e08:	3301      	adds	r3, #1
 8014e0a:	80bb      	strh	r3, [r7, #4]

    if(StA > 4)
 8014e0c:	88bb      	ldrh	r3, [r7, #4]
 8014e0e:	2b04      	cmp	r3, #4
 8014e10:	d806      	bhi.n	8014e20 <Align_Set+0xc4>
  for(i=0; i<100; i++)
 8014e12:	88fb      	ldrh	r3, [r7, #6]
 8014e14:	3301      	adds	r3, #1
 8014e16:	80fb      	strh	r3, [r7, #6]
 8014e18:	88fb      	ldrh	r3, [r7, #6]
 8014e1a:	2b63      	cmp	r3, #99	; 0x63
 8014e1c:	d9aa      	bls.n	8014d74 <Align_Set+0x18>
 8014e1e:	e000      	b.n	8014e22 <Align_Set+0xc6>
    	return;
 8014e20:	bf00      	nop
  }

}
 8014e22:	3708      	adds	r7, #8
 8014e24:	46bd      	mov	sp, r7
 8014e26:	bd80      	pop	{r7, pc}
 8014e28:	20002854 	.word	0x20002854
 8014e2c:	20000578 	.word	0x20000578
 8014e30:	20006882 	.word	0x20006882
 8014e34:	2000285e 	.word	0x2000285e

08014e38 <Zero_Align>:

/*******************************************************************************
 Channel's zero alignment:
*******************************************************************************/
void Zero_Align(void)
{
 8014e38:	b580      	push	{r7, lr}
 8014e3a:	af00      	add	r7, sp, #0
  GainA  = 0;//0x20;
 8014e3c:	4b21      	ldr	r3, [pc, #132]	; (8014ec4 <Zero_Align+0x8c>)
 8014e3e:	2200      	movs	r2, #0
 8014e40:	801a      	strh	r2, [r3, #0]
  KindA  = HV;
 8014e42:	4b21      	ldr	r3, [pc, #132]	; (8014ec8 <Zero_Align+0x90>)
 8014e44:	2201      	movs	r2, #1
 8014e46:	801a      	strh	r2, [r3, #0]
  StateA = ACT;
 8014e48:	4b20      	ldr	r3, [pc, #128]	; (8014ecc <Zero_Align+0x94>)
 8014e4a:	2204      	movs	r2, #4
 8014e4c:	801a      	strh	r2, [r3, #0]
  BIOS_Ctrl(AiRANGE, HV+AC+ACT);
 8014e4e:	2105      	movs	r1, #5
 8014e50:	2007      	movs	r0, #7
 8014e52:	f7f7 fa8b 	bl	800c36c <BIOS_Ctrl>
  AiPosi(100);
 8014e56:	2064      	movs	r0, #100	; 0x64
 8014e58:	f000 f87e 	bl	8014f58 <AiPosi>
  HAL_Delay(1000);
 8014e5c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8014e60:	f003 fac6 	bl	80183f0 <HAL_Delay>
  Align_Set();
 8014e64:	f7ff ff7a 	bl	8014d5c <Align_Set>

  GainA  = 0;//0x20;
 8014e68:	4b16      	ldr	r3, [pc, #88]	; (8014ec4 <Zero_Align+0x8c>)
 8014e6a:	2200      	movs	r2, #0
 8014e6c:	801a      	strh	r2, [r3, #0]
  KindA  = HV;
 8014e6e:	4b16      	ldr	r3, [pc, #88]	; (8014ec8 <Zero_Align+0x90>)
 8014e70:	2201      	movs	r2, #1
 8014e72:	801a      	strh	r2, [r3, #0]
  StateA = GND;
 8014e74:	4b15      	ldr	r3, [pc, #84]	; (8014ecc <Zero_Align+0x94>)
 8014e76:	2200      	movs	r2, #0
 8014e78:	801a      	strh	r2, [r3, #0]
  BIOS_Ctrl(AiRANGE, HV+AC+GND);
 8014e7a:	2101      	movs	r1, #1
 8014e7c:	2007      	movs	r0, #7
 8014e7e:	f7f7 fa75 	bl	800c36c <BIOS_Ctrl>
  AiPosi(100);
 8014e82:	2064      	movs	r0, #100	; 0x64
 8014e84:	f000 f868 	bl	8014f58 <AiPosi>
  HAL_Delay(1000);
 8014e88:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8014e8c:	f003 fab0 	bl	80183f0 <HAL_Delay>
  Align_Set();
 8014e90:	f7ff ff64 	bl	8014d5c <Align_Set>

  GainA  = 0;//0x20;
 8014e94:	4b0b      	ldr	r3, [pc, #44]	; (8014ec4 <Zero_Align+0x8c>)
 8014e96:	2200      	movs	r2, #0
 8014e98:	801a      	strh	r2, [r3, #0]
  KindA  = LV;
 8014e9a:	4b0b      	ldr	r3, [pc, #44]	; (8014ec8 <Zero_Align+0x90>)
 8014e9c:	2200      	movs	r2, #0
 8014e9e:	801a      	strh	r2, [r3, #0]
  StateA = GND;
 8014ea0:	4b0a      	ldr	r3, [pc, #40]	; (8014ecc <Zero_Align+0x94>)
 8014ea2:	2200      	movs	r2, #0
 8014ea4:	801a      	strh	r2, [r3, #0]
  BIOS_Ctrl(AiRANGE, LV+AC+GND);
 8014ea6:	2100      	movs	r1, #0
 8014ea8:	2007      	movs	r0, #7
 8014eaa:	f7f7 fa5f 	bl	800c36c <BIOS_Ctrl>
  AiPosi(100);
 8014eae:	2064      	movs	r0, #100	; 0x64
 8014eb0:	f000 f852 	bl	8014f58 <AiPosi>
  HAL_Delay(1000);
 8014eb4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8014eb8:	f003 fa9a 	bl	80183f0 <HAL_Delay>
  Align_Set();
 8014ebc:	f7ff ff4e 	bl	8014d5c <Align_Set>

}
 8014ec0:	bf00      	nop
 8014ec2:	bd80      	pop	{r7, pc}
 8014ec4:	20002846 	.word	0x20002846
 8014ec8:	20006882 	.word	0x20006882
 8014ecc:	2000285e 	.word	0x2000285e

08014ed0 <Analys>:

/*******************************************************************************
 Channel's error analys
*******************************************************************************/
void Analys(void)
{
 8014ed0:	b580      	push	{r7, lr}
 8014ed2:	b082      	sub	sp, #8
 8014ed4:	af00      	add	r7, sp, #0
  unsigned i, SumA = 0;
 8014ed6:	2300      	movs	r3, #0
 8014ed8:	603b      	str	r3, [r7, #0]

  BIOS_Ctrl(SMPL_ST, DISABLE);
 8014eda:	2100      	movs	r1, #0
 8014edc:	2004      	movs	r0, #4
 8014ede:	f7f7 fa45 	bl	800c36c <BIOS_Ctrl>
  BIOS_Ctrl(SMPLTIM, 720-1);      // 72MHz/360 = 400kHz = 2.5uS
 8014ee2:	f240 21cf 	movw	r1, #719	; 0x2cf
 8014ee6:	2005      	movs	r0, #5
 8014ee8:	f7f7 fa40 	bl	800c36c <BIOS_Ctrl>
  BIOS_Ctrl(SMPLNUM, 4096);       // 8192
 8014eec:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8014ef0:	2006      	movs	r0, #6
 8014ef2:	f7f7 fa3b 	bl	800c36c <BIOS_Ctrl>
  BIOS_Ctrl(SMPL_ST, ENABLE);
 8014ef6:	2101      	movs	r1, #1
 8014ef8:	2004      	movs	r0, #4
 8014efa:	f7f7 fa37 	bl	800c36c <BIOS_Ctrl>
  while((BIOS_Info(CHA_CNT) != 0)) {};
 8014efe:	bf00      	nop
 8014f00:	2000      	movs	r0, #0
 8014f02:	f7f7 fa21 	bl	800c348 <BIOS_Info>
 8014f06:	4603      	mov	r3, r0
 8014f08:	2b00      	cmp	r3, #0
 8014f0a:	d1f9      	bne.n	8014f00 <Analys+0x30>
  for(i=2; i<4000+2; i++){
 8014f0c:	2302      	movs	r3, #2
 8014f0e:	607b      	str	r3, [r7, #4]
 8014f10:	e00a      	b.n	8014f28 <Analys+0x58>
    SumA += Sampl[i];
 8014f12:	4a0e      	ldr	r2, [pc, #56]	; (8014f4c <Analys+0x7c>)
 8014f14:	687b      	ldr	r3, [r7, #4]
 8014f16:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8014f1a:	461a      	mov	r2, r3
 8014f1c:	683b      	ldr	r3, [r7, #0]
 8014f1e:	4413      	add	r3, r2
 8014f20:	603b      	str	r3, [r7, #0]
  for(i=2; i<4000+2; i++){
 8014f22:	687b      	ldr	r3, [r7, #4]
 8014f24:	3301      	adds	r3, #1
 8014f26:	607b      	str	r3, [r7, #4]
 8014f28:	687b      	ldr	r3, [r7, #4]
 8014f2a:	f640 72a1 	movw	r2, #4001	; 0xfa1
 8014f2e:	4293      	cmp	r3, r2
 8014f30:	d9ef      	bls.n	8014f12 <Analys+0x42>
  }
  Vavg = SumA/4000; // 4000
 8014f32:	683b      	ldr	r3, [r7, #0]
 8014f34:	4a06      	ldr	r2, [pc, #24]	; (8014f50 <Analys+0x80>)
 8014f36:	fba2 2303 	umull	r2, r3, r2, r3
 8014f3a:	0a1b      	lsrs	r3, r3, #8
 8014f3c:	b21a      	sxth	r2, r3
 8014f3e:	4b05      	ldr	r3, [pc, #20]	; (8014f54 <Analys+0x84>)
 8014f40:	801a      	strh	r2, [r3, #0]
}
 8014f42:	bf00      	nop
 8014f44:	3708      	adds	r7, #8
 8014f46:	46bd      	mov	sp, r7
 8014f48:	bd80      	pop	{r7, pc}
 8014f4a:	bf00      	nop
 8014f4c:	2000286c 	.word	0x2000286c
 8014f50:	10624dd3 	.word	0x10624dd3
 8014f54:	20002854 	.word	0x20002854

08014f58 <AiPosi>:

/*******************************************************************************
 DevCtrl:  offset
*******************************************************************************/
void AiPosi(char Val)
{
 8014f58:	b580      	push	{r7, lr}
 8014f5a:	b082      	sub	sp, #8
 8014f5c:	af00      	add	r7, sp, #0
 8014f5e:	4603      	mov	r3, r0
 8014f60:	71fb      	strb	r3, [r7, #7]
   BIOS_Ctrl(AOFFSET,((char)Val-100)*(KpA[KindA+(StateA?1:0)]/2)*GK[GainA]/KgA[KindA+(StateA?1:0)]+KpA[KindA+(StateA?1:0)]);
 8014f62:	79fb      	ldrb	r3, [r7, #7]
 8014f64:	f1a3 0264 	sub.w	r2, r3, #100	; 0x64
 8014f68:	4b28      	ldr	r3, [pc, #160]	; (801500c <AiPosi+0xb4>)
 8014f6a:	6819      	ldr	r1, [r3, #0]
 8014f6c:	4b28      	ldr	r3, [pc, #160]	; (8015010 <AiPosi+0xb8>)
 8014f6e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8014f72:	4618      	mov	r0, r3
 8014f74:	4b27      	ldr	r3, [pc, #156]	; (8015014 <AiPosi+0xbc>)
 8014f76:	f9b3 3000 	ldrsh.w	r3, [r3]
 8014f7a:	2b00      	cmp	r3, #0
 8014f7c:	bf14      	ite	ne
 8014f7e:	2301      	movne	r3, #1
 8014f80:	2300      	moveq	r3, #0
 8014f82:	b2db      	uxtb	r3, r3
 8014f84:	4403      	add	r3, r0
 8014f86:	005b      	lsls	r3, r3, #1
 8014f88:	440b      	add	r3, r1
 8014f8a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8014f8e:	0fd9      	lsrs	r1, r3, #31
 8014f90:	440b      	add	r3, r1
 8014f92:	105b      	asrs	r3, r3, #1
 8014f94:	b21b      	sxth	r3, r3
 8014f96:	fb03 f302 	mul.w	r3, r3, r2
 8014f9a:	4a1f      	ldr	r2, [pc, #124]	; (8015018 <AiPosi+0xc0>)
 8014f9c:	f9b2 2000 	ldrsh.w	r2, [r2]
 8014fa0:	4611      	mov	r1, r2
 8014fa2:	4a1e      	ldr	r2, [pc, #120]	; (801501c <AiPosi+0xc4>)
 8014fa4:	5c52      	ldrb	r2, [r2, r1]
 8014fa6:	fb02 f303 	mul.w	r3, r2, r3
 8014faa:	4a1d      	ldr	r2, [pc, #116]	; (8015020 <AiPosi+0xc8>)
 8014fac:	6811      	ldr	r1, [r2, #0]
 8014fae:	4a18      	ldr	r2, [pc, #96]	; (8015010 <AiPosi+0xb8>)
 8014fb0:	f9b2 2000 	ldrsh.w	r2, [r2]
 8014fb4:	4610      	mov	r0, r2
 8014fb6:	4a17      	ldr	r2, [pc, #92]	; (8015014 <AiPosi+0xbc>)
 8014fb8:	f9b2 2000 	ldrsh.w	r2, [r2]
 8014fbc:	2a00      	cmp	r2, #0
 8014fbe:	bf14      	ite	ne
 8014fc0:	2201      	movne	r2, #1
 8014fc2:	2200      	moveq	r2, #0
 8014fc4:	b2d2      	uxtb	r2, r2
 8014fc6:	4402      	add	r2, r0
 8014fc8:	0052      	lsls	r2, r2, #1
 8014fca:	440a      	add	r2, r1
 8014fcc:	f9b2 2000 	ldrsh.w	r2, [r2]
 8014fd0:	fb93 f3f2 	sdiv	r3, r3, r2
 8014fd4:	4a0d      	ldr	r2, [pc, #52]	; (801500c <AiPosi+0xb4>)
 8014fd6:	6811      	ldr	r1, [r2, #0]
 8014fd8:	4a0d      	ldr	r2, [pc, #52]	; (8015010 <AiPosi+0xb8>)
 8014fda:	f9b2 2000 	ldrsh.w	r2, [r2]
 8014fde:	4610      	mov	r0, r2
 8014fe0:	4a0c      	ldr	r2, [pc, #48]	; (8015014 <AiPosi+0xbc>)
 8014fe2:	f9b2 2000 	ldrsh.w	r2, [r2]
 8014fe6:	2a00      	cmp	r2, #0
 8014fe8:	bf14      	ite	ne
 8014fea:	2201      	movne	r2, #1
 8014fec:	2200      	moveq	r2, #0
 8014fee:	b2d2      	uxtb	r2, r2
 8014ff0:	4402      	add	r2, r0
 8014ff2:	0052      	lsls	r2, r2, #1
 8014ff4:	440a      	add	r2, r1
 8014ff6:	f9b2 2000 	ldrsh.w	r2, [r2]
 8014ffa:	4413      	add	r3, r2
 8014ffc:	4619      	mov	r1, r3
 8014ffe:	2008      	movs	r0, #8
 8015000:	f7f7 f9b4 	bl	800c36c <BIOS_Ctrl>
}
 8015004:	bf00      	nop
 8015006:	3708      	adds	r7, #8
 8015008:	46bd      	mov	sp, r7
 801500a:	bd80      	pop	{r7, pc}
 801500c:	20000578 	.word	0x20000578
 8015010:	20006882 	.word	0x20006882
 8015014:	2000285e 	.word	0x2000285e
 8015018:	20002846 	.word	0x20002846
 801501c:	20000560 	.word	0x20000560
 8015020:	2000057c 	.word	0x2000057c

08015024 <WaveProcess>:
/*******************************************************************************
 WaveProcess: ���㴦���������������
*******************************************************************************/

void WaveProcess(void)
{
 8015024:	b580      	push	{r7, lr}
 8015026:	b094      	sub	sp, #80	; 0x50
 8015028:	af00      	add	r7, sp, #0
  //------------------ ����Ԥ����,���ɽ���ָ��������ݵ���Ч�� -----------------//

  short* Ain  = (short*)&Sampl[2];
 801502a:	4bb0      	ldr	r3, [pc, #704]	; (80152ec <WaveProcess+0x2c8>)
 801502c:	617b      	str	r3, [r7, #20]

  int  Ak = (KgA[KindA+(StateA?1:0)]*4)/GK[GainA];
 801502e:	4bb0      	ldr	r3, [pc, #704]	; (80152f0 <WaveProcess+0x2cc>)
 8015030:	681a      	ldr	r2, [r3, #0]
 8015032:	4bb0      	ldr	r3, [pc, #704]	; (80152f4 <WaveProcess+0x2d0>)
 8015034:	f9b3 3000 	ldrsh.w	r3, [r3]
 8015038:	4619      	mov	r1, r3
 801503a:	4baf      	ldr	r3, [pc, #700]	; (80152f8 <WaveProcess+0x2d4>)
 801503c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8015040:	2b00      	cmp	r3, #0
 8015042:	bf14      	ite	ne
 8015044:	2301      	movne	r3, #1
 8015046:	2300      	moveq	r3, #0
 8015048:	b2db      	uxtb	r3, r3
 801504a:	440b      	add	r3, r1
 801504c:	005b      	lsls	r3, r3, #1
 801504e:	4413      	add	r3, r2
 8015050:	f9b3 3000 	ldrsh.w	r3, [r3]
 8015054:	009b      	lsls	r3, r3, #2
 8015056:	4aa9      	ldr	r2, [pc, #676]	; (80152fc <WaveProcess+0x2d8>)
 8015058:	f9b2 2000 	ldrsh.w	r2, [r2]
 801505c:	4611      	mov	r1, r2
 801505e:	4aa8      	ldr	r2, [pc, #672]	; (8015300 <WaveProcess+0x2dc>)
 8015060:	5c52      	ldrb	r2, [r2, r1]
 8015062:	fb93 f3f2 	sdiv	r3, r3, r2
 8015066:	613b      	str	r3, [r7, #16]
  short  i, n, k, p = 0;
 8015068:	2300      	movs	r3, #0
 801506a:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48

  short  VtlA, ViA, VthA, VeA, VpA, VoA;            // VtA,

  short  DtA   = 0, TslA  =  0, TshA = 0, StA  = 2;
 801506e:	2300      	movs	r3, #0
 8015070:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8015072:	2300      	movs	r3, #0
 8015074:	877b      	strh	r3, [r7, #58]	; 0x3a
 8015076:	2300      	movs	r3, #0
 8015078:	873b      	strh	r3, [r7, #56]	; 0x38
 801507a:	2302      	movs	r3, #2
 801507c:	86fb      	strh	r3, [r7, #54]	; 0x36
  short  FallA = 0, RiseA =  0, UpA  = 0, DnA  = 0;
 801507e:	2300      	movs	r3, #0
 8015080:	86bb      	strh	r3, [r7, #52]	; 0x34
 8015082:	2300      	movs	r3, #0
 8015084:	867b      	strh	r3, [r7, #50]	; 0x32
 8015086:	2300      	movs	r3, #0
 8015088:	863b      	strh	r3, [r7, #48]	; 0x30
 801508a:	2300      	movs	r3, #0
 801508c:	85fb      	strh	r3, [r7, #46]	; 0x2e
  int  MaxA  = 0, MinA  = ~0, SumA = 0, SsqA = 0; // ���/��Сֵ,�ۼ�/ƽ���� = 0
 801508e:	2300      	movs	r3, #0
 8015090:	62bb      	str	r3, [r7, #40]	; 0x28
 8015092:	f04f 33ff 	mov.w	r3, #4294967295
 8015096:	627b      	str	r3, [r7, #36]	; 0x24
 8015098:	2300      	movs	r3, #0
 801509a:	623b      	str	r3, [r7, #32]
 801509c:	2300      	movs	r3, #0
 801509e:	61fb      	str	r3, [r7, #28]

  short  Dpth  = DEPTH[List[SMPL_DPTH].Val] - 1;
 80150a0:	4b98      	ldr	r3, [pc, #608]	; (8015304 <WaveProcess+0x2e0>)
 80150a2:	f9b3 304c 	ldrsh.w	r3, [r3, #76]	; 0x4c
 80150a6:	461a      	mov	r2, r3
 80150a8:	4b97      	ldr	r3, [pc, #604]	; (8015308 <WaveProcess+0x2e4>)
 80150aa:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 80150ae:	b29b      	uxth	r3, r3
 80150b0:	3b01      	subs	r3, #1
 80150b2:	b29b      	uxth	r3, r3
 80150b4:	837b      	strh	r3, [r7, #26]
  short  Tp    = PRE_SMPL+1, Tm = List[TR_MODE].Val & 1;
 80150b6:	2397      	movs	r3, #151	; 0x97
 80150b8:	81fb      	strh	r3, [r7, #14]
 80150ba:	4b92      	ldr	r3, [pc, #584]	; (8015304 <WaveProcess+0x2e0>)
 80150bc:	f9b3 3074 	ldrsh.w	r3, [r3, #116]	; 0x74
 80150c0:	f003 0301 	and.w	r3, r3, #1
 80150c4:	81bb      	strh	r3, [r7, #12]
  short  Ks    = KS[List[TIM_BASE].Val],  Sm = List[SYNCMODE].Val;
 80150c6:	4b8f      	ldr	r3, [pc, #572]	; (8015304 <WaveProcess+0x2e0>)
 80150c8:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 80150cc:	461a      	mov	r2, r3
 80150ce:	4b8f      	ldr	r3, [pc, #572]	; (801530c <WaveProcess+0x2e8>)
 80150d0:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 80150d4:	817b      	strh	r3, [r7, #10]
 80150d6:	4b8b      	ldr	r3, [pc, #556]	; (8015304 <WaveProcess+0x2e0>)
 80150d8:	f8b3 306c 	ldrh.w	r3, [r3, #108]	; 0x6c
 80150dc:	813b      	strh	r3, [r7, #8]
  char   Ext = List[EXT_REFN].Val;
 80150de:	4b89      	ldr	r3, [pc, #548]	; (8015304 <WaveProcess+0x2e0>)
 80150e0:	f9b3 30d4 	ldrsh.w	r3, [r3, #212]	; 0xd4
 80150e4:	71fb      	strb	r3, [r7, #7]

//---------------------- ��������Ԥ����,����ʵ�ʴ�����ֵ ---------------------//
  if(Status == STOP)
 80150e6:	4b8a      	ldr	r3, [pc, #552]	; (8015310 <WaveProcess+0x2ec>)
 80150e8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80150ec:	2b01      	cmp	r3, #1
 80150ee:	d13c      	bne.n	801516a <WaveProcess+0x146>
  {
    VtlA  = (((Tri_Posi + Ch1_Posi - List[SENSITIVE].Val-100)<<12)/Ak)+2048;
 80150f0:	4b88      	ldr	r3, [pc, #544]	; (8015314 <WaveProcess+0x2f0>)
 80150f2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80150f6:	461a      	mov	r2, r3
 80150f8:	4b87      	ldr	r3, [pc, #540]	; (8015318 <WaveProcess+0x2f4>)
 80150fa:	f9b3 3000 	ldrsh.w	r3, [r3]
 80150fe:	4413      	add	r3, r2
 8015100:	4a80      	ldr	r2, [pc, #512]	; (8015304 <WaveProcess+0x2e0>)
 8015102:	f9b2 208c 	ldrsh.w	r2, [r2, #140]	; 0x8c
 8015106:	1a9b      	subs	r3, r3, r2
 8015108:	3b64      	subs	r3, #100	; 0x64
 801510a:	031a      	lsls	r2, r3, #12
 801510c:	693b      	ldr	r3, [r7, #16]
 801510e:	fb92 f3f3 	sdiv	r3, r2, r3
 8015112:	b29b      	uxth	r3, r3
 8015114:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8015118:	b29b      	uxth	r3, r3
 801511a:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
    VthA  = (((Tri_Posi + Ch1_Posi + List[SENSITIVE].Val-100)<<12)/Ak)+2048;
 801511e:	4b7d      	ldr	r3, [pc, #500]	; (8015314 <WaveProcess+0x2f0>)
 8015120:	f9b3 3000 	ldrsh.w	r3, [r3]
 8015124:	461a      	mov	r2, r3
 8015126:	4b7c      	ldr	r3, [pc, #496]	; (8015318 <WaveProcess+0x2f4>)
 8015128:	f9b3 3000 	ldrsh.w	r3, [r3]
 801512c:	4413      	add	r3, r2
 801512e:	4a75      	ldr	r2, [pc, #468]	; (8015304 <WaveProcess+0x2e0>)
 8015130:	f9b2 208c 	ldrsh.w	r2, [r2, #140]	; 0x8c
 8015134:	4413      	add	r3, r2
 8015136:	3b64      	subs	r3, #100	; 0x64
 8015138:	031a      	lsls	r2, r3, #12
 801513a:	693b      	ldr	r3, [r7, #16]
 801513c:	fb92 f3f3 	sdiv	r3, r2, r3
 8015140:	b29b      	uxth	r3, r3
 8015142:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8015146:	b29b      	uxth	r3, r3
 8015148:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
    VpA   = ((((List[V0_POSI].Val)       -100)<<12)/Ak)+2048; //??
 801514c:	4b6d      	ldr	r3, [pc, #436]	; (8015304 <WaveProcess+0x2e0>)
 801514e:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 8015152:	3b64      	subs	r3, #100	; 0x64
 8015154:	031a      	lsls	r2, r3, #12
 8015156:	693b      	ldr	r3, [r7, #16]
 8015158:	fb92 f3f3 	sdiv	r3, r2, r3
 801515c:	b29b      	uxth	r3, r3
 801515e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8015162:	b29b      	uxth	r3, r3
 8015164:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8015168:	e03b      	b.n	80151e2 <WaveProcess+0x1be>
  }
  else
  {
    VtlA  = (((List[THRESHOLD].Val + List[V0_POSI].Val - List[SENSITIVE].Val-100)<<12)/Ak)+2048;
 801516a:	4b66      	ldr	r3, [pc, #408]	; (8015304 <WaveProcess+0x2e0>)
 801516c:	f9b3 3084 	ldrsh.w	r3, [r3, #132]	; 0x84
 8015170:	461a      	mov	r2, r3
 8015172:	4b64      	ldr	r3, [pc, #400]	; (8015304 <WaveProcess+0x2e0>)
 8015174:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 8015178:	4413      	add	r3, r2
 801517a:	4a62      	ldr	r2, [pc, #392]	; (8015304 <WaveProcess+0x2e0>)
 801517c:	f9b2 208c 	ldrsh.w	r2, [r2, #140]	; 0x8c
 8015180:	1a9b      	subs	r3, r3, r2
 8015182:	3b64      	subs	r3, #100	; 0x64
 8015184:	031a      	lsls	r2, r3, #12
 8015186:	693b      	ldr	r3, [r7, #16]
 8015188:	fb92 f3f3 	sdiv	r3, r2, r3
 801518c:	b29b      	uxth	r3, r3
 801518e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8015192:	b29b      	uxth	r3, r3
 8015194:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
    VthA  = (((List[THRESHOLD].Val + List[V0_POSI].Val + List[SENSITIVE].Val-100)<<12)/Ak)+2048;
 8015198:	4b5a      	ldr	r3, [pc, #360]	; (8015304 <WaveProcess+0x2e0>)
 801519a:	f9b3 3084 	ldrsh.w	r3, [r3, #132]	; 0x84
 801519e:	461a      	mov	r2, r3
 80151a0:	4b58      	ldr	r3, [pc, #352]	; (8015304 <WaveProcess+0x2e0>)
 80151a2:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 80151a6:	4413      	add	r3, r2
 80151a8:	4a56      	ldr	r2, [pc, #344]	; (8015304 <WaveProcess+0x2e0>)
 80151aa:	f9b2 208c 	ldrsh.w	r2, [r2, #140]	; 0x8c
 80151ae:	4413      	add	r3, r2
 80151b0:	3b64      	subs	r3, #100	; 0x64
 80151b2:	031a      	lsls	r2, r3, #12
 80151b4:	693b      	ldr	r3, [r7, #16]
 80151b6:	fb92 f3f3 	sdiv	r3, r2, r3
 80151ba:	b29b      	uxth	r3, r3
 80151bc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80151c0:	b29b      	uxth	r3, r3
 80151c2:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
    VpA   = ((((List[V0_POSI].Val)       -100)<<12)/Ak)+2048;
 80151c6:	4b4f      	ldr	r3, [pc, #316]	; (8015304 <WaveProcess+0x2e0>)
 80151c8:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 80151cc:	3b64      	subs	r3, #100	; 0x64
 80151ce:	031a      	lsls	r2, r3, #12
 80151d0:	693b      	ldr	r3, [r7, #16]
 80151d2:	fb92 f3f3 	sdiv	r3, r2, r3
 80151d6:	b29b      	uxth	r3, r3
 80151d8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80151dc:	b29b      	uxth	r3, r3
 80151de:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  }
//-------------------------- ��������ͳ������� ------------------------------//


  if(((List[SYNCMODE].Val == NONE)||(List[SYNCMODE].Val == SCAN))
 80151e2:	4b48      	ldr	r3, [pc, #288]	; (8015304 <WaveProcess+0x2e0>)
 80151e4:	f9b3 306c 	ldrsh.w	r3, [r3, #108]	; 0x6c
 80151e8:	2b05      	cmp	r3, #5
 80151ea:	d004      	beq.n	80151f6 <WaveProcess+0x1d2>
 80151ec:	4b45      	ldr	r3, [pc, #276]	; (8015304 <WaveProcess+0x2e0>)
 80151ee:	f9b3 306c 	ldrsh.w	r3, [r3, #108]	; 0x6c
 80151f2:	2b01      	cmp	r3, #1
 80151f4:	d10b      	bne.n	801520e <WaveProcess+0x1ea>
     &&(List[TIM_BASE].Val>11))
 80151f6:	4b43      	ldr	r3, [pc, #268]	; (8015304 <WaveProcess+0x2e0>)
 80151f8:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 80151fc:	2b0b      	cmp	r3, #11
 80151fe:	dd06      	ble.n	801520e <WaveProcess+0x1ea>
  {
    Dpth = 302;
 8015200:	f44f 7397 	mov.w	r3, #302	; 0x12e
 8015204:	837b      	strh	r3, [r7, #26]
    List[VIEWPOSI].Val = 0;
 8015206:	4b3f      	ldr	r3, [pc, #252]	; (8015304 <WaveProcess+0x2e0>)
 8015208:	2200      	movs	r2, #0
 801520a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  for(i=0; i<Dpth; i++)
 801520e:	2300      	movs	r3, #0
 8015210:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8015214:	e0ad      	b.n	8015372 <WaveProcess+0x34e>
  {
	n = __HAL_DMA_GET_COUNTER(&hdma_adc1);//    DMA1_Channel1->CNDTR;              //DMA_CH_A->CNDTR; //DMA1_CNDTR1
 8015216:	4b41      	ldr	r3, [pc, #260]	; (801531c <WaveProcess+0x2f8>)
 8015218:	681b      	ldr	r3, [r3, #0]
 801521a:	685b      	ldr	r3, [r3, #4]
 801521c:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
    if(i >= (Dpth-n)) break;      // ����һ���ڵȴ�A/Dת�����
 8015220:	f9b7 204e 	ldrsh.w	r2, [r7, #78]	; 0x4e
 8015224:	f9b7 101a 	ldrsh.w	r1, [r7, #26]
 8015228:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 801522c:	1acb      	subs	r3, r1, r3
 801522e:	429a      	cmp	r2, r3
 8015230:	f280 80a7 	bge.w	8015382 <WaveProcess+0x35e>
    ViA = Ain[i];
 8015234:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 8015238:	005b      	lsls	r3, r3, #1
 801523a:	697a      	ldr	r2, [r7, #20]
 801523c:	4413      	add	r3, r2
 801523e:	881b      	ldrh	r3, [r3, #0]
 8015240:	80bb      	strh	r3, [r7, #4]

    if(MaxA < ViA) MaxA = ViA;    // ͳ�����ֵ
 8015242:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8015246:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8015248:	429a      	cmp	r2, r3
 801524a:	da02      	bge.n	8015252 <WaveProcess+0x22e>
 801524c:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8015250:	62bb      	str	r3, [r7, #40]	; 0x28
    if(MinA > ViA) MinA = ViA;    // ͳ����Сֵ
 8015252:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8015256:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8015258:	429a      	cmp	r2, r3
 801525a:	dd02      	ble.n	8015262 <WaveProcess+0x23e>
 801525c:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8015260:	627b      	str	r3, [r7, #36]	; 0x24
    SumA += ViA;                  // ͳ���ۼӺ�
 8015262:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8015266:	6a3a      	ldr	r2, [r7, #32]
 8015268:	4413      	add	r3, r2
 801526a:	623b      	str	r3, [r7, #32]
    SsqA +=(ViA-VpA)*(ViA-VpA);   // ͳ��ƽ����
 801526c:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8015270:	f9b7 3040 	ldrsh.w	r3, [r7, #64]	; 0x40
 8015274:	1ad3      	subs	r3, r2, r3
 8015276:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 801527a:	f9b7 2040 	ldrsh.w	r2, [r7, #64]	; 0x40
 801527e:	1a8a      	subs	r2, r1, r2
 8015280:	fb02 f303 	mul.w	r3, r2, r3
 8015284:	69fa      	ldr	r2, [r7, #28]
 8015286:	4413      	add	r3, r2
 8015288:	61fb      	str	r3, [r7, #28]


    if(StA == 2) DtA = 0;                  // ����CH_A�׸�������ǰ��ʱ���ۼ�
 801528a:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 801528e:	2b02      	cmp	r3, #2
 8015290:	d102      	bne.n	8015298 <WaveProcess+0x274>
 8015292:	2300      	movs	r3, #0
 8015294:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8015296:	e005      	b.n	80152a4 <WaveProcess+0x280>
    else         DtA++;
 8015298:	f9b7 303c 	ldrsh.w	r3, [r7, #60]	; 0x3c
 801529c:	b29b      	uxth	r3, r3
 801529e:	3301      	adds	r3, #1
 80152a0:	b29b      	uxth	r3, r3
 80152a2:	87bb      	strh	r3, [r7, #60]	; 0x3c

    if(ViA > VthA){                        // ViA ������ֵ����
 80152a4:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 80152a8:	f9b7 3044 	ldrsh.w	r3, [r7, #68]	; 0x44
 80152ac:	429a      	cmp	r2, r3
 80152ae:	dd37      	ble.n	8015320 <WaveProcess+0x2fc>
      if(StA == 0){
 80152b0:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 80152b4:	2b00      	cmp	r3, #0
 80152b6:	d115      	bne.n	80152e4 <WaveProcess+0x2c0>
        TslA += DtA; DtA = 0; RiseA++;     // CH_A��λʱ���ۼƣ��������ۼ�
 80152b8:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 80152ba:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80152bc:	4413      	add	r3, r2
 80152be:	b29b      	uxth	r3, r3
 80152c0:	877b      	strh	r3, [r7, #58]	; 0x3a
 80152c2:	2300      	movs	r3, #0
 80152c4:	87bb      	strh	r3, [r7, #60]	; 0x3c
 80152c6:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 80152ca:	b29b      	uxth	r3, r3
 80152cc:	3301      	adds	r3, #1
 80152ce:	b29b      	uxth	r3, r3
 80152d0:	867b      	strh	r3, [r7, #50]	; 0x32
        if(UpA < Tp) UpA = i;              // ��¼Ԥ������CH_A��һ��������λ��
 80152d2:	f9b7 2030 	ldrsh.w	r2, [r7, #48]	; 0x30
 80152d6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80152da:	429a      	cmp	r2, r3
 80152dc:	da02      	bge.n	80152e4 <WaveProcess+0x2c0>
 80152de:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80152e2:	863b      	strh	r3, [r7, #48]	; 0x30
      }
      StA = 1;                             // ��ǰCH_A״̬��Ϊ��λ
 80152e4:	2301      	movs	r3, #1
 80152e6:	86fb      	strh	r3, [r7, #54]	; 0x36
 80152e8:	e03c      	b.n	8015364 <WaveProcess+0x340>
 80152ea:	bf00      	nop
 80152ec:	20002870 	.word	0x20002870
 80152f0:	2000057c 	.word	0x2000057c
 80152f4:	20006882 	.word	0x20006882
 80152f8:	2000285e 	.word	0x2000285e
 80152fc:	20002846 	.word	0x20002846
 8015300:	20000560 	.word	0x20000560
 8015304:	20000298 	.word	0x20000298
 8015308:	08002270 	.word	0x08002270
 801530c:	08002278 	.word	0x08002278
 8015310:	200007a0 	.word	0x200007a0
 8015314:	2000285c 	.word	0x2000285c
 8015318:	20006880 	.word	0x20006880
 801531c:	20006b6c 	.word	0x20006b6c
    } else if(ViA < VtlA){                 // ViA ������ֵ����
 8015320:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8015324:	f9b7 3046 	ldrsh.w	r3, [r7, #70]	; 0x46
 8015328:	429a      	cmp	r2, r3
 801532a:	da1b      	bge.n	8015364 <WaveProcess+0x340>
      if(StA == 1){
 801532c:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 8015330:	2b01      	cmp	r3, #1
 8015332:	d115      	bne.n	8015360 <WaveProcess+0x33c>
        TshA += DtA; DtA = 0; FallA++;     // CH_A��λʱ���ۼƣ��½����ۼ�
 8015334:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 8015336:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8015338:	4413      	add	r3, r2
 801533a:	b29b      	uxth	r3, r3
 801533c:	873b      	strh	r3, [r7, #56]	; 0x38
 801533e:	2300      	movs	r3, #0
 8015340:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8015342:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	; 0x34
 8015346:	b29b      	uxth	r3, r3
 8015348:	3301      	adds	r3, #1
 801534a:	b29b      	uxth	r3, r3
 801534c:	86bb      	strh	r3, [r7, #52]	; 0x34
        if(DnA < Tp) DnA = i;              // ��¼Ԥ������CH_A��һ���½���λ��
 801534e:	f9b7 202e 	ldrsh.w	r2, [r7, #46]	; 0x2e
 8015352:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8015356:	429a      	cmp	r2, r3
 8015358:	da02      	bge.n	8015360 <WaveProcess+0x33c>
 801535a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 801535e:	85fb      	strh	r3, [r7, #46]	; 0x2e
      }
      StA = 0;                             // ��ǰCH_A״̬��Ϊ��λ
 8015360:	2300      	movs	r3, #0
 8015362:	86fb      	strh	r3, [r7, #54]	; 0x36
  for(i=0; i<Dpth; i++)
 8015364:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 8015368:	b29b      	uxth	r3, r3
 801536a:	3301      	adds	r3, #1
 801536c:	b29b      	uxth	r3, r3
 801536e:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8015372:	f9b7 204e 	ldrsh.w	r2, [r7, #78]	; 0x4e
 8015376:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 801537a:	429a      	cmp	r2, r3
 801537c:	f6ff af4b 	blt.w	8015216 <WaveProcess+0x1f2>
 8015380:	e000      	b.n	8015384 <WaveProcess+0x360>
    if(i >= (Dpth-n)) break;      // ����һ���ڵȴ�A/Dת�����
 8015382:	bf00      	nop
    }
  }
  if(n == 0)
 8015384:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 8015388:	2b00      	cmp	r3, #0
 801538a:	d14f      	bne.n	801542c <WaveProcess+0x408>
  {                              // ����ȫ����ɺ��������ֵ i == Dpth
    Vmax = MaxA; Vmin = MinA; Vavg = SumA/i; Vssq = SsqA/(i+1);
 801538c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801538e:	b21a      	sxth	r2, r3
 8015390:	4b9a      	ldr	r3, [pc, #616]	; (80155fc <WaveProcess+0x5d8>)
 8015392:	801a      	strh	r2, [r3, #0]
 8015394:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015396:	b21a      	sxth	r2, r3
 8015398:	4b99      	ldr	r3, [pc, #612]	; (8015600 <WaveProcess+0x5dc>)
 801539a:	801a      	strh	r2, [r3, #0]
 801539c:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 80153a0:	6a3a      	ldr	r2, [r7, #32]
 80153a2:	fb92 f3f3 	sdiv	r3, r2, r3
 80153a6:	b21a      	sxth	r2, r3
 80153a8:	4b96      	ldr	r3, [pc, #600]	; (8015604 <WaveProcess+0x5e0>)
 80153aa:	801a      	strh	r2, [r3, #0]
 80153ac:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 80153b0:	3301      	adds	r3, #1
 80153b2:	69fa      	ldr	r2, [r7, #28]
 80153b4:	fb92 f3f3 	sdiv	r3, r2, r3
 80153b8:	4a93      	ldr	r2, [pc, #588]	; (8015608 <WaveProcess+0x5e4>)
 80153ba:	6013      	str	r3, [r2, #0]
    Vrms = (Sqrt32(Vssq)); Vmid = (Vmax + Vmin)/2; Vpp = Vmax - Vmin;
 80153bc:	4b92      	ldr	r3, [pc, #584]	; (8015608 <WaveProcess+0x5e4>)
 80153be:	681b      	ldr	r3, [r3, #0]
 80153c0:	4618      	mov	r0, r3
 80153c2:	f7fc fbf5 	bl	8011bb0 <Sqrt32>
 80153c6:	4603      	mov	r3, r0
 80153c8:	461a      	mov	r2, r3
 80153ca:	4b90      	ldr	r3, [pc, #576]	; (801560c <WaveProcess+0x5e8>)
 80153cc:	601a      	str	r2, [r3, #0]
 80153ce:	4b8b      	ldr	r3, [pc, #556]	; (80155fc <WaveProcess+0x5d8>)
 80153d0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80153d4:	461a      	mov	r2, r3
 80153d6:	4b8a      	ldr	r3, [pc, #552]	; (8015600 <WaveProcess+0x5dc>)
 80153d8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80153dc:	4413      	add	r3, r2
 80153de:	0fda      	lsrs	r2, r3, #31
 80153e0:	4413      	add	r3, r2
 80153e2:	105b      	asrs	r3, r3, #1
 80153e4:	b21a      	sxth	r2, r3
 80153e6:	4b8a      	ldr	r3, [pc, #552]	; (8015610 <WaveProcess+0x5ec>)
 80153e8:	801a      	strh	r2, [r3, #0]
 80153ea:	4b84      	ldr	r3, [pc, #528]	; (80155fc <WaveProcess+0x5d8>)
 80153ec:	f9b3 3000 	ldrsh.w	r3, [r3]
 80153f0:	461a      	mov	r2, r3
 80153f2:	4b83      	ldr	r3, [pc, #524]	; (8015600 <WaveProcess+0x5dc>)
 80153f4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80153f8:	1ad3      	subs	r3, r2, r3
 80153fa:	4a86      	ldr	r2, [pc, #536]	; (8015614 <WaveProcess+0x5f0>)
 80153fc:	6013      	str	r3, [r2, #0]
    HighT = TshA/FallA; LowT = TslA/RiseA; Edge = FallA+ RiseA;
 80153fe:	f9b7 2038 	ldrsh.w	r2, [r7, #56]	; 0x38
 8015402:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	; 0x34
 8015406:	fb92 f3f3 	sdiv	r3, r2, r3
 801540a:	4a83      	ldr	r2, [pc, #524]	; (8015618 <WaveProcess+0x5f4>)
 801540c:	6013      	str	r3, [r2, #0]
 801540e:	f9b7 203a 	ldrsh.w	r2, [r7, #58]	; 0x3a
 8015412:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 8015416:	fb92 f3f3 	sdiv	r3, r2, r3
 801541a:	4a80      	ldr	r2, [pc, #512]	; (801561c <WaveProcess+0x5f8>)
 801541c:	6013      	str	r3, [r2, #0]
 801541e:	f9b7 2034 	ldrsh.w	r2, [r7, #52]	; 0x34
 8015422:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 8015426:	4413      	add	r3, r2
 8015428:	4a7d      	ldr	r2, [pc, #500]	; (8015620 <WaveProcess+0x5fc>)
 801542a:	6013      	str	r3, [r2, #0]

  }
//--------------------------- ���ɲ�����ʾ���� -------------------------------//

  if(((Sm == NONE)||(Sm == SCAN))){
 801542c:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8015430:	2b05      	cmp	r3, #5
 8015432:	d003      	beq.n	801543c <WaveProcess+0x418>
 8015434:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8015438:	2b01      	cmp	r3, #1
 801543a:	d12f      	bne.n	801549c <WaveProcess+0x478>
    if(List[TIM_BASE].Val > 11)
 801543c:	4b79      	ldr	r3, [pc, #484]	; (8015624 <WaveProcess+0x600>)
 801543e:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8015442:	2b0b      	cmp	r3, #11
 8015444:	dd03      	ble.n	801544e <WaveProcess+0x42a>
      k = 1;                         // NONE SCAN ģʽ��ǿ�ƴ���
 8015446:	2301      	movs	r3, #1
 8015448:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
    if(List[TIM_BASE].Val > 11)
 801544c:	e033      	b.n	80154b6 <WaveProcess+0x492>
    else
    {
      k =((Tm == RISE)? UpA : DnA)-Tp; // k:Ԥ�����󴥷���λ��
 801544e:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8015452:	2b00      	cmp	r3, #0
 8015454:	d101      	bne.n	801545a <WaveProcess+0x436>
 8015456:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8015458:	e000      	b.n	801545c <WaveProcess+0x438>
 801545a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 801545c:	89fa      	ldrh	r2, [r7, #14]
 801545e:	1a9b      	subs	r3, r3, r2
 8015460:	b29b      	uxth	r3, r3
 8015462:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

      if((Sm == SCAN)&&(k < 0)){ // AUTO ģʽ���޴���ʱ
 8015466:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 801546a:	2b01      	cmp	r3, #1
 801546c:	d123      	bne.n	80154b6 <WaveProcess+0x492>
 801546e:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 8015472:	2b00      	cmp	r3, #0
 8015474:	da1f      	bge.n	80154b6 <WaveProcess+0x492>
        if(i > Dpth/4) k = 1;    // ������1/4����ǿ�ƴ���
 8015476:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 801547a:	2b00      	cmp	r3, #0
 801547c:	da00      	bge.n	8015480 <WaveProcess+0x45c>
 801547e:	3303      	adds	r3, #3
 8015480:	109b      	asrs	r3, r3, #2
 8015482:	b21b      	sxth	r3, r3
 8015484:	f9b7 204e 	ldrsh.w	r2, [r7, #78]	; 0x4e
 8015488:	429a      	cmp	r2, r3
 801548a:	dd03      	ble.n	8015494 <WaveProcess+0x470>
 801548c:	2301      	movs	r3, #1
 801548e:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
    if(List[TIM_BASE].Val > 11)
 8015492:	e010      	b.n	80154b6 <WaveProcess+0x492>
        else           k = 0;    // ������1/4��ǰ����ʾ
 8015494:	2300      	movs	r3, #0
 8015496:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
    if(List[TIM_BASE].Val > 11)
 801549a:	e00c      	b.n	80154b6 <WaveProcess+0x492>
      }

    }
  } else
    k =((Tm == RISE)? UpA : DnA)-Tp; // k:Ԥ�����󴥷���λ��
 801549c:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80154a0:	2b00      	cmp	r3, #0
 80154a2:	d101      	bne.n	80154a8 <WaveProcess+0x484>
 80154a4:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 80154a6:	e000      	b.n	80154aa <WaveProcess+0x486>
 80154a8:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80154aa:	89fa      	ldrh	r2, [r7, #14]
 80154ac:	1a9b      	subs	r3, r3, r2
 80154ae:	b29b      	uxth	r3, r3
 80154b0:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 80154b4:	e000      	b.n	80154b8 <WaveProcess+0x494>
    if(List[TIM_BASE].Val > 11)
 80154b6:	bf00      	nop

  if((!n)&&(Sm == SINGL)&&(k > 0)){ // SNGL ģʽ���д���ʱ�����������Զ�ֹͣ
 80154b8:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 80154bc:	2b00      	cmp	r3, #0
 80154be:	d10c      	bne.n	80154da <WaveProcess+0x4b6>
 80154c0:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 80154c4:	2b04      	cmp	r3, #4
 80154c6:	d108      	bne.n	80154da <WaveProcess+0x4b6>
 80154c8:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 80154cc:	2b00      	cmp	r3, #0
 80154ce:	dd04      	ble.n	80154da <WaveProcess+0x4b6>
    Status = STOP;
 80154d0:	4b55      	ldr	r3, [pc, #340]	; (8015628 <WaveProcess+0x604>)
 80154d2:	2201      	movs	r2, #1
 80154d4:	801a      	strh	r2, [r3, #0]
    DispStatus();
 80154d6:	f7fe ff21 	bl	801431c <DispStatus>
  }

  if((Sm == AUTO)&&(k < 0)){ // AUTO ģʽ���޴���ʱ
 80154da:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 80154de:	2b02      	cmp	r3, #2
 80154e0:	d115      	bne.n	801550e <WaveProcess+0x4ea>
 80154e2:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 80154e6:	2b00      	cmp	r3, #0
 80154e8:	da11      	bge.n	801550e <WaveProcess+0x4ea>
    if(i > Dpth/4) k = 1;    // ������1/4����ǿ�ƴ���
 80154ea:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 80154ee:	2b00      	cmp	r3, #0
 80154f0:	da00      	bge.n	80154f4 <WaveProcess+0x4d0>
 80154f2:	3303      	adds	r3, #3
 80154f4:	109b      	asrs	r3, r3, #2
 80154f6:	b21b      	sxth	r3, r3
 80154f8:	f9b7 204e 	ldrsh.w	r2, [r7, #78]	; 0x4e
 80154fc:	429a      	cmp	r2, r3
 80154fe:	dd03      	ble.n	8015508 <WaveProcess+0x4e4>
 8015500:	2301      	movs	r3, #1
 8015502:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8015506:	e002      	b.n	801550e <WaveProcess+0x4ea>
    else           k = 0;    // ������1/4��ǰ����ʾ
 8015508:	2300      	movs	r3, #0
 801550a:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
  }

  Trigger_k = k;
 801550e:	4a47      	ldr	r2, [pc, #284]	; (801562c <WaveProcess+0x608>)
 8015510:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8015514:	8013      	strh	r3, [r2, #0]

  if(Trigger_k>0)NORM_Kflag = 1;
 8015516:	4b45      	ldr	r3, [pc, #276]	; (801562c <WaveProcess+0x608>)
 8015518:	f9b3 3000 	ldrsh.w	r3, [r3]
 801551c:	2b00      	cmp	r3, #0
 801551e:	dd02      	ble.n	8015526 <WaveProcess+0x502>
 8015520:	4b43      	ldr	r3, [pc, #268]	; (8015630 <WaveProcess+0x60c>)
 8015522:	2201      	movs	r2, #1
 8015524:	701a      	strb	r2, [r3, #0]

  if((SNGL_Kflag)&&(Status == STOP))
 8015526:	4b43      	ldr	r3, [pc, #268]	; (8015634 <WaveProcess+0x610>)
 8015528:	781b      	ldrb	r3, [r3, #0]
 801552a:	2b00      	cmp	r3, #0
 801552c:	d016      	beq.n	801555c <WaveProcess+0x538>
 801552e:	4b3e      	ldr	r3, [pc, #248]	; (8015628 <WaveProcess+0x604>)
 8015530:	f9b3 3000 	ldrsh.w	r3, [r3]
 8015534:	2b01      	cmp	r3, #1
 8015536:	d111      	bne.n	801555c <WaveProcess+0x538>
  {
    Ch1_Posi = List[V0_POSI].Val;
 8015538:	4b3a      	ldr	r3, [pc, #232]	; (8015624 <WaveProcess+0x600>)
 801553a:	f9b3 201c 	ldrsh.w	r2, [r3, #28]
 801553e:	4b3e      	ldr	r3, [pc, #248]	; (8015638 <WaveProcess+0x614>)
 8015540:	801a      	strh	r2, [r3, #0]
    Ch2_Posi = List[EXT_POSI].Val;
 8015542:	4b38      	ldr	r3, [pc, #224]	; (8015624 <WaveProcess+0x600>)
 8015544:	f9b3 20dc 	ldrsh.w	r2, [r3, #220]	; 0xdc
 8015548:	4b3c      	ldr	r3, [pc, #240]	; (801563c <WaveProcess+0x618>)
 801554a:	801a      	strh	r2, [r3, #0]
    Tri_Posi = List[THRESHOLD].Val;
 801554c:	4b35      	ldr	r3, [pc, #212]	; (8015624 <WaveProcess+0x600>)
 801554e:	f9b3 2084 	ldrsh.w	r2, [r3, #132]	; 0x84
 8015552:	4b3b      	ldr	r3, [pc, #236]	; (8015640 <WaveProcess+0x61c>)
 8015554:	801a      	strh	r2, [r3, #0]
    SNGL_Kflag = 0;
 8015556:	4b37      	ldr	r3, [pc, #220]	; (8015634 <WaveProcess+0x610>)
 8015558:	2200      	movs	r2, #0
 801555a:	701a      	strb	r2, [r3, #0]
  }

  if(k > 0)
 801555c:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 8015560:	2b00      	cmp	r3, #0
 8015562:	f340 8104 	ble.w	801576e <WaveProcess+0x74a>
  {                                               // �д���ʱ����ʾ����
    k += List[VIEWPOSI].Val+((1024-Ks)*Tp+512)/1024; // ���β�ֵ���
 8015566:	4b2f      	ldr	r3, [pc, #188]	; (8015624 <WaveProcess+0x600>)
 8015568:	f9b3 3044 	ldrsh.w	r3, [r3, #68]	; 0x44
 801556c:	b29a      	uxth	r2, r3
 801556e:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8015572:	f5c3 6380 	rsb	r3, r3, #1024	; 0x400
 8015576:	f9b7 100e 	ldrsh.w	r1, [r7, #14]
 801557a:	fb01 f303 	mul.w	r3, r1, r3
 801557e:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8015582:	2b00      	cmp	r3, #0
 8015584:	da01      	bge.n	801558a <WaveProcess+0x566>
 8015586:	f203 33ff 	addw	r3, r3, #1023	; 0x3ff
 801558a:	129b      	asrs	r3, r3, #10
 801558c:	b29b      	uxth	r3, r3
 801558e:	4413      	add	r3, r2
 8015590:	b29a      	uxth	r2, r3
 8015592:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8015596:	4413      	add	r3, r2
 8015598:	b29b      	uxth	r3, r3
 801559a:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
    VeA =(((Ain[k]-2048)*Ak)>>12)+100;
 801559e:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 80155a2:	005b      	lsls	r3, r3, #1
 80155a4:	697a      	ldr	r2, [r7, #20]
 80155a6:	4413      	add	r3, r2
 80155a8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80155ac:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 80155b0:	693a      	ldr	r2, [r7, #16]
 80155b2:	fb02 f303 	mul.w	r3, r2, r3
 80155b6:	131b      	asrs	r3, r3, #12
 80155b8:	b29b      	uxth	r3, r3
 80155ba:	3364      	adds	r3, #100	; 0x64
 80155bc:	b29b      	uxth	r3, r3
 80155be:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

    for(n=0; n<300;)
 80155c2:	2300      	movs	r3, #0
 80155c4:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 80155c8:	e0c7      	b.n	801575a <WaveProcess+0x736>
    {
      ViA =(((Ain[k]-2048)*Ak)>>12)+100;
 80155ca:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 80155ce:	005b      	lsls	r3, r3, #1
 80155d0:	697a      	ldr	r2, [r7, #20]
 80155d2:	4413      	add	r3, r2
 80155d4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80155d8:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 80155dc:	693a      	ldr	r2, [r7, #16]
 80155de:	fb02 f303 	mul.w	r3, r2, r3
 80155e2:	131b      	asrs	r3, r3, #12
 80155e4:	b29b      	uxth	r3, r3
 80155e6:	3364      	adds	r3, #100	; 0x64
 80155e8:	b29b      	uxth	r3, r3
 80155ea:	80bb      	strh	r3, [r7, #4]
      k++;
 80155ec:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 80155f0:	b29b      	uxth	r3, r3
 80155f2:	3301      	adds	r3, #1
 80155f4:	b29b      	uxth	r3, r3
 80155f6:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
      while(p > 0){
 80155fa:	e09e      	b.n	801573a <WaveProcess+0x716>
 80155fc:	20002852 	.word	0x20002852
 8015600:	20002864 	.word	0x20002864
 8015604:	20002854 	.word	0x20002854
 8015608:	20002858 	.word	0x20002858
 801560c:	20002860 	.word	0x20002860
 8015610:	20002866 	.word	0x20002866
 8015614:	2000687c 	.word	0x2000687c
 8015618:	20006874 	.word	0x20006874
 801561c:	20006888 	.word	0x20006888
 8015620:	2000284c 	.word	0x2000284c
 8015624:	20000298 	.word	0x20000298
 8015628:	200007a0 	.word	0x200007a0
 801562c:	20002850 	.word	0x20002850
 8015630:	20002868 	.word	0x20002868
 8015634:	2000055c 	.word	0x2000055c
 8015638:	20006880 	.word	0x20006880
 801563c:	20006878 	.word	0x20006878
 8015640:	2000285c 	.word	0x2000285c
        VoA = VeA +((ViA-VeA)*(1024-p))/1024; // ���� A ͨ����ǰ���ε�Ĳ�ֵ
 8015644:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8015648:	f9b7 3042 	ldrsh.w	r3, [r7, #66]	; 0x42
 801564c:	1ad3      	subs	r3, r2, r3
 801564e:	f9b7 2048 	ldrsh.w	r2, [r7, #72]	; 0x48
 8015652:	f5c2 6280 	rsb	r2, r2, #1024	; 0x400
 8015656:	fb02 f303 	mul.w	r3, r2, r3
 801565a:	2b00      	cmp	r3, #0
 801565c:	da01      	bge.n	8015662 <WaveProcess+0x63e>
 801565e:	f203 33ff 	addw	r3, r3, #1023	; 0x3ff
 8015662:	129b      	asrs	r3, r3, #10
 8015664:	b29a      	uxth	r2, r3
 8015666:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801566a:	4413      	add	r3, r2
 801566c:	b29b      	uxth	r3, r3
 801566e:	87fb      	strh	r3, [r7, #62]	; 0x3e
        if(Status == STOP){
 8015670:	4b63      	ldr	r3, [pc, #396]	; (8015800 <WaveProcess+0x7dc>)
 8015672:	f9b3 3000 	ldrsh.w	r3, [r3]
 8015676:	2b01      	cmp	r3, #1
 8015678:	d132      	bne.n	80156e0 <WaveProcess+0x6bc>

          Vo_Temp = VoA+(List[V0_POSI].Val-Ch1_Posi);
 801567a:	4b62      	ldr	r3, [pc, #392]	; (8015804 <WaveProcess+0x7e0>)
 801567c:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 8015680:	b29a      	uxth	r2, r3
 8015682:	4b61      	ldr	r3, [pc, #388]	; (8015808 <WaveProcess+0x7e4>)
 8015684:	f9b3 3000 	ldrsh.w	r3, [r3]
 8015688:	b29b      	uxth	r3, r3
 801568a:	1ad3      	subs	r3, r2, r3
 801568c:	b29a      	uxth	r2, r3
 801568e:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8015690:	4413      	add	r3, r2
 8015692:	b29b      	uxth	r3, r3
 8015694:	b21a      	sxth	r2, r3
 8015696:	4b5d      	ldr	r3, [pc, #372]	; (801580c <WaveProcess+0x7e8>)
 8015698:	801a      	strh	r2, [r3, #0]

          if(Vo_Temp > 199) Vo_Temp = 202;
 801569a:	4b5c      	ldr	r3, [pc, #368]	; (801580c <WaveProcess+0x7e8>)
 801569c:	f9b3 3000 	ldrsh.w	r3, [r3]
 80156a0:	2bc7      	cmp	r3, #199	; 0xc7
 80156a2:	dd02      	ble.n	80156aa <WaveProcess+0x686>
 80156a4:	4b59      	ldr	r3, [pc, #356]	; (801580c <WaveProcess+0x7e8>)
 80156a6:	22ca      	movs	r2, #202	; 0xca
 80156a8:	801a      	strh	r2, [r3, #0]
          if(Vo_Temp <   3) Vo_Temp = 1;                     // �����޷�
 80156aa:	4b58      	ldr	r3, [pc, #352]	; (801580c <WaveProcess+0x7e8>)
 80156ac:	f9b3 3000 	ldrsh.w	r3, [r3]
 80156b0:	2b02      	cmp	r3, #2
 80156b2:	dc02      	bgt.n	80156ba <WaveProcess+0x696>
 80156b4:	4b55      	ldr	r3, [pc, #340]	; (801580c <WaveProcess+0x7e8>)
 80156b6:	2201      	movs	r2, #1
 80156b8:	801a      	strh	r2, [r3, #0]

          WaveBuf[n]= Vo_Temp;
 80156ba:	4b54      	ldr	r3, [pc, #336]	; (801580c <WaveProcess+0x7e8>)
 80156bc:	f9b3 2000 	ldrsh.w	r2, [r3]
 80156c0:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 80156c4:	b2d1      	uxtb	r1, r2
 80156c6:	4a52      	ldr	r2, [pc, #328]	; (8015810 <WaveProcess+0x7ec>)
 80156c8:	54d1      	strb	r1, [r2, r3]

          Build_Ext(n, Ext, List[V0_POSI].Val);
 80156ca:	4b4e      	ldr	r3, [pc, #312]	; (8015804 <WaveProcess+0x7e0>)
 80156cc:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 80156d0:	b2da      	uxtb	r2, r3
 80156d2:	79f9      	ldrb	r1, [r7, #7]
 80156d4:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 80156d8:	4618      	mov	r0, r3
 80156da:	f000 f89d 	bl	8015818 <Build_Ext>
 80156de:	e01b      	b.n	8015718 <WaveProcess+0x6f4>
        }
        else{
          if(VoA > 199) VoA = 202;                   // �����޷�  ��������
 80156e0:	f9b7 303e 	ldrsh.w	r3, [r7, #62]	; 0x3e
 80156e4:	2bc7      	cmp	r3, #199	; 0xc7
 80156e6:	dd01      	ble.n	80156ec <WaveProcess+0x6c8>
 80156e8:	23ca      	movs	r3, #202	; 0xca
 80156ea:	87fb      	strh	r3, [r7, #62]	; 0x3e
          if(VoA <   3) VoA = 2;                     // �����޷�
 80156ec:	f9b7 303e 	ldrsh.w	r3, [r7, #62]	; 0x3e
 80156f0:	2b02      	cmp	r3, #2
 80156f2:	dc01      	bgt.n	80156f8 <WaveProcess+0x6d4>
 80156f4:	2302      	movs	r3, #2
 80156f6:	87fb      	strh	r3, [r7, #62]	; 0x3e
          WaveBuf[n]= VoA;
 80156f8:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 80156fc:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 80156fe:	b2d1      	uxtb	r1, r2
 8015700:	4a43      	ldr	r2, [pc, #268]	; (8015810 <WaveProcess+0x7ec>)
 8015702:	54d1      	strb	r1, [r2, r3]

          Build_Ext(n, Ext, List[V0_POSI].Val);
 8015704:	4b3f      	ldr	r3, [pc, #252]	; (8015804 <WaveProcess+0x7e0>)
 8015706:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 801570a:	b2da      	uxtb	r2, r3
 801570c:	79f9      	ldrb	r1, [r7, #7]
 801570e:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 8015712:	4618      	mov	r0, r3
 8015714:	f000 f880 	bl	8015818 <Build_Ext>
        }

        if(n++ >= 300) break;
 8015718:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 801571c:	b29a      	uxth	r2, r3
 801571e:	3201      	adds	r2, #1
 8015720:	b292      	uxth	r2, r2
 8015722:	f8a7 204c 	strh.w	r2, [r7, #76]	; 0x4c
 8015726:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 801572a:	da0b      	bge.n	8015744 <WaveProcess+0x720>
        p -= Ks;
 801572c:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 8015730:	897b      	ldrh	r3, [r7, #10]
 8015732:	1ad3      	subs	r3, r2, r3
 8015734:	b29b      	uxth	r3, r3
 8015736:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
      while(p > 0){
 801573a:	f9b7 3048 	ldrsh.w	r3, [r7, #72]	; 0x48
 801573e:	2b00      	cmp	r3, #0
 8015740:	dc80      	bgt.n	8015644 <WaveProcess+0x620>
 8015742:	e000      	b.n	8015746 <WaveProcess+0x722>
        if(n++ >= 300) break;
 8015744:	bf00      	nop
      }
      p += 1024;
 8015746:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 801574a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 801574e:	b29b      	uxth	r3, r3
 8015750:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
      VeA = ViA;                              // �ݴ浱ǰ���ε��ֵ
 8015754:	88bb      	ldrh	r3, [r7, #4]
 8015756:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
    for(n=0; n<300;)
 801575a:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 801575e:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8015762:	f6ff af32 	blt.w	80155ca <WaveProcess+0x5a6>
    }
    Norm_Clr = 0;                                          //NORM����
 8015766:	4b2b      	ldr	r3, [pc, #172]	; (8015814 <WaveProcess+0x7f0>)
 8015768:	2200      	movs	r2, #0
 801576a:	701a      	strb	r2, [r3, #0]
 801576c:	e037      	b.n	80157de <WaveProcess+0x7ba>
  }
  else if((k < 0) && ((Sm != NORM)||(Norm_Clr))){          //NORM��������Ļ
 801576e:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 8015772:	2b00      	cmp	r3, #0
 8015774:	da33      	bge.n	80157de <WaveProcess+0x7ba>
 8015776:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 801577a:	2b03      	cmp	r3, #3
 801577c:	d103      	bne.n	8015786 <WaveProcess+0x762>
 801577e:	4b25      	ldr	r3, [pc, #148]	; (8015814 <WaveProcess+0x7f0>)
 8015780:	781b      	ldrb	r3, [r3, #0]
 8015782:	2b00      	cmp	r3, #0
 8015784:	d02b      	beq.n	80157de <WaveProcess+0x7ba>
    for(n=0; n<300;){
 8015786:	2300      	movs	r3, #0
 8015788:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 801578c:	e022      	b.n	80157d4 <WaveProcess+0x7b0>
      while(p > 0){
        WaveBuf[n]= 255;
 801578e:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 8015792:	4a1f      	ldr	r2, [pc, #124]	; (8015810 <WaveProcess+0x7ec>)
 8015794:	21ff      	movs	r1, #255	; 0xff
 8015796:	54d1      	strb	r1, [r2, r3]

        if(n++ >= 300) break;
 8015798:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 801579c:	b29a      	uxth	r2, r3
 801579e:	3201      	adds	r2, #1
 80157a0:	b292      	uxth	r2, r2
 80157a2:	f8a7 204c 	strh.w	r2, [r7, #76]	; 0x4c
 80157a6:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 80157aa:	da0b      	bge.n	80157c4 <WaveProcess+0x7a0>
        p -= Ks;
 80157ac:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 80157b0:	897b      	ldrh	r3, [r7, #10]
 80157b2:	1ad3      	subs	r3, r2, r3
 80157b4:	b29b      	uxth	r3, r3
 80157b6:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
      while(p > 0){
 80157ba:	f9b7 3048 	ldrsh.w	r3, [r7, #72]	; 0x48
 80157be:	2b00      	cmp	r3, #0
 80157c0:	dce5      	bgt.n	801578e <WaveProcess+0x76a>
 80157c2:	e000      	b.n	80157c6 <WaveProcess+0x7a2>
        if(n++ >= 300) break;
 80157c4:	bf00      	nop
      }
      p += 1024;
 80157c6:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80157ca:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80157ce:	b29b      	uxth	r3, r3
 80157d0:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
    for(n=0; n<300;){
 80157d4:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 80157d8:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 80157dc:	dbed      	blt.n	80157ba <WaveProcess+0x796>
    }
  }
  if((i == Dpth)&&(Status != STOP))
 80157de:	f9b7 204e 	ldrsh.w	r2, [r7, #78]	; 0x4e
 80157e2:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 80157e6:	429a      	cmp	r2, r3
 80157e8:	d106      	bne.n	80157f8 <WaveProcess+0x7d4>
 80157ea:	4b05      	ldr	r3, [pc, #20]	; (8015800 <WaveProcess+0x7dc>)
 80157ec:	f9b3 3000 	ldrsh.w	r3, [r3]
 80157f0:	2b01      	cmp	r3, #1
 80157f2:	d001      	beq.n	80157f8 <WaveProcess+0x7d4>
  {
	  ADC_Start();       // ���¿�ʼ ADC ɨ�����
 80157f4:	f7f6 ff7a 	bl	800c6ec <ADC_Start>
  }
}
 80157f8:	bf00      	nop
 80157fa:	3750      	adds	r7, #80	; 0x50
 80157fc:	46bd      	mov	sp, r7
 80157fe:	bd80      	pop	{r7, pc}
 8015800:	200007a0 	.word	0x200007a0
 8015804:	20000298 	.word	0x20000298
 8015808:	20006880 	.word	0x20006880
 801580c:	20002844 	.word	0x20002844
 8015810:	20000c04 	.word	0x20000c04
 8015814:	200007a7 	.word	0x200007a7

08015818 <Build_Ext>:

/*******************************************************************************
 Build_Ext: ��չͨ��������ʾ
*******************************************************************************/
void  Build_Ext(short x, char Ext, char Yp)
{
 8015818:	b480      	push	{r7}
 801581a:	b085      	sub	sp, #20
 801581c:	af00      	add	r7, sp, #0
 801581e:	4603      	mov	r3, r0
 8015820:	80fb      	strh	r3, [r7, #6]
 8015822:	460b      	mov	r3, r1
 8015824:	717b      	strb	r3, [r7, #5]
 8015826:	4613      	mov	r3, r2
 8015828:	713b      	strb	r3, [r7, #4]
  char* Buf = WaveBuf + TRACK1_SIZE;
 801582a:	4b69      	ldr	r3, [pc, #420]	; (80159d0 <Build_Ext+0x1b8>)
 801582c:	60bb      	str	r3, [r7, #8]
  short  Vo;

  Posi_2F1 = List[EXT_POSI].Val -  Data[1] - List[V0_POSI].Val;
 801582e:	4b69      	ldr	r3, [pc, #420]	; (80159d4 <Build_Ext+0x1bc>)
 8015830:	f9b3 30dc 	ldrsh.w	r3, [r3, #220]	; 0xdc
 8015834:	b29a      	uxth	r2, r3
 8015836:	4b68      	ldr	r3, [pc, #416]	; (80159d8 <Build_Ext+0x1c0>)
 8015838:	785b      	ldrb	r3, [r3, #1]
 801583a:	b29b      	uxth	r3, r3
 801583c:	1ad3      	subs	r3, r2, r3
 801583e:	b29a      	uxth	r2, r3
 8015840:	4b64      	ldr	r3, [pc, #400]	; (80159d4 <Build_Ext+0x1bc>)
 8015842:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 8015846:	b29b      	uxth	r3, r3
 8015848:	1ad3      	subs	r3, r2, r3
 801584a:	b29b      	uxth	r3, r3
 801584c:	b21a      	sxth	r2, r3
 801584e:	4b63      	ldr	r3, [pc, #396]	; (80159dc <Build_Ext+0x1c4>)
 8015850:	801a      	strh	r2, [r3, #0]
  Posi_2F2 = List[EXT_POSI].Val;// - Data[2];
 8015852:	4b60      	ldr	r3, [pc, #384]	; (80159d4 <Build_Ext+0x1bc>)
 8015854:	f9b3 20dc 	ldrsh.w	r2, [r3, #220]	; 0xdc
 8015858:	4b61      	ldr	r3, [pc, #388]	; (80159e0 <Build_Ext+0x1c8>)
 801585a:	801a      	strh	r2, [r3, #0]

  switch(Ext)
 801585c:	797b      	ldrb	r3, [r7, #5]
 801585e:	2b05      	cmp	r3, #5
 8015860:	f200 809c 	bhi.w	801599c <Build_Ext+0x184>
 8015864:	a201      	add	r2, pc, #4	; (adr r2, 801586c <Build_Ext+0x54>)
 8015866:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801586a:	bf00      	nop
 801586c:	08015885 	.word	0x08015885
 8015870:	080158ab 	.word	0x080158ab
 8015874:	080158d1 	.word	0x080158d1
 8015878:	080158fb 	.word	0x080158fb
 801587c:	0801593b 	.word	0x0801593b
 8015880:	0801597b 	.word	0x0801597b
  {
  case 0: // D
    Vo = Data[x+10]-Data[1]+List[EXT_POSI].Val; break;
 8015884:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8015888:	330a      	adds	r3, #10
 801588a:	4a53      	ldr	r2, [pc, #332]	; (80159d8 <Build_Ext+0x1c0>)
 801588c:	5cd3      	ldrb	r3, [r2, r3]
 801588e:	b29a      	uxth	r2, r3
 8015890:	4b51      	ldr	r3, [pc, #324]	; (80159d8 <Build_Ext+0x1c0>)
 8015892:	785b      	ldrb	r3, [r3, #1]
 8015894:	b29b      	uxth	r3, r3
 8015896:	1ad3      	subs	r3, r2, r3
 8015898:	b29a      	uxth	r2, r3
 801589a:	4b4e      	ldr	r3, [pc, #312]	; (80159d4 <Build_Ext+0x1bc>)
 801589c:	f9b3 30dc 	ldrsh.w	r3, [r3, #220]	; 0xdc
 80158a0:	b29b      	uxth	r3, r3
 80158a2:	4413      	add	r3, r2
 80158a4:	b29b      	uxth	r3, r3
 80158a6:	81fb      	strh	r3, [r7, #14]
 80158a8:	e078      	b.n	801599c <Build_Ext+0x184>
  case 1: // -D
    Vo = List[EXT_POSI].Val+Data[1]-Data[x+10]; break;
 80158aa:	4b4a      	ldr	r3, [pc, #296]	; (80159d4 <Build_Ext+0x1bc>)
 80158ac:	f9b3 30dc 	ldrsh.w	r3, [r3, #220]	; 0xdc
 80158b0:	b29a      	uxth	r2, r3
 80158b2:	4b49      	ldr	r3, [pc, #292]	; (80159d8 <Build_Ext+0x1c0>)
 80158b4:	785b      	ldrb	r3, [r3, #1]
 80158b6:	b29b      	uxth	r3, r3
 80158b8:	4413      	add	r3, r2
 80158ba:	b29a      	uxth	r2, r3
 80158bc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80158c0:	330a      	adds	r3, #10
 80158c2:	4945      	ldr	r1, [pc, #276]	; (80159d8 <Build_Ext+0x1c0>)
 80158c4:	5ccb      	ldrb	r3, [r1, r3]
 80158c6:	b29b      	uxth	r3, r3
 80158c8:	1ad3      	subs	r3, r2, r3
 80158ca:	b29b      	uxth	r3, r3
 80158cc:	81fb      	strh	r3, [r7, #14]
 80158ce:	e065      	b.n	801599c <Build_Ext+0x184>
  case 2: // Inp+D
    Vo = Data[x+10]+ WaveBuf[x]+Posi_2F1; break;
 80158d0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80158d4:	330a      	adds	r3, #10
 80158d6:	4a40      	ldr	r2, [pc, #256]	; (80159d8 <Build_Ext+0x1c0>)
 80158d8:	5cd3      	ldrb	r3, [r2, r3]
 80158da:	b29a      	uxth	r2, r3
 80158dc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80158e0:	4940      	ldr	r1, [pc, #256]	; (80159e4 <Build_Ext+0x1cc>)
 80158e2:	5ccb      	ldrb	r3, [r1, r3]
 80158e4:	b29b      	uxth	r3, r3
 80158e6:	4413      	add	r3, r2
 80158e8:	b29a      	uxth	r2, r3
 80158ea:	4b3c      	ldr	r3, [pc, #240]	; (80159dc <Build_Ext+0x1c4>)
 80158ec:	f9b3 3000 	ldrsh.w	r3, [r3]
 80158f0:	b29b      	uxth	r3, r3
 80158f2:	4413      	add	r3, r2
 80158f4:	b29b      	uxth	r3, r3
 80158f6:	81fb      	strh	r3, [r7, #14]
 80158f8:	e050      	b.n	801599c <Build_Ext+0x184>
  case 3: // D-Inp
    Vo = (Data[x+10]-Data[1])- (WaveBuf[x]-List[V0_POSI].Val)+ List[EXT_POSI].Val; break;
 80158fa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80158fe:	330a      	adds	r3, #10
 8015900:	4a35      	ldr	r2, [pc, #212]	; (80159d8 <Build_Ext+0x1c0>)
 8015902:	5cd3      	ldrb	r3, [r2, r3]
 8015904:	b29a      	uxth	r2, r3
 8015906:	4b34      	ldr	r3, [pc, #208]	; (80159d8 <Build_Ext+0x1c0>)
 8015908:	785b      	ldrb	r3, [r3, #1]
 801590a:	b29b      	uxth	r3, r3
 801590c:	1ad3      	subs	r3, r2, r3
 801590e:	b29a      	uxth	r2, r3
 8015910:	4b30      	ldr	r3, [pc, #192]	; (80159d4 <Build_Ext+0x1bc>)
 8015912:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 8015916:	b299      	uxth	r1, r3
 8015918:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801591c:	4831      	ldr	r0, [pc, #196]	; (80159e4 <Build_Ext+0x1cc>)
 801591e:	5cc3      	ldrb	r3, [r0, r3]
 8015920:	b29b      	uxth	r3, r3
 8015922:	1acb      	subs	r3, r1, r3
 8015924:	b29b      	uxth	r3, r3
 8015926:	4413      	add	r3, r2
 8015928:	b29a      	uxth	r2, r3
 801592a:	4b2a      	ldr	r3, [pc, #168]	; (80159d4 <Build_Ext+0x1bc>)
 801592c:	f9b3 30dc 	ldrsh.w	r3, [r3, #220]	; 0xdc
 8015930:	b29b      	uxth	r3, r3
 8015932:	4413      	add	r3, r2
 8015934:	b29b      	uxth	r3, r3
 8015936:	81fb      	strh	r3, [r7, #14]
 8015938:	e030      	b.n	801599c <Build_Ext+0x184>
  case 4: // Inp-D
    Vo = (WaveBuf[x]-List[V0_POSI].Val)-(Data[x+10]-Data[1]) + List[EXT_POSI].Val; break;
 801593a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801593e:	4a29      	ldr	r2, [pc, #164]	; (80159e4 <Build_Ext+0x1cc>)
 8015940:	5cd3      	ldrb	r3, [r2, r3]
 8015942:	b29a      	uxth	r2, r3
 8015944:	4b23      	ldr	r3, [pc, #140]	; (80159d4 <Build_Ext+0x1bc>)
 8015946:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 801594a:	b29b      	uxth	r3, r3
 801594c:	1ad3      	subs	r3, r2, r3
 801594e:	b29a      	uxth	r2, r3
 8015950:	4b21      	ldr	r3, [pc, #132]	; (80159d8 <Build_Ext+0x1c0>)
 8015952:	785b      	ldrb	r3, [r3, #1]
 8015954:	b299      	uxth	r1, r3
 8015956:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801595a:	330a      	adds	r3, #10
 801595c:	481e      	ldr	r0, [pc, #120]	; (80159d8 <Build_Ext+0x1c0>)
 801595e:	5cc3      	ldrb	r3, [r0, r3]
 8015960:	b29b      	uxth	r3, r3
 8015962:	1acb      	subs	r3, r1, r3
 8015964:	b29b      	uxth	r3, r3
 8015966:	4413      	add	r3, r2
 8015968:	b29a      	uxth	r2, r3
 801596a:	4b1a      	ldr	r3, [pc, #104]	; (80159d4 <Build_Ext+0x1bc>)
 801596c:	f9b3 30dc 	ldrsh.w	r3, [r3, #220]	; 0xdc
 8015970:	b29b      	uxth	r3, r3
 8015972:	4413      	add	r3, r2
 8015974:	b29b      	uxth	r3, r3
 8015976:	81fb      	strh	r3, [r7, #14]
 8015978:	e010      	b.n	801599c <Build_Ext+0x184>
  case 5: // -Inp
    Vo = Yp+List[EXT_POSI].Val - WaveBuf[x]; break;
 801597a:	793b      	ldrb	r3, [r7, #4]
 801597c:	b29a      	uxth	r2, r3
 801597e:	4b15      	ldr	r3, [pc, #84]	; (80159d4 <Build_Ext+0x1bc>)
 8015980:	f9b3 30dc 	ldrsh.w	r3, [r3, #220]	; 0xdc
 8015984:	b29b      	uxth	r3, r3
 8015986:	4413      	add	r3, r2
 8015988:	b29a      	uxth	r2, r3
 801598a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801598e:	4915      	ldr	r1, [pc, #84]	; (80159e4 <Build_Ext+0x1cc>)
 8015990:	5ccb      	ldrb	r3, [r1, r3]
 8015992:	b29b      	uxth	r3, r3
 8015994:	1ad3      	subs	r3, r2, r3
 8015996:	b29b      	uxth	r3, r3
 8015998:	81fb      	strh	r3, [r7, #14]
 801599a:	bf00      	nop
  }
  if(Vo > 199) Vo = 202;
 801599c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80159a0:	2bc7      	cmp	r3, #199	; 0xc7
 80159a2:	dd01      	ble.n	80159a8 <Build_Ext+0x190>
 80159a4:	23ca      	movs	r3, #202	; 0xca
 80159a6:	81fb      	strh	r3, [r7, #14]
  if(Vo <   3) Vo = 1;                     // �����޷�
 80159a8:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80159ac:	2b02      	cmp	r3, #2
 80159ae:	dc01      	bgt.n	80159b4 <Build_Ext+0x19c>
 80159b0:	2301      	movs	r3, #1
 80159b2:	81fb      	strh	r3, [r7, #14]
  Buf[x]= Vo;
 80159b4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80159b8:	68ba      	ldr	r2, [r7, #8]
 80159ba:	4413      	add	r3, r2
 80159bc:	89fa      	ldrh	r2, [r7, #14]
 80159be:	b2d2      	uxtb	r2, r2
 80159c0:	701a      	strb	r2, [r3, #0]
}
 80159c2:	bf00      	nop
 80159c4:	3714      	adds	r7, #20
 80159c6:	46bd      	mov	sp, r7
 80159c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80159cc:	4770      	bx	lr
 80159ce:	bf00      	nop
 80159d0:	20000d30 	.word	0x20000d30
 80159d4:	20000298 	.word	0x20000298
 80159d8:	20000008 	.word	0x20000008
 80159dc:	20002848 	.word	0x20002848
 80159e0:	20006870 	.word	0x20006870
 80159e4:	20000c04 	.word	0x20000c04

080159e8 <Auto_Fit>:

void Auto_Fit(void)
{
 80159e8:	b590      	push	{r4, r7, lr}
 80159ea:	b083      	sub	sp, #12
 80159ec:	af00      	add	r7, sp, #0
  char i,j,k=0;
 80159ee:	2300      	movs	r3, #0
 80159f0:	717b      	strb	r3, [r7, #5]
  short Tmp,Tmp1;

  if(Status != STOP){
 80159f2:	4b38      	ldr	r3, [pc, #224]	; (8015ad4 <Auto_Fit+0xec>)
 80159f4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80159f8:	2b01      	cmp	r3, #1
 80159fa:	f000 83de 	beq.w	80161ba <Auto_Fit+0x7d2>
    //======��ѹ���Զ�ѡ��==============
    for(i=0;i<9;i++){
 80159fe:	2300      	movs	r3, #0
 8015a00:	71fb      	strb	r3, [r7, #7]
 8015a02:	e098      	b.n	8015b36 <Auto_Fit+0x14e>
      //******Aͨ��***********
      Tmp1 = ((((Vmax-2048)*((KgA[KindA+(StateA?1:0)]*4)/GK[GainA]))>>12)+100-List[V0_POSI].Val)
 8015a04:	4b34      	ldr	r3, [pc, #208]	; (8015ad8 <Auto_Fit+0xf0>)
 8015a06:	f9b3 3000 	ldrsh.w	r3, [r3]
 8015a0a:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 8015a0e:	4a33      	ldr	r2, [pc, #204]	; (8015adc <Auto_Fit+0xf4>)
 8015a10:	6811      	ldr	r1, [r2, #0]
 8015a12:	4a33      	ldr	r2, [pc, #204]	; (8015ae0 <Auto_Fit+0xf8>)
 8015a14:	f9b2 2000 	ldrsh.w	r2, [r2]
 8015a18:	4610      	mov	r0, r2
 8015a1a:	4a32      	ldr	r2, [pc, #200]	; (8015ae4 <Auto_Fit+0xfc>)
 8015a1c:	f9b2 2000 	ldrsh.w	r2, [r2]
 8015a20:	2a00      	cmp	r2, #0
 8015a22:	bf14      	ite	ne
 8015a24:	2201      	movne	r2, #1
 8015a26:	2200      	moveq	r2, #0
 8015a28:	b2d2      	uxtb	r2, r2
 8015a2a:	4402      	add	r2, r0
 8015a2c:	0052      	lsls	r2, r2, #1
 8015a2e:	440a      	add	r2, r1
 8015a30:	f9b2 2000 	ldrsh.w	r2, [r2]
 8015a34:	0092      	lsls	r2, r2, #2
 8015a36:	492c      	ldr	r1, [pc, #176]	; (8015ae8 <Auto_Fit+0x100>)
 8015a38:	f9b1 1000 	ldrsh.w	r1, [r1]
 8015a3c:	4608      	mov	r0, r1
 8015a3e:	492b      	ldr	r1, [pc, #172]	; (8015aec <Auto_Fit+0x104>)
 8015a40:	5c09      	ldrb	r1, [r1, r0]
 8015a42:	fb92 f2f1 	sdiv	r2, r2, r1
 8015a46:	fb02 f303 	mul.w	r3, r2, r3
 8015a4a:	131b      	asrs	r3, r3, #12
           - ((((Vmin-2048)*((KgA[KindA+(StateA?1:0)]*4)/GK[GainA]))>>12)+100-List[V0_POSI].Val);
 8015a4c:	b29a      	uxth	r2, r3
 8015a4e:	4b28      	ldr	r3, [pc, #160]	; (8015af0 <Auto_Fit+0x108>)
 8015a50:	f9b3 3000 	ldrsh.w	r3, [r3]
 8015a54:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 8015a58:	4920      	ldr	r1, [pc, #128]	; (8015adc <Auto_Fit+0xf4>)
 8015a5a:	6808      	ldr	r0, [r1, #0]
 8015a5c:	4920      	ldr	r1, [pc, #128]	; (8015ae0 <Auto_Fit+0xf8>)
 8015a5e:	f9b1 1000 	ldrsh.w	r1, [r1]
 8015a62:	460c      	mov	r4, r1
 8015a64:	491f      	ldr	r1, [pc, #124]	; (8015ae4 <Auto_Fit+0xfc>)
 8015a66:	f9b1 1000 	ldrsh.w	r1, [r1]
 8015a6a:	2900      	cmp	r1, #0
 8015a6c:	bf14      	ite	ne
 8015a6e:	2101      	movne	r1, #1
 8015a70:	2100      	moveq	r1, #0
 8015a72:	b2c9      	uxtb	r1, r1
 8015a74:	4421      	add	r1, r4
 8015a76:	0049      	lsls	r1, r1, #1
 8015a78:	4401      	add	r1, r0
 8015a7a:	f9b1 1000 	ldrsh.w	r1, [r1]
 8015a7e:	0089      	lsls	r1, r1, #2
 8015a80:	4819      	ldr	r0, [pc, #100]	; (8015ae8 <Auto_Fit+0x100>)
 8015a82:	f9b0 0000 	ldrsh.w	r0, [r0]
 8015a86:	4604      	mov	r4, r0
 8015a88:	4818      	ldr	r0, [pc, #96]	; (8015aec <Auto_Fit+0x104>)
 8015a8a:	5d00      	ldrb	r0, [r0, r4]
 8015a8c:	fb91 f1f0 	sdiv	r1, r1, r0
 8015a90:	fb01 f303 	mul.w	r3, r1, r3
 8015a94:	131b      	asrs	r3, r3, #12
 8015a96:	b29b      	uxth	r3, r3
 8015a98:	1ad3      	subs	r3, r2, r3
 8015a9a:	b29b      	uxth	r3, r3
      Tmp1 = ((((Vmax-2048)*((KgA[KindA+(StateA?1:0)]*4)/GK[GainA]))>>12)+100-List[V0_POSI].Val)
 8015a9c:	803b      	strh	r3, [r7, #0]
      if((Tmp1 < 40)&&(List[Y_RANGES].Val > 2)){       //40
 8015a9e:	f9b7 3000 	ldrsh.w	r3, [r7]
 8015aa2:	2b27      	cmp	r3, #39	; 0x27
 8015aa4:	dc28      	bgt.n	8015af8 <Auto_Fit+0x110>
 8015aa6:	4b13      	ldr	r3, [pc, #76]	; (8015af4 <Auto_Fit+0x10c>)
 8015aa8:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8015aac:	2b02      	cmp	r3, #2
 8015aae:	dd23      	ble.n	8015af8 <Auto_Fit+0x110>
        List[Y_RANGES].Val--;
 8015ab0:	4b10      	ldr	r3, [pc, #64]	; (8015af4 <Auto_Fit+0x10c>)
 8015ab2:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8015ab6:	b29b      	uxth	r3, r3
 8015ab8:	3b01      	subs	r3, #1
 8015aba:	b29b      	uxth	r3, r3
 8015abc:	b21a      	sxth	r2, r3
 8015abe:	4b0d      	ldr	r3, [pc, #52]	; (8015af4 <Auto_Fit+0x10c>)
 8015ac0:	809a      	strh	r2, [r3, #4]
        List[V0_POSI].Val=100;
 8015ac2:	4b0c      	ldr	r3, [pc, #48]	; (8015af4 <Auto_Fit+0x10c>)
 8015ac4:	2264      	movs	r2, #100	; 0x64
 8015ac6:	839a      	strh	r2, [r3, #28]
        WaveProcess();
 8015ac8:	f7ff faac 	bl	8015024 <WaveProcess>
        Update_Proc_All();
 8015acc:	f7fe ff32 	bl	8014934 <Update_Proc_All>
 8015ad0:	e02b      	b.n	8015b2a <Auto_Fit+0x142>
 8015ad2:	bf00      	nop
 8015ad4:	200007a0 	.word	0x200007a0
 8015ad8:	20002852 	.word	0x20002852
 8015adc:	2000057c 	.word	0x2000057c
 8015ae0:	20006882 	.word	0x20006882
 8015ae4:	2000285e 	.word	0x2000285e
 8015ae8:	20002846 	.word	0x20002846
 8015aec:	20000560 	.word	0x20000560
 8015af0:	20002864 	.word	0x20002864
 8015af4:	20000298 	.word	0x20000298
      }
      else if((Tmp1 > 110)&&(List[Y_RANGES].Val < 9)){ //110
 8015af8:	f9b7 3000 	ldrsh.w	r3, [r7]
 8015afc:	2b6e      	cmp	r3, #110	; 0x6e
 8015afe:	dd14      	ble.n	8015b2a <Auto_Fit+0x142>
 8015b00:	4bbe      	ldr	r3, [pc, #760]	; (8015dfc <Auto_Fit+0x414>)
 8015b02:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8015b06:	2b08      	cmp	r3, #8
 8015b08:	dc0f      	bgt.n	8015b2a <Auto_Fit+0x142>
        List[Y_RANGES].Val++;
 8015b0a:	4bbc      	ldr	r3, [pc, #752]	; (8015dfc <Auto_Fit+0x414>)
 8015b0c:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8015b10:	b29b      	uxth	r3, r3
 8015b12:	3301      	adds	r3, #1
 8015b14:	b29b      	uxth	r3, r3
 8015b16:	b21a      	sxth	r2, r3
 8015b18:	4bb8      	ldr	r3, [pc, #736]	; (8015dfc <Auto_Fit+0x414>)
 8015b1a:	809a      	strh	r2, [r3, #4]
        List[V0_POSI].Val=100;
 8015b1c:	4bb7      	ldr	r3, [pc, #732]	; (8015dfc <Auto_Fit+0x414>)
 8015b1e:	2264      	movs	r2, #100	; 0x64
 8015b20:	839a      	strh	r2, [r3, #28]
        WaveProcess();
 8015b22:	f7ff fa7f 	bl	8015024 <WaveProcess>
        Update_Proc_All();
 8015b26:	f7fe ff05 	bl	8014934 <Update_Proc_All>
      }
      HAL_Delay(50);
 8015b2a:	2032      	movs	r0, #50	; 0x32
 8015b2c:	f002 fc60 	bl	80183f0 <HAL_Delay>
    for(i=0;i<9;i++){
 8015b30:	79fb      	ldrb	r3, [r7, #7]
 8015b32:	3301      	adds	r3, #1
 8015b34:	71fb      	strb	r3, [r7, #7]
 8015b36:	79fb      	ldrb	r3, [r7, #7]
 8015b38:	2b08      	cmp	r3, #8
 8015b3a:	f67f af63 	bls.w	8015a04 <Auto_Fit+0x1c>
    //============ʶ�𴥷�Դ======================


    //======�������Զ�ѡ��==============
    //if(!List[TRI_Ch]){//******Aͨ��***********
      Tmp = (((((Vmax-2048)*((KgA[KindA+(StateA?1:0)]*4)/GK[GainA]))>>12)+100-List[V0_POSI].Val)
 8015b3e:	4bb0      	ldr	r3, [pc, #704]	; (8015e00 <Auto_Fit+0x418>)
 8015b40:	f9b3 3000 	ldrsh.w	r3, [r3]
 8015b44:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 8015b48:	4aae      	ldr	r2, [pc, #696]	; (8015e04 <Auto_Fit+0x41c>)
 8015b4a:	6811      	ldr	r1, [r2, #0]
 8015b4c:	4aae      	ldr	r2, [pc, #696]	; (8015e08 <Auto_Fit+0x420>)
 8015b4e:	f9b2 2000 	ldrsh.w	r2, [r2]
 8015b52:	4610      	mov	r0, r2
 8015b54:	4aad      	ldr	r2, [pc, #692]	; (8015e0c <Auto_Fit+0x424>)
 8015b56:	f9b2 2000 	ldrsh.w	r2, [r2]
 8015b5a:	2a00      	cmp	r2, #0
 8015b5c:	bf14      	ite	ne
 8015b5e:	2201      	movne	r2, #1
 8015b60:	2200      	moveq	r2, #0
 8015b62:	b2d2      	uxtb	r2, r2
 8015b64:	4402      	add	r2, r0
 8015b66:	0052      	lsls	r2, r2, #1
 8015b68:	440a      	add	r2, r1
 8015b6a:	f9b2 2000 	ldrsh.w	r2, [r2]
 8015b6e:	0092      	lsls	r2, r2, #2
 8015b70:	49a7      	ldr	r1, [pc, #668]	; (8015e10 <Auto_Fit+0x428>)
 8015b72:	f9b1 1000 	ldrsh.w	r1, [r1]
 8015b76:	4608      	mov	r0, r1
 8015b78:	49a6      	ldr	r1, [pc, #664]	; (8015e14 <Auto_Fit+0x42c>)
 8015b7a:	5c09      	ldrb	r1, [r1, r0]
 8015b7c:	fb92 f2f1 	sdiv	r2, r2, r1
 8015b80:	fb02 f303 	mul.w	r3, r2, r3
 8015b84:	131a      	asrs	r2, r3, #12
           - ((((Vmin-2048)*((KgA[KindA+(StateA?1:0)]*4)/GK[GainA]))>>12)+100-List[V0_POSI].Val))/4;
 8015b86:	4ba4      	ldr	r3, [pc, #656]	; (8015e18 <Auto_Fit+0x430>)
 8015b88:	f9b3 3000 	ldrsh.w	r3, [r3]
 8015b8c:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 8015b90:	499c      	ldr	r1, [pc, #624]	; (8015e04 <Auto_Fit+0x41c>)
 8015b92:	6808      	ldr	r0, [r1, #0]
 8015b94:	499c      	ldr	r1, [pc, #624]	; (8015e08 <Auto_Fit+0x420>)
 8015b96:	f9b1 1000 	ldrsh.w	r1, [r1]
 8015b9a:	460c      	mov	r4, r1
 8015b9c:	499b      	ldr	r1, [pc, #620]	; (8015e0c <Auto_Fit+0x424>)
 8015b9e:	f9b1 1000 	ldrsh.w	r1, [r1]
 8015ba2:	2900      	cmp	r1, #0
 8015ba4:	bf14      	ite	ne
 8015ba6:	2101      	movne	r1, #1
 8015ba8:	2100      	moveq	r1, #0
 8015baa:	b2c9      	uxtb	r1, r1
 8015bac:	4421      	add	r1, r4
 8015bae:	0049      	lsls	r1, r1, #1
 8015bb0:	4401      	add	r1, r0
 8015bb2:	f9b1 1000 	ldrsh.w	r1, [r1]
 8015bb6:	0089      	lsls	r1, r1, #2
 8015bb8:	4895      	ldr	r0, [pc, #596]	; (8015e10 <Auto_Fit+0x428>)
 8015bba:	f9b0 0000 	ldrsh.w	r0, [r0]
 8015bbe:	4604      	mov	r4, r0
 8015bc0:	4894      	ldr	r0, [pc, #592]	; (8015e14 <Auto_Fit+0x42c>)
 8015bc2:	5d00      	ldrb	r0, [r0, r4]
 8015bc4:	fb91 f1f0 	sdiv	r1, r1, r0
 8015bc8:	fb01 f303 	mul.w	r3, r1, r3
 8015bcc:	131b      	asrs	r3, r3, #12
 8015bce:	1ad3      	subs	r3, r2, r3
 8015bd0:	2b00      	cmp	r3, #0
 8015bd2:	da00      	bge.n	8015bd6 <Auto_Fit+0x1ee>
 8015bd4:	3303      	adds	r3, #3
 8015bd6:	109b      	asrs	r3, r3, #2
      Tmp = (((((Vmax-2048)*((KgA[KindA+(StateA?1:0)]*4)/GK[GainA]))>>12)+100-List[V0_POSI].Val)
 8015bd8:	807b      	strh	r3, [r7, #2]
      if((List[THRESHOLD].Val > (((((Vmid-2048)*((KgA[KindA+(StateA?1:0)]*4)/GK[GainA]))>>12)+100-List[V0_POSI].Val)  + Tmp))||
 8015bda:	4b88      	ldr	r3, [pc, #544]	; (8015dfc <Auto_Fit+0x414>)
 8015bdc:	f9b3 3084 	ldrsh.w	r3, [r3, #132]	; 0x84
 8015be0:	4618      	mov	r0, r3
 8015be2:	4b8e      	ldr	r3, [pc, #568]	; (8015e1c <Auto_Fit+0x434>)
 8015be4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8015be8:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 8015bec:	4a85      	ldr	r2, [pc, #532]	; (8015e04 <Auto_Fit+0x41c>)
 8015bee:	6811      	ldr	r1, [r2, #0]
 8015bf0:	4a85      	ldr	r2, [pc, #532]	; (8015e08 <Auto_Fit+0x420>)
 8015bf2:	f9b2 2000 	ldrsh.w	r2, [r2]
 8015bf6:	4614      	mov	r4, r2
 8015bf8:	4a84      	ldr	r2, [pc, #528]	; (8015e0c <Auto_Fit+0x424>)
 8015bfa:	f9b2 2000 	ldrsh.w	r2, [r2]
 8015bfe:	2a00      	cmp	r2, #0
 8015c00:	bf14      	ite	ne
 8015c02:	2201      	movne	r2, #1
 8015c04:	2200      	moveq	r2, #0
 8015c06:	b2d2      	uxtb	r2, r2
 8015c08:	4422      	add	r2, r4
 8015c0a:	0052      	lsls	r2, r2, #1
 8015c0c:	440a      	add	r2, r1
 8015c0e:	f9b2 2000 	ldrsh.w	r2, [r2]
 8015c12:	0092      	lsls	r2, r2, #2
 8015c14:	497e      	ldr	r1, [pc, #504]	; (8015e10 <Auto_Fit+0x428>)
 8015c16:	f9b1 1000 	ldrsh.w	r1, [r1]
 8015c1a:	460c      	mov	r4, r1
 8015c1c:	497d      	ldr	r1, [pc, #500]	; (8015e14 <Auto_Fit+0x42c>)
 8015c1e:	5d09      	ldrb	r1, [r1, r4]
 8015c20:	fb92 f2f1 	sdiv	r2, r2, r1
 8015c24:	fb02 f303 	mul.w	r3, r2, r3
 8015c28:	131b      	asrs	r3, r3, #12
 8015c2a:	3364      	adds	r3, #100	; 0x64
 8015c2c:	4a73      	ldr	r2, [pc, #460]	; (8015dfc <Auto_Fit+0x414>)
 8015c2e:	f9b2 201c 	ldrsh.w	r2, [r2, #28]
 8015c32:	1a9a      	subs	r2, r3, r2
 8015c34:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8015c38:	4413      	add	r3, r2
 8015c3a:	4298      	cmp	r0, r3
 8015c3c:	dc32      	bgt.n	8015ca4 <Auto_Fit+0x2bc>
         (List[THRESHOLD].Val < (((((Vmid-2048)*((KgA[KindA+(StateA?1:0)]*4)/GK[GainA]))>>12)+100-List[V0_POSI].Val)  - Tmp))){
 8015c3e:	4b6f      	ldr	r3, [pc, #444]	; (8015dfc <Auto_Fit+0x414>)
 8015c40:	f9b3 3084 	ldrsh.w	r3, [r3, #132]	; 0x84
 8015c44:	4618      	mov	r0, r3
 8015c46:	4b75      	ldr	r3, [pc, #468]	; (8015e1c <Auto_Fit+0x434>)
 8015c48:	f9b3 3000 	ldrsh.w	r3, [r3]
 8015c4c:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 8015c50:	4a6c      	ldr	r2, [pc, #432]	; (8015e04 <Auto_Fit+0x41c>)
 8015c52:	6811      	ldr	r1, [r2, #0]
 8015c54:	4a6c      	ldr	r2, [pc, #432]	; (8015e08 <Auto_Fit+0x420>)
 8015c56:	f9b2 2000 	ldrsh.w	r2, [r2]
 8015c5a:	4614      	mov	r4, r2
 8015c5c:	4a6b      	ldr	r2, [pc, #428]	; (8015e0c <Auto_Fit+0x424>)
 8015c5e:	f9b2 2000 	ldrsh.w	r2, [r2]
 8015c62:	2a00      	cmp	r2, #0
 8015c64:	bf14      	ite	ne
 8015c66:	2201      	movne	r2, #1
 8015c68:	2200      	moveq	r2, #0
 8015c6a:	b2d2      	uxtb	r2, r2
 8015c6c:	4422      	add	r2, r4
 8015c6e:	0052      	lsls	r2, r2, #1
 8015c70:	440a      	add	r2, r1
 8015c72:	f9b2 2000 	ldrsh.w	r2, [r2]
 8015c76:	0092      	lsls	r2, r2, #2
 8015c78:	4965      	ldr	r1, [pc, #404]	; (8015e10 <Auto_Fit+0x428>)
 8015c7a:	f9b1 1000 	ldrsh.w	r1, [r1]
 8015c7e:	460c      	mov	r4, r1
 8015c80:	4964      	ldr	r1, [pc, #400]	; (8015e14 <Auto_Fit+0x42c>)
 8015c82:	5d09      	ldrb	r1, [r1, r4]
 8015c84:	fb92 f2f1 	sdiv	r2, r2, r1
 8015c88:	fb02 f303 	mul.w	r3, r2, r3
 8015c8c:	131b      	asrs	r3, r3, #12
 8015c8e:	3364      	adds	r3, #100	; 0x64
 8015c90:	4a5a      	ldr	r2, [pc, #360]	; (8015dfc <Auto_Fit+0x414>)
 8015c92:	f9b2 201c 	ldrsh.w	r2, [r2, #28]
 8015c96:	1a9a      	subs	r2, r3, r2
 8015c98:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8015c9c:	1ad3      	subs	r3, r2, r3
      if((List[THRESHOLD].Val > (((((Vmid-2048)*((KgA[KindA+(StateA?1:0)]*4)/GK[GainA]))>>12)+100-List[V0_POSI].Val)  + Tmp))||
 8015c9e:	4298      	cmp	r0, r3
 8015ca0:	f280 808e 	bge.w	8015dc0 <Auto_Fit+0x3d8>
           if(abs(((((Vmid-2048)*((KgA[KindA+(StateA?1:0)]*4)/GK[GainA]))>>12)+100-List[V0_POSI].Val)+15)<195)
 8015ca4:	4b5d      	ldr	r3, [pc, #372]	; (8015e1c <Auto_Fit+0x434>)
 8015ca6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8015caa:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 8015cae:	4a55      	ldr	r2, [pc, #340]	; (8015e04 <Auto_Fit+0x41c>)
 8015cb0:	6811      	ldr	r1, [r2, #0]
 8015cb2:	4a55      	ldr	r2, [pc, #340]	; (8015e08 <Auto_Fit+0x420>)
 8015cb4:	f9b2 2000 	ldrsh.w	r2, [r2]
 8015cb8:	4610      	mov	r0, r2
 8015cba:	4a54      	ldr	r2, [pc, #336]	; (8015e0c <Auto_Fit+0x424>)
 8015cbc:	f9b2 2000 	ldrsh.w	r2, [r2]
 8015cc0:	2a00      	cmp	r2, #0
 8015cc2:	bf14      	ite	ne
 8015cc4:	2201      	movne	r2, #1
 8015cc6:	2200      	moveq	r2, #0
 8015cc8:	b2d2      	uxtb	r2, r2
 8015cca:	4402      	add	r2, r0
 8015ccc:	0052      	lsls	r2, r2, #1
 8015cce:	440a      	add	r2, r1
 8015cd0:	f9b2 2000 	ldrsh.w	r2, [r2]
 8015cd4:	0092      	lsls	r2, r2, #2
 8015cd6:	494e      	ldr	r1, [pc, #312]	; (8015e10 <Auto_Fit+0x428>)
 8015cd8:	f9b1 1000 	ldrsh.w	r1, [r1]
 8015cdc:	4608      	mov	r0, r1
 8015cde:	494d      	ldr	r1, [pc, #308]	; (8015e14 <Auto_Fit+0x42c>)
 8015ce0:	5c09      	ldrb	r1, [r1, r0]
 8015ce2:	fb92 f2f1 	sdiv	r2, r2, r1
 8015ce6:	fb02 f303 	mul.w	r3, r2, r3
 8015cea:	131b      	asrs	r3, r3, #12
 8015cec:	3364      	adds	r3, #100	; 0x64
 8015cee:	4a43      	ldr	r2, [pc, #268]	; (8015dfc <Auto_Fit+0x414>)
 8015cf0:	f9b2 201c 	ldrsh.w	r2, [r2, #28]
 8015cf4:	1a9b      	subs	r3, r3, r2
 8015cf6:	330f      	adds	r3, #15
 8015cf8:	f113 0fc2 	cmn.w	r3, #194	; 0xc2
 8015cfc:	db5c      	blt.n	8015db8 <Auto_Fit+0x3d0>
 8015cfe:	4b47      	ldr	r3, [pc, #284]	; (8015e1c <Auto_Fit+0x434>)
 8015d00:	f9b3 3000 	ldrsh.w	r3, [r3]
 8015d04:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 8015d08:	4a3e      	ldr	r2, [pc, #248]	; (8015e04 <Auto_Fit+0x41c>)
 8015d0a:	6811      	ldr	r1, [r2, #0]
 8015d0c:	4a3e      	ldr	r2, [pc, #248]	; (8015e08 <Auto_Fit+0x420>)
 8015d0e:	f9b2 2000 	ldrsh.w	r2, [r2]
 8015d12:	4610      	mov	r0, r2
 8015d14:	4a3d      	ldr	r2, [pc, #244]	; (8015e0c <Auto_Fit+0x424>)
 8015d16:	f9b2 2000 	ldrsh.w	r2, [r2]
 8015d1a:	2a00      	cmp	r2, #0
 8015d1c:	bf14      	ite	ne
 8015d1e:	2201      	movne	r2, #1
 8015d20:	2200      	moveq	r2, #0
 8015d22:	b2d2      	uxtb	r2, r2
 8015d24:	4402      	add	r2, r0
 8015d26:	0052      	lsls	r2, r2, #1
 8015d28:	440a      	add	r2, r1
 8015d2a:	f9b2 2000 	ldrsh.w	r2, [r2]
 8015d2e:	0092      	lsls	r2, r2, #2
 8015d30:	4937      	ldr	r1, [pc, #220]	; (8015e10 <Auto_Fit+0x428>)
 8015d32:	f9b1 1000 	ldrsh.w	r1, [r1]
 8015d36:	4608      	mov	r0, r1
 8015d38:	4936      	ldr	r1, [pc, #216]	; (8015e14 <Auto_Fit+0x42c>)
 8015d3a:	5c09      	ldrb	r1, [r1, r0]
 8015d3c:	fb92 f2f1 	sdiv	r2, r2, r1
 8015d40:	fb02 f303 	mul.w	r3, r2, r3
 8015d44:	131b      	asrs	r3, r3, #12
 8015d46:	3364      	adds	r3, #100	; 0x64
 8015d48:	4a2c      	ldr	r2, [pc, #176]	; (8015dfc <Auto_Fit+0x414>)
 8015d4a:	f9b2 201c 	ldrsh.w	r2, [r2, #28]
 8015d4e:	1a9b      	subs	r3, r3, r2
 8015d50:	330f      	adds	r3, #15
 8015d52:	2bc2      	cmp	r3, #194	; 0xc2
 8015d54:	dc30      	bgt.n	8015db8 <Auto_Fit+0x3d0>
             List[THRESHOLD].Val = ((((Vmid-2048)*((KgA[KindA+(StateA?1:0)]*4)/GK[GainA]))>>12)+100-List[V0_POSI].Val)+15 ;
 8015d56:	4b31      	ldr	r3, [pc, #196]	; (8015e1c <Auto_Fit+0x434>)
 8015d58:	f9b3 3000 	ldrsh.w	r3, [r3]
 8015d5c:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 8015d60:	4a28      	ldr	r2, [pc, #160]	; (8015e04 <Auto_Fit+0x41c>)
 8015d62:	6811      	ldr	r1, [r2, #0]
 8015d64:	4a28      	ldr	r2, [pc, #160]	; (8015e08 <Auto_Fit+0x420>)
 8015d66:	f9b2 2000 	ldrsh.w	r2, [r2]
 8015d6a:	4610      	mov	r0, r2
 8015d6c:	4a27      	ldr	r2, [pc, #156]	; (8015e0c <Auto_Fit+0x424>)
 8015d6e:	f9b2 2000 	ldrsh.w	r2, [r2]
 8015d72:	2a00      	cmp	r2, #0
 8015d74:	bf14      	ite	ne
 8015d76:	2201      	movne	r2, #1
 8015d78:	2200      	moveq	r2, #0
 8015d7a:	b2d2      	uxtb	r2, r2
 8015d7c:	4402      	add	r2, r0
 8015d7e:	0052      	lsls	r2, r2, #1
 8015d80:	440a      	add	r2, r1
 8015d82:	f9b2 2000 	ldrsh.w	r2, [r2]
 8015d86:	0092      	lsls	r2, r2, #2
 8015d88:	4921      	ldr	r1, [pc, #132]	; (8015e10 <Auto_Fit+0x428>)
 8015d8a:	f9b1 1000 	ldrsh.w	r1, [r1]
 8015d8e:	4608      	mov	r0, r1
 8015d90:	4920      	ldr	r1, [pc, #128]	; (8015e14 <Auto_Fit+0x42c>)
 8015d92:	5c09      	ldrb	r1, [r1, r0]
 8015d94:	fb92 f2f1 	sdiv	r2, r2, r1
 8015d98:	fb02 f303 	mul.w	r3, r2, r3
 8015d9c:	131b      	asrs	r3, r3, #12
 8015d9e:	b29a      	uxth	r2, r3
 8015da0:	4b16      	ldr	r3, [pc, #88]	; (8015dfc <Auto_Fit+0x414>)
 8015da2:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 8015da6:	b29b      	uxth	r3, r3
 8015da8:	1ad3      	subs	r3, r2, r3
 8015daa:	b29b      	uxth	r3, r3
 8015dac:	3373      	adds	r3, #115	; 0x73
 8015dae:	b29b      	uxth	r3, r3
 8015db0:	b21a      	sxth	r2, r3
 8015db2:	4b12      	ldr	r3, [pc, #72]	; (8015dfc <Auto_Fit+0x414>)
 8015db4:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84
           WaveProcess();
 8015db8:	f7ff f934 	bl	8015024 <WaveProcess>
           Update_Proc_All();
 8015dbc:	f7fe fdba 	bl	8014934 <Update_Proc_All>
         }

      ParamTab[VTx2]= ParamTab[P1x2] + 2*List[THRESHOLD].Val;
 8015dc0:	4b17      	ldr	r3, [pc, #92]	; (8015e20 <Auto_Fit+0x438>)
 8015dc2:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8015dc6:	b29a      	uxth	r2, r3
 8015dc8:	4b0c      	ldr	r3, [pc, #48]	; (8015dfc <Auto_Fit+0x414>)
 8015dca:	f9b3 3084 	ldrsh.w	r3, [r3, #132]	; 0x84
 8015dce:	b29b      	uxth	r3, r3
 8015dd0:	005b      	lsls	r3, r3, #1
 8015dd2:	b29b      	uxth	r3, r3
 8015dd4:	4413      	add	r3, r2
 8015dd6:	b29b      	uxth	r3, r3
 8015dd8:	b21a      	sxth	r2, r3
 8015dda:	4b11      	ldr	r3, [pc, #68]	; (8015e20 <Auto_Fit+0x438>)
 8015ddc:	839a      	strh	r2, [r3, #28]
      List[THRESHOLD].Flg |= UPD;
 8015dde:	4b07      	ldr	r3, [pc, #28]	; (8015dfc <Auto_Fit+0x414>)
 8015de0:	f893 3086 	ldrb.w	r3, [r3, #134]	; 0x86
 8015de4:	f043 0320 	orr.w	r3, r3, #32
 8015de8:	b2da      	uxtb	r2, r3
 8015dea:	4b04      	ldr	r3, [pc, #16]	; (8015dfc <Auto_Fit+0x414>)
 8015dec:	f883 2086 	strb.w	r2, [r3, #134]	; 0x86
      Update_Title();
 8015df0:	f7fc fa9c 	bl	801232c <Update_Title>

    //===========��ƽʱ��������==================
    HAL_Delay(100);
 8015df4:	2064      	movs	r0, #100	; 0x64
 8015df6:	f002 fafb 	bl	80183f0 <HAL_Delay>
 8015dfa:	e013      	b.n	8015e24 <Auto_Fit+0x43c>
 8015dfc:	20000298 	.word	0x20000298
 8015e00:	20002852 	.word	0x20002852
 8015e04:	2000057c 	.word	0x2000057c
 8015e08:	20006882 	.word	0x20006882
 8015e0c:	2000285e 	.word	0x2000285e
 8015e10:	20002846 	.word	0x20002846
 8015e14:	20000560 	.word	0x20000560
 8015e18:	20002864 	.word	0x20002864
 8015e1c:	20002866 	.word	0x20002866
 8015e20:	20000140 	.word	0x20000140

        if(((((Vmid-2048)*((KgA[KindA+(StateA?1:0)]*4)/GK[GainA]))>>12)+100-List[V0_POSI].Val)>10){
 8015e24:	4ba3      	ldr	r3, [pc, #652]	; (80160b4 <Auto_Fit+0x6cc>)
 8015e26:	f9b3 3000 	ldrsh.w	r3, [r3]
 8015e2a:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 8015e2e:	4aa2      	ldr	r2, [pc, #648]	; (80160b8 <Auto_Fit+0x6d0>)
 8015e30:	6811      	ldr	r1, [r2, #0]
 8015e32:	4aa2      	ldr	r2, [pc, #648]	; (80160bc <Auto_Fit+0x6d4>)
 8015e34:	f9b2 2000 	ldrsh.w	r2, [r2]
 8015e38:	4610      	mov	r0, r2
 8015e3a:	4aa1      	ldr	r2, [pc, #644]	; (80160c0 <Auto_Fit+0x6d8>)
 8015e3c:	f9b2 2000 	ldrsh.w	r2, [r2]
 8015e40:	2a00      	cmp	r2, #0
 8015e42:	bf14      	ite	ne
 8015e44:	2201      	movne	r2, #1
 8015e46:	2200      	moveq	r2, #0
 8015e48:	b2d2      	uxtb	r2, r2
 8015e4a:	4402      	add	r2, r0
 8015e4c:	0052      	lsls	r2, r2, #1
 8015e4e:	440a      	add	r2, r1
 8015e50:	f9b2 2000 	ldrsh.w	r2, [r2]
 8015e54:	0092      	lsls	r2, r2, #2
 8015e56:	499b      	ldr	r1, [pc, #620]	; (80160c4 <Auto_Fit+0x6dc>)
 8015e58:	f9b1 1000 	ldrsh.w	r1, [r1]
 8015e5c:	4608      	mov	r0, r1
 8015e5e:	499a      	ldr	r1, [pc, #616]	; (80160c8 <Auto_Fit+0x6e0>)
 8015e60:	5c09      	ldrb	r1, [r1, r0]
 8015e62:	fb92 f2f1 	sdiv	r2, r2, r1
 8015e66:	fb02 f303 	mul.w	r3, r2, r3
 8015e6a:	131b      	asrs	r3, r3, #12
 8015e6c:	3364      	adds	r3, #100	; 0x64
 8015e6e:	4a97      	ldr	r2, [pc, #604]	; (80160cc <Auto_Fit+0x6e4>)
 8015e70:	f9b2 201c 	ldrsh.w	r2, [r2, #28]
 8015e74:	1a9b      	subs	r3, r3, r2
 8015e76:	2b0a      	cmp	r3, #10
 8015e78:	dd76      	ble.n	8015f68 <Auto_Fit+0x580>
      WaveProcess();
 8015e7a:	f7ff f8d3 	bl	8015024 <WaveProcess>
      Update_Proc_All();
 8015e7e:	f7fe fd59 	bl	8014934 <Update_Proc_All>
      HAL_Delay(100);
 8015e82:	2064      	movs	r0, #100	; 0x64
 8015e84:	f002 fab4 	bl	80183f0 <HAL_Delay>
      for(i=0;i<9;i++){
 8015e88:	2300      	movs	r3, #0
 8015e8a:	71fb      	strb	r3, [r7, #7]
 8015e8c:	e068      	b.n	8015f60 <Auto_Fit+0x578>
        WaveProcess();
 8015e8e:	f7ff f8c9 	bl	8015024 <WaveProcess>
        Tmp1 = (((Vmax-2048)*((KgA[KindA+(StateA?1:0)]*4)/GK[GainA]))>>12)+100-List[V0_POSI].Val;
 8015e92:	4b8f      	ldr	r3, [pc, #572]	; (80160d0 <Auto_Fit+0x6e8>)
 8015e94:	f9b3 3000 	ldrsh.w	r3, [r3]
 8015e98:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 8015e9c:	4a86      	ldr	r2, [pc, #536]	; (80160b8 <Auto_Fit+0x6d0>)
 8015e9e:	6811      	ldr	r1, [r2, #0]
 8015ea0:	4a86      	ldr	r2, [pc, #536]	; (80160bc <Auto_Fit+0x6d4>)
 8015ea2:	f9b2 2000 	ldrsh.w	r2, [r2]
 8015ea6:	4610      	mov	r0, r2
 8015ea8:	4a85      	ldr	r2, [pc, #532]	; (80160c0 <Auto_Fit+0x6d8>)
 8015eaa:	f9b2 2000 	ldrsh.w	r2, [r2]
 8015eae:	2a00      	cmp	r2, #0
 8015eb0:	bf14      	ite	ne
 8015eb2:	2201      	movne	r2, #1
 8015eb4:	2200      	moveq	r2, #0
 8015eb6:	b2d2      	uxtb	r2, r2
 8015eb8:	4402      	add	r2, r0
 8015eba:	0052      	lsls	r2, r2, #1
 8015ebc:	440a      	add	r2, r1
 8015ebe:	f9b2 2000 	ldrsh.w	r2, [r2]
 8015ec2:	0092      	lsls	r2, r2, #2
 8015ec4:	497f      	ldr	r1, [pc, #508]	; (80160c4 <Auto_Fit+0x6dc>)
 8015ec6:	f9b1 1000 	ldrsh.w	r1, [r1]
 8015eca:	4608      	mov	r0, r1
 8015ecc:	497e      	ldr	r1, [pc, #504]	; (80160c8 <Auto_Fit+0x6e0>)
 8015ece:	5c09      	ldrb	r1, [r1, r0]
 8015ed0:	fb92 f2f1 	sdiv	r2, r2, r1
 8015ed4:	fb02 f303 	mul.w	r3, r2, r3
 8015ed8:	131b      	asrs	r3, r3, #12
 8015eda:	b29a      	uxth	r2, r3
 8015edc:	4b7b      	ldr	r3, [pc, #492]	; (80160cc <Auto_Fit+0x6e4>)
 8015ede:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 8015ee2:	b29b      	uxth	r3, r3
 8015ee4:	1ad3      	subs	r3, r2, r3
 8015ee6:	b29b      	uxth	r3, r3
 8015ee8:	3364      	adds	r3, #100	; 0x64
 8015eea:	b29b      	uxth	r3, r3
 8015eec:	803b      	strh	r3, [r7, #0]
        if((Tmp1 < 40)&&(List[Y_RANGES].Val > 2)){       //40
 8015eee:	f9b7 3000 	ldrsh.w	r3, [r7]
 8015ef2:	2b27      	cmp	r3, #39	; 0x27
 8015ef4:	dc15      	bgt.n	8015f22 <Auto_Fit+0x53a>
 8015ef6:	4b75      	ldr	r3, [pc, #468]	; (80160cc <Auto_Fit+0x6e4>)
 8015ef8:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8015efc:	2b02      	cmp	r3, #2
 8015efe:	dd10      	ble.n	8015f22 <Auto_Fit+0x53a>
          List[Y_RANGES].Val--;
 8015f00:	4b72      	ldr	r3, [pc, #456]	; (80160cc <Auto_Fit+0x6e4>)
 8015f02:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8015f06:	b29b      	uxth	r3, r3
 8015f08:	3b01      	subs	r3, #1
 8015f0a:	b29b      	uxth	r3, r3
 8015f0c:	b21a      	sxth	r2, r3
 8015f0e:	4b6f      	ldr	r3, [pc, #444]	; (80160cc <Auto_Fit+0x6e4>)
 8015f10:	809a      	strh	r2, [r3, #4]
          List[V0_POSI].Val=100;
 8015f12:	4b6e      	ldr	r3, [pc, #440]	; (80160cc <Auto_Fit+0x6e4>)
 8015f14:	2264      	movs	r2, #100	; 0x64
 8015f16:	839a      	strh	r2, [r3, #28]
          WaveProcess();
 8015f18:	f7ff f884 	bl	8015024 <WaveProcess>
          Update_Proc_All();
 8015f1c:	f7fe fd0a 	bl	8014934 <Update_Proc_All>
 8015f20:	e018      	b.n	8015f54 <Auto_Fit+0x56c>
        }
        else if((Tmp1 > 100)&&(List[Y_RANGES].Val < 9)){ //110
 8015f22:	f9b7 3000 	ldrsh.w	r3, [r7]
 8015f26:	2b64      	cmp	r3, #100	; 0x64
 8015f28:	dd14      	ble.n	8015f54 <Auto_Fit+0x56c>
 8015f2a:	4b68      	ldr	r3, [pc, #416]	; (80160cc <Auto_Fit+0x6e4>)
 8015f2c:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8015f30:	2b08      	cmp	r3, #8
 8015f32:	dc0f      	bgt.n	8015f54 <Auto_Fit+0x56c>
          List[Y_RANGES].Val++;
 8015f34:	4b65      	ldr	r3, [pc, #404]	; (80160cc <Auto_Fit+0x6e4>)
 8015f36:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8015f3a:	b29b      	uxth	r3, r3
 8015f3c:	3301      	adds	r3, #1
 8015f3e:	b29b      	uxth	r3, r3
 8015f40:	b21a      	sxth	r2, r3
 8015f42:	4b62      	ldr	r3, [pc, #392]	; (80160cc <Auto_Fit+0x6e4>)
 8015f44:	809a      	strh	r2, [r3, #4]
          List[V0_POSI].Val=100;
 8015f46:	4b61      	ldr	r3, [pc, #388]	; (80160cc <Auto_Fit+0x6e4>)
 8015f48:	2264      	movs	r2, #100	; 0x64
 8015f4a:	839a      	strh	r2, [r3, #28]
          WaveProcess();
 8015f4c:	f7ff f86a 	bl	8015024 <WaveProcess>
          Update_Proc_All();
 8015f50:	f7fe fcf0 	bl	8014934 <Update_Proc_All>
        }
        HAL_Delay(50);
 8015f54:	2032      	movs	r0, #50	; 0x32
 8015f56:	f002 fa4b 	bl	80183f0 <HAL_Delay>
      for(i=0;i<9;i++){
 8015f5a:	79fb      	ldrb	r3, [r7, #7]
 8015f5c:	3301      	adds	r3, #1
 8015f5e:	71fb      	strb	r3, [r7, #7]
 8015f60:	79fb      	ldrb	r3, [r7, #7]
 8015f62:	2b08      	cmp	r3, #8
 8015f64:	d993      	bls.n	8015e8e <Auto_Fit+0x4a6>
 8015f66:	e054      	b.n	8016012 <Auto_Fit+0x62a>
      }
    }
    else if((((((Vmax-2048)*((KgA[KindA+(StateA?1:0)]*4)/GK[GainA]))>>12)+100-List[V0_POSI].Val)
 8015f68:	4b59      	ldr	r3, [pc, #356]	; (80160d0 <Auto_Fit+0x6e8>)
 8015f6a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8015f6e:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 8015f72:	4a51      	ldr	r2, [pc, #324]	; (80160b8 <Auto_Fit+0x6d0>)
 8015f74:	6811      	ldr	r1, [r2, #0]
 8015f76:	4a51      	ldr	r2, [pc, #324]	; (80160bc <Auto_Fit+0x6d4>)
 8015f78:	f9b2 2000 	ldrsh.w	r2, [r2]
 8015f7c:	4610      	mov	r0, r2
 8015f7e:	4a50      	ldr	r2, [pc, #320]	; (80160c0 <Auto_Fit+0x6d8>)
 8015f80:	f9b2 2000 	ldrsh.w	r2, [r2]
 8015f84:	2a00      	cmp	r2, #0
 8015f86:	bf14      	ite	ne
 8015f88:	2201      	movne	r2, #1
 8015f8a:	2200      	moveq	r2, #0
 8015f8c:	b2d2      	uxtb	r2, r2
 8015f8e:	4402      	add	r2, r0
 8015f90:	0052      	lsls	r2, r2, #1
 8015f92:	440a      	add	r2, r1
 8015f94:	f9b2 2000 	ldrsh.w	r2, [r2]
 8015f98:	0092      	lsls	r2, r2, #2
 8015f9a:	494a      	ldr	r1, [pc, #296]	; (80160c4 <Auto_Fit+0x6dc>)
 8015f9c:	f9b1 1000 	ldrsh.w	r1, [r1]
 8015fa0:	4608      	mov	r0, r1
 8015fa2:	4949      	ldr	r1, [pc, #292]	; (80160c8 <Auto_Fit+0x6e0>)
 8015fa4:	5c09      	ldrb	r1, [r1, r0]
 8015fa6:	fb92 f2f1 	sdiv	r2, r2, r1
 8015faa:	fb02 f303 	mul.w	r3, r2, r3
 8015fae:	131a      	asrs	r2, r3, #12
         - ((((Vmin-2048)*((KgA[KindA+(StateA?1:0)]*4)/GK[GainA]))>>12)+100-List[V0_POSI].Val)) <10){
 8015fb0:	4b48      	ldr	r3, [pc, #288]	; (80160d4 <Auto_Fit+0x6ec>)
 8015fb2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8015fb6:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 8015fba:	493f      	ldr	r1, [pc, #252]	; (80160b8 <Auto_Fit+0x6d0>)
 8015fbc:	6808      	ldr	r0, [r1, #0]
 8015fbe:	493f      	ldr	r1, [pc, #252]	; (80160bc <Auto_Fit+0x6d4>)
 8015fc0:	f9b1 1000 	ldrsh.w	r1, [r1]
 8015fc4:	460c      	mov	r4, r1
 8015fc6:	493e      	ldr	r1, [pc, #248]	; (80160c0 <Auto_Fit+0x6d8>)
 8015fc8:	f9b1 1000 	ldrsh.w	r1, [r1]
 8015fcc:	2900      	cmp	r1, #0
 8015fce:	bf14      	ite	ne
 8015fd0:	2101      	movne	r1, #1
 8015fd2:	2100      	moveq	r1, #0
 8015fd4:	b2c9      	uxtb	r1, r1
 8015fd6:	4421      	add	r1, r4
 8015fd8:	0049      	lsls	r1, r1, #1
 8015fda:	4401      	add	r1, r0
 8015fdc:	f9b1 1000 	ldrsh.w	r1, [r1]
 8015fe0:	0089      	lsls	r1, r1, #2
 8015fe2:	4838      	ldr	r0, [pc, #224]	; (80160c4 <Auto_Fit+0x6dc>)
 8015fe4:	f9b0 0000 	ldrsh.w	r0, [r0]
 8015fe8:	4604      	mov	r4, r0
 8015fea:	4837      	ldr	r0, [pc, #220]	; (80160c8 <Auto_Fit+0x6e0>)
 8015fec:	5d00      	ldrb	r0, [r0, r4]
 8015fee:	fb91 f1f0 	sdiv	r1, r1, r0
 8015ff2:	fb01 f303 	mul.w	r3, r1, r3
 8015ff6:	131b      	asrs	r3, r3, #12
 8015ff8:	1ad3      	subs	r3, r2, r3
    else if((((((Vmax-2048)*((KgA[KindA+(StateA?1:0)]*4)/GK[GainA]))>>12)+100-List[V0_POSI].Val)
 8015ffa:	2b09      	cmp	r3, #9
 8015ffc:	dc09      	bgt.n	8016012 <Auto_Fit+0x62a>
      //===========���ź�ʱ��ѹ��2V==================
        List[Y_RANGES].Val=7; //2v
 8015ffe:	4b33      	ldr	r3, [pc, #204]	; (80160cc <Auto_Fit+0x6e4>)
 8016000:	2207      	movs	r2, #7
 8016002:	809a      	strh	r2, [r3, #4]
        WaveProcess();
 8016004:	f7ff f80e 	bl	8015024 <WaveProcess>
        Update_Proc_All();
 8016008:	f7fe fc94 	bl	8014934 <Update_Proc_All>
        HAL_Delay(50);
 801600c:	2032      	movs	r0, #50	; 0x32
 801600e:	f002 f9ef 	bl	80183f0 <HAL_Delay>


    //======ʱ���Զ�ѡ��==============

    //if(!List[TRI_Ch].Val){//******Aͨ��***********
      Tmp1 = ((((Vmax-2048)*((KgA[KindA+(StateA?1:0)]*4)/GK[GainA]))>>12)+100-List[V0_POSI].Val)
 8016012:	4b2f      	ldr	r3, [pc, #188]	; (80160d0 <Auto_Fit+0x6e8>)
 8016014:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016018:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 801601c:	4a26      	ldr	r2, [pc, #152]	; (80160b8 <Auto_Fit+0x6d0>)
 801601e:	6811      	ldr	r1, [r2, #0]
 8016020:	4a26      	ldr	r2, [pc, #152]	; (80160bc <Auto_Fit+0x6d4>)
 8016022:	f9b2 2000 	ldrsh.w	r2, [r2]
 8016026:	4610      	mov	r0, r2
 8016028:	4a25      	ldr	r2, [pc, #148]	; (80160c0 <Auto_Fit+0x6d8>)
 801602a:	f9b2 2000 	ldrsh.w	r2, [r2]
 801602e:	2a00      	cmp	r2, #0
 8016030:	bf14      	ite	ne
 8016032:	2201      	movne	r2, #1
 8016034:	2200      	moveq	r2, #0
 8016036:	b2d2      	uxtb	r2, r2
 8016038:	4402      	add	r2, r0
 801603a:	0052      	lsls	r2, r2, #1
 801603c:	440a      	add	r2, r1
 801603e:	f9b2 2000 	ldrsh.w	r2, [r2]
 8016042:	0092      	lsls	r2, r2, #2
 8016044:	491f      	ldr	r1, [pc, #124]	; (80160c4 <Auto_Fit+0x6dc>)
 8016046:	f9b1 1000 	ldrsh.w	r1, [r1]
 801604a:	4608      	mov	r0, r1
 801604c:	491e      	ldr	r1, [pc, #120]	; (80160c8 <Auto_Fit+0x6e0>)
 801604e:	5c09      	ldrb	r1, [r1, r0]
 8016050:	fb92 f2f1 	sdiv	r2, r2, r1
 8016054:	fb02 f303 	mul.w	r3, r2, r3
 8016058:	131b      	asrs	r3, r3, #12
           - ((((Vmin-2048)*((KgA[KindA+(StateA?1:0)]*4)/GK[GainA]))>>12)+100-List[V0_POSI].Val);
 801605a:	b29a      	uxth	r2, r3
 801605c:	4b1d      	ldr	r3, [pc, #116]	; (80160d4 <Auto_Fit+0x6ec>)
 801605e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016062:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 8016066:	4914      	ldr	r1, [pc, #80]	; (80160b8 <Auto_Fit+0x6d0>)
 8016068:	6808      	ldr	r0, [r1, #0]
 801606a:	4914      	ldr	r1, [pc, #80]	; (80160bc <Auto_Fit+0x6d4>)
 801606c:	f9b1 1000 	ldrsh.w	r1, [r1]
 8016070:	460c      	mov	r4, r1
 8016072:	4913      	ldr	r1, [pc, #76]	; (80160c0 <Auto_Fit+0x6d8>)
 8016074:	f9b1 1000 	ldrsh.w	r1, [r1]
 8016078:	2900      	cmp	r1, #0
 801607a:	bf14      	ite	ne
 801607c:	2101      	movne	r1, #1
 801607e:	2100      	moveq	r1, #0
 8016080:	b2c9      	uxtb	r1, r1
 8016082:	4421      	add	r1, r4
 8016084:	0049      	lsls	r1, r1, #1
 8016086:	4401      	add	r1, r0
 8016088:	f9b1 1000 	ldrsh.w	r1, [r1]
 801608c:	0089      	lsls	r1, r1, #2
 801608e:	480d      	ldr	r0, [pc, #52]	; (80160c4 <Auto_Fit+0x6dc>)
 8016090:	f9b0 0000 	ldrsh.w	r0, [r0]
 8016094:	4604      	mov	r4, r0
 8016096:	480c      	ldr	r0, [pc, #48]	; (80160c8 <Auto_Fit+0x6e0>)
 8016098:	5d00      	ldrb	r0, [r0, r4]
 801609a:	fb91 f1f0 	sdiv	r1, r1, r0
 801609e:	fb01 f303 	mul.w	r3, r1, r3
 80160a2:	131b      	asrs	r3, r3, #12
 80160a4:	b29b      	uxth	r3, r3
 80160a6:	1ad3      	subs	r3, r2, r3
 80160a8:	b29b      	uxth	r3, r3
      Tmp1 = ((((Vmax-2048)*((KgA[KindA+(StateA?1:0)]*4)/GK[GainA]))>>12)+100-List[V0_POSI].Val)
 80160aa:	803b      	strh	r3, [r7, #0]
      for(j=0;j<11;j++){
 80160ac:	2300      	movs	r3, #0
 80160ae:	71bb      	strb	r3, [r7, #6]
 80160b0:	e06e      	b.n	8016190 <Auto_Fit+0x7a8>
 80160b2:	bf00      	nop
 80160b4:	20002866 	.word	0x20002866
 80160b8:	2000057c 	.word	0x2000057c
 80160bc:	20006882 	.word	0x20006882
 80160c0:	2000285e 	.word	0x2000285e
 80160c4:	20002846 	.word	0x20002846
 80160c8:	20000560 	.word	0x20000560
 80160cc:	20000298 	.word	0x20000298
 80160d0:	20002852 	.word	0x20002852
 80160d4:	20002864 	.word	0x20002864
        WaveProcess();
 80160d8:	f7fe ffa4 	bl	8015024 <WaveProcess>
        if((k==0)&&(Edge < 60)&&(List[TIM_BASE].Val >5)){
 80160dc:	797b      	ldrb	r3, [r7, #5]
 80160de:	2b00      	cmp	r3, #0
 80160e0:	d114      	bne.n	801610c <Auto_Fit+0x724>
 80160e2:	4b38      	ldr	r3, [pc, #224]	; (80161c4 <Auto_Fit+0x7dc>)
 80160e4:	681b      	ldr	r3, [r3, #0]
 80160e6:	2b3b      	cmp	r3, #59	; 0x3b
 80160e8:	dc10      	bgt.n	801610c <Auto_Fit+0x724>
 80160ea:	4b37      	ldr	r3, [pc, #220]	; (80161c8 <Auto_Fit+0x7e0>)
 80160ec:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 80160f0:	2b05      	cmp	r3, #5
 80160f2:	dd0b      	ble.n	801610c <Auto_Fit+0x724>
          Set_Base(5);                           // Ӳ������ɨ��ʱ����λ
 80160f4:	2005      	movs	r0, #5
 80160f6:	f7f6 fa61 	bl	800c5bc <Set_Base>
          List[TIM_BASE].Val = 5;
 80160fa:	4b33      	ldr	r3, [pc, #204]	; (80161c8 <Auto_Fit+0x7e0>)
 80160fc:	2205      	movs	r2, #5
 80160fe:	879a      	strh	r2, [r3, #60]	; 0x3c
          WaveProcess();
 8016100:	f7fe ff90 	bl	8015024 <WaveProcess>
          Update_Proc_All();
 8016104:	f7fe fc16 	bl	8014934 <Update_Proc_All>
          k=1;
 8016108:	2301      	movs	r3, #1
 801610a:	717b      	strb	r3, [r7, #5]
        }
        if((Edge > 180)&&(List[TIM_BASE].Val > 2)){
 801610c:	4b2d      	ldr	r3, [pc, #180]	; (80161c4 <Auto_Fit+0x7dc>)
 801610e:	681b      	ldr	r3, [r3, #0]
 8016110:	2bb4      	cmp	r3, #180	; 0xb4
 8016112:	dd1b      	ble.n	801614c <Auto_Fit+0x764>
 8016114:	4b2c      	ldr	r3, [pc, #176]	; (80161c8 <Auto_Fit+0x7e0>)
 8016116:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 801611a:	2b02      	cmp	r3, #2
 801611c:	dd16      	ble.n	801614c <Auto_Fit+0x764>
          List[TIM_BASE].Val--;
 801611e:	4b2a      	ldr	r3, [pc, #168]	; (80161c8 <Auto_Fit+0x7e0>)
 8016120:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8016124:	b29b      	uxth	r3, r3
 8016126:	3b01      	subs	r3, #1
 8016128:	b29b      	uxth	r3, r3
 801612a:	b21a      	sxth	r2, r3
 801612c:	4b26      	ldr	r3, [pc, #152]	; (80161c8 <Auto_Fit+0x7e0>)
 801612e:	879a      	strh	r2, [r3, #60]	; 0x3c
          Set_Base(List[TIM_BASE].Val);   // Ӳ������ɨ��ʱ����λ
 8016130:	4b25      	ldr	r3, [pc, #148]	; (80161c8 <Auto_Fit+0x7e0>)
 8016132:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8016136:	4618      	mov	r0, r3
 8016138:	f7f6 fa40 	bl	800c5bc <Set_Base>
          WaveProcess();
 801613c:	f7fe ff72 	bl	8015024 <WaveProcess>
                 Update_Proc_All();
 8016140:	f7fe fbf8 	bl	8014934 <Update_Proc_All>
          HAL_Delay(50);
 8016144:	2032      	movs	r0, #50	; 0x32
 8016146:	f002 f953 	bl	80183f0 <HAL_Delay>
 801614a:	e01e      	b.n	801618a <Auto_Fit+0x7a2>
        }
        else if((Edge < 80)&&(List[TIM_BASE].Val< 11)){
 801614c:	4b1d      	ldr	r3, [pc, #116]	; (80161c4 <Auto_Fit+0x7dc>)
 801614e:	681b      	ldr	r3, [r3, #0]
 8016150:	2b4f      	cmp	r3, #79	; 0x4f
 8016152:	dc1a      	bgt.n	801618a <Auto_Fit+0x7a2>
 8016154:	4b1c      	ldr	r3, [pc, #112]	; (80161c8 <Auto_Fit+0x7e0>)
 8016156:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 801615a:	2b0a      	cmp	r3, #10
 801615c:	dc15      	bgt.n	801618a <Auto_Fit+0x7a2>
          List[TIM_BASE].Val++;
 801615e:	4b1a      	ldr	r3, [pc, #104]	; (80161c8 <Auto_Fit+0x7e0>)
 8016160:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8016164:	b29b      	uxth	r3, r3
 8016166:	3301      	adds	r3, #1
 8016168:	b29b      	uxth	r3, r3
 801616a:	b21a      	sxth	r2, r3
 801616c:	4b16      	ldr	r3, [pc, #88]	; (80161c8 <Auto_Fit+0x7e0>)
 801616e:	879a      	strh	r2, [r3, #60]	; 0x3c
          Set_Base(List[TIM_BASE].Val);   // Ӳ������ɨ��ʱ����λ
 8016170:	4b15      	ldr	r3, [pc, #84]	; (80161c8 <Auto_Fit+0x7e0>)
 8016172:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8016176:	4618      	mov	r0, r3
 8016178:	f7f6 fa20 	bl	800c5bc <Set_Base>
          WaveProcess();
 801617c:	f7fe ff52 	bl	8015024 <WaveProcess>
                 Update_Proc_All();
 8016180:	f7fe fbd8 	bl	8014934 <Update_Proc_All>
          HAL_Delay(50);
 8016184:	2032      	movs	r0, #50	; 0x32
 8016186:	f002 f933 	bl	80183f0 <HAL_Delay>
      for(j=0;j<11;j++){
 801618a:	79bb      	ldrb	r3, [r7, #6]
 801618c:	3301      	adds	r3, #1
 801618e:	71bb      	strb	r3, [r7, #6]
 8016190:	79bb      	ldrb	r3, [r7, #6]
 8016192:	2b0a      	cmp	r3, #10
 8016194:	d9a0      	bls.n	80160d8 <Auto_Fit+0x6f0>
        }
      }

      if(Tmp1 < 20){
 8016196:	f9b7 3000 	ldrsh.w	r3, [r7]
 801619a:	2b13      	cmp	r3, #19
 801619c:	dc0b      	bgt.n	80161b6 <Auto_Fit+0x7ce>
        List[TIM_BASE].Val=5; //50us
 801619e:	4b0a      	ldr	r3, [pc, #40]	; (80161c8 <Auto_Fit+0x7e0>)
 80161a0:	2205      	movs	r2, #5
 80161a2:	879a      	strh	r2, [r3, #60]	; 0x3c
        Set_Base(List[TIM_BASE].Val);   // Ӳ������ɨ��ʱ����λ
 80161a4:	4b08      	ldr	r3, [pc, #32]	; (80161c8 <Auto_Fit+0x7e0>)
 80161a6:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 80161aa:	4618      	mov	r0, r3
 80161ac:	f7f6 fa06 	bl	800c5bc <Set_Base>
        HAL_Delay(50);
 80161b0:	2032      	movs	r0, #50	; 0x32
 80161b2:	f002 f91d 	bl	80183f0 <HAL_Delay>
      }
       Update_Proc_All();
 80161b6:	f7fe fbbd 	bl	8014934 <Update_Proc_All>
  }
}
 80161ba:	bf00      	nop
 80161bc:	370c      	adds	r7, #12
 80161be:	46bd      	mov	sp, r7
 80161c0:	bd90      	pop	{r4, r7, pc}
 80161c2:	bf00      	nop
 80161c4:	2000284c 	.word	0x2000284c
 80161c8:	20000298 	.word	0x20000298

080161cc <Init_Touch>:

unsigned char val[2]; //input buffer

// initialize touch screen
void Init_Touch(void)
{
 80161cc:	b580      	push	{r7, lr}
 80161ce:	af00      	add	r7, sp, #0
	Touch_SPI();
 80161d0:	f000 f810 	bl	80161f4 <Touch_SPI>
	HAL_GPIO_WritePin( TpCs_GPIO_Port, TpCs_Pin, GPIO_PIN_RESET);
 80161d4:	2200      	movs	r2, #0
 80161d6:	2140      	movs	r1, #64	; 0x40
 80161d8:	4805      	ldr	r0, [pc, #20]	; (80161f0 <Init_Touch+0x24>)
 80161da:	f003 fce7 	bl	8019bac <HAL_GPIO_WritePin>
// not needed yet
	HAL_GPIO_WritePin( TpCs_GPIO_Port, TpCs_Pin, GPIO_PIN_SET);
 80161de:	2201      	movs	r2, #1
 80161e0:	2140      	movs	r1, #64	; 0x40
 80161e2:	4803      	ldr	r0, [pc, #12]	; (80161f0 <Init_Touch+0x24>)
 80161e4:	f003 fce2 	bl	8019bac <HAL_GPIO_WritePin>
	LCD_SPI();
 80161e8:	f000 f814 	bl	8016214 <LCD_SPI>
}
 80161ec:	bf00      	nop
 80161ee:	bd80      	pop	{r7, pc}
 80161f0:	40020400 	.word	0x40020400

080161f4 <Touch_SPI>:

// set SPI for touch controller
void Touch_SPI(void)
{
 80161f4:	b580      	push	{r7, lr}
 80161f6:	af00      	add	r7, sp, #0
//	HAL_SPI_DeInit(&hspi3);  switch on the fly
	hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 80161f8:	4b05      	ldr	r3, [pc, #20]	; (8016210 <Touch_SPI+0x1c>)
 80161fa:	2200      	movs	r2, #0
 80161fc:	60da      	str	r2, [r3, #12]
	hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16; //slow clock for touch controller
 80161fe:	4b04      	ldr	r3, [pc, #16]	; (8016210 <Touch_SPI+0x1c>)
 8016200:	2218      	movs	r2, #24
 8016202:	61da      	str	r2, [r3, #28]
	HAL_SPI_Init(&hspi3);
 8016204:	4802      	ldr	r0, [pc, #8]	; (8016210 <Touch_SPI+0x1c>)
 8016206:	f005 ff4d 	bl	801c0a4 <HAL_SPI_Init>
}
 801620a:	bf00      	nop
 801620c:	bd80      	pop	{r7, pc}
 801620e:	bf00      	nop
 8016210:	20006a20 	.word	0x20006a20

08016214 <LCD_SPI>:

// set SPI for LCD display
void LCD_SPI(void)
{
 8016214:	b580      	push	{r7, lr}
 8016216:	af00      	add	r7, sp, #0
//	HAL_SPI_DeInit(&hspi3); switch on fly
	hspi3.Init.DataSize = SPI_DATASIZE_16BIT;
 8016218:	4b05      	ldr	r3, [pc, #20]	; (8016230 <LCD_SPI+0x1c>)
 801621a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 801621e:	60da      	str	r2, [r3, #12]
	hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8016220:	4b03      	ldr	r3, [pc, #12]	; (8016230 <LCD_SPI+0x1c>)
 8016222:	2210      	movs	r2, #16
 8016224:	61da      	str	r2, [r3, #28]
	HAL_SPI_Init(&hspi3);
 8016226:	4802      	ldr	r0, [pc, #8]	; (8016230 <LCD_SPI+0x1c>)
 8016228:	f005 ff3c 	bl	801c0a4 <HAL_SPI_Init>
}
 801622c:	bf00      	nop
 801622e:	bd80      	pop	{r7, pc}
 8016230:	20006a20 	.word	0x20006a20

08016234 <read_2046>:

short read_2046( unsigned char cmd )  //internal value read
{
 8016234:	b580      	push	{r7, lr}
 8016236:	b084      	sub	sp, #16
 8016238:	af00      	add	r7, sp, #0
 801623a:	4603      	mov	r3, r0
 801623c:	71fb      	strb	r3, [r7, #7]
	short xyz;

	HAL_SPI_Transmit(&hspi3, &cmd, 1, 1);// timeout 1 ms
 801623e:	1df9      	adds	r1, r7, #7
 8016240:	2301      	movs	r3, #1
 8016242:	2201      	movs	r2, #1
 8016244:	480e      	ldr	r0, [pc, #56]	; (8016280 <read_2046+0x4c>)
 8016246:	f005 ffb6 	bl	801c1b6 <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspi3,val,2,1);   // read value
 801624a:	2301      	movs	r3, #1
 801624c:	2202      	movs	r2, #2
 801624e:	490d      	ldr	r1, [pc, #52]	; (8016284 <read_2046+0x50>)
 8016250:	480b      	ldr	r0, [pc, #44]	; (8016280 <read_2046+0x4c>)
 8016252:	f006 f8ec 	bl	801c42e <HAL_SPI_Receive>

	xyz = (val[0] <<8) +val[1];
 8016256:	4b0b      	ldr	r3, [pc, #44]	; (8016284 <read_2046+0x50>)
 8016258:	781b      	ldrb	r3, [r3, #0]
 801625a:	b29b      	uxth	r3, r3
 801625c:	021b      	lsls	r3, r3, #8
 801625e:	b29a      	uxth	r2, r3
 8016260:	4b08      	ldr	r3, [pc, #32]	; (8016284 <read_2046+0x50>)
 8016262:	785b      	ldrb	r3, [r3, #1]
 8016264:	b29b      	uxth	r3, r3
 8016266:	4413      	add	r3, r2
 8016268:	b29b      	uxth	r3, r3
 801626a:	81fb      	strh	r3, [r7, #14]
	xyz = xyz >> 3;  //12 bit value
 801626c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8016270:	10db      	asrs	r3, r3, #3
 8016272:	81fb      	strh	r3, [r7, #14]
	return xyz;
 8016274:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 8016278:	4618      	mov	r0, r3
 801627a:	3710      	adds	r7, #16
 801627c:	46bd      	mov	sp, r7
 801627e:	bd80      	pop	{r7, pc}
 8016280:	20006a20 	.word	0x20006a20
 8016284:	2000688c 	.word	0x2000688c

08016288 <Touch_Read>:

char Touch_Read(short *x, short*y)
{
 8016288:	b580      	push	{r7, lr}
 801628a:	b084      	sub	sp, #16
 801628c:	af00      	add	r7, sp, #0
 801628e:	6078      	str	r0, [r7, #4]
 8016290:	6039      	str	r1, [r7, #0]
	short z1,z2;
	short press;
	press =0;
 8016292:	2300      	movs	r3, #0
 8016294:	81fb      	strh	r3, [r7, #14]

	Touch_SPI();
 8016296:	f7ff ffad 	bl	80161f4 <Touch_SPI>
	HAL_GPIO_WritePin( TpCs_GPIO_Port, TpCs_Pin, GPIO_PIN_RESET);
 801629a:	2200      	movs	r2, #0
 801629c:	2140      	movs	r1, #64	; 0x40
 801629e:	481f      	ldr	r0, [pc, #124]	; (801631c <Touch_Read+0x94>)
 80162a0:	f003 fc84 	bl	8019bac <HAL_GPIO_WritePin>

	z1 = read_2046(0xB0);  //read z1 cmd 8+3
 80162a4:	20b0      	movs	r0, #176	; 0xb0
 80162a6:	f7ff ffc5 	bl	8016234 <read_2046>
 80162aa:	4603      	mov	r3, r0
 80162ac:	81bb      	strh	r3, [r7, #12]
	z2 = read_2046(0xC0);  //read z2 cmd 8+4
 80162ae:	20c0      	movs	r0, #192	; 0xc0
 80162b0:	f7ff ffc0 	bl	8016234 <read_2046>
 80162b4:	4603      	mov	r3, r0
 80162b6:	817b      	strh	r3, [r7, #10]
	press = z1 + 4095;
 80162b8:	89bb      	ldrh	r3, [r7, #12]
 80162ba:	f603 73ff 	addw	r3, r3, #4095	; 0xfff
 80162be:	b29b      	uxth	r3, r3
 80162c0:	81fb      	strh	r3, [r7, #14]
	press -= z2;
 80162c2:	89fa      	ldrh	r2, [r7, #14]
 80162c4:	897b      	ldrh	r3, [r7, #10]
 80162c6:	1ad3      	subs	r3, r2, r3
 80162c8:	b29b      	uxth	r3, r3
 80162ca:	81fb      	strh	r3, [r7, #14]

	if( press >= 400 )
 80162cc:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80162d0:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 80162d4:	db0d      	blt.n	80162f2 <Touch_Read+0x6a>
	{
		*x = read_2046(0xD0);  //read x cmd 8+5
 80162d6:	20d0      	movs	r0, #208	; 0xd0
 80162d8:	f7ff ffac 	bl	8016234 <read_2046>
 80162dc:	4603      	mov	r3, r0
 80162de:	461a      	mov	r2, r3
 80162e0:	687b      	ldr	r3, [r7, #4]
 80162e2:	801a      	strh	r2, [r3, #0]
		*y = read_2046(0x90);  //read y cmd 8+1
 80162e4:	2090      	movs	r0, #144	; 0x90
 80162e6:	f7ff ffa5 	bl	8016234 <read_2046>
 80162ea:	4603      	mov	r3, r0
 80162ec:	461a      	mov	r2, r3
 80162ee:	683b      	ldr	r3, [r7, #0]
 80162f0:	801a      	strh	r2, [r3, #0]
	}

	HAL_GPIO_WritePin( TpCs_GPIO_Port, TpCs_Pin, GPIO_PIN_SET);
 80162f2:	2201      	movs	r2, #1
 80162f4:	2140      	movs	r1, #64	; 0x40
 80162f6:	4809      	ldr	r0, [pc, #36]	; (801631c <Touch_Read+0x94>)
 80162f8:	f003 fc58 	bl	8019bac <HAL_GPIO_WritePin>
	LCD_SPI();
 80162fc:	f7ff ff8a 	bl	8016214 <LCD_SPI>

	return (press<400)?0:1;
 8016300:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8016304:	f240 128f 	movw	r2, #399	; 0x18f
 8016308:	4293      	cmp	r3, r2
 801630a:	bfcc      	ite	gt
 801630c:	2301      	movgt	r3, #1
 801630e:	2300      	movle	r3, #0
 8016310:	b2db      	uxtb	r3, r3
}
 8016312:	4618      	mov	r0, r3
 8016314:	3710      	adds	r7, #16
 8016316:	46bd      	mov	sp, r7
 8016318:	bd80      	pop	{r7, pc}
 801631a:	bf00      	nop
 801631c:	40020400 	.word	0x40020400

08016320 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8016320:	b580      	push	{r7, lr}
 8016322:	b082      	sub	sp, #8
 8016324:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
  short i;
  char SAVE_FLAG = 0;
 8016326:	2300      	movs	r3, #0
 8016328:	717b      	strb	r3, [r7, #5]
  char Pop_Num = 0;
 801632a:	2300      	movs	r3, #0
 801632c:	713b      	strb	r3, [r7, #4]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 801632e:	f001 ffed 	bl	801830c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8016332:	f001 f81d 	bl	8017370 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8016336:	f001 fbc7 	bl	8017ac8 <MX_GPIO_Init>
  MX_DMA_Init();
 801633a:	f001 fb87 	bl	8017a4c <MX_DMA_Init>
  MX_ADC1_Init();
 801633e:	f001 f88b 	bl	8017458 <MX_ADC1_Init>
  MX_ADC2_Init();
 8016342:	f001 f8db 	bl	80174fc <MX_ADC2_Init>
  MX_DAC_Init();
 8016346:	f001 f92b 	bl	80175a0 <MX_DAC_Init>
  MX_SPI2_Init();
 801634a:	f001 f967 	bl	801761c <MX_SPI2_Init>
  MX_SPI3_Init();
 801634e:	f001 f99b 	bl	8017688 <MX_SPI3_Init>
  MX_TIM1_Init();
 8016352:	f001 f9d1 	bl	80176f8 <MX_TIM1_Init>
  MX_TIM3_Init();
 8016356:	f001 fa45 	bl	80177e4 <MX_TIM3_Init>
  MX_TIM5_Init();
 801635a:	f001 faa3 	bl	80178a4 <MX_TIM5_Init>
  MX_USB_DEVICE_Init();
 801635e:	f00b fecf 	bl	8022100 <MX_USB_DEVICE_Init>
  MX_TIM7_Init();
 8016362:	f001 fb2d 	bl	80179c0 <MX_TIM7_Init>
  /* USER CODE BEGIN 2 */

  Init_LCD();
 8016366:	f7fb fd29 	bl	8011dbc <Init_LCD>
  Init_Touch();
 801636a:	f7ff ff2f 	bl	80161cc <Init_Touch>

  SetColor(BLK, WHT);
 801636e:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8016372:	2000      	movs	r0, #0
 8016374:	f7f7 fc16 	bl	800dba4 <SetColor>

  DispStr8x14(8, 90, PRN, "         Oscilloscope              ");
 8016378:	4bb3      	ldr	r3, [pc, #716]	; (8016648 <main+0x328>)
 801637a:	2200      	movs	r2, #0
 801637c:	215a      	movs	r1, #90	; 0x5a
 801637e:	2008      	movs	r0, #8
 8016380:	f7f7 fbb8 	bl	800daf4 <DispStr8x14>
  DispStr8x14(8+22*8, 90, PRN, APP_VERSION);
 8016384:	4bb1      	ldr	r3, [pc, #708]	; (801664c <main+0x32c>)
 8016386:	2200      	movs	r2, #0
 8016388:	215a      	movs	r1, #90	; 0x5a
 801638a:	20b8      	movs	r0, #184	; 0xb8
 801638c:	f7f7 fbb2 	bl	800daf4 <DispStr8x14>
  DispStr8x14(8, 70, PRN, "        System Initializing...       ");
 8016390:	4baf      	ldr	r3, [pc, #700]	; (8016650 <main+0x330>)
 8016392:	2200      	movs	r2, #0
 8016394:	2146      	movs	r1, #70	; 0x46
 8016396:	2008      	movs	r0, #8
 8016398:	f7f7 fbac 	bl	800daf4 <DispStr8x14>

  HAL_Delay(1000);
 801639c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80163a0:	f002 f826 	bl	80183f0 <HAL_Delay>

//=============================check callibration׼===========================
  Read_CalFlag();
 80163a4:	f7fa ff72 	bl	801128c <Read_CalFlag>

  if(Cal_Flag == 1)
 80163a8:	4baa      	ldr	r3, [pc, #680]	; (8016654 <main+0x334>)
 80163aa:	781b      	ldrb	r3, [r3, #0]
 80163ac:	2b01      	cmp	r3, #1
 80163ae:	d10f      	bne.n	80163d0 <main+0xb0>
  {
	  Cal_Flag = 0;
 80163b0:	4ba8      	ldr	r3, [pc, #672]	; (8016654 <main+0x334>)
 80163b2:	2200      	movs	r2, #0
 80163b4:	701a      	strb	r2, [r3, #0]
	  SetColor(BLK, WHT);
 80163b6:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80163ba:	2000      	movs	r0, #0
 80163bc:	f7f7 fbf2 	bl	800dba4 <SetColor>
	  Zero_Align();                              //set zero
 80163c0:	f7fe fd3a 	bl	8014e38 <Zero_Align>
	  Restore();                                 //restore list
 80163c4:	f7fb f96c 	bl	80116a0 <Restore>
	  Save_Parameter();                          //save list
 80163c8:	f7fa ff88 	bl	80112dc <Save_Parameter>
	  Save_Kpg();
 80163cc:	f7fb f8b0 	bl	8011530 <Save_Kpg>
  }
  Read_Kpg();
 80163d0:	f7fb f924 	bl	801161c <Read_Kpg>
  Read_Parameter();
 80163d4:	f7fb f81e 	bl	8011414 <Read_Parameter>
  File_Num();
 80163d8:	f7f9 fc64 	bl	800fca4 <File_Num>
  memcpy(Data, DEMO, 310);
 80163dc:	f44f 729b 	mov.w	r2, #310	; 0x136
 80163e0:	499d      	ldr	r1, [pc, #628]	; (8016658 <main+0x338>)
 80163e2:	489e      	ldr	r0, [pc, #632]	; (801665c <main+0x33c>)
 80163e4:	f00c fc2a 	bl	8022c3c <memcpy>

  LCD_ClrScrn(GRY);
 80163e8:	f643 10e7 	movw	r0, #14823	; 0x39e7
 80163ec:	f7fb fdfc 	bl	8011fe8 <LCD_ClrScrn>
  Update_Title();
 80163f0:	f7fb ff9c 	bl	801232c <Update_Title>

  List[SMPL_DPTH].Flg |= UPD;
 80163f4:	4b9a      	ldr	r3, [pc, #616]	; (8016660 <main+0x340>)
 80163f6:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 80163fa:	f043 0320 	orr.w	r3, r3, #32
 80163fe:	b2da      	uxtb	r2, r3
 8016400:	4b97      	ldr	r3, [pc, #604]	; (8016660 <main+0x340>)
 8016402:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e

  StdBy_Time = List[STANDBY].Val * MIN_UNIT;
 8016406:	4b96      	ldr	r3, [pc, #600]	; (8016660 <main+0x340>)
 8016408:	f9b3 314c 	ldrsh.w	r3, [r3, #332]	; 0x14c
 801640c:	b29b      	uxth	r3, r3
 801640e:	461a      	mov	r2, r3
 8016410:	0112      	lsls	r2, r2, #4
 8016412:	1ad3      	subs	r3, r2, r3
 8016414:	009b      	lsls	r3, r3, #2
 8016416:	b29b      	uxth	r3, r3
 8016418:	b21a      	sxth	r2, r3
 801641a:	4b92      	ldr	r3, [pc, #584]	; (8016664 <main+0x344>)
 801641c:	801a      	strh	r2, [r3, #0]

  // Start timer
  HAL_TIM_Base_Start_IT(&htim3);
 801641e:	4892      	ldr	r0, [pc, #584]	; (8016668 <main+0x348>)
 8016420:	f006 fd64 	bl	801ceec <HAL_TIM_Base_Start_IT>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	    if((List[STANDBY].Val != 0)&&(StdBy_Time == 0))
 8016424:	4b8e      	ldr	r3, [pc, #568]	; (8016660 <main+0x340>)
 8016426:	f9b3 314c 	ldrsh.w	r3, [r3, #332]	; 0x14c
 801642a:	2b00      	cmp	r3, #0
 801642c:	d007      	beq.n	801643e <main+0x11e>
 801642e:	4b8d      	ldr	r3, [pc, #564]	; (8016664 <main+0x344>)
 8016430:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016434:	2b00      	cmp	r3, #0
 8016436:	d102      	bne.n	801643e <main+0x11e>
	    {
	      StdBy_Flag = 1;
 8016438:	4b8c      	ldr	r3, [pc, #560]	; (801666c <main+0x34c>)
 801643a:	2201      	movs	r2, #1
 801643c:	701a      	strb	r2, [r3, #0]
	    }

	    Update_Detail();
 801643e:	f7fc fee1 	bl	8013204 <Update_Detail>
	    Update_Blink();
 8016442:	f7fb ffc7 	bl	80123d4 <Update_Blink>
	    WaveProcess();
 8016446:	f7fe fded 	bl	8015024 <WaveProcess>
	    DrawWindow(WaveBuf, ParamTab);
 801644a:	4989      	ldr	r1, [pc, #548]	; (8016670 <main+0x350>)
 801644c:	4889      	ldr	r0, [pc, #548]	; (8016674 <main+0x354>)
 801644e:	f7f7 f92d 	bl	800d6ac <DrawWindow>

	   if(TIM_BASE_Val!=0)
 8016452:	4b89      	ldr	r3, [pc, #548]	; (8016678 <main+0x358>)
 8016454:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016458:	2b00      	cmp	r3, #0
 801645a:	d01c      	beq.n	8016496 <main+0x176>
	    {
	      List[TIM_BASE].Val=TIM_BASE_Val;
 801645c:	4b86      	ldr	r3, [pc, #536]	; (8016678 <main+0x358>)
 801645e:	f9b3 2000 	ldrsh.w	r2, [r3]
 8016462:	4b7f      	ldr	r3, [pc, #508]	; (8016660 <main+0x340>)
 8016464:	879a      	strh	r2, [r3, #60]	; 0x3c
	      List[TIM_BASE].Flg |= UPD;
 8016466:	4b7e      	ldr	r3, [pc, #504]	; (8016660 <main+0x340>)
 8016468:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 801646c:	f043 0320 	orr.w	r3, r3, #32
 8016470:	b2da      	uxtb	r2, r3
 8016472:	4b7b      	ldr	r3, [pc, #492]	; (8016660 <main+0x340>)
 8016474:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
	      TIM_BASE_Val=Current;
 8016478:	4b80      	ldr	r3, [pc, #512]	; (801667c <main+0x35c>)
 801647a:	f9b3 2000 	ldrsh.w	r2, [r3]
 801647e:	4b7e      	ldr	r3, [pc, #504]	; (8016678 <main+0x358>)
 8016480:	801a      	strh	r2, [r3, #0]
	      Update_Title();
 8016482:	f7fb ff53 	bl	801232c <Update_Title>
	      Current=TIM_BASE_Val;
 8016486:	4b7c      	ldr	r3, [pc, #496]	; (8016678 <main+0x358>)
 8016488:	f9b3 2000 	ldrsh.w	r2, [r3]
 801648c:	4b7b      	ldr	r3, [pc, #492]	; (801667c <main+0x35c>)
 801648e:	801a      	strh	r2, [r3, #0]
	      TIM_BASE_Val=0;
 8016490:	4b79      	ldr	r3, [pc, #484]	; (8016678 <main+0x358>)
 8016492:	2200      	movs	r2, #0
 8016494:	801a      	strh	r2, [r3, #0]
	    }
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	    if(Key_Buffer != 0)
 8016496:	4b7a      	ldr	r3, [pc, #488]	; (8016680 <main+0x360>)
 8016498:	781b      	ldrb	r3, [r3, #0]
 801649a:	b2db      	uxtb	r3, r3
 801649c:	2b00      	cmp	r3, #0
 801649e:	d0c1      	beq.n	8016424 <main+0x104>
	    {
	      StdBy_Flag = 0;
 80164a0:	4b72      	ldr	r3, [pc, #456]	; (801666c <main+0x34c>)
 80164a2:	2200      	movs	r2, #0
 80164a4:	701a      	strb	r2, [r3, #0]
	      PopupCnt = 10;                  // �ް���ʱ�˵���ά����ʾ 10��
 80164a6:	4b77      	ldr	r3, [pc, #476]	; (8016684 <main+0x364>)
 80164a8:	220a      	movs	r2, #10
 80164aa:	801a      	strh	r2, [r3, #0]
	      List[MenuNow[Current]].Flg |= UPD;
 80164ac:	4b73      	ldr	r3, [pc, #460]	; (801667c <main+0x35c>)
 80164ae:	f9b3 3000 	ldrsh.w	r3, [r3]
 80164b2:	461a      	mov	r2, r3
 80164b4:	4b74      	ldr	r3, [pc, #464]	; (8016688 <main+0x368>)
 80164b6:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 80164ba:	4a69      	ldr	r2, [pc, #420]	; (8016660 <main+0x340>)
 80164bc:	00db      	lsls	r3, r3, #3
 80164be:	4413      	add	r3, r2
 80164c0:	799b      	ldrb	r3, [r3, #6]
 80164c2:	4a6e      	ldr	r2, [pc, #440]	; (801667c <main+0x35c>)
 80164c4:	f9b2 2000 	ldrsh.w	r2, [r2]
 80164c8:	4611      	mov	r1, r2
 80164ca:	4a6f      	ldr	r2, [pc, #444]	; (8016688 <main+0x368>)
 80164cc:	f932 2011 	ldrsh.w	r2, [r2, r1, lsl #1]
 80164d0:	4610      	mov	r0, r2
 80164d2:	f043 0320 	orr.w	r3, r3, #32
 80164d6:	b2d9      	uxtb	r1, r3
 80164d8:	4a61      	ldr	r2, [pc, #388]	; (8016660 <main+0x340>)
 80164da:	00c3      	lsls	r3, r0, #3
 80164dc:	4413      	add	r3, r2
 80164de:	460a      	mov	r2, r1
 80164e0:	719a      	strb	r2, [r3, #6]

	      switch (Key_Buffer)
 80164e2:	4b67      	ldr	r3, [pc, #412]	; (8016680 <main+0x360>)
 80164e4:	781b      	ldrb	r3, [r3, #0]
 80164e6:	b2db      	uxtb	r3, r3
 80164e8:	3b01      	subs	r3, #1
 80164ea:	2b09      	cmp	r3, #9
 80164ec:	f200 86fc 	bhi.w	80172e8 <main+0xfc8>
 80164f0:	a201      	add	r2, pc, #4	; (adr r2, 80164f8 <main+0x1d8>)
 80164f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80164f6:	bf00      	nop
 80164f8:	08016569 	.word	0x08016569
 80164fc:	08016873 	.word	0x08016873
 8016500:	080169bd 	.word	0x080169bd
 8016504:	08016a6b 	.word	0x08016a6b
 8016508:	08016b07 	.word	0x08016b07
 801650c:	08016ec5 	.word	0x08016ec5
 8016510:	080172e9 	.word	0x080172e9
 8016514:	08016543 	.word	0x08016543
 8016518:	08016521 	.word	0x08016521
 801651c:	0801685f 	.word	0x0801685f
	      {
	     case KEYCODE_MEM:
	         i = Save_Bmp(List[SAVE_BMP].Val);
 8016520:	4b4f      	ldr	r3, [pc, #316]	; (8016660 <main+0x340>)
 8016522:	f9b3 30ec 	ldrsh.w	r3, [r3, #236]	; 0xec
 8016526:	4618      	mov	r0, r3
 8016528:	f7f9 fede 	bl	80102e8 <Save_Bmp>
 801652c:	4603      	mov	r3, r0
 801652e:	80fb      	strh	r3, [r7, #6]
	         DispFileInfo(i);
 8016530:	88fb      	ldrh	r3, [r7, #6]
 8016532:	b2db      	uxtb	r3, r3
 8016534:	4618      	mov	r0, r3
 8016536:	f7fe f987 	bl	8014848 <DispFileInfo>
	         DispBMPInfo();
 801653a:	f7fe f9b5 	bl	80148a8 <DispBMPInfo>
	        break;
 801653e:	f000 bed3 	b.w	80172e8 <main+0xfc8>

	     case KEYCODE_ACT:
	       SAVE_FLAG=0;
 8016542:	2300      	movs	r3, #0
 8016544:	717b      	strb	r3, [r7, #5]
	       if(PopType & DAILOG_POP) Close_Pop();
 8016546:	4b51      	ldr	r3, [pc, #324]	; (801668c <main+0x36c>)
 8016548:	781b      	ldrb	r3, [r3, #0]
 801654a:	f003 0304 	and.w	r3, r3, #4
 801654e:	2b00      	cmp	r3, #0
 8016550:	d003      	beq.n	801655a <main+0x23a>
 8016552:	f7f8 f8ab 	bl	800e6ac <Close_Pop>
	       else {
	         Dialog_Pop("Save All ParamTab?");
	         Pop_Num = 1;
	       }
	       break;
 8016556:	f000 bec7 	b.w	80172e8 <main+0xfc8>
	         Dialog_Pop("Save All ParamTab?");
 801655a:	484d      	ldr	r0, [pc, #308]	; (8016690 <main+0x370>)
 801655c:	f7f8 f8d2 	bl	800e704 <Dialog_Pop>
	         Pop_Num = 1;
 8016560:	2301      	movs	r3, #1
 8016562:	713b      	strb	r3, [r7, #4]
	       break;
 8016564:	f000 bec0 	b.w	80172e8 <main+0xfc8>

	     case KEYCODE_PLAY:
	       if((Current == ST)&&(Cal_Flag==0))
 8016568:	4b44      	ldr	r3, [pc, #272]	; (801667c <main+0x35c>)
 801656a:	f9b3 3000 	ldrsh.w	r3, [r3]
 801656e:	2b07      	cmp	r3, #7
 8016570:	d151      	bne.n	8016616 <main+0x2f6>
 8016572:	4b38      	ldr	r3, [pc, #224]	; (8016654 <main+0x334>)
 8016574:	781b      	ldrb	r3, [r3, #0]
 8016576:	2b00      	cmp	r3, #0
 8016578:	d14d      	bne.n	8016616 <main+0x2f6>
	       {
	         if(PopType & DAILOG_POP){
 801657a:	4b44      	ldr	r3, [pc, #272]	; (801668c <main+0x36c>)
 801657c:	781b      	ldrb	r3, [r3, #0]
 801657e:	f003 0304 	and.w	r3, r3, #4
 8016582:	2b00      	cmp	r3, #0
 8016584:	d00e      	beq.n	80165a4 <main+0x284>
	           if(Pop_Num == 1){
 8016586:	793b      	ldrb	r3, [r7, #4]
 8016588:	2b01      	cmp	r3, #1
 801658a:	d105      	bne.n	8016598 <main+0x278>
	             Save_Parameter();
 801658c:	f7fa fea6 	bl	80112dc <Save_Parameter>
	             Close_Pop();
 8016590:	f7f8 f88c 	bl	800e6ac <Close_Pop>
	           Zero_Align();
	           Update_Proc_All();
	           Close_Pop();
	           CalSave_Pop("Save Cal ParamTab?");
	         }
	         break;
 8016594:	f000 be99 	b.w	80172ca <main+0xfaa>
	             Close_Pop();
 8016598:	f7f8 f888 	bl	800e6ac <Close_Pop>
	             List_Pop();
 801659c:	f7f8 f89c 	bl	800e6d8 <List_Pop>
	         break;
 80165a0:	f000 be93 	b.w	80172ca <main+0xfaa>
	         else if((PopType & LIST_POP) && (MenuNow[ST]==RESTORE )) {
 80165a4:	4b39      	ldr	r3, [pc, #228]	; (801668c <main+0x36c>)
 80165a6:	781b      	ldrb	r3, [r3, #0]
 80165a8:	f003 0302 	and.w	r3, r3, #2
 80165ac:	2b00      	cmp	r3, #0
 80165ae:	d00e      	beq.n	80165ce <main+0x2ae>
 80165b0:	4b35      	ldr	r3, [pc, #212]	; (8016688 <main+0x368>)
 80165b2:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 80165b6:	2b28      	cmp	r3, #40	; 0x28
 80165b8:	d109      	bne.n	80165ce <main+0x2ae>
	           Restore_CalPar();
 80165ba:	f7fb f8db 	bl	8011774 <Restore_CalPar>
	           Dialog_Pop("Save All ParamTab?");
 80165be:	4834      	ldr	r0, [pc, #208]	; (8016690 <main+0x370>)
 80165c0:	f7f8 f8a0 	bl	800e704 <Dialog_Pop>
	           Cal_Flag = 1;
 80165c4:	4b23      	ldr	r3, [pc, #140]	; (8016654 <main+0x334>)
 80165c6:	2201      	movs	r2, #1
 80165c8:	701a      	strb	r2, [r3, #0]
	         break;
 80165ca:	f000 be7e 	b.w	80172ca <main+0xfaa>
	         else if((PopType & LIST_POP) && (MenuNow[ST]==AUTO_CAL )) {
 80165ce:	4b2f      	ldr	r3, [pc, #188]	; (801668c <main+0x36c>)
 80165d0:	781b      	ldrb	r3, [r3, #0]
 80165d2:	f003 0302 	and.w	r3, r3, #2
 80165d6:	2b00      	cmp	r3, #0
 80165d8:	f000 8677 	beq.w	80172ca <main+0xfaa>
 80165dc:	4b2a      	ldr	r3, [pc, #168]	; (8016688 <main+0x368>)
 80165de:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 80165e2:	2b27      	cmp	r3, #39	; 0x27
 80165e4:	f040 8671 	bne.w	80172ca <main+0xfaa>
	           Close_Pop();
 80165e8:	f7f8 f860 	bl	800e6ac <Close_Pop>
	           Calibrate_Pop("Waiting for Calibration...");
 80165ec:	4829      	ldr	r0, [pc, #164]	; (8016694 <main+0x374>)
 80165ee:	f7f8 f8ef 	bl	800e7d0 <Calibrate_Pop>
	           Cal_Flag = 1;
 80165f2:	4b18      	ldr	r3, [pc, #96]	; (8016654 <main+0x334>)
 80165f4:	2201      	movs	r2, #1
 80165f6:	701a      	strb	r2, [r3, #0]
	           DrawWindow(WaveBuf, ParamTab);
 80165f8:	491d      	ldr	r1, [pc, #116]	; (8016670 <main+0x350>)
 80165fa:	481e      	ldr	r0, [pc, #120]	; (8016674 <main+0x354>)
 80165fc:	f7f7 f856 	bl	800d6ac <DrawWindow>
	           Zero_Align();
 8016600:	f7fe fc1a 	bl	8014e38 <Zero_Align>
	           Update_Proc_All();
 8016604:	f7fe f996 	bl	8014934 <Update_Proc_All>
	           Close_Pop();
 8016608:	f7f8 f850 	bl	800e6ac <Close_Pop>
	           CalSave_Pop("Save Cal ParamTab?");
 801660c:	4822      	ldr	r0, [pc, #136]	; (8016698 <main+0x378>)
 801660e:	f7f8 f915 	bl	800e83c <CalSave_Pop>
	         break;
 8016612:	f000 be5a 	b.w	80172ca <main+0xfaa>
	       }
	       else if((Current == ST)&&(Cal_Flag==1)){
 8016616:	4b19      	ldr	r3, [pc, #100]	; (801667c <main+0x35c>)
 8016618:	f9b3 3000 	ldrsh.w	r3, [r3]
 801661c:	2b07      	cmp	r3, #7
 801661e:	d13d      	bne.n	801669c <main+0x37c>
 8016620:	4b0c      	ldr	r3, [pc, #48]	; (8016654 <main+0x334>)
 8016622:	781b      	ldrb	r3, [r3, #0]
 8016624:	2b01      	cmp	r3, #1
 8016626:	d139      	bne.n	801669c <main+0x37c>
	         if(PopType & DAILOG_POP){
 8016628:	4b18      	ldr	r3, [pc, #96]	; (801668c <main+0x36c>)
 801662a:	781b      	ldrb	r3, [r3, #0]
 801662c:	f003 0304 	and.w	r3, r3, #4
 8016630:	2b00      	cmp	r3, #0
 8016632:	f000 864c 	beq.w	80172ce <main+0xfae>
	           Save_Kpg();
 8016636:	f7fa ff7b 	bl	8011530 <Save_Kpg>
	           Close_Pop();
 801663a:	f7f8 f837 	bl	800e6ac <Close_Pop>
	           Cal_Flag = 0;
 801663e:	4b05      	ldr	r3, [pc, #20]	; (8016654 <main+0x334>)
 8016640:	2200      	movs	r2, #0
 8016642:	701a      	strb	r2, [r3, #0]
	         }
	         break;
 8016644:	f000 be43 	b.w	80172ce <main+0xfae>
 8016648:	080009f4 	.word	0x080009f4
 801664c:	20000580 	.word	0x20000580
 8016650:	08000a18 	.word	0x08000a18
 8016654:	200001b4 	.word	0x200001b4
 8016658:	08000b58 	.word	0x08000b58
 801665c:	20000008 	.word	0x20000008
 8016660:	20000298 	.word	0x20000298
 8016664:	2000079c 	.word	0x2000079c
 8016668:	200069d8 	.word	0x200069d8
 801666c:	200007a2 	.word	0x200007a2
 8016670:	20000140 	.word	0x20000140
 8016674:	20000c04 	.word	0x20000c04
 8016678:	20002810 	.word	0x20002810
 801667c:	2000079e 	.word	0x2000079e
 8016680:	2000077d 	.word	0x2000077d
 8016684:	20000000 	.word	0x20000000
 8016688:	20000538 	.word	0x20000538
 801668c:	2000078c 	.word	0x2000078c
 8016690:	08000a40 	.word	0x08000a40
 8016694:	08000a54 	.word	0x08000a54
 8016698:	08000a70 	.word	0x08000a70
	       }

	       if ((Current == FN)&&(PopType & LIST_POP)){
 801669c:	4bbc      	ldr	r3, [pc, #752]	; (8016990 <main+0x670>)
 801669e:	f9b3 3000 	ldrsh.w	r3, [r3]
 80166a2:	2b05      	cmp	r3, #5
 80166a4:	d177      	bne.n	8016796 <main+0x476>
 80166a6:	4bbb      	ldr	r3, [pc, #748]	; (8016994 <main+0x674>)
 80166a8:	781b      	ldrb	r3, [r3, #0]
 80166aa:	f003 0302 	and.w	r3, r3, #2
 80166ae:	2b00      	cmp	r3, #0
 80166b0:	d071      	beq.n	8016796 <main+0x476>
	         i = 0;
 80166b2:	2300      	movs	r3, #0
 80166b4:	80fb      	strh	r3, [r7, #6]
	         {
	           if(SAVE_FLAG==KEYCODE_MEM)Close_Pop();
 80166b6:	797b      	ldrb	r3, [r7, #5]
 80166b8:	2b09      	cmp	r3, #9
 80166ba:	d101      	bne.n	80166c0 <main+0x3a0>
 80166bc:	f7f7 fff6 	bl	800e6ac <Close_Pop>
	           if(MenuNow[FN] == SAVE_BMP) i = Save_Bmp(List[SAVE_BMP].Val);
 80166c0:	4bb5      	ldr	r3, [pc, #724]	; (8016998 <main+0x678>)
 80166c2:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 80166c6:	2b1d      	cmp	r3, #29
 80166c8:	d107      	bne.n	80166da <main+0x3ba>
 80166ca:	4bb4      	ldr	r3, [pc, #720]	; (801699c <main+0x67c>)
 80166cc:	f9b3 30ec 	ldrsh.w	r3, [r3, #236]	; 0xec
 80166d0:	4618      	mov	r0, r3
 80166d2:	f7f9 fe09 	bl	80102e8 <Save_Bmp>
 80166d6:	4603      	mov	r3, r0
 80166d8:	80fb      	strh	r3, [r7, #6]
	           if(MenuNow[FN] == SAVE_DAT) i = Save_Dat(List[SAVE_DAT].Val);
 80166da:	4baf      	ldr	r3, [pc, #700]	; (8016998 <main+0x678>)
 80166dc:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 80166e0:	2b1e      	cmp	r3, #30
 80166e2:	d107      	bne.n	80166f4 <main+0x3d4>
 80166e4:	4bad      	ldr	r3, [pc, #692]	; (801699c <main+0x67c>)
 80166e6:	f9b3 30f4 	ldrsh.w	r3, [r3, #244]	; 0xf4
 80166ea:	4618      	mov	r0, r3
 80166ec:	f7f9 fcbc 	bl	8010068 <Save_Dat>
 80166f0:	4603      	mov	r3, r0
 80166f2:	80fb      	strh	r3, [r7, #6]
	           if(MenuNow[FN] == SAVE_BUF) i = Save_Buf(List[SAVE_BUF].Val);
 80166f4:	4ba8      	ldr	r3, [pc, #672]	; (8016998 <main+0x678>)
 80166f6:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 80166fa:	2b1f      	cmp	r3, #31
 80166fc:	d107      	bne.n	801670e <main+0x3ee>
 80166fe:	4ba7      	ldr	r3, [pc, #668]	; (801699c <main+0x67c>)
 8016700:	f9b3 30fc 	ldrsh.w	r3, [r3, #252]	; 0xfc
 8016704:	4618      	mov	r0, r3
 8016706:	f7f9 fbd9 	bl	800febc <Save_Buf>
 801670a:	4603      	mov	r3, r0
 801670c:	80fb      	strh	r3, [r7, #6]
	           if(MenuNow[FN] == SAVE_CSV) i = Save_Csv(List[SAVE_CSV].Val);
 801670e:	4ba2      	ldr	r3, [pc, #648]	; (8016998 <main+0x678>)
 8016710:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8016714:	2b20      	cmp	r3, #32
 8016716:	d107      	bne.n	8016728 <main+0x408>
 8016718:	4ba0      	ldr	r3, [pc, #640]	; (801699c <main+0x67c>)
 801671a:	f9b3 3104 	ldrsh.w	r3, [r3, #260]	; 0x104
 801671e:	4618      	mov	r0, r3
 8016720:	f7f9 ff4c 	bl	80105bc <Save_Csv>
 8016724:	4603      	mov	r3, r0
 8016726:	80fb      	strh	r3, [r7, #6]
	           if(MenuNow[FN] == SAVE_SVG) i = Save_Svg(List[SAVE_SVG].Val);
 8016728:	4b9b      	ldr	r3, [pc, #620]	; (8016998 <main+0x678>)
 801672a:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 801672e:	2b21      	cmp	r3, #33	; 0x21
 8016730:	d107      	bne.n	8016742 <main+0x422>
 8016732:	4b9a      	ldr	r3, [pc, #616]	; (801699c <main+0x67c>)
 8016734:	f9b3 310c 	ldrsh.w	r3, [r3, #268]	; 0x10c
 8016738:	4618      	mov	r0, r3
 801673a:	f7fa f965 	bl	8010a08 <Save_Svg>
 801673e:	4603      	mov	r3, r0
 8016740:	80fb      	strh	r3, [r7, #6]
	           if(MenuNow[FN] == LOAD_DAT) i = Load_Dat(List[LOAD_DAT].Val);
 8016742:	4b95      	ldr	r3, [pc, #596]	; (8016998 <main+0x678>)
 8016744:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8016748:	2b22      	cmp	r3, #34	; 0x22
 801674a:	d107      	bne.n	801675c <main+0x43c>
 801674c:	4b93      	ldr	r3, [pc, #588]	; (801699c <main+0x67c>)
 801674e:	f9b3 3114 	ldrsh.w	r3, [r3, #276]	; 0x114
 8016752:	4618      	mov	r0, r3
 8016754:	f7f9 fd1c 	bl	8010190 <Load_Dat>
 8016758:	4603      	mov	r3, r0
 801675a:	80fb      	strh	r3, [r7, #6]
	           if(MenuNow[FN] == LOAD_BUF) i = Load_Buf(List[LOAD_BUF].Val);
 801675c:	4b8e      	ldr	r3, [pc, #568]	; (8016998 <main+0x678>)
 801675e:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8016762:	2b23      	cmp	r3, #35	; 0x23
 8016764:	d107      	bne.n	8016776 <main+0x456>
 8016766:	4b8d      	ldr	r3, [pc, #564]	; (801699c <main+0x67c>)
 8016768:	f9b3 311c 	ldrsh.w	r3, [r3, #284]	; 0x11c
 801676c:	4618      	mov	r0, r3
 801676e:	f7f9 fac7 	bl	800fd00 <Load_Buf>
 8016772:	4603      	mov	r3, r0
 8016774:	80fb      	strh	r3, [r7, #6]
	           SAVE_FLAG = 0;
 8016776:	2300      	movs	r3, #0
 8016778:	717b      	strb	r3, [r7, #5]
	         }
	         DispFileInfo(i);
 801677a:	88fb      	ldrh	r3, [r7, #6]
 801677c:	b2db      	uxtb	r3, r3
 801677e:	4618      	mov	r0, r3
 8016780:	f7fe f862 	bl	8014848 <DispFileInfo>

	         if(PopType & DAILOG_POP)  Close_Pop();
 8016784:	4b83      	ldr	r3, [pc, #524]	; (8016994 <main+0x674>)
 8016786:	781b      	ldrb	r3, [r3, #0]
 8016788:	f003 0304 	and.w	r3, r3, #4
 801678c:	2b00      	cmp	r3, #0
 801678e:	d062      	beq.n	8016856 <main+0x536>
 8016790:	f7f7 ff8c 	bl	800e6ac <Close_Pop>
 8016794:	e05f      	b.n	8016856 <main+0x536>

	       }
	       else if((PopType & DAILOG_POP ) &&(SAVE_FLAG!=KEYCODE_MEM)){
 8016796:	4b7f      	ldr	r3, [pc, #508]	; (8016994 <main+0x674>)
 8016798:	781b      	ldrb	r3, [r3, #0]
 801679a:	f003 0304 	and.w	r3, r3, #4
 801679e:	2b00      	cmp	r3, #0
 80167a0:	d00b      	beq.n	80167ba <main+0x49a>
 80167a2:	797b      	ldrb	r3, [r7, #5]
 80167a4:	2b09      	cmp	r3, #9
 80167a6:	d008      	beq.n	80167ba <main+0x49a>
	         Save_Parameter();
 80167a8:	f7fa fd98 	bl	80112dc <Save_Parameter>
	         Cal_Flag = 0;
 80167ac:	4b7c      	ldr	r3, [pc, #496]	; (80169a0 <main+0x680>)
 80167ae:	2200      	movs	r2, #0
 80167b0:	701a      	strb	r2, [r3, #0]
	         Close_Pop();
 80167b2:	f7f7 ff7b 	bl	800e6ac <Close_Pop>
	         break;
 80167b6:	f000 bd97 	b.w	80172e8 <main+0xfc8>
	       }
	       else {
	          if(Status & STOP){
 80167ba:	4b7a      	ldr	r3, [pc, #488]	; (80169a4 <main+0x684>)
 80167bc:	f9b3 3000 	ldrsh.w	r3, [r3]
 80167c0:	b29b      	uxth	r3, r3
 80167c2:	f003 0301 	and.w	r3, r3, #1
 80167c6:	2b00      	cmp	r3, #0
 80167c8:	d02e      	beq.n	8016828 <main+0x508>
	            if(Status & LOADM )Status &= ~LOADM;
 80167ca:	4b76      	ldr	r3, [pc, #472]	; (80169a4 <main+0x684>)
 80167cc:	f9b3 3000 	ldrsh.w	r3, [r3]
 80167d0:	b29b      	uxth	r3, r3
 80167d2:	f003 0310 	and.w	r3, r3, #16
 80167d6:	2b00      	cmp	r3, #0
 80167d8:	d007      	beq.n	80167ea <main+0x4ca>
 80167da:	4b72      	ldr	r3, [pc, #456]	; (80169a4 <main+0x684>)
 80167dc:	f9b3 3000 	ldrsh.w	r3, [r3]
 80167e0:	f023 0310 	bic.w	r3, r3, #16
 80167e4:	b21a      	sxth	r2, r3
 80167e6:	4b6f      	ldr	r3, [pc, #444]	; (80169a4 <main+0x684>)
 80167e8:	801a      	strh	r2, [r3, #0]
	            Status &= ~STOP;     // ��������״̬
 80167ea:	4b6e      	ldr	r3, [pc, #440]	; (80169a4 <main+0x684>)
 80167ec:	f9b3 3000 	ldrsh.w	r3, [r3]
 80167f0:	f023 0301 	bic.w	r3, r3, #1
 80167f4:	b21a      	sxth	r2, r3
 80167f6:	4b6b      	ldr	r3, [pc, #428]	; (80169a4 <main+0x684>)
 80167f8:	801a      	strh	r2, [r3, #0]
	            if(List[SYNCMODE].Val==SINGL) ADC_Start();
 80167fa:	4b68      	ldr	r3, [pc, #416]	; (801699c <main+0x67c>)
 80167fc:	f9b3 306c 	ldrsh.w	r3, [r3, #108]	; 0x6c
 8016800:	2b04      	cmp	r3, #4
 8016802:	d101      	bne.n	8016808 <main+0x4e8>
 8016804:	f7f5 ff72 	bl	800c6ec <ADC_Start>
	            if(List[SYNCMODE].Val==NORM)  ADC_Start();
 8016808:	4b64      	ldr	r3, [pc, #400]	; (801699c <main+0x67c>)
 801680a:	f9b3 306c 	ldrsh.w	r3, [r3, #108]	; 0x6c
 801680e:	2b03      	cmp	r3, #3
 8016810:	d101      	bne.n	8016816 <main+0x4f6>
 8016812:	f7f5 ff6b 	bl	800c6ec <ADC_Start>
	            Norm_Clr = 1;
 8016816:	4b64      	ldr	r3, [pc, #400]	; (80169a8 <main+0x688>)
 8016818:	2201      	movs	r2, #1
 801681a:	701a      	strb	r2, [r3, #0]
	            SNGL_Kflag = 1;
 801681c:	4b63      	ldr	r3, [pc, #396]	; (80169ac <main+0x68c>)
 801681e:	2201      	movs	r2, #1
 8016820:	701a      	strb	r2, [r3, #0]
	            Update_Proc_All();
 8016822:	f7fe f887 	bl	8014934 <Update_Proc_All>
 8016826:	e016      	b.n	8016856 <main+0x536>

	            if(*(short*)F_Sector==0xaa55)Restore_Scene();

	          }
	          else {
	            Status |=  STOP;     // ������ͣ״̬
 8016828:	4b5e      	ldr	r3, [pc, #376]	; (80169a4 <main+0x684>)
 801682a:	f9b3 3000 	ldrsh.w	r3, [r3]
 801682e:	f043 0301 	orr.w	r3, r3, #1
 8016832:	b21a      	sxth	r2, r3
 8016834:	4b5b      	ldr	r3, [pc, #364]	; (80169a4 <main+0x684>)
 8016836:	801a      	strh	r2, [r3, #0]
	            Ch1_Posi = List[V0_POSI].Val;
 8016838:	4b58      	ldr	r3, [pc, #352]	; (801699c <main+0x67c>)
 801683a:	f9b3 201c 	ldrsh.w	r2, [r3, #28]
 801683e:	4b5c      	ldr	r3, [pc, #368]	; (80169b0 <main+0x690>)
 8016840:	801a      	strh	r2, [r3, #0]
	            Ch2_Posi = List[EXT_POSI].Val;
 8016842:	4b56      	ldr	r3, [pc, #344]	; (801699c <main+0x67c>)
 8016844:	f9b3 20dc 	ldrsh.w	r2, [r3, #220]	; 0xdc
 8016848:	4b5a      	ldr	r3, [pc, #360]	; (80169b4 <main+0x694>)
 801684a:	801a      	strh	r2, [r3, #0]
	            Tri_Posi = List[THRESHOLD].Val;
 801684c:	4b53      	ldr	r3, [pc, #332]	; (801699c <main+0x67c>)
 801684e:	f9b3 2084 	ldrsh.w	r2, [r3, #132]	; 0x84
 8016852:	4b59      	ldr	r3, [pc, #356]	; (80169b8 <main+0x698>)
 8016854:	801a      	strh	r2, [r3, #0]
	            Save_Bmp(List[SAVE_BMP].Val);
	            List[SAVE_BMP].Val++;
	          #endif
	          }
	        }
	        DispStatus();            // ��ʾ����״̬
 8016856:	f7fd fd61 	bl	801431c <DispStatus>
 	       break;
 801685a:	f000 bd45 	b.w	80172e8 <main+0xfc8>

	      case KEYCODE_D_MANU:
	        if(List[FITTRIGG].Val)
 801685e:	4b4f      	ldr	r3, [pc, #316]	; (801699c <main+0x67c>)
 8016860:	f9b3 307c 	ldrsh.w	r3, [r3, #124]	; 0x7c
 8016864:	2b00      	cmp	r3, #0
 8016866:	f000 8534 	beq.w	80172d2 <main+0xfb2>
	        {
	          Auto_Fit();
 801686a:	f7ff f8bd 	bl	80159e8 <Auto_Fit>
	        }
	        break;
 801686e:	f000 bd30 	b.w	80172d2 <main+0xfb2>

	      case KEYCODE_MANU:
	        if(!(PopType & LIST_POP)){
 8016872:	4b48      	ldr	r3, [pc, #288]	; (8016994 <main+0x674>)
 8016874:	781b      	ldrb	r3, [r3, #0]
 8016876:	f003 0302 	and.w	r3, r3, #2
 801687a:	2b00      	cmp	r3, #0
 801687c:	d111      	bne.n	80168a2 <main+0x582>
	            if(Cal_Flag){
 801687e:	4b48      	ldr	r3, [pc, #288]	; (80169a0 <main+0x680>)
 8016880:	781b      	ldrb	r3, [r3, #0]
 8016882:	2b00      	cmp	r3, #0
 8016884:	d006      	beq.n	8016894 <main+0x574>
	              Cal_Flag = 0;
 8016886:	4b46      	ldr	r3, [pc, #280]	; (80169a0 <main+0x680>)
 8016888:	2200      	movs	r2, #0
 801688a:	701a      	strb	r2, [r3, #0]
	              Close_Pop();
 801688c:	f7f7 ff0e 	bl	800e6ac <Close_Pop>
	          // ------------ �ָ���ʾ��Ϣ��ʾ���Ҷ�ԭ����ʾ��Ϣ ------------
	          if(MenuNow[Current] == SMPL_DPTH) List[SMPL_DPTH].Flg  |= UPD; // ������ȸ�����ʾ
	          else if(Current == FN)           List[MenuNow[FN]].Flg |= UPD; // ָ�����ļ���д�������ʾ
	          else                             List[MenuNow[ME]].Flg |= UPD; // ָ���Ĳ��β����������ʾ
	        }
	        break;
 8016890:	f000 bd2a 	b.w	80172e8 <main+0xfc8>
	              Cal_Flag = 0;
 8016894:	4b42      	ldr	r3, [pc, #264]	; (80169a0 <main+0x680>)
 8016896:	2200      	movs	r2, #0
 8016898:	701a      	strb	r2, [r3, #0]
	              List_Pop(); // �˵����ر�ʱ, �򿪲˵���
 801689a:	f7f7 ff1d 	bl	800e6d8 <List_Pop>
	        break;
 801689e:	f000 bd23 	b.w	80172e8 <main+0xfc8>
	          Close_Pop();                // �˵����Ѵ�ʱ, �رղ˵���
 80168a2:	f7f7 ff03 	bl	800e6ac <Close_Pop>
	          if(Current == XN)      List[T1_POSI   ].Flg |= UPD;
 80168a6:	4b3a      	ldr	r3, [pc, #232]	; (8016990 <main+0x670>)
 80168a8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80168ac:	2b01      	cmp	r3, #1
 80168ae:	d109      	bne.n	80168c4 <main+0x5a4>
 80168b0:	4b3a      	ldr	r3, [pc, #232]	; (801699c <main+0x67c>)
 80168b2:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 80168b6:	f043 0320 	orr.w	r3, r3, #32
 80168ba:	b2da      	uxtb	r2, r3
 80168bc:	4b37      	ldr	r3, [pc, #220]	; (801699c <main+0x67c>)
 80168be:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
 80168c2:	e021      	b.n	8016908 <main+0x5e8>
	          else if(Current == YN) List[V1_POSI   ].Flg |= UPD;
 80168c4:	4b32      	ldr	r3, [pc, #200]	; (8016990 <main+0x670>)
 80168c6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80168ca:	2b00      	cmp	r3, #0
 80168cc:	d109      	bne.n	80168e2 <main+0x5c2>
 80168ce:	4b33      	ldr	r3, [pc, #204]	; (801699c <main+0x67c>)
 80168d0:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 80168d4:	f043 0320 	orr.w	r3, r3, #32
 80168d8:	b2da      	uxtb	r2, r3
 80168da:	4b30      	ldr	r3, [pc, #192]	; (801699c <main+0x67c>)
 80168dc:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
 80168e0:	e012      	b.n	8016908 <main+0x5e8>
	          else                   List[MenuNow[SN]].Flg |= UPD;
 80168e2:	4b2d      	ldr	r3, [pc, #180]	; (8016998 <main+0x678>)
 80168e4:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 80168e8:	4a2c      	ldr	r2, [pc, #176]	; (801699c <main+0x67c>)
 80168ea:	00db      	lsls	r3, r3, #3
 80168ec:	4413      	add	r3, r2
 80168ee:	799b      	ldrb	r3, [r3, #6]
 80168f0:	4a29      	ldr	r2, [pc, #164]	; (8016998 <main+0x678>)
 80168f2:	f9b2 200c 	ldrsh.w	r2, [r2, #12]
 80168f6:	4610      	mov	r0, r2
 80168f8:	f043 0320 	orr.w	r3, r3, #32
 80168fc:	b2d9      	uxtb	r1, r3
 80168fe:	4a27      	ldr	r2, [pc, #156]	; (801699c <main+0x67c>)
 8016900:	00c3      	lsls	r3, r0, #3
 8016902:	4413      	add	r3, r2
 8016904:	460a      	mov	r2, r1
 8016906:	719a      	strb	r2, [r3, #6]
	          if(MenuNow[Current] == SMPL_DPTH) List[SMPL_DPTH].Flg  |= UPD; // ������ȸ�����ʾ
 8016908:	4b21      	ldr	r3, [pc, #132]	; (8016990 <main+0x670>)
 801690a:	f9b3 3000 	ldrsh.w	r3, [r3]
 801690e:	461a      	mov	r2, r3
 8016910:	4b21      	ldr	r3, [pc, #132]	; (8016998 <main+0x678>)
 8016912:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8016916:	2b09      	cmp	r3, #9
 8016918:	d10a      	bne.n	8016930 <main+0x610>
 801691a:	4b20      	ldr	r3, [pc, #128]	; (801699c <main+0x67c>)
 801691c:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 8016920:	f043 0320 	orr.w	r3, r3, #32
 8016924:	b2da      	uxtb	r2, r3
 8016926:	4b1d      	ldr	r3, [pc, #116]	; (801699c <main+0x67c>)
 8016928:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
	        break;
 801692c:	f000 bcdc 	b.w	80172e8 <main+0xfc8>
	          else if(Current == FN)           List[MenuNow[FN]].Flg |= UPD; // ָ�����ļ���д�������ʾ
 8016930:	4b17      	ldr	r3, [pc, #92]	; (8016990 <main+0x670>)
 8016932:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016936:	2b05      	cmp	r3, #5
 8016938:	d114      	bne.n	8016964 <main+0x644>
 801693a:	4b17      	ldr	r3, [pc, #92]	; (8016998 <main+0x678>)
 801693c:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8016940:	4a16      	ldr	r2, [pc, #88]	; (801699c <main+0x67c>)
 8016942:	00db      	lsls	r3, r3, #3
 8016944:	4413      	add	r3, r2
 8016946:	799b      	ldrb	r3, [r3, #6]
 8016948:	4a13      	ldr	r2, [pc, #76]	; (8016998 <main+0x678>)
 801694a:	f9b2 200a 	ldrsh.w	r2, [r2, #10]
 801694e:	4610      	mov	r0, r2
 8016950:	f043 0320 	orr.w	r3, r3, #32
 8016954:	b2d9      	uxtb	r1, r3
 8016956:	4a11      	ldr	r2, [pc, #68]	; (801699c <main+0x67c>)
 8016958:	00c3      	lsls	r3, r0, #3
 801695a:	4413      	add	r3, r2
 801695c:	460a      	mov	r2, r1
 801695e:	719a      	strb	r2, [r3, #6]
	        break;
 8016960:	f000 bcc2 	b.w	80172e8 <main+0xfc8>
	          else                             List[MenuNow[ME]].Flg |= UPD; // ָ���Ĳ��β����������ʾ
 8016964:	4b0c      	ldr	r3, [pc, #48]	; (8016998 <main+0x678>)
 8016966:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 801696a:	4a0c      	ldr	r2, [pc, #48]	; (801699c <main+0x67c>)
 801696c:	00db      	lsls	r3, r3, #3
 801696e:	4413      	add	r3, r2
 8016970:	799b      	ldrb	r3, [r3, #6]
 8016972:	4a09      	ldr	r2, [pc, #36]	; (8016998 <main+0x678>)
 8016974:	f9b2 2006 	ldrsh.w	r2, [r2, #6]
 8016978:	4610      	mov	r0, r2
 801697a:	f043 0320 	orr.w	r3, r3, #32
 801697e:	b2d9      	uxtb	r1, r3
 8016980:	4a06      	ldr	r2, [pc, #24]	; (801699c <main+0x67c>)
 8016982:	00c3      	lsls	r3, r0, #3
 8016984:	4413      	add	r3, r2
 8016986:	460a      	mov	r2, r1
 8016988:	719a      	strb	r2, [r3, #6]
	        break;
 801698a:	f000 bcad 	b.w	80172e8 <main+0xfc8>
 801698e:	bf00      	nop
 8016990:	2000079e 	.word	0x2000079e
 8016994:	2000078c 	.word	0x2000078c
 8016998:	20000538 	.word	0x20000538
 801699c:	20000298 	.word	0x20000298
 80169a0:	200001b4 	.word	0x200001b4
 80169a4:	200007a0 	.word	0x200007a0
 80169a8:	200007a7 	.word	0x200007a7
 80169ac:	2000055c 	.word	0x2000055c
 80169b0:	20006880 	.word	0x20006880
 80169b4:	20006878 	.word	0x20006878
 80169b8:	2000285c 	.word	0x2000285c

	      case KEYCODE_UP:
	        if (PopType & LIST_POP){
 80169bc:	4bac      	ldr	r3, [pc, #688]	; (8016c70 <main+0x950>)
 80169be:	781b      	ldrb	r3, [r3, #0]
 80169c0:	f003 0302 	and.w	r3, r3, #2
 80169c4:	2b00      	cmp	r3, #0
 80169c6:	d03b      	beq.n	8016a40 <main+0x720>
	          if(MenuNow[Current] > MU_BEGN[Current]) MenuNow[Current]--;
 80169c8:	4baa      	ldr	r3, [pc, #680]	; (8016c74 <main+0x954>)
 80169ca:	f9b3 3000 	ldrsh.w	r3, [r3]
 80169ce:	461a      	mov	r2, r3
 80169d0:	4ba9      	ldr	r3, [pc, #676]	; (8016c78 <main+0x958>)
 80169d2:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 80169d6:	461a      	mov	r2, r3
 80169d8:	4ba6      	ldr	r3, [pc, #664]	; (8016c74 <main+0x954>)
 80169da:	f9b3 3000 	ldrsh.w	r3, [r3]
 80169de:	4619      	mov	r1, r3
 80169e0:	4ba6      	ldr	r3, [pc, #664]	; (8016c7c <main+0x95c>)
 80169e2:	5c5b      	ldrb	r3, [r3, r1]
 80169e4:	429a      	cmp	r2, r3
 80169e6:	dd0e      	ble.n	8016a06 <main+0x6e6>
 80169e8:	4ba2      	ldr	r3, [pc, #648]	; (8016c74 <main+0x954>)
 80169ea:	f9b3 3000 	ldrsh.w	r3, [r3]
 80169ee:	4aa2      	ldr	r2, [pc, #648]	; (8016c78 <main+0x958>)
 80169f0:	f932 2013 	ldrsh.w	r2, [r2, r3, lsl #1]
 80169f4:	b292      	uxth	r2, r2
 80169f6:	3a01      	subs	r2, #1
 80169f8:	b292      	uxth	r2, r2
 80169fa:	b211      	sxth	r1, r2
 80169fc:	4a9e      	ldr	r2, [pc, #632]	; (8016c78 <main+0x958>)
 80169fe:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	          else                  MenuNow[Current] += M_ITEMS[Current]-1;
	        } else {
	          if (Current > 0) Current--;
	          else             Current = ST;
	        }
	        break;
 8016a02:	f000 bc71 	b.w	80172e8 <main+0xfc8>
	          else                  MenuNow[Current] += M_ITEMS[Current]-1;
 8016a06:	4b9b      	ldr	r3, [pc, #620]	; (8016c74 <main+0x954>)
 8016a08:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016a0c:	461a      	mov	r2, r3
 8016a0e:	4b9a      	ldr	r3, [pc, #616]	; (8016c78 <main+0x958>)
 8016a10:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8016a14:	b29a      	uxth	r2, r3
 8016a16:	4b97      	ldr	r3, [pc, #604]	; (8016c74 <main+0x954>)
 8016a18:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016a1c:	4619      	mov	r1, r3
 8016a1e:	4b98      	ldr	r3, [pc, #608]	; (8016c80 <main+0x960>)
 8016a20:	5c5b      	ldrb	r3, [r3, r1]
 8016a22:	b29b      	uxth	r3, r3
 8016a24:	4413      	add	r3, r2
 8016a26:	b29b      	uxth	r3, r3
 8016a28:	3b01      	subs	r3, #1
 8016a2a:	b299      	uxth	r1, r3
 8016a2c:	4b91      	ldr	r3, [pc, #580]	; (8016c74 <main+0x954>)
 8016a2e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016a32:	461a      	mov	r2, r3
 8016a34:	b209      	sxth	r1, r1
 8016a36:	4b90      	ldr	r3, [pc, #576]	; (8016c78 <main+0x958>)
 8016a38:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
	        break;
 8016a3c:	f000 bc54 	b.w	80172e8 <main+0xfc8>
	          if (Current > 0) Current--;
 8016a40:	4b8c      	ldr	r3, [pc, #560]	; (8016c74 <main+0x954>)
 8016a42:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016a46:	2b00      	cmp	r3, #0
 8016a48:	dd0a      	ble.n	8016a60 <main+0x740>
 8016a4a:	4b8a      	ldr	r3, [pc, #552]	; (8016c74 <main+0x954>)
 8016a4c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016a50:	b29b      	uxth	r3, r3
 8016a52:	3b01      	subs	r3, #1
 8016a54:	b29b      	uxth	r3, r3
 8016a56:	b21a      	sxth	r2, r3
 8016a58:	4b86      	ldr	r3, [pc, #536]	; (8016c74 <main+0x954>)
 8016a5a:	801a      	strh	r2, [r3, #0]
	        break;
 8016a5c:	f000 bc44 	b.w	80172e8 <main+0xfc8>
	          else             Current = ST;
 8016a60:	4b84      	ldr	r3, [pc, #528]	; (8016c74 <main+0x954>)
 8016a62:	2207      	movs	r2, #7
 8016a64:	801a      	strh	r2, [r3, #0]
	        break;
 8016a66:	f000 bc3f 	b.w	80172e8 <main+0xfc8>

	     case KEYCODE_DOWN:
	        if(PopType & LIST_POP){
 8016a6a:	4b81      	ldr	r3, [pc, #516]	; (8016c70 <main+0x950>)
 8016a6c:	781b      	ldrb	r3, [r3, #0]
 8016a6e:	f003 0302 	and.w	r3, r3, #2
 8016a72:	2b00      	cmp	r3, #0
 8016a74:	d034      	beq.n	8016ae0 <main+0x7c0>
	          MenuNow[Current]++;
 8016a76:	4b7f      	ldr	r3, [pc, #508]	; (8016c74 <main+0x954>)
 8016a78:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016a7c:	4a7e      	ldr	r2, [pc, #504]	; (8016c78 <main+0x958>)
 8016a7e:	f932 2013 	ldrsh.w	r2, [r2, r3, lsl #1]
 8016a82:	b292      	uxth	r2, r2
 8016a84:	3201      	adds	r2, #1
 8016a86:	b292      	uxth	r2, r2
 8016a88:	b211      	sxth	r1, r2
 8016a8a:	4a7b      	ldr	r2, [pc, #492]	; (8016c78 <main+0x958>)
 8016a8c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	          if(MenuNow[Current] >=(MU_BEGN[Current]+M_ITEMS[Current])){
 8016a90:	4b78      	ldr	r3, [pc, #480]	; (8016c74 <main+0x954>)
 8016a92:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016a96:	461a      	mov	r2, r3
 8016a98:	4b77      	ldr	r3, [pc, #476]	; (8016c78 <main+0x958>)
 8016a9a:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8016a9e:	461a      	mov	r2, r3
 8016aa0:	4b74      	ldr	r3, [pc, #464]	; (8016c74 <main+0x954>)
 8016aa2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016aa6:	4619      	mov	r1, r3
 8016aa8:	4b74      	ldr	r3, [pc, #464]	; (8016c7c <main+0x95c>)
 8016aaa:	5c5b      	ldrb	r3, [r3, r1]
 8016aac:	4619      	mov	r1, r3
 8016aae:	4b71      	ldr	r3, [pc, #452]	; (8016c74 <main+0x954>)
 8016ab0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016ab4:	4618      	mov	r0, r3
 8016ab6:	4b72      	ldr	r3, [pc, #456]	; (8016c80 <main+0x960>)
 8016ab8:	5c1b      	ldrb	r3, [r3, r0]
 8016aba:	440b      	add	r3, r1
 8016abc:	429a      	cmp	r2, r3
 8016abe:	f2c0 840a 	blt.w	80172d6 <main+0xfb6>
	            MenuNow[Current] = MU_BEGN[Current];
 8016ac2:	4b6c      	ldr	r3, [pc, #432]	; (8016c74 <main+0x954>)
 8016ac4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016ac8:	461a      	mov	r2, r3
 8016aca:	4b6c      	ldr	r3, [pc, #432]	; (8016c7c <main+0x95c>)
 8016acc:	5c99      	ldrb	r1, [r3, r2]
 8016ace:	4b69      	ldr	r3, [pc, #420]	; (8016c74 <main+0x954>)
 8016ad0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016ad4:	461a      	mov	r2, r3
 8016ad6:	b209      	sxth	r1, r1
 8016ad8:	4b67      	ldr	r3, [pc, #412]	; (8016c78 <main+0x958>)
 8016ada:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
	          }
	        } else {
	          if (Current < 7) Current++;
	          else             Current = YN;
	        }
	        break;
 8016ade:	e3fa      	b.n	80172d6 <main+0xfb6>
	          if (Current < 7) Current++;
 8016ae0:	4b64      	ldr	r3, [pc, #400]	; (8016c74 <main+0x954>)
 8016ae2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016ae6:	2b06      	cmp	r3, #6
 8016ae8:	dc09      	bgt.n	8016afe <main+0x7de>
 8016aea:	4b62      	ldr	r3, [pc, #392]	; (8016c74 <main+0x954>)
 8016aec:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016af0:	b29b      	uxth	r3, r3
 8016af2:	3301      	adds	r3, #1
 8016af4:	b29b      	uxth	r3, r3
 8016af6:	b21a      	sxth	r2, r3
 8016af8:	4b5e      	ldr	r3, [pc, #376]	; (8016c74 <main+0x954>)
 8016afa:	801a      	strh	r2, [r3, #0]
	        break;
 8016afc:	e3eb      	b.n	80172d6 <main+0xfb6>
	          else             Current = YN;
 8016afe:	4b5d      	ldr	r3, [pc, #372]	; (8016c74 <main+0x954>)
 8016b00:	2200      	movs	r2, #0
 8016b02:	801a      	strh	r2, [r3, #0]
	        break;
 8016b04:	e3e7      	b.n	80172d6 <main+0xfb6>

	      case KEYCODE_LEFT:
	        if((Current==ST)&& !(PopType & LIST_POP))break;
 8016b06:	4b5b      	ldr	r3, [pc, #364]	; (8016c74 <main+0x954>)
 8016b08:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016b0c:	2b07      	cmp	r3, #7
 8016b0e:	d106      	bne.n	8016b1e <main+0x7fe>
 8016b10:	4b57      	ldr	r3, [pc, #348]	; (8016c70 <main+0x950>)
 8016b12:	781b      	ldrb	r3, [r3, #0]
 8016b14:	f003 0302 	and.w	r3, r3, #2
 8016b18:	2b00      	cmp	r3, #0
 8016b1a:	f000 83de 	beq.w	80172da <main+0xfba>
	        List[MenuNow[Current]].Flg |= UPD;  // ˢ�±��ǰԭ��ʾ��Ŀ����
 8016b1e:	4b55      	ldr	r3, [pc, #340]	; (8016c74 <main+0x954>)
 8016b20:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016b24:	461a      	mov	r2, r3
 8016b26:	4b54      	ldr	r3, [pc, #336]	; (8016c78 <main+0x958>)
 8016b28:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8016b2c:	4a55      	ldr	r2, [pc, #340]	; (8016c84 <main+0x964>)
 8016b2e:	00db      	lsls	r3, r3, #3
 8016b30:	4413      	add	r3, r2
 8016b32:	799b      	ldrb	r3, [r3, #6]
 8016b34:	4a4f      	ldr	r2, [pc, #316]	; (8016c74 <main+0x954>)
 8016b36:	f9b2 2000 	ldrsh.w	r2, [r2]
 8016b3a:	4611      	mov	r1, r2
 8016b3c:	4a4e      	ldr	r2, [pc, #312]	; (8016c78 <main+0x958>)
 8016b3e:	f932 2011 	ldrsh.w	r2, [r2, r1, lsl #1]
 8016b42:	4610      	mov	r0, r2
 8016b44:	f043 0320 	orr.w	r3, r3, #32
 8016b48:	b2d9      	uxtb	r1, r3
 8016b4a:	4a4e      	ldr	r2, [pc, #312]	; (8016c84 <main+0x964>)
 8016b4c:	00c3      	lsls	r3, r0, #3
 8016b4e:	4413      	add	r3, r2
 8016b50:	460a      	mov	r2, r1
 8016b52:	719a      	strb	r2, [r3, #6]
	        if(List[MenuNow[Current]].Val <=MIN[MenuNow[Current]]){
 8016b54:	4b47      	ldr	r3, [pc, #284]	; (8016c74 <main+0x954>)
 8016b56:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016b5a:	461a      	mov	r2, r3
 8016b5c:	4b46      	ldr	r3, [pc, #280]	; (8016c78 <main+0x958>)
 8016b5e:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8016b62:	4a48      	ldr	r2, [pc, #288]	; (8016c84 <main+0x964>)
 8016b64:	00db      	lsls	r3, r3, #3
 8016b66:	4413      	add	r3, r2
 8016b68:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
 8016b6c:	4b41      	ldr	r3, [pc, #260]	; (8016c74 <main+0x954>)
 8016b6e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016b72:	4619      	mov	r1, r3
 8016b74:	4b40      	ldr	r3, [pc, #256]	; (8016c78 <main+0x958>)
 8016b76:	f933 3011 	ldrsh.w	r3, [r3, r1, lsl #1]
 8016b7a:	4619      	mov	r1, r3
 8016b7c:	4b42      	ldr	r3, [pc, #264]	; (8016c88 <main+0x968>)
 8016b7e:	f933 3011 	ldrsh.w	r3, [r3, r1, lsl #1]
 8016b82:	429a      	cmp	r2, r3
 8016b84:	f300 8084 	bgt.w	8016c90 <main+0x970>
	          if((MenuNow[Current] == COUPLING)||(MenuNow[Current] == YN_TYPE )||
 8016b88:	4b3a      	ldr	r3, [pc, #232]	; (8016c74 <main+0x954>)
 8016b8a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016b8e:	461a      	mov	r2, r3
 8016b90:	4b39      	ldr	r3, [pc, #228]	; (8016c78 <main+0x958>)
 8016b92:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8016b96:	2b01      	cmp	r3, #1
 8016b98:	d051      	beq.n	8016c3e <main+0x91e>
 8016b9a:	4b36      	ldr	r3, [pc, #216]	; (8016c74 <main+0x954>)
 8016b9c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016ba0:	461a      	mov	r2, r3
 8016ba2:	4b35      	ldr	r3, [pc, #212]	; (8016c78 <main+0x958>)
 8016ba4:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8016ba8:	2b06      	cmp	r3, #6
 8016baa:	d048      	beq.n	8016c3e <main+0x91e>
	            (MenuNow[Current] == XN_TYPE )||(MenuNow[Current] == EXT_HIDE)||
 8016bac:	4b31      	ldr	r3, [pc, #196]	; (8016c74 <main+0x954>)
 8016bae:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016bb2:	461a      	mov	r2, r3
 8016bb4:	4b30      	ldr	r3, [pc, #192]	; (8016c78 <main+0x958>)
 8016bb6:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
	          if((MenuNow[Current] == COUPLING)||(MenuNow[Current] == YN_TYPE )||
 8016bba:	2b0c      	cmp	r3, #12
 8016bbc:	d03f      	beq.n	8016c3e <main+0x91e>
	            (MenuNow[Current] == XN_TYPE )||(MenuNow[Current] == EXT_HIDE)||
 8016bbe:	4b2d      	ldr	r3, [pc, #180]	; (8016c74 <main+0x954>)
 8016bc0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016bc4:	461a      	mov	r2, r3
 8016bc6:	4b2c      	ldr	r3, [pc, #176]	; (8016c78 <main+0x958>)
 8016bc8:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8016bcc:	2b1c      	cmp	r3, #28
 8016bce:	d036      	beq.n	8016c3e <main+0x91e>
	            ( MenuNow[Current] == FITTRIGG)||(MenuNow[Current] == TR_MODE )||
 8016bd0:	4b28      	ldr	r3, [pc, #160]	; (8016c74 <main+0x954>)
 8016bd2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016bd6:	461a      	mov	r2, r3
 8016bd8:	4b27      	ldr	r3, [pc, #156]	; (8016c78 <main+0x958>)
 8016bda:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
	            (MenuNow[Current] == XN_TYPE )||(MenuNow[Current] == EXT_HIDE)||
 8016bde:	2b0f      	cmp	r3, #15
 8016be0:	d02d      	beq.n	8016c3e <main+0x91e>
	            ( MenuNow[Current] == FITTRIGG)||(MenuNow[Current] == TR_MODE )||
 8016be2:	4b24      	ldr	r3, [pc, #144]	; (8016c74 <main+0x954>)
 8016be4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016be8:	461a      	mov	r2, r3
 8016bea:	4b23      	ldr	r3, [pc, #140]	; (8016c78 <main+0x958>)
 8016bec:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8016bf0:	2b0e      	cmp	r3, #14
 8016bf2:	d024      	beq.n	8016c3e <main+0x91e>
	            ( MenuNow[Current] == SYNCMODE)||(MenuNow[Current] == EXT_REFN)||
 8016bf4:	4b1f      	ldr	r3, [pc, #124]	; (8016c74 <main+0x954>)
 8016bf6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016bfa:	461a      	mov	r2, r3
 8016bfc:	4b1e      	ldr	r3, [pc, #120]	; (8016c78 <main+0x958>)
 8016bfe:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
	            ( MenuNow[Current] == FITTRIGG)||(MenuNow[Current] == TR_MODE )||
 8016c02:	2b0d      	cmp	r3, #13
 8016c04:	d01b      	beq.n	8016c3e <main+0x91e>
	            ( MenuNow[Current] == SYNCMODE)||(MenuNow[Current] == EXT_REFN)||
 8016c06:	4b1b      	ldr	r3, [pc, #108]	; (8016c74 <main+0x954>)
 8016c08:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016c0c:	461a      	mov	r2, r3
 8016c0e:	4b1a      	ldr	r3, [pc, #104]	; (8016c78 <main+0x958>)
 8016c10:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8016c14:	2b1a      	cmp	r3, #26
 8016c16:	d012      	beq.n	8016c3e <main+0x91e>
	            (MenuNow[Current] == PROBEATT)||(MenuNow[Current] == TPYE_OUT))
 8016c18:	4b16      	ldr	r3, [pc, #88]	; (8016c74 <main+0x954>)
 8016c1a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016c1e:	461a      	mov	r2, r3
 8016c20:	4b15      	ldr	r3, [pc, #84]	; (8016c78 <main+0x958>)
 8016c22:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
	            ( MenuNow[Current] == SYNCMODE)||(MenuNow[Current] == EXT_REFN)||
 8016c26:	2b02      	cmp	r3, #2
 8016c28:	d009      	beq.n	8016c3e <main+0x91e>
	            (MenuNow[Current] == PROBEATT)||(MenuNow[Current] == TPYE_OUT))
 8016c2a:	4b12      	ldr	r3, [pc, #72]	; (8016c74 <main+0x954>)
 8016c2c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016c30:	461a      	mov	r2, r3
 8016c32:	4b11      	ldr	r3, [pc, #68]	; (8016c78 <main+0x958>)
 8016c34:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8016c38:	2b24      	cmp	r3, #36	; 0x24
 8016c3a:	f040 812c 	bne.w	8016e96 <main+0xb76>
	            List[MenuNow[Current]].Val =MAX[MenuNow[Current]] ;
 8016c3e:	4b0d      	ldr	r3, [pc, #52]	; (8016c74 <main+0x954>)
 8016c40:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016c44:	461a      	mov	r2, r3
 8016c46:	4b0c      	ldr	r3, [pc, #48]	; (8016c78 <main+0x958>)
 8016c48:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8016c4c:	461a      	mov	r2, r3
 8016c4e:	4b09      	ldr	r3, [pc, #36]	; (8016c74 <main+0x954>)
 8016c50:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016c54:	4619      	mov	r1, r3
 8016c56:	4b08      	ldr	r3, [pc, #32]	; (8016c78 <main+0x958>)
 8016c58:	f933 3011 	ldrsh.w	r3, [r3, r1, lsl #1]
 8016c5c:	4618      	mov	r0, r3
 8016c5e:	4b0b      	ldr	r3, [pc, #44]	; (8016c8c <main+0x96c>)
 8016c60:	f933 1012 	ldrsh.w	r1, [r3, r2, lsl #1]
 8016c64:	4a07      	ldr	r2, [pc, #28]	; (8016c84 <main+0x964>)
 8016c66:	00c3      	lsls	r3, r0, #3
 8016c68:	4413      	add	r3, r2
 8016c6a:	460a      	mov	r2, r1
 8016c6c:	809a      	strh	r2, [r3, #4]
 8016c6e:	e112      	b.n	8016e96 <main+0xb76>
 8016c70:	2000078c 	.word	0x2000078c
 8016c74:	2000079e 	.word	0x2000079e
 8016c78:	20000538 	.word	0x20000538
 8016c7c:	08001f40 	.word	0x08001f40
 8016c80:	08001f48 	.word	0x08001f48
 8016c84:	20000298 	.word	0x20000298
 8016c88:	08002214 	.word	0x08002214
 8016c8c:	080021b8 	.word	0x080021b8
	        } else {
	          if((MenuNow[Current] == VIEWPOSI)&&((List[MenuNow[Current]].Val) >=150 ))
 8016c90:	4b88      	ldr	r3, [pc, #544]	; (8016eb4 <main+0xb94>)
 8016c92:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016c96:	461a      	mov	r2, r3
 8016c98:	4b87      	ldr	r3, [pc, #540]	; (8016eb8 <main+0xb98>)
 8016c9a:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8016c9e:	2b08      	cmp	r3, #8
 8016ca0:	d12a      	bne.n	8016cf8 <main+0x9d8>
 8016ca2:	4b84      	ldr	r3, [pc, #528]	; (8016eb4 <main+0xb94>)
 8016ca4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016ca8:	461a      	mov	r2, r3
 8016caa:	4b83      	ldr	r3, [pc, #524]	; (8016eb8 <main+0xb98>)
 8016cac:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8016cb0:	4a82      	ldr	r2, [pc, #520]	; (8016ebc <main+0xb9c>)
 8016cb2:	00db      	lsls	r3, r3, #3
 8016cb4:	4413      	add	r3, r2
 8016cb6:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8016cba:	2b95      	cmp	r3, #149	; 0x95
 8016cbc:	dd1c      	ble.n	8016cf8 <main+0x9d8>
	            List[MenuNow[Current]].Val-=25;
 8016cbe:	4b7d      	ldr	r3, [pc, #500]	; (8016eb4 <main+0xb94>)
 8016cc0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016cc4:	461a      	mov	r2, r3
 8016cc6:	4b7c      	ldr	r3, [pc, #496]	; (8016eb8 <main+0xb98>)
 8016cc8:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8016ccc:	4a7b      	ldr	r2, [pc, #492]	; (8016ebc <main+0xb9c>)
 8016cce:	00db      	lsls	r3, r3, #3
 8016cd0:	4413      	add	r3, r2
 8016cd2:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8016cd6:	b29b      	uxth	r3, r3
 8016cd8:	3b19      	subs	r3, #25
 8016cda:	b29a      	uxth	r2, r3
 8016cdc:	4b75      	ldr	r3, [pc, #468]	; (8016eb4 <main+0xb94>)
 8016cde:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016ce2:	4619      	mov	r1, r3
 8016ce4:	4b74      	ldr	r3, [pc, #464]	; (8016eb8 <main+0xb98>)
 8016ce6:	f933 3011 	ldrsh.w	r3, [r3, r1, lsl #1]
 8016cea:	b211      	sxth	r1, r2
 8016cec:	4a73      	ldr	r2, [pc, #460]	; (8016ebc <main+0xb9c>)
 8016cee:	00db      	lsls	r3, r3, #3
 8016cf0:	4413      	add	r3, r2
 8016cf2:	460a      	mov	r2, r1
 8016cf4:	809a      	strh	r2, [r3, #4]
 8016cf6:	e0a0      	b.n	8016e3a <main+0xb1a>
	          else{
	          //============5.04�޸������߳�����������========
	            if(MenuNow[Current] == THRESHOLD){
 8016cf8:	4b6e      	ldr	r3, [pc, #440]	; (8016eb4 <main+0xb94>)
 8016cfa:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016cfe:	461a      	mov	r2, r3
 8016d00:	4b6d      	ldr	r3, [pc, #436]	; (8016eb8 <main+0xb98>)
 8016d02:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8016d06:	2b10      	cmp	r3, #16
 8016d08:	d121      	bne.n	8016d4e <main+0xa2e>
	              if((List[V0_POSI].Val + List[THRESHOLD].Val) > 2)  //����������
 8016d0a:	4b6c      	ldr	r3, [pc, #432]	; (8016ebc <main+0xb9c>)
 8016d0c:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 8016d10:	461a      	mov	r2, r3
 8016d12:	4b6a      	ldr	r3, [pc, #424]	; (8016ebc <main+0xb9c>)
 8016d14:	f9b3 3084 	ldrsh.w	r3, [r3, #132]	; 0x84
 8016d18:	4413      	add	r3, r2
 8016d1a:	2b02      	cmp	r3, #2
 8016d1c:	f340 808d 	ble.w	8016e3a <main+0xb1a>
	                List[MenuNow[Current]].Val--;
 8016d20:	4b64      	ldr	r3, [pc, #400]	; (8016eb4 <main+0xb94>)
 8016d22:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016d26:	461a      	mov	r2, r3
 8016d28:	4b63      	ldr	r3, [pc, #396]	; (8016eb8 <main+0xb98>)
 8016d2a:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8016d2e:	461a      	mov	r2, r3
 8016d30:	4962      	ldr	r1, [pc, #392]	; (8016ebc <main+0xb9c>)
 8016d32:	00d3      	lsls	r3, r2, #3
 8016d34:	440b      	add	r3, r1
 8016d36:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8016d3a:	b29b      	uxth	r3, r3
 8016d3c:	3b01      	subs	r3, #1
 8016d3e:	b29b      	uxth	r3, r3
 8016d40:	b218      	sxth	r0, r3
 8016d42:	495e      	ldr	r1, [pc, #376]	; (8016ebc <main+0xb9c>)
 8016d44:	00d3      	lsls	r3, r2, #3
 8016d46:	440b      	add	r3, r1
 8016d48:	4602      	mov	r2, r0
 8016d4a:	809a      	strh	r2, [r3, #4]
 8016d4c:	e075      	b.n	8016e3a <main+0xb1a>
	            }
	            else if(MenuNow[Current] == V0_POSI){
 8016d4e:	4b59      	ldr	r3, [pc, #356]	; (8016eb4 <main+0xb94>)
 8016d50:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016d54:	461a      	mov	r2, r3
 8016d56:	4b58      	ldr	r3, [pc, #352]	; (8016eb8 <main+0xb98>)
 8016d58:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8016d5c:	2b03      	cmp	r3, #3
 8016d5e:	d134      	bne.n	8016dca <main+0xaaa>
	              if((List[V0_POSI].Val + List[THRESHOLD].Val) <2){
 8016d60:	4b56      	ldr	r3, [pc, #344]	; (8016ebc <main+0xb9c>)
 8016d62:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 8016d66:	461a      	mov	r2, r3
 8016d68:	4b54      	ldr	r3, [pc, #336]	; (8016ebc <main+0xb9c>)
 8016d6a:	f9b3 3084 	ldrsh.w	r3, [r3, #132]	; 0x84
 8016d6e:	4413      	add	r3, r2
 8016d70:	2b01      	cmp	r3, #1
 8016d72:	dc13      	bgt.n	8016d9c <main+0xa7c>
	                List[V0_POSI].Val--;
 8016d74:	4b51      	ldr	r3, [pc, #324]	; (8016ebc <main+0xb9c>)
 8016d76:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 8016d7a:	b29b      	uxth	r3, r3
 8016d7c:	3b01      	subs	r3, #1
 8016d7e:	b29b      	uxth	r3, r3
 8016d80:	b21a      	sxth	r2, r3
 8016d82:	4b4e      	ldr	r3, [pc, #312]	; (8016ebc <main+0xb9c>)
 8016d84:	839a      	strh	r2, [r3, #28]
	                List[THRESHOLD].Val++;
 8016d86:	4b4d      	ldr	r3, [pc, #308]	; (8016ebc <main+0xb9c>)
 8016d88:	f9b3 3084 	ldrsh.w	r3, [r3, #132]	; 0x84
 8016d8c:	b29b      	uxth	r3, r3
 8016d8e:	3301      	adds	r3, #1
 8016d90:	b29b      	uxth	r3, r3
 8016d92:	b21a      	sxth	r2, r3
 8016d94:	4b49      	ldr	r3, [pc, #292]	; (8016ebc <main+0xb9c>)
 8016d96:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84
 8016d9a:	e04e      	b.n	8016e3a <main+0xb1a>
	              }else List[MenuNow[Current]].Val--;
 8016d9c:	4b45      	ldr	r3, [pc, #276]	; (8016eb4 <main+0xb94>)
 8016d9e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016da2:	461a      	mov	r2, r3
 8016da4:	4b44      	ldr	r3, [pc, #272]	; (8016eb8 <main+0xb98>)
 8016da6:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8016daa:	461a      	mov	r2, r3
 8016dac:	4943      	ldr	r1, [pc, #268]	; (8016ebc <main+0xb9c>)
 8016dae:	00d3      	lsls	r3, r2, #3
 8016db0:	440b      	add	r3, r1
 8016db2:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8016db6:	b29b      	uxth	r3, r3
 8016db8:	3b01      	subs	r3, #1
 8016dba:	b29b      	uxth	r3, r3
 8016dbc:	b218      	sxth	r0, r3
 8016dbe:	493f      	ldr	r1, [pc, #252]	; (8016ebc <main+0xb9c>)
 8016dc0:	00d3      	lsls	r3, r2, #3
 8016dc2:	440b      	add	r3, r1
 8016dc4:	4602      	mov	r2, r0
 8016dc6:	809a      	strh	r2, [r3, #4]
 8016dc8:	e037      	b.n	8016e3a <main+0xb1a>
	            }
	            else if((MenuNow[Current] ==V1_POSI) && (List[V1_POSI].Val <= List[V2_POSI].Val))
 8016dca:	4b3a      	ldr	r3, [pc, #232]	; (8016eb4 <main+0xb94>)
 8016dcc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016dd0:	461a      	mov	r2, r3
 8016dd2:	4b39      	ldr	r3, [pc, #228]	; (8016eb8 <main+0xb98>)
 8016dd4:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8016dd8:	2b04      	cmp	r3, #4
 8016dda:	d118      	bne.n	8016e0e <main+0xaee>
 8016ddc:	4b37      	ldr	r3, [pc, #220]	; (8016ebc <main+0xb9c>)
 8016dde:	f9b3 2024 	ldrsh.w	r2, [r3, #36]	; 0x24
 8016de2:	4b36      	ldr	r3, [pc, #216]	; (8016ebc <main+0xb9c>)
 8016de4:	f9b3 302c 	ldrsh.w	r3, [r3, #44]	; 0x2c
 8016de8:	429a      	cmp	r2, r3
 8016dea:	dc10      	bgt.n	8016e0e <main+0xaee>
	            List[MenuNow[Current]].Val=List[V2_POSI].Val;
 8016dec:	4b31      	ldr	r3, [pc, #196]	; (8016eb4 <main+0xb94>)
 8016dee:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016df2:	461a      	mov	r2, r3
 8016df4:	4b30      	ldr	r3, [pc, #192]	; (8016eb8 <main+0xb98>)
 8016df6:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8016dfa:	4618      	mov	r0, r3
 8016dfc:	4b2f      	ldr	r3, [pc, #188]	; (8016ebc <main+0xb9c>)
 8016dfe:	f9b3 102c 	ldrsh.w	r1, [r3, #44]	; 0x2c
 8016e02:	4a2e      	ldr	r2, [pc, #184]	; (8016ebc <main+0xb9c>)
 8016e04:	00c3      	lsls	r3, r0, #3
 8016e06:	4413      	add	r3, r2
 8016e08:	460a      	mov	r2, r1
 8016e0a:	809a      	strh	r2, [r3, #4]
 8016e0c:	e015      	b.n	8016e3a <main+0xb1a>
	            else List[MenuNow[Current]].Val--;
 8016e0e:	4b29      	ldr	r3, [pc, #164]	; (8016eb4 <main+0xb94>)
 8016e10:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016e14:	461a      	mov	r2, r3
 8016e16:	4b28      	ldr	r3, [pc, #160]	; (8016eb8 <main+0xb98>)
 8016e18:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8016e1c:	461a      	mov	r2, r3
 8016e1e:	4927      	ldr	r1, [pc, #156]	; (8016ebc <main+0xb9c>)
 8016e20:	00d3      	lsls	r3, r2, #3
 8016e22:	440b      	add	r3, r1
 8016e24:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8016e28:	b29b      	uxth	r3, r3
 8016e2a:	3b01      	subs	r3, #1
 8016e2c:	b29b      	uxth	r3, r3
 8016e2e:	b218      	sxth	r0, r3
 8016e30:	4922      	ldr	r1, [pc, #136]	; (8016ebc <main+0xb9c>)
 8016e32:	00d3      	lsls	r3, r2, #3
 8016e34:	440b      	add	r3, r1
 8016e36:	4602      	mov	r2, r0
 8016e38:	809a      	strh	r2, [r3, #4]
	          }
	          //==============================================
	            if(MenuNow[Current] == SMPL_DPTH){
 8016e3a:	4b1e      	ldr	r3, [pc, #120]	; (8016eb4 <main+0xb94>)
 8016e3c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016e40:	461a      	mov	r2, r3
 8016e42:	4b1d      	ldr	r3, [pc, #116]	; (8016eb8 <main+0xb98>)
 8016e44:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8016e48:	2b09      	cmp	r3, #9
 8016e4a:	d103      	bne.n	8016e54 <main+0xb34>
	              List[VIEWPOSI].Val=1 ;
 8016e4c:	4b1b      	ldr	r3, [pc, #108]	; (8016ebc <main+0xb9c>)
 8016e4e:	2201      	movs	r2, #1
 8016e50:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
	           }
	            if((MenuNow[Current] ==T2_POSI) && (List[T2_POSI].Val <= List[T1_POSI].Val))
 8016e54:	4b17      	ldr	r3, [pc, #92]	; (8016eb4 <main+0xb94>)
 8016e56:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016e5a:	461a      	mov	r2, r3
 8016e5c:	4b16      	ldr	r3, [pc, #88]	; (8016eb8 <main+0xb98>)
 8016e5e:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8016e62:	2b0b      	cmp	r3, #11
 8016e64:	d117      	bne.n	8016e96 <main+0xb76>
 8016e66:	4b15      	ldr	r3, [pc, #84]	; (8016ebc <main+0xb9c>)
 8016e68:	f9b3 205c 	ldrsh.w	r2, [r3, #92]	; 0x5c
 8016e6c:	4b13      	ldr	r3, [pc, #76]	; (8016ebc <main+0xb9c>)
 8016e6e:	f9b3 3054 	ldrsh.w	r3, [r3, #84]	; 0x54
 8016e72:	429a      	cmp	r2, r3
 8016e74:	dc0f      	bgt.n	8016e96 <main+0xb76>
	              List[MenuNow[Current]].Val=List[T1_POSI].Val;
 8016e76:	4b0f      	ldr	r3, [pc, #60]	; (8016eb4 <main+0xb94>)
 8016e78:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016e7c:	461a      	mov	r2, r3
 8016e7e:	4b0e      	ldr	r3, [pc, #56]	; (8016eb8 <main+0xb98>)
 8016e80:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8016e84:	4618      	mov	r0, r3
 8016e86:	4b0d      	ldr	r3, [pc, #52]	; (8016ebc <main+0xb9c>)
 8016e88:	f9b3 1054 	ldrsh.w	r1, [r3, #84]	; 0x54
 8016e8c:	4a0b      	ldr	r2, [pc, #44]	; (8016ebc <main+0xb9c>)
 8016e8e:	00c3      	lsls	r3, r0, #3
 8016e90:	4413      	add	r3, r2
 8016e92:	460a      	mov	r2, r1
 8016e94:	809a      	strh	r2, [r3, #4]
	        }
	        if(Current == TRG) Status &= ~STOP; // �ı�ͬ��ģʽ��ָ�����״̬
 8016e96:	4b07      	ldr	r3, [pc, #28]	; (8016eb4 <main+0xb94>)
 8016e98:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016e9c:	2b02      	cmp	r3, #2
 8016e9e:	f040 821e 	bne.w	80172de <main+0xfbe>
 8016ea2:	4b07      	ldr	r3, [pc, #28]	; (8016ec0 <main+0xba0>)
 8016ea4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016ea8:	f023 0301 	bic.w	r3, r3, #1
 8016eac:	b21a      	sxth	r2, r3
 8016eae:	4b04      	ldr	r3, [pc, #16]	; (8016ec0 <main+0xba0>)
 8016eb0:	801a      	strh	r2, [r3, #0]
	        break;
 8016eb2:	e214      	b.n	80172de <main+0xfbe>
 8016eb4:	2000079e 	.word	0x2000079e
 8016eb8:	20000538 	.word	0x20000538
 8016ebc:	20000298 	.word	0x20000298
 8016ec0:	200007a0 	.word	0x200007a0

	      case KEYCODE_RIGHT:
	        if((Current==ST)&& !(PopType & LIST_POP))break;
 8016ec4:	4bb7      	ldr	r3, [pc, #732]	; (80171a4 <main+0xe84>)
 8016ec6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016eca:	2b07      	cmp	r3, #7
 8016ecc:	d106      	bne.n	8016edc <main+0xbbc>
 8016ece:	4bb6      	ldr	r3, [pc, #728]	; (80171a8 <main+0xe88>)
 8016ed0:	781b      	ldrb	r3, [r3, #0]
 8016ed2:	f003 0302 	and.w	r3, r3, #2
 8016ed6:	2b00      	cmp	r3, #0
 8016ed8:	f000 8203 	beq.w	80172e2 <main+0xfc2>
	        List[MenuNow[Current]].Flg |= UPD;  // ˢ�±��ǰԭ��ʾ��Ŀ����
 8016edc:	4bb1      	ldr	r3, [pc, #708]	; (80171a4 <main+0xe84>)
 8016ede:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016ee2:	461a      	mov	r2, r3
 8016ee4:	4bb1      	ldr	r3, [pc, #708]	; (80171ac <main+0xe8c>)
 8016ee6:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8016eea:	4ab1      	ldr	r2, [pc, #708]	; (80171b0 <main+0xe90>)
 8016eec:	00db      	lsls	r3, r3, #3
 8016eee:	4413      	add	r3, r2
 8016ef0:	799b      	ldrb	r3, [r3, #6]
 8016ef2:	4aac      	ldr	r2, [pc, #688]	; (80171a4 <main+0xe84>)
 8016ef4:	f9b2 2000 	ldrsh.w	r2, [r2]
 8016ef8:	4611      	mov	r1, r2
 8016efa:	4aac      	ldr	r2, [pc, #688]	; (80171ac <main+0xe8c>)
 8016efc:	f932 2011 	ldrsh.w	r2, [r2, r1, lsl #1]
 8016f00:	4610      	mov	r0, r2
 8016f02:	f043 0320 	orr.w	r3, r3, #32
 8016f06:	b2d9      	uxtb	r1, r3
 8016f08:	4aa9      	ldr	r2, [pc, #676]	; (80171b0 <main+0xe90>)
 8016f0a:	00c3      	lsls	r3, r0, #3
 8016f0c:	4413      	add	r3, r2
 8016f0e:	460a      	mov	r2, r1
 8016f10:	719a      	strb	r2, [r3, #6]
	        if(List[MenuNow[Current]].Val >=MAX[MenuNow[Current]] ){
 8016f12:	4ba4      	ldr	r3, [pc, #656]	; (80171a4 <main+0xe84>)
 8016f14:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016f18:	461a      	mov	r2, r3
 8016f1a:	4ba4      	ldr	r3, [pc, #656]	; (80171ac <main+0xe8c>)
 8016f1c:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8016f20:	4aa3      	ldr	r2, [pc, #652]	; (80171b0 <main+0xe90>)
 8016f22:	00db      	lsls	r3, r3, #3
 8016f24:	4413      	add	r3, r2
 8016f26:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
 8016f2a:	4b9e      	ldr	r3, [pc, #632]	; (80171a4 <main+0xe84>)
 8016f2c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016f30:	4619      	mov	r1, r3
 8016f32:	4b9e      	ldr	r3, [pc, #632]	; (80171ac <main+0xe8c>)
 8016f34:	f933 3011 	ldrsh.w	r3, [r3, r1, lsl #1]
 8016f38:	4619      	mov	r1, r3
 8016f3a:	4b9e      	ldr	r3, [pc, #632]	; (80171b4 <main+0xe94>)
 8016f3c:	f933 3011 	ldrsh.w	r3, [r3, r1, lsl #1]
 8016f40:	429a      	cmp	r2, r3
 8016f42:	db73      	blt.n	801702c <main+0xd0c>
	          if((MenuNow[Current] == COUPLING)||(MenuNow[Current] == YN_TYPE )||
 8016f44:	4b97      	ldr	r3, [pc, #604]	; (80171a4 <main+0xe84>)
 8016f46:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016f4a:	461a      	mov	r2, r3
 8016f4c:	4b97      	ldr	r3, [pc, #604]	; (80171ac <main+0xe8c>)
 8016f4e:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8016f52:	2b01      	cmp	r3, #1
 8016f54:	d051      	beq.n	8016ffa <main+0xcda>
 8016f56:	4b93      	ldr	r3, [pc, #588]	; (80171a4 <main+0xe84>)
 8016f58:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016f5c:	461a      	mov	r2, r3
 8016f5e:	4b93      	ldr	r3, [pc, #588]	; (80171ac <main+0xe8c>)
 8016f60:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8016f64:	2b06      	cmp	r3, #6
 8016f66:	d048      	beq.n	8016ffa <main+0xcda>
	            (MenuNow[Current] == XN_TYPE )||(MenuNow[Current] == EXT_HIDE)||
 8016f68:	4b8e      	ldr	r3, [pc, #568]	; (80171a4 <main+0xe84>)
 8016f6a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016f6e:	461a      	mov	r2, r3
 8016f70:	4b8e      	ldr	r3, [pc, #568]	; (80171ac <main+0xe8c>)
 8016f72:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
	          if((MenuNow[Current] == COUPLING)||(MenuNow[Current] == YN_TYPE )||
 8016f76:	2b0c      	cmp	r3, #12
 8016f78:	d03f      	beq.n	8016ffa <main+0xcda>
	            (MenuNow[Current] == XN_TYPE )||(MenuNow[Current] == EXT_HIDE)||
 8016f7a:	4b8a      	ldr	r3, [pc, #552]	; (80171a4 <main+0xe84>)
 8016f7c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016f80:	461a      	mov	r2, r3
 8016f82:	4b8a      	ldr	r3, [pc, #552]	; (80171ac <main+0xe8c>)
 8016f84:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8016f88:	2b1c      	cmp	r3, #28
 8016f8a:	d036      	beq.n	8016ffa <main+0xcda>
	            ( MenuNow[Current] == FITTRIGG)||(MenuNow[Current] == TR_MODE )||
 8016f8c:	4b85      	ldr	r3, [pc, #532]	; (80171a4 <main+0xe84>)
 8016f8e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016f92:	461a      	mov	r2, r3
 8016f94:	4b85      	ldr	r3, [pc, #532]	; (80171ac <main+0xe8c>)
 8016f96:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
	            (MenuNow[Current] == XN_TYPE )||(MenuNow[Current] == EXT_HIDE)||
 8016f9a:	2b0f      	cmp	r3, #15
 8016f9c:	d02d      	beq.n	8016ffa <main+0xcda>
	            ( MenuNow[Current] == FITTRIGG)||(MenuNow[Current] == TR_MODE )||
 8016f9e:	4b81      	ldr	r3, [pc, #516]	; (80171a4 <main+0xe84>)
 8016fa0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016fa4:	461a      	mov	r2, r3
 8016fa6:	4b81      	ldr	r3, [pc, #516]	; (80171ac <main+0xe8c>)
 8016fa8:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8016fac:	2b0e      	cmp	r3, #14
 8016fae:	d024      	beq.n	8016ffa <main+0xcda>
	            ( MenuNow[Current] == SYNCMODE)||(MenuNow[Current] == EXT_REFN)||
 8016fb0:	4b7c      	ldr	r3, [pc, #496]	; (80171a4 <main+0xe84>)
 8016fb2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016fb6:	461a      	mov	r2, r3
 8016fb8:	4b7c      	ldr	r3, [pc, #496]	; (80171ac <main+0xe8c>)
 8016fba:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
	            ( MenuNow[Current] == FITTRIGG)||(MenuNow[Current] == TR_MODE )||
 8016fbe:	2b0d      	cmp	r3, #13
 8016fc0:	d01b      	beq.n	8016ffa <main+0xcda>
	            ( MenuNow[Current] == SYNCMODE)||(MenuNow[Current] == EXT_REFN)||
 8016fc2:	4b78      	ldr	r3, [pc, #480]	; (80171a4 <main+0xe84>)
 8016fc4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016fc8:	461a      	mov	r2, r3
 8016fca:	4b78      	ldr	r3, [pc, #480]	; (80171ac <main+0xe8c>)
 8016fcc:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8016fd0:	2b1a      	cmp	r3, #26
 8016fd2:	d012      	beq.n	8016ffa <main+0xcda>
	            (MenuNow[Current] == PROBEATT)||(MenuNow[Current] == TPYE_OUT))
 8016fd4:	4b73      	ldr	r3, [pc, #460]	; (80171a4 <main+0xe84>)
 8016fd6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016fda:	461a      	mov	r2, r3
 8016fdc:	4b73      	ldr	r3, [pc, #460]	; (80171ac <main+0xe8c>)
 8016fde:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
	            ( MenuNow[Current] == SYNCMODE)||(MenuNow[Current] == EXT_REFN)||
 8016fe2:	2b02      	cmp	r3, #2
 8016fe4:	d009      	beq.n	8016ffa <main+0xcda>
	            (MenuNow[Current] == PROBEATT)||(MenuNow[Current] == TPYE_OUT))
 8016fe6:	4b6f      	ldr	r3, [pc, #444]	; (80171a4 <main+0xe84>)
 8016fe8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016fec:	461a      	mov	r2, r3
 8016fee:	4b6f      	ldr	r3, [pc, #444]	; (80171ac <main+0xe8c>)
 8016ff0:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8016ff4:	2b24      	cmp	r3, #36	; 0x24
 8016ff6:	f040 8153 	bne.w	80172a0 <main+0xf80>
	            List[MenuNow[Current]].Val =MIN[MenuNow[Current]] ;
 8016ffa:	4b6a      	ldr	r3, [pc, #424]	; (80171a4 <main+0xe84>)
 8016ffc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8017000:	461a      	mov	r2, r3
 8017002:	4b6a      	ldr	r3, [pc, #424]	; (80171ac <main+0xe8c>)
 8017004:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8017008:	461a      	mov	r2, r3
 801700a:	4b66      	ldr	r3, [pc, #408]	; (80171a4 <main+0xe84>)
 801700c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8017010:	4619      	mov	r1, r3
 8017012:	4b66      	ldr	r3, [pc, #408]	; (80171ac <main+0xe8c>)
 8017014:	f933 3011 	ldrsh.w	r3, [r3, r1, lsl #1]
 8017018:	4618      	mov	r0, r3
 801701a:	4b67      	ldr	r3, [pc, #412]	; (80171b8 <main+0xe98>)
 801701c:	f933 1012 	ldrsh.w	r1, [r3, r2, lsl #1]
 8017020:	4a63      	ldr	r2, [pc, #396]	; (80171b0 <main+0xe90>)
 8017022:	00c3      	lsls	r3, r0, #3
 8017024:	4413      	add	r3, r2
 8017026:	460a      	mov	r2, r1
 8017028:	809a      	strh	r2, [r3, #4]
 801702a:	e139      	b.n	80172a0 <main+0xf80>
	        } else {
	            if(MenuNow[Current] == VIEWPOSI)
 801702c:	4b5d      	ldr	r3, [pc, #372]	; (80171a4 <main+0xe84>)
 801702e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8017032:	461a      	mov	r2, r3
 8017034:	4b5d      	ldr	r3, [pc, #372]	; (80171ac <main+0xe8c>)
 8017036:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 801703a:	2b08      	cmp	r3, #8
 801703c:	d15f      	bne.n	80170fe <main+0xdde>
	            {
	              if(List[MenuNow[Current]].Val <(DEPTH[List[SMPL_DPTH].Val]-(350-List[SMPL_DPTH].Val)))
 801703e:	4b59      	ldr	r3, [pc, #356]	; (80171a4 <main+0xe84>)
 8017040:	f9b3 3000 	ldrsh.w	r3, [r3]
 8017044:	461a      	mov	r2, r3
 8017046:	4b59      	ldr	r3, [pc, #356]	; (80171ac <main+0xe8c>)
 8017048:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 801704c:	4a58      	ldr	r2, [pc, #352]	; (80171b0 <main+0xe90>)
 801704e:	00db      	lsls	r3, r3, #3
 8017050:	4413      	add	r3, r2
 8017052:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8017056:	461a      	mov	r2, r3
 8017058:	4b55      	ldr	r3, [pc, #340]	; (80171b0 <main+0xe90>)
 801705a:	f9b3 304c 	ldrsh.w	r3, [r3, #76]	; 0x4c
 801705e:	4619      	mov	r1, r3
 8017060:	4b56      	ldr	r3, [pc, #344]	; (80171bc <main+0xe9c>)
 8017062:	f933 3011 	ldrsh.w	r3, [r3, r1, lsl #1]
 8017066:	4619      	mov	r1, r3
 8017068:	4b51      	ldr	r3, [pc, #324]	; (80171b0 <main+0xe90>)
 801706a:	f9b3 304c 	ldrsh.w	r3, [r3, #76]	; 0x4c
 801706e:	f5c3 73af 	rsb	r3, r3, #350	; 0x15e
 8017072:	1acb      	subs	r3, r1, r3
 8017074:	429a      	cmp	r2, r3
 8017076:	f280 80f2 	bge.w	801725e <main+0xf3e>
	              {
	                if(List[MenuNow[Current]].Val >150 )
 801707a:	4b4a      	ldr	r3, [pc, #296]	; (80171a4 <main+0xe84>)
 801707c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8017080:	461a      	mov	r2, r3
 8017082:	4b4a      	ldr	r3, [pc, #296]	; (80171ac <main+0xe8c>)
 8017084:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8017088:	4a49      	ldr	r2, [pc, #292]	; (80171b0 <main+0xe90>)
 801708a:	00db      	lsls	r3, r3, #3
 801708c:	4413      	add	r3, r2
 801708e:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8017092:	2b96      	cmp	r3, #150	; 0x96
 8017094:	dd1c      	ble.n	80170d0 <main+0xdb0>
	                  List[MenuNow[Current]].Val += 25;
 8017096:	4b43      	ldr	r3, [pc, #268]	; (80171a4 <main+0xe84>)
 8017098:	f9b3 3000 	ldrsh.w	r3, [r3]
 801709c:	461a      	mov	r2, r3
 801709e:	4b43      	ldr	r3, [pc, #268]	; (80171ac <main+0xe8c>)
 80170a0:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 80170a4:	4a42      	ldr	r2, [pc, #264]	; (80171b0 <main+0xe90>)
 80170a6:	00db      	lsls	r3, r3, #3
 80170a8:	4413      	add	r3, r2
 80170aa:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80170ae:	b29b      	uxth	r3, r3
 80170b0:	3319      	adds	r3, #25
 80170b2:	b29a      	uxth	r2, r3
 80170b4:	4b3b      	ldr	r3, [pc, #236]	; (80171a4 <main+0xe84>)
 80170b6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80170ba:	4619      	mov	r1, r3
 80170bc:	4b3b      	ldr	r3, [pc, #236]	; (80171ac <main+0xe8c>)
 80170be:	f933 3011 	ldrsh.w	r3, [r3, r1, lsl #1]
 80170c2:	b211      	sxth	r1, r2
 80170c4:	4a3a      	ldr	r2, [pc, #232]	; (80171b0 <main+0xe90>)
 80170c6:	00db      	lsls	r3, r3, #3
 80170c8:	4413      	add	r3, r2
 80170ca:	460a      	mov	r2, r1
 80170cc:	809a      	strh	r2, [r3, #4]
 80170ce:	e0c6      	b.n	801725e <main+0xf3e>
	                else
	                  List[MenuNow[Current]].Val++;
 80170d0:	4b34      	ldr	r3, [pc, #208]	; (80171a4 <main+0xe84>)
 80170d2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80170d6:	461a      	mov	r2, r3
 80170d8:	4b34      	ldr	r3, [pc, #208]	; (80171ac <main+0xe8c>)
 80170da:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 80170de:	461a      	mov	r2, r3
 80170e0:	4933      	ldr	r1, [pc, #204]	; (80171b0 <main+0xe90>)
 80170e2:	00d3      	lsls	r3, r2, #3
 80170e4:	440b      	add	r3, r1
 80170e6:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80170ea:	b29b      	uxth	r3, r3
 80170ec:	3301      	adds	r3, #1
 80170ee:	b29b      	uxth	r3, r3
 80170f0:	b218      	sxth	r0, r3
 80170f2:	492f      	ldr	r1, [pc, #188]	; (80171b0 <main+0xe90>)
 80170f4:	00d3      	lsls	r3, r2, #3
 80170f6:	440b      	add	r3, r1
 80170f8:	4602      	mov	r2, r0
 80170fa:	809a      	strh	r2, [r3, #4]
 80170fc:	e0af      	b.n	801725e <main+0xf3e>
	              }
	            }
	            else{
	              //============4.27�޸������߳�����������========
	              if(MenuNow[Current] == THRESHOLD){
 80170fe:	4b29      	ldr	r3, [pc, #164]	; (80171a4 <main+0xe84>)
 8017100:	f9b3 3000 	ldrsh.w	r3, [r3]
 8017104:	461a      	mov	r2, r3
 8017106:	4b29      	ldr	r3, [pc, #164]	; (80171ac <main+0xe8c>)
 8017108:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 801710c:	2b10      	cmp	r3, #16
 801710e:	d121      	bne.n	8017154 <main+0xe34>
	                if((List[V0_POSI].Val + List[THRESHOLD].Val) < 198)
 8017110:	4b27      	ldr	r3, [pc, #156]	; (80171b0 <main+0xe90>)
 8017112:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 8017116:	461a      	mov	r2, r3
 8017118:	4b25      	ldr	r3, [pc, #148]	; (80171b0 <main+0xe90>)
 801711a:	f9b3 3084 	ldrsh.w	r3, [r3, #132]	; 0x84
 801711e:	4413      	add	r3, r2
 8017120:	2bc5      	cmp	r3, #197	; 0xc5
 8017122:	f300 809c 	bgt.w	801725e <main+0xf3e>
	                 List[MenuNow[Current]].Val++;
 8017126:	4b1f      	ldr	r3, [pc, #124]	; (80171a4 <main+0xe84>)
 8017128:	f9b3 3000 	ldrsh.w	r3, [r3]
 801712c:	461a      	mov	r2, r3
 801712e:	4b1f      	ldr	r3, [pc, #124]	; (80171ac <main+0xe8c>)
 8017130:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8017134:	461a      	mov	r2, r3
 8017136:	491e      	ldr	r1, [pc, #120]	; (80171b0 <main+0xe90>)
 8017138:	00d3      	lsls	r3, r2, #3
 801713a:	440b      	add	r3, r1
 801713c:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8017140:	b29b      	uxth	r3, r3
 8017142:	3301      	adds	r3, #1
 8017144:	b29b      	uxth	r3, r3
 8017146:	b218      	sxth	r0, r3
 8017148:	4919      	ldr	r1, [pc, #100]	; (80171b0 <main+0xe90>)
 801714a:	00d3      	lsls	r3, r2, #3
 801714c:	440b      	add	r3, r1
 801714e:	4602      	mov	r2, r0
 8017150:	809a      	strh	r2, [r3, #4]
 8017152:	e084      	b.n	801725e <main+0xf3e>
	              }
	              else if(MenuNow[Current] == V0_POSI){
 8017154:	4b13      	ldr	r3, [pc, #76]	; (80171a4 <main+0xe84>)
 8017156:	f9b3 3000 	ldrsh.w	r3, [r3]
 801715a:	461a      	mov	r2, r3
 801715c:	4b13      	ldr	r3, [pc, #76]	; (80171ac <main+0xe8c>)
 801715e:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8017162:	2b03      	cmp	r3, #3
 8017164:	d143      	bne.n	80171ee <main+0xece>
	                if((List[V0_POSI].Val + List[THRESHOLD].Val) > 198){
 8017166:	4b12      	ldr	r3, [pc, #72]	; (80171b0 <main+0xe90>)
 8017168:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 801716c:	461a      	mov	r2, r3
 801716e:	4b10      	ldr	r3, [pc, #64]	; (80171b0 <main+0xe90>)
 8017170:	f9b3 3084 	ldrsh.w	r3, [r3, #132]	; 0x84
 8017174:	4413      	add	r3, r2
 8017176:	2bc6      	cmp	r3, #198	; 0xc6
 8017178:	dd22      	ble.n	80171c0 <main+0xea0>
	                  List[V0_POSI].Val++;
 801717a:	4b0d      	ldr	r3, [pc, #52]	; (80171b0 <main+0xe90>)
 801717c:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 8017180:	b29b      	uxth	r3, r3
 8017182:	3301      	adds	r3, #1
 8017184:	b29b      	uxth	r3, r3
 8017186:	b21a      	sxth	r2, r3
 8017188:	4b09      	ldr	r3, [pc, #36]	; (80171b0 <main+0xe90>)
 801718a:	839a      	strh	r2, [r3, #28]
	                  List[THRESHOLD].Val--;
 801718c:	4b08      	ldr	r3, [pc, #32]	; (80171b0 <main+0xe90>)
 801718e:	f9b3 3084 	ldrsh.w	r3, [r3, #132]	; 0x84
 8017192:	b29b      	uxth	r3, r3
 8017194:	3b01      	subs	r3, #1
 8017196:	b29b      	uxth	r3, r3
 8017198:	b21a      	sxth	r2, r3
 801719a:	4b05      	ldr	r3, [pc, #20]	; (80171b0 <main+0xe90>)
 801719c:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84
 80171a0:	e05d      	b.n	801725e <main+0xf3e>
 80171a2:	bf00      	nop
 80171a4:	2000079e 	.word	0x2000079e
 80171a8:	2000078c 	.word	0x2000078c
 80171ac:	20000538 	.word	0x20000538
 80171b0:	20000298 	.word	0x20000298
 80171b4:	080021b8 	.word	0x080021b8
 80171b8:	08002214 	.word	0x08002214
 80171bc:	08002270 	.word	0x08002270
	                }else List[MenuNow[Current]].Val++;
 80171c0:	4b64      	ldr	r3, [pc, #400]	; (8017354 <main+0x1034>)
 80171c2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80171c6:	461a      	mov	r2, r3
 80171c8:	4b63      	ldr	r3, [pc, #396]	; (8017358 <main+0x1038>)
 80171ca:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 80171ce:	461a      	mov	r2, r3
 80171d0:	4962      	ldr	r1, [pc, #392]	; (801735c <main+0x103c>)
 80171d2:	00d3      	lsls	r3, r2, #3
 80171d4:	440b      	add	r3, r1
 80171d6:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80171da:	b29b      	uxth	r3, r3
 80171dc:	3301      	adds	r3, #1
 80171de:	b29b      	uxth	r3, r3
 80171e0:	b218      	sxth	r0, r3
 80171e2:	495e      	ldr	r1, [pc, #376]	; (801735c <main+0x103c>)
 80171e4:	00d3      	lsls	r3, r2, #3
 80171e6:	440b      	add	r3, r1
 80171e8:	4602      	mov	r2, r0
 80171ea:	809a      	strh	r2, [r3, #4]
 80171ec:	e037      	b.n	801725e <main+0xf3e>
	              }
	              else if((MenuNow[Current] ==V2_POSI) && (List[V2_POSI].Val >= List[V1_POSI].Val))
 80171ee:	4b59      	ldr	r3, [pc, #356]	; (8017354 <main+0x1034>)
 80171f0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80171f4:	461a      	mov	r2, r3
 80171f6:	4b58      	ldr	r3, [pc, #352]	; (8017358 <main+0x1038>)
 80171f8:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 80171fc:	2b05      	cmp	r3, #5
 80171fe:	d118      	bne.n	8017232 <main+0xf12>
 8017200:	4b56      	ldr	r3, [pc, #344]	; (801735c <main+0x103c>)
 8017202:	f9b3 202c 	ldrsh.w	r2, [r3, #44]	; 0x2c
 8017206:	4b55      	ldr	r3, [pc, #340]	; (801735c <main+0x103c>)
 8017208:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	; 0x24
 801720c:	429a      	cmp	r2, r3
 801720e:	db10      	blt.n	8017232 <main+0xf12>
	                List[MenuNow[Current]].Val=List[V1_POSI].Val;
 8017210:	4b50      	ldr	r3, [pc, #320]	; (8017354 <main+0x1034>)
 8017212:	f9b3 3000 	ldrsh.w	r3, [r3]
 8017216:	461a      	mov	r2, r3
 8017218:	4b4f      	ldr	r3, [pc, #316]	; (8017358 <main+0x1038>)
 801721a:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 801721e:	4618      	mov	r0, r3
 8017220:	4b4e      	ldr	r3, [pc, #312]	; (801735c <main+0x103c>)
 8017222:	f9b3 1024 	ldrsh.w	r1, [r3, #36]	; 0x24
 8017226:	4a4d      	ldr	r2, [pc, #308]	; (801735c <main+0x103c>)
 8017228:	00c3      	lsls	r3, r0, #3
 801722a:	4413      	add	r3, r2
 801722c:	460a      	mov	r2, r1
 801722e:	809a      	strh	r2, [r3, #4]
 8017230:	e015      	b.n	801725e <main+0xf3e>
	              else List[MenuNow[Current]].Val++;
 8017232:	4b48      	ldr	r3, [pc, #288]	; (8017354 <main+0x1034>)
 8017234:	f9b3 3000 	ldrsh.w	r3, [r3]
 8017238:	461a      	mov	r2, r3
 801723a:	4b47      	ldr	r3, [pc, #284]	; (8017358 <main+0x1038>)
 801723c:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8017240:	461a      	mov	r2, r3
 8017242:	4946      	ldr	r1, [pc, #280]	; (801735c <main+0x103c>)
 8017244:	00d3      	lsls	r3, r2, #3
 8017246:	440b      	add	r3, r1
 8017248:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801724c:	b29b      	uxth	r3, r3
 801724e:	3301      	adds	r3, #1
 8017250:	b29b      	uxth	r3, r3
 8017252:	b218      	sxth	r0, r3
 8017254:	4941      	ldr	r1, [pc, #260]	; (801735c <main+0x103c>)
 8017256:	00d3      	lsls	r3, r2, #3
 8017258:	440b      	add	r3, r1
 801725a:	4602      	mov	r2, r0
 801725c:	809a      	strh	r2, [r3, #4]
	            }
	            //==============================================
	            if((MenuNow[Current] ==T1_POSI) && (List[T1_POSI].Val >= List[T2_POSI].Val))
 801725e:	4b3d      	ldr	r3, [pc, #244]	; (8017354 <main+0x1034>)
 8017260:	f9b3 3000 	ldrsh.w	r3, [r3]
 8017264:	461a      	mov	r2, r3
 8017266:	4b3c      	ldr	r3, [pc, #240]	; (8017358 <main+0x1038>)
 8017268:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 801726c:	2b0a      	cmp	r3, #10
 801726e:	d117      	bne.n	80172a0 <main+0xf80>
 8017270:	4b3a      	ldr	r3, [pc, #232]	; (801735c <main+0x103c>)
 8017272:	f9b3 2054 	ldrsh.w	r2, [r3, #84]	; 0x54
 8017276:	4b39      	ldr	r3, [pc, #228]	; (801735c <main+0x103c>)
 8017278:	f9b3 305c 	ldrsh.w	r3, [r3, #92]	; 0x5c
 801727c:	429a      	cmp	r2, r3
 801727e:	db0f      	blt.n	80172a0 <main+0xf80>
	               List[MenuNow[Current]].Val=List[T2_POSI].Val;
 8017280:	4b34      	ldr	r3, [pc, #208]	; (8017354 <main+0x1034>)
 8017282:	f9b3 3000 	ldrsh.w	r3, [r3]
 8017286:	461a      	mov	r2, r3
 8017288:	4b33      	ldr	r3, [pc, #204]	; (8017358 <main+0x1038>)
 801728a:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 801728e:	4618      	mov	r0, r3
 8017290:	4b32      	ldr	r3, [pc, #200]	; (801735c <main+0x103c>)
 8017292:	f9b3 105c 	ldrsh.w	r1, [r3, #92]	; 0x5c
 8017296:	4a31      	ldr	r2, [pc, #196]	; (801735c <main+0x103c>)
 8017298:	00c3      	lsls	r3, r0, #3
 801729a:	4413      	add	r3, r2
 801729c:	460a      	mov	r2, r1
 801729e:	809a      	strh	r2, [r3, #4]
	        }
	        if(Current == TRG) {Status &= ~STOP; // �ı�ͬ��ģʽ��ָ�����״̬
 80172a0:	4b2c      	ldr	r3, [pc, #176]	; (8017354 <main+0x1034>)
 80172a2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80172a6:	2b02      	cmp	r3, #2
 80172a8:	d11d      	bne.n	80172e6 <main+0xfc6>
 80172aa:	4b2d      	ldr	r3, [pc, #180]	; (8017360 <main+0x1040>)
 80172ac:	f9b3 3000 	ldrsh.w	r3, [r3]
 80172b0:	f023 0301 	bic.w	r3, r3, #1
 80172b4:	b21a      	sxth	r2, r3
 80172b6:	4b2a      	ldr	r3, [pc, #168]	; (8017360 <main+0x1040>)
 80172b8:	801a      	strh	r2, [r3, #0]
	        if(List[SYNCMODE].Val==SINGL)ADC_Start(); }
 80172ba:	4b28      	ldr	r3, [pc, #160]	; (801735c <main+0x103c>)
 80172bc:	f9b3 306c 	ldrsh.w	r3, [r3, #108]	; 0x6c
 80172c0:	2b04      	cmp	r3, #4
 80172c2:	d110      	bne.n	80172e6 <main+0xfc6>
 80172c4:	f7f5 fa12 	bl	800c6ec <ADC_Start>
	        break;
 80172c8:	e00d      	b.n	80172e6 <main+0xfc6>
	         break;
 80172ca:	bf00      	nop
 80172cc:	e00c      	b.n	80172e8 <main+0xfc8>
	         break;
 80172ce:	bf00      	nop
 80172d0:	e00a      	b.n	80172e8 <main+0xfc8>
	        break;
 80172d2:	bf00      	nop
 80172d4:	e008      	b.n	80172e8 <main+0xfc8>
	        break;
 80172d6:	bf00      	nop
 80172d8:	e006      	b.n	80172e8 <main+0xfc8>
	        if((Current==ST)&& !(PopType & LIST_POP))break;
 80172da:	bf00      	nop
 80172dc:	e004      	b.n	80172e8 <main+0xfc8>
	        break;
 80172de:	bf00      	nop
 80172e0:	e002      	b.n	80172e8 <main+0xfc8>
	        if((Current==ST)&& !(PopType & LIST_POP))break;
 80172e2:	bf00      	nop
 80172e4:	e000      	b.n	80172e8 <main+0xfc8>
	        break;
 80172e6:	bf00      	nop

	     } //switch end
	     List[MenuNow[Current]].Flg |= UPD;
 80172e8:	4b1a      	ldr	r3, [pc, #104]	; (8017354 <main+0x1034>)
 80172ea:	f9b3 3000 	ldrsh.w	r3, [r3]
 80172ee:	461a      	mov	r2, r3
 80172f0:	4b19      	ldr	r3, [pc, #100]	; (8017358 <main+0x1038>)
 80172f2:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 80172f6:	4a19      	ldr	r2, [pc, #100]	; (801735c <main+0x103c>)
 80172f8:	00db      	lsls	r3, r3, #3
 80172fa:	4413      	add	r3, r2
 80172fc:	799b      	ldrb	r3, [r3, #6]
 80172fe:	4a15      	ldr	r2, [pc, #84]	; (8017354 <main+0x1034>)
 8017300:	f9b2 2000 	ldrsh.w	r2, [r2]
 8017304:	4611      	mov	r1, r2
 8017306:	4a14      	ldr	r2, [pc, #80]	; (8017358 <main+0x1038>)
 8017308:	f932 2011 	ldrsh.w	r2, [r2, r1, lsl #1]
 801730c:	4610      	mov	r0, r2
 801730e:	f043 0320 	orr.w	r3, r3, #32
 8017312:	b2d9      	uxtb	r1, r3
 8017314:	4a11      	ldr	r2, [pc, #68]	; (801735c <main+0x103c>)
 8017316:	00c3      	lsls	r3, r0, #3
 8017318:	4413      	add	r3, r2
 801731a:	460a      	mov	r2, r1
 801731c:	719a      	strb	r2, [r3, #6]
	     StdBy_Time  = List[STANDBY].Val * MIN_UNIT;  //����
 801731e:	4b0f      	ldr	r3, [pc, #60]	; (801735c <main+0x103c>)
 8017320:	f9b3 314c 	ldrsh.w	r3, [r3, #332]	; 0x14c
 8017324:	b29b      	uxth	r3, r3
 8017326:	461a      	mov	r2, r3
 8017328:	0112      	lsls	r2, r2, #4
 801732a:	1ad3      	subs	r3, r2, r3
 801732c:	009b      	lsls	r3, r3, #2
 801732e:	b29b      	uxth	r3, r3
 8017330:	b21a      	sxth	r2, r3
 8017332:	4b0c      	ldr	r3, [pc, #48]	; (8017364 <main+0x1044>)
 8017334:	801a      	strh	r2, [r3, #0]

	      if(PopType & LIST_POP) Show_List();
 8017336:	4b0c      	ldr	r3, [pc, #48]	; (8017368 <main+0x1048>)
 8017338:	781b      	ldrb	r3, [r3, #0]
 801733a:	f003 0302 	and.w	r3, r3, #2
 801733e:	2b00      	cmp	r3, #0
 8017340:	d001      	beq.n	8017346 <main+0x1026>
 8017342:	f7fd f9b9 	bl	80146b8 <Show_List>
	      Update_Title();
 8017346:	f7fa fff1 	bl	801232c <Update_Title>
	      Key_Buffer = 0;
 801734a:	4b08      	ldr	r3, [pc, #32]	; (801736c <main+0x104c>)
 801734c:	2200      	movs	r2, #0
 801734e:	701a      	strb	r2, [r3, #0]
	    if((List[STANDBY].Val != 0)&&(StdBy_Time == 0))
 8017350:	f7ff b868 	b.w	8016424 <main+0x104>
 8017354:	2000079e 	.word	0x2000079e
 8017358:	20000538 	.word	0x20000538
 801735c:	20000298 	.word	0x20000298
 8017360:	200007a0 	.word	0x200007a0
 8017364:	2000079c 	.word	0x2000079c
 8017368:	2000078c 	.word	0x2000078c
 801736c:	2000077d 	.word	0x2000077d

08017370 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8017370:	b580      	push	{r7, lr}
 8017372:	b094      	sub	sp, #80	; 0x50
 8017374:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8017376:	f107 031c 	add.w	r3, r7, #28
 801737a:	2234      	movs	r2, #52	; 0x34
 801737c:	2100      	movs	r1, #0
 801737e:	4618      	mov	r0, r3
 8017380:	f00b fc6a 	bl	8022c58 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8017384:	f107 0308 	add.w	r3, r7, #8
 8017388:	2200      	movs	r2, #0
 801738a:	601a      	str	r2, [r3, #0]
 801738c:	605a      	str	r2, [r3, #4]
 801738e:	609a      	str	r2, [r3, #8]
 8017390:	60da      	str	r2, [r3, #12]
 8017392:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8017394:	2300      	movs	r3, #0
 8017396:	607b      	str	r3, [r7, #4]
 8017398:	4b2d      	ldr	r3, [pc, #180]	; (8017450 <SystemClock_Config+0xe0>)
 801739a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801739c:	4a2c      	ldr	r2, [pc, #176]	; (8017450 <SystemClock_Config+0xe0>)
 801739e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80173a2:	6413      	str	r3, [r2, #64]	; 0x40
 80173a4:	4b2a      	ldr	r3, [pc, #168]	; (8017450 <SystemClock_Config+0xe0>)
 80173a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80173a8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80173ac:	607b      	str	r3, [r7, #4]
 80173ae:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80173b0:	2300      	movs	r3, #0
 80173b2:	603b      	str	r3, [r7, #0]
 80173b4:	4b27      	ldr	r3, [pc, #156]	; (8017454 <SystemClock_Config+0xe4>)
 80173b6:	681b      	ldr	r3, [r3, #0]
 80173b8:	4a26      	ldr	r2, [pc, #152]	; (8017454 <SystemClock_Config+0xe4>)
 80173ba:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80173be:	6013      	str	r3, [r2, #0]
 80173c0:	4b24      	ldr	r3, [pc, #144]	; (8017454 <SystemClock_Config+0xe4>)
 80173c2:	681b      	ldr	r3, [r3, #0]
 80173c4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80173c8:	603b      	str	r3, [r7, #0]
 80173ca:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80173cc:	2301      	movs	r3, #1
 80173ce:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80173d0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80173d4:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80173d6:	2302      	movs	r3, #2
 80173d8:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80173da:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80173de:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 25;
 80173e0:	2319      	movs	r3, #25
 80173e2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 360;
 80173e4:	f44f 73b4 	mov.w	r3, #360	; 0x168
 80173e8:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80173ea:	2302      	movs	r3, #2
 80173ec:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 5;
 80173ee:	2305      	movs	r3, #5
 80173f0:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80173f2:	2302      	movs	r3, #2
 80173f4:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80173f6:	f107 031c 	add.w	r3, r7, #28
 80173fa:	4618      	mov	r0, r3
 80173fc:	f004 fbb4 	bl	801bb68 <HAL_RCC_OscConfig>
 8017400:	4603      	mov	r3, r0
 8017402:	2b00      	cmp	r3, #0
 8017404:	d001      	beq.n	801740a <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8017406:	f000 fc21 	bl	8017c4c <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 801740a:	f003 fde5 	bl	801afd8 <HAL_PWREx_EnableOverDrive>
 801740e:	4603      	mov	r3, r0
 8017410:	2b00      	cmp	r3, #0
 8017412:	d001      	beq.n	8017418 <SystemClock_Config+0xa8>
  {
    Error_Handler();
 8017414:	f000 fc1a 	bl	8017c4c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8017418:	230f      	movs	r3, #15
 801741a:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 801741c:	2302      	movs	r3, #2
 801741e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8017420:	2300      	movs	r3, #0
 8017422:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8017424:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8017428:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 801742a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 801742e:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8017430:	f107 0308 	add.w	r3, r7, #8
 8017434:	2105      	movs	r1, #5
 8017436:	4618      	mov	r0, r3
 8017438:	f003 fe1e 	bl	801b078 <HAL_RCC_ClockConfig>
 801743c:	4603      	mov	r3, r0
 801743e:	2b00      	cmp	r3, #0
 8017440:	d001      	beq.n	8017446 <SystemClock_Config+0xd6>
  {
    Error_Handler();
 8017442:	f000 fc03 	bl	8017c4c <Error_Handler>
  }
}
 8017446:	bf00      	nop
 8017448:	3750      	adds	r7, #80	; 0x50
 801744a:	46bd      	mov	sp, r7
 801744c:	bd80      	pop	{r7, pc}
 801744e:	bf00      	nop
 8017450:	40023800 	.word	0x40023800
 8017454:	40007000 	.word	0x40007000

08017458 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8017458:	b580      	push	{r7, lr}
 801745a:	b084      	sub	sp, #16
 801745c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 801745e:	463b      	mov	r3, r7
 8017460:	2200      	movs	r2, #0
 8017462:	601a      	str	r2, [r3, #0]
 8017464:	605a      	str	r2, [r3, #4]
 8017466:	609a      	str	r2, [r3, #8]
 8017468:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 801746a:	4b22      	ldr	r3, [pc, #136]	; (80174f4 <MX_ADC1_Init+0x9c>)
 801746c:	4a22      	ldr	r2, [pc, #136]	; (80174f8 <MX_ADC1_Init+0xa0>)
 801746e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8017470:	4b20      	ldr	r3, [pc, #128]	; (80174f4 <MX_ADC1_Init+0x9c>)
 8017472:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8017476:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8017478:	4b1e      	ldr	r3, [pc, #120]	; (80174f4 <MX_ADC1_Init+0x9c>)
 801747a:	2200      	movs	r2, #0
 801747c:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 801747e:	4b1d      	ldr	r3, [pc, #116]	; (80174f4 <MX_ADC1_Init+0x9c>)
 8017480:	2200      	movs	r2, #0
 8017482:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8017484:	4b1b      	ldr	r3, [pc, #108]	; (80174f4 <MX_ADC1_Init+0x9c>)
 8017486:	2200      	movs	r2, #0
 8017488:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 801748a:	4b1a      	ldr	r3, [pc, #104]	; (80174f4 <MX_ADC1_Init+0x9c>)
 801748c:	2200      	movs	r2, #0
 801748e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8017492:	4b18      	ldr	r3, [pc, #96]	; (80174f4 <MX_ADC1_Init+0x9c>)
 8017494:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8017498:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T1_CC1;
 801749a:	4b16      	ldr	r3, [pc, #88]	; (80174f4 <MX_ADC1_Init+0x9c>)
 801749c:	2200      	movs	r2, #0
 801749e:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80174a0:	4b14      	ldr	r3, [pc, #80]	; (80174f4 <MX_ADC1_Init+0x9c>)
 80174a2:	2200      	movs	r2, #0
 80174a4:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80174a6:	4b13      	ldr	r3, [pc, #76]	; (80174f4 <MX_ADC1_Init+0x9c>)
 80174a8:	2201      	movs	r2, #1
 80174aa:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80174ac:	4b11      	ldr	r3, [pc, #68]	; (80174f4 <MX_ADC1_Init+0x9c>)
 80174ae:	2200      	movs	r2, #0
 80174b0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80174b4:	4b0f      	ldr	r3, [pc, #60]	; (80174f4 <MX_ADC1_Init+0x9c>)
 80174b6:	2201      	movs	r2, #1
 80174b8:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80174ba:	480e      	ldr	r0, [pc, #56]	; (80174f4 <MX_ADC1_Init+0x9c>)
 80174bc:	f000 ffbc 	bl	8018438 <HAL_ADC_Init>
 80174c0:	4603      	mov	r3, r0
 80174c2:	2b00      	cmp	r3, #0
 80174c4:	d001      	beq.n	80174ca <MX_ADC1_Init+0x72>
  {
    Error_Handler();
 80174c6:	f000 fbc1 	bl	8017c4c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 80174ca:	2306      	movs	r3, #6
 80174cc:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80174ce:	2301      	movs	r3, #1
 80174d0:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80174d2:	2300      	movs	r3, #0
 80174d4:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80174d6:	463b      	mov	r3, r7
 80174d8:	4619      	mov	r1, r3
 80174da:	4806      	ldr	r0, [pc, #24]	; (80174f4 <MX_ADC1_Init+0x9c>)
 80174dc:	f000 fff0 	bl	80184c0 <HAL_ADC_ConfigChannel>
 80174e0:	4603      	mov	r3, r0
 80174e2:	2b00      	cmp	r3, #0
 80174e4:	d001      	beq.n	80174ea <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 80174e6:	f000 fbb1 	bl	8017c4c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80174ea:	bf00      	nop
 80174ec:	3710      	adds	r7, #16
 80174ee:	46bd      	mov	sp, r7
 80174f0:	bd80      	pop	{r7, pc}
 80174f2:	bf00      	nop
 80174f4:	20006ad8 	.word	0x20006ad8
 80174f8:	40012000 	.word	0x40012000

080174fc <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 80174fc:	b580      	push	{r7, lr}
 80174fe:	b084      	sub	sp, #16
 8017500:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8017502:	463b      	mov	r3, r7
 8017504:	2200      	movs	r2, #0
 8017506:	601a      	str	r2, [r3, #0]
 8017508:	605a      	str	r2, [r3, #4]
 801750a:	609a      	str	r2, [r3, #8]
 801750c:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC2_Init 1 */

  /* USER CODE END ADC2_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 801750e:	4b22      	ldr	r3, [pc, #136]	; (8017598 <MX_ADC2_Init+0x9c>)
 8017510:	4a22      	ldr	r2, [pc, #136]	; (801759c <MX_ADC2_Init+0xa0>)
 8017512:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8017514:	4b20      	ldr	r3, [pc, #128]	; (8017598 <MX_ADC2_Init+0x9c>)
 8017516:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 801751a:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 801751c:	4b1e      	ldr	r3, [pc, #120]	; (8017598 <MX_ADC2_Init+0x9c>)
 801751e:	2200      	movs	r2, #0
 8017520:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = DISABLE;
 8017522:	4b1d      	ldr	r3, [pc, #116]	; (8017598 <MX_ADC2_Init+0x9c>)
 8017524:	2200      	movs	r2, #0
 8017526:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8017528:	4b1b      	ldr	r3, [pc, #108]	; (8017598 <MX_ADC2_Init+0x9c>)
 801752a:	2200      	movs	r2, #0
 801752c:	761a      	strb	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 801752e:	4b1a      	ldr	r3, [pc, #104]	; (8017598 <MX_ADC2_Init+0x9c>)
 8017530:	2200      	movs	r2, #0
 8017532:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8017536:	4b18      	ldr	r3, [pc, #96]	; (8017598 <MX_ADC2_Init+0x9c>)
 8017538:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801753c:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T1_CC1;
 801753e:	4b16      	ldr	r3, [pc, #88]	; (8017598 <MX_ADC2_Init+0x9c>)
 8017540:	2200      	movs	r2, #0
 8017542:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8017544:	4b14      	ldr	r3, [pc, #80]	; (8017598 <MX_ADC2_Init+0x9c>)
 8017546:	2200      	movs	r2, #0
 8017548:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 1;
 801754a:	4b13      	ldr	r3, [pc, #76]	; (8017598 <MX_ADC2_Init+0x9c>)
 801754c:	2201      	movs	r2, #1
 801754e:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8017550:	4b11      	ldr	r3, [pc, #68]	; (8017598 <MX_ADC2_Init+0x9c>)
 8017552:	2200      	movs	r2, #0
 8017554:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8017558:	4b0f      	ldr	r3, [pc, #60]	; (8017598 <MX_ADC2_Init+0x9c>)
 801755a:	2201      	movs	r2, #1
 801755c:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 801755e:	480e      	ldr	r0, [pc, #56]	; (8017598 <MX_ADC2_Init+0x9c>)
 8017560:	f000 ff6a 	bl	8018438 <HAL_ADC_Init>
 8017564:	4603      	mov	r3, r0
 8017566:	2b00      	cmp	r3, #0
 8017568:	d001      	beq.n	801756e <MX_ADC2_Init+0x72>
  {
    Error_Handler();
 801756a:	f000 fb6f 	bl	8017c4c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_7;
 801756e:	2307      	movs	r3, #7
 8017570:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8017572:	2301      	movs	r3, #1
 8017574:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8017576:	2300      	movs	r3, #0
 8017578:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 801757a:	463b      	mov	r3, r7
 801757c:	4619      	mov	r1, r3
 801757e:	4806      	ldr	r0, [pc, #24]	; (8017598 <MX_ADC2_Init+0x9c>)
 8017580:	f000 ff9e 	bl	80184c0 <HAL_ADC_ConfigChannel>
 8017584:	4603      	mov	r3, r0
 8017586:	2b00      	cmp	r3, #0
 8017588:	d001      	beq.n	801758e <MX_ADC2_Init+0x92>
  {
    Error_Handler();
 801758a:	f000 fb5f 	bl	8017c4c <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 801758e:	bf00      	nop
 8017590:	3710      	adds	r7, #16
 8017592:	46bd      	mov	sp, r7
 8017594:	bd80      	pop	{r7, pc}
 8017596:	bf00      	nop
 8017598:	200068e8 	.word	0x200068e8
 801759c:	40012100 	.word	0x40012100

080175a0 <MX_DAC_Init>:
  * @brief DAC Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC_Init(void)
{
 80175a0:	b580      	push	{r7, lr}
 80175a2:	b082      	sub	sp, #8
 80175a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 80175a6:	463b      	mov	r3, r7
 80175a8:	2200      	movs	r2, #0
 80175aa:	601a      	str	r2, [r3, #0]
 80175ac:	605a      	str	r2, [r3, #4]
  /* USER CODE BEGIN DAC_Init 1 */

  /* USER CODE END DAC_Init 1 */
  /** DAC Initialization
  */
  hdac.Instance = DAC;
 80175ae:	4b19      	ldr	r3, [pc, #100]	; (8017614 <MX_DAC_Init+0x74>)
 80175b0:	4a19      	ldr	r2, [pc, #100]	; (8017618 <MX_DAC_Init+0x78>)
 80175b2:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 80175b4:	4817      	ldr	r0, [pc, #92]	; (8017614 <MX_DAC_Init+0x74>)
 80175b6:	f001 fac2 	bl	8018b3e <HAL_DAC_Init>
 80175ba:	4603      	mov	r3, r0
 80175bc:	2b00      	cmp	r3, #0
 80175be:	d001      	beq.n	80175c4 <MX_DAC_Init+0x24>
  {
    Error_Handler();
 80175c0:	f000 fb44 	bl	8017c4c <Error_Handler>
  }
  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 80175c4:	2300      	movs	r3, #0
 80175c6:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 80175c8:	2300      	movs	r3, #0
 80175ca:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 80175cc:	463b      	mov	r3, r7
 80175ce:	2200      	movs	r2, #0
 80175d0:	4619      	mov	r1, r3
 80175d2:	4810      	ldr	r0, [pc, #64]	; (8017614 <MX_DAC_Init+0x74>)
 80175d4:	f001 fafa 	bl	8018bcc <HAL_DAC_ConfigChannel>
 80175d8:	4603      	mov	r3, r0
 80175da:	2b00      	cmp	r3, #0
 80175dc:	d001      	beq.n	80175e2 <MX_DAC_Init+0x42>
  {
    Error_Handler();
 80175de:	f000 fb35 	bl	8017c4c <Error_Handler>
  }
  /** DAC channel OUT2 config
  */
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_DISABLE;
 80175e2:	2302      	movs	r3, #2
 80175e4:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 80175e6:	463b      	mov	r3, r7
 80175e8:	2210      	movs	r2, #16
 80175ea:	4619      	mov	r1, r3
 80175ec:	4809      	ldr	r0, [pc, #36]	; (8017614 <MX_DAC_Init+0x74>)
 80175ee:	f001 faed 	bl	8018bcc <HAL_DAC_ConfigChannel>
 80175f2:	4603      	mov	r3, r0
 80175f4:	2b00      	cmp	r3, #0
 80175f6:	d001      	beq.n	80175fc <MX_DAC_Init+0x5c>
  {
    Error_Handler();
 80175f8:	f000 fb28 	bl	8017c4c <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */
  HAL_DAC_SetValue(&hdac, DAC_CHANNEL_2, DAC_ALIGN_12B_R, 620);  //(620*4095)/330;//50mv
 80175fc:	f44f 731b 	mov.w	r3, #620	; 0x26c
 8017600:	2200      	movs	r2, #0
 8017602:	2110      	movs	r1, #16
 8017604:	4803      	ldr	r0, [pc, #12]	; (8017614 <MX_DAC_Init+0x74>)
 8017606:	f001 fabc 	bl	8018b82 <HAL_DAC_SetValue>
  /* USER CODE END DAC_Init 2 */

}
 801760a:	bf00      	nop
 801760c:	3708      	adds	r7, #8
 801760e:	46bd      	mov	sp, r7
 8017610:	bd80      	pop	{r7, pc}
 8017612:	bf00      	nop
 8017614:	20006b58 	.word	0x20006b58
 8017618:	40007400 	.word	0x40007400

0801761c <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 801761c:	b580      	push	{r7, lr}
 801761e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8017620:	4b17      	ldr	r3, [pc, #92]	; (8017680 <MX_SPI2_Init+0x64>)
 8017622:	4a18      	ldr	r2, [pc, #96]	; (8017684 <MX_SPI2_Init+0x68>)
 8017624:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8017626:	4b16      	ldr	r3, [pc, #88]	; (8017680 <MX_SPI2_Init+0x64>)
 8017628:	f44f 7282 	mov.w	r2, #260	; 0x104
 801762c:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 801762e:	4b14      	ldr	r3, [pc, #80]	; (8017680 <MX_SPI2_Init+0x64>)
 8017630:	2200      	movs	r2, #0
 8017632:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8017634:	4b12      	ldr	r3, [pc, #72]	; (8017680 <MX_SPI2_Init+0x64>)
 8017636:	2200      	movs	r2, #0
 8017638:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_HIGH;
 801763a:	4b11      	ldr	r3, [pc, #68]	; (8017680 <MX_SPI2_Init+0x64>)
 801763c:	2202      	movs	r2, #2
 801763e:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_2EDGE;
 8017640:	4b0f      	ldr	r3, [pc, #60]	; (8017680 <MX_SPI2_Init+0x64>)
 8017642:	2201      	movs	r2, #1
 8017644:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8017646:	4b0e      	ldr	r3, [pc, #56]	; (8017680 <MX_SPI2_Init+0x64>)
 8017648:	f44f 7200 	mov.w	r2, #512	; 0x200
 801764c:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 801764e:	4b0c      	ldr	r3, [pc, #48]	; (8017680 <MX_SPI2_Init+0x64>)
 8017650:	2200      	movs	r2, #0
 8017652:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_LSB;
 8017654:	4b0a      	ldr	r3, [pc, #40]	; (8017680 <MX_SPI2_Init+0x64>)
 8017656:	2280      	movs	r2, #128	; 0x80
 8017658:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 801765a:	4b09      	ldr	r3, [pc, #36]	; (8017680 <MX_SPI2_Init+0x64>)
 801765c:	2200      	movs	r2, #0
 801765e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8017660:	4b07      	ldr	r3, [pc, #28]	; (8017680 <MX_SPI2_Init+0x64>)
 8017662:	2200      	movs	r2, #0
 8017664:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8017666:	4b06      	ldr	r3, [pc, #24]	; (8017680 <MX_SPI2_Init+0x64>)
 8017668:	220a      	movs	r2, #10
 801766a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 801766c:	4804      	ldr	r0, [pc, #16]	; (8017680 <MX_SPI2_Init+0x64>)
 801766e:	f004 fd19 	bl	801c0a4 <HAL_SPI_Init>
 8017672:	4603      	mov	r3, r0
 8017674:	2b00      	cmp	r3, #0
 8017676:	d001      	beq.n	801767c <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8017678:	f000 fae8 	bl	8017c4c <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 801767c:	bf00      	nop
 801767e:	bd80      	pop	{r7, pc}
 8017680:	20006890 	.word	0x20006890
 8017684:	40003800 	.word	0x40003800

08017688 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8017688:	b580      	push	{r7, lr}
 801768a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 801768c:	4b18      	ldr	r3, [pc, #96]	; (80176f0 <MX_SPI3_Init+0x68>)
 801768e:	4a19      	ldr	r2, [pc, #100]	; (80176f4 <MX_SPI3_Init+0x6c>)
 8017690:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8017692:	4b17      	ldr	r3, [pc, #92]	; (80176f0 <MX_SPI3_Init+0x68>)
 8017694:	f44f 7282 	mov.w	r2, #260	; 0x104
 8017698:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 801769a:	4b15      	ldr	r3, [pc, #84]	; (80176f0 <MX_SPI3_Init+0x68>)
 801769c:	2200      	movs	r2, #0
 801769e:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_16BIT;
 80176a0:	4b13      	ldr	r3, [pc, #76]	; (80176f0 <MX_SPI3_Init+0x68>)
 80176a2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80176a6:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 80176a8:	4b11      	ldr	r3, [pc, #68]	; (80176f0 <MX_SPI3_Init+0x68>)
 80176aa:	2200      	movs	r2, #0
 80176ac:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 80176ae:	4b10      	ldr	r3, [pc, #64]	; (80176f0 <MX_SPI3_Init+0x68>)
 80176b0:	2200      	movs	r2, #0
 80176b2:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 80176b4:	4b0e      	ldr	r3, [pc, #56]	; (80176f0 <MX_SPI3_Init+0x68>)
 80176b6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80176ba:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 80176bc:	4b0c      	ldr	r3, [pc, #48]	; (80176f0 <MX_SPI3_Init+0x68>)
 80176be:	2210      	movs	r2, #16
 80176c0:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_LSB;
 80176c2:	4b0b      	ldr	r3, [pc, #44]	; (80176f0 <MX_SPI3_Init+0x68>)
 80176c4:	2280      	movs	r2, #128	; 0x80
 80176c6:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 80176c8:	4b09      	ldr	r3, [pc, #36]	; (80176f0 <MX_SPI3_Init+0x68>)
 80176ca:	2200      	movs	r2, #0
 80176cc:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80176ce:	4b08      	ldr	r3, [pc, #32]	; (80176f0 <MX_SPI3_Init+0x68>)
 80176d0:	2200      	movs	r2, #0
 80176d2:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 10;
 80176d4:	4b06      	ldr	r3, [pc, #24]	; (80176f0 <MX_SPI3_Init+0x68>)
 80176d6:	220a      	movs	r2, #10
 80176d8:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 80176da:	4805      	ldr	r0, [pc, #20]	; (80176f0 <MX_SPI3_Init+0x68>)
 80176dc:	f004 fce2 	bl	801c0a4 <HAL_SPI_Init>
 80176e0:	4603      	mov	r3, r0
 80176e2:	2b00      	cmp	r3, #0
 80176e4:	d001      	beq.n	80176ea <MX_SPI3_Init+0x62>
  {
    Error_Handler();
 80176e6:	f000 fab1 	bl	8017c4c <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 80176ea:	bf00      	nop
 80176ec:	bd80      	pop	{r7, pc}
 80176ee:	bf00      	nop
 80176f0:	20006a20 	.word	0x20006a20
 80176f4:	40003c00 	.word	0x40003c00

080176f8 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80176f8:	b580      	push	{r7, lr}
 80176fa:	b086      	sub	sp, #24
 80176fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80176fe:	f107 0308 	add.w	r3, r7, #8
 8017702:	2200      	movs	r2, #0
 8017704:	601a      	str	r2, [r3, #0]
 8017706:	605a      	str	r2, [r3, #4]
 8017708:	609a      	str	r2, [r3, #8]
 801770a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 801770c:	463b      	mov	r3, r7
 801770e:	2200      	movs	r2, #0
 8017710:	601a      	str	r2, [r3, #0]
 8017712:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */
  octim1.Pulse = 500;
 8017714:	4b30      	ldr	r3, [pc, #192]	; (80177d8 <MX_TIM1_Init+0xe0>)
 8017716:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 801771a:	605a      	str	r2, [r3, #4]
  octim1.OCMode = TIM_OCMODE_PWM2;
 801771c:	4b2e      	ldr	r3, [pc, #184]	; (80177d8 <MX_TIM1_Init+0xe0>)
 801771e:	2270      	movs	r2, #112	; 0x70
 8017720:	601a      	str	r2, [r3, #0]
  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8017722:	4b2e      	ldr	r3, [pc, #184]	; (80177dc <MX_TIM1_Init+0xe4>)
 8017724:	4a2e      	ldr	r2, [pc, #184]	; (80177e0 <MX_TIM1_Init+0xe8>)
 8017726:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 89;
 8017728:	4b2c      	ldr	r3, [pc, #176]	; (80177dc <MX_TIM1_Init+0xe4>)
 801772a:	2259      	movs	r2, #89	; 0x59
 801772c:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_DOWN;
 801772e:	4b2b      	ldr	r3, [pc, #172]	; (80177dc <MX_TIM1_Init+0xe4>)
 8017730:	2210      	movs	r2, #16
 8017732:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 999;
 8017734:	4b29      	ldr	r3, [pc, #164]	; (80177dc <MX_TIM1_Init+0xe4>)
 8017736:	f240 32e7 	movw	r2, #999	; 0x3e7
 801773a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 801773c:	4b27      	ldr	r3, [pc, #156]	; (80177dc <MX_TIM1_Init+0xe4>)
 801773e:	2200      	movs	r2, #0
 8017740:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8017742:	4b26      	ldr	r3, [pc, #152]	; (80177dc <MX_TIM1_Init+0xe4>)
 8017744:	2200      	movs	r2, #0
 8017746:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8017748:	4b24      	ldr	r3, [pc, #144]	; (80177dc <MX_TIM1_Init+0xe4>)
 801774a:	2280      	movs	r2, #128	; 0x80
 801774c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 801774e:	4823      	ldr	r0, [pc, #140]	; (80177dc <MX_TIM1_Init+0xe4>)
 8017750:	f005 fb7c 	bl	801ce4c <HAL_TIM_Base_Init>
 8017754:	4603      	mov	r3, r0
 8017756:	2b00      	cmp	r3, #0
 8017758:	d001      	beq.n	801775e <MX_TIM1_Init+0x66>
  {
    Error_Handler();
 801775a:	f000 fa77 	bl	8017c4c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 801775e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8017762:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8017764:	f107 0308 	add.w	r3, r7, #8
 8017768:	4619      	mov	r1, r3
 801776a:	481c      	ldr	r0, [pc, #112]	; (80177dc <MX_TIM1_Init+0xe4>)
 801776c:	f005 fd92 	bl	801d294 <HAL_TIM_ConfigClockSource>
 8017770:	4603      	mov	r3, r0
 8017772:	2b00      	cmp	r3, #0
 8017774:	d001      	beq.n	801777a <MX_TIM1_Init+0x82>
  {
    Error_Handler();
 8017776:	f000 fa69 	bl	8017c4c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 801777a:	2300      	movs	r3, #0
 801777c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 801777e:	2300      	movs	r3, #0
 8017780:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8017782:	463b      	mov	r3, r7
 8017784:	4619      	mov	r1, r3
 8017786:	4815      	ldr	r0, [pc, #84]	; (80177dc <MX_TIM1_Init+0xe4>)
 8017788:	f006 f95e 	bl	801da48 <HAL_TIMEx_MasterConfigSynchronization>
 801778c:	4603      	mov	r3, r0
 801778e:	2b00      	cmp	r3, #0
 8017790:	d001      	beq.n	8017796 <MX_TIM1_Init+0x9e>
  {
    Error_Handler();
 8017792:	f000 fa5b 	bl	8017c4c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */
  HAL_TIM_OC_ConfigChannel(&htim1, &octim1, 1 );
 8017796:	2201      	movs	r2, #1
 8017798:	490f      	ldr	r1, [pc, #60]	; (80177d8 <MX_TIM1_Init+0xe0>)
 801779a:	4810      	ldr	r0, [pc, #64]	; (80177dc <MX_TIM1_Init+0xe4>)
 801779c:	f005 fd1e 	bl	801d1dc <HAL_TIM_OC_ConfigChannel>
  __HAL_TIM_URS_ENABLE(&htim1);
 80177a0:	4b0e      	ldr	r3, [pc, #56]	; (80177dc <MX_TIM1_Init+0xe4>)
 80177a2:	681b      	ldr	r3, [r3, #0]
 80177a4:	681a      	ldr	r2, [r3, #0]
 80177a6:	4b0d      	ldr	r3, [pc, #52]	; (80177dc <MX_TIM1_Init+0xe4>)
 80177a8:	681b      	ldr	r3, [r3, #0]
 80177aa:	f042 0204 	orr.w	r2, r2, #4
 80177ae:	601a      	str	r2, [r3, #0]
  __HAL_TIM_ENABLE_DMA(&htim1, TIM_DMA_CC1 | TIM_DMA_TRIGGER);
 80177b0:	4b0a      	ldr	r3, [pc, #40]	; (80177dc <MX_TIM1_Init+0xe4>)
 80177b2:	681b      	ldr	r3, [r3, #0]
 80177b4:	68da      	ldr	r2, [r3, #12]
 80177b6:	4b09      	ldr	r3, [pc, #36]	; (80177dc <MX_TIM1_Init+0xe4>)
 80177b8:	681b      	ldr	r3, [r3, #0]
 80177ba:	f442 4284 	orr.w	r2, r2, #16896	; 0x4200
 80177be:	60da      	str	r2, [r3, #12]
  __HAL_TIM_ENABLE(&htim1);
 80177c0:	4b06      	ldr	r3, [pc, #24]	; (80177dc <MX_TIM1_Init+0xe4>)
 80177c2:	681b      	ldr	r3, [r3, #0]
 80177c4:	681a      	ldr	r2, [r3, #0]
 80177c6:	4b05      	ldr	r3, [pc, #20]	; (80177dc <MX_TIM1_Init+0xe4>)
 80177c8:	681b      	ldr	r3, [r3, #0]
 80177ca:	f042 0201 	orr.w	r2, r2, #1
 80177ce:	601a      	str	r2, [r3, #0]
  /* USER CODE END TIM1_Init 2 */

}
 80177d0:	bf00      	nop
 80177d2:	3718      	adds	r7, #24
 80177d4:	46bd      	mov	sp, r7
 80177d6:	bd80      	pop	{r7, pc}
 80177d8:	20006bcc 	.word	0x20006bcc
 80177dc:	20006be8 	.word	0x20006be8
 80177e0:	40010000 	.word	0x40010000

080177e4 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80177e4:	b580      	push	{r7, lr}
 80177e6:	b086      	sub	sp, #24
 80177e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80177ea:	f107 0308 	add.w	r3, r7, #8
 80177ee:	2200      	movs	r2, #0
 80177f0:	601a      	str	r2, [r3, #0]
 80177f2:	605a      	str	r2, [r3, #4]
 80177f4:	609a      	str	r2, [r3, #8]
 80177f6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80177f8:	463b      	mov	r3, r7
 80177fa:	2200      	movs	r2, #0
 80177fc:	601a      	str	r2, [r3, #0]
 80177fe:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */
  octim3.Pulse = 3750;
 8017800:	4b25      	ldr	r3, [pc, #148]	; (8017898 <MX_TIM3_Init+0xb4>)
 8017802:	f640 62a6 	movw	r2, #3750	; 0xea6
 8017806:	605a      	str	r2, [r3, #4]
  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8017808:	4b24      	ldr	r3, [pc, #144]	; (801789c <MX_TIM3_Init+0xb8>)
 801780a:	4a25      	ldr	r2, [pc, #148]	; (80178a0 <MX_TIM3_Init+0xbc>)
 801780c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 11;
 801780e:	4b23      	ldr	r3, [pc, #140]	; (801789c <MX_TIM3_Init+0xb8>)
 8017810:	220b      	movs	r2, #11
 8017812:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8017814:	4b21      	ldr	r3, [pc, #132]	; (801789c <MX_TIM3_Init+0xb8>)
 8017816:	2200      	movs	r2, #0
 8017818:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 7499;
 801781a:	4b20      	ldr	r3, [pc, #128]	; (801789c <MX_TIM3_Init+0xb8>)
 801781c:	f641 524b 	movw	r2, #7499	; 0x1d4b
 8017820:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8017822:	4b1e      	ldr	r3, [pc, #120]	; (801789c <MX_TIM3_Init+0xb8>)
 8017824:	2200      	movs	r2, #0
 8017826:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8017828:	4b1c      	ldr	r3, [pc, #112]	; (801789c <MX_TIM3_Init+0xb8>)
 801782a:	2280      	movs	r2, #128	; 0x80
 801782c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 801782e:	481b      	ldr	r0, [pc, #108]	; (801789c <MX_TIM3_Init+0xb8>)
 8017830:	f005 fb0c 	bl	801ce4c <HAL_TIM_Base_Init>
 8017834:	4603      	mov	r3, r0
 8017836:	2b00      	cmp	r3, #0
 8017838:	d001      	beq.n	801783e <MX_TIM3_Init+0x5a>
  {
    Error_Handler();
 801783a:	f000 fa07 	bl	8017c4c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 801783e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8017842:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8017844:	f107 0308 	add.w	r3, r7, #8
 8017848:	4619      	mov	r1, r3
 801784a:	4814      	ldr	r0, [pc, #80]	; (801789c <MX_TIM3_Init+0xb8>)
 801784c:	f005 fd22 	bl	801d294 <HAL_TIM_ConfigClockSource>
 8017850:	4603      	mov	r3, r0
 8017852:	2b00      	cmp	r3, #0
 8017854:	d001      	beq.n	801785a <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 8017856:	f000 f9f9 	bl	8017c4c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 801785a:	2320      	movs	r3, #32
 801785c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 801785e:	2300      	movs	r3, #0
 8017860:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8017862:	463b      	mov	r3, r7
 8017864:	4619      	mov	r1, r3
 8017866:	480d      	ldr	r0, [pc, #52]	; (801789c <MX_TIM3_Init+0xb8>)
 8017868:	f006 f8ee 	bl	801da48 <HAL_TIMEx_MasterConfigSynchronization>
 801786c:	4603      	mov	r3, r0
 801786e:	2b00      	cmp	r3, #0
 8017870:	d001      	beq.n	8017876 <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8017872:	f000 f9eb 	bl	8017c4c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */
  HAL_TIM_OC_ConfigChannel(&htim3, &octim3, 1 );
 8017876:	2201      	movs	r2, #1
 8017878:	4907      	ldr	r1, [pc, #28]	; (8017898 <MX_TIM3_Init+0xb4>)
 801787a:	4808      	ldr	r0, [pc, #32]	; (801789c <MX_TIM3_Init+0xb8>)
 801787c:	f005 fcae 	bl	801d1dc <HAL_TIM_OC_ConfigChannel>
  __HAL_TIM_ENABLE(&htim3);
 8017880:	4b06      	ldr	r3, [pc, #24]	; (801789c <MX_TIM3_Init+0xb8>)
 8017882:	681b      	ldr	r3, [r3, #0]
 8017884:	681a      	ldr	r2, [r3, #0]
 8017886:	4b05      	ldr	r3, [pc, #20]	; (801789c <MX_TIM3_Init+0xb8>)
 8017888:	681b      	ldr	r3, [r3, #0]
 801788a:	f042 0201 	orr.w	r2, r2, #1
 801788e:	601a      	str	r2, [r3, #0]

  /* USER CODE END TIM3_Init 2 */

}
 8017890:	bf00      	nop
 8017892:	3718      	adds	r7, #24
 8017894:	46bd      	mov	sp, r7
 8017896:	bd80      	pop	{r7, pc}
 8017898:	20006b20 	.word	0x20006b20
 801789c:	200069d8 	.word	0x200069d8
 80178a0:	40000400 	.word	0x40000400

080178a4 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 80178a4:	b580      	push	{r7, lr}
 80178a6:	b086      	sub	sp, #24
 80178a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80178aa:	f107 0308 	add.w	r3, r7, #8
 80178ae:	2200      	movs	r2, #0
 80178b0:	601a      	str	r2, [r3, #0]
 80178b2:	605a      	str	r2, [r3, #4]
 80178b4:	609a      	str	r2, [r3, #8]
 80178b6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80178b8:	463b      	mov	r3, r7
 80178ba:	2200      	movs	r2, #0
 80178bc:	601a      	str	r2, [r3, #0]
 80178be:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */
  octim5.Pulse = (FARR[List[FREQ_OUT].Val]+1)/2;
 80178c0:	4b3a      	ldr	r3, [pc, #232]	; (80179ac <MX_TIM5_Init+0x108>)
 80178c2:	f9b3 312c 	ldrsh.w	r3, [r3, #300]	; 0x12c
 80178c6:	461a      	mov	r2, r3
 80178c8:	4b39      	ldr	r3, [pc, #228]	; (80179b0 <MX_TIM5_Init+0x10c>)
 80178ca:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 80178ce:	3301      	adds	r3, #1
 80178d0:	0fda      	lsrs	r2, r3, #31
 80178d2:	4413      	add	r3, r2
 80178d4:	105b      	asrs	r3, r3, #1
 80178d6:	461a      	mov	r2, r3
 80178d8:	4b36      	ldr	r3, [pc, #216]	; (80179b4 <MX_TIM5_Init+0x110>)
 80178da:	605a      	str	r2, [r3, #4]
  octim5.OCMode = TIM_OCMODE_PWM2;
 80178dc:	4b35      	ldr	r3, [pc, #212]	; (80179b4 <MX_TIM5_Init+0x110>)
 80178de:	2270      	movs	r2, #112	; 0x70
 80178e0:	601a      	str	r2, [r3, #0]
  octim5.OCFastMode = TIM_OCFAST_ENABLE;
 80178e2:	4b34      	ldr	r3, [pc, #208]	; (80179b4 <MX_TIM5_Init+0x110>)
 80178e4:	2204      	movs	r2, #4
 80178e6:	611a      	str	r2, [r3, #16]
  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 80178e8:	4b33      	ldr	r3, [pc, #204]	; (80179b8 <MX_TIM5_Init+0x114>)
 80178ea:	4a34      	ldr	r2, [pc, #208]	; (80179bc <MX_TIM5_Init+0x118>)
 80178ec:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 9;
 80178ee:	4b32      	ldr	r3, [pc, #200]	; (80179b8 <MX_TIM5_Init+0x114>)
 80178f0:	2209      	movs	r2, #9
 80178f2:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 80178f4:	4b30      	ldr	r3, [pc, #192]	; (80179b8 <MX_TIM5_Init+0x114>)
 80178f6:	2200      	movs	r2, #0
 80178f8:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 18000;
 80178fa:	4b2f      	ldr	r3, [pc, #188]	; (80179b8 <MX_TIM5_Init+0x114>)
 80178fc:	f244 6250 	movw	r2, #18000	; 0x4650
 8017900:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8017902:	4b2d      	ldr	r3, [pc, #180]	; (80179b8 <MX_TIM5_Init+0x114>)
 8017904:	2200      	movs	r2, #0
 8017906:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8017908:	4b2b      	ldr	r3, [pc, #172]	; (80179b8 <MX_TIM5_Init+0x114>)
 801790a:	2280      	movs	r2, #128	; 0x80
 801790c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 801790e:	482a      	ldr	r0, [pc, #168]	; (80179b8 <MX_TIM5_Init+0x114>)
 8017910:	f005 fa9c 	bl	801ce4c <HAL_TIM_Base_Init>
 8017914:	4603      	mov	r3, r0
 8017916:	2b00      	cmp	r3, #0
 8017918:	d001      	beq.n	801791e <MX_TIM5_Init+0x7a>
  {
    Error_Handler();
 801791a:	f000 f997 	bl	8017c4c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 801791e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8017922:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8017924:	f107 0308 	add.w	r3, r7, #8
 8017928:	4619      	mov	r1, r3
 801792a:	4823      	ldr	r0, [pc, #140]	; (80179b8 <MX_TIM5_Init+0x114>)
 801792c:	f005 fcb2 	bl	801d294 <HAL_TIM_ConfigClockSource>
 8017930:	4603      	mov	r3, r0
 8017932:	2b00      	cmp	r3, #0
 8017934:	d001      	beq.n	801793a <MX_TIM5_Init+0x96>
  {
    Error_Handler();
 8017936:	f000 f989 	bl	8017c4c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 801793a:	2300      	movs	r3, #0
 801793c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 801793e:	2300      	movs	r3, #0
 8017940:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8017942:	463b      	mov	r3, r7
 8017944:	4619      	mov	r1, r3
 8017946:	481c      	ldr	r0, [pc, #112]	; (80179b8 <MX_TIM5_Init+0x114>)
 8017948:	f006 f87e 	bl	801da48 <HAL_TIMEx_MasterConfigSynchronization>
 801794c:	4603      	mov	r3, r0
 801794e:	2b00      	cmp	r3, #0
 8017950:	d001      	beq.n	8017956 <MX_TIM5_Init+0xb2>
  {
    Error_Handler();
 8017952:	f000 f97b 	bl	8017c4c <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */
  htim5.Init.Period = FARR[List[FREQ_OUT].Val];
 8017956:	4b15      	ldr	r3, [pc, #84]	; (80179ac <MX_TIM5_Init+0x108>)
 8017958:	f9b3 312c 	ldrsh.w	r3, [r3, #300]	; 0x12c
 801795c:	461a      	mov	r2, r3
 801795e:	4b14      	ldr	r3, [pc, #80]	; (80179b0 <MX_TIM5_Init+0x10c>)
 8017960:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8017964:	461a      	mov	r2, r3
 8017966:	4b14      	ldr	r3, [pc, #80]	; (80179b8 <MX_TIM5_Init+0x114>)
 8017968:	60da      	str	r2, [r3, #12]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 801796a:	4813      	ldr	r0, [pc, #76]	; (80179b8 <MX_TIM5_Init+0x114>)
 801796c:	f005 fa6e 	bl	801ce4c <HAL_TIM_Base_Init>
 8017970:	4603      	mov	r3, r0
 8017972:	2b00      	cmp	r3, #0
 8017974:	d001      	beq.n	801797a <MX_TIM5_Init+0xd6>
  {
    Error_Handler();
 8017976:	f000 f969 	bl	8017c4c <Error_Handler>
  }
  HAL_TIM_OC_ConfigChannel(&htim5, &octim5, 3 );
 801797a:	2203      	movs	r2, #3
 801797c:	490d      	ldr	r1, [pc, #52]	; (80179b4 <MX_TIM5_Init+0x110>)
 801797e:	480e      	ldr	r0, [pc, #56]	; (80179b8 <MX_TIM5_Init+0x114>)
 8017980:	f005 fc2c 	bl	801d1dc <HAL_TIM_OC_ConfigChannel>
  __HAL_TIM_URS_ENABLE(&htim5);
 8017984:	4b0c      	ldr	r3, [pc, #48]	; (80179b8 <MX_TIM5_Init+0x114>)
 8017986:	681b      	ldr	r3, [r3, #0]
 8017988:	681a      	ldr	r2, [r3, #0]
 801798a:	4b0b      	ldr	r3, [pc, #44]	; (80179b8 <MX_TIM5_Init+0x114>)
 801798c:	681b      	ldr	r3, [r3, #0]
 801798e:	f042 0204 	orr.w	r2, r2, #4
 8017992:	601a      	str	r2, [r3, #0]
  __HAL_TIM_ENABLE(&htim5);
 8017994:	4b08      	ldr	r3, [pc, #32]	; (80179b8 <MX_TIM5_Init+0x114>)
 8017996:	681b      	ldr	r3, [r3, #0]
 8017998:	681a      	ldr	r2, [r3, #0]
 801799a:	4b07      	ldr	r3, [pc, #28]	; (80179b8 <MX_TIM5_Init+0x114>)
 801799c:	681b      	ldr	r3, [r3, #0]
 801799e:	f042 0201 	orr.w	r2, r2, #1
 80179a2:	601a      	str	r2, [r3, #0]
  /* USER CODE END TIM5_Init 2 */

}
 80179a4:	bf00      	nop
 80179a6:	3718      	adds	r7, #24
 80179a8:	46bd      	mov	sp, r7
 80179aa:	bd80      	pop	{r7, pc}
 80179ac:	20000298 	.word	0x20000298
 80179b0:	08000ae8 	.word	0x08000ae8
 80179b4:	20006b3c 	.word	0x20006b3c
 80179b8:	20006990 	.word	0x20006990
 80179bc:	40000c00 	.word	0x40000c00

080179c0 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 80179c0:	b580      	push	{r7, lr}
 80179c2:	b082      	sub	sp, #8
 80179c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */
  // aka tim_da
  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80179c6:	463b      	mov	r3, r7
 80179c8:	2200      	movs	r2, #0
 80179ca:	601a      	str	r2, [r3, #0]
 80179cc:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 80179ce:	4b1d      	ldr	r3, [pc, #116]	; (8017a44 <MX_TIM7_Init+0x84>)
 80179d0:	4a1d      	ldr	r2, [pc, #116]	; (8017a48 <MX_TIM7_Init+0x88>)
 80179d2:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 2;
 80179d4:	4b1b      	ldr	r3, [pc, #108]	; (8017a44 <MX_TIM7_Init+0x84>)
 80179d6:	2202      	movs	r2, #2
 80179d8:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 80179da:	4b1a      	ldr	r3, [pc, #104]	; (8017a44 <MX_TIM7_Init+0x84>)
 80179dc:	2200      	movs	r2, #0
 80179de:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 999;
 80179e0:	4b18      	ldr	r3, [pc, #96]	; (8017a44 <MX_TIM7_Init+0x84>)
 80179e2:	f240 32e7 	movw	r2, #999	; 0x3e7
 80179e6:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80179e8:	4b16      	ldr	r3, [pc, #88]	; (8017a44 <MX_TIM7_Init+0x84>)
 80179ea:	2200      	movs	r2, #0
 80179ec:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 80179ee:	4815      	ldr	r0, [pc, #84]	; (8017a44 <MX_TIM7_Init+0x84>)
 80179f0:	f005 fa2c 	bl	801ce4c <HAL_TIM_Base_Init>
 80179f4:	4603      	mov	r3, r0
 80179f6:	2b00      	cmp	r3, #0
 80179f8:	d001      	beq.n	80179fe <MX_TIM7_Init+0x3e>
  {
    Error_Handler();
 80179fa:	f000 f927 	bl	8017c4c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80179fe:	2300      	movs	r3, #0
 8017a00:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8017a02:	2300      	movs	r3, #0
 8017a04:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8017a06:	463b      	mov	r3, r7
 8017a08:	4619      	mov	r1, r3
 8017a0a:	480e      	ldr	r0, [pc, #56]	; (8017a44 <MX_TIM7_Init+0x84>)
 8017a0c:	f006 f81c 	bl	801da48 <HAL_TIMEx_MasterConfigSynchronization>
 8017a10:	4603      	mov	r3, r0
 8017a12:	2b00      	cmp	r3, #0
 8017a14:	d001      	beq.n	8017a1a <MX_TIM7_Init+0x5a>
  {
    Error_Handler();
 8017a16:	f000 f919 	bl	8017c4c <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */
  __HAL_TIM_ENABLE_DMA(&htim7,TIM_DMA_UPDATE);
 8017a1a:	4b0a      	ldr	r3, [pc, #40]	; (8017a44 <MX_TIM7_Init+0x84>)
 8017a1c:	681b      	ldr	r3, [r3, #0]
 8017a1e:	68da      	ldr	r2, [r3, #12]
 8017a20:	4b08      	ldr	r3, [pc, #32]	; (8017a44 <MX_TIM7_Init+0x84>)
 8017a22:	681b      	ldr	r3, [r3, #0]
 8017a24:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8017a28:	60da      	str	r2, [r3, #12]
  __HAL_TIM_ENABLE(&htim7);
 8017a2a:	4b06      	ldr	r3, [pc, #24]	; (8017a44 <MX_TIM7_Init+0x84>)
 8017a2c:	681b      	ldr	r3, [r3, #0]
 8017a2e:	681a      	ldr	r2, [r3, #0]
 8017a30:	4b04      	ldr	r3, [pc, #16]	; (8017a44 <MX_TIM7_Init+0x84>)
 8017a32:	681b      	ldr	r3, [r3, #0]
 8017a34:	f042 0201 	orr.w	r2, r2, #1
 8017a38:	601a      	str	r2, [r3, #0]
  /* USER CODE END TIM7_Init 2 */

}
 8017a3a:	bf00      	nop
 8017a3c:	3708      	adds	r7, #8
 8017a3e:	46bd      	mov	sp, r7
 8017a40:	bd80      	pop	{r7, pc}
 8017a42:	bf00      	nop
 8017a44:	20006c30 	.word	0x20006c30
 8017a48:	40001400 	.word	0x40001400

08017a4c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8017a4c:	b580      	push	{r7, lr}
 8017a4e:	b082      	sub	sp, #8
 8017a50:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8017a52:	2300      	movs	r3, #0
 8017a54:	607b      	str	r3, [r7, #4]
 8017a56:	4b1b      	ldr	r3, [pc, #108]	; (8017ac4 <MX_DMA_Init+0x78>)
 8017a58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8017a5a:	4a1a      	ldr	r2, [pc, #104]	; (8017ac4 <MX_DMA_Init+0x78>)
 8017a5c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8017a60:	6313      	str	r3, [r2, #48]	; 0x30
 8017a62:	4b18      	ldr	r3, [pc, #96]	; (8017ac4 <MX_DMA_Init+0x78>)
 8017a64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8017a66:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8017a6a:	607b      	str	r3, [r7, #4]
 8017a6c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8017a6e:	2300      	movs	r3, #0
 8017a70:	603b      	str	r3, [r7, #0]
 8017a72:	4b14      	ldr	r3, [pc, #80]	; (8017ac4 <MX_DMA_Init+0x78>)
 8017a74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8017a76:	4a13      	ldr	r2, [pc, #76]	; (8017ac4 <MX_DMA_Init+0x78>)
 8017a78:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8017a7c:	6313      	str	r3, [r2, #48]	; 0x30
 8017a7e:	4b11      	ldr	r3, [pc, #68]	; (8017ac4 <MX_DMA_Init+0x78>)
 8017a80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8017a82:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8017a86:	603b      	str	r3, [r7, #0]
 8017a88:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 0, 0);
 8017a8a:	2200      	movs	r2, #0
 8017a8c:	2100      	movs	r1, #0
 8017a8e:	200d      	movs	r0, #13
 8017a90:	f001 f81f 	bl	8018ad2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 8017a94:	200d      	movs	r0, #13
 8017a96:	f001 f838 	bl	8018b0a <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8017a9a:	2200      	movs	r2, #0
 8017a9c:	2100      	movs	r1, #0
 8017a9e:	2010      	movs	r0, #16
 8017aa0:	f001 f817 	bl	8018ad2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8017aa4:	2010      	movs	r0, #16
 8017aa6:	f001 f830 	bl	8018b0a <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8017aaa:	2200      	movs	r2, #0
 8017aac:	2100      	movs	r1, #0
 8017aae:	2038      	movs	r0, #56	; 0x38
 8017ab0:	f001 f80f 	bl	8018ad2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8017ab4:	2038      	movs	r0, #56	; 0x38
 8017ab6:	f001 f828 	bl	8018b0a <HAL_NVIC_EnableIRQ>

}
 8017aba:	bf00      	nop
 8017abc:	3708      	adds	r7, #8
 8017abe:	46bd      	mov	sp, r7
 8017ac0:	bd80      	pop	{r7, pc}
 8017ac2:	bf00      	nop
 8017ac4:	40023800 	.word	0x40023800

08017ac8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8017ac8:	b580      	push	{r7, lr}
 8017aca:	b08a      	sub	sp, #40	; 0x28
 8017acc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8017ace:	f107 0314 	add.w	r3, r7, #20
 8017ad2:	2200      	movs	r2, #0
 8017ad4:	601a      	str	r2, [r3, #0]
 8017ad6:	605a      	str	r2, [r3, #4]
 8017ad8:	609a      	str	r2, [r3, #8]
 8017ada:	60da      	str	r2, [r3, #12]
 8017adc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8017ade:	2300      	movs	r3, #0
 8017ae0:	613b      	str	r3, [r7, #16]
 8017ae2:	4b4e      	ldr	r3, [pc, #312]	; (8017c1c <MX_GPIO_Init+0x154>)
 8017ae4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8017ae6:	4a4d      	ldr	r2, [pc, #308]	; (8017c1c <MX_GPIO_Init+0x154>)
 8017ae8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8017aec:	6313      	str	r3, [r2, #48]	; 0x30
 8017aee:	4b4b      	ldr	r3, [pc, #300]	; (8017c1c <MX_GPIO_Init+0x154>)
 8017af0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8017af2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8017af6:	613b      	str	r3, [r7, #16]
 8017af8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8017afa:	2300      	movs	r3, #0
 8017afc:	60fb      	str	r3, [r7, #12]
 8017afe:	4b47      	ldr	r3, [pc, #284]	; (8017c1c <MX_GPIO_Init+0x154>)
 8017b00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8017b02:	4a46      	ldr	r2, [pc, #280]	; (8017c1c <MX_GPIO_Init+0x154>)
 8017b04:	f043 0301 	orr.w	r3, r3, #1
 8017b08:	6313      	str	r3, [r2, #48]	; 0x30
 8017b0a:	4b44      	ldr	r3, [pc, #272]	; (8017c1c <MX_GPIO_Init+0x154>)
 8017b0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8017b0e:	f003 0301 	and.w	r3, r3, #1
 8017b12:	60fb      	str	r3, [r7, #12]
 8017b14:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8017b16:	2300      	movs	r3, #0
 8017b18:	60bb      	str	r3, [r7, #8]
 8017b1a:	4b40      	ldr	r3, [pc, #256]	; (8017c1c <MX_GPIO_Init+0x154>)
 8017b1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8017b1e:	4a3f      	ldr	r2, [pc, #252]	; (8017c1c <MX_GPIO_Init+0x154>)
 8017b20:	f043 0304 	orr.w	r3, r3, #4
 8017b24:	6313      	str	r3, [r2, #48]	; 0x30
 8017b26:	4b3d      	ldr	r3, [pc, #244]	; (8017c1c <MX_GPIO_Init+0x154>)
 8017b28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8017b2a:	f003 0304 	and.w	r3, r3, #4
 8017b2e:	60bb      	str	r3, [r7, #8]
 8017b30:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8017b32:	2300      	movs	r3, #0
 8017b34:	607b      	str	r3, [r7, #4]
 8017b36:	4b39      	ldr	r3, [pc, #228]	; (8017c1c <MX_GPIO_Init+0x154>)
 8017b38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8017b3a:	4a38      	ldr	r2, [pc, #224]	; (8017c1c <MX_GPIO_Init+0x154>)
 8017b3c:	f043 0302 	orr.w	r3, r3, #2
 8017b40:	6313      	str	r3, [r2, #48]	; 0x30
 8017b42:	4b36      	ldr	r3, [pc, #216]	; (8017c1c <MX_GPIO_Init+0x154>)
 8017b44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8017b46:	f003 0302 	and.w	r3, r3, #2
 8017b4a:	607b      	str	r3, [r7, #4]
 8017b4c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Fo2_GPIO_Port, Fo2_Pin, GPIO_PIN_RESET);
 8017b4e:	2200      	movs	r2, #0
 8017b50:	2104      	movs	r1, #4
 8017b52:	4833      	ldr	r0, [pc, #204]	; (8017c20 <MX_GPIO_Init+0x158>)
 8017b54:	f002 f82a 	bl	8019bac <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, Az_Pin|Ay_Pin|LcdRs_Pin, GPIO_PIN_RESET);
 8017b58:	2200      	movs	r2, #0
 8017b5a:	f44f 6103 	mov.w	r1, #2096	; 0x830
 8017b5e:	4831      	ldr	r0, [pc, #196]	; (8017c24 <MX_GPIO_Init+0x15c>)
 8017b60:	f002 f824 	bl	8019bac <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, Ax_Pin|Dres_Pin, GPIO_PIN_RESET);
 8017b64:	2200      	movs	r2, #0
 8017b66:	f240 2101 	movw	r1, #513	; 0x201
 8017b6a:	482f      	ldr	r0, [pc, #188]	; (8017c28 <MX_GPIO_Init+0x160>)
 8017b6c:	f002 f81e 	bl	8019bac <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SS_Pin|TpCs_Pin, GPIO_PIN_SET);
 8017b70:	2201      	movs	r2, #1
 8017b72:	f44f 5182 	mov.w	r1, #4160	; 0x1040
 8017b76:	482c      	ldr	r0, [pc, #176]	; (8017c28 <MX_GPIO_Init+0x160>)
 8017b78:	f002 f818 	bl	8019bac <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LcdCs_GPIO_Port, LcdCs_Pin, GPIO_PIN_SET);
 8017b7c:	2201      	movs	r2, #1
 8017b7e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8017b82:	4828      	ldr	r0, [pc, #160]	; (8017c24 <MX_GPIO_Init+0x15c>)
 8017b84:	f002 f812 	bl	8019bac <HAL_GPIO_WritePin>

  /*Configure GPIO pin : Fo2_Pin */
  GPIO_InitStruct.Pin = Fo2_Pin;
 8017b88:	2304      	movs	r3, #4
 8017b8a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8017b8c:	2301      	movs	r3, #1
 8017b8e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8017b90:	2300      	movs	r3, #0
 8017b92:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8017b94:	2300      	movs	r3, #0
 8017b96:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(Fo2_GPIO_Port, &GPIO_InitStruct);
 8017b98:	f107 0314 	add.w	r3, r7, #20
 8017b9c:	4619      	mov	r1, r3
 8017b9e:	4820      	ldr	r0, [pc, #128]	; (8017c20 <MX_GPIO_Init+0x158>)
 8017ba0:	f001 fe58 	bl	8019854 <HAL_GPIO_Init>

  /*Configure GPIO pins : Az_Pin Ay_Pin LcdRs_Pin LcdCs_Pin */
  GPIO_InitStruct.Pin = Az_Pin|Ay_Pin|LcdRs_Pin|LcdCs_Pin;
 8017ba4:	f641 0330 	movw	r3, #6192	; 0x1830
 8017ba8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8017baa:	2301      	movs	r3, #1
 8017bac:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8017bae:	2300      	movs	r3, #0
 8017bb0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8017bb2:	2300      	movs	r3, #0
 8017bb4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8017bb6:	f107 0314 	add.w	r3, r7, #20
 8017bba:	4619      	mov	r1, r3
 8017bbc:	4819      	ldr	r0, [pc, #100]	; (8017c24 <MX_GPIO_Init+0x15c>)
 8017bbe:	f001 fe49 	bl	8019854 <HAL_GPIO_Init>

  /*Configure GPIO pins : Ax_Pin SS_Pin TpCs_Pin Dres_Pin */
  GPIO_InitStruct.Pin = Ax_Pin|SS_Pin|TpCs_Pin|Dres_Pin;
 8017bc2:	f241 2341 	movw	r3, #4673	; 0x1241
 8017bc6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8017bc8:	2301      	movs	r3, #1
 8017bca:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8017bcc:	2300      	movs	r3, #0
 8017bce:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8017bd0:	2300      	movs	r3, #0
 8017bd2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8017bd4:	f107 0314 	add.w	r3, r7, #20
 8017bd8:	4619      	mov	r1, r3
 8017bda:	4813      	ldr	r0, [pc, #76]	; (8017c28 <MX_GPIO_Init+0x160>)
 8017bdc:	f001 fe3a 	bl	8019854 <HAL_GPIO_Init>

  /*Configure GPIO pin : Boot1_Pin */
  GPIO_InitStruct.Pin = Boot1_Pin;
 8017be0:	2304      	movs	r3, #4
 8017be2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8017be4:	2300      	movs	r3, #0
 8017be6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8017be8:	2300      	movs	r3, #0
 8017bea:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Boot1_GPIO_Port, &GPIO_InitStruct);
 8017bec:	f107 0314 	add.w	r3, r7, #20
 8017bf0:	4619      	mov	r1, r3
 8017bf2:	480d      	ldr	r0, [pc, #52]	; (8017c28 <MX_GPIO_Init+0x160>)
 8017bf4:	f001 fe2e 	bl	8019854 <HAL_GPIO_Init>

  /*Configure GPIO pin : TpI_Pin */
  GPIO_InitStruct.Pin = TpI_Pin;
 8017bf8:	f44f 7380 	mov.w	r3, #256	; 0x100
 8017bfc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8017bfe:	2300      	movs	r3, #0
 8017c00:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8017c02:	2301      	movs	r3, #1
 8017c04:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(TpI_GPIO_Port, &GPIO_InitStruct);
 8017c06:	f107 0314 	add.w	r3, r7, #20
 8017c0a:	4619      	mov	r1, r3
 8017c0c:	4806      	ldr	r0, [pc, #24]	; (8017c28 <MX_GPIO_Init+0x160>)
 8017c0e:	f001 fe21 	bl	8019854 <HAL_GPIO_Init>

}
 8017c12:	bf00      	nop
 8017c14:	3728      	adds	r7, #40	; 0x28
 8017c16:	46bd      	mov	sp, r7
 8017c18:	bd80      	pop	{r7, pc}
 8017c1a:	bf00      	nop
 8017c1c:	40023800 	.word	0x40023800
 8017c20:	40020000 	.word	0x40020000
 8017c24:	40020800 	.word	0x40020800
 8017c28:	40020400 	.word	0x40020400

08017c2c <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
// Callback: timer has rolled over
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8017c2c:	b580      	push	{r7, lr}
 8017c2e:	b082      	sub	sp, #8
 8017c30:	af00      	add	r7, sp, #0
 8017c32:	6078      	str	r0, [r7, #4]
  // Check which version of the timer triggered this callback
  if (htim == &htim3 )
 8017c34:	687b      	ldr	r3, [r7, #4]
 8017c36:	4a04      	ldr	r2, [pc, #16]	; (8017c48 <HAL_TIM_PeriodElapsedCallback+0x1c>)
 8017c38:	4293      	cmp	r3, r2
 8017c3a:	d101      	bne.n	8017c40 <HAL_TIM_PeriodElapsedCallback+0x14>
  {
	  Tim3_ISP();
 8017c3c:	f7f4 fd90 	bl	800c760 <Tim3_ISP>
  }
}
 8017c40:	bf00      	nop
 8017c42:	3708      	adds	r7, #8
 8017c44:	46bd      	mov	sp, r7
 8017c46:	bd80      	pop	{r7, pc}
 8017c48:	200069d8 	.word	0x200069d8

08017c4c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8017c4c:	b480      	push	{r7}
 8017c4e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8017c50:	b672      	cpsid	i
}
 8017c52:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8017c54:	e7fe      	b.n	8017c54 <Error_Handler+0x8>
	...

08017c58 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8017c58:	b480      	push	{r7}
 8017c5a:	b083      	sub	sp, #12
 8017c5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8017c5e:	2300      	movs	r3, #0
 8017c60:	607b      	str	r3, [r7, #4]
 8017c62:	4b10      	ldr	r3, [pc, #64]	; (8017ca4 <HAL_MspInit+0x4c>)
 8017c64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8017c66:	4a0f      	ldr	r2, [pc, #60]	; (8017ca4 <HAL_MspInit+0x4c>)
 8017c68:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8017c6c:	6453      	str	r3, [r2, #68]	; 0x44
 8017c6e:	4b0d      	ldr	r3, [pc, #52]	; (8017ca4 <HAL_MspInit+0x4c>)
 8017c70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8017c72:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8017c76:	607b      	str	r3, [r7, #4]
 8017c78:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8017c7a:	2300      	movs	r3, #0
 8017c7c:	603b      	str	r3, [r7, #0]
 8017c7e:	4b09      	ldr	r3, [pc, #36]	; (8017ca4 <HAL_MspInit+0x4c>)
 8017c80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8017c82:	4a08      	ldr	r2, [pc, #32]	; (8017ca4 <HAL_MspInit+0x4c>)
 8017c84:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8017c88:	6413      	str	r3, [r2, #64]	; 0x40
 8017c8a:	4b06      	ldr	r3, [pc, #24]	; (8017ca4 <HAL_MspInit+0x4c>)
 8017c8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8017c8e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8017c92:	603b      	str	r3, [r7, #0]
 8017c94:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8017c96:	bf00      	nop
 8017c98:	370c      	adds	r7, #12
 8017c9a:	46bd      	mov	sp, r7
 8017c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017ca0:	4770      	bx	lr
 8017ca2:	bf00      	nop
 8017ca4:	40023800 	.word	0x40023800

08017ca8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8017ca8:	b580      	push	{r7, lr}
 8017caa:	b08c      	sub	sp, #48	; 0x30
 8017cac:	af00      	add	r7, sp, #0
 8017cae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8017cb0:	f107 031c 	add.w	r3, r7, #28
 8017cb4:	2200      	movs	r2, #0
 8017cb6:	601a      	str	r2, [r3, #0]
 8017cb8:	605a      	str	r2, [r3, #4]
 8017cba:	609a      	str	r2, [r3, #8]
 8017cbc:	60da      	str	r2, [r3, #12]
 8017cbe:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8017cc0:	687b      	ldr	r3, [r7, #4]
 8017cc2:	681b      	ldr	r3, [r3, #0]
 8017cc4:	4a45      	ldr	r2, [pc, #276]	; (8017ddc <HAL_ADC_MspInit+0x134>)
 8017cc6:	4293      	cmp	r3, r2
 8017cc8:	d157      	bne.n	8017d7a <HAL_ADC_MspInit+0xd2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8017cca:	2300      	movs	r3, #0
 8017ccc:	61bb      	str	r3, [r7, #24]
 8017cce:	4b44      	ldr	r3, [pc, #272]	; (8017de0 <HAL_ADC_MspInit+0x138>)
 8017cd0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8017cd2:	4a43      	ldr	r2, [pc, #268]	; (8017de0 <HAL_ADC_MspInit+0x138>)
 8017cd4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8017cd8:	6453      	str	r3, [r2, #68]	; 0x44
 8017cda:	4b41      	ldr	r3, [pc, #260]	; (8017de0 <HAL_ADC_MspInit+0x138>)
 8017cdc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8017cde:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8017ce2:	61bb      	str	r3, [r7, #24]
 8017ce4:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8017ce6:	2300      	movs	r3, #0
 8017ce8:	617b      	str	r3, [r7, #20]
 8017cea:	4b3d      	ldr	r3, [pc, #244]	; (8017de0 <HAL_ADC_MspInit+0x138>)
 8017cec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8017cee:	4a3c      	ldr	r2, [pc, #240]	; (8017de0 <HAL_ADC_MspInit+0x138>)
 8017cf0:	f043 0301 	orr.w	r3, r3, #1
 8017cf4:	6313      	str	r3, [r2, #48]	; 0x30
 8017cf6:	4b3a      	ldr	r3, [pc, #232]	; (8017de0 <HAL_ADC_MspInit+0x138>)
 8017cf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8017cfa:	f003 0301 	and.w	r3, r3, #1
 8017cfe:	617b      	str	r3, [r7, #20]
 8017d00:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PA6     ------> ADC1_IN6
    */
    GPIO_InitStruct.Pin = Ao_Pin;
 8017d02:	2340      	movs	r3, #64	; 0x40
 8017d04:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8017d06:	2303      	movs	r3, #3
 8017d08:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8017d0a:	2300      	movs	r3, #0
 8017d0c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(Ao_GPIO_Port, &GPIO_InitStruct);
 8017d0e:	f107 031c 	add.w	r3, r7, #28
 8017d12:	4619      	mov	r1, r3
 8017d14:	4833      	ldr	r0, [pc, #204]	; (8017de4 <HAL_ADC_MspInit+0x13c>)
 8017d16:	f001 fd9d 	bl	8019854 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8017d1a:	4b33      	ldr	r3, [pc, #204]	; (8017de8 <HAL_ADC_MspInit+0x140>)
 8017d1c:	4a33      	ldr	r2, [pc, #204]	; (8017dec <HAL_ADC_MspInit+0x144>)
 8017d1e:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8017d20:	4b31      	ldr	r3, [pc, #196]	; (8017de8 <HAL_ADC_MspInit+0x140>)
 8017d22:	2200      	movs	r2, #0
 8017d24:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8017d26:	4b30      	ldr	r3, [pc, #192]	; (8017de8 <HAL_ADC_MspInit+0x140>)
 8017d28:	2200      	movs	r2, #0
 8017d2a:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8017d2c:	4b2e      	ldr	r3, [pc, #184]	; (8017de8 <HAL_ADC_MspInit+0x140>)
 8017d2e:	2200      	movs	r2, #0
 8017d30:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8017d32:	4b2d      	ldr	r3, [pc, #180]	; (8017de8 <HAL_ADC_MspInit+0x140>)
 8017d34:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8017d38:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8017d3a:	4b2b      	ldr	r3, [pc, #172]	; (8017de8 <HAL_ADC_MspInit+0x140>)
 8017d3c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8017d40:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8017d42:	4b29      	ldr	r3, [pc, #164]	; (8017de8 <HAL_ADC_MspInit+0x140>)
 8017d44:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8017d48:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 8017d4a:	4b27      	ldr	r3, [pc, #156]	; (8017de8 <HAL_ADC_MspInit+0x140>)
 8017d4c:	2200      	movs	r2, #0
 8017d4e:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8017d50:	4b25      	ldr	r3, [pc, #148]	; (8017de8 <HAL_ADC_MspInit+0x140>)
 8017d52:	2200      	movs	r2, #0
 8017d54:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8017d56:	4b24      	ldr	r3, [pc, #144]	; (8017de8 <HAL_ADC_MspInit+0x140>)
 8017d58:	2200      	movs	r2, #0
 8017d5a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8017d5c:	4822      	ldr	r0, [pc, #136]	; (8017de8 <HAL_ADC_MspInit+0x140>)
 8017d5e:	f000 ff85 	bl	8018c6c <HAL_DMA_Init>
 8017d62:	4603      	mov	r3, r0
 8017d64:	2b00      	cmp	r3, #0
 8017d66:	d001      	beq.n	8017d6c <HAL_ADC_MspInit+0xc4>
    {
      Error_Handler();
 8017d68:	f7ff ff70 	bl	8017c4c <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8017d6c:	687b      	ldr	r3, [r7, #4]
 8017d6e:	4a1e      	ldr	r2, [pc, #120]	; (8017de8 <HAL_ADC_MspInit+0x140>)
 8017d70:	639a      	str	r2, [r3, #56]	; 0x38
 8017d72:	4a1d      	ldr	r2, [pc, #116]	; (8017de8 <HAL_ADC_MspInit+0x140>)
 8017d74:	687b      	ldr	r3, [r7, #4]
 8017d76:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8017d78:	e02c      	b.n	8017dd4 <HAL_ADC_MspInit+0x12c>
  else if(hadc->Instance==ADC2)
 8017d7a:	687b      	ldr	r3, [r7, #4]
 8017d7c:	681b      	ldr	r3, [r3, #0]
 8017d7e:	4a1c      	ldr	r2, [pc, #112]	; (8017df0 <HAL_ADC_MspInit+0x148>)
 8017d80:	4293      	cmp	r3, r2
 8017d82:	d127      	bne.n	8017dd4 <HAL_ADC_MspInit+0x12c>
    __HAL_RCC_ADC2_CLK_ENABLE();
 8017d84:	2300      	movs	r3, #0
 8017d86:	613b      	str	r3, [r7, #16]
 8017d88:	4b15      	ldr	r3, [pc, #84]	; (8017de0 <HAL_ADC_MspInit+0x138>)
 8017d8a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8017d8c:	4a14      	ldr	r2, [pc, #80]	; (8017de0 <HAL_ADC_MspInit+0x138>)
 8017d8e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8017d92:	6453      	str	r3, [r2, #68]	; 0x44
 8017d94:	4b12      	ldr	r3, [pc, #72]	; (8017de0 <HAL_ADC_MspInit+0x138>)
 8017d96:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8017d98:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8017d9c:	613b      	str	r3, [r7, #16]
 8017d9e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8017da0:	2300      	movs	r3, #0
 8017da2:	60fb      	str	r3, [r7, #12]
 8017da4:	4b0e      	ldr	r3, [pc, #56]	; (8017de0 <HAL_ADC_MspInit+0x138>)
 8017da6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8017da8:	4a0d      	ldr	r2, [pc, #52]	; (8017de0 <HAL_ADC_MspInit+0x138>)
 8017daa:	f043 0301 	orr.w	r3, r3, #1
 8017dae:	6313      	str	r3, [r2, #48]	; 0x30
 8017db0:	4b0b      	ldr	r3, [pc, #44]	; (8017de0 <HAL_ADC_MspInit+0x138>)
 8017db2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8017db4:	f003 0301 	and.w	r3, r3, #1
 8017db8:	60fb      	str	r3, [r7, #12]
 8017dba:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = AoA7_Pin;
 8017dbc:	2380      	movs	r3, #128	; 0x80
 8017dbe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8017dc0:	2303      	movs	r3, #3
 8017dc2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8017dc4:	2300      	movs	r3, #0
 8017dc6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(AoA7_GPIO_Port, &GPIO_InitStruct);
 8017dc8:	f107 031c 	add.w	r3, r7, #28
 8017dcc:	4619      	mov	r1, r3
 8017dce:	4805      	ldr	r0, [pc, #20]	; (8017de4 <HAL_ADC_MspInit+0x13c>)
 8017dd0:	f001 fd40 	bl	8019854 <HAL_GPIO_Init>
}
 8017dd4:	bf00      	nop
 8017dd6:	3730      	adds	r7, #48	; 0x30
 8017dd8:	46bd      	mov	sp, r7
 8017dda:	bd80      	pop	{r7, pc}
 8017ddc:	40012000 	.word	0x40012000
 8017de0:	40023800 	.word	0x40023800
 8017de4:	40020000 	.word	0x40020000
 8017de8:	20006b6c 	.word	0x20006b6c
 8017dec:	40026410 	.word	0x40026410
 8017df0:	40012100 	.word	0x40012100

08017df4 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8017df4:	b580      	push	{r7, lr}
 8017df6:	b08a      	sub	sp, #40	; 0x28
 8017df8:	af00      	add	r7, sp, #0
 8017dfa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8017dfc:	f107 0314 	add.w	r3, r7, #20
 8017e00:	2200      	movs	r2, #0
 8017e02:	601a      	str	r2, [r3, #0]
 8017e04:	605a      	str	r2, [r3, #4]
 8017e06:	609a      	str	r2, [r3, #8]
 8017e08:	60da      	str	r2, [r3, #12]
 8017e0a:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC)
 8017e0c:	687b      	ldr	r3, [r7, #4]
 8017e0e:	681b      	ldr	r3, [r3, #0]
 8017e10:	4a33      	ldr	r2, [pc, #204]	; (8017ee0 <HAL_DAC_MspInit+0xec>)
 8017e12:	4293      	cmp	r3, r2
 8017e14:	d15f      	bne.n	8017ed6 <HAL_DAC_MspInit+0xe2>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 8017e16:	2300      	movs	r3, #0
 8017e18:	613b      	str	r3, [r7, #16]
 8017e1a:	4b32      	ldr	r3, [pc, #200]	; (8017ee4 <HAL_DAC_MspInit+0xf0>)
 8017e1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8017e1e:	4a31      	ldr	r2, [pc, #196]	; (8017ee4 <HAL_DAC_MspInit+0xf0>)
 8017e20:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8017e24:	6413      	str	r3, [r2, #64]	; 0x40
 8017e26:	4b2f      	ldr	r3, [pc, #188]	; (8017ee4 <HAL_DAC_MspInit+0xf0>)
 8017e28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8017e2a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8017e2e:	613b      	str	r3, [r7, #16]
 8017e30:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8017e32:	2300      	movs	r3, #0
 8017e34:	60fb      	str	r3, [r7, #12]
 8017e36:	4b2b      	ldr	r3, [pc, #172]	; (8017ee4 <HAL_DAC_MspInit+0xf0>)
 8017e38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8017e3a:	4a2a      	ldr	r2, [pc, #168]	; (8017ee4 <HAL_DAC_MspInit+0xf0>)
 8017e3c:	f043 0301 	orr.w	r3, r3, #1
 8017e40:	6313      	str	r3, [r2, #48]	; 0x30
 8017e42:	4b28      	ldr	r3, [pc, #160]	; (8017ee4 <HAL_DAC_MspInit+0xf0>)
 8017e44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8017e46:	f003 0301 	and.w	r3, r3, #1
 8017e4a:	60fb      	str	r3, [r7, #12]
 8017e4c:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    PA5     ------> DAC_OUT2
    */
    GPIO_InitStruct.Pin = Fo4_Pin|Ap_Pin;
 8017e4e:	2330      	movs	r3, #48	; 0x30
 8017e50:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8017e52:	2303      	movs	r3, #3
 8017e54:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8017e56:	2300      	movs	r3, #0
 8017e58:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8017e5a:	f107 0314 	add.w	r3, r7, #20
 8017e5e:	4619      	mov	r1, r3
 8017e60:	4821      	ldr	r0, [pc, #132]	; (8017ee8 <HAL_DAC_MspInit+0xf4>)
 8017e62:	f001 fcf7 	bl	8019854 <HAL_GPIO_Init>

    /* DAC DMA Init */
    /* DAC1 Init */
    hdma_dac1.Instance = DMA1_Stream5;
 8017e66:	4b21      	ldr	r3, [pc, #132]	; (8017eec <HAL_DAC_MspInit+0xf8>)
 8017e68:	4a21      	ldr	r2, [pc, #132]	; (8017ef0 <HAL_DAC_MspInit+0xfc>)
 8017e6a:	601a      	str	r2, [r3, #0]
    hdma_dac1.Init.Channel = DMA_CHANNEL_7;
 8017e6c:	4b1f      	ldr	r3, [pc, #124]	; (8017eec <HAL_DAC_MspInit+0xf8>)
 8017e6e:	f04f 6260 	mov.w	r2, #234881024	; 0xe000000
 8017e72:	605a      	str	r2, [r3, #4]
    hdma_dac1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8017e74:	4b1d      	ldr	r3, [pc, #116]	; (8017eec <HAL_DAC_MspInit+0xf8>)
 8017e76:	2240      	movs	r2, #64	; 0x40
 8017e78:	609a      	str	r2, [r3, #8]
    hdma_dac1.Init.PeriphInc = DMA_PINC_DISABLE;
 8017e7a:	4b1c      	ldr	r3, [pc, #112]	; (8017eec <HAL_DAC_MspInit+0xf8>)
 8017e7c:	2200      	movs	r2, #0
 8017e7e:	60da      	str	r2, [r3, #12]
    hdma_dac1.Init.MemInc = DMA_MINC_ENABLE;
 8017e80:	4b1a      	ldr	r3, [pc, #104]	; (8017eec <HAL_DAC_MspInit+0xf8>)
 8017e82:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8017e86:	611a      	str	r2, [r3, #16]
    hdma_dac1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8017e88:	4b18      	ldr	r3, [pc, #96]	; (8017eec <HAL_DAC_MspInit+0xf8>)
 8017e8a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8017e8e:	615a      	str	r2, [r3, #20]
    hdma_dac1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8017e90:	4b16      	ldr	r3, [pc, #88]	; (8017eec <HAL_DAC_MspInit+0xf8>)
 8017e92:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8017e96:	619a      	str	r2, [r3, #24]
    hdma_dac1.Init.Mode = DMA_NORMAL;
 8017e98:	4b14      	ldr	r3, [pc, #80]	; (8017eec <HAL_DAC_MspInit+0xf8>)
 8017e9a:	2200      	movs	r2, #0
 8017e9c:	61da      	str	r2, [r3, #28]
    hdma_dac1.Init.Priority = DMA_PRIORITY_LOW;
 8017e9e:	4b13      	ldr	r3, [pc, #76]	; (8017eec <HAL_DAC_MspInit+0xf8>)
 8017ea0:	2200      	movs	r2, #0
 8017ea2:	621a      	str	r2, [r3, #32]
    hdma_dac1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8017ea4:	4b11      	ldr	r3, [pc, #68]	; (8017eec <HAL_DAC_MspInit+0xf8>)
 8017ea6:	2200      	movs	r2, #0
 8017ea8:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_dac1) != HAL_OK)
 8017eaa:	4810      	ldr	r0, [pc, #64]	; (8017eec <HAL_DAC_MspInit+0xf8>)
 8017eac:	f000 fede 	bl	8018c6c <HAL_DMA_Init>
 8017eb0:	4603      	mov	r3, r0
 8017eb2:	2b00      	cmp	r3, #0
 8017eb4:	d001      	beq.n	8017eba <HAL_DAC_MspInit+0xc6>
    {
      Error_Handler();
 8017eb6:	f7ff fec9 	bl	8017c4c <Error_Handler>
    }

    __HAL_LINKDMA(hdac,DMA_Handle1,hdma_dac1);
 8017eba:	687b      	ldr	r3, [r7, #4]
 8017ebc:	4a0b      	ldr	r2, [pc, #44]	; (8017eec <HAL_DAC_MspInit+0xf8>)
 8017ebe:	609a      	str	r2, [r3, #8]
 8017ec0:	4a0a      	ldr	r2, [pc, #40]	; (8017eec <HAL_DAC_MspInit+0xf8>)
 8017ec2:	687b      	ldr	r3, [r7, #4]
 8017ec4:	6393      	str	r3, [r2, #56]	; 0x38

    /* DAC interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8017ec6:	2200      	movs	r2, #0
 8017ec8:	2100      	movs	r1, #0
 8017eca:	2036      	movs	r0, #54	; 0x36
 8017ecc:	f000 fe01 	bl	8018ad2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8017ed0:	2036      	movs	r0, #54	; 0x36
 8017ed2:	f000 fe1a 	bl	8018b0a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }

}
 8017ed6:	bf00      	nop
 8017ed8:	3728      	adds	r7, #40	; 0x28
 8017eda:	46bd      	mov	sp, r7
 8017edc:	bd80      	pop	{r7, pc}
 8017ede:	bf00      	nop
 8017ee0:	40007400 	.word	0x40007400
 8017ee4:	40023800 	.word	0x40023800
 8017ee8:	40020000 	.word	0x40020000
 8017eec:	20006a78 	.word	0x20006a78
 8017ef0:	40026088 	.word	0x40026088

08017ef4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8017ef4:	b580      	push	{r7, lr}
 8017ef6:	b08c      	sub	sp, #48	; 0x30
 8017ef8:	af00      	add	r7, sp, #0
 8017efa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8017efc:	f107 031c 	add.w	r3, r7, #28
 8017f00:	2200      	movs	r2, #0
 8017f02:	601a      	str	r2, [r3, #0]
 8017f04:	605a      	str	r2, [r3, #4]
 8017f06:	609a      	str	r2, [r3, #8]
 8017f08:	60da      	str	r2, [r3, #12]
 8017f0a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8017f0c:	687b      	ldr	r3, [r7, #4]
 8017f0e:	681b      	ldr	r3, [r3, #0]
 8017f10:	4a3a      	ldr	r2, [pc, #232]	; (8017ffc <HAL_SPI_MspInit+0x108>)
 8017f12:	4293      	cmp	r3, r2
 8017f14:	d135      	bne.n	8017f82 <HAL_SPI_MspInit+0x8e>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8017f16:	2300      	movs	r3, #0
 8017f18:	61bb      	str	r3, [r7, #24]
 8017f1a:	4b39      	ldr	r3, [pc, #228]	; (8018000 <HAL_SPI_MspInit+0x10c>)
 8017f1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8017f1e:	4a38      	ldr	r2, [pc, #224]	; (8018000 <HAL_SPI_MspInit+0x10c>)
 8017f20:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8017f24:	6413      	str	r3, [r2, #64]	; 0x40
 8017f26:	4b36      	ldr	r3, [pc, #216]	; (8018000 <HAL_SPI_MspInit+0x10c>)
 8017f28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8017f2a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8017f2e:	61bb      	str	r3, [r7, #24]
 8017f30:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8017f32:	2300      	movs	r3, #0
 8017f34:	617b      	str	r3, [r7, #20]
 8017f36:	4b32      	ldr	r3, [pc, #200]	; (8018000 <HAL_SPI_MspInit+0x10c>)
 8017f38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8017f3a:	4a31      	ldr	r2, [pc, #196]	; (8018000 <HAL_SPI_MspInit+0x10c>)
 8017f3c:	f043 0302 	orr.w	r3, r3, #2
 8017f40:	6313      	str	r3, [r2, #48]	; 0x30
 8017f42:	4b2f      	ldr	r3, [pc, #188]	; (8018000 <HAL_SPI_MspInit+0x10c>)
 8017f44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8017f46:	f003 0302 	and.w	r3, r3, #2
 8017f4a:	617b      	str	r3, [r7, #20]
 8017f4c:	697b      	ldr	r3, [r7, #20]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = SCK_Pin|So_Pin|Si_Pin;
 8017f4e:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8017f52:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8017f54:	2302      	movs	r3, #2
 8017f56:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8017f58:	2300      	movs	r3, #0
 8017f5a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8017f5c:	2303      	movs	r3, #3
 8017f5e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8017f60:	2305      	movs	r3, #5
 8017f62:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8017f64:	f107 031c 	add.w	r3, r7, #28
 8017f68:	4619      	mov	r1, r3
 8017f6a:	4826      	ldr	r0, [pc, #152]	; (8018004 <HAL_SPI_MspInit+0x110>)
 8017f6c:	f001 fc72 	bl	8019854 <HAL_GPIO_Init>

    /* SPI2 interrupt Init */
    HAL_NVIC_SetPriority(SPI2_IRQn, 1, 0);
 8017f70:	2200      	movs	r2, #0
 8017f72:	2101      	movs	r1, #1
 8017f74:	2024      	movs	r0, #36	; 0x24
 8017f76:	f000 fdac 	bl	8018ad2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 8017f7a:	2024      	movs	r0, #36	; 0x24
 8017f7c:	f000 fdc5 	bl	8018b0a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8017f80:	e038      	b.n	8017ff4 <HAL_SPI_MspInit+0x100>
  else if(hspi->Instance==SPI3)
 8017f82:	687b      	ldr	r3, [r7, #4]
 8017f84:	681b      	ldr	r3, [r3, #0]
 8017f86:	4a20      	ldr	r2, [pc, #128]	; (8018008 <HAL_SPI_MspInit+0x114>)
 8017f88:	4293      	cmp	r3, r2
 8017f8a:	d133      	bne.n	8017ff4 <HAL_SPI_MspInit+0x100>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8017f8c:	2300      	movs	r3, #0
 8017f8e:	613b      	str	r3, [r7, #16]
 8017f90:	4b1b      	ldr	r3, [pc, #108]	; (8018000 <HAL_SPI_MspInit+0x10c>)
 8017f92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8017f94:	4a1a      	ldr	r2, [pc, #104]	; (8018000 <HAL_SPI_MspInit+0x10c>)
 8017f96:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8017f9a:	6413      	str	r3, [r2, #64]	; 0x40
 8017f9c:	4b18      	ldr	r3, [pc, #96]	; (8018000 <HAL_SPI_MspInit+0x10c>)
 8017f9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8017fa0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8017fa4:	613b      	str	r3, [r7, #16]
 8017fa6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8017fa8:	2300      	movs	r3, #0
 8017faa:	60fb      	str	r3, [r7, #12]
 8017fac:	4b14      	ldr	r3, [pc, #80]	; (8018000 <HAL_SPI_MspInit+0x10c>)
 8017fae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8017fb0:	4a13      	ldr	r2, [pc, #76]	; (8018000 <HAL_SPI_MspInit+0x10c>)
 8017fb2:	f043 0302 	orr.w	r3, r3, #2
 8017fb6:	6313      	str	r3, [r2, #48]	; 0x30
 8017fb8:	4b11      	ldr	r3, [pc, #68]	; (8018000 <HAL_SPI_MspInit+0x10c>)
 8017fba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8017fbc:	f003 0302 	and.w	r3, r3, #2
 8017fc0:	60fb      	str	r3, [r7, #12]
 8017fc2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = TpCk_Pin|TpSo_Pin|TpSi_Pin;
 8017fc4:	2338      	movs	r3, #56	; 0x38
 8017fc6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8017fc8:	2302      	movs	r3, #2
 8017fca:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8017fcc:	2300      	movs	r3, #0
 8017fce:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8017fd0:	2303      	movs	r3, #3
 8017fd2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8017fd4:	2306      	movs	r3, #6
 8017fd6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8017fd8:	f107 031c 	add.w	r3, r7, #28
 8017fdc:	4619      	mov	r1, r3
 8017fde:	4809      	ldr	r0, [pc, #36]	; (8018004 <HAL_SPI_MspInit+0x110>)
 8017fe0:	f001 fc38 	bl	8019854 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(SPI3_IRQn, 1, 0);
 8017fe4:	2200      	movs	r2, #0
 8017fe6:	2101      	movs	r1, #1
 8017fe8:	2033      	movs	r0, #51	; 0x33
 8017fea:	f000 fd72 	bl	8018ad2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI3_IRQn);
 8017fee:	2033      	movs	r0, #51	; 0x33
 8017ff0:	f000 fd8b 	bl	8018b0a <HAL_NVIC_EnableIRQ>
}
 8017ff4:	bf00      	nop
 8017ff6:	3730      	adds	r7, #48	; 0x30
 8017ff8:	46bd      	mov	sp, r7
 8017ffa:	bd80      	pop	{r7, pc}
 8017ffc:	40003800 	.word	0x40003800
 8018000:	40023800 	.word	0x40023800
 8018004:	40020400 	.word	0x40020400
 8018008:	40003c00 	.word	0x40003c00

0801800c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 801800c:	b580      	push	{r7, lr}
 801800e:	b086      	sub	sp, #24
 8018010:	af00      	add	r7, sp, #0
 8018012:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8018014:	687b      	ldr	r3, [r7, #4]
 8018016:	681b      	ldr	r3, [r3, #0]
 8018018:	4a44      	ldr	r2, [pc, #272]	; (801812c <HAL_TIM_Base_MspInit+0x120>)
 801801a:	4293      	cmp	r3, r2
 801801c:	d10e      	bne.n	801803c <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 801801e:	2300      	movs	r3, #0
 8018020:	617b      	str	r3, [r7, #20]
 8018022:	4b43      	ldr	r3, [pc, #268]	; (8018130 <HAL_TIM_Base_MspInit+0x124>)
 8018024:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8018026:	4a42      	ldr	r2, [pc, #264]	; (8018130 <HAL_TIM_Base_MspInit+0x124>)
 8018028:	f043 0301 	orr.w	r3, r3, #1
 801802c:	6453      	str	r3, [r2, #68]	; 0x44
 801802e:	4b40      	ldr	r3, [pc, #256]	; (8018130 <HAL_TIM_Base_MspInit+0x124>)
 8018030:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8018032:	f003 0301 	and.w	r3, r3, #1
 8018036:	617b      	str	r3, [r7, #20]
 8018038:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }

}
 801803a:	e072      	b.n	8018122 <HAL_TIM_Base_MspInit+0x116>
  else if(htim_base->Instance==TIM3)
 801803c:	687b      	ldr	r3, [r7, #4]
 801803e:	681b      	ldr	r3, [r3, #0]
 8018040:	4a3c      	ldr	r2, [pc, #240]	; (8018134 <HAL_TIM_Base_MspInit+0x128>)
 8018042:	4293      	cmp	r3, r2
 8018044:	d116      	bne.n	8018074 <HAL_TIM_Base_MspInit+0x68>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8018046:	2300      	movs	r3, #0
 8018048:	613b      	str	r3, [r7, #16]
 801804a:	4b39      	ldr	r3, [pc, #228]	; (8018130 <HAL_TIM_Base_MspInit+0x124>)
 801804c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801804e:	4a38      	ldr	r2, [pc, #224]	; (8018130 <HAL_TIM_Base_MspInit+0x124>)
 8018050:	f043 0302 	orr.w	r3, r3, #2
 8018054:	6413      	str	r3, [r2, #64]	; 0x40
 8018056:	4b36      	ldr	r3, [pc, #216]	; (8018130 <HAL_TIM_Base_MspInit+0x124>)
 8018058:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801805a:	f003 0302 	and.w	r3, r3, #2
 801805e:	613b      	str	r3, [r7, #16]
 8018060:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8018062:	2200      	movs	r2, #0
 8018064:	2100      	movs	r1, #0
 8018066:	201d      	movs	r0, #29
 8018068:	f000 fd33 	bl	8018ad2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 801806c:	201d      	movs	r0, #29
 801806e:	f000 fd4c 	bl	8018b0a <HAL_NVIC_EnableIRQ>
}
 8018072:	e056      	b.n	8018122 <HAL_TIM_Base_MspInit+0x116>
  else if(htim_base->Instance==TIM5)
 8018074:	687b      	ldr	r3, [r7, #4]
 8018076:	681b      	ldr	r3, [r3, #0]
 8018078:	4a2f      	ldr	r2, [pc, #188]	; (8018138 <HAL_TIM_Base_MspInit+0x12c>)
 801807a:	4293      	cmp	r3, r2
 801807c:	d10e      	bne.n	801809c <HAL_TIM_Base_MspInit+0x90>
    __HAL_RCC_TIM5_CLK_ENABLE();
 801807e:	2300      	movs	r3, #0
 8018080:	60fb      	str	r3, [r7, #12]
 8018082:	4b2b      	ldr	r3, [pc, #172]	; (8018130 <HAL_TIM_Base_MspInit+0x124>)
 8018084:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8018086:	4a2a      	ldr	r2, [pc, #168]	; (8018130 <HAL_TIM_Base_MspInit+0x124>)
 8018088:	f043 0308 	orr.w	r3, r3, #8
 801808c:	6413      	str	r3, [r2, #64]	; 0x40
 801808e:	4b28      	ldr	r3, [pc, #160]	; (8018130 <HAL_TIM_Base_MspInit+0x124>)
 8018090:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8018092:	f003 0308 	and.w	r3, r3, #8
 8018096:	60fb      	str	r3, [r7, #12]
 8018098:	68fb      	ldr	r3, [r7, #12]
}
 801809a:	e042      	b.n	8018122 <HAL_TIM_Base_MspInit+0x116>
  else if(htim_base->Instance==TIM7)
 801809c:	687b      	ldr	r3, [r7, #4]
 801809e:	681b      	ldr	r3, [r3, #0]
 80180a0:	4a26      	ldr	r2, [pc, #152]	; (801813c <HAL_TIM_Base_MspInit+0x130>)
 80180a2:	4293      	cmp	r3, r2
 80180a4:	d13d      	bne.n	8018122 <HAL_TIM_Base_MspInit+0x116>
    __HAL_RCC_TIM7_CLK_ENABLE();
 80180a6:	2300      	movs	r3, #0
 80180a8:	60bb      	str	r3, [r7, #8]
 80180aa:	4b21      	ldr	r3, [pc, #132]	; (8018130 <HAL_TIM_Base_MspInit+0x124>)
 80180ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80180ae:	4a20      	ldr	r2, [pc, #128]	; (8018130 <HAL_TIM_Base_MspInit+0x124>)
 80180b0:	f043 0320 	orr.w	r3, r3, #32
 80180b4:	6413      	str	r3, [r2, #64]	; 0x40
 80180b6:	4b1e      	ldr	r3, [pc, #120]	; (8018130 <HAL_TIM_Base_MspInit+0x124>)
 80180b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80180ba:	f003 0320 	and.w	r3, r3, #32
 80180be:	60bb      	str	r3, [r7, #8]
 80180c0:	68bb      	ldr	r3, [r7, #8]
    hdma_tim7_up.Instance = DMA1_Stream2;
 80180c2:	4b1f      	ldr	r3, [pc, #124]	; (8018140 <HAL_TIM_Base_MspInit+0x134>)
 80180c4:	4a1f      	ldr	r2, [pc, #124]	; (8018144 <HAL_TIM_Base_MspInit+0x138>)
 80180c6:	601a      	str	r2, [r3, #0]
    hdma_tim7_up.Init.Channel = DMA_CHANNEL_1;
 80180c8:	4b1d      	ldr	r3, [pc, #116]	; (8018140 <HAL_TIM_Base_MspInit+0x134>)
 80180ca:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80180ce:	605a      	str	r2, [r3, #4]
    hdma_tim7_up.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80180d0:	4b1b      	ldr	r3, [pc, #108]	; (8018140 <HAL_TIM_Base_MspInit+0x134>)
 80180d2:	2200      	movs	r2, #0
 80180d4:	609a      	str	r2, [r3, #8]
    hdma_tim7_up.Init.PeriphInc = DMA_PINC_DISABLE;
 80180d6:	4b1a      	ldr	r3, [pc, #104]	; (8018140 <HAL_TIM_Base_MspInit+0x134>)
 80180d8:	2200      	movs	r2, #0
 80180da:	60da      	str	r2, [r3, #12]
    hdma_tim7_up.Init.MemInc = DMA_MINC_ENABLE;
 80180dc:	4b18      	ldr	r3, [pc, #96]	; (8018140 <HAL_TIM_Base_MspInit+0x134>)
 80180de:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80180e2:	611a      	str	r2, [r3, #16]
    hdma_tim7_up.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80180e4:	4b16      	ldr	r3, [pc, #88]	; (8018140 <HAL_TIM_Base_MspInit+0x134>)
 80180e6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80180ea:	615a      	str	r2, [r3, #20]
    hdma_tim7_up.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80180ec:	4b14      	ldr	r3, [pc, #80]	; (8018140 <HAL_TIM_Base_MspInit+0x134>)
 80180ee:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80180f2:	619a      	str	r2, [r3, #24]
    hdma_tim7_up.Init.Mode = DMA_NORMAL;
 80180f4:	4b12      	ldr	r3, [pc, #72]	; (8018140 <HAL_TIM_Base_MspInit+0x134>)
 80180f6:	2200      	movs	r2, #0
 80180f8:	61da      	str	r2, [r3, #28]
    hdma_tim7_up.Init.Priority = DMA_PRIORITY_LOW;
 80180fa:	4b11      	ldr	r3, [pc, #68]	; (8018140 <HAL_TIM_Base_MspInit+0x134>)
 80180fc:	2200      	movs	r2, #0
 80180fe:	621a      	str	r2, [r3, #32]
    hdma_tim7_up.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8018100:	4b0f      	ldr	r3, [pc, #60]	; (8018140 <HAL_TIM_Base_MspInit+0x134>)
 8018102:	2200      	movs	r2, #0
 8018104:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim7_up) != HAL_OK)
 8018106:	480e      	ldr	r0, [pc, #56]	; (8018140 <HAL_TIM_Base_MspInit+0x134>)
 8018108:	f000 fdb0 	bl	8018c6c <HAL_DMA_Init>
 801810c:	4603      	mov	r3, r0
 801810e:	2b00      	cmp	r3, #0
 8018110:	d001      	beq.n	8018116 <HAL_TIM_Base_MspInit+0x10a>
      Error_Handler();
 8018112:	f7ff fd9b 	bl	8017c4c <Error_Handler>
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_UPDATE],hdma_tim7_up);
 8018116:	687b      	ldr	r3, [r7, #4]
 8018118:	4a09      	ldr	r2, [pc, #36]	; (8018140 <HAL_TIM_Base_MspInit+0x134>)
 801811a:	621a      	str	r2, [r3, #32]
 801811c:	4a08      	ldr	r2, [pc, #32]	; (8018140 <HAL_TIM_Base_MspInit+0x134>)
 801811e:	687b      	ldr	r3, [r7, #4]
 8018120:	6393      	str	r3, [r2, #56]	; 0x38
}
 8018122:	bf00      	nop
 8018124:	3718      	adds	r7, #24
 8018126:	46bd      	mov	sp, r7
 8018128:	bd80      	pop	{r7, pc}
 801812a:	bf00      	nop
 801812c:	40010000 	.word	0x40010000
 8018130:	40023800 	.word	0x40023800
 8018134:	40000400 	.word	0x40000400
 8018138:	40000c00 	.word	0x40000c00
 801813c:	40001400 	.word	0x40001400
 8018140:	20006930 	.word	0x20006930
 8018144:	40026040 	.word	0x40026040

08018148 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8018148:	b480      	push	{r7}
 801814a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 801814c:	e7fe      	b.n	801814c <NMI_Handler+0x4>

0801814e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 801814e:	b480      	push	{r7}
 8018150:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8018152:	e7fe      	b.n	8018152 <HardFault_Handler+0x4>

08018154 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8018154:	b480      	push	{r7}
 8018156:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8018158:	e7fe      	b.n	8018158 <MemManage_Handler+0x4>

0801815a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 801815a:	b480      	push	{r7}
 801815c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 801815e:	e7fe      	b.n	801815e <BusFault_Handler+0x4>

08018160 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8018160:	b480      	push	{r7}
 8018162:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8018164:	e7fe      	b.n	8018164 <UsageFault_Handler+0x4>

08018166 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8018166:	b480      	push	{r7}
 8018168:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 801816a:	bf00      	nop
 801816c:	46bd      	mov	sp, r7
 801816e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018172:	4770      	bx	lr

08018174 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8018174:	b480      	push	{r7}
 8018176:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8018178:	bf00      	nop
 801817a:	46bd      	mov	sp, r7
 801817c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018180:	4770      	bx	lr

08018182 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8018182:	b480      	push	{r7}
 8018184:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8018186:	bf00      	nop
 8018188:	46bd      	mov	sp, r7
 801818a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801818e:	4770      	bx	lr

08018190 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8018190:	b580      	push	{r7, lr}
 8018192:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8018194:	f000 f90c 	bl	80183b0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8018198:	bf00      	nop
 801819a:	bd80      	pop	{r7, pc}

0801819c <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 801819c:	b580      	push	{r7, lr}
 801819e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim7_up);
 80181a0:	4802      	ldr	r0, [pc, #8]	; (80181ac <DMA1_Stream2_IRQHandler+0x10>)
 80181a2:	f000 fe33 	bl	8018e0c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 80181a6:	bf00      	nop
 80181a8:	bd80      	pop	{r7, pc}
 80181aa:	bf00      	nop
 80181ac:	20006930 	.word	0x20006930

080181b0 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 80181b0:	b580      	push	{r7, lr}
 80181b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1);
 80181b4:	4802      	ldr	r0, [pc, #8]	; (80181c0 <DMA1_Stream5_IRQHandler+0x10>)
 80181b6:	f000 fe29 	bl	8018e0c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 80181ba:	bf00      	nop
 80181bc:	bd80      	pop	{r7, pc}
 80181be:	bf00      	nop
 80181c0:	20006a78 	.word	0x20006a78

080181c4 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80181c4:	b580      	push	{r7, lr}
 80181c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80181c8:	4802      	ldr	r0, [pc, #8]	; (80181d4 <TIM3_IRQHandler+0x10>)
 80181ca:	f004 feff 	bl	801cfcc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80181ce:	bf00      	nop
 80181d0:	bd80      	pop	{r7, pc}
 80181d2:	bf00      	nop
 80181d4:	200069d8 	.word	0x200069d8

080181d8 <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 80181d8:	b580      	push	{r7, lr}
 80181da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 80181dc:	4802      	ldr	r0, [pc, #8]	; (80181e8 <SPI2_IRQHandler+0x10>)
 80181de:	f004 fbd9 	bl	801c994 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 80181e2:	bf00      	nop
 80181e4:	bd80      	pop	{r7, pc}
 80181e6:	bf00      	nop
 80181e8:	20006890 	.word	0x20006890

080181ec <SPI3_IRQHandler>:

/**
  * @brief This function handles SPI3 global interrupt.
  */
void SPI3_IRQHandler(void)
{
 80181ec:	b580      	push	{r7, lr}
 80181ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI3_IRQn 0 */

  /* USER CODE END SPI3_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi3);
 80181f0:	4802      	ldr	r0, [pc, #8]	; (80181fc <SPI3_IRQHandler+0x10>)
 80181f2:	f004 fbcf 	bl	801c994 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI3_IRQn 1 */

  /* USER CODE END SPI3_IRQn 1 */
}
 80181f6:	bf00      	nop
 80181f8:	bd80      	pop	{r7, pc}
 80181fa:	bf00      	nop
 80181fc:	20006a20 	.word	0x20006a20

08018200 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8018200:	b580      	push	{r7, lr}
 8018202:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8018204:	4802      	ldr	r0, [pc, #8]	; (8018210 <DMA2_Stream0_IRQHandler+0x10>)
 8018206:	f000 fe01 	bl	8018e0c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 801820a:	bf00      	nop
 801820c:	bd80      	pop	{r7, pc}
 801820e:	bf00      	nop
 8018210:	20006b6c 	.word	0x20006b6c

08018214 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8018214:	b580      	push	{r7, lr}
 8018216:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8018218:	4802      	ldr	r0, [pc, #8]	; (8018224 <OTG_FS_IRQHandler+0x10>)
 801821a:	f001 fe37 	bl	8019e8c <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 801821e:	bf00      	nop
 8018220:	bd80      	pop	{r7, pc}
 8018222:	bf00      	nop
 8018224:	2000716c 	.word	0x2000716c

08018228 <_sbrk>:
 8018228:	b580      	push	{r7, lr}
 801822a:	b086      	sub	sp, #24
 801822c:	af00      	add	r7, sp, #0
 801822e:	6078      	str	r0, [r7, #4]
 8018230:	4a14      	ldr	r2, [pc, #80]	; (8018284 <_sbrk+0x5c>)
 8018232:	4b15      	ldr	r3, [pc, #84]	; (8018288 <_sbrk+0x60>)
 8018234:	1ad3      	subs	r3, r2, r3
 8018236:	617b      	str	r3, [r7, #20]
 8018238:	697b      	ldr	r3, [r7, #20]
 801823a:	613b      	str	r3, [r7, #16]
 801823c:	4b13      	ldr	r3, [pc, #76]	; (801828c <_sbrk+0x64>)
 801823e:	681b      	ldr	r3, [r3, #0]
 8018240:	2b00      	cmp	r3, #0
 8018242:	d102      	bne.n	801824a <_sbrk+0x22>
 8018244:	4b11      	ldr	r3, [pc, #68]	; (801828c <_sbrk+0x64>)
 8018246:	4a12      	ldr	r2, [pc, #72]	; (8018290 <_sbrk+0x68>)
 8018248:	601a      	str	r2, [r3, #0]
 801824a:	4b10      	ldr	r3, [pc, #64]	; (801828c <_sbrk+0x64>)
 801824c:	681a      	ldr	r2, [r3, #0]
 801824e:	687b      	ldr	r3, [r7, #4]
 8018250:	4413      	add	r3, r2
 8018252:	693a      	ldr	r2, [r7, #16]
 8018254:	429a      	cmp	r2, r3
 8018256:	d207      	bcs.n	8018268 <_sbrk+0x40>
 8018258:	f00a fcb6 	bl	8022bc8 <__errno>
 801825c:	4603      	mov	r3, r0
 801825e:	220c      	movs	r2, #12
 8018260:	601a      	str	r2, [r3, #0]
 8018262:	f04f 33ff 	mov.w	r3, #4294967295
 8018266:	e009      	b.n	801827c <_sbrk+0x54>
 8018268:	4b08      	ldr	r3, [pc, #32]	; (801828c <_sbrk+0x64>)
 801826a:	681b      	ldr	r3, [r3, #0]
 801826c:	60fb      	str	r3, [r7, #12]
 801826e:	4b07      	ldr	r3, [pc, #28]	; (801828c <_sbrk+0x64>)
 8018270:	681a      	ldr	r2, [r3, #0]
 8018272:	687b      	ldr	r3, [r7, #4]
 8018274:	4413      	add	r3, r2
 8018276:	4a05      	ldr	r2, [pc, #20]	; (801828c <_sbrk+0x64>)
 8018278:	6013      	str	r3, [r2, #0]
 801827a:	68fb      	ldr	r3, [r7, #12]
 801827c:	4618      	mov	r0, r3
 801827e:	3718      	adds	r7, #24
 8018280:	46bd      	mov	sp, r7
 8018282:	bd80      	pop	{r7, pc}
 8018284:	20020000 	.word	0x20020000
 8018288:	00000600 	.word	0x00000600
 801828c:	200007a8 	.word	0x200007a8
 8018290:	20007588 	.word	0x20007588

08018294 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8018294:	b480      	push	{r7}
 8018296:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8018298:	4b06      	ldr	r3, [pc, #24]	; (80182b4 <SystemInit+0x20>)
 801829a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801829e:	4a05      	ldr	r2, [pc, #20]	; (80182b4 <SystemInit+0x20>)
 80182a0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80182a4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80182a8:	bf00      	nop
 80182aa:	46bd      	mov	sp, r7
 80182ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80182b0:	4770      	bx	lr
 80182b2:	bf00      	nop
 80182b4:	e000ed00 	.word	0xe000ed00

080182b8 <Reset_Handler>:
 80182b8:	f8df d034 	ldr.w	sp, [pc, #52]	; 80182f0 <LoopFillZerobss+0x12>
 80182bc:	480d      	ldr	r0, [pc, #52]	; (80182f4 <LoopFillZerobss+0x16>)
 80182be:	490e      	ldr	r1, [pc, #56]	; (80182f8 <LoopFillZerobss+0x1a>)
 80182c0:	4a0e      	ldr	r2, [pc, #56]	; (80182fc <LoopFillZerobss+0x1e>)
 80182c2:	2300      	movs	r3, #0
 80182c4:	e002      	b.n	80182cc <LoopCopyDataInit>

080182c6 <CopyDataInit>:
 80182c6:	58d4      	ldr	r4, [r2, r3]
 80182c8:	50c4      	str	r4, [r0, r3]
 80182ca:	3304      	adds	r3, #4

080182cc <LoopCopyDataInit>:
 80182cc:	18c4      	adds	r4, r0, r3
 80182ce:	428c      	cmp	r4, r1
 80182d0:	d3f9      	bcc.n	80182c6 <CopyDataInit>
 80182d2:	4a0b      	ldr	r2, [pc, #44]	; (8018300 <LoopFillZerobss+0x22>)
 80182d4:	4c0b      	ldr	r4, [pc, #44]	; (8018304 <LoopFillZerobss+0x26>)
 80182d6:	2300      	movs	r3, #0
 80182d8:	e001      	b.n	80182de <LoopFillZerobss>

080182da <FillZerobss>:
 80182da:	6013      	str	r3, [r2, #0]
 80182dc:	3204      	adds	r2, #4

080182de <LoopFillZerobss>:
 80182de:	42a2      	cmp	r2, r4
 80182e0:	d3fb      	bcc.n	80182da <FillZerobss>
 80182e2:	f7ff ffd7 	bl	8018294 <SystemInit>
 80182e6:	f00a fc75 	bl	8022bd4 <__libc_init_array>
 80182ea:	f7fe f819 	bl	8016320 <main>
 80182ee:	4770      	bx	lr
 80182f0:	20020000 	.word	0x20020000
 80182f4:	20000000 	.word	0x20000000
 80182f8:	20000760 	.word	0x20000760
 80182fc:	08022e20 	.word	0x08022e20
 8018300:	20000760 	.word	0x20000760
 8018304:	20007584 	.word	0x20007584

08018308 <ADC_IRQHandler>:
 8018308:	e7fe      	b.n	8018308 <ADC_IRQHandler>
	...

0801830c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 801830c:	b580      	push	{r7, lr}
 801830e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8018310:	4b0e      	ldr	r3, [pc, #56]	; (801834c <HAL_Init+0x40>)
 8018312:	681b      	ldr	r3, [r3, #0]
 8018314:	4a0d      	ldr	r2, [pc, #52]	; (801834c <HAL_Init+0x40>)
 8018316:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 801831a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 801831c:	4b0b      	ldr	r3, [pc, #44]	; (801834c <HAL_Init+0x40>)
 801831e:	681b      	ldr	r3, [r3, #0]
 8018320:	4a0a      	ldr	r2, [pc, #40]	; (801834c <HAL_Init+0x40>)
 8018322:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8018326:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8018328:	4b08      	ldr	r3, [pc, #32]	; (801834c <HAL_Init+0x40>)
 801832a:	681b      	ldr	r3, [r3, #0]
 801832c:	4a07      	ldr	r2, [pc, #28]	; (801834c <HAL_Init+0x40>)
 801832e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8018332:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8018334:	2003      	movs	r0, #3
 8018336:	f000 fbc1 	bl	8018abc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 801833a:	2000      	movs	r0, #0
 801833c:	f000 f808 	bl	8018350 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8018340:	f7ff fc8a 	bl	8017c58 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8018344:	2300      	movs	r3, #0
}
 8018346:	4618      	mov	r0, r3
 8018348:	bd80      	pop	{r7, pc}
 801834a:	bf00      	nop
 801834c:	40023c00 	.word	0x40023c00

08018350 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8018350:	b580      	push	{r7, lr}
 8018352:	b082      	sub	sp, #8
 8018354:	af00      	add	r7, sp, #0
 8018356:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8018358:	4b12      	ldr	r3, [pc, #72]	; (80183a4 <HAL_InitTick+0x54>)
 801835a:	681a      	ldr	r2, [r3, #0]
 801835c:	4b12      	ldr	r3, [pc, #72]	; (80183a8 <HAL_InitTick+0x58>)
 801835e:	781b      	ldrb	r3, [r3, #0]
 8018360:	4619      	mov	r1, r3
 8018362:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8018366:	fbb3 f3f1 	udiv	r3, r3, r1
 801836a:	fbb2 f3f3 	udiv	r3, r2, r3
 801836e:	4618      	mov	r0, r3
 8018370:	f000 fbd9 	bl	8018b26 <HAL_SYSTICK_Config>
 8018374:	4603      	mov	r3, r0
 8018376:	2b00      	cmp	r3, #0
 8018378:	d001      	beq.n	801837e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 801837a:	2301      	movs	r3, #1
 801837c:	e00e      	b.n	801839c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 801837e:	687b      	ldr	r3, [r7, #4]
 8018380:	2b0f      	cmp	r3, #15
 8018382:	d80a      	bhi.n	801839a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8018384:	2200      	movs	r2, #0
 8018386:	6879      	ldr	r1, [r7, #4]
 8018388:	f04f 30ff 	mov.w	r0, #4294967295
 801838c:	f000 fba1 	bl	8018ad2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8018390:	4a06      	ldr	r2, [pc, #24]	; (80183ac <HAL_InitTick+0x5c>)
 8018392:	687b      	ldr	r3, [r7, #4]
 8018394:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8018396:	2300      	movs	r3, #0
 8018398:	e000      	b.n	801839c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 801839a:	2301      	movs	r3, #1
}
 801839c:	4618      	mov	r0, r3
 801839e:	3708      	adds	r7, #8
 80183a0:	46bd      	mov	sp, r7
 80183a2:	bd80      	pop	{r7, pc}
 80183a4:	20000588 	.word	0x20000588
 80183a8:	20000590 	.word	0x20000590
 80183ac:	2000058c 	.word	0x2000058c

080183b0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80183b0:	b480      	push	{r7}
 80183b2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80183b4:	4b06      	ldr	r3, [pc, #24]	; (80183d0 <HAL_IncTick+0x20>)
 80183b6:	781b      	ldrb	r3, [r3, #0]
 80183b8:	461a      	mov	r2, r3
 80183ba:	4b06      	ldr	r3, [pc, #24]	; (80183d4 <HAL_IncTick+0x24>)
 80183bc:	681b      	ldr	r3, [r3, #0]
 80183be:	4413      	add	r3, r2
 80183c0:	4a04      	ldr	r2, [pc, #16]	; (80183d4 <HAL_IncTick+0x24>)
 80183c2:	6013      	str	r3, [r2, #0]
}
 80183c4:	bf00      	nop
 80183c6:	46bd      	mov	sp, r7
 80183c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80183cc:	4770      	bx	lr
 80183ce:	bf00      	nop
 80183d0:	20000590 	.word	0x20000590
 80183d4:	20006c78 	.word	0x20006c78

080183d8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80183d8:	b480      	push	{r7}
 80183da:	af00      	add	r7, sp, #0
  return uwTick;
 80183dc:	4b03      	ldr	r3, [pc, #12]	; (80183ec <HAL_GetTick+0x14>)
 80183de:	681b      	ldr	r3, [r3, #0]
}
 80183e0:	4618      	mov	r0, r3
 80183e2:	46bd      	mov	sp, r7
 80183e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80183e8:	4770      	bx	lr
 80183ea:	bf00      	nop
 80183ec:	20006c78 	.word	0x20006c78

080183f0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80183f0:	b580      	push	{r7, lr}
 80183f2:	b084      	sub	sp, #16
 80183f4:	af00      	add	r7, sp, #0
 80183f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80183f8:	f7ff ffee 	bl	80183d8 <HAL_GetTick>
 80183fc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80183fe:	687b      	ldr	r3, [r7, #4]
 8018400:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8018402:	68fb      	ldr	r3, [r7, #12]
 8018404:	f1b3 3fff 	cmp.w	r3, #4294967295
 8018408:	d005      	beq.n	8018416 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 801840a:	4b0a      	ldr	r3, [pc, #40]	; (8018434 <HAL_Delay+0x44>)
 801840c:	781b      	ldrb	r3, [r3, #0]
 801840e:	461a      	mov	r2, r3
 8018410:	68fb      	ldr	r3, [r7, #12]
 8018412:	4413      	add	r3, r2
 8018414:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8018416:	bf00      	nop
 8018418:	f7ff ffde 	bl	80183d8 <HAL_GetTick>
 801841c:	4602      	mov	r2, r0
 801841e:	68bb      	ldr	r3, [r7, #8]
 8018420:	1ad3      	subs	r3, r2, r3
 8018422:	68fa      	ldr	r2, [r7, #12]
 8018424:	429a      	cmp	r2, r3
 8018426:	d8f7      	bhi.n	8018418 <HAL_Delay+0x28>
  {
  }
}
 8018428:	bf00      	nop
 801842a:	bf00      	nop
 801842c:	3710      	adds	r7, #16
 801842e:	46bd      	mov	sp, r7
 8018430:	bd80      	pop	{r7, pc}
 8018432:	bf00      	nop
 8018434:	20000590 	.word	0x20000590

08018438 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8018438:	b580      	push	{r7, lr}
 801843a:	b084      	sub	sp, #16
 801843c:	af00      	add	r7, sp, #0
 801843e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8018440:	2300      	movs	r3, #0
 8018442:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8018444:	687b      	ldr	r3, [r7, #4]
 8018446:	2b00      	cmp	r3, #0
 8018448:	d101      	bne.n	801844e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 801844a:	2301      	movs	r3, #1
 801844c:	e033      	b.n	80184b6 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 801844e:	687b      	ldr	r3, [r7, #4]
 8018450:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8018452:	2b00      	cmp	r3, #0
 8018454:	d109      	bne.n	801846a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8018456:	6878      	ldr	r0, [r7, #4]
 8018458:	f7ff fc26 	bl	8017ca8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 801845c:	687b      	ldr	r3, [r7, #4]
 801845e:	2200      	movs	r2, #0
 8018460:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8018462:	687b      	ldr	r3, [r7, #4]
 8018464:	2200      	movs	r2, #0
 8018466:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 801846a:	687b      	ldr	r3, [r7, #4]
 801846c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801846e:	f003 0310 	and.w	r3, r3, #16
 8018472:	2b00      	cmp	r3, #0
 8018474:	d118      	bne.n	80184a8 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8018476:	687b      	ldr	r3, [r7, #4]
 8018478:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801847a:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 801847e:	f023 0302 	bic.w	r3, r3, #2
 8018482:	f043 0202 	orr.w	r2, r3, #2
 8018486:	687b      	ldr	r3, [r7, #4]
 8018488:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 801848a:	6878      	ldr	r0, [r7, #4]
 801848c:	f000 f94a 	bl	8018724 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8018490:	687b      	ldr	r3, [r7, #4]
 8018492:	2200      	movs	r2, #0
 8018494:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8018496:	687b      	ldr	r3, [r7, #4]
 8018498:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801849a:	f023 0303 	bic.w	r3, r3, #3
 801849e:	f043 0201 	orr.w	r2, r3, #1
 80184a2:	687b      	ldr	r3, [r7, #4]
 80184a4:	641a      	str	r2, [r3, #64]	; 0x40
 80184a6:	e001      	b.n	80184ac <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80184a8:	2301      	movs	r3, #1
 80184aa:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80184ac:	687b      	ldr	r3, [r7, #4]
 80184ae:	2200      	movs	r2, #0
 80184b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80184b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80184b6:	4618      	mov	r0, r3
 80184b8:	3710      	adds	r7, #16
 80184ba:	46bd      	mov	sp, r7
 80184bc:	bd80      	pop	{r7, pc}
	...

080184c0 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80184c0:	b480      	push	{r7}
 80184c2:	b085      	sub	sp, #20
 80184c4:	af00      	add	r7, sp, #0
 80184c6:	6078      	str	r0, [r7, #4]
 80184c8:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80184ca:	2300      	movs	r3, #0
 80184cc:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80184ce:	687b      	ldr	r3, [r7, #4]
 80184d0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80184d4:	2b01      	cmp	r3, #1
 80184d6:	d101      	bne.n	80184dc <HAL_ADC_ConfigChannel+0x1c>
 80184d8:	2302      	movs	r3, #2
 80184da:	e113      	b.n	8018704 <HAL_ADC_ConfigChannel+0x244>
 80184dc:	687b      	ldr	r3, [r7, #4]
 80184de:	2201      	movs	r2, #1
 80184e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80184e4:	683b      	ldr	r3, [r7, #0]
 80184e6:	681b      	ldr	r3, [r3, #0]
 80184e8:	2b09      	cmp	r3, #9
 80184ea:	d925      	bls.n	8018538 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80184ec:	687b      	ldr	r3, [r7, #4]
 80184ee:	681b      	ldr	r3, [r3, #0]
 80184f0:	68d9      	ldr	r1, [r3, #12]
 80184f2:	683b      	ldr	r3, [r7, #0]
 80184f4:	681b      	ldr	r3, [r3, #0]
 80184f6:	b29b      	uxth	r3, r3
 80184f8:	461a      	mov	r2, r3
 80184fa:	4613      	mov	r3, r2
 80184fc:	005b      	lsls	r3, r3, #1
 80184fe:	4413      	add	r3, r2
 8018500:	3b1e      	subs	r3, #30
 8018502:	2207      	movs	r2, #7
 8018504:	fa02 f303 	lsl.w	r3, r2, r3
 8018508:	43da      	mvns	r2, r3
 801850a:	687b      	ldr	r3, [r7, #4]
 801850c:	681b      	ldr	r3, [r3, #0]
 801850e:	400a      	ands	r2, r1
 8018510:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8018512:	687b      	ldr	r3, [r7, #4]
 8018514:	681b      	ldr	r3, [r3, #0]
 8018516:	68d9      	ldr	r1, [r3, #12]
 8018518:	683b      	ldr	r3, [r7, #0]
 801851a:	689a      	ldr	r2, [r3, #8]
 801851c:	683b      	ldr	r3, [r7, #0]
 801851e:	681b      	ldr	r3, [r3, #0]
 8018520:	b29b      	uxth	r3, r3
 8018522:	4618      	mov	r0, r3
 8018524:	4603      	mov	r3, r0
 8018526:	005b      	lsls	r3, r3, #1
 8018528:	4403      	add	r3, r0
 801852a:	3b1e      	subs	r3, #30
 801852c:	409a      	lsls	r2, r3
 801852e:	687b      	ldr	r3, [r7, #4]
 8018530:	681b      	ldr	r3, [r3, #0]
 8018532:	430a      	orrs	r2, r1
 8018534:	60da      	str	r2, [r3, #12]
 8018536:	e022      	b.n	801857e <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8018538:	687b      	ldr	r3, [r7, #4]
 801853a:	681b      	ldr	r3, [r3, #0]
 801853c:	6919      	ldr	r1, [r3, #16]
 801853e:	683b      	ldr	r3, [r7, #0]
 8018540:	681b      	ldr	r3, [r3, #0]
 8018542:	b29b      	uxth	r3, r3
 8018544:	461a      	mov	r2, r3
 8018546:	4613      	mov	r3, r2
 8018548:	005b      	lsls	r3, r3, #1
 801854a:	4413      	add	r3, r2
 801854c:	2207      	movs	r2, #7
 801854e:	fa02 f303 	lsl.w	r3, r2, r3
 8018552:	43da      	mvns	r2, r3
 8018554:	687b      	ldr	r3, [r7, #4]
 8018556:	681b      	ldr	r3, [r3, #0]
 8018558:	400a      	ands	r2, r1
 801855a:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 801855c:	687b      	ldr	r3, [r7, #4]
 801855e:	681b      	ldr	r3, [r3, #0]
 8018560:	6919      	ldr	r1, [r3, #16]
 8018562:	683b      	ldr	r3, [r7, #0]
 8018564:	689a      	ldr	r2, [r3, #8]
 8018566:	683b      	ldr	r3, [r7, #0]
 8018568:	681b      	ldr	r3, [r3, #0]
 801856a:	b29b      	uxth	r3, r3
 801856c:	4618      	mov	r0, r3
 801856e:	4603      	mov	r3, r0
 8018570:	005b      	lsls	r3, r3, #1
 8018572:	4403      	add	r3, r0
 8018574:	409a      	lsls	r2, r3
 8018576:	687b      	ldr	r3, [r7, #4]
 8018578:	681b      	ldr	r3, [r3, #0]
 801857a:	430a      	orrs	r2, r1
 801857c:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 801857e:	683b      	ldr	r3, [r7, #0]
 8018580:	685b      	ldr	r3, [r3, #4]
 8018582:	2b06      	cmp	r3, #6
 8018584:	d824      	bhi.n	80185d0 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8018586:	687b      	ldr	r3, [r7, #4]
 8018588:	681b      	ldr	r3, [r3, #0]
 801858a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 801858c:	683b      	ldr	r3, [r7, #0]
 801858e:	685a      	ldr	r2, [r3, #4]
 8018590:	4613      	mov	r3, r2
 8018592:	009b      	lsls	r3, r3, #2
 8018594:	4413      	add	r3, r2
 8018596:	3b05      	subs	r3, #5
 8018598:	221f      	movs	r2, #31
 801859a:	fa02 f303 	lsl.w	r3, r2, r3
 801859e:	43da      	mvns	r2, r3
 80185a0:	687b      	ldr	r3, [r7, #4]
 80185a2:	681b      	ldr	r3, [r3, #0]
 80185a4:	400a      	ands	r2, r1
 80185a6:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80185a8:	687b      	ldr	r3, [r7, #4]
 80185aa:	681b      	ldr	r3, [r3, #0]
 80185ac:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80185ae:	683b      	ldr	r3, [r7, #0]
 80185b0:	681b      	ldr	r3, [r3, #0]
 80185b2:	b29b      	uxth	r3, r3
 80185b4:	4618      	mov	r0, r3
 80185b6:	683b      	ldr	r3, [r7, #0]
 80185b8:	685a      	ldr	r2, [r3, #4]
 80185ba:	4613      	mov	r3, r2
 80185bc:	009b      	lsls	r3, r3, #2
 80185be:	4413      	add	r3, r2
 80185c0:	3b05      	subs	r3, #5
 80185c2:	fa00 f203 	lsl.w	r2, r0, r3
 80185c6:	687b      	ldr	r3, [r7, #4]
 80185c8:	681b      	ldr	r3, [r3, #0]
 80185ca:	430a      	orrs	r2, r1
 80185cc:	635a      	str	r2, [r3, #52]	; 0x34
 80185ce:	e04c      	b.n	801866a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80185d0:	683b      	ldr	r3, [r7, #0]
 80185d2:	685b      	ldr	r3, [r3, #4]
 80185d4:	2b0c      	cmp	r3, #12
 80185d6:	d824      	bhi.n	8018622 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80185d8:	687b      	ldr	r3, [r7, #4]
 80185da:	681b      	ldr	r3, [r3, #0]
 80185dc:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80185de:	683b      	ldr	r3, [r7, #0]
 80185e0:	685a      	ldr	r2, [r3, #4]
 80185e2:	4613      	mov	r3, r2
 80185e4:	009b      	lsls	r3, r3, #2
 80185e6:	4413      	add	r3, r2
 80185e8:	3b23      	subs	r3, #35	; 0x23
 80185ea:	221f      	movs	r2, #31
 80185ec:	fa02 f303 	lsl.w	r3, r2, r3
 80185f0:	43da      	mvns	r2, r3
 80185f2:	687b      	ldr	r3, [r7, #4]
 80185f4:	681b      	ldr	r3, [r3, #0]
 80185f6:	400a      	ands	r2, r1
 80185f8:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80185fa:	687b      	ldr	r3, [r7, #4]
 80185fc:	681b      	ldr	r3, [r3, #0]
 80185fe:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8018600:	683b      	ldr	r3, [r7, #0]
 8018602:	681b      	ldr	r3, [r3, #0]
 8018604:	b29b      	uxth	r3, r3
 8018606:	4618      	mov	r0, r3
 8018608:	683b      	ldr	r3, [r7, #0]
 801860a:	685a      	ldr	r2, [r3, #4]
 801860c:	4613      	mov	r3, r2
 801860e:	009b      	lsls	r3, r3, #2
 8018610:	4413      	add	r3, r2
 8018612:	3b23      	subs	r3, #35	; 0x23
 8018614:	fa00 f203 	lsl.w	r2, r0, r3
 8018618:	687b      	ldr	r3, [r7, #4]
 801861a:	681b      	ldr	r3, [r3, #0]
 801861c:	430a      	orrs	r2, r1
 801861e:	631a      	str	r2, [r3, #48]	; 0x30
 8018620:	e023      	b.n	801866a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8018622:	687b      	ldr	r3, [r7, #4]
 8018624:	681b      	ldr	r3, [r3, #0]
 8018626:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8018628:	683b      	ldr	r3, [r7, #0]
 801862a:	685a      	ldr	r2, [r3, #4]
 801862c:	4613      	mov	r3, r2
 801862e:	009b      	lsls	r3, r3, #2
 8018630:	4413      	add	r3, r2
 8018632:	3b41      	subs	r3, #65	; 0x41
 8018634:	221f      	movs	r2, #31
 8018636:	fa02 f303 	lsl.w	r3, r2, r3
 801863a:	43da      	mvns	r2, r3
 801863c:	687b      	ldr	r3, [r7, #4]
 801863e:	681b      	ldr	r3, [r3, #0]
 8018640:	400a      	ands	r2, r1
 8018642:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8018644:	687b      	ldr	r3, [r7, #4]
 8018646:	681b      	ldr	r3, [r3, #0]
 8018648:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 801864a:	683b      	ldr	r3, [r7, #0]
 801864c:	681b      	ldr	r3, [r3, #0]
 801864e:	b29b      	uxth	r3, r3
 8018650:	4618      	mov	r0, r3
 8018652:	683b      	ldr	r3, [r7, #0]
 8018654:	685a      	ldr	r2, [r3, #4]
 8018656:	4613      	mov	r3, r2
 8018658:	009b      	lsls	r3, r3, #2
 801865a:	4413      	add	r3, r2
 801865c:	3b41      	subs	r3, #65	; 0x41
 801865e:	fa00 f203 	lsl.w	r2, r0, r3
 8018662:	687b      	ldr	r3, [r7, #4]
 8018664:	681b      	ldr	r3, [r3, #0]
 8018666:	430a      	orrs	r2, r1
 8018668:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 801866a:	4b29      	ldr	r3, [pc, #164]	; (8018710 <HAL_ADC_ConfigChannel+0x250>)
 801866c:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 801866e:	687b      	ldr	r3, [r7, #4]
 8018670:	681b      	ldr	r3, [r3, #0]
 8018672:	4a28      	ldr	r2, [pc, #160]	; (8018714 <HAL_ADC_ConfigChannel+0x254>)
 8018674:	4293      	cmp	r3, r2
 8018676:	d10f      	bne.n	8018698 <HAL_ADC_ConfigChannel+0x1d8>
 8018678:	683b      	ldr	r3, [r7, #0]
 801867a:	681b      	ldr	r3, [r3, #0]
 801867c:	2b12      	cmp	r3, #18
 801867e:	d10b      	bne.n	8018698 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8018680:	68fb      	ldr	r3, [r7, #12]
 8018682:	685b      	ldr	r3, [r3, #4]
 8018684:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8018688:	68fb      	ldr	r3, [r7, #12]
 801868a:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 801868c:	68fb      	ldr	r3, [r7, #12]
 801868e:	685b      	ldr	r3, [r3, #4]
 8018690:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8018694:	68fb      	ldr	r3, [r7, #12]
 8018696:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8018698:	687b      	ldr	r3, [r7, #4]
 801869a:	681b      	ldr	r3, [r3, #0]
 801869c:	4a1d      	ldr	r2, [pc, #116]	; (8018714 <HAL_ADC_ConfigChannel+0x254>)
 801869e:	4293      	cmp	r3, r2
 80186a0:	d12b      	bne.n	80186fa <HAL_ADC_ConfigChannel+0x23a>
 80186a2:	683b      	ldr	r3, [r7, #0]
 80186a4:	681b      	ldr	r3, [r3, #0]
 80186a6:	4a1c      	ldr	r2, [pc, #112]	; (8018718 <HAL_ADC_ConfigChannel+0x258>)
 80186a8:	4293      	cmp	r3, r2
 80186aa:	d003      	beq.n	80186b4 <HAL_ADC_ConfigChannel+0x1f4>
 80186ac:	683b      	ldr	r3, [r7, #0]
 80186ae:	681b      	ldr	r3, [r3, #0]
 80186b0:	2b11      	cmp	r3, #17
 80186b2:	d122      	bne.n	80186fa <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 80186b4:	68fb      	ldr	r3, [r7, #12]
 80186b6:	685b      	ldr	r3, [r3, #4]
 80186b8:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80186bc:	68fb      	ldr	r3, [r7, #12]
 80186be:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80186c0:	68fb      	ldr	r3, [r7, #12]
 80186c2:	685b      	ldr	r3, [r3, #4]
 80186c4:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80186c8:	68fb      	ldr	r3, [r7, #12]
 80186ca:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80186cc:	683b      	ldr	r3, [r7, #0]
 80186ce:	681b      	ldr	r3, [r3, #0]
 80186d0:	4a11      	ldr	r2, [pc, #68]	; (8018718 <HAL_ADC_ConfigChannel+0x258>)
 80186d2:	4293      	cmp	r3, r2
 80186d4:	d111      	bne.n	80186fa <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80186d6:	4b11      	ldr	r3, [pc, #68]	; (801871c <HAL_ADC_ConfigChannel+0x25c>)
 80186d8:	681b      	ldr	r3, [r3, #0]
 80186da:	4a11      	ldr	r2, [pc, #68]	; (8018720 <HAL_ADC_ConfigChannel+0x260>)
 80186dc:	fba2 2303 	umull	r2, r3, r2, r3
 80186e0:	0c9a      	lsrs	r2, r3, #18
 80186e2:	4613      	mov	r3, r2
 80186e4:	009b      	lsls	r3, r3, #2
 80186e6:	4413      	add	r3, r2
 80186e8:	005b      	lsls	r3, r3, #1
 80186ea:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80186ec:	e002      	b.n	80186f4 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 80186ee:	68bb      	ldr	r3, [r7, #8]
 80186f0:	3b01      	subs	r3, #1
 80186f2:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80186f4:	68bb      	ldr	r3, [r7, #8]
 80186f6:	2b00      	cmp	r3, #0
 80186f8:	d1f9      	bne.n	80186ee <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80186fa:	687b      	ldr	r3, [r7, #4]
 80186fc:	2200      	movs	r2, #0
 80186fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8018702:	2300      	movs	r3, #0
}
 8018704:	4618      	mov	r0, r3
 8018706:	3714      	adds	r7, #20
 8018708:	46bd      	mov	sp, r7
 801870a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801870e:	4770      	bx	lr
 8018710:	40012300 	.word	0x40012300
 8018714:	40012000 	.word	0x40012000
 8018718:	10000012 	.word	0x10000012
 801871c:	20000588 	.word	0x20000588
 8018720:	431bde83 	.word	0x431bde83

08018724 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8018724:	b480      	push	{r7}
 8018726:	b085      	sub	sp, #20
 8018728:	af00      	add	r7, sp, #0
 801872a:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 801872c:	4b79      	ldr	r3, [pc, #484]	; (8018914 <ADC_Init+0x1f0>)
 801872e:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8018730:	68fb      	ldr	r3, [r7, #12]
 8018732:	685b      	ldr	r3, [r3, #4]
 8018734:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8018738:	68fb      	ldr	r3, [r7, #12]
 801873a:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 801873c:	68fb      	ldr	r3, [r7, #12]
 801873e:	685a      	ldr	r2, [r3, #4]
 8018740:	687b      	ldr	r3, [r7, #4]
 8018742:	685b      	ldr	r3, [r3, #4]
 8018744:	431a      	orrs	r2, r3
 8018746:	68fb      	ldr	r3, [r7, #12]
 8018748:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 801874a:	687b      	ldr	r3, [r7, #4]
 801874c:	681b      	ldr	r3, [r3, #0]
 801874e:	685a      	ldr	r2, [r3, #4]
 8018750:	687b      	ldr	r3, [r7, #4]
 8018752:	681b      	ldr	r3, [r3, #0]
 8018754:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8018758:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 801875a:	687b      	ldr	r3, [r7, #4]
 801875c:	681b      	ldr	r3, [r3, #0]
 801875e:	6859      	ldr	r1, [r3, #4]
 8018760:	687b      	ldr	r3, [r7, #4]
 8018762:	691b      	ldr	r3, [r3, #16]
 8018764:	021a      	lsls	r2, r3, #8
 8018766:	687b      	ldr	r3, [r7, #4]
 8018768:	681b      	ldr	r3, [r3, #0]
 801876a:	430a      	orrs	r2, r1
 801876c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 801876e:	687b      	ldr	r3, [r7, #4]
 8018770:	681b      	ldr	r3, [r3, #0]
 8018772:	685a      	ldr	r2, [r3, #4]
 8018774:	687b      	ldr	r3, [r7, #4]
 8018776:	681b      	ldr	r3, [r3, #0]
 8018778:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 801877c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 801877e:	687b      	ldr	r3, [r7, #4]
 8018780:	681b      	ldr	r3, [r3, #0]
 8018782:	6859      	ldr	r1, [r3, #4]
 8018784:	687b      	ldr	r3, [r7, #4]
 8018786:	689a      	ldr	r2, [r3, #8]
 8018788:	687b      	ldr	r3, [r7, #4]
 801878a:	681b      	ldr	r3, [r3, #0]
 801878c:	430a      	orrs	r2, r1
 801878e:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8018790:	687b      	ldr	r3, [r7, #4]
 8018792:	681b      	ldr	r3, [r3, #0]
 8018794:	689a      	ldr	r2, [r3, #8]
 8018796:	687b      	ldr	r3, [r7, #4]
 8018798:	681b      	ldr	r3, [r3, #0]
 801879a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 801879e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80187a0:	687b      	ldr	r3, [r7, #4]
 80187a2:	681b      	ldr	r3, [r3, #0]
 80187a4:	6899      	ldr	r1, [r3, #8]
 80187a6:	687b      	ldr	r3, [r7, #4]
 80187a8:	68da      	ldr	r2, [r3, #12]
 80187aa:	687b      	ldr	r3, [r7, #4]
 80187ac:	681b      	ldr	r3, [r3, #0]
 80187ae:	430a      	orrs	r2, r1
 80187b0:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80187b2:	687b      	ldr	r3, [r7, #4]
 80187b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80187b6:	4a58      	ldr	r2, [pc, #352]	; (8018918 <ADC_Init+0x1f4>)
 80187b8:	4293      	cmp	r3, r2
 80187ba:	d022      	beq.n	8018802 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80187bc:	687b      	ldr	r3, [r7, #4]
 80187be:	681b      	ldr	r3, [r3, #0]
 80187c0:	689a      	ldr	r2, [r3, #8]
 80187c2:	687b      	ldr	r3, [r7, #4]
 80187c4:	681b      	ldr	r3, [r3, #0]
 80187c6:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80187ca:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80187cc:	687b      	ldr	r3, [r7, #4]
 80187ce:	681b      	ldr	r3, [r3, #0]
 80187d0:	6899      	ldr	r1, [r3, #8]
 80187d2:	687b      	ldr	r3, [r7, #4]
 80187d4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80187d6:	687b      	ldr	r3, [r7, #4]
 80187d8:	681b      	ldr	r3, [r3, #0]
 80187da:	430a      	orrs	r2, r1
 80187dc:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80187de:	687b      	ldr	r3, [r7, #4]
 80187e0:	681b      	ldr	r3, [r3, #0]
 80187e2:	689a      	ldr	r2, [r3, #8]
 80187e4:	687b      	ldr	r3, [r7, #4]
 80187e6:	681b      	ldr	r3, [r3, #0]
 80187e8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80187ec:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80187ee:	687b      	ldr	r3, [r7, #4]
 80187f0:	681b      	ldr	r3, [r3, #0]
 80187f2:	6899      	ldr	r1, [r3, #8]
 80187f4:	687b      	ldr	r3, [r7, #4]
 80187f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80187f8:	687b      	ldr	r3, [r7, #4]
 80187fa:	681b      	ldr	r3, [r3, #0]
 80187fc:	430a      	orrs	r2, r1
 80187fe:	609a      	str	r2, [r3, #8]
 8018800:	e00f      	b.n	8018822 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8018802:	687b      	ldr	r3, [r7, #4]
 8018804:	681b      	ldr	r3, [r3, #0]
 8018806:	689a      	ldr	r2, [r3, #8]
 8018808:	687b      	ldr	r3, [r7, #4]
 801880a:	681b      	ldr	r3, [r3, #0]
 801880c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8018810:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8018812:	687b      	ldr	r3, [r7, #4]
 8018814:	681b      	ldr	r3, [r3, #0]
 8018816:	689a      	ldr	r2, [r3, #8]
 8018818:	687b      	ldr	r3, [r7, #4]
 801881a:	681b      	ldr	r3, [r3, #0]
 801881c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8018820:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8018822:	687b      	ldr	r3, [r7, #4]
 8018824:	681b      	ldr	r3, [r3, #0]
 8018826:	689a      	ldr	r2, [r3, #8]
 8018828:	687b      	ldr	r3, [r7, #4]
 801882a:	681b      	ldr	r3, [r3, #0]
 801882c:	f022 0202 	bic.w	r2, r2, #2
 8018830:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8018832:	687b      	ldr	r3, [r7, #4]
 8018834:	681b      	ldr	r3, [r3, #0]
 8018836:	6899      	ldr	r1, [r3, #8]
 8018838:	687b      	ldr	r3, [r7, #4]
 801883a:	7e1b      	ldrb	r3, [r3, #24]
 801883c:	005a      	lsls	r2, r3, #1
 801883e:	687b      	ldr	r3, [r7, #4]
 8018840:	681b      	ldr	r3, [r3, #0]
 8018842:	430a      	orrs	r2, r1
 8018844:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8018846:	687b      	ldr	r3, [r7, #4]
 8018848:	f893 3020 	ldrb.w	r3, [r3, #32]
 801884c:	2b00      	cmp	r3, #0
 801884e:	d01b      	beq.n	8018888 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8018850:	687b      	ldr	r3, [r7, #4]
 8018852:	681b      	ldr	r3, [r3, #0]
 8018854:	685a      	ldr	r2, [r3, #4]
 8018856:	687b      	ldr	r3, [r7, #4]
 8018858:	681b      	ldr	r3, [r3, #0]
 801885a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 801885e:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8018860:	687b      	ldr	r3, [r7, #4]
 8018862:	681b      	ldr	r3, [r3, #0]
 8018864:	685a      	ldr	r2, [r3, #4]
 8018866:	687b      	ldr	r3, [r7, #4]
 8018868:	681b      	ldr	r3, [r3, #0]
 801886a:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 801886e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8018870:	687b      	ldr	r3, [r7, #4]
 8018872:	681b      	ldr	r3, [r3, #0]
 8018874:	6859      	ldr	r1, [r3, #4]
 8018876:	687b      	ldr	r3, [r7, #4]
 8018878:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801887a:	3b01      	subs	r3, #1
 801887c:	035a      	lsls	r2, r3, #13
 801887e:	687b      	ldr	r3, [r7, #4]
 8018880:	681b      	ldr	r3, [r3, #0]
 8018882:	430a      	orrs	r2, r1
 8018884:	605a      	str	r2, [r3, #4]
 8018886:	e007      	b.n	8018898 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8018888:	687b      	ldr	r3, [r7, #4]
 801888a:	681b      	ldr	r3, [r3, #0]
 801888c:	685a      	ldr	r2, [r3, #4]
 801888e:	687b      	ldr	r3, [r7, #4]
 8018890:	681b      	ldr	r3, [r3, #0]
 8018892:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8018896:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8018898:	687b      	ldr	r3, [r7, #4]
 801889a:	681b      	ldr	r3, [r3, #0]
 801889c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801889e:	687b      	ldr	r3, [r7, #4]
 80188a0:	681b      	ldr	r3, [r3, #0]
 80188a2:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80188a6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80188a8:	687b      	ldr	r3, [r7, #4]
 80188aa:	681b      	ldr	r3, [r3, #0]
 80188ac:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80188ae:	687b      	ldr	r3, [r7, #4]
 80188b0:	69db      	ldr	r3, [r3, #28]
 80188b2:	3b01      	subs	r3, #1
 80188b4:	051a      	lsls	r2, r3, #20
 80188b6:	687b      	ldr	r3, [r7, #4]
 80188b8:	681b      	ldr	r3, [r3, #0]
 80188ba:	430a      	orrs	r2, r1
 80188bc:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80188be:	687b      	ldr	r3, [r7, #4]
 80188c0:	681b      	ldr	r3, [r3, #0]
 80188c2:	689a      	ldr	r2, [r3, #8]
 80188c4:	687b      	ldr	r3, [r7, #4]
 80188c6:	681b      	ldr	r3, [r3, #0]
 80188c8:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80188cc:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80188ce:	687b      	ldr	r3, [r7, #4]
 80188d0:	681b      	ldr	r3, [r3, #0]
 80188d2:	6899      	ldr	r1, [r3, #8]
 80188d4:	687b      	ldr	r3, [r7, #4]
 80188d6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80188da:	025a      	lsls	r2, r3, #9
 80188dc:	687b      	ldr	r3, [r7, #4]
 80188de:	681b      	ldr	r3, [r3, #0]
 80188e0:	430a      	orrs	r2, r1
 80188e2:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80188e4:	687b      	ldr	r3, [r7, #4]
 80188e6:	681b      	ldr	r3, [r3, #0]
 80188e8:	689a      	ldr	r2, [r3, #8]
 80188ea:	687b      	ldr	r3, [r7, #4]
 80188ec:	681b      	ldr	r3, [r3, #0]
 80188ee:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80188f2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80188f4:	687b      	ldr	r3, [r7, #4]
 80188f6:	681b      	ldr	r3, [r3, #0]
 80188f8:	6899      	ldr	r1, [r3, #8]
 80188fa:	687b      	ldr	r3, [r7, #4]
 80188fc:	695b      	ldr	r3, [r3, #20]
 80188fe:	029a      	lsls	r2, r3, #10
 8018900:	687b      	ldr	r3, [r7, #4]
 8018902:	681b      	ldr	r3, [r3, #0]
 8018904:	430a      	orrs	r2, r1
 8018906:	609a      	str	r2, [r3, #8]
}
 8018908:	bf00      	nop
 801890a:	3714      	adds	r7, #20
 801890c:	46bd      	mov	sp, r7
 801890e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018912:	4770      	bx	lr
 8018914:	40012300 	.word	0x40012300
 8018918:	0f000001 	.word	0x0f000001

0801891c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 801891c:	b480      	push	{r7}
 801891e:	b085      	sub	sp, #20
 8018920:	af00      	add	r7, sp, #0
 8018922:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8018924:	687b      	ldr	r3, [r7, #4]
 8018926:	f003 0307 	and.w	r3, r3, #7
 801892a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 801892c:	4b0c      	ldr	r3, [pc, #48]	; (8018960 <__NVIC_SetPriorityGrouping+0x44>)
 801892e:	68db      	ldr	r3, [r3, #12]
 8018930:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8018932:	68ba      	ldr	r2, [r7, #8]
 8018934:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8018938:	4013      	ands	r3, r2
 801893a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 801893c:	68fb      	ldr	r3, [r7, #12]
 801893e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8018940:	68bb      	ldr	r3, [r7, #8]
 8018942:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8018944:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8018948:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 801894c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 801894e:	4a04      	ldr	r2, [pc, #16]	; (8018960 <__NVIC_SetPriorityGrouping+0x44>)
 8018950:	68bb      	ldr	r3, [r7, #8]
 8018952:	60d3      	str	r3, [r2, #12]
}
 8018954:	bf00      	nop
 8018956:	3714      	adds	r7, #20
 8018958:	46bd      	mov	sp, r7
 801895a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801895e:	4770      	bx	lr
 8018960:	e000ed00 	.word	0xe000ed00

08018964 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8018964:	b480      	push	{r7}
 8018966:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8018968:	4b04      	ldr	r3, [pc, #16]	; (801897c <__NVIC_GetPriorityGrouping+0x18>)
 801896a:	68db      	ldr	r3, [r3, #12]
 801896c:	0a1b      	lsrs	r3, r3, #8
 801896e:	f003 0307 	and.w	r3, r3, #7
}
 8018972:	4618      	mov	r0, r3
 8018974:	46bd      	mov	sp, r7
 8018976:	f85d 7b04 	ldr.w	r7, [sp], #4
 801897a:	4770      	bx	lr
 801897c:	e000ed00 	.word	0xe000ed00

08018980 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8018980:	b480      	push	{r7}
 8018982:	b083      	sub	sp, #12
 8018984:	af00      	add	r7, sp, #0
 8018986:	4603      	mov	r3, r0
 8018988:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 801898a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801898e:	2b00      	cmp	r3, #0
 8018990:	db0b      	blt.n	80189aa <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8018992:	79fb      	ldrb	r3, [r7, #7]
 8018994:	f003 021f 	and.w	r2, r3, #31
 8018998:	4907      	ldr	r1, [pc, #28]	; (80189b8 <__NVIC_EnableIRQ+0x38>)
 801899a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801899e:	095b      	lsrs	r3, r3, #5
 80189a0:	2001      	movs	r0, #1
 80189a2:	fa00 f202 	lsl.w	r2, r0, r2
 80189a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80189aa:	bf00      	nop
 80189ac:	370c      	adds	r7, #12
 80189ae:	46bd      	mov	sp, r7
 80189b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80189b4:	4770      	bx	lr
 80189b6:	bf00      	nop
 80189b8:	e000e100 	.word	0xe000e100

080189bc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80189bc:	b480      	push	{r7}
 80189be:	b083      	sub	sp, #12
 80189c0:	af00      	add	r7, sp, #0
 80189c2:	4603      	mov	r3, r0
 80189c4:	6039      	str	r1, [r7, #0]
 80189c6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80189c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80189cc:	2b00      	cmp	r3, #0
 80189ce:	db0a      	blt.n	80189e6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80189d0:	683b      	ldr	r3, [r7, #0]
 80189d2:	b2da      	uxtb	r2, r3
 80189d4:	490c      	ldr	r1, [pc, #48]	; (8018a08 <__NVIC_SetPriority+0x4c>)
 80189d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80189da:	0112      	lsls	r2, r2, #4
 80189dc:	b2d2      	uxtb	r2, r2
 80189de:	440b      	add	r3, r1
 80189e0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80189e4:	e00a      	b.n	80189fc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80189e6:	683b      	ldr	r3, [r7, #0]
 80189e8:	b2da      	uxtb	r2, r3
 80189ea:	4908      	ldr	r1, [pc, #32]	; (8018a0c <__NVIC_SetPriority+0x50>)
 80189ec:	79fb      	ldrb	r3, [r7, #7]
 80189ee:	f003 030f 	and.w	r3, r3, #15
 80189f2:	3b04      	subs	r3, #4
 80189f4:	0112      	lsls	r2, r2, #4
 80189f6:	b2d2      	uxtb	r2, r2
 80189f8:	440b      	add	r3, r1
 80189fa:	761a      	strb	r2, [r3, #24]
}
 80189fc:	bf00      	nop
 80189fe:	370c      	adds	r7, #12
 8018a00:	46bd      	mov	sp, r7
 8018a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018a06:	4770      	bx	lr
 8018a08:	e000e100 	.word	0xe000e100
 8018a0c:	e000ed00 	.word	0xe000ed00

08018a10 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8018a10:	b480      	push	{r7}
 8018a12:	b089      	sub	sp, #36	; 0x24
 8018a14:	af00      	add	r7, sp, #0
 8018a16:	60f8      	str	r0, [r7, #12]
 8018a18:	60b9      	str	r1, [r7, #8]
 8018a1a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8018a1c:	68fb      	ldr	r3, [r7, #12]
 8018a1e:	f003 0307 	and.w	r3, r3, #7
 8018a22:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8018a24:	69fb      	ldr	r3, [r7, #28]
 8018a26:	f1c3 0307 	rsb	r3, r3, #7
 8018a2a:	2b04      	cmp	r3, #4
 8018a2c:	bf28      	it	cs
 8018a2e:	2304      	movcs	r3, #4
 8018a30:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8018a32:	69fb      	ldr	r3, [r7, #28]
 8018a34:	3304      	adds	r3, #4
 8018a36:	2b06      	cmp	r3, #6
 8018a38:	d902      	bls.n	8018a40 <NVIC_EncodePriority+0x30>
 8018a3a:	69fb      	ldr	r3, [r7, #28]
 8018a3c:	3b03      	subs	r3, #3
 8018a3e:	e000      	b.n	8018a42 <NVIC_EncodePriority+0x32>
 8018a40:	2300      	movs	r3, #0
 8018a42:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8018a44:	f04f 32ff 	mov.w	r2, #4294967295
 8018a48:	69bb      	ldr	r3, [r7, #24]
 8018a4a:	fa02 f303 	lsl.w	r3, r2, r3
 8018a4e:	43da      	mvns	r2, r3
 8018a50:	68bb      	ldr	r3, [r7, #8]
 8018a52:	401a      	ands	r2, r3
 8018a54:	697b      	ldr	r3, [r7, #20]
 8018a56:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8018a58:	f04f 31ff 	mov.w	r1, #4294967295
 8018a5c:	697b      	ldr	r3, [r7, #20]
 8018a5e:	fa01 f303 	lsl.w	r3, r1, r3
 8018a62:	43d9      	mvns	r1, r3
 8018a64:	687b      	ldr	r3, [r7, #4]
 8018a66:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8018a68:	4313      	orrs	r3, r2
         );
}
 8018a6a:	4618      	mov	r0, r3
 8018a6c:	3724      	adds	r7, #36	; 0x24
 8018a6e:	46bd      	mov	sp, r7
 8018a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018a74:	4770      	bx	lr
	...

08018a78 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8018a78:	b580      	push	{r7, lr}
 8018a7a:	b082      	sub	sp, #8
 8018a7c:	af00      	add	r7, sp, #0
 8018a7e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8018a80:	687b      	ldr	r3, [r7, #4]
 8018a82:	3b01      	subs	r3, #1
 8018a84:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8018a88:	d301      	bcc.n	8018a8e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8018a8a:	2301      	movs	r3, #1
 8018a8c:	e00f      	b.n	8018aae <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8018a8e:	4a0a      	ldr	r2, [pc, #40]	; (8018ab8 <SysTick_Config+0x40>)
 8018a90:	687b      	ldr	r3, [r7, #4]
 8018a92:	3b01      	subs	r3, #1
 8018a94:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8018a96:	210f      	movs	r1, #15
 8018a98:	f04f 30ff 	mov.w	r0, #4294967295
 8018a9c:	f7ff ff8e 	bl	80189bc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8018aa0:	4b05      	ldr	r3, [pc, #20]	; (8018ab8 <SysTick_Config+0x40>)
 8018aa2:	2200      	movs	r2, #0
 8018aa4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8018aa6:	4b04      	ldr	r3, [pc, #16]	; (8018ab8 <SysTick_Config+0x40>)
 8018aa8:	2207      	movs	r2, #7
 8018aaa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8018aac:	2300      	movs	r3, #0
}
 8018aae:	4618      	mov	r0, r3
 8018ab0:	3708      	adds	r7, #8
 8018ab2:	46bd      	mov	sp, r7
 8018ab4:	bd80      	pop	{r7, pc}
 8018ab6:	bf00      	nop
 8018ab8:	e000e010 	.word	0xe000e010

08018abc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8018abc:	b580      	push	{r7, lr}
 8018abe:	b082      	sub	sp, #8
 8018ac0:	af00      	add	r7, sp, #0
 8018ac2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8018ac4:	6878      	ldr	r0, [r7, #4]
 8018ac6:	f7ff ff29 	bl	801891c <__NVIC_SetPriorityGrouping>
}
 8018aca:	bf00      	nop
 8018acc:	3708      	adds	r7, #8
 8018ace:	46bd      	mov	sp, r7
 8018ad0:	bd80      	pop	{r7, pc}

08018ad2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8018ad2:	b580      	push	{r7, lr}
 8018ad4:	b086      	sub	sp, #24
 8018ad6:	af00      	add	r7, sp, #0
 8018ad8:	4603      	mov	r3, r0
 8018ada:	60b9      	str	r1, [r7, #8]
 8018adc:	607a      	str	r2, [r7, #4]
 8018ade:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8018ae0:	2300      	movs	r3, #0
 8018ae2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8018ae4:	f7ff ff3e 	bl	8018964 <__NVIC_GetPriorityGrouping>
 8018ae8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8018aea:	687a      	ldr	r2, [r7, #4]
 8018aec:	68b9      	ldr	r1, [r7, #8]
 8018aee:	6978      	ldr	r0, [r7, #20]
 8018af0:	f7ff ff8e 	bl	8018a10 <NVIC_EncodePriority>
 8018af4:	4602      	mov	r2, r0
 8018af6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8018afa:	4611      	mov	r1, r2
 8018afc:	4618      	mov	r0, r3
 8018afe:	f7ff ff5d 	bl	80189bc <__NVIC_SetPriority>
}
 8018b02:	bf00      	nop
 8018b04:	3718      	adds	r7, #24
 8018b06:	46bd      	mov	sp, r7
 8018b08:	bd80      	pop	{r7, pc}

08018b0a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8018b0a:	b580      	push	{r7, lr}
 8018b0c:	b082      	sub	sp, #8
 8018b0e:	af00      	add	r7, sp, #0
 8018b10:	4603      	mov	r3, r0
 8018b12:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8018b14:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8018b18:	4618      	mov	r0, r3
 8018b1a:	f7ff ff31 	bl	8018980 <__NVIC_EnableIRQ>
}
 8018b1e:	bf00      	nop
 8018b20:	3708      	adds	r7, #8
 8018b22:	46bd      	mov	sp, r7
 8018b24:	bd80      	pop	{r7, pc}

08018b26 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8018b26:	b580      	push	{r7, lr}
 8018b28:	b082      	sub	sp, #8
 8018b2a:	af00      	add	r7, sp, #0
 8018b2c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8018b2e:	6878      	ldr	r0, [r7, #4]
 8018b30:	f7ff ffa2 	bl	8018a78 <SysTick_Config>
 8018b34:	4603      	mov	r3, r0
}
 8018b36:	4618      	mov	r0, r3
 8018b38:	3708      	adds	r7, #8
 8018b3a:	46bd      	mov	sp, r7
 8018b3c:	bd80      	pop	{r7, pc}

08018b3e <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8018b3e:	b580      	push	{r7, lr}
 8018b40:	b082      	sub	sp, #8
 8018b42:	af00      	add	r7, sp, #0
 8018b44:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 8018b46:	687b      	ldr	r3, [r7, #4]
 8018b48:	2b00      	cmp	r3, #0
 8018b4a:	d101      	bne.n	8018b50 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8018b4c:	2301      	movs	r3, #1
 8018b4e:	e014      	b.n	8018b7a <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8018b50:	687b      	ldr	r3, [r7, #4]
 8018b52:	791b      	ldrb	r3, [r3, #4]
 8018b54:	b2db      	uxtb	r3, r3
 8018b56:	2b00      	cmp	r3, #0
 8018b58:	d105      	bne.n	8018b66 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8018b5a:	687b      	ldr	r3, [r7, #4]
 8018b5c:	2200      	movs	r2, #0
 8018b5e:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8018b60:	6878      	ldr	r0, [r7, #4]
 8018b62:	f7ff f947 	bl	8017df4 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8018b66:	687b      	ldr	r3, [r7, #4]
 8018b68:	2202      	movs	r2, #2
 8018b6a:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8018b6c:	687b      	ldr	r3, [r7, #4]
 8018b6e:	2200      	movs	r2, #0
 8018b70:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8018b72:	687b      	ldr	r3, [r7, #4]
 8018b74:	2201      	movs	r2, #1
 8018b76:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8018b78:	2300      	movs	r3, #0
}
 8018b7a:	4618      	mov	r0, r3
 8018b7c:	3708      	adds	r7, #8
 8018b7e:	46bd      	mov	sp, r7
 8018b80:	bd80      	pop	{r7, pc}

08018b82 <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 8018b82:	b480      	push	{r7}
 8018b84:	b087      	sub	sp, #28
 8018b86:	af00      	add	r7, sp, #0
 8018b88:	60f8      	str	r0, [r7, #12]
 8018b8a:	60b9      	str	r1, [r7, #8]
 8018b8c:	607a      	str	r2, [r7, #4]
 8018b8e:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0UL;
 8018b90:	2300      	movs	r3, #0
 8018b92:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));

  tmp = (uint32_t)hdac->Instance;
 8018b94:	68fb      	ldr	r3, [r7, #12]
 8018b96:	681b      	ldr	r3, [r3, #0]
 8018b98:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 8018b9a:	68bb      	ldr	r3, [r7, #8]
 8018b9c:	2b00      	cmp	r3, #0
 8018b9e:	d105      	bne.n	8018bac <HAL_DAC_SetValue+0x2a>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 8018ba0:	697a      	ldr	r2, [r7, #20]
 8018ba2:	687b      	ldr	r3, [r7, #4]
 8018ba4:	4413      	add	r3, r2
 8018ba6:	3308      	adds	r3, #8
 8018ba8:	617b      	str	r3, [r7, #20]
 8018baa:	e004      	b.n	8018bb6 <HAL_DAC_SetValue+0x34>
  }
#if defined(DAC_CHANNEL2_SUPPORT)
  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 8018bac:	697a      	ldr	r2, [r7, #20]
 8018bae:	687b      	ldr	r3, [r7, #4]
 8018bb0:	4413      	add	r3, r2
 8018bb2:	3314      	adds	r3, #20
 8018bb4:	617b      	str	r3, [r7, #20]
  }
#endif /* DAC_CHANNEL2_SUPPORT */

  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 8018bb6:	697b      	ldr	r3, [r7, #20]
 8018bb8:	461a      	mov	r2, r3
 8018bba:	683b      	ldr	r3, [r7, #0]
 8018bbc:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 8018bbe:	2300      	movs	r3, #0
}
 8018bc0:	4618      	mov	r0, r3
 8018bc2:	371c      	adds	r7, #28
 8018bc4:	46bd      	mov	sp, r7
 8018bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018bca:	4770      	bx	lr

08018bcc <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8018bcc:	b480      	push	{r7}
 8018bce:	b087      	sub	sp, #28
 8018bd0:	af00      	add	r7, sp, #0
 8018bd2:	60f8      	str	r0, [r7, #12]
 8018bd4:	60b9      	str	r1, [r7, #8]
 8018bd6:	607a      	str	r2, [r7, #4]
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8018bd8:	68fb      	ldr	r3, [r7, #12]
 8018bda:	795b      	ldrb	r3, [r3, #5]
 8018bdc:	2b01      	cmp	r3, #1
 8018bde:	d101      	bne.n	8018be4 <HAL_DAC_ConfigChannel+0x18>
 8018be0:	2302      	movs	r3, #2
 8018be2:	e03c      	b.n	8018c5e <HAL_DAC_ConfigChannel+0x92>
 8018be4:	68fb      	ldr	r3, [r7, #12]
 8018be6:	2201      	movs	r2, #1
 8018be8:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8018bea:	68fb      	ldr	r3, [r7, #12]
 8018bec:	2202      	movs	r2, #2
 8018bee:	711a      	strb	r2, [r3, #4]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8018bf0:	68fb      	ldr	r3, [r7, #12]
 8018bf2:	681b      	ldr	r3, [r3, #0]
 8018bf4:	681b      	ldr	r3, [r3, #0]
 8018bf6:	617b      	str	r3, [r7, #20]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << (Channel & 0x10UL));
 8018bf8:	687b      	ldr	r3, [r7, #4]
 8018bfa:	f003 0310 	and.w	r3, r3, #16
 8018bfe:	f640 72fe 	movw	r2, #4094	; 0xffe
 8018c02:	fa02 f303 	lsl.w	r3, r2, r3
 8018c06:	43db      	mvns	r3, r3
 8018c08:	697a      	ldr	r2, [r7, #20]
 8018c0a:	4013      	ands	r3, r2
 8018c0c:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 8018c0e:	68bb      	ldr	r3, [r7, #8]
 8018c10:	681a      	ldr	r2, [r3, #0]
 8018c12:	68bb      	ldr	r3, [r7, #8]
 8018c14:	685b      	ldr	r3, [r3, #4]
 8018c16:	4313      	orrs	r3, r2
 8018c18:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8018c1a:	687b      	ldr	r3, [r7, #4]
 8018c1c:	f003 0310 	and.w	r3, r3, #16
 8018c20:	693a      	ldr	r2, [r7, #16]
 8018c22:	fa02 f303 	lsl.w	r3, r2, r3
 8018c26:	697a      	ldr	r2, [r7, #20]
 8018c28:	4313      	orrs	r3, r2
 8018c2a:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8018c2c:	68fb      	ldr	r3, [r7, #12]
 8018c2e:	681b      	ldr	r3, [r3, #0]
 8018c30:	697a      	ldr	r2, [r7, #20]
 8018c32:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8018c34:	68fb      	ldr	r3, [r7, #12]
 8018c36:	681b      	ldr	r3, [r3, #0]
 8018c38:	6819      	ldr	r1, [r3, #0]
 8018c3a:	687b      	ldr	r3, [r7, #4]
 8018c3c:	f003 0310 	and.w	r3, r3, #16
 8018c40:	22c0      	movs	r2, #192	; 0xc0
 8018c42:	fa02 f303 	lsl.w	r3, r2, r3
 8018c46:	43da      	mvns	r2, r3
 8018c48:	68fb      	ldr	r3, [r7, #12]
 8018c4a:	681b      	ldr	r3, [r3, #0]
 8018c4c:	400a      	ands	r2, r1
 8018c4e:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8018c50:	68fb      	ldr	r3, [r7, #12]
 8018c52:	2201      	movs	r2, #1
 8018c54:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8018c56:	68fb      	ldr	r3, [r7, #12]
 8018c58:	2200      	movs	r2, #0
 8018c5a:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8018c5c:	2300      	movs	r3, #0
}
 8018c5e:	4618      	mov	r0, r3
 8018c60:	371c      	adds	r7, #28
 8018c62:	46bd      	mov	sp, r7
 8018c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018c68:	4770      	bx	lr
	...

08018c6c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8018c6c:	b580      	push	{r7, lr}
 8018c6e:	b086      	sub	sp, #24
 8018c70:	af00      	add	r7, sp, #0
 8018c72:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8018c74:	2300      	movs	r3, #0
 8018c76:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8018c78:	f7ff fbae 	bl	80183d8 <HAL_GetTick>
 8018c7c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8018c7e:	687b      	ldr	r3, [r7, #4]
 8018c80:	2b00      	cmp	r3, #0
 8018c82:	d101      	bne.n	8018c88 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8018c84:	2301      	movs	r3, #1
 8018c86:	e099      	b.n	8018dbc <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8018c88:	687b      	ldr	r3, [r7, #4]
 8018c8a:	2202      	movs	r2, #2
 8018c8c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8018c90:	687b      	ldr	r3, [r7, #4]
 8018c92:	2200      	movs	r2, #0
 8018c94:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8018c98:	687b      	ldr	r3, [r7, #4]
 8018c9a:	681b      	ldr	r3, [r3, #0]
 8018c9c:	681a      	ldr	r2, [r3, #0]
 8018c9e:	687b      	ldr	r3, [r7, #4]
 8018ca0:	681b      	ldr	r3, [r3, #0]
 8018ca2:	f022 0201 	bic.w	r2, r2, #1
 8018ca6:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8018ca8:	e00f      	b.n	8018cca <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8018caa:	f7ff fb95 	bl	80183d8 <HAL_GetTick>
 8018cae:	4602      	mov	r2, r0
 8018cb0:	693b      	ldr	r3, [r7, #16]
 8018cb2:	1ad3      	subs	r3, r2, r3
 8018cb4:	2b05      	cmp	r3, #5
 8018cb6:	d908      	bls.n	8018cca <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8018cb8:	687b      	ldr	r3, [r7, #4]
 8018cba:	2220      	movs	r2, #32
 8018cbc:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8018cbe:	687b      	ldr	r3, [r7, #4]
 8018cc0:	2203      	movs	r2, #3
 8018cc2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8018cc6:	2303      	movs	r3, #3
 8018cc8:	e078      	b.n	8018dbc <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8018cca:	687b      	ldr	r3, [r7, #4]
 8018ccc:	681b      	ldr	r3, [r3, #0]
 8018cce:	681b      	ldr	r3, [r3, #0]
 8018cd0:	f003 0301 	and.w	r3, r3, #1
 8018cd4:	2b00      	cmp	r3, #0
 8018cd6:	d1e8      	bne.n	8018caa <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8018cd8:	687b      	ldr	r3, [r7, #4]
 8018cda:	681b      	ldr	r3, [r3, #0]
 8018cdc:	681b      	ldr	r3, [r3, #0]
 8018cde:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8018ce0:	697a      	ldr	r2, [r7, #20]
 8018ce2:	4b38      	ldr	r3, [pc, #224]	; (8018dc4 <HAL_DMA_Init+0x158>)
 8018ce4:	4013      	ands	r3, r2
 8018ce6:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8018ce8:	687b      	ldr	r3, [r7, #4]
 8018cea:	685a      	ldr	r2, [r3, #4]
 8018cec:	687b      	ldr	r3, [r7, #4]
 8018cee:	689b      	ldr	r3, [r3, #8]
 8018cf0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8018cf2:	687b      	ldr	r3, [r7, #4]
 8018cf4:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8018cf6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8018cf8:	687b      	ldr	r3, [r7, #4]
 8018cfa:	691b      	ldr	r3, [r3, #16]
 8018cfc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8018cfe:	687b      	ldr	r3, [r7, #4]
 8018d00:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8018d02:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8018d04:	687b      	ldr	r3, [r7, #4]
 8018d06:	699b      	ldr	r3, [r3, #24]
 8018d08:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8018d0a:	687b      	ldr	r3, [r7, #4]
 8018d0c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8018d0e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8018d10:	687b      	ldr	r3, [r7, #4]
 8018d12:	6a1b      	ldr	r3, [r3, #32]
 8018d14:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8018d16:	697a      	ldr	r2, [r7, #20]
 8018d18:	4313      	orrs	r3, r2
 8018d1a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8018d1c:	687b      	ldr	r3, [r7, #4]
 8018d1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018d20:	2b04      	cmp	r3, #4
 8018d22:	d107      	bne.n	8018d34 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8018d24:	687b      	ldr	r3, [r7, #4]
 8018d26:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8018d28:	687b      	ldr	r3, [r7, #4]
 8018d2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8018d2c:	4313      	orrs	r3, r2
 8018d2e:	697a      	ldr	r2, [r7, #20]
 8018d30:	4313      	orrs	r3, r2
 8018d32:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8018d34:	687b      	ldr	r3, [r7, #4]
 8018d36:	681b      	ldr	r3, [r3, #0]
 8018d38:	697a      	ldr	r2, [r7, #20]
 8018d3a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8018d3c:	687b      	ldr	r3, [r7, #4]
 8018d3e:	681b      	ldr	r3, [r3, #0]
 8018d40:	695b      	ldr	r3, [r3, #20]
 8018d42:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8018d44:	697b      	ldr	r3, [r7, #20]
 8018d46:	f023 0307 	bic.w	r3, r3, #7
 8018d4a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8018d4c:	687b      	ldr	r3, [r7, #4]
 8018d4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018d50:	697a      	ldr	r2, [r7, #20]
 8018d52:	4313      	orrs	r3, r2
 8018d54:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8018d56:	687b      	ldr	r3, [r7, #4]
 8018d58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018d5a:	2b04      	cmp	r3, #4
 8018d5c:	d117      	bne.n	8018d8e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8018d5e:	687b      	ldr	r3, [r7, #4]
 8018d60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8018d62:	697a      	ldr	r2, [r7, #20]
 8018d64:	4313      	orrs	r3, r2
 8018d66:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8018d68:	687b      	ldr	r3, [r7, #4]
 8018d6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018d6c:	2b00      	cmp	r3, #0
 8018d6e:	d00e      	beq.n	8018d8e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8018d70:	6878      	ldr	r0, [r7, #4]
 8018d72:	f000 fa0b 	bl	801918c <DMA_CheckFifoParam>
 8018d76:	4603      	mov	r3, r0
 8018d78:	2b00      	cmp	r3, #0
 8018d7a:	d008      	beq.n	8018d8e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8018d7c:	687b      	ldr	r3, [r7, #4]
 8018d7e:	2240      	movs	r2, #64	; 0x40
 8018d80:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8018d82:	687b      	ldr	r3, [r7, #4]
 8018d84:	2201      	movs	r2, #1
 8018d86:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8018d8a:	2301      	movs	r3, #1
 8018d8c:	e016      	b.n	8018dbc <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8018d8e:	687b      	ldr	r3, [r7, #4]
 8018d90:	681b      	ldr	r3, [r3, #0]
 8018d92:	697a      	ldr	r2, [r7, #20]
 8018d94:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8018d96:	6878      	ldr	r0, [r7, #4]
 8018d98:	f000 f9c2 	bl	8019120 <DMA_CalcBaseAndBitshift>
 8018d9c:	4603      	mov	r3, r0
 8018d9e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8018da0:	687b      	ldr	r3, [r7, #4]
 8018da2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8018da4:	223f      	movs	r2, #63	; 0x3f
 8018da6:	409a      	lsls	r2, r3
 8018da8:	68fb      	ldr	r3, [r7, #12]
 8018daa:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8018dac:	687b      	ldr	r3, [r7, #4]
 8018dae:	2200      	movs	r2, #0
 8018db0:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8018db2:	687b      	ldr	r3, [r7, #4]
 8018db4:	2201      	movs	r2, #1
 8018db6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8018dba:	2300      	movs	r3, #0
}
 8018dbc:	4618      	mov	r0, r3
 8018dbe:	3718      	adds	r7, #24
 8018dc0:	46bd      	mov	sp, r7
 8018dc2:	bd80      	pop	{r7, pc}
 8018dc4:	f010803f 	.word	0xf010803f

08018dc8 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8018dc8:	b480      	push	{r7}
 8018dca:	b083      	sub	sp, #12
 8018dcc:	af00      	add	r7, sp, #0
 8018dce:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8018dd0:	687b      	ldr	r3, [r7, #4]
 8018dd2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8018dd6:	b2db      	uxtb	r3, r3
 8018dd8:	2b02      	cmp	r3, #2
 8018dda:	d004      	beq.n	8018de6 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8018ddc:	687b      	ldr	r3, [r7, #4]
 8018dde:	2280      	movs	r2, #128	; 0x80
 8018de0:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8018de2:	2301      	movs	r3, #1
 8018de4:	e00c      	b.n	8018e00 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8018de6:	687b      	ldr	r3, [r7, #4]
 8018de8:	2205      	movs	r2, #5
 8018dea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8018dee:	687b      	ldr	r3, [r7, #4]
 8018df0:	681b      	ldr	r3, [r3, #0]
 8018df2:	681a      	ldr	r2, [r3, #0]
 8018df4:	687b      	ldr	r3, [r7, #4]
 8018df6:	681b      	ldr	r3, [r3, #0]
 8018df8:	f022 0201 	bic.w	r2, r2, #1
 8018dfc:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8018dfe:	2300      	movs	r3, #0
}
 8018e00:	4618      	mov	r0, r3
 8018e02:	370c      	adds	r7, #12
 8018e04:	46bd      	mov	sp, r7
 8018e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018e0a:	4770      	bx	lr

08018e0c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8018e0c:	b580      	push	{r7, lr}
 8018e0e:	b086      	sub	sp, #24
 8018e10:	af00      	add	r7, sp, #0
 8018e12:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8018e14:	2300      	movs	r3, #0
 8018e16:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8018e18:	4b92      	ldr	r3, [pc, #584]	; (8019064 <HAL_DMA_IRQHandler+0x258>)
 8018e1a:	681b      	ldr	r3, [r3, #0]
 8018e1c:	4a92      	ldr	r2, [pc, #584]	; (8019068 <HAL_DMA_IRQHandler+0x25c>)
 8018e1e:	fba2 2303 	umull	r2, r3, r2, r3
 8018e22:	0a9b      	lsrs	r3, r3, #10
 8018e24:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8018e26:	687b      	ldr	r3, [r7, #4]
 8018e28:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8018e2a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8018e2c:	693b      	ldr	r3, [r7, #16]
 8018e2e:	681b      	ldr	r3, [r3, #0]
 8018e30:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8018e32:	687b      	ldr	r3, [r7, #4]
 8018e34:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8018e36:	2208      	movs	r2, #8
 8018e38:	409a      	lsls	r2, r3
 8018e3a:	68fb      	ldr	r3, [r7, #12]
 8018e3c:	4013      	ands	r3, r2
 8018e3e:	2b00      	cmp	r3, #0
 8018e40:	d01a      	beq.n	8018e78 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8018e42:	687b      	ldr	r3, [r7, #4]
 8018e44:	681b      	ldr	r3, [r3, #0]
 8018e46:	681b      	ldr	r3, [r3, #0]
 8018e48:	f003 0304 	and.w	r3, r3, #4
 8018e4c:	2b00      	cmp	r3, #0
 8018e4e:	d013      	beq.n	8018e78 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8018e50:	687b      	ldr	r3, [r7, #4]
 8018e52:	681b      	ldr	r3, [r3, #0]
 8018e54:	681a      	ldr	r2, [r3, #0]
 8018e56:	687b      	ldr	r3, [r7, #4]
 8018e58:	681b      	ldr	r3, [r3, #0]
 8018e5a:	f022 0204 	bic.w	r2, r2, #4
 8018e5e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8018e60:	687b      	ldr	r3, [r7, #4]
 8018e62:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8018e64:	2208      	movs	r2, #8
 8018e66:	409a      	lsls	r2, r3
 8018e68:	693b      	ldr	r3, [r7, #16]
 8018e6a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8018e6c:	687b      	ldr	r3, [r7, #4]
 8018e6e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8018e70:	f043 0201 	orr.w	r2, r3, #1
 8018e74:	687b      	ldr	r3, [r7, #4]
 8018e76:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8018e78:	687b      	ldr	r3, [r7, #4]
 8018e7a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8018e7c:	2201      	movs	r2, #1
 8018e7e:	409a      	lsls	r2, r3
 8018e80:	68fb      	ldr	r3, [r7, #12]
 8018e82:	4013      	ands	r3, r2
 8018e84:	2b00      	cmp	r3, #0
 8018e86:	d012      	beq.n	8018eae <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8018e88:	687b      	ldr	r3, [r7, #4]
 8018e8a:	681b      	ldr	r3, [r3, #0]
 8018e8c:	695b      	ldr	r3, [r3, #20]
 8018e8e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8018e92:	2b00      	cmp	r3, #0
 8018e94:	d00b      	beq.n	8018eae <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8018e96:	687b      	ldr	r3, [r7, #4]
 8018e98:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8018e9a:	2201      	movs	r2, #1
 8018e9c:	409a      	lsls	r2, r3
 8018e9e:	693b      	ldr	r3, [r7, #16]
 8018ea0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8018ea2:	687b      	ldr	r3, [r7, #4]
 8018ea4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8018ea6:	f043 0202 	orr.w	r2, r3, #2
 8018eaa:	687b      	ldr	r3, [r7, #4]
 8018eac:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8018eae:	687b      	ldr	r3, [r7, #4]
 8018eb0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8018eb2:	2204      	movs	r2, #4
 8018eb4:	409a      	lsls	r2, r3
 8018eb6:	68fb      	ldr	r3, [r7, #12]
 8018eb8:	4013      	ands	r3, r2
 8018eba:	2b00      	cmp	r3, #0
 8018ebc:	d012      	beq.n	8018ee4 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8018ebe:	687b      	ldr	r3, [r7, #4]
 8018ec0:	681b      	ldr	r3, [r3, #0]
 8018ec2:	681b      	ldr	r3, [r3, #0]
 8018ec4:	f003 0302 	and.w	r3, r3, #2
 8018ec8:	2b00      	cmp	r3, #0
 8018eca:	d00b      	beq.n	8018ee4 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8018ecc:	687b      	ldr	r3, [r7, #4]
 8018ece:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8018ed0:	2204      	movs	r2, #4
 8018ed2:	409a      	lsls	r2, r3
 8018ed4:	693b      	ldr	r3, [r7, #16]
 8018ed6:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8018ed8:	687b      	ldr	r3, [r7, #4]
 8018eda:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8018edc:	f043 0204 	orr.w	r2, r3, #4
 8018ee0:	687b      	ldr	r3, [r7, #4]
 8018ee2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8018ee4:	687b      	ldr	r3, [r7, #4]
 8018ee6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8018ee8:	2210      	movs	r2, #16
 8018eea:	409a      	lsls	r2, r3
 8018eec:	68fb      	ldr	r3, [r7, #12]
 8018eee:	4013      	ands	r3, r2
 8018ef0:	2b00      	cmp	r3, #0
 8018ef2:	d043      	beq.n	8018f7c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8018ef4:	687b      	ldr	r3, [r7, #4]
 8018ef6:	681b      	ldr	r3, [r3, #0]
 8018ef8:	681b      	ldr	r3, [r3, #0]
 8018efa:	f003 0308 	and.w	r3, r3, #8
 8018efe:	2b00      	cmp	r3, #0
 8018f00:	d03c      	beq.n	8018f7c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8018f02:	687b      	ldr	r3, [r7, #4]
 8018f04:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8018f06:	2210      	movs	r2, #16
 8018f08:	409a      	lsls	r2, r3
 8018f0a:	693b      	ldr	r3, [r7, #16]
 8018f0c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8018f0e:	687b      	ldr	r3, [r7, #4]
 8018f10:	681b      	ldr	r3, [r3, #0]
 8018f12:	681b      	ldr	r3, [r3, #0]
 8018f14:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8018f18:	2b00      	cmp	r3, #0
 8018f1a:	d018      	beq.n	8018f4e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8018f1c:	687b      	ldr	r3, [r7, #4]
 8018f1e:	681b      	ldr	r3, [r3, #0]
 8018f20:	681b      	ldr	r3, [r3, #0]
 8018f22:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8018f26:	2b00      	cmp	r3, #0
 8018f28:	d108      	bne.n	8018f3c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8018f2a:	687b      	ldr	r3, [r7, #4]
 8018f2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8018f2e:	2b00      	cmp	r3, #0
 8018f30:	d024      	beq.n	8018f7c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8018f32:	687b      	ldr	r3, [r7, #4]
 8018f34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8018f36:	6878      	ldr	r0, [r7, #4]
 8018f38:	4798      	blx	r3
 8018f3a:	e01f      	b.n	8018f7c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8018f3c:	687b      	ldr	r3, [r7, #4]
 8018f3e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8018f40:	2b00      	cmp	r3, #0
 8018f42:	d01b      	beq.n	8018f7c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8018f44:	687b      	ldr	r3, [r7, #4]
 8018f46:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8018f48:	6878      	ldr	r0, [r7, #4]
 8018f4a:	4798      	blx	r3
 8018f4c:	e016      	b.n	8018f7c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8018f4e:	687b      	ldr	r3, [r7, #4]
 8018f50:	681b      	ldr	r3, [r3, #0]
 8018f52:	681b      	ldr	r3, [r3, #0]
 8018f54:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8018f58:	2b00      	cmp	r3, #0
 8018f5a:	d107      	bne.n	8018f6c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8018f5c:	687b      	ldr	r3, [r7, #4]
 8018f5e:	681b      	ldr	r3, [r3, #0]
 8018f60:	681a      	ldr	r2, [r3, #0]
 8018f62:	687b      	ldr	r3, [r7, #4]
 8018f64:	681b      	ldr	r3, [r3, #0]
 8018f66:	f022 0208 	bic.w	r2, r2, #8
 8018f6a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8018f6c:	687b      	ldr	r3, [r7, #4]
 8018f6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8018f70:	2b00      	cmp	r3, #0
 8018f72:	d003      	beq.n	8018f7c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8018f74:	687b      	ldr	r3, [r7, #4]
 8018f76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8018f78:	6878      	ldr	r0, [r7, #4]
 8018f7a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8018f7c:	687b      	ldr	r3, [r7, #4]
 8018f7e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8018f80:	2220      	movs	r2, #32
 8018f82:	409a      	lsls	r2, r3
 8018f84:	68fb      	ldr	r3, [r7, #12]
 8018f86:	4013      	ands	r3, r2
 8018f88:	2b00      	cmp	r3, #0
 8018f8a:	f000 808e 	beq.w	80190aa <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8018f8e:	687b      	ldr	r3, [r7, #4]
 8018f90:	681b      	ldr	r3, [r3, #0]
 8018f92:	681b      	ldr	r3, [r3, #0]
 8018f94:	f003 0310 	and.w	r3, r3, #16
 8018f98:	2b00      	cmp	r3, #0
 8018f9a:	f000 8086 	beq.w	80190aa <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8018f9e:	687b      	ldr	r3, [r7, #4]
 8018fa0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8018fa2:	2220      	movs	r2, #32
 8018fa4:	409a      	lsls	r2, r3
 8018fa6:	693b      	ldr	r3, [r7, #16]
 8018fa8:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8018faa:	687b      	ldr	r3, [r7, #4]
 8018fac:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8018fb0:	b2db      	uxtb	r3, r3
 8018fb2:	2b05      	cmp	r3, #5
 8018fb4:	d136      	bne.n	8019024 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8018fb6:	687b      	ldr	r3, [r7, #4]
 8018fb8:	681b      	ldr	r3, [r3, #0]
 8018fba:	681a      	ldr	r2, [r3, #0]
 8018fbc:	687b      	ldr	r3, [r7, #4]
 8018fbe:	681b      	ldr	r3, [r3, #0]
 8018fc0:	f022 0216 	bic.w	r2, r2, #22
 8018fc4:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8018fc6:	687b      	ldr	r3, [r7, #4]
 8018fc8:	681b      	ldr	r3, [r3, #0]
 8018fca:	695a      	ldr	r2, [r3, #20]
 8018fcc:	687b      	ldr	r3, [r7, #4]
 8018fce:	681b      	ldr	r3, [r3, #0]
 8018fd0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8018fd4:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8018fd6:	687b      	ldr	r3, [r7, #4]
 8018fd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8018fda:	2b00      	cmp	r3, #0
 8018fdc:	d103      	bne.n	8018fe6 <HAL_DMA_IRQHandler+0x1da>
 8018fde:	687b      	ldr	r3, [r7, #4]
 8018fe0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8018fe2:	2b00      	cmp	r3, #0
 8018fe4:	d007      	beq.n	8018ff6 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8018fe6:	687b      	ldr	r3, [r7, #4]
 8018fe8:	681b      	ldr	r3, [r3, #0]
 8018fea:	681a      	ldr	r2, [r3, #0]
 8018fec:	687b      	ldr	r3, [r7, #4]
 8018fee:	681b      	ldr	r3, [r3, #0]
 8018ff0:	f022 0208 	bic.w	r2, r2, #8
 8018ff4:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8018ff6:	687b      	ldr	r3, [r7, #4]
 8018ff8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8018ffa:	223f      	movs	r2, #63	; 0x3f
 8018ffc:	409a      	lsls	r2, r3
 8018ffe:	693b      	ldr	r3, [r7, #16]
 8019000:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8019002:	687b      	ldr	r3, [r7, #4]
 8019004:	2201      	movs	r2, #1
 8019006:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 801900a:	687b      	ldr	r3, [r7, #4]
 801900c:	2200      	movs	r2, #0
 801900e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8019012:	687b      	ldr	r3, [r7, #4]
 8019014:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8019016:	2b00      	cmp	r3, #0
 8019018:	d07d      	beq.n	8019116 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 801901a:	687b      	ldr	r3, [r7, #4]
 801901c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801901e:	6878      	ldr	r0, [r7, #4]
 8019020:	4798      	blx	r3
        }
        return;
 8019022:	e078      	b.n	8019116 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8019024:	687b      	ldr	r3, [r7, #4]
 8019026:	681b      	ldr	r3, [r3, #0]
 8019028:	681b      	ldr	r3, [r3, #0]
 801902a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 801902e:	2b00      	cmp	r3, #0
 8019030:	d01c      	beq.n	801906c <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8019032:	687b      	ldr	r3, [r7, #4]
 8019034:	681b      	ldr	r3, [r3, #0]
 8019036:	681b      	ldr	r3, [r3, #0]
 8019038:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 801903c:	2b00      	cmp	r3, #0
 801903e:	d108      	bne.n	8019052 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8019040:	687b      	ldr	r3, [r7, #4]
 8019042:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8019044:	2b00      	cmp	r3, #0
 8019046:	d030      	beq.n	80190aa <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8019048:	687b      	ldr	r3, [r7, #4]
 801904a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801904c:	6878      	ldr	r0, [r7, #4]
 801904e:	4798      	blx	r3
 8019050:	e02b      	b.n	80190aa <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8019052:	687b      	ldr	r3, [r7, #4]
 8019054:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8019056:	2b00      	cmp	r3, #0
 8019058:	d027      	beq.n	80190aa <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 801905a:	687b      	ldr	r3, [r7, #4]
 801905c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801905e:	6878      	ldr	r0, [r7, #4]
 8019060:	4798      	blx	r3
 8019062:	e022      	b.n	80190aa <HAL_DMA_IRQHandler+0x29e>
 8019064:	20000588 	.word	0x20000588
 8019068:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 801906c:	687b      	ldr	r3, [r7, #4]
 801906e:	681b      	ldr	r3, [r3, #0]
 8019070:	681b      	ldr	r3, [r3, #0]
 8019072:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8019076:	2b00      	cmp	r3, #0
 8019078:	d10f      	bne.n	801909a <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 801907a:	687b      	ldr	r3, [r7, #4]
 801907c:	681b      	ldr	r3, [r3, #0]
 801907e:	681a      	ldr	r2, [r3, #0]
 8019080:	687b      	ldr	r3, [r7, #4]
 8019082:	681b      	ldr	r3, [r3, #0]
 8019084:	f022 0210 	bic.w	r2, r2, #16
 8019088:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 801908a:	687b      	ldr	r3, [r7, #4]
 801908c:	2201      	movs	r2, #1
 801908e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8019092:	687b      	ldr	r3, [r7, #4]
 8019094:	2200      	movs	r2, #0
 8019096:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 801909a:	687b      	ldr	r3, [r7, #4]
 801909c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801909e:	2b00      	cmp	r3, #0
 80190a0:	d003      	beq.n	80190aa <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80190a2:	687b      	ldr	r3, [r7, #4]
 80190a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80190a6:	6878      	ldr	r0, [r7, #4]
 80190a8:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80190aa:	687b      	ldr	r3, [r7, #4]
 80190ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80190ae:	2b00      	cmp	r3, #0
 80190b0:	d032      	beq.n	8019118 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80190b2:	687b      	ldr	r3, [r7, #4]
 80190b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80190b6:	f003 0301 	and.w	r3, r3, #1
 80190ba:	2b00      	cmp	r3, #0
 80190bc:	d022      	beq.n	8019104 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80190be:	687b      	ldr	r3, [r7, #4]
 80190c0:	2205      	movs	r2, #5
 80190c2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80190c6:	687b      	ldr	r3, [r7, #4]
 80190c8:	681b      	ldr	r3, [r3, #0]
 80190ca:	681a      	ldr	r2, [r3, #0]
 80190cc:	687b      	ldr	r3, [r7, #4]
 80190ce:	681b      	ldr	r3, [r3, #0]
 80190d0:	f022 0201 	bic.w	r2, r2, #1
 80190d4:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80190d6:	68bb      	ldr	r3, [r7, #8]
 80190d8:	3301      	adds	r3, #1
 80190da:	60bb      	str	r3, [r7, #8]
 80190dc:	697a      	ldr	r2, [r7, #20]
 80190de:	429a      	cmp	r2, r3
 80190e0:	d307      	bcc.n	80190f2 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80190e2:	687b      	ldr	r3, [r7, #4]
 80190e4:	681b      	ldr	r3, [r3, #0]
 80190e6:	681b      	ldr	r3, [r3, #0]
 80190e8:	f003 0301 	and.w	r3, r3, #1
 80190ec:	2b00      	cmp	r3, #0
 80190ee:	d1f2      	bne.n	80190d6 <HAL_DMA_IRQHandler+0x2ca>
 80190f0:	e000      	b.n	80190f4 <HAL_DMA_IRQHandler+0x2e8>
          break;
 80190f2:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80190f4:	687b      	ldr	r3, [r7, #4]
 80190f6:	2201      	movs	r2, #1
 80190f8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80190fc:	687b      	ldr	r3, [r7, #4]
 80190fe:	2200      	movs	r2, #0
 8019100:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8019104:	687b      	ldr	r3, [r7, #4]
 8019106:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8019108:	2b00      	cmp	r3, #0
 801910a:	d005      	beq.n	8019118 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 801910c:	687b      	ldr	r3, [r7, #4]
 801910e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8019110:	6878      	ldr	r0, [r7, #4]
 8019112:	4798      	blx	r3
 8019114:	e000      	b.n	8019118 <HAL_DMA_IRQHandler+0x30c>
        return;
 8019116:	bf00      	nop
    }
  }
}
 8019118:	3718      	adds	r7, #24
 801911a:	46bd      	mov	sp, r7
 801911c:	bd80      	pop	{r7, pc}
 801911e:	bf00      	nop

08019120 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8019120:	b480      	push	{r7}
 8019122:	b085      	sub	sp, #20
 8019124:	af00      	add	r7, sp, #0
 8019126:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8019128:	687b      	ldr	r3, [r7, #4]
 801912a:	681b      	ldr	r3, [r3, #0]
 801912c:	b2db      	uxtb	r3, r3
 801912e:	3b10      	subs	r3, #16
 8019130:	4a14      	ldr	r2, [pc, #80]	; (8019184 <DMA_CalcBaseAndBitshift+0x64>)
 8019132:	fba2 2303 	umull	r2, r3, r2, r3
 8019136:	091b      	lsrs	r3, r3, #4
 8019138:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 801913a:	4a13      	ldr	r2, [pc, #76]	; (8019188 <DMA_CalcBaseAndBitshift+0x68>)
 801913c:	68fb      	ldr	r3, [r7, #12]
 801913e:	4413      	add	r3, r2
 8019140:	781b      	ldrb	r3, [r3, #0]
 8019142:	461a      	mov	r2, r3
 8019144:	687b      	ldr	r3, [r7, #4]
 8019146:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8019148:	68fb      	ldr	r3, [r7, #12]
 801914a:	2b03      	cmp	r3, #3
 801914c:	d909      	bls.n	8019162 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 801914e:	687b      	ldr	r3, [r7, #4]
 8019150:	681b      	ldr	r3, [r3, #0]
 8019152:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8019156:	f023 0303 	bic.w	r3, r3, #3
 801915a:	1d1a      	adds	r2, r3, #4
 801915c:	687b      	ldr	r3, [r7, #4]
 801915e:	659a      	str	r2, [r3, #88]	; 0x58
 8019160:	e007      	b.n	8019172 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8019162:	687b      	ldr	r3, [r7, #4]
 8019164:	681b      	ldr	r3, [r3, #0]
 8019166:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 801916a:	f023 0303 	bic.w	r3, r3, #3
 801916e:	687a      	ldr	r2, [r7, #4]
 8019170:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8019172:	687b      	ldr	r3, [r7, #4]
 8019174:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8019176:	4618      	mov	r0, r3
 8019178:	3714      	adds	r7, #20
 801917a:	46bd      	mov	sp, r7
 801917c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019180:	4770      	bx	lr
 8019182:	bf00      	nop
 8019184:	aaaaaaab 	.word	0xaaaaaaab
 8019188:	08002360 	.word	0x08002360

0801918c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 801918c:	b480      	push	{r7}
 801918e:	b085      	sub	sp, #20
 8019190:	af00      	add	r7, sp, #0
 8019192:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8019194:	2300      	movs	r3, #0
 8019196:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8019198:	687b      	ldr	r3, [r7, #4]
 801919a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801919c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 801919e:	687b      	ldr	r3, [r7, #4]
 80191a0:	699b      	ldr	r3, [r3, #24]
 80191a2:	2b00      	cmp	r3, #0
 80191a4:	d11f      	bne.n	80191e6 <DMA_CheckFifoParam+0x5a>
 80191a6:	68bb      	ldr	r3, [r7, #8]
 80191a8:	2b03      	cmp	r3, #3
 80191aa:	d856      	bhi.n	801925a <DMA_CheckFifoParam+0xce>
 80191ac:	a201      	add	r2, pc, #4	; (adr r2, 80191b4 <DMA_CheckFifoParam+0x28>)
 80191ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80191b2:	bf00      	nop
 80191b4:	080191c5 	.word	0x080191c5
 80191b8:	080191d7 	.word	0x080191d7
 80191bc:	080191c5 	.word	0x080191c5
 80191c0:	0801925b 	.word	0x0801925b
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80191c4:	687b      	ldr	r3, [r7, #4]
 80191c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80191c8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80191cc:	2b00      	cmp	r3, #0
 80191ce:	d046      	beq.n	801925e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80191d0:	2301      	movs	r3, #1
 80191d2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80191d4:	e043      	b.n	801925e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80191d6:	687b      	ldr	r3, [r7, #4]
 80191d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80191da:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80191de:	d140      	bne.n	8019262 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80191e0:	2301      	movs	r3, #1
 80191e2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80191e4:	e03d      	b.n	8019262 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80191e6:	687b      	ldr	r3, [r7, #4]
 80191e8:	699b      	ldr	r3, [r3, #24]
 80191ea:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80191ee:	d121      	bne.n	8019234 <DMA_CheckFifoParam+0xa8>
 80191f0:	68bb      	ldr	r3, [r7, #8]
 80191f2:	2b03      	cmp	r3, #3
 80191f4:	d837      	bhi.n	8019266 <DMA_CheckFifoParam+0xda>
 80191f6:	a201      	add	r2, pc, #4	; (adr r2, 80191fc <DMA_CheckFifoParam+0x70>)
 80191f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80191fc:	0801920d 	.word	0x0801920d
 8019200:	08019213 	.word	0x08019213
 8019204:	0801920d 	.word	0x0801920d
 8019208:	08019225 	.word	0x08019225
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 801920c:	2301      	movs	r3, #1
 801920e:	73fb      	strb	r3, [r7, #15]
      break;
 8019210:	e030      	b.n	8019274 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8019212:	687b      	ldr	r3, [r7, #4]
 8019214:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8019216:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 801921a:	2b00      	cmp	r3, #0
 801921c:	d025      	beq.n	801926a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 801921e:	2301      	movs	r3, #1
 8019220:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8019222:	e022      	b.n	801926a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8019224:	687b      	ldr	r3, [r7, #4]
 8019226:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8019228:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 801922c:	d11f      	bne.n	801926e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 801922e:	2301      	movs	r3, #1
 8019230:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8019232:	e01c      	b.n	801926e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8019234:	68bb      	ldr	r3, [r7, #8]
 8019236:	2b02      	cmp	r3, #2
 8019238:	d903      	bls.n	8019242 <DMA_CheckFifoParam+0xb6>
 801923a:	68bb      	ldr	r3, [r7, #8]
 801923c:	2b03      	cmp	r3, #3
 801923e:	d003      	beq.n	8019248 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8019240:	e018      	b.n	8019274 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8019242:	2301      	movs	r3, #1
 8019244:	73fb      	strb	r3, [r7, #15]
      break;
 8019246:	e015      	b.n	8019274 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8019248:	687b      	ldr	r3, [r7, #4]
 801924a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801924c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8019250:	2b00      	cmp	r3, #0
 8019252:	d00e      	beq.n	8019272 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8019254:	2301      	movs	r3, #1
 8019256:	73fb      	strb	r3, [r7, #15]
      break;
 8019258:	e00b      	b.n	8019272 <DMA_CheckFifoParam+0xe6>
      break;
 801925a:	bf00      	nop
 801925c:	e00a      	b.n	8019274 <DMA_CheckFifoParam+0xe8>
      break;
 801925e:	bf00      	nop
 8019260:	e008      	b.n	8019274 <DMA_CheckFifoParam+0xe8>
      break;
 8019262:	bf00      	nop
 8019264:	e006      	b.n	8019274 <DMA_CheckFifoParam+0xe8>
      break;
 8019266:	bf00      	nop
 8019268:	e004      	b.n	8019274 <DMA_CheckFifoParam+0xe8>
      break;
 801926a:	bf00      	nop
 801926c:	e002      	b.n	8019274 <DMA_CheckFifoParam+0xe8>
      break;   
 801926e:	bf00      	nop
 8019270:	e000      	b.n	8019274 <DMA_CheckFifoParam+0xe8>
      break;
 8019272:	bf00      	nop
    }
  } 
  
  return status; 
 8019274:	7bfb      	ldrb	r3, [r7, #15]
}
 8019276:	4618      	mov	r0, r3
 8019278:	3714      	adds	r7, #20
 801927a:	46bd      	mov	sp, r7
 801927c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019280:	4770      	bx	lr
 8019282:	bf00      	nop

08019284 <HAL_FLASH_Program>:
  * @param  Data specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8019284:	b580      	push	{r7, lr}
 8019286:	b086      	sub	sp, #24
 8019288:	af00      	add	r7, sp, #0
 801928a:	60f8      	str	r0, [r7, #12]
 801928c:	60b9      	str	r1, [r7, #8]
 801928e:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 8019292:	2301      	movs	r3, #1
 8019294:	75fb      	strb	r3, [r7, #23]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8019296:	4b23      	ldr	r3, [pc, #140]	; (8019324 <HAL_FLASH_Program+0xa0>)
 8019298:	7e1b      	ldrb	r3, [r3, #24]
 801929a:	2b01      	cmp	r3, #1
 801929c:	d101      	bne.n	80192a2 <HAL_FLASH_Program+0x1e>
 801929e:	2302      	movs	r3, #2
 80192a0:	e03b      	b.n	801931a <HAL_FLASH_Program+0x96>
 80192a2:	4b20      	ldr	r3, [pc, #128]	; (8019324 <HAL_FLASH_Program+0xa0>)
 80192a4:	2201      	movs	r2, #1
 80192a6:	761a      	strb	r2, [r3, #24]
  
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80192a8:	f24c 3050 	movw	r0, #50000	; 0xc350
 80192ac:	f000 f870 	bl	8019390 <FLASH_WaitForLastOperation>
 80192b0:	4603      	mov	r3, r0
 80192b2:	75fb      	strb	r3, [r7, #23]
  
  if(status == HAL_OK)
 80192b4:	7dfb      	ldrb	r3, [r7, #23]
 80192b6:	2b00      	cmp	r3, #0
 80192b8:	d12b      	bne.n	8019312 <HAL_FLASH_Program+0x8e>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 80192ba:	68fb      	ldr	r3, [r7, #12]
 80192bc:	2b00      	cmp	r3, #0
 80192be:	d105      	bne.n	80192cc <HAL_FLASH_Program+0x48>
    {
      /*Program byte (8-bit) at a specified address.*/
      FLASH_Program_Byte(Address, (uint8_t) Data);
 80192c0:	783b      	ldrb	r3, [r7, #0]
 80192c2:	4619      	mov	r1, r3
 80192c4:	68b8      	ldr	r0, [r7, #8]
 80192c6:	f000 f91b 	bl	8019500 <FLASH_Program_Byte>
 80192ca:	e016      	b.n	80192fa <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 80192cc:	68fb      	ldr	r3, [r7, #12]
 80192ce:	2b01      	cmp	r3, #1
 80192d0:	d105      	bne.n	80192de <HAL_FLASH_Program+0x5a>
    {
      /*Program halfword (16-bit) at a specified address.*/
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
 80192d2:	883b      	ldrh	r3, [r7, #0]
 80192d4:	4619      	mov	r1, r3
 80192d6:	68b8      	ldr	r0, [r7, #8]
 80192d8:	f000 f8ee 	bl	80194b8 <FLASH_Program_HalfWord>
 80192dc:	e00d      	b.n	80192fa <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 80192de:	68fb      	ldr	r3, [r7, #12]
 80192e0:	2b02      	cmp	r3, #2
 80192e2:	d105      	bne.n	80192f0 <HAL_FLASH_Program+0x6c>
    {
      /*Program word (32-bit) at a specified address.*/
      FLASH_Program_Word(Address, (uint32_t) Data);
 80192e4:	683b      	ldr	r3, [r7, #0]
 80192e6:	4619      	mov	r1, r3
 80192e8:	68b8      	ldr	r0, [r7, #8]
 80192ea:	f000 f8c3 	bl	8019474 <FLASH_Program_Word>
 80192ee:	e004      	b.n	80192fa <HAL_FLASH_Program+0x76>
    }
    else
    {
      /*Program double word (64-bit) at a specified address.*/
      FLASH_Program_DoubleWord(Address, Data);
 80192f0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80192f4:	68b8      	ldr	r0, [r7, #8]
 80192f6:	f000 f88b 	bl	8019410 <FLASH_Program_DoubleWord>
    }
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80192fa:	f24c 3050 	movw	r0, #50000	; 0xc350
 80192fe:	f000 f847 	bl	8019390 <FLASH_WaitForLastOperation>
 8019302:	4603      	mov	r3, r0
 8019304:	75fb      	strb	r3, [r7, #23]
    
    /* If the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);  
 8019306:	4b08      	ldr	r3, [pc, #32]	; (8019328 <HAL_FLASH_Program+0xa4>)
 8019308:	691b      	ldr	r3, [r3, #16]
 801930a:	4a07      	ldr	r2, [pc, #28]	; (8019328 <HAL_FLASH_Program+0xa4>)
 801930c:	f023 0301 	bic.w	r3, r3, #1
 8019310:	6113      	str	r3, [r2, #16]
  }
  
  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8019312:	4b04      	ldr	r3, [pc, #16]	; (8019324 <HAL_FLASH_Program+0xa0>)
 8019314:	2200      	movs	r2, #0
 8019316:	761a      	strb	r2, [r3, #24]
  
  return status;
 8019318:	7dfb      	ldrb	r3, [r7, #23]
}
 801931a:	4618      	mov	r0, r3
 801931c:	3718      	adds	r7, #24
 801931e:	46bd      	mov	sp, r7
 8019320:	bd80      	pop	{r7, pc}
 8019322:	bf00      	nop
 8019324:	20006c7c 	.word	0x20006c7c
 8019328:	40023c00 	.word	0x40023c00

0801932c <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 801932c:	b480      	push	{r7}
 801932e:	b083      	sub	sp, #12
 8019330:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8019332:	2300      	movs	r3, #0
 8019334:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8019336:	4b0b      	ldr	r3, [pc, #44]	; (8019364 <HAL_FLASH_Unlock+0x38>)
 8019338:	691b      	ldr	r3, [r3, #16]
 801933a:	2b00      	cmp	r3, #0
 801933c:	da0b      	bge.n	8019356 <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 801933e:	4b09      	ldr	r3, [pc, #36]	; (8019364 <HAL_FLASH_Unlock+0x38>)
 8019340:	4a09      	ldr	r2, [pc, #36]	; (8019368 <HAL_FLASH_Unlock+0x3c>)
 8019342:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8019344:	4b07      	ldr	r3, [pc, #28]	; (8019364 <HAL_FLASH_Unlock+0x38>)
 8019346:	4a09      	ldr	r2, [pc, #36]	; (801936c <HAL_FLASH_Unlock+0x40>)
 8019348:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 801934a:	4b06      	ldr	r3, [pc, #24]	; (8019364 <HAL_FLASH_Unlock+0x38>)
 801934c:	691b      	ldr	r3, [r3, #16]
 801934e:	2b00      	cmp	r3, #0
 8019350:	da01      	bge.n	8019356 <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 8019352:	2301      	movs	r3, #1
 8019354:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 8019356:	79fb      	ldrb	r3, [r7, #7]
}
 8019358:	4618      	mov	r0, r3
 801935a:	370c      	adds	r7, #12
 801935c:	46bd      	mov	sp, r7
 801935e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019362:	4770      	bx	lr
 8019364:	40023c00 	.word	0x40023c00
 8019368:	45670123 	.word	0x45670123
 801936c:	cdef89ab 	.word	0xcdef89ab

08019370 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8019370:	b480      	push	{r7}
 8019372:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 8019374:	4b05      	ldr	r3, [pc, #20]	; (801938c <HAL_FLASH_Lock+0x1c>)
 8019376:	691b      	ldr	r3, [r3, #16]
 8019378:	4a04      	ldr	r2, [pc, #16]	; (801938c <HAL_FLASH_Lock+0x1c>)
 801937a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 801937e:	6113      	str	r3, [r2, #16]
  
  return HAL_OK;  
 8019380:	2300      	movs	r3, #0
}
 8019382:	4618      	mov	r0, r3
 8019384:	46bd      	mov	sp, r7
 8019386:	f85d 7b04 	ldr.w	r7, [sp], #4
 801938a:	4770      	bx	lr
 801938c:	40023c00 	.word	0x40023c00

08019390 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{ 
 8019390:	b580      	push	{r7, lr}
 8019392:	b084      	sub	sp, #16
 8019394:	af00      	add	r7, sp, #0
 8019396:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8019398:	2300      	movs	r3, #0
 801939a:	60fb      	str	r3, [r7, #12]
  
  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 801939c:	4b1a      	ldr	r3, [pc, #104]	; (8019408 <FLASH_WaitForLastOperation+0x78>)
 801939e:	2200      	movs	r2, #0
 80193a0:	61da      	str	r2, [r3, #28]
  
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 80193a2:	f7ff f819 	bl	80183d8 <HAL_GetTick>
 80193a6:	60f8      	str	r0, [r7, #12]

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 80193a8:	e010      	b.n	80193cc <FLASH_WaitForLastOperation+0x3c>
  { 
    if(Timeout != HAL_MAX_DELAY)
 80193aa:	687b      	ldr	r3, [r7, #4]
 80193ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80193b0:	d00c      	beq.n	80193cc <FLASH_WaitForLastOperation+0x3c>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 80193b2:	687b      	ldr	r3, [r7, #4]
 80193b4:	2b00      	cmp	r3, #0
 80193b6:	d007      	beq.n	80193c8 <FLASH_WaitForLastOperation+0x38>
 80193b8:	f7ff f80e 	bl	80183d8 <HAL_GetTick>
 80193bc:	4602      	mov	r2, r0
 80193be:	68fb      	ldr	r3, [r7, #12]
 80193c0:	1ad3      	subs	r3, r2, r3
 80193c2:	687a      	ldr	r2, [r7, #4]
 80193c4:	429a      	cmp	r2, r3
 80193c6:	d201      	bcs.n	80193cc <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 80193c8:	2303      	movs	r3, #3
 80193ca:	e019      	b.n	8019400 <FLASH_WaitForLastOperation+0x70>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 80193cc:	4b0f      	ldr	r3, [pc, #60]	; (801940c <FLASH_WaitForLastOperation+0x7c>)
 80193ce:	68db      	ldr	r3, [r3, #12]
 80193d0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80193d4:	2b00      	cmp	r3, #0
 80193d6:	d1e8      	bne.n	80193aa <FLASH_WaitForLastOperation+0x1a>
      }
    } 
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 80193d8:	4b0c      	ldr	r3, [pc, #48]	; (801940c <FLASH_WaitForLastOperation+0x7c>)
 80193da:	68db      	ldr	r3, [r3, #12]
 80193dc:	f003 0301 	and.w	r3, r3, #1
 80193e0:	2b00      	cmp	r3, #0
 80193e2:	d002      	beq.n	80193ea <FLASH_WaitForLastOperation+0x5a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 80193e4:	4b09      	ldr	r3, [pc, #36]	; (801940c <FLASH_WaitForLastOperation+0x7c>)
 80193e6:	2201      	movs	r2, #1
 80193e8:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)  
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 80193ea:	4b08      	ldr	r3, [pc, #32]	; (801940c <FLASH_WaitForLastOperation+0x7c>)
 80193ec:	68db      	ldr	r3, [r3, #12]
 80193ee:	f403 73f9 	and.w	r3, r3, #498	; 0x1f2
 80193f2:	2b00      	cmp	r3, #0
 80193f4:	d003      	beq.n	80193fe <FLASH_WaitForLastOperation+0x6e>
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 80193f6:	f000 f8a5 	bl	8019544 <FLASH_SetErrorCode>
    return HAL_ERROR;
 80193fa:	2301      	movs	r3, #1
 80193fc:	e000      	b.n	8019400 <FLASH_WaitForLastOperation+0x70>
  }

  /* If there is no error flag set */
  return HAL_OK;
 80193fe:	2300      	movs	r3, #0
  
}  
 8019400:	4618      	mov	r0, r3
 8019402:	3710      	adds	r7, #16
 8019404:	46bd      	mov	sp, r7
 8019406:	bd80      	pop	{r7, pc}
 8019408:	20006c7c 	.word	0x20006c7c
 801940c:	40023c00 	.word	0x40023c00

08019410 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 8019410:	b480      	push	{r7}
 8019412:	b085      	sub	sp, #20
 8019414:	af00      	add	r7, sp, #0
 8019416:	60f8      	str	r0, [r7, #12]
 8019418:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 801941c:	4b14      	ldr	r3, [pc, #80]	; (8019470 <FLASH_Program_DoubleWord+0x60>)
 801941e:	691b      	ldr	r3, [r3, #16]
 8019420:	4a13      	ldr	r2, [pc, #76]	; (8019470 <FLASH_Program_DoubleWord+0x60>)
 8019422:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8019426:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 8019428:	4b11      	ldr	r3, [pc, #68]	; (8019470 <FLASH_Program_DoubleWord+0x60>)
 801942a:	691b      	ldr	r3, [r3, #16]
 801942c:	4a10      	ldr	r2, [pc, #64]	; (8019470 <FLASH_Program_DoubleWord+0x60>)
 801942e:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8019432:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8019434:	4b0e      	ldr	r3, [pc, #56]	; (8019470 <FLASH_Program_DoubleWord+0x60>)
 8019436:	691b      	ldr	r3, [r3, #16]
 8019438:	4a0d      	ldr	r2, [pc, #52]	; (8019470 <FLASH_Program_DoubleWord+0x60>)
 801943a:	f043 0301 	orr.w	r3, r3, #1
 801943e:	6113      	str	r3, [r2, #16]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 8019440:	68fb      	ldr	r3, [r7, #12]
 8019442:	683a      	ldr	r2, [r7, #0]
 8019444:	601a      	str	r2, [r3, #0]
           so that all instructions following the ISB are fetched from cache or memory,
           after the instruction has been completed.
 */
__STATIC_FORCEINLINE void __ISB(void)
{
  __ASM volatile ("isb 0xF":::"memory");
 8019446:	f3bf 8f6f 	isb	sy
}
 801944a:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4) = (uint32_t)(Data >> 32);
 801944c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8019450:	f04f 0200 	mov.w	r2, #0
 8019454:	f04f 0300 	mov.w	r3, #0
 8019458:	000a      	movs	r2, r1
 801945a:	2300      	movs	r3, #0
 801945c:	68f9      	ldr	r1, [r7, #12]
 801945e:	3104      	adds	r1, #4
 8019460:	4613      	mov	r3, r2
 8019462:	600b      	str	r3, [r1, #0]
}
 8019464:	bf00      	nop
 8019466:	3714      	adds	r7, #20
 8019468:	46bd      	mov	sp, r7
 801946a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801946e:	4770      	bx	lr
 8019470:	40023c00 	.word	0x40023c00

08019474 <FLASH_Program_Word>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
 8019474:	b480      	push	{r7}
 8019476:	b083      	sub	sp, #12
 8019478:	af00      	add	r7, sp, #0
 801947a:	6078      	str	r0, [r7, #4]
 801947c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 801947e:	4b0d      	ldr	r3, [pc, #52]	; (80194b4 <FLASH_Program_Word+0x40>)
 8019480:	691b      	ldr	r3, [r3, #16]
 8019482:	4a0c      	ldr	r2, [pc, #48]	; (80194b4 <FLASH_Program_Word+0x40>)
 8019484:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8019488:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 801948a:	4b0a      	ldr	r3, [pc, #40]	; (80194b4 <FLASH_Program_Word+0x40>)
 801948c:	691b      	ldr	r3, [r3, #16]
 801948e:	4a09      	ldr	r2, [pc, #36]	; (80194b4 <FLASH_Program_Word+0x40>)
 8019490:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8019494:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8019496:	4b07      	ldr	r3, [pc, #28]	; (80194b4 <FLASH_Program_Word+0x40>)
 8019498:	691b      	ldr	r3, [r3, #16]
 801949a:	4a06      	ldr	r2, [pc, #24]	; (80194b4 <FLASH_Program_Word+0x40>)
 801949c:	f043 0301 	orr.w	r3, r3, #1
 80194a0:	6113      	str	r3, [r2, #16]

  *(__IO uint32_t*)Address = Data;
 80194a2:	687b      	ldr	r3, [r7, #4]
 80194a4:	683a      	ldr	r2, [r7, #0]
 80194a6:	601a      	str	r2, [r3, #0]
}
 80194a8:	bf00      	nop
 80194aa:	370c      	adds	r7, #12
 80194ac:	46bd      	mov	sp, r7
 80194ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80194b2:	4770      	bx	lr
 80194b4:	40023c00 	.word	0x40023c00

080194b8 <FLASH_Program_HalfWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 80194b8:	b480      	push	{r7}
 80194ba:	b083      	sub	sp, #12
 80194bc:	af00      	add	r7, sp, #0
 80194be:	6078      	str	r0, [r7, #4]
 80194c0:	460b      	mov	r3, r1
 80194c2:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80194c4:	4b0d      	ldr	r3, [pc, #52]	; (80194fc <FLASH_Program_HalfWord+0x44>)
 80194c6:	691b      	ldr	r3, [r3, #16]
 80194c8:	4a0c      	ldr	r2, [pc, #48]	; (80194fc <FLASH_Program_HalfWord+0x44>)
 80194ca:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80194ce:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 80194d0:	4b0a      	ldr	r3, [pc, #40]	; (80194fc <FLASH_Program_HalfWord+0x44>)
 80194d2:	691b      	ldr	r3, [r3, #16]
 80194d4:	4a09      	ldr	r2, [pc, #36]	; (80194fc <FLASH_Program_HalfWord+0x44>)
 80194d6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80194da:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 80194dc:	4b07      	ldr	r3, [pc, #28]	; (80194fc <FLASH_Program_HalfWord+0x44>)
 80194de:	691b      	ldr	r3, [r3, #16]
 80194e0:	4a06      	ldr	r2, [pc, #24]	; (80194fc <FLASH_Program_HalfWord+0x44>)
 80194e2:	f043 0301 	orr.w	r3, r3, #1
 80194e6:	6113      	str	r3, [r2, #16]

  *(__IO uint16_t*)Address = Data;
 80194e8:	687b      	ldr	r3, [r7, #4]
 80194ea:	887a      	ldrh	r2, [r7, #2]
 80194ec:	801a      	strh	r2, [r3, #0]
}
 80194ee:	bf00      	nop
 80194f0:	370c      	adds	r7, #12
 80194f2:	46bd      	mov	sp, r7
 80194f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80194f8:	4770      	bx	lr
 80194fa:	bf00      	nop
 80194fc:	40023c00 	.word	0x40023c00

08019500 <FLASH_Program_Byte>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
{
 8019500:	b480      	push	{r7}
 8019502:	b083      	sub	sp, #12
 8019504:	af00      	add	r7, sp, #0
 8019506:	6078      	str	r0, [r7, #4]
 8019508:	460b      	mov	r3, r1
 801950a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 801950c:	4b0c      	ldr	r3, [pc, #48]	; (8019540 <FLASH_Program_Byte+0x40>)
 801950e:	691b      	ldr	r3, [r3, #16]
 8019510:	4a0b      	ldr	r2, [pc, #44]	; (8019540 <FLASH_Program_Byte+0x40>)
 8019512:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8019516:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 8019518:	4b09      	ldr	r3, [pc, #36]	; (8019540 <FLASH_Program_Byte+0x40>)
 801951a:	4a09      	ldr	r2, [pc, #36]	; (8019540 <FLASH_Program_Byte+0x40>)
 801951c:	691b      	ldr	r3, [r3, #16]
 801951e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8019520:	4b07      	ldr	r3, [pc, #28]	; (8019540 <FLASH_Program_Byte+0x40>)
 8019522:	691b      	ldr	r3, [r3, #16]
 8019524:	4a06      	ldr	r2, [pc, #24]	; (8019540 <FLASH_Program_Byte+0x40>)
 8019526:	f043 0301 	orr.w	r3, r3, #1
 801952a:	6113      	str	r3, [r2, #16]

  *(__IO uint8_t*)Address = Data;
 801952c:	687b      	ldr	r3, [r7, #4]
 801952e:	78fa      	ldrb	r2, [r7, #3]
 8019530:	701a      	strb	r2, [r3, #0]
}
 8019532:	bf00      	nop
 8019534:	370c      	adds	r7, #12
 8019536:	46bd      	mov	sp, r7
 8019538:	f85d 7b04 	ldr.w	r7, [sp], #4
 801953c:	4770      	bx	lr
 801953e:	bf00      	nop
 8019540:	40023c00 	.word	0x40023c00

08019544 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
 8019544:	b480      	push	{r7}
 8019546:	af00      	add	r7, sp, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 8019548:	4b2f      	ldr	r3, [pc, #188]	; (8019608 <FLASH_SetErrorCode+0xc4>)
 801954a:	68db      	ldr	r3, [r3, #12]
 801954c:	f003 0310 	and.w	r3, r3, #16
 8019550:	2b00      	cmp	r3, #0
 8019552:	d008      	beq.n	8019566 <FLASH_SetErrorCode+0x22>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8019554:	4b2d      	ldr	r3, [pc, #180]	; (801960c <FLASH_SetErrorCode+0xc8>)
 8019556:	69db      	ldr	r3, [r3, #28]
 8019558:	f043 0310 	orr.w	r3, r3, #16
 801955c:	4a2b      	ldr	r2, [pc, #172]	; (801960c <FLASH_SetErrorCode+0xc8>)
 801955e:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH write protection error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 8019560:	4b29      	ldr	r3, [pc, #164]	; (8019608 <FLASH_SetErrorCode+0xc4>)
 8019562:	2210      	movs	r2, #16
 8019564:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 8019566:	4b28      	ldr	r3, [pc, #160]	; (8019608 <FLASH_SetErrorCode+0xc4>)
 8019568:	68db      	ldr	r3, [r3, #12]
 801956a:	f003 0320 	and.w	r3, r3, #32
 801956e:	2b00      	cmp	r3, #0
 8019570:	d008      	beq.n	8019584 <FLASH_SetErrorCode+0x40>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 8019572:	4b26      	ldr	r3, [pc, #152]	; (801960c <FLASH_SetErrorCode+0xc8>)
 8019574:	69db      	ldr	r3, [r3, #28]
 8019576:	f043 0308 	orr.w	r3, r3, #8
 801957a:	4a24      	ldr	r2, [pc, #144]	; (801960c <FLASH_SetErrorCode+0xc8>)
 801957c:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH Programming alignment error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 801957e:	4b22      	ldr	r3, [pc, #136]	; (8019608 <FLASH_SetErrorCode+0xc4>)
 8019580:	2220      	movs	r2, #32
 8019582:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 8019584:	4b20      	ldr	r3, [pc, #128]	; (8019608 <FLASH_SetErrorCode+0xc4>)
 8019586:	68db      	ldr	r3, [r3, #12]
 8019588:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801958c:	2b00      	cmp	r3, #0
 801958e:	d008      	beq.n	80195a2 <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 8019590:	4b1e      	ldr	r3, [pc, #120]	; (801960c <FLASH_SetErrorCode+0xc8>)
 8019592:	69db      	ldr	r3, [r3, #28]
 8019594:	f043 0304 	orr.w	r3, r3, #4
 8019598:	4a1c      	ldr	r2, [pc, #112]	; (801960c <FLASH_SetErrorCode+0xc8>)
 801959a:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 801959c:	4b1a      	ldr	r3, [pc, #104]	; (8019608 <FLASH_SetErrorCode+0xc4>)
 801959e:	2240      	movs	r2, #64	; 0x40
 80195a0:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 80195a2:	4b19      	ldr	r3, [pc, #100]	; (8019608 <FLASH_SetErrorCode+0xc4>)
 80195a4:	68db      	ldr	r3, [r3, #12]
 80195a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80195aa:	2b00      	cmp	r3, #0
 80195ac:	d008      	beq.n	80195c0 <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 80195ae:	4b17      	ldr	r3, [pc, #92]	; (801960c <FLASH_SetErrorCode+0xc8>)
 80195b0:	69db      	ldr	r3, [r3, #28]
 80195b2:	f043 0302 	orr.w	r3, r3, #2
 80195b6:	4a15      	ldr	r2, [pc, #84]	; (801960c <FLASH_SetErrorCode+0xc8>)
 80195b8:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 80195ba:	4b13      	ldr	r3, [pc, #76]	; (8019608 <FLASH_SetErrorCode+0xc4>)
 80195bc:	2280      	movs	r2, #128	; 0x80
 80195be:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR) 
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR) != RESET)
 80195c0:	4b11      	ldr	r3, [pc, #68]	; (8019608 <FLASH_SetErrorCode+0xc4>)
 80195c2:	68db      	ldr	r3, [r3, #12]
 80195c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80195c8:	2b00      	cmp	r3, #0
 80195ca:	d009      	beq.n	80195e0 <FLASH_SetErrorCode+0x9c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_RD;
 80195cc:	4b0f      	ldr	r3, [pc, #60]	; (801960c <FLASH_SetErrorCode+0xc8>)
 80195ce:	69db      	ldr	r3, [r3, #28]
 80195d0:	f043 0301 	orr.w	r3, r3, #1
 80195d4:	4a0d      	ldr	r2, [pc, #52]	; (801960c <FLASH_SetErrorCode+0xc8>)
 80195d6:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
 80195d8:	4b0b      	ldr	r3, [pc, #44]	; (8019608 <FLASH_SetErrorCode+0xc4>)
 80195da:	f44f 7280 	mov.w	r2, #256	; 0x100
 80195de:	60da      	str	r2, [r3, #12]
  }
#endif /* FLASH_SR_RDERR */  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 80195e0:	4b09      	ldr	r3, [pc, #36]	; (8019608 <FLASH_SetErrorCode+0xc4>)
 80195e2:	68db      	ldr	r3, [r3, #12]
 80195e4:	f003 0302 	and.w	r3, r3, #2
 80195e8:	2b00      	cmp	r3, #0
 80195ea:	d008      	beq.n	80195fe <FLASH_SetErrorCode+0xba>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 80195ec:	4b07      	ldr	r3, [pc, #28]	; (801960c <FLASH_SetErrorCode+0xc8>)
 80195ee:	69db      	ldr	r3, [r3, #28]
 80195f0:	f043 0320 	orr.w	r3, r3, #32
 80195f4:	4a05      	ldr	r2, [pc, #20]	; (801960c <FLASH_SetErrorCode+0xc8>)
 80195f6:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 80195f8:	4b03      	ldr	r3, [pc, #12]	; (8019608 <FLASH_SetErrorCode+0xc4>)
 80195fa:	2202      	movs	r2, #2
 80195fc:	60da      	str	r2, [r3, #12]
  }
}
 80195fe:	bf00      	nop
 8019600:	46bd      	mov	sp, r7
 8019602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019606:	4770      	bx	lr
 8019608:	40023c00 	.word	0x40023c00
 801960c:	20006c7c 	.word	0x20006c7c

08019610 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFFU means that all the sectors have been correctly erased)
  *
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *SectorError)
{
 8019610:	b580      	push	{r7, lr}
 8019612:	b084      	sub	sp, #16
 8019614:	af00      	add	r7, sp, #0
 8019616:	6078      	str	r0, [r7, #4]
 8019618:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 801961a:	2301      	movs	r3, #1
 801961c:	73fb      	strb	r3, [r7, #15]
  uint32_t index = 0U;
 801961e:	2300      	movs	r3, #0
 8019620:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8019622:	4b31      	ldr	r3, [pc, #196]	; (80196e8 <HAL_FLASHEx_Erase+0xd8>)
 8019624:	7e1b      	ldrb	r3, [r3, #24]
 8019626:	2b01      	cmp	r3, #1
 8019628:	d101      	bne.n	801962e <HAL_FLASHEx_Erase+0x1e>
 801962a:	2302      	movs	r3, #2
 801962c:	e058      	b.n	80196e0 <HAL_FLASHEx_Erase+0xd0>
 801962e:	4b2e      	ldr	r3, [pc, #184]	; (80196e8 <HAL_FLASHEx_Erase+0xd8>)
 8019630:	2201      	movs	r2, #1
 8019632:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8019634:	f24c 3050 	movw	r0, #50000	; 0xc350
 8019638:	f7ff feaa 	bl	8019390 <FLASH_WaitForLastOperation>
 801963c:	4603      	mov	r3, r0
 801963e:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8019640:	7bfb      	ldrb	r3, [r7, #15]
 8019642:	2b00      	cmp	r3, #0
 8019644:	d148      	bne.n	80196d8 <HAL_FLASHEx_Erase+0xc8>
  {
    /*Initialization of SectorError variable*/
    *SectorError = 0xFFFFFFFFU;
 8019646:	683b      	ldr	r3, [r7, #0]
 8019648:	f04f 32ff 	mov.w	r2, #4294967295
 801964c:	601a      	str	r2, [r3, #0]

    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 801964e:	687b      	ldr	r3, [r7, #4]
 8019650:	681b      	ldr	r3, [r3, #0]
 8019652:	2b01      	cmp	r3, #1
 8019654:	d115      	bne.n	8019682 <HAL_FLASHEx_Erase+0x72>
    {
      /*Mass erase to be done*/
      FLASH_MassErase((uint8_t) pEraseInit->VoltageRange, pEraseInit->Banks);
 8019656:	687b      	ldr	r3, [r7, #4]
 8019658:	691b      	ldr	r3, [r3, #16]
 801965a:	b2da      	uxtb	r2, r3
 801965c:	687b      	ldr	r3, [r7, #4]
 801965e:	685b      	ldr	r3, [r3, #4]
 8019660:	4619      	mov	r1, r3
 8019662:	4610      	mov	r0, r2
 8019664:	f000 f844 	bl	80196f0 <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8019668:	f24c 3050 	movw	r0, #50000	; 0xc350
 801966c:	f7ff fe90 	bl	8019390 <FLASH_WaitForLastOperation>
 8019670:	4603      	mov	r3, r0
 8019672:	73fb      	strb	r3, [r7, #15]

      /* if the erase operation is completed, disable the MER Bit */
      FLASH->CR &= (~FLASH_MER_BIT);
 8019674:	4b1d      	ldr	r3, [pc, #116]	; (80196ec <HAL_FLASHEx_Erase+0xdc>)
 8019676:	691b      	ldr	r3, [r3, #16]
 8019678:	4a1c      	ldr	r2, [pc, #112]	; (80196ec <HAL_FLASHEx_Erase+0xdc>)
 801967a:	f023 0304 	bic.w	r3, r3, #4
 801967e:	6113      	str	r3, [r2, #16]
 8019680:	e028      	b.n	80196d4 <HAL_FLASHEx_Erase+0xc4>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_NBSECTORS(pEraseInit->NbSectors + pEraseInit->Sector));

      /* Erase by sector by sector to be done*/
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 8019682:	687b      	ldr	r3, [r7, #4]
 8019684:	689b      	ldr	r3, [r3, #8]
 8019686:	60bb      	str	r3, [r7, #8]
 8019688:	e01c      	b.n	80196c4 <HAL_FLASHEx_Erase+0xb4>
      {
        FLASH_Erase_Sector(index, (uint8_t) pEraseInit->VoltageRange);
 801968a:	687b      	ldr	r3, [r7, #4]
 801968c:	691b      	ldr	r3, [r3, #16]
 801968e:	b2db      	uxtb	r3, r3
 8019690:	4619      	mov	r1, r3
 8019692:	68b8      	ldr	r0, [r7, #8]
 8019694:	f000 f850 	bl	8019738 <FLASH_Erase_Sector>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8019698:	f24c 3050 	movw	r0, #50000	; 0xc350
 801969c:	f7ff fe78 	bl	8019390 <FLASH_WaitForLastOperation>
 80196a0:	4603      	mov	r3, r0
 80196a2:	73fb      	strb	r3, [r7, #15]

        /* If the erase operation is completed, disable the SER and SNB Bits */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB));
 80196a4:	4b11      	ldr	r3, [pc, #68]	; (80196ec <HAL_FLASHEx_Erase+0xdc>)
 80196a6:	691b      	ldr	r3, [r3, #16]
 80196a8:	4a10      	ldr	r2, [pc, #64]	; (80196ec <HAL_FLASHEx_Erase+0xdc>)
 80196aa:	f023 03fa 	bic.w	r3, r3, #250	; 0xfa
 80196ae:	6113      	str	r3, [r2, #16]

        if (status != HAL_OK)
 80196b0:	7bfb      	ldrb	r3, [r7, #15]
 80196b2:	2b00      	cmp	r3, #0
 80196b4:	d003      	beq.n	80196be <HAL_FLASHEx_Erase+0xae>
        {
          /* In case of error, stop erase procedure and return the faulty sector*/
          *SectorError = index;
 80196b6:	683b      	ldr	r3, [r7, #0]
 80196b8:	68ba      	ldr	r2, [r7, #8]
 80196ba:	601a      	str	r2, [r3, #0]
          break;
 80196bc:	e00a      	b.n	80196d4 <HAL_FLASHEx_Erase+0xc4>
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 80196be:	68bb      	ldr	r3, [r7, #8]
 80196c0:	3301      	adds	r3, #1
 80196c2:	60bb      	str	r3, [r7, #8]
 80196c4:	687b      	ldr	r3, [r7, #4]
 80196c6:	68da      	ldr	r2, [r3, #12]
 80196c8:	687b      	ldr	r3, [r7, #4]
 80196ca:	689b      	ldr	r3, [r3, #8]
 80196cc:	4413      	add	r3, r2
 80196ce:	68ba      	ldr	r2, [r7, #8]
 80196d0:	429a      	cmp	r2, r3
 80196d2:	d3da      	bcc.n	801968a <HAL_FLASHEx_Erase+0x7a>
        }
      }
    }
    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 80196d4:	f000 f878 	bl	80197c8 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 80196d8:	4b03      	ldr	r3, [pc, #12]	; (80196e8 <HAL_FLASHEx_Erase+0xd8>)
 80196da:	2200      	movs	r2, #0
 80196dc:	761a      	strb	r2, [r3, #24]

  return status;
 80196de:	7bfb      	ldrb	r3, [r7, #15]
}
 80196e0:	4618      	mov	r0, r3
 80196e2:	3710      	adds	r7, #16
 80196e4:	46bd      	mov	sp, r7
 80196e6:	bd80      	pop	{r7, pc}
 80196e8:	20006c7c 	.word	0x20006c7c
 80196ec:	40023c00 	.word	0x40023c00

080196f0 <FLASH_MassErase>:
  *            @arg FLASH_BANK_1: Bank1 to be erased
  *
  * @retval None
  */
static void FLASH_MassErase(uint8_t VoltageRange, uint32_t Banks)
{
 80196f0:	b480      	push	{r7}
 80196f2:	b083      	sub	sp, #12
 80196f4:	af00      	add	r7, sp, #0
 80196f6:	4603      	mov	r3, r0
 80196f8:	6039      	str	r1, [r7, #0]
 80196fa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  assert_param(IS_FLASH_BANK(Banks));

  /* If the previous operation is completed, proceed to erase all sectors */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80196fc:	4b0d      	ldr	r3, [pc, #52]	; (8019734 <FLASH_MassErase+0x44>)
 80196fe:	691b      	ldr	r3, [r3, #16]
 8019700:	4a0c      	ldr	r2, [pc, #48]	; (8019734 <FLASH_MassErase+0x44>)
 8019702:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8019706:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_MER;
 8019708:	4b0a      	ldr	r3, [pc, #40]	; (8019734 <FLASH_MassErase+0x44>)
 801970a:	691b      	ldr	r3, [r3, #16]
 801970c:	4a09      	ldr	r2, [pc, #36]	; (8019734 <FLASH_MassErase+0x44>)
 801970e:	f043 0304 	orr.w	r3, r3, #4
 8019712:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT | ((uint32_t)VoltageRange << 8U);
 8019714:	4b07      	ldr	r3, [pc, #28]	; (8019734 <FLASH_MassErase+0x44>)
 8019716:	691a      	ldr	r2, [r3, #16]
 8019718:	79fb      	ldrb	r3, [r7, #7]
 801971a:	021b      	lsls	r3, r3, #8
 801971c:	4313      	orrs	r3, r2
 801971e:	4a05      	ldr	r2, [pc, #20]	; (8019734 <FLASH_MassErase+0x44>)
 8019720:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8019724:	6113      	str	r3, [r2, #16]
}
 8019726:	bf00      	nop
 8019728:	370c      	adds	r7, #12
 801972a:	46bd      	mov	sp, r7
 801972c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019730:	4770      	bx	lr
 8019732:	bf00      	nop
 8019734:	40023c00 	.word	0x40023c00

08019738 <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  *
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 8019738:	b480      	push	{r7}
 801973a:	b085      	sub	sp, #20
 801973c:	af00      	add	r7, sp, #0
 801973e:	6078      	str	r0, [r7, #4]
 8019740:	460b      	mov	r3, r1
 8019742:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
 8019744:	2300      	movs	r3, #0
 8019746:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));

  if (VoltageRange == FLASH_VOLTAGE_RANGE_1)
 8019748:	78fb      	ldrb	r3, [r7, #3]
 801974a:	2b00      	cmp	r3, #0
 801974c:	d102      	bne.n	8019754 <FLASH_Erase_Sector+0x1c>
  {
    tmp_psize = FLASH_PSIZE_BYTE;
 801974e:	2300      	movs	r3, #0
 8019750:	60fb      	str	r3, [r7, #12]
 8019752:	e010      	b.n	8019776 <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_2)
 8019754:	78fb      	ldrb	r3, [r7, #3]
 8019756:	2b01      	cmp	r3, #1
 8019758:	d103      	bne.n	8019762 <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 801975a:	f44f 7380 	mov.w	r3, #256	; 0x100
 801975e:	60fb      	str	r3, [r7, #12]
 8019760:	e009      	b.n	8019776 <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_3)
 8019762:	78fb      	ldrb	r3, [r7, #3]
 8019764:	2b02      	cmp	r3, #2
 8019766:	d103      	bne.n	8019770 <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 8019768:	f44f 7300 	mov.w	r3, #512	; 0x200
 801976c:	60fb      	str	r3, [r7, #12]
 801976e:	e002      	b.n	8019776 <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 8019770:	f44f 7340 	mov.w	r3, #768	; 0x300
 8019774:	60fb      	str	r3, [r7, #12]
  }

  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8019776:	4b13      	ldr	r3, [pc, #76]	; (80197c4 <FLASH_Erase_Sector+0x8c>)
 8019778:	691b      	ldr	r3, [r3, #16]
 801977a:	4a12      	ldr	r2, [pc, #72]	; (80197c4 <FLASH_Erase_Sector+0x8c>)
 801977c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8019780:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 8019782:	4b10      	ldr	r3, [pc, #64]	; (80197c4 <FLASH_Erase_Sector+0x8c>)
 8019784:	691a      	ldr	r2, [r3, #16]
 8019786:	490f      	ldr	r1, [pc, #60]	; (80197c4 <FLASH_Erase_Sector+0x8c>)
 8019788:	68fb      	ldr	r3, [r7, #12]
 801978a:	4313      	orrs	r3, r2
 801978c:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 801978e:	4b0d      	ldr	r3, [pc, #52]	; (80197c4 <FLASH_Erase_Sector+0x8c>)
 8019790:	691b      	ldr	r3, [r3, #16]
 8019792:	4a0c      	ldr	r2, [pc, #48]	; (80197c4 <FLASH_Erase_Sector+0x8c>)
 8019794:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8019798:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 801979a:	4b0a      	ldr	r3, [pc, #40]	; (80197c4 <FLASH_Erase_Sector+0x8c>)
 801979c:	691a      	ldr	r2, [r3, #16]
 801979e:	687b      	ldr	r3, [r7, #4]
 80197a0:	00db      	lsls	r3, r3, #3
 80197a2:	4313      	orrs	r3, r2
 80197a4:	4a07      	ldr	r2, [pc, #28]	; (80197c4 <FLASH_Erase_Sector+0x8c>)
 80197a6:	f043 0302 	orr.w	r3, r3, #2
 80197aa:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 80197ac:	4b05      	ldr	r3, [pc, #20]	; (80197c4 <FLASH_Erase_Sector+0x8c>)
 80197ae:	691b      	ldr	r3, [r3, #16]
 80197b0:	4a04      	ldr	r2, [pc, #16]	; (80197c4 <FLASH_Erase_Sector+0x8c>)
 80197b2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80197b6:	6113      	str	r3, [r2, #16]
}
 80197b8:	bf00      	nop
 80197ba:	3714      	adds	r7, #20
 80197bc:	46bd      	mov	sp, r7
 80197be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80197c2:	4770      	bx	lr
 80197c4:	40023c00 	.word	0x40023c00

080197c8 <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 80197c8:	b480      	push	{r7}
 80197ca:	af00      	add	r7, sp, #0
  /* Flush instruction cache  */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != RESET)
 80197cc:	4b20      	ldr	r3, [pc, #128]	; (8019850 <FLASH_FlushCaches+0x88>)
 80197ce:	681b      	ldr	r3, [r3, #0]
 80197d0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80197d4:	2b00      	cmp	r3, #0
 80197d6:	d017      	beq.n	8019808 <FLASH_FlushCaches+0x40>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 80197d8:	4b1d      	ldr	r3, [pc, #116]	; (8019850 <FLASH_FlushCaches+0x88>)
 80197da:	681b      	ldr	r3, [r3, #0]
 80197dc:	4a1c      	ldr	r2, [pc, #112]	; (8019850 <FLASH_FlushCaches+0x88>)
 80197de:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80197e2:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 80197e4:	4b1a      	ldr	r3, [pc, #104]	; (8019850 <FLASH_FlushCaches+0x88>)
 80197e6:	681b      	ldr	r3, [r3, #0]
 80197e8:	4a19      	ldr	r2, [pc, #100]	; (8019850 <FLASH_FlushCaches+0x88>)
 80197ea:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80197ee:	6013      	str	r3, [r2, #0]
 80197f0:	4b17      	ldr	r3, [pc, #92]	; (8019850 <FLASH_FlushCaches+0x88>)
 80197f2:	681b      	ldr	r3, [r3, #0]
 80197f4:	4a16      	ldr	r2, [pc, #88]	; (8019850 <FLASH_FlushCaches+0x88>)
 80197f6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80197fa:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80197fc:	4b14      	ldr	r3, [pc, #80]	; (8019850 <FLASH_FlushCaches+0x88>)
 80197fe:	681b      	ldr	r3, [r3, #0]
 8019800:	4a13      	ldr	r2, [pc, #76]	; (8019850 <FLASH_FlushCaches+0x88>)
 8019802:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8019806:	6013      	str	r3, [r2, #0]
  }

  /* Flush data cache */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != RESET)
 8019808:	4b11      	ldr	r3, [pc, #68]	; (8019850 <FLASH_FlushCaches+0x88>)
 801980a:	681b      	ldr	r3, [r3, #0]
 801980c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8019810:	2b00      	cmp	r3, #0
 8019812:	d017      	beq.n	8019844 <FLASH_FlushCaches+0x7c>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 8019814:	4b0e      	ldr	r3, [pc, #56]	; (8019850 <FLASH_FlushCaches+0x88>)
 8019816:	681b      	ldr	r3, [r3, #0]
 8019818:	4a0d      	ldr	r2, [pc, #52]	; (8019850 <FLASH_FlushCaches+0x88>)
 801981a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 801981e:	6013      	str	r3, [r2, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 8019820:	4b0b      	ldr	r3, [pc, #44]	; (8019850 <FLASH_FlushCaches+0x88>)
 8019822:	681b      	ldr	r3, [r3, #0]
 8019824:	4a0a      	ldr	r2, [pc, #40]	; (8019850 <FLASH_FlushCaches+0x88>)
 8019826:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 801982a:	6013      	str	r3, [r2, #0]
 801982c:	4b08      	ldr	r3, [pc, #32]	; (8019850 <FLASH_FlushCaches+0x88>)
 801982e:	681b      	ldr	r3, [r3, #0]
 8019830:	4a07      	ldr	r2, [pc, #28]	; (8019850 <FLASH_FlushCaches+0x88>)
 8019832:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8019836:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 8019838:	4b05      	ldr	r3, [pc, #20]	; (8019850 <FLASH_FlushCaches+0x88>)
 801983a:	681b      	ldr	r3, [r3, #0]
 801983c:	4a04      	ldr	r2, [pc, #16]	; (8019850 <FLASH_FlushCaches+0x88>)
 801983e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8019842:	6013      	str	r3, [r2, #0]
  }
}
 8019844:	bf00      	nop
 8019846:	46bd      	mov	sp, r7
 8019848:	f85d 7b04 	ldr.w	r7, [sp], #4
 801984c:	4770      	bx	lr
 801984e:	bf00      	nop
 8019850:	40023c00 	.word	0x40023c00

08019854 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8019854:	b480      	push	{r7}
 8019856:	b089      	sub	sp, #36	; 0x24
 8019858:	af00      	add	r7, sp, #0
 801985a:	6078      	str	r0, [r7, #4]
 801985c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 801985e:	2300      	movs	r3, #0
 8019860:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8019862:	2300      	movs	r3, #0
 8019864:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8019866:	2300      	movs	r3, #0
 8019868:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 801986a:	2300      	movs	r3, #0
 801986c:	61fb      	str	r3, [r7, #28]
 801986e:	e165      	b.n	8019b3c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8019870:	2201      	movs	r2, #1
 8019872:	69fb      	ldr	r3, [r7, #28]
 8019874:	fa02 f303 	lsl.w	r3, r2, r3
 8019878:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 801987a:	683b      	ldr	r3, [r7, #0]
 801987c:	681b      	ldr	r3, [r3, #0]
 801987e:	697a      	ldr	r2, [r7, #20]
 8019880:	4013      	ands	r3, r2
 8019882:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8019884:	693a      	ldr	r2, [r7, #16]
 8019886:	697b      	ldr	r3, [r7, #20]
 8019888:	429a      	cmp	r2, r3
 801988a:	f040 8154 	bne.w	8019b36 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 801988e:	683b      	ldr	r3, [r7, #0]
 8019890:	685b      	ldr	r3, [r3, #4]
 8019892:	f003 0303 	and.w	r3, r3, #3
 8019896:	2b01      	cmp	r3, #1
 8019898:	d005      	beq.n	80198a6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 801989a:	683b      	ldr	r3, [r7, #0]
 801989c:	685b      	ldr	r3, [r3, #4]
 801989e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80198a2:	2b02      	cmp	r3, #2
 80198a4:	d130      	bne.n	8019908 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80198a6:	687b      	ldr	r3, [r7, #4]
 80198a8:	689b      	ldr	r3, [r3, #8]
 80198aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80198ac:	69fb      	ldr	r3, [r7, #28]
 80198ae:	005b      	lsls	r3, r3, #1
 80198b0:	2203      	movs	r2, #3
 80198b2:	fa02 f303 	lsl.w	r3, r2, r3
 80198b6:	43db      	mvns	r3, r3
 80198b8:	69ba      	ldr	r2, [r7, #24]
 80198ba:	4013      	ands	r3, r2
 80198bc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80198be:	683b      	ldr	r3, [r7, #0]
 80198c0:	68da      	ldr	r2, [r3, #12]
 80198c2:	69fb      	ldr	r3, [r7, #28]
 80198c4:	005b      	lsls	r3, r3, #1
 80198c6:	fa02 f303 	lsl.w	r3, r2, r3
 80198ca:	69ba      	ldr	r2, [r7, #24]
 80198cc:	4313      	orrs	r3, r2
 80198ce:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80198d0:	687b      	ldr	r3, [r7, #4]
 80198d2:	69ba      	ldr	r2, [r7, #24]
 80198d4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80198d6:	687b      	ldr	r3, [r7, #4]
 80198d8:	685b      	ldr	r3, [r3, #4]
 80198da:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80198dc:	2201      	movs	r2, #1
 80198de:	69fb      	ldr	r3, [r7, #28]
 80198e0:	fa02 f303 	lsl.w	r3, r2, r3
 80198e4:	43db      	mvns	r3, r3
 80198e6:	69ba      	ldr	r2, [r7, #24]
 80198e8:	4013      	ands	r3, r2
 80198ea:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80198ec:	683b      	ldr	r3, [r7, #0]
 80198ee:	685b      	ldr	r3, [r3, #4]
 80198f0:	091b      	lsrs	r3, r3, #4
 80198f2:	f003 0201 	and.w	r2, r3, #1
 80198f6:	69fb      	ldr	r3, [r7, #28]
 80198f8:	fa02 f303 	lsl.w	r3, r2, r3
 80198fc:	69ba      	ldr	r2, [r7, #24]
 80198fe:	4313      	orrs	r3, r2
 8019900:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8019902:	687b      	ldr	r3, [r7, #4]
 8019904:	69ba      	ldr	r2, [r7, #24]
 8019906:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8019908:	683b      	ldr	r3, [r7, #0]
 801990a:	685b      	ldr	r3, [r3, #4]
 801990c:	f003 0303 	and.w	r3, r3, #3
 8019910:	2b03      	cmp	r3, #3
 8019912:	d017      	beq.n	8019944 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8019914:	687b      	ldr	r3, [r7, #4]
 8019916:	68db      	ldr	r3, [r3, #12]
 8019918:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 801991a:	69fb      	ldr	r3, [r7, #28]
 801991c:	005b      	lsls	r3, r3, #1
 801991e:	2203      	movs	r2, #3
 8019920:	fa02 f303 	lsl.w	r3, r2, r3
 8019924:	43db      	mvns	r3, r3
 8019926:	69ba      	ldr	r2, [r7, #24]
 8019928:	4013      	ands	r3, r2
 801992a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 801992c:	683b      	ldr	r3, [r7, #0]
 801992e:	689a      	ldr	r2, [r3, #8]
 8019930:	69fb      	ldr	r3, [r7, #28]
 8019932:	005b      	lsls	r3, r3, #1
 8019934:	fa02 f303 	lsl.w	r3, r2, r3
 8019938:	69ba      	ldr	r2, [r7, #24]
 801993a:	4313      	orrs	r3, r2
 801993c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 801993e:	687b      	ldr	r3, [r7, #4]
 8019940:	69ba      	ldr	r2, [r7, #24]
 8019942:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8019944:	683b      	ldr	r3, [r7, #0]
 8019946:	685b      	ldr	r3, [r3, #4]
 8019948:	f003 0303 	and.w	r3, r3, #3
 801994c:	2b02      	cmp	r3, #2
 801994e:	d123      	bne.n	8019998 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8019950:	69fb      	ldr	r3, [r7, #28]
 8019952:	08da      	lsrs	r2, r3, #3
 8019954:	687b      	ldr	r3, [r7, #4]
 8019956:	3208      	adds	r2, #8
 8019958:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801995c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 801995e:	69fb      	ldr	r3, [r7, #28]
 8019960:	f003 0307 	and.w	r3, r3, #7
 8019964:	009b      	lsls	r3, r3, #2
 8019966:	220f      	movs	r2, #15
 8019968:	fa02 f303 	lsl.w	r3, r2, r3
 801996c:	43db      	mvns	r3, r3
 801996e:	69ba      	ldr	r2, [r7, #24]
 8019970:	4013      	ands	r3, r2
 8019972:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8019974:	683b      	ldr	r3, [r7, #0]
 8019976:	691a      	ldr	r2, [r3, #16]
 8019978:	69fb      	ldr	r3, [r7, #28]
 801997a:	f003 0307 	and.w	r3, r3, #7
 801997e:	009b      	lsls	r3, r3, #2
 8019980:	fa02 f303 	lsl.w	r3, r2, r3
 8019984:	69ba      	ldr	r2, [r7, #24]
 8019986:	4313      	orrs	r3, r2
 8019988:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 801998a:	69fb      	ldr	r3, [r7, #28]
 801998c:	08da      	lsrs	r2, r3, #3
 801998e:	687b      	ldr	r3, [r7, #4]
 8019990:	3208      	adds	r2, #8
 8019992:	69b9      	ldr	r1, [r7, #24]
 8019994:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8019998:	687b      	ldr	r3, [r7, #4]
 801999a:	681b      	ldr	r3, [r3, #0]
 801999c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 801999e:	69fb      	ldr	r3, [r7, #28]
 80199a0:	005b      	lsls	r3, r3, #1
 80199a2:	2203      	movs	r2, #3
 80199a4:	fa02 f303 	lsl.w	r3, r2, r3
 80199a8:	43db      	mvns	r3, r3
 80199aa:	69ba      	ldr	r2, [r7, #24]
 80199ac:	4013      	ands	r3, r2
 80199ae:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80199b0:	683b      	ldr	r3, [r7, #0]
 80199b2:	685b      	ldr	r3, [r3, #4]
 80199b4:	f003 0203 	and.w	r2, r3, #3
 80199b8:	69fb      	ldr	r3, [r7, #28]
 80199ba:	005b      	lsls	r3, r3, #1
 80199bc:	fa02 f303 	lsl.w	r3, r2, r3
 80199c0:	69ba      	ldr	r2, [r7, #24]
 80199c2:	4313      	orrs	r3, r2
 80199c4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80199c6:	687b      	ldr	r3, [r7, #4]
 80199c8:	69ba      	ldr	r2, [r7, #24]
 80199ca:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80199cc:	683b      	ldr	r3, [r7, #0]
 80199ce:	685b      	ldr	r3, [r3, #4]
 80199d0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80199d4:	2b00      	cmp	r3, #0
 80199d6:	f000 80ae 	beq.w	8019b36 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80199da:	2300      	movs	r3, #0
 80199dc:	60fb      	str	r3, [r7, #12]
 80199de:	4b5d      	ldr	r3, [pc, #372]	; (8019b54 <HAL_GPIO_Init+0x300>)
 80199e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80199e2:	4a5c      	ldr	r2, [pc, #368]	; (8019b54 <HAL_GPIO_Init+0x300>)
 80199e4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80199e8:	6453      	str	r3, [r2, #68]	; 0x44
 80199ea:	4b5a      	ldr	r3, [pc, #360]	; (8019b54 <HAL_GPIO_Init+0x300>)
 80199ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80199ee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80199f2:	60fb      	str	r3, [r7, #12]
 80199f4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80199f6:	4a58      	ldr	r2, [pc, #352]	; (8019b58 <HAL_GPIO_Init+0x304>)
 80199f8:	69fb      	ldr	r3, [r7, #28]
 80199fa:	089b      	lsrs	r3, r3, #2
 80199fc:	3302      	adds	r3, #2
 80199fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8019a02:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8019a04:	69fb      	ldr	r3, [r7, #28]
 8019a06:	f003 0303 	and.w	r3, r3, #3
 8019a0a:	009b      	lsls	r3, r3, #2
 8019a0c:	220f      	movs	r2, #15
 8019a0e:	fa02 f303 	lsl.w	r3, r2, r3
 8019a12:	43db      	mvns	r3, r3
 8019a14:	69ba      	ldr	r2, [r7, #24]
 8019a16:	4013      	ands	r3, r2
 8019a18:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8019a1a:	687b      	ldr	r3, [r7, #4]
 8019a1c:	4a4f      	ldr	r2, [pc, #316]	; (8019b5c <HAL_GPIO_Init+0x308>)
 8019a1e:	4293      	cmp	r3, r2
 8019a20:	d025      	beq.n	8019a6e <HAL_GPIO_Init+0x21a>
 8019a22:	687b      	ldr	r3, [r7, #4]
 8019a24:	4a4e      	ldr	r2, [pc, #312]	; (8019b60 <HAL_GPIO_Init+0x30c>)
 8019a26:	4293      	cmp	r3, r2
 8019a28:	d01f      	beq.n	8019a6a <HAL_GPIO_Init+0x216>
 8019a2a:	687b      	ldr	r3, [r7, #4]
 8019a2c:	4a4d      	ldr	r2, [pc, #308]	; (8019b64 <HAL_GPIO_Init+0x310>)
 8019a2e:	4293      	cmp	r3, r2
 8019a30:	d019      	beq.n	8019a66 <HAL_GPIO_Init+0x212>
 8019a32:	687b      	ldr	r3, [r7, #4]
 8019a34:	4a4c      	ldr	r2, [pc, #304]	; (8019b68 <HAL_GPIO_Init+0x314>)
 8019a36:	4293      	cmp	r3, r2
 8019a38:	d013      	beq.n	8019a62 <HAL_GPIO_Init+0x20e>
 8019a3a:	687b      	ldr	r3, [r7, #4]
 8019a3c:	4a4b      	ldr	r2, [pc, #300]	; (8019b6c <HAL_GPIO_Init+0x318>)
 8019a3e:	4293      	cmp	r3, r2
 8019a40:	d00d      	beq.n	8019a5e <HAL_GPIO_Init+0x20a>
 8019a42:	687b      	ldr	r3, [r7, #4]
 8019a44:	4a4a      	ldr	r2, [pc, #296]	; (8019b70 <HAL_GPIO_Init+0x31c>)
 8019a46:	4293      	cmp	r3, r2
 8019a48:	d007      	beq.n	8019a5a <HAL_GPIO_Init+0x206>
 8019a4a:	687b      	ldr	r3, [r7, #4]
 8019a4c:	4a49      	ldr	r2, [pc, #292]	; (8019b74 <HAL_GPIO_Init+0x320>)
 8019a4e:	4293      	cmp	r3, r2
 8019a50:	d101      	bne.n	8019a56 <HAL_GPIO_Init+0x202>
 8019a52:	2306      	movs	r3, #6
 8019a54:	e00c      	b.n	8019a70 <HAL_GPIO_Init+0x21c>
 8019a56:	2307      	movs	r3, #7
 8019a58:	e00a      	b.n	8019a70 <HAL_GPIO_Init+0x21c>
 8019a5a:	2305      	movs	r3, #5
 8019a5c:	e008      	b.n	8019a70 <HAL_GPIO_Init+0x21c>
 8019a5e:	2304      	movs	r3, #4
 8019a60:	e006      	b.n	8019a70 <HAL_GPIO_Init+0x21c>
 8019a62:	2303      	movs	r3, #3
 8019a64:	e004      	b.n	8019a70 <HAL_GPIO_Init+0x21c>
 8019a66:	2302      	movs	r3, #2
 8019a68:	e002      	b.n	8019a70 <HAL_GPIO_Init+0x21c>
 8019a6a:	2301      	movs	r3, #1
 8019a6c:	e000      	b.n	8019a70 <HAL_GPIO_Init+0x21c>
 8019a6e:	2300      	movs	r3, #0
 8019a70:	69fa      	ldr	r2, [r7, #28]
 8019a72:	f002 0203 	and.w	r2, r2, #3
 8019a76:	0092      	lsls	r2, r2, #2
 8019a78:	4093      	lsls	r3, r2
 8019a7a:	69ba      	ldr	r2, [r7, #24]
 8019a7c:	4313      	orrs	r3, r2
 8019a7e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8019a80:	4935      	ldr	r1, [pc, #212]	; (8019b58 <HAL_GPIO_Init+0x304>)
 8019a82:	69fb      	ldr	r3, [r7, #28]
 8019a84:	089b      	lsrs	r3, r3, #2
 8019a86:	3302      	adds	r3, #2
 8019a88:	69ba      	ldr	r2, [r7, #24]
 8019a8a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8019a8e:	4b3a      	ldr	r3, [pc, #232]	; (8019b78 <HAL_GPIO_Init+0x324>)
 8019a90:	681b      	ldr	r3, [r3, #0]
 8019a92:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8019a94:	693b      	ldr	r3, [r7, #16]
 8019a96:	43db      	mvns	r3, r3
 8019a98:	69ba      	ldr	r2, [r7, #24]
 8019a9a:	4013      	ands	r3, r2
 8019a9c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8019a9e:	683b      	ldr	r3, [r7, #0]
 8019aa0:	685b      	ldr	r3, [r3, #4]
 8019aa2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8019aa6:	2b00      	cmp	r3, #0
 8019aa8:	d003      	beq.n	8019ab2 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8019aaa:	69ba      	ldr	r2, [r7, #24]
 8019aac:	693b      	ldr	r3, [r7, #16]
 8019aae:	4313      	orrs	r3, r2
 8019ab0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8019ab2:	4a31      	ldr	r2, [pc, #196]	; (8019b78 <HAL_GPIO_Init+0x324>)
 8019ab4:	69bb      	ldr	r3, [r7, #24]
 8019ab6:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8019ab8:	4b2f      	ldr	r3, [pc, #188]	; (8019b78 <HAL_GPIO_Init+0x324>)
 8019aba:	685b      	ldr	r3, [r3, #4]
 8019abc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8019abe:	693b      	ldr	r3, [r7, #16]
 8019ac0:	43db      	mvns	r3, r3
 8019ac2:	69ba      	ldr	r2, [r7, #24]
 8019ac4:	4013      	ands	r3, r2
 8019ac6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8019ac8:	683b      	ldr	r3, [r7, #0]
 8019aca:	685b      	ldr	r3, [r3, #4]
 8019acc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8019ad0:	2b00      	cmp	r3, #0
 8019ad2:	d003      	beq.n	8019adc <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8019ad4:	69ba      	ldr	r2, [r7, #24]
 8019ad6:	693b      	ldr	r3, [r7, #16]
 8019ad8:	4313      	orrs	r3, r2
 8019ada:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8019adc:	4a26      	ldr	r2, [pc, #152]	; (8019b78 <HAL_GPIO_Init+0x324>)
 8019ade:	69bb      	ldr	r3, [r7, #24]
 8019ae0:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8019ae2:	4b25      	ldr	r3, [pc, #148]	; (8019b78 <HAL_GPIO_Init+0x324>)
 8019ae4:	689b      	ldr	r3, [r3, #8]
 8019ae6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8019ae8:	693b      	ldr	r3, [r7, #16]
 8019aea:	43db      	mvns	r3, r3
 8019aec:	69ba      	ldr	r2, [r7, #24]
 8019aee:	4013      	ands	r3, r2
 8019af0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8019af2:	683b      	ldr	r3, [r7, #0]
 8019af4:	685b      	ldr	r3, [r3, #4]
 8019af6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8019afa:	2b00      	cmp	r3, #0
 8019afc:	d003      	beq.n	8019b06 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8019afe:	69ba      	ldr	r2, [r7, #24]
 8019b00:	693b      	ldr	r3, [r7, #16]
 8019b02:	4313      	orrs	r3, r2
 8019b04:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8019b06:	4a1c      	ldr	r2, [pc, #112]	; (8019b78 <HAL_GPIO_Init+0x324>)
 8019b08:	69bb      	ldr	r3, [r7, #24]
 8019b0a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8019b0c:	4b1a      	ldr	r3, [pc, #104]	; (8019b78 <HAL_GPIO_Init+0x324>)
 8019b0e:	68db      	ldr	r3, [r3, #12]
 8019b10:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8019b12:	693b      	ldr	r3, [r7, #16]
 8019b14:	43db      	mvns	r3, r3
 8019b16:	69ba      	ldr	r2, [r7, #24]
 8019b18:	4013      	ands	r3, r2
 8019b1a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8019b1c:	683b      	ldr	r3, [r7, #0]
 8019b1e:	685b      	ldr	r3, [r3, #4]
 8019b20:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8019b24:	2b00      	cmp	r3, #0
 8019b26:	d003      	beq.n	8019b30 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8019b28:	69ba      	ldr	r2, [r7, #24]
 8019b2a:	693b      	ldr	r3, [r7, #16]
 8019b2c:	4313      	orrs	r3, r2
 8019b2e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8019b30:	4a11      	ldr	r2, [pc, #68]	; (8019b78 <HAL_GPIO_Init+0x324>)
 8019b32:	69bb      	ldr	r3, [r7, #24]
 8019b34:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8019b36:	69fb      	ldr	r3, [r7, #28]
 8019b38:	3301      	adds	r3, #1
 8019b3a:	61fb      	str	r3, [r7, #28]
 8019b3c:	69fb      	ldr	r3, [r7, #28]
 8019b3e:	2b0f      	cmp	r3, #15
 8019b40:	f67f ae96 	bls.w	8019870 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8019b44:	bf00      	nop
 8019b46:	bf00      	nop
 8019b48:	3724      	adds	r7, #36	; 0x24
 8019b4a:	46bd      	mov	sp, r7
 8019b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019b50:	4770      	bx	lr
 8019b52:	bf00      	nop
 8019b54:	40023800 	.word	0x40023800
 8019b58:	40013800 	.word	0x40013800
 8019b5c:	40020000 	.word	0x40020000
 8019b60:	40020400 	.word	0x40020400
 8019b64:	40020800 	.word	0x40020800
 8019b68:	40020c00 	.word	0x40020c00
 8019b6c:	40021000 	.word	0x40021000
 8019b70:	40021400 	.word	0x40021400
 8019b74:	40021800 	.word	0x40021800
 8019b78:	40013c00 	.word	0x40013c00

08019b7c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8019b7c:	b480      	push	{r7}
 8019b7e:	b085      	sub	sp, #20
 8019b80:	af00      	add	r7, sp, #0
 8019b82:	6078      	str	r0, [r7, #4]
 8019b84:	460b      	mov	r3, r1
 8019b86:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8019b88:	687b      	ldr	r3, [r7, #4]
 8019b8a:	691a      	ldr	r2, [r3, #16]
 8019b8c:	887b      	ldrh	r3, [r7, #2]
 8019b8e:	4013      	ands	r3, r2
 8019b90:	2b00      	cmp	r3, #0
 8019b92:	d002      	beq.n	8019b9a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8019b94:	2301      	movs	r3, #1
 8019b96:	73fb      	strb	r3, [r7, #15]
 8019b98:	e001      	b.n	8019b9e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8019b9a:	2300      	movs	r3, #0
 8019b9c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8019b9e:	7bfb      	ldrb	r3, [r7, #15]
}
 8019ba0:	4618      	mov	r0, r3
 8019ba2:	3714      	adds	r7, #20
 8019ba4:	46bd      	mov	sp, r7
 8019ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019baa:	4770      	bx	lr

08019bac <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8019bac:	b480      	push	{r7}
 8019bae:	b083      	sub	sp, #12
 8019bb0:	af00      	add	r7, sp, #0
 8019bb2:	6078      	str	r0, [r7, #4]
 8019bb4:	460b      	mov	r3, r1
 8019bb6:	807b      	strh	r3, [r7, #2]
 8019bb8:	4613      	mov	r3, r2
 8019bba:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8019bbc:	787b      	ldrb	r3, [r7, #1]
 8019bbe:	2b00      	cmp	r3, #0
 8019bc0:	d003      	beq.n	8019bca <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8019bc2:	887a      	ldrh	r2, [r7, #2]
 8019bc4:	687b      	ldr	r3, [r7, #4]
 8019bc6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8019bc8:	e003      	b.n	8019bd2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8019bca:	887b      	ldrh	r3, [r7, #2]
 8019bcc:	041a      	lsls	r2, r3, #16
 8019bce:	687b      	ldr	r3, [r7, #4]
 8019bd0:	619a      	str	r2, [r3, #24]
}
 8019bd2:	bf00      	nop
 8019bd4:	370c      	adds	r7, #12
 8019bd6:	46bd      	mov	sp, r7
 8019bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019bdc:	4770      	bx	lr

08019bde <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8019bde:	b5f0      	push	{r4, r5, r6, r7, lr}
 8019be0:	b08f      	sub	sp, #60	; 0x3c
 8019be2:	af0a      	add	r7, sp, #40	; 0x28
 8019be4:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8019be6:	687b      	ldr	r3, [r7, #4]
 8019be8:	2b00      	cmp	r3, #0
 8019bea:	d101      	bne.n	8019bf0 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8019bec:	2301      	movs	r3, #1
 8019bee:	e116      	b.n	8019e1e <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8019bf0:	687b      	ldr	r3, [r7, #4]
 8019bf2:	681b      	ldr	r3, [r3, #0]
 8019bf4:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8019bf6:	687b      	ldr	r3, [r7, #4]
 8019bf8:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8019bfc:	b2db      	uxtb	r3, r3
 8019bfe:	2b00      	cmp	r3, #0
 8019c00:	d106      	bne.n	8019c10 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8019c02:	687b      	ldr	r3, [r7, #4]
 8019c04:	2200      	movs	r2, #0
 8019c06:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8019c0a:	6878      	ldr	r0, [r7, #4]
 8019c0c:	f008 fc38 	bl	8022480 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8019c10:	687b      	ldr	r3, [r7, #4]
 8019c12:	2203      	movs	r2, #3
 8019c14:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8019c18:	68bb      	ldr	r3, [r7, #8]
 8019c1a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8019c1c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8019c20:	2b00      	cmp	r3, #0
 8019c22:	d102      	bne.n	8019c2a <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8019c24:	687b      	ldr	r3, [r7, #4]
 8019c26:	2200      	movs	r2, #0
 8019c28:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8019c2a:	687b      	ldr	r3, [r7, #4]
 8019c2c:	681b      	ldr	r3, [r3, #0]
 8019c2e:	4618      	mov	r0, r3
 8019c30:	f004 f8af 	bl	801dd92 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8019c34:	687b      	ldr	r3, [r7, #4]
 8019c36:	681b      	ldr	r3, [r3, #0]
 8019c38:	603b      	str	r3, [r7, #0]
 8019c3a:	687e      	ldr	r6, [r7, #4]
 8019c3c:	466d      	mov	r5, sp
 8019c3e:	f106 0410 	add.w	r4, r6, #16
 8019c42:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8019c44:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8019c46:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8019c48:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8019c4a:	e894 0003 	ldmia.w	r4, {r0, r1}
 8019c4e:	e885 0003 	stmia.w	r5, {r0, r1}
 8019c52:	1d33      	adds	r3, r6, #4
 8019c54:	cb0e      	ldmia	r3, {r1, r2, r3}
 8019c56:	6838      	ldr	r0, [r7, #0]
 8019c58:	f003 ff86 	bl	801db68 <USB_CoreInit>
 8019c5c:	4603      	mov	r3, r0
 8019c5e:	2b00      	cmp	r3, #0
 8019c60:	d005      	beq.n	8019c6e <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8019c62:	687b      	ldr	r3, [r7, #4]
 8019c64:	2202      	movs	r2, #2
 8019c66:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8019c6a:	2301      	movs	r3, #1
 8019c6c:	e0d7      	b.n	8019e1e <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8019c6e:	687b      	ldr	r3, [r7, #4]
 8019c70:	681b      	ldr	r3, [r3, #0]
 8019c72:	2100      	movs	r1, #0
 8019c74:	4618      	mov	r0, r3
 8019c76:	f004 f89d 	bl	801ddb4 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8019c7a:	2300      	movs	r3, #0
 8019c7c:	73fb      	strb	r3, [r7, #15]
 8019c7e:	e04a      	b.n	8019d16 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8019c80:	7bfa      	ldrb	r2, [r7, #15]
 8019c82:	6879      	ldr	r1, [r7, #4]
 8019c84:	4613      	mov	r3, r2
 8019c86:	00db      	lsls	r3, r3, #3
 8019c88:	1a9b      	subs	r3, r3, r2
 8019c8a:	009b      	lsls	r3, r3, #2
 8019c8c:	440b      	add	r3, r1
 8019c8e:	333d      	adds	r3, #61	; 0x3d
 8019c90:	2201      	movs	r2, #1
 8019c92:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8019c94:	7bfa      	ldrb	r2, [r7, #15]
 8019c96:	6879      	ldr	r1, [r7, #4]
 8019c98:	4613      	mov	r3, r2
 8019c9a:	00db      	lsls	r3, r3, #3
 8019c9c:	1a9b      	subs	r3, r3, r2
 8019c9e:	009b      	lsls	r3, r3, #2
 8019ca0:	440b      	add	r3, r1
 8019ca2:	333c      	adds	r3, #60	; 0x3c
 8019ca4:	7bfa      	ldrb	r2, [r7, #15]
 8019ca6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8019ca8:	7bfa      	ldrb	r2, [r7, #15]
 8019caa:	7bfb      	ldrb	r3, [r7, #15]
 8019cac:	b298      	uxth	r0, r3
 8019cae:	6879      	ldr	r1, [r7, #4]
 8019cb0:	4613      	mov	r3, r2
 8019cb2:	00db      	lsls	r3, r3, #3
 8019cb4:	1a9b      	subs	r3, r3, r2
 8019cb6:	009b      	lsls	r3, r3, #2
 8019cb8:	440b      	add	r3, r1
 8019cba:	3342      	adds	r3, #66	; 0x42
 8019cbc:	4602      	mov	r2, r0
 8019cbe:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8019cc0:	7bfa      	ldrb	r2, [r7, #15]
 8019cc2:	6879      	ldr	r1, [r7, #4]
 8019cc4:	4613      	mov	r3, r2
 8019cc6:	00db      	lsls	r3, r3, #3
 8019cc8:	1a9b      	subs	r3, r3, r2
 8019cca:	009b      	lsls	r3, r3, #2
 8019ccc:	440b      	add	r3, r1
 8019cce:	333f      	adds	r3, #63	; 0x3f
 8019cd0:	2200      	movs	r2, #0
 8019cd2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8019cd4:	7bfa      	ldrb	r2, [r7, #15]
 8019cd6:	6879      	ldr	r1, [r7, #4]
 8019cd8:	4613      	mov	r3, r2
 8019cda:	00db      	lsls	r3, r3, #3
 8019cdc:	1a9b      	subs	r3, r3, r2
 8019cde:	009b      	lsls	r3, r3, #2
 8019ce0:	440b      	add	r3, r1
 8019ce2:	3344      	adds	r3, #68	; 0x44
 8019ce4:	2200      	movs	r2, #0
 8019ce6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8019ce8:	7bfa      	ldrb	r2, [r7, #15]
 8019cea:	6879      	ldr	r1, [r7, #4]
 8019cec:	4613      	mov	r3, r2
 8019cee:	00db      	lsls	r3, r3, #3
 8019cf0:	1a9b      	subs	r3, r3, r2
 8019cf2:	009b      	lsls	r3, r3, #2
 8019cf4:	440b      	add	r3, r1
 8019cf6:	3348      	adds	r3, #72	; 0x48
 8019cf8:	2200      	movs	r2, #0
 8019cfa:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8019cfc:	7bfa      	ldrb	r2, [r7, #15]
 8019cfe:	6879      	ldr	r1, [r7, #4]
 8019d00:	4613      	mov	r3, r2
 8019d02:	00db      	lsls	r3, r3, #3
 8019d04:	1a9b      	subs	r3, r3, r2
 8019d06:	009b      	lsls	r3, r3, #2
 8019d08:	440b      	add	r3, r1
 8019d0a:	3350      	adds	r3, #80	; 0x50
 8019d0c:	2200      	movs	r2, #0
 8019d0e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8019d10:	7bfb      	ldrb	r3, [r7, #15]
 8019d12:	3301      	adds	r3, #1
 8019d14:	73fb      	strb	r3, [r7, #15]
 8019d16:	7bfa      	ldrb	r2, [r7, #15]
 8019d18:	687b      	ldr	r3, [r7, #4]
 8019d1a:	685b      	ldr	r3, [r3, #4]
 8019d1c:	429a      	cmp	r2, r3
 8019d1e:	d3af      	bcc.n	8019c80 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8019d20:	2300      	movs	r3, #0
 8019d22:	73fb      	strb	r3, [r7, #15]
 8019d24:	e044      	b.n	8019db0 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8019d26:	7bfa      	ldrb	r2, [r7, #15]
 8019d28:	6879      	ldr	r1, [r7, #4]
 8019d2a:	4613      	mov	r3, r2
 8019d2c:	00db      	lsls	r3, r3, #3
 8019d2e:	1a9b      	subs	r3, r3, r2
 8019d30:	009b      	lsls	r3, r3, #2
 8019d32:	440b      	add	r3, r1
 8019d34:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8019d38:	2200      	movs	r2, #0
 8019d3a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8019d3c:	7bfa      	ldrb	r2, [r7, #15]
 8019d3e:	6879      	ldr	r1, [r7, #4]
 8019d40:	4613      	mov	r3, r2
 8019d42:	00db      	lsls	r3, r3, #3
 8019d44:	1a9b      	subs	r3, r3, r2
 8019d46:	009b      	lsls	r3, r3, #2
 8019d48:	440b      	add	r3, r1
 8019d4a:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8019d4e:	7bfa      	ldrb	r2, [r7, #15]
 8019d50:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8019d52:	7bfa      	ldrb	r2, [r7, #15]
 8019d54:	6879      	ldr	r1, [r7, #4]
 8019d56:	4613      	mov	r3, r2
 8019d58:	00db      	lsls	r3, r3, #3
 8019d5a:	1a9b      	subs	r3, r3, r2
 8019d5c:	009b      	lsls	r3, r3, #2
 8019d5e:	440b      	add	r3, r1
 8019d60:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8019d64:	2200      	movs	r2, #0
 8019d66:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8019d68:	7bfa      	ldrb	r2, [r7, #15]
 8019d6a:	6879      	ldr	r1, [r7, #4]
 8019d6c:	4613      	mov	r3, r2
 8019d6e:	00db      	lsls	r3, r3, #3
 8019d70:	1a9b      	subs	r3, r3, r2
 8019d72:	009b      	lsls	r3, r3, #2
 8019d74:	440b      	add	r3, r1
 8019d76:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8019d7a:	2200      	movs	r2, #0
 8019d7c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8019d7e:	7bfa      	ldrb	r2, [r7, #15]
 8019d80:	6879      	ldr	r1, [r7, #4]
 8019d82:	4613      	mov	r3, r2
 8019d84:	00db      	lsls	r3, r3, #3
 8019d86:	1a9b      	subs	r3, r3, r2
 8019d88:	009b      	lsls	r3, r3, #2
 8019d8a:	440b      	add	r3, r1
 8019d8c:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8019d90:	2200      	movs	r2, #0
 8019d92:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8019d94:	7bfa      	ldrb	r2, [r7, #15]
 8019d96:	6879      	ldr	r1, [r7, #4]
 8019d98:	4613      	mov	r3, r2
 8019d9a:	00db      	lsls	r3, r3, #3
 8019d9c:	1a9b      	subs	r3, r3, r2
 8019d9e:	009b      	lsls	r3, r3, #2
 8019da0:	440b      	add	r3, r1
 8019da2:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8019da6:	2200      	movs	r2, #0
 8019da8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8019daa:	7bfb      	ldrb	r3, [r7, #15]
 8019dac:	3301      	adds	r3, #1
 8019dae:	73fb      	strb	r3, [r7, #15]
 8019db0:	7bfa      	ldrb	r2, [r7, #15]
 8019db2:	687b      	ldr	r3, [r7, #4]
 8019db4:	685b      	ldr	r3, [r3, #4]
 8019db6:	429a      	cmp	r2, r3
 8019db8:	d3b5      	bcc.n	8019d26 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8019dba:	687b      	ldr	r3, [r7, #4]
 8019dbc:	681b      	ldr	r3, [r3, #0]
 8019dbe:	603b      	str	r3, [r7, #0]
 8019dc0:	687e      	ldr	r6, [r7, #4]
 8019dc2:	466d      	mov	r5, sp
 8019dc4:	f106 0410 	add.w	r4, r6, #16
 8019dc8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8019dca:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8019dcc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8019dce:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8019dd0:	e894 0003 	ldmia.w	r4, {r0, r1}
 8019dd4:	e885 0003 	stmia.w	r5, {r0, r1}
 8019dd8:	1d33      	adds	r3, r6, #4
 8019dda:	cb0e      	ldmia	r3, {r1, r2, r3}
 8019ddc:	6838      	ldr	r0, [r7, #0]
 8019dde:	f004 f835 	bl	801de4c <USB_DevInit>
 8019de2:	4603      	mov	r3, r0
 8019de4:	2b00      	cmp	r3, #0
 8019de6:	d005      	beq.n	8019df4 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8019de8:	687b      	ldr	r3, [r7, #4]
 8019dea:	2202      	movs	r2, #2
 8019dec:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8019df0:	2301      	movs	r3, #1
 8019df2:	e014      	b.n	8019e1e <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8019df4:	687b      	ldr	r3, [r7, #4]
 8019df6:	2200      	movs	r2, #0
 8019df8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8019dfc:	687b      	ldr	r3, [r7, #4]
 8019dfe:	2201      	movs	r2, #1
 8019e00:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8019e04:	687b      	ldr	r3, [r7, #4]
 8019e06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019e08:	2b01      	cmp	r3, #1
 8019e0a:	d102      	bne.n	8019e12 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8019e0c:	6878      	ldr	r0, [r7, #4]
 8019e0e:	f001 f8bf 	bl	801af90 <HAL_PCDEx_ActivateLPM>
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8019e12:	687b      	ldr	r3, [r7, #4]
 8019e14:	681b      	ldr	r3, [r3, #0]
 8019e16:	4618      	mov	r0, r3
 8019e18:	f005 f8a4 	bl	801ef64 <USB_DevDisconnect>

  return HAL_OK;
 8019e1c:	2300      	movs	r3, #0
}
 8019e1e:	4618      	mov	r0, r3
 8019e20:	3714      	adds	r7, #20
 8019e22:	46bd      	mov	sp, r7
 8019e24:	bdf0      	pop	{r4, r5, r6, r7, pc}

08019e26 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8019e26:	b580      	push	{r7, lr}
 8019e28:	b084      	sub	sp, #16
 8019e2a:	af00      	add	r7, sp, #0
 8019e2c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8019e2e:	687b      	ldr	r3, [r7, #4]
 8019e30:	681b      	ldr	r3, [r3, #0]
 8019e32:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8019e34:	687b      	ldr	r3, [r7, #4]
 8019e36:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8019e3a:	2b01      	cmp	r3, #1
 8019e3c:	d101      	bne.n	8019e42 <HAL_PCD_Start+0x1c>
 8019e3e:	2302      	movs	r3, #2
 8019e40:	e020      	b.n	8019e84 <HAL_PCD_Start+0x5e>
 8019e42:	687b      	ldr	r3, [r7, #4]
 8019e44:	2201      	movs	r2, #1
 8019e46:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8019e4a:	687b      	ldr	r3, [r7, #4]
 8019e4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8019e4e:	2b01      	cmp	r3, #1
 8019e50:	d109      	bne.n	8019e66 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8019e52:	687b      	ldr	r3, [r7, #4]
 8019e54:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8019e56:	2b01      	cmp	r3, #1
 8019e58:	d005      	beq.n	8019e66 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8019e5a:	68fb      	ldr	r3, [r7, #12]
 8019e5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8019e5e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8019e62:	68fb      	ldr	r3, [r7, #12]
 8019e64:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8019e66:	687b      	ldr	r3, [r7, #4]
 8019e68:	681b      	ldr	r3, [r3, #0]
 8019e6a:	4618      	mov	r0, r3
 8019e6c:	f003 ff80 	bl	801dd70 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8019e70:	687b      	ldr	r3, [r7, #4]
 8019e72:	681b      	ldr	r3, [r3, #0]
 8019e74:	4618      	mov	r0, r3
 8019e76:	f005 f854 	bl	801ef22 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8019e7a:	687b      	ldr	r3, [r7, #4]
 8019e7c:	2200      	movs	r2, #0
 8019e7e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8019e82:	2300      	movs	r3, #0
}
 8019e84:	4618      	mov	r0, r3
 8019e86:	3710      	adds	r7, #16
 8019e88:	46bd      	mov	sp, r7
 8019e8a:	bd80      	pop	{r7, pc}

08019e8c <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8019e8c:	b590      	push	{r4, r7, lr}
 8019e8e:	b08d      	sub	sp, #52	; 0x34
 8019e90:	af00      	add	r7, sp, #0
 8019e92:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8019e94:	687b      	ldr	r3, [r7, #4]
 8019e96:	681b      	ldr	r3, [r3, #0]
 8019e98:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8019e9a:	6a3b      	ldr	r3, [r7, #32]
 8019e9c:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t temp;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8019e9e:	687b      	ldr	r3, [r7, #4]
 8019ea0:	681b      	ldr	r3, [r3, #0]
 8019ea2:	4618      	mov	r0, r3
 8019ea4:	f005 f912 	bl	801f0cc <USB_GetMode>
 8019ea8:	4603      	mov	r3, r0
 8019eaa:	2b00      	cmp	r3, #0
 8019eac:	f040 83ca 	bne.w	801a644 <HAL_PCD_IRQHandler+0x7b8>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8019eb0:	687b      	ldr	r3, [r7, #4]
 8019eb2:	681b      	ldr	r3, [r3, #0]
 8019eb4:	4618      	mov	r0, r3
 8019eb6:	f005 f876 	bl	801efa6 <USB_ReadInterrupts>
 8019eba:	4603      	mov	r3, r0
 8019ebc:	2b00      	cmp	r3, #0
 8019ebe:	f000 83c0 	beq.w	801a642 <HAL_PCD_IRQHandler+0x7b6>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8019ec2:	687b      	ldr	r3, [r7, #4]
 8019ec4:	681b      	ldr	r3, [r3, #0]
 8019ec6:	4618      	mov	r0, r3
 8019ec8:	f005 f86d 	bl	801efa6 <USB_ReadInterrupts>
 8019ecc:	4603      	mov	r3, r0
 8019ece:	f003 0302 	and.w	r3, r3, #2
 8019ed2:	2b02      	cmp	r3, #2
 8019ed4:	d107      	bne.n	8019ee6 <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8019ed6:	687b      	ldr	r3, [r7, #4]
 8019ed8:	681b      	ldr	r3, [r3, #0]
 8019eda:	695a      	ldr	r2, [r3, #20]
 8019edc:	687b      	ldr	r3, [r7, #4]
 8019ede:	681b      	ldr	r3, [r3, #0]
 8019ee0:	f002 0202 	and.w	r2, r2, #2
 8019ee4:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8019ee6:	687b      	ldr	r3, [r7, #4]
 8019ee8:	681b      	ldr	r3, [r3, #0]
 8019eea:	4618      	mov	r0, r3
 8019eec:	f005 f85b 	bl	801efa6 <USB_ReadInterrupts>
 8019ef0:	4603      	mov	r3, r0
 8019ef2:	f003 0310 	and.w	r3, r3, #16
 8019ef6:	2b10      	cmp	r3, #16
 8019ef8:	d161      	bne.n	8019fbe <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8019efa:	687b      	ldr	r3, [r7, #4]
 8019efc:	681b      	ldr	r3, [r3, #0]
 8019efe:	699a      	ldr	r2, [r3, #24]
 8019f00:	687b      	ldr	r3, [r7, #4]
 8019f02:	681b      	ldr	r3, [r3, #0]
 8019f04:	f022 0210 	bic.w	r2, r2, #16
 8019f08:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 8019f0a:	6a3b      	ldr	r3, [r7, #32]
 8019f0c:	6a1b      	ldr	r3, [r3, #32]
 8019f0e:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 8019f10:	69bb      	ldr	r3, [r7, #24]
 8019f12:	f003 020f 	and.w	r2, r3, #15
 8019f16:	4613      	mov	r3, r2
 8019f18:	00db      	lsls	r3, r3, #3
 8019f1a:	1a9b      	subs	r3, r3, r2
 8019f1c:	009b      	lsls	r3, r3, #2
 8019f1e:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8019f22:	687a      	ldr	r2, [r7, #4]
 8019f24:	4413      	add	r3, r2
 8019f26:	3304      	adds	r3, #4
 8019f28:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8019f2a:	69bb      	ldr	r3, [r7, #24]
 8019f2c:	0c5b      	lsrs	r3, r3, #17
 8019f2e:	f003 030f 	and.w	r3, r3, #15
 8019f32:	2b02      	cmp	r3, #2
 8019f34:	d124      	bne.n	8019f80 <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 8019f36:	69ba      	ldr	r2, [r7, #24]
 8019f38:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8019f3c:	4013      	ands	r3, r2
 8019f3e:	2b00      	cmp	r3, #0
 8019f40:	d035      	beq.n	8019fae <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8019f42:	697b      	ldr	r3, [r7, #20]
 8019f44:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 8019f46:	69bb      	ldr	r3, [r7, #24]
 8019f48:	091b      	lsrs	r3, r3, #4
 8019f4a:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8019f4c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8019f50:	b29b      	uxth	r3, r3
 8019f52:	461a      	mov	r2, r3
 8019f54:	6a38      	ldr	r0, [r7, #32]
 8019f56:	f004 fe92 	bl	801ec7e <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8019f5a:	697b      	ldr	r3, [r7, #20]
 8019f5c:	68da      	ldr	r2, [r3, #12]
 8019f5e:	69bb      	ldr	r3, [r7, #24]
 8019f60:	091b      	lsrs	r3, r3, #4
 8019f62:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8019f66:	441a      	add	r2, r3
 8019f68:	697b      	ldr	r3, [r7, #20]
 8019f6a:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8019f6c:	697b      	ldr	r3, [r7, #20]
 8019f6e:	699a      	ldr	r2, [r3, #24]
 8019f70:	69bb      	ldr	r3, [r7, #24]
 8019f72:	091b      	lsrs	r3, r3, #4
 8019f74:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8019f78:	441a      	add	r2, r3
 8019f7a:	697b      	ldr	r3, [r7, #20]
 8019f7c:	619a      	str	r2, [r3, #24]
 8019f7e:	e016      	b.n	8019fae <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 8019f80:	69bb      	ldr	r3, [r7, #24]
 8019f82:	0c5b      	lsrs	r3, r3, #17
 8019f84:	f003 030f 	and.w	r3, r3, #15
 8019f88:	2b06      	cmp	r3, #6
 8019f8a:	d110      	bne.n	8019fae <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8019f8c:	687b      	ldr	r3, [r7, #4]
 8019f8e:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8019f92:	2208      	movs	r2, #8
 8019f94:	4619      	mov	r1, r3
 8019f96:	6a38      	ldr	r0, [r7, #32]
 8019f98:	f004 fe71 	bl	801ec7e <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8019f9c:	697b      	ldr	r3, [r7, #20]
 8019f9e:	699a      	ldr	r2, [r3, #24]
 8019fa0:	69bb      	ldr	r3, [r7, #24]
 8019fa2:	091b      	lsrs	r3, r3, #4
 8019fa4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8019fa8:	441a      	add	r2, r3
 8019faa:	697b      	ldr	r3, [r7, #20]
 8019fac:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8019fae:	687b      	ldr	r3, [r7, #4]
 8019fb0:	681b      	ldr	r3, [r3, #0]
 8019fb2:	699a      	ldr	r2, [r3, #24]
 8019fb4:	687b      	ldr	r3, [r7, #4]
 8019fb6:	681b      	ldr	r3, [r3, #0]
 8019fb8:	f042 0210 	orr.w	r2, r2, #16
 8019fbc:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8019fbe:	687b      	ldr	r3, [r7, #4]
 8019fc0:	681b      	ldr	r3, [r3, #0]
 8019fc2:	4618      	mov	r0, r3
 8019fc4:	f004 ffef 	bl	801efa6 <USB_ReadInterrupts>
 8019fc8:	4603      	mov	r3, r0
 8019fca:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8019fce:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8019fd2:	d16e      	bne.n	801a0b2 <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 8019fd4:	2300      	movs	r3, #0
 8019fd6:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8019fd8:	687b      	ldr	r3, [r7, #4]
 8019fda:	681b      	ldr	r3, [r3, #0]
 8019fdc:	4618      	mov	r0, r3
 8019fde:	f004 fff5 	bl	801efcc <USB_ReadDevAllOutEpInterrupt>
 8019fe2:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8019fe4:	e062      	b.n	801a0ac <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 8019fe6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019fe8:	f003 0301 	and.w	r3, r3, #1
 8019fec:	2b00      	cmp	r3, #0
 8019fee:	d057      	beq.n	801a0a0 <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8019ff0:	687b      	ldr	r3, [r7, #4]
 8019ff2:	681b      	ldr	r3, [r3, #0]
 8019ff4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8019ff6:	b2d2      	uxtb	r2, r2
 8019ff8:	4611      	mov	r1, r2
 8019ffa:	4618      	mov	r0, r3
 8019ffc:	f005 f81a 	bl	801f034 <USB_ReadDevOutEPInterrupt>
 801a000:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 801a002:	693b      	ldr	r3, [r7, #16]
 801a004:	f003 0301 	and.w	r3, r3, #1
 801a008:	2b00      	cmp	r3, #0
 801a00a:	d00c      	beq.n	801a026 <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 801a00c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a00e:	015a      	lsls	r2, r3, #5
 801a010:	69fb      	ldr	r3, [r7, #28]
 801a012:	4413      	add	r3, r2
 801a014:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801a018:	461a      	mov	r2, r3
 801a01a:	2301      	movs	r3, #1
 801a01c:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 801a01e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801a020:	6878      	ldr	r0, [r7, #4]
 801a022:	f000 fe0b 	bl	801ac3c <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 801a026:	693b      	ldr	r3, [r7, #16]
 801a028:	f003 0308 	and.w	r3, r3, #8
 801a02c:	2b00      	cmp	r3, #0
 801a02e:	d00c      	beq.n	801a04a <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 801a030:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a032:	015a      	lsls	r2, r3, #5
 801a034:	69fb      	ldr	r3, [r7, #28]
 801a036:	4413      	add	r3, r2
 801a038:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801a03c:	461a      	mov	r2, r3
 801a03e:	2308      	movs	r3, #8
 801a040:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 801a042:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801a044:	6878      	ldr	r0, [r7, #4]
 801a046:	f000 ff05 	bl	801ae54 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 801a04a:	693b      	ldr	r3, [r7, #16]
 801a04c:	f003 0310 	and.w	r3, r3, #16
 801a050:	2b00      	cmp	r3, #0
 801a052:	d008      	beq.n	801a066 <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 801a054:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a056:	015a      	lsls	r2, r3, #5
 801a058:	69fb      	ldr	r3, [r7, #28]
 801a05a:	4413      	add	r3, r2
 801a05c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801a060:	461a      	mov	r2, r3
 801a062:	2310      	movs	r3, #16
 801a064:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 801a066:	693b      	ldr	r3, [r7, #16]
 801a068:	f003 0320 	and.w	r3, r3, #32
 801a06c:	2b00      	cmp	r3, #0
 801a06e:	d008      	beq.n	801a082 <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 801a070:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a072:	015a      	lsls	r2, r3, #5
 801a074:	69fb      	ldr	r3, [r7, #28]
 801a076:	4413      	add	r3, r2
 801a078:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801a07c:	461a      	mov	r2, r3
 801a07e:	2320      	movs	r3, #32
 801a080:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 801a082:	693b      	ldr	r3, [r7, #16]
 801a084:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 801a088:	2b00      	cmp	r3, #0
 801a08a:	d009      	beq.n	801a0a0 <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 801a08c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a08e:	015a      	lsls	r2, r3, #5
 801a090:	69fb      	ldr	r3, [r7, #28]
 801a092:	4413      	add	r3, r2
 801a094:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801a098:	461a      	mov	r2, r3
 801a09a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 801a09e:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 801a0a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a0a2:	3301      	adds	r3, #1
 801a0a4:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 801a0a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a0a8:	085b      	lsrs	r3, r3, #1
 801a0aa:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 801a0ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a0ae:	2b00      	cmp	r3, #0
 801a0b0:	d199      	bne.n	8019fe6 <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 801a0b2:	687b      	ldr	r3, [r7, #4]
 801a0b4:	681b      	ldr	r3, [r3, #0]
 801a0b6:	4618      	mov	r0, r3
 801a0b8:	f004 ff75 	bl	801efa6 <USB_ReadInterrupts>
 801a0bc:	4603      	mov	r3, r0
 801a0be:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 801a0c2:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 801a0c6:	f040 80c0 	bne.w	801a24a <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 801a0ca:	687b      	ldr	r3, [r7, #4]
 801a0cc:	681b      	ldr	r3, [r3, #0]
 801a0ce:	4618      	mov	r0, r3
 801a0d0:	f004 ff96 	bl	801f000 <USB_ReadDevAllInEpInterrupt>
 801a0d4:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 801a0d6:	2300      	movs	r3, #0
 801a0d8:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 801a0da:	e0b2      	b.n	801a242 <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 801a0dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a0de:	f003 0301 	and.w	r3, r3, #1
 801a0e2:	2b00      	cmp	r3, #0
 801a0e4:	f000 80a7 	beq.w	801a236 <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 801a0e8:	687b      	ldr	r3, [r7, #4]
 801a0ea:	681b      	ldr	r3, [r3, #0]
 801a0ec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801a0ee:	b2d2      	uxtb	r2, r2
 801a0f0:	4611      	mov	r1, r2
 801a0f2:	4618      	mov	r0, r3
 801a0f4:	f004 ffbc 	bl	801f070 <USB_ReadDevInEPInterrupt>
 801a0f8:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 801a0fa:	693b      	ldr	r3, [r7, #16]
 801a0fc:	f003 0301 	and.w	r3, r3, #1
 801a100:	2b00      	cmp	r3, #0
 801a102:	d057      	beq.n	801a1b4 <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 801a104:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a106:	f003 030f 	and.w	r3, r3, #15
 801a10a:	2201      	movs	r2, #1
 801a10c:	fa02 f303 	lsl.w	r3, r2, r3
 801a110:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 801a112:	69fb      	ldr	r3, [r7, #28]
 801a114:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801a118:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 801a11a:	68fb      	ldr	r3, [r7, #12]
 801a11c:	43db      	mvns	r3, r3
 801a11e:	69f9      	ldr	r1, [r7, #28]
 801a120:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 801a124:	4013      	ands	r3, r2
 801a126:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 801a128:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a12a:	015a      	lsls	r2, r3, #5
 801a12c:	69fb      	ldr	r3, [r7, #28]
 801a12e:	4413      	add	r3, r2
 801a130:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801a134:	461a      	mov	r2, r3
 801a136:	2301      	movs	r3, #1
 801a138:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 801a13a:	687b      	ldr	r3, [r7, #4]
 801a13c:	691b      	ldr	r3, [r3, #16]
 801a13e:	2b01      	cmp	r3, #1
 801a140:	d132      	bne.n	801a1a8 <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 801a142:	6879      	ldr	r1, [r7, #4]
 801a144:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801a146:	4613      	mov	r3, r2
 801a148:	00db      	lsls	r3, r3, #3
 801a14a:	1a9b      	subs	r3, r3, r2
 801a14c:	009b      	lsls	r3, r3, #2
 801a14e:	440b      	add	r3, r1
 801a150:	3348      	adds	r3, #72	; 0x48
 801a152:	6819      	ldr	r1, [r3, #0]
 801a154:	6878      	ldr	r0, [r7, #4]
 801a156:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801a158:	4613      	mov	r3, r2
 801a15a:	00db      	lsls	r3, r3, #3
 801a15c:	1a9b      	subs	r3, r3, r2
 801a15e:	009b      	lsls	r3, r3, #2
 801a160:	4403      	add	r3, r0
 801a162:	3344      	adds	r3, #68	; 0x44
 801a164:	681b      	ldr	r3, [r3, #0]
 801a166:	4419      	add	r1, r3
 801a168:	6878      	ldr	r0, [r7, #4]
 801a16a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801a16c:	4613      	mov	r3, r2
 801a16e:	00db      	lsls	r3, r3, #3
 801a170:	1a9b      	subs	r3, r3, r2
 801a172:	009b      	lsls	r3, r3, #2
 801a174:	4403      	add	r3, r0
 801a176:	3348      	adds	r3, #72	; 0x48
 801a178:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 801a17a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a17c:	2b00      	cmp	r3, #0
 801a17e:	d113      	bne.n	801a1a8 <HAL_PCD_IRQHandler+0x31c>
 801a180:	6879      	ldr	r1, [r7, #4]
 801a182:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801a184:	4613      	mov	r3, r2
 801a186:	00db      	lsls	r3, r3, #3
 801a188:	1a9b      	subs	r3, r3, r2
 801a18a:	009b      	lsls	r3, r3, #2
 801a18c:	440b      	add	r3, r1
 801a18e:	3350      	adds	r3, #80	; 0x50
 801a190:	681b      	ldr	r3, [r3, #0]
 801a192:	2b00      	cmp	r3, #0
 801a194:	d108      	bne.n	801a1a8 <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 801a196:	687b      	ldr	r3, [r7, #4]
 801a198:	6818      	ldr	r0, [r3, #0]
 801a19a:	687b      	ldr	r3, [r7, #4]
 801a19c:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 801a1a0:	461a      	mov	r2, r3
 801a1a2:	2101      	movs	r1, #1
 801a1a4:	f004 ffc4 	bl	801f130 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 801a1a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a1aa:	b2db      	uxtb	r3, r3
 801a1ac:	4619      	mov	r1, r3
 801a1ae:	6878      	ldr	r0, [r7, #4]
 801a1b0:	f008 fa09 	bl	80225c6 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 801a1b4:	693b      	ldr	r3, [r7, #16]
 801a1b6:	f003 0308 	and.w	r3, r3, #8
 801a1ba:	2b00      	cmp	r3, #0
 801a1bc:	d008      	beq.n	801a1d0 <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 801a1be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a1c0:	015a      	lsls	r2, r3, #5
 801a1c2:	69fb      	ldr	r3, [r7, #28]
 801a1c4:	4413      	add	r3, r2
 801a1c6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801a1ca:	461a      	mov	r2, r3
 801a1cc:	2308      	movs	r3, #8
 801a1ce:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 801a1d0:	693b      	ldr	r3, [r7, #16]
 801a1d2:	f003 0310 	and.w	r3, r3, #16
 801a1d6:	2b00      	cmp	r3, #0
 801a1d8:	d008      	beq.n	801a1ec <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 801a1da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a1dc:	015a      	lsls	r2, r3, #5
 801a1de:	69fb      	ldr	r3, [r7, #28]
 801a1e0:	4413      	add	r3, r2
 801a1e2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801a1e6:	461a      	mov	r2, r3
 801a1e8:	2310      	movs	r3, #16
 801a1ea:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 801a1ec:	693b      	ldr	r3, [r7, #16]
 801a1ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801a1f2:	2b00      	cmp	r3, #0
 801a1f4:	d008      	beq.n	801a208 <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 801a1f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a1f8:	015a      	lsls	r2, r3, #5
 801a1fa:	69fb      	ldr	r3, [r7, #28]
 801a1fc:	4413      	add	r3, r2
 801a1fe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801a202:	461a      	mov	r2, r3
 801a204:	2340      	movs	r3, #64	; 0x40
 801a206:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 801a208:	693b      	ldr	r3, [r7, #16]
 801a20a:	f003 0302 	and.w	r3, r3, #2
 801a20e:	2b00      	cmp	r3, #0
 801a210:	d008      	beq.n	801a224 <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 801a212:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a214:	015a      	lsls	r2, r3, #5
 801a216:	69fb      	ldr	r3, [r7, #28]
 801a218:	4413      	add	r3, r2
 801a21a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801a21e:	461a      	mov	r2, r3
 801a220:	2302      	movs	r3, #2
 801a222:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 801a224:	693b      	ldr	r3, [r7, #16]
 801a226:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801a22a:	2b00      	cmp	r3, #0
 801a22c:	d003      	beq.n	801a236 <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 801a22e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801a230:	6878      	ldr	r0, [r7, #4]
 801a232:	f000 fc75 	bl	801ab20 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 801a236:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a238:	3301      	adds	r3, #1
 801a23a:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 801a23c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a23e:	085b      	lsrs	r3, r3, #1
 801a240:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 801a242:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a244:	2b00      	cmp	r3, #0
 801a246:	f47f af49 	bne.w	801a0dc <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 801a24a:	687b      	ldr	r3, [r7, #4]
 801a24c:	681b      	ldr	r3, [r3, #0]
 801a24e:	4618      	mov	r0, r3
 801a250:	f004 fea9 	bl	801efa6 <USB_ReadInterrupts>
 801a254:	4603      	mov	r3, r0
 801a256:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 801a25a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 801a25e:	d122      	bne.n	801a2a6 <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 801a260:	69fb      	ldr	r3, [r7, #28]
 801a262:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801a266:	685b      	ldr	r3, [r3, #4]
 801a268:	69fa      	ldr	r2, [r7, #28]
 801a26a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 801a26e:	f023 0301 	bic.w	r3, r3, #1
 801a272:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 801a274:	687b      	ldr	r3, [r7, #4]
 801a276:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 801a27a:	2b01      	cmp	r3, #1
 801a27c:	d108      	bne.n	801a290 <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 801a27e:	687b      	ldr	r3, [r7, #4]
 801a280:	2200      	movs	r2, #0
 801a282:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 801a286:	2100      	movs	r1, #0
 801a288:	6878      	ldr	r0, [r7, #4]
 801a28a:	f008 fc0b 	bl	8022aa4 <HAL_PCDEx_LPM_Callback>
 801a28e:	e002      	b.n	801a296 <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 801a290:	6878      	ldr	r0, [r7, #4]
 801a292:	f008 fa0f 	bl	80226b4 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 801a296:	687b      	ldr	r3, [r7, #4]
 801a298:	681b      	ldr	r3, [r3, #0]
 801a29a:	695a      	ldr	r2, [r3, #20]
 801a29c:	687b      	ldr	r3, [r7, #4]
 801a29e:	681b      	ldr	r3, [r3, #0]
 801a2a0:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 801a2a4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 801a2a6:	687b      	ldr	r3, [r7, #4]
 801a2a8:	681b      	ldr	r3, [r3, #0]
 801a2aa:	4618      	mov	r0, r3
 801a2ac:	f004 fe7b 	bl	801efa6 <USB_ReadInterrupts>
 801a2b0:	4603      	mov	r3, r0
 801a2b2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 801a2b6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 801a2ba:	d112      	bne.n	801a2e2 <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 801a2bc:	69fb      	ldr	r3, [r7, #28]
 801a2be:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801a2c2:	689b      	ldr	r3, [r3, #8]
 801a2c4:	f003 0301 	and.w	r3, r3, #1
 801a2c8:	2b01      	cmp	r3, #1
 801a2ca:	d102      	bne.n	801a2d2 <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 801a2cc:	6878      	ldr	r0, [r7, #4]
 801a2ce:	f008 f9cb 	bl	8022668 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 801a2d2:	687b      	ldr	r3, [r7, #4]
 801a2d4:	681b      	ldr	r3, [r3, #0]
 801a2d6:	695a      	ldr	r2, [r3, #20]
 801a2d8:	687b      	ldr	r3, [r7, #4]
 801a2da:	681b      	ldr	r3, [r3, #0]
 801a2dc:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 801a2e0:	615a      	str	r2, [r3, #20]
    }
#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 801a2e2:	687b      	ldr	r3, [r7, #4]
 801a2e4:	681b      	ldr	r3, [r3, #0]
 801a2e6:	4618      	mov	r0, r3
 801a2e8:	f004 fe5d 	bl	801efa6 <USB_ReadInterrupts>
 801a2ec:	4603      	mov	r3, r0
 801a2ee:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 801a2f2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 801a2f6:	d121      	bne.n	801a33c <HAL_PCD_IRQHandler+0x4b0>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 801a2f8:	687b      	ldr	r3, [r7, #4]
 801a2fa:	681b      	ldr	r3, [r3, #0]
 801a2fc:	695a      	ldr	r2, [r3, #20]
 801a2fe:	687b      	ldr	r3, [r7, #4]
 801a300:	681b      	ldr	r3, [r3, #0]
 801a302:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 801a306:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 801a308:	687b      	ldr	r3, [r7, #4]
 801a30a:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 801a30e:	2b00      	cmp	r3, #0
 801a310:	d111      	bne.n	801a336 <HAL_PCD_IRQHandler+0x4aa>
      {
        hpcd->LPM_State = LPM_L1;
 801a312:	687b      	ldr	r3, [r7, #4]
 801a314:	2201      	movs	r2, #1
 801a316:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 801a31a:	687b      	ldr	r3, [r7, #4]
 801a31c:	681b      	ldr	r3, [r3, #0]
 801a31e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801a320:	089b      	lsrs	r3, r3, #2
 801a322:	f003 020f 	and.w	r2, r3, #15
 801a326:	687b      	ldr	r3, [r7, #4]
 801a328:	f8c3 23f8 	str.w	r2, [r3, #1016]	; 0x3f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 801a32c:	2101      	movs	r1, #1
 801a32e:	6878      	ldr	r0, [r7, #4]
 801a330:	f008 fbb8 	bl	8022aa4 <HAL_PCDEx_LPM_Callback>
 801a334:	e002      	b.n	801a33c <HAL_PCD_IRQHandler+0x4b0>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 801a336:	6878      	ldr	r0, [r7, #4]
 801a338:	f008 f996 	bl	8022668 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 801a33c:	687b      	ldr	r3, [r7, #4]
 801a33e:	681b      	ldr	r3, [r3, #0]
 801a340:	4618      	mov	r0, r3
 801a342:	f004 fe30 	bl	801efa6 <USB_ReadInterrupts>
 801a346:	4603      	mov	r3, r0
 801a348:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 801a34c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801a350:	f040 80c7 	bne.w	801a4e2 <HAL_PCD_IRQHandler+0x656>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 801a354:	69fb      	ldr	r3, [r7, #28]
 801a356:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801a35a:	685b      	ldr	r3, [r3, #4]
 801a35c:	69fa      	ldr	r2, [r7, #28]
 801a35e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 801a362:	f023 0301 	bic.w	r3, r3, #1
 801a366:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 801a368:	687b      	ldr	r3, [r7, #4]
 801a36a:	681b      	ldr	r3, [r3, #0]
 801a36c:	2110      	movs	r1, #16
 801a36e:	4618      	mov	r0, r3
 801a370:	f003 feca 	bl	801e108 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 801a374:	2300      	movs	r3, #0
 801a376:	62fb      	str	r3, [r7, #44]	; 0x2c
 801a378:	e056      	b.n	801a428 <HAL_PCD_IRQHandler+0x59c>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 801a37a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a37c:	015a      	lsls	r2, r3, #5
 801a37e:	69fb      	ldr	r3, [r7, #28]
 801a380:	4413      	add	r3, r2
 801a382:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801a386:	461a      	mov	r2, r3
 801a388:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 801a38c:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 801a38e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a390:	015a      	lsls	r2, r3, #5
 801a392:	69fb      	ldr	r3, [r7, #28]
 801a394:	4413      	add	r3, r2
 801a396:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801a39a:	681b      	ldr	r3, [r3, #0]
 801a39c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801a39e:	0151      	lsls	r1, r2, #5
 801a3a0:	69fa      	ldr	r2, [r7, #28]
 801a3a2:	440a      	add	r2, r1
 801a3a4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801a3a8:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 801a3ac:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 801a3ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a3b0:	015a      	lsls	r2, r3, #5
 801a3b2:	69fb      	ldr	r3, [r7, #28]
 801a3b4:	4413      	add	r3, r2
 801a3b6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801a3ba:	681b      	ldr	r3, [r3, #0]
 801a3bc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801a3be:	0151      	lsls	r1, r2, #5
 801a3c0:	69fa      	ldr	r2, [r7, #28]
 801a3c2:	440a      	add	r2, r1
 801a3c4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801a3c8:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 801a3cc:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 801a3ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a3d0:	015a      	lsls	r2, r3, #5
 801a3d2:	69fb      	ldr	r3, [r7, #28]
 801a3d4:	4413      	add	r3, r2
 801a3d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801a3da:	461a      	mov	r2, r3
 801a3dc:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 801a3e0:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 801a3e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a3e4:	015a      	lsls	r2, r3, #5
 801a3e6:	69fb      	ldr	r3, [r7, #28]
 801a3e8:	4413      	add	r3, r2
 801a3ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801a3ee:	681b      	ldr	r3, [r3, #0]
 801a3f0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801a3f2:	0151      	lsls	r1, r2, #5
 801a3f4:	69fa      	ldr	r2, [r7, #28]
 801a3f6:	440a      	add	r2, r1
 801a3f8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801a3fc:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 801a400:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 801a402:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a404:	015a      	lsls	r2, r3, #5
 801a406:	69fb      	ldr	r3, [r7, #28]
 801a408:	4413      	add	r3, r2
 801a40a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801a40e:	681b      	ldr	r3, [r3, #0]
 801a410:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801a412:	0151      	lsls	r1, r2, #5
 801a414:	69fa      	ldr	r2, [r7, #28]
 801a416:	440a      	add	r2, r1
 801a418:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801a41c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 801a420:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 801a422:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a424:	3301      	adds	r3, #1
 801a426:	62fb      	str	r3, [r7, #44]	; 0x2c
 801a428:	687b      	ldr	r3, [r7, #4]
 801a42a:	685b      	ldr	r3, [r3, #4]
 801a42c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801a42e:	429a      	cmp	r2, r3
 801a430:	d3a3      	bcc.n	801a37a <HAL_PCD_IRQHandler+0x4ee>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 801a432:	69fb      	ldr	r3, [r7, #28]
 801a434:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801a438:	69db      	ldr	r3, [r3, #28]
 801a43a:	69fa      	ldr	r2, [r7, #28]
 801a43c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 801a440:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 801a444:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 801a446:	687b      	ldr	r3, [r7, #4]
 801a448:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801a44a:	2b00      	cmp	r3, #0
 801a44c:	d016      	beq.n	801a47c <HAL_PCD_IRQHandler+0x5f0>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 801a44e:	69fb      	ldr	r3, [r7, #28]
 801a450:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801a454:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801a458:	69fa      	ldr	r2, [r7, #28]
 801a45a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 801a45e:	f043 030b 	orr.w	r3, r3, #11
 801a462:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 801a466:	69fb      	ldr	r3, [r7, #28]
 801a468:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801a46c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801a46e:	69fa      	ldr	r2, [r7, #28]
 801a470:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 801a474:	f043 030b 	orr.w	r3, r3, #11
 801a478:	6453      	str	r3, [r2, #68]	; 0x44
 801a47a:	e015      	b.n	801a4a8 <HAL_PCD_IRQHandler+0x61c>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 801a47c:	69fb      	ldr	r3, [r7, #28]
 801a47e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801a482:	695b      	ldr	r3, [r3, #20]
 801a484:	69fa      	ldr	r2, [r7, #28]
 801a486:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 801a48a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 801a48e:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 801a492:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 801a494:	69fb      	ldr	r3, [r7, #28]
 801a496:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801a49a:	691b      	ldr	r3, [r3, #16]
 801a49c:	69fa      	ldr	r2, [r7, #28]
 801a49e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 801a4a2:	f043 030b 	orr.w	r3, r3, #11
 801a4a6:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 801a4a8:	69fb      	ldr	r3, [r7, #28]
 801a4aa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801a4ae:	681b      	ldr	r3, [r3, #0]
 801a4b0:	69fa      	ldr	r2, [r7, #28]
 801a4b2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 801a4b6:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 801a4ba:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 801a4bc:	687b      	ldr	r3, [r7, #4]
 801a4be:	6818      	ldr	r0, [r3, #0]
 801a4c0:	687b      	ldr	r3, [r7, #4]
 801a4c2:	691b      	ldr	r3, [r3, #16]
 801a4c4:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 801a4c6:	687b      	ldr	r3, [r7, #4]
 801a4c8:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 801a4cc:	461a      	mov	r2, r3
 801a4ce:	f004 fe2f 	bl	801f130 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 801a4d2:	687b      	ldr	r3, [r7, #4]
 801a4d4:	681b      	ldr	r3, [r3, #0]
 801a4d6:	695a      	ldr	r2, [r3, #20]
 801a4d8:	687b      	ldr	r3, [r7, #4]
 801a4da:	681b      	ldr	r3, [r3, #0]
 801a4dc:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 801a4e0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 801a4e2:	687b      	ldr	r3, [r7, #4]
 801a4e4:	681b      	ldr	r3, [r3, #0]
 801a4e6:	4618      	mov	r0, r3
 801a4e8:	f004 fd5d 	bl	801efa6 <USB_ReadInterrupts>
 801a4ec:	4603      	mov	r3, r0
 801a4ee:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 801a4f2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 801a4f6:	d124      	bne.n	801a542 <HAL_PCD_IRQHandler+0x6b6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 801a4f8:	687b      	ldr	r3, [r7, #4]
 801a4fa:	681b      	ldr	r3, [r3, #0]
 801a4fc:	4618      	mov	r0, r3
 801a4fe:	f004 fdf3 	bl	801f0e8 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 801a502:	687b      	ldr	r3, [r7, #4]
 801a504:	681b      	ldr	r3, [r3, #0]
 801a506:	4618      	mov	r0, r3
 801a508:	f003 fe5b 	bl	801e1c2 <USB_GetDevSpeed>
 801a50c:	4603      	mov	r3, r0
 801a50e:	461a      	mov	r2, r3
 801a510:	687b      	ldr	r3, [r7, #4]
 801a512:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 801a514:	687b      	ldr	r3, [r7, #4]
 801a516:	681c      	ldr	r4, [r3, #0]
 801a518:	f000 fe94 	bl	801b244 <HAL_RCC_GetHCLKFreq>
 801a51c:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 801a51e:	687b      	ldr	r3, [r7, #4]
 801a520:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 801a522:	b2db      	uxtb	r3, r3
 801a524:	461a      	mov	r2, r3
 801a526:	4620      	mov	r0, r4
 801a528:	f003 fb80 	bl	801dc2c <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 801a52c:	6878      	ldr	r0, [r7, #4]
 801a52e:	f008 f872 	bl	8022616 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 801a532:	687b      	ldr	r3, [r7, #4]
 801a534:	681b      	ldr	r3, [r3, #0]
 801a536:	695a      	ldr	r2, [r3, #20]
 801a538:	687b      	ldr	r3, [r7, #4]
 801a53a:	681b      	ldr	r3, [r3, #0]
 801a53c:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 801a540:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 801a542:	687b      	ldr	r3, [r7, #4]
 801a544:	681b      	ldr	r3, [r3, #0]
 801a546:	4618      	mov	r0, r3
 801a548:	f004 fd2d 	bl	801efa6 <USB_ReadInterrupts>
 801a54c:	4603      	mov	r3, r0
 801a54e:	f003 0308 	and.w	r3, r3, #8
 801a552:	2b08      	cmp	r3, #8
 801a554:	d10a      	bne.n	801a56c <HAL_PCD_IRQHandler+0x6e0>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 801a556:	6878      	ldr	r0, [r7, #4]
 801a558:	f008 f84f 	bl	80225fa <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 801a55c:	687b      	ldr	r3, [r7, #4]
 801a55e:	681b      	ldr	r3, [r3, #0]
 801a560:	695a      	ldr	r2, [r3, #20]
 801a562:	687b      	ldr	r3, [r7, #4]
 801a564:	681b      	ldr	r3, [r3, #0]
 801a566:	f002 0208 	and.w	r2, r2, #8
 801a56a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 801a56c:	687b      	ldr	r3, [r7, #4]
 801a56e:	681b      	ldr	r3, [r3, #0]
 801a570:	4618      	mov	r0, r3
 801a572:	f004 fd18 	bl	801efa6 <USB_ReadInterrupts>
 801a576:	4603      	mov	r3, r0
 801a578:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 801a57c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 801a580:	d10f      	bne.n	801a5a2 <HAL_PCD_IRQHandler+0x716>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 801a582:	2300      	movs	r3, #0
 801a584:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 801a586:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a588:	b2db      	uxtb	r3, r3
 801a58a:	4619      	mov	r1, r3
 801a58c:	6878      	ldr	r0, [r7, #4]
 801a58e:	f008 f8b1 	bl	80226f4 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 801a592:	687b      	ldr	r3, [r7, #4]
 801a594:	681b      	ldr	r3, [r3, #0]
 801a596:	695a      	ldr	r2, [r3, #20]
 801a598:	687b      	ldr	r3, [r7, #4]
 801a59a:	681b      	ldr	r3, [r3, #0]
 801a59c:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 801a5a0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 801a5a2:	687b      	ldr	r3, [r7, #4]
 801a5a4:	681b      	ldr	r3, [r3, #0]
 801a5a6:	4618      	mov	r0, r3
 801a5a8:	f004 fcfd 	bl	801efa6 <USB_ReadInterrupts>
 801a5ac:	4603      	mov	r3, r0
 801a5ae:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 801a5b2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 801a5b6:	d10f      	bne.n	801a5d8 <HAL_PCD_IRQHandler+0x74c>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 801a5b8:	2300      	movs	r3, #0
 801a5ba:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 801a5bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a5be:	b2db      	uxtb	r3, r3
 801a5c0:	4619      	mov	r1, r3
 801a5c2:	6878      	ldr	r0, [r7, #4]
 801a5c4:	f008 f884 	bl	80226d0 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 801a5c8:	687b      	ldr	r3, [r7, #4]
 801a5ca:	681b      	ldr	r3, [r3, #0]
 801a5cc:	695a      	ldr	r2, [r3, #20]
 801a5ce:	687b      	ldr	r3, [r7, #4]
 801a5d0:	681b      	ldr	r3, [r3, #0]
 801a5d2:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 801a5d6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 801a5d8:	687b      	ldr	r3, [r7, #4]
 801a5da:	681b      	ldr	r3, [r3, #0]
 801a5dc:	4618      	mov	r0, r3
 801a5de:	f004 fce2 	bl	801efa6 <USB_ReadInterrupts>
 801a5e2:	4603      	mov	r3, r0
 801a5e4:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 801a5e8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801a5ec:	d10a      	bne.n	801a604 <HAL_PCD_IRQHandler+0x778>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 801a5ee:	6878      	ldr	r0, [r7, #4]
 801a5f0:	f008 f892 	bl	8022718 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 801a5f4:	687b      	ldr	r3, [r7, #4]
 801a5f6:	681b      	ldr	r3, [r3, #0]
 801a5f8:	695a      	ldr	r2, [r3, #20]
 801a5fa:	687b      	ldr	r3, [r7, #4]
 801a5fc:	681b      	ldr	r3, [r3, #0]
 801a5fe:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 801a602:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 801a604:	687b      	ldr	r3, [r7, #4]
 801a606:	681b      	ldr	r3, [r3, #0]
 801a608:	4618      	mov	r0, r3
 801a60a:	f004 fccc 	bl	801efa6 <USB_ReadInterrupts>
 801a60e:	4603      	mov	r3, r0
 801a610:	f003 0304 	and.w	r3, r3, #4
 801a614:	2b04      	cmp	r3, #4
 801a616:	d115      	bne.n	801a644 <HAL_PCD_IRQHandler+0x7b8>
    {
      temp = hpcd->Instance->GOTGINT;
 801a618:	687b      	ldr	r3, [r7, #4]
 801a61a:	681b      	ldr	r3, [r3, #0]
 801a61c:	685b      	ldr	r3, [r3, #4]
 801a61e:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 801a620:	69bb      	ldr	r3, [r7, #24]
 801a622:	f003 0304 	and.w	r3, r3, #4
 801a626:	2b00      	cmp	r3, #0
 801a628:	d002      	beq.n	801a630 <HAL_PCD_IRQHandler+0x7a4>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 801a62a:	6878      	ldr	r0, [r7, #4]
 801a62c:	f008 f882 	bl	8022734 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 801a630:	687b      	ldr	r3, [r7, #4]
 801a632:	681b      	ldr	r3, [r3, #0]
 801a634:	6859      	ldr	r1, [r3, #4]
 801a636:	687b      	ldr	r3, [r7, #4]
 801a638:	681b      	ldr	r3, [r3, #0]
 801a63a:	69ba      	ldr	r2, [r7, #24]
 801a63c:	430a      	orrs	r2, r1
 801a63e:	605a      	str	r2, [r3, #4]
 801a640:	e000      	b.n	801a644 <HAL_PCD_IRQHandler+0x7b8>
      return;
 801a642:	bf00      	nop
    }
  }
}
 801a644:	3734      	adds	r7, #52	; 0x34
 801a646:	46bd      	mov	sp, r7
 801a648:	bd90      	pop	{r4, r7, pc}

0801a64a <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 801a64a:	b580      	push	{r7, lr}
 801a64c:	b082      	sub	sp, #8
 801a64e:	af00      	add	r7, sp, #0
 801a650:	6078      	str	r0, [r7, #4]
 801a652:	460b      	mov	r3, r1
 801a654:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 801a656:	687b      	ldr	r3, [r7, #4]
 801a658:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 801a65c:	2b01      	cmp	r3, #1
 801a65e:	d101      	bne.n	801a664 <HAL_PCD_SetAddress+0x1a>
 801a660:	2302      	movs	r3, #2
 801a662:	e013      	b.n	801a68c <HAL_PCD_SetAddress+0x42>
 801a664:	687b      	ldr	r3, [r7, #4]
 801a666:	2201      	movs	r2, #1
 801a668:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 801a66c:	687b      	ldr	r3, [r7, #4]
 801a66e:	78fa      	ldrb	r2, [r7, #3]
 801a670:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 801a674:	687b      	ldr	r3, [r7, #4]
 801a676:	681b      	ldr	r3, [r3, #0]
 801a678:	78fa      	ldrb	r2, [r7, #3]
 801a67a:	4611      	mov	r1, r2
 801a67c:	4618      	mov	r0, r3
 801a67e:	f004 fc2a 	bl	801eed6 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 801a682:	687b      	ldr	r3, [r7, #4]
 801a684:	2200      	movs	r2, #0
 801a686:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 801a68a:	2300      	movs	r3, #0
}
 801a68c:	4618      	mov	r0, r3
 801a68e:	3708      	adds	r7, #8
 801a690:	46bd      	mov	sp, r7
 801a692:	bd80      	pop	{r7, pc}

0801a694 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 801a694:	b580      	push	{r7, lr}
 801a696:	b084      	sub	sp, #16
 801a698:	af00      	add	r7, sp, #0
 801a69a:	6078      	str	r0, [r7, #4]
 801a69c:	4608      	mov	r0, r1
 801a69e:	4611      	mov	r1, r2
 801a6a0:	461a      	mov	r2, r3
 801a6a2:	4603      	mov	r3, r0
 801a6a4:	70fb      	strb	r3, [r7, #3]
 801a6a6:	460b      	mov	r3, r1
 801a6a8:	803b      	strh	r3, [r7, #0]
 801a6aa:	4613      	mov	r3, r2
 801a6ac:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 801a6ae:	2300      	movs	r3, #0
 801a6b0:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 801a6b2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 801a6b6:	2b00      	cmp	r3, #0
 801a6b8:	da0f      	bge.n	801a6da <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 801a6ba:	78fb      	ldrb	r3, [r7, #3]
 801a6bc:	f003 020f 	and.w	r2, r3, #15
 801a6c0:	4613      	mov	r3, r2
 801a6c2:	00db      	lsls	r3, r3, #3
 801a6c4:	1a9b      	subs	r3, r3, r2
 801a6c6:	009b      	lsls	r3, r3, #2
 801a6c8:	3338      	adds	r3, #56	; 0x38
 801a6ca:	687a      	ldr	r2, [r7, #4]
 801a6cc:	4413      	add	r3, r2
 801a6ce:	3304      	adds	r3, #4
 801a6d0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 801a6d2:	68fb      	ldr	r3, [r7, #12]
 801a6d4:	2201      	movs	r2, #1
 801a6d6:	705a      	strb	r2, [r3, #1]
 801a6d8:	e00f      	b.n	801a6fa <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 801a6da:	78fb      	ldrb	r3, [r7, #3]
 801a6dc:	f003 020f 	and.w	r2, r3, #15
 801a6e0:	4613      	mov	r3, r2
 801a6e2:	00db      	lsls	r3, r3, #3
 801a6e4:	1a9b      	subs	r3, r3, r2
 801a6e6:	009b      	lsls	r3, r3, #2
 801a6e8:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 801a6ec:	687a      	ldr	r2, [r7, #4]
 801a6ee:	4413      	add	r3, r2
 801a6f0:	3304      	adds	r3, #4
 801a6f2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 801a6f4:	68fb      	ldr	r3, [r7, #12]
 801a6f6:	2200      	movs	r2, #0
 801a6f8:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 801a6fa:	78fb      	ldrb	r3, [r7, #3]
 801a6fc:	f003 030f 	and.w	r3, r3, #15
 801a700:	b2da      	uxtb	r2, r3
 801a702:	68fb      	ldr	r3, [r7, #12]
 801a704:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 801a706:	883a      	ldrh	r2, [r7, #0]
 801a708:	68fb      	ldr	r3, [r7, #12]
 801a70a:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 801a70c:	68fb      	ldr	r3, [r7, #12]
 801a70e:	78ba      	ldrb	r2, [r7, #2]
 801a710:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 801a712:	68fb      	ldr	r3, [r7, #12]
 801a714:	785b      	ldrb	r3, [r3, #1]
 801a716:	2b00      	cmp	r3, #0
 801a718:	d004      	beq.n	801a724 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 801a71a:	68fb      	ldr	r3, [r7, #12]
 801a71c:	781b      	ldrb	r3, [r3, #0]
 801a71e:	b29a      	uxth	r2, r3
 801a720:	68fb      	ldr	r3, [r7, #12]
 801a722:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 801a724:	78bb      	ldrb	r3, [r7, #2]
 801a726:	2b02      	cmp	r3, #2
 801a728:	d102      	bne.n	801a730 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 801a72a:	68fb      	ldr	r3, [r7, #12]
 801a72c:	2200      	movs	r2, #0
 801a72e:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 801a730:	687b      	ldr	r3, [r7, #4]
 801a732:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 801a736:	2b01      	cmp	r3, #1
 801a738:	d101      	bne.n	801a73e <HAL_PCD_EP_Open+0xaa>
 801a73a:	2302      	movs	r3, #2
 801a73c:	e00e      	b.n	801a75c <HAL_PCD_EP_Open+0xc8>
 801a73e:	687b      	ldr	r3, [r7, #4]
 801a740:	2201      	movs	r2, #1
 801a742:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 801a746:	687b      	ldr	r3, [r7, #4]
 801a748:	681b      	ldr	r3, [r3, #0]
 801a74a:	68f9      	ldr	r1, [r7, #12]
 801a74c:	4618      	mov	r0, r3
 801a74e:	f003 fd5d 	bl	801e20c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 801a752:	687b      	ldr	r3, [r7, #4]
 801a754:	2200      	movs	r2, #0
 801a756:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 801a75a:	7afb      	ldrb	r3, [r7, #11]
}
 801a75c:	4618      	mov	r0, r3
 801a75e:	3710      	adds	r7, #16
 801a760:	46bd      	mov	sp, r7
 801a762:	bd80      	pop	{r7, pc}

0801a764 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 801a764:	b580      	push	{r7, lr}
 801a766:	b084      	sub	sp, #16
 801a768:	af00      	add	r7, sp, #0
 801a76a:	6078      	str	r0, [r7, #4]
 801a76c:	460b      	mov	r3, r1
 801a76e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 801a770:	f997 3003 	ldrsb.w	r3, [r7, #3]
 801a774:	2b00      	cmp	r3, #0
 801a776:	da0f      	bge.n	801a798 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 801a778:	78fb      	ldrb	r3, [r7, #3]
 801a77a:	f003 020f 	and.w	r2, r3, #15
 801a77e:	4613      	mov	r3, r2
 801a780:	00db      	lsls	r3, r3, #3
 801a782:	1a9b      	subs	r3, r3, r2
 801a784:	009b      	lsls	r3, r3, #2
 801a786:	3338      	adds	r3, #56	; 0x38
 801a788:	687a      	ldr	r2, [r7, #4]
 801a78a:	4413      	add	r3, r2
 801a78c:	3304      	adds	r3, #4
 801a78e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 801a790:	68fb      	ldr	r3, [r7, #12]
 801a792:	2201      	movs	r2, #1
 801a794:	705a      	strb	r2, [r3, #1]
 801a796:	e00f      	b.n	801a7b8 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 801a798:	78fb      	ldrb	r3, [r7, #3]
 801a79a:	f003 020f 	and.w	r2, r3, #15
 801a79e:	4613      	mov	r3, r2
 801a7a0:	00db      	lsls	r3, r3, #3
 801a7a2:	1a9b      	subs	r3, r3, r2
 801a7a4:	009b      	lsls	r3, r3, #2
 801a7a6:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 801a7aa:	687a      	ldr	r2, [r7, #4]
 801a7ac:	4413      	add	r3, r2
 801a7ae:	3304      	adds	r3, #4
 801a7b0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 801a7b2:	68fb      	ldr	r3, [r7, #12]
 801a7b4:	2200      	movs	r2, #0
 801a7b6:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 801a7b8:	78fb      	ldrb	r3, [r7, #3]
 801a7ba:	f003 030f 	and.w	r3, r3, #15
 801a7be:	b2da      	uxtb	r2, r3
 801a7c0:	68fb      	ldr	r3, [r7, #12]
 801a7c2:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 801a7c4:	687b      	ldr	r3, [r7, #4]
 801a7c6:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 801a7ca:	2b01      	cmp	r3, #1
 801a7cc:	d101      	bne.n	801a7d2 <HAL_PCD_EP_Close+0x6e>
 801a7ce:	2302      	movs	r3, #2
 801a7d0:	e00e      	b.n	801a7f0 <HAL_PCD_EP_Close+0x8c>
 801a7d2:	687b      	ldr	r3, [r7, #4]
 801a7d4:	2201      	movs	r2, #1
 801a7d6:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 801a7da:	687b      	ldr	r3, [r7, #4]
 801a7dc:	681b      	ldr	r3, [r3, #0]
 801a7de:	68f9      	ldr	r1, [r7, #12]
 801a7e0:	4618      	mov	r0, r3
 801a7e2:	f003 fd9b 	bl	801e31c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 801a7e6:	687b      	ldr	r3, [r7, #4]
 801a7e8:	2200      	movs	r2, #0
 801a7ea:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 801a7ee:	2300      	movs	r3, #0
}
 801a7f0:	4618      	mov	r0, r3
 801a7f2:	3710      	adds	r7, #16
 801a7f4:	46bd      	mov	sp, r7
 801a7f6:	bd80      	pop	{r7, pc}

0801a7f8 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 801a7f8:	b580      	push	{r7, lr}
 801a7fa:	b086      	sub	sp, #24
 801a7fc:	af00      	add	r7, sp, #0
 801a7fe:	60f8      	str	r0, [r7, #12]
 801a800:	607a      	str	r2, [r7, #4]
 801a802:	603b      	str	r3, [r7, #0]
 801a804:	460b      	mov	r3, r1
 801a806:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 801a808:	7afb      	ldrb	r3, [r7, #11]
 801a80a:	f003 020f 	and.w	r2, r3, #15
 801a80e:	4613      	mov	r3, r2
 801a810:	00db      	lsls	r3, r3, #3
 801a812:	1a9b      	subs	r3, r3, r2
 801a814:	009b      	lsls	r3, r3, #2
 801a816:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 801a81a:	68fa      	ldr	r2, [r7, #12]
 801a81c:	4413      	add	r3, r2
 801a81e:	3304      	adds	r3, #4
 801a820:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 801a822:	697b      	ldr	r3, [r7, #20]
 801a824:	687a      	ldr	r2, [r7, #4]
 801a826:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 801a828:	697b      	ldr	r3, [r7, #20]
 801a82a:	683a      	ldr	r2, [r7, #0]
 801a82c:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 801a82e:	697b      	ldr	r3, [r7, #20]
 801a830:	2200      	movs	r2, #0
 801a832:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 801a834:	697b      	ldr	r3, [r7, #20]
 801a836:	2200      	movs	r2, #0
 801a838:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 801a83a:	7afb      	ldrb	r3, [r7, #11]
 801a83c:	f003 030f 	and.w	r3, r3, #15
 801a840:	b2da      	uxtb	r2, r3
 801a842:	697b      	ldr	r3, [r7, #20]
 801a844:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 801a846:	68fb      	ldr	r3, [r7, #12]
 801a848:	691b      	ldr	r3, [r3, #16]
 801a84a:	2b01      	cmp	r3, #1
 801a84c:	d102      	bne.n	801a854 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 801a84e:	687a      	ldr	r2, [r7, #4]
 801a850:	697b      	ldr	r3, [r7, #20]
 801a852:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 801a854:	7afb      	ldrb	r3, [r7, #11]
 801a856:	f003 030f 	and.w	r3, r3, #15
 801a85a:	2b00      	cmp	r3, #0
 801a85c:	d109      	bne.n	801a872 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 801a85e:	68fb      	ldr	r3, [r7, #12]
 801a860:	6818      	ldr	r0, [r3, #0]
 801a862:	68fb      	ldr	r3, [r7, #12]
 801a864:	691b      	ldr	r3, [r3, #16]
 801a866:	b2db      	uxtb	r3, r3
 801a868:	461a      	mov	r2, r3
 801a86a:	6979      	ldr	r1, [r7, #20]
 801a86c:	f004 f876 	bl	801e95c <USB_EP0StartXfer>
 801a870:	e008      	b.n	801a884 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 801a872:	68fb      	ldr	r3, [r7, #12]
 801a874:	6818      	ldr	r0, [r3, #0]
 801a876:	68fb      	ldr	r3, [r7, #12]
 801a878:	691b      	ldr	r3, [r3, #16]
 801a87a:	b2db      	uxtb	r3, r3
 801a87c:	461a      	mov	r2, r3
 801a87e:	6979      	ldr	r1, [r7, #20]
 801a880:	f003 fe28 	bl	801e4d4 <USB_EPStartXfer>
  }

  return HAL_OK;
 801a884:	2300      	movs	r3, #0
}
 801a886:	4618      	mov	r0, r3
 801a888:	3718      	adds	r7, #24
 801a88a:	46bd      	mov	sp, r7
 801a88c:	bd80      	pop	{r7, pc}

0801a88e <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 801a88e:	b480      	push	{r7}
 801a890:	b083      	sub	sp, #12
 801a892:	af00      	add	r7, sp, #0
 801a894:	6078      	str	r0, [r7, #4]
 801a896:	460b      	mov	r3, r1
 801a898:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 801a89a:	78fb      	ldrb	r3, [r7, #3]
 801a89c:	f003 020f 	and.w	r2, r3, #15
 801a8a0:	6879      	ldr	r1, [r7, #4]
 801a8a2:	4613      	mov	r3, r2
 801a8a4:	00db      	lsls	r3, r3, #3
 801a8a6:	1a9b      	subs	r3, r3, r2
 801a8a8:	009b      	lsls	r3, r3, #2
 801a8aa:	440b      	add	r3, r1
 801a8ac:	f503 7305 	add.w	r3, r3, #532	; 0x214
 801a8b0:	681b      	ldr	r3, [r3, #0]
}
 801a8b2:	4618      	mov	r0, r3
 801a8b4:	370c      	adds	r7, #12
 801a8b6:	46bd      	mov	sp, r7
 801a8b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a8bc:	4770      	bx	lr

0801a8be <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 801a8be:	b580      	push	{r7, lr}
 801a8c0:	b086      	sub	sp, #24
 801a8c2:	af00      	add	r7, sp, #0
 801a8c4:	60f8      	str	r0, [r7, #12]
 801a8c6:	607a      	str	r2, [r7, #4]
 801a8c8:	603b      	str	r3, [r7, #0]
 801a8ca:	460b      	mov	r3, r1
 801a8cc:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 801a8ce:	7afb      	ldrb	r3, [r7, #11]
 801a8d0:	f003 020f 	and.w	r2, r3, #15
 801a8d4:	4613      	mov	r3, r2
 801a8d6:	00db      	lsls	r3, r3, #3
 801a8d8:	1a9b      	subs	r3, r3, r2
 801a8da:	009b      	lsls	r3, r3, #2
 801a8dc:	3338      	adds	r3, #56	; 0x38
 801a8de:	68fa      	ldr	r2, [r7, #12]
 801a8e0:	4413      	add	r3, r2
 801a8e2:	3304      	adds	r3, #4
 801a8e4:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 801a8e6:	697b      	ldr	r3, [r7, #20]
 801a8e8:	687a      	ldr	r2, [r7, #4]
 801a8ea:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 801a8ec:	697b      	ldr	r3, [r7, #20]
 801a8ee:	683a      	ldr	r2, [r7, #0]
 801a8f0:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 801a8f2:	697b      	ldr	r3, [r7, #20]
 801a8f4:	2200      	movs	r2, #0
 801a8f6:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 801a8f8:	697b      	ldr	r3, [r7, #20]
 801a8fa:	2201      	movs	r2, #1
 801a8fc:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 801a8fe:	7afb      	ldrb	r3, [r7, #11]
 801a900:	f003 030f 	and.w	r3, r3, #15
 801a904:	b2da      	uxtb	r2, r3
 801a906:	697b      	ldr	r3, [r7, #20]
 801a908:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 801a90a:	68fb      	ldr	r3, [r7, #12]
 801a90c:	691b      	ldr	r3, [r3, #16]
 801a90e:	2b01      	cmp	r3, #1
 801a910:	d102      	bne.n	801a918 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 801a912:	687a      	ldr	r2, [r7, #4]
 801a914:	697b      	ldr	r3, [r7, #20]
 801a916:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 801a918:	7afb      	ldrb	r3, [r7, #11]
 801a91a:	f003 030f 	and.w	r3, r3, #15
 801a91e:	2b00      	cmp	r3, #0
 801a920:	d109      	bne.n	801a936 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 801a922:	68fb      	ldr	r3, [r7, #12]
 801a924:	6818      	ldr	r0, [r3, #0]
 801a926:	68fb      	ldr	r3, [r7, #12]
 801a928:	691b      	ldr	r3, [r3, #16]
 801a92a:	b2db      	uxtb	r3, r3
 801a92c:	461a      	mov	r2, r3
 801a92e:	6979      	ldr	r1, [r7, #20]
 801a930:	f004 f814 	bl	801e95c <USB_EP0StartXfer>
 801a934:	e008      	b.n	801a948 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 801a936:	68fb      	ldr	r3, [r7, #12]
 801a938:	6818      	ldr	r0, [r3, #0]
 801a93a:	68fb      	ldr	r3, [r7, #12]
 801a93c:	691b      	ldr	r3, [r3, #16]
 801a93e:	b2db      	uxtb	r3, r3
 801a940:	461a      	mov	r2, r3
 801a942:	6979      	ldr	r1, [r7, #20]
 801a944:	f003 fdc6 	bl	801e4d4 <USB_EPStartXfer>
  }

  return HAL_OK;
 801a948:	2300      	movs	r3, #0
}
 801a94a:	4618      	mov	r0, r3
 801a94c:	3718      	adds	r7, #24
 801a94e:	46bd      	mov	sp, r7
 801a950:	bd80      	pop	{r7, pc}

0801a952 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 801a952:	b580      	push	{r7, lr}
 801a954:	b084      	sub	sp, #16
 801a956:	af00      	add	r7, sp, #0
 801a958:	6078      	str	r0, [r7, #4]
 801a95a:	460b      	mov	r3, r1
 801a95c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 801a95e:	78fb      	ldrb	r3, [r7, #3]
 801a960:	f003 020f 	and.w	r2, r3, #15
 801a964:	687b      	ldr	r3, [r7, #4]
 801a966:	685b      	ldr	r3, [r3, #4]
 801a968:	429a      	cmp	r2, r3
 801a96a:	d901      	bls.n	801a970 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 801a96c:	2301      	movs	r3, #1
 801a96e:	e050      	b.n	801aa12 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 801a970:	f997 3003 	ldrsb.w	r3, [r7, #3]
 801a974:	2b00      	cmp	r3, #0
 801a976:	da0f      	bge.n	801a998 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 801a978:	78fb      	ldrb	r3, [r7, #3]
 801a97a:	f003 020f 	and.w	r2, r3, #15
 801a97e:	4613      	mov	r3, r2
 801a980:	00db      	lsls	r3, r3, #3
 801a982:	1a9b      	subs	r3, r3, r2
 801a984:	009b      	lsls	r3, r3, #2
 801a986:	3338      	adds	r3, #56	; 0x38
 801a988:	687a      	ldr	r2, [r7, #4]
 801a98a:	4413      	add	r3, r2
 801a98c:	3304      	adds	r3, #4
 801a98e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 801a990:	68fb      	ldr	r3, [r7, #12]
 801a992:	2201      	movs	r2, #1
 801a994:	705a      	strb	r2, [r3, #1]
 801a996:	e00d      	b.n	801a9b4 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 801a998:	78fa      	ldrb	r2, [r7, #3]
 801a99a:	4613      	mov	r3, r2
 801a99c:	00db      	lsls	r3, r3, #3
 801a99e:	1a9b      	subs	r3, r3, r2
 801a9a0:	009b      	lsls	r3, r3, #2
 801a9a2:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 801a9a6:	687a      	ldr	r2, [r7, #4]
 801a9a8:	4413      	add	r3, r2
 801a9aa:	3304      	adds	r3, #4
 801a9ac:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 801a9ae:	68fb      	ldr	r3, [r7, #12]
 801a9b0:	2200      	movs	r2, #0
 801a9b2:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 801a9b4:	68fb      	ldr	r3, [r7, #12]
 801a9b6:	2201      	movs	r2, #1
 801a9b8:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 801a9ba:	78fb      	ldrb	r3, [r7, #3]
 801a9bc:	f003 030f 	and.w	r3, r3, #15
 801a9c0:	b2da      	uxtb	r2, r3
 801a9c2:	68fb      	ldr	r3, [r7, #12]
 801a9c4:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 801a9c6:	687b      	ldr	r3, [r7, #4]
 801a9c8:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 801a9cc:	2b01      	cmp	r3, #1
 801a9ce:	d101      	bne.n	801a9d4 <HAL_PCD_EP_SetStall+0x82>
 801a9d0:	2302      	movs	r3, #2
 801a9d2:	e01e      	b.n	801aa12 <HAL_PCD_EP_SetStall+0xc0>
 801a9d4:	687b      	ldr	r3, [r7, #4]
 801a9d6:	2201      	movs	r2, #1
 801a9d8:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 801a9dc:	687b      	ldr	r3, [r7, #4]
 801a9de:	681b      	ldr	r3, [r3, #0]
 801a9e0:	68f9      	ldr	r1, [r7, #12]
 801a9e2:	4618      	mov	r0, r3
 801a9e4:	f004 f9a3 	bl	801ed2e <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 801a9e8:	78fb      	ldrb	r3, [r7, #3]
 801a9ea:	f003 030f 	and.w	r3, r3, #15
 801a9ee:	2b00      	cmp	r3, #0
 801a9f0:	d10a      	bne.n	801aa08 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 801a9f2:	687b      	ldr	r3, [r7, #4]
 801a9f4:	6818      	ldr	r0, [r3, #0]
 801a9f6:	687b      	ldr	r3, [r7, #4]
 801a9f8:	691b      	ldr	r3, [r3, #16]
 801a9fa:	b2d9      	uxtb	r1, r3
 801a9fc:	687b      	ldr	r3, [r7, #4]
 801a9fe:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 801aa02:	461a      	mov	r2, r3
 801aa04:	f004 fb94 	bl	801f130 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 801aa08:	687b      	ldr	r3, [r7, #4]
 801aa0a:	2200      	movs	r2, #0
 801aa0c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 801aa10:	2300      	movs	r3, #0
}
 801aa12:	4618      	mov	r0, r3
 801aa14:	3710      	adds	r7, #16
 801aa16:	46bd      	mov	sp, r7
 801aa18:	bd80      	pop	{r7, pc}

0801aa1a <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 801aa1a:	b580      	push	{r7, lr}
 801aa1c:	b084      	sub	sp, #16
 801aa1e:	af00      	add	r7, sp, #0
 801aa20:	6078      	str	r0, [r7, #4]
 801aa22:	460b      	mov	r3, r1
 801aa24:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 801aa26:	78fb      	ldrb	r3, [r7, #3]
 801aa28:	f003 020f 	and.w	r2, r3, #15
 801aa2c:	687b      	ldr	r3, [r7, #4]
 801aa2e:	685b      	ldr	r3, [r3, #4]
 801aa30:	429a      	cmp	r2, r3
 801aa32:	d901      	bls.n	801aa38 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 801aa34:	2301      	movs	r3, #1
 801aa36:	e042      	b.n	801aabe <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 801aa38:	f997 3003 	ldrsb.w	r3, [r7, #3]
 801aa3c:	2b00      	cmp	r3, #0
 801aa3e:	da0f      	bge.n	801aa60 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 801aa40:	78fb      	ldrb	r3, [r7, #3]
 801aa42:	f003 020f 	and.w	r2, r3, #15
 801aa46:	4613      	mov	r3, r2
 801aa48:	00db      	lsls	r3, r3, #3
 801aa4a:	1a9b      	subs	r3, r3, r2
 801aa4c:	009b      	lsls	r3, r3, #2
 801aa4e:	3338      	adds	r3, #56	; 0x38
 801aa50:	687a      	ldr	r2, [r7, #4]
 801aa52:	4413      	add	r3, r2
 801aa54:	3304      	adds	r3, #4
 801aa56:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 801aa58:	68fb      	ldr	r3, [r7, #12]
 801aa5a:	2201      	movs	r2, #1
 801aa5c:	705a      	strb	r2, [r3, #1]
 801aa5e:	e00f      	b.n	801aa80 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 801aa60:	78fb      	ldrb	r3, [r7, #3]
 801aa62:	f003 020f 	and.w	r2, r3, #15
 801aa66:	4613      	mov	r3, r2
 801aa68:	00db      	lsls	r3, r3, #3
 801aa6a:	1a9b      	subs	r3, r3, r2
 801aa6c:	009b      	lsls	r3, r3, #2
 801aa6e:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 801aa72:	687a      	ldr	r2, [r7, #4]
 801aa74:	4413      	add	r3, r2
 801aa76:	3304      	adds	r3, #4
 801aa78:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 801aa7a:	68fb      	ldr	r3, [r7, #12]
 801aa7c:	2200      	movs	r2, #0
 801aa7e:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 801aa80:	68fb      	ldr	r3, [r7, #12]
 801aa82:	2200      	movs	r2, #0
 801aa84:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 801aa86:	78fb      	ldrb	r3, [r7, #3]
 801aa88:	f003 030f 	and.w	r3, r3, #15
 801aa8c:	b2da      	uxtb	r2, r3
 801aa8e:	68fb      	ldr	r3, [r7, #12]
 801aa90:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 801aa92:	687b      	ldr	r3, [r7, #4]
 801aa94:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 801aa98:	2b01      	cmp	r3, #1
 801aa9a:	d101      	bne.n	801aaa0 <HAL_PCD_EP_ClrStall+0x86>
 801aa9c:	2302      	movs	r3, #2
 801aa9e:	e00e      	b.n	801aabe <HAL_PCD_EP_ClrStall+0xa4>
 801aaa0:	687b      	ldr	r3, [r7, #4]
 801aaa2:	2201      	movs	r2, #1
 801aaa4:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 801aaa8:	687b      	ldr	r3, [r7, #4]
 801aaaa:	681b      	ldr	r3, [r3, #0]
 801aaac:	68f9      	ldr	r1, [r7, #12]
 801aaae:	4618      	mov	r0, r3
 801aab0:	f004 f9ab 	bl	801ee0a <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 801aab4:	687b      	ldr	r3, [r7, #4]
 801aab6:	2200      	movs	r2, #0
 801aab8:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 801aabc:	2300      	movs	r3, #0
}
 801aabe:	4618      	mov	r0, r3
 801aac0:	3710      	adds	r7, #16
 801aac2:	46bd      	mov	sp, r7
 801aac4:	bd80      	pop	{r7, pc}

0801aac6 <HAL_PCD_EP_Flush>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Flush(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 801aac6:	b580      	push	{r7, lr}
 801aac8:	b082      	sub	sp, #8
 801aaca:	af00      	add	r7, sp, #0
 801aacc:	6078      	str	r0, [r7, #4]
 801aace:	460b      	mov	r3, r1
 801aad0:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 801aad2:	687b      	ldr	r3, [r7, #4]
 801aad4:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 801aad8:	2b01      	cmp	r3, #1
 801aada:	d101      	bne.n	801aae0 <HAL_PCD_EP_Flush+0x1a>
 801aadc:	2302      	movs	r3, #2
 801aade:	e01b      	b.n	801ab18 <HAL_PCD_EP_Flush+0x52>
 801aae0:	687b      	ldr	r3, [r7, #4]
 801aae2:	2201      	movs	r2, #1
 801aae4:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  if ((ep_addr & 0x80U) == 0x80U)
 801aae8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 801aaec:	2b00      	cmp	r3, #0
 801aaee:	da09      	bge.n	801ab04 <HAL_PCD_EP_Flush+0x3e>
  {
    (void)USB_FlushTxFifo(hpcd->Instance, (uint32_t)ep_addr & EP_ADDR_MSK);
 801aaf0:	687b      	ldr	r3, [r7, #4]
 801aaf2:	681a      	ldr	r2, [r3, #0]
 801aaf4:	78fb      	ldrb	r3, [r7, #3]
 801aaf6:	f003 030f 	and.w	r3, r3, #15
 801aafa:	4619      	mov	r1, r3
 801aafc:	4610      	mov	r0, r2
 801aafe:	f003 fb03 	bl	801e108 <USB_FlushTxFifo>
 801ab02:	e004      	b.n	801ab0e <HAL_PCD_EP_Flush+0x48>
  }
  else
  {
    (void)USB_FlushRxFifo(hpcd->Instance);
 801ab04:	687b      	ldr	r3, [r7, #4]
 801ab06:	681b      	ldr	r3, [r3, #0]
 801ab08:	4618      	mov	r0, r3
 801ab0a:	f003 fb21 	bl	801e150 <USB_FlushRxFifo>
  }

  __HAL_UNLOCK(hpcd);
 801ab0e:	687b      	ldr	r3, [r7, #4]
 801ab10:	2200      	movs	r2, #0
 801ab12:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 801ab16:	2300      	movs	r3, #0
}
 801ab18:	4618      	mov	r0, r3
 801ab1a:	3708      	adds	r7, #8
 801ab1c:	46bd      	mov	sp, r7
 801ab1e:	bd80      	pop	{r7, pc}

0801ab20 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 801ab20:	b580      	push	{r7, lr}
 801ab22:	b08a      	sub	sp, #40	; 0x28
 801ab24:	af02      	add	r7, sp, #8
 801ab26:	6078      	str	r0, [r7, #4]
 801ab28:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 801ab2a:	687b      	ldr	r3, [r7, #4]
 801ab2c:	681b      	ldr	r3, [r3, #0]
 801ab2e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801ab30:	697b      	ldr	r3, [r7, #20]
 801ab32:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 801ab34:	683a      	ldr	r2, [r7, #0]
 801ab36:	4613      	mov	r3, r2
 801ab38:	00db      	lsls	r3, r3, #3
 801ab3a:	1a9b      	subs	r3, r3, r2
 801ab3c:	009b      	lsls	r3, r3, #2
 801ab3e:	3338      	adds	r3, #56	; 0x38
 801ab40:	687a      	ldr	r2, [r7, #4]
 801ab42:	4413      	add	r3, r2
 801ab44:	3304      	adds	r3, #4
 801ab46:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 801ab48:	68fb      	ldr	r3, [r7, #12]
 801ab4a:	699a      	ldr	r2, [r3, #24]
 801ab4c:	68fb      	ldr	r3, [r7, #12]
 801ab4e:	695b      	ldr	r3, [r3, #20]
 801ab50:	429a      	cmp	r2, r3
 801ab52:	d901      	bls.n	801ab58 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 801ab54:	2301      	movs	r3, #1
 801ab56:	e06c      	b.n	801ac32 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 801ab58:	68fb      	ldr	r3, [r7, #12]
 801ab5a:	695a      	ldr	r2, [r3, #20]
 801ab5c:	68fb      	ldr	r3, [r7, #12]
 801ab5e:	699b      	ldr	r3, [r3, #24]
 801ab60:	1ad3      	subs	r3, r2, r3
 801ab62:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 801ab64:	68fb      	ldr	r3, [r7, #12]
 801ab66:	689b      	ldr	r3, [r3, #8]
 801ab68:	69fa      	ldr	r2, [r7, #28]
 801ab6a:	429a      	cmp	r2, r3
 801ab6c:	d902      	bls.n	801ab74 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 801ab6e:	68fb      	ldr	r3, [r7, #12]
 801ab70:	689b      	ldr	r3, [r3, #8]
 801ab72:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 801ab74:	69fb      	ldr	r3, [r7, #28]
 801ab76:	3303      	adds	r3, #3
 801ab78:	089b      	lsrs	r3, r3, #2
 801ab7a:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 801ab7c:	e02b      	b.n	801abd6 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 801ab7e:	68fb      	ldr	r3, [r7, #12]
 801ab80:	695a      	ldr	r2, [r3, #20]
 801ab82:	68fb      	ldr	r3, [r7, #12]
 801ab84:	699b      	ldr	r3, [r3, #24]
 801ab86:	1ad3      	subs	r3, r2, r3
 801ab88:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 801ab8a:	68fb      	ldr	r3, [r7, #12]
 801ab8c:	689b      	ldr	r3, [r3, #8]
 801ab8e:	69fa      	ldr	r2, [r7, #28]
 801ab90:	429a      	cmp	r2, r3
 801ab92:	d902      	bls.n	801ab9a <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 801ab94:	68fb      	ldr	r3, [r7, #12]
 801ab96:	689b      	ldr	r3, [r3, #8]
 801ab98:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 801ab9a:	69fb      	ldr	r3, [r7, #28]
 801ab9c:	3303      	adds	r3, #3
 801ab9e:	089b      	lsrs	r3, r3, #2
 801aba0:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 801aba2:	68fb      	ldr	r3, [r7, #12]
 801aba4:	68d9      	ldr	r1, [r3, #12]
 801aba6:	683b      	ldr	r3, [r7, #0]
 801aba8:	b2da      	uxtb	r2, r3
 801abaa:	69fb      	ldr	r3, [r7, #28]
 801abac:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 801abae:	687b      	ldr	r3, [r7, #4]
 801abb0:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 801abb2:	b2db      	uxtb	r3, r3
 801abb4:	9300      	str	r3, [sp, #0]
 801abb6:	4603      	mov	r3, r0
 801abb8:	6978      	ldr	r0, [r7, #20]
 801abba:	f004 f822 	bl	801ec02 <USB_WritePacket>

    ep->xfer_buff  += len;
 801abbe:	68fb      	ldr	r3, [r7, #12]
 801abc0:	68da      	ldr	r2, [r3, #12]
 801abc2:	69fb      	ldr	r3, [r7, #28]
 801abc4:	441a      	add	r2, r3
 801abc6:	68fb      	ldr	r3, [r7, #12]
 801abc8:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 801abca:	68fb      	ldr	r3, [r7, #12]
 801abcc:	699a      	ldr	r2, [r3, #24]
 801abce:	69fb      	ldr	r3, [r7, #28]
 801abd0:	441a      	add	r2, r3
 801abd2:	68fb      	ldr	r3, [r7, #12]
 801abd4:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 801abd6:	683b      	ldr	r3, [r7, #0]
 801abd8:	015a      	lsls	r2, r3, #5
 801abda:	693b      	ldr	r3, [r7, #16]
 801abdc:	4413      	add	r3, r2
 801abde:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801abe2:	699b      	ldr	r3, [r3, #24]
 801abe4:	b29b      	uxth	r3, r3
 801abe6:	69ba      	ldr	r2, [r7, #24]
 801abe8:	429a      	cmp	r2, r3
 801abea:	d809      	bhi.n	801ac00 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 801abec:	68fb      	ldr	r3, [r7, #12]
 801abee:	699a      	ldr	r2, [r3, #24]
 801abf0:	68fb      	ldr	r3, [r7, #12]
 801abf2:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 801abf4:	429a      	cmp	r2, r3
 801abf6:	d203      	bcs.n	801ac00 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 801abf8:	68fb      	ldr	r3, [r7, #12]
 801abfa:	695b      	ldr	r3, [r3, #20]
 801abfc:	2b00      	cmp	r3, #0
 801abfe:	d1be      	bne.n	801ab7e <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 801ac00:	68fb      	ldr	r3, [r7, #12]
 801ac02:	695a      	ldr	r2, [r3, #20]
 801ac04:	68fb      	ldr	r3, [r7, #12]
 801ac06:	699b      	ldr	r3, [r3, #24]
 801ac08:	429a      	cmp	r2, r3
 801ac0a:	d811      	bhi.n	801ac30 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 801ac0c:	683b      	ldr	r3, [r7, #0]
 801ac0e:	f003 030f 	and.w	r3, r3, #15
 801ac12:	2201      	movs	r2, #1
 801ac14:	fa02 f303 	lsl.w	r3, r2, r3
 801ac18:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 801ac1a:	693b      	ldr	r3, [r7, #16]
 801ac1c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801ac20:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 801ac22:	68bb      	ldr	r3, [r7, #8]
 801ac24:	43db      	mvns	r3, r3
 801ac26:	6939      	ldr	r1, [r7, #16]
 801ac28:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 801ac2c:	4013      	ands	r3, r2
 801ac2e:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 801ac30:	2300      	movs	r3, #0
}
 801ac32:	4618      	mov	r0, r3
 801ac34:	3720      	adds	r7, #32
 801ac36:	46bd      	mov	sp, r7
 801ac38:	bd80      	pop	{r7, pc}
	...

0801ac3c <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 801ac3c:	b580      	push	{r7, lr}
 801ac3e:	b086      	sub	sp, #24
 801ac40:	af00      	add	r7, sp, #0
 801ac42:	6078      	str	r0, [r7, #4]
 801ac44:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 801ac46:	687b      	ldr	r3, [r7, #4]
 801ac48:	681b      	ldr	r3, [r3, #0]
 801ac4a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801ac4c:	697b      	ldr	r3, [r7, #20]
 801ac4e:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 801ac50:	697b      	ldr	r3, [r7, #20]
 801ac52:	333c      	adds	r3, #60	; 0x3c
 801ac54:	3304      	adds	r3, #4
 801ac56:	681b      	ldr	r3, [r3, #0]
 801ac58:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 801ac5a:	683b      	ldr	r3, [r7, #0]
 801ac5c:	015a      	lsls	r2, r3, #5
 801ac5e:	693b      	ldr	r3, [r7, #16]
 801ac60:	4413      	add	r3, r2
 801ac62:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801ac66:	689b      	ldr	r3, [r3, #8]
 801ac68:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 801ac6a:	687b      	ldr	r3, [r7, #4]
 801ac6c:	691b      	ldr	r3, [r3, #16]
 801ac6e:	2b01      	cmp	r3, #1
 801ac70:	f040 80a0 	bne.w	801adb4 <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 801ac74:	68bb      	ldr	r3, [r7, #8]
 801ac76:	f003 0308 	and.w	r3, r3, #8
 801ac7a:	2b00      	cmp	r3, #0
 801ac7c:	d015      	beq.n	801acaa <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 801ac7e:	68fb      	ldr	r3, [r7, #12]
 801ac80:	4a72      	ldr	r2, [pc, #456]	; (801ae4c <PCD_EP_OutXfrComplete_int+0x210>)
 801ac82:	4293      	cmp	r3, r2
 801ac84:	f240 80dd 	bls.w	801ae42 <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 801ac88:	68bb      	ldr	r3, [r7, #8]
 801ac8a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 801ac8e:	2b00      	cmp	r3, #0
 801ac90:	f000 80d7 	beq.w	801ae42 <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 801ac94:	683b      	ldr	r3, [r7, #0]
 801ac96:	015a      	lsls	r2, r3, #5
 801ac98:	693b      	ldr	r3, [r7, #16]
 801ac9a:	4413      	add	r3, r2
 801ac9c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801aca0:	461a      	mov	r2, r3
 801aca2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 801aca6:	6093      	str	r3, [r2, #8]
 801aca8:	e0cb      	b.n	801ae42 <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 801acaa:	68bb      	ldr	r3, [r7, #8]
 801acac:	f003 0320 	and.w	r3, r3, #32
 801acb0:	2b00      	cmp	r3, #0
 801acb2:	d009      	beq.n	801acc8 <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 801acb4:	683b      	ldr	r3, [r7, #0]
 801acb6:	015a      	lsls	r2, r3, #5
 801acb8:	693b      	ldr	r3, [r7, #16]
 801acba:	4413      	add	r3, r2
 801acbc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801acc0:	461a      	mov	r2, r3
 801acc2:	2320      	movs	r3, #32
 801acc4:	6093      	str	r3, [r2, #8]
 801acc6:	e0bc      	b.n	801ae42 <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 801acc8:	68bb      	ldr	r3, [r7, #8]
 801acca:	f003 0328 	and.w	r3, r3, #40	; 0x28
 801acce:	2b00      	cmp	r3, #0
 801acd0:	f040 80b7 	bne.w	801ae42 <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 801acd4:	68fb      	ldr	r3, [r7, #12]
 801acd6:	4a5d      	ldr	r2, [pc, #372]	; (801ae4c <PCD_EP_OutXfrComplete_int+0x210>)
 801acd8:	4293      	cmp	r3, r2
 801acda:	d90f      	bls.n	801acfc <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 801acdc:	68bb      	ldr	r3, [r7, #8]
 801acde:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 801ace2:	2b00      	cmp	r3, #0
 801ace4:	d00a      	beq.n	801acfc <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 801ace6:	683b      	ldr	r3, [r7, #0]
 801ace8:	015a      	lsls	r2, r3, #5
 801acea:	693b      	ldr	r3, [r7, #16]
 801acec:	4413      	add	r3, r2
 801acee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801acf2:	461a      	mov	r2, r3
 801acf4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 801acf8:	6093      	str	r3, [r2, #8]
 801acfa:	e0a2      	b.n	801ae42 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 801acfc:	6879      	ldr	r1, [r7, #4]
 801acfe:	683a      	ldr	r2, [r7, #0]
 801ad00:	4613      	mov	r3, r2
 801ad02:	00db      	lsls	r3, r3, #3
 801ad04:	1a9b      	subs	r3, r3, r2
 801ad06:	009b      	lsls	r3, r3, #2
 801ad08:	440b      	add	r3, r1
 801ad0a:	f503 7301 	add.w	r3, r3, #516	; 0x204
 801ad0e:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 801ad10:	683b      	ldr	r3, [r7, #0]
 801ad12:	0159      	lsls	r1, r3, #5
 801ad14:	693b      	ldr	r3, [r7, #16]
 801ad16:	440b      	add	r3, r1
 801ad18:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801ad1c:	691b      	ldr	r3, [r3, #16]
 801ad1e:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 801ad22:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 801ad24:	6878      	ldr	r0, [r7, #4]
 801ad26:	683a      	ldr	r2, [r7, #0]
 801ad28:	4613      	mov	r3, r2
 801ad2a:	00db      	lsls	r3, r3, #3
 801ad2c:	1a9b      	subs	r3, r3, r2
 801ad2e:	009b      	lsls	r3, r3, #2
 801ad30:	4403      	add	r3, r0
 801ad32:	f503 7305 	add.w	r3, r3, #532	; 0x214
 801ad36:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 801ad38:	6879      	ldr	r1, [r7, #4]
 801ad3a:	683a      	ldr	r2, [r7, #0]
 801ad3c:	4613      	mov	r3, r2
 801ad3e:	00db      	lsls	r3, r3, #3
 801ad40:	1a9b      	subs	r3, r3, r2
 801ad42:	009b      	lsls	r3, r3, #2
 801ad44:	440b      	add	r3, r1
 801ad46:	f503 7302 	add.w	r3, r3, #520	; 0x208
 801ad4a:	6819      	ldr	r1, [r3, #0]
 801ad4c:	6878      	ldr	r0, [r7, #4]
 801ad4e:	683a      	ldr	r2, [r7, #0]
 801ad50:	4613      	mov	r3, r2
 801ad52:	00db      	lsls	r3, r3, #3
 801ad54:	1a9b      	subs	r3, r3, r2
 801ad56:	009b      	lsls	r3, r3, #2
 801ad58:	4403      	add	r3, r0
 801ad5a:	f503 7301 	add.w	r3, r3, #516	; 0x204
 801ad5e:	681b      	ldr	r3, [r3, #0]
 801ad60:	4419      	add	r1, r3
 801ad62:	6878      	ldr	r0, [r7, #4]
 801ad64:	683a      	ldr	r2, [r7, #0]
 801ad66:	4613      	mov	r3, r2
 801ad68:	00db      	lsls	r3, r3, #3
 801ad6a:	1a9b      	subs	r3, r3, r2
 801ad6c:	009b      	lsls	r3, r3, #2
 801ad6e:	4403      	add	r3, r0
 801ad70:	f503 7302 	add.w	r3, r3, #520	; 0x208
 801ad74:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 801ad76:	683b      	ldr	r3, [r7, #0]
 801ad78:	2b00      	cmp	r3, #0
 801ad7a:	d114      	bne.n	801ada6 <PCD_EP_OutXfrComplete_int+0x16a>
 801ad7c:	6879      	ldr	r1, [r7, #4]
 801ad7e:	683a      	ldr	r2, [r7, #0]
 801ad80:	4613      	mov	r3, r2
 801ad82:	00db      	lsls	r3, r3, #3
 801ad84:	1a9b      	subs	r3, r3, r2
 801ad86:	009b      	lsls	r3, r3, #2
 801ad88:	440b      	add	r3, r1
 801ad8a:	f503 7304 	add.w	r3, r3, #528	; 0x210
 801ad8e:	681b      	ldr	r3, [r3, #0]
 801ad90:	2b00      	cmp	r3, #0
 801ad92:	d108      	bne.n	801ada6 <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 801ad94:	687b      	ldr	r3, [r7, #4]
 801ad96:	6818      	ldr	r0, [r3, #0]
 801ad98:	687b      	ldr	r3, [r7, #4]
 801ad9a:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 801ad9e:	461a      	mov	r2, r3
 801ada0:	2101      	movs	r1, #1
 801ada2:	f004 f9c5 	bl	801f130 <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 801ada6:	683b      	ldr	r3, [r7, #0]
 801ada8:	b2db      	uxtb	r3, r3
 801adaa:	4619      	mov	r1, r3
 801adac:	6878      	ldr	r0, [r7, #4]
 801adae:	f007 fbef 	bl	8022590 <HAL_PCD_DataOutStageCallback>
 801adb2:	e046      	b.n	801ae42 <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 801adb4:	68fb      	ldr	r3, [r7, #12]
 801adb6:	4a26      	ldr	r2, [pc, #152]	; (801ae50 <PCD_EP_OutXfrComplete_int+0x214>)
 801adb8:	4293      	cmp	r3, r2
 801adba:	d124      	bne.n	801ae06 <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 801adbc:	68bb      	ldr	r3, [r7, #8]
 801adbe:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 801adc2:	2b00      	cmp	r3, #0
 801adc4:	d00a      	beq.n	801addc <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 801adc6:	683b      	ldr	r3, [r7, #0]
 801adc8:	015a      	lsls	r2, r3, #5
 801adca:	693b      	ldr	r3, [r7, #16]
 801adcc:	4413      	add	r3, r2
 801adce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801add2:	461a      	mov	r2, r3
 801add4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 801add8:	6093      	str	r3, [r2, #8]
 801adda:	e032      	b.n	801ae42 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 801addc:	68bb      	ldr	r3, [r7, #8]
 801adde:	f003 0320 	and.w	r3, r3, #32
 801ade2:	2b00      	cmp	r3, #0
 801ade4:	d008      	beq.n	801adf8 <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 801ade6:	683b      	ldr	r3, [r7, #0]
 801ade8:	015a      	lsls	r2, r3, #5
 801adea:	693b      	ldr	r3, [r7, #16]
 801adec:	4413      	add	r3, r2
 801adee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801adf2:	461a      	mov	r2, r3
 801adf4:	2320      	movs	r3, #32
 801adf6:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 801adf8:	683b      	ldr	r3, [r7, #0]
 801adfa:	b2db      	uxtb	r3, r3
 801adfc:	4619      	mov	r1, r3
 801adfe:	6878      	ldr	r0, [r7, #4]
 801ae00:	f007 fbc6 	bl	8022590 <HAL_PCD_DataOutStageCallback>
 801ae04:	e01d      	b.n	801ae42 <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 801ae06:	683b      	ldr	r3, [r7, #0]
 801ae08:	2b00      	cmp	r3, #0
 801ae0a:	d114      	bne.n	801ae36 <PCD_EP_OutXfrComplete_int+0x1fa>
 801ae0c:	6879      	ldr	r1, [r7, #4]
 801ae0e:	683a      	ldr	r2, [r7, #0]
 801ae10:	4613      	mov	r3, r2
 801ae12:	00db      	lsls	r3, r3, #3
 801ae14:	1a9b      	subs	r3, r3, r2
 801ae16:	009b      	lsls	r3, r3, #2
 801ae18:	440b      	add	r3, r1
 801ae1a:	f503 7304 	add.w	r3, r3, #528	; 0x210
 801ae1e:	681b      	ldr	r3, [r3, #0]
 801ae20:	2b00      	cmp	r3, #0
 801ae22:	d108      	bne.n	801ae36 <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 801ae24:	687b      	ldr	r3, [r7, #4]
 801ae26:	6818      	ldr	r0, [r3, #0]
 801ae28:	687b      	ldr	r3, [r7, #4]
 801ae2a:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 801ae2e:	461a      	mov	r2, r3
 801ae30:	2100      	movs	r1, #0
 801ae32:	f004 f97d 	bl	801f130 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 801ae36:	683b      	ldr	r3, [r7, #0]
 801ae38:	b2db      	uxtb	r3, r3
 801ae3a:	4619      	mov	r1, r3
 801ae3c:	6878      	ldr	r0, [r7, #4]
 801ae3e:	f007 fba7 	bl	8022590 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 801ae42:	2300      	movs	r3, #0
}
 801ae44:	4618      	mov	r0, r3
 801ae46:	3718      	adds	r7, #24
 801ae48:	46bd      	mov	sp, r7
 801ae4a:	bd80      	pop	{r7, pc}
 801ae4c:	4f54300a 	.word	0x4f54300a
 801ae50:	4f54310a 	.word	0x4f54310a

0801ae54 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 801ae54:	b580      	push	{r7, lr}
 801ae56:	b086      	sub	sp, #24
 801ae58:	af00      	add	r7, sp, #0
 801ae5a:	6078      	str	r0, [r7, #4]
 801ae5c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 801ae5e:	687b      	ldr	r3, [r7, #4]
 801ae60:	681b      	ldr	r3, [r3, #0]
 801ae62:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801ae64:	697b      	ldr	r3, [r7, #20]
 801ae66:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 801ae68:	697b      	ldr	r3, [r7, #20]
 801ae6a:	333c      	adds	r3, #60	; 0x3c
 801ae6c:	3304      	adds	r3, #4
 801ae6e:	681b      	ldr	r3, [r3, #0]
 801ae70:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 801ae72:	683b      	ldr	r3, [r7, #0]
 801ae74:	015a      	lsls	r2, r3, #5
 801ae76:	693b      	ldr	r3, [r7, #16]
 801ae78:	4413      	add	r3, r2
 801ae7a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801ae7e:	689b      	ldr	r3, [r3, #8]
 801ae80:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 801ae82:	68fb      	ldr	r3, [r7, #12]
 801ae84:	4a15      	ldr	r2, [pc, #84]	; (801aedc <PCD_EP_OutSetupPacket_int+0x88>)
 801ae86:	4293      	cmp	r3, r2
 801ae88:	d90e      	bls.n	801aea8 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 801ae8a:	68bb      	ldr	r3, [r7, #8]
 801ae8c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 801ae90:	2b00      	cmp	r3, #0
 801ae92:	d009      	beq.n	801aea8 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 801ae94:	683b      	ldr	r3, [r7, #0]
 801ae96:	015a      	lsls	r2, r3, #5
 801ae98:	693b      	ldr	r3, [r7, #16]
 801ae9a:	4413      	add	r3, r2
 801ae9c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801aea0:	461a      	mov	r2, r3
 801aea2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 801aea6:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 801aea8:	6878      	ldr	r0, [r7, #4]
 801aeaa:	f007 fb5f 	bl	802256c <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 801aeae:	68fb      	ldr	r3, [r7, #12]
 801aeb0:	4a0a      	ldr	r2, [pc, #40]	; (801aedc <PCD_EP_OutSetupPacket_int+0x88>)
 801aeb2:	4293      	cmp	r3, r2
 801aeb4:	d90c      	bls.n	801aed0 <PCD_EP_OutSetupPacket_int+0x7c>
 801aeb6:	687b      	ldr	r3, [r7, #4]
 801aeb8:	691b      	ldr	r3, [r3, #16]
 801aeba:	2b01      	cmp	r3, #1
 801aebc:	d108      	bne.n	801aed0 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 801aebe:	687b      	ldr	r3, [r7, #4]
 801aec0:	6818      	ldr	r0, [r3, #0]
 801aec2:	687b      	ldr	r3, [r7, #4]
 801aec4:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 801aec8:	461a      	mov	r2, r3
 801aeca:	2101      	movs	r1, #1
 801aecc:	f004 f930 	bl	801f130 <USB_EP0_OutStart>
  }

  return HAL_OK;
 801aed0:	2300      	movs	r3, #0
}
 801aed2:	4618      	mov	r0, r3
 801aed4:	3718      	adds	r7, #24
 801aed6:	46bd      	mov	sp, r7
 801aed8:	bd80      	pop	{r7, pc}
 801aeda:	bf00      	nop
 801aedc:	4f54300a 	.word	0x4f54300a

0801aee0 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 801aee0:	b480      	push	{r7}
 801aee2:	b085      	sub	sp, #20
 801aee4:	af00      	add	r7, sp, #0
 801aee6:	6078      	str	r0, [r7, #4]
 801aee8:	460b      	mov	r3, r1
 801aeea:	70fb      	strb	r3, [r7, #3]
 801aeec:	4613      	mov	r3, r2
 801aeee:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 801aef0:	687b      	ldr	r3, [r7, #4]
 801aef2:	681b      	ldr	r3, [r3, #0]
 801aef4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801aef6:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 801aef8:	78fb      	ldrb	r3, [r7, #3]
 801aefa:	2b00      	cmp	r3, #0
 801aefc:	d107      	bne.n	801af0e <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 801aefe:	883b      	ldrh	r3, [r7, #0]
 801af00:	0419      	lsls	r1, r3, #16
 801af02:	687b      	ldr	r3, [r7, #4]
 801af04:	681b      	ldr	r3, [r3, #0]
 801af06:	68ba      	ldr	r2, [r7, #8]
 801af08:	430a      	orrs	r2, r1
 801af0a:	629a      	str	r2, [r3, #40]	; 0x28
 801af0c:	e028      	b.n	801af60 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 801af0e:	687b      	ldr	r3, [r7, #4]
 801af10:	681b      	ldr	r3, [r3, #0]
 801af12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801af14:	0c1b      	lsrs	r3, r3, #16
 801af16:	68ba      	ldr	r2, [r7, #8]
 801af18:	4413      	add	r3, r2
 801af1a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 801af1c:	2300      	movs	r3, #0
 801af1e:	73fb      	strb	r3, [r7, #15]
 801af20:	e00d      	b.n	801af3e <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 801af22:	687b      	ldr	r3, [r7, #4]
 801af24:	681a      	ldr	r2, [r3, #0]
 801af26:	7bfb      	ldrb	r3, [r7, #15]
 801af28:	3340      	adds	r3, #64	; 0x40
 801af2a:	009b      	lsls	r3, r3, #2
 801af2c:	4413      	add	r3, r2
 801af2e:	685b      	ldr	r3, [r3, #4]
 801af30:	0c1b      	lsrs	r3, r3, #16
 801af32:	68ba      	ldr	r2, [r7, #8]
 801af34:	4413      	add	r3, r2
 801af36:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 801af38:	7bfb      	ldrb	r3, [r7, #15]
 801af3a:	3301      	adds	r3, #1
 801af3c:	73fb      	strb	r3, [r7, #15]
 801af3e:	7bfa      	ldrb	r2, [r7, #15]
 801af40:	78fb      	ldrb	r3, [r7, #3]
 801af42:	3b01      	subs	r3, #1
 801af44:	429a      	cmp	r2, r3
 801af46:	d3ec      	bcc.n	801af22 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 801af48:	883b      	ldrh	r3, [r7, #0]
 801af4a:	0418      	lsls	r0, r3, #16
 801af4c:	687b      	ldr	r3, [r7, #4]
 801af4e:	6819      	ldr	r1, [r3, #0]
 801af50:	78fb      	ldrb	r3, [r7, #3]
 801af52:	3b01      	subs	r3, #1
 801af54:	68ba      	ldr	r2, [r7, #8]
 801af56:	4302      	orrs	r2, r0
 801af58:	3340      	adds	r3, #64	; 0x40
 801af5a:	009b      	lsls	r3, r3, #2
 801af5c:	440b      	add	r3, r1
 801af5e:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 801af60:	2300      	movs	r3, #0
}
 801af62:	4618      	mov	r0, r3
 801af64:	3714      	adds	r7, #20
 801af66:	46bd      	mov	sp, r7
 801af68:	f85d 7b04 	ldr.w	r7, [sp], #4
 801af6c:	4770      	bx	lr

0801af6e <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 801af6e:	b480      	push	{r7}
 801af70:	b083      	sub	sp, #12
 801af72:	af00      	add	r7, sp, #0
 801af74:	6078      	str	r0, [r7, #4]
 801af76:	460b      	mov	r3, r1
 801af78:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 801af7a:	687b      	ldr	r3, [r7, #4]
 801af7c:	681b      	ldr	r3, [r3, #0]
 801af7e:	887a      	ldrh	r2, [r7, #2]
 801af80:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 801af82:	2300      	movs	r3, #0
}
 801af84:	4618      	mov	r0, r3
 801af86:	370c      	adds	r7, #12
 801af88:	46bd      	mov	sp, r7
 801af8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801af8e:	4770      	bx	lr

0801af90 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 801af90:	b480      	push	{r7}
 801af92:	b085      	sub	sp, #20
 801af94:	af00      	add	r7, sp, #0
 801af96:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 801af98:	687b      	ldr	r3, [r7, #4]
 801af9a:	681b      	ldr	r3, [r3, #0]
 801af9c:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 801af9e:	687b      	ldr	r3, [r7, #4]
 801afa0:	2201      	movs	r2, #1
 801afa2:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 801afa6:	687b      	ldr	r3, [r7, #4]
 801afa8:	2200      	movs	r2, #0
 801afaa:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 801afae:	68fb      	ldr	r3, [r7, #12]
 801afb0:	699b      	ldr	r3, [r3, #24]
 801afb2:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 801afb6:	68fb      	ldr	r3, [r7, #12]
 801afb8:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 801afba:	68fb      	ldr	r3, [r7, #12]
 801afbc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801afbe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 801afc2:	f043 0303 	orr.w	r3, r3, #3
 801afc6:	68fa      	ldr	r2, [r7, #12]
 801afc8:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 801afca:	2300      	movs	r3, #0
}
 801afcc:	4618      	mov	r0, r3
 801afce:	3714      	adds	r7, #20
 801afd0:	46bd      	mov	sp, r7
 801afd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 801afd6:	4770      	bx	lr

0801afd8 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 801afd8:	b580      	push	{r7, lr}
 801afda:	b082      	sub	sp, #8
 801afdc:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 801afde:	2300      	movs	r3, #0
 801afe0:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 801afe2:	2300      	movs	r3, #0
 801afe4:	603b      	str	r3, [r7, #0]
 801afe6:	4b20      	ldr	r3, [pc, #128]	; (801b068 <HAL_PWREx_EnableOverDrive+0x90>)
 801afe8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801afea:	4a1f      	ldr	r2, [pc, #124]	; (801b068 <HAL_PWREx_EnableOverDrive+0x90>)
 801afec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 801aff0:	6413      	str	r3, [r2, #64]	; 0x40
 801aff2:	4b1d      	ldr	r3, [pc, #116]	; (801b068 <HAL_PWREx_EnableOverDrive+0x90>)
 801aff4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801aff6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 801affa:	603b      	str	r3, [r7, #0]
 801affc:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 801affe:	4b1b      	ldr	r3, [pc, #108]	; (801b06c <HAL_PWREx_EnableOverDrive+0x94>)
 801b000:	2201      	movs	r2, #1
 801b002:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 801b004:	f7fd f9e8 	bl	80183d8 <HAL_GetTick>
 801b008:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 801b00a:	e009      	b.n	801b020 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 801b00c:	f7fd f9e4 	bl	80183d8 <HAL_GetTick>
 801b010:	4602      	mov	r2, r0
 801b012:	687b      	ldr	r3, [r7, #4]
 801b014:	1ad3      	subs	r3, r2, r3
 801b016:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 801b01a:	d901      	bls.n	801b020 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 801b01c:	2303      	movs	r3, #3
 801b01e:	e01f      	b.n	801b060 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 801b020:	4b13      	ldr	r3, [pc, #76]	; (801b070 <HAL_PWREx_EnableOverDrive+0x98>)
 801b022:	685b      	ldr	r3, [r3, #4]
 801b024:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 801b028:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801b02c:	d1ee      	bne.n	801b00c <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 801b02e:	4b11      	ldr	r3, [pc, #68]	; (801b074 <HAL_PWREx_EnableOverDrive+0x9c>)
 801b030:	2201      	movs	r2, #1
 801b032:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 801b034:	f7fd f9d0 	bl	80183d8 <HAL_GetTick>
 801b038:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 801b03a:	e009      	b.n	801b050 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 801b03c:	f7fd f9cc 	bl	80183d8 <HAL_GetTick>
 801b040:	4602      	mov	r2, r0
 801b042:	687b      	ldr	r3, [r7, #4]
 801b044:	1ad3      	subs	r3, r2, r3
 801b046:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 801b04a:	d901      	bls.n	801b050 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 801b04c:	2303      	movs	r3, #3
 801b04e:	e007      	b.n	801b060 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 801b050:	4b07      	ldr	r3, [pc, #28]	; (801b070 <HAL_PWREx_EnableOverDrive+0x98>)
 801b052:	685b      	ldr	r3, [r3, #4]
 801b054:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801b058:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 801b05c:	d1ee      	bne.n	801b03c <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 801b05e:	2300      	movs	r3, #0
}
 801b060:	4618      	mov	r0, r3
 801b062:	3708      	adds	r7, #8
 801b064:	46bd      	mov	sp, r7
 801b066:	bd80      	pop	{r7, pc}
 801b068:	40023800 	.word	0x40023800
 801b06c:	420e0040 	.word	0x420e0040
 801b070:	40007000 	.word	0x40007000
 801b074:	420e0044 	.word	0x420e0044

0801b078 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 801b078:	b580      	push	{r7, lr}
 801b07a:	b084      	sub	sp, #16
 801b07c:	af00      	add	r7, sp, #0
 801b07e:	6078      	str	r0, [r7, #4]
 801b080:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 801b082:	687b      	ldr	r3, [r7, #4]
 801b084:	2b00      	cmp	r3, #0
 801b086:	d101      	bne.n	801b08c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 801b088:	2301      	movs	r3, #1
 801b08a:	e0cc      	b.n	801b226 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 801b08c:	4b68      	ldr	r3, [pc, #416]	; (801b230 <HAL_RCC_ClockConfig+0x1b8>)
 801b08e:	681b      	ldr	r3, [r3, #0]
 801b090:	f003 030f 	and.w	r3, r3, #15
 801b094:	683a      	ldr	r2, [r7, #0]
 801b096:	429a      	cmp	r2, r3
 801b098:	d90c      	bls.n	801b0b4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 801b09a:	4b65      	ldr	r3, [pc, #404]	; (801b230 <HAL_RCC_ClockConfig+0x1b8>)
 801b09c:	683a      	ldr	r2, [r7, #0]
 801b09e:	b2d2      	uxtb	r2, r2
 801b0a0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 801b0a2:	4b63      	ldr	r3, [pc, #396]	; (801b230 <HAL_RCC_ClockConfig+0x1b8>)
 801b0a4:	681b      	ldr	r3, [r3, #0]
 801b0a6:	f003 030f 	and.w	r3, r3, #15
 801b0aa:	683a      	ldr	r2, [r7, #0]
 801b0ac:	429a      	cmp	r2, r3
 801b0ae:	d001      	beq.n	801b0b4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 801b0b0:	2301      	movs	r3, #1
 801b0b2:	e0b8      	b.n	801b226 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 801b0b4:	687b      	ldr	r3, [r7, #4]
 801b0b6:	681b      	ldr	r3, [r3, #0]
 801b0b8:	f003 0302 	and.w	r3, r3, #2
 801b0bc:	2b00      	cmp	r3, #0
 801b0be:	d020      	beq.n	801b102 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 801b0c0:	687b      	ldr	r3, [r7, #4]
 801b0c2:	681b      	ldr	r3, [r3, #0]
 801b0c4:	f003 0304 	and.w	r3, r3, #4
 801b0c8:	2b00      	cmp	r3, #0
 801b0ca:	d005      	beq.n	801b0d8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 801b0cc:	4b59      	ldr	r3, [pc, #356]	; (801b234 <HAL_RCC_ClockConfig+0x1bc>)
 801b0ce:	689b      	ldr	r3, [r3, #8]
 801b0d0:	4a58      	ldr	r2, [pc, #352]	; (801b234 <HAL_RCC_ClockConfig+0x1bc>)
 801b0d2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 801b0d6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 801b0d8:	687b      	ldr	r3, [r7, #4]
 801b0da:	681b      	ldr	r3, [r3, #0]
 801b0dc:	f003 0308 	and.w	r3, r3, #8
 801b0e0:	2b00      	cmp	r3, #0
 801b0e2:	d005      	beq.n	801b0f0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 801b0e4:	4b53      	ldr	r3, [pc, #332]	; (801b234 <HAL_RCC_ClockConfig+0x1bc>)
 801b0e6:	689b      	ldr	r3, [r3, #8]
 801b0e8:	4a52      	ldr	r2, [pc, #328]	; (801b234 <HAL_RCC_ClockConfig+0x1bc>)
 801b0ea:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 801b0ee:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 801b0f0:	4b50      	ldr	r3, [pc, #320]	; (801b234 <HAL_RCC_ClockConfig+0x1bc>)
 801b0f2:	689b      	ldr	r3, [r3, #8]
 801b0f4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 801b0f8:	687b      	ldr	r3, [r7, #4]
 801b0fa:	689b      	ldr	r3, [r3, #8]
 801b0fc:	494d      	ldr	r1, [pc, #308]	; (801b234 <HAL_RCC_ClockConfig+0x1bc>)
 801b0fe:	4313      	orrs	r3, r2
 801b100:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 801b102:	687b      	ldr	r3, [r7, #4]
 801b104:	681b      	ldr	r3, [r3, #0]
 801b106:	f003 0301 	and.w	r3, r3, #1
 801b10a:	2b00      	cmp	r3, #0
 801b10c:	d044      	beq.n	801b198 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 801b10e:	687b      	ldr	r3, [r7, #4]
 801b110:	685b      	ldr	r3, [r3, #4]
 801b112:	2b01      	cmp	r3, #1
 801b114:	d107      	bne.n	801b126 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 801b116:	4b47      	ldr	r3, [pc, #284]	; (801b234 <HAL_RCC_ClockConfig+0x1bc>)
 801b118:	681b      	ldr	r3, [r3, #0]
 801b11a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801b11e:	2b00      	cmp	r3, #0
 801b120:	d119      	bne.n	801b156 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 801b122:	2301      	movs	r3, #1
 801b124:	e07f      	b.n	801b226 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 801b126:	687b      	ldr	r3, [r7, #4]
 801b128:	685b      	ldr	r3, [r3, #4]
 801b12a:	2b02      	cmp	r3, #2
 801b12c:	d003      	beq.n	801b136 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 801b12e:	687b      	ldr	r3, [r7, #4]
 801b130:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 801b132:	2b03      	cmp	r3, #3
 801b134:	d107      	bne.n	801b146 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 801b136:	4b3f      	ldr	r3, [pc, #252]	; (801b234 <HAL_RCC_ClockConfig+0x1bc>)
 801b138:	681b      	ldr	r3, [r3, #0]
 801b13a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 801b13e:	2b00      	cmp	r3, #0
 801b140:	d109      	bne.n	801b156 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 801b142:	2301      	movs	r3, #1
 801b144:	e06f      	b.n	801b226 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 801b146:	4b3b      	ldr	r3, [pc, #236]	; (801b234 <HAL_RCC_ClockConfig+0x1bc>)
 801b148:	681b      	ldr	r3, [r3, #0]
 801b14a:	f003 0302 	and.w	r3, r3, #2
 801b14e:	2b00      	cmp	r3, #0
 801b150:	d101      	bne.n	801b156 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 801b152:	2301      	movs	r3, #1
 801b154:	e067      	b.n	801b226 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 801b156:	4b37      	ldr	r3, [pc, #220]	; (801b234 <HAL_RCC_ClockConfig+0x1bc>)
 801b158:	689b      	ldr	r3, [r3, #8]
 801b15a:	f023 0203 	bic.w	r2, r3, #3
 801b15e:	687b      	ldr	r3, [r7, #4]
 801b160:	685b      	ldr	r3, [r3, #4]
 801b162:	4934      	ldr	r1, [pc, #208]	; (801b234 <HAL_RCC_ClockConfig+0x1bc>)
 801b164:	4313      	orrs	r3, r2
 801b166:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 801b168:	f7fd f936 	bl	80183d8 <HAL_GetTick>
 801b16c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 801b16e:	e00a      	b.n	801b186 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 801b170:	f7fd f932 	bl	80183d8 <HAL_GetTick>
 801b174:	4602      	mov	r2, r0
 801b176:	68fb      	ldr	r3, [r7, #12]
 801b178:	1ad3      	subs	r3, r2, r3
 801b17a:	f241 3288 	movw	r2, #5000	; 0x1388
 801b17e:	4293      	cmp	r3, r2
 801b180:	d901      	bls.n	801b186 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 801b182:	2303      	movs	r3, #3
 801b184:	e04f      	b.n	801b226 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 801b186:	4b2b      	ldr	r3, [pc, #172]	; (801b234 <HAL_RCC_ClockConfig+0x1bc>)
 801b188:	689b      	ldr	r3, [r3, #8]
 801b18a:	f003 020c 	and.w	r2, r3, #12
 801b18e:	687b      	ldr	r3, [r7, #4]
 801b190:	685b      	ldr	r3, [r3, #4]
 801b192:	009b      	lsls	r3, r3, #2
 801b194:	429a      	cmp	r2, r3
 801b196:	d1eb      	bne.n	801b170 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 801b198:	4b25      	ldr	r3, [pc, #148]	; (801b230 <HAL_RCC_ClockConfig+0x1b8>)
 801b19a:	681b      	ldr	r3, [r3, #0]
 801b19c:	f003 030f 	and.w	r3, r3, #15
 801b1a0:	683a      	ldr	r2, [r7, #0]
 801b1a2:	429a      	cmp	r2, r3
 801b1a4:	d20c      	bcs.n	801b1c0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 801b1a6:	4b22      	ldr	r3, [pc, #136]	; (801b230 <HAL_RCC_ClockConfig+0x1b8>)
 801b1a8:	683a      	ldr	r2, [r7, #0]
 801b1aa:	b2d2      	uxtb	r2, r2
 801b1ac:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 801b1ae:	4b20      	ldr	r3, [pc, #128]	; (801b230 <HAL_RCC_ClockConfig+0x1b8>)
 801b1b0:	681b      	ldr	r3, [r3, #0]
 801b1b2:	f003 030f 	and.w	r3, r3, #15
 801b1b6:	683a      	ldr	r2, [r7, #0]
 801b1b8:	429a      	cmp	r2, r3
 801b1ba:	d001      	beq.n	801b1c0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 801b1bc:	2301      	movs	r3, #1
 801b1be:	e032      	b.n	801b226 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 801b1c0:	687b      	ldr	r3, [r7, #4]
 801b1c2:	681b      	ldr	r3, [r3, #0]
 801b1c4:	f003 0304 	and.w	r3, r3, #4
 801b1c8:	2b00      	cmp	r3, #0
 801b1ca:	d008      	beq.n	801b1de <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 801b1cc:	4b19      	ldr	r3, [pc, #100]	; (801b234 <HAL_RCC_ClockConfig+0x1bc>)
 801b1ce:	689b      	ldr	r3, [r3, #8]
 801b1d0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 801b1d4:	687b      	ldr	r3, [r7, #4]
 801b1d6:	68db      	ldr	r3, [r3, #12]
 801b1d8:	4916      	ldr	r1, [pc, #88]	; (801b234 <HAL_RCC_ClockConfig+0x1bc>)
 801b1da:	4313      	orrs	r3, r2
 801b1dc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 801b1de:	687b      	ldr	r3, [r7, #4]
 801b1e0:	681b      	ldr	r3, [r3, #0]
 801b1e2:	f003 0308 	and.w	r3, r3, #8
 801b1e6:	2b00      	cmp	r3, #0
 801b1e8:	d009      	beq.n	801b1fe <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 801b1ea:	4b12      	ldr	r3, [pc, #72]	; (801b234 <HAL_RCC_ClockConfig+0x1bc>)
 801b1ec:	689b      	ldr	r3, [r3, #8]
 801b1ee:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 801b1f2:	687b      	ldr	r3, [r7, #4]
 801b1f4:	691b      	ldr	r3, [r3, #16]
 801b1f6:	00db      	lsls	r3, r3, #3
 801b1f8:	490e      	ldr	r1, [pc, #56]	; (801b234 <HAL_RCC_ClockConfig+0x1bc>)
 801b1fa:	4313      	orrs	r3, r2
 801b1fc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 801b1fe:	f000 fb57 	bl	801b8b0 <HAL_RCC_GetSysClockFreq>
 801b202:	4602      	mov	r2, r0
 801b204:	4b0b      	ldr	r3, [pc, #44]	; (801b234 <HAL_RCC_ClockConfig+0x1bc>)
 801b206:	689b      	ldr	r3, [r3, #8]
 801b208:	091b      	lsrs	r3, r3, #4
 801b20a:	f003 030f 	and.w	r3, r3, #15
 801b20e:	490a      	ldr	r1, [pc, #40]	; (801b238 <HAL_RCC_ClockConfig+0x1c0>)
 801b210:	5ccb      	ldrb	r3, [r1, r3]
 801b212:	fa22 f303 	lsr.w	r3, r2, r3
 801b216:	4a09      	ldr	r2, [pc, #36]	; (801b23c <HAL_RCC_ClockConfig+0x1c4>)
 801b218:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 801b21a:	4b09      	ldr	r3, [pc, #36]	; (801b240 <HAL_RCC_ClockConfig+0x1c8>)
 801b21c:	681b      	ldr	r3, [r3, #0]
 801b21e:	4618      	mov	r0, r3
 801b220:	f7fd f896 	bl	8018350 <HAL_InitTick>

  return HAL_OK;
 801b224:	2300      	movs	r3, #0
}
 801b226:	4618      	mov	r0, r3
 801b228:	3710      	adds	r7, #16
 801b22a:	46bd      	mov	sp, r7
 801b22c:	bd80      	pop	{r7, pc}
 801b22e:	bf00      	nop
 801b230:	40023c00 	.word	0x40023c00
 801b234:	40023800 	.word	0x40023800
 801b238:	08002350 	.word	0x08002350
 801b23c:	20000588 	.word	0x20000588
 801b240:	2000058c 	.word	0x2000058c

0801b244 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 801b244:	b480      	push	{r7}
 801b246:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 801b248:	4b03      	ldr	r3, [pc, #12]	; (801b258 <HAL_RCC_GetHCLKFreq+0x14>)
 801b24a:	681b      	ldr	r3, [r3, #0]
}
 801b24c:	4618      	mov	r0, r3
 801b24e:	46bd      	mov	sp, r7
 801b250:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b254:	4770      	bx	lr
 801b256:	bf00      	nop
 801b258:	20000588 	.word	0x20000588

0801b25c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 801b25c:	b580      	push	{r7, lr}
 801b25e:	b08c      	sub	sp, #48	; 0x30
 801b260:	af00      	add	r7, sp, #0
 801b262:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 801b264:	2300      	movs	r3, #0
 801b266:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmpreg1 = 0U;
 801b268:	2300      	movs	r3, #0
 801b26a:	623b      	str	r3, [r7, #32]
  uint32_t plli2sp = 0U;
 801b26c:	2300      	movs	r3, #0
 801b26e:	61fb      	str	r3, [r7, #28]
  uint32_t plli2sq = 0U;
 801b270:	2300      	movs	r3, #0
 801b272:	61bb      	str	r3, [r7, #24]
  uint32_t plli2sr = 0U;
 801b274:	2300      	movs	r3, #0
 801b276:	617b      	str	r3, [r7, #20]
  uint32_t pllsaip = 0U;
 801b278:	2300      	movs	r3, #0
 801b27a:	613b      	str	r3, [r7, #16]
  uint32_t pllsaiq = 0U;
 801b27c:	2300      	movs	r3, #0
 801b27e:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0U;
 801b280:	2300      	movs	r3, #0
 801b282:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t pllsaiused = 0U;
 801b284:	2300      	movs	r3, #0
 801b286:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the peripheral clock selection parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------ I2S APB1 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 801b288:	687b      	ldr	r3, [r7, #4]
 801b28a:	681b      	ldr	r3, [r3, #0]
 801b28c:	f003 0301 	and.w	r3, r3, #1
 801b290:	2b00      	cmp	r3, #0
 801b292:	d010      	beq.n	801b2b6 <HAL_RCCEx_PeriphCLKConfig+0x5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB1CLKSOURCE(PeriphClkInit->I2sApb1ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 801b294:	4b6f      	ldr	r3, [pc, #444]	; (801b454 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 801b296:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801b29a:	f023 62c0 	bic.w	r2, r3, #100663296	; 0x6000000
 801b29e:	687b      	ldr	r3, [r7, #4]
 801b2a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801b2a2:	496c      	ldr	r1, [pc, #432]	; (801b454 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 801b2a4:	4313      	orrs	r3, r2
 801b2a6:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
 801b2aa:	687b      	ldr	r3, [r7, #4]
 801b2ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801b2ae:	2b00      	cmp	r3, #0
 801b2b0:	d101      	bne.n	801b2b6 <HAL_RCCEx_PeriphCLKConfig+0x5a>
    {
      plli2sused = 1U;
 801b2b2:	2301      	movs	r3, #1
 801b2b4:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- I2S APB2 configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == (RCC_PERIPHCLK_I2S_APB2))
 801b2b6:	687b      	ldr	r3, [r7, #4]
 801b2b8:	681b      	ldr	r3, [r3, #0]
 801b2ba:	f003 0302 	and.w	r3, r3, #2
 801b2be:	2b00      	cmp	r3, #0
 801b2c0:	d010      	beq.n	801b2e4 <HAL_RCCEx_PeriphCLKConfig+0x88>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB2CLKSOURCE(PeriphClkInit->I2sApb2ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 801b2c2:	4b64      	ldr	r3, [pc, #400]	; (801b454 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 801b2c4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801b2c8:	f023 52c0 	bic.w	r2, r3, #402653184	; 0x18000000
 801b2cc:	687b      	ldr	r3, [r7, #4]
 801b2ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801b2d0:	4960      	ldr	r1, [pc, #384]	; (801b454 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 801b2d2:	4313      	orrs	r3, r2
 801b2d4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)
 801b2d8:	687b      	ldr	r3, [r7, #4]
 801b2da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801b2dc:	2b00      	cmp	r3, #0
 801b2de:	d101      	bne.n	801b2e4 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      plli2sused = 1U;
 801b2e0:	2301      	movs	r3, #1
 801b2e2:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*--------------------------- SAI1 configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 801b2e4:	687b      	ldr	r3, [r7, #4]
 801b2e6:	681b      	ldr	r3, [r3, #0]
 801b2e8:	f003 0304 	and.w	r3, r3, #4
 801b2ec:	2b00      	cmp	r3, #0
 801b2ee:	d017      	beq.n	801b320 <HAL_RCCEx_PeriphCLKConfig+0xc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 801b2f0:	4b58      	ldr	r3, [pc, #352]	; (801b454 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 801b2f2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801b2f6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 801b2fa:	687b      	ldr	r3, [r7, #4]
 801b2fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801b2fe:	4955      	ldr	r1, [pc, #340]	; (801b454 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 801b300:	4313      	orrs	r3, r2
 801b302:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 801b306:	687b      	ldr	r3, [r7, #4]
 801b308:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801b30a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 801b30e:	d101      	bne.n	801b314 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      plli2sused = 1U;
 801b310:	2301      	movs	r3, #1
 801b312:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 801b314:	687b      	ldr	r3, [r7, #4]
 801b316:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801b318:	2b00      	cmp	r3, #0
 801b31a:	d101      	bne.n	801b320 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      pllsaiused = 1U;
 801b31c:	2301      	movs	r3, #1
 801b31e:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------------- SAI2 configuration ----------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 801b320:	687b      	ldr	r3, [r7, #4]
 801b322:	681b      	ldr	r3, [r3, #0]
 801b324:	f003 0308 	and.w	r3, r3, #8
 801b328:	2b00      	cmp	r3, #0
 801b32a:	d017      	beq.n	801b35c <HAL_RCCEx_PeriphCLKConfig+0x100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 801b32c:	4b49      	ldr	r3, [pc, #292]	; (801b454 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 801b32e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801b332:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 801b336:	687b      	ldr	r3, [r7, #4]
 801b338:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801b33a:	4946      	ldr	r1, [pc, #280]	; (801b454 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 801b33c:	4313      	orrs	r3, r2
 801b33e:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 801b342:	687b      	ldr	r3, [r7, #4]
 801b344:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801b346:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 801b34a:	d101      	bne.n	801b350 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      plli2sused = 1U;
 801b34c:	2301      	movs	r3, #1
 801b34e:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 801b350:	687b      	ldr	r3, [r7, #4]
 801b352:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801b354:	2b00      	cmp	r3, #0
 801b356:	d101      	bne.n	801b35c <HAL_RCCEx_PeriphCLKConfig+0x100>
    {
      pllsaiused = 1U;
 801b358:	2301      	movs	r3, #1
 801b35a:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- RTC configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 801b35c:	687b      	ldr	r3, [r7, #4]
 801b35e:	681b      	ldr	r3, [r3, #0]
 801b360:	f003 0320 	and.w	r3, r3, #32
 801b364:	2b00      	cmp	r3, #0
 801b366:	f000 808a 	beq.w	801b47e <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 801b36a:	2300      	movs	r3, #0
 801b36c:	60bb      	str	r3, [r7, #8]
 801b36e:	4b39      	ldr	r3, [pc, #228]	; (801b454 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 801b370:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801b372:	4a38      	ldr	r2, [pc, #224]	; (801b454 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 801b374:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 801b378:	6413      	str	r3, [r2, #64]	; 0x40
 801b37a:	4b36      	ldr	r3, [pc, #216]	; (801b454 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 801b37c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801b37e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 801b382:	60bb      	str	r3, [r7, #8]
 801b384:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 801b386:	4b34      	ldr	r3, [pc, #208]	; (801b458 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 801b388:	681b      	ldr	r3, [r3, #0]
 801b38a:	4a33      	ldr	r2, [pc, #204]	; (801b458 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 801b38c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 801b390:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 801b392:	f7fd f821 	bl	80183d8 <HAL_GetTick>
 801b396:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR & PWR_CR_DBP) == RESET)
 801b398:	e008      	b.n	801b3ac <HAL_RCCEx_PeriphCLKConfig+0x150>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 801b39a:	f7fd f81d 	bl	80183d8 <HAL_GetTick>
 801b39e:	4602      	mov	r2, r0
 801b3a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b3a2:	1ad3      	subs	r3, r2, r3
 801b3a4:	2b02      	cmp	r3, #2
 801b3a6:	d901      	bls.n	801b3ac <HAL_RCCEx_PeriphCLKConfig+0x150>
      {
        return HAL_TIMEOUT;
 801b3a8:	2303      	movs	r3, #3
 801b3aa:	e278      	b.n	801b89e <HAL_RCCEx_PeriphCLKConfig+0x642>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 801b3ac:	4b2a      	ldr	r3, [pc, #168]	; (801b458 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 801b3ae:	681b      	ldr	r3, [r3, #0]
 801b3b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801b3b4:	2b00      	cmp	r3, #0
 801b3b6:	d0f0      	beq.n	801b39a <HAL_RCCEx_PeriphCLKConfig+0x13e>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 801b3b8:	4b26      	ldr	r3, [pc, #152]	; (801b454 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 801b3ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801b3bc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 801b3c0:	623b      	str	r3, [r7, #32]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 801b3c2:	6a3b      	ldr	r3, [r7, #32]
 801b3c4:	2b00      	cmp	r3, #0
 801b3c6:	d02f      	beq.n	801b428 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 801b3c8:	687b      	ldr	r3, [r7, #4]
 801b3ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801b3cc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 801b3d0:	6a3a      	ldr	r2, [r7, #32]
 801b3d2:	429a      	cmp	r2, r3
 801b3d4:	d028      	beq.n	801b428 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 801b3d6:	4b1f      	ldr	r3, [pc, #124]	; (801b454 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 801b3d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801b3da:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 801b3de:	623b      	str	r3, [r7, #32]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 801b3e0:	4b1e      	ldr	r3, [pc, #120]	; (801b45c <HAL_RCCEx_PeriphCLKConfig+0x200>)
 801b3e2:	2201      	movs	r2, #1
 801b3e4:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 801b3e6:	4b1d      	ldr	r3, [pc, #116]	; (801b45c <HAL_RCCEx_PeriphCLKConfig+0x200>)
 801b3e8:	2200      	movs	r2, #0
 801b3ea:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 801b3ec:	4a19      	ldr	r2, [pc, #100]	; (801b454 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 801b3ee:	6a3b      	ldr	r3, [r7, #32]
 801b3f0:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 801b3f2:	4b18      	ldr	r3, [pc, #96]	; (801b454 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 801b3f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801b3f6:	f003 0301 	and.w	r3, r3, #1
 801b3fa:	2b01      	cmp	r3, #1
 801b3fc:	d114      	bne.n	801b428 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 801b3fe:	f7fc ffeb 	bl	80183d8 <HAL_GetTick>
 801b402:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 801b404:	e00a      	b.n	801b41c <HAL_RCCEx_PeriphCLKConfig+0x1c0>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 801b406:	f7fc ffe7 	bl	80183d8 <HAL_GetTick>
 801b40a:	4602      	mov	r2, r0
 801b40c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b40e:	1ad3      	subs	r3, r2, r3
 801b410:	f241 3288 	movw	r2, #5000	; 0x1388
 801b414:	4293      	cmp	r3, r2
 801b416:	d901      	bls.n	801b41c <HAL_RCCEx_PeriphCLKConfig+0x1c0>
          {
            return HAL_TIMEOUT;
 801b418:	2303      	movs	r3, #3
 801b41a:	e240      	b.n	801b89e <HAL_RCCEx_PeriphCLKConfig+0x642>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 801b41c:	4b0d      	ldr	r3, [pc, #52]	; (801b454 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 801b41e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801b420:	f003 0302 	and.w	r3, r3, #2
 801b424:	2b00      	cmp	r3, #0
 801b426:	d0ee      	beq.n	801b406 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 801b428:	687b      	ldr	r3, [r7, #4]
 801b42a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801b42c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 801b430:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 801b434:	d114      	bne.n	801b460 <HAL_RCCEx_PeriphCLKConfig+0x204>
 801b436:	4b07      	ldr	r3, [pc, #28]	; (801b454 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 801b438:	689b      	ldr	r3, [r3, #8]
 801b43a:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 801b43e:	687b      	ldr	r3, [r7, #4]
 801b440:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801b442:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 801b446:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 801b44a:	4902      	ldr	r1, [pc, #8]	; (801b454 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 801b44c:	4313      	orrs	r3, r2
 801b44e:	608b      	str	r3, [r1, #8]
 801b450:	e00c      	b.n	801b46c <HAL_RCCEx_PeriphCLKConfig+0x210>
 801b452:	bf00      	nop
 801b454:	40023800 	.word	0x40023800
 801b458:	40007000 	.word	0x40007000
 801b45c:	42470e40 	.word	0x42470e40
 801b460:	4b4a      	ldr	r3, [pc, #296]	; (801b58c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 801b462:	689b      	ldr	r3, [r3, #8]
 801b464:	4a49      	ldr	r2, [pc, #292]	; (801b58c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 801b466:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 801b46a:	6093      	str	r3, [r2, #8]
 801b46c:	4b47      	ldr	r3, [pc, #284]	; (801b58c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 801b46e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 801b470:	687b      	ldr	r3, [r7, #4]
 801b472:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801b474:	f3c3 030b 	ubfx	r3, r3, #0, #12
 801b478:	4944      	ldr	r1, [pc, #272]	; (801b58c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 801b47a:	4313      	orrs	r3, r2
 801b47c:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 801b47e:	687b      	ldr	r3, [r7, #4]
 801b480:	681b      	ldr	r3, [r3, #0]
 801b482:	f003 0310 	and.w	r3, r3, #16
 801b486:	2b00      	cmp	r3, #0
 801b488:	d004      	beq.n	801b494 <HAL_RCCEx_PeriphCLKConfig+0x238>
  {
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 801b48a:	687b      	ldr	r3, [r7, #4]
 801b48c:	f893 2058 	ldrb.w	r2, [r3, #88]	; 0x58
 801b490:	4b3f      	ldr	r3, [pc, #252]	; (801b590 <HAL_RCCEx_PeriphCLKConfig+0x334>)
 801b492:	601a      	str	r2, [r3, #0]
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- FMPI2C1 Configuration -----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMPI2C1) == RCC_PERIPHCLK_FMPI2C1)
 801b494:	687b      	ldr	r3, [r7, #4]
 801b496:	681b      	ldr	r3, [r3, #0]
 801b498:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801b49c:	2b00      	cmp	r3, #0
 801b49e:	d00a      	beq.n	801b4b6 <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMPI2C1CLKSOURCE(PeriphClkInit->Fmpi2c1ClockSelection));

    /* Configure the FMPI2C1 clock source */
    __HAL_RCC_FMPI2C1_CONFIG(PeriphClkInit->Fmpi2c1ClockSelection);
 801b4a0:	4b3a      	ldr	r3, [pc, #232]	; (801b58c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 801b4a2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 801b4a6:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 801b4aa:	687b      	ldr	r3, [r7, #4]
 801b4ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801b4ae:	4937      	ldr	r1, [pc, #220]	; (801b58c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 801b4b0:	4313      	orrs	r3, r2
 801b4b2:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ CEC Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 801b4b6:	687b      	ldr	r3, [r7, #4]
 801b4b8:	681b      	ldr	r3, [r3, #0]
 801b4ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801b4be:	2b00      	cmp	r3, #0
 801b4c0:	d00a      	beq.n	801b4d8 <HAL_RCCEx_PeriphCLKConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 801b4c2:	4b32      	ldr	r3, [pc, #200]	; (801b58c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 801b4c4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 801b4c8:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 801b4cc:	687b      	ldr	r3, [r7, #4]
 801b4ce:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801b4d0:	492e      	ldr	r1, [pc, #184]	; (801b58c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 801b4d2:	4313      	orrs	r3, r2
 801b4d4:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- CLK48 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 801b4d8:	687b      	ldr	r3, [r7, #4]
 801b4da:	681b      	ldr	r3, [r3, #0]
 801b4dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801b4e0:	2b00      	cmp	r3, #0
 801b4e2:	d011      	beq.n	801b508 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 801b4e4:	4b29      	ldr	r3, [pc, #164]	; (801b58c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 801b4e6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 801b4ea:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 801b4ee:	687b      	ldr	r3, [r7, #4]
 801b4f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801b4f2:	4926      	ldr	r1, [pc, #152]	; (801b58c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 801b4f4:	4313      	orrs	r3, r2
 801b4f6:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94

    /* Enable the PLLSAI when it's used as clock source for CLK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP)
 801b4fa:	687b      	ldr	r3, [r7, #4]
 801b4fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801b4fe:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 801b502:	d101      	bne.n	801b508 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      pllsaiused = 1U;
 801b504:	2301      	movs	r3, #1
 801b506:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- SDIO Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 801b508:	687b      	ldr	r3, [r7, #4]
 801b50a:	681b      	ldr	r3, [r3, #0]
 801b50c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 801b510:	2b00      	cmp	r3, #0
 801b512:	d00a      	beq.n	801b52a <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 801b514:	4b1d      	ldr	r3, [pc, #116]	; (801b58c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 801b516:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 801b51a:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 801b51e:	687b      	ldr	r3, [r7, #4]
 801b520:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801b522:	491a      	ldr	r1, [pc, #104]	; (801b58c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 801b524:	4313      	orrs	r3, r2
 801b526:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ SPDIFRX Configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 801b52a:	687b      	ldr	r3, [r7, #4]
 801b52c:	681b      	ldr	r3, [r3, #0]
 801b52e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 801b532:	2b00      	cmp	r3, #0
 801b534:	d011      	beq.n	801b55a <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPDIFRXCLKSOURCE(PeriphClkInit->SpdifClockSelection));

    /* Configure the SPDIFRX clock source */
    __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifClockSelection);
 801b536:	4b15      	ldr	r3, [pc, #84]	; (801b58c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 801b538:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 801b53c:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 801b540:	687b      	ldr	r3, [r7, #4]
 801b542:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801b544:	4911      	ldr	r1, [pc, #68]	; (801b58c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 801b546:	4313      	orrs	r3, r2
 801b548:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
    /* Enable the PLLI2S when it's used as clock source for SPDIFRX */
    if(PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP)
 801b54c:	687b      	ldr	r3, [r7, #4]
 801b54e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801b550:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 801b554:	d101      	bne.n	801b55a <HAL_RCCEx_PeriphCLKConfig+0x2fe>
    {
      plli2sused = 1U;
 801b556:	2301      	movs	r3, #1
 801b558:	62fb      	str	r3, [r7, #44]	; 0x2c
  /*--------------------------------------------------------------------------*/

  /*---------------------------- PLLI2S Configuration ------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S on APB1,
     I2S on APB2 or SPDIFRX */
  if((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 801b55a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801b55c:	2b01      	cmp	r3, #1
 801b55e:	d005      	beq.n	801b56c <HAL_RCCEx_PeriphCLKConfig+0x310>
 801b560:	687b      	ldr	r3, [r7, #4]
 801b562:	681b      	ldr	r3, [r3, #0]
 801b564:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 801b568:	f040 80ff 	bne.w	801b76a <HAL_RCCEx_PeriphCLKConfig+0x50e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 801b56c:	4b09      	ldr	r3, [pc, #36]	; (801b594 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 801b56e:	2200      	movs	r2, #0
 801b570:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 801b572:	f7fc ff31 	bl	80183d8 <HAL_GetTick>
 801b576:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 801b578:	e00e      	b.n	801b598 <HAL_RCCEx_PeriphCLKConfig+0x33c>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 801b57a:	f7fc ff2d 	bl	80183d8 <HAL_GetTick>
 801b57e:	4602      	mov	r2, r0
 801b580:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b582:	1ad3      	subs	r3, r2, r3
 801b584:	2b02      	cmp	r3, #2
 801b586:	d907      	bls.n	801b598 <HAL_RCCEx_PeriphCLKConfig+0x33c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 801b588:	2303      	movs	r3, #3
 801b58a:	e188      	b.n	801b89e <HAL_RCCEx_PeriphCLKConfig+0x642>
 801b58c:	40023800 	.word	0x40023800
 801b590:	424711e0 	.word	0x424711e0
 801b594:	42470068 	.word	0x42470068
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 801b598:	4b7e      	ldr	r3, [pc, #504]	; (801b794 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 801b59a:	681b      	ldr	r3, [r3, #0]
 801b59c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 801b5a0:	2b00      	cmp	r3, #0
 801b5a2:	d1ea      	bne.n	801b57a <HAL_RCCEx_PeriphCLKConfig+0x31e>
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*------ In Case of PLLI2S is selected as source clock for I2S -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 801b5a4:	687b      	ldr	r3, [r7, #4]
 801b5a6:	681b      	ldr	r3, [r3, #0]
 801b5a8:	f003 0301 	and.w	r3, r3, #1
 801b5ac:	2b00      	cmp	r3, #0
 801b5ae:	d003      	beq.n	801b5b8 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 801b5b0:	687b      	ldr	r3, [r7, #4]
 801b5b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801b5b4:	2b00      	cmp	r3, #0
 801b5b6:	d009      	beq.n	801b5cc <HAL_RCCEx_PeriphCLKConfig+0x370>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 801b5b8:	687b      	ldr	r3, [r7, #4]
 801b5ba:	681b      	ldr	r3, [r3, #0]
 801b5bc:	f003 0302 	and.w	r3, r3, #2
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 801b5c0:	2b00      	cmp	r3, #0
 801b5c2:	d028      	beq.n	801b616 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 801b5c4:	687b      	ldr	r3, [r7, #4]
 801b5c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801b5c8:	2b00      	cmp	r3, #0
 801b5ca:	d124      	bne.n	801b616 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP/PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 801b5cc:	4b71      	ldr	r3, [pc, #452]	; (801b794 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 801b5ce:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801b5d2:	0c1b      	lsrs	r3, r3, #16
 801b5d4:	f003 0303 	and.w	r3, r3, #3
 801b5d8:	3301      	adds	r3, #1
 801b5da:	005b      	lsls	r3, r3, #1
 801b5dc:	61fb      	str	r3, [r7, #28]
      plli2sq = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 801b5de:	4b6d      	ldr	r3, [pc, #436]	; (801b794 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 801b5e0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801b5e4:	0e1b      	lsrs	r3, r3, #24
 801b5e6:	f003 030f 	and.w	r3, r3, #15
 801b5ea:	61bb      	str	r3, [r7, #24]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, plli2sq, PeriphClkInit->PLLI2S.PLLI2SR);
 801b5ec:	687b      	ldr	r3, [r7, #4]
 801b5ee:	685a      	ldr	r2, [r3, #4]
 801b5f0:	687b      	ldr	r3, [r7, #4]
 801b5f2:	689b      	ldr	r3, [r3, #8]
 801b5f4:	019b      	lsls	r3, r3, #6
 801b5f6:	431a      	orrs	r2, r3
 801b5f8:	69fb      	ldr	r3, [r7, #28]
 801b5fa:	085b      	lsrs	r3, r3, #1
 801b5fc:	3b01      	subs	r3, #1
 801b5fe:	041b      	lsls	r3, r3, #16
 801b600:	431a      	orrs	r2, r3
 801b602:	69bb      	ldr	r3, [r7, #24]
 801b604:	061b      	lsls	r3, r3, #24
 801b606:	431a      	orrs	r2, r3
 801b608:	687b      	ldr	r3, [r7, #4]
 801b60a:	695b      	ldr	r3, [r3, #20]
 801b60c:	071b      	lsls	r3, r3, #28
 801b60e:	4961      	ldr	r1, [pc, #388]	; (801b794 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 801b610:	4313      	orrs	r3, r2
 801b612:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*------- In Case of PLLI2S is selected as source clock for SAI ----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 801b616:	687b      	ldr	r3, [r7, #4]
 801b618:	681b      	ldr	r3, [r3, #0]
 801b61a:	f003 0304 	and.w	r3, r3, #4
 801b61e:	2b00      	cmp	r3, #0
 801b620:	d004      	beq.n	801b62c <HAL_RCCEx_PeriphCLKConfig+0x3d0>
 801b622:	687b      	ldr	r3, [r7, #4]
 801b624:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801b626:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 801b62a:	d00a      	beq.n	801b642 <HAL_RCCEx_PeriphCLKConfig+0x3e6>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 801b62c:	687b      	ldr	r3, [r7, #4]
 801b62e:	681b      	ldr	r3, [r3, #0]
 801b630:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 801b634:	2b00      	cmp	r3, #0
 801b636:	d035      	beq.n	801b6a4 <HAL_RCCEx_PeriphCLKConfig+0x448>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 801b638:	687b      	ldr	r3, [r7, #4]
 801b63a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801b63c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 801b640:	d130      	bne.n	801b6a4 <HAL_RCCEx_PeriphCLKConfig+0x448>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP/PLLI2SR value from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 801b642:	4b54      	ldr	r3, [pc, #336]	; (801b794 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 801b644:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801b648:	0c1b      	lsrs	r3, r3, #16
 801b64a:	f003 0303 	and.w	r3, r3, #3
 801b64e:	3301      	adds	r3, #1
 801b650:	005b      	lsls	r3, r3, #1
 801b652:	61fb      	str	r3, [r7, #28]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 801b654:	4b4f      	ldr	r3, [pc, #316]	; (801b794 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 801b656:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801b65a:	0f1b      	lsrs	r3, r3, #28
 801b65c:	f003 0307 	and.w	r3, r3, #7
 801b660:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, PeriphClkInit->PLLI2S.PLLI2SQ, plli2sr);
 801b662:	687b      	ldr	r3, [r7, #4]
 801b664:	685a      	ldr	r2, [r3, #4]
 801b666:	687b      	ldr	r3, [r7, #4]
 801b668:	689b      	ldr	r3, [r3, #8]
 801b66a:	019b      	lsls	r3, r3, #6
 801b66c:	431a      	orrs	r2, r3
 801b66e:	69fb      	ldr	r3, [r7, #28]
 801b670:	085b      	lsrs	r3, r3, #1
 801b672:	3b01      	subs	r3, #1
 801b674:	041b      	lsls	r3, r3, #16
 801b676:	431a      	orrs	r2, r3
 801b678:	687b      	ldr	r3, [r7, #4]
 801b67a:	691b      	ldr	r3, [r3, #16]
 801b67c:	061b      	lsls	r3, r3, #24
 801b67e:	431a      	orrs	r2, r3
 801b680:	697b      	ldr	r3, [r7, #20]
 801b682:	071b      	lsls	r3, r3, #28
 801b684:	4943      	ldr	r1, [pc, #268]	; (801b794 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 801b686:	4313      	orrs	r3, r2
 801b688:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 801b68c:	4b41      	ldr	r3, [pc, #260]	; (801b794 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 801b68e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801b692:	f023 021f 	bic.w	r2, r3, #31
 801b696:	687b      	ldr	r3, [r7, #4]
 801b698:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801b69a:	3b01      	subs	r3, #1
 801b69c:	493d      	ldr	r1, [pc, #244]	; (801b794 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 801b69e:	4313      	orrs	r3, r2
 801b6a0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLI2S is selected as source clock for SPDIFRX -------*/
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX) && (PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP))
 801b6a4:	687b      	ldr	r3, [r7, #4]
 801b6a6:	681b      	ldr	r3, [r3, #0]
 801b6a8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 801b6ac:	2b00      	cmp	r3, #0
 801b6ae:	d029      	beq.n	801b704 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 801b6b0:	687b      	ldr	r3, [r7, #4]
 801b6b2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801b6b4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 801b6b8:	d124      	bne.n	801b704 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      plli2sq = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 801b6ba:	4b36      	ldr	r3, [pc, #216]	; (801b794 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 801b6bc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801b6c0:	0c1b      	lsrs	r3, r3, #16
 801b6c2:	f003 0303 	and.w	r3, r3, #3
 801b6c6:	3301      	adds	r3, #1
 801b6c8:	005b      	lsls	r3, r3, #1
 801b6ca:	61bb      	str	r3, [r7, #24]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 801b6cc:	4b31      	ldr	r3, [pc, #196]	; (801b794 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 801b6ce:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801b6d2:	0f1b      	lsrs	r3, r3, #28
 801b6d4:	f003 0307 	and.w	r3, r3, #7
 801b6d8:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, plli2sq, plli2sr);
 801b6da:	687b      	ldr	r3, [r7, #4]
 801b6dc:	685a      	ldr	r2, [r3, #4]
 801b6de:	687b      	ldr	r3, [r7, #4]
 801b6e0:	689b      	ldr	r3, [r3, #8]
 801b6e2:	019b      	lsls	r3, r3, #6
 801b6e4:	431a      	orrs	r2, r3
 801b6e6:	687b      	ldr	r3, [r7, #4]
 801b6e8:	68db      	ldr	r3, [r3, #12]
 801b6ea:	085b      	lsrs	r3, r3, #1
 801b6ec:	3b01      	subs	r3, #1
 801b6ee:	041b      	lsls	r3, r3, #16
 801b6f0:	431a      	orrs	r2, r3
 801b6f2:	69bb      	ldr	r3, [r7, #24]
 801b6f4:	061b      	lsls	r3, r3, #24
 801b6f6:	431a      	orrs	r2, r3
 801b6f8:	697b      	ldr	r3, [r7, #20]
 801b6fa:	071b      	lsls	r3, r3, #28
 801b6fc:	4925      	ldr	r1, [pc, #148]	; (801b794 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 801b6fe:	4313      	orrs	r3, r2
 801b700:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

     /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 801b704:	687b      	ldr	r3, [r7, #4]
 801b706:	681b      	ldr	r3, [r3, #0]
 801b708:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 801b70c:	2b00      	cmp	r3, #0
 801b70e:	d016      	beq.n	801b73e <HAL_RCCEx_PeriphCLKConfig+0x4e2>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 801b710:	687b      	ldr	r3, [r7, #4]
 801b712:	685a      	ldr	r2, [r3, #4]
 801b714:	687b      	ldr	r3, [r7, #4]
 801b716:	689b      	ldr	r3, [r3, #8]
 801b718:	019b      	lsls	r3, r3, #6
 801b71a:	431a      	orrs	r2, r3
 801b71c:	687b      	ldr	r3, [r7, #4]
 801b71e:	68db      	ldr	r3, [r3, #12]
 801b720:	085b      	lsrs	r3, r3, #1
 801b722:	3b01      	subs	r3, #1
 801b724:	041b      	lsls	r3, r3, #16
 801b726:	431a      	orrs	r2, r3
 801b728:	687b      	ldr	r3, [r7, #4]
 801b72a:	691b      	ldr	r3, [r3, #16]
 801b72c:	061b      	lsls	r3, r3, #24
 801b72e:	431a      	orrs	r2, r3
 801b730:	687b      	ldr	r3, [r7, #4]
 801b732:	695b      	ldr	r3, [r3, #20]
 801b734:	071b      	lsls	r3, r3, #28
 801b736:	4917      	ldr	r1, [pc, #92]	; (801b794 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 801b738:	4313      	orrs	r3, r2
 801b73a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 801b73e:	4b16      	ldr	r3, [pc, #88]	; (801b798 <HAL_RCCEx_PeriphCLKConfig+0x53c>)
 801b740:	2201      	movs	r2, #1
 801b742:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 801b744:	f7fc fe48 	bl	80183d8 <HAL_GetTick>
 801b748:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 801b74a:	e008      	b.n	801b75e <HAL_RCCEx_PeriphCLKConfig+0x502>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 801b74c:	f7fc fe44 	bl	80183d8 <HAL_GetTick>
 801b750:	4602      	mov	r2, r0
 801b752:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b754:	1ad3      	subs	r3, r2, r3
 801b756:	2b02      	cmp	r3, #2
 801b758:	d901      	bls.n	801b75e <HAL_RCCEx_PeriphCLKConfig+0x502>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 801b75a:	2303      	movs	r3, #3
 801b75c:	e09f      	b.n	801b89e <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 801b75e:	4b0d      	ldr	r3, [pc, #52]	; (801b794 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 801b760:	681b      	ldr	r3, [r3, #0]
 801b762:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 801b766:	2b00      	cmp	r3, #0
 801b768:	d0f0      	beq.n	801b74c <HAL_RCCEx_PeriphCLKConfig+0x4f0>
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- PLLSAI Configuration -----------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, CLK48 or SDIO */
  if(pllsaiused == 1U)
 801b76a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801b76c:	2b01      	cmp	r3, #1
 801b76e:	f040 8095 	bne.w	801b89c <HAL_RCCEx_PeriphCLKConfig+0x640>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 801b772:	4b0a      	ldr	r3, [pc, #40]	; (801b79c <HAL_RCCEx_PeriphCLKConfig+0x540>)
 801b774:	2200      	movs	r2, #0
 801b776:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 801b778:	f7fc fe2e 	bl	80183d8 <HAL_GetTick>
 801b77c:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 801b77e:	e00f      	b.n	801b7a0 <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 801b780:	f7fc fe2a 	bl	80183d8 <HAL_GetTick>
 801b784:	4602      	mov	r2, r0
 801b786:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b788:	1ad3      	subs	r3, r2, r3
 801b78a:	2b02      	cmp	r3, #2
 801b78c:	d908      	bls.n	801b7a0 <HAL_RCCEx_PeriphCLKConfig+0x544>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 801b78e:	2303      	movs	r3, #3
 801b790:	e085      	b.n	801b89e <HAL_RCCEx_PeriphCLKConfig+0x642>
 801b792:	bf00      	nop
 801b794:	40023800 	.word	0x40023800
 801b798:	42470068 	.word	0x42470068
 801b79c:	42470070 	.word	0x42470070
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 801b7a0:	4b41      	ldr	r3, [pc, #260]	; (801b8a8 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 801b7a2:	681b      	ldr	r3, [r3, #0]
 801b7a4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 801b7a8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 801b7ac:	d0e8      	beq.n	801b780 <HAL_RCCEx_PeriphCLKConfig+0x524>
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIM_VALUE(PeriphClkInit->PLLSAI.PLLSAIM));
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*------ In Case of PLLSAI is selected as source clock for SAI -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 801b7ae:	687b      	ldr	r3, [r7, #4]
 801b7b0:	681b      	ldr	r3, [r3, #0]
 801b7b2:	f003 0304 	and.w	r3, r3, #4
 801b7b6:	2b00      	cmp	r3, #0
 801b7b8:	d003      	beq.n	801b7c2 <HAL_RCCEx_PeriphCLKConfig+0x566>
 801b7ba:	687b      	ldr	r3, [r7, #4]
 801b7bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801b7be:	2b00      	cmp	r3, #0
 801b7c0:	d009      	beq.n	801b7d6 <HAL_RCCEx_PeriphCLKConfig+0x57a>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 801b7c2:	687b      	ldr	r3, [r7, #4]
 801b7c4:	681b      	ldr	r3, [r3, #0]
 801b7c6:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 801b7ca:	2b00      	cmp	r3, #0
 801b7cc:	d02b      	beq.n	801b826 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 801b7ce:	687b      	ldr	r3, [r7, #4]
 801b7d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801b7d2:	2b00      	cmp	r3, #0
 801b7d4:	d127      	bne.n	801b826 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 801b7d6:	4b34      	ldr	r3, [pc, #208]	; (801b8a8 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 801b7d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801b7dc:	0c1b      	lsrs	r3, r3, #16
 801b7de:	f003 0303 	and.w	r3, r3, #3
 801b7e2:	3301      	adds	r3, #1
 801b7e4:	005b      	lsls	r3, r3, #1
 801b7e6:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , pllsaip, PeriphClkInit->PLLSAI.PLLSAIQ, 0U);
 801b7e8:	687b      	ldr	r3, [r7, #4]
 801b7ea:	699a      	ldr	r2, [r3, #24]
 801b7ec:	687b      	ldr	r3, [r7, #4]
 801b7ee:	69db      	ldr	r3, [r3, #28]
 801b7f0:	019b      	lsls	r3, r3, #6
 801b7f2:	431a      	orrs	r2, r3
 801b7f4:	693b      	ldr	r3, [r7, #16]
 801b7f6:	085b      	lsrs	r3, r3, #1
 801b7f8:	3b01      	subs	r3, #1
 801b7fa:	041b      	lsls	r3, r3, #16
 801b7fc:	431a      	orrs	r2, r3
 801b7fe:	687b      	ldr	r3, [r7, #4]
 801b800:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801b802:	061b      	lsls	r3, r3, #24
 801b804:	4928      	ldr	r1, [pc, #160]	; (801b8a8 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 801b806:	4313      	orrs	r3, r2
 801b808:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 801b80c:	4b26      	ldr	r3, [pc, #152]	; (801b8a8 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 801b80e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801b812:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 801b816:	687b      	ldr	r3, [r7, #4]
 801b818:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801b81a:	3b01      	subs	r3, #1
 801b81c:	021b      	lsls	r3, r3, #8
 801b81e:	4922      	ldr	r1, [pc, #136]	; (801b8a8 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 801b820:	4313      	orrs	r3, r2
 801b822:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLSAI is selected as source clock for CLK48 ---------*/
    /* In Case of PLLI2S is selected as source clock for CLK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP))
 801b826:	687b      	ldr	r3, [r7, #4]
 801b828:	681b      	ldr	r3, [r3, #0]
 801b82a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801b82e:	2b00      	cmp	r3, #0
 801b830:	d01d      	beq.n	801b86e <HAL_RCCEx_PeriphCLKConfig+0x612>
 801b832:	687b      	ldr	r3, [r7, #4]
 801b834:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801b836:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 801b83a:	d118      	bne.n	801b86e <HAL_RCCEx_PeriphCLKConfig+0x612>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 801b83c:	4b1a      	ldr	r3, [pc, #104]	; (801b8a8 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 801b83e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801b842:	0e1b      	lsrs	r3, r3, #24
 801b844:	f003 030f 	and.w	r3, r3, #15
 801b848:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) * (PLLI2SN/PLLSAIM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, pllsaiq, 0U);
 801b84a:	687b      	ldr	r3, [r7, #4]
 801b84c:	699a      	ldr	r2, [r3, #24]
 801b84e:	687b      	ldr	r3, [r7, #4]
 801b850:	69db      	ldr	r3, [r3, #28]
 801b852:	019b      	lsls	r3, r3, #6
 801b854:	431a      	orrs	r2, r3
 801b856:	687b      	ldr	r3, [r7, #4]
 801b858:	6a1b      	ldr	r3, [r3, #32]
 801b85a:	085b      	lsrs	r3, r3, #1
 801b85c:	3b01      	subs	r3, #1
 801b85e:	041b      	lsls	r3, r3, #16
 801b860:	431a      	orrs	r2, r3
 801b862:	68fb      	ldr	r3, [r7, #12]
 801b864:	061b      	lsls	r3, r3, #24
 801b866:	4910      	ldr	r1, [pc, #64]	; (801b8a8 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 801b868:	4313      	orrs	r3, r2
 801b86a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 801b86e:	4b0f      	ldr	r3, [pc, #60]	; (801b8ac <HAL_RCCEx_PeriphCLKConfig+0x650>)
 801b870:	2201      	movs	r2, #1
 801b872:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 801b874:	f7fc fdb0 	bl	80183d8 <HAL_GetTick>
 801b878:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 801b87a:	e008      	b.n	801b88e <HAL_RCCEx_PeriphCLKConfig+0x632>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 801b87c:	f7fc fdac 	bl	80183d8 <HAL_GetTick>
 801b880:	4602      	mov	r2, r0
 801b882:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b884:	1ad3      	subs	r3, r2, r3
 801b886:	2b02      	cmp	r3, #2
 801b888:	d901      	bls.n	801b88e <HAL_RCCEx_PeriphCLKConfig+0x632>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 801b88a:	2303      	movs	r3, #3
 801b88c:	e007      	b.n	801b89e <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 801b88e:	4b06      	ldr	r3, [pc, #24]	; (801b8a8 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 801b890:	681b      	ldr	r3, [r3, #0]
 801b892:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 801b896:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 801b89a:	d1ef      	bne.n	801b87c <HAL_RCCEx_PeriphCLKConfig+0x620>
      }
    }
  }
  return HAL_OK;
 801b89c:	2300      	movs	r3, #0
}
 801b89e:	4618      	mov	r0, r3
 801b8a0:	3730      	adds	r7, #48	; 0x30
 801b8a2:	46bd      	mov	sp, r7
 801b8a4:	bd80      	pop	{r7, pc}
 801b8a6:	bf00      	nop
 801b8a8:	40023800 	.word	0x40023800
 801b8ac:	42470070 	.word	0x42470070

0801b8b0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 801b8b0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801b8b4:	b087      	sub	sp, #28
 801b8b6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 801b8b8:	2600      	movs	r6, #0
 801b8ba:	60fe      	str	r6, [r7, #12]
  uint32_t pllvco = 0U;
 801b8bc:	2600      	movs	r6, #0
 801b8be:	617e      	str	r6, [r7, #20]
  uint32_t pllp = 0U;
 801b8c0:	2600      	movs	r6, #0
 801b8c2:	60be      	str	r6, [r7, #8]
  uint32_t pllr = 0U;
 801b8c4:	2600      	movs	r6, #0
 801b8c6:	607e      	str	r6, [r7, #4]
  uint32_t sysclockfreq = 0U;
 801b8c8:	2600      	movs	r6, #0
 801b8ca:	613e      	str	r6, [r7, #16]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 801b8cc:	4ea3      	ldr	r6, [pc, #652]	; (801bb5c <HAL_RCC_GetSysClockFreq+0x2ac>)
 801b8ce:	68b6      	ldr	r6, [r6, #8]
 801b8d0:	f006 060c 	and.w	r6, r6, #12
 801b8d4:	2e0c      	cmp	r6, #12
 801b8d6:	f200 8137 	bhi.w	801bb48 <HAL_RCC_GetSysClockFreq+0x298>
 801b8da:	f20f 0c08 	addw	ip, pc, #8
 801b8de:	f85c f026 	ldr.w	pc, [ip, r6, lsl #2]
 801b8e2:	bf00      	nop
 801b8e4:	0801b919 	.word	0x0801b919
 801b8e8:	0801bb49 	.word	0x0801bb49
 801b8ec:	0801bb49 	.word	0x0801bb49
 801b8f0:	0801bb49 	.word	0x0801bb49
 801b8f4:	0801b91f 	.word	0x0801b91f
 801b8f8:	0801bb49 	.word	0x0801bb49
 801b8fc:	0801bb49 	.word	0x0801bb49
 801b900:	0801bb49 	.word	0x0801bb49
 801b904:	0801b925 	.word	0x0801b925
 801b908:	0801bb49 	.word	0x0801bb49
 801b90c:	0801bb49 	.word	0x0801bb49
 801b910:	0801bb49 	.word	0x0801bb49
 801b914:	0801ba3b 	.word	0x0801ba3b
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 801b918:	4b91      	ldr	r3, [pc, #580]	; (801bb60 <HAL_RCC_GetSysClockFreq+0x2b0>)
 801b91a:	613b      	str	r3, [r7, #16]
       break;
 801b91c:	e117      	b.n	801bb4e <HAL_RCC_GetSysClockFreq+0x29e>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 801b91e:	4b91      	ldr	r3, [pc, #580]	; (801bb64 <HAL_RCC_GetSysClockFreq+0x2b4>)
 801b920:	613b      	str	r3, [r7, #16]
      break;
 801b922:	e114      	b.n	801bb4e <HAL_RCC_GetSysClockFreq+0x29e>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 801b924:	4b8d      	ldr	r3, [pc, #564]	; (801bb5c <HAL_RCC_GetSysClockFreq+0x2ac>)
 801b926:	685b      	ldr	r3, [r3, #4]
 801b928:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801b92c:	60fb      	str	r3, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 801b92e:	4b8b      	ldr	r3, [pc, #556]	; (801bb5c <HAL_RCC_GetSysClockFreq+0x2ac>)
 801b930:	685b      	ldr	r3, [r3, #4]
 801b932:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 801b936:	2b00      	cmp	r3, #0
 801b938:	d024      	beq.n	801b984 <HAL_RCC_GetSysClockFreq+0xd4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 801b93a:	4b88      	ldr	r3, [pc, #544]	; (801bb5c <HAL_RCC_GetSysClockFreq+0x2ac>)
 801b93c:	685b      	ldr	r3, [r3, #4]
 801b93e:	099b      	lsrs	r3, r3, #6
 801b940:	461a      	mov	r2, r3
 801b942:	f04f 0300 	mov.w	r3, #0
 801b946:	f240 14ff 	movw	r4, #511	; 0x1ff
 801b94a:	f04f 0500 	mov.w	r5, #0
 801b94e:	ea02 0004 	and.w	r0, r2, r4
 801b952:	ea03 0105 	and.w	r1, r3, r5
 801b956:	4b83      	ldr	r3, [pc, #524]	; (801bb64 <HAL_RCC_GetSysClockFreq+0x2b4>)
 801b958:	fb03 f201 	mul.w	r2, r3, r1
 801b95c:	2300      	movs	r3, #0
 801b95e:	fb03 f300 	mul.w	r3, r3, r0
 801b962:	4413      	add	r3, r2
 801b964:	4a7f      	ldr	r2, [pc, #508]	; (801bb64 <HAL_RCC_GetSysClockFreq+0x2b4>)
 801b966:	fba0 0102 	umull	r0, r1, r0, r2
 801b96a:	440b      	add	r3, r1
 801b96c:	4619      	mov	r1, r3
 801b96e:	68fb      	ldr	r3, [r7, #12]
 801b970:	461a      	mov	r2, r3
 801b972:	f04f 0300 	mov.w	r3, #0
 801b976:	f7f0 fb6b 	bl	800c050 <__aeabi_uldivmod>
 801b97a:	4602      	mov	r2, r0
 801b97c:	460b      	mov	r3, r1
 801b97e:	4613      	mov	r3, r2
 801b980:	617b      	str	r3, [r7, #20]
 801b982:	e04c      	b.n	801ba1e <HAL_RCC_GetSysClockFreq+0x16e>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 801b984:	4b75      	ldr	r3, [pc, #468]	; (801bb5c <HAL_RCC_GetSysClockFreq+0x2ac>)
 801b986:	685b      	ldr	r3, [r3, #4]
 801b988:	099b      	lsrs	r3, r3, #6
 801b98a:	461a      	mov	r2, r3
 801b98c:	f04f 0300 	mov.w	r3, #0
 801b990:	f240 10ff 	movw	r0, #511	; 0x1ff
 801b994:	f04f 0100 	mov.w	r1, #0
 801b998:	ea02 0800 	and.w	r8, r2, r0
 801b99c:	ea03 0901 	and.w	r9, r3, r1
 801b9a0:	4640      	mov	r0, r8
 801b9a2:	4649      	mov	r1, r9
 801b9a4:	f04f 0200 	mov.w	r2, #0
 801b9a8:	f04f 0300 	mov.w	r3, #0
 801b9ac:	014b      	lsls	r3, r1, #5
 801b9ae:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 801b9b2:	0142      	lsls	r2, r0, #5
 801b9b4:	4610      	mov	r0, r2
 801b9b6:	4619      	mov	r1, r3
 801b9b8:	ebb0 0008 	subs.w	r0, r0, r8
 801b9bc:	eb61 0109 	sbc.w	r1, r1, r9
 801b9c0:	f04f 0200 	mov.w	r2, #0
 801b9c4:	f04f 0300 	mov.w	r3, #0
 801b9c8:	018b      	lsls	r3, r1, #6
 801b9ca:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 801b9ce:	0182      	lsls	r2, r0, #6
 801b9d0:	1a12      	subs	r2, r2, r0
 801b9d2:	eb63 0301 	sbc.w	r3, r3, r1
 801b9d6:	f04f 0000 	mov.w	r0, #0
 801b9da:	f04f 0100 	mov.w	r1, #0
 801b9de:	00d9      	lsls	r1, r3, #3
 801b9e0:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 801b9e4:	00d0      	lsls	r0, r2, #3
 801b9e6:	4602      	mov	r2, r0
 801b9e8:	460b      	mov	r3, r1
 801b9ea:	eb12 0208 	adds.w	r2, r2, r8
 801b9ee:	eb43 0309 	adc.w	r3, r3, r9
 801b9f2:	f04f 0000 	mov.w	r0, #0
 801b9f6:	f04f 0100 	mov.w	r1, #0
 801b9fa:	0299      	lsls	r1, r3, #10
 801b9fc:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 801ba00:	0290      	lsls	r0, r2, #10
 801ba02:	4602      	mov	r2, r0
 801ba04:	460b      	mov	r3, r1
 801ba06:	4610      	mov	r0, r2
 801ba08:	4619      	mov	r1, r3
 801ba0a:	68fb      	ldr	r3, [r7, #12]
 801ba0c:	461a      	mov	r2, r3
 801ba0e:	f04f 0300 	mov.w	r3, #0
 801ba12:	f7f0 fb1d 	bl	800c050 <__aeabi_uldivmod>
 801ba16:	4602      	mov	r2, r0
 801ba18:	460b      	mov	r3, r1
 801ba1a:	4613      	mov	r3, r2
 801ba1c:	617b      	str	r3, [r7, #20]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 801ba1e:	4b4f      	ldr	r3, [pc, #316]	; (801bb5c <HAL_RCC_GetSysClockFreq+0x2ac>)
 801ba20:	685b      	ldr	r3, [r3, #4]
 801ba22:	0c1b      	lsrs	r3, r3, #16
 801ba24:	f003 0303 	and.w	r3, r3, #3
 801ba28:	3301      	adds	r3, #1
 801ba2a:	005b      	lsls	r3, r3, #1
 801ba2c:	60bb      	str	r3, [r7, #8]

      sysclockfreq = pllvco/pllp;
 801ba2e:	697a      	ldr	r2, [r7, #20]
 801ba30:	68bb      	ldr	r3, [r7, #8]
 801ba32:	fbb2 f3f3 	udiv	r3, r2, r3
 801ba36:	613b      	str	r3, [r7, #16]
      break;
 801ba38:	e089      	b.n	801bb4e <HAL_RCC_GetSysClockFreq+0x29e>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 801ba3a:	4948      	ldr	r1, [pc, #288]	; (801bb5c <HAL_RCC_GetSysClockFreq+0x2ac>)
 801ba3c:	6849      	ldr	r1, [r1, #4]
 801ba3e:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 801ba42:	60f9      	str	r1, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 801ba44:	4945      	ldr	r1, [pc, #276]	; (801bb5c <HAL_RCC_GetSysClockFreq+0x2ac>)
 801ba46:	6849      	ldr	r1, [r1, #4]
 801ba48:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 801ba4c:	2900      	cmp	r1, #0
 801ba4e:	d024      	beq.n	801ba9a <HAL_RCC_GetSysClockFreq+0x1ea>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 801ba50:	4942      	ldr	r1, [pc, #264]	; (801bb5c <HAL_RCC_GetSysClockFreq+0x2ac>)
 801ba52:	6849      	ldr	r1, [r1, #4]
 801ba54:	0989      	lsrs	r1, r1, #6
 801ba56:	4608      	mov	r0, r1
 801ba58:	f04f 0100 	mov.w	r1, #0
 801ba5c:	f240 14ff 	movw	r4, #511	; 0x1ff
 801ba60:	f04f 0500 	mov.w	r5, #0
 801ba64:	ea00 0204 	and.w	r2, r0, r4
 801ba68:	ea01 0305 	and.w	r3, r1, r5
 801ba6c:	493d      	ldr	r1, [pc, #244]	; (801bb64 <HAL_RCC_GetSysClockFreq+0x2b4>)
 801ba6e:	fb01 f003 	mul.w	r0, r1, r3
 801ba72:	2100      	movs	r1, #0
 801ba74:	fb01 f102 	mul.w	r1, r1, r2
 801ba78:	1844      	adds	r4, r0, r1
 801ba7a:	493a      	ldr	r1, [pc, #232]	; (801bb64 <HAL_RCC_GetSysClockFreq+0x2b4>)
 801ba7c:	fba2 0101 	umull	r0, r1, r2, r1
 801ba80:	1863      	adds	r3, r4, r1
 801ba82:	4619      	mov	r1, r3
 801ba84:	68fb      	ldr	r3, [r7, #12]
 801ba86:	461a      	mov	r2, r3
 801ba88:	f04f 0300 	mov.w	r3, #0
 801ba8c:	f7f0 fae0 	bl	800c050 <__aeabi_uldivmod>
 801ba90:	4602      	mov	r2, r0
 801ba92:	460b      	mov	r3, r1
 801ba94:	4613      	mov	r3, r2
 801ba96:	617b      	str	r3, [r7, #20]
 801ba98:	e04a      	b.n	801bb30 <HAL_RCC_GetSysClockFreq+0x280>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 801ba9a:	4b30      	ldr	r3, [pc, #192]	; (801bb5c <HAL_RCC_GetSysClockFreq+0x2ac>)
 801ba9c:	685b      	ldr	r3, [r3, #4]
 801ba9e:	099b      	lsrs	r3, r3, #6
 801baa0:	461a      	mov	r2, r3
 801baa2:	f04f 0300 	mov.w	r3, #0
 801baa6:	f240 10ff 	movw	r0, #511	; 0x1ff
 801baaa:	f04f 0100 	mov.w	r1, #0
 801baae:	ea02 0400 	and.w	r4, r2, r0
 801bab2:	ea03 0501 	and.w	r5, r3, r1
 801bab6:	4620      	mov	r0, r4
 801bab8:	4629      	mov	r1, r5
 801baba:	f04f 0200 	mov.w	r2, #0
 801babe:	f04f 0300 	mov.w	r3, #0
 801bac2:	014b      	lsls	r3, r1, #5
 801bac4:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 801bac8:	0142      	lsls	r2, r0, #5
 801baca:	4610      	mov	r0, r2
 801bacc:	4619      	mov	r1, r3
 801bace:	1b00      	subs	r0, r0, r4
 801bad0:	eb61 0105 	sbc.w	r1, r1, r5
 801bad4:	f04f 0200 	mov.w	r2, #0
 801bad8:	f04f 0300 	mov.w	r3, #0
 801badc:	018b      	lsls	r3, r1, #6
 801bade:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 801bae2:	0182      	lsls	r2, r0, #6
 801bae4:	1a12      	subs	r2, r2, r0
 801bae6:	eb63 0301 	sbc.w	r3, r3, r1
 801baea:	f04f 0000 	mov.w	r0, #0
 801baee:	f04f 0100 	mov.w	r1, #0
 801baf2:	00d9      	lsls	r1, r3, #3
 801baf4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 801baf8:	00d0      	lsls	r0, r2, #3
 801bafa:	4602      	mov	r2, r0
 801bafc:	460b      	mov	r3, r1
 801bafe:	1912      	adds	r2, r2, r4
 801bb00:	eb45 0303 	adc.w	r3, r5, r3
 801bb04:	f04f 0000 	mov.w	r0, #0
 801bb08:	f04f 0100 	mov.w	r1, #0
 801bb0c:	0299      	lsls	r1, r3, #10
 801bb0e:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 801bb12:	0290      	lsls	r0, r2, #10
 801bb14:	4602      	mov	r2, r0
 801bb16:	460b      	mov	r3, r1
 801bb18:	4610      	mov	r0, r2
 801bb1a:	4619      	mov	r1, r3
 801bb1c:	68fb      	ldr	r3, [r7, #12]
 801bb1e:	461a      	mov	r2, r3
 801bb20:	f04f 0300 	mov.w	r3, #0
 801bb24:	f7f0 fa94 	bl	800c050 <__aeabi_uldivmod>
 801bb28:	4602      	mov	r2, r0
 801bb2a:	460b      	mov	r3, r1
 801bb2c:	4613      	mov	r3, r2
 801bb2e:	617b      	str	r3, [r7, #20]
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 801bb30:	4b0a      	ldr	r3, [pc, #40]	; (801bb5c <HAL_RCC_GetSysClockFreq+0x2ac>)
 801bb32:	685b      	ldr	r3, [r3, #4]
 801bb34:	0f1b      	lsrs	r3, r3, #28
 801bb36:	f003 0307 	and.w	r3, r3, #7
 801bb3a:	607b      	str	r3, [r7, #4]

      sysclockfreq = pllvco/pllr;
 801bb3c:	697a      	ldr	r2, [r7, #20]
 801bb3e:	687b      	ldr	r3, [r7, #4]
 801bb40:	fbb2 f3f3 	udiv	r3, r2, r3
 801bb44:	613b      	str	r3, [r7, #16]
      break;
 801bb46:	e002      	b.n	801bb4e <HAL_RCC_GetSysClockFreq+0x29e>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 801bb48:	4b05      	ldr	r3, [pc, #20]	; (801bb60 <HAL_RCC_GetSysClockFreq+0x2b0>)
 801bb4a:	613b      	str	r3, [r7, #16]
      break;
 801bb4c:	bf00      	nop
    }
  }
  return sysclockfreq;
 801bb4e:	693b      	ldr	r3, [r7, #16]
}
 801bb50:	4618      	mov	r0, r3
 801bb52:	371c      	adds	r7, #28
 801bb54:	46bd      	mov	sp, r7
 801bb56:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801bb5a:	bf00      	nop
 801bb5c:	40023800 	.word	0x40023800
 801bb60:	00f42400 	.word	0x00f42400
 801bb64:	017d7840 	.word	0x017d7840

0801bb68 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 801bb68:	b580      	push	{r7, lr}
 801bb6a:	b086      	sub	sp, #24
 801bb6c:	af00      	add	r7, sp, #0
 801bb6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 801bb70:	687b      	ldr	r3, [r7, #4]
 801bb72:	2b00      	cmp	r3, #0
 801bb74:	d101      	bne.n	801bb7a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 801bb76:	2301      	movs	r3, #1
 801bb78:	e28d      	b.n	801c096 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 801bb7a:	687b      	ldr	r3, [r7, #4]
 801bb7c:	681b      	ldr	r3, [r3, #0]
 801bb7e:	f003 0301 	and.w	r3, r3, #1
 801bb82:	2b00      	cmp	r3, #0
 801bb84:	f000 8083 	beq.w	801bc8e <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 801bb88:	4b94      	ldr	r3, [pc, #592]	; (801bddc <HAL_RCC_OscConfig+0x274>)
 801bb8a:	689b      	ldr	r3, [r3, #8]
 801bb8c:	f003 030c 	and.w	r3, r3, #12
 801bb90:	2b04      	cmp	r3, #4
 801bb92:	d019      	beq.n	801bbc8 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 801bb94:	4b91      	ldr	r3, [pc, #580]	; (801bddc <HAL_RCC_OscConfig+0x274>)
 801bb96:	689b      	ldr	r3, [r3, #8]
 801bb98:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 801bb9c:	2b08      	cmp	r3, #8
 801bb9e:	d106      	bne.n	801bbae <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 801bba0:	4b8e      	ldr	r3, [pc, #568]	; (801bddc <HAL_RCC_OscConfig+0x274>)
 801bba2:	685b      	ldr	r3, [r3, #4]
 801bba4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 801bba8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 801bbac:	d00c      	beq.n	801bbc8 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 801bbae:	4b8b      	ldr	r3, [pc, #556]	; (801bddc <HAL_RCC_OscConfig+0x274>)
 801bbb0:	689b      	ldr	r3, [r3, #8]
 801bbb2:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 801bbb6:	2b0c      	cmp	r3, #12
 801bbb8:	d112      	bne.n	801bbe0 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 801bbba:	4b88      	ldr	r3, [pc, #544]	; (801bddc <HAL_RCC_OscConfig+0x274>)
 801bbbc:	685b      	ldr	r3, [r3, #4]
 801bbbe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 801bbc2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 801bbc6:	d10b      	bne.n	801bbe0 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 801bbc8:	4b84      	ldr	r3, [pc, #528]	; (801bddc <HAL_RCC_OscConfig+0x274>)
 801bbca:	681b      	ldr	r3, [r3, #0]
 801bbcc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801bbd0:	2b00      	cmp	r3, #0
 801bbd2:	d05b      	beq.n	801bc8c <HAL_RCC_OscConfig+0x124>
 801bbd4:	687b      	ldr	r3, [r7, #4]
 801bbd6:	685b      	ldr	r3, [r3, #4]
 801bbd8:	2b00      	cmp	r3, #0
 801bbda:	d157      	bne.n	801bc8c <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 801bbdc:	2301      	movs	r3, #1
 801bbde:	e25a      	b.n	801c096 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 801bbe0:	687b      	ldr	r3, [r7, #4]
 801bbe2:	685b      	ldr	r3, [r3, #4]
 801bbe4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801bbe8:	d106      	bne.n	801bbf8 <HAL_RCC_OscConfig+0x90>
 801bbea:	4b7c      	ldr	r3, [pc, #496]	; (801bddc <HAL_RCC_OscConfig+0x274>)
 801bbec:	681b      	ldr	r3, [r3, #0]
 801bbee:	4a7b      	ldr	r2, [pc, #492]	; (801bddc <HAL_RCC_OscConfig+0x274>)
 801bbf0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 801bbf4:	6013      	str	r3, [r2, #0]
 801bbf6:	e01d      	b.n	801bc34 <HAL_RCC_OscConfig+0xcc>
 801bbf8:	687b      	ldr	r3, [r7, #4]
 801bbfa:	685b      	ldr	r3, [r3, #4]
 801bbfc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 801bc00:	d10c      	bne.n	801bc1c <HAL_RCC_OscConfig+0xb4>
 801bc02:	4b76      	ldr	r3, [pc, #472]	; (801bddc <HAL_RCC_OscConfig+0x274>)
 801bc04:	681b      	ldr	r3, [r3, #0]
 801bc06:	4a75      	ldr	r2, [pc, #468]	; (801bddc <HAL_RCC_OscConfig+0x274>)
 801bc08:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 801bc0c:	6013      	str	r3, [r2, #0]
 801bc0e:	4b73      	ldr	r3, [pc, #460]	; (801bddc <HAL_RCC_OscConfig+0x274>)
 801bc10:	681b      	ldr	r3, [r3, #0]
 801bc12:	4a72      	ldr	r2, [pc, #456]	; (801bddc <HAL_RCC_OscConfig+0x274>)
 801bc14:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 801bc18:	6013      	str	r3, [r2, #0]
 801bc1a:	e00b      	b.n	801bc34 <HAL_RCC_OscConfig+0xcc>
 801bc1c:	4b6f      	ldr	r3, [pc, #444]	; (801bddc <HAL_RCC_OscConfig+0x274>)
 801bc1e:	681b      	ldr	r3, [r3, #0]
 801bc20:	4a6e      	ldr	r2, [pc, #440]	; (801bddc <HAL_RCC_OscConfig+0x274>)
 801bc22:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 801bc26:	6013      	str	r3, [r2, #0]
 801bc28:	4b6c      	ldr	r3, [pc, #432]	; (801bddc <HAL_RCC_OscConfig+0x274>)
 801bc2a:	681b      	ldr	r3, [r3, #0]
 801bc2c:	4a6b      	ldr	r2, [pc, #428]	; (801bddc <HAL_RCC_OscConfig+0x274>)
 801bc2e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 801bc32:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 801bc34:	687b      	ldr	r3, [r7, #4]
 801bc36:	685b      	ldr	r3, [r3, #4]
 801bc38:	2b00      	cmp	r3, #0
 801bc3a:	d013      	beq.n	801bc64 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801bc3c:	f7fc fbcc 	bl	80183d8 <HAL_GetTick>
 801bc40:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 801bc42:	e008      	b.n	801bc56 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 801bc44:	f7fc fbc8 	bl	80183d8 <HAL_GetTick>
 801bc48:	4602      	mov	r2, r0
 801bc4a:	693b      	ldr	r3, [r7, #16]
 801bc4c:	1ad3      	subs	r3, r2, r3
 801bc4e:	2b64      	cmp	r3, #100	; 0x64
 801bc50:	d901      	bls.n	801bc56 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 801bc52:	2303      	movs	r3, #3
 801bc54:	e21f      	b.n	801c096 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 801bc56:	4b61      	ldr	r3, [pc, #388]	; (801bddc <HAL_RCC_OscConfig+0x274>)
 801bc58:	681b      	ldr	r3, [r3, #0]
 801bc5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801bc5e:	2b00      	cmp	r3, #0
 801bc60:	d0f0      	beq.n	801bc44 <HAL_RCC_OscConfig+0xdc>
 801bc62:	e014      	b.n	801bc8e <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801bc64:	f7fc fbb8 	bl	80183d8 <HAL_GetTick>
 801bc68:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 801bc6a:	e008      	b.n	801bc7e <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 801bc6c:	f7fc fbb4 	bl	80183d8 <HAL_GetTick>
 801bc70:	4602      	mov	r2, r0
 801bc72:	693b      	ldr	r3, [r7, #16]
 801bc74:	1ad3      	subs	r3, r2, r3
 801bc76:	2b64      	cmp	r3, #100	; 0x64
 801bc78:	d901      	bls.n	801bc7e <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 801bc7a:	2303      	movs	r3, #3
 801bc7c:	e20b      	b.n	801c096 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 801bc7e:	4b57      	ldr	r3, [pc, #348]	; (801bddc <HAL_RCC_OscConfig+0x274>)
 801bc80:	681b      	ldr	r3, [r3, #0]
 801bc82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801bc86:	2b00      	cmp	r3, #0
 801bc88:	d1f0      	bne.n	801bc6c <HAL_RCC_OscConfig+0x104>
 801bc8a:	e000      	b.n	801bc8e <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 801bc8c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 801bc8e:	687b      	ldr	r3, [r7, #4]
 801bc90:	681b      	ldr	r3, [r3, #0]
 801bc92:	f003 0302 	and.w	r3, r3, #2
 801bc96:	2b00      	cmp	r3, #0
 801bc98:	d06f      	beq.n	801bd7a <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 801bc9a:	4b50      	ldr	r3, [pc, #320]	; (801bddc <HAL_RCC_OscConfig+0x274>)
 801bc9c:	689b      	ldr	r3, [r3, #8]
 801bc9e:	f003 030c 	and.w	r3, r3, #12
 801bca2:	2b00      	cmp	r3, #0
 801bca4:	d017      	beq.n	801bcd6 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 801bca6:	4b4d      	ldr	r3, [pc, #308]	; (801bddc <HAL_RCC_OscConfig+0x274>)
 801bca8:	689b      	ldr	r3, [r3, #8]
 801bcaa:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 801bcae:	2b08      	cmp	r3, #8
 801bcb0:	d105      	bne.n	801bcbe <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 801bcb2:	4b4a      	ldr	r3, [pc, #296]	; (801bddc <HAL_RCC_OscConfig+0x274>)
 801bcb4:	685b      	ldr	r3, [r3, #4]
 801bcb6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 801bcba:	2b00      	cmp	r3, #0
 801bcbc:	d00b      	beq.n	801bcd6 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 801bcbe:	4b47      	ldr	r3, [pc, #284]	; (801bddc <HAL_RCC_OscConfig+0x274>)
 801bcc0:	689b      	ldr	r3, [r3, #8]
 801bcc2:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 801bcc6:	2b0c      	cmp	r3, #12
 801bcc8:	d11c      	bne.n	801bd04 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 801bcca:	4b44      	ldr	r3, [pc, #272]	; (801bddc <HAL_RCC_OscConfig+0x274>)
 801bccc:	685b      	ldr	r3, [r3, #4]
 801bcce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 801bcd2:	2b00      	cmp	r3, #0
 801bcd4:	d116      	bne.n	801bd04 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 801bcd6:	4b41      	ldr	r3, [pc, #260]	; (801bddc <HAL_RCC_OscConfig+0x274>)
 801bcd8:	681b      	ldr	r3, [r3, #0]
 801bcda:	f003 0302 	and.w	r3, r3, #2
 801bcde:	2b00      	cmp	r3, #0
 801bce0:	d005      	beq.n	801bcee <HAL_RCC_OscConfig+0x186>
 801bce2:	687b      	ldr	r3, [r7, #4]
 801bce4:	68db      	ldr	r3, [r3, #12]
 801bce6:	2b01      	cmp	r3, #1
 801bce8:	d001      	beq.n	801bcee <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 801bcea:	2301      	movs	r3, #1
 801bcec:	e1d3      	b.n	801c096 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 801bcee:	4b3b      	ldr	r3, [pc, #236]	; (801bddc <HAL_RCC_OscConfig+0x274>)
 801bcf0:	681b      	ldr	r3, [r3, #0]
 801bcf2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 801bcf6:	687b      	ldr	r3, [r7, #4]
 801bcf8:	691b      	ldr	r3, [r3, #16]
 801bcfa:	00db      	lsls	r3, r3, #3
 801bcfc:	4937      	ldr	r1, [pc, #220]	; (801bddc <HAL_RCC_OscConfig+0x274>)
 801bcfe:	4313      	orrs	r3, r2
 801bd00:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 801bd02:	e03a      	b.n	801bd7a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 801bd04:	687b      	ldr	r3, [r7, #4]
 801bd06:	68db      	ldr	r3, [r3, #12]
 801bd08:	2b00      	cmp	r3, #0
 801bd0a:	d020      	beq.n	801bd4e <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 801bd0c:	4b34      	ldr	r3, [pc, #208]	; (801bde0 <HAL_RCC_OscConfig+0x278>)
 801bd0e:	2201      	movs	r2, #1
 801bd10:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801bd12:	f7fc fb61 	bl	80183d8 <HAL_GetTick>
 801bd16:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 801bd18:	e008      	b.n	801bd2c <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 801bd1a:	f7fc fb5d 	bl	80183d8 <HAL_GetTick>
 801bd1e:	4602      	mov	r2, r0
 801bd20:	693b      	ldr	r3, [r7, #16]
 801bd22:	1ad3      	subs	r3, r2, r3
 801bd24:	2b02      	cmp	r3, #2
 801bd26:	d901      	bls.n	801bd2c <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 801bd28:	2303      	movs	r3, #3
 801bd2a:	e1b4      	b.n	801c096 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 801bd2c:	4b2b      	ldr	r3, [pc, #172]	; (801bddc <HAL_RCC_OscConfig+0x274>)
 801bd2e:	681b      	ldr	r3, [r3, #0]
 801bd30:	f003 0302 	and.w	r3, r3, #2
 801bd34:	2b00      	cmp	r3, #0
 801bd36:	d0f0      	beq.n	801bd1a <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 801bd38:	4b28      	ldr	r3, [pc, #160]	; (801bddc <HAL_RCC_OscConfig+0x274>)
 801bd3a:	681b      	ldr	r3, [r3, #0]
 801bd3c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 801bd40:	687b      	ldr	r3, [r7, #4]
 801bd42:	691b      	ldr	r3, [r3, #16]
 801bd44:	00db      	lsls	r3, r3, #3
 801bd46:	4925      	ldr	r1, [pc, #148]	; (801bddc <HAL_RCC_OscConfig+0x274>)
 801bd48:	4313      	orrs	r3, r2
 801bd4a:	600b      	str	r3, [r1, #0]
 801bd4c:	e015      	b.n	801bd7a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 801bd4e:	4b24      	ldr	r3, [pc, #144]	; (801bde0 <HAL_RCC_OscConfig+0x278>)
 801bd50:	2200      	movs	r2, #0
 801bd52:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801bd54:	f7fc fb40 	bl	80183d8 <HAL_GetTick>
 801bd58:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 801bd5a:	e008      	b.n	801bd6e <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 801bd5c:	f7fc fb3c 	bl	80183d8 <HAL_GetTick>
 801bd60:	4602      	mov	r2, r0
 801bd62:	693b      	ldr	r3, [r7, #16]
 801bd64:	1ad3      	subs	r3, r2, r3
 801bd66:	2b02      	cmp	r3, #2
 801bd68:	d901      	bls.n	801bd6e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 801bd6a:	2303      	movs	r3, #3
 801bd6c:	e193      	b.n	801c096 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 801bd6e:	4b1b      	ldr	r3, [pc, #108]	; (801bddc <HAL_RCC_OscConfig+0x274>)
 801bd70:	681b      	ldr	r3, [r3, #0]
 801bd72:	f003 0302 	and.w	r3, r3, #2
 801bd76:	2b00      	cmp	r3, #0
 801bd78:	d1f0      	bne.n	801bd5c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 801bd7a:	687b      	ldr	r3, [r7, #4]
 801bd7c:	681b      	ldr	r3, [r3, #0]
 801bd7e:	f003 0308 	and.w	r3, r3, #8
 801bd82:	2b00      	cmp	r3, #0
 801bd84:	d036      	beq.n	801bdf4 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 801bd86:	687b      	ldr	r3, [r7, #4]
 801bd88:	695b      	ldr	r3, [r3, #20]
 801bd8a:	2b00      	cmp	r3, #0
 801bd8c:	d016      	beq.n	801bdbc <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 801bd8e:	4b15      	ldr	r3, [pc, #84]	; (801bde4 <HAL_RCC_OscConfig+0x27c>)
 801bd90:	2201      	movs	r2, #1
 801bd92:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 801bd94:	f7fc fb20 	bl	80183d8 <HAL_GetTick>
 801bd98:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 801bd9a:	e008      	b.n	801bdae <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 801bd9c:	f7fc fb1c 	bl	80183d8 <HAL_GetTick>
 801bda0:	4602      	mov	r2, r0
 801bda2:	693b      	ldr	r3, [r7, #16]
 801bda4:	1ad3      	subs	r3, r2, r3
 801bda6:	2b02      	cmp	r3, #2
 801bda8:	d901      	bls.n	801bdae <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 801bdaa:	2303      	movs	r3, #3
 801bdac:	e173      	b.n	801c096 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 801bdae:	4b0b      	ldr	r3, [pc, #44]	; (801bddc <HAL_RCC_OscConfig+0x274>)
 801bdb0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801bdb2:	f003 0302 	and.w	r3, r3, #2
 801bdb6:	2b00      	cmp	r3, #0
 801bdb8:	d0f0      	beq.n	801bd9c <HAL_RCC_OscConfig+0x234>
 801bdba:	e01b      	b.n	801bdf4 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 801bdbc:	4b09      	ldr	r3, [pc, #36]	; (801bde4 <HAL_RCC_OscConfig+0x27c>)
 801bdbe:	2200      	movs	r2, #0
 801bdc0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 801bdc2:	f7fc fb09 	bl	80183d8 <HAL_GetTick>
 801bdc6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 801bdc8:	e00e      	b.n	801bde8 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 801bdca:	f7fc fb05 	bl	80183d8 <HAL_GetTick>
 801bdce:	4602      	mov	r2, r0
 801bdd0:	693b      	ldr	r3, [r7, #16]
 801bdd2:	1ad3      	subs	r3, r2, r3
 801bdd4:	2b02      	cmp	r3, #2
 801bdd6:	d907      	bls.n	801bde8 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 801bdd8:	2303      	movs	r3, #3
 801bdda:	e15c      	b.n	801c096 <HAL_RCC_OscConfig+0x52e>
 801bddc:	40023800 	.word	0x40023800
 801bde0:	42470000 	.word	0x42470000
 801bde4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 801bde8:	4b8a      	ldr	r3, [pc, #552]	; (801c014 <HAL_RCC_OscConfig+0x4ac>)
 801bdea:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801bdec:	f003 0302 	and.w	r3, r3, #2
 801bdf0:	2b00      	cmp	r3, #0
 801bdf2:	d1ea      	bne.n	801bdca <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 801bdf4:	687b      	ldr	r3, [r7, #4]
 801bdf6:	681b      	ldr	r3, [r3, #0]
 801bdf8:	f003 0304 	and.w	r3, r3, #4
 801bdfc:	2b00      	cmp	r3, #0
 801bdfe:	f000 8097 	beq.w	801bf30 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 801be02:	2300      	movs	r3, #0
 801be04:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 801be06:	4b83      	ldr	r3, [pc, #524]	; (801c014 <HAL_RCC_OscConfig+0x4ac>)
 801be08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801be0a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 801be0e:	2b00      	cmp	r3, #0
 801be10:	d10f      	bne.n	801be32 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 801be12:	2300      	movs	r3, #0
 801be14:	60bb      	str	r3, [r7, #8]
 801be16:	4b7f      	ldr	r3, [pc, #508]	; (801c014 <HAL_RCC_OscConfig+0x4ac>)
 801be18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801be1a:	4a7e      	ldr	r2, [pc, #504]	; (801c014 <HAL_RCC_OscConfig+0x4ac>)
 801be1c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 801be20:	6413      	str	r3, [r2, #64]	; 0x40
 801be22:	4b7c      	ldr	r3, [pc, #496]	; (801c014 <HAL_RCC_OscConfig+0x4ac>)
 801be24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801be26:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 801be2a:	60bb      	str	r3, [r7, #8]
 801be2c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 801be2e:	2301      	movs	r3, #1
 801be30:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 801be32:	4b79      	ldr	r3, [pc, #484]	; (801c018 <HAL_RCC_OscConfig+0x4b0>)
 801be34:	681b      	ldr	r3, [r3, #0]
 801be36:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801be3a:	2b00      	cmp	r3, #0
 801be3c:	d118      	bne.n	801be70 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 801be3e:	4b76      	ldr	r3, [pc, #472]	; (801c018 <HAL_RCC_OscConfig+0x4b0>)
 801be40:	681b      	ldr	r3, [r3, #0]
 801be42:	4a75      	ldr	r2, [pc, #468]	; (801c018 <HAL_RCC_OscConfig+0x4b0>)
 801be44:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 801be48:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 801be4a:	f7fc fac5 	bl	80183d8 <HAL_GetTick>
 801be4e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 801be50:	e008      	b.n	801be64 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 801be52:	f7fc fac1 	bl	80183d8 <HAL_GetTick>
 801be56:	4602      	mov	r2, r0
 801be58:	693b      	ldr	r3, [r7, #16]
 801be5a:	1ad3      	subs	r3, r2, r3
 801be5c:	2b02      	cmp	r3, #2
 801be5e:	d901      	bls.n	801be64 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 801be60:	2303      	movs	r3, #3
 801be62:	e118      	b.n	801c096 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 801be64:	4b6c      	ldr	r3, [pc, #432]	; (801c018 <HAL_RCC_OscConfig+0x4b0>)
 801be66:	681b      	ldr	r3, [r3, #0]
 801be68:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801be6c:	2b00      	cmp	r3, #0
 801be6e:	d0f0      	beq.n	801be52 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 801be70:	687b      	ldr	r3, [r7, #4]
 801be72:	689b      	ldr	r3, [r3, #8]
 801be74:	2b01      	cmp	r3, #1
 801be76:	d106      	bne.n	801be86 <HAL_RCC_OscConfig+0x31e>
 801be78:	4b66      	ldr	r3, [pc, #408]	; (801c014 <HAL_RCC_OscConfig+0x4ac>)
 801be7a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801be7c:	4a65      	ldr	r2, [pc, #404]	; (801c014 <HAL_RCC_OscConfig+0x4ac>)
 801be7e:	f043 0301 	orr.w	r3, r3, #1
 801be82:	6713      	str	r3, [r2, #112]	; 0x70
 801be84:	e01c      	b.n	801bec0 <HAL_RCC_OscConfig+0x358>
 801be86:	687b      	ldr	r3, [r7, #4]
 801be88:	689b      	ldr	r3, [r3, #8]
 801be8a:	2b05      	cmp	r3, #5
 801be8c:	d10c      	bne.n	801bea8 <HAL_RCC_OscConfig+0x340>
 801be8e:	4b61      	ldr	r3, [pc, #388]	; (801c014 <HAL_RCC_OscConfig+0x4ac>)
 801be90:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801be92:	4a60      	ldr	r2, [pc, #384]	; (801c014 <HAL_RCC_OscConfig+0x4ac>)
 801be94:	f043 0304 	orr.w	r3, r3, #4
 801be98:	6713      	str	r3, [r2, #112]	; 0x70
 801be9a:	4b5e      	ldr	r3, [pc, #376]	; (801c014 <HAL_RCC_OscConfig+0x4ac>)
 801be9c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801be9e:	4a5d      	ldr	r2, [pc, #372]	; (801c014 <HAL_RCC_OscConfig+0x4ac>)
 801bea0:	f043 0301 	orr.w	r3, r3, #1
 801bea4:	6713      	str	r3, [r2, #112]	; 0x70
 801bea6:	e00b      	b.n	801bec0 <HAL_RCC_OscConfig+0x358>
 801bea8:	4b5a      	ldr	r3, [pc, #360]	; (801c014 <HAL_RCC_OscConfig+0x4ac>)
 801beaa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801beac:	4a59      	ldr	r2, [pc, #356]	; (801c014 <HAL_RCC_OscConfig+0x4ac>)
 801beae:	f023 0301 	bic.w	r3, r3, #1
 801beb2:	6713      	str	r3, [r2, #112]	; 0x70
 801beb4:	4b57      	ldr	r3, [pc, #348]	; (801c014 <HAL_RCC_OscConfig+0x4ac>)
 801beb6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801beb8:	4a56      	ldr	r2, [pc, #344]	; (801c014 <HAL_RCC_OscConfig+0x4ac>)
 801beba:	f023 0304 	bic.w	r3, r3, #4
 801bebe:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 801bec0:	687b      	ldr	r3, [r7, #4]
 801bec2:	689b      	ldr	r3, [r3, #8]
 801bec4:	2b00      	cmp	r3, #0
 801bec6:	d015      	beq.n	801bef4 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 801bec8:	f7fc fa86 	bl	80183d8 <HAL_GetTick>
 801becc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 801bece:	e00a      	b.n	801bee6 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 801bed0:	f7fc fa82 	bl	80183d8 <HAL_GetTick>
 801bed4:	4602      	mov	r2, r0
 801bed6:	693b      	ldr	r3, [r7, #16]
 801bed8:	1ad3      	subs	r3, r2, r3
 801beda:	f241 3288 	movw	r2, #5000	; 0x1388
 801bede:	4293      	cmp	r3, r2
 801bee0:	d901      	bls.n	801bee6 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 801bee2:	2303      	movs	r3, #3
 801bee4:	e0d7      	b.n	801c096 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 801bee6:	4b4b      	ldr	r3, [pc, #300]	; (801c014 <HAL_RCC_OscConfig+0x4ac>)
 801bee8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801beea:	f003 0302 	and.w	r3, r3, #2
 801beee:	2b00      	cmp	r3, #0
 801bef0:	d0ee      	beq.n	801bed0 <HAL_RCC_OscConfig+0x368>
 801bef2:	e014      	b.n	801bf1e <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 801bef4:	f7fc fa70 	bl	80183d8 <HAL_GetTick>
 801bef8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 801befa:	e00a      	b.n	801bf12 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 801befc:	f7fc fa6c 	bl	80183d8 <HAL_GetTick>
 801bf00:	4602      	mov	r2, r0
 801bf02:	693b      	ldr	r3, [r7, #16]
 801bf04:	1ad3      	subs	r3, r2, r3
 801bf06:	f241 3288 	movw	r2, #5000	; 0x1388
 801bf0a:	4293      	cmp	r3, r2
 801bf0c:	d901      	bls.n	801bf12 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 801bf0e:	2303      	movs	r3, #3
 801bf10:	e0c1      	b.n	801c096 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 801bf12:	4b40      	ldr	r3, [pc, #256]	; (801c014 <HAL_RCC_OscConfig+0x4ac>)
 801bf14:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801bf16:	f003 0302 	and.w	r3, r3, #2
 801bf1a:	2b00      	cmp	r3, #0
 801bf1c:	d1ee      	bne.n	801befc <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 801bf1e:	7dfb      	ldrb	r3, [r7, #23]
 801bf20:	2b01      	cmp	r3, #1
 801bf22:	d105      	bne.n	801bf30 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 801bf24:	4b3b      	ldr	r3, [pc, #236]	; (801c014 <HAL_RCC_OscConfig+0x4ac>)
 801bf26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801bf28:	4a3a      	ldr	r2, [pc, #232]	; (801c014 <HAL_RCC_OscConfig+0x4ac>)
 801bf2a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 801bf2e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 801bf30:	687b      	ldr	r3, [r7, #4]
 801bf32:	699b      	ldr	r3, [r3, #24]
 801bf34:	2b00      	cmp	r3, #0
 801bf36:	f000 80ad 	beq.w	801c094 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 801bf3a:	4b36      	ldr	r3, [pc, #216]	; (801c014 <HAL_RCC_OscConfig+0x4ac>)
 801bf3c:	689b      	ldr	r3, [r3, #8]
 801bf3e:	f003 030c 	and.w	r3, r3, #12
 801bf42:	2b08      	cmp	r3, #8
 801bf44:	d060      	beq.n	801c008 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 801bf46:	687b      	ldr	r3, [r7, #4]
 801bf48:	699b      	ldr	r3, [r3, #24]
 801bf4a:	2b02      	cmp	r3, #2
 801bf4c:	d145      	bne.n	801bfda <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 801bf4e:	4b33      	ldr	r3, [pc, #204]	; (801c01c <HAL_RCC_OscConfig+0x4b4>)
 801bf50:	2200      	movs	r2, #0
 801bf52:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801bf54:	f7fc fa40 	bl	80183d8 <HAL_GetTick>
 801bf58:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 801bf5a:	e008      	b.n	801bf6e <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 801bf5c:	f7fc fa3c 	bl	80183d8 <HAL_GetTick>
 801bf60:	4602      	mov	r2, r0
 801bf62:	693b      	ldr	r3, [r7, #16]
 801bf64:	1ad3      	subs	r3, r2, r3
 801bf66:	2b02      	cmp	r3, #2
 801bf68:	d901      	bls.n	801bf6e <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 801bf6a:	2303      	movs	r3, #3
 801bf6c:	e093      	b.n	801c096 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 801bf6e:	4b29      	ldr	r3, [pc, #164]	; (801c014 <HAL_RCC_OscConfig+0x4ac>)
 801bf70:	681b      	ldr	r3, [r3, #0]
 801bf72:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 801bf76:	2b00      	cmp	r3, #0
 801bf78:	d1f0      	bne.n	801bf5c <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 801bf7a:	687b      	ldr	r3, [r7, #4]
 801bf7c:	69da      	ldr	r2, [r3, #28]
 801bf7e:	687b      	ldr	r3, [r7, #4]
 801bf80:	6a1b      	ldr	r3, [r3, #32]
 801bf82:	431a      	orrs	r2, r3
 801bf84:	687b      	ldr	r3, [r7, #4]
 801bf86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801bf88:	019b      	lsls	r3, r3, #6
 801bf8a:	431a      	orrs	r2, r3
 801bf8c:	687b      	ldr	r3, [r7, #4]
 801bf8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801bf90:	085b      	lsrs	r3, r3, #1
 801bf92:	3b01      	subs	r3, #1
 801bf94:	041b      	lsls	r3, r3, #16
 801bf96:	431a      	orrs	r2, r3
 801bf98:	687b      	ldr	r3, [r7, #4]
 801bf9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801bf9c:	061b      	lsls	r3, r3, #24
 801bf9e:	431a      	orrs	r2, r3
 801bfa0:	687b      	ldr	r3, [r7, #4]
 801bfa2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801bfa4:	071b      	lsls	r3, r3, #28
 801bfa6:	491b      	ldr	r1, [pc, #108]	; (801c014 <HAL_RCC_OscConfig+0x4ac>)
 801bfa8:	4313      	orrs	r3, r2
 801bfaa:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 801bfac:	4b1b      	ldr	r3, [pc, #108]	; (801c01c <HAL_RCC_OscConfig+0x4b4>)
 801bfae:	2201      	movs	r2, #1
 801bfb0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801bfb2:	f7fc fa11 	bl	80183d8 <HAL_GetTick>
 801bfb6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 801bfb8:	e008      	b.n	801bfcc <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 801bfba:	f7fc fa0d 	bl	80183d8 <HAL_GetTick>
 801bfbe:	4602      	mov	r2, r0
 801bfc0:	693b      	ldr	r3, [r7, #16]
 801bfc2:	1ad3      	subs	r3, r2, r3
 801bfc4:	2b02      	cmp	r3, #2
 801bfc6:	d901      	bls.n	801bfcc <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 801bfc8:	2303      	movs	r3, #3
 801bfca:	e064      	b.n	801c096 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 801bfcc:	4b11      	ldr	r3, [pc, #68]	; (801c014 <HAL_RCC_OscConfig+0x4ac>)
 801bfce:	681b      	ldr	r3, [r3, #0]
 801bfd0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 801bfd4:	2b00      	cmp	r3, #0
 801bfd6:	d0f0      	beq.n	801bfba <HAL_RCC_OscConfig+0x452>
 801bfd8:	e05c      	b.n	801c094 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 801bfda:	4b10      	ldr	r3, [pc, #64]	; (801c01c <HAL_RCC_OscConfig+0x4b4>)
 801bfdc:	2200      	movs	r2, #0
 801bfde:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801bfe0:	f7fc f9fa 	bl	80183d8 <HAL_GetTick>
 801bfe4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 801bfe6:	e008      	b.n	801bffa <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 801bfe8:	f7fc f9f6 	bl	80183d8 <HAL_GetTick>
 801bfec:	4602      	mov	r2, r0
 801bfee:	693b      	ldr	r3, [r7, #16]
 801bff0:	1ad3      	subs	r3, r2, r3
 801bff2:	2b02      	cmp	r3, #2
 801bff4:	d901      	bls.n	801bffa <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 801bff6:	2303      	movs	r3, #3
 801bff8:	e04d      	b.n	801c096 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 801bffa:	4b06      	ldr	r3, [pc, #24]	; (801c014 <HAL_RCC_OscConfig+0x4ac>)
 801bffc:	681b      	ldr	r3, [r3, #0]
 801bffe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 801c002:	2b00      	cmp	r3, #0
 801c004:	d1f0      	bne.n	801bfe8 <HAL_RCC_OscConfig+0x480>
 801c006:	e045      	b.n	801c094 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 801c008:	687b      	ldr	r3, [r7, #4]
 801c00a:	699b      	ldr	r3, [r3, #24]
 801c00c:	2b01      	cmp	r3, #1
 801c00e:	d107      	bne.n	801c020 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 801c010:	2301      	movs	r3, #1
 801c012:	e040      	b.n	801c096 <HAL_RCC_OscConfig+0x52e>
 801c014:	40023800 	.word	0x40023800
 801c018:	40007000 	.word	0x40007000
 801c01c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 801c020:	4b1f      	ldr	r3, [pc, #124]	; (801c0a0 <HAL_RCC_OscConfig+0x538>)
 801c022:	685b      	ldr	r3, [r3, #4]
 801c024:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 801c026:	687b      	ldr	r3, [r7, #4]
 801c028:	699b      	ldr	r3, [r3, #24]
 801c02a:	2b01      	cmp	r3, #1
 801c02c:	d030      	beq.n	801c090 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 801c02e:	68fb      	ldr	r3, [r7, #12]
 801c030:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 801c034:	687b      	ldr	r3, [r7, #4]
 801c036:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 801c038:	429a      	cmp	r2, r3
 801c03a:	d129      	bne.n	801c090 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 801c03c:	68fb      	ldr	r3, [r7, #12]
 801c03e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 801c042:	687b      	ldr	r3, [r7, #4]
 801c044:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 801c046:	429a      	cmp	r2, r3
 801c048:	d122      	bne.n	801c090 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 801c04a:	68fa      	ldr	r2, [r7, #12]
 801c04c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 801c050:	4013      	ands	r3, r2
 801c052:	687a      	ldr	r2, [r7, #4]
 801c054:	6a52      	ldr	r2, [r2, #36]	; 0x24
 801c056:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 801c058:	4293      	cmp	r3, r2
 801c05a:	d119      	bne.n	801c090 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 801c05c:	68fb      	ldr	r3, [r7, #12]
 801c05e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 801c062:	687b      	ldr	r3, [r7, #4]
 801c064:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801c066:	085b      	lsrs	r3, r3, #1
 801c068:	3b01      	subs	r3, #1
 801c06a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 801c06c:	429a      	cmp	r2, r3
 801c06e:	d10f      	bne.n	801c090 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 801c070:	68fb      	ldr	r3, [r7, #12]
 801c072:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 801c076:	687b      	ldr	r3, [r7, #4]
 801c078:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801c07a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 801c07c:	429a      	cmp	r2, r3
 801c07e:	d107      	bne.n	801c090 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 801c080:	68fb      	ldr	r3, [r7, #12]
 801c082:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 801c086:	687b      	ldr	r3, [r7, #4]
 801c088:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801c08a:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 801c08c:	429a      	cmp	r2, r3
 801c08e:	d001      	beq.n	801c094 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 801c090:	2301      	movs	r3, #1
 801c092:	e000      	b.n	801c096 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 801c094:	2300      	movs	r3, #0
}
 801c096:	4618      	mov	r0, r3
 801c098:	3718      	adds	r7, #24
 801c09a:	46bd      	mov	sp, r7
 801c09c:	bd80      	pop	{r7, pc}
 801c09e:	bf00      	nop
 801c0a0:	40023800 	.word	0x40023800

0801c0a4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 801c0a4:	b580      	push	{r7, lr}
 801c0a6:	b082      	sub	sp, #8
 801c0a8:	af00      	add	r7, sp, #0
 801c0aa:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 801c0ac:	687b      	ldr	r3, [r7, #4]
 801c0ae:	2b00      	cmp	r3, #0
 801c0b0:	d101      	bne.n	801c0b6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 801c0b2:	2301      	movs	r3, #1
 801c0b4:	e07b      	b.n	801c1ae <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 801c0b6:	687b      	ldr	r3, [r7, #4]
 801c0b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801c0ba:	2b00      	cmp	r3, #0
 801c0bc:	d108      	bne.n	801c0d0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 801c0be:	687b      	ldr	r3, [r7, #4]
 801c0c0:	685b      	ldr	r3, [r3, #4]
 801c0c2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 801c0c6:	d009      	beq.n	801c0dc <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 801c0c8:	687b      	ldr	r3, [r7, #4]
 801c0ca:	2200      	movs	r2, #0
 801c0cc:	61da      	str	r2, [r3, #28]
 801c0ce:	e005      	b.n	801c0dc <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 801c0d0:	687b      	ldr	r3, [r7, #4]
 801c0d2:	2200      	movs	r2, #0
 801c0d4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 801c0d6:	687b      	ldr	r3, [r7, #4]
 801c0d8:	2200      	movs	r2, #0
 801c0da:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 801c0dc:	687b      	ldr	r3, [r7, #4]
 801c0de:	2200      	movs	r2, #0
 801c0e0:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 801c0e2:	687b      	ldr	r3, [r7, #4]
 801c0e4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 801c0e8:	b2db      	uxtb	r3, r3
 801c0ea:	2b00      	cmp	r3, #0
 801c0ec:	d106      	bne.n	801c0fc <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 801c0ee:	687b      	ldr	r3, [r7, #4]
 801c0f0:	2200      	movs	r2, #0
 801c0f2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 801c0f6:	6878      	ldr	r0, [r7, #4]
 801c0f8:	f7fb fefc 	bl	8017ef4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 801c0fc:	687b      	ldr	r3, [r7, #4]
 801c0fe:	2202      	movs	r2, #2
 801c100:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 801c104:	687b      	ldr	r3, [r7, #4]
 801c106:	681b      	ldr	r3, [r3, #0]
 801c108:	681a      	ldr	r2, [r3, #0]
 801c10a:	687b      	ldr	r3, [r7, #4]
 801c10c:	681b      	ldr	r3, [r3, #0]
 801c10e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 801c112:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 801c114:	687b      	ldr	r3, [r7, #4]
 801c116:	685b      	ldr	r3, [r3, #4]
 801c118:	f403 7282 	and.w	r2, r3, #260	; 0x104
 801c11c:	687b      	ldr	r3, [r7, #4]
 801c11e:	689b      	ldr	r3, [r3, #8]
 801c120:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 801c124:	431a      	orrs	r2, r3
 801c126:	687b      	ldr	r3, [r7, #4]
 801c128:	68db      	ldr	r3, [r3, #12]
 801c12a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 801c12e:	431a      	orrs	r2, r3
 801c130:	687b      	ldr	r3, [r7, #4]
 801c132:	691b      	ldr	r3, [r3, #16]
 801c134:	f003 0302 	and.w	r3, r3, #2
 801c138:	431a      	orrs	r2, r3
 801c13a:	687b      	ldr	r3, [r7, #4]
 801c13c:	695b      	ldr	r3, [r3, #20]
 801c13e:	f003 0301 	and.w	r3, r3, #1
 801c142:	431a      	orrs	r2, r3
 801c144:	687b      	ldr	r3, [r7, #4]
 801c146:	699b      	ldr	r3, [r3, #24]
 801c148:	f403 7300 	and.w	r3, r3, #512	; 0x200
 801c14c:	431a      	orrs	r2, r3
 801c14e:	687b      	ldr	r3, [r7, #4]
 801c150:	69db      	ldr	r3, [r3, #28]
 801c152:	f003 0338 	and.w	r3, r3, #56	; 0x38
 801c156:	431a      	orrs	r2, r3
 801c158:	687b      	ldr	r3, [r7, #4]
 801c15a:	6a1b      	ldr	r3, [r3, #32]
 801c15c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801c160:	ea42 0103 	orr.w	r1, r2, r3
 801c164:	687b      	ldr	r3, [r7, #4]
 801c166:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801c168:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 801c16c:	687b      	ldr	r3, [r7, #4]
 801c16e:	681b      	ldr	r3, [r3, #0]
 801c170:	430a      	orrs	r2, r1
 801c172:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 801c174:	687b      	ldr	r3, [r7, #4]
 801c176:	699b      	ldr	r3, [r3, #24]
 801c178:	0c1b      	lsrs	r3, r3, #16
 801c17a:	f003 0104 	and.w	r1, r3, #4
 801c17e:	687b      	ldr	r3, [r7, #4]
 801c180:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801c182:	f003 0210 	and.w	r2, r3, #16
 801c186:	687b      	ldr	r3, [r7, #4]
 801c188:	681b      	ldr	r3, [r3, #0]
 801c18a:	430a      	orrs	r2, r1
 801c18c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 801c18e:	687b      	ldr	r3, [r7, #4]
 801c190:	681b      	ldr	r3, [r3, #0]
 801c192:	69da      	ldr	r2, [r3, #28]
 801c194:	687b      	ldr	r3, [r7, #4]
 801c196:	681b      	ldr	r3, [r3, #0]
 801c198:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 801c19c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 801c19e:	687b      	ldr	r3, [r7, #4]
 801c1a0:	2200      	movs	r2, #0
 801c1a2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 801c1a4:	687b      	ldr	r3, [r7, #4]
 801c1a6:	2201      	movs	r2, #1
 801c1a8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 801c1ac:	2300      	movs	r3, #0
}
 801c1ae:	4618      	mov	r0, r3
 801c1b0:	3708      	adds	r7, #8
 801c1b2:	46bd      	mov	sp, r7
 801c1b4:	bd80      	pop	{r7, pc}

0801c1b6 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 801c1b6:	b580      	push	{r7, lr}
 801c1b8:	b088      	sub	sp, #32
 801c1ba:	af00      	add	r7, sp, #0
 801c1bc:	60f8      	str	r0, [r7, #12]
 801c1be:	60b9      	str	r1, [r7, #8]
 801c1c0:	603b      	str	r3, [r7, #0]
 801c1c2:	4613      	mov	r3, r2
 801c1c4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 801c1c6:	2300      	movs	r3, #0
 801c1c8:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 801c1ca:	68fb      	ldr	r3, [r7, #12]
 801c1cc:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 801c1d0:	2b01      	cmp	r3, #1
 801c1d2:	d101      	bne.n	801c1d8 <HAL_SPI_Transmit+0x22>
 801c1d4:	2302      	movs	r3, #2
 801c1d6:	e126      	b.n	801c426 <HAL_SPI_Transmit+0x270>
 801c1d8:	68fb      	ldr	r3, [r7, #12]
 801c1da:	2201      	movs	r2, #1
 801c1dc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 801c1e0:	f7fc f8fa 	bl	80183d8 <HAL_GetTick>
 801c1e4:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 801c1e6:	88fb      	ldrh	r3, [r7, #6]
 801c1e8:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 801c1ea:	68fb      	ldr	r3, [r7, #12]
 801c1ec:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 801c1f0:	b2db      	uxtb	r3, r3
 801c1f2:	2b01      	cmp	r3, #1
 801c1f4:	d002      	beq.n	801c1fc <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 801c1f6:	2302      	movs	r3, #2
 801c1f8:	77fb      	strb	r3, [r7, #31]
    goto error;
 801c1fa:	e10b      	b.n	801c414 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 801c1fc:	68bb      	ldr	r3, [r7, #8]
 801c1fe:	2b00      	cmp	r3, #0
 801c200:	d002      	beq.n	801c208 <HAL_SPI_Transmit+0x52>
 801c202:	88fb      	ldrh	r3, [r7, #6]
 801c204:	2b00      	cmp	r3, #0
 801c206:	d102      	bne.n	801c20e <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 801c208:	2301      	movs	r3, #1
 801c20a:	77fb      	strb	r3, [r7, #31]
    goto error;
 801c20c:	e102      	b.n	801c414 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 801c20e:	68fb      	ldr	r3, [r7, #12]
 801c210:	2203      	movs	r2, #3
 801c212:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 801c216:	68fb      	ldr	r3, [r7, #12]
 801c218:	2200      	movs	r2, #0
 801c21a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 801c21c:	68fb      	ldr	r3, [r7, #12]
 801c21e:	68ba      	ldr	r2, [r7, #8]
 801c220:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 801c222:	68fb      	ldr	r3, [r7, #12]
 801c224:	88fa      	ldrh	r2, [r7, #6]
 801c226:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 801c228:	68fb      	ldr	r3, [r7, #12]
 801c22a:	88fa      	ldrh	r2, [r7, #6]
 801c22c:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 801c22e:	68fb      	ldr	r3, [r7, #12]
 801c230:	2200      	movs	r2, #0
 801c232:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 801c234:	68fb      	ldr	r3, [r7, #12]
 801c236:	2200      	movs	r2, #0
 801c238:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 801c23a:	68fb      	ldr	r3, [r7, #12]
 801c23c:	2200      	movs	r2, #0
 801c23e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 801c240:	68fb      	ldr	r3, [r7, #12]
 801c242:	2200      	movs	r2, #0
 801c244:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 801c246:	68fb      	ldr	r3, [r7, #12]
 801c248:	2200      	movs	r2, #0
 801c24a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 801c24c:	68fb      	ldr	r3, [r7, #12]
 801c24e:	689b      	ldr	r3, [r3, #8]
 801c250:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801c254:	d10f      	bne.n	801c276 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 801c256:	68fb      	ldr	r3, [r7, #12]
 801c258:	681b      	ldr	r3, [r3, #0]
 801c25a:	681a      	ldr	r2, [r3, #0]
 801c25c:	68fb      	ldr	r3, [r7, #12]
 801c25e:	681b      	ldr	r3, [r3, #0]
 801c260:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 801c264:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 801c266:	68fb      	ldr	r3, [r7, #12]
 801c268:	681b      	ldr	r3, [r3, #0]
 801c26a:	681a      	ldr	r2, [r3, #0]
 801c26c:	68fb      	ldr	r3, [r7, #12]
 801c26e:	681b      	ldr	r3, [r3, #0]
 801c270:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 801c274:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 801c276:	68fb      	ldr	r3, [r7, #12]
 801c278:	681b      	ldr	r3, [r3, #0]
 801c27a:	681b      	ldr	r3, [r3, #0]
 801c27c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801c280:	2b40      	cmp	r3, #64	; 0x40
 801c282:	d007      	beq.n	801c294 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 801c284:	68fb      	ldr	r3, [r7, #12]
 801c286:	681b      	ldr	r3, [r3, #0]
 801c288:	681a      	ldr	r2, [r3, #0]
 801c28a:	68fb      	ldr	r3, [r7, #12]
 801c28c:	681b      	ldr	r3, [r3, #0]
 801c28e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 801c292:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 801c294:	68fb      	ldr	r3, [r7, #12]
 801c296:	68db      	ldr	r3, [r3, #12]
 801c298:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 801c29c:	d14b      	bne.n	801c336 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 801c29e:	68fb      	ldr	r3, [r7, #12]
 801c2a0:	685b      	ldr	r3, [r3, #4]
 801c2a2:	2b00      	cmp	r3, #0
 801c2a4:	d002      	beq.n	801c2ac <HAL_SPI_Transmit+0xf6>
 801c2a6:	8afb      	ldrh	r3, [r7, #22]
 801c2a8:	2b01      	cmp	r3, #1
 801c2aa:	d13e      	bne.n	801c32a <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 801c2ac:	68fb      	ldr	r3, [r7, #12]
 801c2ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801c2b0:	881a      	ldrh	r2, [r3, #0]
 801c2b2:	68fb      	ldr	r3, [r7, #12]
 801c2b4:	681b      	ldr	r3, [r3, #0]
 801c2b6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 801c2b8:	68fb      	ldr	r3, [r7, #12]
 801c2ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801c2bc:	1c9a      	adds	r2, r3, #2
 801c2be:	68fb      	ldr	r3, [r7, #12]
 801c2c0:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 801c2c2:	68fb      	ldr	r3, [r7, #12]
 801c2c4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 801c2c6:	b29b      	uxth	r3, r3
 801c2c8:	3b01      	subs	r3, #1
 801c2ca:	b29a      	uxth	r2, r3
 801c2cc:	68fb      	ldr	r3, [r7, #12]
 801c2ce:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 801c2d0:	e02b      	b.n	801c32a <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 801c2d2:	68fb      	ldr	r3, [r7, #12]
 801c2d4:	681b      	ldr	r3, [r3, #0]
 801c2d6:	689b      	ldr	r3, [r3, #8]
 801c2d8:	f003 0302 	and.w	r3, r3, #2
 801c2dc:	2b02      	cmp	r3, #2
 801c2de:	d112      	bne.n	801c306 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 801c2e0:	68fb      	ldr	r3, [r7, #12]
 801c2e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801c2e4:	881a      	ldrh	r2, [r3, #0]
 801c2e6:	68fb      	ldr	r3, [r7, #12]
 801c2e8:	681b      	ldr	r3, [r3, #0]
 801c2ea:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 801c2ec:	68fb      	ldr	r3, [r7, #12]
 801c2ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801c2f0:	1c9a      	adds	r2, r3, #2
 801c2f2:	68fb      	ldr	r3, [r7, #12]
 801c2f4:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 801c2f6:	68fb      	ldr	r3, [r7, #12]
 801c2f8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 801c2fa:	b29b      	uxth	r3, r3
 801c2fc:	3b01      	subs	r3, #1
 801c2fe:	b29a      	uxth	r2, r3
 801c300:	68fb      	ldr	r3, [r7, #12]
 801c302:	86da      	strh	r2, [r3, #54]	; 0x36
 801c304:	e011      	b.n	801c32a <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 801c306:	f7fc f867 	bl	80183d8 <HAL_GetTick>
 801c30a:	4602      	mov	r2, r0
 801c30c:	69bb      	ldr	r3, [r7, #24]
 801c30e:	1ad3      	subs	r3, r2, r3
 801c310:	683a      	ldr	r2, [r7, #0]
 801c312:	429a      	cmp	r2, r3
 801c314:	d803      	bhi.n	801c31e <HAL_SPI_Transmit+0x168>
 801c316:	683b      	ldr	r3, [r7, #0]
 801c318:	f1b3 3fff 	cmp.w	r3, #4294967295
 801c31c:	d102      	bne.n	801c324 <HAL_SPI_Transmit+0x16e>
 801c31e:	683b      	ldr	r3, [r7, #0]
 801c320:	2b00      	cmp	r3, #0
 801c322:	d102      	bne.n	801c32a <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 801c324:	2303      	movs	r3, #3
 801c326:	77fb      	strb	r3, [r7, #31]
          goto error;
 801c328:	e074      	b.n	801c414 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 801c32a:	68fb      	ldr	r3, [r7, #12]
 801c32c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 801c32e:	b29b      	uxth	r3, r3
 801c330:	2b00      	cmp	r3, #0
 801c332:	d1ce      	bne.n	801c2d2 <HAL_SPI_Transmit+0x11c>
 801c334:	e04c      	b.n	801c3d0 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 801c336:	68fb      	ldr	r3, [r7, #12]
 801c338:	685b      	ldr	r3, [r3, #4]
 801c33a:	2b00      	cmp	r3, #0
 801c33c:	d002      	beq.n	801c344 <HAL_SPI_Transmit+0x18e>
 801c33e:	8afb      	ldrh	r3, [r7, #22]
 801c340:	2b01      	cmp	r3, #1
 801c342:	d140      	bne.n	801c3c6 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 801c344:	68fb      	ldr	r3, [r7, #12]
 801c346:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801c348:	68fb      	ldr	r3, [r7, #12]
 801c34a:	681b      	ldr	r3, [r3, #0]
 801c34c:	330c      	adds	r3, #12
 801c34e:	7812      	ldrb	r2, [r2, #0]
 801c350:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 801c352:	68fb      	ldr	r3, [r7, #12]
 801c354:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801c356:	1c5a      	adds	r2, r3, #1
 801c358:	68fb      	ldr	r3, [r7, #12]
 801c35a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 801c35c:	68fb      	ldr	r3, [r7, #12]
 801c35e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 801c360:	b29b      	uxth	r3, r3
 801c362:	3b01      	subs	r3, #1
 801c364:	b29a      	uxth	r2, r3
 801c366:	68fb      	ldr	r3, [r7, #12]
 801c368:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 801c36a:	e02c      	b.n	801c3c6 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 801c36c:	68fb      	ldr	r3, [r7, #12]
 801c36e:	681b      	ldr	r3, [r3, #0]
 801c370:	689b      	ldr	r3, [r3, #8]
 801c372:	f003 0302 	and.w	r3, r3, #2
 801c376:	2b02      	cmp	r3, #2
 801c378:	d113      	bne.n	801c3a2 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 801c37a:	68fb      	ldr	r3, [r7, #12]
 801c37c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801c37e:	68fb      	ldr	r3, [r7, #12]
 801c380:	681b      	ldr	r3, [r3, #0]
 801c382:	330c      	adds	r3, #12
 801c384:	7812      	ldrb	r2, [r2, #0]
 801c386:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 801c388:	68fb      	ldr	r3, [r7, #12]
 801c38a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801c38c:	1c5a      	adds	r2, r3, #1
 801c38e:	68fb      	ldr	r3, [r7, #12]
 801c390:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 801c392:	68fb      	ldr	r3, [r7, #12]
 801c394:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 801c396:	b29b      	uxth	r3, r3
 801c398:	3b01      	subs	r3, #1
 801c39a:	b29a      	uxth	r2, r3
 801c39c:	68fb      	ldr	r3, [r7, #12]
 801c39e:	86da      	strh	r2, [r3, #54]	; 0x36
 801c3a0:	e011      	b.n	801c3c6 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 801c3a2:	f7fc f819 	bl	80183d8 <HAL_GetTick>
 801c3a6:	4602      	mov	r2, r0
 801c3a8:	69bb      	ldr	r3, [r7, #24]
 801c3aa:	1ad3      	subs	r3, r2, r3
 801c3ac:	683a      	ldr	r2, [r7, #0]
 801c3ae:	429a      	cmp	r2, r3
 801c3b0:	d803      	bhi.n	801c3ba <HAL_SPI_Transmit+0x204>
 801c3b2:	683b      	ldr	r3, [r7, #0]
 801c3b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 801c3b8:	d102      	bne.n	801c3c0 <HAL_SPI_Transmit+0x20a>
 801c3ba:	683b      	ldr	r3, [r7, #0]
 801c3bc:	2b00      	cmp	r3, #0
 801c3be:	d102      	bne.n	801c3c6 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 801c3c0:	2303      	movs	r3, #3
 801c3c2:	77fb      	strb	r3, [r7, #31]
          goto error;
 801c3c4:	e026      	b.n	801c414 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 801c3c6:	68fb      	ldr	r3, [r7, #12]
 801c3c8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 801c3ca:	b29b      	uxth	r3, r3
 801c3cc:	2b00      	cmp	r3, #0
 801c3ce:	d1cd      	bne.n	801c36c <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 801c3d0:	69ba      	ldr	r2, [r7, #24]
 801c3d2:	6839      	ldr	r1, [r7, #0]
 801c3d4:	68f8      	ldr	r0, [r7, #12]
 801c3d6:	f000 fcf7 	bl	801cdc8 <SPI_EndRxTxTransaction>
 801c3da:	4603      	mov	r3, r0
 801c3dc:	2b00      	cmp	r3, #0
 801c3de:	d002      	beq.n	801c3e6 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 801c3e0:	68fb      	ldr	r3, [r7, #12]
 801c3e2:	2220      	movs	r2, #32
 801c3e4:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 801c3e6:	68fb      	ldr	r3, [r7, #12]
 801c3e8:	689b      	ldr	r3, [r3, #8]
 801c3ea:	2b00      	cmp	r3, #0
 801c3ec:	d10a      	bne.n	801c404 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 801c3ee:	2300      	movs	r3, #0
 801c3f0:	613b      	str	r3, [r7, #16]
 801c3f2:	68fb      	ldr	r3, [r7, #12]
 801c3f4:	681b      	ldr	r3, [r3, #0]
 801c3f6:	68db      	ldr	r3, [r3, #12]
 801c3f8:	613b      	str	r3, [r7, #16]
 801c3fa:	68fb      	ldr	r3, [r7, #12]
 801c3fc:	681b      	ldr	r3, [r3, #0]
 801c3fe:	689b      	ldr	r3, [r3, #8]
 801c400:	613b      	str	r3, [r7, #16]
 801c402:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 801c404:	68fb      	ldr	r3, [r7, #12]
 801c406:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801c408:	2b00      	cmp	r3, #0
 801c40a:	d002      	beq.n	801c412 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 801c40c:	2301      	movs	r3, #1
 801c40e:	77fb      	strb	r3, [r7, #31]
 801c410:	e000      	b.n	801c414 <HAL_SPI_Transmit+0x25e>
  }

error:
 801c412:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 801c414:	68fb      	ldr	r3, [r7, #12]
 801c416:	2201      	movs	r2, #1
 801c418:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 801c41c:	68fb      	ldr	r3, [r7, #12]
 801c41e:	2200      	movs	r2, #0
 801c420:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 801c424:	7ffb      	ldrb	r3, [r7, #31]
}
 801c426:	4618      	mov	r0, r3
 801c428:	3720      	adds	r7, #32
 801c42a:	46bd      	mov	sp, r7
 801c42c:	bd80      	pop	{r7, pc}

0801c42e <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 801c42e:	b580      	push	{r7, lr}
 801c430:	b088      	sub	sp, #32
 801c432:	af02      	add	r7, sp, #8
 801c434:	60f8      	str	r0, [r7, #12]
 801c436:	60b9      	str	r1, [r7, #8]
 801c438:	603b      	str	r3, [r7, #0]
 801c43a:	4613      	mov	r3, r2
 801c43c:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 801c43e:	2300      	movs	r3, #0
 801c440:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 801c442:	68fb      	ldr	r3, [r7, #12]
 801c444:	685b      	ldr	r3, [r3, #4]
 801c446:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 801c44a:	d112      	bne.n	801c472 <HAL_SPI_Receive+0x44>
 801c44c:	68fb      	ldr	r3, [r7, #12]
 801c44e:	689b      	ldr	r3, [r3, #8]
 801c450:	2b00      	cmp	r3, #0
 801c452:	d10e      	bne.n	801c472 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 801c454:	68fb      	ldr	r3, [r7, #12]
 801c456:	2204      	movs	r2, #4
 801c458:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 801c45c:	88fa      	ldrh	r2, [r7, #6]
 801c45e:	683b      	ldr	r3, [r7, #0]
 801c460:	9300      	str	r3, [sp, #0]
 801c462:	4613      	mov	r3, r2
 801c464:	68ba      	ldr	r2, [r7, #8]
 801c466:	68b9      	ldr	r1, [r7, #8]
 801c468:	68f8      	ldr	r0, [r7, #12]
 801c46a:	f000 f8f1 	bl	801c650 <HAL_SPI_TransmitReceive>
 801c46e:	4603      	mov	r3, r0
 801c470:	e0ea      	b.n	801c648 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 801c472:	68fb      	ldr	r3, [r7, #12]
 801c474:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 801c478:	2b01      	cmp	r3, #1
 801c47a:	d101      	bne.n	801c480 <HAL_SPI_Receive+0x52>
 801c47c:	2302      	movs	r3, #2
 801c47e:	e0e3      	b.n	801c648 <HAL_SPI_Receive+0x21a>
 801c480:	68fb      	ldr	r3, [r7, #12]
 801c482:	2201      	movs	r2, #1
 801c484:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 801c488:	f7fb ffa6 	bl	80183d8 <HAL_GetTick>
 801c48c:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 801c48e:	68fb      	ldr	r3, [r7, #12]
 801c490:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 801c494:	b2db      	uxtb	r3, r3
 801c496:	2b01      	cmp	r3, #1
 801c498:	d002      	beq.n	801c4a0 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 801c49a:	2302      	movs	r3, #2
 801c49c:	75fb      	strb	r3, [r7, #23]
    goto error;
 801c49e:	e0ca      	b.n	801c636 <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 801c4a0:	68bb      	ldr	r3, [r7, #8]
 801c4a2:	2b00      	cmp	r3, #0
 801c4a4:	d002      	beq.n	801c4ac <HAL_SPI_Receive+0x7e>
 801c4a6:	88fb      	ldrh	r3, [r7, #6]
 801c4a8:	2b00      	cmp	r3, #0
 801c4aa:	d102      	bne.n	801c4b2 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 801c4ac:	2301      	movs	r3, #1
 801c4ae:	75fb      	strb	r3, [r7, #23]
    goto error;
 801c4b0:	e0c1      	b.n	801c636 <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 801c4b2:	68fb      	ldr	r3, [r7, #12]
 801c4b4:	2204      	movs	r2, #4
 801c4b6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 801c4ba:	68fb      	ldr	r3, [r7, #12]
 801c4bc:	2200      	movs	r2, #0
 801c4be:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 801c4c0:	68fb      	ldr	r3, [r7, #12]
 801c4c2:	68ba      	ldr	r2, [r7, #8]
 801c4c4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 801c4c6:	68fb      	ldr	r3, [r7, #12]
 801c4c8:	88fa      	ldrh	r2, [r7, #6]
 801c4ca:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 801c4cc:	68fb      	ldr	r3, [r7, #12]
 801c4ce:	88fa      	ldrh	r2, [r7, #6]
 801c4d0:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 801c4d2:	68fb      	ldr	r3, [r7, #12]
 801c4d4:	2200      	movs	r2, #0
 801c4d6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 801c4d8:	68fb      	ldr	r3, [r7, #12]
 801c4da:	2200      	movs	r2, #0
 801c4dc:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 801c4de:	68fb      	ldr	r3, [r7, #12]
 801c4e0:	2200      	movs	r2, #0
 801c4e2:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 801c4e4:	68fb      	ldr	r3, [r7, #12]
 801c4e6:	2200      	movs	r2, #0
 801c4e8:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 801c4ea:	68fb      	ldr	r3, [r7, #12]
 801c4ec:	2200      	movs	r2, #0
 801c4ee:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 801c4f0:	68fb      	ldr	r3, [r7, #12]
 801c4f2:	689b      	ldr	r3, [r3, #8]
 801c4f4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801c4f8:	d10f      	bne.n	801c51a <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 801c4fa:	68fb      	ldr	r3, [r7, #12]
 801c4fc:	681b      	ldr	r3, [r3, #0]
 801c4fe:	681a      	ldr	r2, [r3, #0]
 801c500:	68fb      	ldr	r3, [r7, #12]
 801c502:	681b      	ldr	r3, [r3, #0]
 801c504:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 801c508:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 801c50a:	68fb      	ldr	r3, [r7, #12]
 801c50c:	681b      	ldr	r3, [r3, #0]
 801c50e:	681a      	ldr	r2, [r3, #0]
 801c510:	68fb      	ldr	r3, [r7, #12]
 801c512:	681b      	ldr	r3, [r3, #0]
 801c514:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 801c518:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 801c51a:	68fb      	ldr	r3, [r7, #12]
 801c51c:	681b      	ldr	r3, [r3, #0]
 801c51e:	681b      	ldr	r3, [r3, #0]
 801c520:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801c524:	2b40      	cmp	r3, #64	; 0x40
 801c526:	d007      	beq.n	801c538 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 801c528:	68fb      	ldr	r3, [r7, #12]
 801c52a:	681b      	ldr	r3, [r3, #0]
 801c52c:	681a      	ldr	r2, [r3, #0]
 801c52e:	68fb      	ldr	r3, [r7, #12]
 801c530:	681b      	ldr	r3, [r3, #0]
 801c532:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 801c536:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 801c538:	68fb      	ldr	r3, [r7, #12]
 801c53a:	68db      	ldr	r3, [r3, #12]
 801c53c:	2b00      	cmp	r3, #0
 801c53e:	d162      	bne.n	801c606 <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 801c540:	e02e      	b.n	801c5a0 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 801c542:	68fb      	ldr	r3, [r7, #12]
 801c544:	681b      	ldr	r3, [r3, #0]
 801c546:	689b      	ldr	r3, [r3, #8]
 801c548:	f003 0301 	and.w	r3, r3, #1
 801c54c:	2b01      	cmp	r3, #1
 801c54e:	d115      	bne.n	801c57c <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 801c550:	68fb      	ldr	r3, [r7, #12]
 801c552:	681b      	ldr	r3, [r3, #0]
 801c554:	f103 020c 	add.w	r2, r3, #12
 801c558:	68fb      	ldr	r3, [r7, #12]
 801c55a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801c55c:	7812      	ldrb	r2, [r2, #0]
 801c55e:	b2d2      	uxtb	r2, r2
 801c560:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 801c562:	68fb      	ldr	r3, [r7, #12]
 801c564:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801c566:	1c5a      	adds	r2, r3, #1
 801c568:	68fb      	ldr	r3, [r7, #12]
 801c56a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 801c56c:	68fb      	ldr	r3, [r7, #12]
 801c56e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801c570:	b29b      	uxth	r3, r3
 801c572:	3b01      	subs	r3, #1
 801c574:	b29a      	uxth	r2, r3
 801c576:	68fb      	ldr	r3, [r7, #12]
 801c578:	87da      	strh	r2, [r3, #62]	; 0x3e
 801c57a:	e011      	b.n	801c5a0 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 801c57c:	f7fb ff2c 	bl	80183d8 <HAL_GetTick>
 801c580:	4602      	mov	r2, r0
 801c582:	693b      	ldr	r3, [r7, #16]
 801c584:	1ad3      	subs	r3, r2, r3
 801c586:	683a      	ldr	r2, [r7, #0]
 801c588:	429a      	cmp	r2, r3
 801c58a:	d803      	bhi.n	801c594 <HAL_SPI_Receive+0x166>
 801c58c:	683b      	ldr	r3, [r7, #0]
 801c58e:	f1b3 3fff 	cmp.w	r3, #4294967295
 801c592:	d102      	bne.n	801c59a <HAL_SPI_Receive+0x16c>
 801c594:	683b      	ldr	r3, [r7, #0]
 801c596:	2b00      	cmp	r3, #0
 801c598:	d102      	bne.n	801c5a0 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 801c59a:	2303      	movs	r3, #3
 801c59c:	75fb      	strb	r3, [r7, #23]
          goto error;
 801c59e:	e04a      	b.n	801c636 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 801c5a0:	68fb      	ldr	r3, [r7, #12]
 801c5a2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801c5a4:	b29b      	uxth	r3, r3
 801c5a6:	2b00      	cmp	r3, #0
 801c5a8:	d1cb      	bne.n	801c542 <HAL_SPI_Receive+0x114>
 801c5aa:	e031      	b.n	801c610 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 801c5ac:	68fb      	ldr	r3, [r7, #12]
 801c5ae:	681b      	ldr	r3, [r3, #0]
 801c5b0:	689b      	ldr	r3, [r3, #8]
 801c5b2:	f003 0301 	and.w	r3, r3, #1
 801c5b6:	2b01      	cmp	r3, #1
 801c5b8:	d113      	bne.n	801c5e2 <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 801c5ba:	68fb      	ldr	r3, [r7, #12]
 801c5bc:	681b      	ldr	r3, [r3, #0]
 801c5be:	68da      	ldr	r2, [r3, #12]
 801c5c0:	68fb      	ldr	r3, [r7, #12]
 801c5c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801c5c4:	b292      	uxth	r2, r2
 801c5c6:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 801c5c8:	68fb      	ldr	r3, [r7, #12]
 801c5ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801c5cc:	1c9a      	adds	r2, r3, #2
 801c5ce:	68fb      	ldr	r3, [r7, #12]
 801c5d0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 801c5d2:	68fb      	ldr	r3, [r7, #12]
 801c5d4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801c5d6:	b29b      	uxth	r3, r3
 801c5d8:	3b01      	subs	r3, #1
 801c5da:	b29a      	uxth	r2, r3
 801c5dc:	68fb      	ldr	r3, [r7, #12]
 801c5de:	87da      	strh	r2, [r3, #62]	; 0x3e
 801c5e0:	e011      	b.n	801c606 <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 801c5e2:	f7fb fef9 	bl	80183d8 <HAL_GetTick>
 801c5e6:	4602      	mov	r2, r0
 801c5e8:	693b      	ldr	r3, [r7, #16]
 801c5ea:	1ad3      	subs	r3, r2, r3
 801c5ec:	683a      	ldr	r2, [r7, #0]
 801c5ee:	429a      	cmp	r2, r3
 801c5f0:	d803      	bhi.n	801c5fa <HAL_SPI_Receive+0x1cc>
 801c5f2:	683b      	ldr	r3, [r7, #0]
 801c5f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 801c5f8:	d102      	bne.n	801c600 <HAL_SPI_Receive+0x1d2>
 801c5fa:	683b      	ldr	r3, [r7, #0]
 801c5fc:	2b00      	cmp	r3, #0
 801c5fe:	d102      	bne.n	801c606 <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 801c600:	2303      	movs	r3, #3
 801c602:	75fb      	strb	r3, [r7, #23]
          goto error;
 801c604:	e017      	b.n	801c636 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 801c606:	68fb      	ldr	r3, [r7, #12]
 801c608:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801c60a:	b29b      	uxth	r3, r3
 801c60c:	2b00      	cmp	r3, #0
 801c60e:	d1cd      	bne.n	801c5ac <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 801c610:	693a      	ldr	r2, [r7, #16]
 801c612:	6839      	ldr	r1, [r7, #0]
 801c614:	68f8      	ldr	r0, [r7, #12]
 801c616:	f000 fb71 	bl	801ccfc <SPI_EndRxTransaction>
 801c61a:	4603      	mov	r3, r0
 801c61c:	2b00      	cmp	r3, #0
 801c61e:	d002      	beq.n	801c626 <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 801c620:	68fb      	ldr	r3, [r7, #12]
 801c622:	2220      	movs	r2, #32
 801c624:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 801c626:	68fb      	ldr	r3, [r7, #12]
 801c628:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801c62a:	2b00      	cmp	r3, #0
 801c62c:	d002      	beq.n	801c634 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 801c62e:	2301      	movs	r3, #1
 801c630:	75fb      	strb	r3, [r7, #23]
 801c632:	e000      	b.n	801c636 <HAL_SPI_Receive+0x208>
  }

error :
 801c634:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 801c636:	68fb      	ldr	r3, [r7, #12]
 801c638:	2201      	movs	r2, #1
 801c63a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 801c63e:	68fb      	ldr	r3, [r7, #12]
 801c640:	2200      	movs	r2, #0
 801c642:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 801c646:	7dfb      	ldrb	r3, [r7, #23]
}
 801c648:	4618      	mov	r0, r3
 801c64a:	3718      	adds	r7, #24
 801c64c:	46bd      	mov	sp, r7
 801c64e:	bd80      	pop	{r7, pc}

0801c650 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 801c650:	b580      	push	{r7, lr}
 801c652:	b08c      	sub	sp, #48	; 0x30
 801c654:	af00      	add	r7, sp, #0
 801c656:	60f8      	str	r0, [r7, #12]
 801c658:	60b9      	str	r1, [r7, #8]
 801c65a:	607a      	str	r2, [r7, #4]
 801c65c:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 801c65e:	2301      	movs	r3, #1
 801c660:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 801c662:	2300      	movs	r3, #0
 801c664:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 801c668:	68fb      	ldr	r3, [r7, #12]
 801c66a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 801c66e:	2b01      	cmp	r3, #1
 801c670:	d101      	bne.n	801c676 <HAL_SPI_TransmitReceive+0x26>
 801c672:	2302      	movs	r3, #2
 801c674:	e18a      	b.n	801c98c <HAL_SPI_TransmitReceive+0x33c>
 801c676:	68fb      	ldr	r3, [r7, #12]
 801c678:	2201      	movs	r2, #1
 801c67a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 801c67e:	f7fb feab 	bl	80183d8 <HAL_GetTick>
 801c682:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 801c684:	68fb      	ldr	r3, [r7, #12]
 801c686:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 801c68a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 801c68e:	68fb      	ldr	r3, [r7, #12]
 801c690:	685b      	ldr	r3, [r3, #4]
 801c692:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 801c694:	887b      	ldrh	r3, [r7, #2]
 801c696:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 801c698:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 801c69c:	2b01      	cmp	r3, #1
 801c69e:	d00f      	beq.n	801c6c0 <HAL_SPI_TransmitReceive+0x70>
 801c6a0:	69fb      	ldr	r3, [r7, #28]
 801c6a2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 801c6a6:	d107      	bne.n	801c6b8 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 801c6a8:	68fb      	ldr	r3, [r7, #12]
 801c6aa:	689b      	ldr	r3, [r3, #8]
 801c6ac:	2b00      	cmp	r3, #0
 801c6ae:	d103      	bne.n	801c6b8 <HAL_SPI_TransmitReceive+0x68>
 801c6b0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 801c6b4:	2b04      	cmp	r3, #4
 801c6b6:	d003      	beq.n	801c6c0 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 801c6b8:	2302      	movs	r3, #2
 801c6ba:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 801c6be:	e15b      	b.n	801c978 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 801c6c0:	68bb      	ldr	r3, [r7, #8]
 801c6c2:	2b00      	cmp	r3, #0
 801c6c4:	d005      	beq.n	801c6d2 <HAL_SPI_TransmitReceive+0x82>
 801c6c6:	687b      	ldr	r3, [r7, #4]
 801c6c8:	2b00      	cmp	r3, #0
 801c6ca:	d002      	beq.n	801c6d2 <HAL_SPI_TransmitReceive+0x82>
 801c6cc:	887b      	ldrh	r3, [r7, #2]
 801c6ce:	2b00      	cmp	r3, #0
 801c6d0:	d103      	bne.n	801c6da <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 801c6d2:	2301      	movs	r3, #1
 801c6d4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 801c6d8:	e14e      	b.n	801c978 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 801c6da:	68fb      	ldr	r3, [r7, #12]
 801c6dc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 801c6e0:	b2db      	uxtb	r3, r3
 801c6e2:	2b04      	cmp	r3, #4
 801c6e4:	d003      	beq.n	801c6ee <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 801c6e6:	68fb      	ldr	r3, [r7, #12]
 801c6e8:	2205      	movs	r2, #5
 801c6ea:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 801c6ee:	68fb      	ldr	r3, [r7, #12]
 801c6f0:	2200      	movs	r2, #0
 801c6f2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 801c6f4:	68fb      	ldr	r3, [r7, #12]
 801c6f6:	687a      	ldr	r2, [r7, #4]
 801c6f8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 801c6fa:	68fb      	ldr	r3, [r7, #12]
 801c6fc:	887a      	ldrh	r2, [r7, #2]
 801c6fe:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 801c700:	68fb      	ldr	r3, [r7, #12]
 801c702:	887a      	ldrh	r2, [r7, #2]
 801c704:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 801c706:	68fb      	ldr	r3, [r7, #12]
 801c708:	68ba      	ldr	r2, [r7, #8]
 801c70a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 801c70c:	68fb      	ldr	r3, [r7, #12]
 801c70e:	887a      	ldrh	r2, [r7, #2]
 801c710:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 801c712:	68fb      	ldr	r3, [r7, #12]
 801c714:	887a      	ldrh	r2, [r7, #2]
 801c716:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 801c718:	68fb      	ldr	r3, [r7, #12]
 801c71a:	2200      	movs	r2, #0
 801c71c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 801c71e:	68fb      	ldr	r3, [r7, #12]
 801c720:	2200      	movs	r2, #0
 801c722:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 801c724:	68fb      	ldr	r3, [r7, #12]
 801c726:	681b      	ldr	r3, [r3, #0]
 801c728:	681b      	ldr	r3, [r3, #0]
 801c72a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801c72e:	2b40      	cmp	r3, #64	; 0x40
 801c730:	d007      	beq.n	801c742 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 801c732:	68fb      	ldr	r3, [r7, #12]
 801c734:	681b      	ldr	r3, [r3, #0]
 801c736:	681a      	ldr	r2, [r3, #0]
 801c738:	68fb      	ldr	r3, [r7, #12]
 801c73a:	681b      	ldr	r3, [r3, #0]
 801c73c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 801c740:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 801c742:	68fb      	ldr	r3, [r7, #12]
 801c744:	68db      	ldr	r3, [r3, #12]
 801c746:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 801c74a:	d178      	bne.n	801c83e <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 801c74c:	68fb      	ldr	r3, [r7, #12]
 801c74e:	685b      	ldr	r3, [r3, #4]
 801c750:	2b00      	cmp	r3, #0
 801c752:	d002      	beq.n	801c75a <HAL_SPI_TransmitReceive+0x10a>
 801c754:	8b7b      	ldrh	r3, [r7, #26]
 801c756:	2b01      	cmp	r3, #1
 801c758:	d166      	bne.n	801c828 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 801c75a:	68fb      	ldr	r3, [r7, #12]
 801c75c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801c75e:	881a      	ldrh	r2, [r3, #0]
 801c760:	68fb      	ldr	r3, [r7, #12]
 801c762:	681b      	ldr	r3, [r3, #0]
 801c764:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 801c766:	68fb      	ldr	r3, [r7, #12]
 801c768:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801c76a:	1c9a      	adds	r2, r3, #2
 801c76c:	68fb      	ldr	r3, [r7, #12]
 801c76e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 801c770:	68fb      	ldr	r3, [r7, #12]
 801c772:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 801c774:	b29b      	uxth	r3, r3
 801c776:	3b01      	subs	r3, #1
 801c778:	b29a      	uxth	r2, r3
 801c77a:	68fb      	ldr	r3, [r7, #12]
 801c77c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 801c77e:	e053      	b.n	801c828 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 801c780:	68fb      	ldr	r3, [r7, #12]
 801c782:	681b      	ldr	r3, [r3, #0]
 801c784:	689b      	ldr	r3, [r3, #8]
 801c786:	f003 0302 	and.w	r3, r3, #2
 801c78a:	2b02      	cmp	r3, #2
 801c78c:	d11b      	bne.n	801c7c6 <HAL_SPI_TransmitReceive+0x176>
 801c78e:	68fb      	ldr	r3, [r7, #12]
 801c790:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 801c792:	b29b      	uxth	r3, r3
 801c794:	2b00      	cmp	r3, #0
 801c796:	d016      	beq.n	801c7c6 <HAL_SPI_TransmitReceive+0x176>
 801c798:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801c79a:	2b01      	cmp	r3, #1
 801c79c:	d113      	bne.n	801c7c6 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 801c79e:	68fb      	ldr	r3, [r7, #12]
 801c7a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801c7a2:	881a      	ldrh	r2, [r3, #0]
 801c7a4:	68fb      	ldr	r3, [r7, #12]
 801c7a6:	681b      	ldr	r3, [r3, #0]
 801c7a8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 801c7aa:	68fb      	ldr	r3, [r7, #12]
 801c7ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801c7ae:	1c9a      	adds	r2, r3, #2
 801c7b0:	68fb      	ldr	r3, [r7, #12]
 801c7b2:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 801c7b4:	68fb      	ldr	r3, [r7, #12]
 801c7b6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 801c7b8:	b29b      	uxth	r3, r3
 801c7ba:	3b01      	subs	r3, #1
 801c7bc:	b29a      	uxth	r2, r3
 801c7be:	68fb      	ldr	r3, [r7, #12]
 801c7c0:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 801c7c2:	2300      	movs	r3, #0
 801c7c4:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 801c7c6:	68fb      	ldr	r3, [r7, #12]
 801c7c8:	681b      	ldr	r3, [r3, #0]
 801c7ca:	689b      	ldr	r3, [r3, #8]
 801c7cc:	f003 0301 	and.w	r3, r3, #1
 801c7d0:	2b01      	cmp	r3, #1
 801c7d2:	d119      	bne.n	801c808 <HAL_SPI_TransmitReceive+0x1b8>
 801c7d4:	68fb      	ldr	r3, [r7, #12]
 801c7d6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801c7d8:	b29b      	uxth	r3, r3
 801c7da:	2b00      	cmp	r3, #0
 801c7dc:	d014      	beq.n	801c808 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 801c7de:	68fb      	ldr	r3, [r7, #12]
 801c7e0:	681b      	ldr	r3, [r3, #0]
 801c7e2:	68da      	ldr	r2, [r3, #12]
 801c7e4:	68fb      	ldr	r3, [r7, #12]
 801c7e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801c7e8:	b292      	uxth	r2, r2
 801c7ea:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 801c7ec:	68fb      	ldr	r3, [r7, #12]
 801c7ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801c7f0:	1c9a      	adds	r2, r3, #2
 801c7f2:	68fb      	ldr	r3, [r7, #12]
 801c7f4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 801c7f6:	68fb      	ldr	r3, [r7, #12]
 801c7f8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801c7fa:	b29b      	uxth	r3, r3
 801c7fc:	3b01      	subs	r3, #1
 801c7fe:	b29a      	uxth	r2, r3
 801c800:	68fb      	ldr	r3, [r7, #12]
 801c802:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 801c804:	2301      	movs	r3, #1
 801c806:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 801c808:	f7fb fde6 	bl	80183d8 <HAL_GetTick>
 801c80c:	4602      	mov	r2, r0
 801c80e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c810:	1ad3      	subs	r3, r2, r3
 801c812:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801c814:	429a      	cmp	r2, r3
 801c816:	d807      	bhi.n	801c828 <HAL_SPI_TransmitReceive+0x1d8>
 801c818:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801c81a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801c81e:	d003      	beq.n	801c828 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 801c820:	2303      	movs	r3, #3
 801c822:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 801c826:	e0a7      	b.n	801c978 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 801c828:	68fb      	ldr	r3, [r7, #12]
 801c82a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 801c82c:	b29b      	uxth	r3, r3
 801c82e:	2b00      	cmp	r3, #0
 801c830:	d1a6      	bne.n	801c780 <HAL_SPI_TransmitReceive+0x130>
 801c832:	68fb      	ldr	r3, [r7, #12]
 801c834:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801c836:	b29b      	uxth	r3, r3
 801c838:	2b00      	cmp	r3, #0
 801c83a:	d1a1      	bne.n	801c780 <HAL_SPI_TransmitReceive+0x130>
 801c83c:	e07c      	b.n	801c938 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 801c83e:	68fb      	ldr	r3, [r7, #12]
 801c840:	685b      	ldr	r3, [r3, #4]
 801c842:	2b00      	cmp	r3, #0
 801c844:	d002      	beq.n	801c84c <HAL_SPI_TransmitReceive+0x1fc>
 801c846:	8b7b      	ldrh	r3, [r7, #26]
 801c848:	2b01      	cmp	r3, #1
 801c84a:	d16b      	bne.n	801c924 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 801c84c:	68fb      	ldr	r3, [r7, #12]
 801c84e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801c850:	68fb      	ldr	r3, [r7, #12]
 801c852:	681b      	ldr	r3, [r3, #0]
 801c854:	330c      	adds	r3, #12
 801c856:	7812      	ldrb	r2, [r2, #0]
 801c858:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 801c85a:	68fb      	ldr	r3, [r7, #12]
 801c85c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801c85e:	1c5a      	adds	r2, r3, #1
 801c860:	68fb      	ldr	r3, [r7, #12]
 801c862:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 801c864:	68fb      	ldr	r3, [r7, #12]
 801c866:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 801c868:	b29b      	uxth	r3, r3
 801c86a:	3b01      	subs	r3, #1
 801c86c:	b29a      	uxth	r2, r3
 801c86e:	68fb      	ldr	r3, [r7, #12]
 801c870:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 801c872:	e057      	b.n	801c924 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 801c874:	68fb      	ldr	r3, [r7, #12]
 801c876:	681b      	ldr	r3, [r3, #0]
 801c878:	689b      	ldr	r3, [r3, #8]
 801c87a:	f003 0302 	and.w	r3, r3, #2
 801c87e:	2b02      	cmp	r3, #2
 801c880:	d11c      	bne.n	801c8bc <HAL_SPI_TransmitReceive+0x26c>
 801c882:	68fb      	ldr	r3, [r7, #12]
 801c884:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 801c886:	b29b      	uxth	r3, r3
 801c888:	2b00      	cmp	r3, #0
 801c88a:	d017      	beq.n	801c8bc <HAL_SPI_TransmitReceive+0x26c>
 801c88c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801c88e:	2b01      	cmp	r3, #1
 801c890:	d114      	bne.n	801c8bc <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 801c892:	68fb      	ldr	r3, [r7, #12]
 801c894:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801c896:	68fb      	ldr	r3, [r7, #12]
 801c898:	681b      	ldr	r3, [r3, #0]
 801c89a:	330c      	adds	r3, #12
 801c89c:	7812      	ldrb	r2, [r2, #0]
 801c89e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 801c8a0:	68fb      	ldr	r3, [r7, #12]
 801c8a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801c8a4:	1c5a      	adds	r2, r3, #1
 801c8a6:	68fb      	ldr	r3, [r7, #12]
 801c8a8:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 801c8aa:	68fb      	ldr	r3, [r7, #12]
 801c8ac:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 801c8ae:	b29b      	uxth	r3, r3
 801c8b0:	3b01      	subs	r3, #1
 801c8b2:	b29a      	uxth	r2, r3
 801c8b4:	68fb      	ldr	r3, [r7, #12]
 801c8b6:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 801c8b8:	2300      	movs	r3, #0
 801c8ba:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 801c8bc:	68fb      	ldr	r3, [r7, #12]
 801c8be:	681b      	ldr	r3, [r3, #0]
 801c8c0:	689b      	ldr	r3, [r3, #8]
 801c8c2:	f003 0301 	and.w	r3, r3, #1
 801c8c6:	2b01      	cmp	r3, #1
 801c8c8:	d119      	bne.n	801c8fe <HAL_SPI_TransmitReceive+0x2ae>
 801c8ca:	68fb      	ldr	r3, [r7, #12]
 801c8cc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801c8ce:	b29b      	uxth	r3, r3
 801c8d0:	2b00      	cmp	r3, #0
 801c8d2:	d014      	beq.n	801c8fe <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 801c8d4:	68fb      	ldr	r3, [r7, #12]
 801c8d6:	681b      	ldr	r3, [r3, #0]
 801c8d8:	68da      	ldr	r2, [r3, #12]
 801c8da:	68fb      	ldr	r3, [r7, #12]
 801c8dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801c8de:	b2d2      	uxtb	r2, r2
 801c8e0:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 801c8e2:	68fb      	ldr	r3, [r7, #12]
 801c8e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801c8e6:	1c5a      	adds	r2, r3, #1
 801c8e8:	68fb      	ldr	r3, [r7, #12]
 801c8ea:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 801c8ec:	68fb      	ldr	r3, [r7, #12]
 801c8ee:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801c8f0:	b29b      	uxth	r3, r3
 801c8f2:	3b01      	subs	r3, #1
 801c8f4:	b29a      	uxth	r2, r3
 801c8f6:	68fb      	ldr	r3, [r7, #12]
 801c8f8:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 801c8fa:	2301      	movs	r3, #1
 801c8fc:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 801c8fe:	f7fb fd6b 	bl	80183d8 <HAL_GetTick>
 801c902:	4602      	mov	r2, r0
 801c904:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c906:	1ad3      	subs	r3, r2, r3
 801c908:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801c90a:	429a      	cmp	r2, r3
 801c90c:	d803      	bhi.n	801c916 <HAL_SPI_TransmitReceive+0x2c6>
 801c90e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801c910:	f1b3 3fff 	cmp.w	r3, #4294967295
 801c914:	d102      	bne.n	801c91c <HAL_SPI_TransmitReceive+0x2cc>
 801c916:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801c918:	2b00      	cmp	r3, #0
 801c91a:	d103      	bne.n	801c924 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 801c91c:	2303      	movs	r3, #3
 801c91e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 801c922:	e029      	b.n	801c978 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 801c924:	68fb      	ldr	r3, [r7, #12]
 801c926:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 801c928:	b29b      	uxth	r3, r3
 801c92a:	2b00      	cmp	r3, #0
 801c92c:	d1a2      	bne.n	801c874 <HAL_SPI_TransmitReceive+0x224>
 801c92e:	68fb      	ldr	r3, [r7, #12]
 801c930:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801c932:	b29b      	uxth	r3, r3
 801c934:	2b00      	cmp	r3, #0
 801c936:	d19d      	bne.n	801c874 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 801c938:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801c93a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 801c93c:	68f8      	ldr	r0, [r7, #12]
 801c93e:	f000 fa43 	bl	801cdc8 <SPI_EndRxTxTransaction>
 801c942:	4603      	mov	r3, r0
 801c944:	2b00      	cmp	r3, #0
 801c946:	d006      	beq.n	801c956 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 801c948:	2301      	movs	r3, #1
 801c94a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 801c94e:	68fb      	ldr	r3, [r7, #12]
 801c950:	2220      	movs	r2, #32
 801c952:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 801c954:	e010      	b.n	801c978 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 801c956:	68fb      	ldr	r3, [r7, #12]
 801c958:	689b      	ldr	r3, [r3, #8]
 801c95a:	2b00      	cmp	r3, #0
 801c95c:	d10b      	bne.n	801c976 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 801c95e:	2300      	movs	r3, #0
 801c960:	617b      	str	r3, [r7, #20]
 801c962:	68fb      	ldr	r3, [r7, #12]
 801c964:	681b      	ldr	r3, [r3, #0]
 801c966:	68db      	ldr	r3, [r3, #12]
 801c968:	617b      	str	r3, [r7, #20]
 801c96a:	68fb      	ldr	r3, [r7, #12]
 801c96c:	681b      	ldr	r3, [r3, #0]
 801c96e:	689b      	ldr	r3, [r3, #8]
 801c970:	617b      	str	r3, [r7, #20]
 801c972:	697b      	ldr	r3, [r7, #20]
 801c974:	e000      	b.n	801c978 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 801c976:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 801c978:	68fb      	ldr	r3, [r7, #12]
 801c97a:	2201      	movs	r2, #1
 801c97c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 801c980:	68fb      	ldr	r3, [r7, #12]
 801c982:	2200      	movs	r2, #0
 801c984:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 801c988:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 801c98c:	4618      	mov	r0, r3
 801c98e:	3730      	adds	r7, #48	; 0x30
 801c990:	46bd      	mov	sp, r7
 801c992:	bd80      	pop	{r7, pc}

0801c994 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 801c994:	b580      	push	{r7, lr}
 801c996:	b088      	sub	sp, #32
 801c998:	af00      	add	r7, sp, #0
 801c99a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 801c99c:	687b      	ldr	r3, [r7, #4]
 801c99e:	681b      	ldr	r3, [r3, #0]
 801c9a0:	685b      	ldr	r3, [r3, #4]
 801c9a2:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 801c9a4:	687b      	ldr	r3, [r7, #4]
 801c9a6:	681b      	ldr	r3, [r3, #0]
 801c9a8:	689b      	ldr	r3, [r3, #8]
 801c9aa:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 801c9ac:	69bb      	ldr	r3, [r7, #24]
 801c9ae:	099b      	lsrs	r3, r3, #6
 801c9b0:	f003 0301 	and.w	r3, r3, #1
 801c9b4:	2b00      	cmp	r3, #0
 801c9b6:	d10f      	bne.n	801c9d8 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 801c9b8:	69bb      	ldr	r3, [r7, #24]
 801c9ba:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 801c9be:	2b00      	cmp	r3, #0
 801c9c0:	d00a      	beq.n	801c9d8 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 801c9c2:	69fb      	ldr	r3, [r7, #28]
 801c9c4:	099b      	lsrs	r3, r3, #6
 801c9c6:	f003 0301 	and.w	r3, r3, #1
 801c9ca:	2b00      	cmp	r3, #0
 801c9cc:	d004      	beq.n	801c9d8 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 801c9ce:	687b      	ldr	r3, [r7, #4]
 801c9d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801c9d2:	6878      	ldr	r0, [r7, #4]
 801c9d4:	4798      	blx	r3
    return;
 801c9d6:	e0d7      	b.n	801cb88 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 801c9d8:	69bb      	ldr	r3, [r7, #24]
 801c9da:	085b      	lsrs	r3, r3, #1
 801c9dc:	f003 0301 	and.w	r3, r3, #1
 801c9e0:	2b00      	cmp	r3, #0
 801c9e2:	d00a      	beq.n	801c9fa <HAL_SPI_IRQHandler+0x66>
 801c9e4:	69fb      	ldr	r3, [r7, #28]
 801c9e6:	09db      	lsrs	r3, r3, #7
 801c9e8:	f003 0301 	and.w	r3, r3, #1
 801c9ec:	2b00      	cmp	r3, #0
 801c9ee:	d004      	beq.n	801c9fa <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 801c9f0:	687b      	ldr	r3, [r7, #4]
 801c9f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801c9f4:	6878      	ldr	r0, [r7, #4]
 801c9f6:	4798      	blx	r3
    return;
 801c9f8:	e0c6      	b.n	801cb88 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 801c9fa:	69bb      	ldr	r3, [r7, #24]
 801c9fc:	095b      	lsrs	r3, r3, #5
 801c9fe:	f003 0301 	and.w	r3, r3, #1
 801ca02:	2b00      	cmp	r3, #0
 801ca04:	d10c      	bne.n	801ca20 <HAL_SPI_IRQHandler+0x8c>
 801ca06:	69bb      	ldr	r3, [r7, #24]
 801ca08:	099b      	lsrs	r3, r3, #6
 801ca0a:	f003 0301 	and.w	r3, r3, #1
 801ca0e:	2b00      	cmp	r3, #0
 801ca10:	d106      	bne.n	801ca20 <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 801ca12:	69bb      	ldr	r3, [r7, #24]
 801ca14:	0a1b      	lsrs	r3, r3, #8
 801ca16:	f003 0301 	and.w	r3, r3, #1
 801ca1a:	2b00      	cmp	r3, #0
 801ca1c:	f000 80b4 	beq.w	801cb88 <HAL_SPI_IRQHandler+0x1f4>
 801ca20:	69fb      	ldr	r3, [r7, #28]
 801ca22:	095b      	lsrs	r3, r3, #5
 801ca24:	f003 0301 	and.w	r3, r3, #1
 801ca28:	2b00      	cmp	r3, #0
 801ca2a:	f000 80ad 	beq.w	801cb88 <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 801ca2e:	69bb      	ldr	r3, [r7, #24]
 801ca30:	099b      	lsrs	r3, r3, #6
 801ca32:	f003 0301 	and.w	r3, r3, #1
 801ca36:	2b00      	cmp	r3, #0
 801ca38:	d023      	beq.n	801ca82 <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 801ca3a:	687b      	ldr	r3, [r7, #4]
 801ca3c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 801ca40:	b2db      	uxtb	r3, r3
 801ca42:	2b03      	cmp	r3, #3
 801ca44:	d011      	beq.n	801ca6a <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 801ca46:	687b      	ldr	r3, [r7, #4]
 801ca48:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801ca4a:	f043 0204 	orr.w	r2, r3, #4
 801ca4e:	687b      	ldr	r3, [r7, #4]
 801ca50:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 801ca52:	2300      	movs	r3, #0
 801ca54:	617b      	str	r3, [r7, #20]
 801ca56:	687b      	ldr	r3, [r7, #4]
 801ca58:	681b      	ldr	r3, [r3, #0]
 801ca5a:	68db      	ldr	r3, [r3, #12]
 801ca5c:	617b      	str	r3, [r7, #20]
 801ca5e:	687b      	ldr	r3, [r7, #4]
 801ca60:	681b      	ldr	r3, [r3, #0]
 801ca62:	689b      	ldr	r3, [r3, #8]
 801ca64:	617b      	str	r3, [r7, #20]
 801ca66:	697b      	ldr	r3, [r7, #20]
 801ca68:	e00b      	b.n	801ca82 <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 801ca6a:	2300      	movs	r3, #0
 801ca6c:	613b      	str	r3, [r7, #16]
 801ca6e:	687b      	ldr	r3, [r7, #4]
 801ca70:	681b      	ldr	r3, [r3, #0]
 801ca72:	68db      	ldr	r3, [r3, #12]
 801ca74:	613b      	str	r3, [r7, #16]
 801ca76:	687b      	ldr	r3, [r7, #4]
 801ca78:	681b      	ldr	r3, [r3, #0]
 801ca7a:	689b      	ldr	r3, [r3, #8]
 801ca7c:	613b      	str	r3, [r7, #16]
 801ca7e:	693b      	ldr	r3, [r7, #16]
        return;
 801ca80:	e082      	b.n	801cb88 <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 801ca82:	69bb      	ldr	r3, [r7, #24]
 801ca84:	095b      	lsrs	r3, r3, #5
 801ca86:	f003 0301 	and.w	r3, r3, #1
 801ca8a:	2b00      	cmp	r3, #0
 801ca8c:	d014      	beq.n	801cab8 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 801ca8e:	687b      	ldr	r3, [r7, #4]
 801ca90:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801ca92:	f043 0201 	orr.w	r2, r3, #1
 801ca96:	687b      	ldr	r3, [r7, #4]
 801ca98:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 801ca9a:	2300      	movs	r3, #0
 801ca9c:	60fb      	str	r3, [r7, #12]
 801ca9e:	687b      	ldr	r3, [r7, #4]
 801caa0:	681b      	ldr	r3, [r3, #0]
 801caa2:	689b      	ldr	r3, [r3, #8]
 801caa4:	60fb      	str	r3, [r7, #12]
 801caa6:	687b      	ldr	r3, [r7, #4]
 801caa8:	681b      	ldr	r3, [r3, #0]
 801caaa:	681a      	ldr	r2, [r3, #0]
 801caac:	687b      	ldr	r3, [r7, #4]
 801caae:	681b      	ldr	r3, [r3, #0]
 801cab0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 801cab4:	601a      	str	r2, [r3, #0]
 801cab6:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 801cab8:	69bb      	ldr	r3, [r7, #24]
 801caba:	0a1b      	lsrs	r3, r3, #8
 801cabc:	f003 0301 	and.w	r3, r3, #1
 801cac0:	2b00      	cmp	r3, #0
 801cac2:	d00c      	beq.n	801cade <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 801cac4:	687b      	ldr	r3, [r7, #4]
 801cac6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801cac8:	f043 0208 	orr.w	r2, r3, #8
 801cacc:	687b      	ldr	r3, [r7, #4]
 801cace:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 801cad0:	2300      	movs	r3, #0
 801cad2:	60bb      	str	r3, [r7, #8]
 801cad4:	687b      	ldr	r3, [r7, #4]
 801cad6:	681b      	ldr	r3, [r3, #0]
 801cad8:	689b      	ldr	r3, [r3, #8]
 801cada:	60bb      	str	r3, [r7, #8]
 801cadc:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 801cade:	687b      	ldr	r3, [r7, #4]
 801cae0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801cae2:	2b00      	cmp	r3, #0
 801cae4:	d04f      	beq.n	801cb86 <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 801cae6:	687b      	ldr	r3, [r7, #4]
 801cae8:	681b      	ldr	r3, [r3, #0]
 801caea:	685a      	ldr	r2, [r3, #4]
 801caec:	687b      	ldr	r3, [r7, #4]
 801caee:	681b      	ldr	r3, [r3, #0]
 801caf0:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 801caf4:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 801caf6:	687b      	ldr	r3, [r7, #4]
 801caf8:	2201      	movs	r2, #1
 801cafa:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 801cafe:	69fb      	ldr	r3, [r7, #28]
 801cb00:	f003 0302 	and.w	r3, r3, #2
 801cb04:	2b00      	cmp	r3, #0
 801cb06:	d104      	bne.n	801cb12 <HAL_SPI_IRQHandler+0x17e>
 801cb08:	69fb      	ldr	r3, [r7, #28]
 801cb0a:	f003 0301 	and.w	r3, r3, #1
 801cb0e:	2b00      	cmp	r3, #0
 801cb10:	d034      	beq.n	801cb7c <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 801cb12:	687b      	ldr	r3, [r7, #4]
 801cb14:	681b      	ldr	r3, [r3, #0]
 801cb16:	685a      	ldr	r2, [r3, #4]
 801cb18:	687b      	ldr	r3, [r7, #4]
 801cb1a:	681b      	ldr	r3, [r3, #0]
 801cb1c:	f022 0203 	bic.w	r2, r2, #3
 801cb20:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 801cb22:	687b      	ldr	r3, [r7, #4]
 801cb24:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801cb26:	2b00      	cmp	r3, #0
 801cb28:	d011      	beq.n	801cb4e <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 801cb2a:	687b      	ldr	r3, [r7, #4]
 801cb2c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801cb2e:	4a18      	ldr	r2, [pc, #96]	; (801cb90 <HAL_SPI_IRQHandler+0x1fc>)
 801cb30:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 801cb32:	687b      	ldr	r3, [r7, #4]
 801cb34:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801cb36:	4618      	mov	r0, r3
 801cb38:	f7fc f946 	bl	8018dc8 <HAL_DMA_Abort_IT>
 801cb3c:	4603      	mov	r3, r0
 801cb3e:	2b00      	cmp	r3, #0
 801cb40:	d005      	beq.n	801cb4e <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 801cb42:	687b      	ldr	r3, [r7, #4]
 801cb44:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801cb46:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 801cb4a:	687b      	ldr	r3, [r7, #4]
 801cb4c:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 801cb4e:	687b      	ldr	r3, [r7, #4]
 801cb50:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801cb52:	2b00      	cmp	r3, #0
 801cb54:	d016      	beq.n	801cb84 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 801cb56:	687b      	ldr	r3, [r7, #4]
 801cb58:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801cb5a:	4a0d      	ldr	r2, [pc, #52]	; (801cb90 <HAL_SPI_IRQHandler+0x1fc>)
 801cb5c:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 801cb5e:	687b      	ldr	r3, [r7, #4]
 801cb60:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801cb62:	4618      	mov	r0, r3
 801cb64:	f7fc f930 	bl	8018dc8 <HAL_DMA_Abort_IT>
 801cb68:	4603      	mov	r3, r0
 801cb6a:	2b00      	cmp	r3, #0
 801cb6c:	d00a      	beq.n	801cb84 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 801cb6e:	687b      	ldr	r3, [r7, #4]
 801cb70:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801cb72:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 801cb76:	687b      	ldr	r3, [r7, #4]
 801cb78:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 801cb7a:	e003      	b.n	801cb84 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 801cb7c:	6878      	ldr	r0, [r7, #4]
 801cb7e:	f000 f809 	bl	801cb94 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 801cb82:	e000      	b.n	801cb86 <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 801cb84:	bf00      	nop
    return;
 801cb86:	bf00      	nop
  }
}
 801cb88:	3720      	adds	r7, #32
 801cb8a:	46bd      	mov	sp, r7
 801cb8c:	bd80      	pop	{r7, pc}
 801cb8e:	bf00      	nop
 801cb90:	0801cbc5 	.word	0x0801cbc5

0801cb94 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 801cb94:	b480      	push	{r7}
 801cb96:	b083      	sub	sp, #12
 801cb98:	af00      	add	r7, sp, #0
 801cb9a:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 801cb9c:	bf00      	nop
 801cb9e:	370c      	adds	r7, #12
 801cba0:	46bd      	mov	sp, r7
 801cba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 801cba6:	4770      	bx	lr

0801cba8 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 801cba8:	b480      	push	{r7}
 801cbaa:	b083      	sub	sp, #12
 801cbac:	af00      	add	r7, sp, #0
 801cbae:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 801cbb0:	687b      	ldr	r3, [r7, #4]
 801cbb2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 801cbb6:	b2db      	uxtb	r3, r3
}
 801cbb8:	4618      	mov	r0, r3
 801cbba:	370c      	adds	r7, #12
 801cbbc:	46bd      	mov	sp, r7
 801cbbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 801cbc2:	4770      	bx	lr

0801cbc4 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 801cbc4:	b580      	push	{r7, lr}
 801cbc6:	b084      	sub	sp, #16
 801cbc8:	af00      	add	r7, sp, #0
 801cbca:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 801cbcc:	687b      	ldr	r3, [r7, #4]
 801cbce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801cbd0:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 801cbd2:	68fb      	ldr	r3, [r7, #12]
 801cbd4:	2200      	movs	r2, #0
 801cbd6:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 801cbd8:	68fb      	ldr	r3, [r7, #12]
 801cbda:	2200      	movs	r2, #0
 801cbdc:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 801cbde:	68f8      	ldr	r0, [r7, #12]
 801cbe0:	f7ff ffd8 	bl	801cb94 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 801cbe4:	bf00      	nop
 801cbe6:	3710      	adds	r7, #16
 801cbe8:	46bd      	mov	sp, r7
 801cbea:	bd80      	pop	{r7, pc}

0801cbec <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 801cbec:	b580      	push	{r7, lr}
 801cbee:	b088      	sub	sp, #32
 801cbf0:	af00      	add	r7, sp, #0
 801cbf2:	60f8      	str	r0, [r7, #12]
 801cbf4:	60b9      	str	r1, [r7, #8]
 801cbf6:	603b      	str	r3, [r7, #0]
 801cbf8:	4613      	mov	r3, r2
 801cbfa:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 801cbfc:	f7fb fbec 	bl	80183d8 <HAL_GetTick>
 801cc00:	4602      	mov	r2, r0
 801cc02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801cc04:	1a9b      	subs	r3, r3, r2
 801cc06:	683a      	ldr	r2, [r7, #0]
 801cc08:	4413      	add	r3, r2
 801cc0a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 801cc0c:	f7fb fbe4 	bl	80183d8 <HAL_GetTick>
 801cc10:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 801cc12:	4b39      	ldr	r3, [pc, #228]	; (801ccf8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 801cc14:	681b      	ldr	r3, [r3, #0]
 801cc16:	015b      	lsls	r3, r3, #5
 801cc18:	0d1b      	lsrs	r3, r3, #20
 801cc1a:	69fa      	ldr	r2, [r7, #28]
 801cc1c:	fb02 f303 	mul.w	r3, r2, r3
 801cc20:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 801cc22:	e054      	b.n	801ccce <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 801cc24:	683b      	ldr	r3, [r7, #0]
 801cc26:	f1b3 3fff 	cmp.w	r3, #4294967295
 801cc2a:	d050      	beq.n	801ccce <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 801cc2c:	f7fb fbd4 	bl	80183d8 <HAL_GetTick>
 801cc30:	4602      	mov	r2, r0
 801cc32:	69bb      	ldr	r3, [r7, #24]
 801cc34:	1ad3      	subs	r3, r2, r3
 801cc36:	69fa      	ldr	r2, [r7, #28]
 801cc38:	429a      	cmp	r2, r3
 801cc3a:	d902      	bls.n	801cc42 <SPI_WaitFlagStateUntilTimeout+0x56>
 801cc3c:	69fb      	ldr	r3, [r7, #28]
 801cc3e:	2b00      	cmp	r3, #0
 801cc40:	d13d      	bne.n	801ccbe <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 801cc42:	68fb      	ldr	r3, [r7, #12]
 801cc44:	681b      	ldr	r3, [r3, #0]
 801cc46:	685a      	ldr	r2, [r3, #4]
 801cc48:	68fb      	ldr	r3, [r7, #12]
 801cc4a:	681b      	ldr	r3, [r3, #0]
 801cc4c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 801cc50:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 801cc52:	68fb      	ldr	r3, [r7, #12]
 801cc54:	685b      	ldr	r3, [r3, #4]
 801cc56:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 801cc5a:	d111      	bne.n	801cc80 <SPI_WaitFlagStateUntilTimeout+0x94>
 801cc5c:	68fb      	ldr	r3, [r7, #12]
 801cc5e:	689b      	ldr	r3, [r3, #8]
 801cc60:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801cc64:	d004      	beq.n	801cc70 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 801cc66:	68fb      	ldr	r3, [r7, #12]
 801cc68:	689b      	ldr	r3, [r3, #8]
 801cc6a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801cc6e:	d107      	bne.n	801cc80 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 801cc70:	68fb      	ldr	r3, [r7, #12]
 801cc72:	681b      	ldr	r3, [r3, #0]
 801cc74:	681a      	ldr	r2, [r3, #0]
 801cc76:	68fb      	ldr	r3, [r7, #12]
 801cc78:	681b      	ldr	r3, [r3, #0]
 801cc7a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 801cc7e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 801cc80:	68fb      	ldr	r3, [r7, #12]
 801cc82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801cc84:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 801cc88:	d10f      	bne.n	801ccaa <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 801cc8a:	68fb      	ldr	r3, [r7, #12]
 801cc8c:	681b      	ldr	r3, [r3, #0]
 801cc8e:	681a      	ldr	r2, [r3, #0]
 801cc90:	68fb      	ldr	r3, [r7, #12]
 801cc92:	681b      	ldr	r3, [r3, #0]
 801cc94:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 801cc98:	601a      	str	r2, [r3, #0]
 801cc9a:	68fb      	ldr	r3, [r7, #12]
 801cc9c:	681b      	ldr	r3, [r3, #0]
 801cc9e:	681a      	ldr	r2, [r3, #0]
 801cca0:	68fb      	ldr	r3, [r7, #12]
 801cca2:	681b      	ldr	r3, [r3, #0]
 801cca4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 801cca8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 801ccaa:	68fb      	ldr	r3, [r7, #12]
 801ccac:	2201      	movs	r2, #1
 801ccae:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 801ccb2:	68fb      	ldr	r3, [r7, #12]
 801ccb4:	2200      	movs	r2, #0
 801ccb6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 801ccba:	2303      	movs	r3, #3
 801ccbc:	e017      	b.n	801ccee <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 801ccbe:	697b      	ldr	r3, [r7, #20]
 801ccc0:	2b00      	cmp	r3, #0
 801ccc2:	d101      	bne.n	801ccc8 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 801ccc4:	2300      	movs	r3, #0
 801ccc6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 801ccc8:	697b      	ldr	r3, [r7, #20]
 801ccca:	3b01      	subs	r3, #1
 801cccc:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 801ccce:	68fb      	ldr	r3, [r7, #12]
 801ccd0:	681b      	ldr	r3, [r3, #0]
 801ccd2:	689a      	ldr	r2, [r3, #8]
 801ccd4:	68bb      	ldr	r3, [r7, #8]
 801ccd6:	4013      	ands	r3, r2
 801ccd8:	68ba      	ldr	r2, [r7, #8]
 801ccda:	429a      	cmp	r2, r3
 801ccdc:	bf0c      	ite	eq
 801ccde:	2301      	moveq	r3, #1
 801cce0:	2300      	movne	r3, #0
 801cce2:	b2db      	uxtb	r3, r3
 801cce4:	461a      	mov	r2, r3
 801cce6:	79fb      	ldrb	r3, [r7, #7]
 801cce8:	429a      	cmp	r2, r3
 801ccea:	d19b      	bne.n	801cc24 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 801ccec:	2300      	movs	r3, #0
}
 801ccee:	4618      	mov	r0, r3
 801ccf0:	3720      	adds	r7, #32
 801ccf2:	46bd      	mov	sp, r7
 801ccf4:	bd80      	pop	{r7, pc}
 801ccf6:	bf00      	nop
 801ccf8:	20000588 	.word	0x20000588

0801ccfc <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 801ccfc:	b580      	push	{r7, lr}
 801ccfe:	b086      	sub	sp, #24
 801cd00:	af02      	add	r7, sp, #8
 801cd02:	60f8      	str	r0, [r7, #12]
 801cd04:	60b9      	str	r1, [r7, #8]
 801cd06:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 801cd08:	68fb      	ldr	r3, [r7, #12]
 801cd0a:	685b      	ldr	r3, [r3, #4]
 801cd0c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 801cd10:	d111      	bne.n	801cd36 <SPI_EndRxTransaction+0x3a>
 801cd12:	68fb      	ldr	r3, [r7, #12]
 801cd14:	689b      	ldr	r3, [r3, #8]
 801cd16:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801cd1a:	d004      	beq.n	801cd26 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 801cd1c:	68fb      	ldr	r3, [r7, #12]
 801cd1e:	689b      	ldr	r3, [r3, #8]
 801cd20:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801cd24:	d107      	bne.n	801cd36 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 801cd26:	68fb      	ldr	r3, [r7, #12]
 801cd28:	681b      	ldr	r3, [r3, #0]
 801cd2a:	681a      	ldr	r2, [r3, #0]
 801cd2c:	68fb      	ldr	r3, [r7, #12]
 801cd2e:	681b      	ldr	r3, [r3, #0]
 801cd30:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 801cd34:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 801cd36:	68fb      	ldr	r3, [r7, #12]
 801cd38:	685b      	ldr	r3, [r3, #4]
 801cd3a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 801cd3e:	d12a      	bne.n	801cd96 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 801cd40:	68fb      	ldr	r3, [r7, #12]
 801cd42:	689b      	ldr	r3, [r3, #8]
 801cd44:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801cd48:	d012      	beq.n	801cd70 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 801cd4a:	687b      	ldr	r3, [r7, #4]
 801cd4c:	9300      	str	r3, [sp, #0]
 801cd4e:	68bb      	ldr	r3, [r7, #8]
 801cd50:	2200      	movs	r2, #0
 801cd52:	2180      	movs	r1, #128	; 0x80
 801cd54:	68f8      	ldr	r0, [r7, #12]
 801cd56:	f7ff ff49 	bl	801cbec <SPI_WaitFlagStateUntilTimeout>
 801cd5a:	4603      	mov	r3, r0
 801cd5c:	2b00      	cmp	r3, #0
 801cd5e:	d02d      	beq.n	801cdbc <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 801cd60:	68fb      	ldr	r3, [r7, #12]
 801cd62:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801cd64:	f043 0220 	orr.w	r2, r3, #32
 801cd68:	68fb      	ldr	r3, [r7, #12]
 801cd6a:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 801cd6c:	2303      	movs	r3, #3
 801cd6e:	e026      	b.n	801cdbe <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 801cd70:	687b      	ldr	r3, [r7, #4]
 801cd72:	9300      	str	r3, [sp, #0]
 801cd74:	68bb      	ldr	r3, [r7, #8]
 801cd76:	2200      	movs	r2, #0
 801cd78:	2101      	movs	r1, #1
 801cd7a:	68f8      	ldr	r0, [r7, #12]
 801cd7c:	f7ff ff36 	bl	801cbec <SPI_WaitFlagStateUntilTimeout>
 801cd80:	4603      	mov	r3, r0
 801cd82:	2b00      	cmp	r3, #0
 801cd84:	d01a      	beq.n	801cdbc <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 801cd86:	68fb      	ldr	r3, [r7, #12]
 801cd88:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801cd8a:	f043 0220 	orr.w	r2, r3, #32
 801cd8e:	68fb      	ldr	r3, [r7, #12]
 801cd90:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 801cd92:	2303      	movs	r3, #3
 801cd94:	e013      	b.n	801cdbe <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 801cd96:	687b      	ldr	r3, [r7, #4]
 801cd98:	9300      	str	r3, [sp, #0]
 801cd9a:	68bb      	ldr	r3, [r7, #8]
 801cd9c:	2200      	movs	r2, #0
 801cd9e:	2101      	movs	r1, #1
 801cda0:	68f8      	ldr	r0, [r7, #12]
 801cda2:	f7ff ff23 	bl	801cbec <SPI_WaitFlagStateUntilTimeout>
 801cda6:	4603      	mov	r3, r0
 801cda8:	2b00      	cmp	r3, #0
 801cdaa:	d007      	beq.n	801cdbc <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 801cdac:	68fb      	ldr	r3, [r7, #12]
 801cdae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801cdb0:	f043 0220 	orr.w	r2, r3, #32
 801cdb4:	68fb      	ldr	r3, [r7, #12]
 801cdb6:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 801cdb8:	2303      	movs	r3, #3
 801cdba:	e000      	b.n	801cdbe <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 801cdbc:	2300      	movs	r3, #0
}
 801cdbe:	4618      	mov	r0, r3
 801cdc0:	3710      	adds	r7, #16
 801cdc2:	46bd      	mov	sp, r7
 801cdc4:	bd80      	pop	{r7, pc}
	...

0801cdc8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 801cdc8:	b580      	push	{r7, lr}
 801cdca:	b088      	sub	sp, #32
 801cdcc:	af02      	add	r7, sp, #8
 801cdce:	60f8      	str	r0, [r7, #12]
 801cdd0:	60b9      	str	r1, [r7, #8]
 801cdd2:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 801cdd4:	4b1b      	ldr	r3, [pc, #108]	; (801ce44 <SPI_EndRxTxTransaction+0x7c>)
 801cdd6:	681b      	ldr	r3, [r3, #0]
 801cdd8:	4a1b      	ldr	r2, [pc, #108]	; (801ce48 <SPI_EndRxTxTransaction+0x80>)
 801cdda:	fba2 2303 	umull	r2, r3, r2, r3
 801cdde:	0d5b      	lsrs	r3, r3, #21
 801cde0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 801cde4:	fb02 f303 	mul.w	r3, r2, r3
 801cde8:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 801cdea:	68fb      	ldr	r3, [r7, #12]
 801cdec:	685b      	ldr	r3, [r3, #4]
 801cdee:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 801cdf2:	d112      	bne.n	801ce1a <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 801cdf4:	687b      	ldr	r3, [r7, #4]
 801cdf6:	9300      	str	r3, [sp, #0]
 801cdf8:	68bb      	ldr	r3, [r7, #8]
 801cdfa:	2200      	movs	r2, #0
 801cdfc:	2180      	movs	r1, #128	; 0x80
 801cdfe:	68f8      	ldr	r0, [r7, #12]
 801ce00:	f7ff fef4 	bl	801cbec <SPI_WaitFlagStateUntilTimeout>
 801ce04:	4603      	mov	r3, r0
 801ce06:	2b00      	cmp	r3, #0
 801ce08:	d016      	beq.n	801ce38 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 801ce0a:	68fb      	ldr	r3, [r7, #12]
 801ce0c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801ce0e:	f043 0220 	orr.w	r2, r3, #32
 801ce12:	68fb      	ldr	r3, [r7, #12]
 801ce14:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 801ce16:	2303      	movs	r3, #3
 801ce18:	e00f      	b.n	801ce3a <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 801ce1a:	697b      	ldr	r3, [r7, #20]
 801ce1c:	2b00      	cmp	r3, #0
 801ce1e:	d00a      	beq.n	801ce36 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 801ce20:	697b      	ldr	r3, [r7, #20]
 801ce22:	3b01      	subs	r3, #1
 801ce24:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 801ce26:	68fb      	ldr	r3, [r7, #12]
 801ce28:	681b      	ldr	r3, [r3, #0]
 801ce2a:	689b      	ldr	r3, [r3, #8]
 801ce2c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801ce30:	2b80      	cmp	r3, #128	; 0x80
 801ce32:	d0f2      	beq.n	801ce1a <SPI_EndRxTxTransaction+0x52>
 801ce34:	e000      	b.n	801ce38 <SPI_EndRxTxTransaction+0x70>
        break;
 801ce36:	bf00      	nop
  }

  return HAL_OK;
 801ce38:	2300      	movs	r3, #0
}
 801ce3a:	4618      	mov	r0, r3
 801ce3c:	3718      	adds	r7, #24
 801ce3e:	46bd      	mov	sp, r7
 801ce40:	bd80      	pop	{r7, pc}
 801ce42:	bf00      	nop
 801ce44:	20000588 	.word	0x20000588
 801ce48:	165e9f81 	.word	0x165e9f81

0801ce4c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 801ce4c:	b580      	push	{r7, lr}
 801ce4e:	b082      	sub	sp, #8
 801ce50:	af00      	add	r7, sp, #0
 801ce52:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 801ce54:	687b      	ldr	r3, [r7, #4]
 801ce56:	2b00      	cmp	r3, #0
 801ce58:	d101      	bne.n	801ce5e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 801ce5a:	2301      	movs	r3, #1
 801ce5c:	e041      	b.n	801cee2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 801ce5e:	687b      	ldr	r3, [r7, #4]
 801ce60:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801ce64:	b2db      	uxtb	r3, r3
 801ce66:	2b00      	cmp	r3, #0
 801ce68:	d106      	bne.n	801ce78 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 801ce6a:	687b      	ldr	r3, [r7, #4]
 801ce6c:	2200      	movs	r2, #0
 801ce6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 801ce72:	6878      	ldr	r0, [r7, #4]
 801ce74:	f7fb f8ca 	bl	801800c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 801ce78:	687b      	ldr	r3, [r7, #4]
 801ce7a:	2202      	movs	r2, #2
 801ce7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 801ce80:	687b      	ldr	r3, [r7, #4]
 801ce82:	681a      	ldr	r2, [r3, #0]
 801ce84:	687b      	ldr	r3, [r7, #4]
 801ce86:	3304      	adds	r3, #4
 801ce88:	4619      	mov	r1, r3
 801ce8a:	4610      	mov	r0, r2
 801ce8c:	f000 faf2 	bl	801d474 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 801ce90:	687b      	ldr	r3, [r7, #4]
 801ce92:	2201      	movs	r2, #1
 801ce94:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 801ce98:	687b      	ldr	r3, [r7, #4]
 801ce9a:	2201      	movs	r2, #1
 801ce9c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 801cea0:	687b      	ldr	r3, [r7, #4]
 801cea2:	2201      	movs	r2, #1
 801cea4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 801cea8:	687b      	ldr	r3, [r7, #4]
 801ceaa:	2201      	movs	r2, #1
 801ceac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 801ceb0:	687b      	ldr	r3, [r7, #4]
 801ceb2:	2201      	movs	r2, #1
 801ceb4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 801ceb8:	687b      	ldr	r3, [r7, #4]
 801ceba:	2201      	movs	r2, #1
 801cebc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 801cec0:	687b      	ldr	r3, [r7, #4]
 801cec2:	2201      	movs	r2, #1
 801cec4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 801cec8:	687b      	ldr	r3, [r7, #4]
 801ceca:	2201      	movs	r2, #1
 801cecc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 801ced0:	687b      	ldr	r3, [r7, #4]
 801ced2:	2201      	movs	r2, #1
 801ced4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 801ced8:	687b      	ldr	r3, [r7, #4]
 801ceda:	2201      	movs	r2, #1
 801cedc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 801cee0:	2300      	movs	r3, #0
}
 801cee2:	4618      	mov	r0, r3
 801cee4:	3708      	adds	r7, #8
 801cee6:	46bd      	mov	sp, r7
 801cee8:	bd80      	pop	{r7, pc}
	...

0801ceec <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 801ceec:	b480      	push	{r7}
 801ceee:	b085      	sub	sp, #20
 801cef0:	af00      	add	r7, sp, #0
 801cef2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 801cef4:	687b      	ldr	r3, [r7, #4]
 801cef6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801cefa:	b2db      	uxtb	r3, r3
 801cefc:	2b01      	cmp	r3, #1
 801cefe:	d001      	beq.n	801cf04 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 801cf00:	2301      	movs	r3, #1
 801cf02:	e04e      	b.n	801cfa2 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 801cf04:	687b      	ldr	r3, [r7, #4]
 801cf06:	2202      	movs	r2, #2
 801cf08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 801cf0c:	687b      	ldr	r3, [r7, #4]
 801cf0e:	681b      	ldr	r3, [r3, #0]
 801cf10:	68da      	ldr	r2, [r3, #12]
 801cf12:	687b      	ldr	r3, [r7, #4]
 801cf14:	681b      	ldr	r3, [r3, #0]
 801cf16:	f042 0201 	orr.w	r2, r2, #1
 801cf1a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 801cf1c:	687b      	ldr	r3, [r7, #4]
 801cf1e:	681b      	ldr	r3, [r3, #0]
 801cf20:	4a23      	ldr	r2, [pc, #140]	; (801cfb0 <HAL_TIM_Base_Start_IT+0xc4>)
 801cf22:	4293      	cmp	r3, r2
 801cf24:	d022      	beq.n	801cf6c <HAL_TIM_Base_Start_IT+0x80>
 801cf26:	687b      	ldr	r3, [r7, #4]
 801cf28:	681b      	ldr	r3, [r3, #0]
 801cf2a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801cf2e:	d01d      	beq.n	801cf6c <HAL_TIM_Base_Start_IT+0x80>
 801cf30:	687b      	ldr	r3, [r7, #4]
 801cf32:	681b      	ldr	r3, [r3, #0]
 801cf34:	4a1f      	ldr	r2, [pc, #124]	; (801cfb4 <HAL_TIM_Base_Start_IT+0xc8>)
 801cf36:	4293      	cmp	r3, r2
 801cf38:	d018      	beq.n	801cf6c <HAL_TIM_Base_Start_IT+0x80>
 801cf3a:	687b      	ldr	r3, [r7, #4]
 801cf3c:	681b      	ldr	r3, [r3, #0]
 801cf3e:	4a1e      	ldr	r2, [pc, #120]	; (801cfb8 <HAL_TIM_Base_Start_IT+0xcc>)
 801cf40:	4293      	cmp	r3, r2
 801cf42:	d013      	beq.n	801cf6c <HAL_TIM_Base_Start_IT+0x80>
 801cf44:	687b      	ldr	r3, [r7, #4]
 801cf46:	681b      	ldr	r3, [r3, #0]
 801cf48:	4a1c      	ldr	r2, [pc, #112]	; (801cfbc <HAL_TIM_Base_Start_IT+0xd0>)
 801cf4a:	4293      	cmp	r3, r2
 801cf4c:	d00e      	beq.n	801cf6c <HAL_TIM_Base_Start_IT+0x80>
 801cf4e:	687b      	ldr	r3, [r7, #4]
 801cf50:	681b      	ldr	r3, [r3, #0]
 801cf52:	4a1b      	ldr	r2, [pc, #108]	; (801cfc0 <HAL_TIM_Base_Start_IT+0xd4>)
 801cf54:	4293      	cmp	r3, r2
 801cf56:	d009      	beq.n	801cf6c <HAL_TIM_Base_Start_IT+0x80>
 801cf58:	687b      	ldr	r3, [r7, #4]
 801cf5a:	681b      	ldr	r3, [r3, #0]
 801cf5c:	4a19      	ldr	r2, [pc, #100]	; (801cfc4 <HAL_TIM_Base_Start_IT+0xd8>)
 801cf5e:	4293      	cmp	r3, r2
 801cf60:	d004      	beq.n	801cf6c <HAL_TIM_Base_Start_IT+0x80>
 801cf62:	687b      	ldr	r3, [r7, #4]
 801cf64:	681b      	ldr	r3, [r3, #0]
 801cf66:	4a18      	ldr	r2, [pc, #96]	; (801cfc8 <HAL_TIM_Base_Start_IT+0xdc>)
 801cf68:	4293      	cmp	r3, r2
 801cf6a:	d111      	bne.n	801cf90 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 801cf6c:	687b      	ldr	r3, [r7, #4]
 801cf6e:	681b      	ldr	r3, [r3, #0]
 801cf70:	689b      	ldr	r3, [r3, #8]
 801cf72:	f003 0307 	and.w	r3, r3, #7
 801cf76:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801cf78:	68fb      	ldr	r3, [r7, #12]
 801cf7a:	2b06      	cmp	r3, #6
 801cf7c:	d010      	beq.n	801cfa0 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 801cf7e:	687b      	ldr	r3, [r7, #4]
 801cf80:	681b      	ldr	r3, [r3, #0]
 801cf82:	681a      	ldr	r2, [r3, #0]
 801cf84:	687b      	ldr	r3, [r7, #4]
 801cf86:	681b      	ldr	r3, [r3, #0]
 801cf88:	f042 0201 	orr.w	r2, r2, #1
 801cf8c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801cf8e:	e007      	b.n	801cfa0 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 801cf90:	687b      	ldr	r3, [r7, #4]
 801cf92:	681b      	ldr	r3, [r3, #0]
 801cf94:	681a      	ldr	r2, [r3, #0]
 801cf96:	687b      	ldr	r3, [r7, #4]
 801cf98:	681b      	ldr	r3, [r3, #0]
 801cf9a:	f042 0201 	orr.w	r2, r2, #1
 801cf9e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 801cfa0:	2300      	movs	r3, #0
}
 801cfa2:	4618      	mov	r0, r3
 801cfa4:	3714      	adds	r7, #20
 801cfa6:	46bd      	mov	sp, r7
 801cfa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 801cfac:	4770      	bx	lr
 801cfae:	bf00      	nop
 801cfb0:	40010000 	.word	0x40010000
 801cfb4:	40000400 	.word	0x40000400
 801cfb8:	40000800 	.word	0x40000800
 801cfbc:	40000c00 	.word	0x40000c00
 801cfc0:	40010400 	.word	0x40010400
 801cfc4:	40014000 	.word	0x40014000
 801cfc8:	40001800 	.word	0x40001800

0801cfcc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 801cfcc:	b580      	push	{r7, lr}
 801cfce:	b082      	sub	sp, #8
 801cfd0:	af00      	add	r7, sp, #0
 801cfd2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 801cfd4:	687b      	ldr	r3, [r7, #4]
 801cfd6:	681b      	ldr	r3, [r3, #0]
 801cfd8:	691b      	ldr	r3, [r3, #16]
 801cfda:	f003 0302 	and.w	r3, r3, #2
 801cfde:	2b02      	cmp	r3, #2
 801cfe0:	d122      	bne.n	801d028 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 801cfe2:	687b      	ldr	r3, [r7, #4]
 801cfe4:	681b      	ldr	r3, [r3, #0]
 801cfe6:	68db      	ldr	r3, [r3, #12]
 801cfe8:	f003 0302 	and.w	r3, r3, #2
 801cfec:	2b02      	cmp	r3, #2
 801cfee:	d11b      	bne.n	801d028 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 801cff0:	687b      	ldr	r3, [r7, #4]
 801cff2:	681b      	ldr	r3, [r3, #0]
 801cff4:	f06f 0202 	mvn.w	r2, #2
 801cff8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 801cffa:	687b      	ldr	r3, [r7, #4]
 801cffc:	2201      	movs	r2, #1
 801cffe:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 801d000:	687b      	ldr	r3, [r7, #4]
 801d002:	681b      	ldr	r3, [r3, #0]
 801d004:	699b      	ldr	r3, [r3, #24]
 801d006:	f003 0303 	and.w	r3, r3, #3
 801d00a:	2b00      	cmp	r3, #0
 801d00c:	d003      	beq.n	801d016 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 801d00e:	6878      	ldr	r0, [r7, #4]
 801d010:	f000 fa11 	bl	801d436 <HAL_TIM_IC_CaptureCallback>
 801d014:	e005      	b.n	801d022 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 801d016:	6878      	ldr	r0, [r7, #4]
 801d018:	f000 fa03 	bl	801d422 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 801d01c:	6878      	ldr	r0, [r7, #4]
 801d01e:	f000 fa14 	bl	801d44a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 801d022:	687b      	ldr	r3, [r7, #4]
 801d024:	2200      	movs	r2, #0
 801d026:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 801d028:	687b      	ldr	r3, [r7, #4]
 801d02a:	681b      	ldr	r3, [r3, #0]
 801d02c:	691b      	ldr	r3, [r3, #16]
 801d02e:	f003 0304 	and.w	r3, r3, #4
 801d032:	2b04      	cmp	r3, #4
 801d034:	d122      	bne.n	801d07c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 801d036:	687b      	ldr	r3, [r7, #4]
 801d038:	681b      	ldr	r3, [r3, #0]
 801d03a:	68db      	ldr	r3, [r3, #12]
 801d03c:	f003 0304 	and.w	r3, r3, #4
 801d040:	2b04      	cmp	r3, #4
 801d042:	d11b      	bne.n	801d07c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 801d044:	687b      	ldr	r3, [r7, #4]
 801d046:	681b      	ldr	r3, [r3, #0]
 801d048:	f06f 0204 	mvn.w	r2, #4
 801d04c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 801d04e:	687b      	ldr	r3, [r7, #4]
 801d050:	2202      	movs	r2, #2
 801d052:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 801d054:	687b      	ldr	r3, [r7, #4]
 801d056:	681b      	ldr	r3, [r3, #0]
 801d058:	699b      	ldr	r3, [r3, #24]
 801d05a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 801d05e:	2b00      	cmp	r3, #0
 801d060:	d003      	beq.n	801d06a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 801d062:	6878      	ldr	r0, [r7, #4]
 801d064:	f000 f9e7 	bl	801d436 <HAL_TIM_IC_CaptureCallback>
 801d068:	e005      	b.n	801d076 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 801d06a:	6878      	ldr	r0, [r7, #4]
 801d06c:	f000 f9d9 	bl	801d422 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 801d070:	6878      	ldr	r0, [r7, #4]
 801d072:	f000 f9ea 	bl	801d44a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 801d076:	687b      	ldr	r3, [r7, #4]
 801d078:	2200      	movs	r2, #0
 801d07a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 801d07c:	687b      	ldr	r3, [r7, #4]
 801d07e:	681b      	ldr	r3, [r3, #0]
 801d080:	691b      	ldr	r3, [r3, #16]
 801d082:	f003 0308 	and.w	r3, r3, #8
 801d086:	2b08      	cmp	r3, #8
 801d088:	d122      	bne.n	801d0d0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 801d08a:	687b      	ldr	r3, [r7, #4]
 801d08c:	681b      	ldr	r3, [r3, #0]
 801d08e:	68db      	ldr	r3, [r3, #12]
 801d090:	f003 0308 	and.w	r3, r3, #8
 801d094:	2b08      	cmp	r3, #8
 801d096:	d11b      	bne.n	801d0d0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 801d098:	687b      	ldr	r3, [r7, #4]
 801d09a:	681b      	ldr	r3, [r3, #0]
 801d09c:	f06f 0208 	mvn.w	r2, #8
 801d0a0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 801d0a2:	687b      	ldr	r3, [r7, #4]
 801d0a4:	2204      	movs	r2, #4
 801d0a6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 801d0a8:	687b      	ldr	r3, [r7, #4]
 801d0aa:	681b      	ldr	r3, [r3, #0]
 801d0ac:	69db      	ldr	r3, [r3, #28]
 801d0ae:	f003 0303 	and.w	r3, r3, #3
 801d0b2:	2b00      	cmp	r3, #0
 801d0b4:	d003      	beq.n	801d0be <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 801d0b6:	6878      	ldr	r0, [r7, #4]
 801d0b8:	f000 f9bd 	bl	801d436 <HAL_TIM_IC_CaptureCallback>
 801d0bc:	e005      	b.n	801d0ca <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 801d0be:	6878      	ldr	r0, [r7, #4]
 801d0c0:	f000 f9af 	bl	801d422 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 801d0c4:	6878      	ldr	r0, [r7, #4]
 801d0c6:	f000 f9c0 	bl	801d44a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 801d0ca:	687b      	ldr	r3, [r7, #4]
 801d0cc:	2200      	movs	r2, #0
 801d0ce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 801d0d0:	687b      	ldr	r3, [r7, #4]
 801d0d2:	681b      	ldr	r3, [r3, #0]
 801d0d4:	691b      	ldr	r3, [r3, #16]
 801d0d6:	f003 0310 	and.w	r3, r3, #16
 801d0da:	2b10      	cmp	r3, #16
 801d0dc:	d122      	bne.n	801d124 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 801d0de:	687b      	ldr	r3, [r7, #4]
 801d0e0:	681b      	ldr	r3, [r3, #0]
 801d0e2:	68db      	ldr	r3, [r3, #12]
 801d0e4:	f003 0310 	and.w	r3, r3, #16
 801d0e8:	2b10      	cmp	r3, #16
 801d0ea:	d11b      	bne.n	801d124 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 801d0ec:	687b      	ldr	r3, [r7, #4]
 801d0ee:	681b      	ldr	r3, [r3, #0]
 801d0f0:	f06f 0210 	mvn.w	r2, #16
 801d0f4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 801d0f6:	687b      	ldr	r3, [r7, #4]
 801d0f8:	2208      	movs	r2, #8
 801d0fa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 801d0fc:	687b      	ldr	r3, [r7, #4]
 801d0fe:	681b      	ldr	r3, [r3, #0]
 801d100:	69db      	ldr	r3, [r3, #28]
 801d102:	f403 7340 	and.w	r3, r3, #768	; 0x300
 801d106:	2b00      	cmp	r3, #0
 801d108:	d003      	beq.n	801d112 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 801d10a:	6878      	ldr	r0, [r7, #4]
 801d10c:	f000 f993 	bl	801d436 <HAL_TIM_IC_CaptureCallback>
 801d110:	e005      	b.n	801d11e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 801d112:	6878      	ldr	r0, [r7, #4]
 801d114:	f000 f985 	bl	801d422 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 801d118:	6878      	ldr	r0, [r7, #4]
 801d11a:	f000 f996 	bl	801d44a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 801d11e:	687b      	ldr	r3, [r7, #4]
 801d120:	2200      	movs	r2, #0
 801d122:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 801d124:	687b      	ldr	r3, [r7, #4]
 801d126:	681b      	ldr	r3, [r3, #0]
 801d128:	691b      	ldr	r3, [r3, #16]
 801d12a:	f003 0301 	and.w	r3, r3, #1
 801d12e:	2b01      	cmp	r3, #1
 801d130:	d10e      	bne.n	801d150 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 801d132:	687b      	ldr	r3, [r7, #4]
 801d134:	681b      	ldr	r3, [r3, #0]
 801d136:	68db      	ldr	r3, [r3, #12]
 801d138:	f003 0301 	and.w	r3, r3, #1
 801d13c:	2b01      	cmp	r3, #1
 801d13e:	d107      	bne.n	801d150 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 801d140:	687b      	ldr	r3, [r7, #4]
 801d142:	681b      	ldr	r3, [r3, #0]
 801d144:	f06f 0201 	mvn.w	r2, #1
 801d148:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 801d14a:	6878      	ldr	r0, [r7, #4]
 801d14c:	f7fa fd6e 	bl	8017c2c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 801d150:	687b      	ldr	r3, [r7, #4]
 801d152:	681b      	ldr	r3, [r3, #0]
 801d154:	691b      	ldr	r3, [r3, #16]
 801d156:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801d15a:	2b80      	cmp	r3, #128	; 0x80
 801d15c:	d10e      	bne.n	801d17c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 801d15e:	687b      	ldr	r3, [r7, #4]
 801d160:	681b      	ldr	r3, [r3, #0]
 801d162:	68db      	ldr	r3, [r3, #12]
 801d164:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801d168:	2b80      	cmp	r3, #128	; 0x80
 801d16a:	d107      	bne.n	801d17c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 801d16c:	687b      	ldr	r3, [r7, #4]
 801d16e:	681b      	ldr	r3, [r3, #0]
 801d170:	f06f 0280 	mvn.w	r2, #128	; 0x80
 801d174:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 801d176:	6878      	ldr	r0, [r7, #4]
 801d178:	f000 fcec 	bl	801db54 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 801d17c:	687b      	ldr	r3, [r7, #4]
 801d17e:	681b      	ldr	r3, [r3, #0]
 801d180:	691b      	ldr	r3, [r3, #16]
 801d182:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801d186:	2b40      	cmp	r3, #64	; 0x40
 801d188:	d10e      	bne.n	801d1a8 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 801d18a:	687b      	ldr	r3, [r7, #4]
 801d18c:	681b      	ldr	r3, [r3, #0]
 801d18e:	68db      	ldr	r3, [r3, #12]
 801d190:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801d194:	2b40      	cmp	r3, #64	; 0x40
 801d196:	d107      	bne.n	801d1a8 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 801d198:	687b      	ldr	r3, [r7, #4]
 801d19a:	681b      	ldr	r3, [r3, #0]
 801d19c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 801d1a0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 801d1a2:	6878      	ldr	r0, [r7, #4]
 801d1a4:	f000 f95b 	bl	801d45e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 801d1a8:	687b      	ldr	r3, [r7, #4]
 801d1aa:	681b      	ldr	r3, [r3, #0]
 801d1ac:	691b      	ldr	r3, [r3, #16]
 801d1ae:	f003 0320 	and.w	r3, r3, #32
 801d1b2:	2b20      	cmp	r3, #32
 801d1b4:	d10e      	bne.n	801d1d4 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 801d1b6:	687b      	ldr	r3, [r7, #4]
 801d1b8:	681b      	ldr	r3, [r3, #0]
 801d1ba:	68db      	ldr	r3, [r3, #12]
 801d1bc:	f003 0320 	and.w	r3, r3, #32
 801d1c0:	2b20      	cmp	r3, #32
 801d1c2:	d107      	bne.n	801d1d4 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 801d1c4:	687b      	ldr	r3, [r7, #4]
 801d1c6:	681b      	ldr	r3, [r3, #0]
 801d1c8:	f06f 0220 	mvn.w	r2, #32
 801d1cc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 801d1ce:	6878      	ldr	r0, [r7, #4]
 801d1d0:	f000 fcb6 	bl	801db40 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 801d1d4:	bf00      	nop
 801d1d6:	3708      	adds	r7, #8
 801d1d8:	46bd      	mov	sp, r7
 801d1da:	bd80      	pop	{r7, pc}

0801d1dc <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 801d1dc:	b580      	push	{r7, lr}
 801d1de:	b086      	sub	sp, #24
 801d1e0:	af00      	add	r7, sp, #0
 801d1e2:	60f8      	str	r0, [r7, #12]
 801d1e4:	60b9      	str	r1, [r7, #8]
 801d1e6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 801d1e8:	2300      	movs	r3, #0
 801d1ea:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 801d1ec:	68fb      	ldr	r3, [r7, #12]
 801d1ee:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 801d1f2:	2b01      	cmp	r3, #1
 801d1f4:	d101      	bne.n	801d1fa <HAL_TIM_OC_ConfigChannel+0x1e>
 801d1f6:	2302      	movs	r3, #2
 801d1f8:	e048      	b.n	801d28c <HAL_TIM_OC_ConfigChannel+0xb0>
 801d1fa:	68fb      	ldr	r3, [r7, #12]
 801d1fc:	2201      	movs	r2, #1
 801d1fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 801d202:	687b      	ldr	r3, [r7, #4]
 801d204:	2b0c      	cmp	r3, #12
 801d206:	d839      	bhi.n	801d27c <HAL_TIM_OC_ConfigChannel+0xa0>
 801d208:	a201      	add	r2, pc, #4	; (adr r2, 801d210 <HAL_TIM_OC_ConfigChannel+0x34>)
 801d20a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801d20e:	bf00      	nop
 801d210:	0801d245 	.word	0x0801d245
 801d214:	0801d27d 	.word	0x0801d27d
 801d218:	0801d27d 	.word	0x0801d27d
 801d21c:	0801d27d 	.word	0x0801d27d
 801d220:	0801d253 	.word	0x0801d253
 801d224:	0801d27d 	.word	0x0801d27d
 801d228:	0801d27d 	.word	0x0801d27d
 801d22c:	0801d27d 	.word	0x0801d27d
 801d230:	0801d261 	.word	0x0801d261
 801d234:	0801d27d 	.word	0x0801d27d
 801d238:	0801d27d 	.word	0x0801d27d
 801d23c:	0801d27d 	.word	0x0801d27d
 801d240:	0801d26f 	.word	0x0801d26f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 801d244:	68fb      	ldr	r3, [r7, #12]
 801d246:	681b      	ldr	r3, [r3, #0]
 801d248:	68b9      	ldr	r1, [r7, #8]
 801d24a:	4618      	mov	r0, r3
 801d24c:	f000 f9b2 	bl	801d5b4 <TIM_OC1_SetConfig>
      break;
 801d250:	e017      	b.n	801d282 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 801d252:	68fb      	ldr	r3, [r7, #12]
 801d254:	681b      	ldr	r3, [r3, #0]
 801d256:	68b9      	ldr	r1, [r7, #8]
 801d258:	4618      	mov	r0, r3
 801d25a:	f000 fa1b 	bl	801d694 <TIM_OC2_SetConfig>
      break;
 801d25e:	e010      	b.n	801d282 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 801d260:	68fb      	ldr	r3, [r7, #12]
 801d262:	681b      	ldr	r3, [r3, #0]
 801d264:	68b9      	ldr	r1, [r7, #8]
 801d266:	4618      	mov	r0, r3
 801d268:	f000 fa8a 	bl	801d780 <TIM_OC3_SetConfig>
      break;
 801d26c:	e009      	b.n	801d282 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 801d26e:	68fb      	ldr	r3, [r7, #12]
 801d270:	681b      	ldr	r3, [r3, #0]
 801d272:	68b9      	ldr	r1, [r7, #8]
 801d274:	4618      	mov	r0, r3
 801d276:	f000 faf7 	bl	801d868 <TIM_OC4_SetConfig>
      break;
 801d27a:	e002      	b.n	801d282 <HAL_TIM_OC_ConfigChannel+0xa6>
    }

    default:
      status = HAL_ERROR;
 801d27c:	2301      	movs	r3, #1
 801d27e:	75fb      	strb	r3, [r7, #23]
      break;
 801d280:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 801d282:	68fb      	ldr	r3, [r7, #12]
 801d284:	2200      	movs	r2, #0
 801d286:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 801d28a:	7dfb      	ldrb	r3, [r7, #23]
}
 801d28c:	4618      	mov	r0, r3
 801d28e:	3718      	adds	r7, #24
 801d290:	46bd      	mov	sp, r7
 801d292:	bd80      	pop	{r7, pc}

0801d294 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 801d294:	b580      	push	{r7, lr}
 801d296:	b084      	sub	sp, #16
 801d298:	af00      	add	r7, sp, #0
 801d29a:	6078      	str	r0, [r7, #4]
 801d29c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 801d29e:	2300      	movs	r3, #0
 801d2a0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 801d2a2:	687b      	ldr	r3, [r7, #4]
 801d2a4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 801d2a8:	2b01      	cmp	r3, #1
 801d2aa:	d101      	bne.n	801d2b0 <HAL_TIM_ConfigClockSource+0x1c>
 801d2ac:	2302      	movs	r3, #2
 801d2ae:	e0b4      	b.n	801d41a <HAL_TIM_ConfigClockSource+0x186>
 801d2b0:	687b      	ldr	r3, [r7, #4]
 801d2b2:	2201      	movs	r2, #1
 801d2b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 801d2b8:	687b      	ldr	r3, [r7, #4]
 801d2ba:	2202      	movs	r2, #2
 801d2bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 801d2c0:	687b      	ldr	r3, [r7, #4]
 801d2c2:	681b      	ldr	r3, [r3, #0]
 801d2c4:	689b      	ldr	r3, [r3, #8]
 801d2c6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 801d2c8:	68bb      	ldr	r3, [r7, #8]
 801d2ca:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 801d2ce:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 801d2d0:	68bb      	ldr	r3, [r7, #8]
 801d2d2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 801d2d6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 801d2d8:	687b      	ldr	r3, [r7, #4]
 801d2da:	681b      	ldr	r3, [r3, #0]
 801d2dc:	68ba      	ldr	r2, [r7, #8]
 801d2de:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 801d2e0:	683b      	ldr	r3, [r7, #0]
 801d2e2:	681b      	ldr	r3, [r3, #0]
 801d2e4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 801d2e8:	d03e      	beq.n	801d368 <HAL_TIM_ConfigClockSource+0xd4>
 801d2ea:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 801d2ee:	f200 8087 	bhi.w	801d400 <HAL_TIM_ConfigClockSource+0x16c>
 801d2f2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801d2f6:	f000 8086 	beq.w	801d406 <HAL_TIM_ConfigClockSource+0x172>
 801d2fa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801d2fe:	d87f      	bhi.n	801d400 <HAL_TIM_ConfigClockSource+0x16c>
 801d300:	2b70      	cmp	r3, #112	; 0x70
 801d302:	d01a      	beq.n	801d33a <HAL_TIM_ConfigClockSource+0xa6>
 801d304:	2b70      	cmp	r3, #112	; 0x70
 801d306:	d87b      	bhi.n	801d400 <HAL_TIM_ConfigClockSource+0x16c>
 801d308:	2b60      	cmp	r3, #96	; 0x60
 801d30a:	d050      	beq.n	801d3ae <HAL_TIM_ConfigClockSource+0x11a>
 801d30c:	2b60      	cmp	r3, #96	; 0x60
 801d30e:	d877      	bhi.n	801d400 <HAL_TIM_ConfigClockSource+0x16c>
 801d310:	2b50      	cmp	r3, #80	; 0x50
 801d312:	d03c      	beq.n	801d38e <HAL_TIM_ConfigClockSource+0xfa>
 801d314:	2b50      	cmp	r3, #80	; 0x50
 801d316:	d873      	bhi.n	801d400 <HAL_TIM_ConfigClockSource+0x16c>
 801d318:	2b40      	cmp	r3, #64	; 0x40
 801d31a:	d058      	beq.n	801d3ce <HAL_TIM_ConfigClockSource+0x13a>
 801d31c:	2b40      	cmp	r3, #64	; 0x40
 801d31e:	d86f      	bhi.n	801d400 <HAL_TIM_ConfigClockSource+0x16c>
 801d320:	2b30      	cmp	r3, #48	; 0x30
 801d322:	d064      	beq.n	801d3ee <HAL_TIM_ConfigClockSource+0x15a>
 801d324:	2b30      	cmp	r3, #48	; 0x30
 801d326:	d86b      	bhi.n	801d400 <HAL_TIM_ConfigClockSource+0x16c>
 801d328:	2b20      	cmp	r3, #32
 801d32a:	d060      	beq.n	801d3ee <HAL_TIM_ConfigClockSource+0x15a>
 801d32c:	2b20      	cmp	r3, #32
 801d32e:	d867      	bhi.n	801d400 <HAL_TIM_ConfigClockSource+0x16c>
 801d330:	2b00      	cmp	r3, #0
 801d332:	d05c      	beq.n	801d3ee <HAL_TIM_ConfigClockSource+0x15a>
 801d334:	2b10      	cmp	r3, #16
 801d336:	d05a      	beq.n	801d3ee <HAL_TIM_ConfigClockSource+0x15a>
 801d338:	e062      	b.n	801d400 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 801d33a:	687b      	ldr	r3, [r7, #4]
 801d33c:	6818      	ldr	r0, [r3, #0]
 801d33e:	683b      	ldr	r3, [r7, #0]
 801d340:	6899      	ldr	r1, [r3, #8]
 801d342:	683b      	ldr	r3, [r7, #0]
 801d344:	685a      	ldr	r2, [r3, #4]
 801d346:	683b      	ldr	r3, [r7, #0]
 801d348:	68db      	ldr	r3, [r3, #12]
 801d34a:	f000 fb5d 	bl	801da08 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 801d34e:	687b      	ldr	r3, [r7, #4]
 801d350:	681b      	ldr	r3, [r3, #0]
 801d352:	689b      	ldr	r3, [r3, #8]
 801d354:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 801d356:	68bb      	ldr	r3, [r7, #8]
 801d358:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 801d35c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 801d35e:	687b      	ldr	r3, [r7, #4]
 801d360:	681b      	ldr	r3, [r3, #0]
 801d362:	68ba      	ldr	r2, [r7, #8]
 801d364:	609a      	str	r2, [r3, #8]
      break;
 801d366:	e04f      	b.n	801d408 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 801d368:	687b      	ldr	r3, [r7, #4]
 801d36a:	6818      	ldr	r0, [r3, #0]
 801d36c:	683b      	ldr	r3, [r7, #0]
 801d36e:	6899      	ldr	r1, [r3, #8]
 801d370:	683b      	ldr	r3, [r7, #0]
 801d372:	685a      	ldr	r2, [r3, #4]
 801d374:	683b      	ldr	r3, [r7, #0]
 801d376:	68db      	ldr	r3, [r3, #12]
 801d378:	f000 fb46 	bl	801da08 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 801d37c:	687b      	ldr	r3, [r7, #4]
 801d37e:	681b      	ldr	r3, [r3, #0]
 801d380:	689a      	ldr	r2, [r3, #8]
 801d382:	687b      	ldr	r3, [r7, #4]
 801d384:	681b      	ldr	r3, [r3, #0]
 801d386:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 801d38a:	609a      	str	r2, [r3, #8]
      break;
 801d38c:	e03c      	b.n	801d408 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 801d38e:	687b      	ldr	r3, [r7, #4]
 801d390:	6818      	ldr	r0, [r3, #0]
 801d392:	683b      	ldr	r3, [r7, #0]
 801d394:	6859      	ldr	r1, [r3, #4]
 801d396:	683b      	ldr	r3, [r7, #0]
 801d398:	68db      	ldr	r3, [r3, #12]
 801d39a:	461a      	mov	r2, r3
 801d39c:	f000 faba 	bl	801d914 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 801d3a0:	687b      	ldr	r3, [r7, #4]
 801d3a2:	681b      	ldr	r3, [r3, #0]
 801d3a4:	2150      	movs	r1, #80	; 0x50
 801d3a6:	4618      	mov	r0, r3
 801d3a8:	f000 fb13 	bl	801d9d2 <TIM_ITRx_SetConfig>
      break;
 801d3ac:	e02c      	b.n	801d408 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 801d3ae:	687b      	ldr	r3, [r7, #4]
 801d3b0:	6818      	ldr	r0, [r3, #0]
 801d3b2:	683b      	ldr	r3, [r7, #0]
 801d3b4:	6859      	ldr	r1, [r3, #4]
 801d3b6:	683b      	ldr	r3, [r7, #0]
 801d3b8:	68db      	ldr	r3, [r3, #12]
 801d3ba:	461a      	mov	r2, r3
 801d3bc:	f000 fad9 	bl	801d972 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 801d3c0:	687b      	ldr	r3, [r7, #4]
 801d3c2:	681b      	ldr	r3, [r3, #0]
 801d3c4:	2160      	movs	r1, #96	; 0x60
 801d3c6:	4618      	mov	r0, r3
 801d3c8:	f000 fb03 	bl	801d9d2 <TIM_ITRx_SetConfig>
      break;
 801d3cc:	e01c      	b.n	801d408 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 801d3ce:	687b      	ldr	r3, [r7, #4]
 801d3d0:	6818      	ldr	r0, [r3, #0]
 801d3d2:	683b      	ldr	r3, [r7, #0]
 801d3d4:	6859      	ldr	r1, [r3, #4]
 801d3d6:	683b      	ldr	r3, [r7, #0]
 801d3d8:	68db      	ldr	r3, [r3, #12]
 801d3da:	461a      	mov	r2, r3
 801d3dc:	f000 fa9a 	bl	801d914 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 801d3e0:	687b      	ldr	r3, [r7, #4]
 801d3e2:	681b      	ldr	r3, [r3, #0]
 801d3e4:	2140      	movs	r1, #64	; 0x40
 801d3e6:	4618      	mov	r0, r3
 801d3e8:	f000 faf3 	bl	801d9d2 <TIM_ITRx_SetConfig>
      break;
 801d3ec:	e00c      	b.n	801d408 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 801d3ee:	687b      	ldr	r3, [r7, #4]
 801d3f0:	681a      	ldr	r2, [r3, #0]
 801d3f2:	683b      	ldr	r3, [r7, #0]
 801d3f4:	681b      	ldr	r3, [r3, #0]
 801d3f6:	4619      	mov	r1, r3
 801d3f8:	4610      	mov	r0, r2
 801d3fa:	f000 faea 	bl	801d9d2 <TIM_ITRx_SetConfig>
      break;
 801d3fe:	e003      	b.n	801d408 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 801d400:	2301      	movs	r3, #1
 801d402:	73fb      	strb	r3, [r7, #15]
      break;
 801d404:	e000      	b.n	801d408 <HAL_TIM_ConfigClockSource+0x174>
      break;
 801d406:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 801d408:	687b      	ldr	r3, [r7, #4]
 801d40a:	2201      	movs	r2, #1
 801d40c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 801d410:	687b      	ldr	r3, [r7, #4]
 801d412:	2200      	movs	r2, #0
 801d414:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 801d418:	7bfb      	ldrb	r3, [r7, #15]
}
 801d41a:	4618      	mov	r0, r3
 801d41c:	3710      	adds	r7, #16
 801d41e:	46bd      	mov	sp, r7
 801d420:	bd80      	pop	{r7, pc}

0801d422 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 801d422:	b480      	push	{r7}
 801d424:	b083      	sub	sp, #12
 801d426:	af00      	add	r7, sp, #0
 801d428:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 801d42a:	bf00      	nop
 801d42c:	370c      	adds	r7, #12
 801d42e:	46bd      	mov	sp, r7
 801d430:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d434:	4770      	bx	lr

0801d436 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 801d436:	b480      	push	{r7}
 801d438:	b083      	sub	sp, #12
 801d43a:	af00      	add	r7, sp, #0
 801d43c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 801d43e:	bf00      	nop
 801d440:	370c      	adds	r7, #12
 801d442:	46bd      	mov	sp, r7
 801d444:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d448:	4770      	bx	lr

0801d44a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 801d44a:	b480      	push	{r7}
 801d44c:	b083      	sub	sp, #12
 801d44e:	af00      	add	r7, sp, #0
 801d450:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 801d452:	bf00      	nop
 801d454:	370c      	adds	r7, #12
 801d456:	46bd      	mov	sp, r7
 801d458:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d45c:	4770      	bx	lr

0801d45e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 801d45e:	b480      	push	{r7}
 801d460:	b083      	sub	sp, #12
 801d462:	af00      	add	r7, sp, #0
 801d464:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 801d466:	bf00      	nop
 801d468:	370c      	adds	r7, #12
 801d46a:	46bd      	mov	sp, r7
 801d46c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d470:	4770      	bx	lr
	...

0801d474 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 801d474:	b480      	push	{r7}
 801d476:	b085      	sub	sp, #20
 801d478:	af00      	add	r7, sp, #0
 801d47a:	6078      	str	r0, [r7, #4]
 801d47c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 801d47e:	687b      	ldr	r3, [r7, #4]
 801d480:	681b      	ldr	r3, [r3, #0]
 801d482:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 801d484:	687b      	ldr	r3, [r7, #4]
 801d486:	4a40      	ldr	r2, [pc, #256]	; (801d588 <TIM_Base_SetConfig+0x114>)
 801d488:	4293      	cmp	r3, r2
 801d48a:	d013      	beq.n	801d4b4 <TIM_Base_SetConfig+0x40>
 801d48c:	687b      	ldr	r3, [r7, #4]
 801d48e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801d492:	d00f      	beq.n	801d4b4 <TIM_Base_SetConfig+0x40>
 801d494:	687b      	ldr	r3, [r7, #4]
 801d496:	4a3d      	ldr	r2, [pc, #244]	; (801d58c <TIM_Base_SetConfig+0x118>)
 801d498:	4293      	cmp	r3, r2
 801d49a:	d00b      	beq.n	801d4b4 <TIM_Base_SetConfig+0x40>
 801d49c:	687b      	ldr	r3, [r7, #4]
 801d49e:	4a3c      	ldr	r2, [pc, #240]	; (801d590 <TIM_Base_SetConfig+0x11c>)
 801d4a0:	4293      	cmp	r3, r2
 801d4a2:	d007      	beq.n	801d4b4 <TIM_Base_SetConfig+0x40>
 801d4a4:	687b      	ldr	r3, [r7, #4]
 801d4a6:	4a3b      	ldr	r2, [pc, #236]	; (801d594 <TIM_Base_SetConfig+0x120>)
 801d4a8:	4293      	cmp	r3, r2
 801d4aa:	d003      	beq.n	801d4b4 <TIM_Base_SetConfig+0x40>
 801d4ac:	687b      	ldr	r3, [r7, #4]
 801d4ae:	4a3a      	ldr	r2, [pc, #232]	; (801d598 <TIM_Base_SetConfig+0x124>)
 801d4b0:	4293      	cmp	r3, r2
 801d4b2:	d108      	bne.n	801d4c6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 801d4b4:	68fb      	ldr	r3, [r7, #12]
 801d4b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801d4ba:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 801d4bc:	683b      	ldr	r3, [r7, #0]
 801d4be:	685b      	ldr	r3, [r3, #4]
 801d4c0:	68fa      	ldr	r2, [r7, #12]
 801d4c2:	4313      	orrs	r3, r2
 801d4c4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 801d4c6:	687b      	ldr	r3, [r7, #4]
 801d4c8:	4a2f      	ldr	r2, [pc, #188]	; (801d588 <TIM_Base_SetConfig+0x114>)
 801d4ca:	4293      	cmp	r3, r2
 801d4cc:	d02b      	beq.n	801d526 <TIM_Base_SetConfig+0xb2>
 801d4ce:	687b      	ldr	r3, [r7, #4]
 801d4d0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801d4d4:	d027      	beq.n	801d526 <TIM_Base_SetConfig+0xb2>
 801d4d6:	687b      	ldr	r3, [r7, #4]
 801d4d8:	4a2c      	ldr	r2, [pc, #176]	; (801d58c <TIM_Base_SetConfig+0x118>)
 801d4da:	4293      	cmp	r3, r2
 801d4dc:	d023      	beq.n	801d526 <TIM_Base_SetConfig+0xb2>
 801d4de:	687b      	ldr	r3, [r7, #4]
 801d4e0:	4a2b      	ldr	r2, [pc, #172]	; (801d590 <TIM_Base_SetConfig+0x11c>)
 801d4e2:	4293      	cmp	r3, r2
 801d4e4:	d01f      	beq.n	801d526 <TIM_Base_SetConfig+0xb2>
 801d4e6:	687b      	ldr	r3, [r7, #4]
 801d4e8:	4a2a      	ldr	r2, [pc, #168]	; (801d594 <TIM_Base_SetConfig+0x120>)
 801d4ea:	4293      	cmp	r3, r2
 801d4ec:	d01b      	beq.n	801d526 <TIM_Base_SetConfig+0xb2>
 801d4ee:	687b      	ldr	r3, [r7, #4]
 801d4f0:	4a29      	ldr	r2, [pc, #164]	; (801d598 <TIM_Base_SetConfig+0x124>)
 801d4f2:	4293      	cmp	r3, r2
 801d4f4:	d017      	beq.n	801d526 <TIM_Base_SetConfig+0xb2>
 801d4f6:	687b      	ldr	r3, [r7, #4]
 801d4f8:	4a28      	ldr	r2, [pc, #160]	; (801d59c <TIM_Base_SetConfig+0x128>)
 801d4fa:	4293      	cmp	r3, r2
 801d4fc:	d013      	beq.n	801d526 <TIM_Base_SetConfig+0xb2>
 801d4fe:	687b      	ldr	r3, [r7, #4]
 801d500:	4a27      	ldr	r2, [pc, #156]	; (801d5a0 <TIM_Base_SetConfig+0x12c>)
 801d502:	4293      	cmp	r3, r2
 801d504:	d00f      	beq.n	801d526 <TIM_Base_SetConfig+0xb2>
 801d506:	687b      	ldr	r3, [r7, #4]
 801d508:	4a26      	ldr	r2, [pc, #152]	; (801d5a4 <TIM_Base_SetConfig+0x130>)
 801d50a:	4293      	cmp	r3, r2
 801d50c:	d00b      	beq.n	801d526 <TIM_Base_SetConfig+0xb2>
 801d50e:	687b      	ldr	r3, [r7, #4]
 801d510:	4a25      	ldr	r2, [pc, #148]	; (801d5a8 <TIM_Base_SetConfig+0x134>)
 801d512:	4293      	cmp	r3, r2
 801d514:	d007      	beq.n	801d526 <TIM_Base_SetConfig+0xb2>
 801d516:	687b      	ldr	r3, [r7, #4]
 801d518:	4a24      	ldr	r2, [pc, #144]	; (801d5ac <TIM_Base_SetConfig+0x138>)
 801d51a:	4293      	cmp	r3, r2
 801d51c:	d003      	beq.n	801d526 <TIM_Base_SetConfig+0xb2>
 801d51e:	687b      	ldr	r3, [r7, #4]
 801d520:	4a23      	ldr	r2, [pc, #140]	; (801d5b0 <TIM_Base_SetConfig+0x13c>)
 801d522:	4293      	cmp	r3, r2
 801d524:	d108      	bne.n	801d538 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 801d526:	68fb      	ldr	r3, [r7, #12]
 801d528:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 801d52c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 801d52e:	683b      	ldr	r3, [r7, #0]
 801d530:	68db      	ldr	r3, [r3, #12]
 801d532:	68fa      	ldr	r2, [r7, #12]
 801d534:	4313      	orrs	r3, r2
 801d536:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 801d538:	68fb      	ldr	r3, [r7, #12]
 801d53a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 801d53e:	683b      	ldr	r3, [r7, #0]
 801d540:	695b      	ldr	r3, [r3, #20]
 801d542:	4313      	orrs	r3, r2
 801d544:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 801d546:	687b      	ldr	r3, [r7, #4]
 801d548:	68fa      	ldr	r2, [r7, #12]
 801d54a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 801d54c:	683b      	ldr	r3, [r7, #0]
 801d54e:	689a      	ldr	r2, [r3, #8]
 801d550:	687b      	ldr	r3, [r7, #4]
 801d552:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 801d554:	683b      	ldr	r3, [r7, #0]
 801d556:	681a      	ldr	r2, [r3, #0]
 801d558:	687b      	ldr	r3, [r7, #4]
 801d55a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 801d55c:	687b      	ldr	r3, [r7, #4]
 801d55e:	4a0a      	ldr	r2, [pc, #40]	; (801d588 <TIM_Base_SetConfig+0x114>)
 801d560:	4293      	cmp	r3, r2
 801d562:	d003      	beq.n	801d56c <TIM_Base_SetConfig+0xf8>
 801d564:	687b      	ldr	r3, [r7, #4]
 801d566:	4a0c      	ldr	r2, [pc, #48]	; (801d598 <TIM_Base_SetConfig+0x124>)
 801d568:	4293      	cmp	r3, r2
 801d56a:	d103      	bne.n	801d574 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 801d56c:	683b      	ldr	r3, [r7, #0]
 801d56e:	691a      	ldr	r2, [r3, #16]
 801d570:	687b      	ldr	r3, [r7, #4]
 801d572:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 801d574:	687b      	ldr	r3, [r7, #4]
 801d576:	2201      	movs	r2, #1
 801d578:	615a      	str	r2, [r3, #20]
}
 801d57a:	bf00      	nop
 801d57c:	3714      	adds	r7, #20
 801d57e:	46bd      	mov	sp, r7
 801d580:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d584:	4770      	bx	lr
 801d586:	bf00      	nop
 801d588:	40010000 	.word	0x40010000
 801d58c:	40000400 	.word	0x40000400
 801d590:	40000800 	.word	0x40000800
 801d594:	40000c00 	.word	0x40000c00
 801d598:	40010400 	.word	0x40010400
 801d59c:	40014000 	.word	0x40014000
 801d5a0:	40014400 	.word	0x40014400
 801d5a4:	40014800 	.word	0x40014800
 801d5a8:	40001800 	.word	0x40001800
 801d5ac:	40001c00 	.word	0x40001c00
 801d5b0:	40002000 	.word	0x40002000

0801d5b4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 801d5b4:	b480      	push	{r7}
 801d5b6:	b087      	sub	sp, #28
 801d5b8:	af00      	add	r7, sp, #0
 801d5ba:	6078      	str	r0, [r7, #4]
 801d5bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 801d5be:	687b      	ldr	r3, [r7, #4]
 801d5c0:	6a1b      	ldr	r3, [r3, #32]
 801d5c2:	f023 0201 	bic.w	r2, r3, #1
 801d5c6:	687b      	ldr	r3, [r7, #4]
 801d5c8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801d5ca:	687b      	ldr	r3, [r7, #4]
 801d5cc:	6a1b      	ldr	r3, [r3, #32]
 801d5ce:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 801d5d0:	687b      	ldr	r3, [r7, #4]
 801d5d2:	685b      	ldr	r3, [r3, #4]
 801d5d4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 801d5d6:	687b      	ldr	r3, [r7, #4]
 801d5d8:	699b      	ldr	r3, [r3, #24]
 801d5da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 801d5dc:	68fb      	ldr	r3, [r7, #12]
 801d5de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801d5e2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 801d5e4:	68fb      	ldr	r3, [r7, #12]
 801d5e6:	f023 0303 	bic.w	r3, r3, #3
 801d5ea:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 801d5ec:	683b      	ldr	r3, [r7, #0]
 801d5ee:	681b      	ldr	r3, [r3, #0]
 801d5f0:	68fa      	ldr	r2, [r7, #12]
 801d5f2:	4313      	orrs	r3, r2
 801d5f4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 801d5f6:	697b      	ldr	r3, [r7, #20]
 801d5f8:	f023 0302 	bic.w	r3, r3, #2
 801d5fc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 801d5fe:	683b      	ldr	r3, [r7, #0]
 801d600:	689b      	ldr	r3, [r3, #8]
 801d602:	697a      	ldr	r2, [r7, #20]
 801d604:	4313      	orrs	r3, r2
 801d606:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 801d608:	687b      	ldr	r3, [r7, #4]
 801d60a:	4a20      	ldr	r2, [pc, #128]	; (801d68c <TIM_OC1_SetConfig+0xd8>)
 801d60c:	4293      	cmp	r3, r2
 801d60e:	d003      	beq.n	801d618 <TIM_OC1_SetConfig+0x64>
 801d610:	687b      	ldr	r3, [r7, #4]
 801d612:	4a1f      	ldr	r2, [pc, #124]	; (801d690 <TIM_OC1_SetConfig+0xdc>)
 801d614:	4293      	cmp	r3, r2
 801d616:	d10c      	bne.n	801d632 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 801d618:	697b      	ldr	r3, [r7, #20]
 801d61a:	f023 0308 	bic.w	r3, r3, #8
 801d61e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 801d620:	683b      	ldr	r3, [r7, #0]
 801d622:	68db      	ldr	r3, [r3, #12]
 801d624:	697a      	ldr	r2, [r7, #20]
 801d626:	4313      	orrs	r3, r2
 801d628:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 801d62a:	697b      	ldr	r3, [r7, #20]
 801d62c:	f023 0304 	bic.w	r3, r3, #4
 801d630:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 801d632:	687b      	ldr	r3, [r7, #4]
 801d634:	4a15      	ldr	r2, [pc, #84]	; (801d68c <TIM_OC1_SetConfig+0xd8>)
 801d636:	4293      	cmp	r3, r2
 801d638:	d003      	beq.n	801d642 <TIM_OC1_SetConfig+0x8e>
 801d63a:	687b      	ldr	r3, [r7, #4]
 801d63c:	4a14      	ldr	r2, [pc, #80]	; (801d690 <TIM_OC1_SetConfig+0xdc>)
 801d63e:	4293      	cmp	r3, r2
 801d640:	d111      	bne.n	801d666 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 801d642:	693b      	ldr	r3, [r7, #16]
 801d644:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 801d648:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 801d64a:	693b      	ldr	r3, [r7, #16]
 801d64c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 801d650:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 801d652:	683b      	ldr	r3, [r7, #0]
 801d654:	695b      	ldr	r3, [r3, #20]
 801d656:	693a      	ldr	r2, [r7, #16]
 801d658:	4313      	orrs	r3, r2
 801d65a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 801d65c:	683b      	ldr	r3, [r7, #0]
 801d65e:	699b      	ldr	r3, [r3, #24]
 801d660:	693a      	ldr	r2, [r7, #16]
 801d662:	4313      	orrs	r3, r2
 801d664:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801d666:	687b      	ldr	r3, [r7, #4]
 801d668:	693a      	ldr	r2, [r7, #16]
 801d66a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 801d66c:	687b      	ldr	r3, [r7, #4]
 801d66e:	68fa      	ldr	r2, [r7, #12]
 801d670:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 801d672:	683b      	ldr	r3, [r7, #0]
 801d674:	685a      	ldr	r2, [r3, #4]
 801d676:	687b      	ldr	r3, [r7, #4]
 801d678:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 801d67a:	687b      	ldr	r3, [r7, #4]
 801d67c:	697a      	ldr	r2, [r7, #20]
 801d67e:	621a      	str	r2, [r3, #32]
}
 801d680:	bf00      	nop
 801d682:	371c      	adds	r7, #28
 801d684:	46bd      	mov	sp, r7
 801d686:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d68a:	4770      	bx	lr
 801d68c:	40010000 	.word	0x40010000
 801d690:	40010400 	.word	0x40010400

0801d694 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 801d694:	b480      	push	{r7}
 801d696:	b087      	sub	sp, #28
 801d698:	af00      	add	r7, sp, #0
 801d69a:	6078      	str	r0, [r7, #4]
 801d69c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 801d69e:	687b      	ldr	r3, [r7, #4]
 801d6a0:	6a1b      	ldr	r3, [r3, #32]
 801d6a2:	f023 0210 	bic.w	r2, r3, #16
 801d6a6:	687b      	ldr	r3, [r7, #4]
 801d6a8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801d6aa:	687b      	ldr	r3, [r7, #4]
 801d6ac:	6a1b      	ldr	r3, [r3, #32]
 801d6ae:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 801d6b0:	687b      	ldr	r3, [r7, #4]
 801d6b2:	685b      	ldr	r3, [r3, #4]
 801d6b4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 801d6b6:	687b      	ldr	r3, [r7, #4]
 801d6b8:	699b      	ldr	r3, [r3, #24]
 801d6ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 801d6bc:	68fb      	ldr	r3, [r7, #12]
 801d6be:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 801d6c2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 801d6c4:	68fb      	ldr	r3, [r7, #12]
 801d6c6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 801d6ca:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 801d6cc:	683b      	ldr	r3, [r7, #0]
 801d6ce:	681b      	ldr	r3, [r3, #0]
 801d6d0:	021b      	lsls	r3, r3, #8
 801d6d2:	68fa      	ldr	r2, [r7, #12]
 801d6d4:	4313      	orrs	r3, r2
 801d6d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 801d6d8:	697b      	ldr	r3, [r7, #20]
 801d6da:	f023 0320 	bic.w	r3, r3, #32
 801d6de:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 801d6e0:	683b      	ldr	r3, [r7, #0]
 801d6e2:	689b      	ldr	r3, [r3, #8]
 801d6e4:	011b      	lsls	r3, r3, #4
 801d6e6:	697a      	ldr	r2, [r7, #20]
 801d6e8:	4313      	orrs	r3, r2
 801d6ea:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 801d6ec:	687b      	ldr	r3, [r7, #4]
 801d6ee:	4a22      	ldr	r2, [pc, #136]	; (801d778 <TIM_OC2_SetConfig+0xe4>)
 801d6f0:	4293      	cmp	r3, r2
 801d6f2:	d003      	beq.n	801d6fc <TIM_OC2_SetConfig+0x68>
 801d6f4:	687b      	ldr	r3, [r7, #4]
 801d6f6:	4a21      	ldr	r2, [pc, #132]	; (801d77c <TIM_OC2_SetConfig+0xe8>)
 801d6f8:	4293      	cmp	r3, r2
 801d6fa:	d10d      	bne.n	801d718 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 801d6fc:	697b      	ldr	r3, [r7, #20]
 801d6fe:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 801d702:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 801d704:	683b      	ldr	r3, [r7, #0]
 801d706:	68db      	ldr	r3, [r3, #12]
 801d708:	011b      	lsls	r3, r3, #4
 801d70a:	697a      	ldr	r2, [r7, #20]
 801d70c:	4313      	orrs	r3, r2
 801d70e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 801d710:	697b      	ldr	r3, [r7, #20]
 801d712:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 801d716:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 801d718:	687b      	ldr	r3, [r7, #4]
 801d71a:	4a17      	ldr	r2, [pc, #92]	; (801d778 <TIM_OC2_SetConfig+0xe4>)
 801d71c:	4293      	cmp	r3, r2
 801d71e:	d003      	beq.n	801d728 <TIM_OC2_SetConfig+0x94>
 801d720:	687b      	ldr	r3, [r7, #4]
 801d722:	4a16      	ldr	r2, [pc, #88]	; (801d77c <TIM_OC2_SetConfig+0xe8>)
 801d724:	4293      	cmp	r3, r2
 801d726:	d113      	bne.n	801d750 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 801d728:	693b      	ldr	r3, [r7, #16]
 801d72a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 801d72e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 801d730:	693b      	ldr	r3, [r7, #16]
 801d732:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 801d736:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 801d738:	683b      	ldr	r3, [r7, #0]
 801d73a:	695b      	ldr	r3, [r3, #20]
 801d73c:	009b      	lsls	r3, r3, #2
 801d73e:	693a      	ldr	r2, [r7, #16]
 801d740:	4313      	orrs	r3, r2
 801d742:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 801d744:	683b      	ldr	r3, [r7, #0]
 801d746:	699b      	ldr	r3, [r3, #24]
 801d748:	009b      	lsls	r3, r3, #2
 801d74a:	693a      	ldr	r2, [r7, #16]
 801d74c:	4313      	orrs	r3, r2
 801d74e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801d750:	687b      	ldr	r3, [r7, #4]
 801d752:	693a      	ldr	r2, [r7, #16]
 801d754:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 801d756:	687b      	ldr	r3, [r7, #4]
 801d758:	68fa      	ldr	r2, [r7, #12]
 801d75a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 801d75c:	683b      	ldr	r3, [r7, #0]
 801d75e:	685a      	ldr	r2, [r3, #4]
 801d760:	687b      	ldr	r3, [r7, #4]
 801d762:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 801d764:	687b      	ldr	r3, [r7, #4]
 801d766:	697a      	ldr	r2, [r7, #20]
 801d768:	621a      	str	r2, [r3, #32]
}
 801d76a:	bf00      	nop
 801d76c:	371c      	adds	r7, #28
 801d76e:	46bd      	mov	sp, r7
 801d770:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d774:	4770      	bx	lr
 801d776:	bf00      	nop
 801d778:	40010000 	.word	0x40010000
 801d77c:	40010400 	.word	0x40010400

0801d780 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 801d780:	b480      	push	{r7}
 801d782:	b087      	sub	sp, #28
 801d784:	af00      	add	r7, sp, #0
 801d786:	6078      	str	r0, [r7, #4]
 801d788:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 801d78a:	687b      	ldr	r3, [r7, #4]
 801d78c:	6a1b      	ldr	r3, [r3, #32]
 801d78e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 801d792:	687b      	ldr	r3, [r7, #4]
 801d794:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801d796:	687b      	ldr	r3, [r7, #4]
 801d798:	6a1b      	ldr	r3, [r3, #32]
 801d79a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 801d79c:	687b      	ldr	r3, [r7, #4]
 801d79e:	685b      	ldr	r3, [r3, #4]
 801d7a0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 801d7a2:	687b      	ldr	r3, [r7, #4]
 801d7a4:	69db      	ldr	r3, [r3, #28]
 801d7a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 801d7a8:	68fb      	ldr	r3, [r7, #12]
 801d7aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801d7ae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 801d7b0:	68fb      	ldr	r3, [r7, #12]
 801d7b2:	f023 0303 	bic.w	r3, r3, #3
 801d7b6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 801d7b8:	683b      	ldr	r3, [r7, #0]
 801d7ba:	681b      	ldr	r3, [r3, #0]
 801d7bc:	68fa      	ldr	r2, [r7, #12]
 801d7be:	4313      	orrs	r3, r2
 801d7c0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 801d7c2:	697b      	ldr	r3, [r7, #20]
 801d7c4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 801d7c8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 801d7ca:	683b      	ldr	r3, [r7, #0]
 801d7cc:	689b      	ldr	r3, [r3, #8]
 801d7ce:	021b      	lsls	r3, r3, #8
 801d7d0:	697a      	ldr	r2, [r7, #20]
 801d7d2:	4313      	orrs	r3, r2
 801d7d4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 801d7d6:	687b      	ldr	r3, [r7, #4]
 801d7d8:	4a21      	ldr	r2, [pc, #132]	; (801d860 <TIM_OC3_SetConfig+0xe0>)
 801d7da:	4293      	cmp	r3, r2
 801d7dc:	d003      	beq.n	801d7e6 <TIM_OC3_SetConfig+0x66>
 801d7de:	687b      	ldr	r3, [r7, #4]
 801d7e0:	4a20      	ldr	r2, [pc, #128]	; (801d864 <TIM_OC3_SetConfig+0xe4>)
 801d7e2:	4293      	cmp	r3, r2
 801d7e4:	d10d      	bne.n	801d802 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 801d7e6:	697b      	ldr	r3, [r7, #20]
 801d7e8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 801d7ec:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 801d7ee:	683b      	ldr	r3, [r7, #0]
 801d7f0:	68db      	ldr	r3, [r3, #12]
 801d7f2:	021b      	lsls	r3, r3, #8
 801d7f4:	697a      	ldr	r2, [r7, #20]
 801d7f6:	4313      	orrs	r3, r2
 801d7f8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 801d7fa:	697b      	ldr	r3, [r7, #20]
 801d7fc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 801d800:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 801d802:	687b      	ldr	r3, [r7, #4]
 801d804:	4a16      	ldr	r2, [pc, #88]	; (801d860 <TIM_OC3_SetConfig+0xe0>)
 801d806:	4293      	cmp	r3, r2
 801d808:	d003      	beq.n	801d812 <TIM_OC3_SetConfig+0x92>
 801d80a:	687b      	ldr	r3, [r7, #4]
 801d80c:	4a15      	ldr	r2, [pc, #84]	; (801d864 <TIM_OC3_SetConfig+0xe4>)
 801d80e:	4293      	cmp	r3, r2
 801d810:	d113      	bne.n	801d83a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 801d812:	693b      	ldr	r3, [r7, #16]
 801d814:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801d818:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 801d81a:	693b      	ldr	r3, [r7, #16]
 801d81c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 801d820:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 801d822:	683b      	ldr	r3, [r7, #0]
 801d824:	695b      	ldr	r3, [r3, #20]
 801d826:	011b      	lsls	r3, r3, #4
 801d828:	693a      	ldr	r2, [r7, #16]
 801d82a:	4313      	orrs	r3, r2
 801d82c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 801d82e:	683b      	ldr	r3, [r7, #0]
 801d830:	699b      	ldr	r3, [r3, #24]
 801d832:	011b      	lsls	r3, r3, #4
 801d834:	693a      	ldr	r2, [r7, #16]
 801d836:	4313      	orrs	r3, r2
 801d838:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801d83a:	687b      	ldr	r3, [r7, #4]
 801d83c:	693a      	ldr	r2, [r7, #16]
 801d83e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 801d840:	687b      	ldr	r3, [r7, #4]
 801d842:	68fa      	ldr	r2, [r7, #12]
 801d844:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 801d846:	683b      	ldr	r3, [r7, #0]
 801d848:	685a      	ldr	r2, [r3, #4]
 801d84a:	687b      	ldr	r3, [r7, #4]
 801d84c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 801d84e:	687b      	ldr	r3, [r7, #4]
 801d850:	697a      	ldr	r2, [r7, #20]
 801d852:	621a      	str	r2, [r3, #32]
}
 801d854:	bf00      	nop
 801d856:	371c      	adds	r7, #28
 801d858:	46bd      	mov	sp, r7
 801d85a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d85e:	4770      	bx	lr
 801d860:	40010000 	.word	0x40010000
 801d864:	40010400 	.word	0x40010400

0801d868 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 801d868:	b480      	push	{r7}
 801d86a:	b087      	sub	sp, #28
 801d86c:	af00      	add	r7, sp, #0
 801d86e:	6078      	str	r0, [r7, #4]
 801d870:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 801d872:	687b      	ldr	r3, [r7, #4]
 801d874:	6a1b      	ldr	r3, [r3, #32]
 801d876:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 801d87a:	687b      	ldr	r3, [r7, #4]
 801d87c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801d87e:	687b      	ldr	r3, [r7, #4]
 801d880:	6a1b      	ldr	r3, [r3, #32]
 801d882:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 801d884:	687b      	ldr	r3, [r7, #4]
 801d886:	685b      	ldr	r3, [r3, #4]
 801d888:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 801d88a:	687b      	ldr	r3, [r7, #4]
 801d88c:	69db      	ldr	r3, [r3, #28]
 801d88e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 801d890:	68fb      	ldr	r3, [r7, #12]
 801d892:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 801d896:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 801d898:	68fb      	ldr	r3, [r7, #12]
 801d89a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 801d89e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 801d8a0:	683b      	ldr	r3, [r7, #0]
 801d8a2:	681b      	ldr	r3, [r3, #0]
 801d8a4:	021b      	lsls	r3, r3, #8
 801d8a6:	68fa      	ldr	r2, [r7, #12]
 801d8a8:	4313      	orrs	r3, r2
 801d8aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 801d8ac:	693b      	ldr	r3, [r7, #16]
 801d8ae:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 801d8b2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 801d8b4:	683b      	ldr	r3, [r7, #0]
 801d8b6:	689b      	ldr	r3, [r3, #8]
 801d8b8:	031b      	lsls	r3, r3, #12
 801d8ba:	693a      	ldr	r2, [r7, #16]
 801d8bc:	4313      	orrs	r3, r2
 801d8be:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 801d8c0:	687b      	ldr	r3, [r7, #4]
 801d8c2:	4a12      	ldr	r2, [pc, #72]	; (801d90c <TIM_OC4_SetConfig+0xa4>)
 801d8c4:	4293      	cmp	r3, r2
 801d8c6:	d003      	beq.n	801d8d0 <TIM_OC4_SetConfig+0x68>
 801d8c8:	687b      	ldr	r3, [r7, #4]
 801d8ca:	4a11      	ldr	r2, [pc, #68]	; (801d910 <TIM_OC4_SetConfig+0xa8>)
 801d8cc:	4293      	cmp	r3, r2
 801d8ce:	d109      	bne.n	801d8e4 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 801d8d0:	697b      	ldr	r3, [r7, #20]
 801d8d2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 801d8d6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 801d8d8:	683b      	ldr	r3, [r7, #0]
 801d8da:	695b      	ldr	r3, [r3, #20]
 801d8dc:	019b      	lsls	r3, r3, #6
 801d8de:	697a      	ldr	r2, [r7, #20]
 801d8e0:	4313      	orrs	r3, r2
 801d8e2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801d8e4:	687b      	ldr	r3, [r7, #4]
 801d8e6:	697a      	ldr	r2, [r7, #20]
 801d8e8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 801d8ea:	687b      	ldr	r3, [r7, #4]
 801d8ec:	68fa      	ldr	r2, [r7, #12]
 801d8ee:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 801d8f0:	683b      	ldr	r3, [r7, #0]
 801d8f2:	685a      	ldr	r2, [r3, #4]
 801d8f4:	687b      	ldr	r3, [r7, #4]
 801d8f6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 801d8f8:	687b      	ldr	r3, [r7, #4]
 801d8fa:	693a      	ldr	r2, [r7, #16]
 801d8fc:	621a      	str	r2, [r3, #32]
}
 801d8fe:	bf00      	nop
 801d900:	371c      	adds	r7, #28
 801d902:	46bd      	mov	sp, r7
 801d904:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d908:	4770      	bx	lr
 801d90a:	bf00      	nop
 801d90c:	40010000 	.word	0x40010000
 801d910:	40010400 	.word	0x40010400

0801d914 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 801d914:	b480      	push	{r7}
 801d916:	b087      	sub	sp, #28
 801d918:	af00      	add	r7, sp, #0
 801d91a:	60f8      	str	r0, [r7, #12]
 801d91c:	60b9      	str	r1, [r7, #8]
 801d91e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 801d920:	68fb      	ldr	r3, [r7, #12]
 801d922:	6a1b      	ldr	r3, [r3, #32]
 801d924:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 801d926:	68fb      	ldr	r3, [r7, #12]
 801d928:	6a1b      	ldr	r3, [r3, #32]
 801d92a:	f023 0201 	bic.w	r2, r3, #1
 801d92e:	68fb      	ldr	r3, [r7, #12]
 801d930:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 801d932:	68fb      	ldr	r3, [r7, #12]
 801d934:	699b      	ldr	r3, [r3, #24]
 801d936:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 801d938:	693b      	ldr	r3, [r7, #16]
 801d93a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 801d93e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 801d940:	687b      	ldr	r3, [r7, #4]
 801d942:	011b      	lsls	r3, r3, #4
 801d944:	693a      	ldr	r2, [r7, #16]
 801d946:	4313      	orrs	r3, r2
 801d948:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 801d94a:	697b      	ldr	r3, [r7, #20]
 801d94c:	f023 030a 	bic.w	r3, r3, #10
 801d950:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 801d952:	697a      	ldr	r2, [r7, #20]
 801d954:	68bb      	ldr	r3, [r7, #8]
 801d956:	4313      	orrs	r3, r2
 801d958:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 801d95a:	68fb      	ldr	r3, [r7, #12]
 801d95c:	693a      	ldr	r2, [r7, #16]
 801d95e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 801d960:	68fb      	ldr	r3, [r7, #12]
 801d962:	697a      	ldr	r2, [r7, #20]
 801d964:	621a      	str	r2, [r3, #32]
}
 801d966:	bf00      	nop
 801d968:	371c      	adds	r7, #28
 801d96a:	46bd      	mov	sp, r7
 801d96c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d970:	4770      	bx	lr

0801d972 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 801d972:	b480      	push	{r7}
 801d974:	b087      	sub	sp, #28
 801d976:	af00      	add	r7, sp, #0
 801d978:	60f8      	str	r0, [r7, #12]
 801d97a:	60b9      	str	r1, [r7, #8]
 801d97c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 801d97e:	68fb      	ldr	r3, [r7, #12]
 801d980:	6a1b      	ldr	r3, [r3, #32]
 801d982:	f023 0210 	bic.w	r2, r3, #16
 801d986:	68fb      	ldr	r3, [r7, #12]
 801d988:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 801d98a:	68fb      	ldr	r3, [r7, #12]
 801d98c:	699b      	ldr	r3, [r3, #24]
 801d98e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 801d990:	68fb      	ldr	r3, [r7, #12]
 801d992:	6a1b      	ldr	r3, [r3, #32]
 801d994:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 801d996:	697b      	ldr	r3, [r7, #20]
 801d998:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 801d99c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 801d99e:	687b      	ldr	r3, [r7, #4]
 801d9a0:	031b      	lsls	r3, r3, #12
 801d9a2:	697a      	ldr	r2, [r7, #20]
 801d9a4:	4313      	orrs	r3, r2
 801d9a6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 801d9a8:	693b      	ldr	r3, [r7, #16]
 801d9aa:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 801d9ae:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 801d9b0:	68bb      	ldr	r3, [r7, #8]
 801d9b2:	011b      	lsls	r3, r3, #4
 801d9b4:	693a      	ldr	r2, [r7, #16]
 801d9b6:	4313      	orrs	r3, r2
 801d9b8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 801d9ba:	68fb      	ldr	r3, [r7, #12]
 801d9bc:	697a      	ldr	r2, [r7, #20]
 801d9be:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 801d9c0:	68fb      	ldr	r3, [r7, #12]
 801d9c2:	693a      	ldr	r2, [r7, #16]
 801d9c4:	621a      	str	r2, [r3, #32]
}
 801d9c6:	bf00      	nop
 801d9c8:	371c      	adds	r7, #28
 801d9ca:	46bd      	mov	sp, r7
 801d9cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d9d0:	4770      	bx	lr

0801d9d2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 801d9d2:	b480      	push	{r7}
 801d9d4:	b085      	sub	sp, #20
 801d9d6:	af00      	add	r7, sp, #0
 801d9d8:	6078      	str	r0, [r7, #4]
 801d9da:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 801d9dc:	687b      	ldr	r3, [r7, #4]
 801d9de:	689b      	ldr	r3, [r3, #8]
 801d9e0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 801d9e2:	68fb      	ldr	r3, [r7, #12]
 801d9e4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801d9e8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 801d9ea:	683a      	ldr	r2, [r7, #0]
 801d9ec:	68fb      	ldr	r3, [r7, #12]
 801d9ee:	4313      	orrs	r3, r2
 801d9f0:	f043 0307 	orr.w	r3, r3, #7
 801d9f4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 801d9f6:	687b      	ldr	r3, [r7, #4]
 801d9f8:	68fa      	ldr	r2, [r7, #12]
 801d9fa:	609a      	str	r2, [r3, #8]
}
 801d9fc:	bf00      	nop
 801d9fe:	3714      	adds	r7, #20
 801da00:	46bd      	mov	sp, r7
 801da02:	f85d 7b04 	ldr.w	r7, [sp], #4
 801da06:	4770      	bx	lr

0801da08 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 801da08:	b480      	push	{r7}
 801da0a:	b087      	sub	sp, #28
 801da0c:	af00      	add	r7, sp, #0
 801da0e:	60f8      	str	r0, [r7, #12]
 801da10:	60b9      	str	r1, [r7, #8]
 801da12:	607a      	str	r2, [r7, #4]
 801da14:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 801da16:	68fb      	ldr	r3, [r7, #12]
 801da18:	689b      	ldr	r3, [r3, #8]
 801da1a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 801da1c:	697b      	ldr	r3, [r7, #20]
 801da1e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 801da22:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 801da24:	683b      	ldr	r3, [r7, #0]
 801da26:	021a      	lsls	r2, r3, #8
 801da28:	687b      	ldr	r3, [r7, #4]
 801da2a:	431a      	orrs	r2, r3
 801da2c:	68bb      	ldr	r3, [r7, #8]
 801da2e:	4313      	orrs	r3, r2
 801da30:	697a      	ldr	r2, [r7, #20]
 801da32:	4313      	orrs	r3, r2
 801da34:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 801da36:	68fb      	ldr	r3, [r7, #12]
 801da38:	697a      	ldr	r2, [r7, #20]
 801da3a:	609a      	str	r2, [r3, #8]
}
 801da3c:	bf00      	nop
 801da3e:	371c      	adds	r7, #28
 801da40:	46bd      	mov	sp, r7
 801da42:	f85d 7b04 	ldr.w	r7, [sp], #4
 801da46:	4770      	bx	lr

0801da48 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 801da48:	b480      	push	{r7}
 801da4a:	b085      	sub	sp, #20
 801da4c:	af00      	add	r7, sp, #0
 801da4e:	6078      	str	r0, [r7, #4]
 801da50:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 801da52:	687b      	ldr	r3, [r7, #4]
 801da54:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 801da58:	2b01      	cmp	r3, #1
 801da5a:	d101      	bne.n	801da60 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 801da5c:	2302      	movs	r3, #2
 801da5e:	e05a      	b.n	801db16 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 801da60:	687b      	ldr	r3, [r7, #4]
 801da62:	2201      	movs	r2, #1
 801da64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 801da68:	687b      	ldr	r3, [r7, #4]
 801da6a:	2202      	movs	r2, #2
 801da6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 801da70:	687b      	ldr	r3, [r7, #4]
 801da72:	681b      	ldr	r3, [r3, #0]
 801da74:	685b      	ldr	r3, [r3, #4]
 801da76:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 801da78:	687b      	ldr	r3, [r7, #4]
 801da7a:	681b      	ldr	r3, [r3, #0]
 801da7c:	689b      	ldr	r3, [r3, #8]
 801da7e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 801da80:	68fb      	ldr	r3, [r7, #12]
 801da82:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801da86:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 801da88:	683b      	ldr	r3, [r7, #0]
 801da8a:	681b      	ldr	r3, [r3, #0]
 801da8c:	68fa      	ldr	r2, [r7, #12]
 801da8e:	4313      	orrs	r3, r2
 801da90:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 801da92:	687b      	ldr	r3, [r7, #4]
 801da94:	681b      	ldr	r3, [r3, #0]
 801da96:	68fa      	ldr	r2, [r7, #12]
 801da98:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 801da9a:	687b      	ldr	r3, [r7, #4]
 801da9c:	681b      	ldr	r3, [r3, #0]
 801da9e:	4a21      	ldr	r2, [pc, #132]	; (801db24 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 801daa0:	4293      	cmp	r3, r2
 801daa2:	d022      	beq.n	801daea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 801daa4:	687b      	ldr	r3, [r7, #4]
 801daa6:	681b      	ldr	r3, [r3, #0]
 801daa8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801daac:	d01d      	beq.n	801daea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 801daae:	687b      	ldr	r3, [r7, #4]
 801dab0:	681b      	ldr	r3, [r3, #0]
 801dab2:	4a1d      	ldr	r2, [pc, #116]	; (801db28 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 801dab4:	4293      	cmp	r3, r2
 801dab6:	d018      	beq.n	801daea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 801dab8:	687b      	ldr	r3, [r7, #4]
 801daba:	681b      	ldr	r3, [r3, #0]
 801dabc:	4a1b      	ldr	r2, [pc, #108]	; (801db2c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 801dabe:	4293      	cmp	r3, r2
 801dac0:	d013      	beq.n	801daea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 801dac2:	687b      	ldr	r3, [r7, #4]
 801dac4:	681b      	ldr	r3, [r3, #0]
 801dac6:	4a1a      	ldr	r2, [pc, #104]	; (801db30 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 801dac8:	4293      	cmp	r3, r2
 801daca:	d00e      	beq.n	801daea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 801dacc:	687b      	ldr	r3, [r7, #4]
 801dace:	681b      	ldr	r3, [r3, #0]
 801dad0:	4a18      	ldr	r2, [pc, #96]	; (801db34 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 801dad2:	4293      	cmp	r3, r2
 801dad4:	d009      	beq.n	801daea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 801dad6:	687b      	ldr	r3, [r7, #4]
 801dad8:	681b      	ldr	r3, [r3, #0]
 801dada:	4a17      	ldr	r2, [pc, #92]	; (801db38 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 801dadc:	4293      	cmp	r3, r2
 801dade:	d004      	beq.n	801daea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 801dae0:	687b      	ldr	r3, [r7, #4]
 801dae2:	681b      	ldr	r3, [r3, #0]
 801dae4:	4a15      	ldr	r2, [pc, #84]	; (801db3c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 801dae6:	4293      	cmp	r3, r2
 801dae8:	d10c      	bne.n	801db04 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 801daea:	68bb      	ldr	r3, [r7, #8]
 801daec:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 801daf0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 801daf2:	683b      	ldr	r3, [r7, #0]
 801daf4:	685b      	ldr	r3, [r3, #4]
 801daf6:	68ba      	ldr	r2, [r7, #8]
 801daf8:	4313      	orrs	r3, r2
 801dafa:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 801dafc:	687b      	ldr	r3, [r7, #4]
 801dafe:	681b      	ldr	r3, [r3, #0]
 801db00:	68ba      	ldr	r2, [r7, #8]
 801db02:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 801db04:	687b      	ldr	r3, [r7, #4]
 801db06:	2201      	movs	r2, #1
 801db08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 801db0c:	687b      	ldr	r3, [r7, #4]
 801db0e:	2200      	movs	r2, #0
 801db10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 801db14:	2300      	movs	r3, #0
}
 801db16:	4618      	mov	r0, r3
 801db18:	3714      	adds	r7, #20
 801db1a:	46bd      	mov	sp, r7
 801db1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801db20:	4770      	bx	lr
 801db22:	bf00      	nop
 801db24:	40010000 	.word	0x40010000
 801db28:	40000400 	.word	0x40000400
 801db2c:	40000800 	.word	0x40000800
 801db30:	40000c00 	.word	0x40000c00
 801db34:	40010400 	.word	0x40010400
 801db38:	40014000 	.word	0x40014000
 801db3c:	40001800 	.word	0x40001800

0801db40 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 801db40:	b480      	push	{r7}
 801db42:	b083      	sub	sp, #12
 801db44:	af00      	add	r7, sp, #0
 801db46:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 801db48:	bf00      	nop
 801db4a:	370c      	adds	r7, #12
 801db4c:	46bd      	mov	sp, r7
 801db4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801db52:	4770      	bx	lr

0801db54 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 801db54:	b480      	push	{r7}
 801db56:	b083      	sub	sp, #12
 801db58:	af00      	add	r7, sp, #0
 801db5a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 801db5c:	bf00      	nop
 801db5e:	370c      	adds	r7, #12
 801db60:	46bd      	mov	sp, r7
 801db62:	f85d 7b04 	ldr.w	r7, [sp], #4
 801db66:	4770      	bx	lr

0801db68 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 801db68:	b084      	sub	sp, #16
 801db6a:	b580      	push	{r7, lr}
 801db6c:	b084      	sub	sp, #16
 801db6e:	af00      	add	r7, sp, #0
 801db70:	6078      	str	r0, [r7, #4]
 801db72:	f107 001c 	add.w	r0, r7, #28
 801db76:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 801db7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801db7c:	2b01      	cmp	r3, #1
 801db7e:	d122      	bne.n	801dbc6 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 801db80:	687b      	ldr	r3, [r7, #4]
 801db82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801db84:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 801db88:	687b      	ldr	r3, [r7, #4]
 801db8a:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 801db8c:	687b      	ldr	r3, [r7, #4]
 801db8e:	68db      	ldr	r3, [r3, #12]
 801db90:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 801db94:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 801db98:	687a      	ldr	r2, [r7, #4]
 801db9a:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 801db9c:	687b      	ldr	r3, [r7, #4]
 801db9e:	68db      	ldr	r3, [r3, #12]
 801dba0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 801dba4:	687b      	ldr	r3, [r7, #4]
 801dba6:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 801dba8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801dbaa:	2b01      	cmp	r3, #1
 801dbac:	d105      	bne.n	801dbba <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 801dbae:	687b      	ldr	r3, [r7, #4]
 801dbb0:	68db      	ldr	r3, [r3, #12]
 801dbb2:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 801dbb6:	687b      	ldr	r3, [r7, #4]
 801dbb8:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 801dbba:	6878      	ldr	r0, [r7, #4]
 801dbbc:	f001 fb16 	bl	801f1ec <USB_CoreReset>
 801dbc0:	4603      	mov	r3, r0
 801dbc2:	73fb      	strb	r3, [r7, #15]
 801dbc4:	e01a      	b.n	801dbfc <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 801dbc6:	687b      	ldr	r3, [r7, #4]
 801dbc8:	68db      	ldr	r3, [r3, #12]
 801dbca:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 801dbce:	687b      	ldr	r3, [r7, #4]
 801dbd0:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 801dbd2:	6878      	ldr	r0, [r7, #4]
 801dbd4:	f001 fb0a 	bl	801f1ec <USB_CoreReset>
 801dbd8:	4603      	mov	r3, r0
 801dbda:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 801dbdc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801dbde:	2b00      	cmp	r3, #0
 801dbe0:	d106      	bne.n	801dbf0 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 801dbe2:	687b      	ldr	r3, [r7, #4]
 801dbe4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801dbe6:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 801dbea:	687b      	ldr	r3, [r7, #4]
 801dbec:	639a      	str	r2, [r3, #56]	; 0x38
 801dbee:	e005      	b.n	801dbfc <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 801dbf0:	687b      	ldr	r3, [r7, #4]
 801dbf2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801dbf4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 801dbf8:	687b      	ldr	r3, [r7, #4]
 801dbfa:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 801dbfc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801dbfe:	2b01      	cmp	r3, #1
 801dc00:	d10b      	bne.n	801dc1a <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 801dc02:	687b      	ldr	r3, [r7, #4]
 801dc04:	689b      	ldr	r3, [r3, #8]
 801dc06:	f043 0206 	orr.w	r2, r3, #6
 801dc0a:	687b      	ldr	r3, [r7, #4]
 801dc0c:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 801dc0e:	687b      	ldr	r3, [r7, #4]
 801dc10:	689b      	ldr	r3, [r3, #8]
 801dc12:	f043 0220 	orr.w	r2, r3, #32
 801dc16:	687b      	ldr	r3, [r7, #4]
 801dc18:	609a      	str	r2, [r3, #8]
  }

  return ret;
 801dc1a:	7bfb      	ldrb	r3, [r7, #15]
}
 801dc1c:	4618      	mov	r0, r3
 801dc1e:	3710      	adds	r7, #16
 801dc20:	46bd      	mov	sp, r7
 801dc22:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 801dc26:	b004      	add	sp, #16
 801dc28:	4770      	bx	lr
	...

0801dc2c <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 801dc2c:	b480      	push	{r7}
 801dc2e:	b087      	sub	sp, #28
 801dc30:	af00      	add	r7, sp, #0
 801dc32:	60f8      	str	r0, [r7, #12]
 801dc34:	60b9      	str	r1, [r7, #8]
 801dc36:	4613      	mov	r3, r2
 801dc38:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 801dc3a:	79fb      	ldrb	r3, [r7, #7]
 801dc3c:	2b02      	cmp	r3, #2
 801dc3e:	d165      	bne.n	801dd0c <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 801dc40:	68bb      	ldr	r3, [r7, #8]
 801dc42:	4a41      	ldr	r2, [pc, #260]	; (801dd48 <USB_SetTurnaroundTime+0x11c>)
 801dc44:	4293      	cmp	r3, r2
 801dc46:	d906      	bls.n	801dc56 <USB_SetTurnaroundTime+0x2a>
 801dc48:	68bb      	ldr	r3, [r7, #8]
 801dc4a:	4a40      	ldr	r2, [pc, #256]	; (801dd4c <USB_SetTurnaroundTime+0x120>)
 801dc4c:	4293      	cmp	r3, r2
 801dc4e:	d202      	bcs.n	801dc56 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 801dc50:	230f      	movs	r3, #15
 801dc52:	617b      	str	r3, [r7, #20]
 801dc54:	e062      	b.n	801dd1c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 801dc56:	68bb      	ldr	r3, [r7, #8]
 801dc58:	4a3c      	ldr	r2, [pc, #240]	; (801dd4c <USB_SetTurnaroundTime+0x120>)
 801dc5a:	4293      	cmp	r3, r2
 801dc5c:	d306      	bcc.n	801dc6c <USB_SetTurnaroundTime+0x40>
 801dc5e:	68bb      	ldr	r3, [r7, #8]
 801dc60:	4a3b      	ldr	r2, [pc, #236]	; (801dd50 <USB_SetTurnaroundTime+0x124>)
 801dc62:	4293      	cmp	r3, r2
 801dc64:	d202      	bcs.n	801dc6c <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 801dc66:	230e      	movs	r3, #14
 801dc68:	617b      	str	r3, [r7, #20]
 801dc6a:	e057      	b.n	801dd1c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 801dc6c:	68bb      	ldr	r3, [r7, #8]
 801dc6e:	4a38      	ldr	r2, [pc, #224]	; (801dd50 <USB_SetTurnaroundTime+0x124>)
 801dc70:	4293      	cmp	r3, r2
 801dc72:	d306      	bcc.n	801dc82 <USB_SetTurnaroundTime+0x56>
 801dc74:	68bb      	ldr	r3, [r7, #8]
 801dc76:	4a37      	ldr	r2, [pc, #220]	; (801dd54 <USB_SetTurnaroundTime+0x128>)
 801dc78:	4293      	cmp	r3, r2
 801dc7a:	d202      	bcs.n	801dc82 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 801dc7c:	230d      	movs	r3, #13
 801dc7e:	617b      	str	r3, [r7, #20]
 801dc80:	e04c      	b.n	801dd1c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 801dc82:	68bb      	ldr	r3, [r7, #8]
 801dc84:	4a33      	ldr	r2, [pc, #204]	; (801dd54 <USB_SetTurnaroundTime+0x128>)
 801dc86:	4293      	cmp	r3, r2
 801dc88:	d306      	bcc.n	801dc98 <USB_SetTurnaroundTime+0x6c>
 801dc8a:	68bb      	ldr	r3, [r7, #8]
 801dc8c:	4a32      	ldr	r2, [pc, #200]	; (801dd58 <USB_SetTurnaroundTime+0x12c>)
 801dc8e:	4293      	cmp	r3, r2
 801dc90:	d802      	bhi.n	801dc98 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 801dc92:	230c      	movs	r3, #12
 801dc94:	617b      	str	r3, [r7, #20]
 801dc96:	e041      	b.n	801dd1c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 801dc98:	68bb      	ldr	r3, [r7, #8]
 801dc9a:	4a2f      	ldr	r2, [pc, #188]	; (801dd58 <USB_SetTurnaroundTime+0x12c>)
 801dc9c:	4293      	cmp	r3, r2
 801dc9e:	d906      	bls.n	801dcae <USB_SetTurnaroundTime+0x82>
 801dca0:	68bb      	ldr	r3, [r7, #8]
 801dca2:	4a2e      	ldr	r2, [pc, #184]	; (801dd5c <USB_SetTurnaroundTime+0x130>)
 801dca4:	4293      	cmp	r3, r2
 801dca6:	d802      	bhi.n	801dcae <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 801dca8:	230b      	movs	r3, #11
 801dcaa:	617b      	str	r3, [r7, #20]
 801dcac:	e036      	b.n	801dd1c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 801dcae:	68bb      	ldr	r3, [r7, #8]
 801dcb0:	4a2a      	ldr	r2, [pc, #168]	; (801dd5c <USB_SetTurnaroundTime+0x130>)
 801dcb2:	4293      	cmp	r3, r2
 801dcb4:	d906      	bls.n	801dcc4 <USB_SetTurnaroundTime+0x98>
 801dcb6:	68bb      	ldr	r3, [r7, #8]
 801dcb8:	4a29      	ldr	r2, [pc, #164]	; (801dd60 <USB_SetTurnaroundTime+0x134>)
 801dcba:	4293      	cmp	r3, r2
 801dcbc:	d802      	bhi.n	801dcc4 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 801dcbe:	230a      	movs	r3, #10
 801dcc0:	617b      	str	r3, [r7, #20]
 801dcc2:	e02b      	b.n	801dd1c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 801dcc4:	68bb      	ldr	r3, [r7, #8]
 801dcc6:	4a26      	ldr	r2, [pc, #152]	; (801dd60 <USB_SetTurnaroundTime+0x134>)
 801dcc8:	4293      	cmp	r3, r2
 801dcca:	d906      	bls.n	801dcda <USB_SetTurnaroundTime+0xae>
 801dccc:	68bb      	ldr	r3, [r7, #8]
 801dcce:	4a25      	ldr	r2, [pc, #148]	; (801dd64 <USB_SetTurnaroundTime+0x138>)
 801dcd0:	4293      	cmp	r3, r2
 801dcd2:	d202      	bcs.n	801dcda <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 801dcd4:	2309      	movs	r3, #9
 801dcd6:	617b      	str	r3, [r7, #20]
 801dcd8:	e020      	b.n	801dd1c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 801dcda:	68bb      	ldr	r3, [r7, #8]
 801dcdc:	4a21      	ldr	r2, [pc, #132]	; (801dd64 <USB_SetTurnaroundTime+0x138>)
 801dcde:	4293      	cmp	r3, r2
 801dce0:	d306      	bcc.n	801dcf0 <USB_SetTurnaroundTime+0xc4>
 801dce2:	68bb      	ldr	r3, [r7, #8]
 801dce4:	4a20      	ldr	r2, [pc, #128]	; (801dd68 <USB_SetTurnaroundTime+0x13c>)
 801dce6:	4293      	cmp	r3, r2
 801dce8:	d802      	bhi.n	801dcf0 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 801dcea:	2308      	movs	r3, #8
 801dcec:	617b      	str	r3, [r7, #20]
 801dcee:	e015      	b.n	801dd1c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 801dcf0:	68bb      	ldr	r3, [r7, #8]
 801dcf2:	4a1d      	ldr	r2, [pc, #116]	; (801dd68 <USB_SetTurnaroundTime+0x13c>)
 801dcf4:	4293      	cmp	r3, r2
 801dcf6:	d906      	bls.n	801dd06 <USB_SetTurnaroundTime+0xda>
 801dcf8:	68bb      	ldr	r3, [r7, #8]
 801dcfa:	4a1c      	ldr	r2, [pc, #112]	; (801dd6c <USB_SetTurnaroundTime+0x140>)
 801dcfc:	4293      	cmp	r3, r2
 801dcfe:	d202      	bcs.n	801dd06 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 801dd00:	2307      	movs	r3, #7
 801dd02:	617b      	str	r3, [r7, #20]
 801dd04:	e00a      	b.n	801dd1c <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 801dd06:	2306      	movs	r3, #6
 801dd08:	617b      	str	r3, [r7, #20]
 801dd0a:	e007      	b.n	801dd1c <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 801dd0c:	79fb      	ldrb	r3, [r7, #7]
 801dd0e:	2b00      	cmp	r3, #0
 801dd10:	d102      	bne.n	801dd18 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 801dd12:	2309      	movs	r3, #9
 801dd14:	617b      	str	r3, [r7, #20]
 801dd16:	e001      	b.n	801dd1c <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 801dd18:	2309      	movs	r3, #9
 801dd1a:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 801dd1c:	68fb      	ldr	r3, [r7, #12]
 801dd1e:	68db      	ldr	r3, [r3, #12]
 801dd20:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 801dd24:	68fb      	ldr	r3, [r7, #12]
 801dd26:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 801dd28:	68fb      	ldr	r3, [r7, #12]
 801dd2a:	68da      	ldr	r2, [r3, #12]
 801dd2c:	697b      	ldr	r3, [r7, #20]
 801dd2e:	029b      	lsls	r3, r3, #10
 801dd30:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 801dd34:	431a      	orrs	r2, r3
 801dd36:	68fb      	ldr	r3, [r7, #12]
 801dd38:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 801dd3a:	2300      	movs	r3, #0
}
 801dd3c:	4618      	mov	r0, r3
 801dd3e:	371c      	adds	r7, #28
 801dd40:	46bd      	mov	sp, r7
 801dd42:	f85d 7b04 	ldr.w	r7, [sp], #4
 801dd46:	4770      	bx	lr
 801dd48:	00d8acbf 	.word	0x00d8acbf
 801dd4c:	00e4e1c0 	.word	0x00e4e1c0
 801dd50:	00f42400 	.word	0x00f42400
 801dd54:	01067380 	.word	0x01067380
 801dd58:	011a499f 	.word	0x011a499f
 801dd5c:	01312cff 	.word	0x01312cff
 801dd60:	014ca43f 	.word	0x014ca43f
 801dd64:	016e3600 	.word	0x016e3600
 801dd68:	01a6ab1f 	.word	0x01a6ab1f
 801dd6c:	01e84800 	.word	0x01e84800

0801dd70 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 801dd70:	b480      	push	{r7}
 801dd72:	b083      	sub	sp, #12
 801dd74:	af00      	add	r7, sp, #0
 801dd76:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 801dd78:	687b      	ldr	r3, [r7, #4]
 801dd7a:	689b      	ldr	r3, [r3, #8]
 801dd7c:	f043 0201 	orr.w	r2, r3, #1
 801dd80:	687b      	ldr	r3, [r7, #4]
 801dd82:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 801dd84:	2300      	movs	r3, #0
}
 801dd86:	4618      	mov	r0, r3
 801dd88:	370c      	adds	r7, #12
 801dd8a:	46bd      	mov	sp, r7
 801dd8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801dd90:	4770      	bx	lr

0801dd92 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 801dd92:	b480      	push	{r7}
 801dd94:	b083      	sub	sp, #12
 801dd96:	af00      	add	r7, sp, #0
 801dd98:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 801dd9a:	687b      	ldr	r3, [r7, #4]
 801dd9c:	689b      	ldr	r3, [r3, #8]
 801dd9e:	f023 0201 	bic.w	r2, r3, #1
 801dda2:	687b      	ldr	r3, [r7, #4]
 801dda4:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 801dda6:	2300      	movs	r3, #0
}
 801dda8:	4618      	mov	r0, r3
 801ddaa:	370c      	adds	r7, #12
 801ddac:	46bd      	mov	sp, r7
 801ddae:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ddb2:	4770      	bx	lr

0801ddb4 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 801ddb4:	b580      	push	{r7, lr}
 801ddb6:	b084      	sub	sp, #16
 801ddb8:	af00      	add	r7, sp, #0
 801ddba:	6078      	str	r0, [r7, #4]
 801ddbc:	460b      	mov	r3, r1
 801ddbe:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 801ddc0:	2300      	movs	r3, #0
 801ddc2:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 801ddc4:	687b      	ldr	r3, [r7, #4]
 801ddc6:	68db      	ldr	r3, [r3, #12]
 801ddc8:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 801ddcc:	687b      	ldr	r3, [r7, #4]
 801ddce:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 801ddd0:	78fb      	ldrb	r3, [r7, #3]
 801ddd2:	2b01      	cmp	r3, #1
 801ddd4:	d115      	bne.n	801de02 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 801ddd6:	687b      	ldr	r3, [r7, #4]
 801ddd8:	68db      	ldr	r3, [r3, #12]
 801ddda:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 801ddde:	687b      	ldr	r3, [r7, #4]
 801dde0:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 801dde2:	2001      	movs	r0, #1
 801dde4:	f7fa fb04 	bl	80183f0 <HAL_Delay>
      ms++;
 801dde8:	68fb      	ldr	r3, [r7, #12]
 801ddea:	3301      	adds	r3, #1
 801ddec:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 801ddee:	6878      	ldr	r0, [r7, #4]
 801ddf0:	f001 f96c 	bl	801f0cc <USB_GetMode>
 801ddf4:	4603      	mov	r3, r0
 801ddf6:	2b01      	cmp	r3, #1
 801ddf8:	d01e      	beq.n	801de38 <USB_SetCurrentMode+0x84>
 801ddfa:	68fb      	ldr	r3, [r7, #12]
 801ddfc:	2b31      	cmp	r3, #49	; 0x31
 801ddfe:	d9f0      	bls.n	801dde2 <USB_SetCurrentMode+0x2e>
 801de00:	e01a      	b.n	801de38 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 801de02:	78fb      	ldrb	r3, [r7, #3]
 801de04:	2b00      	cmp	r3, #0
 801de06:	d115      	bne.n	801de34 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 801de08:	687b      	ldr	r3, [r7, #4]
 801de0a:	68db      	ldr	r3, [r3, #12]
 801de0c:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 801de10:	687b      	ldr	r3, [r7, #4]
 801de12:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 801de14:	2001      	movs	r0, #1
 801de16:	f7fa faeb 	bl	80183f0 <HAL_Delay>
      ms++;
 801de1a:	68fb      	ldr	r3, [r7, #12]
 801de1c:	3301      	adds	r3, #1
 801de1e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 801de20:	6878      	ldr	r0, [r7, #4]
 801de22:	f001 f953 	bl	801f0cc <USB_GetMode>
 801de26:	4603      	mov	r3, r0
 801de28:	2b00      	cmp	r3, #0
 801de2a:	d005      	beq.n	801de38 <USB_SetCurrentMode+0x84>
 801de2c:	68fb      	ldr	r3, [r7, #12]
 801de2e:	2b31      	cmp	r3, #49	; 0x31
 801de30:	d9f0      	bls.n	801de14 <USB_SetCurrentMode+0x60>
 801de32:	e001      	b.n	801de38 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 801de34:	2301      	movs	r3, #1
 801de36:	e005      	b.n	801de44 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 801de38:	68fb      	ldr	r3, [r7, #12]
 801de3a:	2b32      	cmp	r3, #50	; 0x32
 801de3c:	d101      	bne.n	801de42 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 801de3e:	2301      	movs	r3, #1
 801de40:	e000      	b.n	801de44 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 801de42:	2300      	movs	r3, #0
}
 801de44:	4618      	mov	r0, r3
 801de46:	3710      	adds	r7, #16
 801de48:	46bd      	mov	sp, r7
 801de4a:	bd80      	pop	{r7, pc}

0801de4c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 801de4c:	b084      	sub	sp, #16
 801de4e:	b580      	push	{r7, lr}
 801de50:	b086      	sub	sp, #24
 801de52:	af00      	add	r7, sp, #0
 801de54:	6078      	str	r0, [r7, #4]
 801de56:	f107 0024 	add.w	r0, r7, #36	; 0x24
 801de5a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 801de5e:	2300      	movs	r3, #0
 801de60:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801de62:	687b      	ldr	r3, [r7, #4]
 801de64:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 801de66:	2300      	movs	r3, #0
 801de68:	613b      	str	r3, [r7, #16]
 801de6a:	e009      	b.n	801de80 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 801de6c:	687a      	ldr	r2, [r7, #4]
 801de6e:	693b      	ldr	r3, [r7, #16]
 801de70:	3340      	adds	r3, #64	; 0x40
 801de72:	009b      	lsls	r3, r3, #2
 801de74:	4413      	add	r3, r2
 801de76:	2200      	movs	r2, #0
 801de78:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 801de7a:	693b      	ldr	r3, [r7, #16]
 801de7c:	3301      	adds	r3, #1
 801de7e:	613b      	str	r3, [r7, #16]
 801de80:	693b      	ldr	r3, [r7, #16]
 801de82:	2b0e      	cmp	r3, #14
 801de84:	d9f2      	bls.n	801de6c <USB_DevInit+0x20>
  }

#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 801de86:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801de88:	2b00      	cmp	r3, #0
 801de8a:	d11c      	bne.n	801dec6 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 801de8c:	68fb      	ldr	r3, [r7, #12]
 801de8e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801de92:	685b      	ldr	r3, [r3, #4]
 801de94:	68fa      	ldr	r2, [r7, #12]
 801de96:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 801de9a:	f043 0302 	orr.w	r3, r3, #2
 801de9e:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 801dea0:	687b      	ldr	r3, [r7, #4]
 801dea2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801dea4:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 801dea8:	687b      	ldr	r3, [r7, #4]
 801deaa:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 801deac:	687b      	ldr	r3, [r7, #4]
 801deae:	681b      	ldr	r3, [r3, #0]
 801deb0:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 801deb4:	687b      	ldr	r3, [r7, #4]
 801deb6:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 801deb8:	687b      	ldr	r3, [r7, #4]
 801deba:	681b      	ldr	r3, [r3, #0]
 801debc:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 801dec0:	687b      	ldr	r3, [r7, #4]
 801dec2:	601a      	str	r2, [r3, #0]
 801dec4:	e005      	b.n	801ded2 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 801dec6:	687b      	ldr	r3, [r7, #4]
 801dec8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801deca:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 801dece:	687b      	ldr	r3, [r7, #4]
 801ded0:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 801ded2:	68fb      	ldr	r3, [r7, #12]
 801ded4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 801ded8:	461a      	mov	r2, r3
 801deda:	2300      	movs	r3, #0
 801dedc:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 801dede:	68fb      	ldr	r3, [r7, #12]
 801dee0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801dee4:	4619      	mov	r1, r3
 801dee6:	68fb      	ldr	r3, [r7, #12]
 801dee8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801deec:	461a      	mov	r2, r3
 801deee:	680b      	ldr	r3, [r1, #0]
 801def0:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 801def2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801def4:	2b01      	cmp	r3, #1
 801def6:	d10c      	bne.n	801df12 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 801def8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801defa:	2b00      	cmp	r3, #0
 801defc:	d104      	bne.n	801df08 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 801defe:	2100      	movs	r1, #0
 801df00:	6878      	ldr	r0, [r7, #4]
 801df02:	f000 f945 	bl	801e190 <USB_SetDevSpeed>
 801df06:	e008      	b.n	801df1a <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 801df08:	2101      	movs	r1, #1
 801df0a:	6878      	ldr	r0, [r7, #4]
 801df0c:	f000 f940 	bl	801e190 <USB_SetDevSpeed>
 801df10:	e003      	b.n	801df1a <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 801df12:	2103      	movs	r1, #3
 801df14:	6878      	ldr	r0, [r7, #4]
 801df16:	f000 f93b 	bl	801e190 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 801df1a:	2110      	movs	r1, #16
 801df1c:	6878      	ldr	r0, [r7, #4]
 801df1e:	f000 f8f3 	bl	801e108 <USB_FlushTxFifo>
 801df22:	4603      	mov	r3, r0
 801df24:	2b00      	cmp	r3, #0
 801df26:	d001      	beq.n	801df2c <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 801df28:	2301      	movs	r3, #1
 801df2a:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 801df2c:	6878      	ldr	r0, [r7, #4]
 801df2e:	f000 f90f 	bl	801e150 <USB_FlushRxFifo>
 801df32:	4603      	mov	r3, r0
 801df34:	2b00      	cmp	r3, #0
 801df36:	d001      	beq.n	801df3c <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 801df38:	2301      	movs	r3, #1
 801df3a:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 801df3c:	68fb      	ldr	r3, [r7, #12]
 801df3e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801df42:	461a      	mov	r2, r3
 801df44:	2300      	movs	r3, #0
 801df46:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 801df48:	68fb      	ldr	r3, [r7, #12]
 801df4a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801df4e:	461a      	mov	r2, r3
 801df50:	2300      	movs	r3, #0
 801df52:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 801df54:	68fb      	ldr	r3, [r7, #12]
 801df56:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801df5a:	461a      	mov	r2, r3
 801df5c:	2300      	movs	r3, #0
 801df5e:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 801df60:	2300      	movs	r3, #0
 801df62:	613b      	str	r3, [r7, #16]
 801df64:	e043      	b.n	801dfee <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 801df66:	693b      	ldr	r3, [r7, #16]
 801df68:	015a      	lsls	r2, r3, #5
 801df6a:	68fb      	ldr	r3, [r7, #12]
 801df6c:	4413      	add	r3, r2
 801df6e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801df72:	681b      	ldr	r3, [r3, #0]
 801df74:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 801df78:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 801df7c:	d118      	bne.n	801dfb0 <USB_DevInit+0x164>
    {
      if (i == 0U)
 801df7e:	693b      	ldr	r3, [r7, #16]
 801df80:	2b00      	cmp	r3, #0
 801df82:	d10a      	bne.n	801df9a <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 801df84:	693b      	ldr	r3, [r7, #16]
 801df86:	015a      	lsls	r2, r3, #5
 801df88:	68fb      	ldr	r3, [r7, #12]
 801df8a:	4413      	add	r3, r2
 801df8c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801df90:	461a      	mov	r2, r3
 801df92:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 801df96:	6013      	str	r3, [r2, #0]
 801df98:	e013      	b.n	801dfc2 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 801df9a:	693b      	ldr	r3, [r7, #16]
 801df9c:	015a      	lsls	r2, r3, #5
 801df9e:	68fb      	ldr	r3, [r7, #12]
 801dfa0:	4413      	add	r3, r2
 801dfa2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801dfa6:	461a      	mov	r2, r3
 801dfa8:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 801dfac:	6013      	str	r3, [r2, #0]
 801dfae:	e008      	b.n	801dfc2 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 801dfb0:	693b      	ldr	r3, [r7, #16]
 801dfb2:	015a      	lsls	r2, r3, #5
 801dfb4:	68fb      	ldr	r3, [r7, #12]
 801dfb6:	4413      	add	r3, r2
 801dfb8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801dfbc:	461a      	mov	r2, r3
 801dfbe:	2300      	movs	r3, #0
 801dfc0:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 801dfc2:	693b      	ldr	r3, [r7, #16]
 801dfc4:	015a      	lsls	r2, r3, #5
 801dfc6:	68fb      	ldr	r3, [r7, #12]
 801dfc8:	4413      	add	r3, r2
 801dfca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801dfce:	461a      	mov	r2, r3
 801dfd0:	2300      	movs	r3, #0
 801dfd2:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 801dfd4:	693b      	ldr	r3, [r7, #16]
 801dfd6:	015a      	lsls	r2, r3, #5
 801dfd8:	68fb      	ldr	r3, [r7, #12]
 801dfda:	4413      	add	r3, r2
 801dfdc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801dfe0:	461a      	mov	r2, r3
 801dfe2:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 801dfe6:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 801dfe8:	693b      	ldr	r3, [r7, #16]
 801dfea:	3301      	adds	r3, #1
 801dfec:	613b      	str	r3, [r7, #16]
 801dfee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801dff0:	693a      	ldr	r2, [r7, #16]
 801dff2:	429a      	cmp	r2, r3
 801dff4:	d3b7      	bcc.n	801df66 <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 801dff6:	2300      	movs	r3, #0
 801dff8:	613b      	str	r3, [r7, #16]
 801dffa:	e043      	b.n	801e084 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 801dffc:	693b      	ldr	r3, [r7, #16]
 801dffe:	015a      	lsls	r2, r3, #5
 801e000:	68fb      	ldr	r3, [r7, #12]
 801e002:	4413      	add	r3, r2
 801e004:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801e008:	681b      	ldr	r3, [r3, #0]
 801e00a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 801e00e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 801e012:	d118      	bne.n	801e046 <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 801e014:	693b      	ldr	r3, [r7, #16]
 801e016:	2b00      	cmp	r3, #0
 801e018:	d10a      	bne.n	801e030 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 801e01a:	693b      	ldr	r3, [r7, #16]
 801e01c:	015a      	lsls	r2, r3, #5
 801e01e:	68fb      	ldr	r3, [r7, #12]
 801e020:	4413      	add	r3, r2
 801e022:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801e026:	461a      	mov	r2, r3
 801e028:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 801e02c:	6013      	str	r3, [r2, #0]
 801e02e:	e013      	b.n	801e058 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 801e030:	693b      	ldr	r3, [r7, #16]
 801e032:	015a      	lsls	r2, r3, #5
 801e034:	68fb      	ldr	r3, [r7, #12]
 801e036:	4413      	add	r3, r2
 801e038:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801e03c:	461a      	mov	r2, r3
 801e03e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 801e042:	6013      	str	r3, [r2, #0]
 801e044:	e008      	b.n	801e058 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 801e046:	693b      	ldr	r3, [r7, #16]
 801e048:	015a      	lsls	r2, r3, #5
 801e04a:	68fb      	ldr	r3, [r7, #12]
 801e04c:	4413      	add	r3, r2
 801e04e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801e052:	461a      	mov	r2, r3
 801e054:	2300      	movs	r3, #0
 801e056:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 801e058:	693b      	ldr	r3, [r7, #16]
 801e05a:	015a      	lsls	r2, r3, #5
 801e05c:	68fb      	ldr	r3, [r7, #12]
 801e05e:	4413      	add	r3, r2
 801e060:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801e064:	461a      	mov	r2, r3
 801e066:	2300      	movs	r3, #0
 801e068:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 801e06a:	693b      	ldr	r3, [r7, #16]
 801e06c:	015a      	lsls	r2, r3, #5
 801e06e:	68fb      	ldr	r3, [r7, #12]
 801e070:	4413      	add	r3, r2
 801e072:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801e076:	461a      	mov	r2, r3
 801e078:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 801e07c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 801e07e:	693b      	ldr	r3, [r7, #16]
 801e080:	3301      	adds	r3, #1
 801e082:	613b      	str	r3, [r7, #16]
 801e084:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801e086:	693a      	ldr	r2, [r7, #16]
 801e088:	429a      	cmp	r2, r3
 801e08a:	d3b7      	bcc.n	801dffc <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 801e08c:	68fb      	ldr	r3, [r7, #12]
 801e08e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801e092:	691b      	ldr	r3, [r3, #16]
 801e094:	68fa      	ldr	r2, [r7, #12]
 801e096:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 801e09a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 801e09e:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 801e0a0:	687b      	ldr	r3, [r7, #4]
 801e0a2:	2200      	movs	r2, #0
 801e0a4:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 801e0a6:	687b      	ldr	r3, [r7, #4]
 801e0a8:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 801e0ac:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 801e0ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801e0b0:	2b00      	cmp	r3, #0
 801e0b2:	d105      	bne.n	801e0c0 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 801e0b4:	687b      	ldr	r3, [r7, #4]
 801e0b6:	699b      	ldr	r3, [r3, #24]
 801e0b8:	f043 0210 	orr.w	r2, r3, #16
 801e0bc:	687b      	ldr	r3, [r7, #4]
 801e0be:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 801e0c0:	687b      	ldr	r3, [r7, #4]
 801e0c2:	699a      	ldr	r2, [r3, #24]
 801e0c4:	4b0f      	ldr	r3, [pc, #60]	; (801e104 <USB_DevInit+0x2b8>)
 801e0c6:	4313      	orrs	r3, r2
 801e0c8:	687a      	ldr	r2, [r7, #4]
 801e0ca:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 801e0cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801e0ce:	2b00      	cmp	r3, #0
 801e0d0:	d005      	beq.n	801e0de <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 801e0d2:	687b      	ldr	r3, [r7, #4]
 801e0d4:	699b      	ldr	r3, [r3, #24]
 801e0d6:	f043 0208 	orr.w	r2, r3, #8
 801e0da:	687b      	ldr	r3, [r7, #4]
 801e0dc:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 801e0de:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801e0e0:	2b01      	cmp	r3, #1
 801e0e2:	d107      	bne.n	801e0f4 <USB_DevInit+0x2a8>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 801e0e4:	687b      	ldr	r3, [r7, #4]
 801e0e6:	699b      	ldr	r3, [r3, #24]
 801e0e8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 801e0ec:	f043 0304 	orr.w	r3, r3, #4
 801e0f0:	687a      	ldr	r2, [r7, #4]
 801e0f2:	6193      	str	r3, [r2, #24]
  }

  return ret;
 801e0f4:	7dfb      	ldrb	r3, [r7, #23]
}
 801e0f6:	4618      	mov	r0, r3
 801e0f8:	3718      	adds	r7, #24
 801e0fa:	46bd      	mov	sp, r7
 801e0fc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 801e100:	b004      	add	sp, #16
 801e102:	4770      	bx	lr
 801e104:	803c3800 	.word	0x803c3800

0801e108 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 801e108:	b480      	push	{r7}
 801e10a:	b085      	sub	sp, #20
 801e10c:	af00      	add	r7, sp, #0
 801e10e:	6078      	str	r0, [r7, #4]
 801e110:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 801e112:	2300      	movs	r3, #0
 801e114:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 801e116:	683b      	ldr	r3, [r7, #0]
 801e118:	019b      	lsls	r3, r3, #6
 801e11a:	f043 0220 	orr.w	r2, r3, #32
 801e11e:	687b      	ldr	r3, [r7, #4]
 801e120:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 801e122:	68fb      	ldr	r3, [r7, #12]
 801e124:	3301      	adds	r3, #1
 801e126:	60fb      	str	r3, [r7, #12]
 801e128:	4a08      	ldr	r2, [pc, #32]	; (801e14c <USB_FlushTxFifo+0x44>)
 801e12a:	4293      	cmp	r3, r2
 801e12c:	d901      	bls.n	801e132 <USB_FlushTxFifo+0x2a>
    {
      return HAL_TIMEOUT;
 801e12e:	2303      	movs	r3, #3
 801e130:	e006      	b.n	801e140 <USB_FlushTxFifo+0x38>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 801e132:	687b      	ldr	r3, [r7, #4]
 801e134:	691b      	ldr	r3, [r3, #16]
 801e136:	f003 0320 	and.w	r3, r3, #32
 801e13a:	2b20      	cmp	r3, #32
 801e13c:	d0f1      	beq.n	801e122 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 801e13e:	2300      	movs	r3, #0
}
 801e140:	4618      	mov	r0, r3
 801e142:	3714      	adds	r7, #20
 801e144:	46bd      	mov	sp, r7
 801e146:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e14a:	4770      	bx	lr
 801e14c:	00030d40 	.word	0x00030d40

0801e150 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 801e150:	b480      	push	{r7}
 801e152:	b085      	sub	sp, #20
 801e154:	af00      	add	r7, sp, #0
 801e156:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 801e158:	2300      	movs	r3, #0
 801e15a:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 801e15c:	687b      	ldr	r3, [r7, #4]
 801e15e:	2210      	movs	r2, #16
 801e160:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 801e162:	68fb      	ldr	r3, [r7, #12]
 801e164:	3301      	adds	r3, #1
 801e166:	60fb      	str	r3, [r7, #12]
 801e168:	4a08      	ldr	r2, [pc, #32]	; (801e18c <USB_FlushRxFifo+0x3c>)
 801e16a:	4293      	cmp	r3, r2
 801e16c:	d901      	bls.n	801e172 <USB_FlushRxFifo+0x22>
    {
      return HAL_TIMEOUT;
 801e16e:	2303      	movs	r3, #3
 801e170:	e006      	b.n	801e180 <USB_FlushRxFifo+0x30>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 801e172:	687b      	ldr	r3, [r7, #4]
 801e174:	691b      	ldr	r3, [r3, #16]
 801e176:	f003 0310 	and.w	r3, r3, #16
 801e17a:	2b10      	cmp	r3, #16
 801e17c:	d0f1      	beq.n	801e162 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 801e17e:	2300      	movs	r3, #0
}
 801e180:	4618      	mov	r0, r3
 801e182:	3714      	adds	r7, #20
 801e184:	46bd      	mov	sp, r7
 801e186:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e18a:	4770      	bx	lr
 801e18c:	00030d40 	.word	0x00030d40

0801e190 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 801e190:	b480      	push	{r7}
 801e192:	b085      	sub	sp, #20
 801e194:	af00      	add	r7, sp, #0
 801e196:	6078      	str	r0, [r7, #4]
 801e198:	460b      	mov	r3, r1
 801e19a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801e19c:	687b      	ldr	r3, [r7, #4]
 801e19e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 801e1a0:	68fb      	ldr	r3, [r7, #12]
 801e1a2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801e1a6:	681a      	ldr	r2, [r3, #0]
 801e1a8:	78fb      	ldrb	r3, [r7, #3]
 801e1aa:	68f9      	ldr	r1, [r7, #12]
 801e1ac:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 801e1b0:	4313      	orrs	r3, r2
 801e1b2:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 801e1b4:	2300      	movs	r3, #0
}
 801e1b6:	4618      	mov	r0, r3
 801e1b8:	3714      	adds	r7, #20
 801e1ba:	46bd      	mov	sp, r7
 801e1bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e1c0:	4770      	bx	lr

0801e1c2 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 801e1c2:	b480      	push	{r7}
 801e1c4:	b087      	sub	sp, #28
 801e1c6:	af00      	add	r7, sp, #0
 801e1c8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801e1ca:	687b      	ldr	r3, [r7, #4]
 801e1cc:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 801e1ce:	693b      	ldr	r3, [r7, #16]
 801e1d0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801e1d4:	689b      	ldr	r3, [r3, #8]
 801e1d6:	f003 0306 	and.w	r3, r3, #6
 801e1da:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 801e1dc:	68fb      	ldr	r3, [r7, #12]
 801e1de:	2b00      	cmp	r3, #0
 801e1e0:	d102      	bne.n	801e1e8 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 801e1e2:	2300      	movs	r3, #0
 801e1e4:	75fb      	strb	r3, [r7, #23]
 801e1e6:	e00a      	b.n	801e1fe <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 801e1e8:	68fb      	ldr	r3, [r7, #12]
 801e1ea:	2b02      	cmp	r3, #2
 801e1ec:	d002      	beq.n	801e1f4 <USB_GetDevSpeed+0x32>
 801e1ee:	68fb      	ldr	r3, [r7, #12]
 801e1f0:	2b06      	cmp	r3, #6
 801e1f2:	d102      	bne.n	801e1fa <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 801e1f4:	2302      	movs	r3, #2
 801e1f6:	75fb      	strb	r3, [r7, #23]
 801e1f8:	e001      	b.n	801e1fe <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 801e1fa:	230f      	movs	r3, #15
 801e1fc:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 801e1fe:	7dfb      	ldrb	r3, [r7, #23]
}
 801e200:	4618      	mov	r0, r3
 801e202:	371c      	adds	r7, #28
 801e204:	46bd      	mov	sp, r7
 801e206:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e20a:	4770      	bx	lr

0801e20c <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 801e20c:	b480      	push	{r7}
 801e20e:	b085      	sub	sp, #20
 801e210:	af00      	add	r7, sp, #0
 801e212:	6078      	str	r0, [r7, #4]
 801e214:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801e216:	687b      	ldr	r3, [r7, #4]
 801e218:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 801e21a:	683b      	ldr	r3, [r7, #0]
 801e21c:	781b      	ldrb	r3, [r3, #0]
 801e21e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 801e220:	683b      	ldr	r3, [r7, #0]
 801e222:	785b      	ldrb	r3, [r3, #1]
 801e224:	2b01      	cmp	r3, #1
 801e226:	d13a      	bne.n	801e29e <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 801e228:	68fb      	ldr	r3, [r7, #12]
 801e22a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801e22e:	69da      	ldr	r2, [r3, #28]
 801e230:	683b      	ldr	r3, [r7, #0]
 801e232:	781b      	ldrb	r3, [r3, #0]
 801e234:	f003 030f 	and.w	r3, r3, #15
 801e238:	2101      	movs	r1, #1
 801e23a:	fa01 f303 	lsl.w	r3, r1, r3
 801e23e:	b29b      	uxth	r3, r3
 801e240:	68f9      	ldr	r1, [r7, #12]
 801e242:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 801e246:	4313      	orrs	r3, r2
 801e248:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 801e24a:	68bb      	ldr	r3, [r7, #8]
 801e24c:	015a      	lsls	r2, r3, #5
 801e24e:	68fb      	ldr	r3, [r7, #12]
 801e250:	4413      	add	r3, r2
 801e252:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801e256:	681b      	ldr	r3, [r3, #0]
 801e258:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 801e25c:	2b00      	cmp	r3, #0
 801e25e:	d155      	bne.n	801e30c <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 801e260:	68bb      	ldr	r3, [r7, #8]
 801e262:	015a      	lsls	r2, r3, #5
 801e264:	68fb      	ldr	r3, [r7, #12]
 801e266:	4413      	add	r3, r2
 801e268:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801e26c:	681a      	ldr	r2, [r3, #0]
 801e26e:	683b      	ldr	r3, [r7, #0]
 801e270:	689b      	ldr	r3, [r3, #8]
 801e272:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 801e276:	683b      	ldr	r3, [r7, #0]
 801e278:	78db      	ldrb	r3, [r3, #3]
 801e27a:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 801e27c:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 801e27e:	68bb      	ldr	r3, [r7, #8]
 801e280:	059b      	lsls	r3, r3, #22
 801e282:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 801e284:	4313      	orrs	r3, r2
 801e286:	68ba      	ldr	r2, [r7, #8]
 801e288:	0151      	lsls	r1, r2, #5
 801e28a:	68fa      	ldr	r2, [r7, #12]
 801e28c:	440a      	add	r2, r1
 801e28e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801e292:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 801e296:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 801e29a:	6013      	str	r3, [r2, #0]
 801e29c:	e036      	b.n	801e30c <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 801e29e:	68fb      	ldr	r3, [r7, #12]
 801e2a0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801e2a4:	69da      	ldr	r2, [r3, #28]
 801e2a6:	683b      	ldr	r3, [r7, #0]
 801e2a8:	781b      	ldrb	r3, [r3, #0]
 801e2aa:	f003 030f 	and.w	r3, r3, #15
 801e2ae:	2101      	movs	r1, #1
 801e2b0:	fa01 f303 	lsl.w	r3, r1, r3
 801e2b4:	041b      	lsls	r3, r3, #16
 801e2b6:	68f9      	ldr	r1, [r7, #12]
 801e2b8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 801e2bc:	4313      	orrs	r3, r2
 801e2be:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 801e2c0:	68bb      	ldr	r3, [r7, #8]
 801e2c2:	015a      	lsls	r2, r3, #5
 801e2c4:	68fb      	ldr	r3, [r7, #12]
 801e2c6:	4413      	add	r3, r2
 801e2c8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801e2cc:	681b      	ldr	r3, [r3, #0]
 801e2ce:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 801e2d2:	2b00      	cmp	r3, #0
 801e2d4:	d11a      	bne.n	801e30c <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 801e2d6:	68bb      	ldr	r3, [r7, #8]
 801e2d8:	015a      	lsls	r2, r3, #5
 801e2da:	68fb      	ldr	r3, [r7, #12]
 801e2dc:	4413      	add	r3, r2
 801e2de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801e2e2:	681a      	ldr	r2, [r3, #0]
 801e2e4:	683b      	ldr	r3, [r7, #0]
 801e2e6:	689b      	ldr	r3, [r3, #8]
 801e2e8:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 801e2ec:	683b      	ldr	r3, [r7, #0]
 801e2ee:	78db      	ldrb	r3, [r3, #3]
 801e2f0:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 801e2f2:	430b      	orrs	r3, r1
 801e2f4:	4313      	orrs	r3, r2
 801e2f6:	68ba      	ldr	r2, [r7, #8]
 801e2f8:	0151      	lsls	r1, r2, #5
 801e2fa:	68fa      	ldr	r2, [r7, #12]
 801e2fc:	440a      	add	r2, r1
 801e2fe:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801e302:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 801e306:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 801e30a:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 801e30c:	2300      	movs	r3, #0
}
 801e30e:	4618      	mov	r0, r3
 801e310:	3714      	adds	r7, #20
 801e312:	46bd      	mov	sp, r7
 801e314:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e318:	4770      	bx	lr
	...

0801e31c <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 801e31c:	b480      	push	{r7}
 801e31e:	b085      	sub	sp, #20
 801e320:	af00      	add	r7, sp, #0
 801e322:	6078      	str	r0, [r7, #4]
 801e324:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801e326:	687b      	ldr	r3, [r7, #4]
 801e328:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 801e32a:	683b      	ldr	r3, [r7, #0]
 801e32c:	781b      	ldrb	r3, [r3, #0]
 801e32e:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 801e330:	683b      	ldr	r3, [r7, #0]
 801e332:	785b      	ldrb	r3, [r3, #1]
 801e334:	2b01      	cmp	r3, #1
 801e336:	d161      	bne.n	801e3fc <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 801e338:	68bb      	ldr	r3, [r7, #8]
 801e33a:	015a      	lsls	r2, r3, #5
 801e33c:	68fb      	ldr	r3, [r7, #12]
 801e33e:	4413      	add	r3, r2
 801e340:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801e344:	681b      	ldr	r3, [r3, #0]
 801e346:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 801e34a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 801e34e:	d11f      	bne.n	801e390 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 801e350:	68bb      	ldr	r3, [r7, #8]
 801e352:	015a      	lsls	r2, r3, #5
 801e354:	68fb      	ldr	r3, [r7, #12]
 801e356:	4413      	add	r3, r2
 801e358:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801e35c:	681b      	ldr	r3, [r3, #0]
 801e35e:	68ba      	ldr	r2, [r7, #8]
 801e360:	0151      	lsls	r1, r2, #5
 801e362:	68fa      	ldr	r2, [r7, #12]
 801e364:	440a      	add	r2, r1
 801e366:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801e36a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 801e36e:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 801e370:	68bb      	ldr	r3, [r7, #8]
 801e372:	015a      	lsls	r2, r3, #5
 801e374:	68fb      	ldr	r3, [r7, #12]
 801e376:	4413      	add	r3, r2
 801e378:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801e37c:	681b      	ldr	r3, [r3, #0]
 801e37e:	68ba      	ldr	r2, [r7, #8]
 801e380:	0151      	lsls	r1, r2, #5
 801e382:	68fa      	ldr	r2, [r7, #12]
 801e384:	440a      	add	r2, r1
 801e386:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801e38a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 801e38e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 801e390:	68fb      	ldr	r3, [r7, #12]
 801e392:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801e396:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 801e398:	683b      	ldr	r3, [r7, #0]
 801e39a:	781b      	ldrb	r3, [r3, #0]
 801e39c:	f003 030f 	and.w	r3, r3, #15
 801e3a0:	2101      	movs	r1, #1
 801e3a2:	fa01 f303 	lsl.w	r3, r1, r3
 801e3a6:	b29b      	uxth	r3, r3
 801e3a8:	43db      	mvns	r3, r3
 801e3aa:	68f9      	ldr	r1, [r7, #12]
 801e3ac:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 801e3b0:	4013      	ands	r3, r2
 801e3b2:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 801e3b4:	68fb      	ldr	r3, [r7, #12]
 801e3b6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801e3ba:	69da      	ldr	r2, [r3, #28]
 801e3bc:	683b      	ldr	r3, [r7, #0]
 801e3be:	781b      	ldrb	r3, [r3, #0]
 801e3c0:	f003 030f 	and.w	r3, r3, #15
 801e3c4:	2101      	movs	r1, #1
 801e3c6:	fa01 f303 	lsl.w	r3, r1, r3
 801e3ca:	b29b      	uxth	r3, r3
 801e3cc:	43db      	mvns	r3, r3
 801e3ce:	68f9      	ldr	r1, [r7, #12]
 801e3d0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 801e3d4:	4013      	ands	r3, r2
 801e3d6:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 801e3d8:	68bb      	ldr	r3, [r7, #8]
 801e3da:	015a      	lsls	r2, r3, #5
 801e3dc:	68fb      	ldr	r3, [r7, #12]
 801e3de:	4413      	add	r3, r2
 801e3e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801e3e4:	681a      	ldr	r2, [r3, #0]
 801e3e6:	68bb      	ldr	r3, [r7, #8]
 801e3e8:	0159      	lsls	r1, r3, #5
 801e3ea:	68fb      	ldr	r3, [r7, #12]
 801e3ec:	440b      	add	r3, r1
 801e3ee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801e3f2:	4619      	mov	r1, r3
 801e3f4:	4b35      	ldr	r3, [pc, #212]	; (801e4cc <USB_DeactivateEndpoint+0x1b0>)
 801e3f6:	4013      	ands	r3, r2
 801e3f8:	600b      	str	r3, [r1, #0]
 801e3fa:	e060      	b.n	801e4be <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 801e3fc:	68bb      	ldr	r3, [r7, #8]
 801e3fe:	015a      	lsls	r2, r3, #5
 801e400:	68fb      	ldr	r3, [r7, #12]
 801e402:	4413      	add	r3, r2
 801e404:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801e408:	681b      	ldr	r3, [r3, #0]
 801e40a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 801e40e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 801e412:	d11f      	bne.n	801e454 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 801e414:	68bb      	ldr	r3, [r7, #8]
 801e416:	015a      	lsls	r2, r3, #5
 801e418:	68fb      	ldr	r3, [r7, #12]
 801e41a:	4413      	add	r3, r2
 801e41c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801e420:	681b      	ldr	r3, [r3, #0]
 801e422:	68ba      	ldr	r2, [r7, #8]
 801e424:	0151      	lsls	r1, r2, #5
 801e426:	68fa      	ldr	r2, [r7, #12]
 801e428:	440a      	add	r2, r1
 801e42a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801e42e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 801e432:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 801e434:	68bb      	ldr	r3, [r7, #8]
 801e436:	015a      	lsls	r2, r3, #5
 801e438:	68fb      	ldr	r3, [r7, #12]
 801e43a:	4413      	add	r3, r2
 801e43c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801e440:	681b      	ldr	r3, [r3, #0]
 801e442:	68ba      	ldr	r2, [r7, #8]
 801e444:	0151      	lsls	r1, r2, #5
 801e446:	68fa      	ldr	r2, [r7, #12]
 801e448:	440a      	add	r2, r1
 801e44a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801e44e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 801e452:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 801e454:	68fb      	ldr	r3, [r7, #12]
 801e456:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801e45a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 801e45c:	683b      	ldr	r3, [r7, #0]
 801e45e:	781b      	ldrb	r3, [r3, #0]
 801e460:	f003 030f 	and.w	r3, r3, #15
 801e464:	2101      	movs	r1, #1
 801e466:	fa01 f303 	lsl.w	r3, r1, r3
 801e46a:	041b      	lsls	r3, r3, #16
 801e46c:	43db      	mvns	r3, r3
 801e46e:	68f9      	ldr	r1, [r7, #12]
 801e470:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 801e474:	4013      	ands	r3, r2
 801e476:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 801e478:	68fb      	ldr	r3, [r7, #12]
 801e47a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801e47e:	69da      	ldr	r2, [r3, #28]
 801e480:	683b      	ldr	r3, [r7, #0]
 801e482:	781b      	ldrb	r3, [r3, #0]
 801e484:	f003 030f 	and.w	r3, r3, #15
 801e488:	2101      	movs	r1, #1
 801e48a:	fa01 f303 	lsl.w	r3, r1, r3
 801e48e:	041b      	lsls	r3, r3, #16
 801e490:	43db      	mvns	r3, r3
 801e492:	68f9      	ldr	r1, [r7, #12]
 801e494:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 801e498:	4013      	ands	r3, r2
 801e49a:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 801e49c:	68bb      	ldr	r3, [r7, #8]
 801e49e:	015a      	lsls	r2, r3, #5
 801e4a0:	68fb      	ldr	r3, [r7, #12]
 801e4a2:	4413      	add	r3, r2
 801e4a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801e4a8:	681a      	ldr	r2, [r3, #0]
 801e4aa:	68bb      	ldr	r3, [r7, #8]
 801e4ac:	0159      	lsls	r1, r3, #5
 801e4ae:	68fb      	ldr	r3, [r7, #12]
 801e4b0:	440b      	add	r3, r1
 801e4b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801e4b6:	4619      	mov	r1, r3
 801e4b8:	4b05      	ldr	r3, [pc, #20]	; (801e4d0 <USB_DeactivateEndpoint+0x1b4>)
 801e4ba:	4013      	ands	r3, r2
 801e4bc:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 801e4be:	2300      	movs	r3, #0
}
 801e4c0:	4618      	mov	r0, r3
 801e4c2:	3714      	adds	r7, #20
 801e4c4:	46bd      	mov	sp, r7
 801e4c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e4ca:	4770      	bx	lr
 801e4cc:	ec337800 	.word	0xec337800
 801e4d0:	eff37800 	.word	0xeff37800

0801e4d4 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 801e4d4:	b580      	push	{r7, lr}
 801e4d6:	b08a      	sub	sp, #40	; 0x28
 801e4d8:	af02      	add	r7, sp, #8
 801e4da:	60f8      	str	r0, [r7, #12]
 801e4dc:	60b9      	str	r1, [r7, #8]
 801e4de:	4613      	mov	r3, r2
 801e4e0:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801e4e2:	68fb      	ldr	r3, [r7, #12]
 801e4e4:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 801e4e6:	68bb      	ldr	r3, [r7, #8]
 801e4e8:	781b      	ldrb	r3, [r3, #0]
 801e4ea:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 801e4ec:	68bb      	ldr	r3, [r7, #8]
 801e4ee:	785b      	ldrb	r3, [r3, #1]
 801e4f0:	2b01      	cmp	r3, #1
 801e4f2:	f040 815c 	bne.w	801e7ae <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 801e4f6:	68bb      	ldr	r3, [r7, #8]
 801e4f8:	695b      	ldr	r3, [r3, #20]
 801e4fa:	2b00      	cmp	r3, #0
 801e4fc:	d132      	bne.n	801e564 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 801e4fe:	69bb      	ldr	r3, [r7, #24]
 801e500:	015a      	lsls	r2, r3, #5
 801e502:	69fb      	ldr	r3, [r7, #28]
 801e504:	4413      	add	r3, r2
 801e506:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801e50a:	691b      	ldr	r3, [r3, #16]
 801e50c:	69ba      	ldr	r2, [r7, #24]
 801e50e:	0151      	lsls	r1, r2, #5
 801e510:	69fa      	ldr	r2, [r7, #28]
 801e512:	440a      	add	r2, r1
 801e514:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801e518:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 801e51c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 801e520:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 801e522:	69bb      	ldr	r3, [r7, #24]
 801e524:	015a      	lsls	r2, r3, #5
 801e526:	69fb      	ldr	r3, [r7, #28]
 801e528:	4413      	add	r3, r2
 801e52a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801e52e:	691b      	ldr	r3, [r3, #16]
 801e530:	69ba      	ldr	r2, [r7, #24]
 801e532:	0151      	lsls	r1, r2, #5
 801e534:	69fa      	ldr	r2, [r7, #28]
 801e536:	440a      	add	r2, r1
 801e538:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801e53c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 801e540:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 801e542:	69bb      	ldr	r3, [r7, #24]
 801e544:	015a      	lsls	r2, r3, #5
 801e546:	69fb      	ldr	r3, [r7, #28]
 801e548:	4413      	add	r3, r2
 801e54a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801e54e:	691b      	ldr	r3, [r3, #16]
 801e550:	69ba      	ldr	r2, [r7, #24]
 801e552:	0151      	lsls	r1, r2, #5
 801e554:	69fa      	ldr	r2, [r7, #28]
 801e556:	440a      	add	r2, r1
 801e558:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801e55c:	0cdb      	lsrs	r3, r3, #19
 801e55e:	04db      	lsls	r3, r3, #19
 801e560:	6113      	str	r3, [r2, #16]
 801e562:	e074      	b.n	801e64e <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 801e564:	69bb      	ldr	r3, [r7, #24]
 801e566:	015a      	lsls	r2, r3, #5
 801e568:	69fb      	ldr	r3, [r7, #28]
 801e56a:	4413      	add	r3, r2
 801e56c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801e570:	691b      	ldr	r3, [r3, #16]
 801e572:	69ba      	ldr	r2, [r7, #24]
 801e574:	0151      	lsls	r1, r2, #5
 801e576:	69fa      	ldr	r2, [r7, #28]
 801e578:	440a      	add	r2, r1
 801e57a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801e57e:	0cdb      	lsrs	r3, r3, #19
 801e580:	04db      	lsls	r3, r3, #19
 801e582:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 801e584:	69bb      	ldr	r3, [r7, #24]
 801e586:	015a      	lsls	r2, r3, #5
 801e588:	69fb      	ldr	r3, [r7, #28]
 801e58a:	4413      	add	r3, r2
 801e58c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801e590:	691b      	ldr	r3, [r3, #16]
 801e592:	69ba      	ldr	r2, [r7, #24]
 801e594:	0151      	lsls	r1, r2, #5
 801e596:	69fa      	ldr	r2, [r7, #28]
 801e598:	440a      	add	r2, r1
 801e59a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801e59e:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 801e5a2:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 801e5a6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 801e5a8:	69bb      	ldr	r3, [r7, #24]
 801e5aa:	015a      	lsls	r2, r3, #5
 801e5ac:	69fb      	ldr	r3, [r7, #28]
 801e5ae:	4413      	add	r3, r2
 801e5b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801e5b4:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 801e5b6:	68bb      	ldr	r3, [r7, #8]
 801e5b8:	6959      	ldr	r1, [r3, #20]
 801e5ba:	68bb      	ldr	r3, [r7, #8]
 801e5bc:	689b      	ldr	r3, [r3, #8]
 801e5be:	440b      	add	r3, r1
 801e5c0:	1e59      	subs	r1, r3, #1
 801e5c2:	68bb      	ldr	r3, [r7, #8]
 801e5c4:	689b      	ldr	r3, [r3, #8]
 801e5c6:	fbb1 f3f3 	udiv	r3, r1, r3
 801e5ca:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 801e5cc:	4b9d      	ldr	r3, [pc, #628]	; (801e844 <USB_EPStartXfer+0x370>)
 801e5ce:	400b      	ands	r3, r1
 801e5d0:	69b9      	ldr	r1, [r7, #24]
 801e5d2:	0148      	lsls	r0, r1, #5
 801e5d4:	69f9      	ldr	r1, [r7, #28]
 801e5d6:	4401      	add	r1, r0
 801e5d8:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 801e5dc:	4313      	orrs	r3, r2
 801e5de:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 801e5e0:	69bb      	ldr	r3, [r7, #24]
 801e5e2:	015a      	lsls	r2, r3, #5
 801e5e4:	69fb      	ldr	r3, [r7, #28]
 801e5e6:	4413      	add	r3, r2
 801e5e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801e5ec:	691a      	ldr	r2, [r3, #16]
 801e5ee:	68bb      	ldr	r3, [r7, #8]
 801e5f0:	695b      	ldr	r3, [r3, #20]
 801e5f2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 801e5f6:	69b9      	ldr	r1, [r7, #24]
 801e5f8:	0148      	lsls	r0, r1, #5
 801e5fa:	69f9      	ldr	r1, [r7, #28]
 801e5fc:	4401      	add	r1, r0
 801e5fe:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 801e602:	4313      	orrs	r3, r2
 801e604:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 801e606:	68bb      	ldr	r3, [r7, #8]
 801e608:	78db      	ldrb	r3, [r3, #3]
 801e60a:	2b01      	cmp	r3, #1
 801e60c:	d11f      	bne.n	801e64e <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 801e60e:	69bb      	ldr	r3, [r7, #24]
 801e610:	015a      	lsls	r2, r3, #5
 801e612:	69fb      	ldr	r3, [r7, #28]
 801e614:	4413      	add	r3, r2
 801e616:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801e61a:	691b      	ldr	r3, [r3, #16]
 801e61c:	69ba      	ldr	r2, [r7, #24]
 801e61e:	0151      	lsls	r1, r2, #5
 801e620:	69fa      	ldr	r2, [r7, #28]
 801e622:	440a      	add	r2, r1
 801e624:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801e628:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 801e62c:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 801e62e:	69bb      	ldr	r3, [r7, #24]
 801e630:	015a      	lsls	r2, r3, #5
 801e632:	69fb      	ldr	r3, [r7, #28]
 801e634:	4413      	add	r3, r2
 801e636:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801e63a:	691b      	ldr	r3, [r3, #16]
 801e63c:	69ba      	ldr	r2, [r7, #24]
 801e63e:	0151      	lsls	r1, r2, #5
 801e640:	69fa      	ldr	r2, [r7, #28]
 801e642:	440a      	add	r2, r1
 801e644:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801e648:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 801e64c:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 801e64e:	79fb      	ldrb	r3, [r7, #7]
 801e650:	2b01      	cmp	r3, #1
 801e652:	d14b      	bne.n	801e6ec <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 801e654:	68bb      	ldr	r3, [r7, #8]
 801e656:	691b      	ldr	r3, [r3, #16]
 801e658:	2b00      	cmp	r3, #0
 801e65a:	d009      	beq.n	801e670 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 801e65c:	69bb      	ldr	r3, [r7, #24]
 801e65e:	015a      	lsls	r2, r3, #5
 801e660:	69fb      	ldr	r3, [r7, #28]
 801e662:	4413      	add	r3, r2
 801e664:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801e668:	461a      	mov	r2, r3
 801e66a:	68bb      	ldr	r3, [r7, #8]
 801e66c:	691b      	ldr	r3, [r3, #16]
 801e66e:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 801e670:	68bb      	ldr	r3, [r7, #8]
 801e672:	78db      	ldrb	r3, [r3, #3]
 801e674:	2b01      	cmp	r3, #1
 801e676:	d128      	bne.n	801e6ca <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 801e678:	69fb      	ldr	r3, [r7, #28]
 801e67a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801e67e:	689b      	ldr	r3, [r3, #8]
 801e680:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801e684:	2b00      	cmp	r3, #0
 801e686:	d110      	bne.n	801e6aa <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 801e688:	69bb      	ldr	r3, [r7, #24]
 801e68a:	015a      	lsls	r2, r3, #5
 801e68c:	69fb      	ldr	r3, [r7, #28]
 801e68e:	4413      	add	r3, r2
 801e690:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801e694:	681b      	ldr	r3, [r3, #0]
 801e696:	69ba      	ldr	r2, [r7, #24]
 801e698:	0151      	lsls	r1, r2, #5
 801e69a:	69fa      	ldr	r2, [r7, #28]
 801e69c:	440a      	add	r2, r1
 801e69e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801e6a2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 801e6a6:	6013      	str	r3, [r2, #0]
 801e6a8:	e00f      	b.n	801e6ca <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 801e6aa:	69bb      	ldr	r3, [r7, #24]
 801e6ac:	015a      	lsls	r2, r3, #5
 801e6ae:	69fb      	ldr	r3, [r7, #28]
 801e6b0:	4413      	add	r3, r2
 801e6b2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801e6b6:	681b      	ldr	r3, [r3, #0]
 801e6b8:	69ba      	ldr	r2, [r7, #24]
 801e6ba:	0151      	lsls	r1, r2, #5
 801e6bc:	69fa      	ldr	r2, [r7, #28]
 801e6be:	440a      	add	r2, r1
 801e6c0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801e6c4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 801e6c8:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 801e6ca:	69bb      	ldr	r3, [r7, #24]
 801e6cc:	015a      	lsls	r2, r3, #5
 801e6ce:	69fb      	ldr	r3, [r7, #28]
 801e6d0:	4413      	add	r3, r2
 801e6d2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801e6d6:	681b      	ldr	r3, [r3, #0]
 801e6d8:	69ba      	ldr	r2, [r7, #24]
 801e6da:	0151      	lsls	r1, r2, #5
 801e6dc:	69fa      	ldr	r2, [r7, #28]
 801e6de:	440a      	add	r2, r1
 801e6e0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801e6e4:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 801e6e8:	6013      	str	r3, [r2, #0]
 801e6ea:	e12f      	b.n	801e94c <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 801e6ec:	69bb      	ldr	r3, [r7, #24]
 801e6ee:	015a      	lsls	r2, r3, #5
 801e6f0:	69fb      	ldr	r3, [r7, #28]
 801e6f2:	4413      	add	r3, r2
 801e6f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801e6f8:	681b      	ldr	r3, [r3, #0]
 801e6fa:	69ba      	ldr	r2, [r7, #24]
 801e6fc:	0151      	lsls	r1, r2, #5
 801e6fe:	69fa      	ldr	r2, [r7, #28]
 801e700:	440a      	add	r2, r1
 801e702:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801e706:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 801e70a:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 801e70c:	68bb      	ldr	r3, [r7, #8]
 801e70e:	78db      	ldrb	r3, [r3, #3]
 801e710:	2b01      	cmp	r3, #1
 801e712:	d015      	beq.n	801e740 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 801e714:	68bb      	ldr	r3, [r7, #8]
 801e716:	695b      	ldr	r3, [r3, #20]
 801e718:	2b00      	cmp	r3, #0
 801e71a:	f000 8117 	beq.w	801e94c <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 801e71e:	69fb      	ldr	r3, [r7, #28]
 801e720:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801e724:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 801e726:	68bb      	ldr	r3, [r7, #8]
 801e728:	781b      	ldrb	r3, [r3, #0]
 801e72a:	f003 030f 	and.w	r3, r3, #15
 801e72e:	2101      	movs	r1, #1
 801e730:	fa01 f303 	lsl.w	r3, r1, r3
 801e734:	69f9      	ldr	r1, [r7, #28]
 801e736:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 801e73a:	4313      	orrs	r3, r2
 801e73c:	634b      	str	r3, [r1, #52]	; 0x34
 801e73e:	e105      	b.n	801e94c <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 801e740:	69fb      	ldr	r3, [r7, #28]
 801e742:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801e746:	689b      	ldr	r3, [r3, #8]
 801e748:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801e74c:	2b00      	cmp	r3, #0
 801e74e:	d110      	bne.n	801e772 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 801e750:	69bb      	ldr	r3, [r7, #24]
 801e752:	015a      	lsls	r2, r3, #5
 801e754:	69fb      	ldr	r3, [r7, #28]
 801e756:	4413      	add	r3, r2
 801e758:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801e75c:	681b      	ldr	r3, [r3, #0]
 801e75e:	69ba      	ldr	r2, [r7, #24]
 801e760:	0151      	lsls	r1, r2, #5
 801e762:	69fa      	ldr	r2, [r7, #28]
 801e764:	440a      	add	r2, r1
 801e766:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801e76a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 801e76e:	6013      	str	r3, [r2, #0]
 801e770:	e00f      	b.n	801e792 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 801e772:	69bb      	ldr	r3, [r7, #24]
 801e774:	015a      	lsls	r2, r3, #5
 801e776:	69fb      	ldr	r3, [r7, #28]
 801e778:	4413      	add	r3, r2
 801e77a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801e77e:	681b      	ldr	r3, [r3, #0]
 801e780:	69ba      	ldr	r2, [r7, #24]
 801e782:	0151      	lsls	r1, r2, #5
 801e784:	69fa      	ldr	r2, [r7, #28]
 801e786:	440a      	add	r2, r1
 801e788:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801e78c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 801e790:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 801e792:	68bb      	ldr	r3, [r7, #8]
 801e794:	68d9      	ldr	r1, [r3, #12]
 801e796:	68bb      	ldr	r3, [r7, #8]
 801e798:	781a      	ldrb	r2, [r3, #0]
 801e79a:	68bb      	ldr	r3, [r7, #8]
 801e79c:	695b      	ldr	r3, [r3, #20]
 801e79e:	b298      	uxth	r0, r3
 801e7a0:	79fb      	ldrb	r3, [r7, #7]
 801e7a2:	9300      	str	r3, [sp, #0]
 801e7a4:	4603      	mov	r3, r0
 801e7a6:	68f8      	ldr	r0, [r7, #12]
 801e7a8:	f000 fa2b 	bl	801ec02 <USB_WritePacket>
 801e7ac:	e0ce      	b.n	801e94c <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 801e7ae:	69bb      	ldr	r3, [r7, #24]
 801e7b0:	015a      	lsls	r2, r3, #5
 801e7b2:	69fb      	ldr	r3, [r7, #28]
 801e7b4:	4413      	add	r3, r2
 801e7b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801e7ba:	691b      	ldr	r3, [r3, #16]
 801e7bc:	69ba      	ldr	r2, [r7, #24]
 801e7be:	0151      	lsls	r1, r2, #5
 801e7c0:	69fa      	ldr	r2, [r7, #28]
 801e7c2:	440a      	add	r2, r1
 801e7c4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801e7c8:	0cdb      	lsrs	r3, r3, #19
 801e7ca:	04db      	lsls	r3, r3, #19
 801e7cc:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 801e7ce:	69bb      	ldr	r3, [r7, #24]
 801e7d0:	015a      	lsls	r2, r3, #5
 801e7d2:	69fb      	ldr	r3, [r7, #28]
 801e7d4:	4413      	add	r3, r2
 801e7d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801e7da:	691b      	ldr	r3, [r3, #16]
 801e7dc:	69ba      	ldr	r2, [r7, #24]
 801e7de:	0151      	lsls	r1, r2, #5
 801e7e0:	69fa      	ldr	r2, [r7, #28]
 801e7e2:	440a      	add	r2, r1
 801e7e4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801e7e8:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 801e7ec:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 801e7f0:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 801e7f2:	68bb      	ldr	r3, [r7, #8]
 801e7f4:	695b      	ldr	r3, [r3, #20]
 801e7f6:	2b00      	cmp	r3, #0
 801e7f8:	d126      	bne.n	801e848 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 801e7fa:	69bb      	ldr	r3, [r7, #24]
 801e7fc:	015a      	lsls	r2, r3, #5
 801e7fe:	69fb      	ldr	r3, [r7, #28]
 801e800:	4413      	add	r3, r2
 801e802:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801e806:	691a      	ldr	r2, [r3, #16]
 801e808:	68bb      	ldr	r3, [r7, #8]
 801e80a:	689b      	ldr	r3, [r3, #8]
 801e80c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 801e810:	69b9      	ldr	r1, [r7, #24]
 801e812:	0148      	lsls	r0, r1, #5
 801e814:	69f9      	ldr	r1, [r7, #28]
 801e816:	4401      	add	r1, r0
 801e818:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 801e81c:	4313      	orrs	r3, r2
 801e81e:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 801e820:	69bb      	ldr	r3, [r7, #24]
 801e822:	015a      	lsls	r2, r3, #5
 801e824:	69fb      	ldr	r3, [r7, #28]
 801e826:	4413      	add	r3, r2
 801e828:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801e82c:	691b      	ldr	r3, [r3, #16]
 801e82e:	69ba      	ldr	r2, [r7, #24]
 801e830:	0151      	lsls	r1, r2, #5
 801e832:	69fa      	ldr	r2, [r7, #28]
 801e834:	440a      	add	r2, r1
 801e836:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801e83a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 801e83e:	6113      	str	r3, [r2, #16]
 801e840:	e036      	b.n	801e8b0 <USB_EPStartXfer+0x3dc>
 801e842:	bf00      	nop
 801e844:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 801e848:	68bb      	ldr	r3, [r7, #8]
 801e84a:	695a      	ldr	r2, [r3, #20]
 801e84c:	68bb      	ldr	r3, [r7, #8]
 801e84e:	689b      	ldr	r3, [r3, #8]
 801e850:	4413      	add	r3, r2
 801e852:	1e5a      	subs	r2, r3, #1
 801e854:	68bb      	ldr	r3, [r7, #8]
 801e856:	689b      	ldr	r3, [r3, #8]
 801e858:	fbb2 f3f3 	udiv	r3, r2, r3
 801e85c:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 801e85e:	69bb      	ldr	r3, [r7, #24]
 801e860:	015a      	lsls	r2, r3, #5
 801e862:	69fb      	ldr	r3, [r7, #28]
 801e864:	4413      	add	r3, r2
 801e866:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801e86a:	691a      	ldr	r2, [r3, #16]
 801e86c:	8afb      	ldrh	r3, [r7, #22]
 801e86e:	04d9      	lsls	r1, r3, #19
 801e870:	4b39      	ldr	r3, [pc, #228]	; (801e958 <USB_EPStartXfer+0x484>)
 801e872:	400b      	ands	r3, r1
 801e874:	69b9      	ldr	r1, [r7, #24]
 801e876:	0148      	lsls	r0, r1, #5
 801e878:	69f9      	ldr	r1, [r7, #28]
 801e87a:	4401      	add	r1, r0
 801e87c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 801e880:	4313      	orrs	r3, r2
 801e882:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 801e884:	69bb      	ldr	r3, [r7, #24]
 801e886:	015a      	lsls	r2, r3, #5
 801e888:	69fb      	ldr	r3, [r7, #28]
 801e88a:	4413      	add	r3, r2
 801e88c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801e890:	691a      	ldr	r2, [r3, #16]
 801e892:	68bb      	ldr	r3, [r7, #8]
 801e894:	689b      	ldr	r3, [r3, #8]
 801e896:	8af9      	ldrh	r1, [r7, #22]
 801e898:	fb01 f303 	mul.w	r3, r1, r3
 801e89c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 801e8a0:	69b9      	ldr	r1, [r7, #24]
 801e8a2:	0148      	lsls	r0, r1, #5
 801e8a4:	69f9      	ldr	r1, [r7, #28]
 801e8a6:	4401      	add	r1, r0
 801e8a8:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 801e8ac:	4313      	orrs	r3, r2
 801e8ae:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 801e8b0:	79fb      	ldrb	r3, [r7, #7]
 801e8b2:	2b01      	cmp	r3, #1
 801e8b4:	d10d      	bne.n	801e8d2 <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 801e8b6:	68bb      	ldr	r3, [r7, #8]
 801e8b8:	68db      	ldr	r3, [r3, #12]
 801e8ba:	2b00      	cmp	r3, #0
 801e8bc:	d009      	beq.n	801e8d2 <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 801e8be:	68bb      	ldr	r3, [r7, #8]
 801e8c0:	68d9      	ldr	r1, [r3, #12]
 801e8c2:	69bb      	ldr	r3, [r7, #24]
 801e8c4:	015a      	lsls	r2, r3, #5
 801e8c6:	69fb      	ldr	r3, [r7, #28]
 801e8c8:	4413      	add	r3, r2
 801e8ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801e8ce:	460a      	mov	r2, r1
 801e8d0:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 801e8d2:	68bb      	ldr	r3, [r7, #8]
 801e8d4:	78db      	ldrb	r3, [r3, #3]
 801e8d6:	2b01      	cmp	r3, #1
 801e8d8:	d128      	bne.n	801e92c <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 801e8da:	69fb      	ldr	r3, [r7, #28]
 801e8dc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801e8e0:	689b      	ldr	r3, [r3, #8]
 801e8e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801e8e6:	2b00      	cmp	r3, #0
 801e8e8:	d110      	bne.n	801e90c <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 801e8ea:	69bb      	ldr	r3, [r7, #24]
 801e8ec:	015a      	lsls	r2, r3, #5
 801e8ee:	69fb      	ldr	r3, [r7, #28]
 801e8f0:	4413      	add	r3, r2
 801e8f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801e8f6:	681b      	ldr	r3, [r3, #0]
 801e8f8:	69ba      	ldr	r2, [r7, #24]
 801e8fa:	0151      	lsls	r1, r2, #5
 801e8fc:	69fa      	ldr	r2, [r7, #28]
 801e8fe:	440a      	add	r2, r1
 801e900:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801e904:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 801e908:	6013      	str	r3, [r2, #0]
 801e90a:	e00f      	b.n	801e92c <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 801e90c:	69bb      	ldr	r3, [r7, #24]
 801e90e:	015a      	lsls	r2, r3, #5
 801e910:	69fb      	ldr	r3, [r7, #28]
 801e912:	4413      	add	r3, r2
 801e914:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801e918:	681b      	ldr	r3, [r3, #0]
 801e91a:	69ba      	ldr	r2, [r7, #24]
 801e91c:	0151      	lsls	r1, r2, #5
 801e91e:	69fa      	ldr	r2, [r7, #28]
 801e920:	440a      	add	r2, r1
 801e922:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801e926:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 801e92a:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 801e92c:	69bb      	ldr	r3, [r7, #24]
 801e92e:	015a      	lsls	r2, r3, #5
 801e930:	69fb      	ldr	r3, [r7, #28]
 801e932:	4413      	add	r3, r2
 801e934:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801e938:	681b      	ldr	r3, [r3, #0]
 801e93a:	69ba      	ldr	r2, [r7, #24]
 801e93c:	0151      	lsls	r1, r2, #5
 801e93e:	69fa      	ldr	r2, [r7, #28]
 801e940:	440a      	add	r2, r1
 801e942:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801e946:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 801e94a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 801e94c:	2300      	movs	r3, #0
}
 801e94e:	4618      	mov	r0, r3
 801e950:	3720      	adds	r7, #32
 801e952:	46bd      	mov	sp, r7
 801e954:	bd80      	pop	{r7, pc}
 801e956:	bf00      	nop
 801e958:	1ff80000 	.word	0x1ff80000

0801e95c <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 801e95c:	b480      	push	{r7}
 801e95e:	b087      	sub	sp, #28
 801e960:	af00      	add	r7, sp, #0
 801e962:	60f8      	str	r0, [r7, #12]
 801e964:	60b9      	str	r1, [r7, #8]
 801e966:	4613      	mov	r3, r2
 801e968:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801e96a:	68fb      	ldr	r3, [r7, #12]
 801e96c:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 801e96e:	68bb      	ldr	r3, [r7, #8]
 801e970:	781b      	ldrb	r3, [r3, #0]
 801e972:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 801e974:	68bb      	ldr	r3, [r7, #8]
 801e976:	785b      	ldrb	r3, [r3, #1]
 801e978:	2b01      	cmp	r3, #1
 801e97a:	f040 80cd 	bne.w	801eb18 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 801e97e:	68bb      	ldr	r3, [r7, #8]
 801e980:	695b      	ldr	r3, [r3, #20]
 801e982:	2b00      	cmp	r3, #0
 801e984:	d132      	bne.n	801e9ec <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 801e986:	693b      	ldr	r3, [r7, #16]
 801e988:	015a      	lsls	r2, r3, #5
 801e98a:	697b      	ldr	r3, [r7, #20]
 801e98c:	4413      	add	r3, r2
 801e98e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801e992:	691b      	ldr	r3, [r3, #16]
 801e994:	693a      	ldr	r2, [r7, #16]
 801e996:	0151      	lsls	r1, r2, #5
 801e998:	697a      	ldr	r2, [r7, #20]
 801e99a:	440a      	add	r2, r1
 801e99c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801e9a0:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 801e9a4:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 801e9a8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 801e9aa:	693b      	ldr	r3, [r7, #16]
 801e9ac:	015a      	lsls	r2, r3, #5
 801e9ae:	697b      	ldr	r3, [r7, #20]
 801e9b0:	4413      	add	r3, r2
 801e9b2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801e9b6:	691b      	ldr	r3, [r3, #16]
 801e9b8:	693a      	ldr	r2, [r7, #16]
 801e9ba:	0151      	lsls	r1, r2, #5
 801e9bc:	697a      	ldr	r2, [r7, #20]
 801e9be:	440a      	add	r2, r1
 801e9c0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801e9c4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 801e9c8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 801e9ca:	693b      	ldr	r3, [r7, #16]
 801e9cc:	015a      	lsls	r2, r3, #5
 801e9ce:	697b      	ldr	r3, [r7, #20]
 801e9d0:	4413      	add	r3, r2
 801e9d2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801e9d6:	691b      	ldr	r3, [r3, #16]
 801e9d8:	693a      	ldr	r2, [r7, #16]
 801e9da:	0151      	lsls	r1, r2, #5
 801e9dc:	697a      	ldr	r2, [r7, #20]
 801e9de:	440a      	add	r2, r1
 801e9e0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801e9e4:	0cdb      	lsrs	r3, r3, #19
 801e9e6:	04db      	lsls	r3, r3, #19
 801e9e8:	6113      	str	r3, [r2, #16]
 801e9ea:	e04e      	b.n	801ea8a <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 801e9ec:	693b      	ldr	r3, [r7, #16]
 801e9ee:	015a      	lsls	r2, r3, #5
 801e9f0:	697b      	ldr	r3, [r7, #20]
 801e9f2:	4413      	add	r3, r2
 801e9f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801e9f8:	691b      	ldr	r3, [r3, #16]
 801e9fa:	693a      	ldr	r2, [r7, #16]
 801e9fc:	0151      	lsls	r1, r2, #5
 801e9fe:	697a      	ldr	r2, [r7, #20]
 801ea00:	440a      	add	r2, r1
 801ea02:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801ea06:	0cdb      	lsrs	r3, r3, #19
 801ea08:	04db      	lsls	r3, r3, #19
 801ea0a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 801ea0c:	693b      	ldr	r3, [r7, #16]
 801ea0e:	015a      	lsls	r2, r3, #5
 801ea10:	697b      	ldr	r3, [r7, #20]
 801ea12:	4413      	add	r3, r2
 801ea14:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801ea18:	691b      	ldr	r3, [r3, #16]
 801ea1a:	693a      	ldr	r2, [r7, #16]
 801ea1c:	0151      	lsls	r1, r2, #5
 801ea1e:	697a      	ldr	r2, [r7, #20]
 801ea20:	440a      	add	r2, r1
 801ea22:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801ea26:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 801ea2a:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 801ea2e:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 801ea30:	68bb      	ldr	r3, [r7, #8]
 801ea32:	695a      	ldr	r2, [r3, #20]
 801ea34:	68bb      	ldr	r3, [r7, #8]
 801ea36:	689b      	ldr	r3, [r3, #8]
 801ea38:	429a      	cmp	r2, r3
 801ea3a:	d903      	bls.n	801ea44 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 801ea3c:	68bb      	ldr	r3, [r7, #8]
 801ea3e:	689a      	ldr	r2, [r3, #8]
 801ea40:	68bb      	ldr	r3, [r7, #8]
 801ea42:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 801ea44:	693b      	ldr	r3, [r7, #16]
 801ea46:	015a      	lsls	r2, r3, #5
 801ea48:	697b      	ldr	r3, [r7, #20]
 801ea4a:	4413      	add	r3, r2
 801ea4c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801ea50:	691b      	ldr	r3, [r3, #16]
 801ea52:	693a      	ldr	r2, [r7, #16]
 801ea54:	0151      	lsls	r1, r2, #5
 801ea56:	697a      	ldr	r2, [r7, #20]
 801ea58:	440a      	add	r2, r1
 801ea5a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801ea5e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 801ea62:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 801ea64:	693b      	ldr	r3, [r7, #16]
 801ea66:	015a      	lsls	r2, r3, #5
 801ea68:	697b      	ldr	r3, [r7, #20]
 801ea6a:	4413      	add	r3, r2
 801ea6c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801ea70:	691a      	ldr	r2, [r3, #16]
 801ea72:	68bb      	ldr	r3, [r7, #8]
 801ea74:	695b      	ldr	r3, [r3, #20]
 801ea76:	f3c3 0312 	ubfx	r3, r3, #0, #19
 801ea7a:	6939      	ldr	r1, [r7, #16]
 801ea7c:	0148      	lsls	r0, r1, #5
 801ea7e:	6979      	ldr	r1, [r7, #20]
 801ea80:	4401      	add	r1, r0
 801ea82:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 801ea86:	4313      	orrs	r3, r2
 801ea88:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 801ea8a:	79fb      	ldrb	r3, [r7, #7]
 801ea8c:	2b01      	cmp	r3, #1
 801ea8e:	d11e      	bne.n	801eace <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 801ea90:	68bb      	ldr	r3, [r7, #8]
 801ea92:	691b      	ldr	r3, [r3, #16]
 801ea94:	2b00      	cmp	r3, #0
 801ea96:	d009      	beq.n	801eaac <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 801ea98:	693b      	ldr	r3, [r7, #16]
 801ea9a:	015a      	lsls	r2, r3, #5
 801ea9c:	697b      	ldr	r3, [r7, #20]
 801ea9e:	4413      	add	r3, r2
 801eaa0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801eaa4:	461a      	mov	r2, r3
 801eaa6:	68bb      	ldr	r3, [r7, #8]
 801eaa8:	691b      	ldr	r3, [r3, #16]
 801eaaa:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 801eaac:	693b      	ldr	r3, [r7, #16]
 801eaae:	015a      	lsls	r2, r3, #5
 801eab0:	697b      	ldr	r3, [r7, #20]
 801eab2:	4413      	add	r3, r2
 801eab4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801eab8:	681b      	ldr	r3, [r3, #0]
 801eaba:	693a      	ldr	r2, [r7, #16]
 801eabc:	0151      	lsls	r1, r2, #5
 801eabe:	697a      	ldr	r2, [r7, #20]
 801eac0:	440a      	add	r2, r1
 801eac2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801eac6:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 801eaca:	6013      	str	r3, [r2, #0]
 801eacc:	e092      	b.n	801ebf4 <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 801eace:	693b      	ldr	r3, [r7, #16]
 801ead0:	015a      	lsls	r2, r3, #5
 801ead2:	697b      	ldr	r3, [r7, #20]
 801ead4:	4413      	add	r3, r2
 801ead6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801eada:	681b      	ldr	r3, [r3, #0]
 801eadc:	693a      	ldr	r2, [r7, #16]
 801eade:	0151      	lsls	r1, r2, #5
 801eae0:	697a      	ldr	r2, [r7, #20]
 801eae2:	440a      	add	r2, r1
 801eae4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801eae8:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 801eaec:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 801eaee:	68bb      	ldr	r3, [r7, #8]
 801eaf0:	695b      	ldr	r3, [r3, #20]
 801eaf2:	2b00      	cmp	r3, #0
 801eaf4:	d07e      	beq.n	801ebf4 <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 801eaf6:	697b      	ldr	r3, [r7, #20]
 801eaf8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801eafc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 801eafe:	68bb      	ldr	r3, [r7, #8]
 801eb00:	781b      	ldrb	r3, [r3, #0]
 801eb02:	f003 030f 	and.w	r3, r3, #15
 801eb06:	2101      	movs	r1, #1
 801eb08:	fa01 f303 	lsl.w	r3, r1, r3
 801eb0c:	6979      	ldr	r1, [r7, #20]
 801eb0e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 801eb12:	4313      	orrs	r3, r2
 801eb14:	634b      	str	r3, [r1, #52]	; 0x34
 801eb16:	e06d      	b.n	801ebf4 <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 801eb18:	693b      	ldr	r3, [r7, #16]
 801eb1a:	015a      	lsls	r2, r3, #5
 801eb1c:	697b      	ldr	r3, [r7, #20]
 801eb1e:	4413      	add	r3, r2
 801eb20:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801eb24:	691b      	ldr	r3, [r3, #16]
 801eb26:	693a      	ldr	r2, [r7, #16]
 801eb28:	0151      	lsls	r1, r2, #5
 801eb2a:	697a      	ldr	r2, [r7, #20]
 801eb2c:	440a      	add	r2, r1
 801eb2e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801eb32:	0cdb      	lsrs	r3, r3, #19
 801eb34:	04db      	lsls	r3, r3, #19
 801eb36:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 801eb38:	693b      	ldr	r3, [r7, #16]
 801eb3a:	015a      	lsls	r2, r3, #5
 801eb3c:	697b      	ldr	r3, [r7, #20]
 801eb3e:	4413      	add	r3, r2
 801eb40:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801eb44:	691b      	ldr	r3, [r3, #16]
 801eb46:	693a      	ldr	r2, [r7, #16]
 801eb48:	0151      	lsls	r1, r2, #5
 801eb4a:	697a      	ldr	r2, [r7, #20]
 801eb4c:	440a      	add	r2, r1
 801eb4e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801eb52:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 801eb56:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 801eb5a:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 801eb5c:	68bb      	ldr	r3, [r7, #8]
 801eb5e:	695b      	ldr	r3, [r3, #20]
 801eb60:	2b00      	cmp	r3, #0
 801eb62:	d003      	beq.n	801eb6c <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 801eb64:	68bb      	ldr	r3, [r7, #8]
 801eb66:	689a      	ldr	r2, [r3, #8]
 801eb68:	68bb      	ldr	r3, [r7, #8]
 801eb6a:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 801eb6c:	693b      	ldr	r3, [r7, #16]
 801eb6e:	015a      	lsls	r2, r3, #5
 801eb70:	697b      	ldr	r3, [r7, #20]
 801eb72:	4413      	add	r3, r2
 801eb74:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801eb78:	691b      	ldr	r3, [r3, #16]
 801eb7a:	693a      	ldr	r2, [r7, #16]
 801eb7c:	0151      	lsls	r1, r2, #5
 801eb7e:	697a      	ldr	r2, [r7, #20]
 801eb80:	440a      	add	r2, r1
 801eb82:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801eb86:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 801eb8a:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 801eb8c:	693b      	ldr	r3, [r7, #16]
 801eb8e:	015a      	lsls	r2, r3, #5
 801eb90:	697b      	ldr	r3, [r7, #20]
 801eb92:	4413      	add	r3, r2
 801eb94:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801eb98:	691a      	ldr	r2, [r3, #16]
 801eb9a:	68bb      	ldr	r3, [r7, #8]
 801eb9c:	689b      	ldr	r3, [r3, #8]
 801eb9e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 801eba2:	6939      	ldr	r1, [r7, #16]
 801eba4:	0148      	lsls	r0, r1, #5
 801eba6:	6979      	ldr	r1, [r7, #20]
 801eba8:	4401      	add	r1, r0
 801ebaa:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 801ebae:	4313      	orrs	r3, r2
 801ebb0:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 801ebb2:	79fb      	ldrb	r3, [r7, #7]
 801ebb4:	2b01      	cmp	r3, #1
 801ebb6:	d10d      	bne.n	801ebd4 <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 801ebb8:	68bb      	ldr	r3, [r7, #8]
 801ebba:	68db      	ldr	r3, [r3, #12]
 801ebbc:	2b00      	cmp	r3, #0
 801ebbe:	d009      	beq.n	801ebd4 <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 801ebc0:	68bb      	ldr	r3, [r7, #8]
 801ebc2:	68d9      	ldr	r1, [r3, #12]
 801ebc4:	693b      	ldr	r3, [r7, #16]
 801ebc6:	015a      	lsls	r2, r3, #5
 801ebc8:	697b      	ldr	r3, [r7, #20]
 801ebca:	4413      	add	r3, r2
 801ebcc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801ebd0:	460a      	mov	r2, r1
 801ebd2:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 801ebd4:	693b      	ldr	r3, [r7, #16]
 801ebd6:	015a      	lsls	r2, r3, #5
 801ebd8:	697b      	ldr	r3, [r7, #20]
 801ebda:	4413      	add	r3, r2
 801ebdc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801ebe0:	681b      	ldr	r3, [r3, #0]
 801ebe2:	693a      	ldr	r2, [r7, #16]
 801ebe4:	0151      	lsls	r1, r2, #5
 801ebe6:	697a      	ldr	r2, [r7, #20]
 801ebe8:	440a      	add	r2, r1
 801ebea:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801ebee:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 801ebf2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 801ebf4:	2300      	movs	r3, #0
}
 801ebf6:	4618      	mov	r0, r3
 801ebf8:	371c      	adds	r7, #28
 801ebfa:	46bd      	mov	sp, r7
 801ebfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ec00:	4770      	bx	lr

0801ec02 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 801ec02:	b480      	push	{r7}
 801ec04:	b089      	sub	sp, #36	; 0x24
 801ec06:	af00      	add	r7, sp, #0
 801ec08:	60f8      	str	r0, [r7, #12]
 801ec0a:	60b9      	str	r1, [r7, #8]
 801ec0c:	4611      	mov	r1, r2
 801ec0e:	461a      	mov	r2, r3
 801ec10:	460b      	mov	r3, r1
 801ec12:	71fb      	strb	r3, [r7, #7]
 801ec14:	4613      	mov	r3, r2
 801ec16:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801ec18:	68fb      	ldr	r3, [r7, #12]
 801ec1a:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 801ec1c:	68bb      	ldr	r3, [r7, #8]
 801ec1e:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 801ec20:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 801ec24:	2b00      	cmp	r3, #0
 801ec26:	d123      	bne.n	801ec70 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 801ec28:	88bb      	ldrh	r3, [r7, #4]
 801ec2a:	3303      	adds	r3, #3
 801ec2c:	089b      	lsrs	r3, r3, #2
 801ec2e:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 801ec30:	2300      	movs	r3, #0
 801ec32:	61bb      	str	r3, [r7, #24]
 801ec34:	e018      	b.n	801ec68 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 801ec36:	79fb      	ldrb	r3, [r7, #7]
 801ec38:	031a      	lsls	r2, r3, #12
 801ec3a:	697b      	ldr	r3, [r7, #20]
 801ec3c:	4413      	add	r3, r2
 801ec3e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801ec42:	461a      	mov	r2, r3
 801ec44:	69fb      	ldr	r3, [r7, #28]
 801ec46:	681b      	ldr	r3, [r3, #0]
 801ec48:	6013      	str	r3, [r2, #0]
      pSrc++;
 801ec4a:	69fb      	ldr	r3, [r7, #28]
 801ec4c:	3301      	adds	r3, #1
 801ec4e:	61fb      	str	r3, [r7, #28]
      pSrc++;
 801ec50:	69fb      	ldr	r3, [r7, #28]
 801ec52:	3301      	adds	r3, #1
 801ec54:	61fb      	str	r3, [r7, #28]
      pSrc++;
 801ec56:	69fb      	ldr	r3, [r7, #28]
 801ec58:	3301      	adds	r3, #1
 801ec5a:	61fb      	str	r3, [r7, #28]
      pSrc++;
 801ec5c:	69fb      	ldr	r3, [r7, #28]
 801ec5e:	3301      	adds	r3, #1
 801ec60:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 801ec62:	69bb      	ldr	r3, [r7, #24]
 801ec64:	3301      	adds	r3, #1
 801ec66:	61bb      	str	r3, [r7, #24]
 801ec68:	69ba      	ldr	r2, [r7, #24]
 801ec6a:	693b      	ldr	r3, [r7, #16]
 801ec6c:	429a      	cmp	r2, r3
 801ec6e:	d3e2      	bcc.n	801ec36 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 801ec70:	2300      	movs	r3, #0
}
 801ec72:	4618      	mov	r0, r3
 801ec74:	3724      	adds	r7, #36	; 0x24
 801ec76:	46bd      	mov	sp, r7
 801ec78:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ec7c:	4770      	bx	lr

0801ec7e <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 801ec7e:	b480      	push	{r7}
 801ec80:	b08b      	sub	sp, #44	; 0x2c
 801ec82:	af00      	add	r7, sp, #0
 801ec84:	60f8      	str	r0, [r7, #12]
 801ec86:	60b9      	str	r1, [r7, #8]
 801ec88:	4613      	mov	r3, r2
 801ec8a:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801ec8c:	68fb      	ldr	r3, [r7, #12]
 801ec8e:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 801ec90:	68bb      	ldr	r3, [r7, #8]
 801ec92:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 801ec94:	88fb      	ldrh	r3, [r7, #6]
 801ec96:	089b      	lsrs	r3, r3, #2
 801ec98:	b29b      	uxth	r3, r3
 801ec9a:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 801ec9c:	88fb      	ldrh	r3, [r7, #6]
 801ec9e:	f003 0303 	and.w	r3, r3, #3
 801eca2:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 801eca4:	2300      	movs	r3, #0
 801eca6:	623b      	str	r3, [r7, #32]
 801eca8:	e014      	b.n	801ecd4 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 801ecaa:	69bb      	ldr	r3, [r7, #24]
 801ecac:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801ecb0:	681a      	ldr	r2, [r3, #0]
 801ecb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ecb4:	601a      	str	r2, [r3, #0]
    pDest++;
 801ecb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ecb8:	3301      	adds	r3, #1
 801ecba:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 801ecbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ecbe:	3301      	adds	r3, #1
 801ecc0:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 801ecc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ecc4:	3301      	adds	r3, #1
 801ecc6:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 801ecc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ecca:	3301      	adds	r3, #1
 801eccc:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 801ecce:	6a3b      	ldr	r3, [r7, #32]
 801ecd0:	3301      	adds	r3, #1
 801ecd2:	623b      	str	r3, [r7, #32]
 801ecd4:	6a3a      	ldr	r2, [r7, #32]
 801ecd6:	697b      	ldr	r3, [r7, #20]
 801ecd8:	429a      	cmp	r2, r3
 801ecda:	d3e6      	bcc.n	801ecaa <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 801ecdc:	8bfb      	ldrh	r3, [r7, #30]
 801ecde:	2b00      	cmp	r3, #0
 801ece0:	d01e      	beq.n	801ed20 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 801ece2:	2300      	movs	r3, #0
 801ece4:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 801ece6:	69bb      	ldr	r3, [r7, #24]
 801ece8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801ecec:	461a      	mov	r2, r3
 801ecee:	f107 0310 	add.w	r3, r7, #16
 801ecf2:	6812      	ldr	r2, [r2, #0]
 801ecf4:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 801ecf6:	693a      	ldr	r2, [r7, #16]
 801ecf8:	6a3b      	ldr	r3, [r7, #32]
 801ecfa:	b2db      	uxtb	r3, r3
 801ecfc:	00db      	lsls	r3, r3, #3
 801ecfe:	fa22 f303 	lsr.w	r3, r2, r3
 801ed02:	b2da      	uxtb	r2, r3
 801ed04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ed06:	701a      	strb	r2, [r3, #0]
      i++;
 801ed08:	6a3b      	ldr	r3, [r7, #32]
 801ed0a:	3301      	adds	r3, #1
 801ed0c:	623b      	str	r3, [r7, #32]
      pDest++;
 801ed0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ed10:	3301      	adds	r3, #1
 801ed12:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 801ed14:	8bfb      	ldrh	r3, [r7, #30]
 801ed16:	3b01      	subs	r3, #1
 801ed18:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 801ed1a:	8bfb      	ldrh	r3, [r7, #30]
 801ed1c:	2b00      	cmp	r3, #0
 801ed1e:	d1ea      	bne.n	801ecf6 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 801ed20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 801ed22:	4618      	mov	r0, r3
 801ed24:	372c      	adds	r7, #44	; 0x2c
 801ed26:	46bd      	mov	sp, r7
 801ed28:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ed2c:	4770      	bx	lr

0801ed2e <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 801ed2e:	b480      	push	{r7}
 801ed30:	b085      	sub	sp, #20
 801ed32:	af00      	add	r7, sp, #0
 801ed34:	6078      	str	r0, [r7, #4]
 801ed36:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801ed38:	687b      	ldr	r3, [r7, #4]
 801ed3a:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 801ed3c:	683b      	ldr	r3, [r7, #0]
 801ed3e:	781b      	ldrb	r3, [r3, #0]
 801ed40:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 801ed42:	683b      	ldr	r3, [r7, #0]
 801ed44:	785b      	ldrb	r3, [r3, #1]
 801ed46:	2b01      	cmp	r3, #1
 801ed48:	d12c      	bne.n	801eda4 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 801ed4a:	68bb      	ldr	r3, [r7, #8]
 801ed4c:	015a      	lsls	r2, r3, #5
 801ed4e:	68fb      	ldr	r3, [r7, #12]
 801ed50:	4413      	add	r3, r2
 801ed52:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801ed56:	681b      	ldr	r3, [r3, #0]
 801ed58:	2b00      	cmp	r3, #0
 801ed5a:	db12      	blt.n	801ed82 <USB_EPSetStall+0x54>
 801ed5c:	68bb      	ldr	r3, [r7, #8]
 801ed5e:	2b00      	cmp	r3, #0
 801ed60:	d00f      	beq.n	801ed82 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 801ed62:	68bb      	ldr	r3, [r7, #8]
 801ed64:	015a      	lsls	r2, r3, #5
 801ed66:	68fb      	ldr	r3, [r7, #12]
 801ed68:	4413      	add	r3, r2
 801ed6a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801ed6e:	681b      	ldr	r3, [r3, #0]
 801ed70:	68ba      	ldr	r2, [r7, #8]
 801ed72:	0151      	lsls	r1, r2, #5
 801ed74:	68fa      	ldr	r2, [r7, #12]
 801ed76:	440a      	add	r2, r1
 801ed78:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801ed7c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 801ed80:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 801ed82:	68bb      	ldr	r3, [r7, #8]
 801ed84:	015a      	lsls	r2, r3, #5
 801ed86:	68fb      	ldr	r3, [r7, #12]
 801ed88:	4413      	add	r3, r2
 801ed8a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801ed8e:	681b      	ldr	r3, [r3, #0]
 801ed90:	68ba      	ldr	r2, [r7, #8]
 801ed92:	0151      	lsls	r1, r2, #5
 801ed94:	68fa      	ldr	r2, [r7, #12]
 801ed96:	440a      	add	r2, r1
 801ed98:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801ed9c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 801eda0:	6013      	str	r3, [r2, #0]
 801eda2:	e02b      	b.n	801edfc <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 801eda4:	68bb      	ldr	r3, [r7, #8]
 801eda6:	015a      	lsls	r2, r3, #5
 801eda8:	68fb      	ldr	r3, [r7, #12]
 801edaa:	4413      	add	r3, r2
 801edac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801edb0:	681b      	ldr	r3, [r3, #0]
 801edb2:	2b00      	cmp	r3, #0
 801edb4:	db12      	blt.n	801eddc <USB_EPSetStall+0xae>
 801edb6:	68bb      	ldr	r3, [r7, #8]
 801edb8:	2b00      	cmp	r3, #0
 801edba:	d00f      	beq.n	801eddc <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 801edbc:	68bb      	ldr	r3, [r7, #8]
 801edbe:	015a      	lsls	r2, r3, #5
 801edc0:	68fb      	ldr	r3, [r7, #12]
 801edc2:	4413      	add	r3, r2
 801edc4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801edc8:	681b      	ldr	r3, [r3, #0]
 801edca:	68ba      	ldr	r2, [r7, #8]
 801edcc:	0151      	lsls	r1, r2, #5
 801edce:	68fa      	ldr	r2, [r7, #12]
 801edd0:	440a      	add	r2, r1
 801edd2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801edd6:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 801edda:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 801eddc:	68bb      	ldr	r3, [r7, #8]
 801edde:	015a      	lsls	r2, r3, #5
 801ede0:	68fb      	ldr	r3, [r7, #12]
 801ede2:	4413      	add	r3, r2
 801ede4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801ede8:	681b      	ldr	r3, [r3, #0]
 801edea:	68ba      	ldr	r2, [r7, #8]
 801edec:	0151      	lsls	r1, r2, #5
 801edee:	68fa      	ldr	r2, [r7, #12]
 801edf0:	440a      	add	r2, r1
 801edf2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801edf6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 801edfa:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 801edfc:	2300      	movs	r3, #0
}
 801edfe:	4618      	mov	r0, r3
 801ee00:	3714      	adds	r7, #20
 801ee02:	46bd      	mov	sp, r7
 801ee04:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ee08:	4770      	bx	lr

0801ee0a <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 801ee0a:	b480      	push	{r7}
 801ee0c:	b085      	sub	sp, #20
 801ee0e:	af00      	add	r7, sp, #0
 801ee10:	6078      	str	r0, [r7, #4]
 801ee12:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801ee14:	687b      	ldr	r3, [r7, #4]
 801ee16:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 801ee18:	683b      	ldr	r3, [r7, #0]
 801ee1a:	781b      	ldrb	r3, [r3, #0]
 801ee1c:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 801ee1e:	683b      	ldr	r3, [r7, #0]
 801ee20:	785b      	ldrb	r3, [r3, #1]
 801ee22:	2b01      	cmp	r3, #1
 801ee24:	d128      	bne.n	801ee78 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 801ee26:	68bb      	ldr	r3, [r7, #8]
 801ee28:	015a      	lsls	r2, r3, #5
 801ee2a:	68fb      	ldr	r3, [r7, #12]
 801ee2c:	4413      	add	r3, r2
 801ee2e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801ee32:	681b      	ldr	r3, [r3, #0]
 801ee34:	68ba      	ldr	r2, [r7, #8]
 801ee36:	0151      	lsls	r1, r2, #5
 801ee38:	68fa      	ldr	r2, [r7, #12]
 801ee3a:	440a      	add	r2, r1
 801ee3c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801ee40:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 801ee44:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 801ee46:	683b      	ldr	r3, [r7, #0]
 801ee48:	78db      	ldrb	r3, [r3, #3]
 801ee4a:	2b03      	cmp	r3, #3
 801ee4c:	d003      	beq.n	801ee56 <USB_EPClearStall+0x4c>
 801ee4e:	683b      	ldr	r3, [r7, #0]
 801ee50:	78db      	ldrb	r3, [r3, #3]
 801ee52:	2b02      	cmp	r3, #2
 801ee54:	d138      	bne.n	801eec8 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 801ee56:	68bb      	ldr	r3, [r7, #8]
 801ee58:	015a      	lsls	r2, r3, #5
 801ee5a:	68fb      	ldr	r3, [r7, #12]
 801ee5c:	4413      	add	r3, r2
 801ee5e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801ee62:	681b      	ldr	r3, [r3, #0]
 801ee64:	68ba      	ldr	r2, [r7, #8]
 801ee66:	0151      	lsls	r1, r2, #5
 801ee68:	68fa      	ldr	r2, [r7, #12]
 801ee6a:	440a      	add	r2, r1
 801ee6c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801ee70:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 801ee74:	6013      	str	r3, [r2, #0]
 801ee76:	e027      	b.n	801eec8 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 801ee78:	68bb      	ldr	r3, [r7, #8]
 801ee7a:	015a      	lsls	r2, r3, #5
 801ee7c:	68fb      	ldr	r3, [r7, #12]
 801ee7e:	4413      	add	r3, r2
 801ee80:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801ee84:	681b      	ldr	r3, [r3, #0]
 801ee86:	68ba      	ldr	r2, [r7, #8]
 801ee88:	0151      	lsls	r1, r2, #5
 801ee8a:	68fa      	ldr	r2, [r7, #12]
 801ee8c:	440a      	add	r2, r1
 801ee8e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801ee92:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 801ee96:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 801ee98:	683b      	ldr	r3, [r7, #0]
 801ee9a:	78db      	ldrb	r3, [r3, #3]
 801ee9c:	2b03      	cmp	r3, #3
 801ee9e:	d003      	beq.n	801eea8 <USB_EPClearStall+0x9e>
 801eea0:	683b      	ldr	r3, [r7, #0]
 801eea2:	78db      	ldrb	r3, [r3, #3]
 801eea4:	2b02      	cmp	r3, #2
 801eea6:	d10f      	bne.n	801eec8 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 801eea8:	68bb      	ldr	r3, [r7, #8]
 801eeaa:	015a      	lsls	r2, r3, #5
 801eeac:	68fb      	ldr	r3, [r7, #12]
 801eeae:	4413      	add	r3, r2
 801eeb0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801eeb4:	681b      	ldr	r3, [r3, #0]
 801eeb6:	68ba      	ldr	r2, [r7, #8]
 801eeb8:	0151      	lsls	r1, r2, #5
 801eeba:	68fa      	ldr	r2, [r7, #12]
 801eebc:	440a      	add	r2, r1
 801eebe:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801eec2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 801eec6:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 801eec8:	2300      	movs	r3, #0
}
 801eeca:	4618      	mov	r0, r3
 801eecc:	3714      	adds	r7, #20
 801eece:	46bd      	mov	sp, r7
 801eed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 801eed4:	4770      	bx	lr

0801eed6 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 801eed6:	b480      	push	{r7}
 801eed8:	b085      	sub	sp, #20
 801eeda:	af00      	add	r7, sp, #0
 801eedc:	6078      	str	r0, [r7, #4]
 801eede:	460b      	mov	r3, r1
 801eee0:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801eee2:	687b      	ldr	r3, [r7, #4]
 801eee4:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 801eee6:	68fb      	ldr	r3, [r7, #12]
 801eee8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801eeec:	681b      	ldr	r3, [r3, #0]
 801eeee:	68fa      	ldr	r2, [r7, #12]
 801eef0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 801eef4:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 801eef8:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 801eefa:	68fb      	ldr	r3, [r7, #12]
 801eefc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801ef00:	681a      	ldr	r2, [r3, #0]
 801ef02:	78fb      	ldrb	r3, [r7, #3]
 801ef04:	011b      	lsls	r3, r3, #4
 801ef06:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 801ef0a:	68f9      	ldr	r1, [r7, #12]
 801ef0c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 801ef10:	4313      	orrs	r3, r2
 801ef12:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 801ef14:	2300      	movs	r3, #0
}
 801ef16:	4618      	mov	r0, r3
 801ef18:	3714      	adds	r7, #20
 801ef1a:	46bd      	mov	sp, r7
 801ef1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ef20:	4770      	bx	lr

0801ef22 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 801ef22:	b480      	push	{r7}
 801ef24:	b085      	sub	sp, #20
 801ef26:	af00      	add	r7, sp, #0
 801ef28:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801ef2a:	687b      	ldr	r3, [r7, #4]
 801ef2c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 801ef2e:	68fb      	ldr	r3, [r7, #12]
 801ef30:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 801ef34:	681b      	ldr	r3, [r3, #0]
 801ef36:	68fa      	ldr	r2, [r7, #12]
 801ef38:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 801ef3c:	f023 0303 	bic.w	r3, r3, #3
 801ef40:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 801ef42:	68fb      	ldr	r3, [r7, #12]
 801ef44:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801ef48:	685b      	ldr	r3, [r3, #4]
 801ef4a:	68fa      	ldr	r2, [r7, #12]
 801ef4c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 801ef50:	f023 0302 	bic.w	r3, r3, #2
 801ef54:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 801ef56:	2300      	movs	r3, #0
}
 801ef58:	4618      	mov	r0, r3
 801ef5a:	3714      	adds	r7, #20
 801ef5c:	46bd      	mov	sp, r7
 801ef5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ef62:	4770      	bx	lr

0801ef64 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 801ef64:	b480      	push	{r7}
 801ef66:	b085      	sub	sp, #20
 801ef68:	af00      	add	r7, sp, #0
 801ef6a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801ef6c:	687b      	ldr	r3, [r7, #4]
 801ef6e:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 801ef70:	68fb      	ldr	r3, [r7, #12]
 801ef72:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 801ef76:	681b      	ldr	r3, [r3, #0]
 801ef78:	68fa      	ldr	r2, [r7, #12]
 801ef7a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 801ef7e:	f023 0303 	bic.w	r3, r3, #3
 801ef82:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 801ef84:	68fb      	ldr	r3, [r7, #12]
 801ef86:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801ef8a:	685b      	ldr	r3, [r3, #4]
 801ef8c:	68fa      	ldr	r2, [r7, #12]
 801ef8e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 801ef92:	f043 0302 	orr.w	r3, r3, #2
 801ef96:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 801ef98:	2300      	movs	r3, #0
}
 801ef9a:	4618      	mov	r0, r3
 801ef9c:	3714      	adds	r7, #20
 801ef9e:	46bd      	mov	sp, r7
 801efa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 801efa4:	4770      	bx	lr

0801efa6 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 801efa6:	b480      	push	{r7}
 801efa8:	b085      	sub	sp, #20
 801efaa:	af00      	add	r7, sp, #0
 801efac:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 801efae:	687b      	ldr	r3, [r7, #4]
 801efb0:	695b      	ldr	r3, [r3, #20]
 801efb2:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 801efb4:	687b      	ldr	r3, [r7, #4]
 801efb6:	699b      	ldr	r3, [r3, #24]
 801efb8:	68fa      	ldr	r2, [r7, #12]
 801efba:	4013      	ands	r3, r2
 801efbc:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 801efbe:	68fb      	ldr	r3, [r7, #12]
}
 801efc0:	4618      	mov	r0, r3
 801efc2:	3714      	adds	r7, #20
 801efc4:	46bd      	mov	sp, r7
 801efc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801efca:	4770      	bx	lr

0801efcc <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 801efcc:	b480      	push	{r7}
 801efce:	b085      	sub	sp, #20
 801efd0:	af00      	add	r7, sp, #0
 801efd2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801efd4:	687b      	ldr	r3, [r7, #4]
 801efd6:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 801efd8:	68fb      	ldr	r3, [r7, #12]
 801efda:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801efde:	699b      	ldr	r3, [r3, #24]
 801efe0:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 801efe2:	68fb      	ldr	r3, [r7, #12]
 801efe4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801efe8:	69db      	ldr	r3, [r3, #28]
 801efea:	68ba      	ldr	r2, [r7, #8]
 801efec:	4013      	ands	r3, r2
 801efee:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 801eff0:	68bb      	ldr	r3, [r7, #8]
 801eff2:	0c1b      	lsrs	r3, r3, #16
}
 801eff4:	4618      	mov	r0, r3
 801eff6:	3714      	adds	r7, #20
 801eff8:	46bd      	mov	sp, r7
 801effa:	f85d 7b04 	ldr.w	r7, [sp], #4
 801effe:	4770      	bx	lr

0801f000 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 801f000:	b480      	push	{r7}
 801f002:	b085      	sub	sp, #20
 801f004:	af00      	add	r7, sp, #0
 801f006:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801f008:	687b      	ldr	r3, [r7, #4]
 801f00a:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 801f00c:	68fb      	ldr	r3, [r7, #12]
 801f00e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801f012:	699b      	ldr	r3, [r3, #24]
 801f014:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 801f016:	68fb      	ldr	r3, [r7, #12]
 801f018:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801f01c:	69db      	ldr	r3, [r3, #28]
 801f01e:	68ba      	ldr	r2, [r7, #8]
 801f020:	4013      	ands	r3, r2
 801f022:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 801f024:	68bb      	ldr	r3, [r7, #8]
 801f026:	b29b      	uxth	r3, r3
}
 801f028:	4618      	mov	r0, r3
 801f02a:	3714      	adds	r7, #20
 801f02c:	46bd      	mov	sp, r7
 801f02e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f032:	4770      	bx	lr

0801f034 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 801f034:	b480      	push	{r7}
 801f036:	b085      	sub	sp, #20
 801f038:	af00      	add	r7, sp, #0
 801f03a:	6078      	str	r0, [r7, #4]
 801f03c:	460b      	mov	r3, r1
 801f03e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801f040:	687b      	ldr	r3, [r7, #4]
 801f042:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 801f044:	78fb      	ldrb	r3, [r7, #3]
 801f046:	015a      	lsls	r2, r3, #5
 801f048:	68fb      	ldr	r3, [r7, #12]
 801f04a:	4413      	add	r3, r2
 801f04c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801f050:	689b      	ldr	r3, [r3, #8]
 801f052:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 801f054:	68fb      	ldr	r3, [r7, #12]
 801f056:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801f05a:	695b      	ldr	r3, [r3, #20]
 801f05c:	68ba      	ldr	r2, [r7, #8]
 801f05e:	4013      	ands	r3, r2
 801f060:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 801f062:	68bb      	ldr	r3, [r7, #8]
}
 801f064:	4618      	mov	r0, r3
 801f066:	3714      	adds	r7, #20
 801f068:	46bd      	mov	sp, r7
 801f06a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f06e:	4770      	bx	lr

0801f070 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 801f070:	b480      	push	{r7}
 801f072:	b087      	sub	sp, #28
 801f074:	af00      	add	r7, sp, #0
 801f076:	6078      	str	r0, [r7, #4]
 801f078:	460b      	mov	r3, r1
 801f07a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801f07c:	687b      	ldr	r3, [r7, #4]
 801f07e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 801f080:	697b      	ldr	r3, [r7, #20]
 801f082:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801f086:	691b      	ldr	r3, [r3, #16]
 801f088:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 801f08a:	697b      	ldr	r3, [r7, #20]
 801f08c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801f090:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801f092:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 801f094:	78fb      	ldrb	r3, [r7, #3]
 801f096:	f003 030f 	and.w	r3, r3, #15
 801f09a:	68fa      	ldr	r2, [r7, #12]
 801f09c:	fa22 f303 	lsr.w	r3, r2, r3
 801f0a0:	01db      	lsls	r3, r3, #7
 801f0a2:	b2db      	uxtb	r3, r3
 801f0a4:	693a      	ldr	r2, [r7, #16]
 801f0a6:	4313      	orrs	r3, r2
 801f0a8:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 801f0aa:	78fb      	ldrb	r3, [r7, #3]
 801f0ac:	015a      	lsls	r2, r3, #5
 801f0ae:	697b      	ldr	r3, [r7, #20]
 801f0b0:	4413      	add	r3, r2
 801f0b2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801f0b6:	689b      	ldr	r3, [r3, #8]
 801f0b8:	693a      	ldr	r2, [r7, #16]
 801f0ba:	4013      	ands	r3, r2
 801f0bc:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 801f0be:	68bb      	ldr	r3, [r7, #8]
}
 801f0c0:	4618      	mov	r0, r3
 801f0c2:	371c      	adds	r7, #28
 801f0c4:	46bd      	mov	sp, r7
 801f0c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f0ca:	4770      	bx	lr

0801f0cc <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 801f0cc:	b480      	push	{r7}
 801f0ce:	b083      	sub	sp, #12
 801f0d0:	af00      	add	r7, sp, #0
 801f0d2:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 801f0d4:	687b      	ldr	r3, [r7, #4]
 801f0d6:	695b      	ldr	r3, [r3, #20]
 801f0d8:	f003 0301 	and.w	r3, r3, #1
}
 801f0dc:	4618      	mov	r0, r3
 801f0de:	370c      	adds	r7, #12
 801f0e0:	46bd      	mov	sp, r7
 801f0e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f0e6:	4770      	bx	lr

0801f0e8 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 801f0e8:	b480      	push	{r7}
 801f0ea:	b085      	sub	sp, #20
 801f0ec:	af00      	add	r7, sp, #0
 801f0ee:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801f0f0:	687b      	ldr	r3, [r7, #4]
 801f0f2:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 801f0f4:	68fb      	ldr	r3, [r7, #12]
 801f0f6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801f0fa:	681b      	ldr	r3, [r3, #0]
 801f0fc:	68fa      	ldr	r2, [r7, #12]
 801f0fe:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801f102:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 801f106:	f023 0307 	bic.w	r3, r3, #7
 801f10a:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 801f10c:	68fb      	ldr	r3, [r7, #12]
 801f10e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801f112:	685b      	ldr	r3, [r3, #4]
 801f114:	68fa      	ldr	r2, [r7, #12]
 801f116:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 801f11a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 801f11e:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 801f120:	2300      	movs	r3, #0
}
 801f122:	4618      	mov	r0, r3
 801f124:	3714      	adds	r7, #20
 801f126:	46bd      	mov	sp, r7
 801f128:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f12c:	4770      	bx	lr
	...

0801f130 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 801f130:	b480      	push	{r7}
 801f132:	b087      	sub	sp, #28
 801f134:	af00      	add	r7, sp, #0
 801f136:	60f8      	str	r0, [r7, #12]
 801f138:	460b      	mov	r3, r1
 801f13a:	607a      	str	r2, [r7, #4]
 801f13c:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801f13e:	68fb      	ldr	r3, [r7, #12]
 801f140:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 801f142:	68fb      	ldr	r3, [r7, #12]
 801f144:	333c      	adds	r3, #60	; 0x3c
 801f146:	3304      	adds	r3, #4
 801f148:	681b      	ldr	r3, [r3, #0]
 801f14a:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 801f14c:	693b      	ldr	r3, [r7, #16]
 801f14e:	4a26      	ldr	r2, [pc, #152]	; (801f1e8 <USB_EP0_OutStart+0xb8>)
 801f150:	4293      	cmp	r3, r2
 801f152:	d90a      	bls.n	801f16a <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 801f154:	697b      	ldr	r3, [r7, #20]
 801f156:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801f15a:	681b      	ldr	r3, [r3, #0]
 801f15c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 801f160:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 801f164:	d101      	bne.n	801f16a <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 801f166:	2300      	movs	r3, #0
 801f168:	e037      	b.n	801f1da <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 801f16a:	697b      	ldr	r3, [r7, #20]
 801f16c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801f170:	461a      	mov	r2, r3
 801f172:	2300      	movs	r3, #0
 801f174:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 801f176:	697b      	ldr	r3, [r7, #20]
 801f178:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801f17c:	691b      	ldr	r3, [r3, #16]
 801f17e:	697a      	ldr	r2, [r7, #20]
 801f180:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801f184:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 801f188:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 801f18a:	697b      	ldr	r3, [r7, #20]
 801f18c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801f190:	691b      	ldr	r3, [r3, #16]
 801f192:	697a      	ldr	r2, [r7, #20]
 801f194:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801f198:	f043 0318 	orr.w	r3, r3, #24
 801f19c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 801f19e:	697b      	ldr	r3, [r7, #20]
 801f1a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801f1a4:	691b      	ldr	r3, [r3, #16]
 801f1a6:	697a      	ldr	r2, [r7, #20]
 801f1a8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801f1ac:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 801f1b0:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 801f1b2:	7afb      	ldrb	r3, [r7, #11]
 801f1b4:	2b01      	cmp	r3, #1
 801f1b6:	d10f      	bne.n	801f1d8 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 801f1b8:	697b      	ldr	r3, [r7, #20]
 801f1ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801f1be:	461a      	mov	r2, r3
 801f1c0:	687b      	ldr	r3, [r7, #4]
 801f1c2:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 801f1c4:	697b      	ldr	r3, [r7, #20]
 801f1c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801f1ca:	681b      	ldr	r3, [r3, #0]
 801f1cc:	697a      	ldr	r2, [r7, #20]
 801f1ce:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801f1d2:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 801f1d6:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 801f1d8:	2300      	movs	r3, #0
}
 801f1da:	4618      	mov	r0, r3
 801f1dc:	371c      	adds	r7, #28
 801f1de:	46bd      	mov	sp, r7
 801f1e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f1e4:	4770      	bx	lr
 801f1e6:	bf00      	nop
 801f1e8:	4f54300a 	.word	0x4f54300a

0801f1ec <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 801f1ec:	b480      	push	{r7}
 801f1ee:	b085      	sub	sp, #20
 801f1f0:	af00      	add	r7, sp, #0
 801f1f2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 801f1f4:	2300      	movs	r3, #0
 801f1f6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 801f1f8:	68fb      	ldr	r3, [r7, #12]
 801f1fa:	3301      	adds	r3, #1
 801f1fc:	60fb      	str	r3, [r7, #12]
 801f1fe:	4a13      	ldr	r2, [pc, #76]	; (801f24c <USB_CoreReset+0x60>)
 801f200:	4293      	cmp	r3, r2
 801f202:	d901      	bls.n	801f208 <USB_CoreReset+0x1c>
    {
      return HAL_TIMEOUT;
 801f204:	2303      	movs	r3, #3
 801f206:	e01a      	b.n	801f23e <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 801f208:	687b      	ldr	r3, [r7, #4]
 801f20a:	691b      	ldr	r3, [r3, #16]
 801f20c:	2b00      	cmp	r3, #0
 801f20e:	daf3      	bge.n	801f1f8 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 801f210:	2300      	movs	r3, #0
 801f212:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 801f214:	687b      	ldr	r3, [r7, #4]
 801f216:	691b      	ldr	r3, [r3, #16]
 801f218:	f043 0201 	orr.w	r2, r3, #1
 801f21c:	687b      	ldr	r3, [r7, #4]
 801f21e:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 801f220:	68fb      	ldr	r3, [r7, #12]
 801f222:	3301      	adds	r3, #1
 801f224:	60fb      	str	r3, [r7, #12]
 801f226:	4a09      	ldr	r2, [pc, #36]	; (801f24c <USB_CoreReset+0x60>)
 801f228:	4293      	cmp	r3, r2
 801f22a:	d901      	bls.n	801f230 <USB_CoreReset+0x44>
    {
      return HAL_TIMEOUT;
 801f22c:	2303      	movs	r3, #3
 801f22e:	e006      	b.n	801f23e <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 801f230:	687b      	ldr	r3, [r7, #4]
 801f232:	691b      	ldr	r3, [r3, #16]
 801f234:	f003 0301 	and.w	r3, r3, #1
 801f238:	2b01      	cmp	r3, #1
 801f23a:	d0f1      	beq.n	801f220 <USB_CoreReset+0x34>

  return HAL_OK;
 801f23c:	2300      	movs	r3, #0
}
 801f23e:	4618      	mov	r0, r3
 801f240:	3714      	adds	r7, #20
 801f242:	46bd      	mov	sp, r7
 801f244:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f248:	4770      	bx	lr
 801f24a:	bf00      	nop
 801f24c:	00030d40 	.word	0x00030d40

0801f250 <USBD_MSC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
uint8_t USBD_MSC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 801f250:	b580      	push	{r7, lr}
 801f252:	b084      	sub	sp, #16
 801f254:	af00      	add	r7, sp, #0
 801f256:	6078      	str	r0, [r7, #4]
 801f258:	460b      	mov	r3, r1
 801f25a:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_MSC_BOT_HandleTypeDef *hmsc;

  hmsc = USBD_malloc(sizeof(USBD_MSC_BOT_HandleTypeDef));
 801f25c:	f44f 701d 	mov.w	r0, #628	; 0x274
 801f260:	f003 fc6e 	bl	8022b40 <USBD_static_malloc>
 801f264:	60f8      	str	r0, [r7, #12]

  if (hmsc == NULL)
 801f266:	68fb      	ldr	r3, [r7, #12]
 801f268:	2b00      	cmp	r3, #0
 801f26a:	d105      	bne.n	801f278 <USBD_MSC_Init+0x28>
  {
    pdev->pClassData = NULL;
 801f26c:	687b      	ldr	r3, [r7, #4]
 801f26e:	2200      	movs	r2, #0
 801f270:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 801f274:	2302      	movs	r3, #2
 801f276:	e034      	b.n	801f2e2 <USBD_MSC_Init+0x92>
  }

  pdev->pClassData = (void *)hmsc;
 801f278:	687b      	ldr	r3, [r7, #4]
 801f27a:	68fa      	ldr	r2, [r7, #12]
 801f27c:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 801f280:	687b      	ldr	r3, [r7, #4]
 801f282:	7c1b      	ldrb	r3, [r3, #16]
 801f284:	2b00      	cmp	r3, #0
 801f286:	d115      	bne.n	801f2b4 <USBD_MSC_Init+0x64>
  {
    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, MSC_EPOUT_ADDR, USBD_EP_TYPE_BULK, MSC_MAX_HS_PACKET);
 801f288:	f44f 7300 	mov.w	r3, #512	; 0x200
 801f28c:	2202      	movs	r2, #2
 801f28e:	2101      	movs	r1, #1
 801f290:	6878      	ldr	r0, [r7, #4]
 801f292:	f003 fac4 	bl	802281e <USBD_LL_OpenEP>
    pdev->ep_out[MSC_EPOUT_ADDR & 0xFU].is_used = 1U;
 801f296:	687b      	ldr	r3, [r7, #4]
 801f298:	2201      	movs	r2, #1
 801f29a:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, MSC_EPIN_ADDR, USBD_EP_TYPE_BULK, MSC_MAX_HS_PACKET);
 801f29e:	f44f 7300 	mov.w	r3, #512	; 0x200
 801f2a2:	2202      	movs	r2, #2
 801f2a4:	2181      	movs	r1, #129	; 0x81
 801f2a6:	6878      	ldr	r0, [r7, #4]
 801f2a8:	f003 fab9 	bl	802281e <USBD_LL_OpenEP>
    pdev->ep_in[MSC_EPIN_ADDR & 0xFU].is_used = 1U;
 801f2ac:	687b      	ldr	r3, [r7, #4]
 801f2ae:	2201      	movs	r2, #1
 801f2b0:	871a      	strh	r2, [r3, #56]	; 0x38
 801f2b2:	e012      	b.n	801f2da <USBD_MSC_Init+0x8a>
  }
  else
  {
    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, MSC_EPOUT_ADDR, USBD_EP_TYPE_BULK, MSC_MAX_FS_PACKET);
 801f2b4:	2340      	movs	r3, #64	; 0x40
 801f2b6:	2202      	movs	r2, #2
 801f2b8:	2101      	movs	r1, #1
 801f2ba:	6878      	ldr	r0, [r7, #4]
 801f2bc:	f003 faaf 	bl	802281e <USBD_LL_OpenEP>
    pdev->ep_out[MSC_EPOUT_ADDR & 0xFU].is_used = 1U;
 801f2c0:	687b      	ldr	r3, [r7, #4]
 801f2c2:	2201      	movs	r2, #1
 801f2c4:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, MSC_EPIN_ADDR, USBD_EP_TYPE_BULK, MSC_MAX_FS_PACKET);
 801f2c8:	2340      	movs	r3, #64	; 0x40
 801f2ca:	2202      	movs	r2, #2
 801f2cc:	2181      	movs	r1, #129	; 0x81
 801f2ce:	6878      	ldr	r0, [r7, #4]
 801f2d0:	f003 faa5 	bl	802281e <USBD_LL_OpenEP>
    pdev->ep_in[MSC_EPIN_ADDR & 0xFU].is_used = 1U;
 801f2d4:	687b      	ldr	r3, [r7, #4]
 801f2d6:	2201      	movs	r2, #1
 801f2d8:	871a      	strh	r2, [r3, #56]	; 0x38
  }

  /* Init the BOT  layer */
  MSC_BOT_Init(pdev);
 801f2da:	6878      	ldr	r0, [r7, #4]
 801f2dc:	f000 f999 	bl	801f612 <MSC_BOT_Init>

  return (uint8_t)USBD_OK;
 801f2e0:	2300      	movs	r3, #0
}
 801f2e2:	4618      	mov	r0, r3
 801f2e4:	3710      	adds	r7, #16
 801f2e6:	46bd      	mov	sp, r7
 801f2e8:	bd80      	pop	{r7, pc}

0801f2ea <USBD_MSC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
uint8_t USBD_MSC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 801f2ea:	b580      	push	{r7, lr}
 801f2ec:	b082      	sub	sp, #8
 801f2ee:	af00      	add	r7, sp, #0
 801f2f0:	6078      	str	r0, [r7, #4]
 801f2f2:	460b      	mov	r3, r1
 801f2f4:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close MSC EPs */
  (void)USBD_LL_CloseEP(pdev, MSC_EPOUT_ADDR);
 801f2f6:	2101      	movs	r1, #1
 801f2f8:	6878      	ldr	r0, [r7, #4]
 801f2fa:	f003 fab6 	bl	802286a <USBD_LL_CloseEP>
  pdev->ep_out[MSC_EPOUT_ADDR & 0xFU].is_used = 0U;
 801f2fe:	687b      	ldr	r3, [r7, #4]
 801f300:	2200      	movs	r2, #0
 801f302:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, MSC_EPIN_ADDR);
 801f306:	2181      	movs	r1, #129	; 0x81
 801f308:	6878      	ldr	r0, [r7, #4]
 801f30a:	f003 faae 	bl	802286a <USBD_LL_CloseEP>
  pdev->ep_in[MSC_EPIN_ADDR & 0xFU].is_used = 0U;
 801f30e:	687b      	ldr	r3, [r7, #4]
 801f310:	2200      	movs	r2, #0
 801f312:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Free MSC Class Resources */
  if (pdev->pClassData != NULL)
 801f314:	687b      	ldr	r3, [r7, #4]
 801f316:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801f31a:	2b00      	cmp	r3, #0
 801f31c:	d00c      	beq.n	801f338 <USBD_MSC_DeInit+0x4e>
  {
    /* De-Init the BOT layer */
    MSC_BOT_DeInit(pdev);
 801f31e:	6878      	ldr	r0, [r7, #4]
 801f320:	f000 f9d5 	bl	801f6ce <MSC_BOT_DeInit>

    (void)USBD_free(pdev->pClassData);
 801f324:	687b      	ldr	r3, [r7, #4]
 801f326:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801f32a:	4618      	mov	r0, r3
 801f32c:	f003 fc16 	bl	8022b5c <USBD_static_free>
    pdev->pClassData = NULL;
 801f330:	687b      	ldr	r3, [r7, #4]
 801f332:	2200      	movs	r2, #0
 801f334:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 801f338:	2300      	movs	r3, #0
}
 801f33a:	4618      	mov	r0, r3
 801f33c:	3708      	adds	r7, #8
 801f33e:	46bd      	mov	sp, r7
 801f340:	bd80      	pop	{r7, pc}
	...

0801f344 <USBD_MSC_Setup>:
  * @param  pdev: device instance
  * @param  req: USB request
  * @retval status
  */
uint8_t USBD_MSC_Setup(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801f344:	b580      	push	{r7, lr}
 801f346:	b086      	sub	sp, #24
 801f348:	af00      	add	r7, sp, #0
 801f34a:	6078      	str	r0, [r7, #4]
 801f34c:	6039      	str	r1, [r7, #0]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 801f34e:	687b      	ldr	r3, [r7, #4]
 801f350:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801f354:	613b      	str	r3, [r7, #16]
  USBD_StatusTypeDef ret = USBD_OK;
 801f356:	2300      	movs	r3, #0
 801f358:	75fb      	strb	r3, [r7, #23]
  uint16_t status_info = 0U;
 801f35a:	2300      	movs	r3, #0
 801f35c:	81fb      	strh	r3, [r7, #14]

  if (hmsc == NULL)
 801f35e:	693b      	ldr	r3, [r7, #16]
 801f360:	2b00      	cmp	r3, #0
 801f362:	d101      	bne.n	801f368 <USBD_MSC_Setup+0x24>
  {
    return (uint8_t)USBD_FAIL;
 801f364:	2303      	movs	r3, #3
 801f366:	e0db      	b.n	801f520 <USBD_MSC_Setup+0x1dc>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 801f368:	683b      	ldr	r3, [r7, #0]
 801f36a:	781b      	ldrb	r3, [r3, #0]
 801f36c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 801f370:	2b00      	cmp	r3, #0
 801f372:	d04e      	beq.n	801f412 <USBD_MSC_Setup+0xce>
 801f374:	2b20      	cmp	r3, #32
 801f376:	f040 80cb 	bne.w	801f510 <USBD_MSC_Setup+0x1cc>
  {
    /* Class request */
    case USB_REQ_TYPE_CLASS:
      switch (req->bRequest)
 801f37a:	683b      	ldr	r3, [r7, #0]
 801f37c:	785b      	ldrb	r3, [r3, #1]
 801f37e:	2bfe      	cmp	r3, #254	; 0xfe
 801f380:	d002      	beq.n	801f388 <USBD_MSC_Setup+0x44>
 801f382:	2bff      	cmp	r3, #255	; 0xff
 801f384:	d025      	beq.n	801f3d2 <USBD_MSC_Setup+0x8e>
 801f386:	e03c      	b.n	801f402 <USBD_MSC_Setup+0xbe>
      {
        case BOT_GET_MAX_LUN:
          if ((req->wValue  == 0U) && (req->wLength == 1U) &&
 801f388:	683b      	ldr	r3, [r7, #0]
 801f38a:	885b      	ldrh	r3, [r3, #2]
 801f38c:	2b00      	cmp	r3, #0
 801f38e:	d119      	bne.n	801f3c4 <USBD_MSC_Setup+0x80>
 801f390:	683b      	ldr	r3, [r7, #0]
 801f392:	88db      	ldrh	r3, [r3, #6]
 801f394:	2b01      	cmp	r3, #1
 801f396:	d115      	bne.n	801f3c4 <USBD_MSC_Setup+0x80>
              ((req->bmRequest & 0x80U) == 0x80U))
 801f398:	683b      	ldr	r3, [r7, #0]
 801f39a:	781b      	ldrb	r3, [r3, #0]
 801f39c:	b25b      	sxtb	r3, r3
          if ((req->wValue  == 0U) && (req->wLength == 1U) &&
 801f39e:	2b00      	cmp	r3, #0
 801f3a0:	da10      	bge.n	801f3c4 <USBD_MSC_Setup+0x80>
          {
            hmsc->max_lun = (uint32_t)((USBD_StorageTypeDef *)pdev->pUserData)->GetMaxLun();
 801f3a2:	687b      	ldr	r3, [r7, #4]
 801f3a4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 801f3a8:	699b      	ldr	r3, [r3, #24]
 801f3aa:	4798      	blx	r3
 801f3ac:	4603      	mov	r3, r0
 801f3ae:	461a      	mov	r2, r3
 801f3b0:	693b      	ldr	r3, [r7, #16]
 801f3b2:	601a      	str	r2, [r3, #0]
            (void)USBD_CtlSendData(pdev, (uint8_t *)&hmsc->max_lun, 1U);
 801f3b4:	693b      	ldr	r3, [r7, #16]
 801f3b6:	2201      	movs	r2, #1
 801f3b8:	4619      	mov	r1, r3
 801f3ba:	6878      	ldr	r0, [r7, #4]
 801f3bc:	f002 fe3d 	bl	802203a <USBD_CtlSendData>
 801f3c0:	bf00      	nop
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 801f3c2:	e025      	b.n	801f410 <USBD_MSC_Setup+0xcc>
            USBD_CtlError(pdev, req);
 801f3c4:	6839      	ldr	r1, [r7, #0]
 801f3c6:	6878      	ldr	r0, [r7, #4]
 801f3c8:	f002 fdc6 	bl	8021f58 <USBD_CtlError>
            ret = USBD_FAIL;
 801f3cc:	2303      	movs	r3, #3
 801f3ce:	75fb      	strb	r3, [r7, #23]
          break;
 801f3d0:	e01e      	b.n	801f410 <USBD_MSC_Setup+0xcc>

        case BOT_RESET :
          if ((req->wValue  == 0U) && (req->wLength == 0U) &&
 801f3d2:	683b      	ldr	r3, [r7, #0]
 801f3d4:	885b      	ldrh	r3, [r3, #2]
 801f3d6:	2b00      	cmp	r3, #0
 801f3d8:	d10c      	bne.n	801f3f4 <USBD_MSC_Setup+0xb0>
 801f3da:	683b      	ldr	r3, [r7, #0]
 801f3dc:	88db      	ldrh	r3, [r3, #6]
 801f3de:	2b00      	cmp	r3, #0
 801f3e0:	d108      	bne.n	801f3f4 <USBD_MSC_Setup+0xb0>
              ((req->bmRequest & 0x80U) != 0x80U))
 801f3e2:	683b      	ldr	r3, [r7, #0]
 801f3e4:	781b      	ldrb	r3, [r3, #0]
 801f3e6:	b25b      	sxtb	r3, r3
          if ((req->wValue  == 0U) && (req->wLength == 0U) &&
 801f3e8:	2b00      	cmp	r3, #0
 801f3ea:	db03      	blt.n	801f3f4 <USBD_MSC_Setup+0xb0>
          {
            MSC_BOT_Reset(pdev);
 801f3ec:	6878      	ldr	r0, [r7, #4]
 801f3ee:	f000 f948 	bl	801f682 <MSC_BOT_Reset>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 801f3f2:	e00d      	b.n	801f410 <USBD_MSC_Setup+0xcc>
            USBD_CtlError(pdev, req);
 801f3f4:	6839      	ldr	r1, [r7, #0]
 801f3f6:	6878      	ldr	r0, [r7, #4]
 801f3f8:	f002 fdae 	bl	8021f58 <USBD_CtlError>
            ret = USBD_FAIL;
 801f3fc:	2303      	movs	r3, #3
 801f3fe:	75fb      	strb	r3, [r7, #23]
          break;
 801f400:	e006      	b.n	801f410 <USBD_MSC_Setup+0xcc>

        default:
          USBD_CtlError(pdev, req);
 801f402:	6839      	ldr	r1, [r7, #0]
 801f404:	6878      	ldr	r0, [r7, #4]
 801f406:	f002 fda7 	bl	8021f58 <USBD_CtlError>
          ret = USBD_FAIL;
 801f40a:	2303      	movs	r3, #3
 801f40c:	75fb      	strb	r3, [r7, #23]
          break;
 801f40e:	bf00      	nop
      }
      break;
 801f410:	e085      	b.n	801f51e <USBD_MSC_Setup+0x1da>
    /* Interface & Endpoint request */
    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 801f412:	683b      	ldr	r3, [r7, #0]
 801f414:	785b      	ldrb	r3, [r3, #1]
 801f416:	2b0b      	cmp	r3, #11
 801f418:	d871      	bhi.n	801f4fe <USBD_MSC_Setup+0x1ba>
 801f41a:	a201      	add	r2, pc, #4	; (adr r2, 801f420 <USBD_MSC_Setup+0xdc>)
 801f41c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801f420:	0801f451 	.word	0x0801f451
 801f424:	0801f4cd 	.word	0x0801f4cd
 801f428:	0801f4ff 	.word	0x0801f4ff
 801f42c:	0801f4ff 	.word	0x0801f4ff
 801f430:	0801f4ff 	.word	0x0801f4ff
 801f434:	0801f4ff 	.word	0x0801f4ff
 801f438:	0801f4ff 	.word	0x0801f4ff
 801f43c:	0801f4ff 	.word	0x0801f4ff
 801f440:	0801f4ff 	.word	0x0801f4ff
 801f444:	0801f4ff 	.word	0x0801f4ff
 801f448:	0801f47b 	.word	0x0801f47b
 801f44c:	0801f4a5 	.word	0x0801f4a5
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801f450:	687b      	ldr	r3, [r7, #4]
 801f452:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801f456:	b2db      	uxtb	r3, r3
 801f458:	2b03      	cmp	r3, #3
 801f45a:	d107      	bne.n	801f46c <USBD_MSC_Setup+0x128>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 801f45c:	f107 030e 	add.w	r3, r7, #14
 801f460:	2202      	movs	r2, #2
 801f462:	4619      	mov	r1, r3
 801f464:	6878      	ldr	r0, [r7, #4]
 801f466:	f002 fde8 	bl	802203a <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 801f46a:	e050      	b.n	801f50e <USBD_MSC_Setup+0x1ca>
            USBD_CtlError(pdev, req);
 801f46c:	6839      	ldr	r1, [r7, #0]
 801f46e:	6878      	ldr	r0, [r7, #4]
 801f470:	f002 fd72 	bl	8021f58 <USBD_CtlError>
            ret = USBD_FAIL;
 801f474:	2303      	movs	r3, #3
 801f476:	75fb      	strb	r3, [r7, #23]
          break;
 801f478:	e049      	b.n	801f50e <USBD_MSC_Setup+0x1ca>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801f47a:	687b      	ldr	r3, [r7, #4]
 801f47c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801f480:	b2db      	uxtb	r3, r3
 801f482:	2b03      	cmp	r3, #3
 801f484:	d107      	bne.n	801f496 <USBD_MSC_Setup+0x152>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&hmsc->interface, 1U);
 801f486:	693b      	ldr	r3, [r7, #16]
 801f488:	3304      	adds	r3, #4
 801f48a:	2201      	movs	r2, #1
 801f48c:	4619      	mov	r1, r3
 801f48e:	6878      	ldr	r0, [r7, #4]
 801f490:	f002 fdd3 	bl	802203a <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 801f494:	e03b      	b.n	801f50e <USBD_MSC_Setup+0x1ca>
            USBD_CtlError(pdev, req);
 801f496:	6839      	ldr	r1, [r7, #0]
 801f498:	6878      	ldr	r0, [r7, #4]
 801f49a:	f002 fd5d 	bl	8021f58 <USBD_CtlError>
            ret = USBD_FAIL;
 801f49e:	2303      	movs	r3, #3
 801f4a0:	75fb      	strb	r3, [r7, #23]
          break;
 801f4a2:	e034      	b.n	801f50e <USBD_MSC_Setup+0x1ca>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801f4a4:	687b      	ldr	r3, [r7, #4]
 801f4a6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801f4aa:	b2db      	uxtb	r3, r3
 801f4ac:	2b03      	cmp	r3, #3
 801f4ae:	d106      	bne.n	801f4be <USBD_MSC_Setup+0x17a>
          {
            hmsc->interface = (uint8_t)(req->wValue);
 801f4b0:	683b      	ldr	r3, [r7, #0]
 801f4b2:	885b      	ldrh	r3, [r3, #2]
 801f4b4:	b2db      	uxtb	r3, r3
 801f4b6:	461a      	mov	r2, r3
 801f4b8:	693b      	ldr	r3, [r7, #16]
 801f4ba:	605a      	str	r2, [r3, #4]
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 801f4bc:	e027      	b.n	801f50e <USBD_MSC_Setup+0x1ca>
            USBD_CtlError(pdev, req);
 801f4be:	6839      	ldr	r1, [r7, #0]
 801f4c0:	6878      	ldr	r0, [r7, #4]
 801f4c2:	f002 fd49 	bl	8021f58 <USBD_CtlError>
            ret = USBD_FAIL;
 801f4c6:	2303      	movs	r3, #3
 801f4c8:	75fb      	strb	r3, [r7, #23]
          break;
 801f4ca:	e020      	b.n	801f50e <USBD_MSC_Setup+0x1ca>

        case USB_REQ_CLEAR_FEATURE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801f4cc:	687b      	ldr	r3, [r7, #4]
 801f4ce:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801f4d2:	b2db      	uxtb	r3, r3
 801f4d4:	2b03      	cmp	r3, #3
 801f4d6:	d119      	bne.n	801f50c <USBD_MSC_Setup+0x1c8>
          {
            if (req->wValue == USB_FEATURE_EP_HALT)
 801f4d8:	683b      	ldr	r3, [r7, #0]
 801f4da:	885b      	ldrh	r3, [r3, #2]
 801f4dc:	2b00      	cmp	r3, #0
 801f4de:	d115      	bne.n	801f50c <USBD_MSC_Setup+0x1c8>
            {
              /* Flush the FIFO */
              (void)USBD_LL_FlushEP(pdev, (uint8_t)req->wIndex);
 801f4e0:	683b      	ldr	r3, [r7, #0]
 801f4e2:	889b      	ldrh	r3, [r3, #4]
 801f4e4:	b2db      	uxtb	r3, r3
 801f4e6:	4619      	mov	r1, r3
 801f4e8:	6878      	ldr	r0, [r7, #4]
 801f4ea:	f003 f9dd 	bl	80228a8 <USBD_LL_FlushEP>

              /* Handle BOT error */
              MSC_BOT_CplClrFeature(pdev, (uint8_t)req->wIndex);
 801f4ee:	683b      	ldr	r3, [r7, #0]
 801f4f0:	889b      	ldrh	r3, [r3, #4]
 801f4f2:	b2db      	uxtb	r3, r3
 801f4f4:	4619      	mov	r1, r3
 801f4f6:	6878      	ldr	r0, [r7, #4]
 801f4f8:	f000 fa82 	bl	801fa00 <MSC_BOT_CplClrFeature>
            }
          }
          break;
 801f4fc:	e006      	b.n	801f50c <USBD_MSC_Setup+0x1c8>

        default:
          USBD_CtlError(pdev, req);
 801f4fe:	6839      	ldr	r1, [r7, #0]
 801f500:	6878      	ldr	r0, [r7, #4]
 801f502:	f002 fd29 	bl	8021f58 <USBD_CtlError>
          ret = USBD_FAIL;
 801f506:	2303      	movs	r3, #3
 801f508:	75fb      	strb	r3, [r7, #23]
          break;
 801f50a:	e000      	b.n	801f50e <USBD_MSC_Setup+0x1ca>
          break;
 801f50c:	bf00      	nop
      }
      break;
 801f50e:	e006      	b.n	801f51e <USBD_MSC_Setup+0x1da>

    default:
      USBD_CtlError(pdev, req);
 801f510:	6839      	ldr	r1, [r7, #0]
 801f512:	6878      	ldr	r0, [r7, #4]
 801f514:	f002 fd20 	bl	8021f58 <USBD_CtlError>
      ret = USBD_FAIL;
 801f518:	2303      	movs	r3, #3
 801f51a:	75fb      	strb	r3, [r7, #23]
      break;
 801f51c:	bf00      	nop
  }

  return (uint8_t)ret;
 801f51e:	7dfb      	ldrb	r3, [r7, #23]
}
 801f520:	4618      	mov	r0, r3
 801f522:	3718      	adds	r7, #24
 801f524:	46bd      	mov	sp, r7
 801f526:	bd80      	pop	{r7, pc}

0801f528 <USBD_MSC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
uint8_t USBD_MSC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 801f528:	b580      	push	{r7, lr}
 801f52a:	b082      	sub	sp, #8
 801f52c:	af00      	add	r7, sp, #0
 801f52e:	6078      	str	r0, [r7, #4]
 801f530:	460b      	mov	r3, r1
 801f532:	70fb      	strb	r3, [r7, #3]
  MSC_BOT_DataIn(pdev, epnum);
 801f534:	78fb      	ldrb	r3, [r7, #3]
 801f536:	4619      	mov	r1, r3
 801f538:	6878      	ldr	r0, [r7, #4]
 801f53a:	f000 f8dc 	bl	801f6f6 <MSC_BOT_DataIn>

  return (uint8_t)USBD_OK;
 801f53e:	2300      	movs	r3, #0
}
 801f540:	4618      	mov	r0, r3
 801f542:	3708      	adds	r7, #8
 801f544:	46bd      	mov	sp, r7
 801f546:	bd80      	pop	{r7, pc}

0801f548 <USBD_MSC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
uint8_t USBD_MSC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 801f548:	b580      	push	{r7, lr}
 801f54a:	b082      	sub	sp, #8
 801f54c:	af00      	add	r7, sp, #0
 801f54e:	6078      	str	r0, [r7, #4]
 801f550:	460b      	mov	r3, r1
 801f552:	70fb      	strb	r3, [r7, #3]
  MSC_BOT_DataOut(pdev, epnum);
 801f554:	78fb      	ldrb	r3, [r7, #3]
 801f556:	4619      	mov	r1, r3
 801f558:	6878      	ldr	r0, [r7, #4]
 801f55a:	f000 f902 	bl	801f762 <MSC_BOT_DataOut>

  return (uint8_t)USBD_OK;
 801f55e:	2300      	movs	r3, #0
}
 801f560:	4618      	mov	r0, r3
 801f562:	3708      	adds	r7, #8
 801f564:	46bd      	mov	sp, r7
 801f566:	bd80      	pop	{r7, pc}

0801f568 <USBD_MSC_GetHSCfgDesc>:
  *         return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_MSC_GetHSCfgDesc(uint16_t *length)
{
 801f568:	b480      	push	{r7}
 801f56a:	b083      	sub	sp, #12
 801f56c:	af00      	add	r7, sp, #0
 801f56e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_MSC_CfgHSDesc);
 801f570:	687b      	ldr	r3, [r7, #4]
 801f572:	2220      	movs	r2, #32
 801f574:	801a      	strh	r2, [r3, #0]

  return USBD_MSC_CfgHSDesc;
 801f576:	4b03      	ldr	r3, [pc, #12]	; (801f584 <USBD_MSC_GetHSCfgDesc+0x1c>)
}
 801f578:	4618      	mov	r0, r3
 801f57a:	370c      	adds	r7, #12
 801f57c:	46bd      	mov	sp, r7
 801f57e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f582:	4770      	bx	lr
 801f584:	200005cc 	.word	0x200005cc

0801f588 <USBD_MSC_GetFSCfgDesc>:
  *         return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_MSC_GetFSCfgDesc(uint16_t *length)
{
 801f588:	b480      	push	{r7}
 801f58a:	b083      	sub	sp, #12
 801f58c:	af00      	add	r7, sp, #0
 801f58e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_MSC_CfgFSDesc);
 801f590:	687b      	ldr	r3, [r7, #4]
 801f592:	2220      	movs	r2, #32
 801f594:	801a      	strh	r2, [r3, #0]

  return USBD_MSC_CfgFSDesc;
 801f596:	4b03      	ldr	r3, [pc, #12]	; (801f5a4 <USBD_MSC_GetFSCfgDesc+0x1c>)
}
 801f598:	4618      	mov	r0, r3
 801f59a:	370c      	adds	r7, #12
 801f59c:	46bd      	mov	sp, r7
 801f59e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f5a2:	4770      	bx	lr
 801f5a4:	200005ec 	.word	0x200005ec

0801f5a8 <USBD_MSC_GetOtherSpeedCfgDesc>:
  *         return other speed configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_MSC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 801f5a8:	b480      	push	{r7}
 801f5aa:	b083      	sub	sp, #12
 801f5ac:	af00      	add	r7, sp, #0
 801f5ae:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_MSC_OtherSpeedCfgDesc);
 801f5b0:	687b      	ldr	r3, [r7, #4]
 801f5b2:	2220      	movs	r2, #32
 801f5b4:	801a      	strh	r2, [r3, #0]

  return USBD_MSC_OtherSpeedCfgDesc;
 801f5b6:	4b03      	ldr	r3, [pc, #12]	; (801f5c4 <USBD_MSC_GetOtherSpeedCfgDesc+0x1c>)
}
 801f5b8:	4618      	mov	r0, r3
 801f5ba:	370c      	adds	r7, #12
 801f5bc:	46bd      	mov	sp, r7
 801f5be:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f5c2:	4770      	bx	lr
 801f5c4:	2000060c 	.word	0x2000060c

0801f5c8 <USBD_MSC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_MSC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 801f5c8:	b480      	push	{r7}
 801f5ca:	b083      	sub	sp, #12
 801f5cc:	af00      	add	r7, sp, #0
 801f5ce:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_MSC_DeviceQualifierDesc);
 801f5d0:	687b      	ldr	r3, [r7, #4]
 801f5d2:	220a      	movs	r2, #10
 801f5d4:	801a      	strh	r2, [r3, #0]

  return USBD_MSC_DeviceQualifierDesc;
 801f5d6:	4b03      	ldr	r3, [pc, #12]	; (801f5e4 <USBD_MSC_GetDeviceQualifierDescriptor+0x1c>)
}
 801f5d8:	4618      	mov	r0, r3
 801f5da:	370c      	adds	r7, #12
 801f5dc:	46bd      	mov	sp, r7
 801f5de:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f5e2:	4770      	bx	lr
 801f5e4:	2000062c 	.word	0x2000062c

0801f5e8 <USBD_MSC_RegisterStorage>:
  * @brief  USBD_MSC_RegisterStorage
  * @param  fops: storage callback
  * @retval status
  */
uint8_t USBD_MSC_RegisterStorage(USBD_HandleTypeDef *pdev, USBD_StorageTypeDef *fops)
{
 801f5e8:	b480      	push	{r7}
 801f5ea:	b083      	sub	sp, #12
 801f5ec:	af00      	add	r7, sp, #0
 801f5ee:	6078      	str	r0, [r7, #4]
 801f5f0:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 801f5f2:	683b      	ldr	r3, [r7, #0]
 801f5f4:	2b00      	cmp	r3, #0
 801f5f6:	d101      	bne.n	801f5fc <USBD_MSC_RegisterStorage+0x14>
  {
    return (uint8_t)USBD_FAIL;
 801f5f8:	2303      	movs	r3, #3
 801f5fa:	e004      	b.n	801f606 <USBD_MSC_RegisterStorage+0x1e>
  }

  pdev->pUserData = fops;
 801f5fc:	687b      	ldr	r3, [r7, #4]
 801f5fe:	683a      	ldr	r2, [r7, #0]
 801f600:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 801f604:	2300      	movs	r3, #0
}
 801f606:	4618      	mov	r0, r3
 801f608:	370c      	adds	r7, #12
 801f60a:	46bd      	mov	sp, r7
 801f60c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f610:	4770      	bx	lr

0801f612 <MSC_BOT_Init>:
  *         Initialize the BOT Process
  * @param  pdev: device instance
  * @retval None
  */
void MSC_BOT_Init(USBD_HandleTypeDef *pdev)
{
 801f612:	b580      	push	{r7, lr}
 801f614:	b084      	sub	sp, #16
 801f616:	af00      	add	r7, sp, #0
 801f618:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 801f61a:	687b      	ldr	r3, [r7, #4]
 801f61c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801f620:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 801f622:	68fb      	ldr	r3, [r7, #12]
 801f624:	2b00      	cmp	r3, #0
 801f626:	d028      	beq.n	801f67a <MSC_BOT_Init+0x68>
  {
    return;
  }

  hmsc->bot_state = USBD_BOT_IDLE;
 801f628:	68fb      	ldr	r3, [r7, #12]
 801f62a:	2200      	movs	r2, #0
 801f62c:	721a      	strb	r2, [r3, #8]
  hmsc->bot_status = USBD_BOT_STATUS_NORMAL;
 801f62e:	68fb      	ldr	r3, [r7, #12]
 801f630:	2200      	movs	r2, #0
 801f632:	725a      	strb	r2, [r3, #9]

  hmsc->scsi_sense_tail = 0U;
 801f634:	68fb      	ldr	r3, [r7, #12]
 801f636:	2200      	movs	r2, #0
 801f638:	f883 2261 	strb.w	r2, [r3, #609]	; 0x261
  hmsc->scsi_sense_head = 0U;
 801f63c:	68fb      	ldr	r3, [r7, #12]
 801f63e:	2200      	movs	r2, #0
 801f640:	f883 2260 	strb.w	r2, [r3, #608]	; 0x260
  hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 801f644:	68fb      	ldr	r3, [r7, #12]
 801f646:	2200      	movs	r2, #0
 801f648:	f883 2262 	strb.w	r2, [r3, #610]	; 0x262

  ((USBD_StorageTypeDef *)pdev->pUserData)->Init(0U);
 801f64c:	687b      	ldr	r3, [r7, #4]
 801f64e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 801f652:	681b      	ldr	r3, [r3, #0]
 801f654:	2000      	movs	r0, #0
 801f656:	4798      	blx	r3

  (void)USBD_LL_FlushEP(pdev, MSC_EPOUT_ADDR);
 801f658:	2101      	movs	r1, #1
 801f65a:	6878      	ldr	r0, [r7, #4]
 801f65c:	f003 f924 	bl	80228a8 <USBD_LL_FlushEP>
  (void)USBD_LL_FlushEP(pdev, MSC_EPIN_ADDR);
 801f660:	2181      	movs	r1, #129	; 0x81
 801f662:	6878      	ldr	r0, [r7, #4]
 801f664:	f003 f920 	bl	80228a8 <USBD_LL_FlushEP>

  /* Prepare EP to Receive First BOT Cmd */
  (void)USBD_LL_PrepareReceive(pdev, MSC_EPOUT_ADDR, (uint8_t *)&hmsc->cbw,
 801f668:	68fb      	ldr	r3, [r7, #12]
 801f66a:	f503 7204 	add.w	r2, r3, #528	; 0x210
 801f66e:	231f      	movs	r3, #31
 801f670:	2101      	movs	r1, #1
 801f672:	6878      	ldr	r0, [r7, #4]
 801f674:	f003 f9e1 	bl	8022a3a <USBD_LL_PrepareReceive>
 801f678:	e000      	b.n	801f67c <MSC_BOT_Init+0x6a>
    return;
 801f67a:	bf00      	nop
                               USBD_BOT_CBW_LENGTH);
}
 801f67c:	3710      	adds	r7, #16
 801f67e:	46bd      	mov	sp, r7
 801f680:	bd80      	pop	{r7, pc}

0801f682 <MSC_BOT_Reset>:
  *         Reset the BOT Machine
  * @param  pdev: device instance
  * @retval  None
  */
void MSC_BOT_Reset(USBD_HandleTypeDef *pdev)
{
 801f682:	b580      	push	{r7, lr}
 801f684:	b084      	sub	sp, #16
 801f686:	af00      	add	r7, sp, #0
 801f688:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 801f68a:	687b      	ldr	r3, [r7, #4]
 801f68c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801f690:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 801f692:	68fb      	ldr	r3, [r7, #12]
 801f694:	2b00      	cmp	r3, #0
 801f696:	d016      	beq.n	801f6c6 <MSC_BOT_Reset+0x44>
  {
    return;
  }

  hmsc->bot_state  = USBD_BOT_IDLE;
 801f698:	68fb      	ldr	r3, [r7, #12]
 801f69a:	2200      	movs	r2, #0
 801f69c:	721a      	strb	r2, [r3, #8]
  hmsc->bot_status = USBD_BOT_STATUS_RECOVERY;
 801f69e:	68fb      	ldr	r3, [r7, #12]
 801f6a0:	2201      	movs	r2, #1
 801f6a2:	725a      	strb	r2, [r3, #9]

  (void)USBD_LL_ClearStallEP(pdev, MSC_EPIN_ADDR);
 801f6a4:	2181      	movs	r1, #129	; 0x81
 801f6a6:	6878      	ldr	r0, [r7, #4]
 801f6a8:	f003 f93c 	bl	8022924 <USBD_LL_ClearStallEP>
  (void)USBD_LL_ClearStallEP(pdev, MSC_EPOUT_ADDR);
 801f6ac:	2101      	movs	r1, #1
 801f6ae:	6878      	ldr	r0, [r7, #4]
 801f6b0:	f003 f938 	bl	8022924 <USBD_LL_ClearStallEP>

  /* Prepare EP to Receive First BOT Cmd */
  (void)USBD_LL_PrepareReceive(pdev, MSC_EPOUT_ADDR, (uint8_t *)&hmsc->cbw,
 801f6b4:	68fb      	ldr	r3, [r7, #12]
 801f6b6:	f503 7204 	add.w	r2, r3, #528	; 0x210
 801f6ba:	231f      	movs	r3, #31
 801f6bc:	2101      	movs	r1, #1
 801f6be:	6878      	ldr	r0, [r7, #4]
 801f6c0:	f003 f9bb 	bl	8022a3a <USBD_LL_PrepareReceive>
 801f6c4:	e000      	b.n	801f6c8 <MSC_BOT_Reset+0x46>
    return;
 801f6c6:	bf00      	nop
                               USBD_BOT_CBW_LENGTH);
}
 801f6c8:	3710      	adds	r7, #16
 801f6ca:	46bd      	mov	sp, r7
 801f6cc:	bd80      	pop	{r7, pc}

0801f6ce <MSC_BOT_DeInit>:
  *         DeInitialize the BOT Machine
  * @param  pdev: device instance
  * @retval None
  */
void MSC_BOT_DeInit(USBD_HandleTypeDef  *pdev)
{
 801f6ce:	b480      	push	{r7}
 801f6d0:	b085      	sub	sp, #20
 801f6d2:	af00      	add	r7, sp, #0
 801f6d4:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 801f6d6:	687b      	ldr	r3, [r7, #4]
 801f6d8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801f6dc:	60fb      	str	r3, [r7, #12]

  if (hmsc != NULL)
 801f6de:	68fb      	ldr	r3, [r7, #12]
 801f6e0:	2b00      	cmp	r3, #0
 801f6e2:	d002      	beq.n	801f6ea <MSC_BOT_DeInit+0x1c>
  {
    hmsc->bot_state = USBD_BOT_IDLE;
 801f6e4:	68fb      	ldr	r3, [r7, #12]
 801f6e6:	2200      	movs	r2, #0
 801f6e8:	721a      	strb	r2, [r3, #8]
  }
}
 801f6ea:	bf00      	nop
 801f6ec:	3714      	adds	r7, #20
 801f6ee:	46bd      	mov	sp, r7
 801f6f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f6f4:	4770      	bx	lr

0801f6f6 <MSC_BOT_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval None
  */
void MSC_BOT_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 801f6f6:	b580      	push	{r7, lr}
 801f6f8:	b084      	sub	sp, #16
 801f6fa:	af00      	add	r7, sp, #0
 801f6fc:	6078      	str	r0, [r7, #4]
 801f6fe:	460b      	mov	r3, r1
 801f700:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 801f702:	687b      	ldr	r3, [r7, #4]
 801f704:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801f708:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 801f70a:	68fb      	ldr	r3, [r7, #12]
 801f70c:	2b00      	cmp	r3, #0
 801f70e:	d020      	beq.n	801f752 <MSC_BOT_DataIn+0x5c>
  {
    return;
  }

  switch (hmsc->bot_state)
 801f710:	68fb      	ldr	r3, [r7, #12]
 801f712:	7a1b      	ldrb	r3, [r3, #8]
 801f714:	2b02      	cmp	r3, #2
 801f716:	d005      	beq.n	801f724 <MSC_BOT_DataIn+0x2e>
 801f718:	2b02      	cmp	r3, #2
 801f71a:	db1c      	blt.n	801f756 <MSC_BOT_DataIn+0x60>
 801f71c:	3b03      	subs	r3, #3
 801f71e:	2b01      	cmp	r3, #1
 801f720:	d819      	bhi.n	801f756 <MSC_BOT_DataIn+0x60>
 801f722:	e011      	b.n	801f748 <MSC_BOT_DataIn+0x52>
  {
    case USBD_BOT_DATA_IN:
      if (SCSI_ProcessCmd(pdev, hmsc->cbw.bLUN, &hmsc->cbw.CB[0]) < 0)
 801f724:	68fb      	ldr	r3, [r7, #12]
 801f726:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 801f72a:	68fb      	ldr	r3, [r7, #12]
 801f72c:	f203 231f 	addw	r3, r3, #543	; 0x21f
 801f730:	461a      	mov	r2, r3
 801f732:	6878      	ldr	r0, [r7, #4]
 801f734:	f000 f992 	bl	801fa5c <SCSI_ProcessCmd>
 801f738:	4603      	mov	r3, r0
 801f73a:	2b00      	cmp	r3, #0
 801f73c:	da0d      	bge.n	801f75a <MSC_BOT_DataIn+0x64>
      {
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 801f73e:	2101      	movs	r1, #1
 801f740:	6878      	ldr	r0, [r7, #4]
 801f742:	f000 f8fb 	bl	801f93c <MSC_BOT_SendCSW>
      }
      break;
 801f746:	e008      	b.n	801f75a <MSC_BOT_DataIn+0x64>

    case USBD_BOT_SEND_DATA:
    case USBD_BOT_LAST_DATA_IN:
      MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_PASSED);
 801f748:	2100      	movs	r1, #0
 801f74a:	6878      	ldr	r0, [r7, #4]
 801f74c:	f000 f8f6 	bl	801f93c <MSC_BOT_SendCSW>
      break;
 801f750:	e004      	b.n	801f75c <MSC_BOT_DataIn+0x66>
    return;
 801f752:	bf00      	nop
 801f754:	e002      	b.n	801f75c <MSC_BOT_DataIn+0x66>

    default:
      break;
 801f756:	bf00      	nop
 801f758:	e000      	b.n	801f75c <MSC_BOT_DataIn+0x66>
      break;
 801f75a:	bf00      	nop
  }
}
 801f75c:	3710      	adds	r7, #16
 801f75e:	46bd      	mov	sp, r7
 801f760:	bd80      	pop	{r7, pc}

0801f762 <MSC_BOT_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval None
  */
void MSC_BOT_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 801f762:	b580      	push	{r7, lr}
 801f764:	b084      	sub	sp, #16
 801f766:	af00      	add	r7, sp, #0
 801f768:	6078      	str	r0, [r7, #4]
 801f76a:	460b      	mov	r3, r1
 801f76c:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 801f76e:	687b      	ldr	r3, [r7, #4]
 801f770:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801f774:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 801f776:	68fb      	ldr	r3, [r7, #12]
 801f778:	2b00      	cmp	r3, #0
 801f77a:	d01c      	beq.n	801f7b6 <MSC_BOT_DataOut+0x54>
  {
    return;
  }

  switch (hmsc->bot_state)
 801f77c:	68fb      	ldr	r3, [r7, #12]
 801f77e:	7a1b      	ldrb	r3, [r3, #8]
 801f780:	2b00      	cmp	r3, #0
 801f782:	d002      	beq.n	801f78a <MSC_BOT_DataOut+0x28>
 801f784:	2b01      	cmp	r3, #1
 801f786:	d004      	beq.n	801f792 <MSC_BOT_DataOut+0x30>
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
      }
      break;

    default:
      break;
 801f788:	e018      	b.n	801f7bc <MSC_BOT_DataOut+0x5a>
      MSC_BOT_CBW_Decode(pdev);
 801f78a:	6878      	ldr	r0, [r7, #4]
 801f78c:	f000 f81a 	bl	801f7c4 <MSC_BOT_CBW_Decode>
      break;
 801f790:	e014      	b.n	801f7bc <MSC_BOT_DataOut+0x5a>
      if (SCSI_ProcessCmd(pdev, hmsc->cbw.bLUN, &hmsc->cbw.CB[0]) < 0)
 801f792:	68fb      	ldr	r3, [r7, #12]
 801f794:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 801f798:	68fb      	ldr	r3, [r7, #12]
 801f79a:	f203 231f 	addw	r3, r3, #543	; 0x21f
 801f79e:	461a      	mov	r2, r3
 801f7a0:	6878      	ldr	r0, [r7, #4]
 801f7a2:	f000 f95b 	bl	801fa5c <SCSI_ProcessCmd>
 801f7a6:	4603      	mov	r3, r0
 801f7a8:	2b00      	cmp	r3, #0
 801f7aa:	da06      	bge.n	801f7ba <MSC_BOT_DataOut+0x58>
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 801f7ac:	2101      	movs	r1, #1
 801f7ae:	6878      	ldr	r0, [r7, #4]
 801f7b0:	f000 f8c4 	bl	801f93c <MSC_BOT_SendCSW>
      break;
 801f7b4:	e001      	b.n	801f7ba <MSC_BOT_DataOut+0x58>
    return;
 801f7b6:	bf00      	nop
 801f7b8:	e000      	b.n	801f7bc <MSC_BOT_DataOut+0x5a>
      break;
 801f7ba:	bf00      	nop
  }
}
 801f7bc:	3710      	adds	r7, #16
 801f7be:	46bd      	mov	sp, r7
 801f7c0:	bd80      	pop	{r7, pc}
	...

0801f7c4 <MSC_BOT_CBW_Decode>:
  *         Decode the CBW command and set the BOT state machine accordingly
  * @param  pdev: device instance
  * @retval None
  */
static void  MSC_BOT_CBW_Decode(USBD_HandleTypeDef *pdev)
{
 801f7c4:	b580      	push	{r7, lr}
 801f7c6:	b084      	sub	sp, #16
 801f7c8:	af00      	add	r7, sp, #0
 801f7ca:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 801f7cc:	687b      	ldr	r3, [r7, #4]
 801f7ce:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801f7d2:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 801f7d4:	68fb      	ldr	r3, [r7, #12]
 801f7d6:	2b00      	cmp	r3, #0
 801f7d8:	d077      	beq.n	801f8ca <MSC_BOT_CBW_Decode+0x106>
  {
    return;
  }

  hmsc->csw.dTag = hmsc->cbw.dTag;
 801f7da:	68fb      	ldr	r3, [r7, #12]
 801f7dc:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 801f7e0:	68fb      	ldr	r3, [r7, #12]
 801f7e2:	f8c3 2234 	str.w	r2, [r3, #564]	; 0x234
  hmsc->csw.dDataResidue = hmsc->cbw.dDataLength;
 801f7e6:	68fb      	ldr	r3, [r7, #12]
 801f7e8:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 801f7ec:	68fb      	ldr	r3, [r7, #12]
 801f7ee:	f8c3 2238 	str.w	r2, [r3, #568]	; 0x238

  if ((USBD_LL_GetRxDataSize(pdev, MSC_EPOUT_ADDR) != USBD_BOT_CBW_LENGTH) ||
 801f7f2:	2101      	movs	r1, #1
 801f7f4:	6878      	ldr	r0, [r7, #4]
 801f7f6:	f003 f941 	bl	8022a7c <USBD_LL_GetRxDataSize>
 801f7fa:	4603      	mov	r3, r0
 801f7fc:	2b1f      	cmp	r3, #31
 801f7fe:	d114      	bne.n	801f82a <MSC_BOT_CBW_Decode+0x66>
      (hmsc->cbw.dSignature != USBD_BOT_CBW_SIGNATURE) ||
 801f800:	68fb      	ldr	r3, [r7, #12]
 801f802:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
  if ((USBD_LL_GetRxDataSize(pdev, MSC_EPOUT_ADDR) != USBD_BOT_CBW_LENGTH) ||
 801f806:	4a34      	ldr	r2, [pc, #208]	; (801f8d8 <MSC_BOT_CBW_Decode+0x114>)
 801f808:	4293      	cmp	r3, r2
 801f80a:	d10e      	bne.n	801f82a <MSC_BOT_CBW_Decode+0x66>
      (hmsc->cbw.bLUN > 1U) || (hmsc->cbw.bCBLength < 1U) ||
 801f80c:	68fb      	ldr	r3, [r7, #12]
 801f80e:	f893 321d 	ldrb.w	r3, [r3, #541]	; 0x21d
      (hmsc->cbw.dSignature != USBD_BOT_CBW_SIGNATURE) ||
 801f812:	2b01      	cmp	r3, #1
 801f814:	d809      	bhi.n	801f82a <MSC_BOT_CBW_Decode+0x66>
      (hmsc->cbw.bLUN > 1U) || (hmsc->cbw.bCBLength < 1U) ||
 801f816:	68fb      	ldr	r3, [r7, #12]
 801f818:	f893 321e 	ldrb.w	r3, [r3, #542]	; 0x21e
 801f81c:	2b00      	cmp	r3, #0
 801f81e:	d004      	beq.n	801f82a <MSC_BOT_CBW_Decode+0x66>
      (hmsc->cbw.bCBLength > 16U))
 801f820:	68fb      	ldr	r3, [r7, #12]
 801f822:	f893 321e 	ldrb.w	r3, [r3, #542]	; 0x21e
      (hmsc->cbw.bLUN > 1U) || (hmsc->cbw.bCBLength < 1U) ||
 801f826:	2b10      	cmp	r3, #16
 801f828:	d90e      	bls.n	801f848 <MSC_BOT_CBW_Decode+0x84>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 801f82a:	68fb      	ldr	r3, [r7, #12]
 801f82c:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 801f830:	2320      	movs	r3, #32
 801f832:	2205      	movs	r2, #5
 801f834:	6878      	ldr	r0, [r7, #4]
 801f836:	f000 fdbc 	bl	80203b2 <SCSI_SenseCode>

    hmsc->bot_status = USBD_BOT_STATUS_ERROR;
 801f83a:	68fb      	ldr	r3, [r7, #12]
 801f83c:	2202      	movs	r2, #2
 801f83e:	725a      	strb	r2, [r3, #9]
    MSC_BOT_Abort(pdev);
 801f840:	6878      	ldr	r0, [r7, #4]
 801f842:	f000 f8ab 	bl	801f99c <MSC_BOT_Abort>
 801f846:	e043      	b.n	801f8d0 <MSC_BOT_CBW_Decode+0x10c>
  }
  else
  {
    if (SCSI_ProcessCmd(pdev, hmsc->cbw.bLUN, &hmsc->cbw.CB[0]) < 0)
 801f848:	68fb      	ldr	r3, [r7, #12]
 801f84a:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 801f84e:	68fb      	ldr	r3, [r7, #12]
 801f850:	f203 231f 	addw	r3, r3, #543	; 0x21f
 801f854:	461a      	mov	r2, r3
 801f856:	6878      	ldr	r0, [r7, #4]
 801f858:	f000 f900 	bl	801fa5c <SCSI_ProcessCmd>
 801f85c:	4603      	mov	r3, r0
 801f85e:	2b00      	cmp	r3, #0
 801f860:	da0c      	bge.n	801f87c <MSC_BOT_CBW_Decode+0xb8>
    {
      if (hmsc->bot_state == USBD_BOT_NO_DATA)
 801f862:	68fb      	ldr	r3, [r7, #12]
 801f864:	7a1b      	ldrb	r3, [r3, #8]
 801f866:	2b05      	cmp	r3, #5
 801f868:	d104      	bne.n	801f874 <MSC_BOT_CBW_Decode+0xb0>
      {
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 801f86a:	2101      	movs	r1, #1
 801f86c:	6878      	ldr	r0, [r7, #4]
 801f86e:	f000 f865 	bl	801f93c <MSC_BOT_SendCSW>
 801f872:	e02d      	b.n	801f8d0 <MSC_BOT_CBW_Decode+0x10c>
      }
      else
      {
        MSC_BOT_Abort(pdev);
 801f874:	6878      	ldr	r0, [r7, #4]
 801f876:	f000 f891 	bl	801f99c <MSC_BOT_Abort>
 801f87a:	e029      	b.n	801f8d0 <MSC_BOT_CBW_Decode+0x10c>
      }
    }
    /* Burst xfer handled internally */
    else if ((hmsc->bot_state != USBD_BOT_DATA_IN) &&
 801f87c:	68fb      	ldr	r3, [r7, #12]
 801f87e:	7a1b      	ldrb	r3, [r3, #8]
 801f880:	2b02      	cmp	r3, #2
 801f882:	d024      	beq.n	801f8ce <MSC_BOT_CBW_Decode+0x10a>
             (hmsc->bot_state != USBD_BOT_DATA_OUT) &&
 801f884:	68fb      	ldr	r3, [r7, #12]
 801f886:	7a1b      	ldrb	r3, [r3, #8]
    else if ((hmsc->bot_state != USBD_BOT_DATA_IN) &&
 801f888:	2b01      	cmp	r3, #1
 801f88a:	d020      	beq.n	801f8ce <MSC_BOT_CBW_Decode+0x10a>
             (hmsc->bot_state != USBD_BOT_LAST_DATA_IN))
 801f88c:	68fb      	ldr	r3, [r7, #12]
 801f88e:	7a1b      	ldrb	r3, [r3, #8]
             (hmsc->bot_state != USBD_BOT_DATA_OUT) &&
 801f890:	2b03      	cmp	r3, #3
 801f892:	d01c      	beq.n	801f8ce <MSC_BOT_CBW_Decode+0x10a>
    {
      if (hmsc->bot_data_length > 0U)
 801f894:	68fb      	ldr	r3, [r7, #12]
 801f896:	68db      	ldr	r3, [r3, #12]
 801f898:	2b00      	cmp	r3, #0
 801f89a:	d009      	beq.n	801f8b0 <MSC_BOT_CBW_Decode+0xec>
      {
        MSC_BOT_SendData(pdev, hmsc->bot_data, hmsc->bot_data_length);
 801f89c:	68fb      	ldr	r3, [r7, #12]
 801f89e:	f103 0110 	add.w	r1, r3, #16
 801f8a2:	68fb      	ldr	r3, [r7, #12]
 801f8a4:	68db      	ldr	r3, [r3, #12]
 801f8a6:	461a      	mov	r2, r3
 801f8a8:	6878      	ldr	r0, [r7, #4]
 801f8aa:	f000 f817 	bl	801f8dc <MSC_BOT_SendData>
      if (hmsc->bot_data_length > 0U)
 801f8ae:	e00f      	b.n	801f8d0 <MSC_BOT_CBW_Decode+0x10c>
      }
      else if (hmsc->bot_data_length == 0U)
 801f8b0:	68fb      	ldr	r3, [r7, #12]
 801f8b2:	68db      	ldr	r3, [r3, #12]
 801f8b4:	2b00      	cmp	r3, #0
 801f8b6:	d104      	bne.n	801f8c2 <MSC_BOT_CBW_Decode+0xfe>
      {
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_PASSED);
 801f8b8:	2100      	movs	r1, #0
 801f8ba:	6878      	ldr	r0, [r7, #4]
 801f8bc:	f000 f83e 	bl	801f93c <MSC_BOT_SendCSW>
      if (hmsc->bot_data_length > 0U)
 801f8c0:	e006      	b.n	801f8d0 <MSC_BOT_CBW_Decode+0x10c>
      }
      else
      {
        MSC_BOT_Abort(pdev);
 801f8c2:	6878      	ldr	r0, [r7, #4]
 801f8c4:	f000 f86a 	bl	801f99c <MSC_BOT_Abort>
      if (hmsc->bot_data_length > 0U)
 801f8c8:	e002      	b.n	801f8d0 <MSC_BOT_CBW_Decode+0x10c>
    return;
 801f8ca:	bf00      	nop
 801f8cc:	e000      	b.n	801f8d0 <MSC_BOT_CBW_Decode+0x10c>
      }
    }
    else
    {
      return;
 801f8ce:	bf00      	nop
    }
  }
}
 801f8d0:	3710      	adds	r7, #16
 801f8d2:	46bd      	mov	sp, r7
 801f8d4:	bd80      	pop	{r7, pc}
 801f8d6:	bf00      	nop
 801f8d8:	43425355 	.word	0x43425355

0801f8dc <MSC_BOT_SendData>:
  * @param  buf: pointer to data buffer
  * @param  len: Data Length
  * @retval None
  */
static void  MSC_BOT_SendData(USBD_HandleTypeDef *pdev, uint8_t *pbuf, uint32_t len)
{
 801f8dc:	b580      	push	{r7, lr}
 801f8de:	b086      	sub	sp, #24
 801f8e0:	af00      	add	r7, sp, #0
 801f8e2:	60f8      	str	r0, [r7, #12]
 801f8e4:	60b9      	str	r1, [r7, #8]
 801f8e6:	607a      	str	r2, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 801f8e8:	68fb      	ldr	r3, [r7, #12]
 801f8ea:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801f8ee:	617b      	str	r3, [r7, #20]

  uint32_t length = MIN(hmsc->cbw.dDataLength, len);
 801f8f0:	697b      	ldr	r3, [r7, #20]
 801f8f2:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 801f8f6:	687a      	ldr	r2, [r7, #4]
 801f8f8:	4293      	cmp	r3, r2
 801f8fa:	bf28      	it	cs
 801f8fc:	4613      	movcs	r3, r2
 801f8fe:	613b      	str	r3, [r7, #16]

  if (hmsc == NULL)
 801f900:	697b      	ldr	r3, [r7, #20]
 801f902:	2b00      	cmp	r3, #0
 801f904:	d015      	beq.n	801f932 <MSC_BOT_SendData+0x56>
  {
    return;
  }

  hmsc->csw.dDataResidue -= len;
 801f906:	697b      	ldr	r3, [r7, #20]
 801f908:	f8d3 2238 	ldr.w	r2, [r3, #568]	; 0x238
 801f90c:	687b      	ldr	r3, [r7, #4]
 801f90e:	1ad2      	subs	r2, r2, r3
 801f910:	697b      	ldr	r3, [r7, #20]
 801f912:	f8c3 2238 	str.w	r2, [r3, #568]	; 0x238
  hmsc->csw.bStatus = USBD_CSW_CMD_PASSED;
 801f916:	697b      	ldr	r3, [r7, #20]
 801f918:	2200      	movs	r2, #0
 801f91a:	f883 223c 	strb.w	r2, [r3, #572]	; 0x23c
  hmsc->bot_state = USBD_BOT_SEND_DATA;
 801f91e:	697b      	ldr	r3, [r7, #20]
 801f920:	2204      	movs	r2, #4
 801f922:	721a      	strb	r2, [r3, #8]

  (void)USBD_LL_Transmit(pdev, MSC_EPIN_ADDR, pbuf, length);
 801f924:	693b      	ldr	r3, [r7, #16]
 801f926:	68ba      	ldr	r2, [r7, #8]
 801f928:	2181      	movs	r1, #129	; 0x81
 801f92a:	68f8      	ldr	r0, [r7, #12]
 801f92c:	f003 f864 	bl	80229f8 <USBD_LL_Transmit>
 801f930:	e000      	b.n	801f934 <MSC_BOT_SendData+0x58>
    return;
 801f932:	bf00      	nop
}
 801f934:	3718      	adds	r7, #24
 801f936:	46bd      	mov	sp, r7
 801f938:	bd80      	pop	{r7, pc}
	...

0801f93c <MSC_BOT_SendCSW>:
  * @param  pdev: device instance
  * @param  status : CSW status
  * @retval None
  */
void  MSC_BOT_SendCSW(USBD_HandleTypeDef *pdev, uint8_t CSW_Status)
{
 801f93c:	b580      	push	{r7, lr}
 801f93e:	b084      	sub	sp, #16
 801f940:	af00      	add	r7, sp, #0
 801f942:	6078      	str	r0, [r7, #4]
 801f944:	460b      	mov	r3, r1
 801f946:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 801f948:	687b      	ldr	r3, [r7, #4]
 801f94a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801f94e:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 801f950:	68fb      	ldr	r3, [r7, #12]
 801f952:	2b00      	cmp	r3, #0
 801f954:	d01b      	beq.n	801f98e <MSC_BOT_SendCSW+0x52>
  {
    return;
  }

  hmsc->csw.dSignature = USBD_BOT_CSW_SIGNATURE;
 801f956:	68fb      	ldr	r3, [r7, #12]
 801f958:	4a0f      	ldr	r2, [pc, #60]	; (801f998 <MSC_BOT_SendCSW+0x5c>)
 801f95a:	f8c3 2230 	str.w	r2, [r3, #560]	; 0x230
  hmsc->csw.bStatus = CSW_Status;
 801f95e:	68fb      	ldr	r3, [r7, #12]
 801f960:	78fa      	ldrb	r2, [r7, #3]
 801f962:	f883 223c 	strb.w	r2, [r3, #572]	; 0x23c
  hmsc->bot_state = USBD_BOT_IDLE;
 801f966:	68fb      	ldr	r3, [r7, #12]
 801f968:	2200      	movs	r2, #0
 801f96a:	721a      	strb	r2, [r3, #8]

  (void)USBD_LL_Transmit(pdev, MSC_EPIN_ADDR, (uint8_t *)&hmsc->csw,
 801f96c:	68fb      	ldr	r3, [r7, #12]
 801f96e:	f503 720c 	add.w	r2, r3, #560	; 0x230
 801f972:	230d      	movs	r3, #13
 801f974:	2181      	movs	r1, #129	; 0x81
 801f976:	6878      	ldr	r0, [r7, #4]
 801f978:	f003 f83e 	bl	80229f8 <USBD_LL_Transmit>
                         USBD_BOT_CSW_LENGTH);

  /* Prepare EP to Receive next Cmd */
  (void)USBD_LL_PrepareReceive(pdev, MSC_EPOUT_ADDR, (uint8_t *)&hmsc->cbw,
 801f97c:	68fb      	ldr	r3, [r7, #12]
 801f97e:	f503 7204 	add.w	r2, r3, #528	; 0x210
 801f982:	231f      	movs	r3, #31
 801f984:	2101      	movs	r1, #1
 801f986:	6878      	ldr	r0, [r7, #4]
 801f988:	f003 f857 	bl	8022a3a <USBD_LL_PrepareReceive>
 801f98c:	e000      	b.n	801f990 <MSC_BOT_SendCSW+0x54>
    return;
 801f98e:	bf00      	nop
                               USBD_BOT_CBW_LENGTH);
}
 801f990:	3710      	adds	r7, #16
 801f992:	46bd      	mov	sp, r7
 801f994:	bd80      	pop	{r7, pc}
 801f996:	bf00      	nop
 801f998:	53425355 	.word	0x53425355

0801f99c <MSC_BOT_Abort>:
  * @param  pdev: device instance
  * @retval status
  */

static void  MSC_BOT_Abort(USBD_HandleTypeDef *pdev)
{
 801f99c:	b580      	push	{r7, lr}
 801f99e:	b084      	sub	sp, #16
 801f9a0:	af00      	add	r7, sp, #0
 801f9a2:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 801f9a4:	687b      	ldr	r3, [r7, #4]
 801f9a6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801f9aa:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 801f9ac:	68fb      	ldr	r3, [r7, #12]
 801f9ae:	2b00      	cmp	r3, #0
 801f9b0:	d022      	beq.n	801f9f8 <MSC_BOT_Abort+0x5c>
  {
    return;
  }

  if ((hmsc->cbw.bmFlags == 0U) &&
 801f9b2:	68fb      	ldr	r3, [r7, #12]
 801f9b4:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
 801f9b8:	2b00      	cmp	r3, #0
 801f9ba:	d10c      	bne.n	801f9d6 <MSC_BOT_Abort+0x3a>
      (hmsc->cbw.dDataLength != 0U) &&
 801f9bc:	68fb      	ldr	r3, [r7, #12]
 801f9be:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
  if ((hmsc->cbw.bmFlags == 0U) &&
 801f9c2:	2b00      	cmp	r3, #0
 801f9c4:	d007      	beq.n	801f9d6 <MSC_BOT_Abort+0x3a>
      (hmsc->bot_status == USBD_BOT_STATUS_NORMAL))
 801f9c6:	68fb      	ldr	r3, [r7, #12]
 801f9c8:	7a5b      	ldrb	r3, [r3, #9]
      (hmsc->cbw.dDataLength != 0U) &&
 801f9ca:	2b00      	cmp	r3, #0
 801f9cc:	d103      	bne.n	801f9d6 <MSC_BOT_Abort+0x3a>
  {
    (void)USBD_LL_StallEP(pdev, MSC_EPOUT_ADDR);
 801f9ce:	2101      	movs	r1, #1
 801f9d0:	6878      	ldr	r0, [r7, #4]
 801f9d2:	f002 ff88 	bl	80228e6 <USBD_LL_StallEP>
  }

  (void)USBD_LL_StallEP(pdev, MSC_EPIN_ADDR);
 801f9d6:	2181      	movs	r1, #129	; 0x81
 801f9d8:	6878      	ldr	r0, [r7, #4]
 801f9da:	f002 ff84 	bl	80228e6 <USBD_LL_StallEP>

  if (hmsc->bot_status == USBD_BOT_STATUS_ERROR)
 801f9de:	68fb      	ldr	r3, [r7, #12]
 801f9e0:	7a5b      	ldrb	r3, [r3, #9]
 801f9e2:	2b02      	cmp	r3, #2
 801f9e4:	d109      	bne.n	801f9fa <MSC_BOT_Abort+0x5e>
  {
    (void)USBD_LL_StallEP(pdev, MSC_EPIN_ADDR);
 801f9e6:	2181      	movs	r1, #129	; 0x81
 801f9e8:	6878      	ldr	r0, [r7, #4]
 801f9ea:	f002 ff7c 	bl	80228e6 <USBD_LL_StallEP>
    (void)USBD_LL_StallEP(pdev, MSC_EPOUT_ADDR);
 801f9ee:	2101      	movs	r1, #1
 801f9f0:	6878      	ldr	r0, [r7, #4]
 801f9f2:	f002 ff78 	bl	80228e6 <USBD_LL_StallEP>
 801f9f6:	e000      	b.n	801f9fa <MSC_BOT_Abort+0x5e>
    return;
 801f9f8:	bf00      	nop
  }
}
 801f9fa:	3710      	adds	r7, #16
 801f9fc:	46bd      	mov	sp, r7
 801f9fe:	bd80      	pop	{r7, pc}

0801fa00 <MSC_BOT_CplClrFeature>:
  * @param  epnum: endpoint index
  * @retval None
  */

void  MSC_BOT_CplClrFeature(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 801fa00:	b580      	push	{r7, lr}
 801fa02:	b084      	sub	sp, #16
 801fa04:	af00      	add	r7, sp, #0
 801fa06:	6078      	str	r0, [r7, #4]
 801fa08:	460b      	mov	r3, r1
 801fa0a:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 801fa0c:	687b      	ldr	r3, [r7, #4]
 801fa0e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801fa12:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 801fa14:	68fb      	ldr	r3, [r7, #12]
 801fa16:	2b00      	cmp	r3, #0
 801fa18:	d019      	beq.n	801fa4e <MSC_BOT_CplClrFeature+0x4e>
  {
    return;
  }

  if (hmsc->bot_status == USBD_BOT_STATUS_ERROR) /* Bad CBW Signature */
 801fa1a:	68fb      	ldr	r3, [r7, #12]
 801fa1c:	7a5b      	ldrb	r3, [r3, #9]
 801fa1e:	2b02      	cmp	r3, #2
 801fa20:	d108      	bne.n	801fa34 <MSC_BOT_CplClrFeature+0x34>
  {
    (void)USBD_LL_StallEP(pdev, MSC_EPIN_ADDR);
 801fa22:	2181      	movs	r1, #129	; 0x81
 801fa24:	6878      	ldr	r0, [r7, #4]
 801fa26:	f002 ff5e 	bl	80228e6 <USBD_LL_StallEP>
    (void)USBD_LL_StallEP(pdev, MSC_EPOUT_ADDR);
 801fa2a:	2101      	movs	r1, #1
 801fa2c:	6878      	ldr	r0, [r7, #4]
 801fa2e:	f002 ff5a 	bl	80228e6 <USBD_LL_StallEP>
 801fa32:	e00f      	b.n	801fa54 <MSC_BOT_CplClrFeature+0x54>
  }
  else if (((epnum & 0x80U) == 0x80U) && (hmsc->bot_status != USBD_BOT_STATUS_RECOVERY))
 801fa34:	f997 3003 	ldrsb.w	r3, [r7, #3]
 801fa38:	2b00      	cmp	r3, #0
 801fa3a:	da0a      	bge.n	801fa52 <MSC_BOT_CplClrFeature+0x52>
 801fa3c:	68fb      	ldr	r3, [r7, #12]
 801fa3e:	7a5b      	ldrb	r3, [r3, #9]
 801fa40:	2b01      	cmp	r3, #1
 801fa42:	d006      	beq.n	801fa52 <MSC_BOT_CplClrFeature+0x52>
  {
    MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 801fa44:	2101      	movs	r1, #1
 801fa46:	6878      	ldr	r0, [r7, #4]
 801fa48:	f7ff ff78 	bl	801f93c <MSC_BOT_SendCSW>
 801fa4c:	e002      	b.n	801fa54 <MSC_BOT_CplClrFeature+0x54>
    return;
 801fa4e:	bf00      	nop
 801fa50:	e000      	b.n	801fa54 <MSC_BOT_CplClrFeature+0x54>
  }
  else
  {
    return;
 801fa52:	bf00      	nop
  }
}
 801fa54:	3710      	adds	r7, #16
 801fa56:	46bd      	mov	sp, r7
 801fa58:	bd80      	pop	{r7, pc}
	...

0801fa5c <SCSI_ProcessCmd>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
int8_t SCSI_ProcessCmd(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *cmd)
{
 801fa5c:	b580      	push	{r7, lr}
 801fa5e:	b086      	sub	sp, #24
 801fa60:	af00      	add	r7, sp, #0
 801fa62:	60f8      	str	r0, [r7, #12]
 801fa64:	460b      	mov	r3, r1
 801fa66:	607a      	str	r2, [r7, #4]
 801fa68:	72fb      	strb	r3, [r7, #11]
  int8_t ret;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 801fa6a:	68fb      	ldr	r3, [r7, #12]
 801fa6c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801fa70:	613b      	str	r3, [r7, #16]

  if (hmsc == NULL)
 801fa72:	693b      	ldr	r3, [r7, #16]
 801fa74:	2b00      	cmp	r3, #0
 801fa76:	d102      	bne.n	801fa7e <SCSI_ProcessCmd+0x22>
  {
    return -1;
 801fa78:	f04f 33ff 	mov.w	r3, #4294967295
 801fa7c:	e168      	b.n	801fd50 <SCSI_ProcessCmd+0x2f4>
  }

  switch (cmd[0])
 801fa7e:	687b      	ldr	r3, [r7, #4]
 801fa80:	781b      	ldrb	r3, [r3, #0]
 801fa82:	2baa      	cmp	r3, #170	; 0xaa
 801fa84:	f000 8144 	beq.w	801fd10 <SCSI_ProcessCmd+0x2b4>
 801fa88:	2baa      	cmp	r3, #170	; 0xaa
 801fa8a:	f300 8153 	bgt.w	801fd34 <SCSI_ProcessCmd+0x2d8>
 801fa8e:	2ba8      	cmp	r3, #168	; 0xa8
 801fa90:	f000 812c 	beq.w	801fcec <SCSI_ProcessCmd+0x290>
 801fa94:	2ba8      	cmp	r3, #168	; 0xa8
 801fa96:	f300 814d 	bgt.w	801fd34 <SCSI_ProcessCmd+0x2d8>
 801fa9a:	2b5a      	cmp	r3, #90	; 0x5a
 801fa9c:	f300 80c0 	bgt.w	801fc20 <SCSI_ProcessCmd+0x1c4>
 801faa0:	2b00      	cmp	r3, #0
 801faa2:	f2c0 8147 	blt.w	801fd34 <SCSI_ProcessCmd+0x2d8>
 801faa6:	2b5a      	cmp	r3, #90	; 0x5a
 801faa8:	f200 8144 	bhi.w	801fd34 <SCSI_ProcessCmd+0x2d8>
 801faac:	a201      	add	r2, pc, #4	; (adr r2, 801fab4 <SCSI_ProcessCmd+0x58>)
 801faae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801fab2:	bf00      	nop
 801fab4:	0801fc27 	.word	0x0801fc27
 801fab8:	0801fd35 	.word	0x0801fd35
 801fabc:	0801fd35 	.word	0x0801fd35
 801fac0:	0801fc39 	.word	0x0801fc39
 801fac4:	0801fd35 	.word	0x0801fd35
 801fac8:	0801fd35 	.word	0x0801fd35
 801facc:	0801fd35 	.word	0x0801fd35
 801fad0:	0801fd35 	.word	0x0801fd35
 801fad4:	0801fd35 	.word	0x0801fd35
 801fad8:	0801fd35 	.word	0x0801fd35
 801fadc:	0801fd35 	.word	0x0801fd35
 801fae0:	0801fd35 	.word	0x0801fd35
 801fae4:	0801fd35 	.word	0x0801fd35
 801fae8:	0801fd35 	.word	0x0801fd35
 801faec:	0801fd35 	.word	0x0801fd35
 801faf0:	0801fd35 	.word	0x0801fd35
 801faf4:	0801fd35 	.word	0x0801fd35
 801faf8:	0801fd35 	.word	0x0801fd35
 801fafc:	0801fc4b 	.word	0x0801fc4b
 801fb00:	0801fd35 	.word	0x0801fd35
 801fb04:	0801fd35 	.word	0x0801fd35
 801fb08:	0801fd35 	.word	0x0801fd35
 801fb0c:	0801fd35 	.word	0x0801fd35
 801fb10:	0801fd35 	.word	0x0801fd35
 801fb14:	0801fd35 	.word	0x0801fd35
 801fb18:	0801fd35 	.word	0x0801fd35
 801fb1c:	0801fc81 	.word	0x0801fc81
 801fb20:	0801fc5d 	.word	0x0801fc5d
 801fb24:	0801fd35 	.word	0x0801fd35
 801fb28:	0801fd35 	.word	0x0801fd35
 801fb2c:	0801fc6f 	.word	0x0801fc6f
 801fb30:	0801fd35 	.word	0x0801fd35
 801fb34:	0801fd35 	.word	0x0801fd35
 801fb38:	0801fd35 	.word	0x0801fd35
 801fb3c:	0801fd35 	.word	0x0801fd35
 801fb40:	0801fca5 	.word	0x0801fca5
 801fb44:	0801fd35 	.word	0x0801fd35
 801fb48:	0801fcb7 	.word	0x0801fcb7
 801fb4c:	0801fd35 	.word	0x0801fd35
 801fb50:	0801fd35 	.word	0x0801fd35
 801fb54:	0801fcdb 	.word	0x0801fcdb
 801fb58:	0801fd35 	.word	0x0801fd35
 801fb5c:	0801fcff 	.word	0x0801fcff
 801fb60:	0801fd35 	.word	0x0801fd35
 801fb64:	0801fd35 	.word	0x0801fd35
 801fb68:	0801fd35 	.word	0x0801fd35
 801fb6c:	0801fd35 	.word	0x0801fd35
 801fb70:	0801fd23 	.word	0x0801fd23
 801fb74:	0801fd35 	.word	0x0801fd35
 801fb78:	0801fd35 	.word	0x0801fd35
 801fb7c:	0801fd35 	.word	0x0801fd35
 801fb80:	0801fd35 	.word	0x0801fd35
 801fb84:	0801fd35 	.word	0x0801fd35
 801fb88:	0801fd35 	.word	0x0801fd35
 801fb8c:	0801fd35 	.word	0x0801fd35
 801fb90:	0801fd35 	.word	0x0801fd35
 801fb94:	0801fd35 	.word	0x0801fd35
 801fb98:	0801fd35 	.word	0x0801fd35
 801fb9c:	0801fd35 	.word	0x0801fd35
 801fba0:	0801fd35 	.word	0x0801fd35
 801fba4:	0801fd35 	.word	0x0801fd35
 801fba8:	0801fd35 	.word	0x0801fd35
 801fbac:	0801fd35 	.word	0x0801fd35
 801fbb0:	0801fd35 	.word	0x0801fd35
 801fbb4:	0801fd35 	.word	0x0801fd35
 801fbb8:	0801fd35 	.word	0x0801fd35
 801fbbc:	0801fd35 	.word	0x0801fd35
 801fbc0:	0801fd35 	.word	0x0801fd35
 801fbc4:	0801fd35 	.word	0x0801fd35
 801fbc8:	0801fd35 	.word	0x0801fd35
 801fbcc:	0801fd35 	.word	0x0801fd35
 801fbd0:	0801fd35 	.word	0x0801fd35
 801fbd4:	0801fd35 	.word	0x0801fd35
 801fbd8:	0801fd35 	.word	0x0801fd35
 801fbdc:	0801fd35 	.word	0x0801fd35
 801fbe0:	0801fd35 	.word	0x0801fd35
 801fbe4:	0801fd35 	.word	0x0801fd35
 801fbe8:	0801fd35 	.word	0x0801fd35
 801fbec:	0801fd35 	.word	0x0801fd35
 801fbf0:	0801fd35 	.word	0x0801fd35
 801fbf4:	0801fd35 	.word	0x0801fd35
 801fbf8:	0801fd35 	.word	0x0801fd35
 801fbfc:	0801fd35 	.word	0x0801fd35
 801fc00:	0801fd35 	.word	0x0801fd35
 801fc04:	0801fd35 	.word	0x0801fd35
 801fc08:	0801fd35 	.word	0x0801fd35
 801fc0c:	0801fd35 	.word	0x0801fd35
 801fc10:	0801fd35 	.word	0x0801fd35
 801fc14:	0801fd35 	.word	0x0801fd35
 801fc18:	0801fd35 	.word	0x0801fd35
 801fc1c:	0801fc93 	.word	0x0801fc93
 801fc20:	2b9e      	cmp	r3, #158	; 0x9e
 801fc22:	d051      	beq.n	801fcc8 <SCSI_ProcessCmd+0x26c>
 801fc24:	e086      	b.n	801fd34 <SCSI_ProcessCmd+0x2d8>
  {
    case SCSI_TEST_UNIT_READY:
      ret = SCSI_TestUnitReady(pdev, lun, cmd);
 801fc26:	7afb      	ldrb	r3, [r7, #11]
 801fc28:	687a      	ldr	r2, [r7, #4]
 801fc2a:	4619      	mov	r1, r3
 801fc2c:	68f8      	ldr	r0, [r7, #12]
 801fc2e:	f000 f893 	bl	801fd58 <SCSI_TestUnitReady>
 801fc32:	4603      	mov	r3, r0
 801fc34:	75fb      	strb	r3, [r7, #23]
      break;
 801fc36:	e089      	b.n	801fd4c <SCSI_ProcessCmd+0x2f0>

    case SCSI_REQUEST_SENSE:
      ret = SCSI_RequestSense(pdev, lun, cmd);
 801fc38:	7afb      	ldrb	r3, [r7, #11]
 801fc3a:	687a      	ldr	r2, [r7, #4]
 801fc3c:	4619      	mov	r1, r3
 801fc3e:	68f8      	ldr	r0, [r7, #12]
 801fc40:	f000 fb38 	bl	80202b4 <SCSI_RequestSense>
 801fc44:	4603      	mov	r3, r0
 801fc46:	75fb      	strb	r3, [r7, #23]
      break;
 801fc48:	e080      	b.n	801fd4c <SCSI_ProcessCmd+0x2f0>

    case SCSI_INQUIRY:
      ret = SCSI_Inquiry(pdev, lun, cmd);
 801fc4a:	7afb      	ldrb	r3, [r7, #11]
 801fc4c:	687a      	ldr	r2, [r7, #4]
 801fc4e:	4619      	mov	r1, r3
 801fc50:	68f8      	ldr	r0, [r7, #12]
 801fc52:	f000 f8d1 	bl	801fdf8 <SCSI_Inquiry>
 801fc56:	4603      	mov	r3, r0
 801fc58:	75fb      	strb	r3, [r7, #23]
      break;
 801fc5a:	e077      	b.n	801fd4c <SCSI_ProcessCmd+0x2f0>

    case SCSI_START_STOP_UNIT:
      ret = SCSI_StartStopUnit(pdev, lun, cmd);
 801fc5c:	7afb      	ldrb	r3, [r7, #11]
 801fc5e:	687a      	ldr	r2, [r7, #4]
 801fc60:	4619      	mov	r1, r3
 801fc62:	68f8      	ldr	r0, [r7, #12]
 801fc64:	f000 fbec 	bl	8020440 <SCSI_StartStopUnit>
 801fc68:	4603      	mov	r3, r0
 801fc6a:	75fb      	strb	r3, [r7, #23]
      break;
 801fc6c:	e06e      	b.n	801fd4c <SCSI_ProcessCmd+0x2f0>

    case SCSI_ALLOW_MEDIUM_REMOVAL:
      ret = SCSI_AllowPreventRemovable(pdev, lun, cmd);
 801fc6e:	7afb      	ldrb	r3, [r7, #11]
 801fc70:	687a      	ldr	r2, [r7, #4]
 801fc72:	4619      	mov	r1, r3
 801fc74:	68f8      	ldr	r0, [r7, #12]
 801fc76:	f000 fc34 	bl	80204e2 <SCSI_AllowPreventRemovable>
 801fc7a:	4603      	mov	r3, r0
 801fc7c:	75fb      	strb	r3, [r7, #23]
      break;
 801fc7e:	e065      	b.n	801fd4c <SCSI_ProcessCmd+0x2f0>

    case SCSI_MODE_SENSE6:
      ret = SCSI_ModeSense6(pdev, lun, cmd);
 801fc80:	7afb      	ldrb	r3, [r7, #11]
 801fc82:	687a      	ldr	r2, [r7, #4]
 801fc84:	4619      	mov	r1, r3
 801fc86:	68f8      	ldr	r0, [r7, #12]
 801fc88:	f000 fabc 	bl	8020204 <SCSI_ModeSense6>
 801fc8c:	4603      	mov	r3, r0
 801fc8e:	75fb      	strb	r3, [r7, #23]
      break;
 801fc90:	e05c      	b.n	801fd4c <SCSI_ProcessCmd+0x2f0>

    case SCSI_MODE_SENSE10:
      ret = SCSI_ModeSense10(pdev, lun, cmd);
 801fc92:	7afb      	ldrb	r3, [r7, #11]
 801fc94:	687a      	ldr	r2, [r7, #4]
 801fc96:	4619      	mov	r1, r3
 801fc98:	68f8      	ldr	r0, [r7, #12]
 801fc9a:	f000 fadf 	bl	802025c <SCSI_ModeSense10>
 801fc9e:	4603      	mov	r3, r0
 801fca0:	75fb      	strb	r3, [r7, #23]
      break;
 801fca2:	e053      	b.n	801fd4c <SCSI_ProcessCmd+0x2f0>

    case SCSI_READ_FORMAT_CAPACITIES:
      ret = SCSI_ReadFormatCapacity(pdev, lun, cmd);
 801fca4:	7afb      	ldrb	r3, [r7, #11]
 801fca6:	687a      	ldr	r2, [r7, #4]
 801fca8:	4619      	mov	r1, r3
 801fcaa:	68f8      	ldr	r0, [r7, #12]
 801fcac:	f000 fa37 	bl	802011e <SCSI_ReadFormatCapacity>
 801fcb0:	4603      	mov	r3, r0
 801fcb2:	75fb      	strb	r3, [r7, #23]
      break;
 801fcb4:	e04a      	b.n	801fd4c <SCSI_ProcessCmd+0x2f0>

    case SCSI_READ_CAPACITY10:
      ret = SCSI_ReadCapacity10(pdev, lun, cmd);
 801fcb6:	7afb      	ldrb	r3, [r7, #11]
 801fcb8:	687a      	ldr	r2, [r7, #4]
 801fcba:	4619      	mov	r1, r3
 801fcbc:	68f8      	ldr	r0, [r7, #12]
 801fcbe:	f000 f90f 	bl	801fee0 <SCSI_ReadCapacity10>
 801fcc2:	4603      	mov	r3, r0
 801fcc4:	75fb      	strb	r3, [r7, #23]
      break;
 801fcc6:	e041      	b.n	801fd4c <SCSI_ProcessCmd+0x2f0>

    case SCSI_READ_CAPACITY16:
      ret = SCSI_ReadCapacity16(pdev, lun, cmd);
 801fcc8:	7afb      	ldrb	r3, [r7, #11]
 801fcca:	687a      	ldr	r2, [r7, #4]
 801fccc:	4619      	mov	r1, r3
 801fcce:	68f8      	ldr	r0, [r7, #12]
 801fcd0:	f000 f97b 	bl	801ffca <SCSI_ReadCapacity16>
 801fcd4:	4603      	mov	r3, r0
 801fcd6:	75fb      	strb	r3, [r7, #23]
      break;
 801fcd8:	e038      	b.n	801fd4c <SCSI_ProcessCmd+0x2f0>

    case SCSI_READ10:
      ret = SCSI_Read10(pdev, lun, cmd);
 801fcda:	7afb      	ldrb	r3, [r7, #11]
 801fcdc:	687a      	ldr	r2, [r7, #4]
 801fcde:	4619      	mov	r1, r3
 801fce0:	68f8      	ldr	r0, [r7, #12]
 801fce2:	f000 fc27 	bl	8020534 <SCSI_Read10>
 801fce6:	4603      	mov	r3, r0
 801fce8:	75fb      	strb	r3, [r7, #23]
      break;
 801fcea:	e02f      	b.n	801fd4c <SCSI_ProcessCmd+0x2f0>

    case SCSI_READ12:
      ret = SCSI_Read12(pdev, lun, cmd);
 801fcec:	7afb      	ldrb	r3, [r7, #11]
 801fcee:	687a      	ldr	r2, [r7, #4]
 801fcf0:	4619      	mov	r1, r3
 801fcf2:	68f8      	ldr	r0, [r7, #12]
 801fcf4:	f000 fcbe 	bl	8020674 <SCSI_Read12>
 801fcf8:	4603      	mov	r3, r0
 801fcfa:	75fb      	strb	r3, [r7, #23]
      break;
 801fcfc:	e026      	b.n	801fd4c <SCSI_ProcessCmd+0x2f0>

    case SCSI_WRITE10:
      ret = SCSI_Write10(pdev, lun, cmd);
 801fcfe:	7afb      	ldrb	r3, [r7, #11]
 801fd00:	687a      	ldr	r2, [r7, #4]
 801fd02:	4619      	mov	r1, r3
 801fd04:	68f8      	ldr	r0, [r7, #12]
 801fd06:	f000 fd60 	bl	80207ca <SCSI_Write10>
 801fd0a:	4603      	mov	r3, r0
 801fd0c:	75fb      	strb	r3, [r7, #23]
      break;
 801fd0e:	e01d      	b.n	801fd4c <SCSI_ProcessCmd+0x2f0>

    case SCSI_WRITE12:
      ret = SCSI_Write12(pdev, lun, cmd);
 801fd10:	7afb      	ldrb	r3, [r7, #11]
 801fd12:	687a      	ldr	r2, [r7, #4]
 801fd14:	4619      	mov	r1, r3
 801fd16:	68f8      	ldr	r0, [r7, #12]
 801fd18:	f000 fe1c 	bl	8020954 <SCSI_Write12>
 801fd1c:	4603      	mov	r3, r0
 801fd1e:	75fb      	strb	r3, [r7, #23]
      break;
 801fd20:	e014      	b.n	801fd4c <SCSI_ProcessCmd+0x2f0>

    case SCSI_VERIFY10:
      ret = SCSI_Verify10(pdev, lun, cmd);
 801fd22:	7afb      	ldrb	r3, [r7, #11]
 801fd24:	687a      	ldr	r2, [r7, #4]
 801fd26:	4619      	mov	r1, r3
 801fd28:	68f8      	ldr	r0, [r7, #12]
 801fd2a:	f000 fee8 	bl	8020afe <SCSI_Verify10>
 801fd2e:	4603      	mov	r3, r0
 801fd30:	75fb      	strb	r3, [r7, #23]
      break;
 801fd32:	e00b      	b.n	801fd4c <SCSI_ProcessCmd+0x2f0>

    default:
      SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, INVALID_CDB);
 801fd34:	7af9      	ldrb	r1, [r7, #11]
 801fd36:	2320      	movs	r3, #32
 801fd38:	2205      	movs	r2, #5
 801fd3a:	68f8      	ldr	r0, [r7, #12]
 801fd3c:	f000 fb39 	bl	80203b2 <SCSI_SenseCode>
      hmsc->bot_status = USBD_BOT_STATUS_ERROR;
 801fd40:	693b      	ldr	r3, [r7, #16]
 801fd42:	2202      	movs	r2, #2
 801fd44:	725a      	strb	r2, [r3, #9]
      ret = -1;
 801fd46:	23ff      	movs	r3, #255	; 0xff
 801fd48:	75fb      	strb	r3, [r7, #23]
      break;
 801fd4a:	bf00      	nop
  }

  return ret;
 801fd4c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801fd50:	4618      	mov	r0, r3
 801fd52:	3718      	adds	r7, #24
 801fd54:	46bd      	mov	sp, r7
 801fd56:	bd80      	pop	{r7, pc}

0801fd58 <SCSI_TestUnitReady>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_TestUnitReady(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 801fd58:	b580      	push	{r7, lr}
 801fd5a:	b086      	sub	sp, #24
 801fd5c:	af00      	add	r7, sp, #0
 801fd5e:	60f8      	str	r0, [r7, #12]
 801fd60:	460b      	mov	r3, r1
 801fd62:	607a      	str	r2, [r7, #4]
 801fd64:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 801fd66:	68fb      	ldr	r3, [r7, #12]
 801fd68:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801fd6c:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 801fd6e:	697b      	ldr	r3, [r7, #20]
 801fd70:	2b00      	cmp	r3, #0
 801fd72:	d102      	bne.n	801fd7a <SCSI_TestUnitReady+0x22>
  {
    return -1;
 801fd74:	f04f 33ff 	mov.w	r3, #4294967295
 801fd78:	e03a      	b.n	801fdf0 <SCSI_TestUnitReady+0x98>
  }

  /* case 9 : Hi > D0 */
  if (hmsc->cbw.dDataLength != 0U)
 801fd7a:	697b      	ldr	r3, [r7, #20]
 801fd7c:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 801fd80:	2b00      	cmp	r3, #0
 801fd82:	d00a      	beq.n	801fd9a <SCSI_TestUnitReady+0x42>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 801fd84:	697b      	ldr	r3, [r7, #20]
 801fd86:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 801fd8a:	2320      	movs	r3, #32
 801fd8c:	2205      	movs	r2, #5
 801fd8e:	68f8      	ldr	r0, [r7, #12]
 801fd90:	f000 fb0f 	bl	80203b2 <SCSI_SenseCode>

    return -1;
 801fd94:	f04f 33ff 	mov.w	r3, #4294967295
 801fd98:	e02a      	b.n	801fdf0 <SCSI_TestUnitReady+0x98>
  }

  if (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED)
 801fd9a:	697b      	ldr	r3, [r7, #20]
 801fd9c:	f893 3262 	ldrb.w	r3, [r3, #610]	; 0x262
 801fda0:	2b02      	cmp	r3, #2
 801fda2:	d10b      	bne.n	801fdbc <SCSI_TestUnitReady+0x64>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 801fda4:	7af9      	ldrb	r1, [r7, #11]
 801fda6:	233a      	movs	r3, #58	; 0x3a
 801fda8:	2202      	movs	r2, #2
 801fdaa:	68f8      	ldr	r0, [r7, #12]
 801fdac:	f000 fb01 	bl	80203b2 <SCSI_SenseCode>
    hmsc->bot_state = USBD_BOT_NO_DATA;
 801fdb0:	697b      	ldr	r3, [r7, #20]
 801fdb2:	2205      	movs	r2, #5
 801fdb4:	721a      	strb	r2, [r3, #8]
    return -1;
 801fdb6:	f04f 33ff 	mov.w	r3, #4294967295
 801fdba:	e019      	b.n	801fdf0 <SCSI_TestUnitReady+0x98>
  }

  if (((USBD_StorageTypeDef *)pdev->pUserData)->IsReady(lun) != 0)
 801fdbc:	68fb      	ldr	r3, [r7, #12]
 801fdbe:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 801fdc2:	689b      	ldr	r3, [r3, #8]
 801fdc4:	7afa      	ldrb	r2, [r7, #11]
 801fdc6:	4610      	mov	r0, r2
 801fdc8:	4798      	blx	r3
 801fdca:	4603      	mov	r3, r0
 801fdcc:	2b00      	cmp	r3, #0
 801fdce:	d00b      	beq.n	801fde8 <SCSI_TestUnitReady+0x90>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 801fdd0:	7af9      	ldrb	r1, [r7, #11]
 801fdd2:	233a      	movs	r3, #58	; 0x3a
 801fdd4:	2202      	movs	r2, #2
 801fdd6:	68f8      	ldr	r0, [r7, #12]
 801fdd8:	f000 faeb 	bl	80203b2 <SCSI_SenseCode>
    hmsc->bot_state = USBD_BOT_NO_DATA;
 801fddc:	697b      	ldr	r3, [r7, #20]
 801fdde:	2205      	movs	r2, #5
 801fde0:	721a      	strb	r2, [r3, #8]

    return -1;
 801fde2:	f04f 33ff 	mov.w	r3, #4294967295
 801fde6:	e003      	b.n	801fdf0 <SCSI_TestUnitReady+0x98>
  }
  hmsc->bot_data_length = 0U;
 801fde8:	697b      	ldr	r3, [r7, #20]
 801fdea:	2200      	movs	r2, #0
 801fdec:	60da      	str	r2, [r3, #12]

  return 0;
 801fdee:	2300      	movs	r3, #0
}
 801fdf0:	4618      	mov	r0, r3
 801fdf2:	3718      	adds	r7, #24
 801fdf4:	46bd      	mov	sp, r7
 801fdf6:	bd80      	pop	{r7, pc}

0801fdf8 <SCSI_Inquiry>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Inquiry(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 801fdf8:	b580      	push	{r7, lr}
 801fdfa:	b088      	sub	sp, #32
 801fdfc:	af00      	add	r7, sp, #0
 801fdfe:	60f8      	str	r0, [r7, #12]
 801fe00:	460b      	mov	r3, r1
 801fe02:	607a      	str	r2, [r7, #4]
 801fe04:	72fb      	strb	r3, [r7, #11]
  uint8_t *pPage;
  uint16_t len;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 801fe06:	68fb      	ldr	r3, [r7, #12]
 801fe08:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801fe0c:	61bb      	str	r3, [r7, #24]

  if (hmsc == NULL)
 801fe0e:	69bb      	ldr	r3, [r7, #24]
 801fe10:	2b00      	cmp	r3, #0
 801fe12:	d102      	bne.n	801fe1a <SCSI_Inquiry+0x22>
  {
    return -1;
 801fe14:	f04f 33ff 	mov.w	r3, #4294967295
 801fe18:	e05a      	b.n	801fed0 <SCSI_Inquiry+0xd8>
  }

  if (hmsc->cbw.dDataLength == 0U)
 801fe1a:	69bb      	ldr	r3, [r7, #24]
 801fe1c:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 801fe20:	2b00      	cmp	r3, #0
 801fe22:	d10a      	bne.n	801fe3a <SCSI_Inquiry+0x42>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 801fe24:	69bb      	ldr	r3, [r7, #24]
 801fe26:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 801fe2a:	2320      	movs	r3, #32
 801fe2c:	2205      	movs	r2, #5
 801fe2e:	68f8      	ldr	r0, [r7, #12]
 801fe30:	f000 fabf 	bl	80203b2 <SCSI_SenseCode>
    return -1;
 801fe34:	f04f 33ff 	mov.w	r3, #4294967295
 801fe38:	e04a      	b.n	801fed0 <SCSI_Inquiry+0xd8>
  }

  if ((params[1] & 0x01U) != 0U) /* Evpd is set */
 801fe3a:	687b      	ldr	r3, [r7, #4]
 801fe3c:	3301      	adds	r3, #1
 801fe3e:	781b      	ldrb	r3, [r3, #0]
 801fe40:	f003 0301 	and.w	r3, r3, #1
 801fe44:	2b00      	cmp	r3, #0
 801fe46:	d020      	beq.n	801fe8a <SCSI_Inquiry+0x92>
  {
    if (params[2] == 0U) /* Request for Supported Vital Product Data Pages*/
 801fe48:	687b      	ldr	r3, [r7, #4]
 801fe4a:	3302      	adds	r3, #2
 801fe4c:	781b      	ldrb	r3, [r3, #0]
 801fe4e:	2b00      	cmp	r3, #0
 801fe50:	d105      	bne.n	801fe5e <SCSI_Inquiry+0x66>
    {
      (void)SCSI_UpdateBotData(hmsc, MSC_Page00_Inquiry_Data, LENGTH_INQUIRY_PAGE00);
 801fe52:	2206      	movs	r2, #6
 801fe54:	4920      	ldr	r1, [pc, #128]	; (801fed8 <SCSI_Inquiry+0xe0>)
 801fe56:	69b8      	ldr	r0, [r7, #24]
 801fe58:	f000 ffb4 	bl	8020dc4 <SCSI_UpdateBotData>
 801fe5c:	e037      	b.n	801fece <SCSI_Inquiry+0xd6>
    }
    else if (params[2] == 0x80U) /* Request for VPD page 0x80 Unit Serial Number */
 801fe5e:	687b      	ldr	r3, [r7, #4]
 801fe60:	3302      	adds	r3, #2
 801fe62:	781b      	ldrb	r3, [r3, #0]
 801fe64:	2b80      	cmp	r3, #128	; 0x80
 801fe66:	d105      	bne.n	801fe74 <SCSI_Inquiry+0x7c>
    {
      (void)SCSI_UpdateBotData(hmsc, MSC_Page80_Inquiry_Data, LENGTH_INQUIRY_PAGE80);
 801fe68:	2208      	movs	r2, #8
 801fe6a:	491c      	ldr	r1, [pc, #112]	; (801fedc <SCSI_Inquiry+0xe4>)
 801fe6c:	69b8      	ldr	r0, [r7, #24]
 801fe6e:	f000 ffa9 	bl	8020dc4 <SCSI_UpdateBotData>
 801fe72:	e02c      	b.n	801fece <SCSI_Inquiry+0xd6>
    }
    else /* Request Not supported */
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST,
 801fe74:	69bb      	ldr	r3, [r7, #24]
 801fe76:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 801fe7a:	2324      	movs	r3, #36	; 0x24
 801fe7c:	2205      	movs	r2, #5
 801fe7e:	68f8      	ldr	r0, [r7, #12]
 801fe80:	f000 fa97 	bl	80203b2 <SCSI_SenseCode>
                     INVALID_FIELED_IN_COMMAND);

      return -1;
 801fe84:	f04f 33ff 	mov.w	r3, #4294967295
 801fe88:	e022      	b.n	801fed0 <SCSI_Inquiry+0xd8>
    }
  }
  else
  {
    pPage = (uint8_t *) &((USBD_StorageTypeDef *)pdev->pUserData)->pInquiry[lun * STANDARD_INQUIRY_DATA_LEN];
 801fe8a:	68fb      	ldr	r3, [r7, #12]
 801fe8c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 801fe90:	69d9      	ldr	r1, [r3, #28]
 801fe92:	7afa      	ldrb	r2, [r7, #11]
 801fe94:	4613      	mov	r3, r2
 801fe96:	00db      	lsls	r3, r3, #3
 801fe98:	4413      	add	r3, r2
 801fe9a:	009b      	lsls	r3, r3, #2
 801fe9c:	440b      	add	r3, r1
 801fe9e:	617b      	str	r3, [r7, #20]
    len = (uint16_t)pPage[4] + 5U;
 801fea0:	697b      	ldr	r3, [r7, #20]
 801fea2:	3304      	adds	r3, #4
 801fea4:	781b      	ldrb	r3, [r3, #0]
 801fea6:	b29b      	uxth	r3, r3
 801fea8:	3305      	adds	r3, #5
 801feaa:	83fb      	strh	r3, [r7, #30]

    if (params[4] <= len)
 801feac:	687b      	ldr	r3, [r7, #4]
 801feae:	3304      	adds	r3, #4
 801feb0:	781b      	ldrb	r3, [r3, #0]
 801feb2:	b29b      	uxth	r3, r3
 801feb4:	8bfa      	ldrh	r2, [r7, #30]
 801feb6:	429a      	cmp	r2, r3
 801feb8:	d303      	bcc.n	801fec2 <SCSI_Inquiry+0xca>
    {
      len = params[4];
 801feba:	687b      	ldr	r3, [r7, #4]
 801febc:	3304      	adds	r3, #4
 801febe:	781b      	ldrb	r3, [r3, #0]
 801fec0:	83fb      	strh	r3, [r7, #30]
    }

    (void)SCSI_UpdateBotData(hmsc, pPage, len);
 801fec2:	8bfb      	ldrh	r3, [r7, #30]
 801fec4:	461a      	mov	r2, r3
 801fec6:	6979      	ldr	r1, [r7, #20]
 801fec8:	69b8      	ldr	r0, [r7, #24]
 801feca:	f000 ff7b 	bl	8020dc4 <SCSI_UpdateBotData>
  }

  return 0;
 801fece:	2300      	movs	r3, #0
}
 801fed0:	4618      	mov	r0, r3
 801fed2:	3720      	adds	r7, #32
 801fed4:	46bd      	mov	sp, r7
 801fed6:	bd80      	pop	{r7, pc}
 801fed8:	20000638 	.word	0x20000638
 801fedc:	20000640 	.word	0x20000640

0801fee0 <SCSI_ReadCapacity10>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_ReadCapacity10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 801fee0:	b580      	push	{r7, lr}
 801fee2:	b086      	sub	sp, #24
 801fee4:	af00      	add	r7, sp, #0
 801fee6:	60f8      	str	r0, [r7, #12]
 801fee8:	460b      	mov	r3, r1
 801feea:	607a      	str	r2, [r7, #4]
 801feec:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  int8_t ret;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 801feee:	68fb      	ldr	r3, [r7, #12]
 801fef0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801fef4:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 801fef6:	697b      	ldr	r3, [r7, #20]
 801fef8:	2b00      	cmp	r3, #0
 801fefa:	d102      	bne.n	801ff02 <SCSI_ReadCapacity10+0x22>
  {
    return -1;
 801fefc:	f04f 33ff 	mov.w	r3, #4294967295
 801ff00:	e05f      	b.n	801ffc2 <SCSI_ReadCapacity10+0xe2>
  }

  ret = ((USBD_StorageTypeDef *)pdev->pUserData)->GetCapacity(lun, &hmsc->scsi_blk_nbr, &hmsc->scsi_blk_size);
 801ff02:	68fb      	ldr	r3, [r7, #12]
 801ff04:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 801ff08:	685b      	ldr	r3, [r3, #4]
 801ff0a:	697a      	ldr	r2, [r7, #20]
 801ff0c:	f502 711a 	add.w	r1, r2, #616	; 0x268
 801ff10:	697a      	ldr	r2, [r7, #20]
 801ff12:	f502 7219 	add.w	r2, r2, #612	; 0x264
 801ff16:	7af8      	ldrb	r0, [r7, #11]
 801ff18:	4798      	blx	r3
 801ff1a:	4603      	mov	r3, r0
 801ff1c:	74fb      	strb	r3, [r7, #19]

  if ((ret != 0) || (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED))
 801ff1e:	f997 3013 	ldrsb.w	r3, [r7, #19]
 801ff22:	2b00      	cmp	r3, #0
 801ff24:	d104      	bne.n	801ff30 <SCSI_ReadCapacity10+0x50>
 801ff26:	697b      	ldr	r3, [r7, #20]
 801ff28:	f893 3262 	ldrb.w	r3, [r3, #610]	; 0x262
 801ff2c:	2b02      	cmp	r3, #2
 801ff2e:	d108      	bne.n	801ff42 <SCSI_ReadCapacity10+0x62>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 801ff30:	7af9      	ldrb	r1, [r7, #11]
 801ff32:	233a      	movs	r3, #58	; 0x3a
 801ff34:	2202      	movs	r2, #2
 801ff36:	68f8      	ldr	r0, [r7, #12]
 801ff38:	f000 fa3b 	bl	80203b2 <SCSI_SenseCode>
    return -1;
 801ff3c:	f04f 33ff 	mov.w	r3, #4294967295
 801ff40:	e03f      	b.n	801ffc2 <SCSI_ReadCapacity10+0xe2>
  }

  hmsc->bot_data[0] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 24);
 801ff42:	697b      	ldr	r3, [r7, #20]
 801ff44:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 801ff48:	3b01      	subs	r3, #1
 801ff4a:	0e1b      	lsrs	r3, r3, #24
 801ff4c:	b2da      	uxtb	r2, r3
 801ff4e:	697b      	ldr	r3, [r7, #20]
 801ff50:	741a      	strb	r2, [r3, #16]
  hmsc->bot_data[1] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 16);
 801ff52:	697b      	ldr	r3, [r7, #20]
 801ff54:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 801ff58:	3b01      	subs	r3, #1
 801ff5a:	0c1b      	lsrs	r3, r3, #16
 801ff5c:	b2da      	uxtb	r2, r3
 801ff5e:	697b      	ldr	r3, [r7, #20]
 801ff60:	745a      	strb	r2, [r3, #17]
  hmsc->bot_data[2] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >>  8);
 801ff62:	697b      	ldr	r3, [r7, #20]
 801ff64:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 801ff68:	3b01      	subs	r3, #1
 801ff6a:	0a1b      	lsrs	r3, r3, #8
 801ff6c:	b2da      	uxtb	r2, r3
 801ff6e:	697b      	ldr	r3, [r7, #20]
 801ff70:	749a      	strb	r2, [r3, #18]
  hmsc->bot_data[3] = (uint8_t)(hmsc->scsi_blk_nbr - 1U);
 801ff72:	697b      	ldr	r3, [r7, #20]
 801ff74:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 801ff78:	b2db      	uxtb	r3, r3
 801ff7a:	3b01      	subs	r3, #1
 801ff7c:	b2da      	uxtb	r2, r3
 801ff7e:	697b      	ldr	r3, [r7, #20]
 801ff80:	74da      	strb	r2, [r3, #19]

  hmsc->bot_data[4] = (uint8_t)(hmsc->scsi_blk_size >>  24);
 801ff82:	697b      	ldr	r3, [r7, #20]
 801ff84:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 801ff88:	161b      	asrs	r3, r3, #24
 801ff8a:	b2da      	uxtb	r2, r3
 801ff8c:	697b      	ldr	r3, [r7, #20]
 801ff8e:	751a      	strb	r2, [r3, #20]
  hmsc->bot_data[5] = (uint8_t)(hmsc->scsi_blk_size >>  16);
 801ff90:	697b      	ldr	r3, [r7, #20]
 801ff92:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 801ff96:	141b      	asrs	r3, r3, #16
 801ff98:	b2da      	uxtb	r2, r3
 801ff9a:	697b      	ldr	r3, [r7, #20]
 801ff9c:	755a      	strb	r2, [r3, #21]
  hmsc->bot_data[6] = (uint8_t)(hmsc->scsi_blk_size >>  8);
 801ff9e:	697b      	ldr	r3, [r7, #20]
 801ffa0:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 801ffa4:	0a1b      	lsrs	r3, r3, #8
 801ffa6:	b29b      	uxth	r3, r3
 801ffa8:	b2da      	uxtb	r2, r3
 801ffaa:	697b      	ldr	r3, [r7, #20]
 801ffac:	759a      	strb	r2, [r3, #22]
  hmsc->bot_data[7] = (uint8_t)(hmsc->scsi_blk_size);
 801ffae:	697b      	ldr	r3, [r7, #20]
 801ffb0:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 801ffb4:	b2da      	uxtb	r2, r3
 801ffb6:	697b      	ldr	r3, [r7, #20]
 801ffb8:	75da      	strb	r2, [r3, #23]

  hmsc->bot_data_length = 8U;
 801ffba:	697b      	ldr	r3, [r7, #20]
 801ffbc:	2208      	movs	r2, #8
 801ffbe:	60da      	str	r2, [r3, #12]

  return 0;
 801ffc0:	2300      	movs	r3, #0

}
 801ffc2:	4618      	mov	r0, r3
 801ffc4:	3718      	adds	r7, #24
 801ffc6:	46bd      	mov	sp, r7
 801ffc8:	bd80      	pop	{r7, pc}

0801ffca <SCSI_ReadCapacity16>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_ReadCapacity16(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 801ffca:	b580      	push	{r7, lr}
 801ffcc:	b088      	sub	sp, #32
 801ffce:	af00      	add	r7, sp, #0
 801ffd0:	60f8      	str	r0, [r7, #12]
 801ffd2:	460b      	mov	r3, r1
 801ffd4:	607a      	str	r2, [r7, #4]
 801ffd6:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  uint8_t idx;
  int8_t ret;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 801ffd8:	68fb      	ldr	r3, [r7, #12]
 801ffda:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801ffde:	61bb      	str	r3, [r7, #24]

  if (hmsc == NULL)
 801ffe0:	69bb      	ldr	r3, [r7, #24]
 801ffe2:	2b00      	cmp	r3, #0
 801ffe4:	d102      	bne.n	801ffec <SCSI_ReadCapacity16+0x22>
  {
    return -1;
 801ffe6:	f04f 33ff 	mov.w	r3, #4294967295
 801ffea:	e094      	b.n	8020116 <SCSI_ReadCapacity16+0x14c>
  }

  ret = ((USBD_StorageTypeDef *)pdev->pUserData)->GetCapacity(lun, &hmsc->scsi_blk_nbr, &hmsc->scsi_blk_size);
 801ffec:	68fb      	ldr	r3, [r7, #12]
 801ffee:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 801fff2:	685b      	ldr	r3, [r3, #4]
 801fff4:	69ba      	ldr	r2, [r7, #24]
 801fff6:	f502 711a 	add.w	r1, r2, #616	; 0x268
 801fffa:	69ba      	ldr	r2, [r7, #24]
 801fffc:	f502 7219 	add.w	r2, r2, #612	; 0x264
 8020000:	7af8      	ldrb	r0, [r7, #11]
 8020002:	4798      	blx	r3
 8020004:	4603      	mov	r3, r0
 8020006:	75fb      	strb	r3, [r7, #23]

  if ((ret != 0) || (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED))
 8020008:	f997 3017 	ldrsb.w	r3, [r7, #23]
 802000c:	2b00      	cmp	r3, #0
 802000e:	d104      	bne.n	802001a <SCSI_ReadCapacity16+0x50>
 8020010:	69bb      	ldr	r3, [r7, #24]
 8020012:	f893 3262 	ldrb.w	r3, [r3, #610]	; 0x262
 8020016:	2b02      	cmp	r3, #2
 8020018:	d108      	bne.n	802002c <SCSI_ReadCapacity16+0x62>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 802001a:	7af9      	ldrb	r1, [r7, #11]
 802001c:	233a      	movs	r3, #58	; 0x3a
 802001e:	2202      	movs	r2, #2
 8020020:	68f8      	ldr	r0, [r7, #12]
 8020022:	f000 f9c6 	bl	80203b2 <SCSI_SenseCode>
    return -1;
 8020026:	f04f 33ff 	mov.w	r3, #4294967295
 802002a:	e074      	b.n	8020116 <SCSI_ReadCapacity16+0x14c>
  }

  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 802002c:	687b      	ldr	r3, [r7, #4]
 802002e:	330a      	adds	r3, #10
 8020030:	781b      	ldrb	r3, [r3, #0]
 8020032:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[11] << 16) |
 8020034:	687b      	ldr	r3, [r7, #4]
 8020036:	330b      	adds	r3, #11
 8020038:	781b      	ldrb	r3, [r3, #0]
 802003a:	041b      	lsls	r3, r3, #16
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 802003c:	431a      	orrs	r2, r3
                          ((uint32_t)params[12] <<  8) |
 802003e:	687b      	ldr	r3, [r7, #4]
 8020040:	330c      	adds	r3, #12
 8020042:	781b      	ldrb	r3, [r3, #0]
 8020044:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[11] << 16) |
 8020046:	4313      	orrs	r3, r2
                          (uint32_t)params[13];
 8020048:	687a      	ldr	r2, [r7, #4]
 802004a:	320d      	adds	r2, #13
 802004c:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[12] <<  8) |
 802004e:	431a      	orrs	r2, r3
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 8020050:	69bb      	ldr	r3, [r7, #24]
 8020052:	60da      	str	r2, [r3, #12]

  for (idx = 0U; idx < hmsc->bot_data_length; idx++)
 8020054:	2300      	movs	r3, #0
 8020056:	77fb      	strb	r3, [r7, #31]
 8020058:	e007      	b.n	802006a <SCSI_ReadCapacity16+0xa0>
  {
    hmsc->bot_data[idx] = 0U;
 802005a:	7ffb      	ldrb	r3, [r7, #31]
 802005c:	69ba      	ldr	r2, [r7, #24]
 802005e:	4413      	add	r3, r2
 8020060:	2200      	movs	r2, #0
 8020062:	741a      	strb	r2, [r3, #16]
  for (idx = 0U; idx < hmsc->bot_data_length; idx++)
 8020064:	7ffb      	ldrb	r3, [r7, #31]
 8020066:	3301      	adds	r3, #1
 8020068:	77fb      	strb	r3, [r7, #31]
 802006a:	7ffa      	ldrb	r2, [r7, #31]
 802006c:	69bb      	ldr	r3, [r7, #24]
 802006e:	68db      	ldr	r3, [r3, #12]
 8020070:	429a      	cmp	r2, r3
 8020072:	d3f2      	bcc.n	802005a <SCSI_ReadCapacity16+0x90>
  }

  hmsc->bot_data[4] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 24);
 8020074:	69bb      	ldr	r3, [r7, #24]
 8020076:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 802007a:	3b01      	subs	r3, #1
 802007c:	0e1b      	lsrs	r3, r3, #24
 802007e:	b2da      	uxtb	r2, r3
 8020080:	69bb      	ldr	r3, [r7, #24]
 8020082:	751a      	strb	r2, [r3, #20]
  hmsc->bot_data[5] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 16);
 8020084:	69bb      	ldr	r3, [r7, #24]
 8020086:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 802008a:	3b01      	subs	r3, #1
 802008c:	0c1b      	lsrs	r3, r3, #16
 802008e:	b2da      	uxtb	r2, r3
 8020090:	69bb      	ldr	r3, [r7, #24]
 8020092:	755a      	strb	r2, [r3, #21]
  hmsc->bot_data[6] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >>  8);
 8020094:	69bb      	ldr	r3, [r7, #24]
 8020096:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 802009a:	3b01      	subs	r3, #1
 802009c:	0a1b      	lsrs	r3, r3, #8
 802009e:	b2da      	uxtb	r2, r3
 80200a0:	69bb      	ldr	r3, [r7, #24]
 80200a2:	759a      	strb	r2, [r3, #22]
  hmsc->bot_data[7] = (uint8_t)(hmsc->scsi_blk_nbr - 1U);
 80200a4:	69bb      	ldr	r3, [r7, #24]
 80200a6:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 80200aa:	b2db      	uxtb	r3, r3
 80200ac:	3b01      	subs	r3, #1
 80200ae:	b2da      	uxtb	r2, r3
 80200b0:	69bb      	ldr	r3, [r7, #24]
 80200b2:	75da      	strb	r2, [r3, #23]

  hmsc->bot_data[8] = (uint8_t)(hmsc->scsi_blk_size >>  24);
 80200b4:	69bb      	ldr	r3, [r7, #24]
 80200b6:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 80200ba:	161b      	asrs	r3, r3, #24
 80200bc:	b2da      	uxtb	r2, r3
 80200be:	69bb      	ldr	r3, [r7, #24]
 80200c0:	761a      	strb	r2, [r3, #24]
  hmsc->bot_data[9] = (uint8_t)(hmsc->scsi_blk_size >>  16);
 80200c2:	69bb      	ldr	r3, [r7, #24]
 80200c4:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 80200c8:	141b      	asrs	r3, r3, #16
 80200ca:	b2da      	uxtb	r2, r3
 80200cc:	69bb      	ldr	r3, [r7, #24]
 80200ce:	765a      	strb	r2, [r3, #25]
  hmsc->bot_data[10] = (uint8_t)(hmsc->scsi_blk_size >>  8);
 80200d0:	69bb      	ldr	r3, [r7, #24]
 80200d2:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 80200d6:	0a1b      	lsrs	r3, r3, #8
 80200d8:	b29b      	uxth	r3, r3
 80200da:	b2da      	uxtb	r2, r3
 80200dc:	69bb      	ldr	r3, [r7, #24]
 80200de:	769a      	strb	r2, [r3, #26]
  hmsc->bot_data[11] = (uint8_t)(hmsc->scsi_blk_size);
 80200e0:	69bb      	ldr	r3, [r7, #24]
 80200e2:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 80200e6:	b2da      	uxtb	r2, r3
 80200e8:	69bb      	ldr	r3, [r7, #24]
 80200ea:	76da      	strb	r2, [r3, #27]

  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 80200ec:	687b      	ldr	r3, [r7, #4]
 80200ee:	330a      	adds	r3, #10
 80200f0:	781b      	ldrb	r3, [r3, #0]
 80200f2:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[11] << 16) |
 80200f4:	687b      	ldr	r3, [r7, #4]
 80200f6:	330b      	adds	r3, #11
 80200f8:	781b      	ldrb	r3, [r3, #0]
 80200fa:	041b      	lsls	r3, r3, #16
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 80200fc:	431a      	orrs	r2, r3
                          ((uint32_t)params[12] <<  8) |
 80200fe:	687b      	ldr	r3, [r7, #4]
 8020100:	330c      	adds	r3, #12
 8020102:	781b      	ldrb	r3, [r3, #0]
 8020104:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[11] << 16) |
 8020106:	4313      	orrs	r3, r2
                          (uint32_t)params[13];
 8020108:	687a      	ldr	r2, [r7, #4]
 802010a:	320d      	adds	r2, #13
 802010c:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[12] <<  8) |
 802010e:	431a      	orrs	r2, r3
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 8020110:	69bb      	ldr	r3, [r7, #24]
 8020112:	60da      	str	r2, [r3, #12]

  return 0;
 8020114:	2300      	movs	r3, #0
}
 8020116:	4618      	mov	r0, r3
 8020118:	3720      	adds	r7, #32
 802011a:	46bd      	mov	sp, r7
 802011c:	bd80      	pop	{r7, pc}

0802011e <SCSI_ReadFormatCapacity>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_ReadFormatCapacity(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 802011e:	b580      	push	{r7, lr}
 8020120:	b088      	sub	sp, #32
 8020122:	af00      	add	r7, sp, #0
 8020124:	60f8      	str	r0, [r7, #12]
 8020126:	460b      	mov	r3, r1
 8020128:	607a      	str	r2, [r7, #4]
 802012a:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  uint16_t blk_size;
  uint32_t blk_nbr;
  uint16_t i;
  int8_t ret;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 802012c:	68fb      	ldr	r3, [r7, #12]
 802012e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8020132:	61bb      	str	r3, [r7, #24]

  if (hmsc == NULL)
 8020134:	69bb      	ldr	r3, [r7, #24]
 8020136:	2b00      	cmp	r3, #0
 8020138:	d102      	bne.n	8020140 <SCSI_ReadFormatCapacity+0x22>
  {
    return -1;
 802013a:	f04f 33ff 	mov.w	r3, #4294967295
 802013e:	e05c      	b.n	80201fa <SCSI_ReadFormatCapacity+0xdc>
  }

  ret = ((USBD_StorageTypeDef *)pdev->pUserData)->GetCapacity(lun, &blk_nbr, &blk_size);
 8020140:	68fb      	ldr	r3, [r7, #12]
 8020142:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8020146:	685b      	ldr	r3, [r3, #4]
 8020148:	f107 0214 	add.w	r2, r7, #20
 802014c:	f107 0110 	add.w	r1, r7, #16
 8020150:	7af8      	ldrb	r0, [r7, #11]
 8020152:	4798      	blx	r3
 8020154:	4603      	mov	r3, r0
 8020156:	75fb      	strb	r3, [r7, #23]

  if ((ret != 0) || (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED))
 8020158:	f997 3017 	ldrsb.w	r3, [r7, #23]
 802015c:	2b00      	cmp	r3, #0
 802015e:	d104      	bne.n	802016a <SCSI_ReadFormatCapacity+0x4c>
 8020160:	69bb      	ldr	r3, [r7, #24]
 8020162:	f893 3262 	ldrb.w	r3, [r3, #610]	; 0x262
 8020166:	2b02      	cmp	r3, #2
 8020168:	d108      	bne.n	802017c <SCSI_ReadFormatCapacity+0x5e>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 802016a:	7af9      	ldrb	r1, [r7, #11]
 802016c:	233a      	movs	r3, #58	; 0x3a
 802016e:	2202      	movs	r2, #2
 8020170:	68f8      	ldr	r0, [r7, #12]
 8020172:	f000 f91e 	bl	80203b2 <SCSI_SenseCode>
    return -1;
 8020176:	f04f 33ff 	mov.w	r3, #4294967295
 802017a:	e03e      	b.n	80201fa <SCSI_ReadFormatCapacity+0xdc>
  }

  for (i = 0U; i < 12U ; i++)
 802017c:	2300      	movs	r3, #0
 802017e:	83fb      	strh	r3, [r7, #30]
 8020180:	e007      	b.n	8020192 <SCSI_ReadFormatCapacity+0x74>
  {
    hmsc->bot_data[i] = 0U;
 8020182:	8bfb      	ldrh	r3, [r7, #30]
 8020184:	69ba      	ldr	r2, [r7, #24]
 8020186:	4413      	add	r3, r2
 8020188:	2200      	movs	r2, #0
 802018a:	741a      	strb	r2, [r3, #16]
  for (i = 0U; i < 12U ; i++)
 802018c:	8bfb      	ldrh	r3, [r7, #30]
 802018e:	3301      	adds	r3, #1
 8020190:	83fb      	strh	r3, [r7, #30]
 8020192:	8bfb      	ldrh	r3, [r7, #30]
 8020194:	2b0b      	cmp	r3, #11
 8020196:	d9f4      	bls.n	8020182 <SCSI_ReadFormatCapacity+0x64>
  }

  hmsc->bot_data[3] = 0x08U;
 8020198:	69bb      	ldr	r3, [r7, #24]
 802019a:	2208      	movs	r2, #8
 802019c:	74da      	strb	r2, [r3, #19]
  hmsc->bot_data[4] = (uint8_t)((blk_nbr - 1U) >> 24);
 802019e:	693b      	ldr	r3, [r7, #16]
 80201a0:	3b01      	subs	r3, #1
 80201a2:	0e1b      	lsrs	r3, r3, #24
 80201a4:	b2da      	uxtb	r2, r3
 80201a6:	69bb      	ldr	r3, [r7, #24]
 80201a8:	751a      	strb	r2, [r3, #20]
  hmsc->bot_data[5] = (uint8_t)((blk_nbr - 1U) >> 16);
 80201aa:	693b      	ldr	r3, [r7, #16]
 80201ac:	3b01      	subs	r3, #1
 80201ae:	0c1b      	lsrs	r3, r3, #16
 80201b0:	b2da      	uxtb	r2, r3
 80201b2:	69bb      	ldr	r3, [r7, #24]
 80201b4:	755a      	strb	r2, [r3, #21]
  hmsc->bot_data[6] = (uint8_t)((blk_nbr - 1U) >>  8);
 80201b6:	693b      	ldr	r3, [r7, #16]
 80201b8:	3b01      	subs	r3, #1
 80201ba:	0a1b      	lsrs	r3, r3, #8
 80201bc:	b2da      	uxtb	r2, r3
 80201be:	69bb      	ldr	r3, [r7, #24]
 80201c0:	759a      	strb	r2, [r3, #22]
  hmsc->bot_data[7] = (uint8_t)(blk_nbr - 1U);
 80201c2:	693b      	ldr	r3, [r7, #16]
 80201c4:	b2db      	uxtb	r3, r3
 80201c6:	3b01      	subs	r3, #1
 80201c8:	b2da      	uxtb	r2, r3
 80201ca:	69bb      	ldr	r3, [r7, #24]
 80201cc:	75da      	strb	r2, [r3, #23]

  hmsc->bot_data[8] = 0x02U;
 80201ce:	69bb      	ldr	r3, [r7, #24]
 80201d0:	2202      	movs	r2, #2
 80201d2:	761a      	strb	r2, [r3, #24]
  hmsc->bot_data[9] = (uint8_t)(blk_size >>  16);
 80201d4:	8abb      	ldrh	r3, [r7, #20]
 80201d6:	141b      	asrs	r3, r3, #16
 80201d8:	b2da      	uxtb	r2, r3
 80201da:	69bb      	ldr	r3, [r7, #24]
 80201dc:	765a      	strb	r2, [r3, #25]
  hmsc->bot_data[10] = (uint8_t)(blk_size >>  8);
 80201de:	8abb      	ldrh	r3, [r7, #20]
 80201e0:	0a1b      	lsrs	r3, r3, #8
 80201e2:	b29b      	uxth	r3, r3
 80201e4:	b2da      	uxtb	r2, r3
 80201e6:	69bb      	ldr	r3, [r7, #24]
 80201e8:	769a      	strb	r2, [r3, #26]
  hmsc->bot_data[11] = (uint8_t)(blk_size);
 80201ea:	8abb      	ldrh	r3, [r7, #20]
 80201ec:	b2da      	uxtb	r2, r3
 80201ee:	69bb      	ldr	r3, [r7, #24]
 80201f0:	76da      	strb	r2, [r3, #27]

  hmsc->bot_data_length = 12U;
 80201f2:	69bb      	ldr	r3, [r7, #24]
 80201f4:	220c      	movs	r2, #12
 80201f6:	60da      	str	r2, [r3, #12]

  return 0;
 80201f8:	2300      	movs	r3, #0
}
 80201fa:	4618      	mov	r0, r3
 80201fc:	3720      	adds	r7, #32
 80201fe:	46bd      	mov	sp, r7
 8020200:	bd80      	pop	{r7, pc}
	...

08020204 <SCSI_ModeSense6>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_ModeSense6(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8020204:	b580      	push	{r7, lr}
 8020206:	b086      	sub	sp, #24
 8020208:	af00      	add	r7, sp, #0
 802020a:	60f8      	str	r0, [r7, #12]
 802020c:	460b      	mov	r3, r1
 802020e:	607a      	str	r2, [r7, #4]
 8020210:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8020212:	68fb      	ldr	r3, [r7, #12]
 8020214:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8020218:	613b      	str	r3, [r7, #16]
  uint16_t len = MODE_SENSE6_LEN;
 802021a:	2317      	movs	r3, #23
 802021c:	82fb      	strh	r3, [r7, #22]

  if (hmsc == NULL)
 802021e:	693b      	ldr	r3, [r7, #16]
 8020220:	2b00      	cmp	r3, #0
 8020222:	d102      	bne.n	802022a <SCSI_ModeSense6+0x26>
  {
    return -1;
 8020224:	f04f 33ff 	mov.w	r3, #4294967295
 8020228:	e011      	b.n	802024e <SCSI_ModeSense6+0x4a>
  }

  if (params[4] <= len)
 802022a:	687b      	ldr	r3, [r7, #4]
 802022c:	3304      	adds	r3, #4
 802022e:	781b      	ldrb	r3, [r3, #0]
 8020230:	b29b      	uxth	r3, r3
 8020232:	8afa      	ldrh	r2, [r7, #22]
 8020234:	429a      	cmp	r2, r3
 8020236:	d303      	bcc.n	8020240 <SCSI_ModeSense6+0x3c>
  {
    len = params[4];
 8020238:	687b      	ldr	r3, [r7, #4]
 802023a:	3304      	adds	r3, #4
 802023c:	781b      	ldrb	r3, [r3, #0]
 802023e:	82fb      	strh	r3, [r7, #22]
  }

  (void)SCSI_UpdateBotData(hmsc, MSC_Mode_Sense6_data, len);
 8020240:	8afb      	ldrh	r3, [r7, #22]
 8020242:	461a      	mov	r2, r3
 8020244:	4904      	ldr	r1, [pc, #16]	; (8020258 <SCSI_ModeSense6+0x54>)
 8020246:	6938      	ldr	r0, [r7, #16]
 8020248:	f000 fdbc 	bl	8020dc4 <SCSI_UpdateBotData>

  return 0;
 802024c:	2300      	movs	r3, #0
}
 802024e:	4618      	mov	r0, r3
 8020250:	3718      	adds	r7, #24
 8020252:	46bd      	mov	sp, r7
 8020254:	bd80      	pop	{r7, pc}
 8020256:	bf00      	nop
 8020258:	20000648 	.word	0x20000648

0802025c <SCSI_ModeSense10>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_ModeSense10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 802025c:	b580      	push	{r7, lr}
 802025e:	b086      	sub	sp, #24
 8020260:	af00      	add	r7, sp, #0
 8020262:	60f8      	str	r0, [r7, #12]
 8020264:	460b      	mov	r3, r1
 8020266:	607a      	str	r2, [r7, #4]
 8020268:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 802026a:	68fb      	ldr	r3, [r7, #12]
 802026c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8020270:	613b      	str	r3, [r7, #16]
  uint16_t len = MODE_SENSE10_LEN;
 8020272:	231b      	movs	r3, #27
 8020274:	82fb      	strh	r3, [r7, #22]

  if (hmsc == NULL)
 8020276:	693b      	ldr	r3, [r7, #16]
 8020278:	2b00      	cmp	r3, #0
 802027a:	d102      	bne.n	8020282 <SCSI_ModeSense10+0x26>
  {
    return -1;
 802027c:	f04f 33ff 	mov.w	r3, #4294967295
 8020280:	e011      	b.n	80202a6 <SCSI_ModeSense10+0x4a>
  }

  if (params[8] <= len)
 8020282:	687b      	ldr	r3, [r7, #4]
 8020284:	3308      	adds	r3, #8
 8020286:	781b      	ldrb	r3, [r3, #0]
 8020288:	b29b      	uxth	r3, r3
 802028a:	8afa      	ldrh	r2, [r7, #22]
 802028c:	429a      	cmp	r2, r3
 802028e:	d303      	bcc.n	8020298 <SCSI_ModeSense10+0x3c>
  {
    len = params[8];
 8020290:	687b      	ldr	r3, [r7, #4]
 8020292:	3308      	adds	r3, #8
 8020294:	781b      	ldrb	r3, [r3, #0]
 8020296:	82fb      	strh	r3, [r7, #22]
  }

  (void)SCSI_UpdateBotData(hmsc, MSC_Mode_Sense10_data, len);
 8020298:	8afb      	ldrh	r3, [r7, #22]
 802029a:	461a      	mov	r2, r3
 802029c:	4904      	ldr	r1, [pc, #16]	; (80202b0 <SCSI_ModeSense10+0x54>)
 802029e:	6938      	ldr	r0, [r7, #16]
 80202a0:	f000 fd90 	bl	8020dc4 <SCSI_UpdateBotData>

  return 0;
 80202a4:	2300      	movs	r3, #0
}
 80202a6:	4618      	mov	r0, r3
 80202a8:	3718      	adds	r7, #24
 80202aa:	46bd      	mov	sp, r7
 80202ac:	bd80      	pop	{r7, pc}
 80202ae:	bf00      	nop
 80202b0:	20000660 	.word	0x20000660

080202b4 <SCSI_RequestSense>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_RequestSense(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 80202b4:	b580      	push	{r7, lr}
 80202b6:	b086      	sub	sp, #24
 80202b8:	af00      	add	r7, sp, #0
 80202ba:	60f8      	str	r0, [r7, #12]
 80202bc:	460b      	mov	r3, r1
 80202be:	607a      	str	r2, [r7, #4]
 80202c0:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  uint8_t i;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 80202c2:	68fb      	ldr	r3, [r7, #12]
 80202c4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80202c8:	613b      	str	r3, [r7, #16]

  if (hmsc == NULL)
 80202ca:	693b      	ldr	r3, [r7, #16]
 80202cc:	2b00      	cmp	r3, #0
 80202ce:	d102      	bne.n	80202d6 <SCSI_RequestSense+0x22>
  {
    return -1;
 80202d0:	f04f 33ff 	mov.w	r3, #4294967295
 80202d4:	e069      	b.n	80203aa <SCSI_RequestSense+0xf6>
  }

  if (hmsc->cbw.dDataLength == 0U)
 80202d6:	693b      	ldr	r3, [r7, #16]
 80202d8:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 80202dc:	2b00      	cmp	r3, #0
 80202de:	d10a      	bne.n	80202f6 <SCSI_RequestSense+0x42>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 80202e0:	693b      	ldr	r3, [r7, #16]
 80202e2:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 80202e6:	2320      	movs	r3, #32
 80202e8:	2205      	movs	r2, #5
 80202ea:	68f8      	ldr	r0, [r7, #12]
 80202ec:	f000 f861 	bl	80203b2 <SCSI_SenseCode>
    return -1;
 80202f0:	f04f 33ff 	mov.w	r3, #4294967295
 80202f4:	e059      	b.n	80203aa <SCSI_RequestSense+0xf6>
  }

  for (i = 0U; i < REQUEST_SENSE_DATA_LEN; i++)
 80202f6:	2300      	movs	r3, #0
 80202f8:	75fb      	strb	r3, [r7, #23]
 80202fa:	e007      	b.n	802030c <SCSI_RequestSense+0x58>
  {
    hmsc->bot_data[i] = 0U;
 80202fc:	7dfb      	ldrb	r3, [r7, #23]
 80202fe:	693a      	ldr	r2, [r7, #16]
 8020300:	4413      	add	r3, r2
 8020302:	2200      	movs	r2, #0
 8020304:	741a      	strb	r2, [r3, #16]
  for (i = 0U; i < REQUEST_SENSE_DATA_LEN; i++)
 8020306:	7dfb      	ldrb	r3, [r7, #23]
 8020308:	3301      	adds	r3, #1
 802030a:	75fb      	strb	r3, [r7, #23]
 802030c:	7dfb      	ldrb	r3, [r7, #23]
 802030e:	2b11      	cmp	r3, #17
 8020310:	d9f4      	bls.n	80202fc <SCSI_RequestSense+0x48>
  }

  hmsc->bot_data[0] = 0x70U;
 8020312:	693b      	ldr	r3, [r7, #16]
 8020314:	2270      	movs	r2, #112	; 0x70
 8020316:	741a      	strb	r2, [r3, #16]
  hmsc->bot_data[7] = REQUEST_SENSE_DATA_LEN - 6U;
 8020318:	693b      	ldr	r3, [r7, #16]
 802031a:	220c      	movs	r2, #12
 802031c:	75da      	strb	r2, [r3, #23]

  if ((hmsc->scsi_sense_head != hmsc->scsi_sense_tail))
 802031e:	693b      	ldr	r3, [r7, #16]
 8020320:	f893 2260 	ldrb.w	r2, [r3, #608]	; 0x260
 8020324:	693b      	ldr	r3, [r7, #16]
 8020326:	f893 3261 	ldrb.w	r3, [r3, #609]	; 0x261
 802032a:	429a      	cmp	r2, r3
 802032c:	d02e      	beq.n	802038c <SCSI_RequestSense+0xd8>
  {
    hmsc->bot_data[2] = (uint8_t)hmsc->scsi_sense[hmsc->scsi_sense_head].Skey;
 802032e:	693b      	ldr	r3, [r7, #16]
 8020330:	f893 3260 	ldrb.w	r3, [r3, #608]	; 0x260
 8020334:	461a      	mov	r2, r3
 8020336:	693b      	ldr	r3, [r7, #16]
 8020338:	3248      	adds	r2, #72	; 0x48
 802033a:	f813 2032 	ldrb.w	r2, [r3, r2, lsl #3]
 802033e:	693b      	ldr	r3, [r7, #16]
 8020340:	749a      	strb	r2, [r3, #18]
    hmsc->bot_data[12] = (uint8_t)hmsc->scsi_sense[hmsc->scsi_sense_head].w.b.ASC;
 8020342:	693b      	ldr	r3, [r7, #16]
 8020344:	f893 3260 	ldrb.w	r3, [r3, #608]	; 0x260
 8020348:	693a      	ldr	r2, [r7, #16]
 802034a:	3348      	adds	r3, #72	; 0x48
 802034c:	00db      	lsls	r3, r3, #3
 802034e:	4413      	add	r3, r2
 8020350:	791a      	ldrb	r2, [r3, #4]
 8020352:	693b      	ldr	r3, [r7, #16]
 8020354:	771a      	strb	r2, [r3, #28]
    hmsc->bot_data[13] = (uint8_t)hmsc->scsi_sense[hmsc->scsi_sense_head].w.b.ASCQ;
 8020356:	693b      	ldr	r3, [r7, #16]
 8020358:	f893 3260 	ldrb.w	r3, [r3, #608]	; 0x260
 802035c:	693a      	ldr	r2, [r7, #16]
 802035e:	3348      	adds	r3, #72	; 0x48
 8020360:	00db      	lsls	r3, r3, #3
 8020362:	4413      	add	r3, r2
 8020364:	795a      	ldrb	r2, [r3, #5]
 8020366:	693b      	ldr	r3, [r7, #16]
 8020368:	775a      	strb	r2, [r3, #29]
    hmsc->scsi_sense_head++;
 802036a:	693b      	ldr	r3, [r7, #16]
 802036c:	f893 3260 	ldrb.w	r3, [r3, #608]	; 0x260
 8020370:	3301      	adds	r3, #1
 8020372:	b2da      	uxtb	r2, r3
 8020374:	693b      	ldr	r3, [r7, #16]
 8020376:	f883 2260 	strb.w	r2, [r3, #608]	; 0x260

    if (hmsc->scsi_sense_head == SENSE_LIST_DEEPTH)
 802037a:	693b      	ldr	r3, [r7, #16]
 802037c:	f893 3260 	ldrb.w	r3, [r3, #608]	; 0x260
 8020380:	2b04      	cmp	r3, #4
 8020382:	d103      	bne.n	802038c <SCSI_RequestSense+0xd8>
    {
      hmsc->scsi_sense_head = 0U;
 8020384:	693b      	ldr	r3, [r7, #16]
 8020386:	2200      	movs	r2, #0
 8020388:	f883 2260 	strb.w	r2, [r3, #608]	; 0x260
    }
  }

  hmsc->bot_data_length = REQUEST_SENSE_DATA_LEN;
 802038c:	693b      	ldr	r3, [r7, #16]
 802038e:	2212      	movs	r2, #18
 8020390:	60da      	str	r2, [r3, #12]

  if (params[4] <= REQUEST_SENSE_DATA_LEN)
 8020392:	687b      	ldr	r3, [r7, #4]
 8020394:	3304      	adds	r3, #4
 8020396:	781b      	ldrb	r3, [r3, #0]
 8020398:	2b12      	cmp	r3, #18
 802039a:	d805      	bhi.n	80203a8 <SCSI_RequestSense+0xf4>
  {
    hmsc->bot_data_length = params[4];
 802039c:	687b      	ldr	r3, [r7, #4]
 802039e:	3304      	adds	r3, #4
 80203a0:	781b      	ldrb	r3, [r3, #0]
 80203a2:	461a      	mov	r2, r3
 80203a4:	693b      	ldr	r3, [r7, #16]
 80203a6:	60da      	str	r2, [r3, #12]
  }

  return 0;
 80203a8:	2300      	movs	r3, #0
}
 80203aa:	4618      	mov	r0, r3
 80203ac:	3718      	adds	r7, #24
 80203ae:	46bd      	mov	sp, r7
 80203b0:	bd80      	pop	{r7, pc}

080203b2 <SCSI_SenseCode>:
  * @param  ASC: Additional Sense Code
  * @retval none

  */
void SCSI_SenseCode(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t sKey, uint8_t ASC)
{
 80203b2:	b480      	push	{r7}
 80203b4:	b085      	sub	sp, #20
 80203b6:	af00      	add	r7, sp, #0
 80203b8:	6078      	str	r0, [r7, #4]
 80203ba:	4608      	mov	r0, r1
 80203bc:	4611      	mov	r1, r2
 80203be:	461a      	mov	r2, r3
 80203c0:	4603      	mov	r3, r0
 80203c2:	70fb      	strb	r3, [r7, #3]
 80203c4:	460b      	mov	r3, r1
 80203c6:	70bb      	strb	r3, [r7, #2]
 80203c8:	4613      	mov	r3, r2
 80203ca:	707b      	strb	r3, [r7, #1]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 80203cc:	687b      	ldr	r3, [r7, #4]
 80203ce:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80203d2:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 80203d4:	68fb      	ldr	r3, [r7, #12]
 80203d6:	2b00      	cmp	r3, #0
 80203d8:	d02c      	beq.n	8020434 <SCSI_SenseCode+0x82>
  {
    return;
  }

  hmsc->scsi_sense[hmsc->scsi_sense_tail].Skey = sKey;
 80203da:	68fb      	ldr	r3, [r7, #12]
 80203dc:	f893 3261 	ldrb.w	r3, [r3, #609]	; 0x261
 80203e0:	461a      	mov	r2, r3
 80203e2:	68fb      	ldr	r3, [r7, #12]
 80203e4:	3248      	adds	r2, #72	; 0x48
 80203e6:	78b9      	ldrb	r1, [r7, #2]
 80203e8:	f803 1032 	strb.w	r1, [r3, r2, lsl #3]
  hmsc->scsi_sense[hmsc->scsi_sense_tail].w.b.ASC = ASC;
 80203ec:	68fb      	ldr	r3, [r7, #12]
 80203ee:	f893 3261 	ldrb.w	r3, [r3, #609]	; 0x261
 80203f2:	68fa      	ldr	r2, [r7, #12]
 80203f4:	3348      	adds	r3, #72	; 0x48
 80203f6:	00db      	lsls	r3, r3, #3
 80203f8:	4413      	add	r3, r2
 80203fa:	787a      	ldrb	r2, [r7, #1]
 80203fc:	711a      	strb	r2, [r3, #4]
  hmsc->scsi_sense[hmsc->scsi_sense_tail].w.b.ASCQ = 0U;
 80203fe:	68fb      	ldr	r3, [r7, #12]
 8020400:	f893 3261 	ldrb.w	r3, [r3, #609]	; 0x261
 8020404:	68fa      	ldr	r2, [r7, #12]
 8020406:	3348      	adds	r3, #72	; 0x48
 8020408:	00db      	lsls	r3, r3, #3
 802040a:	4413      	add	r3, r2
 802040c:	2200      	movs	r2, #0
 802040e:	715a      	strb	r2, [r3, #5]
  hmsc->scsi_sense_tail++;
 8020410:	68fb      	ldr	r3, [r7, #12]
 8020412:	f893 3261 	ldrb.w	r3, [r3, #609]	; 0x261
 8020416:	3301      	adds	r3, #1
 8020418:	b2da      	uxtb	r2, r3
 802041a:	68fb      	ldr	r3, [r7, #12]
 802041c:	f883 2261 	strb.w	r2, [r3, #609]	; 0x261

  if (hmsc->scsi_sense_tail == SENSE_LIST_DEEPTH)
 8020420:	68fb      	ldr	r3, [r7, #12]
 8020422:	f893 3261 	ldrb.w	r3, [r3, #609]	; 0x261
 8020426:	2b04      	cmp	r3, #4
 8020428:	d105      	bne.n	8020436 <SCSI_SenseCode+0x84>
  {
    hmsc->scsi_sense_tail = 0U;
 802042a:	68fb      	ldr	r3, [r7, #12]
 802042c:	2200      	movs	r2, #0
 802042e:	f883 2261 	strb.w	r2, [r3, #609]	; 0x261
 8020432:	e000      	b.n	8020436 <SCSI_SenseCode+0x84>
    return;
 8020434:	bf00      	nop
  }
}
 8020436:	3714      	adds	r7, #20
 8020438:	46bd      	mov	sp, r7
 802043a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802043e:	4770      	bx	lr

08020440 <SCSI_StartStopUnit>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_StartStopUnit(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8020440:	b580      	push	{r7, lr}
 8020442:	b086      	sub	sp, #24
 8020444:	af00      	add	r7, sp, #0
 8020446:	60f8      	str	r0, [r7, #12]
 8020448:	460b      	mov	r3, r1
 802044a:	607a      	str	r2, [r7, #4]
 802044c:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 802044e:	68fb      	ldr	r3, [r7, #12]
 8020450:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8020454:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 8020456:	697b      	ldr	r3, [r7, #20]
 8020458:	2b00      	cmp	r3, #0
 802045a:	d102      	bne.n	8020462 <SCSI_StartStopUnit+0x22>
  {
    return -1;
 802045c:	f04f 33ff 	mov.w	r3, #4294967295
 8020460:	e03b      	b.n	80204da <SCSI_StartStopUnit+0x9a>
  }

  if ((hmsc->scsi_medium_state == SCSI_MEDIUM_LOCKED) && ((params[4] & 0x3U) == 2U))
 8020462:	697b      	ldr	r3, [r7, #20]
 8020464:	f893 3262 	ldrb.w	r3, [r3, #610]	; 0x262
 8020468:	2b01      	cmp	r3, #1
 802046a:	d10f      	bne.n	802048c <SCSI_StartStopUnit+0x4c>
 802046c:	687b      	ldr	r3, [r7, #4]
 802046e:	3304      	adds	r3, #4
 8020470:	781b      	ldrb	r3, [r3, #0]
 8020472:	f003 0303 	and.w	r3, r3, #3
 8020476:	2b02      	cmp	r3, #2
 8020478:	d108      	bne.n	802048c <SCSI_StartStopUnit+0x4c>
  {
    SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, INVALID_FIELED_IN_COMMAND);
 802047a:	7af9      	ldrb	r1, [r7, #11]
 802047c:	2324      	movs	r3, #36	; 0x24
 802047e:	2205      	movs	r2, #5
 8020480:	68f8      	ldr	r0, [r7, #12]
 8020482:	f7ff ff96 	bl	80203b2 <SCSI_SenseCode>

    return -1;
 8020486:	f04f 33ff 	mov.w	r3, #4294967295
 802048a:	e026      	b.n	80204da <SCSI_StartStopUnit+0x9a>
  }

  if ((params[4] & 0x3U) == 0x1U) /* START=1 */
 802048c:	687b      	ldr	r3, [r7, #4]
 802048e:	3304      	adds	r3, #4
 8020490:	781b      	ldrb	r3, [r3, #0]
 8020492:	f003 0303 	and.w	r3, r3, #3
 8020496:	2b01      	cmp	r3, #1
 8020498:	d104      	bne.n	80204a4 <SCSI_StartStopUnit+0x64>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 802049a:	697b      	ldr	r3, [r7, #20]
 802049c:	2200      	movs	r2, #0
 802049e:	f883 2262 	strb.w	r2, [r3, #610]	; 0x262
 80204a2:	e016      	b.n	80204d2 <SCSI_StartStopUnit+0x92>
  }
  else if ((params[4] & 0x3U) == 0x2U) /* START=0 and LOEJ Load Eject=1 */
 80204a4:	687b      	ldr	r3, [r7, #4]
 80204a6:	3304      	adds	r3, #4
 80204a8:	781b      	ldrb	r3, [r3, #0]
 80204aa:	f003 0303 	and.w	r3, r3, #3
 80204ae:	2b02      	cmp	r3, #2
 80204b0:	d104      	bne.n	80204bc <SCSI_StartStopUnit+0x7c>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_EJECTED;
 80204b2:	697b      	ldr	r3, [r7, #20]
 80204b4:	2202      	movs	r2, #2
 80204b6:	f883 2262 	strb.w	r2, [r3, #610]	; 0x262
 80204ba:	e00a      	b.n	80204d2 <SCSI_StartStopUnit+0x92>
  }
  else if ((params[4] & 0x3U) == 0x3U) /* START=1 and LOEJ Load Eject=1 */
 80204bc:	687b      	ldr	r3, [r7, #4]
 80204be:	3304      	adds	r3, #4
 80204c0:	781b      	ldrb	r3, [r3, #0]
 80204c2:	f003 0303 	and.w	r3, r3, #3
 80204c6:	2b03      	cmp	r3, #3
 80204c8:	d103      	bne.n	80204d2 <SCSI_StartStopUnit+0x92>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 80204ca:	697b      	ldr	r3, [r7, #20]
 80204cc:	2200      	movs	r2, #0
 80204ce:	f883 2262 	strb.w	r2, [r3, #610]	; 0x262
  }
  else
  {
    /* .. */
  }
  hmsc->bot_data_length = 0U;
 80204d2:	697b      	ldr	r3, [r7, #20]
 80204d4:	2200      	movs	r2, #0
 80204d6:	60da      	str	r2, [r3, #12]

  return 0;
 80204d8:	2300      	movs	r3, #0
}
 80204da:	4618      	mov	r0, r3
 80204dc:	3718      	adds	r7, #24
 80204de:	46bd      	mov	sp, r7
 80204e0:	bd80      	pop	{r7, pc}

080204e2 <SCSI_AllowPreventRemovable>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_AllowPreventRemovable(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 80204e2:	b480      	push	{r7}
 80204e4:	b087      	sub	sp, #28
 80204e6:	af00      	add	r7, sp, #0
 80204e8:	60f8      	str	r0, [r7, #12]
 80204ea:	460b      	mov	r3, r1
 80204ec:	607a      	str	r2, [r7, #4]
 80204ee:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 80204f0:	68fb      	ldr	r3, [r7, #12]
 80204f2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80204f6:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 80204f8:	697b      	ldr	r3, [r7, #20]
 80204fa:	2b00      	cmp	r3, #0
 80204fc:	d102      	bne.n	8020504 <SCSI_AllowPreventRemovable+0x22>
  {
    return -1;
 80204fe:	f04f 33ff 	mov.w	r3, #4294967295
 8020502:	e011      	b.n	8020528 <SCSI_AllowPreventRemovable+0x46>
  }

  if (params[4] == 0U)
 8020504:	687b      	ldr	r3, [r7, #4]
 8020506:	3304      	adds	r3, #4
 8020508:	781b      	ldrb	r3, [r3, #0]
 802050a:	2b00      	cmp	r3, #0
 802050c:	d104      	bne.n	8020518 <SCSI_AllowPreventRemovable+0x36>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 802050e:	697b      	ldr	r3, [r7, #20]
 8020510:	2200      	movs	r2, #0
 8020512:	f883 2262 	strb.w	r2, [r3, #610]	; 0x262
 8020516:	e003      	b.n	8020520 <SCSI_AllowPreventRemovable+0x3e>
  }
  else
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_LOCKED;
 8020518:	697b      	ldr	r3, [r7, #20]
 802051a:	2201      	movs	r2, #1
 802051c:	f883 2262 	strb.w	r2, [r3, #610]	; 0x262
  }

  hmsc->bot_data_length = 0U;
 8020520:	697b      	ldr	r3, [r7, #20]
 8020522:	2200      	movs	r2, #0
 8020524:	60da      	str	r2, [r3, #12]

  return 0;
 8020526:	2300      	movs	r3, #0
}
 8020528:	4618      	mov	r0, r3
 802052a:	371c      	adds	r7, #28
 802052c:	46bd      	mov	sp, r7
 802052e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020532:	4770      	bx	lr

08020534 <SCSI_Read10>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Read10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8020534:	b580      	push	{r7, lr}
 8020536:	b086      	sub	sp, #24
 8020538:	af00      	add	r7, sp, #0
 802053a:	60f8      	str	r0, [r7, #12]
 802053c:	460b      	mov	r3, r1
 802053e:	607a      	str	r2, [r7, #4]
 8020540:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8020542:	68fb      	ldr	r3, [r7, #12]
 8020544:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8020548:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 802054a:	697b      	ldr	r3, [r7, #20]
 802054c:	2b00      	cmp	r3, #0
 802054e:	d102      	bne.n	8020556 <SCSI_Read10+0x22>
  {
    return -1;
 8020550:	f04f 33ff 	mov.w	r3, #4294967295
 8020554:	e08a      	b.n	802066c <SCSI_Read10+0x138>
  }

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 8020556:	697b      	ldr	r3, [r7, #20]
 8020558:	7a1b      	ldrb	r3, [r3, #8]
 802055a:	2b00      	cmp	r3, #0
 802055c:	d17c      	bne.n	8020658 <SCSI_Read10+0x124>
  {
    /* case 10 : Ho <> Di */
    if ((hmsc->cbw.bmFlags & 0x80U) != 0x80U)
 802055e:	697b      	ldr	r3, [r7, #20]
 8020560:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
 8020564:	b25b      	sxtb	r3, r3
 8020566:	2b00      	cmp	r3, #0
 8020568:	db0a      	blt.n	8020580 <SCSI_Read10+0x4c>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 802056a:	697b      	ldr	r3, [r7, #20]
 802056c:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 8020570:	2320      	movs	r3, #32
 8020572:	2205      	movs	r2, #5
 8020574:	68f8      	ldr	r0, [r7, #12]
 8020576:	f7ff ff1c 	bl	80203b2 <SCSI_SenseCode>
      return -1;
 802057a:	f04f 33ff 	mov.w	r3, #4294967295
 802057e:	e075      	b.n	802066c <SCSI_Read10+0x138>
    }

    if (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED)
 8020580:	697b      	ldr	r3, [r7, #20]
 8020582:	f893 3262 	ldrb.w	r3, [r3, #610]	; 0x262
 8020586:	2b02      	cmp	r3, #2
 8020588:	d108      	bne.n	802059c <SCSI_Read10+0x68>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 802058a:	7af9      	ldrb	r1, [r7, #11]
 802058c:	233a      	movs	r3, #58	; 0x3a
 802058e:	2202      	movs	r2, #2
 8020590:	68f8      	ldr	r0, [r7, #12]
 8020592:	f7ff ff0e 	bl	80203b2 <SCSI_SenseCode>

      return -1;
 8020596:	f04f 33ff 	mov.w	r3, #4294967295
 802059a:	e067      	b.n	802066c <SCSI_Read10+0x138>
    }

    if (((USBD_StorageTypeDef *)pdev->pUserData)->IsReady(lun) != 0)
 802059c:	68fb      	ldr	r3, [r7, #12]
 802059e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80205a2:	689b      	ldr	r3, [r3, #8]
 80205a4:	7afa      	ldrb	r2, [r7, #11]
 80205a6:	4610      	mov	r0, r2
 80205a8:	4798      	blx	r3
 80205aa:	4603      	mov	r3, r0
 80205ac:	2b00      	cmp	r3, #0
 80205ae:	d008      	beq.n	80205c2 <SCSI_Read10+0x8e>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 80205b0:	7af9      	ldrb	r1, [r7, #11]
 80205b2:	233a      	movs	r3, #58	; 0x3a
 80205b4:	2202      	movs	r2, #2
 80205b6:	68f8      	ldr	r0, [r7, #12]
 80205b8:	f7ff fefb 	bl	80203b2 <SCSI_SenseCode>
      return -1;
 80205bc:	f04f 33ff 	mov.w	r3, #4294967295
 80205c0:	e054      	b.n	802066c <SCSI_Read10+0x138>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 80205c2:	687b      	ldr	r3, [r7, #4]
 80205c4:	3302      	adds	r3, #2
 80205c6:	781b      	ldrb	r3, [r3, #0]
 80205c8:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 80205ca:	687b      	ldr	r3, [r7, #4]
 80205cc:	3303      	adds	r3, #3
 80205ce:	781b      	ldrb	r3, [r3, #0]
 80205d0:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 80205d2:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] <<  8) |
 80205d4:	687b      	ldr	r3, [r7, #4]
 80205d6:	3304      	adds	r3, #4
 80205d8:	781b      	ldrb	r3, [r3, #0]
 80205da:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 80205dc:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 80205de:	687a      	ldr	r2, [r7, #4]
 80205e0:	3205      	adds	r2, #5
 80205e2:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] <<  8) |
 80205e4:	431a      	orrs	r2, r3
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 80205e6:	697b      	ldr	r3, [r7, #20]
 80205e8:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

    hmsc->scsi_blk_len = ((uint32_t)params[7] <<  8) | (uint32_t)params[8];
 80205ec:	687b      	ldr	r3, [r7, #4]
 80205ee:	3307      	adds	r3, #7
 80205f0:	781b      	ldrb	r3, [r3, #0]
 80205f2:	021b      	lsls	r3, r3, #8
 80205f4:	687a      	ldr	r2, [r7, #4]
 80205f6:	3208      	adds	r2, #8
 80205f8:	7812      	ldrb	r2, [r2, #0]
 80205fa:	431a      	orrs	r2, r3
 80205fc:	697b      	ldr	r3, [r7, #20]
 80205fe:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 8020602:	697b      	ldr	r3, [r7, #20]
 8020604:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
 8020608:	697b      	ldr	r3, [r7, #20]
 802060a:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 802060e:	7af9      	ldrb	r1, [r7, #11]
 8020610:	68f8      	ldr	r0, [r7, #12]
 8020612:	f000 faad 	bl	8020b70 <SCSI_CheckAddressRange>
 8020616:	4603      	mov	r3, r0
 8020618:	2b00      	cmp	r3, #0
 802061a:	da02      	bge.n	8020622 <SCSI_Read10+0xee>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 802061c:	f04f 33ff 	mov.w	r3, #4294967295
 8020620:	e024      	b.n	802066c <SCSI_Read10+0x138>
    }

    /* cases 4,5 : Hi <> Dn */
    if (hmsc->cbw.dDataLength != (hmsc->scsi_blk_len * hmsc->scsi_blk_size))
 8020622:	697b      	ldr	r3, [r7, #20]
 8020624:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 8020628:	697b      	ldr	r3, [r7, #20]
 802062a:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 802062e:	6979      	ldr	r1, [r7, #20]
 8020630:	f8b1 1264 	ldrh.w	r1, [r1, #612]	; 0x264
 8020634:	fb01 f303 	mul.w	r3, r1, r3
 8020638:	429a      	cmp	r2, r3
 802063a:	d00a      	beq.n	8020652 <SCSI_Read10+0x11e>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 802063c:	697b      	ldr	r3, [r7, #20]
 802063e:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 8020642:	2320      	movs	r3, #32
 8020644:	2205      	movs	r2, #5
 8020646:	68f8      	ldr	r0, [r7, #12]
 8020648:	f7ff feb3 	bl	80203b2 <SCSI_SenseCode>
      return -1;
 802064c:	f04f 33ff 	mov.w	r3, #4294967295
 8020650:	e00c      	b.n	802066c <SCSI_Read10+0x138>
    }

    hmsc->bot_state = USBD_BOT_DATA_IN;
 8020652:	697b      	ldr	r3, [r7, #20]
 8020654:	2202      	movs	r2, #2
 8020656:	721a      	strb	r2, [r3, #8]
  }
  hmsc->bot_data_length = MSC_MEDIA_PACKET;
 8020658:	697b      	ldr	r3, [r7, #20]
 802065a:	f44f 7200 	mov.w	r2, #512	; 0x200
 802065e:	60da      	str	r2, [r3, #12]

  return SCSI_ProcessRead(pdev, lun);
 8020660:	7afb      	ldrb	r3, [r7, #11]
 8020662:	4619      	mov	r1, r3
 8020664:	68f8      	ldr	r0, [r7, #12]
 8020666:	f000 faab 	bl	8020bc0 <SCSI_ProcessRead>
 802066a:	4603      	mov	r3, r0
}
 802066c:	4618      	mov	r0, r3
 802066e:	3718      	adds	r7, #24
 8020670:	46bd      	mov	sp, r7
 8020672:	bd80      	pop	{r7, pc}

08020674 <SCSI_Read12>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Read12(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8020674:	b580      	push	{r7, lr}
 8020676:	b086      	sub	sp, #24
 8020678:	af00      	add	r7, sp, #0
 802067a:	60f8      	str	r0, [r7, #12]
 802067c:	460b      	mov	r3, r1
 802067e:	607a      	str	r2, [r7, #4]
 8020680:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8020682:	68fb      	ldr	r3, [r7, #12]
 8020684:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8020688:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 802068a:	697b      	ldr	r3, [r7, #20]
 802068c:	2b00      	cmp	r3, #0
 802068e:	d102      	bne.n	8020696 <SCSI_Read12+0x22>
  {
    return -1;
 8020690:	f04f 33ff 	mov.w	r3, #4294967295
 8020694:	e095      	b.n	80207c2 <SCSI_Read12+0x14e>
  }

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 8020696:	697b      	ldr	r3, [r7, #20]
 8020698:	7a1b      	ldrb	r3, [r3, #8]
 802069a:	2b00      	cmp	r3, #0
 802069c:	f040 8087 	bne.w	80207ae <SCSI_Read12+0x13a>
  {
    /* case 10 : Ho <> Di */
    if ((hmsc->cbw.bmFlags & 0x80U) != 0x80U)
 80206a0:	697b      	ldr	r3, [r7, #20]
 80206a2:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
 80206a6:	b25b      	sxtb	r3, r3
 80206a8:	2b00      	cmp	r3, #0
 80206aa:	db0a      	blt.n	80206c2 <SCSI_Read12+0x4e>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 80206ac:	697b      	ldr	r3, [r7, #20]
 80206ae:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 80206b2:	2320      	movs	r3, #32
 80206b4:	2205      	movs	r2, #5
 80206b6:	68f8      	ldr	r0, [r7, #12]
 80206b8:	f7ff fe7b 	bl	80203b2 <SCSI_SenseCode>
      return -1;
 80206bc:	f04f 33ff 	mov.w	r3, #4294967295
 80206c0:	e07f      	b.n	80207c2 <SCSI_Read12+0x14e>
    }

    if (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED)
 80206c2:	697b      	ldr	r3, [r7, #20]
 80206c4:	f893 3262 	ldrb.w	r3, [r3, #610]	; 0x262
 80206c8:	2b02      	cmp	r3, #2
 80206ca:	d108      	bne.n	80206de <SCSI_Read12+0x6a>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 80206cc:	7af9      	ldrb	r1, [r7, #11]
 80206ce:	233a      	movs	r3, #58	; 0x3a
 80206d0:	2202      	movs	r2, #2
 80206d2:	68f8      	ldr	r0, [r7, #12]
 80206d4:	f7ff fe6d 	bl	80203b2 <SCSI_SenseCode>
      return -1;
 80206d8:	f04f 33ff 	mov.w	r3, #4294967295
 80206dc:	e071      	b.n	80207c2 <SCSI_Read12+0x14e>
    }

    if (((USBD_StorageTypeDef *)pdev->pUserData)->IsReady(lun) != 0)
 80206de:	68fb      	ldr	r3, [r7, #12]
 80206e0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80206e4:	689b      	ldr	r3, [r3, #8]
 80206e6:	7afa      	ldrb	r2, [r7, #11]
 80206e8:	4610      	mov	r0, r2
 80206ea:	4798      	blx	r3
 80206ec:	4603      	mov	r3, r0
 80206ee:	2b00      	cmp	r3, #0
 80206f0:	d008      	beq.n	8020704 <SCSI_Read12+0x90>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 80206f2:	7af9      	ldrb	r1, [r7, #11]
 80206f4:	233a      	movs	r3, #58	; 0x3a
 80206f6:	2202      	movs	r2, #2
 80206f8:	68f8      	ldr	r0, [r7, #12]
 80206fa:	f7ff fe5a 	bl	80203b2 <SCSI_SenseCode>
      return -1;
 80206fe:	f04f 33ff 	mov.w	r3, #4294967295
 8020702:	e05e      	b.n	80207c2 <SCSI_Read12+0x14e>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8020704:	687b      	ldr	r3, [r7, #4]
 8020706:	3302      	adds	r3, #2
 8020708:	781b      	ldrb	r3, [r3, #0]
 802070a:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 802070c:	687b      	ldr	r3, [r7, #4]
 802070e:	3303      	adds	r3, #3
 8020710:	781b      	ldrb	r3, [r3, #0]
 8020712:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8020714:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] <<  8) |
 8020716:	687b      	ldr	r3, [r7, #4]
 8020718:	3304      	adds	r3, #4
 802071a:	781b      	ldrb	r3, [r3, #0]
 802071c:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 802071e:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 8020720:	687a      	ldr	r2, [r7, #4]
 8020722:	3205      	adds	r2, #5
 8020724:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] <<  8) |
 8020726:	431a      	orrs	r2, r3
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8020728:	697b      	ldr	r3, [r7, #20]
 802072a:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 802072e:	687b      	ldr	r3, [r7, #4]
 8020730:	3306      	adds	r3, #6
 8020732:	781b      	ldrb	r3, [r3, #0]
 8020734:	061a      	lsls	r2, r3, #24
                         ((uint32_t)params[7] << 16) |
 8020736:	687b      	ldr	r3, [r7, #4]
 8020738:	3307      	adds	r3, #7
 802073a:	781b      	ldrb	r3, [r3, #0]
 802073c:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 802073e:	431a      	orrs	r2, r3
                         ((uint32_t)params[8] << 8) |
 8020740:	687b      	ldr	r3, [r7, #4]
 8020742:	3308      	adds	r3, #8
 8020744:	781b      	ldrb	r3, [r3, #0]
 8020746:	021b      	lsls	r3, r3, #8
                         ((uint32_t)params[7] << 16) |
 8020748:	4313      	orrs	r3, r2
                         (uint32_t)params[9];
 802074a:	687a      	ldr	r2, [r7, #4]
 802074c:	3209      	adds	r2, #9
 802074e:	7812      	ldrb	r2, [r2, #0]
                         ((uint32_t)params[8] << 8) |
 8020750:	431a      	orrs	r2, r3
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 8020752:	697b      	ldr	r3, [r7, #20]
 8020754:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 8020758:	697b      	ldr	r3, [r7, #20]
 802075a:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
 802075e:	697b      	ldr	r3, [r7, #20]
 8020760:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 8020764:	7af9      	ldrb	r1, [r7, #11]
 8020766:	68f8      	ldr	r0, [r7, #12]
 8020768:	f000 fa02 	bl	8020b70 <SCSI_CheckAddressRange>
 802076c:	4603      	mov	r3, r0
 802076e:	2b00      	cmp	r3, #0
 8020770:	da02      	bge.n	8020778 <SCSI_Read12+0x104>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 8020772:	f04f 33ff 	mov.w	r3, #4294967295
 8020776:	e024      	b.n	80207c2 <SCSI_Read12+0x14e>
    }

    /* cases 4,5 : Hi <> Dn */
    if (hmsc->cbw.dDataLength != (hmsc->scsi_blk_len * hmsc->scsi_blk_size))
 8020778:	697b      	ldr	r3, [r7, #20]
 802077a:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 802077e:	697b      	ldr	r3, [r7, #20]
 8020780:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 8020784:	6979      	ldr	r1, [r7, #20]
 8020786:	f8b1 1264 	ldrh.w	r1, [r1, #612]	; 0x264
 802078a:	fb01 f303 	mul.w	r3, r1, r3
 802078e:	429a      	cmp	r2, r3
 8020790:	d00a      	beq.n	80207a8 <SCSI_Read12+0x134>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8020792:	697b      	ldr	r3, [r7, #20]
 8020794:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 8020798:	2320      	movs	r3, #32
 802079a:	2205      	movs	r2, #5
 802079c:	68f8      	ldr	r0, [r7, #12]
 802079e:	f7ff fe08 	bl	80203b2 <SCSI_SenseCode>
      return -1;
 80207a2:	f04f 33ff 	mov.w	r3, #4294967295
 80207a6:	e00c      	b.n	80207c2 <SCSI_Read12+0x14e>
    }

    hmsc->bot_state = USBD_BOT_DATA_IN;
 80207a8:	697b      	ldr	r3, [r7, #20]
 80207aa:	2202      	movs	r2, #2
 80207ac:	721a      	strb	r2, [r3, #8]
  }
  hmsc->bot_data_length = MSC_MEDIA_PACKET;
 80207ae:	697b      	ldr	r3, [r7, #20]
 80207b0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80207b4:	60da      	str	r2, [r3, #12]

  return SCSI_ProcessRead(pdev, lun);
 80207b6:	7afb      	ldrb	r3, [r7, #11]
 80207b8:	4619      	mov	r1, r3
 80207ba:	68f8      	ldr	r0, [r7, #12]
 80207bc:	f000 fa00 	bl	8020bc0 <SCSI_ProcessRead>
 80207c0:	4603      	mov	r3, r0
}
 80207c2:	4618      	mov	r0, r3
 80207c4:	3718      	adds	r7, #24
 80207c6:	46bd      	mov	sp, r7
 80207c8:	bd80      	pop	{r7, pc}

080207ca <SCSI_Write10>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Write10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 80207ca:	b580      	push	{r7, lr}
 80207cc:	b086      	sub	sp, #24
 80207ce:	af00      	add	r7, sp, #0
 80207d0:	60f8      	str	r0, [r7, #12]
 80207d2:	460b      	mov	r3, r1
 80207d4:	607a      	str	r2, [r7, #4]
 80207d6:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 80207d8:	68fb      	ldr	r3, [r7, #12]
 80207da:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80207de:	617b      	str	r3, [r7, #20]
  uint32_t len;

  if (hmsc == NULL)
 80207e0:	697b      	ldr	r3, [r7, #20]
 80207e2:	2b00      	cmp	r3, #0
 80207e4:	d102      	bne.n	80207ec <SCSI_Write10+0x22>
  {
    return -1;
 80207e6:	f04f 33ff 	mov.w	r3, #4294967295
 80207ea:	e0af      	b.n	802094c <SCSI_Write10+0x182>
  }

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 80207ec:	697b      	ldr	r3, [r7, #20]
 80207ee:	7a1b      	ldrb	r3, [r3, #8]
 80207f0:	2b00      	cmp	r3, #0
 80207f2:	f040 80a5 	bne.w	8020940 <SCSI_Write10+0x176>
  {
    if (hmsc->cbw.dDataLength == 0U)
 80207f6:	697b      	ldr	r3, [r7, #20]
 80207f8:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 80207fc:	2b00      	cmp	r3, #0
 80207fe:	d10a      	bne.n	8020816 <SCSI_Write10+0x4c>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8020800:	697b      	ldr	r3, [r7, #20]
 8020802:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 8020806:	2320      	movs	r3, #32
 8020808:	2205      	movs	r2, #5
 802080a:	68f8      	ldr	r0, [r7, #12]
 802080c:	f7ff fdd1 	bl	80203b2 <SCSI_SenseCode>
      return -1;
 8020810:	f04f 33ff 	mov.w	r3, #4294967295
 8020814:	e09a      	b.n	802094c <SCSI_Write10+0x182>
    }

    /* case 8 : Hi <> Do */
    if ((hmsc->cbw.bmFlags & 0x80U) == 0x80U)
 8020816:	697b      	ldr	r3, [r7, #20]
 8020818:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
 802081c:	b25b      	sxtb	r3, r3
 802081e:	2b00      	cmp	r3, #0
 8020820:	da0a      	bge.n	8020838 <SCSI_Write10+0x6e>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8020822:	697b      	ldr	r3, [r7, #20]
 8020824:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 8020828:	2320      	movs	r3, #32
 802082a:	2205      	movs	r2, #5
 802082c:	68f8      	ldr	r0, [r7, #12]
 802082e:	f7ff fdc0 	bl	80203b2 <SCSI_SenseCode>
      return -1;
 8020832:	f04f 33ff 	mov.w	r3, #4294967295
 8020836:	e089      	b.n	802094c <SCSI_Write10+0x182>
    }

    /* Check whether Media is ready */
    if (((USBD_StorageTypeDef *)pdev->pUserData)->IsReady(lun) != 0)
 8020838:	68fb      	ldr	r3, [r7, #12]
 802083a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 802083e:	689b      	ldr	r3, [r3, #8]
 8020840:	7afa      	ldrb	r2, [r7, #11]
 8020842:	4610      	mov	r0, r2
 8020844:	4798      	blx	r3
 8020846:	4603      	mov	r3, r0
 8020848:	2b00      	cmp	r3, #0
 802084a:	d008      	beq.n	802085e <SCSI_Write10+0x94>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 802084c:	7af9      	ldrb	r1, [r7, #11]
 802084e:	233a      	movs	r3, #58	; 0x3a
 8020850:	2202      	movs	r2, #2
 8020852:	68f8      	ldr	r0, [r7, #12]
 8020854:	f7ff fdad 	bl	80203b2 <SCSI_SenseCode>
      return -1;
 8020858:	f04f 33ff 	mov.w	r3, #4294967295
 802085c:	e076      	b.n	802094c <SCSI_Write10+0x182>
    }

    /* Check If media is write-protected */
    if (((USBD_StorageTypeDef *)pdev->pUserData)->IsWriteProtected(lun) != 0)
 802085e:	68fb      	ldr	r3, [r7, #12]
 8020860:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8020864:	68db      	ldr	r3, [r3, #12]
 8020866:	7afa      	ldrb	r2, [r7, #11]
 8020868:	4610      	mov	r0, r2
 802086a:	4798      	blx	r3
 802086c:	4603      	mov	r3, r0
 802086e:	2b00      	cmp	r3, #0
 8020870:	d008      	beq.n	8020884 <SCSI_Write10+0xba>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, WRITE_PROTECTED);
 8020872:	7af9      	ldrb	r1, [r7, #11]
 8020874:	2327      	movs	r3, #39	; 0x27
 8020876:	2202      	movs	r2, #2
 8020878:	68f8      	ldr	r0, [r7, #12]
 802087a:	f7ff fd9a 	bl	80203b2 <SCSI_SenseCode>
      return -1;
 802087e:	f04f 33ff 	mov.w	r3, #4294967295
 8020882:	e063      	b.n	802094c <SCSI_Write10+0x182>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8020884:	687b      	ldr	r3, [r7, #4]
 8020886:	3302      	adds	r3, #2
 8020888:	781b      	ldrb	r3, [r3, #0]
 802088a:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 802088c:	687b      	ldr	r3, [r7, #4]
 802088e:	3303      	adds	r3, #3
 8020890:	781b      	ldrb	r3, [r3, #0]
 8020892:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8020894:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] << 8) |
 8020896:	687b      	ldr	r3, [r7, #4]
 8020898:	3304      	adds	r3, #4
 802089a:	781b      	ldrb	r3, [r3, #0]
 802089c:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 802089e:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 80208a0:	687a      	ldr	r2, [r7, #4]
 80208a2:	3205      	adds	r2, #5
 80208a4:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] << 8) |
 80208a6:	431a      	orrs	r2, r3
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 80208a8:	697b      	ldr	r3, [r7, #20]
 80208aa:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

    hmsc->scsi_blk_len = ((uint32_t)params[7] << 8) |
 80208ae:	687b      	ldr	r3, [r7, #4]
 80208b0:	3307      	adds	r3, #7
 80208b2:	781b      	ldrb	r3, [r3, #0]
 80208b4:	021b      	lsls	r3, r3, #8
                         (uint32_t)params[8];
 80208b6:	687a      	ldr	r2, [r7, #4]
 80208b8:	3208      	adds	r2, #8
 80208ba:	7812      	ldrb	r2, [r2, #0]
    hmsc->scsi_blk_len = ((uint32_t)params[7] << 8) |
 80208bc:	431a      	orrs	r2, r3
 80208be:	697b      	ldr	r3, [r7, #20]
 80208c0:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

    /* check if LBA address is in the right range */
    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 80208c4:	697b      	ldr	r3, [r7, #20]
 80208c6:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
 80208ca:	697b      	ldr	r3, [r7, #20]
 80208cc:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 80208d0:	7af9      	ldrb	r1, [r7, #11]
 80208d2:	68f8      	ldr	r0, [r7, #12]
 80208d4:	f000 f94c 	bl	8020b70 <SCSI_CheckAddressRange>
 80208d8:	4603      	mov	r3, r0
 80208da:	2b00      	cmp	r3, #0
 80208dc:	da02      	bge.n	80208e4 <SCSI_Write10+0x11a>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 80208de:	f04f 33ff 	mov.w	r3, #4294967295
 80208e2:	e033      	b.n	802094c <SCSI_Write10+0x182>
    }

    len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 80208e4:	697b      	ldr	r3, [r7, #20]
 80208e6:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 80208ea:	697a      	ldr	r2, [r7, #20]
 80208ec:	f8b2 2264 	ldrh.w	r2, [r2, #612]	; 0x264
 80208f0:	fb02 f303 	mul.w	r3, r2, r3
 80208f4:	613b      	str	r3, [r7, #16]

    /* cases 3,11,13 : Hn,Ho <> D0 */
    if (hmsc->cbw.dDataLength != len)
 80208f6:	697b      	ldr	r3, [r7, #20]
 80208f8:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 80208fc:	693a      	ldr	r2, [r7, #16]
 80208fe:	429a      	cmp	r2, r3
 8020900:	d00a      	beq.n	8020918 <SCSI_Write10+0x14e>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8020902:	697b      	ldr	r3, [r7, #20]
 8020904:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 8020908:	2320      	movs	r3, #32
 802090a:	2205      	movs	r2, #5
 802090c:	68f8      	ldr	r0, [r7, #12]
 802090e:	f7ff fd50 	bl	80203b2 <SCSI_SenseCode>
      return -1;
 8020912:	f04f 33ff 	mov.w	r3, #4294967295
 8020916:	e019      	b.n	802094c <SCSI_Write10+0x182>
    }

    len = MIN(len, MSC_MEDIA_PACKET);
 8020918:	693b      	ldr	r3, [r7, #16]
 802091a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 802091e:	bf28      	it	cs
 8020920:	f44f 7300 	movcs.w	r3, #512	; 0x200
 8020924:	613b      	str	r3, [r7, #16]

    /* Prepare EP to receive first data packet */
    hmsc->bot_state = USBD_BOT_DATA_OUT;
 8020926:	697b      	ldr	r3, [r7, #20]
 8020928:	2201      	movs	r2, #1
 802092a:	721a      	strb	r2, [r3, #8]
    (void)USBD_LL_PrepareReceive(pdev, MSC_EPOUT_ADDR, hmsc->bot_data, len);
 802092c:	697b      	ldr	r3, [r7, #20]
 802092e:	f103 0210 	add.w	r2, r3, #16
 8020932:	693b      	ldr	r3, [r7, #16]
 8020934:	2101      	movs	r1, #1
 8020936:	68f8      	ldr	r0, [r7, #12]
 8020938:	f002 f87f 	bl	8022a3a <USBD_LL_PrepareReceive>
  else /* Write Process ongoing */
  {
    return SCSI_ProcessWrite(pdev, lun);
  }

  return 0;
 802093c:	2300      	movs	r3, #0
 802093e:	e005      	b.n	802094c <SCSI_Write10+0x182>
    return SCSI_ProcessWrite(pdev, lun);
 8020940:	7afb      	ldrb	r3, [r7, #11]
 8020942:	4619      	mov	r1, r3
 8020944:	68f8      	ldr	r0, [r7, #12]
 8020946:	f000 f9b4 	bl	8020cb2 <SCSI_ProcessWrite>
 802094a:	4603      	mov	r3, r0
}
 802094c:	4618      	mov	r0, r3
 802094e:	3718      	adds	r7, #24
 8020950:	46bd      	mov	sp, r7
 8020952:	bd80      	pop	{r7, pc}

08020954 <SCSI_Write12>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Write12(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8020954:	b580      	push	{r7, lr}
 8020956:	b086      	sub	sp, #24
 8020958:	af00      	add	r7, sp, #0
 802095a:	60f8      	str	r0, [r7, #12]
 802095c:	460b      	mov	r3, r1
 802095e:	607a      	str	r2, [r7, #4]
 8020960:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8020962:	68fb      	ldr	r3, [r7, #12]
 8020964:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8020968:	617b      	str	r3, [r7, #20]
  uint32_t len;

  if (hmsc == NULL)
 802096a:	697b      	ldr	r3, [r7, #20]
 802096c:	2b00      	cmp	r3, #0
 802096e:	d102      	bne.n	8020976 <SCSI_Write12+0x22>
  {
    return -1;
 8020970:	f04f 33ff 	mov.w	r3, #4294967295
 8020974:	e0bf      	b.n	8020af6 <SCSI_Write12+0x1a2>
  }

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 8020976:	697b      	ldr	r3, [r7, #20]
 8020978:	7a1b      	ldrb	r3, [r3, #8]
 802097a:	2b00      	cmp	r3, #0
 802097c:	f040 80b5 	bne.w	8020aea <SCSI_Write12+0x196>
  {
    if (hmsc->cbw.dDataLength == 0U)
 8020980:	697b      	ldr	r3, [r7, #20]
 8020982:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8020986:	2b00      	cmp	r3, #0
 8020988:	d10a      	bne.n	80209a0 <SCSI_Write12+0x4c>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 802098a:	697b      	ldr	r3, [r7, #20]
 802098c:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 8020990:	2320      	movs	r3, #32
 8020992:	2205      	movs	r2, #5
 8020994:	68f8      	ldr	r0, [r7, #12]
 8020996:	f7ff fd0c 	bl	80203b2 <SCSI_SenseCode>
      return -1;
 802099a:	f04f 33ff 	mov.w	r3, #4294967295
 802099e:	e0aa      	b.n	8020af6 <SCSI_Write12+0x1a2>
    }

    /* case 8 : Hi <> Do */
    if ((hmsc->cbw.bmFlags & 0x80U) == 0x80U)
 80209a0:	697b      	ldr	r3, [r7, #20]
 80209a2:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
 80209a6:	b25b      	sxtb	r3, r3
 80209a8:	2b00      	cmp	r3, #0
 80209aa:	da0a      	bge.n	80209c2 <SCSI_Write12+0x6e>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 80209ac:	697b      	ldr	r3, [r7, #20]
 80209ae:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 80209b2:	2320      	movs	r3, #32
 80209b4:	2205      	movs	r2, #5
 80209b6:	68f8      	ldr	r0, [r7, #12]
 80209b8:	f7ff fcfb 	bl	80203b2 <SCSI_SenseCode>
      return -1;
 80209bc:	f04f 33ff 	mov.w	r3, #4294967295
 80209c0:	e099      	b.n	8020af6 <SCSI_Write12+0x1a2>
    }

    /* Check whether Media is ready */
    if (((USBD_StorageTypeDef *)pdev->pUserData)->IsReady(lun) != 0)
 80209c2:	68fb      	ldr	r3, [r7, #12]
 80209c4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80209c8:	689b      	ldr	r3, [r3, #8]
 80209ca:	7afa      	ldrb	r2, [r7, #11]
 80209cc:	4610      	mov	r0, r2
 80209ce:	4798      	blx	r3
 80209d0:	4603      	mov	r3, r0
 80209d2:	2b00      	cmp	r3, #0
 80209d4:	d00b      	beq.n	80209ee <SCSI_Write12+0x9a>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 80209d6:	7af9      	ldrb	r1, [r7, #11]
 80209d8:	233a      	movs	r3, #58	; 0x3a
 80209da:	2202      	movs	r2, #2
 80209dc:	68f8      	ldr	r0, [r7, #12]
 80209de:	f7ff fce8 	bl	80203b2 <SCSI_SenseCode>
      hmsc->bot_state = USBD_BOT_NO_DATA;
 80209e2:	697b      	ldr	r3, [r7, #20]
 80209e4:	2205      	movs	r2, #5
 80209e6:	721a      	strb	r2, [r3, #8]
      return -1;
 80209e8:	f04f 33ff 	mov.w	r3, #4294967295
 80209ec:	e083      	b.n	8020af6 <SCSI_Write12+0x1a2>
    }

    /* Check If media is write-protected */
    if (((USBD_StorageTypeDef *)pdev->pUserData)->IsWriteProtected(lun) != 0)
 80209ee:	68fb      	ldr	r3, [r7, #12]
 80209f0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80209f4:	68db      	ldr	r3, [r3, #12]
 80209f6:	7afa      	ldrb	r2, [r7, #11]
 80209f8:	4610      	mov	r0, r2
 80209fa:	4798      	blx	r3
 80209fc:	4603      	mov	r3, r0
 80209fe:	2b00      	cmp	r3, #0
 8020a00:	d00b      	beq.n	8020a1a <SCSI_Write12+0xc6>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, WRITE_PROTECTED);
 8020a02:	7af9      	ldrb	r1, [r7, #11]
 8020a04:	2327      	movs	r3, #39	; 0x27
 8020a06:	2202      	movs	r2, #2
 8020a08:	68f8      	ldr	r0, [r7, #12]
 8020a0a:	f7ff fcd2 	bl	80203b2 <SCSI_SenseCode>
      hmsc->bot_state = USBD_BOT_NO_DATA;
 8020a0e:	697b      	ldr	r3, [r7, #20]
 8020a10:	2205      	movs	r2, #5
 8020a12:	721a      	strb	r2, [r3, #8]
      return -1;
 8020a14:	f04f 33ff 	mov.w	r3, #4294967295
 8020a18:	e06d      	b.n	8020af6 <SCSI_Write12+0x1a2>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8020a1a:	687b      	ldr	r3, [r7, #4]
 8020a1c:	3302      	adds	r3, #2
 8020a1e:	781b      	ldrb	r3, [r3, #0]
 8020a20:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 8020a22:	687b      	ldr	r3, [r7, #4]
 8020a24:	3303      	adds	r3, #3
 8020a26:	781b      	ldrb	r3, [r3, #0]
 8020a28:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8020a2a:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] << 8) |
 8020a2c:	687b      	ldr	r3, [r7, #4]
 8020a2e:	3304      	adds	r3, #4
 8020a30:	781b      	ldrb	r3, [r3, #0]
 8020a32:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 8020a34:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 8020a36:	687a      	ldr	r2, [r7, #4]
 8020a38:	3205      	adds	r2, #5
 8020a3a:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] << 8) |
 8020a3c:	431a      	orrs	r2, r3
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8020a3e:	697b      	ldr	r3, [r7, #20]
 8020a40:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 8020a44:	687b      	ldr	r3, [r7, #4]
 8020a46:	3306      	adds	r3, #6
 8020a48:	781b      	ldrb	r3, [r3, #0]
 8020a4a:	061a      	lsls	r2, r3, #24
                         ((uint32_t)params[7] << 16) |
 8020a4c:	687b      	ldr	r3, [r7, #4]
 8020a4e:	3307      	adds	r3, #7
 8020a50:	781b      	ldrb	r3, [r3, #0]
 8020a52:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 8020a54:	431a      	orrs	r2, r3
                         ((uint32_t)params[8] << 8) |
 8020a56:	687b      	ldr	r3, [r7, #4]
 8020a58:	3308      	adds	r3, #8
 8020a5a:	781b      	ldrb	r3, [r3, #0]
 8020a5c:	021b      	lsls	r3, r3, #8
                         ((uint32_t)params[7] << 16) |
 8020a5e:	4313      	orrs	r3, r2
                         (uint32_t)params[9];
 8020a60:	687a      	ldr	r2, [r7, #4]
 8020a62:	3209      	adds	r2, #9
 8020a64:	7812      	ldrb	r2, [r2, #0]
                         ((uint32_t)params[8] << 8) |
 8020a66:	431a      	orrs	r2, r3
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 8020a68:	697b      	ldr	r3, [r7, #20]
 8020a6a:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

    /* check if LBA address is in the right range */
    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 8020a6e:	697b      	ldr	r3, [r7, #20]
 8020a70:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
 8020a74:	697b      	ldr	r3, [r7, #20]
 8020a76:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 8020a7a:	7af9      	ldrb	r1, [r7, #11]
 8020a7c:	68f8      	ldr	r0, [r7, #12]
 8020a7e:	f000 f877 	bl	8020b70 <SCSI_CheckAddressRange>
 8020a82:	4603      	mov	r3, r0
 8020a84:	2b00      	cmp	r3, #0
 8020a86:	da02      	bge.n	8020a8e <SCSI_Write12+0x13a>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 8020a88:	f04f 33ff 	mov.w	r3, #4294967295
 8020a8c:	e033      	b.n	8020af6 <SCSI_Write12+0x1a2>
    }

    len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 8020a8e:	697b      	ldr	r3, [r7, #20]
 8020a90:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 8020a94:	697a      	ldr	r2, [r7, #20]
 8020a96:	f8b2 2264 	ldrh.w	r2, [r2, #612]	; 0x264
 8020a9a:	fb02 f303 	mul.w	r3, r2, r3
 8020a9e:	613b      	str	r3, [r7, #16]

    /* cases 3,11,13 : Hn,Ho <> D0 */
    if (hmsc->cbw.dDataLength != len)
 8020aa0:	697b      	ldr	r3, [r7, #20]
 8020aa2:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8020aa6:	693a      	ldr	r2, [r7, #16]
 8020aa8:	429a      	cmp	r2, r3
 8020aaa:	d00a      	beq.n	8020ac2 <SCSI_Write12+0x16e>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8020aac:	697b      	ldr	r3, [r7, #20]
 8020aae:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 8020ab2:	2320      	movs	r3, #32
 8020ab4:	2205      	movs	r2, #5
 8020ab6:	68f8      	ldr	r0, [r7, #12]
 8020ab8:	f7ff fc7b 	bl	80203b2 <SCSI_SenseCode>
      return -1;
 8020abc:	f04f 33ff 	mov.w	r3, #4294967295
 8020ac0:	e019      	b.n	8020af6 <SCSI_Write12+0x1a2>
    }

    len = MIN(len, MSC_MEDIA_PACKET);
 8020ac2:	693b      	ldr	r3, [r7, #16]
 8020ac4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8020ac8:	bf28      	it	cs
 8020aca:	f44f 7300 	movcs.w	r3, #512	; 0x200
 8020ace:	613b      	str	r3, [r7, #16]

    /* Prepare EP to receive first data packet */
    hmsc->bot_state = USBD_BOT_DATA_OUT;
 8020ad0:	697b      	ldr	r3, [r7, #20]
 8020ad2:	2201      	movs	r2, #1
 8020ad4:	721a      	strb	r2, [r3, #8]
    (void)USBD_LL_PrepareReceive(pdev, MSC_EPOUT_ADDR, hmsc->bot_data, len);
 8020ad6:	697b      	ldr	r3, [r7, #20]
 8020ad8:	f103 0210 	add.w	r2, r3, #16
 8020adc:	693b      	ldr	r3, [r7, #16]
 8020ade:	2101      	movs	r1, #1
 8020ae0:	68f8      	ldr	r0, [r7, #12]
 8020ae2:	f001 ffaa 	bl	8022a3a <USBD_LL_PrepareReceive>
  else /* Write Process ongoing */
  {
    return SCSI_ProcessWrite(pdev, lun);
  }

  return 0;
 8020ae6:	2300      	movs	r3, #0
 8020ae8:	e005      	b.n	8020af6 <SCSI_Write12+0x1a2>
    return SCSI_ProcessWrite(pdev, lun);
 8020aea:	7afb      	ldrb	r3, [r7, #11]
 8020aec:	4619      	mov	r1, r3
 8020aee:	68f8      	ldr	r0, [r7, #12]
 8020af0:	f000 f8df 	bl	8020cb2 <SCSI_ProcessWrite>
 8020af4:	4603      	mov	r3, r0
}
 8020af6:	4618      	mov	r0, r3
 8020af8:	3718      	adds	r7, #24
 8020afa:	46bd      	mov	sp, r7
 8020afc:	bd80      	pop	{r7, pc}

08020afe <SCSI_Verify10>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Verify10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8020afe:	b580      	push	{r7, lr}
 8020b00:	b086      	sub	sp, #24
 8020b02:	af00      	add	r7, sp, #0
 8020b04:	60f8      	str	r0, [r7, #12]
 8020b06:	460b      	mov	r3, r1
 8020b08:	607a      	str	r2, [r7, #4]
 8020b0a:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8020b0c:	68fb      	ldr	r3, [r7, #12]
 8020b0e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8020b12:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 8020b14:	697b      	ldr	r3, [r7, #20]
 8020b16:	2b00      	cmp	r3, #0
 8020b18:	d102      	bne.n	8020b20 <SCSI_Verify10+0x22>
  {
    return -1;
 8020b1a:	f04f 33ff 	mov.w	r3, #4294967295
 8020b1e:	e023      	b.n	8020b68 <SCSI_Verify10+0x6a>
  }

  if ((params[1] & 0x02U) == 0x02U)
 8020b20:	687b      	ldr	r3, [r7, #4]
 8020b22:	3301      	adds	r3, #1
 8020b24:	781b      	ldrb	r3, [r3, #0]
 8020b26:	f003 0302 	and.w	r3, r3, #2
 8020b2a:	2b00      	cmp	r3, #0
 8020b2c:	d008      	beq.n	8020b40 <SCSI_Verify10+0x42>
  {
    SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, INVALID_FIELED_IN_COMMAND);
 8020b2e:	7af9      	ldrb	r1, [r7, #11]
 8020b30:	2324      	movs	r3, #36	; 0x24
 8020b32:	2205      	movs	r2, #5
 8020b34:	68f8      	ldr	r0, [r7, #12]
 8020b36:	f7ff fc3c 	bl	80203b2 <SCSI_SenseCode>
    return -1; /* Error, Verify Mode Not supported*/
 8020b3a:	f04f 33ff 	mov.w	r3, #4294967295
 8020b3e:	e013      	b.n	8020b68 <SCSI_Verify10+0x6a>
  }

  if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr, hmsc->scsi_blk_len) < 0)
 8020b40:	697b      	ldr	r3, [r7, #20]
 8020b42:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
 8020b46:	697b      	ldr	r3, [r7, #20]
 8020b48:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 8020b4c:	7af9      	ldrb	r1, [r7, #11]
 8020b4e:	68f8      	ldr	r0, [r7, #12]
 8020b50:	f000 f80e 	bl	8020b70 <SCSI_CheckAddressRange>
 8020b54:	4603      	mov	r3, r0
 8020b56:	2b00      	cmp	r3, #0
 8020b58:	da02      	bge.n	8020b60 <SCSI_Verify10+0x62>
  {
    return -1; /* error */
 8020b5a:	f04f 33ff 	mov.w	r3, #4294967295
 8020b5e:	e003      	b.n	8020b68 <SCSI_Verify10+0x6a>
  }

  hmsc->bot_data_length = 0U;
 8020b60:	697b      	ldr	r3, [r7, #20]
 8020b62:	2200      	movs	r2, #0
 8020b64:	60da      	str	r2, [r3, #12]

  return 0;
 8020b66:	2300      	movs	r3, #0
}
 8020b68:	4618      	mov	r0, r3
 8020b6a:	3718      	adds	r7, #24
 8020b6c:	46bd      	mov	sp, r7
 8020b6e:	bd80      	pop	{r7, pc}

08020b70 <SCSI_CheckAddressRange>:
  * @param  blk_nbr: number of block to be processed
  * @retval status
  */
static int8_t SCSI_CheckAddressRange(USBD_HandleTypeDef *pdev, uint8_t lun,
                                     uint32_t blk_offset, uint32_t blk_nbr)
{
 8020b70:	b580      	push	{r7, lr}
 8020b72:	b086      	sub	sp, #24
 8020b74:	af00      	add	r7, sp, #0
 8020b76:	60f8      	str	r0, [r7, #12]
 8020b78:	607a      	str	r2, [r7, #4]
 8020b7a:	603b      	str	r3, [r7, #0]
 8020b7c:	460b      	mov	r3, r1
 8020b7e:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8020b80:	68fb      	ldr	r3, [r7, #12]
 8020b82:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8020b86:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 8020b88:	697b      	ldr	r3, [r7, #20]
 8020b8a:	2b00      	cmp	r3, #0
 8020b8c:	d102      	bne.n	8020b94 <SCSI_CheckAddressRange+0x24>
  {
    return -1;
 8020b8e:	f04f 33ff 	mov.w	r3, #4294967295
 8020b92:	e011      	b.n	8020bb8 <SCSI_CheckAddressRange+0x48>
  }

  if ((blk_offset + blk_nbr) > hmsc->scsi_blk_nbr)
 8020b94:	687a      	ldr	r2, [r7, #4]
 8020b96:	683b      	ldr	r3, [r7, #0]
 8020b98:	441a      	add	r2, r3
 8020b9a:	697b      	ldr	r3, [r7, #20]
 8020b9c:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8020ba0:	429a      	cmp	r2, r3
 8020ba2:	d908      	bls.n	8020bb6 <SCSI_CheckAddressRange+0x46>
  {
    SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, ADDRESS_OUT_OF_RANGE);
 8020ba4:	7af9      	ldrb	r1, [r7, #11]
 8020ba6:	2321      	movs	r3, #33	; 0x21
 8020ba8:	2205      	movs	r2, #5
 8020baa:	68f8      	ldr	r0, [r7, #12]
 8020bac:	f7ff fc01 	bl	80203b2 <SCSI_SenseCode>
    return -1;
 8020bb0:	f04f 33ff 	mov.w	r3, #4294967295
 8020bb4:	e000      	b.n	8020bb8 <SCSI_CheckAddressRange+0x48>
  }

  return 0;
 8020bb6:	2300      	movs	r3, #0
}
 8020bb8:	4618      	mov	r0, r3
 8020bba:	3718      	adds	r7, #24
 8020bbc:	46bd      	mov	sp, r7
 8020bbe:	bd80      	pop	{r7, pc}

08020bc0 <SCSI_ProcessRead>:
  *         Handle Read Process
  * @param  lun: Logical unit number
  * @retval status
  */
static int8_t SCSI_ProcessRead(USBD_HandleTypeDef *pdev, uint8_t lun)
{
 8020bc0:	b590      	push	{r4, r7, lr}
 8020bc2:	b085      	sub	sp, #20
 8020bc4:	af00      	add	r7, sp, #0
 8020bc6:	6078      	str	r0, [r7, #4]
 8020bc8:	460b      	mov	r3, r1
 8020bca:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8020bcc:	687b      	ldr	r3, [r7, #4]
 8020bce:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8020bd2:	60fb      	str	r3, [r7, #12]
  uint32_t len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 8020bd4:	68fb      	ldr	r3, [r7, #12]
 8020bd6:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 8020bda:	68fa      	ldr	r2, [r7, #12]
 8020bdc:	f8b2 2264 	ldrh.w	r2, [r2, #612]	; 0x264
 8020be0:	fb02 f303 	mul.w	r3, r2, r3
 8020be4:	60bb      	str	r3, [r7, #8]

  if (hmsc == NULL)
 8020be6:	68fb      	ldr	r3, [r7, #12]
 8020be8:	2b00      	cmp	r3, #0
 8020bea:	d102      	bne.n	8020bf2 <SCSI_ProcessRead+0x32>
  {
    return -1;
 8020bec:	f04f 33ff 	mov.w	r3, #4294967295
 8020bf0:	e05b      	b.n	8020caa <SCSI_ProcessRead+0xea>
  }

  len = MIN(len, MSC_MEDIA_PACKET);
 8020bf2:	68bb      	ldr	r3, [r7, #8]
 8020bf4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8020bf8:	bf28      	it	cs
 8020bfa:	f44f 7300 	movcs.w	r3, #512	; 0x200
 8020bfe:	60bb      	str	r3, [r7, #8]

  if (((USBD_StorageTypeDef *)pdev->pUserData)->Read(lun, hmsc->bot_data,
 8020c00:	687b      	ldr	r3, [r7, #4]
 8020c02:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8020c06:	691c      	ldr	r4, [r3, #16]
 8020c08:	68fb      	ldr	r3, [r7, #12]
 8020c0a:	f103 0110 	add.w	r1, r3, #16
 8020c0e:	68fb      	ldr	r3, [r7, #12]
 8020c10:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
                                                     hmsc->scsi_blk_addr,
                                                     (len / hmsc->scsi_blk_size)) < 0)
 8020c14:	68fb      	ldr	r3, [r7, #12]
 8020c16:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 8020c1a:	4618      	mov	r0, r3
 8020c1c:	68bb      	ldr	r3, [r7, #8]
 8020c1e:	fbb3 f3f0 	udiv	r3, r3, r0
  if (((USBD_StorageTypeDef *)pdev->pUserData)->Read(lun, hmsc->bot_data,
 8020c22:	b29b      	uxth	r3, r3
 8020c24:	78f8      	ldrb	r0, [r7, #3]
 8020c26:	47a0      	blx	r4
 8020c28:	4603      	mov	r3, r0
 8020c2a:	2b00      	cmp	r3, #0
 8020c2c:	da08      	bge.n	8020c40 <SCSI_ProcessRead+0x80>
  {
    SCSI_SenseCode(pdev, lun, HARDWARE_ERROR, UNRECOVERED_READ_ERROR);
 8020c2e:	78f9      	ldrb	r1, [r7, #3]
 8020c30:	2311      	movs	r3, #17
 8020c32:	2204      	movs	r2, #4
 8020c34:	6878      	ldr	r0, [r7, #4]
 8020c36:	f7ff fbbc 	bl	80203b2 <SCSI_SenseCode>
    return -1;
 8020c3a:	f04f 33ff 	mov.w	r3, #4294967295
 8020c3e:	e034      	b.n	8020caa <SCSI_ProcessRead+0xea>
  }

  (void)USBD_LL_Transmit(pdev, MSC_EPIN_ADDR, hmsc->bot_data, len);
 8020c40:	68fb      	ldr	r3, [r7, #12]
 8020c42:	f103 0210 	add.w	r2, r3, #16
 8020c46:	68bb      	ldr	r3, [r7, #8]
 8020c48:	2181      	movs	r1, #129	; 0x81
 8020c4a:	6878      	ldr	r0, [r7, #4]
 8020c4c:	f001 fed4 	bl	80229f8 <USBD_LL_Transmit>

  hmsc->scsi_blk_addr += (len / hmsc->scsi_blk_size);
 8020c50:	68fb      	ldr	r3, [r7, #12]
 8020c52:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
 8020c56:	68fb      	ldr	r3, [r7, #12]
 8020c58:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 8020c5c:	4619      	mov	r1, r3
 8020c5e:	68bb      	ldr	r3, [r7, #8]
 8020c60:	fbb3 f3f1 	udiv	r3, r3, r1
 8020c64:	441a      	add	r2, r3
 8020c66:	68fb      	ldr	r3, [r7, #12]
 8020c68:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
  hmsc->scsi_blk_len -= (len / hmsc->scsi_blk_size);
 8020c6c:	68fb      	ldr	r3, [r7, #12]
 8020c6e:	f8d3 2270 	ldr.w	r2, [r3, #624]	; 0x270
 8020c72:	68fb      	ldr	r3, [r7, #12]
 8020c74:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 8020c78:	4619      	mov	r1, r3
 8020c7a:	68bb      	ldr	r3, [r7, #8]
 8020c7c:	fbb3 f3f1 	udiv	r3, r3, r1
 8020c80:	1ad2      	subs	r2, r2, r3
 8020c82:	68fb      	ldr	r3, [r7, #12]
 8020c84:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

  /* case 6 : Hi = Di */
  hmsc->csw.dDataResidue -= len;
 8020c88:	68fb      	ldr	r3, [r7, #12]
 8020c8a:	f8d3 2238 	ldr.w	r2, [r3, #568]	; 0x238
 8020c8e:	68bb      	ldr	r3, [r7, #8]
 8020c90:	1ad2      	subs	r2, r2, r3
 8020c92:	68fb      	ldr	r3, [r7, #12]
 8020c94:	f8c3 2238 	str.w	r2, [r3, #568]	; 0x238

  if (hmsc->scsi_blk_len == 0U)
 8020c98:	68fb      	ldr	r3, [r7, #12]
 8020c9a:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 8020c9e:	2b00      	cmp	r3, #0
 8020ca0:	d102      	bne.n	8020ca8 <SCSI_ProcessRead+0xe8>
  {
    hmsc->bot_state = USBD_BOT_LAST_DATA_IN;
 8020ca2:	68fb      	ldr	r3, [r7, #12]
 8020ca4:	2203      	movs	r2, #3
 8020ca6:	721a      	strb	r2, [r3, #8]
  }

  return 0;
 8020ca8:	2300      	movs	r3, #0
}
 8020caa:	4618      	mov	r0, r3
 8020cac:	3714      	adds	r7, #20
 8020cae:	46bd      	mov	sp, r7
 8020cb0:	bd90      	pop	{r4, r7, pc}

08020cb2 <SCSI_ProcessWrite>:
  *         Handle Write Process
  * @param  lun: Logical unit number
  * @retval status
  */
static int8_t SCSI_ProcessWrite(USBD_HandleTypeDef *pdev, uint8_t lun)
{
 8020cb2:	b590      	push	{r4, r7, lr}
 8020cb4:	b085      	sub	sp, #20
 8020cb6:	af00      	add	r7, sp, #0
 8020cb8:	6078      	str	r0, [r7, #4]
 8020cba:	460b      	mov	r3, r1
 8020cbc:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8020cbe:	687b      	ldr	r3, [r7, #4]
 8020cc0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8020cc4:	60fb      	str	r3, [r7, #12]
  uint32_t len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 8020cc6:	68fb      	ldr	r3, [r7, #12]
 8020cc8:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 8020ccc:	68fa      	ldr	r2, [r7, #12]
 8020cce:	f8b2 2264 	ldrh.w	r2, [r2, #612]	; 0x264
 8020cd2:	fb02 f303 	mul.w	r3, r2, r3
 8020cd6:	60bb      	str	r3, [r7, #8]

  if (hmsc == NULL)
 8020cd8:	68fb      	ldr	r3, [r7, #12]
 8020cda:	2b00      	cmp	r3, #0
 8020cdc:	d102      	bne.n	8020ce4 <SCSI_ProcessWrite+0x32>
  {
    return -1;
 8020cde:	f04f 33ff 	mov.w	r3, #4294967295
 8020ce2:	e06b      	b.n	8020dbc <SCSI_ProcessWrite+0x10a>
  }

  len = MIN(len, MSC_MEDIA_PACKET);
 8020ce4:	68bb      	ldr	r3, [r7, #8]
 8020ce6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8020cea:	bf28      	it	cs
 8020cec:	f44f 7300 	movcs.w	r3, #512	; 0x200
 8020cf0:	60bb      	str	r3, [r7, #8]

  if (((USBD_StorageTypeDef *)pdev->pUserData)->Write(lun, hmsc->bot_data,
 8020cf2:	687b      	ldr	r3, [r7, #4]
 8020cf4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8020cf8:	695c      	ldr	r4, [r3, #20]
 8020cfa:	68fb      	ldr	r3, [r7, #12]
 8020cfc:	f103 0110 	add.w	r1, r3, #16
 8020d00:	68fb      	ldr	r3, [r7, #12]
 8020d02:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
                                                      hmsc->scsi_blk_addr,
                                                      (len / hmsc->scsi_blk_size)) < 0)
 8020d06:	68fb      	ldr	r3, [r7, #12]
 8020d08:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 8020d0c:	4618      	mov	r0, r3
 8020d0e:	68bb      	ldr	r3, [r7, #8]
 8020d10:	fbb3 f3f0 	udiv	r3, r3, r0
  if (((USBD_StorageTypeDef *)pdev->pUserData)->Write(lun, hmsc->bot_data,
 8020d14:	b29b      	uxth	r3, r3
 8020d16:	78f8      	ldrb	r0, [r7, #3]
 8020d18:	47a0      	blx	r4
 8020d1a:	4603      	mov	r3, r0
 8020d1c:	2b00      	cmp	r3, #0
 8020d1e:	da08      	bge.n	8020d32 <SCSI_ProcessWrite+0x80>
  {
    SCSI_SenseCode(pdev, lun, HARDWARE_ERROR, WRITE_FAULT);
 8020d20:	78f9      	ldrb	r1, [r7, #3]
 8020d22:	2303      	movs	r3, #3
 8020d24:	2204      	movs	r2, #4
 8020d26:	6878      	ldr	r0, [r7, #4]
 8020d28:	f7ff fb43 	bl	80203b2 <SCSI_SenseCode>
    return -1;
 8020d2c:	f04f 33ff 	mov.w	r3, #4294967295
 8020d30:	e044      	b.n	8020dbc <SCSI_ProcessWrite+0x10a>
  }

  hmsc->scsi_blk_addr += (len / hmsc->scsi_blk_size);
 8020d32:	68fb      	ldr	r3, [r7, #12]
 8020d34:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
 8020d38:	68fb      	ldr	r3, [r7, #12]
 8020d3a:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 8020d3e:	4619      	mov	r1, r3
 8020d40:	68bb      	ldr	r3, [r7, #8]
 8020d42:	fbb3 f3f1 	udiv	r3, r3, r1
 8020d46:	441a      	add	r2, r3
 8020d48:	68fb      	ldr	r3, [r7, #12]
 8020d4a:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
  hmsc->scsi_blk_len -= (len / hmsc->scsi_blk_size);
 8020d4e:	68fb      	ldr	r3, [r7, #12]
 8020d50:	f8d3 2270 	ldr.w	r2, [r3, #624]	; 0x270
 8020d54:	68fb      	ldr	r3, [r7, #12]
 8020d56:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 8020d5a:	4619      	mov	r1, r3
 8020d5c:	68bb      	ldr	r3, [r7, #8]
 8020d5e:	fbb3 f3f1 	udiv	r3, r3, r1
 8020d62:	1ad2      	subs	r2, r2, r3
 8020d64:	68fb      	ldr	r3, [r7, #12]
 8020d66:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

  /* case 12 : Ho = Do */
  hmsc->csw.dDataResidue -= len;
 8020d6a:	68fb      	ldr	r3, [r7, #12]
 8020d6c:	f8d3 2238 	ldr.w	r2, [r3, #568]	; 0x238
 8020d70:	68bb      	ldr	r3, [r7, #8]
 8020d72:	1ad2      	subs	r2, r2, r3
 8020d74:	68fb      	ldr	r3, [r7, #12]
 8020d76:	f8c3 2238 	str.w	r2, [r3, #568]	; 0x238

  if (hmsc->scsi_blk_len == 0U)
 8020d7a:	68fb      	ldr	r3, [r7, #12]
 8020d7c:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 8020d80:	2b00      	cmp	r3, #0
 8020d82:	d104      	bne.n	8020d8e <SCSI_ProcessWrite+0xdc>
  {
    MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_PASSED);
 8020d84:	2100      	movs	r1, #0
 8020d86:	6878      	ldr	r0, [r7, #4]
 8020d88:	f7fe fdd8 	bl	801f93c <MSC_BOT_SendCSW>
 8020d8c:	e015      	b.n	8020dba <SCSI_ProcessWrite+0x108>
  }
  else
  {
    len = MIN((hmsc->scsi_blk_len * hmsc->scsi_blk_size), MSC_MEDIA_PACKET);
 8020d8e:	68fb      	ldr	r3, [r7, #12]
 8020d90:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 8020d94:	68fa      	ldr	r2, [r7, #12]
 8020d96:	f8b2 2264 	ldrh.w	r2, [r2, #612]	; 0x264
 8020d9a:	fb02 f303 	mul.w	r3, r2, r3
 8020d9e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8020da2:	bf28      	it	cs
 8020da4:	f44f 7300 	movcs.w	r3, #512	; 0x200
 8020da8:	60bb      	str	r3, [r7, #8]

    /* Prepare EP to Receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, MSC_EPOUT_ADDR, hmsc->bot_data, len);
 8020daa:	68fb      	ldr	r3, [r7, #12]
 8020dac:	f103 0210 	add.w	r2, r3, #16
 8020db0:	68bb      	ldr	r3, [r7, #8]
 8020db2:	2101      	movs	r1, #1
 8020db4:	6878      	ldr	r0, [r7, #4]
 8020db6:	f001 fe40 	bl	8022a3a <USBD_LL_PrepareReceive>
  }

  return 0;
 8020dba:	2300      	movs	r3, #0
}
 8020dbc:	4618      	mov	r0, r3
 8020dbe:	3714      	adds	r7, #20
 8020dc0:	46bd      	mov	sp, r7
 8020dc2:	bd90      	pop	{r4, r7, pc}

08020dc4 <SCSI_UpdateBotData>:
  * @param  length: Data length
  * @retval status
  */
static int8_t SCSI_UpdateBotData(USBD_MSC_BOT_HandleTypeDef *hmsc,
                                 uint8_t *pBuff, uint16_t length)
{
 8020dc4:	b480      	push	{r7}
 8020dc6:	b087      	sub	sp, #28
 8020dc8:	af00      	add	r7, sp, #0
 8020dca:	60f8      	str	r0, [r7, #12]
 8020dcc:	60b9      	str	r1, [r7, #8]
 8020dce:	4613      	mov	r3, r2
 8020dd0:	80fb      	strh	r3, [r7, #6]
  uint16_t len = length;
 8020dd2:	88fb      	ldrh	r3, [r7, #6]
 8020dd4:	82fb      	strh	r3, [r7, #22]

  if (hmsc == NULL)
 8020dd6:	68fb      	ldr	r3, [r7, #12]
 8020dd8:	2b00      	cmp	r3, #0
 8020dda:	d102      	bne.n	8020de2 <SCSI_UpdateBotData+0x1e>
  {
    return -1;
 8020ddc:	f04f 33ff 	mov.w	r3, #4294967295
 8020de0:	e013      	b.n	8020e0a <SCSI_UpdateBotData+0x46>
  }

  hmsc->bot_data_length = len;
 8020de2:	8afa      	ldrh	r2, [r7, #22]
 8020de4:	68fb      	ldr	r3, [r7, #12]
 8020de6:	60da      	str	r2, [r3, #12]

  while (len != 0U)
 8020de8:	e00b      	b.n	8020e02 <SCSI_UpdateBotData+0x3e>
  {
    len--;
 8020dea:	8afb      	ldrh	r3, [r7, #22]
 8020dec:	3b01      	subs	r3, #1
 8020dee:	82fb      	strh	r3, [r7, #22]
    hmsc->bot_data[len] = pBuff[len];
 8020df0:	8afb      	ldrh	r3, [r7, #22]
 8020df2:	68ba      	ldr	r2, [r7, #8]
 8020df4:	441a      	add	r2, r3
 8020df6:	8afb      	ldrh	r3, [r7, #22]
 8020df8:	7811      	ldrb	r1, [r2, #0]
 8020dfa:	68fa      	ldr	r2, [r7, #12]
 8020dfc:	4413      	add	r3, r2
 8020dfe:	460a      	mov	r2, r1
 8020e00:	741a      	strb	r2, [r3, #16]
  while (len != 0U)
 8020e02:	8afb      	ldrh	r3, [r7, #22]
 8020e04:	2b00      	cmp	r3, #0
 8020e06:	d1f0      	bne.n	8020dea <SCSI_UpdateBotData+0x26>
  }

  return 0;
 8020e08:	2300      	movs	r3, #0
}
 8020e0a:	4618      	mov	r0, r3
 8020e0c:	371c      	adds	r7, #28
 8020e0e:	46bd      	mov	sp, r7
 8020e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020e14:	4770      	bx	lr

08020e16 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8020e16:	b580      	push	{r7, lr}
 8020e18:	b086      	sub	sp, #24
 8020e1a:	af00      	add	r7, sp, #0
 8020e1c:	60f8      	str	r0, [r7, #12]
 8020e1e:	60b9      	str	r1, [r7, #8]
 8020e20:	4613      	mov	r3, r2
 8020e22:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8020e24:	68fb      	ldr	r3, [r7, #12]
 8020e26:	2b00      	cmp	r3, #0
 8020e28:	d101      	bne.n	8020e2e <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8020e2a:	2303      	movs	r3, #3
 8020e2c:	e01f      	b.n	8020e6e <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 8020e2e:	68fb      	ldr	r3, [r7, #12]
 8020e30:	2200      	movs	r2, #0
 8020e32:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 8020e36:	68fb      	ldr	r3, [r7, #12]
 8020e38:	2200      	movs	r2, #0
 8020e3a:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 8020e3e:	68fb      	ldr	r3, [r7, #12]
 8020e40:	2200      	movs	r2, #0
 8020e42:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8020e46:	68bb      	ldr	r3, [r7, #8]
 8020e48:	2b00      	cmp	r3, #0
 8020e4a:	d003      	beq.n	8020e54 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8020e4c:	68fb      	ldr	r3, [r7, #12]
 8020e4e:	68ba      	ldr	r2, [r7, #8]
 8020e50:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8020e54:	68fb      	ldr	r3, [r7, #12]
 8020e56:	2201      	movs	r2, #1
 8020e58:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8020e5c:	68fb      	ldr	r3, [r7, #12]
 8020e5e:	79fa      	ldrb	r2, [r7, #7]
 8020e60:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8020e62:	68f8      	ldr	r0, [r7, #12]
 8020e64:	f001 fc74 	bl	8022750 <USBD_LL_Init>
 8020e68:	4603      	mov	r3, r0
 8020e6a:	75fb      	strb	r3, [r7, #23]

  return ret;
 8020e6c:	7dfb      	ldrb	r3, [r7, #23]
}
 8020e6e:	4618      	mov	r0, r3
 8020e70:	3718      	adds	r7, #24
 8020e72:	46bd      	mov	sp, r7
 8020e74:	bd80      	pop	{r7, pc}

08020e76 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8020e76:	b580      	push	{r7, lr}
 8020e78:	b084      	sub	sp, #16
 8020e7a:	af00      	add	r7, sp, #0
 8020e7c:	6078      	str	r0, [r7, #4]
 8020e7e:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8020e80:	2300      	movs	r3, #0
 8020e82:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8020e84:	683b      	ldr	r3, [r7, #0]
 8020e86:	2b00      	cmp	r3, #0
 8020e88:	d101      	bne.n	8020e8e <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 8020e8a:	2303      	movs	r3, #3
 8020e8c:	e016      	b.n	8020ebc <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 8020e8e:	687b      	ldr	r3, [r7, #4]
 8020e90:	683a      	ldr	r2, [r7, #0]
 8020e92:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 8020e96:	687b      	ldr	r3, [r7, #4]
 8020e98:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8020e9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8020e9e:	2b00      	cmp	r3, #0
 8020ea0:	d00b      	beq.n	8020eba <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 8020ea2:	687b      	ldr	r3, [r7, #4]
 8020ea4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8020ea8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8020eaa:	f107 020e 	add.w	r2, r7, #14
 8020eae:	4610      	mov	r0, r2
 8020eb0:	4798      	blx	r3
 8020eb2:	4602      	mov	r2, r0
 8020eb4:	687b      	ldr	r3, [r7, #4]
 8020eb6:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 8020eba:	2300      	movs	r3, #0
}
 8020ebc:	4618      	mov	r0, r3
 8020ebe:	3710      	adds	r7, #16
 8020ec0:	46bd      	mov	sp, r7
 8020ec2:	bd80      	pop	{r7, pc}

08020ec4 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8020ec4:	b580      	push	{r7, lr}
 8020ec6:	b082      	sub	sp, #8
 8020ec8:	af00      	add	r7, sp, #0
 8020eca:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8020ecc:	6878      	ldr	r0, [r7, #4]
 8020ece:	f001 fc8b 	bl	80227e8 <USBD_LL_Start>
 8020ed2:	4603      	mov	r3, r0
}
 8020ed4:	4618      	mov	r0, r3
 8020ed6:	3708      	adds	r7, #8
 8020ed8:	46bd      	mov	sp, r7
 8020eda:	bd80      	pop	{r7, pc}

08020edc <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8020edc:	b480      	push	{r7}
 8020ede:	b083      	sub	sp, #12
 8020ee0:	af00      	add	r7, sp, #0
 8020ee2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8020ee4:	2300      	movs	r3, #0
}
 8020ee6:	4618      	mov	r0, r3
 8020ee8:	370c      	adds	r7, #12
 8020eea:	46bd      	mov	sp, r7
 8020eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020ef0:	4770      	bx	lr

08020ef2 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8020ef2:	b580      	push	{r7, lr}
 8020ef4:	b084      	sub	sp, #16
 8020ef6:	af00      	add	r7, sp, #0
 8020ef8:	6078      	str	r0, [r7, #4]
 8020efa:	460b      	mov	r3, r1
 8020efc:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8020efe:	2303      	movs	r3, #3
 8020f00:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8020f02:	687b      	ldr	r3, [r7, #4]
 8020f04:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8020f08:	2b00      	cmp	r3, #0
 8020f0a:	d009      	beq.n	8020f20 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 8020f0c:	687b      	ldr	r3, [r7, #4]
 8020f0e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8020f12:	681b      	ldr	r3, [r3, #0]
 8020f14:	78fa      	ldrb	r2, [r7, #3]
 8020f16:	4611      	mov	r1, r2
 8020f18:	6878      	ldr	r0, [r7, #4]
 8020f1a:	4798      	blx	r3
 8020f1c:	4603      	mov	r3, r0
 8020f1e:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8020f20:	7bfb      	ldrb	r3, [r7, #15]
}
 8020f22:	4618      	mov	r0, r3
 8020f24:	3710      	adds	r7, #16
 8020f26:	46bd      	mov	sp, r7
 8020f28:	bd80      	pop	{r7, pc}

08020f2a <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8020f2a:	b580      	push	{r7, lr}
 8020f2c:	b082      	sub	sp, #8
 8020f2e:	af00      	add	r7, sp, #0
 8020f30:	6078      	str	r0, [r7, #4]
 8020f32:	460b      	mov	r3, r1
 8020f34:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 8020f36:	687b      	ldr	r3, [r7, #4]
 8020f38:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8020f3c:	2b00      	cmp	r3, #0
 8020f3e:	d007      	beq.n	8020f50 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 8020f40:	687b      	ldr	r3, [r7, #4]
 8020f42:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8020f46:	685b      	ldr	r3, [r3, #4]
 8020f48:	78fa      	ldrb	r2, [r7, #3]
 8020f4a:	4611      	mov	r1, r2
 8020f4c:	6878      	ldr	r0, [r7, #4]
 8020f4e:	4798      	blx	r3
  }

  return USBD_OK;
 8020f50:	2300      	movs	r3, #0
}
 8020f52:	4618      	mov	r0, r3
 8020f54:	3708      	adds	r7, #8
 8020f56:	46bd      	mov	sp, r7
 8020f58:	bd80      	pop	{r7, pc}

08020f5a <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8020f5a:	b580      	push	{r7, lr}
 8020f5c:	b084      	sub	sp, #16
 8020f5e:	af00      	add	r7, sp, #0
 8020f60:	6078      	str	r0, [r7, #4]
 8020f62:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8020f64:	687b      	ldr	r3, [r7, #4]
 8020f66:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8020f6a:	6839      	ldr	r1, [r7, #0]
 8020f6c:	4618      	mov	r0, r3
 8020f6e:	f000 ffb9 	bl	8021ee4 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8020f72:	687b      	ldr	r3, [r7, #4]
 8020f74:	2201      	movs	r2, #1
 8020f76:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8020f7a:	687b      	ldr	r3, [r7, #4]
 8020f7c:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8020f80:	461a      	mov	r2, r3
 8020f82:	687b      	ldr	r3, [r7, #4]
 8020f84:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8020f88:	687b      	ldr	r3, [r7, #4]
 8020f8a:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8020f8e:	f003 031f 	and.w	r3, r3, #31
 8020f92:	2b02      	cmp	r3, #2
 8020f94:	d01a      	beq.n	8020fcc <USBD_LL_SetupStage+0x72>
 8020f96:	2b02      	cmp	r3, #2
 8020f98:	d822      	bhi.n	8020fe0 <USBD_LL_SetupStage+0x86>
 8020f9a:	2b00      	cmp	r3, #0
 8020f9c:	d002      	beq.n	8020fa4 <USBD_LL_SetupStage+0x4a>
 8020f9e:	2b01      	cmp	r3, #1
 8020fa0:	d00a      	beq.n	8020fb8 <USBD_LL_SetupStage+0x5e>
 8020fa2:	e01d      	b.n	8020fe0 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8020fa4:	687b      	ldr	r3, [r7, #4]
 8020fa6:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8020faa:	4619      	mov	r1, r3
 8020fac:	6878      	ldr	r0, [r7, #4]
 8020fae:	f000 fa61 	bl	8021474 <USBD_StdDevReq>
 8020fb2:	4603      	mov	r3, r0
 8020fb4:	73fb      	strb	r3, [r7, #15]
      break;
 8020fb6:	e020      	b.n	8020ffa <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8020fb8:	687b      	ldr	r3, [r7, #4]
 8020fba:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8020fbe:	4619      	mov	r1, r3
 8020fc0:	6878      	ldr	r0, [r7, #4]
 8020fc2:	f000 fac5 	bl	8021550 <USBD_StdItfReq>
 8020fc6:	4603      	mov	r3, r0
 8020fc8:	73fb      	strb	r3, [r7, #15]
      break;
 8020fca:	e016      	b.n	8020ffa <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8020fcc:	687b      	ldr	r3, [r7, #4]
 8020fce:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8020fd2:	4619      	mov	r1, r3
 8020fd4:	6878      	ldr	r0, [r7, #4]
 8020fd6:	f000 fb04 	bl	80215e2 <USBD_StdEPReq>
 8020fda:	4603      	mov	r3, r0
 8020fdc:	73fb      	strb	r3, [r7, #15]
      break;
 8020fde:	e00c      	b.n	8020ffa <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8020fe0:	687b      	ldr	r3, [r7, #4]
 8020fe2:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8020fe6:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8020fea:	b2db      	uxtb	r3, r3
 8020fec:	4619      	mov	r1, r3
 8020fee:	6878      	ldr	r0, [r7, #4]
 8020ff0:	f001 fc79 	bl	80228e6 <USBD_LL_StallEP>
 8020ff4:	4603      	mov	r3, r0
 8020ff6:	73fb      	strb	r3, [r7, #15]
      break;
 8020ff8:	bf00      	nop
  }

  return ret;
 8020ffa:	7bfb      	ldrb	r3, [r7, #15]
}
 8020ffc:	4618      	mov	r0, r3
 8020ffe:	3710      	adds	r7, #16
 8021000:	46bd      	mov	sp, r7
 8021002:	bd80      	pop	{r7, pc}

08021004 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8021004:	b580      	push	{r7, lr}
 8021006:	b086      	sub	sp, #24
 8021008:	af00      	add	r7, sp, #0
 802100a:	60f8      	str	r0, [r7, #12]
 802100c:	460b      	mov	r3, r1
 802100e:	607a      	str	r2, [r7, #4]
 8021010:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8021012:	7afb      	ldrb	r3, [r7, #11]
 8021014:	2b00      	cmp	r3, #0
 8021016:	d138      	bne.n	802108a <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 8021018:	68fb      	ldr	r3, [r7, #12]
 802101a:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 802101e:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8021020:	68fb      	ldr	r3, [r7, #12]
 8021022:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8021026:	2b03      	cmp	r3, #3
 8021028:	d14a      	bne.n	80210c0 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 802102a:	693b      	ldr	r3, [r7, #16]
 802102c:	689a      	ldr	r2, [r3, #8]
 802102e:	693b      	ldr	r3, [r7, #16]
 8021030:	68db      	ldr	r3, [r3, #12]
 8021032:	429a      	cmp	r2, r3
 8021034:	d913      	bls.n	802105e <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8021036:	693b      	ldr	r3, [r7, #16]
 8021038:	689a      	ldr	r2, [r3, #8]
 802103a:	693b      	ldr	r3, [r7, #16]
 802103c:	68db      	ldr	r3, [r3, #12]
 802103e:	1ad2      	subs	r2, r2, r3
 8021040:	693b      	ldr	r3, [r7, #16]
 8021042:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8021044:	693b      	ldr	r3, [r7, #16]
 8021046:	68da      	ldr	r2, [r3, #12]
 8021048:	693b      	ldr	r3, [r7, #16]
 802104a:	689b      	ldr	r3, [r3, #8]
 802104c:	4293      	cmp	r3, r2
 802104e:	bf28      	it	cs
 8021050:	4613      	movcs	r3, r2
 8021052:	461a      	mov	r2, r3
 8021054:	6879      	ldr	r1, [r7, #4]
 8021056:	68f8      	ldr	r0, [r7, #12]
 8021058:	f001 f81b 	bl	8022092 <USBD_CtlContinueRx>
 802105c:	e030      	b.n	80210c0 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 802105e:	68fb      	ldr	r3, [r7, #12]
 8021060:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8021064:	b2db      	uxtb	r3, r3
 8021066:	2b03      	cmp	r3, #3
 8021068:	d10b      	bne.n	8021082 <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 802106a:	68fb      	ldr	r3, [r7, #12]
 802106c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8021070:	691b      	ldr	r3, [r3, #16]
 8021072:	2b00      	cmp	r3, #0
 8021074:	d005      	beq.n	8021082 <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 8021076:	68fb      	ldr	r3, [r7, #12]
 8021078:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 802107c:	691b      	ldr	r3, [r3, #16]
 802107e:	68f8      	ldr	r0, [r7, #12]
 8021080:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8021082:	68f8      	ldr	r0, [r7, #12]
 8021084:	f001 f816 	bl	80220b4 <USBD_CtlSendStatus>
 8021088:	e01a      	b.n	80210c0 <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 802108a:	68fb      	ldr	r3, [r7, #12]
 802108c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8021090:	b2db      	uxtb	r3, r3
 8021092:	2b03      	cmp	r3, #3
 8021094:	d114      	bne.n	80210c0 <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 8021096:	68fb      	ldr	r3, [r7, #12]
 8021098:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 802109c:	699b      	ldr	r3, [r3, #24]
 802109e:	2b00      	cmp	r3, #0
 80210a0:	d00e      	beq.n	80210c0 <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 80210a2:	68fb      	ldr	r3, [r7, #12]
 80210a4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80210a8:	699b      	ldr	r3, [r3, #24]
 80210aa:	7afa      	ldrb	r2, [r7, #11]
 80210ac:	4611      	mov	r1, r2
 80210ae:	68f8      	ldr	r0, [r7, #12]
 80210b0:	4798      	blx	r3
 80210b2:	4603      	mov	r3, r0
 80210b4:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 80210b6:	7dfb      	ldrb	r3, [r7, #23]
 80210b8:	2b00      	cmp	r3, #0
 80210ba:	d001      	beq.n	80210c0 <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 80210bc:	7dfb      	ldrb	r3, [r7, #23]
 80210be:	e000      	b.n	80210c2 <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 80210c0:	2300      	movs	r3, #0
}
 80210c2:	4618      	mov	r0, r3
 80210c4:	3718      	adds	r7, #24
 80210c6:	46bd      	mov	sp, r7
 80210c8:	bd80      	pop	{r7, pc}

080210ca <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80210ca:	b580      	push	{r7, lr}
 80210cc:	b086      	sub	sp, #24
 80210ce:	af00      	add	r7, sp, #0
 80210d0:	60f8      	str	r0, [r7, #12]
 80210d2:	460b      	mov	r3, r1
 80210d4:	607a      	str	r2, [r7, #4]
 80210d6:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 80210d8:	7afb      	ldrb	r3, [r7, #11]
 80210da:	2b00      	cmp	r3, #0
 80210dc:	d16b      	bne.n	80211b6 <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 80210de:	68fb      	ldr	r3, [r7, #12]
 80210e0:	3314      	adds	r3, #20
 80210e2:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80210e4:	68fb      	ldr	r3, [r7, #12]
 80210e6:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80210ea:	2b02      	cmp	r3, #2
 80210ec:	d156      	bne.n	802119c <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 80210ee:	693b      	ldr	r3, [r7, #16]
 80210f0:	689a      	ldr	r2, [r3, #8]
 80210f2:	693b      	ldr	r3, [r7, #16]
 80210f4:	68db      	ldr	r3, [r3, #12]
 80210f6:	429a      	cmp	r2, r3
 80210f8:	d914      	bls.n	8021124 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80210fa:	693b      	ldr	r3, [r7, #16]
 80210fc:	689a      	ldr	r2, [r3, #8]
 80210fe:	693b      	ldr	r3, [r7, #16]
 8021100:	68db      	ldr	r3, [r3, #12]
 8021102:	1ad2      	subs	r2, r2, r3
 8021104:	693b      	ldr	r3, [r7, #16]
 8021106:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8021108:	693b      	ldr	r3, [r7, #16]
 802110a:	689b      	ldr	r3, [r3, #8]
 802110c:	461a      	mov	r2, r3
 802110e:	6879      	ldr	r1, [r7, #4]
 8021110:	68f8      	ldr	r0, [r7, #12]
 8021112:	f000 ffad 	bl	8022070 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8021116:	2300      	movs	r3, #0
 8021118:	2200      	movs	r2, #0
 802111a:	2100      	movs	r1, #0
 802111c:	68f8      	ldr	r0, [r7, #12]
 802111e:	f001 fc8c 	bl	8022a3a <USBD_LL_PrepareReceive>
 8021122:	e03b      	b.n	802119c <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8021124:	693b      	ldr	r3, [r7, #16]
 8021126:	68da      	ldr	r2, [r3, #12]
 8021128:	693b      	ldr	r3, [r7, #16]
 802112a:	689b      	ldr	r3, [r3, #8]
 802112c:	429a      	cmp	r2, r3
 802112e:	d11c      	bne.n	802116a <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8021130:	693b      	ldr	r3, [r7, #16]
 8021132:	685a      	ldr	r2, [r3, #4]
 8021134:	693b      	ldr	r3, [r7, #16]
 8021136:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8021138:	429a      	cmp	r2, r3
 802113a:	d316      	bcc.n	802116a <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 802113c:	693b      	ldr	r3, [r7, #16]
 802113e:	685a      	ldr	r2, [r3, #4]
 8021140:	68fb      	ldr	r3, [r7, #12]
 8021142:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8021146:	429a      	cmp	r2, r3
 8021148:	d20f      	bcs.n	802116a <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 802114a:	2200      	movs	r2, #0
 802114c:	2100      	movs	r1, #0
 802114e:	68f8      	ldr	r0, [r7, #12]
 8021150:	f000 ff8e 	bl	8022070 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8021154:	68fb      	ldr	r3, [r7, #12]
 8021156:	2200      	movs	r2, #0
 8021158:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 802115c:	2300      	movs	r3, #0
 802115e:	2200      	movs	r2, #0
 8021160:	2100      	movs	r1, #0
 8021162:	68f8      	ldr	r0, [r7, #12]
 8021164:	f001 fc69 	bl	8022a3a <USBD_LL_PrepareReceive>
 8021168:	e018      	b.n	802119c <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 802116a:	68fb      	ldr	r3, [r7, #12]
 802116c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8021170:	b2db      	uxtb	r3, r3
 8021172:	2b03      	cmp	r3, #3
 8021174:	d10b      	bne.n	802118e <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 8021176:	68fb      	ldr	r3, [r7, #12]
 8021178:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 802117c:	68db      	ldr	r3, [r3, #12]
 802117e:	2b00      	cmp	r3, #0
 8021180:	d005      	beq.n	802118e <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 8021182:	68fb      	ldr	r3, [r7, #12]
 8021184:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8021188:	68db      	ldr	r3, [r3, #12]
 802118a:	68f8      	ldr	r0, [r7, #12]
 802118c:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 802118e:	2180      	movs	r1, #128	; 0x80
 8021190:	68f8      	ldr	r0, [r7, #12]
 8021192:	f001 fba8 	bl	80228e6 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8021196:	68f8      	ldr	r0, [r7, #12]
 8021198:	f000 ff9f 	bl	80220da <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 802119c:	68fb      	ldr	r3, [r7, #12]
 802119e:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 80211a2:	2b01      	cmp	r3, #1
 80211a4:	d122      	bne.n	80211ec <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 80211a6:	68f8      	ldr	r0, [r7, #12]
 80211a8:	f7ff fe98 	bl	8020edc <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80211ac:	68fb      	ldr	r3, [r7, #12]
 80211ae:	2200      	movs	r2, #0
 80211b0:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 80211b4:	e01a      	b.n	80211ec <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80211b6:	68fb      	ldr	r3, [r7, #12]
 80211b8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80211bc:	b2db      	uxtb	r3, r3
 80211be:	2b03      	cmp	r3, #3
 80211c0:	d114      	bne.n	80211ec <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 80211c2:	68fb      	ldr	r3, [r7, #12]
 80211c4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80211c8:	695b      	ldr	r3, [r3, #20]
 80211ca:	2b00      	cmp	r3, #0
 80211cc:	d00e      	beq.n	80211ec <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 80211ce:	68fb      	ldr	r3, [r7, #12]
 80211d0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80211d4:	695b      	ldr	r3, [r3, #20]
 80211d6:	7afa      	ldrb	r2, [r7, #11]
 80211d8:	4611      	mov	r1, r2
 80211da:	68f8      	ldr	r0, [r7, #12]
 80211dc:	4798      	blx	r3
 80211de:	4603      	mov	r3, r0
 80211e0:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 80211e2:	7dfb      	ldrb	r3, [r7, #23]
 80211e4:	2b00      	cmp	r3, #0
 80211e6:	d001      	beq.n	80211ec <USBD_LL_DataInStage+0x122>
        {
          return ret;
 80211e8:	7dfb      	ldrb	r3, [r7, #23]
 80211ea:	e000      	b.n	80211ee <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 80211ec:	2300      	movs	r3, #0
}
 80211ee:	4618      	mov	r0, r3
 80211f0:	3718      	adds	r7, #24
 80211f2:	46bd      	mov	sp, r7
 80211f4:	bd80      	pop	{r7, pc}

080211f6 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80211f6:	b580      	push	{r7, lr}
 80211f8:	b082      	sub	sp, #8
 80211fa:	af00      	add	r7, sp, #0
 80211fc:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80211fe:	687b      	ldr	r3, [r7, #4]
 8021200:	2201      	movs	r2, #1
 8021202:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8021206:	687b      	ldr	r3, [r7, #4]
 8021208:	2200      	movs	r2, #0
 802120a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 802120e:	687b      	ldr	r3, [r7, #4]
 8021210:	2200      	movs	r2, #0
 8021212:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8021214:	687b      	ldr	r3, [r7, #4]
 8021216:	2200      	movs	r2, #0
 8021218:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 802121c:	687b      	ldr	r3, [r7, #4]
 802121e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8021222:	2b00      	cmp	r3, #0
 8021224:	d101      	bne.n	802122a <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 8021226:	2303      	movs	r3, #3
 8021228:	e02f      	b.n	802128a <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 802122a:	687b      	ldr	r3, [r7, #4]
 802122c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8021230:	2b00      	cmp	r3, #0
 8021232:	d00f      	beq.n	8021254 <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 8021234:	687b      	ldr	r3, [r7, #4]
 8021236:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 802123a:	685b      	ldr	r3, [r3, #4]
 802123c:	2b00      	cmp	r3, #0
 802123e:	d009      	beq.n	8021254 <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8021240:	687b      	ldr	r3, [r7, #4]
 8021242:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8021246:	685b      	ldr	r3, [r3, #4]
 8021248:	687a      	ldr	r2, [r7, #4]
 802124a:	6852      	ldr	r2, [r2, #4]
 802124c:	b2d2      	uxtb	r2, r2
 802124e:	4611      	mov	r1, r2
 8021250:	6878      	ldr	r0, [r7, #4]
 8021252:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8021254:	2340      	movs	r3, #64	; 0x40
 8021256:	2200      	movs	r2, #0
 8021258:	2100      	movs	r1, #0
 802125a:	6878      	ldr	r0, [r7, #4]
 802125c:	f001 fadf 	bl	802281e <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8021260:	687b      	ldr	r3, [r7, #4]
 8021262:	2201      	movs	r2, #1
 8021264:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8021268:	687b      	ldr	r3, [r7, #4]
 802126a:	2240      	movs	r2, #64	; 0x40
 802126c:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8021270:	2340      	movs	r3, #64	; 0x40
 8021272:	2200      	movs	r2, #0
 8021274:	2180      	movs	r1, #128	; 0x80
 8021276:	6878      	ldr	r0, [r7, #4]
 8021278:	f001 fad1 	bl	802281e <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 802127c:	687b      	ldr	r3, [r7, #4]
 802127e:	2201      	movs	r2, #1
 8021280:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8021282:	687b      	ldr	r3, [r7, #4]
 8021284:	2240      	movs	r2, #64	; 0x40
 8021286:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 8021288:	2300      	movs	r3, #0
}
 802128a:	4618      	mov	r0, r3
 802128c:	3708      	adds	r7, #8
 802128e:	46bd      	mov	sp, r7
 8021290:	bd80      	pop	{r7, pc}

08021292 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8021292:	b480      	push	{r7}
 8021294:	b083      	sub	sp, #12
 8021296:	af00      	add	r7, sp, #0
 8021298:	6078      	str	r0, [r7, #4]
 802129a:	460b      	mov	r3, r1
 802129c:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 802129e:	687b      	ldr	r3, [r7, #4]
 80212a0:	78fa      	ldrb	r2, [r7, #3]
 80212a2:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80212a4:	2300      	movs	r3, #0
}
 80212a6:	4618      	mov	r0, r3
 80212a8:	370c      	adds	r7, #12
 80212aa:	46bd      	mov	sp, r7
 80212ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80212b0:	4770      	bx	lr

080212b2 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80212b2:	b480      	push	{r7}
 80212b4:	b083      	sub	sp, #12
 80212b6:	af00      	add	r7, sp, #0
 80212b8:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 80212ba:	687b      	ldr	r3, [r7, #4]
 80212bc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80212c0:	b2da      	uxtb	r2, r3
 80212c2:	687b      	ldr	r3, [r7, #4]
 80212c4:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 80212c8:	687b      	ldr	r3, [r7, #4]
 80212ca:	2204      	movs	r2, #4
 80212cc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 80212d0:	2300      	movs	r3, #0
}
 80212d2:	4618      	mov	r0, r3
 80212d4:	370c      	adds	r7, #12
 80212d6:	46bd      	mov	sp, r7
 80212d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80212dc:	4770      	bx	lr

080212de <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80212de:	b480      	push	{r7}
 80212e0:	b083      	sub	sp, #12
 80212e2:	af00      	add	r7, sp, #0
 80212e4:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80212e6:	687b      	ldr	r3, [r7, #4]
 80212e8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80212ec:	b2db      	uxtb	r3, r3
 80212ee:	2b04      	cmp	r3, #4
 80212f0:	d106      	bne.n	8021300 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 80212f2:	687b      	ldr	r3, [r7, #4]
 80212f4:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 80212f8:	b2da      	uxtb	r2, r3
 80212fa:	687b      	ldr	r3, [r7, #4]
 80212fc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8021300:	2300      	movs	r3, #0
}
 8021302:	4618      	mov	r0, r3
 8021304:	370c      	adds	r7, #12
 8021306:	46bd      	mov	sp, r7
 8021308:	f85d 7b04 	ldr.w	r7, [sp], #4
 802130c:	4770      	bx	lr

0802130e <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 802130e:	b580      	push	{r7, lr}
 8021310:	b082      	sub	sp, #8
 8021312:	af00      	add	r7, sp, #0
 8021314:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 8021316:	687b      	ldr	r3, [r7, #4]
 8021318:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 802131c:	2b00      	cmp	r3, #0
 802131e:	d101      	bne.n	8021324 <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 8021320:	2303      	movs	r3, #3
 8021322:	e012      	b.n	802134a <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8021324:	687b      	ldr	r3, [r7, #4]
 8021326:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 802132a:	b2db      	uxtb	r3, r3
 802132c:	2b03      	cmp	r3, #3
 802132e:	d10b      	bne.n	8021348 <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 8021330:	687b      	ldr	r3, [r7, #4]
 8021332:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8021336:	69db      	ldr	r3, [r3, #28]
 8021338:	2b00      	cmp	r3, #0
 802133a:	d005      	beq.n	8021348 <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 802133c:	687b      	ldr	r3, [r7, #4]
 802133e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8021342:	69db      	ldr	r3, [r3, #28]
 8021344:	6878      	ldr	r0, [r7, #4]
 8021346:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8021348:	2300      	movs	r3, #0
}
 802134a:	4618      	mov	r0, r3
 802134c:	3708      	adds	r7, #8
 802134e:	46bd      	mov	sp, r7
 8021350:	bd80      	pop	{r7, pc}

08021352 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8021352:	b580      	push	{r7, lr}
 8021354:	b082      	sub	sp, #8
 8021356:	af00      	add	r7, sp, #0
 8021358:	6078      	str	r0, [r7, #4]
 802135a:	460b      	mov	r3, r1
 802135c:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 802135e:	687b      	ldr	r3, [r7, #4]
 8021360:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8021364:	2b00      	cmp	r3, #0
 8021366:	d101      	bne.n	802136c <USBD_LL_IsoINIncomplete+0x1a>
  {
    return USBD_FAIL;
 8021368:	2303      	movs	r3, #3
 802136a:	e014      	b.n	8021396 <USBD_LL_IsoINIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 802136c:	687b      	ldr	r3, [r7, #4]
 802136e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8021372:	b2db      	uxtb	r3, r3
 8021374:	2b03      	cmp	r3, #3
 8021376:	d10d      	bne.n	8021394 <USBD_LL_IsoINIncomplete+0x42>
  {
    if (pdev->pClass->IsoINIncomplete != NULL)
 8021378:	687b      	ldr	r3, [r7, #4]
 802137a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 802137e:	6a1b      	ldr	r3, [r3, #32]
 8021380:	2b00      	cmp	r3, #0
 8021382:	d007      	beq.n	8021394 <USBD_LL_IsoINIncomplete+0x42>
    {
      (void)pdev->pClass->IsoINIncomplete(pdev, epnum);
 8021384:	687b      	ldr	r3, [r7, #4]
 8021386:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 802138a:	6a1b      	ldr	r3, [r3, #32]
 802138c:	78fa      	ldrb	r2, [r7, #3]
 802138e:	4611      	mov	r1, r2
 8021390:	6878      	ldr	r0, [r7, #4]
 8021392:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8021394:	2300      	movs	r3, #0
}
 8021396:	4618      	mov	r0, r3
 8021398:	3708      	adds	r7, #8
 802139a:	46bd      	mov	sp, r7
 802139c:	bd80      	pop	{r7, pc}

0802139e <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 802139e:	b580      	push	{r7, lr}
 80213a0:	b082      	sub	sp, #8
 80213a2:	af00      	add	r7, sp, #0
 80213a4:	6078      	str	r0, [r7, #4]
 80213a6:	460b      	mov	r3, r1
 80213a8:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 80213aa:	687b      	ldr	r3, [r7, #4]
 80213ac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80213b0:	2b00      	cmp	r3, #0
 80213b2:	d101      	bne.n	80213b8 <USBD_LL_IsoOUTIncomplete+0x1a>
  {
    return USBD_FAIL;
 80213b4:	2303      	movs	r3, #3
 80213b6:	e014      	b.n	80213e2 <USBD_LL_IsoOUTIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80213b8:	687b      	ldr	r3, [r7, #4]
 80213ba:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80213be:	b2db      	uxtb	r3, r3
 80213c0:	2b03      	cmp	r3, #3
 80213c2:	d10d      	bne.n	80213e0 <USBD_LL_IsoOUTIncomplete+0x42>
  {
    if (pdev->pClass->IsoOUTIncomplete != NULL)
 80213c4:	687b      	ldr	r3, [r7, #4]
 80213c6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80213ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80213cc:	2b00      	cmp	r3, #0
 80213ce:	d007      	beq.n	80213e0 <USBD_LL_IsoOUTIncomplete+0x42>
    {
      (void)pdev->pClass->IsoOUTIncomplete(pdev, epnum);
 80213d0:	687b      	ldr	r3, [r7, #4]
 80213d2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80213d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80213d8:	78fa      	ldrb	r2, [r7, #3]
 80213da:	4611      	mov	r1, r2
 80213dc:	6878      	ldr	r0, [r7, #4]
 80213de:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80213e0:	2300      	movs	r3, #0
}
 80213e2:	4618      	mov	r0, r3
 80213e4:	3708      	adds	r7, #8
 80213e6:	46bd      	mov	sp, r7
 80213e8:	bd80      	pop	{r7, pc}

080213ea <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 80213ea:	b480      	push	{r7}
 80213ec:	b083      	sub	sp, #12
 80213ee:	af00      	add	r7, sp, #0
 80213f0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80213f2:	2300      	movs	r3, #0
}
 80213f4:	4618      	mov	r0, r3
 80213f6:	370c      	adds	r7, #12
 80213f8:	46bd      	mov	sp, r7
 80213fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80213fe:	4770      	bx	lr

08021400 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8021400:	b580      	push	{r7, lr}
 8021402:	b082      	sub	sp, #8
 8021404:	af00      	add	r7, sp, #0
 8021406:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8021408:	687b      	ldr	r3, [r7, #4]
 802140a:	2201      	movs	r2, #1
 802140c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 8021410:	687b      	ldr	r3, [r7, #4]
 8021412:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8021416:	2b00      	cmp	r3, #0
 8021418:	d009      	beq.n	802142e <USBD_LL_DevDisconnected+0x2e>
  {
    (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 802141a:	687b      	ldr	r3, [r7, #4]
 802141c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8021420:	685b      	ldr	r3, [r3, #4]
 8021422:	687a      	ldr	r2, [r7, #4]
 8021424:	6852      	ldr	r2, [r2, #4]
 8021426:	b2d2      	uxtb	r2, r2
 8021428:	4611      	mov	r1, r2
 802142a:	6878      	ldr	r0, [r7, #4]
 802142c:	4798      	blx	r3
  }

  return USBD_OK;
 802142e:	2300      	movs	r3, #0
}
 8021430:	4618      	mov	r0, r3
 8021432:	3708      	adds	r7, #8
 8021434:	46bd      	mov	sp, r7
 8021436:	bd80      	pop	{r7, pc}

08021438 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8021438:	b480      	push	{r7}
 802143a:	b087      	sub	sp, #28
 802143c:	af00      	add	r7, sp, #0
 802143e:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8021440:	687b      	ldr	r3, [r7, #4]
 8021442:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8021444:	697b      	ldr	r3, [r7, #20]
 8021446:	781b      	ldrb	r3, [r3, #0]
 8021448:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 802144a:	697b      	ldr	r3, [r7, #20]
 802144c:	3301      	adds	r3, #1
 802144e:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8021450:	697b      	ldr	r3, [r7, #20]
 8021452:	781b      	ldrb	r3, [r3, #0]
 8021454:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8021456:	8a3b      	ldrh	r3, [r7, #16]
 8021458:	021b      	lsls	r3, r3, #8
 802145a:	b21a      	sxth	r2, r3
 802145c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8021460:	4313      	orrs	r3, r2
 8021462:	b21b      	sxth	r3, r3
 8021464:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8021466:	89fb      	ldrh	r3, [r7, #14]
}
 8021468:	4618      	mov	r0, r3
 802146a:	371c      	adds	r7, #28
 802146c:	46bd      	mov	sp, r7
 802146e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021472:	4770      	bx	lr

08021474 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8021474:	b580      	push	{r7, lr}
 8021476:	b084      	sub	sp, #16
 8021478:	af00      	add	r7, sp, #0
 802147a:	6078      	str	r0, [r7, #4]
 802147c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 802147e:	2300      	movs	r3, #0
 8021480:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8021482:	683b      	ldr	r3, [r7, #0]
 8021484:	781b      	ldrb	r3, [r3, #0]
 8021486:	f003 0360 	and.w	r3, r3, #96	; 0x60
 802148a:	2b40      	cmp	r3, #64	; 0x40
 802148c:	d005      	beq.n	802149a <USBD_StdDevReq+0x26>
 802148e:	2b40      	cmp	r3, #64	; 0x40
 8021490:	d853      	bhi.n	802153a <USBD_StdDevReq+0xc6>
 8021492:	2b00      	cmp	r3, #0
 8021494:	d00b      	beq.n	80214ae <USBD_StdDevReq+0x3a>
 8021496:	2b20      	cmp	r3, #32
 8021498:	d14f      	bne.n	802153a <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 802149a:	687b      	ldr	r3, [r7, #4]
 802149c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80214a0:	689b      	ldr	r3, [r3, #8]
 80214a2:	6839      	ldr	r1, [r7, #0]
 80214a4:	6878      	ldr	r0, [r7, #4]
 80214a6:	4798      	blx	r3
 80214a8:	4603      	mov	r3, r0
 80214aa:	73fb      	strb	r3, [r7, #15]
      break;
 80214ac:	e04a      	b.n	8021544 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80214ae:	683b      	ldr	r3, [r7, #0]
 80214b0:	785b      	ldrb	r3, [r3, #1]
 80214b2:	2b09      	cmp	r3, #9
 80214b4:	d83b      	bhi.n	802152e <USBD_StdDevReq+0xba>
 80214b6:	a201      	add	r2, pc, #4	; (adr r2, 80214bc <USBD_StdDevReq+0x48>)
 80214b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80214bc:	08021511 	.word	0x08021511
 80214c0:	08021525 	.word	0x08021525
 80214c4:	0802152f 	.word	0x0802152f
 80214c8:	0802151b 	.word	0x0802151b
 80214cc:	0802152f 	.word	0x0802152f
 80214d0:	080214ef 	.word	0x080214ef
 80214d4:	080214e5 	.word	0x080214e5
 80214d8:	0802152f 	.word	0x0802152f
 80214dc:	08021507 	.word	0x08021507
 80214e0:	080214f9 	.word	0x080214f9
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80214e4:	6839      	ldr	r1, [r7, #0]
 80214e6:	6878      	ldr	r0, [r7, #4]
 80214e8:	f000 f9de 	bl	80218a8 <USBD_GetDescriptor>
          break;
 80214ec:	e024      	b.n	8021538 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 80214ee:	6839      	ldr	r1, [r7, #0]
 80214f0:	6878      	ldr	r0, [r7, #4]
 80214f2:	f000 fb6d 	bl	8021bd0 <USBD_SetAddress>
          break;
 80214f6:	e01f      	b.n	8021538 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 80214f8:	6839      	ldr	r1, [r7, #0]
 80214fa:	6878      	ldr	r0, [r7, #4]
 80214fc:	f000 fbac 	bl	8021c58 <USBD_SetConfig>
 8021500:	4603      	mov	r3, r0
 8021502:	73fb      	strb	r3, [r7, #15]
          break;
 8021504:	e018      	b.n	8021538 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8021506:	6839      	ldr	r1, [r7, #0]
 8021508:	6878      	ldr	r0, [r7, #4]
 802150a:	f000 fc4b 	bl	8021da4 <USBD_GetConfig>
          break;
 802150e:	e013      	b.n	8021538 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8021510:	6839      	ldr	r1, [r7, #0]
 8021512:	6878      	ldr	r0, [r7, #4]
 8021514:	f000 fc7c 	bl	8021e10 <USBD_GetStatus>
          break;
 8021518:	e00e      	b.n	8021538 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 802151a:	6839      	ldr	r1, [r7, #0]
 802151c:	6878      	ldr	r0, [r7, #4]
 802151e:	f000 fcab 	bl	8021e78 <USBD_SetFeature>
          break;
 8021522:	e009      	b.n	8021538 <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8021524:	6839      	ldr	r1, [r7, #0]
 8021526:	6878      	ldr	r0, [r7, #4]
 8021528:	f000 fcba 	bl	8021ea0 <USBD_ClrFeature>
          break;
 802152c:	e004      	b.n	8021538 <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 802152e:	6839      	ldr	r1, [r7, #0]
 8021530:	6878      	ldr	r0, [r7, #4]
 8021532:	f000 fd11 	bl	8021f58 <USBD_CtlError>
          break;
 8021536:	bf00      	nop
      }
      break;
 8021538:	e004      	b.n	8021544 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 802153a:	6839      	ldr	r1, [r7, #0]
 802153c:	6878      	ldr	r0, [r7, #4]
 802153e:	f000 fd0b 	bl	8021f58 <USBD_CtlError>
      break;
 8021542:	bf00      	nop
  }

  return ret;
 8021544:	7bfb      	ldrb	r3, [r7, #15]
}
 8021546:	4618      	mov	r0, r3
 8021548:	3710      	adds	r7, #16
 802154a:	46bd      	mov	sp, r7
 802154c:	bd80      	pop	{r7, pc}
 802154e:	bf00      	nop

08021550 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8021550:	b580      	push	{r7, lr}
 8021552:	b084      	sub	sp, #16
 8021554:	af00      	add	r7, sp, #0
 8021556:	6078      	str	r0, [r7, #4]
 8021558:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 802155a:	2300      	movs	r3, #0
 802155c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 802155e:	683b      	ldr	r3, [r7, #0]
 8021560:	781b      	ldrb	r3, [r3, #0]
 8021562:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8021566:	2b40      	cmp	r3, #64	; 0x40
 8021568:	d005      	beq.n	8021576 <USBD_StdItfReq+0x26>
 802156a:	2b40      	cmp	r3, #64	; 0x40
 802156c:	d82f      	bhi.n	80215ce <USBD_StdItfReq+0x7e>
 802156e:	2b00      	cmp	r3, #0
 8021570:	d001      	beq.n	8021576 <USBD_StdItfReq+0x26>
 8021572:	2b20      	cmp	r3, #32
 8021574:	d12b      	bne.n	80215ce <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8021576:	687b      	ldr	r3, [r7, #4]
 8021578:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 802157c:	b2db      	uxtb	r3, r3
 802157e:	3b01      	subs	r3, #1
 8021580:	2b02      	cmp	r3, #2
 8021582:	d81d      	bhi.n	80215c0 <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8021584:	683b      	ldr	r3, [r7, #0]
 8021586:	889b      	ldrh	r3, [r3, #4]
 8021588:	b2db      	uxtb	r3, r3
 802158a:	2b01      	cmp	r3, #1
 802158c:	d813      	bhi.n	80215b6 <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 802158e:	687b      	ldr	r3, [r7, #4]
 8021590:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8021594:	689b      	ldr	r3, [r3, #8]
 8021596:	6839      	ldr	r1, [r7, #0]
 8021598:	6878      	ldr	r0, [r7, #4]
 802159a:	4798      	blx	r3
 802159c:	4603      	mov	r3, r0
 802159e:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 80215a0:	683b      	ldr	r3, [r7, #0]
 80215a2:	88db      	ldrh	r3, [r3, #6]
 80215a4:	2b00      	cmp	r3, #0
 80215a6:	d110      	bne.n	80215ca <USBD_StdItfReq+0x7a>
 80215a8:	7bfb      	ldrb	r3, [r7, #15]
 80215aa:	2b00      	cmp	r3, #0
 80215ac:	d10d      	bne.n	80215ca <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 80215ae:	6878      	ldr	r0, [r7, #4]
 80215b0:	f000 fd80 	bl	80220b4 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 80215b4:	e009      	b.n	80215ca <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 80215b6:	6839      	ldr	r1, [r7, #0]
 80215b8:	6878      	ldr	r0, [r7, #4]
 80215ba:	f000 fccd 	bl	8021f58 <USBD_CtlError>
          break;
 80215be:	e004      	b.n	80215ca <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 80215c0:	6839      	ldr	r1, [r7, #0]
 80215c2:	6878      	ldr	r0, [r7, #4]
 80215c4:	f000 fcc8 	bl	8021f58 <USBD_CtlError>
          break;
 80215c8:	e000      	b.n	80215cc <USBD_StdItfReq+0x7c>
          break;
 80215ca:	bf00      	nop
      }
      break;
 80215cc:	e004      	b.n	80215d8 <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 80215ce:	6839      	ldr	r1, [r7, #0]
 80215d0:	6878      	ldr	r0, [r7, #4]
 80215d2:	f000 fcc1 	bl	8021f58 <USBD_CtlError>
      break;
 80215d6:	bf00      	nop
  }

  return ret;
 80215d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80215da:	4618      	mov	r0, r3
 80215dc:	3710      	adds	r7, #16
 80215de:	46bd      	mov	sp, r7
 80215e0:	bd80      	pop	{r7, pc}

080215e2 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80215e2:	b580      	push	{r7, lr}
 80215e4:	b084      	sub	sp, #16
 80215e6:	af00      	add	r7, sp, #0
 80215e8:	6078      	str	r0, [r7, #4]
 80215ea:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 80215ec:	2300      	movs	r3, #0
 80215ee:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 80215f0:	683b      	ldr	r3, [r7, #0]
 80215f2:	889b      	ldrh	r3, [r3, #4]
 80215f4:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80215f6:	683b      	ldr	r3, [r7, #0]
 80215f8:	781b      	ldrb	r3, [r3, #0]
 80215fa:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80215fe:	2b40      	cmp	r3, #64	; 0x40
 8021600:	d007      	beq.n	8021612 <USBD_StdEPReq+0x30>
 8021602:	2b40      	cmp	r3, #64	; 0x40
 8021604:	f200 8145 	bhi.w	8021892 <USBD_StdEPReq+0x2b0>
 8021608:	2b00      	cmp	r3, #0
 802160a:	d00c      	beq.n	8021626 <USBD_StdEPReq+0x44>
 802160c:	2b20      	cmp	r3, #32
 802160e:	f040 8140 	bne.w	8021892 <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8021612:	687b      	ldr	r3, [r7, #4]
 8021614:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8021618:	689b      	ldr	r3, [r3, #8]
 802161a:	6839      	ldr	r1, [r7, #0]
 802161c:	6878      	ldr	r0, [r7, #4]
 802161e:	4798      	blx	r3
 8021620:	4603      	mov	r3, r0
 8021622:	73fb      	strb	r3, [r7, #15]
      break;
 8021624:	e13a      	b.n	802189c <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8021626:	683b      	ldr	r3, [r7, #0]
 8021628:	785b      	ldrb	r3, [r3, #1]
 802162a:	2b03      	cmp	r3, #3
 802162c:	d007      	beq.n	802163e <USBD_StdEPReq+0x5c>
 802162e:	2b03      	cmp	r3, #3
 8021630:	f300 8129 	bgt.w	8021886 <USBD_StdEPReq+0x2a4>
 8021634:	2b00      	cmp	r3, #0
 8021636:	d07f      	beq.n	8021738 <USBD_StdEPReq+0x156>
 8021638:	2b01      	cmp	r3, #1
 802163a:	d03c      	beq.n	80216b6 <USBD_StdEPReq+0xd4>
 802163c:	e123      	b.n	8021886 <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 802163e:	687b      	ldr	r3, [r7, #4]
 8021640:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8021644:	b2db      	uxtb	r3, r3
 8021646:	2b02      	cmp	r3, #2
 8021648:	d002      	beq.n	8021650 <USBD_StdEPReq+0x6e>
 802164a:	2b03      	cmp	r3, #3
 802164c:	d016      	beq.n	802167c <USBD_StdEPReq+0x9a>
 802164e:	e02c      	b.n	80216aa <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8021650:	7bbb      	ldrb	r3, [r7, #14]
 8021652:	2b00      	cmp	r3, #0
 8021654:	d00d      	beq.n	8021672 <USBD_StdEPReq+0x90>
 8021656:	7bbb      	ldrb	r3, [r7, #14]
 8021658:	2b80      	cmp	r3, #128	; 0x80
 802165a:	d00a      	beq.n	8021672 <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 802165c:	7bbb      	ldrb	r3, [r7, #14]
 802165e:	4619      	mov	r1, r3
 8021660:	6878      	ldr	r0, [r7, #4]
 8021662:	f001 f940 	bl	80228e6 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8021666:	2180      	movs	r1, #128	; 0x80
 8021668:	6878      	ldr	r0, [r7, #4]
 802166a:	f001 f93c 	bl	80228e6 <USBD_LL_StallEP>
 802166e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8021670:	e020      	b.n	80216b4 <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 8021672:	6839      	ldr	r1, [r7, #0]
 8021674:	6878      	ldr	r0, [r7, #4]
 8021676:	f000 fc6f 	bl	8021f58 <USBD_CtlError>
              break;
 802167a:	e01b      	b.n	80216b4 <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 802167c:	683b      	ldr	r3, [r7, #0]
 802167e:	885b      	ldrh	r3, [r3, #2]
 8021680:	2b00      	cmp	r3, #0
 8021682:	d10e      	bne.n	80216a2 <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8021684:	7bbb      	ldrb	r3, [r7, #14]
 8021686:	2b00      	cmp	r3, #0
 8021688:	d00b      	beq.n	80216a2 <USBD_StdEPReq+0xc0>
 802168a:	7bbb      	ldrb	r3, [r7, #14]
 802168c:	2b80      	cmp	r3, #128	; 0x80
 802168e:	d008      	beq.n	80216a2 <USBD_StdEPReq+0xc0>
 8021690:	683b      	ldr	r3, [r7, #0]
 8021692:	88db      	ldrh	r3, [r3, #6]
 8021694:	2b00      	cmp	r3, #0
 8021696:	d104      	bne.n	80216a2 <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8021698:	7bbb      	ldrb	r3, [r7, #14]
 802169a:	4619      	mov	r1, r3
 802169c:	6878      	ldr	r0, [r7, #4]
 802169e:	f001 f922 	bl	80228e6 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 80216a2:	6878      	ldr	r0, [r7, #4]
 80216a4:	f000 fd06 	bl	80220b4 <USBD_CtlSendStatus>

              break;
 80216a8:	e004      	b.n	80216b4 <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 80216aa:	6839      	ldr	r1, [r7, #0]
 80216ac:	6878      	ldr	r0, [r7, #4]
 80216ae:	f000 fc53 	bl	8021f58 <USBD_CtlError>
              break;
 80216b2:	bf00      	nop
          }
          break;
 80216b4:	e0ec      	b.n	8021890 <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 80216b6:	687b      	ldr	r3, [r7, #4]
 80216b8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80216bc:	b2db      	uxtb	r3, r3
 80216be:	2b02      	cmp	r3, #2
 80216c0:	d002      	beq.n	80216c8 <USBD_StdEPReq+0xe6>
 80216c2:	2b03      	cmp	r3, #3
 80216c4:	d016      	beq.n	80216f4 <USBD_StdEPReq+0x112>
 80216c6:	e030      	b.n	802172a <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80216c8:	7bbb      	ldrb	r3, [r7, #14]
 80216ca:	2b00      	cmp	r3, #0
 80216cc:	d00d      	beq.n	80216ea <USBD_StdEPReq+0x108>
 80216ce:	7bbb      	ldrb	r3, [r7, #14]
 80216d0:	2b80      	cmp	r3, #128	; 0x80
 80216d2:	d00a      	beq.n	80216ea <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80216d4:	7bbb      	ldrb	r3, [r7, #14]
 80216d6:	4619      	mov	r1, r3
 80216d8:	6878      	ldr	r0, [r7, #4]
 80216da:	f001 f904 	bl	80228e6 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80216de:	2180      	movs	r1, #128	; 0x80
 80216e0:	6878      	ldr	r0, [r7, #4]
 80216e2:	f001 f900 	bl	80228e6 <USBD_LL_StallEP>
 80216e6:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80216e8:	e025      	b.n	8021736 <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 80216ea:	6839      	ldr	r1, [r7, #0]
 80216ec:	6878      	ldr	r0, [r7, #4]
 80216ee:	f000 fc33 	bl	8021f58 <USBD_CtlError>
              break;
 80216f2:	e020      	b.n	8021736 <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80216f4:	683b      	ldr	r3, [r7, #0]
 80216f6:	885b      	ldrh	r3, [r3, #2]
 80216f8:	2b00      	cmp	r3, #0
 80216fa:	d11b      	bne.n	8021734 <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 80216fc:	7bbb      	ldrb	r3, [r7, #14]
 80216fe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8021702:	2b00      	cmp	r3, #0
 8021704:	d004      	beq.n	8021710 <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8021706:	7bbb      	ldrb	r3, [r7, #14]
 8021708:	4619      	mov	r1, r3
 802170a:	6878      	ldr	r0, [r7, #4]
 802170c:	f001 f90a 	bl	8022924 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8021710:	6878      	ldr	r0, [r7, #4]
 8021712:	f000 fccf 	bl	80220b4 <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8021716:	687b      	ldr	r3, [r7, #4]
 8021718:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 802171c:	689b      	ldr	r3, [r3, #8]
 802171e:	6839      	ldr	r1, [r7, #0]
 8021720:	6878      	ldr	r0, [r7, #4]
 8021722:	4798      	blx	r3
 8021724:	4603      	mov	r3, r0
 8021726:	73fb      	strb	r3, [r7, #15]
              }
              break;
 8021728:	e004      	b.n	8021734 <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 802172a:	6839      	ldr	r1, [r7, #0]
 802172c:	6878      	ldr	r0, [r7, #4]
 802172e:	f000 fc13 	bl	8021f58 <USBD_CtlError>
              break;
 8021732:	e000      	b.n	8021736 <USBD_StdEPReq+0x154>
              break;
 8021734:	bf00      	nop
          }
          break;
 8021736:	e0ab      	b.n	8021890 <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8021738:	687b      	ldr	r3, [r7, #4]
 802173a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 802173e:	b2db      	uxtb	r3, r3
 8021740:	2b02      	cmp	r3, #2
 8021742:	d002      	beq.n	802174a <USBD_StdEPReq+0x168>
 8021744:	2b03      	cmp	r3, #3
 8021746:	d032      	beq.n	80217ae <USBD_StdEPReq+0x1cc>
 8021748:	e097      	b.n	802187a <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 802174a:	7bbb      	ldrb	r3, [r7, #14]
 802174c:	2b00      	cmp	r3, #0
 802174e:	d007      	beq.n	8021760 <USBD_StdEPReq+0x17e>
 8021750:	7bbb      	ldrb	r3, [r7, #14]
 8021752:	2b80      	cmp	r3, #128	; 0x80
 8021754:	d004      	beq.n	8021760 <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 8021756:	6839      	ldr	r1, [r7, #0]
 8021758:	6878      	ldr	r0, [r7, #4]
 802175a:	f000 fbfd 	bl	8021f58 <USBD_CtlError>
                break;
 802175e:	e091      	b.n	8021884 <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8021760:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8021764:	2b00      	cmp	r3, #0
 8021766:	da0b      	bge.n	8021780 <USBD_StdEPReq+0x19e>
 8021768:	7bbb      	ldrb	r3, [r7, #14]
 802176a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 802176e:	4613      	mov	r3, r2
 8021770:	009b      	lsls	r3, r3, #2
 8021772:	4413      	add	r3, r2
 8021774:	009b      	lsls	r3, r3, #2
 8021776:	3310      	adds	r3, #16
 8021778:	687a      	ldr	r2, [r7, #4]
 802177a:	4413      	add	r3, r2
 802177c:	3304      	adds	r3, #4
 802177e:	e00b      	b.n	8021798 <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8021780:	7bbb      	ldrb	r3, [r7, #14]
 8021782:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8021786:	4613      	mov	r3, r2
 8021788:	009b      	lsls	r3, r3, #2
 802178a:	4413      	add	r3, r2
 802178c:	009b      	lsls	r3, r3, #2
 802178e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8021792:	687a      	ldr	r2, [r7, #4]
 8021794:	4413      	add	r3, r2
 8021796:	3304      	adds	r3, #4
 8021798:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 802179a:	68bb      	ldr	r3, [r7, #8]
 802179c:	2200      	movs	r2, #0
 802179e:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80217a0:	68bb      	ldr	r3, [r7, #8]
 80217a2:	2202      	movs	r2, #2
 80217a4:	4619      	mov	r1, r3
 80217a6:	6878      	ldr	r0, [r7, #4]
 80217a8:	f000 fc47 	bl	802203a <USBD_CtlSendData>
              break;
 80217ac:	e06a      	b.n	8021884 <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 80217ae:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80217b2:	2b00      	cmp	r3, #0
 80217b4:	da11      	bge.n	80217da <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80217b6:	7bbb      	ldrb	r3, [r7, #14]
 80217b8:	f003 020f 	and.w	r2, r3, #15
 80217bc:	6879      	ldr	r1, [r7, #4]
 80217be:	4613      	mov	r3, r2
 80217c0:	009b      	lsls	r3, r3, #2
 80217c2:	4413      	add	r3, r2
 80217c4:	009b      	lsls	r3, r3, #2
 80217c6:	440b      	add	r3, r1
 80217c8:	3324      	adds	r3, #36	; 0x24
 80217ca:	881b      	ldrh	r3, [r3, #0]
 80217cc:	2b00      	cmp	r3, #0
 80217ce:	d117      	bne.n	8021800 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 80217d0:	6839      	ldr	r1, [r7, #0]
 80217d2:	6878      	ldr	r0, [r7, #4]
 80217d4:	f000 fbc0 	bl	8021f58 <USBD_CtlError>
                  break;
 80217d8:	e054      	b.n	8021884 <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80217da:	7bbb      	ldrb	r3, [r7, #14]
 80217dc:	f003 020f 	and.w	r2, r3, #15
 80217e0:	6879      	ldr	r1, [r7, #4]
 80217e2:	4613      	mov	r3, r2
 80217e4:	009b      	lsls	r3, r3, #2
 80217e6:	4413      	add	r3, r2
 80217e8:	009b      	lsls	r3, r3, #2
 80217ea:	440b      	add	r3, r1
 80217ec:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80217f0:	881b      	ldrh	r3, [r3, #0]
 80217f2:	2b00      	cmp	r3, #0
 80217f4:	d104      	bne.n	8021800 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 80217f6:	6839      	ldr	r1, [r7, #0]
 80217f8:	6878      	ldr	r0, [r7, #4]
 80217fa:	f000 fbad 	bl	8021f58 <USBD_CtlError>
                  break;
 80217fe:	e041      	b.n	8021884 <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8021800:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8021804:	2b00      	cmp	r3, #0
 8021806:	da0b      	bge.n	8021820 <USBD_StdEPReq+0x23e>
 8021808:	7bbb      	ldrb	r3, [r7, #14]
 802180a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 802180e:	4613      	mov	r3, r2
 8021810:	009b      	lsls	r3, r3, #2
 8021812:	4413      	add	r3, r2
 8021814:	009b      	lsls	r3, r3, #2
 8021816:	3310      	adds	r3, #16
 8021818:	687a      	ldr	r2, [r7, #4]
 802181a:	4413      	add	r3, r2
 802181c:	3304      	adds	r3, #4
 802181e:	e00b      	b.n	8021838 <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8021820:	7bbb      	ldrb	r3, [r7, #14]
 8021822:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8021826:	4613      	mov	r3, r2
 8021828:	009b      	lsls	r3, r3, #2
 802182a:	4413      	add	r3, r2
 802182c:	009b      	lsls	r3, r3, #2
 802182e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8021832:	687a      	ldr	r2, [r7, #4]
 8021834:	4413      	add	r3, r2
 8021836:	3304      	adds	r3, #4
 8021838:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 802183a:	7bbb      	ldrb	r3, [r7, #14]
 802183c:	2b00      	cmp	r3, #0
 802183e:	d002      	beq.n	8021846 <USBD_StdEPReq+0x264>
 8021840:	7bbb      	ldrb	r3, [r7, #14]
 8021842:	2b80      	cmp	r3, #128	; 0x80
 8021844:	d103      	bne.n	802184e <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 8021846:	68bb      	ldr	r3, [r7, #8]
 8021848:	2200      	movs	r2, #0
 802184a:	601a      	str	r2, [r3, #0]
 802184c:	e00e      	b.n	802186c <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 802184e:	7bbb      	ldrb	r3, [r7, #14]
 8021850:	4619      	mov	r1, r3
 8021852:	6878      	ldr	r0, [r7, #4]
 8021854:	f001 f885 	bl	8022962 <USBD_LL_IsStallEP>
 8021858:	4603      	mov	r3, r0
 802185a:	2b00      	cmp	r3, #0
 802185c:	d003      	beq.n	8021866 <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 802185e:	68bb      	ldr	r3, [r7, #8]
 8021860:	2201      	movs	r2, #1
 8021862:	601a      	str	r2, [r3, #0]
 8021864:	e002      	b.n	802186c <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 8021866:	68bb      	ldr	r3, [r7, #8]
 8021868:	2200      	movs	r2, #0
 802186a:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 802186c:	68bb      	ldr	r3, [r7, #8]
 802186e:	2202      	movs	r2, #2
 8021870:	4619      	mov	r1, r3
 8021872:	6878      	ldr	r0, [r7, #4]
 8021874:	f000 fbe1 	bl	802203a <USBD_CtlSendData>
              break;
 8021878:	e004      	b.n	8021884 <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 802187a:	6839      	ldr	r1, [r7, #0]
 802187c:	6878      	ldr	r0, [r7, #4]
 802187e:	f000 fb6b 	bl	8021f58 <USBD_CtlError>
              break;
 8021882:	bf00      	nop
          }
          break;
 8021884:	e004      	b.n	8021890 <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 8021886:	6839      	ldr	r1, [r7, #0]
 8021888:	6878      	ldr	r0, [r7, #4]
 802188a:	f000 fb65 	bl	8021f58 <USBD_CtlError>
          break;
 802188e:	bf00      	nop
      }
      break;
 8021890:	e004      	b.n	802189c <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 8021892:	6839      	ldr	r1, [r7, #0]
 8021894:	6878      	ldr	r0, [r7, #4]
 8021896:	f000 fb5f 	bl	8021f58 <USBD_CtlError>
      break;
 802189a:	bf00      	nop
  }

  return ret;
 802189c:	7bfb      	ldrb	r3, [r7, #15]
}
 802189e:	4618      	mov	r0, r3
 80218a0:	3710      	adds	r7, #16
 80218a2:	46bd      	mov	sp, r7
 80218a4:	bd80      	pop	{r7, pc}
	...

080218a8 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80218a8:	b580      	push	{r7, lr}
 80218aa:	b084      	sub	sp, #16
 80218ac:	af00      	add	r7, sp, #0
 80218ae:	6078      	str	r0, [r7, #4]
 80218b0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80218b2:	2300      	movs	r3, #0
 80218b4:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 80218b6:	2300      	movs	r3, #0
 80218b8:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80218ba:	2300      	movs	r3, #0
 80218bc:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 80218be:	683b      	ldr	r3, [r7, #0]
 80218c0:	885b      	ldrh	r3, [r3, #2]
 80218c2:	0a1b      	lsrs	r3, r3, #8
 80218c4:	b29b      	uxth	r3, r3
 80218c6:	3b01      	subs	r3, #1
 80218c8:	2b0e      	cmp	r3, #14
 80218ca:	f200 8152 	bhi.w	8021b72 <USBD_GetDescriptor+0x2ca>
 80218ce:	a201      	add	r2, pc, #4	; (adr r2, 80218d4 <USBD_GetDescriptor+0x2c>)
 80218d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80218d4:	08021945 	.word	0x08021945
 80218d8:	0802195d 	.word	0x0802195d
 80218dc:	0802199d 	.word	0x0802199d
 80218e0:	08021b73 	.word	0x08021b73
 80218e4:	08021b73 	.word	0x08021b73
 80218e8:	08021b13 	.word	0x08021b13
 80218ec:	08021b3f 	.word	0x08021b3f
 80218f0:	08021b73 	.word	0x08021b73
 80218f4:	08021b73 	.word	0x08021b73
 80218f8:	08021b73 	.word	0x08021b73
 80218fc:	08021b73 	.word	0x08021b73
 8021900:	08021b73 	.word	0x08021b73
 8021904:	08021b73 	.word	0x08021b73
 8021908:	08021b73 	.word	0x08021b73
 802190c:	08021911 	.word	0x08021911
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 8021910:	687b      	ldr	r3, [r7, #4]
 8021912:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8021916:	69db      	ldr	r3, [r3, #28]
 8021918:	2b00      	cmp	r3, #0
 802191a:	d00b      	beq.n	8021934 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 802191c:	687b      	ldr	r3, [r7, #4]
 802191e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8021922:	69db      	ldr	r3, [r3, #28]
 8021924:	687a      	ldr	r2, [r7, #4]
 8021926:	7c12      	ldrb	r2, [r2, #16]
 8021928:	f107 0108 	add.w	r1, r7, #8
 802192c:	4610      	mov	r0, r2
 802192e:	4798      	blx	r3
 8021930:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8021932:	e126      	b.n	8021b82 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8021934:	6839      	ldr	r1, [r7, #0]
 8021936:	6878      	ldr	r0, [r7, #4]
 8021938:	f000 fb0e 	bl	8021f58 <USBD_CtlError>
        err++;
 802193c:	7afb      	ldrb	r3, [r7, #11]
 802193e:	3301      	adds	r3, #1
 8021940:	72fb      	strb	r3, [r7, #11]
      break;
 8021942:	e11e      	b.n	8021b82 <USBD_GetDescriptor+0x2da>
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8021944:	687b      	ldr	r3, [r7, #4]
 8021946:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 802194a:	681b      	ldr	r3, [r3, #0]
 802194c:	687a      	ldr	r2, [r7, #4]
 802194e:	7c12      	ldrb	r2, [r2, #16]
 8021950:	f107 0108 	add.w	r1, r7, #8
 8021954:	4610      	mov	r0, r2
 8021956:	4798      	blx	r3
 8021958:	60f8      	str	r0, [r7, #12]
      break;
 802195a:	e112      	b.n	8021b82 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 802195c:	687b      	ldr	r3, [r7, #4]
 802195e:	7c1b      	ldrb	r3, [r3, #16]
 8021960:	2b00      	cmp	r3, #0
 8021962:	d10d      	bne.n	8021980 <USBD_GetDescriptor+0xd8>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8021964:	687b      	ldr	r3, [r7, #4]
 8021966:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 802196a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 802196c:	f107 0208 	add.w	r2, r7, #8
 8021970:	4610      	mov	r0, r2
 8021972:	4798      	blx	r3
 8021974:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8021976:	68fb      	ldr	r3, [r7, #12]
 8021978:	3301      	adds	r3, #1
 802197a:	2202      	movs	r2, #2
 802197c:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 802197e:	e100      	b.n	8021b82 <USBD_GetDescriptor+0x2da>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8021980:	687b      	ldr	r3, [r7, #4]
 8021982:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8021986:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8021988:	f107 0208 	add.w	r2, r7, #8
 802198c:	4610      	mov	r0, r2
 802198e:	4798      	blx	r3
 8021990:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8021992:	68fb      	ldr	r3, [r7, #12]
 8021994:	3301      	adds	r3, #1
 8021996:	2202      	movs	r2, #2
 8021998:	701a      	strb	r2, [r3, #0]
      break;
 802199a:	e0f2      	b.n	8021b82 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 802199c:	683b      	ldr	r3, [r7, #0]
 802199e:	885b      	ldrh	r3, [r3, #2]
 80219a0:	b2db      	uxtb	r3, r3
 80219a2:	2b05      	cmp	r3, #5
 80219a4:	f200 80ac 	bhi.w	8021b00 <USBD_GetDescriptor+0x258>
 80219a8:	a201      	add	r2, pc, #4	; (adr r2, 80219b0 <USBD_GetDescriptor+0x108>)
 80219aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80219ae:	bf00      	nop
 80219b0:	080219c9 	.word	0x080219c9
 80219b4:	080219fd 	.word	0x080219fd
 80219b8:	08021a31 	.word	0x08021a31
 80219bc:	08021a65 	.word	0x08021a65
 80219c0:	08021a99 	.word	0x08021a99
 80219c4:	08021acd 	.word	0x08021acd
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80219c8:	687b      	ldr	r3, [r7, #4]
 80219ca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80219ce:	685b      	ldr	r3, [r3, #4]
 80219d0:	2b00      	cmp	r3, #0
 80219d2:	d00b      	beq.n	80219ec <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80219d4:	687b      	ldr	r3, [r7, #4]
 80219d6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80219da:	685b      	ldr	r3, [r3, #4]
 80219dc:	687a      	ldr	r2, [r7, #4]
 80219de:	7c12      	ldrb	r2, [r2, #16]
 80219e0:	f107 0108 	add.w	r1, r7, #8
 80219e4:	4610      	mov	r0, r2
 80219e6:	4798      	blx	r3
 80219e8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80219ea:	e091      	b.n	8021b10 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80219ec:	6839      	ldr	r1, [r7, #0]
 80219ee:	6878      	ldr	r0, [r7, #4]
 80219f0:	f000 fab2 	bl	8021f58 <USBD_CtlError>
            err++;
 80219f4:	7afb      	ldrb	r3, [r7, #11]
 80219f6:	3301      	adds	r3, #1
 80219f8:	72fb      	strb	r3, [r7, #11]
          break;
 80219fa:	e089      	b.n	8021b10 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80219fc:	687b      	ldr	r3, [r7, #4]
 80219fe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8021a02:	689b      	ldr	r3, [r3, #8]
 8021a04:	2b00      	cmp	r3, #0
 8021a06:	d00b      	beq.n	8021a20 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8021a08:	687b      	ldr	r3, [r7, #4]
 8021a0a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8021a0e:	689b      	ldr	r3, [r3, #8]
 8021a10:	687a      	ldr	r2, [r7, #4]
 8021a12:	7c12      	ldrb	r2, [r2, #16]
 8021a14:	f107 0108 	add.w	r1, r7, #8
 8021a18:	4610      	mov	r0, r2
 8021a1a:	4798      	blx	r3
 8021a1c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8021a1e:	e077      	b.n	8021b10 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8021a20:	6839      	ldr	r1, [r7, #0]
 8021a22:	6878      	ldr	r0, [r7, #4]
 8021a24:	f000 fa98 	bl	8021f58 <USBD_CtlError>
            err++;
 8021a28:	7afb      	ldrb	r3, [r7, #11]
 8021a2a:	3301      	adds	r3, #1
 8021a2c:	72fb      	strb	r3, [r7, #11]
          break;
 8021a2e:	e06f      	b.n	8021b10 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8021a30:	687b      	ldr	r3, [r7, #4]
 8021a32:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8021a36:	68db      	ldr	r3, [r3, #12]
 8021a38:	2b00      	cmp	r3, #0
 8021a3a:	d00b      	beq.n	8021a54 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8021a3c:	687b      	ldr	r3, [r7, #4]
 8021a3e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8021a42:	68db      	ldr	r3, [r3, #12]
 8021a44:	687a      	ldr	r2, [r7, #4]
 8021a46:	7c12      	ldrb	r2, [r2, #16]
 8021a48:	f107 0108 	add.w	r1, r7, #8
 8021a4c:	4610      	mov	r0, r2
 8021a4e:	4798      	blx	r3
 8021a50:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8021a52:	e05d      	b.n	8021b10 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8021a54:	6839      	ldr	r1, [r7, #0]
 8021a56:	6878      	ldr	r0, [r7, #4]
 8021a58:	f000 fa7e 	bl	8021f58 <USBD_CtlError>
            err++;
 8021a5c:	7afb      	ldrb	r3, [r7, #11]
 8021a5e:	3301      	adds	r3, #1
 8021a60:	72fb      	strb	r3, [r7, #11]
          break;
 8021a62:	e055      	b.n	8021b10 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8021a64:	687b      	ldr	r3, [r7, #4]
 8021a66:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8021a6a:	691b      	ldr	r3, [r3, #16]
 8021a6c:	2b00      	cmp	r3, #0
 8021a6e:	d00b      	beq.n	8021a88 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8021a70:	687b      	ldr	r3, [r7, #4]
 8021a72:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8021a76:	691b      	ldr	r3, [r3, #16]
 8021a78:	687a      	ldr	r2, [r7, #4]
 8021a7a:	7c12      	ldrb	r2, [r2, #16]
 8021a7c:	f107 0108 	add.w	r1, r7, #8
 8021a80:	4610      	mov	r0, r2
 8021a82:	4798      	blx	r3
 8021a84:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8021a86:	e043      	b.n	8021b10 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8021a88:	6839      	ldr	r1, [r7, #0]
 8021a8a:	6878      	ldr	r0, [r7, #4]
 8021a8c:	f000 fa64 	bl	8021f58 <USBD_CtlError>
            err++;
 8021a90:	7afb      	ldrb	r3, [r7, #11]
 8021a92:	3301      	adds	r3, #1
 8021a94:	72fb      	strb	r3, [r7, #11]
          break;
 8021a96:	e03b      	b.n	8021b10 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8021a98:	687b      	ldr	r3, [r7, #4]
 8021a9a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8021a9e:	695b      	ldr	r3, [r3, #20]
 8021aa0:	2b00      	cmp	r3, #0
 8021aa2:	d00b      	beq.n	8021abc <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8021aa4:	687b      	ldr	r3, [r7, #4]
 8021aa6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8021aaa:	695b      	ldr	r3, [r3, #20]
 8021aac:	687a      	ldr	r2, [r7, #4]
 8021aae:	7c12      	ldrb	r2, [r2, #16]
 8021ab0:	f107 0108 	add.w	r1, r7, #8
 8021ab4:	4610      	mov	r0, r2
 8021ab6:	4798      	blx	r3
 8021ab8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8021aba:	e029      	b.n	8021b10 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8021abc:	6839      	ldr	r1, [r7, #0]
 8021abe:	6878      	ldr	r0, [r7, #4]
 8021ac0:	f000 fa4a 	bl	8021f58 <USBD_CtlError>
            err++;
 8021ac4:	7afb      	ldrb	r3, [r7, #11]
 8021ac6:	3301      	adds	r3, #1
 8021ac8:	72fb      	strb	r3, [r7, #11]
          break;
 8021aca:	e021      	b.n	8021b10 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8021acc:	687b      	ldr	r3, [r7, #4]
 8021ace:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8021ad2:	699b      	ldr	r3, [r3, #24]
 8021ad4:	2b00      	cmp	r3, #0
 8021ad6:	d00b      	beq.n	8021af0 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8021ad8:	687b      	ldr	r3, [r7, #4]
 8021ada:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8021ade:	699b      	ldr	r3, [r3, #24]
 8021ae0:	687a      	ldr	r2, [r7, #4]
 8021ae2:	7c12      	ldrb	r2, [r2, #16]
 8021ae4:	f107 0108 	add.w	r1, r7, #8
 8021ae8:	4610      	mov	r0, r2
 8021aea:	4798      	blx	r3
 8021aec:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8021aee:	e00f      	b.n	8021b10 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8021af0:	6839      	ldr	r1, [r7, #0]
 8021af2:	6878      	ldr	r0, [r7, #4]
 8021af4:	f000 fa30 	bl	8021f58 <USBD_CtlError>
            err++;
 8021af8:	7afb      	ldrb	r3, [r7, #11]
 8021afa:	3301      	adds	r3, #1
 8021afc:	72fb      	strb	r3, [r7, #11]
          break;
 8021afe:	e007      	b.n	8021b10 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8021b00:	6839      	ldr	r1, [r7, #0]
 8021b02:	6878      	ldr	r0, [r7, #4]
 8021b04:	f000 fa28 	bl	8021f58 <USBD_CtlError>
          err++;
 8021b08:	7afb      	ldrb	r3, [r7, #11]
 8021b0a:	3301      	adds	r3, #1
 8021b0c:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 8021b0e:	bf00      	nop
      }
      break;
 8021b10:	e037      	b.n	8021b82 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8021b12:	687b      	ldr	r3, [r7, #4]
 8021b14:	7c1b      	ldrb	r3, [r3, #16]
 8021b16:	2b00      	cmp	r3, #0
 8021b18:	d109      	bne.n	8021b2e <USBD_GetDescriptor+0x286>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8021b1a:	687b      	ldr	r3, [r7, #4]
 8021b1c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8021b20:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8021b22:	f107 0208 	add.w	r2, r7, #8
 8021b26:	4610      	mov	r0, r2
 8021b28:	4798      	blx	r3
 8021b2a:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8021b2c:	e029      	b.n	8021b82 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8021b2e:	6839      	ldr	r1, [r7, #0]
 8021b30:	6878      	ldr	r0, [r7, #4]
 8021b32:	f000 fa11 	bl	8021f58 <USBD_CtlError>
        err++;
 8021b36:	7afb      	ldrb	r3, [r7, #11]
 8021b38:	3301      	adds	r3, #1
 8021b3a:	72fb      	strb	r3, [r7, #11]
      break;
 8021b3c:	e021      	b.n	8021b82 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8021b3e:	687b      	ldr	r3, [r7, #4]
 8021b40:	7c1b      	ldrb	r3, [r3, #16]
 8021b42:	2b00      	cmp	r3, #0
 8021b44:	d10d      	bne.n	8021b62 <USBD_GetDescriptor+0x2ba>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8021b46:	687b      	ldr	r3, [r7, #4]
 8021b48:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8021b4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8021b4e:	f107 0208 	add.w	r2, r7, #8
 8021b52:	4610      	mov	r0, r2
 8021b54:	4798      	blx	r3
 8021b56:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8021b58:	68fb      	ldr	r3, [r7, #12]
 8021b5a:	3301      	adds	r3, #1
 8021b5c:	2207      	movs	r2, #7
 8021b5e:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8021b60:	e00f      	b.n	8021b82 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8021b62:	6839      	ldr	r1, [r7, #0]
 8021b64:	6878      	ldr	r0, [r7, #4]
 8021b66:	f000 f9f7 	bl	8021f58 <USBD_CtlError>
        err++;
 8021b6a:	7afb      	ldrb	r3, [r7, #11]
 8021b6c:	3301      	adds	r3, #1
 8021b6e:	72fb      	strb	r3, [r7, #11]
      break;
 8021b70:	e007      	b.n	8021b82 <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 8021b72:	6839      	ldr	r1, [r7, #0]
 8021b74:	6878      	ldr	r0, [r7, #4]
 8021b76:	f000 f9ef 	bl	8021f58 <USBD_CtlError>
      err++;
 8021b7a:	7afb      	ldrb	r3, [r7, #11]
 8021b7c:	3301      	adds	r3, #1
 8021b7e:	72fb      	strb	r3, [r7, #11]
      break;
 8021b80:	bf00      	nop
  }

  if (err != 0U)
 8021b82:	7afb      	ldrb	r3, [r7, #11]
 8021b84:	2b00      	cmp	r3, #0
 8021b86:	d11e      	bne.n	8021bc6 <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 8021b88:	683b      	ldr	r3, [r7, #0]
 8021b8a:	88db      	ldrh	r3, [r3, #6]
 8021b8c:	2b00      	cmp	r3, #0
 8021b8e:	d016      	beq.n	8021bbe <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 8021b90:	893b      	ldrh	r3, [r7, #8]
 8021b92:	2b00      	cmp	r3, #0
 8021b94:	d00e      	beq.n	8021bb4 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 8021b96:	683b      	ldr	r3, [r7, #0]
 8021b98:	88da      	ldrh	r2, [r3, #6]
 8021b9a:	893b      	ldrh	r3, [r7, #8]
 8021b9c:	4293      	cmp	r3, r2
 8021b9e:	bf28      	it	cs
 8021ba0:	4613      	movcs	r3, r2
 8021ba2:	b29b      	uxth	r3, r3
 8021ba4:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8021ba6:	893b      	ldrh	r3, [r7, #8]
 8021ba8:	461a      	mov	r2, r3
 8021baa:	68f9      	ldr	r1, [r7, #12]
 8021bac:	6878      	ldr	r0, [r7, #4]
 8021bae:	f000 fa44 	bl	802203a <USBD_CtlSendData>
 8021bb2:	e009      	b.n	8021bc8 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8021bb4:	6839      	ldr	r1, [r7, #0]
 8021bb6:	6878      	ldr	r0, [r7, #4]
 8021bb8:	f000 f9ce 	bl	8021f58 <USBD_CtlError>
 8021bbc:	e004      	b.n	8021bc8 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8021bbe:	6878      	ldr	r0, [r7, #4]
 8021bc0:	f000 fa78 	bl	80220b4 <USBD_CtlSendStatus>
 8021bc4:	e000      	b.n	8021bc8 <USBD_GetDescriptor+0x320>
    return;
 8021bc6:	bf00      	nop
  }
}
 8021bc8:	3710      	adds	r7, #16
 8021bca:	46bd      	mov	sp, r7
 8021bcc:	bd80      	pop	{r7, pc}
 8021bce:	bf00      	nop

08021bd0 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8021bd0:	b580      	push	{r7, lr}
 8021bd2:	b084      	sub	sp, #16
 8021bd4:	af00      	add	r7, sp, #0
 8021bd6:	6078      	str	r0, [r7, #4]
 8021bd8:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8021bda:	683b      	ldr	r3, [r7, #0]
 8021bdc:	889b      	ldrh	r3, [r3, #4]
 8021bde:	2b00      	cmp	r3, #0
 8021be0:	d131      	bne.n	8021c46 <USBD_SetAddress+0x76>
 8021be2:	683b      	ldr	r3, [r7, #0]
 8021be4:	88db      	ldrh	r3, [r3, #6]
 8021be6:	2b00      	cmp	r3, #0
 8021be8:	d12d      	bne.n	8021c46 <USBD_SetAddress+0x76>
 8021bea:	683b      	ldr	r3, [r7, #0]
 8021bec:	885b      	ldrh	r3, [r3, #2]
 8021bee:	2b7f      	cmp	r3, #127	; 0x7f
 8021bf0:	d829      	bhi.n	8021c46 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8021bf2:	683b      	ldr	r3, [r7, #0]
 8021bf4:	885b      	ldrh	r3, [r3, #2]
 8021bf6:	b2db      	uxtb	r3, r3
 8021bf8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8021bfc:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8021bfe:	687b      	ldr	r3, [r7, #4]
 8021c00:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8021c04:	b2db      	uxtb	r3, r3
 8021c06:	2b03      	cmp	r3, #3
 8021c08:	d104      	bne.n	8021c14 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8021c0a:	6839      	ldr	r1, [r7, #0]
 8021c0c:	6878      	ldr	r0, [r7, #4]
 8021c0e:	f000 f9a3 	bl	8021f58 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8021c12:	e01d      	b.n	8021c50 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8021c14:	687b      	ldr	r3, [r7, #4]
 8021c16:	7bfa      	ldrb	r2, [r7, #15]
 8021c18:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8021c1c:	7bfb      	ldrb	r3, [r7, #15]
 8021c1e:	4619      	mov	r1, r3
 8021c20:	6878      	ldr	r0, [r7, #4]
 8021c22:	f000 feca 	bl	80229ba <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8021c26:	6878      	ldr	r0, [r7, #4]
 8021c28:	f000 fa44 	bl	80220b4 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8021c2c:	7bfb      	ldrb	r3, [r7, #15]
 8021c2e:	2b00      	cmp	r3, #0
 8021c30:	d004      	beq.n	8021c3c <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8021c32:	687b      	ldr	r3, [r7, #4]
 8021c34:	2202      	movs	r2, #2
 8021c36:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8021c3a:	e009      	b.n	8021c50 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8021c3c:	687b      	ldr	r3, [r7, #4]
 8021c3e:	2201      	movs	r2, #1
 8021c40:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8021c44:	e004      	b.n	8021c50 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8021c46:	6839      	ldr	r1, [r7, #0]
 8021c48:	6878      	ldr	r0, [r7, #4]
 8021c4a:	f000 f985 	bl	8021f58 <USBD_CtlError>
  }
}
 8021c4e:	bf00      	nop
 8021c50:	bf00      	nop
 8021c52:	3710      	adds	r7, #16
 8021c54:	46bd      	mov	sp, r7
 8021c56:	bd80      	pop	{r7, pc}

08021c58 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8021c58:	b580      	push	{r7, lr}
 8021c5a:	b084      	sub	sp, #16
 8021c5c:	af00      	add	r7, sp, #0
 8021c5e:	6078      	str	r0, [r7, #4]
 8021c60:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8021c62:	2300      	movs	r3, #0
 8021c64:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8021c66:	683b      	ldr	r3, [r7, #0]
 8021c68:	885b      	ldrh	r3, [r3, #2]
 8021c6a:	b2da      	uxtb	r2, r3
 8021c6c:	4b4c      	ldr	r3, [pc, #304]	; (8021da0 <USBD_SetConfig+0x148>)
 8021c6e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8021c70:	4b4b      	ldr	r3, [pc, #300]	; (8021da0 <USBD_SetConfig+0x148>)
 8021c72:	781b      	ldrb	r3, [r3, #0]
 8021c74:	2b01      	cmp	r3, #1
 8021c76:	d905      	bls.n	8021c84 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8021c78:	6839      	ldr	r1, [r7, #0]
 8021c7a:	6878      	ldr	r0, [r7, #4]
 8021c7c:	f000 f96c 	bl	8021f58 <USBD_CtlError>
    return USBD_FAIL;
 8021c80:	2303      	movs	r3, #3
 8021c82:	e088      	b.n	8021d96 <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 8021c84:	687b      	ldr	r3, [r7, #4]
 8021c86:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8021c8a:	b2db      	uxtb	r3, r3
 8021c8c:	2b02      	cmp	r3, #2
 8021c8e:	d002      	beq.n	8021c96 <USBD_SetConfig+0x3e>
 8021c90:	2b03      	cmp	r3, #3
 8021c92:	d025      	beq.n	8021ce0 <USBD_SetConfig+0x88>
 8021c94:	e071      	b.n	8021d7a <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8021c96:	4b42      	ldr	r3, [pc, #264]	; (8021da0 <USBD_SetConfig+0x148>)
 8021c98:	781b      	ldrb	r3, [r3, #0]
 8021c9a:	2b00      	cmp	r3, #0
 8021c9c:	d01c      	beq.n	8021cd8 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 8021c9e:	4b40      	ldr	r3, [pc, #256]	; (8021da0 <USBD_SetConfig+0x148>)
 8021ca0:	781b      	ldrb	r3, [r3, #0]
 8021ca2:	461a      	mov	r2, r3
 8021ca4:	687b      	ldr	r3, [r7, #4]
 8021ca6:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8021ca8:	4b3d      	ldr	r3, [pc, #244]	; (8021da0 <USBD_SetConfig+0x148>)
 8021caa:	781b      	ldrb	r3, [r3, #0]
 8021cac:	4619      	mov	r1, r3
 8021cae:	6878      	ldr	r0, [r7, #4]
 8021cb0:	f7ff f91f 	bl	8020ef2 <USBD_SetClassConfig>
 8021cb4:	4603      	mov	r3, r0
 8021cb6:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8021cb8:	7bfb      	ldrb	r3, [r7, #15]
 8021cba:	2b00      	cmp	r3, #0
 8021cbc:	d004      	beq.n	8021cc8 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 8021cbe:	6839      	ldr	r1, [r7, #0]
 8021cc0:	6878      	ldr	r0, [r7, #4]
 8021cc2:	f000 f949 	bl	8021f58 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8021cc6:	e065      	b.n	8021d94 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8021cc8:	6878      	ldr	r0, [r7, #4]
 8021cca:	f000 f9f3 	bl	80220b4 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8021cce:	687b      	ldr	r3, [r7, #4]
 8021cd0:	2203      	movs	r2, #3
 8021cd2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8021cd6:	e05d      	b.n	8021d94 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8021cd8:	6878      	ldr	r0, [r7, #4]
 8021cda:	f000 f9eb 	bl	80220b4 <USBD_CtlSendStatus>
      break;
 8021cde:	e059      	b.n	8021d94 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8021ce0:	4b2f      	ldr	r3, [pc, #188]	; (8021da0 <USBD_SetConfig+0x148>)
 8021ce2:	781b      	ldrb	r3, [r3, #0]
 8021ce4:	2b00      	cmp	r3, #0
 8021ce6:	d112      	bne.n	8021d0e <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8021ce8:	687b      	ldr	r3, [r7, #4]
 8021cea:	2202      	movs	r2, #2
 8021cec:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8021cf0:	4b2b      	ldr	r3, [pc, #172]	; (8021da0 <USBD_SetConfig+0x148>)
 8021cf2:	781b      	ldrb	r3, [r3, #0]
 8021cf4:	461a      	mov	r2, r3
 8021cf6:	687b      	ldr	r3, [r7, #4]
 8021cf8:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8021cfa:	4b29      	ldr	r3, [pc, #164]	; (8021da0 <USBD_SetConfig+0x148>)
 8021cfc:	781b      	ldrb	r3, [r3, #0]
 8021cfe:	4619      	mov	r1, r3
 8021d00:	6878      	ldr	r0, [r7, #4]
 8021d02:	f7ff f912 	bl	8020f2a <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8021d06:	6878      	ldr	r0, [r7, #4]
 8021d08:	f000 f9d4 	bl	80220b4 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8021d0c:	e042      	b.n	8021d94 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 8021d0e:	4b24      	ldr	r3, [pc, #144]	; (8021da0 <USBD_SetConfig+0x148>)
 8021d10:	781b      	ldrb	r3, [r3, #0]
 8021d12:	461a      	mov	r2, r3
 8021d14:	687b      	ldr	r3, [r7, #4]
 8021d16:	685b      	ldr	r3, [r3, #4]
 8021d18:	429a      	cmp	r2, r3
 8021d1a:	d02a      	beq.n	8021d72 <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8021d1c:	687b      	ldr	r3, [r7, #4]
 8021d1e:	685b      	ldr	r3, [r3, #4]
 8021d20:	b2db      	uxtb	r3, r3
 8021d22:	4619      	mov	r1, r3
 8021d24:	6878      	ldr	r0, [r7, #4]
 8021d26:	f7ff f900 	bl	8020f2a <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8021d2a:	4b1d      	ldr	r3, [pc, #116]	; (8021da0 <USBD_SetConfig+0x148>)
 8021d2c:	781b      	ldrb	r3, [r3, #0]
 8021d2e:	461a      	mov	r2, r3
 8021d30:	687b      	ldr	r3, [r7, #4]
 8021d32:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8021d34:	4b1a      	ldr	r3, [pc, #104]	; (8021da0 <USBD_SetConfig+0x148>)
 8021d36:	781b      	ldrb	r3, [r3, #0]
 8021d38:	4619      	mov	r1, r3
 8021d3a:	6878      	ldr	r0, [r7, #4]
 8021d3c:	f7ff f8d9 	bl	8020ef2 <USBD_SetClassConfig>
 8021d40:	4603      	mov	r3, r0
 8021d42:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8021d44:	7bfb      	ldrb	r3, [r7, #15]
 8021d46:	2b00      	cmp	r3, #0
 8021d48:	d00f      	beq.n	8021d6a <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 8021d4a:	6839      	ldr	r1, [r7, #0]
 8021d4c:	6878      	ldr	r0, [r7, #4]
 8021d4e:	f000 f903 	bl	8021f58 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8021d52:	687b      	ldr	r3, [r7, #4]
 8021d54:	685b      	ldr	r3, [r3, #4]
 8021d56:	b2db      	uxtb	r3, r3
 8021d58:	4619      	mov	r1, r3
 8021d5a:	6878      	ldr	r0, [r7, #4]
 8021d5c:	f7ff f8e5 	bl	8020f2a <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8021d60:	687b      	ldr	r3, [r7, #4]
 8021d62:	2202      	movs	r2, #2
 8021d64:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8021d68:	e014      	b.n	8021d94 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8021d6a:	6878      	ldr	r0, [r7, #4]
 8021d6c:	f000 f9a2 	bl	80220b4 <USBD_CtlSendStatus>
      break;
 8021d70:	e010      	b.n	8021d94 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8021d72:	6878      	ldr	r0, [r7, #4]
 8021d74:	f000 f99e 	bl	80220b4 <USBD_CtlSendStatus>
      break;
 8021d78:	e00c      	b.n	8021d94 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 8021d7a:	6839      	ldr	r1, [r7, #0]
 8021d7c:	6878      	ldr	r0, [r7, #4]
 8021d7e:	f000 f8eb 	bl	8021f58 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8021d82:	4b07      	ldr	r3, [pc, #28]	; (8021da0 <USBD_SetConfig+0x148>)
 8021d84:	781b      	ldrb	r3, [r3, #0]
 8021d86:	4619      	mov	r1, r3
 8021d88:	6878      	ldr	r0, [r7, #4]
 8021d8a:	f7ff f8ce 	bl	8020f2a <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8021d8e:	2303      	movs	r3, #3
 8021d90:	73fb      	strb	r3, [r7, #15]
      break;
 8021d92:	bf00      	nop
  }

  return ret;
 8021d94:	7bfb      	ldrb	r3, [r7, #15]
}
 8021d96:	4618      	mov	r0, r3
 8021d98:	3710      	adds	r7, #16
 8021d9a:	46bd      	mov	sp, r7
 8021d9c:	bd80      	pop	{r7, pc}
 8021d9e:	bf00      	nop
 8021da0:	200007ac 	.word	0x200007ac

08021da4 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8021da4:	b580      	push	{r7, lr}
 8021da6:	b082      	sub	sp, #8
 8021da8:	af00      	add	r7, sp, #0
 8021daa:	6078      	str	r0, [r7, #4]
 8021dac:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8021dae:	683b      	ldr	r3, [r7, #0]
 8021db0:	88db      	ldrh	r3, [r3, #6]
 8021db2:	2b01      	cmp	r3, #1
 8021db4:	d004      	beq.n	8021dc0 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8021db6:	6839      	ldr	r1, [r7, #0]
 8021db8:	6878      	ldr	r0, [r7, #4]
 8021dba:	f000 f8cd 	bl	8021f58 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8021dbe:	e023      	b.n	8021e08 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8021dc0:	687b      	ldr	r3, [r7, #4]
 8021dc2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8021dc6:	b2db      	uxtb	r3, r3
 8021dc8:	2b02      	cmp	r3, #2
 8021dca:	dc02      	bgt.n	8021dd2 <USBD_GetConfig+0x2e>
 8021dcc:	2b00      	cmp	r3, #0
 8021dce:	dc03      	bgt.n	8021dd8 <USBD_GetConfig+0x34>
 8021dd0:	e015      	b.n	8021dfe <USBD_GetConfig+0x5a>
 8021dd2:	2b03      	cmp	r3, #3
 8021dd4:	d00b      	beq.n	8021dee <USBD_GetConfig+0x4a>
 8021dd6:	e012      	b.n	8021dfe <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8021dd8:	687b      	ldr	r3, [r7, #4]
 8021dda:	2200      	movs	r2, #0
 8021ddc:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8021dde:	687b      	ldr	r3, [r7, #4]
 8021de0:	3308      	adds	r3, #8
 8021de2:	2201      	movs	r2, #1
 8021de4:	4619      	mov	r1, r3
 8021de6:	6878      	ldr	r0, [r7, #4]
 8021de8:	f000 f927 	bl	802203a <USBD_CtlSendData>
        break;
 8021dec:	e00c      	b.n	8021e08 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8021dee:	687b      	ldr	r3, [r7, #4]
 8021df0:	3304      	adds	r3, #4
 8021df2:	2201      	movs	r2, #1
 8021df4:	4619      	mov	r1, r3
 8021df6:	6878      	ldr	r0, [r7, #4]
 8021df8:	f000 f91f 	bl	802203a <USBD_CtlSendData>
        break;
 8021dfc:	e004      	b.n	8021e08 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8021dfe:	6839      	ldr	r1, [r7, #0]
 8021e00:	6878      	ldr	r0, [r7, #4]
 8021e02:	f000 f8a9 	bl	8021f58 <USBD_CtlError>
        break;
 8021e06:	bf00      	nop
}
 8021e08:	bf00      	nop
 8021e0a:	3708      	adds	r7, #8
 8021e0c:	46bd      	mov	sp, r7
 8021e0e:	bd80      	pop	{r7, pc}

08021e10 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8021e10:	b580      	push	{r7, lr}
 8021e12:	b082      	sub	sp, #8
 8021e14:	af00      	add	r7, sp, #0
 8021e16:	6078      	str	r0, [r7, #4]
 8021e18:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8021e1a:	687b      	ldr	r3, [r7, #4]
 8021e1c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8021e20:	b2db      	uxtb	r3, r3
 8021e22:	3b01      	subs	r3, #1
 8021e24:	2b02      	cmp	r3, #2
 8021e26:	d81e      	bhi.n	8021e66 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8021e28:	683b      	ldr	r3, [r7, #0]
 8021e2a:	88db      	ldrh	r3, [r3, #6]
 8021e2c:	2b02      	cmp	r3, #2
 8021e2e:	d004      	beq.n	8021e3a <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8021e30:	6839      	ldr	r1, [r7, #0]
 8021e32:	6878      	ldr	r0, [r7, #4]
 8021e34:	f000 f890 	bl	8021f58 <USBD_CtlError>
        break;
 8021e38:	e01a      	b.n	8021e70 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8021e3a:	687b      	ldr	r3, [r7, #4]
 8021e3c:	2201      	movs	r2, #1
 8021e3e:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 8021e40:	687b      	ldr	r3, [r7, #4]
 8021e42:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8021e46:	2b00      	cmp	r3, #0
 8021e48:	d005      	beq.n	8021e56 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8021e4a:	687b      	ldr	r3, [r7, #4]
 8021e4c:	68db      	ldr	r3, [r3, #12]
 8021e4e:	f043 0202 	orr.w	r2, r3, #2
 8021e52:	687b      	ldr	r3, [r7, #4]
 8021e54:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8021e56:	687b      	ldr	r3, [r7, #4]
 8021e58:	330c      	adds	r3, #12
 8021e5a:	2202      	movs	r2, #2
 8021e5c:	4619      	mov	r1, r3
 8021e5e:	6878      	ldr	r0, [r7, #4]
 8021e60:	f000 f8eb 	bl	802203a <USBD_CtlSendData>
      break;
 8021e64:	e004      	b.n	8021e70 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8021e66:	6839      	ldr	r1, [r7, #0]
 8021e68:	6878      	ldr	r0, [r7, #4]
 8021e6a:	f000 f875 	bl	8021f58 <USBD_CtlError>
      break;
 8021e6e:	bf00      	nop
  }
}
 8021e70:	bf00      	nop
 8021e72:	3708      	adds	r7, #8
 8021e74:	46bd      	mov	sp, r7
 8021e76:	bd80      	pop	{r7, pc}

08021e78 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8021e78:	b580      	push	{r7, lr}
 8021e7a:	b082      	sub	sp, #8
 8021e7c:	af00      	add	r7, sp, #0
 8021e7e:	6078      	str	r0, [r7, #4]
 8021e80:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8021e82:	683b      	ldr	r3, [r7, #0]
 8021e84:	885b      	ldrh	r3, [r3, #2]
 8021e86:	2b01      	cmp	r3, #1
 8021e88:	d106      	bne.n	8021e98 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8021e8a:	687b      	ldr	r3, [r7, #4]
 8021e8c:	2201      	movs	r2, #1
 8021e8e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8021e92:	6878      	ldr	r0, [r7, #4]
 8021e94:	f000 f90e 	bl	80220b4 <USBD_CtlSendStatus>
  }
}
 8021e98:	bf00      	nop
 8021e9a:	3708      	adds	r7, #8
 8021e9c:	46bd      	mov	sp, r7
 8021e9e:	bd80      	pop	{r7, pc}

08021ea0 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8021ea0:	b580      	push	{r7, lr}
 8021ea2:	b082      	sub	sp, #8
 8021ea4:	af00      	add	r7, sp, #0
 8021ea6:	6078      	str	r0, [r7, #4]
 8021ea8:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8021eaa:	687b      	ldr	r3, [r7, #4]
 8021eac:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8021eb0:	b2db      	uxtb	r3, r3
 8021eb2:	3b01      	subs	r3, #1
 8021eb4:	2b02      	cmp	r3, #2
 8021eb6:	d80b      	bhi.n	8021ed0 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8021eb8:	683b      	ldr	r3, [r7, #0]
 8021eba:	885b      	ldrh	r3, [r3, #2]
 8021ebc:	2b01      	cmp	r3, #1
 8021ebe:	d10c      	bne.n	8021eda <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8021ec0:	687b      	ldr	r3, [r7, #4]
 8021ec2:	2200      	movs	r2, #0
 8021ec4:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8021ec8:	6878      	ldr	r0, [r7, #4]
 8021eca:	f000 f8f3 	bl	80220b4 <USBD_CtlSendStatus>
      }
      break;
 8021ece:	e004      	b.n	8021eda <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8021ed0:	6839      	ldr	r1, [r7, #0]
 8021ed2:	6878      	ldr	r0, [r7, #4]
 8021ed4:	f000 f840 	bl	8021f58 <USBD_CtlError>
      break;
 8021ed8:	e000      	b.n	8021edc <USBD_ClrFeature+0x3c>
      break;
 8021eda:	bf00      	nop
  }
}
 8021edc:	bf00      	nop
 8021ede:	3708      	adds	r7, #8
 8021ee0:	46bd      	mov	sp, r7
 8021ee2:	bd80      	pop	{r7, pc}

08021ee4 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8021ee4:	b580      	push	{r7, lr}
 8021ee6:	b084      	sub	sp, #16
 8021ee8:	af00      	add	r7, sp, #0
 8021eea:	6078      	str	r0, [r7, #4]
 8021eec:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8021eee:	683b      	ldr	r3, [r7, #0]
 8021ef0:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8021ef2:	68fb      	ldr	r3, [r7, #12]
 8021ef4:	781a      	ldrb	r2, [r3, #0]
 8021ef6:	687b      	ldr	r3, [r7, #4]
 8021ef8:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8021efa:	68fb      	ldr	r3, [r7, #12]
 8021efc:	3301      	adds	r3, #1
 8021efe:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8021f00:	68fb      	ldr	r3, [r7, #12]
 8021f02:	781a      	ldrb	r2, [r3, #0]
 8021f04:	687b      	ldr	r3, [r7, #4]
 8021f06:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8021f08:	68fb      	ldr	r3, [r7, #12]
 8021f0a:	3301      	adds	r3, #1
 8021f0c:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8021f0e:	68f8      	ldr	r0, [r7, #12]
 8021f10:	f7ff fa92 	bl	8021438 <SWAPBYTE>
 8021f14:	4603      	mov	r3, r0
 8021f16:	461a      	mov	r2, r3
 8021f18:	687b      	ldr	r3, [r7, #4]
 8021f1a:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8021f1c:	68fb      	ldr	r3, [r7, #12]
 8021f1e:	3301      	adds	r3, #1
 8021f20:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8021f22:	68fb      	ldr	r3, [r7, #12]
 8021f24:	3301      	adds	r3, #1
 8021f26:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8021f28:	68f8      	ldr	r0, [r7, #12]
 8021f2a:	f7ff fa85 	bl	8021438 <SWAPBYTE>
 8021f2e:	4603      	mov	r3, r0
 8021f30:	461a      	mov	r2, r3
 8021f32:	687b      	ldr	r3, [r7, #4]
 8021f34:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8021f36:	68fb      	ldr	r3, [r7, #12]
 8021f38:	3301      	adds	r3, #1
 8021f3a:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8021f3c:	68fb      	ldr	r3, [r7, #12]
 8021f3e:	3301      	adds	r3, #1
 8021f40:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8021f42:	68f8      	ldr	r0, [r7, #12]
 8021f44:	f7ff fa78 	bl	8021438 <SWAPBYTE>
 8021f48:	4603      	mov	r3, r0
 8021f4a:	461a      	mov	r2, r3
 8021f4c:	687b      	ldr	r3, [r7, #4]
 8021f4e:	80da      	strh	r2, [r3, #6]
}
 8021f50:	bf00      	nop
 8021f52:	3710      	adds	r7, #16
 8021f54:	46bd      	mov	sp, r7
 8021f56:	bd80      	pop	{r7, pc}

08021f58 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8021f58:	b580      	push	{r7, lr}
 8021f5a:	b082      	sub	sp, #8
 8021f5c:	af00      	add	r7, sp, #0
 8021f5e:	6078      	str	r0, [r7, #4]
 8021f60:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8021f62:	2180      	movs	r1, #128	; 0x80
 8021f64:	6878      	ldr	r0, [r7, #4]
 8021f66:	f000 fcbe 	bl	80228e6 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8021f6a:	2100      	movs	r1, #0
 8021f6c:	6878      	ldr	r0, [r7, #4]
 8021f6e:	f000 fcba 	bl	80228e6 <USBD_LL_StallEP>
}
 8021f72:	bf00      	nop
 8021f74:	3708      	adds	r7, #8
 8021f76:	46bd      	mov	sp, r7
 8021f78:	bd80      	pop	{r7, pc}

08021f7a <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8021f7a:	b580      	push	{r7, lr}
 8021f7c:	b086      	sub	sp, #24
 8021f7e:	af00      	add	r7, sp, #0
 8021f80:	60f8      	str	r0, [r7, #12]
 8021f82:	60b9      	str	r1, [r7, #8]
 8021f84:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8021f86:	2300      	movs	r3, #0
 8021f88:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8021f8a:	68fb      	ldr	r3, [r7, #12]
 8021f8c:	2b00      	cmp	r3, #0
 8021f8e:	d036      	beq.n	8021ffe <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8021f90:	68fb      	ldr	r3, [r7, #12]
 8021f92:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8021f94:	6938      	ldr	r0, [r7, #16]
 8021f96:	f000 f836 	bl	8022006 <USBD_GetLen>
 8021f9a:	4603      	mov	r3, r0
 8021f9c:	3301      	adds	r3, #1
 8021f9e:	b29b      	uxth	r3, r3
 8021fa0:	005b      	lsls	r3, r3, #1
 8021fa2:	b29a      	uxth	r2, r3
 8021fa4:	687b      	ldr	r3, [r7, #4]
 8021fa6:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8021fa8:	7dfb      	ldrb	r3, [r7, #23]
 8021faa:	68ba      	ldr	r2, [r7, #8]
 8021fac:	4413      	add	r3, r2
 8021fae:	687a      	ldr	r2, [r7, #4]
 8021fb0:	7812      	ldrb	r2, [r2, #0]
 8021fb2:	701a      	strb	r2, [r3, #0]
  idx++;
 8021fb4:	7dfb      	ldrb	r3, [r7, #23]
 8021fb6:	3301      	adds	r3, #1
 8021fb8:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8021fba:	7dfb      	ldrb	r3, [r7, #23]
 8021fbc:	68ba      	ldr	r2, [r7, #8]
 8021fbe:	4413      	add	r3, r2
 8021fc0:	2203      	movs	r2, #3
 8021fc2:	701a      	strb	r2, [r3, #0]
  idx++;
 8021fc4:	7dfb      	ldrb	r3, [r7, #23]
 8021fc6:	3301      	adds	r3, #1
 8021fc8:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8021fca:	e013      	b.n	8021ff4 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8021fcc:	7dfb      	ldrb	r3, [r7, #23]
 8021fce:	68ba      	ldr	r2, [r7, #8]
 8021fd0:	4413      	add	r3, r2
 8021fd2:	693a      	ldr	r2, [r7, #16]
 8021fd4:	7812      	ldrb	r2, [r2, #0]
 8021fd6:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8021fd8:	693b      	ldr	r3, [r7, #16]
 8021fda:	3301      	adds	r3, #1
 8021fdc:	613b      	str	r3, [r7, #16]
    idx++;
 8021fde:	7dfb      	ldrb	r3, [r7, #23]
 8021fe0:	3301      	adds	r3, #1
 8021fe2:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8021fe4:	7dfb      	ldrb	r3, [r7, #23]
 8021fe6:	68ba      	ldr	r2, [r7, #8]
 8021fe8:	4413      	add	r3, r2
 8021fea:	2200      	movs	r2, #0
 8021fec:	701a      	strb	r2, [r3, #0]
    idx++;
 8021fee:	7dfb      	ldrb	r3, [r7, #23]
 8021ff0:	3301      	adds	r3, #1
 8021ff2:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8021ff4:	693b      	ldr	r3, [r7, #16]
 8021ff6:	781b      	ldrb	r3, [r3, #0]
 8021ff8:	2b00      	cmp	r3, #0
 8021ffa:	d1e7      	bne.n	8021fcc <USBD_GetString+0x52>
 8021ffc:	e000      	b.n	8022000 <USBD_GetString+0x86>
    return;
 8021ffe:	bf00      	nop
  }
}
 8022000:	3718      	adds	r7, #24
 8022002:	46bd      	mov	sp, r7
 8022004:	bd80      	pop	{r7, pc}

08022006 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8022006:	b480      	push	{r7}
 8022008:	b085      	sub	sp, #20
 802200a:	af00      	add	r7, sp, #0
 802200c:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 802200e:	2300      	movs	r3, #0
 8022010:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8022012:	687b      	ldr	r3, [r7, #4]
 8022014:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8022016:	e005      	b.n	8022024 <USBD_GetLen+0x1e>
  {
    len++;
 8022018:	7bfb      	ldrb	r3, [r7, #15]
 802201a:	3301      	adds	r3, #1
 802201c:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 802201e:	68bb      	ldr	r3, [r7, #8]
 8022020:	3301      	adds	r3, #1
 8022022:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8022024:	68bb      	ldr	r3, [r7, #8]
 8022026:	781b      	ldrb	r3, [r3, #0]
 8022028:	2b00      	cmp	r3, #0
 802202a:	d1f5      	bne.n	8022018 <USBD_GetLen+0x12>
  }

  return len;
 802202c:	7bfb      	ldrb	r3, [r7, #15]
}
 802202e:	4618      	mov	r0, r3
 8022030:	3714      	adds	r7, #20
 8022032:	46bd      	mov	sp, r7
 8022034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022038:	4770      	bx	lr

0802203a <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 802203a:	b580      	push	{r7, lr}
 802203c:	b084      	sub	sp, #16
 802203e:	af00      	add	r7, sp, #0
 8022040:	60f8      	str	r0, [r7, #12]
 8022042:	60b9      	str	r1, [r7, #8]
 8022044:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8022046:	68fb      	ldr	r3, [r7, #12]
 8022048:	2202      	movs	r2, #2
 802204a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 802204e:	68fb      	ldr	r3, [r7, #12]
 8022050:	687a      	ldr	r2, [r7, #4]
 8022052:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8022054:	68fb      	ldr	r3, [r7, #12]
 8022056:	687a      	ldr	r2, [r7, #4]
 8022058:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 802205a:	687b      	ldr	r3, [r7, #4]
 802205c:	68ba      	ldr	r2, [r7, #8]
 802205e:	2100      	movs	r1, #0
 8022060:	68f8      	ldr	r0, [r7, #12]
 8022062:	f000 fcc9 	bl	80229f8 <USBD_LL_Transmit>

  return USBD_OK;
 8022066:	2300      	movs	r3, #0
}
 8022068:	4618      	mov	r0, r3
 802206a:	3710      	adds	r7, #16
 802206c:	46bd      	mov	sp, r7
 802206e:	bd80      	pop	{r7, pc}

08022070 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8022070:	b580      	push	{r7, lr}
 8022072:	b084      	sub	sp, #16
 8022074:	af00      	add	r7, sp, #0
 8022076:	60f8      	str	r0, [r7, #12]
 8022078:	60b9      	str	r1, [r7, #8]
 802207a:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 802207c:	687b      	ldr	r3, [r7, #4]
 802207e:	68ba      	ldr	r2, [r7, #8]
 8022080:	2100      	movs	r1, #0
 8022082:	68f8      	ldr	r0, [r7, #12]
 8022084:	f000 fcb8 	bl	80229f8 <USBD_LL_Transmit>

  return USBD_OK;
 8022088:	2300      	movs	r3, #0
}
 802208a:	4618      	mov	r0, r3
 802208c:	3710      	adds	r7, #16
 802208e:	46bd      	mov	sp, r7
 8022090:	bd80      	pop	{r7, pc}

08022092 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8022092:	b580      	push	{r7, lr}
 8022094:	b084      	sub	sp, #16
 8022096:	af00      	add	r7, sp, #0
 8022098:	60f8      	str	r0, [r7, #12]
 802209a:	60b9      	str	r1, [r7, #8]
 802209c:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 802209e:	687b      	ldr	r3, [r7, #4]
 80220a0:	68ba      	ldr	r2, [r7, #8]
 80220a2:	2100      	movs	r1, #0
 80220a4:	68f8      	ldr	r0, [r7, #12]
 80220a6:	f000 fcc8 	bl	8022a3a <USBD_LL_PrepareReceive>

  return USBD_OK;
 80220aa:	2300      	movs	r3, #0
}
 80220ac:	4618      	mov	r0, r3
 80220ae:	3710      	adds	r7, #16
 80220b0:	46bd      	mov	sp, r7
 80220b2:	bd80      	pop	{r7, pc}

080220b4 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 80220b4:	b580      	push	{r7, lr}
 80220b6:	b082      	sub	sp, #8
 80220b8:	af00      	add	r7, sp, #0
 80220ba:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80220bc:	687b      	ldr	r3, [r7, #4]
 80220be:	2204      	movs	r2, #4
 80220c0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80220c4:	2300      	movs	r3, #0
 80220c6:	2200      	movs	r2, #0
 80220c8:	2100      	movs	r1, #0
 80220ca:	6878      	ldr	r0, [r7, #4]
 80220cc:	f000 fc94 	bl	80229f8 <USBD_LL_Transmit>

  return USBD_OK;
 80220d0:	2300      	movs	r3, #0
}
 80220d2:	4618      	mov	r0, r3
 80220d4:	3708      	adds	r7, #8
 80220d6:	46bd      	mov	sp, r7
 80220d8:	bd80      	pop	{r7, pc}

080220da <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 80220da:	b580      	push	{r7, lr}
 80220dc:	b082      	sub	sp, #8
 80220de:	af00      	add	r7, sp, #0
 80220e0:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80220e2:	687b      	ldr	r3, [r7, #4]
 80220e4:	2205      	movs	r2, #5
 80220e6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80220ea:	2300      	movs	r3, #0
 80220ec:	2200      	movs	r2, #0
 80220ee:	2100      	movs	r1, #0
 80220f0:	6878      	ldr	r0, [r7, #4]
 80220f2:	f000 fca2 	bl	8022a3a <USBD_LL_PrepareReceive>

  return USBD_OK;
 80220f6:	2300      	movs	r3, #0
}
 80220f8:	4618      	mov	r0, r3
 80220fa:	3708      	adds	r7, #8
 80220fc:	46bd      	mov	sp, r7
 80220fe:	bd80      	pop	{r7, pc}

08022100 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8022100:	b580      	push	{r7, lr}
 8022102:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8022104:	2200      	movs	r2, #0
 8022106:	4912      	ldr	r1, [pc, #72]	; (8022150 <MX_USB_DEVICE_Init+0x50>)
 8022108:	4812      	ldr	r0, [pc, #72]	; (8022154 <MX_USB_DEVICE_Init+0x54>)
 802210a:	f7fe fe84 	bl	8020e16 <USBD_Init>
 802210e:	4603      	mov	r3, r0
 8022110:	2b00      	cmp	r3, #0
 8022112:	d001      	beq.n	8022118 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8022114:	f7f5 fd9a 	bl	8017c4c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_MSC) != USBD_OK)
 8022118:	490f      	ldr	r1, [pc, #60]	; (8022158 <MX_USB_DEVICE_Init+0x58>)
 802211a:	480e      	ldr	r0, [pc, #56]	; (8022154 <MX_USB_DEVICE_Init+0x54>)
 802211c:	f7fe feab 	bl	8020e76 <USBD_RegisterClass>
 8022120:	4603      	mov	r3, r0
 8022122:	2b00      	cmp	r3, #0
 8022124:	d001      	beq.n	802212a <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8022126:	f7f5 fd91 	bl	8017c4c <Error_Handler>
  }
  if (USBD_MSC_RegisterStorage(&hUsbDeviceFS, &USBD_Storage_Interface_fops_FS) != USBD_OK)
 802212a:	490c      	ldr	r1, [pc, #48]	; (802215c <MX_USB_DEVICE_Init+0x5c>)
 802212c:	4809      	ldr	r0, [pc, #36]	; (8022154 <MX_USB_DEVICE_Init+0x54>)
 802212e:	f7fd fa5b 	bl	801f5e8 <USBD_MSC_RegisterStorage>
 8022132:	4603      	mov	r3, r0
 8022134:	2b00      	cmp	r3, #0
 8022136:	d001      	beq.n	802213c <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8022138:	f7f5 fd88 	bl	8017c4c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 802213c:	4805      	ldr	r0, [pc, #20]	; (8022154 <MX_USB_DEVICE_Init+0x54>)
 802213e:	f7fe fec1 	bl	8020ec4 <USBD_Start>
 8022142:	4603      	mov	r3, r0
 8022144:	2b00      	cmp	r3, #0
 8022146:	d001      	beq.n	802214c <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8022148:	f7f5 fd80 	bl	8017c4c <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 802214c:	bf00      	nop
 802214e:	bd80      	pop	{r7, pc}
 8022150:	2000067c 	.word	0x2000067c
 8022154:	20006c9c 	.word	0x20006c9c
 8022158:	20000594 	.word	0x20000594
 802215c:	200006dc 	.word	0x200006dc

08022160 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8022160:	b480      	push	{r7}
 8022162:	b083      	sub	sp, #12
 8022164:	af00      	add	r7, sp, #0
 8022166:	4603      	mov	r3, r0
 8022168:	6039      	str	r1, [r7, #0]
 802216a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 802216c:	683b      	ldr	r3, [r7, #0]
 802216e:	2212      	movs	r2, #18
 8022170:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8022172:	4b03      	ldr	r3, [pc, #12]	; (8022180 <USBD_FS_DeviceDescriptor+0x20>)
}
 8022174:	4618      	mov	r0, r3
 8022176:	370c      	adds	r7, #12
 8022178:	46bd      	mov	sp, r7
 802217a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802217e:	4770      	bx	lr
 8022180:	2000069c 	.word	0x2000069c

08022184 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8022184:	b480      	push	{r7}
 8022186:	b083      	sub	sp, #12
 8022188:	af00      	add	r7, sp, #0
 802218a:	4603      	mov	r3, r0
 802218c:	6039      	str	r1, [r7, #0]
 802218e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8022190:	683b      	ldr	r3, [r7, #0]
 8022192:	2204      	movs	r2, #4
 8022194:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8022196:	4b03      	ldr	r3, [pc, #12]	; (80221a4 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8022198:	4618      	mov	r0, r3
 802219a:	370c      	adds	r7, #12
 802219c:	46bd      	mov	sp, r7
 802219e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80221a2:	4770      	bx	lr
 80221a4:	200006bc 	.word	0x200006bc

080221a8 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80221a8:	b580      	push	{r7, lr}
 80221aa:	b082      	sub	sp, #8
 80221ac:	af00      	add	r7, sp, #0
 80221ae:	4603      	mov	r3, r0
 80221b0:	6039      	str	r1, [r7, #0]
 80221b2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80221b4:	79fb      	ldrb	r3, [r7, #7]
 80221b6:	2b00      	cmp	r3, #0
 80221b8:	d105      	bne.n	80221c6 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80221ba:	683a      	ldr	r2, [r7, #0]
 80221bc:	4907      	ldr	r1, [pc, #28]	; (80221dc <USBD_FS_ProductStrDescriptor+0x34>)
 80221be:	4808      	ldr	r0, [pc, #32]	; (80221e0 <USBD_FS_ProductStrDescriptor+0x38>)
 80221c0:	f7ff fedb 	bl	8021f7a <USBD_GetString>
 80221c4:	e004      	b.n	80221d0 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80221c6:	683a      	ldr	r2, [r7, #0]
 80221c8:	4904      	ldr	r1, [pc, #16]	; (80221dc <USBD_FS_ProductStrDescriptor+0x34>)
 80221ca:	4805      	ldr	r0, [pc, #20]	; (80221e0 <USBD_FS_ProductStrDescriptor+0x38>)
 80221cc:	f7ff fed5 	bl	8021f7a <USBD_GetString>
  }
  return USBD_StrDesc;
 80221d0:	4b02      	ldr	r3, [pc, #8]	; (80221dc <USBD_FS_ProductStrDescriptor+0x34>)
}
 80221d2:	4618      	mov	r0, r3
 80221d4:	3708      	adds	r7, #8
 80221d6:	46bd      	mov	sp, r7
 80221d8:	bd80      	pop	{r7, pc}
 80221da:	bf00      	nop
 80221dc:	20006f6c 	.word	0x20006f6c
 80221e0:	08000a84 	.word	0x08000a84

080221e4 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80221e4:	b580      	push	{r7, lr}
 80221e6:	b082      	sub	sp, #8
 80221e8:	af00      	add	r7, sp, #0
 80221ea:	4603      	mov	r3, r0
 80221ec:	6039      	str	r1, [r7, #0]
 80221ee:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80221f0:	683a      	ldr	r2, [r7, #0]
 80221f2:	4904      	ldr	r1, [pc, #16]	; (8022204 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 80221f4:	4804      	ldr	r0, [pc, #16]	; (8022208 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 80221f6:	f7ff fec0 	bl	8021f7a <USBD_GetString>
  return USBD_StrDesc;
 80221fa:	4b02      	ldr	r3, [pc, #8]	; (8022204 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 80221fc:	4618      	mov	r0, r3
 80221fe:	3708      	adds	r7, #8
 8022200:	46bd      	mov	sp, r7
 8022202:	bd80      	pop	{r7, pc}
 8022204:	20006f6c 	.word	0x20006f6c
 8022208:	08000a98 	.word	0x08000a98

0802220c <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 802220c:	b580      	push	{r7, lr}
 802220e:	b082      	sub	sp, #8
 8022210:	af00      	add	r7, sp, #0
 8022212:	4603      	mov	r3, r0
 8022214:	6039      	str	r1, [r7, #0]
 8022216:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8022218:	683b      	ldr	r3, [r7, #0]
 802221a:	221a      	movs	r2, #26
 802221c:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 802221e:	f000 f855 	bl	80222cc <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8022222:	4b02      	ldr	r3, [pc, #8]	; (802222c <USBD_FS_SerialStrDescriptor+0x20>)
}
 8022224:	4618      	mov	r0, r3
 8022226:	3708      	adds	r7, #8
 8022228:	46bd      	mov	sp, r7
 802222a:	bd80      	pop	{r7, pc}
 802222c:	200006c0 	.word	0x200006c0

08022230 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8022230:	b580      	push	{r7, lr}
 8022232:	b082      	sub	sp, #8
 8022234:	af00      	add	r7, sp, #0
 8022236:	4603      	mov	r3, r0
 8022238:	6039      	str	r1, [r7, #0]
 802223a:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 802223c:	79fb      	ldrb	r3, [r7, #7]
 802223e:	2b00      	cmp	r3, #0
 8022240:	d105      	bne.n	802224e <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8022242:	683a      	ldr	r2, [r7, #0]
 8022244:	4907      	ldr	r1, [pc, #28]	; (8022264 <USBD_FS_ConfigStrDescriptor+0x34>)
 8022246:	4808      	ldr	r0, [pc, #32]	; (8022268 <USBD_FS_ConfigStrDescriptor+0x38>)
 8022248:	f7ff fe97 	bl	8021f7a <USBD_GetString>
 802224c:	e004      	b.n	8022258 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 802224e:	683a      	ldr	r2, [r7, #0]
 8022250:	4904      	ldr	r1, [pc, #16]	; (8022264 <USBD_FS_ConfigStrDescriptor+0x34>)
 8022252:	4805      	ldr	r0, [pc, #20]	; (8022268 <USBD_FS_ConfigStrDescriptor+0x38>)
 8022254:	f7ff fe91 	bl	8021f7a <USBD_GetString>
  }
  return USBD_StrDesc;
 8022258:	4b02      	ldr	r3, [pc, #8]	; (8022264 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 802225a:	4618      	mov	r0, r3
 802225c:	3708      	adds	r7, #8
 802225e:	46bd      	mov	sp, r7
 8022260:	bd80      	pop	{r7, pc}
 8022262:	bf00      	nop
 8022264:	20006f6c 	.word	0x20006f6c
 8022268:	08000aac 	.word	0x08000aac

0802226c <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 802226c:	b580      	push	{r7, lr}
 802226e:	b082      	sub	sp, #8
 8022270:	af00      	add	r7, sp, #0
 8022272:	4603      	mov	r3, r0
 8022274:	6039      	str	r1, [r7, #0]
 8022276:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8022278:	79fb      	ldrb	r3, [r7, #7]
 802227a:	2b00      	cmp	r3, #0
 802227c:	d105      	bne.n	802228a <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 802227e:	683a      	ldr	r2, [r7, #0]
 8022280:	4907      	ldr	r1, [pc, #28]	; (80222a0 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8022282:	4808      	ldr	r0, [pc, #32]	; (80222a4 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8022284:	f7ff fe79 	bl	8021f7a <USBD_GetString>
 8022288:	e004      	b.n	8022294 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 802228a:	683a      	ldr	r2, [r7, #0]
 802228c:	4904      	ldr	r1, [pc, #16]	; (80222a0 <USBD_FS_InterfaceStrDescriptor+0x34>)
 802228e:	4805      	ldr	r0, [pc, #20]	; (80222a4 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8022290:	f7ff fe73 	bl	8021f7a <USBD_GetString>
  }
  return USBD_StrDesc;
 8022294:	4b02      	ldr	r3, [pc, #8]	; (80222a0 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8022296:	4618      	mov	r0, r3
 8022298:	3708      	adds	r7, #8
 802229a:	46bd      	mov	sp, r7
 802229c:	bd80      	pop	{r7, pc}
 802229e:	bf00      	nop
 80222a0:	20006f6c 	.word	0x20006f6c
 80222a4:	08000ab8 	.word	0x08000ab8

080222a8 <USBD_FS_USR_BOSDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80222a8:	b480      	push	{r7}
 80222aa:	b083      	sub	sp, #12
 80222ac:	af00      	add	r7, sp, #0
 80222ae:	4603      	mov	r3, r0
 80222b0:	6039      	str	r1, [r7, #0]
 80222b2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_BOSDesc);
 80222b4:	683b      	ldr	r3, [r7, #0]
 80222b6:	220c      	movs	r2, #12
 80222b8:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)USBD_FS_BOSDesc;
 80222ba:	4b03      	ldr	r3, [pc, #12]	; (80222c8 <USBD_FS_USR_BOSDescriptor+0x20>)
}
 80222bc:	4618      	mov	r0, r3
 80222be:	370c      	adds	r7, #12
 80222c0:	46bd      	mov	sp, r7
 80222c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80222c6:	4770      	bx	lr
 80222c8:	200006b0 	.word	0x200006b0

080222cc <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 80222cc:	b580      	push	{r7, lr}
 80222ce:	b084      	sub	sp, #16
 80222d0:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80222d2:	4b0f      	ldr	r3, [pc, #60]	; (8022310 <Get_SerialNum+0x44>)
 80222d4:	681b      	ldr	r3, [r3, #0]
 80222d6:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80222d8:	4b0e      	ldr	r3, [pc, #56]	; (8022314 <Get_SerialNum+0x48>)
 80222da:	681b      	ldr	r3, [r3, #0]
 80222dc:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 80222de:	4b0e      	ldr	r3, [pc, #56]	; (8022318 <Get_SerialNum+0x4c>)
 80222e0:	681b      	ldr	r3, [r3, #0]
 80222e2:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 80222e4:	68fa      	ldr	r2, [r7, #12]
 80222e6:	687b      	ldr	r3, [r7, #4]
 80222e8:	4413      	add	r3, r2
 80222ea:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 80222ec:	68fb      	ldr	r3, [r7, #12]
 80222ee:	2b00      	cmp	r3, #0
 80222f0:	d009      	beq.n	8022306 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80222f2:	2208      	movs	r2, #8
 80222f4:	4909      	ldr	r1, [pc, #36]	; (802231c <Get_SerialNum+0x50>)
 80222f6:	68f8      	ldr	r0, [r7, #12]
 80222f8:	f000 f814 	bl	8022324 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80222fc:	2204      	movs	r2, #4
 80222fe:	4908      	ldr	r1, [pc, #32]	; (8022320 <Get_SerialNum+0x54>)
 8022300:	68b8      	ldr	r0, [r7, #8]
 8022302:	f000 f80f 	bl	8022324 <IntToUnicode>
  }
}
 8022306:	bf00      	nop
 8022308:	3710      	adds	r7, #16
 802230a:	46bd      	mov	sp, r7
 802230c:	bd80      	pop	{r7, pc}
 802230e:	bf00      	nop
 8022310:	1fff7a10 	.word	0x1fff7a10
 8022314:	1fff7a14 	.word	0x1fff7a14
 8022318:	1fff7a18 	.word	0x1fff7a18
 802231c:	200006c2 	.word	0x200006c2
 8022320:	200006d2 	.word	0x200006d2

08022324 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8022324:	b480      	push	{r7}
 8022326:	b087      	sub	sp, #28
 8022328:	af00      	add	r7, sp, #0
 802232a:	60f8      	str	r0, [r7, #12]
 802232c:	60b9      	str	r1, [r7, #8]
 802232e:	4613      	mov	r3, r2
 8022330:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8022332:	2300      	movs	r3, #0
 8022334:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8022336:	2300      	movs	r3, #0
 8022338:	75fb      	strb	r3, [r7, #23]
 802233a:	e027      	b.n	802238c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 802233c:	68fb      	ldr	r3, [r7, #12]
 802233e:	0f1b      	lsrs	r3, r3, #28
 8022340:	2b09      	cmp	r3, #9
 8022342:	d80b      	bhi.n	802235c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8022344:	68fb      	ldr	r3, [r7, #12]
 8022346:	0f1b      	lsrs	r3, r3, #28
 8022348:	b2da      	uxtb	r2, r3
 802234a:	7dfb      	ldrb	r3, [r7, #23]
 802234c:	005b      	lsls	r3, r3, #1
 802234e:	4619      	mov	r1, r3
 8022350:	68bb      	ldr	r3, [r7, #8]
 8022352:	440b      	add	r3, r1
 8022354:	3230      	adds	r2, #48	; 0x30
 8022356:	b2d2      	uxtb	r2, r2
 8022358:	701a      	strb	r2, [r3, #0]
 802235a:	e00a      	b.n	8022372 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 802235c:	68fb      	ldr	r3, [r7, #12]
 802235e:	0f1b      	lsrs	r3, r3, #28
 8022360:	b2da      	uxtb	r2, r3
 8022362:	7dfb      	ldrb	r3, [r7, #23]
 8022364:	005b      	lsls	r3, r3, #1
 8022366:	4619      	mov	r1, r3
 8022368:	68bb      	ldr	r3, [r7, #8]
 802236a:	440b      	add	r3, r1
 802236c:	3237      	adds	r2, #55	; 0x37
 802236e:	b2d2      	uxtb	r2, r2
 8022370:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8022372:	68fb      	ldr	r3, [r7, #12]
 8022374:	011b      	lsls	r3, r3, #4
 8022376:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8022378:	7dfb      	ldrb	r3, [r7, #23]
 802237a:	005b      	lsls	r3, r3, #1
 802237c:	3301      	adds	r3, #1
 802237e:	68ba      	ldr	r2, [r7, #8]
 8022380:	4413      	add	r3, r2
 8022382:	2200      	movs	r2, #0
 8022384:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8022386:	7dfb      	ldrb	r3, [r7, #23]
 8022388:	3301      	adds	r3, #1
 802238a:	75fb      	strb	r3, [r7, #23]
 802238c:	7dfa      	ldrb	r2, [r7, #23]
 802238e:	79fb      	ldrb	r3, [r7, #7]
 8022390:	429a      	cmp	r2, r3
 8022392:	d3d3      	bcc.n	802233c <IntToUnicode+0x18>
  }
}
 8022394:	bf00      	nop
 8022396:	bf00      	nop
 8022398:	371c      	adds	r7, #28
 802239a:	46bd      	mov	sp, r7
 802239c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80223a0:	4770      	bx	lr

080223a2 <STORAGE_Init_FS>:
  * @brief  Initializes over USB FS IP
  * @param  lun:
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_Init_FS(uint8_t lun)
{
 80223a2:	b480      	push	{r7}
 80223a4:	b083      	sub	sp, #12
 80223a6:	af00      	add	r7, sp, #0
 80223a8:	4603      	mov	r3, r0
 80223aa:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 2 */
  return (USBD_OK);
 80223ac:	2300      	movs	r3, #0
  /* USER CODE END 2 */
}
 80223ae:	4618      	mov	r0, r3
 80223b0:	370c      	adds	r7, #12
 80223b2:	46bd      	mov	sp, r7
 80223b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80223b8:	4770      	bx	lr

080223ba <STORAGE_GetCapacity_FS>:
  * @param  block_num: .
  * @param  block_size: .
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_GetCapacity_FS(uint8_t lun, uint32_t *block_num, uint16_t *block_size)
{
 80223ba:	b480      	push	{r7}
 80223bc:	b085      	sub	sp, #20
 80223be:	af00      	add	r7, sp, #0
 80223c0:	4603      	mov	r3, r0
 80223c2:	60b9      	str	r1, [r7, #8]
 80223c4:	607a      	str	r2, [r7, #4]
 80223c6:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 3 */
  *block_num  = STORAGE_BLK_NBR;
 80223c8:	68bb      	ldr	r3, [r7, #8]
 80223ca:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80223ce:	601a      	str	r2, [r3, #0]
  *block_size = STORAGE_BLK_SIZ;
 80223d0:	687b      	ldr	r3, [r7, #4]
 80223d2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80223d6:	801a      	strh	r2, [r3, #0]
  return (USBD_OK);
 80223d8:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 80223da:	4618      	mov	r0, r3
 80223dc:	3714      	adds	r7, #20
 80223de:	46bd      	mov	sp, r7
 80223e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80223e4:	4770      	bx	lr

080223e6 <STORAGE_IsReady_FS>:
  * @brief  .
  * @param  lun: .
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_IsReady_FS(uint8_t lun)
{
 80223e6:	b480      	push	{r7}
 80223e8:	b083      	sub	sp, #12
 80223ea:	af00      	add	r7, sp, #0
 80223ec:	4603      	mov	r3, r0
 80223ee:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 80223f0:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 80223f2:	4618      	mov	r0, r3
 80223f4:	370c      	adds	r7, #12
 80223f6:	46bd      	mov	sp, r7
 80223f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80223fc:	4770      	bx	lr

080223fe <STORAGE_IsWriteProtected_FS>:
  * @brief  .
  * @param  lun: .
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_IsWriteProtected_FS(uint8_t lun)
{
 80223fe:	b480      	push	{r7}
 8022400:	b083      	sub	sp, #12
 8022402:	af00      	add	r7, sp, #0
 8022404:	4603      	mov	r3, r0
 8022406:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 5 */
  return (USBD_OK);
 8022408:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 802240a:	4618      	mov	r0, r3
 802240c:	370c      	adds	r7, #12
 802240e:	46bd      	mov	sp, r7
 8022410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022414:	4770      	bx	lr

08022416 <STORAGE_Read_FS>:
  * @brief  .
  * @param  lun: .
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_Read_FS(uint8_t lun, uint8_t *buf, uint32_t blk_addr, uint16_t blk_len)
{
 8022416:	b580      	push	{r7, lr}
 8022418:	b084      	sub	sp, #16
 802241a:	af00      	add	r7, sp, #0
 802241c:	60b9      	str	r1, [r7, #8]
 802241e:	607a      	str	r2, [r7, #4]
 8022420:	461a      	mov	r2, r3
 8022422:	4603      	mov	r3, r0
 8022424:	73fb      	strb	r3, [r7, #15]
 8022426:	4613      	mov	r3, r2
 8022428:	81bb      	strh	r3, [r7, #12]
  /* USER CODE BEGIN 6 */
	ExtFlash_PageRD( (char *)buf, blk_addr*STORAGE_BLK_SIZ, blk_len);
 802242a:	687b      	ldr	r3, [r7, #4]
 802242c:	025b      	lsls	r3, r3, #9
 802242e:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8022432:	4619      	mov	r1, r3
 8022434:	68b8      	ldr	r0, [r7, #8]
 8022436:	f7ec fc05 	bl	800ec44 <ExtFlash_PageRD>
  return (USBD_OK);
 802243a:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 802243c:	4618      	mov	r0, r3
 802243e:	3710      	adds	r7, #16
 8022440:	46bd      	mov	sp, r7
 8022442:	bd80      	pop	{r7, pc}

08022444 <STORAGE_Write_FS>:
  * @brief  .
  * @param  lun: .
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_Write_FS(uint8_t lun, uint8_t *buf, uint32_t blk_addr, uint16_t blk_len)
{
 8022444:	b580      	push	{r7, lr}
 8022446:	b084      	sub	sp, #16
 8022448:	af00      	add	r7, sp, #0
 802244a:	60b9      	str	r1, [r7, #8]
 802244c:	607a      	str	r2, [r7, #4]
 802244e:	461a      	mov	r2, r3
 8022450:	4603      	mov	r3, r0
 8022452:	73fb      	strb	r3, [r7, #15]
 8022454:	4613      	mov	r3, r2
 8022456:	81bb      	strh	r3, [r7, #12]
  /* USER CODE BEGIN 7 */
	ExtFlash_PageWR( (char *)buf, blk_addr*STORAGE_BLK_SIZ);
 8022458:	687b      	ldr	r3, [r7, #4]
 802245a:	025b      	lsls	r3, r3, #9
 802245c:	4619      	mov	r1, r3
 802245e:	68b8      	ldr	r0, [r7, #8]
 8022460:	f7ec fcc8 	bl	800edf4 <ExtFlash_PageWR>
	return (USBD_OK);
 8022464:	2300      	movs	r3, #0
  /* USER CODE END 7 */
}
 8022466:	4618      	mov	r0, r3
 8022468:	3710      	adds	r7, #16
 802246a:	46bd      	mov	sp, r7
 802246c:	bd80      	pop	{r7, pc}

0802246e <STORAGE_GetMaxLun_FS>:
  * @brief  .
  * @param  None
  * @retval .
  */
int8_t STORAGE_GetMaxLun_FS(void)
{
 802246e:	b480      	push	{r7}
 8022470:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 8 */
  return (STORAGE_LUN_NBR - 1);
 8022472:	2300      	movs	r3, #0
  /* USER CODE END 8 */
}
 8022474:	4618      	mov	r0, r3
 8022476:	46bd      	mov	sp, r7
 8022478:	f85d 7b04 	ldr.w	r7, [sp], #4
 802247c:	4770      	bx	lr
	...

08022480 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8022480:	b580      	push	{r7, lr}
 8022482:	b0a0      	sub	sp, #128	; 0x80
 8022484:	af00      	add	r7, sp, #0
 8022486:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8022488:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 802248c:	2200      	movs	r2, #0
 802248e:	601a      	str	r2, [r3, #0]
 8022490:	605a      	str	r2, [r3, #4]
 8022492:	609a      	str	r2, [r3, #8]
 8022494:	60da      	str	r2, [r3, #12]
 8022496:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8022498:	f107 0310 	add.w	r3, r7, #16
 802249c:	225c      	movs	r2, #92	; 0x5c
 802249e:	2100      	movs	r1, #0
 80224a0:	4618      	mov	r0, r3
 80224a2:	f000 fbd9 	bl	8022c58 <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 80224a6:	687b      	ldr	r3, [r7, #4]
 80224a8:	681b      	ldr	r3, [r3, #0]
 80224aa:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80224ae:	d154      	bne.n	802255a <HAL_PCD_MspInit+0xda>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 80224b0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80224b4:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.PLLSAI.PLLSAIM = 25;
 80224b6:	2319      	movs	r3, #25
 80224b8:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.PLLSAI.PLLSAIN = 192;
 80224ba:	23c0      	movs	r3, #192	; 0xc0
 80224bc:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInitStruct.PLLSAI.PLLSAIQ = 2;
 80224be:	2302      	movs	r3, #2
 80224c0:	637b      	str	r3, [r7, #52]	; 0x34
    PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV4;
 80224c2:	2304      	movs	r3, #4
 80224c4:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInitStruct.PLLSAIDivQ = 1;
 80224c6:	2301      	movs	r3, #1
 80224c8:	63fb      	str	r3, [r7, #60]	; 0x3c
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48CLKSOURCE_PLLSAIP;
 80224ca:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80224ce:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80224d0:	f107 0310 	add.w	r3, r7, #16
 80224d4:	4618      	mov	r0, r3
 80224d6:	f7f8 fec1 	bl	801b25c <HAL_RCCEx_PeriphCLKConfig>
 80224da:	4603      	mov	r3, r0
 80224dc:	2b00      	cmp	r3, #0
 80224de:	d001      	beq.n	80224e4 <HAL_PCD_MspInit+0x64>
    {
      Error_Handler();
 80224e0:	f7f5 fbb4 	bl	8017c4c <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80224e4:	2300      	movs	r3, #0
 80224e6:	60fb      	str	r3, [r7, #12]
 80224e8:	4b1e      	ldr	r3, [pc, #120]	; (8022564 <HAL_PCD_MspInit+0xe4>)
 80224ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80224ec:	4a1d      	ldr	r2, [pc, #116]	; (8022564 <HAL_PCD_MspInit+0xe4>)
 80224ee:	f043 0301 	orr.w	r3, r3, #1
 80224f2:	6313      	str	r3, [r2, #48]	; 0x30
 80224f4:	4b1b      	ldr	r3, [pc, #108]	; (8022564 <HAL_PCD_MspInit+0xe4>)
 80224f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80224f8:	f003 0301 	and.w	r3, r3, #1
 80224fc:	60fb      	str	r3, [r7, #12]
 80224fe:	68fb      	ldr	r3, [r7, #12]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = D__Pin|D_A12_Pin;
 8022500:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8022504:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8022506:	2302      	movs	r3, #2
 8022508:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 802250a:	2300      	movs	r3, #0
 802250c:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 802250e:	2303      	movs	r3, #3
 8022510:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8022512:	230a      	movs	r3, #10
 8022514:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8022516:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 802251a:	4619      	mov	r1, r3
 802251c:	4812      	ldr	r0, [pc, #72]	; (8022568 <HAL_PCD_MspInit+0xe8>)
 802251e:	f7f7 f999 	bl	8019854 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8022522:	4b10      	ldr	r3, [pc, #64]	; (8022564 <HAL_PCD_MspInit+0xe4>)
 8022524:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8022526:	4a0f      	ldr	r2, [pc, #60]	; (8022564 <HAL_PCD_MspInit+0xe4>)
 8022528:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 802252c:	6353      	str	r3, [r2, #52]	; 0x34
 802252e:	2300      	movs	r3, #0
 8022530:	60bb      	str	r3, [r7, #8]
 8022532:	4b0c      	ldr	r3, [pc, #48]	; (8022564 <HAL_PCD_MspInit+0xe4>)
 8022534:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8022536:	4a0b      	ldr	r2, [pc, #44]	; (8022564 <HAL_PCD_MspInit+0xe4>)
 8022538:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 802253c:	6453      	str	r3, [r2, #68]	; 0x44
 802253e:	4b09      	ldr	r3, [pc, #36]	; (8022564 <HAL_PCD_MspInit+0xe4>)
 8022540:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8022542:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8022546:	60bb      	str	r3, [r7, #8]
 8022548:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 802254a:	2200      	movs	r2, #0
 802254c:	2100      	movs	r1, #0
 802254e:	2043      	movs	r0, #67	; 0x43
 8022550:	f7f6 fabf 	bl	8018ad2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8022554:	2043      	movs	r0, #67	; 0x43
 8022556:	f7f6 fad8 	bl	8018b0a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 802255a:	bf00      	nop
 802255c:	3780      	adds	r7, #128	; 0x80
 802255e:	46bd      	mov	sp, r7
 8022560:	bd80      	pop	{r7, pc}
 8022562:	bf00      	nop
 8022564:	40023800 	.word	0x40023800
 8022568:	40020000 	.word	0x40020000

0802256c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 802256c:	b580      	push	{r7, lr}
 802256e:	b082      	sub	sp, #8
 8022570:	af00      	add	r7, sp, #0
 8022572:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8022574:	687b      	ldr	r3, [r7, #4]
 8022576:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 802257a:	687b      	ldr	r3, [r7, #4]
 802257c:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8022580:	4619      	mov	r1, r3
 8022582:	4610      	mov	r0, r2
 8022584:	f7fe fce9 	bl	8020f5a <USBD_LL_SetupStage>
}
 8022588:	bf00      	nop
 802258a:	3708      	adds	r7, #8
 802258c:	46bd      	mov	sp, r7
 802258e:	bd80      	pop	{r7, pc}

08022590 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8022590:	b580      	push	{r7, lr}
 8022592:	b082      	sub	sp, #8
 8022594:	af00      	add	r7, sp, #0
 8022596:	6078      	str	r0, [r7, #4]
 8022598:	460b      	mov	r3, r1
 802259a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 802259c:	687b      	ldr	r3, [r7, #4]
 802259e:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 80225a2:	78fa      	ldrb	r2, [r7, #3]
 80225a4:	6879      	ldr	r1, [r7, #4]
 80225a6:	4613      	mov	r3, r2
 80225a8:	00db      	lsls	r3, r3, #3
 80225aa:	1a9b      	subs	r3, r3, r2
 80225ac:	009b      	lsls	r3, r3, #2
 80225ae:	440b      	add	r3, r1
 80225b0:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80225b4:	681a      	ldr	r2, [r3, #0]
 80225b6:	78fb      	ldrb	r3, [r7, #3]
 80225b8:	4619      	mov	r1, r3
 80225ba:	f7fe fd23 	bl	8021004 <USBD_LL_DataOutStage>
}
 80225be:	bf00      	nop
 80225c0:	3708      	adds	r7, #8
 80225c2:	46bd      	mov	sp, r7
 80225c4:	bd80      	pop	{r7, pc}

080225c6 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80225c6:	b580      	push	{r7, lr}
 80225c8:	b082      	sub	sp, #8
 80225ca:	af00      	add	r7, sp, #0
 80225cc:	6078      	str	r0, [r7, #4]
 80225ce:	460b      	mov	r3, r1
 80225d0:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80225d2:	687b      	ldr	r3, [r7, #4]
 80225d4:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 80225d8:	78fa      	ldrb	r2, [r7, #3]
 80225da:	6879      	ldr	r1, [r7, #4]
 80225dc:	4613      	mov	r3, r2
 80225de:	00db      	lsls	r3, r3, #3
 80225e0:	1a9b      	subs	r3, r3, r2
 80225e2:	009b      	lsls	r3, r3, #2
 80225e4:	440b      	add	r3, r1
 80225e6:	3348      	adds	r3, #72	; 0x48
 80225e8:	681a      	ldr	r2, [r3, #0]
 80225ea:	78fb      	ldrb	r3, [r7, #3]
 80225ec:	4619      	mov	r1, r3
 80225ee:	f7fe fd6c 	bl	80210ca <USBD_LL_DataInStage>
}
 80225f2:	bf00      	nop
 80225f4:	3708      	adds	r7, #8
 80225f6:	46bd      	mov	sp, r7
 80225f8:	bd80      	pop	{r7, pc}

080225fa <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80225fa:	b580      	push	{r7, lr}
 80225fc:	b082      	sub	sp, #8
 80225fe:	af00      	add	r7, sp, #0
 8022600:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8022602:	687b      	ldr	r3, [r7, #4]
 8022604:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8022608:	4618      	mov	r0, r3
 802260a:	f7fe fe80 	bl	802130e <USBD_LL_SOF>
}
 802260e:	bf00      	nop
 8022610:	3708      	adds	r7, #8
 8022612:	46bd      	mov	sp, r7
 8022614:	bd80      	pop	{r7, pc}

08022616 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8022616:	b580      	push	{r7, lr}
 8022618:	b084      	sub	sp, #16
 802261a:	af00      	add	r7, sp, #0
 802261c:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 802261e:	2301      	movs	r3, #1
 8022620:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8022622:	687b      	ldr	r3, [r7, #4]
 8022624:	68db      	ldr	r3, [r3, #12]
 8022626:	2b00      	cmp	r3, #0
 8022628:	d102      	bne.n	8022630 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 802262a:	2300      	movs	r3, #0
 802262c:	73fb      	strb	r3, [r7, #15]
 802262e:	e008      	b.n	8022642 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8022630:	687b      	ldr	r3, [r7, #4]
 8022632:	68db      	ldr	r3, [r3, #12]
 8022634:	2b02      	cmp	r3, #2
 8022636:	d102      	bne.n	802263e <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8022638:	2301      	movs	r3, #1
 802263a:	73fb      	strb	r3, [r7, #15]
 802263c:	e001      	b.n	8022642 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 802263e:	f7f5 fb05 	bl	8017c4c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8022642:	687b      	ldr	r3, [r7, #4]
 8022644:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8022648:	7bfa      	ldrb	r2, [r7, #15]
 802264a:	4611      	mov	r1, r2
 802264c:	4618      	mov	r0, r3
 802264e:	f7fe fe20 	bl	8021292 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8022652:	687b      	ldr	r3, [r7, #4]
 8022654:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8022658:	4618      	mov	r0, r3
 802265a:	f7fe fdcc 	bl	80211f6 <USBD_LL_Reset>
}
 802265e:	bf00      	nop
 8022660:	3710      	adds	r7, #16
 8022662:	46bd      	mov	sp, r7
 8022664:	bd80      	pop	{r7, pc}
	...

08022668 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8022668:	b580      	push	{r7, lr}
 802266a:	b082      	sub	sp, #8
 802266c:	af00      	add	r7, sp, #0
 802266e:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8022670:	687b      	ldr	r3, [r7, #4]
 8022672:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8022676:	4618      	mov	r0, r3
 8022678:	f7fe fe1b 	bl	80212b2 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 802267c:	687b      	ldr	r3, [r7, #4]
 802267e:	681b      	ldr	r3, [r3, #0]
 8022680:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8022684:	681b      	ldr	r3, [r3, #0]
 8022686:	687a      	ldr	r2, [r7, #4]
 8022688:	6812      	ldr	r2, [r2, #0]
 802268a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 802268e:	f043 0301 	orr.w	r3, r3, #1
 8022692:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8022694:	687b      	ldr	r3, [r7, #4]
 8022696:	6a1b      	ldr	r3, [r3, #32]
 8022698:	2b00      	cmp	r3, #0
 802269a:	d005      	beq.n	80226a8 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 802269c:	4b04      	ldr	r3, [pc, #16]	; (80226b0 <HAL_PCD_SuspendCallback+0x48>)
 802269e:	691b      	ldr	r3, [r3, #16]
 80226a0:	4a03      	ldr	r2, [pc, #12]	; (80226b0 <HAL_PCD_SuspendCallback+0x48>)
 80226a2:	f043 0306 	orr.w	r3, r3, #6
 80226a6:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 80226a8:	bf00      	nop
 80226aa:	3708      	adds	r7, #8
 80226ac:	46bd      	mov	sp, r7
 80226ae:	bd80      	pop	{r7, pc}
 80226b0:	e000ed00 	.word	0xe000ed00

080226b4 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80226b4:	b580      	push	{r7, lr}
 80226b6:	b082      	sub	sp, #8
 80226b8:	af00      	add	r7, sp, #0
 80226ba:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80226bc:	687b      	ldr	r3, [r7, #4]
 80226be:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80226c2:	4618      	mov	r0, r3
 80226c4:	f7fe fe0b 	bl	80212de <USBD_LL_Resume>
}
 80226c8:	bf00      	nop
 80226ca:	3708      	adds	r7, #8
 80226cc:	46bd      	mov	sp, r7
 80226ce:	bd80      	pop	{r7, pc}

080226d0 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80226d0:	b580      	push	{r7, lr}
 80226d2:	b082      	sub	sp, #8
 80226d4:	af00      	add	r7, sp, #0
 80226d6:	6078      	str	r0, [r7, #4]
 80226d8:	460b      	mov	r3, r1
 80226da:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80226dc:	687b      	ldr	r3, [r7, #4]
 80226de:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80226e2:	78fa      	ldrb	r2, [r7, #3]
 80226e4:	4611      	mov	r1, r2
 80226e6:	4618      	mov	r0, r3
 80226e8:	f7fe fe59 	bl	802139e <USBD_LL_IsoOUTIncomplete>
}
 80226ec:	bf00      	nop
 80226ee:	3708      	adds	r7, #8
 80226f0:	46bd      	mov	sp, r7
 80226f2:	bd80      	pop	{r7, pc}

080226f4 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80226f4:	b580      	push	{r7, lr}
 80226f6:	b082      	sub	sp, #8
 80226f8:	af00      	add	r7, sp, #0
 80226fa:	6078      	str	r0, [r7, #4]
 80226fc:	460b      	mov	r3, r1
 80226fe:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8022700:	687b      	ldr	r3, [r7, #4]
 8022702:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8022706:	78fa      	ldrb	r2, [r7, #3]
 8022708:	4611      	mov	r1, r2
 802270a:	4618      	mov	r0, r3
 802270c:	f7fe fe21 	bl	8021352 <USBD_LL_IsoINIncomplete>
}
 8022710:	bf00      	nop
 8022712:	3708      	adds	r7, #8
 8022714:	46bd      	mov	sp, r7
 8022716:	bd80      	pop	{r7, pc}

08022718 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8022718:	b580      	push	{r7, lr}
 802271a:	b082      	sub	sp, #8
 802271c:	af00      	add	r7, sp, #0
 802271e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8022720:	687b      	ldr	r3, [r7, #4]
 8022722:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8022726:	4618      	mov	r0, r3
 8022728:	f7fe fe5f 	bl	80213ea <USBD_LL_DevConnected>
}
 802272c:	bf00      	nop
 802272e:	3708      	adds	r7, #8
 8022730:	46bd      	mov	sp, r7
 8022732:	bd80      	pop	{r7, pc}

08022734 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8022734:	b580      	push	{r7, lr}
 8022736:	b082      	sub	sp, #8
 8022738:	af00      	add	r7, sp, #0
 802273a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 802273c:	687b      	ldr	r3, [r7, #4]
 802273e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8022742:	4618      	mov	r0, r3
 8022744:	f7fe fe5c 	bl	8021400 <USBD_LL_DevDisconnected>
}
 8022748:	bf00      	nop
 802274a:	3708      	adds	r7, #8
 802274c:	46bd      	mov	sp, r7
 802274e:	bd80      	pop	{r7, pc}

08022750 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8022750:	b580      	push	{r7, lr}
 8022752:	b082      	sub	sp, #8
 8022754:	af00      	add	r7, sp, #0
 8022756:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8022758:	687b      	ldr	r3, [r7, #4]
 802275a:	781b      	ldrb	r3, [r3, #0]
 802275c:	2b00      	cmp	r3, #0
 802275e:	d13c      	bne.n	80227da <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8022760:	4a20      	ldr	r2, [pc, #128]	; (80227e4 <USBD_LL_Init+0x94>)
 8022762:	687b      	ldr	r3, [r7, #4]
 8022764:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 8022768:	687b      	ldr	r3, [r7, #4]
 802276a:	4a1e      	ldr	r2, [pc, #120]	; (80227e4 <USBD_LL_Init+0x94>)
 802276c:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8022770:	4b1c      	ldr	r3, [pc, #112]	; (80227e4 <USBD_LL_Init+0x94>)
 8022772:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8022776:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8022778:	4b1a      	ldr	r3, [pc, #104]	; (80227e4 <USBD_LL_Init+0x94>)
 802277a:	2206      	movs	r2, #6
 802277c:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 802277e:	4b19      	ldr	r3, [pc, #100]	; (80227e4 <USBD_LL_Init+0x94>)
 8022780:	2202      	movs	r2, #2
 8022782:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8022784:	4b17      	ldr	r3, [pc, #92]	; (80227e4 <USBD_LL_Init+0x94>)
 8022786:	2200      	movs	r2, #0
 8022788:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 802278a:	4b16      	ldr	r3, [pc, #88]	; (80227e4 <USBD_LL_Init+0x94>)
 802278c:	2202      	movs	r2, #2
 802278e:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8022790:	4b14      	ldr	r3, [pc, #80]	; (80227e4 <USBD_LL_Init+0x94>)
 8022792:	2200      	movs	r2, #0
 8022794:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8022796:	4b13      	ldr	r3, [pc, #76]	; (80227e4 <USBD_LL_Init+0x94>)
 8022798:	2200      	movs	r2, #0
 802279a:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 802279c:	4b11      	ldr	r3, [pc, #68]	; (80227e4 <USBD_LL_Init+0x94>)
 802279e:	2200      	movs	r2, #0
 80227a0:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 80227a2:	4b10      	ldr	r3, [pc, #64]	; (80227e4 <USBD_LL_Init+0x94>)
 80227a4:	2200      	movs	r2, #0
 80227a6:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80227a8:	4b0e      	ldr	r3, [pc, #56]	; (80227e4 <USBD_LL_Init+0x94>)
 80227aa:	2200      	movs	r2, #0
 80227ac:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80227ae:	480d      	ldr	r0, [pc, #52]	; (80227e4 <USBD_LL_Init+0x94>)
 80227b0:	f7f7 fa15 	bl	8019bde <HAL_PCD_Init>
 80227b4:	4603      	mov	r3, r0
 80227b6:	2b00      	cmp	r3, #0
 80227b8:	d001      	beq.n	80227be <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 80227ba:	f7f5 fa47 	bl	8017c4c <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 80227be:	2180      	movs	r1, #128	; 0x80
 80227c0:	4808      	ldr	r0, [pc, #32]	; (80227e4 <USBD_LL_Init+0x94>)
 80227c2:	f7f8 fbd4 	bl	801af6e <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 80227c6:	2240      	movs	r2, #64	; 0x40
 80227c8:	2100      	movs	r1, #0
 80227ca:	4806      	ldr	r0, [pc, #24]	; (80227e4 <USBD_LL_Init+0x94>)
 80227cc:	f7f8 fb88 	bl	801aee0 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 80227d0:	2280      	movs	r2, #128	; 0x80
 80227d2:	2101      	movs	r1, #1
 80227d4:	4803      	ldr	r0, [pc, #12]	; (80227e4 <USBD_LL_Init+0x94>)
 80227d6:	f7f8 fb83 	bl	801aee0 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 80227da:	2300      	movs	r3, #0
}
 80227dc:	4618      	mov	r0, r3
 80227de:	3708      	adds	r7, #8
 80227e0:	46bd      	mov	sp, r7
 80227e2:	bd80      	pop	{r7, pc}
 80227e4:	2000716c 	.word	0x2000716c

080227e8 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 80227e8:	b580      	push	{r7, lr}
 80227ea:	b084      	sub	sp, #16
 80227ec:	af00      	add	r7, sp, #0
 80227ee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80227f0:	2300      	movs	r3, #0
 80227f2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80227f4:	2300      	movs	r3, #0
 80227f6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 80227f8:	687b      	ldr	r3, [r7, #4]
 80227fa:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80227fe:	4618      	mov	r0, r3
 8022800:	f7f7 fb11 	bl	8019e26 <HAL_PCD_Start>
 8022804:	4603      	mov	r3, r0
 8022806:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8022808:	7bfb      	ldrb	r3, [r7, #15]
 802280a:	4618      	mov	r0, r3
 802280c:	f000 f9b0 	bl	8022b70 <USBD_Get_USB_Status>
 8022810:	4603      	mov	r3, r0
 8022812:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8022814:	7bbb      	ldrb	r3, [r7, #14]
}
 8022816:	4618      	mov	r0, r3
 8022818:	3710      	adds	r7, #16
 802281a:	46bd      	mov	sp, r7
 802281c:	bd80      	pop	{r7, pc}

0802281e <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 802281e:	b580      	push	{r7, lr}
 8022820:	b084      	sub	sp, #16
 8022822:	af00      	add	r7, sp, #0
 8022824:	6078      	str	r0, [r7, #4]
 8022826:	4608      	mov	r0, r1
 8022828:	4611      	mov	r1, r2
 802282a:	461a      	mov	r2, r3
 802282c:	4603      	mov	r3, r0
 802282e:	70fb      	strb	r3, [r7, #3]
 8022830:	460b      	mov	r3, r1
 8022832:	70bb      	strb	r3, [r7, #2]
 8022834:	4613      	mov	r3, r2
 8022836:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8022838:	2300      	movs	r3, #0
 802283a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 802283c:	2300      	movs	r3, #0
 802283e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8022840:	687b      	ldr	r3, [r7, #4]
 8022842:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8022846:	78bb      	ldrb	r3, [r7, #2]
 8022848:	883a      	ldrh	r2, [r7, #0]
 802284a:	78f9      	ldrb	r1, [r7, #3]
 802284c:	f7f7 ff22 	bl	801a694 <HAL_PCD_EP_Open>
 8022850:	4603      	mov	r3, r0
 8022852:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8022854:	7bfb      	ldrb	r3, [r7, #15]
 8022856:	4618      	mov	r0, r3
 8022858:	f000 f98a 	bl	8022b70 <USBD_Get_USB_Status>
 802285c:	4603      	mov	r3, r0
 802285e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8022860:	7bbb      	ldrb	r3, [r7, #14]
}
 8022862:	4618      	mov	r0, r3
 8022864:	3710      	adds	r7, #16
 8022866:	46bd      	mov	sp, r7
 8022868:	bd80      	pop	{r7, pc}

0802286a <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 802286a:	b580      	push	{r7, lr}
 802286c:	b084      	sub	sp, #16
 802286e:	af00      	add	r7, sp, #0
 8022870:	6078      	str	r0, [r7, #4]
 8022872:	460b      	mov	r3, r1
 8022874:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8022876:	2300      	movs	r3, #0
 8022878:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 802287a:	2300      	movs	r3, #0
 802287c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 802287e:	687b      	ldr	r3, [r7, #4]
 8022880:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8022884:	78fa      	ldrb	r2, [r7, #3]
 8022886:	4611      	mov	r1, r2
 8022888:	4618      	mov	r0, r3
 802288a:	f7f7 ff6b 	bl	801a764 <HAL_PCD_EP_Close>
 802288e:	4603      	mov	r3, r0
 8022890:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8022892:	7bfb      	ldrb	r3, [r7, #15]
 8022894:	4618      	mov	r0, r3
 8022896:	f000 f96b 	bl	8022b70 <USBD_Get_USB_Status>
 802289a:	4603      	mov	r3, r0
 802289c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 802289e:	7bbb      	ldrb	r3, [r7, #14]
}
 80228a0:	4618      	mov	r0, r3
 80228a2:	3710      	adds	r7, #16
 80228a4:	46bd      	mov	sp, r7
 80228a6:	bd80      	pop	{r7, pc}

080228a8 <USBD_LL_FlushEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_FlushEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80228a8:	b580      	push	{r7, lr}
 80228aa:	b084      	sub	sp, #16
 80228ac:	af00      	add	r7, sp, #0
 80228ae:	6078      	str	r0, [r7, #4]
 80228b0:	460b      	mov	r3, r1
 80228b2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80228b4:	2300      	movs	r3, #0
 80228b6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80228b8:	2300      	movs	r3, #0
 80228ba:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Flush(pdev->pData, ep_addr);
 80228bc:	687b      	ldr	r3, [r7, #4]
 80228be:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80228c2:	78fa      	ldrb	r2, [r7, #3]
 80228c4:	4611      	mov	r1, r2
 80228c6:	4618      	mov	r0, r3
 80228c8:	f7f8 f8fd 	bl	801aac6 <HAL_PCD_EP_Flush>
 80228cc:	4603      	mov	r3, r0
 80228ce:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80228d0:	7bfb      	ldrb	r3, [r7, #15]
 80228d2:	4618      	mov	r0, r3
 80228d4:	f000 f94c 	bl	8022b70 <USBD_Get_USB_Status>
 80228d8:	4603      	mov	r3, r0
 80228da:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80228dc:	7bbb      	ldrb	r3, [r7, #14]
}
 80228de:	4618      	mov	r0, r3
 80228e0:	3710      	adds	r7, #16
 80228e2:	46bd      	mov	sp, r7
 80228e4:	bd80      	pop	{r7, pc}

080228e6 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80228e6:	b580      	push	{r7, lr}
 80228e8:	b084      	sub	sp, #16
 80228ea:	af00      	add	r7, sp, #0
 80228ec:	6078      	str	r0, [r7, #4]
 80228ee:	460b      	mov	r3, r1
 80228f0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80228f2:	2300      	movs	r3, #0
 80228f4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80228f6:	2300      	movs	r3, #0
 80228f8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80228fa:	687b      	ldr	r3, [r7, #4]
 80228fc:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8022900:	78fa      	ldrb	r2, [r7, #3]
 8022902:	4611      	mov	r1, r2
 8022904:	4618      	mov	r0, r3
 8022906:	f7f8 f824 	bl	801a952 <HAL_PCD_EP_SetStall>
 802290a:	4603      	mov	r3, r0
 802290c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 802290e:	7bfb      	ldrb	r3, [r7, #15]
 8022910:	4618      	mov	r0, r3
 8022912:	f000 f92d 	bl	8022b70 <USBD_Get_USB_Status>
 8022916:	4603      	mov	r3, r0
 8022918:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 802291a:	7bbb      	ldrb	r3, [r7, #14]
}
 802291c:	4618      	mov	r0, r3
 802291e:	3710      	adds	r7, #16
 8022920:	46bd      	mov	sp, r7
 8022922:	bd80      	pop	{r7, pc}

08022924 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8022924:	b580      	push	{r7, lr}
 8022926:	b084      	sub	sp, #16
 8022928:	af00      	add	r7, sp, #0
 802292a:	6078      	str	r0, [r7, #4]
 802292c:	460b      	mov	r3, r1
 802292e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8022930:	2300      	movs	r3, #0
 8022932:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8022934:	2300      	movs	r3, #0
 8022936:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8022938:	687b      	ldr	r3, [r7, #4]
 802293a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 802293e:	78fa      	ldrb	r2, [r7, #3]
 8022940:	4611      	mov	r1, r2
 8022942:	4618      	mov	r0, r3
 8022944:	f7f8 f869 	bl	801aa1a <HAL_PCD_EP_ClrStall>
 8022948:	4603      	mov	r3, r0
 802294a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 802294c:	7bfb      	ldrb	r3, [r7, #15]
 802294e:	4618      	mov	r0, r3
 8022950:	f000 f90e 	bl	8022b70 <USBD_Get_USB_Status>
 8022954:	4603      	mov	r3, r0
 8022956:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8022958:	7bbb      	ldrb	r3, [r7, #14]
}
 802295a:	4618      	mov	r0, r3
 802295c:	3710      	adds	r7, #16
 802295e:	46bd      	mov	sp, r7
 8022960:	bd80      	pop	{r7, pc}

08022962 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8022962:	b480      	push	{r7}
 8022964:	b085      	sub	sp, #20
 8022966:	af00      	add	r7, sp, #0
 8022968:	6078      	str	r0, [r7, #4]
 802296a:	460b      	mov	r3, r1
 802296c:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 802296e:	687b      	ldr	r3, [r7, #4]
 8022970:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8022974:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8022976:	f997 3003 	ldrsb.w	r3, [r7, #3]
 802297a:	2b00      	cmp	r3, #0
 802297c:	da0b      	bge.n	8022996 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 802297e:	78fb      	ldrb	r3, [r7, #3]
 8022980:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8022984:	68f9      	ldr	r1, [r7, #12]
 8022986:	4613      	mov	r3, r2
 8022988:	00db      	lsls	r3, r3, #3
 802298a:	1a9b      	subs	r3, r3, r2
 802298c:	009b      	lsls	r3, r3, #2
 802298e:	440b      	add	r3, r1
 8022990:	333e      	adds	r3, #62	; 0x3e
 8022992:	781b      	ldrb	r3, [r3, #0]
 8022994:	e00b      	b.n	80229ae <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8022996:	78fb      	ldrb	r3, [r7, #3]
 8022998:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 802299c:	68f9      	ldr	r1, [r7, #12]
 802299e:	4613      	mov	r3, r2
 80229a0:	00db      	lsls	r3, r3, #3
 80229a2:	1a9b      	subs	r3, r3, r2
 80229a4:	009b      	lsls	r3, r3, #2
 80229a6:	440b      	add	r3, r1
 80229a8:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80229ac:	781b      	ldrb	r3, [r3, #0]
  }
}
 80229ae:	4618      	mov	r0, r3
 80229b0:	3714      	adds	r7, #20
 80229b2:	46bd      	mov	sp, r7
 80229b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80229b8:	4770      	bx	lr

080229ba <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 80229ba:	b580      	push	{r7, lr}
 80229bc:	b084      	sub	sp, #16
 80229be:	af00      	add	r7, sp, #0
 80229c0:	6078      	str	r0, [r7, #4]
 80229c2:	460b      	mov	r3, r1
 80229c4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80229c6:	2300      	movs	r3, #0
 80229c8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80229ca:	2300      	movs	r3, #0
 80229cc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80229ce:	687b      	ldr	r3, [r7, #4]
 80229d0:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80229d4:	78fa      	ldrb	r2, [r7, #3]
 80229d6:	4611      	mov	r1, r2
 80229d8:	4618      	mov	r0, r3
 80229da:	f7f7 fe36 	bl	801a64a <HAL_PCD_SetAddress>
 80229de:	4603      	mov	r3, r0
 80229e0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80229e2:	7bfb      	ldrb	r3, [r7, #15]
 80229e4:	4618      	mov	r0, r3
 80229e6:	f000 f8c3 	bl	8022b70 <USBD_Get_USB_Status>
 80229ea:	4603      	mov	r3, r0
 80229ec:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80229ee:	7bbb      	ldrb	r3, [r7, #14]
}
 80229f0:	4618      	mov	r0, r3
 80229f2:	3710      	adds	r7, #16
 80229f4:	46bd      	mov	sp, r7
 80229f6:	bd80      	pop	{r7, pc}

080229f8 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80229f8:	b580      	push	{r7, lr}
 80229fa:	b086      	sub	sp, #24
 80229fc:	af00      	add	r7, sp, #0
 80229fe:	60f8      	str	r0, [r7, #12]
 8022a00:	607a      	str	r2, [r7, #4]
 8022a02:	603b      	str	r3, [r7, #0]
 8022a04:	460b      	mov	r3, r1
 8022a06:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8022a08:	2300      	movs	r3, #0
 8022a0a:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8022a0c:	2300      	movs	r3, #0
 8022a0e:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8022a10:	68fb      	ldr	r3, [r7, #12]
 8022a12:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8022a16:	7af9      	ldrb	r1, [r7, #11]
 8022a18:	683b      	ldr	r3, [r7, #0]
 8022a1a:	687a      	ldr	r2, [r7, #4]
 8022a1c:	f7f7 ff4f 	bl	801a8be <HAL_PCD_EP_Transmit>
 8022a20:	4603      	mov	r3, r0
 8022a22:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8022a24:	7dfb      	ldrb	r3, [r7, #23]
 8022a26:	4618      	mov	r0, r3
 8022a28:	f000 f8a2 	bl	8022b70 <USBD_Get_USB_Status>
 8022a2c:	4603      	mov	r3, r0
 8022a2e:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8022a30:	7dbb      	ldrb	r3, [r7, #22]
}
 8022a32:	4618      	mov	r0, r3
 8022a34:	3718      	adds	r7, #24
 8022a36:	46bd      	mov	sp, r7
 8022a38:	bd80      	pop	{r7, pc}

08022a3a <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8022a3a:	b580      	push	{r7, lr}
 8022a3c:	b086      	sub	sp, #24
 8022a3e:	af00      	add	r7, sp, #0
 8022a40:	60f8      	str	r0, [r7, #12]
 8022a42:	607a      	str	r2, [r7, #4]
 8022a44:	603b      	str	r3, [r7, #0]
 8022a46:	460b      	mov	r3, r1
 8022a48:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8022a4a:	2300      	movs	r3, #0
 8022a4c:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8022a4e:	2300      	movs	r3, #0
 8022a50:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8022a52:	68fb      	ldr	r3, [r7, #12]
 8022a54:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8022a58:	7af9      	ldrb	r1, [r7, #11]
 8022a5a:	683b      	ldr	r3, [r7, #0]
 8022a5c:	687a      	ldr	r2, [r7, #4]
 8022a5e:	f7f7 fecb 	bl	801a7f8 <HAL_PCD_EP_Receive>
 8022a62:	4603      	mov	r3, r0
 8022a64:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8022a66:	7dfb      	ldrb	r3, [r7, #23]
 8022a68:	4618      	mov	r0, r3
 8022a6a:	f000 f881 	bl	8022b70 <USBD_Get_USB_Status>
 8022a6e:	4603      	mov	r3, r0
 8022a70:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8022a72:	7dbb      	ldrb	r3, [r7, #22]
}
 8022a74:	4618      	mov	r0, r3
 8022a76:	3718      	adds	r7, #24
 8022a78:	46bd      	mov	sp, r7
 8022a7a:	bd80      	pop	{r7, pc}

08022a7c <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8022a7c:	b580      	push	{r7, lr}
 8022a7e:	b082      	sub	sp, #8
 8022a80:	af00      	add	r7, sp, #0
 8022a82:	6078      	str	r0, [r7, #4]
 8022a84:	460b      	mov	r3, r1
 8022a86:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8022a88:	687b      	ldr	r3, [r7, #4]
 8022a8a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8022a8e:	78fa      	ldrb	r2, [r7, #3]
 8022a90:	4611      	mov	r1, r2
 8022a92:	4618      	mov	r0, r3
 8022a94:	f7f7 fefb 	bl	801a88e <HAL_PCD_EP_GetRxCount>
 8022a98:	4603      	mov	r3, r0
}
 8022a9a:	4618      	mov	r0, r3
 8022a9c:	3708      	adds	r7, #8
 8022a9e:	46bd      	mov	sp, r7
 8022aa0:	bd80      	pop	{r7, pc}
	...

08022aa4 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8022aa4:	b580      	push	{r7, lr}
 8022aa6:	b082      	sub	sp, #8
 8022aa8:	af00      	add	r7, sp, #0
 8022aaa:	6078      	str	r0, [r7, #4]
 8022aac:	460b      	mov	r3, r1
 8022aae:	70fb      	strb	r3, [r7, #3]
  switch (msg)
 8022ab0:	78fb      	ldrb	r3, [r7, #3]
 8022ab2:	2b00      	cmp	r3, #0
 8022ab4:	d002      	beq.n	8022abc <HAL_PCDEx_LPM_Callback+0x18>
 8022ab6:	2b01      	cmp	r3, #1
 8022ab8:	d01f      	beq.n	8022afa <HAL_PCDEx_LPM_Callback+0x56>
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
}
 8022aba:	e03b      	b.n	8022b34 <HAL_PCDEx_LPM_Callback+0x90>
    if (hpcd->Init.low_power_enable)
 8022abc:	687b      	ldr	r3, [r7, #4]
 8022abe:	6a1b      	ldr	r3, [r3, #32]
 8022ac0:	2b00      	cmp	r3, #0
 8022ac2:	d007      	beq.n	8022ad4 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClock_Config();
 8022ac4:	f7f4 fc54 	bl	8017370 <SystemClock_Config>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8022ac8:	4b1c      	ldr	r3, [pc, #112]	; (8022b3c <HAL_PCDEx_LPM_Callback+0x98>)
 8022aca:	691b      	ldr	r3, [r3, #16]
 8022acc:	4a1b      	ldr	r2, [pc, #108]	; (8022b3c <HAL_PCDEx_LPM_Callback+0x98>)
 8022ace:	f023 0306 	bic.w	r3, r3, #6
 8022ad2:	6113      	str	r3, [r2, #16]
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 8022ad4:	687b      	ldr	r3, [r7, #4]
 8022ad6:	681b      	ldr	r3, [r3, #0]
 8022ad8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8022adc:	681b      	ldr	r3, [r3, #0]
 8022ade:	687a      	ldr	r2, [r7, #4]
 8022ae0:	6812      	ldr	r2, [r2, #0]
 8022ae2:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8022ae6:	f023 0301 	bic.w	r3, r3, #1
 8022aea:	6013      	str	r3, [r2, #0]
    USBD_LL_Resume(hpcd->pData);
 8022aec:	687b      	ldr	r3, [r7, #4]
 8022aee:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8022af2:	4618      	mov	r0, r3
 8022af4:	f7fe fbf3 	bl	80212de <USBD_LL_Resume>
    break;
 8022af8:	e01c      	b.n	8022b34 <HAL_PCDEx_LPM_Callback+0x90>
    __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8022afa:	687b      	ldr	r3, [r7, #4]
 8022afc:	681b      	ldr	r3, [r3, #0]
 8022afe:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8022b02:	681b      	ldr	r3, [r3, #0]
 8022b04:	687a      	ldr	r2, [r7, #4]
 8022b06:	6812      	ldr	r2, [r2, #0]
 8022b08:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8022b0c:	f043 0301 	orr.w	r3, r3, #1
 8022b10:	6013      	str	r3, [r2, #0]
    USBD_LL_Suspend(hpcd->pData);
 8022b12:	687b      	ldr	r3, [r7, #4]
 8022b14:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8022b18:	4618      	mov	r0, r3
 8022b1a:	f7fe fbca 	bl	80212b2 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 8022b1e:	687b      	ldr	r3, [r7, #4]
 8022b20:	6a1b      	ldr	r3, [r3, #32]
 8022b22:	2b00      	cmp	r3, #0
 8022b24:	d005      	beq.n	8022b32 <HAL_PCDEx_LPM_Callback+0x8e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8022b26:	4b05      	ldr	r3, [pc, #20]	; (8022b3c <HAL_PCDEx_LPM_Callback+0x98>)
 8022b28:	691b      	ldr	r3, [r3, #16]
 8022b2a:	4a04      	ldr	r2, [pc, #16]	; (8022b3c <HAL_PCDEx_LPM_Callback+0x98>)
 8022b2c:	f043 0306 	orr.w	r3, r3, #6
 8022b30:	6113      	str	r3, [r2, #16]
    break;
 8022b32:	bf00      	nop
}
 8022b34:	bf00      	nop
 8022b36:	3708      	adds	r7, #8
 8022b38:	46bd      	mov	sp, r7
 8022b3a:	bd80      	pop	{r7, pc}
 8022b3c:	e000ed00 	.word	0xe000ed00

08022b40 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8022b40:	b480      	push	{r7}
 8022b42:	b083      	sub	sp, #12
 8022b44:	af00      	add	r7, sp, #0
 8022b46:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_MSC_BOT_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8022b48:	4b03      	ldr	r3, [pc, #12]	; (8022b58 <USBD_static_malloc+0x18>)
}
 8022b4a:	4618      	mov	r0, r3
 8022b4c:	370c      	adds	r7, #12
 8022b4e:	46bd      	mov	sp, r7
 8022b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022b54:	4770      	bx	lr
 8022b56:	bf00      	nop
 8022b58:	200007b0 	.word	0x200007b0

08022b5c <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8022b5c:	b480      	push	{r7}
 8022b5e:	b083      	sub	sp, #12
 8022b60:	af00      	add	r7, sp, #0
 8022b62:	6078      	str	r0, [r7, #4]

}
 8022b64:	bf00      	nop
 8022b66:	370c      	adds	r7, #12
 8022b68:	46bd      	mov	sp, r7
 8022b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022b6e:	4770      	bx	lr

08022b70 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8022b70:	b480      	push	{r7}
 8022b72:	b085      	sub	sp, #20
 8022b74:	af00      	add	r7, sp, #0
 8022b76:	4603      	mov	r3, r0
 8022b78:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8022b7a:	2300      	movs	r3, #0
 8022b7c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8022b7e:	79fb      	ldrb	r3, [r7, #7]
 8022b80:	2b03      	cmp	r3, #3
 8022b82:	d817      	bhi.n	8022bb4 <USBD_Get_USB_Status+0x44>
 8022b84:	a201      	add	r2, pc, #4	; (adr r2, 8022b8c <USBD_Get_USB_Status+0x1c>)
 8022b86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8022b8a:	bf00      	nop
 8022b8c:	08022b9d 	.word	0x08022b9d
 8022b90:	08022ba3 	.word	0x08022ba3
 8022b94:	08022ba9 	.word	0x08022ba9
 8022b98:	08022baf 	.word	0x08022baf
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8022b9c:	2300      	movs	r3, #0
 8022b9e:	73fb      	strb	r3, [r7, #15]
    break;
 8022ba0:	e00b      	b.n	8022bba <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8022ba2:	2303      	movs	r3, #3
 8022ba4:	73fb      	strb	r3, [r7, #15]
    break;
 8022ba6:	e008      	b.n	8022bba <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8022ba8:	2301      	movs	r3, #1
 8022baa:	73fb      	strb	r3, [r7, #15]
    break;
 8022bac:	e005      	b.n	8022bba <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8022bae:	2303      	movs	r3, #3
 8022bb0:	73fb      	strb	r3, [r7, #15]
    break;
 8022bb2:	e002      	b.n	8022bba <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8022bb4:	2303      	movs	r3, #3
 8022bb6:	73fb      	strb	r3, [r7, #15]
    break;
 8022bb8:	bf00      	nop
  }
  return usb_status;
 8022bba:	7bfb      	ldrb	r3, [r7, #15]
}
 8022bbc:	4618      	mov	r0, r3
 8022bbe:	3714      	adds	r7, #20
 8022bc0:	46bd      	mov	sp, r7
 8022bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022bc6:	4770      	bx	lr

08022bc8 <__errno>:
 8022bc8:	4b01      	ldr	r3, [pc, #4]	; (8022bd0 <__errno+0x8>)
 8022bca:	6818      	ldr	r0, [r3, #0]
 8022bcc:	4770      	bx	lr
 8022bce:	bf00      	nop
 8022bd0:	200006fc 	.word	0x200006fc

08022bd4 <__libc_init_array>:
 8022bd4:	b570      	push	{r4, r5, r6, lr}
 8022bd6:	4d0d      	ldr	r5, [pc, #52]	; (8022c0c <__libc_init_array+0x38>)
 8022bd8:	4c0d      	ldr	r4, [pc, #52]	; (8022c10 <__libc_init_array+0x3c>)
 8022bda:	1b64      	subs	r4, r4, r5
 8022bdc:	10a4      	asrs	r4, r4, #2
 8022bde:	2600      	movs	r6, #0
 8022be0:	42a6      	cmp	r6, r4
 8022be2:	d109      	bne.n	8022bf8 <__libc_init_array+0x24>
 8022be4:	4d0b      	ldr	r5, [pc, #44]	; (8022c14 <__libc_init_array+0x40>)
 8022be6:	4c0c      	ldr	r4, [pc, #48]	; (8022c18 <__libc_init_array+0x44>)
 8022be8:	f000 f906 	bl	8022df8 <_init>
 8022bec:	1b64      	subs	r4, r4, r5
 8022bee:	10a4      	asrs	r4, r4, #2
 8022bf0:	2600      	movs	r6, #0
 8022bf2:	42a6      	cmp	r6, r4
 8022bf4:	d105      	bne.n	8022c02 <__libc_init_array+0x2e>
 8022bf6:	bd70      	pop	{r4, r5, r6, pc}
 8022bf8:	f855 3b04 	ldr.w	r3, [r5], #4
 8022bfc:	4798      	blx	r3
 8022bfe:	3601      	adds	r6, #1
 8022c00:	e7ee      	b.n	8022be0 <__libc_init_array+0xc>
 8022c02:	f855 3b04 	ldr.w	r3, [r5], #4
 8022c06:	4798      	blx	r3
 8022c08:	3601      	adds	r6, #1
 8022c0a:	e7f2      	b.n	8022bf2 <__libc_init_array+0x1e>
 8022c0c:	08022e18 	.word	0x08022e18
 8022c10:	08022e18 	.word	0x08022e18
 8022c14:	08022e18 	.word	0x08022e18
 8022c18:	08022e1c 	.word	0x08022e1c

08022c1c <malloc>:
 8022c1c:	4b02      	ldr	r3, [pc, #8]	; (8022c28 <malloc+0xc>)
 8022c1e:	4601      	mov	r1, r0
 8022c20:	6818      	ldr	r0, [r3, #0]
 8022c22:	f000 b871 	b.w	8022d08 <_malloc_r>
 8022c26:	bf00      	nop
 8022c28:	200006fc 	.word	0x200006fc

08022c2c <free>:
 8022c2c:	4b02      	ldr	r3, [pc, #8]	; (8022c38 <free+0xc>)
 8022c2e:	4601      	mov	r1, r0
 8022c30:	6818      	ldr	r0, [r3, #0]
 8022c32:	f000 b819 	b.w	8022c68 <_free_r>
 8022c36:	bf00      	nop
 8022c38:	200006fc 	.word	0x200006fc

08022c3c <memcpy>:
 8022c3c:	440a      	add	r2, r1
 8022c3e:	4291      	cmp	r1, r2
 8022c40:	f100 33ff 	add.w	r3, r0, #4294967295
 8022c44:	d100      	bne.n	8022c48 <memcpy+0xc>
 8022c46:	4770      	bx	lr
 8022c48:	b510      	push	{r4, lr}
 8022c4a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8022c4e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8022c52:	4291      	cmp	r1, r2
 8022c54:	d1f9      	bne.n	8022c4a <memcpy+0xe>
 8022c56:	bd10      	pop	{r4, pc}

08022c58 <memset>:
 8022c58:	4402      	add	r2, r0
 8022c5a:	4603      	mov	r3, r0
 8022c5c:	4293      	cmp	r3, r2
 8022c5e:	d100      	bne.n	8022c62 <memset+0xa>
 8022c60:	4770      	bx	lr
 8022c62:	f803 1b01 	strb.w	r1, [r3], #1
 8022c66:	e7f9      	b.n	8022c5c <memset+0x4>

08022c68 <_free_r>:
 8022c68:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8022c6a:	2900      	cmp	r1, #0
 8022c6c:	d048      	beq.n	8022d00 <_free_r+0x98>
 8022c6e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8022c72:	9001      	str	r0, [sp, #4]
 8022c74:	2b00      	cmp	r3, #0
 8022c76:	f1a1 0404 	sub.w	r4, r1, #4
 8022c7a:	bfb8      	it	lt
 8022c7c:	18e4      	addlt	r4, r4, r3
 8022c7e:	f000 f8ad 	bl	8022ddc <__malloc_lock>
 8022c82:	4a20      	ldr	r2, [pc, #128]	; (8022d04 <_free_r+0x9c>)
 8022c84:	9801      	ldr	r0, [sp, #4]
 8022c86:	6813      	ldr	r3, [r2, #0]
 8022c88:	4615      	mov	r5, r2
 8022c8a:	b933      	cbnz	r3, 8022c9a <_free_r+0x32>
 8022c8c:	6063      	str	r3, [r4, #4]
 8022c8e:	6014      	str	r4, [r2, #0]
 8022c90:	b003      	add	sp, #12
 8022c92:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8022c96:	f000 b8a7 	b.w	8022de8 <__malloc_unlock>
 8022c9a:	42a3      	cmp	r3, r4
 8022c9c:	d90b      	bls.n	8022cb6 <_free_r+0x4e>
 8022c9e:	6821      	ldr	r1, [r4, #0]
 8022ca0:	1862      	adds	r2, r4, r1
 8022ca2:	4293      	cmp	r3, r2
 8022ca4:	bf04      	itt	eq
 8022ca6:	681a      	ldreq	r2, [r3, #0]
 8022ca8:	685b      	ldreq	r3, [r3, #4]
 8022caa:	6063      	str	r3, [r4, #4]
 8022cac:	bf04      	itt	eq
 8022cae:	1852      	addeq	r2, r2, r1
 8022cb0:	6022      	streq	r2, [r4, #0]
 8022cb2:	602c      	str	r4, [r5, #0]
 8022cb4:	e7ec      	b.n	8022c90 <_free_r+0x28>
 8022cb6:	461a      	mov	r2, r3
 8022cb8:	685b      	ldr	r3, [r3, #4]
 8022cba:	b10b      	cbz	r3, 8022cc0 <_free_r+0x58>
 8022cbc:	42a3      	cmp	r3, r4
 8022cbe:	d9fa      	bls.n	8022cb6 <_free_r+0x4e>
 8022cc0:	6811      	ldr	r1, [r2, #0]
 8022cc2:	1855      	adds	r5, r2, r1
 8022cc4:	42a5      	cmp	r5, r4
 8022cc6:	d10b      	bne.n	8022ce0 <_free_r+0x78>
 8022cc8:	6824      	ldr	r4, [r4, #0]
 8022cca:	4421      	add	r1, r4
 8022ccc:	1854      	adds	r4, r2, r1
 8022cce:	42a3      	cmp	r3, r4
 8022cd0:	6011      	str	r1, [r2, #0]
 8022cd2:	d1dd      	bne.n	8022c90 <_free_r+0x28>
 8022cd4:	681c      	ldr	r4, [r3, #0]
 8022cd6:	685b      	ldr	r3, [r3, #4]
 8022cd8:	6053      	str	r3, [r2, #4]
 8022cda:	4421      	add	r1, r4
 8022cdc:	6011      	str	r1, [r2, #0]
 8022cde:	e7d7      	b.n	8022c90 <_free_r+0x28>
 8022ce0:	d902      	bls.n	8022ce8 <_free_r+0x80>
 8022ce2:	230c      	movs	r3, #12
 8022ce4:	6003      	str	r3, [r0, #0]
 8022ce6:	e7d3      	b.n	8022c90 <_free_r+0x28>
 8022ce8:	6825      	ldr	r5, [r4, #0]
 8022cea:	1961      	adds	r1, r4, r5
 8022cec:	428b      	cmp	r3, r1
 8022cee:	bf04      	itt	eq
 8022cf0:	6819      	ldreq	r1, [r3, #0]
 8022cf2:	685b      	ldreq	r3, [r3, #4]
 8022cf4:	6063      	str	r3, [r4, #4]
 8022cf6:	bf04      	itt	eq
 8022cf8:	1949      	addeq	r1, r1, r5
 8022cfa:	6021      	streq	r1, [r4, #0]
 8022cfc:	6054      	str	r4, [r2, #4]
 8022cfe:	e7c7      	b.n	8022c90 <_free_r+0x28>
 8022d00:	b003      	add	sp, #12
 8022d02:	bd30      	pop	{r4, r5, pc}
 8022d04:	20000a28 	.word	0x20000a28

08022d08 <_malloc_r>:
 8022d08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8022d0a:	1ccd      	adds	r5, r1, #3
 8022d0c:	f025 0503 	bic.w	r5, r5, #3
 8022d10:	3508      	adds	r5, #8
 8022d12:	2d0c      	cmp	r5, #12
 8022d14:	bf38      	it	cc
 8022d16:	250c      	movcc	r5, #12
 8022d18:	2d00      	cmp	r5, #0
 8022d1a:	4606      	mov	r6, r0
 8022d1c:	db01      	blt.n	8022d22 <_malloc_r+0x1a>
 8022d1e:	42a9      	cmp	r1, r5
 8022d20:	d903      	bls.n	8022d2a <_malloc_r+0x22>
 8022d22:	230c      	movs	r3, #12
 8022d24:	6033      	str	r3, [r6, #0]
 8022d26:	2000      	movs	r0, #0
 8022d28:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8022d2a:	f000 f857 	bl	8022ddc <__malloc_lock>
 8022d2e:	4921      	ldr	r1, [pc, #132]	; (8022db4 <_malloc_r+0xac>)
 8022d30:	680a      	ldr	r2, [r1, #0]
 8022d32:	4614      	mov	r4, r2
 8022d34:	b99c      	cbnz	r4, 8022d5e <_malloc_r+0x56>
 8022d36:	4f20      	ldr	r7, [pc, #128]	; (8022db8 <_malloc_r+0xb0>)
 8022d38:	683b      	ldr	r3, [r7, #0]
 8022d3a:	b923      	cbnz	r3, 8022d46 <_malloc_r+0x3e>
 8022d3c:	4621      	mov	r1, r4
 8022d3e:	4630      	mov	r0, r6
 8022d40:	f000 f83c 	bl	8022dbc <_sbrk_r>
 8022d44:	6038      	str	r0, [r7, #0]
 8022d46:	4629      	mov	r1, r5
 8022d48:	4630      	mov	r0, r6
 8022d4a:	f000 f837 	bl	8022dbc <_sbrk_r>
 8022d4e:	1c43      	adds	r3, r0, #1
 8022d50:	d123      	bne.n	8022d9a <_malloc_r+0x92>
 8022d52:	230c      	movs	r3, #12
 8022d54:	6033      	str	r3, [r6, #0]
 8022d56:	4630      	mov	r0, r6
 8022d58:	f000 f846 	bl	8022de8 <__malloc_unlock>
 8022d5c:	e7e3      	b.n	8022d26 <_malloc_r+0x1e>
 8022d5e:	6823      	ldr	r3, [r4, #0]
 8022d60:	1b5b      	subs	r3, r3, r5
 8022d62:	d417      	bmi.n	8022d94 <_malloc_r+0x8c>
 8022d64:	2b0b      	cmp	r3, #11
 8022d66:	d903      	bls.n	8022d70 <_malloc_r+0x68>
 8022d68:	6023      	str	r3, [r4, #0]
 8022d6a:	441c      	add	r4, r3
 8022d6c:	6025      	str	r5, [r4, #0]
 8022d6e:	e004      	b.n	8022d7a <_malloc_r+0x72>
 8022d70:	6863      	ldr	r3, [r4, #4]
 8022d72:	42a2      	cmp	r2, r4
 8022d74:	bf0c      	ite	eq
 8022d76:	600b      	streq	r3, [r1, #0]
 8022d78:	6053      	strne	r3, [r2, #4]
 8022d7a:	4630      	mov	r0, r6
 8022d7c:	f000 f834 	bl	8022de8 <__malloc_unlock>
 8022d80:	f104 000b 	add.w	r0, r4, #11
 8022d84:	1d23      	adds	r3, r4, #4
 8022d86:	f020 0007 	bic.w	r0, r0, #7
 8022d8a:	1ac2      	subs	r2, r0, r3
 8022d8c:	d0cc      	beq.n	8022d28 <_malloc_r+0x20>
 8022d8e:	1a1b      	subs	r3, r3, r0
 8022d90:	50a3      	str	r3, [r4, r2]
 8022d92:	e7c9      	b.n	8022d28 <_malloc_r+0x20>
 8022d94:	4622      	mov	r2, r4
 8022d96:	6864      	ldr	r4, [r4, #4]
 8022d98:	e7cc      	b.n	8022d34 <_malloc_r+0x2c>
 8022d9a:	1cc4      	adds	r4, r0, #3
 8022d9c:	f024 0403 	bic.w	r4, r4, #3
 8022da0:	42a0      	cmp	r0, r4
 8022da2:	d0e3      	beq.n	8022d6c <_malloc_r+0x64>
 8022da4:	1a21      	subs	r1, r4, r0
 8022da6:	4630      	mov	r0, r6
 8022da8:	f000 f808 	bl	8022dbc <_sbrk_r>
 8022dac:	3001      	adds	r0, #1
 8022dae:	d1dd      	bne.n	8022d6c <_malloc_r+0x64>
 8022db0:	e7cf      	b.n	8022d52 <_malloc_r+0x4a>
 8022db2:	bf00      	nop
 8022db4:	20000a28 	.word	0x20000a28
 8022db8:	20000a2c 	.word	0x20000a2c

08022dbc <_sbrk_r>:
 8022dbc:	b538      	push	{r3, r4, r5, lr}
 8022dbe:	4d06      	ldr	r5, [pc, #24]	; (8022dd8 <_sbrk_r+0x1c>)
 8022dc0:	2300      	movs	r3, #0
 8022dc2:	4604      	mov	r4, r0
 8022dc4:	4608      	mov	r0, r1
 8022dc6:	602b      	str	r3, [r5, #0]
 8022dc8:	f7f5 fa2e 	bl	8018228 <_sbrk>
 8022dcc:	1c43      	adds	r3, r0, #1
 8022dce:	d102      	bne.n	8022dd6 <_sbrk_r+0x1a>
 8022dd0:	682b      	ldr	r3, [r5, #0]
 8022dd2:	b103      	cbz	r3, 8022dd6 <_sbrk_r+0x1a>
 8022dd4:	6023      	str	r3, [r4, #0]
 8022dd6:	bd38      	pop	{r3, r4, r5, pc}
 8022dd8:	20007574 	.word	0x20007574

08022ddc <__malloc_lock>:
 8022ddc:	4801      	ldr	r0, [pc, #4]	; (8022de4 <__malloc_lock+0x8>)
 8022dde:	f000 b809 	b.w	8022df4 <__retarget_lock_acquire_recursive>
 8022de2:	bf00      	nop
 8022de4:	2000757c 	.word	0x2000757c

08022de8 <__malloc_unlock>:
 8022de8:	4801      	ldr	r0, [pc, #4]	; (8022df0 <__malloc_unlock+0x8>)
 8022dea:	f000 b804 	b.w	8022df6 <__retarget_lock_release_recursive>
 8022dee:	bf00      	nop
 8022df0:	2000757c 	.word	0x2000757c

08022df4 <__retarget_lock_acquire_recursive>:
 8022df4:	4770      	bx	lr

08022df6 <__retarget_lock_release_recursive>:
 8022df6:	4770      	bx	lr

08022df8 <_init>:
 8022df8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8022dfa:	bf00      	nop
 8022dfc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8022dfe:	bc08      	pop	{r3}
 8022e00:	469e      	mov	lr, r3
 8022e02:	4770      	bx	lr

08022e04 <_fini>:
 8022e04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8022e06:	bf00      	nop
 8022e08:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8022e0a:	bc08      	pop	{r3}
 8022e0c:	469e      	mov	lr, r3
 8022e0e:	4770      	bx	lr
