
oscilliscope.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001705c  0800c000  0800c000  0001c000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000021c8  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0802305c  0802305c  00040764  2**0
                  CONTENTS
  4 .ARM          00000008  0802305c  0802305c  0003305c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08023064  08023064  00040764  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08023064  08023064  00033064  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08023068  08023068  00033068  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000764  20000000  0802306c  00040000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00006dcc  20000764  080237d0  00040764  2**2
                  ALLOC
 10 ._user_heap_stack 00000e00  20007530  080237d0  00047530  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00040764  2**0
                  CONTENTS, READONLY
 12 .debug_info   0003ae9c  00000000  00000000  00040794  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000068c2  00000000  00000000  0007b630  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001d68  00000000  00000000  00081ef8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001a88  00000000  00000000  00083c60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002aad1  00000000  00000000  000856e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002a0b2  00000000  00000000  000b01b9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e51b5  00000000  00000000  000da26b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001bf420  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000796c  00000000  00000000  001bf474  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800c000 <__do_global_dtors_aux>:
 800c000:	b510      	push	{r4, lr}
 800c002:	4c05      	ldr	r4, [pc, #20]	; (800c018 <__do_global_dtors_aux+0x18>)
 800c004:	7823      	ldrb	r3, [r4, #0]
 800c006:	b933      	cbnz	r3, 800c016 <__do_global_dtors_aux+0x16>
 800c008:	4b04      	ldr	r3, [pc, #16]	; (800c01c <__do_global_dtors_aux+0x1c>)
 800c00a:	b113      	cbz	r3, 800c012 <__do_global_dtors_aux+0x12>
 800c00c:	4804      	ldr	r0, [pc, #16]	; (800c020 <__do_global_dtors_aux+0x20>)
 800c00e:	f3af 8000 	nop.w
 800c012:	2301      	movs	r3, #1
 800c014:	7023      	strb	r3, [r4, #0]
 800c016:	bd10      	pop	{r4, pc}
 800c018:	20000764 	.word	0x20000764
 800c01c:	00000000 	.word	0x00000000
 800c020:	08023044 	.word	0x08023044

0800c024 <frame_dummy>:
 800c024:	b508      	push	{r3, lr}
 800c026:	4b03      	ldr	r3, [pc, #12]	; (800c034 <frame_dummy+0x10>)
 800c028:	b11b      	cbz	r3, 800c032 <frame_dummy+0xe>
 800c02a:	4903      	ldr	r1, [pc, #12]	; (800c038 <frame_dummy+0x14>)
 800c02c:	4803      	ldr	r0, [pc, #12]	; (800c03c <frame_dummy+0x18>)
 800c02e:	f3af 8000 	nop.w
 800c032:	bd08      	pop	{r3, pc}
 800c034:	00000000 	.word	0x00000000
 800c038:	20000768 	.word	0x20000768
 800c03c:	08023044 	.word	0x08023044

0800c040 <strlen>:
 800c040:	4603      	mov	r3, r0
 800c042:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c046:	2a00      	cmp	r2, #0
 800c048:	d1fb      	bne.n	800c042 <strlen+0x2>
 800c04a:	1a18      	subs	r0, r3, r0
 800c04c:	3801      	subs	r0, #1
 800c04e:	4770      	bx	lr

0800c050 <__aeabi_uldivmod>:
 800c050:	b953      	cbnz	r3, 800c068 <__aeabi_uldivmod+0x18>
 800c052:	b94a      	cbnz	r2, 800c068 <__aeabi_uldivmod+0x18>
 800c054:	2900      	cmp	r1, #0
 800c056:	bf08      	it	eq
 800c058:	2800      	cmpeq	r0, #0
 800c05a:	bf1c      	itt	ne
 800c05c:	f04f 31ff 	movne.w	r1, #4294967295
 800c060:	f04f 30ff 	movne.w	r0, #4294967295
 800c064:	f000 b96e 	b.w	800c344 <__aeabi_idiv0>
 800c068:	f1ad 0c08 	sub.w	ip, sp, #8
 800c06c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800c070:	f000 f806 	bl	800c080 <__udivmoddi4>
 800c074:	f8dd e004 	ldr.w	lr, [sp, #4]
 800c078:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800c07c:	b004      	add	sp, #16
 800c07e:	4770      	bx	lr

0800c080 <__udivmoddi4>:
 800c080:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c084:	9d08      	ldr	r5, [sp, #32]
 800c086:	4604      	mov	r4, r0
 800c088:	468c      	mov	ip, r1
 800c08a:	2b00      	cmp	r3, #0
 800c08c:	f040 8083 	bne.w	800c196 <__udivmoddi4+0x116>
 800c090:	428a      	cmp	r2, r1
 800c092:	4617      	mov	r7, r2
 800c094:	d947      	bls.n	800c126 <__udivmoddi4+0xa6>
 800c096:	fab2 f282 	clz	r2, r2
 800c09a:	b142      	cbz	r2, 800c0ae <__udivmoddi4+0x2e>
 800c09c:	f1c2 0020 	rsb	r0, r2, #32
 800c0a0:	fa24 f000 	lsr.w	r0, r4, r0
 800c0a4:	4091      	lsls	r1, r2
 800c0a6:	4097      	lsls	r7, r2
 800c0a8:	ea40 0c01 	orr.w	ip, r0, r1
 800c0ac:	4094      	lsls	r4, r2
 800c0ae:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800c0b2:	0c23      	lsrs	r3, r4, #16
 800c0b4:	fbbc f6f8 	udiv	r6, ip, r8
 800c0b8:	fa1f fe87 	uxth.w	lr, r7
 800c0bc:	fb08 c116 	mls	r1, r8, r6, ip
 800c0c0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800c0c4:	fb06 f10e 	mul.w	r1, r6, lr
 800c0c8:	4299      	cmp	r1, r3
 800c0ca:	d909      	bls.n	800c0e0 <__udivmoddi4+0x60>
 800c0cc:	18fb      	adds	r3, r7, r3
 800c0ce:	f106 30ff 	add.w	r0, r6, #4294967295
 800c0d2:	f080 8119 	bcs.w	800c308 <__udivmoddi4+0x288>
 800c0d6:	4299      	cmp	r1, r3
 800c0d8:	f240 8116 	bls.w	800c308 <__udivmoddi4+0x288>
 800c0dc:	3e02      	subs	r6, #2
 800c0de:	443b      	add	r3, r7
 800c0e0:	1a5b      	subs	r3, r3, r1
 800c0e2:	b2a4      	uxth	r4, r4
 800c0e4:	fbb3 f0f8 	udiv	r0, r3, r8
 800c0e8:	fb08 3310 	mls	r3, r8, r0, r3
 800c0ec:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800c0f0:	fb00 fe0e 	mul.w	lr, r0, lr
 800c0f4:	45a6      	cmp	lr, r4
 800c0f6:	d909      	bls.n	800c10c <__udivmoddi4+0x8c>
 800c0f8:	193c      	adds	r4, r7, r4
 800c0fa:	f100 33ff 	add.w	r3, r0, #4294967295
 800c0fe:	f080 8105 	bcs.w	800c30c <__udivmoddi4+0x28c>
 800c102:	45a6      	cmp	lr, r4
 800c104:	f240 8102 	bls.w	800c30c <__udivmoddi4+0x28c>
 800c108:	3802      	subs	r0, #2
 800c10a:	443c      	add	r4, r7
 800c10c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800c110:	eba4 040e 	sub.w	r4, r4, lr
 800c114:	2600      	movs	r6, #0
 800c116:	b11d      	cbz	r5, 800c120 <__udivmoddi4+0xa0>
 800c118:	40d4      	lsrs	r4, r2
 800c11a:	2300      	movs	r3, #0
 800c11c:	e9c5 4300 	strd	r4, r3, [r5]
 800c120:	4631      	mov	r1, r6
 800c122:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c126:	b902      	cbnz	r2, 800c12a <__udivmoddi4+0xaa>
 800c128:	deff      	udf	#255	; 0xff
 800c12a:	fab2 f282 	clz	r2, r2
 800c12e:	2a00      	cmp	r2, #0
 800c130:	d150      	bne.n	800c1d4 <__udivmoddi4+0x154>
 800c132:	1bcb      	subs	r3, r1, r7
 800c134:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800c138:	fa1f f887 	uxth.w	r8, r7
 800c13c:	2601      	movs	r6, #1
 800c13e:	fbb3 fcfe 	udiv	ip, r3, lr
 800c142:	0c21      	lsrs	r1, r4, #16
 800c144:	fb0e 331c 	mls	r3, lr, ip, r3
 800c148:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800c14c:	fb08 f30c 	mul.w	r3, r8, ip
 800c150:	428b      	cmp	r3, r1
 800c152:	d907      	bls.n	800c164 <__udivmoddi4+0xe4>
 800c154:	1879      	adds	r1, r7, r1
 800c156:	f10c 30ff 	add.w	r0, ip, #4294967295
 800c15a:	d202      	bcs.n	800c162 <__udivmoddi4+0xe2>
 800c15c:	428b      	cmp	r3, r1
 800c15e:	f200 80e9 	bhi.w	800c334 <__udivmoddi4+0x2b4>
 800c162:	4684      	mov	ip, r0
 800c164:	1ac9      	subs	r1, r1, r3
 800c166:	b2a3      	uxth	r3, r4
 800c168:	fbb1 f0fe 	udiv	r0, r1, lr
 800c16c:	fb0e 1110 	mls	r1, lr, r0, r1
 800c170:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 800c174:	fb08 f800 	mul.w	r8, r8, r0
 800c178:	45a0      	cmp	r8, r4
 800c17a:	d907      	bls.n	800c18c <__udivmoddi4+0x10c>
 800c17c:	193c      	adds	r4, r7, r4
 800c17e:	f100 33ff 	add.w	r3, r0, #4294967295
 800c182:	d202      	bcs.n	800c18a <__udivmoddi4+0x10a>
 800c184:	45a0      	cmp	r8, r4
 800c186:	f200 80d9 	bhi.w	800c33c <__udivmoddi4+0x2bc>
 800c18a:	4618      	mov	r0, r3
 800c18c:	eba4 0408 	sub.w	r4, r4, r8
 800c190:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800c194:	e7bf      	b.n	800c116 <__udivmoddi4+0x96>
 800c196:	428b      	cmp	r3, r1
 800c198:	d909      	bls.n	800c1ae <__udivmoddi4+0x12e>
 800c19a:	2d00      	cmp	r5, #0
 800c19c:	f000 80b1 	beq.w	800c302 <__udivmoddi4+0x282>
 800c1a0:	2600      	movs	r6, #0
 800c1a2:	e9c5 0100 	strd	r0, r1, [r5]
 800c1a6:	4630      	mov	r0, r6
 800c1a8:	4631      	mov	r1, r6
 800c1aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c1ae:	fab3 f683 	clz	r6, r3
 800c1b2:	2e00      	cmp	r6, #0
 800c1b4:	d14a      	bne.n	800c24c <__udivmoddi4+0x1cc>
 800c1b6:	428b      	cmp	r3, r1
 800c1b8:	d302      	bcc.n	800c1c0 <__udivmoddi4+0x140>
 800c1ba:	4282      	cmp	r2, r0
 800c1bc:	f200 80b8 	bhi.w	800c330 <__udivmoddi4+0x2b0>
 800c1c0:	1a84      	subs	r4, r0, r2
 800c1c2:	eb61 0103 	sbc.w	r1, r1, r3
 800c1c6:	2001      	movs	r0, #1
 800c1c8:	468c      	mov	ip, r1
 800c1ca:	2d00      	cmp	r5, #0
 800c1cc:	d0a8      	beq.n	800c120 <__udivmoddi4+0xa0>
 800c1ce:	e9c5 4c00 	strd	r4, ip, [r5]
 800c1d2:	e7a5      	b.n	800c120 <__udivmoddi4+0xa0>
 800c1d4:	f1c2 0320 	rsb	r3, r2, #32
 800c1d8:	fa20 f603 	lsr.w	r6, r0, r3
 800c1dc:	4097      	lsls	r7, r2
 800c1de:	fa01 f002 	lsl.w	r0, r1, r2
 800c1e2:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800c1e6:	40d9      	lsrs	r1, r3
 800c1e8:	4330      	orrs	r0, r6
 800c1ea:	0c03      	lsrs	r3, r0, #16
 800c1ec:	fbb1 f6fe 	udiv	r6, r1, lr
 800c1f0:	fa1f f887 	uxth.w	r8, r7
 800c1f4:	fb0e 1116 	mls	r1, lr, r6, r1
 800c1f8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800c1fc:	fb06 f108 	mul.w	r1, r6, r8
 800c200:	4299      	cmp	r1, r3
 800c202:	fa04 f402 	lsl.w	r4, r4, r2
 800c206:	d909      	bls.n	800c21c <__udivmoddi4+0x19c>
 800c208:	18fb      	adds	r3, r7, r3
 800c20a:	f106 3cff 	add.w	ip, r6, #4294967295
 800c20e:	f080 808d 	bcs.w	800c32c <__udivmoddi4+0x2ac>
 800c212:	4299      	cmp	r1, r3
 800c214:	f240 808a 	bls.w	800c32c <__udivmoddi4+0x2ac>
 800c218:	3e02      	subs	r6, #2
 800c21a:	443b      	add	r3, r7
 800c21c:	1a5b      	subs	r3, r3, r1
 800c21e:	b281      	uxth	r1, r0
 800c220:	fbb3 f0fe 	udiv	r0, r3, lr
 800c224:	fb0e 3310 	mls	r3, lr, r0, r3
 800c228:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800c22c:	fb00 f308 	mul.w	r3, r0, r8
 800c230:	428b      	cmp	r3, r1
 800c232:	d907      	bls.n	800c244 <__udivmoddi4+0x1c4>
 800c234:	1879      	adds	r1, r7, r1
 800c236:	f100 3cff 	add.w	ip, r0, #4294967295
 800c23a:	d273      	bcs.n	800c324 <__udivmoddi4+0x2a4>
 800c23c:	428b      	cmp	r3, r1
 800c23e:	d971      	bls.n	800c324 <__udivmoddi4+0x2a4>
 800c240:	3802      	subs	r0, #2
 800c242:	4439      	add	r1, r7
 800c244:	1acb      	subs	r3, r1, r3
 800c246:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800c24a:	e778      	b.n	800c13e <__udivmoddi4+0xbe>
 800c24c:	f1c6 0c20 	rsb	ip, r6, #32
 800c250:	fa03 f406 	lsl.w	r4, r3, r6
 800c254:	fa22 f30c 	lsr.w	r3, r2, ip
 800c258:	431c      	orrs	r4, r3
 800c25a:	fa20 f70c 	lsr.w	r7, r0, ip
 800c25e:	fa01 f306 	lsl.w	r3, r1, r6
 800c262:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 800c266:	fa21 f10c 	lsr.w	r1, r1, ip
 800c26a:	431f      	orrs	r7, r3
 800c26c:	0c3b      	lsrs	r3, r7, #16
 800c26e:	fbb1 f9fe 	udiv	r9, r1, lr
 800c272:	fa1f f884 	uxth.w	r8, r4
 800c276:	fb0e 1119 	mls	r1, lr, r9, r1
 800c27a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800c27e:	fb09 fa08 	mul.w	sl, r9, r8
 800c282:	458a      	cmp	sl, r1
 800c284:	fa02 f206 	lsl.w	r2, r2, r6
 800c288:	fa00 f306 	lsl.w	r3, r0, r6
 800c28c:	d908      	bls.n	800c2a0 <__udivmoddi4+0x220>
 800c28e:	1861      	adds	r1, r4, r1
 800c290:	f109 30ff 	add.w	r0, r9, #4294967295
 800c294:	d248      	bcs.n	800c328 <__udivmoddi4+0x2a8>
 800c296:	458a      	cmp	sl, r1
 800c298:	d946      	bls.n	800c328 <__udivmoddi4+0x2a8>
 800c29a:	f1a9 0902 	sub.w	r9, r9, #2
 800c29e:	4421      	add	r1, r4
 800c2a0:	eba1 010a 	sub.w	r1, r1, sl
 800c2a4:	b2bf      	uxth	r7, r7
 800c2a6:	fbb1 f0fe 	udiv	r0, r1, lr
 800c2aa:	fb0e 1110 	mls	r1, lr, r0, r1
 800c2ae:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800c2b2:	fb00 f808 	mul.w	r8, r0, r8
 800c2b6:	45b8      	cmp	r8, r7
 800c2b8:	d907      	bls.n	800c2ca <__udivmoddi4+0x24a>
 800c2ba:	19e7      	adds	r7, r4, r7
 800c2bc:	f100 31ff 	add.w	r1, r0, #4294967295
 800c2c0:	d22e      	bcs.n	800c320 <__udivmoddi4+0x2a0>
 800c2c2:	45b8      	cmp	r8, r7
 800c2c4:	d92c      	bls.n	800c320 <__udivmoddi4+0x2a0>
 800c2c6:	3802      	subs	r0, #2
 800c2c8:	4427      	add	r7, r4
 800c2ca:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800c2ce:	eba7 0708 	sub.w	r7, r7, r8
 800c2d2:	fba0 8902 	umull	r8, r9, r0, r2
 800c2d6:	454f      	cmp	r7, r9
 800c2d8:	46c6      	mov	lr, r8
 800c2da:	4649      	mov	r1, r9
 800c2dc:	d31a      	bcc.n	800c314 <__udivmoddi4+0x294>
 800c2de:	d017      	beq.n	800c310 <__udivmoddi4+0x290>
 800c2e0:	b15d      	cbz	r5, 800c2fa <__udivmoddi4+0x27a>
 800c2e2:	ebb3 020e 	subs.w	r2, r3, lr
 800c2e6:	eb67 0701 	sbc.w	r7, r7, r1
 800c2ea:	fa07 fc0c 	lsl.w	ip, r7, ip
 800c2ee:	40f2      	lsrs	r2, r6
 800c2f0:	ea4c 0202 	orr.w	r2, ip, r2
 800c2f4:	40f7      	lsrs	r7, r6
 800c2f6:	e9c5 2700 	strd	r2, r7, [r5]
 800c2fa:	2600      	movs	r6, #0
 800c2fc:	4631      	mov	r1, r6
 800c2fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c302:	462e      	mov	r6, r5
 800c304:	4628      	mov	r0, r5
 800c306:	e70b      	b.n	800c120 <__udivmoddi4+0xa0>
 800c308:	4606      	mov	r6, r0
 800c30a:	e6e9      	b.n	800c0e0 <__udivmoddi4+0x60>
 800c30c:	4618      	mov	r0, r3
 800c30e:	e6fd      	b.n	800c10c <__udivmoddi4+0x8c>
 800c310:	4543      	cmp	r3, r8
 800c312:	d2e5      	bcs.n	800c2e0 <__udivmoddi4+0x260>
 800c314:	ebb8 0e02 	subs.w	lr, r8, r2
 800c318:	eb69 0104 	sbc.w	r1, r9, r4
 800c31c:	3801      	subs	r0, #1
 800c31e:	e7df      	b.n	800c2e0 <__udivmoddi4+0x260>
 800c320:	4608      	mov	r0, r1
 800c322:	e7d2      	b.n	800c2ca <__udivmoddi4+0x24a>
 800c324:	4660      	mov	r0, ip
 800c326:	e78d      	b.n	800c244 <__udivmoddi4+0x1c4>
 800c328:	4681      	mov	r9, r0
 800c32a:	e7b9      	b.n	800c2a0 <__udivmoddi4+0x220>
 800c32c:	4666      	mov	r6, ip
 800c32e:	e775      	b.n	800c21c <__udivmoddi4+0x19c>
 800c330:	4630      	mov	r0, r6
 800c332:	e74a      	b.n	800c1ca <__udivmoddi4+0x14a>
 800c334:	f1ac 0c02 	sub.w	ip, ip, #2
 800c338:	4439      	add	r1, r7
 800c33a:	e713      	b.n	800c164 <__udivmoddi4+0xe4>
 800c33c:	3802      	subs	r0, #2
 800c33e:	443c      	add	r4, r7
 800c340:	e724      	b.n	800c18c <__udivmoddi4+0x10c>
 800c342:	bf00      	nop

0800c344 <__aeabi_idiv0>:
 800c344:	4770      	bx	lr
 800c346:	bf00      	nop

0800c348 <BIOS_Info>:

/*******************************************************************************
 Info :  Ӳ���豸��Ϣ
*******************************************************************************/
unsigned BIOS_Info(char Item)
{
 800c348:	b480      	push	{r7}
 800c34a:	b083      	sub	sp, #12
 800c34c:	af00      	add	r7, sp, #0
 800c34e:	4603      	mov	r3, r0
 800c350:	71fb      	strb	r3, [r7, #7]
  switch (Item){
 800c352:	79fb      	ldrb	r3, [r7, #7]
 800c354:	2b00      	cmp	r3, #0
 800c356:	d103      	bne.n	800c360 <BIOS_Info+0x18>
    case CHA_CNT:
    	return __HAL_DMA_GET_COUNTER(&hdma_adc1);  /*(u16)DMA_CH_A->CNDTR*/
 800c358:	4b05      	ldr	r3, [pc, #20]	; (800c370 <BIOS_Info+0x28>)
 800c35a:	681b      	ldr	r3, [r3, #0]
 800c35c:	685b      	ldr	r3, [r3, #4]
 800c35e:	e000      	b.n	800c362 <BIOS_Info+0x1a>
/*    case SIN_TAB: return (u32)SIN_DATA;
    case TRG_TAB: return (u32)TRG_DATA;
    case SAW_TAB: return (u32)SAW_DATA;    */
    default:
    	return 0;
 800c360:	2300      	movs	r3, #0
  }
}
 800c362:	4618      	mov	r0, r3
 800c364:	370c      	adds	r7, #12
 800c366:	46bd      	mov	sp, r7
 800c368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c36c:	4770      	bx	lr
 800c36e:	bf00      	nop
 800c370:	20006b18 	.word	0x20006b18

0800c374 <BIOS_Ctrl>:
/*******************************************************************************
 DevCtrl:  Ӳ���豸����
*******************************************************************************/
void BIOS_Ctrl(char Item, unsigned Val)
{
 800c374:	b580      	push	{r7, lr}
 800c376:	b088      	sub	sp, #32
 800c378:	af00      	add	r7, sp, #0
 800c37a:	4603      	mov	r3, r0
 800c37c:	6039      	str	r1, [r7, #0]
 800c37e:	71fb      	strb	r3, [r7, #7]
  GPIO_InitTypeDef         GPIO_InitStructure;
  unsigned dma_tmp;

  switch (Item){
 800c380:	79fb      	ldrb	r3, [r7, #7]
 800c382:	2b08      	cmp	r3, #8
 800c384:	f200 8150 	bhi.w	800c628 <BIOS_Ctrl+0x2b4>
 800c388:	a201      	add	r2, pc, #4	; (adr r2, 800c390 <BIOS_Ctrl+0x1c>)
 800c38a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c38e:	bf00      	nop
 800c390:	0800c52b 	.word	0x0800c52b
 800c394:	0800c4d9 	.word	0x0800c4d9
 800c398:	0800c51f 	.word	0x0800c51f
 800c39c:	0800c4e9 	.word	0x0800c4e9
 800c3a0:	0800c3b5 	.word	0x0800c3b5
 800c3a4:	0800c417 	.word	0x0800c417
 800c3a8:	0800c441 	.word	0x0800c441
 800c3ac:	0800c469 	.word	0x0800c469
 800c3b0:	0800c4cb 	.word	0x0800c4cb
    case SMPL_ST: if(Val == DISABLE)
 800c3b4:	683b      	ldr	r3, [r7, #0]
 800c3b6:	2b00      	cmp	r3, #0
 800c3b8:	d108      	bne.n	800c3cc <BIOS_Ctrl+0x58>
    			  {
    				  __HAL_DMA_DISABLE(&hdma_adc1);  /*DMA1_Channel1->CCR &= (~ENABLE);*/
 800c3ba:	4ba0      	ldr	r3, [pc, #640]	; (800c63c <BIOS_Ctrl+0x2c8>)
 800c3bc:	681b      	ldr	r3, [r3, #0]
 800c3be:	681a      	ldr	r2, [r3, #0]
 800c3c0:	4b9e      	ldr	r3, [pc, #632]	; (800c63c <BIOS_Ctrl+0x2c8>)
 800c3c2:	681b      	ldr	r3, [r3, #0]
 800c3c4:	f022 0201 	bic.w	r2, r2, #1
 800c3c8:	601a      	str	r2, [r3, #0]
                    if(Val == INTERLEAVE)
                    {
                      DMA1_Channel1->CCR = 0x3A80;
                    } */
                  }
    			  break;
 800c3ca:	e12f      	b.n	800c62c <BIOS_Ctrl+0x2b8>
    				  if(Val == ENABLE)
 800c3cc:	683b      	ldr	r3, [r7, #0]
 800c3ce:	2b01      	cmp	r3, #1
 800c3d0:	f040 812c 	bne.w	800c62c <BIOS_Ctrl+0x2b8>
    			    __HAL_DMA_ENABLE(&hdma_adc1);  /* DMA1_Channel1->CCR |= ENABLE; */
 800c3d4:	4b99      	ldr	r3, [pc, #612]	; (800c63c <BIOS_Ctrl+0x2c8>)
 800c3d6:	681b      	ldr	r3, [r3, #0]
 800c3d8:	681a      	ldr	r2, [r3, #0]
 800c3da:	4b98      	ldr	r3, [pc, #608]	; (800c63c <BIOS_Ctrl+0x2c8>)
 800c3dc:	681b      	ldr	r3, [r3, #0]
 800c3de:	f042 0201 	orr.w	r2, r2, #1
 800c3e2:	601a      	str	r2, [r3, #0]
                    __HAL_ADC_ENABLE(&hadc1);  //ADC1->CR2 |= 0x00000001; //AD_ON
 800c3e4:	4b96      	ldr	r3, [pc, #600]	; (800c640 <BIOS_Ctrl+0x2cc>)
 800c3e6:	681b      	ldr	r3, [r3, #0]
 800c3e8:	689a      	ldr	r2, [r3, #8]
 800c3ea:	4b95      	ldr	r3, [pc, #596]	; (800c640 <BIOS_Ctrl+0x2cc>)
 800c3ec:	681b      	ldr	r3, [r3, #0]
 800c3ee:	f042 0201 	orr.w	r2, r2, #1
 800c3f2:	609a      	str	r2, [r3, #8]
                    __HAL_ADC_ENABLE(&hadc2);  //ADC2->CR2 |= 0x00000001; //AD_ON
 800c3f4:	4b93      	ldr	r3, [pc, #588]	; (800c644 <BIOS_Ctrl+0x2d0>)
 800c3f6:	681b      	ldr	r3, [r3, #0]
 800c3f8:	689a      	ldr	r2, [r3, #8]
 800c3fa:	4b92      	ldr	r3, [pc, #584]	; (800c644 <BIOS_Ctrl+0x2d0>)
 800c3fc:	681b      	ldr	r3, [r3, #0]
 800c3fe:	f042 0201 	orr.w	r2, r2, #1
 800c402:	609a      	str	r2, [r3, #8]
                    __HAL_TIM_ENABLE(&htim1);  /*TIM1->CR1 = 0x0081; */
 800c404:	4b90      	ldr	r3, [pc, #576]	; (800c648 <BIOS_Ctrl+0x2d4>)
 800c406:	681b      	ldr	r3, [r3, #0]
 800c408:	681a      	ldr	r2, [r3, #0]
 800c40a:	4b8f      	ldr	r3, [pc, #572]	; (800c648 <BIOS_Ctrl+0x2d4>)
 800c40c:	681b      	ldr	r3, [r3, #0]
 800c40e:	f042 0201 	orr.w	r2, r2, #1
 800c412:	601a      	str	r2, [r3, #0]
    			  break;
 800c414:	e10a      	b.n	800c62c <BIOS_Ctrl+0x2b8>

    case SMPLTIM:
    			  octim1.Pulse = (Val+1)/2;
 800c416:	683b      	ldr	r3, [r7, #0]
 800c418:	3301      	adds	r3, #1
 800c41a:	085b      	lsrs	r3, r3, #1
 800c41c:	4a8b      	ldr	r2, [pc, #556]	; (800c64c <BIOS_Ctrl+0x2d8>)
 800c41e:	6053      	str	r3, [r2, #4]
    			  HAL_TIM_OC_ConfigChannel(&htim1, &octim1, 1 );
 800c420:	2201      	movs	r2, #1
 800c422:	498a      	ldr	r1, [pc, #552]	; (800c64c <BIOS_Ctrl+0x2d8>)
 800c424:	4888      	ldr	r0, [pc, #544]	; (800c648 <BIOS_Ctrl+0x2d4>)
 800c426:	f010 ffff 	bl	801d428 <HAL_TIM_OC_ConfigChannel>
    			  htim1.Init.Prescaler = 0;
 800c42a:	4b87      	ldr	r3, [pc, #540]	; (800c648 <BIOS_Ctrl+0x2d4>)
 800c42c:	2200      	movs	r2, #0
 800c42e:	605a      	str	r2, [r3, #4]
    			  htim1.Init.Period = Val -1;
 800c430:	683b      	ldr	r3, [r7, #0]
 800c432:	3b01      	subs	r3, #1
 800c434:	4a84      	ldr	r2, [pc, #528]	; (800c648 <BIOS_Ctrl+0x2d4>)
 800c436:	60d3      	str	r3, [r2, #12]
    			  HAL_TIM_Base_Init(&htim1);
 800c438:	4883      	ldr	r0, [pc, #524]	; (800c648 <BIOS_Ctrl+0x2d4>)
 800c43a:	f010 fe2d 	bl	801d098 <HAL_TIM_Base_Init>
                  break;
 800c43e:	e0f8      	b.n	800c632 <BIOS_Ctrl+0x2be>

    case SMPLNUM:
    			  __HAL_TIM_URS_DISABLE(&htim1);
 800c440:	4b81      	ldr	r3, [pc, #516]	; (800c648 <BIOS_Ctrl+0x2d4>)
 800c442:	681b      	ldr	r3, [r3, #0]
 800c444:	681a      	ldr	r2, [r3, #0]
 800c446:	4b80      	ldr	r3, [pc, #512]	; (800c648 <BIOS_Ctrl+0x2d4>)
 800c448:	681b      	ldr	r3, [r3, #0]
 800c44a:	f022 0204 	bic.w	r2, r2, #4
 800c44e:	601a      	str	r2, [r3, #0]
    			  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800c450:	4b7d      	ldr	r3, [pc, #500]	; (800c648 <BIOS_Ctrl+0x2d4>)
 800c452:	2200      	movs	r2, #0
 800c454:	609a      	str	r2, [r3, #8]
    			  HAL_TIM_Base_Init(&htim1);
 800c456:	487c      	ldr	r0, [pc, #496]	; (800c648 <BIOS_Ctrl+0x2d4>)
 800c458:	f010 fe1e 	bl	801d098 <HAL_TIM_Base_Init>
    			  __HAL_DMA_SET_COUNTER( &hdma_adc1, Val);  /* DMA_CH_A->CNDTR = (u32)Val;    */
 800c45c:	683b      	ldr	r3, [r7, #0]
 800c45e:	b29a      	uxth	r2, r3
 800c460:	4b76      	ldr	r3, [pc, #472]	; (800c63c <BIOS_Ctrl+0x2c8>)
 800c462:	681b      	ldr	r3, [r3, #0]
 800c464:	605a      	str	r2, [r3, #4]
                  break;
 800c466:	e0e4      	b.n	800c632 <BIOS_Ctrl+0x2be>

    case AiRANGE: if(Val & DC)
 800c468:	683b      	ldr	r3, [r7, #0]
 800c46a:	f003 0302 	and.w	r3, r3, #2
 800c46e:	2b00      	cmp	r3, #0
 800c470:	d005      	beq.n	800c47e <BIOS_Ctrl+0x10a>
    				  HAL_GPIO_WritePin(Az_GPIO_Port, Az_Pin,GPIO_PIN_SET);  // AZ_HIGH;
 800c472:	2201      	movs	r2, #1
 800c474:	2110      	movs	r1, #16
 800c476:	4876      	ldr	r0, [pc, #472]	; (800c650 <BIOS_Ctrl+0x2dc>)
 800c478:	f00d fcbe 	bl	8019df8 <HAL_GPIO_WritePin>
 800c47c:	e004      	b.n	800c488 <BIOS_Ctrl+0x114>
                  else
                	  HAL_GPIO_WritePin(Az_GPIO_Port, Az_Pin,GPIO_PIN_RESET);  //AZ_LOW;   CH_A_AC
 800c47e:	2200      	movs	r2, #0
 800c480:	2110      	movs	r1, #16
 800c482:	4873      	ldr	r0, [pc, #460]	; (800c650 <BIOS_Ctrl+0x2dc>)
 800c484:	f00d fcb8 	bl	8019df8 <HAL_GPIO_WritePin>
                  if(Val & HV)
 800c488:	683b      	ldr	r3, [r7, #0]
 800c48a:	f003 0301 	and.w	r3, r3, #1
 800c48e:	2b00      	cmp	r3, #0
 800c490:	d005      	beq.n	800c49e <BIOS_Ctrl+0x12a>
                	  HAL_GPIO_WritePin(Ay_GPIO_Port, Ay_Pin,GPIO_PIN_SET);  //AY_HIGH;  CH_A_HV
 800c492:	2201      	movs	r2, #1
 800c494:	2120      	movs	r1, #32
 800c496:	486e      	ldr	r0, [pc, #440]	; (800c650 <BIOS_Ctrl+0x2dc>)
 800c498:	f00d fcae 	bl	8019df8 <HAL_GPIO_WritePin>
 800c49c:	e004      	b.n	800c4a8 <BIOS_Ctrl+0x134>
                  else
                	  HAL_GPIO_WritePin(Ay_GPIO_Port, Ay_Pin,GPIO_PIN_RESET);  //AY_LOW;   CH_A_LV
 800c49e:	2200      	movs	r2, #0
 800c4a0:	2120      	movs	r1, #32
 800c4a2:	486b      	ldr	r0, [pc, #428]	; (800c650 <BIOS_Ctrl+0x2dc>)
 800c4a4:	f00d fca8 	bl	8019df8 <HAL_GPIO_WritePin>
                  if(Val & ACT)
 800c4a8:	683b      	ldr	r3, [r7, #0]
 800c4aa:	f003 0304 	and.w	r3, r3, #4
 800c4ae:	2b00      	cmp	r3, #0
 800c4b0:	d005      	beq.n	800c4be <BIOS_Ctrl+0x14a>
                	  HAL_GPIO_WritePin(Ax_GPIO_Port, Ax_Pin,GPIO_PIN_SET);  //AX_HIGH;  CH_A_ACT
 800c4b2:	2201      	movs	r2, #1
 800c4b4:	2101      	movs	r1, #1
 800c4b6:	4867      	ldr	r0, [pc, #412]	; (800c654 <BIOS_Ctrl+0x2e0>)
 800c4b8:	f00d fc9e 	bl	8019df8 <HAL_GPIO_WritePin>
                  else
                	  HAL_GPIO_WritePin(Ax_GPIO_Port, Ax_Pin,GPIO_PIN_RESET);  //AX_LOW;   CH_A_GND
                  break;
 800c4bc:	e0b9      	b.n	800c632 <BIOS_Ctrl+0x2be>
                	  HAL_GPIO_WritePin(Ax_GPIO_Port, Ax_Pin,GPIO_PIN_RESET);  //AX_LOW;   CH_A_GND
 800c4be:	2200      	movs	r2, #0
 800c4c0:	2101      	movs	r1, #1
 800c4c2:	4864      	ldr	r0, [pc, #400]	; (800c654 <BIOS_Ctrl+0x2e0>)
 800c4c4:	f00d fc98 	bl	8019df8 <HAL_GPIO_WritePin>
                  break;
 800c4c8:	e0b3      	b.n	800c632 <BIOS_Ctrl+0x2be>

    case AOFFSET: HAL_DAC_SetValue( &hdac, DAC_CHANNEL_2, DAC_ALIGN_12B_R, Val);  /*DAC->DHR12R2  = (u16)Val; */
 800c4ca:	683b      	ldr	r3, [r7, #0]
 800c4cc:	2200      	movs	r2, #0
 800c4ce:	2110      	movs	r1, #16
 800c4d0:	4861      	ldr	r0, [pc, #388]	; (800c658 <BIOS_Ctrl+0x2e4>)
 800c4d2:	f00c fc7c 	bl	8018dce <HAL_DAC_SetValue>
                  break;
 800c4d6:	e0ac      	b.n	800c632 <BIOS_Ctrl+0x2be>

    case DAC_TIM:
    			  htim7.Init.Period = Val-1;
 800c4d8:	683b      	ldr	r3, [r7, #0]
 800c4da:	3b01      	subs	r3, #1
 800c4dc:	4a5f      	ldr	r2, [pc, #380]	; (800c65c <BIOS_Ctrl+0x2e8>)
 800c4de:	60d3      	str	r3, [r2, #12]
    			  HAL_TIM_Base_Init(&htim7);
 800c4e0:	485e      	ldr	r0, [pc, #376]	; (800c65c <BIOS_Ctrl+0x2e8>)
 800c4e2:	f010 fdd9 	bl	801d098 <HAL_TIM_Base_Init>
    			  break;
 800c4e6:	e0a4      	b.n	800c632 <BIOS_Ctrl+0x2be>

    case OUT_BUF:
    // need to do this at low level
        		  // set circular  /* OUT_DMA->CCR   = 0x15B0; // PL=01, M/P_SIZE=0101, M/P_INC=10, CIRC=1, DIR=1, En=0 */
    			  dma_tmp = hdma_dac1.Instance->CR;
 800c4e8:	4b5d      	ldr	r3, [pc, #372]	; (800c660 <BIOS_Ctrl+0x2ec>)
 800c4ea:	681b      	ldr	r3, [r3, #0]
 800c4ec:	681b      	ldr	r3, [r3, #0]
 800c4ee:	61fb      	str	r3, [r7, #28]
    			  dma_tmp &= 0x0FFFFEDE;
 800c4f0:	69fa      	ldr	r2, [r7, #28]
 800c4f2:	4b5c      	ldr	r3, [pc, #368]	; (800c664 <BIOS_Ctrl+0x2f0>)
 800c4f4:	4013      	ands	r3, r2
 800c4f6:	61fb      	str	r3, [r7, #28]
    			  dma_tmp |= 0x120; //set circ and pfctrl
 800c4f8:	69fb      	ldr	r3, [r7, #28]
 800c4fa:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 800c4fe:	61fb      	str	r3, [r7, #28]
				  hdma_dac1.Instance->CR = dma_tmp;
 800c500:	4b57      	ldr	r3, [pc, #348]	; (800c660 <BIOS_Ctrl+0x2ec>)
 800c502:	681b      	ldr	r3, [r3, #0]
 800c504:	69fa      	ldr	r2, [r7, #28]
 800c506:	601a      	str	r2, [r3, #0]
         		  hdma_dac1.Instance->PAR = hdac.Instance->DHR12R1;  /* OUT_DMA->CPAR  = (u32)&DAC->DHR12R1; */
 800c508:	4b53      	ldr	r3, [pc, #332]	; (800c658 <BIOS_Ctrl+0x2e4>)
 800c50a:	681a      	ldr	r2, [r3, #0]
 800c50c:	4b54      	ldr	r3, [pc, #336]	; (800c660 <BIOS_Ctrl+0x2ec>)
 800c50e:	681b      	ldr	r3, [r3, #0]
 800c510:	6892      	ldr	r2, [r2, #8]
 800c512:	609a      	str	r2, [r3, #8]
        		  hdma_dac1.Instance->M0AR = Val;  /*  OUT_DMA->CMAR  = (u32)Val; */
 800c514:	4b52      	ldr	r3, [pc, #328]	; (800c660 <BIOS_Ctrl+0x2ec>)
 800c516:	681b      	ldr	r3, [r3, #0]
 800c518:	683a      	ldr	r2, [r7, #0]
 800c51a:	60da      	str	r2, [r3, #12]
                  break;
 800c51c:	e089      	b.n	800c632 <BIOS_Ctrl+0x2be>

    case OUT_CNT:
    			  __HAL_DMA_SET_COUNTER( &hdma_dac1, Val);  /*OUT_DMA->CNDTR = (u16)Val; */
 800c51e:	683b      	ldr	r3, [r7, #0]
 800c520:	b29a      	uxth	r2, r3
 800c522:	4b4f      	ldr	r3, [pc, #316]	; (800c660 <BIOS_Ctrl+0x2ec>)
 800c524:	681b      	ldr	r3, [r3, #0]
 800c526:	605a      	str	r2, [r3, #4]
    			  break;
 800c528:	e083      	b.n	800c632 <BIOS_Ctrl+0x2be>

    case OUT_MOD:
      GPIO_InitStructure.Speed = GPIO_SPEED_FREQ_MEDIUM;
 800c52a:	2301      	movs	r3, #1
 800c52c:	617b      	str	r3, [r7, #20]
 800c52e:	683b      	ldr	r3, [r7, #0]
 800c530:	2b04      	cmp	r3, #4
 800c532:	d009      	beq.n	800c548 <BIOS_Ctrl+0x1d4>
 800c534:	683b      	ldr	r3, [r7, #0]
 800c536:	2b04      	cmp	r3, #4
 800c538:	d87a      	bhi.n	800c630 <BIOS_Ctrl+0x2bc>
 800c53a:	683b      	ldr	r3, [r7, #0]
 800c53c:	2b00      	cmp	r3, #0
 800c53e:	d04d      	beq.n	800c5dc <BIOS_Ctrl+0x268>
 800c540:	683b      	ldr	r3, [r7, #0]
 800c542:	2b02      	cmp	r3, #2
 800c544:	d025      	beq.n	800c592 <BIOS_Ctrl+0x21e>
                                  GPIO_InitStructure.Pin   = Fo4_Pin ;
                                  GPIO_InitStructure.Mode  = GPIO_MODE_INPUT;
                                  HAL_GPIO_Init(Fo4_GPIO_Port, &GPIO_InitStructure);
                                  break;
                  }
                  break;
 800c546:	e073      	b.n	800c630 <BIOS_Ctrl+0x2bc>
                                  __HAL_DMA_DISABLE(&hdma_dac1); // OUT_DMA->CCR &= 0xFFFE;               //�رղ������DMA
 800c548:	4b45      	ldr	r3, [pc, #276]	; (800c660 <BIOS_Ctrl+0x2ec>)
 800c54a:	681b      	ldr	r3, [r3, #0]
 800c54c:	681a      	ldr	r2, [r3, #0]
 800c54e:	4b44      	ldr	r3, [pc, #272]	; (800c660 <BIOS_Ctrl+0x2ec>)
 800c550:	681b      	ldr	r3, [r3, #0]
 800c552:	f022 0201 	bic.w	r2, r2, #1
 800c556:	601a      	str	r2, [r3, #0]
                    		      __HAL_DAC_DISABLE(&hdac, DAC_CHANNEL_1);
 800c558:	4b3f      	ldr	r3, [pc, #252]	; (800c658 <BIOS_Ctrl+0x2e4>)
 800c55a:	681b      	ldr	r3, [r3, #0]
 800c55c:	681a      	ldr	r2, [r3, #0]
 800c55e:	4b3e      	ldr	r3, [pc, #248]	; (800c658 <BIOS_Ctrl+0x2e4>)
 800c560:	681b      	ldr	r3, [r3, #0]
 800c562:	f022 0201 	bic.w	r2, r2, #1
 800c566:	601a      	str	r2, [r3, #0]
                                  GPIO_InitStructure.Pin   = Fo2_Pin;
 800c568:	2304      	movs	r3, #4
 800c56a:	60bb      	str	r3, [r7, #8]
                                  GPIO_InitStructure.Mode  = GPIO_MODE_AF_PP;
 800c56c:	2302      	movs	r3, #2
 800c56e:	60fb      	str	r3, [r7, #12]
                                  HAL_GPIO_Init(Fo2_GPIO_Port, &GPIO_InitStructure);
 800c570:	f107 0308 	add.w	r3, r7, #8
 800c574:	4619      	mov	r1, r3
 800c576:	483c      	ldr	r0, [pc, #240]	; (800c668 <BIOS_Ctrl+0x2f4>)
 800c578:	f00d fa92 	bl	8019aa0 <HAL_GPIO_Init>
                                  GPIO_InitStructure.Pin   = Fo4_Pin ;
 800c57c:	2310      	movs	r3, #16
 800c57e:	60bb      	str	r3, [r7, #8]
                                  GPIO_InitStructure.Mode  = GPIO_MODE_INPUT;
 800c580:	2300      	movs	r3, #0
 800c582:	60fb      	str	r3, [r7, #12]
                                  HAL_GPIO_Init(Fo4_GPIO_Port, &GPIO_InitStructure);
 800c584:	f107 0308 	add.w	r3, r7, #8
 800c588:	4619      	mov	r1, r3
 800c58a:	4837      	ldr	r0, [pc, #220]	; (800c668 <BIOS_Ctrl+0x2f4>)
 800c58c:	f00d fa88 	bl	8019aa0 <HAL_GPIO_Init>
                                  break;
 800c590:	e049      	b.n	800c626 <BIOS_Ctrl+0x2b2>
                    			  GPIO_InitStructure.Pin   = Fo2_Pin ;
 800c592:	2304      	movs	r3, #4
 800c594:	60bb      	str	r3, [r7, #8]
                                  GPIO_InitStructure.Mode  = GPIO_MODE_INPUT;
 800c596:	2300      	movs	r3, #0
 800c598:	60fb      	str	r3, [r7, #12]
                                  HAL_GPIO_Init(Fo2_GPIO_Port, &GPIO_InitStructure);
 800c59a:	f107 0308 	add.w	r3, r7, #8
 800c59e:	4619      	mov	r1, r3
 800c5a0:	4831      	ldr	r0, [pc, #196]	; (800c668 <BIOS_Ctrl+0x2f4>)
 800c5a2:	f00d fa7d 	bl	8019aa0 <HAL_GPIO_Init>
                                  GPIO_InitStructure.Pin   = Fo4_Pin ;
 800c5a6:	2310      	movs	r3, #16
 800c5a8:	60bb      	str	r3, [r7, #8]
                                  GPIO_InitStructure.Mode  = GPIO_MODE_ANALOG;
 800c5aa:	2303      	movs	r3, #3
 800c5ac:	60fb      	str	r3, [r7, #12]
                                  HAL_GPIO_Init(Fo4_GPIO_Port, &GPIO_InitStructure);
 800c5ae:	f107 0308 	add.w	r3, r7, #8
 800c5b2:	4619      	mov	r1, r3
 800c5b4:	482c      	ldr	r0, [pc, #176]	; (800c668 <BIOS_Ctrl+0x2f4>)
 800c5b6:	f00d fa73 	bl	8019aa0 <HAL_GPIO_Init>
                                  __HAL_DMA_ENABLE(&hdma_dac1);  // OUT_DMA->CCR |= ENABLE;               //���������DMA
 800c5ba:	4b29      	ldr	r3, [pc, #164]	; (800c660 <BIOS_Ctrl+0x2ec>)
 800c5bc:	681b      	ldr	r3, [r3, #0]
 800c5be:	681a      	ldr	r2, [r3, #0]
 800c5c0:	4b27      	ldr	r3, [pc, #156]	; (800c660 <BIOS_Ctrl+0x2ec>)
 800c5c2:	681b      	ldr	r3, [r3, #0]
 800c5c4:	f042 0201 	orr.w	r2, r2, #1
 800c5c8:	601a      	str	r2, [r3, #0]
                                  __HAL_DAC_ENABLE(&hdac, DAC_CHANNEL_1);
 800c5ca:	4b23      	ldr	r3, [pc, #140]	; (800c658 <BIOS_Ctrl+0x2e4>)
 800c5cc:	681b      	ldr	r3, [r3, #0]
 800c5ce:	681a      	ldr	r2, [r3, #0]
 800c5d0:	4b21      	ldr	r3, [pc, #132]	; (800c658 <BIOS_Ctrl+0x2e4>)
 800c5d2:	681b      	ldr	r3, [r3, #0]
 800c5d4:	f042 0201 	orr.w	r2, r2, #1
 800c5d8:	601a      	str	r2, [r3, #0]
                                  break;
 800c5da:	e024      	b.n	800c626 <BIOS_Ctrl+0x2b2>
                    			  __HAL_DMA_DISABLE(&hdma_dac1);  // OUT_DMA->CCR &= 0xFFFE;                //�رղ������DMA
 800c5dc:	4b20      	ldr	r3, [pc, #128]	; (800c660 <BIOS_Ctrl+0x2ec>)
 800c5de:	681b      	ldr	r3, [r3, #0]
 800c5e0:	681a      	ldr	r2, [r3, #0]
 800c5e2:	4b1f      	ldr	r3, [pc, #124]	; (800c660 <BIOS_Ctrl+0x2ec>)
 800c5e4:	681b      	ldr	r3, [r3, #0]
 800c5e6:	f022 0201 	bic.w	r2, r2, #1
 800c5ea:	601a      	str	r2, [r3, #0]
                    		      __HAL_DAC_DISABLE(&hdac, DAC_CHANNEL_1);
 800c5ec:	4b1a      	ldr	r3, [pc, #104]	; (800c658 <BIOS_Ctrl+0x2e4>)
 800c5ee:	681b      	ldr	r3, [r3, #0]
 800c5f0:	681a      	ldr	r2, [r3, #0]
 800c5f2:	4b19      	ldr	r3, [pc, #100]	; (800c658 <BIOS_Ctrl+0x2e4>)
 800c5f4:	681b      	ldr	r3, [r3, #0]
 800c5f6:	f022 0201 	bic.w	r2, r2, #1
 800c5fa:	601a      	str	r2, [r3, #0]
                                  GPIO_InitStructure.Pin   = Fo2_Pin ;
 800c5fc:	2304      	movs	r3, #4
 800c5fe:	60bb      	str	r3, [r7, #8]
                                  GPIO_InitStructure.Mode  = GPIO_MODE_AF_PP;
 800c600:	2302      	movs	r3, #2
 800c602:	60fb      	str	r3, [r7, #12]
                                  HAL_GPIO_Init(Fo2_GPIO_Port, &GPIO_InitStructure);
 800c604:	f107 0308 	add.w	r3, r7, #8
 800c608:	4619      	mov	r1, r3
 800c60a:	4817      	ldr	r0, [pc, #92]	; (800c668 <BIOS_Ctrl+0x2f4>)
 800c60c:	f00d fa48 	bl	8019aa0 <HAL_GPIO_Init>
                                  GPIO_InitStructure.Pin   = Fo4_Pin ;
 800c610:	2310      	movs	r3, #16
 800c612:	60bb      	str	r3, [r7, #8]
                                  GPIO_InitStructure.Mode  = GPIO_MODE_INPUT;
 800c614:	2300      	movs	r3, #0
 800c616:	60fb      	str	r3, [r7, #12]
                                  HAL_GPIO_Init(Fo4_GPIO_Port, &GPIO_InitStructure);
 800c618:	f107 0308 	add.w	r3, r7, #8
 800c61c:	4619      	mov	r1, r3
 800c61e:	4812      	ldr	r0, [pc, #72]	; (800c668 <BIOS_Ctrl+0x2f4>)
 800c620:	f00d fa3e 	bl	8019aa0 <HAL_GPIO_Init>
                                  break;
 800c624:	bf00      	nop
                  break;
 800c626:	e003      	b.n	800c630 <BIOS_Ctrl+0x2bc>

    default: break;
 800c628:	bf00      	nop
 800c62a:	e002      	b.n	800c632 <BIOS_Ctrl+0x2be>
    			  break;
 800c62c:	bf00      	nop
 800c62e:	e000      	b.n	800c632 <BIOS_Ctrl+0x2be>
                  break;
 800c630:	bf00      	nop
  }
}
 800c632:	bf00      	nop
 800c634:	3720      	adds	r7, #32
 800c636:	46bd      	mov	sp, r7
 800c638:	bd80      	pop	{r7, pc}
 800c63a:	bf00      	nop
 800c63c:	20006b18 	.word	0x20006b18
 800c640:	20006a84 	.word	0x20006a84
 800c644:	200068f4 	.word	0x200068f4
 800c648:	20006b94 	.word	0x20006b94
 800c64c:	20006b78 	.word	0x20006b78
 800c650:	40020800 	.word	0x40020800
 800c654:	40020400 	.word	0x40020400
 800c658:	20006b04 	.word	0x20006b04
 800c65c:	20006bdc 	.word	0x20006bdc
 800c660:	20006a24 	.word	0x20006a24
 800c664:	0ffffede 	.word	0x0ffffede
 800c668:	40020000 	.word	0x40020000

0800c66c <Set_Base>:

/*******************************************************************************
 Set_Base: ˮƽɨ��ʱ��ת������
*******************************************************************************/
void Set_Base(short Base)
{
 800c66c:	b580      	push	{r7, lr}
 800c66e:	b082      	sub	sp, #8
 800c670:	af00      	add	r7, sp, #0
 800c672:	4603      	mov	r3, r0
 800c674:	80fb      	strh	r3, [r7, #6]
	octim1.Pulse = (ARR[Base]+1)/2;
 800c676:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800c67a:	4a13      	ldr	r2, [pc, #76]	; (800c6c8 <Set_Base+0x5c>)
 800c67c:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800c680:	3301      	adds	r3, #1
 800c682:	0fda      	lsrs	r2, r3, #31
 800c684:	4413      	add	r3, r2
 800c686:	105b      	asrs	r3, r3, #1
 800c688:	461a      	mov	r2, r3
 800c68a:	4b10      	ldr	r3, [pc, #64]	; (800c6cc <Set_Base+0x60>)
 800c68c:	605a      	str	r2, [r3, #4]
	HAL_TIM_OC_ConfigChannel(&htim1, &octim1, 1 );
 800c68e:	2201      	movs	r2, #1
 800c690:	490e      	ldr	r1, [pc, #56]	; (800c6cc <Set_Base+0x60>)
 800c692:	480f      	ldr	r0, [pc, #60]	; (800c6d0 <Set_Base+0x64>)
 800c694:	f010 fec8 	bl	801d428 <HAL_TIM_OC_ConfigChannel>
	htim1.Init.Prescaler = PSC[Base];
 800c698:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800c69c:	4a0d      	ldr	r2, [pc, #52]	; (800c6d4 <Set_Base+0x68>)
 800c69e:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800c6a2:	461a      	mov	r2, r3
 800c6a4:	4b0a      	ldr	r3, [pc, #40]	; (800c6d0 <Set_Base+0x64>)
 800c6a6:	605a      	str	r2, [r3, #4]
	htim1.Init.Period = ARR[Base];
 800c6a8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800c6ac:	4a06      	ldr	r2, [pc, #24]	; (800c6c8 <Set_Base+0x5c>)
 800c6ae:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800c6b2:	461a      	mov	r2, r3
 800c6b4:	4b06      	ldr	r3, [pc, #24]	; (800c6d0 <Set_Base+0x64>)
 800c6b6:	60da      	str	r2, [r3, #12]
	HAL_TIM_Base_Init(&htim1);
 800c6b8:	4805      	ldr	r0, [pc, #20]	; (800c6d0 <Set_Base+0x64>)
 800c6ba:	f010 fced 	bl	801d098 <HAL_TIM_Base_Init>
}
 800c6be:	bf00      	nop
 800c6c0:	3708      	adds	r7, #8
 800c6c2:	46bd      	mov	sp, r7
 800c6c4:	bd80      	pop	{r7, pc}
 800c6c6:	bf00      	nop
 800c6c8:	08000b30 	.word	0x08000b30
 800c6cc:	20006b78 	.word	0x20006b78
 800c6d0:	20006b94 	.word	0x20006b94
 800c6d4:	08000b08 	.word	0x08000b08

0800c6d8 <Set_Duty>:

/*******************************************************************************
 Set_Duty: �������ռ�ձ�����
*******************************************************************************/
void Set_Duty(void)
{
 800c6d8:	b580      	push	{r7, lr}
 800c6da:	af00      	add	r7, sp, #0
	 octim5.Pulse = (FARR[List[FREQ_OUT].Val]+1)*(10-List[FREQ_DUT].Val)/10;
 800c6dc:	4b0f      	ldr	r3, [pc, #60]	; (800c71c <Set_Duty+0x44>)
 800c6de:	f9b3 312c 	ldrsh.w	r3, [r3, #300]	; 0x12c
 800c6e2:	461a      	mov	r2, r3
 800c6e4:	4b0e      	ldr	r3, [pc, #56]	; (800c720 <Set_Duty+0x48>)
 800c6e6:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 800c6ea:	3301      	adds	r3, #1
 800c6ec:	4a0b      	ldr	r2, [pc, #44]	; (800c71c <Set_Duty+0x44>)
 800c6ee:	f9b2 2134 	ldrsh.w	r2, [r2, #308]	; 0x134
 800c6f2:	f1c2 020a 	rsb	r2, r2, #10
 800c6f6:	fb02 f303 	mul.w	r3, r2, r3
 800c6fa:	4a0a      	ldr	r2, [pc, #40]	; (800c724 <Set_Duty+0x4c>)
 800c6fc:	fb82 1203 	smull	r1, r2, r2, r3
 800c700:	1092      	asrs	r2, r2, #2
 800c702:	17db      	asrs	r3, r3, #31
 800c704:	1ad3      	subs	r3, r2, r3
 800c706:	461a      	mov	r2, r3
 800c708:	4b07      	ldr	r3, [pc, #28]	; (800c728 <Set_Duty+0x50>)
 800c70a:	605a      	str	r2, [r3, #4]
	 HAL_TIM_OC_ConfigChannel(&htim5, &octim5, 3 );
 800c70c:	2203      	movs	r2, #3
 800c70e:	4906      	ldr	r1, [pc, #24]	; (800c728 <Set_Duty+0x50>)
 800c710:	4806      	ldr	r0, [pc, #24]	; (800c72c <Set_Duty+0x54>)
 800c712:	f010 fe89 	bl	801d428 <HAL_TIM_OC_ConfigChannel>
}
 800c716:	bf00      	nop
 800c718:	bd80      	pop	{r7, pc}
 800c71a:	bf00      	nop
 800c71c:	2000029c 	.word	0x2000029c
 800c720:	08000ae8 	.word	0x08000ae8
 800c724:	66666667 	.word	0x66666667
 800c728:	20006ae8 	.word	0x20006ae8
 800c72c:	2000693c 	.word	0x2000693c

0800c730 <Set_Fout>:

/*******************************************************************************
 Set_Fout: �������Ƶ������
*******************************************************************************/
void Set_Fout(short Range)
{
 800c730:	b580      	push	{r7, lr}
 800c732:	b082      	sub	sp, #8
 800c734:	af00      	add	r7, sp, #0
 800c736:	4603      	mov	r3, r0
 800c738:	80fb      	strh	r3, [r7, #6]
	octim5.Pulse = (FARR[Range]+1)/2;
 800c73a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800c73e:	4a13      	ldr	r2, [pc, #76]	; (800c78c <Set_Fout+0x5c>)
 800c740:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800c744:	3301      	adds	r3, #1
 800c746:	0fda      	lsrs	r2, r3, #31
 800c748:	4413      	add	r3, r2
 800c74a:	105b      	asrs	r3, r3, #1
 800c74c:	461a      	mov	r2, r3
 800c74e:	4b10      	ldr	r3, [pc, #64]	; (800c790 <Set_Fout+0x60>)
 800c750:	605a      	str	r2, [r3, #4]
	HAL_TIM_OC_ConfigChannel(&htim5, &octim5, 3 );
 800c752:	2203      	movs	r2, #3
 800c754:	490e      	ldr	r1, [pc, #56]	; (800c790 <Set_Fout+0x60>)
 800c756:	480f      	ldr	r0, [pc, #60]	; (800c794 <Set_Fout+0x64>)
 800c758:	f010 fe66 	bl	801d428 <HAL_TIM_OC_ConfigChannel>
	htim5.Init.Prescaler = FPSC[Range];
 800c75c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800c760:	4a0d      	ldr	r2, [pc, #52]	; (800c798 <Set_Fout+0x68>)
 800c762:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800c766:	461a      	mov	r2, r3
 800c768:	4b0a      	ldr	r3, [pc, #40]	; (800c794 <Set_Fout+0x64>)
 800c76a:	605a      	str	r2, [r3, #4]
	htim5.Init.Period = FARR[Range];
 800c76c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800c770:	4a06      	ldr	r2, [pc, #24]	; (800c78c <Set_Fout+0x5c>)
 800c772:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800c776:	461a      	mov	r2, r3
 800c778:	4b06      	ldr	r3, [pc, #24]	; (800c794 <Set_Fout+0x64>)
 800c77a:	60da      	str	r2, [r3, #12]
	HAL_TIM_Base_Init(&htim5);
 800c77c:	4805      	ldr	r0, [pc, #20]	; (800c794 <Set_Fout+0x64>)
 800c77e:	f010 fc8b 	bl	801d098 <HAL_TIM_Base_Init>
}
 800c782:	bf00      	nop
 800c784:	3708      	adds	r7, #8
 800c786:	46bd      	mov	sp, r7
 800c788:	bd80      	pop	{r7, pc}
 800c78a:	bf00      	nop
 800c78c:	08000ae8 	.word	0x08000ae8
 800c790:	20006ae8 	.word	0x20006ae8
 800c794:	2000693c 	.word	0x2000693c
 800c798:	08000ac8 	.word	0x08000ac8

0800c79c <ADC_Start>:

/*******************************************************************************
 ADC_Start: ���¿�ʼADCɨ�����
*******************************************************************************/
void ADC_Start(void)
{
 800c79c:	b480      	push	{r7}
 800c79e:	af00      	add	r7, sp, #0
  Sampl[0]   = List[TIM_BASE].Val;         // �������ʱ����λֵ
 800c7a0:	4b20      	ldr	r3, [pc, #128]	; (800c824 <ADC_Start+0x88>)
 800c7a2:	f9b3 203c 	ldrsh.w	r2, [r3, #60]	; 0x3c
 800c7a6:	4b20      	ldr	r3, [pc, #128]	; (800c828 <ADC_Start+0x8c>)
 800c7a8:	801a      	strh	r2, [r3, #0]
  __HAL_DMA_DISABLE(&hdma_adc1);  //  DMA1_Channel1->CCR   &= 0xFFFFFFFFE;
 800c7aa:	4b20      	ldr	r3, [pc, #128]	; (800c82c <ADC_Start+0x90>)
 800c7ac:	681b      	ldr	r3, [r3, #0]
 800c7ae:	681a      	ldr	r2, [r3, #0]
 800c7b0:	4b1e      	ldr	r3, [pc, #120]	; (800c82c <ADC_Start+0x90>)
 800c7b2:	681b      	ldr	r3, [r3, #0]
 800c7b4:	f022 0201 	bic.w	r2, r2, #1
 800c7b8:	601a      	str	r2, [r3, #0]
  hdma_adc1.Instance->M0AR = (unsigned)&Sampl[2];//  DMA1_Channel1->CMAR  = (u32)&Sampl[2];      // �����趨DMAͨ��1
 800c7ba:	4b1c      	ldr	r3, [pc, #112]	; (800c82c <ADC_Start+0x90>)
 800c7bc:	681b      	ldr	r3, [r3, #0]
 800c7be:	4a1c      	ldr	r2, [pc, #112]	; (800c830 <ADC_Start+0x94>)
 800c7c0:	60da      	str	r2, [r3, #12]
  if(( List[SYNCMODE].Val == NONE|| List[SYNCMODE].Val == SCAN)
 800c7c2:	4b18      	ldr	r3, [pc, #96]	; (800c824 <ADC_Start+0x88>)
 800c7c4:	f9b3 306c 	ldrsh.w	r3, [r3, #108]	; 0x6c
 800c7c8:	2b05      	cmp	r3, #5
 800c7ca:	d004      	beq.n	800c7d6 <ADC_Start+0x3a>
 800c7cc:	4b15      	ldr	r3, [pc, #84]	; (800c824 <ADC_Start+0x88>)
 800c7ce:	f9b3 306c 	ldrsh.w	r3, [r3, #108]	; 0x6c
 800c7d2:	2b01      	cmp	r3, #1
 800c7d4:	d10e      	bne.n	800c7f4 <ADC_Start+0x58>
     &&( List[TIM_BASE].Val>11))
 800c7d6:	4b13      	ldr	r3, [pc, #76]	; (800c824 <ADC_Start+0x88>)
 800c7d8:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800c7dc:	2b0b      	cmp	r3, #11
 800c7de:	dd09      	ble.n	800c7f4 <ADC_Start+0x58>
     {
	  __HAL_DMA_SET_COUNTER(&hdma_adc1, 302);  //       DMA1_Channel1->CNDTR  = 302;                       //10ms
 800c7e0:	4b12      	ldr	r3, [pc, #72]	; (800c82c <ADC_Start+0x90>)
 800c7e2:	681b      	ldr	r3, [r3, #0]
 800c7e4:	f44f 7297 	mov.w	r2, #302	; 0x12e
 800c7e8:	605a      	str	r2, [r3, #4]
       List[VIEWPOSI].Val= 0;
 800c7ea:	4b0e      	ldr	r3, [pc, #56]	; (800c824 <ADC_Start+0x88>)
 800c7ec:	2200      	movs	r2, #0
 800c7ee:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
 800c7f2:	e00a      	b.n	800c80a <ADC_Start+0x6e>
     }
  else
  __HAL_DMA_SET_COUNTER(&hdma_adc1, DEPTH[List[SMPL_DPTH].Val]);//    DMA1_Channel1->CNDTR = DEPTH[List[SMPL_DPTH].Val]; // 0x00001000;
 800c7f4:	4b0b      	ldr	r3, [pc, #44]	; (800c824 <ADC_Start+0x88>)
 800c7f6:	f9b3 304c 	ldrsh.w	r3, [r3, #76]	; 0x4c
 800c7fa:	461a      	mov	r2, r3
 800c7fc:	4b0d      	ldr	r3, [pc, #52]	; (800c834 <ADC_Start+0x98>)
 800c7fe:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 800c802:	b29a      	uxth	r2, r3
 800c804:	4b09      	ldr	r3, [pc, #36]	; (800c82c <ADC_Start+0x90>)
 800c806:	681b      	ldr	r3, [r3, #0]
 800c808:	605a      	str	r2, [r3, #4]
  __HAL_DMA_ENABLE(&hdma_adc1);  //  DMA1_Channel1->CCR  |= 0x00000001;                 // ���¿�ʼɨ�����
 800c80a:	4b08      	ldr	r3, [pc, #32]	; (800c82c <ADC_Start+0x90>)
 800c80c:	681b      	ldr	r3, [r3, #0]
 800c80e:	681a      	ldr	r2, [r3, #0]
 800c810:	4b06      	ldr	r3, [pc, #24]	; (800c82c <ADC_Start+0x90>)
 800c812:	681b      	ldr	r3, [r3, #0]
 800c814:	f042 0201 	orr.w	r2, r2, #1
 800c818:	601a      	str	r2, [r3, #0]
}
 800c81a:	bf00      	nop
 800c81c:	46bd      	mov	sp, r7
 800c81e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c822:	4770      	bx	lr
 800c824:	2000029c 	.word	0x2000029c
 800c828:	20002878 	.word	0x20002878
 800c82c:	20006b18 	.word	0x20006b18
 800c830:	2000287c 	.word	0x2000287c
 800c834:	08002270 	.word	0x08002270

0800c838 <fuzz>:

//  fuzzy equal returns 1 if close
char fuzz( short val, short last)
{
 800c838:	b480      	push	{r7}
 800c83a:	b083      	sub	sp, #12
 800c83c:	af00      	add	r7, sp, #0
 800c83e:	4603      	mov	r3, r0
 800c840:	460a      	mov	r2, r1
 800c842:	80fb      	strh	r3, [r7, #6]
 800c844:	4613      	mov	r3, r2
 800c846:	80bb      	strh	r3, [r7, #4]
	return 1;
 800c848:	2301      	movs	r3, #1
}
 800c84a:	4618      	mov	r0, r3
 800c84c:	370c      	adds	r7, #12
 800c84e:	46bd      	mov	sp, r7
 800c850:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c854:	4770      	bx	lr
	...

0800c858 <touchscan>:

//touchscan -- maps touch to key codes  returns 0 if no change
char touchscan(void)
{
 800c858:	b580      	push	{r7, lr}
 800c85a:	b082      	sub	sp, #8
 800c85c:	af00      	add	r7, sp, #0
	short x,y;
	char Code;

	Code =0;
 800c85e:	2300      	movs	r3, #0
 800c860:	71fb      	strb	r3, [r7, #7]
	if(Touch_Read(&x,&y)!=0)
 800c862:	1cba      	adds	r2, r7, #2
 800c864:	1d3b      	adds	r3, r7, #4
 800c866:	4611      	mov	r1, r2
 800c868:	4618      	mov	r0, r3
 800c86a:	f009 fe39 	bl	80164e0 <Touch_Read>
 800c86e:	4603      	mov	r3, r0
 800c870:	2b00      	cmp	r3, #0
 800c872:	d012      	beq.n	800c89a <touchscan+0x42>
	{
		if(fuzz(x,Lastx) & fuzz(y,Lasty))
 800c874:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800c878:	4a2a      	ldr	r2, [pc, #168]	; (800c924 <touchscan+0xcc>)
 800c87a:	8812      	ldrh	r2, [r2, #0]
 800c87c:	b212      	sxth	r2, r2
 800c87e:	4611      	mov	r1, r2
 800c880:	4618      	mov	r0, r3
 800c882:	f7ff ffd9 	bl	800c838 <fuzz>
 800c886:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800c88a:	4a27      	ldr	r2, [pc, #156]	; (800c928 <touchscan+0xd0>)
 800c88c:	8812      	ldrh	r2, [r2, #0]
 800c88e:	b212      	sxth	r2, r2
 800c890:	4611      	mov	r1, r2
 800c892:	4618      	mov	r0, r3
 800c894:	f7ff ffd0 	bl	800c838 <fuzz>
 800c898:	e036      	b.n	800c908 <touchscan+0xb0>

		}
	}
	else
	{
	      if(TmpKeyP) {Code = TmpKeyP; TmpKeyP = 0;}
 800c89a:	4b24      	ldr	r3, [pc, #144]	; (800c92c <touchscan+0xd4>)
 800c89c:	781b      	ldrb	r3, [r3, #0]
 800c89e:	b2db      	uxtb	r3, r3
 800c8a0:	2b00      	cmp	r3, #0
 800c8a2:	d005      	beq.n	800c8b0 <touchscan+0x58>
 800c8a4:	4b21      	ldr	r3, [pc, #132]	; (800c92c <touchscan+0xd4>)
 800c8a6:	781b      	ldrb	r3, [r3, #0]
 800c8a8:	71fb      	strb	r3, [r7, #7]
 800c8aa:	4b20      	ldr	r3, [pc, #128]	; (800c92c <touchscan+0xd4>)
 800c8ac:	2200      	movs	r2, #0
 800c8ae:	701a      	strb	r2, [r3, #0]
	      if(TmpKeyOK &&(KeymS_F)&& (KeymS_Cnt > KEYTIME))
 800c8b0:	4b1f      	ldr	r3, [pc, #124]	; (800c930 <touchscan+0xd8>)
 800c8b2:	781b      	ldrb	r3, [r3, #0]
 800c8b4:	b2db      	uxtb	r3, r3
 800c8b6:	2b00      	cmp	r3, #0
 800c8b8:	d018      	beq.n	800c8ec <touchscan+0x94>
 800c8ba:	4b1e      	ldr	r3, [pc, #120]	; (800c934 <touchscan+0xdc>)
 800c8bc:	781b      	ldrb	r3, [r3, #0]
 800c8be:	2b00      	cmp	r3, #0
 800c8c0:	d014      	beq.n	800c8ec <touchscan+0x94>
 800c8c2:	4b1d      	ldr	r3, [pc, #116]	; (800c938 <touchscan+0xe0>)
 800c8c4:	881b      	ldrh	r3, [r3, #0]
 800c8c6:	b21a      	sxth	r2, r3
 800c8c8:	4b1c      	ldr	r3, [pc, #112]	; (800c93c <touchscan+0xe4>)
 800c8ca:	f9b3 3000 	ldrsh.w	r3, [r3]
 800c8ce:	429a      	cmp	r2, r3
 800c8d0:	dd0c      	ble.n	800c8ec <touchscan+0x94>
	      {
	          Code = TmpKeyOK;
 800c8d2:	4b17      	ldr	r3, [pc, #92]	; (800c930 <touchscan+0xd8>)
 800c8d4:	781b      	ldrb	r3, [r3, #0]
 800c8d6:	71fb      	strb	r3, [r7, #7]
	          TmpKeyOK  = 0;
 800c8d8:	4b15      	ldr	r3, [pc, #84]	; (800c930 <touchscan+0xd8>)
 800c8da:	2200      	movs	r2, #0
 800c8dc:	701a      	strb	r2, [r3, #0]
	          KeymS_F = 0;
 800c8de:	4b15      	ldr	r3, [pc, #84]	; (800c934 <touchscan+0xdc>)
 800c8e0:	2200      	movs	r2, #0
 800c8e2:	701a      	strb	r2, [r3, #0]
	          KeymS_Cnt = 0;
 800c8e4:	4b14      	ldr	r3, [pc, #80]	; (800c938 <touchscan+0xe0>)
 800c8e6:	2200      	movs	r2, #0
 800c8e8:	801a      	strh	r2, [r3, #0]
 800c8ea:	e00a      	b.n	800c902 <touchscan+0xaa>
	      }
	      else
	    	  if(TmpKeyM) {Code = TmpKeyM; TmpKeyM = 0;}
 800c8ec:	4b14      	ldr	r3, [pc, #80]	; (800c940 <touchscan+0xe8>)
 800c8ee:	781b      	ldrb	r3, [r3, #0]
 800c8f0:	b2db      	uxtb	r3, r3
 800c8f2:	2b00      	cmp	r3, #0
 800c8f4:	d005      	beq.n	800c902 <touchscan+0xaa>
 800c8f6:	4b12      	ldr	r3, [pc, #72]	; (800c940 <touchscan+0xe8>)
 800c8f8:	781b      	ldrb	r3, [r3, #0]
 800c8fa:	71fb      	strb	r3, [r7, #7]
 800c8fc:	4b10      	ldr	r3, [pc, #64]	; (800c940 <touchscan+0xe8>)
 800c8fe:	2200      	movs	r2, #0
 800c900:	701a      	strb	r2, [r3, #0]
	        	Key_Wait_Cnt=50;                                //���ó������� 1.0S ����
 800c902:	4b10      	ldr	r3, [pc, #64]	; (800c944 <touchscan+0xec>)
 800c904:	2232      	movs	r2, #50	; 0x32
 800c906:	701a      	strb	r2, [r3, #0]
	}
	Lastx =x;
 800c908:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 800c90c:	4b05      	ldr	r3, [pc, #20]	; (800c924 <touchscan+0xcc>)
 800c90e:	801a      	strh	r2, [r3, #0]
	Lasty =y;
 800c910:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 800c914:	4b04      	ldr	r3, [pc, #16]	; (800c928 <touchscan+0xd0>)
 800c916:	801a      	strh	r2, [r3, #0]
	return Code;
 800c918:	79fb      	ldrb	r3, [r7, #7]
}
 800c91a:	4618      	mov	r0, r3
 800c91c:	3708      	adds	r7, #8
 800c91e:	46bd      	mov	sp, r7
 800c920:	bd80      	pop	{r7, pc}
 800c922:	bf00      	nop
 800c924:	20000002 	.word	0x20000002
 800c928:	20000004 	.word	0x20000004
 800c92c:	20000782 	.word	0x20000782
 800c930:	20000784 	.word	0x20000784
 800c934:	2000078e 	.word	0x2000078e
 800c938:	20000a3a 	.word	0x20000a3a
 800c93c:	20000786 	.word	0x20000786
 800c940:	20000783 	.word	0x20000783
 800c944:	20000790 	.word	0x20000790

0800c948 <Tim3_ISP>:

/*******************************************************************************
* Tim3�жϴ������
*******************************************************************************/
void Tim3_ISP(void)
{
 800c948:	b580      	push	{r7, lr}
 800c94a:	b082      	sub	sp, #8
 800c94c:	af00      	add	r7, sp, #0

	char checkpress;
    char KeyCode;

//  TIM3->SR = 0;          //moved to main //���жϱ�־
  if(KeymS_F)KeymS_Cnt++;                  //�������ʱ
 800c94e:	4b73      	ldr	r3, [pc, #460]	; (800cb1c <Tim3_ISP+0x1d4>)
 800c950:	781b      	ldrb	r3, [r3, #0]
 800c952:	2b00      	cmp	r3, #0
 800c954:	d008      	beq.n	800c968 <Tim3_ISP+0x20>
 800c956:	4b72      	ldr	r3, [pc, #456]	; (800cb20 <Tim3_ISP+0x1d8>)
 800c958:	881b      	ldrh	r3, [r3, #0]
 800c95a:	b21b      	sxth	r3, r3
 800c95c:	b29b      	uxth	r3, r3
 800c95e:	3301      	adds	r3, #1
 800c960:	b29b      	uxth	r3, r3
 800c962:	b21a      	sxth	r2, r3
 800c964:	4b6e      	ldr	r3, [pc, #440]	; (800cb20 <Tim3_ISP+0x1d8>)
 800c966:	801a      	strh	r2, [r3, #0]
  Tim_Cnt++;
 800c968:	4b6e      	ldr	r3, [pc, #440]	; (800cb24 <Tim3_ISP+0x1dc>)
 800c96a:	881b      	ldrh	r3, [r3, #0]
 800c96c:	b21b      	sxth	r3, r3
 800c96e:	b29b      	uxth	r3, r3
 800c970:	3301      	adds	r3, #1
 800c972:	b29b      	uxth	r3, r3
 800c974:	b21a      	sxth	r2, r3
 800c976:	4b6b      	ldr	r3, [pc, #428]	; (800cb24 <Tim3_ISP+0x1dc>)
 800c978:	801a      	strh	r2, [r3, #0]
  if(Delay_Cnt>0) Delay_Cnt--;
 800c97a:	4b6b      	ldr	r3, [pc, #428]	; (800cb28 <Tim3_ISP+0x1e0>)
 800c97c:	881b      	ldrh	r3, [r3, #0]
 800c97e:	b21b      	sxth	r3, r3
 800c980:	2b00      	cmp	r3, #0
 800c982:	dd08      	ble.n	800c996 <Tim3_ISP+0x4e>
 800c984:	4b68      	ldr	r3, [pc, #416]	; (800cb28 <Tim3_ISP+0x1e0>)
 800c986:	881b      	ldrh	r3, [r3, #0]
 800c988:	b21b      	sxth	r3, r3
 800c98a:	b29b      	uxth	r3, r3
 800c98c:	3b01      	subs	r3, #1
 800c98e:	b29b      	uxth	r3, r3
 800c990:	b21a      	sxth	r2, r3
 800c992:	4b65      	ldr	r3, [pc, #404]	; (800cb28 <Tim3_ISP+0x1e0>)
 800c994:	801a      	strh	r2, [r3, #0]
  if (mS_Cnt > 0)
 800c996:	4b65      	ldr	r3, [pc, #404]	; (800cb2c <Tim3_ISP+0x1e4>)
 800c998:	881b      	ldrh	r3, [r3, #0]
 800c99a:	b21b      	sxth	r3, r3
 800c99c:	2b00      	cmp	r3, #0
 800c99e:	f340 8081 	ble.w	800caa4 <Tim3_ISP+0x15c>
  {
    mS_Cnt--;
 800c9a2:	4b62      	ldr	r3, [pc, #392]	; (800cb2c <Tim3_ISP+0x1e4>)
 800c9a4:	881b      	ldrh	r3, [r3, #0]
 800c9a6:	b21b      	sxth	r3, r3
 800c9a8:	b29b      	uxth	r3, r3
 800c9aa:	3b01      	subs	r3, #1
 800c9ac:	b29b      	uxth	r3, r3
 800c9ae:	b21a      	sxth	r2, r3
 800c9b0:	4b5e      	ldr	r3, [pc, #376]	; (800cb2c <Tim3_ISP+0x1e4>)
 800c9b2:	801a      	strh	r2, [r3, #0]
    if ((mS_Cnt%20)== 0)
 800c9b4:	4b5d      	ldr	r3, [pc, #372]	; (800cb2c <Tim3_ISP+0x1e4>)
 800c9b6:	881b      	ldrh	r3, [r3, #0]
 800c9b8:	b21a      	sxth	r2, r3
 800c9ba:	4b5d      	ldr	r3, [pc, #372]	; (800cb30 <Tim3_ISP+0x1e8>)
 800c9bc:	fb83 1302 	smull	r1, r3, r3, r2
 800c9c0:	10d9      	asrs	r1, r3, #3
 800c9c2:	17d3      	asrs	r3, r2, #31
 800c9c4:	1ac9      	subs	r1, r1, r3
 800c9c6:	460b      	mov	r3, r1
 800c9c8:	009b      	lsls	r3, r3, #2
 800c9ca:	440b      	add	r3, r1
 800c9cc:	009b      	lsls	r3, r3, #2
 800c9ce:	1ad3      	subs	r3, r2, r3
 800c9d0:	b21b      	sxth	r3, r3
 800c9d2:	2b00      	cmp	r3, #0
 800c9d4:	f040 809d 	bne.w	800cb12 <Tim3_ISP+0x1ca>
    {                 //  20mS  ÿ20mS��1�μ���
    	if(Key_Wait_Cnt)    Key_Wait_Cnt--;
 800c9d8:	4b56      	ldr	r3, [pc, #344]	; (800cb34 <Tim3_ISP+0x1ec>)
 800c9da:	781b      	ldrb	r3, [r3, #0]
 800c9dc:	b2db      	uxtb	r3, r3
 800c9de:	2b00      	cmp	r3, #0
 800c9e0:	d006      	beq.n	800c9f0 <Tim3_ISP+0xa8>
 800c9e2:	4b54      	ldr	r3, [pc, #336]	; (800cb34 <Tim3_ISP+0x1ec>)
 800c9e4:	781b      	ldrb	r3, [r3, #0]
 800c9e6:	b2db      	uxtb	r3, r3
 800c9e8:	3b01      	subs	r3, #1
 800c9ea:	b2da      	uxtb	r2, r3
 800c9ec:	4b51      	ldr	r3, [pc, #324]	; (800cb34 <Tim3_ISP+0x1ec>)
 800c9ee:	701a      	strb	r2, [r3, #0]
    	if(Key_Repeat_Cnt)  Key_Repeat_Cnt--;
 800c9f0:	4b51      	ldr	r3, [pc, #324]	; (800cb38 <Tim3_ISP+0x1f0>)
 800c9f2:	781b      	ldrb	r3, [r3, #0]
 800c9f4:	b2db      	uxtb	r3, r3
 800c9f6:	2b00      	cmp	r3, #0
 800c9f8:	d006      	beq.n	800ca08 <Tim3_ISP+0xc0>
 800c9fa:	4b4f      	ldr	r3, [pc, #316]	; (800cb38 <Tim3_ISP+0x1f0>)
 800c9fc:	781b      	ldrb	r3, [r3, #0]
 800c9fe:	b2db      	uxtb	r3, r3
 800ca00:	3b01      	subs	r3, #1
 800ca02:	b2da      	uxtb	r2, r3
 800ca04:	4b4c      	ldr	r3, [pc, #304]	; (800cb38 <Tim3_ISP+0x1f0>)
 800ca06:	701a      	strb	r2, [r3, #0]
    	KeyCode = checkpress =0 ;
 800ca08:	2300      	movs	r3, #0
 800ca0a:	71fb      	strb	r3, [r7, #7]
 800ca0c:	79fb      	ldrb	r3, [r7, #7]
 800ca0e:	71bb      	strb	r3, [r7, #6]
    	Touch = HAL_GPIO_ReadPin(TpI_GPIO_Port, TpI_Pin);  //read pen
 800ca10:	f44f 7180 	mov.w	r1, #256	; 0x100
 800ca14:	4849      	ldr	r0, [pc, #292]	; (800cb3c <Tim3_ISP+0x1f4>)
 800ca16:	f00d f9d7 	bl	8019dc8 <HAL_GPIO_ReadPin>
 800ca1a:	4603      	mov	r3, r0
 800ca1c:	461a      	mov	r2, r3
 800ca1e:	4b48      	ldr	r3, [pc, #288]	; (800cb40 <Tim3_ISP+0x1f8>)
 800ca20:	701a      	strb	r2, [r3, #0]
    	if (Touch != LastTouch)
 800ca22:	4b47      	ldr	r3, [pc, #284]	; (800cb40 <Tim3_ISP+0x1f8>)
 800ca24:	781a      	ldrb	r2, [r3, #0]
 800ca26:	4b47      	ldr	r3, [pc, #284]	; (800cb44 <Tim3_ISP+0x1fc>)
 800ca28:	781b      	ldrb	r3, [r3, #0]
 800ca2a:	429a      	cmp	r2, r3
 800ca2c:	d006      	beq.n	800ca3c <Tim3_ISP+0xf4>
    	{
    	// pen changed
    		checkpress =1; //check pressure if pen changed
 800ca2e:	2301      	movs	r3, #1
 800ca30:	71fb      	strb	r3, [r7, #7]
    		LastTouch = Touch;
 800ca32:	4b43      	ldr	r3, [pc, #268]	; (800cb40 <Tim3_ISP+0x1f8>)
 800ca34:	781a      	ldrb	r2, [r3, #0]
 800ca36:	4b43      	ldr	r3, [pc, #268]	; (800cb44 <Tim3_ISP+0x1fc>)
 800ca38:	701a      	strb	r2, [r3, #0]
 800ca3a:	e005      	b.n	800ca48 <Tim3_ISP+0x100>
    	}
    	else
    	{
    	  if(Touch != 0)
 800ca3c:	4b40      	ldr	r3, [pc, #256]	; (800cb40 <Tim3_ISP+0x1f8>)
 800ca3e:	781b      	ldrb	r3, [r3, #0]
 800ca40:	2b00      	cmp	r3, #0
 800ca42:	d001      	beq.n	800ca48 <Tim3_ISP+0x100>
    	  {
    	    //check that press is valid
    		checkpress =1;
 800ca44:	2301      	movs	r3, #1
 800ca46:	71fb      	strb	r3, [r7, #7]
    	  }
    	}

    	if(checkpress !=0)
 800ca48:	79fb      	ldrb	r3, [r7, #7]
 800ca4a:	2b00      	cmp	r3, #0
 800ca4c:	d003      	beq.n	800ca56 <Tim3_ISP+0x10e>
    	{
    		KeyCode = touchscan();
 800ca4e:	f7ff ff03 	bl	800c858 <touchscan>
 800ca52:	4603      	mov	r3, r0
 800ca54:	71bb      	strb	r3, [r7, #6]
       	}
//      KeyCode = KeyScan();
      if(KeyCode !=0) Key_Buffer = KeyCode;
 800ca56:	79bb      	ldrb	r3, [r7, #6]
 800ca58:	2b00      	cmp	r3, #0
 800ca5a:	d002      	beq.n	800ca62 <Tim3_ISP+0x11a>
 800ca5c:	4a3a      	ldr	r2, [pc, #232]	; (800cb48 <Tim3_ISP+0x200>)
 800ca5e:	79bb      	ldrb	r3, [r7, #6]
 800ca60:	7013      	strb	r3, [r2, #0]

      if(Cursor_Cnt >0)
 800ca62:	4b3a      	ldr	r3, [pc, #232]	; (800cb4c <Tim3_ISP+0x204>)
 800ca64:	881b      	ldrh	r3, [r3, #0]
 800ca66:	b21b      	sxth	r3, r3
 800ca68:	2b00      	cmp	r3, #0
 800ca6a:	dd09      	ble.n	800ca80 <Tim3_ISP+0x138>
    	  Cursor_Cnt--;
 800ca6c:	4b37      	ldr	r3, [pc, #220]	; (800cb4c <Tim3_ISP+0x204>)
 800ca6e:	881b      	ldrh	r3, [r3, #0]
 800ca70:	b21b      	sxth	r3, r3
 800ca72:	b29b      	uxth	r3, r3
 800ca74:	3b01      	subs	r3, #1
 800ca76:	b29b      	uxth	r3, r3
 800ca78:	b21a      	sxth	r2, r3
 800ca7a:	4b34      	ldr	r3, [pc, #208]	; (800cb4c <Tim3_ISP+0x204>)
 800ca7c:	801a      	strh	r2, [r3, #0]
        Windows_Pop = 0;
        Clr_WavePosi(DAR);
      }
    }
  }
}
 800ca7e:	e048      	b.n	800cb12 <Tim3_ISP+0x1ca>
        Cursor_Cnt = 12;                  // 12*20mS=240mS
 800ca80:	4b32      	ldr	r3, [pc, #200]	; (800cb4c <Tim3_ISP+0x204>)
 800ca82:	220c      	movs	r2, #12
 800ca84:	801a      	strh	r2, [r3, #0]
        Twink = !Twink;
 800ca86:	4b32      	ldr	r3, [pc, #200]	; (800cb50 <Tim3_ISP+0x208>)
 800ca88:	781b      	ldrb	r3, [r3, #0]
 800ca8a:	b2db      	uxtb	r3, r3
 800ca8c:	2b00      	cmp	r3, #0
 800ca8e:	bf0c      	ite	eq
 800ca90:	2301      	moveq	r3, #1
 800ca92:	2300      	movne	r3, #0
 800ca94:	b2db      	uxtb	r3, r3
 800ca96:	461a      	mov	r2, r3
 800ca98:	4b2d      	ldr	r3, [pc, #180]	; (800cb50 <Tim3_ISP+0x208>)
 800ca9a:	701a      	strb	r2, [r3, #0]
        Blink =  BLINK;
 800ca9c:	4b2d      	ldr	r3, [pc, #180]	; (800cb54 <Tim3_ISP+0x20c>)
 800ca9e:	2201      	movs	r2, #1
 800caa0:	701a      	strb	r2, [r3, #0]
}
 800caa2:	e036      	b.n	800cb12 <Tim3_ISP+0x1ca>
    mS_Cnt = 1000;
 800caa4:	4b21      	ldr	r3, [pc, #132]	; (800cb2c <Tim3_ISP+0x1e4>)
 800caa6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800caaa:	801a      	strh	r2, [r3, #0]
    if((List[STANDBY].Val !=0) && (StdBy_Time > 0))
 800caac:	4b2a      	ldr	r3, [pc, #168]	; (800cb58 <Tim3_ISP+0x210>)
 800caae:	f9b3 314c 	ldrsh.w	r3, [r3, #332]	; 0x14c
 800cab2:	2b00      	cmp	r3, #0
 800cab4:	d00d      	beq.n	800cad2 <Tim3_ISP+0x18a>
 800cab6:	4b29      	ldr	r3, [pc, #164]	; (800cb5c <Tim3_ISP+0x214>)
 800cab8:	f9b3 3000 	ldrsh.w	r3, [r3]
 800cabc:	2b00      	cmp	r3, #0
 800cabe:	dd08      	ble.n	800cad2 <Tim3_ISP+0x18a>
      StdBy_Time--;      //������ʱ
 800cac0:	4b26      	ldr	r3, [pc, #152]	; (800cb5c <Tim3_ISP+0x214>)
 800cac2:	f9b3 3000 	ldrsh.w	r3, [r3]
 800cac6:	b29b      	uxth	r3, r3
 800cac8:	3b01      	subs	r3, #1
 800caca:	b29b      	uxth	r3, r3
 800cacc:	b21a      	sxth	r2, r3
 800cace:	4b23      	ldr	r3, [pc, #140]	; (800cb5c <Tim3_ISP+0x214>)
 800cad0:	801a      	strh	r2, [r3, #0]
    if(PopupCnt > 0)
 800cad2:	4b23      	ldr	r3, [pc, #140]	; (800cb60 <Tim3_ISP+0x218>)
 800cad4:	881b      	ldrh	r3, [r3, #0]
 800cad6:	b21b      	sxth	r3, r3
 800cad8:	2b00      	cmp	r3, #0
 800cada:	dd0d      	ble.n	800caf8 <Tim3_ISP+0x1b0>
      if(Cal_Flag == 0)
 800cadc:	4b21      	ldr	r3, [pc, #132]	; (800cb64 <Tim3_ISP+0x21c>)
 800cade:	781b      	ldrb	r3, [r3, #0]
 800cae0:	2b00      	cmp	r3, #0
 800cae2:	d116      	bne.n	800cb12 <Tim3_ISP+0x1ca>
    	  PopupCnt--;
 800cae4:	4b1e      	ldr	r3, [pc, #120]	; (800cb60 <Tim3_ISP+0x218>)
 800cae6:	881b      	ldrh	r3, [r3, #0]
 800cae8:	b21b      	sxth	r3, r3
 800caea:	b29b      	uxth	r3, r3
 800caec:	3b01      	subs	r3, #1
 800caee:	b29b      	uxth	r3, r3
 800caf0:	b21a      	sxth	r2, r3
 800caf2:	4b1b      	ldr	r3, [pc, #108]	; (800cb60 <Tim3_ISP+0x218>)
 800caf4:	801a      	strh	r2, [r3, #0]
}
 800caf6:	e00c      	b.n	800cb12 <Tim3_ISP+0x1ca>
      Close_Pop();        // �رնԻ���
 800caf8:	f001 ff04 	bl	800e904 <Close_Pop>
      if(Windows_Pop)
 800cafc:	4b1a      	ldr	r3, [pc, #104]	; (800cb68 <Tim3_ISP+0x220>)
 800cafe:	781b      	ldrb	r3, [r3, #0]
 800cb00:	2b00      	cmp	r3, #0
 800cb02:	d006      	beq.n	800cb12 <Tim3_ISP+0x1ca>
        Windows_Pop = 0;
 800cb04:	4b18      	ldr	r3, [pc, #96]	; (800cb68 <Tim3_ISP+0x220>)
 800cb06:	2200      	movs	r2, #0
 800cb08:	701a      	strb	r2, [r3, #0]
        Clr_WavePosi(DAR);
 800cb0a:	f643 10e7 	movw	r0, #14823	; 0x39e7
 800cb0e:	f007 fe63 	bl	80147d8 <Clr_WavePosi>
}
 800cb12:	bf00      	nop
 800cb14:	3708      	adds	r7, #8
 800cb16:	46bd      	mov	sp, r7
 800cb18:	bd80      	pop	{r7, pc}
 800cb1a:	bf00      	nop
 800cb1c:	2000078e 	.word	0x2000078e
 800cb20:	20000a3a 	.word	0x20000a3a
 800cb24:	20000a3c 	.word	0x20000a3c
 800cb28:	2000078c 	.word	0x2000078c
 800cb2c:	2000078a 	.word	0x2000078a
 800cb30:	66666667 	.word	0x66666667
 800cb34:	20000790 	.word	0x20000790
 800cb38:	2000078f 	.word	0x2000078f
 800cb3c:	40020400 	.word	0x40020400
 800cb40:	20000a38 	.word	0x20000a38
 800cb44:	20000791 	.word	0x20000791
 800cb48:	20000781 	.word	0x20000781
 800cb4c:	20000788 	.word	0x20000788
 800cb50:	20000780 	.word	0x20000780
 800cb54:	20000a39 	.word	0x20000a39
 800cb58:	2000029c 	.word	0x2000029c
 800cb5c:	200007a4 	.word	0x200007a4
 800cb60:	20000000 	.word	0x20000000
 800cb64:	200001b8 	.word	0x200001b8
 800cb68:	200007ae 	.word	0x200007ae

0800cb6c <Fill_Base>:
 800cb6c:	b480      	push	{r7}
 800cb6e:	af00      	add	r7, sp, #0
 800cb70:	4b12      	ldr	r3, [pc, #72]	; (800cbbc <Fill_Base+0x50>)
 800cb72:	4a13      	ldr	r2, [pc, #76]	; (800cbc0 <Fill_Base+0x54>)
 800cb74:	601a      	str	r2, [r3, #0]
 800cb76:	4b13      	ldr	r3, [pc, #76]	; (800cbc4 <Fill_Base+0x58>)
 800cb78:	2266      	movs	r2, #102	; 0x66
 800cb7a:	601a      	str	r2, [r3, #0]
 800cb7c:	4b0f      	ldr	r3, [pc, #60]	; (800cbbc <Fill_Base+0x50>)
 800cb7e:	681b      	ldr	r3, [r3, #0]
 800cb80:	4a11      	ldr	r2, [pc, #68]	; (800cbc8 <Fill_Base+0x5c>)
 800cb82:	6812      	ldr	r2, [r2, #0]
 800cb84:	601a      	str	r2, [r3, #0]
 800cb86:	4b0d      	ldr	r3, [pc, #52]	; (800cbbc <Fill_Base+0x50>)
 800cb88:	681b      	ldr	r3, [r3, #0]
 800cb8a:	3304      	adds	r3, #4
 800cb8c:	4a0b      	ldr	r2, [pc, #44]	; (800cbbc <Fill_Base+0x50>)
 800cb8e:	6013      	str	r3, [r2, #0]
 800cb90:	4b0c      	ldr	r3, [pc, #48]	; (800cbc4 <Fill_Base+0x58>)
 800cb92:	681b      	ldr	r3, [r3, #0]
 800cb94:	3b01      	subs	r3, #1
 800cb96:	4a0b      	ldr	r2, [pc, #44]	; (800cbc4 <Fill_Base+0x58>)
 800cb98:	6013      	str	r3, [r2, #0]
 800cb9a:	4b0a      	ldr	r3, [pc, #40]	; (800cbc4 <Fill_Base+0x58>)
 800cb9c:	681b      	ldr	r3, [r3, #0]
 800cb9e:	2b00      	cmp	r3, #0
 800cba0:	d000      	beq.n	800cba4 <Fill_Base+0x38>
 800cba2:	e7eb      	b.n	800cb7c <Fill_Base+0x10>
 800cba4:	4b05      	ldr	r3, [pc, #20]	; (800cbbc <Fill_Base+0x50>)
 800cba6:	4a09      	ldr	r2, [pc, #36]	; (800cbcc <Fill_Base+0x60>)
 800cba8:	601a      	str	r2, [r3, #0]
 800cbaa:	4b07      	ldr	r3, [pc, #28]	; (800cbc8 <Fill_Base+0x5c>)
 800cbac:	f647 32ef 	movw	r2, #31727	; 0x7bef
 800cbb0:	601a      	str	r2, [r3, #0]
 800cbb2:	bf00      	nop
 800cbb4:	46bd      	mov	sp, r7
 800cbb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbba:	4770      	bx	lr
 800cbbc:	20000bf4 	.word	0x20000bf4
 800cbc0:	20000be8 	.word	0x20000be8
 800cbc4:	20000a44 	.word	0x20000a44
 800cbc8:	20000a48 	.word	0x20000a48
 800cbcc:	20000be6 	.word	0x20000be6

0800cbd0 <Buld_0>:
 800cbd0:	b580      	push	{r7, lr}
 800cbd2:	af00      	add	r7, sp, #0
 800cbd4:	4b03      	ldr	r3, [pc, #12]	; (800cbe4 <Buld_0+0x14>)
 800cbd6:	2200      	movs	r2, #0
 800cbd8:	601a      	str	r2, [r3, #0]
 800cbda:	f7ff ffc7 	bl	800cb6c <Fill_Base>
 800cbde:	bf00      	nop
 800cbe0:	bd80      	pop	{r7, pc}
 800cbe2:	bf00      	nop
 800cbe4:	20000a48 	.word	0x20000a48

0800cbe8 <Buld_1>:
 800cbe8:	b580      	push	{r7, lr}
 800cbea:	af00      	add	r7, sp, #0
 800cbec:	4b0e      	ldr	r3, [pc, #56]	; (800cc28 <Buld_1+0x40>)
 800cbee:	4a0f      	ldr	r2, [pc, #60]	; (800cc2c <Buld_1+0x44>)
 800cbf0:	601a      	str	r2, [r3, #0]
 800cbf2:	f7ff ffbb 	bl	800cb6c <Fill_Base>
 800cbf6:	4b0c      	ldr	r3, [pc, #48]	; (800cc28 <Buld_1+0x40>)
 800cbf8:	2200      	movs	r2, #0
 800cbfa:	601a      	str	r2, [r3, #0]
 800cbfc:	4b0c      	ldr	r3, [pc, #48]	; (800cc30 <Buld_1+0x48>)
 800cbfe:	f44f 72c9 	mov.w	r2, #402	; 0x192
 800cc02:	601a      	str	r2, [r3, #0]
 800cc04:	4b08      	ldr	r3, [pc, #32]	; (800cc28 <Buld_1+0x40>)
 800cc06:	6819      	ldr	r1, [r3, #0]
 800cc08:	4b0a      	ldr	r3, [pc, #40]	; (800cc34 <Buld_1+0x4c>)
 800cc0a:	681a      	ldr	r2, [r3, #0]
 800cc0c:	4b08      	ldr	r3, [pc, #32]	; (800cc30 <Buld_1+0x48>)
 800cc0e:	681b      	ldr	r3, [r3, #0]
 800cc10:	4413      	add	r3, r2
 800cc12:	b28a      	uxth	r2, r1
 800cc14:	801a      	strh	r2, [r3, #0]
 800cc16:	4b04      	ldr	r3, [pc, #16]	; (800cc28 <Buld_1+0x40>)
 800cc18:	681a      	ldr	r2, [r3, #0]
 800cc1a:	4b06      	ldr	r3, [pc, #24]	; (800cc34 <Buld_1+0x4c>)
 800cc1c:	681b      	ldr	r3, [r3, #0]
 800cc1e:	3b02      	subs	r3, #2
 800cc20:	b292      	uxth	r2, r2
 800cc22:	801a      	strh	r2, [r3, #0]
 800cc24:	bf00      	nop
 800cc26:	bd80      	pop	{r7, pc}
 800cc28:	20000a48 	.word	0x20000a48
 800cc2c:	7bef7bef 	.word	0x7bef7bef
 800cc30:	20000a44 	.word	0x20000a44
 800cc34:	20000bf4 	.word	0x20000bf4

0800cc38 <Buld_2>:
 800cc38:	b580      	push	{r7, lr}
 800cc3a:	af00      	add	r7, sp, #0
 800cc3c:	4b0c      	ldr	r3, [pc, #48]	; (800cc70 <Buld_2+0x38>)
 800cc3e:	2200      	movs	r2, #0
 800cc40:	601a      	str	r2, [r3, #0]
 800cc42:	f7ff ff93 	bl	800cb6c <Fill_Base>
 800cc46:	4b0b      	ldr	r3, [pc, #44]	; (800cc74 <Buld_2+0x3c>)
 800cc48:	f44f 72c8 	mov.w	r2, #400	; 0x190
 800cc4c:	601a      	str	r2, [r3, #0]
 800cc4e:	4b08      	ldr	r3, [pc, #32]	; (800cc70 <Buld_2+0x38>)
 800cc50:	6819      	ldr	r1, [r3, #0]
 800cc52:	4b09      	ldr	r3, [pc, #36]	; (800cc78 <Buld_2+0x40>)
 800cc54:	681a      	ldr	r2, [r3, #0]
 800cc56:	4b07      	ldr	r3, [pc, #28]	; (800cc74 <Buld_2+0x3c>)
 800cc58:	681b      	ldr	r3, [r3, #0]
 800cc5a:	4413      	add	r3, r2
 800cc5c:	b28a      	uxth	r2, r1
 800cc5e:	801a      	strh	r2, [r3, #0]
 800cc60:	4b03      	ldr	r3, [pc, #12]	; (800cc70 <Buld_2+0x38>)
 800cc62:	681a      	ldr	r2, [r3, #0]
 800cc64:	4b04      	ldr	r3, [pc, #16]	; (800cc78 <Buld_2+0x40>)
 800cc66:	681b      	ldr	r3, [r3, #0]
 800cc68:	b292      	uxth	r2, r2
 800cc6a:	801a      	strh	r2, [r3, #0]
 800cc6c:	bf00      	nop
 800cc6e:	bd80      	pop	{r7, pc}
 800cc70:	20000a48 	.word	0x20000a48
 800cc74:	20000a44 	.word	0x20000a44
 800cc78:	20000bf4 	.word	0x20000bf4

0800cc7c <Buld_3>:
 800cc7c:	b580      	push	{r7, lr}
 800cc7e:	af00      	add	r7, sp, #0
 800cc80:	4b0e      	ldr	r3, [pc, #56]	; (800ccbc <Buld_3+0x40>)
 800cc82:	2200      	movs	r2, #0
 800cc84:	601a      	str	r2, [r3, #0]
 800cc86:	f7ff ff71 	bl	800cb6c <Fill_Base>
 800cc8a:	4b0d      	ldr	r3, [pc, #52]	; (800ccc0 <Buld_3+0x44>)
 800cc8c:	f44f 72e1 	mov.w	r2, #450	; 0x1c2
 800cc90:	601a      	str	r2, [r3, #0]
 800cc92:	4b0b      	ldr	r3, [pc, #44]	; (800ccc0 <Buld_3+0x44>)
 800cc94:	681b      	ldr	r3, [r3, #0]
 800cc96:	3b32      	subs	r3, #50	; 0x32
 800cc98:	4a09      	ldr	r2, [pc, #36]	; (800ccc0 <Buld_3+0x44>)
 800cc9a:	6013      	str	r3, [r2, #0]
 800cc9c:	4b07      	ldr	r3, [pc, #28]	; (800ccbc <Buld_3+0x40>)
 800cc9e:	6819      	ldr	r1, [r3, #0]
 800cca0:	4b08      	ldr	r3, [pc, #32]	; (800ccc4 <Buld_3+0x48>)
 800cca2:	681a      	ldr	r2, [r3, #0]
 800cca4:	4b06      	ldr	r3, [pc, #24]	; (800ccc0 <Buld_3+0x44>)
 800cca6:	681b      	ldr	r3, [r3, #0]
 800cca8:	4413      	add	r3, r2
 800ccaa:	b28a      	uxth	r2, r1
 800ccac:	801a      	strh	r2, [r3, #0]
 800ccae:	4b04      	ldr	r3, [pc, #16]	; (800ccc0 <Buld_3+0x44>)
 800ccb0:	681b      	ldr	r3, [r3, #0]
 800ccb2:	2b00      	cmp	r3, #0
 800ccb4:	d000      	beq.n	800ccb8 <Buld_3+0x3c>
 800ccb6:	e7ec      	b.n	800cc92 <Buld_3+0x16>
 800ccb8:	bf00      	nop
 800ccba:	bd80      	pop	{r7, pc}
 800ccbc:	20000a48 	.word	0x20000a48
 800ccc0:	20000a44 	.word	0x20000a44
 800ccc4:	20000bf4 	.word	0x20000bf4

0800ccc8 <Buld_4>:
 800ccc8:	b580      	push	{r7, lr}
 800ccca:	af00      	add	r7, sp, #0
 800cccc:	4b0e      	ldr	r3, [pc, #56]	; (800cd08 <Buld_4+0x40>)
 800ccce:	2200      	movs	r2, #0
 800ccd0:	601a      	str	r2, [r3, #0]
 800ccd2:	f7ff ff4b 	bl	800cb6c <Fill_Base>
 800ccd6:	4b0d      	ldr	r3, [pc, #52]	; (800cd0c <Buld_4+0x44>)
 800ccd8:	f44f 72cd 	mov.w	r2, #410	; 0x19a
 800ccdc:	601a      	str	r2, [r3, #0]
 800ccde:	4b0b      	ldr	r3, [pc, #44]	; (800cd0c <Buld_4+0x44>)
 800cce0:	681b      	ldr	r3, [r3, #0]
 800cce2:	3b0a      	subs	r3, #10
 800cce4:	4a09      	ldr	r2, [pc, #36]	; (800cd0c <Buld_4+0x44>)
 800cce6:	6013      	str	r3, [r2, #0]
 800cce8:	4b07      	ldr	r3, [pc, #28]	; (800cd08 <Buld_4+0x40>)
 800ccea:	6819      	ldr	r1, [r3, #0]
 800ccec:	4b08      	ldr	r3, [pc, #32]	; (800cd10 <Buld_4+0x48>)
 800ccee:	681a      	ldr	r2, [r3, #0]
 800ccf0:	4b06      	ldr	r3, [pc, #24]	; (800cd0c <Buld_4+0x44>)
 800ccf2:	681b      	ldr	r3, [r3, #0]
 800ccf4:	4413      	add	r3, r2
 800ccf6:	b28a      	uxth	r2, r1
 800ccf8:	801a      	strh	r2, [r3, #0]
 800ccfa:	4b04      	ldr	r3, [pc, #16]	; (800cd0c <Buld_4+0x44>)
 800ccfc:	681b      	ldr	r3, [r3, #0]
 800ccfe:	2b00      	cmp	r3, #0
 800cd00:	d000      	beq.n	800cd04 <Buld_4+0x3c>
 800cd02:	e7ec      	b.n	800ccde <Buld_4+0x16>
 800cd04:	bf00      	nop
 800cd06:	bd80      	pop	{r7, pc}
 800cd08:	20000a48 	.word	0x20000a48
 800cd0c:	20000a44 	.word	0x20000a44
 800cd10:	20000bf4 	.word	0x20000bf4

0800cd14 <Draw_Digit_Analog>:
 800cd14:	b480      	push	{r7}
 800cd16:	b083      	sub	sp, #12
 800cd18:	af00      	add	r7, sp, #0
 800cd1a:	4603      	mov	r3, r0
 800cd1c:	80fb      	strh	r3, [r7, #6]
 800cd1e:	88fb      	ldrh	r3, [r7, #6]
 800cd20:	2b01      	cmp	r3, #1
 800cd22:	d144      	bne.n	800cdae <Draw_Digit_Analog+0x9a>
 800cd24:	4b7d      	ldr	r3, [pc, #500]	; (800cf1c <Draw_Digit_Analog+0x208>)
 800cd26:	681b      	ldr	r3, [r3, #0]
 800cd28:	f503 7361 	add.w	r3, r3, #900	; 0x384
 800cd2c:	4a7c      	ldr	r2, [pc, #496]	; (800cf20 <Draw_Digit_Analog+0x20c>)
 800cd2e:	6013      	str	r3, [r2, #0]
 800cd30:	4b7b      	ldr	r3, [pc, #492]	; (800cf20 <Draw_Digit_Analog+0x20c>)
 800cd32:	681a      	ldr	r2, [r3, #0]
 800cd34:	4b7b      	ldr	r3, [pc, #492]	; (800cf24 <Draw_Digit_Analog+0x210>)
 800cd36:	681b      	ldr	r3, [r3, #0]
 800cd38:	4413      	add	r3, r2
 800cd3a:	4a79      	ldr	r2, [pc, #484]	; (800cf20 <Draw_Digit_Analog+0x20c>)
 800cd3c:	6013      	str	r3, [r2, #0]
 800cd3e:	4b78      	ldr	r3, [pc, #480]	; (800cf20 <Draw_Digit_Analog+0x20c>)
 800cd40:	681b      	ldr	r3, [r3, #0]
 800cd42:	781b      	ldrb	r3, [r3, #0]
 800cd44:	461a      	mov	r2, r3
 800cd46:	4b78      	ldr	r3, [pc, #480]	; (800cf28 <Draw_Digit_Analog+0x214>)
 800cd48:	601a      	str	r2, [r3, #0]
 800cd4a:	4b75      	ldr	r3, [pc, #468]	; (800cf20 <Draw_Digit_Analog+0x20c>)
 800cd4c:	681b      	ldr	r3, [r3, #0]
 800cd4e:	3b01      	subs	r3, #1
 800cd50:	781b      	ldrb	r3, [r3, #0]
 800cd52:	461a      	mov	r2, r3
 800cd54:	4b75      	ldr	r3, [pc, #468]	; (800cf2c <Draw_Digit_Analog+0x218>)
 800cd56:	601a      	str	r2, [r3, #0]
 800cd58:	4b75      	ldr	r3, [pc, #468]	; (800cf30 <Draw_Digit_Analog+0x21c>)
 800cd5a:	681b      	ldr	r3, [r3, #0]
 800cd5c:	085b      	lsrs	r3, r3, #1
 800cd5e:	4a74      	ldr	r2, [pc, #464]	; (800cf30 <Draw_Digit_Analog+0x21c>)
 800cd60:	6013      	str	r3, [r2, #0]
 800cd62:	4b71      	ldr	r3, [pc, #452]	; (800cf28 <Draw_Digit_Analog+0x214>)
 800cd64:	681a      	ldr	r2, [r3, #0]
 800cd66:	4b73      	ldr	r3, [pc, #460]	; (800cf34 <Draw_Digit_Analog+0x220>)
 800cd68:	681b      	ldr	r3, [r3, #0]
 800cd6a:	4013      	ands	r3, r2
 800cd6c:	4a6e      	ldr	r2, [pc, #440]	; (800cf28 <Draw_Digit_Analog+0x214>)
 800cd6e:	6013      	str	r3, [r2, #0]
 800cd70:	4b6d      	ldr	r3, [pc, #436]	; (800cf28 <Draw_Digit_Analog+0x214>)
 800cd72:	681b      	ldr	r3, [r3, #0]
 800cd74:	2b00      	cmp	r3, #0
 800cd76:	d104      	bne.n	800cd82 <Draw_Digit_Analog+0x6e>
 800cd78:	4b6d      	ldr	r3, [pc, #436]	; (800cf30 <Draw_Digit_Analog+0x21c>)
 800cd7a:	681b      	ldr	r3, [r3, #0]
 800cd7c:	4a6a      	ldr	r2, [pc, #424]	; (800cf28 <Draw_Digit_Analog+0x214>)
 800cd7e:	6013      	str	r3, [r2, #0]
 800cd80:	e004      	b.n	800cd8c <Draw_Digit_Analog+0x78>
 800cd82:	4b6b      	ldr	r3, [pc, #428]	; (800cf30 <Draw_Digit_Analog+0x21c>)
 800cd84:	681b      	ldr	r3, [r3, #0]
 800cd86:	331e      	adds	r3, #30
 800cd88:	4a67      	ldr	r2, [pc, #412]	; (800cf28 <Draw_Digit_Analog+0x214>)
 800cd8a:	6013      	str	r3, [r2, #0]
 800cd8c:	4b67      	ldr	r3, [pc, #412]	; (800cf2c <Draw_Digit_Analog+0x218>)
 800cd8e:	681a      	ldr	r2, [r3, #0]
 800cd90:	4b68      	ldr	r3, [pc, #416]	; (800cf34 <Draw_Digit_Analog+0x220>)
 800cd92:	681b      	ldr	r3, [r3, #0]
 800cd94:	4013      	ands	r3, r2
 800cd96:	4a65      	ldr	r2, [pc, #404]	; (800cf2c <Draw_Digit_Analog+0x218>)
 800cd98:	6013      	str	r3, [r2, #0]
 800cd9a:	4b64      	ldr	r3, [pc, #400]	; (800cf2c <Draw_Digit_Analog+0x218>)
 800cd9c:	681b      	ldr	r3, [r3, #0]
 800cd9e:	2b00      	cmp	r3, #0
 800cda0:	d01c      	beq.n	800cddc <Draw_Digit_Analog+0xc8>
 800cda2:	4b63      	ldr	r3, [pc, #396]	; (800cf30 <Draw_Digit_Analog+0x21c>)
 800cda4:	681b      	ldr	r3, [r3, #0]
 800cda6:	331e      	adds	r3, #30
 800cda8:	4a61      	ldr	r2, [pc, #388]	; (800cf30 <Draw_Digit_Analog+0x21c>)
 800cdaa:	6013      	str	r3, [r2, #0]
 800cdac:	e016      	b.n	800cddc <Draw_Digit_Analog+0xc8>
 800cdae:	88fb      	ldrh	r3, [r7, #6]
 800cdb0:	2b00      	cmp	r3, #0
 800cdb2:	f040 80a5 	bne.w	800cf00 <Draw_Digit_Analog+0x1ec>
 800cdb6:	4b5e      	ldr	r3, [pc, #376]	; (800cf30 <Draw_Digit_Analog+0x21c>)
 800cdb8:	681b      	ldr	r3, [r3, #0]
 800cdba:	3302      	adds	r3, #2
 800cdbc:	4a5c      	ldr	r2, [pc, #368]	; (800cf30 <Draw_Digit_Analog+0x21c>)
 800cdbe:	6013      	str	r3, [r2, #0]
 800cdc0:	4b5b      	ldr	r3, [pc, #364]	; (800cf30 <Draw_Digit_Analog+0x21c>)
 800cdc2:	681b      	ldr	r3, [r3, #0]
 800cdc4:	781b      	ldrb	r3, [r3, #0]
 800cdc6:	461a      	mov	r2, r3
 800cdc8:	4b57      	ldr	r3, [pc, #348]	; (800cf28 <Draw_Digit_Analog+0x214>)
 800cdca:	601a      	str	r2, [r3, #0]
 800cdcc:	4b58      	ldr	r3, [pc, #352]	; (800cf30 <Draw_Digit_Analog+0x21c>)
 800cdce:	681b      	ldr	r3, [r3, #0]
 800cdd0:	3b01      	subs	r3, #1
 800cdd2:	781b      	ldrb	r3, [r3, #0]
 800cdd4:	461a      	mov	r2, r3
 800cdd6:	4b56      	ldr	r3, [pc, #344]	; (800cf30 <Draw_Digit_Analog+0x21c>)
 800cdd8:	601a      	str	r2, [r3, #0]
 800cdda:	e000      	b.n	800cdde <Draw_Digit_Analog+0xca>
 800cddc:	bf00      	nop
 800cdde:	4b52      	ldr	r3, [pc, #328]	; (800cf28 <Draw_Digit_Analog+0x214>)
 800cde0:	681b      	ldr	r3, [r3, #0]
 800cde2:	2bff      	cmp	r3, #255	; 0xff
 800cde4:	f000 808e 	beq.w	800cf04 <Draw_Digit_Analog+0x1f0>
 800cde8:	4b4f      	ldr	r3, [pc, #316]	; (800cf28 <Draw_Digit_Analog+0x214>)
 800cdea:	681b      	ldr	r3, [r3, #0]
 800cdec:	2b00      	cmp	r3, #0
 800cdee:	f000 808b 	beq.w	800cf08 <Draw_Digit_Analog+0x1f4>
 800cdf2:	4b4f      	ldr	r3, [pc, #316]	; (800cf30 <Draw_Digit_Analog+0x21c>)
 800cdf4:	681a      	ldr	r2, [r3, #0]
 800cdf6:	4b4c      	ldr	r3, [pc, #304]	; (800cf28 <Draw_Digit_Analog+0x214>)
 800cdf8:	681b      	ldr	r3, [r3, #0]
 800cdfa:	429a      	cmp	r2, r3
 800cdfc:	d80b      	bhi.n	800ce16 <Draw_Digit_Analog+0x102>
 800cdfe:	4b4c      	ldr	r3, [pc, #304]	; (800cf30 <Draw_Digit_Analog+0x21c>)
 800ce00:	681b      	ldr	r3, [r3, #0]
 800ce02:	4a4a      	ldr	r2, [pc, #296]	; (800cf2c <Draw_Digit_Analog+0x218>)
 800ce04:	6013      	str	r3, [r2, #0]
 800ce06:	4b48      	ldr	r3, [pc, #288]	; (800cf28 <Draw_Digit_Analog+0x214>)
 800ce08:	681a      	ldr	r2, [r3, #0]
 800ce0a:	4b49      	ldr	r3, [pc, #292]	; (800cf30 <Draw_Digit_Analog+0x21c>)
 800ce0c:	681b      	ldr	r3, [r3, #0]
 800ce0e:	1ad3      	subs	r3, r2, r3
 800ce10:	4a45      	ldr	r2, [pc, #276]	; (800cf28 <Draw_Digit_Analog+0x214>)
 800ce12:	6013      	str	r3, [r2, #0]
 800ce14:	e00a      	b.n	800ce2c <Draw_Digit_Analog+0x118>
 800ce16:	4b44      	ldr	r3, [pc, #272]	; (800cf28 <Draw_Digit_Analog+0x214>)
 800ce18:	681b      	ldr	r3, [r3, #0]
 800ce1a:	4a44      	ldr	r2, [pc, #272]	; (800cf2c <Draw_Digit_Analog+0x218>)
 800ce1c:	6013      	str	r3, [r2, #0]
 800ce1e:	4b44      	ldr	r3, [pc, #272]	; (800cf30 <Draw_Digit_Analog+0x21c>)
 800ce20:	681a      	ldr	r2, [r3, #0]
 800ce22:	4b41      	ldr	r3, [pc, #260]	; (800cf28 <Draw_Digit_Analog+0x214>)
 800ce24:	681b      	ldr	r3, [r3, #0]
 800ce26:	1ad3      	subs	r3, r2, r3
 800ce28:	4a3f      	ldr	r2, [pc, #252]	; (800cf28 <Draw_Digit_Analog+0x214>)
 800ce2a:	6013      	str	r3, [r2, #0]
 800ce2c:	4b3f      	ldr	r3, [pc, #252]	; (800cf2c <Draw_Digit_Analog+0x218>)
 800ce2e:	681b      	ldr	r3, [r3, #0]
 800ce30:	2bc7      	cmp	r3, #199	; 0xc7
 800ce32:	d86b      	bhi.n	800cf0c <Draw_Digit_Analog+0x1f8>
 800ce34:	4b3c      	ldr	r3, [pc, #240]	; (800cf28 <Draw_Digit_Analog+0x214>)
 800ce36:	681a      	ldr	r2, [r3, #0]
 800ce38:	4b3c      	ldr	r3, [pc, #240]	; (800cf2c <Draw_Digit_Analog+0x218>)
 800ce3a:	681b      	ldr	r3, [r3, #0]
 800ce3c:	4413      	add	r3, r2
 800ce3e:	4a3c      	ldr	r2, [pc, #240]	; (800cf30 <Draw_Digit_Analog+0x21c>)
 800ce40:	6013      	str	r3, [r2, #0]
 800ce42:	4b3b      	ldr	r3, [pc, #236]	; (800cf30 <Draw_Digit_Analog+0x21c>)
 800ce44:	681b      	ldr	r3, [r3, #0]
 800ce46:	2bc7      	cmp	r3, #199	; 0xc7
 800ce48:	d906      	bls.n	800ce58 <Draw_Digit_Analog+0x144>
 800ce4a:	4b38      	ldr	r3, [pc, #224]	; (800cf2c <Draw_Digit_Analog+0x218>)
 800ce4c:	681b      	ldr	r3, [r3, #0]
 800ce4e:	f1c3 03c7 	rsb	r3, r3, #199	; 0xc7
 800ce52:	4a35      	ldr	r2, [pc, #212]	; (800cf28 <Draw_Digit_Analog+0x214>)
 800ce54:	6013      	str	r3, [r2, #0]
 800ce56:	e020      	b.n	800ce9a <Draw_Digit_Analog+0x186>
 800ce58:	4b35      	ldr	r3, [pc, #212]	; (800cf30 <Draw_Digit_Analog+0x21c>)
 800ce5a:	681b      	ldr	r3, [r3, #0]
 800ce5c:	2b02      	cmp	r3, #2
 800ce5e:	d957      	bls.n	800cf10 <Draw_Digit_Analog+0x1fc>
 800ce60:	4b32      	ldr	r3, [pc, #200]	; (800cf2c <Draw_Digit_Analog+0x218>)
 800ce62:	681b      	ldr	r3, [r3, #0]
 800ce64:	2b02      	cmp	r3, #2
 800ce66:	d808      	bhi.n	800ce7a <Draw_Digit_Analog+0x166>
 800ce68:	4b30      	ldr	r3, [pc, #192]	; (800cf2c <Draw_Digit_Analog+0x218>)
 800ce6a:	2203      	movs	r2, #3
 800ce6c:	601a      	str	r2, [r3, #0]
 800ce6e:	4b30      	ldr	r3, [pc, #192]	; (800cf30 <Draw_Digit_Analog+0x21c>)
 800ce70:	681b      	ldr	r3, [r3, #0]
 800ce72:	3b03      	subs	r3, #3
 800ce74:	4a2c      	ldr	r2, [pc, #176]	; (800cf28 <Draw_Digit_Analog+0x214>)
 800ce76:	6013      	str	r3, [r2, #0]
 800ce78:	e00f      	b.n	800ce9a <Draw_Digit_Analog+0x186>
 800ce7a:	4b2b      	ldr	r3, [pc, #172]	; (800cf28 <Draw_Digit_Analog+0x214>)
 800ce7c:	681b      	ldr	r3, [r3, #0]
 800ce7e:	2b00      	cmp	r3, #0
 800ce80:	d10a      	bne.n	800ce98 <Draw_Digit_Analog+0x184>
 800ce82:	4b2a      	ldr	r3, [pc, #168]	; (800cf2c <Draw_Digit_Analog+0x218>)
 800ce84:	681b      	ldr	r3, [r3, #0]
 800ce86:	3b01      	subs	r3, #1
 800ce88:	4a28      	ldr	r2, [pc, #160]	; (800cf2c <Draw_Digit_Analog+0x218>)
 800ce8a:	6013      	str	r3, [r2, #0]
 800ce8c:	4b26      	ldr	r3, [pc, #152]	; (800cf28 <Draw_Digit_Analog+0x214>)
 800ce8e:	681b      	ldr	r3, [r3, #0]
 800ce90:	3302      	adds	r3, #2
 800ce92:	4a25      	ldr	r2, [pc, #148]	; (800cf28 <Draw_Digit_Analog+0x214>)
 800ce94:	6013      	str	r3, [r2, #0]
 800ce96:	e000      	b.n	800ce9a <Draw_Digit_Analog+0x186>
 800ce98:	bf00      	nop
 800ce9a:	4b23      	ldr	r3, [pc, #140]	; (800cf28 <Draw_Digit_Analog+0x214>)
 800ce9c:	681b      	ldr	r3, [r3, #0]
 800ce9e:	2b13      	cmp	r3, #19
 800cea0:	d904      	bls.n	800ceac <Draw_Digit_Analog+0x198>
 800cea2:	4b25      	ldr	r3, [pc, #148]	; (800cf38 <Draw_Digit_Analog+0x224>)
 800cea4:	681b      	ldr	r3, [r3, #0]
 800cea6:	3314      	adds	r3, #20
 800cea8:	4a23      	ldr	r2, [pc, #140]	; (800cf38 <Draw_Digit_Analog+0x224>)
 800ceaa:	6013      	str	r3, [r2, #0]
 800ceac:	4b23      	ldr	r3, [pc, #140]	; (800cf3c <Draw_Digit_Analog+0x228>)
 800ceae:	681a      	ldr	r2, [r3, #0]
 800ceb0:	4b21      	ldr	r3, [pc, #132]	; (800cf38 <Draw_Digit_Analog+0x224>)
 800ceb2:	681b      	ldr	r3, [r3, #0]
 800ceb4:	4413      	add	r3, r2
 800ceb6:	881b      	ldrh	r3, [r3, #0]
 800ceb8:	461a      	mov	r2, r3
 800ceba:	4b1f      	ldr	r3, [pc, #124]	; (800cf38 <Draw_Digit_Analog+0x224>)
 800cebc:	601a      	str	r2, [r3, #0]
 800cebe:	4b1b      	ldr	r3, [pc, #108]	; (800cf2c <Draw_Digit_Analog+0x218>)
 800cec0:	681b      	ldr	r3, [r3, #0]
 800cec2:	005b      	lsls	r3, r3, #1
 800cec4:	4a19      	ldr	r2, [pc, #100]	; (800cf2c <Draw_Digit_Analog+0x218>)
 800cec6:	6013      	str	r3, [r2, #0]
 800cec8:	4b18      	ldr	r3, [pc, #96]	; (800cf2c <Draw_Digit_Analog+0x218>)
 800ceca:	681b      	ldr	r3, [r3, #0]
 800cecc:	085b      	lsrs	r3, r3, #1
 800cece:	f1c3 03cc 	rsb	r3, r3, #204	; 0xcc
 800ced2:	005b      	lsls	r3, r3, #1
 800ced4:	4a1a      	ldr	r2, [pc, #104]	; (800cf40 <Draw_Digit_Analog+0x22c>)
 800ced6:	4413      	add	r3, r2
 800ced8:	461a      	mov	r2, r3
 800ceda:	4b14      	ldr	r3, [pc, #80]	; (800cf2c <Draw_Digit_Analog+0x218>)
 800cedc:	601a      	str	r2, [r3, #0]
 800cede:	4b16      	ldr	r3, [pc, #88]	; (800cf38 <Draw_Digit_Analog+0x224>)
 800cee0:	681a      	ldr	r2, [r3, #0]
 800cee2:	4b12      	ldr	r3, [pc, #72]	; (800cf2c <Draw_Digit_Analog+0x218>)
 800cee4:	681b      	ldr	r3, [r3, #0]
 800cee6:	b292      	uxth	r2, r2
 800cee8:	801a      	strh	r2, [r3, #0]
 800ceea:	4b10      	ldr	r3, [pc, #64]	; (800cf2c <Draw_Digit_Analog+0x218>)
 800ceec:	681b      	ldr	r3, [r3, #0]
 800ceee:	3302      	adds	r3, #2
 800cef0:	4a0e      	ldr	r2, [pc, #56]	; (800cf2c <Draw_Digit_Analog+0x218>)
 800cef2:	6013      	str	r3, [r2, #0]
 800cef4:	4b0c      	ldr	r3, [pc, #48]	; (800cf28 <Draw_Digit_Analog+0x214>)
 800cef6:	681b      	ldr	r3, [r3, #0]
 800cef8:	3b01      	subs	r3, #1
 800cefa:	4a0b      	ldr	r2, [pc, #44]	; (800cf28 <Draw_Digit_Analog+0x214>)
 800cefc:	6013      	str	r3, [r2, #0]
 800cefe:	e7ee      	b.n	800cede <Draw_Digit_Analog+0x1ca>
 800cf00:	bf00      	nop
 800cf02:	e006      	b.n	800cf12 <Draw_Digit_Analog+0x1fe>
 800cf04:	bf00      	nop
 800cf06:	e004      	b.n	800cf12 <Draw_Digit_Analog+0x1fe>
 800cf08:	bf00      	nop
 800cf0a:	e002      	b.n	800cf12 <Draw_Digit_Analog+0x1fe>
 800cf0c:	bf00      	nop
 800cf0e:	e000      	b.n	800cf12 <Draw_Digit_Analog+0x1fe>
 800cf10:	bf00      	nop
 800cf12:	370c      	adds	r7, #12
 800cf14:	46bd      	mov	sp, r7
 800cf16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf1a:	4770      	bx	lr
 800cf1c:	20000a4c 	.word	0x20000a4c
 800cf20:	20000c08 	.word	0x20000c08
 800cf24:	20000c00 	.word	0x20000c00
 800cf28:	20000a44 	.word	0x20000a44
 800cf2c:	20000bf0 	.word	0x20000bf0
 800cf30:	20000bf4 	.word	0x20000bf4
 800cf34:	20000a40 	.word	0x20000a40
 800cf38:	20000a48 	.word	0x20000a48
 800cf3c:	20000bf8 	.word	0x20000bf8
 800cf40:	20000a50 	.word	0x20000a50

0800cf44 <Cursor_0>:
 800cf44:	b480      	push	{r7}
 800cf46:	b083      	sub	sp, #12
 800cf48:	af00      	add	r7, sp, #0
 800cf4a:	6078      	str	r0, [r7, #4]
 800cf4c:	4b3c      	ldr	r3, [pc, #240]	; (800d040 <Cursor_0+0xfc>)
 800cf4e:	2206      	movs	r2, #6
 800cf50:	601a      	str	r2, [r3, #0]
 800cf52:	4b3c      	ldr	r3, [pc, #240]	; (800d044 <Cursor_0+0x100>)
 800cf54:	4a3c      	ldr	r2, [pc, #240]	; (800d048 <Cursor_0+0x104>)
 800cf56:	601a      	str	r2, [r3, #0]
 800cf58:	4b39      	ldr	r3, [pc, #228]	; (800d040 <Cursor_0+0xfc>)
 800cf5a:	681b      	ldr	r3, [r3, #0]
 800cf5c:	005b      	lsls	r3, r3, #1
 800cf5e:	687a      	ldr	r2, [r7, #4]
 800cf60:	4413      	add	r3, r2
 800cf62:	f9b3 3000 	ldrsh.w	r3, [r3]
 800cf66:	461a      	mov	r2, r3
 800cf68:	4b38      	ldr	r3, [pc, #224]	; (800d04c <Cursor_0+0x108>)
 800cf6a:	601a      	str	r2, [r3, #0]
 800cf6c:	4b37      	ldr	r3, [pc, #220]	; (800d04c <Cursor_0+0x108>)
 800cf6e:	681b      	ldr	r3, [r3, #0]
 800cf70:	f003 0301 	and.w	r3, r3, #1
 800cf74:	2b00      	cmp	r3, #0
 800cf76:	d15c      	bne.n	800d032 <Cursor_0+0xee>
 800cf78:	4b31      	ldr	r3, [pc, #196]	; (800d040 <Cursor_0+0xfc>)
 800cf7a:	681b      	ldr	r3, [r3, #0]
 800cf7c:	330a      	adds	r3, #10
 800cf7e:	005b      	lsls	r3, r3, #1
 800cf80:	687a      	ldr	r2, [r7, #4]
 800cf82:	4413      	add	r3, r2
 800cf84:	f9b3 3000 	ldrsh.w	r3, [r3]
 800cf88:	461a      	mov	r2, r3
 800cf8a:	4b30      	ldr	r3, [pc, #192]	; (800d04c <Cursor_0+0x108>)
 800cf8c:	601a      	str	r2, [r3, #0]
 800cf8e:	4b2f      	ldr	r3, [pc, #188]	; (800d04c <Cursor_0+0x108>)
 800cf90:	681b      	ldr	r3, [r3, #0]
 800cf92:	085b      	lsrs	r3, r3, #1
 800cf94:	f1c3 03cc 	rsb	r3, r3, #204	; 0xcc
 800cf98:	005b      	lsls	r3, r3, #1
 800cf9a:	4a2d      	ldr	r2, [pc, #180]	; (800d050 <Cursor_0+0x10c>)
 800cf9c:	4413      	add	r3, r2
 800cf9e:	4a29      	ldr	r2, [pc, #164]	; (800d044 <Cursor_0+0x100>)
 800cfa0:	6013      	str	r3, [r2, #0]
 800cfa2:	4b27      	ldr	r3, [pc, #156]	; (800d040 <Cursor_0+0xfc>)
 800cfa4:	681b      	ldr	r3, [r3, #0]
 800cfa6:	3314      	adds	r3, #20
 800cfa8:	005b      	lsls	r3, r3, #1
 800cfaa:	687a      	ldr	r2, [r7, #4]
 800cfac:	4413      	add	r3, r2
 800cfae:	f9b3 3000 	ldrsh.w	r3, [r3]
 800cfb2:	461a      	mov	r2, r3
 800cfb4:	4b27      	ldr	r3, [pc, #156]	; (800d054 <Cursor_0+0x110>)
 800cfb6:	601a      	str	r2, [r3, #0]
 800cfb8:	4b22      	ldr	r3, [pc, #136]	; (800d044 <Cursor_0+0x100>)
 800cfba:	681b      	ldr	r3, [r3, #0]
 800cfbc:	3b04      	subs	r3, #4
 800cfbe:	4a21      	ldr	r2, [pc, #132]	; (800d044 <Cursor_0+0x100>)
 800cfc0:	6013      	str	r3, [r2, #0]
 800cfc2:	4b24      	ldr	r3, [pc, #144]	; (800d054 <Cursor_0+0x110>)
 800cfc4:	681a      	ldr	r2, [r3, #0]
 800cfc6:	4b1f      	ldr	r3, [pc, #124]	; (800d044 <Cursor_0+0x100>)
 800cfc8:	681b      	ldr	r3, [r3, #0]
 800cfca:	b292      	uxth	r2, r2
 800cfcc:	801a      	strh	r2, [r3, #0]
 800cfce:	4b1d      	ldr	r3, [pc, #116]	; (800d044 <Cursor_0+0x100>)
 800cfd0:	681b      	ldr	r3, [r3, #0]
 800cfd2:	3302      	adds	r3, #2
 800cfd4:	4a1b      	ldr	r2, [pc, #108]	; (800d044 <Cursor_0+0x100>)
 800cfd6:	6013      	str	r3, [r2, #0]
 800cfd8:	4b1e      	ldr	r3, [pc, #120]	; (800d054 <Cursor_0+0x110>)
 800cfda:	681a      	ldr	r2, [r3, #0]
 800cfdc:	4b19      	ldr	r3, [pc, #100]	; (800d044 <Cursor_0+0x100>)
 800cfde:	681b      	ldr	r3, [r3, #0]
 800cfe0:	b292      	uxth	r2, r2
 800cfe2:	801a      	strh	r2, [r3, #0]
 800cfe4:	4b17      	ldr	r3, [pc, #92]	; (800d044 <Cursor_0+0x100>)
 800cfe6:	681b      	ldr	r3, [r3, #0]
 800cfe8:	3302      	adds	r3, #2
 800cfea:	4a16      	ldr	r2, [pc, #88]	; (800d044 <Cursor_0+0x100>)
 800cfec:	6013      	str	r3, [r2, #0]
 800cfee:	4b19      	ldr	r3, [pc, #100]	; (800d054 <Cursor_0+0x110>)
 800cff0:	681a      	ldr	r2, [r3, #0]
 800cff2:	4b14      	ldr	r3, [pc, #80]	; (800d044 <Cursor_0+0x100>)
 800cff4:	681b      	ldr	r3, [r3, #0]
 800cff6:	b292      	uxth	r2, r2
 800cff8:	801a      	strh	r2, [r3, #0]
 800cffa:	4b12      	ldr	r3, [pc, #72]	; (800d044 <Cursor_0+0x100>)
 800cffc:	681b      	ldr	r3, [r3, #0]
 800cffe:	3302      	adds	r3, #2
 800d000:	4a10      	ldr	r2, [pc, #64]	; (800d044 <Cursor_0+0x100>)
 800d002:	6013      	str	r3, [r2, #0]
 800d004:	4b13      	ldr	r3, [pc, #76]	; (800d054 <Cursor_0+0x110>)
 800d006:	681a      	ldr	r2, [r3, #0]
 800d008:	4b0e      	ldr	r3, [pc, #56]	; (800d044 <Cursor_0+0x100>)
 800d00a:	681b      	ldr	r3, [r3, #0]
 800d00c:	b292      	uxth	r2, r2
 800d00e:	801a      	strh	r2, [r3, #0]
 800d010:	4b0c      	ldr	r3, [pc, #48]	; (800d044 <Cursor_0+0x100>)
 800d012:	681b      	ldr	r3, [r3, #0]
 800d014:	3302      	adds	r3, #2
 800d016:	4a0b      	ldr	r2, [pc, #44]	; (800d044 <Cursor_0+0x100>)
 800d018:	6013      	str	r3, [r2, #0]
 800d01a:	4b0e      	ldr	r3, [pc, #56]	; (800d054 <Cursor_0+0x110>)
 800d01c:	681a      	ldr	r2, [r3, #0]
 800d01e:	4b09      	ldr	r3, [pc, #36]	; (800d044 <Cursor_0+0x100>)
 800d020:	681b      	ldr	r3, [r3, #0]
 800d022:	b292      	uxth	r2, r2
 800d024:	801a      	strh	r2, [r3, #0]
 800d026:	4b07      	ldr	r3, [pc, #28]	; (800d044 <Cursor_0+0x100>)
 800d028:	681b      	ldr	r3, [r3, #0]
 800d02a:	3302      	adds	r3, #2
 800d02c:	4a05      	ldr	r2, [pc, #20]	; (800d044 <Cursor_0+0x100>)
 800d02e:	6013      	str	r3, [r2, #0]
 800d030:	e000      	b.n	800d034 <Cursor_0+0xf0>
 800d032:	bf00      	nop
 800d034:	4b02      	ldr	r3, [pc, #8]	; (800d040 <Cursor_0+0xfc>)
 800d036:	681b      	ldr	r3, [r3, #0]
 800d038:	3b01      	subs	r3, #1
 800d03a:	4a01      	ldr	r2, [pc, #4]	; (800d040 <Cursor_0+0xfc>)
 800d03c:	6013      	str	r3, [r2, #0]
 800d03e:	e78b      	b.n	800cf58 <Cursor_0+0x14>
 800d040:	20000a48 	.word	0x20000a48
 800d044:	20000bf4 	.word	0x20000bf4
 800d048:	20000be8 	.word	0x20000be8
 800d04c:	20000a44 	.word	0x20000a44
 800d050:	20000a50 	.word	0x20000a50
 800d054:	20000bf0 	.word	0x20000bf0

0800d058 <Cursor_1>:
 800d058:	b480      	push	{r7}
 800d05a:	b083      	sub	sp, #12
 800d05c:	af00      	add	r7, sp, #0
 800d05e:	6078      	str	r0, [r7, #4]
 800d060:	4b31      	ldr	r3, [pc, #196]	; (800d128 <Cursor_1+0xd0>)
 800d062:	2206      	movs	r2, #6
 800d064:	601a      	str	r2, [r3, #0]
 800d066:	4b31      	ldr	r3, [pc, #196]	; (800d12c <Cursor_1+0xd4>)
 800d068:	4a31      	ldr	r2, [pc, #196]	; (800d130 <Cursor_1+0xd8>)
 800d06a:	601a      	str	r2, [r3, #0]
 800d06c:	4b2e      	ldr	r3, [pc, #184]	; (800d128 <Cursor_1+0xd0>)
 800d06e:	681b      	ldr	r3, [r3, #0]
 800d070:	005b      	lsls	r3, r3, #1
 800d072:	687a      	ldr	r2, [r7, #4]
 800d074:	4413      	add	r3, r2
 800d076:	f9b3 3000 	ldrsh.w	r3, [r3]
 800d07a:	461a      	mov	r2, r3
 800d07c:	4b2d      	ldr	r3, [pc, #180]	; (800d134 <Cursor_1+0xdc>)
 800d07e:	601a      	str	r2, [r3, #0]
 800d080:	4b2c      	ldr	r3, [pc, #176]	; (800d134 <Cursor_1+0xdc>)
 800d082:	681b      	ldr	r3, [r3, #0]
 800d084:	f003 0301 	and.w	r3, r3, #1
 800d088:	2b00      	cmp	r3, #0
 800d08a:	d146      	bne.n	800d11a <Cursor_1+0xc2>
 800d08c:	4b26      	ldr	r3, [pc, #152]	; (800d128 <Cursor_1+0xd0>)
 800d08e:	681b      	ldr	r3, [r3, #0]
 800d090:	330a      	adds	r3, #10
 800d092:	005b      	lsls	r3, r3, #1
 800d094:	687a      	ldr	r2, [r7, #4]
 800d096:	4413      	add	r3, r2
 800d098:	f9b3 3000 	ldrsh.w	r3, [r3]
 800d09c:	461a      	mov	r2, r3
 800d09e:	4b25      	ldr	r3, [pc, #148]	; (800d134 <Cursor_1+0xdc>)
 800d0a0:	601a      	str	r2, [r3, #0]
 800d0a2:	4b24      	ldr	r3, [pc, #144]	; (800d134 <Cursor_1+0xdc>)
 800d0a4:	681b      	ldr	r3, [r3, #0]
 800d0a6:	085b      	lsrs	r3, r3, #1
 800d0a8:	f1c3 03cc 	rsb	r3, r3, #204	; 0xcc
 800d0ac:	005b      	lsls	r3, r3, #1
 800d0ae:	4a22      	ldr	r2, [pc, #136]	; (800d138 <Cursor_1+0xe0>)
 800d0b0:	4413      	add	r3, r2
 800d0b2:	4a1e      	ldr	r2, [pc, #120]	; (800d12c <Cursor_1+0xd4>)
 800d0b4:	6013      	str	r3, [r2, #0]
 800d0b6:	4b1c      	ldr	r3, [pc, #112]	; (800d128 <Cursor_1+0xd0>)
 800d0b8:	681b      	ldr	r3, [r3, #0]
 800d0ba:	3314      	adds	r3, #20
 800d0bc:	005b      	lsls	r3, r3, #1
 800d0be:	687a      	ldr	r2, [r7, #4]
 800d0c0:	4413      	add	r3, r2
 800d0c2:	f9b3 3000 	ldrsh.w	r3, [r3]
 800d0c6:	461a      	mov	r2, r3
 800d0c8:	4b1c      	ldr	r3, [pc, #112]	; (800d13c <Cursor_1+0xe4>)
 800d0ca:	601a      	str	r2, [r3, #0]
 800d0cc:	4b17      	ldr	r3, [pc, #92]	; (800d12c <Cursor_1+0xd4>)
 800d0ce:	681b      	ldr	r3, [r3, #0]
 800d0d0:	3b02      	subs	r3, #2
 800d0d2:	4a16      	ldr	r2, [pc, #88]	; (800d12c <Cursor_1+0xd4>)
 800d0d4:	6013      	str	r3, [r2, #0]
 800d0d6:	4b19      	ldr	r3, [pc, #100]	; (800d13c <Cursor_1+0xe4>)
 800d0d8:	681a      	ldr	r2, [r3, #0]
 800d0da:	4b14      	ldr	r3, [pc, #80]	; (800d12c <Cursor_1+0xd4>)
 800d0dc:	681b      	ldr	r3, [r3, #0]
 800d0de:	b292      	uxth	r2, r2
 800d0e0:	801a      	strh	r2, [r3, #0]
 800d0e2:	4b12      	ldr	r3, [pc, #72]	; (800d12c <Cursor_1+0xd4>)
 800d0e4:	681b      	ldr	r3, [r3, #0]
 800d0e6:	3302      	adds	r3, #2
 800d0e8:	4a10      	ldr	r2, [pc, #64]	; (800d12c <Cursor_1+0xd4>)
 800d0ea:	6013      	str	r3, [r2, #0]
 800d0ec:	4b13      	ldr	r3, [pc, #76]	; (800d13c <Cursor_1+0xe4>)
 800d0ee:	681a      	ldr	r2, [r3, #0]
 800d0f0:	4b0e      	ldr	r3, [pc, #56]	; (800d12c <Cursor_1+0xd4>)
 800d0f2:	681b      	ldr	r3, [r3, #0]
 800d0f4:	b292      	uxth	r2, r2
 800d0f6:	801a      	strh	r2, [r3, #0]
 800d0f8:	4b0c      	ldr	r3, [pc, #48]	; (800d12c <Cursor_1+0xd4>)
 800d0fa:	681b      	ldr	r3, [r3, #0]
 800d0fc:	3302      	adds	r3, #2
 800d0fe:	4a0b      	ldr	r2, [pc, #44]	; (800d12c <Cursor_1+0xd4>)
 800d100:	6013      	str	r3, [r2, #0]
 800d102:	4b0e      	ldr	r3, [pc, #56]	; (800d13c <Cursor_1+0xe4>)
 800d104:	681a      	ldr	r2, [r3, #0]
 800d106:	4b09      	ldr	r3, [pc, #36]	; (800d12c <Cursor_1+0xd4>)
 800d108:	681b      	ldr	r3, [r3, #0]
 800d10a:	b292      	uxth	r2, r2
 800d10c:	801a      	strh	r2, [r3, #0]
 800d10e:	4b07      	ldr	r3, [pc, #28]	; (800d12c <Cursor_1+0xd4>)
 800d110:	681b      	ldr	r3, [r3, #0]
 800d112:	3302      	adds	r3, #2
 800d114:	4a05      	ldr	r2, [pc, #20]	; (800d12c <Cursor_1+0xd4>)
 800d116:	6013      	str	r3, [r2, #0]
 800d118:	e000      	b.n	800d11c <Cursor_1+0xc4>
 800d11a:	bf00      	nop
 800d11c:	4b02      	ldr	r3, [pc, #8]	; (800d128 <Cursor_1+0xd0>)
 800d11e:	681b      	ldr	r3, [r3, #0]
 800d120:	3b01      	subs	r3, #1
 800d122:	4a01      	ldr	r2, [pc, #4]	; (800d128 <Cursor_1+0xd0>)
 800d124:	6013      	str	r3, [r2, #0]
 800d126:	e7a1      	b.n	800d06c <Cursor_1+0x14>
 800d128:	20000a48 	.word	0x20000a48
 800d12c:	20000bf4 	.word	0x20000bf4
 800d130:	20000be8 	.word	0x20000be8
 800d134:	20000a44 	.word	0x20000a44
 800d138:	20000a50 	.word	0x20000a50
 800d13c:	20000bf0 	.word	0x20000bf0

0800d140 <Cursor_2>:
 800d140:	b480      	push	{r7}
 800d142:	b083      	sub	sp, #12
 800d144:	af00      	add	r7, sp, #0
 800d146:	6078      	str	r0, [r7, #4]
 800d148:	4b21      	ldr	r3, [pc, #132]	; (800d1d0 <Cursor_2+0x90>)
 800d14a:	2206      	movs	r2, #6
 800d14c:	601a      	str	r2, [r3, #0]
 800d14e:	4b21      	ldr	r3, [pc, #132]	; (800d1d4 <Cursor_2+0x94>)
 800d150:	4a21      	ldr	r2, [pc, #132]	; (800d1d8 <Cursor_2+0x98>)
 800d152:	601a      	str	r2, [r3, #0]
 800d154:	4b1e      	ldr	r3, [pc, #120]	; (800d1d0 <Cursor_2+0x90>)
 800d156:	681b      	ldr	r3, [r3, #0]
 800d158:	005b      	lsls	r3, r3, #1
 800d15a:	687a      	ldr	r2, [r7, #4]
 800d15c:	4413      	add	r3, r2
 800d15e:	f9b3 3000 	ldrsh.w	r3, [r3]
 800d162:	461a      	mov	r2, r3
 800d164:	4b1d      	ldr	r3, [pc, #116]	; (800d1dc <Cursor_2+0x9c>)
 800d166:	601a      	str	r2, [r3, #0]
 800d168:	4b1c      	ldr	r3, [pc, #112]	; (800d1dc <Cursor_2+0x9c>)
 800d16a:	681b      	ldr	r3, [r3, #0]
 800d16c:	f003 0301 	and.w	r3, r3, #1
 800d170:	2b00      	cmp	r3, #0
 800d172:	d126      	bne.n	800d1c2 <Cursor_2+0x82>
 800d174:	4b16      	ldr	r3, [pc, #88]	; (800d1d0 <Cursor_2+0x90>)
 800d176:	681b      	ldr	r3, [r3, #0]
 800d178:	330a      	adds	r3, #10
 800d17a:	005b      	lsls	r3, r3, #1
 800d17c:	687a      	ldr	r2, [r7, #4]
 800d17e:	4413      	add	r3, r2
 800d180:	f9b3 3000 	ldrsh.w	r3, [r3]
 800d184:	461a      	mov	r2, r3
 800d186:	4b15      	ldr	r3, [pc, #84]	; (800d1dc <Cursor_2+0x9c>)
 800d188:	601a      	str	r2, [r3, #0]
 800d18a:	4b14      	ldr	r3, [pc, #80]	; (800d1dc <Cursor_2+0x9c>)
 800d18c:	681b      	ldr	r3, [r3, #0]
 800d18e:	085b      	lsrs	r3, r3, #1
 800d190:	f1c3 03cc 	rsb	r3, r3, #204	; 0xcc
 800d194:	005b      	lsls	r3, r3, #1
 800d196:	4a12      	ldr	r2, [pc, #72]	; (800d1e0 <Cursor_2+0xa0>)
 800d198:	4413      	add	r3, r2
 800d19a:	4a0e      	ldr	r2, [pc, #56]	; (800d1d4 <Cursor_2+0x94>)
 800d19c:	6013      	str	r3, [r2, #0]
 800d19e:	4b0c      	ldr	r3, [pc, #48]	; (800d1d0 <Cursor_2+0x90>)
 800d1a0:	681b      	ldr	r3, [r3, #0]
 800d1a2:	3314      	adds	r3, #20
 800d1a4:	005b      	lsls	r3, r3, #1
 800d1a6:	687a      	ldr	r2, [r7, #4]
 800d1a8:	4413      	add	r3, r2
 800d1aa:	f9b3 3000 	ldrsh.w	r3, [r3]
 800d1ae:	461a      	mov	r2, r3
 800d1b0:	4b0c      	ldr	r3, [pc, #48]	; (800d1e4 <Cursor_2+0xa4>)
 800d1b2:	601a      	str	r2, [r3, #0]
 800d1b4:	4b0b      	ldr	r3, [pc, #44]	; (800d1e4 <Cursor_2+0xa4>)
 800d1b6:	681a      	ldr	r2, [r3, #0]
 800d1b8:	4b06      	ldr	r3, [pc, #24]	; (800d1d4 <Cursor_2+0x94>)
 800d1ba:	681b      	ldr	r3, [r3, #0]
 800d1bc:	b292      	uxth	r2, r2
 800d1be:	801a      	strh	r2, [r3, #0]
 800d1c0:	e000      	b.n	800d1c4 <Cursor_2+0x84>
 800d1c2:	bf00      	nop
 800d1c4:	4b02      	ldr	r3, [pc, #8]	; (800d1d0 <Cursor_2+0x90>)
 800d1c6:	681b      	ldr	r3, [r3, #0]
 800d1c8:	3b01      	subs	r3, #1
 800d1ca:	4a01      	ldr	r2, [pc, #4]	; (800d1d0 <Cursor_2+0x90>)
 800d1cc:	6013      	str	r3, [r2, #0]
 800d1ce:	e7c1      	b.n	800d154 <Cursor_2+0x14>
 800d1d0:	20000a48 	.word	0x20000a48
 800d1d4:	20000bf4 	.word	0x20000bf4
 800d1d8:	20000be8 	.word	0x20000be8
 800d1dc:	20000a44 	.word	0x20000a44
 800d1e0:	20000a50 	.word	0x20000a50
 800d1e4:	20000bf0 	.word	0x20000bf0

0800d1e8 <Cursor_3>:
 800d1e8:	b480      	push	{r7}
 800d1ea:	b083      	sub	sp, #12
 800d1ec:	af00      	add	r7, sp, #0
 800d1ee:	6078      	str	r0, [r7, #4]
 800d1f0:	4b2a      	ldr	r3, [pc, #168]	; (800d29c <Cursor_3+0xb4>)
 800d1f2:	2206      	movs	r2, #6
 800d1f4:	601a      	str	r2, [r3, #0]
 800d1f6:	4b2a      	ldr	r3, [pc, #168]	; (800d2a0 <Cursor_3+0xb8>)
 800d1f8:	4a2a      	ldr	r2, [pc, #168]	; (800d2a4 <Cursor_3+0xbc>)
 800d1fa:	601a      	str	r2, [r3, #0]
 800d1fc:	4b27      	ldr	r3, [pc, #156]	; (800d29c <Cursor_3+0xb4>)
 800d1fe:	681b      	ldr	r3, [r3, #0]
 800d200:	005b      	lsls	r3, r3, #1
 800d202:	687a      	ldr	r2, [r7, #4]
 800d204:	4413      	add	r3, r2
 800d206:	f9b3 3000 	ldrsh.w	r3, [r3]
 800d20a:	461a      	mov	r2, r3
 800d20c:	4b26      	ldr	r3, [pc, #152]	; (800d2a8 <Cursor_3+0xc0>)
 800d20e:	601a      	str	r2, [r3, #0]
 800d210:	4b25      	ldr	r3, [pc, #148]	; (800d2a8 <Cursor_3+0xc0>)
 800d212:	681b      	ldr	r3, [r3, #0]
 800d214:	f003 0302 	and.w	r3, r3, #2
 800d218:	2b00      	cmp	r3, #0
 800d21a:	d135      	bne.n	800d288 <Cursor_3+0xa0>
 800d21c:	4b23      	ldr	r3, [pc, #140]	; (800d2ac <Cursor_3+0xc4>)
 800d21e:	681b      	ldr	r3, [r3, #0]
 800d220:	3b01      	subs	r3, #1
 800d222:	4a21      	ldr	r2, [pc, #132]	; (800d2a8 <Cursor_3+0xc0>)
 800d224:	6013      	str	r3, [r2, #0]
 800d226:	4b20      	ldr	r3, [pc, #128]	; (800d2a8 <Cursor_3+0xc0>)
 800d228:	681b      	ldr	r3, [r3, #0]
 800d22a:	f003 0303 	and.w	r3, r3, #3
 800d22e:	4a1e      	ldr	r2, [pc, #120]	; (800d2a8 <Cursor_3+0xc0>)
 800d230:	6013      	str	r3, [r2, #0]
 800d232:	4b1d      	ldr	r3, [pc, #116]	; (800d2a8 <Cursor_3+0xc0>)
 800d234:	681b      	ldr	r3, [r3, #0]
 800d236:	2b00      	cmp	r3, #0
 800d238:	d128      	bne.n	800d28c <Cursor_3+0xa4>
 800d23a:	4b18      	ldr	r3, [pc, #96]	; (800d29c <Cursor_3+0xb4>)
 800d23c:	681b      	ldr	r3, [r3, #0]
 800d23e:	330a      	adds	r3, #10
 800d240:	005b      	lsls	r3, r3, #1
 800d242:	687a      	ldr	r2, [r7, #4]
 800d244:	4413      	add	r3, r2
 800d246:	f9b3 3000 	ldrsh.w	r3, [r3]
 800d24a:	461a      	mov	r2, r3
 800d24c:	4b16      	ldr	r3, [pc, #88]	; (800d2a8 <Cursor_3+0xc0>)
 800d24e:	601a      	str	r2, [r3, #0]
 800d250:	4b15      	ldr	r3, [pc, #84]	; (800d2a8 <Cursor_3+0xc0>)
 800d252:	681b      	ldr	r3, [r3, #0]
 800d254:	085b      	lsrs	r3, r3, #1
 800d256:	f1c3 03cc 	rsb	r3, r3, #204	; 0xcc
 800d25a:	005b      	lsls	r3, r3, #1
 800d25c:	4a14      	ldr	r2, [pc, #80]	; (800d2b0 <Cursor_3+0xc8>)
 800d25e:	4413      	add	r3, r2
 800d260:	4a0f      	ldr	r2, [pc, #60]	; (800d2a0 <Cursor_3+0xb8>)
 800d262:	6013      	str	r3, [r2, #0]
 800d264:	4b0d      	ldr	r3, [pc, #52]	; (800d29c <Cursor_3+0xb4>)
 800d266:	681b      	ldr	r3, [r3, #0]
 800d268:	3314      	adds	r3, #20
 800d26a:	005b      	lsls	r3, r3, #1
 800d26c:	687a      	ldr	r2, [r7, #4]
 800d26e:	4413      	add	r3, r2
 800d270:	f9b3 3000 	ldrsh.w	r3, [r3]
 800d274:	461a      	mov	r2, r3
 800d276:	4b0f      	ldr	r3, [pc, #60]	; (800d2b4 <Cursor_3+0xcc>)
 800d278:	601a      	str	r2, [r3, #0]
 800d27a:	4b0e      	ldr	r3, [pc, #56]	; (800d2b4 <Cursor_3+0xcc>)
 800d27c:	681a      	ldr	r2, [r3, #0]
 800d27e:	4b08      	ldr	r3, [pc, #32]	; (800d2a0 <Cursor_3+0xb8>)
 800d280:	681b      	ldr	r3, [r3, #0]
 800d282:	b292      	uxth	r2, r2
 800d284:	801a      	strh	r2, [r3, #0]
 800d286:	e002      	b.n	800d28e <Cursor_3+0xa6>
 800d288:	bf00      	nop
 800d28a:	e000      	b.n	800d28e <Cursor_3+0xa6>
 800d28c:	bf00      	nop
 800d28e:	4b03      	ldr	r3, [pc, #12]	; (800d29c <Cursor_3+0xb4>)
 800d290:	681b      	ldr	r3, [r3, #0]
 800d292:	3b01      	subs	r3, #1
 800d294:	4a01      	ldr	r2, [pc, #4]	; (800d29c <Cursor_3+0xb4>)
 800d296:	6013      	str	r3, [r2, #0]
 800d298:	e7b0      	b.n	800d1fc <Cursor_3+0x14>
 800d29a:	bf00      	nop
 800d29c:	20000a48 	.word	0x20000a48
 800d2a0:	20000bf4 	.word	0x20000bf4
 800d2a4:	20000be8 	.word	0x20000be8
 800d2a8:	20000a44 	.word	0x20000a44
 800d2ac:	20000c00 	.word	0x20000c00
 800d2b0:	20000a50 	.word	0x20000a50
 800d2b4:	20000bf0 	.word	0x20000bf0

0800d2b8 <Cursor_4>:
 800d2b8:	b480      	push	{r7}
 800d2ba:	b083      	sub	sp, #12
 800d2bc:	af00      	add	r7, sp, #0
 800d2be:	6078      	str	r0, [r7, #4]
 800d2c0:	4b7a      	ldr	r3, [pc, #488]	; (800d4ac <Cursor_4+0x1f4>)
 800d2c2:	2207      	movs	r2, #7
 800d2c4:	601a      	str	r2, [r3, #0]
 800d2c6:	4b7a      	ldr	r3, [pc, #488]	; (800d4b0 <Cursor_4+0x1f8>)
 800d2c8:	4a7a      	ldr	r2, [pc, #488]	; (800d4b4 <Cursor_4+0x1fc>)
 800d2ca:	601a      	str	r2, [r3, #0]
 800d2cc:	4b77      	ldr	r3, [pc, #476]	; (800d4ac <Cursor_4+0x1f4>)
 800d2ce:	681b      	ldr	r3, [r3, #0]
 800d2d0:	005b      	lsls	r3, r3, #1
 800d2d2:	687a      	ldr	r2, [r7, #4]
 800d2d4:	4413      	add	r3, r2
 800d2d6:	f9b3 3000 	ldrsh.w	r3, [r3]
 800d2da:	461a      	mov	r2, r3
 800d2dc:	4b76      	ldr	r3, [pc, #472]	; (800d4b8 <Cursor_4+0x200>)
 800d2de:	601a      	str	r2, [r3, #0]
 800d2e0:	4b75      	ldr	r3, [pc, #468]	; (800d4b8 <Cursor_4+0x200>)
 800d2e2:	681b      	ldr	r3, [r3, #0]
 800d2e4:	f003 0301 	and.w	r3, r3, #1
 800d2e8:	2b00      	cmp	r3, #0
 800d2ea:	f040 8145 	bne.w	800d578 <Cursor_4+0x2c0>
 800d2ee:	bf00      	nop
 800d2f0:	4b6e      	ldr	r3, [pc, #440]	; (800d4ac <Cursor_4+0x1f4>)
 800d2f2:	681b      	ldr	r3, [r3, #0]
 800d2f4:	330a      	adds	r3, #10
 800d2f6:	005b      	lsls	r3, r3, #1
 800d2f8:	687a      	ldr	r2, [r7, #4]
 800d2fa:	4413      	add	r3, r2
 800d2fc:	f9b3 3000 	ldrsh.w	r3, [r3]
 800d300:	461a      	mov	r2, r3
 800d302:	4b6d      	ldr	r3, [pc, #436]	; (800d4b8 <Cursor_4+0x200>)
 800d304:	601a      	str	r2, [r3, #0]
 800d306:	4b69      	ldr	r3, [pc, #420]	; (800d4ac <Cursor_4+0x1f4>)
 800d308:	681b      	ldr	r3, [r3, #0]
 800d30a:	3314      	adds	r3, #20
 800d30c:	005b      	lsls	r3, r3, #1
 800d30e:	687a      	ldr	r2, [r7, #4]
 800d310:	4413      	add	r3, r2
 800d312:	f9b3 3000 	ldrsh.w	r3, [r3]
 800d316:	461a      	mov	r2, r3
 800d318:	4b68      	ldr	r3, [pc, #416]	; (800d4bc <Cursor_4+0x204>)
 800d31a:	601a      	str	r2, [r3, #0]
 800d31c:	4b66      	ldr	r3, [pc, #408]	; (800d4b8 <Cursor_4+0x200>)
 800d31e:	681b      	ldr	r3, [r3, #0]
 800d320:	3b02      	subs	r3, #2
 800d322:	4a67      	ldr	r2, [pc, #412]	; (800d4c0 <Cursor_4+0x208>)
 800d324:	6013      	str	r3, [r2, #0]
 800d326:	4b64      	ldr	r3, [pc, #400]	; (800d4b8 <Cursor_4+0x200>)
 800d328:	681a      	ldr	r2, [r3, #0]
 800d32a:	4b65      	ldr	r3, [pc, #404]	; (800d4c0 <Cursor_4+0x208>)
 800d32c:	681b      	ldr	r3, [r3, #0]
 800d32e:	429a      	cmp	r2, r3
 800d330:	d112      	bne.n	800d358 <Cursor_4+0xa0>
 800d332:	4b62      	ldr	r3, [pc, #392]	; (800d4bc <Cursor_4+0x204>)
 800d334:	681a      	ldr	r2, [r3, #0]
 800d336:	4b5e      	ldr	r3, [pc, #376]	; (800d4b0 <Cursor_4+0x1f8>)
 800d338:	681b      	ldr	r3, [r3, #0]
 800d33a:	b292      	uxth	r2, r2
 800d33c:	801a      	strh	r2, [r3, #0]
 800d33e:	4b5c      	ldr	r3, [pc, #368]	; (800d4b0 <Cursor_4+0x1f8>)
 800d340:	681b      	ldr	r3, [r3, #0]
 800d342:	f503 73ca 	add.w	r3, r3, #404	; 0x194
 800d346:	4a5a      	ldr	r2, [pc, #360]	; (800d4b0 <Cursor_4+0x1f8>)
 800d348:	6013      	str	r3, [r2, #0]
 800d34a:	4b5c      	ldr	r3, [pc, #368]	; (800d4bc <Cursor_4+0x204>)
 800d34c:	681a      	ldr	r2, [r3, #0]
 800d34e:	4b58      	ldr	r3, [pc, #352]	; (800d4b0 <Cursor_4+0x1f8>)
 800d350:	681b      	ldr	r3, [r3, #0]
 800d352:	b292      	uxth	r2, r2
 800d354:	801a      	strh	r2, [r3, #0]
 800d356:	e114      	b.n	800d582 <Cursor_4+0x2ca>
 800d358:	bf00      	nop
 800d35a:	4b59      	ldr	r3, [pc, #356]	; (800d4c0 <Cursor_4+0x208>)
 800d35c:	681b      	ldr	r3, [r3, #0]
 800d35e:	3301      	adds	r3, #1
 800d360:	4a57      	ldr	r2, [pc, #348]	; (800d4c0 <Cursor_4+0x208>)
 800d362:	6013      	str	r3, [r2, #0]
 800d364:	4b57      	ldr	r3, [pc, #348]	; (800d4c4 <Cursor_4+0x20c>)
 800d366:	681a      	ldr	r2, [r3, #0]
 800d368:	4b55      	ldr	r3, [pc, #340]	; (800d4c0 <Cursor_4+0x208>)
 800d36a:	681b      	ldr	r3, [r3, #0]
 800d36c:	429a      	cmp	r2, r3
 800d36e:	d128      	bne.n	800d3c2 <Cursor_4+0x10a>
 800d370:	4b52      	ldr	r3, [pc, #328]	; (800d4bc <Cursor_4+0x204>)
 800d372:	681a      	ldr	r2, [r3, #0]
 800d374:	4b4e      	ldr	r3, [pc, #312]	; (800d4b0 <Cursor_4+0x1f8>)
 800d376:	681b      	ldr	r3, [r3, #0]
 800d378:	b292      	uxth	r2, r2
 800d37a:	801a      	strh	r2, [r3, #0]
 800d37c:	4b4c      	ldr	r3, [pc, #304]	; (800d4b0 <Cursor_4+0x1f8>)
 800d37e:	681b      	ldr	r3, [r3, #0]
 800d380:	3302      	adds	r3, #2
 800d382:	4a4b      	ldr	r2, [pc, #300]	; (800d4b0 <Cursor_4+0x1f8>)
 800d384:	6013      	str	r3, [r2, #0]
 800d386:	4b4d      	ldr	r3, [pc, #308]	; (800d4bc <Cursor_4+0x204>)
 800d388:	681a      	ldr	r2, [r3, #0]
 800d38a:	4b49      	ldr	r3, [pc, #292]	; (800d4b0 <Cursor_4+0x1f8>)
 800d38c:	681b      	ldr	r3, [r3, #0]
 800d38e:	b292      	uxth	r2, r2
 800d390:	801a      	strh	r2, [r3, #0]
 800d392:	4b47      	ldr	r3, [pc, #284]	; (800d4b0 <Cursor_4+0x1f8>)
 800d394:	681b      	ldr	r3, [r3, #0]
 800d396:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 800d39a:	4a45      	ldr	r2, [pc, #276]	; (800d4b0 <Cursor_4+0x1f8>)
 800d39c:	6013      	str	r3, [r2, #0]
 800d39e:	4b47      	ldr	r3, [pc, #284]	; (800d4bc <Cursor_4+0x204>)
 800d3a0:	681a      	ldr	r2, [r3, #0]
 800d3a2:	4b43      	ldr	r3, [pc, #268]	; (800d4b0 <Cursor_4+0x1f8>)
 800d3a4:	681b      	ldr	r3, [r3, #0]
 800d3a6:	b292      	uxth	r2, r2
 800d3a8:	801a      	strh	r2, [r3, #0]
 800d3aa:	4b41      	ldr	r3, [pc, #260]	; (800d4b0 <Cursor_4+0x1f8>)
 800d3ac:	681b      	ldr	r3, [r3, #0]
 800d3ae:	3302      	adds	r3, #2
 800d3b0:	4a3f      	ldr	r2, [pc, #252]	; (800d4b0 <Cursor_4+0x1f8>)
 800d3b2:	6013      	str	r3, [r2, #0]
 800d3b4:	4b41      	ldr	r3, [pc, #260]	; (800d4bc <Cursor_4+0x204>)
 800d3b6:	681a      	ldr	r2, [r3, #0]
 800d3b8:	4b3d      	ldr	r3, [pc, #244]	; (800d4b0 <Cursor_4+0x1f8>)
 800d3ba:	681b      	ldr	r3, [r3, #0]
 800d3bc:	b292      	uxth	r2, r2
 800d3be:	801a      	strh	r2, [r3, #0]
 800d3c0:	e0df      	b.n	800d582 <Cursor_4+0x2ca>
 800d3c2:	bf00      	nop
 800d3c4:	4b3e      	ldr	r3, [pc, #248]	; (800d4c0 <Cursor_4+0x208>)
 800d3c6:	681b      	ldr	r3, [r3, #0]
 800d3c8:	3301      	adds	r3, #1
 800d3ca:	4a3d      	ldr	r2, [pc, #244]	; (800d4c0 <Cursor_4+0x208>)
 800d3cc:	6013      	str	r3, [r2, #0]
 800d3ce:	4b3d      	ldr	r3, [pc, #244]	; (800d4c4 <Cursor_4+0x20c>)
 800d3d0:	681a      	ldr	r2, [r3, #0]
 800d3d2:	4b3b      	ldr	r3, [pc, #236]	; (800d4c0 <Cursor_4+0x208>)
 800d3d4:	681b      	ldr	r3, [r3, #0]
 800d3d6:	429a      	cmp	r2, r3
 800d3d8:	d166      	bne.n	800d4a8 <Cursor_4+0x1f0>
 800d3da:	4b38      	ldr	r3, [pc, #224]	; (800d4bc <Cursor_4+0x204>)
 800d3dc:	681a      	ldr	r2, [r3, #0]
 800d3de:	4b34      	ldr	r3, [pc, #208]	; (800d4b0 <Cursor_4+0x1f8>)
 800d3e0:	681b      	ldr	r3, [r3, #0]
 800d3e2:	b292      	uxth	r2, r2
 800d3e4:	801a      	strh	r2, [r3, #0]
 800d3e6:	4b32      	ldr	r3, [pc, #200]	; (800d4b0 <Cursor_4+0x1f8>)
 800d3e8:	681b      	ldr	r3, [r3, #0]
 800d3ea:	3302      	adds	r3, #2
 800d3ec:	4a30      	ldr	r2, [pc, #192]	; (800d4b0 <Cursor_4+0x1f8>)
 800d3ee:	6013      	str	r3, [r2, #0]
 800d3f0:	4b32      	ldr	r3, [pc, #200]	; (800d4bc <Cursor_4+0x204>)
 800d3f2:	681a      	ldr	r2, [r3, #0]
 800d3f4:	4b2e      	ldr	r3, [pc, #184]	; (800d4b0 <Cursor_4+0x1f8>)
 800d3f6:	681b      	ldr	r3, [r3, #0]
 800d3f8:	b292      	uxth	r2, r2
 800d3fa:	801a      	strh	r2, [r3, #0]
 800d3fc:	4b2c      	ldr	r3, [pc, #176]	; (800d4b0 <Cursor_4+0x1f8>)
 800d3fe:	681b      	ldr	r3, [r3, #0]
 800d400:	3302      	adds	r3, #2
 800d402:	4a2b      	ldr	r2, [pc, #172]	; (800d4b0 <Cursor_4+0x1f8>)
 800d404:	6013      	str	r3, [r2, #0]
 800d406:	4b2d      	ldr	r3, [pc, #180]	; (800d4bc <Cursor_4+0x204>)
 800d408:	681a      	ldr	r2, [r3, #0]
 800d40a:	4b29      	ldr	r3, [pc, #164]	; (800d4b0 <Cursor_4+0x1f8>)
 800d40c:	681b      	ldr	r3, [r3, #0]
 800d40e:	b292      	uxth	r2, r2
 800d410:	801a      	strh	r2, [r3, #0]
 800d412:	4b27      	ldr	r3, [pc, #156]	; (800d4b0 <Cursor_4+0x1f8>)
 800d414:	4a2c      	ldr	r2, [pc, #176]	; (800d4c8 <Cursor_4+0x210>)
 800d416:	601a      	str	r2, [r3, #0]
 800d418:	4b28      	ldr	r3, [pc, #160]	; (800d4bc <Cursor_4+0x204>)
 800d41a:	681a      	ldr	r2, [r3, #0]
 800d41c:	4b24      	ldr	r3, [pc, #144]	; (800d4b0 <Cursor_4+0x1f8>)
 800d41e:	681b      	ldr	r3, [r3, #0]
 800d420:	b292      	uxth	r2, r2
 800d422:	801a      	strh	r2, [r3, #0]
 800d424:	4b22      	ldr	r3, [pc, #136]	; (800d4b0 <Cursor_4+0x1f8>)
 800d426:	681b      	ldr	r3, [r3, #0]
 800d428:	3302      	adds	r3, #2
 800d42a:	4a21      	ldr	r2, [pc, #132]	; (800d4b0 <Cursor_4+0x1f8>)
 800d42c:	6013      	str	r3, [r2, #0]
 800d42e:	4b23      	ldr	r3, [pc, #140]	; (800d4bc <Cursor_4+0x204>)
 800d430:	681a      	ldr	r2, [r3, #0]
 800d432:	4b1f      	ldr	r3, [pc, #124]	; (800d4b0 <Cursor_4+0x1f8>)
 800d434:	681b      	ldr	r3, [r3, #0]
 800d436:	b292      	uxth	r2, r2
 800d438:	801a      	strh	r2, [r3, #0]
 800d43a:	4b1d      	ldr	r3, [pc, #116]	; (800d4b0 <Cursor_4+0x1f8>)
 800d43c:	681b      	ldr	r3, [r3, #0]
 800d43e:	3302      	adds	r3, #2
 800d440:	4a1b      	ldr	r2, [pc, #108]	; (800d4b0 <Cursor_4+0x1f8>)
 800d442:	6013      	str	r3, [r2, #0]
 800d444:	4b1d      	ldr	r3, [pc, #116]	; (800d4bc <Cursor_4+0x204>)
 800d446:	681a      	ldr	r2, [r3, #0]
 800d448:	4b19      	ldr	r3, [pc, #100]	; (800d4b0 <Cursor_4+0x1f8>)
 800d44a:	681b      	ldr	r3, [r3, #0]
 800d44c:	b292      	uxth	r2, r2
 800d44e:	801a      	strh	r2, [r3, #0]
 800d450:	4b16      	ldr	r3, [pc, #88]	; (800d4ac <Cursor_4+0x1f4>)
 800d452:	681b      	ldr	r3, [r3, #0]
 800d454:	330a      	adds	r3, #10
 800d456:	005b      	lsls	r3, r3, #1
 800d458:	687a      	ldr	r2, [r7, #4]
 800d45a:	4413      	add	r3, r2
 800d45c:	f9b3 3000 	ldrsh.w	r3, [r3]
 800d460:	461a      	mov	r2, r3
 800d462:	4b15      	ldr	r3, [pc, #84]	; (800d4b8 <Cursor_4+0x200>)
 800d464:	601a      	str	r2, [r3, #0]
 800d466:	4b14      	ldr	r3, [pc, #80]	; (800d4b8 <Cursor_4+0x200>)
 800d468:	681b      	ldr	r3, [r3, #0]
 800d46a:	f003 0302 	and.w	r3, r3, #2
 800d46e:	2b00      	cmp	r3, #0
 800d470:	d12e      	bne.n	800d4d0 <Cursor_4+0x218>
 800d472:	4b0f      	ldr	r3, [pc, #60]	; (800d4b0 <Cursor_4+0x1f8>)
 800d474:	4a0f      	ldr	r2, [pc, #60]	; (800d4b4 <Cursor_4+0x1fc>)
 800d476:	601a      	str	r2, [r3, #0]
 800d478:	4b0d      	ldr	r3, [pc, #52]	; (800d4b0 <Cursor_4+0x1f8>)
 800d47a:	681b      	ldr	r3, [r3, #0]
 800d47c:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 800d480:	4a12      	ldr	r2, [pc, #72]	; (800d4cc <Cursor_4+0x214>)
 800d482:	6013      	str	r3, [r2, #0]
 800d484:	4b0a      	ldr	r3, [pc, #40]	; (800d4b0 <Cursor_4+0x1f8>)
 800d486:	681b      	ldr	r3, [r3, #0]
 800d488:	3308      	adds	r3, #8
 800d48a:	4a09      	ldr	r2, [pc, #36]	; (800d4b0 <Cursor_4+0x1f8>)
 800d48c:	6013      	str	r3, [r2, #0]
 800d48e:	4b0b      	ldr	r3, [pc, #44]	; (800d4bc <Cursor_4+0x204>)
 800d490:	681a      	ldr	r2, [r3, #0]
 800d492:	4b07      	ldr	r3, [pc, #28]	; (800d4b0 <Cursor_4+0x1f8>)
 800d494:	681b      	ldr	r3, [r3, #0]
 800d496:	b292      	uxth	r2, r2
 800d498:	801a      	strh	r2, [r3, #0]
 800d49a:	4b05      	ldr	r3, [pc, #20]	; (800d4b0 <Cursor_4+0x1f8>)
 800d49c:	681a      	ldr	r2, [r3, #0]
 800d49e:	4b0b      	ldr	r3, [pc, #44]	; (800d4cc <Cursor_4+0x214>)
 800d4a0:	681b      	ldr	r3, [r3, #0]
 800d4a2:	429a      	cmp	r2, r3
 800d4a4:	d86a      	bhi.n	800d57c <Cursor_4+0x2c4>
 800d4a6:	e7ed      	b.n	800d484 <Cursor_4+0x1cc>
 800d4a8:	bf00      	nop
 800d4aa:	e012      	b.n	800d4d2 <Cursor_4+0x21a>
 800d4ac:	20000a48 	.word	0x20000a48
 800d4b0:	20000bf4 	.word	0x20000bf4
 800d4b4:	20000be8 	.word	0x20000be8
 800d4b8:	20000a44 	.word	0x20000a44
 800d4bc:	20000bf0 	.word	0x20000bf0
 800d4c0:	20000a40 	.word	0x20000a40
 800d4c4:	20000c00 	.word	0x20000c00
 800d4c8:	20000a58 	.word	0x20000a58
 800d4cc:	20000c08 	.word	0x20000c08
 800d4d0:	bf00      	nop
 800d4d2:	4b34      	ldr	r3, [pc, #208]	; (800d5a4 <Cursor_4+0x2ec>)
 800d4d4:	681b      	ldr	r3, [r3, #0]
 800d4d6:	3301      	adds	r3, #1
 800d4d8:	4a32      	ldr	r2, [pc, #200]	; (800d5a4 <Cursor_4+0x2ec>)
 800d4da:	6013      	str	r3, [r2, #0]
 800d4dc:	4b31      	ldr	r3, [pc, #196]	; (800d5a4 <Cursor_4+0x2ec>)
 800d4de:	681a      	ldr	r2, [r3, #0]
 800d4e0:	4b31      	ldr	r3, [pc, #196]	; (800d5a8 <Cursor_4+0x2f0>)
 800d4e2:	681b      	ldr	r3, [r3, #0]
 800d4e4:	429a      	cmp	r2, r3
 800d4e6:	d128      	bne.n	800d53a <Cursor_4+0x282>
 800d4e8:	4b30      	ldr	r3, [pc, #192]	; (800d5ac <Cursor_4+0x2f4>)
 800d4ea:	681a      	ldr	r2, [r3, #0]
 800d4ec:	4b30      	ldr	r3, [pc, #192]	; (800d5b0 <Cursor_4+0x2f8>)
 800d4ee:	681b      	ldr	r3, [r3, #0]
 800d4f0:	b292      	uxth	r2, r2
 800d4f2:	801a      	strh	r2, [r3, #0]
 800d4f4:	4b2e      	ldr	r3, [pc, #184]	; (800d5b0 <Cursor_4+0x2f8>)
 800d4f6:	681b      	ldr	r3, [r3, #0]
 800d4f8:	3302      	adds	r3, #2
 800d4fa:	4a2d      	ldr	r2, [pc, #180]	; (800d5b0 <Cursor_4+0x2f8>)
 800d4fc:	6013      	str	r3, [r2, #0]
 800d4fe:	4b2b      	ldr	r3, [pc, #172]	; (800d5ac <Cursor_4+0x2f4>)
 800d500:	681a      	ldr	r2, [r3, #0]
 800d502:	4b2b      	ldr	r3, [pc, #172]	; (800d5b0 <Cursor_4+0x2f8>)
 800d504:	681b      	ldr	r3, [r3, #0]
 800d506:	b292      	uxth	r2, r2
 800d508:	801a      	strh	r2, [r3, #0]
 800d50a:	4b29      	ldr	r3, [pc, #164]	; (800d5b0 <Cursor_4+0x2f8>)
 800d50c:	681b      	ldr	r3, [r3, #0]
 800d50e:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 800d512:	4a27      	ldr	r2, [pc, #156]	; (800d5b0 <Cursor_4+0x2f8>)
 800d514:	6013      	str	r3, [r2, #0]
 800d516:	4b25      	ldr	r3, [pc, #148]	; (800d5ac <Cursor_4+0x2f4>)
 800d518:	681a      	ldr	r2, [r3, #0]
 800d51a:	4b25      	ldr	r3, [pc, #148]	; (800d5b0 <Cursor_4+0x2f8>)
 800d51c:	681b      	ldr	r3, [r3, #0]
 800d51e:	b292      	uxth	r2, r2
 800d520:	801a      	strh	r2, [r3, #0]
 800d522:	4b23      	ldr	r3, [pc, #140]	; (800d5b0 <Cursor_4+0x2f8>)
 800d524:	681b      	ldr	r3, [r3, #0]
 800d526:	3302      	adds	r3, #2
 800d528:	4a21      	ldr	r2, [pc, #132]	; (800d5b0 <Cursor_4+0x2f8>)
 800d52a:	6013      	str	r3, [r2, #0]
 800d52c:	4b1f      	ldr	r3, [pc, #124]	; (800d5ac <Cursor_4+0x2f4>)
 800d52e:	681a      	ldr	r2, [r3, #0]
 800d530:	4b1f      	ldr	r3, [pc, #124]	; (800d5b0 <Cursor_4+0x2f8>)
 800d532:	681b      	ldr	r3, [r3, #0]
 800d534:	b292      	uxth	r2, r2
 800d536:	801a      	strh	r2, [r3, #0]
 800d538:	e023      	b.n	800d582 <Cursor_4+0x2ca>
 800d53a:	bf00      	nop
 800d53c:	4b19      	ldr	r3, [pc, #100]	; (800d5a4 <Cursor_4+0x2ec>)
 800d53e:	681b      	ldr	r3, [r3, #0]
 800d540:	3301      	adds	r3, #1
 800d542:	4a18      	ldr	r2, [pc, #96]	; (800d5a4 <Cursor_4+0x2ec>)
 800d544:	6013      	str	r3, [r2, #0]
 800d546:	4b17      	ldr	r3, [pc, #92]	; (800d5a4 <Cursor_4+0x2ec>)
 800d548:	681a      	ldr	r2, [r3, #0]
 800d54a:	4b17      	ldr	r3, [pc, #92]	; (800d5a8 <Cursor_4+0x2f0>)
 800d54c:	681b      	ldr	r3, [r3, #0]
 800d54e:	429a      	cmp	r2, r3
 800d550:	d116      	bne.n	800d580 <Cursor_4+0x2c8>
 800d552:	4b16      	ldr	r3, [pc, #88]	; (800d5ac <Cursor_4+0x2f4>)
 800d554:	681a      	ldr	r2, [r3, #0]
 800d556:	4b16      	ldr	r3, [pc, #88]	; (800d5b0 <Cursor_4+0x2f8>)
 800d558:	681b      	ldr	r3, [r3, #0]
 800d55a:	b292      	uxth	r2, r2
 800d55c:	801a      	strh	r2, [r3, #0]
 800d55e:	4b14      	ldr	r3, [pc, #80]	; (800d5b0 <Cursor_4+0x2f8>)
 800d560:	681b      	ldr	r3, [r3, #0]
 800d562:	f503 73ca 	add.w	r3, r3, #404	; 0x194
 800d566:	4a12      	ldr	r2, [pc, #72]	; (800d5b0 <Cursor_4+0x2f8>)
 800d568:	6013      	str	r3, [r2, #0]
 800d56a:	4b10      	ldr	r3, [pc, #64]	; (800d5ac <Cursor_4+0x2f4>)
 800d56c:	681a      	ldr	r2, [r3, #0]
 800d56e:	4b10      	ldr	r3, [pc, #64]	; (800d5b0 <Cursor_4+0x2f8>)
 800d570:	681b      	ldr	r3, [r3, #0]
 800d572:	b292      	uxth	r2, r2
 800d574:	801a      	strh	r2, [r3, #0]
 800d576:	e004      	b.n	800d582 <Cursor_4+0x2ca>
 800d578:	bf00      	nop
 800d57a:	e002      	b.n	800d582 <Cursor_4+0x2ca>
 800d57c:	bf00      	nop
 800d57e:	e000      	b.n	800d582 <Cursor_4+0x2ca>
 800d580:	bf00      	nop
 800d582:	4b0c      	ldr	r3, [pc, #48]	; (800d5b4 <Cursor_4+0x2fc>)
 800d584:	681b      	ldr	r3, [r3, #0]
 800d586:	3301      	adds	r3, #1
 800d588:	4a0a      	ldr	r2, [pc, #40]	; (800d5b4 <Cursor_4+0x2fc>)
 800d58a:	6013      	str	r3, [r2, #0]
 800d58c:	4b09      	ldr	r3, [pc, #36]	; (800d5b4 <Cursor_4+0x2fc>)
 800d58e:	681b      	ldr	r3, [r3, #0]
 800d590:	2b0a      	cmp	r3, #10
 800d592:	d000      	beq.n	800d596 <Cursor_4+0x2de>
 800d594:	e697      	b.n	800d2c6 <Cursor_4+0xe>
 800d596:	bf00      	nop
 800d598:	370c      	adds	r7, #12
 800d59a:	46bd      	mov	sp, r7
 800d59c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5a0:	4770      	bx	lr
 800d5a2:	bf00      	nop
 800d5a4:	20000a40 	.word	0x20000a40
 800d5a8:	20000c00 	.word	0x20000c00
 800d5ac:	20000bf0 	.word	0x20000bf0
 800d5b0:	20000bf4 	.word	0x20000bf4
 800d5b4:	20000a48 	.word	0x20000a48

0800d5b8 <Send_LCD>:
 800d5b8:	b580      	push	{r7, lr}
 800d5ba:	b082      	sub	sp, #8
 800d5bc:	af00      	add	r7, sp, #0
 800d5be:	6078      	str	r0, [r7, #4]
 800d5c0:	4a12      	ldr	r2, [pc, #72]	; (800d60c <Send_LCD+0x54>)
 800d5c2:	4b13      	ldr	r3, [pc, #76]	; (800d610 <Send_LCD+0x58>)
 800d5c4:	601a      	str	r2, [r3, #0]
 800d5c6:	4b13      	ldr	r3, [pc, #76]	; (800d614 <Send_LCD+0x5c>)
 800d5c8:	681b      	ldr	r3, [r3, #0]
 800d5ca:	b21b      	sxth	r3, r3
 800d5cc:	2113      	movs	r1, #19
 800d5ce:	4618      	mov	r0, r3
 800d5d0:	f004 fec4 	bl	801235c <LCD_Set_Posi>
 800d5d4:	4b10      	ldr	r3, [pc, #64]	; (800d618 <Send_LCD+0x60>)
 800d5d6:	22cb      	movs	r2, #203	; 0xcb
 800d5d8:	601a      	str	r2, [r3, #0]
 800d5da:	4b0d      	ldr	r3, [pc, #52]	; (800d610 <Send_LCD+0x58>)
 800d5dc:	681b      	ldr	r3, [r3, #0]
 800d5de:	881b      	ldrh	r3, [r3, #0]
 800d5e0:	4618      	mov	r0, r3
 800d5e2:	f004 ff09 	bl	80123f8 <LCD_Set_Pixel>
 800d5e6:	4b0a      	ldr	r3, [pc, #40]	; (800d610 <Send_LCD+0x58>)
 800d5e8:	681b      	ldr	r3, [r3, #0]
 800d5ea:	3302      	adds	r3, #2
 800d5ec:	4a08      	ldr	r2, [pc, #32]	; (800d610 <Send_LCD+0x58>)
 800d5ee:	6013      	str	r3, [r2, #0]
 800d5f0:	4b09      	ldr	r3, [pc, #36]	; (800d618 <Send_LCD+0x60>)
 800d5f2:	681b      	ldr	r3, [r3, #0]
 800d5f4:	3b01      	subs	r3, #1
 800d5f6:	4a08      	ldr	r2, [pc, #32]	; (800d618 <Send_LCD+0x60>)
 800d5f8:	6013      	str	r3, [r2, #0]
 800d5fa:	4b07      	ldr	r3, [pc, #28]	; (800d618 <Send_LCD+0x60>)
 800d5fc:	681b      	ldr	r3, [r3, #0]
 800d5fe:	2b00      	cmp	r3, #0
 800d600:	d000      	beq.n	800d604 <Send_LCD+0x4c>
 800d602:	e7ea      	b.n	800d5da <Send_LCD+0x22>
 800d604:	bf00      	nop
 800d606:	3708      	adds	r7, #8
 800d608:	46bd      	mov	sp, r7
 800d60a:	bd80      	pop	{r7, pc}
 800d60c:	20000be8 	.word	0x20000be8
 800d610:	20000a44 	.word	0x20000a44
 800d614:	20000c00 	.word	0x20000c00
 800d618:	20000bf4 	.word	0x20000bf4

0800d61c <Draw_Pop>:
 800d61c:	b480      	push	{r7}
 800d61e:	b083      	sub	sp, #12
 800d620:	af00      	add	r7, sp, #0
 800d622:	6078      	str	r0, [r7, #4]
 800d624:	4b85      	ldr	r3, [pc, #532]	; (800d83c <Draw_Pop+0x220>)
 800d626:	f04f 1201 	mov.w	r2, #65537	; 0x10001
 800d62a:	601a      	str	r2, [r3, #0]
 800d62c:	687b      	ldr	r3, [r7, #4]
 800d62e:	3348      	adds	r3, #72	; 0x48
 800d630:	f9b3 3000 	ldrsh.w	r3, [r3]
 800d634:	461a      	mov	r2, r3
 800d636:	4b82      	ldr	r3, [pc, #520]	; (800d840 <Draw_Pop+0x224>)
 800d638:	601a      	str	r2, [r3, #0]
 800d63a:	687b      	ldr	r3, [r7, #4]
 800d63c:	334a      	adds	r3, #74	; 0x4a
 800d63e:	f9b3 3000 	ldrsh.w	r3, [r3]
 800d642:	461a      	mov	r2, r3
 800d644:	4b7f      	ldr	r3, [pc, #508]	; (800d844 <Draw_Pop+0x228>)
 800d646:	601a      	str	r2, [r3, #0]
 800d648:	4b7f      	ldr	r3, [pc, #508]	; (800d848 <Draw_Pop+0x22c>)
 800d64a:	681b      	ldr	r3, [r3, #0]
 800d64c:	4a7f      	ldr	r2, [pc, #508]	; (800d84c <Draw_Pop+0x230>)
 800d64e:	6013      	str	r3, [r2, #0]
 800d650:	4b7f      	ldr	r3, [pc, #508]	; (800d850 <Draw_Pop+0x234>)
 800d652:	681a      	ldr	r2, [r3, #0]
 800d654:	4b7d      	ldr	r3, [pc, #500]	; (800d84c <Draw_Pop+0x230>)
 800d656:	681b      	ldr	r3, [r3, #0]
 800d658:	429a      	cmp	r2, r3
 800d65a:	d10d      	bne.n	800d678 <Draw_Pop+0x5c>
 800d65c:	4b78      	ldr	r3, [pc, #480]	; (800d840 <Draw_Pop+0x224>)
 800d65e:	681b      	ldr	r3, [r3, #0]
 800d660:	3306      	adds	r3, #6
 800d662:	4a77      	ldr	r2, [pc, #476]	; (800d840 <Draw_Pop+0x224>)
 800d664:	6013      	str	r3, [r2, #0]
 800d666:	4b77      	ldr	r3, [pc, #476]	; (800d844 <Draw_Pop+0x228>)
 800d668:	681b      	ldr	r3, [r3, #0]
 800d66a:	3b0c      	subs	r3, #12
 800d66c:	4a75      	ldr	r2, [pc, #468]	; (800d844 <Draw_Pop+0x228>)
 800d66e:	6013      	str	r3, [r2, #0]
 800d670:	4b72      	ldr	r3, [pc, #456]	; (800d83c <Draw_Pop+0x220>)
 800d672:	f04f 1208 	mov.w	r2, #524296	; 0x80008
 800d676:	601a      	str	r2, [r3, #0]
 800d678:	4b73      	ldr	r3, [pc, #460]	; (800d848 <Draw_Pop+0x22c>)
 800d67a:	681b      	ldr	r3, [r3, #0]
 800d67c:	3301      	adds	r3, #1
 800d67e:	4a73      	ldr	r2, [pc, #460]	; (800d84c <Draw_Pop+0x230>)
 800d680:	6013      	str	r3, [r2, #0]
 800d682:	4b73      	ldr	r3, [pc, #460]	; (800d850 <Draw_Pop+0x234>)
 800d684:	681a      	ldr	r2, [r3, #0]
 800d686:	4b71      	ldr	r3, [pc, #452]	; (800d84c <Draw_Pop+0x230>)
 800d688:	681b      	ldr	r3, [r3, #0]
 800d68a:	429a      	cmp	r2, r3
 800d68c:	d10d      	bne.n	800d6aa <Draw_Pop+0x8e>
 800d68e:	4b6c      	ldr	r3, [pc, #432]	; (800d840 <Draw_Pop+0x224>)
 800d690:	681b      	ldr	r3, [r3, #0]
 800d692:	3304      	adds	r3, #4
 800d694:	4a6a      	ldr	r2, [pc, #424]	; (800d840 <Draw_Pop+0x224>)
 800d696:	6013      	str	r3, [r2, #0]
 800d698:	4b6a      	ldr	r3, [pc, #424]	; (800d844 <Draw_Pop+0x228>)
 800d69a:	681b      	ldr	r3, [r3, #0]
 800d69c:	3b08      	subs	r3, #8
 800d69e:	4a69      	ldr	r2, [pc, #420]	; (800d844 <Draw_Pop+0x228>)
 800d6a0:	6013      	str	r3, [r2, #0]
 800d6a2:	4b66      	ldr	r3, [pc, #408]	; (800d83c <Draw_Pop+0x220>)
 800d6a4:	f04f 1204 	mov.w	r2, #262148	; 0x40004
 800d6a8:	601a      	str	r2, [r3, #0]
 800d6aa:	4b67      	ldr	r3, [pc, #412]	; (800d848 <Draw_Pop+0x22c>)
 800d6ac:	681b      	ldr	r3, [r3, #0]
 800d6ae:	3302      	adds	r3, #2
 800d6b0:	4a66      	ldr	r2, [pc, #408]	; (800d84c <Draw_Pop+0x230>)
 800d6b2:	6013      	str	r3, [r2, #0]
 800d6b4:	4b66      	ldr	r3, [pc, #408]	; (800d850 <Draw_Pop+0x234>)
 800d6b6:	681a      	ldr	r2, [r3, #0]
 800d6b8:	4b64      	ldr	r3, [pc, #400]	; (800d84c <Draw_Pop+0x230>)
 800d6ba:	681b      	ldr	r3, [r3, #0]
 800d6bc:	429a      	cmp	r2, r3
 800d6be:	d10d      	bne.n	800d6dc <Draw_Pop+0xc0>
 800d6c0:	4b5f      	ldr	r3, [pc, #380]	; (800d840 <Draw_Pop+0x224>)
 800d6c2:	681b      	ldr	r3, [r3, #0]
 800d6c4:	3302      	adds	r3, #2
 800d6c6:	4a5e      	ldr	r2, [pc, #376]	; (800d840 <Draw_Pop+0x224>)
 800d6c8:	6013      	str	r3, [r2, #0]
 800d6ca:	4b5e      	ldr	r3, [pc, #376]	; (800d844 <Draw_Pop+0x228>)
 800d6cc:	681b      	ldr	r3, [r3, #0]
 800d6ce:	3b04      	subs	r3, #4
 800d6d0:	4a5c      	ldr	r2, [pc, #368]	; (800d844 <Draw_Pop+0x228>)
 800d6d2:	6013      	str	r3, [r2, #0]
 800d6d4:	4b59      	ldr	r3, [pc, #356]	; (800d83c <Draw_Pop+0x220>)
 800d6d6:	f04f 1202 	mov.w	r2, #131074	; 0x20002
 800d6da:	601a      	str	r2, [r3, #0]
 800d6dc:	4b5d      	ldr	r3, [pc, #372]	; (800d854 <Draw_Pop+0x238>)
 800d6de:	681b      	ldr	r3, [r3, #0]
 800d6e0:	3b03      	subs	r3, #3
 800d6e2:	4a5a      	ldr	r2, [pc, #360]	; (800d84c <Draw_Pop+0x230>)
 800d6e4:	6013      	str	r3, [r2, #0]
 800d6e6:	4b5a      	ldr	r3, [pc, #360]	; (800d850 <Draw_Pop+0x234>)
 800d6e8:	681a      	ldr	r2, [r3, #0]
 800d6ea:	4b58      	ldr	r3, [pc, #352]	; (800d84c <Draw_Pop+0x230>)
 800d6ec:	681b      	ldr	r3, [r3, #0]
 800d6ee:	429a      	cmp	r2, r3
 800d6f0:	d10d      	bne.n	800d70e <Draw_Pop+0xf2>
 800d6f2:	4b53      	ldr	r3, [pc, #332]	; (800d840 <Draw_Pop+0x224>)
 800d6f4:	681b      	ldr	r3, [r3, #0]
 800d6f6:	3302      	adds	r3, #2
 800d6f8:	4a51      	ldr	r2, [pc, #324]	; (800d840 <Draw_Pop+0x224>)
 800d6fa:	6013      	str	r3, [r2, #0]
 800d6fc:	4b51      	ldr	r3, [pc, #324]	; (800d844 <Draw_Pop+0x228>)
 800d6fe:	681b      	ldr	r3, [r3, #0]
 800d700:	3b04      	subs	r3, #4
 800d702:	4a50      	ldr	r2, [pc, #320]	; (800d844 <Draw_Pop+0x228>)
 800d704:	6013      	str	r3, [r2, #0]
 800d706:	4b4d      	ldr	r3, [pc, #308]	; (800d83c <Draw_Pop+0x220>)
 800d708:	f04f 1202 	mov.w	r2, #131074	; 0x20002
 800d70c:	601a      	str	r2, [r3, #0]
 800d70e:	4b51      	ldr	r3, [pc, #324]	; (800d854 <Draw_Pop+0x238>)
 800d710:	681b      	ldr	r3, [r3, #0]
 800d712:	3b02      	subs	r3, #2
 800d714:	4a4d      	ldr	r2, [pc, #308]	; (800d84c <Draw_Pop+0x230>)
 800d716:	6013      	str	r3, [r2, #0]
 800d718:	4b4d      	ldr	r3, [pc, #308]	; (800d850 <Draw_Pop+0x234>)
 800d71a:	681a      	ldr	r2, [r3, #0]
 800d71c:	4b4b      	ldr	r3, [pc, #300]	; (800d84c <Draw_Pop+0x230>)
 800d71e:	681b      	ldr	r3, [r3, #0]
 800d720:	429a      	cmp	r2, r3
 800d722:	d10d      	bne.n	800d740 <Draw_Pop+0x124>
 800d724:	4b46      	ldr	r3, [pc, #280]	; (800d840 <Draw_Pop+0x224>)
 800d726:	681b      	ldr	r3, [r3, #0]
 800d728:	3304      	adds	r3, #4
 800d72a:	4a45      	ldr	r2, [pc, #276]	; (800d840 <Draw_Pop+0x224>)
 800d72c:	6013      	str	r3, [r2, #0]
 800d72e:	4b45      	ldr	r3, [pc, #276]	; (800d844 <Draw_Pop+0x228>)
 800d730:	681b      	ldr	r3, [r3, #0]
 800d732:	3b08      	subs	r3, #8
 800d734:	4a43      	ldr	r2, [pc, #268]	; (800d844 <Draw_Pop+0x228>)
 800d736:	6013      	str	r3, [r2, #0]
 800d738:	4b40      	ldr	r3, [pc, #256]	; (800d83c <Draw_Pop+0x220>)
 800d73a:	f04f 1204 	mov.w	r2, #262148	; 0x40004
 800d73e:	601a      	str	r2, [r3, #0]
 800d740:	4b44      	ldr	r3, [pc, #272]	; (800d854 <Draw_Pop+0x238>)
 800d742:	681b      	ldr	r3, [r3, #0]
 800d744:	3b01      	subs	r3, #1
 800d746:	4a41      	ldr	r2, [pc, #260]	; (800d84c <Draw_Pop+0x230>)
 800d748:	6013      	str	r3, [r2, #0]
 800d74a:	4b41      	ldr	r3, [pc, #260]	; (800d850 <Draw_Pop+0x234>)
 800d74c:	681a      	ldr	r2, [r3, #0]
 800d74e:	4b3f      	ldr	r3, [pc, #252]	; (800d84c <Draw_Pop+0x230>)
 800d750:	681b      	ldr	r3, [r3, #0]
 800d752:	429a      	cmp	r2, r3
 800d754:	d10d      	bne.n	800d772 <Draw_Pop+0x156>
 800d756:	4b3a      	ldr	r3, [pc, #232]	; (800d840 <Draw_Pop+0x224>)
 800d758:	681b      	ldr	r3, [r3, #0]
 800d75a:	3306      	adds	r3, #6
 800d75c:	4a38      	ldr	r2, [pc, #224]	; (800d840 <Draw_Pop+0x224>)
 800d75e:	6013      	str	r3, [r2, #0]
 800d760:	4b38      	ldr	r3, [pc, #224]	; (800d844 <Draw_Pop+0x228>)
 800d762:	681b      	ldr	r3, [r3, #0]
 800d764:	3b0c      	subs	r3, #12
 800d766:	4a37      	ldr	r2, [pc, #220]	; (800d844 <Draw_Pop+0x228>)
 800d768:	6013      	str	r3, [r2, #0]
 800d76a:	4b34      	ldr	r3, [pc, #208]	; (800d83c <Draw_Pop+0x220>)
 800d76c:	f04f 1208 	mov.w	r2, #524296	; 0x80008
 800d770:	601a      	str	r2, [r3, #0]
 800d772:	4b33      	ldr	r3, [pc, #204]	; (800d840 <Draw_Pop+0x224>)
 800d774:	681b      	ldr	r3, [r3, #0]
 800d776:	085b      	lsrs	r3, r3, #1
 800d778:	f1c3 03cc 	rsb	r3, r3, #204	; 0xcc
 800d77c:	005b      	lsls	r3, r3, #1
 800d77e:	4a36      	ldr	r2, [pc, #216]	; (800d858 <Draw_Pop+0x23c>)
 800d780:	4413      	add	r3, r2
 800d782:	4a36      	ldr	r2, [pc, #216]	; (800d85c <Draw_Pop+0x240>)
 800d784:	6013      	str	r3, [r2, #0]
 800d786:	687b      	ldr	r3, [r7, #4]
 800d788:	334e      	adds	r3, #78	; 0x4e
 800d78a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800d78e:	461a      	mov	r2, r3
 800d790:	4b33      	ldr	r3, [pc, #204]	; (800d860 <Draw_Pop+0x244>)
 800d792:	601a      	str	r2, [r3, #0]
 800d794:	687b      	ldr	r3, [r7, #4]
 800d796:	3350      	adds	r3, #80	; 0x50
 800d798:	f9b3 3000 	ldrsh.w	r3, [r3]
 800d79c:	461a      	mov	r2, r3
 800d79e:	4b31      	ldr	r3, [pc, #196]	; (800d864 <Draw_Pop+0x248>)
 800d7a0:	601a      	str	r2, [r3, #0]
 800d7a2:	4b31      	ldr	r3, [pc, #196]	; (800d868 <Draw_Pop+0x24c>)
 800d7a4:	681b      	ldr	r3, [r3, #0]
 800d7a6:	881b      	ldrh	r3, [r3, #0]
 800d7a8:	461a      	mov	r2, r3
 800d7aa:	4b28      	ldr	r3, [pc, #160]	; (800d84c <Draw_Pop+0x230>)
 800d7ac:	601a      	str	r2, [r3, #0]
 800d7ae:	4b2e      	ldr	r3, [pc, #184]	; (800d868 <Draw_Pop+0x24c>)
 800d7b0:	681b      	ldr	r3, [r3, #0]
 800d7b2:	3302      	adds	r3, #2
 800d7b4:	4a2c      	ldr	r2, [pc, #176]	; (800d868 <Draw_Pop+0x24c>)
 800d7b6:	6013      	str	r3, [r2, #0]
 800d7b8:	4b29      	ldr	r3, [pc, #164]	; (800d860 <Draw_Pop+0x244>)
 800d7ba:	681b      	ldr	r3, [r3, #0]
 800d7bc:	2b00      	cmp	r3, #0
 800d7be:	d100      	bne.n	800d7c2 <Draw_Pop+0x1a6>
 800d7c0:	e054      	b.n	800d86c <Draw_Pop+0x250>
 800d7c2:	bf00      	nop
 800d7c4:	4b21      	ldr	r3, [pc, #132]	; (800d84c <Draw_Pop+0x230>)
 800d7c6:	681a      	ldr	r2, [r3, #0]
 800d7c8:	4b1c      	ldr	r3, [pc, #112]	; (800d83c <Draw_Pop+0x220>)
 800d7ca:	681b      	ldr	r3, [r3, #0]
 800d7cc:	4013      	ands	r3, r2
 800d7ce:	2b00      	cmp	r3, #0
 800d7d0:	d006      	beq.n	800d7e0 <Draw_Pop+0x1c4>
 800d7d2:	4b22      	ldr	r3, [pc, #136]	; (800d85c <Draw_Pop+0x240>)
 800d7d4:	681b      	ldr	r3, [r3, #0]
 800d7d6:	781b      	ldrb	r3, [r3, #0]
 800d7d8:	461a      	mov	r2, r3
 800d7da:	4b22      	ldr	r3, [pc, #136]	; (800d864 <Draw_Pop+0x248>)
 800d7dc:	601a      	str	r2, [r3, #0]
 800d7de:	e005      	b.n	800d7ec <Draw_Pop+0x1d0>
 800d7e0:	4b1e      	ldr	r3, [pc, #120]	; (800d85c <Draw_Pop+0x240>)
 800d7e2:	681b      	ldr	r3, [r3, #0]
 800d7e4:	781b      	ldrb	r3, [r3, #0]
 800d7e6:	461a      	mov	r2, r3
 800d7e8:	4b1d      	ldr	r3, [pc, #116]	; (800d860 <Draw_Pop+0x244>)
 800d7ea:	601a      	str	r2, [r3, #0]
 800d7ec:	4b1b      	ldr	r3, [pc, #108]	; (800d85c <Draw_Pop+0x240>)
 800d7ee:	681b      	ldr	r3, [r3, #0]
 800d7f0:	3301      	adds	r3, #1
 800d7f2:	4a1a      	ldr	r2, [pc, #104]	; (800d85c <Draw_Pop+0x240>)
 800d7f4:	6013      	str	r3, [r2, #0]
 800d7f6:	4b13      	ldr	r3, [pc, #76]	; (800d844 <Draw_Pop+0x228>)
 800d7f8:	681b      	ldr	r3, [r3, #0]
 800d7fa:	3b02      	subs	r3, #2
 800d7fc:	4a11      	ldr	r2, [pc, #68]	; (800d844 <Draw_Pop+0x228>)
 800d7fe:	6013      	str	r3, [r2, #0]
 800d800:	4b10      	ldr	r3, [pc, #64]	; (800d844 <Draw_Pop+0x228>)
 800d802:	681b      	ldr	r3, [r3, #0]
 800d804:	2b00      	cmp	r3, #0
 800d806:	d066      	beq.n	800d8d6 <Draw_Pop+0x2ba>
 800d808:	4b0c      	ldr	r3, [pc, #48]	; (800d83c <Draw_Pop+0x220>)
 800d80a:	681b      	ldr	r3, [r3, #0]
 800d80c:	2b00      	cmp	r3, #0
 800d80e:	da0f      	bge.n	800d830 <Draw_Pop+0x214>
 800d810:	4b15      	ldr	r3, [pc, #84]	; (800d868 <Draw_Pop+0x24c>)
 800d812:	681b      	ldr	r3, [r3, #0]
 800d814:	881b      	ldrh	r3, [r3, #0]
 800d816:	461a      	mov	r2, r3
 800d818:	4b0c      	ldr	r3, [pc, #48]	; (800d84c <Draw_Pop+0x230>)
 800d81a:	601a      	str	r2, [r3, #0]
 800d81c:	4b12      	ldr	r3, [pc, #72]	; (800d868 <Draw_Pop+0x24c>)
 800d81e:	681b      	ldr	r3, [r3, #0]
 800d820:	3302      	adds	r3, #2
 800d822:	4a11      	ldr	r2, [pc, #68]	; (800d868 <Draw_Pop+0x24c>)
 800d824:	6013      	str	r3, [r2, #0]
 800d826:	4b05      	ldr	r3, [pc, #20]	; (800d83c <Draw_Pop+0x220>)
 800d828:	f04f 1201 	mov.w	r2, #65537	; 0x10001
 800d82c:	601a      	str	r2, [r3, #0]
 800d82e:	e7c9      	b.n	800d7c4 <Draw_Pop+0x1a8>
 800d830:	4b02      	ldr	r3, [pc, #8]	; (800d83c <Draw_Pop+0x220>)
 800d832:	681b      	ldr	r3, [r3, #0]
 800d834:	005b      	lsls	r3, r3, #1
 800d836:	4a01      	ldr	r2, [pc, #4]	; (800d83c <Draw_Pop+0x220>)
 800d838:	6013      	str	r3, [r2, #0]
 800d83a:	e7c3      	b.n	800d7c4 <Draw_Pop+0x1a8>
 800d83c:	20000c08 	.word	0x20000c08
 800d840:	20000a44 	.word	0x20000a44
 800d844:	20000bf0 	.word	0x20000bf0
 800d848:	20000bec 	.word	0x20000bec
 800d84c:	20000a48 	.word	0x20000a48
 800d850:	20000c00 	.word	0x20000c00
 800d854:	20000bfc 	.word	0x20000bfc
 800d858:	20000a50 	.word	0x20000a50
 800d85c:	20000bf4 	.word	0x20000bf4
 800d860:	20000a40 	.word	0x20000a40
 800d864:	20000c04 	.word	0x20000c04
 800d868:	20000c0c 	.word	0x20000c0c
 800d86c:	4b1e      	ldr	r3, [pc, #120]	; (800d8e8 <Draw_Pop+0x2cc>)
 800d86e:	681a      	ldr	r2, [r3, #0]
 800d870:	4b1e      	ldr	r3, [pc, #120]	; (800d8ec <Draw_Pop+0x2d0>)
 800d872:	681b      	ldr	r3, [r3, #0]
 800d874:	4013      	ands	r3, r2
 800d876:	2b00      	cmp	r3, #0
 800d878:	d005      	beq.n	800d886 <Draw_Pop+0x26a>
 800d87a:	4b1d      	ldr	r3, [pc, #116]	; (800d8f0 <Draw_Pop+0x2d4>)
 800d87c:	681b      	ldr	r3, [r3, #0]
 800d87e:	781b      	ldrb	r3, [r3, #0]
 800d880:	461a      	mov	r2, r3
 800d882:	4b1c      	ldr	r3, [pc, #112]	; (800d8f4 <Draw_Pop+0x2d8>)
 800d884:	601a      	str	r2, [r3, #0]
 800d886:	4b1a      	ldr	r3, [pc, #104]	; (800d8f0 <Draw_Pop+0x2d4>)
 800d888:	681b      	ldr	r3, [r3, #0]
 800d88a:	3301      	adds	r3, #1
 800d88c:	4a18      	ldr	r2, [pc, #96]	; (800d8f0 <Draw_Pop+0x2d4>)
 800d88e:	6013      	str	r3, [r2, #0]
 800d890:	4b19      	ldr	r3, [pc, #100]	; (800d8f8 <Draw_Pop+0x2dc>)
 800d892:	681b      	ldr	r3, [r3, #0]
 800d894:	3b02      	subs	r3, #2
 800d896:	4a18      	ldr	r2, [pc, #96]	; (800d8f8 <Draw_Pop+0x2dc>)
 800d898:	6013      	str	r3, [r2, #0]
 800d89a:	4b17      	ldr	r3, [pc, #92]	; (800d8f8 <Draw_Pop+0x2dc>)
 800d89c:	681b      	ldr	r3, [r3, #0]
 800d89e:	2b00      	cmp	r3, #0
 800d8a0:	d01b      	beq.n	800d8da <Draw_Pop+0x2be>
 800d8a2:	4b12      	ldr	r3, [pc, #72]	; (800d8ec <Draw_Pop+0x2d0>)
 800d8a4:	681b      	ldr	r3, [r3, #0]
 800d8a6:	2b00      	cmp	r3, #0
 800d8a8:	da0f      	bge.n	800d8ca <Draw_Pop+0x2ae>
 800d8aa:	4b14      	ldr	r3, [pc, #80]	; (800d8fc <Draw_Pop+0x2e0>)
 800d8ac:	681b      	ldr	r3, [r3, #0]
 800d8ae:	881b      	ldrh	r3, [r3, #0]
 800d8b0:	461a      	mov	r2, r3
 800d8b2:	4b13      	ldr	r3, [pc, #76]	; (800d900 <Draw_Pop+0x2e4>)
 800d8b4:	601a      	str	r2, [r3, #0]
 800d8b6:	4b11      	ldr	r3, [pc, #68]	; (800d8fc <Draw_Pop+0x2e0>)
 800d8b8:	681b      	ldr	r3, [r3, #0]
 800d8ba:	3302      	adds	r3, #2
 800d8bc:	4a0f      	ldr	r2, [pc, #60]	; (800d8fc <Draw_Pop+0x2e0>)
 800d8be:	6013      	str	r3, [r2, #0]
 800d8c0:	4b0a      	ldr	r3, [pc, #40]	; (800d8ec <Draw_Pop+0x2d0>)
 800d8c2:	f04f 1201 	mov.w	r2, #65537	; 0x10001
 800d8c6:	601a      	str	r2, [r3, #0]
 800d8c8:	e7d0      	b.n	800d86c <Draw_Pop+0x250>
 800d8ca:	4b08      	ldr	r3, [pc, #32]	; (800d8ec <Draw_Pop+0x2d0>)
 800d8cc:	681b      	ldr	r3, [r3, #0]
 800d8ce:	005b      	lsls	r3, r3, #1
 800d8d0:	4a06      	ldr	r2, [pc, #24]	; (800d8ec <Draw_Pop+0x2d0>)
 800d8d2:	6013      	str	r3, [r2, #0]
 800d8d4:	e7ca      	b.n	800d86c <Draw_Pop+0x250>
 800d8d6:	bf00      	nop
 800d8d8:	e000      	b.n	800d8dc <Draw_Pop+0x2c0>
 800d8da:	bf00      	nop
 800d8dc:	370c      	adds	r7, #12
 800d8de:	46bd      	mov	sp, r7
 800d8e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8e4:	4770      	bx	lr
 800d8e6:	bf00      	nop
 800d8e8:	20000c00 	.word	0x20000c00
 800d8ec:	20000c08 	.word	0x20000c08
 800d8f0:	20000bf4 	.word	0x20000bf4
 800d8f4:	20000c04 	.word	0x20000c04
 800d8f8:	20000bf0 	.word	0x20000bf0
 800d8fc:	20000c0c 	.word	0x20000c0c
 800d900:	20000a48 	.word	0x20000a48

0800d904 <DrawWindow>:
 800d904:	b580      	push	{r7, lr}
 800d906:	b082      	sub	sp, #8
 800d908:	af00      	add	r7, sp, #0
 800d90a:	6078      	str	r0, [r7, #4]
 800d90c:	6039      	str	r1, [r7, #0]
 800d90e:	687b      	ldr	r3, [r7, #4]
 800d910:	4a9b      	ldr	r2, [pc, #620]	; (800db80 <DrawWindow+0x27c>)
 800d912:	6013      	str	r3, [r2, #0]
 800d914:	4b9b      	ldr	r3, [pc, #620]	; (800db84 <DrawWindow+0x280>)
 800d916:	2200      	movs	r2, #0
 800d918:	601a      	str	r2, [r3, #0]
 800d91a:	687b      	ldr	r3, [r7, #4]
 800d91c:	f503 7361 	add.w	r3, r3, #900	; 0x384
 800d920:	4a99      	ldr	r2, [pc, #612]	; (800db88 <DrawWindow+0x284>)
 800d922:	6013      	str	r3, [r2, #0]
 800d924:	683b      	ldr	r3, [r7, #0]
 800d926:	3344      	adds	r3, #68	; 0x44
 800d928:	f9b3 3000 	ldrsh.w	r3, [r3]
 800d92c:	461a      	mov	r2, r3
 800d92e:	4b97      	ldr	r3, [pc, #604]	; (800db8c <DrawWindow+0x288>)
 800d930:	601a      	str	r2, [r3, #0]
 800d932:	683b      	ldr	r3, [r7, #0]
 800d934:	3346      	adds	r3, #70	; 0x46
 800d936:	f9b3 3000 	ldrsh.w	r3, [r3]
 800d93a:	461a      	mov	r2, r3
 800d93c:	4b94      	ldr	r3, [pc, #592]	; (800db90 <DrawWindow+0x28c>)
 800d93e:	601a      	str	r2, [r3, #0]
 800d940:	4b92      	ldr	r3, [pc, #584]	; (800db8c <DrawWindow+0x288>)
 800d942:	681a      	ldr	r2, [r3, #0]
 800d944:	4b92      	ldr	r3, [pc, #584]	; (800db90 <DrawWindow+0x28c>)
 800d946:	681b      	ldr	r3, [r3, #0]
 800d948:	4413      	add	r3, r2
 800d94a:	4a91      	ldr	r2, [pc, #580]	; (800db90 <DrawWindow+0x28c>)
 800d94c:	6013      	str	r3, [r2, #0]
 800d94e:	4b8d      	ldr	r3, [pc, #564]	; (800db84 <DrawWindow+0x280>)
 800d950:	681b      	ldr	r3, [r3, #0]
 800d952:	2b00      	cmp	r3, #0
 800d954:	d102      	bne.n	800d95c <DrawWindow+0x58>
 800d956:	f7ff f93b 	bl	800cbd0 <Buld_0>
 800d95a:	e064      	b.n	800da26 <DrawWindow+0x122>
 800d95c:	4b89      	ldr	r3, [pc, #548]	; (800db84 <DrawWindow+0x280>)
 800d95e:	681b      	ldr	r3, [r3, #0]
 800d960:	f5b3 7f97 	cmp.w	r3, #302	; 0x12e
 800d964:	d102      	bne.n	800d96c <DrawWindow+0x68>
 800d966:	f7ff f933 	bl	800cbd0 <Buld_0>
 800d96a:	e05c      	b.n	800da26 <DrawWindow+0x122>
 800d96c:	4b85      	ldr	r3, [pc, #532]	; (800db84 <DrawWindow+0x280>)
 800d96e:	681b      	ldr	r3, [r3, #0]
 800d970:	2b01      	cmp	r3, #1
 800d972:	d102      	bne.n	800d97a <DrawWindow+0x76>
 800d974:	f7ff f938 	bl	800cbe8 <Buld_1>
 800d978:	e055      	b.n	800da26 <DrawWindow+0x122>
 800d97a:	4b86      	ldr	r3, [pc, #536]	; (800db94 <DrawWindow+0x290>)
 800d97c:	f240 122d 	movw	r2, #301	; 0x12d
 800d980:	601a      	str	r2, [r3, #0]
 800d982:	4b80      	ldr	r3, [pc, #512]	; (800db84 <DrawWindow+0x280>)
 800d984:	681a      	ldr	r2, [r3, #0]
 800d986:	4b83      	ldr	r3, [pc, #524]	; (800db94 <DrawWindow+0x290>)
 800d988:	681b      	ldr	r3, [r3, #0]
 800d98a:	429a      	cmp	r2, r3
 800d98c:	d102      	bne.n	800d994 <DrawWindow+0x90>
 800d98e:	f7ff f92b 	bl	800cbe8 <Buld_1>
 800d992:	e048      	b.n	800da26 <DrawWindow+0x122>
 800d994:	4b7b      	ldr	r3, [pc, #492]	; (800db84 <DrawWindow+0x280>)
 800d996:	681b      	ldr	r3, [r3, #0]
 800d998:	3b01      	subs	r3, #1
 800d99a:	4a7e      	ldr	r2, [pc, #504]	; (800db94 <DrawWindow+0x290>)
 800d99c:	6013      	str	r3, [r2, #0]
 800d99e:	4b7e      	ldr	r3, [pc, #504]	; (800db98 <DrawWindow+0x294>)
 800d9a0:	2219      	movs	r2, #25
 800d9a2:	601a      	str	r2, [r3, #0]
 800d9a4:	4b7b      	ldr	r3, [pc, #492]	; (800db94 <DrawWindow+0x290>)
 800d9a6:	681a      	ldr	r2, [r3, #0]
 800d9a8:	4b7b      	ldr	r3, [pc, #492]	; (800db98 <DrawWindow+0x294>)
 800d9aa:	681b      	ldr	r3, [r3, #0]
 800d9ac:	fbb2 f3f3 	udiv	r3, r2, r3
 800d9b0:	4a7a      	ldr	r2, [pc, #488]	; (800db9c <DrawWindow+0x298>)
 800d9b2:	6013      	str	r3, [r2, #0]
 800d9b4:	4b79      	ldr	r3, [pc, #484]	; (800db9c <DrawWindow+0x298>)
 800d9b6:	681b      	ldr	r3, [r3, #0]
 800d9b8:	4a77      	ldr	r2, [pc, #476]	; (800db98 <DrawWindow+0x294>)
 800d9ba:	6812      	ldr	r2, [r2, #0]
 800d9bc:	fb02 f303 	mul.w	r3, r2, r3
 800d9c0:	4a76      	ldr	r2, [pc, #472]	; (800db9c <DrawWindow+0x298>)
 800d9c2:	6013      	str	r3, [r2, #0]
 800d9c4:	4b73      	ldr	r3, [pc, #460]	; (800db94 <DrawWindow+0x290>)
 800d9c6:	681a      	ldr	r2, [r3, #0]
 800d9c8:	4b74      	ldr	r3, [pc, #464]	; (800db9c <DrawWindow+0x298>)
 800d9ca:	681b      	ldr	r3, [r3, #0]
 800d9cc:	1ad3      	subs	r3, r2, r3
 800d9ce:	4a73      	ldr	r2, [pc, #460]	; (800db9c <DrawWindow+0x298>)
 800d9d0:	6013      	str	r3, [r2, #0]
 800d9d2:	4b72      	ldr	r3, [pc, #456]	; (800db9c <DrawWindow+0x298>)
 800d9d4:	681b      	ldr	r3, [r3, #0]
 800d9d6:	2b00      	cmp	r3, #0
 800d9d8:	d102      	bne.n	800d9e0 <DrawWindow+0xdc>
 800d9da:	f7ff f975 	bl	800ccc8 <Buld_4>
 800d9de:	e022      	b.n	800da26 <DrawWindow+0x122>
 800d9e0:	4b6d      	ldr	r3, [pc, #436]	; (800db98 <DrawWindow+0x294>)
 800d9e2:	2205      	movs	r2, #5
 800d9e4:	601a      	str	r2, [r3, #0]
 800d9e6:	4b6b      	ldr	r3, [pc, #428]	; (800db94 <DrawWindow+0x290>)
 800d9e8:	681a      	ldr	r2, [r3, #0]
 800d9ea:	4b6b      	ldr	r3, [pc, #428]	; (800db98 <DrawWindow+0x294>)
 800d9ec:	681b      	ldr	r3, [r3, #0]
 800d9ee:	fbb2 f3f3 	udiv	r3, r2, r3
 800d9f2:	4a6a      	ldr	r2, [pc, #424]	; (800db9c <DrawWindow+0x298>)
 800d9f4:	6013      	str	r3, [r2, #0]
 800d9f6:	4b69      	ldr	r3, [pc, #420]	; (800db9c <DrawWindow+0x298>)
 800d9f8:	681b      	ldr	r3, [r3, #0]
 800d9fa:	4a67      	ldr	r2, [pc, #412]	; (800db98 <DrawWindow+0x294>)
 800d9fc:	6812      	ldr	r2, [r2, #0]
 800d9fe:	fb02 f303 	mul.w	r3, r2, r3
 800da02:	4a66      	ldr	r2, [pc, #408]	; (800db9c <DrawWindow+0x298>)
 800da04:	6013      	str	r3, [r2, #0]
 800da06:	4b63      	ldr	r3, [pc, #396]	; (800db94 <DrawWindow+0x290>)
 800da08:	681a      	ldr	r2, [r3, #0]
 800da0a:	4b64      	ldr	r3, [pc, #400]	; (800db9c <DrawWindow+0x298>)
 800da0c:	681b      	ldr	r3, [r3, #0]
 800da0e:	1ad3      	subs	r3, r2, r3
 800da10:	4a62      	ldr	r2, [pc, #392]	; (800db9c <DrawWindow+0x298>)
 800da12:	6013      	str	r3, [r2, #0]
 800da14:	4b61      	ldr	r3, [pc, #388]	; (800db9c <DrawWindow+0x298>)
 800da16:	681b      	ldr	r3, [r3, #0]
 800da18:	2b00      	cmp	r3, #0
 800da1a:	d102      	bne.n	800da22 <DrawWindow+0x11e>
 800da1c:	f7ff f92e 	bl	800cc7c <Buld_3>
 800da20:	e001      	b.n	800da26 <DrawWindow+0x122>
 800da22:	f7ff f909 	bl	800cc38 <Buld_2>
 800da26:	4b57      	ldr	r3, [pc, #348]	; (800db84 <DrawWindow+0x280>)
 800da28:	681b      	ldr	r3, [r3, #0]
 800da2a:	2b02      	cmp	r3, #2
 800da2c:	d96c      	bls.n	800db08 <DrawWindow+0x204>
 800da2e:	4b55      	ldr	r3, [pc, #340]	; (800db84 <DrawWindow+0x280>)
 800da30:	681b      	ldr	r3, [r3, #0]
 800da32:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 800da36:	d267      	bcs.n	800db08 <DrawWindow+0x204>
 800da38:	683b      	ldr	r3, [r7, #0]
 800da3a:	3306      	adds	r3, #6
 800da3c:	f9b3 3000 	ldrsh.w	r3, [r3]
 800da40:	461a      	mov	r2, r3
 800da42:	4b54      	ldr	r3, [pc, #336]	; (800db94 <DrawWindow+0x290>)
 800da44:	601a      	str	r2, [r3, #0]
 800da46:	4b53      	ldr	r3, [pc, #332]	; (800db94 <DrawWindow+0x290>)
 800da48:	681b      	ldr	r3, [r3, #0]
 800da4a:	f003 0304 	and.w	r3, r3, #4
 800da4e:	2b00      	cmp	r3, #0
 800da50:	d10f      	bne.n	800da72 <DrawWindow+0x16e>
 800da52:	4b50      	ldr	r3, [pc, #320]	; (800db94 <DrawWindow+0x290>)
 800da54:	222e      	movs	r2, #46	; 0x2e
 800da56:	601a      	str	r2, [r3, #0]
 800da58:	683b      	ldr	r3, [r7, #0]
 800da5a:	331a      	adds	r3, #26
 800da5c:	f9b3 3000 	ldrsh.w	r3, [r3]
 800da60:	461a      	mov	r2, r3
 800da62:	4b4f      	ldr	r3, [pc, #316]	; (800dba0 <DrawWindow+0x29c>)
 800da64:	601a      	str	r2, [r3, #0]
 800da66:	4b4f      	ldr	r3, [pc, #316]	; (800dba4 <DrawWindow+0x2a0>)
 800da68:	2208      	movs	r2, #8
 800da6a:	601a      	str	r2, [r3, #0]
 800da6c:	2001      	movs	r0, #1
 800da6e:	f7ff f951 	bl	800cd14 <Draw_Digit_Analog>
 800da72:	683b      	ldr	r3, [r7, #0]
 800da74:	3304      	adds	r3, #4
 800da76:	f9b3 3000 	ldrsh.w	r3, [r3]
 800da7a:	461a      	mov	r2, r3
 800da7c:	4b45      	ldr	r3, [pc, #276]	; (800db94 <DrawWindow+0x290>)
 800da7e:	601a      	str	r2, [r3, #0]
 800da80:	4b44      	ldr	r3, [pc, #272]	; (800db94 <DrawWindow+0x290>)
 800da82:	681b      	ldr	r3, [r3, #0]
 800da84:	f003 0304 	and.w	r3, r3, #4
 800da88:	2b00      	cmp	r3, #0
 800da8a:	d10f      	bne.n	800daac <DrawWindow+0x1a8>
 800da8c:	4b41      	ldr	r3, [pc, #260]	; (800db94 <DrawWindow+0x290>)
 800da8e:	222c      	movs	r2, #44	; 0x2c
 800da90:	601a      	str	r2, [r3, #0]
 800da92:	683b      	ldr	r3, [r7, #0]
 800da94:	3318      	adds	r3, #24
 800da96:	f9b3 3000 	ldrsh.w	r3, [r3]
 800da9a:	461a      	mov	r2, r3
 800da9c:	4b40      	ldr	r3, [pc, #256]	; (800dba0 <DrawWindow+0x29c>)
 800da9e:	601a      	str	r2, [r3, #0]
 800daa0:	4b40      	ldr	r3, [pc, #256]	; (800dba4 <DrawWindow+0x2a0>)
 800daa2:	2204      	movs	r2, #4
 800daa4:	601a      	str	r2, [r3, #0]
 800daa6:	2001      	movs	r0, #1
 800daa8:	f7ff f934 	bl	800cd14 <Draw_Digit_Analog>
 800daac:	683b      	ldr	r3, [r7, #0]
 800daae:	3302      	adds	r3, #2
 800dab0:	f9b3 3000 	ldrsh.w	r3, [r3]
 800dab4:	461a      	mov	r2, r3
 800dab6:	4b37      	ldr	r3, [pc, #220]	; (800db94 <DrawWindow+0x290>)
 800dab8:	601a      	str	r2, [r3, #0]
 800daba:	4b36      	ldr	r3, [pc, #216]	; (800db94 <DrawWindow+0x290>)
 800dabc:	681b      	ldr	r3, [r3, #0]
 800dabe:	f003 0304 	and.w	r3, r3, #4
 800dac2:	2b00      	cmp	r3, #0
 800dac4:	d10a      	bne.n	800dadc <DrawWindow+0x1d8>
 800dac6:	4b33      	ldr	r3, [pc, #204]	; (800db94 <DrawWindow+0x290>)
 800dac8:	222a      	movs	r2, #42	; 0x2a
 800daca:	601a      	str	r2, [r3, #0]
 800dacc:	687b      	ldr	r3, [r7, #4]
 800dace:	f503 7396 	add.w	r3, r3, #300	; 0x12c
 800dad2:	4a33      	ldr	r2, [pc, #204]	; (800dba0 <DrawWindow+0x29c>)
 800dad4:	6013      	str	r3, [r2, #0]
 800dad6:	2000      	movs	r0, #0
 800dad8:	f7ff f91c 	bl	800cd14 <Draw_Digit_Analog>
 800dadc:	683b      	ldr	r3, [r7, #0]
 800dade:	f9b3 3000 	ldrsh.w	r3, [r3]
 800dae2:	461a      	mov	r2, r3
 800dae4:	4b2b      	ldr	r3, [pc, #172]	; (800db94 <DrawWindow+0x290>)
 800dae6:	601a      	str	r2, [r3, #0]
 800dae8:	4b2a      	ldr	r3, [pc, #168]	; (800db94 <DrawWindow+0x290>)
 800daea:	681b      	ldr	r3, [r3, #0]
 800daec:	f003 0304 	and.w	r3, r3, #4
 800daf0:	2b00      	cmp	r3, #0
 800daf2:	d10b      	bne.n	800db0c <DrawWindow+0x208>
 800daf4:	4b27      	ldr	r3, [pc, #156]	; (800db94 <DrawWindow+0x290>)
 800daf6:	2228      	movs	r2, #40	; 0x28
 800daf8:	601a      	str	r2, [r3, #0]
 800dafa:	4a29      	ldr	r2, [pc, #164]	; (800dba0 <DrawWindow+0x29c>)
 800dafc:	687b      	ldr	r3, [r7, #4]
 800dafe:	6013      	str	r3, [r2, #0]
 800db00:	2000      	movs	r0, #0
 800db02:	f7ff f907 	bl	800cd14 <Draw_Digit_Analog>
 800db06:	e002      	b.n	800db0e <DrawWindow+0x20a>
 800db08:	bf00      	nop
 800db0a:	e000      	b.n	800db0e <DrawWindow+0x20a>
 800db0c:	bf00      	nop
 800db0e:	4b1d      	ldr	r3, [pc, #116]	; (800db84 <DrawWindow+0x280>)
 800db10:	681b      	ldr	r3, [r3, #0]
 800db12:	2b00      	cmp	r3, #0
 800db14:	d103      	bne.n	800db1e <DrawWindow+0x21a>
 800db16:	6838      	ldr	r0, [r7, #0]
 800db18:	f7ff fa14 	bl	800cf44 <Cursor_0>
 800db1c:	e047      	b.n	800dbae <DrawWindow+0x2aa>
 800db1e:	4b19      	ldr	r3, [pc, #100]	; (800db84 <DrawWindow+0x280>)
 800db20:	681b      	ldr	r3, [r3, #0]
 800db22:	f5b3 7f97 	cmp.w	r3, #302	; 0x12e
 800db26:	d103      	bne.n	800db30 <DrawWindow+0x22c>
 800db28:	6838      	ldr	r0, [r7, #0]
 800db2a:	f7ff fa0b 	bl	800cf44 <Cursor_0>
 800db2e:	e03e      	b.n	800dbae <DrawWindow+0x2aa>
 800db30:	4b14      	ldr	r3, [pc, #80]	; (800db84 <DrawWindow+0x280>)
 800db32:	681b      	ldr	r3, [r3, #0]
 800db34:	2b01      	cmp	r3, #1
 800db36:	d103      	bne.n	800db40 <DrawWindow+0x23c>
 800db38:	6838      	ldr	r0, [r7, #0]
 800db3a:	f7ff fa8d 	bl	800d058 <Cursor_1>
 800db3e:	e036      	b.n	800dbae <DrawWindow+0x2aa>
 800db40:	4b16      	ldr	r3, [pc, #88]	; (800db9c <DrawWindow+0x298>)
 800db42:	f240 122d 	movw	r2, #301	; 0x12d
 800db46:	601a      	str	r2, [r3, #0]
 800db48:	4b0e      	ldr	r3, [pc, #56]	; (800db84 <DrawWindow+0x280>)
 800db4a:	681a      	ldr	r2, [r3, #0]
 800db4c:	4b13      	ldr	r3, [pc, #76]	; (800db9c <DrawWindow+0x298>)
 800db4e:	681b      	ldr	r3, [r3, #0]
 800db50:	429a      	cmp	r2, r3
 800db52:	d103      	bne.n	800db5c <DrawWindow+0x258>
 800db54:	6838      	ldr	r0, [r7, #0]
 800db56:	f7ff fa7f 	bl	800d058 <Cursor_1>
 800db5a:	e028      	b.n	800dbae <DrawWindow+0x2aa>
 800db5c:	4b09      	ldr	r3, [pc, #36]	; (800db84 <DrawWindow+0x280>)
 800db5e:	681b      	ldr	r3, [r3, #0]
 800db60:	2b02      	cmp	r3, #2
 800db62:	d103      	bne.n	800db6c <DrawWindow+0x268>
 800db64:	6838      	ldr	r0, [r7, #0]
 800db66:	f7ff faeb 	bl	800d140 <Cursor_2>
 800db6a:	e020      	b.n	800dbae <DrawWindow+0x2aa>
 800db6c:	4b05      	ldr	r3, [pc, #20]	; (800db84 <DrawWindow+0x280>)
 800db6e:	681b      	ldr	r3, [r3, #0]
 800db70:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 800db74:	d118      	bne.n	800dba8 <DrawWindow+0x2a4>
 800db76:	6838      	ldr	r0, [r7, #0]
 800db78:	f7ff fae2 	bl	800d140 <Cursor_2>
 800db7c:	e017      	b.n	800dbae <DrawWindow+0x2aa>
 800db7e:	bf00      	nop
 800db80:	20000a4c 	.word	0x20000a4c
 800db84:	20000c00 	.word	0x20000c00
 800db88:	20000c0c 	.word	0x20000c0c
 800db8c:	20000bec 	.word	0x20000bec
 800db90:	20000bfc 	.word	0x20000bfc
 800db94:	20000a48 	.word	0x20000a48
 800db98:	20000bf0 	.word	0x20000bf0
 800db9c:	20000a44 	.word	0x20000a44
 800dba0:	20000bf4 	.word	0x20000bf4
 800dba4:	20000a40 	.word	0x20000a40
 800dba8:	6838      	ldr	r0, [r7, #0]
 800dbaa:	f7ff fb1d 	bl	800d1e8 <Cursor_3>
 800dbae:	6838      	ldr	r0, [r7, #0]
 800dbb0:	f7ff fb82 	bl	800d2b8 <Cursor_4>
 800dbb4:	683b      	ldr	r3, [r7, #0]
 800dbb6:	334c      	adds	r3, #76	; 0x4c
 800dbb8:	f9b3 3000 	ldrsh.w	r3, [r3]
 800dbbc:	461a      	mov	r2, r3
 800dbbe:	4b17      	ldr	r3, [pc, #92]	; (800dc1c <DrawWindow+0x318>)
 800dbc0:	601a      	str	r2, [r3, #0]
 800dbc2:	4b16      	ldr	r3, [pc, #88]	; (800dc1c <DrawWindow+0x318>)
 800dbc4:	681b      	ldr	r3, [r3, #0]
 800dbc6:	f003 0301 	and.w	r3, r3, #1
 800dbca:	2b00      	cmp	r3, #0
 800dbcc:	d00f      	beq.n	800dbee <DrawWindow+0x2ea>
 800dbce:	4b14      	ldr	r3, [pc, #80]	; (800dc20 <DrawWindow+0x31c>)
 800dbd0:	681a      	ldr	r2, [r3, #0]
 800dbd2:	4b14      	ldr	r3, [pc, #80]	; (800dc24 <DrawWindow+0x320>)
 800dbd4:	681b      	ldr	r3, [r3, #0]
 800dbd6:	429a      	cmp	r2, r3
 800dbd8:	d30b      	bcc.n	800dbf2 <DrawWindow+0x2ee>
 800dbda:	4b11      	ldr	r3, [pc, #68]	; (800dc20 <DrawWindow+0x31c>)
 800dbdc:	681a      	ldr	r2, [r3, #0]
 800dbde:	4b12      	ldr	r3, [pc, #72]	; (800dc28 <DrawWindow+0x324>)
 800dbe0:	681b      	ldr	r3, [r3, #0]
 800dbe2:	429a      	cmp	r2, r3
 800dbe4:	d207      	bcs.n	800dbf6 <DrawWindow+0x2f2>
 800dbe6:	6838      	ldr	r0, [r7, #0]
 800dbe8:	f7ff fd18 	bl	800d61c <Draw_Pop>
 800dbec:	e004      	b.n	800dbf8 <DrawWindow+0x2f4>
 800dbee:	bf00      	nop
 800dbf0:	e002      	b.n	800dbf8 <DrawWindow+0x2f4>
 800dbf2:	bf00      	nop
 800dbf4:	e000      	b.n	800dbf8 <DrawWindow+0x2f4>
 800dbf6:	bf00      	nop
 800dbf8:	6838      	ldr	r0, [r7, #0]
 800dbfa:	f7ff fcdd 	bl	800d5b8 <Send_LCD>
 800dbfe:	4b08      	ldr	r3, [pc, #32]	; (800dc20 <DrawWindow+0x31c>)
 800dc00:	681b      	ldr	r3, [r3, #0]
 800dc02:	f5b3 7f97 	cmp.w	r3, #302	; 0x12e
 800dc06:	d005      	beq.n	800dc14 <DrawWindow+0x310>
 800dc08:	4b05      	ldr	r3, [pc, #20]	; (800dc20 <DrawWindow+0x31c>)
 800dc0a:	681b      	ldr	r3, [r3, #0]
 800dc0c:	3301      	adds	r3, #1
 800dc0e:	4a04      	ldr	r2, [pc, #16]	; (800dc20 <DrawWindow+0x31c>)
 800dc10:	6013      	str	r3, [r2, #0]
 800dc12:	e69c      	b.n	800d94e <DrawWindow+0x4a>
 800dc14:	bf00      	nop
 800dc16:	3708      	adds	r7, #8
 800dc18:	46bd      	mov	sp, r7
 800dc1a:	bd80      	pop	{r7, pc}
 800dc1c:	20000a48 	.word	0x20000a48
 800dc20:	20000c00 	.word	0x20000c00
 800dc24:	20000bec 	.word	0x20000bec
 800dc28:	20000bfc 	.word	0x20000bfc

0800dc2c <DispChar8x14>:
 800dc2c:	b580      	push	{r7, lr}
 800dc2e:	b084      	sub	sp, #16
 800dc30:	af00      	add	r7, sp, #0
 800dc32:	4603      	mov	r3, r0
 800dc34:	460a      	mov	r2, r1
 800dc36:	71fb      	strb	r3, [r7, #7]
 800dc38:	4613      	mov	r3, r2
 800dc3a:	71bb      	strb	r3, [r7, #6]
 800dc3c:	2300      	movs	r3, #0
 800dc3e:	81fb      	strh	r3, [r7, #14]
 800dc40:	e06d      	b.n	800dd1e <DispChar8x14+0xf2>
 800dc42:	79fb      	ldrb	r3, [r7, #7]
 800dc44:	f003 0310 	and.w	r3, r3, #16
 800dc48:	2b00      	cmp	r3, #0
 800dc4a:	d00a      	beq.n	800dc62 <DispChar8x14+0x36>
 800dc4c:	79bb      	ldrb	r3, [r7, #6]
 800dc4e:	3b40      	subs	r3, #64	; 0x40
 800dc50:	00da      	lsls	r2, r3, #3
 800dc52:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800dc56:	4413      	add	r3, r2
 800dc58:	4a35      	ldr	r2, [pc, #212]	; (800dd30 <DispChar8x14+0x104>)
 800dc5a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800dc5e:	817b      	strh	r3, [r7, #10]
 800dc60:	e005      	b.n	800dc6e <DispChar8x14+0x42>
 800dc62:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800dc66:	4a33      	ldr	r2, [pc, #204]	; (800dd34 <DispChar8x14+0x108>)
 800dc68:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800dc6c:	817b      	strh	r3, [r7, #10]
 800dc6e:	79fb      	ldrb	r3, [r7, #7]
 800dc70:	f003 0320 	and.w	r3, r3, #32
 800dc74:	2b00      	cmp	r3, #0
 800dc76:	d00c      	beq.n	800dc92 <DispChar8x14+0x66>
 800dc78:	89fb      	ldrh	r3, [r7, #14]
 800dc7a:	f003 0301 	and.w	r3, r3, #1
 800dc7e:	b29b      	uxth	r3, r3
 800dc80:	2b00      	cmp	r3, #0
 800dc82:	d001      	beq.n	800dc88 <DispChar8x14+0x5c>
 800dc84:	4a2c      	ldr	r2, [pc, #176]	; (800dd38 <DispChar8x14+0x10c>)
 800dc86:	e001      	b.n	800dc8c <DispChar8x14+0x60>
 800dc88:	f245 5255 	movw	r2, #21845	; 0x5555
 800dc8c:	897b      	ldrh	r3, [r7, #10]
 800dc8e:	4013      	ands	r3, r2
 800dc90:	817b      	strh	r3, [r7, #10]
 800dc92:	4b2a      	ldr	r3, [pc, #168]	; (800dd3c <DispChar8x14+0x110>)
 800dc94:	f9b3 3000 	ldrsh.w	r3, [r3]
 800dc98:	4a29      	ldr	r2, [pc, #164]	; (800dd40 <DispChar8x14+0x114>)
 800dc9a:	f9b2 2000 	ldrsh.w	r2, [r2]
 800dc9e:	4611      	mov	r1, r2
 800dca0:	4618      	mov	r0, r3
 800dca2:	f004 fb5b 	bl	801235c <LCD_Set_Posi>
 800dca6:	2300      	movs	r3, #0
 800dca8:	81bb      	strh	r3, [r7, #12]
 800dcaa:	e027      	b.n	800dcfc <DispChar8x14+0xd0>
 800dcac:	897b      	ldrh	r3, [r7, #10]
 800dcae:	f003 0304 	and.w	r3, r3, #4
 800dcb2:	2b00      	cmp	r3, #0
 800dcb4:	d00d      	beq.n	800dcd2 <DispChar8x14+0xa6>
 800dcb6:	79fb      	ldrb	r3, [r7, #7]
 800dcb8:	f003 0301 	and.w	r3, r3, #1
 800dcbc:	2b00      	cmp	r3, #0
 800dcbe:	d002      	beq.n	800dcc6 <DispChar8x14+0x9a>
 800dcc0:	4b20      	ldr	r3, [pc, #128]	; (800dd44 <DispChar8x14+0x118>)
 800dcc2:	881b      	ldrh	r3, [r3, #0]
 800dcc4:	e001      	b.n	800dcca <DispChar8x14+0x9e>
 800dcc6:	4b20      	ldr	r3, [pc, #128]	; (800dd48 <DispChar8x14+0x11c>)
 800dcc8:	881b      	ldrh	r3, [r3, #0]
 800dcca:	4618      	mov	r0, r3
 800dccc:	f004 fb94 	bl	80123f8 <LCD_Set_Pixel>
 800dcd0:	e00c      	b.n	800dcec <DispChar8x14+0xc0>
 800dcd2:	79fb      	ldrb	r3, [r7, #7]
 800dcd4:	f003 0301 	and.w	r3, r3, #1
 800dcd8:	2b00      	cmp	r3, #0
 800dcda:	d002      	beq.n	800dce2 <DispChar8x14+0xb6>
 800dcdc:	4b1a      	ldr	r3, [pc, #104]	; (800dd48 <DispChar8x14+0x11c>)
 800dcde:	881b      	ldrh	r3, [r3, #0]
 800dce0:	e001      	b.n	800dce6 <DispChar8x14+0xba>
 800dce2:	4b18      	ldr	r3, [pc, #96]	; (800dd44 <DispChar8x14+0x118>)
 800dce4:	881b      	ldrh	r3, [r3, #0]
 800dce6:	4618      	mov	r0, r3
 800dce8:	f004 fb86 	bl	80123f8 <LCD_Set_Pixel>
 800dcec:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800dcf0:	105b      	asrs	r3, r3, #1
 800dcf2:	817b      	strh	r3, [r7, #10]
 800dcf4:	89bb      	ldrh	r3, [r7, #12]
 800dcf6:	3301      	adds	r3, #1
 800dcf8:	b29b      	uxth	r3, r3
 800dcfa:	81bb      	strh	r3, [r7, #12]
 800dcfc:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800dd00:	2b0d      	cmp	r3, #13
 800dd02:	ddd3      	ble.n	800dcac <DispChar8x14+0x80>
 800dd04:	4b0d      	ldr	r3, [pc, #52]	; (800dd3c <DispChar8x14+0x110>)
 800dd06:	f9b3 3000 	ldrsh.w	r3, [r3]
 800dd0a:	b29b      	uxth	r3, r3
 800dd0c:	3301      	adds	r3, #1
 800dd0e:	b29b      	uxth	r3, r3
 800dd10:	b21a      	sxth	r2, r3
 800dd12:	4b0a      	ldr	r3, [pc, #40]	; (800dd3c <DispChar8x14+0x110>)
 800dd14:	801a      	strh	r2, [r3, #0]
 800dd16:	89fb      	ldrh	r3, [r7, #14]
 800dd18:	3301      	adds	r3, #1
 800dd1a:	b29b      	uxth	r3, r3
 800dd1c:	81fb      	strh	r3, [r7, #14]
 800dd1e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800dd22:	2b07      	cmp	r3, #7
 800dd24:	dd8d      	ble.n	800dc42 <DispChar8x14+0x16>
 800dd26:	bf00      	nop
 800dd28:	bf00      	nop
 800dd2a:	3710      	adds	r7, #16
 800dd2c:	46bd      	mov	sp, r7
 800dd2e:	bd80      	pop	{r7, pc}
 800dd30:	08001290 	.word	0x08001290
 800dd34:	08000c90 	.word	0x08000c90
 800dd38:	ffffaaaa 	.word	0xffffaaaa
 800dd3c:	20000792 	.word	0x20000792
 800dd40:	20000794 	.word	0x20000794
 800dd44:	200015d6 	.word	0x200015d6
 800dd48:	200015d4 	.word	0x200015d4

0800dd4c <DispStr8x14>:
 800dd4c:	b580      	push	{r7, lr}
 800dd4e:	b086      	sub	sp, #24
 800dd50:	af00      	add	r7, sp, #0
 800dd52:	607b      	str	r3, [r7, #4]
 800dd54:	4603      	mov	r3, r0
 800dd56:	81fb      	strh	r3, [r7, #14]
 800dd58:	460b      	mov	r3, r1
 800dd5a:	81bb      	strh	r3, [r7, #12]
 800dd5c:	4613      	mov	r3, r2
 800dd5e:	72fb      	strb	r3, [r7, #11]
 800dd60:	4a22      	ldr	r2, [pc, #136]	; (800ddec <DispStr8x14+0xa0>)
 800dd62:	89fb      	ldrh	r3, [r7, #14]
 800dd64:	8013      	strh	r3, [r2, #0]
 800dd66:	4a22      	ldr	r2, [pc, #136]	; (800ddf0 <DispStr8x14+0xa4>)
 800dd68:	89bb      	ldrh	r3, [r7, #12]
 800dd6a:	8013      	strh	r3, [r2, #0]
 800dd6c:	4b1f      	ldr	r3, [pc, #124]	; (800ddec <DispStr8x14+0xa0>)
 800dd6e:	f9b3 3000 	ldrsh.w	r3, [r3]
 800dd72:	4a1f      	ldr	r2, [pc, #124]	; (800ddf0 <DispStr8x14+0xa4>)
 800dd74:	f9b2 2000 	ldrsh.w	r2, [r2]
 800dd78:	4611      	mov	r1, r2
 800dd7a:	4618      	mov	r0, r3
 800dd7c:	f004 faee 	bl	801235c <LCD_Set_Posi>
 800dd80:	2300      	movs	r3, #0
 800dd82:	82fb      	strh	r3, [r7, #22]
 800dd84:	e012      	b.n	800ddac <DispStr8x14+0x60>
 800dd86:	7afb      	ldrb	r3, [r7, #11]
 800dd88:	f003 0301 	and.w	r3, r3, #1
 800dd8c:	2b00      	cmp	r3, #0
 800dd8e:	d002      	beq.n	800dd96 <DispStr8x14+0x4a>
 800dd90:	4b18      	ldr	r3, [pc, #96]	; (800ddf4 <DispStr8x14+0xa8>)
 800dd92:	881b      	ldrh	r3, [r3, #0]
 800dd94:	e001      	b.n	800dd9a <DispStr8x14+0x4e>
 800dd96:	4b18      	ldr	r3, [pc, #96]	; (800ddf8 <DispStr8x14+0xac>)
 800dd98:	881b      	ldrh	r3, [r3, #0]
 800dd9a:	4618      	mov	r0, r3
 800dd9c:	f004 fb2c 	bl	80123f8 <LCD_Set_Pixel>
 800dda0:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800dda4:	b29b      	uxth	r3, r3
 800dda6:	3301      	adds	r3, #1
 800dda8:	b29b      	uxth	r3, r3
 800ddaa:	82fb      	strh	r3, [r7, #22]
 800ddac:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800ddb0:	2b0d      	cmp	r3, #13
 800ddb2:	dde8      	ble.n	800dd86 <DispStr8x14+0x3a>
 800ddb4:	4b0d      	ldr	r3, [pc, #52]	; (800ddec <DispStr8x14+0xa0>)
 800ddb6:	f9b3 3000 	ldrsh.w	r3, [r3]
 800ddba:	b29b      	uxth	r3, r3
 800ddbc:	3301      	adds	r3, #1
 800ddbe:	b29b      	uxth	r3, r3
 800ddc0:	b21a      	sxth	r2, r3
 800ddc2:	4b0a      	ldr	r3, [pc, #40]	; (800ddec <DispStr8x14+0xa0>)
 800ddc4:	801a      	strh	r2, [r3, #0]
 800ddc6:	e008      	b.n	800ddda <DispStr8x14+0x8e>
 800ddc8:	687b      	ldr	r3, [r7, #4]
 800ddca:	1c5a      	adds	r2, r3, #1
 800ddcc:	607a      	str	r2, [r7, #4]
 800ddce:	781a      	ldrb	r2, [r3, #0]
 800ddd0:	7afb      	ldrb	r3, [r7, #11]
 800ddd2:	4611      	mov	r1, r2
 800ddd4:	4618      	mov	r0, r3
 800ddd6:	f7ff ff29 	bl	800dc2c <DispChar8x14>
 800ddda:	687b      	ldr	r3, [r7, #4]
 800dddc:	781b      	ldrb	r3, [r3, #0]
 800ddde:	2b00      	cmp	r3, #0
 800dde0:	d1f2      	bne.n	800ddc8 <DispStr8x14+0x7c>
 800dde2:	bf00      	nop
 800dde4:	bf00      	nop
 800dde6:	3718      	adds	r7, #24
 800dde8:	46bd      	mov	sp, r7
 800ddea:	bd80      	pop	{r7, pc}
 800ddec:	20000792 	.word	0x20000792
 800ddf0:	20000794 	.word	0x20000794
 800ddf4:	200015d4 	.word	0x200015d4
 800ddf8:	200015d6 	.word	0x200015d6

0800ddfc <SetColor>:
 800ddfc:	b480      	push	{r7}
 800ddfe:	b083      	sub	sp, #12
 800de00:	af00      	add	r7, sp, #0
 800de02:	4603      	mov	r3, r0
 800de04:	460a      	mov	r2, r1
 800de06:	80fb      	strh	r3, [r7, #6]
 800de08:	4613      	mov	r3, r2
 800de0a:	80bb      	strh	r3, [r7, #4]
 800de0c:	4a05      	ldr	r2, [pc, #20]	; (800de24 <SetColor+0x28>)
 800de0e:	88fb      	ldrh	r3, [r7, #6]
 800de10:	8013      	strh	r3, [r2, #0]
 800de12:	4a05      	ldr	r2, [pc, #20]	; (800de28 <SetColor+0x2c>)
 800de14:	88bb      	ldrh	r3, [r7, #4]
 800de16:	8013      	strh	r3, [r2, #0]
 800de18:	bf00      	nop
 800de1a:	370c      	adds	r7, #12
 800de1c:	46bd      	mov	sp, r7
 800de1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de22:	4770      	bx	lr
 800de24:	200015d6 	.word	0x200015d6
 800de28:	200015d4 	.word	0x200015d4

0800de2c <DispStr>:
 800de2c:	b580      	push	{r7, lr}
 800de2e:	b086      	sub	sp, #24
 800de30:	af00      	add	r7, sp, #0
 800de32:	607b      	str	r3, [r7, #4]
 800de34:	4603      	mov	r3, r0
 800de36:	81fb      	strh	r3, [r7, #14]
 800de38:	460b      	mov	r3, r1
 800de3a:	81bb      	strh	r3, [r7, #12]
 800de3c:	4613      	mov	r3, r2
 800de3e:	72fb      	strb	r3, [r7, #11]
 800de40:	4a5e      	ldr	r2, [pc, #376]	; (800dfbc <DispStr+0x190>)
 800de42:	89fb      	ldrh	r3, [r7, #14]
 800de44:	8013      	strh	r3, [r2, #0]
 800de46:	4a5e      	ldr	r2, [pc, #376]	; (800dfc0 <DispStr+0x194>)
 800de48:	89bb      	ldrh	r3, [r7, #12]
 800de4a:	8013      	strh	r3, [r2, #0]
 800de4c:	4b5b      	ldr	r3, [pc, #364]	; (800dfbc <DispStr+0x190>)
 800de4e:	f9b3 3000 	ldrsh.w	r3, [r3]
 800de52:	4a5b      	ldr	r2, [pc, #364]	; (800dfc0 <DispStr+0x194>)
 800de54:	f9b2 2000 	ldrsh.w	r2, [r2]
 800de58:	4611      	mov	r1, r2
 800de5a:	4618      	mov	r0, r3
 800de5c:	f004 fa7e 	bl	801235c <LCD_Set_Posi>
 800de60:	e0a1      	b.n	800dfa6 <DispStr+0x17a>
 800de62:	687b      	ldr	r3, [r7, #4]
 800de64:	1c5a      	adds	r2, r3, #1
 800de66:	607a      	str	r2, [r7, #4]
 800de68:	781b      	ldrb	r3, [r3, #0]
 800de6a:	747b      	strb	r3, [r7, #17]
 800de6c:	2300      	movs	r3, #0
 800de6e:	82fb      	strh	r3, [r7, #22]
 800de70:	e094      	b.n	800df9c <DispStr+0x170>
 800de72:	7afb      	ldrb	r3, [r7, #11]
 800de74:	f003 0310 	and.w	r3, r3, #16
 800de78:	2b00      	cmp	r3, #0
 800de7a:	d10e      	bne.n	800de9a <DispStr+0x6e>
 800de7c:	7c7b      	ldrb	r3, [r7, #17]
 800de7e:	f1a3 0221 	sub.w	r2, r3, #33	; 0x21
 800de82:	4613      	mov	r3, r2
 800de84:	005b      	lsls	r3, r3, #1
 800de86:	4413      	add	r3, r2
 800de88:	005b      	lsls	r3, r3, #1
 800de8a:	461a      	mov	r2, r3
 800de8c:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800de90:	4413      	add	r3, r2
 800de92:	4a4c      	ldr	r2, [pc, #304]	; (800dfc4 <DispStr+0x198>)
 800de94:	5cd3      	ldrb	r3, [r2, r3]
 800de96:	827b      	strh	r3, [r7, #18]
 800de98:	e00d      	b.n	800deb6 <DispStr+0x8a>
 800de9a:	7c7b      	ldrb	r3, [r7, #17]
 800de9c:	f1a3 0221 	sub.w	r2, r3, #33	; 0x21
 800dea0:	4613      	mov	r3, r2
 800dea2:	005b      	lsls	r3, r3, #1
 800dea4:	4413      	add	r3, r2
 800dea6:	005b      	lsls	r3, r3, #1
 800dea8:	461a      	mov	r2, r3
 800deaa:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800deae:	4413      	add	r3, r2
 800deb0:	4a45      	ldr	r2, [pc, #276]	; (800dfc8 <DispStr+0x19c>)
 800deb2:	5cd3      	ldrb	r3, [r2, r3]
 800deb4:	827b      	strh	r3, [r7, #18]
 800deb6:	7afb      	ldrb	r3, [r7, #11]
 800deb8:	f003 0320 	and.w	r3, r3, #32
 800debc:	2b00      	cmp	r3, #0
 800debe:	d00c      	beq.n	800deda <DispStr+0xae>
 800dec0:	8afb      	ldrh	r3, [r7, #22]
 800dec2:	f003 0301 	and.w	r3, r3, #1
 800dec6:	b29b      	uxth	r3, r3
 800dec8:	2b00      	cmp	r3, #0
 800deca:	d001      	beq.n	800ded0 <DispStr+0xa4>
 800decc:	4a3f      	ldr	r2, [pc, #252]	; (800dfcc <DispStr+0x1a0>)
 800dece:	e001      	b.n	800ded4 <DispStr+0xa8>
 800ded0:	f245 5255 	movw	r2, #21845	; 0x5555
 800ded4:	8a7b      	ldrh	r3, [r7, #18]
 800ded6:	4013      	ands	r3, r2
 800ded8:	827b      	strh	r3, [r7, #18]
 800deda:	4b38      	ldr	r3, [pc, #224]	; (800dfbc <DispStr+0x190>)
 800dedc:	f9b3 3000 	ldrsh.w	r3, [r3]
 800dee0:	4a37      	ldr	r2, [pc, #220]	; (800dfc0 <DispStr+0x194>)
 800dee2:	f9b2 2000 	ldrsh.w	r2, [r2]
 800dee6:	4611      	mov	r1, r2
 800dee8:	4618      	mov	r0, r3
 800deea:	f004 fa37 	bl	801235c <LCD_Set_Posi>
 800deee:	7afb      	ldrb	r3, [r7, #11]
 800def0:	f003 0301 	and.w	r3, r3, #1
 800def4:	2b00      	cmp	r3, #0
 800def6:	d002      	beq.n	800defe <DispStr+0xd2>
 800def8:	4b35      	ldr	r3, [pc, #212]	; (800dfd0 <DispStr+0x1a4>)
 800defa:	881b      	ldrh	r3, [r3, #0]
 800defc:	e001      	b.n	800df02 <DispStr+0xd6>
 800defe:	4b35      	ldr	r3, [pc, #212]	; (800dfd4 <DispStr+0x1a8>)
 800df00:	881b      	ldrh	r3, [r3, #0]
 800df02:	4618      	mov	r0, r3
 800df04:	f004 fa78 	bl	80123f8 <LCD_Set_Pixel>
 800df08:	4b2c      	ldr	r3, [pc, #176]	; (800dfbc <DispStr+0x190>)
 800df0a:	f9b3 2000 	ldrsh.w	r2, [r3]
 800df0e:	4b2c      	ldr	r3, [pc, #176]	; (800dfc0 <DispStr+0x194>)
 800df10:	f9b3 3000 	ldrsh.w	r3, [r3]
 800df14:	b29b      	uxth	r3, r3
 800df16:	3301      	adds	r3, #1
 800df18:	b29b      	uxth	r3, r3
 800df1a:	b21b      	sxth	r3, r3
 800df1c:	4619      	mov	r1, r3
 800df1e:	4610      	mov	r0, r2
 800df20:	f004 fa1c 	bl	801235c <LCD_Set_Posi>
 800df24:	2300      	movs	r3, #0
 800df26:	82bb      	strh	r3, [r7, #20]
 800df28:	e027      	b.n	800df7a <DispStr+0x14e>
 800df2a:	8a7b      	ldrh	r3, [r7, #18]
 800df2c:	f003 0301 	and.w	r3, r3, #1
 800df30:	2b00      	cmp	r3, #0
 800df32:	d00d      	beq.n	800df50 <DispStr+0x124>
 800df34:	7afb      	ldrb	r3, [r7, #11]
 800df36:	f003 0301 	and.w	r3, r3, #1
 800df3a:	2b00      	cmp	r3, #0
 800df3c:	d002      	beq.n	800df44 <DispStr+0x118>
 800df3e:	4b25      	ldr	r3, [pc, #148]	; (800dfd4 <DispStr+0x1a8>)
 800df40:	881b      	ldrh	r3, [r3, #0]
 800df42:	e001      	b.n	800df48 <DispStr+0x11c>
 800df44:	4b22      	ldr	r3, [pc, #136]	; (800dfd0 <DispStr+0x1a4>)
 800df46:	881b      	ldrh	r3, [r3, #0]
 800df48:	4618      	mov	r0, r3
 800df4a:	f004 fa55 	bl	80123f8 <LCD_Set_Pixel>
 800df4e:	e00c      	b.n	800df6a <DispStr+0x13e>
 800df50:	7afb      	ldrb	r3, [r7, #11]
 800df52:	f003 0301 	and.w	r3, r3, #1
 800df56:	2b00      	cmp	r3, #0
 800df58:	d002      	beq.n	800df60 <DispStr+0x134>
 800df5a:	4b1d      	ldr	r3, [pc, #116]	; (800dfd0 <DispStr+0x1a4>)
 800df5c:	881b      	ldrh	r3, [r3, #0]
 800df5e:	e001      	b.n	800df64 <DispStr+0x138>
 800df60:	4b1c      	ldr	r3, [pc, #112]	; (800dfd4 <DispStr+0x1a8>)
 800df62:	881b      	ldrh	r3, [r3, #0]
 800df64:	4618      	mov	r0, r3
 800df66:	f004 fa47 	bl	80123f8 <LCD_Set_Pixel>
 800df6a:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800df6e:	105b      	asrs	r3, r3, #1
 800df70:	827b      	strh	r3, [r7, #18]
 800df72:	8abb      	ldrh	r3, [r7, #20]
 800df74:	3301      	adds	r3, #1
 800df76:	b29b      	uxth	r3, r3
 800df78:	82bb      	strh	r3, [r7, #20]
 800df7a:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800df7e:	2b09      	cmp	r3, #9
 800df80:	ddd3      	ble.n	800df2a <DispStr+0xfe>
 800df82:	4b0e      	ldr	r3, [pc, #56]	; (800dfbc <DispStr+0x190>)
 800df84:	f9b3 3000 	ldrsh.w	r3, [r3]
 800df88:	b29b      	uxth	r3, r3
 800df8a:	3301      	adds	r3, #1
 800df8c:	b29b      	uxth	r3, r3
 800df8e:	b21a      	sxth	r2, r3
 800df90:	4b0a      	ldr	r3, [pc, #40]	; (800dfbc <DispStr+0x190>)
 800df92:	801a      	strh	r2, [r3, #0]
 800df94:	8afb      	ldrh	r3, [r7, #22]
 800df96:	3301      	adds	r3, #1
 800df98:	b29b      	uxth	r3, r3
 800df9a:	82fb      	strh	r3, [r7, #22]
 800df9c:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800dfa0:	2b05      	cmp	r3, #5
 800dfa2:	f77f af66 	ble.w	800de72 <DispStr+0x46>
 800dfa6:	687b      	ldr	r3, [r7, #4]
 800dfa8:	781b      	ldrb	r3, [r3, #0]
 800dfaa:	2b00      	cmp	r3, #0
 800dfac:	f47f af59 	bne.w	800de62 <DispStr+0x36>
 800dfb0:	bf00      	nop
 800dfb2:	bf00      	nop
 800dfb4:	3718      	adds	r7, #24
 800dfb6:	46bd      	mov	sp, r7
 800dfb8:	bd80      	pop	{r7, pc}
 800dfba:	bf00      	nop
 800dfbc:	20000792 	.word	0x20000792
 800dfc0:	20000794 	.word	0x20000794
 800dfc4:	080016c4 	.word	0x080016c4
 800dfc8:	08001490 	.word	0x08001490
 800dfcc:	ffffaaaa 	.word	0xffffaaaa
 800dfd0:	200015d4 	.word	0x200015d4
 800dfd4:	200015d6 	.word	0x200015d6

0800dfd8 <Draw_Circle_D>:
 800dfd8:	b590      	push	{r4, r7, lr}
 800dfda:	b085      	sub	sp, #20
 800dfdc:	af00      	add	r7, sp, #0
 800dfde:	4604      	mov	r4, r0
 800dfe0:	4608      	mov	r0, r1
 800dfe2:	4611      	mov	r1, r2
 800dfe4:	461a      	mov	r2, r3
 800dfe6:	4623      	mov	r3, r4
 800dfe8:	71fb      	strb	r3, [r7, #7]
 800dfea:	4603      	mov	r3, r0
 800dfec:	80bb      	strh	r3, [r7, #4]
 800dfee:	460b      	mov	r3, r1
 800dff0:	807b      	strh	r3, [r7, #2]
 800dff2:	4613      	mov	r3, r2
 800dff4:	803b      	strh	r3, [r7, #0]
 800dff6:	8c3b      	ldrh	r3, [r7, #32]
 800dff8:	005b      	lsls	r3, r3, #1
 800dffa:	b29a      	uxth	r2, r3
 800dffc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800dffe:	4413      	add	r3, r2
 800e000:	b29b      	uxth	r3, r3
 800e002:	3305      	adds	r3, #5
 800e004:	b29b      	uxth	r3, r3
 800e006:	84bb      	strh	r3, [r7, #36]	; 0x24
 800e008:	88ba      	ldrh	r2, [r7, #4]
 800e00a:	8c3b      	ldrh	r3, [r7, #32]
 800e00c:	1ad3      	subs	r3, r2, r3
 800e00e:	b29b      	uxth	r3, r3
 800e010:	80bb      	strh	r3, [r7, #4]
 800e012:	88bb      	ldrh	r3, [r7, #4]
 800e014:	817b      	strh	r3, [r7, #10]
 800e016:	887b      	ldrh	r3, [r7, #2]
 800e018:	3302      	adds	r3, #2
 800e01a:	b29b      	uxth	r3, r3
 800e01c:	813b      	strh	r3, [r7, #8]
 800e01e:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 800e022:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800e026:	4611      	mov	r1, r2
 800e028:	4618      	mov	r0, r3
 800e02a:	f004 f997 	bl	801235c <LCD_Set_Posi>
 800e02e:	2300      	movs	r3, #0
 800e030:	81bb      	strh	r3, [r7, #12]
 800e032:	e012      	b.n	800e05a <Draw_Circle_D+0x82>
 800e034:	79fb      	ldrb	r3, [r7, #7]
 800e036:	f003 0301 	and.w	r3, r3, #1
 800e03a:	2b00      	cmp	r3, #0
 800e03c:	d002      	beq.n	800e044 <Draw_Circle_D+0x6c>
 800e03e:	4bad      	ldr	r3, [pc, #692]	; (800e2f4 <Draw_Circle_D+0x31c>)
 800e040:	881b      	ldrh	r3, [r3, #0]
 800e042:	e001      	b.n	800e048 <Draw_Circle_D+0x70>
 800e044:	4bac      	ldr	r3, [pc, #688]	; (800e2f8 <Draw_Circle_D+0x320>)
 800e046:	881b      	ldrh	r3, [r3, #0]
 800e048:	4618      	mov	r0, r3
 800e04a:	f004 f9d5 	bl	80123f8 <LCD_Set_Pixel>
 800e04e:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800e052:	b29b      	uxth	r3, r3
 800e054:	3301      	adds	r3, #1
 800e056:	b29b      	uxth	r3, r3
 800e058:	81bb      	strh	r3, [r7, #12]
 800e05a:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 800e05e:	f9b7 3000 	ldrsh.w	r3, [r7]
 800e062:	3b04      	subs	r3, #4
 800e064:	429a      	cmp	r2, r3
 800e066:	dbe5      	blt.n	800e034 <Draw_Circle_D+0x5c>
 800e068:	88ba      	ldrh	r2, [r7, #4]
 800e06a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e06c:	4413      	add	r3, r2
 800e06e:	b29b      	uxth	r3, r3
 800e070:	817b      	strh	r3, [r7, #10]
 800e072:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 800e076:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800e07a:	4611      	mov	r1, r2
 800e07c:	4618      	mov	r0, r3
 800e07e:	f004 f96d 	bl	801235c <LCD_Set_Posi>
 800e082:	2300      	movs	r3, #0
 800e084:	81bb      	strh	r3, [r7, #12]
 800e086:	e012      	b.n	800e0ae <Draw_Circle_D+0xd6>
 800e088:	79fb      	ldrb	r3, [r7, #7]
 800e08a:	f003 0301 	and.w	r3, r3, #1
 800e08e:	2b00      	cmp	r3, #0
 800e090:	d002      	beq.n	800e098 <Draw_Circle_D+0xc0>
 800e092:	4b98      	ldr	r3, [pc, #608]	; (800e2f4 <Draw_Circle_D+0x31c>)
 800e094:	881b      	ldrh	r3, [r3, #0]
 800e096:	e001      	b.n	800e09c <Draw_Circle_D+0xc4>
 800e098:	4b97      	ldr	r3, [pc, #604]	; (800e2f8 <Draw_Circle_D+0x320>)
 800e09a:	881b      	ldrh	r3, [r3, #0]
 800e09c:	4618      	mov	r0, r3
 800e09e:	f004 f9ab 	bl	80123f8 <LCD_Set_Pixel>
 800e0a2:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800e0a6:	b29b      	uxth	r3, r3
 800e0a8:	3301      	adds	r3, #1
 800e0aa:	b29b      	uxth	r3, r3
 800e0ac:	81bb      	strh	r3, [r7, #12]
 800e0ae:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 800e0b2:	f9b7 3000 	ldrsh.w	r3, [r7]
 800e0b6:	3b04      	subs	r3, #4
 800e0b8:	429a      	cmp	r2, r3
 800e0ba:	dbe5      	blt.n	800e088 <Draw_Circle_D+0xb0>
 800e0bc:	88bb      	ldrh	r3, [r7, #4]
 800e0be:	3301      	adds	r3, #1
 800e0c0:	b29b      	uxth	r3, r3
 800e0c2:	817b      	strh	r3, [r7, #10]
 800e0c4:	887b      	ldrh	r3, [r7, #2]
 800e0c6:	3301      	adds	r3, #1
 800e0c8:	b29b      	uxth	r3, r3
 800e0ca:	813b      	strh	r3, [r7, #8]
 800e0cc:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 800e0d0:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800e0d4:	4611      	mov	r1, r2
 800e0d6:	4618      	mov	r0, r3
 800e0d8:	f004 f940 	bl	801235c <LCD_Set_Posi>
 800e0dc:	2300      	movs	r3, #0
 800e0de:	81bb      	strh	r3, [r7, #12]
 800e0e0:	e012      	b.n	800e108 <Draw_Circle_D+0x130>
 800e0e2:	79fb      	ldrb	r3, [r7, #7]
 800e0e4:	f003 0301 	and.w	r3, r3, #1
 800e0e8:	2b00      	cmp	r3, #0
 800e0ea:	d002      	beq.n	800e0f2 <Draw_Circle_D+0x11a>
 800e0ec:	4b81      	ldr	r3, [pc, #516]	; (800e2f4 <Draw_Circle_D+0x31c>)
 800e0ee:	881b      	ldrh	r3, [r3, #0]
 800e0f0:	e001      	b.n	800e0f6 <Draw_Circle_D+0x11e>
 800e0f2:	4b81      	ldr	r3, [pc, #516]	; (800e2f8 <Draw_Circle_D+0x320>)
 800e0f4:	881b      	ldrh	r3, [r3, #0]
 800e0f6:	4618      	mov	r0, r3
 800e0f8:	f004 f97e 	bl	80123f8 <LCD_Set_Pixel>
 800e0fc:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800e100:	b29b      	uxth	r3, r3
 800e102:	3301      	adds	r3, #1
 800e104:	b29b      	uxth	r3, r3
 800e106:	81bb      	strh	r3, [r7, #12]
 800e108:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 800e10c:	f9b7 3000 	ldrsh.w	r3, [r7]
 800e110:	3b02      	subs	r3, #2
 800e112:	429a      	cmp	r2, r3
 800e114:	dbe5      	blt.n	800e0e2 <Draw_Circle_D+0x10a>
 800e116:	88ba      	ldrh	r2, [r7, #4]
 800e118:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e11a:	4413      	add	r3, r2
 800e11c:	b29b      	uxth	r3, r3
 800e11e:	3b01      	subs	r3, #1
 800e120:	b29b      	uxth	r3, r3
 800e122:	817b      	strh	r3, [r7, #10]
 800e124:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 800e128:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800e12c:	4611      	mov	r1, r2
 800e12e:	4618      	mov	r0, r3
 800e130:	f004 f914 	bl	801235c <LCD_Set_Posi>
 800e134:	2300      	movs	r3, #0
 800e136:	81bb      	strh	r3, [r7, #12]
 800e138:	e012      	b.n	800e160 <Draw_Circle_D+0x188>
 800e13a:	79fb      	ldrb	r3, [r7, #7]
 800e13c:	f003 0301 	and.w	r3, r3, #1
 800e140:	2b00      	cmp	r3, #0
 800e142:	d002      	beq.n	800e14a <Draw_Circle_D+0x172>
 800e144:	4b6b      	ldr	r3, [pc, #428]	; (800e2f4 <Draw_Circle_D+0x31c>)
 800e146:	881b      	ldrh	r3, [r3, #0]
 800e148:	e001      	b.n	800e14e <Draw_Circle_D+0x176>
 800e14a:	4b6b      	ldr	r3, [pc, #428]	; (800e2f8 <Draw_Circle_D+0x320>)
 800e14c:	881b      	ldrh	r3, [r3, #0]
 800e14e:	4618      	mov	r0, r3
 800e150:	f004 f952 	bl	80123f8 <LCD_Set_Pixel>
 800e154:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800e158:	b29b      	uxth	r3, r3
 800e15a:	3301      	adds	r3, #1
 800e15c:	b29b      	uxth	r3, r3
 800e15e:	81bb      	strh	r3, [r7, #12]
 800e160:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 800e164:	f9b7 3000 	ldrsh.w	r3, [r7]
 800e168:	3b02      	subs	r3, #2
 800e16a:	429a      	cmp	r2, r3
 800e16c:	dbe5      	blt.n	800e13a <Draw_Circle_D+0x162>
 800e16e:	88bb      	ldrh	r3, [r7, #4]
 800e170:	3302      	adds	r3, #2
 800e172:	b29b      	uxth	r3, r3
 800e174:	817b      	strh	r3, [r7, #10]
 800e176:	887b      	ldrh	r3, [r7, #2]
 800e178:	813b      	strh	r3, [r7, #8]
 800e17a:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 800e17e:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800e182:	4611      	mov	r1, r2
 800e184:	4618      	mov	r0, r3
 800e186:	f004 f8e9 	bl	801235c <LCD_Set_Posi>
 800e18a:	2300      	movs	r3, #0
 800e18c:	81bb      	strh	r3, [r7, #12]
 800e18e:	e012      	b.n	800e1b6 <Draw_Circle_D+0x1de>
 800e190:	79fb      	ldrb	r3, [r7, #7]
 800e192:	f003 0301 	and.w	r3, r3, #1
 800e196:	2b00      	cmp	r3, #0
 800e198:	d002      	beq.n	800e1a0 <Draw_Circle_D+0x1c8>
 800e19a:	4b56      	ldr	r3, [pc, #344]	; (800e2f4 <Draw_Circle_D+0x31c>)
 800e19c:	881b      	ldrh	r3, [r3, #0]
 800e19e:	e001      	b.n	800e1a4 <Draw_Circle_D+0x1cc>
 800e1a0:	4b55      	ldr	r3, [pc, #340]	; (800e2f8 <Draw_Circle_D+0x320>)
 800e1a2:	881b      	ldrh	r3, [r3, #0]
 800e1a4:	4618      	mov	r0, r3
 800e1a6:	f004 f927 	bl	80123f8 <LCD_Set_Pixel>
 800e1aa:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800e1ae:	b29b      	uxth	r3, r3
 800e1b0:	3301      	adds	r3, #1
 800e1b2:	b29b      	uxth	r3, r3
 800e1b4:	81bb      	strh	r3, [r7, #12]
 800e1b6:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 800e1ba:	f9b7 3000 	ldrsh.w	r3, [r7]
 800e1be:	429a      	cmp	r2, r3
 800e1c0:	dbe6      	blt.n	800e190 <Draw_Circle_D+0x1b8>
 800e1c2:	88ba      	ldrh	r2, [r7, #4]
 800e1c4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e1c6:	4413      	add	r3, r2
 800e1c8:	b29b      	uxth	r3, r3
 800e1ca:	3b02      	subs	r3, #2
 800e1cc:	b29b      	uxth	r3, r3
 800e1ce:	817b      	strh	r3, [r7, #10]
 800e1d0:	887b      	ldrh	r3, [r7, #2]
 800e1d2:	813b      	strh	r3, [r7, #8]
 800e1d4:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 800e1d8:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800e1dc:	4611      	mov	r1, r2
 800e1de:	4618      	mov	r0, r3
 800e1e0:	f004 f8bc 	bl	801235c <LCD_Set_Posi>
 800e1e4:	2300      	movs	r3, #0
 800e1e6:	81bb      	strh	r3, [r7, #12]
 800e1e8:	e012      	b.n	800e210 <Draw_Circle_D+0x238>
 800e1ea:	79fb      	ldrb	r3, [r7, #7]
 800e1ec:	f003 0301 	and.w	r3, r3, #1
 800e1f0:	2b00      	cmp	r3, #0
 800e1f2:	d002      	beq.n	800e1fa <Draw_Circle_D+0x222>
 800e1f4:	4b3f      	ldr	r3, [pc, #252]	; (800e2f4 <Draw_Circle_D+0x31c>)
 800e1f6:	881b      	ldrh	r3, [r3, #0]
 800e1f8:	e001      	b.n	800e1fe <Draw_Circle_D+0x226>
 800e1fa:	4b3f      	ldr	r3, [pc, #252]	; (800e2f8 <Draw_Circle_D+0x320>)
 800e1fc:	881b      	ldrh	r3, [r3, #0]
 800e1fe:	4618      	mov	r0, r3
 800e200:	f004 f8fa 	bl	80123f8 <LCD_Set_Pixel>
 800e204:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800e208:	b29b      	uxth	r3, r3
 800e20a:	3301      	adds	r3, #1
 800e20c:	b29b      	uxth	r3, r3
 800e20e:	81bb      	strh	r3, [r7, #12]
 800e210:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 800e214:	f9b7 3000 	ldrsh.w	r3, [r7]
 800e218:	429a      	cmp	r2, r3
 800e21a:	dbe6      	blt.n	800e1ea <Draw_Circle_D+0x212>
 800e21c:	887b      	ldrh	r3, [r7, #2]
 800e21e:	813b      	strh	r3, [r7, #8]
 800e220:	2300      	movs	r3, #0
 800e222:	81fb      	strh	r3, [r7, #14]
 800e224:	e05a      	b.n	800e2dc <Draw_Circle_D+0x304>
 800e226:	88ba      	ldrh	r2, [r7, #4]
 800e228:	89fb      	ldrh	r3, [r7, #14]
 800e22a:	4413      	add	r3, r2
 800e22c:	b29b      	uxth	r3, r3
 800e22e:	3303      	adds	r3, #3
 800e230:	b29b      	uxth	r3, r3
 800e232:	b21b      	sxth	r3, r3
 800e234:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 800e238:	4611      	mov	r1, r2
 800e23a:	4618      	mov	r0, r3
 800e23c:	f004 f88e 	bl	801235c <LCD_Set_Posi>
 800e240:	2300      	movs	r3, #0
 800e242:	81bb      	strh	r3, [r7, #12]
 800e244:	e012      	b.n	800e26c <Draw_Circle_D+0x294>
 800e246:	79fb      	ldrb	r3, [r7, #7]
 800e248:	f003 0301 	and.w	r3, r3, #1
 800e24c:	2b00      	cmp	r3, #0
 800e24e:	d002      	beq.n	800e256 <Draw_Circle_D+0x27e>
 800e250:	4b28      	ldr	r3, [pc, #160]	; (800e2f4 <Draw_Circle_D+0x31c>)
 800e252:	881b      	ldrh	r3, [r3, #0]
 800e254:	e001      	b.n	800e25a <Draw_Circle_D+0x282>
 800e256:	4b28      	ldr	r3, [pc, #160]	; (800e2f8 <Draw_Circle_D+0x320>)
 800e258:	881b      	ldrh	r3, [r3, #0]
 800e25a:	4618      	mov	r0, r3
 800e25c:	f004 f8cc 	bl	80123f8 <LCD_Set_Pixel>
 800e260:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800e264:	b29b      	uxth	r3, r3
 800e266:	3301      	adds	r3, #1
 800e268:	b29b      	uxth	r3, r3
 800e26a:	81bb      	strh	r3, [r7, #12]
 800e26c:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 800e270:	f9b7 3000 	ldrsh.w	r3, [r7]
 800e274:	429a      	cmp	r2, r3
 800e276:	dbe6      	blt.n	800e246 <Draw_Circle_D+0x26e>
 800e278:	88ba      	ldrh	r2, [r7, #4]
 800e27a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e27c:	4413      	add	r3, r2
 800e27e:	b29a      	uxth	r2, r3
 800e280:	89fb      	ldrh	r3, [r7, #14]
 800e282:	1ad3      	subs	r3, r2, r3
 800e284:	b29b      	uxth	r3, r3
 800e286:	3b03      	subs	r3, #3
 800e288:	b29b      	uxth	r3, r3
 800e28a:	b21b      	sxth	r3, r3
 800e28c:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 800e290:	4611      	mov	r1, r2
 800e292:	4618      	mov	r0, r3
 800e294:	f004 f862 	bl	801235c <LCD_Set_Posi>
 800e298:	2300      	movs	r3, #0
 800e29a:	81bb      	strh	r3, [r7, #12]
 800e29c:	e012      	b.n	800e2c4 <Draw_Circle_D+0x2ec>
 800e29e:	79fb      	ldrb	r3, [r7, #7]
 800e2a0:	f003 0301 	and.w	r3, r3, #1
 800e2a4:	2b00      	cmp	r3, #0
 800e2a6:	d002      	beq.n	800e2ae <Draw_Circle_D+0x2d6>
 800e2a8:	4b12      	ldr	r3, [pc, #72]	; (800e2f4 <Draw_Circle_D+0x31c>)
 800e2aa:	881b      	ldrh	r3, [r3, #0]
 800e2ac:	e001      	b.n	800e2b2 <Draw_Circle_D+0x2da>
 800e2ae:	4b12      	ldr	r3, [pc, #72]	; (800e2f8 <Draw_Circle_D+0x320>)
 800e2b0:	881b      	ldrh	r3, [r3, #0]
 800e2b2:	4618      	mov	r0, r3
 800e2b4:	f004 f8a0 	bl	80123f8 <LCD_Set_Pixel>
 800e2b8:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800e2bc:	b29b      	uxth	r3, r3
 800e2be:	3301      	adds	r3, #1
 800e2c0:	b29b      	uxth	r3, r3
 800e2c2:	81bb      	strh	r3, [r7, #12]
 800e2c4:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 800e2c8:	f9b7 3000 	ldrsh.w	r3, [r7]
 800e2cc:	429a      	cmp	r2, r3
 800e2ce:	dbe6      	blt.n	800e29e <Draw_Circle_D+0x2c6>
 800e2d0:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800e2d4:	b29b      	uxth	r3, r3
 800e2d6:	3301      	adds	r3, #1
 800e2d8:	b29b      	uxth	r3, r3
 800e2da:	81fb      	strh	r3, [r7, #14]
 800e2dc:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 800e2e0:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800e2e4:	429a      	cmp	r2, r3
 800e2e6:	db9e      	blt.n	800e226 <Draw_Circle_D+0x24e>
 800e2e8:	bf00      	nop
 800e2ea:	bf00      	nop
 800e2ec:	3714      	adds	r7, #20
 800e2ee:	46bd      	mov	sp, r7
 800e2f0:	bd90      	pop	{r4, r7, pc}
 800e2f2:	bf00      	nop
 800e2f4:	200015d4 	.word	0x200015d4
 800e2f8:	200015d6 	.word	0x200015d6

0800e2fc <DispStr10x14>:
 800e2fc:	b580      	push	{r7, lr}
 800e2fe:	b084      	sub	sp, #16
 800e300:	af00      	add	r7, sp, #0
 800e302:	607b      	str	r3, [r7, #4]
 800e304:	4603      	mov	r3, r0
 800e306:	81fb      	strh	r3, [r7, #14]
 800e308:	460b      	mov	r3, r1
 800e30a:	81bb      	strh	r3, [r7, #12]
 800e30c:	4613      	mov	r3, r2
 800e30e:	72fb      	strb	r3, [r7, #11]
 800e310:	4a0c      	ldr	r2, [pc, #48]	; (800e344 <DispStr10x14+0x48>)
 800e312:	89fb      	ldrh	r3, [r7, #14]
 800e314:	8013      	strh	r3, [r2, #0]
 800e316:	4a0c      	ldr	r2, [pc, #48]	; (800e348 <DispStr10x14+0x4c>)
 800e318:	89bb      	ldrh	r3, [r7, #12]
 800e31a:	8013      	strh	r3, [r2, #0]
 800e31c:	e008      	b.n	800e330 <DispStr10x14+0x34>
 800e31e:	687b      	ldr	r3, [r7, #4]
 800e320:	1c5a      	adds	r2, r3, #1
 800e322:	607a      	str	r2, [r7, #4]
 800e324:	781a      	ldrb	r2, [r3, #0]
 800e326:	7afb      	ldrb	r3, [r7, #11]
 800e328:	4611      	mov	r1, r2
 800e32a:	4618      	mov	r0, r3
 800e32c:	f000 f80e 	bl	800e34c <DispChar10x14>
 800e330:	687b      	ldr	r3, [r7, #4]
 800e332:	781b      	ldrb	r3, [r3, #0]
 800e334:	2b00      	cmp	r3, #0
 800e336:	d1f2      	bne.n	800e31e <DispStr10x14+0x22>
 800e338:	bf00      	nop
 800e33a:	bf00      	nop
 800e33c:	3710      	adds	r7, #16
 800e33e:	46bd      	mov	sp, r7
 800e340:	bd80      	pop	{r7, pc}
 800e342:	bf00      	nop
 800e344:	20000792 	.word	0x20000792
 800e348:	20000794 	.word	0x20000794

0800e34c <DispChar10x14>:
 800e34c:	b580      	push	{r7, lr}
 800e34e:	b084      	sub	sp, #16
 800e350:	af00      	add	r7, sp, #0
 800e352:	4603      	mov	r3, r0
 800e354:	460a      	mov	r2, r1
 800e356:	71fb      	strb	r3, [r7, #7]
 800e358:	4613      	mov	r3, r2
 800e35a:	71bb      	strb	r3, [r7, #6]
 800e35c:	2300      	movs	r3, #0
 800e35e:	81fb      	strh	r3, [r7, #14]
 800e360:	e0fe      	b.n	800e560 <DispChar10x14+0x214>
 800e362:	79fb      	ldrb	r3, [r7, #7]
 800e364:	f003 0310 	and.w	r3, r3, #16
 800e368:	2b00      	cmp	r3, #0
 800e36a:	d00f      	beq.n	800e38c <DispChar10x14+0x40>
 800e36c:	79bb      	ldrb	r3, [r7, #6]
 800e36e:	f1a3 0240 	sub.w	r2, r3, #64	; 0x40
 800e372:	4613      	mov	r3, r2
 800e374:	009b      	lsls	r3, r3, #2
 800e376:	4413      	add	r3, r2
 800e378:	005b      	lsls	r3, r3, #1
 800e37a:	461a      	mov	r2, r3
 800e37c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800e380:	4413      	add	r3, r2
 800e382:	4a7c      	ldr	r2, [pc, #496]	; (800e574 <DispChar10x14+0x228>)
 800e384:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800e388:	817b      	strh	r3, [r7, #10]
 800e38a:	e00e      	b.n	800e3aa <DispChar10x14+0x5e>
 800e38c:	79bb      	ldrb	r3, [r7, #6]
 800e38e:	f1a3 0221 	sub.w	r2, r3, #33	; 0x21
 800e392:	4613      	mov	r3, r2
 800e394:	009b      	lsls	r3, r3, #2
 800e396:	4413      	add	r3, r2
 800e398:	005b      	lsls	r3, r3, #1
 800e39a:	461a      	mov	r2, r3
 800e39c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800e3a0:	4413      	add	r3, r2
 800e3a2:	4a75      	ldr	r2, [pc, #468]	; (800e578 <DispChar10x14+0x22c>)
 800e3a4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800e3a8:	817b      	strh	r3, [r7, #10]
 800e3aa:	79fb      	ldrb	r3, [r7, #7]
 800e3ac:	f003 0320 	and.w	r3, r3, #32
 800e3b0:	2b00      	cmp	r3, #0
 800e3b2:	d00c      	beq.n	800e3ce <DispChar10x14+0x82>
 800e3b4:	89fb      	ldrh	r3, [r7, #14]
 800e3b6:	f003 0301 	and.w	r3, r3, #1
 800e3ba:	b29b      	uxth	r3, r3
 800e3bc:	2b00      	cmp	r3, #0
 800e3be:	d001      	beq.n	800e3c4 <DispChar10x14+0x78>
 800e3c0:	4a6e      	ldr	r2, [pc, #440]	; (800e57c <DispChar10x14+0x230>)
 800e3c2:	e001      	b.n	800e3c8 <DispChar10x14+0x7c>
 800e3c4:	f245 5255 	movw	r2, #21845	; 0x5555
 800e3c8:	897b      	ldrh	r3, [r7, #10]
 800e3ca:	4013      	ands	r3, r2
 800e3cc:	817b      	strh	r3, [r7, #10]
 800e3ce:	4b6c      	ldr	r3, [pc, #432]	; (800e580 <DispChar10x14+0x234>)
 800e3d0:	f9b3 3000 	ldrsh.w	r3, [r3]
 800e3d4:	4a6b      	ldr	r2, [pc, #428]	; (800e584 <DispChar10x14+0x238>)
 800e3d6:	f9b2 2000 	ldrsh.w	r2, [r2]
 800e3da:	4611      	mov	r1, r2
 800e3dc:	4618      	mov	r0, r3
 800e3de:	f003 ffbd 	bl	801235c <LCD_Set_Posi>
 800e3e2:	79fb      	ldrb	r3, [r7, #7]
 800e3e4:	f003 0310 	and.w	r3, r3, #16
 800e3e8:	2b00      	cmp	r3, #0
 800e3ea:	d038      	beq.n	800e45e <DispChar10x14+0x112>
 800e3ec:	79bb      	ldrb	r3, [r7, #6]
 800e3ee:	2b43      	cmp	r3, #67	; 0x43
 800e3f0:	d005      	beq.n	800e3fe <DispChar10x14+0xb2>
 800e3f2:	79bb      	ldrb	r3, [r7, #6]
 800e3f4:	2b44      	cmp	r3, #68	; 0x44
 800e3f6:	d002      	beq.n	800e3fe <DispChar10x14+0xb2>
 800e3f8:	79bb      	ldrb	r3, [r7, #6]
 800e3fa:	2b45      	cmp	r3, #69	; 0x45
 800e3fc:	d12f      	bne.n	800e45e <DispChar10x14+0x112>
 800e3fe:	2300      	movs	r3, #0
 800e400:	81bb      	strh	r3, [r7, #12]
 800e402:	e027      	b.n	800e454 <DispChar10x14+0x108>
 800e404:	897b      	ldrh	r3, [r7, #10]
 800e406:	f003 0304 	and.w	r3, r3, #4
 800e40a:	2b00      	cmp	r3, #0
 800e40c:	d00d      	beq.n	800e42a <DispChar10x14+0xde>
 800e40e:	79fb      	ldrb	r3, [r7, #7]
 800e410:	f003 0301 	and.w	r3, r3, #1
 800e414:	2b00      	cmp	r3, #0
 800e416:	d002      	beq.n	800e41e <DispChar10x14+0xd2>
 800e418:	4b5b      	ldr	r3, [pc, #364]	; (800e588 <DispChar10x14+0x23c>)
 800e41a:	881b      	ldrh	r3, [r3, #0]
 800e41c:	e001      	b.n	800e422 <DispChar10x14+0xd6>
 800e41e:	4b5b      	ldr	r3, [pc, #364]	; (800e58c <DispChar10x14+0x240>)
 800e420:	881b      	ldrh	r3, [r3, #0]
 800e422:	4618      	mov	r0, r3
 800e424:	f003 ffe8 	bl	80123f8 <LCD_Set_Pixel>
 800e428:	e00c      	b.n	800e444 <DispChar10x14+0xf8>
 800e42a:	79fb      	ldrb	r3, [r7, #7]
 800e42c:	f003 0301 	and.w	r3, r3, #1
 800e430:	2b00      	cmp	r3, #0
 800e432:	d002      	beq.n	800e43a <DispChar10x14+0xee>
 800e434:	4b55      	ldr	r3, [pc, #340]	; (800e58c <DispChar10x14+0x240>)
 800e436:	881b      	ldrh	r3, [r3, #0]
 800e438:	e001      	b.n	800e43e <DispChar10x14+0xf2>
 800e43a:	4b53      	ldr	r3, [pc, #332]	; (800e588 <DispChar10x14+0x23c>)
 800e43c:	881b      	ldrh	r3, [r3, #0]
 800e43e:	4618      	mov	r0, r3
 800e440:	f003 ffda 	bl	80123f8 <LCD_Set_Pixel>
 800e444:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800e448:	105b      	asrs	r3, r3, #1
 800e44a:	817b      	strh	r3, [r7, #10]
 800e44c:	89bb      	ldrh	r3, [r7, #12]
 800e44e:	3301      	adds	r3, #1
 800e450:	b29b      	uxth	r3, r3
 800e452:	81bb      	strh	r3, [r7, #12]
 800e454:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800e458:	2b0a      	cmp	r3, #10
 800e45a:	ddd3      	ble.n	800e404 <DispChar10x14+0xb8>
 800e45c:	e073      	b.n	800e546 <DispChar10x14+0x1fa>
 800e45e:	79fb      	ldrb	r3, [r7, #7]
 800e460:	f003 0310 	and.w	r3, r3, #16
 800e464:	2b00      	cmp	r3, #0
 800e466:	d03f      	beq.n	800e4e8 <DispChar10x14+0x19c>
 800e468:	79bb      	ldrb	r3, [r7, #6]
 800e46a:	2b4c      	cmp	r3, #76	; 0x4c
 800e46c:	d002      	beq.n	800e474 <DispChar10x14+0x128>
 800e46e:	79bb      	ldrb	r3, [r7, #6]
 800e470:	2b48      	cmp	r3, #72	; 0x48
 800e472:	d139      	bne.n	800e4e8 <DispChar10x14+0x19c>
 800e474:	4b42      	ldr	r3, [pc, #264]	; (800e580 <DispChar10x14+0x234>)
 800e476:	f9b3 3000 	ldrsh.w	r3, [r3]
 800e47a:	4a42      	ldr	r2, [pc, #264]	; (800e584 <DispChar10x14+0x238>)
 800e47c:	f9b2 2000 	ldrsh.w	r2, [r2]
 800e480:	4611      	mov	r1, r2
 800e482:	4618      	mov	r0, r3
 800e484:	f003 ff6a 	bl	801235c <LCD_Set_Posi>
 800e488:	2300      	movs	r3, #0
 800e48a:	81bb      	strh	r3, [r7, #12]
 800e48c:	e027      	b.n	800e4de <DispChar10x14+0x192>
 800e48e:	897b      	ldrh	r3, [r7, #10]
 800e490:	f003 0304 	and.w	r3, r3, #4
 800e494:	2b00      	cmp	r3, #0
 800e496:	d00d      	beq.n	800e4b4 <DispChar10x14+0x168>
 800e498:	79fb      	ldrb	r3, [r7, #7]
 800e49a:	f003 0301 	and.w	r3, r3, #1
 800e49e:	2b00      	cmp	r3, #0
 800e4a0:	d002      	beq.n	800e4a8 <DispChar10x14+0x15c>
 800e4a2:	4b39      	ldr	r3, [pc, #228]	; (800e588 <DispChar10x14+0x23c>)
 800e4a4:	881b      	ldrh	r3, [r3, #0]
 800e4a6:	e001      	b.n	800e4ac <DispChar10x14+0x160>
 800e4a8:	4b38      	ldr	r3, [pc, #224]	; (800e58c <DispChar10x14+0x240>)
 800e4aa:	881b      	ldrh	r3, [r3, #0]
 800e4ac:	4618      	mov	r0, r3
 800e4ae:	f003 ffa3 	bl	80123f8 <LCD_Set_Pixel>
 800e4b2:	e00c      	b.n	800e4ce <DispChar10x14+0x182>
 800e4b4:	79fb      	ldrb	r3, [r7, #7]
 800e4b6:	f003 0301 	and.w	r3, r3, #1
 800e4ba:	2b00      	cmp	r3, #0
 800e4bc:	d002      	beq.n	800e4c4 <DispChar10x14+0x178>
 800e4be:	4b33      	ldr	r3, [pc, #204]	; (800e58c <DispChar10x14+0x240>)
 800e4c0:	881b      	ldrh	r3, [r3, #0]
 800e4c2:	e001      	b.n	800e4c8 <DispChar10x14+0x17c>
 800e4c4:	4b30      	ldr	r3, [pc, #192]	; (800e588 <DispChar10x14+0x23c>)
 800e4c6:	881b      	ldrh	r3, [r3, #0]
 800e4c8:	4618      	mov	r0, r3
 800e4ca:	f003 ff95 	bl	80123f8 <LCD_Set_Pixel>
 800e4ce:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800e4d2:	105b      	asrs	r3, r3, #1
 800e4d4:	817b      	strh	r3, [r7, #10]
 800e4d6:	89bb      	ldrh	r3, [r7, #12]
 800e4d8:	3301      	adds	r3, #1
 800e4da:	b29b      	uxth	r3, r3
 800e4dc:	81bb      	strh	r3, [r7, #12]
 800e4de:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800e4e2:	2b0a      	cmp	r3, #10
 800e4e4:	ddd3      	ble.n	800e48e <DispChar10x14+0x142>
 800e4e6:	e02e      	b.n	800e546 <DispChar10x14+0x1fa>
 800e4e8:	2300      	movs	r3, #0
 800e4ea:	81bb      	strh	r3, [r7, #12]
 800e4ec:	e027      	b.n	800e53e <DispChar10x14+0x1f2>
 800e4ee:	897b      	ldrh	r3, [r7, #10]
 800e4f0:	f003 0304 	and.w	r3, r3, #4
 800e4f4:	2b00      	cmp	r3, #0
 800e4f6:	d00d      	beq.n	800e514 <DispChar10x14+0x1c8>
 800e4f8:	79fb      	ldrb	r3, [r7, #7]
 800e4fa:	f003 0301 	and.w	r3, r3, #1
 800e4fe:	2b00      	cmp	r3, #0
 800e500:	d002      	beq.n	800e508 <DispChar10x14+0x1bc>
 800e502:	4b21      	ldr	r3, [pc, #132]	; (800e588 <DispChar10x14+0x23c>)
 800e504:	881b      	ldrh	r3, [r3, #0]
 800e506:	e001      	b.n	800e50c <DispChar10x14+0x1c0>
 800e508:	4b20      	ldr	r3, [pc, #128]	; (800e58c <DispChar10x14+0x240>)
 800e50a:	881b      	ldrh	r3, [r3, #0]
 800e50c:	4618      	mov	r0, r3
 800e50e:	f003 ff73 	bl	80123f8 <LCD_Set_Pixel>
 800e512:	e00c      	b.n	800e52e <DispChar10x14+0x1e2>
 800e514:	79fb      	ldrb	r3, [r7, #7]
 800e516:	f003 0301 	and.w	r3, r3, #1
 800e51a:	2b00      	cmp	r3, #0
 800e51c:	d002      	beq.n	800e524 <DispChar10x14+0x1d8>
 800e51e:	4b1b      	ldr	r3, [pc, #108]	; (800e58c <DispChar10x14+0x240>)
 800e520:	881b      	ldrh	r3, [r3, #0]
 800e522:	e001      	b.n	800e528 <DispChar10x14+0x1dc>
 800e524:	4b18      	ldr	r3, [pc, #96]	; (800e588 <DispChar10x14+0x23c>)
 800e526:	881b      	ldrh	r3, [r3, #0]
 800e528:	4618      	mov	r0, r3
 800e52a:	f003 ff65 	bl	80123f8 <LCD_Set_Pixel>
 800e52e:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800e532:	105b      	asrs	r3, r3, #1
 800e534:	817b      	strh	r3, [r7, #10]
 800e536:	89bb      	ldrh	r3, [r7, #12]
 800e538:	3301      	adds	r3, #1
 800e53a:	b29b      	uxth	r3, r3
 800e53c:	81bb      	strh	r3, [r7, #12]
 800e53e:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800e542:	2b0d      	cmp	r3, #13
 800e544:	ddd3      	ble.n	800e4ee <DispChar10x14+0x1a2>
 800e546:	4b0e      	ldr	r3, [pc, #56]	; (800e580 <DispChar10x14+0x234>)
 800e548:	f9b3 3000 	ldrsh.w	r3, [r3]
 800e54c:	b29b      	uxth	r3, r3
 800e54e:	3301      	adds	r3, #1
 800e550:	b29b      	uxth	r3, r3
 800e552:	b21a      	sxth	r2, r3
 800e554:	4b0a      	ldr	r3, [pc, #40]	; (800e580 <DispChar10x14+0x234>)
 800e556:	801a      	strh	r2, [r3, #0]
 800e558:	89fb      	ldrh	r3, [r7, #14]
 800e55a:	3301      	adds	r3, #1
 800e55c:	b29b      	uxth	r3, r3
 800e55e:	81fb      	strh	r3, [r7, #14]
 800e560:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800e564:	2b09      	cmp	r3, #9
 800e566:	f77f aefc 	ble.w	800e362 <DispChar10x14+0x16>
 800e56a:	bf00      	nop
 800e56c:	bf00      	nop
 800e56e:	3710      	adds	r7, #16
 800e570:	46bd      	mov	sp, r7
 800e572:	bd80      	pop	{r7, pc}
 800e574:	080018f8 	.word	0x080018f8
 800e578:	08001998 	.word	0x08001998
 800e57c:	ffffaaaa 	.word	0xffffaaaa
 800e580:	20000792 	.word	0x20000792
 800e584:	20000794 	.word	0x20000794
 800e588:	200015d6 	.word	0x200015d6
 800e58c:	200015d4 	.word	0x200015d4

0800e590 <NotePixel>:
 800e590:	b480      	push	{r7}
 800e592:	b085      	sub	sp, #20
 800e594:	af00      	add	r7, sp, #0
 800e596:	4603      	mov	r3, r0
 800e598:	71fb      	strb	r3, [r7, #7]
 800e59a:	4b42      	ldr	r3, [pc, #264]	; (800e6a4 <NotePixel+0x114>)
 800e59c:	60fb      	str	r3, [r7, #12]
 800e59e:	4b42      	ldr	r3, [pc, #264]	; (800e6a8 <NotePixel+0x118>)
 800e5a0:	f9b3 3000 	ldrsh.w	r3, [r3]
 800e5a4:	4a41      	ldr	r2, [pc, #260]	; (800e6ac <NotePixel+0x11c>)
 800e5a6:	f9b2 2046 	ldrsh.w	r2, [r2, #70]	; 0x46
 800e5aa:	fb93 f1f2 	sdiv	r1, r3, r2
 800e5ae:	fb02 f201 	mul.w	r2, r2, r1
 800e5b2:	1a9b      	subs	r3, r3, r2
 800e5b4:	b21a      	sxth	r2, r3
 800e5b6:	4b3c      	ldr	r3, [pc, #240]	; (800e6a8 <NotePixel+0x118>)
 800e5b8:	801a      	strh	r2, [r3, #0]
 800e5ba:	4b3d      	ldr	r3, [pc, #244]	; (800e6b0 <NotePixel+0x120>)
 800e5bc:	f9b3 3000 	ldrsh.w	r3, [r3]
 800e5c0:	4a3a      	ldr	r2, [pc, #232]	; (800e6ac <NotePixel+0x11c>)
 800e5c2:	f9b2 204a 	ldrsh.w	r2, [r2, #74]	; 0x4a
 800e5c6:	fb93 f1f2 	sdiv	r1, r3, r2
 800e5ca:	fb02 f201 	mul.w	r2, r2, r1
 800e5ce:	1a9b      	subs	r3, r3, r2
 800e5d0:	b21a      	sxth	r2, r3
 800e5d2:	4b37      	ldr	r3, [pc, #220]	; (800e6b0 <NotePixel+0x120>)
 800e5d4:	801a      	strh	r2, [r3, #0]
 800e5d6:	4b35      	ldr	r3, [pc, #212]	; (800e6ac <NotePixel+0x11c>)
 800e5d8:	f9b3 304a 	ldrsh.w	r3, [r3, #74]	; 0x4a
 800e5dc:	2b00      	cmp	r3, #0
 800e5de:	da00      	bge.n	800e5e2 <NotePixel+0x52>
 800e5e0:	331f      	adds	r3, #31
 800e5e2:	115b      	asrs	r3, r3, #5
 800e5e4:	b21b      	sxth	r3, r3
 800e5e6:	b29a      	uxth	r2, r3
 800e5e8:	4b2f      	ldr	r3, [pc, #188]	; (800e6a8 <NotePixel+0x118>)
 800e5ea:	f9b3 3000 	ldrsh.w	r3, [r3]
 800e5ee:	b29b      	uxth	r3, r3
 800e5f0:	fb12 f303 	smulbb	r3, r2, r3
 800e5f4:	b29a      	uxth	r2, r3
 800e5f6:	4b2e      	ldr	r3, [pc, #184]	; (800e6b0 <NotePixel+0x120>)
 800e5f8:	f9b3 3000 	ldrsh.w	r3, [r3]
 800e5fc:	2b00      	cmp	r3, #0
 800e5fe:	da00      	bge.n	800e602 <NotePixel+0x72>
 800e600:	330f      	adds	r3, #15
 800e602:	111b      	asrs	r3, r3, #4
 800e604:	b21b      	sxth	r3, r3
 800e606:	b29b      	uxth	r3, r3
 800e608:	4413      	add	r3, r2
 800e60a:	b29b      	uxth	r3, r3
 800e60c:	817b      	strh	r3, [r7, #10]
 800e60e:	4b28      	ldr	r3, [pc, #160]	; (800e6b0 <NotePixel+0x120>)
 800e610:	f9b3 3000 	ldrsh.w	r3, [r3]
 800e614:	425a      	negs	r2, r3
 800e616:	f003 030f 	and.w	r3, r3, #15
 800e61a:	f002 020f 	and.w	r2, r2, #15
 800e61e:	bf58      	it	pl
 800e620:	4253      	negpl	r3, r2
 800e622:	813b      	strh	r3, [r7, #8]
 800e624:	79fb      	ldrb	r3, [r7, #7]
 800e626:	2b00      	cmp	r3, #0
 800e628:	d015      	beq.n	800e656 <NotePixel+0xc6>
 800e62a:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800e62e:	005b      	lsls	r3, r3, #1
 800e630:	68fa      	ldr	r2, [r7, #12]
 800e632:	4413      	add	r3, r2
 800e634:	f9b3 1000 	ldrsh.w	r1, [r3]
 800e638:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 800e63c:	2201      	movs	r2, #1
 800e63e:	fa02 f303 	lsl.w	r3, r2, r3
 800e642:	b21a      	sxth	r2, r3
 800e644:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800e648:	005b      	lsls	r3, r3, #1
 800e64a:	68f8      	ldr	r0, [r7, #12]
 800e64c:	4403      	add	r3, r0
 800e64e:	430a      	orrs	r2, r1
 800e650:	b212      	sxth	r2, r2
 800e652:	801a      	strh	r2, [r3, #0]
 800e654:	e016      	b.n	800e684 <NotePixel+0xf4>
 800e656:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800e65a:	005b      	lsls	r3, r3, #1
 800e65c:	68fa      	ldr	r2, [r7, #12]
 800e65e:	4413      	add	r3, r2
 800e660:	f9b3 1000 	ldrsh.w	r1, [r3]
 800e664:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 800e668:	2201      	movs	r2, #1
 800e66a:	fa02 f303 	lsl.w	r3, r2, r3
 800e66e:	b21b      	sxth	r3, r3
 800e670:	43db      	mvns	r3, r3
 800e672:	b21a      	sxth	r2, r3
 800e674:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800e678:	005b      	lsls	r3, r3, #1
 800e67a:	68f8      	ldr	r0, [r7, #12]
 800e67c:	4403      	add	r3, r0
 800e67e:	400a      	ands	r2, r1
 800e680:	b212      	sxth	r2, r2
 800e682:	801a      	strh	r2, [r3, #0]
 800e684:	4b0a      	ldr	r3, [pc, #40]	; (800e6b0 <NotePixel+0x120>)
 800e686:	f9b3 3000 	ldrsh.w	r3, [r3]
 800e68a:	b29b      	uxth	r3, r3
 800e68c:	3301      	adds	r3, #1
 800e68e:	b29b      	uxth	r3, r3
 800e690:	b21a      	sxth	r2, r3
 800e692:	4b07      	ldr	r3, [pc, #28]	; (800e6b0 <NotePixel+0x120>)
 800e694:	801a      	strh	r2, [r3, #0]
 800e696:	bf00      	nop
 800e698:	3714      	adds	r7, #20
 800e69a:	46bd      	mov	sp, r7
 800e69c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6a0:	4770      	bx	lr
 800e6a2:	bf00      	nop
 800e6a4:	20000f94 	.word	0x20000f94
 800e6a8:	20000006 	.word	0x20000006
 800e6ac:	20000144 	.word	0x20000144
 800e6b0:	20000008 	.word	0x20000008

0800e6b4 <Buil_Pop>:
 800e6b4:	b580      	push	{r7, lr}
 800e6b6:	b082      	sub	sp, #8
 800e6b8:	af00      	add	r7, sp, #0
 800e6ba:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800e6be:	2100      	movs	r1, #0
 800e6c0:	487f      	ldr	r0, [pc, #508]	; (800e8c0 <Buil_Pop+0x20c>)
 800e6c2:	f014 fbef 	bl	8022ea4 <memset>
 800e6c6:	4b7f      	ldr	r3, [pc, #508]	; (800e8c4 <Buil_Pop+0x210>)
 800e6c8:	2200      	movs	r2, #0
 800e6ca:	801a      	strh	r2, [r3, #0]
 800e6cc:	4b7e      	ldr	r3, [pc, #504]	; (800e8c8 <Buil_Pop+0x214>)
 800e6ce:	2203      	movs	r2, #3
 800e6d0:	801a      	strh	r2, [r3, #0]
 800e6d2:	2300      	movs	r3, #0
 800e6d4:	80fb      	strh	r3, [r7, #6]
 800e6d6:	e008      	b.n	800e6ea <Buil_Pop+0x36>
 800e6d8:	2001      	movs	r0, #1
 800e6da:	f7ff ff59 	bl	800e590 <NotePixel>
 800e6de:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800e6e2:	b29b      	uxth	r3, r3
 800e6e4:	3301      	adds	r3, #1
 800e6e6:	b29b      	uxth	r3, r3
 800e6e8:	80fb      	strh	r3, [r7, #6]
 800e6ea:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800e6ee:	4b77      	ldr	r3, [pc, #476]	; (800e8cc <Buil_Pop+0x218>)
 800e6f0:	f9b3 304a 	ldrsh.w	r3, [r3, #74]	; 0x4a
 800e6f4:	0fd9      	lsrs	r1, r3, #31
 800e6f6:	440b      	add	r3, r1
 800e6f8:	105b      	asrs	r3, r3, #1
 800e6fa:	b21b      	sxth	r3, r3
 800e6fc:	3b06      	subs	r3, #6
 800e6fe:	429a      	cmp	r2, r3
 800e700:	dbea      	blt.n	800e6d8 <Buil_Pop+0x24>
 800e702:	4b70      	ldr	r3, [pc, #448]	; (800e8c4 <Buil_Pop+0x210>)
 800e704:	2201      	movs	r2, #1
 800e706:	801a      	strh	r2, [r3, #0]
 800e708:	4b6f      	ldr	r3, [pc, #444]	; (800e8c8 <Buil_Pop+0x214>)
 800e70a:	2202      	movs	r2, #2
 800e70c:	801a      	strh	r2, [r3, #0]
 800e70e:	2001      	movs	r0, #1
 800e710:	f7ff ff3e 	bl	800e590 <NotePixel>
 800e714:	4b6b      	ldr	r3, [pc, #428]	; (800e8c4 <Buil_Pop+0x210>)
 800e716:	2201      	movs	r2, #1
 800e718:	801a      	strh	r2, [r3, #0]
 800e71a:	4b6c      	ldr	r3, [pc, #432]	; (800e8cc <Buil_Pop+0x218>)
 800e71c:	f9b3 304a 	ldrsh.w	r3, [r3, #74]	; 0x4a
 800e720:	0fda      	lsrs	r2, r3, #31
 800e722:	4413      	add	r3, r2
 800e724:	105b      	asrs	r3, r3, #1
 800e726:	b21b      	sxth	r3, r3
 800e728:	b29b      	uxth	r3, r3
 800e72a:	3b03      	subs	r3, #3
 800e72c:	b29b      	uxth	r3, r3
 800e72e:	b21a      	sxth	r2, r3
 800e730:	4b65      	ldr	r3, [pc, #404]	; (800e8c8 <Buil_Pop+0x214>)
 800e732:	801a      	strh	r2, [r3, #0]
 800e734:	2001      	movs	r0, #1
 800e736:	f7ff ff2b 	bl	800e590 <NotePixel>
 800e73a:	4b62      	ldr	r3, [pc, #392]	; (800e8c4 <Buil_Pop+0x210>)
 800e73c:	2202      	movs	r2, #2
 800e73e:	801a      	strh	r2, [r3, #0]
 800e740:	4b61      	ldr	r3, [pc, #388]	; (800e8c8 <Buil_Pop+0x214>)
 800e742:	2201      	movs	r2, #1
 800e744:	801a      	strh	r2, [r3, #0]
 800e746:	2001      	movs	r0, #1
 800e748:	f7ff ff22 	bl	800e590 <NotePixel>
 800e74c:	4b5d      	ldr	r3, [pc, #372]	; (800e8c4 <Buil_Pop+0x210>)
 800e74e:	2202      	movs	r2, #2
 800e750:	801a      	strh	r2, [r3, #0]
 800e752:	4b5e      	ldr	r3, [pc, #376]	; (800e8cc <Buil_Pop+0x218>)
 800e754:	f9b3 304a 	ldrsh.w	r3, [r3, #74]	; 0x4a
 800e758:	0fda      	lsrs	r2, r3, #31
 800e75a:	4413      	add	r3, r2
 800e75c:	105b      	asrs	r3, r3, #1
 800e75e:	b21b      	sxth	r3, r3
 800e760:	b29b      	uxth	r3, r3
 800e762:	3b02      	subs	r3, #2
 800e764:	b29b      	uxth	r3, r3
 800e766:	b21a      	sxth	r2, r3
 800e768:	4b57      	ldr	r3, [pc, #348]	; (800e8c8 <Buil_Pop+0x214>)
 800e76a:	801a      	strh	r2, [r3, #0]
 800e76c:	2001      	movs	r0, #1
 800e76e:	f7ff ff0f 	bl	800e590 <NotePixel>
 800e772:	4b54      	ldr	r3, [pc, #336]	; (800e8c4 <Buil_Pop+0x210>)
 800e774:	2203      	movs	r2, #3
 800e776:	801a      	strh	r2, [r3, #0]
 800e778:	e01e      	b.n	800e7b8 <Buil_Pop+0x104>
 800e77a:	4b53      	ldr	r3, [pc, #332]	; (800e8c8 <Buil_Pop+0x214>)
 800e77c:	2200      	movs	r2, #0
 800e77e:	801a      	strh	r2, [r3, #0]
 800e780:	2001      	movs	r0, #1
 800e782:	f7ff ff05 	bl	800e590 <NotePixel>
 800e786:	4b51      	ldr	r3, [pc, #324]	; (800e8cc <Buil_Pop+0x218>)
 800e788:	f9b3 304a 	ldrsh.w	r3, [r3, #74]	; 0x4a
 800e78c:	0fda      	lsrs	r2, r3, #31
 800e78e:	4413      	add	r3, r2
 800e790:	105b      	asrs	r3, r3, #1
 800e792:	b21b      	sxth	r3, r3
 800e794:	b29b      	uxth	r3, r3
 800e796:	3b01      	subs	r3, #1
 800e798:	b29b      	uxth	r3, r3
 800e79a:	b21a      	sxth	r2, r3
 800e79c:	4b4a      	ldr	r3, [pc, #296]	; (800e8c8 <Buil_Pop+0x214>)
 800e79e:	801a      	strh	r2, [r3, #0]
 800e7a0:	2001      	movs	r0, #1
 800e7a2:	f7ff fef5 	bl	800e590 <NotePixel>
 800e7a6:	4b47      	ldr	r3, [pc, #284]	; (800e8c4 <Buil_Pop+0x210>)
 800e7a8:	f9b3 3000 	ldrsh.w	r3, [r3]
 800e7ac:	b29b      	uxth	r3, r3
 800e7ae:	3301      	adds	r3, #1
 800e7b0:	b29b      	uxth	r3, r3
 800e7b2:	b21a      	sxth	r2, r3
 800e7b4:	4b43      	ldr	r3, [pc, #268]	; (800e8c4 <Buil_Pop+0x210>)
 800e7b6:	801a      	strh	r2, [r3, #0]
 800e7b8:	4b42      	ldr	r3, [pc, #264]	; (800e8c4 <Buil_Pop+0x210>)
 800e7ba:	f9b3 3000 	ldrsh.w	r3, [r3]
 800e7be:	461a      	mov	r2, r3
 800e7c0:	4b42      	ldr	r3, [pc, #264]	; (800e8cc <Buil_Pop+0x218>)
 800e7c2:	f9b3 3046 	ldrsh.w	r3, [r3, #70]	; 0x46
 800e7c6:	3b02      	subs	r3, #2
 800e7c8:	429a      	cmp	r2, r3
 800e7ca:	dbd6      	blt.n	800e77a <Buil_Pop+0xc6>
 800e7cc:	4b3f      	ldr	r3, [pc, #252]	; (800e8cc <Buil_Pop+0x218>)
 800e7ce:	f9b3 3046 	ldrsh.w	r3, [r3, #70]	; 0x46
 800e7d2:	b29b      	uxth	r3, r3
 800e7d4:	3b03      	subs	r3, #3
 800e7d6:	b29b      	uxth	r3, r3
 800e7d8:	b21a      	sxth	r2, r3
 800e7da:	4b3a      	ldr	r3, [pc, #232]	; (800e8c4 <Buil_Pop+0x210>)
 800e7dc:	801a      	strh	r2, [r3, #0]
 800e7de:	4b3a      	ldr	r3, [pc, #232]	; (800e8c8 <Buil_Pop+0x214>)
 800e7e0:	2201      	movs	r2, #1
 800e7e2:	801a      	strh	r2, [r3, #0]
 800e7e4:	2001      	movs	r0, #1
 800e7e6:	f7ff fed3 	bl	800e590 <NotePixel>
 800e7ea:	4b38      	ldr	r3, [pc, #224]	; (800e8cc <Buil_Pop+0x218>)
 800e7ec:	f9b3 3046 	ldrsh.w	r3, [r3, #70]	; 0x46
 800e7f0:	b29b      	uxth	r3, r3
 800e7f2:	3b03      	subs	r3, #3
 800e7f4:	b29b      	uxth	r3, r3
 800e7f6:	b21a      	sxth	r2, r3
 800e7f8:	4b32      	ldr	r3, [pc, #200]	; (800e8c4 <Buil_Pop+0x210>)
 800e7fa:	801a      	strh	r2, [r3, #0]
 800e7fc:	4b33      	ldr	r3, [pc, #204]	; (800e8cc <Buil_Pop+0x218>)
 800e7fe:	f9b3 304a 	ldrsh.w	r3, [r3, #74]	; 0x4a
 800e802:	0fda      	lsrs	r2, r3, #31
 800e804:	4413      	add	r3, r2
 800e806:	105b      	asrs	r3, r3, #1
 800e808:	b21b      	sxth	r3, r3
 800e80a:	b29b      	uxth	r3, r3
 800e80c:	3b02      	subs	r3, #2
 800e80e:	b29b      	uxth	r3, r3
 800e810:	b21a      	sxth	r2, r3
 800e812:	4b2d      	ldr	r3, [pc, #180]	; (800e8c8 <Buil_Pop+0x214>)
 800e814:	801a      	strh	r2, [r3, #0]
 800e816:	2001      	movs	r0, #1
 800e818:	f7ff feba 	bl	800e590 <NotePixel>
 800e81c:	4b2b      	ldr	r3, [pc, #172]	; (800e8cc <Buil_Pop+0x218>)
 800e81e:	f9b3 3046 	ldrsh.w	r3, [r3, #70]	; 0x46
 800e822:	b29b      	uxth	r3, r3
 800e824:	3b02      	subs	r3, #2
 800e826:	b29b      	uxth	r3, r3
 800e828:	b21a      	sxth	r2, r3
 800e82a:	4b26      	ldr	r3, [pc, #152]	; (800e8c4 <Buil_Pop+0x210>)
 800e82c:	801a      	strh	r2, [r3, #0]
 800e82e:	4b26      	ldr	r3, [pc, #152]	; (800e8c8 <Buil_Pop+0x214>)
 800e830:	2202      	movs	r2, #2
 800e832:	801a      	strh	r2, [r3, #0]
 800e834:	2001      	movs	r0, #1
 800e836:	f7ff feab 	bl	800e590 <NotePixel>
 800e83a:	4b24      	ldr	r3, [pc, #144]	; (800e8cc <Buil_Pop+0x218>)
 800e83c:	f9b3 3046 	ldrsh.w	r3, [r3, #70]	; 0x46
 800e840:	b29b      	uxth	r3, r3
 800e842:	3b02      	subs	r3, #2
 800e844:	b29b      	uxth	r3, r3
 800e846:	b21a      	sxth	r2, r3
 800e848:	4b1e      	ldr	r3, [pc, #120]	; (800e8c4 <Buil_Pop+0x210>)
 800e84a:	801a      	strh	r2, [r3, #0]
 800e84c:	4b1f      	ldr	r3, [pc, #124]	; (800e8cc <Buil_Pop+0x218>)
 800e84e:	f9b3 304a 	ldrsh.w	r3, [r3, #74]	; 0x4a
 800e852:	0fda      	lsrs	r2, r3, #31
 800e854:	4413      	add	r3, r2
 800e856:	105b      	asrs	r3, r3, #1
 800e858:	b21b      	sxth	r3, r3
 800e85a:	b29b      	uxth	r3, r3
 800e85c:	3b03      	subs	r3, #3
 800e85e:	b29b      	uxth	r3, r3
 800e860:	b21a      	sxth	r2, r3
 800e862:	4b19      	ldr	r3, [pc, #100]	; (800e8c8 <Buil_Pop+0x214>)
 800e864:	801a      	strh	r2, [r3, #0]
 800e866:	2001      	movs	r0, #1
 800e868:	f7ff fe92 	bl	800e590 <NotePixel>
 800e86c:	4b17      	ldr	r3, [pc, #92]	; (800e8cc <Buil_Pop+0x218>)
 800e86e:	f9b3 3046 	ldrsh.w	r3, [r3, #70]	; 0x46
 800e872:	b29b      	uxth	r3, r3
 800e874:	3b01      	subs	r3, #1
 800e876:	b29b      	uxth	r3, r3
 800e878:	b21a      	sxth	r2, r3
 800e87a:	4b12      	ldr	r3, [pc, #72]	; (800e8c4 <Buil_Pop+0x210>)
 800e87c:	801a      	strh	r2, [r3, #0]
 800e87e:	4b12      	ldr	r3, [pc, #72]	; (800e8c8 <Buil_Pop+0x214>)
 800e880:	2203      	movs	r2, #3
 800e882:	801a      	strh	r2, [r3, #0]
 800e884:	2300      	movs	r3, #0
 800e886:	80fb      	strh	r3, [r7, #6]
 800e888:	e008      	b.n	800e89c <Buil_Pop+0x1e8>
 800e88a:	2001      	movs	r0, #1
 800e88c:	f7ff fe80 	bl	800e590 <NotePixel>
 800e890:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800e894:	b29b      	uxth	r3, r3
 800e896:	3301      	adds	r3, #1
 800e898:	b29b      	uxth	r3, r3
 800e89a:	80fb      	strh	r3, [r7, #6]
 800e89c:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800e8a0:	4b0a      	ldr	r3, [pc, #40]	; (800e8cc <Buil_Pop+0x218>)
 800e8a2:	f9b3 304a 	ldrsh.w	r3, [r3, #74]	; 0x4a
 800e8a6:	0fd9      	lsrs	r1, r3, #31
 800e8a8:	440b      	add	r3, r1
 800e8aa:	105b      	asrs	r3, r3, #1
 800e8ac:	b21b      	sxth	r3, r3
 800e8ae:	3b06      	subs	r3, #6
 800e8b0:	429a      	cmp	r2, r3
 800e8b2:	dbea      	blt.n	800e88a <Buil_Pop+0x1d6>
 800e8b4:	bf00      	nop
 800e8b6:	bf00      	nop
 800e8b8:	3708      	adds	r7, #8
 800e8ba:	46bd      	mov	sp, r7
 800e8bc:	bd80      	pop	{r7, pc}
 800e8be:	bf00      	nop
 800e8c0:	20000f94 	.word	0x20000f94
 800e8c4:	20000006 	.word	0x20000006
 800e8c8:	20000008 	.word	0x20000008
 800e8cc:	20000144 	.word	0x20000144

0800e8d0 <PopColor>:
 800e8d0:	b480      	push	{r7}
 800e8d2:	b083      	sub	sp, #12
 800e8d4:	af00      	add	r7, sp, #0
 800e8d6:	4603      	mov	r3, r0
 800e8d8:	460a      	mov	r2, r1
 800e8da:	80fb      	strh	r3, [r7, #6]
 800e8dc:	4613      	mov	r3, r2
 800e8de:	80bb      	strh	r3, [r7, #4]
 800e8e0:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800e8e4:	4b06      	ldr	r3, [pc, #24]	; (800e900 <PopColor+0x30>)
 800e8e6:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 800e8ea:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 800e8ee:	4b04      	ldr	r3, [pc, #16]	; (800e900 <PopColor+0x30>)
 800e8f0:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
 800e8f4:	bf00      	nop
 800e8f6:	370c      	adds	r7, #12
 800e8f8:	46bd      	mov	sp, r7
 800e8fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8fe:	4770      	bx	lr
 800e900:	20000144 	.word	0x20000144

0800e904 <Close_Pop>:
 800e904:	b480      	push	{r7}
 800e906:	af00      	add	r7, sp, #0
 800e908:	4b07      	ldr	r3, [pc, #28]	; (800e928 <Close_Pop+0x24>)
 800e90a:	781b      	ldrb	r3, [r3, #0]
 800e90c:	f023 0306 	bic.w	r3, r3, #6
 800e910:	b2da      	uxtb	r2, r3
 800e912:	4b05      	ldr	r3, [pc, #20]	; (800e928 <Close_Pop+0x24>)
 800e914:	701a      	strb	r2, [r3, #0]
 800e916:	4b05      	ldr	r3, [pc, #20]	; (800e92c <Close_Pop+0x28>)
 800e918:	2201      	movs	r2, #1
 800e91a:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
 800e91e:	bf00      	nop
 800e920:	46bd      	mov	sp, r7
 800e922:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e926:	4770      	bx	lr
 800e928:	20000796 	.word	0x20000796
 800e92c:	20000144 	.word	0x20000144

0800e930 <List_Pop>:
 800e930:	b480      	push	{r7}
 800e932:	af00      	add	r7, sp, #0
 800e934:	4b07      	ldr	r3, [pc, #28]	; (800e954 <List_Pop+0x24>)
 800e936:	781b      	ldrb	r3, [r3, #0]
 800e938:	f043 0302 	orr.w	r3, r3, #2
 800e93c:	b2da      	uxtb	r2, r3
 800e93e:	4b05      	ldr	r3, [pc, #20]	; (800e954 <List_Pop+0x24>)
 800e940:	701a      	strb	r2, [r3, #0]
 800e942:	4b05      	ldr	r3, [pc, #20]	; (800e958 <List_Pop+0x28>)
 800e944:	2200      	movs	r2, #0
 800e946:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
 800e94a:	bf00      	nop
 800e94c:	46bd      	mov	sp, r7
 800e94e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e952:	4770      	bx	lr
 800e954:	20000796 	.word	0x20000796
 800e958:	20000144 	.word	0x20000144

0800e95c <Dialog_Pop>:
 800e95c:	b580      	push	{r7, lr}
 800e95e:	b084      	sub	sp, #16
 800e960:	af02      	add	r7, sp, #8
 800e962:	6078      	str	r0, [r7, #4]
 800e964:	4b2a      	ldr	r3, [pc, #168]	; (800ea10 <Dialog_Pop+0xb4>)
 800e966:	781b      	ldrb	r3, [r3, #0]
 800e968:	f043 0304 	orr.w	r3, r3, #4
 800e96c:	b2da      	uxtb	r2, r3
 800e96e:	4b28      	ldr	r3, [pc, #160]	; (800ea10 <Dialog_Pop+0xb4>)
 800e970:	701a      	strb	r2, [r3, #0]
 800e972:	4b28      	ldr	r3, [pc, #160]	; (800ea14 <Dialog_Pop+0xb8>)
 800e974:	2280      	movs	r2, #128	; 0x80
 800e976:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 800e97a:	4b26      	ldr	r3, [pc, #152]	; (800ea14 <Dialog_Pop+0xb8>)
 800e97c:	2260      	movs	r2, #96	; 0x60
 800e97e:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
 800e982:	4b24      	ldr	r3, [pc, #144]	; (800ea14 <Dialog_Pop+0xb8>)
 800e984:	2250      	movs	r2, #80	; 0x50
 800e986:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
 800e98a:	4b22      	ldr	r3, [pc, #136]	; (800ea14 <Dialog_Pop+0xb8>)
 800e98c:	22c8      	movs	r2, #200	; 0xc8
 800e98e:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800e992:	f643 11e7 	movw	r1, #14823	; 0x39e7
 800e996:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800e99a:	f7ff ff99 	bl	800e8d0 <PopColor>
 800e99e:	f7ff fe89 	bl	800e6b4 <Buil_Pop>
 800e9a2:	687b      	ldr	r3, [r7, #4]
 800e9a4:	2200      	movs	r2, #0
 800e9a6:	211c      	movs	r1, #28
 800e9a8:	2008      	movs	r0, #8
 800e9aa:	f000 f8e1 	bl	800eb70 <NoteSTR>
 800e9ae:	4b1a      	ldr	r3, [pc, #104]	; (800ea18 <Dialog_Pop+0xbc>)
 800e9b0:	2211      	movs	r2, #17
 800e9b2:	2108      	movs	r1, #8
 800e9b4:	200c      	movs	r0, #12
 800e9b6:	f000 f8db 	bl	800eb70 <NoteSTR>
 800e9ba:	230a      	movs	r3, #10
 800e9bc:	9300      	str	r3, [sp, #0]
 800e9be:	2302      	movs	r3, #2
 800e9c0:	2208      	movs	r2, #8
 800e9c2:	210c      	movs	r1, #12
 800e9c4:	2000      	movs	r0, #0
 800e9c6:	f000 f979 	bl	800ecbc <Note_4Point>
 800e9ca:	4b14      	ldr	r3, [pc, #80]	; (800ea1c <Dialog_Pop+0xc0>)
 800e9cc:	2200      	movs	r2, #0
 800e9ce:	2108      	movs	r1, #8
 800e9d0:	2018      	movs	r0, #24
 800e9d2:	f000 f8cd 	bl	800eb70 <NoteSTR>
 800e9d6:	4b12      	ldr	r3, [pc, #72]	; (800ea20 <Dialog_Pop+0xc4>)
 800e9d8:	2211      	movs	r2, #17
 800e9da:	2108      	movs	r1, #8
 800e9dc:	2048      	movs	r0, #72	; 0x48
 800e9de:	f000 f8c7 	bl	800eb70 <NoteSTR>
 800e9e2:	230a      	movs	r3, #10
 800e9e4:	9300      	str	r3, [sp, #0]
 800e9e6:	2302      	movs	r3, #2
 800e9e8:	2208      	movs	r2, #8
 800e9ea:	2148      	movs	r1, #72	; 0x48
 800e9ec:	2000      	movs	r0, #0
 800e9ee:	f000 f965 	bl	800ecbc <Note_4Point>
 800e9f2:	4b0c      	ldr	r3, [pc, #48]	; (800ea24 <Dialog_Pop+0xc8>)
 800e9f4:	2200      	movs	r2, #0
 800e9f6:	2108      	movs	r1, #8
 800e9f8:	2054      	movs	r0, #84	; 0x54
 800e9fa:	f000 f8b9 	bl	800eb70 <NoteSTR>
 800e9fe:	4b05      	ldr	r3, [pc, #20]	; (800ea14 <Dialog_Pop+0xb8>)
 800ea00:	2200      	movs	r2, #0
 800ea02:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
 800ea06:	bf00      	nop
 800ea08:	3708      	adds	r7, #8
 800ea0a:	46bd      	mov	sp, r7
 800ea0c:	bd80      	pop	{r7, pc}
 800ea0e:	bf00      	nop
 800ea10:	20000796 	.word	0x20000796
 800ea14:	20000144 	.word	0x20000144
 800ea18:	080001c4 	.word	0x080001c4
 800ea1c:	080001c8 	.word	0x080001c8
 800ea20:	080001d0 	.word	0x080001d0
 800ea24:	080001d4 	.word	0x080001d4

0800ea28 <Calibrate_Pop>:
 800ea28:	b580      	push	{r7, lr}
 800ea2a:	b082      	sub	sp, #8
 800ea2c:	af00      	add	r7, sp, #0
 800ea2e:	6078      	str	r0, [r7, #4]
 800ea30:	4b16      	ldr	r3, [pc, #88]	; (800ea8c <Calibrate_Pop+0x64>)
 800ea32:	781b      	ldrb	r3, [r3, #0]
 800ea34:	f043 0304 	orr.w	r3, r3, #4
 800ea38:	b2da      	uxtb	r2, r3
 800ea3a:	4b14      	ldr	r3, [pc, #80]	; (800ea8c <Calibrate_Pop+0x64>)
 800ea3c:	701a      	strb	r2, [r3, #0]
 800ea3e:	4b14      	ldr	r3, [pc, #80]	; (800ea90 <Calibrate_Pop+0x68>)
 800ea40:	22c8      	movs	r2, #200	; 0xc8
 800ea42:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 800ea46:	4b12      	ldr	r3, [pc, #72]	; (800ea90 <Calibrate_Pop+0x68>)
 800ea48:	2240      	movs	r2, #64	; 0x40
 800ea4a:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
 800ea4e:	4b10      	ldr	r3, [pc, #64]	; (800ea90 <Calibrate_Pop+0x68>)
 800ea50:	2232      	movs	r2, #50	; 0x32
 800ea52:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
 800ea56:	4b0e      	ldr	r3, [pc, #56]	; (800ea90 <Calibrate_Pop+0x68>)
 800ea58:	22e6      	movs	r2, #230	; 0xe6
 800ea5a:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800ea5e:	f643 11e7 	movw	r1, #14823	; 0x39e7
 800ea62:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800ea66:	f7ff ff33 	bl	800e8d0 <PopColor>
 800ea6a:	f7ff fe23 	bl	800e6b4 <Buil_Pop>
 800ea6e:	687b      	ldr	r3, [r7, #4]
 800ea70:	2200      	movs	r2, #0
 800ea72:	210a      	movs	r1, #10
 800ea74:	2010      	movs	r0, #16
 800ea76:	f000 f87b 	bl	800eb70 <NoteSTR>
 800ea7a:	4b05      	ldr	r3, [pc, #20]	; (800ea90 <Calibrate_Pop+0x68>)
 800ea7c:	2200      	movs	r2, #0
 800ea7e:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
 800ea82:	bf00      	nop
 800ea84:	3708      	adds	r7, #8
 800ea86:	46bd      	mov	sp, r7
 800ea88:	bd80      	pop	{r7, pc}
 800ea8a:	bf00      	nop
 800ea8c:	20000796 	.word	0x20000796
 800ea90:	20000144 	.word	0x20000144

0800ea94 <CalSave_Pop>:
 800ea94:	b580      	push	{r7, lr}
 800ea96:	b084      	sub	sp, #16
 800ea98:	af02      	add	r7, sp, #8
 800ea9a:	6078      	str	r0, [r7, #4]
 800ea9c:	4b2d      	ldr	r3, [pc, #180]	; (800eb54 <CalSave_Pop+0xc0>)
 800ea9e:	781b      	ldrb	r3, [r3, #0]
 800eaa0:	f043 0304 	orr.w	r3, r3, #4
 800eaa4:	b2da      	uxtb	r2, r3
 800eaa6:	4b2b      	ldr	r3, [pc, #172]	; (800eb54 <CalSave_Pop+0xc0>)
 800eaa8:	701a      	strb	r2, [r3, #0]
 800eaaa:	4b2b      	ldr	r3, [pc, #172]	; (800eb58 <CalSave_Pop+0xc4>)
 800eaac:	22d0      	movs	r2, #208	; 0xd0
 800eaae:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 800eab2:	4b29      	ldr	r3, [pc, #164]	; (800eb58 <CalSave_Pop+0xc4>)
 800eab4:	2260      	movs	r2, #96	; 0x60
 800eab6:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
 800eaba:	4b27      	ldr	r3, [pc, #156]	; (800eb58 <CalSave_Pop+0xc4>)
 800eabc:	221e      	movs	r2, #30
 800eabe:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
 800eac2:	4b25      	ldr	r3, [pc, #148]	; (800eb58 <CalSave_Pop+0xc4>)
 800eac4:	22c8      	movs	r2, #200	; 0xc8
 800eac6:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800eaca:	f643 11e7 	movw	r1, #14823	; 0x39e7
 800eace:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800ead2:	f7ff fefd 	bl	800e8d0 <PopColor>
 800ead6:	f7ff fded 	bl	800e6b4 <Buil_Pop>
 800eada:	4b20      	ldr	r3, [pc, #128]	; (800eb5c <CalSave_Pop+0xc8>)
 800eadc:	2200      	movs	r2, #0
 800eade:	211c      	movs	r1, #28
 800eae0:	2006      	movs	r0, #6
 800eae2:	f000 f845 	bl	800eb70 <NoteSTR>
 800eae6:	687b      	ldr	r3, [r7, #4]
 800eae8:	2200      	movs	r2, #0
 800eaea:	211c      	movs	r1, #28
 800eaec:	205a      	movs	r0, #90	; 0x5a
 800eaee:	f000 f83f 	bl	800eb70 <NoteSTR>
 800eaf2:	4b1b      	ldr	r3, [pc, #108]	; (800eb60 <CalSave_Pop+0xcc>)
 800eaf4:	2211      	movs	r2, #17
 800eaf6:	2108      	movs	r1, #8
 800eaf8:	201e      	movs	r0, #30
 800eafa:	f000 f839 	bl	800eb70 <NoteSTR>
 800eafe:	230a      	movs	r3, #10
 800eb00:	9300      	str	r3, [sp, #0]
 800eb02:	2302      	movs	r3, #2
 800eb04:	2208      	movs	r2, #8
 800eb06:	211e      	movs	r1, #30
 800eb08:	2000      	movs	r0, #0
 800eb0a:	f000 f8d7 	bl	800ecbc <Note_4Point>
 800eb0e:	4b15      	ldr	r3, [pc, #84]	; (800eb64 <CalSave_Pop+0xd0>)
 800eb10:	2200      	movs	r2, #0
 800eb12:	2108      	movs	r1, #8
 800eb14:	202a      	movs	r0, #42	; 0x2a
 800eb16:	f000 f82b 	bl	800eb70 <NoteSTR>
 800eb1a:	4b13      	ldr	r3, [pc, #76]	; (800eb68 <CalSave_Pop+0xd4>)
 800eb1c:	2211      	movs	r2, #17
 800eb1e:	2108      	movs	r1, #8
 800eb20:	2078      	movs	r0, #120	; 0x78
 800eb22:	f000 f825 	bl	800eb70 <NoteSTR>
 800eb26:	230a      	movs	r3, #10
 800eb28:	9300      	str	r3, [sp, #0]
 800eb2a:	2302      	movs	r3, #2
 800eb2c:	2208      	movs	r2, #8
 800eb2e:	2178      	movs	r1, #120	; 0x78
 800eb30:	2000      	movs	r0, #0
 800eb32:	f000 f8c3 	bl	800ecbc <Note_4Point>
 800eb36:	4b0d      	ldr	r3, [pc, #52]	; (800eb6c <CalSave_Pop+0xd8>)
 800eb38:	2200      	movs	r2, #0
 800eb3a:	2108      	movs	r1, #8
 800eb3c:	2084      	movs	r0, #132	; 0x84
 800eb3e:	f000 f817 	bl	800eb70 <NoteSTR>
 800eb42:	4b05      	ldr	r3, [pc, #20]	; (800eb58 <CalSave_Pop+0xc4>)
 800eb44:	2200      	movs	r2, #0
 800eb46:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
 800eb4a:	bf00      	nop
 800eb4c:	3708      	adds	r7, #8
 800eb4e:	46bd      	mov	sp, r7
 800eb50:	bd80      	pop	{r7, pc}
 800eb52:	bf00      	nop
 800eb54:	20000796 	.word	0x20000796
 800eb58:	20000144 	.word	0x20000144
 800eb5c:	080001dc 	.word	0x080001dc
 800eb60:	080001c4 	.word	0x080001c4
 800eb64:	080001c8 	.word	0x080001c8
 800eb68:	080001d0 	.word	0x080001d0
 800eb6c:	080001d4 	.word	0x080001d4

0800eb70 <NoteSTR>:
 800eb70:	b580      	push	{r7, lr}
 800eb72:	b086      	sub	sp, #24
 800eb74:	af00      	add	r7, sp, #0
 800eb76:	607b      	str	r3, [r7, #4]
 800eb78:	4603      	mov	r3, r0
 800eb7a:	81fb      	strh	r3, [r7, #14]
 800eb7c:	460b      	mov	r3, r1
 800eb7e:	81bb      	strh	r3, [r7, #12]
 800eb80:	4613      	mov	r3, r2
 800eb82:	72fb      	strb	r3, [r7, #11]
 800eb84:	4a48      	ldr	r2, [pc, #288]	; (800eca8 <NoteSTR+0x138>)
 800eb86:	89fb      	ldrh	r3, [r7, #14]
 800eb88:	8013      	strh	r3, [r2, #0]
 800eb8a:	4a48      	ldr	r2, [pc, #288]	; (800ecac <NoteSTR+0x13c>)
 800eb8c:	89bb      	ldrh	r3, [r7, #12]
 800eb8e:	8013      	strh	r3, [r2, #0]
 800eb90:	e080      	b.n	800ec94 <NoteSTR+0x124>
 800eb92:	687b      	ldr	r3, [r7, #4]
 800eb94:	1c5a      	adds	r2, r3, #1
 800eb96:	607a      	str	r2, [r7, #4]
 800eb98:	781b      	ldrb	r3, [r3, #0]
 800eb9a:	747b      	strb	r3, [r7, #17]
 800eb9c:	2300      	movs	r3, #0
 800eb9e:	82fb      	strh	r3, [r7, #22]
 800eba0:	e074      	b.n	800ec8c <NoteSTR+0x11c>
 800eba2:	7afb      	ldrb	r3, [r7, #11]
 800eba4:	f003 0310 	and.w	r3, r3, #16
 800eba8:	2b00      	cmp	r3, #0
 800ebaa:	d10e      	bne.n	800ebca <NoteSTR+0x5a>
 800ebac:	7c7b      	ldrb	r3, [r7, #17]
 800ebae:	f1a3 0221 	sub.w	r2, r3, #33	; 0x21
 800ebb2:	4613      	mov	r3, r2
 800ebb4:	005b      	lsls	r3, r3, #1
 800ebb6:	4413      	add	r3, r2
 800ebb8:	005b      	lsls	r3, r3, #1
 800ebba:	461a      	mov	r2, r3
 800ebbc:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800ebc0:	4413      	add	r3, r2
 800ebc2:	4a3b      	ldr	r2, [pc, #236]	; (800ecb0 <NoteSTR+0x140>)
 800ebc4:	5cd3      	ldrb	r3, [r2, r3]
 800ebc6:	827b      	strh	r3, [r7, #18]
 800ebc8:	e00d      	b.n	800ebe6 <NoteSTR+0x76>
 800ebca:	7c7b      	ldrb	r3, [r7, #17]
 800ebcc:	f1a3 0221 	sub.w	r2, r3, #33	; 0x21
 800ebd0:	4613      	mov	r3, r2
 800ebd2:	005b      	lsls	r3, r3, #1
 800ebd4:	4413      	add	r3, r2
 800ebd6:	005b      	lsls	r3, r3, #1
 800ebd8:	461a      	mov	r2, r3
 800ebda:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800ebde:	4413      	add	r3, r2
 800ebe0:	4a34      	ldr	r2, [pc, #208]	; (800ecb4 <NoteSTR+0x144>)
 800ebe2:	5cd3      	ldrb	r3, [r2, r3]
 800ebe4:	827b      	strh	r3, [r7, #18]
 800ebe6:	7afb      	ldrb	r3, [r7, #11]
 800ebe8:	f003 0320 	and.w	r3, r3, #32
 800ebec:	2b00      	cmp	r3, #0
 800ebee:	d00c      	beq.n	800ec0a <NoteSTR+0x9a>
 800ebf0:	8afb      	ldrh	r3, [r7, #22]
 800ebf2:	f003 0301 	and.w	r3, r3, #1
 800ebf6:	b29b      	uxth	r3, r3
 800ebf8:	2b00      	cmp	r3, #0
 800ebfa:	d001      	beq.n	800ec00 <NoteSTR+0x90>
 800ebfc:	4a2e      	ldr	r2, [pc, #184]	; (800ecb8 <NoteSTR+0x148>)
 800ebfe:	e001      	b.n	800ec04 <NoteSTR+0x94>
 800ec00:	f245 5255 	movw	r2, #21845	; 0x5555
 800ec04:	8a7b      	ldrh	r3, [r7, #18]
 800ec06:	4013      	ands	r3, r2
 800ec08:	827b      	strh	r3, [r7, #18]
 800ec0a:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800ec0e:	009b      	lsls	r3, r3, #2
 800ec10:	827b      	strh	r3, [r7, #18]
 800ec12:	2300      	movs	r3, #0
 800ec14:	82bb      	strh	r3, [r7, #20]
 800ec16:	e01f      	b.n	800ec58 <NoteSTR+0xe8>
 800ec18:	8a7b      	ldrh	r3, [r7, #18]
 800ec1a:	f003 0301 	and.w	r3, r3, #1
 800ec1e:	2b00      	cmp	r3, #0
 800ec20:	d00b      	beq.n	800ec3a <NoteSTR+0xca>
 800ec22:	7afb      	ldrb	r3, [r7, #11]
 800ec24:	f003 0301 	and.w	r3, r3, #1
 800ec28:	2b00      	cmp	r3, #0
 800ec2a:	bf0c      	ite	eq
 800ec2c:	2301      	moveq	r3, #1
 800ec2e:	2300      	movne	r3, #0
 800ec30:	b2db      	uxtb	r3, r3
 800ec32:	4618      	mov	r0, r3
 800ec34:	f7ff fcac 	bl	800e590 <NotePixel>
 800ec38:	e006      	b.n	800ec48 <NoteSTR+0xd8>
 800ec3a:	7afb      	ldrb	r3, [r7, #11]
 800ec3c:	f003 0301 	and.w	r3, r3, #1
 800ec40:	b2db      	uxtb	r3, r3
 800ec42:	4618      	mov	r0, r3
 800ec44:	f7ff fca4 	bl	800e590 <NotePixel>
 800ec48:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800ec4c:	105b      	asrs	r3, r3, #1
 800ec4e:	827b      	strh	r3, [r7, #18]
 800ec50:	8abb      	ldrh	r3, [r7, #20]
 800ec52:	3301      	adds	r3, #1
 800ec54:	b29b      	uxth	r3, r3
 800ec56:	82bb      	strh	r3, [r7, #20]
 800ec58:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800ec5c:	2b0d      	cmp	r3, #13
 800ec5e:	dddb      	ble.n	800ec18 <NoteSTR+0xa8>
 800ec60:	4b11      	ldr	r3, [pc, #68]	; (800eca8 <NoteSTR+0x138>)
 800ec62:	f9b3 3000 	ldrsh.w	r3, [r3]
 800ec66:	b29b      	uxth	r3, r3
 800ec68:	3301      	adds	r3, #1
 800ec6a:	b29b      	uxth	r3, r3
 800ec6c:	b21a      	sxth	r2, r3
 800ec6e:	4b0e      	ldr	r3, [pc, #56]	; (800eca8 <NoteSTR+0x138>)
 800ec70:	801a      	strh	r2, [r3, #0]
 800ec72:	4b0e      	ldr	r3, [pc, #56]	; (800ecac <NoteSTR+0x13c>)
 800ec74:	f9b3 3000 	ldrsh.w	r3, [r3]
 800ec78:	b29b      	uxth	r3, r3
 800ec7a:	3b0e      	subs	r3, #14
 800ec7c:	b29b      	uxth	r3, r3
 800ec7e:	b21a      	sxth	r2, r3
 800ec80:	4b0a      	ldr	r3, [pc, #40]	; (800ecac <NoteSTR+0x13c>)
 800ec82:	801a      	strh	r2, [r3, #0]
 800ec84:	8afb      	ldrh	r3, [r7, #22]
 800ec86:	3301      	adds	r3, #1
 800ec88:	b29b      	uxth	r3, r3
 800ec8a:	82fb      	strh	r3, [r7, #22]
 800ec8c:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800ec90:	2b05      	cmp	r3, #5
 800ec92:	dd86      	ble.n	800eba2 <NoteSTR+0x32>
 800ec94:	687b      	ldr	r3, [r7, #4]
 800ec96:	781b      	ldrb	r3, [r3, #0]
 800ec98:	2b00      	cmp	r3, #0
 800ec9a:	f47f af7a 	bne.w	800eb92 <NoteSTR+0x22>
 800ec9e:	bf00      	nop
 800eca0:	bf00      	nop
 800eca2:	3718      	adds	r7, #24
 800eca4:	46bd      	mov	sp, r7
 800eca6:	bd80      	pop	{r7, pc}
 800eca8:	20000006 	.word	0x20000006
 800ecac:	20000008 	.word	0x20000008
 800ecb0:	080016c4 	.word	0x080016c4
 800ecb4:	08001490 	.word	0x08001490
 800ecb8:	ffffaaaa 	.word	0xffffaaaa

0800ecbc <Note_4Point>:
 800ecbc:	b590      	push	{r4, r7, lr}
 800ecbe:	b083      	sub	sp, #12
 800ecc0:	af00      	add	r7, sp, #0
 800ecc2:	4604      	mov	r4, r0
 800ecc4:	4608      	mov	r0, r1
 800ecc6:	4611      	mov	r1, r2
 800ecc8:	461a      	mov	r2, r3
 800ecca:	4623      	mov	r3, r4
 800eccc:	71fb      	strb	r3, [r7, #7]
 800ecce:	4603      	mov	r3, r0
 800ecd0:	80bb      	strh	r3, [r7, #4]
 800ecd2:	460b      	mov	r3, r1
 800ecd4:	807b      	strh	r3, [r7, #2]
 800ecd6:	4613      	mov	r3, r2
 800ecd8:	71bb      	strb	r3, [r7, #6]
 800ecda:	7e3b      	ldrb	r3, [r7, #24]
 800ecdc:	3304      	adds	r3, #4
 800ecde:	763b      	strb	r3, [r7, #24]
 800ece0:	4a2e      	ldr	r2, [pc, #184]	; (800ed9c <Note_4Point+0xe0>)
 800ece2:	88bb      	ldrh	r3, [r7, #4]
 800ece4:	8013      	strh	r3, [r2, #0]
 800ece6:	4a2e      	ldr	r2, [pc, #184]	; (800eda0 <Note_4Point+0xe4>)
 800ece8:	887b      	ldrh	r3, [r7, #2]
 800ecea:	8013      	strh	r3, [r2, #0]
 800ecec:	79fb      	ldrb	r3, [r7, #7]
 800ecee:	f003 0301 	and.w	r3, r3, #1
 800ecf2:	b2db      	uxtb	r3, r3
 800ecf4:	4618      	mov	r0, r3
 800ecf6:	f7ff fc4b 	bl	800e590 <NotePixel>
 800ecfa:	4a28      	ldr	r2, [pc, #160]	; (800ed9c <Note_4Point+0xe0>)
 800ecfc:	88bb      	ldrh	r3, [r7, #4]
 800ecfe:	8013      	strh	r3, [r2, #0]
 800ed00:	7e3b      	ldrb	r3, [r7, #24]
 800ed02:	b29a      	uxth	r2, r3
 800ed04:	887b      	ldrh	r3, [r7, #2]
 800ed06:	4413      	add	r3, r2
 800ed08:	b29b      	uxth	r3, r3
 800ed0a:	3b01      	subs	r3, #1
 800ed0c:	b29b      	uxth	r3, r3
 800ed0e:	b21a      	sxth	r2, r3
 800ed10:	4b23      	ldr	r3, [pc, #140]	; (800eda0 <Note_4Point+0xe4>)
 800ed12:	801a      	strh	r2, [r3, #0]
 800ed14:	79fb      	ldrb	r3, [r7, #7]
 800ed16:	f003 0301 	and.w	r3, r3, #1
 800ed1a:	b2db      	uxtb	r3, r3
 800ed1c:	4618      	mov	r0, r3
 800ed1e:	f7ff fc37 	bl	800e590 <NotePixel>
 800ed22:	79bb      	ldrb	r3, [r7, #6]
 800ed24:	b29b      	uxth	r3, r3
 800ed26:	461a      	mov	r2, r3
 800ed28:	0052      	lsls	r2, r2, #1
 800ed2a:	4413      	add	r3, r2
 800ed2c:	005b      	lsls	r3, r3, #1
 800ed2e:	b29a      	uxth	r2, r3
 800ed30:	88bb      	ldrh	r3, [r7, #4]
 800ed32:	4413      	add	r3, r2
 800ed34:	b29b      	uxth	r3, r3
 800ed36:	3b01      	subs	r3, #1
 800ed38:	b29b      	uxth	r3, r3
 800ed3a:	b21a      	sxth	r2, r3
 800ed3c:	4b17      	ldr	r3, [pc, #92]	; (800ed9c <Note_4Point+0xe0>)
 800ed3e:	801a      	strh	r2, [r3, #0]
 800ed40:	4a17      	ldr	r2, [pc, #92]	; (800eda0 <Note_4Point+0xe4>)
 800ed42:	887b      	ldrh	r3, [r7, #2]
 800ed44:	8013      	strh	r3, [r2, #0]
 800ed46:	79fb      	ldrb	r3, [r7, #7]
 800ed48:	f003 0301 	and.w	r3, r3, #1
 800ed4c:	b2db      	uxtb	r3, r3
 800ed4e:	4618      	mov	r0, r3
 800ed50:	f7ff fc1e 	bl	800e590 <NotePixel>
 800ed54:	79bb      	ldrb	r3, [r7, #6]
 800ed56:	b29b      	uxth	r3, r3
 800ed58:	461a      	mov	r2, r3
 800ed5a:	0052      	lsls	r2, r2, #1
 800ed5c:	4413      	add	r3, r2
 800ed5e:	005b      	lsls	r3, r3, #1
 800ed60:	b29a      	uxth	r2, r3
 800ed62:	88bb      	ldrh	r3, [r7, #4]
 800ed64:	4413      	add	r3, r2
 800ed66:	b29b      	uxth	r3, r3
 800ed68:	3b01      	subs	r3, #1
 800ed6a:	b29b      	uxth	r3, r3
 800ed6c:	b21a      	sxth	r2, r3
 800ed6e:	4b0b      	ldr	r3, [pc, #44]	; (800ed9c <Note_4Point+0xe0>)
 800ed70:	801a      	strh	r2, [r3, #0]
 800ed72:	7e3b      	ldrb	r3, [r7, #24]
 800ed74:	b29a      	uxth	r2, r3
 800ed76:	887b      	ldrh	r3, [r7, #2]
 800ed78:	4413      	add	r3, r2
 800ed7a:	b29b      	uxth	r3, r3
 800ed7c:	3b01      	subs	r3, #1
 800ed7e:	b29b      	uxth	r3, r3
 800ed80:	b21a      	sxth	r2, r3
 800ed82:	4b07      	ldr	r3, [pc, #28]	; (800eda0 <Note_4Point+0xe4>)
 800ed84:	801a      	strh	r2, [r3, #0]
 800ed86:	79fb      	ldrb	r3, [r7, #7]
 800ed88:	f003 0301 	and.w	r3, r3, #1
 800ed8c:	b2db      	uxtb	r3, r3
 800ed8e:	4618      	mov	r0, r3
 800ed90:	f7ff fbfe 	bl	800e590 <NotePixel>
 800ed94:	bf00      	nop
 800ed96:	370c      	adds	r7, #12
 800ed98:	46bd      	mov	sp, r7
 800ed9a:	bd90      	pop	{r4, r7, pc}
 800ed9c:	20000006 	.word	0x20000006
 800eda0:	20000008 	.word	0x20000008

0800eda4 <ExtFlash_SendByte>:

/*******************************************************************************
 SPI_FLASH_SendByte
*******************************************************************************/
char ExtFlash_SendByte(char byte)
{
 800eda4:	b580      	push	{r7, lr}
 800eda6:	b084      	sub	sp, #16
 800eda8:	af00      	add	r7, sp, #0
 800edaa:	4603      	mov	r3, r0
 800edac:	71fb      	strb	r3, [r7, #7]
   char retbyte=0;
 800edae:	2300      	movs	r3, #0
 800edb0:	73fb      	strb	r3, [r7, #15]
	Tout = 0;
 800edb2:	4b1d      	ldr	r3, [pc, #116]	; (800ee28 <ExtFlash_SendByte+0x84>)
 800edb4:	2200      	movs	r2, #0
 800edb6:	601a      	str	r2, [r3, #0]
  while(HAL_SPI_GetState( &hspi2 ) != HAL_SPI_STATE_READY) /*SPI_I2S_GetFlagStatus(SPI2, SPI_I2S_FLAG_TXE) == RESET*/
 800edb8:	e009      	b.n	800edce <ExtFlash_SendByte+0x2a>
  {
    if(Tout++ > TMAX)
 800edba:	4b1b      	ldr	r3, [pc, #108]	; (800ee28 <ExtFlash_SendByte+0x84>)
 800edbc:	681b      	ldr	r3, [r3, #0]
 800edbe:	1c5a      	adds	r2, r3, #1
 800edc0:	4919      	ldr	r1, [pc, #100]	; (800ee28 <ExtFlash_SendByte+0x84>)
 800edc2:	600a      	str	r2, [r1, #0]
 800edc4:	4a19      	ldr	r2, [pc, #100]	; (800ee2c <ExtFlash_SendByte+0x88>)
 800edc6:	4293      	cmp	r3, r2
 800edc8:	d901      	bls.n	800edce <ExtFlash_SendByte+0x2a>
    	return 255;
 800edca:	23ff      	movs	r3, #255	; 0xff
 800edcc:	e027      	b.n	800ee1e <ExtFlash_SendByte+0x7a>
  while(HAL_SPI_GetState( &hspi2 ) != HAL_SPI_STATE_READY) /*SPI_I2S_GetFlagStatus(SPI2, SPI_I2S_FLAG_TXE) == RESET*/
 800edce:	4818      	ldr	r0, [pc, #96]	; (800ee30 <ExtFlash_SendByte+0x8c>)
 800edd0:	f00e f810 	bl	801cdf4 <HAL_SPI_GetState>
 800edd4:	4603      	mov	r3, r0
 800edd6:	2b01      	cmp	r3, #1
 800edd8:	d1ef      	bne.n	800edba <ExtFlash_SendByte+0x16>
  }
  HAL_SPI_Transmit(&hspi2, (unsigned char*)&byte, 1, 1);// timeout 1 ms  SPI_I2S_SendData(SPI2, byte);
 800edda:	1df9      	adds	r1, r7, #7
 800eddc:	2301      	movs	r3, #1
 800edde:	2201      	movs	r2, #1
 800ede0:	4813      	ldr	r0, [pc, #76]	; (800ee30 <ExtFlash_SendByte+0x8c>)
 800ede2:	f00d fb0e 	bl	801c402 <HAL_SPI_Transmit>
  Tout = 0;
 800ede6:	4b10      	ldr	r3, [pc, #64]	; (800ee28 <ExtFlash_SendByte+0x84>)
 800ede8:	2200      	movs	r2, #0
 800edea:	601a      	str	r2, [r3, #0]
  while(HAL_SPI_GetState( &hspi2 ) != HAL_SPI_STATE_READY) //  while(SPI_I2S_GetFlagStatus(SPI2, SPI_I2S_FLAG_RXNE) == RESET)
 800edec:	e009      	b.n	800ee02 <ExtFlash_SendByte+0x5e>
  {
    if(Tout++ > TMAX)
 800edee:	4b0e      	ldr	r3, [pc, #56]	; (800ee28 <ExtFlash_SendByte+0x84>)
 800edf0:	681b      	ldr	r3, [r3, #0]
 800edf2:	1c5a      	adds	r2, r3, #1
 800edf4:	490c      	ldr	r1, [pc, #48]	; (800ee28 <ExtFlash_SendByte+0x84>)
 800edf6:	600a      	str	r2, [r1, #0]
 800edf8:	4a0c      	ldr	r2, [pc, #48]	; (800ee2c <ExtFlash_SendByte+0x88>)
 800edfa:	4293      	cmp	r3, r2
 800edfc:	d901      	bls.n	800ee02 <ExtFlash_SendByte+0x5e>
    	return 255;
 800edfe:	23ff      	movs	r3, #255	; 0xff
 800ee00:	e00d      	b.n	800ee1e <ExtFlash_SendByte+0x7a>
  while(HAL_SPI_GetState( &hspi2 ) != HAL_SPI_STATE_READY) //  while(SPI_I2S_GetFlagStatus(SPI2, SPI_I2S_FLAG_RXNE) == RESET)
 800ee02:	480b      	ldr	r0, [pc, #44]	; (800ee30 <ExtFlash_SendByte+0x8c>)
 800ee04:	f00d fff6 	bl	801cdf4 <HAL_SPI_GetState>
 800ee08:	4603      	mov	r3, r0
 800ee0a:	2b01      	cmp	r3, #1
 800ee0c:	d1ef      	bne.n	800edee <ExtFlash_SendByte+0x4a>
  }
  HAL_SPI_Receive(&hspi2, (unsigned char*)&retbyte, 1, 1); //timeout 1 ms
 800ee0e:	f107 010f 	add.w	r1, r7, #15
 800ee12:	2301      	movs	r3, #1
 800ee14:	2201      	movs	r2, #1
 800ee16:	4806      	ldr	r0, [pc, #24]	; (800ee30 <ExtFlash_SendByte+0x8c>)
 800ee18:	f00d fc2f 	bl	801c67a <HAL_SPI_Receive>
  return retbyte/*SPI_I2S_ReceiveData(SPI2)*/;
 800ee1c:	7bfb      	ldrb	r3, [r7, #15]
}
 800ee1e:	4618      	mov	r0, r3
 800ee20:	3710      	adds	r7, #16
 800ee22:	46bd      	mov	sp, r7
 800ee24:	bd80      	pop	{r7, pc}
 800ee26:	bf00      	nop
 800ee28:	200015d8 	.word	0x200015d8
 800ee2c:	000186a0 	.word	0x000186a0
 800ee30:	2000689c 	.word	0x2000689c

0800ee34 <ExtFlash_WaitForWriteEnd>:

/*******************************************************************************
 SPI_FLASH_WaitForWriteEnd
*******************************************************************************/
void ExtFlash_WaitForWriteEnd(void)
{
 800ee34:	b580      	push	{r7, lr}
 800ee36:	b082      	sub	sp, #8
 800ee38:	af00      	add	r7, sp, #0
  char FLASH_Status = 0;
 800ee3a:	2300      	movs	r3, #0
 800ee3c:	71fb      	strb	r3, [r7, #7]

  HAL_GPIO_WritePin(SS_GPIO_Port, SS_Pin, GPIO_PIN_RESET); //ExtFlash_CS_LOW();
 800ee3e:	2200      	movs	r2, #0
 800ee40:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800ee44:	4812      	ldr	r0, [pc, #72]	; (800ee90 <ExtFlash_WaitForWriteEnd+0x5c>)
 800ee46:	f00a ffd7 	bl	8019df8 <HAL_GPIO_WritePin>
  ExtFlash_SendByte(RDSR);
 800ee4a:	2005      	movs	r0, #5
 800ee4c:	f7ff ffaa 	bl	800eda4 <ExtFlash_SendByte>
  Tout = 0;
 800ee50:	4b10      	ldr	r3, [pc, #64]	; (800ee94 <ExtFlash_WaitForWriteEnd+0x60>)
 800ee52:	2200      	movs	r2, #0
 800ee54:	601a      	str	r2, [r3, #0]
  do
  {
	  FLASH_Status = ExtFlash_SendByte(Dummy_Byte);
 800ee56:	20a5      	movs	r0, #165	; 0xa5
 800ee58:	f7ff ffa4 	bl	800eda4 <ExtFlash_SendByte>
 800ee5c:	4603      	mov	r3, r0
 800ee5e:	71fb      	strb	r3, [r7, #7]
      if(Tout++ > TMAX)
 800ee60:	4b0c      	ldr	r3, [pc, #48]	; (800ee94 <ExtFlash_WaitForWriteEnd+0x60>)
 800ee62:	681b      	ldr	r3, [r3, #0]
 800ee64:	1c5a      	adds	r2, r3, #1
 800ee66:	490b      	ldr	r1, [pc, #44]	; (800ee94 <ExtFlash_WaitForWriteEnd+0x60>)
 800ee68:	600a      	str	r2, [r1, #0]
 800ee6a:	4a0b      	ldr	r2, [pc, #44]	; (800ee98 <ExtFlash_WaitForWriteEnd+0x64>)
 800ee6c:	4293      	cmp	r3, r2
 800ee6e:	d80b      	bhi.n	800ee88 <ExtFlash_WaitForWriteEnd+0x54>
    	  return;
  }
  while((FLASH_Status & WIP_Flag) == SET);              // Write in progress
 800ee70:	79fb      	ldrb	r3, [r7, #7]
 800ee72:	f003 0301 	and.w	r3, r3, #1
 800ee76:	2b00      	cmp	r3, #0
 800ee78:	d1ed      	bne.n	800ee56 <ExtFlash_WaitForWriteEnd+0x22>
  HAL_GPIO_WritePin(SS_GPIO_Port, SS_Pin, GPIO_PIN_SET);
 800ee7a:	2201      	movs	r2, #1
 800ee7c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800ee80:	4803      	ldr	r0, [pc, #12]	; (800ee90 <ExtFlash_WaitForWriteEnd+0x5c>)
 800ee82:	f00a ffb9 	bl	8019df8 <HAL_GPIO_WritePin>
 800ee86:	e000      	b.n	800ee8a <ExtFlash_WaitForWriteEnd+0x56>
    	  return;
 800ee88:	bf00      	nop
}
 800ee8a:	3708      	adds	r7, #8
 800ee8c:	46bd      	mov	sp, r7
 800ee8e:	bd80      	pop	{r7, pc}
 800ee90:	40020400 	.word	0x40020400
 800ee94:	200015d8 	.word	0x200015d8
 800ee98:	000186a0 	.word	0x000186a0

0800ee9c <ExtFlash_PageRD>:

/*******************************************************************************
 SPI_FLASH_BufferRead
*******************************************************************************/
void ExtFlash_PageRD(char* pBuffer, unsigned ReadAddr, short Length)
{
 800ee9c:	b580      	push	{r7, lr}
 800ee9e:	b084      	sub	sp, #16
 800eea0:	af00      	add	r7, sp, #0
 800eea2:	60f8      	str	r0, [r7, #12]
 800eea4:	60b9      	str	r1, [r7, #8]
 800eea6:	4613      	mov	r3, r2
 800eea8:	80fb      	strh	r3, [r7, #6]
  HAL_GPIO_WritePin(SS_GPIO_Port, SS_Pin, GPIO_PIN_SET); //ExtFlash_CS_HIGH();
 800eeaa:	2201      	movs	r2, #1
 800eeac:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800eeb0:	481d      	ldr	r0, [pc, #116]	; (800ef28 <ExtFlash_PageRD+0x8c>)
 800eeb2:	f00a ffa1 	bl	8019df8 <HAL_GPIO_WritePin>
  ExtFlash_WaitForWriteEnd();
 800eeb6:	f7ff ffbd 	bl	800ee34 <ExtFlash_WaitForWriteEnd>
  HAL_GPIO_WritePin(SS_GPIO_Port, SS_Pin, GPIO_PIN_RESET); //ExtFlash_CS_LOW();
 800eeba:	2200      	movs	r2, #0
 800eebc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800eec0:	4819      	ldr	r0, [pc, #100]	; (800ef28 <ExtFlash_PageRD+0x8c>)
 800eec2:	f00a ff99 	bl	8019df8 <HAL_GPIO_WritePin>
  ExtFlash_SendByte(READ);
 800eec6:	2003      	movs	r0, #3
 800eec8:	f7ff ff6c 	bl	800eda4 <ExtFlash_SendByte>
  ExtFlash_SendByte((ReadAddr & 0xFF0000) >> 16);
 800eecc:	68bb      	ldr	r3, [r7, #8]
 800eece:	0c1b      	lsrs	r3, r3, #16
 800eed0:	b2db      	uxtb	r3, r3
 800eed2:	4618      	mov	r0, r3
 800eed4:	f7ff ff66 	bl	800eda4 <ExtFlash_SendByte>
  ExtFlash_SendByte((ReadAddr& 0xFF00) >> 8);
 800eed8:	68bb      	ldr	r3, [r7, #8]
 800eeda:	0a1b      	lsrs	r3, r3, #8
 800eedc:	b2db      	uxtb	r3, r3
 800eede:	4618      	mov	r0, r3
 800eee0:	f7ff ff60 	bl	800eda4 <ExtFlash_SendByte>
  ExtFlash_SendByte(ReadAddr & 0xFF);
 800eee4:	68bb      	ldr	r3, [r7, #8]
 800eee6:	b2db      	uxtb	r3, r3
 800eee8:	4618      	mov	r0, r3
 800eeea:	f7ff ff5b 	bl	800eda4 <ExtFlash_SendByte>

  while(Length--)
 800eeee:	e009      	b.n	800ef04 <ExtFlash_PageRD+0x68>
  { // while there is data to be read
    *pBuffer = (ExtFlash_SendByte(Dummy_Byte));
 800eef0:	20a5      	movs	r0, #165	; 0xa5
 800eef2:	f7ff ff57 	bl	800eda4 <ExtFlash_SendByte>
 800eef6:	4603      	mov	r3, r0
 800eef8:	461a      	mov	r2, r3
 800eefa:	68fb      	ldr	r3, [r7, #12]
 800eefc:	701a      	strb	r2, [r3, #0]
    pBuffer++;
 800eefe:	68fb      	ldr	r3, [r7, #12]
 800ef00:	3301      	adds	r3, #1
 800ef02:	60fb      	str	r3, [r7, #12]
  while(Length--)
 800ef04:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800ef08:	b29a      	uxth	r2, r3
 800ef0a:	3a01      	subs	r2, #1
 800ef0c:	b292      	uxth	r2, r2
 800ef0e:	80fa      	strh	r2, [r7, #6]
 800ef10:	2b00      	cmp	r3, #0
 800ef12:	d1ed      	bne.n	800eef0 <ExtFlash_PageRD+0x54>
  }
  HAL_GPIO_WritePin(SS_GPIO_Port, SS_Pin, GPIO_PIN_SET);
 800ef14:	2201      	movs	r2, #1
 800ef16:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800ef1a:	4803      	ldr	r0, [pc, #12]	; (800ef28 <ExtFlash_PageRD+0x8c>)
 800ef1c:	f00a ff6c 	bl	8019df8 <HAL_GPIO_WritePin>
}
 800ef20:	bf00      	nop
 800ef22:	3710      	adds	r7, #16
 800ef24:	46bd      	mov	sp, r7
 800ef26:	bd80      	pop	{r7, pc}
 800ef28:	40020400 	.word	0x40020400

0800ef2c <ExtFlash_WriteEnable>:

/*******************************************************************************
 SPI_FLASH_WriteEnable
*******************************************************************************/
void ExtFlash_WriteEnable(void)
{
 800ef2c:	b580      	push	{r7, lr}
 800ef2e:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(SS_GPIO_Port, SS_Pin, GPIO_PIN_RESET); //ExtFlash_CS_LOW();
 800ef30:	2200      	movs	r2, #0
 800ef32:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800ef36:	4807      	ldr	r0, [pc, #28]	; (800ef54 <ExtFlash_WriteEnable+0x28>)
 800ef38:	f00a ff5e 	bl	8019df8 <HAL_GPIO_WritePin>
  ExtFlash_SendByte(WREN);
 800ef3c:	2006      	movs	r0, #6
 800ef3e:	f7ff ff31 	bl	800eda4 <ExtFlash_SendByte>
  HAL_GPIO_WritePin(SS_GPIO_Port, SS_Pin, GPIO_PIN_SET); //ExtFlash_CS_HIGH();
 800ef42:	2201      	movs	r2, #1
 800ef44:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800ef48:	4802      	ldr	r0, [pc, #8]	; (800ef54 <ExtFlash_WriteEnable+0x28>)
 800ef4a:	f00a ff55 	bl	8019df8 <HAL_GPIO_WritePin>
}
 800ef4e:	bf00      	nop
 800ef50:	bd80      	pop	{r7, pc}
 800ef52:	bf00      	nop
 800ef54:	40020400 	.word	0x40020400

0800ef58 <ExtFlash_PageProg>:

/*******************************************************************************
 дFLASHҳ(256 Bytes)�� Mode=0: ��0��1���ݸ�д   Mode=1: ������д
*******************************************************************************/
void ExtFlash_PageProg(char* pBuffer, unsigned WriteAddr)
{
 800ef58:	b580      	push	{r7, lr}
 800ef5a:	b084      	sub	sp, #16
 800ef5c:	af00      	add	r7, sp, #0
 800ef5e:	6078      	str	r0, [r7, #4]
 800ef60:	6039      	str	r1, [r7, #0]
  short   Lenght = 256;
 800ef62:	f44f 7380 	mov.w	r3, #256	; 0x100
 800ef66:	81fb      	strh	r3, [r7, #14]

  HAL_GPIO_WritePin(SS_GPIO_Port, SS_Pin, GPIO_PIN_SET); //ExtFlash_CS_HIGH();
 800ef68:	2201      	movs	r2, #1
 800ef6a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800ef6e:	481f      	ldr	r0, [pc, #124]	; (800efec <ExtFlash_PageProg+0x94>)
 800ef70:	f00a ff42 	bl	8019df8 <HAL_GPIO_WritePin>
  ExtFlash_WaitForWriteEnd();
 800ef74:	f7ff ff5e 	bl	800ee34 <ExtFlash_WaitForWriteEnd>
  ExtFlash_WriteEnable();
 800ef78:	f7ff ffd8 	bl	800ef2c <ExtFlash_WriteEnable>
  HAL_GPIO_WritePin(SS_GPIO_Port, SS_Pin, GPIO_PIN_RESET); //ExtFlash_CS_LOW();
 800ef7c:	2200      	movs	r2, #0
 800ef7e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800ef82:	481a      	ldr	r0, [pc, #104]	; (800efec <ExtFlash_PageProg+0x94>)
 800ef84:	f00a ff38 	bl	8019df8 <HAL_GPIO_WritePin>
  ExtFlash_SendByte(PP);
 800ef88:	2002      	movs	r0, #2
 800ef8a:	f7ff ff0b 	bl	800eda4 <ExtFlash_SendByte>
  ExtFlash_SendByte((WriteAddr & 0xFF0000) >> 16);
 800ef8e:	683b      	ldr	r3, [r7, #0]
 800ef90:	0c1b      	lsrs	r3, r3, #16
 800ef92:	b2db      	uxtb	r3, r3
 800ef94:	4618      	mov	r0, r3
 800ef96:	f7ff ff05 	bl	800eda4 <ExtFlash_SendByte>
  ExtFlash_SendByte((WriteAddr & 0xFF00) >> 8);
 800ef9a:	683b      	ldr	r3, [r7, #0]
 800ef9c:	0a1b      	lsrs	r3, r3, #8
 800ef9e:	b2db      	uxtb	r3, r3
 800efa0:	4618      	mov	r0, r3
 800efa2:	f7ff feff 	bl	800eda4 <ExtFlash_SendByte>
  ExtFlash_SendByte(WriteAddr & 0xFF);
 800efa6:	683b      	ldr	r3, [r7, #0]
 800efa8:	b2db      	uxtb	r3, r3
 800efaa:	4618      	mov	r0, r3
 800efac:	f7ff fefa 	bl	800eda4 <ExtFlash_SendByte>
  while(Lenght--) {
 800efb0:	e007      	b.n	800efc2 <ExtFlash_PageProg+0x6a>
    ExtFlash_SendByte((*pBuffer));
 800efb2:	687b      	ldr	r3, [r7, #4]
 800efb4:	781b      	ldrb	r3, [r3, #0]
 800efb6:	4618      	mov	r0, r3
 800efb8:	f7ff fef4 	bl	800eda4 <ExtFlash_SendByte>
    pBuffer++;
 800efbc:	687b      	ldr	r3, [r7, #4]
 800efbe:	3301      	adds	r3, #1
 800efc0:	607b      	str	r3, [r7, #4]
  while(Lenght--) {
 800efc2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800efc6:	b29a      	uxth	r2, r3
 800efc8:	3a01      	subs	r2, #1
 800efca:	b292      	uxth	r2, r2
 800efcc:	81fa      	strh	r2, [r7, #14]
 800efce:	2b00      	cmp	r3, #0
 800efd0:	d1ef      	bne.n	800efb2 <ExtFlash_PageProg+0x5a>
  }
  HAL_GPIO_WritePin(SS_GPIO_Port, SS_Pin, GPIO_PIN_SET); //ExtFlash_CS_HIGH();
 800efd2:	2201      	movs	r2, #1
 800efd4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800efd8:	4804      	ldr	r0, [pc, #16]	; (800efec <ExtFlash_PageProg+0x94>)
 800efda:	f00a ff0d 	bl	8019df8 <HAL_GPIO_WritePin>
  ExtFlash_WaitForWriteEnd();
 800efde:	f7ff ff29 	bl	800ee34 <ExtFlash_WaitForWriteEnd>
}
 800efe2:	bf00      	nop
 800efe4:	3710      	adds	r7, #16
 800efe6:	46bd      	mov	sp, r7
 800efe8:	bd80      	pop	{r7, pc}
 800efea:	bf00      	nop
 800efec:	40020400 	.word	0x40020400

0800eff0 <ExtFLASH_SectorErase>:

/*******************************************************************************
 SPI_FLASH_SectorErase  : Sector Erases the specified FLASH Page.(4k/sector)
*******************************************************************************/
void ExtFLASH_SectorErase(unsigned SectorAddr)
{
 800eff0:	b580      	push	{r7, lr}
 800eff2:	b082      	sub	sp, #8
 800eff4:	af00      	add	r7, sp, #0
 800eff6:	6078      	str	r0, [r7, #4]
    ExtFlash_WriteEnable();
 800eff8:	f7ff ff98 	bl	800ef2c <ExtFlash_WriteEnable>
    HAL_GPIO_WritePin(SS_GPIO_Port, SS_Pin, GPIO_PIN_RESET); //ExtFlash_CS_LOW();
 800effc:	2200      	movs	r2, #0
 800effe:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800f002:	4811      	ldr	r0, [pc, #68]	; (800f048 <ExtFLASH_SectorErase+0x58>)
 800f004:	f00a fef8 	bl	8019df8 <HAL_GPIO_WritePin>
    ExtFlash_SendByte(SE);
 800f008:	2020      	movs	r0, #32
 800f00a:	f7ff fecb 	bl	800eda4 <ExtFlash_SendByte>
    ExtFlash_SendByte((SectorAddr & 0xFF0000) >> 16);   //Send high address byte
 800f00e:	687b      	ldr	r3, [r7, #4]
 800f010:	0c1b      	lsrs	r3, r3, #16
 800f012:	b2db      	uxtb	r3, r3
 800f014:	4618      	mov	r0, r3
 800f016:	f7ff fec5 	bl	800eda4 <ExtFlash_SendByte>
    ExtFlash_SendByte((SectorAddr & 0xFF00) >> 8);      //Send medium address byte
 800f01a:	687b      	ldr	r3, [r7, #4]
 800f01c:	0a1b      	lsrs	r3, r3, #8
 800f01e:	b2db      	uxtb	r3, r3
 800f020:	4618      	mov	r0, r3
 800f022:	f7ff febf 	bl	800eda4 <ExtFlash_SendByte>
    ExtFlash_SendByte(SectorAddr & 0xFF);               //Send low address byte */
 800f026:	687b      	ldr	r3, [r7, #4]
 800f028:	b2db      	uxtb	r3, r3
 800f02a:	4618      	mov	r0, r3
 800f02c:	f7ff feba 	bl	800eda4 <ExtFlash_SendByte>
    HAL_GPIO_WritePin(SS_GPIO_Port, SS_Pin, GPIO_PIN_SET); //ExtFlash_CS_HIGH();
 800f030:	2201      	movs	r2, #1
 800f032:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800f036:	4804      	ldr	r0, [pc, #16]	; (800f048 <ExtFLASH_SectorErase+0x58>)
 800f038:	f00a fede 	bl	8019df8 <HAL_GPIO_WritePin>
    ExtFlash_WaitForWriteEnd();                         // Wait the end of Flash writing
 800f03c:	f7ff fefa 	bl	800ee34 <ExtFlash_WaitForWriteEnd>
}
 800f040:	bf00      	nop
 800f042:	3708      	adds	r7, #8
 800f044:	46bd      	mov	sp, r7
 800f046:	bd80      	pop	{r7, pc}
 800f048:	40020400 	.word	0x40020400

0800f04c <ExtFlash_PageWR>:

void ExtFlash_PageWR(char* pBuffer, unsigned WriteAddr)
{
 800f04c:	b580      	push	{r7, lr}
 800f04e:	b0c8      	sub	sp, #288	; 0x120
 800f050:	af00      	add	r7, sp, #0
 800f052:	1d3b      	adds	r3, r7, #4
 800f054:	6018      	str	r0, [r3, #0]
 800f056:	463b      	mov	r3, r7
 800f058:	6019      	str	r1, [r3, #0]
  unsigned addr,i,j;
  char* ptr;
  char  page=0,flag=0;
 800f05a:	2300      	movs	r3, #0
 800f05c:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 800f060:	2300      	movs	r3, #0
 800f062:	f887 310e 	strb.w	r3, [r7, #270]	; 0x10e
  char  buffer[256];

  flag=0;
 800f066:	2300      	movs	r3, #0
 800f068:	f887 310e 	strb.w	r3, [r7, #270]	; 0x10e
    addr=WriteAddr & 0xFFF000;
 800f06c:	463b      	mov	r3, r7
 800f06e:	681a      	ldr	r2, [r3, #0]
 800f070:	4b3b      	ldr	r3, [pc, #236]	; (800f160 <ExtFlash_PageWR+0x114>)
 800f072:	4013      	ands	r3, r2
 800f074:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
    page=16;
 800f078:	2310      	movs	r3, #16
 800f07a:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
  while(page>0)
 800f07e:	e02e      	b.n	800f0de <ExtFlash_PageWR+0x92>
  {
    ExtFlash_PageRD((char*)&buffer,addr, 256);
 800f080:	f107 030c 	add.w	r3, r7, #12
 800f084:	f44f 7280 	mov.w	r2, #256	; 0x100
 800f088:	f8d7 111c 	ldr.w	r1, [r7, #284]	; 0x11c
 800f08c:	4618      	mov	r0, r3
 800f08e:	f7ff ff05 	bl	800ee9c <ExtFlash_PageRD>
    for(j=0;j<255;j++){
 800f092:	2300      	movs	r3, #0
 800f094:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 800f098:	e012      	b.n	800f0c0 <ExtFlash_PageWR+0x74>
      if(buffer[j++]!=0xff){
 800f09a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f09e:	1c5a      	adds	r2, r3, #1
 800f0a0:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
 800f0a4:	f107 020c 	add.w	r2, r7, #12
 800f0a8:	5cd3      	ldrb	r3, [r2, r3]
 800f0aa:	2bff      	cmp	r3, #255	; 0xff
 800f0ac:	d003      	beq.n	800f0b6 <ExtFlash_PageWR+0x6a>
        flag=1;
 800f0ae:	2301      	movs	r3, #1
 800f0b0:	f887 310e 	strb.w	r3, [r7, #270]	; 0x10e
        break;
 800f0b4:	e008      	b.n	800f0c8 <ExtFlash_PageWR+0x7c>
    for(j=0;j<255;j++){
 800f0b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f0ba:	3301      	adds	r3, #1
 800f0bc:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 800f0c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f0c4:	2bfe      	cmp	r3, #254	; 0xfe
 800f0c6:	d9e8      	bls.n	800f09a <ExtFlash_PageWR+0x4e>
      }
    }
    addr+=256;
 800f0c8:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800f0cc:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800f0d0:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
    page--;
 800f0d4:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 800f0d8:	3b01      	subs	r3, #1
 800f0da:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
  while(page>0)
 800f0de:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 800f0e2:	2b00      	cmp	r3, #0
 800f0e4:	d1cc      	bne.n	800f080 <ExtFlash_PageWR+0x34>
  }
    page=16;
 800f0e6:	2310      	movs	r3, #16
 800f0e8:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
    addr=WriteAddr & 0xFFF000;
 800f0ec:	463b      	mov	r3, r7
 800f0ee:	681a      	ldr	r2, [r3, #0]
 800f0f0:	4b1b      	ldr	r3, [pc, #108]	; (800f160 <ExtFlash_PageWR+0x114>)
 800f0f2:	4013      	ands	r3, r2
 800f0f4:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
    if(flag==1)ExtFLASH_SectorErase(addr);
 800f0f8:	f897 310e 	ldrb.w	r3, [r7, #270]	; 0x10e
 800f0fc:	2b01      	cmp	r3, #1
 800f0fe:	d103      	bne.n	800f108 <ExtFlash_PageWR+0xbc>
 800f100:	f8d7 011c 	ldr.w	r0, [r7, #284]	; 0x11c
 800f104:	f7ff ff74 	bl	800eff0 <ExtFLASH_SectorErase>
  ptr=pBuffer;
 800f108:	1d3b      	adds	r3, r7, #4
 800f10a:	681b      	ldr	r3, [r3, #0]
 800f10c:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  for(i=0;i<page;i++){
 800f110:	2300      	movs	r3, #0
 800f112:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 800f116:	e016      	b.n	800f146 <ExtFlash_PageWR+0xfa>
    ExtFlash_PageProg(ptr, addr);
 800f118:	f8d7 111c 	ldr.w	r1, [r7, #284]	; 0x11c
 800f11c:	f8d7 0110 	ldr.w	r0, [r7, #272]	; 0x110
 800f120:	f7ff ff1a 	bl	800ef58 <ExtFlash_PageProg>
    addr+=256;
 800f124:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800f128:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800f12c:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
    ptr+=256;
 800f130:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800f134:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800f138:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  for(i=0;i<page;i++){
 800f13c:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800f140:	3301      	adds	r3, #1
 800f142:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 800f146:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 800f14a:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 800f14e:	429a      	cmp	r2, r3
 800f150:	d3e2      	bcc.n	800f118 <ExtFlash_PageWR+0xcc>
  }
}
 800f152:	bf00      	nop
 800f154:	bf00      	nop
 800f156:	f507 7790 	add.w	r7, r7, #288	; 0x120
 800f15a:	46bd      	mov	sp, r7
 800f15c:	bd80      	pop	{r7, pc}
 800f15e:	bf00      	nop
 800f160:	00fff000 	.word	0x00fff000

0800f164 <ReadDiskData>:
 800f164:	b580      	push	{r7, lr}
 800f166:	b086      	sub	sp, #24
 800f168:	af00      	add	r7, sp, #0
 800f16a:	60f8      	str	r0, [r7, #12]
 800f16c:	60b9      	str	r1, [r7, #8]
 800f16e:	4613      	mov	r3, r2
 800f170:	80fb      	strh	r3, [r7, #6]
 800f172:	2300      	movs	r3, #0
 800f174:	75fb      	strb	r3, [r7, #23]
 800f176:	4b0d      	ldr	r3, [pc, #52]	; (800f1ac <ReadDiskData+0x48>)
 800f178:	2200      	movs	r2, #0
 800f17a:	701a      	strb	r2, [r3, #0]
 800f17c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800f180:	461a      	mov	r2, r3
 800f182:	68b9      	ldr	r1, [r7, #8]
 800f184:	68f8      	ldr	r0, [r7, #12]
 800f186:	f7ff fe89 	bl	800ee9c <ExtFlash_PageRD>
 800f18a:	7dfb      	ldrb	r3, [r7, #23]
 800f18c:	1c5a      	adds	r2, r3, #1
 800f18e:	75fa      	strb	r2, [r7, #23]
 800f190:	2b06      	cmp	r3, #6
 800f192:	d901      	bls.n	800f198 <ReadDiskData+0x34>
 800f194:	2301      	movs	r3, #1
 800f196:	e004      	b.n	800f1a2 <ReadDiskData+0x3e>
 800f198:	4b04      	ldr	r3, [pc, #16]	; (800f1ac <ReadDiskData+0x48>)
 800f19a:	781b      	ldrb	r3, [r3, #0]
 800f19c:	2b00      	cmp	r3, #0
 800f19e:	d1ea      	bne.n	800f176 <ReadDiskData+0x12>
 800f1a0:	2300      	movs	r3, #0
 800f1a2:	4618      	mov	r0, r3
 800f1a4:	3718      	adds	r7, #24
 800f1a6:	46bd      	mov	sp, r7
 800f1a8:	bd80      	pop	{r7, pc}
 800f1aa:	bf00      	nop
 800f1ac:	20000797 	.word	0x20000797

0800f1b0 <OpenFileRd>:
 800f1b0:	b580      	push	{r7, lr}
 800f1b2:	b086      	sub	sp, #24
 800f1b4:	af00      	add	r7, sp, #0
 800f1b6:	60f8      	str	r0, [r7, #12]
 800f1b8:	60b9      	str	r1, [r7, #8]
 800f1ba:	607a      	str	r2, [r7, #4]
 800f1bc:	603b      	str	r3, [r7, #0]
 800f1be:	687b      	ldr	r3, [r7, #4]
 800f1c0:	2200      	movs	r2, #0
 800f1c2:	801a      	strh	r2, [r3, #0]
 800f1c4:	4b35      	ldr	r3, [pc, #212]	; (800f29c <OpenFileRd+0xec>)
 800f1c6:	689a      	ldr	r2, [r3, #8]
 800f1c8:	683b      	ldr	r3, [r7, #0]
 800f1ca:	601a      	str	r2, [r3, #0]
 800f1cc:	e05b      	b.n	800f286 <OpenFileRd+0xd6>
 800f1ce:	683b      	ldr	r3, [r7, #0]
 800f1d0:	681b      	ldr	r3, [r3, #0]
 800f1d2:	4a32      	ldr	r2, [pc, #200]	; (800f29c <OpenFileRd+0xec>)
 800f1d4:	6952      	ldr	r2, [r2, #20]
 800f1d6:	b212      	sxth	r2, r2
 800f1d8:	4619      	mov	r1, r3
 800f1da:	68f8      	ldr	r0, [r7, #12]
 800f1dc:	f7ff ffc2 	bl	800f164 <ReadDiskData>
 800f1e0:	4603      	mov	r3, r0
 800f1e2:	2b00      	cmp	r3, #0
 800f1e4:	d001      	beq.n	800f1ea <OpenFileRd+0x3a>
 800f1e6:	2301      	movs	r3, #1
 800f1e8:	e054      	b.n	800f294 <OpenFileRd+0xe4>
 800f1ea:	2300      	movs	r3, #0
 800f1ec:	82bb      	strh	r3, [r7, #20]
 800f1ee:	e044      	b.n	800f27a <OpenFileRd+0xca>
 800f1f0:	2300      	movs	r3, #0
 800f1f2:	82fb      	strh	r3, [r7, #22]
 800f1f4:	e031      	b.n	800f25a <OpenFileRd+0xaa>
 800f1f6:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 800f1fa:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800f1fe:	4413      	add	r3, r2
 800f200:	461a      	mov	r2, r3
 800f202:	68fb      	ldr	r3, [r7, #12]
 800f204:	4413      	add	r3, r2
 800f206:	781b      	ldrb	r3, [r3, #0]
 800f208:	2b00      	cmp	r3, #0
 800f20a:	d01e      	beq.n	800f24a <OpenFileRd+0x9a>
 800f20c:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 800f210:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800f214:	4413      	add	r3, r2
 800f216:	461a      	mov	r2, r3
 800f218:	68fb      	ldr	r3, [r7, #12]
 800f21a:	4413      	add	r3, r2
 800f21c:	781a      	ldrb	r2, [r3, #0]
 800f21e:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800f222:	68b9      	ldr	r1, [r7, #8]
 800f224:	440b      	add	r3, r1
 800f226:	781b      	ldrb	r3, [r3, #0]
 800f228:	429a      	cmp	r2, r3
 800f22a:	d11b      	bne.n	800f264 <OpenFileRd+0xb4>
 800f22c:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800f230:	2b0a      	cmp	r3, #10
 800f232:	d10c      	bne.n	800f24e <OpenFileRd+0x9e>
 800f234:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800f238:	331a      	adds	r3, #26
 800f23a:	68fa      	ldr	r2, [r7, #12]
 800f23c:	4413      	add	r3, r2
 800f23e:	f9b3 2000 	ldrsh.w	r2, [r3]
 800f242:	687b      	ldr	r3, [r7, #4]
 800f244:	801a      	strh	r2, [r3, #0]
 800f246:	2300      	movs	r3, #0
 800f248:	e024      	b.n	800f294 <OpenFileRd+0xe4>
 800f24a:	2304      	movs	r3, #4
 800f24c:	e022      	b.n	800f294 <OpenFileRd+0xe4>
 800f24e:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800f252:	b29b      	uxth	r3, r3
 800f254:	3301      	adds	r3, #1
 800f256:	b29b      	uxth	r3, r3
 800f258:	82fb      	strh	r3, [r7, #22]
 800f25a:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800f25e:	2b0a      	cmp	r3, #10
 800f260:	ddc9      	ble.n	800f1f6 <OpenFileRd+0x46>
 800f262:	e000      	b.n	800f266 <OpenFileRd+0xb6>
 800f264:	bf00      	nop
 800f266:	683b      	ldr	r3, [r7, #0]
 800f268:	681b      	ldr	r3, [r3, #0]
 800f26a:	f103 0220 	add.w	r2, r3, #32
 800f26e:	683b      	ldr	r3, [r7, #0]
 800f270:	601a      	str	r2, [r3, #0]
 800f272:	8abb      	ldrh	r3, [r7, #20]
 800f274:	3320      	adds	r3, #32
 800f276:	b29b      	uxth	r3, r3
 800f278:	82bb      	strh	r3, [r7, #20]
 800f27a:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 800f27e:	4b07      	ldr	r3, [pc, #28]	; (800f29c <OpenFileRd+0xec>)
 800f280:	695b      	ldr	r3, [r3, #20]
 800f282:	429a      	cmp	r2, r3
 800f284:	d3b4      	bcc.n	800f1f0 <OpenFileRd+0x40>
 800f286:	683b      	ldr	r3, [r7, #0]
 800f288:	681a      	ldr	r2, [r3, #0]
 800f28a:	4b04      	ldr	r3, [pc, #16]	; (800f29c <OpenFileRd+0xec>)
 800f28c:	68db      	ldr	r3, [r3, #12]
 800f28e:	429a      	cmp	r2, r3
 800f290:	d39d      	bcc.n	800f1ce <OpenFileRd+0x1e>
 800f292:	2303      	movs	r3, #3
 800f294:	4618      	mov	r0, r3
 800f296:	3718      	adds	r7, #24
 800f298:	46bd      	mov	sp, r7
 800f29a:	bd80      	pop	{r7, pc}
 800f29c:	20000198 	.word	0x20000198

0800f2a0 <ProgDiskPage>:
 800f2a0:	b580      	push	{r7, lr}
 800f2a2:	b084      	sub	sp, #16
 800f2a4:	af00      	add	r7, sp, #0
 800f2a6:	6078      	str	r0, [r7, #4]
 800f2a8:	6039      	str	r1, [r7, #0]
 800f2aa:	2300      	movs	r3, #0
 800f2ac:	73fb      	strb	r3, [r7, #15]
 800f2ae:	4b0c      	ldr	r3, [pc, #48]	; (800f2e0 <ProgDiskPage+0x40>)
 800f2b0:	2200      	movs	r2, #0
 800f2b2:	701a      	strb	r2, [r3, #0]
 800f2b4:	683b      	ldr	r3, [r7, #0]
 800f2b6:	4619      	mov	r1, r3
 800f2b8:	6878      	ldr	r0, [r7, #4]
 800f2ba:	f7ff fec7 	bl	800f04c <ExtFlash_PageWR>
 800f2be:	7bfb      	ldrb	r3, [r7, #15]
 800f2c0:	1c5a      	adds	r2, r3, #1
 800f2c2:	73fa      	strb	r2, [r7, #15]
 800f2c4:	2b06      	cmp	r3, #6
 800f2c6:	d901      	bls.n	800f2cc <ProgDiskPage+0x2c>
 800f2c8:	2301      	movs	r3, #1
 800f2ca:	e004      	b.n	800f2d6 <ProgDiskPage+0x36>
 800f2cc:	4b04      	ldr	r3, [pc, #16]	; (800f2e0 <ProgDiskPage+0x40>)
 800f2ce:	781b      	ldrb	r3, [r3, #0]
 800f2d0:	2b00      	cmp	r3, #0
 800f2d2:	d1ec      	bne.n	800f2ae <ProgDiskPage+0xe>
 800f2d4:	2300      	movs	r3, #0
 800f2d6:	4618      	mov	r0, r3
 800f2d8:	3710      	adds	r7, #16
 800f2da:	46bd      	mov	sp, r7
 800f2dc:	bd80      	pop	{r7, pc}
 800f2de:	bf00      	nop
 800f2e0:	20000797 	.word	0x20000797

0800f2e4 <SeekBlank>:
 800f2e4:	b580      	push	{r7, lr}
 800f2e6:	b084      	sub	sp, #16
 800f2e8:	af00      	add	r7, sp, #0
 800f2ea:	6078      	str	r0, [r7, #4]
 800f2ec:	6039      	str	r1, [r7, #0]
 800f2ee:	2301      	movs	r3, #1
 800f2f0:	73fb      	strb	r3, [r7, #15]
 800f2f2:	683b      	ldr	r3, [r7, #0]
 800f2f4:	3302      	adds	r3, #2
 800f2f6:	683a      	ldr	r2, [r7, #0]
 800f2f8:	f9b2 2000 	ldrsh.w	r2, [r2]
 800f2fc:	801a      	strh	r2, [r3, #0]
 800f2fe:	683b      	ldr	r3, [r7, #0]
 800f300:	2200      	movs	r2, #0
 800f302:	801a      	strh	r2, [r3, #0]
 800f304:	e05b      	b.n	800f3be <SeekBlank+0xda>
 800f306:	4b34      	ldr	r3, [pc, #208]	; (800f3d8 <SeekBlank+0xf4>)
 800f308:	681b      	ldr	r3, [r3, #0]
 800f30a:	683a      	ldr	r2, [r7, #0]
 800f30c:	f9b2 2000 	ldrsh.w	r2, [r2]
 800f310:	441a      	add	r2, r3
 800f312:	683b      	ldr	r3, [r7, #0]
 800f314:	f9b3 3000 	ldrsh.w	r3, [r3]
 800f318:	0fd9      	lsrs	r1, r3, #31
 800f31a:	440b      	add	r3, r1
 800f31c:	105b      	asrs	r3, r3, #1
 800f31e:	b21b      	sxth	r3, r3
 800f320:	18d1      	adds	r1, r2, r3
 800f322:	f107 0308 	add.w	r3, r7, #8
 800f326:	2202      	movs	r2, #2
 800f328:	4618      	mov	r0, r3
 800f32a:	f7ff ff1b 	bl	800f164 <ReadDiskData>
 800f32e:	4603      	mov	r3, r0
 800f330:	2b00      	cmp	r3, #0
 800f332:	d001      	beq.n	800f338 <SeekBlank+0x54>
 800f334:	2301      	movs	r3, #1
 800f336:	e04a      	b.n	800f3ce <SeekBlank+0xea>
 800f338:	683b      	ldr	r3, [r7, #0]
 800f33a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800f33e:	b29b      	uxth	r3, r3
 800f340:	f003 0301 	and.w	r3, r3, #1
 800f344:	2b00      	cmp	r3, #0
 800f346:	d006      	beq.n	800f356 <SeekBlank+0x72>
 800f348:	f107 0308 	add.w	r3, r7, #8
 800f34c:	f9b3 3000 	ldrsh.w	r3, [r3]
 800f350:	111b      	asrs	r3, r3, #4
 800f352:	b21b      	sxth	r3, r3
 800f354:	e006      	b.n	800f364 <SeekBlank+0x80>
 800f356:	f107 0308 	add.w	r3, r7, #8
 800f35a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800f35e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800f362:	b21b      	sxth	r3, r3
 800f364:	81bb      	strh	r3, [r7, #12]
 800f366:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800f36a:	2b00      	cmp	r3, #0
 800f36c:	d10f      	bne.n	800f38e <SeekBlank+0xaa>
 800f36e:	7bfb      	ldrb	r3, [r7, #15]
 800f370:	2b00      	cmp	r3, #0
 800f372:	d10c      	bne.n	800f38e <SeekBlank+0xaa>
 800f374:	683b      	ldr	r3, [r7, #0]
 800f376:	f9b3 2000 	ldrsh.w	r2, [r3]
 800f37a:	683b      	ldr	r3, [r7, #0]
 800f37c:	3302      	adds	r3, #2
 800f37e:	f9b3 3000 	ldrsh.w	r3, [r3]
 800f382:	429a      	cmp	r2, r3
 800f384:	d003      	beq.n	800f38e <SeekBlank+0xaa>
 800f386:	2301      	movs	r3, #1
 800f388:	73fb      	strb	r3, [r7, #15]
 800f38a:	2300      	movs	r3, #0
 800f38c:	e01f      	b.n	800f3ce <SeekBlank+0xea>
 800f38e:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800f392:	2b00      	cmp	r3, #0
 800f394:	d10a      	bne.n	800f3ac <SeekBlank+0xc8>
 800f396:	7bfb      	ldrb	r3, [r7, #15]
 800f398:	2b01      	cmp	r3, #1
 800f39a:	d107      	bne.n	800f3ac <SeekBlank+0xc8>
 800f39c:	683b      	ldr	r3, [r7, #0]
 800f39e:	3304      	adds	r3, #4
 800f3a0:	683a      	ldr	r2, [r7, #0]
 800f3a2:	f9b2 2000 	ldrsh.w	r2, [r2]
 800f3a6:	801a      	strh	r2, [r3, #0]
 800f3a8:	2300      	movs	r3, #0
 800f3aa:	73fb      	strb	r3, [r7, #15]
 800f3ac:	683b      	ldr	r3, [r7, #0]
 800f3ae:	f9b3 3000 	ldrsh.w	r3, [r3]
 800f3b2:	b29b      	uxth	r3, r3
 800f3b4:	3301      	adds	r3, #1
 800f3b6:	b29b      	uxth	r3, r3
 800f3b8:	b21a      	sxth	r2, r3
 800f3ba:	683b      	ldr	r3, [r7, #0]
 800f3bc:	801a      	strh	r2, [r3, #0]
 800f3be:	683b      	ldr	r3, [r7, #0]
 800f3c0:	f9b3 3000 	ldrsh.w	r3, [r3]
 800f3c4:	f640 72fe 	movw	r2, #4094	; 0xffe
 800f3c8:	4293      	cmp	r3, r2
 800f3ca:	dd9c      	ble.n	800f306 <SeekBlank+0x22>
 800f3cc:	2300      	movs	r3, #0
 800f3ce:	4618      	mov	r0, r3
 800f3d0:	3710      	adds	r7, #16
 800f3d2:	46bd      	mov	sp, r7
 800f3d4:	bd80      	pop	{r7, pc}
 800f3d6:	bf00      	nop
 800f3d8:	20000198 	.word	0x20000198

0800f3dc <SetCluster>:
 800f3dc:	b580      	push	{r7, lr}
 800f3de:	b086      	sub	sp, #24
 800f3e0:	af00      	add	r7, sp, #0
 800f3e2:	6078      	str	r0, [r7, #4]
 800f3e4:	6039      	str	r1, [r7, #0]
 800f3e6:	683b      	ldr	r3, [r7, #0]
 800f3e8:	885b      	ldrh	r3, [r3, #2]
 800f3ea:	82fb      	strh	r3, [r7, #22]
 800f3ec:	683b      	ldr	r3, [r7, #0]
 800f3ee:	881b      	ldrh	r3, [r3, #0]
 800f3f0:	82bb      	strh	r3, [r7, #20]
 800f3f2:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800f3f6:	0fda      	lsrs	r2, r3, #31
 800f3f8:	4413      	add	r3, r2
 800f3fa:	105b      	asrs	r3, r3, #1
 800f3fc:	b21b      	sxth	r3, r3
 800f3fe:	b29a      	uxth	r2, r3
 800f400:	8afb      	ldrh	r3, [r7, #22]
 800f402:	4413      	add	r3, r2
 800f404:	b29b      	uxth	r3, r3
 800f406:	827b      	strh	r3, [r7, #18]
 800f408:	4b36      	ldr	r3, [pc, #216]	; (800f4e4 <SetCluster+0x108>)
 800f40a:	681a      	ldr	r2, [r3, #0]
 800f40c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800f410:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 800f414:	4413      	add	r3, r2
 800f416:	60fb      	str	r3, [r7, #12]
 800f418:	8a7b      	ldrh	r3, [r7, #18]
 800f41a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800f41e:	827b      	strh	r3, [r7, #18]
 800f420:	68fb      	ldr	r3, [r7, #12]
 800f422:	4a30      	ldr	r2, [pc, #192]	; (800f4e4 <SetCluster+0x108>)
 800f424:	6952      	ldr	r2, [r2, #20]
 800f426:	b212      	sxth	r2, r2
 800f428:	4619      	mov	r1, r3
 800f42a:	6878      	ldr	r0, [r7, #4]
 800f42c:	f7ff fe9a 	bl	800f164 <ReadDiskData>
 800f430:	4603      	mov	r3, r0
 800f432:	2b00      	cmp	r3, #0
 800f434:	d001      	beq.n	800f43a <SetCluster+0x5e>
 800f436:	2301      	movs	r3, #1
 800f438:	e04f      	b.n	800f4da <SetCluster+0xfe>
 800f43a:	8afb      	ldrh	r3, [r7, #22]
 800f43c:	f003 0301 	and.w	r3, r3, #1
 800f440:	2b00      	cmp	r3, #0
 800f442:	d01e      	beq.n	800f482 <SetCluster+0xa6>
 800f444:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800f448:	687a      	ldr	r2, [r7, #4]
 800f44a:	4413      	add	r3, r2
 800f44c:	781b      	ldrb	r3, [r3, #0]
 800f44e:	f003 030f 	and.w	r3, r3, #15
 800f452:	b2d9      	uxtb	r1, r3
 800f454:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800f458:	011b      	lsls	r3, r3, #4
 800f45a:	b2da      	uxtb	r2, r3
 800f45c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800f460:	6878      	ldr	r0, [r7, #4]
 800f462:	4403      	add	r3, r0
 800f464:	440a      	add	r2, r1
 800f466:	b2d2      	uxtb	r2, r2
 800f468:	701a      	strb	r2, [r3, #0]
 800f46a:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800f46e:	111b      	asrs	r3, r3, #4
 800f470:	b219      	sxth	r1, r3
 800f472:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800f476:	3301      	adds	r3, #1
 800f478:	687a      	ldr	r2, [r7, #4]
 800f47a:	4413      	add	r3, r2
 800f47c:	b2ca      	uxtb	r2, r1
 800f47e:	701a      	strb	r2, [r3, #0]
 800f480:	e021      	b.n	800f4c6 <SetCluster+0xea>
 800f482:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800f486:	687a      	ldr	r2, [r7, #4]
 800f488:	4413      	add	r3, r2
 800f48a:	8aba      	ldrh	r2, [r7, #20]
 800f48c:	b2d2      	uxtb	r2, r2
 800f48e:	701a      	strb	r2, [r3, #0]
 800f490:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800f494:	3301      	adds	r3, #1
 800f496:	687a      	ldr	r2, [r7, #4]
 800f498:	4413      	add	r3, r2
 800f49a:	781b      	ldrb	r3, [r3, #0]
 800f49c:	b25b      	sxtb	r3, r3
 800f49e:	f023 030f 	bic.w	r3, r3, #15
 800f4a2:	b25a      	sxtb	r2, r3
 800f4a4:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800f4a8:	121b      	asrs	r3, r3, #8
 800f4aa:	b21b      	sxth	r3, r3
 800f4ac:	b25b      	sxtb	r3, r3
 800f4ae:	f003 030f 	and.w	r3, r3, #15
 800f4b2:	b25b      	sxtb	r3, r3
 800f4b4:	4313      	orrs	r3, r2
 800f4b6:	b259      	sxtb	r1, r3
 800f4b8:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800f4bc:	3301      	adds	r3, #1
 800f4be:	687a      	ldr	r2, [r7, #4]
 800f4c0:	4413      	add	r3, r2
 800f4c2:	b2ca      	uxtb	r2, r1
 800f4c4:	701a      	strb	r2, [r3, #0]
 800f4c6:	68f9      	ldr	r1, [r7, #12]
 800f4c8:	6878      	ldr	r0, [r7, #4]
 800f4ca:	f7ff fee9 	bl	800f2a0 <ProgDiskPage>
 800f4ce:	4603      	mov	r3, r0
 800f4d0:	2b00      	cmp	r3, #0
 800f4d2:	d001      	beq.n	800f4d8 <SetCluster+0xfc>
 800f4d4:	2301      	movs	r3, #1
 800f4d6:	e000      	b.n	800f4da <SetCluster+0xfe>
 800f4d8:	2300      	movs	r3, #0
 800f4da:	4618      	mov	r0, r3
 800f4dc:	3718      	adds	r7, #24
 800f4de:	46bd      	mov	sp, r7
 800f4e0:	bd80      	pop	{r7, pc}
 800f4e2:	bf00      	nop
 800f4e4:	20000198 	.word	0x20000198

0800f4e8 <NextCluster>:
 800f4e8:	b580      	push	{r7, lr}
 800f4ea:	b084      	sub	sp, #16
 800f4ec:	af00      	add	r7, sp, #0
 800f4ee:	6078      	str	r0, [r7, #4]
 800f4f0:	4b27      	ldr	r3, [pc, #156]	; (800f590 <NextCluster+0xa8>)
 800f4f2:	681a      	ldr	r2, [r3, #0]
 800f4f4:	687b      	ldr	r3, [r7, #4]
 800f4f6:	f9b3 3000 	ldrsh.w	r3, [r3]
 800f4fa:	4618      	mov	r0, r3
 800f4fc:	687b      	ldr	r3, [r7, #4]
 800f4fe:	f9b3 3000 	ldrsh.w	r3, [r3]
 800f502:	0fd9      	lsrs	r1, r3, #31
 800f504:	440b      	add	r3, r1
 800f506:	105b      	asrs	r3, r3, #1
 800f508:	b21b      	sxth	r3, r3
 800f50a:	4403      	add	r3, r0
 800f50c:	4413      	add	r3, r2
 800f50e:	60fb      	str	r3, [r7, #12]
 800f510:	687b      	ldr	r3, [r7, #4]
 800f512:	3302      	adds	r3, #2
 800f514:	687a      	ldr	r2, [r7, #4]
 800f516:	f9b2 2000 	ldrsh.w	r2, [r2]
 800f51a:	801a      	strh	r2, [r3, #0]
 800f51c:	687b      	ldr	r3, [r7, #4]
 800f51e:	2200      	movs	r2, #0
 800f520:	801a      	strh	r2, [r3, #0]
 800f522:	687b      	ldr	r3, [r7, #4]
 800f524:	3302      	adds	r3, #2
 800f526:	f9b3 3000 	ldrsh.w	r3, [r3]
 800f52a:	461a      	mov	r2, r3
 800f52c:	4b18      	ldr	r3, [pc, #96]	; (800f590 <NextCluster+0xa8>)
 800f52e:	699b      	ldr	r3, [r3, #24]
 800f530:	429a      	cmp	r2, r3
 800f532:	d205      	bcs.n	800f540 <NextCluster+0x58>
 800f534:	687b      	ldr	r3, [r7, #4]
 800f536:	3302      	adds	r3, #2
 800f538:	f9b3 3000 	ldrsh.w	r3, [r3]
 800f53c:	2b01      	cmp	r3, #1
 800f53e:	dc01      	bgt.n	800f544 <NextCluster+0x5c>
 800f540:	2301      	movs	r3, #1
 800f542:	e021      	b.n	800f588 <NextCluster+0xa0>
 800f544:	68f9      	ldr	r1, [r7, #12]
 800f546:	f107 030a 	add.w	r3, r7, #10
 800f54a:	2202      	movs	r2, #2
 800f54c:	4618      	mov	r0, r3
 800f54e:	f7ff fe09 	bl	800f164 <ReadDiskData>
 800f552:	4603      	mov	r3, r0
 800f554:	2b00      	cmp	r3, #0
 800f556:	d001      	beq.n	800f55c <NextCluster+0x74>
 800f558:	2301      	movs	r3, #1
 800f55a:	e015      	b.n	800f588 <NextCluster+0xa0>
 800f55c:	687b      	ldr	r3, [r7, #4]
 800f55e:	3302      	adds	r3, #2
 800f560:	f9b3 3000 	ldrsh.w	r3, [r3]
 800f564:	b29b      	uxth	r3, r3
 800f566:	f003 0301 	and.w	r3, r3, #1
 800f56a:	2b00      	cmp	r3, #0
 800f56c:	d004      	beq.n	800f578 <NextCluster+0x90>
 800f56e:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800f572:	111b      	asrs	r3, r3, #4
 800f574:	b21b      	sxth	r3, r3
 800f576:	e004      	b.n	800f582 <NextCluster+0x9a>
 800f578:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800f57c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800f580:	b21b      	sxth	r3, r3
 800f582:	687a      	ldr	r2, [r7, #4]
 800f584:	8013      	strh	r3, [r2, #0]
 800f586:	2300      	movs	r3, #0
 800f588:	4618      	mov	r0, r3
 800f58a:	3710      	adds	r7, #16
 800f58c:	46bd      	mov	sp, r7
 800f58e:	bd80      	pop	{r7, pc}
 800f590:	20000198 	.word	0x20000198

0800f594 <ProgFileSec>:
 800f594:	b580      	push	{r7, lr}
 800f596:	b084      	sub	sp, #16
 800f598:	af00      	add	r7, sp, #0
 800f59a:	6078      	str	r0, [r7, #4]
 800f59c:	6039      	str	r1, [r7, #0]
 800f59e:	4b1f      	ldr	r3, [pc, #124]	; (800f61c <ProgFileSec+0x88>)
 800f5a0:	68da      	ldr	r2, [r3, #12]
 800f5a2:	4b1e      	ldr	r3, [pc, #120]	; (800f61c <ProgFileSec+0x88>)
 800f5a4:	695b      	ldr	r3, [r3, #20]
 800f5a6:	6839      	ldr	r1, [r7, #0]
 800f5a8:	f9b1 1000 	ldrsh.w	r1, [r1]
 800f5ac:	3902      	subs	r1, #2
 800f5ae:	fb01 f303 	mul.w	r3, r1, r3
 800f5b2:	4413      	add	r3, r2
 800f5b4:	60fb      	str	r3, [r7, #12]
 800f5b6:	68f9      	ldr	r1, [r7, #12]
 800f5b8:	6878      	ldr	r0, [r7, #4]
 800f5ba:	f7ff fe71 	bl	800f2a0 <ProgDiskPage>
 800f5be:	4603      	mov	r3, r0
 800f5c0:	2b00      	cmp	r3, #0
 800f5c2:	d001      	beq.n	800f5c8 <ProgFileSec+0x34>
 800f5c4:	2301      	movs	r3, #1
 800f5c6:	e025      	b.n	800f614 <ProgFileSec+0x80>
 800f5c8:	6838      	ldr	r0, [r7, #0]
 800f5ca:	f7ff ff8d 	bl	800f4e8 <NextCluster>
 800f5ce:	4603      	mov	r3, r0
 800f5d0:	2b00      	cmp	r3, #0
 800f5d2:	d001      	beq.n	800f5d8 <ProgFileSec+0x44>
 800f5d4:	2302      	movs	r3, #2
 800f5d6:	e01d      	b.n	800f614 <ProgFileSec+0x80>
 800f5d8:	683b      	ldr	r3, [r7, #0]
 800f5da:	885b      	ldrh	r3, [r3, #2]
 800f5dc:	817b      	strh	r3, [r7, #10]
 800f5de:	683b      	ldr	r3, [r7, #0]
 800f5e0:	f9b3 3000 	ldrsh.w	r3, [r3]
 800f5e4:	2b00      	cmp	r3, #0
 800f5e6:	d114      	bne.n	800f612 <ProgFileSec+0x7e>
 800f5e8:	683b      	ldr	r3, [r7, #0]
 800f5ea:	897a      	ldrh	r2, [r7, #10]
 800f5ec:	801a      	strh	r2, [r3, #0]
 800f5ee:	6839      	ldr	r1, [r7, #0]
 800f5f0:	6878      	ldr	r0, [r7, #4]
 800f5f2:	f7ff fe77 	bl	800f2e4 <SeekBlank>
 800f5f6:	4603      	mov	r3, r0
 800f5f8:	2b00      	cmp	r3, #0
 800f5fa:	d001      	beq.n	800f600 <ProgFileSec+0x6c>
 800f5fc:	2303      	movs	r3, #3
 800f5fe:	e009      	b.n	800f614 <ProgFileSec+0x80>
 800f600:	6839      	ldr	r1, [r7, #0]
 800f602:	6878      	ldr	r0, [r7, #4]
 800f604:	f7ff feea 	bl	800f3dc <SetCluster>
 800f608:	4603      	mov	r3, r0
 800f60a:	2b00      	cmp	r3, #0
 800f60c:	d001      	beq.n	800f612 <ProgFileSec+0x7e>
 800f60e:	2301      	movs	r3, #1
 800f610:	e000      	b.n	800f614 <ProgFileSec+0x80>
 800f612:	2300      	movs	r3, #0
 800f614:	4618      	mov	r0, r3
 800f616:	3710      	adds	r7, #16
 800f618:	46bd      	mov	sp, r7
 800f61a:	bd80      	pop	{r7, pc}
 800f61c:	20000198 	.word	0x20000198

0800f620 <ReadFileSec>:
 800f620:	b580      	push	{r7, lr}
 800f622:	b084      	sub	sp, #16
 800f624:	af00      	add	r7, sp, #0
 800f626:	6078      	str	r0, [r7, #4]
 800f628:	6039      	str	r1, [r7, #0]
 800f62a:	4b13      	ldr	r3, [pc, #76]	; (800f678 <ReadFileSec+0x58>)
 800f62c:	68da      	ldr	r2, [r3, #12]
 800f62e:	4b12      	ldr	r3, [pc, #72]	; (800f678 <ReadFileSec+0x58>)
 800f630:	695b      	ldr	r3, [r3, #20]
 800f632:	6839      	ldr	r1, [r7, #0]
 800f634:	f9b1 1000 	ldrsh.w	r1, [r1]
 800f638:	3902      	subs	r1, #2
 800f63a:	fb01 f303 	mul.w	r3, r1, r3
 800f63e:	4413      	add	r3, r2
 800f640:	60fb      	str	r3, [r7, #12]
 800f642:	68fb      	ldr	r3, [r7, #12]
 800f644:	4a0c      	ldr	r2, [pc, #48]	; (800f678 <ReadFileSec+0x58>)
 800f646:	6952      	ldr	r2, [r2, #20]
 800f648:	b212      	sxth	r2, r2
 800f64a:	4619      	mov	r1, r3
 800f64c:	6878      	ldr	r0, [r7, #4]
 800f64e:	f7ff fd89 	bl	800f164 <ReadDiskData>
 800f652:	4603      	mov	r3, r0
 800f654:	2b00      	cmp	r3, #0
 800f656:	d001      	beq.n	800f65c <ReadFileSec+0x3c>
 800f658:	2301      	movs	r3, #1
 800f65a:	e008      	b.n	800f66e <ReadFileSec+0x4e>
 800f65c:	6838      	ldr	r0, [r7, #0]
 800f65e:	f7ff ff43 	bl	800f4e8 <NextCluster>
 800f662:	4603      	mov	r3, r0
 800f664:	2b00      	cmp	r3, #0
 800f666:	d001      	beq.n	800f66c <ReadFileSec+0x4c>
 800f668:	2302      	movs	r3, #2
 800f66a:	e000      	b.n	800f66e <ReadFileSec+0x4e>
 800f66c:	2300      	movs	r3, #0
 800f66e:	4618      	mov	r0, r3
 800f670:	3710      	adds	r7, #16
 800f672:	46bd      	mov	sp, r7
 800f674:	bd80      	pop	{r7, pc}
 800f676:	bf00      	nop
 800f678:	20000198 	.word	0x20000198

0800f67c <CloseFile>:
 800f67c:	b580      	push	{r7, lr}
 800f67e:	b086      	sub	sp, #24
 800f680:	af00      	add	r7, sp, #0
 800f682:	60f8      	str	r0, [r7, #12]
 800f684:	60b9      	str	r1, [r7, #8]
 800f686:	607a      	str	r2, [r7, #4]
 800f688:	603b      	str	r3, [r7, #0]
 800f68a:	f640 73ff 	movw	r3, #4095	; 0xfff
 800f68e:	617b      	str	r3, [r7, #20]
 800f690:	687b      	ldr	r3, [r7, #4]
 800f692:	f640 72ff 	movw	r2, #4095	; 0xfff
 800f696:	801a      	strh	r2, [r3, #0]
 800f698:	6879      	ldr	r1, [r7, #4]
 800f69a:	68f8      	ldr	r0, [r7, #12]
 800f69c:	f7ff fe9e 	bl	800f3dc <SetCluster>
 800f6a0:	683b      	ldr	r3, [r7, #0]
 800f6a2:	681a      	ldr	r2, [r3, #0]
 800f6a4:	697b      	ldr	r3, [r7, #20]
 800f6a6:	43db      	mvns	r3, r3
 800f6a8:	4013      	ands	r3, r2
 800f6aa:	4619      	mov	r1, r3
 800f6ac:	4b24      	ldr	r3, [pc, #144]	; (800f740 <CloseFile+0xc4>)
 800f6ae:	695b      	ldr	r3, [r3, #20]
 800f6b0:	b21b      	sxth	r3, r3
 800f6b2:	461a      	mov	r2, r3
 800f6b4:	68f8      	ldr	r0, [r7, #12]
 800f6b6:	f7ff fd55 	bl	800f164 <ReadDiskData>
 800f6ba:	4603      	mov	r3, r0
 800f6bc:	2b00      	cmp	r3, #0
 800f6be:	d001      	beq.n	800f6c4 <CloseFile+0x48>
 800f6c0:	2301      	movs	r3, #1
 800f6c2:	e039      	b.n	800f738 <CloseFile+0xbc>
 800f6c4:	683b      	ldr	r3, [r7, #0]
 800f6c6:	681a      	ldr	r2, [r3, #0]
 800f6c8:	697b      	ldr	r3, [r7, #20]
 800f6ca:	4013      	ands	r3, r2
 800f6cc:	330b      	adds	r3, #11
 800f6ce:	68fa      	ldr	r2, [r7, #12]
 800f6d0:	4413      	add	r3, r2
 800f6d2:	2220      	movs	r2, #32
 800f6d4:	701a      	strb	r2, [r3, #0]
 800f6d6:	683b      	ldr	r3, [r7, #0]
 800f6d8:	681a      	ldr	r2, [r3, #0]
 800f6da:	697b      	ldr	r3, [r7, #20]
 800f6dc:	4013      	ands	r3, r2
 800f6de:	331c      	adds	r3, #28
 800f6e0:	68fa      	ldr	r2, [r7, #12]
 800f6e2:	4413      	add	r3, r2
 800f6e4:	68ba      	ldr	r2, [r7, #8]
 800f6e6:	601a      	str	r2, [r3, #0]
 800f6e8:	683b      	ldr	r3, [r7, #0]
 800f6ea:	681a      	ldr	r2, [r3, #0]
 800f6ec:	697b      	ldr	r3, [r7, #20]
 800f6ee:	43db      	mvns	r3, r3
 800f6f0:	4013      	ands	r3, r2
 800f6f2:	4619      	mov	r1, r3
 800f6f4:	68f8      	ldr	r0, [r7, #12]
 800f6f6:	f7ff fdd3 	bl	800f2a0 <ProgDiskPage>
 800f6fa:	4603      	mov	r3, r0
 800f6fc:	2b00      	cmp	r3, #0
 800f6fe:	d001      	beq.n	800f704 <CloseFile+0x88>
 800f700:	2301      	movs	r3, #1
 800f702:	e019      	b.n	800f738 <CloseFile+0xbc>
 800f704:	4b0e      	ldr	r3, [pc, #56]	; (800f740 <CloseFile+0xc4>)
 800f706:	681b      	ldr	r3, [r3, #0]
 800f708:	4a0d      	ldr	r2, [pc, #52]	; (800f740 <CloseFile+0xc4>)
 800f70a:	6952      	ldr	r2, [r2, #20]
 800f70c:	b212      	sxth	r2, r2
 800f70e:	4619      	mov	r1, r3
 800f710:	68f8      	ldr	r0, [r7, #12]
 800f712:	f7ff fd27 	bl	800f164 <ReadDiskData>
 800f716:	4603      	mov	r3, r0
 800f718:	2b00      	cmp	r3, #0
 800f71a:	d001      	beq.n	800f720 <CloseFile+0xa4>
 800f71c:	2301      	movs	r3, #1
 800f71e:	e00b      	b.n	800f738 <CloseFile+0xbc>
 800f720:	4b07      	ldr	r3, [pc, #28]	; (800f740 <CloseFile+0xc4>)
 800f722:	685b      	ldr	r3, [r3, #4]
 800f724:	4619      	mov	r1, r3
 800f726:	68f8      	ldr	r0, [r7, #12]
 800f728:	f7ff fdba 	bl	800f2a0 <ProgDiskPage>
 800f72c:	4603      	mov	r3, r0
 800f72e:	2b00      	cmp	r3, #0
 800f730:	d001      	beq.n	800f736 <CloseFile+0xba>
 800f732:	2301      	movs	r3, #1
 800f734:	e000      	b.n	800f738 <CloseFile+0xbc>
 800f736:	2300      	movs	r3, #0
 800f738:	4618      	mov	r0, r3
 800f73a:	3718      	adds	r7, #24
 800f73c:	46bd      	mov	sp, r7
 800f73e:	bd80      	pop	{r7, pc}
 800f740:	20000198 	.word	0x20000198

0800f744 <OpenFileWr>:
 800f744:	b580      	push	{r7, lr}
 800f746:	b088      	sub	sp, #32
 800f748:	af00      	add	r7, sp, #0
 800f74a:	60f8      	str	r0, [r7, #12]
 800f74c:	60b9      	str	r1, [r7, #8]
 800f74e:	607a      	str	r2, [r7, #4]
 800f750:	603b      	str	r3, [r7, #0]
 800f752:	683b      	ldr	r3, [r7, #0]
 800f754:	687a      	ldr	r2, [r7, #4]
 800f756:	68b9      	ldr	r1, [r7, #8]
 800f758:	68f8      	ldr	r0, [r7, #12]
 800f75a:	f7ff fd29 	bl	800f1b0 <OpenFileRd>
 800f75e:	4603      	mov	r3, r0
 800f760:	61fb      	str	r3, [r7, #28]
 800f762:	69fb      	ldr	r3, [r7, #28]
 800f764:	2b04      	cmp	r3, #4
 800f766:	d002      	beq.n	800f76e <OpenFileWr+0x2a>
 800f768:	69fb      	ldr	r3, [r7, #28]
 800f76a:	b2db      	uxtb	r3, r3
 800f76c:	e045      	b.n	800f7fa <OpenFileWr+0xb6>
 800f76e:	6879      	ldr	r1, [r7, #4]
 800f770:	68f8      	ldr	r0, [r7, #12]
 800f772:	f7ff fdb7 	bl	800f2e4 <SeekBlank>
 800f776:	4603      	mov	r3, r0
 800f778:	2b00      	cmp	r3, #0
 800f77a:	d001      	beq.n	800f780 <OpenFileWr+0x3c>
 800f77c:	2303      	movs	r3, #3
 800f77e:	e03c      	b.n	800f7fa <OpenFileWr+0xb6>
 800f780:	683b      	ldr	r3, [r7, #0]
 800f782:	681b      	ldr	r3, [r3, #0]
 800f784:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800f788:	61bb      	str	r3, [r7, #24]
 800f78a:	683b      	ldr	r3, [r7, #0]
 800f78c:	681a      	ldr	r2, [r3, #0]
 800f78e:	69bb      	ldr	r3, [r7, #24]
 800f790:	1ad3      	subs	r3, r2, r3
 800f792:	617b      	str	r3, [r7, #20]
 800f794:	697b      	ldr	r3, [r7, #20]
 800f796:	4a1b      	ldr	r2, [pc, #108]	; (800f804 <OpenFileWr+0xc0>)
 800f798:	6952      	ldr	r2, [r2, #20]
 800f79a:	b212      	sxth	r2, r2
 800f79c:	4619      	mov	r1, r3
 800f79e:	68f8      	ldr	r0, [r7, #12]
 800f7a0:	f7ff fce0 	bl	800f164 <ReadDiskData>
 800f7a4:	4603      	mov	r3, r0
 800f7a6:	2b00      	cmp	r3, #0
 800f7a8:	d001      	beq.n	800f7ae <OpenFileWr+0x6a>
 800f7aa:	2301      	movs	r3, #1
 800f7ac:	e025      	b.n	800f7fa <OpenFileWr+0xb6>
 800f7ae:	2300      	movs	r3, #0
 800f7b0:	61fb      	str	r3, [r7, #28]
 800f7b2:	e00d      	b.n	800f7d0 <OpenFileWr+0x8c>
 800f7b4:	69fb      	ldr	r3, [r7, #28]
 800f7b6:	68ba      	ldr	r2, [r7, #8]
 800f7b8:	441a      	add	r2, r3
 800f7ba:	69b9      	ldr	r1, [r7, #24]
 800f7bc:	69fb      	ldr	r3, [r7, #28]
 800f7be:	440b      	add	r3, r1
 800f7c0:	4619      	mov	r1, r3
 800f7c2:	68fb      	ldr	r3, [r7, #12]
 800f7c4:	440b      	add	r3, r1
 800f7c6:	7812      	ldrb	r2, [r2, #0]
 800f7c8:	701a      	strb	r2, [r3, #0]
 800f7ca:	69fb      	ldr	r3, [r7, #28]
 800f7cc:	3301      	adds	r3, #1
 800f7ce:	61fb      	str	r3, [r7, #28]
 800f7d0:	69fb      	ldr	r3, [r7, #28]
 800f7d2:	2b0a      	cmp	r3, #10
 800f7d4:	ddee      	ble.n	800f7b4 <OpenFileWr+0x70>
 800f7d6:	69bb      	ldr	r3, [r7, #24]
 800f7d8:	331a      	adds	r3, #26
 800f7da:	68fa      	ldr	r2, [r7, #12]
 800f7dc:	4413      	add	r3, r2
 800f7de:	687a      	ldr	r2, [r7, #4]
 800f7e0:	f9b2 2000 	ldrsh.w	r2, [r2]
 800f7e4:	801a      	strh	r2, [r3, #0]
 800f7e6:	6979      	ldr	r1, [r7, #20]
 800f7e8:	68f8      	ldr	r0, [r7, #12]
 800f7ea:	f7ff fd59 	bl	800f2a0 <ProgDiskPage>
 800f7ee:	4603      	mov	r3, r0
 800f7f0:	2b00      	cmp	r3, #0
 800f7f2:	d001      	beq.n	800f7f8 <OpenFileWr+0xb4>
 800f7f4:	2301      	movs	r3, #1
 800f7f6:	e000      	b.n	800f7fa <OpenFileWr+0xb6>
 800f7f8:	2300      	movs	r3, #0
 800f7fa:	4618      	mov	r0, r3
 800f7fc:	3720      	adds	r7, #32
 800f7fe:	46bd      	mov	sp, r7
 800f800:	bd80      	pop	{r7, pc}
 800f802:	bf00      	nop
 800f804:	20000198 	.word	0x20000198

0800f808 <Color_Num>:
 800f808:	b480      	push	{r7}
 800f80a:	b083      	sub	sp, #12
 800f80c:	af00      	add	r7, sp, #0
 800f80e:	4603      	mov	r3, r0
 800f810:	80fb      	strh	r3, [r7, #6]
 800f812:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800f816:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 800f81a:	4013      	ands	r3, r2
 800f81c:	f64f 72e0 	movw	r2, #65504	; 0xffe0
 800f820:	4293      	cmp	r3, r2
 800f822:	d101      	bne.n	800f828 <Color_Num+0x20>
 800f824:	2301      	movs	r3, #1
 800f826:	e068      	b.n	800f8fa <Color_Num+0xf2>
 800f828:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800f82c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800f830:	f5b3 4f04 	cmp.w	r3, #33792	; 0x8400
 800f834:	d101      	bne.n	800f83a <Color_Num+0x32>
 800f836:	2302      	movs	r3, #2
 800f838:	e05f      	b.n	800f8fa <Color_Num+0xf2>
 800f83a:	88fb      	ldrh	r3, [r7, #6]
 800f83c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800f840:	f240 72ff 	movw	r2, #2047	; 0x7ff
 800f844:	4293      	cmp	r3, r2
 800f846:	d101      	bne.n	800f84c <Color_Num+0x44>
 800f848:	2303      	movs	r3, #3
 800f84a:	e056      	b.n	800f8fa <Color_Num+0xf2>
 800f84c:	88fb      	ldrh	r3, [r7, #6]
 800f84e:	f403 6382 	and.w	r3, r3, #1040	; 0x410
 800f852:	f5b3 6f82 	cmp.w	r3, #1040	; 0x410
 800f856:	d101      	bne.n	800f85c <Color_Num+0x54>
 800f858:	2304      	movs	r3, #4
 800f85a:	e04e      	b.n	800f8fa <Color_Num+0xf2>
 800f85c:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800f860:	f64f 031f 	movw	r3, #63519	; 0xf81f
 800f864:	4013      	ands	r3, r2
 800f866:	f64f 021f 	movw	r2, #63519	; 0xf81f
 800f86a:	4293      	cmp	r3, r2
 800f86c:	d101      	bne.n	800f872 <Color_Num+0x6a>
 800f86e:	2305      	movs	r3, #5
 800f870:	e043      	b.n	800f8fa <Color_Num+0xf2>
 800f872:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800f876:	f248 0310 	movw	r3, #32784	; 0x8010
 800f87a:	4013      	ands	r3, r2
 800f87c:	f248 0210 	movw	r2, #32784	; 0x8010
 800f880:	4293      	cmp	r3, r2
 800f882:	d101      	bne.n	800f888 <Color_Num+0x80>
 800f884:	2306      	movs	r3, #6
 800f886:	e038      	b.n	800f8fa <Color_Num+0xf2>
 800f888:	88fb      	ldrh	r3, [r7, #6]
 800f88a:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 800f88e:	f5b3 6ffc 	cmp.w	r3, #2016	; 0x7e0
 800f892:	d101      	bne.n	800f898 <Color_Num+0x90>
 800f894:	2307      	movs	r3, #7
 800f896:	e030      	b.n	800f8fa <Color_Num+0xf2>
 800f898:	88fb      	ldrh	r3, [r7, #6]
 800f89a:	f403 6382 	and.w	r3, r3, #1040	; 0x410
 800f89e:	f5b3 6f82 	cmp.w	r3, #1040	; 0x410
 800f8a2:	d101      	bne.n	800f8a8 <Color_Num+0xa0>
 800f8a4:	2308      	movs	r3, #8
 800f8a6:	e028      	b.n	800f8fa <Color_Num+0xf2>
 800f8a8:	88fb      	ldrh	r3, [r7, #6]
 800f8aa:	461a      	mov	r2, r3
 800f8ac:	f643 13e7 	movw	r3, #14823	; 0x39e7
 800f8b0:	4013      	ands	r3, r2
 800f8b2:	f643 12e7 	movw	r2, #14823	; 0x39e7
 800f8b6:	4293      	cmp	r3, r2
 800f8b8:	d101      	bne.n	800f8be <Color_Num+0xb6>
 800f8ba:	2309      	movs	r3, #9
 800f8bc:	e01d      	b.n	800f8fa <Color_Num+0xf2>
 800f8be:	88fb      	ldrh	r3, [r7, #6]
 800f8c0:	461a      	mov	r2, r3
 800f8c2:	f240 531f 	movw	r3, #1311	; 0x51f
 800f8c6:	4013      	ands	r3, r2
 800f8c8:	f240 521f 	movw	r2, #1311	; 0x51f
 800f8cc:	4293      	cmp	r3, r2
 800f8ce:	d101      	bne.n	800f8d4 <Color_Num+0xcc>
 800f8d0:	230a      	movs	r3, #10
 800f8d2:	e012      	b.n	800f8fa <Color_Num+0xf2>
 800f8d4:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800f8d8:	f64f 4310 	movw	r3, #64528	; 0xfc10
 800f8dc:	4013      	ands	r3, r2
 800f8de:	f64f 4210 	movw	r2, #64528	; 0xfc10
 800f8e2:	4293      	cmp	r3, r2
 800f8e4:	d101      	bne.n	800f8ea <Color_Num+0xe2>
 800f8e6:	230b      	movs	r3, #11
 800f8e8:	e007      	b.n	800f8fa <Color_Num+0xf2>
 800f8ea:	88fb      	ldrh	r3, [r7, #6]
 800f8ec:	f003 031f 	and.w	r3, r3, #31
 800f8f0:	2b1f      	cmp	r3, #31
 800f8f2:	d101      	bne.n	800f8f8 <Color_Num+0xf0>
 800f8f4:	230c      	movs	r3, #12
 800f8f6:	e000      	b.n	800f8fa <Color_Num+0xf2>
 800f8f8:	230d      	movs	r3, #13
 800f8fa:	4618      	mov	r0, r3
 800f8fc:	370c      	adds	r7, #12
 800f8fe:	46bd      	mov	sp, r7
 800f900:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f904:	4770      	bx	lr
	...

0800f908 <PrintClk>:
 800f908:	b580      	push	{r7, lr}
 800f90a:	b084      	sub	sp, #16
 800f90c:	af00      	add	r7, sp, #0
 800f90e:	4603      	mov	r3, r0
 800f910:	80fb      	strh	r3, [r7, #6]
 800f912:	460b      	mov	r3, r1
 800f914:	80bb      	strh	r3, [r7, #4]
 800f916:	4613      	mov	r3, r2
 800f918:	70fb      	strb	r3, [r7, #3]
 800f91a:	4b31      	ldr	r3, [pc, #196]	; (800f9e0 <PrintClk+0xd8>)
 800f91c:	895b      	ldrh	r3, [r3, #10]
 800f91e:	4619      	mov	r1, r3
 800f920:	f643 10e7 	movw	r0, #14823	; 0x39e7
 800f924:	f7fe fa6a 	bl	800ddfc <SetColor>
 800f928:	4b2e      	ldr	r3, [pc, #184]	; (800f9e4 <PrintClk+0xdc>)
 800f92a:	f9b3 303a 	ldrsh.w	r3, [r3, #58]	; 0x3a
 800f92e:	b29b      	uxth	r3, r3
 800f930:	331e      	adds	r3, #30
 800f932:	b29b      	uxth	r3, r3
 800f934:	80fb      	strh	r3, [r7, #6]
 800f936:	4b2b      	ldr	r3, [pc, #172]	; (800f9e4 <PrintClk+0xdc>)
 800f938:	f9b3 303a 	ldrsh.w	r3, [r3, #58]	; 0x3a
 800f93c:	b29b      	uxth	r3, r3
 800f93e:	3b03      	subs	r3, #3
 800f940:	b29b      	uxth	r3, r3
 800f942:	b218      	sxth	r0, r3
 800f944:	4b28      	ldr	r3, [pc, #160]	; (800f9e8 <PrintClk+0xe0>)
 800f946:	2200      	movs	r2, #0
 800f948:	2103      	movs	r1, #3
 800f94a:	f7fe fa6f 	bl	800de2c <DispStr>
 800f94e:	2301      	movs	r3, #1
 800f950:	81fb      	strh	r3, [r7, #14]
 800f952:	e03c      	b.n	800f9ce <PrintClk+0xc6>
 800f954:	78fa      	ldrb	r2, [r7, #3]
 800f956:	4613      	mov	r3, r2
 800f958:	009b      	lsls	r3, r3, #2
 800f95a:	4413      	add	r3, r2
 800f95c:	005b      	lsls	r3, r3, #1
 800f95e:	441a      	add	r2, r3
 800f960:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800f964:	4413      	add	r3, r2
 800f966:	4a21      	ldr	r2, [pc, #132]	; (800f9ec <PrintClk+0xe4>)
 800f968:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800f96c:	817b      	strh	r3, [r7, #10]
 800f96e:	2300      	movs	r3, #0
 800f970:	81bb      	strh	r3, [r7, #12]
 800f972:	e024      	b.n	800f9be <PrintClk+0xb6>
 800f974:	88fa      	ldrh	r2, [r7, #6]
 800f976:	89bb      	ldrh	r3, [r7, #12]
 800f978:	4413      	add	r3, r2
 800f97a:	b29b      	uxth	r3, r3
 800f97c:	b218      	sxth	r0, r3
 800f97e:	88ba      	ldrh	r2, [r7, #4]
 800f980:	89fb      	ldrh	r3, [r7, #14]
 800f982:	4413      	add	r3, r2
 800f984:	b29b      	uxth	r3, r3
 800f986:	b21b      	sxth	r3, r3
 800f988:	4619      	mov	r1, r3
 800f98a:	f002 fce7 	bl	801235c <LCD_Set_Posi>
 800f98e:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 800f992:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800f996:	fa42 f303 	asr.w	r3, r2, r3
 800f99a:	f003 0301 	and.w	r3, r3, #1
 800f99e:	2b00      	cmp	r3, #0
 800f9a0:	d004      	beq.n	800f9ac <PrintClk+0xa4>
 800f9a2:	f64f 4010 	movw	r0, #64528	; 0xfc10
 800f9a6:	f002 fd27 	bl	80123f8 <LCD_Set_Pixel>
 800f9aa:	e004      	b.n	800f9b6 <PrintClk+0xae>
 800f9ac:	4b10      	ldr	r3, [pc, #64]	; (800f9f0 <PrintClk+0xe8>)
 800f9ae:	881b      	ldrh	r3, [r3, #0]
 800f9b0:	4618      	mov	r0, r3
 800f9b2:	f002 fd21 	bl	80123f8 <LCD_Set_Pixel>
 800f9b6:	89bb      	ldrh	r3, [r7, #12]
 800f9b8:	3301      	adds	r3, #1
 800f9ba:	b29b      	uxth	r3, r3
 800f9bc:	81bb      	strh	r3, [r7, #12]
 800f9be:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800f9c2:	2b0a      	cmp	r3, #10
 800f9c4:	ddd6      	ble.n	800f974 <PrintClk+0x6c>
 800f9c6:	89fb      	ldrh	r3, [r7, #14]
 800f9c8:	3301      	adds	r3, #1
 800f9ca:	b29b      	uxth	r3, r3
 800f9cc:	81fb      	strh	r3, [r7, #14]
 800f9ce:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800f9d2:	2b0a      	cmp	r3, #10
 800f9d4:	ddbe      	ble.n	800f954 <PrintClk+0x4c>
 800f9d6:	bf00      	nop
 800f9d8:	bf00      	nop
 800f9da:	3710      	adds	r7, #16
 800f9dc:	46bd      	mov	sp, r7
 800f9de:	bd80      	pop	{r7, pc}
 800f9e0:	08001f08 	.word	0x08001f08
 800f9e4:	0800215c 	.word	0x0800215c
 800f9e8:	080001ec 	.word	0x080001ec
 800f9ec:	08001bbc 	.word	0x08001bbc
 800f9f0:	200015d6 	.word	0x200015d6

0800f9f4 <WriteVar>:
 800f9f4:	b580      	push	{r7, lr}
 800f9f6:	b084      	sub	sp, #16
 800f9f8:	af00      	add	r7, sp, #0
 800f9fa:	4603      	mov	r3, r0
 800f9fc:	6039      	str	r1, [r7, #0]
 800f9fe:	80fb      	strh	r3, [r7, #6]
 800fa00:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800fa04:	81fb      	strh	r3, [r7, #14]
 800fa06:	2204      	movs	r2, #4
 800fa08:	2100      	movs	r1, #0
 800fa0a:	4847      	ldr	r0, [pc, #284]	; (800fb28 <WriteVar+0x134>)
 800fa0c:	f013 fa4a 	bl	8022ea4 <memset>
 800fa10:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800fa14:	4619      	mov	r1, r3
 800fa16:	4844      	ldr	r0, [pc, #272]	; (800fb28 <WriteVar+0x134>)
 800fa18:	f002 fa1e 	bl	8011e58 <u16ToDec4Str>
 800fa1c:	4842      	ldr	r0, [pc, #264]	; (800fb28 <WriteVar+0x134>)
 800fa1e:	f7fc fb0f 	bl	800c040 <strlen>
 800fa22:	4603      	mov	r3, r0
 800fa24:	b21a      	sxth	r2, r3
 800fa26:	4b41      	ldr	r3, [pc, #260]	; (800fb2c <WriteVar+0x138>)
 800fa28:	801a      	strh	r2, [r3, #0]
 800fa2a:	4b41      	ldr	r3, [pc, #260]	; (800fb30 <WriteVar+0x13c>)
 800fa2c:	f9b3 3000 	ldrsh.w	r3, [r3]
 800fa30:	461a      	mov	r2, r3
 800fa32:	4b40      	ldr	r3, [pc, #256]	; (800fb34 <WriteVar+0x140>)
 800fa34:	4413      	add	r3, r2
 800fa36:	4a3d      	ldr	r2, [pc, #244]	; (800fb2c <WriteVar+0x138>)
 800fa38:	f9b2 2000 	ldrsh.w	r2, [r2]
 800fa3c:	493a      	ldr	r1, [pc, #232]	; (800fb28 <WriteVar+0x134>)
 800fa3e:	4618      	mov	r0, r3
 800fa40:	f013 fa22 	bl	8022e88 <memcpy>
 800fa44:	4b3a      	ldr	r3, [pc, #232]	; (800fb30 <WriteVar+0x13c>)
 800fa46:	f9b3 3000 	ldrsh.w	r3, [r3]
 800fa4a:	b29a      	uxth	r2, r3
 800fa4c:	4b37      	ldr	r3, [pc, #220]	; (800fb2c <WriteVar+0x138>)
 800fa4e:	f9b3 3000 	ldrsh.w	r3, [r3]
 800fa52:	b29b      	uxth	r3, r3
 800fa54:	4413      	add	r3, r2
 800fa56:	b29b      	uxth	r3, r3
 800fa58:	b21a      	sxth	r2, r3
 800fa5a:	4b35      	ldr	r3, [pc, #212]	; (800fb30 <WriteVar+0x13c>)
 800fa5c:	801a      	strh	r2, [r3, #0]
 800fa5e:	4b33      	ldr	r3, [pc, #204]	; (800fb2c <WriteVar+0x138>)
 800fa60:	f9b3 3000 	ldrsh.w	r3, [r3]
 800fa64:	461a      	mov	r2, r3
 800fa66:	4b34      	ldr	r3, [pc, #208]	; (800fb38 <WriteVar+0x144>)
 800fa68:	681b      	ldr	r3, [r3, #0]
 800fa6a:	4413      	add	r3, r2
 800fa6c:	4a32      	ldr	r2, [pc, #200]	; (800fb38 <WriteVar+0x144>)
 800fa6e:	6013      	str	r3, [r2, #0]
 800fa70:	4b2f      	ldr	r3, [pc, #188]	; (800fb30 <WriteVar+0x13c>)
 800fa72:	f9b3 3000 	ldrsh.w	r3, [r3]
 800fa76:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 800fa7a:	429a      	cmp	r2, r3
 800fa7c:	dc4f      	bgt.n	800fb1e <WriteVar+0x12a>
 800fa7e:	6839      	ldr	r1, [r7, #0]
 800fa80:	482c      	ldr	r0, [pc, #176]	; (800fb34 <WriteVar+0x140>)
 800fa82:	f7ff fd87 	bl	800f594 <ProgFileSec>
 800fa86:	4b2d      	ldr	r3, [pc, #180]	; (800fb3c <WriteVar+0x148>)
 800fa88:	681b      	ldr	r3, [r3, #0]
 800fa8a:	1c5a      	adds	r2, r3, #1
 800fa8c:	492b      	ldr	r1, [pc, #172]	; (800fb3c <WriteVar+0x148>)
 800fa8e:	600a      	str	r2, [r1, #0]
 800fa90:	105b      	asrs	r3, r3, #1
 800fa92:	b2db      	uxtb	r3, r3
 800fa94:	f003 0303 	and.w	r3, r3, #3
 800fa98:	b2db      	uxtb	r3, r3
 800fa9a:	461a      	mov	r2, r3
 800fa9c:	2102      	movs	r1, #2
 800fa9e:	f44f 7084 	mov.w	r0, #264	; 0x108
 800faa2:	f7ff ff31 	bl	800f908 <PrintClk>
 800faa6:	4b22      	ldr	r3, [pc, #136]	; (800fb30 <WriteVar+0x13c>)
 800faa8:	f9b3 3000 	ldrsh.w	r3, [r3]
 800faac:	b29a      	uxth	r2, r3
 800faae:	89fb      	ldrh	r3, [r7, #14]
 800fab0:	1ad3      	subs	r3, r2, r3
 800fab2:	b29b      	uxth	r3, r3
 800fab4:	81bb      	strh	r3, [r7, #12]
 800fab6:	4b1d      	ldr	r3, [pc, #116]	; (800fb2c <WriteVar+0x138>)
 800fab8:	f9b3 3000 	ldrsh.w	r3, [r3]
 800fabc:	b29a      	uxth	r2, r3
 800fabe:	89bb      	ldrh	r3, [r7, #12]
 800fac0:	1ad3      	subs	r3, r2, r3
 800fac2:	b29b      	uxth	r3, r3
 800fac4:	817b      	strh	r3, [r7, #10]
 800fac6:	4b1a      	ldr	r3, [pc, #104]	; (800fb30 <WriteVar+0x13c>)
 800fac8:	2200      	movs	r2, #0
 800faca:	801a      	strh	r2, [r3, #0]
 800facc:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800fad0:	461a      	mov	r2, r3
 800fad2:	2100      	movs	r1, #0
 800fad4:	4817      	ldr	r0, [pc, #92]	; (800fb34 <WriteVar+0x140>)
 800fad6:	f013 f9e5 	bl	8022ea4 <memset>
 800fada:	f44f 729b 	mov.w	r2, #310	; 0x136
 800fade:	2100      	movs	r1, #0
 800fae0:	4817      	ldr	r0, [pc, #92]	; (800fb40 <WriteVar+0x14c>)
 800fae2:	f013 f9df 	bl	8022ea4 <memset>
 800fae6:	4b12      	ldr	r3, [pc, #72]	; (800fb30 <WriteVar+0x13c>)
 800fae8:	f9b3 3000 	ldrsh.w	r3, [r3]
 800faec:	461a      	mov	r2, r3
 800faee:	4b11      	ldr	r3, [pc, #68]	; (800fb34 <WriteVar+0x140>)
 800faf0:	18d0      	adds	r0, r2, r3
 800faf2:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800faf6:	4a0c      	ldr	r2, [pc, #48]	; (800fb28 <WriteVar+0x134>)
 800faf8:	4413      	add	r3, r2
 800fafa:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 800fafe:	4619      	mov	r1, r3
 800fb00:	f013 f9c2 	bl	8022e88 <memcpy>
 800fb04:	4b0a      	ldr	r3, [pc, #40]	; (800fb30 <WriteVar+0x13c>)
 800fb06:	f9b3 3000 	ldrsh.w	r3, [r3]
 800fb0a:	b29a      	uxth	r2, r3
 800fb0c:	89bb      	ldrh	r3, [r7, #12]
 800fb0e:	4413      	add	r3, r2
 800fb10:	b29b      	uxth	r3, r3
 800fb12:	b21a      	sxth	r2, r3
 800fb14:	4b06      	ldr	r3, [pc, #24]	; (800fb30 <WriteVar+0x13c>)
 800fb16:	801a      	strh	r2, [r3, #0]
 800fb18:	4b04      	ldr	r3, [pc, #16]	; (800fb2c <WriteVar+0x138>)
 800fb1a:	2200      	movs	r2, #0
 800fb1c:	801a      	strh	r2, [r3, #0]
 800fb1e:	bf00      	nop
 800fb20:	3710      	adds	r7, #16
 800fb22:	46bd      	mov	sp, r7
 800fb24:	bd80      	pop	{r7, pc}
 800fb26:	bf00      	nop
 800fb28:	200015dc 	.word	0x200015dc
 800fb2c:	2000079a 	.word	0x2000079a
 800fb30:	20000798 	.word	0x20000798
 800fb34:	200017e0 	.word	0x200017e0
 800fb38:	2000079c 	.word	0x2000079c
 800fb3c:	200007a0 	.word	0x200007a0
 800fb40:	2000000c 	.word	0x2000000c

0800fb44 <WriteStr>:
 800fb44:	b580      	push	{r7, lr}
 800fb46:	b084      	sub	sp, #16
 800fb48:	af00      	add	r7, sp, #0
 800fb4a:	6078      	str	r0, [r7, #4]
 800fb4c:	6039      	str	r1, [r7, #0]
 800fb4e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800fb52:	81fb      	strh	r3, [r7, #14]
 800fb54:	6878      	ldr	r0, [r7, #4]
 800fb56:	f7fc fa73 	bl	800c040 <strlen>
 800fb5a:	4603      	mov	r3, r0
 800fb5c:	b21a      	sxth	r2, r3
 800fb5e:	4b40      	ldr	r3, [pc, #256]	; (800fc60 <WriteStr+0x11c>)
 800fb60:	801a      	strh	r2, [r3, #0]
 800fb62:	4b40      	ldr	r3, [pc, #256]	; (800fc64 <WriteStr+0x120>)
 800fb64:	f9b3 3000 	ldrsh.w	r3, [r3]
 800fb68:	461a      	mov	r2, r3
 800fb6a:	4b3f      	ldr	r3, [pc, #252]	; (800fc68 <WriteStr+0x124>)
 800fb6c:	4413      	add	r3, r2
 800fb6e:	4a3c      	ldr	r2, [pc, #240]	; (800fc60 <WriteStr+0x11c>)
 800fb70:	f9b2 2000 	ldrsh.w	r2, [r2]
 800fb74:	6879      	ldr	r1, [r7, #4]
 800fb76:	4618      	mov	r0, r3
 800fb78:	f013 f986 	bl	8022e88 <memcpy>
 800fb7c:	4b39      	ldr	r3, [pc, #228]	; (800fc64 <WriteStr+0x120>)
 800fb7e:	f9b3 3000 	ldrsh.w	r3, [r3]
 800fb82:	b29a      	uxth	r2, r3
 800fb84:	4b36      	ldr	r3, [pc, #216]	; (800fc60 <WriteStr+0x11c>)
 800fb86:	f9b3 3000 	ldrsh.w	r3, [r3]
 800fb8a:	b29b      	uxth	r3, r3
 800fb8c:	4413      	add	r3, r2
 800fb8e:	b29b      	uxth	r3, r3
 800fb90:	b21a      	sxth	r2, r3
 800fb92:	4b34      	ldr	r3, [pc, #208]	; (800fc64 <WriteStr+0x120>)
 800fb94:	801a      	strh	r2, [r3, #0]
 800fb96:	4b32      	ldr	r3, [pc, #200]	; (800fc60 <WriteStr+0x11c>)
 800fb98:	f9b3 3000 	ldrsh.w	r3, [r3]
 800fb9c:	461a      	mov	r2, r3
 800fb9e:	4b33      	ldr	r3, [pc, #204]	; (800fc6c <WriteStr+0x128>)
 800fba0:	681b      	ldr	r3, [r3, #0]
 800fba2:	4413      	add	r3, r2
 800fba4:	4a31      	ldr	r2, [pc, #196]	; (800fc6c <WriteStr+0x128>)
 800fba6:	6013      	str	r3, [r2, #0]
 800fba8:	4b2e      	ldr	r3, [pc, #184]	; (800fc64 <WriteStr+0x120>)
 800fbaa:	f9b3 3000 	ldrsh.w	r3, [r3]
 800fbae:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 800fbb2:	429a      	cmp	r2, r3
 800fbb4:	dc4f      	bgt.n	800fc56 <WriteStr+0x112>
 800fbb6:	6839      	ldr	r1, [r7, #0]
 800fbb8:	482b      	ldr	r0, [pc, #172]	; (800fc68 <WriteStr+0x124>)
 800fbba:	f7ff fceb 	bl	800f594 <ProgFileSec>
 800fbbe:	4b2c      	ldr	r3, [pc, #176]	; (800fc70 <WriteStr+0x12c>)
 800fbc0:	681b      	ldr	r3, [r3, #0]
 800fbc2:	1c5a      	adds	r2, r3, #1
 800fbc4:	492a      	ldr	r1, [pc, #168]	; (800fc70 <WriteStr+0x12c>)
 800fbc6:	600a      	str	r2, [r1, #0]
 800fbc8:	105b      	asrs	r3, r3, #1
 800fbca:	b2db      	uxtb	r3, r3
 800fbcc:	f003 0303 	and.w	r3, r3, #3
 800fbd0:	b2db      	uxtb	r3, r3
 800fbd2:	461a      	mov	r2, r3
 800fbd4:	2102      	movs	r1, #2
 800fbd6:	f44f 7084 	mov.w	r0, #264	; 0x108
 800fbda:	f7ff fe95 	bl	800f908 <PrintClk>
 800fbde:	4b21      	ldr	r3, [pc, #132]	; (800fc64 <WriteStr+0x120>)
 800fbe0:	f9b3 3000 	ldrsh.w	r3, [r3]
 800fbe4:	b29a      	uxth	r2, r3
 800fbe6:	89fb      	ldrh	r3, [r7, #14]
 800fbe8:	1ad3      	subs	r3, r2, r3
 800fbea:	b29b      	uxth	r3, r3
 800fbec:	81bb      	strh	r3, [r7, #12]
 800fbee:	4b1c      	ldr	r3, [pc, #112]	; (800fc60 <WriteStr+0x11c>)
 800fbf0:	f9b3 3000 	ldrsh.w	r3, [r3]
 800fbf4:	b29a      	uxth	r2, r3
 800fbf6:	89bb      	ldrh	r3, [r7, #12]
 800fbf8:	1ad3      	subs	r3, r2, r3
 800fbfa:	b29b      	uxth	r3, r3
 800fbfc:	817b      	strh	r3, [r7, #10]
 800fbfe:	4b19      	ldr	r3, [pc, #100]	; (800fc64 <WriteStr+0x120>)
 800fc00:	2200      	movs	r2, #0
 800fc02:	801a      	strh	r2, [r3, #0]
 800fc04:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800fc08:	461a      	mov	r2, r3
 800fc0a:	2100      	movs	r1, #0
 800fc0c:	4816      	ldr	r0, [pc, #88]	; (800fc68 <WriteStr+0x124>)
 800fc0e:	f013 f949 	bl	8022ea4 <memset>
 800fc12:	f44f 729b 	mov.w	r2, #310	; 0x136
 800fc16:	2100      	movs	r1, #0
 800fc18:	4816      	ldr	r0, [pc, #88]	; (800fc74 <WriteStr+0x130>)
 800fc1a:	f013 f943 	bl	8022ea4 <memset>
 800fc1e:	4b11      	ldr	r3, [pc, #68]	; (800fc64 <WriteStr+0x120>)
 800fc20:	f9b3 3000 	ldrsh.w	r3, [r3]
 800fc24:	461a      	mov	r2, r3
 800fc26:	4b10      	ldr	r3, [pc, #64]	; (800fc68 <WriteStr+0x124>)
 800fc28:	18d0      	adds	r0, r2, r3
 800fc2a:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800fc2e:	687a      	ldr	r2, [r7, #4]
 800fc30:	4413      	add	r3, r2
 800fc32:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 800fc36:	4619      	mov	r1, r3
 800fc38:	f013 f926 	bl	8022e88 <memcpy>
 800fc3c:	4b09      	ldr	r3, [pc, #36]	; (800fc64 <WriteStr+0x120>)
 800fc3e:	f9b3 3000 	ldrsh.w	r3, [r3]
 800fc42:	b29a      	uxth	r2, r3
 800fc44:	89bb      	ldrh	r3, [r7, #12]
 800fc46:	4413      	add	r3, r2
 800fc48:	b29b      	uxth	r3, r3
 800fc4a:	b21a      	sxth	r2, r3
 800fc4c:	4b05      	ldr	r3, [pc, #20]	; (800fc64 <WriteStr+0x120>)
 800fc4e:	801a      	strh	r2, [r3, #0]
 800fc50:	4b03      	ldr	r3, [pc, #12]	; (800fc60 <WriteStr+0x11c>)
 800fc52:	2200      	movs	r2, #0
 800fc54:	801a      	strh	r2, [r3, #0]
 800fc56:	bf00      	nop
 800fc58:	3710      	adds	r7, #16
 800fc5a:	46bd      	mov	sp, r7
 800fc5c:	bd80      	pop	{r7, pc}
 800fc5e:	bf00      	nop
 800fc60:	2000079a 	.word	0x2000079a
 800fc64:	20000798 	.word	0x20000798
 800fc68:	200017e0 	.word	0x200017e0
 800fc6c:	2000079c 	.word	0x2000079c
 800fc70:	200007a0 	.word	0x200007a0
 800fc74:	2000000c 	.word	0x2000000c

0800fc78 <Make_Filename>:
 800fc78:	b580      	push	{r7, lr}
 800fc7a:	b084      	sub	sp, #16
 800fc7c:	af00      	add	r7, sp, #0
 800fc7e:	4603      	mov	r3, r0
 800fc80:	6039      	str	r1, [r7, #0]
 800fc82:	80fb      	strh	r3, [r7, #6]
 800fc84:	88fb      	ldrh	r3, [r7, #6]
 800fc86:	b2da      	uxtb	r2, r3
 800fc88:	f107 030c 	add.w	r3, r7, #12
 800fc8c:	4611      	mov	r1, r2
 800fc8e:	4618      	mov	r0, r3
 800fc90:	f001 ff3c 	bl	8011b0c <u8ToDec3>
 800fc94:	683b      	ldr	r3, [r7, #0]
 800fc96:	3304      	adds	r3, #4
 800fc98:	7b3a      	ldrb	r2, [r7, #12]
 800fc9a:	701a      	strb	r2, [r3, #0]
 800fc9c:	683b      	ldr	r3, [r7, #0]
 800fc9e:	3305      	adds	r3, #5
 800fca0:	7b7a      	ldrb	r2, [r7, #13]
 800fca2:	701a      	strb	r2, [r3, #0]
 800fca4:	683b      	ldr	r3, [r7, #0]
 800fca6:	3306      	adds	r3, #6
 800fca8:	7bba      	ldrb	r2, [r7, #14]
 800fcaa:	701a      	strb	r2, [r3, #0]
 800fcac:	bf00      	nop
 800fcae:	3710      	adds	r7, #16
 800fcb0:	46bd      	mov	sp, r7
 800fcb2:	bd80      	pop	{r7, pc}

0800fcb4 <Load_File_Num>:
 800fcb4:	b580      	push	{r7, lr}
 800fcb6:	b08a      	sub	sp, #40	; 0x28
 800fcb8:	af00      	add	r7, sp, #0
 800fcba:	4603      	mov	r3, r0
 800fcbc:	71fb      	strb	r3, [r7, #7]
 800fcbe:	2300      	movs	r3, #0
 800fcc0:	84fb      	strh	r3, [r7, #38]	; 0x26
 800fcc2:	4a87      	ldr	r2, [pc, #540]	; (800fee0 <Load_File_Num+0x22c>)
 800fcc4:	f107 0318 	add.w	r3, r7, #24
 800fcc8:	ca07      	ldmia	r2, {r0, r1, r2}
 800fcca:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800fcce:	79fb      	ldrb	r3, [r7, #7]
 800fcd0:	3b1d      	subs	r3, #29
 800fcd2:	2b04      	cmp	r3, #4
 800fcd4:	f200 80fe 	bhi.w	800fed4 <Load_File_Num+0x220>
 800fcd8:	a201      	add	r2, pc, #4	; (adr r2, 800fce0 <Load_File_Num+0x2c>)
 800fcda:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fcde:	bf00      	nop
 800fce0:	0800fcf5 	.word	0x0800fcf5
 800fce4:	0800fd55 	.word	0x0800fd55
 800fce8:	0800fdb5 	.word	0x0800fdb5
 800fcec:	0800fe15 	.word	0x0800fe15
 800fcf0:	0800fe75 	.word	0x0800fe75
 800fcf4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800fcf8:	2100      	movs	r1, #0
 800fcfa:	487a      	ldr	r0, [pc, #488]	; (800fee4 <Load_File_Num+0x230>)
 800fcfc:	f013 f8d2 	bl	8022ea4 <memset>
 800fd00:	4a79      	ldr	r2, [pc, #484]	; (800fee8 <Load_File_Num+0x234>)
 800fd02:	f107 0318 	add.w	r3, r7, #24
 800fd06:	ca07      	ldmia	r2, {r0, r1, r2}
 800fd08:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800fd0c:	f107 0218 	add.w	r2, r7, #24
 800fd10:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 800fd14:	4611      	mov	r1, r2
 800fd16:	4618      	mov	r0, r3
 800fd18:	f7ff ffae 	bl	800fc78 <Make_Filename>
 800fd1c:	e00d      	b.n	800fd3a <Load_File_Num+0x86>
 800fd1e:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 800fd22:	b29b      	uxth	r3, r3
 800fd24:	3301      	adds	r3, #1
 800fd26:	b29b      	uxth	r3, r3
 800fd28:	84fb      	strh	r3, [r7, #38]	; 0x26
 800fd2a:	f107 0218 	add.w	r2, r7, #24
 800fd2e:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 800fd32:	4611      	mov	r1, r2
 800fd34:	4618      	mov	r0, r3
 800fd36:	f7ff ff9f 	bl	800fc78 <Make_Filename>
 800fd3a:	f107 030c 	add.w	r3, r7, #12
 800fd3e:	f107 0210 	add.w	r2, r7, #16
 800fd42:	f107 0118 	add.w	r1, r7, #24
 800fd46:	4867      	ldr	r0, [pc, #412]	; (800fee4 <Load_File_Num+0x230>)
 800fd48:	f7ff fa32 	bl	800f1b0 <OpenFileRd>
 800fd4c:	4603      	mov	r3, r0
 800fd4e:	2b00      	cmp	r3, #0
 800fd50:	d0e5      	beq.n	800fd1e <Load_File_Num+0x6a>
 800fd52:	e0bf      	b.n	800fed4 <Load_File_Num+0x220>
 800fd54:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800fd58:	2100      	movs	r1, #0
 800fd5a:	4862      	ldr	r0, [pc, #392]	; (800fee4 <Load_File_Num+0x230>)
 800fd5c:	f013 f8a2 	bl	8022ea4 <memset>
 800fd60:	4a62      	ldr	r2, [pc, #392]	; (800feec <Load_File_Num+0x238>)
 800fd62:	f107 0318 	add.w	r3, r7, #24
 800fd66:	ca07      	ldmia	r2, {r0, r1, r2}
 800fd68:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800fd6c:	f107 0218 	add.w	r2, r7, #24
 800fd70:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 800fd74:	4611      	mov	r1, r2
 800fd76:	4618      	mov	r0, r3
 800fd78:	f7ff ff7e 	bl	800fc78 <Make_Filename>
 800fd7c:	e00d      	b.n	800fd9a <Load_File_Num+0xe6>
 800fd7e:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 800fd82:	b29b      	uxth	r3, r3
 800fd84:	3301      	adds	r3, #1
 800fd86:	b29b      	uxth	r3, r3
 800fd88:	84fb      	strh	r3, [r7, #38]	; 0x26
 800fd8a:	f107 0218 	add.w	r2, r7, #24
 800fd8e:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 800fd92:	4611      	mov	r1, r2
 800fd94:	4618      	mov	r0, r3
 800fd96:	f7ff ff6f 	bl	800fc78 <Make_Filename>
 800fd9a:	f107 030c 	add.w	r3, r7, #12
 800fd9e:	f107 0210 	add.w	r2, r7, #16
 800fda2:	f107 0118 	add.w	r1, r7, #24
 800fda6:	484f      	ldr	r0, [pc, #316]	; (800fee4 <Load_File_Num+0x230>)
 800fda8:	f7ff fa02 	bl	800f1b0 <OpenFileRd>
 800fdac:	4603      	mov	r3, r0
 800fdae:	2b00      	cmp	r3, #0
 800fdb0:	d0e5      	beq.n	800fd7e <Load_File_Num+0xca>
 800fdb2:	e08f      	b.n	800fed4 <Load_File_Num+0x220>
 800fdb4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800fdb8:	2100      	movs	r1, #0
 800fdba:	484a      	ldr	r0, [pc, #296]	; (800fee4 <Load_File_Num+0x230>)
 800fdbc:	f013 f872 	bl	8022ea4 <memset>
 800fdc0:	4a4b      	ldr	r2, [pc, #300]	; (800fef0 <Load_File_Num+0x23c>)
 800fdc2:	f107 0318 	add.w	r3, r7, #24
 800fdc6:	ca07      	ldmia	r2, {r0, r1, r2}
 800fdc8:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800fdcc:	f107 0218 	add.w	r2, r7, #24
 800fdd0:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 800fdd4:	4611      	mov	r1, r2
 800fdd6:	4618      	mov	r0, r3
 800fdd8:	f7ff ff4e 	bl	800fc78 <Make_Filename>
 800fddc:	e00d      	b.n	800fdfa <Load_File_Num+0x146>
 800fdde:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 800fde2:	b29b      	uxth	r3, r3
 800fde4:	3301      	adds	r3, #1
 800fde6:	b29b      	uxth	r3, r3
 800fde8:	84fb      	strh	r3, [r7, #38]	; 0x26
 800fdea:	f107 0218 	add.w	r2, r7, #24
 800fdee:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 800fdf2:	4611      	mov	r1, r2
 800fdf4:	4618      	mov	r0, r3
 800fdf6:	f7ff ff3f 	bl	800fc78 <Make_Filename>
 800fdfa:	f107 030c 	add.w	r3, r7, #12
 800fdfe:	f107 0210 	add.w	r2, r7, #16
 800fe02:	f107 0118 	add.w	r1, r7, #24
 800fe06:	4837      	ldr	r0, [pc, #220]	; (800fee4 <Load_File_Num+0x230>)
 800fe08:	f7ff f9d2 	bl	800f1b0 <OpenFileRd>
 800fe0c:	4603      	mov	r3, r0
 800fe0e:	2b00      	cmp	r3, #0
 800fe10:	d0e5      	beq.n	800fdde <Load_File_Num+0x12a>
 800fe12:	e05f      	b.n	800fed4 <Load_File_Num+0x220>
 800fe14:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800fe18:	2100      	movs	r1, #0
 800fe1a:	4832      	ldr	r0, [pc, #200]	; (800fee4 <Load_File_Num+0x230>)
 800fe1c:	f013 f842 	bl	8022ea4 <memset>
 800fe20:	4a34      	ldr	r2, [pc, #208]	; (800fef4 <Load_File_Num+0x240>)
 800fe22:	f107 0318 	add.w	r3, r7, #24
 800fe26:	ca07      	ldmia	r2, {r0, r1, r2}
 800fe28:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800fe2c:	f107 0218 	add.w	r2, r7, #24
 800fe30:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 800fe34:	4611      	mov	r1, r2
 800fe36:	4618      	mov	r0, r3
 800fe38:	f7ff ff1e 	bl	800fc78 <Make_Filename>
 800fe3c:	e00d      	b.n	800fe5a <Load_File_Num+0x1a6>
 800fe3e:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 800fe42:	b29b      	uxth	r3, r3
 800fe44:	3301      	adds	r3, #1
 800fe46:	b29b      	uxth	r3, r3
 800fe48:	84fb      	strh	r3, [r7, #38]	; 0x26
 800fe4a:	f107 0218 	add.w	r2, r7, #24
 800fe4e:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 800fe52:	4611      	mov	r1, r2
 800fe54:	4618      	mov	r0, r3
 800fe56:	f7ff ff0f 	bl	800fc78 <Make_Filename>
 800fe5a:	f107 030c 	add.w	r3, r7, #12
 800fe5e:	f107 0210 	add.w	r2, r7, #16
 800fe62:	f107 0118 	add.w	r1, r7, #24
 800fe66:	481f      	ldr	r0, [pc, #124]	; (800fee4 <Load_File_Num+0x230>)
 800fe68:	f7ff f9a2 	bl	800f1b0 <OpenFileRd>
 800fe6c:	4603      	mov	r3, r0
 800fe6e:	2b00      	cmp	r3, #0
 800fe70:	d0e5      	beq.n	800fe3e <Load_File_Num+0x18a>
 800fe72:	e02f      	b.n	800fed4 <Load_File_Num+0x220>
 800fe74:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800fe78:	2100      	movs	r1, #0
 800fe7a:	481a      	ldr	r0, [pc, #104]	; (800fee4 <Load_File_Num+0x230>)
 800fe7c:	f013 f812 	bl	8022ea4 <memset>
 800fe80:	4a1d      	ldr	r2, [pc, #116]	; (800fef8 <Load_File_Num+0x244>)
 800fe82:	f107 0318 	add.w	r3, r7, #24
 800fe86:	ca07      	ldmia	r2, {r0, r1, r2}
 800fe88:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800fe8c:	f107 0218 	add.w	r2, r7, #24
 800fe90:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 800fe94:	4611      	mov	r1, r2
 800fe96:	4618      	mov	r0, r3
 800fe98:	f7ff feee 	bl	800fc78 <Make_Filename>
 800fe9c:	e00d      	b.n	800feba <Load_File_Num+0x206>
 800fe9e:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 800fea2:	b29b      	uxth	r3, r3
 800fea4:	3301      	adds	r3, #1
 800fea6:	b29b      	uxth	r3, r3
 800fea8:	84fb      	strh	r3, [r7, #38]	; 0x26
 800feaa:	f107 0218 	add.w	r2, r7, #24
 800feae:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 800feb2:	4611      	mov	r1, r2
 800feb4:	4618      	mov	r0, r3
 800feb6:	f7ff fedf 	bl	800fc78 <Make_Filename>
 800feba:	f107 030c 	add.w	r3, r7, #12
 800febe:	f107 0210 	add.w	r2, r7, #16
 800fec2:	f107 0118 	add.w	r1, r7, #24
 800fec6:	4807      	ldr	r0, [pc, #28]	; (800fee4 <Load_File_Num+0x230>)
 800fec8:	f7ff f972 	bl	800f1b0 <OpenFileRd>
 800fecc:	4603      	mov	r3, r0
 800fece:	2b00      	cmp	r3, #0
 800fed0:	d0e5      	beq.n	800fe9e <Load_File_Num+0x1ea>
 800fed2:	bf00      	nop
 800fed4:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 800fed8:	4618      	mov	r0, r3
 800feda:	3728      	adds	r7, #40	; 0x28
 800fedc:	46bd      	mov	sp, r7
 800fede:	bd80      	pop	{r7, pc}
 800fee0:	08000238 	.word	0x08000238
 800fee4:	200017e0 	.word	0x200017e0
 800fee8:	080001fc 	.word	0x080001fc
 800feec:	08000208 	.word	0x08000208
 800fef0:	08000214 	.word	0x08000214
 800fef4:	08000220 	.word	0x08000220
 800fef8:	0800022c 	.word	0x0800022c

0800fefc <File_Num>:
 800fefc:	b580      	push	{r7, lr}
 800fefe:	af00      	add	r7, sp, #0
 800ff00:	201d      	movs	r0, #29
 800ff02:	f7ff fed7 	bl	800fcb4 <Load_File_Num>
 800ff06:	4603      	mov	r3, r0
 800ff08:	461a      	mov	r2, r3
 800ff0a:	4b12      	ldr	r3, [pc, #72]	; (800ff54 <File_Num+0x58>)
 800ff0c:	f8a3 20ec 	strh.w	r2, [r3, #236]	; 0xec
 800ff10:	201e      	movs	r0, #30
 800ff12:	f7ff fecf 	bl	800fcb4 <Load_File_Num>
 800ff16:	4603      	mov	r3, r0
 800ff18:	461a      	mov	r2, r3
 800ff1a:	4b0e      	ldr	r3, [pc, #56]	; (800ff54 <File_Num+0x58>)
 800ff1c:	f8a3 20f4 	strh.w	r2, [r3, #244]	; 0xf4
 800ff20:	201f      	movs	r0, #31
 800ff22:	f7ff fec7 	bl	800fcb4 <Load_File_Num>
 800ff26:	4603      	mov	r3, r0
 800ff28:	461a      	mov	r2, r3
 800ff2a:	4b0a      	ldr	r3, [pc, #40]	; (800ff54 <File_Num+0x58>)
 800ff2c:	f8a3 20fc 	strh.w	r2, [r3, #252]	; 0xfc
 800ff30:	2020      	movs	r0, #32
 800ff32:	f7ff febf 	bl	800fcb4 <Load_File_Num>
 800ff36:	4603      	mov	r3, r0
 800ff38:	461a      	mov	r2, r3
 800ff3a:	4b06      	ldr	r3, [pc, #24]	; (800ff54 <File_Num+0x58>)
 800ff3c:	f8a3 2104 	strh.w	r2, [r3, #260]	; 0x104
 800ff40:	2021      	movs	r0, #33	; 0x21
 800ff42:	f7ff feb7 	bl	800fcb4 <Load_File_Num>
 800ff46:	4603      	mov	r3, r0
 800ff48:	461a      	mov	r2, r3
 800ff4a:	4b02      	ldr	r3, [pc, #8]	; (800ff54 <File_Num+0x58>)
 800ff4c:	f8a3 210c 	strh.w	r2, [r3, #268]	; 0x10c
 800ff50:	bf00      	nop
 800ff52:	bd80      	pop	{r7, pc}
 800ff54:	2000029c 	.word	0x2000029c

0800ff58 <Load_Buf>:
 800ff58:	b580      	push	{r7, lr}
 800ff5a:	b08e      	sub	sp, #56	; 0x38
 800ff5c:	af00      	add	r7, sp, #0
 800ff5e:	4603      	mov	r3, r0
 800ff60:	80fb      	strh	r3, [r7, #6]
 800ff62:	4a66      	ldr	r2, [pc, #408]	; (80100fc <Load_Buf+0x1a4>)
 800ff64:	f107 0318 	add.w	r3, r7, #24
 800ff68:	ca07      	ldmia	r2, {r0, r1, r2}
 800ff6a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800ff6e:	2301      	movs	r3, #1
 800ff70:	62fb      	str	r3, [r7, #44]	; 0x2c
 800ff72:	f107 0218 	add.w	r2, r7, #24
 800ff76:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800ff7a:	4611      	mov	r1, r2
 800ff7c:	4618      	mov	r0, r3
 800ff7e:	f7ff fe7b 	bl	800fc78 <Make_Filename>
 800ff82:	f107 030c 	add.w	r3, r7, #12
 800ff86:	f107 0210 	add.w	r2, r7, #16
 800ff8a:	f107 0118 	add.w	r1, r7, #24
 800ff8e:	485c      	ldr	r0, [pc, #368]	; (8010100 <Load_Buf+0x1a8>)
 800ff90:	f7ff f90e 	bl	800f1b0 <OpenFileRd>
 800ff94:	4603      	mov	r3, r0
 800ff96:	62fb      	str	r3, [r7, #44]	; 0x2c
 800ff98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ff9a:	2b00      	cmp	r3, #0
 800ff9c:	d002      	beq.n	800ffa4 <Load_Buf+0x4c>
 800ff9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ffa0:	b2db      	uxtb	r3, r3
 800ffa2:	e0a6      	b.n	80100f2 <Load_Buf+0x19a>
 800ffa4:	2302      	movs	r3, #2
 800ffa6:	633b      	str	r3, [r7, #48]	; 0x30
 800ffa8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800ffac:	62bb      	str	r3, [r7, #40]	; 0x28
 800ffae:	4b55      	ldr	r3, [pc, #340]	; (8010104 <Load_Buf+0x1ac>)
 800ffb0:	f9b3 304c 	ldrsh.w	r3, [r3, #76]	; 0x4c
 800ffb4:	2b03      	cmp	r3, #3
 800ffb6:	d101      	bne.n	800ffbc <Load_Buf+0x64>
 800ffb8:	2304      	movs	r3, #4
 800ffba:	633b      	str	r3, [r7, #48]	; 0x30
 800ffbc:	2300      	movs	r3, #0
 800ffbe:	637b      	str	r3, [r7, #52]	; 0x34
 800ffc0:	e01d      	b.n	800fffe <Load_Buf+0xa6>
 800ffc2:	f107 0310 	add.w	r3, r7, #16
 800ffc6:	4619      	mov	r1, r3
 800ffc8:	484d      	ldr	r0, [pc, #308]	; (8010100 <Load_Buf+0x1a8>)
 800ffca:	f7ff fb29 	bl	800f620 <ReadFileSec>
 800ffce:	4603      	mov	r3, r0
 800ffd0:	2b00      	cmp	r3, #0
 800ffd2:	d001      	beq.n	800ffd8 <Load_Buf+0x80>
 800ffd4:	2303      	movs	r3, #3
 800ffd6:	e08c      	b.n	80100f2 <Load_Buf+0x19a>
 800ffd8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ffda:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ffdc:	fb02 f303 	mul.w	r3, r2, r3
 800ffe0:	0fda      	lsrs	r2, r3, #31
 800ffe2:	4413      	add	r3, r2
 800ffe4:	105b      	asrs	r3, r3, #1
 800ffe6:	3302      	adds	r3, #2
 800ffe8:	005b      	lsls	r3, r3, #1
 800ffea:	4a47      	ldr	r2, [pc, #284]	; (8010108 <Load_Buf+0x1b0>)
 800ffec:	4413      	add	r3, r2
 800ffee:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800fff0:	4943      	ldr	r1, [pc, #268]	; (8010100 <Load_Buf+0x1a8>)
 800fff2:	4618      	mov	r0, r3
 800fff4:	f012 ff48 	bl	8022e88 <memcpy>
 800fff8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fffa:	3301      	adds	r3, #1
 800fffc:	637b      	str	r3, [r7, #52]	; 0x34
 800fffe:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8010000:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010002:	429a      	cmp	r2, r3
 8010004:	dbdd      	blt.n	800ffc2 <Load_Buf+0x6a>
 8010006:	f107 0310 	add.w	r3, r7, #16
 801000a:	4619      	mov	r1, r3
 801000c:	483c      	ldr	r0, [pc, #240]	; (8010100 <Load_Buf+0x1a8>)
 801000e:	f7ff fb07 	bl	800f620 <ReadFileSec>
 8010012:	4603      	mov	r3, r0
 8010014:	2b00      	cmp	r3, #0
 8010016:	d001      	beq.n	801001c <Load_Buf+0xc4>
 8010018:	2303      	movs	r3, #3
 801001a:	e06a      	b.n	80100f2 <Load_Buf+0x19a>
 801001c:	4b3b      	ldr	r3, [pc, #236]	; (801010c <Load_Buf+0x1b4>)
 801001e:	627b      	str	r3, [r7, #36]	; 0x24
 8010020:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010022:	1c9a      	adds	r2, r3, #2
 8010024:	627a      	str	r2, [r7, #36]	; 0x24
 8010026:	f64a 2255 	movw	r2, #43605	; 0xaa55
 801002a:	801a      	strh	r2, [r3, #0]
 801002c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801002e:	1c9a      	adds	r2, r3, #2
 8010030:	627a      	str	r2, [r7, #36]	; 0x24
 8010032:	4a35      	ldr	r2, [pc, #212]	; (8010108 <Load_Buf+0x1b0>)
 8010034:	f9b2 2000 	ldrsh.w	r2, [r2]
 8010038:	801a      	strh	r2, [r3, #0]
 801003a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801003c:	1c9a      	adds	r2, r3, #2
 801003e:	627a      	str	r2, [r7, #36]	; 0x24
 8010040:	4a31      	ldr	r2, [pc, #196]	; (8010108 <Load_Buf+0x1b0>)
 8010042:	f9b2 2002 	ldrsh.w	r2, [r2, #2]
 8010046:	801a      	strh	r2, [r3, #0]
 8010048:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801004a:	1c9a      	adds	r2, r3, #2
 801004c:	627a      	str	r2, [r7, #36]	; 0x24
 801004e:	4a2d      	ldr	r2, [pc, #180]	; (8010104 <Load_Buf+0x1ac>)
 8010050:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 8010054:	801a      	strh	r2, [r3, #0]
 8010056:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010058:	1c9a      	adds	r2, r3, #2
 801005a:	627a      	str	r2, [r7, #36]	; 0x24
 801005c:	4a29      	ldr	r2, [pc, #164]	; (8010104 <Load_Buf+0x1ac>)
 801005e:	f9b2 2014 	ldrsh.w	r2, [r2, #20]
 8010062:	801a      	strh	r2, [r3, #0]
 8010064:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010066:	1c9a      	adds	r2, r3, #2
 8010068:	627a      	str	r2, [r7, #36]	; 0x24
 801006a:	4a26      	ldr	r2, [pc, #152]	; (8010104 <Load_Buf+0x1ac>)
 801006c:	f9b2 204c 	ldrsh.w	r2, [r2, #76]	; 0x4c
 8010070:	801a      	strh	r2, [r3, #0]
 8010072:	4b23      	ldr	r3, [pc, #140]	; (8010100 <Load_Buf+0x1a8>)
 8010074:	627b      	str	r3, [r7, #36]	; 0x24
 8010076:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010078:	1c9a      	adds	r2, r3, #2
 801007a:	627a      	str	r2, [r7, #36]	; 0x24
 801007c:	f9b3 2000 	ldrsh.w	r2, [r3]
 8010080:	4b21      	ldr	r3, [pc, #132]	; (8010108 <Load_Buf+0x1b0>)
 8010082:	801a      	strh	r2, [r3, #0]
 8010084:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010086:	1c9a      	adds	r2, r3, #2
 8010088:	627a      	str	r2, [r7, #36]	; 0x24
 801008a:	f9b3 2000 	ldrsh.w	r2, [r3]
 801008e:	4b1e      	ldr	r3, [pc, #120]	; (8010108 <Load_Buf+0x1b0>)
 8010090:	805a      	strh	r2, [r3, #2]
 8010092:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010094:	1c9a      	adds	r2, r3, #2
 8010096:	627a      	str	r2, [r7, #36]	; 0x24
 8010098:	f9b3 2000 	ldrsh.w	r2, [r3]
 801009c:	4b19      	ldr	r3, [pc, #100]	; (8010104 <Load_Buf+0x1ac>)
 801009e:	809a      	strh	r2, [r3, #4]
 80100a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80100a2:	1c9a      	adds	r2, r3, #2
 80100a4:	627a      	str	r2, [r7, #36]	; 0x24
 80100a6:	f9b3 2000 	ldrsh.w	r2, [r3]
 80100aa:	4b16      	ldr	r3, [pc, #88]	; (8010104 <Load_Buf+0x1ac>)
 80100ac:	829a      	strh	r2, [r3, #20]
 80100ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80100b0:	1c9a      	adds	r2, r3, #2
 80100b2:	627a      	str	r2, [r7, #36]	; 0x24
 80100b4:	f9b3 2000 	ldrsh.w	r2, [r3]
 80100b8:	4b12      	ldr	r3, [pc, #72]	; (8010104 <Load_Buf+0x1ac>)
 80100ba:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
 80100be:	4b14      	ldr	r3, [pc, #80]	; (8010110 <Load_Buf+0x1b8>)
 80100c0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80100c4:	f043 0301 	orr.w	r3, r3, #1
 80100c8:	b21a      	sxth	r2, r3
 80100ca:	4b11      	ldr	r3, [pc, #68]	; (8010110 <Load_Buf+0x1b8>)
 80100cc:	801a      	strh	r2, [r3, #0]
 80100ce:	f004 fa51 	bl	8014574 <DispStatus>
 80100d2:	4b0c      	ldr	r3, [pc, #48]	; (8010104 <Load_Buf+0x1ac>)
 80100d4:	f9b3 311c 	ldrsh.w	r3, [r3, #284]	; 0x11c
 80100d8:	2b62      	cmp	r3, #98	; 0x62
 80100da:	dc09      	bgt.n	80100f0 <Load_Buf+0x198>
 80100dc:	4b09      	ldr	r3, [pc, #36]	; (8010104 <Load_Buf+0x1ac>)
 80100de:	f9b3 311c 	ldrsh.w	r3, [r3, #284]	; 0x11c
 80100e2:	b29b      	uxth	r3, r3
 80100e4:	3301      	adds	r3, #1
 80100e6:	b29b      	uxth	r3, r3
 80100e8:	b21a      	sxth	r2, r3
 80100ea:	4b06      	ldr	r3, [pc, #24]	; (8010104 <Load_Buf+0x1ac>)
 80100ec:	f8a3 211c 	strh.w	r2, [r3, #284]	; 0x11c
 80100f0:	2300      	movs	r3, #0
 80100f2:	4618      	mov	r0, r3
 80100f4:	3738      	adds	r7, #56	; 0x38
 80100f6:	46bd      	mov	sp, r7
 80100f8:	bd80      	pop	{r7, pc}
 80100fa:	bf00      	nop
 80100fc:	08000214 	.word	0x08000214
 8010100:	200017e0 	.word	0x200017e0
 8010104:	2000029c 	.word	0x2000029c
 8010108:	20002878 	.word	0x20002878
 801010c:	200015e0 	.word	0x200015e0
 8010110:	200007a8 	.word	0x200007a8

08010114 <Save_Buf>:
 8010114:	b580      	push	{r7, lr}
 8010116:	b08e      	sub	sp, #56	; 0x38
 8010118:	af00      	add	r7, sp, #0
 801011a:	4603      	mov	r3, r0
 801011c:	80fb      	strh	r3, [r7, #6]
 801011e:	4a64      	ldr	r2, [pc, #400]	; (80102b0 <Save_Buf+0x19c>)
 8010120:	f107 0318 	add.w	r3, r7, #24
 8010124:	ca07      	ldmia	r2, {r0, r1, r2}
 8010126:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 801012a:	2300      	movs	r3, #0
 801012c:	637b      	str	r3, [r7, #52]	; 0x34
 801012e:	2304      	movs	r3, #4
 8010130:	62fb      	str	r3, [r7, #44]	; 0x2c
 8010132:	2300      	movs	r3, #0
 8010134:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8010138:	2302      	movs	r3, #2
 801013a:	863b      	strh	r3, [r7, #48]	; 0x30
 801013c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8010140:	857b      	strh	r3, [r7, #42]	; 0x2a
 8010142:	4b5c      	ldr	r3, [pc, #368]	; (80102b4 <Save_Buf+0x1a0>)
 8010144:	f9b3 304c 	ldrsh.w	r3, [r3, #76]	; 0x4c
 8010148:	2b03      	cmp	r3, #3
 801014a:	d101      	bne.n	8010150 <Save_Buf+0x3c>
 801014c:	2304      	movs	r3, #4
 801014e:	863b      	strh	r3, [r7, #48]	; 0x30
 8010150:	f107 0218 	add.w	r2, r7, #24
 8010154:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8010158:	4611      	mov	r1, r2
 801015a:	4618      	mov	r0, r3
 801015c:	f7ff fd8c 	bl	800fc78 <Make_Filename>
 8010160:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8010164:	2100      	movs	r1, #0
 8010166:	4854      	ldr	r0, [pc, #336]	; (80102b8 <Save_Buf+0x1a4>)
 8010168:	f012 fe9c 	bl	8022ea4 <memset>
 801016c:	f107 030c 	add.w	r3, r7, #12
 8010170:	f107 0210 	add.w	r2, r7, #16
 8010174:	f107 0118 	add.w	r1, r7, #24
 8010178:	484f      	ldr	r0, [pc, #316]	; (80102b8 <Save_Buf+0x1a4>)
 801017a:	f7ff fae3 	bl	800f744 <OpenFileWr>
 801017e:	4603      	mov	r3, r0
 8010180:	2b00      	cmp	r3, #0
 8010182:	d002      	beq.n	801018a <Save_Buf+0x76>
 8010184:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010186:	b2db      	uxtb	r3, r3
 8010188:	e08e      	b.n	80102a8 <Save_Buf+0x194>
 801018a:	2300      	movs	r3, #0
 801018c:	637b      	str	r3, [r7, #52]	; 0x34
 801018e:	e02f      	b.n	80101f0 <Save_Buf+0xdc>
 8010190:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8010194:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8010196:	fb02 f303 	mul.w	r3, r2, r3
 801019a:	0fda      	lsrs	r2, r3, #31
 801019c:	4413      	add	r3, r2
 801019e:	105b      	asrs	r3, r3, #1
 80101a0:	3302      	adds	r3, #2
 80101a2:	005b      	lsls	r3, r3, #1
 80101a4:	4a45      	ldr	r2, [pc, #276]	; (80102bc <Save_Buf+0x1a8>)
 80101a6:	4413      	add	r3, r2
 80101a8:	f9b7 202a 	ldrsh.w	r2, [r7, #42]	; 0x2a
 80101ac:	4619      	mov	r1, r3
 80101ae:	4842      	ldr	r0, [pc, #264]	; (80102b8 <Save_Buf+0x1a4>)
 80101b0:	f012 fe6a 	bl	8022e88 <memcpy>
 80101b4:	f107 0310 	add.w	r3, r7, #16
 80101b8:	4619      	mov	r1, r3
 80101ba:	483f      	ldr	r0, [pc, #252]	; (80102b8 <Save_Buf+0x1a4>)
 80101bc:	f7ff f9ea 	bl	800f594 <ProgFileSec>
 80101c0:	4603      	mov	r3, r0
 80101c2:	2b00      	cmp	r3, #0
 80101c4:	d001      	beq.n	80101ca <Save_Buf+0xb6>
 80101c6:	2303      	movs	r3, #3
 80101c8:	e06e      	b.n	80102a8 <Save_Buf+0x194>
 80101ca:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80101ce:	1c5a      	adds	r2, r3, #1
 80101d0:	f887 2033 	strb.w	r2, [r7, #51]	; 0x33
 80101d4:	085b      	lsrs	r3, r3, #1
 80101d6:	b2db      	uxtb	r3, r3
 80101d8:	f003 0303 	and.w	r3, r3, #3
 80101dc:	b2db      	uxtb	r3, r3
 80101de:	461a      	mov	r2, r3
 80101e0:	2102      	movs	r1, #2
 80101e2:	f44f 7084 	mov.w	r0, #264	; 0x108
 80101e6:	f7ff fb8f 	bl	800f908 <PrintClk>
 80101ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80101ec:	3301      	adds	r3, #1
 80101ee:	637b      	str	r3, [r7, #52]	; 0x34
 80101f0:	f9b7 3030 	ldrsh.w	r3, [r7, #48]	; 0x30
 80101f4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80101f6:	429a      	cmp	r2, r3
 80101f8:	dbca      	blt.n	8010190 <Save_Buf+0x7c>
 80101fa:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 80101fe:	461a      	mov	r2, r3
 8010200:	2100      	movs	r1, #0
 8010202:	482d      	ldr	r0, [pc, #180]	; (80102b8 <Save_Buf+0x1a4>)
 8010204:	f012 fe4e 	bl	8022ea4 <memset>
 8010208:	4b2b      	ldr	r3, [pc, #172]	; (80102b8 <Save_Buf+0x1a4>)
 801020a:	627b      	str	r3, [r7, #36]	; 0x24
 801020c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801020e:	1c9a      	adds	r2, r3, #2
 8010210:	627a      	str	r2, [r7, #36]	; 0x24
 8010212:	4a2a      	ldr	r2, [pc, #168]	; (80102bc <Save_Buf+0x1a8>)
 8010214:	f9b2 2000 	ldrsh.w	r2, [r2]
 8010218:	801a      	strh	r2, [r3, #0]
 801021a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801021c:	1c9a      	adds	r2, r3, #2
 801021e:	627a      	str	r2, [r7, #36]	; 0x24
 8010220:	4a26      	ldr	r2, [pc, #152]	; (80102bc <Save_Buf+0x1a8>)
 8010222:	f9b2 2002 	ldrsh.w	r2, [r2, #2]
 8010226:	801a      	strh	r2, [r3, #0]
 8010228:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801022a:	1c9a      	adds	r2, r3, #2
 801022c:	627a      	str	r2, [r7, #36]	; 0x24
 801022e:	4a21      	ldr	r2, [pc, #132]	; (80102b4 <Save_Buf+0x1a0>)
 8010230:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 8010234:	801a      	strh	r2, [r3, #0]
 8010236:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010238:	1c9a      	adds	r2, r3, #2
 801023a:	627a      	str	r2, [r7, #36]	; 0x24
 801023c:	4a1d      	ldr	r2, [pc, #116]	; (80102b4 <Save_Buf+0x1a0>)
 801023e:	f9b2 2014 	ldrsh.w	r2, [r2, #20]
 8010242:	801a      	strh	r2, [r3, #0]
 8010244:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010246:	1c9a      	adds	r2, r3, #2
 8010248:	627a      	str	r2, [r7, #36]	; 0x24
 801024a:	4a1a      	ldr	r2, [pc, #104]	; (80102b4 <Save_Buf+0x1a0>)
 801024c:	f9b2 204c 	ldrsh.w	r2, [r2, #76]	; 0x4c
 8010250:	801a      	strh	r2, [r3, #0]
 8010252:	f107 0310 	add.w	r3, r7, #16
 8010256:	4619      	mov	r1, r3
 8010258:	4817      	ldr	r0, [pc, #92]	; (80102b8 <Save_Buf+0x1a4>)
 801025a:	f7ff f99b 	bl	800f594 <ProgFileSec>
 801025e:	4603      	mov	r3, r0
 8010260:	2b00      	cmp	r3, #0
 8010262:	d001      	beq.n	8010268 <Save_Buf+0x154>
 8010264:	2303      	movs	r3, #3
 8010266:	e01f      	b.n	80102a8 <Save_Buf+0x194>
 8010268:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 801026c:	f503 5100 	add.w	r1, r3, #8192	; 0x2000
 8010270:	f107 030c 	add.w	r3, r7, #12
 8010274:	f107 0210 	add.w	r2, r7, #16
 8010278:	480f      	ldr	r0, [pc, #60]	; (80102b8 <Save_Buf+0x1a4>)
 801027a:	f7ff f9ff 	bl	800f67c <CloseFile>
 801027e:	4603      	mov	r3, r0
 8010280:	2b00      	cmp	r3, #0
 8010282:	d001      	beq.n	8010288 <Save_Buf+0x174>
 8010284:	2303      	movs	r3, #3
 8010286:	e00f      	b.n	80102a8 <Save_Buf+0x194>
 8010288:	4b0a      	ldr	r3, [pc, #40]	; (80102b4 <Save_Buf+0x1a0>)
 801028a:	f9b3 30fc 	ldrsh.w	r3, [r3, #252]	; 0xfc
 801028e:	2b62      	cmp	r3, #98	; 0x62
 8010290:	dc09      	bgt.n	80102a6 <Save_Buf+0x192>
 8010292:	4b08      	ldr	r3, [pc, #32]	; (80102b4 <Save_Buf+0x1a0>)
 8010294:	f9b3 30fc 	ldrsh.w	r3, [r3, #252]	; 0xfc
 8010298:	b29b      	uxth	r3, r3
 801029a:	3301      	adds	r3, #1
 801029c:	b29b      	uxth	r3, r3
 801029e:	b21a      	sxth	r2, r3
 80102a0:	4b04      	ldr	r3, [pc, #16]	; (80102b4 <Save_Buf+0x1a0>)
 80102a2:	f8a3 20fc 	strh.w	r2, [r3, #252]	; 0xfc
 80102a6:	2300      	movs	r3, #0
 80102a8:	4618      	mov	r0, r3
 80102aa:	3738      	adds	r7, #56	; 0x38
 80102ac:	46bd      	mov	sp, r7
 80102ae:	bd80      	pop	{r7, pc}
 80102b0:	08000214 	.word	0x08000214
 80102b4:	2000029c 	.word	0x2000029c
 80102b8:	200017e0 	.word	0x200017e0
 80102bc:	20002878 	.word	0x20002878

080102c0 <Save_Dat>:
 80102c0:	b580      	push	{r7, lr}
 80102c2:	b08a      	sub	sp, #40	; 0x28
 80102c4:	af00      	add	r7, sp, #0
 80102c6:	4603      	mov	r3, r0
 80102c8:	80fb      	strh	r3, [r7, #6]
 80102ca:	4a42      	ldr	r2, [pc, #264]	; (80103d4 <Save_Dat+0x114>)
 80102cc:	f107 0318 	add.w	r3, r7, #24
 80102d0:	ca07      	ldmia	r2, {r0, r1, r2}
 80102d2:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80102d6:	2304      	movs	r3, #4
 80102d8:	84fb      	strh	r3, [r7, #38]	; 0x26
 80102da:	f107 0218 	add.w	r2, r7, #24
 80102de:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80102e2:	4611      	mov	r1, r2
 80102e4:	4618      	mov	r0, r3
 80102e6:	f7ff fcc7 	bl	800fc78 <Make_Filename>
 80102ea:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80102ee:	2100      	movs	r1, #0
 80102f0:	4839      	ldr	r0, [pc, #228]	; (80103d8 <Save_Dat+0x118>)
 80102f2:	f012 fdd7 	bl	8022ea4 <memset>
 80102f6:	f107 030c 	add.w	r3, r7, #12
 80102fa:	f107 0210 	add.w	r2, r7, #16
 80102fe:	f107 0118 	add.w	r1, r7, #24
 8010302:	4835      	ldr	r0, [pc, #212]	; (80103d8 <Save_Dat+0x118>)
 8010304:	f7ff fa1e 	bl	800f744 <OpenFileWr>
 8010308:	4603      	mov	r3, r0
 801030a:	2b00      	cmp	r3, #0
 801030c:	d002      	beq.n	8010314 <Save_Dat+0x54>
 801030e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8010310:	b2db      	uxtb	r3, r3
 8010312:	e05b      	b.n	80103cc <Save_Dat+0x10c>
 8010314:	4b30      	ldr	r3, [pc, #192]	; (80103d8 <Save_Dat+0x118>)
 8010316:	2201      	movs	r2, #1
 8010318:	701a      	strb	r2, [r3, #0]
 801031a:	4b30      	ldr	r3, [pc, #192]	; (80103dc <Save_Dat+0x11c>)
 801031c:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 8010320:	b2da      	uxtb	r2, r3
 8010322:	4b2d      	ldr	r3, [pc, #180]	; (80103d8 <Save_Dat+0x118>)
 8010324:	705a      	strb	r2, [r3, #1]
 8010326:	4b2d      	ldr	r3, [pc, #180]	; (80103dc <Save_Dat+0x11c>)
 8010328:	f9b3 30dc 	ldrsh.w	r3, [r3, #220]	; 0xdc
 801032c:	b2da      	uxtb	r2, r3
 801032e:	4b2a      	ldr	r3, [pc, #168]	; (80103d8 <Save_Dat+0x118>)
 8010330:	709a      	strb	r2, [r3, #2]
 8010332:	4b2a      	ldr	r3, [pc, #168]	; (80103dc <Save_Dat+0x11c>)
 8010334:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8010338:	b2da      	uxtb	r2, r3
 801033a:	4b27      	ldr	r3, [pc, #156]	; (80103d8 <Save_Dat+0x118>)
 801033c:	70da      	strb	r2, [r3, #3]
 801033e:	4b27      	ldr	r3, [pc, #156]	; (80103dc <Save_Dat+0x11c>)
 8010340:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8010344:	b2da      	uxtb	r2, r3
 8010346:	4b24      	ldr	r3, [pc, #144]	; (80103d8 <Save_Dat+0x118>)
 8010348:	711a      	strb	r2, [r3, #4]
 801034a:	4b24      	ldr	r3, [pc, #144]	; (80103dc <Save_Dat+0x11c>)
 801034c:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8010350:	b2da      	uxtb	r2, r3
 8010352:	4b21      	ldr	r3, [pc, #132]	; (80103d8 <Save_Dat+0x118>)
 8010354:	715a      	strb	r2, [r3, #5]
 8010356:	4b21      	ldr	r3, [pc, #132]	; (80103dc <Save_Dat+0x11c>)
 8010358:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 801035c:	b2da      	uxtb	r2, r3
 801035e:	4b1e      	ldr	r3, [pc, #120]	; (80103d8 <Save_Dat+0x118>)
 8010360:	719a      	strb	r2, [r3, #6]
 8010362:	4b1e      	ldr	r3, [pc, #120]	; (80103dc <Save_Dat+0x11c>)
 8010364:	f9b3 3074 	ldrsh.w	r3, [r3, #116]	; 0x74
 8010368:	b2da      	uxtb	r2, r3
 801036a:	4b1b      	ldr	r3, [pc, #108]	; (80103d8 <Save_Dat+0x118>)
 801036c:	71da      	strb	r2, [r3, #7]
 801036e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8010372:	491b      	ldr	r1, [pc, #108]	; (80103e0 <Save_Dat+0x120>)
 8010374:	481b      	ldr	r0, [pc, #108]	; (80103e4 <Save_Dat+0x124>)
 8010376:	f012 fd87 	bl	8022e88 <memcpy>
 801037a:	f107 0310 	add.w	r3, r7, #16
 801037e:	4619      	mov	r1, r3
 8010380:	4815      	ldr	r0, [pc, #84]	; (80103d8 <Save_Dat+0x118>)
 8010382:	f7ff f907 	bl	800f594 <ProgFileSec>
 8010386:	4603      	mov	r3, r0
 8010388:	2b00      	cmp	r3, #0
 801038a:	d001      	beq.n	8010390 <Save_Dat+0xd0>
 801038c:	2303      	movs	r3, #3
 801038e:	e01d      	b.n	80103cc <Save_Dat+0x10c>
 8010390:	f107 030c 	add.w	r3, r7, #12
 8010394:	f107 0210 	add.w	r2, r7, #16
 8010398:	f44f 7100 	mov.w	r1, #512	; 0x200
 801039c:	480e      	ldr	r0, [pc, #56]	; (80103d8 <Save_Dat+0x118>)
 801039e:	f7ff f96d 	bl	800f67c <CloseFile>
 80103a2:	4603      	mov	r3, r0
 80103a4:	2b00      	cmp	r3, #0
 80103a6:	d001      	beq.n	80103ac <Save_Dat+0xec>
 80103a8:	2303      	movs	r3, #3
 80103aa:	e00f      	b.n	80103cc <Save_Dat+0x10c>
 80103ac:	4b0b      	ldr	r3, [pc, #44]	; (80103dc <Save_Dat+0x11c>)
 80103ae:	f9b3 30f4 	ldrsh.w	r3, [r3, #244]	; 0xf4
 80103b2:	2b62      	cmp	r3, #98	; 0x62
 80103b4:	dc09      	bgt.n	80103ca <Save_Dat+0x10a>
 80103b6:	4b09      	ldr	r3, [pc, #36]	; (80103dc <Save_Dat+0x11c>)
 80103b8:	f9b3 30f4 	ldrsh.w	r3, [r3, #244]	; 0xf4
 80103bc:	b29b      	uxth	r3, r3
 80103be:	3301      	adds	r3, #1
 80103c0:	b29b      	uxth	r3, r3
 80103c2:	b21a      	sxth	r2, r3
 80103c4:	4b05      	ldr	r3, [pc, #20]	; (80103dc <Save_Dat+0x11c>)
 80103c6:	f8a3 20f4 	strh.w	r2, [r3, #244]	; 0xf4
 80103ca:	2300      	movs	r3, #0
 80103cc:	4618      	mov	r0, r3
 80103ce:	3728      	adds	r7, #40	; 0x28
 80103d0:	46bd      	mov	sp, r7
 80103d2:	bd80      	pop	{r7, pc}
 80103d4:	08000208 	.word	0x08000208
 80103d8:	200017e0 	.word	0x200017e0
 80103dc:	2000029c 	.word	0x2000029c
 80103e0:	20000c10 	.word	0x20000c10
 80103e4:	200017ea 	.word	0x200017ea

080103e8 <Load_Dat>:
 80103e8:	b580      	push	{r7, lr}
 80103ea:	b08a      	sub	sp, #40	; 0x28
 80103ec:	af00      	add	r7, sp, #0
 80103ee:	4603      	mov	r3, r0
 80103f0:	80fb      	strh	r3, [r7, #6]
 80103f2:	4a4f      	ldr	r2, [pc, #316]	; (8010530 <Load_Dat+0x148>)
 80103f4:	f107 0314 	add.w	r3, r7, #20
 80103f8:	ca07      	ldmia	r2, {r0, r1, r2}
 80103fa:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80103fe:	2300      	movs	r3, #0
 8010400:	847b      	strh	r3, [r7, #34]	; 0x22
 8010402:	f107 0214 	add.w	r2, r7, #20
 8010406:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801040a:	4611      	mov	r1, r2
 801040c:	4618      	mov	r0, r3
 801040e:	f7ff fc33 	bl	800fc78 <Make_Filename>
 8010412:	f107 0308 	add.w	r3, r7, #8
 8010416:	f107 020c 	add.w	r2, r7, #12
 801041a:	f107 0114 	add.w	r1, r7, #20
 801041e:	4845      	ldr	r0, [pc, #276]	; (8010534 <Load_Dat+0x14c>)
 8010420:	f7fe fec6 	bl	800f1b0 <OpenFileRd>
 8010424:	4603      	mov	r3, r0
 8010426:	847b      	strh	r3, [r7, #34]	; 0x22
 8010428:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 801042c:	2b00      	cmp	r3, #0
 801042e:	d002      	beq.n	8010436 <Load_Dat+0x4e>
 8010430:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8010432:	b2db      	uxtb	r3, r3
 8010434:	e077      	b.n	8010526 <Load_Dat+0x13e>
 8010436:	f107 030c 	add.w	r3, r7, #12
 801043a:	4619      	mov	r1, r3
 801043c:	483d      	ldr	r0, [pc, #244]	; (8010534 <Load_Dat+0x14c>)
 801043e:	f7ff f8ef 	bl	800f620 <ReadFileSec>
 8010442:	4603      	mov	r3, r0
 8010444:	2b00      	cmp	r3, #0
 8010446:	d001      	beq.n	801044c <Load_Dat+0x64>
 8010448:	2303      	movs	r3, #3
 801044a:	e06c      	b.n	8010526 <Load_Dat+0x13e>
 801044c:	f44f 729b 	mov.w	r2, #310	; 0x136
 8010450:	4938      	ldr	r1, [pc, #224]	; (8010534 <Load_Dat+0x14c>)
 8010452:	4839      	ldr	r0, [pc, #228]	; (8010538 <Load_Dat+0x150>)
 8010454:	f012 fd18 	bl	8022e88 <memcpy>
 8010458:	4b36      	ldr	r3, [pc, #216]	; (8010534 <Load_Dat+0x14c>)
 801045a:	78db      	ldrb	r3, [r3, #3]
 801045c:	b21a      	sxth	r2, r3
 801045e:	4b37      	ldr	r3, [pc, #220]	; (801053c <Load_Dat+0x154>)
 8010460:	879a      	strh	r2, [r3, #60]	; 0x3c
 8010462:	4b34      	ldr	r3, [pc, #208]	; (8010534 <Load_Dat+0x14c>)
 8010464:	791b      	ldrb	r3, [r3, #4]
 8010466:	b21a      	sxth	r2, r3
 8010468:	4b34      	ldr	r3, [pc, #208]	; (801053c <Load_Dat+0x154>)
 801046a:	809a      	strh	r2, [r3, #4]
 801046c:	4b31      	ldr	r3, [pc, #196]	; (8010534 <Load_Dat+0x14c>)
 801046e:	795b      	ldrb	r3, [r3, #5]
 8010470:	b21a      	sxth	r2, r3
 8010472:	4b32      	ldr	r3, [pc, #200]	; (801053c <Load_Dat+0x154>)
 8010474:	819a      	strh	r2, [r3, #12]
 8010476:	4b2f      	ldr	r3, [pc, #188]	; (8010534 <Load_Dat+0x14c>)
 8010478:	799b      	ldrb	r3, [r3, #6]
 801047a:	b21a      	sxth	r2, r3
 801047c:	4b2f      	ldr	r3, [pc, #188]	; (801053c <Load_Dat+0x154>)
 801047e:	829a      	strh	r2, [r3, #20]
 8010480:	4b2c      	ldr	r3, [pc, #176]	; (8010534 <Load_Dat+0x14c>)
 8010482:	79db      	ldrb	r3, [r3, #7]
 8010484:	b21a      	sxth	r2, r3
 8010486:	4b2d      	ldr	r3, [pc, #180]	; (801053c <Load_Dat+0x154>)
 8010488:	f8a3 2074 	strh.w	r2, [r3, #116]	; 0x74
 801048c:	2300      	movs	r3, #0
 801048e:	627b      	str	r3, [r7, #36]	; 0x24
 8010490:	e010      	b.n	80104b4 <Load_Dat+0xcc>
 8010492:	4a2a      	ldr	r2, [pc, #168]	; (801053c <Load_Dat+0x154>)
 8010494:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010496:	00db      	lsls	r3, r3, #3
 8010498:	4413      	add	r3, r2
 801049a:	799b      	ldrb	r3, [r3, #6]
 801049c:	f043 0320 	orr.w	r3, r3, #32
 80104a0:	b2d9      	uxtb	r1, r3
 80104a2:	4a26      	ldr	r2, [pc, #152]	; (801053c <Load_Dat+0x154>)
 80104a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80104a6:	00db      	lsls	r3, r3, #3
 80104a8:	4413      	add	r3, r2
 80104aa:	460a      	mov	r2, r1
 80104ac:	719a      	strb	r2, [r3, #6]
 80104ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80104b0:	3301      	adds	r3, #1
 80104b2:	627b      	str	r3, [r7, #36]	; 0x24
 80104b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80104b6:	2b03      	cmp	r3, #3
 80104b8:	ddeb      	ble.n	8010492 <Load_Dat+0xaa>
 80104ba:	4b20      	ldr	r3, [pc, #128]	; (801053c <Load_Dat+0x154>)
 80104bc:	f893 30d6 	ldrb.w	r3, [r3, #214]	; 0xd6
 80104c0:	f043 0320 	orr.w	r3, r3, #32
 80104c4:	b2da      	uxtb	r2, r3
 80104c6:	4b1d      	ldr	r3, [pc, #116]	; (801053c <Load_Dat+0x154>)
 80104c8:	f883 20d6 	strb.w	r2, [r3, #214]	; 0xd6
 80104cc:	4b1b      	ldr	r3, [pc, #108]	; (801053c <Load_Dat+0x154>)
 80104ce:	f893 30de 	ldrb.w	r3, [r3, #222]	; 0xde
 80104d2:	f043 0320 	orr.w	r3, r3, #32
 80104d6:	b2da      	uxtb	r2, r3
 80104d8:	4b18      	ldr	r3, [pc, #96]	; (801053c <Load_Dat+0x154>)
 80104da:	f883 20de 	strb.w	r2, [r3, #222]	; 0xde
 80104de:	4b17      	ldr	r3, [pc, #92]	; (801053c <Load_Dat+0x154>)
 80104e0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80104e4:	f043 0320 	orr.w	r3, r3, #32
 80104e8:	b2da      	uxtb	r2, r3
 80104ea:	4b14      	ldr	r3, [pc, #80]	; (801053c <Load_Dat+0x154>)
 80104ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80104f0:	4b12      	ldr	r3, [pc, #72]	; (801053c <Load_Dat+0x154>)
 80104f2:	f893 3076 	ldrb.w	r3, [r3, #118]	; 0x76
 80104f6:	f043 0320 	orr.w	r3, r3, #32
 80104fa:	b2da      	uxtb	r2, r3
 80104fc:	4b0f      	ldr	r3, [pc, #60]	; (801053c <Load_Dat+0x154>)
 80104fe:	f883 2076 	strb.w	r2, [r3, #118]	; 0x76
 8010502:	f002 ffab 	bl	801345c <Update_Detail>
 8010506:	4b0d      	ldr	r3, [pc, #52]	; (801053c <Load_Dat+0x154>)
 8010508:	f9b3 3114 	ldrsh.w	r3, [r3, #276]	; 0x114
 801050c:	2b62      	cmp	r3, #98	; 0x62
 801050e:	dc09      	bgt.n	8010524 <Load_Dat+0x13c>
 8010510:	4b0a      	ldr	r3, [pc, #40]	; (801053c <Load_Dat+0x154>)
 8010512:	f9b3 3114 	ldrsh.w	r3, [r3, #276]	; 0x114
 8010516:	b29b      	uxth	r3, r3
 8010518:	3301      	adds	r3, #1
 801051a:	b29b      	uxth	r3, r3
 801051c:	b21a      	sxth	r2, r3
 801051e:	4b07      	ldr	r3, [pc, #28]	; (801053c <Load_Dat+0x154>)
 8010520:	f8a3 2114 	strh.w	r2, [r3, #276]	; 0x114
 8010524:	2300      	movs	r3, #0
 8010526:	4618      	mov	r0, r3
 8010528:	3728      	adds	r7, #40	; 0x28
 801052a:	46bd      	mov	sp, r7
 801052c:	bd80      	pop	{r7, pc}
 801052e:	bf00      	nop
 8010530:	08000208 	.word	0x08000208
 8010534:	200017e0 	.word	0x200017e0
 8010538:	2000000c 	.word	0x2000000c
 801053c:	2000029c 	.word	0x2000029c

08010540 <Save_Bmp>:
 8010540:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010542:	b08f      	sub	sp, #60	; 0x3c
 8010544:	af00      	add	r7, sp, #0
 8010546:	4603      	mov	r3, r0
 8010548:	80fb      	strh	r3, [r7, #6]
 801054a:	4aaa      	ldr	r2, [pc, #680]	; (80107f4 <Save_Bmp+0x2b4>)
 801054c:	f107 0314 	add.w	r3, r7, #20
 8010550:	ca07      	ldmia	r2, {r0, r1, r2}
 8010552:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8010556:	2304      	movs	r3, #4
 8010558:	62bb      	str	r3, [r7, #40]	; 0x28
 801055a:	2336      	movs	r3, #54	; 0x36
 801055c:	867b      	strh	r3, [r7, #50]	; 0x32
 801055e:	2300      	movs	r3, #0
 8010560:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8010562:	2300      	movs	r3, #0
 8010564:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8010566:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 801056a:	627b      	str	r3, [r7, #36]	; 0x24
 801056c:	4ba2      	ldr	r3, [pc, #648]	; (80107f8 <Save_Bmp+0x2b8>)
 801056e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8010572:	2b05      	cmp	r3, #5
 8010574:	d105      	bne.n	8010582 <Save_Bmp+0x42>
 8010576:	f7fe f9c5 	bl	800e904 <Close_Pop>
 801057a:	49a0      	ldr	r1, [pc, #640]	; (80107fc <Save_Bmp+0x2bc>)
 801057c:	48a0      	ldr	r0, [pc, #640]	; (8010800 <Save_Bmp+0x2c0>)
 801057e:	f7fd f9c1 	bl	800d904 <DrawWindow>
 8010582:	f107 0214 	add.w	r2, r7, #20
 8010586:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801058a:	4611      	mov	r1, r2
 801058c:	4618      	mov	r0, r3
 801058e:	f7ff fb73 	bl	800fc78 <Make_Filename>
 8010592:	f107 0308 	add.w	r3, r7, #8
 8010596:	f107 020c 	add.w	r2, r7, #12
 801059a:	f107 0114 	add.w	r1, r7, #20
 801059e:	4899      	ldr	r0, [pc, #612]	; (8010804 <Save_Bmp+0x2c4>)
 80105a0:	f7ff f8d0 	bl	800f744 <OpenFileWr>
 80105a4:	4603      	mov	r3, r0
 80105a6:	2b00      	cmp	r3, #0
 80105a8:	d002      	beq.n	80105b0 <Save_Bmp+0x70>
 80105aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80105ac:	b2db      	uxtb	r3, r3
 80105ae:	e11c      	b.n	80107ea <Save_Bmp+0x2aa>
 80105b0:	4b94      	ldr	r3, [pc, #592]	; (8010804 <Save_Bmp+0x2c4>)
 80105b2:	4a95      	ldr	r2, [pc, #596]	; (8010808 <Save_Bmp+0x2c8>)
 80105b4:	4614      	mov	r4, r2
 80105b6:	469c      	mov	ip, r3
 80105b8:	f104 0e30 	add.w	lr, r4, #48	; 0x30
 80105bc:	4665      	mov	r5, ip
 80105be:	4626      	mov	r6, r4
 80105c0:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80105c2:	6028      	str	r0, [r5, #0]
 80105c4:	6069      	str	r1, [r5, #4]
 80105c6:	60aa      	str	r2, [r5, #8]
 80105c8:	60eb      	str	r3, [r5, #12]
 80105ca:	3410      	adds	r4, #16
 80105cc:	f10c 0c10 	add.w	ip, ip, #16
 80105d0:	4574      	cmp	r4, lr
 80105d2:	d1f3      	bne.n	80105bc <Save_Bmp+0x7c>
 80105d4:	4663      	mov	r3, ip
 80105d6:	4622      	mov	r2, r4
 80105d8:	6810      	ldr	r0, [r2, #0]
 80105da:	6018      	str	r0, [r3, #0]
 80105dc:	8892      	ldrh	r2, [r2, #4]
 80105de:	809a      	strh	r2, [r3, #4]
 80105e0:	2336      	movs	r3, #54	; 0x36
 80105e2:	867b      	strh	r3, [r7, #50]	; 0x32
 80105e4:	2300      	movs	r3, #0
 80105e6:	863b      	strh	r3, [r7, #48]	; 0x30
 80105e8:	e042      	b.n	8010670 <Save_Bmp+0x130>
 80105ea:	f9b7 3030 	ldrsh.w	r3, [r7, #48]	; 0x30
 80105ee:	4a87      	ldr	r2, [pc, #540]	; (801080c <Save_Bmp+0x2cc>)
 80105f0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80105f4:	121b      	asrs	r3, r3, #8
 80105f6:	b2da      	uxtb	r2, r3
 80105f8:	f9b7 3030 	ldrsh.w	r3, [r7, #48]	; 0x30
 80105fc:	0099      	lsls	r1, r3, #2
 80105fe:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 8010602:	440b      	add	r3, r1
 8010604:	f022 0207 	bic.w	r2, r2, #7
 8010608:	b2d1      	uxtb	r1, r2
 801060a:	4a7e      	ldr	r2, [pc, #504]	; (8010804 <Save_Bmp+0x2c4>)
 801060c:	54d1      	strb	r1, [r2, r3]
 801060e:	f9b7 3030 	ldrsh.w	r3, [r7, #48]	; 0x30
 8010612:	4a7e      	ldr	r2, [pc, #504]	; (801080c <Save_Bmp+0x2cc>)
 8010614:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8010618:	10db      	asrs	r3, r3, #3
 801061a:	b2da      	uxtb	r2, r3
 801061c:	f9b7 3030 	ldrsh.w	r3, [r7, #48]	; 0x30
 8010620:	0099      	lsls	r1, r3, #2
 8010622:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 8010626:	440b      	add	r3, r1
 8010628:	3301      	adds	r3, #1
 801062a:	f022 0203 	bic.w	r2, r2, #3
 801062e:	b2d1      	uxtb	r1, r2
 8010630:	4a74      	ldr	r2, [pc, #464]	; (8010804 <Save_Bmp+0x2c4>)
 8010632:	54d1      	strb	r1, [r2, r3]
 8010634:	f9b7 3030 	ldrsh.w	r3, [r7, #48]	; 0x30
 8010638:	4a74      	ldr	r2, [pc, #464]	; (801080c <Save_Bmp+0x2cc>)
 801063a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801063e:	00d9      	lsls	r1, r3, #3
 8010640:	f9b7 3030 	ldrsh.w	r3, [r7, #48]	; 0x30
 8010644:	009a      	lsls	r2, r3, #2
 8010646:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 801064a:	4413      	add	r3, r2
 801064c:	3302      	adds	r3, #2
 801064e:	b2c9      	uxtb	r1, r1
 8010650:	4a6c      	ldr	r2, [pc, #432]	; (8010804 <Save_Bmp+0x2c4>)
 8010652:	54d1      	strb	r1, [r2, r3]
 8010654:	f9b7 3030 	ldrsh.w	r3, [r7, #48]	; 0x30
 8010658:	009a      	lsls	r2, r3, #2
 801065a:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 801065e:	4413      	add	r3, r2
 8010660:	3303      	adds	r3, #3
 8010662:	4a68      	ldr	r2, [pc, #416]	; (8010804 <Save_Bmp+0x2c4>)
 8010664:	2100      	movs	r1, #0
 8010666:	54d1      	strb	r1, [r2, r3]
 8010668:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 801066a:	3301      	adds	r3, #1
 801066c:	b29b      	uxth	r3, r3
 801066e:	863b      	strh	r3, [r7, #48]	; 0x30
 8010670:	f9b7 3030 	ldrsh.w	r3, [r7, #48]	; 0x30
 8010674:	2b0f      	cmp	r3, #15
 8010676:	ddb8      	ble.n	80105ea <Save_Bmp+0xaa>
 8010678:	2376      	movs	r3, #118	; 0x76
 801067a:	867b      	strh	r3, [r7, #50]	; 0x32
 801067c:	2300      	movs	r3, #0
 801067e:	86bb      	strh	r3, [r7, #52]	; 0x34
 8010680:	e079      	b.n	8010776 <Save_Bmp+0x236>
 8010682:	2300      	movs	r3, #0
 8010684:	86fb      	strh	r3, [r7, #54]	; 0x36
 8010686:	e06b      	b.n	8010760 <Save_Bmp+0x220>
 8010688:	f9b7 2034 	ldrsh.w	r2, [r7, #52]	; 0x34
 801068c:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 8010690:	4611      	mov	r1, r2
 8010692:	4618      	mov	r0, r3
 8010694:	f001 fe62 	bl	801235c <LCD_Set_Posi>
 8010698:	f001 fed6 	bl	8012448 <LCD_Get_Pixel>
 801069c:	4603      	mov	r3, r0
 801069e:	847b      	strh	r3, [r7, #34]	; 0x22
 80106a0:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80106a2:	3301      	adds	r3, #1
 80106a4:	b29b      	uxth	r3, r3
 80106a6:	b21b      	sxth	r3, r3
 80106a8:	f9b7 2034 	ldrsh.w	r2, [r7, #52]	; 0x34
 80106ac:	4611      	mov	r1, r2
 80106ae:	4618      	mov	r0, r3
 80106b0:	f001 fe54 	bl	801235c <LCD_Set_Posi>
 80106b4:	f001 fec8 	bl	8012448 <LCD_Get_Pixel>
 80106b8:	4603      	mov	r3, r0
 80106ba:	843b      	strh	r3, [r7, #32]
 80106bc:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 80106c0:	4618      	mov	r0, r3
 80106c2:	f7ff f8a1 	bl	800f808 <Color_Num>
 80106c6:	4603      	mov	r3, r0
 80106c8:	011b      	lsls	r3, r3, #4
 80106ca:	b2dc      	uxtb	r4, r3
 80106cc:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80106d0:	4618      	mov	r0, r3
 80106d2:	f7ff f899 	bl	800f808 <Color_Num>
 80106d6:	4603      	mov	r3, r0
 80106d8:	461a      	mov	r2, r3
 80106da:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 80106de:	4422      	add	r2, r4
 80106e0:	b2d1      	uxtb	r1, r2
 80106e2:	4a48      	ldr	r2, [pc, #288]	; (8010804 <Save_Bmp+0x2c4>)
 80106e4:	54d1      	strb	r1, [r2, r3]
 80106e6:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 80106ea:	b29b      	uxth	r3, r3
 80106ec:	3301      	adds	r3, #1
 80106ee:	b29b      	uxth	r3, r3
 80106f0:	867b      	strh	r3, [r7, #50]	; 0x32
 80106f2:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 80106f6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80106f8:	429a      	cmp	r2, r3
 80106fa:	dc2d      	bgt.n	8010758 <Save_Bmp+0x218>
 80106fc:	2300      	movs	r3, #0
 80106fe:	867b      	strh	r3, [r7, #50]	; 0x32
 8010700:	f107 030c 	add.w	r3, r7, #12
 8010704:	4619      	mov	r1, r3
 8010706:	483f      	ldr	r0, [pc, #252]	; (8010804 <Save_Bmp+0x2c4>)
 8010708:	f7fe ff44 	bl	800f594 <ProgFileSec>
 801070c:	4603      	mov	r3, r0
 801070e:	2b00      	cmp	r3, #0
 8010710:	d001      	beq.n	8010716 <Save_Bmp+0x1d6>
 8010712:	2303      	movs	r3, #3
 8010714:	e069      	b.n	80107ea <Save_Bmp+0x2aa>
 8010716:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	; 0x2c
 801071a:	2b00      	cmp	r3, #0
 801071c:	d110      	bne.n	8010740 <Save_Bmp+0x200>
 801071e:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 8010722:	b29a      	uxth	r2, r3
 8010724:	3201      	adds	r2, #1
 8010726:	b292      	uxth	r2, r2
 8010728:	85fa      	strh	r2, [r7, #46]	; 0x2e
 801072a:	105b      	asrs	r3, r3, #1
 801072c:	b21b      	sxth	r3, r3
 801072e:	b2db      	uxtb	r3, r3
 8010730:	f003 0303 	and.w	r3, r3, #3
 8010734:	b2db      	uxtb	r3, r3
 8010736:	461a      	mov	r2, r3
 8010738:	2102      	movs	r1, #2
 801073a:	20a8      	movs	r0, #168	; 0xa8
 801073c:	f7ff f8e4 	bl	800f908 <PrintClk>
 8010740:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	; 0x2c
 8010744:	b29b      	uxth	r3, r3
 8010746:	3301      	adds	r3, #1
 8010748:	b29b      	uxth	r3, r3
 801074a:	85bb      	strh	r3, [r7, #44]	; 0x2c
 801074c:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	; 0x2c
 8010750:	2b01      	cmp	r3, #1
 8010752:	dd01      	ble.n	8010758 <Save_Bmp+0x218>
 8010754:	2300      	movs	r3, #0
 8010756:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8010758:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 801075a:	3302      	adds	r3, #2
 801075c:	b29b      	uxth	r3, r3
 801075e:	86fb      	strh	r3, [r7, #54]	; 0x36
 8010760:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 8010764:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8010768:	db8e      	blt.n	8010688 <Save_Bmp+0x148>
 801076a:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	; 0x34
 801076e:	b29b      	uxth	r3, r3
 8010770:	3301      	adds	r3, #1
 8010772:	b29b      	uxth	r3, r3
 8010774:	86bb      	strh	r3, [r7, #52]	; 0x34
 8010776:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	; 0x34
 801077a:	2bef      	cmp	r3, #239	; 0xef
 801077c:	dd81      	ble.n	8010682 <Save_Bmp+0x142>
 801077e:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 8010782:	2b00      	cmp	r3, #0
 8010784:	d00c      	beq.n	80107a0 <Save_Bmp+0x260>
 8010786:	f107 030c 	add.w	r3, r7, #12
 801078a:	4619      	mov	r1, r3
 801078c:	481d      	ldr	r0, [pc, #116]	; (8010804 <Save_Bmp+0x2c4>)
 801078e:	f7fe ff01 	bl	800f594 <ProgFileSec>
 8010792:	4603      	mov	r3, r0
 8010794:	2b00      	cmp	r3, #0
 8010796:	d003      	beq.n	80107a0 <Save_Bmp+0x260>
 8010798:	f7fe f8ca 	bl	800e930 <List_Pop>
 801079c:	2303      	movs	r3, #3
 801079e:	e024      	b.n	80107ea <Save_Bmp+0x2aa>
 80107a0:	f107 0308 	add.w	r3, r7, #8
 80107a4:	f107 020c 	add.w	r2, r7, #12
 80107a8:	f44f 4118 	mov.w	r1, #38912	; 0x9800
 80107ac:	4815      	ldr	r0, [pc, #84]	; (8010804 <Save_Bmp+0x2c4>)
 80107ae:	f7fe ff65 	bl	800f67c <CloseFile>
 80107b2:	4603      	mov	r3, r0
 80107b4:	2b00      	cmp	r3, #0
 80107b6:	d001      	beq.n	80107bc <Save_Bmp+0x27c>
 80107b8:	2303      	movs	r3, #3
 80107ba:	e016      	b.n	80107ea <Save_Bmp+0x2aa>
 80107bc:	4b0e      	ldr	r3, [pc, #56]	; (80107f8 <Save_Bmp+0x2b8>)
 80107be:	f9b3 3000 	ldrsh.w	r3, [r3]
 80107c2:	2b05      	cmp	r3, #5
 80107c4:	d101      	bne.n	80107ca <Save_Bmp+0x28a>
 80107c6:	f7fe f8b3 	bl	800e930 <List_Pop>
 80107ca:	4b11      	ldr	r3, [pc, #68]	; (8010810 <Save_Bmp+0x2d0>)
 80107cc:	f9b3 30ec 	ldrsh.w	r3, [r3, #236]	; 0xec
 80107d0:	2b62      	cmp	r3, #98	; 0x62
 80107d2:	dc09      	bgt.n	80107e8 <Save_Bmp+0x2a8>
 80107d4:	4b0e      	ldr	r3, [pc, #56]	; (8010810 <Save_Bmp+0x2d0>)
 80107d6:	f9b3 30ec 	ldrsh.w	r3, [r3, #236]	; 0xec
 80107da:	b29b      	uxth	r3, r3
 80107dc:	3301      	adds	r3, #1
 80107de:	b29b      	uxth	r3, r3
 80107e0:	b21a      	sxth	r2, r3
 80107e2:	4b0b      	ldr	r3, [pc, #44]	; (8010810 <Save_Bmp+0x2d0>)
 80107e4:	f8a3 20ec 	strh.w	r2, [r3, #236]	; 0xec
 80107e8:	2300      	movs	r3, #0
 80107ea:	4618      	mov	r0, r3
 80107ec:	373c      	adds	r7, #60	; 0x3c
 80107ee:	46bd      	mov	sp, r7
 80107f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80107f2:	bf00      	nop
 80107f4:	080001fc 	.word	0x080001fc
 80107f8:	200007a6 	.word	0x200007a6
 80107fc:	20000144 	.word	0x20000144
 8010800:	20000c10 	.word	0x20000c10
 8010804:	200017e0 	.word	0x200017e0
 8010808:	08001b84 	.word	0x08001b84
 801080c:	08001b64 	.word	0x08001b64
 8010810:	2000029c 	.word	0x2000029c

08010814 <Save_Csv>:
 8010814:	b580      	push	{r7, lr}
 8010816:	b094      	sub	sp, #80	; 0x50
 8010818:	af00      	add	r7, sp, #0
 801081a:	4603      	mov	r3, r0
 801081c:	80fb      	strh	r3, [r7, #6]
 801081e:	4baf      	ldr	r3, [pc, #700]	; (8010adc <Save_Csv+0x2c8>)
 8010820:	681a      	ldr	r2, [r3, #0]
 8010822:	4baf      	ldr	r3, [pc, #700]	; (8010ae0 <Save_Csv+0x2cc>)
 8010824:	f9b3 3000 	ldrsh.w	r3, [r3]
 8010828:	4619      	mov	r1, r3
 801082a:	4bae      	ldr	r3, [pc, #696]	; (8010ae4 <Save_Csv+0x2d0>)
 801082c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8010830:	2b00      	cmp	r3, #0
 8010832:	bf14      	ite	ne
 8010834:	2301      	movne	r3, #1
 8010836:	2300      	moveq	r3, #0
 8010838:	b2db      	uxtb	r3, r3
 801083a:	440b      	add	r3, r1
 801083c:	005b      	lsls	r3, r3, #1
 801083e:	4413      	add	r3, r2
 8010840:	f9b3 3000 	ldrsh.w	r3, [r3]
 8010844:	009b      	lsls	r3, r3, #2
 8010846:	4aa8      	ldr	r2, [pc, #672]	; (8010ae8 <Save_Csv+0x2d4>)
 8010848:	f9b2 2000 	ldrsh.w	r2, [r2]
 801084c:	4611      	mov	r1, r2
 801084e:	4aa7      	ldr	r2, [pc, #668]	; (8010aec <Save_Csv+0x2d8>)
 8010850:	5c52      	ldrb	r2, [r2, r1]
 8010852:	fb93 f3f2 	sdiv	r3, r3, r2
 8010856:	63bb      	str	r3, [r7, #56]	; 0x38
 8010858:	4aa5      	ldr	r2, [pc, #660]	; (8010af0 <Save_Csv+0x2dc>)
 801085a:	f107 031c 	add.w	r3, r7, #28
 801085e:	ca07      	ldmia	r2, {r0, r1, r2}
 8010860:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8010864:	2300      	movs	r3, #0
 8010866:	64bb      	str	r3, [r7, #72]	; 0x48
 8010868:	2300      	movs	r3, #0
 801086a:	647b      	str	r3, [r7, #68]	; 0x44
 801086c:	2304      	movs	r3, #4
 801086e:	637b      	str	r3, [r7, #52]	; 0x34
 8010870:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8010874:	633b      	str	r3, [r7, #48]	; 0x30
 8010876:	f107 021c 	add.w	r2, r7, #28
 801087a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801087e:	4611      	mov	r1, r2
 8010880:	4618      	mov	r0, r3
 8010882:	f7ff f9f9 	bl	800fc78 <Make_Filename>
 8010886:	f107 0310 	add.w	r3, r7, #16
 801088a:	f107 0214 	add.w	r2, r7, #20
 801088e:	f107 011c 	add.w	r1, r7, #28
 8010892:	4898      	ldr	r0, [pc, #608]	; (8010af4 <Save_Csv+0x2e0>)
 8010894:	f7fe ff56 	bl	800f744 <OpenFileWr>
 8010898:	4603      	mov	r3, r0
 801089a:	2b00      	cmp	r3, #0
 801089c:	d002      	beq.n	80108a4 <Save_Csv+0x90>
 801089e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80108a0:	b2db      	uxtb	r3, r3
 80108a2:	e1d3      	b.n	8010c4c <Save_Csv+0x438>
 80108a4:	4b94      	ldr	r3, [pc, #592]	; (8010af8 <Save_Csv+0x2e4>)
 80108a6:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 80108aa:	00db      	lsls	r3, r3, #3
 80108ac:	4a93      	ldr	r2, [pc, #588]	; (8010afc <Save_Csv+0x2e8>)
 80108ae:	4413      	add	r3, r2
 80108b0:	2205      	movs	r2, #5
 80108b2:	4619      	mov	r1, r3
 80108b4:	488f      	ldr	r0, [pc, #572]	; (8010af4 <Save_Csv+0x2e0>)
 80108b6:	f012 fae7 	bl	8022e88 <memcpy>
 80108ba:	2203      	movs	r2, #3
 80108bc:	4990      	ldr	r1, [pc, #576]	; (8010b00 <Save_Csv+0x2ec>)
 80108be:	4891      	ldr	r0, [pc, #580]	; (8010b04 <Save_Csv+0x2f0>)
 80108c0:	f012 fae2 	bl	8022e88 <memcpy>
 80108c4:	4b90      	ldr	r3, [pc, #576]	; (8010b08 <Save_Csv+0x2f4>)
 80108c6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80108c8:	2300      	movs	r3, #0
 80108ca:	64fb      	str	r3, [r7, #76]	; 0x4c
 80108cc:	4b8a      	ldr	r3, [pc, #552]	; (8010af8 <Save_Csv+0x2e4>)
 80108ce:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80108d2:	461a      	mov	r2, r3
 80108d4:	4613      	mov	r3, r2
 80108d6:	005b      	lsls	r3, r3, #1
 80108d8:	4413      	add	r3, r2
 80108da:	005b      	lsls	r3, r3, #1
 80108dc:	4a8b      	ldr	r2, [pc, #556]	; (8010b0c <Save_Csv+0x2f8>)
 80108de:	4413      	add	r3, r2
 80108e0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80108e2:	e00a      	b.n	80108fa <Save_Csv+0xe6>
 80108e4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80108e6:	1c5a      	adds	r2, r3, #1
 80108e8:	63fa      	str	r2, [r7, #60]	; 0x3c
 80108ea:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80108ec:	1c51      	adds	r1, r2, #1
 80108ee:	64f9      	str	r1, [r7, #76]	; 0x4c
 80108f0:	4611      	mov	r1, r2
 80108f2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80108f4:	440a      	add	r2, r1
 80108f6:	781b      	ldrb	r3, [r3, #0]
 80108f8:	7013      	strb	r3, [r2, #0]
 80108fa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80108fc:	781b      	ldrb	r3, [r3, #0]
 80108fe:	2b00      	cmp	r3, #0
 8010900:	d1f0      	bne.n	80108e4 <Save_Csv+0xd0>
 8010902:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010904:	1c5a      	adds	r2, r3, #1
 8010906:	64fa      	str	r2, [r7, #76]	; 0x4c
 8010908:	461a      	mov	r2, r3
 801090a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801090c:	4413      	add	r3, r2
 801090e:	222a      	movs	r2, #42	; 0x2a
 8010910:	701a      	strb	r2, [r3, #0]
 8010912:	4b79      	ldr	r3, [pc, #484]	; (8010af8 <Save_Csv+0x2e4>)
 8010914:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8010918:	461a      	mov	r2, r3
 801091a:	4613      	mov	r3, r2
 801091c:	005b      	lsls	r3, r3, #1
 801091e:	4413      	add	r3, r2
 8010920:	005b      	lsls	r3, r3, #1
 8010922:	4a7b      	ldr	r2, [pc, #492]	; (8010b10 <Save_Csv+0x2fc>)
 8010924:	4413      	add	r3, r2
 8010926:	63fb      	str	r3, [r7, #60]	; 0x3c
 8010928:	e00a      	b.n	8010940 <Save_Csv+0x12c>
 801092a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801092c:	1c5a      	adds	r2, r3, #1
 801092e:	63fa      	str	r2, [r7, #60]	; 0x3c
 8010930:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8010932:	1c51      	adds	r1, r2, #1
 8010934:	64f9      	str	r1, [r7, #76]	; 0x4c
 8010936:	4611      	mov	r1, r2
 8010938:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801093a:	440a      	add	r2, r1
 801093c:	781b      	ldrb	r3, [r3, #0]
 801093e:	7013      	strb	r3, [r2, #0]
 8010940:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010942:	781b      	ldrb	r3, [r3, #0]
 8010944:	2b00      	cmp	r3, #0
 8010946:	d1f0      	bne.n	801092a <Save_Csv+0x116>
 8010948:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801094a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801094c:	4413      	add	r3, r2
 801094e:	222c      	movs	r2, #44	; 0x2c
 8010950:	701a      	strb	r2, [r3, #0]
 8010952:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010954:	3301      	adds	r3, #1
 8010956:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8010958:	4413      	add	r3, r2
 801095a:	2200      	movs	r2, #0
 801095c:	701a      	strb	r2, [r3, #0]
 801095e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010960:	b29b      	uxth	r3, r3
 8010962:	3301      	adds	r3, #1
 8010964:	b29b      	uxth	r3, r3
 8010966:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 801096a:	f9b7 3042 	ldrsh.w	r3, [r7, #66]	; 0x42
 801096e:	3308      	adds	r3, #8
 8010970:	64bb      	str	r3, [r7, #72]	; 0x48
 8010972:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010974:	4a5f      	ldr	r2, [pc, #380]	; (8010af4 <Save_Csv+0x2e0>)
 8010976:	4413      	add	r3, r2
 8010978:	2202      	movs	r2, #2
 801097a:	4966      	ldr	r1, [pc, #408]	; (8010b14 <Save_Csv+0x300>)
 801097c:	4618      	mov	r0, r3
 801097e:	f012 fa83 	bl	8022e88 <memcpy>
 8010982:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010984:	3302      	adds	r3, #2
 8010986:	64bb      	str	r3, [r7, #72]	; 0x48
 8010988:	2300      	movs	r3, #0
 801098a:	64fb      	str	r3, [r7, #76]	; 0x4c
 801098c:	e0fe      	b.n	8010b8c <Save_Csv+0x378>
 801098e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010990:	3302      	adds	r3, #2
 8010992:	4a61      	ldr	r2, [pc, #388]	; (8010b18 <Save_Csv+0x304>)
 8010994:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8010998:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 801099c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801099e:	fb02 f303 	mul.w	r3, r2, r3
 80109a2:	131b      	asrs	r3, r3, #12
 80109a4:	b29b      	uxth	r3, r3
 80109a6:	3364      	adds	r3, #100	; 0x64
 80109a8:	b29b      	uxth	r3, r3
 80109aa:	857b      	strh	r3, [r7, #42]	; 0x2a
 80109ac:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 80109b0:	2b00      	cmp	r3, #0
 80109b2:	dd0a      	ble.n	80109ca <Save_Csv+0x1b6>
 80109b4:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 80109b8:	2bc8      	cmp	r3, #200	; 0xc8
 80109ba:	dd02      	ble.n	80109c2 <Save_Csv+0x1ae>
 80109bc:	23c7      	movs	r3, #199	; 0xc7
 80109be:	723b      	strb	r3, [r7, #8]
 80109c0:	e005      	b.n	80109ce <Save_Csv+0x1ba>
 80109c2:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80109c4:	b2db      	uxtb	r3, r3
 80109c6:	723b      	strb	r3, [r7, #8]
 80109c8:	e001      	b.n	80109ce <Save_Csv+0x1ba>
 80109ca:	2300      	movs	r3, #0
 80109cc:	723b      	strb	r3, [r7, #8]
 80109ce:	7a3a      	ldrb	r2, [r7, #8]
 80109d0:	f107 030c 	add.w	r3, r7, #12
 80109d4:	4611      	mov	r1, r2
 80109d6:	4618      	mov	r0, r3
 80109d8:	f001 f898 	bl	8011b0c <u8ToDec3>
 80109dc:	2300      	movs	r3, #0
 80109de:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 80109e2:	e03a      	b.n	8010a5a <Save_Csv+0x246>
 80109e4:	f9b7 3042 	ldrsh.w	r3, [r7, #66]	; 0x42
 80109e8:	f107 0250 	add.w	r2, r7, #80	; 0x50
 80109ec:	4413      	add	r3, r2
 80109ee:	f813 3c44 	ldrb.w	r3, [r3, #-68]
 80109f2:	2b00      	cmp	r3, #0
 80109f4:	d036      	beq.n	8010a64 <Save_Csv+0x250>
 80109f6:	f9b7 2042 	ldrsh.w	r2, [r7, #66]	; 0x42
 80109fa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80109fc:	1c59      	adds	r1, r3, #1
 80109fe:	64b9      	str	r1, [r7, #72]	; 0x48
 8010a00:	f107 0150 	add.w	r1, r7, #80	; 0x50
 8010a04:	440a      	add	r2, r1
 8010a06:	f812 1c44 	ldrb.w	r1, [r2, #-68]
 8010a0a:	4a3a      	ldr	r2, [pc, #232]	; (8010af4 <Save_Csv+0x2e0>)
 8010a0c:	54d1      	strb	r1, [r2, r3]
 8010a0e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8010a10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010a12:	429a      	cmp	r2, r3
 8010a14:	db1a      	blt.n	8010a4c <Save_Csv+0x238>
 8010a16:	f107 0314 	add.w	r3, r7, #20
 8010a1a:	4619      	mov	r1, r3
 8010a1c:	4835      	ldr	r0, [pc, #212]	; (8010af4 <Save_Csv+0x2e0>)
 8010a1e:	f7fe fdb9 	bl	800f594 <ProgFileSec>
 8010a22:	4603      	mov	r3, r0
 8010a24:	2b00      	cmp	r3, #0
 8010a26:	d001      	beq.n	8010a2c <Save_Csv+0x218>
 8010a28:	2303      	movs	r3, #3
 8010a2a:	e10f      	b.n	8010c4c <Save_Csv+0x438>
 8010a2c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010a2e:	1c5a      	adds	r2, r3, #1
 8010a30:	647a      	str	r2, [r7, #68]	; 0x44
 8010a32:	105b      	asrs	r3, r3, #1
 8010a34:	b2db      	uxtb	r3, r3
 8010a36:	f003 0303 	and.w	r3, r3, #3
 8010a3a:	b2db      	uxtb	r3, r3
 8010a3c:	461a      	mov	r2, r3
 8010a3e:	2102      	movs	r1, #2
 8010a40:	f44f 7084 	mov.w	r0, #264	; 0x108
 8010a44:	f7fe ff60 	bl	800f908 <PrintClk>
 8010a48:	2300      	movs	r3, #0
 8010a4a:	64bb      	str	r3, [r7, #72]	; 0x48
 8010a4c:	f9b7 3042 	ldrsh.w	r3, [r7, #66]	; 0x42
 8010a50:	b29b      	uxth	r3, r3
 8010a52:	3301      	adds	r3, #1
 8010a54:	b29b      	uxth	r3, r3
 8010a56:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8010a5a:	f9b7 3042 	ldrsh.w	r3, [r7, #66]	; 0x42
 8010a5e:	2b02      	cmp	r3, #2
 8010a60:	ddc0      	ble.n	80109e4 <Save_Csv+0x1d0>
 8010a62:	e000      	b.n	8010a66 <Save_Csv+0x252>
 8010a64:	bf00      	nop
 8010a66:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010a68:	1c5a      	adds	r2, r3, #1
 8010a6a:	64ba      	str	r2, [r7, #72]	; 0x48
 8010a6c:	4a21      	ldr	r2, [pc, #132]	; (8010af4 <Save_Csv+0x2e0>)
 8010a6e:	212c      	movs	r1, #44	; 0x2c
 8010a70:	54d1      	strb	r1, [r2, r3]
 8010a72:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8010a74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010a76:	429a      	cmp	r2, r3
 8010a78:	db1a      	blt.n	8010ab0 <Save_Csv+0x29c>
 8010a7a:	f107 0314 	add.w	r3, r7, #20
 8010a7e:	4619      	mov	r1, r3
 8010a80:	481c      	ldr	r0, [pc, #112]	; (8010af4 <Save_Csv+0x2e0>)
 8010a82:	f7fe fd87 	bl	800f594 <ProgFileSec>
 8010a86:	4603      	mov	r3, r0
 8010a88:	2b00      	cmp	r3, #0
 8010a8a:	d001      	beq.n	8010a90 <Save_Csv+0x27c>
 8010a8c:	2303      	movs	r3, #3
 8010a8e:	e0dd      	b.n	8010c4c <Save_Csv+0x438>
 8010a90:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010a92:	1c5a      	adds	r2, r3, #1
 8010a94:	647a      	str	r2, [r7, #68]	; 0x44
 8010a96:	105b      	asrs	r3, r3, #1
 8010a98:	b2db      	uxtb	r3, r3
 8010a9a:	f003 0303 	and.w	r3, r3, #3
 8010a9e:	b2db      	uxtb	r3, r3
 8010aa0:	461a      	mov	r2, r3
 8010aa2:	2102      	movs	r1, #2
 8010aa4:	f44f 7084 	mov.w	r0, #264	; 0x108
 8010aa8:	f7fe ff2e 	bl	800f908 <PrintClk>
 8010aac:	2300      	movs	r3, #0
 8010aae:	64bb      	str	r3, [r7, #72]	; 0x48
 8010ab0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010ab2:	1c5a      	adds	r2, r3, #1
 8010ab4:	64ba      	str	r2, [r7, #72]	; 0x48
 8010ab6:	4a0f      	ldr	r2, [pc, #60]	; (8010af4 <Save_Csv+0x2e0>)
 8010ab8:	210d      	movs	r1, #13
 8010aba:	54d1      	strb	r1, [r2, r3]
 8010abc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8010abe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010ac0:	429a      	cmp	r2, r3
 8010ac2:	db3b      	blt.n	8010b3c <Save_Csv+0x328>
 8010ac4:	f107 0314 	add.w	r3, r7, #20
 8010ac8:	4619      	mov	r1, r3
 8010aca:	480a      	ldr	r0, [pc, #40]	; (8010af4 <Save_Csv+0x2e0>)
 8010acc:	f7fe fd62 	bl	800f594 <ProgFileSec>
 8010ad0:	4603      	mov	r3, r0
 8010ad2:	2b00      	cmp	r3, #0
 8010ad4:	d022      	beq.n	8010b1c <Save_Csv+0x308>
 8010ad6:	2303      	movs	r3, #3
 8010ad8:	e0b8      	b.n	8010c4c <Save_Csv+0x438>
 8010ada:	bf00      	nop
 8010adc:	20000580 	.word	0x20000580
 8010ae0:	2000688e 	.word	0x2000688e
 8010ae4:	2000286a 	.word	0x2000286a
 8010ae8:	20002852 	.word	0x20002852
 8010aec:	20000564 	.word	0x20000564
 8010af0:	08000220 	.word	0x08000220
 8010af4:	200017e0 	.word	0x200017e0
 8010af8:	2000029c 	.word	0x2000029c
 8010afc:	200001d4 	.word	0x200001d4
 8010b00:	08000244 	.word	0x08000244
 8010b04:	200017e5 	.word	0x200017e5
 8010b08:	200017e8 	.word	0x200017e8
 8010b0c:	08001da8 	.word	0x08001da8
 8010b10:	08001cd4 	.word	0x08001cd4
 8010b14:	08000248 	.word	0x08000248
 8010b18:	20002878 	.word	0x20002878
 8010b1c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010b1e:	1c5a      	adds	r2, r3, #1
 8010b20:	647a      	str	r2, [r7, #68]	; 0x44
 8010b22:	105b      	asrs	r3, r3, #1
 8010b24:	b2db      	uxtb	r3, r3
 8010b26:	f003 0303 	and.w	r3, r3, #3
 8010b2a:	b2db      	uxtb	r3, r3
 8010b2c:	461a      	mov	r2, r3
 8010b2e:	2102      	movs	r1, #2
 8010b30:	f44f 7084 	mov.w	r0, #264	; 0x108
 8010b34:	f7fe fee8 	bl	800f908 <PrintClk>
 8010b38:	2300      	movs	r3, #0
 8010b3a:	64bb      	str	r3, [r7, #72]	; 0x48
 8010b3c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010b3e:	1c5a      	adds	r2, r3, #1
 8010b40:	64ba      	str	r2, [r7, #72]	; 0x48
 8010b42:	4a44      	ldr	r2, [pc, #272]	; (8010c54 <Save_Csv+0x440>)
 8010b44:	210a      	movs	r1, #10
 8010b46:	54d1      	strb	r1, [r2, r3]
 8010b48:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8010b4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010b4c:	429a      	cmp	r2, r3
 8010b4e:	db1a      	blt.n	8010b86 <Save_Csv+0x372>
 8010b50:	f107 0314 	add.w	r3, r7, #20
 8010b54:	4619      	mov	r1, r3
 8010b56:	483f      	ldr	r0, [pc, #252]	; (8010c54 <Save_Csv+0x440>)
 8010b58:	f7fe fd1c 	bl	800f594 <ProgFileSec>
 8010b5c:	4603      	mov	r3, r0
 8010b5e:	2b00      	cmp	r3, #0
 8010b60:	d001      	beq.n	8010b66 <Save_Csv+0x352>
 8010b62:	2303      	movs	r3, #3
 8010b64:	e072      	b.n	8010c4c <Save_Csv+0x438>
 8010b66:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010b68:	1c5a      	adds	r2, r3, #1
 8010b6a:	647a      	str	r2, [r7, #68]	; 0x44
 8010b6c:	105b      	asrs	r3, r3, #1
 8010b6e:	b2db      	uxtb	r3, r3
 8010b70:	f003 0303 	and.w	r3, r3, #3
 8010b74:	b2db      	uxtb	r3, r3
 8010b76:	461a      	mov	r2, r3
 8010b78:	2102      	movs	r1, #2
 8010b7a:	f44f 7084 	mov.w	r0, #264	; 0x108
 8010b7e:	f7fe fec3 	bl	800f908 <PrintClk>
 8010b82:	2300      	movs	r3, #0
 8010b84:	64bb      	str	r3, [r7, #72]	; 0x48
 8010b86:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010b88:	3301      	adds	r3, #1
 8010b8a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8010b8c:	4b32      	ldr	r3, [pc, #200]	; (8010c58 <Save_Csv+0x444>)
 8010b8e:	f9b3 304c 	ldrsh.w	r3, [r3, #76]	; 0x4c
 8010b92:	461a      	mov	r2, r3
 8010b94:	4b31      	ldr	r3, [pc, #196]	; (8010c5c <Save_Csv+0x448>)
 8010b96:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8010b9a:	461a      	mov	r2, r3
 8010b9c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010b9e:	4293      	cmp	r3, r2
 8010ba0:	f6ff aef5 	blt.w	801098e <Save_Csv+0x17a>
 8010ba4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010ba6:	2b00      	cmp	r3, #0
 8010ba8:	d030      	beq.n	8010c0c <Save_Csv+0x3f8>
 8010baa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010bac:	1c5a      	adds	r2, r3, #1
 8010bae:	64ba      	str	r2, [r7, #72]	; 0x48
 8010bb0:	4a28      	ldr	r2, [pc, #160]	; (8010c54 <Save_Csv+0x440>)
 8010bb2:	210d      	movs	r1, #13
 8010bb4:	54d1      	strb	r1, [r2, r3]
 8010bb6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010bb8:	1c5a      	adds	r2, r3, #1
 8010bba:	64ba      	str	r2, [r7, #72]	; 0x48
 8010bbc:	4a25      	ldr	r2, [pc, #148]	; (8010c54 <Save_Csv+0x440>)
 8010bbe:	210a      	movs	r1, #10
 8010bc0:	54d1      	strb	r1, [r2, r3]
 8010bc2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010bc4:	4a23      	ldr	r2, [pc, #140]	; (8010c54 <Save_Csv+0x440>)
 8010bc6:	1898      	adds	r0, r3, r2
 8010bc8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010bca:	f5c3 5380 	rsb	r3, r3, #4096	; 0x1000
 8010bce:	461a      	mov	r2, r3
 8010bd0:	2120      	movs	r1, #32
 8010bd2:	f012 f967 	bl	8022ea4 <memset>
 8010bd6:	2300      	movs	r3, #0
 8010bd8:	64bb      	str	r3, [r7, #72]	; 0x48
 8010bda:	f107 0314 	add.w	r3, r7, #20
 8010bde:	4619      	mov	r1, r3
 8010be0:	481c      	ldr	r0, [pc, #112]	; (8010c54 <Save_Csv+0x440>)
 8010be2:	f7fe fcd7 	bl	800f594 <ProgFileSec>
 8010be6:	4603      	mov	r3, r0
 8010be8:	2b00      	cmp	r3, #0
 8010bea:	d001      	beq.n	8010bf0 <Save_Csv+0x3dc>
 8010bec:	2303      	movs	r3, #3
 8010bee:	e02d      	b.n	8010c4c <Save_Csv+0x438>
 8010bf0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010bf2:	1c5a      	adds	r2, r3, #1
 8010bf4:	647a      	str	r2, [r7, #68]	; 0x44
 8010bf6:	105b      	asrs	r3, r3, #1
 8010bf8:	b2db      	uxtb	r3, r3
 8010bfa:	f003 0303 	and.w	r3, r3, #3
 8010bfe:	b2db      	uxtb	r3, r3
 8010c00:	461a      	mov	r2, r3
 8010c02:	2102      	movs	r1, #2
 8010c04:	f44f 7084 	mov.w	r0, #264	; 0x108
 8010c08:	f7fe fe7e 	bl	800f908 <PrintClk>
 8010c0c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010c0e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010c10:	fb02 f103 	mul.w	r1, r2, r3
 8010c14:	f107 0310 	add.w	r3, r7, #16
 8010c18:	f107 0214 	add.w	r2, r7, #20
 8010c1c:	480d      	ldr	r0, [pc, #52]	; (8010c54 <Save_Csv+0x440>)
 8010c1e:	f7fe fd2d 	bl	800f67c <CloseFile>
 8010c22:	4603      	mov	r3, r0
 8010c24:	2b00      	cmp	r3, #0
 8010c26:	d001      	beq.n	8010c2c <Save_Csv+0x418>
 8010c28:	2304      	movs	r3, #4
 8010c2a:	e00f      	b.n	8010c4c <Save_Csv+0x438>
 8010c2c:	4b0a      	ldr	r3, [pc, #40]	; (8010c58 <Save_Csv+0x444>)
 8010c2e:	f9b3 3104 	ldrsh.w	r3, [r3, #260]	; 0x104
 8010c32:	2b62      	cmp	r3, #98	; 0x62
 8010c34:	dc09      	bgt.n	8010c4a <Save_Csv+0x436>
 8010c36:	4b08      	ldr	r3, [pc, #32]	; (8010c58 <Save_Csv+0x444>)
 8010c38:	f9b3 3104 	ldrsh.w	r3, [r3, #260]	; 0x104
 8010c3c:	b29b      	uxth	r3, r3
 8010c3e:	3301      	adds	r3, #1
 8010c40:	b29b      	uxth	r3, r3
 8010c42:	b21a      	sxth	r2, r3
 8010c44:	4b04      	ldr	r3, [pc, #16]	; (8010c58 <Save_Csv+0x444>)
 8010c46:	f8a3 2104 	strh.w	r2, [r3, #260]	; 0x104
 8010c4a:	2300      	movs	r3, #0
 8010c4c:	4618      	mov	r0, r3
 8010c4e:	3750      	adds	r7, #80	; 0x50
 8010c50:	46bd      	mov	sp, r7
 8010c52:	bd80      	pop	{r7, pc}
 8010c54:	200017e0 	.word	0x200017e0
 8010c58:	2000029c 	.word	0x2000029c
 8010c5c:	08002270 	.word	0x08002270

08010c60 <Save_Svg>:
 8010c60:	b580      	push	{r7, lr}
 8010c62:	b092      	sub	sp, #72	; 0x48
 8010c64:	af00      	add	r7, sp, #0
 8010c66:	4603      	mov	r3, r0
 8010c68:	80fb      	strh	r3, [r7, #6]
 8010c6a:	4abb      	ldr	r2, [pc, #748]	; (8010f58 <Save_Svg+0x2f8>)
 8010c6c:	f107 031c 	add.w	r3, r7, #28
 8010c70:	ca07      	ldmia	r2, {r0, r1, r2}
 8010c72:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8010c76:	2304      	movs	r3, #4
 8010c78:	63bb      	str	r3, [r7, #56]	; 0x38
 8010c7a:	2300      	movs	r3, #0
 8010c7c:	637b      	str	r3, [r7, #52]	; 0x34
 8010c7e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8010c82:	867b      	strh	r3, [r7, #50]	; 0x32
 8010c84:	2300      	movs	r3, #0
 8010c86:	863b      	strh	r3, [r7, #48]	; 0x30
 8010c88:	4bb4      	ldr	r3, [pc, #720]	; (8010f5c <Save_Svg+0x2fc>)
 8010c8a:	681a      	ldr	r2, [r3, #0]
 8010c8c:	4bb4      	ldr	r3, [pc, #720]	; (8010f60 <Save_Svg+0x300>)
 8010c8e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8010c92:	4619      	mov	r1, r3
 8010c94:	4bb3      	ldr	r3, [pc, #716]	; (8010f64 <Save_Svg+0x304>)
 8010c96:	f9b3 3000 	ldrsh.w	r3, [r3]
 8010c9a:	2b00      	cmp	r3, #0
 8010c9c:	bf14      	ite	ne
 8010c9e:	2301      	movne	r3, #1
 8010ca0:	2300      	moveq	r3, #0
 8010ca2:	b2db      	uxtb	r3, r3
 8010ca4:	440b      	add	r3, r1
 8010ca6:	005b      	lsls	r3, r3, #1
 8010ca8:	4413      	add	r3, r2
 8010caa:	f9b3 3000 	ldrsh.w	r3, [r3]
 8010cae:	009b      	lsls	r3, r3, #2
 8010cb0:	4aad      	ldr	r2, [pc, #692]	; (8010f68 <Save_Svg+0x308>)
 8010cb2:	f9b2 2000 	ldrsh.w	r2, [r2]
 8010cb6:	4611      	mov	r1, r2
 8010cb8:	4aac      	ldr	r2, [pc, #688]	; (8010f6c <Save_Svg+0x30c>)
 8010cba:	5c52      	ldrb	r2, [r2, r1]
 8010cbc:	fb93 f3f2 	sdiv	r3, r3, r2
 8010cc0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8010cc2:	4bab      	ldr	r3, [pc, #684]	; (8010f70 <Save_Svg+0x310>)
 8010cc4:	2200      	movs	r2, #0
 8010cc6:	601a      	str	r2, [r3, #0]
 8010cc8:	4baa      	ldr	r3, [pc, #680]	; (8010f74 <Save_Svg+0x314>)
 8010cca:	2200      	movs	r2, #0
 8010ccc:	801a      	strh	r2, [r3, #0]
 8010cce:	4baa      	ldr	r3, [pc, #680]	; (8010f78 <Save_Svg+0x318>)
 8010cd0:	2200      	movs	r2, #0
 8010cd2:	801a      	strh	r2, [r3, #0]
 8010cd4:	4ba9      	ldr	r3, [pc, #676]	; (8010f7c <Save_Svg+0x31c>)
 8010cd6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8010cd8:	f44f 729b 	mov.w	r2, #310	; 0x136
 8010cdc:	2100      	movs	r1, #0
 8010cde:	48a7      	ldr	r0, [pc, #668]	; (8010f7c <Save_Svg+0x31c>)
 8010ce0:	f012 f8e0 	bl	8022ea4 <memset>
 8010ce4:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 8010ce8:	461a      	mov	r2, r3
 8010cea:	2100      	movs	r1, #0
 8010cec:	48a4      	ldr	r0, [pc, #656]	; (8010f80 <Save_Svg+0x320>)
 8010cee:	f012 f8d9 	bl	8022ea4 <memset>
 8010cf2:	f107 021c 	add.w	r2, r7, #28
 8010cf6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8010cfa:	4611      	mov	r1, r2
 8010cfc:	4618      	mov	r0, r3
 8010cfe:	f7fe ffbb 	bl	800fc78 <Make_Filename>
 8010d02:	f107 0310 	add.w	r3, r7, #16
 8010d06:	f107 0214 	add.w	r2, r7, #20
 8010d0a:	f107 011c 	add.w	r1, r7, #28
 8010d0e:	489c      	ldr	r0, [pc, #624]	; (8010f80 <Save_Svg+0x320>)
 8010d10:	f7fe fd18 	bl	800f744 <OpenFileWr>
 8010d14:	4603      	mov	r3, r0
 8010d16:	2b00      	cmp	r3, #0
 8010d18:	d002      	beq.n	8010d20 <Save_Svg+0xc0>
 8010d1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010d1c:	b2db      	uxtb	r3, r3
 8010d1e:	e3d5      	b.n	80114cc <Save_Svg+0x86c>
 8010d20:	4b98      	ldr	r3, [pc, #608]	; (8010f84 <Save_Svg+0x324>)
 8010d22:	63fb      	str	r3, [r7, #60]	; 0x3c
 8010d24:	f107 0314 	add.w	r3, r7, #20
 8010d28:	4619      	mov	r1, r3
 8010d2a:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8010d2c:	f7fe ff0a 	bl	800fb44 <WriteStr>
 8010d30:	4b95      	ldr	r3, [pc, #596]	; (8010f88 <Save_Svg+0x328>)
 8010d32:	63fb      	str	r3, [r7, #60]	; 0x3c
 8010d34:	f107 0314 	add.w	r3, r7, #20
 8010d38:	4619      	mov	r1, r3
 8010d3a:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8010d3c:	f7fe ff02 	bl	800fb44 <WriteStr>
 8010d40:	4b92      	ldr	r3, [pc, #584]	; (8010f8c <Save_Svg+0x32c>)
 8010d42:	63fb      	str	r3, [r7, #60]	; 0x3c
 8010d44:	f107 0314 	add.w	r3, r7, #20
 8010d48:	4619      	mov	r1, r3
 8010d4a:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8010d4c:	f7fe fefa 	bl	800fb44 <WriteStr>
 8010d50:	4b8f      	ldr	r3, [pc, #572]	; (8010f90 <Save_Svg+0x330>)
 8010d52:	f9b3 304c 	ldrsh.w	r3, [r3, #76]	; 0x4c
 8010d56:	461a      	mov	r2, r3
 8010d58:	4b8e      	ldr	r3, [pc, #568]	; (8010f94 <Save_Svg+0x334>)
 8010d5a:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8010d5e:	f107 0214 	add.w	r2, r7, #20
 8010d62:	4611      	mov	r1, r2
 8010d64:	4618      	mov	r0, r3
 8010d66:	f7fe fe45 	bl	800f9f4 <WriteVar>
 8010d6a:	4b8b      	ldr	r3, [pc, #556]	; (8010f98 <Save_Svg+0x338>)
 8010d6c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8010d6e:	f107 0314 	add.w	r3, r7, #20
 8010d72:	4619      	mov	r1, r3
 8010d74:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8010d76:	f7fe fee5 	bl	800fb44 <WriteStr>
 8010d7a:	4b88      	ldr	r3, [pc, #544]	; (8010f9c <Save_Svg+0x33c>)
 8010d7c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8010d7e:	f107 0314 	add.w	r3, r7, #20
 8010d82:	4619      	mov	r1, r3
 8010d84:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8010d86:	f7fe fedd 	bl	800fb44 <WriteStr>
 8010d8a:	4b81      	ldr	r3, [pc, #516]	; (8010f90 <Save_Svg+0x330>)
 8010d8c:	f9b3 304c 	ldrsh.w	r3, [r3, #76]	; 0x4c
 8010d90:	461a      	mov	r2, r3
 8010d92:	4b80      	ldr	r3, [pc, #512]	; (8010f94 <Save_Svg+0x334>)
 8010d94:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8010d98:	f107 0214 	add.w	r2, r7, #20
 8010d9c:	4611      	mov	r1, r2
 8010d9e:	4618      	mov	r0, r3
 8010da0:	f7fe fe28 	bl	800f9f4 <WriteVar>
 8010da4:	4b7e      	ldr	r3, [pc, #504]	; (8010fa0 <Save_Svg+0x340>)
 8010da6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8010da8:	f107 0314 	add.w	r3, r7, #20
 8010dac:	4619      	mov	r1, r3
 8010dae:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8010db0:	f7fe fec8 	bl	800fb44 <WriteStr>
 8010db4:	4b7b      	ldr	r3, [pc, #492]	; (8010fa4 <Save_Svg+0x344>)
 8010db6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8010db8:	f107 0314 	add.w	r3, r7, #20
 8010dbc:	4619      	mov	r1, r3
 8010dbe:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8010dc0:	f7fe fec0 	bl	800fb44 <WriteStr>
 8010dc4:	4b72      	ldr	r3, [pc, #456]	; (8010f90 <Save_Svg+0x330>)
 8010dc6:	f9b3 3044 	ldrsh.w	r3, [r3, #68]	; 0x44
 8010dca:	f107 0214 	add.w	r2, r7, #20
 8010dce:	4611      	mov	r1, r2
 8010dd0:	4618      	mov	r0, r3
 8010dd2:	f7fe fe0f 	bl	800f9f4 <WriteVar>
 8010dd6:	4b74      	ldr	r3, [pc, #464]	; (8010fa8 <Save_Svg+0x348>)
 8010dd8:	63fb      	str	r3, [r7, #60]	; 0x3c
 8010dda:	f107 0314 	add.w	r3, r7, #20
 8010dde:	4619      	mov	r1, r3
 8010de0:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8010de2:	f7fe feaf 	bl	800fb44 <WriteStr>
 8010de6:	4b6a      	ldr	r3, [pc, #424]	; (8010f90 <Save_Svg+0x330>)
 8010de8:	f9b3 3044 	ldrsh.w	r3, [r3, #68]	; 0x44
 8010dec:	f107 0214 	add.w	r2, r7, #20
 8010df0:	4611      	mov	r1, r2
 8010df2:	4618      	mov	r0, r3
 8010df4:	f7fe fdfe 	bl	800f9f4 <WriteVar>
 8010df8:	4b6c      	ldr	r3, [pc, #432]	; (8010fac <Save_Svg+0x34c>)
 8010dfa:	63fb      	str	r3, [r7, #60]	; 0x3c
 8010dfc:	f107 0314 	add.w	r3, r7, #20
 8010e00:	4619      	mov	r1, r3
 8010e02:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8010e04:	f7fe fe9e 	bl	800fb44 <WriteStr>
 8010e08:	4b61      	ldr	r3, [pc, #388]	; (8010f90 <Save_Svg+0x330>)
 8010e0a:	f9b3 3044 	ldrsh.w	r3, [r3, #68]	; 0x44
 8010e0e:	b29b      	uxth	r3, r3
 8010e10:	f503 7396 	add.w	r3, r3, #300	; 0x12c
 8010e14:	b29b      	uxth	r3, r3
 8010e16:	b21b      	sxth	r3, r3
 8010e18:	f107 0214 	add.w	r2, r7, #20
 8010e1c:	4611      	mov	r1, r2
 8010e1e:	4618      	mov	r0, r3
 8010e20:	f7fe fde8 	bl	800f9f4 <WriteVar>
 8010e24:	4b62      	ldr	r3, [pc, #392]	; (8010fb0 <Save_Svg+0x350>)
 8010e26:	63fb      	str	r3, [r7, #60]	; 0x3c
 8010e28:	f107 0314 	add.w	r3, r7, #20
 8010e2c:	4619      	mov	r1, r3
 8010e2e:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8010e30:	f7fe fe88 	bl	800fb44 <WriteStr>
 8010e34:	2300      	movs	r3, #0
 8010e36:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8010e3a:	e032      	b.n	8010ea2 <Save_Svg+0x242>
 8010e3c:	4b5d      	ldr	r3, [pc, #372]	; (8010fb4 <Save_Svg+0x354>)
 8010e3e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8010e40:	f107 0314 	add.w	r3, r7, #20
 8010e44:	4619      	mov	r1, r3
 8010e46:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8010e48:	f7fe fe7c 	bl	800fb44 <WriteStr>
 8010e4c:	f107 0214 	add.w	r2, r7, #20
 8010e50:	f9b7 3042 	ldrsh.w	r3, [r7, #66]	; 0x42
 8010e54:	4611      	mov	r1, r2
 8010e56:	4618      	mov	r0, r3
 8010e58:	f7fe fdcc 	bl	800f9f4 <WriteVar>
 8010e5c:	4b56      	ldr	r3, [pc, #344]	; (8010fb8 <Save_Svg+0x358>)
 8010e5e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8010e60:	f107 0314 	add.w	r3, r7, #20
 8010e64:	4619      	mov	r1, r3
 8010e66:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8010e68:	f7fe fe6c 	bl	800fb44 <WriteStr>
 8010e6c:	4b48      	ldr	r3, [pc, #288]	; (8010f90 <Save_Svg+0x330>)
 8010e6e:	f9b3 304c 	ldrsh.w	r3, [r3, #76]	; 0x4c
 8010e72:	461a      	mov	r2, r3
 8010e74:	4b47      	ldr	r3, [pc, #284]	; (8010f94 <Save_Svg+0x334>)
 8010e76:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8010e7a:	f107 0214 	add.w	r2, r7, #20
 8010e7e:	4611      	mov	r1, r2
 8010e80:	4618      	mov	r0, r3
 8010e82:	f7fe fdb7 	bl	800f9f4 <WriteVar>
 8010e86:	4b4d      	ldr	r3, [pc, #308]	; (8010fbc <Save_Svg+0x35c>)
 8010e88:	63fb      	str	r3, [r7, #60]	; 0x3c
 8010e8a:	f107 0314 	add.w	r3, r7, #20
 8010e8e:	4619      	mov	r1, r3
 8010e90:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8010e92:	f7fe fe57 	bl	800fb44 <WriteStr>
 8010e96:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8010e9a:	3319      	adds	r3, #25
 8010e9c:	b29b      	uxth	r3, r3
 8010e9e:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8010ea2:	f9b7 3042 	ldrsh.w	r3, [r7, #66]	; 0x42
 8010ea6:	2bc8      	cmp	r3, #200	; 0xc8
 8010ea8:	ddc8      	ble.n	8010e3c <Save_Svg+0x1dc>
 8010eaa:	2300      	movs	r3, #0
 8010eac:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8010eb0:	e01d      	b.n	8010eee <Save_Svg+0x28e>
 8010eb2:	4b43      	ldr	r3, [pc, #268]	; (8010fc0 <Save_Svg+0x360>)
 8010eb4:	63fb      	str	r3, [r7, #60]	; 0x3c
 8010eb6:	f107 0314 	add.w	r3, r7, #20
 8010eba:	4619      	mov	r1, r3
 8010ebc:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8010ebe:	f7fe fe41 	bl	800fb44 <WriteStr>
 8010ec2:	f107 0214 	add.w	r2, r7, #20
 8010ec6:	f9b7 3044 	ldrsh.w	r3, [r7, #68]	; 0x44
 8010eca:	4611      	mov	r1, r2
 8010ecc:	4618      	mov	r0, r3
 8010ece:	f7fe fd91 	bl	800f9f4 <WriteVar>
 8010ed2:	4b3c      	ldr	r3, [pc, #240]	; (8010fc4 <Save_Svg+0x364>)
 8010ed4:	63fb      	str	r3, [r7, #60]	; 0x3c
 8010ed6:	f107 0314 	add.w	r3, r7, #20
 8010eda:	4619      	mov	r1, r3
 8010edc:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8010ede:	f7fe fe31 	bl	800fb44 <WriteStr>
 8010ee2:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8010ee6:	3319      	adds	r3, #25
 8010ee8:	b29b      	uxth	r3, r3
 8010eea:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8010eee:	4b28      	ldr	r3, [pc, #160]	; (8010f90 <Save_Svg+0x330>)
 8010ef0:	f9b3 304c 	ldrsh.w	r3, [r3, #76]	; 0x4c
 8010ef4:	461a      	mov	r2, r3
 8010ef6:	4b27      	ldr	r3, [pc, #156]	; (8010f94 <Save_Svg+0x334>)
 8010ef8:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8010efc:	f9b7 2044 	ldrsh.w	r2, [r7, #68]	; 0x44
 8010f00:	429a      	cmp	r2, r3
 8010f02:	ddd6      	ble.n	8010eb2 <Save_Svg+0x252>
 8010f04:	4b30      	ldr	r3, [pc, #192]	; (8010fc8 <Save_Svg+0x368>)
 8010f06:	63fb      	str	r3, [r7, #60]	; 0x3c
 8010f08:	f107 0314 	add.w	r3, r7, #20
 8010f0c:	4619      	mov	r1, r3
 8010f0e:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8010f10:	f7fe fe18 	bl	800fb44 <WriteStr>
 8010f14:	2300      	movs	r3, #0
 8010f16:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8010f1a:	e091      	b.n	8011040 <Save_Svg+0x3e0>
 8010f1c:	f9b7 3046 	ldrsh.w	r3, [r7, #70]	; 0x46
 8010f20:	3302      	adds	r3, #2
 8010f22:	4a2a      	ldr	r2, [pc, #168]	; (8010fcc <Save_Svg+0x36c>)
 8010f24:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8010f28:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 8010f2c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8010f2e:	fb02 f303 	mul.w	r3, r2, r3
 8010f32:	131b      	asrs	r3, r3, #12
 8010f34:	b29b      	uxth	r3, r3
 8010f36:	3364      	adds	r3, #100	; 0x64
 8010f38:	b29b      	uxth	r3, r3
 8010f3a:	857b      	strh	r3, [r7, #42]	; 0x2a
 8010f3c:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8010f40:	2b00      	cmp	r3, #0
 8010f42:	dd45      	ble.n	8010fd0 <Save_Svg+0x370>
 8010f44:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8010f48:	2bc8      	cmp	r3, #200	; 0xc8
 8010f4a:	dd02      	ble.n	8010f52 <Save_Svg+0x2f2>
 8010f4c:	23c7      	movs	r3, #199	; 0xc7
 8010f4e:	813b      	strh	r3, [r7, #8]
 8010f50:	e040      	b.n	8010fd4 <Save_Svg+0x374>
 8010f52:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8010f54:	813b      	strh	r3, [r7, #8]
 8010f56:	e03d      	b.n	8010fd4 <Save_Svg+0x374>
 8010f58:	0800022c 	.word	0x0800022c
 8010f5c:	20000580 	.word	0x20000580
 8010f60:	2000688e 	.word	0x2000688e
 8010f64:	2000286a 	.word	0x2000286a
 8010f68:	20002852 	.word	0x20002852
 8010f6c:	20000564 	.word	0x20000564
 8010f70:	2000079c 	.word	0x2000079c
 8010f74:	20000798 	.word	0x20000798
 8010f78:	2000079a 	.word	0x2000079a
 8010f7c:	2000000c 	.word	0x2000000c
 8010f80:	200017e0 	.word	0x200017e0
 8010f84:	0800024c 	.word	0x0800024c
 8010f88:	0800027c 	.word	0x0800027c
 8010f8c:	080002e8 	.word	0x080002e8
 8010f90:	2000029c 	.word	0x2000029c
 8010f94:	08002270 	.word	0x08002270
 8010f98:	080002f8 	.word	0x080002f8
 8010f9c:	08000384 	.word	0x08000384
 8010fa0:	080003b0 	.word	0x080003b0
 8010fa4:	080003c0 	.word	0x080003c0
 8010fa8:	080003e8 	.word	0x080003e8
 8010fac:	080003f0 	.word	0x080003f0
 8010fb0:	080003f8 	.word	0x080003f8
 8010fb4:	08000404 	.word	0x08000404
 8010fb8:	08000424 	.word	0x08000424
 8010fbc:	08000428 	.word	0x08000428
 8010fc0:	08000430 	.word	0x08000430
 8010fc4:	0800044c 	.word	0x0800044c
 8010fc8:	08000458 	.word	0x08000458
 8010fcc:	20002878 	.word	0x20002878
 8010fd0:	2300      	movs	r3, #0
 8010fd2:	813b      	strh	r3, [r7, #8]
 8010fd4:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8010fd8:	b29b      	uxth	r3, r3
 8010fda:	f1c3 03c8 	rsb	r3, r3, #200	; 0xc8
 8010fde:	b29b      	uxth	r3, r3
 8010fe0:	b21b      	sxth	r3, r3
 8010fe2:	813b      	strh	r3, [r7, #8]
 8010fe4:	f9b7 3046 	ldrsh.w	r3, [r7, #70]	; 0x46
 8010fe8:	2b00      	cmp	r3, #0
 8010fea:	d102      	bne.n	8010ff2 <Save_Svg+0x392>
 8010fec:	4b3b      	ldr	r3, [pc, #236]	; (80110dc <Save_Svg+0x47c>)
 8010fee:	63fb      	str	r3, [r7, #60]	; 0x3c
 8010ff0:	e001      	b.n	8010ff6 <Save_Svg+0x396>
 8010ff2:	4b3b      	ldr	r3, [pc, #236]	; (80110e0 <Save_Svg+0x480>)
 8010ff4:	63fb      	str	r3, [r7, #60]	; 0x3c
 8010ff6:	f107 0314 	add.w	r3, r7, #20
 8010ffa:	4619      	mov	r1, r3
 8010ffc:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8010ffe:	f7fe fda1 	bl	800fb44 <WriteStr>
 8011002:	f107 0214 	add.w	r2, r7, #20
 8011006:	f9b7 3046 	ldrsh.w	r3, [r7, #70]	; 0x46
 801100a:	4611      	mov	r1, r2
 801100c:	4618      	mov	r0, r3
 801100e:	f7fe fcf1 	bl	800f9f4 <WriteVar>
 8011012:	4b34      	ldr	r3, [pc, #208]	; (80110e4 <Save_Svg+0x484>)
 8011014:	63fb      	str	r3, [r7, #60]	; 0x3c
 8011016:	f107 0314 	add.w	r3, r7, #20
 801101a:	4619      	mov	r1, r3
 801101c:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 801101e:	f7fe fd91 	bl	800fb44 <WriteStr>
 8011022:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8011026:	f107 0214 	add.w	r2, r7, #20
 801102a:	4611      	mov	r1, r2
 801102c:	4618      	mov	r0, r3
 801102e:	f7fe fce1 	bl	800f9f4 <WriteVar>
 8011032:	f9b7 3046 	ldrsh.w	r3, [r7, #70]	; 0x46
 8011036:	b29b      	uxth	r3, r3
 8011038:	3301      	adds	r3, #1
 801103a:	b29b      	uxth	r3, r3
 801103c:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8011040:	4b29      	ldr	r3, [pc, #164]	; (80110e8 <Save_Svg+0x488>)
 8011042:	f9b3 304c 	ldrsh.w	r3, [r3, #76]	; 0x4c
 8011046:	461a      	mov	r2, r3
 8011048:	4b28      	ldr	r3, [pc, #160]	; (80110ec <Save_Svg+0x48c>)
 801104a:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 801104e:	f9b7 2046 	ldrsh.w	r2, [r7, #70]	; 0x46
 8011052:	429a      	cmp	r2, r3
 8011054:	f77f af62 	ble.w	8010f1c <Save_Svg+0x2bc>
 8011058:	4b25      	ldr	r3, [pc, #148]	; (80110f0 <Save_Svg+0x490>)
 801105a:	63fb      	str	r3, [r7, #60]	; 0x3c
 801105c:	f107 0314 	add.w	r3, r7, #20
 8011060:	4619      	mov	r1, r3
 8011062:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8011064:	f7fe fd6e 	bl	800fb44 <WriteStr>
 8011068:	4b22      	ldr	r3, [pc, #136]	; (80110f4 <Save_Svg+0x494>)
 801106a:	63fb      	str	r3, [r7, #60]	; 0x3c
 801106c:	f107 0314 	add.w	r3, r7, #20
 8011070:	4619      	mov	r1, r3
 8011072:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8011074:	f7fe fd66 	bl	800fb44 <WriteStr>
 8011078:	4b1b      	ldr	r3, [pc, #108]	; (80110e8 <Save_Svg+0x488>)
 801107a:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 801107e:	2b00      	cmp	r3, #0
 8011080:	d007      	beq.n	8011092 <Save_Svg+0x432>
 8011082:	4b19      	ldr	r3, [pc, #100]	; (80110e8 <Save_Svg+0x488>)
 8011084:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8011088:	00db      	lsls	r3, r3, #3
 801108a:	4a1b      	ldr	r2, [pc, #108]	; (80110f8 <Save_Svg+0x498>)
 801108c:	4413      	add	r3, r2
 801108e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8011090:	e006      	b.n	80110a0 <Save_Svg+0x440>
 8011092:	4b15      	ldr	r3, [pc, #84]	; (80110e8 <Save_Svg+0x488>)
 8011094:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8011098:	00db      	lsls	r3, r3, #3
 801109a:	4a18      	ldr	r2, [pc, #96]	; (80110fc <Save_Svg+0x49c>)
 801109c:	4413      	add	r3, r2
 801109e:	63fb      	str	r3, [r7, #60]	; 0x3c
 80110a0:	f107 0314 	add.w	r3, r7, #20
 80110a4:	4619      	mov	r1, r3
 80110a6:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80110a8:	f7fe fd4c 	bl	800fb44 <WriteStr>
 80110ac:	4b14      	ldr	r3, [pc, #80]	; (8011100 <Save_Svg+0x4a0>)
 80110ae:	63fb      	str	r3, [r7, #60]	; 0x3c
 80110b0:	f107 0314 	add.w	r3, r7, #20
 80110b4:	4619      	mov	r1, r3
 80110b6:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80110b8:	f7fe fd44 	bl	800fb44 <WriteStr>
 80110bc:	4b11      	ldr	r3, [pc, #68]	; (8011104 <Save_Svg+0x4a4>)
 80110be:	63fb      	str	r3, [r7, #60]	; 0x3c
 80110c0:	f107 0314 	add.w	r3, r7, #20
 80110c4:	4619      	mov	r1, r3
 80110c6:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80110c8:	f7fe fd3c 	bl	800fb44 <WriteStr>
 80110cc:	4b06      	ldr	r3, [pc, #24]	; (80110e8 <Save_Svg+0x488>)
 80110ce:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 80110d2:	2b00      	cmp	r3, #0
 80110d4:	d01a      	beq.n	801110c <Save_Svg+0x4ac>
 80110d6:	4b0c      	ldr	r3, [pc, #48]	; (8011108 <Save_Svg+0x4a8>)
 80110d8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80110da:	e019      	b.n	8011110 <Save_Svg+0x4b0>
 80110dc:	08000490 	.word	0x08000490
 80110e0:	08000494 	.word	0x08000494
 80110e4:	08000498 	.word	0x08000498
 80110e8:	2000029c 	.word	0x2000029c
 80110ec:	08002270 	.word	0x08002270
 80110f0:	08000428 	.word	0x08000428
 80110f4:	0800049c 	.word	0x0800049c
 80110f8:	080019fc 	.word	0x080019fc
 80110fc:	080019ac 	.word	0x080019ac
 8011100:	08000504 	.word	0x08000504
 8011104:	0800050c 	.word	0x0800050c
 8011108:	08000510 	.word	0x08000510
 801110c:	4bb1      	ldr	r3, [pc, #708]	; (80113d4 <Save_Svg+0x774>)
 801110e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8011110:	f107 0314 	add.w	r3, r7, #20
 8011114:	4619      	mov	r1, r3
 8011116:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8011118:	f7fe fd14 	bl	800fb44 <WriteStr>
 801111c:	4bae      	ldr	r3, [pc, #696]	; (80113d8 <Save_Svg+0x778>)
 801111e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8011120:	f107 0314 	add.w	r3, r7, #20
 8011124:	4619      	mov	r1, r3
 8011126:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8011128:	f7fe fd0c 	bl	800fb44 <WriteStr>
 801112c:	4bab      	ldr	r3, [pc, #684]	; (80113dc <Save_Svg+0x77c>)
 801112e:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8011132:	00db      	lsls	r3, r3, #3
 8011134:	4aaa      	ldr	r2, [pc, #680]	; (80113e0 <Save_Svg+0x780>)
 8011136:	4413      	add	r3, r2
 8011138:	63fb      	str	r3, [r7, #60]	; 0x3c
 801113a:	f107 0314 	add.w	r3, r7, #20
 801113e:	4619      	mov	r1, r3
 8011140:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8011142:	f7fe fcff 	bl	800fb44 <WriteStr>
 8011146:	4ba7      	ldr	r3, [pc, #668]	; (80113e4 <Save_Svg+0x784>)
 8011148:	63fb      	str	r3, [r7, #60]	; 0x3c
 801114a:	f107 0314 	add.w	r3, r7, #20
 801114e:	4619      	mov	r1, r3
 8011150:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8011152:	f7fe fcf7 	bl	800fb44 <WriteStr>
 8011156:	4ba4      	ldr	r3, [pc, #656]	; (80113e8 <Save_Svg+0x788>)
 8011158:	63fb      	str	r3, [r7, #60]	; 0x3c
 801115a:	f107 0314 	add.w	r3, r7, #20
 801115e:	4619      	mov	r1, r3
 8011160:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8011162:	f7fe fcef 	bl	800fb44 <WriteStr>
 8011166:	4b9d      	ldr	r3, [pc, #628]	; (80113dc <Save_Svg+0x77c>)
 8011168:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 801116c:	b29b      	uxth	r3, r3
 801116e:	f1c3 03c7 	rsb	r3, r3, #199	; 0xc7
 8011172:	b29b      	uxth	r3, r3
 8011174:	863b      	strh	r3, [r7, #48]	; 0x30
 8011176:	4b9d      	ldr	r3, [pc, #628]	; (80113ec <Save_Svg+0x78c>)
 8011178:	63fb      	str	r3, [r7, #60]	; 0x3c
 801117a:	f107 0314 	add.w	r3, r7, #20
 801117e:	4619      	mov	r1, r3
 8011180:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8011182:	f7fe fcdf 	bl	800fb44 <WriteStr>
 8011186:	4b9a      	ldr	r3, [pc, #616]	; (80113f0 <Save_Svg+0x790>)
 8011188:	63fb      	str	r3, [r7, #60]	; 0x3c
 801118a:	f107 0314 	add.w	r3, r7, #20
 801118e:	4619      	mov	r1, r3
 8011190:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8011192:	f7fe fcd7 	bl	800fb44 <WriteStr>
 8011196:	4b97      	ldr	r3, [pc, #604]	; (80113f4 <Save_Svg+0x794>)
 8011198:	63fb      	str	r3, [r7, #60]	; 0x3c
 801119a:	f107 0314 	add.w	r3, r7, #20
 801119e:	4619      	mov	r1, r3
 80111a0:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80111a2:	f7fe fccf 	bl	800fb44 <WriteStr>
 80111a6:	4b94      	ldr	r3, [pc, #592]	; (80113f8 <Save_Svg+0x798>)
 80111a8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80111aa:	f107 0314 	add.w	r3, r7, #20
 80111ae:	4619      	mov	r1, r3
 80111b0:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80111b2:	f7fe fcc7 	bl	800fb44 <WriteStr>
 80111b6:	4b91      	ldr	r3, [pc, #580]	; (80113fc <Save_Svg+0x79c>)
 80111b8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80111ba:	f107 0314 	add.w	r3, r7, #20
 80111be:	4619      	mov	r1, r3
 80111c0:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80111c2:	f7fe fcbf 	bl	800fb44 <WriteStr>
 80111c6:	4b8e      	ldr	r3, [pc, #568]	; (8011400 <Save_Svg+0x7a0>)
 80111c8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80111ca:	f107 0314 	add.w	r3, r7, #20
 80111ce:	4619      	mov	r1, r3
 80111d0:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80111d2:	f7fe fcb7 	bl	800fb44 <WriteStr>
 80111d6:	4b8b      	ldr	r3, [pc, #556]	; (8011404 <Save_Svg+0x7a4>)
 80111d8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80111da:	f107 0314 	add.w	r3, r7, #20
 80111de:	4619      	mov	r1, r3
 80111e0:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80111e2:	f7fe fcaf 	bl	800fb44 <WriteStr>
 80111e6:	4b88      	ldr	r3, [pc, #544]	; (8011408 <Save_Svg+0x7a8>)
 80111e8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80111ea:	f107 0314 	add.w	r3, r7, #20
 80111ee:	4619      	mov	r1, r3
 80111f0:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80111f2:	f7fe fca7 	bl	800fb44 <WriteStr>
 80111f6:	4b85      	ldr	r3, [pc, #532]	; (801140c <Save_Svg+0x7ac>)
 80111f8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80111fa:	f107 0314 	add.w	r3, r7, #20
 80111fe:	4619      	mov	r1, r3
 8011200:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8011202:	f7fe fc9f 	bl	800fb44 <WriteStr>
 8011206:	4b82      	ldr	r3, [pc, #520]	; (8011410 <Save_Svg+0x7b0>)
 8011208:	63fb      	str	r3, [r7, #60]	; 0x3c
 801120a:	f107 0314 	add.w	r3, r7, #20
 801120e:	4619      	mov	r1, r3
 8011210:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8011212:	f7fe fc97 	bl	800fb44 <WriteStr>
 8011216:	4b7f      	ldr	r3, [pc, #508]	; (8011414 <Save_Svg+0x7b4>)
 8011218:	63fb      	str	r3, [r7, #60]	; 0x3c
 801121a:	f107 0314 	add.w	r3, r7, #20
 801121e:	4619      	mov	r1, r3
 8011220:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8011222:	f7fe fc8f 	bl	800fb44 <WriteStr>
 8011226:	4b7c      	ldr	r3, [pc, #496]	; (8011418 <Save_Svg+0x7b8>)
 8011228:	63fb      	str	r3, [r7, #60]	; 0x3c
 801122a:	f107 0314 	add.w	r3, r7, #20
 801122e:	4619      	mov	r1, r3
 8011230:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8011232:	f7fe fc87 	bl	800fb44 <WriteStr>
 8011236:	4b79      	ldr	r3, [pc, #484]	; (801141c <Save_Svg+0x7bc>)
 8011238:	63fb      	str	r3, [r7, #60]	; 0x3c
 801123a:	f107 0314 	add.w	r3, r7, #20
 801123e:	4619      	mov	r1, r3
 8011240:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8011242:	f7fe fc7f 	bl	800fb44 <WriteStr>
 8011246:	4b65      	ldr	r3, [pc, #404]	; (80113dc <Save_Svg+0x77c>)
 8011248:	f9b3 304c 	ldrsh.w	r3, [r3, #76]	; 0x4c
 801124c:	461a      	mov	r2, r3
 801124e:	4b74      	ldr	r3, [pc, #464]	; (8011420 <Save_Svg+0x7c0>)
 8011250:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8011254:	f107 0214 	add.w	r2, r7, #20
 8011258:	4611      	mov	r1, r2
 801125a:	4618      	mov	r0, r3
 801125c:	f7fe fbca 	bl	800f9f4 <WriteVar>
 8011260:	4b70      	ldr	r3, [pc, #448]	; (8011424 <Save_Svg+0x7c4>)
 8011262:	63fb      	str	r3, [r7, #60]	; 0x3c
 8011264:	f107 0314 	add.w	r3, r7, #20
 8011268:	4619      	mov	r1, r3
 801126a:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 801126c:	f7fe fc6a 	bl	800fb44 <WriteStr>
 8011270:	4b6d      	ldr	r3, [pc, #436]	; (8011428 <Save_Svg+0x7c8>)
 8011272:	63fb      	str	r3, [r7, #60]	; 0x3c
 8011274:	f107 0314 	add.w	r3, r7, #20
 8011278:	4619      	mov	r1, r3
 801127a:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 801127c:	f7fe fc62 	bl	800fb44 <WriteStr>
 8011280:	4b6a      	ldr	r3, [pc, #424]	; (801142c <Save_Svg+0x7cc>)
 8011282:	63fb      	str	r3, [r7, #60]	; 0x3c
 8011284:	f107 0314 	add.w	r3, r7, #20
 8011288:	4619      	mov	r1, r3
 801128a:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 801128c:	f7fe fc5a 	bl	800fb44 <WriteStr>
 8011290:	4b67      	ldr	r3, [pc, #412]	; (8011430 <Save_Svg+0x7d0>)
 8011292:	63fb      	str	r3, [r7, #60]	; 0x3c
 8011294:	f107 0314 	add.w	r3, r7, #20
 8011298:	4619      	mov	r1, r3
 801129a:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 801129c:	f7fe fc52 	bl	800fb44 <WriteStr>
 80112a0:	4b64      	ldr	r3, [pc, #400]	; (8011434 <Save_Svg+0x7d4>)
 80112a2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80112a4:	f107 0314 	add.w	r3, r7, #20
 80112a8:	4619      	mov	r1, r3
 80112aa:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80112ac:	f7fe fc4a 	bl	800fb44 <WriteStr>
 80112b0:	4b61      	ldr	r3, [pc, #388]	; (8011438 <Save_Svg+0x7d8>)
 80112b2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80112b4:	f107 0314 	add.w	r3, r7, #20
 80112b8:	4619      	mov	r1, r3
 80112ba:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80112bc:	f7fe fc42 	bl	800fb44 <WriteStr>
 80112c0:	4b5e      	ldr	r3, [pc, #376]	; (801143c <Save_Svg+0x7dc>)
 80112c2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80112c4:	f107 0314 	add.w	r3, r7, #20
 80112c8:	4619      	mov	r1, r3
 80112ca:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80112cc:	f7fe fc3a 	bl	800fb44 <WriteStr>
 80112d0:	4b58      	ldr	r3, [pc, #352]	; (8011434 <Save_Svg+0x7d4>)
 80112d2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80112d4:	f107 0314 	add.w	r3, r7, #20
 80112d8:	4619      	mov	r1, r3
 80112da:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80112dc:	f7fe fc32 	bl	800fb44 <WriteStr>
 80112e0:	4b57      	ldr	r3, [pc, #348]	; (8011440 <Save_Svg+0x7e0>)
 80112e2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80112e4:	f107 0314 	add.w	r3, r7, #20
 80112e8:	4619      	mov	r1, r3
 80112ea:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80112ec:	f7fe fc2a 	bl	800fb44 <WriteStr>
 80112f0:	4b3a      	ldr	r3, [pc, #232]	; (80113dc <Save_Svg+0x77c>)
 80112f2:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 80112f6:	2b00      	cmp	r3, #0
 80112f8:	d00b      	beq.n	8011312 <Save_Svg+0x6b2>
 80112fa:	4b38      	ldr	r3, [pc, #224]	; (80113dc <Save_Svg+0x77c>)
 80112fc:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8011300:	461a      	mov	r2, r3
 8011302:	4613      	mov	r3, r2
 8011304:	005b      	lsls	r3, r3, #1
 8011306:	4413      	add	r3, r2
 8011308:	005b      	lsls	r3, r3, #1
 801130a:	4a4e      	ldr	r2, [pc, #312]	; (8011444 <Save_Svg+0x7e4>)
 801130c:	4413      	add	r3, r2
 801130e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8011310:	e00a      	b.n	8011328 <Save_Svg+0x6c8>
 8011312:	4b32      	ldr	r3, [pc, #200]	; (80113dc <Save_Svg+0x77c>)
 8011314:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8011318:	461a      	mov	r2, r3
 801131a:	4613      	mov	r3, r2
 801131c:	005b      	lsls	r3, r3, #1
 801131e:	4413      	add	r3, r2
 8011320:	005b      	lsls	r3, r3, #1
 8011322:	4a49      	ldr	r2, [pc, #292]	; (8011448 <Save_Svg+0x7e8>)
 8011324:	4413      	add	r3, r2
 8011326:	63fb      	str	r3, [r7, #60]	; 0x3c
 8011328:	f107 0314 	add.w	r3, r7, #20
 801132c:	4619      	mov	r1, r3
 801132e:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8011330:	f7fe fc08 	bl	800fb44 <WriteStr>
 8011334:	4b45      	ldr	r3, [pc, #276]	; (801144c <Save_Svg+0x7ec>)
 8011336:	63fb      	str	r3, [r7, #60]	; 0x3c
 8011338:	f107 0314 	add.w	r3, r7, #20
 801133c:	4619      	mov	r1, r3
 801133e:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8011340:	f7fe fc00 	bl	800fb44 <WriteStr>
 8011344:	f107 0214 	add.w	r2, r7, #20
 8011348:	f9b7 3030 	ldrsh.w	r3, [r7, #48]	; 0x30
 801134c:	4611      	mov	r1, r2
 801134e:	4618      	mov	r0, r3
 8011350:	f7fe fb50 	bl	800f9f4 <WriteVar>
 8011354:	4b3e      	ldr	r3, [pc, #248]	; (8011450 <Save_Svg+0x7f0>)
 8011356:	63fb      	str	r3, [r7, #60]	; 0x3c
 8011358:	f107 0314 	add.w	r3, r7, #20
 801135c:	4619      	mov	r1, r3
 801135e:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8011360:	f7fe fbf0 	bl	800fb44 <WriteStr>
 8011364:	4b1d      	ldr	r3, [pc, #116]	; (80113dc <Save_Svg+0x77c>)
 8011366:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 801136a:	00db      	lsls	r3, r3, #3
 801136c:	4a39      	ldr	r2, [pc, #228]	; (8011454 <Save_Svg+0x7f4>)
 801136e:	4413      	add	r3, r2
 8011370:	63fb      	str	r3, [r7, #60]	; 0x3c
 8011372:	f107 0314 	add.w	r3, r7, #20
 8011376:	4619      	mov	r1, r3
 8011378:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 801137a:	f7fe fbe3 	bl	800fb44 <WriteStr>
 801137e:	4b36      	ldr	r3, [pc, #216]	; (8011458 <Save_Svg+0x7f8>)
 8011380:	63fb      	str	r3, [r7, #60]	; 0x3c
 8011382:	f107 0314 	add.w	r3, r7, #20
 8011386:	4619      	mov	r1, r3
 8011388:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 801138a:	f7fe fbdb 	bl	800fb44 <WriteStr>
 801138e:	4b1d      	ldr	r3, [pc, #116]	; (8011404 <Save_Svg+0x7a4>)
 8011390:	63fb      	str	r3, [r7, #60]	; 0x3c
 8011392:	f107 0314 	add.w	r3, r7, #20
 8011396:	4619      	mov	r1, r3
 8011398:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 801139a:	f7fe fbd3 	bl	800fb44 <WriteStr>
 801139e:	4b2f      	ldr	r3, [pc, #188]	; (801145c <Save_Svg+0x7fc>)
 80113a0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80113a2:	f107 0314 	add.w	r3, r7, #20
 80113a6:	4619      	mov	r1, r3
 80113a8:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80113aa:	f7fe fbcb 	bl	800fb44 <WriteStr>
 80113ae:	4b2c      	ldr	r3, [pc, #176]	; (8011460 <Save_Svg+0x800>)
 80113b0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80113b2:	f107 0314 	add.w	r3, r7, #20
 80113b6:	4619      	mov	r1, r3
 80113b8:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80113ba:	f7fe fbc3 	bl	800fb44 <WriteStr>
 80113be:	f107 0314 	add.w	r3, r7, #20
 80113c2:	4619      	mov	r1, r3
 80113c4:	4827      	ldr	r0, [pc, #156]	; (8011464 <Save_Svg+0x804>)
 80113c6:	f7fe f8e5 	bl	800f594 <ProgFileSec>
 80113ca:	4603      	mov	r3, r0
 80113cc:	2b00      	cmp	r3, #0
 80113ce:	d04b      	beq.n	8011468 <Save_Svg+0x808>
 80113d0:	2303      	movs	r3, #3
 80113d2:	e07b      	b.n	80114cc <Save_Svg+0x86c>
 80113d4:	08000514 	.word	0x08000514
 80113d8:	08000518 	.word	0x08000518
 80113dc:	2000029c 	.word	0x2000029c
 80113e0:	200001d4 	.word	0x200001d4
 80113e4:	0800051c 	.word	0x0800051c
 80113e8:	0800052c 	.word	0x0800052c
 80113ec:	08000598 	.word	0x08000598
 80113f0:	080005c4 	.word	0x080005c4
 80113f4:	08000628 	.word	0x08000628
 80113f8:	08000644 	.word	0x08000644
 80113fc:	08000684 	.word	0x08000684
 8011400:	080006c0 	.word	0x080006c0
 8011404:	080006f4 	.word	0x080006f4
 8011408:	080006f8 	.word	0x080006f8
 801140c:	0800074c 	.word	0x0800074c
 8011410:	08000764 	.word	0x08000764
 8011414:	08000768 	.word	0x08000768
 8011418:	0800077c 	.word	0x0800077c
 801141c:	08000794 	.word	0x08000794
 8011420:	08002270 	.word	0x08002270
 8011424:	080007b0 	.word	0x080007b0
 8011428:	080007c0 	.word	0x080007c0
 801142c:	080007cc 	.word	0x080007cc
 8011430:	08000818 	.word	0x08000818
 8011434:	08000838 	.word	0x08000838
 8011438:	0800083c 	.word	0x0800083c
 801143c:	08000880 	.word	0x08000880
 8011440:	080008cc 	.word	0x080008cc
 8011444:	08001a88 	.word	0x08001a88
 8011448:	08001a4c 	.word	0x08001a4c
 801144c:	08000914 	.word	0x08000914
 8011450:	08000918 	.word	0x08000918
 8011454:	08001ac4 	.word	0x08001ac4
 8011458:	0800092c 	.word	0x0800092c
 801145c:	08000930 	.word	0x08000930
 8011460:	08000940 	.word	0x08000940
 8011464:	200017e0 	.word	0x200017e0
 8011468:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801146a:	1c5a      	adds	r2, r3, #1
 801146c:	637a      	str	r2, [r7, #52]	; 0x34
 801146e:	105b      	asrs	r3, r3, #1
 8011470:	b2db      	uxtb	r3, r3
 8011472:	f003 0303 	and.w	r3, r3, #3
 8011476:	b2db      	uxtb	r3, r3
 8011478:	461a      	mov	r2, r3
 801147a:	2102      	movs	r1, #2
 801147c:	f44f 7084 	mov.w	r0, #264	; 0x108
 8011480:	f7fe fa42 	bl	800f908 <PrintClk>
 8011484:	4b13      	ldr	r3, [pc, #76]	; (80114d4 <Save_Svg+0x874>)
 8011486:	6819      	ldr	r1, [r3, #0]
 8011488:	f107 0310 	add.w	r3, r7, #16
 801148c:	f107 0214 	add.w	r2, r7, #20
 8011490:	4811      	ldr	r0, [pc, #68]	; (80114d8 <Save_Svg+0x878>)
 8011492:	f7fe f8f3 	bl	800f67c <CloseFile>
 8011496:	4603      	mov	r3, r0
 8011498:	2b00      	cmp	r3, #0
 801149a:	d001      	beq.n	80114a0 <Save_Svg+0x840>
 801149c:	2304      	movs	r3, #4
 801149e:	e015      	b.n	80114cc <Save_Svg+0x86c>
 80114a0:	4b0e      	ldr	r3, [pc, #56]	; (80114dc <Save_Svg+0x87c>)
 80114a2:	f9b3 310c 	ldrsh.w	r3, [r3, #268]	; 0x10c
 80114a6:	2b62      	cmp	r3, #98	; 0x62
 80114a8:	dc09      	bgt.n	80114be <Save_Svg+0x85e>
 80114aa:	4b0c      	ldr	r3, [pc, #48]	; (80114dc <Save_Svg+0x87c>)
 80114ac:	f9b3 310c 	ldrsh.w	r3, [r3, #268]	; 0x10c
 80114b0:	b29b      	uxth	r3, r3
 80114b2:	3301      	adds	r3, #1
 80114b4:	b29b      	uxth	r3, r3
 80114b6:	b21a      	sxth	r2, r3
 80114b8:	4b08      	ldr	r3, [pc, #32]	; (80114dc <Save_Svg+0x87c>)
 80114ba:	f8a3 210c 	strh.w	r2, [r3, #268]	; 0x10c
 80114be:	f44f 729b 	mov.w	r2, #310	; 0x136
 80114c2:	2100      	movs	r1, #0
 80114c4:	4806      	ldr	r0, [pc, #24]	; (80114e0 <Save_Svg+0x880>)
 80114c6:	f011 fced 	bl	8022ea4 <memset>
 80114ca:	2300      	movs	r3, #0
 80114cc:	4618      	mov	r0, r3
 80114ce:	3748      	adds	r7, #72	; 0x48
 80114d0:	46bd      	mov	sp, r7
 80114d2:	bd80      	pop	{r7, pc}
 80114d4:	2000079c 	.word	0x2000079c
 80114d8:	200017e0 	.word	0x200017e0
 80114dc:	2000029c 	.word	0x2000029c
 80114e0:	2000000c 	.word	0x2000000c

080114e4 <Read_CalFlag>:
unsigned long err;

FLASH_EraseInitTypeDef Flash_Erase ={0, 1, 1, 1, 2};

 void Read_CalFlag(void)
 {
 80114e4:	b480      	push	{r7}
 80114e6:	b083      	sub	sp, #12
 80114e8:	af00      	add	r7, sp, #0
	  unsigned short* ptr;
	  ptr=(unsigned short*)Kpg_Address;
 80114ea:	4b10      	ldr	r3, [pc, #64]	; (801152c <Read_CalFlag+0x48>)
 80114ec:	607b      	str	r3, [r7, #4]
	  if(*ptr++!=0xaa55)
 80114ee:	687b      	ldr	r3, [r7, #4]
 80114f0:	1c9a      	adds	r2, r3, #2
 80114f2:	607a      	str	r2, [r7, #4]
 80114f4:	881b      	ldrh	r3, [r3, #0]
 80114f6:	f64a 2255 	movw	r2, #43605	; 0xaa55
 80114fa:	4293      	cmp	r3, r2
 80114fc:	d10e      	bne.n	801151c <Read_CalFlag+0x38>
		  return;
	  if(*ptr++!=0x0400)
 80114fe:	687b      	ldr	r3, [r7, #4]
 8011500:	1c9a      	adds	r2, r3, #2
 8011502:	607a      	str	r2, [r7, #4]
 8011504:	881b      	ldrh	r3, [r3, #0]
 8011506:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801150a:	d109      	bne.n	8011520 <Read_CalFlag+0x3c>
		  return;
	  Cal_Flag = *ptr++;
 801150c:	687b      	ldr	r3, [r7, #4]
 801150e:	1c9a      	adds	r2, r3, #2
 8011510:	607a      	str	r2, [r7, #4]
 8011512:	881b      	ldrh	r3, [r3, #0]
 8011514:	b2da      	uxtb	r2, r3
 8011516:	4b06      	ldr	r3, [pc, #24]	; (8011530 <Read_CalFlag+0x4c>)
 8011518:	701a      	strb	r2, [r3, #0]
	  return;
 801151a:	e002      	b.n	8011522 <Read_CalFlag+0x3e>
		  return;
 801151c:	bf00      	nop
 801151e:	e000      	b.n	8011522 <Read_CalFlag+0x3e>
		  return;
 8011520:	bf00      	nop
 }
 8011522:	370c      	adds	r7, #12
 8011524:	46bd      	mov	sp, r7
 8011526:	f85d 7b04 	ldr.w	r7, [sp], #4
 801152a:	4770      	bx	lr
 801152c:	08004000 	.word	0x08004000
 8011530:	200001b8 	.word	0x200001b8

08011534 <Save_Parameter>:

 /*******************************************************************************
  Save_Parameter:                          Return: 0= Success
 *******************************************************************************/
 char Save_Parameter(void)
 {
 8011534:	b580      	push	{r7, lr}
 8011536:	b082      	sub	sp, #8
 8011538:	af00      	add	r7, sp, #0
   short i, j;
   unsigned short* ptr;

   Flash_Erase.Sector = 2;
 801153a:	4b45      	ldr	r3, [pc, #276]	; (8011650 <Save_Parameter+0x11c>)
 801153c:	2202      	movs	r2, #2
 801153e:	609a      	str	r2, [r3, #8]

   HAL_FLASH_Unlock();
 8011540:	f008 f81a 	bl	8019578 <HAL_FLASH_Unlock>
   j=HAL_FLASHEx_Erase( &Flash_Erase, &err);
 8011544:	4943      	ldr	r1, [pc, #268]	; (8011654 <Save_Parameter+0x120>)
 8011546:	4842      	ldr	r0, [pc, #264]	; (8011650 <Save_Parameter+0x11c>)
 8011548:	f008 f988 	bl	801985c <HAL_FLASHEx_Erase>
 801154c:	4603      	mov	r3, r0
 801154e:	80bb      	strh	r3, [r7, #4]
   if(j== HAL_OK)
 8011550:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8011554:	2b00      	cmp	r3, #0
 8011556:	d173      	bne.n	8011640 <Save_Parameter+0x10c>
   {
     ptr=F_Buff;
 8011558:	4b3f      	ldr	r3, [pc, #252]	; (8011658 <Save_Parameter+0x124>)
 801155a:	603b      	str	r3, [r7, #0]
     *ptr++=0x0400;                              //Ver:4.00
 801155c:	683b      	ldr	r3, [r7, #0]
 801155e:	1c9a      	adds	r2, r3, #2
 8011560:	603a      	str	r2, [r7, #0]
 8011562:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8011566:	801a      	strh	r2, [r3, #0]
     *ptr++=Current;
 8011568:	4b3c      	ldr	r3, [pc, #240]	; (801165c <Save_Parameter+0x128>)
 801156a:	f9b3 1000 	ldrsh.w	r1, [r3]
 801156e:	683b      	ldr	r3, [r7, #0]
 8011570:	1c9a      	adds	r2, r3, #2
 8011572:	603a      	str	r2, [r7, #0]
 8011574:	b28a      	uxth	r2, r1
 8011576:	801a      	strh	r2, [r3, #0]
     *ptr++=Status;
 8011578:	4b39      	ldr	r3, [pc, #228]	; (8011660 <Save_Parameter+0x12c>)
 801157a:	f9b3 1000 	ldrsh.w	r1, [r3]
 801157e:	683b      	ldr	r3, [r7, #0]
 8011580:	1c9a      	adds	r2, r3, #2
 8011582:	603a      	str	r2, [r7, #0]
 8011584:	b28a      	uxth	r2, r1
 8011586:	801a      	strh	r2, [r3, #0]
     for(i=0;i<42;i++)
 8011588:	2300      	movs	r3, #0
 801158a:	80fb      	strh	r3, [r7, #6]
 801158c:	e011      	b.n	80115b2 <Save_Parameter+0x7e>
    	 *ptr++=List[i].Val;
 801158e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8011592:	4a34      	ldr	r2, [pc, #208]	; (8011664 <Save_Parameter+0x130>)
 8011594:	00db      	lsls	r3, r3, #3
 8011596:	4413      	add	r3, r2
 8011598:	f9b3 1004 	ldrsh.w	r1, [r3, #4]
 801159c:	683b      	ldr	r3, [r7, #0]
 801159e:	1c9a      	adds	r2, r3, #2
 80115a0:	603a      	str	r2, [r7, #0]
 80115a2:	b28a      	uxth	r2, r1
 80115a4:	801a      	strh	r2, [r3, #0]
     for(i=0;i<42;i++)
 80115a6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80115aa:	b29b      	uxth	r3, r3
 80115ac:	3301      	adds	r3, #1
 80115ae:	b29b      	uxth	r3, r3
 80115b0:	80fb      	strh	r3, [r7, #6]
 80115b2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80115b6:	2b29      	cmp	r3, #41	; 0x29
 80115b8:	dde9      	ble.n	801158e <Save_Parameter+0x5a>
     for(i=0;i<8;i++)
 80115ba:	2300      	movs	r3, #0
 80115bc:	80fb      	strh	r3, [r7, #6]
 80115be:	e00f      	b.n	80115e0 <Save_Parameter+0xac>
    	 *ptr++=MenuNow[i];
 80115c0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80115c4:	4a28      	ldr	r2, [pc, #160]	; (8011668 <Save_Parameter+0x134>)
 80115c6:	f932 1013 	ldrsh.w	r1, [r2, r3, lsl #1]
 80115ca:	683b      	ldr	r3, [r7, #0]
 80115cc:	1c9a      	adds	r2, r3, #2
 80115ce:	603a      	str	r2, [r7, #0]
 80115d0:	b28a      	uxth	r2, r1
 80115d2:	801a      	strh	r2, [r3, #0]
     for(i=0;i<8;i++)
 80115d4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80115d8:	b29b      	uxth	r3, r3
 80115da:	3301      	adds	r3, #1
 80115dc:	b29b      	uxth	r3, r3
 80115de:	80fb      	strh	r3, [r7, #6]
 80115e0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80115e4:	2b07      	cmp	r3, #7
 80115e6:	ddeb      	ble.n	80115c0 <Save_Parameter+0x8c>
     *ptr++=0xaa55;
 80115e8:	683b      	ldr	r3, [r7, #0]
 80115ea:	1c9a      	adds	r2, r3, #2
 80115ec:	603a      	str	r2, [r7, #0]
 80115ee:	f64a 2255 	movw	r2, #43605	; 0xaa55
 80115f2:	801a      	strh	r2, [r3, #0]
     ptr=F_Buff;
 80115f4:	4b18      	ldr	r3, [pc, #96]	; (8011658 <Save_Parameter+0x124>)
 80115f6:	603b      	str	r3, [r7, #0]
     for(i=0; i<256; i+=2)
 80115f8:	2300      	movs	r3, #0
 80115fa:	80fb      	strh	r3, [r7, #6]
 80115fc:	e01a      	b.n	8011634 <Save_Parameter+0x100>
     {                      //128 SHORT
       j= HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, Page_Address+i, *ptr++);
 80115fe:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8011602:	f103 6300 	add.w	r3, r3, #134217728	; 0x8000000
 8011606:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 801160a:	4619      	mov	r1, r3
 801160c:	683b      	ldr	r3, [r7, #0]
 801160e:	1c9a      	adds	r2, r3, #2
 8011610:	603a      	str	r2, [r7, #0]
 8011612:	881b      	ldrh	r3, [r3, #0]
 8011614:	b29a      	uxth	r2, r3
 8011616:	f04f 0300 	mov.w	r3, #0
 801161a:	2001      	movs	r0, #1
 801161c:	f007 ff58 	bl	80194d0 <HAL_FLASH_Program>
 8011620:	4603      	mov	r3, r0
 8011622:	80bb      	strh	r3, [r7, #4]
       if(j!= HAL_OK)
 8011624:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8011628:	2b00      	cmp	r3, #0
 801162a:	d108      	bne.n	801163e <Save_Parameter+0x10a>
     for(i=0; i<256; i+=2)
 801162c:	88fb      	ldrh	r3, [r7, #6]
 801162e:	3302      	adds	r3, #2
 8011630:	b29b      	uxth	r3, r3
 8011632:	80fb      	strh	r3, [r7, #6]
 8011634:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8011638:	2bff      	cmp	r3, #255	; 0xff
 801163a:	dde0      	ble.n	80115fe <Save_Parameter+0xca>
 801163c:	e000      	b.n	8011640 <Save_Parameter+0x10c>
    	   break;
 801163e:	bf00      	nop
     }
   }
   HAL_FLASH_Lock();
 8011640:	f007 ffbc 	bl	80195bc <HAL_FLASH_Lock>

   return j;
 8011644:	88bb      	ldrh	r3, [r7, #4]
 8011646:	b2db      	uxtb	r3, r3
 }
 8011648:	4618      	mov	r0, r3
 801164a:	3708      	adds	r7, #8
 801164c:	46bd      	mov	sp, r7
 801164e:	bd80      	pop	{r7, pc}
 8011650:	200001bc 	.word	0x200001bc
 8011654:	20002820 	.word	0x20002820
 8011658:	200017e0 	.word	0x200017e0
 801165c:	200007a6 	.word	0x200007a6
 8011660:	200007a8 	.word	0x200007a8
 8011664:	2000029c 	.word	0x2000029c
 8011668:	2000053c 	.word	0x2000053c

0801166c <Read_Parameter>:
 /*******************************************************************************
 Read_Parameter:
 *******************************************************************************/
 void Read_Parameter(void)
 {
 801166c:	b480      	push	{r7}
 801166e:	b083      	sub	sp, #12
 8011670:	af00      	add	r7, sp, #0
   short i;
   unsigned short* ptr;
   ptr=(unsigned short*)(Page_Address+55*2); //94*2-40
 8011672:	4b3f      	ldr	r3, [pc, #252]	; (8011770 <Read_Parameter+0x104>)
 8011674:	603b      	str	r3, [r7, #0]
   TIM_BASE_Val=List[TIM_BASE].Val;
 8011676:	4b3f      	ldr	r3, [pc, #252]	; (8011774 <Read_Parameter+0x108>)
 8011678:	f9b3 203c 	ldrsh.w	r2, [r3, #60]	; 0x3c
 801167c:	4b3e      	ldr	r3, [pc, #248]	; (8011778 <Read_Parameter+0x10c>)
 801167e:	801a      	strh	r2, [r3, #0]
   List[TIM_BASE].Val=0;
 8011680:	4b3c      	ldr	r3, [pc, #240]	; (8011774 <Read_Parameter+0x108>)
 8011682:	2200      	movs	r2, #0
 8011684:	879a      	strh	r2, [r3, #60]	; 0x3c
   if(*ptr!=0xaa55)
 8011686:	683b      	ldr	r3, [r7, #0]
 8011688:	881b      	ldrh	r3, [r3, #0]
 801168a:	f64a 2255 	movw	r2, #43605	; 0xaa55
 801168e:	4293      	cmp	r3, r2
 8011690:	d166      	bne.n	8011760 <Read_Parameter+0xf4>
	   return ;
   ptr=(unsigned short*)Page_Address;
 8011692:	4b3a      	ldr	r3, [pc, #232]	; (801177c <Read_Parameter+0x110>)
 8011694:	603b      	str	r3, [r7, #0]
   if(*ptr++!=0x0400)
 8011696:	683b      	ldr	r3, [r7, #0]
 8011698:	1c9a      	adds	r2, r3, #2
 801169a:	603a      	str	r2, [r7, #0]
 801169c:	881b      	ldrh	r3, [r3, #0]
 801169e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80116a2:	d15f      	bne.n	8011764 <Read_Parameter+0xf8>
	   return ;
   Current=*ptr++;
 80116a4:	683b      	ldr	r3, [r7, #0]
 80116a6:	1c9a      	adds	r2, r3, #2
 80116a8:	603a      	str	r2, [r7, #0]
 80116aa:	881b      	ldrh	r3, [r3, #0]
 80116ac:	b21a      	sxth	r2, r3
 80116ae:	4b34      	ldr	r3, [pc, #208]	; (8011780 <Read_Parameter+0x114>)
 80116b0:	801a      	strh	r2, [r3, #0]
   List[MenuNow[Current]].Flg |= UPD;
 80116b2:	4b33      	ldr	r3, [pc, #204]	; (8011780 <Read_Parameter+0x114>)
 80116b4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80116b8:	461a      	mov	r2, r3
 80116ba:	4b32      	ldr	r3, [pc, #200]	; (8011784 <Read_Parameter+0x118>)
 80116bc:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 80116c0:	4a2c      	ldr	r2, [pc, #176]	; (8011774 <Read_Parameter+0x108>)
 80116c2:	00db      	lsls	r3, r3, #3
 80116c4:	4413      	add	r3, r2
 80116c6:	799b      	ldrb	r3, [r3, #6]
 80116c8:	4a2d      	ldr	r2, [pc, #180]	; (8011780 <Read_Parameter+0x114>)
 80116ca:	f9b2 2000 	ldrsh.w	r2, [r2]
 80116ce:	4611      	mov	r1, r2
 80116d0:	4a2c      	ldr	r2, [pc, #176]	; (8011784 <Read_Parameter+0x118>)
 80116d2:	f932 2011 	ldrsh.w	r2, [r2, r1, lsl #1]
 80116d6:	4610      	mov	r0, r2
 80116d8:	f043 0320 	orr.w	r3, r3, #32
 80116dc:	b2d9      	uxtb	r1, r3
 80116de:	4a25      	ldr	r2, [pc, #148]	; (8011774 <Read_Parameter+0x108>)
 80116e0:	00c3      	lsls	r3, r0, #3
 80116e2:	4413      	add	r3, r2
 80116e4:	460a      	mov	r2, r1
 80116e6:	719a      	strb	r2, [r3, #6]
   ptr++;
 80116e8:	683b      	ldr	r3, [r7, #0]
 80116ea:	3302      	adds	r3, #2
 80116ec:	603b      	str	r3, [r7, #0]
   for(i=0;i<42;i++)
 80116ee:	2300      	movs	r3, #0
 80116f0:	80fb      	strh	r3, [r7, #6]
 80116f2:	e011      	b.n	8011718 <Read_Parameter+0xac>
	   List[i].Val=*ptr++;
 80116f4:	683b      	ldr	r3, [r7, #0]
 80116f6:	1c9a      	adds	r2, r3, #2
 80116f8:	603a      	str	r2, [r7, #0]
 80116fa:	881a      	ldrh	r2, [r3, #0]
 80116fc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8011700:	b211      	sxth	r1, r2
 8011702:	4a1c      	ldr	r2, [pc, #112]	; (8011774 <Read_Parameter+0x108>)
 8011704:	00db      	lsls	r3, r3, #3
 8011706:	4413      	add	r3, r2
 8011708:	460a      	mov	r2, r1
 801170a:	809a      	strh	r2, [r3, #4]
   for(i=0;i<42;i++)
 801170c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8011710:	b29b      	uxth	r3, r3
 8011712:	3301      	adds	r3, #1
 8011714:	b29b      	uxth	r3, r3
 8011716:	80fb      	strh	r3, [r7, #6]
 8011718:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801171c:	2b29      	cmp	r3, #41	; 0x29
 801171e:	dde9      	ble.n	80116f4 <Read_Parameter+0x88>
   for(i=0;i<8;i++)
 8011720:	2300      	movs	r3, #0
 8011722:	80fb      	strh	r3, [r7, #6]
 8011724:	e00f      	b.n	8011746 <Read_Parameter+0xda>
	   MenuNow[i]=*ptr++;
 8011726:	683b      	ldr	r3, [r7, #0]
 8011728:	1c9a      	adds	r2, r3, #2
 801172a:	603a      	str	r2, [r7, #0]
 801172c:	881a      	ldrh	r2, [r3, #0]
 801172e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8011732:	b211      	sxth	r1, r2
 8011734:	4a13      	ldr	r2, [pc, #76]	; (8011784 <Read_Parameter+0x118>)
 8011736:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
   for(i=0;i<8;i++)
 801173a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801173e:	b29b      	uxth	r3, r3
 8011740:	3301      	adds	r3, #1
 8011742:	b29b      	uxth	r3, r3
 8011744:	80fb      	strh	r3, [r7, #6]
 8011746:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801174a:	2b07      	cmp	r3, #7
 801174c:	ddeb      	ble.n	8011726 <Read_Parameter+0xba>
   TIM_BASE_Val=List[TIM_BASE].Val;
 801174e:	4b09      	ldr	r3, [pc, #36]	; (8011774 <Read_Parameter+0x108>)
 8011750:	f9b3 203c 	ldrsh.w	r2, [r3, #60]	; 0x3c
 8011754:	4b08      	ldr	r3, [pc, #32]	; (8011778 <Read_Parameter+0x10c>)
 8011756:	801a      	strh	r2, [r3, #0]
   List[TIM_BASE].Val=0;
 8011758:	4b06      	ldr	r3, [pc, #24]	; (8011774 <Read_Parameter+0x108>)
 801175a:	2200      	movs	r2, #0
 801175c:	879a      	strh	r2, [r3, #60]	; 0x3c

   return ;
 801175e:	e002      	b.n	8011766 <Read_Parameter+0xfa>
	   return ;
 8011760:	bf00      	nop
 8011762:	e000      	b.n	8011766 <Read_Parameter+0xfa>
	   return ;
 8011764:	bf00      	nop
 }
 8011766:	370c      	adds	r7, #12
 8011768:	46bd      	mov	sp, r7
 801176a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801176e:	4770      	bx	lr
 8011770:	0800806e 	.word	0x0800806e
 8011774:	2000029c 	.word	0x2000029c
 8011778:	2000281c 	.word	0x2000281c
 801177c:	08008000 	.word	0x08008000
 8011780:	200007a6 	.word	0x200007a6
 8011784:	2000053c 	.word	0x2000053c

08011788 <Save_Kpg>:
 /*******************************************************************************
  Save_Kpg:                       Return: 0= Success
 *******************************************************************************/
 char Save_Kpg(void)
 {
 8011788:	b580      	push	{r7, lr}
 801178a:	b082      	sub	sp, #8
 801178c:	af00      	add	r7, sp, #0
   short i, j;
   unsigned short* ptr;

   Flash_Erase.Sector = 1;
 801178e:	4b34      	ldr	r3, [pc, #208]	; (8011860 <Save_Kpg+0xd8>)
 8011790:	2201      	movs	r2, #1
 8011792:	609a      	str	r2, [r3, #8]

   HAL_FLASH_Unlock();
 8011794:	f007 fef0 	bl	8019578 <HAL_FLASH_Unlock>
   j=HAL_FLASHEx_Erase( &Flash_Erase, &err);
 8011798:	4932      	ldr	r1, [pc, #200]	; (8011864 <Save_Kpg+0xdc>)
 801179a:	4831      	ldr	r0, [pc, #196]	; (8011860 <Save_Kpg+0xd8>)
 801179c:	f008 f85e 	bl	801985c <HAL_FLASHEx_Erase>
 80117a0:	4603      	mov	r3, r0
 80117a2:	80bb      	strh	r3, [r7, #4]
   if(j== HAL_OK)
 80117a4:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80117a8:	2b00      	cmp	r3, #0
 80117aa:	d151      	bne.n	8011850 <Save_Kpg+0xc8>
   {
     ptr=F_Buff;
 80117ac:	4b2e      	ldr	r3, [pc, #184]	; (8011868 <Save_Kpg+0xe0>)
 80117ae:	603b      	str	r3, [r7, #0]
     *ptr++=0xaa55;
 80117b0:	683b      	ldr	r3, [r7, #0]
 80117b2:	1c9a      	adds	r2, r3, #2
 80117b4:	603a      	str	r2, [r7, #0]
 80117b6:	f64a 2255 	movw	r2, #43605	; 0xaa55
 80117ba:	801a      	strh	r2, [r3, #0]
     *ptr++=0x0400;                              //Ver:3.00
 80117bc:	683b      	ldr	r3, [r7, #0]
 80117be:	1c9a      	adds	r2, r3, #2
 80117c0:	603a      	str	r2, [r7, #0]
 80117c2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80117c6:	801a      	strh	r2, [r3, #0]
     *ptr++=Cal_Flag;
 80117c8:	4b28      	ldr	r3, [pc, #160]	; (801186c <Save_Kpg+0xe4>)
 80117ca:	7819      	ldrb	r1, [r3, #0]
 80117cc:	683b      	ldr	r3, [r7, #0]
 80117ce:	1c9a      	adds	r2, r3, #2
 80117d0:	603a      	str	r2, [r7, #0]
 80117d2:	b28a      	uxth	r2, r1
 80117d4:	801a      	strh	r2, [r3, #0]
     for(i=0;i<3;i++)
 80117d6:	2300      	movs	r3, #0
 80117d8:	80fb      	strh	r3, [r7, #6]
 80117da:	e00f      	b.n	80117fc <Save_Kpg+0x74>
    	 *ptr++=Kpg[i];
 80117dc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80117e0:	4a23      	ldr	r2, [pc, #140]	; (8011870 <Save_Kpg+0xe8>)
 80117e2:	f932 1013 	ldrsh.w	r1, [r2, r3, lsl #1]
 80117e6:	683b      	ldr	r3, [r7, #0]
 80117e8:	1c9a      	adds	r2, r3, #2
 80117ea:	603a      	str	r2, [r7, #0]
 80117ec:	b28a      	uxth	r2, r1
 80117ee:	801a      	strh	r2, [r3, #0]
     for(i=0;i<3;i++)
 80117f0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80117f4:	b29b      	uxth	r3, r3
 80117f6:	3301      	adds	r3, #1
 80117f8:	b29b      	uxth	r3, r3
 80117fa:	80fb      	strh	r3, [r7, #6]
 80117fc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8011800:	2b02      	cmp	r3, #2
 8011802:	ddeb      	ble.n	80117dc <Save_Kpg+0x54>
     ptr=F_Buff;
 8011804:	4b18      	ldr	r3, [pc, #96]	; (8011868 <Save_Kpg+0xe0>)
 8011806:	603b      	str	r3, [r7, #0]
     for(i=0; i<256; i+=2)
 8011808:	2300      	movs	r3, #0
 801180a:	80fb      	strh	r3, [r7, #6]
 801180c:	e01a      	b.n	8011844 <Save_Kpg+0xbc>
     {                      //128 SHORT
       j= HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, Kpg_Address+i, *ptr++);
 801180e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8011812:	f103 6300 	add.w	r3, r3, #134217728	; 0x8000000
 8011816:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 801181a:	4619      	mov	r1, r3
 801181c:	683b      	ldr	r3, [r7, #0]
 801181e:	1c9a      	adds	r2, r3, #2
 8011820:	603a      	str	r2, [r7, #0]
 8011822:	881b      	ldrh	r3, [r3, #0]
 8011824:	b29a      	uxth	r2, r3
 8011826:	f04f 0300 	mov.w	r3, #0
 801182a:	2001      	movs	r0, #1
 801182c:	f007 fe50 	bl	80194d0 <HAL_FLASH_Program>
 8011830:	4603      	mov	r3, r0
 8011832:	80bb      	strh	r3, [r7, #4]
       if(j!= HAL_OK)
 8011834:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8011838:	2b00      	cmp	r3, #0
 801183a:	d108      	bne.n	801184e <Save_Kpg+0xc6>
     for(i=0; i<256; i+=2)
 801183c:	88fb      	ldrh	r3, [r7, #6]
 801183e:	3302      	adds	r3, #2
 8011840:	b29b      	uxth	r3, r3
 8011842:	80fb      	strh	r3, [r7, #6]
 8011844:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8011848:	2bff      	cmp	r3, #255	; 0xff
 801184a:	dde0      	ble.n	801180e <Save_Kpg+0x86>
 801184c:	e000      	b.n	8011850 <Save_Kpg+0xc8>
    	   break;
 801184e:	bf00      	nop
     }
   }
   HAL_FLASH_Lock();
 8011850:	f007 feb4 	bl	80195bc <HAL_FLASH_Lock>
   return j;
 8011854:	88bb      	ldrh	r3, [r7, #4]
 8011856:	b2db      	uxtb	r3, r3
 }
 8011858:	4618      	mov	r0, r3
 801185a:	3708      	adds	r7, #8
 801185c:	46bd      	mov	sp, r7
 801185e:	bd80      	pop	{r7, pc}
 8011860:	200001bc 	.word	0x200001bc
 8011864:	20002820 	.word	0x20002820
 8011868:	200017e0 	.word	0x200017e0
 801186c:	200001b8 	.word	0x200001b8
 8011870:	20000570 	.word	0x20000570

08011874 <Read_Kpg>:
 /*******************************************************************************
 Read_Kpg:
 *******************************************************************************/
 void Read_Kpg(void)
 {
 8011874:	b480      	push	{r7}
 8011876:	b083      	sub	sp, #12
 8011878:	af00      	add	r7, sp, #0
   short i;
   unsigned short* ptr;
   ptr=(unsigned short*)Kpg_Address;
 801187a:	4b1c      	ldr	r3, [pc, #112]	; (80118ec <Read_Kpg+0x78>)
 801187c:	603b      	str	r3, [r7, #0]
   if(*ptr++!=0xaa55)
 801187e:	683b      	ldr	r3, [r7, #0]
 8011880:	1c9a      	adds	r2, r3, #2
 8011882:	603a      	str	r2, [r7, #0]
 8011884:	881b      	ldrh	r3, [r3, #0]
 8011886:	f64a 2255 	movw	r2, #43605	; 0xaa55
 801188a:	4293      	cmp	r3, r2
 801188c:	d125      	bne.n	80118da <Read_Kpg+0x66>
	   return ;
   if(*ptr++!=0x0400)
 801188e:	683b      	ldr	r3, [r7, #0]
 8011890:	1c9a      	adds	r2, r3, #2
 8011892:	603a      	str	r2, [r7, #0]
 8011894:	881b      	ldrh	r3, [r3, #0]
 8011896:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801189a:	d120      	bne.n	80118de <Read_Kpg+0x6a>
	   return ;
   Cal_Flag = *ptr++;
 801189c:	683b      	ldr	r3, [r7, #0]
 801189e:	1c9a      	adds	r2, r3, #2
 80118a0:	603a      	str	r2, [r7, #0]
 80118a2:	881b      	ldrh	r3, [r3, #0]
 80118a4:	b2da      	uxtb	r2, r3
 80118a6:	4b12      	ldr	r3, [pc, #72]	; (80118f0 <Read_Kpg+0x7c>)
 80118a8:	701a      	strb	r2, [r3, #0]
   for(i=0;i< 3;i++)
 80118aa:	2300      	movs	r3, #0
 80118ac:	80fb      	strh	r3, [r7, #6]
 80118ae:	e00f      	b.n	80118d0 <Read_Kpg+0x5c>
       Kpg[i] = *ptr++;  //CH_A,CH_B
 80118b0:	683b      	ldr	r3, [r7, #0]
 80118b2:	1c9a      	adds	r2, r3, #2
 80118b4:	603a      	str	r2, [r7, #0]
 80118b6:	881a      	ldrh	r2, [r3, #0]
 80118b8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80118bc:	b211      	sxth	r1, r2
 80118be:	4a0d      	ldr	r2, [pc, #52]	; (80118f4 <Read_Kpg+0x80>)
 80118c0:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
   for(i=0;i< 3;i++)
 80118c4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80118c8:	b29b      	uxth	r3, r3
 80118ca:	3301      	adds	r3, #1
 80118cc:	b29b      	uxth	r3, r3
 80118ce:	80fb      	strh	r3, [r7, #6]
 80118d0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80118d4:	2b02      	cmp	r3, #2
 80118d6:	ddeb      	ble.n	80118b0 <Read_Kpg+0x3c>
   return ;
 80118d8:	e002      	b.n	80118e0 <Read_Kpg+0x6c>
	   return ;
 80118da:	bf00      	nop
 80118dc:	e000      	b.n	80118e0 <Read_Kpg+0x6c>
	   return ;
 80118de:	bf00      	nop
 }
 80118e0:	370c      	adds	r7, #12
 80118e2:	46bd      	mov	sp, r7
 80118e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80118e8:	4770      	bx	lr
 80118ea:	bf00      	nop
 80118ec:	08004000 	.word	0x08004000
 80118f0:	200001b8 	.word	0x200001b8
 80118f4:	20000570 	.word	0x20000570

080118f8 <Restore>:

 void Restore(void)
 {
 80118f8:	b580      	push	{r7, lr}
 80118fa:	b082      	sub	sp, #8
 80118fc:	af00      	add	r7, sp, #0
   short i;
   TIM_BASE_Val=List[TIM_BASE].Val;
 80118fe:	4b2d      	ldr	r3, [pc, #180]	; (80119b4 <Restore+0xbc>)
 8011900:	f9b3 203c 	ldrsh.w	r2, [r3, #60]	; 0x3c
 8011904:	4b2c      	ldr	r3, [pc, #176]	; (80119b8 <Restore+0xc0>)
 8011906:	801a      	strh	r2, [r3, #0]
   Current=0;
 8011908:	4b2c      	ldr	r3, [pc, #176]	; (80119bc <Restore+0xc4>)
 801190a:	2200      	movs	r2, #0
 801190c:	801a      	strh	r2, [r3, #0]
   List[MenuNow[Current]].Flg |= UPD;
 801190e:	4b2b      	ldr	r3, [pc, #172]	; (80119bc <Restore+0xc4>)
 8011910:	f9b3 3000 	ldrsh.w	r3, [r3]
 8011914:	461a      	mov	r2, r3
 8011916:	4b2a      	ldr	r3, [pc, #168]	; (80119c0 <Restore+0xc8>)
 8011918:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 801191c:	4a25      	ldr	r2, [pc, #148]	; (80119b4 <Restore+0xbc>)
 801191e:	00db      	lsls	r3, r3, #3
 8011920:	4413      	add	r3, r2
 8011922:	799b      	ldrb	r3, [r3, #6]
 8011924:	4a25      	ldr	r2, [pc, #148]	; (80119bc <Restore+0xc4>)
 8011926:	f9b2 2000 	ldrsh.w	r2, [r2]
 801192a:	4611      	mov	r1, r2
 801192c:	4a24      	ldr	r2, [pc, #144]	; (80119c0 <Restore+0xc8>)
 801192e:	f932 2011 	ldrsh.w	r2, [r2, r1, lsl #1]
 8011932:	4610      	mov	r0, r2
 8011934:	f043 0320 	orr.w	r3, r3, #32
 8011938:	b2d9      	uxtb	r1, r3
 801193a:	4a1e      	ldr	r2, [pc, #120]	; (80119b4 <Restore+0xbc>)
 801193c:	00c3      	lsls	r3, r0, #3
 801193e:	4413      	add	r3, r2
 8011940:	460a      	mov	r2, r1
 8011942:	719a      	strb	r2, [r3, #6]
   for(i=0;i<42;i++)
 8011944:	2300      	movs	r3, #0
 8011946:	80fb      	strh	r3, [r7, #6]
 8011948:	e013      	b.n	8011972 <Restore+0x7a>
	   List[i].Val= List_c[i].Val;
 801194a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801194e:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8011952:	491c      	ldr	r1, [pc, #112]	; (80119c4 <Restore+0xcc>)
 8011954:	00db      	lsls	r3, r3, #3
 8011956:	440b      	add	r3, r1
 8011958:	f9b3 0004 	ldrsh.w	r0, [r3, #4]
 801195c:	4915      	ldr	r1, [pc, #84]	; (80119b4 <Restore+0xbc>)
 801195e:	00d3      	lsls	r3, r2, #3
 8011960:	440b      	add	r3, r1
 8011962:	4602      	mov	r2, r0
 8011964:	809a      	strh	r2, [r3, #4]
   for(i=0;i<42;i++)
 8011966:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801196a:	b29b      	uxth	r3, r3
 801196c:	3301      	adds	r3, #1
 801196e:	b29b      	uxth	r3, r3
 8011970:	80fb      	strh	r3, [r7, #6]
 8011972:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8011976:	2b29      	cmp	r3, #41	; 0x29
 8011978:	dde7      	ble.n	801194a <Restore+0x52>
   for(i=0;i<8;i++)
 801197a:	2300      	movs	r3, #0
 801197c:	80fb      	strh	r3, [r7, #6]
 801197e:	e00f      	b.n	80119a0 <Restore+0xa8>
	   MenuNow[i]= MenuNow_C[i];
 8011980:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8011984:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8011988:	490f      	ldr	r1, [pc, #60]	; (80119c8 <Restore+0xd0>)
 801198a:	f931 1012 	ldrsh.w	r1, [r1, r2, lsl #1]
 801198e:	4a0c      	ldr	r2, [pc, #48]	; (80119c0 <Restore+0xc8>)
 8011990:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
   for(i=0;i<8;i++)
 8011994:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8011998:	b29b      	uxth	r3, r3
 801199a:	3301      	adds	r3, #1
 801199c:	b29b      	uxth	r3, r3
 801199e:	80fb      	strh	r3, [r7, #6]
 80119a0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80119a4:	2b07      	cmp	r3, #7
 80119a6:	ddeb      	ble.n	8011980 <Restore+0x88>
   Update_Title();
 80119a8:	f000 fdec 	bl	8012584 <Update_Title>
}
 80119ac:	bf00      	nop
 80119ae:	3708      	adds	r7, #8
 80119b0:	46bd      	mov	sp, r7
 80119b2:	bd80      	pop	{r7, pc}
 80119b4:	2000029c 	.word	0x2000029c
 80119b8:	2000281c 	.word	0x2000281c
 80119bc:	200007a6 	.word	0x200007a6
 80119c0:	2000053c 	.word	0x2000053c
 80119c4:	200003ec 	.word	0x200003ec
 80119c8:	08001ef8 	.word	0x08001ef8

080119cc <Restore_CalPar>:

 void Restore_CalPar(void)
 {
 80119cc:	b580      	push	{r7, lr}
 80119ce:	b082      	sub	sp, #8
 80119d0:	af00      	add	r7, sp, #0
   short i = 0;
 80119d2:	2300      	movs	r3, #0
 80119d4:	80fb      	strh	r3, [r7, #6]
   List[SMPL_DPTH].Flg |= UPD;
 80119d6:	4b47      	ldr	r3, [pc, #284]	; (8011af4 <Restore_CalPar+0x128>)
 80119d8:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 80119dc:	f043 0320 	orr.w	r3, r3, #32
 80119e0:	b2da      	uxtb	r2, r3
 80119e2:	4b44      	ldr	r3, [pc, #272]	; (8011af4 <Restore_CalPar+0x128>)
 80119e4:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
   TIM_BASE_Val=List[TIM_BASE].Val;
 80119e8:	4b42      	ldr	r3, [pc, #264]	; (8011af4 <Restore_CalPar+0x128>)
 80119ea:	f9b3 203c 	ldrsh.w	r2, [r3, #60]	; 0x3c
 80119ee:	4b42      	ldr	r3, [pc, #264]	; (8011af8 <Restore_CalPar+0x12c>)
 80119f0:	801a      	strh	r2, [r3, #0]
   List[TIM_BASE].Val=0;
 80119f2:	4b40      	ldr	r3, [pc, #256]	; (8011af4 <Restore_CalPar+0x128>)
 80119f4:	2200      	movs	r2, #0
 80119f6:	879a      	strh	r2, [r3, #60]	; 0x3c
   Current=0;
 80119f8:	4b40      	ldr	r3, [pc, #256]	; (8011afc <Restore_CalPar+0x130>)
 80119fa:	2200      	movs	r2, #0
 80119fc:	801a      	strh	r2, [r3, #0]
   List[MenuNow[Current]].Flg |= UPD;
 80119fe:	4b3f      	ldr	r3, [pc, #252]	; (8011afc <Restore_CalPar+0x130>)
 8011a00:	f9b3 3000 	ldrsh.w	r3, [r3]
 8011a04:	461a      	mov	r2, r3
 8011a06:	4b3e      	ldr	r3, [pc, #248]	; (8011b00 <Restore_CalPar+0x134>)
 8011a08:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8011a0c:	4a39      	ldr	r2, [pc, #228]	; (8011af4 <Restore_CalPar+0x128>)
 8011a0e:	00db      	lsls	r3, r3, #3
 8011a10:	4413      	add	r3, r2
 8011a12:	799b      	ldrb	r3, [r3, #6]
 8011a14:	4a39      	ldr	r2, [pc, #228]	; (8011afc <Restore_CalPar+0x130>)
 8011a16:	f9b2 2000 	ldrsh.w	r2, [r2]
 8011a1a:	4611      	mov	r1, r2
 8011a1c:	4a38      	ldr	r2, [pc, #224]	; (8011b00 <Restore_CalPar+0x134>)
 8011a1e:	f932 2011 	ldrsh.w	r2, [r2, r1, lsl #1]
 8011a22:	4610      	mov	r0, r2
 8011a24:	f043 0320 	orr.w	r3, r3, #32
 8011a28:	b2d9      	uxtb	r1, r3
 8011a2a:	4a32      	ldr	r2, [pc, #200]	; (8011af4 <Restore_CalPar+0x128>)
 8011a2c:	00c3      	lsls	r3, r0, #3
 8011a2e:	4413      	add	r3, r2
 8011a30:	460a      	mov	r2, r1
 8011a32:	719a      	strb	r2, [r3, #6]
   for(i=0;i<42;i++) List[i].Val= List_c[i].Val;
 8011a34:	2300      	movs	r3, #0
 8011a36:	80fb      	strh	r3, [r7, #6]
 8011a38:	e013      	b.n	8011a62 <Restore_CalPar+0x96>
 8011a3a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8011a3e:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8011a42:	4930      	ldr	r1, [pc, #192]	; (8011b04 <Restore_CalPar+0x138>)
 8011a44:	00db      	lsls	r3, r3, #3
 8011a46:	440b      	add	r3, r1
 8011a48:	f9b3 0004 	ldrsh.w	r0, [r3, #4]
 8011a4c:	4929      	ldr	r1, [pc, #164]	; (8011af4 <Restore_CalPar+0x128>)
 8011a4e:	00d3      	lsls	r3, r2, #3
 8011a50:	440b      	add	r3, r1
 8011a52:	4602      	mov	r2, r0
 8011a54:	809a      	strh	r2, [r3, #4]
 8011a56:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8011a5a:	b29b      	uxth	r3, r3
 8011a5c:	3301      	adds	r3, #1
 8011a5e:	b29b      	uxth	r3, r3
 8011a60:	80fb      	strh	r3, [r7, #6]
 8011a62:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8011a66:	2b29      	cmp	r3, #41	; 0x29
 8011a68:	dde7      	ble.n	8011a3a <Restore_CalPar+0x6e>
   for(i=0;i<8;i++)  MenuNow[i]= MenuNow_C[i];
 8011a6a:	2300      	movs	r3, #0
 8011a6c:	80fb      	strh	r3, [r7, #6]
 8011a6e:	e00f      	b.n	8011a90 <Restore_CalPar+0xc4>
 8011a70:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8011a74:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8011a78:	4923      	ldr	r1, [pc, #140]	; (8011b08 <Restore_CalPar+0x13c>)
 8011a7a:	f931 1012 	ldrsh.w	r1, [r1, r2, lsl #1]
 8011a7e:	4a20      	ldr	r2, [pc, #128]	; (8011b00 <Restore_CalPar+0x134>)
 8011a80:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8011a84:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8011a88:	b29b      	uxth	r3, r3
 8011a8a:	3301      	adds	r3, #1
 8011a8c:	b29b      	uxth	r3, r3
 8011a8e:	80fb      	strh	r3, [r7, #6]
 8011a90:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8011a94:	2b07      	cmp	r3, #7
 8011a96:	ddeb      	ble.n	8011a70 <Restore_CalPar+0xa4>
   TIM_BASE_Val=List[TIM_BASE].Val;
 8011a98:	4b16      	ldr	r3, [pc, #88]	; (8011af4 <Restore_CalPar+0x128>)
 8011a9a:	f9b3 203c 	ldrsh.w	r2, [r3, #60]	; 0x3c
 8011a9e:	4b16      	ldr	r3, [pc, #88]	; (8011af8 <Restore_CalPar+0x12c>)
 8011aa0:	801a      	strh	r2, [r3, #0]
   List[TIM_BASE].Val=0;
 8011aa2:	4b14      	ldr	r3, [pc, #80]	; (8011af4 <Restore_CalPar+0x128>)
 8011aa4:	2200      	movs	r2, #0
 8011aa6:	879a      	strh	r2, [r3, #60]	; 0x3c
   for(i=Y_RANGES; i<=STANDBY; i++){
 8011aa8:	2300      	movs	r3, #0
 8011aaa:	80fb      	strh	r3, [r7, #6]
 8011aac:	e015      	b.n	8011ada <Restore_CalPar+0x10e>
   List[i].Flg |= UPD;
 8011aae:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8011ab2:	4a10      	ldr	r2, [pc, #64]	; (8011af4 <Restore_CalPar+0x128>)
 8011ab4:	00db      	lsls	r3, r3, #3
 8011ab6:	4413      	add	r3, r2
 8011ab8:	799a      	ldrb	r2, [r3, #6]
 8011aba:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8011abe:	f042 0220 	orr.w	r2, r2, #32
 8011ac2:	b2d1      	uxtb	r1, r2
 8011ac4:	4a0b      	ldr	r2, [pc, #44]	; (8011af4 <Restore_CalPar+0x128>)
 8011ac6:	00db      	lsls	r3, r3, #3
 8011ac8:	4413      	add	r3, r2
 8011aca:	460a      	mov	r2, r1
 8011acc:	719a      	strb	r2, [r3, #6]
   for(i=Y_RANGES; i<=STANDBY; i++){
 8011ace:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8011ad2:	b29b      	uxth	r3, r3
 8011ad4:	3301      	adds	r3, #1
 8011ad6:	b29b      	uxth	r3, r3
 8011ad8:	80fb      	strh	r3, [r7, #6]
 8011ada:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8011ade:	2b29      	cmp	r3, #41	; 0x29
 8011ae0:	dde5      	ble.n	8011aae <Restore_CalPar+0xe2>
   }
   Update_Title();
 8011ae2:	f000 fd4f 	bl	8012584 <Update_Title>
   Close_Pop();
 8011ae6:	f7fc ff0d 	bl	800e904 <Close_Pop>
 }
 8011aea:	bf00      	nop
 8011aec:	3708      	adds	r7, #8
 8011aee:	46bd      	mov	sp, r7
 8011af0:	bd80      	pop	{r7, pc}
 8011af2:	bf00      	nop
 8011af4:	2000029c 	.word	0x2000029c
 8011af8:	2000281c 	.word	0x2000281c
 8011afc:	200007a6 	.word	0x200007a6
 8011b00:	2000053c 	.word	0x2000053c
 8011b04:	200003ec 	.word	0x200003ec
 8011b08:	08001ef8 	.word	0x08001ef8

08011b0c <u8ToDec3>:
 8011b0c:	b480      	push	{r7}
 8011b0e:	b083      	sub	sp, #12
 8011b10:	af00      	add	r7, sp, #0
 8011b12:	6078      	str	r0, [r7, #4]
 8011b14:	460b      	mov	r3, r1
 8011b16:	70fb      	strb	r3, [r7, #3]
 8011b18:	78fb      	ldrb	r3, [r7, #3]
 8011b1a:	4a1e      	ldr	r2, [pc, #120]	; (8011b94 <u8ToDec3+0x88>)
 8011b1c:	fba2 2303 	umull	r2, r3, r2, r3
 8011b20:	095b      	lsrs	r3, r3, #5
 8011b22:	b2da      	uxtb	r2, r3
 8011b24:	687b      	ldr	r3, [r7, #4]
 8011b26:	1c59      	adds	r1, r3, #1
 8011b28:	6079      	str	r1, [r7, #4]
 8011b2a:	3230      	adds	r2, #48	; 0x30
 8011b2c:	b2d2      	uxtb	r2, r2
 8011b2e:	701a      	strb	r2, [r3, #0]
 8011b30:	78fb      	ldrb	r3, [r7, #3]
 8011b32:	4a18      	ldr	r2, [pc, #96]	; (8011b94 <u8ToDec3+0x88>)
 8011b34:	fba2 1203 	umull	r1, r2, r2, r3
 8011b38:	0952      	lsrs	r2, r2, #5
 8011b3a:	2164      	movs	r1, #100	; 0x64
 8011b3c:	fb01 f202 	mul.w	r2, r1, r2
 8011b40:	1a9b      	subs	r3, r3, r2
 8011b42:	70fb      	strb	r3, [r7, #3]
 8011b44:	78fb      	ldrb	r3, [r7, #3]
 8011b46:	4a14      	ldr	r2, [pc, #80]	; (8011b98 <u8ToDec3+0x8c>)
 8011b48:	fba2 2303 	umull	r2, r3, r2, r3
 8011b4c:	08db      	lsrs	r3, r3, #3
 8011b4e:	b2da      	uxtb	r2, r3
 8011b50:	687b      	ldr	r3, [r7, #4]
 8011b52:	1c59      	adds	r1, r3, #1
 8011b54:	6079      	str	r1, [r7, #4]
 8011b56:	3230      	adds	r2, #48	; 0x30
 8011b58:	b2d2      	uxtb	r2, r2
 8011b5a:	701a      	strb	r2, [r3, #0]
 8011b5c:	78fa      	ldrb	r2, [r7, #3]
 8011b5e:	4b0e      	ldr	r3, [pc, #56]	; (8011b98 <u8ToDec3+0x8c>)
 8011b60:	fba3 1302 	umull	r1, r3, r3, r2
 8011b64:	08d9      	lsrs	r1, r3, #3
 8011b66:	460b      	mov	r3, r1
 8011b68:	009b      	lsls	r3, r3, #2
 8011b6a:	440b      	add	r3, r1
 8011b6c:	005b      	lsls	r3, r3, #1
 8011b6e:	1ad3      	subs	r3, r2, r3
 8011b70:	70fb      	strb	r3, [r7, #3]
 8011b72:	687b      	ldr	r3, [r7, #4]
 8011b74:	1c5a      	adds	r2, r3, #1
 8011b76:	607a      	str	r2, [r7, #4]
 8011b78:	78fa      	ldrb	r2, [r7, #3]
 8011b7a:	3230      	adds	r2, #48	; 0x30
 8011b7c:	b2d2      	uxtb	r2, r2
 8011b7e:	701a      	strb	r2, [r3, #0]
 8011b80:	687b      	ldr	r3, [r7, #4]
 8011b82:	2200      	movs	r2, #0
 8011b84:	701a      	strb	r2, [r3, #0]
 8011b86:	bf00      	nop
 8011b88:	370c      	adds	r7, #12
 8011b8a:	46bd      	mov	sp, r7
 8011b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b90:	4770      	bx	lr
 8011b92:	bf00      	nop
 8011b94:	51eb851f 	.word	0x51eb851f
 8011b98:	cccccccd 	.word	0xcccccccd

08011b9c <memset16>:
 8011b9c:	b480      	push	{r7}
 8011b9e:	b083      	sub	sp, #12
 8011ba0:	af00      	add	r7, sp, #0
 8011ba2:	6078      	str	r0, [r7, #4]
 8011ba4:	460b      	mov	r3, r1
 8011ba6:	807b      	strh	r3, [r7, #2]
 8011ba8:	4613      	mov	r3, r2
 8011baa:	803b      	strh	r3, [r7, #0]
 8011bac:	e00a      	b.n	8011bc4 <memset16+0x28>
 8011bae:	687b      	ldr	r3, [r7, #4]
 8011bb0:	1c9a      	adds	r2, r3, #2
 8011bb2:	607a      	str	r2, [r7, #4]
 8011bb4:	887a      	ldrh	r2, [r7, #2]
 8011bb6:	801a      	strh	r2, [r3, #0]
 8011bb8:	f9b7 3000 	ldrsh.w	r3, [r7]
 8011bbc:	b29b      	uxth	r3, r3
 8011bbe:	3b01      	subs	r3, #1
 8011bc0:	b29b      	uxth	r3, r3
 8011bc2:	803b      	strh	r3, [r7, #0]
 8011bc4:	f9b7 3000 	ldrsh.w	r3, [r7]
 8011bc8:	2b00      	cmp	r3, #0
 8011bca:	d1f0      	bne.n	8011bae <memset16+0x12>
 8011bcc:	bf00      	nop
 8011bce:	bf00      	nop
 8011bd0:	370c      	adds	r7, #12
 8011bd2:	46bd      	mov	sp, r7
 8011bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011bd8:	4770      	bx	lr
	...

08011bdc <Value2Str>:
 8011bdc:	b580      	push	{r7, lr}
 8011bde:	b088      	sub	sp, #32
 8011be0:	af00      	add	r7, sp, #0
 8011be2:	60f8      	str	r0, [r7, #12]
 8011be4:	60b9      	str	r1, [r7, #8]
 8011be6:	607a      	str	r2, [r7, #4]
 8011be8:	70fb      	strb	r3, [r7, #3]
 8011bea:	2300      	movs	r3, #0
 8011bec:	83fb      	strh	r3, [r7, #30]
 8011bee:	68bb      	ldr	r3, [r7, #8]
 8011bf0:	61bb      	str	r3, [r7, #24]
 8011bf2:	2305      	movs	r3, #5
 8011bf4:	617b      	str	r3, [r7, #20]
 8011bf6:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8011bfa:	2b00      	cmp	r3, #0
 8011bfc:	d129      	bne.n	8011c52 <Value2Str+0x76>
 8011bfe:	68bb      	ldr	r3, [r7, #8]
 8011c00:	2b00      	cmp	r3, #0
 8011c02:	d104      	bne.n	8011c0e <Value2Str+0x32>
 8011c04:	68fb      	ldr	r3, [r7, #12]
 8011c06:	1c5a      	adds	r2, r3, #1
 8011c08:	60fa      	str	r2, [r7, #12]
 8011c0a:	2220      	movs	r2, #32
 8011c0c:	701a      	strb	r2, [r3, #0]
 8011c0e:	68bb      	ldr	r3, [r7, #8]
 8011c10:	2b00      	cmp	r3, #0
 8011c12:	dd04      	ble.n	8011c1e <Value2Str+0x42>
 8011c14:	68fb      	ldr	r3, [r7, #12]
 8011c16:	1c5a      	adds	r2, r3, #1
 8011c18:	60fa      	str	r2, [r7, #12]
 8011c1a:	222b      	movs	r2, #43	; 0x2b
 8011c1c:	701a      	strb	r2, [r3, #0]
 8011c1e:	68bb      	ldr	r3, [r7, #8]
 8011c20:	2b00      	cmp	r3, #0
 8011c22:	da16      	bge.n	8011c52 <Value2Str+0x76>
 8011c24:	68fb      	ldr	r3, [r7, #12]
 8011c26:	1c5a      	adds	r2, r3, #1
 8011c28:	60fa      	str	r2, [r7, #12]
 8011c2a:	222d      	movs	r2, #45	; 0x2d
 8011c2c:	701a      	strb	r2, [r3, #0]
 8011c2e:	68bb      	ldr	r3, [r7, #8]
 8011c30:	425b      	negs	r3, r3
 8011c32:	60bb      	str	r3, [r7, #8]
 8011c34:	e00d      	b.n	8011c52 <Value2Str+0x76>
 8011c36:	69bb      	ldr	r3, [r7, #24]
 8011c38:	4a64      	ldr	r2, [pc, #400]	; (8011dcc <Value2Str+0x1f0>)
 8011c3a:	fb82 1203 	smull	r1, r2, r2, r3
 8011c3e:	1092      	asrs	r2, r2, #2
 8011c40:	17db      	asrs	r3, r3, #31
 8011c42:	1ad3      	subs	r3, r2, r3
 8011c44:	61bb      	str	r3, [r7, #24]
 8011c46:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8011c4a:	b29b      	uxth	r3, r3
 8011c4c:	3301      	adds	r3, #1
 8011c4e:	b29b      	uxth	r3, r3
 8011c50:	83fb      	strh	r3, [r7, #30]
 8011c52:	69bb      	ldr	r3, [r7, #24]
 8011c54:	2b09      	cmp	r3, #9
 8011c56:	dcee      	bgt.n	8011c36 <Value2Str+0x5a>
 8011c58:	f9b7 201e 	ldrsh.w	r2, [r7, #30]
 8011c5c:	4b5c      	ldr	r3, [pc, #368]	; (8011dd0 <Value2Str+0x1f4>)
 8011c5e:	fb83 3102 	smull	r3, r1, r3, r2
 8011c62:	17d3      	asrs	r3, r2, #31
 8011c64:	1ac9      	subs	r1, r1, r3
 8011c66:	460b      	mov	r3, r1
 8011c68:	005b      	lsls	r3, r3, #1
 8011c6a:	440b      	add	r3, r1
 8011c6c:	1ad3      	subs	r3, r2, r3
 8011c6e:	b21b      	sxth	r3, r3
 8011c70:	2b02      	cmp	r3, #2
 8011c72:	d105      	bne.n	8011c80 <Value2Str+0xa4>
 8011c74:	78fb      	ldrb	r3, [r7, #3]
 8011c76:	2b02      	cmp	r3, #2
 8011c78:	d102      	bne.n	8011c80 <Value2Str+0xa4>
 8011c7a:	78fb      	ldrb	r3, [r7, #3]
 8011c7c:	3301      	adds	r3, #1
 8011c7e:	70fb      	strb	r3, [r7, #3]
 8011c80:	68bb      	ldr	r3, [r7, #8]
 8011c82:	61bb      	str	r3, [r7, #24]
 8011c84:	2300      	movs	r3, #0
 8011c86:	83fb      	strh	r3, [r7, #30]
 8011c88:	e016      	b.n	8011cb8 <Value2Str+0xdc>
 8011c8a:	69bb      	ldr	r3, [r7, #24]
 8011c8c:	4a4f      	ldr	r2, [pc, #316]	; (8011dcc <Value2Str+0x1f0>)
 8011c8e:	fb82 1203 	smull	r1, r2, r2, r3
 8011c92:	1092      	asrs	r2, r2, #2
 8011c94:	17db      	asrs	r3, r3, #31
 8011c96:	1ad3      	subs	r3, r2, r3
 8011c98:	61bb      	str	r3, [r7, #24]
 8011c9a:	8bfb      	ldrh	r3, [r7, #30]
 8011c9c:	3301      	adds	r3, #1
 8011c9e:	b29b      	uxth	r3, r3
 8011ca0:	83fb      	strh	r3, [r7, #30]
 8011ca2:	f9b7 201e 	ldrsh.w	r2, [r7, #30]
 8011ca6:	78fb      	ldrb	r3, [r7, #3]
 8011ca8:	429a      	cmp	r2, r3
 8011caa:	dd05      	ble.n	8011cb8 <Value2Str+0xdc>
 8011cac:	697a      	ldr	r2, [r7, #20]
 8011cae:	4613      	mov	r3, r2
 8011cb0:	009b      	lsls	r3, r3, #2
 8011cb2:	4413      	add	r3, r2
 8011cb4:	005b      	lsls	r3, r3, #1
 8011cb6:	617b      	str	r3, [r7, #20]
 8011cb8:	69bb      	ldr	r3, [r7, #24]
 8011cba:	2b09      	cmp	r3, #9
 8011cbc:	dce5      	bgt.n	8011c8a <Value2Str+0xae>
 8011cbe:	f9b7 201e 	ldrsh.w	r2, [r7, #30]
 8011cc2:	78fb      	ldrb	r3, [r7, #3]
 8011cc4:	429a      	cmp	r2, r3
 8011cc6:	db03      	blt.n	8011cd0 <Value2Str+0xf4>
 8011cc8:	68ba      	ldr	r2, [r7, #8]
 8011cca:	697b      	ldr	r3, [r7, #20]
 8011ccc:	4413      	add	r3, r2
 8011cce:	60bb      	str	r3, [r7, #8]
 8011cd0:	68bb      	ldr	r3, [r7, #8]
 8011cd2:	61bb      	str	r3, [r7, #24]
 8011cd4:	2300      	movs	r3, #0
 8011cd6:	83fb      	strh	r3, [r7, #30]
 8011cd8:	e00d      	b.n	8011cf6 <Value2Str+0x11a>
 8011cda:	69bb      	ldr	r3, [r7, #24]
 8011cdc:	4a3b      	ldr	r2, [pc, #236]	; (8011dcc <Value2Str+0x1f0>)
 8011cde:	fb82 1203 	smull	r1, r2, r2, r3
 8011ce2:	1092      	asrs	r2, r2, #2
 8011ce4:	17db      	asrs	r3, r3, #31
 8011ce6:	1ad3      	subs	r3, r2, r3
 8011ce8:	61bb      	str	r3, [r7, #24]
 8011cea:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8011cee:	b29b      	uxth	r3, r3
 8011cf0:	3301      	adds	r3, #1
 8011cf2:	b29b      	uxth	r3, r3
 8011cf4:	83fb      	strh	r3, [r7, #30]
 8011cf6:	69bb      	ldr	r3, [r7, #24]
 8011cf8:	2b09      	cmp	r3, #9
 8011cfa:	dcee      	bgt.n	8011cda <Value2Str+0xfe>
 8011cfc:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8011d00:	4a33      	ldr	r2, [pc, #204]	; (8011dd0 <Value2Str+0x1f4>)
 8011d02:	fb82 1203 	smull	r1, r2, r2, r3
 8011d06:	17db      	asrs	r3, r3, #31
 8011d08:	1ad3      	subs	r3, r2, r3
 8011d0a:	b21b      	sxth	r3, r3
 8011d0c:	61bb      	str	r3, [r7, #24]
 8011d0e:	e03e      	b.n	8011d8e <Value2Str+0x1b2>
 8011d10:	8bfb      	ldrh	r3, [r7, #30]
 8011d12:	b2db      	uxtb	r3, r3
 8011d14:	4618      	mov	r0, r3
 8011d16:	f000 f85d 	bl	8011dd4 <Exp>
 8011d1a:	4602      	mov	r2, r0
 8011d1c:	68bb      	ldr	r3, [r7, #8]
 8011d1e:	fb93 f3f2 	sdiv	r3, r3, r2
 8011d22:	b2da      	uxtb	r2, r3
 8011d24:	68fb      	ldr	r3, [r7, #12]
 8011d26:	1c59      	adds	r1, r3, #1
 8011d28:	60f9      	str	r1, [r7, #12]
 8011d2a:	3230      	adds	r2, #48	; 0x30
 8011d2c:	b2d2      	uxtb	r2, r2
 8011d2e:	701a      	strb	r2, [r3, #0]
 8011d30:	78fb      	ldrb	r3, [r7, #3]
 8011d32:	2b00      	cmp	r3, #0
 8011d34:	d012      	beq.n	8011d5c <Value2Str+0x180>
 8011d36:	f9b7 201e 	ldrsh.w	r2, [r7, #30]
 8011d3a:	4b25      	ldr	r3, [pc, #148]	; (8011dd0 <Value2Str+0x1f4>)
 8011d3c:	fb83 3102 	smull	r3, r1, r3, r2
 8011d40:	17d3      	asrs	r3, r2, #31
 8011d42:	1ac9      	subs	r1, r1, r3
 8011d44:	460b      	mov	r3, r1
 8011d46:	005b      	lsls	r3, r3, #1
 8011d48:	440b      	add	r3, r1
 8011d4a:	1ad3      	subs	r3, r2, r3
 8011d4c:	b21b      	sxth	r3, r3
 8011d4e:	2b00      	cmp	r3, #0
 8011d50:	d104      	bne.n	8011d5c <Value2Str+0x180>
 8011d52:	68fb      	ldr	r3, [r7, #12]
 8011d54:	1c5a      	adds	r2, r3, #1
 8011d56:	60fa      	str	r2, [r7, #12]
 8011d58:	222e      	movs	r2, #46	; 0x2e
 8011d5a:	701a      	strb	r2, [r3, #0]
 8011d5c:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8011d60:	2b00      	cmp	r3, #0
 8011d62:	db0c      	blt.n	8011d7e <Value2Str+0x1a2>
 8011d64:	8bfb      	ldrh	r3, [r7, #30]
 8011d66:	b2db      	uxtb	r3, r3
 8011d68:	4618      	mov	r0, r3
 8011d6a:	f000 f833 	bl	8011dd4 <Exp>
 8011d6e:	4602      	mov	r2, r0
 8011d70:	68bb      	ldr	r3, [r7, #8]
 8011d72:	fb93 f1f2 	sdiv	r1, r3, r2
 8011d76:	fb02 f201 	mul.w	r2, r2, r1
 8011d7a:	1a9b      	subs	r3, r3, r2
 8011d7c:	e000      	b.n	8011d80 <Value2Str+0x1a4>
 8011d7e:	2300      	movs	r3, #0
 8011d80:	60bb      	str	r3, [r7, #8]
 8011d82:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8011d86:	b29b      	uxth	r3, r3
 8011d88:	3b01      	subs	r3, #1
 8011d8a:	b29b      	uxth	r3, r3
 8011d8c:	83fb      	strh	r3, [r7, #30]
 8011d8e:	78fb      	ldrb	r3, [r7, #3]
 8011d90:	1e5a      	subs	r2, r3, #1
 8011d92:	70fa      	strb	r2, [r7, #3]
 8011d94:	2b00      	cmp	r3, #0
 8011d96:	d1bb      	bne.n	8011d10 <Value2Str+0x134>
 8011d98:	69ba      	ldr	r2, [r7, #24]
 8011d9a:	4613      	mov	r3, r2
 8011d9c:	005b      	lsls	r3, r3, #1
 8011d9e:	4413      	add	r3, r2
 8011da0:	005b      	lsls	r3, r3, #1
 8011da2:	461a      	mov	r2, r3
 8011da4:	687b      	ldr	r3, [r7, #4]
 8011da6:	4413      	add	r3, r2
 8011da8:	607b      	str	r3, [r7, #4]
 8011daa:	68fb      	ldr	r3, [r7, #12]
 8011dac:	1c5a      	adds	r2, r3, #1
 8011dae:	60fa      	str	r2, [r7, #12]
 8011db0:	687a      	ldr	r2, [r7, #4]
 8011db2:	7812      	ldrb	r2, [r2, #0]
 8011db4:	701a      	strb	r2, [r3, #0]
 8011db6:	687b      	ldr	r3, [r7, #4]
 8011db8:	1c5a      	adds	r2, r3, #1
 8011dba:	607a      	str	r2, [r7, #4]
 8011dbc:	781b      	ldrb	r3, [r3, #0]
 8011dbe:	2b00      	cmp	r3, #0
 8011dc0:	d1f3      	bne.n	8011daa <Value2Str+0x1ce>
 8011dc2:	bf00      	nop
 8011dc4:	bf00      	nop
 8011dc6:	3720      	adds	r7, #32
 8011dc8:	46bd      	mov	sp, r7
 8011dca:	bd80      	pop	{r7, pc}
 8011dcc:	66666667 	.word	0x66666667
 8011dd0:	55555556 	.word	0x55555556

08011dd4 <Exp>:
 8011dd4:	b480      	push	{r7}
 8011dd6:	b085      	sub	sp, #20
 8011dd8:	af00      	add	r7, sp, #0
 8011dda:	4603      	mov	r3, r0
 8011ddc:	71fb      	strb	r3, [r7, #7]
 8011dde:	2301      	movs	r3, #1
 8011de0:	60fb      	str	r3, [r7, #12]
 8011de2:	e005      	b.n	8011df0 <Exp+0x1c>
 8011de4:	68fa      	ldr	r2, [r7, #12]
 8011de6:	4613      	mov	r3, r2
 8011de8:	009b      	lsls	r3, r3, #2
 8011dea:	4413      	add	r3, r2
 8011dec:	005b      	lsls	r3, r3, #1
 8011dee:	60fb      	str	r3, [r7, #12]
 8011df0:	79fb      	ldrb	r3, [r7, #7]
 8011df2:	1e5a      	subs	r2, r3, #1
 8011df4:	71fa      	strb	r2, [r7, #7]
 8011df6:	2b00      	cmp	r3, #0
 8011df8:	d1f4      	bne.n	8011de4 <Exp+0x10>
 8011dfa:	68fb      	ldr	r3, [r7, #12]
 8011dfc:	4618      	mov	r0, r3
 8011dfe:	3714      	adds	r7, #20
 8011e00:	46bd      	mov	sp, r7
 8011e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e06:	4770      	bx	lr

08011e08 <Sqrt32>:
 8011e08:	b580      	push	{r7, lr}
 8011e0a:	b084      	sub	sp, #16
 8011e0c:	af00      	add	r7, sp, #0
 8011e0e:	6078      	str	r0, [r7, #4]
 8011e10:	687b      	ldr	r3, [r7, #4]
 8011e12:	2b00      	cmp	r3, #0
 8011e14:	d101      	bne.n	8011e1a <Sqrt32+0x12>
 8011e16:	2300      	movs	r3, #0
 8011e18:	e019      	b.n	8011e4e <Sqrt32+0x46>
 8011e1a:	687b      	ldr	r3, [r7, #4]
 8011e1c:	2b00      	cmp	r3, #0
 8011e1e:	da00      	bge.n	8011e22 <Sqrt32+0x1a>
 8011e20:	3303      	adds	r3, #3
 8011e22:	109b      	asrs	r3, r3, #2
 8011e24:	4618      	mov	r0, r3
 8011e26:	f7ff ffef 	bl	8011e08 <Sqrt32>
 8011e2a:	4603      	mov	r3, r0
 8011e2c:	005b      	lsls	r3, r3, #1
 8011e2e:	3301      	adds	r3, #1
 8011e30:	60fb      	str	r3, [r7, #12]
 8011e32:	68fb      	ldr	r3, [r7, #12]
 8011e34:	fb03 f303 	mul.w	r3, r3, r3
 8011e38:	687a      	ldr	r2, [r7, #4]
 8011e3a:	429a      	cmp	r2, r3
 8011e3c:	da05      	bge.n	8011e4a <Sqrt32+0x42>
 8011e3e:	68fb      	ldr	r3, [r7, #12]
 8011e40:	b29b      	uxth	r3, r3
 8011e42:	3b01      	subs	r3, #1
 8011e44:	b29b      	uxth	r3, r3
 8011e46:	b21b      	sxth	r3, r3
 8011e48:	e001      	b.n	8011e4e <Sqrt32+0x46>
 8011e4a:	68fb      	ldr	r3, [r7, #12]
 8011e4c:	b21b      	sxth	r3, r3
 8011e4e:	4618      	mov	r0, r3
 8011e50:	3710      	adds	r7, #16
 8011e52:	46bd      	mov	sp, r7
 8011e54:	bd80      	pop	{r7, pc}
	...

08011e58 <u16ToDec4Str>:
 8011e58:	b480      	push	{r7}
 8011e5a:	b083      	sub	sp, #12
 8011e5c:	af00      	add	r7, sp, #0
 8011e5e:	6078      	str	r0, [r7, #4]
 8011e60:	460b      	mov	r3, r1
 8011e62:	807b      	strh	r3, [r7, #2]
 8011e64:	887b      	ldrh	r3, [r7, #2]
 8011e66:	f503 531c 	add.w	r3, r3, #9984	; 0x2700
 8011e6a:	330f      	adds	r3, #15
 8011e6c:	b29b      	uxth	r3, r3
 8011e6e:	f644 621e 	movw	r2, #19998	; 0x4e1e
 8011e72:	4293      	cmp	r3, r2
 8011e74:	d917      	bls.n	8011ea6 <u16ToDec4Str+0x4e>
 8011e76:	687b      	ldr	r3, [r7, #4]
 8011e78:	1c5a      	adds	r2, r3, #1
 8011e7a:	607a      	str	r2, [r7, #4]
 8011e7c:	224f      	movs	r2, #79	; 0x4f
 8011e7e:	701a      	strb	r2, [r3, #0]
 8011e80:	687b      	ldr	r3, [r7, #4]
 8011e82:	1c5a      	adds	r2, r3, #1
 8011e84:	607a      	str	r2, [r7, #4]
 8011e86:	2276      	movs	r2, #118	; 0x76
 8011e88:	701a      	strb	r2, [r3, #0]
 8011e8a:	687b      	ldr	r3, [r7, #4]
 8011e8c:	1c5a      	adds	r2, r3, #1
 8011e8e:	607a      	str	r2, [r7, #4]
 8011e90:	2265      	movs	r2, #101	; 0x65
 8011e92:	701a      	strb	r2, [r3, #0]
 8011e94:	687b      	ldr	r3, [r7, #4]
 8011e96:	1c5a      	adds	r2, r3, #1
 8011e98:	607a      	str	r2, [r7, #4]
 8011e9a:	2272      	movs	r2, #114	; 0x72
 8011e9c:	701a      	strb	r2, [r3, #0]
 8011e9e:	687b      	ldr	r3, [r7, #4]
 8011ea0:	2200      	movs	r2, #0
 8011ea2:	701a      	strb	r2, [r3, #0]
 8011ea4:	e07e      	b.n	8011fa4 <u16ToDec4Str+0x14c>
 8011ea6:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8011eaa:	4a41      	ldr	r2, [pc, #260]	; (8011fb0 <u16ToDec4Str+0x158>)
 8011eac:	fb82 1203 	smull	r1, r2, r2, r3
 8011eb0:	1192      	asrs	r2, r2, #6
 8011eb2:	17db      	asrs	r3, r3, #31
 8011eb4:	1ad3      	subs	r3, r2, r3
 8011eb6:	b21b      	sxth	r3, r3
 8011eb8:	b2da      	uxtb	r2, r3
 8011eba:	687b      	ldr	r3, [r7, #4]
 8011ebc:	1c59      	adds	r1, r3, #1
 8011ebe:	6079      	str	r1, [r7, #4]
 8011ec0:	3230      	adds	r2, #48	; 0x30
 8011ec2:	b2d2      	uxtb	r2, r2
 8011ec4:	701a      	strb	r2, [r3, #0]
 8011ec6:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8011eca:	4a39      	ldr	r2, [pc, #228]	; (8011fb0 <u16ToDec4Str+0x158>)
 8011ecc:	fb82 1203 	smull	r1, r2, r2, r3
 8011ed0:	1191      	asrs	r1, r2, #6
 8011ed2:	17da      	asrs	r2, r3, #31
 8011ed4:	1a8a      	subs	r2, r1, r2
 8011ed6:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8011eda:	fb01 f202 	mul.w	r2, r1, r2
 8011ede:	1a9b      	subs	r3, r3, r2
 8011ee0:	807b      	strh	r3, [r7, #2]
 8011ee2:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8011ee6:	4a33      	ldr	r2, [pc, #204]	; (8011fb4 <u16ToDec4Str+0x15c>)
 8011ee8:	fb82 1203 	smull	r1, r2, r2, r3
 8011eec:	1152      	asrs	r2, r2, #5
 8011eee:	17db      	asrs	r3, r3, #31
 8011ef0:	1ad3      	subs	r3, r2, r3
 8011ef2:	b21b      	sxth	r3, r3
 8011ef4:	b2da      	uxtb	r2, r3
 8011ef6:	687b      	ldr	r3, [r7, #4]
 8011ef8:	1c59      	adds	r1, r3, #1
 8011efa:	6079      	str	r1, [r7, #4]
 8011efc:	3230      	adds	r2, #48	; 0x30
 8011efe:	b2d2      	uxtb	r2, r2
 8011f00:	701a      	strb	r2, [r3, #0]
 8011f02:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8011f06:	4a2b      	ldr	r2, [pc, #172]	; (8011fb4 <u16ToDec4Str+0x15c>)
 8011f08:	fb82 1203 	smull	r1, r2, r2, r3
 8011f0c:	1151      	asrs	r1, r2, #5
 8011f0e:	17da      	asrs	r2, r3, #31
 8011f10:	1a8a      	subs	r2, r1, r2
 8011f12:	2164      	movs	r1, #100	; 0x64
 8011f14:	fb01 f202 	mul.w	r2, r1, r2
 8011f18:	1a9b      	subs	r3, r3, r2
 8011f1a:	807b      	strh	r3, [r7, #2]
 8011f1c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8011f20:	4a25      	ldr	r2, [pc, #148]	; (8011fb8 <u16ToDec4Str+0x160>)
 8011f22:	fb82 1203 	smull	r1, r2, r2, r3
 8011f26:	1092      	asrs	r2, r2, #2
 8011f28:	17db      	asrs	r3, r3, #31
 8011f2a:	1ad3      	subs	r3, r2, r3
 8011f2c:	b21b      	sxth	r3, r3
 8011f2e:	b2da      	uxtb	r2, r3
 8011f30:	687b      	ldr	r3, [r7, #4]
 8011f32:	1c59      	adds	r1, r3, #1
 8011f34:	6079      	str	r1, [r7, #4]
 8011f36:	3230      	adds	r2, #48	; 0x30
 8011f38:	b2d2      	uxtb	r2, r2
 8011f3a:	701a      	strb	r2, [r3, #0]
 8011f3c:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8011f40:	4b1d      	ldr	r3, [pc, #116]	; (8011fb8 <u16ToDec4Str+0x160>)
 8011f42:	fb83 1302 	smull	r1, r3, r3, r2
 8011f46:	1099      	asrs	r1, r3, #2
 8011f48:	17d3      	asrs	r3, r2, #31
 8011f4a:	1ac9      	subs	r1, r1, r3
 8011f4c:	460b      	mov	r3, r1
 8011f4e:	009b      	lsls	r3, r3, #2
 8011f50:	440b      	add	r3, r1
 8011f52:	005b      	lsls	r3, r3, #1
 8011f54:	1ad3      	subs	r3, r2, r3
 8011f56:	807b      	strh	r3, [r7, #2]
 8011f58:	887b      	ldrh	r3, [r7, #2]
 8011f5a:	b2da      	uxtb	r2, r3
 8011f5c:	687b      	ldr	r3, [r7, #4]
 8011f5e:	1c59      	adds	r1, r3, #1
 8011f60:	6079      	str	r1, [r7, #4]
 8011f62:	3230      	adds	r2, #48	; 0x30
 8011f64:	b2d2      	uxtb	r2, r2
 8011f66:	701a      	strb	r2, [r3, #0]
 8011f68:	687b      	ldr	r3, [r7, #4]
 8011f6a:	2200      	movs	r2, #0
 8011f6c:	701a      	strb	r2, [r3, #0]
 8011f6e:	687b      	ldr	r3, [r7, #4]
 8011f70:	3b04      	subs	r3, #4
 8011f72:	781b      	ldrb	r3, [r3, #0]
 8011f74:	2b30      	cmp	r3, #48	; 0x30
 8011f76:	d115      	bne.n	8011fa4 <u16ToDec4Str+0x14c>
 8011f78:	687b      	ldr	r3, [r7, #4]
 8011f7a:	3b04      	subs	r3, #4
 8011f7c:	2220      	movs	r2, #32
 8011f7e:	701a      	strb	r2, [r3, #0]
 8011f80:	687b      	ldr	r3, [r7, #4]
 8011f82:	3b03      	subs	r3, #3
 8011f84:	781b      	ldrb	r3, [r3, #0]
 8011f86:	2b30      	cmp	r3, #48	; 0x30
 8011f88:	d10c      	bne.n	8011fa4 <u16ToDec4Str+0x14c>
 8011f8a:	687b      	ldr	r3, [r7, #4]
 8011f8c:	3b03      	subs	r3, #3
 8011f8e:	2220      	movs	r2, #32
 8011f90:	701a      	strb	r2, [r3, #0]
 8011f92:	687b      	ldr	r3, [r7, #4]
 8011f94:	3b02      	subs	r3, #2
 8011f96:	781b      	ldrb	r3, [r3, #0]
 8011f98:	2b30      	cmp	r3, #48	; 0x30
 8011f9a:	d103      	bne.n	8011fa4 <u16ToDec4Str+0x14c>
 8011f9c:	687b      	ldr	r3, [r7, #4]
 8011f9e:	3b02      	subs	r3, #2
 8011fa0:	2220      	movs	r2, #32
 8011fa2:	701a      	strb	r2, [r3, #0]
 8011fa4:	370c      	adds	r7, #12
 8011fa6:	46bd      	mov	sp, r7
 8011fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011fac:	4770      	bx	lr
 8011fae:	bf00      	nop
 8011fb0:	10624dd3 	.word	0x10624dd3
 8011fb4:	51eb851f 	.word	0x51eb851f
 8011fb8:	66666667 	.word	0x66666667

08011fbc <lcd_write_cmd_data>:
#include "Func.h"

unsigned short data[15];

void lcd_write_cmd_data( unsigned short Cmd, short Len, unsigned short *Data )
{
 8011fbc:	b580      	push	{r7, lr}
 8011fbe:	b082      	sub	sp, #8
 8011fc0:	af00      	add	r7, sp, #0
 8011fc2:	4603      	mov	r3, r0
 8011fc4:	603a      	str	r2, [r7, #0]
 8011fc6:	80fb      	strh	r3, [r7, #6]
 8011fc8:	460b      	mov	r3, r1
 8011fca:	80bb      	strh	r3, [r7, #4]
	HAL_GPIO_WritePin( LcdRs_GPIO_Port, LcdRs_Pin, GPIO_PIN_RESET); // low for command
 8011fcc:	2200      	movs	r2, #0
 8011fce:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8011fd2:	480e      	ldr	r0, [pc, #56]	; (801200c <lcd_write_cmd_data+0x50>)
 8011fd4:	f007 ff10 	bl	8019df8 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi3, (unsigned char*)&Cmd, 1, 1);// timeout 1 ms
 8011fd8:	1db9      	adds	r1, r7, #6
 8011fda:	2301      	movs	r3, #1
 8011fdc:	2201      	movs	r2, #1
 8011fde:	480c      	ldr	r0, [pc, #48]	; (8012010 <lcd_write_cmd_data+0x54>)
 8011fe0:	f00a fa0f 	bl	801c402 <HAL_SPI_Transmit>

	if(Len !=0)
 8011fe4:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8011fe8:	2b00      	cmp	r3, #0
 8011fea:	d00b      	beq.n	8012004 <lcd_write_cmd_data+0x48>
	{
		HAL_GPIO_WritePin( LcdRs_GPIO_Port, LcdRs_Pin, GPIO_PIN_SET);  //high for data
 8011fec:	2201      	movs	r2, #1
 8011fee:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8011ff2:	4806      	ldr	r0, [pc, #24]	; (801200c <lcd_write_cmd_data+0x50>)
 8011ff4:	f007 ff00 	bl	8019df8 <HAL_GPIO_WritePin>
		HAL_SPI_Transmit(&hspi3, (unsigned char*)Data, Len, 1);// timeout 1 ms
 8011ff8:	88ba      	ldrh	r2, [r7, #4]
 8011ffa:	2301      	movs	r3, #1
 8011ffc:	6839      	ldr	r1, [r7, #0]
 8011ffe:	4804      	ldr	r0, [pc, #16]	; (8012010 <lcd_write_cmd_data+0x54>)
 8012000:	f00a f9ff 	bl	801c402 <HAL_SPI_Transmit>
	}
}
 8012004:	bf00      	nop
 8012006:	3708      	adds	r7, #8
 8012008:	46bd      	mov	sp, r7
 801200a:	bd80      	pop	{r7, pc}
 801200c:	40020800 	.word	0x40020800
 8012010:	200069cc 	.word	0x200069cc

08012014 <Init_LCD>:

// initialize the LCD
void Init_LCD(void)
{
 8012014:	b580      	push	{r7, lr}
 8012016:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin( LcdCs_GPIO_Port, LcdCs_Pin, GPIO_PIN_RESET);  //enable lcd controller
 8012018:	2200      	movs	r2, #0
 801201a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 801201e:	4885      	ldr	r0, [pc, #532]	; (8012234 <Init_LCD+0x220>)
 8012020:	f007 feea 	bl	8019df8 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin( Dres_GPIO_Port, Dres_Pin, GPIO_PIN_SET);  //display reset
 8012024:	2201      	movs	r2, #1
 8012026:	f44f 7100 	mov.w	r1, #512	; 0x200
 801202a:	4883      	ldr	r0, [pc, #524]	; (8012238 <Init_LCD+0x224>)
 801202c:	f007 fee4 	bl	8019df8 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8012030:	2001      	movs	r0, #1
 8012032:	f006 fb03 	bl	801863c <HAL_Delay>
	HAL_GPIO_WritePin( Dres_GPIO_Port, Dres_Pin, GPIO_PIN_RESET);
 8012036:	2200      	movs	r2, #0
 8012038:	f44f 7100 	mov.w	r1, #512	; 0x200
 801203c:	487e      	ldr	r0, [pc, #504]	; (8012238 <Init_LCD+0x224>)
 801203e:	f007 fedb 	bl	8019df8 <HAL_GPIO_WritePin>
	HAL_Delay(10);
 8012042:	200a      	movs	r0, #10
 8012044:	f006 fafa 	bl	801863c <HAL_Delay>
	HAL_GPIO_WritePin( Dres_GPIO_Port, Dres_Pin, GPIO_PIN_SET);
 8012048:	2201      	movs	r2, #1
 801204a:	f44f 7100 	mov.w	r1, #512	; 0x200
 801204e:	487a      	ldr	r0, [pc, #488]	; (8012238 <Init_LCD+0x224>)
 8012050:	f007 fed2 	bl	8019df8 <HAL_GPIO_WritePin>
	HAL_Delay(120);
 8012054:	2078      	movs	r0, #120	; 0x78
 8012056:	f006 faf1 	bl	801863c <HAL_Delay>

	data[0]=0;
 801205a:	4b78      	ldr	r3, [pc, #480]	; (801223c <Init_LCD+0x228>)
 801205c:	2200      	movs	r2, #0
 801205e:	801a      	strh	r2, [r3, #0]
	lcd_write_cmd_data(0xb0, 1, data);  //set interface
 8012060:	4a76      	ldr	r2, [pc, #472]	; (801223c <Init_LCD+0x228>)
 8012062:	2101      	movs	r1, #1
 8012064:	20b0      	movs	r0, #176	; 0xb0
 8012066:	f7ff ffa9 	bl	8011fbc <lcd_write_cmd_data>
	lcd_write_cmd_data(0x11, 0, data);  //sleep
 801206a:	4a74      	ldr	r2, [pc, #464]	; (801223c <Init_LCD+0x228>)
 801206c:	2100      	movs	r1, #0
 801206e:	2011      	movs	r0, #17
 8012070:	f7ff ffa4 	bl	8011fbc <lcd_write_cmd_data>
	HAL_Delay(120);
 8012074:	2078      	movs	r0, #120	; 0x78
 8012076:	f006 fae1 	bl	801863c <HAL_Delay>
	data[0]=0x55;
 801207a:	4b70      	ldr	r3, [pc, #448]	; (801223c <Init_LCD+0x228>)
 801207c:	2255      	movs	r2, #85	; 0x55
 801207e:	801a      	strh	r2, [r3, #0]
	lcd_write_cmd_data(0x3A, 1, data);  //set pixels to 16 bit
 8012080:	4a6e      	ldr	r2, [pc, #440]	; (801223c <Init_LCD+0x228>)
 8012082:	2101      	movs	r1, #1
 8012084:	203a      	movs	r0, #58	; 0x3a
 8012086:	f7ff ff99 	bl	8011fbc <lcd_write_cmd_data>
	data[0]=data[1]=9;
 801208a:	4b6c      	ldr	r3, [pc, #432]	; (801223c <Init_LCD+0x228>)
 801208c:	2209      	movs	r2, #9
 801208e:	805a      	strh	r2, [r3, #2]
 8012090:	4b6a      	ldr	r3, [pc, #424]	; (801223c <Init_LCD+0x228>)
 8012092:	885a      	ldrh	r2, [r3, #2]
 8012094:	4b69      	ldr	r3, [pc, #420]	; (801223c <Init_LCD+0x228>)
 8012096:	801a      	strh	r2, [r3, #0]
	lcd_write_cmd_data(0xc0, 2, data);  //set power
 8012098:	4a68      	ldr	r2, [pc, #416]	; (801223c <Init_LCD+0x228>)
 801209a:	2102      	movs	r1, #2
 801209c:	20c0      	movs	r0, #192	; 0xc0
 801209e:	f7ff ff8d 	bl	8011fbc <lcd_write_cmd_data>
	data[0]= 0x41;
 80120a2:	4b66      	ldr	r3, [pc, #408]	; (801223c <Init_LCD+0x228>)
 80120a4:	2241      	movs	r2, #65	; 0x41
 80120a6:	801a      	strh	r2, [r3, #0]
	data[1]=0;
 80120a8:	4b64      	ldr	r3, [pc, #400]	; (801223c <Init_LCD+0x228>)
 80120aa:	2200      	movs	r2, #0
 80120ac:	805a      	strh	r2, [r3, #2]
	lcd_write_cmd_data(0xc1, 2, data);  //set power
 80120ae:	4a63      	ldr	r2, [pc, #396]	; (801223c <Init_LCD+0x228>)
 80120b0:	2102      	movs	r1, #2
 80120b2:	20c1      	movs	r0, #193	; 0xc1
 80120b4:	f7ff ff82 	bl	8011fbc <lcd_write_cmd_data>
	data[0]= 0x33;
 80120b8:	4b60      	ldr	r3, [pc, #384]	; (801223c <Init_LCD+0x228>)
 80120ba:	2233      	movs	r2, #51	; 0x33
 80120bc:	801a      	strh	r2, [r3, #0]
	lcd_write_cmd_data(0xc2, 1, data);  //set power
 80120be:	4a5f      	ldr	r2, [pc, #380]	; (801223c <Init_LCD+0x228>)
 80120c0:	2101      	movs	r1, #1
 80120c2:	20c2      	movs	r0, #194	; 0xc2
 80120c4:	f7ff ff7a 	bl	8011fbc <lcd_write_cmd_data>
	data[0]=data[1]=0;
 80120c8:	4b5c      	ldr	r3, [pc, #368]	; (801223c <Init_LCD+0x228>)
 80120ca:	2200      	movs	r2, #0
 80120cc:	805a      	strh	r2, [r3, #2]
 80120ce:	4b5b      	ldr	r3, [pc, #364]	; (801223c <Init_LCD+0x228>)
 80120d0:	885a      	ldrh	r2, [r3, #2]
 80120d2:	4b5a      	ldr	r3, [pc, #360]	; (801223c <Init_LCD+0x228>)
 80120d4:	801a      	strh	r2, [r3, #0]
	data[2]=data[3]=0;  //#3 may be 0x36
 80120d6:	4b59      	ldr	r3, [pc, #356]	; (801223c <Init_LCD+0x228>)
 80120d8:	2200      	movs	r2, #0
 80120da:	80da      	strh	r2, [r3, #6]
 80120dc:	4b57      	ldr	r3, [pc, #348]	; (801223c <Init_LCD+0x228>)
 80120de:	88da      	ldrh	r2, [r3, #6]
 80120e0:	4b56      	ldr	r3, [pc, #344]	; (801223c <Init_LCD+0x228>)
 80120e2:	809a      	strh	r2, [r3, #4]
	lcd_write_cmd_data(0xc5, 4, data);  //Vcom control
 80120e4:	4a55      	ldr	r2, [pc, #340]	; (801223c <Init_LCD+0x228>)
 80120e6:	2104      	movs	r1, #4
 80120e8:	20c5      	movs	r0, #197	; 0xc5
 80120ea:	f7ff ff67 	bl	8011fbc <lcd_write_cmd_data>

	data[0]=  0;
 80120ee:	4b53      	ldr	r3, [pc, #332]	; (801223c <Init_LCD+0x228>)
 80120f0:	2200      	movs	r2, #0
 80120f2:	801a      	strh	r2, [r3, #0]
	lcd_write_cmd_data(0x36, 1, data);  //madctl
 80120f4:	4a51      	ldr	r2, [pc, #324]	; (801223c <Init_LCD+0x228>)
 80120f6:	2101      	movs	r1, #1
 80120f8:	2036      	movs	r0, #54	; 0x36
 80120fa:	f7ff ff5f 	bl	8011fbc <lcd_write_cmd_data>
	 Digital Gamma Control 1
	-1, 0xE2, 0x0F, 0x32, 0x2E, 0x0B, 0x0D, 0x05, 0x47, 0x75,
	          0x37, 0x06, 0x10, 0x03, 0x24, 0x20, 0x00,
    SPI_TRANSFER(0xE0 Positive Gamma Control, 0x00, 0x2C, 0x2C, 0x0B, 0x0C, 0x04, 0x4C, 0x64, 0x36, 0x03, 0x0E, 0x01, 0x10, 0x01, 0x00);
    SPI_TRANSFER(0xE1 Negative Gamma Control, 0x0F, 0x37, 0x37, 0x0C, 0x0F, 0x05, 0x50, 0x32, 0x36, 0x04, 0x0B, 0x00, 0x19, 0x14, 0x0F); */
	data[0]=data[14]=  0;
 80120fe:	4b4f      	ldr	r3, [pc, #316]	; (801223c <Init_LCD+0x228>)
 8012100:	2200      	movs	r2, #0
 8012102:	839a      	strh	r2, [r3, #28]
 8012104:	4b4d      	ldr	r3, [pc, #308]	; (801223c <Init_LCD+0x228>)
 8012106:	8b9a      	ldrh	r2, [r3, #28]
 8012108:	4b4c      	ldr	r3, [pc, #304]	; (801223c <Init_LCD+0x228>)
 801210a:	801a      	strh	r2, [r3, #0]
	data[1]=data[2]=   0x2C;
 801210c:	4b4b      	ldr	r3, [pc, #300]	; (801223c <Init_LCD+0x228>)
 801210e:	222c      	movs	r2, #44	; 0x2c
 8012110:	809a      	strh	r2, [r3, #4]
 8012112:	4b4a      	ldr	r3, [pc, #296]	; (801223c <Init_LCD+0x228>)
 8012114:	889a      	ldrh	r2, [r3, #4]
 8012116:	4b49      	ldr	r3, [pc, #292]	; (801223c <Init_LCD+0x228>)
 8012118:	805a      	strh	r2, [r3, #2]
	data[3]=  0x0B;
 801211a:	4b48      	ldr	r3, [pc, #288]	; (801223c <Init_LCD+0x228>)
 801211c:	220b      	movs	r2, #11
 801211e:	80da      	strh	r2, [r3, #6]
	data[4]=  0x0C;
 8012120:	4b46      	ldr	r3, [pc, #280]	; (801223c <Init_LCD+0x228>)
 8012122:	220c      	movs	r2, #12
 8012124:	811a      	strh	r2, [r3, #8]
	data[5]=  0x04;
 8012126:	4b45      	ldr	r3, [pc, #276]	; (801223c <Init_LCD+0x228>)
 8012128:	2204      	movs	r2, #4
 801212a:	815a      	strh	r2, [r3, #10]
	data[6]=  0x4C;
 801212c:	4b43      	ldr	r3, [pc, #268]	; (801223c <Init_LCD+0x228>)
 801212e:	224c      	movs	r2, #76	; 0x4c
 8012130:	819a      	strh	r2, [r3, #12]
	data[7]=  0x64;
 8012132:	4b42      	ldr	r3, [pc, #264]	; (801223c <Init_LCD+0x228>)
 8012134:	2264      	movs	r2, #100	; 0x64
 8012136:	81da      	strh	r2, [r3, #14]
	data[8]=  0x36;
 8012138:	4b40      	ldr	r3, [pc, #256]	; (801223c <Init_LCD+0x228>)
 801213a:	2236      	movs	r2, #54	; 0x36
 801213c:	821a      	strh	r2, [r3, #16]
	data[9]=  0x03;
 801213e:	4b3f      	ldr	r3, [pc, #252]	; (801223c <Init_LCD+0x228>)
 8012140:	2203      	movs	r2, #3
 8012142:	825a      	strh	r2, [r3, #18]
	data[10]= 0x0E;
 8012144:	4b3d      	ldr	r3, [pc, #244]	; (801223c <Init_LCD+0x228>)
 8012146:	220e      	movs	r2, #14
 8012148:	829a      	strh	r2, [r3, #20]
	data[11]=data[13]= 0x2C;
 801214a:	4b3c      	ldr	r3, [pc, #240]	; (801223c <Init_LCD+0x228>)
 801214c:	222c      	movs	r2, #44	; 0x2c
 801214e:	835a      	strh	r2, [r3, #26]
 8012150:	4b3a      	ldr	r3, [pc, #232]	; (801223c <Init_LCD+0x228>)
 8012152:	8b5a      	ldrh	r2, [r3, #26]
 8012154:	4b39      	ldr	r3, [pc, #228]	; (801223c <Init_LCD+0x228>)
 8012156:	82da      	strh	r2, [r3, #22]
	data[12]= 0x10;
 8012158:	4b38      	ldr	r3, [pc, #224]	; (801223c <Init_LCD+0x228>)
 801215a:	2210      	movs	r2, #16
 801215c:	831a      	strh	r2, [r3, #24]
	lcd_write_cmd_data(0xe0, 15, data);  //positive gamma control
 801215e:	4a37      	ldr	r2, [pc, #220]	; (801223c <Init_LCD+0x228>)
 8012160:	210f      	movs	r1, #15
 8012162:	20e0      	movs	r0, #224	; 0xe0
 8012164:	f7ff ff2a 	bl	8011fbc <lcd_write_cmd_data>

	data[0]=data[4]= data[14]= 0x0F;
 8012168:	4b34      	ldr	r3, [pc, #208]	; (801223c <Init_LCD+0x228>)
 801216a:	220f      	movs	r2, #15
 801216c:	839a      	strh	r2, [r3, #28]
 801216e:	4b33      	ldr	r3, [pc, #204]	; (801223c <Init_LCD+0x228>)
 8012170:	8b9a      	ldrh	r2, [r3, #28]
 8012172:	4b32      	ldr	r3, [pc, #200]	; (801223c <Init_LCD+0x228>)
 8012174:	811a      	strh	r2, [r3, #8]
 8012176:	4b31      	ldr	r3, [pc, #196]	; (801223c <Init_LCD+0x228>)
 8012178:	891a      	ldrh	r2, [r3, #8]
 801217a:	4b30      	ldr	r3, [pc, #192]	; (801223c <Init_LCD+0x228>)
 801217c:	801a      	strh	r2, [r3, #0]
	data[1]=data[2]= 0x37;
 801217e:	4b2f      	ldr	r3, [pc, #188]	; (801223c <Init_LCD+0x228>)
 8012180:	2237      	movs	r2, #55	; 0x37
 8012182:	809a      	strh	r2, [r3, #4]
 8012184:	4b2d      	ldr	r3, [pc, #180]	; (801223c <Init_LCD+0x228>)
 8012186:	889a      	ldrh	r2, [r3, #4]
 8012188:	4b2c      	ldr	r3, [pc, #176]	; (801223c <Init_LCD+0x228>)
 801218a:	805a      	strh	r2, [r3, #2]
	data[3]=  0x0C;
 801218c:	4b2b      	ldr	r3, [pc, #172]	; (801223c <Init_LCD+0x228>)
 801218e:	220c      	movs	r2, #12
 8012190:	80da      	strh	r2, [r3, #6]
	data[5]=  0x05;
 8012192:	4b2a      	ldr	r3, [pc, #168]	; (801223c <Init_LCD+0x228>)
 8012194:	2205      	movs	r2, #5
 8012196:	815a      	strh	r2, [r3, #10]
	data[6]=  0x50;
 8012198:	4b28      	ldr	r3, [pc, #160]	; (801223c <Init_LCD+0x228>)
 801219a:	2250      	movs	r2, #80	; 0x50
 801219c:	819a      	strh	r2, [r3, #12]
	data[7]=  0x32;
 801219e:	4b27      	ldr	r3, [pc, #156]	; (801223c <Init_LCD+0x228>)
 80121a0:	2232      	movs	r2, #50	; 0x32
 80121a2:	81da      	strh	r2, [r3, #14]
	data[8]=  0x36;
 80121a4:	4b25      	ldr	r3, [pc, #148]	; (801223c <Init_LCD+0x228>)
 80121a6:	2236      	movs	r2, #54	; 0x36
 80121a8:	821a      	strh	r2, [r3, #16]
	data[9]=  0x04;
 80121aa:	4b24      	ldr	r3, [pc, #144]	; (801223c <Init_LCD+0x228>)
 80121ac:	2204      	movs	r2, #4
 80121ae:	825a      	strh	r2, [r3, #18]
	data[10]= 0x0B;
 80121b0:	4b22      	ldr	r3, [pc, #136]	; (801223c <Init_LCD+0x228>)
 80121b2:	220b      	movs	r2, #11
 80121b4:	829a      	strh	r2, [r3, #20]
	data[11]= 0;
 80121b6:	4b21      	ldr	r3, [pc, #132]	; (801223c <Init_LCD+0x228>)
 80121b8:	2200      	movs	r2, #0
 80121ba:	82da      	strh	r2, [r3, #22]
	data[12]= 0x19;
 80121bc:	4b1f      	ldr	r3, [pc, #124]	; (801223c <Init_LCD+0x228>)
 80121be:	2219      	movs	r2, #25
 80121c0:	831a      	strh	r2, [r3, #24]
	data[13]= 0x14;
 80121c2:	4b1e      	ldr	r3, [pc, #120]	; (801223c <Init_LCD+0x228>)
 80121c4:	2214      	movs	r2, #20
 80121c6:	835a      	strh	r2, [r3, #26]
	lcd_write_cmd_data(0xe1, 15, data);  //Negitive gamma control
 80121c8:	4a1c      	ldr	r2, [pc, #112]	; (801223c <Init_LCD+0x228>)
 80121ca:	210f      	movs	r1, #15
 80121cc:	20e1      	movs	r0, #225	; 0xe1
 80121ce:	f7ff fef5 	bl	8011fbc <lcd_write_cmd_data>

//	SPI_TRANSFER(0xB6/*Display Function Control*/, 0, /*ISC=2*/2, /*Display Height h=*/59); // Actual display height = (h+1)*8 so (59+1)*8=480
	data[0]=0;
 80121d2:	4b1a      	ldr	r3, [pc, #104]	; (801223c <Init_LCD+0x228>)
 80121d4:	2200      	movs	r2, #0
 80121d6:	801a      	strh	r2, [r3, #0]
	data[1]=2;
 80121d8:	4b18      	ldr	r3, [pc, #96]	; (801223c <Init_LCD+0x228>)
 80121da:	2202      	movs	r2, #2
 80121dc:	805a      	strh	r2, [r3, #2]
	data[2]=59;
 80121de:	4b17      	ldr	r3, [pc, #92]	; (801223c <Init_LCD+0x228>)
 80121e0:	223b      	movs	r2, #59	; 0x3b
 80121e2:	809a      	strh	r2, [r3, #4]
	lcd_write_cmd_data(0xb6, 3, data);  //display function control
 80121e4:	4a15      	ldr	r2, [pc, #84]	; (801223c <Init_LCD+0x228>)
 80121e6:	2103      	movs	r1, #3
 80121e8:	20b6      	movs	r0, #182	; 0xb6
 80121ea:	f7ff fee7 	bl	8011fbc <lcd_write_cmd_data>

	lcd_write_cmd_data(0x11, 0, data);  //sleep
 80121ee:	4a13      	ldr	r2, [pc, #76]	; (801223c <Init_LCD+0x228>)
 80121f0:	2100      	movs	r1, #0
 80121f2:	2011      	movs	r0, #17
 80121f4:	f7ff fee2 	bl	8011fbc <lcd_write_cmd_data>
	HAL_Delay(120);
 80121f8:	2078      	movs	r0, #120	; 0x78
 80121fa:	f006 fa1f 	bl	801863c <HAL_Delay>
	lcd_write_cmd_data(0x29, 0, data);  //display on
 80121fe:	4a0f      	ldr	r2, [pc, #60]	; (801223c <Init_LCD+0x228>)
 8012200:	2100      	movs	r1, #0
 8012202:	2029      	movs	r0, #41	; 0x29
 8012204:	f7ff feda 	bl	8011fbc <lcd_write_cmd_data>
	lcd_write_cmd_data(0x38, 0, data);  //idle off
 8012208:	4a0c      	ldr	r2, [pc, #48]	; (801223c <Init_LCD+0x228>)
 801220a:	2100      	movs	r1, #0
 801220c:	2038      	movs	r0, #56	; 0x38
 801220e:	f7ff fed5 	bl	8011fbc <lcd_write_cmd_data>
	lcd_write_cmd_data(0x13, 0, data);  //Normal Display Mode ON
 8012212:	4a0a      	ldr	r2, [pc, #40]	; (801223c <Init_LCD+0x228>)
 8012214:	2100      	movs	r1, #0
 8012216:	2013      	movs	r0, #19
 8012218:	f7ff fed0 	bl	8011fbc <lcd_write_cmd_data>

	HAL_GPIO_WritePin( LcdCs_GPIO_Port, LcdCs_Pin, GPIO_PIN_SET);  //disable lcd controller
 801221c:	2201      	movs	r2, #1
 801221e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8012222:	4804      	ldr	r0, [pc, #16]	; (8012234 <Init_LCD+0x220>)
 8012224:	f007 fde8 	bl	8019df8 <HAL_GPIO_WritePin>

	LCD_ClrScrn(0);  //clear screen to black
 8012228:	2000      	movs	r0, #0
 801222a:	f000 f809 	bl	8012240 <LCD_ClrScrn>
}
 801222e:	bf00      	nop
 8012230:	bd80      	pop	{r7, pc}
 8012232:	bf00      	nop
 8012234:	40020800 	.word	0x40020800
 8012238:	40020400 	.word	0x40020400
 801223c:	20002824 	.word	0x20002824

08012240 <LCD_ClrScrn>:

void LCD_ClrScrn(unsigned short Color)
{
 8012240:	b580      	push	{r7, lr}
 8012242:	b084      	sub	sp, #16
 8012244:	af00      	add	r7, sp, #0
 8012246:	4603      	mov	r3, r0
 8012248:	80fb      	strh	r3, [r7, #6]
short y;
unsigned short *ptr;

ptr = malloc(320*2);
 801224a:	f44f 7020 	mov.w	r0, #640	; 0x280
 801224e:	f010 fe0b 	bl	8022e68 <malloc>
 8012252:	4603      	mov	r3, r0
 8012254:	60bb      	str	r3, [r7, #8]
HAL_GPIO_WritePin( LcdCs_GPIO_Port, LcdCs_Pin, GPIO_PIN_RESET);  //enable lcd controller
 8012256:	2200      	movs	r2, #0
 8012258:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 801225c:	483d      	ldr	r0, [pc, #244]	; (8012354 <LCD_ClrScrn+0x114>)
 801225e:	f007 fdcb 	bl	8019df8 <HAL_GPIO_WritePin>

for(y=0; y<480; ++y )
 8012262:	2300      	movs	r3, #0
 8012264:	81fb      	strh	r3, [r7, #14]
 8012266:	e03c      	b.n	80122e2 <LCD_ClrScrn+0xa2>
{
	data[0]=data[1]= 0;
 8012268:	4b3b      	ldr	r3, [pc, #236]	; (8012358 <LCD_ClrScrn+0x118>)
 801226a:	2200      	movs	r2, #0
 801226c:	805a      	strh	r2, [r3, #2]
 801226e:	4b3a      	ldr	r3, [pc, #232]	; (8012358 <LCD_ClrScrn+0x118>)
 8012270:	885a      	ldrh	r2, [r3, #2]
 8012272:	4b39      	ldr	r3, [pc, #228]	; (8012358 <LCD_ClrScrn+0x118>)
 8012274:	801a      	strh	r2, [r3, #0]
	data[2]= 319>>8;
 8012276:	4b38      	ldr	r3, [pc, #224]	; (8012358 <LCD_ClrScrn+0x118>)
 8012278:	2201      	movs	r2, #1
 801227a:	809a      	strh	r2, [r3, #4]
	data[3]= 319 & 0xFF;
 801227c:	4b36      	ldr	r3, [pc, #216]	; (8012358 <LCD_ClrScrn+0x118>)
 801227e:	223f      	movs	r2, #63	; 0x3f
 8012280:	80da      	strh	r2, [r3, #6]
	lcd_write_cmd_data(0x2A, 4, data);  //set x
 8012282:	4a35      	ldr	r2, [pc, #212]	; (8012358 <LCD_ClrScrn+0x118>)
 8012284:	2104      	movs	r1, #4
 8012286:	202a      	movs	r0, #42	; 0x2a
 8012288:	f7ff fe98 	bl	8011fbc <lcd_write_cmd_data>
	data[0]= y>>8;
 801228c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8012290:	121b      	asrs	r3, r3, #8
 8012292:	b21b      	sxth	r3, r3
 8012294:	b29a      	uxth	r2, r3
 8012296:	4b30      	ldr	r3, [pc, #192]	; (8012358 <LCD_ClrScrn+0x118>)
 8012298:	801a      	strh	r2, [r3, #0]
	data[1]= y & 0xFF;
 801229a:	89fb      	ldrh	r3, [r7, #14]
 801229c:	b2db      	uxtb	r3, r3
 801229e:	b29a      	uxth	r2, r3
 80122a0:	4b2d      	ldr	r3, [pc, #180]	; (8012358 <LCD_ClrScrn+0x118>)
 80122a2:	805a      	strh	r2, [r3, #2]
	data[2]= 479>>8;
 80122a4:	4b2c      	ldr	r3, [pc, #176]	; (8012358 <LCD_ClrScrn+0x118>)
 80122a6:	2201      	movs	r2, #1
 80122a8:	809a      	strh	r2, [r3, #4]
	data[3]= 479 & 0xFF;
 80122aa:	4b2b      	ldr	r3, [pc, #172]	; (8012358 <LCD_ClrScrn+0x118>)
 80122ac:	22df      	movs	r2, #223	; 0xdf
 80122ae:	80da      	strh	r2, [r3, #6]
	lcd_write_cmd_data(0x2B, 4, data);  //set y
 80122b0:	4a29      	ldr	r2, [pc, #164]	; (8012358 <LCD_ClrScrn+0x118>)
 80122b2:	2104      	movs	r1, #4
 80122b4:	202b      	movs	r0, #43	; 0x2b
 80122b6:	f7ff fe81 	bl	8011fbc <lcd_write_cmd_data>

	if(ptr != NULL)
 80122ba:	68bb      	ldr	r3, [r7, #8]
 80122bc:	2b00      	cmp	r3, #0
 80122be:	d016      	beq.n	80122ee <LCD_ClrScrn+0xae>
	{
		memset16(ptr, Color, 320);
 80122c0:	88fb      	ldrh	r3, [r7, #6]
 80122c2:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80122c6:	4619      	mov	r1, r3
 80122c8:	68b8      	ldr	r0, [r7, #8]
 80122ca:	f7ff fc67 	bl	8011b9c <memset16>
		lcd_write_cmd_data(0x2C, 320, ptr);  //write out pixels
 80122ce:	68ba      	ldr	r2, [r7, #8]
 80122d0:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80122d4:	202c      	movs	r0, #44	; 0x2c
 80122d6:	f7ff fe71 	bl	8011fbc <lcd_write_cmd_data>
for(y=0; y<480; ++y )
 80122da:	89fb      	ldrh	r3, [r7, #14]
 80122dc:	3301      	adds	r3, #1
 80122de:	b29b      	uxth	r3, r3
 80122e0:	81fb      	strh	r3, [r7, #14]
 80122e2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80122e6:	f5b3 7ff0 	cmp.w	r3, #480	; 0x1e0
 80122ea:	dbbd      	blt.n	8012268 <LCD_ClrScrn+0x28>
 80122ec:	e000      	b.n	80122f0 <LCD_ClrScrn+0xb0>
	}
	else
		break; //bail out
 80122ee:	bf00      	nop
}

free(ptr);
 80122f0:	68b8      	ldr	r0, [r7, #8]
 80122f2:	f010 fdc1 	bl	8022e78 <free>

data[0]=data[1]= 0;
 80122f6:	4b18      	ldr	r3, [pc, #96]	; (8012358 <LCD_ClrScrn+0x118>)
 80122f8:	2200      	movs	r2, #0
 80122fa:	805a      	strh	r2, [r3, #2]
 80122fc:	4b16      	ldr	r3, [pc, #88]	; (8012358 <LCD_ClrScrn+0x118>)
 80122fe:	885a      	ldrh	r2, [r3, #2]
 8012300:	4b15      	ldr	r3, [pc, #84]	; (8012358 <LCD_ClrScrn+0x118>)
 8012302:	801a      	strh	r2, [r3, #0]
data[2]= 319>>8;
 8012304:	4b14      	ldr	r3, [pc, #80]	; (8012358 <LCD_ClrScrn+0x118>)
 8012306:	2201      	movs	r2, #1
 8012308:	809a      	strh	r2, [r3, #4]
data[3]= 319 & 0xFF;
 801230a:	4b13      	ldr	r3, [pc, #76]	; (8012358 <LCD_ClrScrn+0x118>)
 801230c:	223f      	movs	r2, #63	; 0x3f
 801230e:	80da      	strh	r2, [r3, #6]
lcd_write_cmd_data(0x2A, 4, data);  //set x
 8012310:	4a11      	ldr	r2, [pc, #68]	; (8012358 <LCD_ClrScrn+0x118>)
 8012312:	2104      	movs	r1, #4
 8012314:	202a      	movs	r0, #42	; 0x2a
 8012316:	f7ff fe51 	bl	8011fbc <lcd_write_cmd_data>
data[0]=data[1]= 0;
 801231a:	4b0f      	ldr	r3, [pc, #60]	; (8012358 <LCD_ClrScrn+0x118>)
 801231c:	2200      	movs	r2, #0
 801231e:	805a      	strh	r2, [r3, #2]
 8012320:	4b0d      	ldr	r3, [pc, #52]	; (8012358 <LCD_ClrScrn+0x118>)
 8012322:	885a      	ldrh	r2, [r3, #2]
 8012324:	4b0c      	ldr	r3, [pc, #48]	; (8012358 <LCD_ClrScrn+0x118>)
 8012326:	801a      	strh	r2, [r3, #0]
data[2]= 479>>8;
 8012328:	4b0b      	ldr	r3, [pc, #44]	; (8012358 <LCD_ClrScrn+0x118>)
 801232a:	2201      	movs	r2, #1
 801232c:	809a      	strh	r2, [r3, #4]
data[3]= 479 & 0xFF;
 801232e:	4b0a      	ldr	r3, [pc, #40]	; (8012358 <LCD_ClrScrn+0x118>)
 8012330:	22df      	movs	r2, #223	; 0xdf
 8012332:	80da      	strh	r2, [r3, #6]
lcd_write_cmd_data(0x2B, 4, data);  //set y
 8012334:	4a08      	ldr	r2, [pc, #32]	; (8012358 <LCD_ClrScrn+0x118>)
 8012336:	2104      	movs	r1, #4
 8012338:	202b      	movs	r0, #43	; 0x2b
 801233a:	f7ff fe3f 	bl	8011fbc <lcd_write_cmd_data>

HAL_GPIO_WritePin( LcdCs_GPIO_Port, LcdCs_Pin, GPIO_PIN_SET);  //disable lcd controller
 801233e:	2201      	movs	r2, #1
 8012340:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8012344:	4803      	ldr	r0, [pc, #12]	; (8012354 <LCD_ClrScrn+0x114>)
 8012346:	f007 fd57 	bl	8019df8 <HAL_GPIO_WritePin>

}
 801234a:	bf00      	nop
 801234c:	3710      	adds	r7, #16
 801234e:	46bd      	mov	sp, r7
 8012350:	bd80      	pop	{r7, pc}
 8012352:	bf00      	nop
 8012354:	40020800 	.word	0x40020800
 8012358:	20002824 	.word	0x20002824

0801235c <LCD_Set_Posi>:

void LCD_Set_Posi(short Sx, short Sy)
{
 801235c:	b580      	push	{r7, lr}
 801235e:	b082      	sub	sp, #8
 8012360:	af00      	add	r7, sp, #0
 8012362:	4603      	mov	r3, r0
 8012364:	460a      	mov	r2, r1
 8012366:	80fb      	strh	r3, [r7, #6]
 8012368:	4613      	mov	r3, r2
 801236a:	80bb      	strh	r3, [r7, #4]
	HAL_GPIO_WritePin( LcdCs_GPIO_Port, LcdCs_Pin, GPIO_PIN_RESET);  //enable lcd controller
 801236c:	2200      	movs	r2, #0
 801236e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8012372:	481f      	ldr	r0, [pc, #124]	; (80123f0 <LCD_Set_Posi+0x94>)
 8012374:	f007 fd40 	bl	8019df8 <HAL_GPIO_WritePin>

	data[0]= data[2]= Sx>>8;
 8012378:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801237c:	121b      	asrs	r3, r3, #8
 801237e:	b21b      	sxth	r3, r3
 8012380:	b29a      	uxth	r2, r3
 8012382:	4b1c      	ldr	r3, [pc, #112]	; (80123f4 <LCD_Set_Posi+0x98>)
 8012384:	809a      	strh	r2, [r3, #4]
 8012386:	4b1b      	ldr	r3, [pc, #108]	; (80123f4 <LCD_Set_Posi+0x98>)
 8012388:	889a      	ldrh	r2, [r3, #4]
 801238a:	4b1a      	ldr	r3, [pc, #104]	; (80123f4 <LCD_Set_Posi+0x98>)
 801238c:	801a      	strh	r2, [r3, #0]
	data[1]= data[3]= Sx & 0xFF;
 801238e:	88fb      	ldrh	r3, [r7, #6]
 8012390:	b2db      	uxtb	r3, r3
 8012392:	b29a      	uxth	r2, r3
 8012394:	4b17      	ldr	r3, [pc, #92]	; (80123f4 <LCD_Set_Posi+0x98>)
 8012396:	80da      	strh	r2, [r3, #6]
 8012398:	4b16      	ldr	r3, [pc, #88]	; (80123f4 <LCD_Set_Posi+0x98>)
 801239a:	88da      	ldrh	r2, [r3, #6]
 801239c:	4b15      	ldr	r3, [pc, #84]	; (80123f4 <LCD_Set_Posi+0x98>)
 801239e:	805a      	strh	r2, [r3, #2]
	lcd_write_cmd_data(0x2A, 4, data);  //set x
 80123a0:	4a14      	ldr	r2, [pc, #80]	; (80123f4 <LCD_Set_Posi+0x98>)
 80123a2:	2104      	movs	r1, #4
 80123a4:	202a      	movs	r0, #42	; 0x2a
 80123a6:	f7ff fe09 	bl	8011fbc <lcd_write_cmd_data>
	data[0]= data[1]= Sy>>8;
 80123aa:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80123ae:	121b      	asrs	r3, r3, #8
 80123b0:	b21b      	sxth	r3, r3
 80123b2:	b29a      	uxth	r2, r3
 80123b4:	4b0f      	ldr	r3, [pc, #60]	; (80123f4 <LCD_Set_Posi+0x98>)
 80123b6:	805a      	strh	r2, [r3, #2]
 80123b8:	4b0e      	ldr	r3, [pc, #56]	; (80123f4 <LCD_Set_Posi+0x98>)
 80123ba:	885a      	ldrh	r2, [r3, #2]
 80123bc:	4b0d      	ldr	r3, [pc, #52]	; (80123f4 <LCD_Set_Posi+0x98>)
 80123be:	801a      	strh	r2, [r3, #0]
	data[2]= data[3]= Sy & 0xFF;
 80123c0:	88bb      	ldrh	r3, [r7, #4]
 80123c2:	b2db      	uxtb	r3, r3
 80123c4:	b29a      	uxth	r2, r3
 80123c6:	4b0b      	ldr	r3, [pc, #44]	; (80123f4 <LCD_Set_Posi+0x98>)
 80123c8:	80da      	strh	r2, [r3, #6]
 80123ca:	4b0a      	ldr	r3, [pc, #40]	; (80123f4 <LCD_Set_Posi+0x98>)
 80123cc:	88da      	ldrh	r2, [r3, #6]
 80123ce:	4b09      	ldr	r3, [pc, #36]	; (80123f4 <LCD_Set_Posi+0x98>)
 80123d0:	809a      	strh	r2, [r3, #4]
	lcd_write_cmd_data(0x2B, 4, data);  //set y
 80123d2:	4a08      	ldr	r2, [pc, #32]	; (80123f4 <LCD_Set_Posi+0x98>)
 80123d4:	2104      	movs	r1, #4
 80123d6:	202b      	movs	r0, #43	; 0x2b
 80123d8:	f7ff fdf0 	bl	8011fbc <lcd_write_cmd_data>

	HAL_GPIO_WritePin( LcdCs_GPIO_Port, LcdCs_Pin, GPIO_PIN_SET);    //disable lcd controller
 80123dc:	2201      	movs	r2, #1
 80123de:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80123e2:	4803      	ldr	r0, [pc, #12]	; (80123f0 <LCD_Set_Posi+0x94>)
 80123e4:	f007 fd08 	bl	8019df8 <HAL_GPIO_WritePin>
}
 80123e8:	bf00      	nop
 80123ea:	3708      	adds	r7, #8
 80123ec:	46bd      	mov	sp, r7
 80123ee:	bd80      	pop	{r7, pc}
 80123f0:	40020800 	.word	0x40020800
 80123f4:	20002824 	.word	0x20002824

080123f8 <LCD_Set_Pixel>:

void LCD_Set_Pixel(unsigned short Color)
{
 80123f8:	b580      	push	{r7, lr}
 80123fa:	b082      	sub	sp, #8
 80123fc:	af00      	add	r7, sp, #0
 80123fe:	4603      	mov	r3, r0
 8012400:	80fb      	strh	r3, [r7, #6]
	HAL_GPIO_WritePin( LcdCs_GPIO_Port, LcdCs_Pin, GPIO_PIN_RESET);  //enable lcd controller
 8012402:	2200      	movs	r2, #0
 8012404:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8012408:	480d      	ldr	r0, [pc, #52]	; (8012440 <LCD_Set_Pixel+0x48>)
 801240a:	f007 fcf5 	bl	8019df8 <HAL_GPIO_WritePin>

	data[0]= Color>>8;
 801240e:	88fb      	ldrh	r3, [r7, #6]
 8012410:	0a1b      	lsrs	r3, r3, #8
 8012412:	b29a      	uxth	r2, r3
 8012414:	4b0b      	ldr	r3, [pc, #44]	; (8012444 <LCD_Set_Pixel+0x4c>)
 8012416:	801a      	strh	r2, [r3, #0]
	data[1]= Color & 0xFF;
 8012418:	88fb      	ldrh	r3, [r7, #6]
 801241a:	b2db      	uxtb	r3, r3
 801241c:	b29a      	uxth	r2, r3
 801241e:	4b09      	ldr	r3, [pc, #36]	; (8012444 <LCD_Set_Pixel+0x4c>)
 8012420:	805a      	strh	r2, [r3, #2]
	lcd_write_cmd_data(0x2C, 2, data);  //set pixel
 8012422:	4a08      	ldr	r2, [pc, #32]	; (8012444 <LCD_Set_Pixel+0x4c>)
 8012424:	2102      	movs	r1, #2
 8012426:	202c      	movs	r0, #44	; 0x2c
 8012428:	f7ff fdc8 	bl	8011fbc <lcd_write_cmd_data>
	HAL_GPIO_WritePin( LcdCs_GPIO_Port, LcdCs_Pin, GPIO_PIN_SET);    //disable lcd controller
 801242c:	2201      	movs	r2, #1
 801242e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8012432:	4803      	ldr	r0, [pc, #12]	; (8012440 <LCD_Set_Pixel+0x48>)
 8012434:	f007 fce0 	bl	8019df8 <HAL_GPIO_WritePin>
}
 8012438:	bf00      	nop
 801243a:	3708      	adds	r7, #8
 801243c:	46bd      	mov	sp, r7
 801243e:	bd80      	pop	{r7, pc}
 8012440:	40020800 	.word	0x40020800
 8012444:	20002824 	.word	0x20002824

08012448 <LCD_Get_Pixel>:

unsigned short LCD_Get_Pixel(void)
{
 8012448:	b580      	push	{r7, lr}
 801244a:	b082      	sub	sp, #8
 801244c:	af00      	add	r7, sp, #0
	short ret;
	unsigned short fred;

	HAL_GPIO_WritePin( LcdCs_GPIO_Port, LcdCs_Pin, GPIO_PIN_RESET);  //enable lcd controller
 801244e:	2200      	movs	r2, #0
 8012450:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8012454:	4814      	ldr	r0, [pc, #80]	; (80124a8 <LCD_Get_Pixel+0x60>)
 8012456:	f007 fccf 	bl	8019df8 <HAL_GPIO_WritePin>
	lcd_write_cmd_data(0x2E, 0, data);  //read data
 801245a:	4a14      	ldr	r2, [pc, #80]	; (80124ac <LCD_Get_Pixel+0x64>)
 801245c:	2100      	movs	r1, #0
 801245e:	202e      	movs	r0, #46	; 0x2e
 8012460:	f7ff fdac 	bl	8011fbc <lcd_write_cmd_data>

	ret = HAL_SPI_Receive(&hspi3, (unsigned char *)data, 2, 1);
 8012464:	2301      	movs	r3, #1
 8012466:	2202      	movs	r2, #2
 8012468:	4910      	ldr	r1, [pc, #64]	; (80124ac <LCD_Get_Pixel+0x64>)
 801246a:	4811      	ldr	r0, [pc, #68]	; (80124b0 <LCD_Get_Pixel+0x68>)
 801246c:	f00a f905 	bl	801c67a <HAL_SPI_Receive>
 8012470:	4603      	mov	r3, r0
 8012472:	80fb      	strh	r3, [r7, #6]

	HAL_GPIO_WritePin( LcdCs_GPIO_Port, LcdCs_Pin, GPIO_PIN_SET);    //disable lcd controller
 8012474:	2201      	movs	r2, #1
 8012476:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 801247a:	480b      	ldr	r0, [pc, #44]	; (80124a8 <LCD_Get_Pixel+0x60>)
 801247c:	f007 fcbc 	bl	8019df8 <HAL_GPIO_WritePin>

	if( ret == HAL_OK )
 8012480:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8012484:	2b00      	cmp	r3, #0
 8012486:	d10a      	bne.n	801249e <LCD_Get_Pixel+0x56>
		{
		fred =data[0]<<8;
 8012488:	4b08      	ldr	r3, [pc, #32]	; (80124ac <LCD_Get_Pixel+0x64>)
 801248a:	881b      	ldrh	r3, [r3, #0]
 801248c:	021b      	lsls	r3, r3, #8
 801248e:	80bb      	strh	r3, [r7, #4]
		fred |= data[1];
 8012490:	4b06      	ldr	r3, [pc, #24]	; (80124ac <LCD_Get_Pixel+0x64>)
 8012492:	885a      	ldrh	r2, [r3, #2]
 8012494:	88bb      	ldrh	r3, [r7, #4]
 8012496:	4313      	orrs	r3, r2
 8012498:	80bb      	strh	r3, [r7, #4]
		return (fred);
 801249a:	88bb      	ldrh	r3, [r7, #4]
 801249c:	e000      	b.n	80124a0 <LCD_Get_Pixel+0x58>
		}
	else
		return 0;
 801249e:	2300      	movs	r3, #0

}
 80124a0:	4618      	mov	r0, r3
 80124a2:	3708      	adds	r7, #8
 80124a4:	46bd      	mov	sp, r7
 80124a6:	bd80      	pop	{r7, pc}
 80124a8:	40020800 	.word	0x40020800
 80124ac:	20002824 	.word	0x20002824
 80124b0:	200069cc 	.word	0x200069cc

080124b4 <Draw_4Point>:

/*******************************************************************************
Draw_4Point:
*******************************************************************************/
void Draw_4Point(short x, short y, char Str_Cnt, char High)
{
 80124b4:	b590      	push	{r4, r7, lr}
 80124b6:	b083      	sub	sp, #12
 80124b8:	af00      	add	r7, sp, #0
 80124ba:	4604      	mov	r4, r0
 80124bc:	4608      	mov	r0, r1
 80124be:	4611      	mov	r1, r2
 80124c0:	461a      	mov	r2, r3
 80124c2:	4623      	mov	r3, r4
 80124c4:	80fb      	strh	r3, [r7, #6]
 80124c6:	4603      	mov	r3, r0
 80124c8:	80bb      	strh	r3, [r7, #4]
 80124ca:	460b      	mov	r3, r1
 80124cc:	70fb      	strb	r3, [r7, #3]
 80124ce:	4613      	mov	r3, r2
 80124d0:	70bb      	strb	r3, [r7, #2]
  LCD_Set_Posi(x,y);
 80124d2:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 80124d6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80124da:	4611      	mov	r1, r2
 80124dc:	4618      	mov	r0, r3
 80124de:	f7ff ff3d 	bl	801235c <LCD_Set_Posi>
  LCD_Set_Pixel(DAR);
 80124e2:	f643 10e7 	movw	r0, #14823	; 0x39e7
 80124e6:	f7ff ff87 	bl	80123f8 <LCD_Set_Pixel>
  LCD_Set_Posi(x,y+High-1);
 80124ea:	78bb      	ldrb	r3, [r7, #2]
 80124ec:	b29a      	uxth	r2, r3
 80124ee:	88bb      	ldrh	r3, [r7, #4]
 80124f0:	4413      	add	r3, r2
 80124f2:	b29b      	uxth	r3, r3
 80124f4:	3b01      	subs	r3, #1
 80124f6:	b29b      	uxth	r3, r3
 80124f8:	b21a      	sxth	r2, r3
 80124fa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80124fe:	4611      	mov	r1, r2
 8012500:	4618      	mov	r0, r3
 8012502:	f7ff ff2b 	bl	801235c <LCD_Set_Posi>
  LCD_Set_Pixel(DAR);
 8012506:	f643 10e7 	movw	r0, #14823	; 0x39e7
 801250a:	f7ff ff75 	bl	80123f8 <LCD_Set_Pixel>
  LCD_Set_Posi(x+Str_Cnt*((High>10)? 8:6),y);
 801250e:	78fb      	ldrb	r3, [r7, #3]
 8012510:	b29b      	uxth	r3, r3
 8012512:	78ba      	ldrb	r2, [r7, #2]
 8012514:	2a0a      	cmp	r2, #10
 8012516:	d901      	bls.n	801251c <Draw_4Point+0x68>
 8012518:	2208      	movs	r2, #8
 801251a:	e000      	b.n	801251e <Draw_4Point+0x6a>
 801251c:	2206      	movs	r2, #6
 801251e:	fb12 f303 	smulbb	r3, r2, r3
 8012522:	b29a      	uxth	r2, r3
 8012524:	88fb      	ldrh	r3, [r7, #6]
 8012526:	4413      	add	r3, r2
 8012528:	b29b      	uxth	r3, r3
 801252a:	b21b      	sxth	r3, r3
 801252c:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8012530:	4611      	mov	r1, r2
 8012532:	4618      	mov	r0, r3
 8012534:	f7ff ff12 	bl	801235c <LCD_Set_Posi>
  LCD_Set_Pixel(DAR);
 8012538:	f643 10e7 	movw	r0, #14823	; 0x39e7
 801253c:	f7ff ff5c 	bl	80123f8 <LCD_Set_Pixel>
  LCD_Set_Posi(x+Str_Cnt*((High>10)? 8:6),y+High-1);
 8012540:	78fb      	ldrb	r3, [r7, #3]
 8012542:	b29b      	uxth	r3, r3
 8012544:	78ba      	ldrb	r2, [r7, #2]
 8012546:	2a0a      	cmp	r2, #10
 8012548:	d901      	bls.n	801254e <Draw_4Point+0x9a>
 801254a:	2208      	movs	r2, #8
 801254c:	e000      	b.n	8012550 <Draw_4Point+0x9c>
 801254e:	2206      	movs	r2, #6
 8012550:	fb12 f303 	smulbb	r3, r2, r3
 8012554:	b29a      	uxth	r2, r3
 8012556:	88fb      	ldrh	r3, [r7, #6]
 8012558:	4413      	add	r3, r2
 801255a:	b29b      	uxth	r3, r3
 801255c:	b218      	sxth	r0, r3
 801255e:	78bb      	ldrb	r3, [r7, #2]
 8012560:	b29a      	uxth	r2, r3
 8012562:	88bb      	ldrh	r3, [r7, #4]
 8012564:	4413      	add	r3, r2
 8012566:	b29b      	uxth	r3, r3
 8012568:	3b01      	subs	r3, #1
 801256a:	b29b      	uxth	r3, r3
 801256c:	b21b      	sxth	r3, r3
 801256e:	4619      	mov	r1, r3
 8012570:	f7ff fef4 	bl	801235c <LCD_Set_Posi>
  LCD_Set_Pixel(DAR);
 8012574:	f643 10e7 	movw	r0, #14823	; 0x39e7
 8012578:	f7ff ff3e 	bl	80123f8 <LCD_Set_Pixel>
}
 801257c:	bf00      	nop
 801257e:	370c      	adds	r7, #12
 8012580:	46bd      	mov	sp, r7
 8012582:	bd90      	pop	{r4, r7, pc}

08012584 <Update_Title>:

/*******************************************************************************
 Update_Item:
*******************************************************************************/
void Update_Title(void)
{
 8012584:	b580      	push	{r7, lr}
 8012586:	b082      	sub	sp, #8
 8012588:	af00      	add	r7, sp, #0
  short i;

  for(i=0; i<8; i++)
 801258a:	2300      	movs	r3, #0
 801258c:	80fb      	strh	r3, [r7, #6]
 801258e:	e03b      	b.n	8012608 <Update_Title+0x84>
  {
    SetColor(GRY, TCOLOR[i]);
 8012590:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8012594:	4a21      	ldr	r2, [pc, #132]	; (801261c <Update_Title+0x98>)
 8012596:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801259a:	4619      	mov	r1, r3
 801259c:	f643 10e7 	movw	r0, #14823	; 0x39e7
 80125a0:	f7fb fc2c 	bl	800ddfc <SetColor>
    DispStr8x14(T_X-2, TITLE_Y[i], (Current == i)? INV : PRN, (char*)TSTR[i]);
 80125a4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80125a8:	4a1d      	ldr	r2, [pc, #116]	; (8012620 <Update_Title+0x9c>)
 80125aa:	5cd3      	ldrb	r3, [r2, r3]
 80125ac:	b219      	sxth	r1, r3
 80125ae:	4b1d      	ldr	r3, [pc, #116]	; (8012624 <Update_Title+0xa0>)
 80125b0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80125b4:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80125b8:	429a      	cmp	r2, r3
 80125ba:	bf0c      	ite	eq
 80125bc:	2301      	moveq	r3, #1
 80125be:	2300      	movne	r3, #0
 80125c0:	b2db      	uxtb	r3, r3
 80125c2:	4618      	mov	r0, r3
 80125c4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80125c8:	009b      	lsls	r3, r3, #2
 80125ca:	4a17      	ldr	r2, [pc, #92]	; (8012628 <Update_Title+0xa4>)
 80125cc:	4413      	add	r3, r2
 80125ce:	4602      	mov	r2, r0
 80125d0:	f240 102f 	movw	r0, #303	; 0x12f
 80125d4:	f7fb fbba 	bl	800dd4c <DispStr8x14>
    if(Current == i)
 80125d8:	4b12      	ldr	r3, [pc, #72]	; (8012624 <Update_Title+0xa0>)
 80125da:	f9b3 3000 	ldrsh.w	r3, [r3]
 80125de:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80125e2:	429a      	cmp	r2, r3
 80125e4:	d10a      	bne.n	80125fc <Update_Title+0x78>
    {
        Draw_4Point(T_X-2, TITLE_Y[i], 2, Font8x14_H);
 80125e6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80125ea:	4a0d      	ldr	r2, [pc, #52]	; (8012620 <Update_Title+0x9c>)
 80125ec:	5cd3      	ldrb	r3, [r2, r3]
 80125ee:	b219      	sxth	r1, r3
 80125f0:	230e      	movs	r3, #14
 80125f2:	2202      	movs	r2, #2
 80125f4:	f240 102f 	movw	r0, #303	; 0x12f
 80125f8:	f7ff ff5c 	bl	80124b4 <Draw_4Point>
  for(i=0; i<8; i++)
 80125fc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8012600:	b29b      	uxth	r3, r3
 8012602:	3301      	adds	r3, #1
 8012604:	b29b      	uxth	r3, r3
 8012606:	80fb      	strh	r3, [r7, #6]
 8012608:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801260c:	2b07      	cmp	r3, #7
 801260e:	ddbf      	ble.n	8012590 <Update_Title+0xc>
    }
  }
}
 8012610:	bf00      	nop
 8012612:	bf00      	nop
 8012614:	3708      	adds	r7, #8
 8012616:	46bd      	mov	sp, r7
 8012618:	bd80      	pop	{r7, pc}
 801261a:	bf00      	nop
 801261c:	08001f08 	.word	0x08001f08
 8012620:	08001f38 	.word	0x08001f38
 8012624:	200007a6 	.word	0x200007a6
 8012628:	08001f18 	.word	0x08001f18

0801262c <Update_Blink>:

/*******************************************************************************
 Update_Blink:
*******************************************************************************/
void Update_Blink(void)
{
 801262c:	b590      	push	{r4, r7, lr}
 801262e:	b087      	sub	sp, #28
 8012630:	af02      	add	r7, sp, #8
  char* ptr;
  long Tmp;
  unsigned short i, Range = List[Y_RANGES].Val + 10*List[PROBEATT].Val;
 8012632:	4bbd      	ldr	r3, [pc, #756]	; (8012928 <Update_Blink+0x2fc>)
 8012634:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8012638:	b29a      	uxth	r2, r3
 801263a:	4bbb      	ldr	r3, [pc, #748]	; (8012928 <Update_Blink+0x2fc>)
 801263c:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8012640:	b29b      	uxth	r3, r3
 8012642:	4619      	mov	r1, r3
 8012644:	0089      	lsls	r1, r1, #2
 8012646:	440b      	add	r3, r1
 8012648:	005b      	lsls	r3, r3, #1
 801264a:	b29b      	uxth	r3, r3
 801264c:	4413      	add	r3, r2
 801264e:	81fb      	strh	r3, [r7, #14]

  i = MenuNow[Current];
 8012650:	4bb6      	ldr	r3, [pc, #728]	; (801292c <Update_Blink+0x300>)
 8012652:	f9b3 3000 	ldrsh.w	r3, [r3]
 8012656:	461a      	mov	r2, r3
 8012658:	4bb5      	ldr	r3, [pc, #724]	; (8012930 <Update_Blink+0x304>)
 801265a:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 801265e:	81bb      	strh	r3, [r7, #12]
  ptr = (char*)(List[i].PTR +(List[i].Val)*6);
 8012660:	89bb      	ldrh	r3, [r7, #12]
 8012662:	4ab1      	ldr	r2, [pc, #708]	; (8012928 <Update_Blink+0x2fc>)
 8012664:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 8012668:	89bb      	ldrh	r3, [r7, #12]
 801266a:	49af      	ldr	r1, [pc, #700]	; (8012928 <Update_Blink+0x2fc>)
 801266c:	00db      	lsls	r3, r3, #3
 801266e:	440b      	add	r3, r1
 8012670:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8012674:	4619      	mov	r1, r3
 8012676:	460b      	mov	r3, r1
 8012678:	005b      	lsls	r3, r3, #1
 801267a:	440b      	add	r3, r1
 801267c:	005b      	lsls	r3, r3, #1
 801267e:	4413      	add	r3, r2
 8012680:	60bb      	str	r3, [r7, #8]
  if(Blink == BLINK)
 8012682:	4bac      	ldr	r3, [pc, #688]	; (8012934 <Update_Blink+0x308>)
 8012684:	781b      	ldrb	r3, [r3, #0]
 8012686:	b2db      	uxtb	r3, r3
 8012688:	2b01      	cmp	r3, #1
 801268a:	f040 86ca 	bne.w	8013422 <Update_Blink+0xdf6>
  {
    Blink = 0;
 801268e:	4ba9      	ldr	r3, [pc, #676]	; (8012934 <Update_Blink+0x308>)
 8012690:	2200      	movs	r2, #0
 8012692:	701a      	strb	r2, [r3, #0]
    List[MenuNow[ME]].Flg |= UPD; //
 8012694:	4ba6      	ldr	r3, [pc, #664]	; (8012930 <Update_Blink+0x304>)
 8012696:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 801269a:	4aa3      	ldr	r2, [pc, #652]	; (8012928 <Update_Blink+0x2fc>)
 801269c:	00db      	lsls	r3, r3, #3
 801269e:	4413      	add	r3, r2
 80126a0:	799b      	ldrb	r3, [r3, #6]
 80126a2:	4aa3      	ldr	r2, [pc, #652]	; (8012930 <Update_Blink+0x304>)
 80126a4:	f9b2 2006 	ldrsh.w	r2, [r2, #6]
 80126a8:	4610      	mov	r0, r2
 80126aa:	f043 0320 	orr.w	r3, r3, #32
 80126ae:	b2d9      	uxtb	r1, r3
 80126b0:	4a9d      	ldr	r2, [pc, #628]	; (8012928 <Update_Blink+0x2fc>)
 80126b2:	00c3      	lsls	r3, r0, #3
 80126b4:	4413      	add	r3, r2
 80126b6:	460a      	mov	r2, r1
 80126b8:	719a      	strb	r2, [r3, #6]
    switch(i)
 80126ba:	89bb      	ldrh	r3, [r7, #12]
 80126bc:	2b29      	cmp	r3, #41	; 0x29
 80126be:	f200 86aa 	bhi.w	8013416 <Update_Blink+0xdea>
 80126c2:	a201      	add	r2, pc, #4	; (adr r2, 80126c8 <Update_Blink+0x9c>)
 80126c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80126c8:	08012833 	.word	0x08012833
 80126cc:	08012833 	.word	0x08012833
 80126d0:	08012833 	.word	0x08012833
 80126d4:	080128c7 	.word	0x080128c7
 80126d8:	080128f9 	.word	0x080128f9
 80126dc:	080128f9 	.word	0x080128f9
 80126e0:	08012a2f 	.word	0x08012a2f
 80126e4:	08012a8d 	.word	0x08012a8d
 80126e8:	08012ae5 	.word	0x08012ae5
 80126ec:	08012b17 	.word	0x08012b17
 80126f0:	08012b83 	.word	0x08012b83
 80126f4:	08012b83 	.word	0x08012b83
 80126f8:	08012ce5 	.word	0x08012ce5
 80126fc:	08012d3f 	.word	0x08012d3f
 8012700:	08012d9d 	.word	0x08012d9d
 8012704:	08012e6d 	.word	0x08012e6d
 8012708:	08012e97 	.word	0x08012e97
 801270c:	08012d9d 	.word	0x08012d9d
 8012710:	08012ec5 	.word	0x08012ec5
 8012714:	08013417 	.word	0x08013417
 8012718:	08013417 	.word	0x08013417
 801271c:	08013417 	.word	0x08013417
 8012720:	08013417 	.word	0x08013417
 8012724:	08013417 	.word	0x08013417
 8012728:	08013417 	.word	0x08013417
 801272c:	08013417 	.word	0x08013417
 8012730:	08012f3d 	.word	0x08012f3d
 8012734:	08012fb9 	.word	0x08012fb9
 8012738:	08012fe7 	.word	0x08012fe7
 801273c:	08012771 	.word	0x08012771
 8012740:	08012771 	.word	0x08012771
 8012744:	08012771 	.word	0x08012771
 8012748:	08012771 	.word	0x08012771
 801274c:	08012771 	.word	0x08012771
 8012750:	08012771 	.word	0x08012771
 8012754:	08012771 	.word	0x08012771
 8012758:	08013063 	.word	0x08013063
 801275c:	080130fd 	.word	0x080130fd
 8012760:	080131c1 	.word	0x080131c1
 8012764:	0801326f 	.word	0x0801326f
 8012768:	08013309 	.word	0x08013309
 801276c:	08013377 	.word	0x08013377
    case SAVE_BUF:
    case SAVE_CSV:
    case SAVE_SVG:
    case LOAD_DAT:
    case LOAD_BUF:
      SetColor(GRY, TCOLOR[FN]);
 8012770:	f64f 4310 	movw	r3, #64528	; 0xfc10
 8012774:	4619      	mov	r1, r3
 8012776:	f643 10e7 	movw	r0, #14823	; 0x39e7
 801277a:	f7fb fb3f 	bl	800ddfc <SetColor>
      u8ToDec3(NumStr, List[i].Val);
 801277e:	89bb      	ldrh	r3, [r7, #12]
 8012780:	4a69      	ldr	r2, [pc, #420]	; (8012928 <Update_Blink+0x2fc>)
 8012782:	00db      	lsls	r3, r3, #3
 8012784:	4413      	add	r3, r2
 8012786:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801278a:	b2db      	uxtb	r3, r3
 801278c:	4619      	mov	r1, r3
 801278e:	486a      	ldr	r0, [pc, #424]	; (8012938 <Update_Blink+0x30c>)
 8012790:	f7ff f9bc 	bl	8011b0c <u8ToDec3>
      Draw_Circle_D(Twink, S_X[i]-3, LABLE_Y, 11, 0, 6*11);
 8012794:	4b69      	ldr	r3, [pc, #420]	; (801293c <Update_Blink+0x310>)
 8012796:	781b      	ldrb	r3, [r3, #0]
 8012798:	b2d8      	uxtb	r0, r3
 801279a:	89bb      	ldrh	r3, [r7, #12]
 801279c:	4a68      	ldr	r2, [pc, #416]	; (8012940 <Update_Blink+0x314>)
 801279e:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 80127a2:	b29b      	uxth	r3, r3
 80127a4:	3b03      	subs	r3, #3
 80127a6:	b29b      	uxth	r3, r3
 80127a8:	b219      	sxth	r1, r3
 80127aa:	2342      	movs	r3, #66	; 0x42
 80127ac:	9301      	str	r3, [sp, #4]
 80127ae:	2300      	movs	r3, #0
 80127b0:	9300      	str	r3, [sp, #0]
 80127b2:	230b      	movs	r3, #11
 80127b4:	2203      	movs	r2, #3
 80127b6:	f7fb fc0f 	bl	800dfd8 <Draw_Circle_D>
      DispStr(S_X[i],    LABLE_Y, Twink, ((i > SAVE_SVG)? "Load" : "Save"));//0513
 80127ba:	89bb      	ldrh	r3, [r7, #12]
 80127bc:	4a60      	ldr	r2, [pc, #384]	; (8012940 <Update_Blink+0x314>)
 80127be:	f932 0013 	ldrsh.w	r0, [r2, r3, lsl #1]
 80127c2:	4b5e      	ldr	r3, [pc, #376]	; (801293c <Update_Blink+0x310>)
 80127c4:	781b      	ldrb	r3, [r3, #0]
 80127c6:	b2da      	uxtb	r2, r3
 80127c8:	89bb      	ldrh	r3, [r7, #12]
 80127ca:	2b21      	cmp	r3, #33	; 0x21
 80127cc:	d901      	bls.n	80127d2 <Update_Blink+0x1a6>
 80127ce:	4b5d      	ldr	r3, [pc, #372]	; (8012944 <Update_Blink+0x318>)
 80127d0:	e000      	b.n	80127d4 <Update_Blink+0x1a8>
 80127d2:	4b5d      	ldr	r3, [pc, #372]	; (8012948 <Update_Blink+0x31c>)
 80127d4:	2103      	movs	r1, #3
 80127d6:	f7fb fb29 	bl	800de2c <DispStr>
      DispStr(S_X[i]+24, LABLE_Y, Twink, (char *)NumStr);
 80127da:	89bb      	ldrh	r3, [r7, #12]
 80127dc:	4a58      	ldr	r2, [pc, #352]	; (8012940 <Update_Blink+0x314>)
 80127de:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 80127e2:	b29b      	uxth	r3, r3
 80127e4:	3318      	adds	r3, #24
 80127e6:	b29b      	uxth	r3, r3
 80127e8:	b218      	sxth	r0, r3
 80127ea:	4b54      	ldr	r3, [pc, #336]	; (801293c <Update_Blink+0x310>)
 80127ec:	781b      	ldrb	r3, [r3, #0]
 80127ee:	b2da      	uxtb	r2, r3
 80127f0:	4b51      	ldr	r3, [pc, #324]	; (8012938 <Update_Blink+0x30c>)
 80127f2:	2103      	movs	r1, #3
 80127f4:	f7fb fb1a 	bl	800de2c <DispStr>
      DispStr(S_X[i]+42, LABLE_Y, Twink, (List[i].PTR +(i - SAVE_BMP)*6));
 80127f8:	89bb      	ldrh	r3, [r7, #12]
 80127fa:	4a51      	ldr	r2, [pc, #324]	; (8012940 <Update_Blink+0x314>)
 80127fc:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8012800:	b29b      	uxth	r3, r3
 8012802:	332a      	adds	r3, #42	; 0x2a
 8012804:	b29b      	uxth	r3, r3
 8012806:	b218      	sxth	r0, r3
 8012808:	4b4c      	ldr	r3, [pc, #304]	; (801293c <Update_Blink+0x310>)
 801280a:	781b      	ldrb	r3, [r3, #0]
 801280c:	b2dc      	uxtb	r4, r3
 801280e:	89bb      	ldrh	r3, [r7, #12]
 8012810:	4a45      	ldr	r2, [pc, #276]	; (8012928 <Update_Blink+0x2fc>)
 8012812:	f852 1033 	ldr.w	r1, [r2, r3, lsl #3]
 8012816:	89bb      	ldrh	r3, [r7, #12]
 8012818:	f1a3 021d 	sub.w	r2, r3, #29
 801281c:	4613      	mov	r3, r2
 801281e:	005b      	lsls	r3, r3, #1
 8012820:	4413      	add	r3, r2
 8012822:	005b      	lsls	r3, r3, #1
 8012824:	440b      	add	r3, r1
 8012826:	4622      	mov	r2, r4
 8012828:	2103      	movs	r1, #3
 801282a:	f7fb faff 	bl	800de2c <DispStr>
      break;
 801282e:	f000 bdf2 	b.w	8013416 <Update_Blink+0xdea>

    case Y_RANGES:
    case COUPLING:
    case PROBEATT:
      SetColor(GRY, TCOLOR[YN]);
 8012832:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8012836:	4619      	mov	r1, r3
 8012838:	f643 10e7 	movw	r0, #14823	; 0x39e7
 801283c:	f7fb fade 	bl	800ddfc <SetColor>
      Draw_Circle_D(Twink, S_X[Y_RANGES]-3, TITLE_Y_POS, 11, 0, 6*7);
 8012840:	4b3e      	ldr	r3, [pc, #248]	; (801293c <Update_Blink+0x310>)
 8012842:	781b      	ldrb	r3, [r3, #0]
 8012844:	b2d8      	uxtb	r0, r3
 8012846:	232f      	movs	r3, #47	; 0x2f
 8012848:	b29b      	uxth	r3, r3
 801284a:	3b03      	subs	r3, #3
 801284c:	b29b      	uxth	r3, r3
 801284e:	b219      	sxth	r1, r3
 8012850:	232a      	movs	r3, #42	; 0x2a
 8012852:	9301      	str	r3, [sp, #4]
 8012854:	2300      	movs	r3, #0
 8012856:	9300      	str	r3, [sp, #0]
 8012858:	230b      	movs	r3, #11
 801285a:	22e1      	movs	r2, #225	; 0xe1
 801285c:	f7fb fbbc 	bl	800dfd8 <Draw_Circle_D>
      DispStr(S_X[Y_RANGES], TITLE_Y_POS, Twink, (List[Y_RANGES].PTR +(Range)*6));
 8012860:	242f      	movs	r4, #47	; 0x2f
 8012862:	4b36      	ldr	r3, [pc, #216]	; (801293c <Update_Blink+0x310>)
 8012864:	781b      	ldrb	r3, [r3, #0]
 8012866:	b2d8      	uxtb	r0, r3
 8012868:	4b2f      	ldr	r3, [pc, #188]	; (8012928 <Update_Blink+0x2fc>)
 801286a:	6819      	ldr	r1, [r3, #0]
 801286c:	89fa      	ldrh	r2, [r7, #14]
 801286e:	4613      	mov	r3, r2
 8012870:	005b      	lsls	r3, r3, #1
 8012872:	4413      	add	r3, r2
 8012874:	005b      	lsls	r3, r3, #1
 8012876:	440b      	add	r3, r1
 8012878:	4602      	mov	r2, r0
 801287a:	21e1      	movs	r1, #225	; 0xe1
 801287c:	4620      	mov	r0, r4
 801287e:	f7fb fad5 	bl	800de2c <DispStr>
      DispStr(S_X[COUPLING], TITLE_Y_POS, Twink, (List[COUPLING].PTR +(List[COUPLING].Val)*6));
 8012882:	2047      	movs	r0, #71	; 0x47
 8012884:	4b2d      	ldr	r3, [pc, #180]	; (801293c <Update_Blink+0x310>)
 8012886:	781b      	ldrb	r3, [r3, #0]
 8012888:	b2d9      	uxtb	r1, r3
 801288a:	4b27      	ldr	r3, [pc, #156]	; (8012928 <Update_Blink+0x2fc>)
 801288c:	689a      	ldr	r2, [r3, #8]
 801288e:	4b26      	ldr	r3, [pc, #152]	; (8012928 <Update_Blink+0x2fc>)
 8012890:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8012894:	461c      	mov	r4, r3
 8012896:	4623      	mov	r3, r4
 8012898:	005b      	lsls	r3, r3, #1
 801289a:	4423      	add	r3, r4
 801289c:	005b      	lsls	r3, r3, #1
 801289e:	4413      	add	r3, r2
 80128a0:	460a      	mov	r2, r1
 80128a2:	21e1      	movs	r1, #225	; 0xe1
 80128a4:	f7fb fac2 	bl	800de2c <DispStr>
      DispStr10x14(S_X[PROBEATT], TITLE_Y_POS, PRN+SYMB,(List[PROBEATT].Val?("A"):("B")));
 80128a8:	2020      	movs	r0, #32
 80128aa:	4b1f      	ldr	r3, [pc, #124]	; (8012928 <Update_Blink+0x2fc>)
 80128ac:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 80128b0:	2b00      	cmp	r3, #0
 80128b2:	d001      	beq.n	80128b8 <Update_Blink+0x28c>
 80128b4:	4b25      	ldr	r3, [pc, #148]	; (801294c <Update_Blink+0x320>)
 80128b6:	e000      	b.n	80128ba <Update_Blink+0x28e>
 80128b8:	4b25      	ldr	r3, [pc, #148]	; (8012950 <Update_Blink+0x324>)
 80128ba:	2210      	movs	r2, #16
 80128bc:	21e1      	movs	r1, #225	; 0xe1
 80128be:	f7fb fd1d 	bl	800e2fc <DispStr10x14>
      break;
 80128c2:	f000 bda8 	b.w	8013416 <Update_Blink+0xdea>

    case V0_POSI:
      if(Twink) ParamTab[P1F] |=  D_HID;
 80128c6:	4b1d      	ldr	r3, [pc, #116]	; (801293c <Update_Blink+0x310>)
 80128c8:	781b      	ldrb	r3, [r3, #0]
 80128ca:	b2db      	uxtb	r3, r3
 80128cc:	2b00      	cmp	r3, #0
 80128ce:	d009      	beq.n	80128e4 <Update_Blink+0x2b8>
 80128d0:	4b20      	ldr	r3, [pc, #128]	; (8012954 <Update_Blink+0x328>)
 80128d2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80128d6:	f043 0301 	orr.w	r3, r3, #1
 80128da:	b21a      	sxth	r2, r3
 80128dc:	4b1d      	ldr	r3, [pc, #116]	; (8012954 <Update_Blink+0x328>)
 80128de:	801a      	strh	r2, [r3, #0]
      else      ParamTab[P1F] &= ~D_HID;
      break;
 80128e0:	f000 bd99 	b.w	8013416 <Update_Blink+0xdea>
      else      ParamTab[P1F] &= ~D_HID;
 80128e4:	4b1b      	ldr	r3, [pc, #108]	; (8012954 <Update_Blink+0x328>)
 80128e6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80128ea:	f023 0301 	bic.w	r3, r3, #1
 80128ee:	b21a      	sxth	r2, r3
 80128f0:	4b18      	ldr	r3, [pc, #96]	; (8012954 <Update_Blink+0x328>)
 80128f2:	801a      	strh	r2, [r3, #0]
      break;
 80128f4:	f000 bd8f 	b.w	8013416 <Update_Blink+0xdea>

    case V1_POSI:
    case V2_POSI:
      Tmp = (i == V1_POSI)? V1F : V2F;
 80128f8:	89bb      	ldrh	r3, [r7, #12]
 80128fa:	2b04      	cmp	r3, #4
 80128fc:	d101      	bne.n	8012902 <Update_Blink+0x2d6>
 80128fe:	2305      	movs	r3, #5
 8012900:	e000      	b.n	8012904 <Update_Blink+0x2d8>
 8012902:	2306      	movs	r3, #6
 8012904:	607b      	str	r3, [r7, #4]
      if(Twink) ParamTab[Tmp] |=  D_HID;
 8012906:	4b0d      	ldr	r3, [pc, #52]	; (801293c <Update_Blink+0x310>)
 8012908:	781b      	ldrb	r3, [r3, #0]
 801290a:	b2db      	uxtb	r3, r3
 801290c:	2b00      	cmp	r3, #0
 801290e:	d023      	beq.n	8012958 <Update_Blink+0x32c>
 8012910:	4a10      	ldr	r2, [pc, #64]	; (8012954 <Update_Blink+0x328>)
 8012912:	687b      	ldr	r3, [r7, #4]
 8012914:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8012918:	f043 0301 	orr.w	r3, r3, #1
 801291c:	b219      	sxth	r1, r3
 801291e:	4a0d      	ldr	r2, [pc, #52]	; (8012954 <Update_Blink+0x328>)
 8012920:	687b      	ldr	r3, [r7, #4]
 8012922:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8012926:	e022      	b.n	801296e <Update_Blink+0x342>
 8012928:	2000029c 	.word	0x2000029c
 801292c:	200007a6 	.word	0x200007a6
 8012930:	2000053c 	.word	0x2000053c
 8012934:	20000a39 	.word	0x20000a39
 8012938:	20002844 	.word	0x20002844
 801293c:	20000780 	.word	0x20000780
 8012940:	0800215c 	.word	0x0800215c
 8012944:	08000948 	.word	0x08000948
 8012948:	08000950 	.word	0x08000950
 801294c:	08000958 	.word	0x08000958
 8012950:	0800095c 	.word	0x0800095c
 8012954:	20000144 	.word	0x20000144
      else      ParamTab[Tmp] &= ~D_HID;
 8012958:	4ab1      	ldr	r2, [pc, #708]	; (8012c20 <Update_Blink+0x5f4>)
 801295a:	687b      	ldr	r3, [r7, #4]
 801295c:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8012960:	f023 0301 	bic.w	r3, r3, #1
 8012964:	b219      	sxth	r1, r3
 8012966:	4aae      	ldr	r2, [pc, #696]	; (8012c20 <Update_Blink+0x5f4>)
 8012968:	687b      	ldr	r3, [r7, #4]
 801296a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
      Tmp  =(ParamTab[V1x2]- ParamTab[V2x2])/2;         // V2 - V1 ��ֵ
 801296e:	4bac      	ldr	r3, [pc, #688]	; (8012c20 <Update_Blink+0x5f4>)
 8012970:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 8012974:	461a      	mov	r2, r3
 8012976:	4baa      	ldr	r3, [pc, #680]	; (8012c20 <Update_Blink+0x5f4>)
 8012978:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 801297c:	1ad3      	subs	r3, r2, r3
 801297e:	0fda      	lsrs	r2, r3, #31
 8012980:	4413      	add	r3, r2
 8012982:	105b      	asrs	r3, r3, #1
 8012984:	607b      	str	r3, [r7, #4]
      Tmp *= X_SCALE[Range]* Exp(V_SCALE[Range]);
 8012986:	89fb      	ldrh	r3, [r7, #14]
 8012988:	4aa6      	ldr	r2, [pc, #664]	; (8012c24 <Update_Blink+0x5f8>)
 801298a:	5cd3      	ldrb	r3, [r2, r3]
 801298c:	461c      	mov	r4, r3
 801298e:	89fb      	ldrh	r3, [r7, #14]
 8012990:	4aa5      	ldr	r2, [pc, #660]	; (8012c28 <Update_Blink+0x5fc>)
 8012992:	5cd3      	ldrb	r3, [r2, r3]
 8012994:	4618      	mov	r0, r3
 8012996:	f7ff fa1d 	bl	8011dd4 <Exp>
 801299a:	4603      	mov	r3, r0
 801299c:	fb03 f204 	mul.w	r2, r3, r4
 80129a0:	687b      	ldr	r3, [r7, #4]
 80129a2:	fb02 f303 	mul.w	r3, r2, r3
 80129a6:	607b      	str	r3, [r7, #4]
      Value2Str(NumStr, Tmp, V[0], 3, UNSIGN);
 80129a8:	2301      	movs	r3, #1
 80129aa:	9300      	str	r3, [sp, #0]
 80129ac:	2303      	movs	r3, #3
 80129ae:	4a9f      	ldr	r2, [pc, #636]	; (8012c2c <Update_Blink+0x600>)
 80129b0:	6879      	ldr	r1, [r7, #4]
 80129b2:	489f      	ldr	r0, [pc, #636]	; (8012c30 <Update_Blink+0x604>)
 80129b4:	f7ff f912 	bl	8011bdc <Value2Str>
      SetColor(GRY, TCOLOR[YN]);
 80129b8:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 80129bc:	4619      	mov	r1, r3
 80129be:	f643 10e7 	movw	r0, #14823	; 0x39e7
 80129c2:	f7fb fa1b 	bl	800ddfc <SetColor>
      Draw_Circle_D(Twink, S_X[V1_POSI]-3, LABLE_Y, 11, 0, 6*9);
 80129c6:	4b9b      	ldr	r3, [pc, #620]	; (8012c34 <Update_Blink+0x608>)
 80129c8:	781b      	ldrb	r3, [r3, #0]
 80129ca:	b2d8      	uxtb	r0, r3
 80129cc:	2307      	movs	r3, #7
 80129ce:	b29b      	uxth	r3, r3
 80129d0:	3b03      	subs	r3, #3
 80129d2:	b29b      	uxth	r3, r3
 80129d4:	b219      	sxth	r1, r3
 80129d6:	2336      	movs	r3, #54	; 0x36
 80129d8:	9301      	str	r3, [sp, #4]
 80129da:	2300      	movs	r3, #0
 80129dc:	9300      	str	r3, [sp, #0]
 80129de:	230b      	movs	r3, #11
 80129e0:	2203      	movs	r2, #3
 80129e2:	f7fb faf9 	bl	800dfd8 <Draw_Circle_D>
      DispStr(S_X[V1_POSI]+0*6, LABLE_Y, Twink+SYMB, "]");
 80129e6:	2007      	movs	r0, #7
 80129e8:	4b92      	ldr	r3, [pc, #584]	; (8012c34 <Update_Blink+0x608>)
 80129ea:	781b      	ldrb	r3, [r3, #0]
 80129ec:	b2db      	uxtb	r3, r3
 80129ee:	3310      	adds	r3, #16
 80129f0:	b2da      	uxtb	r2, r3
 80129f2:	4b91      	ldr	r3, [pc, #580]	; (8012c38 <Update_Blink+0x60c>)
 80129f4:	2103      	movs	r1, #3
 80129f6:	f7fb fa19 	bl	800de2c <DispStr>
      DispStr(S_X[V1_POSI]+1*6, LABLE_Y, Twink,      "V:      ");
 80129fa:	2307      	movs	r3, #7
 80129fc:	b29b      	uxth	r3, r3
 80129fe:	3306      	adds	r3, #6
 8012a00:	b29b      	uxth	r3, r3
 8012a02:	b218      	sxth	r0, r3
 8012a04:	4b8b      	ldr	r3, [pc, #556]	; (8012c34 <Update_Blink+0x608>)
 8012a06:	781b      	ldrb	r3, [r3, #0]
 8012a08:	b2da      	uxtb	r2, r3
 8012a0a:	4b8c      	ldr	r3, [pc, #560]	; (8012c3c <Update_Blink+0x610>)
 8012a0c:	2103      	movs	r1, #3
 8012a0e:	f7fb fa0d 	bl	800de2c <DispStr>
      DispStr(S_X[V1_POSI]+3*6, LABLE_Y, Twink, (char *)NumStr);
 8012a12:	2307      	movs	r3, #7
 8012a14:	b29b      	uxth	r3, r3
 8012a16:	3312      	adds	r3, #18
 8012a18:	b29b      	uxth	r3, r3
 8012a1a:	b218      	sxth	r0, r3
 8012a1c:	4b85      	ldr	r3, [pc, #532]	; (8012c34 <Update_Blink+0x608>)
 8012a1e:	781b      	ldrb	r3, [r3, #0]
 8012a20:	b2da      	uxtb	r2, r3
 8012a22:	4b83      	ldr	r3, [pc, #524]	; (8012c30 <Update_Blink+0x604>)
 8012a24:	2103      	movs	r1, #3
 8012a26:	f7fb fa01 	bl	800de2c <DispStr>
      break;
 8012a2a:	f000 bcf4 	b.w	8013416 <Update_Blink+0xdea>

    case YN_TYPE:
      if(Twink) ParamTab[V1F] |=  D_HID;
 8012a2e:	4b81      	ldr	r3, [pc, #516]	; (8012c34 <Update_Blink+0x608>)
 8012a30:	781b      	ldrb	r3, [r3, #0]
 8012a32:	b2db      	uxtb	r3, r3
 8012a34:	2b00      	cmp	r3, #0
 8012a36:	d008      	beq.n	8012a4a <Update_Blink+0x41e>
 8012a38:	4b79      	ldr	r3, [pc, #484]	; (8012c20 <Update_Blink+0x5f4>)
 8012a3a:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8012a3e:	f043 0301 	orr.w	r3, r3, #1
 8012a42:	b21a      	sxth	r2, r3
 8012a44:	4b76      	ldr	r3, [pc, #472]	; (8012c20 <Update_Blink+0x5f4>)
 8012a46:	815a      	strh	r2, [r3, #10]
 8012a48:	e007      	b.n	8012a5a <Update_Blink+0x42e>
      else      ParamTab[V1F] &= ~D_HID;
 8012a4a:	4b75      	ldr	r3, [pc, #468]	; (8012c20 <Update_Blink+0x5f4>)
 8012a4c:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8012a50:	f023 0301 	bic.w	r3, r3, #1
 8012a54:	b21a      	sxth	r2, r3
 8012a56:	4b72      	ldr	r3, [pc, #456]	; (8012c20 <Update_Blink+0x5f4>)
 8012a58:	815a      	strh	r2, [r3, #10]
      if(Twink) ParamTab[V2F] |=  D_HID;
 8012a5a:	4b76      	ldr	r3, [pc, #472]	; (8012c34 <Update_Blink+0x608>)
 8012a5c:	781b      	ldrb	r3, [r3, #0]
 8012a5e:	b2db      	uxtb	r3, r3
 8012a60:	2b00      	cmp	r3, #0
 8012a62:	d009      	beq.n	8012a78 <Update_Blink+0x44c>
 8012a64:	4b6e      	ldr	r3, [pc, #440]	; (8012c20 <Update_Blink+0x5f4>)
 8012a66:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8012a6a:	f043 0301 	orr.w	r3, r3, #1
 8012a6e:	b21a      	sxth	r2, r3
 8012a70:	4b6b      	ldr	r3, [pc, #428]	; (8012c20 <Update_Blink+0x5f4>)
 8012a72:	819a      	strh	r2, [r3, #12]
      else      ParamTab[V2F] &= ~D_HID;
      break;
 8012a74:	f000 bccf 	b.w	8013416 <Update_Blink+0xdea>
      else      ParamTab[V2F] &= ~D_HID;
 8012a78:	4b69      	ldr	r3, [pc, #420]	; (8012c20 <Update_Blink+0x5f4>)
 8012a7a:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8012a7e:	f023 0301 	bic.w	r3, r3, #1
 8012a82:	b21a      	sxth	r2, r3
 8012a84:	4b66      	ldr	r3, [pc, #408]	; (8012c20 <Update_Blink+0x5f4>)
 8012a86:	819a      	strh	r2, [r3, #12]
      break;
 8012a88:	f000 bcc5 	b.w	8013416 <Update_Blink+0xdea>

    case TIM_BASE:
      SetColor(GRY, TCOLOR[XN]);
 8012a8c:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8012a90:	4619      	mov	r1, r3
 8012a92:	f643 10e7 	movw	r0, #14823	; 0x39e7
 8012a96:	f7fb f9b1 	bl	800ddfc <SetColor>
      Draw_Circle_D(Twink, S_X[i]-3, TITLE_Y_POS, 11, 2, 6*5);
 8012a9a:	4b66      	ldr	r3, [pc, #408]	; (8012c34 <Update_Blink+0x608>)
 8012a9c:	781b      	ldrb	r3, [r3, #0]
 8012a9e:	b2d8      	uxtb	r0, r3
 8012aa0:	89bb      	ldrh	r3, [r7, #12]
 8012aa2:	4a67      	ldr	r2, [pc, #412]	; (8012c40 <Update_Blink+0x614>)
 8012aa4:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8012aa8:	b29b      	uxth	r3, r3
 8012aaa:	3b03      	subs	r3, #3
 8012aac:	b29b      	uxth	r3, r3
 8012aae:	b219      	sxth	r1, r3
 8012ab0:	231e      	movs	r3, #30
 8012ab2:	9301      	str	r3, [sp, #4]
 8012ab4:	2302      	movs	r3, #2
 8012ab6:	9300      	str	r3, [sp, #0]
 8012ab8:	230b      	movs	r3, #11
 8012aba:	22e1      	movs	r2, #225	; 0xe1
 8012abc:	f7fb fa8c 	bl	800dfd8 <Draw_Circle_D>
      DispStr(S_X[i], TITLE_Y_POS, Twink, TimeBase_Str[List[TIM_BASE].Val]);
 8012ac0:	89bb      	ldrh	r3, [r7, #12]
 8012ac2:	4a5f      	ldr	r2, [pc, #380]	; (8012c40 <Update_Blink+0x614>)
 8012ac4:	f932 0013 	ldrsh.w	r0, [r2, r3, lsl #1]
 8012ac8:	4b5a      	ldr	r3, [pc, #360]	; (8012c34 <Update_Blink+0x608>)
 8012aca:	781b      	ldrb	r3, [r3, #0]
 8012acc:	b2da      	uxtb	r2, r3
 8012ace:	4b5d      	ldr	r3, [pc, #372]	; (8012c44 <Update_Blink+0x618>)
 8012ad0:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8012ad4:	00db      	lsls	r3, r3, #3
 8012ad6:	495c      	ldr	r1, [pc, #368]	; (8012c48 <Update_Blink+0x61c>)
 8012ad8:	440b      	add	r3, r1
 8012ada:	21e1      	movs	r1, #225	; 0xe1
 8012adc:	f7fb f9a6 	bl	800de2c <DispStr>
      break;
 8012ae0:	f000 bc99 	b.w	8013416 <Update_Blink+0xdea>

    case VIEWPOSI:
      if(Twink) ParamTab[T0F] |=  D_HID;
 8012ae4:	4b53      	ldr	r3, [pc, #332]	; (8012c34 <Update_Blink+0x608>)
 8012ae6:	781b      	ldrb	r3, [r3, #0]
 8012ae8:	b2db      	uxtb	r3, r3
 8012aea:	2b00      	cmp	r3, #0
 8012aec:	d009      	beq.n	8012b02 <Update_Blink+0x4d6>
 8012aee:	4b4c      	ldr	r3, [pc, #304]	; (8012c20 <Update_Blink+0x5f4>)
 8012af0:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8012af4:	f043 0301 	orr.w	r3, r3, #1
 8012af8:	b21a      	sxth	r2, r3
 8012afa:	4b49      	ldr	r3, [pc, #292]	; (8012c20 <Update_Blink+0x5f4>)
 8012afc:	81da      	strh	r2, [r3, #14]
      else      ParamTab[T0F] &= ~D_HID;
      break;
 8012afe:	f000 bc8a 	b.w	8013416 <Update_Blink+0xdea>
      else      ParamTab[T0F] &= ~D_HID;
 8012b02:	4b47      	ldr	r3, [pc, #284]	; (8012c20 <Update_Blink+0x5f4>)
 8012b04:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8012b08:	f023 0301 	bic.w	r3, r3, #1
 8012b0c:	b21a      	sxth	r2, r3
 8012b0e:	4b44      	ldr	r3, [pc, #272]	; (8012c20 <Update_Blink+0x5f4>)
 8012b10:	81da      	strh	r2, [r3, #14]
      break;
 8012b12:	f000 bc80 	b.w	8013416 <Update_Blink+0xdea>

    case SMPL_DPTH:
      SetColor(GRY, TCOLOR[XN]);
 8012b16:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8012b1a:	4619      	mov	r1, r3
 8012b1c:	f643 10e7 	movw	r0, #14823	; 0x39e7
 8012b20:	f7fb f96c 	bl	800ddfc <SetColor>
      Draw_Circle_D(Twink, S_X[SMPL_DPTH]-3, LABLE_Y, 11, 0, 6*11);
 8012b24:	4b43      	ldr	r3, [pc, #268]	; (8012c34 <Update_Blink+0x608>)
 8012b26:	781b      	ldrb	r3, [r3, #0]
 8012b28:	b2d8      	uxtb	r0, r3
 8012b2a:	23f8      	movs	r3, #248	; 0xf8
 8012b2c:	b29b      	uxth	r3, r3
 8012b2e:	3b03      	subs	r3, #3
 8012b30:	b29b      	uxth	r3, r3
 8012b32:	b219      	sxth	r1, r3
 8012b34:	2342      	movs	r3, #66	; 0x42
 8012b36:	9301      	str	r3, [sp, #4]
 8012b38:	2300      	movs	r3, #0
 8012b3a:	9300      	str	r3, [sp, #0]
 8012b3c:	230b      	movs	r3, #11
 8012b3e:	2203      	movs	r2, #3
 8012b40:	f7fb fa4a 	bl	800dfd8 <Draw_Circle_D>
      DispStr(S_X[SMPL_DPTH],    LABLE_Y,  Twink, "SmplDpth:  ");
 8012b44:	20f8      	movs	r0, #248	; 0xf8
 8012b46:	4b3b      	ldr	r3, [pc, #236]	; (8012c34 <Update_Blink+0x608>)
 8012b48:	781b      	ldrb	r3, [r3, #0]
 8012b4a:	b2da      	uxtb	r2, r3
 8012b4c:	4b3f      	ldr	r3, [pc, #252]	; (8012c4c <Update_Blink+0x620>)
 8012b4e:	2103      	movs	r1, #3
 8012b50:	f7fb f96c 	bl	800de2c <DispStr>
      DispStr(S_X[SMPL_DPTH]+6*9, LABLE_Y,  Twink, (char *)&D[List[SMPL_DPTH].Val]);
 8012b54:	23f8      	movs	r3, #248	; 0xf8
 8012b56:	b29b      	uxth	r3, r3
 8012b58:	3336      	adds	r3, #54	; 0x36
 8012b5a:	b29b      	uxth	r3, r3
 8012b5c:	b218      	sxth	r0, r3
 8012b5e:	4b35      	ldr	r3, [pc, #212]	; (8012c34 <Update_Blink+0x608>)
 8012b60:	781b      	ldrb	r3, [r3, #0]
 8012b62:	b2da      	uxtb	r2, r3
 8012b64:	4b37      	ldr	r3, [pc, #220]	; (8012c44 <Update_Blink+0x618>)
 8012b66:	f9b3 304c 	ldrsh.w	r3, [r3, #76]	; 0x4c
 8012b6a:	4619      	mov	r1, r3
 8012b6c:	460b      	mov	r3, r1
 8012b6e:	005b      	lsls	r3, r3, #1
 8012b70:	440b      	add	r3, r1
 8012b72:	005b      	lsls	r3, r3, #1
 8012b74:	4936      	ldr	r1, [pc, #216]	; (8012c50 <Update_Blink+0x624>)
 8012b76:	440b      	add	r3, r1
 8012b78:	2103      	movs	r1, #3
 8012b7a:	f7fb f957 	bl	800de2c <DispStr>
      break;
 8012b7e:	f000 bc4a 	b.w	8013416 <Update_Blink+0xdea>

    case T1_POSI:
    case T2_POSI:
      Tmp = (i == T1_POSI)? T1F : T2F;
 8012b82:	89bb      	ldrh	r3, [r7, #12]
 8012b84:	2b0a      	cmp	r3, #10
 8012b86:	d101      	bne.n	8012b8c <Update_Blink+0x560>
 8012b88:	2308      	movs	r3, #8
 8012b8a:	e000      	b.n	8012b8e <Update_Blink+0x562>
 8012b8c:	2309      	movs	r3, #9
 8012b8e:	607b      	str	r3, [r7, #4]
      if(Twink) ParamTab[Tmp] |=  D_HID;
 8012b90:	4b28      	ldr	r3, [pc, #160]	; (8012c34 <Update_Blink+0x608>)
 8012b92:	781b      	ldrb	r3, [r3, #0]
 8012b94:	b2db      	uxtb	r3, r3
 8012b96:	2b00      	cmp	r3, #0
 8012b98:	d00b      	beq.n	8012bb2 <Update_Blink+0x586>
 8012b9a:	4a21      	ldr	r2, [pc, #132]	; (8012c20 <Update_Blink+0x5f4>)
 8012b9c:	687b      	ldr	r3, [r7, #4]
 8012b9e:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8012ba2:	f043 0301 	orr.w	r3, r3, #1
 8012ba6:	b219      	sxth	r1, r3
 8012ba8:	4a1d      	ldr	r2, [pc, #116]	; (8012c20 <Update_Blink+0x5f4>)
 8012baa:	687b      	ldr	r3, [r7, #4]
 8012bac:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8012bb0:	e00a      	b.n	8012bc8 <Update_Blink+0x59c>
      else      ParamTab[Tmp] &= ~D_HID;
 8012bb2:	4a1b      	ldr	r2, [pc, #108]	; (8012c20 <Update_Blink+0x5f4>)
 8012bb4:	687b      	ldr	r3, [r7, #4]
 8012bb6:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8012bba:	f023 0301 	bic.w	r3, r3, #1
 8012bbe:	b219      	sxth	r1, r3
 8012bc0:	4a17      	ldr	r2, [pc, #92]	; (8012c20 <Update_Blink+0x5f4>)
 8012bc2:	687b      	ldr	r3, [r7, #4]
 8012bc4:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
      Tmp  = ParamTab[T2x1] - ParamTab[T1x1];          // T2 - T1 ��ֵ
 8012bc8:	4b15      	ldr	r3, [pc, #84]	; (8012c20 <Update_Blink+0x5f4>)
 8012bca:	f9b3 3026 	ldrsh.w	r3, [r3, #38]	; 0x26
 8012bce:	461a      	mov	r2, r3
 8012bd0:	4b13      	ldr	r3, [pc, #76]	; (8012c20 <Update_Blink+0x5f4>)
 8012bd2:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	; 0x24
 8012bd6:	1ad3      	subs	r3, r2, r3
 8012bd8:	607b      	str	r3, [r7, #4]
      Tmp *= B_SCALE[List[TIM_BASE].Val]* Exp(T_SCALE[List[TIM_BASE].Val]);
 8012bda:	4b1a      	ldr	r3, [pc, #104]	; (8012c44 <Update_Blink+0x618>)
 8012bdc:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8012be0:	461a      	mov	r2, r3
 8012be2:	4b1c      	ldr	r3, [pc, #112]	; (8012c54 <Update_Blink+0x628>)
 8012be4:	5c9b      	ldrb	r3, [r3, r2]
 8012be6:	461c      	mov	r4, r3
 8012be8:	4b16      	ldr	r3, [pc, #88]	; (8012c44 <Update_Blink+0x618>)
 8012bea:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8012bee:	461a      	mov	r2, r3
 8012bf0:	4b19      	ldr	r3, [pc, #100]	; (8012c58 <Update_Blink+0x62c>)
 8012bf2:	5c9b      	ldrb	r3, [r3, r2]
 8012bf4:	4618      	mov	r0, r3
 8012bf6:	f7ff f8ed 	bl	8011dd4 <Exp>
 8012bfa:	4603      	mov	r3, r0
 8012bfc:	fb03 f204 	mul.w	r2, r3, r4
 8012c00:	687b      	ldr	r3, [r7, #4]
 8012c02:	fb02 f303 	mul.w	r3, r2, r3
 8012c06:	607b      	str	r3, [r7, #4]
      if(Tmp>=0)
 8012c08:	687b      	ldr	r3, [r7, #4]
 8012c0a:	2b00      	cmp	r3, #0
 8012c0c:	db28      	blt.n	8012c60 <Update_Blink+0x634>
        Value2Str(NumStr, Tmp, T[0], 3, UNSIGN);
 8012c0e:	2301      	movs	r3, #1
 8012c10:	9300      	str	r3, [sp, #0]
 8012c12:	2303      	movs	r3, #3
 8012c14:	4a11      	ldr	r2, [pc, #68]	; (8012c5c <Update_Blink+0x630>)
 8012c16:	6879      	ldr	r1, [r7, #4]
 8012c18:	4805      	ldr	r0, [pc, #20]	; (8012c30 <Update_Blink+0x604>)
 8012c1a:	f7fe ffdf 	bl	8011bdc <Value2Str>
 8012c1e:	e027      	b.n	8012c70 <Update_Blink+0x644>
 8012c20:	20000144 	.word	0x20000144
 8012c24:	08002130 	.word	0x08002130
 8012c28:	08002108 	.word	0x08002108
 8012c2c:	08001d00 	.word	0x08001d00
 8012c30:	20002844 	.word	0x20002844
 8012c34:	20000780 	.word	0x20000780
 8012c38:	08000960 	.word	0x08000960
 8012c3c:	08000964 	.word	0x08000964
 8012c40:	0800215c 	.word	0x0800215c
 8012c44:	2000029c 	.word	0x2000029c
 8012c48:	200001d4 	.word	0x200001d4
 8012c4c:	08000970 	.word	0x08000970
 8012c50:	08001c4c 	.word	0x08001c4c
 8012c54:	0800211c 	.word	0x0800211c
 8012c58:	080020f4 	.word	0x080020f4
 8012c5c:	08001ce8 	.word	0x08001ce8
      else
        Value2Str(NumStr, Tmp, T[0], 3, SIGN);
 8012c60:	2300      	movs	r3, #0
 8012c62:	9300      	str	r3, [sp, #0]
 8012c64:	2303      	movs	r3, #3
 8012c66:	4aa3      	ldr	r2, [pc, #652]	; (8012ef4 <Update_Blink+0x8c8>)
 8012c68:	6879      	ldr	r1, [r7, #4]
 8012c6a:	48a3      	ldr	r0, [pc, #652]	; (8012ef8 <Update_Blink+0x8cc>)
 8012c6c:	f7fe ffb6 	bl	8011bdc <Value2Str>
      SetColor(GRY, TCOLOR[XN]);
 8012c70:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8012c74:	4619      	mov	r1, r3
 8012c76:	f643 10e7 	movw	r0, #14823	; 0x39e7
 8012c7a:	f7fb f8bf 	bl	800ddfc <SetColor>
      Draw_Circle_D(Twink, S_X[T1_POSI]-3, LABLE_Y, 11, 0, 6*9);
 8012c7e:	4b9f      	ldr	r3, [pc, #636]	; (8012efc <Update_Blink+0x8d0>)
 8012c80:	781b      	ldrb	r3, [r3, #0]
 8012c82:	b2d8      	uxtb	r0, r3
 8012c84:	2307      	movs	r3, #7
 8012c86:	b29b      	uxth	r3, r3
 8012c88:	3b03      	subs	r3, #3
 8012c8a:	b29b      	uxth	r3, r3
 8012c8c:	b219      	sxth	r1, r3
 8012c8e:	2336      	movs	r3, #54	; 0x36
 8012c90:	9301      	str	r3, [sp, #4]
 8012c92:	2300      	movs	r3, #0
 8012c94:	9300      	str	r3, [sp, #0]
 8012c96:	230b      	movs	r3, #11
 8012c98:	2203      	movs	r2, #3
 8012c9a:	f7fb f99d 	bl	800dfd8 <Draw_Circle_D>
      DispStr(S_X[T1_POSI]+0*6, LABLE_Y, Twink+SYMB, "]");
 8012c9e:	2007      	movs	r0, #7
 8012ca0:	4b96      	ldr	r3, [pc, #600]	; (8012efc <Update_Blink+0x8d0>)
 8012ca2:	781b      	ldrb	r3, [r3, #0]
 8012ca4:	b2db      	uxtb	r3, r3
 8012ca6:	3310      	adds	r3, #16
 8012ca8:	b2da      	uxtb	r2, r3
 8012caa:	4b95      	ldr	r3, [pc, #596]	; (8012f00 <Update_Blink+0x8d4>)
 8012cac:	2103      	movs	r1, #3
 8012cae:	f7fb f8bd 	bl	800de2c <DispStr>
      DispStr(S_X[T1_POSI]+1*6, LABLE_Y, Twink,      "T:      ");
 8012cb2:	2307      	movs	r3, #7
 8012cb4:	b29b      	uxth	r3, r3
 8012cb6:	3306      	adds	r3, #6
 8012cb8:	b29b      	uxth	r3, r3
 8012cba:	b218      	sxth	r0, r3
 8012cbc:	4b8f      	ldr	r3, [pc, #572]	; (8012efc <Update_Blink+0x8d0>)
 8012cbe:	781b      	ldrb	r3, [r3, #0]
 8012cc0:	b2da      	uxtb	r2, r3
 8012cc2:	4b90      	ldr	r3, [pc, #576]	; (8012f04 <Update_Blink+0x8d8>)
 8012cc4:	2103      	movs	r1, #3
 8012cc6:	f7fb f8b1 	bl	800de2c <DispStr>
      DispStr(S_X[T1_POSI]+3*6, LABLE_Y, Twink,      (char *)NumStr);
 8012cca:	2307      	movs	r3, #7
 8012ccc:	b29b      	uxth	r3, r3
 8012cce:	3312      	adds	r3, #18
 8012cd0:	b29b      	uxth	r3, r3
 8012cd2:	b218      	sxth	r0, r3
 8012cd4:	4b89      	ldr	r3, [pc, #548]	; (8012efc <Update_Blink+0x8d0>)
 8012cd6:	781b      	ldrb	r3, [r3, #0]
 8012cd8:	b2da      	uxtb	r2, r3
 8012cda:	4b87      	ldr	r3, [pc, #540]	; (8012ef8 <Update_Blink+0x8cc>)
 8012cdc:	2103      	movs	r1, #3
 8012cde:	f7fb f8a5 	bl	800de2c <DispStr>
      break;
 8012ce2:	e398      	b.n	8013416 <Update_Blink+0xdea>

    case XN_TYPE:
      if(Twink) ParamTab[T1F] |=  D_HID;
 8012ce4:	4b85      	ldr	r3, [pc, #532]	; (8012efc <Update_Blink+0x8d0>)
 8012ce6:	781b      	ldrb	r3, [r3, #0]
 8012ce8:	b2db      	uxtb	r3, r3
 8012cea:	2b00      	cmp	r3, #0
 8012cec:	d008      	beq.n	8012d00 <Update_Blink+0x6d4>
 8012cee:	4b86      	ldr	r3, [pc, #536]	; (8012f08 <Update_Blink+0x8dc>)
 8012cf0:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8012cf4:	f043 0301 	orr.w	r3, r3, #1
 8012cf8:	b21a      	sxth	r2, r3
 8012cfa:	4b83      	ldr	r3, [pc, #524]	; (8012f08 <Update_Blink+0x8dc>)
 8012cfc:	821a      	strh	r2, [r3, #16]
 8012cfe:	e007      	b.n	8012d10 <Update_Blink+0x6e4>
      else      ParamTab[T1F] &= ~D_HID;
 8012d00:	4b81      	ldr	r3, [pc, #516]	; (8012f08 <Update_Blink+0x8dc>)
 8012d02:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8012d06:	f023 0301 	bic.w	r3, r3, #1
 8012d0a:	b21a      	sxth	r2, r3
 8012d0c:	4b7e      	ldr	r3, [pc, #504]	; (8012f08 <Update_Blink+0x8dc>)
 8012d0e:	821a      	strh	r2, [r3, #16]
      if(Twink) ParamTab[T2F] |=  D_HID;
 8012d10:	4b7a      	ldr	r3, [pc, #488]	; (8012efc <Update_Blink+0x8d0>)
 8012d12:	781b      	ldrb	r3, [r3, #0]
 8012d14:	b2db      	uxtb	r3, r3
 8012d16:	2b00      	cmp	r3, #0
 8012d18:	d008      	beq.n	8012d2c <Update_Blink+0x700>
 8012d1a:	4b7b      	ldr	r3, [pc, #492]	; (8012f08 <Update_Blink+0x8dc>)
 8012d1c:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8012d20:	f043 0301 	orr.w	r3, r3, #1
 8012d24:	b21a      	sxth	r2, r3
 8012d26:	4b78      	ldr	r3, [pc, #480]	; (8012f08 <Update_Blink+0x8dc>)
 8012d28:	825a      	strh	r2, [r3, #18]
      else      ParamTab[T2F] &= ~D_HID;
      break;
 8012d2a:	e374      	b.n	8013416 <Update_Blink+0xdea>
      else      ParamTab[T2F] &= ~D_HID;
 8012d2c:	4b76      	ldr	r3, [pc, #472]	; (8012f08 <Update_Blink+0x8dc>)
 8012d2e:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8012d32:	f023 0301 	bic.w	r3, r3, #1
 8012d36:	b21a      	sxth	r2, r3
 8012d38:	4b73      	ldr	r3, [pc, #460]	; (8012f08 <Update_Blink+0x8dc>)
 8012d3a:	825a      	strh	r2, [r3, #18]
      break;
 8012d3c:	e36b      	b.n	8013416 <Update_Blink+0xdea>

    case SYNCMODE:
      if(!(Status &  STOP))
 8012d3e:	4b73      	ldr	r3, [pc, #460]	; (8012f0c <Update_Blink+0x8e0>)
 8012d40:	f9b3 3000 	ldrsh.w	r3, [r3]
 8012d44:	b29b      	uxth	r3, r3
 8012d46:	f003 0301 	and.w	r3, r3, #1
 8012d4a:	2b00      	cmp	r3, #0
 8012d4c:	f040 8362 	bne.w	8013414 <Update_Blink+0xde8>
      {
      SetColor(GRY, TCOLOR[TRG]);
 8012d50:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8012d54:	4619      	mov	r1, r3
 8012d56:	f643 10e7 	movw	r0, #14823	; 0x39e7
 8012d5a:	f7fb f84f 	bl	800ddfc <SetColor>
      Draw_Circle_D(Twink, S_X[i]-3, TITLE_Y_POS, 11, 1, 6*4);
 8012d5e:	4b67      	ldr	r3, [pc, #412]	; (8012efc <Update_Blink+0x8d0>)
 8012d60:	781b      	ldrb	r3, [r3, #0]
 8012d62:	b2d8      	uxtb	r0, r3
 8012d64:	89bb      	ldrh	r3, [r7, #12]
 8012d66:	4a6a      	ldr	r2, [pc, #424]	; (8012f10 <Update_Blink+0x8e4>)
 8012d68:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8012d6c:	b29b      	uxth	r3, r3
 8012d6e:	3b03      	subs	r3, #3
 8012d70:	b29b      	uxth	r3, r3
 8012d72:	b219      	sxth	r1, r3
 8012d74:	2318      	movs	r3, #24
 8012d76:	9301      	str	r3, [sp, #4]
 8012d78:	2301      	movs	r3, #1
 8012d7a:	9300      	str	r3, [sp, #0]
 8012d7c:	230b      	movs	r3, #11
 8012d7e:	22e1      	movs	r2, #225	; 0xe1
 8012d80:	f7fb f92a 	bl	800dfd8 <Draw_Circle_D>
      DispStr(S_X[i], TITLE_Y_POS, Twink, (char *)ptr);
 8012d84:	89bb      	ldrh	r3, [r7, #12]
 8012d86:	4a62      	ldr	r2, [pc, #392]	; (8012f10 <Update_Blink+0x8e4>)
 8012d88:	f932 0013 	ldrsh.w	r0, [r2, r3, lsl #1]
 8012d8c:	4b5b      	ldr	r3, [pc, #364]	; (8012efc <Update_Blink+0x8d0>)
 8012d8e:	781b      	ldrb	r3, [r3, #0]
 8012d90:	b2da      	uxtb	r2, r3
 8012d92:	68bb      	ldr	r3, [r7, #8]
 8012d94:	21e1      	movs	r1, #225	; 0xe1
 8012d96:	f7fb f849 	bl	800de2c <DispStr>
      }
      break;
 8012d9a:	e33b      	b.n	8013414 <Update_Blink+0xde8>

    case TR_MODE:
    case SENSITIVE:
      SetColor(GRY, TCOLOR[TRG]);
 8012d9c:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8012da0:	4619      	mov	r1, r3
 8012da2:	f643 10e7 	movw	r0, #14823	; 0x39e7
 8012da6:	f7fb f829 	bl	800ddfc <SetColor>
      Draw_Circle_D(Twink, S_X[TR_MODE]-3, TITLE_Y_POS, 11, 0, 6*8);
 8012daa:	4b54      	ldr	r3, [pc, #336]	; (8012efc <Update_Blink+0x8d0>)
 8012dac:	781b      	ldrb	r3, [r3, #0]
 8012dae:	b2d8      	uxtb	r0, r3
 8012db0:	23dd      	movs	r3, #221	; 0xdd
 8012db2:	b29b      	uxth	r3, r3
 8012db4:	3b03      	subs	r3, #3
 8012db6:	b29b      	uxth	r3, r3
 8012db8:	b219      	sxth	r1, r3
 8012dba:	2330      	movs	r3, #48	; 0x30
 8012dbc:	9301      	str	r3, [sp, #4]
 8012dbe:	2300      	movs	r3, #0
 8012dc0:	9300      	str	r3, [sp, #0]
 8012dc2:	230b      	movs	r3, #11
 8012dc4:	22e1      	movs	r2, #225	; 0xe1
 8012dc6:	f7fb f907 	bl	800dfd8 <Draw_Circle_D>
      DispStr10x14(S_X[TR_MODE], TITLE_Y_POS, Twink+SYMB,(List[TR_MODE].Val?("D"):("C")));
 8012dca:	20dd      	movs	r0, #221	; 0xdd
 8012dcc:	4b4b      	ldr	r3, [pc, #300]	; (8012efc <Update_Blink+0x8d0>)
 8012dce:	781b      	ldrb	r3, [r3, #0]
 8012dd0:	b2db      	uxtb	r3, r3
 8012dd2:	3310      	adds	r3, #16
 8012dd4:	b2da      	uxtb	r2, r3
 8012dd6:	4b4f      	ldr	r3, [pc, #316]	; (8012f14 <Update_Blink+0x8e8>)
 8012dd8:	f9b3 3074 	ldrsh.w	r3, [r3, #116]	; 0x74
 8012ddc:	2b00      	cmp	r3, #0
 8012dde:	d001      	beq.n	8012de4 <Update_Blink+0x7b8>
 8012de0:	4b4d      	ldr	r3, [pc, #308]	; (8012f18 <Update_Blink+0x8ec>)
 8012de2:	e000      	b.n	8012de6 <Update_Blink+0x7ba>
 8012de4:	4b4d      	ldr	r3, [pc, #308]	; (8012f1c <Update_Blink+0x8f0>)
 8012de6:	21e1      	movs	r1, #225	; 0xe1
 8012de8:	f7fb fa88 	bl	800e2fc <DispStr10x14>

      Tmp  = List[SENSITIVE].Val;                        // �����ز�ֵ
 8012dec:	4b49      	ldr	r3, [pc, #292]	; (8012f14 <Update_Blink+0x8e8>)
 8012dee:	f9b3 308c 	ldrsh.w	r3, [r3, #140]	; 0x8c
 8012df2:	607b      	str	r3, [r7, #4]
      Tmp *= X_SCALE[Range]* Exp(V_SCALE[Range]);
 8012df4:	89fb      	ldrh	r3, [r7, #14]
 8012df6:	4a4a      	ldr	r2, [pc, #296]	; (8012f20 <Update_Blink+0x8f4>)
 8012df8:	5cd3      	ldrb	r3, [r2, r3]
 8012dfa:	461c      	mov	r4, r3
 8012dfc:	89fb      	ldrh	r3, [r7, #14]
 8012dfe:	4a49      	ldr	r2, [pc, #292]	; (8012f24 <Update_Blink+0x8f8>)
 8012e00:	5cd3      	ldrb	r3, [r2, r3]
 8012e02:	4618      	mov	r0, r3
 8012e04:	f7fe ffe6 	bl	8011dd4 <Exp>
 8012e08:	4603      	mov	r3, r0
 8012e0a:	fb03 f204 	mul.w	r2, r3, r4
 8012e0e:	687b      	ldr	r3, [r7, #4]
 8012e10:	fb02 f303 	mul.w	r3, r2, r3
 8012e14:	607b      	str	r3, [r7, #4]
      Value2Str(NumStr, Tmp, V[0], 2, UNSIGN);
 8012e16:	2301      	movs	r3, #1
 8012e18:	9300      	str	r3, [sp, #0]
 8012e1a:	2302      	movs	r3, #2
 8012e1c:	4a42      	ldr	r2, [pc, #264]	; (8012f28 <Update_Blink+0x8fc>)
 8012e1e:	6879      	ldr	r1, [r7, #4]
 8012e20:	4835      	ldr	r0, [pc, #212]	; (8012ef8 <Update_Blink+0x8cc>)
 8012e22:	f7fe fedb 	bl	8011bdc <Value2Str>
      DispStr(S_X[SENSITIVE]+9, TITLE_Y_POS, Twink,  "     ");
 8012e26:	23e7      	movs	r3, #231	; 0xe7
 8012e28:	b29b      	uxth	r3, r3
 8012e2a:	3309      	adds	r3, #9
 8012e2c:	b29b      	uxth	r3, r3
 8012e2e:	b218      	sxth	r0, r3
 8012e30:	4b32      	ldr	r3, [pc, #200]	; (8012efc <Update_Blink+0x8d0>)
 8012e32:	781b      	ldrb	r3, [r3, #0]
 8012e34:	b2da      	uxtb	r2, r3
 8012e36:	4b3d      	ldr	r3, [pc, #244]	; (8012f2c <Update_Blink+0x900>)
 8012e38:	21e1      	movs	r1, #225	; 0xe1
 8012e3a:	f7fa fff7 	bl	800de2c <DispStr>
      DispStr10x14(S_X[SENSITIVE], TITLE_Y_POS, Twink+SYMB,"E");
 8012e3e:	20e7      	movs	r0, #231	; 0xe7
 8012e40:	4b2e      	ldr	r3, [pc, #184]	; (8012efc <Update_Blink+0x8d0>)
 8012e42:	781b      	ldrb	r3, [r3, #0]
 8012e44:	b2db      	uxtb	r3, r3
 8012e46:	3310      	adds	r3, #16
 8012e48:	b2da      	uxtb	r2, r3
 8012e4a:	4b39      	ldr	r3, [pc, #228]	; (8012f30 <Update_Blink+0x904>)
 8012e4c:	21e1      	movs	r1, #225	; 0xe1
 8012e4e:	f7fb fa55 	bl	800e2fc <DispStr10x14>
      DispStr(S_X[SENSITIVE]+9, TITLE_Y_POS, Twink     ,  (char *)NumStr);
 8012e52:	23e7      	movs	r3, #231	; 0xe7
 8012e54:	b29b      	uxth	r3, r3
 8012e56:	3309      	adds	r3, #9
 8012e58:	b29b      	uxth	r3, r3
 8012e5a:	b218      	sxth	r0, r3
 8012e5c:	4b27      	ldr	r3, [pc, #156]	; (8012efc <Update_Blink+0x8d0>)
 8012e5e:	781b      	ldrb	r3, [r3, #0]
 8012e60:	b2da      	uxtb	r2, r3
 8012e62:	4b25      	ldr	r3, [pc, #148]	; (8012ef8 <Update_Blink+0x8cc>)
 8012e64:	21e1      	movs	r1, #225	; 0xe1
 8012e66:	f7fa ffe1 	bl	800de2c <DispStr>
      break;
 8012e6a:	e2d4      	b.n	8013416 <Update_Blink+0xdea>

    case FITTRIGG:
      SetColor(GRY, TCOLOR[TRG]);
 8012e6c:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8012e70:	4619      	mov	r1, r3
 8012e72:	f643 10e7 	movw	r0, #14823	; 0x39e7
 8012e76:	f7fa ffc1 	bl	800ddfc <SetColor>
      DispStr10x14(S_X[FITTRIGG], TITLE_Y_POS, PRN+SYMB,(List[FITTRIGG].Val?("F"):("B")));
 8012e7a:	20cf      	movs	r0, #207	; 0xcf
 8012e7c:	4b25      	ldr	r3, [pc, #148]	; (8012f14 <Update_Blink+0x8e8>)
 8012e7e:	f9b3 307c 	ldrsh.w	r3, [r3, #124]	; 0x7c
 8012e82:	2b00      	cmp	r3, #0
 8012e84:	d001      	beq.n	8012e8a <Update_Blink+0x85e>
 8012e86:	4b2b      	ldr	r3, [pc, #172]	; (8012f34 <Update_Blink+0x908>)
 8012e88:	e000      	b.n	8012e8c <Update_Blink+0x860>
 8012e8a:	4b2b      	ldr	r3, [pc, #172]	; (8012f38 <Update_Blink+0x90c>)
 8012e8c:	2210      	movs	r2, #16
 8012e8e:	21e1      	movs	r1, #225	; 0xe1
 8012e90:	f7fb fa34 	bl	800e2fc <DispStr10x14>
      break;
 8012e94:	e2bf      	b.n	8013416 <Update_Blink+0xdea>

    case THRESHOLD:
      if(Twink) ParamTab[VTF] |=  D_HID;
 8012e96:	4b19      	ldr	r3, [pc, #100]	; (8012efc <Update_Blink+0x8d0>)
 8012e98:	781b      	ldrb	r3, [r3, #0]
 8012e9a:	b2db      	uxtb	r3, r3
 8012e9c:	2b00      	cmp	r3, #0
 8012e9e:	d008      	beq.n	8012eb2 <Update_Blink+0x886>
 8012ea0:	4b19      	ldr	r3, [pc, #100]	; (8012f08 <Update_Blink+0x8dc>)
 8012ea2:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8012ea6:	f043 0301 	orr.w	r3, r3, #1
 8012eaa:	b21a      	sxth	r2, r3
 8012eac:	4b16      	ldr	r3, [pc, #88]	; (8012f08 <Update_Blink+0x8dc>)
 8012eae:	811a      	strh	r2, [r3, #8]
      else      ParamTab[VTF] &= ~D_HID;
      break;
 8012eb0:	e2b1      	b.n	8013416 <Update_Blink+0xdea>
      else      ParamTab[VTF] &= ~D_HID;
 8012eb2:	4b15      	ldr	r3, [pc, #84]	; (8012f08 <Update_Blink+0x8dc>)
 8012eb4:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8012eb8:	f023 0301 	bic.w	r3, r3, #1
 8012ebc:	b21a      	sxth	r2, r3
 8012ebe:	4b12      	ldr	r3, [pc, #72]	; (8012f08 <Update_Blink+0x8dc>)
 8012ec0:	811a      	strh	r2, [r3, #8]
      break;
 8012ec2:	e2a8      	b.n	8013416 <Update_Blink+0xdea>

    case TR_TYPE:
      if(Twink) ParamTab[VTF] |=  D_HID;
 8012ec4:	4b0d      	ldr	r3, [pc, #52]	; (8012efc <Update_Blink+0x8d0>)
 8012ec6:	781b      	ldrb	r3, [r3, #0]
 8012ec8:	b2db      	uxtb	r3, r3
 8012eca:	2b00      	cmp	r3, #0
 8012ecc:	d008      	beq.n	8012ee0 <Update_Blink+0x8b4>
 8012ece:	4b0e      	ldr	r3, [pc, #56]	; (8012f08 <Update_Blink+0x8dc>)
 8012ed0:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8012ed4:	f043 0301 	orr.w	r3, r3, #1
 8012ed8:	b21a      	sxth	r2, r3
 8012eda:	4b0b      	ldr	r3, [pc, #44]	; (8012f08 <Update_Blink+0x8dc>)
 8012edc:	811a      	strh	r2, [r3, #8]
      else      ParamTab[VTF] &= ~D_HID;
      break;
 8012ede:	e29a      	b.n	8013416 <Update_Blink+0xdea>
      else      ParamTab[VTF] &= ~D_HID;
 8012ee0:	4b09      	ldr	r3, [pc, #36]	; (8012f08 <Update_Blink+0x8dc>)
 8012ee2:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8012ee6:	f023 0301 	bic.w	r3, r3, #1
 8012eea:	b21a      	sxth	r2, r3
 8012eec:	4b06      	ldr	r3, [pc, #24]	; (8012f08 <Update_Blink+0x8dc>)
 8012eee:	811a      	strh	r2, [r3, #8]
      break;
 8012ef0:	e291      	b.n	8013416 <Update_Blink+0xdea>
 8012ef2:	bf00      	nop
 8012ef4:	08001ce8 	.word	0x08001ce8
 8012ef8:	20002844 	.word	0x20002844
 8012efc:	20000780 	.word	0x20000780
 8012f00:	08000960 	.word	0x08000960
 8012f04:	0800097c 	.word	0x0800097c
 8012f08:	20000144 	.word	0x20000144
 8012f0c:	200007a8 	.word	0x200007a8
 8012f10:	0800215c 	.word	0x0800215c
 8012f14:	2000029c 	.word	0x2000029c
 8012f18:	08000988 	.word	0x08000988
 8012f1c:	0800098c 	.word	0x0800098c
 8012f20:	08002130 	.word	0x08002130
 8012f24:	08002108 	.word	0x08002108
 8012f28:	08001d00 	.word	0x08001d00
 8012f2c:	08000990 	.word	0x08000990
 8012f30:	08000998 	.word	0x08000998
 8012f34:	0800099c 	.word	0x0800099c
 8012f38:	0800095c 	.word	0x0800095c

    case EXT_REFN:
      SetColor(GRY, TCOLOR[EX]);
 8012f3c:	f64f 031f 	movw	r3, #63519	; 0xf81f
 8012f40:	4619      	mov	r1, r3
 8012f42:	f643 10e7 	movw	r0, #14823	; 0x39e7
 8012f46:	f7fa ff59 	bl	800ddfc <SetColor>
      Draw_Circle_D(Twink, S_X[i]-3, TITLE_Y_POS, 11, 1, 6*5);
 8012f4a:	4b93      	ldr	r3, [pc, #588]	; (8013198 <Update_Blink+0xb6c>)
 8012f4c:	781b      	ldrb	r3, [r3, #0]
 8012f4e:	b2d8      	uxtb	r0, r3
 8012f50:	89bb      	ldrh	r3, [r7, #12]
 8012f52:	4a92      	ldr	r2, [pc, #584]	; (801319c <Update_Blink+0xb70>)
 8012f54:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8012f58:	b29b      	uxth	r3, r3
 8012f5a:	3b03      	subs	r3, #3
 8012f5c:	b29b      	uxth	r3, r3
 8012f5e:	b219      	sxth	r1, r3
 8012f60:	231e      	movs	r3, #30
 8012f62:	9301      	str	r3, [sp, #4]
 8012f64:	2301      	movs	r3, #1
 8012f66:	9300      	str	r3, [sp, #0]
 8012f68:	230b      	movs	r3, #11
 8012f6a:	22e1      	movs	r2, #225	; 0xe1
 8012f6c:	f7fb f834 	bl	800dfd8 <Draw_Circle_D>
      DispStr(S_X[i], TITLE_Y_POS, Twink, (char*)(List[EXT_HIDE].Val? I[List[EXT_REFN].Val] : I[6]));
 8012f70:	89bb      	ldrh	r3, [r7, #12]
 8012f72:	4a8a      	ldr	r2, [pc, #552]	; (801319c <Update_Blink+0xb70>)
 8012f74:	f932 0013 	ldrsh.w	r0, [r2, r3, lsl #1]
 8012f78:	4b87      	ldr	r3, [pc, #540]	; (8013198 <Update_Blink+0xb6c>)
 8012f7a:	781b      	ldrb	r3, [r3, #0]
 8012f7c:	b2da      	uxtb	r2, r3
 8012f7e:	4b88      	ldr	r3, [pc, #544]	; (80131a0 <Update_Blink+0xb74>)
 8012f80:	f9b3 30e4 	ldrsh.w	r3, [r3, #228]	; 0xe4
 8012f84:	2b00      	cmp	r3, #0
 8012f86:	d00a      	beq.n	8012f9e <Update_Blink+0x972>
 8012f88:	4b85      	ldr	r3, [pc, #532]	; (80131a0 <Update_Blink+0xb74>)
 8012f8a:	f9b3 30d4 	ldrsh.w	r3, [r3, #212]	; 0xd4
 8012f8e:	4619      	mov	r1, r3
 8012f90:	460b      	mov	r3, r1
 8012f92:	005b      	lsls	r3, r3, #1
 8012f94:	440b      	add	r3, r1
 8012f96:	005b      	lsls	r3, r3, #1
 8012f98:	4982      	ldr	r1, [pc, #520]	; (80131a4 <Update_Blink+0xb78>)
 8012f9a:	440b      	add	r3, r1
 8012f9c:	e000      	b.n	8012fa0 <Update_Blink+0x974>
 8012f9e:	4b82      	ldr	r3, [pc, #520]	; (80131a8 <Update_Blink+0xb7c>)
 8012fa0:	21e1      	movs	r1, #225	; 0xe1
 8012fa2:	f7fa ff43 	bl	800de2c <DispStr>
      ParamTab[P2F] &= ~D_HID;
 8012fa6:	4b81      	ldr	r3, [pc, #516]	; (80131ac <Update_Blink+0xb80>)
 8012fa8:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8012fac:	f023 0301 	bic.w	r3, r3, #1
 8012fb0:	b21a      	sxth	r2, r3
 8012fb2:	4b7e      	ldr	r3, [pc, #504]	; (80131ac <Update_Blink+0xb80>)
 8012fb4:	805a      	strh	r2, [r3, #2]
      break;
 8012fb6:	e22e      	b.n	8013416 <Update_Blink+0xdea>

    case EXT_POSI:
      if(Twink) ParamTab[P2F] |=  D_HID;
 8012fb8:	4b77      	ldr	r3, [pc, #476]	; (8013198 <Update_Blink+0xb6c>)
 8012fba:	781b      	ldrb	r3, [r3, #0]
 8012fbc:	b2db      	uxtb	r3, r3
 8012fbe:	2b00      	cmp	r3, #0
 8012fc0:	d008      	beq.n	8012fd4 <Update_Blink+0x9a8>
 8012fc2:	4b7a      	ldr	r3, [pc, #488]	; (80131ac <Update_Blink+0xb80>)
 8012fc4:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8012fc8:	f043 0301 	orr.w	r3, r3, #1
 8012fcc:	b21a      	sxth	r2, r3
 8012fce:	4b77      	ldr	r3, [pc, #476]	; (80131ac <Update_Blink+0xb80>)
 8012fd0:	805a      	strh	r2, [r3, #2]
      else      ParamTab[P2F] &= ~D_HID;
      break;
 8012fd2:	e220      	b.n	8013416 <Update_Blink+0xdea>
      else      ParamTab[P2F] &= ~D_HID;
 8012fd4:	4b75      	ldr	r3, [pc, #468]	; (80131ac <Update_Blink+0xb80>)
 8012fd6:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8012fda:	f023 0301 	bic.w	r3, r3, #1
 8012fde:	b21a      	sxth	r2, r3
 8012fe0:	4b72      	ldr	r3, [pc, #456]	; (80131ac <Update_Blink+0xb80>)
 8012fe2:	805a      	strh	r2, [r3, #2]
      break;
 8012fe4:	e217      	b.n	8013416 <Update_Blink+0xdea>

    case EXT_HIDE:
      SetColor(GRY, TCOLOR[EX]);
 8012fe6:	f64f 031f 	movw	r3, #63519	; 0xf81f
 8012fea:	4619      	mov	r1, r3
 8012fec:	f643 10e7 	movw	r0, #14823	; 0x39e7
 8012ff0:	f7fa ff04 	bl	800ddfc <SetColor>
      Draw_Circle_D(Twink, S_X[i]-3, TITLE_Y_POS, 11, 1, 6*5);
 8012ff4:	4b68      	ldr	r3, [pc, #416]	; (8013198 <Update_Blink+0xb6c>)
 8012ff6:	781b      	ldrb	r3, [r3, #0]
 8012ff8:	b2d8      	uxtb	r0, r3
 8012ffa:	89bb      	ldrh	r3, [r7, #12]
 8012ffc:	4a67      	ldr	r2, [pc, #412]	; (801319c <Update_Blink+0xb70>)
 8012ffe:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8013002:	b29b      	uxth	r3, r3
 8013004:	3b03      	subs	r3, #3
 8013006:	b29b      	uxth	r3, r3
 8013008:	b219      	sxth	r1, r3
 801300a:	231e      	movs	r3, #30
 801300c:	9301      	str	r3, [sp, #4]
 801300e:	2301      	movs	r3, #1
 8013010:	9300      	str	r3, [sp, #0]
 8013012:	230b      	movs	r3, #11
 8013014:	22e1      	movs	r2, #225	; 0xe1
 8013016:	f7fa ffdf 	bl	800dfd8 <Draw_Circle_D>
      DispStr(S_X[i], TITLE_Y_POS, Twink, (char*)(List[EXT_HIDE].Val? I[List[EXT_REFN].Val] : I[6]));
 801301a:	89bb      	ldrh	r3, [r7, #12]
 801301c:	4a5f      	ldr	r2, [pc, #380]	; (801319c <Update_Blink+0xb70>)
 801301e:	f932 0013 	ldrsh.w	r0, [r2, r3, lsl #1]
 8013022:	4b5d      	ldr	r3, [pc, #372]	; (8013198 <Update_Blink+0xb6c>)
 8013024:	781b      	ldrb	r3, [r3, #0]
 8013026:	b2da      	uxtb	r2, r3
 8013028:	4b5d      	ldr	r3, [pc, #372]	; (80131a0 <Update_Blink+0xb74>)
 801302a:	f9b3 30e4 	ldrsh.w	r3, [r3, #228]	; 0xe4
 801302e:	2b00      	cmp	r3, #0
 8013030:	d00a      	beq.n	8013048 <Update_Blink+0xa1c>
 8013032:	4b5b      	ldr	r3, [pc, #364]	; (80131a0 <Update_Blink+0xb74>)
 8013034:	f9b3 30d4 	ldrsh.w	r3, [r3, #212]	; 0xd4
 8013038:	4619      	mov	r1, r3
 801303a:	460b      	mov	r3, r1
 801303c:	005b      	lsls	r3, r3, #1
 801303e:	440b      	add	r3, r1
 8013040:	005b      	lsls	r3, r3, #1
 8013042:	4958      	ldr	r1, [pc, #352]	; (80131a4 <Update_Blink+0xb78>)
 8013044:	440b      	add	r3, r1
 8013046:	e000      	b.n	801304a <Update_Blink+0xa1e>
 8013048:	4b57      	ldr	r3, [pc, #348]	; (80131a8 <Update_Blink+0xb7c>)
 801304a:	21e1      	movs	r1, #225	; 0xe1
 801304c:	f7fa feee 	bl	800de2c <DispStr>
      ParamTab[P2F] &= ~D_HID;
 8013050:	4b56      	ldr	r3, [pc, #344]	; (80131ac <Update_Blink+0xb80>)
 8013052:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8013056:	f023 0301 	bic.w	r3, r3, #1
 801305a:	b21a      	sxth	r2, r3
 801305c:	4b53      	ldr	r3, [pc, #332]	; (80131ac <Update_Blink+0xb80>)
 801305e:	805a      	strh	r2, [r3, #2]
      break;
 8013060:	e1d9      	b.n	8013416 <Update_Blink+0xdea>

    case TPYE_OUT:
      SetColor(GRY, TCOLOR[SN]);
 8013062:	f240 531f 	movw	r3, #1311	; 0x51f
 8013066:	4619      	mov	r1, r3
 8013068:	f643 10e7 	movw	r0, #14823	; 0x39e7
 801306c:	f7fa fec6 	bl	800ddfc <SetColor>
      Draw_Circle_D(Twink, S_X[TPYE_OUT]-3, LABLE_Y, 11, 0, 6*9);
 8013070:	4b49      	ldr	r3, [pc, #292]	; (8013198 <Update_Blink+0xb6c>)
 8013072:	781b      	ldrb	r3, [r3, #0]
 8013074:	b2d8      	uxtb	r0, r3
 8013076:	2307      	movs	r3, #7
 8013078:	b29b      	uxth	r3, r3
 801307a:	3b03      	subs	r3, #3
 801307c:	b29b      	uxth	r3, r3
 801307e:	b219      	sxth	r1, r3
 8013080:	2336      	movs	r3, #54	; 0x36
 8013082:	9301      	str	r3, [sp, #4]
 8013084:	2300      	movs	r3, #0
 8013086:	9300      	str	r3, [sp, #0]
 8013088:	230b      	movs	r3, #11
 801308a:	2203      	movs	r2, #3
 801308c:	f7fa ffa4 	bl	800dfd8 <Draw_Circle_D>
      DispStr(S_X[i],    LABLE_Y, Twink, "FO: ");
 8013090:	89bb      	ldrh	r3, [r7, #12]
 8013092:	4a42      	ldr	r2, [pc, #264]	; (801319c <Update_Blink+0xb70>)
 8013094:	f932 0013 	ldrsh.w	r0, [r2, r3, lsl #1]
 8013098:	4b3f      	ldr	r3, [pc, #252]	; (8013198 <Update_Blink+0xb6c>)
 801309a:	781b      	ldrb	r3, [r3, #0]
 801309c:	b2da      	uxtb	r2, r3
 801309e:	4b44      	ldr	r3, [pc, #272]	; (80131b0 <Update_Blink+0xb84>)
 80130a0:	2103      	movs	r1, #3
 80130a2:	f7fa fec3 	bl	800de2c <DispStr>
      DispStr(S_X[i]+24, LABLE_Y, Twink, "     ");
 80130a6:	89bb      	ldrh	r3, [r7, #12]
 80130a8:	4a3c      	ldr	r2, [pc, #240]	; (801319c <Update_Blink+0xb70>)
 80130aa:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 80130ae:	b29b      	uxth	r3, r3
 80130b0:	3318      	adds	r3, #24
 80130b2:	b29b      	uxth	r3, r3
 80130b4:	b218      	sxth	r0, r3
 80130b6:	4b38      	ldr	r3, [pc, #224]	; (8013198 <Update_Blink+0xb6c>)
 80130b8:	781b      	ldrb	r3, [r3, #0]
 80130ba:	b2da      	uxtb	r2, r3
 80130bc:	4b3d      	ldr	r3, [pc, #244]	; (80131b4 <Update_Blink+0xb88>)
 80130be:	2103      	movs	r1, #3
 80130c0:	f7fa feb4 	bl	800de2c <DispStr>
      DispStr(S_X[i]+24, LABLE_Y, Twink, (char*)OT[List[i].Val]);
 80130c4:	89bb      	ldrh	r3, [r7, #12]
 80130c6:	4a35      	ldr	r2, [pc, #212]	; (801319c <Update_Blink+0xb70>)
 80130c8:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 80130cc:	b29b      	uxth	r3, r3
 80130ce:	3318      	adds	r3, #24
 80130d0:	b29b      	uxth	r3, r3
 80130d2:	b218      	sxth	r0, r3
 80130d4:	4b30      	ldr	r3, [pc, #192]	; (8013198 <Update_Blink+0xb6c>)
 80130d6:	781b      	ldrb	r3, [r3, #0]
 80130d8:	b2da      	uxtb	r2, r3
 80130da:	89bb      	ldrh	r3, [r7, #12]
 80130dc:	4930      	ldr	r1, [pc, #192]	; (80131a0 <Update_Blink+0xb74>)
 80130de:	00db      	lsls	r3, r3, #3
 80130e0:	440b      	add	r3, r1
 80130e2:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80130e6:	4619      	mov	r1, r3
 80130e8:	460b      	mov	r3, r1
 80130ea:	005b      	lsls	r3, r3, #1
 80130ec:	440b      	add	r3, r1
 80130ee:	005b      	lsls	r3, r3, #1
 80130f0:	4931      	ldr	r1, [pc, #196]	; (80131b8 <Update_Blink+0xb8c>)
 80130f2:	440b      	add	r3, r1
 80130f4:	2103      	movs	r1, #3
 80130f6:	f7fa fe99 	bl	800de2c <DispStr>
      break;
 80130fa:	e18c      	b.n	8013416 <Update_Blink+0xdea>

    case FREQ_OUT:
      SetColor(GRY, TCOLOR[SN]);
 80130fc:	f240 531f 	movw	r3, #1311	; 0x51f
 8013100:	4619      	mov	r1, r3
 8013102:	f643 10e7 	movw	r0, #14823	; 0x39e7
 8013106:	f7fa fe79 	bl	800ddfc <SetColor>
      Draw_Circle_D(Twink, S_X[FREQ_OUT]-3, LABLE_Y, 11, 0, 6*9);
 801310a:	4b23      	ldr	r3, [pc, #140]	; (8013198 <Update_Blink+0xb6c>)
 801310c:	781b      	ldrb	r3, [r3, #0]
 801310e:	b2d8      	uxtb	r0, r3
 8013110:	2307      	movs	r3, #7
 8013112:	b29b      	uxth	r3, r3
 8013114:	3b03      	subs	r3, #3
 8013116:	b29b      	uxth	r3, r3
 8013118:	b219      	sxth	r1, r3
 801311a:	2336      	movs	r3, #54	; 0x36
 801311c:	9301      	str	r3, [sp, #4]
 801311e:	2300      	movs	r3, #0
 8013120:	9300      	str	r3, [sp, #0]
 8013122:	230b      	movs	r3, #11
 8013124:	2203      	movs	r2, #3
 8013126:	f7fa ff57 	bl	800dfd8 <Draw_Circle_D>
      DispStr(S_X[i],    LABLE_Y, Twink, "FO: ");
 801312a:	89bb      	ldrh	r3, [r7, #12]
 801312c:	4a1b      	ldr	r2, [pc, #108]	; (801319c <Update_Blink+0xb70>)
 801312e:	f932 0013 	ldrsh.w	r0, [r2, r3, lsl #1]
 8013132:	4b19      	ldr	r3, [pc, #100]	; (8013198 <Update_Blink+0xb6c>)
 8013134:	781b      	ldrb	r3, [r3, #0]
 8013136:	b2da      	uxtb	r2, r3
 8013138:	4b1d      	ldr	r3, [pc, #116]	; (80131b0 <Update_Blink+0xb84>)
 801313a:	2103      	movs	r1, #3
 801313c:	f7fa fe76 	bl	800de2c <DispStr>
      DispStr(S_X[i]+24, LABLE_Y, Twink, "     ");
 8013140:	89bb      	ldrh	r3, [r7, #12]
 8013142:	4a16      	ldr	r2, [pc, #88]	; (801319c <Update_Blink+0xb70>)
 8013144:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8013148:	b29b      	uxth	r3, r3
 801314a:	3318      	adds	r3, #24
 801314c:	b29b      	uxth	r3, r3
 801314e:	b218      	sxth	r0, r3
 8013150:	4b11      	ldr	r3, [pc, #68]	; (8013198 <Update_Blink+0xb6c>)
 8013152:	781b      	ldrb	r3, [r3, #0]
 8013154:	b2da      	uxtb	r2, r3
 8013156:	4b17      	ldr	r3, [pc, #92]	; (80131b4 <Update_Blink+0xb88>)
 8013158:	2103      	movs	r1, #3
 801315a:	f7fa fe67 	bl	800de2c <DispStr>
      DispStr(S_X[i]+24, LABLE_Y, Twink, (char*)Q[List[i].Val]);
 801315e:	89bb      	ldrh	r3, [r7, #12]
 8013160:	4a0e      	ldr	r2, [pc, #56]	; (801319c <Update_Blink+0xb70>)
 8013162:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8013166:	b29b      	uxth	r3, r3
 8013168:	3318      	adds	r3, #24
 801316a:	b29b      	uxth	r3, r3
 801316c:	b218      	sxth	r0, r3
 801316e:	4b0a      	ldr	r3, [pc, #40]	; (8013198 <Update_Blink+0xb6c>)
 8013170:	781b      	ldrb	r3, [r3, #0]
 8013172:	b2da      	uxtb	r2, r3
 8013174:	89bb      	ldrh	r3, [r7, #12]
 8013176:	490a      	ldr	r1, [pc, #40]	; (80131a0 <Update_Blink+0xb74>)
 8013178:	00db      	lsls	r3, r3, #3
 801317a:	440b      	add	r3, r1
 801317c:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8013180:	4619      	mov	r1, r3
 8013182:	460b      	mov	r3, r1
 8013184:	005b      	lsls	r3, r3, #1
 8013186:	440b      	add	r3, r1
 8013188:	005b      	lsls	r3, r3, #1
 801318a:	490c      	ldr	r1, [pc, #48]	; (80131bc <Update_Blink+0xb90>)
 801318c:	440b      	add	r3, r1
 801318e:	2103      	movs	r1, #3
 8013190:	f7fa fe4c 	bl	800de2c <DispStr>
      break;
 8013194:	e13f      	b.n	8013416 <Update_Blink+0xdea>
 8013196:	bf00      	nop
 8013198:	20000780 	.word	0x20000780
 801319c:	0800215c 	.word	0x0800215c
 80131a0:	2000029c 	.word	0x2000029c
 80131a4:	08001c88 	.word	0x08001c88
 80131a8:	08001cac 	.word	0x08001cac
 80131ac:	20000144 	.word	0x20000144
 80131b0:	080009a0 	.word	0x080009a0
 80131b4:	08000990 	.word	0x08000990
 80131b8:	08001d50 	.word	0x08001d50
 80131bc:	08001e98 	.word	0x08001e98

    case FREQ_DUT:
      SetColor(GRY, TCOLOR[SN]);
 80131c0:	f240 531f 	movw	r3, #1311	; 0x51f
 80131c4:	4619      	mov	r1, r3
 80131c6:	f643 10e7 	movw	r0, #14823	; 0x39e7
 80131ca:	f7fa fe17 	bl	800ddfc <SetColor>
      Value2Str(NumStr, List[i].Val*10, List[i].PTR, 2, UNSIGN);
 80131ce:	89bb      	ldrh	r3, [r7, #12]
 80131d0:	4a96      	ldr	r2, [pc, #600]	; (801342c <Update_Blink+0xe00>)
 80131d2:	00db      	lsls	r3, r3, #3
 80131d4:	4413      	add	r3, r2
 80131d6:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80131da:	461a      	mov	r2, r3
 80131dc:	4613      	mov	r3, r2
 80131de:	009b      	lsls	r3, r3, #2
 80131e0:	4413      	add	r3, r2
 80131e2:	005b      	lsls	r3, r3, #1
 80131e4:	4619      	mov	r1, r3
 80131e6:	89bb      	ldrh	r3, [r7, #12]
 80131e8:	4a90      	ldr	r2, [pc, #576]	; (801342c <Update_Blink+0xe00>)
 80131ea:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 80131ee:	2301      	movs	r3, #1
 80131f0:	9300      	str	r3, [sp, #0]
 80131f2:	2302      	movs	r3, #2
 80131f4:	488e      	ldr	r0, [pc, #568]	; (8013430 <Update_Blink+0xe04>)
 80131f6:	f7fe fcf1 	bl	8011bdc <Value2Str>
      Draw_Circle_D(Twink, S_X[FREQ_DUT]-3, LABLE_Y, 11, 0, 6*9);
 80131fa:	4b8e      	ldr	r3, [pc, #568]	; (8013434 <Update_Blink+0xe08>)
 80131fc:	781b      	ldrb	r3, [r3, #0]
 80131fe:	b2d8      	uxtb	r0, r3
 8013200:	2307      	movs	r3, #7
 8013202:	b29b      	uxth	r3, r3
 8013204:	3b03      	subs	r3, #3
 8013206:	b29b      	uxth	r3, r3
 8013208:	b219      	sxth	r1, r3
 801320a:	2336      	movs	r3, #54	; 0x36
 801320c:	9301      	str	r3, [sp, #4]
 801320e:	2300      	movs	r3, #0
 8013210:	9300      	str	r3, [sp, #0]
 8013212:	230b      	movs	r3, #11
 8013214:	2203      	movs	r2, #3
 8013216:	f7fa fedf 	bl	800dfd8 <Draw_Circle_D>
      DispStr(S_X[i],    LABLE_Y, Twink, "Duty: ");
 801321a:	89bb      	ldrh	r3, [r7, #12]
 801321c:	4a86      	ldr	r2, [pc, #536]	; (8013438 <Update_Blink+0xe0c>)
 801321e:	f932 0013 	ldrsh.w	r0, [r2, r3, lsl #1]
 8013222:	4b84      	ldr	r3, [pc, #528]	; (8013434 <Update_Blink+0xe08>)
 8013224:	781b      	ldrb	r3, [r3, #0]
 8013226:	b2da      	uxtb	r2, r3
 8013228:	4b84      	ldr	r3, [pc, #528]	; (801343c <Update_Blink+0xe10>)
 801322a:	2103      	movs	r1, #3
 801322c:	f7fa fdfe 	bl	800de2c <DispStr>
      DispStr(S_X[i]+36, LABLE_Y, Twink, "   ");
 8013230:	89bb      	ldrh	r3, [r7, #12]
 8013232:	4a81      	ldr	r2, [pc, #516]	; (8013438 <Update_Blink+0xe0c>)
 8013234:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8013238:	b29b      	uxth	r3, r3
 801323a:	3324      	adds	r3, #36	; 0x24
 801323c:	b29b      	uxth	r3, r3
 801323e:	b218      	sxth	r0, r3
 8013240:	4b7c      	ldr	r3, [pc, #496]	; (8013434 <Update_Blink+0xe08>)
 8013242:	781b      	ldrb	r3, [r3, #0]
 8013244:	b2da      	uxtb	r2, r3
 8013246:	4b7e      	ldr	r3, [pc, #504]	; (8013440 <Update_Blink+0xe14>)
 8013248:	2103      	movs	r1, #3
 801324a:	f7fa fdef 	bl	800de2c <DispStr>
      DispStr(S_X[i]+36, LABLE_Y, Twink, (char *)NumStr);
 801324e:	89bb      	ldrh	r3, [r7, #12]
 8013250:	4a79      	ldr	r2, [pc, #484]	; (8013438 <Update_Blink+0xe0c>)
 8013252:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8013256:	b29b      	uxth	r3, r3
 8013258:	3324      	adds	r3, #36	; 0x24
 801325a:	b29b      	uxth	r3, r3
 801325c:	b218      	sxth	r0, r3
 801325e:	4b75      	ldr	r3, [pc, #468]	; (8013434 <Update_Blink+0xe08>)
 8013260:	781b      	ldrb	r3, [r3, #0]
 8013262:	b2da      	uxtb	r2, r3
 8013264:	4b72      	ldr	r3, [pc, #456]	; (8013430 <Update_Blink+0xe04>)
 8013266:	2103      	movs	r1, #3
 8013268:	f7fa fde0 	bl	800de2c <DispStr>
      break;
 801326c:	e0d3      	b.n	8013416 <Update_Blink+0xdea>

    case AUTO_CAL:
      if(Twink) ParamTab[P1F] |=  W_HID;
 801326e:	4b71      	ldr	r3, [pc, #452]	; (8013434 <Update_Blink+0xe08>)
 8013270:	781b      	ldrb	r3, [r3, #0]
 8013272:	b2db      	uxtb	r3, r3
 8013274:	2b00      	cmp	r3, #0
 8013276:	d008      	beq.n	801328a <Update_Blink+0xc5e>
 8013278:	4b72      	ldr	r3, [pc, #456]	; (8013444 <Update_Blink+0xe18>)
 801327a:	f9b3 3000 	ldrsh.w	r3, [r3]
 801327e:	f043 0304 	orr.w	r3, r3, #4
 8013282:	b21a      	sxth	r2, r3
 8013284:	4b6f      	ldr	r3, [pc, #444]	; (8013444 <Update_Blink+0xe18>)
 8013286:	801a      	strh	r2, [r3, #0]
 8013288:	e007      	b.n	801329a <Update_Blink+0xc6e>
      else      ParamTab[P1F] &= ~W_HID;
 801328a:	4b6e      	ldr	r3, [pc, #440]	; (8013444 <Update_Blink+0xe18>)
 801328c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8013290:	f023 0304 	bic.w	r3, r3, #4
 8013294:	b21a      	sxth	r2, r3
 8013296:	4b6b      	ldr	r3, [pc, #428]	; (8013444 <Update_Blink+0xe18>)
 8013298:	801a      	strh	r2, [r3, #0]

      SetColor(GRY, TCOLOR[ST]);
 801329a:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 801329e:	4619      	mov	r1, r3
 80132a0:	f643 10e7 	movw	r0, #14823	; 0x39e7
 80132a4:	f7fa fdaa 	bl	800ddfc <SetColor>
      Draw_Circle_D(Twink, S_X[i]-3, LABLE_Y, 11, 0, 6*9);
 80132a8:	4b62      	ldr	r3, [pc, #392]	; (8013434 <Update_Blink+0xe08>)
 80132aa:	781b      	ldrb	r3, [r3, #0]
 80132ac:	b2d8      	uxtb	r0, r3
 80132ae:	89bb      	ldrh	r3, [r7, #12]
 80132b0:	4a61      	ldr	r2, [pc, #388]	; (8013438 <Update_Blink+0xe0c>)
 80132b2:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 80132b6:	b29b      	uxth	r3, r3
 80132b8:	3b03      	subs	r3, #3
 80132ba:	b29b      	uxth	r3, r3
 80132bc:	b219      	sxth	r1, r3
 80132be:	2336      	movs	r3, #54	; 0x36
 80132c0:	9301      	str	r3, [sp, #4]
 80132c2:	2300      	movs	r3, #0
 80132c4:	9300      	str	r3, [sp, #0]
 80132c6:	230b      	movs	r3, #11
 80132c8:	2203      	movs	r2, #3
 80132ca:	f7fa fe85 	bl	800dfd8 <Draw_Circle_D>
      DispStr( S_X[i]+0, LABLE_Y, Twink+PRN,  "Press:   ");
 80132ce:	89bb      	ldrh	r3, [r7, #12]
 80132d0:	4a59      	ldr	r2, [pc, #356]	; (8013438 <Update_Blink+0xe0c>)
 80132d2:	f932 0013 	ldrsh.w	r0, [r2, r3, lsl #1]
 80132d6:	4b57      	ldr	r3, [pc, #348]	; (8013434 <Update_Blink+0xe08>)
 80132d8:	781b      	ldrb	r3, [r3, #0]
 80132da:	b2da      	uxtb	r2, r3
 80132dc:	4b5a      	ldr	r3, [pc, #360]	; (8013448 <Update_Blink+0xe1c>)
 80132de:	2103      	movs	r1, #3
 80132e0:	f7fa fda4 	bl	800de2c <DispStr>
      DispStr(S_X[i]+40, LABLE_Y, Twink+SYMB, "{|");//������ͣͼ��
 80132e4:	89bb      	ldrh	r3, [r7, #12]
 80132e6:	4a54      	ldr	r2, [pc, #336]	; (8013438 <Update_Blink+0xe0c>)
 80132e8:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 80132ec:	b29b      	uxth	r3, r3
 80132ee:	3328      	adds	r3, #40	; 0x28
 80132f0:	b29b      	uxth	r3, r3
 80132f2:	b218      	sxth	r0, r3
 80132f4:	4b4f      	ldr	r3, [pc, #316]	; (8013434 <Update_Blink+0xe08>)
 80132f6:	781b      	ldrb	r3, [r3, #0]
 80132f8:	b2db      	uxtb	r3, r3
 80132fa:	3310      	adds	r3, #16
 80132fc:	b2da      	uxtb	r2, r3
 80132fe:	4b53      	ldr	r3, [pc, #332]	; (801344c <Update_Blink+0xe20>)
 8013300:	2103      	movs	r1, #3
 8013302:	f7fa fd93 	bl	800de2c <DispStr>
      break;
 8013306:	e086      	b.n	8013416 <Update_Blink+0xdea>

    case RESTORE:
      SetColor(GRY, TCOLOR[ST]);
 8013308:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 801330c:	4619      	mov	r1, r3
 801330e:	f643 10e7 	movw	r0, #14823	; 0x39e7
 8013312:	f7fa fd73 	bl	800ddfc <SetColor>
      Draw_Circle_D(Twink, S_X[i]-3, LABLE_Y, 11, 0, 6*9);
 8013316:	4b47      	ldr	r3, [pc, #284]	; (8013434 <Update_Blink+0xe08>)
 8013318:	781b      	ldrb	r3, [r3, #0]
 801331a:	b2d8      	uxtb	r0, r3
 801331c:	89bb      	ldrh	r3, [r7, #12]
 801331e:	4a46      	ldr	r2, [pc, #280]	; (8013438 <Update_Blink+0xe0c>)
 8013320:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8013324:	b29b      	uxth	r3, r3
 8013326:	3b03      	subs	r3, #3
 8013328:	b29b      	uxth	r3, r3
 801332a:	b219      	sxth	r1, r3
 801332c:	2336      	movs	r3, #54	; 0x36
 801332e:	9301      	str	r3, [sp, #4]
 8013330:	2300      	movs	r3, #0
 8013332:	9300      	str	r3, [sp, #0]
 8013334:	230b      	movs	r3, #11
 8013336:	2203      	movs	r2, #3
 8013338:	f7fa fe4e 	bl	800dfd8 <Draw_Circle_D>
      DispStr( S_X[i]+0, LABLE_Y, Twink+PRN,  "Press:   ");
 801333c:	89bb      	ldrh	r3, [r7, #12]
 801333e:	4a3e      	ldr	r2, [pc, #248]	; (8013438 <Update_Blink+0xe0c>)
 8013340:	f932 0013 	ldrsh.w	r0, [r2, r3, lsl #1]
 8013344:	4b3b      	ldr	r3, [pc, #236]	; (8013434 <Update_Blink+0xe08>)
 8013346:	781b      	ldrb	r3, [r3, #0]
 8013348:	b2da      	uxtb	r2, r3
 801334a:	4b3f      	ldr	r3, [pc, #252]	; (8013448 <Update_Blink+0xe1c>)
 801334c:	2103      	movs	r1, #3
 801334e:	f7fa fd6d 	bl	800de2c <DispStr>
      DispStr( S_X[i]+40, LABLE_Y, Twink+SYMB, "{|");//������ͣͼ��
 8013352:	89bb      	ldrh	r3, [r7, #12]
 8013354:	4a38      	ldr	r2, [pc, #224]	; (8013438 <Update_Blink+0xe0c>)
 8013356:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 801335a:	b29b      	uxth	r3, r3
 801335c:	3328      	adds	r3, #40	; 0x28
 801335e:	b29b      	uxth	r3, r3
 8013360:	b218      	sxth	r0, r3
 8013362:	4b34      	ldr	r3, [pc, #208]	; (8013434 <Update_Blink+0xe08>)
 8013364:	781b      	ldrb	r3, [r3, #0]
 8013366:	b2db      	uxtb	r3, r3
 8013368:	3310      	adds	r3, #16
 801336a:	b2da      	uxtb	r2, r3
 801336c:	4b37      	ldr	r3, [pc, #220]	; (801344c <Update_Blink+0xe20>)
 801336e:	2103      	movs	r1, #3
 8013370:	f7fa fd5c 	bl	800de2c <DispStr>
      break;
 8013374:	e04f      	b.n	8013416 <Update_Blink+0xdea>

    case STANDBY:
      SetColor(GRY, TCOLOR[ST]);
 8013376:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 801337a:	4619      	mov	r1, r3
 801337c:	f643 10e7 	movw	r0, #14823	; 0x39e7
 8013380:	f7fa fd3c 	bl	800ddfc <SetColor>
      Value2Str(NumStr, List[STANDBY].Val, NSTR[0], 2, UNSIGN);
 8013384:	4b29      	ldr	r3, [pc, #164]	; (801342c <Update_Blink+0xe00>)
 8013386:	f9b3 314c 	ldrsh.w	r3, [r3, #332]	; 0x14c
 801338a:	4619      	mov	r1, r3
 801338c:	2301      	movs	r3, #1
 801338e:	9300      	str	r3, [sp, #0]
 8013390:	2302      	movs	r3, #2
 8013392:	4a2f      	ldr	r2, [pc, #188]	; (8013450 <Update_Blink+0xe24>)
 8013394:	4826      	ldr	r0, [pc, #152]	; (8013430 <Update_Blink+0xe04>)
 8013396:	f7fe fc21 	bl	8011bdc <Value2Str>
      Draw_Circle_D(Twink, S_X[i]-3, LABLE_Y, 11, 0, 6*9);
 801339a:	4b26      	ldr	r3, [pc, #152]	; (8013434 <Update_Blink+0xe08>)
 801339c:	781b      	ldrb	r3, [r3, #0]
 801339e:	b2d8      	uxtb	r0, r3
 80133a0:	89bb      	ldrh	r3, [r7, #12]
 80133a2:	4a25      	ldr	r2, [pc, #148]	; (8013438 <Update_Blink+0xe0c>)
 80133a4:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 80133a8:	b29b      	uxth	r3, r3
 80133aa:	3b03      	subs	r3, #3
 80133ac:	b29b      	uxth	r3, r3
 80133ae:	b219      	sxth	r1, r3
 80133b0:	2336      	movs	r3, #54	; 0x36
 80133b2:	9301      	str	r3, [sp, #4]
 80133b4:	2300      	movs	r3, #0
 80133b6:	9300      	str	r3, [sp, #0]
 80133b8:	230b      	movs	r3, #11
 80133ba:	2203      	movs	r2, #3
 80133bc:	f7fa fe0c 	bl	800dfd8 <Draw_Circle_D>
      DispStr(S_X[i],    LABLE_Y, Twink+PRN,  " ");
 80133c0:	89bb      	ldrh	r3, [r7, #12]
 80133c2:	4a1d      	ldr	r2, [pc, #116]	; (8013438 <Update_Blink+0xe0c>)
 80133c4:	f932 0013 	ldrsh.w	r0, [r2, r3, lsl #1]
 80133c8:	4b1a      	ldr	r3, [pc, #104]	; (8013434 <Update_Blink+0xe08>)
 80133ca:	781b      	ldrb	r3, [r3, #0]
 80133cc:	b2da      	uxtb	r2, r3
 80133ce:	4b21      	ldr	r3, [pc, #132]	; (8013454 <Update_Blink+0xe28>)
 80133d0:	2103      	movs	r1, #3
 80133d2:	f7fa fd2b 	bl	800de2c <DispStr>
      DispStr(S_X[i]+6, LABLE_Y, Twink+PRN,  (char *)NumStr);
 80133d6:	89bb      	ldrh	r3, [r7, #12]
 80133d8:	4a17      	ldr	r2, [pc, #92]	; (8013438 <Update_Blink+0xe0c>)
 80133da:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 80133de:	b29b      	uxth	r3, r3
 80133e0:	3306      	adds	r3, #6
 80133e2:	b29b      	uxth	r3, r3
 80133e4:	b218      	sxth	r0, r3
 80133e6:	4b13      	ldr	r3, [pc, #76]	; (8013434 <Update_Blink+0xe08>)
 80133e8:	781b      	ldrb	r3, [r3, #0]
 80133ea:	b2da      	uxtb	r2, r3
 80133ec:	4b10      	ldr	r3, [pc, #64]	; (8013430 <Update_Blink+0xe04>)
 80133ee:	2103      	movs	r1, #3
 80133f0:	f7fa fd1c 	bl	800de2c <DispStr>
      DispStr(S_X[i]+30, LABLE_Y, Twink+PRN,  "min ");
 80133f4:	89bb      	ldrh	r3, [r7, #12]
 80133f6:	4a10      	ldr	r2, [pc, #64]	; (8013438 <Update_Blink+0xe0c>)
 80133f8:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 80133fc:	b29b      	uxth	r3, r3
 80133fe:	331e      	adds	r3, #30
 8013400:	b29b      	uxth	r3, r3
 8013402:	b218      	sxth	r0, r3
 8013404:	4b0b      	ldr	r3, [pc, #44]	; (8013434 <Update_Blink+0xe08>)
 8013406:	781b      	ldrb	r3, [r3, #0]
 8013408:	b2da      	uxtb	r2, r3
 801340a:	4b13      	ldr	r3, [pc, #76]	; (8013458 <Update_Blink+0xe2c>)
 801340c:	2103      	movs	r1, #3
 801340e:	f7fa fd0d 	bl	800de2c <DispStr>
      break;
 8013412:	e000      	b.n	8013416 <Update_Blink+0xdea>
      break;
 8013414:	bf00      	nop

    }
    if(i != V0_POSI)  ParamTab[P1F]   = L_HID ;//0513
 8013416:	89bb      	ldrh	r3, [r7, #12]
 8013418:	2b03      	cmp	r3, #3
 801341a:	d002      	beq.n	8013422 <Update_Blink+0xdf6>
 801341c:	4b09      	ldr	r3, [pc, #36]	; (8013444 <Update_Blink+0xe18>)
 801341e:	2202      	movs	r2, #2
 8013420:	801a      	strh	r2, [r3, #0]
  }
}
 8013422:	bf00      	nop
 8013424:	3714      	adds	r7, #20
 8013426:	46bd      	mov	sp, r7
 8013428:	bd90      	pop	{r4, r7, pc}
 801342a:	bf00      	nop
 801342c:	2000029c 	.word	0x2000029c
 8013430:	20002844 	.word	0x20002844
 8013434:	20000780 	.word	0x20000780
 8013438:	0800215c 	.word	0x0800215c
 801343c:	080009a8 	.word	0x080009a8
 8013440:	080009b0 	.word	0x080009b0
 8013444:	20000144 	.word	0x20000144
 8013448:	080009b4 	.word	0x080009b4
 801344c:	080009c0 	.word	0x080009c0
 8013450:	2000054c 	.word	0x2000054c
 8013454:	080009c4 	.word	0x080009c4
 8013458:	080009c8 	.word	0x080009c8

0801345c <Update_Detail>:
/*******************************************************************************
 Update_Detail:
*******************************************************************************/
void Update_Detail(void)
{
 801345c:	b590      	push	{r4, r7, lr}
 801345e:	b089      	sub	sp, #36	; 0x24
 8013460:	af02      	add	r7, sp, #8
  long scale = 0;
 8013462:	2300      	movs	r3, #0
 8013464:	60bb      	str	r3, [r7, #8]
  int  Ak = (KgA[KindA+(StateA?1:0)]*4)/GK[GainA];
 8013466:	4ba9      	ldr	r3, [pc, #676]	; (801370c <Update_Detail+0x2b0>)
 8013468:	681a      	ldr	r2, [r3, #0]
 801346a:	4ba9      	ldr	r3, [pc, #676]	; (8013710 <Update_Detail+0x2b4>)
 801346c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8013470:	4619      	mov	r1, r3
 8013472:	4ba8      	ldr	r3, [pc, #672]	; (8013714 <Update_Detail+0x2b8>)
 8013474:	f9b3 3000 	ldrsh.w	r3, [r3]
 8013478:	2b00      	cmp	r3, #0
 801347a:	bf14      	ite	ne
 801347c:	2301      	movne	r3, #1
 801347e:	2300      	moveq	r3, #0
 8013480:	b2db      	uxtb	r3, r3
 8013482:	440b      	add	r3, r1
 8013484:	005b      	lsls	r3, r3, #1
 8013486:	4413      	add	r3, r2
 8013488:	f9b3 3000 	ldrsh.w	r3, [r3]
 801348c:	009b      	lsls	r3, r3, #2
 801348e:	4aa2      	ldr	r2, [pc, #648]	; (8013718 <Update_Detail+0x2bc>)
 8013490:	f9b2 2000 	ldrsh.w	r2, [r2]
 8013494:	4611      	mov	r1, r2
 8013496:	4aa1      	ldr	r2, [pc, #644]	; (801371c <Update_Detail+0x2c0>)
 8013498:	5c52      	ldrb	r2, [r2, r1]
 801349a:	fb93 f3f2 	sdiv	r3, r3, r2
 801349e:	607b      	str	r3, [r7, #4]
  unsigned short i, k = HighT+LowT;
 80134a0:	4b9f      	ldr	r3, [pc, #636]	; (8013720 <Update_Detail+0x2c4>)
 80134a2:	681b      	ldr	r3, [r3, #0]
 80134a4:	b29a      	uxth	r2, r3
 80134a6:	4b9f      	ldr	r3, [pc, #636]	; (8013724 <Update_Detail+0x2c8>)
 80134a8:	681b      	ldr	r3, [r3, #0]
 80134aa:	b29b      	uxth	r3, r3
 80134ac:	4413      	add	r3, r2
 80134ae:	807b      	strh	r3, [r7, #2]
  long Tmp = 0;
 80134b0:	2300      	movs	r3, #0
 80134b2:	613b      	str	r3, [r7, #16]
  short Range = List[Y_RANGES].Val + 10*List[PROBEATT].Val;
 80134b4:	4b9c      	ldr	r3, [pc, #624]	; (8013728 <Update_Detail+0x2cc>)
 80134b6:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80134ba:	b29a      	uxth	r2, r3
 80134bc:	4b9a      	ldr	r3, [pc, #616]	; (8013728 <Update_Detail+0x2cc>)
 80134be:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 80134c2:	b29b      	uxth	r3, r3
 80134c4:	4619      	mov	r1, r3
 80134c6:	0089      	lsls	r1, r1, #2
 80134c8:	440b      	add	r3, r1
 80134ca:	005b      	lsls	r3, r3, #1
 80134cc:	b29b      	uxth	r3, r3
 80134ce:	4413      	add	r3, r2
 80134d0:	b29b      	uxth	r3, r3
 80134d2:	803b      	strh	r3, [r7, #0]
  unsigned long FTmp;

  for(i=Y_RANGES; i<=STANDBY; i++){
 80134d4:	2300      	movs	r3, #0
 80134d6:	82fb      	strh	r3, [r7, #22]
 80134d8:	f000 bfb3 	b.w	8014442 <Update_Detail+0xfe6>
    if(i==FREQUENC)
 80134dc:	8afb      	ldrh	r3, [r7, #22]
 80134de:	2b13      	cmp	r3, #19
 80134e0:	d118      	bne.n	8013514 <Update_Detail+0xb8>
    {
      if(Freq_Cnt > 10){
 80134e2:	4b92      	ldr	r3, [pc, #584]	; (801372c <Update_Detail+0x2d0>)
 80134e4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80134e8:	2b0a      	cmp	r3, #10
 80134ea:	dd0a      	ble.n	8013502 <Update_Detail+0xa6>
        Freq_Cnt = 0;
 80134ec:	4b8f      	ldr	r3, [pc, #572]	; (801372c <Update_Detail+0x2d0>)
 80134ee:	2200      	movs	r2, #0
 80134f0:	801a      	strh	r2, [r3, #0]
        Freq_Flag |= UPD;
 80134f2:	4b8f      	ldr	r3, [pc, #572]	; (8013730 <Update_Detail+0x2d4>)
 80134f4:	781b      	ldrb	r3, [r3, #0]
 80134f6:	f043 0320 	orr.w	r3, r3, #32
 80134fa:	b2da      	uxtb	r2, r3
 80134fc:	4b8c      	ldr	r3, [pc, #560]	; (8013730 <Update_Detail+0x2d4>)
 80134fe:	701a      	strb	r2, [r3, #0]
 8013500:	e008      	b.n	8013514 <Update_Detail+0xb8>
      }
      else Freq_Cnt++;
 8013502:	4b8a      	ldr	r3, [pc, #552]	; (801372c <Update_Detail+0x2d0>)
 8013504:	f9b3 3000 	ldrsh.w	r3, [r3]
 8013508:	b29b      	uxth	r3, r3
 801350a:	3301      	adds	r3, #1
 801350c:	b29b      	uxth	r3, r3
 801350e:	b21a      	sxth	r2, r3
 8013510:	4b86      	ldr	r3, [pc, #536]	; (801372c <Update_Detail+0x2d0>)
 8013512:	801a      	strh	r2, [r3, #0]
    }

    if(List[i].Flg & UPD){
 8013514:	8afb      	ldrh	r3, [r7, #22]
 8013516:	4a84      	ldr	r2, [pc, #528]	; (8013728 <Update_Detail+0x2cc>)
 8013518:	00db      	lsls	r3, r3, #3
 801351a:	4413      	add	r3, r2
 801351c:	799b      	ldrb	r3, [r3, #6]
 801351e:	f003 0320 	and.w	r3, r3, #32
 8013522:	2b00      	cmp	r3, #0
 8013524:	f000 878a 	beq.w	801443c <Update_Detail+0xfe0>
      List[i].Flg &= ~UPD;
 8013528:	8afb      	ldrh	r3, [r7, #22]
 801352a:	4a7f      	ldr	r2, [pc, #508]	; (8013728 <Update_Detail+0x2cc>)
 801352c:	00db      	lsls	r3, r3, #3
 801352e:	4413      	add	r3, r2
 8013530:	799a      	ldrb	r2, [r3, #6]
 8013532:	8afb      	ldrh	r3, [r7, #22]
 8013534:	f022 0220 	bic.w	r2, r2, #32
 8013538:	b2d1      	uxtb	r1, r2
 801353a:	4a7b      	ldr	r2, [pc, #492]	; (8013728 <Update_Detail+0x2cc>)
 801353c:	00db      	lsls	r3, r3, #3
 801353e:	4413      	add	r3, r2
 8013540:	460a      	mov	r2, r1
 8013542:	719a      	strb	r2, [r3, #6]
      switch (i){
 8013544:	8afb      	ldrh	r3, [r7, #22]
 8013546:	2b29      	cmp	r3, #41	; 0x29
 8013548:	f200 8739 	bhi.w	80143be <Update_Detail+0xf62>
 801354c:	a201      	add	r2, pc, #4	; (adr r2, 8013554 <Update_Detail+0xf8>)
 801354e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013552:	bf00      	nop
 8013554:	080135fd 	.word	0x080135fd
 8013558:	080135fd 	.word	0x080135fd
 801355c:	080135fd 	.word	0x080135fd
 8013560:	080135fd 	.word	0x080135fd
 8013564:	080135fd 	.word	0x080135fd
 8013568:	080135fd 	.word	0x080135fd
 801356c:	080135fd 	.word	0x080135fd
 8013570:	08013e05 	.word	0x08013e05
 8013574:	08013e05 	.word	0x08013e05
 8013578:	08013e05 	.word	0x08013e05
 801357c:	08013e05 	.word	0x08013e05
 8013580:	08013e05 	.word	0x08013e05
 8013584:	08013e05 	.word	0x08013e05
 8013588:	08013c9b 	.word	0x08013c9b
 801358c:	08013c9b 	.word	0x08013c9b
 8013590:	08013c9b 	.word	0x08013c9b
 8013594:	08013c9b 	.word	0x08013c9b
 8013598:	08013c9b 	.word	0x08013c9b
 801359c:	08013c9b 	.word	0x08013c9b
 80135a0:	0801405d 	.word	0x0801405d
 80135a4:	080140d1 	.word	0x080140d1
 80135a8:	080140f1 	.word	0x080140f1
 80135ac:	080141f7 	.word	0x080141f7
 80135b0:	08014167 	.word	0x08014167
 80135b4:	0801427d 	.word	0x0801427d
 80135b8:	08014303 	.word	0x08014303
 80135bc:	08013b7f 	.word	0x08013b7f
 80135c0:	08013b7f 	.word	0x08013b7f
 80135c4:	08013c17 	.word	0x08013c17
 80135c8:	080138fd 	.word	0x080138fd
 80135cc:	080138fd 	.word	0x080138fd
 80135d0:	080138fd 	.word	0x080138fd
 80135d4:	080138fd 	.word	0x080138fd
 80135d8:	080138fd 	.word	0x080138fd
 80135dc:	080138fd 	.word	0x080138fd
 80135e0:	080138fd 	.word	0x080138fd
 80135e4:	080139ad 	.word	0x080139ad
 80135e8:	08013a99 	.word	0x08013a99
 80135ec:	08013b3b 	.word	0x08013b3b
 80135f0:	080143bf 	.word	0x080143bf
 80135f4:	080143bf 	.word	0x080143bf
 80135f8:	080143bf 	.word	0x080143bf
      case COUPLING:   // ˢ����ʾ���ģʽ״̬
      case V0_POSI:    // ˢ����ʾ��ֱƫ��λ��
      case V1_POSI:    // ˢ����ʾ��λ�α�λ��
      case V2_POSI:    // ˢ����ʾ��λ�α�λ��
      case YN_TYPE:    // ˢ����ʾ�α���ʽ
        SetColor(GRY, TCOLOR[YN]);
 80135fc:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8013600:	4619      	mov	r1, r3
 8013602:	f643 10e7 	movw	r0, #14823	; 0x39e7
 8013606:	f7fa fbf9 	bl	800ddfc <SetColor>
        if(i == Y_RANGES || i == COUPLING||i == PROBEATT)
 801360a:	8afb      	ldrh	r3, [r7, #22]
 801360c:	2b00      	cmp	r3, #0
 801360e:	d005      	beq.n	801361c <Update_Detail+0x1c0>
 8013610:	8afb      	ldrh	r3, [r7, #22]
 8013612:	2b01      	cmp	r3, #1
 8013614:	d002      	beq.n	801361c <Update_Detail+0x1c0>
 8013616:	8afb      	ldrh	r3, [r7, #22]
 8013618:	2b02      	cmp	r3, #2
 801361a:	d138      	bne.n	801368e <Update_Detail+0x232>
        {
      Draw_Circle_D(INV, S_X[Y_RANGES]-3, TITLE_Y_POS, 11, 0, 6*7);
 801361c:	232f      	movs	r3, #47	; 0x2f
 801361e:	b29b      	uxth	r3, r3
 8013620:	3b03      	subs	r3, #3
 8013622:	b29b      	uxth	r3, r3
 8013624:	b219      	sxth	r1, r3
 8013626:	232a      	movs	r3, #42	; 0x2a
 8013628:	9301      	str	r3, [sp, #4]
 801362a:	2300      	movs	r3, #0
 801362c:	9300      	str	r3, [sp, #0]
 801362e:	230b      	movs	r3, #11
 8013630:	22e1      	movs	r2, #225	; 0xe1
 8013632:	2001      	movs	r0, #1
 8013634:	f7fa fcd0 	bl	800dfd8 <Draw_Circle_D>
      DispStr(S_X[Y_RANGES], TITLE_Y_POS, INV,      (List[Y_RANGES].PTR +(Range)*6));
 8013638:	202f      	movs	r0, #47	; 0x2f
 801363a:	4b3b      	ldr	r3, [pc, #236]	; (8013728 <Update_Detail+0x2cc>)
 801363c:	6819      	ldr	r1, [r3, #0]
 801363e:	f9b7 2000 	ldrsh.w	r2, [r7]
 8013642:	4613      	mov	r3, r2
 8013644:	005b      	lsls	r3, r3, #1
 8013646:	4413      	add	r3, r2
 8013648:	005b      	lsls	r3, r3, #1
 801364a:	440b      	add	r3, r1
 801364c:	2201      	movs	r2, #1
 801364e:	21e1      	movs	r1, #225	; 0xe1
 8013650:	f7fa fbec 	bl	800de2c <DispStr>
      DispStr(S_X[COUPLING], TITLE_Y_POS, INV,      (List[COUPLING].PTR +(List[COUPLING].Val)*6));
 8013654:	2047      	movs	r0, #71	; 0x47
 8013656:	4b34      	ldr	r3, [pc, #208]	; (8013728 <Update_Detail+0x2cc>)
 8013658:	689a      	ldr	r2, [r3, #8]
 801365a:	4b33      	ldr	r3, [pc, #204]	; (8013728 <Update_Detail+0x2cc>)
 801365c:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8013660:	4619      	mov	r1, r3
 8013662:	460b      	mov	r3, r1
 8013664:	005b      	lsls	r3, r3, #1
 8013666:	440b      	add	r3, r1
 8013668:	005b      	lsls	r3, r3, #1
 801366a:	4413      	add	r3, r2
 801366c:	2201      	movs	r2, #1
 801366e:	21e1      	movs	r1, #225	; 0xe1
 8013670:	f7fa fbdc 	bl	800de2c <DispStr>
      DispStr10x14(S_X[PROBEATT], TITLE_Y_POS, PRN+SYMB,(List[PROBEATT].Val?("A"):("B")));
 8013674:	2020      	movs	r0, #32
 8013676:	4b2c      	ldr	r3, [pc, #176]	; (8013728 <Update_Detail+0x2cc>)
 8013678:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 801367c:	2b00      	cmp	r3, #0
 801367e:	d001      	beq.n	8013684 <Update_Detail+0x228>
 8013680:	4b2c      	ldr	r3, [pc, #176]	; (8013734 <Update_Detail+0x2d8>)
 8013682:	e000      	b.n	8013686 <Update_Detail+0x22a>
 8013684:	4b2c      	ldr	r3, [pc, #176]	; (8013738 <Update_Detail+0x2dc>)
 8013686:	2210      	movs	r2, #16
 8013688:	21e1      	movs	r1, #225	; 0xe1
 801368a:	f7fa fe37 	bl	800e2fc <DispStr10x14>
        }
        ParamTab[P1x2] = 2*((List[V0_POSI].Val+1));
 801368e:	4b26      	ldr	r3, [pc, #152]	; (8013728 <Update_Detail+0x2cc>)
 8013690:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 8013694:	3301      	adds	r3, #1
 8013696:	b29b      	uxth	r3, r3
 8013698:	005b      	lsls	r3, r3, #1
 801369a:	b29b      	uxth	r3, r3
 801369c:	b21a      	sxth	r2, r3
 801369e:	4b27      	ldr	r3, [pc, #156]	; (801373c <Update_Detail+0x2e0>)
 80136a0:	829a      	strh	r2, [r3, #20]
        ParamTab[VTx2] = ParamTab[P1x2]+ 2*(List[THRESHOLD].Val+1);
 80136a2:	4b26      	ldr	r3, [pc, #152]	; (801373c <Update_Detail+0x2e0>)
 80136a4:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 80136a8:	b29a      	uxth	r2, r3
 80136aa:	4b1f      	ldr	r3, [pc, #124]	; (8013728 <Update_Detail+0x2cc>)
 80136ac:	f9b3 3084 	ldrsh.w	r3, [r3, #132]	; 0x84
 80136b0:	3301      	adds	r3, #1
 80136b2:	b29b      	uxth	r3, r3
 80136b4:	005b      	lsls	r3, r3, #1
 80136b6:	b29b      	uxth	r3, r3
 80136b8:	4413      	add	r3, r2
 80136ba:	b29b      	uxth	r3, r3
 80136bc:	b21a      	sxth	r2, r3
 80136be:	4b1f      	ldr	r3, [pc, #124]	; (801373c <Update_Detail+0x2e0>)
 80136c0:	839a      	strh	r2, [r3, #28]
        ParamTab[V1x2] = 2*(List[V1_POSI].Val+1);
 80136c2:	4b19      	ldr	r3, [pc, #100]	; (8013728 <Update_Detail+0x2cc>)
 80136c4:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	; 0x24
 80136c8:	3301      	adds	r3, #1
 80136ca:	b29b      	uxth	r3, r3
 80136cc:	005b      	lsls	r3, r3, #1
 80136ce:	b29b      	uxth	r3, r3
 80136d0:	b21a      	sxth	r2, r3
 80136d2:	4b1a      	ldr	r3, [pc, #104]	; (801373c <Update_Detail+0x2e0>)
 80136d4:	83da      	strh	r2, [r3, #30]
        ParamTab[V2x2] = 2*(List[V2_POSI].Val+1);
 80136d6:	4b14      	ldr	r3, [pc, #80]	; (8013728 <Update_Detail+0x2cc>)
 80136d8:	f9b3 302c 	ldrsh.w	r3, [r3, #44]	; 0x2c
 80136dc:	3301      	adds	r3, #1
 80136de:	b29b      	uxth	r3, r3
 80136e0:	005b      	lsls	r3, r3, #1
 80136e2:	b29b      	uxth	r3, r3
 80136e4:	b21a      	sxth	r2, r3
 80136e6:	4b15      	ldr	r3, [pc, #84]	; (801373c <Update_Detail+0x2e0>)
 80136e8:	841a      	strh	r2, [r3, #32]
        ParamTab[V1F]  = (List[YN_TYPE].Val)? L_HID : SHOW;
 80136ea:	4b0f      	ldr	r3, [pc, #60]	; (8013728 <Update_Detail+0x2cc>)
 80136ec:	f9b3 3034 	ldrsh.w	r3, [r3, #52]	; 0x34
 80136f0:	2b00      	cmp	r3, #0
 80136f2:	d001      	beq.n	80136f8 <Update_Detail+0x29c>
 80136f4:	2202      	movs	r2, #2
 80136f6:	e000      	b.n	80136fa <Update_Detail+0x29e>
 80136f8:	2200      	movs	r2, #0
 80136fa:	4b10      	ldr	r3, [pc, #64]	; (801373c <Update_Detail+0x2e0>)
 80136fc:	815a      	strh	r2, [r3, #10]
        ParamTab[V2F]  = (List[YN_TYPE].Val)? L_HID : SHOW;
 80136fe:	4b0a      	ldr	r3, [pc, #40]	; (8013728 <Update_Detail+0x2cc>)
 8013700:	f9b3 3034 	ldrsh.w	r3, [r3, #52]	; 0x34
 8013704:	2b00      	cmp	r3, #0
 8013706:	d01b      	beq.n	8013740 <Update_Detail+0x2e4>
 8013708:	2202      	movs	r2, #2
 801370a:	e01a      	b.n	8013742 <Update_Detail+0x2e6>
 801370c:	20000580 	.word	0x20000580
 8013710:	2000688e 	.word	0x2000688e
 8013714:	2000286a 	.word	0x2000286a
 8013718:	20002852 	.word	0x20002852
 801371c:	20000564 	.word	0x20000564
 8013720:	20006880 	.word	0x20006880
 8013724:	20006894 	.word	0x20006894
 8013728:	2000029c 	.word	0x2000029c
 801372c:	200007ac 	.word	0x200007ac
 8013730:	200001d0 	.word	0x200001d0
 8013734:	08000958 	.word	0x08000958
 8013738:	0800095c 	.word	0x0800095c
 801373c:	20000144 	.word	0x20000144
 8013740:	2200      	movs	r2, #0
 8013742:	4ba6      	ldr	r3, [pc, #664]	; (80139dc <Update_Detail+0x580>)
 8013744:	819a      	strh	r2, [r3, #12]

        Tmp  =(ParamTab[V1x2]- ParamTab[V2x2])/2;         // ˢ����ʾV2-V1��ֵ
 8013746:	4ba5      	ldr	r3, [pc, #660]	; (80139dc <Update_Detail+0x580>)
 8013748:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 801374c:	461a      	mov	r2, r3
 801374e:	4ba3      	ldr	r3, [pc, #652]	; (80139dc <Update_Detail+0x580>)
 8013750:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 8013754:	1ad3      	subs	r3, r2, r3
 8013756:	0fda      	lsrs	r2, r3, #31
 8013758:	4413      	add	r3, r2
 801375a:	105b      	asrs	r3, r3, #1
 801375c:	613b      	str	r3, [r7, #16]
        Tmp *= X_SCALE[Range]* Exp(V_SCALE[Range]);
 801375e:	f9b7 3000 	ldrsh.w	r3, [r7]
 8013762:	4a9f      	ldr	r2, [pc, #636]	; (80139e0 <Update_Detail+0x584>)
 8013764:	5cd3      	ldrb	r3, [r2, r3]
 8013766:	461c      	mov	r4, r3
 8013768:	f9b7 3000 	ldrsh.w	r3, [r7]
 801376c:	4a9d      	ldr	r2, [pc, #628]	; (80139e4 <Update_Detail+0x588>)
 801376e:	5cd3      	ldrb	r3, [r2, r3]
 8013770:	4618      	mov	r0, r3
 8013772:	f7fe fb2f 	bl	8011dd4 <Exp>
 8013776:	4603      	mov	r3, r0
 8013778:	fb03 f204 	mul.w	r2, r3, r4
 801377c:	693b      	ldr	r3, [r7, #16]
 801377e:	fb02 f303 	mul.w	r3, r2, r3
 8013782:	613b      	str	r3, [r7, #16]
        Value2Str(NumStr, Tmp, V[0], 3, UNSIGN);
 8013784:	2301      	movs	r3, #1
 8013786:	9300      	str	r3, [sp, #0]
 8013788:	2303      	movs	r3, #3
 801378a:	4a97      	ldr	r2, [pc, #604]	; (80139e8 <Update_Detail+0x58c>)
 801378c:	6939      	ldr	r1, [r7, #16]
 801378e:	4897      	ldr	r0, [pc, #604]	; (80139ec <Update_Detail+0x590>)
 8013790:	f7fe fa24 	bl	8011bdc <Value2Str>
        Draw_Circle_D(INV, S_X[V1_POSI]-3, LABLE_Y, 11, 0, 6*9);
 8013794:	2307      	movs	r3, #7
 8013796:	b29b      	uxth	r3, r3
 8013798:	3b03      	subs	r3, #3
 801379a:	b29b      	uxth	r3, r3
 801379c:	b219      	sxth	r1, r3
 801379e:	2336      	movs	r3, #54	; 0x36
 80137a0:	9301      	str	r3, [sp, #4]
 80137a2:	2300      	movs	r3, #0
 80137a4:	9300      	str	r3, [sp, #0]
 80137a6:	230b      	movs	r3, #11
 80137a8:	2203      	movs	r2, #3
 80137aa:	2001      	movs	r0, #1
 80137ac:	f7fa fc14 	bl	800dfd8 <Draw_Circle_D>
        DispStr(S_X[V1_POSI]+0*6, LABLE_Y, INV+SYMB, "]");
 80137b0:	2007      	movs	r0, #7
 80137b2:	4b8f      	ldr	r3, [pc, #572]	; (80139f0 <Update_Detail+0x594>)
 80137b4:	2211      	movs	r2, #17
 80137b6:	2103      	movs	r1, #3
 80137b8:	f7fa fb38 	bl	800de2c <DispStr>
        DispStr(S_X[V1_POSI]+1*6, LABLE_Y, INV,      "V:      ");
 80137bc:	2307      	movs	r3, #7
 80137be:	b29b      	uxth	r3, r3
 80137c0:	3306      	adds	r3, #6
 80137c2:	b29b      	uxth	r3, r3
 80137c4:	b218      	sxth	r0, r3
 80137c6:	4b8b      	ldr	r3, [pc, #556]	; (80139f4 <Update_Detail+0x598>)
 80137c8:	2201      	movs	r2, #1
 80137ca:	2103      	movs	r1, #3
 80137cc:	f7fa fb2e 	bl	800de2c <DispStr>
        DispStr(S_X[V1_POSI]+7*6, LABLE_Y, INV,  "  ");
 80137d0:	2307      	movs	r3, #7
 80137d2:	b29b      	uxth	r3, r3
 80137d4:	332a      	adds	r3, #42	; 0x2a
 80137d6:	b29b      	uxth	r3, r3
 80137d8:	b218      	sxth	r0, r3
 80137da:	4b87      	ldr	r3, [pc, #540]	; (80139f8 <Update_Detail+0x59c>)
 80137dc:	2201      	movs	r2, #1
 80137de:	2103      	movs	r1, #3
 80137e0:	f7fa fb24 	bl	800de2c <DispStr>
        DispStr(S_X[V1_POSI]+3*6, LABLE_Y, INV,  (char *)NumStr);
 80137e4:	2307      	movs	r3, #7
 80137e6:	b29b      	uxth	r3, r3
 80137e8:	3312      	adds	r3, #18
 80137ea:	b29b      	uxth	r3, r3
 80137ec:	b218      	sxth	r0, r3
 80137ee:	4b7f      	ldr	r3, [pc, #508]	; (80139ec <Update_Detail+0x590>)
 80137f0:	2201      	movs	r2, #1
 80137f2:	2103      	movs	r1, #3
 80137f4:	f7fa fb1a 	bl	800de2c <DispStr>

        SetColor(GRY, TCOLOR[TRG]);
 80137f8:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 80137fc:	4619      	mov	r1, r3
 80137fe:	f643 10e7 	movw	r0, #14823	; 0x39e7
 8013802:	f7fa fafb 	bl	800ddfc <SetColor>
        Tmp  = List[SENSITIVE].Val;                       // ˢ����ʾ�����ز�ֵ
 8013806:	4b7d      	ldr	r3, [pc, #500]	; (80139fc <Update_Detail+0x5a0>)
 8013808:	f9b3 308c 	ldrsh.w	r3, [r3, #140]	; 0x8c
 801380c:	613b      	str	r3, [r7, #16]
        Tmp *= X_SCALE[Range]* Exp(V_SCALE[Range]);
 801380e:	f9b7 3000 	ldrsh.w	r3, [r7]
 8013812:	4a73      	ldr	r2, [pc, #460]	; (80139e0 <Update_Detail+0x584>)
 8013814:	5cd3      	ldrb	r3, [r2, r3]
 8013816:	461c      	mov	r4, r3
 8013818:	f9b7 3000 	ldrsh.w	r3, [r7]
 801381c:	4a71      	ldr	r2, [pc, #452]	; (80139e4 <Update_Detail+0x588>)
 801381e:	5cd3      	ldrb	r3, [r2, r3]
 8013820:	4618      	mov	r0, r3
 8013822:	f7fe fad7 	bl	8011dd4 <Exp>
 8013826:	4603      	mov	r3, r0
 8013828:	fb03 f204 	mul.w	r2, r3, r4
 801382c:	693b      	ldr	r3, [r7, #16]
 801382e:	fb02 f303 	mul.w	r3, r2, r3
 8013832:	613b      	str	r3, [r7, #16]
        Value2Str(NumStr, Tmp,V[0], 2, UNSIGN);
 8013834:	2301      	movs	r3, #1
 8013836:	9300      	str	r3, [sp, #0]
 8013838:	2302      	movs	r3, #2
 801383a:	4a6b      	ldr	r2, [pc, #428]	; (80139e8 <Update_Detail+0x58c>)
 801383c:	6939      	ldr	r1, [r7, #16]
 801383e:	486b      	ldr	r0, [pc, #428]	; (80139ec <Update_Detail+0x590>)
 8013840:	f7fe f9cc 	bl	8011bdc <Value2Str>
        DispStr(S_X[SENSITIVE]+9, TITLE_Y_POS, INV,  "     ");
 8013844:	23e7      	movs	r3, #231	; 0xe7
 8013846:	b29b      	uxth	r3, r3
 8013848:	3309      	adds	r3, #9
 801384a:	b29b      	uxth	r3, r3
 801384c:	b218      	sxth	r0, r3
 801384e:	4b6c      	ldr	r3, [pc, #432]	; (8013a00 <Update_Detail+0x5a4>)
 8013850:	2201      	movs	r2, #1
 8013852:	21e1      	movs	r1, #225	; 0xe1
 8013854:	f7fa faea 	bl	800de2c <DispStr>
        DispStr(S_X[SENSITIVE]+9, TITLE_Y_POS, INV,  (char *)NumStr);
 8013858:	23e7      	movs	r3, #231	; 0xe7
 801385a:	b29b      	uxth	r3, r3
 801385c:	3309      	adds	r3, #9
 801385e:	b29b      	uxth	r3, r3
 8013860:	b218      	sxth	r0, r3
 8013862:	4b62      	ldr	r3, [pc, #392]	; (80139ec <Update_Detail+0x590>)
 8013864:	2201      	movs	r2, #1
 8013866:	21e1      	movs	r1, #225	; 0xe1
 8013868:	f7fa fae0 	bl	800de2c <DispStr>
        DispStr10x14(S_X[SENSITIVE], TITLE_Y_POS, INV+SYMB,"E");
 801386c:	20e7      	movs	r0, #231	; 0xe7
 801386e:	4b65      	ldr	r3, [pc, #404]	; (8013a04 <Update_Detail+0x5a8>)
 8013870:	2211      	movs	r2, #17
 8013872:	21e1      	movs	r1, #225	; 0xe1
 8013874:	f7fa fd42 	bl	800e2fc <DispStr10x14>
        GainA  = (char)List[Y_RANGES].Val;
 8013878:	4b60      	ldr	r3, [pc, #384]	; (80139fc <Update_Detail+0x5a0>)
 801387a:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801387e:	b2db      	uxtb	r3, r3
 8013880:	b21a      	sxth	r2, r3
 8013882:	4b61      	ldr	r3, [pc, #388]	; (8013a08 <Update_Detail+0x5ac>)
 8013884:	801a      	strh	r2, [r3, #0]

        if((char)List[Y_RANGES].Val>1)
 8013886:	4b5d      	ldr	r3, [pc, #372]	; (80139fc <Update_Detail+0x5a0>)
 8013888:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801388c:	b2db      	uxtb	r3, r3
 801388e:	2b01      	cmp	r3, #1
 8013890:	d903      	bls.n	801389a <Update_Detail+0x43e>
          KindA  = HV;
 8013892:	4b5e      	ldr	r3, [pc, #376]	; (8013a0c <Update_Detail+0x5b0>)
 8013894:	2201      	movs	r2, #1
 8013896:	801a      	strh	r2, [r3, #0]
 8013898:	e002      	b.n	80138a0 <Update_Detail+0x444>
        else
          KindA  = LV;                //Ch1ѡ���ѹ���ѹ����
 801389a:	4b5c      	ldr	r3, [pc, #368]	; (8013a0c <Update_Detail+0x5b0>)
 801389c:	2200      	movs	r2, #0
 801389e:	801a      	strh	r2, [r3, #0]
        StateA =  ((char)List[Y_RANGES].Val>5)?ACT: GND;
 80138a0:	4b56      	ldr	r3, [pc, #344]	; (80139fc <Update_Detail+0x5a0>)
 80138a2:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80138a6:	b2db      	uxtb	r3, r3
 80138a8:	2b05      	cmp	r3, #5
 80138aa:	d901      	bls.n	80138b0 <Update_Detail+0x454>
 80138ac:	2204      	movs	r2, #4
 80138ae:	e000      	b.n	80138b2 <Update_Detail+0x456>
 80138b0:	2200      	movs	r2, #0
 80138b2:	4b57      	ldr	r3, [pc, #348]	; (8013a10 <Update_Detail+0x5b4>)
 80138b4:	801a      	strh	r2, [r3, #0]

        CouplA = (List[COUPLING].Val)? AC : DC;                      // AC);  //AC/DC��Ϸ�ʽ
 80138b6:	4b51      	ldr	r3, [pc, #324]	; (80139fc <Update_Detail+0x5a0>)
 80138b8:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 80138bc:	2b00      	cmp	r3, #0
 80138be:	d001      	beq.n	80138c4 <Update_Detail+0x468>
 80138c0:	2200      	movs	r2, #0
 80138c2:	e000      	b.n	80138c6 <Update_Detail+0x46a>
 80138c4:	2202      	movs	r2, #2
 80138c6:	4b53      	ldr	r3, [pc, #332]	; (8013a14 <Update_Detail+0x5b8>)
 80138c8:	801a      	strh	r2, [r3, #0]
        BIOS_Ctrl(AiRANGE, KindA+CouplA+StateA);             //Ch1״̬ˢ��
 80138ca:	4b50      	ldr	r3, [pc, #320]	; (8013a0c <Update_Detail+0x5b0>)
 80138cc:	f9b3 3000 	ldrsh.w	r3, [r3]
 80138d0:	461a      	mov	r2, r3
 80138d2:	4b50      	ldr	r3, [pc, #320]	; (8013a14 <Update_Detail+0x5b8>)
 80138d4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80138d8:	4413      	add	r3, r2
 80138da:	4a4d      	ldr	r2, [pc, #308]	; (8013a10 <Update_Detail+0x5b4>)
 80138dc:	f9b2 2000 	ldrsh.w	r2, [r2]
 80138e0:	4413      	add	r3, r2
 80138e2:	4619      	mov	r1, r3
 80138e4:	2007      	movs	r0, #7
 80138e6:	f7f8 fd45 	bl	800c374 <BIOS_Ctrl>
        AiPosi(List[V0_POSI].Val);                        //Ch1Ӳ����Ӧλ��
 80138ea:	4b44      	ldr	r3, [pc, #272]	; (80139fc <Update_Detail+0x5a0>)
 80138ec:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 80138f0:	b2db      	uxtb	r3, r3
 80138f2:	4618      	mov	r0, r3
 80138f4:	f001 fc5c 	bl	80151b0 <AiPosi>
        break;
 80138f8:	f000 bd61 	b.w	80143be <Update_Detail+0xf62>
      case SAVE_BUF:
      case SAVE_CSV:
      case SAVE_SVG:
      case LOAD_DAT: //��ʾ��ѡ��Ҫ��ȡ���ļ����
      case LOAD_BUF:
        SetColor(GRY, TCOLOR[FN]);
 80138fc:	f64f 4310 	movw	r3, #64528	; 0xfc10
 8013900:	4619      	mov	r1, r3
 8013902:	f643 10e7 	movw	r0, #14823	; 0x39e7
 8013906:	f7fa fa79 	bl	800ddfc <SetColor>
        u8ToDec3(NumStr, List[i].Val);
 801390a:	8afb      	ldrh	r3, [r7, #22]
 801390c:	4a3b      	ldr	r2, [pc, #236]	; (80139fc <Update_Detail+0x5a0>)
 801390e:	00db      	lsls	r3, r3, #3
 8013910:	4413      	add	r3, r2
 8013912:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8013916:	b2db      	uxtb	r3, r3
 8013918:	4619      	mov	r1, r3
 801391a:	4834      	ldr	r0, [pc, #208]	; (80139ec <Update_Detail+0x590>)
 801391c:	f7fe f8f6 	bl	8011b0c <u8ToDec3>
        Draw_Circle_D(INV, S_X[i]-3, LABLE_Y, 11, 0, 6*11);
 8013920:	8afb      	ldrh	r3, [r7, #22]
 8013922:	4a3d      	ldr	r2, [pc, #244]	; (8013a18 <Update_Detail+0x5bc>)
 8013924:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8013928:	b29b      	uxth	r3, r3
 801392a:	3b03      	subs	r3, #3
 801392c:	b29b      	uxth	r3, r3
 801392e:	b219      	sxth	r1, r3
 8013930:	2342      	movs	r3, #66	; 0x42
 8013932:	9301      	str	r3, [sp, #4]
 8013934:	2300      	movs	r3, #0
 8013936:	9300      	str	r3, [sp, #0]
 8013938:	230b      	movs	r3, #11
 801393a:	2203      	movs	r2, #3
 801393c:	2001      	movs	r0, #1
 801393e:	f7fa fb4b 	bl	800dfd8 <Draw_Circle_D>
        DispStr(S_X[i],    LABLE_Y, INV, ((i > SAVE_SVG)? "Load" : "Save"));//0513
 8013942:	8afb      	ldrh	r3, [r7, #22]
 8013944:	4a34      	ldr	r2, [pc, #208]	; (8013a18 <Update_Detail+0x5bc>)
 8013946:	f932 0013 	ldrsh.w	r0, [r2, r3, lsl #1]
 801394a:	8afb      	ldrh	r3, [r7, #22]
 801394c:	2b21      	cmp	r3, #33	; 0x21
 801394e:	d901      	bls.n	8013954 <Update_Detail+0x4f8>
 8013950:	4b32      	ldr	r3, [pc, #200]	; (8013a1c <Update_Detail+0x5c0>)
 8013952:	e000      	b.n	8013956 <Update_Detail+0x4fa>
 8013954:	4b32      	ldr	r3, [pc, #200]	; (8013a20 <Update_Detail+0x5c4>)
 8013956:	2201      	movs	r2, #1
 8013958:	2103      	movs	r1, #3
 801395a:	f7fa fa67 	bl	800de2c <DispStr>
        DispStr(S_X[i]+24, LABLE_Y, INV, (char *)NumStr);
 801395e:	8afb      	ldrh	r3, [r7, #22]
 8013960:	4a2d      	ldr	r2, [pc, #180]	; (8013a18 <Update_Detail+0x5bc>)
 8013962:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8013966:	b29b      	uxth	r3, r3
 8013968:	3318      	adds	r3, #24
 801396a:	b29b      	uxth	r3, r3
 801396c:	b218      	sxth	r0, r3
 801396e:	4b1f      	ldr	r3, [pc, #124]	; (80139ec <Update_Detail+0x590>)
 8013970:	2201      	movs	r2, #1
 8013972:	2103      	movs	r1, #3
 8013974:	f7fa fa5a 	bl	800de2c <DispStr>
        DispStr(S_X[i]+42, LABLE_Y, INV, (List[i].PTR +(i - SAVE_BMP)*6));
 8013978:	8afb      	ldrh	r3, [r7, #22]
 801397a:	4a27      	ldr	r2, [pc, #156]	; (8013a18 <Update_Detail+0x5bc>)
 801397c:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8013980:	b29b      	uxth	r3, r3
 8013982:	332a      	adds	r3, #42	; 0x2a
 8013984:	b29b      	uxth	r3, r3
 8013986:	b218      	sxth	r0, r3
 8013988:	8afb      	ldrh	r3, [r7, #22]
 801398a:	4a1c      	ldr	r2, [pc, #112]	; (80139fc <Update_Detail+0x5a0>)
 801398c:	f852 1033 	ldr.w	r1, [r2, r3, lsl #3]
 8013990:	8afb      	ldrh	r3, [r7, #22]
 8013992:	f1a3 021d 	sub.w	r2, r3, #29
 8013996:	4613      	mov	r3, r2
 8013998:	005b      	lsls	r3, r3, #1
 801399a:	4413      	add	r3, r2
 801399c:	005b      	lsls	r3, r3, #1
 801399e:	440b      	add	r3, r1
 80139a0:	2201      	movs	r2, #1
 80139a2:	2103      	movs	r1, #3
 80139a4:	f7fa fa42 	bl	800de2c <DispStr>
        break;
 80139a8:	f000 bd09 	b.w	80143be <Update_Detail+0xf62>

      case TPYE_OUT:
        if(List[TPYE_OUT].Val ==0) //suqar
 80139ac:	4b13      	ldr	r3, [pc, #76]	; (80139fc <Update_Detail+0x5a0>)
 80139ae:	f9b3 3124 	ldrsh.w	r3, [r3, #292]	; 0x124
 80139b2:	2b00      	cmp	r3, #0
 80139b4:	d136      	bne.n	8013a24 <Update_Detail+0x5c8>
        {
          BIOS_Ctrl(OUT_MOD, DISABLE);            // �ر����ģʽ
 80139b6:	2100      	movs	r1, #0
 80139b8:	2000      	movs	r0, #0
 80139ba:	f7f8 fcdb 	bl	800c374 <BIOS_Ctrl>
          Set_Fout(List[FREQ_OUT].Val);
 80139be:	4b0f      	ldr	r3, [pc, #60]	; (80139fc <Update_Detail+0x5a0>)
 80139c0:	f9b3 312c 	ldrsh.w	r3, [r3, #300]	; 0x12c
 80139c4:	4618      	mov	r0, r3
 80139c6:	f7f8 feb3 	bl	800c730 <Set_Fout>
          Set_Duty();
 80139ca:	f7f8 fe85 	bl	800c6d8 <Set_Duty>
          BIOS_Ctrl(OUT_MOD, PULSED);             // �趨�������ģʽ
 80139ce:	2104      	movs	r1, #4
 80139d0:	2000      	movs	r0, #0
 80139d2:	f7f8 fccf 	bl	800c374 <BIOS_Ctrl>
           BIOS_Ctrl(OUT_CNT, 180);
           BIOS_Ctrl(OUT_BUF, BIOS_Info(List[TPYE_OUT].Val));    // ����ģ��������Ҳ������ݱ�
           BIOS_Ctrl(OUT_MOD, ANALOG);             // �趨ģ�����ģʽ
        }

      break;
 80139d6:	f000 bcf2 	b.w	80143be <Update_Detail+0xf62>
 80139da:	bf00      	nop
 80139dc:	20000144 	.word	0x20000144
 80139e0:	08002130 	.word	0x08002130
 80139e4:	08002108 	.word	0x08002108
 80139e8:	08001d00 	.word	0x08001d00
 80139ec:	20002844 	.word	0x20002844
 80139f0:	08000960 	.word	0x08000960
 80139f4:	08000964 	.word	0x08000964
 80139f8:	080009d0 	.word	0x080009d0
 80139fc:	2000029c 	.word	0x2000029c
 8013a00:	08000990 	.word	0x08000990
 8013a04:	08000998 	.word	0x08000998
 8013a08:	20002852 	.word	0x20002852
 8013a0c:	2000688e 	.word	0x2000688e
 8013a10:	2000286a 	.word	0x2000286a
 8013a14:	20006890 	.word	0x20006890
 8013a18:	0800215c 	.word	0x0800215c
 8013a1c:	08000948 	.word	0x08000948
 8013a20:	08000950 	.word	0x08000950
          if(List[FREQ_OUT].Val > MAX_FREQ)
 8013a24:	4bbf      	ldr	r3, [pc, #764]	; (8013d24 <Update_Detail+0x8c8>)
 8013a26:	f9b3 312c 	ldrsh.w	r3, [r3, #300]	; 0x12c
 8013a2a:	2b09      	cmp	r3, #9
 8013a2c:	dd03      	ble.n	8013a36 <Update_Detail+0x5da>
             List[FREQ_OUT].Val = MAX_FREQ ;   //10KHz
 8013a2e:	4bbd      	ldr	r3, [pc, #756]	; (8013d24 <Update_Detail+0x8c8>)
 8013a30:	2209      	movs	r2, #9
 8013a32:	f8a3 212c 	strh.w	r2, [r3, #300]	; 0x12c
           BIOS_Ctrl(OUT_MOD, DISABLE);            // �ر����ģʽ
 8013a36:	2100      	movs	r1, #0
 8013a38:	2000      	movs	r0, #0
 8013a3a:	f7f8 fc9b 	bl	800c374 <BIOS_Ctrl>
           htim7.Init.Prescaler = Dac_Psc[List[FREQ_OUT].Val] - 1;
 8013a3e:	4bb9      	ldr	r3, [pc, #740]	; (8013d24 <Update_Detail+0x8c8>)
 8013a40:	f9b3 312c 	ldrsh.w	r3, [r3, #300]	; 0x12c
 8013a44:	461a      	mov	r2, r3
 8013a46:	4bb8      	ldr	r3, [pc, #736]	; (8013d28 <Update_Detail+0x8cc>)
 8013a48:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8013a4c:	3b01      	subs	r3, #1
 8013a4e:	461a      	mov	r2, r3
 8013a50:	4bb6      	ldr	r3, [pc, #728]	; (8013d2c <Update_Detail+0x8d0>)
 8013a52:	605a      	str	r2, [r3, #4]
           BIOS_Ctrl(DAC_TIM, Dac_Tim[List[FREQ_OUT].Val]-1); // 72MHz/2/180/100 = 2KHz ģ���������(ÿ����36��)
 8013a54:	4bb3      	ldr	r3, [pc, #716]	; (8013d24 <Update_Detail+0x8c8>)
 8013a56:	f9b3 312c 	ldrsh.w	r3, [r3, #300]	; 0x12c
 8013a5a:	461a      	mov	r2, r3
 8013a5c:	4bb4      	ldr	r3, [pc, #720]	; (8013d30 <Update_Detail+0x8d4>)
 8013a5e:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8013a62:	3b01      	subs	r3, #1
 8013a64:	4619      	mov	r1, r3
 8013a66:	2001      	movs	r0, #1
 8013a68:	f7f8 fc84 	bl	800c374 <BIOS_Ctrl>
           BIOS_Ctrl(OUT_CNT, 180);
 8013a6c:	21b4      	movs	r1, #180	; 0xb4
 8013a6e:	2002      	movs	r0, #2
 8013a70:	f7f8 fc80 	bl	800c374 <BIOS_Ctrl>
           BIOS_Ctrl(OUT_BUF, BIOS_Info(List[TPYE_OUT].Val));    // ����ģ��������Ҳ������ݱ�
 8013a74:	4bab      	ldr	r3, [pc, #684]	; (8013d24 <Update_Detail+0x8c8>)
 8013a76:	f9b3 3124 	ldrsh.w	r3, [r3, #292]	; 0x124
 8013a7a:	b2db      	uxtb	r3, r3
 8013a7c:	4618      	mov	r0, r3
 8013a7e:	f7f8 fc63 	bl	800c348 <BIOS_Info>
 8013a82:	4603      	mov	r3, r0
 8013a84:	4619      	mov	r1, r3
 8013a86:	2003      	movs	r0, #3
 8013a88:	f7f8 fc74 	bl	800c374 <BIOS_Ctrl>
           BIOS_Ctrl(OUT_MOD, ANALOG);             // �趨ģ�����ģʽ
 8013a8c:	2102      	movs	r1, #2
 8013a8e:	2000      	movs	r0, #0
 8013a90:	f7f8 fc70 	bl	800c374 <BIOS_Ctrl>
      break;
 8013a94:	f000 bc93 	b.w	80143be <Update_Detail+0xf62>

      case FREQ_OUT: // ��ʾ�������Ƶ��
        if(List[TPYE_OUT].Val ==0) //suqar
 8013a98:	4ba2      	ldr	r3, [pc, #648]	; (8013d24 <Update_Detail+0x8c8>)
 8013a9a:	f9b3 3124 	ldrsh.w	r3, [r3, #292]	; 0x124
 8013a9e:	2b00      	cmp	r3, #0
 8013aa0:	d111      	bne.n	8013ac6 <Update_Detail+0x66a>
        {
          BIOS_Ctrl(OUT_MOD, DISABLE);            // �ر����ģʽ
 8013aa2:	2100      	movs	r1, #0
 8013aa4:	2000      	movs	r0, #0
 8013aa6:	f7f8 fc65 	bl	800c374 <BIOS_Ctrl>
          Set_Fout(List[FREQ_OUT].Val);
 8013aaa:	4b9e      	ldr	r3, [pc, #632]	; (8013d24 <Update_Detail+0x8c8>)
 8013aac:	f9b3 312c 	ldrsh.w	r3, [r3, #300]	; 0x12c
 8013ab0:	4618      	mov	r0, r3
 8013ab2:	f7f8 fe3d 	bl	800c730 <Set_Fout>
          Set_Duty();
 8013ab6:	f7f8 fe0f 	bl	800c6d8 <Set_Duty>
          BIOS_Ctrl(OUT_MOD, PULSED);             // �趨�������ģʽ
 8013aba:	2104      	movs	r1, #4
 8013abc:	2000      	movs	r0, #0
 8013abe:	f7f8 fc59 	bl	800c374 <BIOS_Ctrl>
          BIOS_Ctrl(DAC_TIM, Dac_Tim[List[FREQ_OUT].Val]-1); // 72MHz/2/180/100 = 2KHz ģ���������(ÿ����36��)
          BIOS_Ctrl(OUT_CNT, 180);
          BIOS_Ctrl(OUT_BUF, BIOS_Info(List[TPYE_OUT].Val));    // ����ģ��������Ҳ������ݱ�
          BIOS_Ctrl(OUT_MOD, ANALOG);             // �趨ģ�����ģʽ
        }
        break;
 8013ac2:	f000 bc7c 	b.w	80143be <Update_Detail+0xf62>
          if(List[FREQ_OUT].Val > MAX_FREQ)
 8013ac6:	4b97      	ldr	r3, [pc, #604]	; (8013d24 <Update_Detail+0x8c8>)
 8013ac8:	f9b3 312c 	ldrsh.w	r3, [r3, #300]	; 0x12c
 8013acc:	2b09      	cmp	r3, #9
 8013ace:	dd03      	ble.n	8013ad8 <Update_Detail+0x67c>
            List[FREQ_OUT].Val = MAX_FREQ ;   //10KHz
 8013ad0:	4b94      	ldr	r3, [pc, #592]	; (8013d24 <Update_Detail+0x8c8>)
 8013ad2:	2209      	movs	r2, #9
 8013ad4:	f8a3 212c 	strh.w	r2, [r3, #300]	; 0x12c
          BIOS_Ctrl(OUT_MOD, DISABLE);            // �ر����ģʽ
 8013ad8:	2100      	movs	r1, #0
 8013ada:	2000      	movs	r0, #0
 8013adc:	f7f8 fc4a 	bl	800c374 <BIOS_Ctrl>
          htim7.Init.Prescaler = Dac_Psc[List[FREQ_OUT].Val] - 1;
 8013ae0:	4b90      	ldr	r3, [pc, #576]	; (8013d24 <Update_Detail+0x8c8>)
 8013ae2:	f9b3 312c 	ldrsh.w	r3, [r3, #300]	; 0x12c
 8013ae6:	461a      	mov	r2, r3
 8013ae8:	4b8f      	ldr	r3, [pc, #572]	; (8013d28 <Update_Detail+0x8cc>)
 8013aea:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8013aee:	3b01      	subs	r3, #1
 8013af0:	461a      	mov	r2, r3
 8013af2:	4b8e      	ldr	r3, [pc, #568]	; (8013d2c <Update_Detail+0x8d0>)
 8013af4:	605a      	str	r2, [r3, #4]
          BIOS_Ctrl(DAC_TIM, Dac_Tim[List[FREQ_OUT].Val]-1); // 72MHz/2/180/100 = 2KHz ģ���������(ÿ����36��)
 8013af6:	4b8b      	ldr	r3, [pc, #556]	; (8013d24 <Update_Detail+0x8c8>)
 8013af8:	f9b3 312c 	ldrsh.w	r3, [r3, #300]	; 0x12c
 8013afc:	461a      	mov	r2, r3
 8013afe:	4b8c      	ldr	r3, [pc, #560]	; (8013d30 <Update_Detail+0x8d4>)
 8013b00:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8013b04:	3b01      	subs	r3, #1
 8013b06:	4619      	mov	r1, r3
 8013b08:	2001      	movs	r0, #1
 8013b0a:	f7f8 fc33 	bl	800c374 <BIOS_Ctrl>
          BIOS_Ctrl(OUT_CNT, 180);
 8013b0e:	21b4      	movs	r1, #180	; 0xb4
 8013b10:	2002      	movs	r0, #2
 8013b12:	f7f8 fc2f 	bl	800c374 <BIOS_Ctrl>
          BIOS_Ctrl(OUT_BUF, BIOS_Info(List[TPYE_OUT].Val));    // ����ģ��������Ҳ������ݱ�
 8013b16:	4b83      	ldr	r3, [pc, #524]	; (8013d24 <Update_Detail+0x8c8>)
 8013b18:	f9b3 3124 	ldrsh.w	r3, [r3, #292]	; 0x124
 8013b1c:	b2db      	uxtb	r3, r3
 8013b1e:	4618      	mov	r0, r3
 8013b20:	f7f8 fc12 	bl	800c348 <BIOS_Info>
 8013b24:	4603      	mov	r3, r0
 8013b26:	4619      	mov	r1, r3
 8013b28:	2003      	movs	r0, #3
 8013b2a:	f7f8 fc23 	bl	800c374 <BIOS_Ctrl>
          BIOS_Ctrl(OUT_MOD, ANALOG);             // �趨ģ�����ģʽ
 8013b2e:	2102      	movs	r1, #2
 8013b30:	2000      	movs	r0, #0
 8013b32:	f7f8 fc1f 	bl	800c374 <BIOS_Ctrl>
        break;
 8013b36:	f000 bc42 	b.w	80143be <Update_Detail+0xf62>

      case FREQ_DUT: // ��ʾ�������ռ�ձ�
        SetColor(GRY, TCOLOR[SN]);
 8013b3a:	f240 531f 	movw	r3, #1311	; 0x51f
 8013b3e:	4619      	mov	r1, r3
 8013b40:	f643 10e7 	movw	r0, #14823	; 0x39e7
 8013b44:	f7fa f95a 	bl	800ddfc <SetColor>
        Draw_Circle_D(INV, S_X[i]-3, LABLE_Y, 11, 0, 6*9);
 8013b48:	8afb      	ldrh	r3, [r7, #22]
 8013b4a:	4a7a      	ldr	r2, [pc, #488]	; (8013d34 <Update_Detail+0x8d8>)
 8013b4c:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8013b50:	b29b      	uxth	r3, r3
 8013b52:	3b03      	subs	r3, #3
 8013b54:	b29b      	uxth	r3, r3
 8013b56:	b219      	sxth	r1, r3
 8013b58:	2336      	movs	r3, #54	; 0x36
 8013b5a:	9301      	str	r3, [sp, #4]
 8013b5c:	2300      	movs	r3, #0
 8013b5e:	9300      	str	r3, [sp, #0]
 8013b60:	230b      	movs	r3, #11
 8013b62:	2203      	movs	r2, #3
 8013b64:	2001      	movs	r0, #1
 8013b66:	f7fa fa37 	bl	800dfd8 <Draw_Circle_D>
        if(List[TPYE_OUT].Val == 0) //suqar
 8013b6a:	4b6e      	ldr	r3, [pc, #440]	; (8013d24 <Update_Detail+0x8c8>)
 8013b6c:	f9b3 3124 	ldrsh.w	r3, [r3, #292]	; 0x124
 8013b70:	2b00      	cmp	r3, #0
 8013b72:	f040 8423 	bne.w	80143bc <Update_Detail+0xf60>
        {
          Set_Duty();
 8013b76:	f7f8 fdaf 	bl	800c6d8 <Set_Duty>
        }
        break;
 8013b7a:	f000 bc1f 	b.w	80143bc <Update_Detail+0xf60>

      case EXT_REFN: // ��ʾ�ο���������
      case EXT_POSI: // ��ʾ�ο�����ƫ��
        SetColor(GRY, TCOLOR[EX]);
 8013b7e:	f64f 031f 	movw	r3, #63519	; 0xf81f
 8013b82:	4619      	mov	r1, r3
 8013b84:	f643 10e7 	movw	r0, #14823	; 0x39e7
 8013b88:	f7fa f938 	bl	800ddfc <SetColor>
        if((i == EXT_REFN) || (i == EXT_POSI))
 8013b8c:	8afb      	ldrh	r3, [r7, #22]
 8013b8e:	2b1a      	cmp	r3, #26
 8013b90:	d002      	beq.n	8013b98 <Update_Detail+0x73c>
 8013b92:	8afb      	ldrh	r3, [r7, #22]
 8013b94:	2b1b      	cmp	r3, #27
 8013b96:	d123      	bne.n	8013be0 <Update_Detail+0x784>
        {
          Draw_Circle_D(INV, S_X[EXT_REFN]-3, TITLE_Y_POS, 11, 1, 6*5);
 8013b98:	23a8      	movs	r3, #168	; 0xa8
 8013b9a:	b29b      	uxth	r3, r3
 8013b9c:	3b03      	subs	r3, #3
 8013b9e:	b29b      	uxth	r3, r3
 8013ba0:	b219      	sxth	r1, r3
 8013ba2:	231e      	movs	r3, #30
 8013ba4:	9301      	str	r3, [sp, #4]
 8013ba6:	2301      	movs	r3, #1
 8013ba8:	9300      	str	r3, [sp, #0]
 8013baa:	230b      	movs	r3, #11
 8013bac:	22e1      	movs	r2, #225	; 0xe1
 8013bae:	2001      	movs	r0, #1
 8013bb0:	f7fa fa12 	bl	800dfd8 <Draw_Circle_D>
          DispStr(S_X[EXT_REFN], TITLE_Y_POS, INV, (char*)(List[EXT_HIDE].Val? I[List[EXT_REFN].Val] : I[6]));
 8013bb4:	20a8      	movs	r0, #168	; 0xa8
 8013bb6:	4b5b      	ldr	r3, [pc, #364]	; (8013d24 <Update_Detail+0x8c8>)
 8013bb8:	f9b3 30e4 	ldrsh.w	r3, [r3, #228]	; 0xe4
 8013bbc:	2b00      	cmp	r3, #0
 8013bbe:	d00a      	beq.n	8013bd6 <Update_Detail+0x77a>
 8013bc0:	4b58      	ldr	r3, [pc, #352]	; (8013d24 <Update_Detail+0x8c8>)
 8013bc2:	f9b3 30d4 	ldrsh.w	r3, [r3, #212]	; 0xd4
 8013bc6:	461a      	mov	r2, r3
 8013bc8:	4613      	mov	r3, r2
 8013bca:	005b      	lsls	r3, r3, #1
 8013bcc:	4413      	add	r3, r2
 8013bce:	005b      	lsls	r3, r3, #1
 8013bd0:	4a59      	ldr	r2, [pc, #356]	; (8013d38 <Update_Detail+0x8dc>)
 8013bd2:	4413      	add	r3, r2
 8013bd4:	e000      	b.n	8013bd8 <Update_Detail+0x77c>
 8013bd6:	4b59      	ldr	r3, [pc, #356]	; (8013d3c <Update_Detail+0x8e0>)
 8013bd8:	2201      	movs	r2, #1
 8013bda:	21e1      	movs	r1, #225	; 0xe1
 8013bdc:	f7fa f926 	bl	800de2c <DispStr>
        }
        if(List[EXT_REFN].Val < 6) ParamTab[P2x2]=(List[EXT_POSI].Val + 1)*2;
 8013be0:	4b50      	ldr	r3, [pc, #320]	; (8013d24 <Update_Detail+0x8c8>)
 8013be2:	f9b3 30d4 	ldrsh.w	r3, [r3, #212]	; 0xd4
 8013be6:	2b05      	cmp	r3, #5
 8013be8:	dc0a      	bgt.n	8013c00 <Update_Detail+0x7a4>
 8013bea:	4b4e      	ldr	r3, [pc, #312]	; (8013d24 <Update_Detail+0x8c8>)
 8013bec:	f9b3 30dc 	ldrsh.w	r3, [r3, #220]	; 0xdc
 8013bf0:	3301      	adds	r3, #1
 8013bf2:	b29b      	uxth	r3, r3
 8013bf4:	005b      	lsls	r3, r3, #1
 8013bf6:	b29b      	uxth	r3, r3
 8013bf8:	b21a      	sxth	r2, r3
 8013bfa:	4b51      	ldr	r3, [pc, #324]	; (8013d40 <Update_Detail+0x8e4>)
 8013bfc:	82da      	strh	r2, [r3, #22]
        else                       ParamTab[P2x2]=(List[ V0_POSI].Val + 1)*2;
        break;
 8013bfe:	e3de      	b.n	80143be <Update_Detail+0xf62>
        else                       ParamTab[P2x2]=(List[ V0_POSI].Val + 1)*2;
 8013c00:	4b48      	ldr	r3, [pc, #288]	; (8013d24 <Update_Detail+0x8c8>)
 8013c02:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 8013c06:	3301      	adds	r3, #1
 8013c08:	b29b      	uxth	r3, r3
 8013c0a:	005b      	lsls	r3, r3, #1
 8013c0c:	b29b      	uxth	r3, r3
 8013c0e:	b21a      	sxth	r2, r3
 8013c10:	4b4b      	ldr	r3, [pc, #300]	; (8013d40 <Update_Detail+0x8e4>)
 8013c12:	82da      	strh	r2, [r3, #22]
        break;
 8013c14:	e3d3      	b.n	80143be <Update_Detail+0xf62>

      case EXT_HIDE:
        if(List[EXT_HIDE].Val == 0) ParamTab[P2F] |=  W_HID;  // W_HID�����ο�����
 8013c16:	4b43      	ldr	r3, [pc, #268]	; (8013d24 <Update_Detail+0x8c8>)
 8013c18:	f9b3 30e4 	ldrsh.w	r3, [r3, #228]	; 0xe4
 8013c1c:	2b00      	cmp	r3, #0
 8013c1e:	d108      	bne.n	8013c32 <Update_Detail+0x7d6>
 8013c20:	4b47      	ldr	r3, [pc, #284]	; (8013d40 <Update_Detail+0x8e4>)
 8013c22:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8013c26:	f043 0304 	orr.w	r3, r3, #4
 8013c2a:	b21a      	sxth	r2, r3
 8013c2c:	4b44      	ldr	r3, [pc, #272]	; (8013d40 <Update_Detail+0x8e4>)
 8013c2e:	805a      	strh	r2, [r3, #2]
 8013c30:	e007      	b.n	8013c42 <Update_Detail+0x7e6>
        else                        ParamTab[P2F] &= ~W_HID;  // W_HID��ʾ�ο�����
 8013c32:	4b43      	ldr	r3, [pc, #268]	; (8013d40 <Update_Detail+0x8e4>)
 8013c34:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8013c38:	f023 0304 	bic.w	r3, r3, #4
 8013c3c:	b21a      	sxth	r2, r3
 8013c3e:	4b40      	ldr	r3, [pc, #256]	; (8013d40 <Update_Detail+0x8e4>)
 8013c40:	805a      	strh	r2, [r3, #2]
        SetColor(GRY, TCOLOR[EX]);
 8013c42:	f64f 031f 	movw	r3, #63519	; 0xf81f
 8013c46:	4619      	mov	r1, r3
 8013c48:	f643 10e7 	movw	r0, #14823	; 0x39e7
 8013c4c:	f7fa f8d6 	bl	800ddfc <SetColor>
        Draw_Circle_D(INV, S_X[EXT_REFN]-3, TITLE_Y_POS, 11, 1, 6*5);
 8013c50:	23a8      	movs	r3, #168	; 0xa8
 8013c52:	b29b      	uxth	r3, r3
 8013c54:	3b03      	subs	r3, #3
 8013c56:	b29b      	uxth	r3, r3
 8013c58:	b219      	sxth	r1, r3
 8013c5a:	231e      	movs	r3, #30
 8013c5c:	9301      	str	r3, [sp, #4]
 8013c5e:	2301      	movs	r3, #1
 8013c60:	9300      	str	r3, [sp, #0]
 8013c62:	230b      	movs	r3, #11
 8013c64:	22e1      	movs	r2, #225	; 0xe1
 8013c66:	2001      	movs	r0, #1
 8013c68:	f7fa f9b6 	bl	800dfd8 <Draw_Circle_D>
        DispStr(S_X[EXT_REFN], TITLE_Y_POS, INV, (char*)(List[EXT_HIDE].Val? I[List[EXT_REFN].Val] : I[6]));
 8013c6c:	20a8      	movs	r0, #168	; 0xa8
 8013c6e:	4b2d      	ldr	r3, [pc, #180]	; (8013d24 <Update_Detail+0x8c8>)
 8013c70:	f9b3 30e4 	ldrsh.w	r3, [r3, #228]	; 0xe4
 8013c74:	2b00      	cmp	r3, #0
 8013c76:	d00a      	beq.n	8013c8e <Update_Detail+0x832>
 8013c78:	4b2a      	ldr	r3, [pc, #168]	; (8013d24 <Update_Detail+0x8c8>)
 8013c7a:	f9b3 30d4 	ldrsh.w	r3, [r3, #212]	; 0xd4
 8013c7e:	461a      	mov	r2, r3
 8013c80:	4613      	mov	r3, r2
 8013c82:	005b      	lsls	r3, r3, #1
 8013c84:	4413      	add	r3, r2
 8013c86:	005b      	lsls	r3, r3, #1
 8013c88:	4a2b      	ldr	r2, [pc, #172]	; (8013d38 <Update_Detail+0x8dc>)
 8013c8a:	4413      	add	r3, r2
 8013c8c:	e000      	b.n	8013c90 <Update_Detail+0x834>
 8013c8e:	4b2b      	ldr	r3, [pc, #172]	; (8013d3c <Update_Detail+0x8e0>)
 8013c90:	2201      	movs	r2, #1
 8013c92:	21e1      	movs	r1, #225	; 0xe1
 8013c94:	f7fa f8ca 	bl	800de2c <DispStr>
      break;
 8013c98:	e391      	b.n	80143be <Update_Detail+0xf62>
      case TR_MODE:   // ˢ����ʾ������ʽ
      case FITTRIGG:  // ˢ����ʾ�Զ�������ֵ
      case THRESHOLD: // ˢ����ʾ������ֵ
      case SENSITIVE: // ˢ����ʾ����������
      case TR_TYPE:   // ˢ����ʾ�α���ʽ
        DispStatus();
 8013c9a:	f000 fc6b 	bl	8014574 <DispStatus>
        SetColor(GRY, TCOLOR[TRG]);
 8013c9e:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8013ca2:	4619      	mov	r1, r3
 8013ca4:	f643 10e7 	movw	r0, #14823	; 0x39e7
 8013ca8:	f7fa f8a8 	bl	800ddfc <SetColor>
        if(i == TR_MODE || i==SENSITIVE)
 8013cac:	8afb      	ldrh	r3, [r7, #22]
 8013cae:	2b0e      	cmp	r3, #14
 8013cb0:	d002      	beq.n	8013cb8 <Update_Detail+0x85c>
 8013cb2:	8afb      	ldrh	r3, [r7, #22]
 8013cb4:	2b11      	cmp	r3, #17
 8013cb6:	d11a      	bne.n	8013cee <Update_Detail+0x892>
        {
          Draw_Circle_D(INV, S_X[TR_MODE]-3, TITLE_Y_POS, 11, 0, 6*8);
 8013cb8:	23dd      	movs	r3, #221	; 0xdd
 8013cba:	b29b      	uxth	r3, r3
 8013cbc:	3b03      	subs	r3, #3
 8013cbe:	b29b      	uxth	r3, r3
 8013cc0:	b219      	sxth	r1, r3
 8013cc2:	2330      	movs	r3, #48	; 0x30
 8013cc4:	9301      	str	r3, [sp, #4]
 8013cc6:	2300      	movs	r3, #0
 8013cc8:	9300      	str	r3, [sp, #0]
 8013cca:	230b      	movs	r3, #11
 8013ccc:	22e1      	movs	r2, #225	; 0xe1
 8013cce:	2001      	movs	r0, #1
 8013cd0:	f7fa f982 	bl	800dfd8 <Draw_Circle_D>
          DispStr10x14(S_X[TR_MODE], TITLE_Y_POS, INV+SYMB,(List[TR_MODE].Val?("D"):("C")));
 8013cd4:	20dd      	movs	r0, #221	; 0xdd
 8013cd6:	4b13      	ldr	r3, [pc, #76]	; (8013d24 <Update_Detail+0x8c8>)
 8013cd8:	f9b3 3074 	ldrsh.w	r3, [r3, #116]	; 0x74
 8013cdc:	2b00      	cmp	r3, #0
 8013cde:	d001      	beq.n	8013ce4 <Update_Detail+0x888>
 8013ce0:	4b18      	ldr	r3, [pc, #96]	; (8013d44 <Update_Detail+0x8e8>)
 8013ce2:	e000      	b.n	8013ce6 <Update_Detail+0x88a>
 8013ce4:	4b18      	ldr	r3, [pc, #96]	; (8013d48 <Update_Detail+0x8ec>)
 8013ce6:	2211      	movs	r2, #17
 8013ce8:	21e1      	movs	r1, #225	; 0xe1
 8013cea:	f7fa fb07 	bl	800e2fc <DispStr10x14>
        }
        if(i == FITTRIGG)
 8013cee:	8afb      	ldrh	r3, [r7, #22]
 8013cf0:	2b0f      	cmp	r3, #15
 8013cf2:	d134      	bne.n	8013d5e <Update_Detail+0x902>
        {
          DispStr10x14(S_X[FITTRIGG], TITLE_Y_POS, PRN+SYMB,(List[FITTRIGG].Val?("F"):("B")));
 8013cf4:	20cf      	movs	r0, #207	; 0xcf
 8013cf6:	4b0b      	ldr	r3, [pc, #44]	; (8013d24 <Update_Detail+0x8c8>)
 8013cf8:	f9b3 307c 	ldrsh.w	r3, [r3, #124]	; 0x7c
 8013cfc:	2b00      	cmp	r3, #0
 8013cfe:	d001      	beq.n	8013d04 <Update_Detail+0x8a8>
 8013d00:	4b12      	ldr	r3, [pc, #72]	; (8013d4c <Update_Detail+0x8f0>)
 8013d02:	e000      	b.n	8013d06 <Update_Detail+0x8aa>
 8013d04:	4b12      	ldr	r3, [pc, #72]	; (8013d50 <Update_Detail+0x8f4>)
 8013d06:	2210      	movs	r2, #16
 8013d08:	21e1      	movs	r1, #225	; 0xe1
 8013d0a:	f7fa faf7 	bl	800e2fc <DispStr10x14>
          if(List[FITTRIGG].Val)KEYTIME = 300;
 8013d0e:	4b05      	ldr	r3, [pc, #20]	; (8013d24 <Update_Detail+0x8c8>)
 8013d10:	f9b3 307c 	ldrsh.w	r3, [r3, #124]	; 0x7c
 8013d14:	2b00      	cmp	r3, #0
 8013d16:	d01f      	beq.n	8013d58 <Update_Detail+0x8fc>
 8013d18:	4b0e      	ldr	r3, [pc, #56]	; (8013d54 <Update_Detail+0x8f8>)
 8013d1a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8013d1e:	801a      	strh	r2, [r3, #0]
 8013d20:	e01d      	b.n	8013d5e <Update_Detail+0x902>
 8013d22:	bf00      	nop
 8013d24:	2000029c 	.word	0x2000029c
 8013d28:	08002338 	.word	0x08002338
 8013d2c:	20006bdc 	.word	0x20006bdc
 8013d30:	08001d90 	.word	0x08001d90
 8013d34:	0800215c 	.word	0x0800215c
 8013d38:	08001c88 	.word	0x08001c88
 8013d3c:	08001cac 	.word	0x08001cac
 8013d40:	20000144 	.word	0x20000144
 8013d44:	08000988 	.word	0x08000988
 8013d48:	0800098c 	.word	0x0800098c
 8013d4c:	0800099c 	.word	0x0800099c
 8013d50:	0800095c 	.word	0x0800095c
 8013d54:	20000786 	.word	0x20000786
          else KEYTIME = 0;
 8013d58:	4bac      	ldr	r3, [pc, #688]	; (801400c <Update_Detail+0xbb0>)
 8013d5a:	2200      	movs	r2, #0
 8013d5c:	801a      	strh	r2, [r3, #0]
        }
        ParamTab[VTx2]= ParamTab[P1x2]+2*List[THRESHOLD].Val;
 8013d5e:	4bac      	ldr	r3, [pc, #688]	; (8014010 <Update_Detail+0xbb4>)
 8013d60:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8013d64:	b29a      	uxth	r2, r3
 8013d66:	4bab      	ldr	r3, [pc, #684]	; (8014014 <Update_Detail+0xbb8>)
 8013d68:	f9b3 3084 	ldrsh.w	r3, [r3, #132]	; 0x84
 8013d6c:	b29b      	uxth	r3, r3
 8013d6e:	005b      	lsls	r3, r3, #1
 8013d70:	b29b      	uxth	r3, r3
 8013d72:	4413      	add	r3, r2
 8013d74:	b29b      	uxth	r3, r3
 8013d76:	b21a      	sxth	r2, r3
 8013d78:	4ba5      	ldr	r3, [pc, #660]	; (8014010 <Update_Detail+0xbb4>)
 8013d7a:	839a      	strh	r2, [r3, #28]
        Tmp  = List[SENSITIVE].Val;
 8013d7c:	4ba5      	ldr	r3, [pc, #660]	; (8014014 <Update_Detail+0xbb8>)
 8013d7e:	f9b3 308c 	ldrsh.w	r3, [r3, #140]	; 0x8c
 8013d82:	613b      	str	r3, [r7, #16]
        Tmp *= X_SCALE[Range]* Exp(V_SCALE[Range]);
 8013d84:	f9b7 3000 	ldrsh.w	r3, [r7]
 8013d88:	4aa3      	ldr	r2, [pc, #652]	; (8014018 <Update_Detail+0xbbc>)
 8013d8a:	5cd3      	ldrb	r3, [r2, r3]
 8013d8c:	461c      	mov	r4, r3
 8013d8e:	f9b7 3000 	ldrsh.w	r3, [r7]
 8013d92:	4aa2      	ldr	r2, [pc, #648]	; (801401c <Update_Detail+0xbc0>)
 8013d94:	5cd3      	ldrb	r3, [r2, r3]
 8013d96:	4618      	mov	r0, r3
 8013d98:	f7fe f81c 	bl	8011dd4 <Exp>
 8013d9c:	4603      	mov	r3, r0
 8013d9e:	fb03 f204 	mul.w	r2, r3, r4
 8013da2:	693b      	ldr	r3, [r7, #16]
 8013da4:	fb02 f303 	mul.w	r3, r2, r3
 8013da8:	613b      	str	r3, [r7, #16]
        Value2Str(NumStr, Tmp, V[0], 2, UNSIGN);
 8013daa:	2301      	movs	r3, #1
 8013dac:	9300      	str	r3, [sp, #0]
 8013dae:	2302      	movs	r3, #2
 8013db0:	4a9b      	ldr	r2, [pc, #620]	; (8014020 <Update_Detail+0xbc4>)
 8013db2:	6939      	ldr	r1, [r7, #16]
 8013db4:	489b      	ldr	r0, [pc, #620]	; (8014024 <Update_Detail+0xbc8>)
 8013db6:	f7fd ff11 	bl	8011bdc <Value2Str>
        DispStr10x14(S_X[SENSITIVE], TITLE_Y_POS, INV+SYMB,"E");
 8013dba:	20e7      	movs	r0, #231	; 0xe7
 8013dbc:	4b9a      	ldr	r3, [pc, #616]	; (8014028 <Update_Detail+0xbcc>)
 8013dbe:	2211      	movs	r2, #17
 8013dc0:	21e1      	movs	r1, #225	; 0xe1
 8013dc2:	f7fa fa9b 	bl	800e2fc <DispStr10x14>
        DispStr(S_X[SENSITIVE]+9, TITLE_Y_POS, INV,  "     ");
 8013dc6:	23e7      	movs	r3, #231	; 0xe7
 8013dc8:	b29b      	uxth	r3, r3
 8013dca:	3309      	adds	r3, #9
 8013dcc:	b29b      	uxth	r3, r3
 8013dce:	b218      	sxth	r0, r3
 8013dd0:	4b96      	ldr	r3, [pc, #600]	; (801402c <Update_Detail+0xbd0>)
 8013dd2:	2201      	movs	r2, #1
 8013dd4:	21e1      	movs	r1, #225	; 0xe1
 8013dd6:	f7fa f829 	bl	800de2c <DispStr>
        DispStr(S_X[SENSITIVE]+9, TITLE_Y_POS, INV,  (char *)NumStr);
 8013dda:	23e7      	movs	r3, #231	; 0xe7
 8013ddc:	b29b      	uxth	r3, r3
 8013dde:	3309      	adds	r3, #9
 8013de0:	b29b      	uxth	r3, r3
 8013de2:	b218      	sxth	r0, r3
 8013de4:	4b8f      	ldr	r3, [pc, #572]	; (8014024 <Update_Detail+0xbc8>)
 8013de6:	2201      	movs	r2, #1
 8013de8:	21e1      	movs	r1, #225	; 0xe1
 8013dea:	f7fa f81f 	bl	800de2c <DispStr>
        ParamTab[VTF]=(List[TR_TYPE].Val)? L_HID : SHOW;
 8013dee:	4b89      	ldr	r3, [pc, #548]	; (8014014 <Update_Detail+0xbb8>)
 8013df0:	f9b3 3094 	ldrsh.w	r3, [r3, #148]	; 0x94
 8013df4:	2b00      	cmp	r3, #0
 8013df6:	d001      	beq.n	8013dfc <Update_Detail+0x9a0>
 8013df8:	2202      	movs	r2, #2
 8013dfa:	e000      	b.n	8013dfe <Update_Detail+0x9a2>
 8013dfc:	2200      	movs	r2, #0
 8013dfe:	4b84      	ldr	r3, [pc, #528]	; (8014010 <Update_Detail+0xbb4>)
 8013e00:	811a      	strh	r2, [r3, #8]
        break;
 8013e02:	e2dc      	b.n	80143be <Update_Detail+0xf62>
      case VIEWPOSI:  // ˢ����ʾˮƽ�Ӵ�λ��
      case SMPL_DPTH: // ˢ����ʾ�������
      case T1_POSI:   // ˢ����ʾ����α�λ��
      case T2_POSI:   // ˢ����ʾ�Ҷ��α�λ��
      case XN_TYPE:   // ˢ����ʾ�α���ʽ
        SetColor(GRY, TCOLOR[XN]);
 8013e04:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8013e08:	4619      	mov	r1, r3
 8013e0a:	f643 10e7 	movw	r0, #14823	; 0x39e7
 8013e0e:	f7f9 fff5 	bl	800ddfc <SetColor>
        if(i == TIM_BASE)
 8013e12:	8afb      	ldrh	r3, [r7, #22]
 8013e14:	2b07      	cmp	r3, #7
 8013e16:	d11e      	bne.n	8013e56 <Update_Detail+0x9fa>
        {
          Draw_Circle_D(INV, S_X[i]-3, TITLE_Y_POS, 11, 2, 6*5);
 8013e18:	8afb      	ldrh	r3, [r7, #22]
 8013e1a:	4a85      	ldr	r2, [pc, #532]	; (8014030 <Update_Detail+0xbd4>)
 8013e1c:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8013e20:	b29b      	uxth	r3, r3
 8013e22:	3b03      	subs	r3, #3
 8013e24:	b29b      	uxth	r3, r3
 8013e26:	b219      	sxth	r1, r3
 8013e28:	231e      	movs	r3, #30
 8013e2a:	9301      	str	r3, [sp, #4]
 8013e2c:	2302      	movs	r3, #2
 8013e2e:	9300      	str	r3, [sp, #0]
 8013e30:	230b      	movs	r3, #11
 8013e32:	22e1      	movs	r2, #225	; 0xe1
 8013e34:	2001      	movs	r0, #1
 8013e36:	f7fa f8cf 	bl	800dfd8 <Draw_Circle_D>
          DispStr(S_X[i], TITLE_Y_POS, INV, TimeBase_Str[List[TIM_BASE].Val]);
 8013e3a:	8afb      	ldrh	r3, [r7, #22]
 8013e3c:	4a7c      	ldr	r2, [pc, #496]	; (8014030 <Update_Detail+0xbd4>)
 8013e3e:	f932 0013 	ldrsh.w	r0, [r2, r3, lsl #1]
 8013e42:	4b74      	ldr	r3, [pc, #464]	; (8014014 <Update_Detail+0xbb8>)
 8013e44:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8013e48:	00db      	lsls	r3, r3, #3
 8013e4a:	4a7a      	ldr	r2, [pc, #488]	; (8014034 <Update_Detail+0xbd8>)
 8013e4c:	4413      	add	r3, r2
 8013e4e:	2201      	movs	r2, #1
 8013e50:	21e1      	movs	r1, #225	; 0xe1
 8013e52:	f7f9 ffeb 	bl	800de2c <DispStr>
        }
        if(i == SMPL_DPTH){
 8013e56:	8afb      	ldrh	r3, [r7, #22]
 8013e58:	2b09      	cmp	r3, #9
 8013e5a:	d126      	bne.n	8013eaa <Update_Detail+0xa4e>
          Draw_Circle_D(INV, S_X[SMPL_DPTH]-3, LABLE_Y, 11, 0, 6*11);
 8013e5c:	23f8      	movs	r3, #248	; 0xf8
 8013e5e:	b29b      	uxth	r3, r3
 8013e60:	3b03      	subs	r3, #3
 8013e62:	b29b      	uxth	r3, r3
 8013e64:	b219      	sxth	r1, r3
 8013e66:	2342      	movs	r3, #66	; 0x42
 8013e68:	9301      	str	r3, [sp, #4]
 8013e6a:	2300      	movs	r3, #0
 8013e6c:	9300      	str	r3, [sp, #0]
 8013e6e:	230b      	movs	r3, #11
 8013e70:	2203      	movs	r2, #3
 8013e72:	2001      	movs	r0, #1
 8013e74:	f7fa f8b0 	bl	800dfd8 <Draw_Circle_D>
          DispStr(S_X[SMPL_DPTH],    LABLE_Y,  INV, "SmplDpth:  ");
 8013e78:	20f8      	movs	r0, #248	; 0xf8
 8013e7a:	4b6f      	ldr	r3, [pc, #444]	; (8014038 <Update_Detail+0xbdc>)
 8013e7c:	2201      	movs	r2, #1
 8013e7e:	2103      	movs	r1, #3
 8013e80:	f7f9 ffd4 	bl	800de2c <DispStr>
          DispStr(S_X[SMPL_DPTH]+6*9, LABLE_Y,  INV, (char *)&D[List[SMPL_DPTH].Val]);
 8013e84:	23f8      	movs	r3, #248	; 0xf8
 8013e86:	b29b      	uxth	r3, r3
 8013e88:	3336      	adds	r3, #54	; 0x36
 8013e8a:	b29b      	uxth	r3, r3
 8013e8c:	b218      	sxth	r0, r3
 8013e8e:	4b61      	ldr	r3, [pc, #388]	; (8014014 <Update_Detail+0xbb8>)
 8013e90:	f9b3 304c 	ldrsh.w	r3, [r3, #76]	; 0x4c
 8013e94:	461a      	mov	r2, r3
 8013e96:	4613      	mov	r3, r2
 8013e98:	005b      	lsls	r3, r3, #1
 8013e9a:	4413      	add	r3, r2
 8013e9c:	005b      	lsls	r3, r3, #1
 8013e9e:	4a67      	ldr	r2, [pc, #412]	; (801403c <Update_Detail+0xbe0>)
 8013ea0:	4413      	add	r3, r2
 8013ea2:	2201      	movs	r2, #1
 8013ea4:	2103      	movs	r1, #3
 8013ea6:	f7f9 ffc1 	bl	800de2c <DispStr>
        }
        Update_Windows();
 8013eaa:	f000 fbad 	bl	8014608 <Update_Windows>

        ParamTab[T0x1] = 2 + Presampling - List[VIEWPOSI].Val;
 8013eae:	4b64      	ldr	r3, [pc, #400]	; (8014040 <Update_Detail+0xbe4>)
 8013eb0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8013eb4:	b29a      	uxth	r2, r3
 8013eb6:	4b57      	ldr	r3, [pc, #348]	; (8014014 <Update_Detail+0xbb8>)
 8013eb8:	f9b3 3044 	ldrsh.w	r3, [r3, #68]	; 0x44
 8013ebc:	b29b      	uxth	r3, r3
 8013ebe:	1ad3      	subs	r3, r2, r3
 8013ec0:	b29b      	uxth	r3, r3
 8013ec2:	3302      	adds	r3, #2
 8013ec4:	b29b      	uxth	r3, r3
 8013ec6:	b21a      	sxth	r2, r3
 8013ec8:	4b51      	ldr	r3, [pc, #324]	; (8014010 <Update_Detail+0xbb4>)
 8013eca:	845a      	strh	r2, [r3, #34]	; 0x22
        ParamTab[T0F] &= ~D_HID;
 8013ecc:	4b50      	ldr	r3, [pc, #320]	; (8014010 <Update_Detail+0xbb4>)
 8013ece:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8013ed2:	f023 0301 	bic.w	r3, r3, #1
 8013ed6:	b21a      	sxth	r2, r3
 8013ed8:	4b4d      	ldr	r3, [pc, #308]	; (8014010 <Update_Detail+0xbb4>)
 8013eda:	81da      	strh	r2, [r3, #14]
        ParamTab[T1F] &= ~D_HID;
 8013edc:	4b4c      	ldr	r3, [pc, #304]	; (8014010 <Update_Detail+0xbb4>)
 8013ede:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8013ee2:	f023 0301 	bic.w	r3, r3, #1
 8013ee6:	b21a      	sxth	r2, r3
 8013ee8:	4b49      	ldr	r3, [pc, #292]	; (8014010 <Update_Detail+0xbb4>)
 8013eea:	821a      	strh	r2, [r3, #16]
        ParamTab[T1F] &= ~D_HID;
 8013eec:	4b48      	ldr	r3, [pc, #288]	; (8014010 <Update_Detail+0xbb4>)
 8013eee:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8013ef2:	f023 0301 	bic.w	r3, r3, #1
 8013ef6:	b21a      	sxth	r2, r3
 8013ef8:	4b45      	ldr	r3, [pc, #276]	; (8014010 <Update_Detail+0xbb4>)
 8013efa:	821a      	strh	r2, [r3, #16]
        ParamTab[T1x1] = List[T1_POSI].Val+1;
 8013efc:	4b45      	ldr	r3, [pc, #276]	; (8014014 <Update_Detail+0xbb8>)
 8013efe:	f9b3 3054 	ldrsh.w	r3, [r3, #84]	; 0x54
 8013f02:	b29b      	uxth	r3, r3
 8013f04:	3301      	adds	r3, #1
 8013f06:	b29b      	uxth	r3, r3
 8013f08:	b21a      	sxth	r2, r3
 8013f0a:	4b41      	ldr	r3, [pc, #260]	; (8014010 <Update_Detail+0xbb4>)
 8013f0c:	849a      	strh	r2, [r3, #36]	; 0x24
        ParamTab[T2x1] = List[T2_POSI].Val+1;
 8013f0e:	4b41      	ldr	r3, [pc, #260]	; (8014014 <Update_Detail+0xbb8>)
 8013f10:	f9b3 305c 	ldrsh.w	r3, [r3, #92]	; 0x5c
 8013f14:	b29b      	uxth	r3, r3
 8013f16:	3301      	adds	r3, #1
 8013f18:	b29b      	uxth	r3, r3
 8013f1a:	b21a      	sxth	r2, r3
 8013f1c:	4b3c      	ldr	r3, [pc, #240]	; (8014010 <Update_Detail+0xbb4>)
 8013f1e:	84da      	strh	r2, [r3, #38]	; 0x26
        ParamTab[T1F]  = (List[XN_TYPE].Val)? L_HID : SHOW;
 8013f20:	4b3c      	ldr	r3, [pc, #240]	; (8014014 <Update_Detail+0xbb8>)
 8013f22:	f9b3 3064 	ldrsh.w	r3, [r3, #100]	; 0x64
 8013f26:	2b00      	cmp	r3, #0
 8013f28:	d001      	beq.n	8013f2e <Update_Detail+0xad2>
 8013f2a:	2202      	movs	r2, #2
 8013f2c:	e000      	b.n	8013f30 <Update_Detail+0xad4>
 8013f2e:	2200      	movs	r2, #0
 8013f30:	4b37      	ldr	r3, [pc, #220]	; (8014010 <Update_Detail+0xbb4>)
 8013f32:	821a      	strh	r2, [r3, #16]
        ParamTab[T2F]  = (List[XN_TYPE].Val)? L_HID : SHOW;
 8013f34:	4b37      	ldr	r3, [pc, #220]	; (8014014 <Update_Detail+0xbb8>)
 8013f36:	f9b3 3064 	ldrsh.w	r3, [r3, #100]	; 0x64
 8013f3a:	2b00      	cmp	r3, #0
 8013f3c:	d001      	beq.n	8013f42 <Update_Detail+0xae6>
 8013f3e:	2202      	movs	r2, #2
 8013f40:	e000      	b.n	8013f44 <Update_Detail+0xae8>
 8013f42:	2200      	movs	r2, #0
 8013f44:	4b32      	ldr	r3, [pc, #200]	; (8014010 <Update_Detail+0xbb4>)
 8013f46:	825a      	strh	r2, [r3, #18]
        Tmp  = ParamTab[T2x1] - ParamTab[T1x1];
 8013f48:	4b31      	ldr	r3, [pc, #196]	; (8014010 <Update_Detail+0xbb4>)
 8013f4a:	f9b3 3026 	ldrsh.w	r3, [r3, #38]	; 0x26
 8013f4e:	461a      	mov	r2, r3
 8013f50:	4b2f      	ldr	r3, [pc, #188]	; (8014010 <Update_Detail+0xbb4>)
 8013f52:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	; 0x24
 8013f56:	1ad3      	subs	r3, r2, r3
 8013f58:	613b      	str	r3, [r7, #16]
        Tmp *= B_SCALE[List[TIM_BASE].Val]* Exp(T_SCALE[List[TIM_BASE].Val]);
 8013f5a:	4b2e      	ldr	r3, [pc, #184]	; (8014014 <Update_Detail+0xbb8>)
 8013f5c:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8013f60:	461a      	mov	r2, r3
 8013f62:	4b38      	ldr	r3, [pc, #224]	; (8014044 <Update_Detail+0xbe8>)
 8013f64:	5c9b      	ldrb	r3, [r3, r2]
 8013f66:	461c      	mov	r4, r3
 8013f68:	4b2a      	ldr	r3, [pc, #168]	; (8014014 <Update_Detail+0xbb8>)
 8013f6a:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8013f6e:	461a      	mov	r2, r3
 8013f70:	4b35      	ldr	r3, [pc, #212]	; (8014048 <Update_Detail+0xbec>)
 8013f72:	5c9b      	ldrb	r3, [r3, r2]
 8013f74:	4618      	mov	r0, r3
 8013f76:	f7fd ff2d 	bl	8011dd4 <Exp>
 8013f7a:	4603      	mov	r3, r0
 8013f7c:	fb03 f204 	mul.w	r2, r3, r4
 8013f80:	693b      	ldr	r3, [r7, #16]
 8013f82:	fb02 f303 	mul.w	r3, r2, r3
 8013f86:	613b      	str	r3, [r7, #16]
        Value2Str(NumStr, Tmp, T[0], 3, UNSIGN);
 8013f88:	2301      	movs	r3, #1
 8013f8a:	9300      	str	r3, [sp, #0]
 8013f8c:	2303      	movs	r3, #3
 8013f8e:	4a2f      	ldr	r2, [pc, #188]	; (801404c <Update_Detail+0xbf0>)
 8013f90:	6939      	ldr	r1, [r7, #16]
 8013f92:	4824      	ldr	r0, [pc, #144]	; (8014024 <Update_Detail+0xbc8>)
 8013f94:	f7fd fe22 	bl	8011bdc <Value2Str>
        Draw_Circle_D(INV, S_X[V1_POSI]-3, LABLE_Y, 11, 0, 6*9);
 8013f98:	2307      	movs	r3, #7
 8013f9a:	b29b      	uxth	r3, r3
 8013f9c:	3b03      	subs	r3, #3
 8013f9e:	b29b      	uxth	r3, r3
 8013fa0:	b219      	sxth	r1, r3
 8013fa2:	2336      	movs	r3, #54	; 0x36
 8013fa4:	9301      	str	r3, [sp, #4]
 8013fa6:	2300      	movs	r3, #0
 8013fa8:	9300      	str	r3, [sp, #0]
 8013faa:	230b      	movs	r3, #11
 8013fac:	2203      	movs	r2, #3
 8013fae:	2001      	movs	r0, #1
 8013fb0:	f7fa f812 	bl	800dfd8 <Draw_Circle_D>
        DispStr(S_X[T1_POSI]+0*6, LABLE_Y, INV+SYMB, "]");
 8013fb4:	2007      	movs	r0, #7
 8013fb6:	4b26      	ldr	r3, [pc, #152]	; (8014050 <Update_Detail+0xbf4>)
 8013fb8:	2211      	movs	r2, #17
 8013fba:	2103      	movs	r1, #3
 8013fbc:	f7f9 ff36 	bl	800de2c <DispStr>
        DispStr(S_X[T1_POSI]+1*6, LABLE_Y, INV,      "T:      ");
 8013fc0:	2307      	movs	r3, #7
 8013fc2:	b29b      	uxth	r3, r3
 8013fc4:	3306      	adds	r3, #6
 8013fc6:	b29b      	uxth	r3, r3
 8013fc8:	b218      	sxth	r0, r3
 8013fca:	4b22      	ldr	r3, [pc, #136]	; (8014054 <Update_Detail+0xbf8>)
 8013fcc:	2201      	movs	r2, #1
 8013fce:	2103      	movs	r1, #3
 8013fd0:	f7f9 ff2c 	bl	800de2c <DispStr>
        DispStr(S_X[T1_POSI]+7*6, LABLE_Y, INV,  "  ");
 8013fd4:	2307      	movs	r3, #7
 8013fd6:	b29b      	uxth	r3, r3
 8013fd8:	332a      	adds	r3, #42	; 0x2a
 8013fda:	b29b      	uxth	r3, r3
 8013fdc:	b218      	sxth	r0, r3
 8013fde:	4b1e      	ldr	r3, [pc, #120]	; (8014058 <Update_Detail+0xbfc>)
 8013fe0:	2201      	movs	r2, #1
 8013fe2:	2103      	movs	r1, #3
 8013fe4:	f7f9 ff22 	bl	800de2c <DispStr>
        DispStr(S_X[T1_POSI]+3*6, LABLE_Y, INV,  (char *)NumStr);
 8013fe8:	2307      	movs	r3, #7
 8013fea:	b29b      	uxth	r3, r3
 8013fec:	3312      	adds	r3, #18
 8013fee:	b29b      	uxth	r3, r3
 8013ff0:	b218      	sxth	r0, r3
 8013ff2:	4b0c      	ldr	r3, [pc, #48]	; (8014024 <Update_Detail+0xbc8>)
 8013ff4:	2201      	movs	r2, #1
 8013ff6:	2103      	movs	r1, #3
 8013ff8:	f7f9 ff18 	bl	800de2c <DispStr>
        Set_Base(List[TIM_BASE].Val);          // Ӳ������ɨ��ʱ����λ
 8013ffc:	4b05      	ldr	r3, [pc, #20]	; (8014014 <Update_Detail+0xbb8>)
 8013ffe:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8014002:	4618      	mov	r0, r3
 8014004:	f7f8 fb32 	bl	800c66c <Set_Base>
      break;
 8014008:	e1d9      	b.n	80143be <Update_Detail+0xf62>
 801400a:	bf00      	nop
 801400c:	20000786 	.word	0x20000786
 8014010:	20000144 	.word	0x20000144
 8014014:	2000029c 	.word	0x2000029c
 8014018:	08002130 	.word	0x08002130
 801401c:	08002108 	.word	0x08002108
 8014020:	08001d00 	.word	0x08001d00
 8014024:	20002844 	.word	0x20002844
 8014028:	08000998 	.word	0x08000998
 801402c:	08000990 	.word	0x08000990
 8014030:	0800215c 	.word	0x0800215c
 8014034:	200001d4 	.word	0x200001d4
 8014038:	08000970 	.word	0x08000970
 801403c:	08001c4c 	.word	0x08001c4c
 8014040:	2000055e 	.word	0x2000055e
 8014044:	0800211c 	.word	0x0800211c
 8014048:	080020f4 	.word	0x080020f4
 801404c:	08001ce8 	.word	0x08001ce8
 8014050:	08000960 	.word	0x08000960
 8014054:	0800097c 	.word	0x0800097c
 8014058:	080009d0 	.word	0x080009d0

      case FREQUENC://��ʾƵ��
        FTmp=Edge*25*1000/2;
 801405c:	4bb7      	ldr	r3, [pc, #732]	; (801433c <Update_Detail+0xee0>)
 801405e:	681b      	ldr	r3, [r3, #0]
 8014060:	f243 02d4 	movw	r2, #12500	; 0x30d4
 8014064:	fb02 f303 	mul.w	r3, r2, r3
 8014068:	60fb      	str	r3, [r7, #12]
        if(List[TIM_BASE].Val<9)FTmp= FTmp*1000000;
 801406a:	4bb5      	ldr	r3, [pc, #724]	; (8014340 <Update_Detail+0xee4>)
 801406c:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8014070:	2b08      	cmp	r3, #8
 8014072:	dc05      	bgt.n	8014080 <Update_Detail+0xc24>
 8014074:	68fb      	ldr	r3, [r7, #12]
 8014076:	4ab3      	ldr	r2, [pc, #716]	; (8014344 <Update_Detail+0xee8>)
 8014078:	fb02 f303 	mul.w	r3, r2, r3
 801407c:	60fb      	str	r3, [r7, #12]
 801407e:	e00a      	b.n	8014096 <Update_Detail+0xc3a>
        else if(List[TIM_BASE].Val<18)FTmp= FTmp*1000;
 8014080:	4baf      	ldr	r3, [pc, #700]	; (8014340 <Update_Detail+0xee4>)
 8014082:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8014086:	2b11      	cmp	r3, #17
 8014088:	dc05      	bgt.n	8014096 <Update_Detail+0xc3a>
 801408a:	68fb      	ldr	r3, [r7, #12]
 801408c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8014090:	fb02 f303 	mul.w	r3, r2, r3
 8014094:	60fb      	str	r3, [r7, #12]
        FTmp=FTmp/Ts[List[TIM_BASE].Val]/DEPTH[List[SMPL_DPTH].Val];
 8014096:	4baa      	ldr	r3, [pc, #680]	; (8014340 <Update_Detail+0xee4>)
 8014098:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 801409c:	461a      	mov	r2, r3
 801409e:	4baa      	ldr	r3, [pc, #680]	; (8014348 <Update_Detail+0xeec>)
 80140a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80140a4:	461a      	mov	r2, r3
 80140a6:	68fb      	ldr	r3, [r7, #12]
 80140a8:	fbb3 f3f2 	udiv	r3, r3, r2
 80140ac:	4aa4      	ldr	r2, [pc, #656]	; (8014340 <Update_Detail+0xee4>)
 80140ae:	f9b2 204c 	ldrsh.w	r2, [r2, #76]	; 0x4c
 80140b2:	4611      	mov	r1, r2
 80140b4:	4aa5      	ldr	r2, [pc, #660]	; (801434c <Update_Detail+0xef0>)
 80140b6:	f932 2011 	ldrsh.w	r2, [r2, r1, lsl #1]
 80140ba:	fbb3 f3f2 	udiv	r3, r3, r2
 80140be:	60fb      	str	r3, [r7, #12]
          DispMeter(i, 1, UNSIGN,FTmp);
 80140c0:	f9b7 0016 	ldrsh.w	r0, [r7, #22]
 80140c4:	68fb      	ldr	r3, [r7, #12]
 80140c6:	2201      	movs	r2, #1
 80140c8:	2101      	movs	r1, #1
 80140ca:	f000 f9d3 	bl	8014474 <DispMeter>
      break;
 80140ce:	e176      	b.n	80143be <Update_Detail+0xf62>

      case DUTY:    //��ʾռ�ձ�
         DispMeter(i, k, UNSIGN,(HighT*100)/k);
 80140d0:	f9b7 0016 	ldrsh.w	r0, [r7, #22]
 80140d4:	887b      	ldrh	r3, [r7, #2]
 80140d6:	b2d9      	uxtb	r1, r3
 80140d8:	4b9d      	ldr	r3, [pc, #628]	; (8014350 <Update_Detail+0xef4>)
 80140da:	681b      	ldr	r3, [r3, #0]
 80140dc:	2264      	movs	r2, #100	; 0x64
 80140de:	fb02 f203 	mul.w	r2, r2, r3
 80140e2:	887b      	ldrh	r3, [r7, #2]
 80140e4:	fb92 f3f3 	sdiv	r3, r2, r3
 80140e8:	2201      	movs	r2, #1
 80140ea:	f000 f9c3 	bl	8014474 <DispMeter>
        break;
 80140ee:	e166      	b.n	80143be <Update_Detail+0xf62>

      case VRMS://��ʾ��ѹ��Чֵ
        if(abs(Vrms)<4)
 80140f0:	4b98      	ldr	r3, [pc, #608]	; (8014354 <Update_Detail+0xef8>)
 80140f2:	681b      	ldr	r3, [r3, #0]
 80140f4:	f113 0f03 	cmn.w	r3, #3
 80140f8:	db06      	blt.n	8014108 <Update_Detail+0xcac>
 80140fa:	4b96      	ldr	r3, [pc, #600]	; (8014354 <Update_Detail+0xef8>)
 80140fc:	681b      	ldr	r3, [r3, #0]
 80140fe:	2b03      	cmp	r3, #3
 8014100:	dc02      	bgt.n	8014108 <Update_Detail+0xcac>
        {
          Tmp = 0.00;
 8014102:	2300      	movs	r3, #0
 8014104:	613b      	str	r3, [r7, #16]
 8014106:	e026      	b.n	8014156 <Update_Detail+0xcfa>
        }else{
		  scale = (List[PROBEATT].Val?
 8014108:	4b8d      	ldr	r3, [pc, #564]	; (8014340 <Update_Detail+0xee4>)
 801410a:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
                  VScale_10X[List[Y_RANGES].Val]:VScale[List[Y_RANGES].Val])*40;
 801410e:	2b00      	cmp	r3, #0
 8014110:	d00b      	beq.n	801412a <Update_Detail+0xcce>
 8014112:	4b8b      	ldr	r3, [pc, #556]	; (8014340 <Update_Detail+0xee4>)
 8014114:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8014118:	461a      	mov	r2, r3
 801411a:	4b8f      	ldr	r3, [pc, #572]	; (8014358 <Update_Detail+0xefc>)
 801411c:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8014120:	4613      	mov	r3, r2
 8014122:	009b      	lsls	r3, r3, #2
 8014124:	4413      	add	r3, r2
 8014126:	00db      	lsls	r3, r3, #3
 8014128:	e00a      	b.n	8014140 <Update_Detail+0xce4>
 801412a:	4b85      	ldr	r3, [pc, #532]	; (8014340 <Update_Detail+0xee4>)
 801412c:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8014130:	461a      	mov	r2, r3
 8014132:	4b8a      	ldr	r3, [pc, #552]	; (801435c <Update_Detail+0xf00>)
 8014134:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8014138:	4613      	mov	r3, r2
 801413a:	009b      	lsls	r3, r3, #2
 801413c:	4413      	add	r3, r2
 801413e:	00db      	lsls	r3, r3, #3
		  scale = (List[PROBEATT].Val?
 8014140:	60bb      	str	r3, [r7, #8]
	          Tmp  = ((((Vrms)*Ak)>>12))*scale;
 8014142:	4b84      	ldr	r3, [pc, #528]	; (8014354 <Update_Detail+0xef8>)
 8014144:	681b      	ldr	r3, [r3, #0]
 8014146:	687a      	ldr	r2, [r7, #4]
 8014148:	fb02 f303 	mul.w	r3, r2, r3
 801414c:	131a      	asrs	r2, r3, #12
 801414e:	68bb      	ldr	r3, [r7, #8]
 8014150:	fb02 f303 	mul.w	r3, r2, r3
 8014154:	613b      	str	r3, [r7, #16]
        }
        DispMeter(i, 1, UNSIGN, Tmp);
 8014156:	f9b7 0016 	ldrsh.w	r0, [r7, #22]
 801415a:	693b      	ldr	r3, [r7, #16]
 801415c:	2201      	movs	r2, #1
 801415e:	2101      	movs	r1, #1
 8014160:	f000 f988 	bl	8014474 <DispMeter>
        break;
 8014164:	e12b      	b.n	80143be <Update_Detail+0xf62>

      case VP_P://��ʾ��ѹ���ֵ
        if(abs(Vpp)<7){
 8014166:	4b7e      	ldr	r3, [pc, #504]	; (8014360 <Update_Detail+0xf04>)
 8014168:	681b      	ldr	r3, [r3, #0]
 801416a:	f113 0f06 	cmn.w	r3, #6
 801416e:	db06      	blt.n	801417e <Update_Detail+0xd22>
 8014170:	4b7b      	ldr	r3, [pc, #492]	; (8014360 <Update_Detail+0xf04>)
 8014172:	681b      	ldr	r3, [r3, #0]
 8014174:	2b06      	cmp	r3, #6
 8014176:	dc02      	bgt.n	801417e <Update_Detail+0xd22>
          Tmp = 0.00;
 8014178:	2300      	movs	r3, #0
 801417a:	613b      	str	r3, [r7, #16]
 801417c:	e033      	b.n	80141e6 <Update_Detail+0xd8a>
        }
        else
        {
           scale = (List[PROBEATT].Val?
 801417e:	4b70      	ldr	r3, [pc, #448]	; (8014340 <Update_Detail+0xee4>)
 8014180:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
                  VScale_10X[List[Y_RANGES].Val]:VScale[List[Y_RANGES].Val])*40;
 8014184:	2b00      	cmp	r3, #0
 8014186:	d00b      	beq.n	80141a0 <Update_Detail+0xd44>
 8014188:	4b6d      	ldr	r3, [pc, #436]	; (8014340 <Update_Detail+0xee4>)
 801418a:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801418e:	461a      	mov	r2, r3
 8014190:	4b71      	ldr	r3, [pc, #452]	; (8014358 <Update_Detail+0xefc>)
 8014192:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8014196:	4613      	mov	r3, r2
 8014198:	009b      	lsls	r3, r3, #2
 801419a:	4413      	add	r3, r2
 801419c:	00db      	lsls	r3, r3, #3
 801419e:	e00a      	b.n	80141b6 <Update_Detail+0xd5a>
 80141a0:	4b67      	ldr	r3, [pc, #412]	; (8014340 <Update_Detail+0xee4>)
 80141a2:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80141a6:	461a      	mov	r2, r3
 80141a8:	4b6c      	ldr	r3, [pc, #432]	; (801435c <Update_Detail+0xf00>)
 80141aa:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80141ae:	4613      	mov	r3, r2
 80141b0:	009b      	lsls	r3, r3, #2
 80141b2:	4413      	add	r3, r2
 80141b4:	00db      	lsls	r3, r3, #3
           scale = (List[PROBEATT].Val?
 80141b6:	60bb      	str	r3, [r7, #8]
          Tmp  = ((((Vmax-2048)*(Ak))>>12)-(((Vmin-2048)*(Ak))>>12))*scale;
 80141b8:	4b6a      	ldr	r3, [pc, #424]	; (8014364 <Update_Detail+0xf08>)
 80141ba:	f9b3 3000 	ldrsh.w	r3, [r3]
 80141be:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 80141c2:	687a      	ldr	r2, [r7, #4]
 80141c4:	fb02 f303 	mul.w	r3, r2, r3
 80141c8:	131a      	asrs	r2, r3, #12
 80141ca:	4b67      	ldr	r3, [pc, #412]	; (8014368 <Update_Detail+0xf0c>)
 80141cc:	f9b3 3000 	ldrsh.w	r3, [r3]
 80141d0:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 80141d4:	6879      	ldr	r1, [r7, #4]
 80141d6:	fb01 f303 	mul.w	r3, r1, r3
 80141da:	131b      	asrs	r3, r3, #12
 80141dc:	1ad2      	subs	r2, r2, r3
 80141de:	68bb      	ldr	r3, [r7, #8]
 80141e0:	fb02 f303 	mul.w	r3, r2, r3
 80141e4:	613b      	str	r3, [r7, #16]
        }
        DispMeter(i, 1, UNSIGN, Tmp);
 80141e6:	f9b7 0016 	ldrsh.w	r0, [r7, #22]
 80141ea:	693b      	ldr	r3, [r7, #16]
 80141ec:	2201      	movs	r2, #1
 80141ee:	2101      	movs	r1, #1
 80141f0:	f000 f940 	bl	8014474 <DispMeter>
        break;
 80141f4:	e0e3      	b.n	80143be <Update_Detail+0xf62>

      case VAVG://��ʾ��ѹƽ��ֵ
        if(abs(Vavg)<4)
 80141f6:	4b5d      	ldr	r3, [pc, #372]	; (801436c <Update_Detail+0xf10>)
 80141f8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80141fc:	2b00      	cmp	r3, #0
 80141fe:	bfb8      	it	lt
 8014200:	425b      	neglt	r3, r3
 8014202:	b29b      	uxth	r3, r3
 8014204:	2b03      	cmp	r3, #3
 8014206:	d802      	bhi.n	801420e <Update_Detail+0xdb2>
        {
          Tmp = 0.00;
 8014208:	2300      	movs	r3, #0
 801420a:	613b      	str	r3, [r7, #16]
 801420c:	e02e      	b.n	801426c <Update_Detail+0xe10>
        }else{
          scale = (List[PROBEATT].Val?
 801420e:	4b4c      	ldr	r3, [pc, #304]	; (8014340 <Update_Detail+0xee4>)
 8014210:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
                  VScale_10X[List[Y_RANGES].Val]:VScale[List[Y_RANGES].Val])*40;
 8014214:	2b00      	cmp	r3, #0
 8014216:	d00b      	beq.n	8014230 <Update_Detail+0xdd4>
 8014218:	4b49      	ldr	r3, [pc, #292]	; (8014340 <Update_Detail+0xee4>)
 801421a:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801421e:	461a      	mov	r2, r3
 8014220:	4b4d      	ldr	r3, [pc, #308]	; (8014358 <Update_Detail+0xefc>)
 8014222:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8014226:	4613      	mov	r3, r2
 8014228:	009b      	lsls	r3, r3, #2
 801422a:	4413      	add	r3, r2
 801422c:	00db      	lsls	r3, r3, #3
 801422e:	e00a      	b.n	8014246 <Update_Detail+0xdea>
 8014230:	4b43      	ldr	r3, [pc, #268]	; (8014340 <Update_Detail+0xee4>)
 8014232:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8014236:	461a      	mov	r2, r3
 8014238:	4b48      	ldr	r3, [pc, #288]	; (801435c <Update_Detail+0xf00>)
 801423a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 801423e:	4613      	mov	r3, r2
 8014240:	009b      	lsls	r3, r3, #2
 8014242:	4413      	add	r3, r2
 8014244:	00db      	lsls	r3, r3, #3
          scale = (List[PROBEATT].Val?
 8014246:	60bb      	str	r3, [r7, #8]
          Tmp = ((((Vavg-2048)*(Ak))>>12)+100-List[V0_POSI].Val)*scale;
 8014248:	4b48      	ldr	r3, [pc, #288]	; (801436c <Update_Detail+0xf10>)
 801424a:	f9b3 3000 	ldrsh.w	r3, [r3]
 801424e:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 8014252:	687a      	ldr	r2, [r7, #4]
 8014254:	fb02 f303 	mul.w	r3, r2, r3
 8014258:	131b      	asrs	r3, r3, #12
 801425a:	3364      	adds	r3, #100	; 0x64
 801425c:	4a38      	ldr	r2, [pc, #224]	; (8014340 <Update_Detail+0xee4>)
 801425e:	f9b2 201c 	ldrsh.w	r2, [r2, #28]
 8014262:	1a9a      	subs	r2, r3, r2
 8014264:	68bb      	ldr	r3, [r7, #8]
 8014266:	fb02 f303 	mul.w	r3, r2, r3
 801426a:	613b      	str	r3, [r7, #16]
        }
        DispMeter(i, 1, UNSIGN, Tmp);
 801426c:	f9b7 0016 	ldrsh.w	r0, [r7, #22]
 8014270:	693b      	ldr	r3, [r7, #16]
 8014272:	2201      	movs	r2, #1
 8014274:	2101      	movs	r1, #1
 8014276:	f000 f8fd 	bl	8014474 <DispMeter>
        break;
 801427a:	e0a0      	b.n	80143be <Update_Detail+0xf62>

      case VMAX://��ʾ��ѹ���ֵ
        if(abs(Vmax)<4){
 801427c:	4b39      	ldr	r3, [pc, #228]	; (8014364 <Update_Detail+0xf08>)
 801427e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8014282:	2b00      	cmp	r3, #0
 8014284:	bfb8      	it	lt
 8014286:	425b      	neglt	r3, r3
 8014288:	b29b      	uxth	r3, r3
 801428a:	2b03      	cmp	r3, #3
 801428c:	d802      	bhi.n	8014294 <Update_Detail+0xe38>
          Tmp = 0.00;
 801428e:	2300      	movs	r3, #0
 8014290:	613b      	str	r3, [r7, #16]
 8014292:	e02e      	b.n	80142f2 <Update_Detail+0xe96>
        }else{
		  scale = (List[PROBEATT].Val?
 8014294:	4b2a      	ldr	r3, [pc, #168]	; (8014340 <Update_Detail+0xee4>)
 8014296:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
                  VScale_10X[List[Y_RANGES].Val]:VScale[List[Y_RANGES].Val])*40;
 801429a:	2b00      	cmp	r3, #0
 801429c:	d00b      	beq.n	80142b6 <Update_Detail+0xe5a>
 801429e:	4b28      	ldr	r3, [pc, #160]	; (8014340 <Update_Detail+0xee4>)
 80142a0:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80142a4:	461a      	mov	r2, r3
 80142a6:	4b2c      	ldr	r3, [pc, #176]	; (8014358 <Update_Detail+0xefc>)
 80142a8:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80142ac:	4613      	mov	r3, r2
 80142ae:	009b      	lsls	r3, r3, #2
 80142b0:	4413      	add	r3, r2
 80142b2:	00db      	lsls	r3, r3, #3
 80142b4:	e00a      	b.n	80142cc <Update_Detail+0xe70>
 80142b6:	4b22      	ldr	r3, [pc, #136]	; (8014340 <Update_Detail+0xee4>)
 80142b8:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80142bc:	461a      	mov	r2, r3
 80142be:	4b27      	ldr	r3, [pc, #156]	; (801435c <Update_Detail+0xf00>)
 80142c0:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80142c4:	4613      	mov	r3, r2
 80142c6:	009b      	lsls	r3, r3, #2
 80142c8:	4413      	add	r3, r2
 80142ca:	00db      	lsls	r3, r3, #3
		  scale = (List[PROBEATT].Val?
 80142cc:	60bb      	str	r3, [r7, #8]
          Tmp  = ((((Vmax-2048)*(Ak))>>12)+100-List[V0_POSI].Val)*scale;
 80142ce:	4b25      	ldr	r3, [pc, #148]	; (8014364 <Update_Detail+0xf08>)
 80142d0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80142d4:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 80142d8:	687a      	ldr	r2, [r7, #4]
 80142da:	fb02 f303 	mul.w	r3, r2, r3
 80142de:	131b      	asrs	r3, r3, #12
 80142e0:	3364      	adds	r3, #100	; 0x64
 80142e2:	4a17      	ldr	r2, [pc, #92]	; (8014340 <Update_Detail+0xee4>)
 80142e4:	f9b2 201c 	ldrsh.w	r2, [r2, #28]
 80142e8:	1a9a      	subs	r2, r3, r2
 80142ea:	68bb      	ldr	r3, [r7, #8]
 80142ec:	fb02 f303 	mul.w	r3, r2, r3
 80142f0:	613b      	str	r3, [r7, #16]
        }
        DispMeter(i, 1, UNSIGN, Tmp);
 80142f2:	f9b7 0016 	ldrsh.w	r0, [r7, #22]
 80142f6:	693b      	ldr	r3, [r7, #16]
 80142f8:	2201      	movs	r2, #1
 80142fa:	2101      	movs	r1, #1
 80142fc:	f000 f8ba 	bl	8014474 <DispMeter>
        break;
 8014300:	e05d      	b.n	80143be <Update_Detail+0xf62>

      case VMIN://��ʾ��ѹ��Сֵ
        if(abs(Vmin)<4){
 8014302:	4b19      	ldr	r3, [pc, #100]	; (8014368 <Update_Detail+0xf0c>)
 8014304:	f9b3 3000 	ldrsh.w	r3, [r3]
 8014308:	2b00      	cmp	r3, #0
 801430a:	bfb8      	it	lt
 801430c:	425b      	neglt	r3, r3
 801430e:	b29b      	uxth	r3, r3
 8014310:	2b03      	cmp	r3, #3
 8014312:	d802      	bhi.n	801431a <Update_Detail+0xebe>
          Tmp = 0.00;
 8014314:	2300      	movs	r3, #0
 8014316:	613b      	str	r3, [r7, #16]
 8014318:	e048      	b.n	80143ac <Update_Detail+0xf50>
        }else{
		  scale = (List[PROBEATT].Val?
 801431a:	4b09      	ldr	r3, [pc, #36]	; (8014340 <Update_Detail+0xee4>)
 801431c:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
                           VScale_10X[List[Y_RANGES].Val]:VScale[List[Y_RANGES].Val])*40;
 8014320:	2b00      	cmp	r3, #0
 8014322:	d025      	beq.n	8014370 <Update_Detail+0xf14>
 8014324:	4b06      	ldr	r3, [pc, #24]	; (8014340 <Update_Detail+0xee4>)
 8014326:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801432a:	461a      	mov	r2, r3
 801432c:	4b0a      	ldr	r3, [pc, #40]	; (8014358 <Update_Detail+0xefc>)
 801432e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8014332:	4613      	mov	r3, r2
 8014334:	009b      	lsls	r3, r3, #2
 8014336:	4413      	add	r3, r2
 8014338:	00db      	lsls	r3, r3, #3
 801433a:	e024      	b.n	8014386 <Update_Detail+0xf2a>
 801433c:	20002858 	.word	0x20002858
 8014340:	2000029c 	.word	0x2000029c
 8014344:	000f4240 	.word	0x000f4240
 8014348:	080022a0 	.word	0x080022a0
 801434c:	08002270 	.word	0x08002270
 8014350:	20006880 	.word	0x20006880
 8014354:	2000286c 	.word	0x2000286c
 8014358:	20000274 	.word	0x20000274
 801435c:	08001d68 	.word	0x08001d68
 8014360:	20006888 	.word	0x20006888
 8014364:	2000285e 	.word	0x2000285e
 8014368:	20002870 	.word	0x20002870
 801436c:	20002860 	.word	0x20002860
 8014370:	4b38      	ldr	r3, [pc, #224]	; (8014454 <Update_Detail+0xff8>)
 8014372:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8014376:	461a      	mov	r2, r3
 8014378:	4b37      	ldr	r3, [pc, #220]	; (8014458 <Update_Detail+0xffc>)
 801437a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 801437e:	4613      	mov	r3, r2
 8014380:	009b      	lsls	r3, r3, #2
 8014382:	4413      	add	r3, r2
 8014384:	00db      	lsls	r3, r3, #3
		  scale = (List[PROBEATT].Val?
 8014386:	60bb      	str	r3, [r7, #8]
                  Tmp  = ((((Vmin-2048)*(Ak))>>12)+100-List[V0_POSI].Val)*scale;
 8014388:	4b34      	ldr	r3, [pc, #208]	; (801445c <Update_Detail+0x1000>)
 801438a:	f9b3 3000 	ldrsh.w	r3, [r3]
 801438e:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 8014392:	687a      	ldr	r2, [r7, #4]
 8014394:	fb02 f303 	mul.w	r3, r2, r3
 8014398:	131b      	asrs	r3, r3, #12
 801439a:	3364      	adds	r3, #100	; 0x64
 801439c:	4a2d      	ldr	r2, [pc, #180]	; (8014454 <Update_Detail+0xff8>)
 801439e:	f9b2 201c 	ldrsh.w	r2, [r2, #28]
 80143a2:	1a9a      	subs	r2, r3, r2
 80143a4:	68bb      	ldr	r3, [r7, #8]
 80143a6:	fb02 f303 	mul.w	r3, r2, r3
 80143aa:	613b      	str	r3, [r7, #16]
        }
        DispMeter(i, 1, SIGN, Tmp);
 80143ac:	f9b7 0016 	ldrsh.w	r0, [r7, #22]
 80143b0:	693b      	ldr	r3, [r7, #16]
 80143b2:	2200      	movs	r2, #0
 80143b4:	2101      	movs	r1, #1
 80143b6:	f000 f85d 	bl	8014474 <DispMeter>
        break;
 80143ba:	e000      	b.n	80143be <Update_Detail+0xf62>
        break;
 80143bc:	bf00      	nop

        break;

      }
      /**/
      if(Freq_Flag){
 80143be:	4b28      	ldr	r3, [pc, #160]	; (8014460 <Update_Detail+0x1004>)
 80143c0:	781b      	ldrb	r3, [r3, #0]
 80143c2:	2b00      	cmp	r3, #0
 80143c4:	d03a      	beq.n	801443c <Update_Detail+0xfe0>
        Freq_Flag = 0;
 80143c6:	4b26      	ldr	r3, [pc, #152]	; (8014460 <Update_Detail+0x1004>)
 80143c8:	2200      	movs	r2, #0
 80143ca:	701a      	strb	r2, [r3, #0]
        FTmp=Edge*25*1000/2;
 80143cc:	4b25      	ldr	r3, [pc, #148]	; (8014464 <Update_Detail+0x1008>)
 80143ce:	681b      	ldr	r3, [r3, #0]
 80143d0:	f243 02d4 	movw	r2, #12500	; 0x30d4
 80143d4:	fb02 f303 	mul.w	r3, r2, r3
 80143d8:	60fb      	str	r3, [r7, #12]
        if(List[TIM_BASE].Val<9)FTmp= FTmp*1000000;
 80143da:	4b1e      	ldr	r3, [pc, #120]	; (8014454 <Update_Detail+0xff8>)
 80143dc:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 80143e0:	2b08      	cmp	r3, #8
 80143e2:	dc05      	bgt.n	80143f0 <Update_Detail+0xf94>
 80143e4:	68fb      	ldr	r3, [r7, #12]
 80143e6:	4a20      	ldr	r2, [pc, #128]	; (8014468 <Update_Detail+0x100c>)
 80143e8:	fb02 f303 	mul.w	r3, r2, r3
 80143ec:	60fb      	str	r3, [r7, #12]
 80143ee:	e00a      	b.n	8014406 <Update_Detail+0xfaa>
        else if(List[TIM_BASE].Val<18)FTmp= FTmp*1000;
 80143f0:	4b18      	ldr	r3, [pc, #96]	; (8014454 <Update_Detail+0xff8>)
 80143f2:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 80143f6:	2b11      	cmp	r3, #17
 80143f8:	dc05      	bgt.n	8014406 <Update_Detail+0xfaa>
 80143fa:	68fb      	ldr	r3, [r7, #12]
 80143fc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8014400:	fb02 f303 	mul.w	r3, r2, r3
 8014404:	60fb      	str	r3, [r7, #12]
        FTmp=FTmp/Ts[List[TIM_BASE].Val]/DEPTH[List[SMPL_DPTH].Val];
 8014406:	4b13      	ldr	r3, [pc, #76]	; (8014454 <Update_Detail+0xff8>)
 8014408:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 801440c:	461a      	mov	r2, r3
 801440e:	4b17      	ldr	r3, [pc, #92]	; (801446c <Update_Detail+0x1010>)
 8014410:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014414:	461a      	mov	r2, r3
 8014416:	68fb      	ldr	r3, [r7, #12]
 8014418:	fbb3 f3f2 	udiv	r3, r3, r2
 801441c:	4a0d      	ldr	r2, [pc, #52]	; (8014454 <Update_Detail+0xff8>)
 801441e:	f9b2 204c 	ldrsh.w	r2, [r2, #76]	; 0x4c
 8014422:	4611      	mov	r1, r2
 8014424:	4a12      	ldr	r2, [pc, #72]	; (8014470 <Update_Detail+0x1014>)
 8014426:	f932 2011 	ldrsh.w	r2, [r2, r1, lsl #1]
 801442a:	fbb3 f3f2 	udiv	r3, r3, r2
 801442e:	60fb      	str	r3, [r7, #12]
        DispFreq(    1, UNSIGN,FTmp);
 8014430:	68fb      	ldr	r3, [r7, #12]
 8014432:	461a      	mov	r2, r3
 8014434:	2101      	movs	r1, #1
 8014436:	2001      	movs	r0, #1
 8014438:	f000 fa08 	bl	801484c <DispFreq>
  for(i=Y_RANGES; i<=STANDBY; i++){
 801443c:	8afb      	ldrh	r3, [r7, #22]
 801443e:	3301      	adds	r3, #1
 8014440:	82fb      	strh	r3, [r7, #22]
 8014442:	8afb      	ldrh	r3, [r7, #22]
 8014444:	2b29      	cmp	r3, #41	; 0x29
 8014446:	f67f a849 	bls.w	80134dc <Update_Detail+0x80>
      }
    }
  }

}
 801444a:	bf00      	nop
 801444c:	bf00      	nop
 801444e:	371c      	adds	r7, #28
 8014450:	46bd      	mov	sp, r7
 8014452:	bd90      	pop	{r4, r7, pc}
 8014454:	2000029c 	.word	0x2000029c
 8014458:	08001d68 	.word	0x08001d68
 801445c:	20002870 	.word	0x20002870
 8014460:	200001d0 	.word	0x200001d0
 8014464:	20002858 	.word	0x20002858
 8014468:	000f4240 	.word	0x000f4240
 801446c:	080022a0 	.word	0x080022a0
 8014470:	08002270 	.word	0x08002270

08014474 <DispMeter>:
/*******************************************************************************

*******************************************************************************/
void DispMeter(short Item, char St, char Mode, int Val)
{
 8014474:	b580      	push	{r7, lr}
 8014476:	b084      	sub	sp, #16
 8014478:	af02      	add	r7, sp, #8
 801447a:	603b      	str	r3, [r7, #0]
 801447c:	4603      	mov	r3, r0
 801447e:	80fb      	strh	r3, [r7, #6]
 8014480:	460b      	mov	r3, r1
 8014482:	717b      	strb	r3, [r7, #5]
 8014484:	4613      	mov	r3, r2
 8014486:	713b      	strb	r3, [r7, #4]
  SetColor(GRY, TCOLOR[ME]);
 8014488:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801448c:	4619      	mov	r1, r3
 801448e:	f643 10e7 	movw	r0, #14823	; 0x39e7
 8014492:	f7f9 fcb3 	bl	800ddfc <SetColor>

  Draw_Circle_D(INV, S_X[Item]-3, LABLE_Y, 11, 0, 6*12);
 8014496:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801449a:	4a30      	ldr	r2, [pc, #192]	; (801455c <DispMeter+0xe8>)
 801449c:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 80144a0:	b29b      	uxth	r3, r3
 80144a2:	3b03      	subs	r3, #3
 80144a4:	b29b      	uxth	r3, r3
 80144a6:	b219      	sxth	r1, r3
 80144a8:	2348      	movs	r3, #72	; 0x48
 80144aa:	9301      	str	r3, [sp, #4]
 80144ac:	2300      	movs	r3, #0
 80144ae:	9300      	str	r3, [sp, #0]
 80144b0:	230b      	movs	r3, #11
 80144b2:	2203      	movs	r2, #3
 80144b4:	2001      	movs	r0, #1
 80144b6:	f7f9 fd8f 	bl	800dfd8 <Draw_Circle_D>
  DispStr(S_X[Item], LABLE_Y, INV, (char *)&Z[Item-FREQUENC]);// ��ʾ������Ŀ����
 80144ba:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80144be:	4a27      	ldr	r2, [pc, #156]	; (801455c <DispMeter+0xe8>)
 80144c0:	f932 0013 	ldrsh.w	r0, [r2, r3, lsl #1]
 80144c4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80144c8:	f1a3 0213 	sub.w	r2, r3, #19
 80144cc:	4613      	mov	r3, r2
 80144ce:	005b      	lsls	r3, r3, #1
 80144d0:	4413      	add	r3, r2
 80144d2:	005b      	lsls	r3, r3, #1
 80144d4:	4a22      	ldr	r2, [pc, #136]	; (8014560 <DispMeter+0xec>)
 80144d6:	4413      	add	r3, r2
 80144d8:	2201      	movs	r2, #1
 80144da:	2103      	movs	r1, #3
 80144dc:	f7f9 fca6 	bl	800de2c <DispStr>
  Value2Str(NumStr, Val, List[Item].PTR, 3, Mode);
 80144e0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80144e4:	4a1f      	ldr	r2, [pc, #124]	; (8014564 <DispMeter+0xf0>)
 80144e6:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 80144ea:	793b      	ldrb	r3, [r7, #4]
 80144ec:	9300      	str	r3, [sp, #0]
 80144ee:	2303      	movs	r3, #3
 80144f0:	6839      	ldr	r1, [r7, #0]
 80144f2:	481d      	ldr	r0, [pc, #116]	; (8014568 <DispMeter+0xf4>)
 80144f4:	f7fd fb72 	bl	8011bdc <Value2Str>

  if(St)
 80144f8:	797b      	ldrb	r3, [r7, #5]
 80144fa:	2b00      	cmp	r3, #0
 80144fc:	d01c      	beq.n	8014538 <DispMeter+0xc4>
  {
    DispStr(S_X[Item]+24, LABLE_Y, INV, ":       ");
 80144fe:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8014502:	4a16      	ldr	r2, [pc, #88]	; (801455c <DispMeter+0xe8>)
 8014504:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8014508:	b29b      	uxth	r3, r3
 801450a:	3318      	adds	r3, #24
 801450c:	b29b      	uxth	r3, r3
 801450e:	b218      	sxth	r0, r3
 8014510:	4b16      	ldr	r3, [pc, #88]	; (801456c <DispMeter+0xf8>)
 8014512:	2201      	movs	r2, #1
 8014514:	2103      	movs	r1, #3
 8014516:	f7f9 fc89 	bl	800de2c <DispStr>
    DispStr(S_X[Item]+30, LABLE_Y, INV, (char *)NumStr);   // ��ʾ������ֵ+����
 801451a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801451e:	4a0f      	ldr	r2, [pc, #60]	; (801455c <DispMeter+0xe8>)
 8014520:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8014524:	b29b      	uxth	r3, r3
 8014526:	331e      	adds	r3, #30
 8014528:	b29b      	uxth	r3, r3
 801452a:	b218      	sxth	r0, r3
 801452c:	4b0e      	ldr	r3, [pc, #56]	; (8014568 <DispMeter+0xf4>)
 801452e:	2201      	movs	r2, #1
 8014530:	2103      	movs	r1, #3
 8014532:	f7f9 fc7b 	bl	800de2c <DispStr>
  }
  else
	  DispStr(S_X[Item]+24, LABLE_Y, INV, ": ----- ");
}
 8014536:	e00d      	b.n	8014554 <DispMeter+0xe0>
	  DispStr(S_X[Item]+24, LABLE_Y, INV, ": ----- ");
 8014538:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801453c:	4a07      	ldr	r2, [pc, #28]	; (801455c <DispMeter+0xe8>)
 801453e:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8014542:	b29b      	uxth	r3, r3
 8014544:	3318      	adds	r3, #24
 8014546:	b29b      	uxth	r3, r3
 8014548:	b218      	sxth	r0, r3
 801454a:	4b09      	ldr	r3, [pc, #36]	; (8014570 <DispMeter+0xfc>)
 801454c:	2201      	movs	r2, #1
 801454e:	2103      	movs	r1, #3
 8014550:	f7f9 fc6c 	bl	800de2c <DispStr>
}
 8014554:	bf00      	nop
 8014556:	3708      	adds	r7, #8
 8014558:	46bd      	mov	sp, r7
 801455a:	bd80      	pop	{r7, pc}
 801455c:	0800215c 	.word	0x0800215c
 8014560:	08001d18 	.word	0x08001d18
 8014564:	2000029c 	.word	0x2000029c
 8014568:	20002844 	.word	0x20002844
 801456c:	080009d4 	.word	0x080009d4
 8014570:	080009e0 	.word	0x080009e0

08014574 <DispStatus>:

/*******************************************************************************

*******************************************************************************/
void DispStatus(void)
{
 8014574:	b580      	push	{r7, lr}
 8014576:	b084      	sub	sp, #16
 8014578:	af02      	add	r7, sp, #8
  char* p;
  SetColor(GRY, (Status & STOP) ? RED : TCOLOR[TRG]);
 801457a:	4b20      	ldr	r3, [pc, #128]	; (80145fc <DispStatus+0x88>)
 801457c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8014580:	b29b      	uxth	r3, r3
 8014582:	f003 0301 	and.w	r3, r3, #1
 8014586:	2b00      	cmp	r3, #0
 8014588:	d102      	bne.n	8014590 <DispStatus+0x1c>
 801458a:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 801458e:	e000      	b.n	8014592 <DispStatus+0x1e>
 8014590:	231f      	movs	r3, #31
 8014592:	4619      	mov	r1, r3
 8014594:	f643 10e7 	movw	r0, #14823	; 0x39e7
 8014598:	f7f9 fc30 	bl	800ddfc <SetColor>
  p =(Status & STOP)?(char*)M :(List[SYNCMODE].PTR +(List[SYNCMODE].Val)*6);
 801459c:	4b17      	ldr	r3, [pc, #92]	; (80145fc <DispStatus+0x88>)
 801459e:	f9b3 3000 	ldrsh.w	r3, [r3]
 80145a2:	b29b      	uxth	r3, r3
 80145a4:	f003 0301 	and.w	r3, r3, #1
 80145a8:	2b00      	cmp	r3, #0
 80145aa:	d10b      	bne.n	80145c4 <DispStatus+0x50>
 80145ac:	4b14      	ldr	r3, [pc, #80]	; (8014600 <DispStatus+0x8c>)
 80145ae:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 80145b0:	4b13      	ldr	r3, [pc, #76]	; (8014600 <DispStatus+0x8c>)
 80145b2:	f9b3 306c 	ldrsh.w	r3, [r3, #108]	; 0x6c
 80145b6:	4619      	mov	r1, r3
 80145b8:	460b      	mov	r3, r1
 80145ba:	005b      	lsls	r3, r3, #1
 80145bc:	440b      	add	r3, r1
 80145be:	005b      	lsls	r3, r3, #1
 80145c0:	4413      	add	r3, r2
 80145c2:	e000      	b.n	80145c6 <DispStatus+0x52>
 80145c4:	4b0f      	ldr	r3, [pc, #60]	; (8014604 <DispStatus+0x90>)
 80145c6:	607b      	str	r3, [r7, #4]
  Draw_Circle_D(INV, S_X[SYNCMODE]-3, TITLE_Y_POS, 11, 1, 6*4);
 80145c8:	f240 1321 	movw	r3, #289	; 0x121
 80145cc:	b29b      	uxth	r3, r3
 80145ce:	3b03      	subs	r3, #3
 80145d0:	b29b      	uxth	r3, r3
 80145d2:	b219      	sxth	r1, r3
 80145d4:	2318      	movs	r3, #24
 80145d6:	9301      	str	r3, [sp, #4]
 80145d8:	2301      	movs	r3, #1
 80145da:	9300      	str	r3, [sp, #0]
 80145dc:	230b      	movs	r3, #11
 80145de:	22e1      	movs	r2, #225	; 0xe1
 80145e0:	2001      	movs	r0, #1
 80145e2:	f7f9 fcf9 	bl	800dfd8 <Draw_Circle_D>
  DispStr(S_X[SYNCMODE], TITLE_Y_POS, INV, (char *)p);
 80145e6:	f240 1021 	movw	r0, #289	; 0x121
 80145ea:	687b      	ldr	r3, [r7, #4]
 80145ec:	2201      	movs	r2, #1
 80145ee:	21e1      	movs	r1, #225	; 0xe1
 80145f0:	f7f9 fc1c 	bl	800de2c <DispStr>
}
 80145f4:	bf00      	nop
 80145f6:	3708      	adds	r7, #8
 80145f8:	46bd      	mov	sp, r7
 80145fa:	bd80      	pop	{r7, pc}
 80145fc:	200007a8 	.word	0x200007a8
 8014600:	2000029c 	.word	0x2000029c
 8014604:	08001cb4 	.word	0x08001cb4

08014608 <Update_Windows>:

/*******************************************************************************
���»���������λ��
*******************************************************************************/
void Update_Windows(void)
{
 8014608:	b580      	push	{r7, lr}
 801460a:	b084      	sub	sp, #16
 801460c:	af00      	add	r7, sp, #0
  short  x0,x,y,i,j,Width;
  short  Depth =  DEPTH[List[SMPL_DPTH].Val];
 801460e:	4b6a      	ldr	r3, [pc, #424]	; (80147b8 <Update_Windows+0x1b0>)
 8014610:	f9b3 304c 	ldrsh.w	r3, [r3, #76]	; 0x4c
 8014614:	461a      	mov	r2, r3
 8014616:	4b69      	ldr	r3, [pc, #420]	; (80147bc <Update_Windows+0x1b4>)
 8014618:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 801461c:	80fb      	strh	r3, [r7, #6]
  Width =(300*300)/Depth;
 801461e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8014622:	4a67      	ldr	r2, [pc, #412]	; (80147c0 <Update_Windows+0x1b8>)
 8014624:	fb92 f3f3 	sdiv	r3, r2, r3
 8014628:	80bb      	strh	r3, [r7, #4]
  if(Current == XN &&(PopType & LIST_POP) )
 801462a:	4b66      	ldr	r3, [pc, #408]	; (80147c4 <Update_Windows+0x1bc>)
 801462c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8014630:	2b01      	cmp	r3, #1
 8014632:	f040 80a9 	bne.w	8014788 <Update_Windows+0x180>
 8014636:	4b64      	ldr	r3, [pc, #400]	; (80147c8 <Update_Windows+0x1c0>)
 8014638:	781b      	ldrb	r3, [r3, #0]
 801463a:	f003 0302 	and.w	r3, r3, #2
 801463e:	2b00      	cmp	r3, #0
 8014640:	f000 80a2 	beq.w	8014788 <Update_Windows+0x180>
  {
      Windows_Pop = 1;
 8014644:	4b61      	ldr	r3, [pc, #388]	; (80147cc <Update_Windows+0x1c4>)
 8014646:	2201      	movs	r2, #1
 8014648:	701a      	strb	r2, [r3, #0]
      x0=2+(List[VIEWPOSI].Val)*300/Depth;
 801464a:	4b5b      	ldr	r3, [pc, #364]	; (80147b8 <Update_Windows+0x1b0>)
 801464c:	f9b3 3044 	ldrsh.w	r3, [r3, #68]	; 0x44
 8014650:	461a      	mov	r2, r3
 8014652:	f44f 7396 	mov.w	r3, #300	; 0x12c
 8014656:	fb03 f202 	mul.w	r2, r3, r2
 801465a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801465e:	fb92 f3f3 	sdiv	r3, r2, r3
 8014662:	b29b      	uxth	r3, r3
 8014664:	3302      	adds	r3, #2
 8014666:	b29b      	uxth	r3, r3
 8014668:	81fb      	strh	r3, [r7, #14]
      x=2;
 801466a:	2302      	movs	r3, #2
 801466c:	81bb      	strh	r3, [r7, #12]
      y=15;
 801466e:	230f      	movs	r3, #15
 8014670:	807b      	strh	r3, [r7, #2]
      for(i=0;i<300;i++){    //��������
 8014672:	2300      	movs	r3, #0
 8014674:	817b      	strh	r3, [r7, #10]
 8014676:	e029      	b.n	80146cc <Update_Windows+0xc4>
        LCD_Set_Posi(x++, y);
 8014678:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 801467c:	b293      	uxth	r3, r2
 801467e:	3301      	adds	r3, #1
 8014680:	b29b      	uxth	r3, r3
 8014682:	81bb      	strh	r3, [r7, #12]
 8014684:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8014688:	4619      	mov	r1, r3
 801468a:	4610      	mov	r0, r2
 801468c:	f7fd fe66 	bl	801235c <LCD_Set_Posi>
        LCD_Set_Pixel(DAR);
 8014690:	f643 10e7 	movw	r0, #14823	; 0x39e7
 8014694:	f7fd feb0 	bl	80123f8 <LCD_Set_Pixel>
        for(j=0; j<2; j++)LCD_Set_Pixel(RED);
 8014698:	2300      	movs	r3, #0
 801469a:	813b      	strh	r3, [r7, #8]
 801469c:	e008      	b.n	80146b0 <Update_Windows+0xa8>
 801469e:	201f      	movs	r0, #31
 80146a0:	f7fd feaa 	bl	80123f8 <LCD_Set_Pixel>
 80146a4:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 80146a8:	b29b      	uxth	r3, r3
 80146aa:	3301      	adds	r3, #1
 80146ac:	b29b      	uxth	r3, r3
 80146ae:	813b      	strh	r3, [r7, #8]
 80146b0:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 80146b4:	2b01      	cmp	r3, #1
 80146b6:	ddf2      	ble.n	801469e <Update_Windows+0x96>
        LCD_Set_Pixel(DAR);
 80146b8:	f643 10e7 	movw	r0, #14823	; 0x39e7
 80146bc:	f7fd fe9c 	bl	80123f8 <LCD_Set_Pixel>
      for(i=0;i<300;i++){    //��������
 80146c0:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80146c4:	b29b      	uxth	r3, r3
 80146c6:	3301      	adds	r3, #1
 80146c8:	b29b      	uxth	r3, r3
 80146ca:	817b      	strh	r3, [r7, #10]
 80146cc:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80146d0:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 80146d4:	dbd0      	blt.n	8014678 <Update_Windows+0x70>
      }
      if(Current == XN && (MenuNow[XN]==SMPL_DPTH ))
 80146d6:	4b3b      	ldr	r3, [pc, #236]	; (80147c4 <Update_Windows+0x1bc>)
 80146d8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80146dc:	2b01      	cmp	r3, #1
 80146de:	d122      	bne.n	8014726 <Update_Windows+0x11e>
 80146e0:	4b3b      	ldr	r3, [pc, #236]	; (80147d0 <Update_Windows+0x1c8>)
 80146e2:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80146e6:	2b09      	cmp	r3, #9
 80146e8:	d11d      	bne.n	8014726 <Update_Windows+0x11e>
      {  //Depthѡ��
        if(Key_Buffer == KEYCODE_RIGHT || Key_Buffer == KEYCODE_LEFT)
 80146ea:	4b3a      	ldr	r3, [pc, #232]	; (80147d4 <Update_Windows+0x1cc>)
 80146ec:	781b      	ldrb	r3, [r3, #0]
 80146ee:	b2db      	uxtb	r3, r3
 80146f0:	2b06      	cmp	r3, #6
 80146f2:	d004      	beq.n	80146fe <Update_Windows+0xf6>
 80146f4:	4b37      	ldr	r3, [pc, #220]	; (80147d4 <Update_Windows+0x1cc>)
 80146f6:	781b      	ldrb	r3, [r3, #0]
 80146f8:	b2db      	uxtb	r3, r3
 80146fa:	2b05      	cmp	r3, #5
 80146fc:	d113      	bne.n	8014726 <Update_Windows+0x11e>
        {  //ѡ���б䶯ʱ�ı�Ԥ����λ��
          List[VIEWPOSI].Val= 0;
 80146fe:	4b2e      	ldr	r3, [pc, #184]	; (80147b8 <Update_Windows+0x1b0>)
 8014700:	2200      	movs	r2, #0
 8014702:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
          x0=2+(List[VIEWPOSI].Val)*300/Depth;
 8014706:	4b2c      	ldr	r3, [pc, #176]	; (80147b8 <Update_Windows+0x1b0>)
 8014708:	f9b3 3044 	ldrsh.w	r3, [r3, #68]	; 0x44
 801470c:	461a      	mov	r2, r3
 801470e:	f44f 7396 	mov.w	r3, #300	; 0x12c
 8014712:	fb03 f202 	mul.w	r2, r3, r2
 8014716:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801471a:	fb92 f3f3 	sdiv	r3, r2, r3
 801471e:	b29b      	uxth	r3, r3
 8014720:	3302      	adds	r3, #2
 8014722:	b29b      	uxth	r3, r3
 8014724:	81fb      	strh	r3, [r7, #14]
        }
      }
      x = x0;               //��ǰ�����ڻ�����λ��
 8014726:	89fb      	ldrh	r3, [r7, #14]
 8014728:	81bb      	strh	r3, [r7, #12]
      y=15;
 801472a:	230f      	movs	r3, #15
 801472c:	807b      	strh	r3, [r7, #2]
      for(i=0;i<Width;i++){
 801472e:	2300      	movs	r3, #0
 8014730:	817b      	strh	r3, [r7, #10]
 8014732:	e022      	b.n	801477a <Update_Windows+0x172>
        LCD_Set_Posi(x++, y);
 8014734:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8014738:	b293      	uxth	r3, r2
 801473a:	3301      	adds	r3, #1
 801473c:	b29b      	uxth	r3, r3
 801473e:	81bb      	strh	r3, [r7, #12]
 8014740:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8014744:	4619      	mov	r1, r3
 8014746:	4610      	mov	r0, r2
 8014748:	f7fd fe08 	bl	801235c <LCD_Set_Posi>
        for(j=0; j<4; j++)LCD_Set_Pixel(GRN);
 801474c:	2300      	movs	r3, #0
 801474e:	813b      	strh	r3, [r7, #8]
 8014750:	e009      	b.n	8014766 <Update_Windows+0x15e>
 8014752:	f44f 60fc 	mov.w	r0, #2016	; 0x7e0
 8014756:	f7fd fe4f 	bl	80123f8 <LCD_Set_Pixel>
 801475a:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 801475e:	b29b      	uxth	r3, r3
 8014760:	3301      	adds	r3, #1
 8014762:	b29b      	uxth	r3, r3
 8014764:	813b      	strh	r3, [r7, #8]
 8014766:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 801476a:	2b03      	cmp	r3, #3
 801476c:	ddf1      	ble.n	8014752 <Update_Windows+0x14a>
      for(i=0;i<Width;i++){
 801476e:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8014772:	b29b      	uxth	r3, r3
 8014774:	3301      	adds	r3, #1
 8014776:	b29b      	uxth	r3, r3
 8014778:	817b      	strh	r3, [r7, #10]
 801477a:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 801477e:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8014782:	429a      	cmp	r2, r3
 8014784:	dbd6      	blt.n	8014734 <Update_Windows+0x12c>
  if(Current == XN &&(PopType & LIST_POP) )
 8014786:	e012      	b.n	80147ae <Update_Windows+0x1a6>
      }
  }
  else if(Current == XN &&!(PopType & LIST_POP))
 8014788:	4b0e      	ldr	r3, [pc, #56]	; (80147c4 <Update_Windows+0x1bc>)
 801478a:	f9b3 3000 	ldrsh.w	r3, [r3]
 801478e:	2b01      	cmp	r3, #1
 8014790:	d10d      	bne.n	80147ae <Update_Windows+0x1a6>
 8014792:	4b0d      	ldr	r3, [pc, #52]	; (80147c8 <Update_Windows+0x1c0>)
 8014794:	781b      	ldrb	r3, [r3, #0]
 8014796:	f003 0302 	and.w	r3, r3, #2
 801479a:	2b00      	cmp	r3, #0
 801479c:	d107      	bne.n	80147ae <Update_Windows+0x1a6>
  {
    Windows_Pop = 0;
 801479e:	4b0b      	ldr	r3, [pc, #44]	; (80147cc <Update_Windows+0x1c4>)
 80147a0:	2200      	movs	r2, #0
 80147a2:	701a      	strb	r2, [r3, #0]
    Clr_WavePosi(DAR);
 80147a4:	f643 10e7 	movw	r0, #14823	; 0x39e7
 80147a8:	f000 f816 	bl	80147d8 <Clr_WavePosi>
  }
}
 80147ac:	e7ff      	b.n	80147ae <Update_Windows+0x1a6>
 80147ae:	bf00      	nop
 80147b0:	3710      	adds	r7, #16
 80147b2:	46bd      	mov	sp, r7
 80147b4:	bd80      	pop	{r7, pc}
 80147b6:	bf00      	nop
 80147b8:	2000029c 	.word	0x2000029c
 80147bc:	08002270 	.word	0x08002270
 80147c0:	00015f90 	.word	0x00015f90
 80147c4:	200007a6 	.word	0x200007a6
 80147c8:	20000796 	.word	0x20000796
 80147cc:	200007ae 	.word	0x200007ae
 80147d0:	2000053c 	.word	0x2000053c
 80147d4:	20000781 	.word	0x20000781

080147d8 <Clr_WavePosi>:

/*******************************************************************************
 void Clr_WavePosi(u16 Col)  �������λ����ʾ
*******************************************************************************/
void Clr_WavePosi(short Col)
{
 80147d8:	b580      	push	{r7, lr}
 80147da:	b084      	sub	sp, #16
 80147dc:	af00      	add	r7, sp, #0
 80147de:	4603      	mov	r3, r0
 80147e0:	80fb      	strh	r3, [r7, #6]
  short x,y,i,j;
  x=2;
 80147e2:	2302      	movs	r3, #2
 80147e4:	81fb      	strh	r3, [r7, #14]
  y=14;
 80147e6:	230e      	movs	r3, #14
 80147e8:	813b      	strh	r3, [r7, #8]
  for(i=0;i<300;i++)
 80147ea:	2300      	movs	r3, #0
 80147ec:	81bb      	strh	r3, [r7, #12]
 80147ee:	e022      	b.n	8014836 <Clr_WavePosi+0x5e>
  {
    LCD_Set_Posi(x++, y);
 80147f0:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 80147f4:	b293      	uxth	r3, r2
 80147f6:	3301      	adds	r3, #1
 80147f8:	b29b      	uxth	r3, r3
 80147fa:	81fb      	strh	r3, [r7, #14]
 80147fc:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8014800:	4619      	mov	r1, r3
 8014802:	4610      	mov	r0, r2
 8014804:	f7fd fdaa 	bl	801235c <LCD_Set_Posi>
    for(j=0; j<6; j++)
 8014808:	2300      	movs	r3, #0
 801480a:	817b      	strh	r3, [r7, #10]
 801480c:	e009      	b.n	8014822 <Clr_WavePosi+0x4a>
    	LCD_Set_Pixel(Col);
 801480e:	88fb      	ldrh	r3, [r7, #6]
 8014810:	4618      	mov	r0, r3
 8014812:	f7fd fdf1 	bl	80123f8 <LCD_Set_Pixel>
    for(j=0; j<6; j++)
 8014816:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 801481a:	b29b      	uxth	r3, r3
 801481c:	3301      	adds	r3, #1
 801481e:	b29b      	uxth	r3, r3
 8014820:	817b      	strh	r3, [r7, #10]
 8014822:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8014826:	2b05      	cmp	r3, #5
 8014828:	ddf1      	ble.n	801480e <Clr_WavePosi+0x36>
  for(i=0;i<300;i++)
 801482a:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 801482e:	b29b      	uxth	r3, r3
 8014830:	3301      	adds	r3, #1
 8014832:	b29b      	uxth	r3, r3
 8014834:	81bb      	strh	r3, [r7, #12]
 8014836:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 801483a:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 801483e:	dbd7      	blt.n	80147f0 <Clr_WavePosi+0x18>
  }
}
 8014840:	bf00      	nop
 8014842:	bf00      	nop
 8014844:	3710      	adds	r7, #16
 8014846:	46bd      	mov	sp, r7
 8014848:	bd80      	pop	{r7, pc}
	...

0801484c <DispFreq>:

/*******************************************************************************

*******************************************************************************/
void DispFreq(char St, char Mode, int Val)
{
 801484c:	b580      	push	{r7, lr}
 801484e:	b084      	sub	sp, #16
 8014850:	af02      	add	r7, sp, #8
 8014852:	4603      	mov	r3, r0
 8014854:	603a      	str	r2, [r7, #0]
 8014856:	71fb      	strb	r3, [r7, #7]
 8014858:	460b      	mov	r3, r1
 801485a:	71bb      	strb	r3, [r7, #6]
  SetColor(GRY, TCOLOR[ME]);
 801485c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8014860:	4619      	mov	r1, r3
 8014862:	f643 10e7 	movw	r0, #14823	; 0x39e7
 8014866:	f7f9 fac9 	bl	800ddfc <SetColor>

  Draw_Circle_D(INV, S_X[FREQUENC]-6*15-3+4, LABLE_Y, 11, 0, 6*12);
 801486a:	23a2      	movs	r3, #162	; 0xa2
 801486c:	b29b      	uxth	r3, r3
 801486e:	3b59      	subs	r3, #89	; 0x59
 8014870:	b29b      	uxth	r3, r3
 8014872:	b219      	sxth	r1, r3
 8014874:	2348      	movs	r3, #72	; 0x48
 8014876:	9301      	str	r3, [sp, #4]
 8014878:	2300      	movs	r3, #0
 801487a:	9300      	str	r3, [sp, #0]
 801487c:	230b      	movs	r3, #11
 801487e:	2203      	movs	r2, #3
 8014880:	2001      	movs	r0, #1
 8014882:	f7f9 fba9 	bl	800dfd8 <Draw_Circle_D>
  DispStr(S_X[FREQUENC]-6*15+4, LABLE_Y, INV, (char*)&Z[0]);// ��ʾ������Ŀ����
 8014886:	23a2      	movs	r3, #162	; 0xa2
 8014888:	b29b      	uxth	r3, r3
 801488a:	3b56      	subs	r3, #86	; 0x56
 801488c:	b29b      	uxth	r3, r3
 801488e:	b218      	sxth	r0, r3
 8014890:	4b1a      	ldr	r3, [pc, #104]	; (80148fc <DispFreq+0xb0>)
 8014892:	2201      	movs	r2, #1
 8014894:	2103      	movs	r1, #3
 8014896:	f7f9 fac9 	bl	800de2c <DispStr>
  Value2Str(NumStr, Val, List[FREQUENC].PTR, 3, Mode);
 801489a:	4b19      	ldr	r3, [pc, #100]	; (8014900 <DispFreq+0xb4>)
 801489c:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 80148a0:	79bb      	ldrb	r3, [r7, #6]
 80148a2:	9300      	str	r3, [sp, #0]
 80148a4:	2303      	movs	r3, #3
 80148a6:	6839      	ldr	r1, [r7, #0]
 80148a8:	4816      	ldr	r0, [pc, #88]	; (8014904 <DispFreq+0xb8>)
 80148aa:	f7fd f997 	bl	8011bdc <Value2Str>

  if(St) {
 80148ae:	79fb      	ldrb	r3, [r7, #7]
 80148b0:	2b00      	cmp	r3, #0
 80148b2:	d014      	beq.n	80148de <DispFreq+0x92>
    DispStr(24+S_X[FREQUENC]-6*15+4, LABLE_Y, INV, ":       ");
 80148b4:	23a2      	movs	r3, #162	; 0xa2
 80148b6:	b29b      	uxth	r3, r3
 80148b8:	3b3e      	subs	r3, #62	; 0x3e
 80148ba:	b29b      	uxth	r3, r3
 80148bc:	b218      	sxth	r0, r3
 80148be:	4b12      	ldr	r3, [pc, #72]	; (8014908 <DispFreq+0xbc>)
 80148c0:	2201      	movs	r2, #1
 80148c2:	2103      	movs	r1, #3
 80148c4:	f7f9 fab2 	bl	800de2c <DispStr>
    DispStr(30+S_X[FREQUENC]-6*15+4, LABLE_Y, INV, (char *)NumStr);   // ��ʾ������ֵ+����
 80148c8:	23a2      	movs	r3, #162	; 0xa2
 80148ca:	b29b      	uxth	r3, r3
 80148cc:	3b38      	subs	r3, #56	; 0x38
 80148ce:	b29b      	uxth	r3, r3
 80148d0:	b218      	sxth	r0, r3
 80148d2:	4b0c      	ldr	r3, [pc, #48]	; (8014904 <DispFreq+0xb8>)
 80148d4:	2201      	movs	r2, #1
 80148d6:	2103      	movs	r1, #3
 80148d8:	f7f9 faa8 	bl	800de2c <DispStr>
  }
  else   DispStr(24+S_X[FREQUENC]-6*15+4, LABLE_Y, INV, ": ---- ");
}
 80148dc:	e009      	b.n	80148f2 <DispFreq+0xa6>
  else   DispStr(24+S_X[FREQUENC]-6*15+4, LABLE_Y, INV, ": ---- ");
 80148de:	23a2      	movs	r3, #162	; 0xa2
 80148e0:	b29b      	uxth	r3, r3
 80148e2:	3b3e      	subs	r3, #62	; 0x3e
 80148e4:	b29b      	uxth	r3, r3
 80148e6:	b218      	sxth	r0, r3
 80148e8:	4b08      	ldr	r3, [pc, #32]	; (801490c <DispFreq+0xc0>)
 80148ea:	2201      	movs	r2, #1
 80148ec:	2103      	movs	r1, #3
 80148ee:	f7f9 fa9d 	bl	800de2c <DispStr>
}
 80148f2:	bf00      	nop
 80148f4:	3708      	adds	r7, #8
 80148f6:	46bd      	mov	sp, r7
 80148f8:	bd80      	pop	{r7, pc}
 80148fa:	bf00      	nop
 80148fc:	08001d18 	.word	0x08001d18
 8014900:	2000029c 	.word	0x2000029c
 8014904:	20002844 	.word	0x20002844
 8014908:	080009d4 	.word	0x080009d4
 801490c:	080009ec 	.word	0x080009ec

08014910 <Show_List>:

/*******************************************************************************
 Show_List: ���ò˵���λ�á��ߴ硢��ɫ����ʾ����
*******************************************************************************/
void Show_List(void)
{
 8014910:	b580      	push	{r7, lr}
 8014912:	b088      	sub	sp, #32
 8014914:	af02      	add	r7, sp, #8
  short i, Ny0, Nx0, CurrentMax = MU_BEGN[Current]+ M_ITEMS[Current];
 8014916:	4b59      	ldr	r3, [pc, #356]	; (8014a7c <Show_List+0x16c>)
 8014918:	f9b3 3000 	ldrsh.w	r3, [r3]
 801491c:	461a      	mov	r2, r3
 801491e:	4b58      	ldr	r3, [pc, #352]	; (8014a80 <Show_List+0x170>)
 8014920:	5c9b      	ldrb	r3, [r3, r2]
 8014922:	b29a      	uxth	r2, r3
 8014924:	4b55      	ldr	r3, [pc, #340]	; (8014a7c <Show_List+0x16c>)
 8014926:	f9b3 3000 	ldrsh.w	r3, [r3]
 801492a:	4619      	mov	r1, r3
 801492c:	4b55      	ldr	r3, [pc, #340]	; (8014a84 <Show_List+0x174>)
 801492e:	5c5b      	ldrb	r3, [r3, r1]
 8014930:	b29b      	uxth	r3, r3
 8014932:	4413      	add	r3, r2
 8014934:	b29b      	uxth	r3, r3
 8014936:	827b      	strh	r3, [r7, #18]
  char  Flag = 0;
 8014938:	2300      	movs	r3, #0
 801493a:	757b      	strb	r3, [r7, #21]
  char  str[12];
  ParamTab[BXx1]= BLOCK_X[Current];
 801493c:	4b4f      	ldr	r3, [pc, #316]	; (8014a7c <Show_List+0x16c>)
 801493e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8014942:	461a      	mov	r2, r3
 8014944:	4b50      	ldr	r3, [pc, #320]	; (8014a88 <Show_List+0x178>)
 8014946:	5c9b      	ldrb	r3, [r3, r2]
 8014948:	b21a      	sxth	r2, r3
 801494a:	4b50      	ldr	r3, [pc, #320]	; (8014a8c <Show_List+0x17c>)
 801494c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  ParamTab[BYx2]= BLOCK_Y[Current]*2;
 8014950:	4b4a      	ldr	r3, [pc, #296]	; (8014a7c <Show_List+0x16c>)
 8014952:	f9b3 3000 	ldrsh.w	r3, [r3]
 8014956:	461a      	mov	r2, r3
 8014958:	4b4d      	ldr	r3, [pc, #308]	; (8014a90 <Show_List+0x180>)
 801495a:	5c9b      	ldrb	r3, [r3, r2]
 801495c:	b29b      	uxth	r3, r3
 801495e:	005b      	lsls	r3, r3, #1
 8014960:	b29b      	uxth	r3, r3
 8014962:	b21a      	sxth	r2, r3
 8014964:	4b49      	ldr	r3, [pc, #292]	; (8014a8c <Show_List+0x17c>)
 8014966:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
  ParamTab[WXx1]= BLOCK_W[Current];
 801496a:	4b44      	ldr	r3, [pc, #272]	; (8014a7c <Show_List+0x16c>)
 801496c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8014970:	461a      	mov	r2, r3
 8014972:	4b48      	ldr	r3, [pc, #288]	; (8014a94 <Show_List+0x184>)
 8014974:	5c9b      	ldrb	r3, [r3, r2]
 8014976:	b21a      	sxth	r2, r3
 8014978:	4b44      	ldr	r3, [pc, #272]	; (8014a8c <Show_List+0x17c>)
 801497a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  ParamTab[HYx2]=(M_ITEMS[Current]+1)*32;
 801497e:	4b3f      	ldr	r3, [pc, #252]	; (8014a7c <Show_List+0x16c>)
 8014980:	f9b3 3000 	ldrsh.w	r3, [r3]
 8014984:	461a      	mov	r2, r3
 8014986:	4b3f      	ldr	r3, [pc, #252]	; (8014a84 <Show_List+0x174>)
 8014988:	5c9b      	ldrb	r3, [r3, r2]
 801498a:	3301      	adds	r3, #1
 801498c:	b29b      	uxth	r3, r3
 801498e:	015b      	lsls	r3, r3, #5
 8014990:	b29b      	uxth	r3, r3
 8014992:	b21a      	sxth	r2, r3
 8014994:	4b3d      	ldr	r3, [pc, #244]	; (8014a8c <Show_List+0x17c>)
 8014996:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
  PopColor(WHT, DAR);
 801499a:	f643 11e7 	movw	r1, #14823	; 0x39e7
 801499e:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80149a2:	f7f9 ff95 	bl	800e8d0 <PopColor>
  Buil_Pop();
 80149a6:	f7f9 fe85 	bl	800e6b4 <Buil_Pop>
  for(i=MU_BEGN[Current]; i<CurrentMax; i++){
 80149aa:	4b34      	ldr	r3, [pc, #208]	; (8014a7c <Show_List+0x16c>)
 80149ac:	f9b3 3000 	ldrsh.w	r3, [r3]
 80149b0:	461a      	mov	r2, r3
 80149b2:	4b33      	ldr	r3, [pc, #204]	; (8014a80 <Show_List+0x170>)
 80149b4:	5c9b      	ldrb	r3, [r3, r2]
 80149b6:	82fb      	strh	r3, [r7, #22]
 80149b8:	e054      	b.n	8014a64 <Show_List+0x154>
    if(i == MenuNow[Current]) {
 80149ba:	4b30      	ldr	r3, [pc, #192]	; (8014a7c <Show_List+0x16c>)
 80149bc:	f9b3 3000 	ldrsh.w	r3, [r3]
 80149c0:	461a      	mov	r2, r3
 80149c2:	4b35      	ldr	r3, [pc, #212]	; (8014a98 <Show_List+0x188>)
 80149c4:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 80149c8:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80149cc:	429a      	cmp	r2, r3
 80149ce:	d102      	bne.n	80149d6 <Show_List+0xc6>
      Flag = INV;
 80149d0:	2301      	movs	r3, #1
 80149d2:	757b      	strb	r3, [r7, #21]
 80149d4:	e007      	b.n	80149e6 <Show_List+0xd6>
    }
    else                      {
      PopColor(WHT, DAR);
 80149d6:	f643 11e7 	movw	r1, #14823	; 0x39e7
 80149da:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80149de:	f7f9 ff77 	bl	800e8d0 <PopColor>
      Flag = PRN;
 80149e2:	2300      	movs	r3, #0
 80149e4:	757b      	strb	r3, [r7, #21]
    }
    Ny0 = ((CurrentMax - i)*17 - 10);
 80149e6:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 80149ea:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80149ee:	1ad3      	subs	r3, r2, r3
 80149f0:	b29b      	uxth	r3, r3
 80149f2:	461a      	mov	r2, r3
 80149f4:	0112      	lsls	r2, r2, #4
 80149f6:	4413      	add	r3, r2
 80149f8:	b29b      	uxth	r3, r3
 80149fa:	3b0a      	subs	r3, #10
 80149fc:	b29b      	uxth	r3, r3
 80149fe:	823b      	strh	r3, [r7, #16]
    Nx0 = N_X ;
 8014a00:	2304      	movs	r3, #4
 8014a02:	81fb      	strh	r3, [r7, #14]
    memset(str,0,12);
 8014a04:	463b      	mov	r3, r7
 8014a06:	220c      	movs	r2, #12
 8014a08:	2100      	movs	r1, #0
 8014a0a:	4618      	mov	r0, r3
 8014a0c:	f00e fa4a 	bl	8022ea4 <memset>
    memcpy(str,&ESTR[i],10);
 8014a10:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8014a14:	4613      	mov	r3, r2
 8014a16:	009b      	lsls	r3, r3, #2
 8014a18:	4413      	add	r3, r2
 8014a1a:	005b      	lsls	r3, r3, #1
 8014a1c:	4a1f      	ldr	r2, [pc, #124]	; (8014a9c <Show_List+0x18c>)
 8014a1e:	1899      	adds	r1, r3, r2
 8014a20:	463b      	mov	r3, r7
 8014a22:	220a      	movs	r2, #10
 8014a24:	4618      	mov	r0, r3
 8014a26:	f00e fa2f 	bl	8022e88 <memcpy>
    NoteSTR(Nx0, Ny0, Flag, (char *)str);
 8014a2a:	463b      	mov	r3, r7
 8014a2c:	7d7a      	ldrb	r2, [r7, #21]
 8014a2e:	f9b7 1010 	ldrsh.w	r1, [r7, #16]
 8014a32:	f9b7 000e 	ldrsh.w	r0, [r7, #14]
 8014a36:	f7fa f89b 	bl	800eb70 <NoteSTR>
    Note_4Point(PRN, Nx0, Ny0, strlen((char*)str), Font6x8_H);
 8014a3a:	463b      	mov	r3, r7
 8014a3c:	4618      	mov	r0, r3
 8014a3e:	f7f7 faff 	bl	800c040 <strlen>
 8014a42:	4603      	mov	r3, r0
 8014a44:	b2db      	uxtb	r3, r3
 8014a46:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8014a4a:	f9b7 100e 	ldrsh.w	r1, [r7, #14]
 8014a4e:	200a      	movs	r0, #10
 8014a50:	9000      	str	r0, [sp, #0]
 8014a52:	2000      	movs	r0, #0
 8014a54:	f7fa f932 	bl	800ecbc <Note_4Point>
  for(i=MU_BEGN[Current]; i<CurrentMax; i++){
 8014a58:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8014a5c:	b29b      	uxth	r3, r3
 8014a5e:	3301      	adds	r3, #1
 8014a60:	b29b      	uxth	r3, r3
 8014a62:	82fb      	strh	r3, [r7, #22]
 8014a64:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8014a68:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8014a6c:	429a      	cmp	r2, r3
 8014a6e:	dba4      	blt.n	80149ba <Show_List+0xaa>
  }
  List_Pop();
 8014a70:	f7f9 ff5e 	bl	800e930 <List_Pop>
}
 8014a74:	bf00      	nop
 8014a76:	3718      	adds	r7, #24
 8014a78:	46bd      	mov	sp, r7
 8014a7a:	bd80      	pop	{r7, pc}
 8014a7c:	200007a6 	.word	0x200007a6
 8014a80:	08001f40 	.word	0x08001f40
 8014a84:	08001f48 	.word	0x08001f48
 8014a88:	08002144 	.word	0x08002144
 8014a8c:	20000144 	.word	0x20000144
 8014a90:	0800214c 	.word	0x0800214c
 8014a94:	08002154 	.word	0x08002154
 8014a98:	2000053c 	.word	0x2000053c
 8014a9c:	08001f50 	.word	0x08001f50

08014aa0 <DispFileInfo>:

/*******************************************************************************

*******************************************************************************/
void DispFileInfo(char Info)
{
 8014aa0:	b580      	push	{r7, lr}
 8014aa2:	b084      	sub	sp, #16
 8014aa4:	af02      	add	r7, sp, #8
 8014aa6:	4603      	mov	r3, r0
 8014aa8:	71fb      	strb	r3, [r7, #7]
  SetColor(DAR, BLU);
 8014aaa:	f64f 4110 	movw	r1, #64528	; 0xfc10
 8014aae:	f643 10e7 	movw	r0, #14823	; 0x39e7
 8014ab2:	f7f9 f9a3 	bl	800ddfc <SetColor>
  Draw_Circle_D(INV, S_X[SAVE_BMP]-3, LABLE_Y, 11, 0, 6*11);
 8014ab6:	23f8      	movs	r3, #248	; 0xf8
 8014ab8:	b29b      	uxth	r3, r3
 8014aba:	3b03      	subs	r3, #3
 8014abc:	b29b      	uxth	r3, r3
 8014abe:	b219      	sxth	r1, r3
 8014ac0:	2342      	movs	r3, #66	; 0x42
 8014ac2:	9301      	str	r3, [sp, #4]
 8014ac4:	2300      	movs	r3, #0
 8014ac6:	9300      	str	r3, [sp, #0]
 8014ac8:	230b      	movs	r3, #11
 8014aca:	2203      	movs	r2, #3
 8014acc:	2001      	movs	r0, #1
 8014ace:	f7f9 fa83 	bl	800dfd8 <Draw_Circle_D>
  DispStr(S_X[SAVE_BMP], LABLE_Y, INV, (char *)(&FnNote+14*Info));
 8014ad2:	20f8      	movs	r0, #248	; 0xf8
 8014ad4:	79fb      	ldrb	r3, [r7, #7]
 8014ad6:	f44f 7275 	mov.w	r2, #980	; 0x3d4
 8014ada:	fb02 f303 	mul.w	r3, r2, r3
 8014ade:	4a07      	ldr	r2, [pc, #28]	; (8014afc <DispFileInfo+0x5c>)
 8014ae0:	4413      	add	r3, r2
 8014ae2:	2201      	movs	r2, #1
 8014ae4:	2103      	movs	r1, #3
 8014ae6:	f7f9 f9a1 	bl	800de2c <DispStr>
  HAL_Delay(2000);
 8014aea:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8014aee:	f003 fda5 	bl	801863c <HAL_Delay>

}
 8014af2:	bf00      	nop
 8014af4:	3708      	adds	r7, #8
 8014af6:	46bd      	mov	sp, r7
 8014af8:	bd80      	pop	{r7, pc}
 8014afa:	bf00      	nop
 8014afc:	080022f0 	.word	0x080022f0

08014b00 <DispBMPInfo>:

/*******************************************************************************

*******************************************************************************/
void DispBMPInfo(void)
{
 8014b00:	b580      	push	{r7, lr}
 8014b02:	b082      	sub	sp, #8
 8014b04:	af02      	add	r7, sp, #8
  SetColor(GRY, TCOLOR[FN]);
 8014b06:	f64f 4310 	movw	r3, #64528	; 0xfc10
 8014b0a:	4619      	mov	r1, r3
 8014b0c:	f643 10e7 	movw	r0, #14823	; 0x39e7
 8014b10:	f7f9 f974 	bl	800ddfc <SetColor>
  u8ToDec3(NumStr, List[SAVE_BMP].Val);
 8014b14:	4b1a      	ldr	r3, [pc, #104]	; (8014b80 <DispBMPInfo+0x80>)
 8014b16:	f9b3 30ec 	ldrsh.w	r3, [r3, #236]	; 0xec
 8014b1a:	b2db      	uxtb	r3, r3
 8014b1c:	4619      	mov	r1, r3
 8014b1e:	4819      	ldr	r0, [pc, #100]	; (8014b84 <DispBMPInfo+0x84>)
 8014b20:	f7fc fff4 	bl	8011b0c <u8ToDec3>
  Draw_Circle_D(INV, S_X[SAVE_BMP]-3, LABLE_Y, 11, 0, 6*11);
 8014b24:	23f8      	movs	r3, #248	; 0xf8
 8014b26:	b29b      	uxth	r3, r3
 8014b28:	3b03      	subs	r3, #3
 8014b2a:	b29b      	uxth	r3, r3
 8014b2c:	b219      	sxth	r1, r3
 8014b2e:	2342      	movs	r3, #66	; 0x42
 8014b30:	9301      	str	r3, [sp, #4]
 8014b32:	2300      	movs	r3, #0
 8014b34:	9300      	str	r3, [sp, #0]
 8014b36:	230b      	movs	r3, #11
 8014b38:	2203      	movs	r2, #3
 8014b3a:	2001      	movs	r0, #1
 8014b3c:	f7f9 fa4c 	bl	800dfd8 <Draw_Circle_D>
  DispStr(S_X[SAVE_BMP],    LABLE_Y, INV, ("Save"));//0513
 8014b40:	20f8      	movs	r0, #248	; 0xf8
 8014b42:	4b11      	ldr	r3, [pc, #68]	; (8014b88 <DispBMPInfo+0x88>)
 8014b44:	2201      	movs	r2, #1
 8014b46:	2103      	movs	r1, #3
 8014b48:	f7f9 f970 	bl	800de2c <DispStr>
  DispStr(S_X[SAVE_BMP]+24, LABLE_Y, INV, (char *)NumStr);
 8014b4c:	23f8      	movs	r3, #248	; 0xf8
 8014b4e:	b29b      	uxth	r3, r3
 8014b50:	3318      	adds	r3, #24
 8014b52:	b29b      	uxth	r3, r3
 8014b54:	b218      	sxth	r0, r3
 8014b56:	4b0b      	ldr	r3, [pc, #44]	; (8014b84 <DispBMPInfo+0x84>)
 8014b58:	2201      	movs	r2, #1
 8014b5a:	2103      	movs	r1, #3
 8014b5c:	f7f9 f966 	bl	800de2c <DispStr>
  DispStr(S_X[SAVE_BMP]+42, LABLE_Y, INV, (List[SAVE_BMP].PTR ));
 8014b60:	23f8      	movs	r3, #248	; 0xf8
 8014b62:	b29b      	uxth	r3, r3
 8014b64:	332a      	adds	r3, #42	; 0x2a
 8014b66:	b29b      	uxth	r3, r3
 8014b68:	b218      	sxth	r0, r3
 8014b6a:	4b05      	ldr	r3, [pc, #20]	; (8014b80 <DispBMPInfo+0x80>)
 8014b6c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8014b70:	2201      	movs	r2, #1
 8014b72:	2103      	movs	r1, #3
 8014b74:	f7f9 f95a 	bl	800de2c <DispStr>
}
 8014b78:	bf00      	nop
 8014b7a:	46bd      	mov	sp, r7
 8014b7c:	bd80      	pop	{r7, pc}
 8014b7e:	bf00      	nop
 8014b80:	2000029c 	.word	0x2000029c
 8014b84:	20002844 	.word	0x20002844
 8014b88:	08000950 	.word	0x08000950

08014b8c <Update_Proc_All>:

/*******************************************************************************
Update_Proc_All  ȫ��ˢ��
*******************************************************************************/
void Update_Proc_All(void)
{
 8014b8c:	b590      	push	{r4, r7, lr}
 8014b8e:	b087      	sub	sp, #28
 8014b90:	af02      	add	r7, sp, #8
  short i;
  long Tmp = 0;
 8014b92:	2300      	movs	r3, #0
 8014b94:	60bb      	str	r3, [r7, #8]
  short Range = List[Y_RANGES].Val + 10*List[PROBEATT].Val;
 8014b96:	4ba3      	ldr	r3, [pc, #652]	; (8014e24 <Update_Proc_All+0x298>)
 8014b98:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8014b9c:	b29a      	uxth	r2, r3
 8014b9e:	4ba1      	ldr	r3, [pc, #644]	; (8014e24 <Update_Proc_All+0x298>)
 8014ba0:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8014ba4:	b29b      	uxth	r3, r3
 8014ba6:	4619      	mov	r1, r3
 8014ba8:	0089      	lsls	r1, r1, #2
 8014baa:	440b      	add	r3, r1
 8014bac:	005b      	lsls	r3, r3, #1
 8014bae:	b29b      	uxth	r3, r3
 8014bb0:	4413      	add	r3, r2
 8014bb2:	b29b      	uxth	r3, r3
 8014bb4:	80fb      	strh	r3, [r7, #6]

  for(i=Y_RANGES; i<=STANDBY; i++){
 8014bb6:	2300      	movs	r3, #0
 8014bb8:	81fb      	strh	r3, [r7, #14]
 8014bba:	e015      	b.n	8014be8 <Update_Proc_All+0x5c>
    List[i].Flg |= UPD;
 8014bbc:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8014bc0:	4a98      	ldr	r2, [pc, #608]	; (8014e24 <Update_Proc_All+0x298>)
 8014bc2:	00db      	lsls	r3, r3, #3
 8014bc4:	4413      	add	r3, r2
 8014bc6:	799a      	ldrb	r2, [r3, #6]
 8014bc8:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8014bcc:	f042 0220 	orr.w	r2, r2, #32
 8014bd0:	b2d1      	uxtb	r1, r2
 8014bd2:	4a94      	ldr	r2, [pc, #592]	; (8014e24 <Update_Proc_All+0x298>)
 8014bd4:	00db      	lsls	r3, r3, #3
 8014bd6:	4413      	add	r3, r2
 8014bd8:	460a      	mov	r2, r1
 8014bda:	719a      	strb	r2, [r3, #6]
  for(i=Y_RANGES; i<=STANDBY; i++){
 8014bdc:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8014be0:	b29b      	uxth	r3, r3
 8014be2:	3301      	adds	r3, #1
 8014be4:	b29b      	uxth	r3, r3
 8014be6:	81fb      	strh	r3, [r7, #14]
 8014be8:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8014bec:	2b29      	cmp	r3, #41	; 0x29
 8014bee:	dde5      	ble.n	8014bbc <Update_Proc_All+0x30>
  }

  for(i=Y_RANGES; i<=STANDBY; i++){
 8014bf0:	2300      	movs	r3, #0
 8014bf2:	81fb      	strh	r3, [r7, #14]
 8014bf4:	e1be      	b.n	8014f74 <Update_Proc_All+0x3e8>
    if(List[i].Flg & UPD){
 8014bf6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8014bfa:	4a8a      	ldr	r2, [pc, #552]	; (8014e24 <Update_Proc_All+0x298>)
 8014bfc:	00db      	lsls	r3, r3, #3
 8014bfe:	4413      	add	r3, r2
 8014c00:	799b      	ldrb	r3, [r3, #6]
 8014c02:	f003 0320 	and.w	r3, r3, #32
 8014c06:	2b00      	cmp	r3, #0
 8014c08:	f000 81ad 	beq.w	8014f66 <Update_Proc_All+0x3da>
      List[i].Flg &= ~UPD;
 8014c0c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8014c10:	4a84      	ldr	r2, [pc, #528]	; (8014e24 <Update_Proc_All+0x298>)
 8014c12:	00db      	lsls	r3, r3, #3
 8014c14:	4413      	add	r3, r2
 8014c16:	799a      	ldrb	r2, [r3, #6]
 8014c18:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8014c1c:	f022 0220 	bic.w	r2, r2, #32
 8014c20:	b2d1      	uxtb	r1, r2
 8014c22:	4a80      	ldr	r2, [pc, #512]	; (8014e24 <Update_Proc_All+0x298>)
 8014c24:	00db      	lsls	r3, r3, #3
 8014c26:	4413      	add	r3, r2
 8014c28:	460a      	mov	r2, r1
 8014c2a:	719a      	strb	r2, [r3, #6]
      switch (i){
 8014c2c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8014c30:	2b12      	cmp	r3, #18
 8014c32:	f300 8199 	bgt.w	8014f68 <Update_Proc_All+0x3dc>
 8014c36:	2b0d      	cmp	r3, #13
 8014c38:	f280 80ac 	bge.w	8014d94 <Update_Proc_All+0x208>
 8014c3c:	2b03      	cmp	r3, #3
 8014c3e:	dc02      	bgt.n	8014c46 <Update_Proc_All+0xba>
 8014c40:	2b00      	cmp	r3, #0
 8014c42:	da04      	bge.n	8014c4e <Update_Proc_All+0xc2>
 8014c44:	e190      	b.n	8014f68 <Update_Proc_All+0x3dc>
 8014c46:	2b07      	cmp	r3, #7
 8014c48:	f000 815a 	beq.w	8014f00 <Update_Proc_All+0x374>
 8014c4c:	e18c      	b.n	8014f68 <Update_Proc_All+0x3dc>
      case Y_RANGES:   // ˢ����ʾ Y ���̵�λ
      case PROBEATT:   // ˢ����ʾ̽ͷ˥������
      case COUPLING:   // ˢ����ʾ���ģʽ״̬
      case V0_POSI:    // ˢ����ʾ��ֱƫ��λ��
        SetColor(GRY, TCOLOR[YN]);
 8014c4e:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8014c52:	4619      	mov	r1, r3
 8014c54:	f643 10e7 	movw	r0, #14823	; 0x39e7
 8014c58:	f7f9 f8d0 	bl	800ddfc <SetColor>
        if(i == Y_RANGES || i == COUPLING||i == PROBEATT){
 8014c5c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8014c60:	2b00      	cmp	r3, #0
 8014c62:	d007      	beq.n	8014c74 <Update_Proc_All+0xe8>
 8014c64:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8014c68:	2b01      	cmp	r3, #1
 8014c6a:	d003      	beq.n	8014c74 <Update_Proc_All+0xe8>
 8014c6c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8014c70:	2b02      	cmp	r3, #2
 8014c72:	d138      	bne.n	8014ce6 <Update_Proc_All+0x15a>
          Draw_Circle_D(INV, S_X[Y_RANGES]-3, TITLE_Y_POS, 11, 0, 6*7);
 8014c74:	232f      	movs	r3, #47	; 0x2f
 8014c76:	b29b      	uxth	r3, r3
 8014c78:	3b03      	subs	r3, #3
 8014c7a:	b29b      	uxth	r3, r3
 8014c7c:	b219      	sxth	r1, r3
 8014c7e:	232a      	movs	r3, #42	; 0x2a
 8014c80:	9301      	str	r3, [sp, #4]
 8014c82:	2300      	movs	r3, #0
 8014c84:	9300      	str	r3, [sp, #0]
 8014c86:	230b      	movs	r3, #11
 8014c88:	22e1      	movs	r2, #225	; 0xe1
 8014c8a:	2001      	movs	r0, #1
 8014c8c:	f7f9 f9a4 	bl	800dfd8 <Draw_Circle_D>
          DispStr(S_X[Y_RANGES], TITLE_Y_POS, INV,      (List[Y_RANGES].PTR +(Range)*6));
 8014c90:	202f      	movs	r0, #47	; 0x2f
 8014c92:	4b64      	ldr	r3, [pc, #400]	; (8014e24 <Update_Proc_All+0x298>)
 8014c94:	6819      	ldr	r1, [r3, #0]
 8014c96:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8014c9a:	4613      	mov	r3, r2
 8014c9c:	005b      	lsls	r3, r3, #1
 8014c9e:	4413      	add	r3, r2
 8014ca0:	005b      	lsls	r3, r3, #1
 8014ca2:	440b      	add	r3, r1
 8014ca4:	2201      	movs	r2, #1
 8014ca6:	21e1      	movs	r1, #225	; 0xe1
 8014ca8:	f7f9 f8c0 	bl	800de2c <DispStr>
          DispStr(S_X[COUPLING], TITLE_Y_POS, INV,      (List[COUPLING].PTR +(List[COUPLING].Val)*6));
 8014cac:	2047      	movs	r0, #71	; 0x47
 8014cae:	4b5d      	ldr	r3, [pc, #372]	; (8014e24 <Update_Proc_All+0x298>)
 8014cb0:	689a      	ldr	r2, [r3, #8]
 8014cb2:	4b5c      	ldr	r3, [pc, #368]	; (8014e24 <Update_Proc_All+0x298>)
 8014cb4:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8014cb8:	4619      	mov	r1, r3
 8014cba:	460b      	mov	r3, r1
 8014cbc:	005b      	lsls	r3, r3, #1
 8014cbe:	440b      	add	r3, r1
 8014cc0:	005b      	lsls	r3, r3, #1
 8014cc2:	4413      	add	r3, r2
 8014cc4:	2201      	movs	r2, #1
 8014cc6:	21e1      	movs	r1, #225	; 0xe1
 8014cc8:	f7f9 f8b0 	bl	800de2c <DispStr>
          DispStr10x14(S_X[PROBEATT], TITLE_Y_POS, PRN+SYMB,(List[PROBEATT].Val?("A"):("B")));
 8014ccc:	2020      	movs	r0, #32
 8014cce:	4b55      	ldr	r3, [pc, #340]	; (8014e24 <Update_Proc_All+0x298>)
 8014cd0:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8014cd4:	2b00      	cmp	r3, #0
 8014cd6:	d001      	beq.n	8014cdc <Update_Proc_All+0x150>
 8014cd8:	4b53      	ldr	r3, [pc, #332]	; (8014e28 <Update_Proc_All+0x29c>)
 8014cda:	e000      	b.n	8014cde <Update_Proc_All+0x152>
 8014cdc:	4b53      	ldr	r3, [pc, #332]	; (8014e2c <Update_Proc_All+0x2a0>)
 8014cde:	2210      	movs	r2, #16
 8014ce0:	21e1      	movs	r1, #225	; 0xe1
 8014ce2:	f7f9 fb0b 	bl	800e2fc <DispStr10x14>
        }
        ParamTab[P1x2] = 2*((List[V0_POSI].Val+1));
 8014ce6:	4b4f      	ldr	r3, [pc, #316]	; (8014e24 <Update_Proc_All+0x298>)
 8014ce8:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 8014cec:	3301      	adds	r3, #1
 8014cee:	b29b      	uxth	r3, r3
 8014cf0:	005b      	lsls	r3, r3, #1
 8014cf2:	b29b      	uxth	r3, r3
 8014cf4:	b21a      	sxth	r2, r3
 8014cf6:	4b4e      	ldr	r3, [pc, #312]	; (8014e30 <Update_Proc_All+0x2a4>)
 8014cf8:	829a      	strh	r2, [r3, #20]
        ParamTab[VTx2] = ParamTab[P1x2]+ 2*(List[THRESHOLD].Val+1);
 8014cfa:	4b4d      	ldr	r3, [pc, #308]	; (8014e30 <Update_Proc_All+0x2a4>)
 8014cfc:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8014d00:	b29a      	uxth	r2, r3
 8014d02:	4b48      	ldr	r3, [pc, #288]	; (8014e24 <Update_Proc_All+0x298>)
 8014d04:	f9b3 3084 	ldrsh.w	r3, [r3, #132]	; 0x84
 8014d08:	3301      	adds	r3, #1
 8014d0a:	b29b      	uxth	r3, r3
 8014d0c:	005b      	lsls	r3, r3, #1
 8014d0e:	b29b      	uxth	r3, r3
 8014d10:	4413      	add	r3, r2
 8014d12:	b29b      	uxth	r3, r3
 8014d14:	b21a      	sxth	r2, r3
 8014d16:	4b46      	ldr	r3, [pc, #280]	; (8014e30 <Update_Proc_All+0x2a4>)
 8014d18:	839a      	strh	r2, [r3, #28]

        StateA =  (List[Y_RANGES].Val>5)?ACT: GND;                                    //ACT GND �ӵػ򼤻�״̬
 8014d1a:	4b42      	ldr	r3, [pc, #264]	; (8014e24 <Update_Proc_All+0x298>)
 8014d1c:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8014d20:	2b05      	cmp	r3, #5
 8014d22:	dd01      	ble.n	8014d28 <Update_Proc_All+0x19c>
 8014d24:	2204      	movs	r2, #4
 8014d26:	e000      	b.n	8014d2a <Update_Proc_All+0x19e>
 8014d28:	2200      	movs	r2, #0
 8014d2a:	4b42      	ldr	r3, [pc, #264]	; (8014e34 <Update_Proc_All+0x2a8>)
 8014d2c:	801a      	strh	r2, [r3, #0]
        GainA  = List[Y_RANGES].Val;
 8014d2e:	4b3d      	ldr	r3, [pc, #244]	; (8014e24 <Update_Proc_All+0x298>)
 8014d30:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
 8014d34:	4b40      	ldr	r3, [pc, #256]	; (8014e38 <Update_Proc_All+0x2ac>)
 8014d36:	801a      	strh	r2, [r3, #0]
        if(List[Y_RANGES].Val>1)
 8014d38:	4b3a      	ldr	r3, [pc, #232]	; (8014e24 <Update_Proc_All+0x298>)
 8014d3a:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8014d3e:	2b01      	cmp	r3, #1
 8014d40:	dd03      	ble.n	8014d4a <Update_Proc_All+0x1be>
          KindA  = HV;
 8014d42:	4b3e      	ldr	r3, [pc, #248]	; (8014e3c <Update_Proc_All+0x2b0>)
 8014d44:	2201      	movs	r2, #1
 8014d46:	801a      	strh	r2, [r3, #0]
 8014d48:	e002      	b.n	8014d50 <Update_Proc_All+0x1c4>
        else
          KindA  = LV;                //Ch1ѡ���ѹ���ѹ����
 8014d4a:	4b3c      	ldr	r3, [pc, #240]	; (8014e3c <Update_Proc_All+0x2b0>)
 8014d4c:	2200      	movs	r2, #0
 8014d4e:	801a      	strh	r2, [r3, #0]

        CouplA = (List[COUPLING].Val)? AC : DC;                      // AC);  //AC/DC��Ϸ�ʽ
 8014d50:	4b34      	ldr	r3, [pc, #208]	; (8014e24 <Update_Proc_All+0x298>)
 8014d52:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8014d56:	2b00      	cmp	r3, #0
 8014d58:	d001      	beq.n	8014d5e <Update_Proc_All+0x1d2>
 8014d5a:	2200      	movs	r2, #0
 8014d5c:	e000      	b.n	8014d60 <Update_Proc_All+0x1d4>
 8014d5e:	2202      	movs	r2, #2
 8014d60:	4b37      	ldr	r3, [pc, #220]	; (8014e40 <Update_Proc_All+0x2b4>)
 8014d62:	801a      	strh	r2, [r3, #0]
        BIOS_Ctrl(AiRANGE, KindA+CouplA+StateA);             //Ch1״̬ˢ��
 8014d64:	4b35      	ldr	r3, [pc, #212]	; (8014e3c <Update_Proc_All+0x2b0>)
 8014d66:	f9b3 3000 	ldrsh.w	r3, [r3]
 8014d6a:	461a      	mov	r2, r3
 8014d6c:	4b34      	ldr	r3, [pc, #208]	; (8014e40 <Update_Proc_All+0x2b4>)
 8014d6e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8014d72:	4413      	add	r3, r2
 8014d74:	4a2f      	ldr	r2, [pc, #188]	; (8014e34 <Update_Proc_All+0x2a8>)
 8014d76:	f9b2 2000 	ldrsh.w	r2, [r2]
 8014d7a:	4413      	add	r3, r2
 8014d7c:	4619      	mov	r1, r3
 8014d7e:	2007      	movs	r0, #7
 8014d80:	f7f7 faf8 	bl	800c374 <BIOS_Ctrl>
        AiPosi(List[V0_POSI].Val);                        //Ch1Ӳ����Ӧλ��
 8014d84:	4b27      	ldr	r3, [pc, #156]	; (8014e24 <Update_Proc_All+0x298>)
 8014d86:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 8014d8a:	b2db      	uxtb	r3, r3
 8014d8c:	4618      	mov	r0, r3
 8014d8e:	f000 fa0f 	bl	80151b0 <AiPosi>

        break;
 8014d92:	e0e9      	b.n	8014f68 <Update_Proc_All+0x3dc>
      case TR_MODE:   // ˢ����ʾ������ʽ
      case FITTRIGG:  // ˢ����ʾ�Զ�������ֵ
      case THRESHOLD: // ˢ����ʾ������ֵ
      case SENSITIVE: // ˢ����ʾ����������
      case TR_TYPE:   // ˢ����ʾ�α���ʽ
        DispStatus();
 8014d94:	f7ff fbee 	bl	8014574 <DispStatus>
        SetColor(GRY, TCOLOR[TRG]);
 8014d98:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8014d9c:	4619      	mov	r1, r3
 8014d9e:	f643 10e7 	movw	r0, #14823	; 0x39e7
 8014da2:	f7f9 f82b 	bl	800ddfc <SetColor>
        if(i == TR_MODE || i==SENSITIVE)
 8014da6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8014daa:	2b0e      	cmp	r3, #14
 8014dac:	d003      	beq.n	8014db6 <Update_Proc_All+0x22a>
 8014dae:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8014db2:	2b11      	cmp	r3, #17
 8014db4:	d11a      	bne.n	8014dec <Update_Proc_All+0x260>
        {
          Draw_Circle_D(INV, S_X[TR_MODE]-3, TITLE_Y_POS, 11, 0, 6*8);
 8014db6:	23dd      	movs	r3, #221	; 0xdd
 8014db8:	b29b      	uxth	r3, r3
 8014dba:	3b03      	subs	r3, #3
 8014dbc:	b29b      	uxth	r3, r3
 8014dbe:	b219      	sxth	r1, r3
 8014dc0:	2330      	movs	r3, #48	; 0x30
 8014dc2:	9301      	str	r3, [sp, #4]
 8014dc4:	2300      	movs	r3, #0
 8014dc6:	9300      	str	r3, [sp, #0]
 8014dc8:	230b      	movs	r3, #11
 8014dca:	22e1      	movs	r2, #225	; 0xe1
 8014dcc:	2001      	movs	r0, #1
 8014dce:	f7f9 f903 	bl	800dfd8 <Draw_Circle_D>
          DispStr10x14(S_X[TR_MODE], TITLE_Y_POS, INV+SYMB,(List[TR_MODE].Val?("D"):("C")));
 8014dd2:	20dd      	movs	r0, #221	; 0xdd
 8014dd4:	4b13      	ldr	r3, [pc, #76]	; (8014e24 <Update_Proc_All+0x298>)
 8014dd6:	f9b3 3074 	ldrsh.w	r3, [r3, #116]	; 0x74
 8014dda:	2b00      	cmp	r3, #0
 8014ddc:	d001      	beq.n	8014de2 <Update_Proc_All+0x256>
 8014dde:	4b19      	ldr	r3, [pc, #100]	; (8014e44 <Update_Proc_All+0x2b8>)
 8014de0:	e000      	b.n	8014de4 <Update_Proc_All+0x258>
 8014de2:	4b19      	ldr	r3, [pc, #100]	; (8014e48 <Update_Proc_All+0x2bc>)
 8014de4:	2211      	movs	r2, #17
 8014de6:	21e1      	movs	r1, #225	; 0xe1
 8014de8:	f7f9 fa88 	bl	800e2fc <DispStr10x14>
        }
        if(i == FITTRIGG)
 8014dec:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8014df0:	2b0f      	cmp	r3, #15
 8014df2:	d132      	bne.n	8014e5a <Update_Proc_All+0x2ce>
        {
          DispStr10x14(S_X[FITTRIGG], TITLE_Y_POS, PRN+SYMB,(List[FITTRIGG].Val?("F"):("B")));
 8014df4:	20cf      	movs	r0, #207	; 0xcf
 8014df6:	4b0b      	ldr	r3, [pc, #44]	; (8014e24 <Update_Proc_All+0x298>)
 8014df8:	f9b3 307c 	ldrsh.w	r3, [r3, #124]	; 0x7c
 8014dfc:	2b00      	cmp	r3, #0
 8014dfe:	d001      	beq.n	8014e04 <Update_Proc_All+0x278>
 8014e00:	4b12      	ldr	r3, [pc, #72]	; (8014e4c <Update_Proc_All+0x2c0>)
 8014e02:	e000      	b.n	8014e06 <Update_Proc_All+0x27a>
 8014e04:	4b09      	ldr	r3, [pc, #36]	; (8014e2c <Update_Proc_All+0x2a0>)
 8014e06:	2210      	movs	r2, #16
 8014e08:	21e1      	movs	r1, #225	; 0xe1
 8014e0a:	f7f9 fa77 	bl	800e2fc <DispStr10x14>
          if(List[FITTRIGG].Val)KEYTIME = 300;
 8014e0e:	4b05      	ldr	r3, [pc, #20]	; (8014e24 <Update_Proc_All+0x298>)
 8014e10:	f9b3 307c 	ldrsh.w	r3, [r3, #124]	; 0x7c
 8014e14:	2b00      	cmp	r3, #0
 8014e16:	d01d      	beq.n	8014e54 <Update_Proc_All+0x2c8>
 8014e18:	4b0d      	ldr	r3, [pc, #52]	; (8014e50 <Update_Proc_All+0x2c4>)
 8014e1a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8014e1e:	801a      	strh	r2, [r3, #0]
 8014e20:	e01b      	b.n	8014e5a <Update_Proc_All+0x2ce>
 8014e22:	bf00      	nop
 8014e24:	2000029c 	.word	0x2000029c
 8014e28:	08000958 	.word	0x08000958
 8014e2c:	0800095c 	.word	0x0800095c
 8014e30:	20000144 	.word	0x20000144
 8014e34:	2000286a 	.word	0x2000286a
 8014e38:	20002852 	.word	0x20002852
 8014e3c:	2000688e 	.word	0x2000688e
 8014e40:	20006890 	.word	0x20006890
 8014e44:	08000988 	.word	0x08000988
 8014e48:	0800098c 	.word	0x0800098c
 8014e4c:	0800099c 	.word	0x0800099c
 8014e50:	20000786 	.word	0x20000786
          else KEYTIME = 0;
 8014e54:	4b4c      	ldr	r3, [pc, #304]	; (8014f88 <Update_Proc_All+0x3fc>)
 8014e56:	2200      	movs	r2, #0
 8014e58:	801a      	strh	r2, [r3, #0]
        };
        ParamTab[VTx2]= ParamTab[P1x2]+2*List[THRESHOLD].Val;
 8014e5a:	4b4c      	ldr	r3, [pc, #304]	; (8014f8c <Update_Proc_All+0x400>)
 8014e5c:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8014e60:	b29a      	uxth	r2, r3
 8014e62:	4b4b      	ldr	r3, [pc, #300]	; (8014f90 <Update_Proc_All+0x404>)
 8014e64:	f9b3 3084 	ldrsh.w	r3, [r3, #132]	; 0x84
 8014e68:	b29b      	uxth	r3, r3
 8014e6a:	005b      	lsls	r3, r3, #1
 8014e6c:	b29b      	uxth	r3, r3
 8014e6e:	4413      	add	r3, r2
 8014e70:	b29b      	uxth	r3, r3
 8014e72:	b21a      	sxth	r2, r3
 8014e74:	4b45      	ldr	r3, [pc, #276]	; (8014f8c <Update_Proc_All+0x400>)
 8014e76:	839a      	strh	r2, [r3, #28]
        Tmp  = List[SENSITIVE].Val;
 8014e78:	4b45      	ldr	r3, [pc, #276]	; (8014f90 <Update_Proc_All+0x404>)
 8014e7a:	f9b3 308c 	ldrsh.w	r3, [r3, #140]	; 0x8c
 8014e7e:	60bb      	str	r3, [r7, #8]
        Tmp *= X_SCALE[Range]* Exp(V_SCALE[Range]);
 8014e80:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8014e84:	4a43      	ldr	r2, [pc, #268]	; (8014f94 <Update_Proc_All+0x408>)
 8014e86:	5cd3      	ldrb	r3, [r2, r3]
 8014e88:	461c      	mov	r4, r3
 8014e8a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8014e8e:	4a42      	ldr	r2, [pc, #264]	; (8014f98 <Update_Proc_All+0x40c>)
 8014e90:	5cd3      	ldrb	r3, [r2, r3]
 8014e92:	4618      	mov	r0, r3
 8014e94:	f7fc ff9e 	bl	8011dd4 <Exp>
 8014e98:	4603      	mov	r3, r0
 8014e9a:	fb03 f204 	mul.w	r2, r3, r4
 8014e9e:	68bb      	ldr	r3, [r7, #8]
 8014ea0:	fb02 f303 	mul.w	r3, r2, r3
 8014ea4:	60bb      	str	r3, [r7, #8]
        Value2Str(NumStr, Tmp, V[2], 2, UNSIGN);
 8014ea6:	2301      	movs	r3, #1
 8014ea8:	9300      	str	r3, [sp, #0]
 8014eaa:	2302      	movs	r3, #2
 8014eac:	4a3b      	ldr	r2, [pc, #236]	; (8014f9c <Update_Proc_All+0x410>)
 8014eae:	68b9      	ldr	r1, [r7, #8]
 8014eb0:	483b      	ldr	r0, [pc, #236]	; (8014fa0 <Update_Proc_All+0x414>)
 8014eb2:	f7fc fe93 	bl	8011bdc <Value2Str>
        DispStr10x14(S_X[SENSITIVE], TITLE_Y_POS, INV+SYMB,"E");
 8014eb6:	20e7      	movs	r0, #231	; 0xe7
 8014eb8:	4b3a      	ldr	r3, [pc, #232]	; (8014fa4 <Update_Proc_All+0x418>)
 8014eba:	2211      	movs	r2, #17
 8014ebc:	21e1      	movs	r1, #225	; 0xe1
 8014ebe:	f7f9 fa1d 	bl	800e2fc <DispStr10x14>
        DispStr(S_X[SENSITIVE]+9, TITLE_Y_POS, INV,  "     ");
 8014ec2:	23e7      	movs	r3, #231	; 0xe7
 8014ec4:	b29b      	uxth	r3, r3
 8014ec6:	3309      	adds	r3, #9
 8014ec8:	b29b      	uxth	r3, r3
 8014eca:	b218      	sxth	r0, r3
 8014ecc:	4b36      	ldr	r3, [pc, #216]	; (8014fa8 <Update_Proc_All+0x41c>)
 8014ece:	2201      	movs	r2, #1
 8014ed0:	21e1      	movs	r1, #225	; 0xe1
 8014ed2:	f7f8 ffab 	bl	800de2c <DispStr>
        DispStr(S_X[SENSITIVE]+9, TITLE_Y_POS, INV,  (char *)NumStr);
 8014ed6:	23e7      	movs	r3, #231	; 0xe7
 8014ed8:	b29b      	uxth	r3, r3
 8014eda:	3309      	adds	r3, #9
 8014edc:	b29b      	uxth	r3, r3
 8014ede:	b218      	sxth	r0, r3
 8014ee0:	4b2f      	ldr	r3, [pc, #188]	; (8014fa0 <Update_Proc_All+0x414>)
 8014ee2:	2201      	movs	r2, #1
 8014ee4:	21e1      	movs	r1, #225	; 0xe1
 8014ee6:	f7f8 ffa1 	bl	800de2c <DispStr>
        ParamTab[VTF]=(List[TR_TYPE].Val)? L_HID : SHOW;
 8014eea:	4b29      	ldr	r3, [pc, #164]	; (8014f90 <Update_Proc_All+0x404>)
 8014eec:	f9b3 3094 	ldrsh.w	r3, [r3, #148]	; 0x94
 8014ef0:	2b00      	cmp	r3, #0
 8014ef2:	d001      	beq.n	8014ef8 <Update_Proc_All+0x36c>
 8014ef4:	2202      	movs	r2, #2
 8014ef6:	e000      	b.n	8014efa <Update_Proc_All+0x36e>
 8014ef8:	2200      	movs	r2, #0
 8014efa:	4b24      	ldr	r3, [pc, #144]	; (8014f8c <Update_Proc_All+0x400>)
 8014efc:	811a      	strh	r2, [r3, #8]
        break;
 8014efe:	e033      	b.n	8014f68 <Update_Proc_All+0x3dc>

      case TIM_BASE:  // ˢ����ʾʱ����λ
        SetColor(GRY, TCOLOR[XN]);
 8014f00:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8014f04:	4619      	mov	r1, r3
 8014f06:	f643 10e7 	movw	r0, #14823	; 0x39e7
 8014f0a:	f7f8 ff77 	bl	800ddfc <SetColor>
        if(i == TIM_BASE)
 8014f0e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8014f12:	2b07      	cmp	r3, #7
 8014f14:	d120      	bne.n	8014f58 <Update_Proc_All+0x3cc>
        {
          Draw_Circle_D(INV, S_X[i]-3, TITLE_Y_POS, 11, 2, 6*5);
 8014f16:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8014f1a:	4a24      	ldr	r2, [pc, #144]	; (8014fac <Update_Proc_All+0x420>)
 8014f1c:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8014f20:	b29b      	uxth	r3, r3
 8014f22:	3b03      	subs	r3, #3
 8014f24:	b29b      	uxth	r3, r3
 8014f26:	b219      	sxth	r1, r3
 8014f28:	231e      	movs	r3, #30
 8014f2a:	9301      	str	r3, [sp, #4]
 8014f2c:	2302      	movs	r3, #2
 8014f2e:	9300      	str	r3, [sp, #0]
 8014f30:	230b      	movs	r3, #11
 8014f32:	22e1      	movs	r2, #225	; 0xe1
 8014f34:	2001      	movs	r0, #1
 8014f36:	f7f9 f84f 	bl	800dfd8 <Draw_Circle_D>
          DispStr(S_X[i], TITLE_Y_POS, INV, (char *)TimeBase_Str[List[TIM_BASE].Val]);
 8014f3a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8014f3e:	4a1b      	ldr	r2, [pc, #108]	; (8014fac <Update_Proc_All+0x420>)
 8014f40:	f932 0013 	ldrsh.w	r0, [r2, r3, lsl #1]
 8014f44:	4b12      	ldr	r3, [pc, #72]	; (8014f90 <Update_Proc_All+0x404>)
 8014f46:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8014f4a:	00db      	lsls	r3, r3, #3
 8014f4c:	4a18      	ldr	r2, [pc, #96]	; (8014fb0 <Update_Proc_All+0x424>)
 8014f4e:	4413      	add	r3, r2
 8014f50:	2201      	movs	r2, #1
 8014f52:	21e1      	movs	r1, #225	; 0xe1
 8014f54:	f7f8 ff6a 	bl	800de2c <DispStr>
        }
        Set_Base(List[TIM_BASE].Val);          // Ӳ������ɨ��ʱ����λ
 8014f58:	4b0d      	ldr	r3, [pc, #52]	; (8014f90 <Update_Proc_All+0x404>)
 8014f5a:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8014f5e:	4618      	mov	r0, r3
 8014f60:	f7f7 fb84 	bl	800c66c <Set_Base>
      break;
 8014f64:	e000      	b.n	8014f68 <Update_Proc_All+0x3dc>

      }
    }
 8014f66:	bf00      	nop
  for(i=Y_RANGES; i<=STANDBY; i++){
 8014f68:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8014f6c:	b29b      	uxth	r3, r3
 8014f6e:	3301      	adds	r3, #1
 8014f70:	b29b      	uxth	r3, r3
 8014f72:	81fb      	strh	r3, [r7, #14]
 8014f74:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8014f78:	2b29      	cmp	r3, #41	; 0x29
 8014f7a:	f77f ae3c 	ble.w	8014bf6 <Update_Proc_All+0x6a>
  }
}
 8014f7e:	bf00      	nop
 8014f80:	bf00      	nop
 8014f82:	3714      	adds	r7, #20
 8014f84:	46bd      	mov	sp, r7
 8014f86:	bd90      	pop	{r4, r7, pc}
 8014f88:	20000786 	.word	0x20000786
 8014f8c:	20000144 	.word	0x20000144
 8014f90:	2000029c 	.word	0x2000029c
 8014f94:	08002130 	.word	0x08002130
 8014f98:	08002108 	.word	0x08002108
 8014f9c:	08001d0c 	.word	0x08001d0c
 8014fa0:	20002844 	.word	0x20002844
 8014fa4:	08000998 	.word	0x08000998
 8014fa8:	08000990 	.word	0x08000990
 8014fac:	0800215c 	.word	0x0800215c
 8014fb0:	200001d4 	.word	0x200001d4

08014fb4 <Align_Set>:

/*******************************************************************************
 Align_Set:
*******************************************************************************/
void Align_Set(void)
{
 8014fb4:	b580      	push	{r7, lr}
 8014fb6:	b082      	sub	sp, #8
 8014fb8:	af00      	add	r7, sp, #0
  unsigned short i, TmpA = 0, StA = 0;
 8014fba:	2300      	movs	r3, #0
 8014fbc:	807b      	strh	r3, [r7, #2]
 8014fbe:	2300      	movs	r3, #0
 8014fc0:	80bb      	strh	r3, [r7, #4]

  Analys();
 8014fc2:	f000 f8b1 	bl	8015128 <Analys>
  for(i=0; i<100; i++)
 8014fc6:	2300      	movs	r3, #0
 8014fc8:	80fb      	strh	r3, [r7, #6]
 8014fca:	e051      	b.n	8015070 <Align_Set+0xbc>
  {
    AiPosi(100);
 8014fcc:	2064      	movs	r0, #100	; 0x64
 8014fce:	f000 f8ef 	bl	80151b0 <AiPosi>
    HAL_Delay(10);                             // Wait 10mS
 8014fd2:	200a      	movs	r0, #10
 8014fd4:	f003 fb32 	bl	801863c <HAL_Delay>
    Analys();
 8014fd8:	f000 f8a6 	bl	8015128 <Analys>
    TmpA = 2048-Vavg;
 8014fdc:	4b28      	ldr	r3, [pc, #160]	; (8015080 <Align_Set+0xcc>)
 8014fde:	f9b3 3000 	ldrsh.w	r3, [r3]
 8014fe2:	b29b      	uxth	r3, r3
 8014fe4:	f5c3 6300 	rsb	r3, r3, #2048	; 0x800
 8014fe8:	807b      	strh	r3, [r7, #2]

    if(TmpA != 0)
 8014fea:	887b      	ldrh	r3, [r7, #2]
 8014fec:	2b00      	cmp	r3, #0
 8014fee:	d036      	beq.n	801505e <Align_Set+0xaa>
    {
      KpA[KindA+(StateA?1:0)] += 700*TmpA/2048;
 8014ff0:	4b24      	ldr	r3, [pc, #144]	; (8015084 <Align_Set+0xd0>)
 8014ff2:	681a      	ldr	r2, [r3, #0]
 8014ff4:	4b24      	ldr	r3, [pc, #144]	; (8015088 <Align_Set+0xd4>)
 8014ff6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8014ffa:	4619      	mov	r1, r3
 8014ffc:	4b23      	ldr	r3, [pc, #140]	; (801508c <Align_Set+0xd8>)
 8014ffe:	f9b3 3000 	ldrsh.w	r3, [r3]
 8015002:	2b00      	cmp	r3, #0
 8015004:	bf14      	ite	ne
 8015006:	2301      	movne	r3, #1
 8015008:	2300      	moveq	r3, #0
 801500a:	b2db      	uxtb	r3, r3
 801500c:	440b      	add	r3, r1
 801500e:	005b      	lsls	r3, r3, #1
 8015010:	4413      	add	r3, r2
 8015012:	f9b3 3000 	ldrsh.w	r3, [r3]
 8015016:	b29a      	uxth	r2, r3
 8015018:	887b      	ldrh	r3, [r7, #2]
 801501a:	f44f 712f 	mov.w	r1, #700	; 0x2bc
 801501e:	fb01 f303 	mul.w	r3, r1, r3
 8015022:	2b00      	cmp	r3, #0
 8015024:	da01      	bge.n	801502a <Align_Set+0x76>
 8015026:	f203 73ff 	addw	r3, r3, #2047	; 0x7ff
 801502a:	12db      	asrs	r3, r3, #11
 801502c:	b29b      	uxth	r3, r3
 801502e:	4413      	add	r3, r2
 8015030:	b299      	uxth	r1, r3
 8015032:	4b14      	ldr	r3, [pc, #80]	; (8015084 <Align_Set+0xd0>)
 8015034:	681a      	ldr	r2, [r3, #0]
 8015036:	4b14      	ldr	r3, [pc, #80]	; (8015088 <Align_Set+0xd4>)
 8015038:	f9b3 3000 	ldrsh.w	r3, [r3]
 801503c:	4618      	mov	r0, r3
 801503e:	4b13      	ldr	r3, [pc, #76]	; (801508c <Align_Set+0xd8>)
 8015040:	f9b3 3000 	ldrsh.w	r3, [r3]
 8015044:	2b00      	cmp	r3, #0
 8015046:	bf14      	ite	ne
 8015048:	2301      	movne	r3, #1
 801504a:	2300      	moveq	r3, #0
 801504c:	b2db      	uxtb	r3, r3
 801504e:	4403      	add	r3, r0
 8015050:	005b      	lsls	r3, r3, #1
 8015052:	4413      	add	r3, r2
 8015054:	b20a      	sxth	r2, r1
 8015056:	801a      	strh	r2, [r3, #0]
      StA = 0;
 8015058:	2300      	movs	r3, #0
 801505a:	80bb      	strh	r3, [r7, #4]
 801505c:	e002      	b.n	8015064 <Align_Set+0xb0>
    }
    else
      StA++;
 801505e:	88bb      	ldrh	r3, [r7, #4]
 8015060:	3301      	adds	r3, #1
 8015062:	80bb      	strh	r3, [r7, #4]

    if(StA > 4)
 8015064:	88bb      	ldrh	r3, [r7, #4]
 8015066:	2b04      	cmp	r3, #4
 8015068:	d806      	bhi.n	8015078 <Align_Set+0xc4>
  for(i=0; i<100; i++)
 801506a:	88fb      	ldrh	r3, [r7, #6]
 801506c:	3301      	adds	r3, #1
 801506e:	80fb      	strh	r3, [r7, #6]
 8015070:	88fb      	ldrh	r3, [r7, #6]
 8015072:	2b63      	cmp	r3, #99	; 0x63
 8015074:	d9aa      	bls.n	8014fcc <Align_Set+0x18>
 8015076:	e000      	b.n	801507a <Align_Set+0xc6>
    	return;
 8015078:	bf00      	nop
  }

}
 801507a:	3708      	adds	r7, #8
 801507c:	46bd      	mov	sp, r7
 801507e:	bd80      	pop	{r7, pc}
 8015080:	20002860 	.word	0x20002860
 8015084:	2000057c 	.word	0x2000057c
 8015088:	2000688e 	.word	0x2000688e
 801508c:	2000286a 	.word	0x2000286a

08015090 <Zero_Align>:

/*******************************************************************************
 Channel's zero alignment:
*******************************************************************************/
void Zero_Align(void)
{
 8015090:	b580      	push	{r7, lr}
 8015092:	af00      	add	r7, sp, #0
  GainA  = 0;//0x20;
 8015094:	4b21      	ldr	r3, [pc, #132]	; (801511c <Zero_Align+0x8c>)
 8015096:	2200      	movs	r2, #0
 8015098:	801a      	strh	r2, [r3, #0]
  KindA  = HV;
 801509a:	4b21      	ldr	r3, [pc, #132]	; (8015120 <Zero_Align+0x90>)
 801509c:	2201      	movs	r2, #1
 801509e:	801a      	strh	r2, [r3, #0]
  StateA = ACT;
 80150a0:	4b20      	ldr	r3, [pc, #128]	; (8015124 <Zero_Align+0x94>)
 80150a2:	2204      	movs	r2, #4
 80150a4:	801a      	strh	r2, [r3, #0]
  BIOS_Ctrl(AiRANGE, HV+AC+ACT);
 80150a6:	2105      	movs	r1, #5
 80150a8:	2007      	movs	r0, #7
 80150aa:	f7f7 f963 	bl	800c374 <BIOS_Ctrl>
  AiPosi(100);
 80150ae:	2064      	movs	r0, #100	; 0x64
 80150b0:	f000 f87e 	bl	80151b0 <AiPosi>
  HAL_Delay(1000);
 80150b4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80150b8:	f003 fac0 	bl	801863c <HAL_Delay>
  Align_Set();
 80150bc:	f7ff ff7a 	bl	8014fb4 <Align_Set>

  GainA  = 0;//0x20;
 80150c0:	4b16      	ldr	r3, [pc, #88]	; (801511c <Zero_Align+0x8c>)
 80150c2:	2200      	movs	r2, #0
 80150c4:	801a      	strh	r2, [r3, #0]
  KindA  = HV;
 80150c6:	4b16      	ldr	r3, [pc, #88]	; (8015120 <Zero_Align+0x90>)
 80150c8:	2201      	movs	r2, #1
 80150ca:	801a      	strh	r2, [r3, #0]
  StateA = GND;
 80150cc:	4b15      	ldr	r3, [pc, #84]	; (8015124 <Zero_Align+0x94>)
 80150ce:	2200      	movs	r2, #0
 80150d0:	801a      	strh	r2, [r3, #0]
  BIOS_Ctrl(AiRANGE, HV+AC+GND);
 80150d2:	2101      	movs	r1, #1
 80150d4:	2007      	movs	r0, #7
 80150d6:	f7f7 f94d 	bl	800c374 <BIOS_Ctrl>
  AiPosi(100);
 80150da:	2064      	movs	r0, #100	; 0x64
 80150dc:	f000 f868 	bl	80151b0 <AiPosi>
  HAL_Delay(1000);
 80150e0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80150e4:	f003 faaa 	bl	801863c <HAL_Delay>
  Align_Set();
 80150e8:	f7ff ff64 	bl	8014fb4 <Align_Set>

  GainA  = 0;//0x20;
 80150ec:	4b0b      	ldr	r3, [pc, #44]	; (801511c <Zero_Align+0x8c>)
 80150ee:	2200      	movs	r2, #0
 80150f0:	801a      	strh	r2, [r3, #0]
  KindA  = LV;
 80150f2:	4b0b      	ldr	r3, [pc, #44]	; (8015120 <Zero_Align+0x90>)
 80150f4:	2200      	movs	r2, #0
 80150f6:	801a      	strh	r2, [r3, #0]
  StateA = GND;
 80150f8:	4b0a      	ldr	r3, [pc, #40]	; (8015124 <Zero_Align+0x94>)
 80150fa:	2200      	movs	r2, #0
 80150fc:	801a      	strh	r2, [r3, #0]
  BIOS_Ctrl(AiRANGE, LV+AC+GND);
 80150fe:	2100      	movs	r1, #0
 8015100:	2007      	movs	r0, #7
 8015102:	f7f7 f937 	bl	800c374 <BIOS_Ctrl>
  AiPosi(100);
 8015106:	2064      	movs	r0, #100	; 0x64
 8015108:	f000 f852 	bl	80151b0 <AiPosi>
  HAL_Delay(1000);
 801510c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8015110:	f003 fa94 	bl	801863c <HAL_Delay>
  Align_Set();
 8015114:	f7ff ff4e 	bl	8014fb4 <Align_Set>

}
 8015118:	bf00      	nop
 801511a:	bd80      	pop	{r7, pc}
 801511c:	20002852 	.word	0x20002852
 8015120:	2000688e 	.word	0x2000688e
 8015124:	2000286a 	.word	0x2000286a

08015128 <Analys>:

/*******************************************************************************
 Channel's error analys
*******************************************************************************/
void Analys(void)
{
 8015128:	b580      	push	{r7, lr}
 801512a:	b082      	sub	sp, #8
 801512c:	af00      	add	r7, sp, #0
  unsigned i, SumA = 0;
 801512e:	2300      	movs	r3, #0
 8015130:	603b      	str	r3, [r7, #0]

  BIOS_Ctrl(SMPL_ST, DISABLE);
 8015132:	2100      	movs	r1, #0
 8015134:	2004      	movs	r0, #4
 8015136:	f7f7 f91d 	bl	800c374 <BIOS_Ctrl>
  BIOS_Ctrl(SMPLTIM, 720-1);      // 72MHz/360 = 400kHz = 2.5uS
 801513a:	f240 21cf 	movw	r1, #719	; 0x2cf
 801513e:	2005      	movs	r0, #5
 8015140:	f7f7 f918 	bl	800c374 <BIOS_Ctrl>
  BIOS_Ctrl(SMPLNUM, 4096);       // 8192
 8015144:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8015148:	2006      	movs	r0, #6
 801514a:	f7f7 f913 	bl	800c374 <BIOS_Ctrl>
  BIOS_Ctrl(SMPL_ST, ENABLE);
 801514e:	2101      	movs	r1, #1
 8015150:	2004      	movs	r0, #4
 8015152:	f7f7 f90f 	bl	800c374 <BIOS_Ctrl>
  while((BIOS_Info(CHA_CNT) != 0)) {};
 8015156:	bf00      	nop
 8015158:	2000      	movs	r0, #0
 801515a:	f7f7 f8f5 	bl	800c348 <BIOS_Info>
 801515e:	4603      	mov	r3, r0
 8015160:	2b00      	cmp	r3, #0
 8015162:	d1f9      	bne.n	8015158 <Analys+0x30>
  for(i=2; i<4000+2; i++){
 8015164:	2302      	movs	r3, #2
 8015166:	607b      	str	r3, [r7, #4]
 8015168:	e00a      	b.n	8015180 <Analys+0x58>
    SumA += Sampl[i];
 801516a:	4a0e      	ldr	r2, [pc, #56]	; (80151a4 <Analys+0x7c>)
 801516c:	687b      	ldr	r3, [r7, #4]
 801516e:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8015172:	461a      	mov	r2, r3
 8015174:	683b      	ldr	r3, [r7, #0]
 8015176:	4413      	add	r3, r2
 8015178:	603b      	str	r3, [r7, #0]
  for(i=2; i<4000+2; i++){
 801517a:	687b      	ldr	r3, [r7, #4]
 801517c:	3301      	adds	r3, #1
 801517e:	607b      	str	r3, [r7, #4]
 8015180:	687b      	ldr	r3, [r7, #4]
 8015182:	f640 72a1 	movw	r2, #4001	; 0xfa1
 8015186:	4293      	cmp	r3, r2
 8015188:	d9ef      	bls.n	801516a <Analys+0x42>
  }
  Vavg = SumA/4000; // 4000
 801518a:	683b      	ldr	r3, [r7, #0]
 801518c:	4a06      	ldr	r2, [pc, #24]	; (80151a8 <Analys+0x80>)
 801518e:	fba2 2303 	umull	r2, r3, r2, r3
 8015192:	0a1b      	lsrs	r3, r3, #8
 8015194:	b21a      	sxth	r2, r3
 8015196:	4b05      	ldr	r3, [pc, #20]	; (80151ac <Analys+0x84>)
 8015198:	801a      	strh	r2, [r3, #0]
}
 801519a:	bf00      	nop
 801519c:	3708      	adds	r7, #8
 801519e:	46bd      	mov	sp, r7
 80151a0:	bd80      	pop	{r7, pc}
 80151a2:	bf00      	nop
 80151a4:	20002878 	.word	0x20002878
 80151a8:	10624dd3 	.word	0x10624dd3
 80151ac:	20002860 	.word	0x20002860

080151b0 <AiPosi>:

/*******************************************************************************
 DevCtrl:  offset
*******************************************************************************/
void AiPosi(char Val)
{
 80151b0:	b580      	push	{r7, lr}
 80151b2:	b082      	sub	sp, #8
 80151b4:	af00      	add	r7, sp, #0
 80151b6:	4603      	mov	r3, r0
 80151b8:	71fb      	strb	r3, [r7, #7]
   BIOS_Ctrl(AOFFSET,((char)Val-100)*(KpA[KindA+(StateA?1:0)]/2)*GK[GainA]/KgA[KindA+(StateA?1:0)]+KpA[KindA+(StateA?1:0)]);
 80151ba:	79fb      	ldrb	r3, [r7, #7]
 80151bc:	f1a3 0264 	sub.w	r2, r3, #100	; 0x64
 80151c0:	4b28      	ldr	r3, [pc, #160]	; (8015264 <AiPosi+0xb4>)
 80151c2:	6819      	ldr	r1, [r3, #0]
 80151c4:	4b28      	ldr	r3, [pc, #160]	; (8015268 <AiPosi+0xb8>)
 80151c6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80151ca:	4618      	mov	r0, r3
 80151cc:	4b27      	ldr	r3, [pc, #156]	; (801526c <AiPosi+0xbc>)
 80151ce:	f9b3 3000 	ldrsh.w	r3, [r3]
 80151d2:	2b00      	cmp	r3, #0
 80151d4:	bf14      	ite	ne
 80151d6:	2301      	movne	r3, #1
 80151d8:	2300      	moveq	r3, #0
 80151da:	b2db      	uxtb	r3, r3
 80151dc:	4403      	add	r3, r0
 80151de:	005b      	lsls	r3, r3, #1
 80151e0:	440b      	add	r3, r1
 80151e2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80151e6:	0fd9      	lsrs	r1, r3, #31
 80151e8:	440b      	add	r3, r1
 80151ea:	105b      	asrs	r3, r3, #1
 80151ec:	b21b      	sxth	r3, r3
 80151ee:	fb03 f302 	mul.w	r3, r3, r2
 80151f2:	4a1f      	ldr	r2, [pc, #124]	; (8015270 <AiPosi+0xc0>)
 80151f4:	f9b2 2000 	ldrsh.w	r2, [r2]
 80151f8:	4611      	mov	r1, r2
 80151fa:	4a1e      	ldr	r2, [pc, #120]	; (8015274 <AiPosi+0xc4>)
 80151fc:	5c52      	ldrb	r2, [r2, r1]
 80151fe:	fb02 f303 	mul.w	r3, r2, r3
 8015202:	4a1d      	ldr	r2, [pc, #116]	; (8015278 <AiPosi+0xc8>)
 8015204:	6811      	ldr	r1, [r2, #0]
 8015206:	4a18      	ldr	r2, [pc, #96]	; (8015268 <AiPosi+0xb8>)
 8015208:	f9b2 2000 	ldrsh.w	r2, [r2]
 801520c:	4610      	mov	r0, r2
 801520e:	4a17      	ldr	r2, [pc, #92]	; (801526c <AiPosi+0xbc>)
 8015210:	f9b2 2000 	ldrsh.w	r2, [r2]
 8015214:	2a00      	cmp	r2, #0
 8015216:	bf14      	ite	ne
 8015218:	2201      	movne	r2, #1
 801521a:	2200      	moveq	r2, #0
 801521c:	b2d2      	uxtb	r2, r2
 801521e:	4402      	add	r2, r0
 8015220:	0052      	lsls	r2, r2, #1
 8015222:	440a      	add	r2, r1
 8015224:	f9b2 2000 	ldrsh.w	r2, [r2]
 8015228:	fb93 f3f2 	sdiv	r3, r3, r2
 801522c:	4a0d      	ldr	r2, [pc, #52]	; (8015264 <AiPosi+0xb4>)
 801522e:	6811      	ldr	r1, [r2, #0]
 8015230:	4a0d      	ldr	r2, [pc, #52]	; (8015268 <AiPosi+0xb8>)
 8015232:	f9b2 2000 	ldrsh.w	r2, [r2]
 8015236:	4610      	mov	r0, r2
 8015238:	4a0c      	ldr	r2, [pc, #48]	; (801526c <AiPosi+0xbc>)
 801523a:	f9b2 2000 	ldrsh.w	r2, [r2]
 801523e:	2a00      	cmp	r2, #0
 8015240:	bf14      	ite	ne
 8015242:	2201      	movne	r2, #1
 8015244:	2200      	moveq	r2, #0
 8015246:	b2d2      	uxtb	r2, r2
 8015248:	4402      	add	r2, r0
 801524a:	0052      	lsls	r2, r2, #1
 801524c:	440a      	add	r2, r1
 801524e:	f9b2 2000 	ldrsh.w	r2, [r2]
 8015252:	4413      	add	r3, r2
 8015254:	4619      	mov	r1, r3
 8015256:	2008      	movs	r0, #8
 8015258:	f7f7 f88c 	bl	800c374 <BIOS_Ctrl>
}
 801525c:	bf00      	nop
 801525e:	3708      	adds	r7, #8
 8015260:	46bd      	mov	sp, r7
 8015262:	bd80      	pop	{r7, pc}
 8015264:	2000057c 	.word	0x2000057c
 8015268:	2000688e 	.word	0x2000688e
 801526c:	2000286a 	.word	0x2000286a
 8015270:	20002852 	.word	0x20002852
 8015274:	20000564 	.word	0x20000564
 8015278:	20000580 	.word	0x20000580

0801527c <WaveProcess>:
/*******************************************************************************
 WaveProcess: ���㴦���������������
*******************************************************************************/

void WaveProcess(void)
{
 801527c:	b580      	push	{r7, lr}
 801527e:	b094      	sub	sp, #80	; 0x50
 8015280:	af00      	add	r7, sp, #0
  //------------------ ����Ԥ����,���ɽ���ָ��������ݵ���Ч�� -----------------//

  short* Ain  = (short*)&Sampl[2];
 8015282:	4bb0      	ldr	r3, [pc, #704]	; (8015544 <WaveProcess+0x2c8>)
 8015284:	617b      	str	r3, [r7, #20]

  int  Ak = (KgA[KindA+(StateA?1:0)]*4)/GK[GainA];
 8015286:	4bb0      	ldr	r3, [pc, #704]	; (8015548 <WaveProcess+0x2cc>)
 8015288:	681a      	ldr	r2, [r3, #0]
 801528a:	4bb0      	ldr	r3, [pc, #704]	; (801554c <WaveProcess+0x2d0>)
 801528c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8015290:	4619      	mov	r1, r3
 8015292:	4baf      	ldr	r3, [pc, #700]	; (8015550 <WaveProcess+0x2d4>)
 8015294:	f9b3 3000 	ldrsh.w	r3, [r3]
 8015298:	2b00      	cmp	r3, #0
 801529a:	bf14      	ite	ne
 801529c:	2301      	movne	r3, #1
 801529e:	2300      	moveq	r3, #0
 80152a0:	b2db      	uxtb	r3, r3
 80152a2:	440b      	add	r3, r1
 80152a4:	005b      	lsls	r3, r3, #1
 80152a6:	4413      	add	r3, r2
 80152a8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80152ac:	009b      	lsls	r3, r3, #2
 80152ae:	4aa9      	ldr	r2, [pc, #676]	; (8015554 <WaveProcess+0x2d8>)
 80152b0:	f9b2 2000 	ldrsh.w	r2, [r2]
 80152b4:	4611      	mov	r1, r2
 80152b6:	4aa8      	ldr	r2, [pc, #672]	; (8015558 <WaveProcess+0x2dc>)
 80152b8:	5c52      	ldrb	r2, [r2, r1]
 80152ba:	fb93 f3f2 	sdiv	r3, r3, r2
 80152be:	613b      	str	r3, [r7, #16]
  short  i, n, k, p = 0;
 80152c0:	2300      	movs	r3, #0
 80152c2:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48

  short  VtlA, ViA, VthA, VeA, VpA, VoA;            // VtA,

  short  DtA   = 0, TslA  =  0, TshA = 0, StA  = 2;
 80152c6:	2300      	movs	r3, #0
 80152c8:	87bb      	strh	r3, [r7, #60]	; 0x3c
 80152ca:	2300      	movs	r3, #0
 80152cc:	877b      	strh	r3, [r7, #58]	; 0x3a
 80152ce:	2300      	movs	r3, #0
 80152d0:	873b      	strh	r3, [r7, #56]	; 0x38
 80152d2:	2302      	movs	r3, #2
 80152d4:	86fb      	strh	r3, [r7, #54]	; 0x36
  short  FallA = 0, RiseA =  0, UpA  = 0, DnA  = 0;
 80152d6:	2300      	movs	r3, #0
 80152d8:	86bb      	strh	r3, [r7, #52]	; 0x34
 80152da:	2300      	movs	r3, #0
 80152dc:	867b      	strh	r3, [r7, #50]	; 0x32
 80152de:	2300      	movs	r3, #0
 80152e0:	863b      	strh	r3, [r7, #48]	; 0x30
 80152e2:	2300      	movs	r3, #0
 80152e4:	85fb      	strh	r3, [r7, #46]	; 0x2e
  int  MaxA  = 0, MinA  = ~0, SumA = 0, SsqA = 0; // ���/��Сֵ,�ۼ�/ƽ���� = 0
 80152e6:	2300      	movs	r3, #0
 80152e8:	62bb      	str	r3, [r7, #40]	; 0x28
 80152ea:	f04f 33ff 	mov.w	r3, #4294967295
 80152ee:	627b      	str	r3, [r7, #36]	; 0x24
 80152f0:	2300      	movs	r3, #0
 80152f2:	623b      	str	r3, [r7, #32]
 80152f4:	2300      	movs	r3, #0
 80152f6:	61fb      	str	r3, [r7, #28]

  short  Dpth  = DEPTH[List[SMPL_DPTH].Val] - 1;
 80152f8:	4b98      	ldr	r3, [pc, #608]	; (801555c <WaveProcess+0x2e0>)
 80152fa:	f9b3 304c 	ldrsh.w	r3, [r3, #76]	; 0x4c
 80152fe:	461a      	mov	r2, r3
 8015300:	4b97      	ldr	r3, [pc, #604]	; (8015560 <WaveProcess+0x2e4>)
 8015302:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8015306:	b29b      	uxth	r3, r3
 8015308:	3b01      	subs	r3, #1
 801530a:	b29b      	uxth	r3, r3
 801530c:	837b      	strh	r3, [r7, #26]
  short  Tp    = PRE_SMPL+1, Tm = List[TR_MODE].Val & 1;
 801530e:	2397      	movs	r3, #151	; 0x97
 8015310:	81fb      	strh	r3, [r7, #14]
 8015312:	4b92      	ldr	r3, [pc, #584]	; (801555c <WaveProcess+0x2e0>)
 8015314:	f9b3 3074 	ldrsh.w	r3, [r3, #116]	; 0x74
 8015318:	f003 0301 	and.w	r3, r3, #1
 801531c:	81bb      	strh	r3, [r7, #12]
  short  Ks    = KS[List[TIM_BASE].Val],  Sm = List[SYNCMODE].Val;
 801531e:	4b8f      	ldr	r3, [pc, #572]	; (801555c <WaveProcess+0x2e0>)
 8015320:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8015324:	461a      	mov	r2, r3
 8015326:	4b8f      	ldr	r3, [pc, #572]	; (8015564 <WaveProcess+0x2e8>)
 8015328:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 801532c:	817b      	strh	r3, [r7, #10]
 801532e:	4b8b      	ldr	r3, [pc, #556]	; (801555c <WaveProcess+0x2e0>)
 8015330:	f8b3 306c 	ldrh.w	r3, [r3, #108]	; 0x6c
 8015334:	813b      	strh	r3, [r7, #8]
  char   Ext = List[EXT_REFN].Val;
 8015336:	4b89      	ldr	r3, [pc, #548]	; (801555c <WaveProcess+0x2e0>)
 8015338:	f9b3 30d4 	ldrsh.w	r3, [r3, #212]	; 0xd4
 801533c:	71fb      	strb	r3, [r7, #7]

//---------------------- ��������Ԥ����,����ʵ�ʴ�����ֵ ---------------------//
  if(Status == STOP)
 801533e:	4b8a      	ldr	r3, [pc, #552]	; (8015568 <WaveProcess+0x2ec>)
 8015340:	f9b3 3000 	ldrsh.w	r3, [r3]
 8015344:	2b01      	cmp	r3, #1
 8015346:	d13c      	bne.n	80153c2 <WaveProcess+0x146>
  {
    VtlA  = (((Tri_Posi + Ch1_Posi - List[SENSITIVE].Val-100)<<12)/Ak)+2048;
 8015348:	4b88      	ldr	r3, [pc, #544]	; (801556c <WaveProcess+0x2f0>)
 801534a:	f9b3 3000 	ldrsh.w	r3, [r3]
 801534e:	461a      	mov	r2, r3
 8015350:	4b87      	ldr	r3, [pc, #540]	; (8015570 <WaveProcess+0x2f4>)
 8015352:	f9b3 3000 	ldrsh.w	r3, [r3]
 8015356:	4413      	add	r3, r2
 8015358:	4a80      	ldr	r2, [pc, #512]	; (801555c <WaveProcess+0x2e0>)
 801535a:	f9b2 208c 	ldrsh.w	r2, [r2, #140]	; 0x8c
 801535e:	1a9b      	subs	r3, r3, r2
 8015360:	3b64      	subs	r3, #100	; 0x64
 8015362:	031a      	lsls	r2, r3, #12
 8015364:	693b      	ldr	r3, [r7, #16]
 8015366:	fb92 f3f3 	sdiv	r3, r2, r3
 801536a:	b29b      	uxth	r3, r3
 801536c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8015370:	b29b      	uxth	r3, r3
 8015372:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
    VthA  = (((Tri_Posi + Ch1_Posi + List[SENSITIVE].Val-100)<<12)/Ak)+2048;
 8015376:	4b7d      	ldr	r3, [pc, #500]	; (801556c <WaveProcess+0x2f0>)
 8015378:	f9b3 3000 	ldrsh.w	r3, [r3]
 801537c:	461a      	mov	r2, r3
 801537e:	4b7c      	ldr	r3, [pc, #496]	; (8015570 <WaveProcess+0x2f4>)
 8015380:	f9b3 3000 	ldrsh.w	r3, [r3]
 8015384:	4413      	add	r3, r2
 8015386:	4a75      	ldr	r2, [pc, #468]	; (801555c <WaveProcess+0x2e0>)
 8015388:	f9b2 208c 	ldrsh.w	r2, [r2, #140]	; 0x8c
 801538c:	4413      	add	r3, r2
 801538e:	3b64      	subs	r3, #100	; 0x64
 8015390:	031a      	lsls	r2, r3, #12
 8015392:	693b      	ldr	r3, [r7, #16]
 8015394:	fb92 f3f3 	sdiv	r3, r2, r3
 8015398:	b29b      	uxth	r3, r3
 801539a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801539e:	b29b      	uxth	r3, r3
 80153a0:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
    VpA   = ((((List[V0_POSI].Val)       -100)<<12)/Ak)+2048; //??
 80153a4:	4b6d      	ldr	r3, [pc, #436]	; (801555c <WaveProcess+0x2e0>)
 80153a6:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 80153aa:	3b64      	subs	r3, #100	; 0x64
 80153ac:	031a      	lsls	r2, r3, #12
 80153ae:	693b      	ldr	r3, [r7, #16]
 80153b0:	fb92 f3f3 	sdiv	r3, r2, r3
 80153b4:	b29b      	uxth	r3, r3
 80153b6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80153ba:	b29b      	uxth	r3, r3
 80153bc:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 80153c0:	e03b      	b.n	801543a <WaveProcess+0x1be>
  }
  else
  {
    VtlA  = (((List[THRESHOLD].Val + List[V0_POSI].Val - List[SENSITIVE].Val-100)<<12)/Ak)+2048;
 80153c2:	4b66      	ldr	r3, [pc, #408]	; (801555c <WaveProcess+0x2e0>)
 80153c4:	f9b3 3084 	ldrsh.w	r3, [r3, #132]	; 0x84
 80153c8:	461a      	mov	r2, r3
 80153ca:	4b64      	ldr	r3, [pc, #400]	; (801555c <WaveProcess+0x2e0>)
 80153cc:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 80153d0:	4413      	add	r3, r2
 80153d2:	4a62      	ldr	r2, [pc, #392]	; (801555c <WaveProcess+0x2e0>)
 80153d4:	f9b2 208c 	ldrsh.w	r2, [r2, #140]	; 0x8c
 80153d8:	1a9b      	subs	r3, r3, r2
 80153da:	3b64      	subs	r3, #100	; 0x64
 80153dc:	031a      	lsls	r2, r3, #12
 80153de:	693b      	ldr	r3, [r7, #16]
 80153e0:	fb92 f3f3 	sdiv	r3, r2, r3
 80153e4:	b29b      	uxth	r3, r3
 80153e6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80153ea:	b29b      	uxth	r3, r3
 80153ec:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
    VthA  = (((List[THRESHOLD].Val + List[V0_POSI].Val + List[SENSITIVE].Val-100)<<12)/Ak)+2048;
 80153f0:	4b5a      	ldr	r3, [pc, #360]	; (801555c <WaveProcess+0x2e0>)
 80153f2:	f9b3 3084 	ldrsh.w	r3, [r3, #132]	; 0x84
 80153f6:	461a      	mov	r2, r3
 80153f8:	4b58      	ldr	r3, [pc, #352]	; (801555c <WaveProcess+0x2e0>)
 80153fa:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 80153fe:	4413      	add	r3, r2
 8015400:	4a56      	ldr	r2, [pc, #344]	; (801555c <WaveProcess+0x2e0>)
 8015402:	f9b2 208c 	ldrsh.w	r2, [r2, #140]	; 0x8c
 8015406:	4413      	add	r3, r2
 8015408:	3b64      	subs	r3, #100	; 0x64
 801540a:	031a      	lsls	r2, r3, #12
 801540c:	693b      	ldr	r3, [r7, #16]
 801540e:	fb92 f3f3 	sdiv	r3, r2, r3
 8015412:	b29b      	uxth	r3, r3
 8015414:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8015418:	b29b      	uxth	r3, r3
 801541a:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
    VpA   = ((((List[V0_POSI].Val)       -100)<<12)/Ak)+2048;
 801541e:	4b4f      	ldr	r3, [pc, #316]	; (801555c <WaveProcess+0x2e0>)
 8015420:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 8015424:	3b64      	subs	r3, #100	; 0x64
 8015426:	031a      	lsls	r2, r3, #12
 8015428:	693b      	ldr	r3, [r7, #16]
 801542a:	fb92 f3f3 	sdiv	r3, r2, r3
 801542e:	b29b      	uxth	r3, r3
 8015430:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8015434:	b29b      	uxth	r3, r3
 8015436:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  }
//-------------------------- ��������ͳ������� ------------------------------//


  if(((List[SYNCMODE].Val == NONE)||(List[SYNCMODE].Val == SCAN))
 801543a:	4b48      	ldr	r3, [pc, #288]	; (801555c <WaveProcess+0x2e0>)
 801543c:	f9b3 306c 	ldrsh.w	r3, [r3, #108]	; 0x6c
 8015440:	2b05      	cmp	r3, #5
 8015442:	d004      	beq.n	801544e <WaveProcess+0x1d2>
 8015444:	4b45      	ldr	r3, [pc, #276]	; (801555c <WaveProcess+0x2e0>)
 8015446:	f9b3 306c 	ldrsh.w	r3, [r3, #108]	; 0x6c
 801544a:	2b01      	cmp	r3, #1
 801544c:	d10b      	bne.n	8015466 <WaveProcess+0x1ea>
     &&(List[TIM_BASE].Val>11))
 801544e:	4b43      	ldr	r3, [pc, #268]	; (801555c <WaveProcess+0x2e0>)
 8015450:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8015454:	2b0b      	cmp	r3, #11
 8015456:	dd06      	ble.n	8015466 <WaveProcess+0x1ea>
  {
    Dpth = 302;
 8015458:	f44f 7397 	mov.w	r3, #302	; 0x12e
 801545c:	837b      	strh	r3, [r7, #26]
    List[VIEWPOSI].Val = 0;
 801545e:	4b3f      	ldr	r3, [pc, #252]	; (801555c <WaveProcess+0x2e0>)
 8015460:	2200      	movs	r2, #0
 8015462:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  for(i=0; i<Dpth; i++)
 8015466:	2300      	movs	r3, #0
 8015468:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 801546c:	e0ad      	b.n	80155ca <WaveProcess+0x34e>
  {
	n = __HAL_DMA_GET_COUNTER(&hdma_adc1);//    DMA1_Channel1->CNDTR;              //DMA_CH_A->CNDTR; //DMA1_CNDTR1
 801546e:	4b41      	ldr	r3, [pc, #260]	; (8015574 <WaveProcess+0x2f8>)
 8015470:	681b      	ldr	r3, [r3, #0]
 8015472:	685b      	ldr	r3, [r3, #4]
 8015474:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
    if(i >= (Dpth-n)) break;      // ����һ���ڵȴ�A/Dת�����
 8015478:	f9b7 204e 	ldrsh.w	r2, [r7, #78]	; 0x4e
 801547c:	f9b7 101a 	ldrsh.w	r1, [r7, #26]
 8015480:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 8015484:	1acb      	subs	r3, r1, r3
 8015486:	429a      	cmp	r2, r3
 8015488:	f280 80a7 	bge.w	80155da <WaveProcess+0x35e>
    ViA = Ain[i];
 801548c:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 8015490:	005b      	lsls	r3, r3, #1
 8015492:	697a      	ldr	r2, [r7, #20]
 8015494:	4413      	add	r3, r2
 8015496:	881b      	ldrh	r3, [r3, #0]
 8015498:	80bb      	strh	r3, [r7, #4]

    if(MaxA < ViA) MaxA = ViA;    // ͳ�����ֵ
 801549a:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 801549e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80154a0:	429a      	cmp	r2, r3
 80154a2:	da02      	bge.n	80154aa <WaveProcess+0x22e>
 80154a4:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80154a8:	62bb      	str	r3, [r7, #40]	; 0x28
    if(MinA > ViA) MinA = ViA;    // ͳ����Сֵ
 80154aa:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80154ae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80154b0:	429a      	cmp	r2, r3
 80154b2:	dd02      	ble.n	80154ba <WaveProcess+0x23e>
 80154b4:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80154b8:	627b      	str	r3, [r7, #36]	; 0x24
    SumA += ViA;                  // ͳ���ۼӺ�
 80154ba:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80154be:	6a3a      	ldr	r2, [r7, #32]
 80154c0:	4413      	add	r3, r2
 80154c2:	623b      	str	r3, [r7, #32]
    SsqA +=(ViA-VpA)*(ViA-VpA);   // ͳ��ƽ����
 80154c4:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 80154c8:	f9b7 3040 	ldrsh.w	r3, [r7, #64]	; 0x40
 80154cc:	1ad3      	subs	r3, r2, r3
 80154ce:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 80154d2:	f9b7 2040 	ldrsh.w	r2, [r7, #64]	; 0x40
 80154d6:	1a8a      	subs	r2, r1, r2
 80154d8:	fb02 f303 	mul.w	r3, r2, r3
 80154dc:	69fa      	ldr	r2, [r7, #28]
 80154de:	4413      	add	r3, r2
 80154e0:	61fb      	str	r3, [r7, #28]


    if(StA == 2) DtA = 0;                  // ����CH_A�׸�������ǰ��ʱ���ۼ�
 80154e2:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 80154e6:	2b02      	cmp	r3, #2
 80154e8:	d102      	bne.n	80154f0 <WaveProcess+0x274>
 80154ea:	2300      	movs	r3, #0
 80154ec:	87bb      	strh	r3, [r7, #60]	; 0x3c
 80154ee:	e005      	b.n	80154fc <WaveProcess+0x280>
    else         DtA++;
 80154f0:	f9b7 303c 	ldrsh.w	r3, [r7, #60]	; 0x3c
 80154f4:	b29b      	uxth	r3, r3
 80154f6:	3301      	adds	r3, #1
 80154f8:	b29b      	uxth	r3, r3
 80154fa:	87bb      	strh	r3, [r7, #60]	; 0x3c

    if(ViA > VthA){                        // ViA ������ֵ����
 80154fc:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8015500:	f9b7 3044 	ldrsh.w	r3, [r7, #68]	; 0x44
 8015504:	429a      	cmp	r2, r3
 8015506:	dd37      	ble.n	8015578 <WaveProcess+0x2fc>
      if(StA == 0){
 8015508:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 801550c:	2b00      	cmp	r3, #0
 801550e:	d115      	bne.n	801553c <WaveProcess+0x2c0>
        TslA += DtA; DtA = 0; RiseA++;     // CH_A��λʱ���ۼƣ��������ۼ�
 8015510:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8015512:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8015514:	4413      	add	r3, r2
 8015516:	b29b      	uxth	r3, r3
 8015518:	877b      	strh	r3, [r7, #58]	; 0x3a
 801551a:	2300      	movs	r3, #0
 801551c:	87bb      	strh	r3, [r7, #60]	; 0x3c
 801551e:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 8015522:	b29b      	uxth	r3, r3
 8015524:	3301      	adds	r3, #1
 8015526:	b29b      	uxth	r3, r3
 8015528:	867b      	strh	r3, [r7, #50]	; 0x32
        if(UpA < Tp) UpA = i;              // ��¼Ԥ������CH_A��һ��������λ��
 801552a:	f9b7 2030 	ldrsh.w	r2, [r7, #48]	; 0x30
 801552e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8015532:	429a      	cmp	r2, r3
 8015534:	da02      	bge.n	801553c <WaveProcess+0x2c0>
 8015536:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 801553a:	863b      	strh	r3, [r7, #48]	; 0x30
      }
      StA = 1;                             // ��ǰCH_A״̬��Ϊ��λ
 801553c:	2301      	movs	r3, #1
 801553e:	86fb      	strh	r3, [r7, #54]	; 0x36
 8015540:	e03c      	b.n	80155bc <WaveProcess+0x340>
 8015542:	bf00      	nop
 8015544:	2000287c 	.word	0x2000287c
 8015548:	20000580 	.word	0x20000580
 801554c:	2000688e 	.word	0x2000688e
 8015550:	2000286a 	.word	0x2000286a
 8015554:	20002852 	.word	0x20002852
 8015558:	20000564 	.word	0x20000564
 801555c:	2000029c 	.word	0x2000029c
 8015560:	08002270 	.word	0x08002270
 8015564:	08002278 	.word	0x08002278
 8015568:	200007a8 	.word	0x200007a8
 801556c:	20002868 	.word	0x20002868
 8015570:	2000688c 	.word	0x2000688c
 8015574:	20006b18 	.word	0x20006b18
    } else if(ViA < VtlA){                 // ViA ������ֵ����
 8015578:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 801557c:	f9b7 3046 	ldrsh.w	r3, [r7, #70]	; 0x46
 8015580:	429a      	cmp	r2, r3
 8015582:	da1b      	bge.n	80155bc <WaveProcess+0x340>
      if(StA == 1){
 8015584:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 8015588:	2b01      	cmp	r3, #1
 801558a:	d115      	bne.n	80155b8 <WaveProcess+0x33c>
        TshA += DtA; DtA = 0; FallA++;     // CH_A��λʱ���ۼƣ��½����ۼ�
 801558c:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 801558e:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8015590:	4413      	add	r3, r2
 8015592:	b29b      	uxth	r3, r3
 8015594:	873b      	strh	r3, [r7, #56]	; 0x38
 8015596:	2300      	movs	r3, #0
 8015598:	87bb      	strh	r3, [r7, #60]	; 0x3c
 801559a:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	; 0x34
 801559e:	b29b      	uxth	r3, r3
 80155a0:	3301      	adds	r3, #1
 80155a2:	b29b      	uxth	r3, r3
 80155a4:	86bb      	strh	r3, [r7, #52]	; 0x34
        if(DnA < Tp) DnA = i;              // ��¼Ԥ������CH_A��һ���½���λ��
 80155a6:	f9b7 202e 	ldrsh.w	r2, [r7, #46]	; 0x2e
 80155aa:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80155ae:	429a      	cmp	r2, r3
 80155b0:	da02      	bge.n	80155b8 <WaveProcess+0x33c>
 80155b2:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80155b6:	85fb      	strh	r3, [r7, #46]	; 0x2e
      }
      StA = 0;                             // ��ǰCH_A״̬��Ϊ��λ
 80155b8:	2300      	movs	r3, #0
 80155ba:	86fb      	strh	r3, [r7, #54]	; 0x36
  for(i=0; i<Dpth; i++)
 80155bc:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 80155c0:	b29b      	uxth	r3, r3
 80155c2:	3301      	adds	r3, #1
 80155c4:	b29b      	uxth	r3, r3
 80155c6:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 80155ca:	f9b7 204e 	ldrsh.w	r2, [r7, #78]	; 0x4e
 80155ce:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 80155d2:	429a      	cmp	r2, r3
 80155d4:	f6ff af4b 	blt.w	801546e <WaveProcess+0x1f2>
 80155d8:	e000      	b.n	80155dc <WaveProcess+0x360>
    if(i >= (Dpth-n)) break;      // ����һ���ڵȴ�A/Dת�����
 80155da:	bf00      	nop
    }
  }
  if(n == 0)
 80155dc:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 80155e0:	2b00      	cmp	r3, #0
 80155e2:	d14f      	bne.n	8015684 <WaveProcess+0x408>
  {                              // ����ȫ����ɺ��������ֵ i == Dpth
    Vmax = MaxA; Vmin = MinA; Vavg = SumA/i; Vssq = SsqA/(i+1);
 80155e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80155e6:	b21a      	sxth	r2, r3
 80155e8:	4b9a      	ldr	r3, [pc, #616]	; (8015854 <WaveProcess+0x5d8>)
 80155ea:	801a      	strh	r2, [r3, #0]
 80155ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80155ee:	b21a      	sxth	r2, r3
 80155f0:	4b99      	ldr	r3, [pc, #612]	; (8015858 <WaveProcess+0x5dc>)
 80155f2:	801a      	strh	r2, [r3, #0]
 80155f4:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 80155f8:	6a3a      	ldr	r2, [r7, #32]
 80155fa:	fb92 f3f3 	sdiv	r3, r2, r3
 80155fe:	b21a      	sxth	r2, r3
 8015600:	4b96      	ldr	r3, [pc, #600]	; (801585c <WaveProcess+0x5e0>)
 8015602:	801a      	strh	r2, [r3, #0]
 8015604:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 8015608:	3301      	adds	r3, #1
 801560a:	69fa      	ldr	r2, [r7, #28]
 801560c:	fb92 f3f3 	sdiv	r3, r2, r3
 8015610:	4a93      	ldr	r2, [pc, #588]	; (8015860 <WaveProcess+0x5e4>)
 8015612:	6013      	str	r3, [r2, #0]
    Vrms = (Sqrt32(Vssq)); Vmid = (Vmax + Vmin)/2; Vpp = Vmax - Vmin;
 8015614:	4b92      	ldr	r3, [pc, #584]	; (8015860 <WaveProcess+0x5e4>)
 8015616:	681b      	ldr	r3, [r3, #0]
 8015618:	4618      	mov	r0, r3
 801561a:	f7fc fbf5 	bl	8011e08 <Sqrt32>
 801561e:	4603      	mov	r3, r0
 8015620:	461a      	mov	r2, r3
 8015622:	4b90      	ldr	r3, [pc, #576]	; (8015864 <WaveProcess+0x5e8>)
 8015624:	601a      	str	r2, [r3, #0]
 8015626:	4b8b      	ldr	r3, [pc, #556]	; (8015854 <WaveProcess+0x5d8>)
 8015628:	f9b3 3000 	ldrsh.w	r3, [r3]
 801562c:	461a      	mov	r2, r3
 801562e:	4b8a      	ldr	r3, [pc, #552]	; (8015858 <WaveProcess+0x5dc>)
 8015630:	f9b3 3000 	ldrsh.w	r3, [r3]
 8015634:	4413      	add	r3, r2
 8015636:	0fda      	lsrs	r2, r3, #31
 8015638:	4413      	add	r3, r2
 801563a:	105b      	asrs	r3, r3, #1
 801563c:	b21a      	sxth	r2, r3
 801563e:	4b8a      	ldr	r3, [pc, #552]	; (8015868 <WaveProcess+0x5ec>)
 8015640:	801a      	strh	r2, [r3, #0]
 8015642:	4b84      	ldr	r3, [pc, #528]	; (8015854 <WaveProcess+0x5d8>)
 8015644:	f9b3 3000 	ldrsh.w	r3, [r3]
 8015648:	461a      	mov	r2, r3
 801564a:	4b83      	ldr	r3, [pc, #524]	; (8015858 <WaveProcess+0x5dc>)
 801564c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8015650:	1ad3      	subs	r3, r2, r3
 8015652:	4a86      	ldr	r2, [pc, #536]	; (801586c <WaveProcess+0x5f0>)
 8015654:	6013      	str	r3, [r2, #0]
    HighT = TshA/FallA; LowT = TslA/RiseA; Edge = FallA+ RiseA;
 8015656:	f9b7 2038 	ldrsh.w	r2, [r7, #56]	; 0x38
 801565a:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	; 0x34
 801565e:	fb92 f3f3 	sdiv	r3, r2, r3
 8015662:	4a83      	ldr	r2, [pc, #524]	; (8015870 <WaveProcess+0x5f4>)
 8015664:	6013      	str	r3, [r2, #0]
 8015666:	f9b7 203a 	ldrsh.w	r2, [r7, #58]	; 0x3a
 801566a:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 801566e:	fb92 f3f3 	sdiv	r3, r2, r3
 8015672:	4a80      	ldr	r2, [pc, #512]	; (8015874 <WaveProcess+0x5f8>)
 8015674:	6013      	str	r3, [r2, #0]
 8015676:	f9b7 2034 	ldrsh.w	r2, [r7, #52]	; 0x34
 801567a:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 801567e:	4413      	add	r3, r2
 8015680:	4a7d      	ldr	r2, [pc, #500]	; (8015878 <WaveProcess+0x5fc>)
 8015682:	6013      	str	r3, [r2, #0]

  }
//--------------------------- ���ɲ�����ʾ���� -------------------------------//

  if(((Sm == NONE)||(Sm == SCAN))){
 8015684:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8015688:	2b05      	cmp	r3, #5
 801568a:	d003      	beq.n	8015694 <WaveProcess+0x418>
 801568c:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8015690:	2b01      	cmp	r3, #1
 8015692:	d12f      	bne.n	80156f4 <WaveProcess+0x478>
    if(List[TIM_BASE].Val > 11)
 8015694:	4b79      	ldr	r3, [pc, #484]	; (801587c <WaveProcess+0x600>)
 8015696:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 801569a:	2b0b      	cmp	r3, #11
 801569c:	dd03      	ble.n	80156a6 <WaveProcess+0x42a>
      k = 1;                         // NONE SCAN ģʽ��ǿ�ƴ���
 801569e:	2301      	movs	r3, #1
 80156a0:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
    if(List[TIM_BASE].Val > 11)
 80156a4:	e033      	b.n	801570e <WaveProcess+0x492>
    else
    {
      k =((Tm == RISE)? UpA : DnA)-Tp; // k:Ԥ�����󴥷���λ��
 80156a6:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80156aa:	2b00      	cmp	r3, #0
 80156ac:	d101      	bne.n	80156b2 <WaveProcess+0x436>
 80156ae:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 80156b0:	e000      	b.n	80156b4 <WaveProcess+0x438>
 80156b2:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80156b4:	89fa      	ldrh	r2, [r7, #14]
 80156b6:	1a9b      	subs	r3, r3, r2
 80156b8:	b29b      	uxth	r3, r3
 80156ba:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

      if((Sm == SCAN)&&(k < 0)){ // AUTO ģʽ���޴���ʱ
 80156be:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 80156c2:	2b01      	cmp	r3, #1
 80156c4:	d123      	bne.n	801570e <WaveProcess+0x492>
 80156c6:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 80156ca:	2b00      	cmp	r3, #0
 80156cc:	da1f      	bge.n	801570e <WaveProcess+0x492>
        if(i > Dpth/4) k = 1;    // ������1/4����ǿ�ƴ���
 80156ce:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 80156d2:	2b00      	cmp	r3, #0
 80156d4:	da00      	bge.n	80156d8 <WaveProcess+0x45c>
 80156d6:	3303      	adds	r3, #3
 80156d8:	109b      	asrs	r3, r3, #2
 80156da:	b21b      	sxth	r3, r3
 80156dc:	f9b7 204e 	ldrsh.w	r2, [r7, #78]	; 0x4e
 80156e0:	429a      	cmp	r2, r3
 80156e2:	dd03      	ble.n	80156ec <WaveProcess+0x470>
 80156e4:	2301      	movs	r3, #1
 80156e6:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
    if(List[TIM_BASE].Val > 11)
 80156ea:	e010      	b.n	801570e <WaveProcess+0x492>
        else           k = 0;    // ������1/4��ǰ����ʾ
 80156ec:	2300      	movs	r3, #0
 80156ee:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
    if(List[TIM_BASE].Val > 11)
 80156f2:	e00c      	b.n	801570e <WaveProcess+0x492>
      }

    }
  } else
    k =((Tm == RISE)? UpA : DnA)-Tp; // k:Ԥ�����󴥷���λ��
 80156f4:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80156f8:	2b00      	cmp	r3, #0
 80156fa:	d101      	bne.n	8015700 <WaveProcess+0x484>
 80156fc:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 80156fe:	e000      	b.n	8015702 <WaveProcess+0x486>
 8015700:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8015702:	89fa      	ldrh	r2, [r7, #14]
 8015704:	1a9b      	subs	r3, r3, r2
 8015706:	b29b      	uxth	r3, r3
 8015708:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 801570c:	e000      	b.n	8015710 <WaveProcess+0x494>
    if(List[TIM_BASE].Val > 11)
 801570e:	bf00      	nop

  if((!n)&&(Sm == SINGL)&&(k > 0)){ // SNGL ģʽ���д���ʱ�����������Զ�ֹͣ
 8015710:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 8015714:	2b00      	cmp	r3, #0
 8015716:	d10c      	bne.n	8015732 <WaveProcess+0x4b6>
 8015718:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 801571c:	2b04      	cmp	r3, #4
 801571e:	d108      	bne.n	8015732 <WaveProcess+0x4b6>
 8015720:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 8015724:	2b00      	cmp	r3, #0
 8015726:	dd04      	ble.n	8015732 <WaveProcess+0x4b6>
    Status = STOP;
 8015728:	4b55      	ldr	r3, [pc, #340]	; (8015880 <WaveProcess+0x604>)
 801572a:	2201      	movs	r2, #1
 801572c:	801a      	strh	r2, [r3, #0]
    DispStatus();
 801572e:	f7fe ff21 	bl	8014574 <DispStatus>
  }

  if((Sm == AUTO)&&(k < 0)){ // AUTO ģʽ���޴���ʱ
 8015732:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8015736:	2b02      	cmp	r3, #2
 8015738:	d115      	bne.n	8015766 <WaveProcess+0x4ea>
 801573a:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 801573e:	2b00      	cmp	r3, #0
 8015740:	da11      	bge.n	8015766 <WaveProcess+0x4ea>
    if(i > Dpth/4) k = 1;    // ������1/4����ǿ�ƴ���
 8015742:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8015746:	2b00      	cmp	r3, #0
 8015748:	da00      	bge.n	801574c <WaveProcess+0x4d0>
 801574a:	3303      	adds	r3, #3
 801574c:	109b      	asrs	r3, r3, #2
 801574e:	b21b      	sxth	r3, r3
 8015750:	f9b7 204e 	ldrsh.w	r2, [r7, #78]	; 0x4e
 8015754:	429a      	cmp	r2, r3
 8015756:	dd03      	ble.n	8015760 <WaveProcess+0x4e4>
 8015758:	2301      	movs	r3, #1
 801575a:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 801575e:	e002      	b.n	8015766 <WaveProcess+0x4ea>
    else           k = 0;    // ������1/4��ǰ����ʾ
 8015760:	2300      	movs	r3, #0
 8015762:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
  }

  Trigger_k = k;
 8015766:	4a47      	ldr	r2, [pc, #284]	; (8015884 <WaveProcess+0x608>)
 8015768:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 801576c:	8013      	strh	r3, [r2, #0]

  if(Trigger_k>0)NORM_Kflag = 1;
 801576e:	4b45      	ldr	r3, [pc, #276]	; (8015884 <WaveProcess+0x608>)
 8015770:	f9b3 3000 	ldrsh.w	r3, [r3]
 8015774:	2b00      	cmp	r3, #0
 8015776:	dd02      	ble.n	801577e <WaveProcess+0x502>
 8015778:	4b43      	ldr	r3, [pc, #268]	; (8015888 <WaveProcess+0x60c>)
 801577a:	2201      	movs	r2, #1
 801577c:	701a      	strb	r2, [r3, #0]

  if((SNGL_Kflag)&&(Status == STOP))
 801577e:	4b43      	ldr	r3, [pc, #268]	; (801588c <WaveProcess+0x610>)
 8015780:	781b      	ldrb	r3, [r3, #0]
 8015782:	2b00      	cmp	r3, #0
 8015784:	d016      	beq.n	80157b4 <WaveProcess+0x538>
 8015786:	4b3e      	ldr	r3, [pc, #248]	; (8015880 <WaveProcess+0x604>)
 8015788:	f9b3 3000 	ldrsh.w	r3, [r3]
 801578c:	2b01      	cmp	r3, #1
 801578e:	d111      	bne.n	80157b4 <WaveProcess+0x538>
  {
    Ch1_Posi = List[V0_POSI].Val;
 8015790:	4b3a      	ldr	r3, [pc, #232]	; (801587c <WaveProcess+0x600>)
 8015792:	f9b3 201c 	ldrsh.w	r2, [r3, #28]
 8015796:	4b3e      	ldr	r3, [pc, #248]	; (8015890 <WaveProcess+0x614>)
 8015798:	801a      	strh	r2, [r3, #0]
    Ch2_Posi = List[EXT_POSI].Val;
 801579a:	4b38      	ldr	r3, [pc, #224]	; (801587c <WaveProcess+0x600>)
 801579c:	f9b3 20dc 	ldrsh.w	r2, [r3, #220]	; 0xdc
 80157a0:	4b3c      	ldr	r3, [pc, #240]	; (8015894 <WaveProcess+0x618>)
 80157a2:	801a      	strh	r2, [r3, #0]
    Tri_Posi = List[THRESHOLD].Val;
 80157a4:	4b35      	ldr	r3, [pc, #212]	; (801587c <WaveProcess+0x600>)
 80157a6:	f9b3 2084 	ldrsh.w	r2, [r3, #132]	; 0x84
 80157aa:	4b3b      	ldr	r3, [pc, #236]	; (8015898 <WaveProcess+0x61c>)
 80157ac:	801a      	strh	r2, [r3, #0]
    SNGL_Kflag = 0;
 80157ae:	4b37      	ldr	r3, [pc, #220]	; (801588c <WaveProcess+0x610>)
 80157b0:	2200      	movs	r2, #0
 80157b2:	701a      	strb	r2, [r3, #0]
  }

  if(k > 0)
 80157b4:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 80157b8:	2b00      	cmp	r3, #0
 80157ba:	f340 8104 	ble.w	80159c6 <WaveProcess+0x74a>
  {                                               // �д���ʱ����ʾ����
    k += List[VIEWPOSI].Val+((1024-Ks)*Tp+512)/1024; // ���β�ֵ���
 80157be:	4b2f      	ldr	r3, [pc, #188]	; (801587c <WaveProcess+0x600>)
 80157c0:	f9b3 3044 	ldrsh.w	r3, [r3, #68]	; 0x44
 80157c4:	b29a      	uxth	r2, r3
 80157c6:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80157ca:	f5c3 6380 	rsb	r3, r3, #1024	; 0x400
 80157ce:	f9b7 100e 	ldrsh.w	r1, [r7, #14]
 80157d2:	fb01 f303 	mul.w	r3, r1, r3
 80157d6:	f503 7300 	add.w	r3, r3, #512	; 0x200
 80157da:	2b00      	cmp	r3, #0
 80157dc:	da01      	bge.n	80157e2 <WaveProcess+0x566>
 80157de:	f203 33ff 	addw	r3, r3, #1023	; 0x3ff
 80157e2:	129b      	asrs	r3, r3, #10
 80157e4:	b29b      	uxth	r3, r3
 80157e6:	4413      	add	r3, r2
 80157e8:	b29a      	uxth	r2, r3
 80157ea:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80157ee:	4413      	add	r3, r2
 80157f0:	b29b      	uxth	r3, r3
 80157f2:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
    VeA =(((Ain[k]-2048)*Ak)>>12)+100;
 80157f6:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 80157fa:	005b      	lsls	r3, r3, #1
 80157fc:	697a      	ldr	r2, [r7, #20]
 80157fe:	4413      	add	r3, r2
 8015800:	f9b3 3000 	ldrsh.w	r3, [r3]
 8015804:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 8015808:	693a      	ldr	r2, [r7, #16]
 801580a:	fb02 f303 	mul.w	r3, r2, r3
 801580e:	131b      	asrs	r3, r3, #12
 8015810:	b29b      	uxth	r3, r3
 8015812:	3364      	adds	r3, #100	; 0x64
 8015814:	b29b      	uxth	r3, r3
 8015816:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

    for(n=0; n<300;)
 801581a:	2300      	movs	r3, #0
 801581c:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 8015820:	e0c7      	b.n	80159b2 <WaveProcess+0x736>
    {
      ViA =(((Ain[k]-2048)*Ak)>>12)+100;
 8015822:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 8015826:	005b      	lsls	r3, r3, #1
 8015828:	697a      	ldr	r2, [r7, #20]
 801582a:	4413      	add	r3, r2
 801582c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8015830:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 8015834:	693a      	ldr	r2, [r7, #16]
 8015836:	fb02 f303 	mul.w	r3, r2, r3
 801583a:	131b      	asrs	r3, r3, #12
 801583c:	b29b      	uxth	r3, r3
 801583e:	3364      	adds	r3, #100	; 0x64
 8015840:	b29b      	uxth	r3, r3
 8015842:	80bb      	strh	r3, [r7, #4]
      k++;
 8015844:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 8015848:	b29b      	uxth	r3, r3
 801584a:	3301      	adds	r3, #1
 801584c:	b29b      	uxth	r3, r3
 801584e:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
      while(p > 0){
 8015852:	e09e      	b.n	8015992 <WaveProcess+0x716>
 8015854:	2000285e 	.word	0x2000285e
 8015858:	20002870 	.word	0x20002870
 801585c:	20002860 	.word	0x20002860
 8015860:	20002864 	.word	0x20002864
 8015864:	2000286c 	.word	0x2000286c
 8015868:	20002872 	.word	0x20002872
 801586c:	20006888 	.word	0x20006888
 8015870:	20006880 	.word	0x20006880
 8015874:	20006894 	.word	0x20006894
 8015878:	20002858 	.word	0x20002858
 801587c:	2000029c 	.word	0x2000029c
 8015880:	200007a8 	.word	0x200007a8
 8015884:	2000285c 	.word	0x2000285c
 8015888:	20002874 	.word	0x20002874
 801588c:	20000560 	.word	0x20000560
 8015890:	2000688c 	.word	0x2000688c
 8015894:	20006884 	.word	0x20006884
 8015898:	20002868 	.word	0x20002868
        VoA = VeA +((ViA-VeA)*(1024-p))/1024; // ���� A ͨ����ǰ���ε�Ĳ�ֵ
 801589c:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 80158a0:	f9b7 3042 	ldrsh.w	r3, [r7, #66]	; 0x42
 80158a4:	1ad3      	subs	r3, r2, r3
 80158a6:	f9b7 2048 	ldrsh.w	r2, [r7, #72]	; 0x48
 80158aa:	f5c2 6280 	rsb	r2, r2, #1024	; 0x400
 80158ae:	fb02 f303 	mul.w	r3, r2, r3
 80158b2:	2b00      	cmp	r3, #0
 80158b4:	da01      	bge.n	80158ba <WaveProcess+0x63e>
 80158b6:	f203 33ff 	addw	r3, r3, #1023	; 0x3ff
 80158ba:	129b      	asrs	r3, r3, #10
 80158bc:	b29a      	uxth	r2, r3
 80158be:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80158c2:	4413      	add	r3, r2
 80158c4:	b29b      	uxth	r3, r3
 80158c6:	87fb      	strh	r3, [r7, #62]	; 0x3e
        if(Status == STOP){
 80158c8:	4b63      	ldr	r3, [pc, #396]	; (8015a58 <WaveProcess+0x7dc>)
 80158ca:	f9b3 3000 	ldrsh.w	r3, [r3]
 80158ce:	2b01      	cmp	r3, #1
 80158d0:	d132      	bne.n	8015938 <WaveProcess+0x6bc>

          Vo_Temp = VoA+(List[V0_POSI].Val-Ch1_Posi);
 80158d2:	4b62      	ldr	r3, [pc, #392]	; (8015a5c <WaveProcess+0x7e0>)
 80158d4:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 80158d8:	b29a      	uxth	r2, r3
 80158da:	4b61      	ldr	r3, [pc, #388]	; (8015a60 <WaveProcess+0x7e4>)
 80158dc:	f9b3 3000 	ldrsh.w	r3, [r3]
 80158e0:	b29b      	uxth	r3, r3
 80158e2:	1ad3      	subs	r3, r2, r3
 80158e4:	b29a      	uxth	r2, r3
 80158e6:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80158e8:	4413      	add	r3, r2
 80158ea:	b29b      	uxth	r3, r3
 80158ec:	b21a      	sxth	r2, r3
 80158ee:	4b5d      	ldr	r3, [pc, #372]	; (8015a64 <WaveProcess+0x7e8>)
 80158f0:	801a      	strh	r2, [r3, #0]

          if(Vo_Temp > 199) Vo_Temp = 202;
 80158f2:	4b5c      	ldr	r3, [pc, #368]	; (8015a64 <WaveProcess+0x7e8>)
 80158f4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80158f8:	2bc7      	cmp	r3, #199	; 0xc7
 80158fa:	dd02      	ble.n	8015902 <WaveProcess+0x686>
 80158fc:	4b59      	ldr	r3, [pc, #356]	; (8015a64 <WaveProcess+0x7e8>)
 80158fe:	22ca      	movs	r2, #202	; 0xca
 8015900:	801a      	strh	r2, [r3, #0]
          if(Vo_Temp <   3) Vo_Temp = 1;                     // �����޷�
 8015902:	4b58      	ldr	r3, [pc, #352]	; (8015a64 <WaveProcess+0x7e8>)
 8015904:	f9b3 3000 	ldrsh.w	r3, [r3]
 8015908:	2b02      	cmp	r3, #2
 801590a:	dc02      	bgt.n	8015912 <WaveProcess+0x696>
 801590c:	4b55      	ldr	r3, [pc, #340]	; (8015a64 <WaveProcess+0x7e8>)
 801590e:	2201      	movs	r2, #1
 8015910:	801a      	strh	r2, [r3, #0]

          WaveBuf[n]= Vo_Temp;
 8015912:	4b54      	ldr	r3, [pc, #336]	; (8015a64 <WaveProcess+0x7e8>)
 8015914:	f9b3 2000 	ldrsh.w	r2, [r3]
 8015918:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 801591c:	b2d1      	uxtb	r1, r2
 801591e:	4a52      	ldr	r2, [pc, #328]	; (8015a68 <WaveProcess+0x7ec>)
 8015920:	54d1      	strb	r1, [r2, r3]

          Build_Ext(n, Ext, List[V0_POSI].Val);
 8015922:	4b4e      	ldr	r3, [pc, #312]	; (8015a5c <WaveProcess+0x7e0>)
 8015924:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 8015928:	b2da      	uxtb	r2, r3
 801592a:	79f9      	ldrb	r1, [r7, #7]
 801592c:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 8015930:	4618      	mov	r0, r3
 8015932:	f000 f89d 	bl	8015a70 <Build_Ext>
 8015936:	e01b      	b.n	8015970 <WaveProcess+0x6f4>
        }
        else{
          if(VoA > 199) VoA = 202;                   // �����޷�  ��������
 8015938:	f9b7 303e 	ldrsh.w	r3, [r7, #62]	; 0x3e
 801593c:	2bc7      	cmp	r3, #199	; 0xc7
 801593e:	dd01      	ble.n	8015944 <WaveProcess+0x6c8>
 8015940:	23ca      	movs	r3, #202	; 0xca
 8015942:	87fb      	strh	r3, [r7, #62]	; 0x3e
          if(VoA <   3) VoA = 2;                     // �����޷�
 8015944:	f9b7 303e 	ldrsh.w	r3, [r7, #62]	; 0x3e
 8015948:	2b02      	cmp	r3, #2
 801594a:	dc01      	bgt.n	8015950 <WaveProcess+0x6d4>
 801594c:	2302      	movs	r3, #2
 801594e:	87fb      	strh	r3, [r7, #62]	; 0x3e
          WaveBuf[n]= VoA;
 8015950:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 8015954:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8015956:	b2d1      	uxtb	r1, r2
 8015958:	4a43      	ldr	r2, [pc, #268]	; (8015a68 <WaveProcess+0x7ec>)
 801595a:	54d1      	strb	r1, [r2, r3]

          Build_Ext(n, Ext, List[V0_POSI].Val);
 801595c:	4b3f      	ldr	r3, [pc, #252]	; (8015a5c <WaveProcess+0x7e0>)
 801595e:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 8015962:	b2da      	uxtb	r2, r3
 8015964:	79f9      	ldrb	r1, [r7, #7]
 8015966:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 801596a:	4618      	mov	r0, r3
 801596c:	f000 f880 	bl	8015a70 <Build_Ext>
        }

        if(n++ >= 300) break;
 8015970:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 8015974:	b29a      	uxth	r2, r3
 8015976:	3201      	adds	r2, #1
 8015978:	b292      	uxth	r2, r2
 801597a:	f8a7 204c 	strh.w	r2, [r7, #76]	; 0x4c
 801597e:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8015982:	da0b      	bge.n	801599c <WaveProcess+0x720>
        p -= Ks;
 8015984:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 8015988:	897b      	ldrh	r3, [r7, #10]
 801598a:	1ad3      	subs	r3, r2, r3
 801598c:	b29b      	uxth	r3, r3
 801598e:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
      while(p > 0){
 8015992:	f9b7 3048 	ldrsh.w	r3, [r7, #72]	; 0x48
 8015996:	2b00      	cmp	r3, #0
 8015998:	dc80      	bgt.n	801589c <WaveProcess+0x620>
 801599a:	e000      	b.n	801599e <WaveProcess+0x722>
        if(n++ >= 300) break;
 801599c:	bf00      	nop
      }
      p += 1024;
 801599e:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80159a2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80159a6:	b29b      	uxth	r3, r3
 80159a8:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
      VeA = ViA;                              // �ݴ浱ǰ���ε��ֵ
 80159ac:	88bb      	ldrh	r3, [r7, #4]
 80159ae:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
    for(n=0; n<300;)
 80159b2:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 80159b6:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 80159ba:	f6ff af32 	blt.w	8015822 <WaveProcess+0x5a6>
    }
    Norm_Clr = 0;                                          //NORM����
 80159be:	4b2b      	ldr	r3, [pc, #172]	; (8015a6c <WaveProcess+0x7f0>)
 80159c0:	2200      	movs	r2, #0
 80159c2:	701a      	strb	r2, [r3, #0]
 80159c4:	e037      	b.n	8015a36 <WaveProcess+0x7ba>
  }
  else if((k < 0) && ((Sm != NORM)||(Norm_Clr))){          //NORM��������Ļ
 80159c6:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 80159ca:	2b00      	cmp	r3, #0
 80159cc:	da33      	bge.n	8015a36 <WaveProcess+0x7ba>
 80159ce:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 80159d2:	2b03      	cmp	r3, #3
 80159d4:	d103      	bne.n	80159de <WaveProcess+0x762>
 80159d6:	4b25      	ldr	r3, [pc, #148]	; (8015a6c <WaveProcess+0x7f0>)
 80159d8:	781b      	ldrb	r3, [r3, #0]
 80159da:	2b00      	cmp	r3, #0
 80159dc:	d02b      	beq.n	8015a36 <WaveProcess+0x7ba>
    for(n=0; n<300;){
 80159de:	2300      	movs	r3, #0
 80159e0:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 80159e4:	e022      	b.n	8015a2c <WaveProcess+0x7b0>
      while(p > 0){
        WaveBuf[n]= 255;
 80159e6:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 80159ea:	4a1f      	ldr	r2, [pc, #124]	; (8015a68 <WaveProcess+0x7ec>)
 80159ec:	21ff      	movs	r1, #255	; 0xff
 80159ee:	54d1      	strb	r1, [r2, r3]

        if(n++ >= 300) break;
 80159f0:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 80159f4:	b29a      	uxth	r2, r3
 80159f6:	3201      	adds	r2, #1
 80159f8:	b292      	uxth	r2, r2
 80159fa:	f8a7 204c 	strh.w	r2, [r7, #76]	; 0x4c
 80159fe:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8015a02:	da0b      	bge.n	8015a1c <WaveProcess+0x7a0>
        p -= Ks;
 8015a04:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 8015a08:	897b      	ldrh	r3, [r7, #10]
 8015a0a:	1ad3      	subs	r3, r2, r3
 8015a0c:	b29b      	uxth	r3, r3
 8015a0e:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
      while(p > 0){
 8015a12:	f9b7 3048 	ldrsh.w	r3, [r7, #72]	; 0x48
 8015a16:	2b00      	cmp	r3, #0
 8015a18:	dce5      	bgt.n	80159e6 <WaveProcess+0x76a>
 8015a1a:	e000      	b.n	8015a1e <WaveProcess+0x7a2>
        if(n++ >= 300) break;
 8015a1c:	bf00      	nop
      }
      p += 1024;
 8015a1e:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8015a22:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8015a26:	b29b      	uxth	r3, r3
 8015a28:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
    for(n=0; n<300;){
 8015a2c:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 8015a30:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8015a34:	dbed      	blt.n	8015a12 <WaveProcess+0x796>
    }
  }
  if((i == Dpth)&&(Status != STOP))
 8015a36:	f9b7 204e 	ldrsh.w	r2, [r7, #78]	; 0x4e
 8015a3a:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8015a3e:	429a      	cmp	r2, r3
 8015a40:	d106      	bne.n	8015a50 <WaveProcess+0x7d4>
 8015a42:	4b05      	ldr	r3, [pc, #20]	; (8015a58 <WaveProcess+0x7dc>)
 8015a44:	f9b3 3000 	ldrsh.w	r3, [r3]
 8015a48:	2b01      	cmp	r3, #1
 8015a4a:	d001      	beq.n	8015a50 <WaveProcess+0x7d4>
  {
	  ADC_Start();       // ���¿�ʼ ADC ɨ�����
 8015a4c:	f7f6 fea6 	bl	800c79c <ADC_Start>
  }
}
 8015a50:	bf00      	nop
 8015a52:	3750      	adds	r7, #80	; 0x50
 8015a54:	46bd      	mov	sp, r7
 8015a56:	bd80      	pop	{r7, pc}
 8015a58:	200007a8 	.word	0x200007a8
 8015a5c:	2000029c 	.word	0x2000029c
 8015a60:	2000688c 	.word	0x2000688c
 8015a64:	20002850 	.word	0x20002850
 8015a68:	20000c10 	.word	0x20000c10
 8015a6c:	200007af 	.word	0x200007af

08015a70 <Build_Ext>:

/*******************************************************************************
 Build_Ext: ��չͨ��������ʾ
*******************************************************************************/
void  Build_Ext(short x, char Ext, char Yp)
{
 8015a70:	b480      	push	{r7}
 8015a72:	b085      	sub	sp, #20
 8015a74:	af00      	add	r7, sp, #0
 8015a76:	4603      	mov	r3, r0
 8015a78:	80fb      	strh	r3, [r7, #6]
 8015a7a:	460b      	mov	r3, r1
 8015a7c:	717b      	strb	r3, [r7, #5]
 8015a7e:	4613      	mov	r3, r2
 8015a80:	713b      	strb	r3, [r7, #4]
  char* Buf = WaveBuf + TRACK1_SIZE;
 8015a82:	4b69      	ldr	r3, [pc, #420]	; (8015c28 <Build_Ext+0x1b8>)
 8015a84:	60bb      	str	r3, [r7, #8]
  short  Vo;

  Posi_2F1 = List[EXT_POSI].Val -  Data[1] - List[V0_POSI].Val;
 8015a86:	4b69      	ldr	r3, [pc, #420]	; (8015c2c <Build_Ext+0x1bc>)
 8015a88:	f9b3 30dc 	ldrsh.w	r3, [r3, #220]	; 0xdc
 8015a8c:	b29a      	uxth	r2, r3
 8015a8e:	4b68      	ldr	r3, [pc, #416]	; (8015c30 <Build_Ext+0x1c0>)
 8015a90:	785b      	ldrb	r3, [r3, #1]
 8015a92:	b29b      	uxth	r3, r3
 8015a94:	1ad3      	subs	r3, r2, r3
 8015a96:	b29a      	uxth	r2, r3
 8015a98:	4b64      	ldr	r3, [pc, #400]	; (8015c2c <Build_Ext+0x1bc>)
 8015a9a:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 8015a9e:	b29b      	uxth	r3, r3
 8015aa0:	1ad3      	subs	r3, r2, r3
 8015aa2:	b29b      	uxth	r3, r3
 8015aa4:	b21a      	sxth	r2, r3
 8015aa6:	4b63      	ldr	r3, [pc, #396]	; (8015c34 <Build_Ext+0x1c4>)
 8015aa8:	801a      	strh	r2, [r3, #0]
  Posi_2F2 = List[EXT_POSI].Val;// - Data[2];
 8015aaa:	4b60      	ldr	r3, [pc, #384]	; (8015c2c <Build_Ext+0x1bc>)
 8015aac:	f9b3 20dc 	ldrsh.w	r2, [r3, #220]	; 0xdc
 8015ab0:	4b61      	ldr	r3, [pc, #388]	; (8015c38 <Build_Ext+0x1c8>)
 8015ab2:	801a      	strh	r2, [r3, #0]

  switch(Ext)
 8015ab4:	797b      	ldrb	r3, [r7, #5]
 8015ab6:	2b05      	cmp	r3, #5
 8015ab8:	f200 809c 	bhi.w	8015bf4 <Build_Ext+0x184>
 8015abc:	a201      	add	r2, pc, #4	; (adr r2, 8015ac4 <Build_Ext+0x54>)
 8015abe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015ac2:	bf00      	nop
 8015ac4:	08015add 	.word	0x08015add
 8015ac8:	08015b03 	.word	0x08015b03
 8015acc:	08015b29 	.word	0x08015b29
 8015ad0:	08015b53 	.word	0x08015b53
 8015ad4:	08015b93 	.word	0x08015b93
 8015ad8:	08015bd3 	.word	0x08015bd3
  {
  case 0: // D
    Vo = Data[x+10]-Data[1]+List[EXT_POSI].Val; break;
 8015adc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8015ae0:	330a      	adds	r3, #10
 8015ae2:	4a53      	ldr	r2, [pc, #332]	; (8015c30 <Build_Ext+0x1c0>)
 8015ae4:	5cd3      	ldrb	r3, [r2, r3]
 8015ae6:	b29a      	uxth	r2, r3
 8015ae8:	4b51      	ldr	r3, [pc, #324]	; (8015c30 <Build_Ext+0x1c0>)
 8015aea:	785b      	ldrb	r3, [r3, #1]
 8015aec:	b29b      	uxth	r3, r3
 8015aee:	1ad3      	subs	r3, r2, r3
 8015af0:	b29a      	uxth	r2, r3
 8015af2:	4b4e      	ldr	r3, [pc, #312]	; (8015c2c <Build_Ext+0x1bc>)
 8015af4:	f9b3 30dc 	ldrsh.w	r3, [r3, #220]	; 0xdc
 8015af8:	b29b      	uxth	r3, r3
 8015afa:	4413      	add	r3, r2
 8015afc:	b29b      	uxth	r3, r3
 8015afe:	81fb      	strh	r3, [r7, #14]
 8015b00:	e078      	b.n	8015bf4 <Build_Ext+0x184>
  case 1: // -D
    Vo = List[EXT_POSI].Val+Data[1]-Data[x+10]; break;
 8015b02:	4b4a      	ldr	r3, [pc, #296]	; (8015c2c <Build_Ext+0x1bc>)
 8015b04:	f9b3 30dc 	ldrsh.w	r3, [r3, #220]	; 0xdc
 8015b08:	b29a      	uxth	r2, r3
 8015b0a:	4b49      	ldr	r3, [pc, #292]	; (8015c30 <Build_Ext+0x1c0>)
 8015b0c:	785b      	ldrb	r3, [r3, #1]
 8015b0e:	b29b      	uxth	r3, r3
 8015b10:	4413      	add	r3, r2
 8015b12:	b29a      	uxth	r2, r3
 8015b14:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8015b18:	330a      	adds	r3, #10
 8015b1a:	4945      	ldr	r1, [pc, #276]	; (8015c30 <Build_Ext+0x1c0>)
 8015b1c:	5ccb      	ldrb	r3, [r1, r3]
 8015b1e:	b29b      	uxth	r3, r3
 8015b20:	1ad3      	subs	r3, r2, r3
 8015b22:	b29b      	uxth	r3, r3
 8015b24:	81fb      	strh	r3, [r7, #14]
 8015b26:	e065      	b.n	8015bf4 <Build_Ext+0x184>
  case 2: // Inp+D
    Vo = Data[x+10]+ WaveBuf[x]+Posi_2F1; break;
 8015b28:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8015b2c:	330a      	adds	r3, #10
 8015b2e:	4a40      	ldr	r2, [pc, #256]	; (8015c30 <Build_Ext+0x1c0>)
 8015b30:	5cd3      	ldrb	r3, [r2, r3]
 8015b32:	b29a      	uxth	r2, r3
 8015b34:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8015b38:	4940      	ldr	r1, [pc, #256]	; (8015c3c <Build_Ext+0x1cc>)
 8015b3a:	5ccb      	ldrb	r3, [r1, r3]
 8015b3c:	b29b      	uxth	r3, r3
 8015b3e:	4413      	add	r3, r2
 8015b40:	b29a      	uxth	r2, r3
 8015b42:	4b3c      	ldr	r3, [pc, #240]	; (8015c34 <Build_Ext+0x1c4>)
 8015b44:	f9b3 3000 	ldrsh.w	r3, [r3]
 8015b48:	b29b      	uxth	r3, r3
 8015b4a:	4413      	add	r3, r2
 8015b4c:	b29b      	uxth	r3, r3
 8015b4e:	81fb      	strh	r3, [r7, #14]
 8015b50:	e050      	b.n	8015bf4 <Build_Ext+0x184>
  case 3: // D-Inp
    Vo = (Data[x+10]-Data[1])- (WaveBuf[x]-List[V0_POSI].Val)+ List[EXT_POSI].Val; break;
 8015b52:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8015b56:	330a      	adds	r3, #10
 8015b58:	4a35      	ldr	r2, [pc, #212]	; (8015c30 <Build_Ext+0x1c0>)
 8015b5a:	5cd3      	ldrb	r3, [r2, r3]
 8015b5c:	b29a      	uxth	r2, r3
 8015b5e:	4b34      	ldr	r3, [pc, #208]	; (8015c30 <Build_Ext+0x1c0>)
 8015b60:	785b      	ldrb	r3, [r3, #1]
 8015b62:	b29b      	uxth	r3, r3
 8015b64:	1ad3      	subs	r3, r2, r3
 8015b66:	b29a      	uxth	r2, r3
 8015b68:	4b30      	ldr	r3, [pc, #192]	; (8015c2c <Build_Ext+0x1bc>)
 8015b6a:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 8015b6e:	b299      	uxth	r1, r3
 8015b70:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8015b74:	4831      	ldr	r0, [pc, #196]	; (8015c3c <Build_Ext+0x1cc>)
 8015b76:	5cc3      	ldrb	r3, [r0, r3]
 8015b78:	b29b      	uxth	r3, r3
 8015b7a:	1acb      	subs	r3, r1, r3
 8015b7c:	b29b      	uxth	r3, r3
 8015b7e:	4413      	add	r3, r2
 8015b80:	b29a      	uxth	r2, r3
 8015b82:	4b2a      	ldr	r3, [pc, #168]	; (8015c2c <Build_Ext+0x1bc>)
 8015b84:	f9b3 30dc 	ldrsh.w	r3, [r3, #220]	; 0xdc
 8015b88:	b29b      	uxth	r3, r3
 8015b8a:	4413      	add	r3, r2
 8015b8c:	b29b      	uxth	r3, r3
 8015b8e:	81fb      	strh	r3, [r7, #14]
 8015b90:	e030      	b.n	8015bf4 <Build_Ext+0x184>
  case 4: // Inp-D
    Vo = (WaveBuf[x]-List[V0_POSI].Val)-(Data[x+10]-Data[1]) + List[EXT_POSI].Val; break;
 8015b92:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8015b96:	4a29      	ldr	r2, [pc, #164]	; (8015c3c <Build_Ext+0x1cc>)
 8015b98:	5cd3      	ldrb	r3, [r2, r3]
 8015b9a:	b29a      	uxth	r2, r3
 8015b9c:	4b23      	ldr	r3, [pc, #140]	; (8015c2c <Build_Ext+0x1bc>)
 8015b9e:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 8015ba2:	b29b      	uxth	r3, r3
 8015ba4:	1ad3      	subs	r3, r2, r3
 8015ba6:	b29a      	uxth	r2, r3
 8015ba8:	4b21      	ldr	r3, [pc, #132]	; (8015c30 <Build_Ext+0x1c0>)
 8015baa:	785b      	ldrb	r3, [r3, #1]
 8015bac:	b299      	uxth	r1, r3
 8015bae:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8015bb2:	330a      	adds	r3, #10
 8015bb4:	481e      	ldr	r0, [pc, #120]	; (8015c30 <Build_Ext+0x1c0>)
 8015bb6:	5cc3      	ldrb	r3, [r0, r3]
 8015bb8:	b29b      	uxth	r3, r3
 8015bba:	1acb      	subs	r3, r1, r3
 8015bbc:	b29b      	uxth	r3, r3
 8015bbe:	4413      	add	r3, r2
 8015bc0:	b29a      	uxth	r2, r3
 8015bc2:	4b1a      	ldr	r3, [pc, #104]	; (8015c2c <Build_Ext+0x1bc>)
 8015bc4:	f9b3 30dc 	ldrsh.w	r3, [r3, #220]	; 0xdc
 8015bc8:	b29b      	uxth	r3, r3
 8015bca:	4413      	add	r3, r2
 8015bcc:	b29b      	uxth	r3, r3
 8015bce:	81fb      	strh	r3, [r7, #14]
 8015bd0:	e010      	b.n	8015bf4 <Build_Ext+0x184>
  case 5: // -Inp
    Vo = Yp+List[EXT_POSI].Val - WaveBuf[x]; break;
 8015bd2:	793b      	ldrb	r3, [r7, #4]
 8015bd4:	b29a      	uxth	r2, r3
 8015bd6:	4b15      	ldr	r3, [pc, #84]	; (8015c2c <Build_Ext+0x1bc>)
 8015bd8:	f9b3 30dc 	ldrsh.w	r3, [r3, #220]	; 0xdc
 8015bdc:	b29b      	uxth	r3, r3
 8015bde:	4413      	add	r3, r2
 8015be0:	b29a      	uxth	r2, r3
 8015be2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8015be6:	4915      	ldr	r1, [pc, #84]	; (8015c3c <Build_Ext+0x1cc>)
 8015be8:	5ccb      	ldrb	r3, [r1, r3]
 8015bea:	b29b      	uxth	r3, r3
 8015bec:	1ad3      	subs	r3, r2, r3
 8015bee:	b29b      	uxth	r3, r3
 8015bf0:	81fb      	strh	r3, [r7, #14]
 8015bf2:	bf00      	nop
  }
  if(Vo > 199) Vo = 202;
 8015bf4:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8015bf8:	2bc7      	cmp	r3, #199	; 0xc7
 8015bfa:	dd01      	ble.n	8015c00 <Build_Ext+0x190>
 8015bfc:	23ca      	movs	r3, #202	; 0xca
 8015bfe:	81fb      	strh	r3, [r7, #14]
  if(Vo <   3) Vo = 1;                     // �����޷�
 8015c00:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8015c04:	2b02      	cmp	r3, #2
 8015c06:	dc01      	bgt.n	8015c0c <Build_Ext+0x19c>
 8015c08:	2301      	movs	r3, #1
 8015c0a:	81fb      	strh	r3, [r7, #14]
  Buf[x]= Vo;
 8015c0c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8015c10:	68ba      	ldr	r2, [r7, #8]
 8015c12:	4413      	add	r3, r2
 8015c14:	89fa      	ldrh	r2, [r7, #14]
 8015c16:	b2d2      	uxtb	r2, r2
 8015c18:	701a      	strb	r2, [r3, #0]
}
 8015c1a:	bf00      	nop
 8015c1c:	3714      	adds	r7, #20
 8015c1e:	46bd      	mov	sp, r7
 8015c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015c24:	4770      	bx	lr
 8015c26:	bf00      	nop
 8015c28:	20000d3c 	.word	0x20000d3c
 8015c2c:	2000029c 	.word	0x2000029c
 8015c30:	2000000c 	.word	0x2000000c
 8015c34:	20002854 	.word	0x20002854
 8015c38:	2000687c 	.word	0x2000687c
 8015c3c:	20000c10 	.word	0x20000c10

08015c40 <Auto_Fit>:

void Auto_Fit(void)
{
 8015c40:	b590      	push	{r4, r7, lr}
 8015c42:	b083      	sub	sp, #12
 8015c44:	af00      	add	r7, sp, #0
  char i,j,k=0;
 8015c46:	2300      	movs	r3, #0
 8015c48:	717b      	strb	r3, [r7, #5]
  short Tmp,Tmp1;

  if(Status != STOP){
 8015c4a:	4b38      	ldr	r3, [pc, #224]	; (8015d2c <Auto_Fit+0xec>)
 8015c4c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8015c50:	2b01      	cmp	r3, #1
 8015c52:	f000 83de 	beq.w	8016412 <Auto_Fit+0x7d2>
    //======��ѹ���Զ�ѡ��==============
    for(i=0;i<9;i++){
 8015c56:	2300      	movs	r3, #0
 8015c58:	71fb      	strb	r3, [r7, #7]
 8015c5a:	e098      	b.n	8015d8e <Auto_Fit+0x14e>
      //******Aͨ��***********
      Tmp1 = ((((Vmax-2048)*((KgA[KindA+(StateA?1:0)]*4)/GK[GainA]))>>12)+100-List[V0_POSI].Val)
 8015c5c:	4b34      	ldr	r3, [pc, #208]	; (8015d30 <Auto_Fit+0xf0>)
 8015c5e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8015c62:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 8015c66:	4a33      	ldr	r2, [pc, #204]	; (8015d34 <Auto_Fit+0xf4>)
 8015c68:	6811      	ldr	r1, [r2, #0]
 8015c6a:	4a33      	ldr	r2, [pc, #204]	; (8015d38 <Auto_Fit+0xf8>)
 8015c6c:	f9b2 2000 	ldrsh.w	r2, [r2]
 8015c70:	4610      	mov	r0, r2
 8015c72:	4a32      	ldr	r2, [pc, #200]	; (8015d3c <Auto_Fit+0xfc>)
 8015c74:	f9b2 2000 	ldrsh.w	r2, [r2]
 8015c78:	2a00      	cmp	r2, #0
 8015c7a:	bf14      	ite	ne
 8015c7c:	2201      	movne	r2, #1
 8015c7e:	2200      	moveq	r2, #0
 8015c80:	b2d2      	uxtb	r2, r2
 8015c82:	4402      	add	r2, r0
 8015c84:	0052      	lsls	r2, r2, #1
 8015c86:	440a      	add	r2, r1
 8015c88:	f9b2 2000 	ldrsh.w	r2, [r2]
 8015c8c:	0092      	lsls	r2, r2, #2
 8015c8e:	492c      	ldr	r1, [pc, #176]	; (8015d40 <Auto_Fit+0x100>)
 8015c90:	f9b1 1000 	ldrsh.w	r1, [r1]
 8015c94:	4608      	mov	r0, r1
 8015c96:	492b      	ldr	r1, [pc, #172]	; (8015d44 <Auto_Fit+0x104>)
 8015c98:	5c09      	ldrb	r1, [r1, r0]
 8015c9a:	fb92 f2f1 	sdiv	r2, r2, r1
 8015c9e:	fb02 f303 	mul.w	r3, r2, r3
 8015ca2:	131b      	asrs	r3, r3, #12
           - ((((Vmin-2048)*((KgA[KindA+(StateA?1:0)]*4)/GK[GainA]))>>12)+100-List[V0_POSI].Val);
 8015ca4:	b29a      	uxth	r2, r3
 8015ca6:	4b28      	ldr	r3, [pc, #160]	; (8015d48 <Auto_Fit+0x108>)
 8015ca8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8015cac:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 8015cb0:	4920      	ldr	r1, [pc, #128]	; (8015d34 <Auto_Fit+0xf4>)
 8015cb2:	6808      	ldr	r0, [r1, #0]
 8015cb4:	4920      	ldr	r1, [pc, #128]	; (8015d38 <Auto_Fit+0xf8>)
 8015cb6:	f9b1 1000 	ldrsh.w	r1, [r1]
 8015cba:	460c      	mov	r4, r1
 8015cbc:	491f      	ldr	r1, [pc, #124]	; (8015d3c <Auto_Fit+0xfc>)
 8015cbe:	f9b1 1000 	ldrsh.w	r1, [r1]
 8015cc2:	2900      	cmp	r1, #0
 8015cc4:	bf14      	ite	ne
 8015cc6:	2101      	movne	r1, #1
 8015cc8:	2100      	moveq	r1, #0
 8015cca:	b2c9      	uxtb	r1, r1
 8015ccc:	4421      	add	r1, r4
 8015cce:	0049      	lsls	r1, r1, #1
 8015cd0:	4401      	add	r1, r0
 8015cd2:	f9b1 1000 	ldrsh.w	r1, [r1]
 8015cd6:	0089      	lsls	r1, r1, #2
 8015cd8:	4819      	ldr	r0, [pc, #100]	; (8015d40 <Auto_Fit+0x100>)
 8015cda:	f9b0 0000 	ldrsh.w	r0, [r0]
 8015cde:	4604      	mov	r4, r0
 8015ce0:	4818      	ldr	r0, [pc, #96]	; (8015d44 <Auto_Fit+0x104>)
 8015ce2:	5d00      	ldrb	r0, [r0, r4]
 8015ce4:	fb91 f1f0 	sdiv	r1, r1, r0
 8015ce8:	fb01 f303 	mul.w	r3, r1, r3
 8015cec:	131b      	asrs	r3, r3, #12
 8015cee:	b29b      	uxth	r3, r3
 8015cf0:	1ad3      	subs	r3, r2, r3
 8015cf2:	b29b      	uxth	r3, r3
      Tmp1 = ((((Vmax-2048)*((KgA[KindA+(StateA?1:0)]*4)/GK[GainA]))>>12)+100-List[V0_POSI].Val)
 8015cf4:	803b      	strh	r3, [r7, #0]
      if((Tmp1 < 40)&&(List[Y_RANGES].Val > 2)){       //40
 8015cf6:	f9b7 3000 	ldrsh.w	r3, [r7]
 8015cfa:	2b27      	cmp	r3, #39	; 0x27
 8015cfc:	dc28      	bgt.n	8015d50 <Auto_Fit+0x110>
 8015cfe:	4b13      	ldr	r3, [pc, #76]	; (8015d4c <Auto_Fit+0x10c>)
 8015d00:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8015d04:	2b02      	cmp	r3, #2
 8015d06:	dd23      	ble.n	8015d50 <Auto_Fit+0x110>
        List[Y_RANGES].Val--;
 8015d08:	4b10      	ldr	r3, [pc, #64]	; (8015d4c <Auto_Fit+0x10c>)
 8015d0a:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8015d0e:	b29b      	uxth	r3, r3
 8015d10:	3b01      	subs	r3, #1
 8015d12:	b29b      	uxth	r3, r3
 8015d14:	b21a      	sxth	r2, r3
 8015d16:	4b0d      	ldr	r3, [pc, #52]	; (8015d4c <Auto_Fit+0x10c>)
 8015d18:	809a      	strh	r2, [r3, #4]
        List[V0_POSI].Val=100;
 8015d1a:	4b0c      	ldr	r3, [pc, #48]	; (8015d4c <Auto_Fit+0x10c>)
 8015d1c:	2264      	movs	r2, #100	; 0x64
 8015d1e:	839a      	strh	r2, [r3, #28]
        WaveProcess();
 8015d20:	f7ff faac 	bl	801527c <WaveProcess>
        Update_Proc_All();
 8015d24:	f7fe ff32 	bl	8014b8c <Update_Proc_All>
 8015d28:	e02b      	b.n	8015d82 <Auto_Fit+0x142>
 8015d2a:	bf00      	nop
 8015d2c:	200007a8 	.word	0x200007a8
 8015d30:	2000285e 	.word	0x2000285e
 8015d34:	20000580 	.word	0x20000580
 8015d38:	2000688e 	.word	0x2000688e
 8015d3c:	2000286a 	.word	0x2000286a
 8015d40:	20002852 	.word	0x20002852
 8015d44:	20000564 	.word	0x20000564
 8015d48:	20002870 	.word	0x20002870
 8015d4c:	2000029c 	.word	0x2000029c
      }
      else if((Tmp1 > 110)&&(List[Y_RANGES].Val < 9)){ //110
 8015d50:	f9b7 3000 	ldrsh.w	r3, [r7]
 8015d54:	2b6e      	cmp	r3, #110	; 0x6e
 8015d56:	dd14      	ble.n	8015d82 <Auto_Fit+0x142>
 8015d58:	4bbe      	ldr	r3, [pc, #760]	; (8016054 <Auto_Fit+0x414>)
 8015d5a:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8015d5e:	2b08      	cmp	r3, #8
 8015d60:	dc0f      	bgt.n	8015d82 <Auto_Fit+0x142>
        List[Y_RANGES].Val++;
 8015d62:	4bbc      	ldr	r3, [pc, #752]	; (8016054 <Auto_Fit+0x414>)
 8015d64:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8015d68:	b29b      	uxth	r3, r3
 8015d6a:	3301      	adds	r3, #1
 8015d6c:	b29b      	uxth	r3, r3
 8015d6e:	b21a      	sxth	r2, r3
 8015d70:	4bb8      	ldr	r3, [pc, #736]	; (8016054 <Auto_Fit+0x414>)
 8015d72:	809a      	strh	r2, [r3, #4]
        List[V0_POSI].Val=100;
 8015d74:	4bb7      	ldr	r3, [pc, #732]	; (8016054 <Auto_Fit+0x414>)
 8015d76:	2264      	movs	r2, #100	; 0x64
 8015d78:	839a      	strh	r2, [r3, #28]
        WaveProcess();
 8015d7a:	f7ff fa7f 	bl	801527c <WaveProcess>
        Update_Proc_All();
 8015d7e:	f7fe ff05 	bl	8014b8c <Update_Proc_All>
      }
      HAL_Delay(50);
 8015d82:	2032      	movs	r0, #50	; 0x32
 8015d84:	f002 fc5a 	bl	801863c <HAL_Delay>
    for(i=0;i<9;i++){
 8015d88:	79fb      	ldrb	r3, [r7, #7]
 8015d8a:	3301      	adds	r3, #1
 8015d8c:	71fb      	strb	r3, [r7, #7]
 8015d8e:	79fb      	ldrb	r3, [r7, #7]
 8015d90:	2b08      	cmp	r3, #8
 8015d92:	f67f af63 	bls.w	8015c5c <Auto_Fit+0x1c>
    //============ʶ�𴥷�Դ======================


    //======�������Զ�ѡ��==============
    //if(!List[TRI_Ch]){//******Aͨ��***********
      Tmp = (((((Vmax-2048)*((KgA[KindA+(StateA?1:0)]*4)/GK[GainA]))>>12)+100-List[V0_POSI].Val)
 8015d96:	4bb0      	ldr	r3, [pc, #704]	; (8016058 <Auto_Fit+0x418>)
 8015d98:	f9b3 3000 	ldrsh.w	r3, [r3]
 8015d9c:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 8015da0:	4aae      	ldr	r2, [pc, #696]	; (801605c <Auto_Fit+0x41c>)
 8015da2:	6811      	ldr	r1, [r2, #0]
 8015da4:	4aae      	ldr	r2, [pc, #696]	; (8016060 <Auto_Fit+0x420>)
 8015da6:	f9b2 2000 	ldrsh.w	r2, [r2]
 8015daa:	4610      	mov	r0, r2
 8015dac:	4aad      	ldr	r2, [pc, #692]	; (8016064 <Auto_Fit+0x424>)
 8015dae:	f9b2 2000 	ldrsh.w	r2, [r2]
 8015db2:	2a00      	cmp	r2, #0
 8015db4:	bf14      	ite	ne
 8015db6:	2201      	movne	r2, #1
 8015db8:	2200      	moveq	r2, #0
 8015dba:	b2d2      	uxtb	r2, r2
 8015dbc:	4402      	add	r2, r0
 8015dbe:	0052      	lsls	r2, r2, #1
 8015dc0:	440a      	add	r2, r1
 8015dc2:	f9b2 2000 	ldrsh.w	r2, [r2]
 8015dc6:	0092      	lsls	r2, r2, #2
 8015dc8:	49a7      	ldr	r1, [pc, #668]	; (8016068 <Auto_Fit+0x428>)
 8015dca:	f9b1 1000 	ldrsh.w	r1, [r1]
 8015dce:	4608      	mov	r0, r1
 8015dd0:	49a6      	ldr	r1, [pc, #664]	; (801606c <Auto_Fit+0x42c>)
 8015dd2:	5c09      	ldrb	r1, [r1, r0]
 8015dd4:	fb92 f2f1 	sdiv	r2, r2, r1
 8015dd8:	fb02 f303 	mul.w	r3, r2, r3
 8015ddc:	131a      	asrs	r2, r3, #12
           - ((((Vmin-2048)*((KgA[KindA+(StateA?1:0)]*4)/GK[GainA]))>>12)+100-List[V0_POSI].Val))/4;
 8015dde:	4ba4      	ldr	r3, [pc, #656]	; (8016070 <Auto_Fit+0x430>)
 8015de0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8015de4:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 8015de8:	499c      	ldr	r1, [pc, #624]	; (801605c <Auto_Fit+0x41c>)
 8015dea:	6808      	ldr	r0, [r1, #0]
 8015dec:	499c      	ldr	r1, [pc, #624]	; (8016060 <Auto_Fit+0x420>)
 8015dee:	f9b1 1000 	ldrsh.w	r1, [r1]
 8015df2:	460c      	mov	r4, r1
 8015df4:	499b      	ldr	r1, [pc, #620]	; (8016064 <Auto_Fit+0x424>)
 8015df6:	f9b1 1000 	ldrsh.w	r1, [r1]
 8015dfa:	2900      	cmp	r1, #0
 8015dfc:	bf14      	ite	ne
 8015dfe:	2101      	movne	r1, #1
 8015e00:	2100      	moveq	r1, #0
 8015e02:	b2c9      	uxtb	r1, r1
 8015e04:	4421      	add	r1, r4
 8015e06:	0049      	lsls	r1, r1, #1
 8015e08:	4401      	add	r1, r0
 8015e0a:	f9b1 1000 	ldrsh.w	r1, [r1]
 8015e0e:	0089      	lsls	r1, r1, #2
 8015e10:	4895      	ldr	r0, [pc, #596]	; (8016068 <Auto_Fit+0x428>)
 8015e12:	f9b0 0000 	ldrsh.w	r0, [r0]
 8015e16:	4604      	mov	r4, r0
 8015e18:	4894      	ldr	r0, [pc, #592]	; (801606c <Auto_Fit+0x42c>)
 8015e1a:	5d00      	ldrb	r0, [r0, r4]
 8015e1c:	fb91 f1f0 	sdiv	r1, r1, r0
 8015e20:	fb01 f303 	mul.w	r3, r1, r3
 8015e24:	131b      	asrs	r3, r3, #12
 8015e26:	1ad3      	subs	r3, r2, r3
 8015e28:	2b00      	cmp	r3, #0
 8015e2a:	da00      	bge.n	8015e2e <Auto_Fit+0x1ee>
 8015e2c:	3303      	adds	r3, #3
 8015e2e:	109b      	asrs	r3, r3, #2
      Tmp = (((((Vmax-2048)*((KgA[KindA+(StateA?1:0)]*4)/GK[GainA]))>>12)+100-List[V0_POSI].Val)
 8015e30:	807b      	strh	r3, [r7, #2]
      if((List[THRESHOLD].Val > (((((Vmid-2048)*((KgA[KindA+(StateA?1:0)]*4)/GK[GainA]))>>12)+100-List[V0_POSI].Val)  + Tmp))||
 8015e32:	4b88      	ldr	r3, [pc, #544]	; (8016054 <Auto_Fit+0x414>)
 8015e34:	f9b3 3084 	ldrsh.w	r3, [r3, #132]	; 0x84
 8015e38:	4618      	mov	r0, r3
 8015e3a:	4b8e      	ldr	r3, [pc, #568]	; (8016074 <Auto_Fit+0x434>)
 8015e3c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8015e40:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 8015e44:	4a85      	ldr	r2, [pc, #532]	; (801605c <Auto_Fit+0x41c>)
 8015e46:	6811      	ldr	r1, [r2, #0]
 8015e48:	4a85      	ldr	r2, [pc, #532]	; (8016060 <Auto_Fit+0x420>)
 8015e4a:	f9b2 2000 	ldrsh.w	r2, [r2]
 8015e4e:	4614      	mov	r4, r2
 8015e50:	4a84      	ldr	r2, [pc, #528]	; (8016064 <Auto_Fit+0x424>)
 8015e52:	f9b2 2000 	ldrsh.w	r2, [r2]
 8015e56:	2a00      	cmp	r2, #0
 8015e58:	bf14      	ite	ne
 8015e5a:	2201      	movne	r2, #1
 8015e5c:	2200      	moveq	r2, #0
 8015e5e:	b2d2      	uxtb	r2, r2
 8015e60:	4422      	add	r2, r4
 8015e62:	0052      	lsls	r2, r2, #1
 8015e64:	440a      	add	r2, r1
 8015e66:	f9b2 2000 	ldrsh.w	r2, [r2]
 8015e6a:	0092      	lsls	r2, r2, #2
 8015e6c:	497e      	ldr	r1, [pc, #504]	; (8016068 <Auto_Fit+0x428>)
 8015e6e:	f9b1 1000 	ldrsh.w	r1, [r1]
 8015e72:	460c      	mov	r4, r1
 8015e74:	497d      	ldr	r1, [pc, #500]	; (801606c <Auto_Fit+0x42c>)
 8015e76:	5d09      	ldrb	r1, [r1, r4]
 8015e78:	fb92 f2f1 	sdiv	r2, r2, r1
 8015e7c:	fb02 f303 	mul.w	r3, r2, r3
 8015e80:	131b      	asrs	r3, r3, #12
 8015e82:	3364      	adds	r3, #100	; 0x64
 8015e84:	4a73      	ldr	r2, [pc, #460]	; (8016054 <Auto_Fit+0x414>)
 8015e86:	f9b2 201c 	ldrsh.w	r2, [r2, #28]
 8015e8a:	1a9a      	subs	r2, r3, r2
 8015e8c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8015e90:	4413      	add	r3, r2
 8015e92:	4298      	cmp	r0, r3
 8015e94:	dc32      	bgt.n	8015efc <Auto_Fit+0x2bc>
         (List[THRESHOLD].Val < (((((Vmid-2048)*((KgA[KindA+(StateA?1:0)]*4)/GK[GainA]))>>12)+100-List[V0_POSI].Val)  - Tmp))){
 8015e96:	4b6f      	ldr	r3, [pc, #444]	; (8016054 <Auto_Fit+0x414>)
 8015e98:	f9b3 3084 	ldrsh.w	r3, [r3, #132]	; 0x84
 8015e9c:	4618      	mov	r0, r3
 8015e9e:	4b75      	ldr	r3, [pc, #468]	; (8016074 <Auto_Fit+0x434>)
 8015ea0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8015ea4:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 8015ea8:	4a6c      	ldr	r2, [pc, #432]	; (801605c <Auto_Fit+0x41c>)
 8015eaa:	6811      	ldr	r1, [r2, #0]
 8015eac:	4a6c      	ldr	r2, [pc, #432]	; (8016060 <Auto_Fit+0x420>)
 8015eae:	f9b2 2000 	ldrsh.w	r2, [r2]
 8015eb2:	4614      	mov	r4, r2
 8015eb4:	4a6b      	ldr	r2, [pc, #428]	; (8016064 <Auto_Fit+0x424>)
 8015eb6:	f9b2 2000 	ldrsh.w	r2, [r2]
 8015eba:	2a00      	cmp	r2, #0
 8015ebc:	bf14      	ite	ne
 8015ebe:	2201      	movne	r2, #1
 8015ec0:	2200      	moveq	r2, #0
 8015ec2:	b2d2      	uxtb	r2, r2
 8015ec4:	4422      	add	r2, r4
 8015ec6:	0052      	lsls	r2, r2, #1
 8015ec8:	440a      	add	r2, r1
 8015eca:	f9b2 2000 	ldrsh.w	r2, [r2]
 8015ece:	0092      	lsls	r2, r2, #2
 8015ed0:	4965      	ldr	r1, [pc, #404]	; (8016068 <Auto_Fit+0x428>)
 8015ed2:	f9b1 1000 	ldrsh.w	r1, [r1]
 8015ed6:	460c      	mov	r4, r1
 8015ed8:	4964      	ldr	r1, [pc, #400]	; (801606c <Auto_Fit+0x42c>)
 8015eda:	5d09      	ldrb	r1, [r1, r4]
 8015edc:	fb92 f2f1 	sdiv	r2, r2, r1
 8015ee0:	fb02 f303 	mul.w	r3, r2, r3
 8015ee4:	131b      	asrs	r3, r3, #12
 8015ee6:	3364      	adds	r3, #100	; 0x64
 8015ee8:	4a5a      	ldr	r2, [pc, #360]	; (8016054 <Auto_Fit+0x414>)
 8015eea:	f9b2 201c 	ldrsh.w	r2, [r2, #28]
 8015eee:	1a9a      	subs	r2, r3, r2
 8015ef0:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8015ef4:	1ad3      	subs	r3, r2, r3
      if((List[THRESHOLD].Val > (((((Vmid-2048)*((KgA[KindA+(StateA?1:0)]*4)/GK[GainA]))>>12)+100-List[V0_POSI].Val)  + Tmp))||
 8015ef6:	4298      	cmp	r0, r3
 8015ef8:	f280 808e 	bge.w	8016018 <Auto_Fit+0x3d8>
           if(abs(((((Vmid-2048)*((KgA[KindA+(StateA?1:0)]*4)/GK[GainA]))>>12)+100-List[V0_POSI].Val)+15)<195)
 8015efc:	4b5d      	ldr	r3, [pc, #372]	; (8016074 <Auto_Fit+0x434>)
 8015efe:	f9b3 3000 	ldrsh.w	r3, [r3]
 8015f02:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 8015f06:	4a55      	ldr	r2, [pc, #340]	; (801605c <Auto_Fit+0x41c>)
 8015f08:	6811      	ldr	r1, [r2, #0]
 8015f0a:	4a55      	ldr	r2, [pc, #340]	; (8016060 <Auto_Fit+0x420>)
 8015f0c:	f9b2 2000 	ldrsh.w	r2, [r2]
 8015f10:	4610      	mov	r0, r2
 8015f12:	4a54      	ldr	r2, [pc, #336]	; (8016064 <Auto_Fit+0x424>)
 8015f14:	f9b2 2000 	ldrsh.w	r2, [r2]
 8015f18:	2a00      	cmp	r2, #0
 8015f1a:	bf14      	ite	ne
 8015f1c:	2201      	movne	r2, #1
 8015f1e:	2200      	moveq	r2, #0
 8015f20:	b2d2      	uxtb	r2, r2
 8015f22:	4402      	add	r2, r0
 8015f24:	0052      	lsls	r2, r2, #1
 8015f26:	440a      	add	r2, r1
 8015f28:	f9b2 2000 	ldrsh.w	r2, [r2]
 8015f2c:	0092      	lsls	r2, r2, #2
 8015f2e:	494e      	ldr	r1, [pc, #312]	; (8016068 <Auto_Fit+0x428>)
 8015f30:	f9b1 1000 	ldrsh.w	r1, [r1]
 8015f34:	4608      	mov	r0, r1
 8015f36:	494d      	ldr	r1, [pc, #308]	; (801606c <Auto_Fit+0x42c>)
 8015f38:	5c09      	ldrb	r1, [r1, r0]
 8015f3a:	fb92 f2f1 	sdiv	r2, r2, r1
 8015f3e:	fb02 f303 	mul.w	r3, r2, r3
 8015f42:	131b      	asrs	r3, r3, #12
 8015f44:	3364      	adds	r3, #100	; 0x64
 8015f46:	4a43      	ldr	r2, [pc, #268]	; (8016054 <Auto_Fit+0x414>)
 8015f48:	f9b2 201c 	ldrsh.w	r2, [r2, #28]
 8015f4c:	1a9b      	subs	r3, r3, r2
 8015f4e:	330f      	adds	r3, #15
 8015f50:	f113 0fc2 	cmn.w	r3, #194	; 0xc2
 8015f54:	db5c      	blt.n	8016010 <Auto_Fit+0x3d0>
 8015f56:	4b47      	ldr	r3, [pc, #284]	; (8016074 <Auto_Fit+0x434>)
 8015f58:	f9b3 3000 	ldrsh.w	r3, [r3]
 8015f5c:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 8015f60:	4a3e      	ldr	r2, [pc, #248]	; (801605c <Auto_Fit+0x41c>)
 8015f62:	6811      	ldr	r1, [r2, #0]
 8015f64:	4a3e      	ldr	r2, [pc, #248]	; (8016060 <Auto_Fit+0x420>)
 8015f66:	f9b2 2000 	ldrsh.w	r2, [r2]
 8015f6a:	4610      	mov	r0, r2
 8015f6c:	4a3d      	ldr	r2, [pc, #244]	; (8016064 <Auto_Fit+0x424>)
 8015f6e:	f9b2 2000 	ldrsh.w	r2, [r2]
 8015f72:	2a00      	cmp	r2, #0
 8015f74:	bf14      	ite	ne
 8015f76:	2201      	movne	r2, #1
 8015f78:	2200      	moveq	r2, #0
 8015f7a:	b2d2      	uxtb	r2, r2
 8015f7c:	4402      	add	r2, r0
 8015f7e:	0052      	lsls	r2, r2, #1
 8015f80:	440a      	add	r2, r1
 8015f82:	f9b2 2000 	ldrsh.w	r2, [r2]
 8015f86:	0092      	lsls	r2, r2, #2
 8015f88:	4937      	ldr	r1, [pc, #220]	; (8016068 <Auto_Fit+0x428>)
 8015f8a:	f9b1 1000 	ldrsh.w	r1, [r1]
 8015f8e:	4608      	mov	r0, r1
 8015f90:	4936      	ldr	r1, [pc, #216]	; (801606c <Auto_Fit+0x42c>)
 8015f92:	5c09      	ldrb	r1, [r1, r0]
 8015f94:	fb92 f2f1 	sdiv	r2, r2, r1
 8015f98:	fb02 f303 	mul.w	r3, r2, r3
 8015f9c:	131b      	asrs	r3, r3, #12
 8015f9e:	3364      	adds	r3, #100	; 0x64
 8015fa0:	4a2c      	ldr	r2, [pc, #176]	; (8016054 <Auto_Fit+0x414>)
 8015fa2:	f9b2 201c 	ldrsh.w	r2, [r2, #28]
 8015fa6:	1a9b      	subs	r3, r3, r2
 8015fa8:	330f      	adds	r3, #15
 8015faa:	2bc2      	cmp	r3, #194	; 0xc2
 8015fac:	dc30      	bgt.n	8016010 <Auto_Fit+0x3d0>
             List[THRESHOLD].Val = ((((Vmid-2048)*((KgA[KindA+(StateA?1:0)]*4)/GK[GainA]))>>12)+100-List[V0_POSI].Val)+15 ;
 8015fae:	4b31      	ldr	r3, [pc, #196]	; (8016074 <Auto_Fit+0x434>)
 8015fb0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8015fb4:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 8015fb8:	4a28      	ldr	r2, [pc, #160]	; (801605c <Auto_Fit+0x41c>)
 8015fba:	6811      	ldr	r1, [r2, #0]
 8015fbc:	4a28      	ldr	r2, [pc, #160]	; (8016060 <Auto_Fit+0x420>)
 8015fbe:	f9b2 2000 	ldrsh.w	r2, [r2]
 8015fc2:	4610      	mov	r0, r2
 8015fc4:	4a27      	ldr	r2, [pc, #156]	; (8016064 <Auto_Fit+0x424>)
 8015fc6:	f9b2 2000 	ldrsh.w	r2, [r2]
 8015fca:	2a00      	cmp	r2, #0
 8015fcc:	bf14      	ite	ne
 8015fce:	2201      	movne	r2, #1
 8015fd0:	2200      	moveq	r2, #0
 8015fd2:	b2d2      	uxtb	r2, r2
 8015fd4:	4402      	add	r2, r0
 8015fd6:	0052      	lsls	r2, r2, #1
 8015fd8:	440a      	add	r2, r1
 8015fda:	f9b2 2000 	ldrsh.w	r2, [r2]
 8015fde:	0092      	lsls	r2, r2, #2
 8015fe0:	4921      	ldr	r1, [pc, #132]	; (8016068 <Auto_Fit+0x428>)
 8015fe2:	f9b1 1000 	ldrsh.w	r1, [r1]
 8015fe6:	4608      	mov	r0, r1
 8015fe8:	4920      	ldr	r1, [pc, #128]	; (801606c <Auto_Fit+0x42c>)
 8015fea:	5c09      	ldrb	r1, [r1, r0]
 8015fec:	fb92 f2f1 	sdiv	r2, r2, r1
 8015ff0:	fb02 f303 	mul.w	r3, r2, r3
 8015ff4:	131b      	asrs	r3, r3, #12
 8015ff6:	b29a      	uxth	r2, r3
 8015ff8:	4b16      	ldr	r3, [pc, #88]	; (8016054 <Auto_Fit+0x414>)
 8015ffa:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 8015ffe:	b29b      	uxth	r3, r3
 8016000:	1ad3      	subs	r3, r2, r3
 8016002:	b29b      	uxth	r3, r3
 8016004:	3373      	adds	r3, #115	; 0x73
 8016006:	b29b      	uxth	r3, r3
 8016008:	b21a      	sxth	r2, r3
 801600a:	4b12      	ldr	r3, [pc, #72]	; (8016054 <Auto_Fit+0x414>)
 801600c:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84
           WaveProcess();
 8016010:	f7ff f934 	bl	801527c <WaveProcess>
           Update_Proc_All();
 8016014:	f7fe fdba 	bl	8014b8c <Update_Proc_All>
         }

      ParamTab[VTx2]= ParamTab[P1x2] + 2*List[THRESHOLD].Val;
 8016018:	4b17      	ldr	r3, [pc, #92]	; (8016078 <Auto_Fit+0x438>)
 801601a:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 801601e:	b29a      	uxth	r2, r3
 8016020:	4b0c      	ldr	r3, [pc, #48]	; (8016054 <Auto_Fit+0x414>)
 8016022:	f9b3 3084 	ldrsh.w	r3, [r3, #132]	; 0x84
 8016026:	b29b      	uxth	r3, r3
 8016028:	005b      	lsls	r3, r3, #1
 801602a:	b29b      	uxth	r3, r3
 801602c:	4413      	add	r3, r2
 801602e:	b29b      	uxth	r3, r3
 8016030:	b21a      	sxth	r2, r3
 8016032:	4b11      	ldr	r3, [pc, #68]	; (8016078 <Auto_Fit+0x438>)
 8016034:	839a      	strh	r2, [r3, #28]
      List[THRESHOLD].Flg |= UPD;
 8016036:	4b07      	ldr	r3, [pc, #28]	; (8016054 <Auto_Fit+0x414>)
 8016038:	f893 3086 	ldrb.w	r3, [r3, #134]	; 0x86
 801603c:	f043 0320 	orr.w	r3, r3, #32
 8016040:	b2da      	uxtb	r2, r3
 8016042:	4b04      	ldr	r3, [pc, #16]	; (8016054 <Auto_Fit+0x414>)
 8016044:	f883 2086 	strb.w	r2, [r3, #134]	; 0x86
      Update_Title();
 8016048:	f7fc fa9c 	bl	8012584 <Update_Title>

    //===========��ƽʱ��������==================
    HAL_Delay(100);
 801604c:	2064      	movs	r0, #100	; 0x64
 801604e:	f002 faf5 	bl	801863c <HAL_Delay>
 8016052:	e013      	b.n	801607c <Auto_Fit+0x43c>
 8016054:	2000029c 	.word	0x2000029c
 8016058:	2000285e 	.word	0x2000285e
 801605c:	20000580 	.word	0x20000580
 8016060:	2000688e 	.word	0x2000688e
 8016064:	2000286a 	.word	0x2000286a
 8016068:	20002852 	.word	0x20002852
 801606c:	20000564 	.word	0x20000564
 8016070:	20002870 	.word	0x20002870
 8016074:	20002872 	.word	0x20002872
 8016078:	20000144 	.word	0x20000144

        if(((((Vmid-2048)*((KgA[KindA+(StateA?1:0)]*4)/GK[GainA]))>>12)+100-List[V0_POSI].Val)>10){
 801607c:	4ba3      	ldr	r3, [pc, #652]	; (801630c <Auto_Fit+0x6cc>)
 801607e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016082:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 8016086:	4aa2      	ldr	r2, [pc, #648]	; (8016310 <Auto_Fit+0x6d0>)
 8016088:	6811      	ldr	r1, [r2, #0]
 801608a:	4aa2      	ldr	r2, [pc, #648]	; (8016314 <Auto_Fit+0x6d4>)
 801608c:	f9b2 2000 	ldrsh.w	r2, [r2]
 8016090:	4610      	mov	r0, r2
 8016092:	4aa1      	ldr	r2, [pc, #644]	; (8016318 <Auto_Fit+0x6d8>)
 8016094:	f9b2 2000 	ldrsh.w	r2, [r2]
 8016098:	2a00      	cmp	r2, #0
 801609a:	bf14      	ite	ne
 801609c:	2201      	movne	r2, #1
 801609e:	2200      	moveq	r2, #0
 80160a0:	b2d2      	uxtb	r2, r2
 80160a2:	4402      	add	r2, r0
 80160a4:	0052      	lsls	r2, r2, #1
 80160a6:	440a      	add	r2, r1
 80160a8:	f9b2 2000 	ldrsh.w	r2, [r2]
 80160ac:	0092      	lsls	r2, r2, #2
 80160ae:	499b      	ldr	r1, [pc, #620]	; (801631c <Auto_Fit+0x6dc>)
 80160b0:	f9b1 1000 	ldrsh.w	r1, [r1]
 80160b4:	4608      	mov	r0, r1
 80160b6:	499a      	ldr	r1, [pc, #616]	; (8016320 <Auto_Fit+0x6e0>)
 80160b8:	5c09      	ldrb	r1, [r1, r0]
 80160ba:	fb92 f2f1 	sdiv	r2, r2, r1
 80160be:	fb02 f303 	mul.w	r3, r2, r3
 80160c2:	131b      	asrs	r3, r3, #12
 80160c4:	3364      	adds	r3, #100	; 0x64
 80160c6:	4a97      	ldr	r2, [pc, #604]	; (8016324 <Auto_Fit+0x6e4>)
 80160c8:	f9b2 201c 	ldrsh.w	r2, [r2, #28]
 80160cc:	1a9b      	subs	r3, r3, r2
 80160ce:	2b0a      	cmp	r3, #10
 80160d0:	dd76      	ble.n	80161c0 <Auto_Fit+0x580>
      WaveProcess();
 80160d2:	f7ff f8d3 	bl	801527c <WaveProcess>
      Update_Proc_All();
 80160d6:	f7fe fd59 	bl	8014b8c <Update_Proc_All>
      HAL_Delay(100);
 80160da:	2064      	movs	r0, #100	; 0x64
 80160dc:	f002 faae 	bl	801863c <HAL_Delay>
      for(i=0;i<9;i++){
 80160e0:	2300      	movs	r3, #0
 80160e2:	71fb      	strb	r3, [r7, #7]
 80160e4:	e068      	b.n	80161b8 <Auto_Fit+0x578>
        WaveProcess();
 80160e6:	f7ff f8c9 	bl	801527c <WaveProcess>
        Tmp1 = (((Vmax-2048)*((KgA[KindA+(StateA?1:0)]*4)/GK[GainA]))>>12)+100-List[V0_POSI].Val;
 80160ea:	4b8f      	ldr	r3, [pc, #572]	; (8016328 <Auto_Fit+0x6e8>)
 80160ec:	f9b3 3000 	ldrsh.w	r3, [r3]
 80160f0:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 80160f4:	4a86      	ldr	r2, [pc, #536]	; (8016310 <Auto_Fit+0x6d0>)
 80160f6:	6811      	ldr	r1, [r2, #0]
 80160f8:	4a86      	ldr	r2, [pc, #536]	; (8016314 <Auto_Fit+0x6d4>)
 80160fa:	f9b2 2000 	ldrsh.w	r2, [r2]
 80160fe:	4610      	mov	r0, r2
 8016100:	4a85      	ldr	r2, [pc, #532]	; (8016318 <Auto_Fit+0x6d8>)
 8016102:	f9b2 2000 	ldrsh.w	r2, [r2]
 8016106:	2a00      	cmp	r2, #0
 8016108:	bf14      	ite	ne
 801610a:	2201      	movne	r2, #1
 801610c:	2200      	moveq	r2, #0
 801610e:	b2d2      	uxtb	r2, r2
 8016110:	4402      	add	r2, r0
 8016112:	0052      	lsls	r2, r2, #1
 8016114:	440a      	add	r2, r1
 8016116:	f9b2 2000 	ldrsh.w	r2, [r2]
 801611a:	0092      	lsls	r2, r2, #2
 801611c:	497f      	ldr	r1, [pc, #508]	; (801631c <Auto_Fit+0x6dc>)
 801611e:	f9b1 1000 	ldrsh.w	r1, [r1]
 8016122:	4608      	mov	r0, r1
 8016124:	497e      	ldr	r1, [pc, #504]	; (8016320 <Auto_Fit+0x6e0>)
 8016126:	5c09      	ldrb	r1, [r1, r0]
 8016128:	fb92 f2f1 	sdiv	r2, r2, r1
 801612c:	fb02 f303 	mul.w	r3, r2, r3
 8016130:	131b      	asrs	r3, r3, #12
 8016132:	b29a      	uxth	r2, r3
 8016134:	4b7b      	ldr	r3, [pc, #492]	; (8016324 <Auto_Fit+0x6e4>)
 8016136:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 801613a:	b29b      	uxth	r3, r3
 801613c:	1ad3      	subs	r3, r2, r3
 801613e:	b29b      	uxth	r3, r3
 8016140:	3364      	adds	r3, #100	; 0x64
 8016142:	b29b      	uxth	r3, r3
 8016144:	803b      	strh	r3, [r7, #0]
        if((Tmp1 < 40)&&(List[Y_RANGES].Val > 2)){       //40
 8016146:	f9b7 3000 	ldrsh.w	r3, [r7]
 801614a:	2b27      	cmp	r3, #39	; 0x27
 801614c:	dc15      	bgt.n	801617a <Auto_Fit+0x53a>
 801614e:	4b75      	ldr	r3, [pc, #468]	; (8016324 <Auto_Fit+0x6e4>)
 8016150:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8016154:	2b02      	cmp	r3, #2
 8016156:	dd10      	ble.n	801617a <Auto_Fit+0x53a>
          List[Y_RANGES].Val--;
 8016158:	4b72      	ldr	r3, [pc, #456]	; (8016324 <Auto_Fit+0x6e4>)
 801615a:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801615e:	b29b      	uxth	r3, r3
 8016160:	3b01      	subs	r3, #1
 8016162:	b29b      	uxth	r3, r3
 8016164:	b21a      	sxth	r2, r3
 8016166:	4b6f      	ldr	r3, [pc, #444]	; (8016324 <Auto_Fit+0x6e4>)
 8016168:	809a      	strh	r2, [r3, #4]
          List[V0_POSI].Val=100;
 801616a:	4b6e      	ldr	r3, [pc, #440]	; (8016324 <Auto_Fit+0x6e4>)
 801616c:	2264      	movs	r2, #100	; 0x64
 801616e:	839a      	strh	r2, [r3, #28]
          WaveProcess();
 8016170:	f7ff f884 	bl	801527c <WaveProcess>
          Update_Proc_All();
 8016174:	f7fe fd0a 	bl	8014b8c <Update_Proc_All>
 8016178:	e018      	b.n	80161ac <Auto_Fit+0x56c>
        }
        else if((Tmp1 > 100)&&(List[Y_RANGES].Val < 9)){ //110
 801617a:	f9b7 3000 	ldrsh.w	r3, [r7]
 801617e:	2b64      	cmp	r3, #100	; 0x64
 8016180:	dd14      	ble.n	80161ac <Auto_Fit+0x56c>
 8016182:	4b68      	ldr	r3, [pc, #416]	; (8016324 <Auto_Fit+0x6e4>)
 8016184:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8016188:	2b08      	cmp	r3, #8
 801618a:	dc0f      	bgt.n	80161ac <Auto_Fit+0x56c>
          List[Y_RANGES].Val++;
 801618c:	4b65      	ldr	r3, [pc, #404]	; (8016324 <Auto_Fit+0x6e4>)
 801618e:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8016192:	b29b      	uxth	r3, r3
 8016194:	3301      	adds	r3, #1
 8016196:	b29b      	uxth	r3, r3
 8016198:	b21a      	sxth	r2, r3
 801619a:	4b62      	ldr	r3, [pc, #392]	; (8016324 <Auto_Fit+0x6e4>)
 801619c:	809a      	strh	r2, [r3, #4]
          List[V0_POSI].Val=100;
 801619e:	4b61      	ldr	r3, [pc, #388]	; (8016324 <Auto_Fit+0x6e4>)
 80161a0:	2264      	movs	r2, #100	; 0x64
 80161a2:	839a      	strh	r2, [r3, #28]
          WaveProcess();
 80161a4:	f7ff f86a 	bl	801527c <WaveProcess>
          Update_Proc_All();
 80161a8:	f7fe fcf0 	bl	8014b8c <Update_Proc_All>
        }
        HAL_Delay(50);
 80161ac:	2032      	movs	r0, #50	; 0x32
 80161ae:	f002 fa45 	bl	801863c <HAL_Delay>
      for(i=0;i<9;i++){
 80161b2:	79fb      	ldrb	r3, [r7, #7]
 80161b4:	3301      	adds	r3, #1
 80161b6:	71fb      	strb	r3, [r7, #7]
 80161b8:	79fb      	ldrb	r3, [r7, #7]
 80161ba:	2b08      	cmp	r3, #8
 80161bc:	d993      	bls.n	80160e6 <Auto_Fit+0x4a6>
 80161be:	e054      	b.n	801626a <Auto_Fit+0x62a>
      }
    }
    else if((((((Vmax-2048)*((KgA[KindA+(StateA?1:0)]*4)/GK[GainA]))>>12)+100-List[V0_POSI].Val)
 80161c0:	4b59      	ldr	r3, [pc, #356]	; (8016328 <Auto_Fit+0x6e8>)
 80161c2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80161c6:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 80161ca:	4a51      	ldr	r2, [pc, #324]	; (8016310 <Auto_Fit+0x6d0>)
 80161cc:	6811      	ldr	r1, [r2, #0]
 80161ce:	4a51      	ldr	r2, [pc, #324]	; (8016314 <Auto_Fit+0x6d4>)
 80161d0:	f9b2 2000 	ldrsh.w	r2, [r2]
 80161d4:	4610      	mov	r0, r2
 80161d6:	4a50      	ldr	r2, [pc, #320]	; (8016318 <Auto_Fit+0x6d8>)
 80161d8:	f9b2 2000 	ldrsh.w	r2, [r2]
 80161dc:	2a00      	cmp	r2, #0
 80161de:	bf14      	ite	ne
 80161e0:	2201      	movne	r2, #1
 80161e2:	2200      	moveq	r2, #0
 80161e4:	b2d2      	uxtb	r2, r2
 80161e6:	4402      	add	r2, r0
 80161e8:	0052      	lsls	r2, r2, #1
 80161ea:	440a      	add	r2, r1
 80161ec:	f9b2 2000 	ldrsh.w	r2, [r2]
 80161f0:	0092      	lsls	r2, r2, #2
 80161f2:	494a      	ldr	r1, [pc, #296]	; (801631c <Auto_Fit+0x6dc>)
 80161f4:	f9b1 1000 	ldrsh.w	r1, [r1]
 80161f8:	4608      	mov	r0, r1
 80161fa:	4949      	ldr	r1, [pc, #292]	; (8016320 <Auto_Fit+0x6e0>)
 80161fc:	5c09      	ldrb	r1, [r1, r0]
 80161fe:	fb92 f2f1 	sdiv	r2, r2, r1
 8016202:	fb02 f303 	mul.w	r3, r2, r3
 8016206:	131a      	asrs	r2, r3, #12
         - ((((Vmin-2048)*((KgA[KindA+(StateA?1:0)]*4)/GK[GainA]))>>12)+100-List[V0_POSI].Val)) <10){
 8016208:	4b48      	ldr	r3, [pc, #288]	; (801632c <Auto_Fit+0x6ec>)
 801620a:	f9b3 3000 	ldrsh.w	r3, [r3]
 801620e:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 8016212:	493f      	ldr	r1, [pc, #252]	; (8016310 <Auto_Fit+0x6d0>)
 8016214:	6808      	ldr	r0, [r1, #0]
 8016216:	493f      	ldr	r1, [pc, #252]	; (8016314 <Auto_Fit+0x6d4>)
 8016218:	f9b1 1000 	ldrsh.w	r1, [r1]
 801621c:	460c      	mov	r4, r1
 801621e:	493e      	ldr	r1, [pc, #248]	; (8016318 <Auto_Fit+0x6d8>)
 8016220:	f9b1 1000 	ldrsh.w	r1, [r1]
 8016224:	2900      	cmp	r1, #0
 8016226:	bf14      	ite	ne
 8016228:	2101      	movne	r1, #1
 801622a:	2100      	moveq	r1, #0
 801622c:	b2c9      	uxtb	r1, r1
 801622e:	4421      	add	r1, r4
 8016230:	0049      	lsls	r1, r1, #1
 8016232:	4401      	add	r1, r0
 8016234:	f9b1 1000 	ldrsh.w	r1, [r1]
 8016238:	0089      	lsls	r1, r1, #2
 801623a:	4838      	ldr	r0, [pc, #224]	; (801631c <Auto_Fit+0x6dc>)
 801623c:	f9b0 0000 	ldrsh.w	r0, [r0]
 8016240:	4604      	mov	r4, r0
 8016242:	4837      	ldr	r0, [pc, #220]	; (8016320 <Auto_Fit+0x6e0>)
 8016244:	5d00      	ldrb	r0, [r0, r4]
 8016246:	fb91 f1f0 	sdiv	r1, r1, r0
 801624a:	fb01 f303 	mul.w	r3, r1, r3
 801624e:	131b      	asrs	r3, r3, #12
 8016250:	1ad3      	subs	r3, r2, r3
    else if((((((Vmax-2048)*((KgA[KindA+(StateA?1:0)]*4)/GK[GainA]))>>12)+100-List[V0_POSI].Val)
 8016252:	2b09      	cmp	r3, #9
 8016254:	dc09      	bgt.n	801626a <Auto_Fit+0x62a>
      //===========���ź�ʱ��ѹ��2V==================
        List[Y_RANGES].Val=7; //2v
 8016256:	4b33      	ldr	r3, [pc, #204]	; (8016324 <Auto_Fit+0x6e4>)
 8016258:	2207      	movs	r2, #7
 801625a:	809a      	strh	r2, [r3, #4]
        WaveProcess();
 801625c:	f7ff f80e 	bl	801527c <WaveProcess>
        Update_Proc_All();
 8016260:	f7fe fc94 	bl	8014b8c <Update_Proc_All>
        HAL_Delay(50);
 8016264:	2032      	movs	r0, #50	; 0x32
 8016266:	f002 f9e9 	bl	801863c <HAL_Delay>


    //======ʱ���Զ�ѡ��==============

    //if(!List[TRI_Ch].Val){//******Aͨ��***********
      Tmp1 = ((((Vmax-2048)*((KgA[KindA+(StateA?1:0)]*4)/GK[GainA]))>>12)+100-List[V0_POSI].Val)
 801626a:	4b2f      	ldr	r3, [pc, #188]	; (8016328 <Auto_Fit+0x6e8>)
 801626c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016270:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 8016274:	4a26      	ldr	r2, [pc, #152]	; (8016310 <Auto_Fit+0x6d0>)
 8016276:	6811      	ldr	r1, [r2, #0]
 8016278:	4a26      	ldr	r2, [pc, #152]	; (8016314 <Auto_Fit+0x6d4>)
 801627a:	f9b2 2000 	ldrsh.w	r2, [r2]
 801627e:	4610      	mov	r0, r2
 8016280:	4a25      	ldr	r2, [pc, #148]	; (8016318 <Auto_Fit+0x6d8>)
 8016282:	f9b2 2000 	ldrsh.w	r2, [r2]
 8016286:	2a00      	cmp	r2, #0
 8016288:	bf14      	ite	ne
 801628a:	2201      	movne	r2, #1
 801628c:	2200      	moveq	r2, #0
 801628e:	b2d2      	uxtb	r2, r2
 8016290:	4402      	add	r2, r0
 8016292:	0052      	lsls	r2, r2, #1
 8016294:	440a      	add	r2, r1
 8016296:	f9b2 2000 	ldrsh.w	r2, [r2]
 801629a:	0092      	lsls	r2, r2, #2
 801629c:	491f      	ldr	r1, [pc, #124]	; (801631c <Auto_Fit+0x6dc>)
 801629e:	f9b1 1000 	ldrsh.w	r1, [r1]
 80162a2:	4608      	mov	r0, r1
 80162a4:	491e      	ldr	r1, [pc, #120]	; (8016320 <Auto_Fit+0x6e0>)
 80162a6:	5c09      	ldrb	r1, [r1, r0]
 80162a8:	fb92 f2f1 	sdiv	r2, r2, r1
 80162ac:	fb02 f303 	mul.w	r3, r2, r3
 80162b0:	131b      	asrs	r3, r3, #12
           - ((((Vmin-2048)*((KgA[KindA+(StateA?1:0)]*4)/GK[GainA]))>>12)+100-List[V0_POSI].Val);
 80162b2:	b29a      	uxth	r2, r3
 80162b4:	4b1d      	ldr	r3, [pc, #116]	; (801632c <Auto_Fit+0x6ec>)
 80162b6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80162ba:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 80162be:	4914      	ldr	r1, [pc, #80]	; (8016310 <Auto_Fit+0x6d0>)
 80162c0:	6808      	ldr	r0, [r1, #0]
 80162c2:	4914      	ldr	r1, [pc, #80]	; (8016314 <Auto_Fit+0x6d4>)
 80162c4:	f9b1 1000 	ldrsh.w	r1, [r1]
 80162c8:	460c      	mov	r4, r1
 80162ca:	4913      	ldr	r1, [pc, #76]	; (8016318 <Auto_Fit+0x6d8>)
 80162cc:	f9b1 1000 	ldrsh.w	r1, [r1]
 80162d0:	2900      	cmp	r1, #0
 80162d2:	bf14      	ite	ne
 80162d4:	2101      	movne	r1, #1
 80162d6:	2100      	moveq	r1, #0
 80162d8:	b2c9      	uxtb	r1, r1
 80162da:	4421      	add	r1, r4
 80162dc:	0049      	lsls	r1, r1, #1
 80162de:	4401      	add	r1, r0
 80162e0:	f9b1 1000 	ldrsh.w	r1, [r1]
 80162e4:	0089      	lsls	r1, r1, #2
 80162e6:	480d      	ldr	r0, [pc, #52]	; (801631c <Auto_Fit+0x6dc>)
 80162e8:	f9b0 0000 	ldrsh.w	r0, [r0]
 80162ec:	4604      	mov	r4, r0
 80162ee:	480c      	ldr	r0, [pc, #48]	; (8016320 <Auto_Fit+0x6e0>)
 80162f0:	5d00      	ldrb	r0, [r0, r4]
 80162f2:	fb91 f1f0 	sdiv	r1, r1, r0
 80162f6:	fb01 f303 	mul.w	r3, r1, r3
 80162fa:	131b      	asrs	r3, r3, #12
 80162fc:	b29b      	uxth	r3, r3
 80162fe:	1ad3      	subs	r3, r2, r3
 8016300:	b29b      	uxth	r3, r3
      Tmp1 = ((((Vmax-2048)*((KgA[KindA+(StateA?1:0)]*4)/GK[GainA]))>>12)+100-List[V0_POSI].Val)
 8016302:	803b      	strh	r3, [r7, #0]
      for(j=0;j<11;j++){
 8016304:	2300      	movs	r3, #0
 8016306:	71bb      	strb	r3, [r7, #6]
 8016308:	e06e      	b.n	80163e8 <Auto_Fit+0x7a8>
 801630a:	bf00      	nop
 801630c:	20002872 	.word	0x20002872
 8016310:	20000580 	.word	0x20000580
 8016314:	2000688e 	.word	0x2000688e
 8016318:	2000286a 	.word	0x2000286a
 801631c:	20002852 	.word	0x20002852
 8016320:	20000564 	.word	0x20000564
 8016324:	2000029c 	.word	0x2000029c
 8016328:	2000285e 	.word	0x2000285e
 801632c:	20002870 	.word	0x20002870
        WaveProcess();
 8016330:	f7fe ffa4 	bl	801527c <WaveProcess>
        if((k==0)&&(Edge < 60)&&(List[TIM_BASE].Val >5)){
 8016334:	797b      	ldrb	r3, [r7, #5]
 8016336:	2b00      	cmp	r3, #0
 8016338:	d114      	bne.n	8016364 <Auto_Fit+0x724>
 801633a:	4b38      	ldr	r3, [pc, #224]	; (801641c <Auto_Fit+0x7dc>)
 801633c:	681b      	ldr	r3, [r3, #0]
 801633e:	2b3b      	cmp	r3, #59	; 0x3b
 8016340:	dc10      	bgt.n	8016364 <Auto_Fit+0x724>
 8016342:	4b37      	ldr	r3, [pc, #220]	; (8016420 <Auto_Fit+0x7e0>)
 8016344:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8016348:	2b05      	cmp	r3, #5
 801634a:	dd0b      	ble.n	8016364 <Auto_Fit+0x724>
          Set_Base(5);                           // Ӳ������ɨ��ʱ����λ
 801634c:	2005      	movs	r0, #5
 801634e:	f7f6 f98d 	bl	800c66c <Set_Base>
          List[TIM_BASE].Val = 5;
 8016352:	4b33      	ldr	r3, [pc, #204]	; (8016420 <Auto_Fit+0x7e0>)
 8016354:	2205      	movs	r2, #5
 8016356:	879a      	strh	r2, [r3, #60]	; 0x3c
          WaveProcess();
 8016358:	f7fe ff90 	bl	801527c <WaveProcess>
          Update_Proc_All();
 801635c:	f7fe fc16 	bl	8014b8c <Update_Proc_All>
          k=1;
 8016360:	2301      	movs	r3, #1
 8016362:	717b      	strb	r3, [r7, #5]
        }
        if((Edge > 180)&&(List[TIM_BASE].Val > 2)){
 8016364:	4b2d      	ldr	r3, [pc, #180]	; (801641c <Auto_Fit+0x7dc>)
 8016366:	681b      	ldr	r3, [r3, #0]
 8016368:	2bb4      	cmp	r3, #180	; 0xb4
 801636a:	dd1b      	ble.n	80163a4 <Auto_Fit+0x764>
 801636c:	4b2c      	ldr	r3, [pc, #176]	; (8016420 <Auto_Fit+0x7e0>)
 801636e:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8016372:	2b02      	cmp	r3, #2
 8016374:	dd16      	ble.n	80163a4 <Auto_Fit+0x764>
          List[TIM_BASE].Val--;
 8016376:	4b2a      	ldr	r3, [pc, #168]	; (8016420 <Auto_Fit+0x7e0>)
 8016378:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 801637c:	b29b      	uxth	r3, r3
 801637e:	3b01      	subs	r3, #1
 8016380:	b29b      	uxth	r3, r3
 8016382:	b21a      	sxth	r2, r3
 8016384:	4b26      	ldr	r3, [pc, #152]	; (8016420 <Auto_Fit+0x7e0>)
 8016386:	879a      	strh	r2, [r3, #60]	; 0x3c
          Set_Base(List[TIM_BASE].Val);   // Ӳ������ɨ��ʱ����λ
 8016388:	4b25      	ldr	r3, [pc, #148]	; (8016420 <Auto_Fit+0x7e0>)
 801638a:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 801638e:	4618      	mov	r0, r3
 8016390:	f7f6 f96c 	bl	800c66c <Set_Base>
          WaveProcess();
 8016394:	f7fe ff72 	bl	801527c <WaveProcess>
                 Update_Proc_All();
 8016398:	f7fe fbf8 	bl	8014b8c <Update_Proc_All>
          HAL_Delay(50);
 801639c:	2032      	movs	r0, #50	; 0x32
 801639e:	f002 f94d 	bl	801863c <HAL_Delay>
 80163a2:	e01e      	b.n	80163e2 <Auto_Fit+0x7a2>
        }
        else if((Edge < 80)&&(List[TIM_BASE].Val< 11)){
 80163a4:	4b1d      	ldr	r3, [pc, #116]	; (801641c <Auto_Fit+0x7dc>)
 80163a6:	681b      	ldr	r3, [r3, #0]
 80163a8:	2b4f      	cmp	r3, #79	; 0x4f
 80163aa:	dc1a      	bgt.n	80163e2 <Auto_Fit+0x7a2>
 80163ac:	4b1c      	ldr	r3, [pc, #112]	; (8016420 <Auto_Fit+0x7e0>)
 80163ae:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 80163b2:	2b0a      	cmp	r3, #10
 80163b4:	dc15      	bgt.n	80163e2 <Auto_Fit+0x7a2>
          List[TIM_BASE].Val++;
 80163b6:	4b1a      	ldr	r3, [pc, #104]	; (8016420 <Auto_Fit+0x7e0>)
 80163b8:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 80163bc:	b29b      	uxth	r3, r3
 80163be:	3301      	adds	r3, #1
 80163c0:	b29b      	uxth	r3, r3
 80163c2:	b21a      	sxth	r2, r3
 80163c4:	4b16      	ldr	r3, [pc, #88]	; (8016420 <Auto_Fit+0x7e0>)
 80163c6:	879a      	strh	r2, [r3, #60]	; 0x3c
          Set_Base(List[TIM_BASE].Val);   // Ӳ������ɨ��ʱ����λ
 80163c8:	4b15      	ldr	r3, [pc, #84]	; (8016420 <Auto_Fit+0x7e0>)
 80163ca:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 80163ce:	4618      	mov	r0, r3
 80163d0:	f7f6 f94c 	bl	800c66c <Set_Base>
          WaveProcess();
 80163d4:	f7fe ff52 	bl	801527c <WaveProcess>
                 Update_Proc_All();
 80163d8:	f7fe fbd8 	bl	8014b8c <Update_Proc_All>
          HAL_Delay(50);
 80163dc:	2032      	movs	r0, #50	; 0x32
 80163de:	f002 f92d 	bl	801863c <HAL_Delay>
      for(j=0;j<11;j++){
 80163e2:	79bb      	ldrb	r3, [r7, #6]
 80163e4:	3301      	adds	r3, #1
 80163e6:	71bb      	strb	r3, [r7, #6]
 80163e8:	79bb      	ldrb	r3, [r7, #6]
 80163ea:	2b0a      	cmp	r3, #10
 80163ec:	d9a0      	bls.n	8016330 <Auto_Fit+0x6f0>
        }
      }

      if(Tmp1 < 20){
 80163ee:	f9b7 3000 	ldrsh.w	r3, [r7]
 80163f2:	2b13      	cmp	r3, #19
 80163f4:	dc0b      	bgt.n	801640e <Auto_Fit+0x7ce>
        List[TIM_BASE].Val=5; //50us
 80163f6:	4b0a      	ldr	r3, [pc, #40]	; (8016420 <Auto_Fit+0x7e0>)
 80163f8:	2205      	movs	r2, #5
 80163fa:	879a      	strh	r2, [r3, #60]	; 0x3c
        Set_Base(List[TIM_BASE].Val);   // Ӳ������ɨ��ʱ����λ
 80163fc:	4b08      	ldr	r3, [pc, #32]	; (8016420 <Auto_Fit+0x7e0>)
 80163fe:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8016402:	4618      	mov	r0, r3
 8016404:	f7f6 f932 	bl	800c66c <Set_Base>
        HAL_Delay(50);
 8016408:	2032      	movs	r0, #50	; 0x32
 801640a:	f002 f917 	bl	801863c <HAL_Delay>
      }
       Update_Proc_All();
 801640e:	f7fe fbbd 	bl	8014b8c <Update_Proc_All>
  }
}
 8016412:	bf00      	nop
 8016414:	370c      	adds	r7, #12
 8016416:	46bd      	mov	sp, r7
 8016418:	bd90      	pop	{r4, r7, pc}
 801641a:	bf00      	nop
 801641c:	20002858 	.word	0x20002858
 8016420:	2000029c 	.word	0x2000029c

08016424 <Init_Touch>:

unsigned char val[2]; //input buffer

// initialize touch screen
void Init_Touch(void)
{
 8016424:	b580      	push	{r7, lr}
 8016426:	af00      	add	r7, sp, #0
	Touch_SPI();
 8016428:	f000 f810 	bl	801644c <Touch_SPI>
	HAL_GPIO_WritePin( TpCs_GPIO_Port, TpCs_Pin, GPIO_PIN_RESET);
 801642c:	2200      	movs	r2, #0
 801642e:	2140      	movs	r1, #64	; 0x40
 8016430:	4805      	ldr	r0, [pc, #20]	; (8016448 <Init_Touch+0x24>)
 8016432:	f003 fce1 	bl	8019df8 <HAL_GPIO_WritePin>
// not needed yet
	HAL_GPIO_WritePin( TpCs_GPIO_Port, TpCs_Pin, GPIO_PIN_SET);
 8016436:	2201      	movs	r2, #1
 8016438:	2140      	movs	r1, #64	; 0x40
 801643a:	4803      	ldr	r0, [pc, #12]	; (8016448 <Init_Touch+0x24>)
 801643c:	f003 fcdc 	bl	8019df8 <HAL_GPIO_WritePin>
	LCD_SPI();
 8016440:	f000 f814 	bl	801646c <LCD_SPI>
}
 8016444:	bf00      	nop
 8016446:	bd80      	pop	{r7, pc}
 8016448:	40020400 	.word	0x40020400

0801644c <Touch_SPI>:

// set SPI for touch controller
void Touch_SPI(void)
{
 801644c:	b580      	push	{r7, lr}
 801644e:	af00      	add	r7, sp, #0
//	HAL_SPI_DeInit(&hspi3);  switch on the fly
	hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8016450:	4b05      	ldr	r3, [pc, #20]	; (8016468 <Touch_SPI+0x1c>)
 8016452:	2200      	movs	r2, #0
 8016454:	60da      	str	r2, [r3, #12]
	hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16; //slow clock for touch controller
 8016456:	4b04      	ldr	r3, [pc, #16]	; (8016468 <Touch_SPI+0x1c>)
 8016458:	2218      	movs	r2, #24
 801645a:	61da      	str	r2, [r3, #28]
	HAL_SPI_Init(&hspi3);
 801645c:	4802      	ldr	r0, [pc, #8]	; (8016468 <Touch_SPI+0x1c>)
 801645e:	f005 ff47 	bl	801c2f0 <HAL_SPI_Init>
}
 8016462:	bf00      	nop
 8016464:	bd80      	pop	{r7, pc}
 8016466:	bf00      	nop
 8016468:	200069cc 	.word	0x200069cc

0801646c <LCD_SPI>:

// set SPI for LCD display
void LCD_SPI(void)
{
 801646c:	b580      	push	{r7, lr}
 801646e:	af00      	add	r7, sp, #0
//	HAL_SPI_DeInit(&hspi3); switch on fly
	hspi3.Init.DataSize = SPI_DATASIZE_16BIT;
 8016470:	4b05      	ldr	r3, [pc, #20]	; (8016488 <LCD_SPI+0x1c>)
 8016472:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8016476:	60da      	str	r2, [r3, #12]
	hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8016478:	4b03      	ldr	r3, [pc, #12]	; (8016488 <LCD_SPI+0x1c>)
 801647a:	2210      	movs	r2, #16
 801647c:	61da      	str	r2, [r3, #28]
	HAL_SPI_Init(&hspi3);
 801647e:	4802      	ldr	r0, [pc, #8]	; (8016488 <LCD_SPI+0x1c>)
 8016480:	f005 ff36 	bl	801c2f0 <HAL_SPI_Init>
}
 8016484:	bf00      	nop
 8016486:	bd80      	pop	{r7, pc}
 8016488:	200069cc 	.word	0x200069cc

0801648c <read_2046>:

short read_2046( unsigned char cmd )  //internal value read
{
 801648c:	b580      	push	{r7, lr}
 801648e:	b084      	sub	sp, #16
 8016490:	af00      	add	r7, sp, #0
 8016492:	4603      	mov	r3, r0
 8016494:	71fb      	strb	r3, [r7, #7]
	short xyz;

	HAL_SPI_Transmit(&hspi3, &cmd, 1, 1);// timeout 1 ms
 8016496:	1df9      	adds	r1, r7, #7
 8016498:	2301      	movs	r3, #1
 801649a:	2201      	movs	r2, #1
 801649c:	480e      	ldr	r0, [pc, #56]	; (80164d8 <read_2046+0x4c>)
 801649e:	f005 ffb0 	bl	801c402 <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspi3,val,2,1);   // read value
 80164a2:	2301      	movs	r3, #1
 80164a4:	2202      	movs	r2, #2
 80164a6:	490d      	ldr	r1, [pc, #52]	; (80164dc <read_2046+0x50>)
 80164a8:	480b      	ldr	r0, [pc, #44]	; (80164d8 <read_2046+0x4c>)
 80164aa:	f006 f8e6 	bl	801c67a <HAL_SPI_Receive>

	xyz = (val[0] <<8) +val[1];
 80164ae:	4b0b      	ldr	r3, [pc, #44]	; (80164dc <read_2046+0x50>)
 80164b0:	781b      	ldrb	r3, [r3, #0]
 80164b2:	b29b      	uxth	r3, r3
 80164b4:	021b      	lsls	r3, r3, #8
 80164b6:	b29a      	uxth	r2, r3
 80164b8:	4b08      	ldr	r3, [pc, #32]	; (80164dc <read_2046+0x50>)
 80164ba:	785b      	ldrb	r3, [r3, #1]
 80164bc:	b29b      	uxth	r3, r3
 80164be:	4413      	add	r3, r2
 80164c0:	b29b      	uxth	r3, r3
 80164c2:	81fb      	strh	r3, [r7, #14]
	xyz = xyz >> 3;  //12 bit value
 80164c4:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80164c8:	10db      	asrs	r3, r3, #3
 80164ca:	81fb      	strh	r3, [r7, #14]
	return xyz;
 80164cc:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 80164d0:	4618      	mov	r0, r3
 80164d2:	3710      	adds	r7, #16
 80164d4:	46bd      	mov	sp, r7
 80164d6:	bd80      	pop	{r7, pc}
 80164d8:	200069cc 	.word	0x200069cc
 80164dc:	20006898 	.word	0x20006898

080164e0 <Touch_Read>:

char Touch_Read(short *x, short*y)
{
 80164e0:	b580      	push	{r7, lr}
 80164e2:	b084      	sub	sp, #16
 80164e4:	af00      	add	r7, sp, #0
 80164e6:	6078      	str	r0, [r7, #4]
 80164e8:	6039      	str	r1, [r7, #0]
	short z1,z2;
	short press;
	press =0;
 80164ea:	2300      	movs	r3, #0
 80164ec:	81fb      	strh	r3, [r7, #14]

	Touch_SPI();
 80164ee:	f7ff ffad 	bl	801644c <Touch_SPI>
	HAL_GPIO_WritePin( TpCs_GPIO_Port, TpCs_Pin, GPIO_PIN_RESET);
 80164f2:	2200      	movs	r2, #0
 80164f4:	2140      	movs	r1, #64	; 0x40
 80164f6:	481f      	ldr	r0, [pc, #124]	; (8016574 <Touch_Read+0x94>)
 80164f8:	f003 fc7e 	bl	8019df8 <HAL_GPIO_WritePin>

	z1 = read_2046(0xB0);  //read z1 cmd 8+3
 80164fc:	20b0      	movs	r0, #176	; 0xb0
 80164fe:	f7ff ffc5 	bl	801648c <read_2046>
 8016502:	4603      	mov	r3, r0
 8016504:	81bb      	strh	r3, [r7, #12]
	z2 = read_2046(0xC0);  //read z2 cmd 8+4
 8016506:	20c0      	movs	r0, #192	; 0xc0
 8016508:	f7ff ffc0 	bl	801648c <read_2046>
 801650c:	4603      	mov	r3, r0
 801650e:	817b      	strh	r3, [r7, #10]
	press = z1 + 4095;
 8016510:	89bb      	ldrh	r3, [r7, #12]
 8016512:	f603 73ff 	addw	r3, r3, #4095	; 0xfff
 8016516:	b29b      	uxth	r3, r3
 8016518:	81fb      	strh	r3, [r7, #14]
	press -= z2;
 801651a:	89fa      	ldrh	r2, [r7, #14]
 801651c:	897b      	ldrh	r3, [r7, #10]
 801651e:	1ad3      	subs	r3, r2, r3
 8016520:	b29b      	uxth	r3, r3
 8016522:	81fb      	strh	r3, [r7, #14]

	if( press >= 400 )
 8016524:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8016528:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 801652c:	db0d      	blt.n	801654a <Touch_Read+0x6a>
	{
		*x = read_2046(0xD0);  //read x cmd 8+5
 801652e:	20d0      	movs	r0, #208	; 0xd0
 8016530:	f7ff ffac 	bl	801648c <read_2046>
 8016534:	4603      	mov	r3, r0
 8016536:	461a      	mov	r2, r3
 8016538:	687b      	ldr	r3, [r7, #4]
 801653a:	801a      	strh	r2, [r3, #0]
		*y = read_2046(0x90);  //read y cmd 8+1
 801653c:	2090      	movs	r0, #144	; 0x90
 801653e:	f7ff ffa5 	bl	801648c <read_2046>
 8016542:	4603      	mov	r3, r0
 8016544:	461a      	mov	r2, r3
 8016546:	683b      	ldr	r3, [r7, #0]
 8016548:	801a      	strh	r2, [r3, #0]
	}

	HAL_GPIO_WritePin( TpCs_GPIO_Port, TpCs_Pin, GPIO_PIN_SET);
 801654a:	2201      	movs	r2, #1
 801654c:	2140      	movs	r1, #64	; 0x40
 801654e:	4809      	ldr	r0, [pc, #36]	; (8016574 <Touch_Read+0x94>)
 8016550:	f003 fc52 	bl	8019df8 <HAL_GPIO_WritePin>
	LCD_SPI();
 8016554:	f7ff ff8a 	bl	801646c <LCD_SPI>

	return (press<400)?0:1;
 8016558:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 801655c:	f240 128f 	movw	r2, #399	; 0x18f
 8016560:	4293      	cmp	r3, r2
 8016562:	bfcc      	ite	gt
 8016564:	2301      	movgt	r3, #1
 8016566:	2300      	movle	r3, #0
 8016568:	b2db      	uxtb	r3, r3
}
 801656a:	4618      	mov	r0, r3
 801656c:	3710      	adds	r7, #16
 801656e:	46bd      	mov	sp, r7
 8016570:	bd80      	pop	{r7, pc}
 8016572:	bf00      	nop
 8016574:	40020400 	.word	0x40020400

08016578 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8016578:	b580      	push	{r7, lr}
 801657a:	b082      	sub	sp, #8
 801657c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
  short i;
  char SAVE_FLAG = 0;
 801657e:	2300      	movs	r3, #0
 8016580:	717b      	strb	r3, [r7, #5]
  char Pop_Num = 0;
 8016582:	2300      	movs	r3, #0
 8016584:	713b      	strb	r3, [r7, #4]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8016586:	f001 ffe7 	bl	8018558 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 801658a:	f001 f859 	bl	8017640 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 801658e:	f001 fbfb 	bl	8017d88 <MX_GPIO_Init>
  MX_DMA_Init();
 8016592:	f001 fbc3 	bl	8017d1c <MX_DMA_Init>
  MX_ADC1_Init();
 8016596:	f001 f8c7 	bl	8017728 <MX_ADC1_Init>
  MX_ADC2_Init();
 801659a:	f001 f917 	bl	80177cc <MX_ADC2_Init>
  MX_DAC_Init();
 801659e:	f001 f967 	bl	8017870 <MX_DAC_Init>
  MX_SPI2_Init();
 80165a2:	f001 f9a3 	bl	80178ec <MX_SPI2_Init>
  MX_SPI3_Init();
 80165a6:	f001 f9d7 	bl	8017958 <MX_SPI3_Init>
  MX_TIM1_Init();
 80165aa:	f001 fa0d 	bl	80179c8 <MX_TIM1_Init>
  MX_TIM3_Init();
 80165ae:	f001 fa81 	bl	8017ab4 <MX_TIM3_Init>
  MX_TIM5_Init();
 80165b2:	f001 fadf 	bl	8017b74 <MX_TIM5_Init>
  MX_USB_DEVICE_Init();
 80165b6:	f00b fec9 	bl	802234c <MX_USB_DEVICE_Init>
  MX_TIM7_Init();
 80165ba:	f001 fb69 	bl	8017c90 <MX_TIM7_Init>
  /* USER CODE BEGIN 2 */

  // initialize adc dma
  __HAL_DMA_DISABLE(&hdma_adc1);
 80165be:	4bb1      	ldr	r3, [pc, #708]	; (8016884 <main+0x30c>)
 80165c0:	681b      	ldr	r3, [r3, #0]
 80165c2:	681a      	ldr	r2, [r3, #0]
 80165c4:	4baf      	ldr	r3, [pc, #700]	; (8016884 <main+0x30c>)
 80165c6:	681b      	ldr	r3, [r3, #0]
 80165c8:	f022 0201 	bic.w	r2, r2, #1
 80165cc:	601a      	str	r2, [r3, #0]
  dma_tmp = hdma_adc1.Instance->CR;
 80165ce:	4bad      	ldr	r3, [pc, #692]	; (8016884 <main+0x30c>)
 80165d0:	681b      	ldr	r3, [r3, #0]
 80165d2:	681b      	ldr	r3, [r3, #0]
 80165d4:	603b      	str	r3, [r7, #0]
  dma_tmp &= 0x0FFCFFFE;
 80165d6:	683a      	ldr	r2, [r7, #0]
 80165d8:	4bab      	ldr	r3, [pc, #684]	; (8016888 <main+0x310>)
 80165da:	4013      	ands	r3, r2
 80165dc:	603b      	str	r3, [r7, #0]
  dma_tmp |= 0x30000; //set very high pirority
 80165de:	683b      	ldr	r3, [r7, #0]
 80165e0:	f443 3340 	orr.w	r3, r3, #196608	; 0x30000
 80165e4:	603b      	str	r3, [r7, #0]
  hdma_adc1.Instance->CR = dma_tmp;
 80165e6:	4ba7      	ldr	r3, [pc, #668]	; (8016884 <main+0x30c>)
 80165e8:	681b      	ldr	r3, [r3, #0]
 80165ea:	683a      	ldr	r2, [r7, #0]
 80165ec:	601a      	str	r2, [r3, #0]

   hdma_adc1.Instance->M0AR = (unsigned)&Sampl[2];
 80165ee:	4ba5      	ldr	r3, [pc, #660]	; (8016884 <main+0x30c>)
 80165f0:	681b      	ldr	r3, [r3, #0]
 80165f2:	4aa6      	ldr	r2, [pc, #664]	; (801688c <main+0x314>)
 80165f4:	60da      	str	r2, [r3, #12]
   hdma_adc1.Instance->PAR = hadc1.Instance->DR;
 80165f6:	4ba6      	ldr	r3, [pc, #664]	; (8016890 <main+0x318>)
 80165f8:	681a      	ldr	r2, [r3, #0]
 80165fa:	4ba2      	ldr	r3, [pc, #648]	; (8016884 <main+0x30c>)
 80165fc:	681b      	ldr	r3, [r3, #0]
 80165fe:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8016600:	609a      	str	r2, [r3, #8]
   __HAL_DMA_SET_COUNTER(&hdma_adc1, 0x1000);
 8016602:	4ba0      	ldr	r3, [pc, #640]	; (8016884 <main+0x30c>)
 8016604:	681b      	ldr	r3, [r3, #0]
 8016606:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 801660a:	605a      	str	r2, [r3, #4]
   __HAL_DMA_ENABLE(&hdma_adc1);
 801660c:	4b9d      	ldr	r3, [pc, #628]	; (8016884 <main+0x30c>)
 801660e:	681b      	ldr	r3, [r3, #0]
 8016610:	681a      	ldr	r2, [r3, #0]
 8016612:	4b9c      	ldr	r3, [pc, #624]	; (8016884 <main+0x30c>)
 8016614:	681b      	ldr	r3, [r3, #0]
 8016616:	f042 0201 	orr.w	r2, r2, #1
 801661a:	601a      	str	r2, [r3, #0]

  // inittialize LCD and touch screen
  Init_LCD();
 801661c:	f7fb fcfa 	bl	8012014 <Init_LCD>
  Init_Touch();
 8016620:	f7ff ff00 	bl	8016424 <Init_Touch>

  SetColor(BLK, WHT);
 8016624:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8016628:	2000      	movs	r0, #0
 801662a:	f7f7 fbe7 	bl	800ddfc <SetColor>

  DispStr8x14(8, 90, PRN, "         Oscilloscope              ");
 801662e:	4b99      	ldr	r3, [pc, #612]	; (8016894 <main+0x31c>)
 8016630:	2200      	movs	r2, #0
 8016632:	215a      	movs	r1, #90	; 0x5a
 8016634:	2008      	movs	r0, #8
 8016636:	f7f7 fb89 	bl	800dd4c <DispStr8x14>
  DispStr8x14(8+22*8, 90, PRN, APP_VERSION);
 801663a:	4b97      	ldr	r3, [pc, #604]	; (8016898 <main+0x320>)
 801663c:	2200      	movs	r2, #0
 801663e:	215a      	movs	r1, #90	; 0x5a
 8016640:	20b8      	movs	r0, #184	; 0xb8
 8016642:	f7f7 fb83 	bl	800dd4c <DispStr8x14>
  DispStr8x14(8, 70, PRN, "        System Initializing...       ");
 8016646:	4b95      	ldr	r3, [pc, #596]	; (801689c <main+0x324>)
 8016648:	2200      	movs	r2, #0
 801664a:	2146      	movs	r1, #70	; 0x46
 801664c:	2008      	movs	r0, #8
 801664e:	f7f7 fb7d 	bl	800dd4c <DispStr8x14>

  HAL_Delay(1000);
 8016652:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8016656:	f001 fff1 	bl	801863c <HAL_Delay>

//=============================check callibration׼===========================
  Read_CalFlag();
 801665a:	f7fa ff43 	bl	80114e4 <Read_CalFlag>

  if(Cal_Flag == 1)
 801665e:	4b90      	ldr	r3, [pc, #576]	; (80168a0 <main+0x328>)
 8016660:	781b      	ldrb	r3, [r3, #0]
 8016662:	2b01      	cmp	r3, #1
 8016664:	d10f      	bne.n	8016686 <main+0x10e>
  {
	  Cal_Flag = 0;
 8016666:	4b8e      	ldr	r3, [pc, #568]	; (80168a0 <main+0x328>)
 8016668:	2200      	movs	r2, #0
 801666a:	701a      	strb	r2, [r3, #0]
	  SetColor(BLK, WHT);
 801666c:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8016670:	2000      	movs	r0, #0
 8016672:	f7f7 fbc3 	bl	800ddfc <SetColor>
	  Zero_Align();                              //set zero
 8016676:	f7fe fd0b 	bl	8015090 <Zero_Align>
	  Restore();                                 //restore list
 801667a:	f7fb f93d 	bl	80118f8 <Restore>
	  Save_Parameter();                          //save list
 801667e:	f7fa ff59 	bl	8011534 <Save_Parameter>
	  Save_Kpg();
 8016682:	f7fb f881 	bl	8011788 <Save_Kpg>
  }
  Read_Kpg();
 8016686:	f7fb f8f5 	bl	8011874 <Read_Kpg>
  Read_Parameter();
 801668a:	f7fa ffef 	bl	801166c <Read_Parameter>
  File_Num();
 801668e:	f7f9 fc35 	bl	800fefc <File_Num>
  memcpy(Data, DEMO, 310);
 8016692:	f44f 729b 	mov.w	r2, #310	; 0x136
 8016696:	4983      	ldr	r1, [pc, #524]	; (80168a4 <main+0x32c>)
 8016698:	4883      	ldr	r0, [pc, #524]	; (80168a8 <main+0x330>)
 801669a:	f00c fbf5 	bl	8022e88 <memcpy>

  LCD_ClrScrn(GRY);
 801669e:	f643 10e7 	movw	r0, #14823	; 0x39e7
 80166a2:	f7fb fdcd 	bl	8012240 <LCD_ClrScrn>
  Update_Title();
 80166a6:	f7fb ff6d 	bl	8012584 <Update_Title>

  List[SMPL_DPTH].Flg |= UPD;
 80166aa:	4b80      	ldr	r3, [pc, #512]	; (80168ac <main+0x334>)
 80166ac:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 80166b0:	f043 0320 	orr.w	r3, r3, #32
 80166b4:	b2da      	uxtb	r2, r3
 80166b6:	4b7d      	ldr	r3, [pc, #500]	; (80168ac <main+0x334>)
 80166b8:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e

  StdBy_Time = List[STANDBY].Val * MIN_UNIT;
 80166bc:	4b7b      	ldr	r3, [pc, #492]	; (80168ac <main+0x334>)
 80166be:	f9b3 314c 	ldrsh.w	r3, [r3, #332]	; 0x14c
 80166c2:	b29b      	uxth	r3, r3
 80166c4:	461a      	mov	r2, r3
 80166c6:	0112      	lsls	r2, r2, #4
 80166c8:	1ad3      	subs	r3, r2, r3
 80166ca:	009b      	lsls	r3, r3, #2
 80166cc:	b29b      	uxth	r3, r3
 80166ce:	b21a      	sxth	r2, r3
 80166d0:	4b77      	ldr	r3, [pc, #476]	; (80168b0 <main+0x338>)
 80166d2:	801a      	strh	r2, [r3, #0]

  // Start timer
  HAL_TIM_Base_Start_IT(&htim3);
 80166d4:	4877      	ldr	r0, [pc, #476]	; (80168b4 <main+0x33c>)
 80166d6:	f006 fd2f 	bl	801d138 <HAL_TIM_Base_Start_IT>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	    if((List[STANDBY].Val != 0)&&(StdBy_Time == 0))
 80166da:	4b74      	ldr	r3, [pc, #464]	; (80168ac <main+0x334>)
 80166dc:	f9b3 314c 	ldrsh.w	r3, [r3, #332]	; 0x14c
 80166e0:	2b00      	cmp	r3, #0
 80166e2:	d007      	beq.n	80166f4 <main+0x17c>
 80166e4:	4b72      	ldr	r3, [pc, #456]	; (80168b0 <main+0x338>)
 80166e6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80166ea:	2b00      	cmp	r3, #0
 80166ec:	d102      	bne.n	80166f4 <main+0x17c>
	    {
	      StdBy_Flag = 1;
 80166ee:	4b72      	ldr	r3, [pc, #456]	; (80168b8 <main+0x340>)
 80166f0:	2201      	movs	r2, #1
 80166f2:	701a      	strb	r2, [r3, #0]
	    }

	    Update_Detail();
 80166f4:	f7fc feb2 	bl	801345c <Update_Detail>
	    Update_Blink();
 80166f8:	f7fb ff98 	bl	801262c <Update_Blink>
	    WaveProcess();
 80166fc:	f7fe fdbe 	bl	801527c <WaveProcess>
	    DrawWindow(WaveBuf, ParamTab);
 8016700:	496e      	ldr	r1, [pc, #440]	; (80168bc <main+0x344>)
 8016702:	486f      	ldr	r0, [pc, #444]	; (80168c0 <main+0x348>)
 8016704:	f7f7 f8fe 	bl	800d904 <DrawWindow>

	   if(TIM_BASE_Val!=0)
 8016708:	4b6e      	ldr	r3, [pc, #440]	; (80168c4 <main+0x34c>)
 801670a:	f9b3 3000 	ldrsh.w	r3, [r3]
 801670e:	2b00      	cmp	r3, #0
 8016710:	d01c      	beq.n	801674c <main+0x1d4>
	    {
	      List[TIM_BASE].Val=TIM_BASE_Val;
 8016712:	4b6c      	ldr	r3, [pc, #432]	; (80168c4 <main+0x34c>)
 8016714:	f9b3 2000 	ldrsh.w	r2, [r3]
 8016718:	4b64      	ldr	r3, [pc, #400]	; (80168ac <main+0x334>)
 801671a:	879a      	strh	r2, [r3, #60]	; 0x3c
	      List[TIM_BASE].Flg |= UPD;
 801671c:	4b63      	ldr	r3, [pc, #396]	; (80168ac <main+0x334>)
 801671e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8016722:	f043 0320 	orr.w	r3, r3, #32
 8016726:	b2da      	uxtb	r2, r3
 8016728:	4b60      	ldr	r3, [pc, #384]	; (80168ac <main+0x334>)
 801672a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
	      TIM_BASE_Val=Current;
 801672e:	4b66      	ldr	r3, [pc, #408]	; (80168c8 <main+0x350>)
 8016730:	f9b3 2000 	ldrsh.w	r2, [r3]
 8016734:	4b63      	ldr	r3, [pc, #396]	; (80168c4 <main+0x34c>)
 8016736:	801a      	strh	r2, [r3, #0]
	      Update_Title();
 8016738:	f7fb ff24 	bl	8012584 <Update_Title>
	      Current=TIM_BASE_Val;
 801673c:	4b61      	ldr	r3, [pc, #388]	; (80168c4 <main+0x34c>)
 801673e:	f9b3 2000 	ldrsh.w	r2, [r3]
 8016742:	4b61      	ldr	r3, [pc, #388]	; (80168c8 <main+0x350>)
 8016744:	801a      	strh	r2, [r3, #0]
	      TIM_BASE_Val=0;
 8016746:	4b5f      	ldr	r3, [pc, #380]	; (80168c4 <main+0x34c>)
 8016748:	2200      	movs	r2, #0
 801674a:	801a      	strh	r2, [r3, #0]
	    }
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	    if(Key_Buffer != 0)
 801674c:	4b5f      	ldr	r3, [pc, #380]	; (80168cc <main+0x354>)
 801674e:	781b      	ldrb	r3, [r3, #0]
 8016750:	b2db      	uxtb	r3, r3
 8016752:	2b00      	cmp	r3, #0
 8016754:	d0c1      	beq.n	80166da <main+0x162>
	    {
	      StdBy_Flag = 0;
 8016756:	4b58      	ldr	r3, [pc, #352]	; (80168b8 <main+0x340>)
 8016758:	2200      	movs	r2, #0
 801675a:	701a      	strb	r2, [r3, #0]
	      PopupCnt = 10;                  // �ް���ʱ�˵���ά����ʾ 10��
 801675c:	4b5c      	ldr	r3, [pc, #368]	; (80168d0 <main+0x358>)
 801675e:	220a      	movs	r2, #10
 8016760:	801a      	strh	r2, [r3, #0]
	      List[MenuNow[Current]].Flg |= UPD;
 8016762:	4b59      	ldr	r3, [pc, #356]	; (80168c8 <main+0x350>)
 8016764:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016768:	461a      	mov	r2, r3
 801676a:	4b5a      	ldr	r3, [pc, #360]	; (80168d4 <main+0x35c>)
 801676c:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8016770:	4a4e      	ldr	r2, [pc, #312]	; (80168ac <main+0x334>)
 8016772:	00db      	lsls	r3, r3, #3
 8016774:	4413      	add	r3, r2
 8016776:	799b      	ldrb	r3, [r3, #6]
 8016778:	4a53      	ldr	r2, [pc, #332]	; (80168c8 <main+0x350>)
 801677a:	f9b2 2000 	ldrsh.w	r2, [r2]
 801677e:	4611      	mov	r1, r2
 8016780:	4a54      	ldr	r2, [pc, #336]	; (80168d4 <main+0x35c>)
 8016782:	f932 2011 	ldrsh.w	r2, [r2, r1, lsl #1]
 8016786:	4610      	mov	r0, r2
 8016788:	f043 0320 	orr.w	r3, r3, #32
 801678c:	b2d9      	uxtb	r1, r3
 801678e:	4a47      	ldr	r2, [pc, #284]	; (80168ac <main+0x334>)
 8016790:	00c3      	lsls	r3, r0, #3
 8016792:	4413      	add	r3, r2
 8016794:	460a      	mov	r2, r1
 8016796:	719a      	strb	r2, [r3, #6]

	      switch (Key_Buffer)
 8016798:	4b4c      	ldr	r3, [pc, #304]	; (80168cc <main+0x354>)
 801679a:	781b      	ldrb	r3, [r3, #0]
 801679c:	b2db      	uxtb	r3, r3
 801679e:	3b01      	subs	r3, #1
 80167a0:	2b09      	cmp	r3, #9
 80167a2:	f200 8709 	bhi.w	80175b8 <main+0x1040>
 80167a6:	a201      	add	r2, pc, #4	; (adr r2, 80167ac <main+0x234>)
 80167a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80167ac:	0801681d 	.word	0x0801681d
 80167b0:	08016b31 	.word	0x08016b31
 80167b4:	08016c89 	.word	0x08016c89
 80167b8:	08016d37 	.word	0x08016d37
 80167bc:	08016ded 	.word	0x08016ded
 80167c0:	08017193 	.word	0x08017193
 80167c4:	080175b9 	.word	0x080175b9
 80167c8:	080167f7 	.word	0x080167f7
 80167cc:	080167d5 	.word	0x080167d5
 80167d0:	08016b1d 	.word	0x08016b1d
	      {
	     case KEYCODE_MEM:
	         i = Save_Bmp(List[SAVE_BMP].Val);
 80167d4:	4b35      	ldr	r3, [pc, #212]	; (80168ac <main+0x334>)
 80167d6:	f9b3 30ec 	ldrsh.w	r3, [r3, #236]	; 0xec
 80167da:	4618      	mov	r0, r3
 80167dc:	f7f9 feb0 	bl	8010540 <Save_Bmp>
 80167e0:	4603      	mov	r3, r0
 80167e2:	80fb      	strh	r3, [r7, #6]
	         DispFileInfo(i);
 80167e4:	88fb      	ldrh	r3, [r7, #6]
 80167e6:	b2db      	uxtb	r3, r3
 80167e8:	4618      	mov	r0, r3
 80167ea:	f7fe f959 	bl	8014aa0 <DispFileInfo>
	         DispBMPInfo();
 80167ee:	f7fe f987 	bl	8014b00 <DispBMPInfo>
	        break;
 80167f2:	f000 bee1 	b.w	80175b8 <main+0x1040>

	     case KEYCODE_ACT:
	       SAVE_FLAG=0;
 80167f6:	2300      	movs	r3, #0
 80167f8:	717b      	strb	r3, [r7, #5]
	       if(PopType & DAILOG_POP) Close_Pop();
 80167fa:	4b37      	ldr	r3, [pc, #220]	; (80168d8 <main+0x360>)
 80167fc:	781b      	ldrb	r3, [r3, #0]
 80167fe:	f003 0304 	and.w	r3, r3, #4
 8016802:	2b00      	cmp	r3, #0
 8016804:	d003      	beq.n	801680e <main+0x296>
 8016806:	f7f8 f87d 	bl	800e904 <Close_Pop>
	       else {
	         Dialog_Pop("Save All ParamTab?");
	         Pop_Num = 1;
	       }
	       break;
 801680a:	f000 bed5 	b.w	80175b8 <main+0x1040>
	         Dialog_Pop("Save All ParamTab?");
 801680e:	4833      	ldr	r0, [pc, #204]	; (80168dc <main+0x364>)
 8016810:	f7f8 f8a4 	bl	800e95c <Dialog_Pop>
	         Pop_Num = 1;
 8016814:	2301      	movs	r3, #1
 8016816:	713b      	strb	r3, [r7, #4]
	       break;
 8016818:	f000 bece 	b.w	80175b8 <main+0x1040>

	     case KEYCODE_PLAY:
	       if((Current == ST)&&(Cal_Flag==0))
 801681c:	4b2a      	ldr	r3, [pc, #168]	; (80168c8 <main+0x350>)
 801681e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016822:	2b07      	cmp	r3, #7
 8016824:	f040 8080 	bne.w	8016928 <main+0x3b0>
 8016828:	4b1d      	ldr	r3, [pc, #116]	; (80168a0 <main+0x328>)
 801682a:	781b      	ldrb	r3, [r3, #0]
 801682c:	2b00      	cmp	r3, #0
 801682e:	d17b      	bne.n	8016928 <main+0x3b0>
	       {
	         if(PopType & DAILOG_POP){
 8016830:	4b29      	ldr	r3, [pc, #164]	; (80168d8 <main+0x360>)
 8016832:	781b      	ldrb	r3, [r3, #0]
 8016834:	f003 0304 	and.w	r3, r3, #4
 8016838:	2b00      	cmp	r3, #0
 801683a:	d00e      	beq.n	801685a <main+0x2e2>
	           if(Pop_Num == 1){
 801683c:	793b      	ldrb	r3, [r7, #4]
 801683e:	2b01      	cmp	r3, #1
 8016840:	d105      	bne.n	801684e <main+0x2d6>
	             Save_Parameter();
 8016842:	f7fa fe77 	bl	8011534 <Save_Parameter>
	             Close_Pop();
 8016846:	f7f8 f85d 	bl	800e904 <Close_Pop>
	           Zero_Align();
	           Update_Proc_All();
	           Close_Pop();
	           CalSave_Pop("Save Cal ParamTab?");
	         }
	         break;
 801684a:	f000 bea6 	b.w	801759a <main+0x1022>
	             Close_Pop();
 801684e:	f7f8 f859 	bl	800e904 <Close_Pop>
	             List_Pop();
 8016852:	f7f8 f86d 	bl	800e930 <List_Pop>
	         break;
 8016856:	f000 bea0 	b.w	801759a <main+0x1022>
	         else if((PopType & LIST_POP) && (MenuNow[ST]==RESTORE )) {
 801685a:	4b1f      	ldr	r3, [pc, #124]	; (80168d8 <main+0x360>)
 801685c:	781b      	ldrb	r3, [r3, #0]
 801685e:	f003 0302 	and.w	r3, r3, #2
 8016862:	2b00      	cmp	r3, #0
 8016864:	d03c      	beq.n	80168e0 <main+0x368>
 8016866:	4b1b      	ldr	r3, [pc, #108]	; (80168d4 <main+0x35c>)
 8016868:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 801686c:	2b28      	cmp	r3, #40	; 0x28
 801686e:	d137      	bne.n	80168e0 <main+0x368>
	           Restore_CalPar();
 8016870:	f7fb f8ac 	bl	80119cc <Restore_CalPar>
	           Dialog_Pop("Save All ParamTab?");
 8016874:	4819      	ldr	r0, [pc, #100]	; (80168dc <main+0x364>)
 8016876:	f7f8 f871 	bl	800e95c <Dialog_Pop>
	           Cal_Flag = 1;
 801687a:	4b09      	ldr	r3, [pc, #36]	; (80168a0 <main+0x328>)
 801687c:	2201      	movs	r2, #1
 801687e:	701a      	strb	r2, [r3, #0]
	         break;
 8016880:	f000 be8b 	b.w	801759a <main+0x1022>
 8016884:	20006b18 	.word	0x20006b18
 8016888:	0ffcfffe 	.word	0x0ffcfffe
 801688c:	2000287c 	.word	0x2000287c
 8016890:	20006a84 	.word	0x20006a84
 8016894:	080009f4 	.word	0x080009f4
 8016898:	20000584 	.word	0x20000584
 801689c:	08000a18 	.word	0x08000a18
 80168a0:	200001b8 	.word	0x200001b8
 80168a4:	08000b58 	.word	0x08000b58
 80168a8:	2000000c 	.word	0x2000000c
 80168ac:	2000029c 	.word	0x2000029c
 80168b0:	200007a4 	.word	0x200007a4
 80168b4:	20006984 	.word	0x20006984
 80168b8:	200007aa 	.word	0x200007aa
 80168bc:	20000144 	.word	0x20000144
 80168c0:	20000c10 	.word	0x20000c10
 80168c4:	2000281c 	.word	0x2000281c
 80168c8:	200007a6 	.word	0x200007a6
 80168cc:	20000781 	.word	0x20000781
 80168d0:	20000000 	.word	0x20000000
 80168d4:	2000053c 	.word	0x2000053c
 80168d8:	20000796 	.word	0x20000796
 80168dc:	08000a40 	.word	0x08000a40
	         else if((PopType & LIST_POP) && (MenuNow[ST]==AUTO_CAL )) {
 80168e0:	4baf      	ldr	r3, [pc, #700]	; (8016ba0 <main+0x628>)
 80168e2:	781b      	ldrb	r3, [r3, #0]
 80168e4:	f003 0302 	and.w	r3, r3, #2
 80168e8:	2b00      	cmp	r3, #0
 80168ea:	f000 8656 	beq.w	801759a <main+0x1022>
 80168ee:	4bad      	ldr	r3, [pc, #692]	; (8016ba4 <main+0x62c>)
 80168f0:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 80168f4:	2b27      	cmp	r3, #39	; 0x27
 80168f6:	f040 8650 	bne.w	801759a <main+0x1022>
	           Close_Pop();
 80168fa:	f7f8 f803 	bl	800e904 <Close_Pop>
	           Calibrate_Pop("Waiting for Calibration...");
 80168fe:	48aa      	ldr	r0, [pc, #680]	; (8016ba8 <main+0x630>)
 8016900:	f7f8 f892 	bl	800ea28 <Calibrate_Pop>
	           Cal_Flag = 1;
 8016904:	4ba9      	ldr	r3, [pc, #676]	; (8016bac <main+0x634>)
 8016906:	2201      	movs	r2, #1
 8016908:	701a      	strb	r2, [r3, #0]
	           DrawWindow(WaveBuf, ParamTab);
 801690a:	49a9      	ldr	r1, [pc, #676]	; (8016bb0 <main+0x638>)
 801690c:	48a9      	ldr	r0, [pc, #676]	; (8016bb4 <main+0x63c>)
 801690e:	f7f6 fff9 	bl	800d904 <DrawWindow>
	           Zero_Align();
 8016912:	f7fe fbbd 	bl	8015090 <Zero_Align>
	           Update_Proc_All();
 8016916:	f7fe f939 	bl	8014b8c <Update_Proc_All>
	           Close_Pop();
 801691a:	f7f7 fff3 	bl	800e904 <Close_Pop>
	           CalSave_Pop("Save Cal ParamTab?");
 801691e:	48a6      	ldr	r0, [pc, #664]	; (8016bb8 <main+0x640>)
 8016920:	f7f8 f8b8 	bl	800ea94 <CalSave_Pop>
	         break;
 8016924:	f000 be39 	b.w	801759a <main+0x1022>
	       }
	       else if((Current == ST)&&(Cal_Flag==1)){
 8016928:	4ba4      	ldr	r3, [pc, #656]	; (8016bbc <main+0x644>)
 801692a:	f9b3 3000 	ldrsh.w	r3, [r3]
 801692e:	2b07      	cmp	r3, #7
 8016930:	d113      	bne.n	801695a <main+0x3e2>
 8016932:	4b9e      	ldr	r3, [pc, #632]	; (8016bac <main+0x634>)
 8016934:	781b      	ldrb	r3, [r3, #0]
 8016936:	2b01      	cmp	r3, #1
 8016938:	d10f      	bne.n	801695a <main+0x3e2>
	         if(PopType & DAILOG_POP){
 801693a:	4b99      	ldr	r3, [pc, #612]	; (8016ba0 <main+0x628>)
 801693c:	781b      	ldrb	r3, [r3, #0]
 801693e:	f003 0304 	and.w	r3, r3, #4
 8016942:	2b00      	cmp	r3, #0
 8016944:	f000 862b 	beq.w	801759e <main+0x1026>
	           Save_Kpg();
 8016948:	f7fa ff1e 	bl	8011788 <Save_Kpg>
	           Close_Pop();
 801694c:	f7f7 ffda 	bl	800e904 <Close_Pop>
	           Cal_Flag = 0;
 8016950:	4b96      	ldr	r3, [pc, #600]	; (8016bac <main+0x634>)
 8016952:	2200      	movs	r2, #0
 8016954:	701a      	strb	r2, [r3, #0]
	         }
	         break;
 8016956:	f000 be22 	b.w	801759e <main+0x1026>
	       }

	       if ((Current == FN)&&(PopType & LIST_POP)){
 801695a:	4b98      	ldr	r3, [pc, #608]	; (8016bbc <main+0x644>)
 801695c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016960:	2b05      	cmp	r3, #5
 8016962:	d177      	bne.n	8016a54 <main+0x4dc>
 8016964:	4b8e      	ldr	r3, [pc, #568]	; (8016ba0 <main+0x628>)
 8016966:	781b      	ldrb	r3, [r3, #0]
 8016968:	f003 0302 	and.w	r3, r3, #2
 801696c:	2b00      	cmp	r3, #0
 801696e:	d071      	beq.n	8016a54 <main+0x4dc>
	         i = 0;
 8016970:	2300      	movs	r3, #0
 8016972:	80fb      	strh	r3, [r7, #6]
	         {
	           if(SAVE_FLAG==KEYCODE_MEM)Close_Pop();
 8016974:	797b      	ldrb	r3, [r7, #5]
 8016976:	2b09      	cmp	r3, #9
 8016978:	d101      	bne.n	801697e <main+0x406>
 801697a:	f7f7 ffc3 	bl	800e904 <Close_Pop>
	           if(MenuNow[FN] == SAVE_BMP) i = Save_Bmp(List[SAVE_BMP].Val);
 801697e:	4b89      	ldr	r3, [pc, #548]	; (8016ba4 <main+0x62c>)
 8016980:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8016984:	2b1d      	cmp	r3, #29
 8016986:	d107      	bne.n	8016998 <main+0x420>
 8016988:	4b8d      	ldr	r3, [pc, #564]	; (8016bc0 <main+0x648>)
 801698a:	f9b3 30ec 	ldrsh.w	r3, [r3, #236]	; 0xec
 801698e:	4618      	mov	r0, r3
 8016990:	f7f9 fdd6 	bl	8010540 <Save_Bmp>
 8016994:	4603      	mov	r3, r0
 8016996:	80fb      	strh	r3, [r7, #6]
	           if(MenuNow[FN] == SAVE_DAT) i = Save_Dat(List[SAVE_DAT].Val);
 8016998:	4b82      	ldr	r3, [pc, #520]	; (8016ba4 <main+0x62c>)
 801699a:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 801699e:	2b1e      	cmp	r3, #30
 80169a0:	d107      	bne.n	80169b2 <main+0x43a>
 80169a2:	4b87      	ldr	r3, [pc, #540]	; (8016bc0 <main+0x648>)
 80169a4:	f9b3 30f4 	ldrsh.w	r3, [r3, #244]	; 0xf4
 80169a8:	4618      	mov	r0, r3
 80169aa:	f7f9 fc89 	bl	80102c0 <Save_Dat>
 80169ae:	4603      	mov	r3, r0
 80169b0:	80fb      	strh	r3, [r7, #6]
	           if(MenuNow[FN] == SAVE_BUF) i = Save_Buf(List[SAVE_BUF].Val);
 80169b2:	4b7c      	ldr	r3, [pc, #496]	; (8016ba4 <main+0x62c>)
 80169b4:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 80169b8:	2b1f      	cmp	r3, #31
 80169ba:	d107      	bne.n	80169cc <main+0x454>
 80169bc:	4b80      	ldr	r3, [pc, #512]	; (8016bc0 <main+0x648>)
 80169be:	f9b3 30fc 	ldrsh.w	r3, [r3, #252]	; 0xfc
 80169c2:	4618      	mov	r0, r3
 80169c4:	f7f9 fba6 	bl	8010114 <Save_Buf>
 80169c8:	4603      	mov	r3, r0
 80169ca:	80fb      	strh	r3, [r7, #6]
	           if(MenuNow[FN] == SAVE_CSV) i = Save_Csv(List[SAVE_CSV].Val);
 80169cc:	4b75      	ldr	r3, [pc, #468]	; (8016ba4 <main+0x62c>)
 80169ce:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 80169d2:	2b20      	cmp	r3, #32
 80169d4:	d107      	bne.n	80169e6 <main+0x46e>
 80169d6:	4b7a      	ldr	r3, [pc, #488]	; (8016bc0 <main+0x648>)
 80169d8:	f9b3 3104 	ldrsh.w	r3, [r3, #260]	; 0x104
 80169dc:	4618      	mov	r0, r3
 80169de:	f7f9 ff19 	bl	8010814 <Save_Csv>
 80169e2:	4603      	mov	r3, r0
 80169e4:	80fb      	strh	r3, [r7, #6]
	           if(MenuNow[FN] == SAVE_SVG) i = Save_Svg(List[SAVE_SVG].Val);
 80169e6:	4b6f      	ldr	r3, [pc, #444]	; (8016ba4 <main+0x62c>)
 80169e8:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 80169ec:	2b21      	cmp	r3, #33	; 0x21
 80169ee:	d107      	bne.n	8016a00 <main+0x488>
 80169f0:	4b73      	ldr	r3, [pc, #460]	; (8016bc0 <main+0x648>)
 80169f2:	f9b3 310c 	ldrsh.w	r3, [r3, #268]	; 0x10c
 80169f6:	4618      	mov	r0, r3
 80169f8:	f7fa f932 	bl	8010c60 <Save_Svg>
 80169fc:	4603      	mov	r3, r0
 80169fe:	80fb      	strh	r3, [r7, #6]
	           if(MenuNow[FN] == LOAD_DAT) i = Load_Dat(List[LOAD_DAT].Val);
 8016a00:	4b68      	ldr	r3, [pc, #416]	; (8016ba4 <main+0x62c>)
 8016a02:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8016a06:	2b22      	cmp	r3, #34	; 0x22
 8016a08:	d107      	bne.n	8016a1a <main+0x4a2>
 8016a0a:	4b6d      	ldr	r3, [pc, #436]	; (8016bc0 <main+0x648>)
 8016a0c:	f9b3 3114 	ldrsh.w	r3, [r3, #276]	; 0x114
 8016a10:	4618      	mov	r0, r3
 8016a12:	f7f9 fce9 	bl	80103e8 <Load_Dat>
 8016a16:	4603      	mov	r3, r0
 8016a18:	80fb      	strh	r3, [r7, #6]
	           if(MenuNow[FN] == LOAD_BUF) i = Load_Buf(List[LOAD_BUF].Val);
 8016a1a:	4b62      	ldr	r3, [pc, #392]	; (8016ba4 <main+0x62c>)
 8016a1c:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8016a20:	2b23      	cmp	r3, #35	; 0x23
 8016a22:	d107      	bne.n	8016a34 <main+0x4bc>
 8016a24:	4b66      	ldr	r3, [pc, #408]	; (8016bc0 <main+0x648>)
 8016a26:	f9b3 311c 	ldrsh.w	r3, [r3, #284]	; 0x11c
 8016a2a:	4618      	mov	r0, r3
 8016a2c:	f7f9 fa94 	bl	800ff58 <Load_Buf>
 8016a30:	4603      	mov	r3, r0
 8016a32:	80fb      	strh	r3, [r7, #6]
	           SAVE_FLAG = 0;
 8016a34:	2300      	movs	r3, #0
 8016a36:	717b      	strb	r3, [r7, #5]
	         }
	         DispFileInfo(i);
 8016a38:	88fb      	ldrh	r3, [r7, #6]
 8016a3a:	b2db      	uxtb	r3, r3
 8016a3c:	4618      	mov	r0, r3
 8016a3e:	f7fe f82f 	bl	8014aa0 <DispFileInfo>

	         if(PopType & DAILOG_POP)  Close_Pop();
 8016a42:	4b57      	ldr	r3, [pc, #348]	; (8016ba0 <main+0x628>)
 8016a44:	781b      	ldrb	r3, [r3, #0]
 8016a46:	f003 0304 	and.w	r3, r3, #4
 8016a4a:	2b00      	cmp	r3, #0
 8016a4c:	d062      	beq.n	8016b14 <main+0x59c>
 8016a4e:	f7f7 ff59 	bl	800e904 <Close_Pop>
 8016a52:	e05f      	b.n	8016b14 <main+0x59c>

	       }
	       else if((PopType & DAILOG_POP ) &&(SAVE_FLAG!=KEYCODE_MEM)){
 8016a54:	4b52      	ldr	r3, [pc, #328]	; (8016ba0 <main+0x628>)
 8016a56:	781b      	ldrb	r3, [r3, #0]
 8016a58:	f003 0304 	and.w	r3, r3, #4
 8016a5c:	2b00      	cmp	r3, #0
 8016a5e:	d00b      	beq.n	8016a78 <main+0x500>
 8016a60:	797b      	ldrb	r3, [r7, #5]
 8016a62:	2b09      	cmp	r3, #9
 8016a64:	d008      	beq.n	8016a78 <main+0x500>
	         Save_Parameter();
 8016a66:	f7fa fd65 	bl	8011534 <Save_Parameter>
	         Cal_Flag = 0;
 8016a6a:	4b50      	ldr	r3, [pc, #320]	; (8016bac <main+0x634>)
 8016a6c:	2200      	movs	r2, #0
 8016a6e:	701a      	strb	r2, [r3, #0]
	         Close_Pop();
 8016a70:	f7f7 ff48 	bl	800e904 <Close_Pop>
	         break;
 8016a74:	f000 bda0 	b.w	80175b8 <main+0x1040>
	       }
	       else {
	          if(Status & STOP){
 8016a78:	4b52      	ldr	r3, [pc, #328]	; (8016bc4 <main+0x64c>)
 8016a7a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016a7e:	b29b      	uxth	r3, r3
 8016a80:	f003 0301 	and.w	r3, r3, #1
 8016a84:	2b00      	cmp	r3, #0
 8016a86:	d02e      	beq.n	8016ae6 <main+0x56e>
	            if(Status & LOADM )Status &= ~LOADM;
 8016a88:	4b4e      	ldr	r3, [pc, #312]	; (8016bc4 <main+0x64c>)
 8016a8a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016a8e:	b29b      	uxth	r3, r3
 8016a90:	f003 0310 	and.w	r3, r3, #16
 8016a94:	2b00      	cmp	r3, #0
 8016a96:	d007      	beq.n	8016aa8 <main+0x530>
 8016a98:	4b4a      	ldr	r3, [pc, #296]	; (8016bc4 <main+0x64c>)
 8016a9a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016a9e:	f023 0310 	bic.w	r3, r3, #16
 8016aa2:	b21a      	sxth	r2, r3
 8016aa4:	4b47      	ldr	r3, [pc, #284]	; (8016bc4 <main+0x64c>)
 8016aa6:	801a      	strh	r2, [r3, #0]
	            Status &= ~STOP;     // ��������״̬
 8016aa8:	4b46      	ldr	r3, [pc, #280]	; (8016bc4 <main+0x64c>)
 8016aaa:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016aae:	f023 0301 	bic.w	r3, r3, #1
 8016ab2:	b21a      	sxth	r2, r3
 8016ab4:	4b43      	ldr	r3, [pc, #268]	; (8016bc4 <main+0x64c>)
 8016ab6:	801a      	strh	r2, [r3, #0]
	            if(List[SYNCMODE].Val==SINGL) ADC_Start();
 8016ab8:	4b41      	ldr	r3, [pc, #260]	; (8016bc0 <main+0x648>)
 8016aba:	f9b3 306c 	ldrsh.w	r3, [r3, #108]	; 0x6c
 8016abe:	2b04      	cmp	r3, #4
 8016ac0:	d101      	bne.n	8016ac6 <main+0x54e>
 8016ac2:	f7f5 fe6b 	bl	800c79c <ADC_Start>
	            if(List[SYNCMODE].Val==NORM)  ADC_Start();
 8016ac6:	4b3e      	ldr	r3, [pc, #248]	; (8016bc0 <main+0x648>)
 8016ac8:	f9b3 306c 	ldrsh.w	r3, [r3, #108]	; 0x6c
 8016acc:	2b03      	cmp	r3, #3
 8016ace:	d101      	bne.n	8016ad4 <main+0x55c>
 8016ad0:	f7f5 fe64 	bl	800c79c <ADC_Start>
	            Norm_Clr = 1;
 8016ad4:	4b3c      	ldr	r3, [pc, #240]	; (8016bc8 <main+0x650>)
 8016ad6:	2201      	movs	r2, #1
 8016ad8:	701a      	strb	r2, [r3, #0]
	            SNGL_Kflag = 1;
 8016ada:	4b3c      	ldr	r3, [pc, #240]	; (8016bcc <main+0x654>)
 8016adc:	2201      	movs	r2, #1
 8016ade:	701a      	strb	r2, [r3, #0]
	            Update_Proc_All();
 8016ae0:	f7fe f854 	bl	8014b8c <Update_Proc_All>
 8016ae4:	e016      	b.n	8016b14 <main+0x59c>

	            if(*(short*)F_Sector==0xaa55)Restore_Scene();

	          }
	          else {
	            Status |=  STOP;     // ������ͣ״̬
 8016ae6:	4b37      	ldr	r3, [pc, #220]	; (8016bc4 <main+0x64c>)
 8016ae8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016aec:	f043 0301 	orr.w	r3, r3, #1
 8016af0:	b21a      	sxth	r2, r3
 8016af2:	4b34      	ldr	r3, [pc, #208]	; (8016bc4 <main+0x64c>)
 8016af4:	801a      	strh	r2, [r3, #0]
	            Ch1_Posi = List[V0_POSI].Val;
 8016af6:	4b32      	ldr	r3, [pc, #200]	; (8016bc0 <main+0x648>)
 8016af8:	f9b3 201c 	ldrsh.w	r2, [r3, #28]
 8016afc:	4b34      	ldr	r3, [pc, #208]	; (8016bd0 <main+0x658>)
 8016afe:	801a      	strh	r2, [r3, #0]
	            Ch2_Posi = List[EXT_POSI].Val;
 8016b00:	4b2f      	ldr	r3, [pc, #188]	; (8016bc0 <main+0x648>)
 8016b02:	f9b3 20dc 	ldrsh.w	r2, [r3, #220]	; 0xdc
 8016b06:	4b33      	ldr	r3, [pc, #204]	; (8016bd4 <main+0x65c>)
 8016b08:	801a      	strh	r2, [r3, #0]
	            Tri_Posi = List[THRESHOLD].Val;
 8016b0a:	4b2d      	ldr	r3, [pc, #180]	; (8016bc0 <main+0x648>)
 8016b0c:	f9b3 2084 	ldrsh.w	r2, [r3, #132]	; 0x84
 8016b10:	4b31      	ldr	r3, [pc, #196]	; (8016bd8 <main+0x660>)
 8016b12:	801a      	strh	r2, [r3, #0]
	            Save_Bmp(List[SAVE_BMP].Val);
	            List[SAVE_BMP].Val++;
	          #endif
	          }
	        }
	        DispStatus();            // ��ʾ����״̬
 8016b14:	f7fd fd2e 	bl	8014574 <DispStatus>
 	       break;
 8016b18:	f000 bd4e 	b.w	80175b8 <main+0x1040>

	      case KEYCODE_D_MANU:
	        if(List[FITTRIGG].Val)
 8016b1c:	4b28      	ldr	r3, [pc, #160]	; (8016bc0 <main+0x648>)
 8016b1e:	f9b3 307c 	ldrsh.w	r3, [r3, #124]	; 0x7c
 8016b22:	2b00      	cmp	r3, #0
 8016b24:	f000 853d 	beq.w	80175a2 <main+0x102a>
	        {
	          Auto_Fit();
 8016b28:	f7ff f88a 	bl	8015c40 <Auto_Fit>
	        }
	        break;
 8016b2c:	f000 bd39 	b.w	80175a2 <main+0x102a>

	      case KEYCODE_MANU:
	        if(!(PopType & LIST_POP)){
 8016b30:	4b1b      	ldr	r3, [pc, #108]	; (8016ba0 <main+0x628>)
 8016b32:	781b      	ldrb	r3, [r3, #0]
 8016b34:	f003 0302 	and.w	r3, r3, #2
 8016b38:	2b00      	cmp	r3, #0
 8016b3a:	d111      	bne.n	8016b60 <main+0x5e8>
	            if(Cal_Flag){
 8016b3c:	4b1b      	ldr	r3, [pc, #108]	; (8016bac <main+0x634>)
 8016b3e:	781b      	ldrb	r3, [r3, #0]
 8016b40:	2b00      	cmp	r3, #0
 8016b42:	d006      	beq.n	8016b52 <main+0x5da>
	              Cal_Flag = 0;
 8016b44:	4b19      	ldr	r3, [pc, #100]	; (8016bac <main+0x634>)
 8016b46:	2200      	movs	r2, #0
 8016b48:	701a      	strb	r2, [r3, #0]
	              Close_Pop();
 8016b4a:	f7f7 fedb 	bl	800e904 <Close_Pop>
	          // ------------ �ָ���ʾ��Ϣ��ʾ���Ҷ�ԭ����ʾ��Ϣ ------------
	          if(MenuNow[Current] == SMPL_DPTH) List[SMPL_DPTH].Flg  |= UPD; // ������ȸ�����ʾ
	          else if(Current == FN)           List[MenuNow[FN]].Flg |= UPD; // ָ�����ļ���д�������ʾ
	          else                             List[MenuNow[ME]].Flg |= UPD; // ָ���Ĳ��β����������ʾ
	        }
	        break;
 8016b4e:	f000 bd33 	b.w	80175b8 <main+0x1040>
	              Cal_Flag = 0;
 8016b52:	4b16      	ldr	r3, [pc, #88]	; (8016bac <main+0x634>)
 8016b54:	2200      	movs	r2, #0
 8016b56:	701a      	strb	r2, [r3, #0]
	              List_Pop(); // �˵����ر�ʱ, �򿪲˵���
 8016b58:	f7f7 feea 	bl	800e930 <List_Pop>
	        break;
 8016b5c:	f000 bd2c 	b.w	80175b8 <main+0x1040>
	          Close_Pop();                // �˵����Ѵ�ʱ, �رղ˵���
 8016b60:	f7f7 fed0 	bl	800e904 <Close_Pop>
	          if(Current == XN)      List[T1_POSI   ].Flg |= UPD;
 8016b64:	4b15      	ldr	r3, [pc, #84]	; (8016bbc <main+0x644>)
 8016b66:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016b6a:	2b01      	cmp	r3, #1
 8016b6c:	d109      	bne.n	8016b82 <main+0x60a>
 8016b6e:	4b14      	ldr	r3, [pc, #80]	; (8016bc0 <main+0x648>)
 8016b70:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8016b74:	f043 0320 	orr.w	r3, r3, #32
 8016b78:	b2da      	uxtb	r2, r3
 8016b7a:	4b11      	ldr	r3, [pc, #68]	; (8016bc0 <main+0x648>)
 8016b7c:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
 8016b80:	e03f      	b.n	8016c02 <main+0x68a>
	          else if(Current == YN) List[V1_POSI   ].Flg |= UPD;
 8016b82:	4b0e      	ldr	r3, [pc, #56]	; (8016bbc <main+0x644>)
 8016b84:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016b88:	2b00      	cmp	r3, #0
 8016b8a:	d127      	bne.n	8016bdc <main+0x664>
 8016b8c:	4b0c      	ldr	r3, [pc, #48]	; (8016bc0 <main+0x648>)
 8016b8e:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8016b92:	f043 0320 	orr.w	r3, r3, #32
 8016b96:	b2da      	uxtb	r2, r3
 8016b98:	4b09      	ldr	r3, [pc, #36]	; (8016bc0 <main+0x648>)
 8016b9a:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
 8016b9e:	e030      	b.n	8016c02 <main+0x68a>
 8016ba0:	20000796 	.word	0x20000796
 8016ba4:	2000053c 	.word	0x2000053c
 8016ba8:	08000a54 	.word	0x08000a54
 8016bac:	200001b8 	.word	0x200001b8
 8016bb0:	20000144 	.word	0x20000144
 8016bb4:	20000c10 	.word	0x20000c10
 8016bb8:	08000a70 	.word	0x08000a70
 8016bbc:	200007a6 	.word	0x200007a6
 8016bc0:	2000029c 	.word	0x2000029c
 8016bc4:	200007a8 	.word	0x200007a8
 8016bc8:	200007af 	.word	0x200007af
 8016bcc:	20000560 	.word	0x20000560
 8016bd0:	2000688c 	.word	0x2000688c
 8016bd4:	20006884 	.word	0x20006884
 8016bd8:	20002868 	.word	0x20002868
	          else                   List[MenuNow[SN]].Flg |= UPD;
 8016bdc:	4b7d      	ldr	r3, [pc, #500]	; (8016dd4 <main+0x85c>)
 8016bde:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8016be2:	4a7d      	ldr	r2, [pc, #500]	; (8016dd8 <main+0x860>)
 8016be4:	00db      	lsls	r3, r3, #3
 8016be6:	4413      	add	r3, r2
 8016be8:	799b      	ldrb	r3, [r3, #6]
 8016bea:	4a7a      	ldr	r2, [pc, #488]	; (8016dd4 <main+0x85c>)
 8016bec:	f9b2 200c 	ldrsh.w	r2, [r2, #12]
 8016bf0:	4610      	mov	r0, r2
 8016bf2:	f043 0320 	orr.w	r3, r3, #32
 8016bf6:	b2d9      	uxtb	r1, r3
 8016bf8:	4a77      	ldr	r2, [pc, #476]	; (8016dd8 <main+0x860>)
 8016bfa:	00c3      	lsls	r3, r0, #3
 8016bfc:	4413      	add	r3, r2
 8016bfe:	460a      	mov	r2, r1
 8016c00:	719a      	strb	r2, [r3, #6]
	          if(MenuNow[Current] == SMPL_DPTH) List[SMPL_DPTH].Flg  |= UPD; // ������ȸ�����ʾ
 8016c02:	4b76      	ldr	r3, [pc, #472]	; (8016ddc <main+0x864>)
 8016c04:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016c08:	461a      	mov	r2, r3
 8016c0a:	4b72      	ldr	r3, [pc, #456]	; (8016dd4 <main+0x85c>)
 8016c0c:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8016c10:	2b09      	cmp	r3, #9
 8016c12:	d10a      	bne.n	8016c2a <main+0x6b2>
 8016c14:	4b70      	ldr	r3, [pc, #448]	; (8016dd8 <main+0x860>)
 8016c16:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 8016c1a:	f043 0320 	orr.w	r3, r3, #32
 8016c1e:	b2da      	uxtb	r2, r3
 8016c20:	4b6d      	ldr	r3, [pc, #436]	; (8016dd8 <main+0x860>)
 8016c22:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
	        break;
 8016c26:	f000 bcc7 	b.w	80175b8 <main+0x1040>
	          else if(Current == FN)           List[MenuNow[FN]].Flg |= UPD; // ָ�����ļ���д�������ʾ
 8016c2a:	4b6c      	ldr	r3, [pc, #432]	; (8016ddc <main+0x864>)
 8016c2c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016c30:	2b05      	cmp	r3, #5
 8016c32:	d114      	bne.n	8016c5e <main+0x6e6>
 8016c34:	4b67      	ldr	r3, [pc, #412]	; (8016dd4 <main+0x85c>)
 8016c36:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8016c3a:	4a67      	ldr	r2, [pc, #412]	; (8016dd8 <main+0x860>)
 8016c3c:	00db      	lsls	r3, r3, #3
 8016c3e:	4413      	add	r3, r2
 8016c40:	799b      	ldrb	r3, [r3, #6]
 8016c42:	4a64      	ldr	r2, [pc, #400]	; (8016dd4 <main+0x85c>)
 8016c44:	f9b2 200a 	ldrsh.w	r2, [r2, #10]
 8016c48:	4610      	mov	r0, r2
 8016c4a:	f043 0320 	orr.w	r3, r3, #32
 8016c4e:	b2d9      	uxtb	r1, r3
 8016c50:	4a61      	ldr	r2, [pc, #388]	; (8016dd8 <main+0x860>)
 8016c52:	00c3      	lsls	r3, r0, #3
 8016c54:	4413      	add	r3, r2
 8016c56:	460a      	mov	r2, r1
 8016c58:	719a      	strb	r2, [r3, #6]
	        break;
 8016c5a:	f000 bcad 	b.w	80175b8 <main+0x1040>
	          else                             List[MenuNow[ME]].Flg |= UPD; // ָ���Ĳ��β����������ʾ
 8016c5e:	4b5d      	ldr	r3, [pc, #372]	; (8016dd4 <main+0x85c>)
 8016c60:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8016c64:	4a5c      	ldr	r2, [pc, #368]	; (8016dd8 <main+0x860>)
 8016c66:	00db      	lsls	r3, r3, #3
 8016c68:	4413      	add	r3, r2
 8016c6a:	799b      	ldrb	r3, [r3, #6]
 8016c6c:	4a59      	ldr	r2, [pc, #356]	; (8016dd4 <main+0x85c>)
 8016c6e:	f9b2 2006 	ldrsh.w	r2, [r2, #6]
 8016c72:	4610      	mov	r0, r2
 8016c74:	f043 0320 	orr.w	r3, r3, #32
 8016c78:	b2d9      	uxtb	r1, r3
 8016c7a:	4a57      	ldr	r2, [pc, #348]	; (8016dd8 <main+0x860>)
 8016c7c:	00c3      	lsls	r3, r0, #3
 8016c7e:	4413      	add	r3, r2
 8016c80:	460a      	mov	r2, r1
 8016c82:	719a      	strb	r2, [r3, #6]
	        break;
 8016c84:	f000 bc98 	b.w	80175b8 <main+0x1040>

	      case KEYCODE_UP:
	        if (PopType & LIST_POP){
 8016c88:	4b55      	ldr	r3, [pc, #340]	; (8016de0 <main+0x868>)
 8016c8a:	781b      	ldrb	r3, [r3, #0]
 8016c8c:	f003 0302 	and.w	r3, r3, #2
 8016c90:	2b00      	cmp	r3, #0
 8016c92:	d03b      	beq.n	8016d0c <main+0x794>
	          if(MenuNow[Current] > MU_BEGN[Current]) MenuNow[Current]--;
 8016c94:	4b51      	ldr	r3, [pc, #324]	; (8016ddc <main+0x864>)
 8016c96:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016c9a:	461a      	mov	r2, r3
 8016c9c:	4b4d      	ldr	r3, [pc, #308]	; (8016dd4 <main+0x85c>)
 8016c9e:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8016ca2:	461a      	mov	r2, r3
 8016ca4:	4b4d      	ldr	r3, [pc, #308]	; (8016ddc <main+0x864>)
 8016ca6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016caa:	4619      	mov	r1, r3
 8016cac:	4b4d      	ldr	r3, [pc, #308]	; (8016de4 <main+0x86c>)
 8016cae:	5c5b      	ldrb	r3, [r3, r1]
 8016cb0:	429a      	cmp	r2, r3
 8016cb2:	dd0e      	ble.n	8016cd2 <main+0x75a>
 8016cb4:	4b49      	ldr	r3, [pc, #292]	; (8016ddc <main+0x864>)
 8016cb6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016cba:	4a46      	ldr	r2, [pc, #280]	; (8016dd4 <main+0x85c>)
 8016cbc:	f932 2013 	ldrsh.w	r2, [r2, r3, lsl #1]
 8016cc0:	b292      	uxth	r2, r2
 8016cc2:	3a01      	subs	r2, #1
 8016cc4:	b292      	uxth	r2, r2
 8016cc6:	b211      	sxth	r1, r2
 8016cc8:	4a42      	ldr	r2, [pc, #264]	; (8016dd4 <main+0x85c>)
 8016cca:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	          else                  MenuNow[Current] += M_ITEMS[Current]-1;
	        } else {
	          if (Current > 0) Current--;
	          else             Current = ST;
	        }
	        break;
 8016cce:	f000 bc73 	b.w	80175b8 <main+0x1040>
	          else                  MenuNow[Current] += M_ITEMS[Current]-1;
 8016cd2:	4b42      	ldr	r3, [pc, #264]	; (8016ddc <main+0x864>)
 8016cd4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016cd8:	461a      	mov	r2, r3
 8016cda:	4b3e      	ldr	r3, [pc, #248]	; (8016dd4 <main+0x85c>)
 8016cdc:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8016ce0:	b29a      	uxth	r2, r3
 8016ce2:	4b3e      	ldr	r3, [pc, #248]	; (8016ddc <main+0x864>)
 8016ce4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016ce8:	4619      	mov	r1, r3
 8016cea:	4b3f      	ldr	r3, [pc, #252]	; (8016de8 <main+0x870>)
 8016cec:	5c5b      	ldrb	r3, [r3, r1]
 8016cee:	b29b      	uxth	r3, r3
 8016cf0:	4413      	add	r3, r2
 8016cf2:	b29b      	uxth	r3, r3
 8016cf4:	3b01      	subs	r3, #1
 8016cf6:	b299      	uxth	r1, r3
 8016cf8:	4b38      	ldr	r3, [pc, #224]	; (8016ddc <main+0x864>)
 8016cfa:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016cfe:	461a      	mov	r2, r3
 8016d00:	b209      	sxth	r1, r1
 8016d02:	4b34      	ldr	r3, [pc, #208]	; (8016dd4 <main+0x85c>)
 8016d04:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
	        break;
 8016d08:	f000 bc56 	b.w	80175b8 <main+0x1040>
	          if (Current > 0) Current--;
 8016d0c:	4b33      	ldr	r3, [pc, #204]	; (8016ddc <main+0x864>)
 8016d0e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016d12:	2b00      	cmp	r3, #0
 8016d14:	dd0a      	ble.n	8016d2c <main+0x7b4>
 8016d16:	4b31      	ldr	r3, [pc, #196]	; (8016ddc <main+0x864>)
 8016d18:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016d1c:	b29b      	uxth	r3, r3
 8016d1e:	3b01      	subs	r3, #1
 8016d20:	b29b      	uxth	r3, r3
 8016d22:	b21a      	sxth	r2, r3
 8016d24:	4b2d      	ldr	r3, [pc, #180]	; (8016ddc <main+0x864>)
 8016d26:	801a      	strh	r2, [r3, #0]
	        break;
 8016d28:	f000 bc46 	b.w	80175b8 <main+0x1040>
	          else             Current = ST;
 8016d2c:	4b2b      	ldr	r3, [pc, #172]	; (8016ddc <main+0x864>)
 8016d2e:	2207      	movs	r2, #7
 8016d30:	801a      	strh	r2, [r3, #0]
	        break;
 8016d32:	f000 bc41 	b.w	80175b8 <main+0x1040>

	     case KEYCODE_DOWN:
	        if(PopType & LIST_POP){
 8016d36:	4b2a      	ldr	r3, [pc, #168]	; (8016de0 <main+0x868>)
 8016d38:	781b      	ldrb	r3, [r3, #0]
 8016d3a:	f003 0302 	and.w	r3, r3, #2
 8016d3e:	2b00      	cmp	r3, #0
 8016d40:	d034      	beq.n	8016dac <main+0x834>
	          MenuNow[Current]++;
 8016d42:	4b26      	ldr	r3, [pc, #152]	; (8016ddc <main+0x864>)
 8016d44:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016d48:	4a22      	ldr	r2, [pc, #136]	; (8016dd4 <main+0x85c>)
 8016d4a:	f932 2013 	ldrsh.w	r2, [r2, r3, lsl #1]
 8016d4e:	b292      	uxth	r2, r2
 8016d50:	3201      	adds	r2, #1
 8016d52:	b292      	uxth	r2, r2
 8016d54:	b211      	sxth	r1, r2
 8016d56:	4a1f      	ldr	r2, [pc, #124]	; (8016dd4 <main+0x85c>)
 8016d58:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	          if(MenuNow[Current] >=(MU_BEGN[Current]+M_ITEMS[Current])){
 8016d5c:	4b1f      	ldr	r3, [pc, #124]	; (8016ddc <main+0x864>)
 8016d5e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016d62:	461a      	mov	r2, r3
 8016d64:	4b1b      	ldr	r3, [pc, #108]	; (8016dd4 <main+0x85c>)
 8016d66:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8016d6a:	461a      	mov	r2, r3
 8016d6c:	4b1b      	ldr	r3, [pc, #108]	; (8016ddc <main+0x864>)
 8016d6e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016d72:	4619      	mov	r1, r3
 8016d74:	4b1b      	ldr	r3, [pc, #108]	; (8016de4 <main+0x86c>)
 8016d76:	5c5b      	ldrb	r3, [r3, r1]
 8016d78:	4619      	mov	r1, r3
 8016d7a:	4b18      	ldr	r3, [pc, #96]	; (8016ddc <main+0x864>)
 8016d7c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016d80:	4618      	mov	r0, r3
 8016d82:	4b19      	ldr	r3, [pc, #100]	; (8016de8 <main+0x870>)
 8016d84:	5c1b      	ldrb	r3, [r3, r0]
 8016d86:	440b      	add	r3, r1
 8016d88:	429a      	cmp	r2, r3
 8016d8a:	f2c0 840c 	blt.w	80175a6 <main+0x102e>
	            MenuNow[Current] = MU_BEGN[Current];
 8016d8e:	4b13      	ldr	r3, [pc, #76]	; (8016ddc <main+0x864>)
 8016d90:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016d94:	461a      	mov	r2, r3
 8016d96:	4b13      	ldr	r3, [pc, #76]	; (8016de4 <main+0x86c>)
 8016d98:	5c99      	ldrb	r1, [r3, r2]
 8016d9a:	4b10      	ldr	r3, [pc, #64]	; (8016ddc <main+0x864>)
 8016d9c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016da0:	461a      	mov	r2, r3
 8016da2:	b209      	sxth	r1, r1
 8016da4:	4b0b      	ldr	r3, [pc, #44]	; (8016dd4 <main+0x85c>)
 8016da6:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
	          }
	        } else {
	          if (Current < 7) Current++;
	          else             Current = YN;
	        }
	        break;
 8016daa:	e3fc      	b.n	80175a6 <main+0x102e>
	          if (Current < 7) Current++;
 8016dac:	4b0b      	ldr	r3, [pc, #44]	; (8016ddc <main+0x864>)
 8016dae:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016db2:	2b06      	cmp	r3, #6
 8016db4:	dc09      	bgt.n	8016dca <main+0x852>
 8016db6:	4b09      	ldr	r3, [pc, #36]	; (8016ddc <main+0x864>)
 8016db8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016dbc:	b29b      	uxth	r3, r3
 8016dbe:	3301      	adds	r3, #1
 8016dc0:	b29b      	uxth	r3, r3
 8016dc2:	b21a      	sxth	r2, r3
 8016dc4:	4b05      	ldr	r3, [pc, #20]	; (8016ddc <main+0x864>)
 8016dc6:	801a      	strh	r2, [r3, #0]
	        break;
 8016dc8:	e3ed      	b.n	80175a6 <main+0x102e>
	          else             Current = YN;
 8016dca:	4b04      	ldr	r3, [pc, #16]	; (8016ddc <main+0x864>)
 8016dcc:	2200      	movs	r2, #0
 8016dce:	801a      	strh	r2, [r3, #0]
	        break;
 8016dd0:	e3e9      	b.n	80175a6 <main+0x102e>
 8016dd2:	bf00      	nop
 8016dd4:	2000053c 	.word	0x2000053c
 8016dd8:	2000029c 	.word	0x2000029c
 8016ddc:	200007a6 	.word	0x200007a6
 8016de0:	20000796 	.word	0x20000796
 8016de4:	08001f40 	.word	0x08001f40
 8016de8:	08001f48 	.word	0x08001f48

	      case KEYCODE_LEFT:
	        if((Current==ST)&& !(PopType & LIST_POP))break;
 8016dec:	4bb9      	ldr	r3, [pc, #740]	; (80170d4 <main+0xb5c>)
 8016dee:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016df2:	2b07      	cmp	r3, #7
 8016df4:	d106      	bne.n	8016e04 <main+0x88c>
 8016df6:	4bb8      	ldr	r3, [pc, #736]	; (80170d8 <main+0xb60>)
 8016df8:	781b      	ldrb	r3, [r3, #0]
 8016dfa:	f003 0302 	and.w	r3, r3, #2
 8016dfe:	2b00      	cmp	r3, #0
 8016e00:	f000 83d3 	beq.w	80175aa <main+0x1032>
	        List[MenuNow[Current]].Flg |= UPD;  // ˢ�±��ǰԭ��ʾ��Ŀ����
 8016e04:	4bb3      	ldr	r3, [pc, #716]	; (80170d4 <main+0xb5c>)
 8016e06:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016e0a:	461a      	mov	r2, r3
 8016e0c:	4bb3      	ldr	r3, [pc, #716]	; (80170dc <main+0xb64>)
 8016e0e:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8016e12:	4ab3      	ldr	r2, [pc, #716]	; (80170e0 <main+0xb68>)
 8016e14:	00db      	lsls	r3, r3, #3
 8016e16:	4413      	add	r3, r2
 8016e18:	799b      	ldrb	r3, [r3, #6]
 8016e1a:	4aae      	ldr	r2, [pc, #696]	; (80170d4 <main+0xb5c>)
 8016e1c:	f9b2 2000 	ldrsh.w	r2, [r2]
 8016e20:	4611      	mov	r1, r2
 8016e22:	4aae      	ldr	r2, [pc, #696]	; (80170dc <main+0xb64>)
 8016e24:	f932 2011 	ldrsh.w	r2, [r2, r1, lsl #1]
 8016e28:	4610      	mov	r0, r2
 8016e2a:	f043 0320 	orr.w	r3, r3, #32
 8016e2e:	b2d9      	uxtb	r1, r3
 8016e30:	4aab      	ldr	r2, [pc, #684]	; (80170e0 <main+0xb68>)
 8016e32:	00c3      	lsls	r3, r0, #3
 8016e34:	4413      	add	r3, r2
 8016e36:	460a      	mov	r2, r1
 8016e38:	719a      	strb	r2, [r3, #6]
	        if(List[MenuNow[Current]].Val <=MIN[MenuNow[Current]]){
 8016e3a:	4ba6      	ldr	r3, [pc, #664]	; (80170d4 <main+0xb5c>)
 8016e3c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016e40:	461a      	mov	r2, r3
 8016e42:	4ba6      	ldr	r3, [pc, #664]	; (80170dc <main+0xb64>)
 8016e44:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8016e48:	4aa5      	ldr	r2, [pc, #660]	; (80170e0 <main+0xb68>)
 8016e4a:	00db      	lsls	r3, r3, #3
 8016e4c:	4413      	add	r3, r2
 8016e4e:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
 8016e52:	4ba0      	ldr	r3, [pc, #640]	; (80170d4 <main+0xb5c>)
 8016e54:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016e58:	4619      	mov	r1, r3
 8016e5a:	4ba0      	ldr	r3, [pc, #640]	; (80170dc <main+0xb64>)
 8016e5c:	f933 3011 	ldrsh.w	r3, [r3, r1, lsl #1]
 8016e60:	4619      	mov	r1, r3
 8016e62:	4ba0      	ldr	r3, [pc, #640]	; (80170e4 <main+0xb6c>)
 8016e64:	f933 3011 	ldrsh.w	r3, [r3, r1, lsl #1]
 8016e68:	429a      	cmp	r2, r3
 8016e6a:	dc73      	bgt.n	8016f54 <main+0x9dc>
	          if((MenuNow[Current] == COUPLING)||(MenuNow[Current] == YN_TYPE )||
 8016e6c:	4b99      	ldr	r3, [pc, #612]	; (80170d4 <main+0xb5c>)
 8016e6e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016e72:	461a      	mov	r2, r3
 8016e74:	4b99      	ldr	r3, [pc, #612]	; (80170dc <main+0xb64>)
 8016e76:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8016e7a:	2b01      	cmp	r3, #1
 8016e7c:	d051      	beq.n	8016f22 <main+0x9aa>
 8016e7e:	4b95      	ldr	r3, [pc, #596]	; (80170d4 <main+0xb5c>)
 8016e80:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016e84:	461a      	mov	r2, r3
 8016e86:	4b95      	ldr	r3, [pc, #596]	; (80170dc <main+0xb64>)
 8016e88:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8016e8c:	2b06      	cmp	r3, #6
 8016e8e:	d048      	beq.n	8016f22 <main+0x9aa>
	            (MenuNow[Current] == XN_TYPE )||(MenuNow[Current] == EXT_HIDE)||
 8016e90:	4b90      	ldr	r3, [pc, #576]	; (80170d4 <main+0xb5c>)
 8016e92:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016e96:	461a      	mov	r2, r3
 8016e98:	4b90      	ldr	r3, [pc, #576]	; (80170dc <main+0xb64>)
 8016e9a:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
	          if((MenuNow[Current] == COUPLING)||(MenuNow[Current] == YN_TYPE )||
 8016e9e:	2b0c      	cmp	r3, #12
 8016ea0:	d03f      	beq.n	8016f22 <main+0x9aa>
	            (MenuNow[Current] == XN_TYPE )||(MenuNow[Current] == EXT_HIDE)||
 8016ea2:	4b8c      	ldr	r3, [pc, #560]	; (80170d4 <main+0xb5c>)
 8016ea4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016ea8:	461a      	mov	r2, r3
 8016eaa:	4b8c      	ldr	r3, [pc, #560]	; (80170dc <main+0xb64>)
 8016eac:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8016eb0:	2b1c      	cmp	r3, #28
 8016eb2:	d036      	beq.n	8016f22 <main+0x9aa>
	            ( MenuNow[Current] == FITTRIGG)||(MenuNow[Current] == TR_MODE )||
 8016eb4:	4b87      	ldr	r3, [pc, #540]	; (80170d4 <main+0xb5c>)
 8016eb6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016eba:	461a      	mov	r2, r3
 8016ebc:	4b87      	ldr	r3, [pc, #540]	; (80170dc <main+0xb64>)
 8016ebe:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
	            (MenuNow[Current] == XN_TYPE )||(MenuNow[Current] == EXT_HIDE)||
 8016ec2:	2b0f      	cmp	r3, #15
 8016ec4:	d02d      	beq.n	8016f22 <main+0x9aa>
	            ( MenuNow[Current] == FITTRIGG)||(MenuNow[Current] == TR_MODE )||
 8016ec6:	4b83      	ldr	r3, [pc, #524]	; (80170d4 <main+0xb5c>)
 8016ec8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016ecc:	461a      	mov	r2, r3
 8016ece:	4b83      	ldr	r3, [pc, #524]	; (80170dc <main+0xb64>)
 8016ed0:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8016ed4:	2b0e      	cmp	r3, #14
 8016ed6:	d024      	beq.n	8016f22 <main+0x9aa>
	            ( MenuNow[Current] == SYNCMODE)||(MenuNow[Current] == EXT_REFN)||
 8016ed8:	4b7e      	ldr	r3, [pc, #504]	; (80170d4 <main+0xb5c>)
 8016eda:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016ede:	461a      	mov	r2, r3
 8016ee0:	4b7e      	ldr	r3, [pc, #504]	; (80170dc <main+0xb64>)
 8016ee2:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
	            ( MenuNow[Current] == FITTRIGG)||(MenuNow[Current] == TR_MODE )||
 8016ee6:	2b0d      	cmp	r3, #13
 8016ee8:	d01b      	beq.n	8016f22 <main+0x9aa>
	            ( MenuNow[Current] == SYNCMODE)||(MenuNow[Current] == EXT_REFN)||
 8016eea:	4b7a      	ldr	r3, [pc, #488]	; (80170d4 <main+0xb5c>)
 8016eec:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016ef0:	461a      	mov	r2, r3
 8016ef2:	4b7a      	ldr	r3, [pc, #488]	; (80170dc <main+0xb64>)
 8016ef4:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8016ef8:	2b1a      	cmp	r3, #26
 8016efa:	d012      	beq.n	8016f22 <main+0x9aa>
	            (MenuNow[Current] == PROBEATT)||(MenuNow[Current] == TPYE_OUT))
 8016efc:	4b75      	ldr	r3, [pc, #468]	; (80170d4 <main+0xb5c>)
 8016efe:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016f02:	461a      	mov	r2, r3
 8016f04:	4b75      	ldr	r3, [pc, #468]	; (80170dc <main+0xb64>)
 8016f06:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
	            ( MenuNow[Current] == SYNCMODE)||(MenuNow[Current] == EXT_REFN)||
 8016f0a:	2b02      	cmp	r3, #2
 8016f0c:	d009      	beq.n	8016f22 <main+0x9aa>
	            (MenuNow[Current] == PROBEATT)||(MenuNow[Current] == TPYE_OUT))
 8016f0e:	4b71      	ldr	r3, [pc, #452]	; (80170d4 <main+0xb5c>)
 8016f10:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016f14:	461a      	mov	r2, r3
 8016f16:	4b71      	ldr	r3, [pc, #452]	; (80170dc <main+0xb64>)
 8016f18:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8016f1c:	2b24      	cmp	r3, #36	; 0x24
 8016f1e:	f040 8129 	bne.w	8017174 <main+0xbfc>
	            List[MenuNow[Current]].Val =MAX[MenuNow[Current]] ;
 8016f22:	4b6c      	ldr	r3, [pc, #432]	; (80170d4 <main+0xb5c>)
 8016f24:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016f28:	461a      	mov	r2, r3
 8016f2a:	4b6c      	ldr	r3, [pc, #432]	; (80170dc <main+0xb64>)
 8016f2c:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8016f30:	461a      	mov	r2, r3
 8016f32:	4b68      	ldr	r3, [pc, #416]	; (80170d4 <main+0xb5c>)
 8016f34:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016f38:	4619      	mov	r1, r3
 8016f3a:	4b68      	ldr	r3, [pc, #416]	; (80170dc <main+0xb64>)
 8016f3c:	f933 3011 	ldrsh.w	r3, [r3, r1, lsl #1]
 8016f40:	4618      	mov	r0, r3
 8016f42:	4b69      	ldr	r3, [pc, #420]	; (80170e8 <main+0xb70>)
 8016f44:	f933 1012 	ldrsh.w	r1, [r3, r2, lsl #1]
 8016f48:	4a65      	ldr	r2, [pc, #404]	; (80170e0 <main+0xb68>)
 8016f4a:	00c3      	lsls	r3, r0, #3
 8016f4c:	4413      	add	r3, r2
 8016f4e:	460a      	mov	r2, r1
 8016f50:	809a      	strh	r2, [r3, #4]
 8016f52:	e10f      	b.n	8017174 <main+0xbfc>
	        } else {
	          if((MenuNow[Current] == VIEWPOSI)&&((List[MenuNow[Current]].Val) >=150 ))
 8016f54:	4b5f      	ldr	r3, [pc, #380]	; (80170d4 <main+0xb5c>)
 8016f56:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016f5a:	461a      	mov	r2, r3
 8016f5c:	4b5f      	ldr	r3, [pc, #380]	; (80170dc <main+0xb64>)
 8016f5e:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8016f62:	2b08      	cmp	r3, #8
 8016f64:	d12a      	bne.n	8016fbc <main+0xa44>
 8016f66:	4b5b      	ldr	r3, [pc, #364]	; (80170d4 <main+0xb5c>)
 8016f68:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016f6c:	461a      	mov	r2, r3
 8016f6e:	4b5b      	ldr	r3, [pc, #364]	; (80170dc <main+0xb64>)
 8016f70:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8016f74:	4a5a      	ldr	r2, [pc, #360]	; (80170e0 <main+0xb68>)
 8016f76:	00db      	lsls	r3, r3, #3
 8016f78:	4413      	add	r3, r2
 8016f7a:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8016f7e:	2b95      	cmp	r3, #149	; 0x95
 8016f80:	dd1c      	ble.n	8016fbc <main+0xa44>
	            List[MenuNow[Current]].Val-=25;
 8016f82:	4b54      	ldr	r3, [pc, #336]	; (80170d4 <main+0xb5c>)
 8016f84:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016f88:	461a      	mov	r2, r3
 8016f8a:	4b54      	ldr	r3, [pc, #336]	; (80170dc <main+0xb64>)
 8016f8c:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8016f90:	4a53      	ldr	r2, [pc, #332]	; (80170e0 <main+0xb68>)
 8016f92:	00db      	lsls	r3, r3, #3
 8016f94:	4413      	add	r3, r2
 8016f96:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8016f9a:	b29b      	uxth	r3, r3
 8016f9c:	3b19      	subs	r3, #25
 8016f9e:	b29a      	uxth	r2, r3
 8016fa0:	4b4c      	ldr	r3, [pc, #304]	; (80170d4 <main+0xb5c>)
 8016fa2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016fa6:	4619      	mov	r1, r3
 8016fa8:	4b4c      	ldr	r3, [pc, #304]	; (80170dc <main+0xb64>)
 8016faa:	f933 3011 	ldrsh.w	r3, [r3, r1, lsl #1]
 8016fae:	b211      	sxth	r1, r2
 8016fb0:	4a4b      	ldr	r2, [pc, #300]	; (80170e0 <main+0xb68>)
 8016fb2:	00db      	lsls	r3, r3, #3
 8016fb4:	4413      	add	r3, r2
 8016fb6:	460a      	mov	r2, r1
 8016fb8:	809a      	strh	r2, [r3, #4]
 8016fba:	e0ad      	b.n	8017118 <main+0xba0>
	          else{
	          //============5.04�޸������߳�����������========
	            if(MenuNow[Current] == THRESHOLD){
 8016fbc:	4b45      	ldr	r3, [pc, #276]	; (80170d4 <main+0xb5c>)
 8016fbe:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016fc2:	461a      	mov	r2, r3
 8016fc4:	4b45      	ldr	r3, [pc, #276]	; (80170dc <main+0xb64>)
 8016fc6:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8016fca:	2b10      	cmp	r3, #16
 8016fcc:	d121      	bne.n	8017012 <main+0xa9a>
	              if((List[V0_POSI].Val + List[THRESHOLD].Val) > 2)  //����������
 8016fce:	4b44      	ldr	r3, [pc, #272]	; (80170e0 <main+0xb68>)
 8016fd0:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 8016fd4:	461a      	mov	r2, r3
 8016fd6:	4b42      	ldr	r3, [pc, #264]	; (80170e0 <main+0xb68>)
 8016fd8:	f9b3 3084 	ldrsh.w	r3, [r3, #132]	; 0x84
 8016fdc:	4413      	add	r3, r2
 8016fde:	2b02      	cmp	r3, #2
 8016fe0:	f340 809a 	ble.w	8017118 <main+0xba0>
	                List[MenuNow[Current]].Val--;
 8016fe4:	4b3b      	ldr	r3, [pc, #236]	; (80170d4 <main+0xb5c>)
 8016fe6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016fea:	461a      	mov	r2, r3
 8016fec:	4b3b      	ldr	r3, [pc, #236]	; (80170dc <main+0xb64>)
 8016fee:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8016ff2:	461a      	mov	r2, r3
 8016ff4:	493a      	ldr	r1, [pc, #232]	; (80170e0 <main+0xb68>)
 8016ff6:	00d3      	lsls	r3, r2, #3
 8016ff8:	440b      	add	r3, r1
 8016ffa:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8016ffe:	b29b      	uxth	r3, r3
 8017000:	3b01      	subs	r3, #1
 8017002:	b29b      	uxth	r3, r3
 8017004:	b218      	sxth	r0, r3
 8017006:	4936      	ldr	r1, [pc, #216]	; (80170e0 <main+0xb68>)
 8017008:	00d3      	lsls	r3, r2, #3
 801700a:	440b      	add	r3, r1
 801700c:	4602      	mov	r2, r0
 801700e:	809a      	strh	r2, [r3, #4]
 8017010:	e082      	b.n	8017118 <main+0xba0>
	            }
	            else if(MenuNow[Current] == V0_POSI){
 8017012:	4b30      	ldr	r3, [pc, #192]	; (80170d4 <main+0xb5c>)
 8017014:	f9b3 3000 	ldrsh.w	r3, [r3]
 8017018:	461a      	mov	r2, r3
 801701a:	4b30      	ldr	r3, [pc, #192]	; (80170dc <main+0xb64>)
 801701c:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8017020:	2b03      	cmp	r3, #3
 8017022:	d134      	bne.n	801708e <main+0xb16>
	              if((List[V0_POSI].Val + List[THRESHOLD].Val) <2){
 8017024:	4b2e      	ldr	r3, [pc, #184]	; (80170e0 <main+0xb68>)
 8017026:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 801702a:	461a      	mov	r2, r3
 801702c:	4b2c      	ldr	r3, [pc, #176]	; (80170e0 <main+0xb68>)
 801702e:	f9b3 3084 	ldrsh.w	r3, [r3, #132]	; 0x84
 8017032:	4413      	add	r3, r2
 8017034:	2b01      	cmp	r3, #1
 8017036:	dc13      	bgt.n	8017060 <main+0xae8>
	                List[V0_POSI].Val--;
 8017038:	4b29      	ldr	r3, [pc, #164]	; (80170e0 <main+0xb68>)
 801703a:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 801703e:	b29b      	uxth	r3, r3
 8017040:	3b01      	subs	r3, #1
 8017042:	b29b      	uxth	r3, r3
 8017044:	b21a      	sxth	r2, r3
 8017046:	4b26      	ldr	r3, [pc, #152]	; (80170e0 <main+0xb68>)
 8017048:	839a      	strh	r2, [r3, #28]
	                List[THRESHOLD].Val++;
 801704a:	4b25      	ldr	r3, [pc, #148]	; (80170e0 <main+0xb68>)
 801704c:	f9b3 3084 	ldrsh.w	r3, [r3, #132]	; 0x84
 8017050:	b29b      	uxth	r3, r3
 8017052:	3301      	adds	r3, #1
 8017054:	b29b      	uxth	r3, r3
 8017056:	b21a      	sxth	r2, r3
 8017058:	4b21      	ldr	r3, [pc, #132]	; (80170e0 <main+0xb68>)
 801705a:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84
 801705e:	e05b      	b.n	8017118 <main+0xba0>
	              }else List[MenuNow[Current]].Val--;
 8017060:	4b1c      	ldr	r3, [pc, #112]	; (80170d4 <main+0xb5c>)
 8017062:	f9b3 3000 	ldrsh.w	r3, [r3]
 8017066:	461a      	mov	r2, r3
 8017068:	4b1c      	ldr	r3, [pc, #112]	; (80170dc <main+0xb64>)
 801706a:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 801706e:	461a      	mov	r2, r3
 8017070:	491b      	ldr	r1, [pc, #108]	; (80170e0 <main+0xb68>)
 8017072:	00d3      	lsls	r3, r2, #3
 8017074:	440b      	add	r3, r1
 8017076:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801707a:	b29b      	uxth	r3, r3
 801707c:	3b01      	subs	r3, #1
 801707e:	b29b      	uxth	r3, r3
 8017080:	b218      	sxth	r0, r3
 8017082:	4917      	ldr	r1, [pc, #92]	; (80170e0 <main+0xb68>)
 8017084:	00d3      	lsls	r3, r2, #3
 8017086:	440b      	add	r3, r1
 8017088:	4602      	mov	r2, r0
 801708a:	809a      	strh	r2, [r3, #4]
 801708c:	e044      	b.n	8017118 <main+0xba0>
	            }
	            else if((MenuNow[Current] ==V1_POSI) && (List[V1_POSI].Val <= List[V2_POSI].Val))
 801708e:	4b11      	ldr	r3, [pc, #68]	; (80170d4 <main+0xb5c>)
 8017090:	f9b3 3000 	ldrsh.w	r3, [r3]
 8017094:	461a      	mov	r2, r3
 8017096:	4b11      	ldr	r3, [pc, #68]	; (80170dc <main+0xb64>)
 8017098:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 801709c:	2b04      	cmp	r3, #4
 801709e:	d125      	bne.n	80170ec <main+0xb74>
 80170a0:	4b0f      	ldr	r3, [pc, #60]	; (80170e0 <main+0xb68>)
 80170a2:	f9b3 2024 	ldrsh.w	r2, [r3, #36]	; 0x24
 80170a6:	4b0e      	ldr	r3, [pc, #56]	; (80170e0 <main+0xb68>)
 80170a8:	f9b3 302c 	ldrsh.w	r3, [r3, #44]	; 0x2c
 80170ac:	429a      	cmp	r2, r3
 80170ae:	dc1d      	bgt.n	80170ec <main+0xb74>
	            List[MenuNow[Current]].Val=List[V2_POSI].Val;
 80170b0:	4b08      	ldr	r3, [pc, #32]	; (80170d4 <main+0xb5c>)
 80170b2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80170b6:	461a      	mov	r2, r3
 80170b8:	4b08      	ldr	r3, [pc, #32]	; (80170dc <main+0xb64>)
 80170ba:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 80170be:	4618      	mov	r0, r3
 80170c0:	4b07      	ldr	r3, [pc, #28]	; (80170e0 <main+0xb68>)
 80170c2:	f9b3 102c 	ldrsh.w	r1, [r3, #44]	; 0x2c
 80170c6:	4a06      	ldr	r2, [pc, #24]	; (80170e0 <main+0xb68>)
 80170c8:	00c3      	lsls	r3, r0, #3
 80170ca:	4413      	add	r3, r2
 80170cc:	460a      	mov	r2, r1
 80170ce:	809a      	strh	r2, [r3, #4]
 80170d0:	e022      	b.n	8017118 <main+0xba0>
 80170d2:	bf00      	nop
 80170d4:	200007a6 	.word	0x200007a6
 80170d8:	20000796 	.word	0x20000796
 80170dc:	2000053c 	.word	0x2000053c
 80170e0:	2000029c 	.word	0x2000029c
 80170e4:	08002214 	.word	0x08002214
 80170e8:	080021b8 	.word	0x080021b8
	            else List[MenuNow[Current]].Val--;
 80170ec:	4bb7      	ldr	r3, [pc, #732]	; (80173cc <main+0xe54>)
 80170ee:	f9b3 3000 	ldrsh.w	r3, [r3]
 80170f2:	461a      	mov	r2, r3
 80170f4:	4bb6      	ldr	r3, [pc, #728]	; (80173d0 <main+0xe58>)
 80170f6:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 80170fa:	461a      	mov	r2, r3
 80170fc:	49b5      	ldr	r1, [pc, #724]	; (80173d4 <main+0xe5c>)
 80170fe:	00d3      	lsls	r3, r2, #3
 8017100:	440b      	add	r3, r1
 8017102:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8017106:	b29b      	uxth	r3, r3
 8017108:	3b01      	subs	r3, #1
 801710a:	b29b      	uxth	r3, r3
 801710c:	b218      	sxth	r0, r3
 801710e:	49b1      	ldr	r1, [pc, #708]	; (80173d4 <main+0xe5c>)
 8017110:	00d3      	lsls	r3, r2, #3
 8017112:	440b      	add	r3, r1
 8017114:	4602      	mov	r2, r0
 8017116:	809a      	strh	r2, [r3, #4]
	          }
	          //==============================================
	            if(MenuNow[Current] == SMPL_DPTH){
 8017118:	4bac      	ldr	r3, [pc, #688]	; (80173cc <main+0xe54>)
 801711a:	f9b3 3000 	ldrsh.w	r3, [r3]
 801711e:	461a      	mov	r2, r3
 8017120:	4bab      	ldr	r3, [pc, #684]	; (80173d0 <main+0xe58>)
 8017122:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8017126:	2b09      	cmp	r3, #9
 8017128:	d103      	bne.n	8017132 <main+0xbba>
	              List[VIEWPOSI].Val=1 ;
 801712a:	4baa      	ldr	r3, [pc, #680]	; (80173d4 <main+0xe5c>)
 801712c:	2201      	movs	r2, #1
 801712e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
	           }
	            if((MenuNow[Current] ==T2_POSI) && (List[T2_POSI].Val <= List[T1_POSI].Val))
 8017132:	4ba6      	ldr	r3, [pc, #664]	; (80173cc <main+0xe54>)
 8017134:	f9b3 3000 	ldrsh.w	r3, [r3]
 8017138:	461a      	mov	r2, r3
 801713a:	4ba5      	ldr	r3, [pc, #660]	; (80173d0 <main+0xe58>)
 801713c:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8017140:	2b0b      	cmp	r3, #11
 8017142:	d117      	bne.n	8017174 <main+0xbfc>
 8017144:	4ba3      	ldr	r3, [pc, #652]	; (80173d4 <main+0xe5c>)
 8017146:	f9b3 205c 	ldrsh.w	r2, [r3, #92]	; 0x5c
 801714a:	4ba2      	ldr	r3, [pc, #648]	; (80173d4 <main+0xe5c>)
 801714c:	f9b3 3054 	ldrsh.w	r3, [r3, #84]	; 0x54
 8017150:	429a      	cmp	r2, r3
 8017152:	dc0f      	bgt.n	8017174 <main+0xbfc>
	              List[MenuNow[Current]].Val=List[T1_POSI].Val;
 8017154:	4b9d      	ldr	r3, [pc, #628]	; (80173cc <main+0xe54>)
 8017156:	f9b3 3000 	ldrsh.w	r3, [r3]
 801715a:	461a      	mov	r2, r3
 801715c:	4b9c      	ldr	r3, [pc, #624]	; (80173d0 <main+0xe58>)
 801715e:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8017162:	4618      	mov	r0, r3
 8017164:	4b9b      	ldr	r3, [pc, #620]	; (80173d4 <main+0xe5c>)
 8017166:	f9b3 1054 	ldrsh.w	r1, [r3, #84]	; 0x54
 801716a:	4a9a      	ldr	r2, [pc, #616]	; (80173d4 <main+0xe5c>)
 801716c:	00c3      	lsls	r3, r0, #3
 801716e:	4413      	add	r3, r2
 8017170:	460a      	mov	r2, r1
 8017172:	809a      	strh	r2, [r3, #4]
	        }
	        if(Current == TRG) Status &= ~STOP; // �ı�ͬ��ģʽ��ָ�����״̬
 8017174:	4b95      	ldr	r3, [pc, #596]	; (80173cc <main+0xe54>)
 8017176:	f9b3 3000 	ldrsh.w	r3, [r3]
 801717a:	2b02      	cmp	r3, #2
 801717c:	f040 8217 	bne.w	80175ae <main+0x1036>
 8017180:	4b95      	ldr	r3, [pc, #596]	; (80173d8 <main+0xe60>)
 8017182:	f9b3 3000 	ldrsh.w	r3, [r3]
 8017186:	f023 0301 	bic.w	r3, r3, #1
 801718a:	b21a      	sxth	r2, r3
 801718c:	4b92      	ldr	r3, [pc, #584]	; (80173d8 <main+0xe60>)
 801718e:	801a      	strh	r2, [r3, #0]
	        break;
 8017190:	e20d      	b.n	80175ae <main+0x1036>

	      case KEYCODE_RIGHT:
	        if((Current==ST)&& !(PopType & LIST_POP))break;
 8017192:	4b8e      	ldr	r3, [pc, #568]	; (80173cc <main+0xe54>)
 8017194:	f9b3 3000 	ldrsh.w	r3, [r3]
 8017198:	2b07      	cmp	r3, #7
 801719a:	d106      	bne.n	80171aa <main+0xc32>
 801719c:	4b8f      	ldr	r3, [pc, #572]	; (80173dc <main+0xe64>)
 801719e:	781b      	ldrb	r3, [r3, #0]
 80171a0:	f003 0302 	and.w	r3, r3, #2
 80171a4:	2b00      	cmp	r3, #0
 80171a6:	f000 8204 	beq.w	80175b2 <main+0x103a>
	        List[MenuNow[Current]].Flg |= UPD;  // ˢ�±��ǰԭ��ʾ��Ŀ����
 80171aa:	4b88      	ldr	r3, [pc, #544]	; (80173cc <main+0xe54>)
 80171ac:	f9b3 3000 	ldrsh.w	r3, [r3]
 80171b0:	461a      	mov	r2, r3
 80171b2:	4b87      	ldr	r3, [pc, #540]	; (80173d0 <main+0xe58>)
 80171b4:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 80171b8:	4a86      	ldr	r2, [pc, #536]	; (80173d4 <main+0xe5c>)
 80171ba:	00db      	lsls	r3, r3, #3
 80171bc:	4413      	add	r3, r2
 80171be:	799b      	ldrb	r3, [r3, #6]
 80171c0:	4a82      	ldr	r2, [pc, #520]	; (80173cc <main+0xe54>)
 80171c2:	f9b2 2000 	ldrsh.w	r2, [r2]
 80171c6:	4611      	mov	r1, r2
 80171c8:	4a81      	ldr	r2, [pc, #516]	; (80173d0 <main+0xe58>)
 80171ca:	f932 2011 	ldrsh.w	r2, [r2, r1, lsl #1]
 80171ce:	4610      	mov	r0, r2
 80171d0:	f043 0320 	orr.w	r3, r3, #32
 80171d4:	b2d9      	uxtb	r1, r3
 80171d6:	4a7f      	ldr	r2, [pc, #508]	; (80173d4 <main+0xe5c>)
 80171d8:	00c3      	lsls	r3, r0, #3
 80171da:	4413      	add	r3, r2
 80171dc:	460a      	mov	r2, r1
 80171de:	719a      	strb	r2, [r3, #6]
	        if(List[MenuNow[Current]].Val >=MAX[MenuNow[Current]] ){
 80171e0:	4b7a      	ldr	r3, [pc, #488]	; (80173cc <main+0xe54>)
 80171e2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80171e6:	461a      	mov	r2, r3
 80171e8:	4b79      	ldr	r3, [pc, #484]	; (80173d0 <main+0xe58>)
 80171ea:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 80171ee:	4a79      	ldr	r2, [pc, #484]	; (80173d4 <main+0xe5c>)
 80171f0:	00db      	lsls	r3, r3, #3
 80171f2:	4413      	add	r3, r2
 80171f4:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
 80171f8:	4b74      	ldr	r3, [pc, #464]	; (80173cc <main+0xe54>)
 80171fa:	f9b3 3000 	ldrsh.w	r3, [r3]
 80171fe:	4619      	mov	r1, r3
 8017200:	4b73      	ldr	r3, [pc, #460]	; (80173d0 <main+0xe58>)
 8017202:	f933 3011 	ldrsh.w	r3, [r3, r1, lsl #1]
 8017206:	4619      	mov	r1, r3
 8017208:	4b75      	ldr	r3, [pc, #468]	; (80173e0 <main+0xe68>)
 801720a:	f933 3011 	ldrsh.w	r3, [r3, r1, lsl #1]
 801720e:	429a      	cmp	r2, r3
 8017210:	db73      	blt.n	80172fa <main+0xd82>
	          if((MenuNow[Current] == COUPLING)||(MenuNow[Current] == YN_TYPE )||
 8017212:	4b6e      	ldr	r3, [pc, #440]	; (80173cc <main+0xe54>)
 8017214:	f9b3 3000 	ldrsh.w	r3, [r3]
 8017218:	461a      	mov	r2, r3
 801721a:	4b6d      	ldr	r3, [pc, #436]	; (80173d0 <main+0xe58>)
 801721c:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8017220:	2b01      	cmp	r3, #1
 8017222:	d051      	beq.n	80172c8 <main+0xd50>
 8017224:	4b69      	ldr	r3, [pc, #420]	; (80173cc <main+0xe54>)
 8017226:	f9b3 3000 	ldrsh.w	r3, [r3]
 801722a:	461a      	mov	r2, r3
 801722c:	4b68      	ldr	r3, [pc, #416]	; (80173d0 <main+0xe58>)
 801722e:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8017232:	2b06      	cmp	r3, #6
 8017234:	d048      	beq.n	80172c8 <main+0xd50>
	            (MenuNow[Current] == XN_TYPE )||(MenuNow[Current] == EXT_HIDE)||
 8017236:	4b65      	ldr	r3, [pc, #404]	; (80173cc <main+0xe54>)
 8017238:	f9b3 3000 	ldrsh.w	r3, [r3]
 801723c:	461a      	mov	r2, r3
 801723e:	4b64      	ldr	r3, [pc, #400]	; (80173d0 <main+0xe58>)
 8017240:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
	          if((MenuNow[Current] == COUPLING)||(MenuNow[Current] == YN_TYPE )||
 8017244:	2b0c      	cmp	r3, #12
 8017246:	d03f      	beq.n	80172c8 <main+0xd50>
	            (MenuNow[Current] == XN_TYPE )||(MenuNow[Current] == EXT_HIDE)||
 8017248:	4b60      	ldr	r3, [pc, #384]	; (80173cc <main+0xe54>)
 801724a:	f9b3 3000 	ldrsh.w	r3, [r3]
 801724e:	461a      	mov	r2, r3
 8017250:	4b5f      	ldr	r3, [pc, #380]	; (80173d0 <main+0xe58>)
 8017252:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8017256:	2b1c      	cmp	r3, #28
 8017258:	d036      	beq.n	80172c8 <main+0xd50>
	            ( MenuNow[Current] == FITTRIGG)||(MenuNow[Current] == TR_MODE )||
 801725a:	4b5c      	ldr	r3, [pc, #368]	; (80173cc <main+0xe54>)
 801725c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8017260:	461a      	mov	r2, r3
 8017262:	4b5b      	ldr	r3, [pc, #364]	; (80173d0 <main+0xe58>)
 8017264:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
	            (MenuNow[Current] == XN_TYPE )||(MenuNow[Current] == EXT_HIDE)||
 8017268:	2b0f      	cmp	r3, #15
 801726a:	d02d      	beq.n	80172c8 <main+0xd50>
	            ( MenuNow[Current] == FITTRIGG)||(MenuNow[Current] == TR_MODE )||
 801726c:	4b57      	ldr	r3, [pc, #348]	; (80173cc <main+0xe54>)
 801726e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8017272:	461a      	mov	r2, r3
 8017274:	4b56      	ldr	r3, [pc, #344]	; (80173d0 <main+0xe58>)
 8017276:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 801727a:	2b0e      	cmp	r3, #14
 801727c:	d024      	beq.n	80172c8 <main+0xd50>
	            ( MenuNow[Current] == SYNCMODE)||(MenuNow[Current] == EXT_REFN)||
 801727e:	4b53      	ldr	r3, [pc, #332]	; (80173cc <main+0xe54>)
 8017280:	f9b3 3000 	ldrsh.w	r3, [r3]
 8017284:	461a      	mov	r2, r3
 8017286:	4b52      	ldr	r3, [pc, #328]	; (80173d0 <main+0xe58>)
 8017288:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
	            ( MenuNow[Current] == FITTRIGG)||(MenuNow[Current] == TR_MODE )||
 801728c:	2b0d      	cmp	r3, #13
 801728e:	d01b      	beq.n	80172c8 <main+0xd50>
	            ( MenuNow[Current] == SYNCMODE)||(MenuNow[Current] == EXT_REFN)||
 8017290:	4b4e      	ldr	r3, [pc, #312]	; (80173cc <main+0xe54>)
 8017292:	f9b3 3000 	ldrsh.w	r3, [r3]
 8017296:	461a      	mov	r2, r3
 8017298:	4b4d      	ldr	r3, [pc, #308]	; (80173d0 <main+0xe58>)
 801729a:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 801729e:	2b1a      	cmp	r3, #26
 80172a0:	d012      	beq.n	80172c8 <main+0xd50>
	            (MenuNow[Current] == PROBEATT)||(MenuNow[Current] == TPYE_OUT))
 80172a2:	4b4a      	ldr	r3, [pc, #296]	; (80173cc <main+0xe54>)
 80172a4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80172a8:	461a      	mov	r2, r3
 80172aa:	4b49      	ldr	r3, [pc, #292]	; (80173d0 <main+0xe58>)
 80172ac:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
	            ( MenuNow[Current] == SYNCMODE)||(MenuNow[Current] == EXT_REFN)||
 80172b0:	2b02      	cmp	r3, #2
 80172b2:	d009      	beq.n	80172c8 <main+0xd50>
	            (MenuNow[Current] == PROBEATT)||(MenuNow[Current] == TPYE_OUT))
 80172b4:	4b45      	ldr	r3, [pc, #276]	; (80173cc <main+0xe54>)
 80172b6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80172ba:	461a      	mov	r2, r3
 80172bc:	4b44      	ldr	r3, [pc, #272]	; (80173d0 <main+0xe58>)
 80172be:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 80172c2:	2b24      	cmp	r3, #36	; 0x24
 80172c4:	f040 8154 	bne.w	8017570 <main+0xff8>
	            List[MenuNow[Current]].Val =MIN[MenuNow[Current]] ;
 80172c8:	4b40      	ldr	r3, [pc, #256]	; (80173cc <main+0xe54>)
 80172ca:	f9b3 3000 	ldrsh.w	r3, [r3]
 80172ce:	461a      	mov	r2, r3
 80172d0:	4b3f      	ldr	r3, [pc, #252]	; (80173d0 <main+0xe58>)
 80172d2:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 80172d6:	461a      	mov	r2, r3
 80172d8:	4b3c      	ldr	r3, [pc, #240]	; (80173cc <main+0xe54>)
 80172da:	f9b3 3000 	ldrsh.w	r3, [r3]
 80172de:	4619      	mov	r1, r3
 80172e0:	4b3b      	ldr	r3, [pc, #236]	; (80173d0 <main+0xe58>)
 80172e2:	f933 3011 	ldrsh.w	r3, [r3, r1, lsl #1]
 80172e6:	4618      	mov	r0, r3
 80172e8:	4b3e      	ldr	r3, [pc, #248]	; (80173e4 <main+0xe6c>)
 80172ea:	f933 1012 	ldrsh.w	r1, [r3, r2, lsl #1]
 80172ee:	4a39      	ldr	r2, [pc, #228]	; (80173d4 <main+0xe5c>)
 80172f0:	00c3      	lsls	r3, r0, #3
 80172f2:	4413      	add	r3, r2
 80172f4:	460a      	mov	r2, r1
 80172f6:	809a      	strh	r2, [r3, #4]
 80172f8:	e13a      	b.n	8017570 <main+0xff8>
	        } else {
	            if(MenuNow[Current] == VIEWPOSI)
 80172fa:	4b34      	ldr	r3, [pc, #208]	; (80173cc <main+0xe54>)
 80172fc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8017300:	461a      	mov	r2, r3
 8017302:	4b33      	ldr	r3, [pc, #204]	; (80173d0 <main+0xe58>)
 8017304:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8017308:	2b08      	cmp	r3, #8
 801730a:	d16f      	bne.n	80173ec <main+0xe74>
	            {
	              if(List[MenuNow[Current]].Val <(DEPTH[List[SMPL_DPTH].Val]-(350-List[SMPL_DPTH].Val)))
 801730c:	4b2f      	ldr	r3, [pc, #188]	; (80173cc <main+0xe54>)
 801730e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8017312:	461a      	mov	r2, r3
 8017314:	4b2e      	ldr	r3, [pc, #184]	; (80173d0 <main+0xe58>)
 8017316:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 801731a:	4a2e      	ldr	r2, [pc, #184]	; (80173d4 <main+0xe5c>)
 801731c:	00db      	lsls	r3, r3, #3
 801731e:	4413      	add	r3, r2
 8017320:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8017324:	461a      	mov	r2, r3
 8017326:	4b2b      	ldr	r3, [pc, #172]	; (80173d4 <main+0xe5c>)
 8017328:	f9b3 304c 	ldrsh.w	r3, [r3, #76]	; 0x4c
 801732c:	4619      	mov	r1, r3
 801732e:	4b2e      	ldr	r3, [pc, #184]	; (80173e8 <main+0xe70>)
 8017330:	f933 3011 	ldrsh.w	r3, [r3, r1, lsl #1]
 8017334:	4619      	mov	r1, r3
 8017336:	4b27      	ldr	r3, [pc, #156]	; (80173d4 <main+0xe5c>)
 8017338:	f9b3 304c 	ldrsh.w	r3, [r3, #76]	; 0x4c
 801733c:	f5c3 73af 	rsb	r3, r3, #350	; 0x15e
 8017340:	1acb      	subs	r3, r1, r3
 8017342:	429a      	cmp	r2, r3
 8017344:	f280 80f3 	bge.w	801752e <main+0xfb6>
	              {
	                if(List[MenuNow[Current]].Val >150 )
 8017348:	4b20      	ldr	r3, [pc, #128]	; (80173cc <main+0xe54>)
 801734a:	f9b3 3000 	ldrsh.w	r3, [r3]
 801734e:	461a      	mov	r2, r3
 8017350:	4b1f      	ldr	r3, [pc, #124]	; (80173d0 <main+0xe58>)
 8017352:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8017356:	4a1f      	ldr	r2, [pc, #124]	; (80173d4 <main+0xe5c>)
 8017358:	00db      	lsls	r3, r3, #3
 801735a:	4413      	add	r3, r2
 801735c:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8017360:	2b96      	cmp	r3, #150	; 0x96
 8017362:	dd1c      	ble.n	801739e <main+0xe26>
	                  List[MenuNow[Current]].Val += 25;
 8017364:	4b19      	ldr	r3, [pc, #100]	; (80173cc <main+0xe54>)
 8017366:	f9b3 3000 	ldrsh.w	r3, [r3]
 801736a:	461a      	mov	r2, r3
 801736c:	4b18      	ldr	r3, [pc, #96]	; (80173d0 <main+0xe58>)
 801736e:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8017372:	4a18      	ldr	r2, [pc, #96]	; (80173d4 <main+0xe5c>)
 8017374:	00db      	lsls	r3, r3, #3
 8017376:	4413      	add	r3, r2
 8017378:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801737c:	b29b      	uxth	r3, r3
 801737e:	3319      	adds	r3, #25
 8017380:	b29a      	uxth	r2, r3
 8017382:	4b12      	ldr	r3, [pc, #72]	; (80173cc <main+0xe54>)
 8017384:	f9b3 3000 	ldrsh.w	r3, [r3]
 8017388:	4619      	mov	r1, r3
 801738a:	4b11      	ldr	r3, [pc, #68]	; (80173d0 <main+0xe58>)
 801738c:	f933 3011 	ldrsh.w	r3, [r3, r1, lsl #1]
 8017390:	b211      	sxth	r1, r2
 8017392:	4a10      	ldr	r2, [pc, #64]	; (80173d4 <main+0xe5c>)
 8017394:	00db      	lsls	r3, r3, #3
 8017396:	4413      	add	r3, r2
 8017398:	460a      	mov	r2, r1
 801739a:	809a      	strh	r2, [r3, #4]
 801739c:	e0c7      	b.n	801752e <main+0xfb6>
	                else
	                  List[MenuNow[Current]].Val++;
 801739e:	4b0b      	ldr	r3, [pc, #44]	; (80173cc <main+0xe54>)
 80173a0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80173a4:	461a      	mov	r2, r3
 80173a6:	4b0a      	ldr	r3, [pc, #40]	; (80173d0 <main+0xe58>)
 80173a8:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 80173ac:	461a      	mov	r2, r3
 80173ae:	4909      	ldr	r1, [pc, #36]	; (80173d4 <main+0xe5c>)
 80173b0:	00d3      	lsls	r3, r2, #3
 80173b2:	440b      	add	r3, r1
 80173b4:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80173b8:	b29b      	uxth	r3, r3
 80173ba:	3301      	adds	r3, #1
 80173bc:	b29b      	uxth	r3, r3
 80173be:	b218      	sxth	r0, r3
 80173c0:	4904      	ldr	r1, [pc, #16]	; (80173d4 <main+0xe5c>)
 80173c2:	00d3      	lsls	r3, r2, #3
 80173c4:	440b      	add	r3, r1
 80173c6:	4602      	mov	r2, r0
 80173c8:	809a      	strh	r2, [r3, #4]
 80173ca:	e0b0      	b.n	801752e <main+0xfb6>
 80173cc:	200007a6 	.word	0x200007a6
 80173d0:	2000053c 	.word	0x2000053c
 80173d4:	2000029c 	.word	0x2000029c
 80173d8:	200007a8 	.word	0x200007a8
 80173dc:	20000796 	.word	0x20000796
 80173e0:	080021b8 	.word	0x080021b8
 80173e4:	08002214 	.word	0x08002214
 80173e8:	08002270 	.word	0x08002270
	              }
	            }
	            else{
	              //============4.27�޸������߳�����������========
	              if(MenuNow[Current] == THRESHOLD){
 80173ec:	4b8d      	ldr	r3, [pc, #564]	; (8017624 <main+0x10ac>)
 80173ee:	f9b3 3000 	ldrsh.w	r3, [r3]
 80173f2:	461a      	mov	r2, r3
 80173f4:	4b8c      	ldr	r3, [pc, #560]	; (8017628 <main+0x10b0>)
 80173f6:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 80173fa:	2b10      	cmp	r3, #16
 80173fc:	d121      	bne.n	8017442 <main+0xeca>
	                if((List[V0_POSI].Val + List[THRESHOLD].Val) < 198)
 80173fe:	4b8b      	ldr	r3, [pc, #556]	; (801762c <main+0x10b4>)
 8017400:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 8017404:	461a      	mov	r2, r3
 8017406:	4b89      	ldr	r3, [pc, #548]	; (801762c <main+0x10b4>)
 8017408:	f9b3 3084 	ldrsh.w	r3, [r3, #132]	; 0x84
 801740c:	4413      	add	r3, r2
 801740e:	2bc5      	cmp	r3, #197	; 0xc5
 8017410:	f300 808d 	bgt.w	801752e <main+0xfb6>
	                 List[MenuNow[Current]].Val++;
 8017414:	4b83      	ldr	r3, [pc, #524]	; (8017624 <main+0x10ac>)
 8017416:	f9b3 3000 	ldrsh.w	r3, [r3]
 801741a:	461a      	mov	r2, r3
 801741c:	4b82      	ldr	r3, [pc, #520]	; (8017628 <main+0x10b0>)
 801741e:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8017422:	461a      	mov	r2, r3
 8017424:	4981      	ldr	r1, [pc, #516]	; (801762c <main+0x10b4>)
 8017426:	00d3      	lsls	r3, r2, #3
 8017428:	440b      	add	r3, r1
 801742a:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801742e:	b29b      	uxth	r3, r3
 8017430:	3301      	adds	r3, #1
 8017432:	b29b      	uxth	r3, r3
 8017434:	b218      	sxth	r0, r3
 8017436:	497d      	ldr	r1, [pc, #500]	; (801762c <main+0x10b4>)
 8017438:	00d3      	lsls	r3, r2, #3
 801743a:	440b      	add	r3, r1
 801743c:	4602      	mov	r2, r0
 801743e:	809a      	strh	r2, [r3, #4]
 8017440:	e075      	b.n	801752e <main+0xfb6>
	              }
	              else if(MenuNow[Current] == V0_POSI){
 8017442:	4b78      	ldr	r3, [pc, #480]	; (8017624 <main+0x10ac>)
 8017444:	f9b3 3000 	ldrsh.w	r3, [r3]
 8017448:	461a      	mov	r2, r3
 801744a:	4b77      	ldr	r3, [pc, #476]	; (8017628 <main+0x10b0>)
 801744c:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8017450:	2b03      	cmp	r3, #3
 8017452:	d134      	bne.n	80174be <main+0xf46>
	                if((List[V0_POSI].Val + List[THRESHOLD].Val) > 198){
 8017454:	4b75      	ldr	r3, [pc, #468]	; (801762c <main+0x10b4>)
 8017456:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 801745a:	461a      	mov	r2, r3
 801745c:	4b73      	ldr	r3, [pc, #460]	; (801762c <main+0x10b4>)
 801745e:	f9b3 3084 	ldrsh.w	r3, [r3, #132]	; 0x84
 8017462:	4413      	add	r3, r2
 8017464:	2bc6      	cmp	r3, #198	; 0xc6
 8017466:	dd13      	ble.n	8017490 <main+0xf18>
	                  List[V0_POSI].Val++;
 8017468:	4b70      	ldr	r3, [pc, #448]	; (801762c <main+0x10b4>)
 801746a:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 801746e:	b29b      	uxth	r3, r3
 8017470:	3301      	adds	r3, #1
 8017472:	b29b      	uxth	r3, r3
 8017474:	b21a      	sxth	r2, r3
 8017476:	4b6d      	ldr	r3, [pc, #436]	; (801762c <main+0x10b4>)
 8017478:	839a      	strh	r2, [r3, #28]
	                  List[THRESHOLD].Val--;
 801747a:	4b6c      	ldr	r3, [pc, #432]	; (801762c <main+0x10b4>)
 801747c:	f9b3 3084 	ldrsh.w	r3, [r3, #132]	; 0x84
 8017480:	b29b      	uxth	r3, r3
 8017482:	3b01      	subs	r3, #1
 8017484:	b29b      	uxth	r3, r3
 8017486:	b21a      	sxth	r2, r3
 8017488:	4b68      	ldr	r3, [pc, #416]	; (801762c <main+0x10b4>)
 801748a:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84
 801748e:	e04e      	b.n	801752e <main+0xfb6>
	                }else List[MenuNow[Current]].Val++;
 8017490:	4b64      	ldr	r3, [pc, #400]	; (8017624 <main+0x10ac>)
 8017492:	f9b3 3000 	ldrsh.w	r3, [r3]
 8017496:	461a      	mov	r2, r3
 8017498:	4b63      	ldr	r3, [pc, #396]	; (8017628 <main+0x10b0>)
 801749a:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 801749e:	461a      	mov	r2, r3
 80174a0:	4962      	ldr	r1, [pc, #392]	; (801762c <main+0x10b4>)
 80174a2:	00d3      	lsls	r3, r2, #3
 80174a4:	440b      	add	r3, r1
 80174a6:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80174aa:	b29b      	uxth	r3, r3
 80174ac:	3301      	adds	r3, #1
 80174ae:	b29b      	uxth	r3, r3
 80174b0:	b218      	sxth	r0, r3
 80174b2:	495e      	ldr	r1, [pc, #376]	; (801762c <main+0x10b4>)
 80174b4:	00d3      	lsls	r3, r2, #3
 80174b6:	440b      	add	r3, r1
 80174b8:	4602      	mov	r2, r0
 80174ba:	809a      	strh	r2, [r3, #4]
 80174bc:	e037      	b.n	801752e <main+0xfb6>
	              }
	              else if((MenuNow[Current] ==V2_POSI) && (List[V2_POSI].Val >= List[V1_POSI].Val))
 80174be:	4b59      	ldr	r3, [pc, #356]	; (8017624 <main+0x10ac>)
 80174c0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80174c4:	461a      	mov	r2, r3
 80174c6:	4b58      	ldr	r3, [pc, #352]	; (8017628 <main+0x10b0>)
 80174c8:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 80174cc:	2b05      	cmp	r3, #5
 80174ce:	d118      	bne.n	8017502 <main+0xf8a>
 80174d0:	4b56      	ldr	r3, [pc, #344]	; (801762c <main+0x10b4>)
 80174d2:	f9b3 202c 	ldrsh.w	r2, [r3, #44]	; 0x2c
 80174d6:	4b55      	ldr	r3, [pc, #340]	; (801762c <main+0x10b4>)
 80174d8:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	; 0x24
 80174dc:	429a      	cmp	r2, r3
 80174de:	db10      	blt.n	8017502 <main+0xf8a>
	                List[MenuNow[Current]].Val=List[V1_POSI].Val;
 80174e0:	4b50      	ldr	r3, [pc, #320]	; (8017624 <main+0x10ac>)
 80174e2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80174e6:	461a      	mov	r2, r3
 80174e8:	4b4f      	ldr	r3, [pc, #316]	; (8017628 <main+0x10b0>)
 80174ea:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 80174ee:	4618      	mov	r0, r3
 80174f0:	4b4e      	ldr	r3, [pc, #312]	; (801762c <main+0x10b4>)
 80174f2:	f9b3 1024 	ldrsh.w	r1, [r3, #36]	; 0x24
 80174f6:	4a4d      	ldr	r2, [pc, #308]	; (801762c <main+0x10b4>)
 80174f8:	00c3      	lsls	r3, r0, #3
 80174fa:	4413      	add	r3, r2
 80174fc:	460a      	mov	r2, r1
 80174fe:	809a      	strh	r2, [r3, #4]
 8017500:	e015      	b.n	801752e <main+0xfb6>
	              else List[MenuNow[Current]].Val++;
 8017502:	4b48      	ldr	r3, [pc, #288]	; (8017624 <main+0x10ac>)
 8017504:	f9b3 3000 	ldrsh.w	r3, [r3]
 8017508:	461a      	mov	r2, r3
 801750a:	4b47      	ldr	r3, [pc, #284]	; (8017628 <main+0x10b0>)
 801750c:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8017510:	461a      	mov	r2, r3
 8017512:	4946      	ldr	r1, [pc, #280]	; (801762c <main+0x10b4>)
 8017514:	00d3      	lsls	r3, r2, #3
 8017516:	440b      	add	r3, r1
 8017518:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801751c:	b29b      	uxth	r3, r3
 801751e:	3301      	adds	r3, #1
 8017520:	b29b      	uxth	r3, r3
 8017522:	b218      	sxth	r0, r3
 8017524:	4941      	ldr	r1, [pc, #260]	; (801762c <main+0x10b4>)
 8017526:	00d3      	lsls	r3, r2, #3
 8017528:	440b      	add	r3, r1
 801752a:	4602      	mov	r2, r0
 801752c:	809a      	strh	r2, [r3, #4]
	            }
	            //==============================================
	            if((MenuNow[Current] ==T1_POSI) && (List[T1_POSI].Val >= List[T2_POSI].Val))
 801752e:	4b3d      	ldr	r3, [pc, #244]	; (8017624 <main+0x10ac>)
 8017530:	f9b3 3000 	ldrsh.w	r3, [r3]
 8017534:	461a      	mov	r2, r3
 8017536:	4b3c      	ldr	r3, [pc, #240]	; (8017628 <main+0x10b0>)
 8017538:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 801753c:	2b0a      	cmp	r3, #10
 801753e:	d117      	bne.n	8017570 <main+0xff8>
 8017540:	4b3a      	ldr	r3, [pc, #232]	; (801762c <main+0x10b4>)
 8017542:	f9b3 2054 	ldrsh.w	r2, [r3, #84]	; 0x54
 8017546:	4b39      	ldr	r3, [pc, #228]	; (801762c <main+0x10b4>)
 8017548:	f9b3 305c 	ldrsh.w	r3, [r3, #92]	; 0x5c
 801754c:	429a      	cmp	r2, r3
 801754e:	db0f      	blt.n	8017570 <main+0xff8>
	               List[MenuNow[Current]].Val=List[T2_POSI].Val;
 8017550:	4b34      	ldr	r3, [pc, #208]	; (8017624 <main+0x10ac>)
 8017552:	f9b3 3000 	ldrsh.w	r3, [r3]
 8017556:	461a      	mov	r2, r3
 8017558:	4b33      	ldr	r3, [pc, #204]	; (8017628 <main+0x10b0>)
 801755a:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 801755e:	4618      	mov	r0, r3
 8017560:	4b32      	ldr	r3, [pc, #200]	; (801762c <main+0x10b4>)
 8017562:	f9b3 105c 	ldrsh.w	r1, [r3, #92]	; 0x5c
 8017566:	4a31      	ldr	r2, [pc, #196]	; (801762c <main+0x10b4>)
 8017568:	00c3      	lsls	r3, r0, #3
 801756a:	4413      	add	r3, r2
 801756c:	460a      	mov	r2, r1
 801756e:	809a      	strh	r2, [r3, #4]
	        }
	        if(Current == TRG) {Status &= ~STOP; // �ı�ͬ��ģʽ��ָ�����״̬
 8017570:	4b2c      	ldr	r3, [pc, #176]	; (8017624 <main+0x10ac>)
 8017572:	f9b3 3000 	ldrsh.w	r3, [r3]
 8017576:	2b02      	cmp	r3, #2
 8017578:	d11d      	bne.n	80175b6 <main+0x103e>
 801757a:	4b2d      	ldr	r3, [pc, #180]	; (8017630 <main+0x10b8>)
 801757c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8017580:	f023 0301 	bic.w	r3, r3, #1
 8017584:	b21a      	sxth	r2, r3
 8017586:	4b2a      	ldr	r3, [pc, #168]	; (8017630 <main+0x10b8>)
 8017588:	801a      	strh	r2, [r3, #0]
	        if(List[SYNCMODE].Val==SINGL)ADC_Start(); }
 801758a:	4b28      	ldr	r3, [pc, #160]	; (801762c <main+0x10b4>)
 801758c:	f9b3 306c 	ldrsh.w	r3, [r3, #108]	; 0x6c
 8017590:	2b04      	cmp	r3, #4
 8017592:	d110      	bne.n	80175b6 <main+0x103e>
 8017594:	f7f5 f902 	bl	800c79c <ADC_Start>
	        break;
 8017598:	e00d      	b.n	80175b6 <main+0x103e>
	         break;
 801759a:	bf00      	nop
 801759c:	e00c      	b.n	80175b8 <main+0x1040>
	         break;
 801759e:	bf00      	nop
 80175a0:	e00a      	b.n	80175b8 <main+0x1040>
	        break;
 80175a2:	bf00      	nop
 80175a4:	e008      	b.n	80175b8 <main+0x1040>
	        break;
 80175a6:	bf00      	nop
 80175a8:	e006      	b.n	80175b8 <main+0x1040>
	        if((Current==ST)&& !(PopType & LIST_POP))break;
 80175aa:	bf00      	nop
 80175ac:	e004      	b.n	80175b8 <main+0x1040>
	        break;
 80175ae:	bf00      	nop
 80175b0:	e002      	b.n	80175b8 <main+0x1040>
	        if((Current==ST)&& !(PopType & LIST_POP))break;
 80175b2:	bf00      	nop
 80175b4:	e000      	b.n	80175b8 <main+0x1040>
	        break;
 80175b6:	bf00      	nop

	     } //switch end
	     List[MenuNow[Current]].Flg |= UPD;
 80175b8:	4b1a      	ldr	r3, [pc, #104]	; (8017624 <main+0x10ac>)
 80175ba:	f9b3 3000 	ldrsh.w	r3, [r3]
 80175be:	461a      	mov	r2, r3
 80175c0:	4b19      	ldr	r3, [pc, #100]	; (8017628 <main+0x10b0>)
 80175c2:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 80175c6:	4a19      	ldr	r2, [pc, #100]	; (801762c <main+0x10b4>)
 80175c8:	00db      	lsls	r3, r3, #3
 80175ca:	4413      	add	r3, r2
 80175cc:	799b      	ldrb	r3, [r3, #6]
 80175ce:	4a15      	ldr	r2, [pc, #84]	; (8017624 <main+0x10ac>)
 80175d0:	f9b2 2000 	ldrsh.w	r2, [r2]
 80175d4:	4611      	mov	r1, r2
 80175d6:	4a14      	ldr	r2, [pc, #80]	; (8017628 <main+0x10b0>)
 80175d8:	f932 2011 	ldrsh.w	r2, [r2, r1, lsl #1]
 80175dc:	4610      	mov	r0, r2
 80175de:	f043 0320 	orr.w	r3, r3, #32
 80175e2:	b2d9      	uxtb	r1, r3
 80175e4:	4a11      	ldr	r2, [pc, #68]	; (801762c <main+0x10b4>)
 80175e6:	00c3      	lsls	r3, r0, #3
 80175e8:	4413      	add	r3, r2
 80175ea:	460a      	mov	r2, r1
 80175ec:	719a      	strb	r2, [r3, #6]
	     StdBy_Time  = List[STANDBY].Val * MIN_UNIT;  //����
 80175ee:	4b0f      	ldr	r3, [pc, #60]	; (801762c <main+0x10b4>)
 80175f0:	f9b3 314c 	ldrsh.w	r3, [r3, #332]	; 0x14c
 80175f4:	b29b      	uxth	r3, r3
 80175f6:	461a      	mov	r2, r3
 80175f8:	0112      	lsls	r2, r2, #4
 80175fa:	1ad3      	subs	r3, r2, r3
 80175fc:	009b      	lsls	r3, r3, #2
 80175fe:	b29b      	uxth	r3, r3
 8017600:	b21a      	sxth	r2, r3
 8017602:	4b0c      	ldr	r3, [pc, #48]	; (8017634 <main+0x10bc>)
 8017604:	801a      	strh	r2, [r3, #0]

	      if(PopType & LIST_POP) Show_List();
 8017606:	4b0c      	ldr	r3, [pc, #48]	; (8017638 <main+0x10c0>)
 8017608:	781b      	ldrb	r3, [r3, #0]
 801760a:	f003 0302 	and.w	r3, r3, #2
 801760e:	2b00      	cmp	r3, #0
 8017610:	d001      	beq.n	8017616 <main+0x109e>
 8017612:	f7fd f97d 	bl	8014910 <Show_List>
	      Update_Title();
 8017616:	f7fa ffb5 	bl	8012584 <Update_Title>
	      Key_Buffer = 0;
 801761a:	4b08      	ldr	r3, [pc, #32]	; (801763c <main+0x10c4>)
 801761c:	2200      	movs	r2, #0
 801761e:	701a      	strb	r2, [r3, #0]
	    if((List[STANDBY].Val != 0)&&(StdBy_Time == 0))
 8017620:	f7ff b85b 	b.w	80166da <main+0x162>
 8017624:	200007a6 	.word	0x200007a6
 8017628:	2000053c 	.word	0x2000053c
 801762c:	2000029c 	.word	0x2000029c
 8017630:	200007a8 	.word	0x200007a8
 8017634:	200007a4 	.word	0x200007a4
 8017638:	20000796 	.word	0x20000796
 801763c:	20000781 	.word	0x20000781

08017640 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8017640:	b580      	push	{r7, lr}
 8017642:	b094      	sub	sp, #80	; 0x50
 8017644:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8017646:	f107 031c 	add.w	r3, r7, #28
 801764a:	2234      	movs	r2, #52	; 0x34
 801764c:	2100      	movs	r1, #0
 801764e:	4618      	mov	r0, r3
 8017650:	f00b fc28 	bl	8022ea4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8017654:	f107 0308 	add.w	r3, r7, #8
 8017658:	2200      	movs	r2, #0
 801765a:	601a      	str	r2, [r3, #0]
 801765c:	605a      	str	r2, [r3, #4]
 801765e:	609a      	str	r2, [r3, #8]
 8017660:	60da      	str	r2, [r3, #12]
 8017662:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8017664:	2300      	movs	r3, #0
 8017666:	607b      	str	r3, [r7, #4]
 8017668:	4b2d      	ldr	r3, [pc, #180]	; (8017720 <SystemClock_Config+0xe0>)
 801766a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801766c:	4a2c      	ldr	r2, [pc, #176]	; (8017720 <SystemClock_Config+0xe0>)
 801766e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8017672:	6413      	str	r3, [r2, #64]	; 0x40
 8017674:	4b2a      	ldr	r3, [pc, #168]	; (8017720 <SystemClock_Config+0xe0>)
 8017676:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8017678:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 801767c:	607b      	str	r3, [r7, #4]
 801767e:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8017680:	2300      	movs	r3, #0
 8017682:	603b      	str	r3, [r7, #0]
 8017684:	4b27      	ldr	r3, [pc, #156]	; (8017724 <SystemClock_Config+0xe4>)
 8017686:	681b      	ldr	r3, [r3, #0]
 8017688:	4a26      	ldr	r2, [pc, #152]	; (8017724 <SystemClock_Config+0xe4>)
 801768a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 801768e:	6013      	str	r3, [r2, #0]
 8017690:	4b24      	ldr	r3, [pc, #144]	; (8017724 <SystemClock_Config+0xe4>)
 8017692:	681b      	ldr	r3, [r3, #0]
 8017694:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8017698:	603b      	str	r3, [r7, #0]
 801769a:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 801769c:	2301      	movs	r3, #1
 801769e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80176a0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80176a4:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80176a6:	2302      	movs	r3, #2
 80176a8:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80176aa:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80176ae:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 25;
 80176b0:	2319      	movs	r3, #25
 80176b2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 360;
 80176b4:	f44f 73b4 	mov.w	r3, #360	; 0x168
 80176b8:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80176ba:	2302      	movs	r3, #2
 80176bc:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 5;
 80176be:	2305      	movs	r3, #5
 80176c0:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80176c2:	2302      	movs	r3, #2
 80176c4:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80176c6:	f107 031c 	add.w	r3, r7, #28
 80176ca:	4618      	mov	r0, r3
 80176cc:	f004 fb72 	bl	801bdb4 <HAL_RCC_OscConfig>
 80176d0:	4603      	mov	r3, r0
 80176d2:	2b00      	cmp	r3, #0
 80176d4:	d001      	beq.n	80176da <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80176d6:	f000 fc1d 	bl	8017f14 <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80176da:	f003 fda3 	bl	801b224 <HAL_PWREx_EnableOverDrive>
 80176de:	4603      	mov	r3, r0
 80176e0:	2b00      	cmp	r3, #0
 80176e2:	d001      	beq.n	80176e8 <SystemClock_Config+0xa8>
  {
    Error_Handler();
 80176e4:	f000 fc16 	bl	8017f14 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80176e8:	230f      	movs	r3, #15
 80176ea:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80176ec:	2302      	movs	r3, #2
 80176ee:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80176f0:	2300      	movs	r3, #0
 80176f2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80176f4:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80176f8:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80176fa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80176fe:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8017700:	f107 0308 	add.w	r3, r7, #8
 8017704:	2105      	movs	r1, #5
 8017706:	4618      	mov	r0, r3
 8017708:	f003 fddc 	bl	801b2c4 <HAL_RCC_ClockConfig>
 801770c:	4603      	mov	r3, r0
 801770e:	2b00      	cmp	r3, #0
 8017710:	d001      	beq.n	8017716 <SystemClock_Config+0xd6>
  {
    Error_Handler();
 8017712:	f000 fbff 	bl	8017f14 <Error_Handler>
  }
}
 8017716:	bf00      	nop
 8017718:	3750      	adds	r7, #80	; 0x50
 801771a:	46bd      	mov	sp, r7
 801771c:	bd80      	pop	{r7, pc}
 801771e:	bf00      	nop
 8017720:	40023800 	.word	0x40023800
 8017724:	40007000 	.word	0x40007000

08017728 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8017728:	b580      	push	{r7, lr}
 801772a:	b084      	sub	sp, #16
 801772c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 801772e:	463b      	mov	r3, r7
 8017730:	2200      	movs	r2, #0
 8017732:	601a      	str	r2, [r3, #0]
 8017734:	605a      	str	r2, [r3, #4]
 8017736:	609a      	str	r2, [r3, #8]
 8017738:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 801773a:	4b22      	ldr	r3, [pc, #136]	; (80177c4 <MX_ADC1_Init+0x9c>)
 801773c:	4a22      	ldr	r2, [pc, #136]	; (80177c8 <MX_ADC1_Init+0xa0>)
 801773e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8017740:	4b20      	ldr	r3, [pc, #128]	; (80177c4 <MX_ADC1_Init+0x9c>)
 8017742:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8017746:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8017748:	4b1e      	ldr	r3, [pc, #120]	; (80177c4 <MX_ADC1_Init+0x9c>)
 801774a:	2200      	movs	r2, #0
 801774c:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 801774e:	4b1d      	ldr	r3, [pc, #116]	; (80177c4 <MX_ADC1_Init+0x9c>)
 8017750:	2200      	movs	r2, #0
 8017752:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8017754:	4b1b      	ldr	r3, [pc, #108]	; (80177c4 <MX_ADC1_Init+0x9c>)
 8017756:	2200      	movs	r2, #0
 8017758:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 801775a:	4b1a      	ldr	r3, [pc, #104]	; (80177c4 <MX_ADC1_Init+0x9c>)
 801775c:	2200      	movs	r2, #0
 801775e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8017762:	4b18      	ldr	r3, [pc, #96]	; (80177c4 <MX_ADC1_Init+0x9c>)
 8017764:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8017768:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T1_CC1;
 801776a:	4b16      	ldr	r3, [pc, #88]	; (80177c4 <MX_ADC1_Init+0x9c>)
 801776c:	2200      	movs	r2, #0
 801776e:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8017770:	4b14      	ldr	r3, [pc, #80]	; (80177c4 <MX_ADC1_Init+0x9c>)
 8017772:	2200      	movs	r2, #0
 8017774:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8017776:	4b13      	ldr	r3, [pc, #76]	; (80177c4 <MX_ADC1_Init+0x9c>)
 8017778:	2201      	movs	r2, #1
 801777a:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 801777c:	4b11      	ldr	r3, [pc, #68]	; (80177c4 <MX_ADC1_Init+0x9c>)
 801777e:	2200      	movs	r2, #0
 8017780:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8017784:	4b0f      	ldr	r3, [pc, #60]	; (80177c4 <MX_ADC1_Init+0x9c>)
 8017786:	2201      	movs	r2, #1
 8017788:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 801778a:	480e      	ldr	r0, [pc, #56]	; (80177c4 <MX_ADC1_Init+0x9c>)
 801778c:	f000 ff7a 	bl	8018684 <HAL_ADC_Init>
 8017790:	4603      	mov	r3, r0
 8017792:	2b00      	cmp	r3, #0
 8017794:	d001      	beq.n	801779a <MX_ADC1_Init+0x72>
  {
    Error_Handler();
 8017796:	f000 fbbd 	bl	8017f14 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 801779a:	2306      	movs	r3, #6
 801779c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 801779e:	2301      	movs	r3, #1
 80177a0:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80177a2:	2300      	movs	r3, #0
 80177a4:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80177a6:	463b      	mov	r3, r7
 80177a8:	4619      	mov	r1, r3
 80177aa:	4806      	ldr	r0, [pc, #24]	; (80177c4 <MX_ADC1_Init+0x9c>)
 80177ac:	f000 ffae 	bl	801870c <HAL_ADC_ConfigChannel>
 80177b0:	4603      	mov	r3, r0
 80177b2:	2b00      	cmp	r3, #0
 80177b4:	d001      	beq.n	80177ba <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 80177b6:	f000 fbad 	bl	8017f14 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80177ba:	bf00      	nop
 80177bc:	3710      	adds	r7, #16
 80177be:	46bd      	mov	sp, r7
 80177c0:	bd80      	pop	{r7, pc}
 80177c2:	bf00      	nop
 80177c4:	20006a84 	.word	0x20006a84
 80177c8:	40012000 	.word	0x40012000

080177cc <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 80177cc:	b580      	push	{r7, lr}
 80177ce:	b084      	sub	sp, #16
 80177d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80177d2:	463b      	mov	r3, r7
 80177d4:	2200      	movs	r2, #0
 80177d6:	601a      	str	r2, [r3, #0]
 80177d8:	605a      	str	r2, [r3, #4]
 80177da:	609a      	str	r2, [r3, #8]
 80177dc:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC2_Init 1 */

  /* USER CODE END ADC2_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 80177de:	4b22      	ldr	r3, [pc, #136]	; (8017868 <MX_ADC2_Init+0x9c>)
 80177e0:	4a22      	ldr	r2, [pc, #136]	; (801786c <MX_ADC2_Init+0xa0>)
 80177e2:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80177e4:	4b20      	ldr	r3, [pc, #128]	; (8017868 <MX_ADC2_Init+0x9c>)
 80177e6:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80177ea:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 80177ec:	4b1e      	ldr	r3, [pc, #120]	; (8017868 <MX_ADC2_Init+0x9c>)
 80177ee:	2200      	movs	r2, #0
 80177f0:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = DISABLE;
 80177f2:	4b1d      	ldr	r3, [pc, #116]	; (8017868 <MX_ADC2_Init+0x9c>)
 80177f4:	2200      	movs	r2, #0
 80177f6:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = DISABLE;
 80177f8:	4b1b      	ldr	r3, [pc, #108]	; (8017868 <MX_ADC2_Init+0x9c>)
 80177fa:	2200      	movs	r2, #0
 80177fc:	761a      	strb	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 80177fe:	4b1a      	ldr	r3, [pc, #104]	; (8017868 <MX_ADC2_Init+0x9c>)
 8017800:	2200      	movs	r2, #0
 8017802:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8017806:	4b18      	ldr	r3, [pc, #96]	; (8017868 <MX_ADC2_Init+0x9c>)
 8017808:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801780c:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T1_CC1;
 801780e:	4b16      	ldr	r3, [pc, #88]	; (8017868 <MX_ADC2_Init+0x9c>)
 8017810:	2200      	movs	r2, #0
 8017812:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8017814:	4b14      	ldr	r3, [pc, #80]	; (8017868 <MX_ADC2_Init+0x9c>)
 8017816:	2200      	movs	r2, #0
 8017818:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 1;
 801781a:	4b13      	ldr	r3, [pc, #76]	; (8017868 <MX_ADC2_Init+0x9c>)
 801781c:	2201      	movs	r2, #1
 801781e:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8017820:	4b11      	ldr	r3, [pc, #68]	; (8017868 <MX_ADC2_Init+0x9c>)
 8017822:	2200      	movs	r2, #0
 8017824:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8017828:	4b0f      	ldr	r3, [pc, #60]	; (8017868 <MX_ADC2_Init+0x9c>)
 801782a:	2201      	movs	r2, #1
 801782c:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 801782e:	480e      	ldr	r0, [pc, #56]	; (8017868 <MX_ADC2_Init+0x9c>)
 8017830:	f000 ff28 	bl	8018684 <HAL_ADC_Init>
 8017834:	4603      	mov	r3, r0
 8017836:	2b00      	cmp	r3, #0
 8017838:	d001      	beq.n	801783e <MX_ADC2_Init+0x72>
  {
    Error_Handler();
 801783a:	f000 fb6b 	bl	8017f14 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_7;
 801783e:	2307      	movs	r3, #7
 8017840:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8017842:	2301      	movs	r3, #1
 8017844:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8017846:	2300      	movs	r3, #0
 8017848:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 801784a:	463b      	mov	r3, r7
 801784c:	4619      	mov	r1, r3
 801784e:	4806      	ldr	r0, [pc, #24]	; (8017868 <MX_ADC2_Init+0x9c>)
 8017850:	f000 ff5c 	bl	801870c <HAL_ADC_ConfigChannel>
 8017854:	4603      	mov	r3, r0
 8017856:	2b00      	cmp	r3, #0
 8017858:	d001      	beq.n	801785e <MX_ADC2_Init+0x92>
  {
    Error_Handler();
 801785a:	f000 fb5b 	bl	8017f14 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 801785e:	bf00      	nop
 8017860:	3710      	adds	r7, #16
 8017862:	46bd      	mov	sp, r7
 8017864:	bd80      	pop	{r7, pc}
 8017866:	bf00      	nop
 8017868:	200068f4 	.word	0x200068f4
 801786c:	40012100 	.word	0x40012100

08017870 <MX_DAC_Init>:
  * @brief DAC Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC_Init(void)
{
 8017870:	b580      	push	{r7, lr}
 8017872:	b082      	sub	sp, #8
 8017874:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8017876:	463b      	mov	r3, r7
 8017878:	2200      	movs	r2, #0
 801787a:	601a      	str	r2, [r3, #0]
 801787c:	605a      	str	r2, [r3, #4]
  /* USER CODE BEGIN DAC_Init 1 */

  /* USER CODE END DAC_Init 1 */
  /** DAC Initialization
  */
  hdac.Instance = DAC;
 801787e:	4b19      	ldr	r3, [pc, #100]	; (80178e4 <MX_DAC_Init+0x74>)
 8017880:	4a19      	ldr	r2, [pc, #100]	; (80178e8 <MX_DAC_Init+0x78>)
 8017882:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 8017884:	4817      	ldr	r0, [pc, #92]	; (80178e4 <MX_DAC_Init+0x74>)
 8017886:	f001 fa80 	bl	8018d8a <HAL_DAC_Init>
 801788a:	4603      	mov	r3, r0
 801788c:	2b00      	cmp	r3, #0
 801788e:	d001      	beq.n	8017894 <MX_DAC_Init+0x24>
  {
    Error_Handler();
 8017890:	f000 fb40 	bl	8017f14 <Error_Handler>
  }
  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8017894:	2300      	movs	r3, #0
 8017896:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8017898:	2300      	movs	r3, #0
 801789a:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 801789c:	463b      	mov	r3, r7
 801789e:	2200      	movs	r2, #0
 80178a0:	4619      	mov	r1, r3
 80178a2:	4810      	ldr	r0, [pc, #64]	; (80178e4 <MX_DAC_Init+0x74>)
 80178a4:	f001 fab8 	bl	8018e18 <HAL_DAC_ConfigChannel>
 80178a8:	4603      	mov	r3, r0
 80178aa:	2b00      	cmp	r3, #0
 80178ac:	d001      	beq.n	80178b2 <MX_DAC_Init+0x42>
  {
    Error_Handler();
 80178ae:	f000 fb31 	bl	8017f14 <Error_Handler>
  }
  /** DAC channel OUT2 config
  */
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_DISABLE;
 80178b2:	2302      	movs	r3, #2
 80178b4:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 80178b6:	463b      	mov	r3, r7
 80178b8:	2210      	movs	r2, #16
 80178ba:	4619      	mov	r1, r3
 80178bc:	4809      	ldr	r0, [pc, #36]	; (80178e4 <MX_DAC_Init+0x74>)
 80178be:	f001 faab 	bl	8018e18 <HAL_DAC_ConfigChannel>
 80178c2:	4603      	mov	r3, r0
 80178c4:	2b00      	cmp	r3, #0
 80178c6:	d001      	beq.n	80178cc <MX_DAC_Init+0x5c>
  {
    Error_Handler();
 80178c8:	f000 fb24 	bl	8017f14 <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */
  HAL_DAC_SetValue(&hdac, DAC_CHANNEL_2, DAC_ALIGN_12B_R, 620);  //(620*4095)/330;//50mv
 80178cc:	f44f 731b 	mov.w	r3, #620	; 0x26c
 80178d0:	2200      	movs	r2, #0
 80178d2:	2110      	movs	r1, #16
 80178d4:	4803      	ldr	r0, [pc, #12]	; (80178e4 <MX_DAC_Init+0x74>)
 80178d6:	f001 fa7a 	bl	8018dce <HAL_DAC_SetValue>
  /* USER CODE END DAC_Init 2 */

}
 80178da:	bf00      	nop
 80178dc:	3708      	adds	r7, #8
 80178de:	46bd      	mov	sp, r7
 80178e0:	bd80      	pop	{r7, pc}
 80178e2:	bf00      	nop
 80178e4:	20006b04 	.word	0x20006b04
 80178e8:	40007400 	.word	0x40007400

080178ec <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80178ec:	b580      	push	{r7, lr}
 80178ee:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80178f0:	4b17      	ldr	r3, [pc, #92]	; (8017950 <MX_SPI2_Init+0x64>)
 80178f2:	4a18      	ldr	r2, [pc, #96]	; (8017954 <MX_SPI2_Init+0x68>)
 80178f4:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80178f6:	4b16      	ldr	r3, [pc, #88]	; (8017950 <MX_SPI2_Init+0x64>)
 80178f8:	f44f 7282 	mov.w	r2, #260	; 0x104
 80178fc:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80178fe:	4b14      	ldr	r3, [pc, #80]	; (8017950 <MX_SPI2_Init+0x64>)
 8017900:	2200      	movs	r2, #0
 8017902:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8017904:	4b12      	ldr	r3, [pc, #72]	; (8017950 <MX_SPI2_Init+0x64>)
 8017906:	2200      	movs	r2, #0
 8017908:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_HIGH;
 801790a:	4b11      	ldr	r3, [pc, #68]	; (8017950 <MX_SPI2_Init+0x64>)
 801790c:	2202      	movs	r2, #2
 801790e:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_2EDGE;
 8017910:	4b0f      	ldr	r3, [pc, #60]	; (8017950 <MX_SPI2_Init+0x64>)
 8017912:	2201      	movs	r2, #1
 8017914:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8017916:	4b0e      	ldr	r3, [pc, #56]	; (8017950 <MX_SPI2_Init+0x64>)
 8017918:	f44f 7200 	mov.w	r2, #512	; 0x200
 801791c:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 801791e:	4b0c      	ldr	r3, [pc, #48]	; (8017950 <MX_SPI2_Init+0x64>)
 8017920:	2200      	movs	r2, #0
 8017922:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_LSB;
 8017924:	4b0a      	ldr	r3, [pc, #40]	; (8017950 <MX_SPI2_Init+0x64>)
 8017926:	2280      	movs	r2, #128	; 0x80
 8017928:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 801792a:	4b09      	ldr	r3, [pc, #36]	; (8017950 <MX_SPI2_Init+0x64>)
 801792c:	2200      	movs	r2, #0
 801792e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8017930:	4b07      	ldr	r3, [pc, #28]	; (8017950 <MX_SPI2_Init+0x64>)
 8017932:	2200      	movs	r2, #0
 8017934:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8017936:	4b06      	ldr	r3, [pc, #24]	; (8017950 <MX_SPI2_Init+0x64>)
 8017938:	220a      	movs	r2, #10
 801793a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 801793c:	4804      	ldr	r0, [pc, #16]	; (8017950 <MX_SPI2_Init+0x64>)
 801793e:	f004 fcd7 	bl	801c2f0 <HAL_SPI_Init>
 8017942:	4603      	mov	r3, r0
 8017944:	2b00      	cmp	r3, #0
 8017946:	d001      	beq.n	801794c <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8017948:	f000 fae4 	bl	8017f14 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 801794c:	bf00      	nop
 801794e:	bd80      	pop	{r7, pc}
 8017950:	2000689c 	.word	0x2000689c
 8017954:	40003800 	.word	0x40003800

08017958 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8017958:	b580      	push	{r7, lr}
 801795a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 801795c:	4b18      	ldr	r3, [pc, #96]	; (80179c0 <MX_SPI3_Init+0x68>)
 801795e:	4a19      	ldr	r2, [pc, #100]	; (80179c4 <MX_SPI3_Init+0x6c>)
 8017960:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8017962:	4b17      	ldr	r3, [pc, #92]	; (80179c0 <MX_SPI3_Init+0x68>)
 8017964:	f44f 7282 	mov.w	r2, #260	; 0x104
 8017968:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 801796a:	4b15      	ldr	r3, [pc, #84]	; (80179c0 <MX_SPI3_Init+0x68>)
 801796c:	2200      	movs	r2, #0
 801796e:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_16BIT;
 8017970:	4b13      	ldr	r3, [pc, #76]	; (80179c0 <MX_SPI3_Init+0x68>)
 8017972:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8017976:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8017978:	4b11      	ldr	r3, [pc, #68]	; (80179c0 <MX_SPI3_Init+0x68>)
 801797a:	2200      	movs	r2, #0
 801797c:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 801797e:	4b10      	ldr	r3, [pc, #64]	; (80179c0 <MX_SPI3_Init+0x68>)
 8017980:	2200      	movs	r2, #0
 8017982:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8017984:	4b0e      	ldr	r3, [pc, #56]	; (80179c0 <MX_SPI3_Init+0x68>)
 8017986:	f44f 7200 	mov.w	r2, #512	; 0x200
 801798a:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 801798c:	4b0c      	ldr	r3, [pc, #48]	; (80179c0 <MX_SPI3_Init+0x68>)
 801798e:	2210      	movs	r2, #16
 8017990:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_LSB;
 8017992:	4b0b      	ldr	r3, [pc, #44]	; (80179c0 <MX_SPI3_Init+0x68>)
 8017994:	2280      	movs	r2, #128	; 0x80
 8017996:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8017998:	4b09      	ldr	r3, [pc, #36]	; (80179c0 <MX_SPI3_Init+0x68>)
 801799a:	2200      	movs	r2, #0
 801799c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 801799e:	4b08      	ldr	r3, [pc, #32]	; (80179c0 <MX_SPI3_Init+0x68>)
 80179a0:	2200      	movs	r2, #0
 80179a2:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 10;
 80179a4:	4b06      	ldr	r3, [pc, #24]	; (80179c0 <MX_SPI3_Init+0x68>)
 80179a6:	220a      	movs	r2, #10
 80179a8:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 80179aa:	4805      	ldr	r0, [pc, #20]	; (80179c0 <MX_SPI3_Init+0x68>)
 80179ac:	f004 fca0 	bl	801c2f0 <HAL_SPI_Init>
 80179b0:	4603      	mov	r3, r0
 80179b2:	2b00      	cmp	r3, #0
 80179b4:	d001      	beq.n	80179ba <MX_SPI3_Init+0x62>
  {
    Error_Handler();
 80179b6:	f000 faad 	bl	8017f14 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 80179ba:	bf00      	nop
 80179bc:	bd80      	pop	{r7, pc}
 80179be:	bf00      	nop
 80179c0:	200069cc 	.word	0x200069cc
 80179c4:	40003c00 	.word	0x40003c00

080179c8 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80179c8:	b580      	push	{r7, lr}
 80179ca:	b086      	sub	sp, #24
 80179cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80179ce:	f107 0308 	add.w	r3, r7, #8
 80179d2:	2200      	movs	r2, #0
 80179d4:	601a      	str	r2, [r3, #0]
 80179d6:	605a      	str	r2, [r3, #4]
 80179d8:	609a      	str	r2, [r3, #8]
 80179da:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80179dc:	463b      	mov	r3, r7
 80179de:	2200      	movs	r2, #0
 80179e0:	601a      	str	r2, [r3, #0]
 80179e2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */
  octim1.Pulse = 500;
 80179e4:	4b30      	ldr	r3, [pc, #192]	; (8017aa8 <MX_TIM1_Init+0xe0>)
 80179e6:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80179ea:	605a      	str	r2, [r3, #4]
  octim1.OCMode = TIM_OCMODE_PWM2;
 80179ec:	4b2e      	ldr	r3, [pc, #184]	; (8017aa8 <MX_TIM1_Init+0xe0>)
 80179ee:	2270      	movs	r2, #112	; 0x70
 80179f0:	601a      	str	r2, [r3, #0]
  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80179f2:	4b2e      	ldr	r3, [pc, #184]	; (8017aac <MX_TIM1_Init+0xe4>)
 80179f4:	4a2e      	ldr	r2, [pc, #184]	; (8017ab0 <MX_TIM1_Init+0xe8>)
 80179f6:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 89;
 80179f8:	4b2c      	ldr	r3, [pc, #176]	; (8017aac <MX_TIM1_Init+0xe4>)
 80179fa:	2259      	movs	r2, #89	; 0x59
 80179fc:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_DOWN;
 80179fe:	4b2b      	ldr	r3, [pc, #172]	; (8017aac <MX_TIM1_Init+0xe4>)
 8017a00:	2210      	movs	r2, #16
 8017a02:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 999;
 8017a04:	4b29      	ldr	r3, [pc, #164]	; (8017aac <MX_TIM1_Init+0xe4>)
 8017a06:	f240 32e7 	movw	r2, #999	; 0x3e7
 8017a0a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8017a0c:	4b27      	ldr	r3, [pc, #156]	; (8017aac <MX_TIM1_Init+0xe4>)
 8017a0e:	2200      	movs	r2, #0
 8017a10:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8017a12:	4b26      	ldr	r3, [pc, #152]	; (8017aac <MX_TIM1_Init+0xe4>)
 8017a14:	2200      	movs	r2, #0
 8017a16:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8017a18:	4b24      	ldr	r3, [pc, #144]	; (8017aac <MX_TIM1_Init+0xe4>)
 8017a1a:	2280      	movs	r2, #128	; 0x80
 8017a1c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8017a1e:	4823      	ldr	r0, [pc, #140]	; (8017aac <MX_TIM1_Init+0xe4>)
 8017a20:	f005 fb3a 	bl	801d098 <HAL_TIM_Base_Init>
 8017a24:	4603      	mov	r3, r0
 8017a26:	2b00      	cmp	r3, #0
 8017a28:	d001      	beq.n	8017a2e <MX_TIM1_Init+0x66>
  {
    Error_Handler();
 8017a2a:	f000 fa73 	bl	8017f14 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8017a2e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8017a32:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8017a34:	f107 0308 	add.w	r3, r7, #8
 8017a38:	4619      	mov	r1, r3
 8017a3a:	481c      	ldr	r0, [pc, #112]	; (8017aac <MX_TIM1_Init+0xe4>)
 8017a3c:	f005 fd50 	bl	801d4e0 <HAL_TIM_ConfigClockSource>
 8017a40:	4603      	mov	r3, r0
 8017a42:	2b00      	cmp	r3, #0
 8017a44:	d001      	beq.n	8017a4a <MX_TIM1_Init+0x82>
  {
    Error_Handler();
 8017a46:	f000 fa65 	bl	8017f14 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8017a4a:	2300      	movs	r3, #0
 8017a4c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8017a4e:	2300      	movs	r3, #0
 8017a50:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8017a52:	463b      	mov	r3, r7
 8017a54:	4619      	mov	r1, r3
 8017a56:	4815      	ldr	r0, [pc, #84]	; (8017aac <MX_TIM1_Init+0xe4>)
 8017a58:	f006 f91c 	bl	801dc94 <HAL_TIMEx_MasterConfigSynchronization>
 8017a5c:	4603      	mov	r3, r0
 8017a5e:	2b00      	cmp	r3, #0
 8017a60:	d001      	beq.n	8017a66 <MX_TIM1_Init+0x9e>
  {
    Error_Handler();
 8017a62:	f000 fa57 	bl	8017f14 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */
  HAL_TIM_OC_ConfigChannel(&htim1, &octim1, 1 );
 8017a66:	2201      	movs	r2, #1
 8017a68:	490f      	ldr	r1, [pc, #60]	; (8017aa8 <MX_TIM1_Init+0xe0>)
 8017a6a:	4810      	ldr	r0, [pc, #64]	; (8017aac <MX_TIM1_Init+0xe4>)
 8017a6c:	f005 fcdc 	bl	801d428 <HAL_TIM_OC_ConfigChannel>
  __HAL_TIM_URS_ENABLE(&htim1);
 8017a70:	4b0e      	ldr	r3, [pc, #56]	; (8017aac <MX_TIM1_Init+0xe4>)
 8017a72:	681b      	ldr	r3, [r3, #0]
 8017a74:	681a      	ldr	r2, [r3, #0]
 8017a76:	4b0d      	ldr	r3, [pc, #52]	; (8017aac <MX_TIM1_Init+0xe4>)
 8017a78:	681b      	ldr	r3, [r3, #0]
 8017a7a:	f042 0204 	orr.w	r2, r2, #4
 8017a7e:	601a      	str	r2, [r3, #0]
  __HAL_TIM_ENABLE_DMA(&htim1, TIM_DMA_CC1 | TIM_DMA_TRIGGER);
 8017a80:	4b0a      	ldr	r3, [pc, #40]	; (8017aac <MX_TIM1_Init+0xe4>)
 8017a82:	681b      	ldr	r3, [r3, #0]
 8017a84:	68da      	ldr	r2, [r3, #12]
 8017a86:	4b09      	ldr	r3, [pc, #36]	; (8017aac <MX_TIM1_Init+0xe4>)
 8017a88:	681b      	ldr	r3, [r3, #0]
 8017a8a:	f442 4284 	orr.w	r2, r2, #16896	; 0x4200
 8017a8e:	60da      	str	r2, [r3, #12]
  __HAL_TIM_ENABLE(&htim1);
 8017a90:	4b06      	ldr	r3, [pc, #24]	; (8017aac <MX_TIM1_Init+0xe4>)
 8017a92:	681b      	ldr	r3, [r3, #0]
 8017a94:	681a      	ldr	r2, [r3, #0]
 8017a96:	4b05      	ldr	r3, [pc, #20]	; (8017aac <MX_TIM1_Init+0xe4>)
 8017a98:	681b      	ldr	r3, [r3, #0]
 8017a9a:	f042 0201 	orr.w	r2, r2, #1
 8017a9e:	601a      	str	r2, [r3, #0]
  /* USER CODE END TIM1_Init 2 */

}
 8017aa0:	bf00      	nop
 8017aa2:	3718      	adds	r7, #24
 8017aa4:	46bd      	mov	sp, r7
 8017aa6:	bd80      	pop	{r7, pc}
 8017aa8:	20006b78 	.word	0x20006b78
 8017aac:	20006b94 	.word	0x20006b94
 8017ab0:	40010000 	.word	0x40010000

08017ab4 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8017ab4:	b580      	push	{r7, lr}
 8017ab6:	b086      	sub	sp, #24
 8017ab8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8017aba:	f107 0308 	add.w	r3, r7, #8
 8017abe:	2200      	movs	r2, #0
 8017ac0:	601a      	str	r2, [r3, #0]
 8017ac2:	605a      	str	r2, [r3, #4]
 8017ac4:	609a      	str	r2, [r3, #8]
 8017ac6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8017ac8:	463b      	mov	r3, r7
 8017aca:	2200      	movs	r2, #0
 8017acc:	601a      	str	r2, [r3, #0]
 8017ace:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */
  octim3.Pulse = 3750;
 8017ad0:	4b25      	ldr	r3, [pc, #148]	; (8017b68 <MX_TIM3_Init+0xb4>)
 8017ad2:	f640 62a6 	movw	r2, #3750	; 0xea6
 8017ad6:	605a      	str	r2, [r3, #4]
  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8017ad8:	4b24      	ldr	r3, [pc, #144]	; (8017b6c <MX_TIM3_Init+0xb8>)
 8017ada:	4a25      	ldr	r2, [pc, #148]	; (8017b70 <MX_TIM3_Init+0xbc>)
 8017adc:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 11;
 8017ade:	4b23      	ldr	r3, [pc, #140]	; (8017b6c <MX_TIM3_Init+0xb8>)
 8017ae0:	220b      	movs	r2, #11
 8017ae2:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8017ae4:	4b21      	ldr	r3, [pc, #132]	; (8017b6c <MX_TIM3_Init+0xb8>)
 8017ae6:	2200      	movs	r2, #0
 8017ae8:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 7499;
 8017aea:	4b20      	ldr	r3, [pc, #128]	; (8017b6c <MX_TIM3_Init+0xb8>)
 8017aec:	f641 524b 	movw	r2, #7499	; 0x1d4b
 8017af0:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8017af2:	4b1e      	ldr	r3, [pc, #120]	; (8017b6c <MX_TIM3_Init+0xb8>)
 8017af4:	2200      	movs	r2, #0
 8017af6:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8017af8:	4b1c      	ldr	r3, [pc, #112]	; (8017b6c <MX_TIM3_Init+0xb8>)
 8017afa:	2280      	movs	r2, #128	; 0x80
 8017afc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8017afe:	481b      	ldr	r0, [pc, #108]	; (8017b6c <MX_TIM3_Init+0xb8>)
 8017b00:	f005 faca 	bl	801d098 <HAL_TIM_Base_Init>
 8017b04:	4603      	mov	r3, r0
 8017b06:	2b00      	cmp	r3, #0
 8017b08:	d001      	beq.n	8017b0e <MX_TIM3_Init+0x5a>
  {
    Error_Handler();
 8017b0a:	f000 fa03 	bl	8017f14 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8017b0e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8017b12:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8017b14:	f107 0308 	add.w	r3, r7, #8
 8017b18:	4619      	mov	r1, r3
 8017b1a:	4814      	ldr	r0, [pc, #80]	; (8017b6c <MX_TIM3_Init+0xb8>)
 8017b1c:	f005 fce0 	bl	801d4e0 <HAL_TIM_ConfigClockSource>
 8017b20:	4603      	mov	r3, r0
 8017b22:	2b00      	cmp	r3, #0
 8017b24:	d001      	beq.n	8017b2a <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 8017b26:	f000 f9f5 	bl	8017f14 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8017b2a:	2320      	movs	r3, #32
 8017b2c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8017b2e:	2300      	movs	r3, #0
 8017b30:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8017b32:	463b      	mov	r3, r7
 8017b34:	4619      	mov	r1, r3
 8017b36:	480d      	ldr	r0, [pc, #52]	; (8017b6c <MX_TIM3_Init+0xb8>)
 8017b38:	f006 f8ac 	bl	801dc94 <HAL_TIMEx_MasterConfigSynchronization>
 8017b3c:	4603      	mov	r3, r0
 8017b3e:	2b00      	cmp	r3, #0
 8017b40:	d001      	beq.n	8017b46 <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8017b42:	f000 f9e7 	bl	8017f14 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */
  HAL_TIM_OC_ConfigChannel(&htim3, &octim3, 1 );
 8017b46:	2201      	movs	r2, #1
 8017b48:	4907      	ldr	r1, [pc, #28]	; (8017b68 <MX_TIM3_Init+0xb4>)
 8017b4a:	4808      	ldr	r0, [pc, #32]	; (8017b6c <MX_TIM3_Init+0xb8>)
 8017b4c:	f005 fc6c 	bl	801d428 <HAL_TIM_OC_ConfigChannel>
  __HAL_TIM_ENABLE(&htim3);
 8017b50:	4b06      	ldr	r3, [pc, #24]	; (8017b6c <MX_TIM3_Init+0xb8>)
 8017b52:	681b      	ldr	r3, [r3, #0]
 8017b54:	681a      	ldr	r2, [r3, #0]
 8017b56:	4b05      	ldr	r3, [pc, #20]	; (8017b6c <MX_TIM3_Init+0xb8>)
 8017b58:	681b      	ldr	r3, [r3, #0]
 8017b5a:	f042 0201 	orr.w	r2, r2, #1
 8017b5e:	601a      	str	r2, [r3, #0]

  /* USER CODE END TIM3_Init 2 */

}
 8017b60:	bf00      	nop
 8017b62:	3718      	adds	r7, #24
 8017b64:	46bd      	mov	sp, r7
 8017b66:	bd80      	pop	{r7, pc}
 8017b68:	20006acc 	.word	0x20006acc
 8017b6c:	20006984 	.word	0x20006984
 8017b70:	40000400 	.word	0x40000400

08017b74 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8017b74:	b580      	push	{r7, lr}
 8017b76:	b086      	sub	sp, #24
 8017b78:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8017b7a:	f107 0308 	add.w	r3, r7, #8
 8017b7e:	2200      	movs	r2, #0
 8017b80:	601a      	str	r2, [r3, #0]
 8017b82:	605a      	str	r2, [r3, #4]
 8017b84:	609a      	str	r2, [r3, #8]
 8017b86:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8017b88:	463b      	mov	r3, r7
 8017b8a:	2200      	movs	r2, #0
 8017b8c:	601a      	str	r2, [r3, #0]
 8017b8e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */
  octim5.Pulse = (FARR[List[FREQ_OUT].Val]+1)/2;
 8017b90:	4b3a      	ldr	r3, [pc, #232]	; (8017c7c <MX_TIM5_Init+0x108>)
 8017b92:	f9b3 312c 	ldrsh.w	r3, [r3, #300]	; 0x12c
 8017b96:	461a      	mov	r2, r3
 8017b98:	4b39      	ldr	r3, [pc, #228]	; (8017c80 <MX_TIM5_Init+0x10c>)
 8017b9a:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8017b9e:	3301      	adds	r3, #1
 8017ba0:	0fda      	lsrs	r2, r3, #31
 8017ba2:	4413      	add	r3, r2
 8017ba4:	105b      	asrs	r3, r3, #1
 8017ba6:	461a      	mov	r2, r3
 8017ba8:	4b36      	ldr	r3, [pc, #216]	; (8017c84 <MX_TIM5_Init+0x110>)
 8017baa:	605a      	str	r2, [r3, #4]
  octim5.OCMode = TIM_OCMODE_PWM2;
 8017bac:	4b35      	ldr	r3, [pc, #212]	; (8017c84 <MX_TIM5_Init+0x110>)
 8017bae:	2270      	movs	r2, #112	; 0x70
 8017bb0:	601a      	str	r2, [r3, #0]
  octim5.OCFastMode = TIM_OCFAST_ENABLE;
 8017bb2:	4b34      	ldr	r3, [pc, #208]	; (8017c84 <MX_TIM5_Init+0x110>)
 8017bb4:	2204      	movs	r2, #4
 8017bb6:	611a      	str	r2, [r3, #16]
  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8017bb8:	4b33      	ldr	r3, [pc, #204]	; (8017c88 <MX_TIM5_Init+0x114>)
 8017bba:	4a34      	ldr	r2, [pc, #208]	; (8017c8c <MX_TIM5_Init+0x118>)
 8017bbc:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 9;
 8017bbe:	4b32      	ldr	r3, [pc, #200]	; (8017c88 <MX_TIM5_Init+0x114>)
 8017bc0:	2209      	movs	r2, #9
 8017bc2:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8017bc4:	4b30      	ldr	r3, [pc, #192]	; (8017c88 <MX_TIM5_Init+0x114>)
 8017bc6:	2200      	movs	r2, #0
 8017bc8:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 18000;
 8017bca:	4b2f      	ldr	r3, [pc, #188]	; (8017c88 <MX_TIM5_Init+0x114>)
 8017bcc:	f244 6250 	movw	r2, #18000	; 0x4650
 8017bd0:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8017bd2:	4b2d      	ldr	r3, [pc, #180]	; (8017c88 <MX_TIM5_Init+0x114>)
 8017bd4:	2200      	movs	r2, #0
 8017bd6:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8017bd8:	4b2b      	ldr	r3, [pc, #172]	; (8017c88 <MX_TIM5_Init+0x114>)
 8017bda:	2280      	movs	r2, #128	; 0x80
 8017bdc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8017bde:	482a      	ldr	r0, [pc, #168]	; (8017c88 <MX_TIM5_Init+0x114>)
 8017be0:	f005 fa5a 	bl	801d098 <HAL_TIM_Base_Init>
 8017be4:	4603      	mov	r3, r0
 8017be6:	2b00      	cmp	r3, #0
 8017be8:	d001      	beq.n	8017bee <MX_TIM5_Init+0x7a>
  {
    Error_Handler();
 8017bea:	f000 f993 	bl	8017f14 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8017bee:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8017bf2:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8017bf4:	f107 0308 	add.w	r3, r7, #8
 8017bf8:	4619      	mov	r1, r3
 8017bfa:	4823      	ldr	r0, [pc, #140]	; (8017c88 <MX_TIM5_Init+0x114>)
 8017bfc:	f005 fc70 	bl	801d4e0 <HAL_TIM_ConfigClockSource>
 8017c00:	4603      	mov	r3, r0
 8017c02:	2b00      	cmp	r3, #0
 8017c04:	d001      	beq.n	8017c0a <MX_TIM5_Init+0x96>
  {
    Error_Handler();
 8017c06:	f000 f985 	bl	8017f14 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8017c0a:	2300      	movs	r3, #0
 8017c0c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8017c0e:	2300      	movs	r3, #0
 8017c10:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8017c12:	463b      	mov	r3, r7
 8017c14:	4619      	mov	r1, r3
 8017c16:	481c      	ldr	r0, [pc, #112]	; (8017c88 <MX_TIM5_Init+0x114>)
 8017c18:	f006 f83c 	bl	801dc94 <HAL_TIMEx_MasterConfigSynchronization>
 8017c1c:	4603      	mov	r3, r0
 8017c1e:	2b00      	cmp	r3, #0
 8017c20:	d001      	beq.n	8017c26 <MX_TIM5_Init+0xb2>
  {
    Error_Handler();
 8017c22:	f000 f977 	bl	8017f14 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */
  htim5.Init.Period = FARR[List[FREQ_OUT].Val];
 8017c26:	4b15      	ldr	r3, [pc, #84]	; (8017c7c <MX_TIM5_Init+0x108>)
 8017c28:	f9b3 312c 	ldrsh.w	r3, [r3, #300]	; 0x12c
 8017c2c:	461a      	mov	r2, r3
 8017c2e:	4b14      	ldr	r3, [pc, #80]	; (8017c80 <MX_TIM5_Init+0x10c>)
 8017c30:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8017c34:	461a      	mov	r2, r3
 8017c36:	4b14      	ldr	r3, [pc, #80]	; (8017c88 <MX_TIM5_Init+0x114>)
 8017c38:	60da      	str	r2, [r3, #12]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8017c3a:	4813      	ldr	r0, [pc, #76]	; (8017c88 <MX_TIM5_Init+0x114>)
 8017c3c:	f005 fa2c 	bl	801d098 <HAL_TIM_Base_Init>
 8017c40:	4603      	mov	r3, r0
 8017c42:	2b00      	cmp	r3, #0
 8017c44:	d001      	beq.n	8017c4a <MX_TIM5_Init+0xd6>
  {
    Error_Handler();
 8017c46:	f000 f965 	bl	8017f14 <Error_Handler>
  }
  HAL_TIM_OC_ConfigChannel(&htim5, &octim5, 3 );
 8017c4a:	2203      	movs	r2, #3
 8017c4c:	490d      	ldr	r1, [pc, #52]	; (8017c84 <MX_TIM5_Init+0x110>)
 8017c4e:	480e      	ldr	r0, [pc, #56]	; (8017c88 <MX_TIM5_Init+0x114>)
 8017c50:	f005 fbea 	bl	801d428 <HAL_TIM_OC_ConfigChannel>
  __HAL_TIM_URS_ENABLE(&htim5);
 8017c54:	4b0c      	ldr	r3, [pc, #48]	; (8017c88 <MX_TIM5_Init+0x114>)
 8017c56:	681b      	ldr	r3, [r3, #0]
 8017c58:	681a      	ldr	r2, [r3, #0]
 8017c5a:	4b0b      	ldr	r3, [pc, #44]	; (8017c88 <MX_TIM5_Init+0x114>)
 8017c5c:	681b      	ldr	r3, [r3, #0]
 8017c5e:	f042 0204 	orr.w	r2, r2, #4
 8017c62:	601a      	str	r2, [r3, #0]
  __HAL_TIM_ENABLE(&htim5);
 8017c64:	4b08      	ldr	r3, [pc, #32]	; (8017c88 <MX_TIM5_Init+0x114>)
 8017c66:	681b      	ldr	r3, [r3, #0]
 8017c68:	681a      	ldr	r2, [r3, #0]
 8017c6a:	4b07      	ldr	r3, [pc, #28]	; (8017c88 <MX_TIM5_Init+0x114>)
 8017c6c:	681b      	ldr	r3, [r3, #0]
 8017c6e:	f042 0201 	orr.w	r2, r2, #1
 8017c72:	601a      	str	r2, [r3, #0]
  /* USER CODE END TIM5_Init 2 */

}
 8017c74:	bf00      	nop
 8017c76:	3718      	adds	r7, #24
 8017c78:	46bd      	mov	sp, r7
 8017c7a:	bd80      	pop	{r7, pc}
 8017c7c:	2000029c 	.word	0x2000029c
 8017c80:	08000ae8 	.word	0x08000ae8
 8017c84:	20006ae8 	.word	0x20006ae8
 8017c88:	2000693c 	.word	0x2000693c
 8017c8c:	40000c00 	.word	0x40000c00

08017c90 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 8017c90:	b580      	push	{r7, lr}
 8017c92:	b082      	sub	sp, #8
 8017c94:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */
  // aka tim_da
  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8017c96:	463b      	mov	r3, r7
 8017c98:	2200      	movs	r2, #0
 8017c9a:	601a      	str	r2, [r3, #0]
 8017c9c:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8017c9e:	4b1d      	ldr	r3, [pc, #116]	; (8017d14 <MX_TIM7_Init+0x84>)
 8017ca0:	4a1d      	ldr	r2, [pc, #116]	; (8017d18 <MX_TIM7_Init+0x88>)
 8017ca2:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 2;
 8017ca4:	4b1b      	ldr	r3, [pc, #108]	; (8017d14 <MX_TIM7_Init+0x84>)
 8017ca6:	2202      	movs	r2, #2
 8017ca8:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8017caa:	4b1a      	ldr	r3, [pc, #104]	; (8017d14 <MX_TIM7_Init+0x84>)
 8017cac:	2200      	movs	r2, #0
 8017cae:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 999;
 8017cb0:	4b18      	ldr	r3, [pc, #96]	; (8017d14 <MX_TIM7_Init+0x84>)
 8017cb2:	f240 32e7 	movw	r2, #999	; 0x3e7
 8017cb6:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8017cb8:	4b16      	ldr	r3, [pc, #88]	; (8017d14 <MX_TIM7_Init+0x84>)
 8017cba:	2200      	movs	r2, #0
 8017cbc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8017cbe:	4815      	ldr	r0, [pc, #84]	; (8017d14 <MX_TIM7_Init+0x84>)
 8017cc0:	f005 f9ea 	bl	801d098 <HAL_TIM_Base_Init>
 8017cc4:	4603      	mov	r3, r0
 8017cc6:	2b00      	cmp	r3, #0
 8017cc8:	d001      	beq.n	8017cce <MX_TIM7_Init+0x3e>
  {
    Error_Handler();
 8017cca:	f000 f923 	bl	8017f14 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8017cce:	2300      	movs	r3, #0
 8017cd0:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8017cd2:	2300      	movs	r3, #0
 8017cd4:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8017cd6:	463b      	mov	r3, r7
 8017cd8:	4619      	mov	r1, r3
 8017cda:	480e      	ldr	r0, [pc, #56]	; (8017d14 <MX_TIM7_Init+0x84>)
 8017cdc:	f005 ffda 	bl	801dc94 <HAL_TIMEx_MasterConfigSynchronization>
 8017ce0:	4603      	mov	r3, r0
 8017ce2:	2b00      	cmp	r3, #0
 8017ce4:	d001      	beq.n	8017cea <MX_TIM7_Init+0x5a>
  {
    Error_Handler();
 8017ce6:	f000 f915 	bl	8017f14 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */
  __HAL_TIM_ENABLE_DMA(&htim7,TIM_DMA_UPDATE);
 8017cea:	4b0a      	ldr	r3, [pc, #40]	; (8017d14 <MX_TIM7_Init+0x84>)
 8017cec:	681b      	ldr	r3, [r3, #0]
 8017cee:	68da      	ldr	r2, [r3, #12]
 8017cf0:	4b08      	ldr	r3, [pc, #32]	; (8017d14 <MX_TIM7_Init+0x84>)
 8017cf2:	681b      	ldr	r3, [r3, #0]
 8017cf4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8017cf8:	60da      	str	r2, [r3, #12]
  __HAL_TIM_ENABLE(&htim7);
 8017cfa:	4b06      	ldr	r3, [pc, #24]	; (8017d14 <MX_TIM7_Init+0x84>)
 8017cfc:	681b      	ldr	r3, [r3, #0]
 8017cfe:	681a      	ldr	r2, [r3, #0]
 8017d00:	4b04      	ldr	r3, [pc, #16]	; (8017d14 <MX_TIM7_Init+0x84>)
 8017d02:	681b      	ldr	r3, [r3, #0]
 8017d04:	f042 0201 	orr.w	r2, r2, #1
 8017d08:	601a      	str	r2, [r3, #0]
  /* USER CODE END TIM7_Init 2 */

}
 8017d0a:	bf00      	nop
 8017d0c:	3708      	adds	r7, #8
 8017d0e:	46bd      	mov	sp, r7
 8017d10:	bd80      	pop	{r7, pc}
 8017d12:	bf00      	nop
 8017d14:	20006bdc 	.word	0x20006bdc
 8017d18:	40001400 	.word	0x40001400

08017d1c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8017d1c:	b580      	push	{r7, lr}
 8017d1e:	b082      	sub	sp, #8
 8017d20:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8017d22:	2300      	movs	r3, #0
 8017d24:	607b      	str	r3, [r7, #4]
 8017d26:	4b17      	ldr	r3, [pc, #92]	; (8017d84 <MX_DMA_Init+0x68>)
 8017d28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8017d2a:	4a16      	ldr	r2, [pc, #88]	; (8017d84 <MX_DMA_Init+0x68>)
 8017d2c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8017d30:	6313      	str	r3, [r2, #48]	; 0x30
 8017d32:	4b14      	ldr	r3, [pc, #80]	; (8017d84 <MX_DMA_Init+0x68>)
 8017d34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8017d36:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8017d3a:	607b      	str	r3, [r7, #4]
 8017d3c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8017d3e:	2300      	movs	r3, #0
 8017d40:	603b      	str	r3, [r7, #0]
 8017d42:	4b10      	ldr	r3, [pc, #64]	; (8017d84 <MX_DMA_Init+0x68>)
 8017d44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8017d46:	4a0f      	ldr	r2, [pc, #60]	; (8017d84 <MX_DMA_Init+0x68>)
 8017d48:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8017d4c:	6313      	str	r3, [r2, #48]	; 0x30
 8017d4e:	4b0d      	ldr	r3, [pc, #52]	; (8017d84 <MX_DMA_Init+0x68>)
 8017d50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8017d52:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8017d56:	603b      	str	r3, [r7, #0]
 8017d58:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8017d5a:	2200      	movs	r2, #0
 8017d5c:	2100      	movs	r1, #0
 8017d5e:	2010      	movs	r0, #16
 8017d60:	f000 ffdd 	bl	8018d1e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8017d64:	2010      	movs	r0, #16
 8017d66:	f000 fff6 	bl	8018d56 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8017d6a:	2200      	movs	r2, #0
 8017d6c:	2100      	movs	r1, #0
 8017d6e:	2038      	movs	r0, #56	; 0x38
 8017d70:	f000 ffd5 	bl	8018d1e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8017d74:	2038      	movs	r0, #56	; 0x38
 8017d76:	f000 ffee 	bl	8018d56 <HAL_NVIC_EnableIRQ>

}
 8017d7a:	bf00      	nop
 8017d7c:	3708      	adds	r7, #8
 8017d7e:	46bd      	mov	sp, r7
 8017d80:	bd80      	pop	{r7, pc}
 8017d82:	bf00      	nop
 8017d84:	40023800 	.word	0x40023800

08017d88 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8017d88:	b580      	push	{r7, lr}
 8017d8a:	b08a      	sub	sp, #40	; 0x28
 8017d8c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8017d8e:	f107 0314 	add.w	r3, r7, #20
 8017d92:	2200      	movs	r2, #0
 8017d94:	601a      	str	r2, [r3, #0]
 8017d96:	605a      	str	r2, [r3, #4]
 8017d98:	609a      	str	r2, [r3, #8]
 8017d9a:	60da      	str	r2, [r3, #12]
 8017d9c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8017d9e:	2300      	movs	r3, #0
 8017da0:	613b      	str	r3, [r7, #16]
 8017da2:	4b4e      	ldr	r3, [pc, #312]	; (8017edc <MX_GPIO_Init+0x154>)
 8017da4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8017da6:	4a4d      	ldr	r2, [pc, #308]	; (8017edc <MX_GPIO_Init+0x154>)
 8017da8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8017dac:	6313      	str	r3, [r2, #48]	; 0x30
 8017dae:	4b4b      	ldr	r3, [pc, #300]	; (8017edc <MX_GPIO_Init+0x154>)
 8017db0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8017db2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8017db6:	613b      	str	r3, [r7, #16]
 8017db8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8017dba:	2300      	movs	r3, #0
 8017dbc:	60fb      	str	r3, [r7, #12]
 8017dbe:	4b47      	ldr	r3, [pc, #284]	; (8017edc <MX_GPIO_Init+0x154>)
 8017dc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8017dc2:	4a46      	ldr	r2, [pc, #280]	; (8017edc <MX_GPIO_Init+0x154>)
 8017dc4:	f043 0301 	orr.w	r3, r3, #1
 8017dc8:	6313      	str	r3, [r2, #48]	; 0x30
 8017dca:	4b44      	ldr	r3, [pc, #272]	; (8017edc <MX_GPIO_Init+0x154>)
 8017dcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8017dce:	f003 0301 	and.w	r3, r3, #1
 8017dd2:	60fb      	str	r3, [r7, #12]
 8017dd4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8017dd6:	2300      	movs	r3, #0
 8017dd8:	60bb      	str	r3, [r7, #8]
 8017dda:	4b40      	ldr	r3, [pc, #256]	; (8017edc <MX_GPIO_Init+0x154>)
 8017ddc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8017dde:	4a3f      	ldr	r2, [pc, #252]	; (8017edc <MX_GPIO_Init+0x154>)
 8017de0:	f043 0304 	orr.w	r3, r3, #4
 8017de4:	6313      	str	r3, [r2, #48]	; 0x30
 8017de6:	4b3d      	ldr	r3, [pc, #244]	; (8017edc <MX_GPIO_Init+0x154>)
 8017de8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8017dea:	f003 0304 	and.w	r3, r3, #4
 8017dee:	60bb      	str	r3, [r7, #8]
 8017df0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8017df2:	2300      	movs	r3, #0
 8017df4:	607b      	str	r3, [r7, #4]
 8017df6:	4b39      	ldr	r3, [pc, #228]	; (8017edc <MX_GPIO_Init+0x154>)
 8017df8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8017dfa:	4a38      	ldr	r2, [pc, #224]	; (8017edc <MX_GPIO_Init+0x154>)
 8017dfc:	f043 0302 	orr.w	r3, r3, #2
 8017e00:	6313      	str	r3, [r2, #48]	; 0x30
 8017e02:	4b36      	ldr	r3, [pc, #216]	; (8017edc <MX_GPIO_Init+0x154>)
 8017e04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8017e06:	f003 0302 	and.w	r3, r3, #2
 8017e0a:	607b      	str	r3, [r7, #4]
 8017e0c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Fo2_GPIO_Port, Fo2_Pin, GPIO_PIN_RESET);
 8017e0e:	2200      	movs	r2, #0
 8017e10:	2104      	movs	r1, #4
 8017e12:	4833      	ldr	r0, [pc, #204]	; (8017ee0 <MX_GPIO_Init+0x158>)
 8017e14:	f001 fff0 	bl	8019df8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, Az_Pin|Ay_Pin|LcdRs_Pin, GPIO_PIN_RESET);
 8017e18:	2200      	movs	r2, #0
 8017e1a:	f44f 6103 	mov.w	r1, #2096	; 0x830
 8017e1e:	4831      	ldr	r0, [pc, #196]	; (8017ee4 <MX_GPIO_Init+0x15c>)
 8017e20:	f001 ffea 	bl	8019df8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, Ax_Pin|Dres_Pin, GPIO_PIN_RESET);
 8017e24:	2200      	movs	r2, #0
 8017e26:	f240 2101 	movw	r1, #513	; 0x201
 8017e2a:	482f      	ldr	r0, [pc, #188]	; (8017ee8 <MX_GPIO_Init+0x160>)
 8017e2c:	f001 ffe4 	bl	8019df8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SS_Pin|TpCs_Pin, GPIO_PIN_SET);
 8017e30:	2201      	movs	r2, #1
 8017e32:	f44f 5182 	mov.w	r1, #4160	; 0x1040
 8017e36:	482c      	ldr	r0, [pc, #176]	; (8017ee8 <MX_GPIO_Init+0x160>)
 8017e38:	f001 ffde 	bl	8019df8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LcdCs_GPIO_Port, LcdCs_Pin, GPIO_PIN_SET);
 8017e3c:	2201      	movs	r2, #1
 8017e3e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8017e42:	4828      	ldr	r0, [pc, #160]	; (8017ee4 <MX_GPIO_Init+0x15c>)
 8017e44:	f001 ffd8 	bl	8019df8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : Fo2_Pin */
  GPIO_InitStruct.Pin = Fo2_Pin;
 8017e48:	2304      	movs	r3, #4
 8017e4a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8017e4c:	2301      	movs	r3, #1
 8017e4e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8017e50:	2300      	movs	r3, #0
 8017e52:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8017e54:	2300      	movs	r3, #0
 8017e56:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(Fo2_GPIO_Port, &GPIO_InitStruct);
 8017e58:	f107 0314 	add.w	r3, r7, #20
 8017e5c:	4619      	mov	r1, r3
 8017e5e:	4820      	ldr	r0, [pc, #128]	; (8017ee0 <MX_GPIO_Init+0x158>)
 8017e60:	f001 fe1e 	bl	8019aa0 <HAL_GPIO_Init>

  /*Configure GPIO pins : Az_Pin Ay_Pin LcdRs_Pin LcdCs_Pin */
  GPIO_InitStruct.Pin = Az_Pin|Ay_Pin|LcdRs_Pin|LcdCs_Pin;
 8017e64:	f641 0330 	movw	r3, #6192	; 0x1830
 8017e68:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8017e6a:	2301      	movs	r3, #1
 8017e6c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8017e6e:	2300      	movs	r3, #0
 8017e70:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8017e72:	2300      	movs	r3, #0
 8017e74:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8017e76:	f107 0314 	add.w	r3, r7, #20
 8017e7a:	4619      	mov	r1, r3
 8017e7c:	4819      	ldr	r0, [pc, #100]	; (8017ee4 <MX_GPIO_Init+0x15c>)
 8017e7e:	f001 fe0f 	bl	8019aa0 <HAL_GPIO_Init>

  /*Configure GPIO pins : Ax_Pin SS_Pin TpCs_Pin Dres_Pin */
  GPIO_InitStruct.Pin = Ax_Pin|SS_Pin|TpCs_Pin|Dres_Pin;
 8017e82:	f241 2341 	movw	r3, #4673	; 0x1241
 8017e86:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8017e88:	2301      	movs	r3, #1
 8017e8a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8017e8c:	2300      	movs	r3, #0
 8017e8e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8017e90:	2300      	movs	r3, #0
 8017e92:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8017e94:	f107 0314 	add.w	r3, r7, #20
 8017e98:	4619      	mov	r1, r3
 8017e9a:	4813      	ldr	r0, [pc, #76]	; (8017ee8 <MX_GPIO_Init+0x160>)
 8017e9c:	f001 fe00 	bl	8019aa0 <HAL_GPIO_Init>

  /*Configure GPIO pin : Boot1_Pin */
  GPIO_InitStruct.Pin = Boot1_Pin;
 8017ea0:	2304      	movs	r3, #4
 8017ea2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8017ea4:	2300      	movs	r3, #0
 8017ea6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8017ea8:	2300      	movs	r3, #0
 8017eaa:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Boot1_GPIO_Port, &GPIO_InitStruct);
 8017eac:	f107 0314 	add.w	r3, r7, #20
 8017eb0:	4619      	mov	r1, r3
 8017eb2:	480d      	ldr	r0, [pc, #52]	; (8017ee8 <MX_GPIO_Init+0x160>)
 8017eb4:	f001 fdf4 	bl	8019aa0 <HAL_GPIO_Init>

  /*Configure GPIO pin : TpI_Pin */
  GPIO_InitStruct.Pin = TpI_Pin;
 8017eb8:	f44f 7380 	mov.w	r3, #256	; 0x100
 8017ebc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8017ebe:	2300      	movs	r3, #0
 8017ec0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8017ec2:	2301      	movs	r3, #1
 8017ec4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(TpI_GPIO_Port, &GPIO_InitStruct);
 8017ec6:	f107 0314 	add.w	r3, r7, #20
 8017eca:	4619      	mov	r1, r3
 8017ecc:	4806      	ldr	r0, [pc, #24]	; (8017ee8 <MX_GPIO_Init+0x160>)
 8017ece:	f001 fde7 	bl	8019aa0 <HAL_GPIO_Init>

}
 8017ed2:	bf00      	nop
 8017ed4:	3728      	adds	r7, #40	; 0x28
 8017ed6:	46bd      	mov	sp, r7
 8017ed8:	bd80      	pop	{r7, pc}
 8017eda:	bf00      	nop
 8017edc:	40023800 	.word	0x40023800
 8017ee0:	40020000 	.word	0x40020000
 8017ee4:	40020800 	.word	0x40020800
 8017ee8:	40020400 	.word	0x40020400

08017eec <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
// Callback: timer has rolled over
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8017eec:	b580      	push	{r7, lr}
 8017eee:	b082      	sub	sp, #8
 8017ef0:	af00      	add	r7, sp, #0
 8017ef2:	6078      	str	r0, [r7, #4]
  // Check which version of the timer triggered this callback
  if (htim == &htim3 )
 8017ef4:	687b      	ldr	r3, [r7, #4]
 8017ef6:	4a06      	ldr	r2, [pc, #24]	; (8017f10 <HAL_TIM_PeriodElapsedCallback+0x24>)
 8017ef8:	4293      	cmp	r3, r2
 8017efa:	d105      	bne.n	8017f08 <HAL_TIM_PeriodElapsedCallback+0x1c>
  {
	  htim->Instance->SR =0;
 8017efc:	687b      	ldr	r3, [r7, #4]
 8017efe:	681b      	ldr	r3, [r3, #0]
 8017f00:	2200      	movs	r2, #0
 8017f02:	611a      	str	r2, [r3, #16]
	  Tim3_ISP();
 8017f04:	f7f4 fd20 	bl	800c948 <Tim3_ISP>
  }
}
 8017f08:	bf00      	nop
 8017f0a:	3708      	adds	r7, #8
 8017f0c:	46bd      	mov	sp, r7
 8017f0e:	bd80      	pop	{r7, pc}
 8017f10:	20006984 	.word	0x20006984

08017f14 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8017f14:	b480      	push	{r7}
 8017f16:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8017f18:	b672      	cpsid	i
}
 8017f1a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8017f1c:	e7fe      	b.n	8017f1c <Error_Handler+0x8>
	...

08017f20 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8017f20:	b480      	push	{r7}
 8017f22:	b083      	sub	sp, #12
 8017f24:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8017f26:	2300      	movs	r3, #0
 8017f28:	607b      	str	r3, [r7, #4]
 8017f2a:	4b10      	ldr	r3, [pc, #64]	; (8017f6c <HAL_MspInit+0x4c>)
 8017f2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8017f2e:	4a0f      	ldr	r2, [pc, #60]	; (8017f6c <HAL_MspInit+0x4c>)
 8017f30:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8017f34:	6453      	str	r3, [r2, #68]	; 0x44
 8017f36:	4b0d      	ldr	r3, [pc, #52]	; (8017f6c <HAL_MspInit+0x4c>)
 8017f38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8017f3a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8017f3e:	607b      	str	r3, [r7, #4]
 8017f40:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8017f42:	2300      	movs	r3, #0
 8017f44:	603b      	str	r3, [r7, #0]
 8017f46:	4b09      	ldr	r3, [pc, #36]	; (8017f6c <HAL_MspInit+0x4c>)
 8017f48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8017f4a:	4a08      	ldr	r2, [pc, #32]	; (8017f6c <HAL_MspInit+0x4c>)
 8017f4c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8017f50:	6413      	str	r3, [r2, #64]	; 0x40
 8017f52:	4b06      	ldr	r3, [pc, #24]	; (8017f6c <HAL_MspInit+0x4c>)
 8017f54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8017f56:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8017f5a:	603b      	str	r3, [r7, #0]
 8017f5c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8017f5e:	bf00      	nop
 8017f60:	370c      	adds	r7, #12
 8017f62:	46bd      	mov	sp, r7
 8017f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017f68:	4770      	bx	lr
 8017f6a:	bf00      	nop
 8017f6c:	40023800 	.word	0x40023800

08017f70 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8017f70:	b580      	push	{r7, lr}
 8017f72:	b08c      	sub	sp, #48	; 0x30
 8017f74:	af00      	add	r7, sp, #0
 8017f76:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8017f78:	f107 031c 	add.w	r3, r7, #28
 8017f7c:	2200      	movs	r2, #0
 8017f7e:	601a      	str	r2, [r3, #0]
 8017f80:	605a      	str	r2, [r3, #4]
 8017f82:	609a      	str	r2, [r3, #8]
 8017f84:	60da      	str	r2, [r3, #12]
 8017f86:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8017f88:	687b      	ldr	r3, [r7, #4]
 8017f8a:	681b      	ldr	r3, [r3, #0]
 8017f8c:	4a45      	ldr	r2, [pc, #276]	; (80180a4 <HAL_ADC_MspInit+0x134>)
 8017f8e:	4293      	cmp	r3, r2
 8017f90:	d157      	bne.n	8018042 <HAL_ADC_MspInit+0xd2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8017f92:	2300      	movs	r3, #0
 8017f94:	61bb      	str	r3, [r7, #24]
 8017f96:	4b44      	ldr	r3, [pc, #272]	; (80180a8 <HAL_ADC_MspInit+0x138>)
 8017f98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8017f9a:	4a43      	ldr	r2, [pc, #268]	; (80180a8 <HAL_ADC_MspInit+0x138>)
 8017f9c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8017fa0:	6453      	str	r3, [r2, #68]	; 0x44
 8017fa2:	4b41      	ldr	r3, [pc, #260]	; (80180a8 <HAL_ADC_MspInit+0x138>)
 8017fa4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8017fa6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8017faa:	61bb      	str	r3, [r7, #24]
 8017fac:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8017fae:	2300      	movs	r3, #0
 8017fb0:	617b      	str	r3, [r7, #20]
 8017fb2:	4b3d      	ldr	r3, [pc, #244]	; (80180a8 <HAL_ADC_MspInit+0x138>)
 8017fb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8017fb6:	4a3c      	ldr	r2, [pc, #240]	; (80180a8 <HAL_ADC_MspInit+0x138>)
 8017fb8:	f043 0301 	orr.w	r3, r3, #1
 8017fbc:	6313      	str	r3, [r2, #48]	; 0x30
 8017fbe:	4b3a      	ldr	r3, [pc, #232]	; (80180a8 <HAL_ADC_MspInit+0x138>)
 8017fc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8017fc2:	f003 0301 	and.w	r3, r3, #1
 8017fc6:	617b      	str	r3, [r7, #20]
 8017fc8:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PA6     ------> ADC1_IN6
    */
    GPIO_InitStruct.Pin = Ao_Pin;
 8017fca:	2340      	movs	r3, #64	; 0x40
 8017fcc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8017fce:	2303      	movs	r3, #3
 8017fd0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8017fd2:	2300      	movs	r3, #0
 8017fd4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(Ao_GPIO_Port, &GPIO_InitStruct);
 8017fd6:	f107 031c 	add.w	r3, r7, #28
 8017fda:	4619      	mov	r1, r3
 8017fdc:	4833      	ldr	r0, [pc, #204]	; (80180ac <HAL_ADC_MspInit+0x13c>)
 8017fde:	f001 fd5f 	bl	8019aa0 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8017fe2:	4b33      	ldr	r3, [pc, #204]	; (80180b0 <HAL_ADC_MspInit+0x140>)
 8017fe4:	4a33      	ldr	r2, [pc, #204]	; (80180b4 <HAL_ADC_MspInit+0x144>)
 8017fe6:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8017fe8:	4b31      	ldr	r3, [pc, #196]	; (80180b0 <HAL_ADC_MspInit+0x140>)
 8017fea:	2200      	movs	r2, #0
 8017fec:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8017fee:	4b30      	ldr	r3, [pc, #192]	; (80180b0 <HAL_ADC_MspInit+0x140>)
 8017ff0:	2200      	movs	r2, #0
 8017ff2:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8017ff4:	4b2e      	ldr	r3, [pc, #184]	; (80180b0 <HAL_ADC_MspInit+0x140>)
 8017ff6:	2200      	movs	r2, #0
 8017ff8:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8017ffa:	4b2d      	ldr	r3, [pc, #180]	; (80180b0 <HAL_ADC_MspInit+0x140>)
 8017ffc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8018000:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8018002:	4b2b      	ldr	r3, [pc, #172]	; (80180b0 <HAL_ADC_MspInit+0x140>)
 8018004:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8018008:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 801800a:	4b29      	ldr	r3, [pc, #164]	; (80180b0 <HAL_ADC_MspInit+0x140>)
 801800c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8018010:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 8018012:	4b27      	ldr	r3, [pc, #156]	; (80180b0 <HAL_ADC_MspInit+0x140>)
 8018014:	2200      	movs	r2, #0
 8018016:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8018018:	4b25      	ldr	r3, [pc, #148]	; (80180b0 <HAL_ADC_MspInit+0x140>)
 801801a:	2200      	movs	r2, #0
 801801c:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 801801e:	4b24      	ldr	r3, [pc, #144]	; (80180b0 <HAL_ADC_MspInit+0x140>)
 8018020:	2200      	movs	r2, #0
 8018022:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8018024:	4822      	ldr	r0, [pc, #136]	; (80180b0 <HAL_ADC_MspInit+0x140>)
 8018026:	f000 ff47 	bl	8018eb8 <HAL_DMA_Init>
 801802a:	4603      	mov	r3, r0
 801802c:	2b00      	cmp	r3, #0
 801802e:	d001      	beq.n	8018034 <HAL_ADC_MspInit+0xc4>
    {
      Error_Handler();
 8018030:	f7ff ff70 	bl	8017f14 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8018034:	687b      	ldr	r3, [r7, #4]
 8018036:	4a1e      	ldr	r2, [pc, #120]	; (80180b0 <HAL_ADC_MspInit+0x140>)
 8018038:	639a      	str	r2, [r3, #56]	; 0x38
 801803a:	4a1d      	ldr	r2, [pc, #116]	; (80180b0 <HAL_ADC_MspInit+0x140>)
 801803c:	687b      	ldr	r3, [r7, #4]
 801803e:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8018040:	e02c      	b.n	801809c <HAL_ADC_MspInit+0x12c>
  else if(hadc->Instance==ADC2)
 8018042:	687b      	ldr	r3, [r7, #4]
 8018044:	681b      	ldr	r3, [r3, #0]
 8018046:	4a1c      	ldr	r2, [pc, #112]	; (80180b8 <HAL_ADC_MspInit+0x148>)
 8018048:	4293      	cmp	r3, r2
 801804a:	d127      	bne.n	801809c <HAL_ADC_MspInit+0x12c>
    __HAL_RCC_ADC2_CLK_ENABLE();
 801804c:	2300      	movs	r3, #0
 801804e:	613b      	str	r3, [r7, #16]
 8018050:	4b15      	ldr	r3, [pc, #84]	; (80180a8 <HAL_ADC_MspInit+0x138>)
 8018052:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8018054:	4a14      	ldr	r2, [pc, #80]	; (80180a8 <HAL_ADC_MspInit+0x138>)
 8018056:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 801805a:	6453      	str	r3, [r2, #68]	; 0x44
 801805c:	4b12      	ldr	r3, [pc, #72]	; (80180a8 <HAL_ADC_MspInit+0x138>)
 801805e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8018060:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8018064:	613b      	str	r3, [r7, #16]
 8018066:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8018068:	2300      	movs	r3, #0
 801806a:	60fb      	str	r3, [r7, #12]
 801806c:	4b0e      	ldr	r3, [pc, #56]	; (80180a8 <HAL_ADC_MspInit+0x138>)
 801806e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8018070:	4a0d      	ldr	r2, [pc, #52]	; (80180a8 <HAL_ADC_MspInit+0x138>)
 8018072:	f043 0301 	orr.w	r3, r3, #1
 8018076:	6313      	str	r3, [r2, #48]	; 0x30
 8018078:	4b0b      	ldr	r3, [pc, #44]	; (80180a8 <HAL_ADC_MspInit+0x138>)
 801807a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801807c:	f003 0301 	and.w	r3, r3, #1
 8018080:	60fb      	str	r3, [r7, #12]
 8018082:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = AoA7_Pin;
 8018084:	2380      	movs	r3, #128	; 0x80
 8018086:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8018088:	2303      	movs	r3, #3
 801808a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801808c:	2300      	movs	r3, #0
 801808e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(AoA7_GPIO_Port, &GPIO_InitStruct);
 8018090:	f107 031c 	add.w	r3, r7, #28
 8018094:	4619      	mov	r1, r3
 8018096:	4805      	ldr	r0, [pc, #20]	; (80180ac <HAL_ADC_MspInit+0x13c>)
 8018098:	f001 fd02 	bl	8019aa0 <HAL_GPIO_Init>
}
 801809c:	bf00      	nop
 801809e:	3730      	adds	r7, #48	; 0x30
 80180a0:	46bd      	mov	sp, r7
 80180a2:	bd80      	pop	{r7, pc}
 80180a4:	40012000 	.word	0x40012000
 80180a8:	40023800 	.word	0x40023800
 80180ac:	40020000 	.word	0x40020000
 80180b0:	20006b18 	.word	0x20006b18
 80180b4:	40026410 	.word	0x40026410
 80180b8:	40012100 	.word	0x40012100

080180bc <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 80180bc:	b580      	push	{r7, lr}
 80180be:	b08a      	sub	sp, #40	; 0x28
 80180c0:	af00      	add	r7, sp, #0
 80180c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80180c4:	f107 0314 	add.w	r3, r7, #20
 80180c8:	2200      	movs	r2, #0
 80180ca:	601a      	str	r2, [r3, #0]
 80180cc:	605a      	str	r2, [r3, #4]
 80180ce:	609a      	str	r2, [r3, #8]
 80180d0:	60da      	str	r2, [r3, #12]
 80180d2:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC)
 80180d4:	687b      	ldr	r3, [r7, #4]
 80180d6:	681b      	ldr	r3, [r3, #0]
 80180d8:	4a33      	ldr	r2, [pc, #204]	; (80181a8 <HAL_DAC_MspInit+0xec>)
 80180da:	4293      	cmp	r3, r2
 80180dc:	d15f      	bne.n	801819e <HAL_DAC_MspInit+0xe2>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 80180de:	2300      	movs	r3, #0
 80180e0:	613b      	str	r3, [r7, #16]
 80180e2:	4b32      	ldr	r3, [pc, #200]	; (80181ac <HAL_DAC_MspInit+0xf0>)
 80180e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80180e6:	4a31      	ldr	r2, [pc, #196]	; (80181ac <HAL_DAC_MspInit+0xf0>)
 80180e8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80180ec:	6413      	str	r3, [r2, #64]	; 0x40
 80180ee:	4b2f      	ldr	r3, [pc, #188]	; (80181ac <HAL_DAC_MspInit+0xf0>)
 80180f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80180f2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80180f6:	613b      	str	r3, [r7, #16]
 80180f8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80180fa:	2300      	movs	r3, #0
 80180fc:	60fb      	str	r3, [r7, #12]
 80180fe:	4b2b      	ldr	r3, [pc, #172]	; (80181ac <HAL_DAC_MspInit+0xf0>)
 8018100:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8018102:	4a2a      	ldr	r2, [pc, #168]	; (80181ac <HAL_DAC_MspInit+0xf0>)
 8018104:	f043 0301 	orr.w	r3, r3, #1
 8018108:	6313      	str	r3, [r2, #48]	; 0x30
 801810a:	4b28      	ldr	r3, [pc, #160]	; (80181ac <HAL_DAC_MspInit+0xf0>)
 801810c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801810e:	f003 0301 	and.w	r3, r3, #1
 8018112:	60fb      	str	r3, [r7, #12]
 8018114:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    PA5     ------> DAC_OUT2
    */
    GPIO_InitStruct.Pin = Fo4_Pin|Ap_Pin;
 8018116:	2330      	movs	r3, #48	; 0x30
 8018118:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 801811a:	2303      	movs	r3, #3
 801811c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801811e:	2300      	movs	r3, #0
 8018120:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8018122:	f107 0314 	add.w	r3, r7, #20
 8018126:	4619      	mov	r1, r3
 8018128:	4821      	ldr	r0, [pc, #132]	; (80181b0 <HAL_DAC_MspInit+0xf4>)
 801812a:	f001 fcb9 	bl	8019aa0 <HAL_GPIO_Init>

    /* DAC DMA Init */
    /* DAC1 Init */
    hdma_dac1.Instance = DMA1_Stream5;
 801812e:	4b21      	ldr	r3, [pc, #132]	; (80181b4 <HAL_DAC_MspInit+0xf8>)
 8018130:	4a21      	ldr	r2, [pc, #132]	; (80181b8 <HAL_DAC_MspInit+0xfc>)
 8018132:	601a      	str	r2, [r3, #0]
    hdma_dac1.Init.Channel = DMA_CHANNEL_7;
 8018134:	4b1f      	ldr	r3, [pc, #124]	; (80181b4 <HAL_DAC_MspInit+0xf8>)
 8018136:	f04f 6260 	mov.w	r2, #234881024	; 0xe000000
 801813a:	605a      	str	r2, [r3, #4]
    hdma_dac1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 801813c:	4b1d      	ldr	r3, [pc, #116]	; (80181b4 <HAL_DAC_MspInit+0xf8>)
 801813e:	2240      	movs	r2, #64	; 0x40
 8018140:	609a      	str	r2, [r3, #8]
    hdma_dac1.Init.PeriphInc = DMA_PINC_DISABLE;
 8018142:	4b1c      	ldr	r3, [pc, #112]	; (80181b4 <HAL_DAC_MspInit+0xf8>)
 8018144:	2200      	movs	r2, #0
 8018146:	60da      	str	r2, [r3, #12]
    hdma_dac1.Init.MemInc = DMA_MINC_ENABLE;
 8018148:	4b1a      	ldr	r3, [pc, #104]	; (80181b4 <HAL_DAC_MspInit+0xf8>)
 801814a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 801814e:	611a      	str	r2, [r3, #16]
    hdma_dac1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8018150:	4b18      	ldr	r3, [pc, #96]	; (80181b4 <HAL_DAC_MspInit+0xf8>)
 8018152:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8018156:	615a      	str	r2, [r3, #20]
    hdma_dac1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8018158:	4b16      	ldr	r3, [pc, #88]	; (80181b4 <HAL_DAC_MspInit+0xf8>)
 801815a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 801815e:	619a      	str	r2, [r3, #24]
    hdma_dac1.Init.Mode = DMA_NORMAL;
 8018160:	4b14      	ldr	r3, [pc, #80]	; (80181b4 <HAL_DAC_MspInit+0xf8>)
 8018162:	2200      	movs	r2, #0
 8018164:	61da      	str	r2, [r3, #28]
    hdma_dac1.Init.Priority = DMA_PRIORITY_LOW;
 8018166:	4b13      	ldr	r3, [pc, #76]	; (80181b4 <HAL_DAC_MspInit+0xf8>)
 8018168:	2200      	movs	r2, #0
 801816a:	621a      	str	r2, [r3, #32]
    hdma_dac1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 801816c:	4b11      	ldr	r3, [pc, #68]	; (80181b4 <HAL_DAC_MspInit+0xf8>)
 801816e:	2200      	movs	r2, #0
 8018170:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_dac1) != HAL_OK)
 8018172:	4810      	ldr	r0, [pc, #64]	; (80181b4 <HAL_DAC_MspInit+0xf8>)
 8018174:	f000 fea0 	bl	8018eb8 <HAL_DMA_Init>
 8018178:	4603      	mov	r3, r0
 801817a:	2b00      	cmp	r3, #0
 801817c:	d001      	beq.n	8018182 <HAL_DAC_MspInit+0xc6>
    {
      Error_Handler();
 801817e:	f7ff fec9 	bl	8017f14 <Error_Handler>
    }

    __HAL_LINKDMA(hdac,DMA_Handle1,hdma_dac1);
 8018182:	687b      	ldr	r3, [r7, #4]
 8018184:	4a0b      	ldr	r2, [pc, #44]	; (80181b4 <HAL_DAC_MspInit+0xf8>)
 8018186:	609a      	str	r2, [r3, #8]
 8018188:	4a0a      	ldr	r2, [pc, #40]	; (80181b4 <HAL_DAC_MspInit+0xf8>)
 801818a:	687b      	ldr	r3, [r7, #4]
 801818c:	6393      	str	r3, [r2, #56]	; 0x38

    /* DAC interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 801818e:	2200      	movs	r2, #0
 8018190:	2100      	movs	r1, #0
 8018192:	2036      	movs	r0, #54	; 0x36
 8018194:	f000 fdc3 	bl	8018d1e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8018198:	2036      	movs	r0, #54	; 0x36
 801819a:	f000 fddc 	bl	8018d56 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }

}
 801819e:	bf00      	nop
 80181a0:	3728      	adds	r7, #40	; 0x28
 80181a2:	46bd      	mov	sp, r7
 80181a4:	bd80      	pop	{r7, pc}
 80181a6:	bf00      	nop
 80181a8:	40007400 	.word	0x40007400
 80181ac:	40023800 	.word	0x40023800
 80181b0:	40020000 	.word	0x40020000
 80181b4:	20006a24 	.word	0x20006a24
 80181b8:	40026088 	.word	0x40026088

080181bc <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80181bc:	b580      	push	{r7, lr}
 80181be:	b08c      	sub	sp, #48	; 0x30
 80181c0:	af00      	add	r7, sp, #0
 80181c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80181c4:	f107 031c 	add.w	r3, r7, #28
 80181c8:	2200      	movs	r2, #0
 80181ca:	601a      	str	r2, [r3, #0]
 80181cc:	605a      	str	r2, [r3, #4]
 80181ce:	609a      	str	r2, [r3, #8]
 80181d0:	60da      	str	r2, [r3, #12]
 80181d2:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 80181d4:	687b      	ldr	r3, [r7, #4]
 80181d6:	681b      	ldr	r3, [r3, #0]
 80181d8:	4a3a      	ldr	r2, [pc, #232]	; (80182c4 <HAL_SPI_MspInit+0x108>)
 80181da:	4293      	cmp	r3, r2
 80181dc:	d135      	bne.n	801824a <HAL_SPI_MspInit+0x8e>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80181de:	2300      	movs	r3, #0
 80181e0:	61bb      	str	r3, [r7, #24]
 80181e2:	4b39      	ldr	r3, [pc, #228]	; (80182c8 <HAL_SPI_MspInit+0x10c>)
 80181e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80181e6:	4a38      	ldr	r2, [pc, #224]	; (80182c8 <HAL_SPI_MspInit+0x10c>)
 80181e8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80181ec:	6413      	str	r3, [r2, #64]	; 0x40
 80181ee:	4b36      	ldr	r3, [pc, #216]	; (80182c8 <HAL_SPI_MspInit+0x10c>)
 80181f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80181f2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80181f6:	61bb      	str	r3, [r7, #24]
 80181f8:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80181fa:	2300      	movs	r3, #0
 80181fc:	617b      	str	r3, [r7, #20]
 80181fe:	4b32      	ldr	r3, [pc, #200]	; (80182c8 <HAL_SPI_MspInit+0x10c>)
 8018200:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8018202:	4a31      	ldr	r2, [pc, #196]	; (80182c8 <HAL_SPI_MspInit+0x10c>)
 8018204:	f043 0302 	orr.w	r3, r3, #2
 8018208:	6313      	str	r3, [r2, #48]	; 0x30
 801820a:	4b2f      	ldr	r3, [pc, #188]	; (80182c8 <HAL_SPI_MspInit+0x10c>)
 801820c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801820e:	f003 0302 	and.w	r3, r3, #2
 8018212:	617b      	str	r3, [r7, #20]
 8018214:	697b      	ldr	r3, [r7, #20]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = SCK_Pin|So_Pin|Si_Pin;
 8018216:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 801821a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801821c:	2302      	movs	r3, #2
 801821e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8018220:	2300      	movs	r3, #0
 8018222:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8018224:	2303      	movs	r3, #3
 8018226:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8018228:	2305      	movs	r3, #5
 801822a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 801822c:	f107 031c 	add.w	r3, r7, #28
 8018230:	4619      	mov	r1, r3
 8018232:	4826      	ldr	r0, [pc, #152]	; (80182cc <HAL_SPI_MspInit+0x110>)
 8018234:	f001 fc34 	bl	8019aa0 <HAL_GPIO_Init>

    /* SPI2 interrupt Init */
    HAL_NVIC_SetPriority(SPI2_IRQn, 1, 0);
 8018238:	2200      	movs	r2, #0
 801823a:	2101      	movs	r1, #1
 801823c:	2024      	movs	r0, #36	; 0x24
 801823e:	f000 fd6e 	bl	8018d1e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 8018242:	2024      	movs	r0, #36	; 0x24
 8018244:	f000 fd87 	bl	8018d56 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8018248:	e038      	b.n	80182bc <HAL_SPI_MspInit+0x100>
  else if(hspi->Instance==SPI3)
 801824a:	687b      	ldr	r3, [r7, #4]
 801824c:	681b      	ldr	r3, [r3, #0]
 801824e:	4a20      	ldr	r2, [pc, #128]	; (80182d0 <HAL_SPI_MspInit+0x114>)
 8018250:	4293      	cmp	r3, r2
 8018252:	d133      	bne.n	80182bc <HAL_SPI_MspInit+0x100>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8018254:	2300      	movs	r3, #0
 8018256:	613b      	str	r3, [r7, #16]
 8018258:	4b1b      	ldr	r3, [pc, #108]	; (80182c8 <HAL_SPI_MspInit+0x10c>)
 801825a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801825c:	4a1a      	ldr	r2, [pc, #104]	; (80182c8 <HAL_SPI_MspInit+0x10c>)
 801825e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8018262:	6413      	str	r3, [r2, #64]	; 0x40
 8018264:	4b18      	ldr	r3, [pc, #96]	; (80182c8 <HAL_SPI_MspInit+0x10c>)
 8018266:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8018268:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 801826c:	613b      	str	r3, [r7, #16]
 801826e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8018270:	2300      	movs	r3, #0
 8018272:	60fb      	str	r3, [r7, #12]
 8018274:	4b14      	ldr	r3, [pc, #80]	; (80182c8 <HAL_SPI_MspInit+0x10c>)
 8018276:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8018278:	4a13      	ldr	r2, [pc, #76]	; (80182c8 <HAL_SPI_MspInit+0x10c>)
 801827a:	f043 0302 	orr.w	r3, r3, #2
 801827e:	6313      	str	r3, [r2, #48]	; 0x30
 8018280:	4b11      	ldr	r3, [pc, #68]	; (80182c8 <HAL_SPI_MspInit+0x10c>)
 8018282:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8018284:	f003 0302 	and.w	r3, r3, #2
 8018288:	60fb      	str	r3, [r7, #12]
 801828a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = TpCk_Pin|TpSo_Pin|TpSi_Pin;
 801828c:	2338      	movs	r3, #56	; 0x38
 801828e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8018290:	2302      	movs	r3, #2
 8018292:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8018294:	2300      	movs	r3, #0
 8018296:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8018298:	2303      	movs	r3, #3
 801829a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 801829c:	2306      	movs	r3, #6
 801829e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80182a0:	f107 031c 	add.w	r3, r7, #28
 80182a4:	4619      	mov	r1, r3
 80182a6:	4809      	ldr	r0, [pc, #36]	; (80182cc <HAL_SPI_MspInit+0x110>)
 80182a8:	f001 fbfa 	bl	8019aa0 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(SPI3_IRQn, 1, 0);
 80182ac:	2200      	movs	r2, #0
 80182ae:	2101      	movs	r1, #1
 80182b0:	2033      	movs	r0, #51	; 0x33
 80182b2:	f000 fd34 	bl	8018d1e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI3_IRQn);
 80182b6:	2033      	movs	r0, #51	; 0x33
 80182b8:	f000 fd4d 	bl	8018d56 <HAL_NVIC_EnableIRQ>
}
 80182bc:	bf00      	nop
 80182be:	3730      	adds	r7, #48	; 0x30
 80182c0:	46bd      	mov	sp, r7
 80182c2:	bd80      	pop	{r7, pc}
 80182c4:	40003800 	.word	0x40003800
 80182c8:	40023800 	.word	0x40023800
 80182cc:	40020400 	.word	0x40020400
 80182d0:	40003c00 	.word	0x40003c00

080182d4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80182d4:	b580      	push	{r7, lr}
 80182d6:	b086      	sub	sp, #24
 80182d8:	af00      	add	r7, sp, #0
 80182da:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80182dc:	687b      	ldr	r3, [r7, #4]
 80182de:	681b      	ldr	r3, [r3, #0]
 80182e0:	4a2c      	ldr	r2, [pc, #176]	; (8018394 <HAL_TIM_Base_MspInit+0xc0>)
 80182e2:	4293      	cmp	r3, r2
 80182e4:	d10e      	bne.n	8018304 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80182e6:	2300      	movs	r3, #0
 80182e8:	617b      	str	r3, [r7, #20]
 80182ea:	4b2b      	ldr	r3, [pc, #172]	; (8018398 <HAL_TIM_Base_MspInit+0xc4>)
 80182ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80182ee:	4a2a      	ldr	r2, [pc, #168]	; (8018398 <HAL_TIM_Base_MspInit+0xc4>)
 80182f0:	f043 0301 	orr.w	r3, r3, #1
 80182f4:	6453      	str	r3, [r2, #68]	; 0x44
 80182f6:	4b28      	ldr	r3, [pc, #160]	; (8018398 <HAL_TIM_Base_MspInit+0xc4>)
 80182f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80182fa:	f003 0301 	and.w	r3, r3, #1
 80182fe:	617b      	str	r3, [r7, #20]
 8018300:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }

}
 8018302:	e042      	b.n	801838a <HAL_TIM_Base_MspInit+0xb6>
  else if(htim_base->Instance==TIM3)
 8018304:	687b      	ldr	r3, [r7, #4]
 8018306:	681b      	ldr	r3, [r3, #0]
 8018308:	4a24      	ldr	r2, [pc, #144]	; (801839c <HAL_TIM_Base_MspInit+0xc8>)
 801830a:	4293      	cmp	r3, r2
 801830c:	d116      	bne.n	801833c <HAL_TIM_Base_MspInit+0x68>
    __HAL_RCC_TIM3_CLK_ENABLE();
 801830e:	2300      	movs	r3, #0
 8018310:	613b      	str	r3, [r7, #16]
 8018312:	4b21      	ldr	r3, [pc, #132]	; (8018398 <HAL_TIM_Base_MspInit+0xc4>)
 8018314:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8018316:	4a20      	ldr	r2, [pc, #128]	; (8018398 <HAL_TIM_Base_MspInit+0xc4>)
 8018318:	f043 0302 	orr.w	r3, r3, #2
 801831c:	6413      	str	r3, [r2, #64]	; 0x40
 801831e:	4b1e      	ldr	r3, [pc, #120]	; (8018398 <HAL_TIM_Base_MspInit+0xc4>)
 8018320:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8018322:	f003 0302 	and.w	r3, r3, #2
 8018326:	613b      	str	r3, [r7, #16]
 8018328:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 801832a:	2200      	movs	r2, #0
 801832c:	2100      	movs	r1, #0
 801832e:	201d      	movs	r0, #29
 8018330:	f000 fcf5 	bl	8018d1e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8018334:	201d      	movs	r0, #29
 8018336:	f000 fd0e 	bl	8018d56 <HAL_NVIC_EnableIRQ>
}
 801833a:	e026      	b.n	801838a <HAL_TIM_Base_MspInit+0xb6>
  else if(htim_base->Instance==TIM5)
 801833c:	687b      	ldr	r3, [r7, #4]
 801833e:	681b      	ldr	r3, [r3, #0]
 8018340:	4a17      	ldr	r2, [pc, #92]	; (80183a0 <HAL_TIM_Base_MspInit+0xcc>)
 8018342:	4293      	cmp	r3, r2
 8018344:	d10e      	bne.n	8018364 <HAL_TIM_Base_MspInit+0x90>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8018346:	2300      	movs	r3, #0
 8018348:	60fb      	str	r3, [r7, #12]
 801834a:	4b13      	ldr	r3, [pc, #76]	; (8018398 <HAL_TIM_Base_MspInit+0xc4>)
 801834c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801834e:	4a12      	ldr	r2, [pc, #72]	; (8018398 <HAL_TIM_Base_MspInit+0xc4>)
 8018350:	f043 0308 	orr.w	r3, r3, #8
 8018354:	6413      	str	r3, [r2, #64]	; 0x40
 8018356:	4b10      	ldr	r3, [pc, #64]	; (8018398 <HAL_TIM_Base_MspInit+0xc4>)
 8018358:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801835a:	f003 0308 	and.w	r3, r3, #8
 801835e:	60fb      	str	r3, [r7, #12]
 8018360:	68fb      	ldr	r3, [r7, #12]
}
 8018362:	e012      	b.n	801838a <HAL_TIM_Base_MspInit+0xb6>
  else if(htim_base->Instance==TIM7)
 8018364:	687b      	ldr	r3, [r7, #4]
 8018366:	681b      	ldr	r3, [r3, #0]
 8018368:	4a0e      	ldr	r2, [pc, #56]	; (80183a4 <HAL_TIM_Base_MspInit+0xd0>)
 801836a:	4293      	cmp	r3, r2
 801836c:	d10d      	bne.n	801838a <HAL_TIM_Base_MspInit+0xb6>
    __HAL_RCC_TIM7_CLK_ENABLE();
 801836e:	2300      	movs	r3, #0
 8018370:	60bb      	str	r3, [r7, #8]
 8018372:	4b09      	ldr	r3, [pc, #36]	; (8018398 <HAL_TIM_Base_MspInit+0xc4>)
 8018374:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8018376:	4a08      	ldr	r2, [pc, #32]	; (8018398 <HAL_TIM_Base_MspInit+0xc4>)
 8018378:	f043 0320 	orr.w	r3, r3, #32
 801837c:	6413      	str	r3, [r2, #64]	; 0x40
 801837e:	4b06      	ldr	r3, [pc, #24]	; (8018398 <HAL_TIM_Base_MspInit+0xc4>)
 8018380:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8018382:	f003 0320 	and.w	r3, r3, #32
 8018386:	60bb      	str	r3, [r7, #8]
 8018388:	68bb      	ldr	r3, [r7, #8]
}
 801838a:	bf00      	nop
 801838c:	3718      	adds	r7, #24
 801838e:	46bd      	mov	sp, r7
 8018390:	bd80      	pop	{r7, pc}
 8018392:	bf00      	nop
 8018394:	40010000 	.word	0x40010000
 8018398:	40023800 	.word	0x40023800
 801839c:	40000400 	.word	0x40000400
 80183a0:	40000c00 	.word	0x40000c00
 80183a4:	40001400 	.word	0x40001400

080183a8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80183a8:	b480      	push	{r7}
 80183aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80183ac:	e7fe      	b.n	80183ac <NMI_Handler+0x4>

080183ae <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80183ae:	b480      	push	{r7}
 80183b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80183b2:	e7fe      	b.n	80183b2 <HardFault_Handler+0x4>

080183b4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80183b4:	b480      	push	{r7}
 80183b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80183b8:	e7fe      	b.n	80183b8 <MemManage_Handler+0x4>

080183ba <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80183ba:	b480      	push	{r7}
 80183bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80183be:	e7fe      	b.n	80183be <BusFault_Handler+0x4>

080183c0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80183c0:	b480      	push	{r7}
 80183c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80183c4:	e7fe      	b.n	80183c4 <UsageFault_Handler+0x4>

080183c6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80183c6:	b480      	push	{r7}
 80183c8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80183ca:	bf00      	nop
 80183cc:	46bd      	mov	sp, r7
 80183ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80183d2:	4770      	bx	lr

080183d4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80183d4:	b480      	push	{r7}
 80183d6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80183d8:	bf00      	nop
 80183da:	46bd      	mov	sp, r7
 80183dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80183e0:	4770      	bx	lr

080183e2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80183e2:	b480      	push	{r7}
 80183e4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80183e6:	bf00      	nop
 80183e8:	46bd      	mov	sp, r7
 80183ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80183ee:	4770      	bx	lr

080183f0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80183f0:	b580      	push	{r7, lr}
 80183f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80183f4:	f000 f902 	bl	80185fc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80183f8:	bf00      	nop
 80183fa:	bd80      	pop	{r7, pc}

080183fc <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 80183fc:	b580      	push	{r7, lr}
 80183fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1);
 8018400:	4802      	ldr	r0, [pc, #8]	; (801840c <DMA1_Stream5_IRQHandler+0x10>)
 8018402:	f000 fe29 	bl	8019058 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8018406:	bf00      	nop
 8018408:	bd80      	pop	{r7, pc}
 801840a:	bf00      	nop
 801840c:	20006a24 	.word	0x20006a24

08018410 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8018410:	b580      	push	{r7, lr}
 8018412:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8018414:	4802      	ldr	r0, [pc, #8]	; (8018420 <TIM3_IRQHandler+0x10>)
 8018416:	f004 feff 	bl	801d218 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 801841a:	bf00      	nop
 801841c:	bd80      	pop	{r7, pc}
 801841e:	bf00      	nop
 8018420:	20006984 	.word	0x20006984

08018424 <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 8018424:	b580      	push	{r7, lr}
 8018426:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 8018428:	4802      	ldr	r0, [pc, #8]	; (8018434 <SPI2_IRQHandler+0x10>)
 801842a:	f004 fbd9 	bl	801cbe0 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 801842e:	bf00      	nop
 8018430:	bd80      	pop	{r7, pc}
 8018432:	bf00      	nop
 8018434:	2000689c 	.word	0x2000689c

08018438 <SPI3_IRQHandler>:

/**
  * @brief This function handles SPI3 global interrupt.
  */
void SPI3_IRQHandler(void)
{
 8018438:	b580      	push	{r7, lr}
 801843a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI3_IRQn 0 */

  /* USER CODE END SPI3_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi3);
 801843c:	4802      	ldr	r0, [pc, #8]	; (8018448 <SPI3_IRQHandler+0x10>)
 801843e:	f004 fbcf 	bl	801cbe0 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI3_IRQn 1 */

  /* USER CODE END SPI3_IRQn 1 */
}
 8018442:	bf00      	nop
 8018444:	bd80      	pop	{r7, pc}
 8018446:	bf00      	nop
 8018448:	200069cc 	.word	0x200069cc

0801844c <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 801844c:	b580      	push	{r7, lr}
 801844e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8018450:	4802      	ldr	r0, [pc, #8]	; (801845c <DMA2_Stream0_IRQHandler+0x10>)
 8018452:	f000 fe01 	bl	8019058 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8018456:	bf00      	nop
 8018458:	bd80      	pop	{r7, pc}
 801845a:	bf00      	nop
 801845c:	20006b18 	.word	0x20006b18

08018460 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8018460:	b580      	push	{r7, lr}
 8018462:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8018464:	4802      	ldr	r0, [pc, #8]	; (8018470 <OTG_FS_IRQHandler+0x10>)
 8018466:	f001 fe37 	bl	801a0d8 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 801846a:	bf00      	nop
 801846c:	bd80      	pop	{r7, pc}
 801846e:	bf00      	nop
 8018470:	20007118 	.word	0x20007118

08018474 <_sbrk>:
 8018474:	b580      	push	{r7, lr}
 8018476:	b086      	sub	sp, #24
 8018478:	af00      	add	r7, sp, #0
 801847a:	6078      	str	r0, [r7, #4]
 801847c:	4a14      	ldr	r2, [pc, #80]	; (80184d0 <_sbrk+0x5c>)
 801847e:	4b15      	ldr	r3, [pc, #84]	; (80184d4 <_sbrk+0x60>)
 8018480:	1ad3      	subs	r3, r2, r3
 8018482:	617b      	str	r3, [r7, #20]
 8018484:	697b      	ldr	r3, [r7, #20]
 8018486:	613b      	str	r3, [r7, #16]
 8018488:	4b13      	ldr	r3, [pc, #76]	; (80184d8 <_sbrk+0x64>)
 801848a:	681b      	ldr	r3, [r3, #0]
 801848c:	2b00      	cmp	r3, #0
 801848e:	d102      	bne.n	8018496 <_sbrk+0x22>
 8018490:	4b11      	ldr	r3, [pc, #68]	; (80184d8 <_sbrk+0x64>)
 8018492:	4a12      	ldr	r2, [pc, #72]	; (80184dc <_sbrk+0x68>)
 8018494:	601a      	str	r2, [r3, #0]
 8018496:	4b10      	ldr	r3, [pc, #64]	; (80184d8 <_sbrk+0x64>)
 8018498:	681a      	ldr	r2, [r3, #0]
 801849a:	687b      	ldr	r3, [r7, #4]
 801849c:	4413      	add	r3, r2
 801849e:	693a      	ldr	r2, [r7, #16]
 80184a0:	429a      	cmp	r2, r3
 80184a2:	d207      	bcs.n	80184b4 <_sbrk+0x40>
 80184a4:	f00a fcb6 	bl	8022e14 <__errno>
 80184a8:	4603      	mov	r3, r0
 80184aa:	220c      	movs	r2, #12
 80184ac:	601a      	str	r2, [r3, #0]
 80184ae:	f04f 33ff 	mov.w	r3, #4294967295
 80184b2:	e009      	b.n	80184c8 <_sbrk+0x54>
 80184b4:	4b08      	ldr	r3, [pc, #32]	; (80184d8 <_sbrk+0x64>)
 80184b6:	681b      	ldr	r3, [r3, #0]
 80184b8:	60fb      	str	r3, [r7, #12]
 80184ba:	4b07      	ldr	r3, [pc, #28]	; (80184d8 <_sbrk+0x64>)
 80184bc:	681a      	ldr	r2, [r3, #0]
 80184be:	687b      	ldr	r3, [r7, #4]
 80184c0:	4413      	add	r3, r2
 80184c2:	4a05      	ldr	r2, [pc, #20]	; (80184d8 <_sbrk+0x64>)
 80184c4:	6013      	str	r3, [r2, #0]
 80184c6:	68fb      	ldr	r3, [r7, #12]
 80184c8:	4618      	mov	r0, r3
 80184ca:	3718      	adds	r7, #24
 80184cc:	46bd      	mov	sp, r7
 80184ce:	bd80      	pop	{r7, pc}
 80184d0:	20020000 	.word	0x20020000
 80184d4:	00000600 	.word	0x00000600
 80184d8:	200007b0 	.word	0x200007b0
 80184dc:	20007530 	.word	0x20007530

080184e0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80184e0:	b480      	push	{r7}
 80184e2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80184e4:	4b06      	ldr	r3, [pc, #24]	; (8018500 <SystemInit+0x20>)
 80184e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80184ea:	4a05      	ldr	r2, [pc, #20]	; (8018500 <SystemInit+0x20>)
 80184ec:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80184f0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80184f4:	bf00      	nop
 80184f6:	46bd      	mov	sp, r7
 80184f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80184fc:	4770      	bx	lr
 80184fe:	bf00      	nop
 8018500:	e000ed00 	.word	0xe000ed00

08018504 <Reset_Handler>:
 8018504:	f8df d034 	ldr.w	sp, [pc, #52]	; 801853c <LoopFillZerobss+0x12>
 8018508:	480d      	ldr	r0, [pc, #52]	; (8018540 <LoopFillZerobss+0x16>)
 801850a:	490e      	ldr	r1, [pc, #56]	; (8018544 <LoopFillZerobss+0x1a>)
 801850c:	4a0e      	ldr	r2, [pc, #56]	; (8018548 <LoopFillZerobss+0x1e>)
 801850e:	2300      	movs	r3, #0
 8018510:	e002      	b.n	8018518 <LoopCopyDataInit>

08018512 <CopyDataInit>:
 8018512:	58d4      	ldr	r4, [r2, r3]
 8018514:	50c4      	str	r4, [r0, r3]
 8018516:	3304      	adds	r3, #4

08018518 <LoopCopyDataInit>:
 8018518:	18c4      	adds	r4, r0, r3
 801851a:	428c      	cmp	r4, r1
 801851c:	d3f9      	bcc.n	8018512 <CopyDataInit>
 801851e:	4a0b      	ldr	r2, [pc, #44]	; (801854c <LoopFillZerobss+0x22>)
 8018520:	4c0b      	ldr	r4, [pc, #44]	; (8018550 <LoopFillZerobss+0x26>)
 8018522:	2300      	movs	r3, #0
 8018524:	e001      	b.n	801852a <LoopFillZerobss>

08018526 <FillZerobss>:
 8018526:	6013      	str	r3, [r2, #0]
 8018528:	3204      	adds	r2, #4

0801852a <LoopFillZerobss>:
 801852a:	42a2      	cmp	r2, r4
 801852c:	d3fb      	bcc.n	8018526 <FillZerobss>
 801852e:	f7ff ffd7 	bl	80184e0 <SystemInit>
 8018532:	f00a fc75 	bl	8022e20 <__libc_init_array>
 8018536:	f7fe f81f 	bl	8016578 <main>
 801853a:	4770      	bx	lr
 801853c:	20020000 	.word	0x20020000
 8018540:	20000000 	.word	0x20000000
 8018544:	20000764 	.word	0x20000764
 8018548:	0802306c 	.word	0x0802306c
 801854c:	20000764 	.word	0x20000764
 8018550:	20007530 	.word	0x20007530

08018554 <ADC_IRQHandler>:
 8018554:	e7fe      	b.n	8018554 <ADC_IRQHandler>
	...

08018558 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8018558:	b580      	push	{r7, lr}
 801855a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 801855c:	4b0e      	ldr	r3, [pc, #56]	; (8018598 <HAL_Init+0x40>)
 801855e:	681b      	ldr	r3, [r3, #0]
 8018560:	4a0d      	ldr	r2, [pc, #52]	; (8018598 <HAL_Init+0x40>)
 8018562:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8018566:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8018568:	4b0b      	ldr	r3, [pc, #44]	; (8018598 <HAL_Init+0x40>)
 801856a:	681b      	ldr	r3, [r3, #0]
 801856c:	4a0a      	ldr	r2, [pc, #40]	; (8018598 <HAL_Init+0x40>)
 801856e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8018572:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8018574:	4b08      	ldr	r3, [pc, #32]	; (8018598 <HAL_Init+0x40>)
 8018576:	681b      	ldr	r3, [r3, #0]
 8018578:	4a07      	ldr	r2, [pc, #28]	; (8018598 <HAL_Init+0x40>)
 801857a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 801857e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8018580:	2003      	movs	r0, #3
 8018582:	f000 fbc1 	bl	8018d08 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8018586:	2000      	movs	r0, #0
 8018588:	f000 f808 	bl	801859c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 801858c:	f7ff fcc8 	bl	8017f20 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8018590:	2300      	movs	r3, #0
}
 8018592:	4618      	mov	r0, r3
 8018594:	bd80      	pop	{r7, pc}
 8018596:	bf00      	nop
 8018598:	40023c00 	.word	0x40023c00

0801859c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 801859c:	b580      	push	{r7, lr}
 801859e:	b082      	sub	sp, #8
 80185a0:	af00      	add	r7, sp, #0
 80185a2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80185a4:	4b12      	ldr	r3, [pc, #72]	; (80185f0 <HAL_InitTick+0x54>)
 80185a6:	681a      	ldr	r2, [r3, #0]
 80185a8:	4b12      	ldr	r3, [pc, #72]	; (80185f4 <HAL_InitTick+0x58>)
 80185aa:	781b      	ldrb	r3, [r3, #0]
 80185ac:	4619      	mov	r1, r3
 80185ae:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80185b2:	fbb3 f3f1 	udiv	r3, r3, r1
 80185b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80185ba:	4618      	mov	r0, r3
 80185bc:	f000 fbd9 	bl	8018d72 <HAL_SYSTICK_Config>
 80185c0:	4603      	mov	r3, r0
 80185c2:	2b00      	cmp	r3, #0
 80185c4:	d001      	beq.n	80185ca <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80185c6:	2301      	movs	r3, #1
 80185c8:	e00e      	b.n	80185e8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80185ca:	687b      	ldr	r3, [r7, #4]
 80185cc:	2b0f      	cmp	r3, #15
 80185ce:	d80a      	bhi.n	80185e6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80185d0:	2200      	movs	r2, #0
 80185d2:	6879      	ldr	r1, [r7, #4]
 80185d4:	f04f 30ff 	mov.w	r0, #4294967295
 80185d8:	f000 fba1 	bl	8018d1e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80185dc:	4a06      	ldr	r2, [pc, #24]	; (80185f8 <HAL_InitTick+0x5c>)
 80185de:	687b      	ldr	r3, [r7, #4]
 80185e0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80185e2:	2300      	movs	r3, #0
 80185e4:	e000      	b.n	80185e8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80185e6:	2301      	movs	r3, #1
}
 80185e8:	4618      	mov	r0, r3
 80185ea:	3708      	adds	r7, #8
 80185ec:	46bd      	mov	sp, r7
 80185ee:	bd80      	pop	{r7, pc}
 80185f0:	2000058c 	.word	0x2000058c
 80185f4:	20000594 	.word	0x20000594
 80185f8:	20000590 	.word	0x20000590

080185fc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80185fc:	b480      	push	{r7}
 80185fe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8018600:	4b06      	ldr	r3, [pc, #24]	; (801861c <HAL_IncTick+0x20>)
 8018602:	781b      	ldrb	r3, [r3, #0]
 8018604:	461a      	mov	r2, r3
 8018606:	4b06      	ldr	r3, [pc, #24]	; (8018620 <HAL_IncTick+0x24>)
 8018608:	681b      	ldr	r3, [r3, #0]
 801860a:	4413      	add	r3, r2
 801860c:	4a04      	ldr	r2, [pc, #16]	; (8018620 <HAL_IncTick+0x24>)
 801860e:	6013      	str	r3, [r2, #0]
}
 8018610:	bf00      	nop
 8018612:	46bd      	mov	sp, r7
 8018614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018618:	4770      	bx	lr
 801861a:	bf00      	nop
 801861c:	20000594 	.word	0x20000594
 8018620:	20006c24 	.word	0x20006c24

08018624 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8018624:	b480      	push	{r7}
 8018626:	af00      	add	r7, sp, #0
  return uwTick;
 8018628:	4b03      	ldr	r3, [pc, #12]	; (8018638 <HAL_GetTick+0x14>)
 801862a:	681b      	ldr	r3, [r3, #0]
}
 801862c:	4618      	mov	r0, r3
 801862e:	46bd      	mov	sp, r7
 8018630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018634:	4770      	bx	lr
 8018636:	bf00      	nop
 8018638:	20006c24 	.word	0x20006c24

0801863c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 801863c:	b580      	push	{r7, lr}
 801863e:	b084      	sub	sp, #16
 8018640:	af00      	add	r7, sp, #0
 8018642:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8018644:	f7ff ffee 	bl	8018624 <HAL_GetTick>
 8018648:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 801864a:	687b      	ldr	r3, [r7, #4]
 801864c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 801864e:	68fb      	ldr	r3, [r7, #12]
 8018650:	f1b3 3fff 	cmp.w	r3, #4294967295
 8018654:	d005      	beq.n	8018662 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8018656:	4b0a      	ldr	r3, [pc, #40]	; (8018680 <HAL_Delay+0x44>)
 8018658:	781b      	ldrb	r3, [r3, #0]
 801865a:	461a      	mov	r2, r3
 801865c:	68fb      	ldr	r3, [r7, #12]
 801865e:	4413      	add	r3, r2
 8018660:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8018662:	bf00      	nop
 8018664:	f7ff ffde 	bl	8018624 <HAL_GetTick>
 8018668:	4602      	mov	r2, r0
 801866a:	68bb      	ldr	r3, [r7, #8]
 801866c:	1ad3      	subs	r3, r2, r3
 801866e:	68fa      	ldr	r2, [r7, #12]
 8018670:	429a      	cmp	r2, r3
 8018672:	d8f7      	bhi.n	8018664 <HAL_Delay+0x28>
  {
  }
}
 8018674:	bf00      	nop
 8018676:	bf00      	nop
 8018678:	3710      	adds	r7, #16
 801867a:	46bd      	mov	sp, r7
 801867c:	bd80      	pop	{r7, pc}
 801867e:	bf00      	nop
 8018680:	20000594 	.word	0x20000594

08018684 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8018684:	b580      	push	{r7, lr}
 8018686:	b084      	sub	sp, #16
 8018688:	af00      	add	r7, sp, #0
 801868a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 801868c:	2300      	movs	r3, #0
 801868e:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8018690:	687b      	ldr	r3, [r7, #4]
 8018692:	2b00      	cmp	r3, #0
 8018694:	d101      	bne.n	801869a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8018696:	2301      	movs	r3, #1
 8018698:	e033      	b.n	8018702 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 801869a:	687b      	ldr	r3, [r7, #4]
 801869c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801869e:	2b00      	cmp	r3, #0
 80186a0:	d109      	bne.n	80186b6 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80186a2:	6878      	ldr	r0, [r7, #4]
 80186a4:	f7ff fc64 	bl	8017f70 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80186a8:	687b      	ldr	r3, [r7, #4]
 80186aa:	2200      	movs	r2, #0
 80186ac:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80186ae:	687b      	ldr	r3, [r7, #4]
 80186b0:	2200      	movs	r2, #0
 80186b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80186b6:	687b      	ldr	r3, [r7, #4]
 80186b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80186ba:	f003 0310 	and.w	r3, r3, #16
 80186be:	2b00      	cmp	r3, #0
 80186c0:	d118      	bne.n	80186f4 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80186c2:	687b      	ldr	r3, [r7, #4]
 80186c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80186c6:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80186ca:	f023 0302 	bic.w	r3, r3, #2
 80186ce:	f043 0202 	orr.w	r2, r3, #2
 80186d2:	687b      	ldr	r3, [r7, #4]
 80186d4:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80186d6:	6878      	ldr	r0, [r7, #4]
 80186d8:	f000 f94a 	bl	8018970 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80186dc:	687b      	ldr	r3, [r7, #4]
 80186de:	2200      	movs	r2, #0
 80186e0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80186e2:	687b      	ldr	r3, [r7, #4]
 80186e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80186e6:	f023 0303 	bic.w	r3, r3, #3
 80186ea:	f043 0201 	orr.w	r2, r3, #1
 80186ee:	687b      	ldr	r3, [r7, #4]
 80186f0:	641a      	str	r2, [r3, #64]	; 0x40
 80186f2:	e001      	b.n	80186f8 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80186f4:	2301      	movs	r3, #1
 80186f6:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80186f8:	687b      	ldr	r3, [r7, #4]
 80186fa:	2200      	movs	r2, #0
 80186fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8018700:	7bfb      	ldrb	r3, [r7, #15]
}
 8018702:	4618      	mov	r0, r3
 8018704:	3710      	adds	r7, #16
 8018706:	46bd      	mov	sp, r7
 8018708:	bd80      	pop	{r7, pc}
	...

0801870c <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 801870c:	b480      	push	{r7}
 801870e:	b085      	sub	sp, #20
 8018710:	af00      	add	r7, sp, #0
 8018712:	6078      	str	r0, [r7, #4]
 8018714:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8018716:	2300      	movs	r3, #0
 8018718:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 801871a:	687b      	ldr	r3, [r7, #4]
 801871c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8018720:	2b01      	cmp	r3, #1
 8018722:	d101      	bne.n	8018728 <HAL_ADC_ConfigChannel+0x1c>
 8018724:	2302      	movs	r3, #2
 8018726:	e113      	b.n	8018950 <HAL_ADC_ConfigChannel+0x244>
 8018728:	687b      	ldr	r3, [r7, #4]
 801872a:	2201      	movs	r2, #1
 801872c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8018730:	683b      	ldr	r3, [r7, #0]
 8018732:	681b      	ldr	r3, [r3, #0]
 8018734:	2b09      	cmp	r3, #9
 8018736:	d925      	bls.n	8018784 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8018738:	687b      	ldr	r3, [r7, #4]
 801873a:	681b      	ldr	r3, [r3, #0]
 801873c:	68d9      	ldr	r1, [r3, #12]
 801873e:	683b      	ldr	r3, [r7, #0]
 8018740:	681b      	ldr	r3, [r3, #0]
 8018742:	b29b      	uxth	r3, r3
 8018744:	461a      	mov	r2, r3
 8018746:	4613      	mov	r3, r2
 8018748:	005b      	lsls	r3, r3, #1
 801874a:	4413      	add	r3, r2
 801874c:	3b1e      	subs	r3, #30
 801874e:	2207      	movs	r2, #7
 8018750:	fa02 f303 	lsl.w	r3, r2, r3
 8018754:	43da      	mvns	r2, r3
 8018756:	687b      	ldr	r3, [r7, #4]
 8018758:	681b      	ldr	r3, [r3, #0]
 801875a:	400a      	ands	r2, r1
 801875c:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 801875e:	687b      	ldr	r3, [r7, #4]
 8018760:	681b      	ldr	r3, [r3, #0]
 8018762:	68d9      	ldr	r1, [r3, #12]
 8018764:	683b      	ldr	r3, [r7, #0]
 8018766:	689a      	ldr	r2, [r3, #8]
 8018768:	683b      	ldr	r3, [r7, #0]
 801876a:	681b      	ldr	r3, [r3, #0]
 801876c:	b29b      	uxth	r3, r3
 801876e:	4618      	mov	r0, r3
 8018770:	4603      	mov	r3, r0
 8018772:	005b      	lsls	r3, r3, #1
 8018774:	4403      	add	r3, r0
 8018776:	3b1e      	subs	r3, #30
 8018778:	409a      	lsls	r2, r3
 801877a:	687b      	ldr	r3, [r7, #4]
 801877c:	681b      	ldr	r3, [r3, #0]
 801877e:	430a      	orrs	r2, r1
 8018780:	60da      	str	r2, [r3, #12]
 8018782:	e022      	b.n	80187ca <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8018784:	687b      	ldr	r3, [r7, #4]
 8018786:	681b      	ldr	r3, [r3, #0]
 8018788:	6919      	ldr	r1, [r3, #16]
 801878a:	683b      	ldr	r3, [r7, #0]
 801878c:	681b      	ldr	r3, [r3, #0]
 801878e:	b29b      	uxth	r3, r3
 8018790:	461a      	mov	r2, r3
 8018792:	4613      	mov	r3, r2
 8018794:	005b      	lsls	r3, r3, #1
 8018796:	4413      	add	r3, r2
 8018798:	2207      	movs	r2, #7
 801879a:	fa02 f303 	lsl.w	r3, r2, r3
 801879e:	43da      	mvns	r2, r3
 80187a0:	687b      	ldr	r3, [r7, #4]
 80187a2:	681b      	ldr	r3, [r3, #0]
 80187a4:	400a      	ands	r2, r1
 80187a6:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80187a8:	687b      	ldr	r3, [r7, #4]
 80187aa:	681b      	ldr	r3, [r3, #0]
 80187ac:	6919      	ldr	r1, [r3, #16]
 80187ae:	683b      	ldr	r3, [r7, #0]
 80187b0:	689a      	ldr	r2, [r3, #8]
 80187b2:	683b      	ldr	r3, [r7, #0]
 80187b4:	681b      	ldr	r3, [r3, #0]
 80187b6:	b29b      	uxth	r3, r3
 80187b8:	4618      	mov	r0, r3
 80187ba:	4603      	mov	r3, r0
 80187bc:	005b      	lsls	r3, r3, #1
 80187be:	4403      	add	r3, r0
 80187c0:	409a      	lsls	r2, r3
 80187c2:	687b      	ldr	r3, [r7, #4]
 80187c4:	681b      	ldr	r3, [r3, #0]
 80187c6:	430a      	orrs	r2, r1
 80187c8:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80187ca:	683b      	ldr	r3, [r7, #0]
 80187cc:	685b      	ldr	r3, [r3, #4]
 80187ce:	2b06      	cmp	r3, #6
 80187d0:	d824      	bhi.n	801881c <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80187d2:	687b      	ldr	r3, [r7, #4]
 80187d4:	681b      	ldr	r3, [r3, #0]
 80187d6:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80187d8:	683b      	ldr	r3, [r7, #0]
 80187da:	685a      	ldr	r2, [r3, #4]
 80187dc:	4613      	mov	r3, r2
 80187de:	009b      	lsls	r3, r3, #2
 80187e0:	4413      	add	r3, r2
 80187e2:	3b05      	subs	r3, #5
 80187e4:	221f      	movs	r2, #31
 80187e6:	fa02 f303 	lsl.w	r3, r2, r3
 80187ea:	43da      	mvns	r2, r3
 80187ec:	687b      	ldr	r3, [r7, #4]
 80187ee:	681b      	ldr	r3, [r3, #0]
 80187f0:	400a      	ands	r2, r1
 80187f2:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80187f4:	687b      	ldr	r3, [r7, #4]
 80187f6:	681b      	ldr	r3, [r3, #0]
 80187f8:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80187fa:	683b      	ldr	r3, [r7, #0]
 80187fc:	681b      	ldr	r3, [r3, #0]
 80187fe:	b29b      	uxth	r3, r3
 8018800:	4618      	mov	r0, r3
 8018802:	683b      	ldr	r3, [r7, #0]
 8018804:	685a      	ldr	r2, [r3, #4]
 8018806:	4613      	mov	r3, r2
 8018808:	009b      	lsls	r3, r3, #2
 801880a:	4413      	add	r3, r2
 801880c:	3b05      	subs	r3, #5
 801880e:	fa00 f203 	lsl.w	r2, r0, r3
 8018812:	687b      	ldr	r3, [r7, #4]
 8018814:	681b      	ldr	r3, [r3, #0]
 8018816:	430a      	orrs	r2, r1
 8018818:	635a      	str	r2, [r3, #52]	; 0x34
 801881a:	e04c      	b.n	80188b6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 801881c:	683b      	ldr	r3, [r7, #0]
 801881e:	685b      	ldr	r3, [r3, #4]
 8018820:	2b0c      	cmp	r3, #12
 8018822:	d824      	bhi.n	801886e <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8018824:	687b      	ldr	r3, [r7, #4]
 8018826:	681b      	ldr	r3, [r3, #0]
 8018828:	6b19      	ldr	r1, [r3, #48]	; 0x30
 801882a:	683b      	ldr	r3, [r7, #0]
 801882c:	685a      	ldr	r2, [r3, #4]
 801882e:	4613      	mov	r3, r2
 8018830:	009b      	lsls	r3, r3, #2
 8018832:	4413      	add	r3, r2
 8018834:	3b23      	subs	r3, #35	; 0x23
 8018836:	221f      	movs	r2, #31
 8018838:	fa02 f303 	lsl.w	r3, r2, r3
 801883c:	43da      	mvns	r2, r3
 801883e:	687b      	ldr	r3, [r7, #4]
 8018840:	681b      	ldr	r3, [r3, #0]
 8018842:	400a      	ands	r2, r1
 8018844:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8018846:	687b      	ldr	r3, [r7, #4]
 8018848:	681b      	ldr	r3, [r3, #0]
 801884a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 801884c:	683b      	ldr	r3, [r7, #0]
 801884e:	681b      	ldr	r3, [r3, #0]
 8018850:	b29b      	uxth	r3, r3
 8018852:	4618      	mov	r0, r3
 8018854:	683b      	ldr	r3, [r7, #0]
 8018856:	685a      	ldr	r2, [r3, #4]
 8018858:	4613      	mov	r3, r2
 801885a:	009b      	lsls	r3, r3, #2
 801885c:	4413      	add	r3, r2
 801885e:	3b23      	subs	r3, #35	; 0x23
 8018860:	fa00 f203 	lsl.w	r2, r0, r3
 8018864:	687b      	ldr	r3, [r7, #4]
 8018866:	681b      	ldr	r3, [r3, #0]
 8018868:	430a      	orrs	r2, r1
 801886a:	631a      	str	r2, [r3, #48]	; 0x30
 801886c:	e023      	b.n	80188b6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 801886e:	687b      	ldr	r3, [r7, #4]
 8018870:	681b      	ldr	r3, [r3, #0]
 8018872:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8018874:	683b      	ldr	r3, [r7, #0]
 8018876:	685a      	ldr	r2, [r3, #4]
 8018878:	4613      	mov	r3, r2
 801887a:	009b      	lsls	r3, r3, #2
 801887c:	4413      	add	r3, r2
 801887e:	3b41      	subs	r3, #65	; 0x41
 8018880:	221f      	movs	r2, #31
 8018882:	fa02 f303 	lsl.w	r3, r2, r3
 8018886:	43da      	mvns	r2, r3
 8018888:	687b      	ldr	r3, [r7, #4]
 801888a:	681b      	ldr	r3, [r3, #0]
 801888c:	400a      	ands	r2, r1
 801888e:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8018890:	687b      	ldr	r3, [r7, #4]
 8018892:	681b      	ldr	r3, [r3, #0]
 8018894:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8018896:	683b      	ldr	r3, [r7, #0]
 8018898:	681b      	ldr	r3, [r3, #0]
 801889a:	b29b      	uxth	r3, r3
 801889c:	4618      	mov	r0, r3
 801889e:	683b      	ldr	r3, [r7, #0]
 80188a0:	685a      	ldr	r2, [r3, #4]
 80188a2:	4613      	mov	r3, r2
 80188a4:	009b      	lsls	r3, r3, #2
 80188a6:	4413      	add	r3, r2
 80188a8:	3b41      	subs	r3, #65	; 0x41
 80188aa:	fa00 f203 	lsl.w	r2, r0, r3
 80188ae:	687b      	ldr	r3, [r7, #4]
 80188b0:	681b      	ldr	r3, [r3, #0]
 80188b2:	430a      	orrs	r2, r1
 80188b4:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80188b6:	4b29      	ldr	r3, [pc, #164]	; (801895c <HAL_ADC_ConfigChannel+0x250>)
 80188b8:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80188ba:	687b      	ldr	r3, [r7, #4]
 80188bc:	681b      	ldr	r3, [r3, #0]
 80188be:	4a28      	ldr	r2, [pc, #160]	; (8018960 <HAL_ADC_ConfigChannel+0x254>)
 80188c0:	4293      	cmp	r3, r2
 80188c2:	d10f      	bne.n	80188e4 <HAL_ADC_ConfigChannel+0x1d8>
 80188c4:	683b      	ldr	r3, [r7, #0]
 80188c6:	681b      	ldr	r3, [r3, #0]
 80188c8:	2b12      	cmp	r3, #18
 80188ca:	d10b      	bne.n	80188e4 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 80188cc:	68fb      	ldr	r3, [r7, #12]
 80188ce:	685b      	ldr	r3, [r3, #4]
 80188d0:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 80188d4:	68fb      	ldr	r3, [r7, #12]
 80188d6:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80188d8:	68fb      	ldr	r3, [r7, #12]
 80188da:	685b      	ldr	r3, [r3, #4]
 80188dc:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80188e0:	68fb      	ldr	r3, [r7, #12]
 80188e2:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80188e4:	687b      	ldr	r3, [r7, #4]
 80188e6:	681b      	ldr	r3, [r3, #0]
 80188e8:	4a1d      	ldr	r2, [pc, #116]	; (8018960 <HAL_ADC_ConfigChannel+0x254>)
 80188ea:	4293      	cmp	r3, r2
 80188ec:	d12b      	bne.n	8018946 <HAL_ADC_ConfigChannel+0x23a>
 80188ee:	683b      	ldr	r3, [r7, #0]
 80188f0:	681b      	ldr	r3, [r3, #0]
 80188f2:	4a1c      	ldr	r2, [pc, #112]	; (8018964 <HAL_ADC_ConfigChannel+0x258>)
 80188f4:	4293      	cmp	r3, r2
 80188f6:	d003      	beq.n	8018900 <HAL_ADC_ConfigChannel+0x1f4>
 80188f8:	683b      	ldr	r3, [r7, #0]
 80188fa:	681b      	ldr	r3, [r3, #0]
 80188fc:	2b11      	cmp	r3, #17
 80188fe:	d122      	bne.n	8018946 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8018900:	68fb      	ldr	r3, [r7, #12]
 8018902:	685b      	ldr	r3, [r3, #4]
 8018904:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8018908:	68fb      	ldr	r3, [r7, #12]
 801890a:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 801890c:	68fb      	ldr	r3, [r7, #12]
 801890e:	685b      	ldr	r3, [r3, #4]
 8018910:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8018914:	68fb      	ldr	r3, [r7, #12]
 8018916:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8018918:	683b      	ldr	r3, [r7, #0]
 801891a:	681b      	ldr	r3, [r3, #0]
 801891c:	4a11      	ldr	r2, [pc, #68]	; (8018964 <HAL_ADC_ConfigChannel+0x258>)
 801891e:	4293      	cmp	r3, r2
 8018920:	d111      	bne.n	8018946 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8018922:	4b11      	ldr	r3, [pc, #68]	; (8018968 <HAL_ADC_ConfigChannel+0x25c>)
 8018924:	681b      	ldr	r3, [r3, #0]
 8018926:	4a11      	ldr	r2, [pc, #68]	; (801896c <HAL_ADC_ConfigChannel+0x260>)
 8018928:	fba2 2303 	umull	r2, r3, r2, r3
 801892c:	0c9a      	lsrs	r2, r3, #18
 801892e:	4613      	mov	r3, r2
 8018930:	009b      	lsls	r3, r3, #2
 8018932:	4413      	add	r3, r2
 8018934:	005b      	lsls	r3, r3, #1
 8018936:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8018938:	e002      	b.n	8018940 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 801893a:	68bb      	ldr	r3, [r7, #8]
 801893c:	3b01      	subs	r3, #1
 801893e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8018940:	68bb      	ldr	r3, [r7, #8]
 8018942:	2b00      	cmp	r3, #0
 8018944:	d1f9      	bne.n	801893a <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8018946:	687b      	ldr	r3, [r7, #4]
 8018948:	2200      	movs	r2, #0
 801894a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 801894e:	2300      	movs	r3, #0
}
 8018950:	4618      	mov	r0, r3
 8018952:	3714      	adds	r7, #20
 8018954:	46bd      	mov	sp, r7
 8018956:	f85d 7b04 	ldr.w	r7, [sp], #4
 801895a:	4770      	bx	lr
 801895c:	40012300 	.word	0x40012300
 8018960:	40012000 	.word	0x40012000
 8018964:	10000012 	.word	0x10000012
 8018968:	2000058c 	.word	0x2000058c
 801896c:	431bde83 	.word	0x431bde83

08018970 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8018970:	b480      	push	{r7}
 8018972:	b085      	sub	sp, #20
 8018974:	af00      	add	r7, sp, #0
 8018976:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8018978:	4b79      	ldr	r3, [pc, #484]	; (8018b60 <ADC_Init+0x1f0>)
 801897a:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 801897c:	68fb      	ldr	r3, [r7, #12]
 801897e:	685b      	ldr	r3, [r3, #4]
 8018980:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8018984:	68fb      	ldr	r3, [r7, #12]
 8018986:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8018988:	68fb      	ldr	r3, [r7, #12]
 801898a:	685a      	ldr	r2, [r3, #4]
 801898c:	687b      	ldr	r3, [r7, #4]
 801898e:	685b      	ldr	r3, [r3, #4]
 8018990:	431a      	orrs	r2, r3
 8018992:	68fb      	ldr	r3, [r7, #12]
 8018994:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8018996:	687b      	ldr	r3, [r7, #4]
 8018998:	681b      	ldr	r3, [r3, #0]
 801899a:	685a      	ldr	r2, [r3, #4]
 801899c:	687b      	ldr	r3, [r7, #4]
 801899e:	681b      	ldr	r3, [r3, #0]
 80189a0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80189a4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80189a6:	687b      	ldr	r3, [r7, #4]
 80189a8:	681b      	ldr	r3, [r3, #0]
 80189aa:	6859      	ldr	r1, [r3, #4]
 80189ac:	687b      	ldr	r3, [r7, #4]
 80189ae:	691b      	ldr	r3, [r3, #16]
 80189b0:	021a      	lsls	r2, r3, #8
 80189b2:	687b      	ldr	r3, [r7, #4]
 80189b4:	681b      	ldr	r3, [r3, #0]
 80189b6:	430a      	orrs	r2, r1
 80189b8:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80189ba:	687b      	ldr	r3, [r7, #4]
 80189bc:	681b      	ldr	r3, [r3, #0]
 80189be:	685a      	ldr	r2, [r3, #4]
 80189c0:	687b      	ldr	r3, [r7, #4]
 80189c2:	681b      	ldr	r3, [r3, #0]
 80189c4:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80189c8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80189ca:	687b      	ldr	r3, [r7, #4]
 80189cc:	681b      	ldr	r3, [r3, #0]
 80189ce:	6859      	ldr	r1, [r3, #4]
 80189d0:	687b      	ldr	r3, [r7, #4]
 80189d2:	689a      	ldr	r2, [r3, #8]
 80189d4:	687b      	ldr	r3, [r7, #4]
 80189d6:	681b      	ldr	r3, [r3, #0]
 80189d8:	430a      	orrs	r2, r1
 80189da:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80189dc:	687b      	ldr	r3, [r7, #4]
 80189de:	681b      	ldr	r3, [r3, #0]
 80189e0:	689a      	ldr	r2, [r3, #8]
 80189e2:	687b      	ldr	r3, [r7, #4]
 80189e4:	681b      	ldr	r3, [r3, #0]
 80189e6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80189ea:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80189ec:	687b      	ldr	r3, [r7, #4]
 80189ee:	681b      	ldr	r3, [r3, #0]
 80189f0:	6899      	ldr	r1, [r3, #8]
 80189f2:	687b      	ldr	r3, [r7, #4]
 80189f4:	68da      	ldr	r2, [r3, #12]
 80189f6:	687b      	ldr	r3, [r7, #4]
 80189f8:	681b      	ldr	r3, [r3, #0]
 80189fa:	430a      	orrs	r2, r1
 80189fc:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80189fe:	687b      	ldr	r3, [r7, #4]
 8018a00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8018a02:	4a58      	ldr	r2, [pc, #352]	; (8018b64 <ADC_Init+0x1f4>)
 8018a04:	4293      	cmp	r3, r2
 8018a06:	d022      	beq.n	8018a4e <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8018a08:	687b      	ldr	r3, [r7, #4]
 8018a0a:	681b      	ldr	r3, [r3, #0]
 8018a0c:	689a      	ldr	r2, [r3, #8]
 8018a0e:	687b      	ldr	r3, [r7, #4]
 8018a10:	681b      	ldr	r3, [r3, #0]
 8018a12:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8018a16:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8018a18:	687b      	ldr	r3, [r7, #4]
 8018a1a:	681b      	ldr	r3, [r3, #0]
 8018a1c:	6899      	ldr	r1, [r3, #8]
 8018a1e:	687b      	ldr	r3, [r7, #4]
 8018a20:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8018a22:	687b      	ldr	r3, [r7, #4]
 8018a24:	681b      	ldr	r3, [r3, #0]
 8018a26:	430a      	orrs	r2, r1
 8018a28:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8018a2a:	687b      	ldr	r3, [r7, #4]
 8018a2c:	681b      	ldr	r3, [r3, #0]
 8018a2e:	689a      	ldr	r2, [r3, #8]
 8018a30:	687b      	ldr	r3, [r7, #4]
 8018a32:	681b      	ldr	r3, [r3, #0]
 8018a34:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8018a38:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8018a3a:	687b      	ldr	r3, [r7, #4]
 8018a3c:	681b      	ldr	r3, [r3, #0]
 8018a3e:	6899      	ldr	r1, [r3, #8]
 8018a40:	687b      	ldr	r3, [r7, #4]
 8018a42:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8018a44:	687b      	ldr	r3, [r7, #4]
 8018a46:	681b      	ldr	r3, [r3, #0]
 8018a48:	430a      	orrs	r2, r1
 8018a4a:	609a      	str	r2, [r3, #8]
 8018a4c:	e00f      	b.n	8018a6e <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8018a4e:	687b      	ldr	r3, [r7, #4]
 8018a50:	681b      	ldr	r3, [r3, #0]
 8018a52:	689a      	ldr	r2, [r3, #8]
 8018a54:	687b      	ldr	r3, [r7, #4]
 8018a56:	681b      	ldr	r3, [r3, #0]
 8018a58:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8018a5c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8018a5e:	687b      	ldr	r3, [r7, #4]
 8018a60:	681b      	ldr	r3, [r3, #0]
 8018a62:	689a      	ldr	r2, [r3, #8]
 8018a64:	687b      	ldr	r3, [r7, #4]
 8018a66:	681b      	ldr	r3, [r3, #0]
 8018a68:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8018a6c:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8018a6e:	687b      	ldr	r3, [r7, #4]
 8018a70:	681b      	ldr	r3, [r3, #0]
 8018a72:	689a      	ldr	r2, [r3, #8]
 8018a74:	687b      	ldr	r3, [r7, #4]
 8018a76:	681b      	ldr	r3, [r3, #0]
 8018a78:	f022 0202 	bic.w	r2, r2, #2
 8018a7c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8018a7e:	687b      	ldr	r3, [r7, #4]
 8018a80:	681b      	ldr	r3, [r3, #0]
 8018a82:	6899      	ldr	r1, [r3, #8]
 8018a84:	687b      	ldr	r3, [r7, #4]
 8018a86:	7e1b      	ldrb	r3, [r3, #24]
 8018a88:	005a      	lsls	r2, r3, #1
 8018a8a:	687b      	ldr	r3, [r7, #4]
 8018a8c:	681b      	ldr	r3, [r3, #0]
 8018a8e:	430a      	orrs	r2, r1
 8018a90:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8018a92:	687b      	ldr	r3, [r7, #4]
 8018a94:	f893 3020 	ldrb.w	r3, [r3, #32]
 8018a98:	2b00      	cmp	r3, #0
 8018a9a:	d01b      	beq.n	8018ad4 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8018a9c:	687b      	ldr	r3, [r7, #4]
 8018a9e:	681b      	ldr	r3, [r3, #0]
 8018aa0:	685a      	ldr	r2, [r3, #4]
 8018aa2:	687b      	ldr	r3, [r7, #4]
 8018aa4:	681b      	ldr	r3, [r3, #0]
 8018aa6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8018aaa:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8018aac:	687b      	ldr	r3, [r7, #4]
 8018aae:	681b      	ldr	r3, [r3, #0]
 8018ab0:	685a      	ldr	r2, [r3, #4]
 8018ab2:	687b      	ldr	r3, [r7, #4]
 8018ab4:	681b      	ldr	r3, [r3, #0]
 8018ab6:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8018aba:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8018abc:	687b      	ldr	r3, [r7, #4]
 8018abe:	681b      	ldr	r3, [r3, #0]
 8018ac0:	6859      	ldr	r1, [r3, #4]
 8018ac2:	687b      	ldr	r3, [r7, #4]
 8018ac4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018ac6:	3b01      	subs	r3, #1
 8018ac8:	035a      	lsls	r2, r3, #13
 8018aca:	687b      	ldr	r3, [r7, #4]
 8018acc:	681b      	ldr	r3, [r3, #0]
 8018ace:	430a      	orrs	r2, r1
 8018ad0:	605a      	str	r2, [r3, #4]
 8018ad2:	e007      	b.n	8018ae4 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8018ad4:	687b      	ldr	r3, [r7, #4]
 8018ad6:	681b      	ldr	r3, [r3, #0]
 8018ad8:	685a      	ldr	r2, [r3, #4]
 8018ada:	687b      	ldr	r3, [r7, #4]
 8018adc:	681b      	ldr	r3, [r3, #0]
 8018ade:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8018ae2:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8018ae4:	687b      	ldr	r3, [r7, #4]
 8018ae6:	681b      	ldr	r3, [r3, #0]
 8018ae8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8018aea:	687b      	ldr	r3, [r7, #4]
 8018aec:	681b      	ldr	r3, [r3, #0]
 8018aee:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8018af2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8018af4:	687b      	ldr	r3, [r7, #4]
 8018af6:	681b      	ldr	r3, [r3, #0]
 8018af8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8018afa:	687b      	ldr	r3, [r7, #4]
 8018afc:	69db      	ldr	r3, [r3, #28]
 8018afe:	3b01      	subs	r3, #1
 8018b00:	051a      	lsls	r2, r3, #20
 8018b02:	687b      	ldr	r3, [r7, #4]
 8018b04:	681b      	ldr	r3, [r3, #0]
 8018b06:	430a      	orrs	r2, r1
 8018b08:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8018b0a:	687b      	ldr	r3, [r7, #4]
 8018b0c:	681b      	ldr	r3, [r3, #0]
 8018b0e:	689a      	ldr	r2, [r3, #8]
 8018b10:	687b      	ldr	r3, [r7, #4]
 8018b12:	681b      	ldr	r3, [r3, #0]
 8018b14:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8018b18:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8018b1a:	687b      	ldr	r3, [r7, #4]
 8018b1c:	681b      	ldr	r3, [r3, #0]
 8018b1e:	6899      	ldr	r1, [r3, #8]
 8018b20:	687b      	ldr	r3, [r7, #4]
 8018b22:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8018b26:	025a      	lsls	r2, r3, #9
 8018b28:	687b      	ldr	r3, [r7, #4]
 8018b2a:	681b      	ldr	r3, [r3, #0]
 8018b2c:	430a      	orrs	r2, r1
 8018b2e:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8018b30:	687b      	ldr	r3, [r7, #4]
 8018b32:	681b      	ldr	r3, [r3, #0]
 8018b34:	689a      	ldr	r2, [r3, #8]
 8018b36:	687b      	ldr	r3, [r7, #4]
 8018b38:	681b      	ldr	r3, [r3, #0]
 8018b3a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8018b3e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8018b40:	687b      	ldr	r3, [r7, #4]
 8018b42:	681b      	ldr	r3, [r3, #0]
 8018b44:	6899      	ldr	r1, [r3, #8]
 8018b46:	687b      	ldr	r3, [r7, #4]
 8018b48:	695b      	ldr	r3, [r3, #20]
 8018b4a:	029a      	lsls	r2, r3, #10
 8018b4c:	687b      	ldr	r3, [r7, #4]
 8018b4e:	681b      	ldr	r3, [r3, #0]
 8018b50:	430a      	orrs	r2, r1
 8018b52:	609a      	str	r2, [r3, #8]
}
 8018b54:	bf00      	nop
 8018b56:	3714      	adds	r7, #20
 8018b58:	46bd      	mov	sp, r7
 8018b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018b5e:	4770      	bx	lr
 8018b60:	40012300 	.word	0x40012300
 8018b64:	0f000001 	.word	0x0f000001

08018b68 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8018b68:	b480      	push	{r7}
 8018b6a:	b085      	sub	sp, #20
 8018b6c:	af00      	add	r7, sp, #0
 8018b6e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8018b70:	687b      	ldr	r3, [r7, #4]
 8018b72:	f003 0307 	and.w	r3, r3, #7
 8018b76:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8018b78:	4b0c      	ldr	r3, [pc, #48]	; (8018bac <__NVIC_SetPriorityGrouping+0x44>)
 8018b7a:	68db      	ldr	r3, [r3, #12]
 8018b7c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8018b7e:	68ba      	ldr	r2, [r7, #8]
 8018b80:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8018b84:	4013      	ands	r3, r2
 8018b86:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8018b88:	68fb      	ldr	r3, [r7, #12]
 8018b8a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8018b8c:	68bb      	ldr	r3, [r7, #8]
 8018b8e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8018b90:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8018b94:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8018b98:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8018b9a:	4a04      	ldr	r2, [pc, #16]	; (8018bac <__NVIC_SetPriorityGrouping+0x44>)
 8018b9c:	68bb      	ldr	r3, [r7, #8]
 8018b9e:	60d3      	str	r3, [r2, #12]
}
 8018ba0:	bf00      	nop
 8018ba2:	3714      	adds	r7, #20
 8018ba4:	46bd      	mov	sp, r7
 8018ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018baa:	4770      	bx	lr
 8018bac:	e000ed00 	.word	0xe000ed00

08018bb0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8018bb0:	b480      	push	{r7}
 8018bb2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8018bb4:	4b04      	ldr	r3, [pc, #16]	; (8018bc8 <__NVIC_GetPriorityGrouping+0x18>)
 8018bb6:	68db      	ldr	r3, [r3, #12]
 8018bb8:	0a1b      	lsrs	r3, r3, #8
 8018bba:	f003 0307 	and.w	r3, r3, #7
}
 8018bbe:	4618      	mov	r0, r3
 8018bc0:	46bd      	mov	sp, r7
 8018bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018bc6:	4770      	bx	lr
 8018bc8:	e000ed00 	.word	0xe000ed00

08018bcc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8018bcc:	b480      	push	{r7}
 8018bce:	b083      	sub	sp, #12
 8018bd0:	af00      	add	r7, sp, #0
 8018bd2:	4603      	mov	r3, r0
 8018bd4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8018bd6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8018bda:	2b00      	cmp	r3, #0
 8018bdc:	db0b      	blt.n	8018bf6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8018bde:	79fb      	ldrb	r3, [r7, #7]
 8018be0:	f003 021f 	and.w	r2, r3, #31
 8018be4:	4907      	ldr	r1, [pc, #28]	; (8018c04 <__NVIC_EnableIRQ+0x38>)
 8018be6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8018bea:	095b      	lsrs	r3, r3, #5
 8018bec:	2001      	movs	r0, #1
 8018bee:	fa00 f202 	lsl.w	r2, r0, r2
 8018bf2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8018bf6:	bf00      	nop
 8018bf8:	370c      	adds	r7, #12
 8018bfa:	46bd      	mov	sp, r7
 8018bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018c00:	4770      	bx	lr
 8018c02:	bf00      	nop
 8018c04:	e000e100 	.word	0xe000e100

08018c08 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8018c08:	b480      	push	{r7}
 8018c0a:	b083      	sub	sp, #12
 8018c0c:	af00      	add	r7, sp, #0
 8018c0e:	4603      	mov	r3, r0
 8018c10:	6039      	str	r1, [r7, #0]
 8018c12:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8018c14:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8018c18:	2b00      	cmp	r3, #0
 8018c1a:	db0a      	blt.n	8018c32 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8018c1c:	683b      	ldr	r3, [r7, #0]
 8018c1e:	b2da      	uxtb	r2, r3
 8018c20:	490c      	ldr	r1, [pc, #48]	; (8018c54 <__NVIC_SetPriority+0x4c>)
 8018c22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8018c26:	0112      	lsls	r2, r2, #4
 8018c28:	b2d2      	uxtb	r2, r2
 8018c2a:	440b      	add	r3, r1
 8018c2c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8018c30:	e00a      	b.n	8018c48 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8018c32:	683b      	ldr	r3, [r7, #0]
 8018c34:	b2da      	uxtb	r2, r3
 8018c36:	4908      	ldr	r1, [pc, #32]	; (8018c58 <__NVIC_SetPriority+0x50>)
 8018c38:	79fb      	ldrb	r3, [r7, #7]
 8018c3a:	f003 030f 	and.w	r3, r3, #15
 8018c3e:	3b04      	subs	r3, #4
 8018c40:	0112      	lsls	r2, r2, #4
 8018c42:	b2d2      	uxtb	r2, r2
 8018c44:	440b      	add	r3, r1
 8018c46:	761a      	strb	r2, [r3, #24]
}
 8018c48:	bf00      	nop
 8018c4a:	370c      	adds	r7, #12
 8018c4c:	46bd      	mov	sp, r7
 8018c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018c52:	4770      	bx	lr
 8018c54:	e000e100 	.word	0xe000e100
 8018c58:	e000ed00 	.word	0xe000ed00

08018c5c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8018c5c:	b480      	push	{r7}
 8018c5e:	b089      	sub	sp, #36	; 0x24
 8018c60:	af00      	add	r7, sp, #0
 8018c62:	60f8      	str	r0, [r7, #12]
 8018c64:	60b9      	str	r1, [r7, #8]
 8018c66:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8018c68:	68fb      	ldr	r3, [r7, #12]
 8018c6a:	f003 0307 	and.w	r3, r3, #7
 8018c6e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8018c70:	69fb      	ldr	r3, [r7, #28]
 8018c72:	f1c3 0307 	rsb	r3, r3, #7
 8018c76:	2b04      	cmp	r3, #4
 8018c78:	bf28      	it	cs
 8018c7a:	2304      	movcs	r3, #4
 8018c7c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8018c7e:	69fb      	ldr	r3, [r7, #28]
 8018c80:	3304      	adds	r3, #4
 8018c82:	2b06      	cmp	r3, #6
 8018c84:	d902      	bls.n	8018c8c <NVIC_EncodePriority+0x30>
 8018c86:	69fb      	ldr	r3, [r7, #28]
 8018c88:	3b03      	subs	r3, #3
 8018c8a:	e000      	b.n	8018c8e <NVIC_EncodePriority+0x32>
 8018c8c:	2300      	movs	r3, #0
 8018c8e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8018c90:	f04f 32ff 	mov.w	r2, #4294967295
 8018c94:	69bb      	ldr	r3, [r7, #24]
 8018c96:	fa02 f303 	lsl.w	r3, r2, r3
 8018c9a:	43da      	mvns	r2, r3
 8018c9c:	68bb      	ldr	r3, [r7, #8]
 8018c9e:	401a      	ands	r2, r3
 8018ca0:	697b      	ldr	r3, [r7, #20]
 8018ca2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8018ca4:	f04f 31ff 	mov.w	r1, #4294967295
 8018ca8:	697b      	ldr	r3, [r7, #20]
 8018caa:	fa01 f303 	lsl.w	r3, r1, r3
 8018cae:	43d9      	mvns	r1, r3
 8018cb0:	687b      	ldr	r3, [r7, #4]
 8018cb2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8018cb4:	4313      	orrs	r3, r2
         );
}
 8018cb6:	4618      	mov	r0, r3
 8018cb8:	3724      	adds	r7, #36	; 0x24
 8018cba:	46bd      	mov	sp, r7
 8018cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018cc0:	4770      	bx	lr
	...

08018cc4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8018cc4:	b580      	push	{r7, lr}
 8018cc6:	b082      	sub	sp, #8
 8018cc8:	af00      	add	r7, sp, #0
 8018cca:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8018ccc:	687b      	ldr	r3, [r7, #4]
 8018cce:	3b01      	subs	r3, #1
 8018cd0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8018cd4:	d301      	bcc.n	8018cda <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8018cd6:	2301      	movs	r3, #1
 8018cd8:	e00f      	b.n	8018cfa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8018cda:	4a0a      	ldr	r2, [pc, #40]	; (8018d04 <SysTick_Config+0x40>)
 8018cdc:	687b      	ldr	r3, [r7, #4]
 8018cde:	3b01      	subs	r3, #1
 8018ce0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8018ce2:	210f      	movs	r1, #15
 8018ce4:	f04f 30ff 	mov.w	r0, #4294967295
 8018ce8:	f7ff ff8e 	bl	8018c08 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8018cec:	4b05      	ldr	r3, [pc, #20]	; (8018d04 <SysTick_Config+0x40>)
 8018cee:	2200      	movs	r2, #0
 8018cf0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8018cf2:	4b04      	ldr	r3, [pc, #16]	; (8018d04 <SysTick_Config+0x40>)
 8018cf4:	2207      	movs	r2, #7
 8018cf6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8018cf8:	2300      	movs	r3, #0
}
 8018cfa:	4618      	mov	r0, r3
 8018cfc:	3708      	adds	r7, #8
 8018cfe:	46bd      	mov	sp, r7
 8018d00:	bd80      	pop	{r7, pc}
 8018d02:	bf00      	nop
 8018d04:	e000e010 	.word	0xe000e010

08018d08 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8018d08:	b580      	push	{r7, lr}
 8018d0a:	b082      	sub	sp, #8
 8018d0c:	af00      	add	r7, sp, #0
 8018d0e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8018d10:	6878      	ldr	r0, [r7, #4]
 8018d12:	f7ff ff29 	bl	8018b68 <__NVIC_SetPriorityGrouping>
}
 8018d16:	bf00      	nop
 8018d18:	3708      	adds	r7, #8
 8018d1a:	46bd      	mov	sp, r7
 8018d1c:	bd80      	pop	{r7, pc}

08018d1e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8018d1e:	b580      	push	{r7, lr}
 8018d20:	b086      	sub	sp, #24
 8018d22:	af00      	add	r7, sp, #0
 8018d24:	4603      	mov	r3, r0
 8018d26:	60b9      	str	r1, [r7, #8]
 8018d28:	607a      	str	r2, [r7, #4]
 8018d2a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8018d2c:	2300      	movs	r3, #0
 8018d2e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8018d30:	f7ff ff3e 	bl	8018bb0 <__NVIC_GetPriorityGrouping>
 8018d34:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8018d36:	687a      	ldr	r2, [r7, #4]
 8018d38:	68b9      	ldr	r1, [r7, #8]
 8018d3a:	6978      	ldr	r0, [r7, #20]
 8018d3c:	f7ff ff8e 	bl	8018c5c <NVIC_EncodePriority>
 8018d40:	4602      	mov	r2, r0
 8018d42:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8018d46:	4611      	mov	r1, r2
 8018d48:	4618      	mov	r0, r3
 8018d4a:	f7ff ff5d 	bl	8018c08 <__NVIC_SetPriority>
}
 8018d4e:	bf00      	nop
 8018d50:	3718      	adds	r7, #24
 8018d52:	46bd      	mov	sp, r7
 8018d54:	bd80      	pop	{r7, pc}

08018d56 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8018d56:	b580      	push	{r7, lr}
 8018d58:	b082      	sub	sp, #8
 8018d5a:	af00      	add	r7, sp, #0
 8018d5c:	4603      	mov	r3, r0
 8018d5e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8018d60:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8018d64:	4618      	mov	r0, r3
 8018d66:	f7ff ff31 	bl	8018bcc <__NVIC_EnableIRQ>
}
 8018d6a:	bf00      	nop
 8018d6c:	3708      	adds	r7, #8
 8018d6e:	46bd      	mov	sp, r7
 8018d70:	bd80      	pop	{r7, pc}

08018d72 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8018d72:	b580      	push	{r7, lr}
 8018d74:	b082      	sub	sp, #8
 8018d76:	af00      	add	r7, sp, #0
 8018d78:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8018d7a:	6878      	ldr	r0, [r7, #4]
 8018d7c:	f7ff ffa2 	bl	8018cc4 <SysTick_Config>
 8018d80:	4603      	mov	r3, r0
}
 8018d82:	4618      	mov	r0, r3
 8018d84:	3708      	adds	r7, #8
 8018d86:	46bd      	mov	sp, r7
 8018d88:	bd80      	pop	{r7, pc}

08018d8a <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8018d8a:	b580      	push	{r7, lr}
 8018d8c:	b082      	sub	sp, #8
 8018d8e:	af00      	add	r7, sp, #0
 8018d90:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 8018d92:	687b      	ldr	r3, [r7, #4]
 8018d94:	2b00      	cmp	r3, #0
 8018d96:	d101      	bne.n	8018d9c <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8018d98:	2301      	movs	r3, #1
 8018d9a:	e014      	b.n	8018dc6 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8018d9c:	687b      	ldr	r3, [r7, #4]
 8018d9e:	791b      	ldrb	r3, [r3, #4]
 8018da0:	b2db      	uxtb	r3, r3
 8018da2:	2b00      	cmp	r3, #0
 8018da4:	d105      	bne.n	8018db2 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8018da6:	687b      	ldr	r3, [r7, #4]
 8018da8:	2200      	movs	r2, #0
 8018daa:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8018dac:	6878      	ldr	r0, [r7, #4]
 8018dae:	f7ff f985 	bl	80180bc <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8018db2:	687b      	ldr	r3, [r7, #4]
 8018db4:	2202      	movs	r2, #2
 8018db6:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8018db8:	687b      	ldr	r3, [r7, #4]
 8018dba:	2200      	movs	r2, #0
 8018dbc:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8018dbe:	687b      	ldr	r3, [r7, #4]
 8018dc0:	2201      	movs	r2, #1
 8018dc2:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8018dc4:	2300      	movs	r3, #0
}
 8018dc6:	4618      	mov	r0, r3
 8018dc8:	3708      	adds	r7, #8
 8018dca:	46bd      	mov	sp, r7
 8018dcc:	bd80      	pop	{r7, pc}

08018dce <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 8018dce:	b480      	push	{r7}
 8018dd0:	b087      	sub	sp, #28
 8018dd2:	af00      	add	r7, sp, #0
 8018dd4:	60f8      	str	r0, [r7, #12]
 8018dd6:	60b9      	str	r1, [r7, #8]
 8018dd8:	607a      	str	r2, [r7, #4]
 8018dda:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0UL;
 8018ddc:	2300      	movs	r3, #0
 8018dde:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));

  tmp = (uint32_t)hdac->Instance;
 8018de0:	68fb      	ldr	r3, [r7, #12]
 8018de2:	681b      	ldr	r3, [r3, #0]
 8018de4:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 8018de6:	68bb      	ldr	r3, [r7, #8]
 8018de8:	2b00      	cmp	r3, #0
 8018dea:	d105      	bne.n	8018df8 <HAL_DAC_SetValue+0x2a>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 8018dec:	697a      	ldr	r2, [r7, #20]
 8018dee:	687b      	ldr	r3, [r7, #4]
 8018df0:	4413      	add	r3, r2
 8018df2:	3308      	adds	r3, #8
 8018df4:	617b      	str	r3, [r7, #20]
 8018df6:	e004      	b.n	8018e02 <HAL_DAC_SetValue+0x34>
  }
#if defined(DAC_CHANNEL2_SUPPORT)
  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 8018df8:	697a      	ldr	r2, [r7, #20]
 8018dfa:	687b      	ldr	r3, [r7, #4]
 8018dfc:	4413      	add	r3, r2
 8018dfe:	3314      	adds	r3, #20
 8018e00:	617b      	str	r3, [r7, #20]
  }
#endif /* DAC_CHANNEL2_SUPPORT */

  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 8018e02:	697b      	ldr	r3, [r7, #20]
 8018e04:	461a      	mov	r2, r3
 8018e06:	683b      	ldr	r3, [r7, #0]
 8018e08:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 8018e0a:	2300      	movs	r3, #0
}
 8018e0c:	4618      	mov	r0, r3
 8018e0e:	371c      	adds	r7, #28
 8018e10:	46bd      	mov	sp, r7
 8018e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018e16:	4770      	bx	lr

08018e18 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8018e18:	b480      	push	{r7}
 8018e1a:	b087      	sub	sp, #28
 8018e1c:	af00      	add	r7, sp, #0
 8018e1e:	60f8      	str	r0, [r7, #12]
 8018e20:	60b9      	str	r1, [r7, #8]
 8018e22:	607a      	str	r2, [r7, #4]
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8018e24:	68fb      	ldr	r3, [r7, #12]
 8018e26:	795b      	ldrb	r3, [r3, #5]
 8018e28:	2b01      	cmp	r3, #1
 8018e2a:	d101      	bne.n	8018e30 <HAL_DAC_ConfigChannel+0x18>
 8018e2c:	2302      	movs	r3, #2
 8018e2e:	e03c      	b.n	8018eaa <HAL_DAC_ConfigChannel+0x92>
 8018e30:	68fb      	ldr	r3, [r7, #12]
 8018e32:	2201      	movs	r2, #1
 8018e34:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8018e36:	68fb      	ldr	r3, [r7, #12]
 8018e38:	2202      	movs	r2, #2
 8018e3a:	711a      	strb	r2, [r3, #4]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8018e3c:	68fb      	ldr	r3, [r7, #12]
 8018e3e:	681b      	ldr	r3, [r3, #0]
 8018e40:	681b      	ldr	r3, [r3, #0]
 8018e42:	617b      	str	r3, [r7, #20]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << (Channel & 0x10UL));
 8018e44:	687b      	ldr	r3, [r7, #4]
 8018e46:	f003 0310 	and.w	r3, r3, #16
 8018e4a:	f640 72fe 	movw	r2, #4094	; 0xffe
 8018e4e:	fa02 f303 	lsl.w	r3, r2, r3
 8018e52:	43db      	mvns	r3, r3
 8018e54:	697a      	ldr	r2, [r7, #20]
 8018e56:	4013      	ands	r3, r2
 8018e58:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 8018e5a:	68bb      	ldr	r3, [r7, #8]
 8018e5c:	681a      	ldr	r2, [r3, #0]
 8018e5e:	68bb      	ldr	r3, [r7, #8]
 8018e60:	685b      	ldr	r3, [r3, #4]
 8018e62:	4313      	orrs	r3, r2
 8018e64:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8018e66:	687b      	ldr	r3, [r7, #4]
 8018e68:	f003 0310 	and.w	r3, r3, #16
 8018e6c:	693a      	ldr	r2, [r7, #16]
 8018e6e:	fa02 f303 	lsl.w	r3, r2, r3
 8018e72:	697a      	ldr	r2, [r7, #20]
 8018e74:	4313      	orrs	r3, r2
 8018e76:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8018e78:	68fb      	ldr	r3, [r7, #12]
 8018e7a:	681b      	ldr	r3, [r3, #0]
 8018e7c:	697a      	ldr	r2, [r7, #20]
 8018e7e:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8018e80:	68fb      	ldr	r3, [r7, #12]
 8018e82:	681b      	ldr	r3, [r3, #0]
 8018e84:	6819      	ldr	r1, [r3, #0]
 8018e86:	687b      	ldr	r3, [r7, #4]
 8018e88:	f003 0310 	and.w	r3, r3, #16
 8018e8c:	22c0      	movs	r2, #192	; 0xc0
 8018e8e:	fa02 f303 	lsl.w	r3, r2, r3
 8018e92:	43da      	mvns	r2, r3
 8018e94:	68fb      	ldr	r3, [r7, #12]
 8018e96:	681b      	ldr	r3, [r3, #0]
 8018e98:	400a      	ands	r2, r1
 8018e9a:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8018e9c:	68fb      	ldr	r3, [r7, #12]
 8018e9e:	2201      	movs	r2, #1
 8018ea0:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8018ea2:	68fb      	ldr	r3, [r7, #12]
 8018ea4:	2200      	movs	r2, #0
 8018ea6:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8018ea8:	2300      	movs	r3, #0
}
 8018eaa:	4618      	mov	r0, r3
 8018eac:	371c      	adds	r7, #28
 8018eae:	46bd      	mov	sp, r7
 8018eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018eb4:	4770      	bx	lr
	...

08018eb8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8018eb8:	b580      	push	{r7, lr}
 8018eba:	b086      	sub	sp, #24
 8018ebc:	af00      	add	r7, sp, #0
 8018ebe:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8018ec0:	2300      	movs	r3, #0
 8018ec2:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8018ec4:	f7ff fbae 	bl	8018624 <HAL_GetTick>
 8018ec8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8018eca:	687b      	ldr	r3, [r7, #4]
 8018ecc:	2b00      	cmp	r3, #0
 8018ece:	d101      	bne.n	8018ed4 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8018ed0:	2301      	movs	r3, #1
 8018ed2:	e099      	b.n	8019008 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8018ed4:	687b      	ldr	r3, [r7, #4]
 8018ed6:	2202      	movs	r2, #2
 8018ed8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8018edc:	687b      	ldr	r3, [r7, #4]
 8018ede:	2200      	movs	r2, #0
 8018ee0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8018ee4:	687b      	ldr	r3, [r7, #4]
 8018ee6:	681b      	ldr	r3, [r3, #0]
 8018ee8:	681a      	ldr	r2, [r3, #0]
 8018eea:	687b      	ldr	r3, [r7, #4]
 8018eec:	681b      	ldr	r3, [r3, #0]
 8018eee:	f022 0201 	bic.w	r2, r2, #1
 8018ef2:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8018ef4:	e00f      	b.n	8018f16 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8018ef6:	f7ff fb95 	bl	8018624 <HAL_GetTick>
 8018efa:	4602      	mov	r2, r0
 8018efc:	693b      	ldr	r3, [r7, #16]
 8018efe:	1ad3      	subs	r3, r2, r3
 8018f00:	2b05      	cmp	r3, #5
 8018f02:	d908      	bls.n	8018f16 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8018f04:	687b      	ldr	r3, [r7, #4]
 8018f06:	2220      	movs	r2, #32
 8018f08:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8018f0a:	687b      	ldr	r3, [r7, #4]
 8018f0c:	2203      	movs	r2, #3
 8018f0e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8018f12:	2303      	movs	r3, #3
 8018f14:	e078      	b.n	8019008 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8018f16:	687b      	ldr	r3, [r7, #4]
 8018f18:	681b      	ldr	r3, [r3, #0]
 8018f1a:	681b      	ldr	r3, [r3, #0]
 8018f1c:	f003 0301 	and.w	r3, r3, #1
 8018f20:	2b00      	cmp	r3, #0
 8018f22:	d1e8      	bne.n	8018ef6 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8018f24:	687b      	ldr	r3, [r7, #4]
 8018f26:	681b      	ldr	r3, [r3, #0]
 8018f28:	681b      	ldr	r3, [r3, #0]
 8018f2a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8018f2c:	697a      	ldr	r2, [r7, #20]
 8018f2e:	4b38      	ldr	r3, [pc, #224]	; (8019010 <HAL_DMA_Init+0x158>)
 8018f30:	4013      	ands	r3, r2
 8018f32:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8018f34:	687b      	ldr	r3, [r7, #4]
 8018f36:	685a      	ldr	r2, [r3, #4]
 8018f38:	687b      	ldr	r3, [r7, #4]
 8018f3a:	689b      	ldr	r3, [r3, #8]
 8018f3c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8018f3e:	687b      	ldr	r3, [r7, #4]
 8018f40:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8018f42:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8018f44:	687b      	ldr	r3, [r7, #4]
 8018f46:	691b      	ldr	r3, [r3, #16]
 8018f48:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8018f4a:	687b      	ldr	r3, [r7, #4]
 8018f4c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8018f4e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8018f50:	687b      	ldr	r3, [r7, #4]
 8018f52:	699b      	ldr	r3, [r3, #24]
 8018f54:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8018f56:	687b      	ldr	r3, [r7, #4]
 8018f58:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8018f5a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8018f5c:	687b      	ldr	r3, [r7, #4]
 8018f5e:	6a1b      	ldr	r3, [r3, #32]
 8018f60:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8018f62:	697a      	ldr	r2, [r7, #20]
 8018f64:	4313      	orrs	r3, r2
 8018f66:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8018f68:	687b      	ldr	r3, [r7, #4]
 8018f6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018f6c:	2b04      	cmp	r3, #4
 8018f6e:	d107      	bne.n	8018f80 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8018f70:	687b      	ldr	r3, [r7, #4]
 8018f72:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8018f74:	687b      	ldr	r3, [r7, #4]
 8018f76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8018f78:	4313      	orrs	r3, r2
 8018f7a:	697a      	ldr	r2, [r7, #20]
 8018f7c:	4313      	orrs	r3, r2
 8018f7e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8018f80:	687b      	ldr	r3, [r7, #4]
 8018f82:	681b      	ldr	r3, [r3, #0]
 8018f84:	697a      	ldr	r2, [r7, #20]
 8018f86:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8018f88:	687b      	ldr	r3, [r7, #4]
 8018f8a:	681b      	ldr	r3, [r3, #0]
 8018f8c:	695b      	ldr	r3, [r3, #20]
 8018f8e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8018f90:	697b      	ldr	r3, [r7, #20]
 8018f92:	f023 0307 	bic.w	r3, r3, #7
 8018f96:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8018f98:	687b      	ldr	r3, [r7, #4]
 8018f9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018f9c:	697a      	ldr	r2, [r7, #20]
 8018f9e:	4313      	orrs	r3, r2
 8018fa0:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8018fa2:	687b      	ldr	r3, [r7, #4]
 8018fa4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018fa6:	2b04      	cmp	r3, #4
 8018fa8:	d117      	bne.n	8018fda <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8018faa:	687b      	ldr	r3, [r7, #4]
 8018fac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8018fae:	697a      	ldr	r2, [r7, #20]
 8018fb0:	4313      	orrs	r3, r2
 8018fb2:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8018fb4:	687b      	ldr	r3, [r7, #4]
 8018fb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018fb8:	2b00      	cmp	r3, #0
 8018fba:	d00e      	beq.n	8018fda <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8018fbc:	6878      	ldr	r0, [r7, #4]
 8018fbe:	f000 fa0b 	bl	80193d8 <DMA_CheckFifoParam>
 8018fc2:	4603      	mov	r3, r0
 8018fc4:	2b00      	cmp	r3, #0
 8018fc6:	d008      	beq.n	8018fda <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8018fc8:	687b      	ldr	r3, [r7, #4]
 8018fca:	2240      	movs	r2, #64	; 0x40
 8018fcc:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8018fce:	687b      	ldr	r3, [r7, #4]
 8018fd0:	2201      	movs	r2, #1
 8018fd2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8018fd6:	2301      	movs	r3, #1
 8018fd8:	e016      	b.n	8019008 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8018fda:	687b      	ldr	r3, [r7, #4]
 8018fdc:	681b      	ldr	r3, [r3, #0]
 8018fde:	697a      	ldr	r2, [r7, #20]
 8018fe0:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8018fe2:	6878      	ldr	r0, [r7, #4]
 8018fe4:	f000 f9c2 	bl	801936c <DMA_CalcBaseAndBitshift>
 8018fe8:	4603      	mov	r3, r0
 8018fea:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8018fec:	687b      	ldr	r3, [r7, #4]
 8018fee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8018ff0:	223f      	movs	r2, #63	; 0x3f
 8018ff2:	409a      	lsls	r2, r3
 8018ff4:	68fb      	ldr	r3, [r7, #12]
 8018ff6:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8018ff8:	687b      	ldr	r3, [r7, #4]
 8018ffa:	2200      	movs	r2, #0
 8018ffc:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8018ffe:	687b      	ldr	r3, [r7, #4]
 8019000:	2201      	movs	r2, #1
 8019002:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8019006:	2300      	movs	r3, #0
}
 8019008:	4618      	mov	r0, r3
 801900a:	3718      	adds	r7, #24
 801900c:	46bd      	mov	sp, r7
 801900e:	bd80      	pop	{r7, pc}
 8019010:	f010803f 	.word	0xf010803f

08019014 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8019014:	b480      	push	{r7}
 8019016:	b083      	sub	sp, #12
 8019018:	af00      	add	r7, sp, #0
 801901a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 801901c:	687b      	ldr	r3, [r7, #4]
 801901e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8019022:	b2db      	uxtb	r3, r3
 8019024:	2b02      	cmp	r3, #2
 8019026:	d004      	beq.n	8019032 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8019028:	687b      	ldr	r3, [r7, #4]
 801902a:	2280      	movs	r2, #128	; 0x80
 801902c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 801902e:	2301      	movs	r3, #1
 8019030:	e00c      	b.n	801904c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8019032:	687b      	ldr	r3, [r7, #4]
 8019034:	2205      	movs	r2, #5
 8019036:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 801903a:	687b      	ldr	r3, [r7, #4]
 801903c:	681b      	ldr	r3, [r3, #0]
 801903e:	681a      	ldr	r2, [r3, #0]
 8019040:	687b      	ldr	r3, [r7, #4]
 8019042:	681b      	ldr	r3, [r3, #0]
 8019044:	f022 0201 	bic.w	r2, r2, #1
 8019048:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 801904a:	2300      	movs	r3, #0
}
 801904c:	4618      	mov	r0, r3
 801904e:	370c      	adds	r7, #12
 8019050:	46bd      	mov	sp, r7
 8019052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019056:	4770      	bx	lr

08019058 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8019058:	b580      	push	{r7, lr}
 801905a:	b086      	sub	sp, #24
 801905c:	af00      	add	r7, sp, #0
 801905e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8019060:	2300      	movs	r3, #0
 8019062:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8019064:	4b92      	ldr	r3, [pc, #584]	; (80192b0 <HAL_DMA_IRQHandler+0x258>)
 8019066:	681b      	ldr	r3, [r3, #0]
 8019068:	4a92      	ldr	r2, [pc, #584]	; (80192b4 <HAL_DMA_IRQHandler+0x25c>)
 801906a:	fba2 2303 	umull	r2, r3, r2, r3
 801906e:	0a9b      	lsrs	r3, r3, #10
 8019070:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8019072:	687b      	ldr	r3, [r7, #4]
 8019074:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8019076:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8019078:	693b      	ldr	r3, [r7, #16]
 801907a:	681b      	ldr	r3, [r3, #0]
 801907c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 801907e:	687b      	ldr	r3, [r7, #4]
 8019080:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8019082:	2208      	movs	r2, #8
 8019084:	409a      	lsls	r2, r3
 8019086:	68fb      	ldr	r3, [r7, #12]
 8019088:	4013      	ands	r3, r2
 801908a:	2b00      	cmp	r3, #0
 801908c:	d01a      	beq.n	80190c4 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 801908e:	687b      	ldr	r3, [r7, #4]
 8019090:	681b      	ldr	r3, [r3, #0]
 8019092:	681b      	ldr	r3, [r3, #0]
 8019094:	f003 0304 	and.w	r3, r3, #4
 8019098:	2b00      	cmp	r3, #0
 801909a:	d013      	beq.n	80190c4 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 801909c:	687b      	ldr	r3, [r7, #4]
 801909e:	681b      	ldr	r3, [r3, #0]
 80190a0:	681a      	ldr	r2, [r3, #0]
 80190a2:	687b      	ldr	r3, [r7, #4]
 80190a4:	681b      	ldr	r3, [r3, #0]
 80190a6:	f022 0204 	bic.w	r2, r2, #4
 80190aa:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80190ac:	687b      	ldr	r3, [r7, #4]
 80190ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80190b0:	2208      	movs	r2, #8
 80190b2:	409a      	lsls	r2, r3
 80190b4:	693b      	ldr	r3, [r7, #16]
 80190b6:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80190b8:	687b      	ldr	r3, [r7, #4]
 80190ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80190bc:	f043 0201 	orr.w	r2, r3, #1
 80190c0:	687b      	ldr	r3, [r7, #4]
 80190c2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80190c4:	687b      	ldr	r3, [r7, #4]
 80190c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80190c8:	2201      	movs	r2, #1
 80190ca:	409a      	lsls	r2, r3
 80190cc:	68fb      	ldr	r3, [r7, #12]
 80190ce:	4013      	ands	r3, r2
 80190d0:	2b00      	cmp	r3, #0
 80190d2:	d012      	beq.n	80190fa <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80190d4:	687b      	ldr	r3, [r7, #4]
 80190d6:	681b      	ldr	r3, [r3, #0]
 80190d8:	695b      	ldr	r3, [r3, #20]
 80190da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80190de:	2b00      	cmp	r3, #0
 80190e0:	d00b      	beq.n	80190fa <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80190e2:	687b      	ldr	r3, [r7, #4]
 80190e4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80190e6:	2201      	movs	r2, #1
 80190e8:	409a      	lsls	r2, r3
 80190ea:	693b      	ldr	r3, [r7, #16]
 80190ec:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80190ee:	687b      	ldr	r3, [r7, #4]
 80190f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80190f2:	f043 0202 	orr.w	r2, r3, #2
 80190f6:	687b      	ldr	r3, [r7, #4]
 80190f8:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80190fa:	687b      	ldr	r3, [r7, #4]
 80190fc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80190fe:	2204      	movs	r2, #4
 8019100:	409a      	lsls	r2, r3
 8019102:	68fb      	ldr	r3, [r7, #12]
 8019104:	4013      	ands	r3, r2
 8019106:	2b00      	cmp	r3, #0
 8019108:	d012      	beq.n	8019130 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 801910a:	687b      	ldr	r3, [r7, #4]
 801910c:	681b      	ldr	r3, [r3, #0]
 801910e:	681b      	ldr	r3, [r3, #0]
 8019110:	f003 0302 	and.w	r3, r3, #2
 8019114:	2b00      	cmp	r3, #0
 8019116:	d00b      	beq.n	8019130 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8019118:	687b      	ldr	r3, [r7, #4]
 801911a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801911c:	2204      	movs	r2, #4
 801911e:	409a      	lsls	r2, r3
 8019120:	693b      	ldr	r3, [r7, #16]
 8019122:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8019124:	687b      	ldr	r3, [r7, #4]
 8019126:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8019128:	f043 0204 	orr.w	r2, r3, #4
 801912c:	687b      	ldr	r3, [r7, #4]
 801912e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8019130:	687b      	ldr	r3, [r7, #4]
 8019132:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8019134:	2210      	movs	r2, #16
 8019136:	409a      	lsls	r2, r3
 8019138:	68fb      	ldr	r3, [r7, #12]
 801913a:	4013      	ands	r3, r2
 801913c:	2b00      	cmp	r3, #0
 801913e:	d043      	beq.n	80191c8 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8019140:	687b      	ldr	r3, [r7, #4]
 8019142:	681b      	ldr	r3, [r3, #0]
 8019144:	681b      	ldr	r3, [r3, #0]
 8019146:	f003 0308 	and.w	r3, r3, #8
 801914a:	2b00      	cmp	r3, #0
 801914c:	d03c      	beq.n	80191c8 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 801914e:	687b      	ldr	r3, [r7, #4]
 8019150:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8019152:	2210      	movs	r2, #16
 8019154:	409a      	lsls	r2, r3
 8019156:	693b      	ldr	r3, [r7, #16]
 8019158:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 801915a:	687b      	ldr	r3, [r7, #4]
 801915c:	681b      	ldr	r3, [r3, #0]
 801915e:	681b      	ldr	r3, [r3, #0]
 8019160:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8019164:	2b00      	cmp	r3, #0
 8019166:	d018      	beq.n	801919a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8019168:	687b      	ldr	r3, [r7, #4]
 801916a:	681b      	ldr	r3, [r3, #0]
 801916c:	681b      	ldr	r3, [r3, #0]
 801916e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8019172:	2b00      	cmp	r3, #0
 8019174:	d108      	bne.n	8019188 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8019176:	687b      	ldr	r3, [r7, #4]
 8019178:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801917a:	2b00      	cmp	r3, #0
 801917c:	d024      	beq.n	80191c8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 801917e:	687b      	ldr	r3, [r7, #4]
 8019180:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8019182:	6878      	ldr	r0, [r7, #4]
 8019184:	4798      	blx	r3
 8019186:	e01f      	b.n	80191c8 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8019188:	687b      	ldr	r3, [r7, #4]
 801918a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801918c:	2b00      	cmp	r3, #0
 801918e:	d01b      	beq.n	80191c8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8019190:	687b      	ldr	r3, [r7, #4]
 8019192:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8019194:	6878      	ldr	r0, [r7, #4]
 8019196:	4798      	blx	r3
 8019198:	e016      	b.n	80191c8 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 801919a:	687b      	ldr	r3, [r7, #4]
 801919c:	681b      	ldr	r3, [r3, #0]
 801919e:	681b      	ldr	r3, [r3, #0]
 80191a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80191a4:	2b00      	cmp	r3, #0
 80191a6:	d107      	bne.n	80191b8 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80191a8:	687b      	ldr	r3, [r7, #4]
 80191aa:	681b      	ldr	r3, [r3, #0]
 80191ac:	681a      	ldr	r2, [r3, #0]
 80191ae:	687b      	ldr	r3, [r7, #4]
 80191b0:	681b      	ldr	r3, [r3, #0]
 80191b2:	f022 0208 	bic.w	r2, r2, #8
 80191b6:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80191b8:	687b      	ldr	r3, [r7, #4]
 80191ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80191bc:	2b00      	cmp	r3, #0
 80191be:	d003      	beq.n	80191c8 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80191c0:	687b      	ldr	r3, [r7, #4]
 80191c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80191c4:	6878      	ldr	r0, [r7, #4]
 80191c6:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80191c8:	687b      	ldr	r3, [r7, #4]
 80191ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80191cc:	2220      	movs	r2, #32
 80191ce:	409a      	lsls	r2, r3
 80191d0:	68fb      	ldr	r3, [r7, #12]
 80191d2:	4013      	ands	r3, r2
 80191d4:	2b00      	cmp	r3, #0
 80191d6:	f000 808e 	beq.w	80192f6 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80191da:	687b      	ldr	r3, [r7, #4]
 80191dc:	681b      	ldr	r3, [r3, #0]
 80191de:	681b      	ldr	r3, [r3, #0]
 80191e0:	f003 0310 	and.w	r3, r3, #16
 80191e4:	2b00      	cmp	r3, #0
 80191e6:	f000 8086 	beq.w	80192f6 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80191ea:	687b      	ldr	r3, [r7, #4]
 80191ec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80191ee:	2220      	movs	r2, #32
 80191f0:	409a      	lsls	r2, r3
 80191f2:	693b      	ldr	r3, [r7, #16]
 80191f4:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80191f6:	687b      	ldr	r3, [r7, #4]
 80191f8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80191fc:	b2db      	uxtb	r3, r3
 80191fe:	2b05      	cmp	r3, #5
 8019200:	d136      	bne.n	8019270 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8019202:	687b      	ldr	r3, [r7, #4]
 8019204:	681b      	ldr	r3, [r3, #0]
 8019206:	681a      	ldr	r2, [r3, #0]
 8019208:	687b      	ldr	r3, [r7, #4]
 801920a:	681b      	ldr	r3, [r3, #0]
 801920c:	f022 0216 	bic.w	r2, r2, #22
 8019210:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8019212:	687b      	ldr	r3, [r7, #4]
 8019214:	681b      	ldr	r3, [r3, #0]
 8019216:	695a      	ldr	r2, [r3, #20]
 8019218:	687b      	ldr	r3, [r7, #4]
 801921a:	681b      	ldr	r3, [r3, #0]
 801921c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8019220:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8019222:	687b      	ldr	r3, [r7, #4]
 8019224:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8019226:	2b00      	cmp	r3, #0
 8019228:	d103      	bne.n	8019232 <HAL_DMA_IRQHandler+0x1da>
 801922a:	687b      	ldr	r3, [r7, #4]
 801922c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801922e:	2b00      	cmp	r3, #0
 8019230:	d007      	beq.n	8019242 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8019232:	687b      	ldr	r3, [r7, #4]
 8019234:	681b      	ldr	r3, [r3, #0]
 8019236:	681a      	ldr	r2, [r3, #0]
 8019238:	687b      	ldr	r3, [r7, #4]
 801923a:	681b      	ldr	r3, [r3, #0]
 801923c:	f022 0208 	bic.w	r2, r2, #8
 8019240:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8019242:	687b      	ldr	r3, [r7, #4]
 8019244:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8019246:	223f      	movs	r2, #63	; 0x3f
 8019248:	409a      	lsls	r2, r3
 801924a:	693b      	ldr	r3, [r7, #16]
 801924c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 801924e:	687b      	ldr	r3, [r7, #4]
 8019250:	2201      	movs	r2, #1
 8019252:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8019256:	687b      	ldr	r3, [r7, #4]
 8019258:	2200      	movs	r2, #0
 801925a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 801925e:	687b      	ldr	r3, [r7, #4]
 8019260:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8019262:	2b00      	cmp	r3, #0
 8019264:	d07d      	beq.n	8019362 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8019266:	687b      	ldr	r3, [r7, #4]
 8019268:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801926a:	6878      	ldr	r0, [r7, #4]
 801926c:	4798      	blx	r3
        }
        return;
 801926e:	e078      	b.n	8019362 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8019270:	687b      	ldr	r3, [r7, #4]
 8019272:	681b      	ldr	r3, [r3, #0]
 8019274:	681b      	ldr	r3, [r3, #0]
 8019276:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 801927a:	2b00      	cmp	r3, #0
 801927c:	d01c      	beq.n	80192b8 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 801927e:	687b      	ldr	r3, [r7, #4]
 8019280:	681b      	ldr	r3, [r3, #0]
 8019282:	681b      	ldr	r3, [r3, #0]
 8019284:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8019288:	2b00      	cmp	r3, #0
 801928a:	d108      	bne.n	801929e <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 801928c:	687b      	ldr	r3, [r7, #4]
 801928e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8019290:	2b00      	cmp	r3, #0
 8019292:	d030      	beq.n	80192f6 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8019294:	687b      	ldr	r3, [r7, #4]
 8019296:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8019298:	6878      	ldr	r0, [r7, #4]
 801929a:	4798      	blx	r3
 801929c:	e02b      	b.n	80192f6 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 801929e:	687b      	ldr	r3, [r7, #4]
 80192a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80192a2:	2b00      	cmp	r3, #0
 80192a4:	d027      	beq.n	80192f6 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80192a6:	687b      	ldr	r3, [r7, #4]
 80192a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80192aa:	6878      	ldr	r0, [r7, #4]
 80192ac:	4798      	blx	r3
 80192ae:	e022      	b.n	80192f6 <HAL_DMA_IRQHandler+0x29e>
 80192b0:	2000058c 	.word	0x2000058c
 80192b4:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80192b8:	687b      	ldr	r3, [r7, #4]
 80192ba:	681b      	ldr	r3, [r3, #0]
 80192bc:	681b      	ldr	r3, [r3, #0]
 80192be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80192c2:	2b00      	cmp	r3, #0
 80192c4:	d10f      	bne.n	80192e6 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80192c6:	687b      	ldr	r3, [r7, #4]
 80192c8:	681b      	ldr	r3, [r3, #0]
 80192ca:	681a      	ldr	r2, [r3, #0]
 80192cc:	687b      	ldr	r3, [r7, #4]
 80192ce:	681b      	ldr	r3, [r3, #0]
 80192d0:	f022 0210 	bic.w	r2, r2, #16
 80192d4:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80192d6:	687b      	ldr	r3, [r7, #4]
 80192d8:	2201      	movs	r2, #1
 80192da:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80192de:	687b      	ldr	r3, [r7, #4]
 80192e0:	2200      	movs	r2, #0
 80192e2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80192e6:	687b      	ldr	r3, [r7, #4]
 80192e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80192ea:	2b00      	cmp	r3, #0
 80192ec:	d003      	beq.n	80192f6 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80192ee:	687b      	ldr	r3, [r7, #4]
 80192f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80192f2:	6878      	ldr	r0, [r7, #4]
 80192f4:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80192f6:	687b      	ldr	r3, [r7, #4]
 80192f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80192fa:	2b00      	cmp	r3, #0
 80192fc:	d032      	beq.n	8019364 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80192fe:	687b      	ldr	r3, [r7, #4]
 8019300:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8019302:	f003 0301 	and.w	r3, r3, #1
 8019306:	2b00      	cmp	r3, #0
 8019308:	d022      	beq.n	8019350 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 801930a:	687b      	ldr	r3, [r7, #4]
 801930c:	2205      	movs	r2, #5
 801930e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8019312:	687b      	ldr	r3, [r7, #4]
 8019314:	681b      	ldr	r3, [r3, #0]
 8019316:	681a      	ldr	r2, [r3, #0]
 8019318:	687b      	ldr	r3, [r7, #4]
 801931a:	681b      	ldr	r3, [r3, #0]
 801931c:	f022 0201 	bic.w	r2, r2, #1
 8019320:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8019322:	68bb      	ldr	r3, [r7, #8]
 8019324:	3301      	adds	r3, #1
 8019326:	60bb      	str	r3, [r7, #8]
 8019328:	697a      	ldr	r2, [r7, #20]
 801932a:	429a      	cmp	r2, r3
 801932c:	d307      	bcc.n	801933e <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 801932e:	687b      	ldr	r3, [r7, #4]
 8019330:	681b      	ldr	r3, [r3, #0]
 8019332:	681b      	ldr	r3, [r3, #0]
 8019334:	f003 0301 	and.w	r3, r3, #1
 8019338:	2b00      	cmp	r3, #0
 801933a:	d1f2      	bne.n	8019322 <HAL_DMA_IRQHandler+0x2ca>
 801933c:	e000      	b.n	8019340 <HAL_DMA_IRQHandler+0x2e8>
          break;
 801933e:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8019340:	687b      	ldr	r3, [r7, #4]
 8019342:	2201      	movs	r2, #1
 8019344:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8019348:	687b      	ldr	r3, [r7, #4]
 801934a:	2200      	movs	r2, #0
 801934c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8019350:	687b      	ldr	r3, [r7, #4]
 8019352:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8019354:	2b00      	cmp	r3, #0
 8019356:	d005      	beq.n	8019364 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8019358:	687b      	ldr	r3, [r7, #4]
 801935a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801935c:	6878      	ldr	r0, [r7, #4]
 801935e:	4798      	blx	r3
 8019360:	e000      	b.n	8019364 <HAL_DMA_IRQHandler+0x30c>
        return;
 8019362:	bf00      	nop
    }
  }
}
 8019364:	3718      	adds	r7, #24
 8019366:	46bd      	mov	sp, r7
 8019368:	bd80      	pop	{r7, pc}
 801936a:	bf00      	nop

0801936c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 801936c:	b480      	push	{r7}
 801936e:	b085      	sub	sp, #20
 8019370:	af00      	add	r7, sp, #0
 8019372:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8019374:	687b      	ldr	r3, [r7, #4]
 8019376:	681b      	ldr	r3, [r3, #0]
 8019378:	b2db      	uxtb	r3, r3
 801937a:	3b10      	subs	r3, #16
 801937c:	4a14      	ldr	r2, [pc, #80]	; (80193d0 <DMA_CalcBaseAndBitshift+0x64>)
 801937e:	fba2 2303 	umull	r2, r3, r2, r3
 8019382:	091b      	lsrs	r3, r3, #4
 8019384:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8019386:	4a13      	ldr	r2, [pc, #76]	; (80193d4 <DMA_CalcBaseAndBitshift+0x68>)
 8019388:	68fb      	ldr	r3, [r7, #12]
 801938a:	4413      	add	r3, r2
 801938c:	781b      	ldrb	r3, [r3, #0]
 801938e:	461a      	mov	r2, r3
 8019390:	687b      	ldr	r3, [r7, #4]
 8019392:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8019394:	68fb      	ldr	r3, [r7, #12]
 8019396:	2b03      	cmp	r3, #3
 8019398:	d909      	bls.n	80193ae <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 801939a:	687b      	ldr	r3, [r7, #4]
 801939c:	681b      	ldr	r3, [r3, #0]
 801939e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80193a2:	f023 0303 	bic.w	r3, r3, #3
 80193a6:	1d1a      	adds	r2, r3, #4
 80193a8:	687b      	ldr	r3, [r7, #4]
 80193aa:	659a      	str	r2, [r3, #88]	; 0x58
 80193ac:	e007      	b.n	80193be <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80193ae:	687b      	ldr	r3, [r7, #4]
 80193b0:	681b      	ldr	r3, [r3, #0]
 80193b2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80193b6:	f023 0303 	bic.w	r3, r3, #3
 80193ba:	687a      	ldr	r2, [r7, #4]
 80193bc:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80193be:	687b      	ldr	r3, [r7, #4]
 80193c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80193c2:	4618      	mov	r0, r3
 80193c4:	3714      	adds	r7, #20
 80193c6:	46bd      	mov	sp, r7
 80193c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80193cc:	4770      	bx	lr
 80193ce:	bf00      	nop
 80193d0:	aaaaaaab 	.word	0xaaaaaaab
 80193d4:	08002360 	.word	0x08002360

080193d8 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80193d8:	b480      	push	{r7}
 80193da:	b085      	sub	sp, #20
 80193dc:	af00      	add	r7, sp, #0
 80193de:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80193e0:	2300      	movs	r3, #0
 80193e2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80193e4:	687b      	ldr	r3, [r7, #4]
 80193e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80193e8:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80193ea:	687b      	ldr	r3, [r7, #4]
 80193ec:	699b      	ldr	r3, [r3, #24]
 80193ee:	2b00      	cmp	r3, #0
 80193f0:	d11f      	bne.n	8019432 <DMA_CheckFifoParam+0x5a>
 80193f2:	68bb      	ldr	r3, [r7, #8]
 80193f4:	2b03      	cmp	r3, #3
 80193f6:	d856      	bhi.n	80194a6 <DMA_CheckFifoParam+0xce>
 80193f8:	a201      	add	r2, pc, #4	; (adr r2, 8019400 <DMA_CheckFifoParam+0x28>)
 80193fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80193fe:	bf00      	nop
 8019400:	08019411 	.word	0x08019411
 8019404:	08019423 	.word	0x08019423
 8019408:	08019411 	.word	0x08019411
 801940c:	080194a7 	.word	0x080194a7
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8019410:	687b      	ldr	r3, [r7, #4]
 8019412:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8019414:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8019418:	2b00      	cmp	r3, #0
 801941a:	d046      	beq.n	80194aa <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 801941c:	2301      	movs	r3, #1
 801941e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8019420:	e043      	b.n	80194aa <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8019422:	687b      	ldr	r3, [r7, #4]
 8019424:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8019426:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 801942a:	d140      	bne.n	80194ae <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 801942c:	2301      	movs	r3, #1
 801942e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8019430:	e03d      	b.n	80194ae <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8019432:	687b      	ldr	r3, [r7, #4]
 8019434:	699b      	ldr	r3, [r3, #24]
 8019436:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 801943a:	d121      	bne.n	8019480 <DMA_CheckFifoParam+0xa8>
 801943c:	68bb      	ldr	r3, [r7, #8]
 801943e:	2b03      	cmp	r3, #3
 8019440:	d837      	bhi.n	80194b2 <DMA_CheckFifoParam+0xda>
 8019442:	a201      	add	r2, pc, #4	; (adr r2, 8019448 <DMA_CheckFifoParam+0x70>)
 8019444:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8019448:	08019459 	.word	0x08019459
 801944c:	0801945f 	.word	0x0801945f
 8019450:	08019459 	.word	0x08019459
 8019454:	08019471 	.word	0x08019471
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8019458:	2301      	movs	r3, #1
 801945a:	73fb      	strb	r3, [r7, #15]
      break;
 801945c:	e030      	b.n	80194c0 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 801945e:	687b      	ldr	r3, [r7, #4]
 8019460:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8019462:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8019466:	2b00      	cmp	r3, #0
 8019468:	d025      	beq.n	80194b6 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 801946a:	2301      	movs	r3, #1
 801946c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 801946e:	e022      	b.n	80194b6 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8019470:	687b      	ldr	r3, [r7, #4]
 8019472:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8019474:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8019478:	d11f      	bne.n	80194ba <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 801947a:	2301      	movs	r3, #1
 801947c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 801947e:	e01c      	b.n	80194ba <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8019480:	68bb      	ldr	r3, [r7, #8]
 8019482:	2b02      	cmp	r3, #2
 8019484:	d903      	bls.n	801948e <DMA_CheckFifoParam+0xb6>
 8019486:	68bb      	ldr	r3, [r7, #8]
 8019488:	2b03      	cmp	r3, #3
 801948a:	d003      	beq.n	8019494 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 801948c:	e018      	b.n	80194c0 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 801948e:	2301      	movs	r3, #1
 8019490:	73fb      	strb	r3, [r7, #15]
      break;
 8019492:	e015      	b.n	80194c0 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8019494:	687b      	ldr	r3, [r7, #4]
 8019496:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8019498:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 801949c:	2b00      	cmp	r3, #0
 801949e:	d00e      	beq.n	80194be <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80194a0:	2301      	movs	r3, #1
 80194a2:	73fb      	strb	r3, [r7, #15]
      break;
 80194a4:	e00b      	b.n	80194be <DMA_CheckFifoParam+0xe6>
      break;
 80194a6:	bf00      	nop
 80194a8:	e00a      	b.n	80194c0 <DMA_CheckFifoParam+0xe8>
      break;
 80194aa:	bf00      	nop
 80194ac:	e008      	b.n	80194c0 <DMA_CheckFifoParam+0xe8>
      break;
 80194ae:	bf00      	nop
 80194b0:	e006      	b.n	80194c0 <DMA_CheckFifoParam+0xe8>
      break;
 80194b2:	bf00      	nop
 80194b4:	e004      	b.n	80194c0 <DMA_CheckFifoParam+0xe8>
      break;
 80194b6:	bf00      	nop
 80194b8:	e002      	b.n	80194c0 <DMA_CheckFifoParam+0xe8>
      break;   
 80194ba:	bf00      	nop
 80194bc:	e000      	b.n	80194c0 <DMA_CheckFifoParam+0xe8>
      break;
 80194be:	bf00      	nop
    }
  } 
  
  return status; 
 80194c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80194c2:	4618      	mov	r0, r3
 80194c4:	3714      	adds	r7, #20
 80194c6:	46bd      	mov	sp, r7
 80194c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80194cc:	4770      	bx	lr
 80194ce:	bf00      	nop

080194d0 <HAL_FLASH_Program>:
  * @param  Data specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 80194d0:	b580      	push	{r7, lr}
 80194d2:	b086      	sub	sp, #24
 80194d4:	af00      	add	r7, sp, #0
 80194d6:	60f8      	str	r0, [r7, #12]
 80194d8:	60b9      	str	r1, [r7, #8]
 80194da:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 80194de:	2301      	movs	r3, #1
 80194e0:	75fb      	strb	r3, [r7, #23]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80194e2:	4b23      	ldr	r3, [pc, #140]	; (8019570 <HAL_FLASH_Program+0xa0>)
 80194e4:	7e1b      	ldrb	r3, [r3, #24]
 80194e6:	2b01      	cmp	r3, #1
 80194e8:	d101      	bne.n	80194ee <HAL_FLASH_Program+0x1e>
 80194ea:	2302      	movs	r3, #2
 80194ec:	e03b      	b.n	8019566 <HAL_FLASH_Program+0x96>
 80194ee:	4b20      	ldr	r3, [pc, #128]	; (8019570 <HAL_FLASH_Program+0xa0>)
 80194f0:	2201      	movs	r2, #1
 80194f2:	761a      	strb	r2, [r3, #24]
  
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80194f4:	f24c 3050 	movw	r0, #50000	; 0xc350
 80194f8:	f000 f870 	bl	80195dc <FLASH_WaitForLastOperation>
 80194fc:	4603      	mov	r3, r0
 80194fe:	75fb      	strb	r3, [r7, #23]
  
  if(status == HAL_OK)
 8019500:	7dfb      	ldrb	r3, [r7, #23]
 8019502:	2b00      	cmp	r3, #0
 8019504:	d12b      	bne.n	801955e <HAL_FLASH_Program+0x8e>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 8019506:	68fb      	ldr	r3, [r7, #12]
 8019508:	2b00      	cmp	r3, #0
 801950a:	d105      	bne.n	8019518 <HAL_FLASH_Program+0x48>
    {
      /*Program byte (8-bit) at a specified address.*/
      FLASH_Program_Byte(Address, (uint8_t) Data);
 801950c:	783b      	ldrb	r3, [r7, #0]
 801950e:	4619      	mov	r1, r3
 8019510:	68b8      	ldr	r0, [r7, #8]
 8019512:	f000 f91b 	bl	801974c <FLASH_Program_Byte>
 8019516:	e016      	b.n	8019546 <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8019518:	68fb      	ldr	r3, [r7, #12]
 801951a:	2b01      	cmp	r3, #1
 801951c:	d105      	bne.n	801952a <HAL_FLASH_Program+0x5a>
    {
      /*Program halfword (16-bit) at a specified address.*/
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
 801951e:	883b      	ldrh	r3, [r7, #0]
 8019520:	4619      	mov	r1, r3
 8019522:	68b8      	ldr	r0, [r7, #8]
 8019524:	f000 f8ee 	bl	8019704 <FLASH_Program_HalfWord>
 8019528:	e00d      	b.n	8019546 <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 801952a:	68fb      	ldr	r3, [r7, #12]
 801952c:	2b02      	cmp	r3, #2
 801952e:	d105      	bne.n	801953c <HAL_FLASH_Program+0x6c>
    {
      /*Program word (32-bit) at a specified address.*/
      FLASH_Program_Word(Address, (uint32_t) Data);
 8019530:	683b      	ldr	r3, [r7, #0]
 8019532:	4619      	mov	r1, r3
 8019534:	68b8      	ldr	r0, [r7, #8]
 8019536:	f000 f8c3 	bl	80196c0 <FLASH_Program_Word>
 801953a:	e004      	b.n	8019546 <HAL_FLASH_Program+0x76>
    }
    else
    {
      /*Program double word (64-bit) at a specified address.*/
      FLASH_Program_DoubleWord(Address, Data);
 801953c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8019540:	68b8      	ldr	r0, [r7, #8]
 8019542:	f000 f88b 	bl	801965c <FLASH_Program_DoubleWord>
    }
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8019546:	f24c 3050 	movw	r0, #50000	; 0xc350
 801954a:	f000 f847 	bl	80195dc <FLASH_WaitForLastOperation>
 801954e:	4603      	mov	r3, r0
 8019550:	75fb      	strb	r3, [r7, #23]
    
    /* If the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);  
 8019552:	4b08      	ldr	r3, [pc, #32]	; (8019574 <HAL_FLASH_Program+0xa4>)
 8019554:	691b      	ldr	r3, [r3, #16]
 8019556:	4a07      	ldr	r2, [pc, #28]	; (8019574 <HAL_FLASH_Program+0xa4>)
 8019558:	f023 0301 	bic.w	r3, r3, #1
 801955c:	6113      	str	r3, [r2, #16]
  }
  
  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 801955e:	4b04      	ldr	r3, [pc, #16]	; (8019570 <HAL_FLASH_Program+0xa0>)
 8019560:	2200      	movs	r2, #0
 8019562:	761a      	strb	r2, [r3, #24]
  
  return status;
 8019564:	7dfb      	ldrb	r3, [r7, #23]
}
 8019566:	4618      	mov	r0, r3
 8019568:	3718      	adds	r7, #24
 801956a:	46bd      	mov	sp, r7
 801956c:	bd80      	pop	{r7, pc}
 801956e:	bf00      	nop
 8019570:	20006c28 	.word	0x20006c28
 8019574:	40023c00 	.word	0x40023c00

08019578 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8019578:	b480      	push	{r7}
 801957a:	b083      	sub	sp, #12
 801957c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 801957e:	2300      	movs	r3, #0
 8019580:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8019582:	4b0b      	ldr	r3, [pc, #44]	; (80195b0 <HAL_FLASH_Unlock+0x38>)
 8019584:	691b      	ldr	r3, [r3, #16]
 8019586:	2b00      	cmp	r3, #0
 8019588:	da0b      	bge.n	80195a2 <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 801958a:	4b09      	ldr	r3, [pc, #36]	; (80195b0 <HAL_FLASH_Unlock+0x38>)
 801958c:	4a09      	ldr	r2, [pc, #36]	; (80195b4 <HAL_FLASH_Unlock+0x3c>)
 801958e:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8019590:	4b07      	ldr	r3, [pc, #28]	; (80195b0 <HAL_FLASH_Unlock+0x38>)
 8019592:	4a09      	ldr	r2, [pc, #36]	; (80195b8 <HAL_FLASH_Unlock+0x40>)
 8019594:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8019596:	4b06      	ldr	r3, [pc, #24]	; (80195b0 <HAL_FLASH_Unlock+0x38>)
 8019598:	691b      	ldr	r3, [r3, #16]
 801959a:	2b00      	cmp	r3, #0
 801959c:	da01      	bge.n	80195a2 <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 801959e:	2301      	movs	r3, #1
 80195a0:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 80195a2:	79fb      	ldrb	r3, [r7, #7]
}
 80195a4:	4618      	mov	r0, r3
 80195a6:	370c      	adds	r7, #12
 80195a8:	46bd      	mov	sp, r7
 80195aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80195ae:	4770      	bx	lr
 80195b0:	40023c00 	.word	0x40023c00
 80195b4:	45670123 	.word	0x45670123
 80195b8:	cdef89ab 	.word	0xcdef89ab

080195bc <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 80195bc:	b480      	push	{r7}
 80195be:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 80195c0:	4b05      	ldr	r3, [pc, #20]	; (80195d8 <HAL_FLASH_Lock+0x1c>)
 80195c2:	691b      	ldr	r3, [r3, #16]
 80195c4:	4a04      	ldr	r2, [pc, #16]	; (80195d8 <HAL_FLASH_Lock+0x1c>)
 80195c6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80195ca:	6113      	str	r3, [r2, #16]
  
  return HAL_OK;  
 80195cc:	2300      	movs	r3, #0
}
 80195ce:	4618      	mov	r0, r3
 80195d0:	46bd      	mov	sp, r7
 80195d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80195d6:	4770      	bx	lr
 80195d8:	40023c00 	.word	0x40023c00

080195dc <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{ 
 80195dc:	b580      	push	{r7, lr}
 80195de:	b084      	sub	sp, #16
 80195e0:	af00      	add	r7, sp, #0
 80195e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80195e4:	2300      	movs	r3, #0
 80195e6:	60fb      	str	r3, [r7, #12]
  
  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80195e8:	4b1a      	ldr	r3, [pc, #104]	; (8019654 <FLASH_WaitForLastOperation+0x78>)
 80195ea:	2200      	movs	r2, #0
 80195ec:	61da      	str	r2, [r3, #28]
  
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 80195ee:	f7ff f819 	bl	8018624 <HAL_GetTick>
 80195f2:	60f8      	str	r0, [r7, #12]

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 80195f4:	e010      	b.n	8019618 <FLASH_WaitForLastOperation+0x3c>
  { 
    if(Timeout != HAL_MAX_DELAY)
 80195f6:	687b      	ldr	r3, [r7, #4]
 80195f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80195fc:	d00c      	beq.n	8019618 <FLASH_WaitForLastOperation+0x3c>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 80195fe:	687b      	ldr	r3, [r7, #4]
 8019600:	2b00      	cmp	r3, #0
 8019602:	d007      	beq.n	8019614 <FLASH_WaitForLastOperation+0x38>
 8019604:	f7ff f80e 	bl	8018624 <HAL_GetTick>
 8019608:	4602      	mov	r2, r0
 801960a:	68fb      	ldr	r3, [r7, #12]
 801960c:	1ad3      	subs	r3, r2, r3
 801960e:	687a      	ldr	r2, [r7, #4]
 8019610:	429a      	cmp	r2, r3
 8019612:	d201      	bcs.n	8019618 <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 8019614:	2303      	movs	r3, #3
 8019616:	e019      	b.n	801964c <FLASH_WaitForLastOperation+0x70>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8019618:	4b0f      	ldr	r3, [pc, #60]	; (8019658 <FLASH_WaitForLastOperation+0x7c>)
 801961a:	68db      	ldr	r3, [r3, #12]
 801961c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8019620:	2b00      	cmp	r3, #0
 8019622:	d1e8      	bne.n	80195f6 <FLASH_WaitForLastOperation+0x1a>
      }
    } 
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 8019624:	4b0c      	ldr	r3, [pc, #48]	; (8019658 <FLASH_WaitForLastOperation+0x7c>)
 8019626:	68db      	ldr	r3, [r3, #12]
 8019628:	f003 0301 	and.w	r3, r3, #1
 801962c:	2b00      	cmp	r3, #0
 801962e:	d002      	beq.n	8019636 <FLASH_WaitForLastOperation+0x5a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8019630:	4b09      	ldr	r3, [pc, #36]	; (8019658 <FLASH_WaitForLastOperation+0x7c>)
 8019632:	2201      	movs	r2, #1
 8019634:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)  
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 8019636:	4b08      	ldr	r3, [pc, #32]	; (8019658 <FLASH_WaitForLastOperation+0x7c>)
 8019638:	68db      	ldr	r3, [r3, #12]
 801963a:	f403 73f9 	and.w	r3, r3, #498	; 0x1f2
 801963e:	2b00      	cmp	r3, #0
 8019640:	d003      	beq.n	801964a <FLASH_WaitForLastOperation+0x6e>
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 8019642:	f000 f8a5 	bl	8019790 <FLASH_SetErrorCode>
    return HAL_ERROR;
 8019646:	2301      	movs	r3, #1
 8019648:	e000      	b.n	801964c <FLASH_WaitForLastOperation+0x70>
  }

  /* If there is no error flag set */
  return HAL_OK;
 801964a:	2300      	movs	r3, #0
  
}  
 801964c:	4618      	mov	r0, r3
 801964e:	3710      	adds	r7, #16
 8019650:	46bd      	mov	sp, r7
 8019652:	bd80      	pop	{r7, pc}
 8019654:	20006c28 	.word	0x20006c28
 8019658:	40023c00 	.word	0x40023c00

0801965c <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 801965c:	b480      	push	{r7}
 801965e:	b085      	sub	sp, #20
 8019660:	af00      	add	r7, sp, #0
 8019662:	60f8      	str	r0, [r7, #12]
 8019664:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8019668:	4b14      	ldr	r3, [pc, #80]	; (80196bc <FLASH_Program_DoubleWord+0x60>)
 801966a:	691b      	ldr	r3, [r3, #16]
 801966c:	4a13      	ldr	r2, [pc, #76]	; (80196bc <FLASH_Program_DoubleWord+0x60>)
 801966e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8019672:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 8019674:	4b11      	ldr	r3, [pc, #68]	; (80196bc <FLASH_Program_DoubleWord+0x60>)
 8019676:	691b      	ldr	r3, [r3, #16]
 8019678:	4a10      	ldr	r2, [pc, #64]	; (80196bc <FLASH_Program_DoubleWord+0x60>)
 801967a:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 801967e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8019680:	4b0e      	ldr	r3, [pc, #56]	; (80196bc <FLASH_Program_DoubleWord+0x60>)
 8019682:	691b      	ldr	r3, [r3, #16]
 8019684:	4a0d      	ldr	r2, [pc, #52]	; (80196bc <FLASH_Program_DoubleWord+0x60>)
 8019686:	f043 0301 	orr.w	r3, r3, #1
 801968a:	6113      	str	r3, [r2, #16]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 801968c:	68fb      	ldr	r3, [r7, #12]
 801968e:	683a      	ldr	r2, [r7, #0]
 8019690:	601a      	str	r2, [r3, #0]
           so that all instructions following the ISB are fetched from cache or memory,
           after the instruction has been completed.
 */
__STATIC_FORCEINLINE void __ISB(void)
{
  __ASM volatile ("isb 0xF":::"memory");
 8019692:	f3bf 8f6f 	isb	sy
}
 8019696:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4) = (uint32_t)(Data >> 32);
 8019698:	e9d7 0100 	ldrd	r0, r1, [r7]
 801969c:	f04f 0200 	mov.w	r2, #0
 80196a0:	f04f 0300 	mov.w	r3, #0
 80196a4:	000a      	movs	r2, r1
 80196a6:	2300      	movs	r3, #0
 80196a8:	68f9      	ldr	r1, [r7, #12]
 80196aa:	3104      	adds	r1, #4
 80196ac:	4613      	mov	r3, r2
 80196ae:	600b      	str	r3, [r1, #0]
}
 80196b0:	bf00      	nop
 80196b2:	3714      	adds	r7, #20
 80196b4:	46bd      	mov	sp, r7
 80196b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80196ba:	4770      	bx	lr
 80196bc:	40023c00 	.word	0x40023c00

080196c0 <FLASH_Program_Word>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
 80196c0:	b480      	push	{r7}
 80196c2:	b083      	sub	sp, #12
 80196c4:	af00      	add	r7, sp, #0
 80196c6:	6078      	str	r0, [r7, #4]
 80196c8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80196ca:	4b0d      	ldr	r3, [pc, #52]	; (8019700 <FLASH_Program_Word+0x40>)
 80196cc:	691b      	ldr	r3, [r3, #16]
 80196ce:	4a0c      	ldr	r2, [pc, #48]	; (8019700 <FLASH_Program_Word+0x40>)
 80196d0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80196d4:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 80196d6:	4b0a      	ldr	r3, [pc, #40]	; (8019700 <FLASH_Program_Word+0x40>)
 80196d8:	691b      	ldr	r3, [r3, #16]
 80196da:	4a09      	ldr	r2, [pc, #36]	; (8019700 <FLASH_Program_Word+0x40>)
 80196dc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80196e0:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 80196e2:	4b07      	ldr	r3, [pc, #28]	; (8019700 <FLASH_Program_Word+0x40>)
 80196e4:	691b      	ldr	r3, [r3, #16]
 80196e6:	4a06      	ldr	r2, [pc, #24]	; (8019700 <FLASH_Program_Word+0x40>)
 80196e8:	f043 0301 	orr.w	r3, r3, #1
 80196ec:	6113      	str	r3, [r2, #16]

  *(__IO uint32_t*)Address = Data;
 80196ee:	687b      	ldr	r3, [r7, #4]
 80196f0:	683a      	ldr	r2, [r7, #0]
 80196f2:	601a      	str	r2, [r3, #0]
}
 80196f4:	bf00      	nop
 80196f6:	370c      	adds	r7, #12
 80196f8:	46bd      	mov	sp, r7
 80196fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80196fe:	4770      	bx	lr
 8019700:	40023c00 	.word	0x40023c00

08019704 <FLASH_Program_HalfWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8019704:	b480      	push	{r7}
 8019706:	b083      	sub	sp, #12
 8019708:	af00      	add	r7, sp, #0
 801970a:	6078      	str	r0, [r7, #4]
 801970c:	460b      	mov	r3, r1
 801970e:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8019710:	4b0d      	ldr	r3, [pc, #52]	; (8019748 <FLASH_Program_HalfWord+0x44>)
 8019712:	691b      	ldr	r3, [r3, #16]
 8019714:	4a0c      	ldr	r2, [pc, #48]	; (8019748 <FLASH_Program_HalfWord+0x44>)
 8019716:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 801971a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 801971c:	4b0a      	ldr	r3, [pc, #40]	; (8019748 <FLASH_Program_HalfWord+0x44>)
 801971e:	691b      	ldr	r3, [r3, #16]
 8019720:	4a09      	ldr	r2, [pc, #36]	; (8019748 <FLASH_Program_HalfWord+0x44>)
 8019722:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8019726:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8019728:	4b07      	ldr	r3, [pc, #28]	; (8019748 <FLASH_Program_HalfWord+0x44>)
 801972a:	691b      	ldr	r3, [r3, #16]
 801972c:	4a06      	ldr	r2, [pc, #24]	; (8019748 <FLASH_Program_HalfWord+0x44>)
 801972e:	f043 0301 	orr.w	r3, r3, #1
 8019732:	6113      	str	r3, [r2, #16]

  *(__IO uint16_t*)Address = Data;
 8019734:	687b      	ldr	r3, [r7, #4]
 8019736:	887a      	ldrh	r2, [r7, #2]
 8019738:	801a      	strh	r2, [r3, #0]
}
 801973a:	bf00      	nop
 801973c:	370c      	adds	r7, #12
 801973e:	46bd      	mov	sp, r7
 8019740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019744:	4770      	bx	lr
 8019746:	bf00      	nop
 8019748:	40023c00 	.word	0x40023c00

0801974c <FLASH_Program_Byte>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
{
 801974c:	b480      	push	{r7}
 801974e:	b083      	sub	sp, #12
 8019750:	af00      	add	r7, sp, #0
 8019752:	6078      	str	r0, [r7, #4]
 8019754:	460b      	mov	r3, r1
 8019756:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8019758:	4b0c      	ldr	r3, [pc, #48]	; (801978c <FLASH_Program_Byte+0x40>)
 801975a:	691b      	ldr	r3, [r3, #16]
 801975c:	4a0b      	ldr	r2, [pc, #44]	; (801978c <FLASH_Program_Byte+0x40>)
 801975e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8019762:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 8019764:	4b09      	ldr	r3, [pc, #36]	; (801978c <FLASH_Program_Byte+0x40>)
 8019766:	4a09      	ldr	r2, [pc, #36]	; (801978c <FLASH_Program_Byte+0x40>)
 8019768:	691b      	ldr	r3, [r3, #16]
 801976a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 801976c:	4b07      	ldr	r3, [pc, #28]	; (801978c <FLASH_Program_Byte+0x40>)
 801976e:	691b      	ldr	r3, [r3, #16]
 8019770:	4a06      	ldr	r2, [pc, #24]	; (801978c <FLASH_Program_Byte+0x40>)
 8019772:	f043 0301 	orr.w	r3, r3, #1
 8019776:	6113      	str	r3, [r2, #16]

  *(__IO uint8_t*)Address = Data;
 8019778:	687b      	ldr	r3, [r7, #4]
 801977a:	78fa      	ldrb	r2, [r7, #3]
 801977c:	701a      	strb	r2, [r3, #0]
}
 801977e:	bf00      	nop
 8019780:	370c      	adds	r7, #12
 8019782:	46bd      	mov	sp, r7
 8019784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019788:	4770      	bx	lr
 801978a:	bf00      	nop
 801978c:	40023c00 	.word	0x40023c00

08019790 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
 8019790:	b480      	push	{r7}
 8019792:	af00      	add	r7, sp, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 8019794:	4b2f      	ldr	r3, [pc, #188]	; (8019854 <FLASH_SetErrorCode+0xc4>)
 8019796:	68db      	ldr	r3, [r3, #12]
 8019798:	f003 0310 	and.w	r3, r3, #16
 801979c:	2b00      	cmp	r3, #0
 801979e:	d008      	beq.n	80197b2 <FLASH_SetErrorCode+0x22>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 80197a0:	4b2d      	ldr	r3, [pc, #180]	; (8019858 <FLASH_SetErrorCode+0xc8>)
 80197a2:	69db      	ldr	r3, [r3, #28]
 80197a4:	f043 0310 	orr.w	r3, r3, #16
 80197a8:	4a2b      	ldr	r2, [pc, #172]	; (8019858 <FLASH_SetErrorCode+0xc8>)
 80197aa:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH write protection error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 80197ac:	4b29      	ldr	r3, [pc, #164]	; (8019854 <FLASH_SetErrorCode+0xc4>)
 80197ae:	2210      	movs	r2, #16
 80197b0:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 80197b2:	4b28      	ldr	r3, [pc, #160]	; (8019854 <FLASH_SetErrorCode+0xc4>)
 80197b4:	68db      	ldr	r3, [r3, #12]
 80197b6:	f003 0320 	and.w	r3, r3, #32
 80197ba:	2b00      	cmp	r3, #0
 80197bc:	d008      	beq.n	80197d0 <FLASH_SetErrorCode+0x40>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 80197be:	4b26      	ldr	r3, [pc, #152]	; (8019858 <FLASH_SetErrorCode+0xc8>)
 80197c0:	69db      	ldr	r3, [r3, #28]
 80197c2:	f043 0308 	orr.w	r3, r3, #8
 80197c6:	4a24      	ldr	r2, [pc, #144]	; (8019858 <FLASH_SetErrorCode+0xc8>)
 80197c8:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH Programming alignment error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 80197ca:	4b22      	ldr	r3, [pc, #136]	; (8019854 <FLASH_SetErrorCode+0xc4>)
 80197cc:	2220      	movs	r2, #32
 80197ce:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 80197d0:	4b20      	ldr	r3, [pc, #128]	; (8019854 <FLASH_SetErrorCode+0xc4>)
 80197d2:	68db      	ldr	r3, [r3, #12]
 80197d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80197d8:	2b00      	cmp	r3, #0
 80197da:	d008      	beq.n	80197ee <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 80197dc:	4b1e      	ldr	r3, [pc, #120]	; (8019858 <FLASH_SetErrorCode+0xc8>)
 80197de:	69db      	ldr	r3, [r3, #28]
 80197e0:	f043 0304 	orr.w	r3, r3, #4
 80197e4:	4a1c      	ldr	r2, [pc, #112]	; (8019858 <FLASH_SetErrorCode+0xc8>)
 80197e6:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 80197e8:	4b1a      	ldr	r3, [pc, #104]	; (8019854 <FLASH_SetErrorCode+0xc4>)
 80197ea:	2240      	movs	r2, #64	; 0x40
 80197ec:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 80197ee:	4b19      	ldr	r3, [pc, #100]	; (8019854 <FLASH_SetErrorCode+0xc4>)
 80197f0:	68db      	ldr	r3, [r3, #12]
 80197f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80197f6:	2b00      	cmp	r3, #0
 80197f8:	d008      	beq.n	801980c <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 80197fa:	4b17      	ldr	r3, [pc, #92]	; (8019858 <FLASH_SetErrorCode+0xc8>)
 80197fc:	69db      	ldr	r3, [r3, #28]
 80197fe:	f043 0302 	orr.w	r3, r3, #2
 8019802:	4a15      	ldr	r2, [pc, #84]	; (8019858 <FLASH_SetErrorCode+0xc8>)
 8019804:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 8019806:	4b13      	ldr	r3, [pc, #76]	; (8019854 <FLASH_SetErrorCode+0xc4>)
 8019808:	2280      	movs	r2, #128	; 0x80
 801980a:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR) 
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR) != RESET)
 801980c:	4b11      	ldr	r3, [pc, #68]	; (8019854 <FLASH_SetErrorCode+0xc4>)
 801980e:	68db      	ldr	r3, [r3, #12]
 8019810:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8019814:	2b00      	cmp	r3, #0
 8019816:	d009      	beq.n	801982c <FLASH_SetErrorCode+0x9c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_RD;
 8019818:	4b0f      	ldr	r3, [pc, #60]	; (8019858 <FLASH_SetErrorCode+0xc8>)
 801981a:	69db      	ldr	r3, [r3, #28]
 801981c:	f043 0301 	orr.w	r3, r3, #1
 8019820:	4a0d      	ldr	r2, [pc, #52]	; (8019858 <FLASH_SetErrorCode+0xc8>)
 8019822:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
 8019824:	4b0b      	ldr	r3, [pc, #44]	; (8019854 <FLASH_SetErrorCode+0xc4>)
 8019826:	f44f 7280 	mov.w	r2, #256	; 0x100
 801982a:	60da      	str	r2, [r3, #12]
  }
#endif /* FLASH_SR_RDERR */  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 801982c:	4b09      	ldr	r3, [pc, #36]	; (8019854 <FLASH_SetErrorCode+0xc4>)
 801982e:	68db      	ldr	r3, [r3, #12]
 8019830:	f003 0302 	and.w	r3, r3, #2
 8019834:	2b00      	cmp	r3, #0
 8019836:	d008      	beq.n	801984a <FLASH_SetErrorCode+0xba>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 8019838:	4b07      	ldr	r3, [pc, #28]	; (8019858 <FLASH_SetErrorCode+0xc8>)
 801983a:	69db      	ldr	r3, [r3, #28]
 801983c:	f043 0320 	orr.w	r3, r3, #32
 8019840:	4a05      	ldr	r2, [pc, #20]	; (8019858 <FLASH_SetErrorCode+0xc8>)
 8019842:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 8019844:	4b03      	ldr	r3, [pc, #12]	; (8019854 <FLASH_SetErrorCode+0xc4>)
 8019846:	2202      	movs	r2, #2
 8019848:	60da      	str	r2, [r3, #12]
  }
}
 801984a:	bf00      	nop
 801984c:	46bd      	mov	sp, r7
 801984e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019852:	4770      	bx	lr
 8019854:	40023c00 	.word	0x40023c00
 8019858:	20006c28 	.word	0x20006c28

0801985c <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFFU means that all the sectors have been correctly erased)
  *
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *SectorError)
{
 801985c:	b580      	push	{r7, lr}
 801985e:	b084      	sub	sp, #16
 8019860:	af00      	add	r7, sp, #0
 8019862:	6078      	str	r0, [r7, #4]
 8019864:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 8019866:	2301      	movs	r3, #1
 8019868:	73fb      	strb	r3, [r7, #15]
  uint32_t index = 0U;
 801986a:	2300      	movs	r3, #0
 801986c:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 801986e:	4b31      	ldr	r3, [pc, #196]	; (8019934 <HAL_FLASHEx_Erase+0xd8>)
 8019870:	7e1b      	ldrb	r3, [r3, #24]
 8019872:	2b01      	cmp	r3, #1
 8019874:	d101      	bne.n	801987a <HAL_FLASHEx_Erase+0x1e>
 8019876:	2302      	movs	r3, #2
 8019878:	e058      	b.n	801992c <HAL_FLASHEx_Erase+0xd0>
 801987a:	4b2e      	ldr	r3, [pc, #184]	; (8019934 <HAL_FLASHEx_Erase+0xd8>)
 801987c:	2201      	movs	r2, #1
 801987e:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8019880:	f24c 3050 	movw	r0, #50000	; 0xc350
 8019884:	f7ff feaa 	bl	80195dc <FLASH_WaitForLastOperation>
 8019888:	4603      	mov	r3, r0
 801988a:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 801988c:	7bfb      	ldrb	r3, [r7, #15]
 801988e:	2b00      	cmp	r3, #0
 8019890:	d148      	bne.n	8019924 <HAL_FLASHEx_Erase+0xc8>
  {
    /*Initialization of SectorError variable*/
    *SectorError = 0xFFFFFFFFU;
 8019892:	683b      	ldr	r3, [r7, #0]
 8019894:	f04f 32ff 	mov.w	r2, #4294967295
 8019898:	601a      	str	r2, [r3, #0]

    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 801989a:	687b      	ldr	r3, [r7, #4]
 801989c:	681b      	ldr	r3, [r3, #0]
 801989e:	2b01      	cmp	r3, #1
 80198a0:	d115      	bne.n	80198ce <HAL_FLASHEx_Erase+0x72>
    {
      /*Mass erase to be done*/
      FLASH_MassErase((uint8_t) pEraseInit->VoltageRange, pEraseInit->Banks);
 80198a2:	687b      	ldr	r3, [r7, #4]
 80198a4:	691b      	ldr	r3, [r3, #16]
 80198a6:	b2da      	uxtb	r2, r3
 80198a8:	687b      	ldr	r3, [r7, #4]
 80198aa:	685b      	ldr	r3, [r3, #4]
 80198ac:	4619      	mov	r1, r3
 80198ae:	4610      	mov	r0, r2
 80198b0:	f000 f844 	bl	801993c <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80198b4:	f24c 3050 	movw	r0, #50000	; 0xc350
 80198b8:	f7ff fe90 	bl	80195dc <FLASH_WaitForLastOperation>
 80198bc:	4603      	mov	r3, r0
 80198be:	73fb      	strb	r3, [r7, #15]

      /* if the erase operation is completed, disable the MER Bit */
      FLASH->CR &= (~FLASH_MER_BIT);
 80198c0:	4b1d      	ldr	r3, [pc, #116]	; (8019938 <HAL_FLASHEx_Erase+0xdc>)
 80198c2:	691b      	ldr	r3, [r3, #16]
 80198c4:	4a1c      	ldr	r2, [pc, #112]	; (8019938 <HAL_FLASHEx_Erase+0xdc>)
 80198c6:	f023 0304 	bic.w	r3, r3, #4
 80198ca:	6113      	str	r3, [r2, #16]
 80198cc:	e028      	b.n	8019920 <HAL_FLASHEx_Erase+0xc4>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_NBSECTORS(pEraseInit->NbSectors + pEraseInit->Sector));

      /* Erase by sector by sector to be done*/
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 80198ce:	687b      	ldr	r3, [r7, #4]
 80198d0:	689b      	ldr	r3, [r3, #8]
 80198d2:	60bb      	str	r3, [r7, #8]
 80198d4:	e01c      	b.n	8019910 <HAL_FLASHEx_Erase+0xb4>
      {
        FLASH_Erase_Sector(index, (uint8_t) pEraseInit->VoltageRange);
 80198d6:	687b      	ldr	r3, [r7, #4]
 80198d8:	691b      	ldr	r3, [r3, #16]
 80198da:	b2db      	uxtb	r3, r3
 80198dc:	4619      	mov	r1, r3
 80198de:	68b8      	ldr	r0, [r7, #8]
 80198e0:	f000 f850 	bl	8019984 <FLASH_Erase_Sector>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80198e4:	f24c 3050 	movw	r0, #50000	; 0xc350
 80198e8:	f7ff fe78 	bl	80195dc <FLASH_WaitForLastOperation>
 80198ec:	4603      	mov	r3, r0
 80198ee:	73fb      	strb	r3, [r7, #15]

        /* If the erase operation is completed, disable the SER and SNB Bits */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB));
 80198f0:	4b11      	ldr	r3, [pc, #68]	; (8019938 <HAL_FLASHEx_Erase+0xdc>)
 80198f2:	691b      	ldr	r3, [r3, #16]
 80198f4:	4a10      	ldr	r2, [pc, #64]	; (8019938 <HAL_FLASHEx_Erase+0xdc>)
 80198f6:	f023 03fa 	bic.w	r3, r3, #250	; 0xfa
 80198fa:	6113      	str	r3, [r2, #16]

        if (status != HAL_OK)
 80198fc:	7bfb      	ldrb	r3, [r7, #15]
 80198fe:	2b00      	cmp	r3, #0
 8019900:	d003      	beq.n	801990a <HAL_FLASHEx_Erase+0xae>
        {
          /* In case of error, stop erase procedure and return the faulty sector*/
          *SectorError = index;
 8019902:	683b      	ldr	r3, [r7, #0]
 8019904:	68ba      	ldr	r2, [r7, #8]
 8019906:	601a      	str	r2, [r3, #0]
          break;
 8019908:	e00a      	b.n	8019920 <HAL_FLASHEx_Erase+0xc4>
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 801990a:	68bb      	ldr	r3, [r7, #8]
 801990c:	3301      	adds	r3, #1
 801990e:	60bb      	str	r3, [r7, #8]
 8019910:	687b      	ldr	r3, [r7, #4]
 8019912:	68da      	ldr	r2, [r3, #12]
 8019914:	687b      	ldr	r3, [r7, #4]
 8019916:	689b      	ldr	r3, [r3, #8]
 8019918:	4413      	add	r3, r2
 801991a:	68ba      	ldr	r2, [r7, #8]
 801991c:	429a      	cmp	r2, r3
 801991e:	d3da      	bcc.n	80198d6 <HAL_FLASHEx_Erase+0x7a>
        }
      }
    }
    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 8019920:	f000 f878 	bl	8019a14 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8019924:	4b03      	ldr	r3, [pc, #12]	; (8019934 <HAL_FLASHEx_Erase+0xd8>)
 8019926:	2200      	movs	r2, #0
 8019928:	761a      	strb	r2, [r3, #24]

  return status;
 801992a:	7bfb      	ldrb	r3, [r7, #15]
}
 801992c:	4618      	mov	r0, r3
 801992e:	3710      	adds	r7, #16
 8019930:	46bd      	mov	sp, r7
 8019932:	bd80      	pop	{r7, pc}
 8019934:	20006c28 	.word	0x20006c28
 8019938:	40023c00 	.word	0x40023c00

0801993c <FLASH_MassErase>:
  *            @arg FLASH_BANK_1: Bank1 to be erased
  *
  * @retval None
  */
static void FLASH_MassErase(uint8_t VoltageRange, uint32_t Banks)
{
 801993c:	b480      	push	{r7}
 801993e:	b083      	sub	sp, #12
 8019940:	af00      	add	r7, sp, #0
 8019942:	4603      	mov	r3, r0
 8019944:	6039      	str	r1, [r7, #0]
 8019946:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  assert_param(IS_FLASH_BANK(Banks));

  /* If the previous operation is completed, proceed to erase all sectors */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8019948:	4b0d      	ldr	r3, [pc, #52]	; (8019980 <FLASH_MassErase+0x44>)
 801994a:	691b      	ldr	r3, [r3, #16]
 801994c:	4a0c      	ldr	r2, [pc, #48]	; (8019980 <FLASH_MassErase+0x44>)
 801994e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8019952:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_MER;
 8019954:	4b0a      	ldr	r3, [pc, #40]	; (8019980 <FLASH_MassErase+0x44>)
 8019956:	691b      	ldr	r3, [r3, #16]
 8019958:	4a09      	ldr	r2, [pc, #36]	; (8019980 <FLASH_MassErase+0x44>)
 801995a:	f043 0304 	orr.w	r3, r3, #4
 801995e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT | ((uint32_t)VoltageRange << 8U);
 8019960:	4b07      	ldr	r3, [pc, #28]	; (8019980 <FLASH_MassErase+0x44>)
 8019962:	691a      	ldr	r2, [r3, #16]
 8019964:	79fb      	ldrb	r3, [r7, #7]
 8019966:	021b      	lsls	r3, r3, #8
 8019968:	4313      	orrs	r3, r2
 801996a:	4a05      	ldr	r2, [pc, #20]	; (8019980 <FLASH_MassErase+0x44>)
 801996c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8019970:	6113      	str	r3, [r2, #16]
}
 8019972:	bf00      	nop
 8019974:	370c      	adds	r7, #12
 8019976:	46bd      	mov	sp, r7
 8019978:	f85d 7b04 	ldr.w	r7, [sp], #4
 801997c:	4770      	bx	lr
 801997e:	bf00      	nop
 8019980:	40023c00 	.word	0x40023c00

08019984 <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  *
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 8019984:	b480      	push	{r7}
 8019986:	b085      	sub	sp, #20
 8019988:	af00      	add	r7, sp, #0
 801998a:	6078      	str	r0, [r7, #4]
 801998c:	460b      	mov	r3, r1
 801998e:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
 8019990:	2300      	movs	r3, #0
 8019992:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));

  if (VoltageRange == FLASH_VOLTAGE_RANGE_1)
 8019994:	78fb      	ldrb	r3, [r7, #3]
 8019996:	2b00      	cmp	r3, #0
 8019998:	d102      	bne.n	80199a0 <FLASH_Erase_Sector+0x1c>
  {
    tmp_psize = FLASH_PSIZE_BYTE;
 801999a:	2300      	movs	r3, #0
 801999c:	60fb      	str	r3, [r7, #12]
 801999e:	e010      	b.n	80199c2 <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_2)
 80199a0:	78fb      	ldrb	r3, [r7, #3]
 80199a2:	2b01      	cmp	r3, #1
 80199a4:	d103      	bne.n	80199ae <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 80199a6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80199aa:	60fb      	str	r3, [r7, #12]
 80199ac:	e009      	b.n	80199c2 <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_3)
 80199ae:	78fb      	ldrb	r3, [r7, #3]
 80199b0:	2b02      	cmp	r3, #2
 80199b2:	d103      	bne.n	80199bc <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 80199b4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80199b8:	60fb      	str	r3, [r7, #12]
 80199ba:	e002      	b.n	80199c2 <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 80199bc:	f44f 7340 	mov.w	r3, #768	; 0x300
 80199c0:	60fb      	str	r3, [r7, #12]
  }

  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80199c2:	4b13      	ldr	r3, [pc, #76]	; (8019a10 <FLASH_Erase_Sector+0x8c>)
 80199c4:	691b      	ldr	r3, [r3, #16]
 80199c6:	4a12      	ldr	r2, [pc, #72]	; (8019a10 <FLASH_Erase_Sector+0x8c>)
 80199c8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80199cc:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 80199ce:	4b10      	ldr	r3, [pc, #64]	; (8019a10 <FLASH_Erase_Sector+0x8c>)
 80199d0:	691a      	ldr	r2, [r3, #16]
 80199d2:	490f      	ldr	r1, [pc, #60]	; (8019a10 <FLASH_Erase_Sector+0x8c>)
 80199d4:	68fb      	ldr	r3, [r7, #12]
 80199d6:	4313      	orrs	r3, r2
 80199d8:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 80199da:	4b0d      	ldr	r3, [pc, #52]	; (8019a10 <FLASH_Erase_Sector+0x8c>)
 80199dc:	691b      	ldr	r3, [r3, #16]
 80199de:	4a0c      	ldr	r2, [pc, #48]	; (8019a10 <FLASH_Erase_Sector+0x8c>)
 80199e0:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80199e4:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 80199e6:	4b0a      	ldr	r3, [pc, #40]	; (8019a10 <FLASH_Erase_Sector+0x8c>)
 80199e8:	691a      	ldr	r2, [r3, #16]
 80199ea:	687b      	ldr	r3, [r7, #4]
 80199ec:	00db      	lsls	r3, r3, #3
 80199ee:	4313      	orrs	r3, r2
 80199f0:	4a07      	ldr	r2, [pc, #28]	; (8019a10 <FLASH_Erase_Sector+0x8c>)
 80199f2:	f043 0302 	orr.w	r3, r3, #2
 80199f6:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 80199f8:	4b05      	ldr	r3, [pc, #20]	; (8019a10 <FLASH_Erase_Sector+0x8c>)
 80199fa:	691b      	ldr	r3, [r3, #16]
 80199fc:	4a04      	ldr	r2, [pc, #16]	; (8019a10 <FLASH_Erase_Sector+0x8c>)
 80199fe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8019a02:	6113      	str	r3, [r2, #16]
}
 8019a04:	bf00      	nop
 8019a06:	3714      	adds	r7, #20
 8019a08:	46bd      	mov	sp, r7
 8019a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019a0e:	4770      	bx	lr
 8019a10:	40023c00 	.word	0x40023c00

08019a14 <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 8019a14:	b480      	push	{r7}
 8019a16:	af00      	add	r7, sp, #0
  /* Flush instruction cache  */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != RESET)
 8019a18:	4b20      	ldr	r3, [pc, #128]	; (8019a9c <FLASH_FlushCaches+0x88>)
 8019a1a:	681b      	ldr	r3, [r3, #0]
 8019a1c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8019a20:	2b00      	cmp	r3, #0
 8019a22:	d017      	beq.n	8019a54 <FLASH_FlushCaches+0x40>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 8019a24:	4b1d      	ldr	r3, [pc, #116]	; (8019a9c <FLASH_FlushCaches+0x88>)
 8019a26:	681b      	ldr	r3, [r3, #0]
 8019a28:	4a1c      	ldr	r2, [pc, #112]	; (8019a9c <FLASH_FlushCaches+0x88>)
 8019a2a:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8019a2e:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 8019a30:	4b1a      	ldr	r3, [pc, #104]	; (8019a9c <FLASH_FlushCaches+0x88>)
 8019a32:	681b      	ldr	r3, [r3, #0]
 8019a34:	4a19      	ldr	r2, [pc, #100]	; (8019a9c <FLASH_FlushCaches+0x88>)
 8019a36:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8019a3a:	6013      	str	r3, [r2, #0]
 8019a3c:	4b17      	ldr	r3, [pc, #92]	; (8019a9c <FLASH_FlushCaches+0x88>)
 8019a3e:	681b      	ldr	r3, [r3, #0]
 8019a40:	4a16      	ldr	r2, [pc, #88]	; (8019a9c <FLASH_FlushCaches+0x88>)
 8019a42:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8019a46:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8019a48:	4b14      	ldr	r3, [pc, #80]	; (8019a9c <FLASH_FlushCaches+0x88>)
 8019a4a:	681b      	ldr	r3, [r3, #0]
 8019a4c:	4a13      	ldr	r2, [pc, #76]	; (8019a9c <FLASH_FlushCaches+0x88>)
 8019a4e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8019a52:	6013      	str	r3, [r2, #0]
  }

  /* Flush data cache */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != RESET)
 8019a54:	4b11      	ldr	r3, [pc, #68]	; (8019a9c <FLASH_FlushCaches+0x88>)
 8019a56:	681b      	ldr	r3, [r3, #0]
 8019a58:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8019a5c:	2b00      	cmp	r3, #0
 8019a5e:	d017      	beq.n	8019a90 <FLASH_FlushCaches+0x7c>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 8019a60:	4b0e      	ldr	r3, [pc, #56]	; (8019a9c <FLASH_FlushCaches+0x88>)
 8019a62:	681b      	ldr	r3, [r3, #0]
 8019a64:	4a0d      	ldr	r2, [pc, #52]	; (8019a9c <FLASH_FlushCaches+0x88>)
 8019a66:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8019a6a:	6013      	str	r3, [r2, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 8019a6c:	4b0b      	ldr	r3, [pc, #44]	; (8019a9c <FLASH_FlushCaches+0x88>)
 8019a6e:	681b      	ldr	r3, [r3, #0]
 8019a70:	4a0a      	ldr	r2, [pc, #40]	; (8019a9c <FLASH_FlushCaches+0x88>)
 8019a72:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8019a76:	6013      	str	r3, [r2, #0]
 8019a78:	4b08      	ldr	r3, [pc, #32]	; (8019a9c <FLASH_FlushCaches+0x88>)
 8019a7a:	681b      	ldr	r3, [r3, #0]
 8019a7c:	4a07      	ldr	r2, [pc, #28]	; (8019a9c <FLASH_FlushCaches+0x88>)
 8019a7e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8019a82:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 8019a84:	4b05      	ldr	r3, [pc, #20]	; (8019a9c <FLASH_FlushCaches+0x88>)
 8019a86:	681b      	ldr	r3, [r3, #0]
 8019a88:	4a04      	ldr	r2, [pc, #16]	; (8019a9c <FLASH_FlushCaches+0x88>)
 8019a8a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8019a8e:	6013      	str	r3, [r2, #0]
  }
}
 8019a90:	bf00      	nop
 8019a92:	46bd      	mov	sp, r7
 8019a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019a98:	4770      	bx	lr
 8019a9a:	bf00      	nop
 8019a9c:	40023c00 	.word	0x40023c00

08019aa0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8019aa0:	b480      	push	{r7}
 8019aa2:	b089      	sub	sp, #36	; 0x24
 8019aa4:	af00      	add	r7, sp, #0
 8019aa6:	6078      	str	r0, [r7, #4]
 8019aa8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8019aaa:	2300      	movs	r3, #0
 8019aac:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8019aae:	2300      	movs	r3, #0
 8019ab0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8019ab2:	2300      	movs	r3, #0
 8019ab4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8019ab6:	2300      	movs	r3, #0
 8019ab8:	61fb      	str	r3, [r7, #28]
 8019aba:	e165      	b.n	8019d88 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8019abc:	2201      	movs	r2, #1
 8019abe:	69fb      	ldr	r3, [r7, #28]
 8019ac0:	fa02 f303 	lsl.w	r3, r2, r3
 8019ac4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8019ac6:	683b      	ldr	r3, [r7, #0]
 8019ac8:	681b      	ldr	r3, [r3, #0]
 8019aca:	697a      	ldr	r2, [r7, #20]
 8019acc:	4013      	ands	r3, r2
 8019ace:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8019ad0:	693a      	ldr	r2, [r7, #16]
 8019ad2:	697b      	ldr	r3, [r7, #20]
 8019ad4:	429a      	cmp	r2, r3
 8019ad6:	f040 8154 	bne.w	8019d82 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8019ada:	683b      	ldr	r3, [r7, #0]
 8019adc:	685b      	ldr	r3, [r3, #4]
 8019ade:	f003 0303 	and.w	r3, r3, #3
 8019ae2:	2b01      	cmp	r3, #1
 8019ae4:	d005      	beq.n	8019af2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8019ae6:	683b      	ldr	r3, [r7, #0]
 8019ae8:	685b      	ldr	r3, [r3, #4]
 8019aea:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8019aee:	2b02      	cmp	r3, #2
 8019af0:	d130      	bne.n	8019b54 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8019af2:	687b      	ldr	r3, [r7, #4]
 8019af4:	689b      	ldr	r3, [r3, #8]
 8019af6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8019af8:	69fb      	ldr	r3, [r7, #28]
 8019afa:	005b      	lsls	r3, r3, #1
 8019afc:	2203      	movs	r2, #3
 8019afe:	fa02 f303 	lsl.w	r3, r2, r3
 8019b02:	43db      	mvns	r3, r3
 8019b04:	69ba      	ldr	r2, [r7, #24]
 8019b06:	4013      	ands	r3, r2
 8019b08:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8019b0a:	683b      	ldr	r3, [r7, #0]
 8019b0c:	68da      	ldr	r2, [r3, #12]
 8019b0e:	69fb      	ldr	r3, [r7, #28]
 8019b10:	005b      	lsls	r3, r3, #1
 8019b12:	fa02 f303 	lsl.w	r3, r2, r3
 8019b16:	69ba      	ldr	r2, [r7, #24]
 8019b18:	4313      	orrs	r3, r2
 8019b1a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8019b1c:	687b      	ldr	r3, [r7, #4]
 8019b1e:	69ba      	ldr	r2, [r7, #24]
 8019b20:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8019b22:	687b      	ldr	r3, [r7, #4]
 8019b24:	685b      	ldr	r3, [r3, #4]
 8019b26:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8019b28:	2201      	movs	r2, #1
 8019b2a:	69fb      	ldr	r3, [r7, #28]
 8019b2c:	fa02 f303 	lsl.w	r3, r2, r3
 8019b30:	43db      	mvns	r3, r3
 8019b32:	69ba      	ldr	r2, [r7, #24]
 8019b34:	4013      	ands	r3, r2
 8019b36:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8019b38:	683b      	ldr	r3, [r7, #0]
 8019b3a:	685b      	ldr	r3, [r3, #4]
 8019b3c:	091b      	lsrs	r3, r3, #4
 8019b3e:	f003 0201 	and.w	r2, r3, #1
 8019b42:	69fb      	ldr	r3, [r7, #28]
 8019b44:	fa02 f303 	lsl.w	r3, r2, r3
 8019b48:	69ba      	ldr	r2, [r7, #24]
 8019b4a:	4313      	orrs	r3, r2
 8019b4c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8019b4e:	687b      	ldr	r3, [r7, #4]
 8019b50:	69ba      	ldr	r2, [r7, #24]
 8019b52:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8019b54:	683b      	ldr	r3, [r7, #0]
 8019b56:	685b      	ldr	r3, [r3, #4]
 8019b58:	f003 0303 	and.w	r3, r3, #3
 8019b5c:	2b03      	cmp	r3, #3
 8019b5e:	d017      	beq.n	8019b90 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8019b60:	687b      	ldr	r3, [r7, #4]
 8019b62:	68db      	ldr	r3, [r3, #12]
 8019b64:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8019b66:	69fb      	ldr	r3, [r7, #28]
 8019b68:	005b      	lsls	r3, r3, #1
 8019b6a:	2203      	movs	r2, #3
 8019b6c:	fa02 f303 	lsl.w	r3, r2, r3
 8019b70:	43db      	mvns	r3, r3
 8019b72:	69ba      	ldr	r2, [r7, #24]
 8019b74:	4013      	ands	r3, r2
 8019b76:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8019b78:	683b      	ldr	r3, [r7, #0]
 8019b7a:	689a      	ldr	r2, [r3, #8]
 8019b7c:	69fb      	ldr	r3, [r7, #28]
 8019b7e:	005b      	lsls	r3, r3, #1
 8019b80:	fa02 f303 	lsl.w	r3, r2, r3
 8019b84:	69ba      	ldr	r2, [r7, #24]
 8019b86:	4313      	orrs	r3, r2
 8019b88:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8019b8a:	687b      	ldr	r3, [r7, #4]
 8019b8c:	69ba      	ldr	r2, [r7, #24]
 8019b8e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8019b90:	683b      	ldr	r3, [r7, #0]
 8019b92:	685b      	ldr	r3, [r3, #4]
 8019b94:	f003 0303 	and.w	r3, r3, #3
 8019b98:	2b02      	cmp	r3, #2
 8019b9a:	d123      	bne.n	8019be4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8019b9c:	69fb      	ldr	r3, [r7, #28]
 8019b9e:	08da      	lsrs	r2, r3, #3
 8019ba0:	687b      	ldr	r3, [r7, #4]
 8019ba2:	3208      	adds	r2, #8
 8019ba4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8019ba8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8019baa:	69fb      	ldr	r3, [r7, #28]
 8019bac:	f003 0307 	and.w	r3, r3, #7
 8019bb0:	009b      	lsls	r3, r3, #2
 8019bb2:	220f      	movs	r2, #15
 8019bb4:	fa02 f303 	lsl.w	r3, r2, r3
 8019bb8:	43db      	mvns	r3, r3
 8019bba:	69ba      	ldr	r2, [r7, #24]
 8019bbc:	4013      	ands	r3, r2
 8019bbe:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8019bc0:	683b      	ldr	r3, [r7, #0]
 8019bc2:	691a      	ldr	r2, [r3, #16]
 8019bc4:	69fb      	ldr	r3, [r7, #28]
 8019bc6:	f003 0307 	and.w	r3, r3, #7
 8019bca:	009b      	lsls	r3, r3, #2
 8019bcc:	fa02 f303 	lsl.w	r3, r2, r3
 8019bd0:	69ba      	ldr	r2, [r7, #24]
 8019bd2:	4313      	orrs	r3, r2
 8019bd4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8019bd6:	69fb      	ldr	r3, [r7, #28]
 8019bd8:	08da      	lsrs	r2, r3, #3
 8019bda:	687b      	ldr	r3, [r7, #4]
 8019bdc:	3208      	adds	r2, #8
 8019bde:	69b9      	ldr	r1, [r7, #24]
 8019be0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8019be4:	687b      	ldr	r3, [r7, #4]
 8019be6:	681b      	ldr	r3, [r3, #0]
 8019be8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8019bea:	69fb      	ldr	r3, [r7, #28]
 8019bec:	005b      	lsls	r3, r3, #1
 8019bee:	2203      	movs	r2, #3
 8019bf0:	fa02 f303 	lsl.w	r3, r2, r3
 8019bf4:	43db      	mvns	r3, r3
 8019bf6:	69ba      	ldr	r2, [r7, #24]
 8019bf8:	4013      	ands	r3, r2
 8019bfa:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8019bfc:	683b      	ldr	r3, [r7, #0]
 8019bfe:	685b      	ldr	r3, [r3, #4]
 8019c00:	f003 0203 	and.w	r2, r3, #3
 8019c04:	69fb      	ldr	r3, [r7, #28]
 8019c06:	005b      	lsls	r3, r3, #1
 8019c08:	fa02 f303 	lsl.w	r3, r2, r3
 8019c0c:	69ba      	ldr	r2, [r7, #24]
 8019c0e:	4313      	orrs	r3, r2
 8019c10:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8019c12:	687b      	ldr	r3, [r7, #4]
 8019c14:	69ba      	ldr	r2, [r7, #24]
 8019c16:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8019c18:	683b      	ldr	r3, [r7, #0]
 8019c1a:	685b      	ldr	r3, [r3, #4]
 8019c1c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8019c20:	2b00      	cmp	r3, #0
 8019c22:	f000 80ae 	beq.w	8019d82 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8019c26:	2300      	movs	r3, #0
 8019c28:	60fb      	str	r3, [r7, #12]
 8019c2a:	4b5d      	ldr	r3, [pc, #372]	; (8019da0 <HAL_GPIO_Init+0x300>)
 8019c2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8019c2e:	4a5c      	ldr	r2, [pc, #368]	; (8019da0 <HAL_GPIO_Init+0x300>)
 8019c30:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8019c34:	6453      	str	r3, [r2, #68]	; 0x44
 8019c36:	4b5a      	ldr	r3, [pc, #360]	; (8019da0 <HAL_GPIO_Init+0x300>)
 8019c38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8019c3a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8019c3e:	60fb      	str	r3, [r7, #12]
 8019c40:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8019c42:	4a58      	ldr	r2, [pc, #352]	; (8019da4 <HAL_GPIO_Init+0x304>)
 8019c44:	69fb      	ldr	r3, [r7, #28]
 8019c46:	089b      	lsrs	r3, r3, #2
 8019c48:	3302      	adds	r3, #2
 8019c4a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8019c4e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8019c50:	69fb      	ldr	r3, [r7, #28]
 8019c52:	f003 0303 	and.w	r3, r3, #3
 8019c56:	009b      	lsls	r3, r3, #2
 8019c58:	220f      	movs	r2, #15
 8019c5a:	fa02 f303 	lsl.w	r3, r2, r3
 8019c5e:	43db      	mvns	r3, r3
 8019c60:	69ba      	ldr	r2, [r7, #24]
 8019c62:	4013      	ands	r3, r2
 8019c64:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8019c66:	687b      	ldr	r3, [r7, #4]
 8019c68:	4a4f      	ldr	r2, [pc, #316]	; (8019da8 <HAL_GPIO_Init+0x308>)
 8019c6a:	4293      	cmp	r3, r2
 8019c6c:	d025      	beq.n	8019cba <HAL_GPIO_Init+0x21a>
 8019c6e:	687b      	ldr	r3, [r7, #4]
 8019c70:	4a4e      	ldr	r2, [pc, #312]	; (8019dac <HAL_GPIO_Init+0x30c>)
 8019c72:	4293      	cmp	r3, r2
 8019c74:	d01f      	beq.n	8019cb6 <HAL_GPIO_Init+0x216>
 8019c76:	687b      	ldr	r3, [r7, #4]
 8019c78:	4a4d      	ldr	r2, [pc, #308]	; (8019db0 <HAL_GPIO_Init+0x310>)
 8019c7a:	4293      	cmp	r3, r2
 8019c7c:	d019      	beq.n	8019cb2 <HAL_GPIO_Init+0x212>
 8019c7e:	687b      	ldr	r3, [r7, #4]
 8019c80:	4a4c      	ldr	r2, [pc, #304]	; (8019db4 <HAL_GPIO_Init+0x314>)
 8019c82:	4293      	cmp	r3, r2
 8019c84:	d013      	beq.n	8019cae <HAL_GPIO_Init+0x20e>
 8019c86:	687b      	ldr	r3, [r7, #4]
 8019c88:	4a4b      	ldr	r2, [pc, #300]	; (8019db8 <HAL_GPIO_Init+0x318>)
 8019c8a:	4293      	cmp	r3, r2
 8019c8c:	d00d      	beq.n	8019caa <HAL_GPIO_Init+0x20a>
 8019c8e:	687b      	ldr	r3, [r7, #4]
 8019c90:	4a4a      	ldr	r2, [pc, #296]	; (8019dbc <HAL_GPIO_Init+0x31c>)
 8019c92:	4293      	cmp	r3, r2
 8019c94:	d007      	beq.n	8019ca6 <HAL_GPIO_Init+0x206>
 8019c96:	687b      	ldr	r3, [r7, #4]
 8019c98:	4a49      	ldr	r2, [pc, #292]	; (8019dc0 <HAL_GPIO_Init+0x320>)
 8019c9a:	4293      	cmp	r3, r2
 8019c9c:	d101      	bne.n	8019ca2 <HAL_GPIO_Init+0x202>
 8019c9e:	2306      	movs	r3, #6
 8019ca0:	e00c      	b.n	8019cbc <HAL_GPIO_Init+0x21c>
 8019ca2:	2307      	movs	r3, #7
 8019ca4:	e00a      	b.n	8019cbc <HAL_GPIO_Init+0x21c>
 8019ca6:	2305      	movs	r3, #5
 8019ca8:	e008      	b.n	8019cbc <HAL_GPIO_Init+0x21c>
 8019caa:	2304      	movs	r3, #4
 8019cac:	e006      	b.n	8019cbc <HAL_GPIO_Init+0x21c>
 8019cae:	2303      	movs	r3, #3
 8019cb0:	e004      	b.n	8019cbc <HAL_GPIO_Init+0x21c>
 8019cb2:	2302      	movs	r3, #2
 8019cb4:	e002      	b.n	8019cbc <HAL_GPIO_Init+0x21c>
 8019cb6:	2301      	movs	r3, #1
 8019cb8:	e000      	b.n	8019cbc <HAL_GPIO_Init+0x21c>
 8019cba:	2300      	movs	r3, #0
 8019cbc:	69fa      	ldr	r2, [r7, #28]
 8019cbe:	f002 0203 	and.w	r2, r2, #3
 8019cc2:	0092      	lsls	r2, r2, #2
 8019cc4:	4093      	lsls	r3, r2
 8019cc6:	69ba      	ldr	r2, [r7, #24]
 8019cc8:	4313      	orrs	r3, r2
 8019cca:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8019ccc:	4935      	ldr	r1, [pc, #212]	; (8019da4 <HAL_GPIO_Init+0x304>)
 8019cce:	69fb      	ldr	r3, [r7, #28]
 8019cd0:	089b      	lsrs	r3, r3, #2
 8019cd2:	3302      	adds	r3, #2
 8019cd4:	69ba      	ldr	r2, [r7, #24]
 8019cd6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8019cda:	4b3a      	ldr	r3, [pc, #232]	; (8019dc4 <HAL_GPIO_Init+0x324>)
 8019cdc:	681b      	ldr	r3, [r3, #0]
 8019cde:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8019ce0:	693b      	ldr	r3, [r7, #16]
 8019ce2:	43db      	mvns	r3, r3
 8019ce4:	69ba      	ldr	r2, [r7, #24]
 8019ce6:	4013      	ands	r3, r2
 8019ce8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8019cea:	683b      	ldr	r3, [r7, #0]
 8019cec:	685b      	ldr	r3, [r3, #4]
 8019cee:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8019cf2:	2b00      	cmp	r3, #0
 8019cf4:	d003      	beq.n	8019cfe <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8019cf6:	69ba      	ldr	r2, [r7, #24]
 8019cf8:	693b      	ldr	r3, [r7, #16]
 8019cfa:	4313      	orrs	r3, r2
 8019cfc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8019cfe:	4a31      	ldr	r2, [pc, #196]	; (8019dc4 <HAL_GPIO_Init+0x324>)
 8019d00:	69bb      	ldr	r3, [r7, #24]
 8019d02:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8019d04:	4b2f      	ldr	r3, [pc, #188]	; (8019dc4 <HAL_GPIO_Init+0x324>)
 8019d06:	685b      	ldr	r3, [r3, #4]
 8019d08:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8019d0a:	693b      	ldr	r3, [r7, #16]
 8019d0c:	43db      	mvns	r3, r3
 8019d0e:	69ba      	ldr	r2, [r7, #24]
 8019d10:	4013      	ands	r3, r2
 8019d12:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8019d14:	683b      	ldr	r3, [r7, #0]
 8019d16:	685b      	ldr	r3, [r3, #4]
 8019d18:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8019d1c:	2b00      	cmp	r3, #0
 8019d1e:	d003      	beq.n	8019d28 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8019d20:	69ba      	ldr	r2, [r7, #24]
 8019d22:	693b      	ldr	r3, [r7, #16]
 8019d24:	4313      	orrs	r3, r2
 8019d26:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8019d28:	4a26      	ldr	r2, [pc, #152]	; (8019dc4 <HAL_GPIO_Init+0x324>)
 8019d2a:	69bb      	ldr	r3, [r7, #24]
 8019d2c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8019d2e:	4b25      	ldr	r3, [pc, #148]	; (8019dc4 <HAL_GPIO_Init+0x324>)
 8019d30:	689b      	ldr	r3, [r3, #8]
 8019d32:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8019d34:	693b      	ldr	r3, [r7, #16]
 8019d36:	43db      	mvns	r3, r3
 8019d38:	69ba      	ldr	r2, [r7, #24]
 8019d3a:	4013      	ands	r3, r2
 8019d3c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8019d3e:	683b      	ldr	r3, [r7, #0]
 8019d40:	685b      	ldr	r3, [r3, #4]
 8019d42:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8019d46:	2b00      	cmp	r3, #0
 8019d48:	d003      	beq.n	8019d52 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8019d4a:	69ba      	ldr	r2, [r7, #24]
 8019d4c:	693b      	ldr	r3, [r7, #16]
 8019d4e:	4313      	orrs	r3, r2
 8019d50:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8019d52:	4a1c      	ldr	r2, [pc, #112]	; (8019dc4 <HAL_GPIO_Init+0x324>)
 8019d54:	69bb      	ldr	r3, [r7, #24]
 8019d56:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8019d58:	4b1a      	ldr	r3, [pc, #104]	; (8019dc4 <HAL_GPIO_Init+0x324>)
 8019d5a:	68db      	ldr	r3, [r3, #12]
 8019d5c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8019d5e:	693b      	ldr	r3, [r7, #16]
 8019d60:	43db      	mvns	r3, r3
 8019d62:	69ba      	ldr	r2, [r7, #24]
 8019d64:	4013      	ands	r3, r2
 8019d66:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8019d68:	683b      	ldr	r3, [r7, #0]
 8019d6a:	685b      	ldr	r3, [r3, #4]
 8019d6c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8019d70:	2b00      	cmp	r3, #0
 8019d72:	d003      	beq.n	8019d7c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8019d74:	69ba      	ldr	r2, [r7, #24]
 8019d76:	693b      	ldr	r3, [r7, #16]
 8019d78:	4313      	orrs	r3, r2
 8019d7a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8019d7c:	4a11      	ldr	r2, [pc, #68]	; (8019dc4 <HAL_GPIO_Init+0x324>)
 8019d7e:	69bb      	ldr	r3, [r7, #24]
 8019d80:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8019d82:	69fb      	ldr	r3, [r7, #28]
 8019d84:	3301      	adds	r3, #1
 8019d86:	61fb      	str	r3, [r7, #28]
 8019d88:	69fb      	ldr	r3, [r7, #28]
 8019d8a:	2b0f      	cmp	r3, #15
 8019d8c:	f67f ae96 	bls.w	8019abc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8019d90:	bf00      	nop
 8019d92:	bf00      	nop
 8019d94:	3724      	adds	r7, #36	; 0x24
 8019d96:	46bd      	mov	sp, r7
 8019d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019d9c:	4770      	bx	lr
 8019d9e:	bf00      	nop
 8019da0:	40023800 	.word	0x40023800
 8019da4:	40013800 	.word	0x40013800
 8019da8:	40020000 	.word	0x40020000
 8019dac:	40020400 	.word	0x40020400
 8019db0:	40020800 	.word	0x40020800
 8019db4:	40020c00 	.word	0x40020c00
 8019db8:	40021000 	.word	0x40021000
 8019dbc:	40021400 	.word	0x40021400
 8019dc0:	40021800 	.word	0x40021800
 8019dc4:	40013c00 	.word	0x40013c00

08019dc8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8019dc8:	b480      	push	{r7}
 8019dca:	b085      	sub	sp, #20
 8019dcc:	af00      	add	r7, sp, #0
 8019dce:	6078      	str	r0, [r7, #4]
 8019dd0:	460b      	mov	r3, r1
 8019dd2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8019dd4:	687b      	ldr	r3, [r7, #4]
 8019dd6:	691a      	ldr	r2, [r3, #16]
 8019dd8:	887b      	ldrh	r3, [r7, #2]
 8019dda:	4013      	ands	r3, r2
 8019ddc:	2b00      	cmp	r3, #0
 8019dde:	d002      	beq.n	8019de6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8019de0:	2301      	movs	r3, #1
 8019de2:	73fb      	strb	r3, [r7, #15]
 8019de4:	e001      	b.n	8019dea <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8019de6:	2300      	movs	r3, #0
 8019de8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8019dea:	7bfb      	ldrb	r3, [r7, #15]
}
 8019dec:	4618      	mov	r0, r3
 8019dee:	3714      	adds	r7, #20
 8019df0:	46bd      	mov	sp, r7
 8019df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019df6:	4770      	bx	lr

08019df8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8019df8:	b480      	push	{r7}
 8019dfa:	b083      	sub	sp, #12
 8019dfc:	af00      	add	r7, sp, #0
 8019dfe:	6078      	str	r0, [r7, #4]
 8019e00:	460b      	mov	r3, r1
 8019e02:	807b      	strh	r3, [r7, #2]
 8019e04:	4613      	mov	r3, r2
 8019e06:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8019e08:	787b      	ldrb	r3, [r7, #1]
 8019e0a:	2b00      	cmp	r3, #0
 8019e0c:	d003      	beq.n	8019e16 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8019e0e:	887a      	ldrh	r2, [r7, #2]
 8019e10:	687b      	ldr	r3, [r7, #4]
 8019e12:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8019e14:	e003      	b.n	8019e1e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8019e16:	887b      	ldrh	r3, [r7, #2]
 8019e18:	041a      	lsls	r2, r3, #16
 8019e1a:	687b      	ldr	r3, [r7, #4]
 8019e1c:	619a      	str	r2, [r3, #24]
}
 8019e1e:	bf00      	nop
 8019e20:	370c      	adds	r7, #12
 8019e22:	46bd      	mov	sp, r7
 8019e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019e28:	4770      	bx	lr

08019e2a <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8019e2a:	b5f0      	push	{r4, r5, r6, r7, lr}
 8019e2c:	b08f      	sub	sp, #60	; 0x3c
 8019e2e:	af0a      	add	r7, sp, #40	; 0x28
 8019e30:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8019e32:	687b      	ldr	r3, [r7, #4]
 8019e34:	2b00      	cmp	r3, #0
 8019e36:	d101      	bne.n	8019e3c <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8019e38:	2301      	movs	r3, #1
 8019e3a:	e116      	b.n	801a06a <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8019e3c:	687b      	ldr	r3, [r7, #4]
 8019e3e:	681b      	ldr	r3, [r3, #0]
 8019e40:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8019e42:	687b      	ldr	r3, [r7, #4]
 8019e44:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8019e48:	b2db      	uxtb	r3, r3
 8019e4a:	2b00      	cmp	r3, #0
 8019e4c:	d106      	bne.n	8019e5c <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8019e4e:	687b      	ldr	r3, [r7, #4]
 8019e50:	2200      	movs	r2, #0
 8019e52:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8019e56:	6878      	ldr	r0, [r7, #4]
 8019e58:	f008 fc38 	bl	80226cc <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8019e5c:	687b      	ldr	r3, [r7, #4]
 8019e5e:	2203      	movs	r2, #3
 8019e60:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8019e64:	68bb      	ldr	r3, [r7, #8]
 8019e66:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8019e68:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8019e6c:	2b00      	cmp	r3, #0
 8019e6e:	d102      	bne.n	8019e76 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8019e70:	687b      	ldr	r3, [r7, #4]
 8019e72:	2200      	movs	r2, #0
 8019e74:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8019e76:	687b      	ldr	r3, [r7, #4]
 8019e78:	681b      	ldr	r3, [r3, #0]
 8019e7a:	4618      	mov	r0, r3
 8019e7c:	f004 f8af 	bl	801dfde <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8019e80:	687b      	ldr	r3, [r7, #4]
 8019e82:	681b      	ldr	r3, [r3, #0]
 8019e84:	603b      	str	r3, [r7, #0]
 8019e86:	687e      	ldr	r6, [r7, #4]
 8019e88:	466d      	mov	r5, sp
 8019e8a:	f106 0410 	add.w	r4, r6, #16
 8019e8e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8019e90:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8019e92:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8019e94:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8019e96:	e894 0003 	ldmia.w	r4, {r0, r1}
 8019e9a:	e885 0003 	stmia.w	r5, {r0, r1}
 8019e9e:	1d33      	adds	r3, r6, #4
 8019ea0:	cb0e      	ldmia	r3, {r1, r2, r3}
 8019ea2:	6838      	ldr	r0, [r7, #0]
 8019ea4:	f003 ff86 	bl	801ddb4 <USB_CoreInit>
 8019ea8:	4603      	mov	r3, r0
 8019eaa:	2b00      	cmp	r3, #0
 8019eac:	d005      	beq.n	8019eba <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8019eae:	687b      	ldr	r3, [r7, #4]
 8019eb0:	2202      	movs	r2, #2
 8019eb2:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8019eb6:	2301      	movs	r3, #1
 8019eb8:	e0d7      	b.n	801a06a <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8019eba:	687b      	ldr	r3, [r7, #4]
 8019ebc:	681b      	ldr	r3, [r3, #0]
 8019ebe:	2100      	movs	r1, #0
 8019ec0:	4618      	mov	r0, r3
 8019ec2:	f004 f89d 	bl	801e000 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8019ec6:	2300      	movs	r3, #0
 8019ec8:	73fb      	strb	r3, [r7, #15]
 8019eca:	e04a      	b.n	8019f62 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8019ecc:	7bfa      	ldrb	r2, [r7, #15]
 8019ece:	6879      	ldr	r1, [r7, #4]
 8019ed0:	4613      	mov	r3, r2
 8019ed2:	00db      	lsls	r3, r3, #3
 8019ed4:	1a9b      	subs	r3, r3, r2
 8019ed6:	009b      	lsls	r3, r3, #2
 8019ed8:	440b      	add	r3, r1
 8019eda:	333d      	adds	r3, #61	; 0x3d
 8019edc:	2201      	movs	r2, #1
 8019ede:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8019ee0:	7bfa      	ldrb	r2, [r7, #15]
 8019ee2:	6879      	ldr	r1, [r7, #4]
 8019ee4:	4613      	mov	r3, r2
 8019ee6:	00db      	lsls	r3, r3, #3
 8019ee8:	1a9b      	subs	r3, r3, r2
 8019eea:	009b      	lsls	r3, r3, #2
 8019eec:	440b      	add	r3, r1
 8019eee:	333c      	adds	r3, #60	; 0x3c
 8019ef0:	7bfa      	ldrb	r2, [r7, #15]
 8019ef2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8019ef4:	7bfa      	ldrb	r2, [r7, #15]
 8019ef6:	7bfb      	ldrb	r3, [r7, #15]
 8019ef8:	b298      	uxth	r0, r3
 8019efa:	6879      	ldr	r1, [r7, #4]
 8019efc:	4613      	mov	r3, r2
 8019efe:	00db      	lsls	r3, r3, #3
 8019f00:	1a9b      	subs	r3, r3, r2
 8019f02:	009b      	lsls	r3, r3, #2
 8019f04:	440b      	add	r3, r1
 8019f06:	3342      	adds	r3, #66	; 0x42
 8019f08:	4602      	mov	r2, r0
 8019f0a:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8019f0c:	7bfa      	ldrb	r2, [r7, #15]
 8019f0e:	6879      	ldr	r1, [r7, #4]
 8019f10:	4613      	mov	r3, r2
 8019f12:	00db      	lsls	r3, r3, #3
 8019f14:	1a9b      	subs	r3, r3, r2
 8019f16:	009b      	lsls	r3, r3, #2
 8019f18:	440b      	add	r3, r1
 8019f1a:	333f      	adds	r3, #63	; 0x3f
 8019f1c:	2200      	movs	r2, #0
 8019f1e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8019f20:	7bfa      	ldrb	r2, [r7, #15]
 8019f22:	6879      	ldr	r1, [r7, #4]
 8019f24:	4613      	mov	r3, r2
 8019f26:	00db      	lsls	r3, r3, #3
 8019f28:	1a9b      	subs	r3, r3, r2
 8019f2a:	009b      	lsls	r3, r3, #2
 8019f2c:	440b      	add	r3, r1
 8019f2e:	3344      	adds	r3, #68	; 0x44
 8019f30:	2200      	movs	r2, #0
 8019f32:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8019f34:	7bfa      	ldrb	r2, [r7, #15]
 8019f36:	6879      	ldr	r1, [r7, #4]
 8019f38:	4613      	mov	r3, r2
 8019f3a:	00db      	lsls	r3, r3, #3
 8019f3c:	1a9b      	subs	r3, r3, r2
 8019f3e:	009b      	lsls	r3, r3, #2
 8019f40:	440b      	add	r3, r1
 8019f42:	3348      	adds	r3, #72	; 0x48
 8019f44:	2200      	movs	r2, #0
 8019f46:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8019f48:	7bfa      	ldrb	r2, [r7, #15]
 8019f4a:	6879      	ldr	r1, [r7, #4]
 8019f4c:	4613      	mov	r3, r2
 8019f4e:	00db      	lsls	r3, r3, #3
 8019f50:	1a9b      	subs	r3, r3, r2
 8019f52:	009b      	lsls	r3, r3, #2
 8019f54:	440b      	add	r3, r1
 8019f56:	3350      	adds	r3, #80	; 0x50
 8019f58:	2200      	movs	r2, #0
 8019f5a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8019f5c:	7bfb      	ldrb	r3, [r7, #15]
 8019f5e:	3301      	adds	r3, #1
 8019f60:	73fb      	strb	r3, [r7, #15]
 8019f62:	7bfa      	ldrb	r2, [r7, #15]
 8019f64:	687b      	ldr	r3, [r7, #4]
 8019f66:	685b      	ldr	r3, [r3, #4]
 8019f68:	429a      	cmp	r2, r3
 8019f6a:	d3af      	bcc.n	8019ecc <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8019f6c:	2300      	movs	r3, #0
 8019f6e:	73fb      	strb	r3, [r7, #15]
 8019f70:	e044      	b.n	8019ffc <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8019f72:	7bfa      	ldrb	r2, [r7, #15]
 8019f74:	6879      	ldr	r1, [r7, #4]
 8019f76:	4613      	mov	r3, r2
 8019f78:	00db      	lsls	r3, r3, #3
 8019f7a:	1a9b      	subs	r3, r3, r2
 8019f7c:	009b      	lsls	r3, r3, #2
 8019f7e:	440b      	add	r3, r1
 8019f80:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8019f84:	2200      	movs	r2, #0
 8019f86:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8019f88:	7bfa      	ldrb	r2, [r7, #15]
 8019f8a:	6879      	ldr	r1, [r7, #4]
 8019f8c:	4613      	mov	r3, r2
 8019f8e:	00db      	lsls	r3, r3, #3
 8019f90:	1a9b      	subs	r3, r3, r2
 8019f92:	009b      	lsls	r3, r3, #2
 8019f94:	440b      	add	r3, r1
 8019f96:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8019f9a:	7bfa      	ldrb	r2, [r7, #15]
 8019f9c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8019f9e:	7bfa      	ldrb	r2, [r7, #15]
 8019fa0:	6879      	ldr	r1, [r7, #4]
 8019fa2:	4613      	mov	r3, r2
 8019fa4:	00db      	lsls	r3, r3, #3
 8019fa6:	1a9b      	subs	r3, r3, r2
 8019fa8:	009b      	lsls	r3, r3, #2
 8019faa:	440b      	add	r3, r1
 8019fac:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8019fb0:	2200      	movs	r2, #0
 8019fb2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8019fb4:	7bfa      	ldrb	r2, [r7, #15]
 8019fb6:	6879      	ldr	r1, [r7, #4]
 8019fb8:	4613      	mov	r3, r2
 8019fba:	00db      	lsls	r3, r3, #3
 8019fbc:	1a9b      	subs	r3, r3, r2
 8019fbe:	009b      	lsls	r3, r3, #2
 8019fc0:	440b      	add	r3, r1
 8019fc2:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8019fc6:	2200      	movs	r2, #0
 8019fc8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8019fca:	7bfa      	ldrb	r2, [r7, #15]
 8019fcc:	6879      	ldr	r1, [r7, #4]
 8019fce:	4613      	mov	r3, r2
 8019fd0:	00db      	lsls	r3, r3, #3
 8019fd2:	1a9b      	subs	r3, r3, r2
 8019fd4:	009b      	lsls	r3, r3, #2
 8019fd6:	440b      	add	r3, r1
 8019fd8:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8019fdc:	2200      	movs	r2, #0
 8019fde:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8019fe0:	7bfa      	ldrb	r2, [r7, #15]
 8019fe2:	6879      	ldr	r1, [r7, #4]
 8019fe4:	4613      	mov	r3, r2
 8019fe6:	00db      	lsls	r3, r3, #3
 8019fe8:	1a9b      	subs	r3, r3, r2
 8019fea:	009b      	lsls	r3, r3, #2
 8019fec:	440b      	add	r3, r1
 8019fee:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8019ff2:	2200      	movs	r2, #0
 8019ff4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8019ff6:	7bfb      	ldrb	r3, [r7, #15]
 8019ff8:	3301      	adds	r3, #1
 8019ffa:	73fb      	strb	r3, [r7, #15]
 8019ffc:	7bfa      	ldrb	r2, [r7, #15]
 8019ffe:	687b      	ldr	r3, [r7, #4]
 801a000:	685b      	ldr	r3, [r3, #4]
 801a002:	429a      	cmp	r2, r3
 801a004:	d3b5      	bcc.n	8019f72 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 801a006:	687b      	ldr	r3, [r7, #4]
 801a008:	681b      	ldr	r3, [r3, #0]
 801a00a:	603b      	str	r3, [r7, #0]
 801a00c:	687e      	ldr	r6, [r7, #4]
 801a00e:	466d      	mov	r5, sp
 801a010:	f106 0410 	add.w	r4, r6, #16
 801a014:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801a016:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 801a018:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801a01a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 801a01c:	e894 0003 	ldmia.w	r4, {r0, r1}
 801a020:	e885 0003 	stmia.w	r5, {r0, r1}
 801a024:	1d33      	adds	r3, r6, #4
 801a026:	cb0e      	ldmia	r3, {r1, r2, r3}
 801a028:	6838      	ldr	r0, [r7, #0]
 801a02a:	f004 f835 	bl	801e098 <USB_DevInit>
 801a02e:	4603      	mov	r3, r0
 801a030:	2b00      	cmp	r3, #0
 801a032:	d005      	beq.n	801a040 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 801a034:	687b      	ldr	r3, [r7, #4]
 801a036:	2202      	movs	r2, #2
 801a038:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 801a03c:	2301      	movs	r3, #1
 801a03e:	e014      	b.n	801a06a <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 801a040:	687b      	ldr	r3, [r7, #4]
 801a042:	2200      	movs	r2, #0
 801a044:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 801a048:	687b      	ldr	r3, [r7, #4]
 801a04a:	2201      	movs	r2, #1
 801a04c:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 801a050:	687b      	ldr	r3, [r7, #4]
 801a052:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a054:	2b01      	cmp	r3, #1
 801a056:	d102      	bne.n	801a05e <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 801a058:	6878      	ldr	r0, [r7, #4]
 801a05a:	f001 f8bf 	bl	801b1dc <HAL_PCDEx_ActivateLPM>
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 801a05e:	687b      	ldr	r3, [r7, #4]
 801a060:	681b      	ldr	r3, [r3, #0]
 801a062:	4618      	mov	r0, r3
 801a064:	f005 f8a4 	bl	801f1b0 <USB_DevDisconnect>

  return HAL_OK;
 801a068:	2300      	movs	r3, #0
}
 801a06a:	4618      	mov	r0, r3
 801a06c:	3714      	adds	r7, #20
 801a06e:	46bd      	mov	sp, r7
 801a070:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801a072 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 801a072:	b580      	push	{r7, lr}
 801a074:	b084      	sub	sp, #16
 801a076:	af00      	add	r7, sp, #0
 801a078:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 801a07a:	687b      	ldr	r3, [r7, #4]
 801a07c:	681b      	ldr	r3, [r3, #0]
 801a07e:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 801a080:	687b      	ldr	r3, [r7, #4]
 801a082:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 801a086:	2b01      	cmp	r3, #1
 801a088:	d101      	bne.n	801a08e <HAL_PCD_Start+0x1c>
 801a08a:	2302      	movs	r3, #2
 801a08c:	e020      	b.n	801a0d0 <HAL_PCD_Start+0x5e>
 801a08e:	687b      	ldr	r3, [r7, #4]
 801a090:	2201      	movs	r2, #1
 801a092:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 801a096:	687b      	ldr	r3, [r7, #4]
 801a098:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801a09a:	2b01      	cmp	r3, #1
 801a09c:	d109      	bne.n	801a0b2 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 801a09e:	687b      	ldr	r3, [r7, #4]
 801a0a0:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 801a0a2:	2b01      	cmp	r3, #1
 801a0a4:	d005      	beq.n	801a0b2 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 801a0a6:	68fb      	ldr	r3, [r7, #12]
 801a0a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801a0aa:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 801a0ae:	68fb      	ldr	r3, [r7, #12]
 801a0b0:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 801a0b2:	687b      	ldr	r3, [r7, #4]
 801a0b4:	681b      	ldr	r3, [r3, #0]
 801a0b6:	4618      	mov	r0, r3
 801a0b8:	f003 ff80 	bl	801dfbc <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 801a0bc:	687b      	ldr	r3, [r7, #4]
 801a0be:	681b      	ldr	r3, [r3, #0]
 801a0c0:	4618      	mov	r0, r3
 801a0c2:	f005 f854 	bl	801f16e <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 801a0c6:	687b      	ldr	r3, [r7, #4]
 801a0c8:	2200      	movs	r2, #0
 801a0ca:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 801a0ce:	2300      	movs	r3, #0
}
 801a0d0:	4618      	mov	r0, r3
 801a0d2:	3710      	adds	r7, #16
 801a0d4:	46bd      	mov	sp, r7
 801a0d6:	bd80      	pop	{r7, pc}

0801a0d8 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 801a0d8:	b590      	push	{r4, r7, lr}
 801a0da:	b08d      	sub	sp, #52	; 0x34
 801a0dc:	af00      	add	r7, sp, #0
 801a0de:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 801a0e0:	687b      	ldr	r3, [r7, #4]
 801a0e2:	681b      	ldr	r3, [r3, #0]
 801a0e4:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801a0e6:	6a3b      	ldr	r3, [r7, #32]
 801a0e8:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t temp;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 801a0ea:	687b      	ldr	r3, [r7, #4]
 801a0ec:	681b      	ldr	r3, [r3, #0]
 801a0ee:	4618      	mov	r0, r3
 801a0f0:	f005 f912 	bl	801f318 <USB_GetMode>
 801a0f4:	4603      	mov	r3, r0
 801a0f6:	2b00      	cmp	r3, #0
 801a0f8:	f040 83ca 	bne.w	801a890 <HAL_PCD_IRQHandler+0x7b8>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 801a0fc:	687b      	ldr	r3, [r7, #4]
 801a0fe:	681b      	ldr	r3, [r3, #0]
 801a100:	4618      	mov	r0, r3
 801a102:	f005 f876 	bl	801f1f2 <USB_ReadInterrupts>
 801a106:	4603      	mov	r3, r0
 801a108:	2b00      	cmp	r3, #0
 801a10a:	f000 83c0 	beq.w	801a88e <HAL_PCD_IRQHandler+0x7b6>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 801a10e:	687b      	ldr	r3, [r7, #4]
 801a110:	681b      	ldr	r3, [r3, #0]
 801a112:	4618      	mov	r0, r3
 801a114:	f005 f86d 	bl	801f1f2 <USB_ReadInterrupts>
 801a118:	4603      	mov	r3, r0
 801a11a:	f003 0302 	and.w	r3, r3, #2
 801a11e:	2b02      	cmp	r3, #2
 801a120:	d107      	bne.n	801a132 <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 801a122:	687b      	ldr	r3, [r7, #4]
 801a124:	681b      	ldr	r3, [r3, #0]
 801a126:	695a      	ldr	r2, [r3, #20]
 801a128:	687b      	ldr	r3, [r7, #4]
 801a12a:	681b      	ldr	r3, [r3, #0]
 801a12c:	f002 0202 	and.w	r2, r2, #2
 801a130:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 801a132:	687b      	ldr	r3, [r7, #4]
 801a134:	681b      	ldr	r3, [r3, #0]
 801a136:	4618      	mov	r0, r3
 801a138:	f005 f85b 	bl	801f1f2 <USB_ReadInterrupts>
 801a13c:	4603      	mov	r3, r0
 801a13e:	f003 0310 	and.w	r3, r3, #16
 801a142:	2b10      	cmp	r3, #16
 801a144:	d161      	bne.n	801a20a <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 801a146:	687b      	ldr	r3, [r7, #4]
 801a148:	681b      	ldr	r3, [r3, #0]
 801a14a:	699a      	ldr	r2, [r3, #24]
 801a14c:	687b      	ldr	r3, [r7, #4]
 801a14e:	681b      	ldr	r3, [r3, #0]
 801a150:	f022 0210 	bic.w	r2, r2, #16
 801a154:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 801a156:	6a3b      	ldr	r3, [r7, #32]
 801a158:	6a1b      	ldr	r3, [r3, #32]
 801a15a:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 801a15c:	69bb      	ldr	r3, [r7, #24]
 801a15e:	f003 020f 	and.w	r2, r3, #15
 801a162:	4613      	mov	r3, r2
 801a164:	00db      	lsls	r3, r3, #3
 801a166:	1a9b      	subs	r3, r3, r2
 801a168:	009b      	lsls	r3, r3, #2
 801a16a:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 801a16e:	687a      	ldr	r2, [r7, #4]
 801a170:	4413      	add	r3, r2
 801a172:	3304      	adds	r3, #4
 801a174:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 801a176:	69bb      	ldr	r3, [r7, #24]
 801a178:	0c5b      	lsrs	r3, r3, #17
 801a17a:	f003 030f 	and.w	r3, r3, #15
 801a17e:	2b02      	cmp	r3, #2
 801a180:	d124      	bne.n	801a1cc <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 801a182:	69ba      	ldr	r2, [r7, #24]
 801a184:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 801a188:	4013      	ands	r3, r2
 801a18a:	2b00      	cmp	r3, #0
 801a18c:	d035      	beq.n	801a1fa <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 801a18e:	697b      	ldr	r3, [r7, #20]
 801a190:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 801a192:	69bb      	ldr	r3, [r7, #24]
 801a194:	091b      	lsrs	r3, r3, #4
 801a196:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 801a198:	f3c3 030a 	ubfx	r3, r3, #0, #11
 801a19c:	b29b      	uxth	r3, r3
 801a19e:	461a      	mov	r2, r3
 801a1a0:	6a38      	ldr	r0, [r7, #32]
 801a1a2:	f004 fe92 	bl	801eeca <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 801a1a6:	697b      	ldr	r3, [r7, #20]
 801a1a8:	68da      	ldr	r2, [r3, #12]
 801a1aa:	69bb      	ldr	r3, [r7, #24]
 801a1ac:	091b      	lsrs	r3, r3, #4
 801a1ae:	f3c3 030a 	ubfx	r3, r3, #0, #11
 801a1b2:	441a      	add	r2, r3
 801a1b4:	697b      	ldr	r3, [r7, #20]
 801a1b6:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 801a1b8:	697b      	ldr	r3, [r7, #20]
 801a1ba:	699a      	ldr	r2, [r3, #24]
 801a1bc:	69bb      	ldr	r3, [r7, #24]
 801a1be:	091b      	lsrs	r3, r3, #4
 801a1c0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 801a1c4:	441a      	add	r2, r3
 801a1c6:	697b      	ldr	r3, [r7, #20]
 801a1c8:	619a      	str	r2, [r3, #24]
 801a1ca:	e016      	b.n	801a1fa <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 801a1cc:	69bb      	ldr	r3, [r7, #24]
 801a1ce:	0c5b      	lsrs	r3, r3, #17
 801a1d0:	f003 030f 	and.w	r3, r3, #15
 801a1d4:	2b06      	cmp	r3, #6
 801a1d6:	d110      	bne.n	801a1fa <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 801a1d8:	687b      	ldr	r3, [r7, #4]
 801a1da:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 801a1de:	2208      	movs	r2, #8
 801a1e0:	4619      	mov	r1, r3
 801a1e2:	6a38      	ldr	r0, [r7, #32]
 801a1e4:	f004 fe71 	bl	801eeca <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 801a1e8:	697b      	ldr	r3, [r7, #20]
 801a1ea:	699a      	ldr	r2, [r3, #24]
 801a1ec:	69bb      	ldr	r3, [r7, #24]
 801a1ee:	091b      	lsrs	r3, r3, #4
 801a1f0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 801a1f4:	441a      	add	r2, r3
 801a1f6:	697b      	ldr	r3, [r7, #20]
 801a1f8:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 801a1fa:	687b      	ldr	r3, [r7, #4]
 801a1fc:	681b      	ldr	r3, [r3, #0]
 801a1fe:	699a      	ldr	r2, [r3, #24]
 801a200:	687b      	ldr	r3, [r7, #4]
 801a202:	681b      	ldr	r3, [r3, #0]
 801a204:	f042 0210 	orr.w	r2, r2, #16
 801a208:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 801a20a:	687b      	ldr	r3, [r7, #4]
 801a20c:	681b      	ldr	r3, [r3, #0]
 801a20e:	4618      	mov	r0, r3
 801a210:	f004 ffef 	bl	801f1f2 <USB_ReadInterrupts>
 801a214:	4603      	mov	r3, r0
 801a216:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 801a21a:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 801a21e:	d16e      	bne.n	801a2fe <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 801a220:	2300      	movs	r3, #0
 801a222:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 801a224:	687b      	ldr	r3, [r7, #4]
 801a226:	681b      	ldr	r3, [r3, #0]
 801a228:	4618      	mov	r0, r3
 801a22a:	f004 fff5 	bl	801f218 <USB_ReadDevAllOutEpInterrupt>
 801a22e:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 801a230:	e062      	b.n	801a2f8 <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 801a232:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a234:	f003 0301 	and.w	r3, r3, #1
 801a238:	2b00      	cmp	r3, #0
 801a23a:	d057      	beq.n	801a2ec <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 801a23c:	687b      	ldr	r3, [r7, #4]
 801a23e:	681b      	ldr	r3, [r3, #0]
 801a240:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801a242:	b2d2      	uxtb	r2, r2
 801a244:	4611      	mov	r1, r2
 801a246:	4618      	mov	r0, r3
 801a248:	f005 f81a 	bl	801f280 <USB_ReadDevOutEPInterrupt>
 801a24c:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 801a24e:	693b      	ldr	r3, [r7, #16]
 801a250:	f003 0301 	and.w	r3, r3, #1
 801a254:	2b00      	cmp	r3, #0
 801a256:	d00c      	beq.n	801a272 <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 801a258:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a25a:	015a      	lsls	r2, r3, #5
 801a25c:	69fb      	ldr	r3, [r7, #28]
 801a25e:	4413      	add	r3, r2
 801a260:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801a264:	461a      	mov	r2, r3
 801a266:	2301      	movs	r3, #1
 801a268:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 801a26a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801a26c:	6878      	ldr	r0, [r7, #4]
 801a26e:	f000 fe0b 	bl	801ae88 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 801a272:	693b      	ldr	r3, [r7, #16]
 801a274:	f003 0308 	and.w	r3, r3, #8
 801a278:	2b00      	cmp	r3, #0
 801a27a:	d00c      	beq.n	801a296 <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 801a27c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a27e:	015a      	lsls	r2, r3, #5
 801a280:	69fb      	ldr	r3, [r7, #28]
 801a282:	4413      	add	r3, r2
 801a284:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801a288:	461a      	mov	r2, r3
 801a28a:	2308      	movs	r3, #8
 801a28c:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 801a28e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801a290:	6878      	ldr	r0, [r7, #4]
 801a292:	f000 ff05 	bl	801b0a0 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 801a296:	693b      	ldr	r3, [r7, #16]
 801a298:	f003 0310 	and.w	r3, r3, #16
 801a29c:	2b00      	cmp	r3, #0
 801a29e:	d008      	beq.n	801a2b2 <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 801a2a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a2a2:	015a      	lsls	r2, r3, #5
 801a2a4:	69fb      	ldr	r3, [r7, #28]
 801a2a6:	4413      	add	r3, r2
 801a2a8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801a2ac:	461a      	mov	r2, r3
 801a2ae:	2310      	movs	r3, #16
 801a2b0:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 801a2b2:	693b      	ldr	r3, [r7, #16]
 801a2b4:	f003 0320 	and.w	r3, r3, #32
 801a2b8:	2b00      	cmp	r3, #0
 801a2ba:	d008      	beq.n	801a2ce <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 801a2bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a2be:	015a      	lsls	r2, r3, #5
 801a2c0:	69fb      	ldr	r3, [r7, #28]
 801a2c2:	4413      	add	r3, r2
 801a2c4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801a2c8:	461a      	mov	r2, r3
 801a2ca:	2320      	movs	r3, #32
 801a2cc:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 801a2ce:	693b      	ldr	r3, [r7, #16]
 801a2d0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 801a2d4:	2b00      	cmp	r3, #0
 801a2d6:	d009      	beq.n	801a2ec <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 801a2d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a2da:	015a      	lsls	r2, r3, #5
 801a2dc:	69fb      	ldr	r3, [r7, #28]
 801a2de:	4413      	add	r3, r2
 801a2e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801a2e4:	461a      	mov	r2, r3
 801a2e6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 801a2ea:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 801a2ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a2ee:	3301      	adds	r3, #1
 801a2f0:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 801a2f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a2f4:	085b      	lsrs	r3, r3, #1
 801a2f6:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 801a2f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a2fa:	2b00      	cmp	r3, #0
 801a2fc:	d199      	bne.n	801a232 <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 801a2fe:	687b      	ldr	r3, [r7, #4]
 801a300:	681b      	ldr	r3, [r3, #0]
 801a302:	4618      	mov	r0, r3
 801a304:	f004 ff75 	bl	801f1f2 <USB_ReadInterrupts>
 801a308:	4603      	mov	r3, r0
 801a30a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 801a30e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 801a312:	f040 80c0 	bne.w	801a496 <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 801a316:	687b      	ldr	r3, [r7, #4]
 801a318:	681b      	ldr	r3, [r3, #0]
 801a31a:	4618      	mov	r0, r3
 801a31c:	f004 ff96 	bl	801f24c <USB_ReadDevAllInEpInterrupt>
 801a320:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 801a322:	2300      	movs	r3, #0
 801a324:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 801a326:	e0b2      	b.n	801a48e <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 801a328:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a32a:	f003 0301 	and.w	r3, r3, #1
 801a32e:	2b00      	cmp	r3, #0
 801a330:	f000 80a7 	beq.w	801a482 <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 801a334:	687b      	ldr	r3, [r7, #4]
 801a336:	681b      	ldr	r3, [r3, #0]
 801a338:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801a33a:	b2d2      	uxtb	r2, r2
 801a33c:	4611      	mov	r1, r2
 801a33e:	4618      	mov	r0, r3
 801a340:	f004 ffbc 	bl	801f2bc <USB_ReadDevInEPInterrupt>
 801a344:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 801a346:	693b      	ldr	r3, [r7, #16]
 801a348:	f003 0301 	and.w	r3, r3, #1
 801a34c:	2b00      	cmp	r3, #0
 801a34e:	d057      	beq.n	801a400 <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 801a350:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a352:	f003 030f 	and.w	r3, r3, #15
 801a356:	2201      	movs	r2, #1
 801a358:	fa02 f303 	lsl.w	r3, r2, r3
 801a35c:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 801a35e:	69fb      	ldr	r3, [r7, #28]
 801a360:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801a364:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 801a366:	68fb      	ldr	r3, [r7, #12]
 801a368:	43db      	mvns	r3, r3
 801a36a:	69f9      	ldr	r1, [r7, #28]
 801a36c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 801a370:	4013      	ands	r3, r2
 801a372:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 801a374:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a376:	015a      	lsls	r2, r3, #5
 801a378:	69fb      	ldr	r3, [r7, #28]
 801a37a:	4413      	add	r3, r2
 801a37c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801a380:	461a      	mov	r2, r3
 801a382:	2301      	movs	r3, #1
 801a384:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 801a386:	687b      	ldr	r3, [r7, #4]
 801a388:	691b      	ldr	r3, [r3, #16]
 801a38a:	2b01      	cmp	r3, #1
 801a38c:	d132      	bne.n	801a3f4 <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 801a38e:	6879      	ldr	r1, [r7, #4]
 801a390:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801a392:	4613      	mov	r3, r2
 801a394:	00db      	lsls	r3, r3, #3
 801a396:	1a9b      	subs	r3, r3, r2
 801a398:	009b      	lsls	r3, r3, #2
 801a39a:	440b      	add	r3, r1
 801a39c:	3348      	adds	r3, #72	; 0x48
 801a39e:	6819      	ldr	r1, [r3, #0]
 801a3a0:	6878      	ldr	r0, [r7, #4]
 801a3a2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801a3a4:	4613      	mov	r3, r2
 801a3a6:	00db      	lsls	r3, r3, #3
 801a3a8:	1a9b      	subs	r3, r3, r2
 801a3aa:	009b      	lsls	r3, r3, #2
 801a3ac:	4403      	add	r3, r0
 801a3ae:	3344      	adds	r3, #68	; 0x44
 801a3b0:	681b      	ldr	r3, [r3, #0]
 801a3b2:	4419      	add	r1, r3
 801a3b4:	6878      	ldr	r0, [r7, #4]
 801a3b6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801a3b8:	4613      	mov	r3, r2
 801a3ba:	00db      	lsls	r3, r3, #3
 801a3bc:	1a9b      	subs	r3, r3, r2
 801a3be:	009b      	lsls	r3, r3, #2
 801a3c0:	4403      	add	r3, r0
 801a3c2:	3348      	adds	r3, #72	; 0x48
 801a3c4:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 801a3c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a3c8:	2b00      	cmp	r3, #0
 801a3ca:	d113      	bne.n	801a3f4 <HAL_PCD_IRQHandler+0x31c>
 801a3cc:	6879      	ldr	r1, [r7, #4]
 801a3ce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801a3d0:	4613      	mov	r3, r2
 801a3d2:	00db      	lsls	r3, r3, #3
 801a3d4:	1a9b      	subs	r3, r3, r2
 801a3d6:	009b      	lsls	r3, r3, #2
 801a3d8:	440b      	add	r3, r1
 801a3da:	3350      	adds	r3, #80	; 0x50
 801a3dc:	681b      	ldr	r3, [r3, #0]
 801a3de:	2b00      	cmp	r3, #0
 801a3e0:	d108      	bne.n	801a3f4 <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 801a3e2:	687b      	ldr	r3, [r7, #4]
 801a3e4:	6818      	ldr	r0, [r3, #0]
 801a3e6:	687b      	ldr	r3, [r7, #4]
 801a3e8:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 801a3ec:	461a      	mov	r2, r3
 801a3ee:	2101      	movs	r1, #1
 801a3f0:	f004 ffc4 	bl	801f37c <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 801a3f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a3f6:	b2db      	uxtb	r3, r3
 801a3f8:	4619      	mov	r1, r3
 801a3fa:	6878      	ldr	r0, [r7, #4]
 801a3fc:	f008 fa09 	bl	8022812 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 801a400:	693b      	ldr	r3, [r7, #16]
 801a402:	f003 0308 	and.w	r3, r3, #8
 801a406:	2b00      	cmp	r3, #0
 801a408:	d008      	beq.n	801a41c <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 801a40a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a40c:	015a      	lsls	r2, r3, #5
 801a40e:	69fb      	ldr	r3, [r7, #28]
 801a410:	4413      	add	r3, r2
 801a412:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801a416:	461a      	mov	r2, r3
 801a418:	2308      	movs	r3, #8
 801a41a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 801a41c:	693b      	ldr	r3, [r7, #16]
 801a41e:	f003 0310 	and.w	r3, r3, #16
 801a422:	2b00      	cmp	r3, #0
 801a424:	d008      	beq.n	801a438 <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 801a426:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a428:	015a      	lsls	r2, r3, #5
 801a42a:	69fb      	ldr	r3, [r7, #28]
 801a42c:	4413      	add	r3, r2
 801a42e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801a432:	461a      	mov	r2, r3
 801a434:	2310      	movs	r3, #16
 801a436:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 801a438:	693b      	ldr	r3, [r7, #16]
 801a43a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801a43e:	2b00      	cmp	r3, #0
 801a440:	d008      	beq.n	801a454 <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 801a442:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a444:	015a      	lsls	r2, r3, #5
 801a446:	69fb      	ldr	r3, [r7, #28]
 801a448:	4413      	add	r3, r2
 801a44a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801a44e:	461a      	mov	r2, r3
 801a450:	2340      	movs	r3, #64	; 0x40
 801a452:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 801a454:	693b      	ldr	r3, [r7, #16]
 801a456:	f003 0302 	and.w	r3, r3, #2
 801a45a:	2b00      	cmp	r3, #0
 801a45c:	d008      	beq.n	801a470 <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 801a45e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a460:	015a      	lsls	r2, r3, #5
 801a462:	69fb      	ldr	r3, [r7, #28]
 801a464:	4413      	add	r3, r2
 801a466:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801a46a:	461a      	mov	r2, r3
 801a46c:	2302      	movs	r3, #2
 801a46e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 801a470:	693b      	ldr	r3, [r7, #16]
 801a472:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801a476:	2b00      	cmp	r3, #0
 801a478:	d003      	beq.n	801a482 <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 801a47a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801a47c:	6878      	ldr	r0, [r7, #4]
 801a47e:	f000 fc75 	bl	801ad6c <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 801a482:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a484:	3301      	adds	r3, #1
 801a486:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 801a488:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a48a:	085b      	lsrs	r3, r3, #1
 801a48c:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 801a48e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a490:	2b00      	cmp	r3, #0
 801a492:	f47f af49 	bne.w	801a328 <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 801a496:	687b      	ldr	r3, [r7, #4]
 801a498:	681b      	ldr	r3, [r3, #0]
 801a49a:	4618      	mov	r0, r3
 801a49c:	f004 fea9 	bl	801f1f2 <USB_ReadInterrupts>
 801a4a0:	4603      	mov	r3, r0
 801a4a2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 801a4a6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 801a4aa:	d122      	bne.n	801a4f2 <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 801a4ac:	69fb      	ldr	r3, [r7, #28]
 801a4ae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801a4b2:	685b      	ldr	r3, [r3, #4]
 801a4b4:	69fa      	ldr	r2, [r7, #28]
 801a4b6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 801a4ba:	f023 0301 	bic.w	r3, r3, #1
 801a4be:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 801a4c0:	687b      	ldr	r3, [r7, #4]
 801a4c2:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 801a4c6:	2b01      	cmp	r3, #1
 801a4c8:	d108      	bne.n	801a4dc <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 801a4ca:	687b      	ldr	r3, [r7, #4]
 801a4cc:	2200      	movs	r2, #0
 801a4ce:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 801a4d2:	2100      	movs	r1, #0
 801a4d4:	6878      	ldr	r0, [r7, #4]
 801a4d6:	f008 fc0b 	bl	8022cf0 <HAL_PCDEx_LPM_Callback>
 801a4da:	e002      	b.n	801a4e2 <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 801a4dc:	6878      	ldr	r0, [r7, #4]
 801a4de:	f008 fa0f 	bl	8022900 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 801a4e2:	687b      	ldr	r3, [r7, #4]
 801a4e4:	681b      	ldr	r3, [r3, #0]
 801a4e6:	695a      	ldr	r2, [r3, #20]
 801a4e8:	687b      	ldr	r3, [r7, #4]
 801a4ea:	681b      	ldr	r3, [r3, #0]
 801a4ec:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 801a4f0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 801a4f2:	687b      	ldr	r3, [r7, #4]
 801a4f4:	681b      	ldr	r3, [r3, #0]
 801a4f6:	4618      	mov	r0, r3
 801a4f8:	f004 fe7b 	bl	801f1f2 <USB_ReadInterrupts>
 801a4fc:	4603      	mov	r3, r0
 801a4fe:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 801a502:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 801a506:	d112      	bne.n	801a52e <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 801a508:	69fb      	ldr	r3, [r7, #28]
 801a50a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801a50e:	689b      	ldr	r3, [r3, #8]
 801a510:	f003 0301 	and.w	r3, r3, #1
 801a514:	2b01      	cmp	r3, #1
 801a516:	d102      	bne.n	801a51e <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 801a518:	6878      	ldr	r0, [r7, #4]
 801a51a:	f008 f9cb 	bl	80228b4 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 801a51e:	687b      	ldr	r3, [r7, #4]
 801a520:	681b      	ldr	r3, [r3, #0]
 801a522:	695a      	ldr	r2, [r3, #20]
 801a524:	687b      	ldr	r3, [r7, #4]
 801a526:	681b      	ldr	r3, [r3, #0]
 801a528:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 801a52c:	615a      	str	r2, [r3, #20]
    }
#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 801a52e:	687b      	ldr	r3, [r7, #4]
 801a530:	681b      	ldr	r3, [r3, #0]
 801a532:	4618      	mov	r0, r3
 801a534:	f004 fe5d 	bl	801f1f2 <USB_ReadInterrupts>
 801a538:	4603      	mov	r3, r0
 801a53a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 801a53e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 801a542:	d121      	bne.n	801a588 <HAL_PCD_IRQHandler+0x4b0>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 801a544:	687b      	ldr	r3, [r7, #4]
 801a546:	681b      	ldr	r3, [r3, #0]
 801a548:	695a      	ldr	r2, [r3, #20]
 801a54a:	687b      	ldr	r3, [r7, #4]
 801a54c:	681b      	ldr	r3, [r3, #0]
 801a54e:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 801a552:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 801a554:	687b      	ldr	r3, [r7, #4]
 801a556:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 801a55a:	2b00      	cmp	r3, #0
 801a55c:	d111      	bne.n	801a582 <HAL_PCD_IRQHandler+0x4aa>
      {
        hpcd->LPM_State = LPM_L1;
 801a55e:	687b      	ldr	r3, [r7, #4]
 801a560:	2201      	movs	r2, #1
 801a562:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 801a566:	687b      	ldr	r3, [r7, #4]
 801a568:	681b      	ldr	r3, [r3, #0]
 801a56a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801a56c:	089b      	lsrs	r3, r3, #2
 801a56e:	f003 020f 	and.w	r2, r3, #15
 801a572:	687b      	ldr	r3, [r7, #4]
 801a574:	f8c3 23f8 	str.w	r2, [r3, #1016]	; 0x3f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 801a578:	2101      	movs	r1, #1
 801a57a:	6878      	ldr	r0, [r7, #4]
 801a57c:	f008 fbb8 	bl	8022cf0 <HAL_PCDEx_LPM_Callback>
 801a580:	e002      	b.n	801a588 <HAL_PCD_IRQHandler+0x4b0>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 801a582:	6878      	ldr	r0, [r7, #4]
 801a584:	f008 f996 	bl	80228b4 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 801a588:	687b      	ldr	r3, [r7, #4]
 801a58a:	681b      	ldr	r3, [r3, #0]
 801a58c:	4618      	mov	r0, r3
 801a58e:	f004 fe30 	bl	801f1f2 <USB_ReadInterrupts>
 801a592:	4603      	mov	r3, r0
 801a594:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 801a598:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801a59c:	f040 80c7 	bne.w	801a72e <HAL_PCD_IRQHandler+0x656>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 801a5a0:	69fb      	ldr	r3, [r7, #28]
 801a5a2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801a5a6:	685b      	ldr	r3, [r3, #4]
 801a5a8:	69fa      	ldr	r2, [r7, #28]
 801a5aa:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 801a5ae:	f023 0301 	bic.w	r3, r3, #1
 801a5b2:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 801a5b4:	687b      	ldr	r3, [r7, #4]
 801a5b6:	681b      	ldr	r3, [r3, #0]
 801a5b8:	2110      	movs	r1, #16
 801a5ba:	4618      	mov	r0, r3
 801a5bc:	f003 feca 	bl	801e354 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 801a5c0:	2300      	movs	r3, #0
 801a5c2:	62fb      	str	r3, [r7, #44]	; 0x2c
 801a5c4:	e056      	b.n	801a674 <HAL_PCD_IRQHandler+0x59c>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 801a5c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a5c8:	015a      	lsls	r2, r3, #5
 801a5ca:	69fb      	ldr	r3, [r7, #28]
 801a5cc:	4413      	add	r3, r2
 801a5ce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801a5d2:	461a      	mov	r2, r3
 801a5d4:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 801a5d8:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 801a5da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a5dc:	015a      	lsls	r2, r3, #5
 801a5de:	69fb      	ldr	r3, [r7, #28]
 801a5e0:	4413      	add	r3, r2
 801a5e2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801a5e6:	681b      	ldr	r3, [r3, #0]
 801a5e8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801a5ea:	0151      	lsls	r1, r2, #5
 801a5ec:	69fa      	ldr	r2, [r7, #28]
 801a5ee:	440a      	add	r2, r1
 801a5f0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801a5f4:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 801a5f8:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 801a5fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a5fc:	015a      	lsls	r2, r3, #5
 801a5fe:	69fb      	ldr	r3, [r7, #28]
 801a600:	4413      	add	r3, r2
 801a602:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801a606:	681b      	ldr	r3, [r3, #0]
 801a608:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801a60a:	0151      	lsls	r1, r2, #5
 801a60c:	69fa      	ldr	r2, [r7, #28]
 801a60e:	440a      	add	r2, r1
 801a610:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801a614:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 801a618:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 801a61a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a61c:	015a      	lsls	r2, r3, #5
 801a61e:	69fb      	ldr	r3, [r7, #28]
 801a620:	4413      	add	r3, r2
 801a622:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801a626:	461a      	mov	r2, r3
 801a628:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 801a62c:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 801a62e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a630:	015a      	lsls	r2, r3, #5
 801a632:	69fb      	ldr	r3, [r7, #28]
 801a634:	4413      	add	r3, r2
 801a636:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801a63a:	681b      	ldr	r3, [r3, #0]
 801a63c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801a63e:	0151      	lsls	r1, r2, #5
 801a640:	69fa      	ldr	r2, [r7, #28]
 801a642:	440a      	add	r2, r1
 801a644:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801a648:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 801a64c:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 801a64e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a650:	015a      	lsls	r2, r3, #5
 801a652:	69fb      	ldr	r3, [r7, #28]
 801a654:	4413      	add	r3, r2
 801a656:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801a65a:	681b      	ldr	r3, [r3, #0]
 801a65c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801a65e:	0151      	lsls	r1, r2, #5
 801a660:	69fa      	ldr	r2, [r7, #28]
 801a662:	440a      	add	r2, r1
 801a664:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801a668:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 801a66c:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 801a66e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a670:	3301      	adds	r3, #1
 801a672:	62fb      	str	r3, [r7, #44]	; 0x2c
 801a674:	687b      	ldr	r3, [r7, #4]
 801a676:	685b      	ldr	r3, [r3, #4]
 801a678:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801a67a:	429a      	cmp	r2, r3
 801a67c:	d3a3      	bcc.n	801a5c6 <HAL_PCD_IRQHandler+0x4ee>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 801a67e:	69fb      	ldr	r3, [r7, #28]
 801a680:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801a684:	69db      	ldr	r3, [r3, #28]
 801a686:	69fa      	ldr	r2, [r7, #28]
 801a688:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 801a68c:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 801a690:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 801a692:	687b      	ldr	r3, [r7, #4]
 801a694:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801a696:	2b00      	cmp	r3, #0
 801a698:	d016      	beq.n	801a6c8 <HAL_PCD_IRQHandler+0x5f0>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 801a69a:	69fb      	ldr	r3, [r7, #28]
 801a69c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801a6a0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801a6a4:	69fa      	ldr	r2, [r7, #28]
 801a6a6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 801a6aa:	f043 030b 	orr.w	r3, r3, #11
 801a6ae:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 801a6b2:	69fb      	ldr	r3, [r7, #28]
 801a6b4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801a6b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801a6ba:	69fa      	ldr	r2, [r7, #28]
 801a6bc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 801a6c0:	f043 030b 	orr.w	r3, r3, #11
 801a6c4:	6453      	str	r3, [r2, #68]	; 0x44
 801a6c6:	e015      	b.n	801a6f4 <HAL_PCD_IRQHandler+0x61c>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 801a6c8:	69fb      	ldr	r3, [r7, #28]
 801a6ca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801a6ce:	695b      	ldr	r3, [r3, #20]
 801a6d0:	69fa      	ldr	r2, [r7, #28]
 801a6d2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 801a6d6:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 801a6da:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 801a6de:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 801a6e0:	69fb      	ldr	r3, [r7, #28]
 801a6e2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801a6e6:	691b      	ldr	r3, [r3, #16]
 801a6e8:	69fa      	ldr	r2, [r7, #28]
 801a6ea:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 801a6ee:	f043 030b 	orr.w	r3, r3, #11
 801a6f2:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 801a6f4:	69fb      	ldr	r3, [r7, #28]
 801a6f6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801a6fa:	681b      	ldr	r3, [r3, #0]
 801a6fc:	69fa      	ldr	r2, [r7, #28]
 801a6fe:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 801a702:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 801a706:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 801a708:	687b      	ldr	r3, [r7, #4]
 801a70a:	6818      	ldr	r0, [r3, #0]
 801a70c:	687b      	ldr	r3, [r7, #4]
 801a70e:	691b      	ldr	r3, [r3, #16]
 801a710:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 801a712:	687b      	ldr	r3, [r7, #4]
 801a714:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 801a718:	461a      	mov	r2, r3
 801a71a:	f004 fe2f 	bl	801f37c <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 801a71e:	687b      	ldr	r3, [r7, #4]
 801a720:	681b      	ldr	r3, [r3, #0]
 801a722:	695a      	ldr	r2, [r3, #20]
 801a724:	687b      	ldr	r3, [r7, #4]
 801a726:	681b      	ldr	r3, [r3, #0]
 801a728:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 801a72c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 801a72e:	687b      	ldr	r3, [r7, #4]
 801a730:	681b      	ldr	r3, [r3, #0]
 801a732:	4618      	mov	r0, r3
 801a734:	f004 fd5d 	bl	801f1f2 <USB_ReadInterrupts>
 801a738:	4603      	mov	r3, r0
 801a73a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 801a73e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 801a742:	d124      	bne.n	801a78e <HAL_PCD_IRQHandler+0x6b6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 801a744:	687b      	ldr	r3, [r7, #4]
 801a746:	681b      	ldr	r3, [r3, #0]
 801a748:	4618      	mov	r0, r3
 801a74a:	f004 fdf3 	bl	801f334 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 801a74e:	687b      	ldr	r3, [r7, #4]
 801a750:	681b      	ldr	r3, [r3, #0]
 801a752:	4618      	mov	r0, r3
 801a754:	f003 fe5b 	bl	801e40e <USB_GetDevSpeed>
 801a758:	4603      	mov	r3, r0
 801a75a:	461a      	mov	r2, r3
 801a75c:	687b      	ldr	r3, [r7, #4]
 801a75e:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 801a760:	687b      	ldr	r3, [r7, #4]
 801a762:	681c      	ldr	r4, [r3, #0]
 801a764:	f000 fe94 	bl	801b490 <HAL_RCC_GetHCLKFreq>
 801a768:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 801a76a:	687b      	ldr	r3, [r7, #4]
 801a76c:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 801a76e:	b2db      	uxtb	r3, r3
 801a770:	461a      	mov	r2, r3
 801a772:	4620      	mov	r0, r4
 801a774:	f003 fb80 	bl	801de78 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 801a778:	6878      	ldr	r0, [r7, #4]
 801a77a:	f008 f872 	bl	8022862 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 801a77e:	687b      	ldr	r3, [r7, #4]
 801a780:	681b      	ldr	r3, [r3, #0]
 801a782:	695a      	ldr	r2, [r3, #20]
 801a784:	687b      	ldr	r3, [r7, #4]
 801a786:	681b      	ldr	r3, [r3, #0]
 801a788:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 801a78c:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 801a78e:	687b      	ldr	r3, [r7, #4]
 801a790:	681b      	ldr	r3, [r3, #0]
 801a792:	4618      	mov	r0, r3
 801a794:	f004 fd2d 	bl	801f1f2 <USB_ReadInterrupts>
 801a798:	4603      	mov	r3, r0
 801a79a:	f003 0308 	and.w	r3, r3, #8
 801a79e:	2b08      	cmp	r3, #8
 801a7a0:	d10a      	bne.n	801a7b8 <HAL_PCD_IRQHandler+0x6e0>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 801a7a2:	6878      	ldr	r0, [r7, #4]
 801a7a4:	f008 f84f 	bl	8022846 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 801a7a8:	687b      	ldr	r3, [r7, #4]
 801a7aa:	681b      	ldr	r3, [r3, #0]
 801a7ac:	695a      	ldr	r2, [r3, #20]
 801a7ae:	687b      	ldr	r3, [r7, #4]
 801a7b0:	681b      	ldr	r3, [r3, #0]
 801a7b2:	f002 0208 	and.w	r2, r2, #8
 801a7b6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 801a7b8:	687b      	ldr	r3, [r7, #4]
 801a7ba:	681b      	ldr	r3, [r3, #0]
 801a7bc:	4618      	mov	r0, r3
 801a7be:	f004 fd18 	bl	801f1f2 <USB_ReadInterrupts>
 801a7c2:	4603      	mov	r3, r0
 801a7c4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 801a7c8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 801a7cc:	d10f      	bne.n	801a7ee <HAL_PCD_IRQHandler+0x716>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 801a7ce:	2300      	movs	r3, #0
 801a7d0:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 801a7d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a7d4:	b2db      	uxtb	r3, r3
 801a7d6:	4619      	mov	r1, r3
 801a7d8:	6878      	ldr	r0, [r7, #4]
 801a7da:	f008 f8b1 	bl	8022940 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 801a7de:	687b      	ldr	r3, [r7, #4]
 801a7e0:	681b      	ldr	r3, [r3, #0]
 801a7e2:	695a      	ldr	r2, [r3, #20]
 801a7e4:	687b      	ldr	r3, [r7, #4]
 801a7e6:	681b      	ldr	r3, [r3, #0]
 801a7e8:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 801a7ec:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 801a7ee:	687b      	ldr	r3, [r7, #4]
 801a7f0:	681b      	ldr	r3, [r3, #0]
 801a7f2:	4618      	mov	r0, r3
 801a7f4:	f004 fcfd 	bl	801f1f2 <USB_ReadInterrupts>
 801a7f8:	4603      	mov	r3, r0
 801a7fa:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 801a7fe:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 801a802:	d10f      	bne.n	801a824 <HAL_PCD_IRQHandler+0x74c>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 801a804:	2300      	movs	r3, #0
 801a806:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 801a808:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a80a:	b2db      	uxtb	r3, r3
 801a80c:	4619      	mov	r1, r3
 801a80e:	6878      	ldr	r0, [r7, #4]
 801a810:	f008 f884 	bl	802291c <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 801a814:	687b      	ldr	r3, [r7, #4]
 801a816:	681b      	ldr	r3, [r3, #0]
 801a818:	695a      	ldr	r2, [r3, #20]
 801a81a:	687b      	ldr	r3, [r7, #4]
 801a81c:	681b      	ldr	r3, [r3, #0]
 801a81e:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 801a822:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 801a824:	687b      	ldr	r3, [r7, #4]
 801a826:	681b      	ldr	r3, [r3, #0]
 801a828:	4618      	mov	r0, r3
 801a82a:	f004 fce2 	bl	801f1f2 <USB_ReadInterrupts>
 801a82e:	4603      	mov	r3, r0
 801a830:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 801a834:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801a838:	d10a      	bne.n	801a850 <HAL_PCD_IRQHandler+0x778>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 801a83a:	6878      	ldr	r0, [r7, #4]
 801a83c:	f008 f892 	bl	8022964 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 801a840:	687b      	ldr	r3, [r7, #4]
 801a842:	681b      	ldr	r3, [r3, #0]
 801a844:	695a      	ldr	r2, [r3, #20]
 801a846:	687b      	ldr	r3, [r7, #4]
 801a848:	681b      	ldr	r3, [r3, #0]
 801a84a:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 801a84e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 801a850:	687b      	ldr	r3, [r7, #4]
 801a852:	681b      	ldr	r3, [r3, #0]
 801a854:	4618      	mov	r0, r3
 801a856:	f004 fccc 	bl	801f1f2 <USB_ReadInterrupts>
 801a85a:	4603      	mov	r3, r0
 801a85c:	f003 0304 	and.w	r3, r3, #4
 801a860:	2b04      	cmp	r3, #4
 801a862:	d115      	bne.n	801a890 <HAL_PCD_IRQHandler+0x7b8>
    {
      temp = hpcd->Instance->GOTGINT;
 801a864:	687b      	ldr	r3, [r7, #4]
 801a866:	681b      	ldr	r3, [r3, #0]
 801a868:	685b      	ldr	r3, [r3, #4]
 801a86a:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 801a86c:	69bb      	ldr	r3, [r7, #24]
 801a86e:	f003 0304 	and.w	r3, r3, #4
 801a872:	2b00      	cmp	r3, #0
 801a874:	d002      	beq.n	801a87c <HAL_PCD_IRQHandler+0x7a4>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 801a876:	6878      	ldr	r0, [r7, #4]
 801a878:	f008 f882 	bl	8022980 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 801a87c:	687b      	ldr	r3, [r7, #4]
 801a87e:	681b      	ldr	r3, [r3, #0]
 801a880:	6859      	ldr	r1, [r3, #4]
 801a882:	687b      	ldr	r3, [r7, #4]
 801a884:	681b      	ldr	r3, [r3, #0]
 801a886:	69ba      	ldr	r2, [r7, #24]
 801a888:	430a      	orrs	r2, r1
 801a88a:	605a      	str	r2, [r3, #4]
 801a88c:	e000      	b.n	801a890 <HAL_PCD_IRQHandler+0x7b8>
      return;
 801a88e:	bf00      	nop
    }
  }
}
 801a890:	3734      	adds	r7, #52	; 0x34
 801a892:	46bd      	mov	sp, r7
 801a894:	bd90      	pop	{r4, r7, pc}

0801a896 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 801a896:	b580      	push	{r7, lr}
 801a898:	b082      	sub	sp, #8
 801a89a:	af00      	add	r7, sp, #0
 801a89c:	6078      	str	r0, [r7, #4]
 801a89e:	460b      	mov	r3, r1
 801a8a0:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 801a8a2:	687b      	ldr	r3, [r7, #4]
 801a8a4:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 801a8a8:	2b01      	cmp	r3, #1
 801a8aa:	d101      	bne.n	801a8b0 <HAL_PCD_SetAddress+0x1a>
 801a8ac:	2302      	movs	r3, #2
 801a8ae:	e013      	b.n	801a8d8 <HAL_PCD_SetAddress+0x42>
 801a8b0:	687b      	ldr	r3, [r7, #4]
 801a8b2:	2201      	movs	r2, #1
 801a8b4:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 801a8b8:	687b      	ldr	r3, [r7, #4]
 801a8ba:	78fa      	ldrb	r2, [r7, #3]
 801a8bc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 801a8c0:	687b      	ldr	r3, [r7, #4]
 801a8c2:	681b      	ldr	r3, [r3, #0]
 801a8c4:	78fa      	ldrb	r2, [r7, #3]
 801a8c6:	4611      	mov	r1, r2
 801a8c8:	4618      	mov	r0, r3
 801a8ca:	f004 fc2a 	bl	801f122 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 801a8ce:	687b      	ldr	r3, [r7, #4]
 801a8d0:	2200      	movs	r2, #0
 801a8d2:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 801a8d6:	2300      	movs	r3, #0
}
 801a8d8:	4618      	mov	r0, r3
 801a8da:	3708      	adds	r7, #8
 801a8dc:	46bd      	mov	sp, r7
 801a8de:	bd80      	pop	{r7, pc}

0801a8e0 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 801a8e0:	b580      	push	{r7, lr}
 801a8e2:	b084      	sub	sp, #16
 801a8e4:	af00      	add	r7, sp, #0
 801a8e6:	6078      	str	r0, [r7, #4]
 801a8e8:	4608      	mov	r0, r1
 801a8ea:	4611      	mov	r1, r2
 801a8ec:	461a      	mov	r2, r3
 801a8ee:	4603      	mov	r3, r0
 801a8f0:	70fb      	strb	r3, [r7, #3]
 801a8f2:	460b      	mov	r3, r1
 801a8f4:	803b      	strh	r3, [r7, #0]
 801a8f6:	4613      	mov	r3, r2
 801a8f8:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 801a8fa:	2300      	movs	r3, #0
 801a8fc:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 801a8fe:	f997 3003 	ldrsb.w	r3, [r7, #3]
 801a902:	2b00      	cmp	r3, #0
 801a904:	da0f      	bge.n	801a926 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 801a906:	78fb      	ldrb	r3, [r7, #3]
 801a908:	f003 020f 	and.w	r2, r3, #15
 801a90c:	4613      	mov	r3, r2
 801a90e:	00db      	lsls	r3, r3, #3
 801a910:	1a9b      	subs	r3, r3, r2
 801a912:	009b      	lsls	r3, r3, #2
 801a914:	3338      	adds	r3, #56	; 0x38
 801a916:	687a      	ldr	r2, [r7, #4]
 801a918:	4413      	add	r3, r2
 801a91a:	3304      	adds	r3, #4
 801a91c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 801a91e:	68fb      	ldr	r3, [r7, #12]
 801a920:	2201      	movs	r2, #1
 801a922:	705a      	strb	r2, [r3, #1]
 801a924:	e00f      	b.n	801a946 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 801a926:	78fb      	ldrb	r3, [r7, #3]
 801a928:	f003 020f 	and.w	r2, r3, #15
 801a92c:	4613      	mov	r3, r2
 801a92e:	00db      	lsls	r3, r3, #3
 801a930:	1a9b      	subs	r3, r3, r2
 801a932:	009b      	lsls	r3, r3, #2
 801a934:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 801a938:	687a      	ldr	r2, [r7, #4]
 801a93a:	4413      	add	r3, r2
 801a93c:	3304      	adds	r3, #4
 801a93e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 801a940:	68fb      	ldr	r3, [r7, #12]
 801a942:	2200      	movs	r2, #0
 801a944:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 801a946:	78fb      	ldrb	r3, [r7, #3]
 801a948:	f003 030f 	and.w	r3, r3, #15
 801a94c:	b2da      	uxtb	r2, r3
 801a94e:	68fb      	ldr	r3, [r7, #12]
 801a950:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 801a952:	883a      	ldrh	r2, [r7, #0]
 801a954:	68fb      	ldr	r3, [r7, #12]
 801a956:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 801a958:	68fb      	ldr	r3, [r7, #12]
 801a95a:	78ba      	ldrb	r2, [r7, #2]
 801a95c:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 801a95e:	68fb      	ldr	r3, [r7, #12]
 801a960:	785b      	ldrb	r3, [r3, #1]
 801a962:	2b00      	cmp	r3, #0
 801a964:	d004      	beq.n	801a970 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 801a966:	68fb      	ldr	r3, [r7, #12]
 801a968:	781b      	ldrb	r3, [r3, #0]
 801a96a:	b29a      	uxth	r2, r3
 801a96c:	68fb      	ldr	r3, [r7, #12]
 801a96e:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 801a970:	78bb      	ldrb	r3, [r7, #2]
 801a972:	2b02      	cmp	r3, #2
 801a974:	d102      	bne.n	801a97c <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 801a976:	68fb      	ldr	r3, [r7, #12]
 801a978:	2200      	movs	r2, #0
 801a97a:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 801a97c:	687b      	ldr	r3, [r7, #4]
 801a97e:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 801a982:	2b01      	cmp	r3, #1
 801a984:	d101      	bne.n	801a98a <HAL_PCD_EP_Open+0xaa>
 801a986:	2302      	movs	r3, #2
 801a988:	e00e      	b.n	801a9a8 <HAL_PCD_EP_Open+0xc8>
 801a98a:	687b      	ldr	r3, [r7, #4]
 801a98c:	2201      	movs	r2, #1
 801a98e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 801a992:	687b      	ldr	r3, [r7, #4]
 801a994:	681b      	ldr	r3, [r3, #0]
 801a996:	68f9      	ldr	r1, [r7, #12]
 801a998:	4618      	mov	r0, r3
 801a99a:	f003 fd5d 	bl	801e458 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 801a99e:	687b      	ldr	r3, [r7, #4]
 801a9a0:	2200      	movs	r2, #0
 801a9a2:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 801a9a6:	7afb      	ldrb	r3, [r7, #11]
}
 801a9a8:	4618      	mov	r0, r3
 801a9aa:	3710      	adds	r7, #16
 801a9ac:	46bd      	mov	sp, r7
 801a9ae:	bd80      	pop	{r7, pc}

0801a9b0 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 801a9b0:	b580      	push	{r7, lr}
 801a9b2:	b084      	sub	sp, #16
 801a9b4:	af00      	add	r7, sp, #0
 801a9b6:	6078      	str	r0, [r7, #4]
 801a9b8:	460b      	mov	r3, r1
 801a9ba:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 801a9bc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 801a9c0:	2b00      	cmp	r3, #0
 801a9c2:	da0f      	bge.n	801a9e4 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 801a9c4:	78fb      	ldrb	r3, [r7, #3]
 801a9c6:	f003 020f 	and.w	r2, r3, #15
 801a9ca:	4613      	mov	r3, r2
 801a9cc:	00db      	lsls	r3, r3, #3
 801a9ce:	1a9b      	subs	r3, r3, r2
 801a9d0:	009b      	lsls	r3, r3, #2
 801a9d2:	3338      	adds	r3, #56	; 0x38
 801a9d4:	687a      	ldr	r2, [r7, #4]
 801a9d6:	4413      	add	r3, r2
 801a9d8:	3304      	adds	r3, #4
 801a9da:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 801a9dc:	68fb      	ldr	r3, [r7, #12]
 801a9de:	2201      	movs	r2, #1
 801a9e0:	705a      	strb	r2, [r3, #1]
 801a9e2:	e00f      	b.n	801aa04 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 801a9e4:	78fb      	ldrb	r3, [r7, #3]
 801a9e6:	f003 020f 	and.w	r2, r3, #15
 801a9ea:	4613      	mov	r3, r2
 801a9ec:	00db      	lsls	r3, r3, #3
 801a9ee:	1a9b      	subs	r3, r3, r2
 801a9f0:	009b      	lsls	r3, r3, #2
 801a9f2:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 801a9f6:	687a      	ldr	r2, [r7, #4]
 801a9f8:	4413      	add	r3, r2
 801a9fa:	3304      	adds	r3, #4
 801a9fc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 801a9fe:	68fb      	ldr	r3, [r7, #12]
 801aa00:	2200      	movs	r2, #0
 801aa02:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 801aa04:	78fb      	ldrb	r3, [r7, #3]
 801aa06:	f003 030f 	and.w	r3, r3, #15
 801aa0a:	b2da      	uxtb	r2, r3
 801aa0c:	68fb      	ldr	r3, [r7, #12]
 801aa0e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 801aa10:	687b      	ldr	r3, [r7, #4]
 801aa12:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 801aa16:	2b01      	cmp	r3, #1
 801aa18:	d101      	bne.n	801aa1e <HAL_PCD_EP_Close+0x6e>
 801aa1a:	2302      	movs	r3, #2
 801aa1c:	e00e      	b.n	801aa3c <HAL_PCD_EP_Close+0x8c>
 801aa1e:	687b      	ldr	r3, [r7, #4]
 801aa20:	2201      	movs	r2, #1
 801aa22:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 801aa26:	687b      	ldr	r3, [r7, #4]
 801aa28:	681b      	ldr	r3, [r3, #0]
 801aa2a:	68f9      	ldr	r1, [r7, #12]
 801aa2c:	4618      	mov	r0, r3
 801aa2e:	f003 fd9b 	bl	801e568 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 801aa32:	687b      	ldr	r3, [r7, #4]
 801aa34:	2200      	movs	r2, #0
 801aa36:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 801aa3a:	2300      	movs	r3, #0
}
 801aa3c:	4618      	mov	r0, r3
 801aa3e:	3710      	adds	r7, #16
 801aa40:	46bd      	mov	sp, r7
 801aa42:	bd80      	pop	{r7, pc}

0801aa44 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 801aa44:	b580      	push	{r7, lr}
 801aa46:	b086      	sub	sp, #24
 801aa48:	af00      	add	r7, sp, #0
 801aa4a:	60f8      	str	r0, [r7, #12]
 801aa4c:	607a      	str	r2, [r7, #4]
 801aa4e:	603b      	str	r3, [r7, #0]
 801aa50:	460b      	mov	r3, r1
 801aa52:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 801aa54:	7afb      	ldrb	r3, [r7, #11]
 801aa56:	f003 020f 	and.w	r2, r3, #15
 801aa5a:	4613      	mov	r3, r2
 801aa5c:	00db      	lsls	r3, r3, #3
 801aa5e:	1a9b      	subs	r3, r3, r2
 801aa60:	009b      	lsls	r3, r3, #2
 801aa62:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 801aa66:	68fa      	ldr	r2, [r7, #12]
 801aa68:	4413      	add	r3, r2
 801aa6a:	3304      	adds	r3, #4
 801aa6c:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 801aa6e:	697b      	ldr	r3, [r7, #20]
 801aa70:	687a      	ldr	r2, [r7, #4]
 801aa72:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 801aa74:	697b      	ldr	r3, [r7, #20]
 801aa76:	683a      	ldr	r2, [r7, #0]
 801aa78:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 801aa7a:	697b      	ldr	r3, [r7, #20]
 801aa7c:	2200      	movs	r2, #0
 801aa7e:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 801aa80:	697b      	ldr	r3, [r7, #20]
 801aa82:	2200      	movs	r2, #0
 801aa84:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 801aa86:	7afb      	ldrb	r3, [r7, #11]
 801aa88:	f003 030f 	and.w	r3, r3, #15
 801aa8c:	b2da      	uxtb	r2, r3
 801aa8e:	697b      	ldr	r3, [r7, #20]
 801aa90:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 801aa92:	68fb      	ldr	r3, [r7, #12]
 801aa94:	691b      	ldr	r3, [r3, #16]
 801aa96:	2b01      	cmp	r3, #1
 801aa98:	d102      	bne.n	801aaa0 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 801aa9a:	687a      	ldr	r2, [r7, #4]
 801aa9c:	697b      	ldr	r3, [r7, #20]
 801aa9e:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 801aaa0:	7afb      	ldrb	r3, [r7, #11]
 801aaa2:	f003 030f 	and.w	r3, r3, #15
 801aaa6:	2b00      	cmp	r3, #0
 801aaa8:	d109      	bne.n	801aabe <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 801aaaa:	68fb      	ldr	r3, [r7, #12]
 801aaac:	6818      	ldr	r0, [r3, #0]
 801aaae:	68fb      	ldr	r3, [r7, #12]
 801aab0:	691b      	ldr	r3, [r3, #16]
 801aab2:	b2db      	uxtb	r3, r3
 801aab4:	461a      	mov	r2, r3
 801aab6:	6979      	ldr	r1, [r7, #20]
 801aab8:	f004 f876 	bl	801eba8 <USB_EP0StartXfer>
 801aabc:	e008      	b.n	801aad0 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 801aabe:	68fb      	ldr	r3, [r7, #12]
 801aac0:	6818      	ldr	r0, [r3, #0]
 801aac2:	68fb      	ldr	r3, [r7, #12]
 801aac4:	691b      	ldr	r3, [r3, #16]
 801aac6:	b2db      	uxtb	r3, r3
 801aac8:	461a      	mov	r2, r3
 801aaca:	6979      	ldr	r1, [r7, #20]
 801aacc:	f003 fe28 	bl	801e720 <USB_EPStartXfer>
  }

  return HAL_OK;
 801aad0:	2300      	movs	r3, #0
}
 801aad2:	4618      	mov	r0, r3
 801aad4:	3718      	adds	r7, #24
 801aad6:	46bd      	mov	sp, r7
 801aad8:	bd80      	pop	{r7, pc}

0801aada <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 801aada:	b480      	push	{r7}
 801aadc:	b083      	sub	sp, #12
 801aade:	af00      	add	r7, sp, #0
 801aae0:	6078      	str	r0, [r7, #4]
 801aae2:	460b      	mov	r3, r1
 801aae4:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 801aae6:	78fb      	ldrb	r3, [r7, #3]
 801aae8:	f003 020f 	and.w	r2, r3, #15
 801aaec:	6879      	ldr	r1, [r7, #4]
 801aaee:	4613      	mov	r3, r2
 801aaf0:	00db      	lsls	r3, r3, #3
 801aaf2:	1a9b      	subs	r3, r3, r2
 801aaf4:	009b      	lsls	r3, r3, #2
 801aaf6:	440b      	add	r3, r1
 801aaf8:	f503 7305 	add.w	r3, r3, #532	; 0x214
 801aafc:	681b      	ldr	r3, [r3, #0]
}
 801aafe:	4618      	mov	r0, r3
 801ab00:	370c      	adds	r7, #12
 801ab02:	46bd      	mov	sp, r7
 801ab04:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ab08:	4770      	bx	lr

0801ab0a <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 801ab0a:	b580      	push	{r7, lr}
 801ab0c:	b086      	sub	sp, #24
 801ab0e:	af00      	add	r7, sp, #0
 801ab10:	60f8      	str	r0, [r7, #12]
 801ab12:	607a      	str	r2, [r7, #4]
 801ab14:	603b      	str	r3, [r7, #0]
 801ab16:	460b      	mov	r3, r1
 801ab18:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 801ab1a:	7afb      	ldrb	r3, [r7, #11]
 801ab1c:	f003 020f 	and.w	r2, r3, #15
 801ab20:	4613      	mov	r3, r2
 801ab22:	00db      	lsls	r3, r3, #3
 801ab24:	1a9b      	subs	r3, r3, r2
 801ab26:	009b      	lsls	r3, r3, #2
 801ab28:	3338      	adds	r3, #56	; 0x38
 801ab2a:	68fa      	ldr	r2, [r7, #12]
 801ab2c:	4413      	add	r3, r2
 801ab2e:	3304      	adds	r3, #4
 801ab30:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 801ab32:	697b      	ldr	r3, [r7, #20]
 801ab34:	687a      	ldr	r2, [r7, #4]
 801ab36:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 801ab38:	697b      	ldr	r3, [r7, #20]
 801ab3a:	683a      	ldr	r2, [r7, #0]
 801ab3c:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 801ab3e:	697b      	ldr	r3, [r7, #20]
 801ab40:	2200      	movs	r2, #0
 801ab42:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 801ab44:	697b      	ldr	r3, [r7, #20]
 801ab46:	2201      	movs	r2, #1
 801ab48:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 801ab4a:	7afb      	ldrb	r3, [r7, #11]
 801ab4c:	f003 030f 	and.w	r3, r3, #15
 801ab50:	b2da      	uxtb	r2, r3
 801ab52:	697b      	ldr	r3, [r7, #20]
 801ab54:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 801ab56:	68fb      	ldr	r3, [r7, #12]
 801ab58:	691b      	ldr	r3, [r3, #16]
 801ab5a:	2b01      	cmp	r3, #1
 801ab5c:	d102      	bne.n	801ab64 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 801ab5e:	687a      	ldr	r2, [r7, #4]
 801ab60:	697b      	ldr	r3, [r7, #20]
 801ab62:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 801ab64:	7afb      	ldrb	r3, [r7, #11]
 801ab66:	f003 030f 	and.w	r3, r3, #15
 801ab6a:	2b00      	cmp	r3, #0
 801ab6c:	d109      	bne.n	801ab82 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 801ab6e:	68fb      	ldr	r3, [r7, #12]
 801ab70:	6818      	ldr	r0, [r3, #0]
 801ab72:	68fb      	ldr	r3, [r7, #12]
 801ab74:	691b      	ldr	r3, [r3, #16]
 801ab76:	b2db      	uxtb	r3, r3
 801ab78:	461a      	mov	r2, r3
 801ab7a:	6979      	ldr	r1, [r7, #20]
 801ab7c:	f004 f814 	bl	801eba8 <USB_EP0StartXfer>
 801ab80:	e008      	b.n	801ab94 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 801ab82:	68fb      	ldr	r3, [r7, #12]
 801ab84:	6818      	ldr	r0, [r3, #0]
 801ab86:	68fb      	ldr	r3, [r7, #12]
 801ab88:	691b      	ldr	r3, [r3, #16]
 801ab8a:	b2db      	uxtb	r3, r3
 801ab8c:	461a      	mov	r2, r3
 801ab8e:	6979      	ldr	r1, [r7, #20]
 801ab90:	f003 fdc6 	bl	801e720 <USB_EPStartXfer>
  }

  return HAL_OK;
 801ab94:	2300      	movs	r3, #0
}
 801ab96:	4618      	mov	r0, r3
 801ab98:	3718      	adds	r7, #24
 801ab9a:	46bd      	mov	sp, r7
 801ab9c:	bd80      	pop	{r7, pc}

0801ab9e <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 801ab9e:	b580      	push	{r7, lr}
 801aba0:	b084      	sub	sp, #16
 801aba2:	af00      	add	r7, sp, #0
 801aba4:	6078      	str	r0, [r7, #4]
 801aba6:	460b      	mov	r3, r1
 801aba8:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 801abaa:	78fb      	ldrb	r3, [r7, #3]
 801abac:	f003 020f 	and.w	r2, r3, #15
 801abb0:	687b      	ldr	r3, [r7, #4]
 801abb2:	685b      	ldr	r3, [r3, #4]
 801abb4:	429a      	cmp	r2, r3
 801abb6:	d901      	bls.n	801abbc <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 801abb8:	2301      	movs	r3, #1
 801abba:	e050      	b.n	801ac5e <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 801abbc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 801abc0:	2b00      	cmp	r3, #0
 801abc2:	da0f      	bge.n	801abe4 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 801abc4:	78fb      	ldrb	r3, [r7, #3]
 801abc6:	f003 020f 	and.w	r2, r3, #15
 801abca:	4613      	mov	r3, r2
 801abcc:	00db      	lsls	r3, r3, #3
 801abce:	1a9b      	subs	r3, r3, r2
 801abd0:	009b      	lsls	r3, r3, #2
 801abd2:	3338      	adds	r3, #56	; 0x38
 801abd4:	687a      	ldr	r2, [r7, #4]
 801abd6:	4413      	add	r3, r2
 801abd8:	3304      	adds	r3, #4
 801abda:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 801abdc:	68fb      	ldr	r3, [r7, #12]
 801abde:	2201      	movs	r2, #1
 801abe0:	705a      	strb	r2, [r3, #1]
 801abe2:	e00d      	b.n	801ac00 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 801abe4:	78fa      	ldrb	r2, [r7, #3]
 801abe6:	4613      	mov	r3, r2
 801abe8:	00db      	lsls	r3, r3, #3
 801abea:	1a9b      	subs	r3, r3, r2
 801abec:	009b      	lsls	r3, r3, #2
 801abee:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 801abf2:	687a      	ldr	r2, [r7, #4]
 801abf4:	4413      	add	r3, r2
 801abf6:	3304      	adds	r3, #4
 801abf8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 801abfa:	68fb      	ldr	r3, [r7, #12]
 801abfc:	2200      	movs	r2, #0
 801abfe:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 801ac00:	68fb      	ldr	r3, [r7, #12]
 801ac02:	2201      	movs	r2, #1
 801ac04:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 801ac06:	78fb      	ldrb	r3, [r7, #3]
 801ac08:	f003 030f 	and.w	r3, r3, #15
 801ac0c:	b2da      	uxtb	r2, r3
 801ac0e:	68fb      	ldr	r3, [r7, #12]
 801ac10:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 801ac12:	687b      	ldr	r3, [r7, #4]
 801ac14:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 801ac18:	2b01      	cmp	r3, #1
 801ac1a:	d101      	bne.n	801ac20 <HAL_PCD_EP_SetStall+0x82>
 801ac1c:	2302      	movs	r3, #2
 801ac1e:	e01e      	b.n	801ac5e <HAL_PCD_EP_SetStall+0xc0>
 801ac20:	687b      	ldr	r3, [r7, #4]
 801ac22:	2201      	movs	r2, #1
 801ac24:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 801ac28:	687b      	ldr	r3, [r7, #4]
 801ac2a:	681b      	ldr	r3, [r3, #0]
 801ac2c:	68f9      	ldr	r1, [r7, #12]
 801ac2e:	4618      	mov	r0, r3
 801ac30:	f004 f9a3 	bl	801ef7a <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 801ac34:	78fb      	ldrb	r3, [r7, #3]
 801ac36:	f003 030f 	and.w	r3, r3, #15
 801ac3a:	2b00      	cmp	r3, #0
 801ac3c:	d10a      	bne.n	801ac54 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 801ac3e:	687b      	ldr	r3, [r7, #4]
 801ac40:	6818      	ldr	r0, [r3, #0]
 801ac42:	687b      	ldr	r3, [r7, #4]
 801ac44:	691b      	ldr	r3, [r3, #16]
 801ac46:	b2d9      	uxtb	r1, r3
 801ac48:	687b      	ldr	r3, [r7, #4]
 801ac4a:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 801ac4e:	461a      	mov	r2, r3
 801ac50:	f004 fb94 	bl	801f37c <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 801ac54:	687b      	ldr	r3, [r7, #4]
 801ac56:	2200      	movs	r2, #0
 801ac58:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 801ac5c:	2300      	movs	r3, #0
}
 801ac5e:	4618      	mov	r0, r3
 801ac60:	3710      	adds	r7, #16
 801ac62:	46bd      	mov	sp, r7
 801ac64:	bd80      	pop	{r7, pc}

0801ac66 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 801ac66:	b580      	push	{r7, lr}
 801ac68:	b084      	sub	sp, #16
 801ac6a:	af00      	add	r7, sp, #0
 801ac6c:	6078      	str	r0, [r7, #4]
 801ac6e:	460b      	mov	r3, r1
 801ac70:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 801ac72:	78fb      	ldrb	r3, [r7, #3]
 801ac74:	f003 020f 	and.w	r2, r3, #15
 801ac78:	687b      	ldr	r3, [r7, #4]
 801ac7a:	685b      	ldr	r3, [r3, #4]
 801ac7c:	429a      	cmp	r2, r3
 801ac7e:	d901      	bls.n	801ac84 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 801ac80:	2301      	movs	r3, #1
 801ac82:	e042      	b.n	801ad0a <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 801ac84:	f997 3003 	ldrsb.w	r3, [r7, #3]
 801ac88:	2b00      	cmp	r3, #0
 801ac8a:	da0f      	bge.n	801acac <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 801ac8c:	78fb      	ldrb	r3, [r7, #3]
 801ac8e:	f003 020f 	and.w	r2, r3, #15
 801ac92:	4613      	mov	r3, r2
 801ac94:	00db      	lsls	r3, r3, #3
 801ac96:	1a9b      	subs	r3, r3, r2
 801ac98:	009b      	lsls	r3, r3, #2
 801ac9a:	3338      	adds	r3, #56	; 0x38
 801ac9c:	687a      	ldr	r2, [r7, #4]
 801ac9e:	4413      	add	r3, r2
 801aca0:	3304      	adds	r3, #4
 801aca2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 801aca4:	68fb      	ldr	r3, [r7, #12]
 801aca6:	2201      	movs	r2, #1
 801aca8:	705a      	strb	r2, [r3, #1]
 801acaa:	e00f      	b.n	801accc <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 801acac:	78fb      	ldrb	r3, [r7, #3]
 801acae:	f003 020f 	and.w	r2, r3, #15
 801acb2:	4613      	mov	r3, r2
 801acb4:	00db      	lsls	r3, r3, #3
 801acb6:	1a9b      	subs	r3, r3, r2
 801acb8:	009b      	lsls	r3, r3, #2
 801acba:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 801acbe:	687a      	ldr	r2, [r7, #4]
 801acc0:	4413      	add	r3, r2
 801acc2:	3304      	adds	r3, #4
 801acc4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 801acc6:	68fb      	ldr	r3, [r7, #12]
 801acc8:	2200      	movs	r2, #0
 801acca:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 801accc:	68fb      	ldr	r3, [r7, #12]
 801acce:	2200      	movs	r2, #0
 801acd0:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 801acd2:	78fb      	ldrb	r3, [r7, #3]
 801acd4:	f003 030f 	and.w	r3, r3, #15
 801acd8:	b2da      	uxtb	r2, r3
 801acda:	68fb      	ldr	r3, [r7, #12]
 801acdc:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 801acde:	687b      	ldr	r3, [r7, #4]
 801ace0:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 801ace4:	2b01      	cmp	r3, #1
 801ace6:	d101      	bne.n	801acec <HAL_PCD_EP_ClrStall+0x86>
 801ace8:	2302      	movs	r3, #2
 801acea:	e00e      	b.n	801ad0a <HAL_PCD_EP_ClrStall+0xa4>
 801acec:	687b      	ldr	r3, [r7, #4]
 801acee:	2201      	movs	r2, #1
 801acf0:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 801acf4:	687b      	ldr	r3, [r7, #4]
 801acf6:	681b      	ldr	r3, [r3, #0]
 801acf8:	68f9      	ldr	r1, [r7, #12]
 801acfa:	4618      	mov	r0, r3
 801acfc:	f004 f9ab 	bl	801f056 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 801ad00:	687b      	ldr	r3, [r7, #4]
 801ad02:	2200      	movs	r2, #0
 801ad04:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 801ad08:	2300      	movs	r3, #0
}
 801ad0a:	4618      	mov	r0, r3
 801ad0c:	3710      	adds	r7, #16
 801ad0e:	46bd      	mov	sp, r7
 801ad10:	bd80      	pop	{r7, pc}

0801ad12 <HAL_PCD_EP_Flush>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Flush(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 801ad12:	b580      	push	{r7, lr}
 801ad14:	b082      	sub	sp, #8
 801ad16:	af00      	add	r7, sp, #0
 801ad18:	6078      	str	r0, [r7, #4]
 801ad1a:	460b      	mov	r3, r1
 801ad1c:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 801ad1e:	687b      	ldr	r3, [r7, #4]
 801ad20:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 801ad24:	2b01      	cmp	r3, #1
 801ad26:	d101      	bne.n	801ad2c <HAL_PCD_EP_Flush+0x1a>
 801ad28:	2302      	movs	r3, #2
 801ad2a:	e01b      	b.n	801ad64 <HAL_PCD_EP_Flush+0x52>
 801ad2c:	687b      	ldr	r3, [r7, #4]
 801ad2e:	2201      	movs	r2, #1
 801ad30:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  if ((ep_addr & 0x80U) == 0x80U)
 801ad34:	f997 3003 	ldrsb.w	r3, [r7, #3]
 801ad38:	2b00      	cmp	r3, #0
 801ad3a:	da09      	bge.n	801ad50 <HAL_PCD_EP_Flush+0x3e>
  {
    (void)USB_FlushTxFifo(hpcd->Instance, (uint32_t)ep_addr & EP_ADDR_MSK);
 801ad3c:	687b      	ldr	r3, [r7, #4]
 801ad3e:	681a      	ldr	r2, [r3, #0]
 801ad40:	78fb      	ldrb	r3, [r7, #3]
 801ad42:	f003 030f 	and.w	r3, r3, #15
 801ad46:	4619      	mov	r1, r3
 801ad48:	4610      	mov	r0, r2
 801ad4a:	f003 fb03 	bl	801e354 <USB_FlushTxFifo>
 801ad4e:	e004      	b.n	801ad5a <HAL_PCD_EP_Flush+0x48>
  }
  else
  {
    (void)USB_FlushRxFifo(hpcd->Instance);
 801ad50:	687b      	ldr	r3, [r7, #4]
 801ad52:	681b      	ldr	r3, [r3, #0]
 801ad54:	4618      	mov	r0, r3
 801ad56:	f003 fb21 	bl	801e39c <USB_FlushRxFifo>
  }

  __HAL_UNLOCK(hpcd);
 801ad5a:	687b      	ldr	r3, [r7, #4]
 801ad5c:	2200      	movs	r2, #0
 801ad5e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 801ad62:	2300      	movs	r3, #0
}
 801ad64:	4618      	mov	r0, r3
 801ad66:	3708      	adds	r7, #8
 801ad68:	46bd      	mov	sp, r7
 801ad6a:	bd80      	pop	{r7, pc}

0801ad6c <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 801ad6c:	b580      	push	{r7, lr}
 801ad6e:	b08a      	sub	sp, #40	; 0x28
 801ad70:	af02      	add	r7, sp, #8
 801ad72:	6078      	str	r0, [r7, #4]
 801ad74:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 801ad76:	687b      	ldr	r3, [r7, #4]
 801ad78:	681b      	ldr	r3, [r3, #0]
 801ad7a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801ad7c:	697b      	ldr	r3, [r7, #20]
 801ad7e:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 801ad80:	683a      	ldr	r2, [r7, #0]
 801ad82:	4613      	mov	r3, r2
 801ad84:	00db      	lsls	r3, r3, #3
 801ad86:	1a9b      	subs	r3, r3, r2
 801ad88:	009b      	lsls	r3, r3, #2
 801ad8a:	3338      	adds	r3, #56	; 0x38
 801ad8c:	687a      	ldr	r2, [r7, #4]
 801ad8e:	4413      	add	r3, r2
 801ad90:	3304      	adds	r3, #4
 801ad92:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 801ad94:	68fb      	ldr	r3, [r7, #12]
 801ad96:	699a      	ldr	r2, [r3, #24]
 801ad98:	68fb      	ldr	r3, [r7, #12]
 801ad9a:	695b      	ldr	r3, [r3, #20]
 801ad9c:	429a      	cmp	r2, r3
 801ad9e:	d901      	bls.n	801ada4 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 801ada0:	2301      	movs	r3, #1
 801ada2:	e06c      	b.n	801ae7e <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 801ada4:	68fb      	ldr	r3, [r7, #12]
 801ada6:	695a      	ldr	r2, [r3, #20]
 801ada8:	68fb      	ldr	r3, [r7, #12]
 801adaa:	699b      	ldr	r3, [r3, #24]
 801adac:	1ad3      	subs	r3, r2, r3
 801adae:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 801adb0:	68fb      	ldr	r3, [r7, #12]
 801adb2:	689b      	ldr	r3, [r3, #8]
 801adb4:	69fa      	ldr	r2, [r7, #28]
 801adb6:	429a      	cmp	r2, r3
 801adb8:	d902      	bls.n	801adc0 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 801adba:	68fb      	ldr	r3, [r7, #12]
 801adbc:	689b      	ldr	r3, [r3, #8]
 801adbe:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 801adc0:	69fb      	ldr	r3, [r7, #28]
 801adc2:	3303      	adds	r3, #3
 801adc4:	089b      	lsrs	r3, r3, #2
 801adc6:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 801adc8:	e02b      	b.n	801ae22 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 801adca:	68fb      	ldr	r3, [r7, #12]
 801adcc:	695a      	ldr	r2, [r3, #20]
 801adce:	68fb      	ldr	r3, [r7, #12]
 801add0:	699b      	ldr	r3, [r3, #24]
 801add2:	1ad3      	subs	r3, r2, r3
 801add4:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 801add6:	68fb      	ldr	r3, [r7, #12]
 801add8:	689b      	ldr	r3, [r3, #8]
 801adda:	69fa      	ldr	r2, [r7, #28]
 801addc:	429a      	cmp	r2, r3
 801adde:	d902      	bls.n	801ade6 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 801ade0:	68fb      	ldr	r3, [r7, #12]
 801ade2:	689b      	ldr	r3, [r3, #8]
 801ade4:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 801ade6:	69fb      	ldr	r3, [r7, #28]
 801ade8:	3303      	adds	r3, #3
 801adea:	089b      	lsrs	r3, r3, #2
 801adec:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 801adee:	68fb      	ldr	r3, [r7, #12]
 801adf0:	68d9      	ldr	r1, [r3, #12]
 801adf2:	683b      	ldr	r3, [r7, #0]
 801adf4:	b2da      	uxtb	r2, r3
 801adf6:	69fb      	ldr	r3, [r7, #28]
 801adf8:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 801adfa:	687b      	ldr	r3, [r7, #4]
 801adfc:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 801adfe:	b2db      	uxtb	r3, r3
 801ae00:	9300      	str	r3, [sp, #0]
 801ae02:	4603      	mov	r3, r0
 801ae04:	6978      	ldr	r0, [r7, #20]
 801ae06:	f004 f822 	bl	801ee4e <USB_WritePacket>

    ep->xfer_buff  += len;
 801ae0a:	68fb      	ldr	r3, [r7, #12]
 801ae0c:	68da      	ldr	r2, [r3, #12]
 801ae0e:	69fb      	ldr	r3, [r7, #28]
 801ae10:	441a      	add	r2, r3
 801ae12:	68fb      	ldr	r3, [r7, #12]
 801ae14:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 801ae16:	68fb      	ldr	r3, [r7, #12]
 801ae18:	699a      	ldr	r2, [r3, #24]
 801ae1a:	69fb      	ldr	r3, [r7, #28]
 801ae1c:	441a      	add	r2, r3
 801ae1e:	68fb      	ldr	r3, [r7, #12]
 801ae20:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 801ae22:	683b      	ldr	r3, [r7, #0]
 801ae24:	015a      	lsls	r2, r3, #5
 801ae26:	693b      	ldr	r3, [r7, #16]
 801ae28:	4413      	add	r3, r2
 801ae2a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801ae2e:	699b      	ldr	r3, [r3, #24]
 801ae30:	b29b      	uxth	r3, r3
 801ae32:	69ba      	ldr	r2, [r7, #24]
 801ae34:	429a      	cmp	r2, r3
 801ae36:	d809      	bhi.n	801ae4c <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 801ae38:	68fb      	ldr	r3, [r7, #12]
 801ae3a:	699a      	ldr	r2, [r3, #24]
 801ae3c:	68fb      	ldr	r3, [r7, #12]
 801ae3e:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 801ae40:	429a      	cmp	r2, r3
 801ae42:	d203      	bcs.n	801ae4c <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 801ae44:	68fb      	ldr	r3, [r7, #12]
 801ae46:	695b      	ldr	r3, [r3, #20]
 801ae48:	2b00      	cmp	r3, #0
 801ae4a:	d1be      	bne.n	801adca <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 801ae4c:	68fb      	ldr	r3, [r7, #12]
 801ae4e:	695a      	ldr	r2, [r3, #20]
 801ae50:	68fb      	ldr	r3, [r7, #12]
 801ae52:	699b      	ldr	r3, [r3, #24]
 801ae54:	429a      	cmp	r2, r3
 801ae56:	d811      	bhi.n	801ae7c <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 801ae58:	683b      	ldr	r3, [r7, #0]
 801ae5a:	f003 030f 	and.w	r3, r3, #15
 801ae5e:	2201      	movs	r2, #1
 801ae60:	fa02 f303 	lsl.w	r3, r2, r3
 801ae64:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 801ae66:	693b      	ldr	r3, [r7, #16]
 801ae68:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801ae6c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 801ae6e:	68bb      	ldr	r3, [r7, #8]
 801ae70:	43db      	mvns	r3, r3
 801ae72:	6939      	ldr	r1, [r7, #16]
 801ae74:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 801ae78:	4013      	ands	r3, r2
 801ae7a:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 801ae7c:	2300      	movs	r3, #0
}
 801ae7e:	4618      	mov	r0, r3
 801ae80:	3720      	adds	r7, #32
 801ae82:	46bd      	mov	sp, r7
 801ae84:	bd80      	pop	{r7, pc}
	...

0801ae88 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 801ae88:	b580      	push	{r7, lr}
 801ae8a:	b086      	sub	sp, #24
 801ae8c:	af00      	add	r7, sp, #0
 801ae8e:	6078      	str	r0, [r7, #4]
 801ae90:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 801ae92:	687b      	ldr	r3, [r7, #4]
 801ae94:	681b      	ldr	r3, [r3, #0]
 801ae96:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801ae98:	697b      	ldr	r3, [r7, #20]
 801ae9a:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 801ae9c:	697b      	ldr	r3, [r7, #20]
 801ae9e:	333c      	adds	r3, #60	; 0x3c
 801aea0:	3304      	adds	r3, #4
 801aea2:	681b      	ldr	r3, [r3, #0]
 801aea4:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 801aea6:	683b      	ldr	r3, [r7, #0]
 801aea8:	015a      	lsls	r2, r3, #5
 801aeaa:	693b      	ldr	r3, [r7, #16]
 801aeac:	4413      	add	r3, r2
 801aeae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801aeb2:	689b      	ldr	r3, [r3, #8]
 801aeb4:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 801aeb6:	687b      	ldr	r3, [r7, #4]
 801aeb8:	691b      	ldr	r3, [r3, #16]
 801aeba:	2b01      	cmp	r3, #1
 801aebc:	f040 80a0 	bne.w	801b000 <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 801aec0:	68bb      	ldr	r3, [r7, #8]
 801aec2:	f003 0308 	and.w	r3, r3, #8
 801aec6:	2b00      	cmp	r3, #0
 801aec8:	d015      	beq.n	801aef6 <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 801aeca:	68fb      	ldr	r3, [r7, #12]
 801aecc:	4a72      	ldr	r2, [pc, #456]	; (801b098 <PCD_EP_OutXfrComplete_int+0x210>)
 801aece:	4293      	cmp	r3, r2
 801aed0:	f240 80dd 	bls.w	801b08e <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 801aed4:	68bb      	ldr	r3, [r7, #8]
 801aed6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 801aeda:	2b00      	cmp	r3, #0
 801aedc:	f000 80d7 	beq.w	801b08e <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 801aee0:	683b      	ldr	r3, [r7, #0]
 801aee2:	015a      	lsls	r2, r3, #5
 801aee4:	693b      	ldr	r3, [r7, #16]
 801aee6:	4413      	add	r3, r2
 801aee8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801aeec:	461a      	mov	r2, r3
 801aeee:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 801aef2:	6093      	str	r3, [r2, #8]
 801aef4:	e0cb      	b.n	801b08e <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 801aef6:	68bb      	ldr	r3, [r7, #8]
 801aef8:	f003 0320 	and.w	r3, r3, #32
 801aefc:	2b00      	cmp	r3, #0
 801aefe:	d009      	beq.n	801af14 <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 801af00:	683b      	ldr	r3, [r7, #0]
 801af02:	015a      	lsls	r2, r3, #5
 801af04:	693b      	ldr	r3, [r7, #16]
 801af06:	4413      	add	r3, r2
 801af08:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801af0c:	461a      	mov	r2, r3
 801af0e:	2320      	movs	r3, #32
 801af10:	6093      	str	r3, [r2, #8]
 801af12:	e0bc      	b.n	801b08e <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 801af14:	68bb      	ldr	r3, [r7, #8]
 801af16:	f003 0328 	and.w	r3, r3, #40	; 0x28
 801af1a:	2b00      	cmp	r3, #0
 801af1c:	f040 80b7 	bne.w	801b08e <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 801af20:	68fb      	ldr	r3, [r7, #12]
 801af22:	4a5d      	ldr	r2, [pc, #372]	; (801b098 <PCD_EP_OutXfrComplete_int+0x210>)
 801af24:	4293      	cmp	r3, r2
 801af26:	d90f      	bls.n	801af48 <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 801af28:	68bb      	ldr	r3, [r7, #8]
 801af2a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 801af2e:	2b00      	cmp	r3, #0
 801af30:	d00a      	beq.n	801af48 <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 801af32:	683b      	ldr	r3, [r7, #0]
 801af34:	015a      	lsls	r2, r3, #5
 801af36:	693b      	ldr	r3, [r7, #16]
 801af38:	4413      	add	r3, r2
 801af3a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801af3e:	461a      	mov	r2, r3
 801af40:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 801af44:	6093      	str	r3, [r2, #8]
 801af46:	e0a2      	b.n	801b08e <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 801af48:	6879      	ldr	r1, [r7, #4]
 801af4a:	683a      	ldr	r2, [r7, #0]
 801af4c:	4613      	mov	r3, r2
 801af4e:	00db      	lsls	r3, r3, #3
 801af50:	1a9b      	subs	r3, r3, r2
 801af52:	009b      	lsls	r3, r3, #2
 801af54:	440b      	add	r3, r1
 801af56:	f503 7301 	add.w	r3, r3, #516	; 0x204
 801af5a:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 801af5c:	683b      	ldr	r3, [r7, #0]
 801af5e:	0159      	lsls	r1, r3, #5
 801af60:	693b      	ldr	r3, [r7, #16]
 801af62:	440b      	add	r3, r1
 801af64:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801af68:	691b      	ldr	r3, [r3, #16]
 801af6a:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 801af6e:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 801af70:	6878      	ldr	r0, [r7, #4]
 801af72:	683a      	ldr	r2, [r7, #0]
 801af74:	4613      	mov	r3, r2
 801af76:	00db      	lsls	r3, r3, #3
 801af78:	1a9b      	subs	r3, r3, r2
 801af7a:	009b      	lsls	r3, r3, #2
 801af7c:	4403      	add	r3, r0
 801af7e:	f503 7305 	add.w	r3, r3, #532	; 0x214
 801af82:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 801af84:	6879      	ldr	r1, [r7, #4]
 801af86:	683a      	ldr	r2, [r7, #0]
 801af88:	4613      	mov	r3, r2
 801af8a:	00db      	lsls	r3, r3, #3
 801af8c:	1a9b      	subs	r3, r3, r2
 801af8e:	009b      	lsls	r3, r3, #2
 801af90:	440b      	add	r3, r1
 801af92:	f503 7302 	add.w	r3, r3, #520	; 0x208
 801af96:	6819      	ldr	r1, [r3, #0]
 801af98:	6878      	ldr	r0, [r7, #4]
 801af9a:	683a      	ldr	r2, [r7, #0]
 801af9c:	4613      	mov	r3, r2
 801af9e:	00db      	lsls	r3, r3, #3
 801afa0:	1a9b      	subs	r3, r3, r2
 801afa2:	009b      	lsls	r3, r3, #2
 801afa4:	4403      	add	r3, r0
 801afa6:	f503 7301 	add.w	r3, r3, #516	; 0x204
 801afaa:	681b      	ldr	r3, [r3, #0]
 801afac:	4419      	add	r1, r3
 801afae:	6878      	ldr	r0, [r7, #4]
 801afb0:	683a      	ldr	r2, [r7, #0]
 801afb2:	4613      	mov	r3, r2
 801afb4:	00db      	lsls	r3, r3, #3
 801afb6:	1a9b      	subs	r3, r3, r2
 801afb8:	009b      	lsls	r3, r3, #2
 801afba:	4403      	add	r3, r0
 801afbc:	f503 7302 	add.w	r3, r3, #520	; 0x208
 801afc0:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 801afc2:	683b      	ldr	r3, [r7, #0]
 801afc4:	2b00      	cmp	r3, #0
 801afc6:	d114      	bne.n	801aff2 <PCD_EP_OutXfrComplete_int+0x16a>
 801afc8:	6879      	ldr	r1, [r7, #4]
 801afca:	683a      	ldr	r2, [r7, #0]
 801afcc:	4613      	mov	r3, r2
 801afce:	00db      	lsls	r3, r3, #3
 801afd0:	1a9b      	subs	r3, r3, r2
 801afd2:	009b      	lsls	r3, r3, #2
 801afd4:	440b      	add	r3, r1
 801afd6:	f503 7304 	add.w	r3, r3, #528	; 0x210
 801afda:	681b      	ldr	r3, [r3, #0]
 801afdc:	2b00      	cmp	r3, #0
 801afde:	d108      	bne.n	801aff2 <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 801afe0:	687b      	ldr	r3, [r7, #4]
 801afe2:	6818      	ldr	r0, [r3, #0]
 801afe4:	687b      	ldr	r3, [r7, #4]
 801afe6:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 801afea:	461a      	mov	r2, r3
 801afec:	2101      	movs	r1, #1
 801afee:	f004 f9c5 	bl	801f37c <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 801aff2:	683b      	ldr	r3, [r7, #0]
 801aff4:	b2db      	uxtb	r3, r3
 801aff6:	4619      	mov	r1, r3
 801aff8:	6878      	ldr	r0, [r7, #4]
 801affa:	f007 fbef 	bl	80227dc <HAL_PCD_DataOutStageCallback>
 801affe:	e046      	b.n	801b08e <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 801b000:	68fb      	ldr	r3, [r7, #12]
 801b002:	4a26      	ldr	r2, [pc, #152]	; (801b09c <PCD_EP_OutXfrComplete_int+0x214>)
 801b004:	4293      	cmp	r3, r2
 801b006:	d124      	bne.n	801b052 <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 801b008:	68bb      	ldr	r3, [r7, #8]
 801b00a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 801b00e:	2b00      	cmp	r3, #0
 801b010:	d00a      	beq.n	801b028 <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 801b012:	683b      	ldr	r3, [r7, #0]
 801b014:	015a      	lsls	r2, r3, #5
 801b016:	693b      	ldr	r3, [r7, #16]
 801b018:	4413      	add	r3, r2
 801b01a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801b01e:	461a      	mov	r2, r3
 801b020:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 801b024:	6093      	str	r3, [r2, #8]
 801b026:	e032      	b.n	801b08e <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 801b028:	68bb      	ldr	r3, [r7, #8]
 801b02a:	f003 0320 	and.w	r3, r3, #32
 801b02e:	2b00      	cmp	r3, #0
 801b030:	d008      	beq.n	801b044 <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 801b032:	683b      	ldr	r3, [r7, #0]
 801b034:	015a      	lsls	r2, r3, #5
 801b036:	693b      	ldr	r3, [r7, #16]
 801b038:	4413      	add	r3, r2
 801b03a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801b03e:	461a      	mov	r2, r3
 801b040:	2320      	movs	r3, #32
 801b042:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 801b044:	683b      	ldr	r3, [r7, #0]
 801b046:	b2db      	uxtb	r3, r3
 801b048:	4619      	mov	r1, r3
 801b04a:	6878      	ldr	r0, [r7, #4]
 801b04c:	f007 fbc6 	bl	80227dc <HAL_PCD_DataOutStageCallback>
 801b050:	e01d      	b.n	801b08e <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 801b052:	683b      	ldr	r3, [r7, #0]
 801b054:	2b00      	cmp	r3, #0
 801b056:	d114      	bne.n	801b082 <PCD_EP_OutXfrComplete_int+0x1fa>
 801b058:	6879      	ldr	r1, [r7, #4]
 801b05a:	683a      	ldr	r2, [r7, #0]
 801b05c:	4613      	mov	r3, r2
 801b05e:	00db      	lsls	r3, r3, #3
 801b060:	1a9b      	subs	r3, r3, r2
 801b062:	009b      	lsls	r3, r3, #2
 801b064:	440b      	add	r3, r1
 801b066:	f503 7304 	add.w	r3, r3, #528	; 0x210
 801b06a:	681b      	ldr	r3, [r3, #0]
 801b06c:	2b00      	cmp	r3, #0
 801b06e:	d108      	bne.n	801b082 <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 801b070:	687b      	ldr	r3, [r7, #4]
 801b072:	6818      	ldr	r0, [r3, #0]
 801b074:	687b      	ldr	r3, [r7, #4]
 801b076:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 801b07a:	461a      	mov	r2, r3
 801b07c:	2100      	movs	r1, #0
 801b07e:	f004 f97d 	bl	801f37c <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 801b082:	683b      	ldr	r3, [r7, #0]
 801b084:	b2db      	uxtb	r3, r3
 801b086:	4619      	mov	r1, r3
 801b088:	6878      	ldr	r0, [r7, #4]
 801b08a:	f007 fba7 	bl	80227dc <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 801b08e:	2300      	movs	r3, #0
}
 801b090:	4618      	mov	r0, r3
 801b092:	3718      	adds	r7, #24
 801b094:	46bd      	mov	sp, r7
 801b096:	bd80      	pop	{r7, pc}
 801b098:	4f54300a 	.word	0x4f54300a
 801b09c:	4f54310a 	.word	0x4f54310a

0801b0a0 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 801b0a0:	b580      	push	{r7, lr}
 801b0a2:	b086      	sub	sp, #24
 801b0a4:	af00      	add	r7, sp, #0
 801b0a6:	6078      	str	r0, [r7, #4]
 801b0a8:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 801b0aa:	687b      	ldr	r3, [r7, #4]
 801b0ac:	681b      	ldr	r3, [r3, #0]
 801b0ae:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801b0b0:	697b      	ldr	r3, [r7, #20]
 801b0b2:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 801b0b4:	697b      	ldr	r3, [r7, #20]
 801b0b6:	333c      	adds	r3, #60	; 0x3c
 801b0b8:	3304      	adds	r3, #4
 801b0ba:	681b      	ldr	r3, [r3, #0]
 801b0bc:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 801b0be:	683b      	ldr	r3, [r7, #0]
 801b0c0:	015a      	lsls	r2, r3, #5
 801b0c2:	693b      	ldr	r3, [r7, #16]
 801b0c4:	4413      	add	r3, r2
 801b0c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801b0ca:	689b      	ldr	r3, [r3, #8]
 801b0cc:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 801b0ce:	68fb      	ldr	r3, [r7, #12]
 801b0d0:	4a15      	ldr	r2, [pc, #84]	; (801b128 <PCD_EP_OutSetupPacket_int+0x88>)
 801b0d2:	4293      	cmp	r3, r2
 801b0d4:	d90e      	bls.n	801b0f4 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 801b0d6:	68bb      	ldr	r3, [r7, #8]
 801b0d8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 801b0dc:	2b00      	cmp	r3, #0
 801b0de:	d009      	beq.n	801b0f4 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 801b0e0:	683b      	ldr	r3, [r7, #0]
 801b0e2:	015a      	lsls	r2, r3, #5
 801b0e4:	693b      	ldr	r3, [r7, #16]
 801b0e6:	4413      	add	r3, r2
 801b0e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801b0ec:	461a      	mov	r2, r3
 801b0ee:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 801b0f2:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 801b0f4:	6878      	ldr	r0, [r7, #4]
 801b0f6:	f007 fb5f 	bl	80227b8 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 801b0fa:	68fb      	ldr	r3, [r7, #12]
 801b0fc:	4a0a      	ldr	r2, [pc, #40]	; (801b128 <PCD_EP_OutSetupPacket_int+0x88>)
 801b0fe:	4293      	cmp	r3, r2
 801b100:	d90c      	bls.n	801b11c <PCD_EP_OutSetupPacket_int+0x7c>
 801b102:	687b      	ldr	r3, [r7, #4]
 801b104:	691b      	ldr	r3, [r3, #16]
 801b106:	2b01      	cmp	r3, #1
 801b108:	d108      	bne.n	801b11c <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 801b10a:	687b      	ldr	r3, [r7, #4]
 801b10c:	6818      	ldr	r0, [r3, #0]
 801b10e:	687b      	ldr	r3, [r7, #4]
 801b110:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 801b114:	461a      	mov	r2, r3
 801b116:	2101      	movs	r1, #1
 801b118:	f004 f930 	bl	801f37c <USB_EP0_OutStart>
  }

  return HAL_OK;
 801b11c:	2300      	movs	r3, #0
}
 801b11e:	4618      	mov	r0, r3
 801b120:	3718      	adds	r7, #24
 801b122:	46bd      	mov	sp, r7
 801b124:	bd80      	pop	{r7, pc}
 801b126:	bf00      	nop
 801b128:	4f54300a 	.word	0x4f54300a

0801b12c <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 801b12c:	b480      	push	{r7}
 801b12e:	b085      	sub	sp, #20
 801b130:	af00      	add	r7, sp, #0
 801b132:	6078      	str	r0, [r7, #4]
 801b134:	460b      	mov	r3, r1
 801b136:	70fb      	strb	r3, [r7, #3]
 801b138:	4613      	mov	r3, r2
 801b13a:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 801b13c:	687b      	ldr	r3, [r7, #4]
 801b13e:	681b      	ldr	r3, [r3, #0]
 801b140:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801b142:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 801b144:	78fb      	ldrb	r3, [r7, #3]
 801b146:	2b00      	cmp	r3, #0
 801b148:	d107      	bne.n	801b15a <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 801b14a:	883b      	ldrh	r3, [r7, #0]
 801b14c:	0419      	lsls	r1, r3, #16
 801b14e:	687b      	ldr	r3, [r7, #4]
 801b150:	681b      	ldr	r3, [r3, #0]
 801b152:	68ba      	ldr	r2, [r7, #8]
 801b154:	430a      	orrs	r2, r1
 801b156:	629a      	str	r2, [r3, #40]	; 0x28
 801b158:	e028      	b.n	801b1ac <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 801b15a:	687b      	ldr	r3, [r7, #4]
 801b15c:	681b      	ldr	r3, [r3, #0]
 801b15e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801b160:	0c1b      	lsrs	r3, r3, #16
 801b162:	68ba      	ldr	r2, [r7, #8]
 801b164:	4413      	add	r3, r2
 801b166:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 801b168:	2300      	movs	r3, #0
 801b16a:	73fb      	strb	r3, [r7, #15]
 801b16c:	e00d      	b.n	801b18a <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 801b16e:	687b      	ldr	r3, [r7, #4]
 801b170:	681a      	ldr	r2, [r3, #0]
 801b172:	7bfb      	ldrb	r3, [r7, #15]
 801b174:	3340      	adds	r3, #64	; 0x40
 801b176:	009b      	lsls	r3, r3, #2
 801b178:	4413      	add	r3, r2
 801b17a:	685b      	ldr	r3, [r3, #4]
 801b17c:	0c1b      	lsrs	r3, r3, #16
 801b17e:	68ba      	ldr	r2, [r7, #8]
 801b180:	4413      	add	r3, r2
 801b182:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 801b184:	7bfb      	ldrb	r3, [r7, #15]
 801b186:	3301      	adds	r3, #1
 801b188:	73fb      	strb	r3, [r7, #15]
 801b18a:	7bfa      	ldrb	r2, [r7, #15]
 801b18c:	78fb      	ldrb	r3, [r7, #3]
 801b18e:	3b01      	subs	r3, #1
 801b190:	429a      	cmp	r2, r3
 801b192:	d3ec      	bcc.n	801b16e <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 801b194:	883b      	ldrh	r3, [r7, #0]
 801b196:	0418      	lsls	r0, r3, #16
 801b198:	687b      	ldr	r3, [r7, #4]
 801b19a:	6819      	ldr	r1, [r3, #0]
 801b19c:	78fb      	ldrb	r3, [r7, #3]
 801b19e:	3b01      	subs	r3, #1
 801b1a0:	68ba      	ldr	r2, [r7, #8]
 801b1a2:	4302      	orrs	r2, r0
 801b1a4:	3340      	adds	r3, #64	; 0x40
 801b1a6:	009b      	lsls	r3, r3, #2
 801b1a8:	440b      	add	r3, r1
 801b1aa:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 801b1ac:	2300      	movs	r3, #0
}
 801b1ae:	4618      	mov	r0, r3
 801b1b0:	3714      	adds	r7, #20
 801b1b2:	46bd      	mov	sp, r7
 801b1b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b1b8:	4770      	bx	lr

0801b1ba <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 801b1ba:	b480      	push	{r7}
 801b1bc:	b083      	sub	sp, #12
 801b1be:	af00      	add	r7, sp, #0
 801b1c0:	6078      	str	r0, [r7, #4]
 801b1c2:	460b      	mov	r3, r1
 801b1c4:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 801b1c6:	687b      	ldr	r3, [r7, #4]
 801b1c8:	681b      	ldr	r3, [r3, #0]
 801b1ca:	887a      	ldrh	r2, [r7, #2]
 801b1cc:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 801b1ce:	2300      	movs	r3, #0
}
 801b1d0:	4618      	mov	r0, r3
 801b1d2:	370c      	adds	r7, #12
 801b1d4:	46bd      	mov	sp, r7
 801b1d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b1da:	4770      	bx	lr

0801b1dc <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 801b1dc:	b480      	push	{r7}
 801b1de:	b085      	sub	sp, #20
 801b1e0:	af00      	add	r7, sp, #0
 801b1e2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 801b1e4:	687b      	ldr	r3, [r7, #4]
 801b1e6:	681b      	ldr	r3, [r3, #0]
 801b1e8:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 801b1ea:	687b      	ldr	r3, [r7, #4]
 801b1ec:	2201      	movs	r2, #1
 801b1ee:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 801b1f2:	687b      	ldr	r3, [r7, #4]
 801b1f4:	2200      	movs	r2, #0
 801b1f6:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 801b1fa:	68fb      	ldr	r3, [r7, #12]
 801b1fc:	699b      	ldr	r3, [r3, #24]
 801b1fe:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 801b202:	68fb      	ldr	r3, [r7, #12]
 801b204:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 801b206:	68fb      	ldr	r3, [r7, #12]
 801b208:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801b20a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 801b20e:	f043 0303 	orr.w	r3, r3, #3
 801b212:	68fa      	ldr	r2, [r7, #12]
 801b214:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 801b216:	2300      	movs	r3, #0
}
 801b218:	4618      	mov	r0, r3
 801b21a:	3714      	adds	r7, #20
 801b21c:	46bd      	mov	sp, r7
 801b21e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b222:	4770      	bx	lr

0801b224 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 801b224:	b580      	push	{r7, lr}
 801b226:	b082      	sub	sp, #8
 801b228:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 801b22a:	2300      	movs	r3, #0
 801b22c:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 801b22e:	2300      	movs	r3, #0
 801b230:	603b      	str	r3, [r7, #0]
 801b232:	4b20      	ldr	r3, [pc, #128]	; (801b2b4 <HAL_PWREx_EnableOverDrive+0x90>)
 801b234:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801b236:	4a1f      	ldr	r2, [pc, #124]	; (801b2b4 <HAL_PWREx_EnableOverDrive+0x90>)
 801b238:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 801b23c:	6413      	str	r3, [r2, #64]	; 0x40
 801b23e:	4b1d      	ldr	r3, [pc, #116]	; (801b2b4 <HAL_PWREx_EnableOverDrive+0x90>)
 801b240:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801b242:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 801b246:	603b      	str	r3, [r7, #0]
 801b248:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 801b24a:	4b1b      	ldr	r3, [pc, #108]	; (801b2b8 <HAL_PWREx_EnableOverDrive+0x94>)
 801b24c:	2201      	movs	r2, #1
 801b24e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 801b250:	f7fd f9e8 	bl	8018624 <HAL_GetTick>
 801b254:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 801b256:	e009      	b.n	801b26c <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 801b258:	f7fd f9e4 	bl	8018624 <HAL_GetTick>
 801b25c:	4602      	mov	r2, r0
 801b25e:	687b      	ldr	r3, [r7, #4]
 801b260:	1ad3      	subs	r3, r2, r3
 801b262:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 801b266:	d901      	bls.n	801b26c <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 801b268:	2303      	movs	r3, #3
 801b26a:	e01f      	b.n	801b2ac <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 801b26c:	4b13      	ldr	r3, [pc, #76]	; (801b2bc <HAL_PWREx_EnableOverDrive+0x98>)
 801b26e:	685b      	ldr	r3, [r3, #4]
 801b270:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 801b274:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801b278:	d1ee      	bne.n	801b258 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 801b27a:	4b11      	ldr	r3, [pc, #68]	; (801b2c0 <HAL_PWREx_EnableOverDrive+0x9c>)
 801b27c:	2201      	movs	r2, #1
 801b27e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 801b280:	f7fd f9d0 	bl	8018624 <HAL_GetTick>
 801b284:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 801b286:	e009      	b.n	801b29c <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 801b288:	f7fd f9cc 	bl	8018624 <HAL_GetTick>
 801b28c:	4602      	mov	r2, r0
 801b28e:	687b      	ldr	r3, [r7, #4]
 801b290:	1ad3      	subs	r3, r2, r3
 801b292:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 801b296:	d901      	bls.n	801b29c <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 801b298:	2303      	movs	r3, #3
 801b29a:	e007      	b.n	801b2ac <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 801b29c:	4b07      	ldr	r3, [pc, #28]	; (801b2bc <HAL_PWREx_EnableOverDrive+0x98>)
 801b29e:	685b      	ldr	r3, [r3, #4]
 801b2a0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801b2a4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 801b2a8:	d1ee      	bne.n	801b288 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 801b2aa:	2300      	movs	r3, #0
}
 801b2ac:	4618      	mov	r0, r3
 801b2ae:	3708      	adds	r7, #8
 801b2b0:	46bd      	mov	sp, r7
 801b2b2:	bd80      	pop	{r7, pc}
 801b2b4:	40023800 	.word	0x40023800
 801b2b8:	420e0040 	.word	0x420e0040
 801b2bc:	40007000 	.word	0x40007000
 801b2c0:	420e0044 	.word	0x420e0044

0801b2c4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 801b2c4:	b580      	push	{r7, lr}
 801b2c6:	b084      	sub	sp, #16
 801b2c8:	af00      	add	r7, sp, #0
 801b2ca:	6078      	str	r0, [r7, #4]
 801b2cc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 801b2ce:	687b      	ldr	r3, [r7, #4]
 801b2d0:	2b00      	cmp	r3, #0
 801b2d2:	d101      	bne.n	801b2d8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 801b2d4:	2301      	movs	r3, #1
 801b2d6:	e0cc      	b.n	801b472 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 801b2d8:	4b68      	ldr	r3, [pc, #416]	; (801b47c <HAL_RCC_ClockConfig+0x1b8>)
 801b2da:	681b      	ldr	r3, [r3, #0]
 801b2dc:	f003 030f 	and.w	r3, r3, #15
 801b2e0:	683a      	ldr	r2, [r7, #0]
 801b2e2:	429a      	cmp	r2, r3
 801b2e4:	d90c      	bls.n	801b300 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 801b2e6:	4b65      	ldr	r3, [pc, #404]	; (801b47c <HAL_RCC_ClockConfig+0x1b8>)
 801b2e8:	683a      	ldr	r2, [r7, #0]
 801b2ea:	b2d2      	uxtb	r2, r2
 801b2ec:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 801b2ee:	4b63      	ldr	r3, [pc, #396]	; (801b47c <HAL_RCC_ClockConfig+0x1b8>)
 801b2f0:	681b      	ldr	r3, [r3, #0]
 801b2f2:	f003 030f 	and.w	r3, r3, #15
 801b2f6:	683a      	ldr	r2, [r7, #0]
 801b2f8:	429a      	cmp	r2, r3
 801b2fa:	d001      	beq.n	801b300 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 801b2fc:	2301      	movs	r3, #1
 801b2fe:	e0b8      	b.n	801b472 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 801b300:	687b      	ldr	r3, [r7, #4]
 801b302:	681b      	ldr	r3, [r3, #0]
 801b304:	f003 0302 	and.w	r3, r3, #2
 801b308:	2b00      	cmp	r3, #0
 801b30a:	d020      	beq.n	801b34e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 801b30c:	687b      	ldr	r3, [r7, #4]
 801b30e:	681b      	ldr	r3, [r3, #0]
 801b310:	f003 0304 	and.w	r3, r3, #4
 801b314:	2b00      	cmp	r3, #0
 801b316:	d005      	beq.n	801b324 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 801b318:	4b59      	ldr	r3, [pc, #356]	; (801b480 <HAL_RCC_ClockConfig+0x1bc>)
 801b31a:	689b      	ldr	r3, [r3, #8]
 801b31c:	4a58      	ldr	r2, [pc, #352]	; (801b480 <HAL_RCC_ClockConfig+0x1bc>)
 801b31e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 801b322:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 801b324:	687b      	ldr	r3, [r7, #4]
 801b326:	681b      	ldr	r3, [r3, #0]
 801b328:	f003 0308 	and.w	r3, r3, #8
 801b32c:	2b00      	cmp	r3, #0
 801b32e:	d005      	beq.n	801b33c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 801b330:	4b53      	ldr	r3, [pc, #332]	; (801b480 <HAL_RCC_ClockConfig+0x1bc>)
 801b332:	689b      	ldr	r3, [r3, #8]
 801b334:	4a52      	ldr	r2, [pc, #328]	; (801b480 <HAL_RCC_ClockConfig+0x1bc>)
 801b336:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 801b33a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 801b33c:	4b50      	ldr	r3, [pc, #320]	; (801b480 <HAL_RCC_ClockConfig+0x1bc>)
 801b33e:	689b      	ldr	r3, [r3, #8]
 801b340:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 801b344:	687b      	ldr	r3, [r7, #4]
 801b346:	689b      	ldr	r3, [r3, #8]
 801b348:	494d      	ldr	r1, [pc, #308]	; (801b480 <HAL_RCC_ClockConfig+0x1bc>)
 801b34a:	4313      	orrs	r3, r2
 801b34c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 801b34e:	687b      	ldr	r3, [r7, #4]
 801b350:	681b      	ldr	r3, [r3, #0]
 801b352:	f003 0301 	and.w	r3, r3, #1
 801b356:	2b00      	cmp	r3, #0
 801b358:	d044      	beq.n	801b3e4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 801b35a:	687b      	ldr	r3, [r7, #4]
 801b35c:	685b      	ldr	r3, [r3, #4]
 801b35e:	2b01      	cmp	r3, #1
 801b360:	d107      	bne.n	801b372 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 801b362:	4b47      	ldr	r3, [pc, #284]	; (801b480 <HAL_RCC_ClockConfig+0x1bc>)
 801b364:	681b      	ldr	r3, [r3, #0]
 801b366:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801b36a:	2b00      	cmp	r3, #0
 801b36c:	d119      	bne.n	801b3a2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 801b36e:	2301      	movs	r3, #1
 801b370:	e07f      	b.n	801b472 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 801b372:	687b      	ldr	r3, [r7, #4]
 801b374:	685b      	ldr	r3, [r3, #4]
 801b376:	2b02      	cmp	r3, #2
 801b378:	d003      	beq.n	801b382 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 801b37a:	687b      	ldr	r3, [r7, #4]
 801b37c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 801b37e:	2b03      	cmp	r3, #3
 801b380:	d107      	bne.n	801b392 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 801b382:	4b3f      	ldr	r3, [pc, #252]	; (801b480 <HAL_RCC_ClockConfig+0x1bc>)
 801b384:	681b      	ldr	r3, [r3, #0]
 801b386:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 801b38a:	2b00      	cmp	r3, #0
 801b38c:	d109      	bne.n	801b3a2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 801b38e:	2301      	movs	r3, #1
 801b390:	e06f      	b.n	801b472 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 801b392:	4b3b      	ldr	r3, [pc, #236]	; (801b480 <HAL_RCC_ClockConfig+0x1bc>)
 801b394:	681b      	ldr	r3, [r3, #0]
 801b396:	f003 0302 	and.w	r3, r3, #2
 801b39a:	2b00      	cmp	r3, #0
 801b39c:	d101      	bne.n	801b3a2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 801b39e:	2301      	movs	r3, #1
 801b3a0:	e067      	b.n	801b472 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 801b3a2:	4b37      	ldr	r3, [pc, #220]	; (801b480 <HAL_RCC_ClockConfig+0x1bc>)
 801b3a4:	689b      	ldr	r3, [r3, #8]
 801b3a6:	f023 0203 	bic.w	r2, r3, #3
 801b3aa:	687b      	ldr	r3, [r7, #4]
 801b3ac:	685b      	ldr	r3, [r3, #4]
 801b3ae:	4934      	ldr	r1, [pc, #208]	; (801b480 <HAL_RCC_ClockConfig+0x1bc>)
 801b3b0:	4313      	orrs	r3, r2
 801b3b2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 801b3b4:	f7fd f936 	bl	8018624 <HAL_GetTick>
 801b3b8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 801b3ba:	e00a      	b.n	801b3d2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 801b3bc:	f7fd f932 	bl	8018624 <HAL_GetTick>
 801b3c0:	4602      	mov	r2, r0
 801b3c2:	68fb      	ldr	r3, [r7, #12]
 801b3c4:	1ad3      	subs	r3, r2, r3
 801b3c6:	f241 3288 	movw	r2, #5000	; 0x1388
 801b3ca:	4293      	cmp	r3, r2
 801b3cc:	d901      	bls.n	801b3d2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 801b3ce:	2303      	movs	r3, #3
 801b3d0:	e04f      	b.n	801b472 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 801b3d2:	4b2b      	ldr	r3, [pc, #172]	; (801b480 <HAL_RCC_ClockConfig+0x1bc>)
 801b3d4:	689b      	ldr	r3, [r3, #8]
 801b3d6:	f003 020c 	and.w	r2, r3, #12
 801b3da:	687b      	ldr	r3, [r7, #4]
 801b3dc:	685b      	ldr	r3, [r3, #4]
 801b3de:	009b      	lsls	r3, r3, #2
 801b3e0:	429a      	cmp	r2, r3
 801b3e2:	d1eb      	bne.n	801b3bc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 801b3e4:	4b25      	ldr	r3, [pc, #148]	; (801b47c <HAL_RCC_ClockConfig+0x1b8>)
 801b3e6:	681b      	ldr	r3, [r3, #0]
 801b3e8:	f003 030f 	and.w	r3, r3, #15
 801b3ec:	683a      	ldr	r2, [r7, #0]
 801b3ee:	429a      	cmp	r2, r3
 801b3f0:	d20c      	bcs.n	801b40c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 801b3f2:	4b22      	ldr	r3, [pc, #136]	; (801b47c <HAL_RCC_ClockConfig+0x1b8>)
 801b3f4:	683a      	ldr	r2, [r7, #0]
 801b3f6:	b2d2      	uxtb	r2, r2
 801b3f8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 801b3fa:	4b20      	ldr	r3, [pc, #128]	; (801b47c <HAL_RCC_ClockConfig+0x1b8>)
 801b3fc:	681b      	ldr	r3, [r3, #0]
 801b3fe:	f003 030f 	and.w	r3, r3, #15
 801b402:	683a      	ldr	r2, [r7, #0]
 801b404:	429a      	cmp	r2, r3
 801b406:	d001      	beq.n	801b40c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 801b408:	2301      	movs	r3, #1
 801b40a:	e032      	b.n	801b472 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 801b40c:	687b      	ldr	r3, [r7, #4]
 801b40e:	681b      	ldr	r3, [r3, #0]
 801b410:	f003 0304 	and.w	r3, r3, #4
 801b414:	2b00      	cmp	r3, #0
 801b416:	d008      	beq.n	801b42a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 801b418:	4b19      	ldr	r3, [pc, #100]	; (801b480 <HAL_RCC_ClockConfig+0x1bc>)
 801b41a:	689b      	ldr	r3, [r3, #8]
 801b41c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 801b420:	687b      	ldr	r3, [r7, #4]
 801b422:	68db      	ldr	r3, [r3, #12]
 801b424:	4916      	ldr	r1, [pc, #88]	; (801b480 <HAL_RCC_ClockConfig+0x1bc>)
 801b426:	4313      	orrs	r3, r2
 801b428:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 801b42a:	687b      	ldr	r3, [r7, #4]
 801b42c:	681b      	ldr	r3, [r3, #0]
 801b42e:	f003 0308 	and.w	r3, r3, #8
 801b432:	2b00      	cmp	r3, #0
 801b434:	d009      	beq.n	801b44a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 801b436:	4b12      	ldr	r3, [pc, #72]	; (801b480 <HAL_RCC_ClockConfig+0x1bc>)
 801b438:	689b      	ldr	r3, [r3, #8]
 801b43a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 801b43e:	687b      	ldr	r3, [r7, #4]
 801b440:	691b      	ldr	r3, [r3, #16]
 801b442:	00db      	lsls	r3, r3, #3
 801b444:	490e      	ldr	r1, [pc, #56]	; (801b480 <HAL_RCC_ClockConfig+0x1bc>)
 801b446:	4313      	orrs	r3, r2
 801b448:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 801b44a:	f000 fb57 	bl	801bafc <HAL_RCC_GetSysClockFreq>
 801b44e:	4602      	mov	r2, r0
 801b450:	4b0b      	ldr	r3, [pc, #44]	; (801b480 <HAL_RCC_ClockConfig+0x1bc>)
 801b452:	689b      	ldr	r3, [r3, #8]
 801b454:	091b      	lsrs	r3, r3, #4
 801b456:	f003 030f 	and.w	r3, r3, #15
 801b45a:	490a      	ldr	r1, [pc, #40]	; (801b484 <HAL_RCC_ClockConfig+0x1c0>)
 801b45c:	5ccb      	ldrb	r3, [r1, r3]
 801b45e:	fa22 f303 	lsr.w	r3, r2, r3
 801b462:	4a09      	ldr	r2, [pc, #36]	; (801b488 <HAL_RCC_ClockConfig+0x1c4>)
 801b464:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 801b466:	4b09      	ldr	r3, [pc, #36]	; (801b48c <HAL_RCC_ClockConfig+0x1c8>)
 801b468:	681b      	ldr	r3, [r3, #0]
 801b46a:	4618      	mov	r0, r3
 801b46c:	f7fd f896 	bl	801859c <HAL_InitTick>

  return HAL_OK;
 801b470:	2300      	movs	r3, #0
}
 801b472:	4618      	mov	r0, r3
 801b474:	3710      	adds	r7, #16
 801b476:	46bd      	mov	sp, r7
 801b478:	bd80      	pop	{r7, pc}
 801b47a:	bf00      	nop
 801b47c:	40023c00 	.word	0x40023c00
 801b480:	40023800 	.word	0x40023800
 801b484:	08002350 	.word	0x08002350
 801b488:	2000058c 	.word	0x2000058c
 801b48c:	20000590 	.word	0x20000590

0801b490 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 801b490:	b480      	push	{r7}
 801b492:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 801b494:	4b03      	ldr	r3, [pc, #12]	; (801b4a4 <HAL_RCC_GetHCLKFreq+0x14>)
 801b496:	681b      	ldr	r3, [r3, #0]
}
 801b498:	4618      	mov	r0, r3
 801b49a:	46bd      	mov	sp, r7
 801b49c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b4a0:	4770      	bx	lr
 801b4a2:	bf00      	nop
 801b4a4:	2000058c 	.word	0x2000058c

0801b4a8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 801b4a8:	b580      	push	{r7, lr}
 801b4aa:	b08c      	sub	sp, #48	; 0x30
 801b4ac:	af00      	add	r7, sp, #0
 801b4ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 801b4b0:	2300      	movs	r3, #0
 801b4b2:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmpreg1 = 0U;
 801b4b4:	2300      	movs	r3, #0
 801b4b6:	623b      	str	r3, [r7, #32]
  uint32_t plli2sp = 0U;
 801b4b8:	2300      	movs	r3, #0
 801b4ba:	61fb      	str	r3, [r7, #28]
  uint32_t plli2sq = 0U;
 801b4bc:	2300      	movs	r3, #0
 801b4be:	61bb      	str	r3, [r7, #24]
  uint32_t plli2sr = 0U;
 801b4c0:	2300      	movs	r3, #0
 801b4c2:	617b      	str	r3, [r7, #20]
  uint32_t pllsaip = 0U;
 801b4c4:	2300      	movs	r3, #0
 801b4c6:	613b      	str	r3, [r7, #16]
  uint32_t pllsaiq = 0U;
 801b4c8:	2300      	movs	r3, #0
 801b4ca:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0U;
 801b4cc:	2300      	movs	r3, #0
 801b4ce:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t pllsaiused = 0U;
 801b4d0:	2300      	movs	r3, #0
 801b4d2:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the peripheral clock selection parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------ I2S APB1 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 801b4d4:	687b      	ldr	r3, [r7, #4]
 801b4d6:	681b      	ldr	r3, [r3, #0]
 801b4d8:	f003 0301 	and.w	r3, r3, #1
 801b4dc:	2b00      	cmp	r3, #0
 801b4de:	d010      	beq.n	801b502 <HAL_RCCEx_PeriphCLKConfig+0x5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB1CLKSOURCE(PeriphClkInit->I2sApb1ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 801b4e0:	4b6f      	ldr	r3, [pc, #444]	; (801b6a0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 801b4e2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801b4e6:	f023 62c0 	bic.w	r2, r3, #100663296	; 0x6000000
 801b4ea:	687b      	ldr	r3, [r7, #4]
 801b4ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801b4ee:	496c      	ldr	r1, [pc, #432]	; (801b6a0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 801b4f0:	4313      	orrs	r3, r2
 801b4f2:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
 801b4f6:	687b      	ldr	r3, [r7, #4]
 801b4f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801b4fa:	2b00      	cmp	r3, #0
 801b4fc:	d101      	bne.n	801b502 <HAL_RCCEx_PeriphCLKConfig+0x5a>
    {
      plli2sused = 1U;
 801b4fe:	2301      	movs	r3, #1
 801b500:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- I2S APB2 configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == (RCC_PERIPHCLK_I2S_APB2))
 801b502:	687b      	ldr	r3, [r7, #4]
 801b504:	681b      	ldr	r3, [r3, #0]
 801b506:	f003 0302 	and.w	r3, r3, #2
 801b50a:	2b00      	cmp	r3, #0
 801b50c:	d010      	beq.n	801b530 <HAL_RCCEx_PeriphCLKConfig+0x88>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB2CLKSOURCE(PeriphClkInit->I2sApb2ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 801b50e:	4b64      	ldr	r3, [pc, #400]	; (801b6a0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 801b510:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801b514:	f023 52c0 	bic.w	r2, r3, #402653184	; 0x18000000
 801b518:	687b      	ldr	r3, [r7, #4]
 801b51a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801b51c:	4960      	ldr	r1, [pc, #384]	; (801b6a0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 801b51e:	4313      	orrs	r3, r2
 801b520:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)
 801b524:	687b      	ldr	r3, [r7, #4]
 801b526:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801b528:	2b00      	cmp	r3, #0
 801b52a:	d101      	bne.n	801b530 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      plli2sused = 1U;
 801b52c:	2301      	movs	r3, #1
 801b52e:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*--------------------------- SAI1 configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 801b530:	687b      	ldr	r3, [r7, #4]
 801b532:	681b      	ldr	r3, [r3, #0]
 801b534:	f003 0304 	and.w	r3, r3, #4
 801b538:	2b00      	cmp	r3, #0
 801b53a:	d017      	beq.n	801b56c <HAL_RCCEx_PeriphCLKConfig+0xc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 801b53c:	4b58      	ldr	r3, [pc, #352]	; (801b6a0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 801b53e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801b542:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 801b546:	687b      	ldr	r3, [r7, #4]
 801b548:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801b54a:	4955      	ldr	r1, [pc, #340]	; (801b6a0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 801b54c:	4313      	orrs	r3, r2
 801b54e:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 801b552:	687b      	ldr	r3, [r7, #4]
 801b554:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801b556:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 801b55a:	d101      	bne.n	801b560 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      plli2sused = 1U;
 801b55c:	2301      	movs	r3, #1
 801b55e:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 801b560:	687b      	ldr	r3, [r7, #4]
 801b562:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801b564:	2b00      	cmp	r3, #0
 801b566:	d101      	bne.n	801b56c <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      pllsaiused = 1U;
 801b568:	2301      	movs	r3, #1
 801b56a:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------------- SAI2 configuration ----------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 801b56c:	687b      	ldr	r3, [r7, #4]
 801b56e:	681b      	ldr	r3, [r3, #0]
 801b570:	f003 0308 	and.w	r3, r3, #8
 801b574:	2b00      	cmp	r3, #0
 801b576:	d017      	beq.n	801b5a8 <HAL_RCCEx_PeriphCLKConfig+0x100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 801b578:	4b49      	ldr	r3, [pc, #292]	; (801b6a0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 801b57a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801b57e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 801b582:	687b      	ldr	r3, [r7, #4]
 801b584:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801b586:	4946      	ldr	r1, [pc, #280]	; (801b6a0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 801b588:	4313      	orrs	r3, r2
 801b58a:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 801b58e:	687b      	ldr	r3, [r7, #4]
 801b590:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801b592:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 801b596:	d101      	bne.n	801b59c <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      plli2sused = 1U;
 801b598:	2301      	movs	r3, #1
 801b59a:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 801b59c:	687b      	ldr	r3, [r7, #4]
 801b59e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801b5a0:	2b00      	cmp	r3, #0
 801b5a2:	d101      	bne.n	801b5a8 <HAL_RCCEx_PeriphCLKConfig+0x100>
    {
      pllsaiused = 1U;
 801b5a4:	2301      	movs	r3, #1
 801b5a6:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- RTC configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 801b5a8:	687b      	ldr	r3, [r7, #4]
 801b5aa:	681b      	ldr	r3, [r3, #0]
 801b5ac:	f003 0320 	and.w	r3, r3, #32
 801b5b0:	2b00      	cmp	r3, #0
 801b5b2:	f000 808a 	beq.w	801b6ca <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 801b5b6:	2300      	movs	r3, #0
 801b5b8:	60bb      	str	r3, [r7, #8]
 801b5ba:	4b39      	ldr	r3, [pc, #228]	; (801b6a0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 801b5bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801b5be:	4a38      	ldr	r2, [pc, #224]	; (801b6a0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 801b5c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 801b5c4:	6413      	str	r3, [r2, #64]	; 0x40
 801b5c6:	4b36      	ldr	r3, [pc, #216]	; (801b6a0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 801b5c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801b5ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 801b5ce:	60bb      	str	r3, [r7, #8]
 801b5d0:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 801b5d2:	4b34      	ldr	r3, [pc, #208]	; (801b6a4 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 801b5d4:	681b      	ldr	r3, [r3, #0]
 801b5d6:	4a33      	ldr	r2, [pc, #204]	; (801b6a4 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 801b5d8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 801b5dc:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 801b5de:	f7fd f821 	bl	8018624 <HAL_GetTick>
 801b5e2:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR & PWR_CR_DBP) == RESET)
 801b5e4:	e008      	b.n	801b5f8 <HAL_RCCEx_PeriphCLKConfig+0x150>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 801b5e6:	f7fd f81d 	bl	8018624 <HAL_GetTick>
 801b5ea:	4602      	mov	r2, r0
 801b5ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b5ee:	1ad3      	subs	r3, r2, r3
 801b5f0:	2b02      	cmp	r3, #2
 801b5f2:	d901      	bls.n	801b5f8 <HAL_RCCEx_PeriphCLKConfig+0x150>
      {
        return HAL_TIMEOUT;
 801b5f4:	2303      	movs	r3, #3
 801b5f6:	e278      	b.n	801baea <HAL_RCCEx_PeriphCLKConfig+0x642>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 801b5f8:	4b2a      	ldr	r3, [pc, #168]	; (801b6a4 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 801b5fa:	681b      	ldr	r3, [r3, #0]
 801b5fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801b600:	2b00      	cmp	r3, #0
 801b602:	d0f0      	beq.n	801b5e6 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 801b604:	4b26      	ldr	r3, [pc, #152]	; (801b6a0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 801b606:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801b608:	f403 7340 	and.w	r3, r3, #768	; 0x300
 801b60c:	623b      	str	r3, [r7, #32]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 801b60e:	6a3b      	ldr	r3, [r7, #32]
 801b610:	2b00      	cmp	r3, #0
 801b612:	d02f      	beq.n	801b674 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 801b614:	687b      	ldr	r3, [r7, #4]
 801b616:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801b618:	f403 7340 	and.w	r3, r3, #768	; 0x300
 801b61c:	6a3a      	ldr	r2, [r7, #32]
 801b61e:	429a      	cmp	r2, r3
 801b620:	d028      	beq.n	801b674 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 801b622:	4b1f      	ldr	r3, [pc, #124]	; (801b6a0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 801b624:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801b626:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 801b62a:	623b      	str	r3, [r7, #32]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 801b62c:	4b1e      	ldr	r3, [pc, #120]	; (801b6a8 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 801b62e:	2201      	movs	r2, #1
 801b630:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 801b632:	4b1d      	ldr	r3, [pc, #116]	; (801b6a8 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 801b634:	2200      	movs	r2, #0
 801b636:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 801b638:	4a19      	ldr	r2, [pc, #100]	; (801b6a0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 801b63a:	6a3b      	ldr	r3, [r7, #32]
 801b63c:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 801b63e:	4b18      	ldr	r3, [pc, #96]	; (801b6a0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 801b640:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801b642:	f003 0301 	and.w	r3, r3, #1
 801b646:	2b01      	cmp	r3, #1
 801b648:	d114      	bne.n	801b674 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 801b64a:	f7fc ffeb 	bl	8018624 <HAL_GetTick>
 801b64e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 801b650:	e00a      	b.n	801b668 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 801b652:	f7fc ffe7 	bl	8018624 <HAL_GetTick>
 801b656:	4602      	mov	r2, r0
 801b658:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b65a:	1ad3      	subs	r3, r2, r3
 801b65c:	f241 3288 	movw	r2, #5000	; 0x1388
 801b660:	4293      	cmp	r3, r2
 801b662:	d901      	bls.n	801b668 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
          {
            return HAL_TIMEOUT;
 801b664:	2303      	movs	r3, #3
 801b666:	e240      	b.n	801baea <HAL_RCCEx_PeriphCLKConfig+0x642>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 801b668:	4b0d      	ldr	r3, [pc, #52]	; (801b6a0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 801b66a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801b66c:	f003 0302 	and.w	r3, r3, #2
 801b670:	2b00      	cmp	r3, #0
 801b672:	d0ee      	beq.n	801b652 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 801b674:	687b      	ldr	r3, [r7, #4]
 801b676:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801b678:	f403 7340 	and.w	r3, r3, #768	; 0x300
 801b67c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 801b680:	d114      	bne.n	801b6ac <HAL_RCCEx_PeriphCLKConfig+0x204>
 801b682:	4b07      	ldr	r3, [pc, #28]	; (801b6a0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 801b684:	689b      	ldr	r3, [r3, #8]
 801b686:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 801b68a:	687b      	ldr	r3, [r7, #4]
 801b68c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801b68e:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 801b692:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 801b696:	4902      	ldr	r1, [pc, #8]	; (801b6a0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 801b698:	4313      	orrs	r3, r2
 801b69a:	608b      	str	r3, [r1, #8]
 801b69c:	e00c      	b.n	801b6b8 <HAL_RCCEx_PeriphCLKConfig+0x210>
 801b69e:	bf00      	nop
 801b6a0:	40023800 	.word	0x40023800
 801b6a4:	40007000 	.word	0x40007000
 801b6a8:	42470e40 	.word	0x42470e40
 801b6ac:	4b4a      	ldr	r3, [pc, #296]	; (801b7d8 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 801b6ae:	689b      	ldr	r3, [r3, #8]
 801b6b0:	4a49      	ldr	r2, [pc, #292]	; (801b7d8 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 801b6b2:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 801b6b6:	6093      	str	r3, [r2, #8]
 801b6b8:	4b47      	ldr	r3, [pc, #284]	; (801b7d8 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 801b6ba:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 801b6bc:	687b      	ldr	r3, [r7, #4]
 801b6be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801b6c0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 801b6c4:	4944      	ldr	r1, [pc, #272]	; (801b7d8 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 801b6c6:	4313      	orrs	r3, r2
 801b6c8:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 801b6ca:	687b      	ldr	r3, [r7, #4]
 801b6cc:	681b      	ldr	r3, [r3, #0]
 801b6ce:	f003 0310 	and.w	r3, r3, #16
 801b6d2:	2b00      	cmp	r3, #0
 801b6d4:	d004      	beq.n	801b6e0 <HAL_RCCEx_PeriphCLKConfig+0x238>
  {
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 801b6d6:	687b      	ldr	r3, [r7, #4]
 801b6d8:	f893 2058 	ldrb.w	r2, [r3, #88]	; 0x58
 801b6dc:	4b3f      	ldr	r3, [pc, #252]	; (801b7dc <HAL_RCCEx_PeriphCLKConfig+0x334>)
 801b6de:	601a      	str	r2, [r3, #0]
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- FMPI2C1 Configuration -----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMPI2C1) == RCC_PERIPHCLK_FMPI2C1)
 801b6e0:	687b      	ldr	r3, [r7, #4]
 801b6e2:	681b      	ldr	r3, [r3, #0]
 801b6e4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801b6e8:	2b00      	cmp	r3, #0
 801b6ea:	d00a      	beq.n	801b702 <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMPI2C1CLKSOURCE(PeriphClkInit->Fmpi2c1ClockSelection));

    /* Configure the FMPI2C1 clock source */
    __HAL_RCC_FMPI2C1_CONFIG(PeriphClkInit->Fmpi2c1ClockSelection);
 801b6ec:	4b3a      	ldr	r3, [pc, #232]	; (801b7d8 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 801b6ee:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 801b6f2:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 801b6f6:	687b      	ldr	r3, [r7, #4]
 801b6f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801b6fa:	4937      	ldr	r1, [pc, #220]	; (801b7d8 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 801b6fc:	4313      	orrs	r3, r2
 801b6fe:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ CEC Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 801b702:	687b      	ldr	r3, [r7, #4]
 801b704:	681b      	ldr	r3, [r3, #0]
 801b706:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801b70a:	2b00      	cmp	r3, #0
 801b70c:	d00a      	beq.n	801b724 <HAL_RCCEx_PeriphCLKConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 801b70e:	4b32      	ldr	r3, [pc, #200]	; (801b7d8 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 801b710:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 801b714:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 801b718:	687b      	ldr	r3, [r7, #4]
 801b71a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801b71c:	492e      	ldr	r1, [pc, #184]	; (801b7d8 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 801b71e:	4313      	orrs	r3, r2
 801b720:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- CLK48 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 801b724:	687b      	ldr	r3, [r7, #4]
 801b726:	681b      	ldr	r3, [r3, #0]
 801b728:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801b72c:	2b00      	cmp	r3, #0
 801b72e:	d011      	beq.n	801b754 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 801b730:	4b29      	ldr	r3, [pc, #164]	; (801b7d8 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 801b732:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 801b736:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 801b73a:	687b      	ldr	r3, [r7, #4]
 801b73c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801b73e:	4926      	ldr	r1, [pc, #152]	; (801b7d8 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 801b740:	4313      	orrs	r3, r2
 801b742:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94

    /* Enable the PLLSAI when it's used as clock source for CLK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP)
 801b746:	687b      	ldr	r3, [r7, #4]
 801b748:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801b74a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 801b74e:	d101      	bne.n	801b754 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      pllsaiused = 1U;
 801b750:	2301      	movs	r3, #1
 801b752:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- SDIO Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 801b754:	687b      	ldr	r3, [r7, #4]
 801b756:	681b      	ldr	r3, [r3, #0]
 801b758:	f403 7300 	and.w	r3, r3, #512	; 0x200
 801b75c:	2b00      	cmp	r3, #0
 801b75e:	d00a      	beq.n	801b776 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 801b760:	4b1d      	ldr	r3, [pc, #116]	; (801b7d8 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 801b762:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 801b766:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 801b76a:	687b      	ldr	r3, [r7, #4]
 801b76c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801b76e:	491a      	ldr	r1, [pc, #104]	; (801b7d8 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 801b770:	4313      	orrs	r3, r2
 801b772:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ SPDIFRX Configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 801b776:	687b      	ldr	r3, [r7, #4]
 801b778:	681b      	ldr	r3, [r3, #0]
 801b77a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 801b77e:	2b00      	cmp	r3, #0
 801b780:	d011      	beq.n	801b7a6 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPDIFRXCLKSOURCE(PeriphClkInit->SpdifClockSelection));

    /* Configure the SPDIFRX clock source */
    __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifClockSelection);
 801b782:	4b15      	ldr	r3, [pc, #84]	; (801b7d8 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 801b784:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 801b788:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 801b78c:	687b      	ldr	r3, [r7, #4]
 801b78e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801b790:	4911      	ldr	r1, [pc, #68]	; (801b7d8 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 801b792:	4313      	orrs	r3, r2
 801b794:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
    /* Enable the PLLI2S when it's used as clock source for SPDIFRX */
    if(PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP)
 801b798:	687b      	ldr	r3, [r7, #4]
 801b79a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801b79c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 801b7a0:	d101      	bne.n	801b7a6 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
    {
      plli2sused = 1U;
 801b7a2:	2301      	movs	r3, #1
 801b7a4:	62fb      	str	r3, [r7, #44]	; 0x2c
  /*--------------------------------------------------------------------------*/

  /*---------------------------- PLLI2S Configuration ------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S on APB1,
     I2S on APB2 or SPDIFRX */
  if((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 801b7a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801b7a8:	2b01      	cmp	r3, #1
 801b7aa:	d005      	beq.n	801b7b8 <HAL_RCCEx_PeriphCLKConfig+0x310>
 801b7ac:	687b      	ldr	r3, [r7, #4]
 801b7ae:	681b      	ldr	r3, [r3, #0]
 801b7b0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 801b7b4:	f040 80ff 	bne.w	801b9b6 <HAL_RCCEx_PeriphCLKConfig+0x50e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 801b7b8:	4b09      	ldr	r3, [pc, #36]	; (801b7e0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 801b7ba:	2200      	movs	r2, #0
 801b7bc:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 801b7be:	f7fc ff31 	bl	8018624 <HAL_GetTick>
 801b7c2:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 801b7c4:	e00e      	b.n	801b7e4 <HAL_RCCEx_PeriphCLKConfig+0x33c>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 801b7c6:	f7fc ff2d 	bl	8018624 <HAL_GetTick>
 801b7ca:	4602      	mov	r2, r0
 801b7cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b7ce:	1ad3      	subs	r3, r2, r3
 801b7d0:	2b02      	cmp	r3, #2
 801b7d2:	d907      	bls.n	801b7e4 <HAL_RCCEx_PeriphCLKConfig+0x33c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 801b7d4:	2303      	movs	r3, #3
 801b7d6:	e188      	b.n	801baea <HAL_RCCEx_PeriphCLKConfig+0x642>
 801b7d8:	40023800 	.word	0x40023800
 801b7dc:	424711e0 	.word	0x424711e0
 801b7e0:	42470068 	.word	0x42470068
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 801b7e4:	4b7e      	ldr	r3, [pc, #504]	; (801b9e0 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 801b7e6:	681b      	ldr	r3, [r3, #0]
 801b7e8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 801b7ec:	2b00      	cmp	r3, #0
 801b7ee:	d1ea      	bne.n	801b7c6 <HAL_RCCEx_PeriphCLKConfig+0x31e>
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*------ In Case of PLLI2S is selected as source clock for I2S -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 801b7f0:	687b      	ldr	r3, [r7, #4]
 801b7f2:	681b      	ldr	r3, [r3, #0]
 801b7f4:	f003 0301 	and.w	r3, r3, #1
 801b7f8:	2b00      	cmp	r3, #0
 801b7fa:	d003      	beq.n	801b804 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 801b7fc:	687b      	ldr	r3, [r7, #4]
 801b7fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801b800:	2b00      	cmp	r3, #0
 801b802:	d009      	beq.n	801b818 <HAL_RCCEx_PeriphCLKConfig+0x370>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 801b804:	687b      	ldr	r3, [r7, #4]
 801b806:	681b      	ldr	r3, [r3, #0]
 801b808:	f003 0302 	and.w	r3, r3, #2
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 801b80c:	2b00      	cmp	r3, #0
 801b80e:	d028      	beq.n	801b862 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 801b810:	687b      	ldr	r3, [r7, #4]
 801b812:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801b814:	2b00      	cmp	r3, #0
 801b816:	d124      	bne.n	801b862 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP/PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 801b818:	4b71      	ldr	r3, [pc, #452]	; (801b9e0 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 801b81a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801b81e:	0c1b      	lsrs	r3, r3, #16
 801b820:	f003 0303 	and.w	r3, r3, #3
 801b824:	3301      	adds	r3, #1
 801b826:	005b      	lsls	r3, r3, #1
 801b828:	61fb      	str	r3, [r7, #28]
      plli2sq = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 801b82a:	4b6d      	ldr	r3, [pc, #436]	; (801b9e0 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 801b82c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801b830:	0e1b      	lsrs	r3, r3, #24
 801b832:	f003 030f 	and.w	r3, r3, #15
 801b836:	61bb      	str	r3, [r7, #24]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, plli2sq, PeriphClkInit->PLLI2S.PLLI2SR);
 801b838:	687b      	ldr	r3, [r7, #4]
 801b83a:	685a      	ldr	r2, [r3, #4]
 801b83c:	687b      	ldr	r3, [r7, #4]
 801b83e:	689b      	ldr	r3, [r3, #8]
 801b840:	019b      	lsls	r3, r3, #6
 801b842:	431a      	orrs	r2, r3
 801b844:	69fb      	ldr	r3, [r7, #28]
 801b846:	085b      	lsrs	r3, r3, #1
 801b848:	3b01      	subs	r3, #1
 801b84a:	041b      	lsls	r3, r3, #16
 801b84c:	431a      	orrs	r2, r3
 801b84e:	69bb      	ldr	r3, [r7, #24]
 801b850:	061b      	lsls	r3, r3, #24
 801b852:	431a      	orrs	r2, r3
 801b854:	687b      	ldr	r3, [r7, #4]
 801b856:	695b      	ldr	r3, [r3, #20]
 801b858:	071b      	lsls	r3, r3, #28
 801b85a:	4961      	ldr	r1, [pc, #388]	; (801b9e0 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 801b85c:	4313      	orrs	r3, r2
 801b85e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*------- In Case of PLLI2S is selected as source clock for SAI ----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 801b862:	687b      	ldr	r3, [r7, #4]
 801b864:	681b      	ldr	r3, [r3, #0]
 801b866:	f003 0304 	and.w	r3, r3, #4
 801b86a:	2b00      	cmp	r3, #0
 801b86c:	d004      	beq.n	801b878 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
 801b86e:	687b      	ldr	r3, [r7, #4]
 801b870:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801b872:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 801b876:	d00a      	beq.n	801b88e <HAL_RCCEx_PeriphCLKConfig+0x3e6>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 801b878:	687b      	ldr	r3, [r7, #4]
 801b87a:	681b      	ldr	r3, [r3, #0]
 801b87c:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 801b880:	2b00      	cmp	r3, #0
 801b882:	d035      	beq.n	801b8f0 <HAL_RCCEx_PeriphCLKConfig+0x448>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 801b884:	687b      	ldr	r3, [r7, #4]
 801b886:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801b888:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 801b88c:	d130      	bne.n	801b8f0 <HAL_RCCEx_PeriphCLKConfig+0x448>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP/PLLI2SR value from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 801b88e:	4b54      	ldr	r3, [pc, #336]	; (801b9e0 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 801b890:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801b894:	0c1b      	lsrs	r3, r3, #16
 801b896:	f003 0303 	and.w	r3, r3, #3
 801b89a:	3301      	adds	r3, #1
 801b89c:	005b      	lsls	r3, r3, #1
 801b89e:	61fb      	str	r3, [r7, #28]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 801b8a0:	4b4f      	ldr	r3, [pc, #316]	; (801b9e0 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 801b8a2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801b8a6:	0f1b      	lsrs	r3, r3, #28
 801b8a8:	f003 0307 	and.w	r3, r3, #7
 801b8ac:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, PeriphClkInit->PLLI2S.PLLI2SQ, plli2sr);
 801b8ae:	687b      	ldr	r3, [r7, #4]
 801b8b0:	685a      	ldr	r2, [r3, #4]
 801b8b2:	687b      	ldr	r3, [r7, #4]
 801b8b4:	689b      	ldr	r3, [r3, #8]
 801b8b6:	019b      	lsls	r3, r3, #6
 801b8b8:	431a      	orrs	r2, r3
 801b8ba:	69fb      	ldr	r3, [r7, #28]
 801b8bc:	085b      	lsrs	r3, r3, #1
 801b8be:	3b01      	subs	r3, #1
 801b8c0:	041b      	lsls	r3, r3, #16
 801b8c2:	431a      	orrs	r2, r3
 801b8c4:	687b      	ldr	r3, [r7, #4]
 801b8c6:	691b      	ldr	r3, [r3, #16]
 801b8c8:	061b      	lsls	r3, r3, #24
 801b8ca:	431a      	orrs	r2, r3
 801b8cc:	697b      	ldr	r3, [r7, #20]
 801b8ce:	071b      	lsls	r3, r3, #28
 801b8d0:	4943      	ldr	r1, [pc, #268]	; (801b9e0 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 801b8d2:	4313      	orrs	r3, r2
 801b8d4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 801b8d8:	4b41      	ldr	r3, [pc, #260]	; (801b9e0 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 801b8da:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801b8de:	f023 021f 	bic.w	r2, r3, #31
 801b8e2:	687b      	ldr	r3, [r7, #4]
 801b8e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801b8e6:	3b01      	subs	r3, #1
 801b8e8:	493d      	ldr	r1, [pc, #244]	; (801b9e0 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 801b8ea:	4313      	orrs	r3, r2
 801b8ec:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLI2S is selected as source clock for SPDIFRX -------*/
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX) && (PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP))
 801b8f0:	687b      	ldr	r3, [r7, #4]
 801b8f2:	681b      	ldr	r3, [r3, #0]
 801b8f4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 801b8f8:	2b00      	cmp	r3, #0
 801b8fa:	d029      	beq.n	801b950 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 801b8fc:	687b      	ldr	r3, [r7, #4]
 801b8fe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801b900:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 801b904:	d124      	bne.n	801b950 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      plli2sq = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 801b906:	4b36      	ldr	r3, [pc, #216]	; (801b9e0 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 801b908:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801b90c:	0c1b      	lsrs	r3, r3, #16
 801b90e:	f003 0303 	and.w	r3, r3, #3
 801b912:	3301      	adds	r3, #1
 801b914:	005b      	lsls	r3, r3, #1
 801b916:	61bb      	str	r3, [r7, #24]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 801b918:	4b31      	ldr	r3, [pc, #196]	; (801b9e0 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 801b91a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801b91e:	0f1b      	lsrs	r3, r3, #28
 801b920:	f003 0307 	and.w	r3, r3, #7
 801b924:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, plli2sq, plli2sr);
 801b926:	687b      	ldr	r3, [r7, #4]
 801b928:	685a      	ldr	r2, [r3, #4]
 801b92a:	687b      	ldr	r3, [r7, #4]
 801b92c:	689b      	ldr	r3, [r3, #8]
 801b92e:	019b      	lsls	r3, r3, #6
 801b930:	431a      	orrs	r2, r3
 801b932:	687b      	ldr	r3, [r7, #4]
 801b934:	68db      	ldr	r3, [r3, #12]
 801b936:	085b      	lsrs	r3, r3, #1
 801b938:	3b01      	subs	r3, #1
 801b93a:	041b      	lsls	r3, r3, #16
 801b93c:	431a      	orrs	r2, r3
 801b93e:	69bb      	ldr	r3, [r7, #24]
 801b940:	061b      	lsls	r3, r3, #24
 801b942:	431a      	orrs	r2, r3
 801b944:	697b      	ldr	r3, [r7, #20]
 801b946:	071b      	lsls	r3, r3, #28
 801b948:	4925      	ldr	r1, [pc, #148]	; (801b9e0 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 801b94a:	4313      	orrs	r3, r2
 801b94c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

     /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 801b950:	687b      	ldr	r3, [r7, #4]
 801b952:	681b      	ldr	r3, [r3, #0]
 801b954:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 801b958:	2b00      	cmp	r3, #0
 801b95a:	d016      	beq.n	801b98a <HAL_RCCEx_PeriphCLKConfig+0x4e2>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 801b95c:	687b      	ldr	r3, [r7, #4]
 801b95e:	685a      	ldr	r2, [r3, #4]
 801b960:	687b      	ldr	r3, [r7, #4]
 801b962:	689b      	ldr	r3, [r3, #8]
 801b964:	019b      	lsls	r3, r3, #6
 801b966:	431a      	orrs	r2, r3
 801b968:	687b      	ldr	r3, [r7, #4]
 801b96a:	68db      	ldr	r3, [r3, #12]
 801b96c:	085b      	lsrs	r3, r3, #1
 801b96e:	3b01      	subs	r3, #1
 801b970:	041b      	lsls	r3, r3, #16
 801b972:	431a      	orrs	r2, r3
 801b974:	687b      	ldr	r3, [r7, #4]
 801b976:	691b      	ldr	r3, [r3, #16]
 801b978:	061b      	lsls	r3, r3, #24
 801b97a:	431a      	orrs	r2, r3
 801b97c:	687b      	ldr	r3, [r7, #4]
 801b97e:	695b      	ldr	r3, [r3, #20]
 801b980:	071b      	lsls	r3, r3, #28
 801b982:	4917      	ldr	r1, [pc, #92]	; (801b9e0 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 801b984:	4313      	orrs	r3, r2
 801b986:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 801b98a:	4b16      	ldr	r3, [pc, #88]	; (801b9e4 <HAL_RCCEx_PeriphCLKConfig+0x53c>)
 801b98c:	2201      	movs	r2, #1
 801b98e:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 801b990:	f7fc fe48 	bl	8018624 <HAL_GetTick>
 801b994:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 801b996:	e008      	b.n	801b9aa <HAL_RCCEx_PeriphCLKConfig+0x502>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 801b998:	f7fc fe44 	bl	8018624 <HAL_GetTick>
 801b99c:	4602      	mov	r2, r0
 801b99e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b9a0:	1ad3      	subs	r3, r2, r3
 801b9a2:	2b02      	cmp	r3, #2
 801b9a4:	d901      	bls.n	801b9aa <HAL_RCCEx_PeriphCLKConfig+0x502>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 801b9a6:	2303      	movs	r3, #3
 801b9a8:	e09f      	b.n	801baea <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 801b9aa:	4b0d      	ldr	r3, [pc, #52]	; (801b9e0 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 801b9ac:	681b      	ldr	r3, [r3, #0]
 801b9ae:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 801b9b2:	2b00      	cmp	r3, #0
 801b9b4:	d0f0      	beq.n	801b998 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- PLLSAI Configuration -----------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, CLK48 or SDIO */
  if(pllsaiused == 1U)
 801b9b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801b9b8:	2b01      	cmp	r3, #1
 801b9ba:	f040 8095 	bne.w	801bae8 <HAL_RCCEx_PeriphCLKConfig+0x640>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 801b9be:	4b0a      	ldr	r3, [pc, #40]	; (801b9e8 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 801b9c0:	2200      	movs	r2, #0
 801b9c2:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 801b9c4:	f7fc fe2e 	bl	8018624 <HAL_GetTick>
 801b9c8:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 801b9ca:	e00f      	b.n	801b9ec <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 801b9cc:	f7fc fe2a 	bl	8018624 <HAL_GetTick>
 801b9d0:	4602      	mov	r2, r0
 801b9d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b9d4:	1ad3      	subs	r3, r2, r3
 801b9d6:	2b02      	cmp	r3, #2
 801b9d8:	d908      	bls.n	801b9ec <HAL_RCCEx_PeriphCLKConfig+0x544>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 801b9da:	2303      	movs	r3, #3
 801b9dc:	e085      	b.n	801baea <HAL_RCCEx_PeriphCLKConfig+0x642>
 801b9de:	bf00      	nop
 801b9e0:	40023800 	.word	0x40023800
 801b9e4:	42470068 	.word	0x42470068
 801b9e8:	42470070 	.word	0x42470070
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 801b9ec:	4b41      	ldr	r3, [pc, #260]	; (801baf4 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 801b9ee:	681b      	ldr	r3, [r3, #0]
 801b9f0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 801b9f4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 801b9f8:	d0e8      	beq.n	801b9cc <HAL_RCCEx_PeriphCLKConfig+0x524>
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIM_VALUE(PeriphClkInit->PLLSAI.PLLSAIM));
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*------ In Case of PLLSAI is selected as source clock for SAI -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 801b9fa:	687b      	ldr	r3, [r7, #4]
 801b9fc:	681b      	ldr	r3, [r3, #0]
 801b9fe:	f003 0304 	and.w	r3, r3, #4
 801ba02:	2b00      	cmp	r3, #0
 801ba04:	d003      	beq.n	801ba0e <HAL_RCCEx_PeriphCLKConfig+0x566>
 801ba06:	687b      	ldr	r3, [r7, #4]
 801ba08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801ba0a:	2b00      	cmp	r3, #0
 801ba0c:	d009      	beq.n	801ba22 <HAL_RCCEx_PeriphCLKConfig+0x57a>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 801ba0e:	687b      	ldr	r3, [r7, #4]
 801ba10:	681b      	ldr	r3, [r3, #0]
 801ba12:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 801ba16:	2b00      	cmp	r3, #0
 801ba18:	d02b      	beq.n	801ba72 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 801ba1a:	687b      	ldr	r3, [r7, #4]
 801ba1c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801ba1e:	2b00      	cmp	r3, #0
 801ba20:	d127      	bne.n	801ba72 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 801ba22:	4b34      	ldr	r3, [pc, #208]	; (801baf4 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 801ba24:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801ba28:	0c1b      	lsrs	r3, r3, #16
 801ba2a:	f003 0303 	and.w	r3, r3, #3
 801ba2e:	3301      	adds	r3, #1
 801ba30:	005b      	lsls	r3, r3, #1
 801ba32:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , pllsaip, PeriphClkInit->PLLSAI.PLLSAIQ, 0U);
 801ba34:	687b      	ldr	r3, [r7, #4]
 801ba36:	699a      	ldr	r2, [r3, #24]
 801ba38:	687b      	ldr	r3, [r7, #4]
 801ba3a:	69db      	ldr	r3, [r3, #28]
 801ba3c:	019b      	lsls	r3, r3, #6
 801ba3e:	431a      	orrs	r2, r3
 801ba40:	693b      	ldr	r3, [r7, #16]
 801ba42:	085b      	lsrs	r3, r3, #1
 801ba44:	3b01      	subs	r3, #1
 801ba46:	041b      	lsls	r3, r3, #16
 801ba48:	431a      	orrs	r2, r3
 801ba4a:	687b      	ldr	r3, [r7, #4]
 801ba4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801ba4e:	061b      	lsls	r3, r3, #24
 801ba50:	4928      	ldr	r1, [pc, #160]	; (801baf4 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 801ba52:	4313      	orrs	r3, r2
 801ba54:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 801ba58:	4b26      	ldr	r3, [pc, #152]	; (801baf4 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 801ba5a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801ba5e:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 801ba62:	687b      	ldr	r3, [r7, #4]
 801ba64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801ba66:	3b01      	subs	r3, #1
 801ba68:	021b      	lsls	r3, r3, #8
 801ba6a:	4922      	ldr	r1, [pc, #136]	; (801baf4 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 801ba6c:	4313      	orrs	r3, r2
 801ba6e:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLSAI is selected as source clock for CLK48 ---------*/
    /* In Case of PLLI2S is selected as source clock for CLK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP))
 801ba72:	687b      	ldr	r3, [r7, #4]
 801ba74:	681b      	ldr	r3, [r3, #0]
 801ba76:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801ba7a:	2b00      	cmp	r3, #0
 801ba7c:	d01d      	beq.n	801baba <HAL_RCCEx_PeriphCLKConfig+0x612>
 801ba7e:	687b      	ldr	r3, [r7, #4]
 801ba80:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801ba82:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 801ba86:	d118      	bne.n	801baba <HAL_RCCEx_PeriphCLKConfig+0x612>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 801ba88:	4b1a      	ldr	r3, [pc, #104]	; (801baf4 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 801ba8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801ba8e:	0e1b      	lsrs	r3, r3, #24
 801ba90:	f003 030f 	and.w	r3, r3, #15
 801ba94:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) * (PLLI2SN/PLLSAIM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, pllsaiq, 0U);
 801ba96:	687b      	ldr	r3, [r7, #4]
 801ba98:	699a      	ldr	r2, [r3, #24]
 801ba9a:	687b      	ldr	r3, [r7, #4]
 801ba9c:	69db      	ldr	r3, [r3, #28]
 801ba9e:	019b      	lsls	r3, r3, #6
 801baa0:	431a      	orrs	r2, r3
 801baa2:	687b      	ldr	r3, [r7, #4]
 801baa4:	6a1b      	ldr	r3, [r3, #32]
 801baa6:	085b      	lsrs	r3, r3, #1
 801baa8:	3b01      	subs	r3, #1
 801baaa:	041b      	lsls	r3, r3, #16
 801baac:	431a      	orrs	r2, r3
 801baae:	68fb      	ldr	r3, [r7, #12]
 801bab0:	061b      	lsls	r3, r3, #24
 801bab2:	4910      	ldr	r1, [pc, #64]	; (801baf4 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 801bab4:	4313      	orrs	r3, r2
 801bab6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 801baba:	4b0f      	ldr	r3, [pc, #60]	; (801baf8 <HAL_RCCEx_PeriphCLKConfig+0x650>)
 801babc:	2201      	movs	r2, #1
 801babe:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 801bac0:	f7fc fdb0 	bl	8018624 <HAL_GetTick>
 801bac4:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 801bac6:	e008      	b.n	801bada <HAL_RCCEx_PeriphCLKConfig+0x632>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 801bac8:	f7fc fdac 	bl	8018624 <HAL_GetTick>
 801bacc:	4602      	mov	r2, r0
 801bace:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801bad0:	1ad3      	subs	r3, r2, r3
 801bad2:	2b02      	cmp	r3, #2
 801bad4:	d901      	bls.n	801bada <HAL_RCCEx_PeriphCLKConfig+0x632>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 801bad6:	2303      	movs	r3, #3
 801bad8:	e007      	b.n	801baea <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 801bada:	4b06      	ldr	r3, [pc, #24]	; (801baf4 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 801badc:	681b      	ldr	r3, [r3, #0]
 801bade:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 801bae2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 801bae6:	d1ef      	bne.n	801bac8 <HAL_RCCEx_PeriphCLKConfig+0x620>
      }
    }
  }
  return HAL_OK;
 801bae8:	2300      	movs	r3, #0
}
 801baea:	4618      	mov	r0, r3
 801baec:	3730      	adds	r7, #48	; 0x30
 801baee:	46bd      	mov	sp, r7
 801baf0:	bd80      	pop	{r7, pc}
 801baf2:	bf00      	nop
 801baf4:	40023800 	.word	0x40023800
 801baf8:	42470070 	.word	0x42470070

0801bafc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 801bafc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801bb00:	b087      	sub	sp, #28
 801bb02:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 801bb04:	2600      	movs	r6, #0
 801bb06:	60fe      	str	r6, [r7, #12]
  uint32_t pllvco = 0U;
 801bb08:	2600      	movs	r6, #0
 801bb0a:	617e      	str	r6, [r7, #20]
  uint32_t pllp = 0U;
 801bb0c:	2600      	movs	r6, #0
 801bb0e:	60be      	str	r6, [r7, #8]
  uint32_t pllr = 0U;
 801bb10:	2600      	movs	r6, #0
 801bb12:	607e      	str	r6, [r7, #4]
  uint32_t sysclockfreq = 0U;
 801bb14:	2600      	movs	r6, #0
 801bb16:	613e      	str	r6, [r7, #16]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 801bb18:	4ea3      	ldr	r6, [pc, #652]	; (801bda8 <HAL_RCC_GetSysClockFreq+0x2ac>)
 801bb1a:	68b6      	ldr	r6, [r6, #8]
 801bb1c:	f006 060c 	and.w	r6, r6, #12
 801bb20:	2e0c      	cmp	r6, #12
 801bb22:	f200 8137 	bhi.w	801bd94 <HAL_RCC_GetSysClockFreq+0x298>
 801bb26:	f20f 0c08 	addw	ip, pc, #8
 801bb2a:	f85c f026 	ldr.w	pc, [ip, r6, lsl #2]
 801bb2e:	bf00      	nop
 801bb30:	0801bb65 	.word	0x0801bb65
 801bb34:	0801bd95 	.word	0x0801bd95
 801bb38:	0801bd95 	.word	0x0801bd95
 801bb3c:	0801bd95 	.word	0x0801bd95
 801bb40:	0801bb6b 	.word	0x0801bb6b
 801bb44:	0801bd95 	.word	0x0801bd95
 801bb48:	0801bd95 	.word	0x0801bd95
 801bb4c:	0801bd95 	.word	0x0801bd95
 801bb50:	0801bb71 	.word	0x0801bb71
 801bb54:	0801bd95 	.word	0x0801bd95
 801bb58:	0801bd95 	.word	0x0801bd95
 801bb5c:	0801bd95 	.word	0x0801bd95
 801bb60:	0801bc87 	.word	0x0801bc87
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 801bb64:	4b91      	ldr	r3, [pc, #580]	; (801bdac <HAL_RCC_GetSysClockFreq+0x2b0>)
 801bb66:	613b      	str	r3, [r7, #16]
       break;
 801bb68:	e117      	b.n	801bd9a <HAL_RCC_GetSysClockFreq+0x29e>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 801bb6a:	4b91      	ldr	r3, [pc, #580]	; (801bdb0 <HAL_RCC_GetSysClockFreq+0x2b4>)
 801bb6c:	613b      	str	r3, [r7, #16]
      break;
 801bb6e:	e114      	b.n	801bd9a <HAL_RCC_GetSysClockFreq+0x29e>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 801bb70:	4b8d      	ldr	r3, [pc, #564]	; (801bda8 <HAL_RCC_GetSysClockFreq+0x2ac>)
 801bb72:	685b      	ldr	r3, [r3, #4]
 801bb74:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801bb78:	60fb      	str	r3, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 801bb7a:	4b8b      	ldr	r3, [pc, #556]	; (801bda8 <HAL_RCC_GetSysClockFreq+0x2ac>)
 801bb7c:	685b      	ldr	r3, [r3, #4]
 801bb7e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 801bb82:	2b00      	cmp	r3, #0
 801bb84:	d024      	beq.n	801bbd0 <HAL_RCC_GetSysClockFreq+0xd4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 801bb86:	4b88      	ldr	r3, [pc, #544]	; (801bda8 <HAL_RCC_GetSysClockFreq+0x2ac>)
 801bb88:	685b      	ldr	r3, [r3, #4]
 801bb8a:	099b      	lsrs	r3, r3, #6
 801bb8c:	461a      	mov	r2, r3
 801bb8e:	f04f 0300 	mov.w	r3, #0
 801bb92:	f240 14ff 	movw	r4, #511	; 0x1ff
 801bb96:	f04f 0500 	mov.w	r5, #0
 801bb9a:	ea02 0004 	and.w	r0, r2, r4
 801bb9e:	ea03 0105 	and.w	r1, r3, r5
 801bba2:	4b83      	ldr	r3, [pc, #524]	; (801bdb0 <HAL_RCC_GetSysClockFreq+0x2b4>)
 801bba4:	fb03 f201 	mul.w	r2, r3, r1
 801bba8:	2300      	movs	r3, #0
 801bbaa:	fb03 f300 	mul.w	r3, r3, r0
 801bbae:	4413      	add	r3, r2
 801bbb0:	4a7f      	ldr	r2, [pc, #508]	; (801bdb0 <HAL_RCC_GetSysClockFreq+0x2b4>)
 801bbb2:	fba0 0102 	umull	r0, r1, r0, r2
 801bbb6:	440b      	add	r3, r1
 801bbb8:	4619      	mov	r1, r3
 801bbba:	68fb      	ldr	r3, [r7, #12]
 801bbbc:	461a      	mov	r2, r3
 801bbbe:	f04f 0300 	mov.w	r3, #0
 801bbc2:	f7f0 fa45 	bl	800c050 <__aeabi_uldivmod>
 801bbc6:	4602      	mov	r2, r0
 801bbc8:	460b      	mov	r3, r1
 801bbca:	4613      	mov	r3, r2
 801bbcc:	617b      	str	r3, [r7, #20]
 801bbce:	e04c      	b.n	801bc6a <HAL_RCC_GetSysClockFreq+0x16e>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 801bbd0:	4b75      	ldr	r3, [pc, #468]	; (801bda8 <HAL_RCC_GetSysClockFreq+0x2ac>)
 801bbd2:	685b      	ldr	r3, [r3, #4]
 801bbd4:	099b      	lsrs	r3, r3, #6
 801bbd6:	461a      	mov	r2, r3
 801bbd8:	f04f 0300 	mov.w	r3, #0
 801bbdc:	f240 10ff 	movw	r0, #511	; 0x1ff
 801bbe0:	f04f 0100 	mov.w	r1, #0
 801bbe4:	ea02 0800 	and.w	r8, r2, r0
 801bbe8:	ea03 0901 	and.w	r9, r3, r1
 801bbec:	4640      	mov	r0, r8
 801bbee:	4649      	mov	r1, r9
 801bbf0:	f04f 0200 	mov.w	r2, #0
 801bbf4:	f04f 0300 	mov.w	r3, #0
 801bbf8:	014b      	lsls	r3, r1, #5
 801bbfa:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 801bbfe:	0142      	lsls	r2, r0, #5
 801bc00:	4610      	mov	r0, r2
 801bc02:	4619      	mov	r1, r3
 801bc04:	ebb0 0008 	subs.w	r0, r0, r8
 801bc08:	eb61 0109 	sbc.w	r1, r1, r9
 801bc0c:	f04f 0200 	mov.w	r2, #0
 801bc10:	f04f 0300 	mov.w	r3, #0
 801bc14:	018b      	lsls	r3, r1, #6
 801bc16:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 801bc1a:	0182      	lsls	r2, r0, #6
 801bc1c:	1a12      	subs	r2, r2, r0
 801bc1e:	eb63 0301 	sbc.w	r3, r3, r1
 801bc22:	f04f 0000 	mov.w	r0, #0
 801bc26:	f04f 0100 	mov.w	r1, #0
 801bc2a:	00d9      	lsls	r1, r3, #3
 801bc2c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 801bc30:	00d0      	lsls	r0, r2, #3
 801bc32:	4602      	mov	r2, r0
 801bc34:	460b      	mov	r3, r1
 801bc36:	eb12 0208 	adds.w	r2, r2, r8
 801bc3a:	eb43 0309 	adc.w	r3, r3, r9
 801bc3e:	f04f 0000 	mov.w	r0, #0
 801bc42:	f04f 0100 	mov.w	r1, #0
 801bc46:	0299      	lsls	r1, r3, #10
 801bc48:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 801bc4c:	0290      	lsls	r0, r2, #10
 801bc4e:	4602      	mov	r2, r0
 801bc50:	460b      	mov	r3, r1
 801bc52:	4610      	mov	r0, r2
 801bc54:	4619      	mov	r1, r3
 801bc56:	68fb      	ldr	r3, [r7, #12]
 801bc58:	461a      	mov	r2, r3
 801bc5a:	f04f 0300 	mov.w	r3, #0
 801bc5e:	f7f0 f9f7 	bl	800c050 <__aeabi_uldivmod>
 801bc62:	4602      	mov	r2, r0
 801bc64:	460b      	mov	r3, r1
 801bc66:	4613      	mov	r3, r2
 801bc68:	617b      	str	r3, [r7, #20]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 801bc6a:	4b4f      	ldr	r3, [pc, #316]	; (801bda8 <HAL_RCC_GetSysClockFreq+0x2ac>)
 801bc6c:	685b      	ldr	r3, [r3, #4]
 801bc6e:	0c1b      	lsrs	r3, r3, #16
 801bc70:	f003 0303 	and.w	r3, r3, #3
 801bc74:	3301      	adds	r3, #1
 801bc76:	005b      	lsls	r3, r3, #1
 801bc78:	60bb      	str	r3, [r7, #8]

      sysclockfreq = pllvco/pllp;
 801bc7a:	697a      	ldr	r2, [r7, #20]
 801bc7c:	68bb      	ldr	r3, [r7, #8]
 801bc7e:	fbb2 f3f3 	udiv	r3, r2, r3
 801bc82:	613b      	str	r3, [r7, #16]
      break;
 801bc84:	e089      	b.n	801bd9a <HAL_RCC_GetSysClockFreq+0x29e>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 801bc86:	4948      	ldr	r1, [pc, #288]	; (801bda8 <HAL_RCC_GetSysClockFreq+0x2ac>)
 801bc88:	6849      	ldr	r1, [r1, #4]
 801bc8a:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 801bc8e:	60f9      	str	r1, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 801bc90:	4945      	ldr	r1, [pc, #276]	; (801bda8 <HAL_RCC_GetSysClockFreq+0x2ac>)
 801bc92:	6849      	ldr	r1, [r1, #4]
 801bc94:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 801bc98:	2900      	cmp	r1, #0
 801bc9a:	d024      	beq.n	801bce6 <HAL_RCC_GetSysClockFreq+0x1ea>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 801bc9c:	4942      	ldr	r1, [pc, #264]	; (801bda8 <HAL_RCC_GetSysClockFreq+0x2ac>)
 801bc9e:	6849      	ldr	r1, [r1, #4]
 801bca0:	0989      	lsrs	r1, r1, #6
 801bca2:	4608      	mov	r0, r1
 801bca4:	f04f 0100 	mov.w	r1, #0
 801bca8:	f240 14ff 	movw	r4, #511	; 0x1ff
 801bcac:	f04f 0500 	mov.w	r5, #0
 801bcb0:	ea00 0204 	and.w	r2, r0, r4
 801bcb4:	ea01 0305 	and.w	r3, r1, r5
 801bcb8:	493d      	ldr	r1, [pc, #244]	; (801bdb0 <HAL_RCC_GetSysClockFreq+0x2b4>)
 801bcba:	fb01 f003 	mul.w	r0, r1, r3
 801bcbe:	2100      	movs	r1, #0
 801bcc0:	fb01 f102 	mul.w	r1, r1, r2
 801bcc4:	1844      	adds	r4, r0, r1
 801bcc6:	493a      	ldr	r1, [pc, #232]	; (801bdb0 <HAL_RCC_GetSysClockFreq+0x2b4>)
 801bcc8:	fba2 0101 	umull	r0, r1, r2, r1
 801bccc:	1863      	adds	r3, r4, r1
 801bcce:	4619      	mov	r1, r3
 801bcd0:	68fb      	ldr	r3, [r7, #12]
 801bcd2:	461a      	mov	r2, r3
 801bcd4:	f04f 0300 	mov.w	r3, #0
 801bcd8:	f7f0 f9ba 	bl	800c050 <__aeabi_uldivmod>
 801bcdc:	4602      	mov	r2, r0
 801bcde:	460b      	mov	r3, r1
 801bce0:	4613      	mov	r3, r2
 801bce2:	617b      	str	r3, [r7, #20]
 801bce4:	e04a      	b.n	801bd7c <HAL_RCC_GetSysClockFreq+0x280>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 801bce6:	4b30      	ldr	r3, [pc, #192]	; (801bda8 <HAL_RCC_GetSysClockFreq+0x2ac>)
 801bce8:	685b      	ldr	r3, [r3, #4]
 801bcea:	099b      	lsrs	r3, r3, #6
 801bcec:	461a      	mov	r2, r3
 801bcee:	f04f 0300 	mov.w	r3, #0
 801bcf2:	f240 10ff 	movw	r0, #511	; 0x1ff
 801bcf6:	f04f 0100 	mov.w	r1, #0
 801bcfa:	ea02 0400 	and.w	r4, r2, r0
 801bcfe:	ea03 0501 	and.w	r5, r3, r1
 801bd02:	4620      	mov	r0, r4
 801bd04:	4629      	mov	r1, r5
 801bd06:	f04f 0200 	mov.w	r2, #0
 801bd0a:	f04f 0300 	mov.w	r3, #0
 801bd0e:	014b      	lsls	r3, r1, #5
 801bd10:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 801bd14:	0142      	lsls	r2, r0, #5
 801bd16:	4610      	mov	r0, r2
 801bd18:	4619      	mov	r1, r3
 801bd1a:	1b00      	subs	r0, r0, r4
 801bd1c:	eb61 0105 	sbc.w	r1, r1, r5
 801bd20:	f04f 0200 	mov.w	r2, #0
 801bd24:	f04f 0300 	mov.w	r3, #0
 801bd28:	018b      	lsls	r3, r1, #6
 801bd2a:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 801bd2e:	0182      	lsls	r2, r0, #6
 801bd30:	1a12      	subs	r2, r2, r0
 801bd32:	eb63 0301 	sbc.w	r3, r3, r1
 801bd36:	f04f 0000 	mov.w	r0, #0
 801bd3a:	f04f 0100 	mov.w	r1, #0
 801bd3e:	00d9      	lsls	r1, r3, #3
 801bd40:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 801bd44:	00d0      	lsls	r0, r2, #3
 801bd46:	4602      	mov	r2, r0
 801bd48:	460b      	mov	r3, r1
 801bd4a:	1912      	adds	r2, r2, r4
 801bd4c:	eb45 0303 	adc.w	r3, r5, r3
 801bd50:	f04f 0000 	mov.w	r0, #0
 801bd54:	f04f 0100 	mov.w	r1, #0
 801bd58:	0299      	lsls	r1, r3, #10
 801bd5a:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 801bd5e:	0290      	lsls	r0, r2, #10
 801bd60:	4602      	mov	r2, r0
 801bd62:	460b      	mov	r3, r1
 801bd64:	4610      	mov	r0, r2
 801bd66:	4619      	mov	r1, r3
 801bd68:	68fb      	ldr	r3, [r7, #12]
 801bd6a:	461a      	mov	r2, r3
 801bd6c:	f04f 0300 	mov.w	r3, #0
 801bd70:	f7f0 f96e 	bl	800c050 <__aeabi_uldivmod>
 801bd74:	4602      	mov	r2, r0
 801bd76:	460b      	mov	r3, r1
 801bd78:	4613      	mov	r3, r2
 801bd7a:	617b      	str	r3, [r7, #20]
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 801bd7c:	4b0a      	ldr	r3, [pc, #40]	; (801bda8 <HAL_RCC_GetSysClockFreq+0x2ac>)
 801bd7e:	685b      	ldr	r3, [r3, #4]
 801bd80:	0f1b      	lsrs	r3, r3, #28
 801bd82:	f003 0307 	and.w	r3, r3, #7
 801bd86:	607b      	str	r3, [r7, #4]

      sysclockfreq = pllvco/pllr;
 801bd88:	697a      	ldr	r2, [r7, #20]
 801bd8a:	687b      	ldr	r3, [r7, #4]
 801bd8c:	fbb2 f3f3 	udiv	r3, r2, r3
 801bd90:	613b      	str	r3, [r7, #16]
      break;
 801bd92:	e002      	b.n	801bd9a <HAL_RCC_GetSysClockFreq+0x29e>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 801bd94:	4b05      	ldr	r3, [pc, #20]	; (801bdac <HAL_RCC_GetSysClockFreq+0x2b0>)
 801bd96:	613b      	str	r3, [r7, #16]
      break;
 801bd98:	bf00      	nop
    }
  }
  return sysclockfreq;
 801bd9a:	693b      	ldr	r3, [r7, #16]
}
 801bd9c:	4618      	mov	r0, r3
 801bd9e:	371c      	adds	r7, #28
 801bda0:	46bd      	mov	sp, r7
 801bda2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801bda6:	bf00      	nop
 801bda8:	40023800 	.word	0x40023800
 801bdac:	00f42400 	.word	0x00f42400
 801bdb0:	017d7840 	.word	0x017d7840

0801bdb4 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 801bdb4:	b580      	push	{r7, lr}
 801bdb6:	b086      	sub	sp, #24
 801bdb8:	af00      	add	r7, sp, #0
 801bdba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 801bdbc:	687b      	ldr	r3, [r7, #4]
 801bdbe:	2b00      	cmp	r3, #0
 801bdc0:	d101      	bne.n	801bdc6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 801bdc2:	2301      	movs	r3, #1
 801bdc4:	e28d      	b.n	801c2e2 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 801bdc6:	687b      	ldr	r3, [r7, #4]
 801bdc8:	681b      	ldr	r3, [r3, #0]
 801bdca:	f003 0301 	and.w	r3, r3, #1
 801bdce:	2b00      	cmp	r3, #0
 801bdd0:	f000 8083 	beq.w	801beda <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 801bdd4:	4b94      	ldr	r3, [pc, #592]	; (801c028 <HAL_RCC_OscConfig+0x274>)
 801bdd6:	689b      	ldr	r3, [r3, #8]
 801bdd8:	f003 030c 	and.w	r3, r3, #12
 801bddc:	2b04      	cmp	r3, #4
 801bdde:	d019      	beq.n	801be14 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 801bde0:	4b91      	ldr	r3, [pc, #580]	; (801c028 <HAL_RCC_OscConfig+0x274>)
 801bde2:	689b      	ldr	r3, [r3, #8]
 801bde4:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 801bde8:	2b08      	cmp	r3, #8
 801bdea:	d106      	bne.n	801bdfa <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 801bdec:	4b8e      	ldr	r3, [pc, #568]	; (801c028 <HAL_RCC_OscConfig+0x274>)
 801bdee:	685b      	ldr	r3, [r3, #4]
 801bdf0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 801bdf4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 801bdf8:	d00c      	beq.n	801be14 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 801bdfa:	4b8b      	ldr	r3, [pc, #556]	; (801c028 <HAL_RCC_OscConfig+0x274>)
 801bdfc:	689b      	ldr	r3, [r3, #8]
 801bdfe:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 801be02:	2b0c      	cmp	r3, #12
 801be04:	d112      	bne.n	801be2c <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 801be06:	4b88      	ldr	r3, [pc, #544]	; (801c028 <HAL_RCC_OscConfig+0x274>)
 801be08:	685b      	ldr	r3, [r3, #4]
 801be0a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 801be0e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 801be12:	d10b      	bne.n	801be2c <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 801be14:	4b84      	ldr	r3, [pc, #528]	; (801c028 <HAL_RCC_OscConfig+0x274>)
 801be16:	681b      	ldr	r3, [r3, #0]
 801be18:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801be1c:	2b00      	cmp	r3, #0
 801be1e:	d05b      	beq.n	801bed8 <HAL_RCC_OscConfig+0x124>
 801be20:	687b      	ldr	r3, [r7, #4]
 801be22:	685b      	ldr	r3, [r3, #4]
 801be24:	2b00      	cmp	r3, #0
 801be26:	d157      	bne.n	801bed8 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 801be28:	2301      	movs	r3, #1
 801be2a:	e25a      	b.n	801c2e2 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 801be2c:	687b      	ldr	r3, [r7, #4]
 801be2e:	685b      	ldr	r3, [r3, #4]
 801be30:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801be34:	d106      	bne.n	801be44 <HAL_RCC_OscConfig+0x90>
 801be36:	4b7c      	ldr	r3, [pc, #496]	; (801c028 <HAL_RCC_OscConfig+0x274>)
 801be38:	681b      	ldr	r3, [r3, #0]
 801be3a:	4a7b      	ldr	r2, [pc, #492]	; (801c028 <HAL_RCC_OscConfig+0x274>)
 801be3c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 801be40:	6013      	str	r3, [r2, #0]
 801be42:	e01d      	b.n	801be80 <HAL_RCC_OscConfig+0xcc>
 801be44:	687b      	ldr	r3, [r7, #4]
 801be46:	685b      	ldr	r3, [r3, #4]
 801be48:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 801be4c:	d10c      	bne.n	801be68 <HAL_RCC_OscConfig+0xb4>
 801be4e:	4b76      	ldr	r3, [pc, #472]	; (801c028 <HAL_RCC_OscConfig+0x274>)
 801be50:	681b      	ldr	r3, [r3, #0]
 801be52:	4a75      	ldr	r2, [pc, #468]	; (801c028 <HAL_RCC_OscConfig+0x274>)
 801be54:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 801be58:	6013      	str	r3, [r2, #0]
 801be5a:	4b73      	ldr	r3, [pc, #460]	; (801c028 <HAL_RCC_OscConfig+0x274>)
 801be5c:	681b      	ldr	r3, [r3, #0]
 801be5e:	4a72      	ldr	r2, [pc, #456]	; (801c028 <HAL_RCC_OscConfig+0x274>)
 801be60:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 801be64:	6013      	str	r3, [r2, #0]
 801be66:	e00b      	b.n	801be80 <HAL_RCC_OscConfig+0xcc>
 801be68:	4b6f      	ldr	r3, [pc, #444]	; (801c028 <HAL_RCC_OscConfig+0x274>)
 801be6a:	681b      	ldr	r3, [r3, #0]
 801be6c:	4a6e      	ldr	r2, [pc, #440]	; (801c028 <HAL_RCC_OscConfig+0x274>)
 801be6e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 801be72:	6013      	str	r3, [r2, #0]
 801be74:	4b6c      	ldr	r3, [pc, #432]	; (801c028 <HAL_RCC_OscConfig+0x274>)
 801be76:	681b      	ldr	r3, [r3, #0]
 801be78:	4a6b      	ldr	r2, [pc, #428]	; (801c028 <HAL_RCC_OscConfig+0x274>)
 801be7a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 801be7e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 801be80:	687b      	ldr	r3, [r7, #4]
 801be82:	685b      	ldr	r3, [r3, #4]
 801be84:	2b00      	cmp	r3, #0
 801be86:	d013      	beq.n	801beb0 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801be88:	f7fc fbcc 	bl	8018624 <HAL_GetTick>
 801be8c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 801be8e:	e008      	b.n	801bea2 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 801be90:	f7fc fbc8 	bl	8018624 <HAL_GetTick>
 801be94:	4602      	mov	r2, r0
 801be96:	693b      	ldr	r3, [r7, #16]
 801be98:	1ad3      	subs	r3, r2, r3
 801be9a:	2b64      	cmp	r3, #100	; 0x64
 801be9c:	d901      	bls.n	801bea2 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 801be9e:	2303      	movs	r3, #3
 801bea0:	e21f      	b.n	801c2e2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 801bea2:	4b61      	ldr	r3, [pc, #388]	; (801c028 <HAL_RCC_OscConfig+0x274>)
 801bea4:	681b      	ldr	r3, [r3, #0]
 801bea6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801beaa:	2b00      	cmp	r3, #0
 801beac:	d0f0      	beq.n	801be90 <HAL_RCC_OscConfig+0xdc>
 801beae:	e014      	b.n	801beda <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801beb0:	f7fc fbb8 	bl	8018624 <HAL_GetTick>
 801beb4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 801beb6:	e008      	b.n	801beca <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 801beb8:	f7fc fbb4 	bl	8018624 <HAL_GetTick>
 801bebc:	4602      	mov	r2, r0
 801bebe:	693b      	ldr	r3, [r7, #16]
 801bec0:	1ad3      	subs	r3, r2, r3
 801bec2:	2b64      	cmp	r3, #100	; 0x64
 801bec4:	d901      	bls.n	801beca <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 801bec6:	2303      	movs	r3, #3
 801bec8:	e20b      	b.n	801c2e2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 801beca:	4b57      	ldr	r3, [pc, #348]	; (801c028 <HAL_RCC_OscConfig+0x274>)
 801becc:	681b      	ldr	r3, [r3, #0]
 801bece:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801bed2:	2b00      	cmp	r3, #0
 801bed4:	d1f0      	bne.n	801beb8 <HAL_RCC_OscConfig+0x104>
 801bed6:	e000      	b.n	801beda <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 801bed8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 801beda:	687b      	ldr	r3, [r7, #4]
 801bedc:	681b      	ldr	r3, [r3, #0]
 801bede:	f003 0302 	and.w	r3, r3, #2
 801bee2:	2b00      	cmp	r3, #0
 801bee4:	d06f      	beq.n	801bfc6 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 801bee6:	4b50      	ldr	r3, [pc, #320]	; (801c028 <HAL_RCC_OscConfig+0x274>)
 801bee8:	689b      	ldr	r3, [r3, #8]
 801beea:	f003 030c 	and.w	r3, r3, #12
 801beee:	2b00      	cmp	r3, #0
 801bef0:	d017      	beq.n	801bf22 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 801bef2:	4b4d      	ldr	r3, [pc, #308]	; (801c028 <HAL_RCC_OscConfig+0x274>)
 801bef4:	689b      	ldr	r3, [r3, #8]
 801bef6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 801befa:	2b08      	cmp	r3, #8
 801befc:	d105      	bne.n	801bf0a <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 801befe:	4b4a      	ldr	r3, [pc, #296]	; (801c028 <HAL_RCC_OscConfig+0x274>)
 801bf00:	685b      	ldr	r3, [r3, #4]
 801bf02:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 801bf06:	2b00      	cmp	r3, #0
 801bf08:	d00b      	beq.n	801bf22 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 801bf0a:	4b47      	ldr	r3, [pc, #284]	; (801c028 <HAL_RCC_OscConfig+0x274>)
 801bf0c:	689b      	ldr	r3, [r3, #8]
 801bf0e:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 801bf12:	2b0c      	cmp	r3, #12
 801bf14:	d11c      	bne.n	801bf50 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 801bf16:	4b44      	ldr	r3, [pc, #272]	; (801c028 <HAL_RCC_OscConfig+0x274>)
 801bf18:	685b      	ldr	r3, [r3, #4]
 801bf1a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 801bf1e:	2b00      	cmp	r3, #0
 801bf20:	d116      	bne.n	801bf50 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 801bf22:	4b41      	ldr	r3, [pc, #260]	; (801c028 <HAL_RCC_OscConfig+0x274>)
 801bf24:	681b      	ldr	r3, [r3, #0]
 801bf26:	f003 0302 	and.w	r3, r3, #2
 801bf2a:	2b00      	cmp	r3, #0
 801bf2c:	d005      	beq.n	801bf3a <HAL_RCC_OscConfig+0x186>
 801bf2e:	687b      	ldr	r3, [r7, #4]
 801bf30:	68db      	ldr	r3, [r3, #12]
 801bf32:	2b01      	cmp	r3, #1
 801bf34:	d001      	beq.n	801bf3a <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 801bf36:	2301      	movs	r3, #1
 801bf38:	e1d3      	b.n	801c2e2 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 801bf3a:	4b3b      	ldr	r3, [pc, #236]	; (801c028 <HAL_RCC_OscConfig+0x274>)
 801bf3c:	681b      	ldr	r3, [r3, #0]
 801bf3e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 801bf42:	687b      	ldr	r3, [r7, #4]
 801bf44:	691b      	ldr	r3, [r3, #16]
 801bf46:	00db      	lsls	r3, r3, #3
 801bf48:	4937      	ldr	r1, [pc, #220]	; (801c028 <HAL_RCC_OscConfig+0x274>)
 801bf4a:	4313      	orrs	r3, r2
 801bf4c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 801bf4e:	e03a      	b.n	801bfc6 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 801bf50:	687b      	ldr	r3, [r7, #4]
 801bf52:	68db      	ldr	r3, [r3, #12]
 801bf54:	2b00      	cmp	r3, #0
 801bf56:	d020      	beq.n	801bf9a <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 801bf58:	4b34      	ldr	r3, [pc, #208]	; (801c02c <HAL_RCC_OscConfig+0x278>)
 801bf5a:	2201      	movs	r2, #1
 801bf5c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801bf5e:	f7fc fb61 	bl	8018624 <HAL_GetTick>
 801bf62:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 801bf64:	e008      	b.n	801bf78 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 801bf66:	f7fc fb5d 	bl	8018624 <HAL_GetTick>
 801bf6a:	4602      	mov	r2, r0
 801bf6c:	693b      	ldr	r3, [r7, #16]
 801bf6e:	1ad3      	subs	r3, r2, r3
 801bf70:	2b02      	cmp	r3, #2
 801bf72:	d901      	bls.n	801bf78 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 801bf74:	2303      	movs	r3, #3
 801bf76:	e1b4      	b.n	801c2e2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 801bf78:	4b2b      	ldr	r3, [pc, #172]	; (801c028 <HAL_RCC_OscConfig+0x274>)
 801bf7a:	681b      	ldr	r3, [r3, #0]
 801bf7c:	f003 0302 	and.w	r3, r3, #2
 801bf80:	2b00      	cmp	r3, #0
 801bf82:	d0f0      	beq.n	801bf66 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 801bf84:	4b28      	ldr	r3, [pc, #160]	; (801c028 <HAL_RCC_OscConfig+0x274>)
 801bf86:	681b      	ldr	r3, [r3, #0]
 801bf88:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 801bf8c:	687b      	ldr	r3, [r7, #4]
 801bf8e:	691b      	ldr	r3, [r3, #16]
 801bf90:	00db      	lsls	r3, r3, #3
 801bf92:	4925      	ldr	r1, [pc, #148]	; (801c028 <HAL_RCC_OscConfig+0x274>)
 801bf94:	4313      	orrs	r3, r2
 801bf96:	600b      	str	r3, [r1, #0]
 801bf98:	e015      	b.n	801bfc6 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 801bf9a:	4b24      	ldr	r3, [pc, #144]	; (801c02c <HAL_RCC_OscConfig+0x278>)
 801bf9c:	2200      	movs	r2, #0
 801bf9e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801bfa0:	f7fc fb40 	bl	8018624 <HAL_GetTick>
 801bfa4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 801bfa6:	e008      	b.n	801bfba <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 801bfa8:	f7fc fb3c 	bl	8018624 <HAL_GetTick>
 801bfac:	4602      	mov	r2, r0
 801bfae:	693b      	ldr	r3, [r7, #16]
 801bfb0:	1ad3      	subs	r3, r2, r3
 801bfb2:	2b02      	cmp	r3, #2
 801bfb4:	d901      	bls.n	801bfba <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 801bfb6:	2303      	movs	r3, #3
 801bfb8:	e193      	b.n	801c2e2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 801bfba:	4b1b      	ldr	r3, [pc, #108]	; (801c028 <HAL_RCC_OscConfig+0x274>)
 801bfbc:	681b      	ldr	r3, [r3, #0]
 801bfbe:	f003 0302 	and.w	r3, r3, #2
 801bfc2:	2b00      	cmp	r3, #0
 801bfc4:	d1f0      	bne.n	801bfa8 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 801bfc6:	687b      	ldr	r3, [r7, #4]
 801bfc8:	681b      	ldr	r3, [r3, #0]
 801bfca:	f003 0308 	and.w	r3, r3, #8
 801bfce:	2b00      	cmp	r3, #0
 801bfd0:	d036      	beq.n	801c040 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 801bfd2:	687b      	ldr	r3, [r7, #4]
 801bfd4:	695b      	ldr	r3, [r3, #20]
 801bfd6:	2b00      	cmp	r3, #0
 801bfd8:	d016      	beq.n	801c008 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 801bfda:	4b15      	ldr	r3, [pc, #84]	; (801c030 <HAL_RCC_OscConfig+0x27c>)
 801bfdc:	2201      	movs	r2, #1
 801bfde:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 801bfe0:	f7fc fb20 	bl	8018624 <HAL_GetTick>
 801bfe4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 801bfe6:	e008      	b.n	801bffa <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 801bfe8:	f7fc fb1c 	bl	8018624 <HAL_GetTick>
 801bfec:	4602      	mov	r2, r0
 801bfee:	693b      	ldr	r3, [r7, #16]
 801bff0:	1ad3      	subs	r3, r2, r3
 801bff2:	2b02      	cmp	r3, #2
 801bff4:	d901      	bls.n	801bffa <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 801bff6:	2303      	movs	r3, #3
 801bff8:	e173      	b.n	801c2e2 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 801bffa:	4b0b      	ldr	r3, [pc, #44]	; (801c028 <HAL_RCC_OscConfig+0x274>)
 801bffc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801bffe:	f003 0302 	and.w	r3, r3, #2
 801c002:	2b00      	cmp	r3, #0
 801c004:	d0f0      	beq.n	801bfe8 <HAL_RCC_OscConfig+0x234>
 801c006:	e01b      	b.n	801c040 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 801c008:	4b09      	ldr	r3, [pc, #36]	; (801c030 <HAL_RCC_OscConfig+0x27c>)
 801c00a:	2200      	movs	r2, #0
 801c00c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 801c00e:	f7fc fb09 	bl	8018624 <HAL_GetTick>
 801c012:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 801c014:	e00e      	b.n	801c034 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 801c016:	f7fc fb05 	bl	8018624 <HAL_GetTick>
 801c01a:	4602      	mov	r2, r0
 801c01c:	693b      	ldr	r3, [r7, #16]
 801c01e:	1ad3      	subs	r3, r2, r3
 801c020:	2b02      	cmp	r3, #2
 801c022:	d907      	bls.n	801c034 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 801c024:	2303      	movs	r3, #3
 801c026:	e15c      	b.n	801c2e2 <HAL_RCC_OscConfig+0x52e>
 801c028:	40023800 	.word	0x40023800
 801c02c:	42470000 	.word	0x42470000
 801c030:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 801c034:	4b8a      	ldr	r3, [pc, #552]	; (801c260 <HAL_RCC_OscConfig+0x4ac>)
 801c036:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801c038:	f003 0302 	and.w	r3, r3, #2
 801c03c:	2b00      	cmp	r3, #0
 801c03e:	d1ea      	bne.n	801c016 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 801c040:	687b      	ldr	r3, [r7, #4]
 801c042:	681b      	ldr	r3, [r3, #0]
 801c044:	f003 0304 	and.w	r3, r3, #4
 801c048:	2b00      	cmp	r3, #0
 801c04a:	f000 8097 	beq.w	801c17c <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 801c04e:	2300      	movs	r3, #0
 801c050:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 801c052:	4b83      	ldr	r3, [pc, #524]	; (801c260 <HAL_RCC_OscConfig+0x4ac>)
 801c054:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801c056:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 801c05a:	2b00      	cmp	r3, #0
 801c05c:	d10f      	bne.n	801c07e <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 801c05e:	2300      	movs	r3, #0
 801c060:	60bb      	str	r3, [r7, #8]
 801c062:	4b7f      	ldr	r3, [pc, #508]	; (801c260 <HAL_RCC_OscConfig+0x4ac>)
 801c064:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801c066:	4a7e      	ldr	r2, [pc, #504]	; (801c260 <HAL_RCC_OscConfig+0x4ac>)
 801c068:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 801c06c:	6413      	str	r3, [r2, #64]	; 0x40
 801c06e:	4b7c      	ldr	r3, [pc, #496]	; (801c260 <HAL_RCC_OscConfig+0x4ac>)
 801c070:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801c072:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 801c076:	60bb      	str	r3, [r7, #8]
 801c078:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 801c07a:	2301      	movs	r3, #1
 801c07c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 801c07e:	4b79      	ldr	r3, [pc, #484]	; (801c264 <HAL_RCC_OscConfig+0x4b0>)
 801c080:	681b      	ldr	r3, [r3, #0]
 801c082:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801c086:	2b00      	cmp	r3, #0
 801c088:	d118      	bne.n	801c0bc <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 801c08a:	4b76      	ldr	r3, [pc, #472]	; (801c264 <HAL_RCC_OscConfig+0x4b0>)
 801c08c:	681b      	ldr	r3, [r3, #0]
 801c08e:	4a75      	ldr	r2, [pc, #468]	; (801c264 <HAL_RCC_OscConfig+0x4b0>)
 801c090:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 801c094:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 801c096:	f7fc fac5 	bl	8018624 <HAL_GetTick>
 801c09a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 801c09c:	e008      	b.n	801c0b0 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 801c09e:	f7fc fac1 	bl	8018624 <HAL_GetTick>
 801c0a2:	4602      	mov	r2, r0
 801c0a4:	693b      	ldr	r3, [r7, #16]
 801c0a6:	1ad3      	subs	r3, r2, r3
 801c0a8:	2b02      	cmp	r3, #2
 801c0aa:	d901      	bls.n	801c0b0 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 801c0ac:	2303      	movs	r3, #3
 801c0ae:	e118      	b.n	801c2e2 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 801c0b0:	4b6c      	ldr	r3, [pc, #432]	; (801c264 <HAL_RCC_OscConfig+0x4b0>)
 801c0b2:	681b      	ldr	r3, [r3, #0]
 801c0b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801c0b8:	2b00      	cmp	r3, #0
 801c0ba:	d0f0      	beq.n	801c09e <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 801c0bc:	687b      	ldr	r3, [r7, #4]
 801c0be:	689b      	ldr	r3, [r3, #8]
 801c0c0:	2b01      	cmp	r3, #1
 801c0c2:	d106      	bne.n	801c0d2 <HAL_RCC_OscConfig+0x31e>
 801c0c4:	4b66      	ldr	r3, [pc, #408]	; (801c260 <HAL_RCC_OscConfig+0x4ac>)
 801c0c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801c0c8:	4a65      	ldr	r2, [pc, #404]	; (801c260 <HAL_RCC_OscConfig+0x4ac>)
 801c0ca:	f043 0301 	orr.w	r3, r3, #1
 801c0ce:	6713      	str	r3, [r2, #112]	; 0x70
 801c0d0:	e01c      	b.n	801c10c <HAL_RCC_OscConfig+0x358>
 801c0d2:	687b      	ldr	r3, [r7, #4]
 801c0d4:	689b      	ldr	r3, [r3, #8]
 801c0d6:	2b05      	cmp	r3, #5
 801c0d8:	d10c      	bne.n	801c0f4 <HAL_RCC_OscConfig+0x340>
 801c0da:	4b61      	ldr	r3, [pc, #388]	; (801c260 <HAL_RCC_OscConfig+0x4ac>)
 801c0dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801c0de:	4a60      	ldr	r2, [pc, #384]	; (801c260 <HAL_RCC_OscConfig+0x4ac>)
 801c0e0:	f043 0304 	orr.w	r3, r3, #4
 801c0e4:	6713      	str	r3, [r2, #112]	; 0x70
 801c0e6:	4b5e      	ldr	r3, [pc, #376]	; (801c260 <HAL_RCC_OscConfig+0x4ac>)
 801c0e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801c0ea:	4a5d      	ldr	r2, [pc, #372]	; (801c260 <HAL_RCC_OscConfig+0x4ac>)
 801c0ec:	f043 0301 	orr.w	r3, r3, #1
 801c0f0:	6713      	str	r3, [r2, #112]	; 0x70
 801c0f2:	e00b      	b.n	801c10c <HAL_RCC_OscConfig+0x358>
 801c0f4:	4b5a      	ldr	r3, [pc, #360]	; (801c260 <HAL_RCC_OscConfig+0x4ac>)
 801c0f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801c0f8:	4a59      	ldr	r2, [pc, #356]	; (801c260 <HAL_RCC_OscConfig+0x4ac>)
 801c0fa:	f023 0301 	bic.w	r3, r3, #1
 801c0fe:	6713      	str	r3, [r2, #112]	; 0x70
 801c100:	4b57      	ldr	r3, [pc, #348]	; (801c260 <HAL_RCC_OscConfig+0x4ac>)
 801c102:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801c104:	4a56      	ldr	r2, [pc, #344]	; (801c260 <HAL_RCC_OscConfig+0x4ac>)
 801c106:	f023 0304 	bic.w	r3, r3, #4
 801c10a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 801c10c:	687b      	ldr	r3, [r7, #4]
 801c10e:	689b      	ldr	r3, [r3, #8]
 801c110:	2b00      	cmp	r3, #0
 801c112:	d015      	beq.n	801c140 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 801c114:	f7fc fa86 	bl	8018624 <HAL_GetTick>
 801c118:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 801c11a:	e00a      	b.n	801c132 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 801c11c:	f7fc fa82 	bl	8018624 <HAL_GetTick>
 801c120:	4602      	mov	r2, r0
 801c122:	693b      	ldr	r3, [r7, #16]
 801c124:	1ad3      	subs	r3, r2, r3
 801c126:	f241 3288 	movw	r2, #5000	; 0x1388
 801c12a:	4293      	cmp	r3, r2
 801c12c:	d901      	bls.n	801c132 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 801c12e:	2303      	movs	r3, #3
 801c130:	e0d7      	b.n	801c2e2 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 801c132:	4b4b      	ldr	r3, [pc, #300]	; (801c260 <HAL_RCC_OscConfig+0x4ac>)
 801c134:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801c136:	f003 0302 	and.w	r3, r3, #2
 801c13a:	2b00      	cmp	r3, #0
 801c13c:	d0ee      	beq.n	801c11c <HAL_RCC_OscConfig+0x368>
 801c13e:	e014      	b.n	801c16a <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 801c140:	f7fc fa70 	bl	8018624 <HAL_GetTick>
 801c144:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 801c146:	e00a      	b.n	801c15e <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 801c148:	f7fc fa6c 	bl	8018624 <HAL_GetTick>
 801c14c:	4602      	mov	r2, r0
 801c14e:	693b      	ldr	r3, [r7, #16]
 801c150:	1ad3      	subs	r3, r2, r3
 801c152:	f241 3288 	movw	r2, #5000	; 0x1388
 801c156:	4293      	cmp	r3, r2
 801c158:	d901      	bls.n	801c15e <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 801c15a:	2303      	movs	r3, #3
 801c15c:	e0c1      	b.n	801c2e2 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 801c15e:	4b40      	ldr	r3, [pc, #256]	; (801c260 <HAL_RCC_OscConfig+0x4ac>)
 801c160:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801c162:	f003 0302 	and.w	r3, r3, #2
 801c166:	2b00      	cmp	r3, #0
 801c168:	d1ee      	bne.n	801c148 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 801c16a:	7dfb      	ldrb	r3, [r7, #23]
 801c16c:	2b01      	cmp	r3, #1
 801c16e:	d105      	bne.n	801c17c <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 801c170:	4b3b      	ldr	r3, [pc, #236]	; (801c260 <HAL_RCC_OscConfig+0x4ac>)
 801c172:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801c174:	4a3a      	ldr	r2, [pc, #232]	; (801c260 <HAL_RCC_OscConfig+0x4ac>)
 801c176:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 801c17a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 801c17c:	687b      	ldr	r3, [r7, #4]
 801c17e:	699b      	ldr	r3, [r3, #24]
 801c180:	2b00      	cmp	r3, #0
 801c182:	f000 80ad 	beq.w	801c2e0 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 801c186:	4b36      	ldr	r3, [pc, #216]	; (801c260 <HAL_RCC_OscConfig+0x4ac>)
 801c188:	689b      	ldr	r3, [r3, #8]
 801c18a:	f003 030c 	and.w	r3, r3, #12
 801c18e:	2b08      	cmp	r3, #8
 801c190:	d060      	beq.n	801c254 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 801c192:	687b      	ldr	r3, [r7, #4]
 801c194:	699b      	ldr	r3, [r3, #24]
 801c196:	2b02      	cmp	r3, #2
 801c198:	d145      	bne.n	801c226 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 801c19a:	4b33      	ldr	r3, [pc, #204]	; (801c268 <HAL_RCC_OscConfig+0x4b4>)
 801c19c:	2200      	movs	r2, #0
 801c19e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801c1a0:	f7fc fa40 	bl	8018624 <HAL_GetTick>
 801c1a4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 801c1a6:	e008      	b.n	801c1ba <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 801c1a8:	f7fc fa3c 	bl	8018624 <HAL_GetTick>
 801c1ac:	4602      	mov	r2, r0
 801c1ae:	693b      	ldr	r3, [r7, #16]
 801c1b0:	1ad3      	subs	r3, r2, r3
 801c1b2:	2b02      	cmp	r3, #2
 801c1b4:	d901      	bls.n	801c1ba <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 801c1b6:	2303      	movs	r3, #3
 801c1b8:	e093      	b.n	801c2e2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 801c1ba:	4b29      	ldr	r3, [pc, #164]	; (801c260 <HAL_RCC_OscConfig+0x4ac>)
 801c1bc:	681b      	ldr	r3, [r3, #0]
 801c1be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 801c1c2:	2b00      	cmp	r3, #0
 801c1c4:	d1f0      	bne.n	801c1a8 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 801c1c6:	687b      	ldr	r3, [r7, #4]
 801c1c8:	69da      	ldr	r2, [r3, #28]
 801c1ca:	687b      	ldr	r3, [r7, #4]
 801c1cc:	6a1b      	ldr	r3, [r3, #32]
 801c1ce:	431a      	orrs	r2, r3
 801c1d0:	687b      	ldr	r3, [r7, #4]
 801c1d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801c1d4:	019b      	lsls	r3, r3, #6
 801c1d6:	431a      	orrs	r2, r3
 801c1d8:	687b      	ldr	r3, [r7, #4]
 801c1da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801c1dc:	085b      	lsrs	r3, r3, #1
 801c1de:	3b01      	subs	r3, #1
 801c1e0:	041b      	lsls	r3, r3, #16
 801c1e2:	431a      	orrs	r2, r3
 801c1e4:	687b      	ldr	r3, [r7, #4]
 801c1e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801c1e8:	061b      	lsls	r3, r3, #24
 801c1ea:	431a      	orrs	r2, r3
 801c1ec:	687b      	ldr	r3, [r7, #4]
 801c1ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801c1f0:	071b      	lsls	r3, r3, #28
 801c1f2:	491b      	ldr	r1, [pc, #108]	; (801c260 <HAL_RCC_OscConfig+0x4ac>)
 801c1f4:	4313      	orrs	r3, r2
 801c1f6:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 801c1f8:	4b1b      	ldr	r3, [pc, #108]	; (801c268 <HAL_RCC_OscConfig+0x4b4>)
 801c1fa:	2201      	movs	r2, #1
 801c1fc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801c1fe:	f7fc fa11 	bl	8018624 <HAL_GetTick>
 801c202:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 801c204:	e008      	b.n	801c218 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 801c206:	f7fc fa0d 	bl	8018624 <HAL_GetTick>
 801c20a:	4602      	mov	r2, r0
 801c20c:	693b      	ldr	r3, [r7, #16]
 801c20e:	1ad3      	subs	r3, r2, r3
 801c210:	2b02      	cmp	r3, #2
 801c212:	d901      	bls.n	801c218 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 801c214:	2303      	movs	r3, #3
 801c216:	e064      	b.n	801c2e2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 801c218:	4b11      	ldr	r3, [pc, #68]	; (801c260 <HAL_RCC_OscConfig+0x4ac>)
 801c21a:	681b      	ldr	r3, [r3, #0]
 801c21c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 801c220:	2b00      	cmp	r3, #0
 801c222:	d0f0      	beq.n	801c206 <HAL_RCC_OscConfig+0x452>
 801c224:	e05c      	b.n	801c2e0 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 801c226:	4b10      	ldr	r3, [pc, #64]	; (801c268 <HAL_RCC_OscConfig+0x4b4>)
 801c228:	2200      	movs	r2, #0
 801c22a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801c22c:	f7fc f9fa 	bl	8018624 <HAL_GetTick>
 801c230:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 801c232:	e008      	b.n	801c246 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 801c234:	f7fc f9f6 	bl	8018624 <HAL_GetTick>
 801c238:	4602      	mov	r2, r0
 801c23a:	693b      	ldr	r3, [r7, #16]
 801c23c:	1ad3      	subs	r3, r2, r3
 801c23e:	2b02      	cmp	r3, #2
 801c240:	d901      	bls.n	801c246 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 801c242:	2303      	movs	r3, #3
 801c244:	e04d      	b.n	801c2e2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 801c246:	4b06      	ldr	r3, [pc, #24]	; (801c260 <HAL_RCC_OscConfig+0x4ac>)
 801c248:	681b      	ldr	r3, [r3, #0]
 801c24a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 801c24e:	2b00      	cmp	r3, #0
 801c250:	d1f0      	bne.n	801c234 <HAL_RCC_OscConfig+0x480>
 801c252:	e045      	b.n	801c2e0 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 801c254:	687b      	ldr	r3, [r7, #4]
 801c256:	699b      	ldr	r3, [r3, #24]
 801c258:	2b01      	cmp	r3, #1
 801c25a:	d107      	bne.n	801c26c <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 801c25c:	2301      	movs	r3, #1
 801c25e:	e040      	b.n	801c2e2 <HAL_RCC_OscConfig+0x52e>
 801c260:	40023800 	.word	0x40023800
 801c264:	40007000 	.word	0x40007000
 801c268:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 801c26c:	4b1f      	ldr	r3, [pc, #124]	; (801c2ec <HAL_RCC_OscConfig+0x538>)
 801c26e:	685b      	ldr	r3, [r3, #4]
 801c270:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 801c272:	687b      	ldr	r3, [r7, #4]
 801c274:	699b      	ldr	r3, [r3, #24]
 801c276:	2b01      	cmp	r3, #1
 801c278:	d030      	beq.n	801c2dc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 801c27a:	68fb      	ldr	r3, [r7, #12]
 801c27c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 801c280:	687b      	ldr	r3, [r7, #4]
 801c282:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 801c284:	429a      	cmp	r2, r3
 801c286:	d129      	bne.n	801c2dc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 801c288:	68fb      	ldr	r3, [r7, #12]
 801c28a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 801c28e:	687b      	ldr	r3, [r7, #4]
 801c290:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 801c292:	429a      	cmp	r2, r3
 801c294:	d122      	bne.n	801c2dc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 801c296:	68fa      	ldr	r2, [r7, #12]
 801c298:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 801c29c:	4013      	ands	r3, r2
 801c29e:	687a      	ldr	r2, [r7, #4]
 801c2a0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 801c2a2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 801c2a4:	4293      	cmp	r3, r2
 801c2a6:	d119      	bne.n	801c2dc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 801c2a8:	68fb      	ldr	r3, [r7, #12]
 801c2aa:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 801c2ae:	687b      	ldr	r3, [r7, #4]
 801c2b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801c2b2:	085b      	lsrs	r3, r3, #1
 801c2b4:	3b01      	subs	r3, #1
 801c2b6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 801c2b8:	429a      	cmp	r2, r3
 801c2ba:	d10f      	bne.n	801c2dc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 801c2bc:	68fb      	ldr	r3, [r7, #12]
 801c2be:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 801c2c2:	687b      	ldr	r3, [r7, #4]
 801c2c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801c2c6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 801c2c8:	429a      	cmp	r2, r3
 801c2ca:	d107      	bne.n	801c2dc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 801c2cc:	68fb      	ldr	r3, [r7, #12]
 801c2ce:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 801c2d2:	687b      	ldr	r3, [r7, #4]
 801c2d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801c2d6:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 801c2d8:	429a      	cmp	r2, r3
 801c2da:	d001      	beq.n	801c2e0 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 801c2dc:	2301      	movs	r3, #1
 801c2de:	e000      	b.n	801c2e2 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 801c2e0:	2300      	movs	r3, #0
}
 801c2e2:	4618      	mov	r0, r3
 801c2e4:	3718      	adds	r7, #24
 801c2e6:	46bd      	mov	sp, r7
 801c2e8:	bd80      	pop	{r7, pc}
 801c2ea:	bf00      	nop
 801c2ec:	40023800 	.word	0x40023800

0801c2f0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 801c2f0:	b580      	push	{r7, lr}
 801c2f2:	b082      	sub	sp, #8
 801c2f4:	af00      	add	r7, sp, #0
 801c2f6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 801c2f8:	687b      	ldr	r3, [r7, #4]
 801c2fa:	2b00      	cmp	r3, #0
 801c2fc:	d101      	bne.n	801c302 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 801c2fe:	2301      	movs	r3, #1
 801c300:	e07b      	b.n	801c3fa <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 801c302:	687b      	ldr	r3, [r7, #4]
 801c304:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801c306:	2b00      	cmp	r3, #0
 801c308:	d108      	bne.n	801c31c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 801c30a:	687b      	ldr	r3, [r7, #4]
 801c30c:	685b      	ldr	r3, [r3, #4]
 801c30e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 801c312:	d009      	beq.n	801c328 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 801c314:	687b      	ldr	r3, [r7, #4]
 801c316:	2200      	movs	r2, #0
 801c318:	61da      	str	r2, [r3, #28]
 801c31a:	e005      	b.n	801c328 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 801c31c:	687b      	ldr	r3, [r7, #4]
 801c31e:	2200      	movs	r2, #0
 801c320:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 801c322:	687b      	ldr	r3, [r7, #4]
 801c324:	2200      	movs	r2, #0
 801c326:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 801c328:	687b      	ldr	r3, [r7, #4]
 801c32a:	2200      	movs	r2, #0
 801c32c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 801c32e:	687b      	ldr	r3, [r7, #4]
 801c330:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 801c334:	b2db      	uxtb	r3, r3
 801c336:	2b00      	cmp	r3, #0
 801c338:	d106      	bne.n	801c348 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 801c33a:	687b      	ldr	r3, [r7, #4]
 801c33c:	2200      	movs	r2, #0
 801c33e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 801c342:	6878      	ldr	r0, [r7, #4]
 801c344:	f7fb ff3a 	bl	80181bc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 801c348:	687b      	ldr	r3, [r7, #4]
 801c34a:	2202      	movs	r2, #2
 801c34c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 801c350:	687b      	ldr	r3, [r7, #4]
 801c352:	681b      	ldr	r3, [r3, #0]
 801c354:	681a      	ldr	r2, [r3, #0]
 801c356:	687b      	ldr	r3, [r7, #4]
 801c358:	681b      	ldr	r3, [r3, #0]
 801c35a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 801c35e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 801c360:	687b      	ldr	r3, [r7, #4]
 801c362:	685b      	ldr	r3, [r3, #4]
 801c364:	f403 7282 	and.w	r2, r3, #260	; 0x104
 801c368:	687b      	ldr	r3, [r7, #4]
 801c36a:	689b      	ldr	r3, [r3, #8]
 801c36c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 801c370:	431a      	orrs	r2, r3
 801c372:	687b      	ldr	r3, [r7, #4]
 801c374:	68db      	ldr	r3, [r3, #12]
 801c376:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 801c37a:	431a      	orrs	r2, r3
 801c37c:	687b      	ldr	r3, [r7, #4]
 801c37e:	691b      	ldr	r3, [r3, #16]
 801c380:	f003 0302 	and.w	r3, r3, #2
 801c384:	431a      	orrs	r2, r3
 801c386:	687b      	ldr	r3, [r7, #4]
 801c388:	695b      	ldr	r3, [r3, #20]
 801c38a:	f003 0301 	and.w	r3, r3, #1
 801c38e:	431a      	orrs	r2, r3
 801c390:	687b      	ldr	r3, [r7, #4]
 801c392:	699b      	ldr	r3, [r3, #24]
 801c394:	f403 7300 	and.w	r3, r3, #512	; 0x200
 801c398:	431a      	orrs	r2, r3
 801c39a:	687b      	ldr	r3, [r7, #4]
 801c39c:	69db      	ldr	r3, [r3, #28]
 801c39e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 801c3a2:	431a      	orrs	r2, r3
 801c3a4:	687b      	ldr	r3, [r7, #4]
 801c3a6:	6a1b      	ldr	r3, [r3, #32]
 801c3a8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801c3ac:	ea42 0103 	orr.w	r1, r2, r3
 801c3b0:	687b      	ldr	r3, [r7, #4]
 801c3b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801c3b4:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 801c3b8:	687b      	ldr	r3, [r7, #4]
 801c3ba:	681b      	ldr	r3, [r3, #0]
 801c3bc:	430a      	orrs	r2, r1
 801c3be:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 801c3c0:	687b      	ldr	r3, [r7, #4]
 801c3c2:	699b      	ldr	r3, [r3, #24]
 801c3c4:	0c1b      	lsrs	r3, r3, #16
 801c3c6:	f003 0104 	and.w	r1, r3, #4
 801c3ca:	687b      	ldr	r3, [r7, #4]
 801c3cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801c3ce:	f003 0210 	and.w	r2, r3, #16
 801c3d2:	687b      	ldr	r3, [r7, #4]
 801c3d4:	681b      	ldr	r3, [r3, #0]
 801c3d6:	430a      	orrs	r2, r1
 801c3d8:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 801c3da:	687b      	ldr	r3, [r7, #4]
 801c3dc:	681b      	ldr	r3, [r3, #0]
 801c3de:	69da      	ldr	r2, [r3, #28]
 801c3e0:	687b      	ldr	r3, [r7, #4]
 801c3e2:	681b      	ldr	r3, [r3, #0]
 801c3e4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 801c3e8:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 801c3ea:	687b      	ldr	r3, [r7, #4]
 801c3ec:	2200      	movs	r2, #0
 801c3ee:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 801c3f0:	687b      	ldr	r3, [r7, #4]
 801c3f2:	2201      	movs	r2, #1
 801c3f4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 801c3f8:	2300      	movs	r3, #0
}
 801c3fa:	4618      	mov	r0, r3
 801c3fc:	3708      	adds	r7, #8
 801c3fe:	46bd      	mov	sp, r7
 801c400:	bd80      	pop	{r7, pc}

0801c402 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 801c402:	b580      	push	{r7, lr}
 801c404:	b088      	sub	sp, #32
 801c406:	af00      	add	r7, sp, #0
 801c408:	60f8      	str	r0, [r7, #12]
 801c40a:	60b9      	str	r1, [r7, #8]
 801c40c:	603b      	str	r3, [r7, #0]
 801c40e:	4613      	mov	r3, r2
 801c410:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 801c412:	2300      	movs	r3, #0
 801c414:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 801c416:	68fb      	ldr	r3, [r7, #12]
 801c418:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 801c41c:	2b01      	cmp	r3, #1
 801c41e:	d101      	bne.n	801c424 <HAL_SPI_Transmit+0x22>
 801c420:	2302      	movs	r3, #2
 801c422:	e126      	b.n	801c672 <HAL_SPI_Transmit+0x270>
 801c424:	68fb      	ldr	r3, [r7, #12]
 801c426:	2201      	movs	r2, #1
 801c428:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 801c42c:	f7fc f8fa 	bl	8018624 <HAL_GetTick>
 801c430:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 801c432:	88fb      	ldrh	r3, [r7, #6]
 801c434:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 801c436:	68fb      	ldr	r3, [r7, #12]
 801c438:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 801c43c:	b2db      	uxtb	r3, r3
 801c43e:	2b01      	cmp	r3, #1
 801c440:	d002      	beq.n	801c448 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 801c442:	2302      	movs	r3, #2
 801c444:	77fb      	strb	r3, [r7, #31]
    goto error;
 801c446:	e10b      	b.n	801c660 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 801c448:	68bb      	ldr	r3, [r7, #8]
 801c44a:	2b00      	cmp	r3, #0
 801c44c:	d002      	beq.n	801c454 <HAL_SPI_Transmit+0x52>
 801c44e:	88fb      	ldrh	r3, [r7, #6]
 801c450:	2b00      	cmp	r3, #0
 801c452:	d102      	bne.n	801c45a <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 801c454:	2301      	movs	r3, #1
 801c456:	77fb      	strb	r3, [r7, #31]
    goto error;
 801c458:	e102      	b.n	801c660 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 801c45a:	68fb      	ldr	r3, [r7, #12]
 801c45c:	2203      	movs	r2, #3
 801c45e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 801c462:	68fb      	ldr	r3, [r7, #12]
 801c464:	2200      	movs	r2, #0
 801c466:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 801c468:	68fb      	ldr	r3, [r7, #12]
 801c46a:	68ba      	ldr	r2, [r7, #8]
 801c46c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 801c46e:	68fb      	ldr	r3, [r7, #12]
 801c470:	88fa      	ldrh	r2, [r7, #6]
 801c472:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 801c474:	68fb      	ldr	r3, [r7, #12]
 801c476:	88fa      	ldrh	r2, [r7, #6]
 801c478:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 801c47a:	68fb      	ldr	r3, [r7, #12]
 801c47c:	2200      	movs	r2, #0
 801c47e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 801c480:	68fb      	ldr	r3, [r7, #12]
 801c482:	2200      	movs	r2, #0
 801c484:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 801c486:	68fb      	ldr	r3, [r7, #12]
 801c488:	2200      	movs	r2, #0
 801c48a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 801c48c:	68fb      	ldr	r3, [r7, #12]
 801c48e:	2200      	movs	r2, #0
 801c490:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 801c492:	68fb      	ldr	r3, [r7, #12]
 801c494:	2200      	movs	r2, #0
 801c496:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 801c498:	68fb      	ldr	r3, [r7, #12]
 801c49a:	689b      	ldr	r3, [r3, #8]
 801c49c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801c4a0:	d10f      	bne.n	801c4c2 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 801c4a2:	68fb      	ldr	r3, [r7, #12]
 801c4a4:	681b      	ldr	r3, [r3, #0]
 801c4a6:	681a      	ldr	r2, [r3, #0]
 801c4a8:	68fb      	ldr	r3, [r7, #12]
 801c4aa:	681b      	ldr	r3, [r3, #0]
 801c4ac:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 801c4b0:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 801c4b2:	68fb      	ldr	r3, [r7, #12]
 801c4b4:	681b      	ldr	r3, [r3, #0]
 801c4b6:	681a      	ldr	r2, [r3, #0]
 801c4b8:	68fb      	ldr	r3, [r7, #12]
 801c4ba:	681b      	ldr	r3, [r3, #0]
 801c4bc:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 801c4c0:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 801c4c2:	68fb      	ldr	r3, [r7, #12]
 801c4c4:	681b      	ldr	r3, [r3, #0]
 801c4c6:	681b      	ldr	r3, [r3, #0]
 801c4c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801c4cc:	2b40      	cmp	r3, #64	; 0x40
 801c4ce:	d007      	beq.n	801c4e0 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 801c4d0:	68fb      	ldr	r3, [r7, #12]
 801c4d2:	681b      	ldr	r3, [r3, #0]
 801c4d4:	681a      	ldr	r2, [r3, #0]
 801c4d6:	68fb      	ldr	r3, [r7, #12]
 801c4d8:	681b      	ldr	r3, [r3, #0]
 801c4da:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 801c4de:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 801c4e0:	68fb      	ldr	r3, [r7, #12]
 801c4e2:	68db      	ldr	r3, [r3, #12]
 801c4e4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 801c4e8:	d14b      	bne.n	801c582 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 801c4ea:	68fb      	ldr	r3, [r7, #12]
 801c4ec:	685b      	ldr	r3, [r3, #4]
 801c4ee:	2b00      	cmp	r3, #0
 801c4f0:	d002      	beq.n	801c4f8 <HAL_SPI_Transmit+0xf6>
 801c4f2:	8afb      	ldrh	r3, [r7, #22]
 801c4f4:	2b01      	cmp	r3, #1
 801c4f6:	d13e      	bne.n	801c576 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 801c4f8:	68fb      	ldr	r3, [r7, #12]
 801c4fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801c4fc:	881a      	ldrh	r2, [r3, #0]
 801c4fe:	68fb      	ldr	r3, [r7, #12]
 801c500:	681b      	ldr	r3, [r3, #0]
 801c502:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 801c504:	68fb      	ldr	r3, [r7, #12]
 801c506:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801c508:	1c9a      	adds	r2, r3, #2
 801c50a:	68fb      	ldr	r3, [r7, #12]
 801c50c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 801c50e:	68fb      	ldr	r3, [r7, #12]
 801c510:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 801c512:	b29b      	uxth	r3, r3
 801c514:	3b01      	subs	r3, #1
 801c516:	b29a      	uxth	r2, r3
 801c518:	68fb      	ldr	r3, [r7, #12]
 801c51a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 801c51c:	e02b      	b.n	801c576 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 801c51e:	68fb      	ldr	r3, [r7, #12]
 801c520:	681b      	ldr	r3, [r3, #0]
 801c522:	689b      	ldr	r3, [r3, #8]
 801c524:	f003 0302 	and.w	r3, r3, #2
 801c528:	2b02      	cmp	r3, #2
 801c52a:	d112      	bne.n	801c552 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 801c52c:	68fb      	ldr	r3, [r7, #12]
 801c52e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801c530:	881a      	ldrh	r2, [r3, #0]
 801c532:	68fb      	ldr	r3, [r7, #12]
 801c534:	681b      	ldr	r3, [r3, #0]
 801c536:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 801c538:	68fb      	ldr	r3, [r7, #12]
 801c53a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801c53c:	1c9a      	adds	r2, r3, #2
 801c53e:	68fb      	ldr	r3, [r7, #12]
 801c540:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 801c542:	68fb      	ldr	r3, [r7, #12]
 801c544:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 801c546:	b29b      	uxth	r3, r3
 801c548:	3b01      	subs	r3, #1
 801c54a:	b29a      	uxth	r2, r3
 801c54c:	68fb      	ldr	r3, [r7, #12]
 801c54e:	86da      	strh	r2, [r3, #54]	; 0x36
 801c550:	e011      	b.n	801c576 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 801c552:	f7fc f867 	bl	8018624 <HAL_GetTick>
 801c556:	4602      	mov	r2, r0
 801c558:	69bb      	ldr	r3, [r7, #24]
 801c55a:	1ad3      	subs	r3, r2, r3
 801c55c:	683a      	ldr	r2, [r7, #0]
 801c55e:	429a      	cmp	r2, r3
 801c560:	d803      	bhi.n	801c56a <HAL_SPI_Transmit+0x168>
 801c562:	683b      	ldr	r3, [r7, #0]
 801c564:	f1b3 3fff 	cmp.w	r3, #4294967295
 801c568:	d102      	bne.n	801c570 <HAL_SPI_Transmit+0x16e>
 801c56a:	683b      	ldr	r3, [r7, #0]
 801c56c:	2b00      	cmp	r3, #0
 801c56e:	d102      	bne.n	801c576 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 801c570:	2303      	movs	r3, #3
 801c572:	77fb      	strb	r3, [r7, #31]
          goto error;
 801c574:	e074      	b.n	801c660 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 801c576:	68fb      	ldr	r3, [r7, #12]
 801c578:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 801c57a:	b29b      	uxth	r3, r3
 801c57c:	2b00      	cmp	r3, #0
 801c57e:	d1ce      	bne.n	801c51e <HAL_SPI_Transmit+0x11c>
 801c580:	e04c      	b.n	801c61c <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 801c582:	68fb      	ldr	r3, [r7, #12]
 801c584:	685b      	ldr	r3, [r3, #4]
 801c586:	2b00      	cmp	r3, #0
 801c588:	d002      	beq.n	801c590 <HAL_SPI_Transmit+0x18e>
 801c58a:	8afb      	ldrh	r3, [r7, #22]
 801c58c:	2b01      	cmp	r3, #1
 801c58e:	d140      	bne.n	801c612 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 801c590:	68fb      	ldr	r3, [r7, #12]
 801c592:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801c594:	68fb      	ldr	r3, [r7, #12]
 801c596:	681b      	ldr	r3, [r3, #0]
 801c598:	330c      	adds	r3, #12
 801c59a:	7812      	ldrb	r2, [r2, #0]
 801c59c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 801c59e:	68fb      	ldr	r3, [r7, #12]
 801c5a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801c5a2:	1c5a      	adds	r2, r3, #1
 801c5a4:	68fb      	ldr	r3, [r7, #12]
 801c5a6:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 801c5a8:	68fb      	ldr	r3, [r7, #12]
 801c5aa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 801c5ac:	b29b      	uxth	r3, r3
 801c5ae:	3b01      	subs	r3, #1
 801c5b0:	b29a      	uxth	r2, r3
 801c5b2:	68fb      	ldr	r3, [r7, #12]
 801c5b4:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 801c5b6:	e02c      	b.n	801c612 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 801c5b8:	68fb      	ldr	r3, [r7, #12]
 801c5ba:	681b      	ldr	r3, [r3, #0]
 801c5bc:	689b      	ldr	r3, [r3, #8]
 801c5be:	f003 0302 	and.w	r3, r3, #2
 801c5c2:	2b02      	cmp	r3, #2
 801c5c4:	d113      	bne.n	801c5ee <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 801c5c6:	68fb      	ldr	r3, [r7, #12]
 801c5c8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801c5ca:	68fb      	ldr	r3, [r7, #12]
 801c5cc:	681b      	ldr	r3, [r3, #0]
 801c5ce:	330c      	adds	r3, #12
 801c5d0:	7812      	ldrb	r2, [r2, #0]
 801c5d2:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 801c5d4:	68fb      	ldr	r3, [r7, #12]
 801c5d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801c5d8:	1c5a      	adds	r2, r3, #1
 801c5da:	68fb      	ldr	r3, [r7, #12]
 801c5dc:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 801c5de:	68fb      	ldr	r3, [r7, #12]
 801c5e0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 801c5e2:	b29b      	uxth	r3, r3
 801c5e4:	3b01      	subs	r3, #1
 801c5e6:	b29a      	uxth	r2, r3
 801c5e8:	68fb      	ldr	r3, [r7, #12]
 801c5ea:	86da      	strh	r2, [r3, #54]	; 0x36
 801c5ec:	e011      	b.n	801c612 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 801c5ee:	f7fc f819 	bl	8018624 <HAL_GetTick>
 801c5f2:	4602      	mov	r2, r0
 801c5f4:	69bb      	ldr	r3, [r7, #24]
 801c5f6:	1ad3      	subs	r3, r2, r3
 801c5f8:	683a      	ldr	r2, [r7, #0]
 801c5fa:	429a      	cmp	r2, r3
 801c5fc:	d803      	bhi.n	801c606 <HAL_SPI_Transmit+0x204>
 801c5fe:	683b      	ldr	r3, [r7, #0]
 801c600:	f1b3 3fff 	cmp.w	r3, #4294967295
 801c604:	d102      	bne.n	801c60c <HAL_SPI_Transmit+0x20a>
 801c606:	683b      	ldr	r3, [r7, #0]
 801c608:	2b00      	cmp	r3, #0
 801c60a:	d102      	bne.n	801c612 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 801c60c:	2303      	movs	r3, #3
 801c60e:	77fb      	strb	r3, [r7, #31]
          goto error;
 801c610:	e026      	b.n	801c660 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 801c612:	68fb      	ldr	r3, [r7, #12]
 801c614:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 801c616:	b29b      	uxth	r3, r3
 801c618:	2b00      	cmp	r3, #0
 801c61a:	d1cd      	bne.n	801c5b8 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 801c61c:	69ba      	ldr	r2, [r7, #24]
 801c61e:	6839      	ldr	r1, [r7, #0]
 801c620:	68f8      	ldr	r0, [r7, #12]
 801c622:	f000 fcf7 	bl	801d014 <SPI_EndRxTxTransaction>
 801c626:	4603      	mov	r3, r0
 801c628:	2b00      	cmp	r3, #0
 801c62a:	d002      	beq.n	801c632 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 801c62c:	68fb      	ldr	r3, [r7, #12]
 801c62e:	2220      	movs	r2, #32
 801c630:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 801c632:	68fb      	ldr	r3, [r7, #12]
 801c634:	689b      	ldr	r3, [r3, #8]
 801c636:	2b00      	cmp	r3, #0
 801c638:	d10a      	bne.n	801c650 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 801c63a:	2300      	movs	r3, #0
 801c63c:	613b      	str	r3, [r7, #16]
 801c63e:	68fb      	ldr	r3, [r7, #12]
 801c640:	681b      	ldr	r3, [r3, #0]
 801c642:	68db      	ldr	r3, [r3, #12]
 801c644:	613b      	str	r3, [r7, #16]
 801c646:	68fb      	ldr	r3, [r7, #12]
 801c648:	681b      	ldr	r3, [r3, #0]
 801c64a:	689b      	ldr	r3, [r3, #8]
 801c64c:	613b      	str	r3, [r7, #16]
 801c64e:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 801c650:	68fb      	ldr	r3, [r7, #12]
 801c652:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801c654:	2b00      	cmp	r3, #0
 801c656:	d002      	beq.n	801c65e <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 801c658:	2301      	movs	r3, #1
 801c65a:	77fb      	strb	r3, [r7, #31]
 801c65c:	e000      	b.n	801c660 <HAL_SPI_Transmit+0x25e>
  }

error:
 801c65e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 801c660:	68fb      	ldr	r3, [r7, #12]
 801c662:	2201      	movs	r2, #1
 801c664:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 801c668:	68fb      	ldr	r3, [r7, #12]
 801c66a:	2200      	movs	r2, #0
 801c66c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 801c670:	7ffb      	ldrb	r3, [r7, #31]
}
 801c672:	4618      	mov	r0, r3
 801c674:	3720      	adds	r7, #32
 801c676:	46bd      	mov	sp, r7
 801c678:	bd80      	pop	{r7, pc}

0801c67a <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 801c67a:	b580      	push	{r7, lr}
 801c67c:	b088      	sub	sp, #32
 801c67e:	af02      	add	r7, sp, #8
 801c680:	60f8      	str	r0, [r7, #12]
 801c682:	60b9      	str	r1, [r7, #8]
 801c684:	603b      	str	r3, [r7, #0]
 801c686:	4613      	mov	r3, r2
 801c688:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 801c68a:	2300      	movs	r3, #0
 801c68c:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 801c68e:	68fb      	ldr	r3, [r7, #12]
 801c690:	685b      	ldr	r3, [r3, #4]
 801c692:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 801c696:	d112      	bne.n	801c6be <HAL_SPI_Receive+0x44>
 801c698:	68fb      	ldr	r3, [r7, #12]
 801c69a:	689b      	ldr	r3, [r3, #8]
 801c69c:	2b00      	cmp	r3, #0
 801c69e:	d10e      	bne.n	801c6be <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 801c6a0:	68fb      	ldr	r3, [r7, #12]
 801c6a2:	2204      	movs	r2, #4
 801c6a4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 801c6a8:	88fa      	ldrh	r2, [r7, #6]
 801c6aa:	683b      	ldr	r3, [r7, #0]
 801c6ac:	9300      	str	r3, [sp, #0]
 801c6ae:	4613      	mov	r3, r2
 801c6b0:	68ba      	ldr	r2, [r7, #8]
 801c6b2:	68b9      	ldr	r1, [r7, #8]
 801c6b4:	68f8      	ldr	r0, [r7, #12]
 801c6b6:	f000 f8f1 	bl	801c89c <HAL_SPI_TransmitReceive>
 801c6ba:	4603      	mov	r3, r0
 801c6bc:	e0ea      	b.n	801c894 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 801c6be:	68fb      	ldr	r3, [r7, #12]
 801c6c0:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 801c6c4:	2b01      	cmp	r3, #1
 801c6c6:	d101      	bne.n	801c6cc <HAL_SPI_Receive+0x52>
 801c6c8:	2302      	movs	r3, #2
 801c6ca:	e0e3      	b.n	801c894 <HAL_SPI_Receive+0x21a>
 801c6cc:	68fb      	ldr	r3, [r7, #12]
 801c6ce:	2201      	movs	r2, #1
 801c6d0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 801c6d4:	f7fb ffa6 	bl	8018624 <HAL_GetTick>
 801c6d8:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 801c6da:	68fb      	ldr	r3, [r7, #12]
 801c6dc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 801c6e0:	b2db      	uxtb	r3, r3
 801c6e2:	2b01      	cmp	r3, #1
 801c6e4:	d002      	beq.n	801c6ec <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 801c6e6:	2302      	movs	r3, #2
 801c6e8:	75fb      	strb	r3, [r7, #23]
    goto error;
 801c6ea:	e0ca      	b.n	801c882 <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 801c6ec:	68bb      	ldr	r3, [r7, #8]
 801c6ee:	2b00      	cmp	r3, #0
 801c6f0:	d002      	beq.n	801c6f8 <HAL_SPI_Receive+0x7e>
 801c6f2:	88fb      	ldrh	r3, [r7, #6]
 801c6f4:	2b00      	cmp	r3, #0
 801c6f6:	d102      	bne.n	801c6fe <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 801c6f8:	2301      	movs	r3, #1
 801c6fa:	75fb      	strb	r3, [r7, #23]
    goto error;
 801c6fc:	e0c1      	b.n	801c882 <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 801c6fe:	68fb      	ldr	r3, [r7, #12]
 801c700:	2204      	movs	r2, #4
 801c702:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 801c706:	68fb      	ldr	r3, [r7, #12]
 801c708:	2200      	movs	r2, #0
 801c70a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 801c70c:	68fb      	ldr	r3, [r7, #12]
 801c70e:	68ba      	ldr	r2, [r7, #8]
 801c710:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 801c712:	68fb      	ldr	r3, [r7, #12]
 801c714:	88fa      	ldrh	r2, [r7, #6]
 801c716:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 801c718:	68fb      	ldr	r3, [r7, #12]
 801c71a:	88fa      	ldrh	r2, [r7, #6]
 801c71c:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 801c71e:	68fb      	ldr	r3, [r7, #12]
 801c720:	2200      	movs	r2, #0
 801c722:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 801c724:	68fb      	ldr	r3, [r7, #12]
 801c726:	2200      	movs	r2, #0
 801c728:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 801c72a:	68fb      	ldr	r3, [r7, #12]
 801c72c:	2200      	movs	r2, #0
 801c72e:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 801c730:	68fb      	ldr	r3, [r7, #12]
 801c732:	2200      	movs	r2, #0
 801c734:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 801c736:	68fb      	ldr	r3, [r7, #12]
 801c738:	2200      	movs	r2, #0
 801c73a:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 801c73c:	68fb      	ldr	r3, [r7, #12]
 801c73e:	689b      	ldr	r3, [r3, #8]
 801c740:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801c744:	d10f      	bne.n	801c766 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 801c746:	68fb      	ldr	r3, [r7, #12]
 801c748:	681b      	ldr	r3, [r3, #0]
 801c74a:	681a      	ldr	r2, [r3, #0]
 801c74c:	68fb      	ldr	r3, [r7, #12]
 801c74e:	681b      	ldr	r3, [r3, #0]
 801c750:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 801c754:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 801c756:	68fb      	ldr	r3, [r7, #12]
 801c758:	681b      	ldr	r3, [r3, #0]
 801c75a:	681a      	ldr	r2, [r3, #0]
 801c75c:	68fb      	ldr	r3, [r7, #12]
 801c75e:	681b      	ldr	r3, [r3, #0]
 801c760:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 801c764:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 801c766:	68fb      	ldr	r3, [r7, #12]
 801c768:	681b      	ldr	r3, [r3, #0]
 801c76a:	681b      	ldr	r3, [r3, #0]
 801c76c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801c770:	2b40      	cmp	r3, #64	; 0x40
 801c772:	d007      	beq.n	801c784 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 801c774:	68fb      	ldr	r3, [r7, #12]
 801c776:	681b      	ldr	r3, [r3, #0]
 801c778:	681a      	ldr	r2, [r3, #0]
 801c77a:	68fb      	ldr	r3, [r7, #12]
 801c77c:	681b      	ldr	r3, [r3, #0]
 801c77e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 801c782:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 801c784:	68fb      	ldr	r3, [r7, #12]
 801c786:	68db      	ldr	r3, [r3, #12]
 801c788:	2b00      	cmp	r3, #0
 801c78a:	d162      	bne.n	801c852 <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 801c78c:	e02e      	b.n	801c7ec <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 801c78e:	68fb      	ldr	r3, [r7, #12]
 801c790:	681b      	ldr	r3, [r3, #0]
 801c792:	689b      	ldr	r3, [r3, #8]
 801c794:	f003 0301 	and.w	r3, r3, #1
 801c798:	2b01      	cmp	r3, #1
 801c79a:	d115      	bne.n	801c7c8 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 801c79c:	68fb      	ldr	r3, [r7, #12]
 801c79e:	681b      	ldr	r3, [r3, #0]
 801c7a0:	f103 020c 	add.w	r2, r3, #12
 801c7a4:	68fb      	ldr	r3, [r7, #12]
 801c7a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801c7a8:	7812      	ldrb	r2, [r2, #0]
 801c7aa:	b2d2      	uxtb	r2, r2
 801c7ac:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 801c7ae:	68fb      	ldr	r3, [r7, #12]
 801c7b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801c7b2:	1c5a      	adds	r2, r3, #1
 801c7b4:	68fb      	ldr	r3, [r7, #12]
 801c7b6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 801c7b8:	68fb      	ldr	r3, [r7, #12]
 801c7ba:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801c7bc:	b29b      	uxth	r3, r3
 801c7be:	3b01      	subs	r3, #1
 801c7c0:	b29a      	uxth	r2, r3
 801c7c2:	68fb      	ldr	r3, [r7, #12]
 801c7c4:	87da      	strh	r2, [r3, #62]	; 0x3e
 801c7c6:	e011      	b.n	801c7ec <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 801c7c8:	f7fb ff2c 	bl	8018624 <HAL_GetTick>
 801c7cc:	4602      	mov	r2, r0
 801c7ce:	693b      	ldr	r3, [r7, #16]
 801c7d0:	1ad3      	subs	r3, r2, r3
 801c7d2:	683a      	ldr	r2, [r7, #0]
 801c7d4:	429a      	cmp	r2, r3
 801c7d6:	d803      	bhi.n	801c7e0 <HAL_SPI_Receive+0x166>
 801c7d8:	683b      	ldr	r3, [r7, #0]
 801c7da:	f1b3 3fff 	cmp.w	r3, #4294967295
 801c7de:	d102      	bne.n	801c7e6 <HAL_SPI_Receive+0x16c>
 801c7e0:	683b      	ldr	r3, [r7, #0]
 801c7e2:	2b00      	cmp	r3, #0
 801c7e4:	d102      	bne.n	801c7ec <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 801c7e6:	2303      	movs	r3, #3
 801c7e8:	75fb      	strb	r3, [r7, #23]
          goto error;
 801c7ea:	e04a      	b.n	801c882 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 801c7ec:	68fb      	ldr	r3, [r7, #12]
 801c7ee:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801c7f0:	b29b      	uxth	r3, r3
 801c7f2:	2b00      	cmp	r3, #0
 801c7f4:	d1cb      	bne.n	801c78e <HAL_SPI_Receive+0x114>
 801c7f6:	e031      	b.n	801c85c <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 801c7f8:	68fb      	ldr	r3, [r7, #12]
 801c7fa:	681b      	ldr	r3, [r3, #0]
 801c7fc:	689b      	ldr	r3, [r3, #8]
 801c7fe:	f003 0301 	and.w	r3, r3, #1
 801c802:	2b01      	cmp	r3, #1
 801c804:	d113      	bne.n	801c82e <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 801c806:	68fb      	ldr	r3, [r7, #12]
 801c808:	681b      	ldr	r3, [r3, #0]
 801c80a:	68da      	ldr	r2, [r3, #12]
 801c80c:	68fb      	ldr	r3, [r7, #12]
 801c80e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801c810:	b292      	uxth	r2, r2
 801c812:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 801c814:	68fb      	ldr	r3, [r7, #12]
 801c816:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801c818:	1c9a      	adds	r2, r3, #2
 801c81a:	68fb      	ldr	r3, [r7, #12]
 801c81c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 801c81e:	68fb      	ldr	r3, [r7, #12]
 801c820:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801c822:	b29b      	uxth	r3, r3
 801c824:	3b01      	subs	r3, #1
 801c826:	b29a      	uxth	r2, r3
 801c828:	68fb      	ldr	r3, [r7, #12]
 801c82a:	87da      	strh	r2, [r3, #62]	; 0x3e
 801c82c:	e011      	b.n	801c852 <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 801c82e:	f7fb fef9 	bl	8018624 <HAL_GetTick>
 801c832:	4602      	mov	r2, r0
 801c834:	693b      	ldr	r3, [r7, #16]
 801c836:	1ad3      	subs	r3, r2, r3
 801c838:	683a      	ldr	r2, [r7, #0]
 801c83a:	429a      	cmp	r2, r3
 801c83c:	d803      	bhi.n	801c846 <HAL_SPI_Receive+0x1cc>
 801c83e:	683b      	ldr	r3, [r7, #0]
 801c840:	f1b3 3fff 	cmp.w	r3, #4294967295
 801c844:	d102      	bne.n	801c84c <HAL_SPI_Receive+0x1d2>
 801c846:	683b      	ldr	r3, [r7, #0]
 801c848:	2b00      	cmp	r3, #0
 801c84a:	d102      	bne.n	801c852 <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 801c84c:	2303      	movs	r3, #3
 801c84e:	75fb      	strb	r3, [r7, #23]
          goto error;
 801c850:	e017      	b.n	801c882 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 801c852:	68fb      	ldr	r3, [r7, #12]
 801c854:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801c856:	b29b      	uxth	r3, r3
 801c858:	2b00      	cmp	r3, #0
 801c85a:	d1cd      	bne.n	801c7f8 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 801c85c:	693a      	ldr	r2, [r7, #16]
 801c85e:	6839      	ldr	r1, [r7, #0]
 801c860:	68f8      	ldr	r0, [r7, #12]
 801c862:	f000 fb71 	bl	801cf48 <SPI_EndRxTransaction>
 801c866:	4603      	mov	r3, r0
 801c868:	2b00      	cmp	r3, #0
 801c86a:	d002      	beq.n	801c872 <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 801c86c:	68fb      	ldr	r3, [r7, #12]
 801c86e:	2220      	movs	r2, #32
 801c870:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 801c872:	68fb      	ldr	r3, [r7, #12]
 801c874:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801c876:	2b00      	cmp	r3, #0
 801c878:	d002      	beq.n	801c880 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 801c87a:	2301      	movs	r3, #1
 801c87c:	75fb      	strb	r3, [r7, #23]
 801c87e:	e000      	b.n	801c882 <HAL_SPI_Receive+0x208>
  }

error :
 801c880:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 801c882:	68fb      	ldr	r3, [r7, #12]
 801c884:	2201      	movs	r2, #1
 801c886:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 801c88a:	68fb      	ldr	r3, [r7, #12]
 801c88c:	2200      	movs	r2, #0
 801c88e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 801c892:	7dfb      	ldrb	r3, [r7, #23]
}
 801c894:	4618      	mov	r0, r3
 801c896:	3718      	adds	r7, #24
 801c898:	46bd      	mov	sp, r7
 801c89a:	bd80      	pop	{r7, pc}

0801c89c <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 801c89c:	b580      	push	{r7, lr}
 801c89e:	b08c      	sub	sp, #48	; 0x30
 801c8a0:	af00      	add	r7, sp, #0
 801c8a2:	60f8      	str	r0, [r7, #12]
 801c8a4:	60b9      	str	r1, [r7, #8]
 801c8a6:	607a      	str	r2, [r7, #4]
 801c8a8:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 801c8aa:	2301      	movs	r3, #1
 801c8ac:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 801c8ae:	2300      	movs	r3, #0
 801c8b0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 801c8b4:	68fb      	ldr	r3, [r7, #12]
 801c8b6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 801c8ba:	2b01      	cmp	r3, #1
 801c8bc:	d101      	bne.n	801c8c2 <HAL_SPI_TransmitReceive+0x26>
 801c8be:	2302      	movs	r3, #2
 801c8c0:	e18a      	b.n	801cbd8 <HAL_SPI_TransmitReceive+0x33c>
 801c8c2:	68fb      	ldr	r3, [r7, #12]
 801c8c4:	2201      	movs	r2, #1
 801c8c6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 801c8ca:	f7fb feab 	bl	8018624 <HAL_GetTick>
 801c8ce:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 801c8d0:	68fb      	ldr	r3, [r7, #12]
 801c8d2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 801c8d6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 801c8da:	68fb      	ldr	r3, [r7, #12]
 801c8dc:	685b      	ldr	r3, [r3, #4]
 801c8de:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 801c8e0:	887b      	ldrh	r3, [r7, #2]
 801c8e2:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 801c8e4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 801c8e8:	2b01      	cmp	r3, #1
 801c8ea:	d00f      	beq.n	801c90c <HAL_SPI_TransmitReceive+0x70>
 801c8ec:	69fb      	ldr	r3, [r7, #28]
 801c8ee:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 801c8f2:	d107      	bne.n	801c904 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 801c8f4:	68fb      	ldr	r3, [r7, #12]
 801c8f6:	689b      	ldr	r3, [r3, #8]
 801c8f8:	2b00      	cmp	r3, #0
 801c8fa:	d103      	bne.n	801c904 <HAL_SPI_TransmitReceive+0x68>
 801c8fc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 801c900:	2b04      	cmp	r3, #4
 801c902:	d003      	beq.n	801c90c <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 801c904:	2302      	movs	r3, #2
 801c906:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 801c90a:	e15b      	b.n	801cbc4 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 801c90c:	68bb      	ldr	r3, [r7, #8]
 801c90e:	2b00      	cmp	r3, #0
 801c910:	d005      	beq.n	801c91e <HAL_SPI_TransmitReceive+0x82>
 801c912:	687b      	ldr	r3, [r7, #4]
 801c914:	2b00      	cmp	r3, #0
 801c916:	d002      	beq.n	801c91e <HAL_SPI_TransmitReceive+0x82>
 801c918:	887b      	ldrh	r3, [r7, #2]
 801c91a:	2b00      	cmp	r3, #0
 801c91c:	d103      	bne.n	801c926 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 801c91e:	2301      	movs	r3, #1
 801c920:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 801c924:	e14e      	b.n	801cbc4 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 801c926:	68fb      	ldr	r3, [r7, #12]
 801c928:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 801c92c:	b2db      	uxtb	r3, r3
 801c92e:	2b04      	cmp	r3, #4
 801c930:	d003      	beq.n	801c93a <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 801c932:	68fb      	ldr	r3, [r7, #12]
 801c934:	2205      	movs	r2, #5
 801c936:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 801c93a:	68fb      	ldr	r3, [r7, #12]
 801c93c:	2200      	movs	r2, #0
 801c93e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 801c940:	68fb      	ldr	r3, [r7, #12]
 801c942:	687a      	ldr	r2, [r7, #4]
 801c944:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 801c946:	68fb      	ldr	r3, [r7, #12]
 801c948:	887a      	ldrh	r2, [r7, #2]
 801c94a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 801c94c:	68fb      	ldr	r3, [r7, #12]
 801c94e:	887a      	ldrh	r2, [r7, #2]
 801c950:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 801c952:	68fb      	ldr	r3, [r7, #12]
 801c954:	68ba      	ldr	r2, [r7, #8]
 801c956:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 801c958:	68fb      	ldr	r3, [r7, #12]
 801c95a:	887a      	ldrh	r2, [r7, #2]
 801c95c:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 801c95e:	68fb      	ldr	r3, [r7, #12]
 801c960:	887a      	ldrh	r2, [r7, #2]
 801c962:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 801c964:	68fb      	ldr	r3, [r7, #12]
 801c966:	2200      	movs	r2, #0
 801c968:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 801c96a:	68fb      	ldr	r3, [r7, #12]
 801c96c:	2200      	movs	r2, #0
 801c96e:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 801c970:	68fb      	ldr	r3, [r7, #12]
 801c972:	681b      	ldr	r3, [r3, #0]
 801c974:	681b      	ldr	r3, [r3, #0]
 801c976:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801c97a:	2b40      	cmp	r3, #64	; 0x40
 801c97c:	d007      	beq.n	801c98e <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 801c97e:	68fb      	ldr	r3, [r7, #12]
 801c980:	681b      	ldr	r3, [r3, #0]
 801c982:	681a      	ldr	r2, [r3, #0]
 801c984:	68fb      	ldr	r3, [r7, #12]
 801c986:	681b      	ldr	r3, [r3, #0]
 801c988:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 801c98c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 801c98e:	68fb      	ldr	r3, [r7, #12]
 801c990:	68db      	ldr	r3, [r3, #12]
 801c992:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 801c996:	d178      	bne.n	801ca8a <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 801c998:	68fb      	ldr	r3, [r7, #12]
 801c99a:	685b      	ldr	r3, [r3, #4]
 801c99c:	2b00      	cmp	r3, #0
 801c99e:	d002      	beq.n	801c9a6 <HAL_SPI_TransmitReceive+0x10a>
 801c9a0:	8b7b      	ldrh	r3, [r7, #26]
 801c9a2:	2b01      	cmp	r3, #1
 801c9a4:	d166      	bne.n	801ca74 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 801c9a6:	68fb      	ldr	r3, [r7, #12]
 801c9a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801c9aa:	881a      	ldrh	r2, [r3, #0]
 801c9ac:	68fb      	ldr	r3, [r7, #12]
 801c9ae:	681b      	ldr	r3, [r3, #0]
 801c9b0:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 801c9b2:	68fb      	ldr	r3, [r7, #12]
 801c9b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801c9b6:	1c9a      	adds	r2, r3, #2
 801c9b8:	68fb      	ldr	r3, [r7, #12]
 801c9ba:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 801c9bc:	68fb      	ldr	r3, [r7, #12]
 801c9be:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 801c9c0:	b29b      	uxth	r3, r3
 801c9c2:	3b01      	subs	r3, #1
 801c9c4:	b29a      	uxth	r2, r3
 801c9c6:	68fb      	ldr	r3, [r7, #12]
 801c9c8:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 801c9ca:	e053      	b.n	801ca74 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 801c9cc:	68fb      	ldr	r3, [r7, #12]
 801c9ce:	681b      	ldr	r3, [r3, #0]
 801c9d0:	689b      	ldr	r3, [r3, #8]
 801c9d2:	f003 0302 	and.w	r3, r3, #2
 801c9d6:	2b02      	cmp	r3, #2
 801c9d8:	d11b      	bne.n	801ca12 <HAL_SPI_TransmitReceive+0x176>
 801c9da:	68fb      	ldr	r3, [r7, #12]
 801c9dc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 801c9de:	b29b      	uxth	r3, r3
 801c9e0:	2b00      	cmp	r3, #0
 801c9e2:	d016      	beq.n	801ca12 <HAL_SPI_TransmitReceive+0x176>
 801c9e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801c9e6:	2b01      	cmp	r3, #1
 801c9e8:	d113      	bne.n	801ca12 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 801c9ea:	68fb      	ldr	r3, [r7, #12]
 801c9ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801c9ee:	881a      	ldrh	r2, [r3, #0]
 801c9f0:	68fb      	ldr	r3, [r7, #12]
 801c9f2:	681b      	ldr	r3, [r3, #0]
 801c9f4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 801c9f6:	68fb      	ldr	r3, [r7, #12]
 801c9f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801c9fa:	1c9a      	adds	r2, r3, #2
 801c9fc:	68fb      	ldr	r3, [r7, #12]
 801c9fe:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 801ca00:	68fb      	ldr	r3, [r7, #12]
 801ca02:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 801ca04:	b29b      	uxth	r3, r3
 801ca06:	3b01      	subs	r3, #1
 801ca08:	b29a      	uxth	r2, r3
 801ca0a:	68fb      	ldr	r3, [r7, #12]
 801ca0c:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 801ca0e:	2300      	movs	r3, #0
 801ca10:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 801ca12:	68fb      	ldr	r3, [r7, #12]
 801ca14:	681b      	ldr	r3, [r3, #0]
 801ca16:	689b      	ldr	r3, [r3, #8]
 801ca18:	f003 0301 	and.w	r3, r3, #1
 801ca1c:	2b01      	cmp	r3, #1
 801ca1e:	d119      	bne.n	801ca54 <HAL_SPI_TransmitReceive+0x1b8>
 801ca20:	68fb      	ldr	r3, [r7, #12]
 801ca22:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801ca24:	b29b      	uxth	r3, r3
 801ca26:	2b00      	cmp	r3, #0
 801ca28:	d014      	beq.n	801ca54 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 801ca2a:	68fb      	ldr	r3, [r7, #12]
 801ca2c:	681b      	ldr	r3, [r3, #0]
 801ca2e:	68da      	ldr	r2, [r3, #12]
 801ca30:	68fb      	ldr	r3, [r7, #12]
 801ca32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801ca34:	b292      	uxth	r2, r2
 801ca36:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 801ca38:	68fb      	ldr	r3, [r7, #12]
 801ca3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801ca3c:	1c9a      	adds	r2, r3, #2
 801ca3e:	68fb      	ldr	r3, [r7, #12]
 801ca40:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 801ca42:	68fb      	ldr	r3, [r7, #12]
 801ca44:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801ca46:	b29b      	uxth	r3, r3
 801ca48:	3b01      	subs	r3, #1
 801ca4a:	b29a      	uxth	r2, r3
 801ca4c:	68fb      	ldr	r3, [r7, #12]
 801ca4e:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 801ca50:	2301      	movs	r3, #1
 801ca52:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 801ca54:	f7fb fde6 	bl	8018624 <HAL_GetTick>
 801ca58:	4602      	mov	r2, r0
 801ca5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ca5c:	1ad3      	subs	r3, r2, r3
 801ca5e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801ca60:	429a      	cmp	r2, r3
 801ca62:	d807      	bhi.n	801ca74 <HAL_SPI_TransmitReceive+0x1d8>
 801ca64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801ca66:	f1b3 3fff 	cmp.w	r3, #4294967295
 801ca6a:	d003      	beq.n	801ca74 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 801ca6c:	2303      	movs	r3, #3
 801ca6e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 801ca72:	e0a7      	b.n	801cbc4 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 801ca74:	68fb      	ldr	r3, [r7, #12]
 801ca76:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 801ca78:	b29b      	uxth	r3, r3
 801ca7a:	2b00      	cmp	r3, #0
 801ca7c:	d1a6      	bne.n	801c9cc <HAL_SPI_TransmitReceive+0x130>
 801ca7e:	68fb      	ldr	r3, [r7, #12]
 801ca80:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801ca82:	b29b      	uxth	r3, r3
 801ca84:	2b00      	cmp	r3, #0
 801ca86:	d1a1      	bne.n	801c9cc <HAL_SPI_TransmitReceive+0x130>
 801ca88:	e07c      	b.n	801cb84 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 801ca8a:	68fb      	ldr	r3, [r7, #12]
 801ca8c:	685b      	ldr	r3, [r3, #4]
 801ca8e:	2b00      	cmp	r3, #0
 801ca90:	d002      	beq.n	801ca98 <HAL_SPI_TransmitReceive+0x1fc>
 801ca92:	8b7b      	ldrh	r3, [r7, #26]
 801ca94:	2b01      	cmp	r3, #1
 801ca96:	d16b      	bne.n	801cb70 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 801ca98:	68fb      	ldr	r3, [r7, #12]
 801ca9a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801ca9c:	68fb      	ldr	r3, [r7, #12]
 801ca9e:	681b      	ldr	r3, [r3, #0]
 801caa0:	330c      	adds	r3, #12
 801caa2:	7812      	ldrb	r2, [r2, #0]
 801caa4:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 801caa6:	68fb      	ldr	r3, [r7, #12]
 801caa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801caaa:	1c5a      	adds	r2, r3, #1
 801caac:	68fb      	ldr	r3, [r7, #12]
 801caae:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 801cab0:	68fb      	ldr	r3, [r7, #12]
 801cab2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 801cab4:	b29b      	uxth	r3, r3
 801cab6:	3b01      	subs	r3, #1
 801cab8:	b29a      	uxth	r2, r3
 801caba:	68fb      	ldr	r3, [r7, #12]
 801cabc:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 801cabe:	e057      	b.n	801cb70 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 801cac0:	68fb      	ldr	r3, [r7, #12]
 801cac2:	681b      	ldr	r3, [r3, #0]
 801cac4:	689b      	ldr	r3, [r3, #8]
 801cac6:	f003 0302 	and.w	r3, r3, #2
 801caca:	2b02      	cmp	r3, #2
 801cacc:	d11c      	bne.n	801cb08 <HAL_SPI_TransmitReceive+0x26c>
 801cace:	68fb      	ldr	r3, [r7, #12]
 801cad0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 801cad2:	b29b      	uxth	r3, r3
 801cad4:	2b00      	cmp	r3, #0
 801cad6:	d017      	beq.n	801cb08 <HAL_SPI_TransmitReceive+0x26c>
 801cad8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801cada:	2b01      	cmp	r3, #1
 801cadc:	d114      	bne.n	801cb08 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 801cade:	68fb      	ldr	r3, [r7, #12]
 801cae0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801cae2:	68fb      	ldr	r3, [r7, #12]
 801cae4:	681b      	ldr	r3, [r3, #0]
 801cae6:	330c      	adds	r3, #12
 801cae8:	7812      	ldrb	r2, [r2, #0]
 801caea:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 801caec:	68fb      	ldr	r3, [r7, #12]
 801caee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801caf0:	1c5a      	adds	r2, r3, #1
 801caf2:	68fb      	ldr	r3, [r7, #12]
 801caf4:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 801caf6:	68fb      	ldr	r3, [r7, #12]
 801caf8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 801cafa:	b29b      	uxth	r3, r3
 801cafc:	3b01      	subs	r3, #1
 801cafe:	b29a      	uxth	r2, r3
 801cb00:	68fb      	ldr	r3, [r7, #12]
 801cb02:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 801cb04:	2300      	movs	r3, #0
 801cb06:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 801cb08:	68fb      	ldr	r3, [r7, #12]
 801cb0a:	681b      	ldr	r3, [r3, #0]
 801cb0c:	689b      	ldr	r3, [r3, #8]
 801cb0e:	f003 0301 	and.w	r3, r3, #1
 801cb12:	2b01      	cmp	r3, #1
 801cb14:	d119      	bne.n	801cb4a <HAL_SPI_TransmitReceive+0x2ae>
 801cb16:	68fb      	ldr	r3, [r7, #12]
 801cb18:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801cb1a:	b29b      	uxth	r3, r3
 801cb1c:	2b00      	cmp	r3, #0
 801cb1e:	d014      	beq.n	801cb4a <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 801cb20:	68fb      	ldr	r3, [r7, #12]
 801cb22:	681b      	ldr	r3, [r3, #0]
 801cb24:	68da      	ldr	r2, [r3, #12]
 801cb26:	68fb      	ldr	r3, [r7, #12]
 801cb28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801cb2a:	b2d2      	uxtb	r2, r2
 801cb2c:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 801cb2e:	68fb      	ldr	r3, [r7, #12]
 801cb30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801cb32:	1c5a      	adds	r2, r3, #1
 801cb34:	68fb      	ldr	r3, [r7, #12]
 801cb36:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 801cb38:	68fb      	ldr	r3, [r7, #12]
 801cb3a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801cb3c:	b29b      	uxth	r3, r3
 801cb3e:	3b01      	subs	r3, #1
 801cb40:	b29a      	uxth	r2, r3
 801cb42:	68fb      	ldr	r3, [r7, #12]
 801cb44:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 801cb46:	2301      	movs	r3, #1
 801cb48:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 801cb4a:	f7fb fd6b 	bl	8018624 <HAL_GetTick>
 801cb4e:	4602      	mov	r2, r0
 801cb50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801cb52:	1ad3      	subs	r3, r2, r3
 801cb54:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801cb56:	429a      	cmp	r2, r3
 801cb58:	d803      	bhi.n	801cb62 <HAL_SPI_TransmitReceive+0x2c6>
 801cb5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801cb5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 801cb60:	d102      	bne.n	801cb68 <HAL_SPI_TransmitReceive+0x2cc>
 801cb62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801cb64:	2b00      	cmp	r3, #0
 801cb66:	d103      	bne.n	801cb70 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 801cb68:	2303      	movs	r3, #3
 801cb6a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 801cb6e:	e029      	b.n	801cbc4 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 801cb70:	68fb      	ldr	r3, [r7, #12]
 801cb72:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 801cb74:	b29b      	uxth	r3, r3
 801cb76:	2b00      	cmp	r3, #0
 801cb78:	d1a2      	bne.n	801cac0 <HAL_SPI_TransmitReceive+0x224>
 801cb7a:	68fb      	ldr	r3, [r7, #12]
 801cb7c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801cb7e:	b29b      	uxth	r3, r3
 801cb80:	2b00      	cmp	r3, #0
 801cb82:	d19d      	bne.n	801cac0 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 801cb84:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801cb86:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 801cb88:	68f8      	ldr	r0, [r7, #12]
 801cb8a:	f000 fa43 	bl	801d014 <SPI_EndRxTxTransaction>
 801cb8e:	4603      	mov	r3, r0
 801cb90:	2b00      	cmp	r3, #0
 801cb92:	d006      	beq.n	801cba2 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 801cb94:	2301      	movs	r3, #1
 801cb96:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 801cb9a:	68fb      	ldr	r3, [r7, #12]
 801cb9c:	2220      	movs	r2, #32
 801cb9e:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 801cba0:	e010      	b.n	801cbc4 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 801cba2:	68fb      	ldr	r3, [r7, #12]
 801cba4:	689b      	ldr	r3, [r3, #8]
 801cba6:	2b00      	cmp	r3, #0
 801cba8:	d10b      	bne.n	801cbc2 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 801cbaa:	2300      	movs	r3, #0
 801cbac:	617b      	str	r3, [r7, #20]
 801cbae:	68fb      	ldr	r3, [r7, #12]
 801cbb0:	681b      	ldr	r3, [r3, #0]
 801cbb2:	68db      	ldr	r3, [r3, #12]
 801cbb4:	617b      	str	r3, [r7, #20]
 801cbb6:	68fb      	ldr	r3, [r7, #12]
 801cbb8:	681b      	ldr	r3, [r3, #0]
 801cbba:	689b      	ldr	r3, [r3, #8]
 801cbbc:	617b      	str	r3, [r7, #20]
 801cbbe:	697b      	ldr	r3, [r7, #20]
 801cbc0:	e000      	b.n	801cbc4 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 801cbc2:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 801cbc4:	68fb      	ldr	r3, [r7, #12]
 801cbc6:	2201      	movs	r2, #1
 801cbc8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 801cbcc:	68fb      	ldr	r3, [r7, #12]
 801cbce:	2200      	movs	r2, #0
 801cbd0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 801cbd4:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 801cbd8:	4618      	mov	r0, r3
 801cbda:	3730      	adds	r7, #48	; 0x30
 801cbdc:	46bd      	mov	sp, r7
 801cbde:	bd80      	pop	{r7, pc}

0801cbe0 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 801cbe0:	b580      	push	{r7, lr}
 801cbe2:	b088      	sub	sp, #32
 801cbe4:	af00      	add	r7, sp, #0
 801cbe6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 801cbe8:	687b      	ldr	r3, [r7, #4]
 801cbea:	681b      	ldr	r3, [r3, #0]
 801cbec:	685b      	ldr	r3, [r3, #4]
 801cbee:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 801cbf0:	687b      	ldr	r3, [r7, #4]
 801cbf2:	681b      	ldr	r3, [r3, #0]
 801cbf4:	689b      	ldr	r3, [r3, #8]
 801cbf6:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 801cbf8:	69bb      	ldr	r3, [r7, #24]
 801cbfa:	099b      	lsrs	r3, r3, #6
 801cbfc:	f003 0301 	and.w	r3, r3, #1
 801cc00:	2b00      	cmp	r3, #0
 801cc02:	d10f      	bne.n	801cc24 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 801cc04:	69bb      	ldr	r3, [r7, #24]
 801cc06:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 801cc0a:	2b00      	cmp	r3, #0
 801cc0c:	d00a      	beq.n	801cc24 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 801cc0e:	69fb      	ldr	r3, [r7, #28]
 801cc10:	099b      	lsrs	r3, r3, #6
 801cc12:	f003 0301 	and.w	r3, r3, #1
 801cc16:	2b00      	cmp	r3, #0
 801cc18:	d004      	beq.n	801cc24 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 801cc1a:	687b      	ldr	r3, [r7, #4]
 801cc1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801cc1e:	6878      	ldr	r0, [r7, #4]
 801cc20:	4798      	blx	r3
    return;
 801cc22:	e0d7      	b.n	801cdd4 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 801cc24:	69bb      	ldr	r3, [r7, #24]
 801cc26:	085b      	lsrs	r3, r3, #1
 801cc28:	f003 0301 	and.w	r3, r3, #1
 801cc2c:	2b00      	cmp	r3, #0
 801cc2e:	d00a      	beq.n	801cc46 <HAL_SPI_IRQHandler+0x66>
 801cc30:	69fb      	ldr	r3, [r7, #28]
 801cc32:	09db      	lsrs	r3, r3, #7
 801cc34:	f003 0301 	and.w	r3, r3, #1
 801cc38:	2b00      	cmp	r3, #0
 801cc3a:	d004      	beq.n	801cc46 <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 801cc3c:	687b      	ldr	r3, [r7, #4]
 801cc3e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801cc40:	6878      	ldr	r0, [r7, #4]
 801cc42:	4798      	blx	r3
    return;
 801cc44:	e0c6      	b.n	801cdd4 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 801cc46:	69bb      	ldr	r3, [r7, #24]
 801cc48:	095b      	lsrs	r3, r3, #5
 801cc4a:	f003 0301 	and.w	r3, r3, #1
 801cc4e:	2b00      	cmp	r3, #0
 801cc50:	d10c      	bne.n	801cc6c <HAL_SPI_IRQHandler+0x8c>
 801cc52:	69bb      	ldr	r3, [r7, #24]
 801cc54:	099b      	lsrs	r3, r3, #6
 801cc56:	f003 0301 	and.w	r3, r3, #1
 801cc5a:	2b00      	cmp	r3, #0
 801cc5c:	d106      	bne.n	801cc6c <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 801cc5e:	69bb      	ldr	r3, [r7, #24]
 801cc60:	0a1b      	lsrs	r3, r3, #8
 801cc62:	f003 0301 	and.w	r3, r3, #1
 801cc66:	2b00      	cmp	r3, #0
 801cc68:	f000 80b4 	beq.w	801cdd4 <HAL_SPI_IRQHandler+0x1f4>
 801cc6c:	69fb      	ldr	r3, [r7, #28]
 801cc6e:	095b      	lsrs	r3, r3, #5
 801cc70:	f003 0301 	and.w	r3, r3, #1
 801cc74:	2b00      	cmp	r3, #0
 801cc76:	f000 80ad 	beq.w	801cdd4 <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 801cc7a:	69bb      	ldr	r3, [r7, #24]
 801cc7c:	099b      	lsrs	r3, r3, #6
 801cc7e:	f003 0301 	and.w	r3, r3, #1
 801cc82:	2b00      	cmp	r3, #0
 801cc84:	d023      	beq.n	801ccce <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 801cc86:	687b      	ldr	r3, [r7, #4]
 801cc88:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 801cc8c:	b2db      	uxtb	r3, r3
 801cc8e:	2b03      	cmp	r3, #3
 801cc90:	d011      	beq.n	801ccb6 <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 801cc92:	687b      	ldr	r3, [r7, #4]
 801cc94:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801cc96:	f043 0204 	orr.w	r2, r3, #4
 801cc9a:	687b      	ldr	r3, [r7, #4]
 801cc9c:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 801cc9e:	2300      	movs	r3, #0
 801cca0:	617b      	str	r3, [r7, #20]
 801cca2:	687b      	ldr	r3, [r7, #4]
 801cca4:	681b      	ldr	r3, [r3, #0]
 801cca6:	68db      	ldr	r3, [r3, #12]
 801cca8:	617b      	str	r3, [r7, #20]
 801ccaa:	687b      	ldr	r3, [r7, #4]
 801ccac:	681b      	ldr	r3, [r3, #0]
 801ccae:	689b      	ldr	r3, [r3, #8]
 801ccb0:	617b      	str	r3, [r7, #20]
 801ccb2:	697b      	ldr	r3, [r7, #20]
 801ccb4:	e00b      	b.n	801ccce <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 801ccb6:	2300      	movs	r3, #0
 801ccb8:	613b      	str	r3, [r7, #16]
 801ccba:	687b      	ldr	r3, [r7, #4]
 801ccbc:	681b      	ldr	r3, [r3, #0]
 801ccbe:	68db      	ldr	r3, [r3, #12]
 801ccc0:	613b      	str	r3, [r7, #16]
 801ccc2:	687b      	ldr	r3, [r7, #4]
 801ccc4:	681b      	ldr	r3, [r3, #0]
 801ccc6:	689b      	ldr	r3, [r3, #8]
 801ccc8:	613b      	str	r3, [r7, #16]
 801ccca:	693b      	ldr	r3, [r7, #16]
        return;
 801cccc:	e082      	b.n	801cdd4 <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 801ccce:	69bb      	ldr	r3, [r7, #24]
 801ccd0:	095b      	lsrs	r3, r3, #5
 801ccd2:	f003 0301 	and.w	r3, r3, #1
 801ccd6:	2b00      	cmp	r3, #0
 801ccd8:	d014      	beq.n	801cd04 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 801ccda:	687b      	ldr	r3, [r7, #4]
 801ccdc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801ccde:	f043 0201 	orr.w	r2, r3, #1
 801cce2:	687b      	ldr	r3, [r7, #4]
 801cce4:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 801cce6:	2300      	movs	r3, #0
 801cce8:	60fb      	str	r3, [r7, #12]
 801ccea:	687b      	ldr	r3, [r7, #4]
 801ccec:	681b      	ldr	r3, [r3, #0]
 801ccee:	689b      	ldr	r3, [r3, #8]
 801ccf0:	60fb      	str	r3, [r7, #12]
 801ccf2:	687b      	ldr	r3, [r7, #4]
 801ccf4:	681b      	ldr	r3, [r3, #0]
 801ccf6:	681a      	ldr	r2, [r3, #0]
 801ccf8:	687b      	ldr	r3, [r7, #4]
 801ccfa:	681b      	ldr	r3, [r3, #0]
 801ccfc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 801cd00:	601a      	str	r2, [r3, #0]
 801cd02:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 801cd04:	69bb      	ldr	r3, [r7, #24]
 801cd06:	0a1b      	lsrs	r3, r3, #8
 801cd08:	f003 0301 	and.w	r3, r3, #1
 801cd0c:	2b00      	cmp	r3, #0
 801cd0e:	d00c      	beq.n	801cd2a <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 801cd10:	687b      	ldr	r3, [r7, #4]
 801cd12:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801cd14:	f043 0208 	orr.w	r2, r3, #8
 801cd18:	687b      	ldr	r3, [r7, #4]
 801cd1a:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 801cd1c:	2300      	movs	r3, #0
 801cd1e:	60bb      	str	r3, [r7, #8]
 801cd20:	687b      	ldr	r3, [r7, #4]
 801cd22:	681b      	ldr	r3, [r3, #0]
 801cd24:	689b      	ldr	r3, [r3, #8]
 801cd26:	60bb      	str	r3, [r7, #8]
 801cd28:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 801cd2a:	687b      	ldr	r3, [r7, #4]
 801cd2c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801cd2e:	2b00      	cmp	r3, #0
 801cd30:	d04f      	beq.n	801cdd2 <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 801cd32:	687b      	ldr	r3, [r7, #4]
 801cd34:	681b      	ldr	r3, [r3, #0]
 801cd36:	685a      	ldr	r2, [r3, #4]
 801cd38:	687b      	ldr	r3, [r7, #4]
 801cd3a:	681b      	ldr	r3, [r3, #0]
 801cd3c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 801cd40:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 801cd42:	687b      	ldr	r3, [r7, #4]
 801cd44:	2201      	movs	r2, #1
 801cd46:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 801cd4a:	69fb      	ldr	r3, [r7, #28]
 801cd4c:	f003 0302 	and.w	r3, r3, #2
 801cd50:	2b00      	cmp	r3, #0
 801cd52:	d104      	bne.n	801cd5e <HAL_SPI_IRQHandler+0x17e>
 801cd54:	69fb      	ldr	r3, [r7, #28]
 801cd56:	f003 0301 	and.w	r3, r3, #1
 801cd5a:	2b00      	cmp	r3, #0
 801cd5c:	d034      	beq.n	801cdc8 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 801cd5e:	687b      	ldr	r3, [r7, #4]
 801cd60:	681b      	ldr	r3, [r3, #0]
 801cd62:	685a      	ldr	r2, [r3, #4]
 801cd64:	687b      	ldr	r3, [r7, #4]
 801cd66:	681b      	ldr	r3, [r3, #0]
 801cd68:	f022 0203 	bic.w	r2, r2, #3
 801cd6c:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 801cd6e:	687b      	ldr	r3, [r7, #4]
 801cd70:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801cd72:	2b00      	cmp	r3, #0
 801cd74:	d011      	beq.n	801cd9a <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 801cd76:	687b      	ldr	r3, [r7, #4]
 801cd78:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801cd7a:	4a18      	ldr	r2, [pc, #96]	; (801cddc <HAL_SPI_IRQHandler+0x1fc>)
 801cd7c:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 801cd7e:	687b      	ldr	r3, [r7, #4]
 801cd80:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801cd82:	4618      	mov	r0, r3
 801cd84:	f7fc f946 	bl	8019014 <HAL_DMA_Abort_IT>
 801cd88:	4603      	mov	r3, r0
 801cd8a:	2b00      	cmp	r3, #0
 801cd8c:	d005      	beq.n	801cd9a <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 801cd8e:	687b      	ldr	r3, [r7, #4]
 801cd90:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801cd92:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 801cd96:	687b      	ldr	r3, [r7, #4]
 801cd98:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 801cd9a:	687b      	ldr	r3, [r7, #4]
 801cd9c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801cd9e:	2b00      	cmp	r3, #0
 801cda0:	d016      	beq.n	801cdd0 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 801cda2:	687b      	ldr	r3, [r7, #4]
 801cda4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801cda6:	4a0d      	ldr	r2, [pc, #52]	; (801cddc <HAL_SPI_IRQHandler+0x1fc>)
 801cda8:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 801cdaa:	687b      	ldr	r3, [r7, #4]
 801cdac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801cdae:	4618      	mov	r0, r3
 801cdb0:	f7fc f930 	bl	8019014 <HAL_DMA_Abort_IT>
 801cdb4:	4603      	mov	r3, r0
 801cdb6:	2b00      	cmp	r3, #0
 801cdb8:	d00a      	beq.n	801cdd0 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 801cdba:	687b      	ldr	r3, [r7, #4]
 801cdbc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801cdbe:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 801cdc2:	687b      	ldr	r3, [r7, #4]
 801cdc4:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 801cdc6:	e003      	b.n	801cdd0 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 801cdc8:	6878      	ldr	r0, [r7, #4]
 801cdca:	f000 f809 	bl	801cde0 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 801cdce:	e000      	b.n	801cdd2 <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 801cdd0:	bf00      	nop
    return;
 801cdd2:	bf00      	nop
  }
}
 801cdd4:	3720      	adds	r7, #32
 801cdd6:	46bd      	mov	sp, r7
 801cdd8:	bd80      	pop	{r7, pc}
 801cdda:	bf00      	nop
 801cddc:	0801ce11 	.word	0x0801ce11

0801cde0 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 801cde0:	b480      	push	{r7}
 801cde2:	b083      	sub	sp, #12
 801cde4:	af00      	add	r7, sp, #0
 801cde6:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 801cde8:	bf00      	nop
 801cdea:	370c      	adds	r7, #12
 801cdec:	46bd      	mov	sp, r7
 801cdee:	f85d 7b04 	ldr.w	r7, [sp], #4
 801cdf2:	4770      	bx	lr

0801cdf4 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 801cdf4:	b480      	push	{r7}
 801cdf6:	b083      	sub	sp, #12
 801cdf8:	af00      	add	r7, sp, #0
 801cdfa:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 801cdfc:	687b      	ldr	r3, [r7, #4]
 801cdfe:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 801ce02:	b2db      	uxtb	r3, r3
}
 801ce04:	4618      	mov	r0, r3
 801ce06:	370c      	adds	r7, #12
 801ce08:	46bd      	mov	sp, r7
 801ce0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ce0e:	4770      	bx	lr

0801ce10 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 801ce10:	b580      	push	{r7, lr}
 801ce12:	b084      	sub	sp, #16
 801ce14:	af00      	add	r7, sp, #0
 801ce16:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 801ce18:	687b      	ldr	r3, [r7, #4]
 801ce1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801ce1c:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 801ce1e:	68fb      	ldr	r3, [r7, #12]
 801ce20:	2200      	movs	r2, #0
 801ce22:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 801ce24:	68fb      	ldr	r3, [r7, #12]
 801ce26:	2200      	movs	r2, #0
 801ce28:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 801ce2a:	68f8      	ldr	r0, [r7, #12]
 801ce2c:	f7ff ffd8 	bl	801cde0 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 801ce30:	bf00      	nop
 801ce32:	3710      	adds	r7, #16
 801ce34:	46bd      	mov	sp, r7
 801ce36:	bd80      	pop	{r7, pc}

0801ce38 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 801ce38:	b580      	push	{r7, lr}
 801ce3a:	b088      	sub	sp, #32
 801ce3c:	af00      	add	r7, sp, #0
 801ce3e:	60f8      	str	r0, [r7, #12]
 801ce40:	60b9      	str	r1, [r7, #8]
 801ce42:	603b      	str	r3, [r7, #0]
 801ce44:	4613      	mov	r3, r2
 801ce46:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 801ce48:	f7fb fbec 	bl	8018624 <HAL_GetTick>
 801ce4c:	4602      	mov	r2, r0
 801ce4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801ce50:	1a9b      	subs	r3, r3, r2
 801ce52:	683a      	ldr	r2, [r7, #0]
 801ce54:	4413      	add	r3, r2
 801ce56:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 801ce58:	f7fb fbe4 	bl	8018624 <HAL_GetTick>
 801ce5c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 801ce5e:	4b39      	ldr	r3, [pc, #228]	; (801cf44 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 801ce60:	681b      	ldr	r3, [r3, #0]
 801ce62:	015b      	lsls	r3, r3, #5
 801ce64:	0d1b      	lsrs	r3, r3, #20
 801ce66:	69fa      	ldr	r2, [r7, #28]
 801ce68:	fb02 f303 	mul.w	r3, r2, r3
 801ce6c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 801ce6e:	e054      	b.n	801cf1a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 801ce70:	683b      	ldr	r3, [r7, #0]
 801ce72:	f1b3 3fff 	cmp.w	r3, #4294967295
 801ce76:	d050      	beq.n	801cf1a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 801ce78:	f7fb fbd4 	bl	8018624 <HAL_GetTick>
 801ce7c:	4602      	mov	r2, r0
 801ce7e:	69bb      	ldr	r3, [r7, #24]
 801ce80:	1ad3      	subs	r3, r2, r3
 801ce82:	69fa      	ldr	r2, [r7, #28]
 801ce84:	429a      	cmp	r2, r3
 801ce86:	d902      	bls.n	801ce8e <SPI_WaitFlagStateUntilTimeout+0x56>
 801ce88:	69fb      	ldr	r3, [r7, #28]
 801ce8a:	2b00      	cmp	r3, #0
 801ce8c:	d13d      	bne.n	801cf0a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 801ce8e:	68fb      	ldr	r3, [r7, #12]
 801ce90:	681b      	ldr	r3, [r3, #0]
 801ce92:	685a      	ldr	r2, [r3, #4]
 801ce94:	68fb      	ldr	r3, [r7, #12]
 801ce96:	681b      	ldr	r3, [r3, #0]
 801ce98:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 801ce9c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 801ce9e:	68fb      	ldr	r3, [r7, #12]
 801cea0:	685b      	ldr	r3, [r3, #4]
 801cea2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 801cea6:	d111      	bne.n	801cecc <SPI_WaitFlagStateUntilTimeout+0x94>
 801cea8:	68fb      	ldr	r3, [r7, #12]
 801ceaa:	689b      	ldr	r3, [r3, #8]
 801ceac:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801ceb0:	d004      	beq.n	801cebc <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 801ceb2:	68fb      	ldr	r3, [r7, #12]
 801ceb4:	689b      	ldr	r3, [r3, #8]
 801ceb6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801ceba:	d107      	bne.n	801cecc <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 801cebc:	68fb      	ldr	r3, [r7, #12]
 801cebe:	681b      	ldr	r3, [r3, #0]
 801cec0:	681a      	ldr	r2, [r3, #0]
 801cec2:	68fb      	ldr	r3, [r7, #12]
 801cec4:	681b      	ldr	r3, [r3, #0]
 801cec6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 801ceca:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 801cecc:	68fb      	ldr	r3, [r7, #12]
 801cece:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801ced0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 801ced4:	d10f      	bne.n	801cef6 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 801ced6:	68fb      	ldr	r3, [r7, #12]
 801ced8:	681b      	ldr	r3, [r3, #0]
 801ceda:	681a      	ldr	r2, [r3, #0]
 801cedc:	68fb      	ldr	r3, [r7, #12]
 801cede:	681b      	ldr	r3, [r3, #0]
 801cee0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 801cee4:	601a      	str	r2, [r3, #0]
 801cee6:	68fb      	ldr	r3, [r7, #12]
 801cee8:	681b      	ldr	r3, [r3, #0]
 801ceea:	681a      	ldr	r2, [r3, #0]
 801ceec:	68fb      	ldr	r3, [r7, #12]
 801ceee:	681b      	ldr	r3, [r3, #0]
 801cef0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 801cef4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 801cef6:	68fb      	ldr	r3, [r7, #12]
 801cef8:	2201      	movs	r2, #1
 801cefa:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 801cefe:	68fb      	ldr	r3, [r7, #12]
 801cf00:	2200      	movs	r2, #0
 801cf02:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 801cf06:	2303      	movs	r3, #3
 801cf08:	e017      	b.n	801cf3a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 801cf0a:	697b      	ldr	r3, [r7, #20]
 801cf0c:	2b00      	cmp	r3, #0
 801cf0e:	d101      	bne.n	801cf14 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 801cf10:	2300      	movs	r3, #0
 801cf12:	61fb      	str	r3, [r7, #28]
      }
      count--;
 801cf14:	697b      	ldr	r3, [r7, #20]
 801cf16:	3b01      	subs	r3, #1
 801cf18:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 801cf1a:	68fb      	ldr	r3, [r7, #12]
 801cf1c:	681b      	ldr	r3, [r3, #0]
 801cf1e:	689a      	ldr	r2, [r3, #8]
 801cf20:	68bb      	ldr	r3, [r7, #8]
 801cf22:	4013      	ands	r3, r2
 801cf24:	68ba      	ldr	r2, [r7, #8]
 801cf26:	429a      	cmp	r2, r3
 801cf28:	bf0c      	ite	eq
 801cf2a:	2301      	moveq	r3, #1
 801cf2c:	2300      	movne	r3, #0
 801cf2e:	b2db      	uxtb	r3, r3
 801cf30:	461a      	mov	r2, r3
 801cf32:	79fb      	ldrb	r3, [r7, #7]
 801cf34:	429a      	cmp	r2, r3
 801cf36:	d19b      	bne.n	801ce70 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 801cf38:	2300      	movs	r3, #0
}
 801cf3a:	4618      	mov	r0, r3
 801cf3c:	3720      	adds	r7, #32
 801cf3e:	46bd      	mov	sp, r7
 801cf40:	bd80      	pop	{r7, pc}
 801cf42:	bf00      	nop
 801cf44:	2000058c 	.word	0x2000058c

0801cf48 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 801cf48:	b580      	push	{r7, lr}
 801cf4a:	b086      	sub	sp, #24
 801cf4c:	af02      	add	r7, sp, #8
 801cf4e:	60f8      	str	r0, [r7, #12]
 801cf50:	60b9      	str	r1, [r7, #8]
 801cf52:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 801cf54:	68fb      	ldr	r3, [r7, #12]
 801cf56:	685b      	ldr	r3, [r3, #4]
 801cf58:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 801cf5c:	d111      	bne.n	801cf82 <SPI_EndRxTransaction+0x3a>
 801cf5e:	68fb      	ldr	r3, [r7, #12]
 801cf60:	689b      	ldr	r3, [r3, #8]
 801cf62:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801cf66:	d004      	beq.n	801cf72 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 801cf68:	68fb      	ldr	r3, [r7, #12]
 801cf6a:	689b      	ldr	r3, [r3, #8]
 801cf6c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801cf70:	d107      	bne.n	801cf82 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 801cf72:	68fb      	ldr	r3, [r7, #12]
 801cf74:	681b      	ldr	r3, [r3, #0]
 801cf76:	681a      	ldr	r2, [r3, #0]
 801cf78:	68fb      	ldr	r3, [r7, #12]
 801cf7a:	681b      	ldr	r3, [r3, #0]
 801cf7c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 801cf80:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 801cf82:	68fb      	ldr	r3, [r7, #12]
 801cf84:	685b      	ldr	r3, [r3, #4]
 801cf86:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 801cf8a:	d12a      	bne.n	801cfe2 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 801cf8c:	68fb      	ldr	r3, [r7, #12]
 801cf8e:	689b      	ldr	r3, [r3, #8]
 801cf90:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801cf94:	d012      	beq.n	801cfbc <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 801cf96:	687b      	ldr	r3, [r7, #4]
 801cf98:	9300      	str	r3, [sp, #0]
 801cf9a:	68bb      	ldr	r3, [r7, #8]
 801cf9c:	2200      	movs	r2, #0
 801cf9e:	2180      	movs	r1, #128	; 0x80
 801cfa0:	68f8      	ldr	r0, [r7, #12]
 801cfa2:	f7ff ff49 	bl	801ce38 <SPI_WaitFlagStateUntilTimeout>
 801cfa6:	4603      	mov	r3, r0
 801cfa8:	2b00      	cmp	r3, #0
 801cfaa:	d02d      	beq.n	801d008 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 801cfac:	68fb      	ldr	r3, [r7, #12]
 801cfae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801cfb0:	f043 0220 	orr.w	r2, r3, #32
 801cfb4:	68fb      	ldr	r3, [r7, #12]
 801cfb6:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 801cfb8:	2303      	movs	r3, #3
 801cfba:	e026      	b.n	801d00a <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 801cfbc:	687b      	ldr	r3, [r7, #4]
 801cfbe:	9300      	str	r3, [sp, #0]
 801cfc0:	68bb      	ldr	r3, [r7, #8]
 801cfc2:	2200      	movs	r2, #0
 801cfc4:	2101      	movs	r1, #1
 801cfc6:	68f8      	ldr	r0, [r7, #12]
 801cfc8:	f7ff ff36 	bl	801ce38 <SPI_WaitFlagStateUntilTimeout>
 801cfcc:	4603      	mov	r3, r0
 801cfce:	2b00      	cmp	r3, #0
 801cfd0:	d01a      	beq.n	801d008 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 801cfd2:	68fb      	ldr	r3, [r7, #12]
 801cfd4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801cfd6:	f043 0220 	orr.w	r2, r3, #32
 801cfda:	68fb      	ldr	r3, [r7, #12]
 801cfdc:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 801cfde:	2303      	movs	r3, #3
 801cfe0:	e013      	b.n	801d00a <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 801cfe2:	687b      	ldr	r3, [r7, #4]
 801cfe4:	9300      	str	r3, [sp, #0]
 801cfe6:	68bb      	ldr	r3, [r7, #8]
 801cfe8:	2200      	movs	r2, #0
 801cfea:	2101      	movs	r1, #1
 801cfec:	68f8      	ldr	r0, [r7, #12]
 801cfee:	f7ff ff23 	bl	801ce38 <SPI_WaitFlagStateUntilTimeout>
 801cff2:	4603      	mov	r3, r0
 801cff4:	2b00      	cmp	r3, #0
 801cff6:	d007      	beq.n	801d008 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 801cff8:	68fb      	ldr	r3, [r7, #12]
 801cffa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801cffc:	f043 0220 	orr.w	r2, r3, #32
 801d000:	68fb      	ldr	r3, [r7, #12]
 801d002:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 801d004:	2303      	movs	r3, #3
 801d006:	e000      	b.n	801d00a <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 801d008:	2300      	movs	r3, #0
}
 801d00a:	4618      	mov	r0, r3
 801d00c:	3710      	adds	r7, #16
 801d00e:	46bd      	mov	sp, r7
 801d010:	bd80      	pop	{r7, pc}
	...

0801d014 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 801d014:	b580      	push	{r7, lr}
 801d016:	b088      	sub	sp, #32
 801d018:	af02      	add	r7, sp, #8
 801d01a:	60f8      	str	r0, [r7, #12]
 801d01c:	60b9      	str	r1, [r7, #8]
 801d01e:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 801d020:	4b1b      	ldr	r3, [pc, #108]	; (801d090 <SPI_EndRxTxTransaction+0x7c>)
 801d022:	681b      	ldr	r3, [r3, #0]
 801d024:	4a1b      	ldr	r2, [pc, #108]	; (801d094 <SPI_EndRxTxTransaction+0x80>)
 801d026:	fba2 2303 	umull	r2, r3, r2, r3
 801d02a:	0d5b      	lsrs	r3, r3, #21
 801d02c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 801d030:	fb02 f303 	mul.w	r3, r2, r3
 801d034:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 801d036:	68fb      	ldr	r3, [r7, #12]
 801d038:	685b      	ldr	r3, [r3, #4]
 801d03a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 801d03e:	d112      	bne.n	801d066 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 801d040:	687b      	ldr	r3, [r7, #4]
 801d042:	9300      	str	r3, [sp, #0]
 801d044:	68bb      	ldr	r3, [r7, #8]
 801d046:	2200      	movs	r2, #0
 801d048:	2180      	movs	r1, #128	; 0x80
 801d04a:	68f8      	ldr	r0, [r7, #12]
 801d04c:	f7ff fef4 	bl	801ce38 <SPI_WaitFlagStateUntilTimeout>
 801d050:	4603      	mov	r3, r0
 801d052:	2b00      	cmp	r3, #0
 801d054:	d016      	beq.n	801d084 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 801d056:	68fb      	ldr	r3, [r7, #12]
 801d058:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801d05a:	f043 0220 	orr.w	r2, r3, #32
 801d05e:	68fb      	ldr	r3, [r7, #12]
 801d060:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 801d062:	2303      	movs	r3, #3
 801d064:	e00f      	b.n	801d086 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 801d066:	697b      	ldr	r3, [r7, #20]
 801d068:	2b00      	cmp	r3, #0
 801d06a:	d00a      	beq.n	801d082 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 801d06c:	697b      	ldr	r3, [r7, #20]
 801d06e:	3b01      	subs	r3, #1
 801d070:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 801d072:	68fb      	ldr	r3, [r7, #12]
 801d074:	681b      	ldr	r3, [r3, #0]
 801d076:	689b      	ldr	r3, [r3, #8]
 801d078:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801d07c:	2b80      	cmp	r3, #128	; 0x80
 801d07e:	d0f2      	beq.n	801d066 <SPI_EndRxTxTransaction+0x52>
 801d080:	e000      	b.n	801d084 <SPI_EndRxTxTransaction+0x70>
        break;
 801d082:	bf00      	nop
  }

  return HAL_OK;
 801d084:	2300      	movs	r3, #0
}
 801d086:	4618      	mov	r0, r3
 801d088:	3718      	adds	r7, #24
 801d08a:	46bd      	mov	sp, r7
 801d08c:	bd80      	pop	{r7, pc}
 801d08e:	bf00      	nop
 801d090:	2000058c 	.word	0x2000058c
 801d094:	165e9f81 	.word	0x165e9f81

0801d098 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 801d098:	b580      	push	{r7, lr}
 801d09a:	b082      	sub	sp, #8
 801d09c:	af00      	add	r7, sp, #0
 801d09e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 801d0a0:	687b      	ldr	r3, [r7, #4]
 801d0a2:	2b00      	cmp	r3, #0
 801d0a4:	d101      	bne.n	801d0aa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 801d0a6:	2301      	movs	r3, #1
 801d0a8:	e041      	b.n	801d12e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 801d0aa:	687b      	ldr	r3, [r7, #4]
 801d0ac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801d0b0:	b2db      	uxtb	r3, r3
 801d0b2:	2b00      	cmp	r3, #0
 801d0b4:	d106      	bne.n	801d0c4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 801d0b6:	687b      	ldr	r3, [r7, #4]
 801d0b8:	2200      	movs	r2, #0
 801d0ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 801d0be:	6878      	ldr	r0, [r7, #4]
 801d0c0:	f7fb f908 	bl	80182d4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 801d0c4:	687b      	ldr	r3, [r7, #4]
 801d0c6:	2202      	movs	r2, #2
 801d0c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 801d0cc:	687b      	ldr	r3, [r7, #4]
 801d0ce:	681a      	ldr	r2, [r3, #0]
 801d0d0:	687b      	ldr	r3, [r7, #4]
 801d0d2:	3304      	adds	r3, #4
 801d0d4:	4619      	mov	r1, r3
 801d0d6:	4610      	mov	r0, r2
 801d0d8:	f000 faf2 	bl	801d6c0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 801d0dc:	687b      	ldr	r3, [r7, #4]
 801d0de:	2201      	movs	r2, #1
 801d0e0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 801d0e4:	687b      	ldr	r3, [r7, #4]
 801d0e6:	2201      	movs	r2, #1
 801d0e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 801d0ec:	687b      	ldr	r3, [r7, #4]
 801d0ee:	2201      	movs	r2, #1
 801d0f0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 801d0f4:	687b      	ldr	r3, [r7, #4]
 801d0f6:	2201      	movs	r2, #1
 801d0f8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 801d0fc:	687b      	ldr	r3, [r7, #4]
 801d0fe:	2201      	movs	r2, #1
 801d100:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 801d104:	687b      	ldr	r3, [r7, #4]
 801d106:	2201      	movs	r2, #1
 801d108:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 801d10c:	687b      	ldr	r3, [r7, #4]
 801d10e:	2201      	movs	r2, #1
 801d110:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 801d114:	687b      	ldr	r3, [r7, #4]
 801d116:	2201      	movs	r2, #1
 801d118:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 801d11c:	687b      	ldr	r3, [r7, #4]
 801d11e:	2201      	movs	r2, #1
 801d120:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 801d124:	687b      	ldr	r3, [r7, #4]
 801d126:	2201      	movs	r2, #1
 801d128:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 801d12c:	2300      	movs	r3, #0
}
 801d12e:	4618      	mov	r0, r3
 801d130:	3708      	adds	r7, #8
 801d132:	46bd      	mov	sp, r7
 801d134:	bd80      	pop	{r7, pc}
	...

0801d138 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 801d138:	b480      	push	{r7}
 801d13a:	b085      	sub	sp, #20
 801d13c:	af00      	add	r7, sp, #0
 801d13e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 801d140:	687b      	ldr	r3, [r7, #4]
 801d142:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801d146:	b2db      	uxtb	r3, r3
 801d148:	2b01      	cmp	r3, #1
 801d14a:	d001      	beq.n	801d150 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 801d14c:	2301      	movs	r3, #1
 801d14e:	e04e      	b.n	801d1ee <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 801d150:	687b      	ldr	r3, [r7, #4]
 801d152:	2202      	movs	r2, #2
 801d154:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 801d158:	687b      	ldr	r3, [r7, #4]
 801d15a:	681b      	ldr	r3, [r3, #0]
 801d15c:	68da      	ldr	r2, [r3, #12]
 801d15e:	687b      	ldr	r3, [r7, #4]
 801d160:	681b      	ldr	r3, [r3, #0]
 801d162:	f042 0201 	orr.w	r2, r2, #1
 801d166:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 801d168:	687b      	ldr	r3, [r7, #4]
 801d16a:	681b      	ldr	r3, [r3, #0]
 801d16c:	4a23      	ldr	r2, [pc, #140]	; (801d1fc <HAL_TIM_Base_Start_IT+0xc4>)
 801d16e:	4293      	cmp	r3, r2
 801d170:	d022      	beq.n	801d1b8 <HAL_TIM_Base_Start_IT+0x80>
 801d172:	687b      	ldr	r3, [r7, #4]
 801d174:	681b      	ldr	r3, [r3, #0]
 801d176:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801d17a:	d01d      	beq.n	801d1b8 <HAL_TIM_Base_Start_IT+0x80>
 801d17c:	687b      	ldr	r3, [r7, #4]
 801d17e:	681b      	ldr	r3, [r3, #0]
 801d180:	4a1f      	ldr	r2, [pc, #124]	; (801d200 <HAL_TIM_Base_Start_IT+0xc8>)
 801d182:	4293      	cmp	r3, r2
 801d184:	d018      	beq.n	801d1b8 <HAL_TIM_Base_Start_IT+0x80>
 801d186:	687b      	ldr	r3, [r7, #4]
 801d188:	681b      	ldr	r3, [r3, #0]
 801d18a:	4a1e      	ldr	r2, [pc, #120]	; (801d204 <HAL_TIM_Base_Start_IT+0xcc>)
 801d18c:	4293      	cmp	r3, r2
 801d18e:	d013      	beq.n	801d1b8 <HAL_TIM_Base_Start_IT+0x80>
 801d190:	687b      	ldr	r3, [r7, #4]
 801d192:	681b      	ldr	r3, [r3, #0]
 801d194:	4a1c      	ldr	r2, [pc, #112]	; (801d208 <HAL_TIM_Base_Start_IT+0xd0>)
 801d196:	4293      	cmp	r3, r2
 801d198:	d00e      	beq.n	801d1b8 <HAL_TIM_Base_Start_IT+0x80>
 801d19a:	687b      	ldr	r3, [r7, #4]
 801d19c:	681b      	ldr	r3, [r3, #0]
 801d19e:	4a1b      	ldr	r2, [pc, #108]	; (801d20c <HAL_TIM_Base_Start_IT+0xd4>)
 801d1a0:	4293      	cmp	r3, r2
 801d1a2:	d009      	beq.n	801d1b8 <HAL_TIM_Base_Start_IT+0x80>
 801d1a4:	687b      	ldr	r3, [r7, #4]
 801d1a6:	681b      	ldr	r3, [r3, #0]
 801d1a8:	4a19      	ldr	r2, [pc, #100]	; (801d210 <HAL_TIM_Base_Start_IT+0xd8>)
 801d1aa:	4293      	cmp	r3, r2
 801d1ac:	d004      	beq.n	801d1b8 <HAL_TIM_Base_Start_IT+0x80>
 801d1ae:	687b      	ldr	r3, [r7, #4]
 801d1b0:	681b      	ldr	r3, [r3, #0]
 801d1b2:	4a18      	ldr	r2, [pc, #96]	; (801d214 <HAL_TIM_Base_Start_IT+0xdc>)
 801d1b4:	4293      	cmp	r3, r2
 801d1b6:	d111      	bne.n	801d1dc <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 801d1b8:	687b      	ldr	r3, [r7, #4]
 801d1ba:	681b      	ldr	r3, [r3, #0]
 801d1bc:	689b      	ldr	r3, [r3, #8]
 801d1be:	f003 0307 	and.w	r3, r3, #7
 801d1c2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801d1c4:	68fb      	ldr	r3, [r7, #12]
 801d1c6:	2b06      	cmp	r3, #6
 801d1c8:	d010      	beq.n	801d1ec <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 801d1ca:	687b      	ldr	r3, [r7, #4]
 801d1cc:	681b      	ldr	r3, [r3, #0]
 801d1ce:	681a      	ldr	r2, [r3, #0]
 801d1d0:	687b      	ldr	r3, [r7, #4]
 801d1d2:	681b      	ldr	r3, [r3, #0]
 801d1d4:	f042 0201 	orr.w	r2, r2, #1
 801d1d8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801d1da:	e007      	b.n	801d1ec <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 801d1dc:	687b      	ldr	r3, [r7, #4]
 801d1de:	681b      	ldr	r3, [r3, #0]
 801d1e0:	681a      	ldr	r2, [r3, #0]
 801d1e2:	687b      	ldr	r3, [r7, #4]
 801d1e4:	681b      	ldr	r3, [r3, #0]
 801d1e6:	f042 0201 	orr.w	r2, r2, #1
 801d1ea:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 801d1ec:	2300      	movs	r3, #0
}
 801d1ee:	4618      	mov	r0, r3
 801d1f0:	3714      	adds	r7, #20
 801d1f2:	46bd      	mov	sp, r7
 801d1f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d1f8:	4770      	bx	lr
 801d1fa:	bf00      	nop
 801d1fc:	40010000 	.word	0x40010000
 801d200:	40000400 	.word	0x40000400
 801d204:	40000800 	.word	0x40000800
 801d208:	40000c00 	.word	0x40000c00
 801d20c:	40010400 	.word	0x40010400
 801d210:	40014000 	.word	0x40014000
 801d214:	40001800 	.word	0x40001800

0801d218 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 801d218:	b580      	push	{r7, lr}
 801d21a:	b082      	sub	sp, #8
 801d21c:	af00      	add	r7, sp, #0
 801d21e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 801d220:	687b      	ldr	r3, [r7, #4]
 801d222:	681b      	ldr	r3, [r3, #0]
 801d224:	691b      	ldr	r3, [r3, #16]
 801d226:	f003 0302 	and.w	r3, r3, #2
 801d22a:	2b02      	cmp	r3, #2
 801d22c:	d122      	bne.n	801d274 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 801d22e:	687b      	ldr	r3, [r7, #4]
 801d230:	681b      	ldr	r3, [r3, #0]
 801d232:	68db      	ldr	r3, [r3, #12]
 801d234:	f003 0302 	and.w	r3, r3, #2
 801d238:	2b02      	cmp	r3, #2
 801d23a:	d11b      	bne.n	801d274 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 801d23c:	687b      	ldr	r3, [r7, #4]
 801d23e:	681b      	ldr	r3, [r3, #0]
 801d240:	f06f 0202 	mvn.w	r2, #2
 801d244:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 801d246:	687b      	ldr	r3, [r7, #4]
 801d248:	2201      	movs	r2, #1
 801d24a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 801d24c:	687b      	ldr	r3, [r7, #4]
 801d24e:	681b      	ldr	r3, [r3, #0]
 801d250:	699b      	ldr	r3, [r3, #24]
 801d252:	f003 0303 	and.w	r3, r3, #3
 801d256:	2b00      	cmp	r3, #0
 801d258:	d003      	beq.n	801d262 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 801d25a:	6878      	ldr	r0, [r7, #4]
 801d25c:	f000 fa11 	bl	801d682 <HAL_TIM_IC_CaptureCallback>
 801d260:	e005      	b.n	801d26e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 801d262:	6878      	ldr	r0, [r7, #4]
 801d264:	f000 fa03 	bl	801d66e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 801d268:	6878      	ldr	r0, [r7, #4]
 801d26a:	f000 fa14 	bl	801d696 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 801d26e:	687b      	ldr	r3, [r7, #4]
 801d270:	2200      	movs	r2, #0
 801d272:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 801d274:	687b      	ldr	r3, [r7, #4]
 801d276:	681b      	ldr	r3, [r3, #0]
 801d278:	691b      	ldr	r3, [r3, #16]
 801d27a:	f003 0304 	and.w	r3, r3, #4
 801d27e:	2b04      	cmp	r3, #4
 801d280:	d122      	bne.n	801d2c8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 801d282:	687b      	ldr	r3, [r7, #4]
 801d284:	681b      	ldr	r3, [r3, #0]
 801d286:	68db      	ldr	r3, [r3, #12]
 801d288:	f003 0304 	and.w	r3, r3, #4
 801d28c:	2b04      	cmp	r3, #4
 801d28e:	d11b      	bne.n	801d2c8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 801d290:	687b      	ldr	r3, [r7, #4]
 801d292:	681b      	ldr	r3, [r3, #0]
 801d294:	f06f 0204 	mvn.w	r2, #4
 801d298:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 801d29a:	687b      	ldr	r3, [r7, #4]
 801d29c:	2202      	movs	r2, #2
 801d29e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 801d2a0:	687b      	ldr	r3, [r7, #4]
 801d2a2:	681b      	ldr	r3, [r3, #0]
 801d2a4:	699b      	ldr	r3, [r3, #24]
 801d2a6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 801d2aa:	2b00      	cmp	r3, #0
 801d2ac:	d003      	beq.n	801d2b6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 801d2ae:	6878      	ldr	r0, [r7, #4]
 801d2b0:	f000 f9e7 	bl	801d682 <HAL_TIM_IC_CaptureCallback>
 801d2b4:	e005      	b.n	801d2c2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 801d2b6:	6878      	ldr	r0, [r7, #4]
 801d2b8:	f000 f9d9 	bl	801d66e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 801d2bc:	6878      	ldr	r0, [r7, #4]
 801d2be:	f000 f9ea 	bl	801d696 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 801d2c2:	687b      	ldr	r3, [r7, #4]
 801d2c4:	2200      	movs	r2, #0
 801d2c6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 801d2c8:	687b      	ldr	r3, [r7, #4]
 801d2ca:	681b      	ldr	r3, [r3, #0]
 801d2cc:	691b      	ldr	r3, [r3, #16]
 801d2ce:	f003 0308 	and.w	r3, r3, #8
 801d2d2:	2b08      	cmp	r3, #8
 801d2d4:	d122      	bne.n	801d31c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 801d2d6:	687b      	ldr	r3, [r7, #4]
 801d2d8:	681b      	ldr	r3, [r3, #0]
 801d2da:	68db      	ldr	r3, [r3, #12]
 801d2dc:	f003 0308 	and.w	r3, r3, #8
 801d2e0:	2b08      	cmp	r3, #8
 801d2e2:	d11b      	bne.n	801d31c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 801d2e4:	687b      	ldr	r3, [r7, #4]
 801d2e6:	681b      	ldr	r3, [r3, #0]
 801d2e8:	f06f 0208 	mvn.w	r2, #8
 801d2ec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 801d2ee:	687b      	ldr	r3, [r7, #4]
 801d2f0:	2204      	movs	r2, #4
 801d2f2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 801d2f4:	687b      	ldr	r3, [r7, #4]
 801d2f6:	681b      	ldr	r3, [r3, #0]
 801d2f8:	69db      	ldr	r3, [r3, #28]
 801d2fa:	f003 0303 	and.w	r3, r3, #3
 801d2fe:	2b00      	cmp	r3, #0
 801d300:	d003      	beq.n	801d30a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 801d302:	6878      	ldr	r0, [r7, #4]
 801d304:	f000 f9bd 	bl	801d682 <HAL_TIM_IC_CaptureCallback>
 801d308:	e005      	b.n	801d316 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 801d30a:	6878      	ldr	r0, [r7, #4]
 801d30c:	f000 f9af 	bl	801d66e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 801d310:	6878      	ldr	r0, [r7, #4]
 801d312:	f000 f9c0 	bl	801d696 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 801d316:	687b      	ldr	r3, [r7, #4]
 801d318:	2200      	movs	r2, #0
 801d31a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 801d31c:	687b      	ldr	r3, [r7, #4]
 801d31e:	681b      	ldr	r3, [r3, #0]
 801d320:	691b      	ldr	r3, [r3, #16]
 801d322:	f003 0310 	and.w	r3, r3, #16
 801d326:	2b10      	cmp	r3, #16
 801d328:	d122      	bne.n	801d370 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 801d32a:	687b      	ldr	r3, [r7, #4]
 801d32c:	681b      	ldr	r3, [r3, #0]
 801d32e:	68db      	ldr	r3, [r3, #12]
 801d330:	f003 0310 	and.w	r3, r3, #16
 801d334:	2b10      	cmp	r3, #16
 801d336:	d11b      	bne.n	801d370 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 801d338:	687b      	ldr	r3, [r7, #4]
 801d33a:	681b      	ldr	r3, [r3, #0]
 801d33c:	f06f 0210 	mvn.w	r2, #16
 801d340:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 801d342:	687b      	ldr	r3, [r7, #4]
 801d344:	2208      	movs	r2, #8
 801d346:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 801d348:	687b      	ldr	r3, [r7, #4]
 801d34a:	681b      	ldr	r3, [r3, #0]
 801d34c:	69db      	ldr	r3, [r3, #28]
 801d34e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 801d352:	2b00      	cmp	r3, #0
 801d354:	d003      	beq.n	801d35e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 801d356:	6878      	ldr	r0, [r7, #4]
 801d358:	f000 f993 	bl	801d682 <HAL_TIM_IC_CaptureCallback>
 801d35c:	e005      	b.n	801d36a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 801d35e:	6878      	ldr	r0, [r7, #4]
 801d360:	f000 f985 	bl	801d66e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 801d364:	6878      	ldr	r0, [r7, #4]
 801d366:	f000 f996 	bl	801d696 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 801d36a:	687b      	ldr	r3, [r7, #4]
 801d36c:	2200      	movs	r2, #0
 801d36e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 801d370:	687b      	ldr	r3, [r7, #4]
 801d372:	681b      	ldr	r3, [r3, #0]
 801d374:	691b      	ldr	r3, [r3, #16]
 801d376:	f003 0301 	and.w	r3, r3, #1
 801d37a:	2b01      	cmp	r3, #1
 801d37c:	d10e      	bne.n	801d39c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 801d37e:	687b      	ldr	r3, [r7, #4]
 801d380:	681b      	ldr	r3, [r3, #0]
 801d382:	68db      	ldr	r3, [r3, #12]
 801d384:	f003 0301 	and.w	r3, r3, #1
 801d388:	2b01      	cmp	r3, #1
 801d38a:	d107      	bne.n	801d39c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 801d38c:	687b      	ldr	r3, [r7, #4]
 801d38e:	681b      	ldr	r3, [r3, #0]
 801d390:	f06f 0201 	mvn.w	r2, #1
 801d394:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 801d396:	6878      	ldr	r0, [r7, #4]
 801d398:	f7fa fda8 	bl	8017eec <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 801d39c:	687b      	ldr	r3, [r7, #4]
 801d39e:	681b      	ldr	r3, [r3, #0]
 801d3a0:	691b      	ldr	r3, [r3, #16]
 801d3a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801d3a6:	2b80      	cmp	r3, #128	; 0x80
 801d3a8:	d10e      	bne.n	801d3c8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 801d3aa:	687b      	ldr	r3, [r7, #4]
 801d3ac:	681b      	ldr	r3, [r3, #0]
 801d3ae:	68db      	ldr	r3, [r3, #12]
 801d3b0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801d3b4:	2b80      	cmp	r3, #128	; 0x80
 801d3b6:	d107      	bne.n	801d3c8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 801d3b8:	687b      	ldr	r3, [r7, #4]
 801d3ba:	681b      	ldr	r3, [r3, #0]
 801d3bc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 801d3c0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 801d3c2:	6878      	ldr	r0, [r7, #4]
 801d3c4:	f000 fcec 	bl	801dda0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 801d3c8:	687b      	ldr	r3, [r7, #4]
 801d3ca:	681b      	ldr	r3, [r3, #0]
 801d3cc:	691b      	ldr	r3, [r3, #16]
 801d3ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801d3d2:	2b40      	cmp	r3, #64	; 0x40
 801d3d4:	d10e      	bne.n	801d3f4 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 801d3d6:	687b      	ldr	r3, [r7, #4]
 801d3d8:	681b      	ldr	r3, [r3, #0]
 801d3da:	68db      	ldr	r3, [r3, #12]
 801d3dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801d3e0:	2b40      	cmp	r3, #64	; 0x40
 801d3e2:	d107      	bne.n	801d3f4 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 801d3e4:	687b      	ldr	r3, [r7, #4]
 801d3e6:	681b      	ldr	r3, [r3, #0]
 801d3e8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 801d3ec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 801d3ee:	6878      	ldr	r0, [r7, #4]
 801d3f0:	f000 f95b 	bl	801d6aa <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 801d3f4:	687b      	ldr	r3, [r7, #4]
 801d3f6:	681b      	ldr	r3, [r3, #0]
 801d3f8:	691b      	ldr	r3, [r3, #16]
 801d3fa:	f003 0320 	and.w	r3, r3, #32
 801d3fe:	2b20      	cmp	r3, #32
 801d400:	d10e      	bne.n	801d420 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 801d402:	687b      	ldr	r3, [r7, #4]
 801d404:	681b      	ldr	r3, [r3, #0]
 801d406:	68db      	ldr	r3, [r3, #12]
 801d408:	f003 0320 	and.w	r3, r3, #32
 801d40c:	2b20      	cmp	r3, #32
 801d40e:	d107      	bne.n	801d420 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 801d410:	687b      	ldr	r3, [r7, #4]
 801d412:	681b      	ldr	r3, [r3, #0]
 801d414:	f06f 0220 	mvn.w	r2, #32
 801d418:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 801d41a:	6878      	ldr	r0, [r7, #4]
 801d41c:	f000 fcb6 	bl	801dd8c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 801d420:	bf00      	nop
 801d422:	3708      	adds	r7, #8
 801d424:	46bd      	mov	sp, r7
 801d426:	bd80      	pop	{r7, pc}

0801d428 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 801d428:	b580      	push	{r7, lr}
 801d42a:	b086      	sub	sp, #24
 801d42c:	af00      	add	r7, sp, #0
 801d42e:	60f8      	str	r0, [r7, #12]
 801d430:	60b9      	str	r1, [r7, #8]
 801d432:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 801d434:	2300      	movs	r3, #0
 801d436:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 801d438:	68fb      	ldr	r3, [r7, #12]
 801d43a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 801d43e:	2b01      	cmp	r3, #1
 801d440:	d101      	bne.n	801d446 <HAL_TIM_OC_ConfigChannel+0x1e>
 801d442:	2302      	movs	r3, #2
 801d444:	e048      	b.n	801d4d8 <HAL_TIM_OC_ConfigChannel+0xb0>
 801d446:	68fb      	ldr	r3, [r7, #12]
 801d448:	2201      	movs	r2, #1
 801d44a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 801d44e:	687b      	ldr	r3, [r7, #4]
 801d450:	2b0c      	cmp	r3, #12
 801d452:	d839      	bhi.n	801d4c8 <HAL_TIM_OC_ConfigChannel+0xa0>
 801d454:	a201      	add	r2, pc, #4	; (adr r2, 801d45c <HAL_TIM_OC_ConfigChannel+0x34>)
 801d456:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801d45a:	bf00      	nop
 801d45c:	0801d491 	.word	0x0801d491
 801d460:	0801d4c9 	.word	0x0801d4c9
 801d464:	0801d4c9 	.word	0x0801d4c9
 801d468:	0801d4c9 	.word	0x0801d4c9
 801d46c:	0801d49f 	.word	0x0801d49f
 801d470:	0801d4c9 	.word	0x0801d4c9
 801d474:	0801d4c9 	.word	0x0801d4c9
 801d478:	0801d4c9 	.word	0x0801d4c9
 801d47c:	0801d4ad 	.word	0x0801d4ad
 801d480:	0801d4c9 	.word	0x0801d4c9
 801d484:	0801d4c9 	.word	0x0801d4c9
 801d488:	0801d4c9 	.word	0x0801d4c9
 801d48c:	0801d4bb 	.word	0x0801d4bb
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 801d490:	68fb      	ldr	r3, [r7, #12]
 801d492:	681b      	ldr	r3, [r3, #0]
 801d494:	68b9      	ldr	r1, [r7, #8]
 801d496:	4618      	mov	r0, r3
 801d498:	f000 f9b2 	bl	801d800 <TIM_OC1_SetConfig>
      break;
 801d49c:	e017      	b.n	801d4ce <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 801d49e:	68fb      	ldr	r3, [r7, #12]
 801d4a0:	681b      	ldr	r3, [r3, #0]
 801d4a2:	68b9      	ldr	r1, [r7, #8]
 801d4a4:	4618      	mov	r0, r3
 801d4a6:	f000 fa1b 	bl	801d8e0 <TIM_OC2_SetConfig>
      break;
 801d4aa:	e010      	b.n	801d4ce <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 801d4ac:	68fb      	ldr	r3, [r7, #12]
 801d4ae:	681b      	ldr	r3, [r3, #0]
 801d4b0:	68b9      	ldr	r1, [r7, #8]
 801d4b2:	4618      	mov	r0, r3
 801d4b4:	f000 fa8a 	bl	801d9cc <TIM_OC3_SetConfig>
      break;
 801d4b8:	e009      	b.n	801d4ce <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 801d4ba:	68fb      	ldr	r3, [r7, #12]
 801d4bc:	681b      	ldr	r3, [r3, #0]
 801d4be:	68b9      	ldr	r1, [r7, #8]
 801d4c0:	4618      	mov	r0, r3
 801d4c2:	f000 faf7 	bl	801dab4 <TIM_OC4_SetConfig>
      break;
 801d4c6:	e002      	b.n	801d4ce <HAL_TIM_OC_ConfigChannel+0xa6>
    }

    default:
      status = HAL_ERROR;
 801d4c8:	2301      	movs	r3, #1
 801d4ca:	75fb      	strb	r3, [r7, #23]
      break;
 801d4cc:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 801d4ce:	68fb      	ldr	r3, [r7, #12]
 801d4d0:	2200      	movs	r2, #0
 801d4d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 801d4d6:	7dfb      	ldrb	r3, [r7, #23]
}
 801d4d8:	4618      	mov	r0, r3
 801d4da:	3718      	adds	r7, #24
 801d4dc:	46bd      	mov	sp, r7
 801d4de:	bd80      	pop	{r7, pc}

0801d4e0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 801d4e0:	b580      	push	{r7, lr}
 801d4e2:	b084      	sub	sp, #16
 801d4e4:	af00      	add	r7, sp, #0
 801d4e6:	6078      	str	r0, [r7, #4]
 801d4e8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 801d4ea:	2300      	movs	r3, #0
 801d4ec:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 801d4ee:	687b      	ldr	r3, [r7, #4]
 801d4f0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 801d4f4:	2b01      	cmp	r3, #1
 801d4f6:	d101      	bne.n	801d4fc <HAL_TIM_ConfigClockSource+0x1c>
 801d4f8:	2302      	movs	r3, #2
 801d4fa:	e0b4      	b.n	801d666 <HAL_TIM_ConfigClockSource+0x186>
 801d4fc:	687b      	ldr	r3, [r7, #4]
 801d4fe:	2201      	movs	r2, #1
 801d500:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 801d504:	687b      	ldr	r3, [r7, #4]
 801d506:	2202      	movs	r2, #2
 801d508:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 801d50c:	687b      	ldr	r3, [r7, #4]
 801d50e:	681b      	ldr	r3, [r3, #0]
 801d510:	689b      	ldr	r3, [r3, #8]
 801d512:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 801d514:	68bb      	ldr	r3, [r7, #8]
 801d516:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 801d51a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 801d51c:	68bb      	ldr	r3, [r7, #8]
 801d51e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 801d522:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 801d524:	687b      	ldr	r3, [r7, #4]
 801d526:	681b      	ldr	r3, [r3, #0]
 801d528:	68ba      	ldr	r2, [r7, #8]
 801d52a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 801d52c:	683b      	ldr	r3, [r7, #0]
 801d52e:	681b      	ldr	r3, [r3, #0]
 801d530:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 801d534:	d03e      	beq.n	801d5b4 <HAL_TIM_ConfigClockSource+0xd4>
 801d536:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 801d53a:	f200 8087 	bhi.w	801d64c <HAL_TIM_ConfigClockSource+0x16c>
 801d53e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801d542:	f000 8086 	beq.w	801d652 <HAL_TIM_ConfigClockSource+0x172>
 801d546:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801d54a:	d87f      	bhi.n	801d64c <HAL_TIM_ConfigClockSource+0x16c>
 801d54c:	2b70      	cmp	r3, #112	; 0x70
 801d54e:	d01a      	beq.n	801d586 <HAL_TIM_ConfigClockSource+0xa6>
 801d550:	2b70      	cmp	r3, #112	; 0x70
 801d552:	d87b      	bhi.n	801d64c <HAL_TIM_ConfigClockSource+0x16c>
 801d554:	2b60      	cmp	r3, #96	; 0x60
 801d556:	d050      	beq.n	801d5fa <HAL_TIM_ConfigClockSource+0x11a>
 801d558:	2b60      	cmp	r3, #96	; 0x60
 801d55a:	d877      	bhi.n	801d64c <HAL_TIM_ConfigClockSource+0x16c>
 801d55c:	2b50      	cmp	r3, #80	; 0x50
 801d55e:	d03c      	beq.n	801d5da <HAL_TIM_ConfigClockSource+0xfa>
 801d560:	2b50      	cmp	r3, #80	; 0x50
 801d562:	d873      	bhi.n	801d64c <HAL_TIM_ConfigClockSource+0x16c>
 801d564:	2b40      	cmp	r3, #64	; 0x40
 801d566:	d058      	beq.n	801d61a <HAL_TIM_ConfigClockSource+0x13a>
 801d568:	2b40      	cmp	r3, #64	; 0x40
 801d56a:	d86f      	bhi.n	801d64c <HAL_TIM_ConfigClockSource+0x16c>
 801d56c:	2b30      	cmp	r3, #48	; 0x30
 801d56e:	d064      	beq.n	801d63a <HAL_TIM_ConfigClockSource+0x15a>
 801d570:	2b30      	cmp	r3, #48	; 0x30
 801d572:	d86b      	bhi.n	801d64c <HAL_TIM_ConfigClockSource+0x16c>
 801d574:	2b20      	cmp	r3, #32
 801d576:	d060      	beq.n	801d63a <HAL_TIM_ConfigClockSource+0x15a>
 801d578:	2b20      	cmp	r3, #32
 801d57a:	d867      	bhi.n	801d64c <HAL_TIM_ConfigClockSource+0x16c>
 801d57c:	2b00      	cmp	r3, #0
 801d57e:	d05c      	beq.n	801d63a <HAL_TIM_ConfigClockSource+0x15a>
 801d580:	2b10      	cmp	r3, #16
 801d582:	d05a      	beq.n	801d63a <HAL_TIM_ConfigClockSource+0x15a>
 801d584:	e062      	b.n	801d64c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 801d586:	687b      	ldr	r3, [r7, #4]
 801d588:	6818      	ldr	r0, [r3, #0]
 801d58a:	683b      	ldr	r3, [r7, #0]
 801d58c:	6899      	ldr	r1, [r3, #8]
 801d58e:	683b      	ldr	r3, [r7, #0]
 801d590:	685a      	ldr	r2, [r3, #4]
 801d592:	683b      	ldr	r3, [r7, #0]
 801d594:	68db      	ldr	r3, [r3, #12]
 801d596:	f000 fb5d 	bl	801dc54 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 801d59a:	687b      	ldr	r3, [r7, #4]
 801d59c:	681b      	ldr	r3, [r3, #0]
 801d59e:	689b      	ldr	r3, [r3, #8]
 801d5a0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 801d5a2:	68bb      	ldr	r3, [r7, #8]
 801d5a4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 801d5a8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 801d5aa:	687b      	ldr	r3, [r7, #4]
 801d5ac:	681b      	ldr	r3, [r3, #0]
 801d5ae:	68ba      	ldr	r2, [r7, #8]
 801d5b0:	609a      	str	r2, [r3, #8]
      break;
 801d5b2:	e04f      	b.n	801d654 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 801d5b4:	687b      	ldr	r3, [r7, #4]
 801d5b6:	6818      	ldr	r0, [r3, #0]
 801d5b8:	683b      	ldr	r3, [r7, #0]
 801d5ba:	6899      	ldr	r1, [r3, #8]
 801d5bc:	683b      	ldr	r3, [r7, #0]
 801d5be:	685a      	ldr	r2, [r3, #4]
 801d5c0:	683b      	ldr	r3, [r7, #0]
 801d5c2:	68db      	ldr	r3, [r3, #12]
 801d5c4:	f000 fb46 	bl	801dc54 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 801d5c8:	687b      	ldr	r3, [r7, #4]
 801d5ca:	681b      	ldr	r3, [r3, #0]
 801d5cc:	689a      	ldr	r2, [r3, #8]
 801d5ce:	687b      	ldr	r3, [r7, #4]
 801d5d0:	681b      	ldr	r3, [r3, #0]
 801d5d2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 801d5d6:	609a      	str	r2, [r3, #8]
      break;
 801d5d8:	e03c      	b.n	801d654 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 801d5da:	687b      	ldr	r3, [r7, #4]
 801d5dc:	6818      	ldr	r0, [r3, #0]
 801d5de:	683b      	ldr	r3, [r7, #0]
 801d5e0:	6859      	ldr	r1, [r3, #4]
 801d5e2:	683b      	ldr	r3, [r7, #0]
 801d5e4:	68db      	ldr	r3, [r3, #12]
 801d5e6:	461a      	mov	r2, r3
 801d5e8:	f000 faba 	bl	801db60 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 801d5ec:	687b      	ldr	r3, [r7, #4]
 801d5ee:	681b      	ldr	r3, [r3, #0]
 801d5f0:	2150      	movs	r1, #80	; 0x50
 801d5f2:	4618      	mov	r0, r3
 801d5f4:	f000 fb13 	bl	801dc1e <TIM_ITRx_SetConfig>
      break;
 801d5f8:	e02c      	b.n	801d654 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 801d5fa:	687b      	ldr	r3, [r7, #4]
 801d5fc:	6818      	ldr	r0, [r3, #0]
 801d5fe:	683b      	ldr	r3, [r7, #0]
 801d600:	6859      	ldr	r1, [r3, #4]
 801d602:	683b      	ldr	r3, [r7, #0]
 801d604:	68db      	ldr	r3, [r3, #12]
 801d606:	461a      	mov	r2, r3
 801d608:	f000 fad9 	bl	801dbbe <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 801d60c:	687b      	ldr	r3, [r7, #4]
 801d60e:	681b      	ldr	r3, [r3, #0]
 801d610:	2160      	movs	r1, #96	; 0x60
 801d612:	4618      	mov	r0, r3
 801d614:	f000 fb03 	bl	801dc1e <TIM_ITRx_SetConfig>
      break;
 801d618:	e01c      	b.n	801d654 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 801d61a:	687b      	ldr	r3, [r7, #4]
 801d61c:	6818      	ldr	r0, [r3, #0]
 801d61e:	683b      	ldr	r3, [r7, #0]
 801d620:	6859      	ldr	r1, [r3, #4]
 801d622:	683b      	ldr	r3, [r7, #0]
 801d624:	68db      	ldr	r3, [r3, #12]
 801d626:	461a      	mov	r2, r3
 801d628:	f000 fa9a 	bl	801db60 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 801d62c:	687b      	ldr	r3, [r7, #4]
 801d62e:	681b      	ldr	r3, [r3, #0]
 801d630:	2140      	movs	r1, #64	; 0x40
 801d632:	4618      	mov	r0, r3
 801d634:	f000 faf3 	bl	801dc1e <TIM_ITRx_SetConfig>
      break;
 801d638:	e00c      	b.n	801d654 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 801d63a:	687b      	ldr	r3, [r7, #4]
 801d63c:	681a      	ldr	r2, [r3, #0]
 801d63e:	683b      	ldr	r3, [r7, #0]
 801d640:	681b      	ldr	r3, [r3, #0]
 801d642:	4619      	mov	r1, r3
 801d644:	4610      	mov	r0, r2
 801d646:	f000 faea 	bl	801dc1e <TIM_ITRx_SetConfig>
      break;
 801d64a:	e003      	b.n	801d654 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 801d64c:	2301      	movs	r3, #1
 801d64e:	73fb      	strb	r3, [r7, #15]
      break;
 801d650:	e000      	b.n	801d654 <HAL_TIM_ConfigClockSource+0x174>
      break;
 801d652:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 801d654:	687b      	ldr	r3, [r7, #4]
 801d656:	2201      	movs	r2, #1
 801d658:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 801d65c:	687b      	ldr	r3, [r7, #4]
 801d65e:	2200      	movs	r2, #0
 801d660:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 801d664:	7bfb      	ldrb	r3, [r7, #15]
}
 801d666:	4618      	mov	r0, r3
 801d668:	3710      	adds	r7, #16
 801d66a:	46bd      	mov	sp, r7
 801d66c:	bd80      	pop	{r7, pc}

0801d66e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 801d66e:	b480      	push	{r7}
 801d670:	b083      	sub	sp, #12
 801d672:	af00      	add	r7, sp, #0
 801d674:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 801d676:	bf00      	nop
 801d678:	370c      	adds	r7, #12
 801d67a:	46bd      	mov	sp, r7
 801d67c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d680:	4770      	bx	lr

0801d682 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 801d682:	b480      	push	{r7}
 801d684:	b083      	sub	sp, #12
 801d686:	af00      	add	r7, sp, #0
 801d688:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 801d68a:	bf00      	nop
 801d68c:	370c      	adds	r7, #12
 801d68e:	46bd      	mov	sp, r7
 801d690:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d694:	4770      	bx	lr

0801d696 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 801d696:	b480      	push	{r7}
 801d698:	b083      	sub	sp, #12
 801d69a:	af00      	add	r7, sp, #0
 801d69c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 801d69e:	bf00      	nop
 801d6a0:	370c      	adds	r7, #12
 801d6a2:	46bd      	mov	sp, r7
 801d6a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d6a8:	4770      	bx	lr

0801d6aa <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 801d6aa:	b480      	push	{r7}
 801d6ac:	b083      	sub	sp, #12
 801d6ae:	af00      	add	r7, sp, #0
 801d6b0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 801d6b2:	bf00      	nop
 801d6b4:	370c      	adds	r7, #12
 801d6b6:	46bd      	mov	sp, r7
 801d6b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d6bc:	4770      	bx	lr
	...

0801d6c0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 801d6c0:	b480      	push	{r7}
 801d6c2:	b085      	sub	sp, #20
 801d6c4:	af00      	add	r7, sp, #0
 801d6c6:	6078      	str	r0, [r7, #4]
 801d6c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 801d6ca:	687b      	ldr	r3, [r7, #4]
 801d6cc:	681b      	ldr	r3, [r3, #0]
 801d6ce:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 801d6d0:	687b      	ldr	r3, [r7, #4]
 801d6d2:	4a40      	ldr	r2, [pc, #256]	; (801d7d4 <TIM_Base_SetConfig+0x114>)
 801d6d4:	4293      	cmp	r3, r2
 801d6d6:	d013      	beq.n	801d700 <TIM_Base_SetConfig+0x40>
 801d6d8:	687b      	ldr	r3, [r7, #4]
 801d6da:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801d6de:	d00f      	beq.n	801d700 <TIM_Base_SetConfig+0x40>
 801d6e0:	687b      	ldr	r3, [r7, #4]
 801d6e2:	4a3d      	ldr	r2, [pc, #244]	; (801d7d8 <TIM_Base_SetConfig+0x118>)
 801d6e4:	4293      	cmp	r3, r2
 801d6e6:	d00b      	beq.n	801d700 <TIM_Base_SetConfig+0x40>
 801d6e8:	687b      	ldr	r3, [r7, #4]
 801d6ea:	4a3c      	ldr	r2, [pc, #240]	; (801d7dc <TIM_Base_SetConfig+0x11c>)
 801d6ec:	4293      	cmp	r3, r2
 801d6ee:	d007      	beq.n	801d700 <TIM_Base_SetConfig+0x40>
 801d6f0:	687b      	ldr	r3, [r7, #4]
 801d6f2:	4a3b      	ldr	r2, [pc, #236]	; (801d7e0 <TIM_Base_SetConfig+0x120>)
 801d6f4:	4293      	cmp	r3, r2
 801d6f6:	d003      	beq.n	801d700 <TIM_Base_SetConfig+0x40>
 801d6f8:	687b      	ldr	r3, [r7, #4]
 801d6fa:	4a3a      	ldr	r2, [pc, #232]	; (801d7e4 <TIM_Base_SetConfig+0x124>)
 801d6fc:	4293      	cmp	r3, r2
 801d6fe:	d108      	bne.n	801d712 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 801d700:	68fb      	ldr	r3, [r7, #12]
 801d702:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801d706:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 801d708:	683b      	ldr	r3, [r7, #0]
 801d70a:	685b      	ldr	r3, [r3, #4]
 801d70c:	68fa      	ldr	r2, [r7, #12]
 801d70e:	4313      	orrs	r3, r2
 801d710:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 801d712:	687b      	ldr	r3, [r7, #4]
 801d714:	4a2f      	ldr	r2, [pc, #188]	; (801d7d4 <TIM_Base_SetConfig+0x114>)
 801d716:	4293      	cmp	r3, r2
 801d718:	d02b      	beq.n	801d772 <TIM_Base_SetConfig+0xb2>
 801d71a:	687b      	ldr	r3, [r7, #4]
 801d71c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801d720:	d027      	beq.n	801d772 <TIM_Base_SetConfig+0xb2>
 801d722:	687b      	ldr	r3, [r7, #4]
 801d724:	4a2c      	ldr	r2, [pc, #176]	; (801d7d8 <TIM_Base_SetConfig+0x118>)
 801d726:	4293      	cmp	r3, r2
 801d728:	d023      	beq.n	801d772 <TIM_Base_SetConfig+0xb2>
 801d72a:	687b      	ldr	r3, [r7, #4]
 801d72c:	4a2b      	ldr	r2, [pc, #172]	; (801d7dc <TIM_Base_SetConfig+0x11c>)
 801d72e:	4293      	cmp	r3, r2
 801d730:	d01f      	beq.n	801d772 <TIM_Base_SetConfig+0xb2>
 801d732:	687b      	ldr	r3, [r7, #4]
 801d734:	4a2a      	ldr	r2, [pc, #168]	; (801d7e0 <TIM_Base_SetConfig+0x120>)
 801d736:	4293      	cmp	r3, r2
 801d738:	d01b      	beq.n	801d772 <TIM_Base_SetConfig+0xb2>
 801d73a:	687b      	ldr	r3, [r7, #4]
 801d73c:	4a29      	ldr	r2, [pc, #164]	; (801d7e4 <TIM_Base_SetConfig+0x124>)
 801d73e:	4293      	cmp	r3, r2
 801d740:	d017      	beq.n	801d772 <TIM_Base_SetConfig+0xb2>
 801d742:	687b      	ldr	r3, [r7, #4]
 801d744:	4a28      	ldr	r2, [pc, #160]	; (801d7e8 <TIM_Base_SetConfig+0x128>)
 801d746:	4293      	cmp	r3, r2
 801d748:	d013      	beq.n	801d772 <TIM_Base_SetConfig+0xb2>
 801d74a:	687b      	ldr	r3, [r7, #4]
 801d74c:	4a27      	ldr	r2, [pc, #156]	; (801d7ec <TIM_Base_SetConfig+0x12c>)
 801d74e:	4293      	cmp	r3, r2
 801d750:	d00f      	beq.n	801d772 <TIM_Base_SetConfig+0xb2>
 801d752:	687b      	ldr	r3, [r7, #4]
 801d754:	4a26      	ldr	r2, [pc, #152]	; (801d7f0 <TIM_Base_SetConfig+0x130>)
 801d756:	4293      	cmp	r3, r2
 801d758:	d00b      	beq.n	801d772 <TIM_Base_SetConfig+0xb2>
 801d75a:	687b      	ldr	r3, [r7, #4]
 801d75c:	4a25      	ldr	r2, [pc, #148]	; (801d7f4 <TIM_Base_SetConfig+0x134>)
 801d75e:	4293      	cmp	r3, r2
 801d760:	d007      	beq.n	801d772 <TIM_Base_SetConfig+0xb2>
 801d762:	687b      	ldr	r3, [r7, #4]
 801d764:	4a24      	ldr	r2, [pc, #144]	; (801d7f8 <TIM_Base_SetConfig+0x138>)
 801d766:	4293      	cmp	r3, r2
 801d768:	d003      	beq.n	801d772 <TIM_Base_SetConfig+0xb2>
 801d76a:	687b      	ldr	r3, [r7, #4]
 801d76c:	4a23      	ldr	r2, [pc, #140]	; (801d7fc <TIM_Base_SetConfig+0x13c>)
 801d76e:	4293      	cmp	r3, r2
 801d770:	d108      	bne.n	801d784 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 801d772:	68fb      	ldr	r3, [r7, #12]
 801d774:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 801d778:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 801d77a:	683b      	ldr	r3, [r7, #0]
 801d77c:	68db      	ldr	r3, [r3, #12]
 801d77e:	68fa      	ldr	r2, [r7, #12]
 801d780:	4313      	orrs	r3, r2
 801d782:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 801d784:	68fb      	ldr	r3, [r7, #12]
 801d786:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 801d78a:	683b      	ldr	r3, [r7, #0]
 801d78c:	695b      	ldr	r3, [r3, #20]
 801d78e:	4313      	orrs	r3, r2
 801d790:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 801d792:	687b      	ldr	r3, [r7, #4]
 801d794:	68fa      	ldr	r2, [r7, #12]
 801d796:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 801d798:	683b      	ldr	r3, [r7, #0]
 801d79a:	689a      	ldr	r2, [r3, #8]
 801d79c:	687b      	ldr	r3, [r7, #4]
 801d79e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 801d7a0:	683b      	ldr	r3, [r7, #0]
 801d7a2:	681a      	ldr	r2, [r3, #0]
 801d7a4:	687b      	ldr	r3, [r7, #4]
 801d7a6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 801d7a8:	687b      	ldr	r3, [r7, #4]
 801d7aa:	4a0a      	ldr	r2, [pc, #40]	; (801d7d4 <TIM_Base_SetConfig+0x114>)
 801d7ac:	4293      	cmp	r3, r2
 801d7ae:	d003      	beq.n	801d7b8 <TIM_Base_SetConfig+0xf8>
 801d7b0:	687b      	ldr	r3, [r7, #4]
 801d7b2:	4a0c      	ldr	r2, [pc, #48]	; (801d7e4 <TIM_Base_SetConfig+0x124>)
 801d7b4:	4293      	cmp	r3, r2
 801d7b6:	d103      	bne.n	801d7c0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 801d7b8:	683b      	ldr	r3, [r7, #0]
 801d7ba:	691a      	ldr	r2, [r3, #16]
 801d7bc:	687b      	ldr	r3, [r7, #4]
 801d7be:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 801d7c0:	687b      	ldr	r3, [r7, #4]
 801d7c2:	2201      	movs	r2, #1
 801d7c4:	615a      	str	r2, [r3, #20]
}
 801d7c6:	bf00      	nop
 801d7c8:	3714      	adds	r7, #20
 801d7ca:	46bd      	mov	sp, r7
 801d7cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d7d0:	4770      	bx	lr
 801d7d2:	bf00      	nop
 801d7d4:	40010000 	.word	0x40010000
 801d7d8:	40000400 	.word	0x40000400
 801d7dc:	40000800 	.word	0x40000800
 801d7e0:	40000c00 	.word	0x40000c00
 801d7e4:	40010400 	.word	0x40010400
 801d7e8:	40014000 	.word	0x40014000
 801d7ec:	40014400 	.word	0x40014400
 801d7f0:	40014800 	.word	0x40014800
 801d7f4:	40001800 	.word	0x40001800
 801d7f8:	40001c00 	.word	0x40001c00
 801d7fc:	40002000 	.word	0x40002000

0801d800 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 801d800:	b480      	push	{r7}
 801d802:	b087      	sub	sp, #28
 801d804:	af00      	add	r7, sp, #0
 801d806:	6078      	str	r0, [r7, #4]
 801d808:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 801d80a:	687b      	ldr	r3, [r7, #4]
 801d80c:	6a1b      	ldr	r3, [r3, #32]
 801d80e:	f023 0201 	bic.w	r2, r3, #1
 801d812:	687b      	ldr	r3, [r7, #4]
 801d814:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801d816:	687b      	ldr	r3, [r7, #4]
 801d818:	6a1b      	ldr	r3, [r3, #32]
 801d81a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 801d81c:	687b      	ldr	r3, [r7, #4]
 801d81e:	685b      	ldr	r3, [r3, #4]
 801d820:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 801d822:	687b      	ldr	r3, [r7, #4]
 801d824:	699b      	ldr	r3, [r3, #24]
 801d826:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 801d828:	68fb      	ldr	r3, [r7, #12]
 801d82a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801d82e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 801d830:	68fb      	ldr	r3, [r7, #12]
 801d832:	f023 0303 	bic.w	r3, r3, #3
 801d836:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 801d838:	683b      	ldr	r3, [r7, #0]
 801d83a:	681b      	ldr	r3, [r3, #0]
 801d83c:	68fa      	ldr	r2, [r7, #12]
 801d83e:	4313      	orrs	r3, r2
 801d840:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 801d842:	697b      	ldr	r3, [r7, #20]
 801d844:	f023 0302 	bic.w	r3, r3, #2
 801d848:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 801d84a:	683b      	ldr	r3, [r7, #0]
 801d84c:	689b      	ldr	r3, [r3, #8]
 801d84e:	697a      	ldr	r2, [r7, #20]
 801d850:	4313      	orrs	r3, r2
 801d852:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 801d854:	687b      	ldr	r3, [r7, #4]
 801d856:	4a20      	ldr	r2, [pc, #128]	; (801d8d8 <TIM_OC1_SetConfig+0xd8>)
 801d858:	4293      	cmp	r3, r2
 801d85a:	d003      	beq.n	801d864 <TIM_OC1_SetConfig+0x64>
 801d85c:	687b      	ldr	r3, [r7, #4]
 801d85e:	4a1f      	ldr	r2, [pc, #124]	; (801d8dc <TIM_OC1_SetConfig+0xdc>)
 801d860:	4293      	cmp	r3, r2
 801d862:	d10c      	bne.n	801d87e <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 801d864:	697b      	ldr	r3, [r7, #20]
 801d866:	f023 0308 	bic.w	r3, r3, #8
 801d86a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 801d86c:	683b      	ldr	r3, [r7, #0]
 801d86e:	68db      	ldr	r3, [r3, #12]
 801d870:	697a      	ldr	r2, [r7, #20]
 801d872:	4313      	orrs	r3, r2
 801d874:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 801d876:	697b      	ldr	r3, [r7, #20]
 801d878:	f023 0304 	bic.w	r3, r3, #4
 801d87c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 801d87e:	687b      	ldr	r3, [r7, #4]
 801d880:	4a15      	ldr	r2, [pc, #84]	; (801d8d8 <TIM_OC1_SetConfig+0xd8>)
 801d882:	4293      	cmp	r3, r2
 801d884:	d003      	beq.n	801d88e <TIM_OC1_SetConfig+0x8e>
 801d886:	687b      	ldr	r3, [r7, #4]
 801d888:	4a14      	ldr	r2, [pc, #80]	; (801d8dc <TIM_OC1_SetConfig+0xdc>)
 801d88a:	4293      	cmp	r3, r2
 801d88c:	d111      	bne.n	801d8b2 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 801d88e:	693b      	ldr	r3, [r7, #16]
 801d890:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 801d894:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 801d896:	693b      	ldr	r3, [r7, #16]
 801d898:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 801d89c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 801d89e:	683b      	ldr	r3, [r7, #0]
 801d8a0:	695b      	ldr	r3, [r3, #20]
 801d8a2:	693a      	ldr	r2, [r7, #16]
 801d8a4:	4313      	orrs	r3, r2
 801d8a6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 801d8a8:	683b      	ldr	r3, [r7, #0]
 801d8aa:	699b      	ldr	r3, [r3, #24]
 801d8ac:	693a      	ldr	r2, [r7, #16]
 801d8ae:	4313      	orrs	r3, r2
 801d8b0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801d8b2:	687b      	ldr	r3, [r7, #4]
 801d8b4:	693a      	ldr	r2, [r7, #16]
 801d8b6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 801d8b8:	687b      	ldr	r3, [r7, #4]
 801d8ba:	68fa      	ldr	r2, [r7, #12]
 801d8bc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 801d8be:	683b      	ldr	r3, [r7, #0]
 801d8c0:	685a      	ldr	r2, [r3, #4]
 801d8c2:	687b      	ldr	r3, [r7, #4]
 801d8c4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 801d8c6:	687b      	ldr	r3, [r7, #4]
 801d8c8:	697a      	ldr	r2, [r7, #20]
 801d8ca:	621a      	str	r2, [r3, #32]
}
 801d8cc:	bf00      	nop
 801d8ce:	371c      	adds	r7, #28
 801d8d0:	46bd      	mov	sp, r7
 801d8d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d8d6:	4770      	bx	lr
 801d8d8:	40010000 	.word	0x40010000
 801d8dc:	40010400 	.word	0x40010400

0801d8e0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 801d8e0:	b480      	push	{r7}
 801d8e2:	b087      	sub	sp, #28
 801d8e4:	af00      	add	r7, sp, #0
 801d8e6:	6078      	str	r0, [r7, #4]
 801d8e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 801d8ea:	687b      	ldr	r3, [r7, #4]
 801d8ec:	6a1b      	ldr	r3, [r3, #32]
 801d8ee:	f023 0210 	bic.w	r2, r3, #16
 801d8f2:	687b      	ldr	r3, [r7, #4]
 801d8f4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801d8f6:	687b      	ldr	r3, [r7, #4]
 801d8f8:	6a1b      	ldr	r3, [r3, #32]
 801d8fa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 801d8fc:	687b      	ldr	r3, [r7, #4]
 801d8fe:	685b      	ldr	r3, [r3, #4]
 801d900:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 801d902:	687b      	ldr	r3, [r7, #4]
 801d904:	699b      	ldr	r3, [r3, #24]
 801d906:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 801d908:	68fb      	ldr	r3, [r7, #12]
 801d90a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 801d90e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 801d910:	68fb      	ldr	r3, [r7, #12]
 801d912:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 801d916:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 801d918:	683b      	ldr	r3, [r7, #0]
 801d91a:	681b      	ldr	r3, [r3, #0]
 801d91c:	021b      	lsls	r3, r3, #8
 801d91e:	68fa      	ldr	r2, [r7, #12]
 801d920:	4313      	orrs	r3, r2
 801d922:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 801d924:	697b      	ldr	r3, [r7, #20]
 801d926:	f023 0320 	bic.w	r3, r3, #32
 801d92a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 801d92c:	683b      	ldr	r3, [r7, #0]
 801d92e:	689b      	ldr	r3, [r3, #8]
 801d930:	011b      	lsls	r3, r3, #4
 801d932:	697a      	ldr	r2, [r7, #20]
 801d934:	4313      	orrs	r3, r2
 801d936:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 801d938:	687b      	ldr	r3, [r7, #4]
 801d93a:	4a22      	ldr	r2, [pc, #136]	; (801d9c4 <TIM_OC2_SetConfig+0xe4>)
 801d93c:	4293      	cmp	r3, r2
 801d93e:	d003      	beq.n	801d948 <TIM_OC2_SetConfig+0x68>
 801d940:	687b      	ldr	r3, [r7, #4]
 801d942:	4a21      	ldr	r2, [pc, #132]	; (801d9c8 <TIM_OC2_SetConfig+0xe8>)
 801d944:	4293      	cmp	r3, r2
 801d946:	d10d      	bne.n	801d964 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 801d948:	697b      	ldr	r3, [r7, #20]
 801d94a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 801d94e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 801d950:	683b      	ldr	r3, [r7, #0]
 801d952:	68db      	ldr	r3, [r3, #12]
 801d954:	011b      	lsls	r3, r3, #4
 801d956:	697a      	ldr	r2, [r7, #20]
 801d958:	4313      	orrs	r3, r2
 801d95a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 801d95c:	697b      	ldr	r3, [r7, #20]
 801d95e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 801d962:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 801d964:	687b      	ldr	r3, [r7, #4]
 801d966:	4a17      	ldr	r2, [pc, #92]	; (801d9c4 <TIM_OC2_SetConfig+0xe4>)
 801d968:	4293      	cmp	r3, r2
 801d96a:	d003      	beq.n	801d974 <TIM_OC2_SetConfig+0x94>
 801d96c:	687b      	ldr	r3, [r7, #4]
 801d96e:	4a16      	ldr	r2, [pc, #88]	; (801d9c8 <TIM_OC2_SetConfig+0xe8>)
 801d970:	4293      	cmp	r3, r2
 801d972:	d113      	bne.n	801d99c <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 801d974:	693b      	ldr	r3, [r7, #16]
 801d976:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 801d97a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 801d97c:	693b      	ldr	r3, [r7, #16]
 801d97e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 801d982:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 801d984:	683b      	ldr	r3, [r7, #0]
 801d986:	695b      	ldr	r3, [r3, #20]
 801d988:	009b      	lsls	r3, r3, #2
 801d98a:	693a      	ldr	r2, [r7, #16]
 801d98c:	4313      	orrs	r3, r2
 801d98e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 801d990:	683b      	ldr	r3, [r7, #0]
 801d992:	699b      	ldr	r3, [r3, #24]
 801d994:	009b      	lsls	r3, r3, #2
 801d996:	693a      	ldr	r2, [r7, #16]
 801d998:	4313      	orrs	r3, r2
 801d99a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801d99c:	687b      	ldr	r3, [r7, #4]
 801d99e:	693a      	ldr	r2, [r7, #16]
 801d9a0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 801d9a2:	687b      	ldr	r3, [r7, #4]
 801d9a4:	68fa      	ldr	r2, [r7, #12]
 801d9a6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 801d9a8:	683b      	ldr	r3, [r7, #0]
 801d9aa:	685a      	ldr	r2, [r3, #4]
 801d9ac:	687b      	ldr	r3, [r7, #4]
 801d9ae:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 801d9b0:	687b      	ldr	r3, [r7, #4]
 801d9b2:	697a      	ldr	r2, [r7, #20]
 801d9b4:	621a      	str	r2, [r3, #32]
}
 801d9b6:	bf00      	nop
 801d9b8:	371c      	adds	r7, #28
 801d9ba:	46bd      	mov	sp, r7
 801d9bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d9c0:	4770      	bx	lr
 801d9c2:	bf00      	nop
 801d9c4:	40010000 	.word	0x40010000
 801d9c8:	40010400 	.word	0x40010400

0801d9cc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 801d9cc:	b480      	push	{r7}
 801d9ce:	b087      	sub	sp, #28
 801d9d0:	af00      	add	r7, sp, #0
 801d9d2:	6078      	str	r0, [r7, #4]
 801d9d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 801d9d6:	687b      	ldr	r3, [r7, #4]
 801d9d8:	6a1b      	ldr	r3, [r3, #32]
 801d9da:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 801d9de:	687b      	ldr	r3, [r7, #4]
 801d9e0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801d9e2:	687b      	ldr	r3, [r7, #4]
 801d9e4:	6a1b      	ldr	r3, [r3, #32]
 801d9e6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 801d9e8:	687b      	ldr	r3, [r7, #4]
 801d9ea:	685b      	ldr	r3, [r3, #4]
 801d9ec:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 801d9ee:	687b      	ldr	r3, [r7, #4]
 801d9f0:	69db      	ldr	r3, [r3, #28]
 801d9f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 801d9f4:	68fb      	ldr	r3, [r7, #12]
 801d9f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801d9fa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 801d9fc:	68fb      	ldr	r3, [r7, #12]
 801d9fe:	f023 0303 	bic.w	r3, r3, #3
 801da02:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 801da04:	683b      	ldr	r3, [r7, #0]
 801da06:	681b      	ldr	r3, [r3, #0]
 801da08:	68fa      	ldr	r2, [r7, #12]
 801da0a:	4313      	orrs	r3, r2
 801da0c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 801da0e:	697b      	ldr	r3, [r7, #20]
 801da10:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 801da14:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 801da16:	683b      	ldr	r3, [r7, #0]
 801da18:	689b      	ldr	r3, [r3, #8]
 801da1a:	021b      	lsls	r3, r3, #8
 801da1c:	697a      	ldr	r2, [r7, #20]
 801da1e:	4313      	orrs	r3, r2
 801da20:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 801da22:	687b      	ldr	r3, [r7, #4]
 801da24:	4a21      	ldr	r2, [pc, #132]	; (801daac <TIM_OC3_SetConfig+0xe0>)
 801da26:	4293      	cmp	r3, r2
 801da28:	d003      	beq.n	801da32 <TIM_OC3_SetConfig+0x66>
 801da2a:	687b      	ldr	r3, [r7, #4]
 801da2c:	4a20      	ldr	r2, [pc, #128]	; (801dab0 <TIM_OC3_SetConfig+0xe4>)
 801da2e:	4293      	cmp	r3, r2
 801da30:	d10d      	bne.n	801da4e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 801da32:	697b      	ldr	r3, [r7, #20]
 801da34:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 801da38:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 801da3a:	683b      	ldr	r3, [r7, #0]
 801da3c:	68db      	ldr	r3, [r3, #12]
 801da3e:	021b      	lsls	r3, r3, #8
 801da40:	697a      	ldr	r2, [r7, #20]
 801da42:	4313      	orrs	r3, r2
 801da44:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 801da46:	697b      	ldr	r3, [r7, #20]
 801da48:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 801da4c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 801da4e:	687b      	ldr	r3, [r7, #4]
 801da50:	4a16      	ldr	r2, [pc, #88]	; (801daac <TIM_OC3_SetConfig+0xe0>)
 801da52:	4293      	cmp	r3, r2
 801da54:	d003      	beq.n	801da5e <TIM_OC3_SetConfig+0x92>
 801da56:	687b      	ldr	r3, [r7, #4]
 801da58:	4a15      	ldr	r2, [pc, #84]	; (801dab0 <TIM_OC3_SetConfig+0xe4>)
 801da5a:	4293      	cmp	r3, r2
 801da5c:	d113      	bne.n	801da86 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 801da5e:	693b      	ldr	r3, [r7, #16]
 801da60:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801da64:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 801da66:	693b      	ldr	r3, [r7, #16]
 801da68:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 801da6c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 801da6e:	683b      	ldr	r3, [r7, #0]
 801da70:	695b      	ldr	r3, [r3, #20]
 801da72:	011b      	lsls	r3, r3, #4
 801da74:	693a      	ldr	r2, [r7, #16]
 801da76:	4313      	orrs	r3, r2
 801da78:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 801da7a:	683b      	ldr	r3, [r7, #0]
 801da7c:	699b      	ldr	r3, [r3, #24]
 801da7e:	011b      	lsls	r3, r3, #4
 801da80:	693a      	ldr	r2, [r7, #16]
 801da82:	4313      	orrs	r3, r2
 801da84:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801da86:	687b      	ldr	r3, [r7, #4]
 801da88:	693a      	ldr	r2, [r7, #16]
 801da8a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 801da8c:	687b      	ldr	r3, [r7, #4]
 801da8e:	68fa      	ldr	r2, [r7, #12]
 801da90:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 801da92:	683b      	ldr	r3, [r7, #0]
 801da94:	685a      	ldr	r2, [r3, #4]
 801da96:	687b      	ldr	r3, [r7, #4]
 801da98:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 801da9a:	687b      	ldr	r3, [r7, #4]
 801da9c:	697a      	ldr	r2, [r7, #20]
 801da9e:	621a      	str	r2, [r3, #32]
}
 801daa0:	bf00      	nop
 801daa2:	371c      	adds	r7, #28
 801daa4:	46bd      	mov	sp, r7
 801daa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801daaa:	4770      	bx	lr
 801daac:	40010000 	.word	0x40010000
 801dab0:	40010400 	.word	0x40010400

0801dab4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 801dab4:	b480      	push	{r7}
 801dab6:	b087      	sub	sp, #28
 801dab8:	af00      	add	r7, sp, #0
 801daba:	6078      	str	r0, [r7, #4]
 801dabc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 801dabe:	687b      	ldr	r3, [r7, #4]
 801dac0:	6a1b      	ldr	r3, [r3, #32]
 801dac2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 801dac6:	687b      	ldr	r3, [r7, #4]
 801dac8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801daca:	687b      	ldr	r3, [r7, #4]
 801dacc:	6a1b      	ldr	r3, [r3, #32]
 801dace:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 801dad0:	687b      	ldr	r3, [r7, #4]
 801dad2:	685b      	ldr	r3, [r3, #4]
 801dad4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 801dad6:	687b      	ldr	r3, [r7, #4]
 801dad8:	69db      	ldr	r3, [r3, #28]
 801dada:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 801dadc:	68fb      	ldr	r3, [r7, #12]
 801dade:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 801dae2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 801dae4:	68fb      	ldr	r3, [r7, #12]
 801dae6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 801daea:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 801daec:	683b      	ldr	r3, [r7, #0]
 801daee:	681b      	ldr	r3, [r3, #0]
 801daf0:	021b      	lsls	r3, r3, #8
 801daf2:	68fa      	ldr	r2, [r7, #12]
 801daf4:	4313      	orrs	r3, r2
 801daf6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 801daf8:	693b      	ldr	r3, [r7, #16]
 801dafa:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 801dafe:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 801db00:	683b      	ldr	r3, [r7, #0]
 801db02:	689b      	ldr	r3, [r3, #8]
 801db04:	031b      	lsls	r3, r3, #12
 801db06:	693a      	ldr	r2, [r7, #16]
 801db08:	4313      	orrs	r3, r2
 801db0a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 801db0c:	687b      	ldr	r3, [r7, #4]
 801db0e:	4a12      	ldr	r2, [pc, #72]	; (801db58 <TIM_OC4_SetConfig+0xa4>)
 801db10:	4293      	cmp	r3, r2
 801db12:	d003      	beq.n	801db1c <TIM_OC4_SetConfig+0x68>
 801db14:	687b      	ldr	r3, [r7, #4]
 801db16:	4a11      	ldr	r2, [pc, #68]	; (801db5c <TIM_OC4_SetConfig+0xa8>)
 801db18:	4293      	cmp	r3, r2
 801db1a:	d109      	bne.n	801db30 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 801db1c:	697b      	ldr	r3, [r7, #20]
 801db1e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 801db22:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 801db24:	683b      	ldr	r3, [r7, #0]
 801db26:	695b      	ldr	r3, [r3, #20]
 801db28:	019b      	lsls	r3, r3, #6
 801db2a:	697a      	ldr	r2, [r7, #20]
 801db2c:	4313      	orrs	r3, r2
 801db2e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801db30:	687b      	ldr	r3, [r7, #4]
 801db32:	697a      	ldr	r2, [r7, #20]
 801db34:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 801db36:	687b      	ldr	r3, [r7, #4]
 801db38:	68fa      	ldr	r2, [r7, #12]
 801db3a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 801db3c:	683b      	ldr	r3, [r7, #0]
 801db3e:	685a      	ldr	r2, [r3, #4]
 801db40:	687b      	ldr	r3, [r7, #4]
 801db42:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 801db44:	687b      	ldr	r3, [r7, #4]
 801db46:	693a      	ldr	r2, [r7, #16]
 801db48:	621a      	str	r2, [r3, #32]
}
 801db4a:	bf00      	nop
 801db4c:	371c      	adds	r7, #28
 801db4e:	46bd      	mov	sp, r7
 801db50:	f85d 7b04 	ldr.w	r7, [sp], #4
 801db54:	4770      	bx	lr
 801db56:	bf00      	nop
 801db58:	40010000 	.word	0x40010000
 801db5c:	40010400 	.word	0x40010400

0801db60 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 801db60:	b480      	push	{r7}
 801db62:	b087      	sub	sp, #28
 801db64:	af00      	add	r7, sp, #0
 801db66:	60f8      	str	r0, [r7, #12]
 801db68:	60b9      	str	r1, [r7, #8]
 801db6a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 801db6c:	68fb      	ldr	r3, [r7, #12]
 801db6e:	6a1b      	ldr	r3, [r3, #32]
 801db70:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 801db72:	68fb      	ldr	r3, [r7, #12]
 801db74:	6a1b      	ldr	r3, [r3, #32]
 801db76:	f023 0201 	bic.w	r2, r3, #1
 801db7a:	68fb      	ldr	r3, [r7, #12]
 801db7c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 801db7e:	68fb      	ldr	r3, [r7, #12]
 801db80:	699b      	ldr	r3, [r3, #24]
 801db82:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 801db84:	693b      	ldr	r3, [r7, #16]
 801db86:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 801db8a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 801db8c:	687b      	ldr	r3, [r7, #4]
 801db8e:	011b      	lsls	r3, r3, #4
 801db90:	693a      	ldr	r2, [r7, #16]
 801db92:	4313      	orrs	r3, r2
 801db94:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 801db96:	697b      	ldr	r3, [r7, #20]
 801db98:	f023 030a 	bic.w	r3, r3, #10
 801db9c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 801db9e:	697a      	ldr	r2, [r7, #20]
 801dba0:	68bb      	ldr	r3, [r7, #8]
 801dba2:	4313      	orrs	r3, r2
 801dba4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 801dba6:	68fb      	ldr	r3, [r7, #12]
 801dba8:	693a      	ldr	r2, [r7, #16]
 801dbaa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 801dbac:	68fb      	ldr	r3, [r7, #12]
 801dbae:	697a      	ldr	r2, [r7, #20]
 801dbb0:	621a      	str	r2, [r3, #32]
}
 801dbb2:	bf00      	nop
 801dbb4:	371c      	adds	r7, #28
 801dbb6:	46bd      	mov	sp, r7
 801dbb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 801dbbc:	4770      	bx	lr

0801dbbe <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 801dbbe:	b480      	push	{r7}
 801dbc0:	b087      	sub	sp, #28
 801dbc2:	af00      	add	r7, sp, #0
 801dbc4:	60f8      	str	r0, [r7, #12]
 801dbc6:	60b9      	str	r1, [r7, #8]
 801dbc8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 801dbca:	68fb      	ldr	r3, [r7, #12]
 801dbcc:	6a1b      	ldr	r3, [r3, #32]
 801dbce:	f023 0210 	bic.w	r2, r3, #16
 801dbd2:	68fb      	ldr	r3, [r7, #12]
 801dbd4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 801dbd6:	68fb      	ldr	r3, [r7, #12]
 801dbd8:	699b      	ldr	r3, [r3, #24]
 801dbda:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 801dbdc:	68fb      	ldr	r3, [r7, #12]
 801dbde:	6a1b      	ldr	r3, [r3, #32]
 801dbe0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 801dbe2:	697b      	ldr	r3, [r7, #20]
 801dbe4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 801dbe8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 801dbea:	687b      	ldr	r3, [r7, #4]
 801dbec:	031b      	lsls	r3, r3, #12
 801dbee:	697a      	ldr	r2, [r7, #20]
 801dbf0:	4313      	orrs	r3, r2
 801dbf2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 801dbf4:	693b      	ldr	r3, [r7, #16]
 801dbf6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 801dbfa:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 801dbfc:	68bb      	ldr	r3, [r7, #8]
 801dbfe:	011b      	lsls	r3, r3, #4
 801dc00:	693a      	ldr	r2, [r7, #16]
 801dc02:	4313      	orrs	r3, r2
 801dc04:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 801dc06:	68fb      	ldr	r3, [r7, #12]
 801dc08:	697a      	ldr	r2, [r7, #20]
 801dc0a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 801dc0c:	68fb      	ldr	r3, [r7, #12]
 801dc0e:	693a      	ldr	r2, [r7, #16]
 801dc10:	621a      	str	r2, [r3, #32]
}
 801dc12:	bf00      	nop
 801dc14:	371c      	adds	r7, #28
 801dc16:	46bd      	mov	sp, r7
 801dc18:	f85d 7b04 	ldr.w	r7, [sp], #4
 801dc1c:	4770      	bx	lr

0801dc1e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 801dc1e:	b480      	push	{r7}
 801dc20:	b085      	sub	sp, #20
 801dc22:	af00      	add	r7, sp, #0
 801dc24:	6078      	str	r0, [r7, #4]
 801dc26:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 801dc28:	687b      	ldr	r3, [r7, #4]
 801dc2a:	689b      	ldr	r3, [r3, #8]
 801dc2c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 801dc2e:	68fb      	ldr	r3, [r7, #12]
 801dc30:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801dc34:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 801dc36:	683a      	ldr	r2, [r7, #0]
 801dc38:	68fb      	ldr	r3, [r7, #12]
 801dc3a:	4313      	orrs	r3, r2
 801dc3c:	f043 0307 	orr.w	r3, r3, #7
 801dc40:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 801dc42:	687b      	ldr	r3, [r7, #4]
 801dc44:	68fa      	ldr	r2, [r7, #12]
 801dc46:	609a      	str	r2, [r3, #8]
}
 801dc48:	bf00      	nop
 801dc4a:	3714      	adds	r7, #20
 801dc4c:	46bd      	mov	sp, r7
 801dc4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801dc52:	4770      	bx	lr

0801dc54 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 801dc54:	b480      	push	{r7}
 801dc56:	b087      	sub	sp, #28
 801dc58:	af00      	add	r7, sp, #0
 801dc5a:	60f8      	str	r0, [r7, #12]
 801dc5c:	60b9      	str	r1, [r7, #8]
 801dc5e:	607a      	str	r2, [r7, #4]
 801dc60:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 801dc62:	68fb      	ldr	r3, [r7, #12]
 801dc64:	689b      	ldr	r3, [r3, #8]
 801dc66:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 801dc68:	697b      	ldr	r3, [r7, #20]
 801dc6a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 801dc6e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 801dc70:	683b      	ldr	r3, [r7, #0]
 801dc72:	021a      	lsls	r2, r3, #8
 801dc74:	687b      	ldr	r3, [r7, #4]
 801dc76:	431a      	orrs	r2, r3
 801dc78:	68bb      	ldr	r3, [r7, #8]
 801dc7a:	4313      	orrs	r3, r2
 801dc7c:	697a      	ldr	r2, [r7, #20]
 801dc7e:	4313      	orrs	r3, r2
 801dc80:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 801dc82:	68fb      	ldr	r3, [r7, #12]
 801dc84:	697a      	ldr	r2, [r7, #20]
 801dc86:	609a      	str	r2, [r3, #8]
}
 801dc88:	bf00      	nop
 801dc8a:	371c      	adds	r7, #28
 801dc8c:	46bd      	mov	sp, r7
 801dc8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801dc92:	4770      	bx	lr

0801dc94 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 801dc94:	b480      	push	{r7}
 801dc96:	b085      	sub	sp, #20
 801dc98:	af00      	add	r7, sp, #0
 801dc9a:	6078      	str	r0, [r7, #4]
 801dc9c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 801dc9e:	687b      	ldr	r3, [r7, #4]
 801dca0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 801dca4:	2b01      	cmp	r3, #1
 801dca6:	d101      	bne.n	801dcac <HAL_TIMEx_MasterConfigSynchronization+0x18>
 801dca8:	2302      	movs	r3, #2
 801dcaa:	e05a      	b.n	801dd62 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 801dcac:	687b      	ldr	r3, [r7, #4]
 801dcae:	2201      	movs	r2, #1
 801dcb0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 801dcb4:	687b      	ldr	r3, [r7, #4]
 801dcb6:	2202      	movs	r2, #2
 801dcb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 801dcbc:	687b      	ldr	r3, [r7, #4]
 801dcbe:	681b      	ldr	r3, [r3, #0]
 801dcc0:	685b      	ldr	r3, [r3, #4]
 801dcc2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 801dcc4:	687b      	ldr	r3, [r7, #4]
 801dcc6:	681b      	ldr	r3, [r3, #0]
 801dcc8:	689b      	ldr	r3, [r3, #8]
 801dcca:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 801dccc:	68fb      	ldr	r3, [r7, #12]
 801dcce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801dcd2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 801dcd4:	683b      	ldr	r3, [r7, #0]
 801dcd6:	681b      	ldr	r3, [r3, #0]
 801dcd8:	68fa      	ldr	r2, [r7, #12]
 801dcda:	4313      	orrs	r3, r2
 801dcdc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 801dcde:	687b      	ldr	r3, [r7, #4]
 801dce0:	681b      	ldr	r3, [r3, #0]
 801dce2:	68fa      	ldr	r2, [r7, #12]
 801dce4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 801dce6:	687b      	ldr	r3, [r7, #4]
 801dce8:	681b      	ldr	r3, [r3, #0]
 801dcea:	4a21      	ldr	r2, [pc, #132]	; (801dd70 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 801dcec:	4293      	cmp	r3, r2
 801dcee:	d022      	beq.n	801dd36 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 801dcf0:	687b      	ldr	r3, [r7, #4]
 801dcf2:	681b      	ldr	r3, [r3, #0]
 801dcf4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801dcf8:	d01d      	beq.n	801dd36 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 801dcfa:	687b      	ldr	r3, [r7, #4]
 801dcfc:	681b      	ldr	r3, [r3, #0]
 801dcfe:	4a1d      	ldr	r2, [pc, #116]	; (801dd74 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 801dd00:	4293      	cmp	r3, r2
 801dd02:	d018      	beq.n	801dd36 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 801dd04:	687b      	ldr	r3, [r7, #4]
 801dd06:	681b      	ldr	r3, [r3, #0]
 801dd08:	4a1b      	ldr	r2, [pc, #108]	; (801dd78 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 801dd0a:	4293      	cmp	r3, r2
 801dd0c:	d013      	beq.n	801dd36 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 801dd0e:	687b      	ldr	r3, [r7, #4]
 801dd10:	681b      	ldr	r3, [r3, #0]
 801dd12:	4a1a      	ldr	r2, [pc, #104]	; (801dd7c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 801dd14:	4293      	cmp	r3, r2
 801dd16:	d00e      	beq.n	801dd36 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 801dd18:	687b      	ldr	r3, [r7, #4]
 801dd1a:	681b      	ldr	r3, [r3, #0]
 801dd1c:	4a18      	ldr	r2, [pc, #96]	; (801dd80 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 801dd1e:	4293      	cmp	r3, r2
 801dd20:	d009      	beq.n	801dd36 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 801dd22:	687b      	ldr	r3, [r7, #4]
 801dd24:	681b      	ldr	r3, [r3, #0]
 801dd26:	4a17      	ldr	r2, [pc, #92]	; (801dd84 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 801dd28:	4293      	cmp	r3, r2
 801dd2a:	d004      	beq.n	801dd36 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 801dd2c:	687b      	ldr	r3, [r7, #4]
 801dd2e:	681b      	ldr	r3, [r3, #0]
 801dd30:	4a15      	ldr	r2, [pc, #84]	; (801dd88 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 801dd32:	4293      	cmp	r3, r2
 801dd34:	d10c      	bne.n	801dd50 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 801dd36:	68bb      	ldr	r3, [r7, #8]
 801dd38:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 801dd3c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 801dd3e:	683b      	ldr	r3, [r7, #0]
 801dd40:	685b      	ldr	r3, [r3, #4]
 801dd42:	68ba      	ldr	r2, [r7, #8]
 801dd44:	4313      	orrs	r3, r2
 801dd46:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 801dd48:	687b      	ldr	r3, [r7, #4]
 801dd4a:	681b      	ldr	r3, [r3, #0]
 801dd4c:	68ba      	ldr	r2, [r7, #8]
 801dd4e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 801dd50:	687b      	ldr	r3, [r7, #4]
 801dd52:	2201      	movs	r2, #1
 801dd54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 801dd58:	687b      	ldr	r3, [r7, #4]
 801dd5a:	2200      	movs	r2, #0
 801dd5c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 801dd60:	2300      	movs	r3, #0
}
 801dd62:	4618      	mov	r0, r3
 801dd64:	3714      	adds	r7, #20
 801dd66:	46bd      	mov	sp, r7
 801dd68:	f85d 7b04 	ldr.w	r7, [sp], #4
 801dd6c:	4770      	bx	lr
 801dd6e:	bf00      	nop
 801dd70:	40010000 	.word	0x40010000
 801dd74:	40000400 	.word	0x40000400
 801dd78:	40000800 	.word	0x40000800
 801dd7c:	40000c00 	.word	0x40000c00
 801dd80:	40010400 	.word	0x40010400
 801dd84:	40014000 	.word	0x40014000
 801dd88:	40001800 	.word	0x40001800

0801dd8c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 801dd8c:	b480      	push	{r7}
 801dd8e:	b083      	sub	sp, #12
 801dd90:	af00      	add	r7, sp, #0
 801dd92:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 801dd94:	bf00      	nop
 801dd96:	370c      	adds	r7, #12
 801dd98:	46bd      	mov	sp, r7
 801dd9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801dd9e:	4770      	bx	lr

0801dda0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 801dda0:	b480      	push	{r7}
 801dda2:	b083      	sub	sp, #12
 801dda4:	af00      	add	r7, sp, #0
 801dda6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 801dda8:	bf00      	nop
 801ddaa:	370c      	adds	r7, #12
 801ddac:	46bd      	mov	sp, r7
 801ddae:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ddb2:	4770      	bx	lr

0801ddb4 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 801ddb4:	b084      	sub	sp, #16
 801ddb6:	b580      	push	{r7, lr}
 801ddb8:	b084      	sub	sp, #16
 801ddba:	af00      	add	r7, sp, #0
 801ddbc:	6078      	str	r0, [r7, #4]
 801ddbe:	f107 001c 	add.w	r0, r7, #28
 801ddc2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 801ddc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801ddc8:	2b01      	cmp	r3, #1
 801ddca:	d122      	bne.n	801de12 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 801ddcc:	687b      	ldr	r3, [r7, #4]
 801ddce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801ddd0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 801ddd4:	687b      	ldr	r3, [r7, #4]
 801ddd6:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 801ddd8:	687b      	ldr	r3, [r7, #4]
 801ddda:	68db      	ldr	r3, [r3, #12]
 801dddc:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 801dde0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 801dde4:	687a      	ldr	r2, [r7, #4]
 801dde6:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 801dde8:	687b      	ldr	r3, [r7, #4]
 801ddea:	68db      	ldr	r3, [r3, #12]
 801ddec:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 801ddf0:	687b      	ldr	r3, [r7, #4]
 801ddf2:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 801ddf4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801ddf6:	2b01      	cmp	r3, #1
 801ddf8:	d105      	bne.n	801de06 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 801ddfa:	687b      	ldr	r3, [r7, #4]
 801ddfc:	68db      	ldr	r3, [r3, #12]
 801ddfe:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 801de02:	687b      	ldr	r3, [r7, #4]
 801de04:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 801de06:	6878      	ldr	r0, [r7, #4]
 801de08:	f001 fb16 	bl	801f438 <USB_CoreReset>
 801de0c:	4603      	mov	r3, r0
 801de0e:	73fb      	strb	r3, [r7, #15]
 801de10:	e01a      	b.n	801de48 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 801de12:	687b      	ldr	r3, [r7, #4]
 801de14:	68db      	ldr	r3, [r3, #12]
 801de16:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 801de1a:	687b      	ldr	r3, [r7, #4]
 801de1c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 801de1e:	6878      	ldr	r0, [r7, #4]
 801de20:	f001 fb0a 	bl	801f438 <USB_CoreReset>
 801de24:	4603      	mov	r3, r0
 801de26:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 801de28:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801de2a:	2b00      	cmp	r3, #0
 801de2c:	d106      	bne.n	801de3c <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 801de2e:	687b      	ldr	r3, [r7, #4]
 801de30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801de32:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 801de36:	687b      	ldr	r3, [r7, #4]
 801de38:	639a      	str	r2, [r3, #56]	; 0x38
 801de3a:	e005      	b.n	801de48 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 801de3c:	687b      	ldr	r3, [r7, #4]
 801de3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801de40:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 801de44:	687b      	ldr	r3, [r7, #4]
 801de46:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 801de48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801de4a:	2b01      	cmp	r3, #1
 801de4c:	d10b      	bne.n	801de66 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 801de4e:	687b      	ldr	r3, [r7, #4]
 801de50:	689b      	ldr	r3, [r3, #8]
 801de52:	f043 0206 	orr.w	r2, r3, #6
 801de56:	687b      	ldr	r3, [r7, #4]
 801de58:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 801de5a:	687b      	ldr	r3, [r7, #4]
 801de5c:	689b      	ldr	r3, [r3, #8]
 801de5e:	f043 0220 	orr.w	r2, r3, #32
 801de62:	687b      	ldr	r3, [r7, #4]
 801de64:	609a      	str	r2, [r3, #8]
  }

  return ret;
 801de66:	7bfb      	ldrb	r3, [r7, #15]
}
 801de68:	4618      	mov	r0, r3
 801de6a:	3710      	adds	r7, #16
 801de6c:	46bd      	mov	sp, r7
 801de6e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 801de72:	b004      	add	sp, #16
 801de74:	4770      	bx	lr
	...

0801de78 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 801de78:	b480      	push	{r7}
 801de7a:	b087      	sub	sp, #28
 801de7c:	af00      	add	r7, sp, #0
 801de7e:	60f8      	str	r0, [r7, #12]
 801de80:	60b9      	str	r1, [r7, #8]
 801de82:	4613      	mov	r3, r2
 801de84:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 801de86:	79fb      	ldrb	r3, [r7, #7]
 801de88:	2b02      	cmp	r3, #2
 801de8a:	d165      	bne.n	801df58 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 801de8c:	68bb      	ldr	r3, [r7, #8]
 801de8e:	4a41      	ldr	r2, [pc, #260]	; (801df94 <USB_SetTurnaroundTime+0x11c>)
 801de90:	4293      	cmp	r3, r2
 801de92:	d906      	bls.n	801dea2 <USB_SetTurnaroundTime+0x2a>
 801de94:	68bb      	ldr	r3, [r7, #8]
 801de96:	4a40      	ldr	r2, [pc, #256]	; (801df98 <USB_SetTurnaroundTime+0x120>)
 801de98:	4293      	cmp	r3, r2
 801de9a:	d202      	bcs.n	801dea2 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 801de9c:	230f      	movs	r3, #15
 801de9e:	617b      	str	r3, [r7, #20]
 801dea0:	e062      	b.n	801df68 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 801dea2:	68bb      	ldr	r3, [r7, #8]
 801dea4:	4a3c      	ldr	r2, [pc, #240]	; (801df98 <USB_SetTurnaroundTime+0x120>)
 801dea6:	4293      	cmp	r3, r2
 801dea8:	d306      	bcc.n	801deb8 <USB_SetTurnaroundTime+0x40>
 801deaa:	68bb      	ldr	r3, [r7, #8]
 801deac:	4a3b      	ldr	r2, [pc, #236]	; (801df9c <USB_SetTurnaroundTime+0x124>)
 801deae:	4293      	cmp	r3, r2
 801deb0:	d202      	bcs.n	801deb8 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 801deb2:	230e      	movs	r3, #14
 801deb4:	617b      	str	r3, [r7, #20]
 801deb6:	e057      	b.n	801df68 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 801deb8:	68bb      	ldr	r3, [r7, #8]
 801deba:	4a38      	ldr	r2, [pc, #224]	; (801df9c <USB_SetTurnaroundTime+0x124>)
 801debc:	4293      	cmp	r3, r2
 801debe:	d306      	bcc.n	801dece <USB_SetTurnaroundTime+0x56>
 801dec0:	68bb      	ldr	r3, [r7, #8]
 801dec2:	4a37      	ldr	r2, [pc, #220]	; (801dfa0 <USB_SetTurnaroundTime+0x128>)
 801dec4:	4293      	cmp	r3, r2
 801dec6:	d202      	bcs.n	801dece <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 801dec8:	230d      	movs	r3, #13
 801deca:	617b      	str	r3, [r7, #20]
 801decc:	e04c      	b.n	801df68 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 801dece:	68bb      	ldr	r3, [r7, #8]
 801ded0:	4a33      	ldr	r2, [pc, #204]	; (801dfa0 <USB_SetTurnaroundTime+0x128>)
 801ded2:	4293      	cmp	r3, r2
 801ded4:	d306      	bcc.n	801dee4 <USB_SetTurnaroundTime+0x6c>
 801ded6:	68bb      	ldr	r3, [r7, #8]
 801ded8:	4a32      	ldr	r2, [pc, #200]	; (801dfa4 <USB_SetTurnaroundTime+0x12c>)
 801deda:	4293      	cmp	r3, r2
 801dedc:	d802      	bhi.n	801dee4 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 801dede:	230c      	movs	r3, #12
 801dee0:	617b      	str	r3, [r7, #20]
 801dee2:	e041      	b.n	801df68 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 801dee4:	68bb      	ldr	r3, [r7, #8]
 801dee6:	4a2f      	ldr	r2, [pc, #188]	; (801dfa4 <USB_SetTurnaroundTime+0x12c>)
 801dee8:	4293      	cmp	r3, r2
 801deea:	d906      	bls.n	801defa <USB_SetTurnaroundTime+0x82>
 801deec:	68bb      	ldr	r3, [r7, #8]
 801deee:	4a2e      	ldr	r2, [pc, #184]	; (801dfa8 <USB_SetTurnaroundTime+0x130>)
 801def0:	4293      	cmp	r3, r2
 801def2:	d802      	bhi.n	801defa <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 801def4:	230b      	movs	r3, #11
 801def6:	617b      	str	r3, [r7, #20]
 801def8:	e036      	b.n	801df68 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 801defa:	68bb      	ldr	r3, [r7, #8]
 801defc:	4a2a      	ldr	r2, [pc, #168]	; (801dfa8 <USB_SetTurnaroundTime+0x130>)
 801defe:	4293      	cmp	r3, r2
 801df00:	d906      	bls.n	801df10 <USB_SetTurnaroundTime+0x98>
 801df02:	68bb      	ldr	r3, [r7, #8]
 801df04:	4a29      	ldr	r2, [pc, #164]	; (801dfac <USB_SetTurnaroundTime+0x134>)
 801df06:	4293      	cmp	r3, r2
 801df08:	d802      	bhi.n	801df10 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 801df0a:	230a      	movs	r3, #10
 801df0c:	617b      	str	r3, [r7, #20]
 801df0e:	e02b      	b.n	801df68 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 801df10:	68bb      	ldr	r3, [r7, #8]
 801df12:	4a26      	ldr	r2, [pc, #152]	; (801dfac <USB_SetTurnaroundTime+0x134>)
 801df14:	4293      	cmp	r3, r2
 801df16:	d906      	bls.n	801df26 <USB_SetTurnaroundTime+0xae>
 801df18:	68bb      	ldr	r3, [r7, #8]
 801df1a:	4a25      	ldr	r2, [pc, #148]	; (801dfb0 <USB_SetTurnaroundTime+0x138>)
 801df1c:	4293      	cmp	r3, r2
 801df1e:	d202      	bcs.n	801df26 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 801df20:	2309      	movs	r3, #9
 801df22:	617b      	str	r3, [r7, #20]
 801df24:	e020      	b.n	801df68 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 801df26:	68bb      	ldr	r3, [r7, #8]
 801df28:	4a21      	ldr	r2, [pc, #132]	; (801dfb0 <USB_SetTurnaroundTime+0x138>)
 801df2a:	4293      	cmp	r3, r2
 801df2c:	d306      	bcc.n	801df3c <USB_SetTurnaroundTime+0xc4>
 801df2e:	68bb      	ldr	r3, [r7, #8]
 801df30:	4a20      	ldr	r2, [pc, #128]	; (801dfb4 <USB_SetTurnaroundTime+0x13c>)
 801df32:	4293      	cmp	r3, r2
 801df34:	d802      	bhi.n	801df3c <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 801df36:	2308      	movs	r3, #8
 801df38:	617b      	str	r3, [r7, #20]
 801df3a:	e015      	b.n	801df68 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 801df3c:	68bb      	ldr	r3, [r7, #8]
 801df3e:	4a1d      	ldr	r2, [pc, #116]	; (801dfb4 <USB_SetTurnaroundTime+0x13c>)
 801df40:	4293      	cmp	r3, r2
 801df42:	d906      	bls.n	801df52 <USB_SetTurnaroundTime+0xda>
 801df44:	68bb      	ldr	r3, [r7, #8]
 801df46:	4a1c      	ldr	r2, [pc, #112]	; (801dfb8 <USB_SetTurnaroundTime+0x140>)
 801df48:	4293      	cmp	r3, r2
 801df4a:	d202      	bcs.n	801df52 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 801df4c:	2307      	movs	r3, #7
 801df4e:	617b      	str	r3, [r7, #20]
 801df50:	e00a      	b.n	801df68 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 801df52:	2306      	movs	r3, #6
 801df54:	617b      	str	r3, [r7, #20]
 801df56:	e007      	b.n	801df68 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 801df58:	79fb      	ldrb	r3, [r7, #7]
 801df5a:	2b00      	cmp	r3, #0
 801df5c:	d102      	bne.n	801df64 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 801df5e:	2309      	movs	r3, #9
 801df60:	617b      	str	r3, [r7, #20]
 801df62:	e001      	b.n	801df68 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 801df64:	2309      	movs	r3, #9
 801df66:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 801df68:	68fb      	ldr	r3, [r7, #12]
 801df6a:	68db      	ldr	r3, [r3, #12]
 801df6c:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 801df70:	68fb      	ldr	r3, [r7, #12]
 801df72:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 801df74:	68fb      	ldr	r3, [r7, #12]
 801df76:	68da      	ldr	r2, [r3, #12]
 801df78:	697b      	ldr	r3, [r7, #20]
 801df7a:	029b      	lsls	r3, r3, #10
 801df7c:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 801df80:	431a      	orrs	r2, r3
 801df82:	68fb      	ldr	r3, [r7, #12]
 801df84:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 801df86:	2300      	movs	r3, #0
}
 801df88:	4618      	mov	r0, r3
 801df8a:	371c      	adds	r7, #28
 801df8c:	46bd      	mov	sp, r7
 801df8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801df92:	4770      	bx	lr
 801df94:	00d8acbf 	.word	0x00d8acbf
 801df98:	00e4e1c0 	.word	0x00e4e1c0
 801df9c:	00f42400 	.word	0x00f42400
 801dfa0:	01067380 	.word	0x01067380
 801dfa4:	011a499f 	.word	0x011a499f
 801dfa8:	01312cff 	.word	0x01312cff
 801dfac:	014ca43f 	.word	0x014ca43f
 801dfb0:	016e3600 	.word	0x016e3600
 801dfb4:	01a6ab1f 	.word	0x01a6ab1f
 801dfb8:	01e84800 	.word	0x01e84800

0801dfbc <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 801dfbc:	b480      	push	{r7}
 801dfbe:	b083      	sub	sp, #12
 801dfc0:	af00      	add	r7, sp, #0
 801dfc2:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 801dfc4:	687b      	ldr	r3, [r7, #4]
 801dfc6:	689b      	ldr	r3, [r3, #8]
 801dfc8:	f043 0201 	orr.w	r2, r3, #1
 801dfcc:	687b      	ldr	r3, [r7, #4]
 801dfce:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 801dfd0:	2300      	movs	r3, #0
}
 801dfd2:	4618      	mov	r0, r3
 801dfd4:	370c      	adds	r7, #12
 801dfd6:	46bd      	mov	sp, r7
 801dfd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 801dfdc:	4770      	bx	lr

0801dfde <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 801dfde:	b480      	push	{r7}
 801dfe0:	b083      	sub	sp, #12
 801dfe2:	af00      	add	r7, sp, #0
 801dfe4:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 801dfe6:	687b      	ldr	r3, [r7, #4]
 801dfe8:	689b      	ldr	r3, [r3, #8]
 801dfea:	f023 0201 	bic.w	r2, r3, #1
 801dfee:	687b      	ldr	r3, [r7, #4]
 801dff0:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 801dff2:	2300      	movs	r3, #0
}
 801dff4:	4618      	mov	r0, r3
 801dff6:	370c      	adds	r7, #12
 801dff8:	46bd      	mov	sp, r7
 801dffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 801dffe:	4770      	bx	lr

0801e000 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 801e000:	b580      	push	{r7, lr}
 801e002:	b084      	sub	sp, #16
 801e004:	af00      	add	r7, sp, #0
 801e006:	6078      	str	r0, [r7, #4]
 801e008:	460b      	mov	r3, r1
 801e00a:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 801e00c:	2300      	movs	r3, #0
 801e00e:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 801e010:	687b      	ldr	r3, [r7, #4]
 801e012:	68db      	ldr	r3, [r3, #12]
 801e014:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 801e018:	687b      	ldr	r3, [r7, #4]
 801e01a:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 801e01c:	78fb      	ldrb	r3, [r7, #3]
 801e01e:	2b01      	cmp	r3, #1
 801e020:	d115      	bne.n	801e04e <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 801e022:	687b      	ldr	r3, [r7, #4]
 801e024:	68db      	ldr	r3, [r3, #12]
 801e026:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 801e02a:	687b      	ldr	r3, [r7, #4]
 801e02c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 801e02e:	2001      	movs	r0, #1
 801e030:	f7fa fb04 	bl	801863c <HAL_Delay>
      ms++;
 801e034:	68fb      	ldr	r3, [r7, #12]
 801e036:	3301      	adds	r3, #1
 801e038:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 801e03a:	6878      	ldr	r0, [r7, #4]
 801e03c:	f001 f96c 	bl	801f318 <USB_GetMode>
 801e040:	4603      	mov	r3, r0
 801e042:	2b01      	cmp	r3, #1
 801e044:	d01e      	beq.n	801e084 <USB_SetCurrentMode+0x84>
 801e046:	68fb      	ldr	r3, [r7, #12]
 801e048:	2b31      	cmp	r3, #49	; 0x31
 801e04a:	d9f0      	bls.n	801e02e <USB_SetCurrentMode+0x2e>
 801e04c:	e01a      	b.n	801e084 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 801e04e:	78fb      	ldrb	r3, [r7, #3]
 801e050:	2b00      	cmp	r3, #0
 801e052:	d115      	bne.n	801e080 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 801e054:	687b      	ldr	r3, [r7, #4]
 801e056:	68db      	ldr	r3, [r3, #12]
 801e058:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 801e05c:	687b      	ldr	r3, [r7, #4]
 801e05e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 801e060:	2001      	movs	r0, #1
 801e062:	f7fa faeb 	bl	801863c <HAL_Delay>
      ms++;
 801e066:	68fb      	ldr	r3, [r7, #12]
 801e068:	3301      	adds	r3, #1
 801e06a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 801e06c:	6878      	ldr	r0, [r7, #4]
 801e06e:	f001 f953 	bl	801f318 <USB_GetMode>
 801e072:	4603      	mov	r3, r0
 801e074:	2b00      	cmp	r3, #0
 801e076:	d005      	beq.n	801e084 <USB_SetCurrentMode+0x84>
 801e078:	68fb      	ldr	r3, [r7, #12]
 801e07a:	2b31      	cmp	r3, #49	; 0x31
 801e07c:	d9f0      	bls.n	801e060 <USB_SetCurrentMode+0x60>
 801e07e:	e001      	b.n	801e084 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 801e080:	2301      	movs	r3, #1
 801e082:	e005      	b.n	801e090 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 801e084:	68fb      	ldr	r3, [r7, #12]
 801e086:	2b32      	cmp	r3, #50	; 0x32
 801e088:	d101      	bne.n	801e08e <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 801e08a:	2301      	movs	r3, #1
 801e08c:	e000      	b.n	801e090 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 801e08e:	2300      	movs	r3, #0
}
 801e090:	4618      	mov	r0, r3
 801e092:	3710      	adds	r7, #16
 801e094:	46bd      	mov	sp, r7
 801e096:	bd80      	pop	{r7, pc}

0801e098 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 801e098:	b084      	sub	sp, #16
 801e09a:	b580      	push	{r7, lr}
 801e09c:	b086      	sub	sp, #24
 801e09e:	af00      	add	r7, sp, #0
 801e0a0:	6078      	str	r0, [r7, #4]
 801e0a2:	f107 0024 	add.w	r0, r7, #36	; 0x24
 801e0a6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 801e0aa:	2300      	movs	r3, #0
 801e0ac:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801e0ae:	687b      	ldr	r3, [r7, #4]
 801e0b0:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 801e0b2:	2300      	movs	r3, #0
 801e0b4:	613b      	str	r3, [r7, #16]
 801e0b6:	e009      	b.n	801e0cc <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 801e0b8:	687a      	ldr	r2, [r7, #4]
 801e0ba:	693b      	ldr	r3, [r7, #16]
 801e0bc:	3340      	adds	r3, #64	; 0x40
 801e0be:	009b      	lsls	r3, r3, #2
 801e0c0:	4413      	add	r3, r2
 801e0c2:	2200      	movs	r2, #0
 801e0c4:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 801e0c6:	693b      	ldr	r3, [r7, #16]
 801e0c8:	3301      	adds	r3, #1
 801e0ca:	613b      	str	r3, [r7, #16]
 801e0cc:	693b      	ldr	r3, [r7, #16]
 801e0ce:	2b0e      	cmp	r3, #14
 801e0d0:	d9f2      	bls.n	801e0b8 <USB_DevInit+0x20>
  }

#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 801e0d2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801e0d4:	2b00      	cmp	r3, #0
 801e0d6:	d11c      	bne.n	801e112 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 801e0d8:	68fb      	ldr	r3, [r7, #12]
 801e0da:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801e0de:	685b      	ldr	r3, [r3, #4]
 801e0e0:	68fa      	ldr	r2, [r7, #12]
 801e0e2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 801e0e6:	f043 0302 	orr.w	r3, r3, #2
 801e0ea:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 801e0ec:	687b      	ldr	r3, [r7, #4]
 801e0ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801e0f0:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 801e0f4:	687b      	ldr	r3, [r7, #4]
 801e0f6:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 801e0f8:	687b      	ldr	r3, [r7, #4]
 801e0fa:	681b      	ldr	r3, [r3, #0]
 801e0fc:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 801e100:	687b      	ldr	r3, [r7, #4]
 801e102:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 801e104:	687b      	ldr	r3, [r7, #4]
 801e106:	681b      	ldr	r3, [r3, #0]
 801e108:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 801e10c:	687b      	ldr	r3, [r7, #4]
 801e10e:	601a      	str	r2, [r3, #0]
 801e110:	e005      	b.n	801e11e <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 801e112:	687b      	ldr	r3, [r7, #4]
 801e114:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801e116:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 801e11a:	687b      	ldr	r3, [r7, #4]
 801e11c:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 801e11e:	68fb      	ldr	r3, [r7, #12]
 801e120:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 801e124:	461a      	mov	r2, r3
 801e126:	2300      	movs	r3, #0
 801e128:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 801e12a:	68fb      	ldr	r3, [r7, #12]
 801e12c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801e130:	4619      	mov	r1, r3
 801e132:	68fb      	ldr	r3, [r7, #12]
 801e134:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801e138:	461a      	mov	r2, r3
 801e13a:	680b      	ldr	r3, [r1, #0]
 801e13c:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 801e13e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801e140:	2b01      	cmp	r3, #1
 801e142:	d10c      	bne.n	801e15e <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 801e144:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801e146:	2b00      	cmp	r3, #0
 801e148:	d104      	bne.n	801e154 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 801e14a:	2100      	movs	r1, #0
 801e14c:	6878      	ldr	r0, [r7, #4]
 801e14e:	f000 f945 	bl	801e3dc <USB_SetDevSpeed>
 801e152:	e008      	b.n	801e166 <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 801e154:	2101      	movs	r1, #1
 801e156:	6878      	ldr	r0, [r7, #4]
 801e158:	f000 f940 	bl	801e3dc <USB_SetDevSpeed>
 801e15c:	e003      	b.n	801e166 <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 801e15e:	2103      	movs	r1, #3
 801e160:	6878      	ldr	r0, [r7, #4]
 801e162:	f000 f93b 	bl	801e3dc <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 801e166:	2110      	movs	r1, #16
 801e168:	6878      	ldr	r0, [r7, #4]
 801e16a:	f000 f8f3 	bl	801e354 <USB_FlushTxFifo>
 801e16e:	4603      	mov	r3, r0
 801e170:	2b00      	cmp	r3, #0
 801e172:	d001      	beq.n	801e178 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 801e174:	2301      	movs	r3, #1
 801e176:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 801e178:	6878      	ldr	r0, [r7, #4]
 801e17a:	f000 f90f 	bl	801e39c <USB_FlushRxFifo>
 801e17e:	4603      	mov	r3, r0
 801e180:	2b00      	cmp	r3, #0
 801e182:	d001      	beq.n	801e188 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 801e184:	2301      	movs	r3, #1
 801e186:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 801e188:	68fb      	ldr	r3, [r7, #12]
 801e18a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801e18e:	461a      	mov	r2, r3
 801e190:	2300      	movs	r3, #0
 801e192:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 801e194:	68fb      	ldr	r3, [r7, #12]
 801e196:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801e19a:	461a      	mov	r2, r3
 801e19c:	2300      	movs	r3, #0
 801e19e:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 801e1a0:	68fb      	ldr	r3, [r7, #12]
 801e1a2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801e1a6:	461a      	mov	r2, r3
 801e1a8:	2300      	movs	r3, #0
 801e1aa:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 801e1ac:	2300      	movs	r3, #0
 801e1ae:	613b      	str	r3, [r7, #16]
 801e1b0:	e043      	b.n	801e23a <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 801e1b2:	693b      	ldr	r3, [r7, #16]
 801e1b4:	015a      	lsls	r2, r3, #5
 801e1b6:	68fb      	ldr	r3, [r7, #12]
 801e1b8:	4413      	add	r3, r2
 801e1ba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801e1be:	681b      	ldr	r3, [r3, #0]
 801e1c0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 801e1c4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 801e1c8:	d118      	bne.n	801e1fc <USB_DevInit+0x164>
    {
      if (i == 0U)
 801e1ca:	693b      	ldr	r3, [r7, #16]
 801e1cc:	2b00      	cmp	r3, #0
 801e1ce:	d10a      	bne.n	801e1e6 <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 801e1d0:	693b      	ldr	r3, [r7, #16]
 801e1d2:	015a      	lsls	r2, r3, #5
 801e1d4:	68fb      	ldr	r3, [r7, #12]
 801e1d6:	4413      	add	r3, r2
 801e1d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801e1dc:	461a      	mov	r2, r3
 801e1de:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 801e1e2:	6013      	str	r3, [r2, #0]
 801e1e4:	e013      	b.n	801e20e <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 801e1e6:	693b      	ldr	r3, [r7, #16]
 801e1e8:	015a      	lsls	r2, r3, #5
 801e1ea:	68fb      	ldr	r3, [r7, #12]
 801e1ec:	4413      	add	r3, r2
 801e1ee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801e1f2:	461a      	mov	r2, r3
 801e1f4:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 801e1f8:	6013      	str	r3, [r2, #0]
 801e1fa:	e008      	b.n	801e20e <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 801e1fc:	693b      	ldr	r3, [r7, #16]
 801e1fe:	015a      	lsls	r2, r3, #5
 801e200:	68fb      	ldr	r3, [r7, #12]
 801e202:	4413      	add	r3, r2
 801e204:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801e208:	461a      	mov	r2, r3
 801e20a:	2300      	movs	r3, #0
 801e20c:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 801e20e:	693b      	ldr	r3, [r7, #16]
 801e210:	015a      	lsls	r2, r3, #5
 801e212:	68fb      	ldr	r3, [r7, #12]
 801e214:	4413      	add	r3, r2
 801e216:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801e21a:	461a      	mov	r2, r3
 801e21c:	2300      	movs	r3, #0
 801e21e:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 801e220:	693b      	ldr	r3, [r7, #16]
 801e222:	015a      	lsls	r2, r3, #5
 801e224:	68fb      	ldr	r3, [r7, #12]
 801e226:	4413      	add	r3, r2
 801e228:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801e22c:	461a      	mov	r2, r3
 801e22e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 801e232:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 801e234:	693b      	ldr	r3, [r7, #16]
 801e236:	3301      	adds	r3, #1
 801e238:	613b      	str	r3, [r7, #16]
 801e23a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801e23c:	693a      	ldr	r2, [r7, #16]
 801e23e:	429a      	cmp	r2, r3
 801e240:	d3b7      	bcc.n	801e1b2 <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 801e242:	2300      	movs	r3, #0
 801e244:	613b      	str	r3, [r7, #16]
 801e246:	e043      	b.n	801e2d0 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 801e248:	693b      	ldr	r3, [r7, #16]
 801e24a:	015a      	lsls	r2, r3, #5
 801e24c:	68fb      	ldr	r3, [r7, #12]
 801e24e:	4413      	add	r3, r2
 801e250:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801e254:	681b      	ldr	r3, [r3, #0]
 801e256:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 801e25a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 801e25e:	d118      	bne.n	801e292 <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 801e260:	693b      	ldr	r3, [r7, #16]
 801e262:	2b00      	cmp	r3, #0
 801e264:	d10a      	bne.n	801e27c <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 801e266:	693b      	ldr	r3, [r7, #16]
 801e268:	015a      	lsls	r2, r3, #5
 801e26a:	68fb      	ldr	r3, [r7, #12]
 801e26c:	4413      	add	r3, r2
 801e26e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801e272:	461a      	mov	r2, r3
 801e274:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 801e278:	6013      	str	r3, [r2, #0]
 801e27a:	e013      	b.n	801e2a4 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 801e27c:	693b      	ldr	r3, [r7, #16]
 801e27e:	015a      	lsls	r2, r3, #5
 801e280:	68fb      	ldr	r3, [r7, #12]
 801e282:	4413      	add	r3, r2
 801e284:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801e288:	461a      	mov	r2, r3
 801e28a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 801e28e:	6013      	str	r3, [r2, #0]
 801e290:	e008      	b.n	801e2a4 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 801e292:	693b      	ldr	r3, [r7, #16]
 801e294:	015a      	lsls	r2, r3, #5
 801e296:	68fb      	ldr	r3, [r7, #12]
 801e298:	4413      	add	r3, r2
 801e29a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801e29e:	461a      	mov	r2, r3
 801e2a0:	2300      	movs	r3, #0
 801e2a2:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 801e2a4:	693b      	ldr	r3, [r7, #16]
 801e2a6:	015a      	lsls	r2, r3, #5
 801e2a8:	68fb      	ldr	r3, [r7, #12]
 801e2aa:	4413      	add	r3, r2
 801e2ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801e2b0:	461a      	mov	r2, r3
 801e2b2:	2300      	movs	r3, #0
 801e2b4:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 801e2b6:	693b      	ldr	r3, [r7, #16]
 801e2b8:	015a      	lsls	r2, r3, #5
 801e2ba:	68fb      	ldr	r3, [r7, #12]
 801e2bc:	4413      	add	r3, r2
 801e2be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801e2c2:	461a      	mov	r2, r3
 801e2c4:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 801e2c8:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 801e2ca:	693b      	ldr	r3, [r7, #16]
 801e2cc:	3301      	adds	r3, #1
 801e2ce:	613b      	str	r3, [r7, #16]
 801e2d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801e2d2:	693a      	ldr	r2, [r7, #16]
 801e2d4:	429a      	cmp	r2, r3
 801e2d6:	d3b7      	bcc.n	801e248 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 801e2d8:	68fb      	ldr	r3, [r7, #12]
 801e2da:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801e2de:	691b      	ldr	r3, [r3, #16]
 801e2e0:	68fa      	ldr	r2, [r7, #12]
 801e2e2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 801e2e6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 801e2ea:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 801e2ec:	687b      	ldr	r3, [r7, #4]
 801e2ee:	2200      	movs	r2, #0
 801e2f0:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 801e2f2:	687b      	ldr	r3, [r7, #4]
 801e2f4:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 801e2f8:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 801e2fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801e2fc:	2b00      	cmp	r3, #0
 801e2fe:	d105      	bne.n	801e30c <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 801e300:	687b      	ldr	r3, [r7, #4]
 801e302:	699b      	ldr	r3, [r3, #24]
 801e304:	f043 0210 	orr.w	r2, r3, #16
 801e308:	687b      	ldr	r3, [r7, #4]
 801e30a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 801e30c:	687b      	ldr	r3, [r7, #4]
 801e30e:	699a      	ldr	r2, [r3, #24]
 801e310:	4b0f      	ldr	r3, [pc, #60]	; (801e350 <USB_DevInit+0x2b8>)
 801e312:	4313      	orrs	r3, r2
 801e314:	687a      	ldr	r2, [r7, #4]
 801e316:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 801e318:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801e31a:	2b00      	cmp	r3, #0
 801e31c:	d005      	beq.n	801e32a <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 801e31e:	687b      	ldr	r3, [r7, #4]
 801e320:	699b      	ldr	r3, [r3, #24]
 801e322:	f043 0208 	orr.w	r2, r3, #8
 801e326:	687b      	ldr	r3, [r7, #4]
 801e328:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 801e32a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801e32c:	2b01      	cmp	r3, #1
 801e32e:	d107      	bne.n	801e340 <USB_DevInit+0x2a8>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 801e330:	687b      	ldr	r3, [r7, #4]
 801e332:	699b      	ldr	r3, [r3, #24]
 801e334:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 801e338:	f043 0304 	orr.w	r3, r3, #4
 801e33c:	687a      	ldr	r2, [r7, #4]
 801e33e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 801e340:	7dfb      	ldrb	r3, [r7, #23]
}
 801e342:	4618      	mov	r0, r3
 801e344:	3718      	adds	r7, #24
 801e346:	46bd      	mov	sp, r7
 801e348:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 801e34c:	b004      	add	sp, #16
 801e34e:	4770      	bx	lr
 801e350:	803c3800 	.word	0x803c3800

0801e354 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 801e354:	b480      	push	{r7}
 801e356:	b085      	sub	sp, #20
 801e358:	af00      	add	r7, sp, #0
 801e35a:	6078      	str	r0, [r7, #4]
 801e35c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 801e35e:	2300      	movs	r3, #0
 801e360:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 801e362:	683b      	ldr	r3, [r7, #0]
 801e364:	019b      	lsls	r3, r3, #6
 801e366:	f043 0220 	orr.w	r2, r3, #32
 801e36a:	687b      	ldr	r3, [r7, #4]
 801e36c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 801e36e:	68fb      	ldr	r3, [r7, #12]
 801e370:	3301      	adds	r3, #1
 801e372:	60fb      	str	r3, [r7, #12]
 801e374:	4a08      	ldr	r2, [pc, #32]	; (801e398 <USB_FlushTxFifo+0x44>)
 801e376:	4293      	cmp	r3, r2
 801e378:	d901      	bls.n	801e37e <USB_FlushTxFifo+0x2a>
    {
      return HAL_TIMEOUT;
 801e37a:	2303      	movs	r3, #3
 801e37c:	e006      	b.n	801e38c <USB_FlushTxFifo+0x38>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 801e37e:	687b      	ldr	r3, [r7, #4]
 801e380:	691b      	ldr	r3, [r3, #16]
 801e382:	f003 0320 	and.w	r3, r3, #32
 801e386:	2b20      	cmp	r3, #32
 801e388:	d0f1      	beq.n	801e36e <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 801e38a:	2300      	movs	r3, #0
}
 801e38c:	4618      	mov	r0, r3
 801e38e:	3714      	adds	r7, #20
 801e390:	46bd      	mov	sp, r7
 801e392:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e396:	4770      	bx	lr
 801e398:	00030d40 	.word	0x00030d40

0801e39c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 801e39c:	b480      	push	{r7}
 801e39e:	b085      	sub	sp, #20
 801e3a0:	af00      	add	r7, sp, #0
 801e3a2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 801e3a4:	2300      	movs	r3, #0
 801e3a6:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 801e3a8:	687b      	ldr	r3, [r7, #4]
 801e3aa:	2210      	movs	r2, #16
 801e3ac:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 801e3ae:	68fb      	ldr	r3, [r7, #12]
 801e3b0:	3301      	adds	r3, #1
 801e3b2:	60fb      	str	r3, [r7, #12]
 801e3b4:	4a08      	ldr	r2, [pc, #32]	; (801e3d8 <USB_FlushRxFifo+0x3c>)
 801e3b6:	4293      	cmp	r3, r2
 801e3b8:	d901      	bls.n	801e3be <USB_FlushRxFifo+0x22>
    {
      return HAL_TIMEOUT;
 801e3ba:	2303      	movs	r3, #3
 801e3bc:	e006      	b.n	801e3cc <USB_FlushRxFifo+0x30>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 801e3be:	687b      	ldr	r3, [r7, #4]
 801e3c0:	691b      	ldr	r3, [r3, #16]
 801e3c2:	f003 0310 	and.w	r3, r3, #16
 801e3c6:	2b10      	cmp	r3, #16
 801e3c8:	d0f1      	beq.n	801e3ae <USB_FlushRxFifo+0x12>

  return HAL_OK;
 801e3ca:	2300      	movs	r3, #0
}
 801e3cc:	4618      	mov	r0, r3
 801e3ce:	3714      	adds	r7, #20
 801e3d0:	46bd      	mov	sp, r7
 801e3d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e3d6:	4770      	bx	lr
 801e3d8:	00030d40 	.word	0x00030d40

0801e3dc <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 801e3dc:	b480      	push	{r7}
 801e3de:	b085      	sub	sp, #20
 801e3e0:	af00      	add	r7, sp, #0
 801e3e2:	6078      	str	r0, [r7, #4]
 801e3e4:	460b      	mov	r3, r1
 801e3e6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801e3e8:	687b      	ldr	r3, [r7, #4]
 801e3ea:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 801e3ec:	68fb      	ldr	r3, [r7, #12]
 801e3ee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801e3f2:	681a      	ldr	r2, [r3, #0]
 801e3f4:	78fb      	ldrb	r3, [r7, #3]
 801e3f6:	68f9      	ldr	r1, [r7, #12]
 801e3f8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 801e3fc:	4313      	orrs	r3, r2
 801e3fe:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 801e400:	2300      	movs	r3, #0
}
 801e402:	4618      	mov	r0, r3
 801e404:	3714      	adds	r7, #20
 801e406:	46bd      	mov	sp, r7
 801e408:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e40c:	4770      	bx	lr

0801e40e <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 801e40e:	b480      	push	{r7}
 801e410:	b087      	sub	sp, #28
 801e412:	af00      	add	r7, sp, #0
 801e414:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801e416:	687b      	ldr	r3, [r7, #4]
 801e418:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 801e41a:	693b      	ldr	r3, [r7, #16]
 801e41c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801e420:	689b      	ldr	r3, [r3, #8]
 801e422:	f003 0306 	and.w	r3, r3, #6
 801e426:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 801e428:	68fb      	ldr	r3, [r7, #12]
 801e42a:	2b00      	cmp	r3, #0
 801e42c:	d102      	bne.n	801e434 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 801e42e:	2300      	movs	r3, #0
 801e430:	75fb      	strb	r3, [r7, #23]
 801e432:	e00a      	b.n	801e44a <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 801e434:	68fb      	ldr	r3, [r7, #12]
 801e436:	2b02      	cmp	r3, #2
 801e438:	d002      	beq.n	801e440 <USB_GetDevSpeed+0x32>
 801e43a:	68fb      	ldr	r3, [r7, #12]
 801e43c:	2b06      	cmp	r3, #6
 801e43e:	d102      	bne.n	801e446 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 801e440:	2302      	movs	r3, #2
 801e442:	75fb      	strb	r3, [r7, #23]
 801e444:	e001      	b.n	801e44a <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 801e446:	230f      	movs	r3, #15
 801e448:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 801e44a:	7dfb      	ldrb	r3, [r7, #23]
}
 801e44c:	4618      	mov	r0, r3
 801e44e:	371c      	adds	r7, #28
 801e450:	46bd      	mov	sp, r7
 801e452:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e456:	4770      	bx	lr

0801e458 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 801e458:	b480      	push	{r7}
 801e45a:	b085      	sub	sp, #20
 801e45c:	af00      	add	r7, sp, #0
 801e45e:	6078      	str	r0, [r7, #4]
 801e460:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801e462:	687b      	ldr	r3, [r7, #4]
 801e464:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 801e466:	683b      	ldr	r3, [r7, #0]
 801e468:	781b      	ldrb	r3, [r3, #0]
 801e46a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 801e46c:	683b      	ldr	r3, [r7, #0]
 801e46e:	785b      	ldrb	r3, [r3, #1]
 801e470:	2b01      	cmp	r3, #1
 801e472:	d13a      	bne.n	801e4ea <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 801e474:	68fb      	ldr	r3, [r7, #12]
 801e476:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801e47a:	69da      	ldr	r2, [r3, #28]
 801e47c:	683b      	ldr	r3, [r7, #0]
 801e47e:	781b      	ldrb	r3, [r3, #0]
 801e480:	f003 030f 	and.w	r3, r3, #15
 801e484:	2101      	movs	r1, #1
 801e486:	fa01 f303 	lsl.w	r3, r1, r3
 801e48a:	b29b      	uxth	r3, r3
 801e48c:	68f9      	ldr	r1, [r7, #12]
 801e48e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 801e492:	4313      	orrs	r3, r2
 801e494:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 801e496:	68bb      	ldr	r3, [r7, #8]
 801e498:	015a      	lsls	r2, r3, #5
 801e49a:	68fb      	ldr	r3, [r7, #12]
 801e49c:	4413      	add	r3, r2
 801e49e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801e4a2:	681b      	ldr	r3, [r3, #0]
 801e4a4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 801e4a8:	2b00      	cmp	r3, #0
 801e4aa:	d155      	bne.n	801e558 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 801e4ac:	68bb      	ldr	r3, [r7, #8]
 801e4ae:	015a      	lsls	r2, r3, #5
 801e4b0:	68fb      	ldr	r3, [r7, #12]
 801e4b2:	4413      	add	r3, r2
 801e4b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801e4b8:	681a      	ldr	r2, [r3, #0]
 801e4ba:	683b      	ldr	r3, [r7, #0]
 801e4bc:	689b      	ldr	r3, [r3, #8]
 801e4be:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 801e4c2:	683b      	ldr	r3, [r7, #0]
 801e4c4:	78db      	ldrb	r3, [r3, #3]
 801e4c6:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 801e4c8:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 801e4ca:	68bb      	ldr	r3, [r7, #8]
 801e4cc:	059b      	lsls	r3, r3, #22
 801e4ce:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 801e4d0:	4313      	orrs	r3, r2
 801e4d2:	68ba      	ldr	r2, [r7, #8]
 801e4d4:	0151      	lsls	r1, r2, #5
 801e4d6:	68fa      	ldr	r2, [r7, #12]
 801e4d8:	440a      	add	r2, r1
 801e4da:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801e4de:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 801e4e2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 801e4e6:	6013      	str	r3, [r2, #0]
 801e4e8:	e036      	b.n	801e558 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 801e4ea:	68fb      	ldr	r3, [r7, #12]
 801e4ec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801e4f0:	69da      	ldr	r2, [r3, #28]
 801e4f2:	683b      	ldr	r3, [r7, #0]
 801e4f4:	781b      	ldrb	r3, [r3, #0]
 801e4f6:	f003 030f 	and.w	r3, r3, #15
 801e4fa:	2101      	movs	r1, #1
 801e4fc:	fa01 f303 	lsl.w	r3, r1, r3
 801e500:	041b      	lsls	r3, r3, #16
 801e502:	68f9      	ldr	r1, [r7, #12]
 801e504:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 801e508:	4313      	orrs	r3, r2
 801e50a:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 801e50c:	68bb      	ldr	r3, [r7, #8]
 801e50e:	015a      	lsls	r2, r3, #5
 801e510:	68fb      	ldr	r3, [r7, #12]
 801e512:	4413      	add	r3, r2
 801e514:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801e518:	681b      	ldr	r3, [r3, #0]
 801e51a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 801e51e:	2b00      	cmp	r3, #0
 801e520:	d11a      	bne.n	801e558 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 801e522:	68bb      	ldr	r3, [r7, #8]
 801e524:	015a      	lsls	r2, r3, #5
 801e526:	68fb      	ldr	r3, [r7, #12]
 801e528:	4413      	add	r3, r2
 801e52a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801e52e:	681a      	ldr	r2, [r3, #0]
 801e530:	683b      	ldr	r3, [r7, #0]
 801e532:	689b      	ldr	r3, [r3, #8]
 801e534:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 801e538:	683b      	ldr	r3, [r7, #0]
 801e53a:	78db      	ldrb	r3, [r3, #3]
 801e53c:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 801e53e:	430b      	orrs	r3, r1
 801e540:	4313      	orrs	r3, r2
 801e542:	68ba      	ldr	r2, [r7, #8]
 801e544:	0151      	lsls	r1, r2, #5
 801e546:	68fa      	ldr	r2, [r7, #12]
 801e548:	440a      	add	r2, r1
 801e54a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801e54e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 801e552:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 801e556:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 801e558:	2300      	movs	r3, #0
}
 801e55a:	4618      	mov	r0, r3
 801e55c:	3714      	adds	r7, #20
 801e55e:	46bd      	mov	sp, r7
 801e560:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e564:	4770      	bx	lr
	...

0801e568 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 801e568:	b480      	push	{r7}
 801e56a:	b085      	sub	sp, #20
 801e56c:	af00      	add	r7, sp, #0
 801e56e:	6078      	str	r0, [r7, #4]
 801e570:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801e572:	687b      	ldr	r3, [r7, #4]
 801e574:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 801e576:	683b      	ldr	r3, [r7, #0]
 801e578:	781b      	ldrb	r3, [r3, #0]
 801e57a:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 801e57c:	683b      	ldr	r3, [r7, #0]
 801e57e:	785b      	ldrb	r3, [r3, #1]
 801e580:	2b01      	cmp	r3, #1
 801e582:	d161      	bne.n	801e648 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 801e584:	68bb      	ldr	r3, [r7, #8]
 801e586:	015a      	lsls	r2, r3, #5
 801e588:	68fb      	ldr	r3, [r7, #12]
 801e58a:	4413      	add	r3, r2
 801e58c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801e590:	681b      	ldr	r3, [r3, #0]
 801e592:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 801e596:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 801e59a:	d11f      	bne.n	801e5dc <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 801e59c:	68bb      	ldr	r3, [r7, #8]
 801e59e:	015a      	lsls	r2, r3, #5
 801e5a0:	68fb      	ldr	r3, [r7, #12]
 801e5a2:	4413      	add	r3, r2
 801e5a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801e5a8:	681b      	ldr	r3, [r3, #0]
 801e5aa:	68ba      	ldr	r2, [r7, #8]
 801e5ac:	0151      	lsls	r1, r2, #5
 801e5ae:	68fa      	ldr	r2, [r7, #12]
 801e5b0:	440a      	add	r2, r1
 801e5b2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801e5b6:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 801e5ba:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 801e5bc:	68bb      	ldr	r3, [r7, #8]
 801e5be:	015a      	lsls	r2, r3, #5
 801e5c0:	68fb      	ldr	r3, [r7, #12]
 801e5c2:	4413      	add	r3, r2
 801e5c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801e5c8:	681b      	ldr	r3, [r3, #0]
 801e5ca:	68ba      	ldr	r2, [r7, #8]
 801e5cc:	0151      	lsls	r1, r2, #5
 801e5ce:	68fa      	ldr	r2, [r7, #12]
 801e5d0:	440a      	add	r2, r1
 801e5d2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801e5d6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 801e5da:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 801e5dc:	68fb      	ldr	r3, [r7, #12]
 801e5de:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801e5e2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 801e5e4:	683b      	ldr	r3, [r7, #0]
 801e5e6:	781b      	ldrb	r3, [r3, #0]
 801e5e8:	f003 030f 	and.w	r3, r3, #15
 801e5ec:	2101      	movs	r1, #1
 801e5ee:	fa01 f303 	lsl.w	r3, r1, r3
 801e5f2:	b29b      	uxth	r3, r3
 801e5f4:	43db      	mvns	r3, r3
 801e5f6:	68f9      	ldr	r1, [r7, #12]
 801e5f8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 801e5fc:	4013      	ands	r3, r2
 801e5fe:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 801e600:	68fb      	ldr	r3, [r7, #12]
 801e602:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801e606:	69da      	ldr	r2, [r3, #28]
 801e608:	683b      	ldr	r3, [r7, #0]
 801e60a:	781b      	ldrb	r3, [r3, #0]
 801e60c:	f003 030f 	and.w	r3, r3, #15
 801e610:	2101      	movs	r1, #1
 801e612:	fa01 f303 	lsl.w	r3, r1, r3
 801e616:	b29b      	uxth	r3, r3
 801e618:	43db      	mvns	r3, r3
 801e61a:	68f9      	ldr	r1, [r7, #12]
 801e61c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 801e620:	4013      	ands	r3, r2
 801e622:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 801e624:	68bb      	ldr	r3, [r7, #8]
 801e626:	015a      	lsls	r2, r3, #5
 801e628:	68fb      	ldr	r3, [r7, #12]
 801e62a:	4413      	add	r3, r2
 801e62c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801e630:	681a      	ldr	r2, [r3, #0]
 801e632:	68bb      	ldr	r3, [r7, #8]
 801e634:	0159      	lsls	r1, r3, #5
 801e636:	68fb      	ldr	r3, [r7, #12]
 801e638:	440b      	add	r3, r1
 801e63a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801e63e:	4619      	mov	r1, r3
 801e640:	4b35      	ldr	r3, [pc, #212]	; (801e718 <USB_DeactivateEndpoint+0x1b0>)
 801e642:	4013      	ands	r3, r2
 801e644:	600b      	str	r3, [r1, #0]
 801e646:	e060      	b.n	801e70a <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 801e648:	68bb      	ldr	r3, [r7, #8]
 801e64a:	015a      	lsls	r2, r3, #5
 801e64c:	68fb      	ldr	r3, [r7, #12]
 801e64e:	4413      	add	r3, r2
 801e650:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801e654:	681b      	ldr	r3, [r3, #0]
 801e656:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 801e65a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 801e65e:	d11f      	bne.n	801e6a0 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 801e660:	68bb      	ldr	r3, [r7, #8]
 801e662:	015a      	lsls	r2, r3, #5
 801e664:	68fb      	ldr	r3, [r7, #12]
 801e666:	4413      	add	r3, r2
 801e668:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801e66c:	681b      	ldr	r3, [r3, #0]
 801e66e:	68ba      	ldr	r2, [r7, #8]
 801e670:	0151      	lsls	r1, r2, #5
 801e672:	68fa      	ldr	r2, [r7, #12]
 801e674:	440a      	add	r2, r1
 801e676:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801e67a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 801e67e:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 801e680:	68bb      	ldr	r3, [r7, #8]
 801e682:	015a      	lsls	r2, r3, #5
 801e684:	68fb      	ldr	r3, [r7, #12]
 801e686:	4413      	add	r3, r2
 801e688:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801e68c:	681b      	ldr	r3, [r3, #0]
 801e68e:	68ba      	ldr	r2, [r7, #8]
 801e690:	0151      	lsls	r1, r2, #5
 801e692:	68fa      	ldr	r2, [r7, #12]
 801e694:	440a      	add	r2, r1
 801e696:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801e69a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 801e69e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 801e6a0:	68fb      	ldr	r3, [r7, #12]
 801e6a2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801e6a6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 801e6a8:	683b      	ldr	r3, [r7, #0]
 801e6aa:	781b      	ldrb	r3, [r3, #0]
 801e6ac:	f003 030f 	and.w	r3, r3, #15
 801e6b0:	2101      	movs	r1, #1
 801e6b2:	fa01 f303 	lsl.w	r3, r1, r3
 801e6b6:	041b      	lsls	r3, r3, #16
 801e6b8:	43db      	mvns	r3, r3
 801e6ba:	68f9      	ldr	r1, [r7, #12]
 801e6bc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 801e6c0:	4013      	ands	r3, r2
 801e6c2:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 801e6c4:	68fb      	ldr	r3, [r7, #12]
 801e6c6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801e6ca:	69da      	ldr	r2, [r3, #28]
 801e6cc:	683b      	ldr	r3, [r7, #0]
 801e6ce:	781b      	ldrb	r3, [r3, #0]
 801e6d0:	f003 030f 	and.w	r3, r3, #15
 801e6d4:	2101      	movs	r1, #1
 801e6d6:	fa01 f303 	lsl.w	r3, r1, r3
 801e6da:	041b      	lsls	r3, r3, #16
 801e6dc:	43db      	mvns	r3, r3
 801e6de:	68f9      	ldr	r1, [r7, #12]
 801e6e0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 801e6e4:	4013      	ands	r3, r2
 801e6e6:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 801e6e8:	68bb      	ldr	r3, [r7, #8]
 801e6ea:	015a      	lsls	r2, r3, #5
 801e6ec:	68fb      	ldr	r3, [r7, #12]
 801e6ee:	4413      	add	r3, r2
 801e6f0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801e6f4:	681a      	ldr	r2, [r3, #0]
 801e6f6:	68bb      	ldr	r3, [r7, #8]
 801e6f8:	0159      	lsls	r1, r3, #5
 801e6fa:	68fb      	ldr	r3, [r7, #12]
 801e6fc:	440b      	add	r3, r1
 801e6fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801e702:	4619      	mov	r1, r3
 801e704:	4b05      	ldr	r3, [pc, #20]	; (801e71c <USB_DeactivateEndpoint+0x1b4>)
 801e706:	4013      	ands	r3, r2
 801e708:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 801e70a:	2300      	movs	r3, #0
}
 801e70c:	4618      	mov	r0, r3
 801e70e:	3714      	adds	r7, #20
 801e710:	46bd      	mov	sp, r7
 801e712:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e716:	4770      	bx	lr
 801e718:	ec337800 	.word	0xec337800
 801e71c:	eff37800 	.word	0xeff37800

0801e720 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 801e720:	b580      	push	{r7, lr}
 801e722:	b08a      	sub	sp, #40	; 0x28
 801e724:	af02      	add	r7, sp, #8
 801e726:	60f8      	str	r0, [r7, #12]
 801e728:	60b9      	str	r1, [r7, #8]
 801e72a:	4613      	mov	r3, r2
 801e72c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801e72e:	68fb      	ldr	r3, [r7, #12]
 801e730:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 801e732:	68bb      	ldr	r3, [r7, #8]
 801e734:	781b      	ldrb	r3, [r3, #0]
 801e736:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 801e738:	68bb      	ldr	r3, [r7, #8]
 801e73a:	785b      	ldrb	r3, [r3, #1]
 801e73c:	2b01      	cmp	r3, #1
 801e73e:	f040 815c 	bne.w	801e9fa <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 801e742:	68bb      	ldr	r3, [r7, #8]
 801e744:	695b      	ldr	r3, [r3, #20]
 801e746:	2b00      	cmp	r3, #0
 801e748:	d132      	bne.n	801e7b0 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 801e74a:	69bb      	ldr	r3, [r7, #24]
 801e74c:	015a      	lsls	r2, r3, #5
 801e74e:	69fb      	ldr	r3, [r7, #28]
 801e750:	4413      	add	r3, r2
 801e752:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801e756:	691b      	ldr	r3, [r3, #16]
 801e758:	69ba      	ldr	r2, [r7, #24]
 801e75a:	0151      	lsls	r1, r2, #5
 801e75c:	69fa      	ldr	r2, [r7, #28]
 801e75e:	440a      	add	r2, r1
 801e760:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801e764:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 801e768:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 801e76c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 801e76e:	69bb      	ldr	r3, [r7, #24]
 801e770:	015a      	lsls	r2, r3, #5
 801e772:	69fb      	ldr	r3, [r7, #28]
 801e774:	4413      	add	r3, r2
 801e776:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801e77a:	691b      	ldr	r3, [r3, #16]
 801e77c:	69ba      	ldr	r2, [r7, #24]
 801e77e:	0151      	lsls	r1, r2, #5
 801e780:	69fa      	ldr	r2, [r7, #28]
 801e782:	440a      	add	r2, r1
 801e784:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801e788:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 801e78c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 801e78e:	69bb      	ldr	r3, [r7, #24]
 801e790:	015a      	lsls	r2, r3, #5
 801e792:	69fb      	ldr	r3, [r7, #28]
 801e794:	4413      	add	r3, r2
 801e796:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801e79a:	691b      	ldr	r3, [r3, #16]
 801e79c:	69ba      	ldr	r2, [r7, #24]
 801e79e:	0151      	lsls	r1, r2, #5
 801e7a0:	69fa      	ldr	r2, [r7, #28]
 801e7a2:	440a      	add	r2, r1
 801e7a4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801e7a8:	0cdb      	lsrs	r3, r3, #19
 801e7aa:	04db      	lsls	r3, r3, #19
 801e7ac:	6113      	str	r3, [r2, #16]
 801e7ae:	e074      	b.n	801e89a <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 801e7b0:	69bb      	ldr	r3, [r7, #24]
 801e7b2:	015a      	lsls	r2, r3, #5
 801e7b4:	69fb      	ldr	r3, [r7, #28]
 801e7b6:	4413      	add	r3, r2
 801e7b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801e7bc:	691b      	ldr	r3, [r3, #16]
 801e7be:	69ba      	ldr	r2, [r7, #24]
 801e7c0:	0151      	lsls	r1, r2, #5
 801e7c2:	69fa      	ldr	r2, [r7, #28]
 801e7c4:	440a      	add	r2, r1
 801e7c6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801e7ca:	0cdb      	lsrs	r3, r3, #19
 801e7cc:	04db      	lsls	r3, r3, #19
 801e7ce:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 801e7d0:	69bb      	ldr	r3, [r7, #24]
 801e7d2:	015a      	lsls	r2, r3, #5
 801e7d4:	69fb      	ldr	r3, [r7, #28]
 801e7d6:	4413      	add	r3, r2
 801e7d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801e7dc:	691b      	ldr	r3, [r3, #16]
 801e7de:	69ba      	ldr	r2, [r7, #24]
 801e7e0:	0151      	lsls	r1, r2, #5
 801e7e2:	69fa      	ldr	r2, [r7, #28]
 801e7e4:	440a      	add	r2, r1
 801e7e6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801e7ea:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 801e7ee:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 801e7f2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 801e7f4:	69bb      	ldr	r3, [r7, #24]
 801e7f6:	015a      	lsls	r2, r3, #5
 801e7f8:	69fb      	ldr	r3, [r7, #28]
 801e7fa:	4413      	add	r3, r2
 801e7fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801e800:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 801e802:	68bb      	ldr	r3, [r7, #8]
 801e804:	6959      	ldr	r1, [r3, #20]
 801e806:	68bb      	ldr	r3, [r7, #8]
 801e808:	689b      	ldr	r3, [r3, #8]
 801e80a:	440b      	add	r3, r1
 801e80c:	1e59      	subs	r1, r3, #1
 801e80e:	68bb      	ldr	r3, [r7, #8]
 801e810:	689b      	ldr	r3, [r3, #8]
 801e812:	fbb1 f3f3 	udiv	r3, r1, r3
 801e816:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 801e818:	4b9d      	ldr	r3, [pc, #628]	; (801ea90 <USB_EPStartXfer+0x370>)
 801e81a:	400b      	ands	r3, r1
 801e81c:	69b9      	ldr	r1, [r7, #24]
 801e81e:	0148      	lsls	r0, r1, #5
 801e820:	69f9      	ldr	r1, [r7, #28]
 801e822:	4401      	add	r1, r0
 801e824:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 801e828:	4313      	orrs	r3, r2
 801e82a:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 801e82c:	69bb      	ldr	r3, [r7, #24]
 801e82e:	015a      	lsls	r2, r3, #5
 801e830:	69fb      	ldr	r3, [r7, #28]
 801e832:	4413      	add	r3, r2
 801e834:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801e838:	691a      	ldr	r2, [r3, #16]
 801e83a:	68bb      	ldr	r3, [r7, #8]
 801e83c:	695b      	ldr	r3, [r3, #20]
 801e83e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 801e842:	69b9      	ldr	r1, [r7, #24]
 801e844:	0148      	lsls	r0, r1, #5
 801e846:	69f9      	ldr	r1, [r7, #28]
 801e848:	4401      	add	r1, r0
 801e84a:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 801e84e:	4313      	orrs	r3, r2
 801e850:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 801e852:	68bb      	ldr	r3, [r7, #8]
 801e854:	78db      	ldrb	r3, [r3, #3]
 801e856:	2b01      	cmp	r3, #1
 801e858:	d11f      	bne.n	801e89a <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 801e85a:	69bb      	ldr	r3, [r7, #24]
 801e85c:	015a      	lsls	r2, r3, #5
 801e85e:	69fb      	ldr	r3, [r7, #28]
 801e860:	4413      	add	r3, r2
 801e862:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801e866:	691b      	ldr	r3, [r3, #16]
 801e868:	69ba      	ldr	r2, [r7, #24]
 801e86a:	0151      	lsls	r1, r2, #5
 801e86c:	69fa      	ldr	r2, [r7, #28]
 801e86e:	440a      	add	r2, r1
 801e870:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801e874:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 801e878:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 801e87a:	69bb      	ldr	r3, [r7, #24]
 801e87c:	015a      	lsls	r2, r3, #5
 801e87e:	69fb      	ldr	r3, [r7, #28]
 801e880:	4413      	add	r3, r2
 801e882:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801e886:	691b      	ldr	r3, [r3, #16]
 801e888:	69ba      	ldr	r2, [r7, #24]
 801e88a:	0151      	lsls	r1, r2, #5
 801e88c:	69fa      	ldr	r2, [r7, #28]
 801e88e:	440a      	add	r2, r1
 801e890:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801e894:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 801e898:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 801e89a:	79fb      	ldrb	r3, [r7, #7]
 801e89c:	2b01      	cmp	r3, #1
 801e89e:	d14b      	bne.n	801e938 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 801e8a0:	68bb      	ldr	r3, [r7, #8]
 801e8a2:	691b      	ldr	r3, [r3, #16]
 801e8a4:	2b00      	cmp	r3, #0
 801e8a6:	d009      	beq.n	801e8bc <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 801e8a8:	69bb      	ldr	r3, [r7, #24]
 801e8aa:	015a      	lsls	r2, r3, #5
 801e8ac:	69fb      	ldr	r3, [r7, #28]
 801e8ae:	4413      	add	r3, r2
 801e8b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801e8b4:	461a      	mov	r2, r3
 801e8b6:	68bb      	ldr	r3, [r7, #8]
 801e8b8:	691b      	ldr	r3, [r3, #16]
 801e8ba:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 801e8bc:	68bb      	ldr	r3, [r7, #8]
 801e8be:	78db      	ldrb	r3, [r3, #3]
 801e8c0:	2b01      	cmp	r3, #1
 801e8c2:	d128      	bne.n	801e916 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 801e8c4:	69fb      	ldr	r3, [r7, #28]
 801e8c6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801e8ca:	689b      	ldr	r3, [r3, #8]
 801e8cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801e8d0:	2b00      	cmp	r3, #0
 801e8d2:	d110      	bne.n	801e8f6 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 801e8d4:	69bb      	ldr	r3, [r7, #24]
 801e8d6:	015a      	lsls	r2, r3, #5
 801e8d8:	69fb      	ldr	r3, [r7, #28]
 801e8da:	4413      	add	r3, r2
 801e8dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801e8e0:	681b      	ldr	r3, [r3, #0]
 801e8e2:	69ba      	ldr	r2, [r7, #24]
 801e8e4:	0151      	lsls	r1, r2, #5
 801e8e6:	69fa      	ldr	r2, [r7, #28]
 801e8e8:	440a      	add	r2, r1
 801e8ea:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801e8ee:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 801e8f2:	6013      	str	r3, [r2, #0]
 801e8f4:	e00f      	b.n	801e916 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 801e8f6:	69bb      	ldr	r3, [r7, #24]
 801e8f8:	015a      	lsls	r2, r3, #5
 801e8fa:	69fb      	ldr	r3, [r7, #28]
 801e8fc:	4413      	add	r3, r2
 801e8fe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801e902:	681b      	ldr	r3, [r3, #0]
 801e904:	69ba      	ldr	r2, [r7, #24]
 801e906:	0151      	lsls	r1, r2, #5
 801e908:	69fa      	ldr	r2, [r7, #28]
 801e90a:	440a      	add	r2, r1
 801e90c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801e910:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 801e914:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 801e916:	69bb      	ldr	r3, [r7, #24]
 801e918:	015a      	lsls	r2, r3, #5
 801e91a:	69fb      	ldr	r3, [r7, #28]
 801e91c:	4413      	add	r3, r2
 801e91e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801e922:	681b      	ldr	r3, [r3, #0]
 801e924:	69ba      	ldr	r2, [r7, #24]
 801e926:	0151      	lsls	r1, r2, #5
 801e928:	69fa      	ldr	r2, [r7, #28]
 801e92a:	440a      	add	r2, r1
 801e92c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801e930:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 801e934:	6013      	str	r3, [r2, #0]
 801e936:	e12f      	b.n	801eb98 <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 801e938:	69bb      	ldr	r3, [r7, #24]
 801e93a:	015a      	lsls	r2, r3, #5
 801e93c:	69fb      	ldr	r3, [r7, #28]
 801e93e:	4413      	add	r3, r2
 801e940:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801e944:	681b      	ldr	r3, [r3, #0]
 801e946:	69ba      	ldr	r2, [r7, #24]
 801e948:	0151      	lsls	r1, r2, #5
 801e94a:	69fa      	ldr	r2, [r7, #28]
 801e94c:	440a      	add	r2, r1
 801e94e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801e952:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 801e956:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 801e958:	68bb      	ldr	r3, [r7, #8]
 801e95a:	78db      	ldrb	r3, [r3, #3]
 801e95c:	2b01      	cmp	r3, #1
 801e95e:	d015      	beq.n	801e98c <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 801e960:	68bb      	ldr	r3, [r7, #8]
 801e962:	695b      	ldr	r3, [r3, #20]
 801e964:	2b00      	cmp	r3, #0
 801e966:	f000 8117 	beq.w	801eb98 <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 801e96a:	69fb      	ldr	r3, [r7, #28]
 801e96c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801e970:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 801e972:	68bb      	ldr	r3, [r7, #8]
 801e974:	781b      	ldrb	r3, [r3, #0]
 801e976:	f003 030f 	and.w	r3, r3, #15
 801e97a:	2101      	movs	r1, #1
 801e97c:	fa01 f303 	lsl.w	r3, r1, r3
 801e980:	69f9      	ldr	r1, [r7, #28]
 801e982:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 801e986:	4313      	orrs	r3, r2
 801e988:	634b      	str	r3, [r1, #52]	; 0x34
 801e98a:	e105      	b.n	801eb98 <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 801e98c:	69fb      	ldr	r3, [r7, #28]
 801e98e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801e992:	689b      	ldr	r3, [r3, #8]
 801e994:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801e998:	2b00      	cmp	r3, #0
 801e99a:	d110      	bne.n	801e9be <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 801e99c:	69bb      	ldr	r3, [r7, #24]
 801e99e:	015a      	lsls	r2, r3, #5
 801e9a0:	69fb      	ldr	r3, [r7, #28]
 801e9a2:	4413      	add	r3, r2
 801e9a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801e9a8:	681b      	ldr	r3, [r3, #0]
 801e9aa:	69ba      	ldr	r2, [r7, #24]
 801e9ac:	0151      	lsls	r1, r2, #5
 801e9ae:	69fa      	ldr	r2, [r7, #28]
 801e9b0:	440a      	add	r2, r1
 801e9b2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801e9b6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 801e9ba:	6013      	str	r3, [r2, #0]
 801e9bc:	e00f      	b.n	801e9de <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 801e9be:	69bb      	ldr	r3, [r7, #24]
 801e9c0:	015a      	lsls	r2, r3, #5
 801e9c2:	69fb      	ldr	r3, [r7, #28]
 801e9c4:	4413      	add	r3, r2
 801e9c6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801e9ca:	681b      	ldr	r3, [r3, #0]
 801e9cc:	69ba      	ldr	r2, [r7, #24]
 801e9ce:	0151      	lsls	r1, r2, #5
 801e9d0:	69fa      	ldr	r2, [r7, #28]
 801e9d2:	440a      	add	r2, r1
 801e9d4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801e9d8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 801e9dc:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 801e9de:	68bb      	ldr	r3, [r7, #8]
 801e9e0:	68d9      	ldr	r1, [r3, #12]
 801e9e2:	68bb      	ldr	r3, [r7, #8]
 801e9e4:	781a      	ldrb	r2, [r3, #0]
 801e9e6:	68bb      	ldr	r3, [r7, #8]
 801e9e8:	695b      	ldr	r3, [r3, #20]
 801e9ea:	b298      	uxth	r0, r3
 801e9ec:	79fb      	ldrb	r3, [r7, #7]
 801e9ee:	9300      	str	r3, [sp, #0]
 801e9f0:	4603      	mov	r3, r0
 801e9f2:	68f8      	ldr	r0, [r7, #12]
 801e9f4:	f000 fa2b 	bl	801ee4e <USB_WritePacket>
 801e9f8:	e0ce      	b.n	801eb98 <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 801e9fa:	69bb      	ldr	r3, [r7, #24]
 801e9fc:	015a      	lsls	r2, r3, #5
 801e9fe:	69fb      	ldr	r3, [r7, #28]
 801ea00:	4413      	add	r3, r2
 801ea02:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801ea06:	691b      	ldr	r3, [r3, #16]
 801ea08:	69ba      	ldr	r2, [r7, #24]
 801ea0a:	0151      	lsls	r1, r2, #5
 801ea0c:	69fa      	ldr	r2, [r7, #28]
 801ea0e:	440a      	add	r2, r1
 801ea10:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801ea14:	0cdb      	lsrs	r3, r3, #19
 801ea16:	04db      	lsls	r3, r3, #19
 801ea18:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 801ea1a:	69bb      	ldr	r3, [r7, #24]
 801ea1c:	015a      	lsls	r2, r3, #5
 801ea1e:	69fb      	ldr	r3, [r7, #28]
 801ea20:	4413      	add	r3, r2
 801ea22:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801ea26:	691b      	ldr	r3, [r3, #16]
 801ea28:	69ba      	ldr	r2, [r7, #24]
 801ea2a:	0151      	lsls	r1, r2, #5
 801ea2c:	69fa      	ldr	r2, [r7, #28]
 801ea2e:	440a      	add	r2, r1
 801ea30:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801ea34:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 801ea38:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 801ea3c:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 801ea3e:	68bb      	ldr	r3, [r7, #8]
 801ea40:	695b      	ldr	r3, [r3, #20]
 801ea42:	2b00      	cmp	r3, #0
 801ea44:	d126      	bne.n	801ea94 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 801ea46:	69bb      	ldr	r3, [r7, #24]
 801ea48:	015a      	lsls	r2, r3, #5
 801ea4a:	69fb      	ldr	r3, [r7, #28]
 801ea4c:	4413      	add	r3, r2
 801ea4e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801ea52:	691a      	ldr	r2, [r3, #16]
 801ea54:	68bb      	ldr	r3, [r7, #8]
 801ea56:	689b      	ldr	r3, [r3, #8]
 801ea58:	f3c3 0312 	ubfx	r3, r3, #0, #19
 801ea5c:	69b9      	ldr	r1, [r7, #24]
 801ea5e:	0148      	lsls	r0, r1, #5
 801ea60:	69f9      	ldr	r1, [r7, #28]
 801ea62:	4401      	add	r1, r0
 801ea64:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 801ea68:	4313      	orrs	r3, r2
 801ea6a:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 801ea6c:	69bb      	ldr	r3, [r7, #24]
 801ea6e:	015a      	lsls	r2, r3, #5
 801ea70:	69fb      	ldr	r3, [r7, #28]
 801ea72:	4413      	add	r3, r2
 801ea74:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801ea78:	691b      	ldr	r3, [r3, #16]
 801ea7a:	69ba      	ldr	r2, [r7, #24]
 801ea7c:	0151      	lsls	r1, r2, #5
 801ea7e:	69fa      	ldr	r2, [r7, #28]
 801ea80:	440a      	add	r2, r1
 801ea82:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801ea86:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 801ea8a:	6113      	str	r3, [r2, #16]
 801ea8c:	e036      	b.n	801eafc <USB_EPStartXfer+0x3dc>
 801ea8e:	bf00      	nop
 801ea90:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 801ea94:	68bb      	ldr	r3, [r7, #8]
 801ea96:	695a      	ldr	r2, [r3, #20]
 801ea98:	68bb      	ldr	r3, [r7, #8]
 801ea9a:	689b      	ldr	r3, [r3, #8]
 801ea9c:	4413      	add	r3, r2
 801ea9e:	1e5a      	subs	r2, r3, #1
 801eaa0:	68bb      	ldr	r3, [r7, #8]
 801eaa2:	689b      	ldr	r3, [r3, #8]
 801eaa4:	fbb2 f3f3 	udiv	r3, r2, r3
 801eaa8:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 801eaaa:	69bb      	ldr	r3, [r7, #24]
 801eaac:	015a      	lsls	r2, r3, #5
 801eaae:	69fb      	ldr	r3, [r7, #28]
 801eab0:	4413      	add	r3, r2
 801eab2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801eab6:	691a      	ldr	r2, [r3, #16]
 801eab8:	8afb      	ldrh	r3, [r7, #22]
 801eaba:	04d9      	lsls	r1, r3, #19
 801eabc:	4b39      	ldr	r3, [pc, #228]	; (801eba4 <USB_EPStartXfer+0x484>)
 801eabe:	400b      	ands	r3, r1
 801eac0:	69b9      	ldr	r1, [r7, #24]
 801eac2:	0148      	lsls	r0, r1, #5
 801eac4:	69f9      	ldr	r1, [r7, #28]
 801eac6:	4401      	add	r1, r0
 801eac8:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 801eacc:	4313      	orrs	r3, r2
 801eace:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 801ead0:	69bb      	ldr	r3, [r7, #24]
 801ead2:	015a      	lsls	r2, r3, #5
 801ead4:	69fb      	ldr	r3, [r7, #28]
 801ead6:	4413      	add	r3, r2
 801ead8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801eadc:	691a      	ldr	r2, [r3, #16]
 801eade:	68bb      	ldr	r3, [r7, #8]
 801eae0:	689b      	ldr	r3, [r3, #8]
 801eae2:	8af9      	ldrh	r1, [r7, #22]
 801eae4:	fb01 f303 	mul.w	r3, r1, r3
 801eae8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 801eaec:	69b9      	ldr	r1, [r7, #24]
 801eaee:	0148      	lsls	r0, r1, #5
 801eaf0:	69f9      	ldr	r1, [r7, #28]
 801eaf2:	4401      	add	r1, r0
 801eaf4:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 801eaf8:	4313      	orrs	r3, r2
 801eafa:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 801eafc:	79fb      	ldrb	r3, [r7, #7]
 801eafe:	2b01      	cmp	r3, #1
 801eb00:	d10d      	bne.n	801eb1e <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 801eb02:	68bb      	ldr	r3, [r7, #8]
 801eb04:	68db      	ldr	r3, [r3, #12]
 801eb06:	2b00      	cmp	r3, #0
 801eb08:	d009      	beq.n	801eb1e <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 801eb0a:	68bb      	ldr	r3, [r7, #8]
 801eb0c:	68d9      	ldr	r1, [r3, #12]
 801eb0e:	69bb      	ldr	r3, [r7, #24]
 801eb10:	015a      	lsls	r2, r3, #5
 801eb12:	69fb      	ldr	r3, [r7, #28]
 801eb14:	4413      	add	r3, r2
 801eb16:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801eb1a:	460a      	mov	r2, r1
 801eb1c:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 801eb1e:	68bb      	ldr	r3, [r7, #8]
 801eb20:	78db      	ldrb	r3, [r3, #3]
 801eb22:	2b01      	cmp	r3, #1
 801eb24:	d128      	bne.n	801eb78 <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 801eb26:	69fb      	ldr	r3, [r7, #28]
 801eb28:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801eb2c:	689b      	ldr	r3, [r3, #8]
 801eb2e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801eb32:	2b00      	cmp	r3, #0
 801eb34:	d110      	bne.n	801eb58 <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 801eb36:	69bb      	ldr	r3, [r7, #24]
 801eb38:	015a      	lsls	r2, r3, #5
 801eb3a:	69fb      	ldr	r3, [r7, #28]
 801eb3c:	4413      	add	r3, r2
 801eb3e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801eb42:	681b      	ldr	r3, [r3, #0]
 801eb44:	69ba      	ldr	r2, [r7, #24]
 801eb46:	0151      	lsls	r1, r2, #5
 801eb48:	69fa      	ldr	r2, [r7, #28]
 801eb4a:	440a      	add	r2, r1
 801eb4c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801eb50:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 801eb54:	6013      	str	r3, [r2, #0]
 801eb56:	e00f      	b.n	801eb78 <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 801eb58:	69bb      	ldr	r3, [r7, #24]
 801eb5a:	015a      	lsls	r2, r3, #5
 801eb5c:	69fb      	ldr	r3, [r7, #28]
 801eb5e:	4413      	add	r3, r2
 801eb60:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801eb64:	681b      	ldr	r3, [r3, #0]
 801eb66:	69ba      	ldr	r2, [r7, #24]
 801eb68:	0151      	lsls	r1, r2, #5
 801eb6a:	69fa      	ldr	r2, [r7, #28]
 801eb6c:	440a      	add	r2, r1
 801eb6e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801eb72:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 801eb76:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 801eb78:	69bb      	ldr	r3, [r7, #24]
 801eb7a:	015a      	lsls	r2, r3, #5
 801eb7c:	69fb      	ldr	r3, [r7, #28]
 801eb7e:	4413      	add	r3, r2
 801eb80:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801eb84:	681b      	ldr	r3, [r3, #0]
 801eb86:	69ba      	ldr	r2, [r7, #24]
 801eb88:	0151      	lsls	r1, r2, #5
 801eb8a:	69fa      	ldr	r2, [r7, #28]
 801eb8c:	440a      	add	r2, r1
 801eb8e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801eb92:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 801eb96:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 801eb98:	2300      	movs	r3, #0
}
 801eb9a:	4618      	mov	r0, r3
 801eb9c:	3720      	adds	r7, #32
 801eb9e:	46bd      	mov	sp, r7
 801eba0:	bd80      	pop	{r7, pc}
 801eba2:	bf00      	nop
 801eba4:	1ff80000 	.word	0x1ff80000

0801eba8 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 801eba8:	b480      	push	{r7}
 801ebaa:	b087      	sub	sp, #28
 801ebac:	af00      	add	r7, sp, #0
 801ebae:	60f8      	str	r0, [r7, #12]
 801ebb0:	60b9      	str	r1, [r7, #8]
 801ebb2:	4613      	mov	r3, r2
 801ebb4:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801ebb6:	68fb      	ldr	r3, [r7, #12]
 801ebb8:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 801ebba:	68bb      	ldr	r3, [r7, #8]
 801ebbc:	781b      	ldrb	r3, [r3, #0]
 801ebbe:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 801ebc0:	68bb      	ldr	r3, [r7, #8]
 801ebc2:	785b      	ldrb	r3, [r3, #1]
 801ebc4:	2b01      	cmp	r3, #1
 801ebc6:	f040 80cd 	bne.w	801ed64 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 801ebca:	68bb      	ldr	r3, [r7, #8]
 801ebcc:	695b      	ldr	r3, [r3, #20]
 801ebce:	2b00      	cmp	r3, #0
 801ebd0:	d132      	bne.n	801ec38 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 801ebd2:	693b      	ldr	r3, [r7, #16]
 801ebd4:	015a      	lsls	r2, r3, #5
 801ebd6:	697b      	ldr	r3, [r7, #20]
 801ebd8:	4413      	add	r3, r2
 801ebda:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801ebde:	691b      	ldr	r3, [r3, #16]
 801ebe0:	693a      	ldr	r2, [r7, #16]
 801ebe2:	0151      	lsls	r1, r2, #5
 801ebe4:	697a      	ldr	r2, [r7, #20]
 801ebe6:	440a      	add	r2, r1
 801ebe8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801ebec:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 801ebf0:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 801ebf4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 801ebf6:	693b      	ldr	r3, [r7, #16]
 801ebf8:	015a      	lsls	r2, r3, #5
 801ebfa:	697b      	ldr	r3, [r7, #20]
 801ebfc:	4413      	add	r3, r2
 801ebfe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801ec02:	691b      	ldr	r3, [r3, #16]
 801ec04:	693a      	ldr	r2, [r7, #16]
 801ec06:	0151      	lsls	r1, r2, #5
 801ec08:	697a      	ldr	r2, [r7, #20]
 801ec0a:	440a      	add	r2, r1
 801ec0c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801ec10:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 801ec14:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 801ec16:	693b      	ldr	r3, [r7, #16]
 801ec18:	015a      	lsls	r2, r3, #5
 801ec1a:	697b      	ldr	r3, [r7, #20]
 801ec1c:	4413      	add	r3, r2
 801ec1e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801ec22:	691b      	ldr	r3, [r3, #16]
 801ec24:	693a      	ldr	r2, [r7, #16]
 801ec26:	0151      	lsls	r1, r2, #5
 801ec28:	697a      	ldr	r2, [r7, #20]
 801ec2a:	440a      	add	r2, r1
 801ec2c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801ec30:	0cdb      	lsrs	r3, r3, #19
 801ec32:	04db      	lsls	r3, r3, #19
 801ec34:	6113      	str	r3, [r2, #16]
 801ec36:	e04e      	b.n	801ecd6 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 801ec38:	693b      	ldr	r3, [r7, #16]
 801ec3a:	015a      	lsls	r2, r3, #5
 801ec3c:	697b      	ldr	r3, [r7, #20]
 801ec3e:	4413      	add	r3, r2
 801ec40:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801ec44:	691b      	ldr	r3, [r3, #16]
 801ec46:	693a      	ldr	r2, [r7, #16]
 801ec48:	0151      	lsls	r1, r2, #5
 801ec4a:	697a      	ldr	r2, [r7, #20]
 801ec4c:	440a      	add	r2, r1
 801ec4e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801ec52:	0cdb      	lsrs	r3, r3, #19
 801ec54:	04db      	lsls	r3, r3, #19
 801ec56:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 801ec58:	693b      	ldr	r3, [r7, #16]
 801ec5a:	015a      	lsls	r2, r3, #5
 801ec5c:	697b      	ldr	r3, [r7, #20]
 801ec5e:	4413      	add	r3, r2
 801ec60:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801ec64:	691b      	ldr	r3, [r3, #16]
 801ec66:	693a      	ldr	r2, [r7, #16]
 801ec68:	0151      	lsls	r1, r2, #5
 801ec6a:	697a      	ldr	r2, [r7, #20]
 801ec6c:	440a      	add	r2, r1
 801ec6e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801ec72:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 801ec76:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 801ec7a:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 801ec7c:	68bb      	ldr	r3, [r7, #8]
 801ec7e:	695a      	ldr	r2, [r3, #20]
 801ec80:	68bb      	ldr	r3, [r7, #8]
 801ec82:	689b      	ldr	r3, [r3, #8]
 801ec84:	429a      	cmp	r2, r3
 801ec86:	d903      	bls.n	801ec90 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 801ec88:	68bb      	ldr	r3, [r7, #8]
 801ec8a:	689a      	ldr	r2, [r3, #8]
 801ec8c:	68bb      	ldr	r3, [r7, #8]
 801ec8e:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 801ec90:	693b      	ldr	r3, [r7, #16]
 801ec92:	015a      	lsls	r2, r3, #5
 801ec94:	697b      	ldr	r3, [r7, #20]
 801ec96:	4413      	add	r3, r2
 801ec98:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801ec9c:	691b      	ldr	r3, [r3, #16]
 801ec9e:	693a      	ldr	r2, [r7, #16]
 801eca0:	0151      	lsls	r1, r2, #5
 801eca2:	697a      	ldr	r2, [r7, #20]
 801eca4:	440a      	add	r2, r1
 801eca6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801ecaa:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 801ecae:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 801ecb0:	693b      	ldr	r3, [r7, #16]
 801ecb2:	015a      	lsls	r2, r3, #5
 801ecb4:	697b      	ldr	r3, [r7, #20]
 801ecb6:	4413      	add	r3, r2
 801ecb8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801ecbc:	691a      	ldr	r2, [r3, #16]
 801ecbe:	68bb      	ldr	r3, [r7, #8]
 801ecc0:	695b      	ldr	r3, [r3, #20]
 801ecc2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 801ecc6:	6939      	ldr	r1, [r7, #16]
 801ecc8:	0148      	lsls	r0, r1, #5
 801ecca:	6979      	ldr	r1, [r7, #20]
 801eccc:	4401      	add	r1, r0
 801ecce:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 801ecd2:	4313      	orrs	r3, r2
 801ecd4:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 801ecd6:	79fb      	ldrb	r3, [r7, #7]
 801ecd8:	2b01      	cmp	r3, #1
 801ecda:	d11e      	bne.n	801ed1a <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 801ecdc:	68bb      	ldr	r3, [r7, #8]
 801ecde:	691b      	ldr	r3, [r3, #16]
 801ece0:	2b00      	cmp	r3, #0
 801ece2:	d009      	beq.n	801ecf8 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 801ece4:	693b      	ldr	r3, [r7, #16]
 801ece6:	015a      	lsls	r2, r3, #5
 801ece8:	697b      	ldr	r3, [r7, #20]
 801ecea:	4413      	add	r3, r2
 801ecec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801ecf0:	461a      	mov	r2, r3
 801ecf2:	68bb      	ldr	r3, [r7, #8]
 801ecf4:	691b      	ldr	r3, [r3, #16]
 801ecf6:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 801ecf8:	693b      	ldr	r3, [r7, #16]
 801ecfa:	015a      	lsls	r2, r3, #5
 801ecfc:	697b      	ldr	r3, [r7, #20]
 801ecfe:	4413      	add	r3, r2
 801ed00:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801ed04:	681b      	ldr	r3, [r3, #0]
 801ed06:	693a      	ldr	r2, [r7, #16]
 801ed08:	0151      	lsls	r1, r2, #5
 801ed0a:	697a      	ldr	r2, [r7, #20]
 801ed0c:	440a      	add	r2, r1
 801ed0e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801ed12:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 801ed16:	6013      	str	r3, [r2, #0]
 801ed18:	e092      	b.n	801ee40 <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 801ed1a:	693b      	ldr	r3, [r7, #16]
 801ed1c:	015a      	lsls	r2, r3, #5
 801ed1e:	697b      	ldr	r3, [r7, #20]
 801ed20:	4413      	add	r3, r2
 801ed22:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801ed26:	681b      	ldr	r3, [r3, #0]
 801ed28:	693a      	ldr	r2, [r7, #16]
 801ed2a:	0151      	lsls	r1, r2, #5
 801ed2c:	697a      	ldr	r2, [r7, #20]
 801ed2e:	440a      	add	r2, r1
 801ed30:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801ed34:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 801ed38:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 801ed3a:	68bb      	ldr	r3, [r7, #8]
 801ed3c:	695b      	ldr	r3, [r3, #20]
 801ed3e:	2b00      	cmp	r3, #0
 801ed40:	d07e      	beq.n	801ee40 <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 801ed42:	697b      	ldr	r3, [r7, #20]
 801ed44:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801ed48:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 801ed4a:	68bb      	ldr	r3, [r7, #8]
 801ed4c:	781b      	ldrb	r3, [r3, #0]
 801ed4e:	f003 030f 	and.w	r3, r3, #15
 801ed52:	2101      	movs	r1, #1
 801ed54:	fa01 f303 	lsl.w	r3, r1, r3
 801ed58:	6979      	ldr	r1, [r7, #20]
 801ed5a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 801ed5e:	4313      	orrs	r3, r2
 801ed60:	634b      	str	r3, [r1, #52]	; 0x34
 801ed62:	e06d      	b.n	801ee40 <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 801ed64:	693b      	ldr	r3, [r7, #16]
 801ed66:	015a      	lsls	r2, r3, #5
 801ed68:	697b      	ldr	r3, [r7, #20]
 801ed6a:	4413      	add	r3, r2
 801ed6c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801ed70:	691b      	ldr	r3, [r3, #16]
 801ed72:	693a      	ldr	r2, [r7, #16]
 801ed74:	0151      	lsls	r1, r2, #5
 801ed76:	697a      	ldr	r2, [r7, #20]
 801ed78:	440a      	add	r2, r1
 801ed7a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801ed7e:	0cdb      	lsrs	r3, r3, #19
 801ed80:	04db      	lsls	r3, r3, #19
 801ed82:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 801ed84:	693b      	ldr	r3, [r7, #16]
 801ed86:	015a      	lsls	r2, r3, #5
 801ed88:	697b      	ldr	r3, [r7, #20]
 801ed8a:	4413      	add	r3, r2
 801ed8c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801ed90:	691b      	ldr	r3, [r3, #16]
 801ed92:	693a      	ldr	r2, [r7, #16]
 801ed94:	0151      	lsls	r1, r2, #5
 801ed96:	697a      	ldr	r2, [r7, #20]
 801ed98:	440a      	add	r2, r1
 801ed9a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801ed9e:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 801eda2:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 801eda6:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 801eda8:	68bb      	ldr	r3, [r7, #8]
 801edaa:	695b      	ldr	r3, [r3, #20]
 801edac:	2b00      	cmp	r3, #0
 801edae:	d003      	beq.n	801edb8 <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 801edb0:	68bb      	ldr	r3, [r7, #8]
 801edb2:	689a      	ldr	r2, [r3, #8]
 801edb4:	68bb      	ldr	r3, [r7, #8]
 801edb6:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 801edb8:	693b      	ldr	r3, [r7, #16]
 801edba:	015a      	lsls	r2, r3, #5
 801edbc:	697b      	ldr	r3, [r7, #20]
 801edbe:	4413      	add	r3, r2
 801edc0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801edc4:	691b      	ldr	r3, [r3, #16]
 801edc6:	693a      	ldr	r2, [r7, #16]
 801edc8:	0151      	lsls	r1, r2, #5
 801edca:	697a      	ldr	r2, [r7, #20]
 801edcc:	440a      	add	r2, r1
 801edce:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801edd2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 801edd6:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 801edd8:	693b      	ldr	r3, [r7, #16]
 801edda:	015a      	lsls	r2, r3, #5
 801eddc:	697b      	ldr	r3, [r7, #20]
 801edde:	4413      	add	r3, r2
 801ede0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801ede4:	691a      	ldr	r2, [r3, #16]
 801ede6:	68bb      	ldr	r3, [r7, #8]
 801ede8:	689b      	ldr	r3, [r3, #8]
 801edea:	f3c3 0312 	ubfx	r3, r3, #0, #19
 801edee:	6939      	ldr	r1, [r7, #16]
 801edf0:	0148      	lsls	r0, r1, #5
 801edf2:	6979      	ldr	r1, [r7, #20]
 801edf4:	4401      	add	r1, r0
 801edf6:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 801edfa:	4313      	orrs	r3, r2
 801edfc:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 801edfe:	79fb      	ldrb	r3, [r7, #7]
 801ee00:	2b01      	cmp	r3, #1
 801ee02:	d10d      	bne.n	801ee20 <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 801ee04:	68bb      	ldr	r3, [r7, #8]
 801ee06:	68db      	ldr	r3, [r3, #12]
 801ee08:	2b00      	cmp	r3, #0
 801ee0a:	d009      	beq.n	801ee20 <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 801ee0c:	68bb      	ldr	r3, [r7, #8]
 801ee0e:	68d9      	ldr	r1, [r3, #12]
 801ee10:	693b      	ldr	r3, [r7, #16]
 801ee12:	015a      	lsls	r2, r3, #5
 801ee14:	697b      	ldr	r3, [r7, #20]
 801ee16:	4413      	add	r3, r2
 801ee18:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801ee1c:	460a      	mov	r2, r1
 801ee1e:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 801ee20:	693b      	ldr	r3, [r7, #16]
 801ee22:	015a      	lsls	r2, r3, #5
 801ee24:	697b      	ldr	r3, [r7, #20]
 801ee26:	4413      	add	r3, r2
 801ee28:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801ee2c:	681b      	ldr	r3, [r3, #0]
 801ee2e:	693a      	ldr	r2, [r7, #16]
 801ee30:	0151      	lsls	r1, r2, #5
 801ee32:	697a      	ldr	r2, [r7, #20]
 801ee34:	440a      	add	r2, r1
 801ee36:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801ee3a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 801ee3e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 801ee40:	2300      	movs	r3, #0
}
 801ee42:	4618      	mov	r0, r3
 801ee44:	371c      	adds	r7, #28
 801ee46:	46bd      	mov	sp, r7
 801ee48:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ee4c:	4770      	bx	lr

0801ee4e <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 801ee4e:	b480      	push	{r7}
 801ee50:	b089      	sub	sp, #36	; 0x24
 801ee52:	af00      	add	r7, sp, #0
 801ee54:	60f8      	str	r0, [r7, #12]
 801ee56:	60b9      	str	r1, [r7, #8]
 801ee58:	4611      	mov	r1, r2
 801ee5a:	461a      	mov	r2, r3
 801ee5c:	460b      	mov	r3, r1
 801ee5e:	71fb      	strb	r3, [r7, #7]
 801ee60:	4613      	mov	r3, r2
 801ee62:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801ee64:	68fb      	ldr	r3, [r7, #12]
 801ee66:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 801ee68:	68bb      	ldr	r3, [r7, #8]
 801ee6a:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 801ee6c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 801ee70:	2b00      	cmp	r3, #0
 801ee72:	d123      	bne.n	801eebc <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 801ee74:	88bb      	ldrh	r3, [r7, #4]
 801ee76:	3303      	adds	r3, #3
 801ee78:	089b      	lsrs	r3, r3, #2
 801ee7a:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 801ee7c:	2300      	movs	r3, #0
 801ee7e:	61bb      	str	r3, [r7, #24]
 801ee80:	e018      	b.n	801eeb4 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 801ee82:	79fb      	ldrb	r3, [r7, #7]
 801ee84:	031a      	lsls	r2, r3, #12
 801ee86:	697b      	ldr	r3, [r7, #20]
 801ee88:	4413      	add	r3, r2
 801ee8a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801ee8e:	461a      	mov	r2, r3
 801ee90:	69fb      	ldr	r3, [r7, #28]
 801ee92:	681b      	ldr	r3, [r3, #0]
 801ee94:	6013      	str	r3, [r2, #0]
      pSrc++;
 801ee96:	69fb      	ldr	r3, [r7, #28]
 801ee98:	3301      	adds	r3, #1
 801ee9a:	61fb      	str	r3, [r7, #28]
      pSrc++;
 801ee9c:	69fb      	ldr	r3, [r7, #28]
 801ee9e:	3301      	adds	r3, #1
 801eea0:	61fb      	str	r3, [r7, #28]
      pSrc++;
 801eea2:	69fb      	ldr	r3, [r7, #28]
 801eea4:	3301      	adds	r3, #1
 801eea6:	61fb      	str	r3, [r7, #28]
      pSrc++;
 801eea8:	69fb      	ldr	r3, [r7, #28]
 801eeaa:	3301      	adds	r3, #1
 801eeac:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 801eeae:	69bb      	ldr	r3, [r7, #24]
 801eeb0:	3301      	adds	r3, #1
 801eeb2:	61bb      	str	r3, [r7, #24]
 801eeb4:	69ba      	ldr	r2, [r7, #24]
 801eeb6:	693b      	ldr	r3, [r7, #16]
 801eeb8:	429a      	cmp	r2, r3
 801eeba:	d3e2      	bcc.n	801ee82 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 801eebc:	2300      	movs	r3, #0
}
 801eebe:	4618      	mov	r0, r3
 801eec0:	3724      	adds	r7, #36	; 0x24
 801eec2:	46bd      	mov	sp, r7
 801eec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 801eec8:	4770      	bx	lr

0801eeca <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 801eeca:	b480      	push	{r7}
 801eecc:	b08b      	sub	sp, #44	; 0x2c
 801eece:	af00      	add	r7, sp, #0
 801eed0:	60f8      	str	r0, [r7, #12]
 801eed2:	60b9      	str	r1, [r7, #8]
 801eed4:	4613      	mov	r3, r2
 801eed6:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801eed8:	68fb      	ldr	r3, [r7, #12]
 801eeda:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 801eedc:	68bb      	ldr	r3, [r7, #8]
 801eede:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 801eee0:	88fb      	ldrh	r3, [r7, #6]
 801eee2:	089b      	lsrs	r3, r3, #2
 801eee4:	b29b      	uxth	r3, r3
 801eee6:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 801eee8:	88fb      	ldrh	r3, [r7, #6]
 801eeea:	f003 0303 	and.w	r3, r3, #3
 801eeee:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 801eef0:	2300      	movs	r3, #0
 801eef2:	623b      	str	r3, [r7, #32]
 801eef4:	e014      	b.n	801ef20 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 801eef6:	69bb      	ldr	r3, [r7, #24]
 801eef8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801eefc:	681a      	ldr	r2, [r3, #0]
 801eefe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ef00:	601a      	str	r2, [r3, #0]
    pDest++;
 801ef02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ef04:	3301      	adds	r3, #1
 801ef06:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 801ef08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ef0a:	3301      	adds	r3, #1
 801ef0c:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 801ef0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ef10:	3301      	adds	r3, #1
 801ef12:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 801ef14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ef16:	3301      	adds	r3, #1
 801ef18:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 801ef1a:	6a3b      	ldr	r3, [r7, #32]
 801ef1c:	3301      	adds	r3, #1
 801ef1e:	623b      	str	r3, [r7, #32]
 801ef20:	6a3a      	ldr	r2, [r7, #32]
 801ef22:	697b      	ldr	r3, [r7, #20]
 801ef24:	429a      	cmp	r2, r3
 801ef26:	d3e6      	bcc.n	801eef6 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 801ef28:	8bfb      	ldrh	r3, [r7, #30]
 801ef2a:	2b00      	cmp	r3, #0
 801ef2c:	d01e      	beq.n	801ef6c <USB_ReadPacket+0xa2>
  {
    i = 0U;
 801ef2e:	2300      	movs	r3, #0
 801ef30:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 801ef32:	69bb      	ldr	r3, [r7, #24]
 801ef34:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801ef38:	461a      	mov	r2, r3
 801ef3a:	f107 0310 	add.w	r3, r7, #16
 801ef3e:	6812      	ldr	r2, [r2, #0]
 801ef40:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 801ef42:	693a      	ldr	r2, [r7, #16]
 801ef44:	6a3b      	ldr	r3, [r7, #32]
 801ef46:	b2db      	uxtb	r3, r3
 801ef48:	00db      	lsls	r3, r3, #3
 801ef4a:	fa22 f303 	lsr.w	r3, r2, r3
 801ef4e:	b2da      	uxtb	r2, r3
 801ef50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ef52:	701a      	strb	r2, [r3, #0]
      i++;
 801ef54:	6a3b      	ldr	r3, [r7, #32]
 801ef56:	3301      	adds	r3, #1
 801ef58:	623b      	str	r3, [r7, #32]
      pDest++;
 801ef5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ef5c:	3301      	adds	r3, #1
 801ef5e:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 801ef60:	8bfb      	ldrh	r3, [r7, #30]
 801ef62:	3b01      	subs	r3, #1
 801ef64:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 801ef66:	8bfb      	ldrh	r3, [r7, #30]
 801ef68:	2b00      	cmp	r3, #0
 801ef6a:	d1ea      	bne.n	801ef42 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 801ef6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 801ef6e:	4618      	mov	r0, r3
 801ef70:	372c      	adds	r7, #44	; 0x2c
 801ef72:	46bd      	mov	sp, r7
 801ef74:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ef78:	4770      	bx	lr

0801ef7a <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 801ef7a:	b480      	push	{r7}
 801ef7c:	b085      	sub	sp, #20
 801ef7e:	af00      	add	r7, sp, #0
 801ef80:	6078      	str	r0, [r7, #4]
 801ef82:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801ef84:	687b      	ldr	r3, [r7, #4]
 801ef86:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 801ef88:	683b      	ldr	r3, [r7, #0]
 801ef8a:	781b      	ldrb	r3, [r3, #0]
 801ef8c:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 801ef8e:	683b      	ldr	r3, [r7, #0]
 801ef90:	785b      	ldrb	r3, [r3, #1]
 801ef92:	2b01      	cmp	r3, #1
 801ef94:	d12c      	bne.n	801eff0 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 801ef96:	68bb      	ldr	r3, [r7, #8]
 801ef98:	015a      	lsls	r2, r3, #5
 801ef9a:	68fb      	ldr	r3, [r7, #12]
 801ef9c:	4413      	add	r3, r2
 801ef9e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801efa2:	681b      	ldr	r3, [r3, #0]
 801efa4:	2b00      	cmp	r3, #0
 801efa6:	db12      	blt.n	801efce <USB_EPSetStall+0x54>
 801efa8:	68bb      	ldr	r3, [r7, #8]
 801efaa:	2b00      	cmp	r3, #0
 801efac:	d00f      	beq.n	801efce <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 801efae:	68bb      	ldr	r3, [r7, #8]
 801efb0:	015a      	lsls	r2, r3, #5
 801efb2:	68fb      	ldr	r3, [r7, #12]
 801efb4:	4413      	add	r3, r2
 801efb6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801efba:	681b      	ldr	r3, [r3, #0]
 801efbc:	68ba      	ldr	r2, [r7, #8]
 801efbe:	0151      	lsls	r1, r2, #5
 801efc0:	68fa      	ldr	r2, [r7, #12]
 801efc2:	440a      	add	r2, r1
 801efc4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801efc8:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 801efcc:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 801efce:	68bb      	ldr	r3, [r7, #8]
 801efd0:	015a      	lsls	r2, r3, #5
 801efd2:	68fb      	ldr	r3, [r7, #12]
 801efd4:	4413      	add	r3, r2
 801efd6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801efda:	681b      	ldr	r3, [r3, #0]
 801efdc:	68ba      	ldr	r2, [r7, #8]
 801efde:	0151      	lsls	r1, r2, #5
 801efe0:	68fa      	ldr	r2, [r7, #12]
 801efe2:	440a      	add	r2, r1
 801efe4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801efe8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 801efec:	6013      	str	r3, [r2, #0]
 801efee:	e02b      	b.n	801f048 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 801eff0:	68bb      	ldr	r3, [r7, #8]
 801eff2:	015a      	lsls	r2, r3, #5
 801eff4:	68fb      	ldr	r3, [r7, #12]
 801eff6:	4413      	add	r3, r2
 801eff8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801effc:	681b      	ldr	r3, [r3, #0]
 801effe:	2b00      	cmp	r3, #0
 801f000:	db12      	blt.n	801f028 <USB_EPSetStall+0xae>
 801f002:	68bb      	ldr	r3, [r7, #8]
 801f004:	2b00      	cmp	r3, #0
 801f006:	d00f      	beq.n	801f028 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 801f008:	68bb      	ldr	r3, [r7, #8]
 801f00a:	015a      	lsls	r2, r3, #5
 801f00c:	68fb      	ldr	r3, [r7, #12]
 801f00e:	4413      	add	r3, r2
 801f010:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801f014:	681b      	ldr	r3, [r3, #0]
 801f016:	68ba      	ldr	r2, [r7, #8]
 801f018:	0151      	lsls	r1, r2, #5
 801f01a:	68fa      	ldr	r2, [r7, #12]
 801f01c:	440a      	add	r2, r1
 801f01e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801f022:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 801f026:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 801f028:	68bb      	ldr	r3, [r7, #8]
 801f02a:	015a      	lsls	r2, r3, #5
 801f02c:	68fb      	ldr	r3, [r7, #12]
 801f02e:	4413      	add	r3, r2
 801f030:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801f034:	681b      	ldr	r3, [r3, #0]
 801f036:	68ba      	ldr	r2, [r7, #8]
 801f038:	0151      	lsls	r1, r2, #5
 801f03a:	68fa      	ldr	r2, [r7, #12]
 801f03c:	440a      	add	r2, r1
 801f03e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801f042:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 801f046:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 801f048:	2300      	movs	r3, #0
}
 801f04a:	4618      	mov	r0, r3
 801f04c:	3714      	adds	r7, #20
 801f04e:	46bd      	mov	sp, r7
 801f050:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f054:	4770      	bx	lr

0801f056 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 801f056:	b480      	push	{r7}
 801f058:	b085      	sub	sp, #20
 801f05a:	af00      	add	r7, sp, #0
 801f05c:	6078      	str	r0, [r7, #4]
 801f05e:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801f060:	687b      	ldr	r3, [r7, #4]
 801f062:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 801f064:	683b      	ldr	r3, [r7, #0]
 801f066:	781b      	ldrb	r3, [r3, #0]
 801f068:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 801f06a:	683b      	ldr	r3, [r7, #0]
 801f06c:	785b      	ldrb	r3, [r3, #1]
 801f06e:	2b01      	cmp	r3, #1
 801f070:	d128      	bne.n	801f0c4 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 801f072:	68bb      	ldr	r3, [r7, #8]
 801f074:	015a      	lsls	r2, r3, #5
 801f076:	68fb      	ldr	r3, [r7, #12]
 801f078:	4413      	add	r3, r2
 801f07a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801f07e:	681b      	ldr	r3, [r3, #0]
 801f080:	68ba      	ldr	r2, [r7, #8]
 801f082:	0151      	lsls	r1, r2, #5
 801f084:	68fa      	ldr	r2, [r7, #12]
 801f086:	440a      	add	r2, r1
 801f088:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801f08c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 801f090:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 801f092:	683b      	ldr	r3, [r7, #0]
 801f094:	78db      	ldrb	r3, [r3, #3]
 801f096:	2b03      	cmp	r3, #3
 801f098:	d003      	beq.n	801f0a2 <USB_EPClearStall+0x4c>
 801f09a:	683b      	ldr	r3, [r7, #0]
 801f09c:	78db      	ldrb	r3, [r3, #3]
 801f09e:	2b02      	cmp	r3, #2
 801f0a0:	d138      	bne.n	801f114 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 801f0a2:	68bb      	ldr	r3, [r7, #8]
 801f0a4:	015a      	lsls	r2, r3, #5
 801f0a6:	68fb      	ldr	r3, [r7, #12]
 801f0a8:	4413      	add	r3, r2
 801f0aa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801f0ae:	681b      	ldr	r3, [r3, #0]
 801f0b0:	68ba      	ldr	r2, [r7, #8]
 801f0b2:	0151      	lsls	r1, r2, #5
 801f0b4:	68fa      	ldr	r2, [r7, #12]
 801f0b6:	440a      	add	r2, r1
 801f0b8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801f0bc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 801f0c0:	6013      	str	r3, [r2, #0]
 801f0c2:	e027      	b.n	801f114 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 801f0c4:	68bb      	ldr	r3, [r7, #8]
 801f0c6:	015a      	lsls	r2, r3, #5
 801f0c8:	68fb      	ldr	r3, [r7, #12]
 801f0ca:	4413      	add	r3, r2
 801f0cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801f0d0:	681b      	ldr	r3, [r3, #0]
 801f0d2:	68ba      	ldr	r2, [r7, #8]
 801f0d4:	0151      	lsls	r1, r2, #5
 801f0d6:	68fa      	ldr	r2, [r7, #12]
 801f0d8:	440a      	add	r2, r1
 801f0da:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801f0de:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 801f0e2:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 801f0e4:	683b      	ldr	r3, [r7, #0]
 801f0e6:	78db      	ldrb	r3, [r3, #3]
 801f0e8:	2b03      	cmp	r3, #3
 801f0ea:	d003      	beq.n	801f0f4 <USB_EPClearStall+0x9e>
 801f0ec:	683b      	ldr	r3, [r7, #0]
 801f0ee:	78db      	ldrb	r3, [r3, #3]
 801f0f0:	2b02      	cmp	r3, #2
 801f0f2:	d10f      	bne.n	801f114 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 801f0f4:	68bb      	ldr	r3, [r7, #8]
 801f0f6:	015a      	lsls	r2, r3, #5
 801f0f8:	68fb      	ldr	r3, [r7, #12]
 801f0fa:	4413      	add	r3, r2
 801f0fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801f100:	681b      	ldr	r3, [r3, #0]
 801f102:	68ba      	ldr	r2, [r7, #8]
 801f104:	0151      	lsls	r1, r2, #5
 801f106:	68fa      	ldr	r2, [r7, #12]
 801f108:	440a      	add	r2, r1
 801f10a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801f10e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 801f112:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 801f114:	2300      	movs	r3, #0
}
 801f116:	4618      	mov	r0, r3
 801f118:	3714      	adds	r7, #20
 801f11a:	46bd      	mov	sp, r7
 801f11c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f120:	4770      	bx	lr

0801f122 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 801f122:	b480      	push	{r7}
 801f124:	b085      	sub	sp, #20
 801f126:	af00      	add	r7, sp, #0
 801f128:	6078      	str	r0, [r7, #4]
 801f12a:	460b      	mov	r3, r1
 801f12c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801f12e:	687b      	ldr	r3, [r7, #4]
 801f130:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 801f132:	68fb      	ldr	r3, [r7, #12]
 801f134:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801f138:	681b      	ldr	r3, [r3, #0]
 801f13a:	68fa      	ldr	r2, [r7, #12]
 801f13c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 801f140:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 801f144:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 801f146:	68fb      	ldr	r3, [r7, #12]
 801f148:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801f14c:	681a      	ldr	r2, [r3, #0]
 801f14e:	78fb      	ldrb	r3, [r7, #3]
 801f150:	011b      	lsls	r3, r3, #4
 801f152:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 801f156:	68f9      	ldr	r1, [r7, #12]
 801f158:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 801f15c:	4313      	orrs	r3, r2
 801f15e:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 801f160:	2300      	movs	r3, #0
}
 801f162:	4618      	mov	r0, r3
 801f164:	3714      	adds	r7, #20
 801f166:	46bd      	mov	sp, r7
 801f168:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f16c:	4770      	bx	lr

0801f16e <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 801f16e:	b480      	push	{r7}
 801f170:	b085      	sub	sp, #20
 801f172:	af00      	add	r7, sp, #0
 801f174:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801f176:	687b      	ldr	r3, [r7, #4]
 801f178:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 801f17a:	68fb      	ldr	r3, [r7, #12]
 801f17c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 801f180:	681b      	ldr	r3, [r3, #0]
 801f182:	68fa      	ldr	r2, [r7, #12]
 801f184:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 801f188:	f023 0303 	bic.w	r3, r3, #3
 801f18c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 801f18e:	68fb      	ldr	r3, [r7, #12]
 801f190:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801f194:	685b      	ldr	r3, [r3, #4]
 801f196:	68fa      	ldr	r2, [r7, #12]
 801f198:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 801f19c:	f023 0302 	bic.w	r3, r3, #2
 801f1a0:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 801f1a2:	2300      	movs	r3, #0
}
 801f1a4:	4618      	mov	r0, r3
 801f1a6:	3714      	adds	r7, #20
 801f1a8:	46bd      	mov	sp, r7
 801f1aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f1ae:	4770      	bx	lr

0801f1b0 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 801f1b0:	b480      	push	{r7}
 801f1b2:	b085      	sub	sp, #20
 801f1b4:	af00      	add	r7, sp, #0
 801f1b6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801f1b8:	687b      	ldr	r3, [r7, #4]
 801f1ba:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 801f1bc:	68fb      	ldr	r3, [r7, #12]
 801f1be:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 801f1c2:	681b      	ldr	r3, [r3, #0]
 801f1c4:	68fa      	ldr	r2, [r7, #12]
 801f1c6:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 801f1ca:	f023 0303 	bic.w	r3, r3, #3
 801f1ce:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 801f1d0:	68fb      	ldr	r3, [r7, #12]
 801f1d2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801f1d6:	685b      	ldr	r3, [r3, #4]
 801f1d8:	68fa      	ldr	r2, [r7, #12]
 801f1da:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 801f1de:	f043 0302 	orr.w	r3, r3, #2
 801f1e2:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 801f1e4:	2300      	movs	r3, #0
}
 801f1e6:	4618      	mov	r0, r3
 801f1e8:	3714      	adds	r7, #20
 801f1ea:	46bd      	mov	sp, r7
 801f1ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f1f0:	4770      	bx	lr

0801f1f2 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 801f1f2:	b480      	push	{r7}
 801f1f4:	b085      	sub	sp, #20
 801f1f6:	af00      	add	r7, sp, #0
 801f1f8:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 801f1fa:	687b      	ldr	r3, [r7, #4]
 801f1fc:	695b      	ldr	r3, [r3, #20]
 801f1fe:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 801f200:	687b      	ldr	r3, [r7, #4]
 801f202:	699b      	ldr	r3, [r3, #24]
 801f204:	68fa      	ldr	r2, [r7, #12]
 801f206:	4013      	ands	r3, r2
 801f208:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 801f20a:	68fb      	ldr	r3, [r7, #12]
}
 801f20c:	4618      	mov	r0, r3
 801f20e:	3714      	adds	r7, #20
 801f210:	46bd      	mov	sp, r7
 801f212:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f216:	4770      	bx	lr

0801f218 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 801f218:	b480      	push	{r7}
 801f21a:	b085      	sub	sp, #20
 801f21c:	af00      	add	r7, sp, #0
 801f21e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801f220:	687b      	ldr	r3, [r7, #4]
 801f222:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 801f224:	68fb      	ldr	r3, [r7, #12]
 801f226:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801f22a:	699b      	ldr	r3, [r3, #24]
 801f22c:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 801f22e:	68fb      	ldr	r3, [r7, #12]
 801f230:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801f234:	69db      	ldr	r3, [r3, #28]
 801f236:	68ba      	ldr	r2, [r7, #8]
 801f238:	4013      	ands	r3, r2
 801f23a:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 801f23c:	68bb      	ldr	r3, [r7, #8]
 801f23e:	0c1b      	lsrs	r3, r3, #16
}
 801f240:	4618      	mov	r0, r3
 801f242:	3714      	adds	r7, #20
 801f244:	46bd      	mov	sp, r7
 801f246:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f24a:	4770      	bx	lr

0801f24c <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 801f24c:	b480      	push	{r7}
 801f24e:	b085      	sub	sp, #20
 801f250:	af00      	add	r7, sp, #0
 801f252:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801f254:	687b      	ldr	r3, [r7, #4]
 801f256:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 801f258:	68fb      	ldr	r3, [r7, #12]
 801f25a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801f25e:	699b      	ldr	r3, [r3, #24]
 801f260:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 801f262:	68fb      	ldr	r3, [r7, #12]
 801f264:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801f268:	69db      	ldr	r3, [r3, #28]
 801f26a:	68ba      	ldr	r2, [r7, #8]
 801f26c:	4013      	ands	r3, r2
 801f26e:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 801f270:	68bb      	ldr	r3, [r7, #8]
 801f272:	b29b      	uxth	r3, r3
}
 801f274:	4618      	mov	r0, r3
 801f276:	3714      	adds	r7, #20
 801f278:	46bd      	mov	sp, r7
 801f27a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f27e:	4770      	bx	lr

0801f280 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 801f280:	b480      	push	{r7}
 801f282:	b085      	sub	sp, #20
 801f284:	af00      	add	r7, sp, #0
 801f286:	6078      	str	r0, [r7, #4]
 801f288:	460b      	mov	r3, r1
 801f28a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801f28c:	687b      	ldr	r3, [r7, #4]
 801f28e:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 801f290:	78fb      	ldrb	r3, [r7, #3]
 801f292:	015a      	lsls	r2, r3, #5
 801f294:	68fb      	ldr	r3, [r7, #12]
 801f296:	4413      	add	r3, r2
 801f298:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801f29c:	689b      	ldr	r3, [r3, #8]
 801f29e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 801f2a0:	68fb      	ldr	r3, [r7, #12]
 801f2a2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801f2a6:	695b      	ldr	r3, [r3, #20]
 801f2a8:	68ba      	ldr	r2, [r7, #8]
 801f2aa:	4013      	ands	r3, r2
 801f2ac:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 801f2ae:	68bb      	ldr	r3, [r7, #8]
}
 801f2b0:	4618      	mov	r0, r3
 801f2b2:	3714      	adds	r7, #20
 801f2b4:	46bd      	mov	sp, r7
 801f2b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f2ba:	4770      	bx	lr

0801f2bc <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 801f2bc:	b480      	push	{r7}
 801f2be:	b087      	sub	sp, #28
 801f2c0:	af00      	add	r7, sp, #0
 801f2c2:	6078      	str	r0, [r7, #4]
 801f2c4:	460b      	mov	r3, r1
 801f2c6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801f2c8:	687b      	ldr	r3, [r7, #4]
 801f2ca:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 801f2cc:	697b      	ldr	r3, [r7, #20]
 801f2ce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801f2d2:	691b      	ldr	r3, [r3, #16]
 801f2d4:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 801f2d6:	697b      	ldr	r3, [r7, #20]
 801f2d8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801f2dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801f2de:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 801f2e0:	78fb      	ldrb	r3, [r7, #3]
 801f2e2:	f003 030f 	and.w	r3, r3, #15
 801f2e6:	68fa      	ldr	r2, [r7, #12]
 801f2e8:	fa22 f303 	lsr.w	r3, r2, r3
 801f2ec:	01db      	lsls	r3, r3, #7
 801f2ee:	b2db      	uxtb	r3, r3
 801f2f0:	693a      	ldr	r2, [r7, #16]
 801f2f2:	4313      	orrs	r3, r2
 801f2f4:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 801f2f6:	78fb      	ldrb	r3, [r7, #3]
 801f2f8:	015a      	lsls	r2, r3, #5
 801f2fa:	697b      	ldr	r3, [r7, #20]
 801f2fc:	4413      	add	r3, r2
 801f2fe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801f302:	689b      	ldr	r3, [r3, #8]
 801f304:	693a      	ldr	r2, [r7, #16]
 801f306:	4013      	ands	r3, r2
 801f308:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 801f30a:	68bb      	ldr	r3, [r7, #8]
}
 801f30c:	4618      	mov	r0, r3
 801f30e:	371c      	adds	r7, #28
 801f310:	46bd      	mov	sp, r7
 801f312:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f316:	4770      	bx	lr

0801f318 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 801f318:	b480      	push	{r7}
 801f31a:	b083      	sub	sp, #12
 801f31c:	af00      	add	r7, sp, #0
 801f31e:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 801f320:	687b      	ldr	r3, [r7, #4]
 801f322:	695b      	ldr	r3, [r3, #20]
 801f324:	f003 0301 	and.w	r3, r3, #1
}
 801f328:	4618      	mov	r0, r3
 801f32a:	370c      	adds	r7, #12
 801f32c:	46bd      	mov	sp, r7
 801f32e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f332:	4770      	bx	lr

0801f334 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 801f334:	b480      	push	{r7}
 801f336:	b085      	sub	sp, #20
 801f338:	af00      	add	r7, sp, #0
 801f33a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801f33c:	687b      	ldr	r3, [r7, #4]
 801f33e:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 801f340:	68fb      	ldr	r3, [r7, #12]
 801f342:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801f346:	681b      	ldr	r3, [r3, #0]
 801f348:	68fa      	ldr	r2, [r7, #12]
 801f34a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801f34e:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 801f352:	f023 0307 	bic.w	r3, r3, #7
 801f356:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 801f358:	68fb      	ldr	r3, [r7, #12]
 801f35a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801f35e:	685b      	ldr	r3, [r3, #4]
 801f360:	68fa      	ldr	r2, [r7, #12]
 801f362:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 801f366:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 801f36a:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 801f36c:	2300      	movs	r3, #0
}
 801f36e:	4618      	mov	r0, r3
 801f370:	3714      	adds	r7, #20
 801f372:	46bd      	mov	sp, r7
 801f374:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f378:	4770      	bx	lr
	...

0801f37c <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 801f37c:	b480      	push	{r7}
 801f37e:	b087      	sub	sp, #28
 801f380:	af00      	add	r7, sp, #0
 801f382:	60f8      	str	r0, [r7, #12]
 801f384:	460b      	mov	r3, r1
 801f386:	607a      	str	r2, [r7, #4]
 801f388:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801f38a:	68fb      	ldr	r3, [r7, #12]
 801f38c:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 801f38e:	68fb      	ldr	r3, [r7, #12]
 801f390:	333c      	adds	r3, #60	; 0x3c
 801f392:	3304      	adds	r3, #4
 801f394:	681b      	ldr	r3, [r3, #0]
 801f396:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 801f398:	693b      	ldr	r3, [r7, #16]
 801f39a:	4a26      	ldr	r2, [pc, #152]	; (801f434 <USB_EP0_OutStart+0xb8>)
 801f39c:	4293      	cmp	r3, r2
 801f39e:	d90a      	bls.n	801f3b6 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 801f3a0:	697b      	ldr	r3, [r7, #20]
 801f3a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801f3a6:	681b      	ldr	r3, [r3, #0]
 801f3a8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 801f3ac:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 801f3b0:	d101      	bne.n	801f3b6 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 801f3b2:	2300      	movs	r3, #0
 801f3b4:	e037      	b.n	801f426 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 801f3b6:	697b      	ldr	r3, [r7, #20]
 801f3b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801f3bc:	461a      	mov	r2, r3
 801f3be:	2300      	movs	r3, #0
 801f3c0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 801f3c2:	697b      	ldr	r3, [r7, #20]
 801f3c4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801f3c8:	691b      	ldr	r3, [r3, #16]
 801f3ca:	697a      	ldr	r2, [r7, #20]
 801f3cc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801f3d0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 801f3d4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 801f3d6:	697b      	ldr	r3, [r7, #20]
 801f3d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801f3dc:	691b      	ldr	r3, [r3, #16]
 801f3de:	697a      	ldr	r2, [r7, #20]
 801f3e0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801f3e4:	f043 0318 	orr.w	r3, r3, #24
 801f3e8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 801f3ea:	697b      	ldr	r3, [r7, #20]
 801f3ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801f3f0:	691b      	ldr	r3, [r3, #16]
 801f3f2:	697a      	ldr	r2, [r7, #20]
 801f3f4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801f3f8:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 801f3fc:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 801f3fe:	7afb      	ldrb	r3, [r7, #11]
 801f400:	2b01      	cmp	r3, #1
 801f402:	d10f      	bne.n	801f424 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 801f404:	697b      	ldr	r3, [r7, #20]
 801f406:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801f40a:	461a      	mov	r2, r3
 801f40c:	687b      	ldr	r3, [r7, #4]
 801f40e:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 801f410:	697b      	ldr	r3, [r7, #20]
 801f412:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801f416:	681b      	ldr	r3, [r3, #0]
 801f418:	697a      	ldr	r2, [r7, #20]
 801f41a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801f41e:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 801f422:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 801f424:	2300      	movs	r3, #0
}
 801f426:	4618      	mov	r0, r3
 801f428:	371c      	adds	r7, #28
 801f42a:	46bd      	mov	sp, r7
 801f42c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f430:	4770      	bx	lr
 801f432:	bf00      	nop
 801f434:	4f54300a 	.word	0x4f54300a

0801f438 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 801f438:	b480      	push	{r7}
 801f43a:	b085      	sub	sp, #20
 801f43c:	af00      	add	r7, sp, #0
 801f43e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 801f440:	2300      	movs	r3, #0
 801f442:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 801f444:	68fb      	ldr	r3, [r7, #12]
 801f446:	3301      	adds	r3, #1
 801f448:	60fb      	str	r3, [r7, #12]
 801f44a:	4a13      	ldr	r2, [pc, #76]	; (801f498 <USB_CoreReset+0x60>)
 801f44c:	4293      	cmp	r3, r2
 801f44e:	d901      	bls.n	801f454 <USB_CoreReset+0x1c>
    {
      return HAL_TIMEOUT;
 801f450:	2303      	movs	r3, #3
 801f452:	e01a      	b.n	801f48a <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 801f454:	687b      	ldr	r3, [r7, #4]
 801f456:	691b      	ldr	r3, [r3, #16]
 801f458:	2b00      	cmp	r3, #0
 801f45a:	daf3      	bge.n	801f444 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 801f45c:	2300      	movs	r3, #0
 801f45e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 801f460:	687b      	ldr	r3, [r7, #4]
 801f462:	691b      	ldr	r3, [r3, #16]
 801f464:	f043 0201 	orr.w	r2, r3, #1
 801f468:	687b      	ldr	r3, [r7, #4]
 801f46a:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 801f46c:	68fb      	ldr	r3, [r7, #12]
 801f46e:	3301      	adds	r3, #1
 801f470:	60fb      	str	r3, [r7, #12]
 801f472:	4a09      	ldr	r2, [pc, #36]	; (801f498 <USB_CoreReset+0x60>)
 801f474:	4293      	cmp	r3, r2
 801f476:	d901      	bls.n	801f47c <USB_CoreReset+0x44>
    {
      return HAL_TIMEOUT;
 801f478:	2303      	movs	r3, #3
 801f47a:	e006      	b.n	801f48a <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 801f47c:	687b      	ldr	r3, [r7, #4]
 801f47e:	691b      	ldr	r3, [r3, #16]
 801f480:	f003 0301 	and.w	r3, r3, #1
 801f484:	2b01      	cmp	r3, #1
 801f486:	d0f1      	beq.n	801f46c <USB_CoreReset+0x34>

  return HAL_OK;
 801f488:	2300      	movs	r3, #0
}
 801f48a:	4618      	mov	r0, r3
 801f48c:	3714      	adds	r7, #20
 801f48e:	46bd      	mov	sp, r7
 801f490:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f494:	4770      	bx	lr
 801f496:	bf00      	nop
 801f498:	00030d40 	.word	0x00030d40

0801f49c <USBD_MSC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
uint8_t USBD_MSC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 801f49c:	b580      	push	{r7, lr}
 801f49e:	b084      	sub	sp, #16
 801f4a0:	af00      	add	r7, sp, #0
 801f4a2:	6078      	str	r0, [r7, #4]
 801f4a4:	460b      	mov	r3, r1
 801f4a6:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_MSC_BOT_HandleTypeDef *hmsc;

  hmsc = USBD_malloc(sizeof(USBD_MSC_BOT_HandleTypeDef));
 801f4a8:	f44f 701d 	mov.w	r0, #628	; 0x274
 801f4ac:	f003 fc6e 	bl	8022d8c <USBD_static_malloc>
 801f4b0:	60f8      	str	r0, [r7, #12]

  if (hmsc == NULL)
 801f4b2:	68fb      	ldr	r3, [r7, #12]
 801f4b4:	2b00      	cmp	r3, #0
 801f4b6:	d105      	bne.n	801f4c4 <USBD_MSC_Init+0x28>
  {
    pdev->pClassData = NULL;
 801f4b8:	687b      	ldr	r3, [r7, #4]
 801f4ba:	2200      	movs	r2, #0
 801f4bc:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 801f4c0:	2302      	movs	r3, #2
 801f4c2:	e034      	b.n	801f52e <USBD_MSC_Init+0x92>
  }

  pdev->pClassData = (void *)hmsc;
 801f4c4:	687b      	ldr	r3, [r7, #4]
 801f4c6:	68fa      	ldr	r2, [r7, #12]
 801f4c8:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 801f4cc:	687b      	ldr	r3, [r7, #4]
 801f4ce:	7c1b      	ldrb	r3, [r3, #16]
 801f4d0:	2b00      	cmp	r3, #0
 801f4d2:	d115      	bne.n	801f500 <USBD_MSC_Init+0x64>
  {
    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, MSC_EPOUT_ADDR, USBD_EP_TYPE_BULK, MSC_MAX_HS_PACKET);
 801f4d4:	f44f 7300 	mov.w	r3, #512	; 0x200
 801f4d8:	2202      	movs	r2, #2
 801f4da:	2101      	movs	r1, #1
 801f4dc:	6878      	ldr	r0, [r7, #4]
 801f4de:	f003 fac4 	bl	8022a6a <USBD_LL_OpenEP>
    pdev->ep_out[MSC_EPOUT_ADDR & 0xFU].is_used = 1U;
 801f4e2:	687b      	ldr	r3, [r7, #4]
 801f4e4:	2201      	movs	r2, #1
 801f4e6:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, MSC_EPIN_ADDR, USBD_EP_TYPE_BULK, MSC_MAX_HS_PACKET);
 801f4ea:	f44f 7300 	mov.w	r3, #512	; 0x200
 801f4ee:	2202      	movs	r2, #2
 801f4f0:	2181      	movs	r1, #129	; 0x81
 801f4f2:	6878      	ldr	r0, [r7, #4]
 801f4f4:	f003 fab9 	bl	8022a6a <USBD_LL_OpenEP>
    pdev->ep_in[MSC_EPIN_ADDR & 0xFU].is_used = 1U;
 801f4f8:	687b      	ldr	r3, [r7, #4]
 801f4fa:	2201      	movs	r2, #1
 801f4fc:	871a      	strh	r2, [r3, #56]	; 0x38
 801f4fe:	e012      	b.n	801f526 <USBD_MSC_Init+0x8a>
  }
  else
  {
    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, MSC_EPOUT_ADDR, USBD_EP_TYPE_BULK, MSC_MAX_FS_PACKET);
 801f500:	2340      	movs	r3, #64	; 0x40
 801f502:	2202      	movs	r2, #2
 801f504:	2101      	movs	r1, #1
 801f506:	6878      	ldr	r0, [r7, #4]
 801f508:	f003 faaf 	bl	8022a6a <USBD_LL_OpenEP>
    pdev->ep_out[MSC_EPOUT_ADDR & 0xFU].is_used = 1U;
 801f50c:	687b      	ldr	r3, [r7, #4]
 801f50e:	2201      	movs	r2, #1
 801f510:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, MSC_EPIN_ADDR, USBD_EP_TYPE_BULK, MSC_MAX_FS_PACKET);
 801f514:	2340      	movs	r3, #64	; 0x40
 801f516:	2202      	movs	r2, #2
 801f518:	2181      	movs	r1, #129	; 0x81
 801f51a:	6878      	ldr	r0, [r7, #4]
 801f51c:	f003 faa5 	bl	8022a6a <USBD_LL_OpenEP>
    pdev->ep_in[MSC_EPIN_ADDR & 0xFU].is_used = 1U;
 801f520:	687b      	ldr	r3, [r7, #4]
 801f522:	2201      	movs	r2, #1
 801f524:	871a      	strh	r2, [r3, #56]	; 0x38
  }

  /* Init the BOT  layer */
  MSC_BOT_Init(pdev);
 801f526:	6878      	ldr	r0, [r7, #4]
 801f528:	f000 f999 	bl	801f85e <MSC_BOT_Init>

  return (uint8_t)USBD_OK;
 801f52c:	2300      	movs	r3, #0
}
 801f52e:	4618      	mov	r0, r3
 801f530:	3710      	adds	r7, #16
 801f532:	46bd      	mov	sp, r7
 801f534:	bd80      	pop	{r7, pc}

0801f536 <USBD_MSC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
uint8_t USBD_MSC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 801f536:	b580      	push	{r7, lr}
 801f538:	b082      	sub	sp, #8
 801f53a:	af00      	add	r7, sp, #0
 801f53c:	6078      	str	r0, [r7, #4]
 801f53e:	460b      	mov	r3, r1
 801f540:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close MSC EPs */
  (void)USBD_LL_CloseEP(pdev, MSC_EPOUT_ADDR);
 801f542:	2101      	movs	r1, #1
 801f544:	6878      	ldr	r0, [r7, #4]
 801f546:	f003 fab6 	bl	8022ab6 <USBD_LL_CloseEP>
  pdev->ep_out[MSC_EPOUT_ADDR & 0xFU].is_used = 0U;
 801f54a:	687b      	ldr	r3, [r7, #4]
 801f54c:	2200      	movs	r2, #0
 801f54e:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, MSC_EPIN_ADDR);
 801f552:	2181      	movs	r1, #129	; 0x81
 801f554:	6878      	ldr	r0, [r7, #4]
 801f556:	f003 faae 	bl	8022ab6 <USBD_LL_CloseEP>
  pdev->ep_in[MSC_EPIN_ADDR & 0xFU].is_used = 0U;
 801f55a:	687b      	ldr	r3, [r7, #4]
 801f55c:	2200      	movs	r2, #0
 801f55e:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Free MSC Class Resources */
  if (pdev->pClassData != NULL)
 801f560:	687b      	ldr	r3, [r7, #4]
 801f562:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801f566:	2b00      	cmp	r3, #0
 801f568:	d00c      	beq.n	801f584 <USBD_MSC_DeInit+0x4e>
  {
    /* De-Init the BOT layer */
    MSC_BOT_DeInit(pdev);
 801f56a:	6878      	ldr	r0, [r7, #4]
 801f56c:	f000 f9d5 	bl	801f91a <MSC_BOT_DeInit>

    (void)USBD_free(pdev->pClassData);
 801f570:	687b      	ldr	r3, [r7, #4]
 801f572:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801f576:	4618      	mov	r0, r3
 801f578:	f003 fc16 	bl	8022da8 <USBD_static_free>
    pdev->pClassData = NULL;
 801f57c:	687b      	ldr	r3, [r7, #4]
 801f57e:	2200      	movs	r2, #0
 801f580:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 801f584:	2300      	movs	r3, #0
}
 801f586:	4618      	mov	r0, r3
 801f588:	3708      	adds	r7, #8
 801f58a:	46bd      	mov	sp, r7
 801f58c:	bd80      	pop	{r7, pc}
	...

0801f590 <USBD_MSC_Setup>:
  * @param  pdev: device instance
  * @param  req: USB request
  * @retval status
  */
uint8_t USBD_MSC_Setup(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801f590:	b580      	push	{r7, lr}
 801f592:	b086      	sub	sp, #24
 801f594:	af00      	add	r7, sp, #0
 801f596:	6078      	str	r0, [r7, #4]
 801f598:	6039      	str	r1, [r7, #0]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 801f59a:	687b      	ldr	r3, [r7, #4]
 801f59c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801f5a0:	613b      	str	r3, [r7, #16]
  USBD_StatusTypeDef ret = USBD_OK;
 801f5a2:	2300      	movs	r3, #0
 801f5a4:	75fb      	strb	r3, [r7, #23]
  uint16_t status_info = 0U;
 801f5a6:	2300      	movs	r3, #0
 801f5a8:	81fb      	strh	r3, [r7, #14]

  if (hmsc == NULL)
 801f5aa:	693b      	ldr	r3, [r7, #16]
 801f5ac:	2b00      	cmp	r3, #0
 801f5ae:	d101      	bne.n	801f5b4 <USBD_MSC_Setup+0x24>
  {
    return (uint8_t)USBD_FAIL;
 801f5b0:	2303      	movs	r3, #3
 801f5b2:	e0db      	b.n	801f76c <USBD_MSC_Setup+0x1dc>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 801f5b4:	683b      	ldr	r3, [r7, #0]
 801f5b6:	781b      	ldrb	r3, [r3, #0]
 801f5b8:	f003 0360 	and.w	r3, r3, #96	; 0x60
 801f5bc:	2b00      	cmp	r3, #0
 801f5be:	d04e      	beq.n	801f65e <USBD_MSC_Setup+0xce>
 801f5c0:	2b20      	cmp	r3, #32
 801f5c2:	f040 80cb 	bne.w	801f75c <USBD_MSC_Setup+0x1cc>
  {
    /* Class request */
    case USB_REQ_TYPE_CLASS:
      switch (req->bRequest)
 801f5c6:	683b      	ldr	r3, [r7, #0]
 801f5c8:	785b      	ldrb	r3, [r3, #1]
 801f5ca:	2bfe      	cmp	r3, #254	; 0xfe
 801f5cc:	d002      	beq.n	801f5d4 <USBD_MSC_Setup+0x44>
 801f5ce:	2bff      	cmp	r3, #255	; 0xff
 801f5d0:	d025      	beq.n	801f61e <USBD_MSC_Setup+0x8e>
 801f5d2:	e03c      	b.n	801f64e <USBD_MSC_Setup+0xbe>
      {
        case BOT_GET_MAX_LUN:
          if ((req->wValue  == 0U) && (req->wLength == 1U) &&
 801f5d4:	683b      	ldr	r3, [r7, #0]
 801f5d6:	885b      	ldrh	r3, [r3, #2]
 801f5d8:	2b00      	cmp	r3, #0
 801f5da:	d119      	bne.n	801f610 <USBD_MSC_Setup+0x80>
 801f5dc:	683b      	ldr	r3, [r7, #0]
 801f5de:	88db      	ldrh	r3, [r3, #6]
 801f5e0:	2b01      	cmp	r3, #1
 801f5e2:	d115      	bne.n	801f610 <USBD_MSC_Setup+0x80>
              ((req->bmRequest & 0x80U) == 0x80U))
 801f5e4:	683b      	ldr	r3, [r7, #0]
 801f5e6:	781b      	ldrb	r3, [r3, #0]
 801f5e8:	b25b      	sxtb	r3, r3
          if ((req->wValue  == 0U) && (req->wLength == 1U) &&
 801f5ea:	2b00      	cmp	r3, #0
 801f5ec:	da10      	bge.n	801f610 <USBD_MSC_Setup+0x80>
          {
            hmsc->max_lun = (uint32_t)((USBD_StorageTypeDef *)pdev->pUserData)->GetMaxLun();
 801f5ee:	687b      	ldr	r3, [r7, #4]
 801f5f0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 801f5f4:	699b      	ldr	r3, [r3, #24]
 801f5f6:	4798      	blx	r3
 801f5f8:	4603      	mov	r3, r0
 801f5fa:	461a      	mov	r2, r3
 801f5fc:	693b      	ldr	r3, [r7, #16]
 801f5fe:	601a      	str	r2, [r3, #0]
            (void)USBD_CtlSendData(pdev, (uint8_t *)&hmsc->max_lun, 1U);
 801f600:	693b      	ldr	r3, [r7, #16]
 801f602:	2201      	movs	r2, #1
 801f604:	4619      	mov	r1, r3
 801f606:	6878      	ldr	r0, [r7, #4]
 801f608:	f002 fe3d 	bl	8022286 <USBD_CtlSendData>
 801f60c:	bf00      	nop
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 801f60e:	e025      	b.n	801f65c <USBD_MSC_Setup+0xcc>
            USBD_CtlError(pdev, req);
 801f610:	6839      	ldr	r1, [r7, #0]
 801f612:	6878      	ldr	r0, [r7, #4]
 801f614:	f002 fdc6 	bl	80221a4 <USBD_CtlError>
            ret = USBD_FAIL;
 801f618:	2303      	movs	r3, #3
 801f61a:	75fb      	strb	r3, [r7, #23]
          break;
 801f61c:	e01e      	b.n	801f65c <USBD_MSC_Setup+0xcc>

        case BOT_RESET :
          if ((req->wValue  == 0U) && (req->wLength == 0U) &&
 801f61e:	683b      	ldr	r3, [r7, #0]
 801f620:	885b      	ldrh	r3, [r3, #2]
 801f622:	2b00      	cmp	r3, #0
 801f624:	d10c      	bne.n	801f640 <USBD_MSC_Setup+0xb0>
 801f626:	683b      	ldr	r3, [r7, #0]
 801f628:	88db      	ldrh	r3, [r3, #6]
 801f62a:	2b00      	cmp	r3, #0
 801f62c:	d108      	bne.n	801f640 <USBD_MSC_Setup+0xb0>
              ((req->bmRequest & 0x80U) != 0x80U))
 801f62e:	683b      	ldr	r3, [r7, #0]
 801f630:	781b      	ldrb	r3, [r3, #0]
 801f632:	b25b      	sxtb	r3, r3
          if ((req->wValue  == 0U) && (req->wLength == 0U) &&
 801f634:	2b00      	cmp	r3, #0
 801f636:	db03      	blt.n	801f640 <USBD_MSC_Setup+0xb0>
          {
            MSC_BOT_Reset(pdev);
 801f638:	6878      	ldr	r0, [r7, #4]
 801f63a:	f000 f948 	bl	801f8ce <MSC_BOT_Reset>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 801f63e:	e00d      	b.n	801f65c <USBD_MSC_Setup+0xcc>
            USBD_CtlError(pdev, req);
 801f640:	6839      	ldr	r1, [r7, #0]
 801f642:	6878      	ldr	r0, [r7, #4]
 801f644:	f002 fdae 	bl	80221a4 <USBD_CtlError>
            ret = USBD_FAIL;
 801f648:	2303      	movs	r3, #3
 801f64a:	75fb      	strb	r3, [r7, #23]
          break;
 801f64c:	e006      	b.n	801f65c <USBD_MSC_Setup+0xcc>

        default:
          USBD_CtlError(pdev, req);
 801f64e:	6839      	ldr	r1, [r7, #0]
 801f650:	6878      	ldr	r0, [r7, #4]
 801f652:	f002 fda7 	bl	80221a4 <USBD_CtlError>
          ret = USBD_FAIL;
 801f656:	2303      	movs	r3, #3
 801f658:	75fb      	strb	r3, [r7, #23]
          break;
 801f65a:	bf00      	nop
      }
      break;
 801f65c:	e085      	b.n	801f76a <USBD_MSC_Setup+0x1da>
    /* Interface & Endpoint request */
    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 801f65e:	683b      	ldr	r3, [r7, #0]
 801f660:	785b      	ldrb	r3, [r3, #1]
 801f662:	2b0b      	cmp	r3, #11
 801f664:	d871      	bhi.n	801f74a <USBD_MSC_Setup+0x1ba>
 801f666:	a201      	add	r2, pc, #4	; (adr r2, 801f66c <USBD_MSC_Setup+0xdc>)
 801f668:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801f66c:	0801f69d 	.word	0x0801f69d
 801f670:	0801f719 	.word	0x0801f719
 801f674:	0801f74b 	.word	0x0801f74b
 801f678:	0801f74b 	.word	0x0801f74b
 801f67c:	0801f74b 	.word	0x0801f74b
 801f680:	0801f74b 	.word	0x0801f74b
 801f684:	0801f74b 	.word	0x0801f74b
 801f688:	0801f74b 	.word	0x0801f74b
 801f68c:	0801f74b 	.word	0x0801f74b
 801f690:	0801f74b 	.word	0x0801f74b
 801f694:	0801f6c7 	.word	0x0801f6c7
 801f698:	0801f6f1 	.word	0x0801f6f1
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801f69c:	687b      	ldr	r3, [r7, #4]
 801f69e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801f6a2:	b2db      	uxtb	r3, r3
 801f6a4:	2b03      	cmp	r3, #3
 801f6a6:	d107      	bne.n	801f6b8 <USBD_MSC_Setup+0x128>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 801f6a8:	f107 030e 	add.w	r3, r7, #14
 801f6ac:	2202      	movs	r2, #2
 801f6ae:	4619      	mov	r1, r3
 801f6b0:	6878      	ldr	r0, [r7, #4]
 801f6b2:	f002 fde8 	bl	8022286 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 801f6b6:	e050      	b.n	801f75a <USBD_MSC_Setup+0x1ca>
            USBD_CtlError(pdev, req);
 801f6b8:	6839      	ldr	r1, [r7, #0]
 801f6ba:	6878      	ldr	r0, [r7, #4]
 801f6bc:	f002 fd72 	bl	80221a4 <USBD_CtlError>
            ret = USBD_FAIL;
 801f6c0:	2303      	movs	r3, #3
 801f6c2:	75fb      	strb	r3, [r7, #23]
          break;
 801f6c4:	e049      	b.n	801f75a <USBD_MSC_Setup+0x1ca>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801f6c6:	687b      	ldr	r3, [r7, #4]
 801f6c8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801f6cc:	b2db      	uxtb	r3, r3
 801f6ce:	2b03      	cmp	r3, #3
 801f6d0:	d107      	bne.n	801f6e2 <USBD_MSC_Setup+0x152>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&hmsc->interface, 1U);
 801f6d2:	693b      	ldr	r3, [r7, #16]
 801f6d4:	3304      	adds	r3, #4
 801f6d6:	2201      	movs	r2, #1
 801f6d8:	4619      	mov	r1, r3
 801f6da:	6878      	ldr	r0, [r7, #4]
 801f6dc:	f002 fdd3 	bl	8022286 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 801f6e0:	e03b      	b.n	801f75a <USBD_MSC_Setup+0x1ca>
            USBD_CtlError(pdev, req);
 801f6e2:	6839      	ldr	r1, [r7, #0]
 801f6e4:	6878      	ldr	r0, [r7, #4]
 801f6e6:	f002 fd5d 	bl	80221a4 <USBD_CtlError>
            ret = USBD_FAIL;
 801f6ea:	2303      	movs	r3, #3
 801f6ec:	75fb      	strb	r3, [r7, #23]
          break;
 801f6ee:	e034      	b.n	801f75a <USBD_MSC_Setup+0x1ca>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801f6f0:	687b      	ldr	r3, [r7, #4]
 801f6f2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801f6f6:	b2db      	uxtb	r3, r3
 801f6f8:	2b03      	cmp	r3, #3
 801f6fa:	d106      	bne.n	801f70a <USBD_MSC_Setup+0x17a>
          {
            hmsc->interface = (uint8_t)(req->wValue);
 801f6fc:	683b      	ldr	r3, [r7, #0]
 801f6fe:	885b      	ldrh	r3, [r3, #2]
 801f700:	b2db      	uxtb	r3, r3
 801f702:	461a      	mov	r2, r3
 801f704:	693b      	ldr	r3, [r7, #16]
 801f706:	605a      	str	r2, [r3, #4]
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 801f708:	e027      	b.n	801f75a <USBD_MSC_Setup+0x1ca>
            USBD_CtlError(pdev, req);
 801f70a:	6839      	ldr	r1, [r7, #0]
 801f70c:	6878      	ldr	r0, [r7, #4]
 801f70e:	f002 fd49 	bl	80221a4 <USBD_CtlError>
            ret = USBD_FAIL;
 801f712:	2303      	movs	r3, #3
 801f714:	75fb      	strb	r3, [r7, #23]
          break;
 801f716:	e020      	b.n	801f75a <USBD_MSC_Setup+0x1ca>

        case USB_REQ_CLEAR_FEATURE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801f718:	687b      	ldr	r3, [r7, #4]
 801f71a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801f71e:	b2db      	uxtb	r3, r3
 801f720:	2b03      	cmp	r3, #3
 801f722:	d119      	bne.n	801f758 <USBD_MSC_Setup+0x1c8>
          {
            if (req->wValue == USB_FEATURE_EP_HALT)
 801f724:	683b      	ldr	r3, [r7, #0]
 801f726:	885b      	ldrh	r3, [r3, #2]
 801f728:	2b00      	cmp	r3, #0
 801f72a:	d115      	bne.n	801f758 <USBD_MSC_Setup+0x1c8>
            {
              /* Flush the FIFO */
              (void)USBD_LL_FlushEP(pdev, (uint8_t)req->wIndex);
 801f72c:	683b      	ldr	r3, [r7, #0]
 801f72e:	889b      	ldrh	r3, [r3, #4]
 801f730:	b2db      	uxtb	r3, r3
 801f732:	4619      	mov	r1, r3
 801f734:	6878      	ldr	r0, [r7, #4]
 801f736:	f003 f9dd 	bl	8022af4 <USBD_LL_FlushEP>

              /* Handle BOT error */
              MSC_BOT_CplClrFeature(pdev, (uint8_t)req->wIndex);
 801f73a:	683b      	ldr	r3, [r7, #0]
 801f73c:	889b      	ldrh	r3, [r3, #4]
 801f73e:	b2db      	uxtb	r3, r3
 801f740:	4619      	mov	r1, r3
 801f742:	6878      	ldr	r0, [r7, #4]
 801f744:	f000 fa82 	bl	801fc4c <MSC_BOT_CplClrFeature>
            }
          }
          break;
 801f748:	e006      	b.n	801f758 <USBD_MSC_Setup+0x1c8>

        default:
          USBD_CtlError(pdev, req);
 801f74a:	6839      	ldr	r1, [r7, #0]
 801f74c:	6878      	ldr	r0, [r7, #4]
 801f74e:	f002 fd29 	bl	80221a4 <USBD_CtlError>
          ret = USBD_FAIL;
 801f752:	2303      	movs	r3, #3
 801f754:	75fb      	strb	r3, [r7, #23]
          break;
 801f756:	e000      	b.n	801f75a <USBD_MSC_Setup+0x1ca>
          break;
 801f758:	bf00      	nop
      }
      break;
 801f75a:	e006      	b.n	801f76a <USBD_MSC_Setup+0x1da>

    default:
      USBD_CtlError(pdev, req);
 801f75c:	6839      	ldr	r1, [r7, #0]
 801f75e:	6878      	ldr	r0, [r7, #4]
 801f760:	f002 fd20 	bl	80221a4 <USBD_CtlError>
      ret = USBD_FAIL;
 801f764:	2303      	movs	r3, #3
 801f766:	75fb      	strb	r3, [r7, #23]
      break;
 801f768:	bf00      	nop
  }

  return (uint8_t)ret;
 801f76a:	7dfb      	ldrb	r3, [r7, #23]
}
 801f76c:	4618      	mov	r0, r3
 801f76e:	3718      	adds	r7, #24
 801f770:	46bd      	mov	sp, r7
 801f772:	bd80      	pop	{r7, pc}

0801f774 <USBD_MSC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
uint8_t USBD_MSC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 801f774:	b580      	push	{r7, lr}
 801f776:	b082      	sub	sp, #8
 801f778:	af00      	add	r7, sp, #0
 801f77a:	6078      	str	r0, [r7, #4]
 801f77c:	460b      	mov	r3, r1
 801f77e:	70fb      	strb	r3, [r7, #3]
  MSC_BOT_DataIn(pdev, epnum);
 801f780:	78fb      	ldrb	r3, [r7, #3]
 801f782:	4619      	mov	r1, r3
 801f784:	6878      	ldr	r0, [r7, #4]
 801f786:	f000 f8dc 	bl	801f942 <MSC_BOT_DataIn>

  return (uint8_t)USBD_OK;
 801f78a:	2300      	movs	r3, #0
}
 801f78c:	4618      	mov	r0, r3
 801f78e:	3708      	adds	r7, #8
 801f790:	46bd      	mov	sp, r7
 801f792:	bd80      	pop	{r7, pc}

0801f794 <USBD_MSC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
uint8_t USBD_MSC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 801f794:	b580      	push	{r7, lr}
 801f796:	b082      	sub	sp, #8
 801f798:	af00      	add	r7, sp, #0
 801f79a:	6078      	str	r0, [r7, #4]
 801f79c:	460b      	mov	r3, r1
 801f79e:	70fb      	strb	r3, [r7, #3]
  MSC_BOT_DataOut(pdev, epnum);
 801f7a0:	78fb      	ldrb	r3, [r7, #3]
 801f7a2:	4619      	mov	r1, r3
 801f7a4:	6878      	ldr	r0, [r7, #4]
 801f7a6:	f000 f902 	bl	801f9ae <MSC_BOT_DataOut>

  return (uint8_t)USBD_OK;
 801f7aa:	2300      	movs	r3, #0
}
 801f7ac:	4618      	mov	r0, r3
 801f7ae:	3708      	adds	r7, #8
 801f7b0:	46bd      	mov	sp, r7
 801f7b2:	bd80      	pop	{r7, pc}

0801f7b4 <USBD_MSC_GetHSCfgDesc>:
  *         return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_MSC_GetHSCfgDesc(uint16_t *length)
{
 801f7b4:	b480      	push	{r7}
 801f7b6:	b083      	sub	sp, #12
 801f7b8:	af00      	add	r7, sp, #0
 801f7ba:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_MSC_CfgHSDesc);
 801f7bc:	687b      	ldr	r3, [r7, #4]
 801f7be:	2220      	movs	r2, #32
 801f7c0:	801a      	strh	r2, [r3, #0]

  return USBD_MSC_CfgHSDesc;
 801f7c2:	4b03      	ldr	r3, [pc, #12]	; (801f7d0 <USBD_MSC_GetHSCfgDesc+0x1c>)
}
 801f7c4:	4618      	mov	r0, r3
 801f7c6:	370c      	adds	r7, #12
 801f7c8:	46bd      	mov	sp, r7
 801f7ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f7ce:	4770      	bx	lr
 801f7d0:	200005d0 	.word	0x200005d0

0801f7d4 <USBD_MSC_GetFSCfgDesc>:
  *         return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_MSC_GetFSCfgDesc(uint16_t *length)
{
 801f7d4:	b480      	push	{r7}
 801f7d6:	b083      	sub	sp, #12
 801f7d8:	af00      	add	r7, sp, #0
 801f7da:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_MSC_CfgFSDesc);
 801f7dc:	687b      	ldr	r3, [r7, #4]
 801f7de:	2220      	movs	r2, #32
 801f7e0:	801a      	strh	r2, [r3, #0]

  return USBD_MSC_CfgFSDesc;
 801f7e2:	4b03      	ldr	r3, [pc, #12]	; (801f7f0 <USBD_MSC_GetFSCfgDesc+0x1c>)
}
 801f7e4:	4618      	mov	r0, r3
 801f7e6:	370c      	adds	r7, #12
 801f7e8:	46bd      	mov	sp, r7
 801f7ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f7ee:	4770      	bx	lr
 801f7f0:	200005f0 	.word	0x200005f0

0801f7f4 <USBD_MSC_GetOtherSpeedCfgDesc>:
  *         return other speed configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_MSC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 801f7f4:	b480      	push	{r7}
 801f7f6:	b083      	sub	sp, #12
 801f7f8:	af00      	add	r7, sp, #0
 801f7fa:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_MSC_OtherSpeedCfgDesc);
 801f7fc:	687b      	ldr	r3, [r7, #4]
 801f7fe:	2220      	movs	r2, #32
 801f800:	801a      	strh	r2, [r3, #0]

  return USBD_MSC_OtherSpeedCfgDesc;
 801f802:	4b03      	ldr	r3, [pc, #12]	; (801f810 <USBD_MSC_GetOtherSpeedCfgDesc+0x1c>)
}
 801f804:	4618      	mov	r0, r3
 801f806:	370c      	adds	r7, #12
 801f808:	46bd      	mov	sp, r7
 801f80a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f80e:	4770      	bx	lr
 801f810:	20000610 	.word	0x20000610

0801f814 <USBD_MSC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_MSC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 801f814:	b480      	push	{r7}
 801f816:	b083      	sub	sp, #12
 801f818:	af00      	add	r7, sp, #0
 801f81a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_MSC_DeviceQualifierDesc);
 801f81c:	687b      	ldr	r3, [r7, #4]
 801f81e:	220a      	movs	r2, #10
 801f820:	801a      	strh	r2, [r3, #0]

  return USBD_MSC_DeviceQualifierDesc;
 801f822:	4b03      	ldr	r3, [pc, #12]	; (801f830 <USBD_MSC_GetDeviceQualifierDescriptor+0x1c>)
}
 801f824:	4618      	mov	r0, r3
 801f826:	370c      	adds	r7, #12
 801f828:	46bd      	mov	sp, r7
 801f82a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f82e:	4770      	bx	lr
 801f830:	20000630 	.word	0x20000630

0801f834 <USBD_MSC_RegisterStorage>:
  * @brief  USBD_MSC_RegisterStorage
  * @param  fops: storage callback
  * @retval status
  */
uint8_t USBD_MSC_RegisterStorage(USBD_HandleTypeDef *pdev, USBD_StorageTypeDef *fops)
{
 801f834:	b480      	push	{r7}
 801f836:	b083      	sub	sp, #12
 801f838:	af00      	add	r7, sp, #0
 801f83a:	6078      	str	r0, [r7, #4]
 801f83c:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 801f83e:	683b      	ldr	r3, [r7, #0]
 801f840:	2b00      	cmp	r3, #0
 801f842:	d101      	bne.n	801f848 <USBD_MSC_RegisterStorage+0x14>
  {
    return (uint8_t)USBD_FAIL;
 801f844:	2303      	movs	r3, #3
 801f846:	e004      	b.n	801f852 <USBD_MSC_RegisterStorage+0x1e>
  }

  pdev->pUserData = fops;
 801f848:	687b      	ldr	r3, [r7, #4]
 801f84a:	683a      	ldr	r2, [r7, #0]
 801f84c:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 801f850:	2300      	movs	r3, #0
}
 801f852:	4618      	mov	r0, r3
 801f854:	370c      	adds	r7, #12
 801f856:	46bd      	mov	sp, r7
 801f858:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f85c:	4770      	bx	lr

0801f85e <MSC_BOT_Init>:
  *         Initialize the BOT Process
  * @param  pdev: device instance
  * @retval None
  */
void MSC_BOT_Init(USBD_HandleTypeDef *pdev)
{
 801f85e:	b580      	push	{r7, lr}
 801f860:	b084      	sub	sp, #16
 801f862:	af00      	add	r7, sp, #0
 801f864:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 801f866:	687b      	ldr	r3, [r7, #4]
 801f868:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801f86c:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 801f86e:	68fb      	ldr	r3, [r7, #12]
 801f870:	2b00      	cmp	r3, #0
 801f872:	d028      	beq.n	801f8c6 <MSC_BOT_Init+0x68>
  {
    return;
  }

  hmsc->bot_state = USBD_BOT_IDLE;
 801f874:	68fb      	ldr	r3, [r7, #12]
 801f876:	2200      	movs	r2, #0
 801f878:	721a      	strb	r2, [r3, #8]
  hmsc->bot_status = USBD_BOT_STATUS_NORMAL;
 801f87a:	68fb      	ldr	r3, [r7, #12]
 801f87c:	2200      	movs	r2, #0
 801f87e:	725a      	strb	r2, [r3, #9]

  hmsc->scsi_sense_tail = 0U;
 801f880:	68fb      	ldr	r3, [r7, #12]
 801f882:	2200      	movs	r2, #0
 801f884:	f883 2261 	strb.w	r2, [r3, #609]	; 0x261
  hmsc->scsi_sense_head = 0U;
 801f888:	68fb      	ldr	r3, [r7, #12]
 801f88a:	2200      	movs	r2, #0
 801f88c:	f883 2260 	strb.w	r2, [r3, #608]	; 0x260
  hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 801f890:	68fb      	ldr	r3, [r7, #12]
 801f892:	2200      	movs	r2, #0
 801f894:	f883 2262 	strb.w	r2, [r3, #610]	; 0x262

  ((USBD_StorageTypeDef *)pdev->pUserData)->Init(0U);
 801f898:	687b      	ldr	r3, [r7, #4]
 801f89a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 801f89e:	681b      	ldr	r3, [r3, #0]
 801f8a0:	2000      	movs	r0, #0
 801f8a2:	4798      	blx	r3

  (void)USBD_LL_FlushEP(pdev, MSC_EPOUT_ADDR);
 801f8a4:	2101      	movs	r1, #1
 801f8a6:	6878      	ldr	r0, [r7, #4]
 801f8a8:	f003 f924 	bl	8022af4 <USBD_LL_FlushEP>
  (void)USBD_LL_FlushEP(pdev, MSC_EPIN_ADDR);
 801f8ac:	2181      	movs	r1, #129	; 0x81
 801f8ae:	6878      	ldr	r0, [r7, #4]
 801f8b0:	f003 f920 	bl	8022af4 <USBD_LL_FlushEP>

  /* Prepare EP to Receive First BOT Cmd */
  (void)USBD_LL_PrepareReceive(pdev, MSC_EPOUT_ADDR, (uint8_t *)&hmsc->cbw,
 801f8b4:	68fb      	ldr	r3, [r7, #12]
 801f8b6:	f503 7204 	add.w	r2, r3, #528	; 0x210
 801f8ba:	231f      	movs	r3, #31
 801f8bc:	2101      	movs	r1, #1
 801f8be:	6878      	ldr	r0, [r7, #4]
 801f8c0:	f003 f9e1 	bl	8022c86 <USBD_LL_PrepareReceive>
 801f8c4:	e000      	b.n	801f8c8 <MSC_BOT_Init+0x6a>
    return;
 801f8c6:	bf00      	nop
                               USBD_BOT_CBW_LENGTH);
}
 801f8c8:	3710      	adds	r7, #16
 801f8ca:	46bd      	mov	sp, r7
 801f8cc:	bd80      	pop	{r7, pc}

0801f8ce <MSC_BOT_Reset>:
  *         Reset the BOT Machine
  * @param  pdev: device instance
  * @retval  None
  */
void MSC_BOT_Reset(USBD_HandleTypeDef *pdev)
{
 801f8ce:	b580      	push	{r7, lr}
 801f8d0:	b084      	sub	sp, #16
 801f8d2:	af00      	add	r7, sp, #0
 801f8d4:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 801f8d6:	687b      	ldr	r3, [r7, #4]
 801f8d8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801f8dc:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 801f8de:	68fb      	ldr	r3, [r7, #12]
 801f8e0:	2b00      	cmp	r3, #0
 801f8e2:	d016      	beq.n	801f912 <MSC_BOT_Reset+0x44>
  {
    return;
  }

  hmsc->bot_state  = USBD_BOT_IDLE;
 801f8e4:	68fb      	ldr	r3, [r7, #12]
 801f8e6:	2200      	movs	r2, #0
 801f8e8:	721a      	strb	r2, [r3, #8]
  hmsc->bot_status = USBD_BOT_STATUS_RECOVERY;
 801f8ea:	68fb      	ldr	r3, [r7, #12]
 801f8ec:	2201      	movs	r2, #1
 801f8ee:	725a      	strb	r2, [r3, #9]

  (void)USBD_LL_ClearStallEP(pdev, MSC_EPIN_ADDR);
 801f8f0:	2181      	movs	r1, #129	; 0x81
 801f8f2:	6878      	ldr	r0, [r7, #4]
 801f8f4:	f003 f93c 	bl	8022b70 <USBD_LL_ClearStallEP>
  (void)USBD_LL_ClearStallEP(pdev, MSC_EPOUT_ADDR);
 801f8f8:	2101      	movs	r1, #1
 801f8fa:	6878      	ldr	r0, [r7, #4]
 801f8fc:	f003 f938 	bl	8022b70 <USBD_LL_ClearStallEP>

  /* Prepare EP to Receive First BOT Cmd */
  (void)USBD_LL_PrepareReceive(pdev, MSC_EPOUT_ADDR, (uint8_t *)&hmsc->cbw,
 801f900:	68fb      	ldr	r3, [r7, #12]
 801f902:	f503 7204 	add.w	r2, r3, #528	; 0x210
 801f906:	231f      	movs	r3, #31
 801f908:	2101      	movs	r1, #1
 801f90a:	6878      	ldr	r0, [r7, #4]
 801f90c:	f003 f9bb 	bl	8022c86 <USBD_LL_PrepareReceive>
 801f910:	e000      	b.n	801f914 <MSC_BOT_Reset+0x46>
    return;
 801f912:	bf00      	nop
                               USBD_BOT_CBW_LENGTH);
}
 801f914:	3710      	adds	r7, #16
 801f916:	46bd      	mov	sp, r7
 801f918:	bd80      	pop	{r7, pc}

0801f91a <MSC_BOT_DeInit>:
  *         DeInitialize the BOT Machine
  * @param  pdev: device instance
  * @retval None
  */
void MSC_BOT_DeInit(USBD_HandleTypeDef  *pdev)
{
 801f91a:	b480      	push	{r7}
 801f91c:	b085      	sub	sp, #20
 801f91e:	af00      	add	r7, sp, #0
 801f920:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 801f922:	687b      	ldr	r3, [r7, #4]
 801f924:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801f928:	60fb      	str	r3, [r7, #12]

  if (hmsc != NULL)
 801f92a:	68fb      	ldr	r3, [r7, #12]
 801f92c:	2b00      	cmp	r3, #0
 801f92e:	d002      	beq.n	801f936 <MSC_BOT_DeInit+0x1c>
  {
    hmsc->bot_state = USBD_BOT_IDLE;
 801f930:	68fb      	ldr	r3, [r7, #12]
 801f932:	2200      	movs	r2, #0
 801f934:	721a      	strb	r2, [r3, #8]
  }
}
 801f936:	bf00      	nop
 801f938:	3714      	adds	r7, #20
 801f93a:	46bd      	mov	sp, r7
 801f93c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f940:	4770      	bx	lr

0801f942 <MSC_BOT_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval None
  */
void MSC_BOT_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 801f942:	b580      	push	{r7, lr}
 801f944:	b084      	sub	sp, #16
 801f946:	af00      	add	r7, sp, #0
 801f948:	6078      	str	r0, [r7, #4]
 801f94a:	460b      	mov	r3, r1
 801f94c:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 801f94e:	687b      	ldr	r3, [r7, #4]
 801f950:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801f954:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 801f956:	68fb      	ldr	r3, [r7, #12]
 801f958:	2b00      	cmp	r3, #0
 801f95a:	d020      	beq.n	801f99e <MSC_BOT_DataIn+0x5c>
  {
    return;
  }

  switch (hmsc->bot_state)
 801f95c:	68fb      	ldr	r3, [r7, #12]
 801f95e:	7a1b      	ldrb	r3, [r3, #8]
 801f960:	2b02      	cmp	r3, #2
 801f962:	d005      	beq.n	801f970 <MSC_BOT_DataIn+0x2e>
 801f964:	2b02      	cmp	r3, #2
 801f966:	db1c      	blt.n	801f9a2 <MSC_BOT_DataIn+0x60>
 801f968:	3b03      	subs	r3, #3
 801f96a:	2b01      	cmp	r3, #1
 801f96c:	d819      	bhi.n	801f9a2 <MSC_BOT_DataIn+0x60>
 801f96e:	e011      	b.n	801f994 <MSC_BOT_DataIn+0x52>
  {
    case USBD_BOT_DATA_IN:
      if (SCSI_ProcessCmd(pdev, hmsc->cbw.bLUN, &hmsc->cbw.CB[0]) < 0)
 801f970:	68fb      	ldr	r3, [r7, #12]
 801f972:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 801f976:	68fb      	ldr	r3, [r7, #12]
 801f978:	f203 231f 	addw	r3, r3, #543	; 0x21f
 801f97c:	461a      	mov	r2, r3
 801f97e:	6878      	ldr	r0, [r7, #4]
 801f980:	f000 f992 	bl	801fca8 <SCSI_ProcessCmd>
 801f984:	4603      	mov	r3, r0
 801f986:	2b00      	cmp	r3, #0
 801f988:	da0d      	bge.n	801f9a6 <MSC_BOT_DataIn+0x64>
      {
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 801f98a:	2101      	movs	r1, #1
 801f98c:	6878      	ldr	r0, [r7, #4]
 801f98e:	f000 f8fb 	bl	801fb88 <MSC_BOT_SendCSW>
      }
      break;
 801f992:	e008      	b.n	801f9a6 <MSC_BOT_DataIn+0x64>

    case USBD_BOT_SEND_DATA:
    case USBD_BOT_LAST_DATA_IN:
      MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_PASSED);
 801f994:	2100      	movs	r1, #0
 801f996:	6878      	ldr	r0, [r7, #4]
 801f998:	f000 f8f6 	bl	801fb88 <MSC_BOT_SendCSW>
      break;
 801f99c:	e004      	b.n	801f9a8 <MSC_BOT_DataIn+0x66>
    return;
 801f99e:	bf00      	nop
 801f9a0:	e002      	b.n	801f9a8 <MSC_BOT_DataIn+0x66>

    default:
      break;
 801f9a2:	bf00      	nop
 801f9a4:	e000      	b.n	801f9a8 <MSC_BOT_DataIn+0x66>
      break;
 801f9a6:	bf00      	nop
  }
}
 801f9a8:	3710      	adds	r7, #16
 801f9aa:	46bd      	mov	sp, r7
 801f9ac:	bd80      	pop	{r7, pc}

0801f9ae <MSC_BOT_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval None
  */
void MSC_BOT_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 801f9ae:	b580      	push	{r7, lr}
 801f9b0:	b084      	sub	sp, #16
 801f9b2:	af00      	add	r7, sp, #0
 801f9b4:	6078      	str	r0, [r7, #4]
 801f9b6:	460b      	mov	r3, r1
 801f9b8:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 801f9ba:	687b      	ldr	r3, [r7, #4]
 801f9bc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801f9c0:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 801f9c2:	68fb      	ldr	r3, [r7, #12]
 801f9c4:	2b00      	cmp	r3, #0
 801f9c6:	d01c      	beq.n	801fa02 <MSC_BOT_DataOut+0x54>
  {
    return;
  }

  switch (hmsc->bot_state)
 801f9c8:	68fb      	ldr	r3, [r7, #12]
 801f9ca:	7a1b      	ldrb	r3, [r3, #8]
 801f9cc:	2b00      	cmp	r3, #0
 801f9ce:	d002      	beq.n	801f9d6 <MSC_BOT_DataOut+0x28>
 801f9d0:	2b01      	cmp	r3, #1
 801f9d2:	d004      	beq.n	801f9de <MSC_BOT_DataOut+0x30>
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
      }
      break;

    default:
      break;
 801f9d4:	e018      	b.n	801fa08 <MSC_BOT_DataOut+0x5a>
      MSC_BOT_CBW_Decode(pdev);
 801f9d6:	6878      	ldr	r0, [r7, #4]
 801f9d8:	f000 f81a 	bl	801fa10 <MSC_BOT_CBW_Decode>
      break;
 801f9dc:	e014      	b.n	801fa08 <MSC_BOT_DataOut+0x5a>
      if (SCSI_ProcessCmd(pdev, hmsc->cbw.bLUN, &hmsc->cbw.CB[0]) < 0)
 801f9de:	68fb      	ldr	r3, [r7, #12]
 801f9e0:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 801f9e4:	68fb      	ldr	r3, [r7, #12]
 801f9e6:	f203 231f 	addw	r3, r3, #543	; 0x21f
 801f9ea:	461a      	mov	r2, r3
 801f9ec:	6878      	ldr	r0, [r7, #4]
 801f9ee:	f000 f95b 	bl	801fca8 <SCSI_ProcessCmd>
 801f9f2:	4603      	mov	r3, r0
 801f9f4:	2b00      	cmp	r3, #0
 801f9f6:	da06      	bge.n	801fa06 <MSC_BOT_DataOut+0x58>
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 801f9f8:	2101      	movs	r1, #1
 801f9fa:	6878      	ldr	r0, [r7, #4]
 801f9fc:	f000 f8c4 	bl	801fb88 <MSC_BOT_SendCSW>
      break;
 801fa00:	e001      	b.n	801fa06 <MSC_BOT_DataOut+0x58>
    return;
 801fa02:	bf00      	nop
 801fa04:	e000      	b.n	801fa08 <MSC_BOT_DataOut+0x5a>
      break;
 801fa06:	bf00      	nop
  }
}
 801fa08:	3710      	adds	r7, #16
 801fa0a:	46bd      	mov	sp, r7
 801fa0c:	bd80      	pop	{r7, pc}
	...

0801fa10 <MSC_BOT_CBW_Decode>:
  *         Decode the CBW command and set the BOT state machine accordingly
  * @param  pdev: device instance
  * @retval None
  */
static void  MSC_BOT_CBW_Decode(USBD_HandleTypeDef *pdev)
{
 801fa10:	b580      	push	{r7, lr}
 801fa12:	b084      	sub	sp, #16
 801fa14:	af00      	add	r7, sp, #0
 801fa16:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 801fa18:	687b      	ldr	r3, [r7, #4]
 801fa1a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801fa1e:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 801fa20:	68fb      	ldr	r3, [r7, #12]
 801fa22:	2b00      	cmp	r3, #0
 801fa24:	d077      	beq.n	801fb16 <MSC_BOT_CBW_Decode+0x106>
  {
    return;
  }

  hmsc->csw.dTag = hmsc->cbw.dTag;
 801fa26:	68fb      	ldr	r3, [r7, #12]
 801fa28:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 801fa2c:	68fb      	ldr	r3, [r7, #12]
 801fa2e:	f8c3 2234 	str.w	r2, [r3, #564]	; 0x234
  hmsc->csw.dDataResidue = hmsc->cbw.dDataLength;
 801fa32:	68fb      	ldr	r3, [r7, #12]
 801fa34:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 801fa38:	68fb      	ldr	r3, [r7, #12]
 801fa3a:	f8c3 2238 	str.w	r2, [r3, #568]	; 0x238

  if ((USBD_LL_GetRxDataSize(pdev, MSC_EPOUT_ADDR) != USBD_BOT_CBW_LENGTH) ||
 801fa3e:	2101      	movs	r1, #1
 801fa40:	6878      	ldr	r0, [r7, #4]
 801fa42:	f003 f941 	bl	8022cc8 <USBD_LL_GetRxDataSize>
 801fa46:	4603      	mov	r3, r0
 801fa48:	2b1f      	cmp	r3, #31
 801fa4a:	d114      	bne.n	801fa76 <MSC_BOT_CBW_Decode+0x66>
      (hmsc->cbw.dSignature != USBD_BOT_CBW_SIGNATURE) ||
 801fa4c:	68fb      	ldr	r3, [r7, #12]
 801fa4e:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
  if ((USBD_LL_GetRxDataSize(pdev, MSC_EPOUT_ADDR) != USBD_BOT_CBW_LENGTH) ||
 801fa52:	4a34      	ldr	r2, [pc, #208]	; (801fb24 <MSC_BOT_CBW_Decode+0x114>)
 801fa54:	4293      	cmp	r3, r2
 801fa56:	d10e      	bne.n	801fa76 <MSC_BOT_CBW_Decode+0x66>
      (hmsc->cbw.bLUN > 1U) || (hmsc->cbw.bCBLength < 1U) ||
 801fa58:	68fb      	ldr	r3, [r7, #12]
 801fa5a:	f893 321d 	ldrb.w	r3, [r3, #541]	; 0x21d
      (hmsc->cbw.dSignature != USBD_BOT_CBW_SIGNATURE) ||
 801fa5e:	2b01      	cmp	r3, #1
 801fa60:	d809      	bhi.n	801fa76 <MSC_BOT_CBW_Decode+0x66>
      (hmsc->cbw.bLUN > 1U) || (hmsc->cbw.bCBLength < 1U) ||
 801fa62:	68fb      	ldr	r3, [r7, #12]
 801fa64:	f893 321e 	ldrb.w	r3, [r3, #542]	; 0x21e
 801fa68:	2b00      	cmp	r3, #0
 801fa6a:	d004      	beq.n	801fa76 <MSC_BOT_CBW_Decode+0x66>
      (hmsc->cbw.bCBLength > 16U))
 801fa6c:	68fb      	ldr	r3, [r7, #12]
 801fa6e:	f893 321e 	ldrb.w	r3, [r3, #542]	; 0x21e
      (hmsc->cbw.bLUN > 1U) || (hmsc->cbw.bCBLength < 1U) ||
 801fa72:	2b10      	cmp	r3, #16
 801fa74:	d90e      	bls.n	801fa94 <MSC_BOT_CBW_Decode+0x84>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 801fa76:	68fb      	ldr	r3, [r7, #12]
 801fa78:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 801fa7c:	2320      	movs	r3, #32
 801fa7e:	2205      	movs	r2, #5
 801fa80:	6878      	ldr	r0, [r7, #4]
 801fa82:	f000 fdbc 	bl	80205fe <SCSI_SenseCode>

    hmsc->bot_status = USBD_BOT_STATUS_ERROR;
 801fa86:	68fb      	ldr	r3, [r7, #12]
 801fa88:	2202      	movs	r2, #2
 801fa8a:	725a      	strb	r2, [r3, #9]
    MSC_BOT_Abort(pdev);
 801fa8c:	6878      	ldr	r0, [r7, #4]
 801fa8e:	f000 f8ab 	bl	801fbe8 <MSC_BOT_Abort>
 801fa92:	e043      	b.n	801fb1c <MSC_BOT_CBW_Decode+0x10c>
  }
  else
  {
    if (SCSI_ProcessCmd(pdev, hmsc->cbw.bLUN, &hmsc->cbw.CB[0]) < 0)
 801fa94:	68fb      	ldr	r3, [r7, #12]
 801fa96:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 801fa9a:	68fb      	ldr	r3, [r7, #12]
 801fa9c:	f203 231f 	addw	r3, r3, #543	; 0x21f
 801faa0:	461a      	mov	r2, r3
 801faa2:	6878      	ldr	r0, [r7, #4]
 801faa4:	f000 f900 	bl	801fca8 <SCSI_ProcessCmd>
 801faa8:	4603      	mov	r3, r0
 801faaa:	2b00      	cmp	r3, #0
 801faac:	da0c      	bge.n	801fac8 <MSC_BOT_CBW_Decode+0xb8>
    {
      if (hmsc->bot_state == USBD_BOT_NO_DATA)
 801faae:	68fb      	ldr	r3, [r7, #12]
 801fab0:	7a1b      	ldrb	r3, [r3, #8]
 801fab2:	2b05      	cmp	r3, #5
 801fab4:	d104      	bne.n	801fac0 <MSC_BOT_CBW_Decode+0xb0>
      {
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 801fab6:	2101      	movs	r1, #1
 801fab8:	6878      	ldr	r0, [r7, #4]
 801faba:	f000 f865 	bl	801fb88 <MSC_BOT_SendCSW>
 801fabe:	e02d      	b.n	801fb1c <MSC_BOT_CBW_Decode+0x10c>
      }
      else
      {
        MSC_BOT_Abort(pdev);
 801fac0:	6878      	ldr	r0, [r7, #4]
 801fac2:	f000 f891 	bl	801fbe8 <MSC_BOT_Abort>
 801fac6:	e029      	b.n	801fb1c <MSC_BOT_CBW_Decode+0x10c>
      }
    }
    /* Burst xfer handled internally */
    else if ((hmsc->bot_state != USBD_BOT_DATA_IN) &&
 801fac8:	68fb      	ldr	r3, [r7, #12]
 801faca:	7a1b      	ldrb	r3, [r3, #8]
 801facc:	2b02      	cmp	r3, #2
 801face:	d024      	beq.n	801fb1a <MSC_BOT_CBW_Decode+0x10a>
             (hmsc->bot_state != USBD_BOT_DATA_OUT) &&
 801fad0:	68fb      	ldr	r3, [r7, #12]
 801fad2:	7a1b      	ldrb	r3, [r3, #8]
    else if ((hmsc->bot_state != USBD_BOT_DATA_IN) &&
 801fad4:	2b01      	cmp	r3, #1
 801fad6:	d020      	beq.n	801fb1a <MSC_BOT_CBW_Decode+0x10a>
             (hmsc->bot_state != USBD_BOT_LAST_DATA_IN))
 801fad8:	68fb      	ldr	r3, [r7, #12]
 801fada:	7a1b      	ldrb	r3, [r3, #8]
             (hmsc->bot_state != USBD_BOT_DATA_OUT) &&
 801fadc:	2b03      	cmp	r3, #3
 801fade:	d01c      	beq.n	801fb1a <MSC_BOT_CBW_Decode+0x10a>
    {
      if (hmsc->bot_data_length > 0U)
 801fae0:	68fb      	ldr	r3, [r7, #12]
 801fae2:	68db      	ldr	r3, [r3, #12]
 801fae4:	2b00      	cmp	r3, #0
 801fae6:	d009      	beq.n	801fafc <MSC_BOT_CBW_Decode+0xec>
      {
        MSC_BOT_SendData(pdev, hmsc->bot_data, hmsc->bot_data_length);
 801fae8:	68fb      	ldr	r3, [r7, #12]
 801faea:	f103 0110 	add.w	r1, r3, #16
 801faee:	68fb      	ldr	r3, [r7, #12]
 801faf0:	68db      	ldr	r3, [r3, #12]
 801faf2:	461a      	mov	r2, r3
 801faf4:	6878      	ldr	r0, [r7, #4]
 801faf6:	f000 f817 	bl	801fb28 <MSC_BOT_SendData>
      if (hmsc->bot_data_length > 0U)
 801fafa:	e00f      	b.n	801fb1c <MSC_BOT_CBW_Decode+0x10c>
      }
      else if (hmsc->bot_data_length == 0U)
 801fafc:	68fb      	ldr	r3, [r7, #12]
 801fafe:	68db      	ldr	r3, [r3, #12]
 801fb00:	2b00      	cmp	r3, #0
 801fb02:	d104      	bne.n	801fb0e <MSC_BOT_CBW_Decode+0xfe>
      {
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_PASSED);
 801fb04:	2100      	movs	r1, #0
 801fb06:	6878      	ldr	r0, [r7, #4]
 801fb08:	f000 f83e 	bl	801fb88 <MSC_BOT_SendCSW>
      if (hmsc->bot_data_length > 0U)
 801fb0c:	e006      	b.n	801fb1c <MSC_BOT_CBW_Decode+0x10c>
      }
      else
      {
        MSC_BOT_Abort(pdev);
 801fb0e:	6878      	ldr	r0, [r7, #4]
 801fb10:	f000 f86a 	bl	801fbe8 <MSC_BOT_Abort>
      if (hmsc->bot_data_length > 0U)
 801fb14:	e002      	b.n	801fb1c <MSC_BOT_CBW_Decode+0x10c>
    return;
 801fb16:	bf00      	nop
 801fb18:	e000      	b.n	801fb1c <MSC_BOT_CBW_Decode+0x10c>
      }
    }
    else
    {
      return;
 801fb1a:	bf00      	nop
    }
  }
}
 801fb1c:	3710      	adds	r7, #16
 801fb1e:	46bd      	mov	sp, r7
 801fb20:	bd80      	pop	{r7, pc}
 801fb22:	bf00      	nop
 801fb24:	43425355 	.word	0x43425355

0801fb28 <MSC_BOT_SendData>:
  * @param  buf: pointer to data buffer
  * @param  len: Data Length
  * @retval None
  */
static void  MSC_BOT_SendData(USBD_HandleTypeDef *pdev, uint8_t *pbuf, uint32_t len)
{
 801fb28:	b580      	push	{r7, lr}
 801fb2a:	b086      	sub	sp, #24
 801fb2c:	af00      	add	r7, sp, #0
 801fb2e:	60f8      	str	r0, [r7, #12]
 801fb30:	60b9      	str	r1, [r7, #8]
 801fb32:	607a      	str	r2, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 801fb34:	68fb      	ldr	r3, [r7, #12]
 801fb36:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801fb3a:	617b      	str	r3, [r7, #20]

  uint32_t length = MIN(hmsc->cbw.dDataLength, len);
 801fb3c:	697b      	ldr	r3, [r7, #20]
 801fb3e:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 801fb42:	687a      	ldr	r2, [r7, #4]
 801fb44:	4293      	cmp	r3, r2
 801fb46:	bf28      	it	cs
 801fb48:	4613      	movcs	r3, r2
 801fb4a:	613b      	str	r3, [r7, #16]

  if (hmsc == NULL)
 801fb4c:	697b      	ldr	r3, [r7, #20]
 801fb4e:	2b00      	cmp	r3, #0
 801fb50:	d015      	beq.n	801fb7e <MSC_BOT_SendData+0x56>
  {
    return;
  }

  hmsc->csw.dDataResidue -= len;
 801fb52:	697b      	ldr	r3, [r7, #20]
 801fb54:	f8d3 2238 	ldr.w	r2, [r3, #568]	; 0x238
 801fb58:	687b      	ldr	r3, [r7, #4]
 801fb5a:	1ad2      	subs	r2, r2, r3
 801fb5c:	697b      	ldr	r3, [r7, #20]
 801fb5e:	f8c3 2238 	str.w	r2, [r3, #568]	; 0x238
  hmsc->csw.bStatus = USBD_CSW_CMD_PASSED;
 801fb62:	697b      	ldr	r3, [r7, #20]
 801fb64:	2200      	movs	r2, #0
 801fb66:	f883 223c 	strb.w	r2, [r3, #572]	; 0x23c
  hmsc->bot_state = USBD_BOT_SEND_DATA;
 801fb6a:	697b      	ldr	r3, [r7, #20]
 801fb6c:	2204      	movs	r2, #4
 801fb6e:	721a      	strb	r2, [r3, #8]

  (void)USBD_LL_Transmit(pdev, MSC_EPIN_ADDR, pbuf, length);
 801fb70:	693b      	ldr	r3, [r7, #16]
 801fb72:	68ba      	ldr	r2, [r7, #8]
 801fb74:	2181      	movs	r1, #129	; 0x81
 801fb76:	68f8      	ldr	r0, [r7, #12]
 801fb78:	f003 f864 	bl	8022c44 <USBD_LL_Transmit>
 801fb7c:	e000      	b.n	801fb80 <MSC_BOT_SendData+0x58>
    return;
 801fb7e:	bf00      	nop
}
 801fb80:	3718      	adds	r7, #24
 801fb82:	46bd      	mov	sp, r7
 801fb84:	bd80      	pop	{r7, pc}
	...

0801fb88 <MSC_BOT_SendCSW>:
  * @param  pdev: device instance
  * @param  status : CSW status
  * @retval None
  */
void  MSC_BOT_SendCSW(USBD_HandleTypeDef *pdev, uint8_t CSW_Status)
{
 801fb88:	b580      	push	{r7, lr}
 801fb8a:	b084      	sub	sp, #16
 801fb8c:	af00      	add	r7, sp, #0
 801fb8e:	6078      	str	r0, [r7, #4]
 801fb90:	460b      	mov	r3, r1
 801fb92:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 801fb94:	687b      	ldr	r3, [r7, #4]
 801fb96:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801fb9a:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 801fb9c:	68fb      	ldr	r3, [r7, #12]
 801fb9e:	2b00      	cmp	r3, #0
 801fba0:	d01b      	beq.n	801fbda <MSC_BOT_SendCSW+0x52>
  {
    return;
  }

  hmsc->csw.dSignature = USBD_BOT_CSW_SIGNATURE;
 801fba2:	68fb      	ldr	r3, [r7, #12]
 801fba4:	4a0f      	ldr	r2, [pc, #60]	; (801fbe4 <MSC_BOT_SendCSW+0x5c>)
 801fba6:	f8c3 2230 	str.w	r2, [r3, #560]	; 0x230
  hmsc->csw.bStatus = CSW_Status;
 801fbaa:	68fb      	ldr	r3, [r7, #12]
 801fbac:	78fa      	ldrb	r2, [r7, #3]
 801fbae:	f883 223c 	strb.w	r2, [r3, #572]	; 0x23c
  hmsc->bot_state = USBD_BOT_IDLE;
 801fbb2:	68fb      	ldr	r3, [r7, #12]
 801fbb4:	2200      	movs	r2, #0
 801fbb6:	721a      	strb	r2, [r3, #8]

  (void)USBD_LL_Transmit(pdev, MSC_EPIN_ADDR, (uint8_t *)&hmsc->csw,
 801fbb8:	68fb      	ldr	r3, [r7, #12]
 801fbba:	f503 720c 	add.w	r2, r3, #560	; 0x230
 801fbbe:	230d      	movs	r3, #13
 801fbc0:	2181      	movs	r1, #129	; 0x81
 801fbc2:	6878      	ldr	r0, [r7, #4]
 801fbc4:	f003 f83e 	bl	8022c44 <USBD_LL_Transmit>
                         USBD_BOT_CSW_LENGTH);

  /* Prepare EP to Receive next Cmd */
  (void)USBD_LL_PrepareReceive(pdev, MSC_EPOUT_ADDR, (uint8_t *)&hmsc->cbw,
 801fbc8:	68fb      	ldr	r3, [r7, #12]
 801fbca:	f503 7204 	add.w	r2, r3, #528	; 0x210
 801fbce:	231f      	movs	r3, #31
 801fbd0:	2101      	movs	r1, #1
 801fbd2:	6878      	ldr	r0, [r7, #4]
 801fbd4:	f003 f857 	bl	8022c86 <USBD_LL_PrepareReceive>
 801fbd8:	e000      	b.n	801fbdc <MSC_BOT_SendCSW+0x54>
    return;
 801fbda:	bf00      	nop
                               USBD_BOT_CBW_LENGTH);
}
 801fbdc:	3710      	adds	r7, #16
 801fbde:	46bd      	mov	sp, r7
 801fbe0:	bd80      	pop	{r7, pc}
 801fbe2:	bf00      	nop
 801fbe4:	53425355 	.word	0x53425355

0801fbe8 <MSC_BOT_Abort>:
  * @param  pdev: device instance
  * @retval status
  */

static void  MSC_BOT_Abort(USBD_HandleTypeDef *pdev)
{
 801fbe8:	b580      	push	{r7, lr}
 801fbea:	b084      	sub	sp, #16
 801fbec:	af00      	add	r7, sp, #0
 801fbee:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 801fbf0:	687b      	ldr	r3, [r7, #4]
 801fbf2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801fbf6:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 801fbf8:	68fb      	ldr	r3, [r7, #12]
 801fbfa:	2b00      	cmp	r3, #0
 801fbfc:	d022      	beq.n	801fc44 <MSC_BOT_Abort+0x5c>
  {
    return;
  }

  if ((hmsc->cbw.bmFlags == 0U) &&
 801fbfe:	68fb      	ldr	r3, [r7, #12]
 801fc00:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
 801fc04:	2b00      	cmp	r3, #0
 801fc06:	d10c      	bne.n	801fc22 <MSC_BOT_Abort+0x3a>
      (hmsc->cbw.dDataLength != 0U) &&
 801fc08:	68fb      	ldr	r3, [r7, #12]
 801fc0a:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
  if ((hmsc->cbw.bmFlags == 0U) &&
 801fc0e:	2b00      	cmp	r3, #0
 801fc10:	d007      	beq.n	801fc22 <MSC_BOT_Abort+0x3a>
      (hmsc->bot_status == USBD_BOT_STATUS_NORMAL))
 801fc12:	68fb      	ldr	r3, [r7, #12]
 801fc14:	7a5b      	ldrb	r3, [r3, #9]
      (hmsc->cbw.dDataLength != 0U) &&
 801fc16:	2b00      	cmp	r3, #0
 801fc18:	d103      	bne.n	801fc22 <MSC_BOT_Abort+0x3a>
  {
    (void)USBD_LL_StallEP(pdev, MSC_EPOUT_ADDR);
 801fc1a:	2101      	movs	r1, #1
 801fc1c:	6878      	ldr	r0, [r7, #4]
 801fc1e:	f002 ff88 	bl	8022b32 <USBD_LL_StallEP>
  }

  (void)USBD_LL_StallEP(pdev, MSC_EPIN_ADDR);
 801fc22:	2181      	movs	r1, #129	; 0x81
 801fc24:	6878      	ldr	r0, [r7, #4]
 801fc26:	f002 ff84 	bl	8022b32 <USBD_LL_StallEP>

  if (hmsc->bot_status == USBD_BOT_STATUS_ERROR)
 801fc2a:	68fb      	ldr	r3, [r7, #12]
 801fc2c:	7a5b      	ldrb	r3, [r3, #9]
 801fc2e:	2b02      	cmp	r3, #2
 801fc30:	d109      	bne.n	801fc46 <MSC_BOT_Abort+0x5e>
  {
    (void)USBD_LL_StallEP(pdev, MSC_EPIN_ADDR);
 801fc32:	2181      	movs	r1, #129	; 0x81
 801fc34:	6878      	ldr	r0, [r7, #4]
 801fc36:	f002 ff7c 	bl	8022b32 <USBD_LL_StallEP>
    (void)USBD_LL_StallEP(pdev, MSC_EPOUT_ADDR);
 801fc3a:	2101      	movs	r1, #1
 801fc3c:	6878      	ldr	r0, [r7, #4]
 801fc3e:	f002 ff78 	bl	8022b32 <USBD_LL_StallEP>
 801fc42:	e000      	b.n	801fc46 <MSC_BOT_Abort+0x5e>
    return;
 801fc44:	bf00      	nop
  }
}
 801fc46:	3710      	adds	r7, #16
 801fc48:	46bd      	mov	sp, r7
 801fc4a:	bd80      	pop	{r7, pc}

0801fc4c <MSC_BOT_CplClrFeature>:
  * @param  epnum: endpoint index
  * @retval None
  */

void  MSC_BOT_CplClrFeature(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 801fc4c:	b580      	push	{r7, lr}
 801fc4e:	b084      	sub	sp, #16
 801fc50:	af00      	add	r7, sp, #0
 801fc52:	6078      	str	r0, [r7, #4]
 801fc54:	460b      	mov	r3, r1
 801fc56:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 801fc58:	687b      	ldr	r3, [r7, #4]
 801fc5a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801fc5e:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 801fc60:	68fb      	ldr	r3, [r7, #12]
 801fc62:	2b00      	cmp	r3, #0
 801fc64:	d019      	beq.n	801fc9a <MSC_BOT_CplClrFeature+0x4e>
  {
    return;
  }

  if (hmsc->bot_status == USBD_BOT_STATUS_ERROR) /* Bad CBW Signature */
 801fc66:	68fb      	ldr	r3, [r7, #12]
 801fc68:	7a5b      	ldrb	r3, [r3, #9]
 801fc6a:	2b02      	cmp	r3, #2
 801fc6c:	d108      	bne.n	801fc80 <MSC_BOT_CplClrFeature+0x34>
  {
    (void)USBD_LL_StallEP(pdev, MSC_EPIN_ADDR);
 801fc6e:	2181      	movs	r1, #129	; 0x81
 801fc70:	6878      	ldr	r0, [r7, #4]
 801fc72:	f002 ff5e 	bl	8022b32 <USBD_LL_StallEP>
    (void)USBD_LL_StallEP(pdev, MSC_EPOUT_ADDR);
 801fc76:	2101      	movs	r1, #1
 801fc78:	6878      	ldr	r0, [r7, #4]
 801fc7a:	f002 ff5a 	bl	8022b32 <USBD_LL_StallEP>
 801fc7e:	e00f      	b.n	801fca0 <MSC_BOT_CplClrFeature+0x54>
  }
  else if (((epnum & 0x80U) == 0x80U) && (hmsc->bot_status != USBD_BOT_STATUS_RECOVERY))
 801fc80:	f997 3003 	ldrsb.w	r3, [r7, #3]
 801fc84:	2b00      	cmp	r3, #0
 801fc86:	da0a      	bge.n	801fc9e <MSC_BOT_CplClrFeature+0x52>
 801fc88:	68fb      	ldr	r3, [r7, #12]
 801fc8a:	7a5b      	ldrb	r3, [r3, #9]
 801fc8c:	2b01      	cmp	r3, #1
 801fc8e:	d006      	beq.n	801fc9e <MSC_BOT_CplClrFeature+0x52>
  {
    MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 801fc90:	2101      	movs	r1, #1
 801fc92:	6878      	ldr	r0, [r7, #4]
 801fc94:	f7ff ff78 	bl	801fb88 <MSC_BOT_SendCSW>
 801fc98:	e002      	b.n	801fca0 <MSC_BOT_CplClrFeature+0x54>
    return;
 801fc9a:	bf00      	nop
 801fc9c:	e000      	b.n	801fca0 <MSC_BOT_CplClrFeature+0x54>
  }
  else
  {
    return;
 801fc9e:	bf00      	nop
  }
}
 801fca0:	3710      	adds	r7, #16
 801fca2:	46bd      	mov	sp, r7
 801fca4:	bd80      	pop	{r7, pc}
	...

0801fca8 <SCSI_ProcessCmd>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
int8_t SCSI_ProcessCmd(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *cmd)
{
 801fca8:	b580      	push	{r7, lr}
 801fcaa:	b086      	sub	sp, #24
 801fcac:	af00      	add	r7, sp, #0
 801fcae:	60f8      	str	r0, [r7, #12]
 801fcb0:	460b      	mov	r3, r1
 801fcb2:	607a      	str	r2, [r7, #4]
 801fcb4:	72fb      	strb	r3, [r7, #11]
  int8_t ret;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 801fcb6:	68fb      	ldr	r3, [r7, #12]
 801fcb8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801fcbc:	613b      	str	r3, [r7, #16]

  if (hmsc == NULL)
 801fcbe:	693b      	ldr	r3, [r7, #16]
 801fcc0:	2b00      	cmp	r3, #0
 801fcc2:	d102      	bne.n	801fcca <SCSI_ProcessCmd+0x22>
  {
    return -1;
 801fcc4:	f04f 33ff 	mov.w	r3, #4294967295
 801fcc8:	e168      	b.n	801ff9c <SCSI_ProcessCmd+0x2f4>
  }

  switch (cmd[0])
 801fcca:	687b      	ldr	r3, [r7, #4]
 801fccc:	781b      	ldrb	r3, [r3, #0]
 801fcce:	2baa      	cmp	r3, #170	; 0xaa
 801fcd0:	f000 8144 	beq.w	801ff5c <SCSI_ProcessCmd+0x2b4>
 801fcd4:	2baa      	cmp	r3, #170	; 0xaa
 801fcd6:	f300 8153 	bgt.w	801ff80 <SCSI_ProcessCmd+0x2d8>
 801fcda:	2ba8      	cmp	r3, #168	; 0xa8
 801fcdc:	f000 812c 	beq.w	801ff38 <SCSI_ProcessCmd+0x290>
 801fce0:	2ba8      	cmp	r3, #168	; 0xa8
 801fce2:	f300 814d 	bgt.w	801ff80 <SCSI_ProcessCmd+0x2d8>
 801fce6:	2b5a      	cmp	r3, #90	; 0x5a
 801fce8:	f300 80c0 	bgt.w	801fe6c <SCSI_ProcessCmd+0x1c4>
 801fcec:	2b00      	cmp	r3, #0
 801fcee:	f2c0 8147 	blt.w	801ff80 <SCSI_ProcessCmd+0x2d8>
 801fcf2:	2b5a      	cmp	r3, #90	; 0x5a
 801fcf4:	f200 8144 	bhi.w	801ff80 <SCSI_ProcessCmd+0x2d8>
 801fcf8:	a201      	add	r2, pc, #4	; (adr r2, 801fd00 <SCSI_ProcessCmd+0x58>)
 801fcfa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801fcfe:	bf00      	nop
 801fd00:	0801fe73 	.word	0x0801fe73
 801fd04:	0801ff81 	.word	0x0801ff81
 801fd08:	0801ff81 	.word	0x0801ff81
 801fd0c:	0801fe85 	.word	0x0801fe85
 801fd10:	0801ff81 	.word	0x0801ff81
 801fd14:	0801ff81 	.word	0x0801ff81
 801fd18:	0801ff81 	.word	0x0801ff81
 801fd1c:	0801ff81 	.word	0x0801ff81
 801fd20:	0801ff81 	.word	0x0801ff81
 801fd24:	0801ff81 	.word	0x0801ff81
 801fd28:	0801ff81 	.word	0x0801ff81
 801fd2c:	0801ff81 	.word	0x0801ff81
 801fd30:	0801ff81 	.word	0x0801ff81
 801fd34:	0801ff81 	.word	0x0801ff81
 801fd38:	0801ff81 	.word	0x0801ff81
 801fd3c:	0801ff81 	.word	0x0801ff81
 801fd40:	0801ff81 	.word	0x0801ff81
 801fd44:	0801ff81 	.word	0x0801ff81
 801fd48:	0801fe97 	.word	0x0801fe97
 801fd4c:	0801ff81 	.word	0x0801ff81
 801fd50:	0801ff81 	.word	0x0801ff81
 801fd54:	0801ff81 	.word	0x0801ff81
 801fd58:	0801ff81 	.word	0x0801ff81
 801fd5c:	0801ff81 	.word	0x0801ff81
 801fd60:	0801ff81 	.word	0x0801ff81
 801fd64:	0801ff81 	.word	0x0801ff81
 801fd68:	0801fecd 	.word	0x0801fecd
 801fd6c:	0801fea9 	.word	0x0801fea9
 801fd70:	0801ff81 	.word	0x0801ff81
 801fd74:	0801ff81 	.word	0x0801ff81
 801fd78:	0801febb 	.word	0x0801febb
 801fd7c:	0801ff81 	.word	0x0801ff81
 801fd80:	0801ff81 	.word	0x0801ff81
 801fd84:	0801ff81 	.word	0x0801ff81
 801fd88:	0801ff81 	.word	0x0801ff81
 801fd8c:	0801fef1 	.word	0x0801fef1
 801fd90:	0801ff81 	.word	0x0801ff81
 801fd94:	0801ff03 	.word	0x0801ff03
 801fd98:	0801ff81 	.word	0x0801ff81
 801fd9c:	0801ff81 	.word	0x0801ff81
 801fda0:	0801ff27 	.word	0x0801ff27
 801fda4:	0801ff81 	.word	0x0801ff81
 801fda8:	0801ff4b 	.word	0x0801ff4b
 801fdac:	0801ff81 	.word	0x0801ff81
 801fdb0:	0801ff81 	.word	0x0801ff81
 801fdb4:	0801ff81 	.word	0x0801ff81
 801fdb8:	0801ff81 	.word	0x0801ff81
 801fdbc:	0801ff6f 	.word	0x0801ff6f
 801fdc0:	0801ff81 	.word	0x0801ff81
 801fdc4:	0801ff81 	.word	0x0801ff81
 801fdc8:	0801ff81 	.word	0x0801ff81
 801fdcc:	0801ff81 	.word	0x0801ff81
 801fdd0:	0801ff81 	.word	0x0801ff81
 801fdd4:	0801ff81 	.word	0x0801ff81
 801fdd8:	0801ff81 	.word	0x0801ff81
 801fddc:	0801ff81 	.word	0x0801ff81
 801fde0:	0801ff81 	.word	0x0801ff81
 801fde4:	0801ff81 	.word	0x0801ff81
 801fde8:	0801ff81 	.word	0x0801ff81
 801fdec:	0801ff81 	.word	0x0801ff81
 801fdf0:	0801ff81 	.word	0x0801ff81
 801fdf4:	0801ff81 	.word	0x0801ff81
 801fdf8:	0801ff81 	.word	0x0801ff81
 801fdfc:	0801ff81 	.word	0x0801ff81
 801fe00:	0801ff81 	.word	0x0801ff81
 801fe04:	0801ff81 	.word	0x0801ff81
 801fe08:	0801ff81 	.word	0x0801ff81
 801fe0c:	0801ff81 	.word	0x0801ff81
 801fe10:	0801ff81 	.word	0x0801ff81
 801fe14:	0801ff81 	.word	0x0801ff81
 801fe18:	0801ff81 	.word	0x0801ff81
 801fe1c:	0801ff81 	.word	0x0801ff81
 801fe20:	0801ff81 	.word	0x0801ff81
 801fe24:	0801ff81 	.word	0x0801ff81
 801fe28:	0801ff81 	.word	0x0801ff81
 801fe2c:	0801ff81 	.word	0x0801ff81
 801fe30:	0801ff81 	.word	0x0801ff81
 801fe34:	0801ff81 	.word	0x0801ff81
 801fe38:	0801ff81 	.word	0x0801ff81
 801fe3c:	0801ff81 	.word	0x0801ff81
 801fe40:	0801ff81 	.word	0x0801ff81
 801fe44:	0801ff81 	.word	0x0801ff81
 801fe48:	0801ff81 	.word	0x0801ff81
 801fe4c:	0801ff81 	.word	0x0801ff81
 801fe50:	0801ff81 	.word	0x0801ff81
 801fe54:	0801ff81 	.word	0x0801ff81
 801fe58:	0801ff81 	.word	0x0801ff81
 801fe5c:	0801ff81 	.word	0x0801ff81
 801fe60:	0801ff81 	.word	0x0801ff81
 801fe64:	0801ff81 	.word	0x0801ff81
 801fe68:	0801fedf 	.word	0x0801fedf
 801fe6c:	2b9e      	cmp	r3, #158	; 0x9e
 801fe6e:	d051      	beq.n	801ff14 <SCSI_ProcessCmd+0x26c>
 801fe70:	e086      	b.n	801ff80 <SCSI_ProcessCmd+0x2d8>
  {
    case SCSI_TEST_UNIT_READY:
      ret = SCSI_TestUnitReady(pdev, lun, cmd);
 801fe72:	7afb      	ldrb	r3, [r7, #11]
 801fe74:	687a      	ldr	r2, [r7, #4]
 801fe76:	4619      	mov	r1, r3
 801fe78:	68f8      	ldr	r0, [r7, #12]
 801fe7a:	f000 f893 	bl	801ffa4 <SCSI_TestUnitReady>
 801fe7e:	4603      	mov	r3, r0
 801fe80:	75fb      	strb	r3, [r7, #23]
      break;
 801fe82:	e089      	b.n	801ff98 <SCSI_ProcessCmd+0x2f0>

    case SCSI_REQUEST_SENSE:
      ret = SCSI_RequestSense(pdev, lun, cmd);
 801fe84:	7afb      	ldrb	r3, [r7, #11]
 801fe86:	687a      	ldr	r2, [r7, #4]
 801fe88:	4619      	mov	r1, r3
 801fe8a:	68f8      	ldr	r0, [r7, #12]
 801fe8c:	f000 fb38 	bl	8020500 <SCSI_RequestSense>
 801fe90:	4603      	mov	r3, r0
 801fe92:	75fb      	strb	r3, [r7, #23]
      break;
 801fe94:	e080      	b.n	801ff98 <SCSI_ProcessCmd+0x2f0>

    case SCSI_INQUIRY:
      ret = SCSI_Inquiry(pdev, lun, cmd);
 801fe96:	7afb      	ldrb	r3, [r7, #11]
 801fe98:	687a      	ldr	r2, [r7, #4]
 801fe9a:	4619      	mov	r1, r3
 801fe9c:	68f8      	ldr	r0, [r7, #12]
 801fe9e:	f000 f8d1 	bl	8020044 <SCSI_Inquiry>
 801fea2:	4603      	mov	r3, r0
 801fea4:	75fb      	strb	r3, [r7, #23]
      break;
 801fea6:	e077      	b.n	801ff98 <SCSI_ProcessCmd+0x2f0>

    case SCSI_START_STOP_UNIT:
      ret = SCSI_StartStopUnit(pdev, lun, cmd);
 801fea8:	7afb      	ldrb	r3, [r7, #11]
 801feaa:	687a      	ldr	r2, [r7, #4]
 801feac:	4619      	mov	r1, r3
 801feae:	68f8      	ldr	r0, [r7, #12]
 801feb0:	f000 fbec 	bl	802068c <SCSI_StartStopUnit>
 801feb4:	4603      	mov	r3, r0
 801feb6:	75fb      	strb	r3, [r7, #23]
      break;
 801feb8:	e06e      	b.n	801ff98 <SCSI_ProcessCmd+0x2f0>

    case SCSI_ALLOW_MEDIUM_REMOVAL:
      ret = SCSI_AllowPreventRemovable(pdev, lun, cmd);
 801feba:	7afb      	ldrb	r3, [r7, #11]
 801febc:	687a      	ldr	r2, [r7, #4]
 801febe:	4619      	mov	r1, r3
 801fec0:	68f8      	ldr	r0, [r7, #12]
 801fec2:	f000 fc34 	bl	802072e <SCSI_AllowPreventRemovable>
 801fec6:	4603      	mov	r3, r0
 801fec8:	75fb      	strb	r3, [r7, #23]
      break;
 801feca:	e065      	b.n	801ff98 <SCSI_ProcessCmd+0x2f0>

    case SCSI_MODE_SENSE6:
      ret = SCSI_ModeSense6(pdev, lun, cmd);
 801fecc:	7afb      	ldrb	r3, [r7, #11]
 801fece:	687a      	ldr	r2, [r7, #4]
 801fed0:	4619      	mov	r1, r3
 801fed2:	68f8      	ldr	r0, [r7, #12]
 801fed4:	f000 fabc 	bl	8020450 <SCSI_ModeSense6>
 801fed8:	4603      	mov	r3, r0
 801feda:	75fb      	strb	r3, [r7, #23]
      break;
 801fedc:	e05c      	b.n	801ff98 <SCSI_ProcessCmd+0x2f0>

    case SCSI_MODE_SENSE10:
      ret = SCSI_ModeSense10(pdev, lun, cmd);
 801fede:	7afb      	ldrb	r3, [r7, #11]
 801fee0:	687a      	ldr	r2, [r7, #4]
 801fee2:	4619      	mov	r1, r3
 801fee4:	68f8      	ldr	r0, [r7, #12]
 801fee6:	f000 fadf 	bl	80204a8 <SCSI_ModeSense10>
 801feea:	4603      	mov	r3, r0
 801feec:	75fb      	strb	r3, [r7, #23]
      break;
 801feee:	e053      	b.n	801ff98 <SCSI_ProcessCmd+0x2f0>

    case SCSI_READ_FORMAT_CAPACITIES:
      ret = SCSI_ReadFormatCapacity(pdev, lun, cmd);
 801fef0:	7afb      	ldrb	r3, [r7, #11]
 801fef2:	687a      	ldr	r2, [r7, #4]
 801fef4:	4619      	mov	r1, r3
 801fef6:	68f8      	ldr	r0, [r7, #12]
 801fef8:	f000 fa37 	bl	802036a <SCSI_ReadFormatCapacity>
 801fefc:	4603      	mov	r3, r0
 801fefe:	75fb      	strb	r3, [r7, #23]
      break;
 801ff00:	e04a      	b.n	801ff98 <SCSI_ProcessCmd+0x2f0>

    case SCSI_READ_CAPACITY10:
      ret = SCSI_ReadCapacity10(pdev, lun, cmd);
 801ff02:	7afb      	ldrb	r3, [r7, #11]
 801ff04:	687a      	ldr	r2, [r7, #4]
 801ff06:	4619      	mov	r1, r3
 801ff08:	68f8      	ldr	r0, [r7, #12]
 801ff0a:	f000 f90f 	bl	802012c <SCSI_ReadCapacity10>
 801ff0e:	4603      	mov	r3, r0
 801ff10:	75fb      	strb	r3, [r7, #23]
      break;
 801ff12:	e041      	b.n	801ff98 <SCSI_ProcessCmd+0x2f0>

    case SCSI_READ_CAPACITY16:
      ret = SCSI_ReadCapacity16(pdev, lun, cmd);
 801ff14:	7afb      	ldrb	r3, [r7, #11]
 801ff16:	687a      	ldr	r2, [r7, #4]
 801ff18:	4619      	mov	r1, r3
 801ff1a:	68f8      	ldr	r0, [r7, #12]
 801ff1c:	f000 f97b 	bl	8020216 <SCSI_ReadCapacity16>
 801ff20:	4603      	mov	r3, r0
 801ff22:	75fb      	strb	r3, [r7, #23]
      break;
 801ff24:	e038      	b.n	801ff98 <SCSI_ProcessCmd+0x2f0>

    case SCSI_READ10:
      ret = SCSI_Read10(pdev, lun, cmd);
 801ff26:	7afb      	ldrb	r3, [r7, #11]
 801ff28:	687a      	ldr	r2, [r7, #4]
 801ff2a:	4619      	mov	r1, r3
 801ff2c:	68f8      	ldr	r0, [r7, #12]
 801ff2e:	f000 fc27 	bl	8020780 <SCSI_Read10>
 801ff32:	4603      	mov	r3, r0
 801ff34:	75fb      	strb	r3, [r7, #23]
      break;
 801ff36:	e02f      	b.n	801ff98 <SCSI_ProcessCmd+0x2f0>

    case SCSI_READ12:
      ret = SCSI_Read12(pdev, lun, cmd);
 801ff38:	7afb      	ldrb	r3, [r7, #11]
 801ff3a:	687a      	ldr	r2, [r7, #4]
 801ff3c:	4619      	mov	r1, r3
 801ff3e:	68f8      	ldr	r0, [r7, #12]
 801ff40:	f000 fcbe 	bl	80208c0 <SCSI_Read12>
 801ff44:	4603      	mov	r3, r0
 801ff46:	75fb      	strb	r3, [r7, #23]
      break;
 801ff48:	e026      	b.n	801ff98 <SCSI_ProcessCmd+0x2f0>

    case SCSI_WRITE10:
      ret = SCSI_Write10(pdev, lun, cmd);
 801ff4a:	7afb      	ldrb	r3, [r7, #11]
 801ff4c:	687a      	ldr	r2, [r7, #4]
 801ff4e:	4619      	mov	r1, r3
 801ff50:	68f8      	ldr	r0, [r7, #12]
 801ff52:	f000 fd60 	bl	8020a16 <SCSI_Write10>
 801ff56:	4603      	mov	r3, r0
 801ff58:	75fb      	strb	r3, [r7, #23]
      break;
 801ff5a:	e01d      	b.n	801ff98 <SCSI_ProcessCmd+0x2f0>

    case SCSI_WRITE12:
      ret = SCSI_Write12(pdev, lun, cmd);
 801ff5c:	7afb      	ldrb	r3, [r7, #11]
 801ff5e:	687a      	ldr	r2, [r7, #4]
 801ff60:	4619      	mov	r1, r3
 801ff62:	68f8      	ldr	r0, [r7, #12]
 801ff64:	f000 fe1c 	bl	8020ba0 <SCSI_Write12>
 801ff68:	4603      	mov	r3, r0
 801ff6a:	75fb      	strb	r3, [r7, #23]
      break;
 801ff6c:	e014      	b.n	801ff98 <SCSI_ProcessCmd+0x2f0>

    case SCSI_VERIFY10:
      ret = SCSI_Verify10(pdev, lun, cmd);
 801ff6e:	7afb      	ldrb	r3, [r7, #11]
 801ff70:	687a      	ldr	r2, [r7, #4]
 801ff72:	4619      	mov	r1, r3
 801ff74:	68f8      	ldr	r0, [r7, #12]
 801ff76:	f000 fee8 	bl	8020d4a <SCSI_Verify10>
 801ff7a:	4603      	mov	r3, r0
 801ff7c:	75fb      	strb	r3, [r7, #23]
      break;
 801ff7e:	e00b      	b.n	801ff98 <SCSI_ProcessCmd+0x2f0>

    default:
      SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, INVALID_CDB);
 801ff80:	7af9      	ldrb	r1, [r7, #11]
 801ff82:	2320      	movs	r3, #32
 801ff84:	2205      	movs	r2, #5
 801ff86:	68f8      	ldr	r0, [r7, #12]
 801ff88:	f000 fb39 	bl	80205fe <SCSI_SenseCode>
      hmsc->bot_status = USBD_BOT_STATUS_ERROR;
 801ff8c:	693b      	ldr	r3, [r7, #16]
 801ff8e:	2202      	movs	r2, #2
 801ff90:	725a      	strb	r2, [r3, #9]
      ret = -1;
 801ff92:	23ff      	movs	r3, #255	; 0xff
 801ff94:	75fb      	strb	r3, [r7, #23]
      break;
 801ff96:	bf00      	nop
  }

  return ret;
 801ff98:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801ff9c:	4618      	mov	r0, r3
 801ff9e:	3718      	adds	r7, #24
 801ffa0:	46bd      	mov	sp, r7
 801ffa2:	bd80      	pop	{r7, pc}

0801ffa4 <SCSI_TestUnitReady>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_TestUnitReady(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 801ffa4:	b580      	push	{r7, lr}
 801ffa6:	b086      	sub	sp, #24
 801ffa8:	af00      	add	r7, sp, #0
 801ffaa:	60f8      	str	r0, [r7, #12]
 801ffac:	460b      	mov	r3, r1
 801ffae:	607a      	str	r2, [r7, #4]
 801ffb0:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 801ffb2:	68fb      	ldr	r3, [r7, #12]
 801ffb4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801ffb8:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 801ffba:	697b      	ldr	r3, [r7, #20]
 801ffbc:	2b00      	cmp	r3, #0
 801ffbe:	d102      	bne.n	801ffc6 <SCSI_TestUnitReady+0x22>
  {
    return -1;
 801ffc0:	f04f 33ff 	mov.w	r3, #4294967295
 801ffc4:	e03a      	b.n	802003c <SCSI_TestUnitReady+0x98>
  }

  /* case 9 : Hi > D0 */
  if (hmsc->cbw.dDataLength != 0U)
 801ffc6:	697b      	ldr	r3, [r7, #20]
 801ffc8:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 801ffcc:	2b00      	cmp	r3, #0
 801ffce:	d00a      	beq.n	801ffe6 <SCSI_TestUnitReady+0x42>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 801ffd0:	697b      	ldr	r3, [r7, #20]
 801ffd2:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 801ffd6:	2320      	movs	r3, #32
 801ffd8:	2205      	movs	r2, #5
 801ffda:	68f8      	ldr	r0, [r7, #12]
 801ffdc:	f000 fb0f 	bl	80205fe <SCSI_SenseCode>

    return -1;
 801ffe0:	f04f 33ff 	mov.w	r3, #4294967295
 801ffe4:	e02a      	b.n	802003c <SCSI_TestUnitReady+0x98>
  }

  if (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED)
 801ffe6:	697b      	ldr	r3, [r7, #20]
 801ffe8:	f893 3262 	ldrb.w	r3, [r3, #610]	; 0x262
 801ffec:	2b02      	cmp	r3, #2
 801ffee:	d10b      	bne.n	8020008 <SCSI_TestUnitReady+0x64>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 801fff0:	7af9      	ldrb	r1, [r7, #11]
 801fff2:	233a      	movs	r3, #58	; 0x3a
 801fff4:	2202      	movs	r2, #2
 801fff6:	68f8      	ldr	r0, [r7, #12]
 801fff8:	f000 fb01 	bl	80205fe <SCSI_SenseCode>
    hmsc->bot_state = USBD_BOT_NO_DATA;
 801fffc:	697b      	ldr	r3, [r7, #20]
 801fffe:	2205      	movs	r2, #5
 8020000:	721a      	strb	r2, [r3, #8]
    return -1;
 8020002:	f04f 33ff 	mov.w	r3, #4294967295
 8020006:	e019      	b.n	802003c <SCSI_TestUnitReady+0x98>
  }

  if (((USBD_StorageTypeDef *)pdev->pUserData)->IsReady(lun) != 0)
 8020008:	68fb      	ldr	r3, [r7, #12]
 802000a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 802000e:	689b      	ldr	r3, [r3, #8]
 8020010:	7afa      	ldrb	r2, [r7, #11]
 8020012:	4610      	mov	r0, r2
 8020014:	4798      	blx	r3
 8020016:	4603      	mov	r3, r0
 8020018:	2b00      	cmp	r3, #0
 802001a:	d00b      	beq.n	8020034 <SCSI_TestUnitReady+0x90>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 802001c:	7af9      	ldrb	r1, [r7, #11]
 802001e:	233a      	movs	r3, #58	; 0x3a
 8020020:	2202      	movs	r2, #2
 8020022:	68f8      	ldr	r0, [r7, #12]
 8020024:	f000 faeb 	bl	80205fe <SCSI_SenseCode>
    hmsc->bot_state = USBD_BOT_NO_DATA;
 8020028:	697b      	ldr	r3, [r7, #20]
 802002a:	2205      	movs	r2, #5
 802002c:	721a      	strb	r2, [r3, #8]

    return -1;
 802002e:	f04f 33ff 	mov.w	r3, #4294967295
 8020032:	e003      	b.n	802003c <SCSI_TestUnitReady+0x98>
  }
  hmsc->bot_data_length = 0U;
 8020034:	697b      	ldr	r3, [r7, #20]
 8020036:	2200      	movs	r2, #0
 8020038:	60da      	str	r2, [r3, #12]

  return 0;
 802003a:	2300      	movs	r3, #0
}
 802003c:	4618      	mov	r0, r3
 802003e:	3718      	adds	r7, #24
 8020040:	46bd      	mov	sp, r7
 8020042:	bd80      	pop	{r7, pc}

08020044 <SCSI_Inquiry>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Inquiry(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8020044:	b580      	push	{r7, lr}
 8020046:	b088      	sub	sp, #32
 8020048:	af00      	add	r7, sp, #0
 802004a:	60f8      	str	r0, [r7, #12]
 802004c:	460b      	mov	r3, r1
 802004e:	607a      	str	r2, [r7, #4]
 8020050:	72fb      	strb	r3, [r7, #11]
  uint8_t *pPage;
  uint16_t len;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8020052:	68fb      	ldr	r3, [r7, #12]
 8020054:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8020058:	61bb      	str	r3, [r7, #24]

  if (hmsc == NULL)
 802005a:	69bb      	ldr	r3, [r7, #24]
 802005c:	2b00      	cmp	r3, #0
 802005e:	d102      	bne.n	8020066 <SCSI_Inquiry+0x22>
  {
    return -1;
 8020060:	f04f 33ff 	mov.w	r3, #4294967295
 8020064:	e05a      	b.n	802011c <SCSI_Inquiry+0xd8>
  }

  if (hmsc->cbw.dDataLength == 0U)
 8020066:	69bb      	ldr	r3, [r7, #24]
 8020068:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 802006c:	2b00      	cmp	r3, #0
 802006e:	d10a      	bne.n	8020086 <SCSI_Inquiry+0x42>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8020070:	69bb      	ldr	r3, [r7, #24]
 8020072:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 8020076:	2320      	movs	r3, #32
 8020078:	2205      	movs	r2, #5
 802007a:	68f8      	ldr	r0, [r7, #12]
 802007c:	f000 fabf 	bl	80205fe <SCSI_SenseCode>
    return -1;
 8020080:	f04f 33ff 	mov.w	r3, #4294967295
 8020084:	e04a      	b.n	802011c <SCSI_Inquiry+0xd8>
  }

  if ((params[1] & 0x01U) != 0U) /* Evpd is set */
 8020086:	687b      	ldr	r3, [r7, #4]
 8020088:	3301      	adds	r3, #1
 802008a:	781b      	ldrb	r3, [r3, #0]
 802008c:	f003 0301 	and.w	r3, r3, #1
 8020090:	2b00      	cmp	r3, #0
 8020092:	d020      	beq.n	80200d6 <SCSI_Inquiry+0x92>
  {
    if (params[2] == 0U) /* Request for Supported Vital Product Data Pages*/
 8020094:	687b      	ldr	r3, [r7, #4]
 8020096:	3302      	adds	r3, #2
 8020098:	781b      	ldrb	r3, [r3, #0]
 802009a:	2b00      	cmp	r3, #0
 802009c:	d105      	bne.n	80200aa <SCSI_Inquiry+0x66>
    {
      (void)SCSI_UpdateBotData(hmsc, MSC_Page00_Inquiry_Data, LENGTH_INQUIRY_PAGE00);
 802009e:	2206      	movs	r2, #6
 80200a0:	4920      	ldr	r1, [pc, #128]	; (8020124 <SCSI_Inquiry+0xe0>)
 80200a2:	69b8      	ldr	r0, [r7, #24]
 80200a4:	f000 ffb4 	bl	8021010 <SCSI_UpdateBotData>
 80200a8:	e037      	b.n	802011a <SCSI_Inquiry+0xd6>
    }
    else if (params[2] == 0x80U) /* Request for VPD page 0x80 Unit Serial Number */
 80200aa:	687b      	ldr	r3, [r7, #4]
 80200ac:	3302      	adds	r3, #2
 80200ae:	781b      	ldrb	r3, [r3, #0]
 80200b0:	2b80      	cmp	r3, #128	; 0x80
 80200b2:	d105      	bne.n	80200c0 <SCSI_Inquiry+0x7c>
    {
      (void)SCSI_UpdateBotData(hmsc, MSC_Page80_Inquiry_Data, LENGTH_INQUIRY_PAGE80);
 80200b4:	2208      	movs	r2, #8
 80200b6:	491c      	ldr	r1, [pc, #112]	; (8020128 <SCSI_Inquiry+0xe4>)
 80200b8:	69b8      	ldr	r0, [r7, #24]
 80200ba:	f000 ffa9 	bl	8021010 <SCSI_UpdateBotData>
 80200be:	e02c      	b.n	802011a <SCSI_Inquiry+0xd6>
    }
    else /* Request Not supported */
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST,
 80200c0:	69bb      	ldr	r3, [r7, #24]
 80200c2:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 80200c6:	2324      	movs	r3, #36	; 0x24
 80200c8:	2205      	movs	r2, #5
 80200ca:	68f8      	ldr	r0, [r7, #12]
 80200cc:	f000 fa97 	bl	80205fe <SCSI_SenseCode>
                     INVALID_FIELED_IN_COMMAND);

      return -1;
 80200d0:	f04f 33ff 	mov.w	r3, #4294967295
 80200d4:	e022      	b.n	802011c <SCSI_Inquiry+0xd8>
    }
  }
  else
  {
    pPage = (uint8_t *) &((USBD_StorageTypeDef *)pdev->pUserData)->pInquiry[lun * STANDARD_INQUIRY_DATA_LEN];
 80200d6:	68fb      	ldr	r3, [r7, #12]
 80200d8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80200dc:	69d9      	ldr	r1, [r3, #28]
 80200de:	7afa      	ldrb	r2, [r7, #11]
 80200e0:	4613      	mov	r3, r2
 80200e2:	00db      	lsls	r3, r3, #3
 80200e4:	4413      	add	r3, r2
 80200e6:	009b      	lsls	r3, r3, #2
 80200e8:	440b      	add	r3, r1
 80200ea:	617b      	str	r3, [r7, #20]
    len = (uint16_t)pPage[4] + 5U;
 80200ec:	697b      	ldr	r3, [r7, #20]
 80200ee:	3304      	adds	r3, #4
 80200f0:	781b      	ldrb	r3, [r3, #0]
 80200f2:	b29b      	uxth	r3, r3
 80200f4:	3305      	adds	r3, #5
 80200f6:	83fb      	strh	r3, [r7, #30]

    if (params[4] <= len)
 80200f8:	687b      	ldr	r3, [r7, #4]
 80200fa:	3304      	adds	r3, #4
 80200fc:	781b      	ldrb	r3, [r3, #0]
 80200fe:	b29b      	uxth	r3, r3
 8020100:	8bfa      	ldrh	r2, [r7, #30]
 8020102:	429a      	cmp	r2, r3
 8020104:	d303      	bcc.n	802010e <SCSI_Inquiry+0xca>
    {
      len = params[4];
 8020106:	687b      	ldr	r3, [r7, #4]
 8020108:	3304      	adds	r3, #4
 802010a:	781b      	ldrb	r3, [r3, #0]
 802010c:	83fb      	strh	r3, [r7, #30]
    }

    (void)SCSI_UpdateBotData(hmsc, pPage, len);
 802010e:	8bfb      	ldrh	r3, [r7, #30]
 8020110:	461a      	mov	r2, r3
 8020112:	6979      	ldr	r1, [r7, #20]
 8020114:	69b8      	ldr	r0, [r7, #24]
 8020116:	f000 ff7b 	bl	8021010 <SCSI_UpdateBotData>
  }

  return 0;
 802011a:	2300      	movs	r3, #0
}
 802011c:	4618      	mov	r0, r3
 802011e:	3720      	adds	r7, #32
 8020120:	46bd      	mov	sp, r7
 8020122:	bd80      	pop	{r7, pc}
 8020124:	2000063c 	.word	0x2000063c
 8020128:	20000644 	.word	0x20000644

0802012c <SCSI_ReadCapacity10>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_ReadCapacity10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 802012c:	b580      	push	{r7, lr}
 802012e:	b086      	sub	sp, #24
 8020130:	af00      	add	r7, sp, #0
 8020132:	60f8      	str	r0, [r7, #12]
 8020134:	460b      	mov	r3, r1
 8020136:	607a      	str	r2, [r7, #4]
 8020138:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  int8_t ret;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 802013a:	68fb      	ldr	r3, [r7, #12]
 802013c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8020140:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 8020142:	697b      	ldr	r3, [r7, #20]
 8020144:	2b00      	cmp	r3, #0
 8020146:	d102      	bne.n	802014e <SCSI_ReadCapacity10+0x22>
  {
    return -1;
 8020148:	f04f 33ff 	mov.w	r3, #4294967295
 802014c:	e05f      	b.n	802020e <SCSI_ReadCapacity10+0xe2>
  }

  ret = ((USBD_StorageTypeDef *)pdev->pUserData)->GetCapacity(lun, &hmsc->scsi_blk_nbr, &hmsc->scsi_blk_size);
 802014e:	68fb      	ldr	r3, [r7, #12]
 8020150:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8020154:	685b      	ldr	r3, [r3, #4]
 8020156:	697a      	ldr	r2, [r7, #20]
 8020158:	f502 711a 	add.w	r1, r2, #616	; 0x268
 802015c:	697a      	ldr	r2, [r7, #20]
 802015e:	f502 7219 	add.w	r2, r2, #612	; 0x264
 8020162:	7af8      	ldrb	r0, [r7, #11]
 8020164:	4798      	blx	r3
 8020166:	4603      	mov	r3, r0
 8020168:	74fb      	strb	r3, [r7, #19]

  if ((ret != 0) || (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED))
 802016a:	f997 3013 	ldrsb.w	r3, [r7, #19]
 802016e:	2b00      	cmp	r3, #0
 8020170:	d104      	bne.n	802017c <SCSI_ReadCapacity10+0x50>
 8020172:	697b      	ldr	r3, [r7, #20]
 8020174:	f893 3262 	ldrb.w	r3, [r3, #610]	; 0x262
 8020178:	2b02      	cmp	r3, #2
 802017a:	d108      	bne.n	802018e <SCSI_ReadCapacity10+0x62>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 802017c:	7af9      	ldrb	r1, [r7, #11]
 802017e:	233a      	movs	r3, #58	; 0x3a
 8020180:	2202      	movs	r2, #2
 8020182:	68f8      	ldr	r0, [r7, #12]
 8020184:	f000 fa3b 	bl	80205fe <SCSI_SenseCode>
    return -1;
 8020188:	f04f 33ff 	mov.w	r3, #4294967295
 802018c:	e03f      	b.n	802020e <SCSI_ReadCapacity10+0xe2>
  }

  hmsc->bot_data[0] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 24);
 802018e:	697b      	ldr	r3, [r7, #20]
 8020190:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8020194:	3b01      	subs	r3, #1
 8020196:	0e1b      	lsrs	r3, r3, #24
 8020198:	b2da      	uxtb	r2, r3
 802019a:	697b      	ldr	r3, [r7, #20]
 802019c:	741a      	strb	r2, [r3, #16]
  hmsc->bot_data[1] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 16);
 802019e:	697b      	ldr	r3, [r7, #20]
 80201a0:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 80201a4:	3b01      	subs	r3, #1
 80201a6:	0c1b      	lsrs	r3, r3, #16
 80201a8:	b2da      	uxtb	r2, r3
 80201aa:	697b      	ldr	r3, [r7, #20]
 80201ac:	745a      	strb	r2, [r3, #17]
  hmsc->bot_data[2] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >>  8);
 80201ae:	697b      	ldr	r3, [r7, #20]
 80201b0:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 80201b4:	3b01      	subs	r3, #1
 80201b6:	0a1b      	lsrs	r3, r3, #8
 80201b8:	b2da      	uxtb	r2, r3
 80201ba:	697b      	ldr	r3, [r7, #20]
 80201bc:	749a      	strb	r2, [r3, #18]
  hmsc->bot_data[3] = (uint8_t)(hmsc->scsi_blk_nbr - 1U);
 80201be:	697b      	ldr	r3, [r7, #20]
 80201c0:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 80201c4:	b2db      	uxtb	r3, r3
 80201c6:	3b01      	subs	r3, #1
 80201c8:	b2da      	uxtb	r2, r3
 80201ca:	697b      	ldr	r3, [r7, #20]
 80201cc:	74da      	strb	r2, [r3, #19]

  hmsc->bot_data[4] = (uint8_t)(hmsc->scsi_blk_size >>  24);
 80201ce:	697b      	ldr	r3, [r7, #20]
 80201d0:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 80201d4:	161b      	asrs	r3, r3, #24
 80201d6:	b2da      	uxtb	r2, r3
 80201d8:	697b      	ldr	r3, [r7, #20]
 80201da:	751a      	strb	r2, [r3, #20]
  hmsc->bot_data[5] = (uint8_t)(hmsc->scsi_blk_size >>  16);
 80201dc:	697b      	ldr	r3, [r7, #20]
 80201de:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 80201e2:	141b      	asrs	r3, r3, #16
 80201e4:	b2da      	uxtb	r2, r3
 80201e6:	697b      	ldr	r3, [r7, #20]
 80201e8:	755a      	strb	r2, [r3, #21]
  hmsc->bot_data[6] = (uint8_t)(hmsc->scsi_blk_size >>  8);
 80201ea:	697b      	ldr	r3, [r7, #20]
 80201ec:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 80201f0:	0a1b      	lsrs	r3, r3, #8
 80201f2:	b29b      	uxth	r3, r3
 80201f4:	b2da      	uxtb	r2, r3
 80201f6:	697b      	ldr	r3, [r7, #20]
 80201f8:	759a      	strb	r2, [r3, #22]
  hmsc->bot_data[7] = (uint8_t)(hmsc->scsi_blk_size);
 80201fa:	697b      	ldr	r3, [r7, #20]
 80201fc:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 8020200:	b2da      	uxtb	r2, r3
 8020202:	697b      	ldr	r3, [r7, #20]
 8020204:	75da      	strb	r2, [r3, #23]

  hmsc->bot_data_length = 8U;
 8020206:	697b      	ldr	r3, [r7, #20]
 8020208:	2208      	movs	r2, #8
 802020a:	60da      	str	r2, [r3, #12]

  return 0;
 802020c:	2300      	movs	r3, #0

}
 802020e:	4618      	mov	r0, r3
 8020210:	3718      	adds	r7, #24
 8020212:	46bd      	mov	sp, r7
 8020214:	bd80      	pop	{r7, pc}

08020216 <SCSI_ReadCapacity16>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_ReadCapacity16(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8020216:	b580      	push	{r7, lr}
 8020218:	b088      	sub	sp, #32
 802021a:	af00      	add	r7, sp, #0
 802021c:	60f8      	str	r0, [r7, #12]
 802021e:	460b      	mov	r3, r1
 8020220:	607a      	str	r2, [r7, #4]
 8020222:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  uint8_t idx;
  int8_t ret;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8020224:	68fb      	ldr	r3, [r7, #12]
 8020226:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 802022a:	61bb      	str	r3, [r7, #24]

  if (hmsc == NULL)
 802022c:	69bb      	ldr	r3, [r7, #24]
 802022e:	2b00      	cmp	r3, #0
 8020230:	d102      	bne.n	8020238 <SCSI_ReadCapacity16+0x22>
  {
    return -1;
 8020232:	f04f 33ff 	mov.w	r3, #4294967295
 8020236:	e094      	b.n	8020362 <SCSI_ReadCapacity16+0x14c>
  }

  ret = ((USBD_StorageTypeDef *)pdev->pUserData)->GetCapacity(lun, &hmsc->scsi_blk_nbr, &hmsc->scsi_blk_size);
 8020238:	68fb      	ldr	r3, [r7, #12]
 802023a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 802023e:	685b      	ldr	r3, [r3, #4]
 8020240:	69ba      	ldr	r2, [r7, #24]
 8020242:	f502 711a 	add.w	r1, r2, #616	; 0x268
 8020246:	69ba      	ldr	r2, [r7, #24]
 8020248:	f502 7219 	add.w	r2, r2, #612	; 0x264
 802024c:	7af8      	ldrb	r0, [r7, #11]
 802024e:	4798      	blx	r3
 8020250:	4603      	mov	r3, r0
 8020252:	75fb      	strb	r3, [r7, #23]

  if ((ret != 0) || (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED))
 8020254:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8020258:	2b00      	cmp	r3, #0
 802025a:	d104      	bne.n	8020266 <SCSI_ReadCapacity16+0x50>
 802025c:	69bb      	ldr	r3, [r7, #24]
 802025e:	f893 3262 	ldrb.w	r3, [r3, #610]	; 0x262
 8020262:	2b02      	cmp	r3, #2
 8020264:	d108      	bne.n	8020278 <SCSI_ReadCapacity16+0x62>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8020266:	7af9      	ldrb	r1, [r7, #11]
 8020268:	233a      	movs	r3, #58	; 0x3a
 802026a:	2202      	movs	r2, #2
 802026c:	68f8      	ldr	r0, [r7, #12]
 802026e:	f000 f9c6 	bl	80205fe <SCSI_SenseCode>
    return -1;
 8020272:	f04f 33ff 	mov.w	r3, #4294967295
 8020276:	e074      	b.n	8020362 <SCSI_ReadCapacity16+0x14c>
  }

  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 8020278:	687b      	ldr	r3, [r7, #4]
 802027a:	330a      	adds	r3, #10
 802027c:	781b      	ldrb	r3, [r3, #0]
 802027e:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[11] << 16) |
 8020280:	687b      	ldr	r3, [r7, #4]
 8020282:	330b      	adds	r3, #11
 8020284:	781b      	ldrb	r3, [r3, #0]
 8020286:	041b      	lsls	r3, r3, #16
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 8020288:	431a      	orrs	r2, r3
                          ((uint32_t)params[12] <<  8) |
 802028a:	687b      	ldr	r3, [r7, #4]
 802028c:	330c      	adds	r3, #12
 802028e:	781b      	ldrb	r3, [r3, #0]
 8020290:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[11] << 16) |
 8020292:	4313      	orrs	r3, r2
                          (uint32_t)params[13];
 8020294:	687a      	ldr	r2, [r7, #4]
 8020296:	320d      	adds	r2, #13
 8020298:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[12] <<  8) |
 802029a:	431a      	orrs	r2, r3
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 802029c:	69bb      	ldr	r3, [r7, #24]
 802029e:	60da      	str	r2, [r3, #12]

  for (idx = 0U; idx < hmsc->bot_data_length; idx++)
 80202a0:	2300      	movs	r3, #0
 80202a2:	77fb      	strb	r3, [r7, #31]
 80202a4:	e007      	b.n	80202b6 <SCSI_ReadCapacity16+0xa0>
  {
    hmsc->bot_data[idx] = 0U;
 80202a6:	7ffb      	ldrb	r3, [r7, #31]
 80202a8:	69ba      	ldr	r2, [r7, #24]
 80202aa:	4413      	add	r3, r2
 80202ac:	2200      	movs	r2, #0
 80202ae:	741a      	strb	r2, [r3, #16]
  for (idx = 0U; idx < hmsc->bot_data_length; idx++)
 80202b0:	7ffb      	ldrb	r3, [r7, #31]
 80202b2:	3301      	adds	r3, #1
 80202b4:	77fb      	strb	r3, [r7, #31]
 80202b6:	7ffa      	ldrb	r2, [r7, #31]
 80202b8:	69bb      	ldr	r3, [r7, #24]
 80202ba:	68db      	ldr	r3, [r3, #12]
 80202bc:	429a      	cmp	r2, r3
 80202be:	d3f2      	bcc.n	80202a6 <SCSI_ReadCapacity16+0x90>
  }

  hmsc->bot_data[4] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 24);
 80202c0:	69bb      	ldr	r3, [r7, #24]
 80202c2:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 80202c6:	3b01      	subs	r3, #1
 80202c8:	0e1b      	lsrs	r3, r3, #24
 80202ca:	b2da      	uxtb	r2, r3
 80202cc:	69bb      	ldr	r3, [r7, #24]
 80202ce:	751a      	strb	r2, [r3, #20]
  hmsc->bot_data[5] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 16);
 80202d0:	69bb      	ldr	r3, [r7, #24]
 80202d2:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 80202d6:	3b01      	subs	r3, #1
 80202d8:	0c1b      	lsrs	r3, r3, #16
 80202da:	b2da      	uxtb	r2, r3
 80202dc:	69bb      	ldr	r3, [r7, #24]
 80202de:	755a      	strb	r2, [r3, #21]
  hmsc->bot_data[6] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >>  8);
 80202e0:	69bb      	ldr	r3, [r7, #24]
 80202e2:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 80202e6:	3b01      	subs	r3, #1
 80202e8:	0a1b      	lsrs	r3, r3, #8
 80202ea:	b2da      	uxtb	r2, r3
 80202ec:	69bb      	ldr	r3, [r7, #24]
 80202ee:	759a      	strb	r2, [r3, #22]
  hmsc->bot_data[7] = (uint8_t)(hmsc->scsi_blk_nbr - 1U);
 80202f0:	69bb      	ldr	r3, [r7, #24]
 80202f2:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 80202f6:	b2db      	uxtb	r3, r3
 80202f8:	3b01      	subs	r3, #1
 80202fa:	b2da      	uxtb	r2, r3
 80202fc:	69bb      	ldr	r3, [r7, #24]
 80202fe:	75da      	strb	r2, [r3, #23]

  hmsc->bot_data[8] = (uint8_t)(hmsc->scsi_blk_size >>  24);
 8020300:	69bb      	ldr	r3, [r7, #24]
 8020302:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 8020306:	161b      	asrs	r3, r3, #24
 8020308:	b2da      	uxtb	r2, r3
 802030a:	69bb      	ldr	r3, [r7, #24]
 802030c:	761a      	strb	r2, [r3, #24]
  hmsc->bot_data[9] = (uint8_t)(hmsc->scsi_blk_size >>  16);
 802030e:	69bb      	ldr	r3, [r7, #24]
 8020310:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 8020314:	141b      	asrs	r3, r3, #16
 8020316:	b2da      	uxtb	r2, r3
 8020318:	69bb      	ldr	r3, [r7, #24]
 802031a:	765a      	strb	r2, [r3, #25]
  hmsc->bot_data[10] = (uint8_t)(hmsc->scsi_blk_size >>  8);
 802031c:	69bb      	ldr	r3, [r7, #24]
 802031e:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 8020322:	0a1b      	lsrs	r3, r3, #8
 8020324:	b29b      	uxth	r3, r3
 8020326:	b2da      	uxtb	r2, r3
 8020328:	69bb      	ldr	r3, [r7, #24]
 802032a:	769a      	strb	r2, [r3, #26]
  hmsc->bot_data[11] = (uint8_t)(hmsc->scsi_blk_size);
 802032c:	69bb      	ldr	r3, [r7, #24]
 802032e:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 8020332:	b2da      	uxtb	r2, r3
 8020334:	69bb      	ldr	r3, [r7, #24]
 8020336:	76da      	strb	r2, [r3, #27]

  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 8020338:	687b      	ldr	r3, [r7, #4]
 802033a:	330a      	adds	r3, #10
 802033c:	781b      	ldrb	r3, [r3, #0]
 802033e:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[11] << 16) |
 8020340:	687b      	ldr	r3, [r7, #4]
 8020342:	330b      	adds	r3, #11
 8020344:	781b      	ldrb	r3, [r3, #0]
 8020346:	041b      	lsls	r3, r3, #16
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 8020348:	431a      	orrs	r2, r3
                          ((uint32_t)params[12] <<  8) |
 802034a:	687b      	ldr	r3, [r7, #4]
 802034c:	330c      	adds	r3, #12
 802034e:	781b      	ldrb	r3, [r3, #0]
 8020350:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[11] << 16) |
 8020352:	4313      	orrs	r3, r2
                          (uint32_t)params[13];
 8020354:	687a      	ldr	r2, [r7, #4]
 8020356:	320d      	adds	r2, #13
 8020358:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[12] <<  8) |
 802035a:	431a      	orrs	r2, r3
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 802035c:	69bb      	ldr	r3, [r7, #24]
 802035e:	60da      	str	r2, [r3, #12]

  return 0;
 8020360:	2300      	movs	r3, #0
}
 8020362:	4618      	mov	r0, r3
 8020364:	3720      	adds	r7, #32
 8020366:	46bd      	mov	sp, r7
 8020368:	bd80      	pop	{r7, pc}

0802036a <SCSI_ReadFormatCapacity>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_ReadFormatCapacity(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 802036a:	b580      	push	{r7, lr}
 802036c:	b088      	sub	sp, #32
 802036e:	af00      	add	r7, sp, #0
 8020370:	60f8      	str	r0, [r7, #12]
 8020372:	460b      	mov	r3, r1
 8020374:	607a      	str	r2, [r7, #4]
 8020376:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  uint16_t blk_size;
  uint32_t blk_nbr;
  uint16_t i;
  int8_t ret;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8020378:	68fb      	ldr	r3, [r7, #12]
 802037a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 802037e:	61bb      	str	r3, [r7, #24]

  if (hmsc == NULL)
 8020380:	69bb      	ldr	r3, [r7, #24]
 8020382:	2b00      	cmp	r3, #0
 8020384:	d102      	bne.n	802038c <SCSI_ReadFormatCapacity+0x22>
  {
    return -1;
 8020386:	f04f 33ff 	mov.w	r3, #4294967295
 802038a:	e05c      	b.n	8020446 <SCSI_ReadFormatCapacity+0xdc>
  }

  ret = ((USBD_StorageTypeDef *)pdev->pUserData)->GetCapacity(lun, &blk_nbr, &blk_size);
 802038c:	68fb      	ldr	r3, [r7, #12]
 802038e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8020392:	685b      	ldr	r3, [r3, #4]
 8020394:	f107 0214 	add.w	r2, r7, #20
 8020398:	f107 0110 	add.w	r1, r7, #16
 802039c:	7af8      	ldrb	r0, [r7, #11]
 802039e:	4798      	blx	r3
 80203a0:	4603      	mov	r3, r0
 80203a2:	75fb      	strb	r3, [r7, #23]

  if ((ret != 0) || (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED))
 80203a4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80203a8:	2b00      	cmp	r3, #0
 80203aa:	d104      	bne.n	80203b6 <SCSI_ReadFormatCapacity+0x4c>
 80203ac:	69bb      	ldr	r3, [r7, #24]
 80203ae:	f893 3262 	ldrb.w	r3, [r3, #610]	; 0x262
 80203b2:	2b02      	cmp	r3, #2
 80203b4:	d108      	bne.n	80203c8 <SCSI_ReadFormatCapacity+0x5e>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 80203b6:	7af9      	ldrb	r1, [r7, #11]
 80203b8:	233a      	movs	r3, #58	; 0x3a
 80203ba:	2202      	movs	r2, #2
 80203bc:	68f8      	ldr	r0, [r7, #12]
 80203be:	f000 f91e 	bl	80205fe <SCSI_SenseCode>
    return -1;
 80203c2:	f04f 33ff 	mov.w	r3, #4294967295
 80203c6:	e03e      	b.n	8020446 <SCSI_ReadFormatCapacity+0xdc>
  }

  for (i = 0U; i < 12U ; i++)
 80203c8:	2300      	movs	r3, #0
 80203ca:	83fb      	strh	r3, [r7, #30]
 80203cc:	e007      	b.n	80203de <SCSI_ReadFormatCapacity+0x74>
  {
    hmsc->bot_data[i] = 0U;
 80203ce:	8bfb      	ldrh	r3, [r7, #30]
 80203d0:	69ba      	ldr	r2, [r7, #24]
 80203d2:	4413      	add	r3, r2
 80203d4:	2200      	movs	r2, #0
 80203d6:	741a      	strb	r2, [r3, #16]
  for (i = 0U; i < 12U ; i++)
 80203d8:	8bfb      	ldrh	r3, [r7, #30]
 80203da:	3301      	adds	r3, #1
 80203dc:	83fb      	strh	r3, [r7, #30]
 80203de:	8bfb      	ldrh	r3, [r7, #30]
 80203e0:	2b0b      	cmp	r3, #11
 80203e2:	d9f4      	bls.n	80203ce <SCSI_ReadFormatCapacity+0x64>
  }

  hmsc->bot_data[3] = 0x08U;
 80203e4:	69bb      	ldr	r3, [r7, #24]
 80203e6:	2208      	movs	r2, #8
 80203e8:	74da      	strb	r2, [r3, #19]
  hmsc->bot_data[4] = (uint8_t)((blk_nbr - 1U) >> 24);
 80203ea:	693b      	ldr	r3, [r7, #16]
 80203ec:	3b01      	subs	r3, #1
 80203ee:	0e1b      	lsrs	r3, r3, #24
 80203f0:	b2da      	uxtb	r2, r3
 80203f2:	69bb      	ldr	r3, [r7, #24]
 80203f4:	751a      	strb	r2, [r3, #20]
  hmsc->bot_data[5] = (uint8_t)((blk_nbr - 1U) >> 16);
 80203f6:	693b      	ldr	r3, [r7, #16]
 80203f8:	3b01      	subs	r3, #1
 80203fa:	0c1b      	lsrs	r3, r3, #16
 80203fc:	b2da      	uxtb	r2, r3
 80203fe:	69bb      	ldr	r3, [r7, #24]
 8020400:	755a      	strb	r2, [r3, #21]
  hmsc->bot_data[6] = (uint8_t)((blk_nbr - 1U) >>  8);
 8020402:	693b      	ldr	r3, [r7, #16]
 8020404:	3b01      	subs	r3, #1
 8020406:	0a1b      	lsrs	r3, r3, #8
 8020408:	b2da      	uxtb	r2, r3
 802040a:	69bb      	ldr	r3, [r7, #24]
 802040c:	759a      	strb	r2, [r3, #22]
  hmsc->bot_data[7] = (uint8_t)(blk_nbr - 1U);
 802040e:	693b      	ldr	r3, [r7, #16]
 8020410:	b2db      	uxtb	r3, r3
 8020412:	3b01      	subs	r3, #1
 8020414:	b2da      	uxtb	r2, r3
 8020416:	69bb      	ldr	r3, [r7, #24]
 8020418:	75da      	strb	r2, [r3, #23]

  hmsc->bot_data[8] = 0x02U;
 802041a:	69bb      	ldr	r3, [r7, #24]
 802041c:	2202      	movs	r2, #2
 802041e:	761a      	strb	r2, [r3, #24]
  hmsc->bot_data[9] = (uint8_t)(blk_size >>  16);
 8020420:	8abb      	ldrh	r3, [r7, #20]
 8020422:	141b      	asrs	r3, r3, #16
 8020424:	b2da      	uxtb	r2, r3
 8020426:	69bb      	ldr	r3, [r7, #24]
 8020428:	765a      	strb	r2, [r3, #25]
  hmsc->bot_data[10] = (uint8_t)(blk_size >>  8);
 802042a:	8abb      	ldrh	r3, [r7, #20]
 802042c:	0a1b      	lsrs	r3, r3, #8
 802042e:	b29b      	uxth	r3, r3
 8020430:	b2da      	uxtb	r2, r3
 8020432:	69bb      	ldr	r3, [r7, #24]
 8020434:	769a      	strb	r2, [r3, #26]
  hmsc->bot_data[11] = (uint8_t)(blk_size);
 8020436:	8abb      	ldrh	r3, [r7, #20]
 8020438:	b2da      	uxtb	r2, r3
 802043a:	69bb      	ldr	r3, [r7, #24]
 802043c:	76da      	strb	r2, [r3, #27]

  hmsc->bot_data_length = 12U;
 802043e:	69bb      	ldr	r3, [r7, #24]
 8020440:	220c      	movs	r2, #12
 8020442:	60da      	str	r2, [r3, #12]

  return 0;
 8020444:	2300      	movs	r3, #0
}
 8020446:	4618      	mov	r0, r3
 8020448:	3720      	adds	r7, #32
 802044a:	46bd      	mov	sp, r7
 802044c:	bd80      	pop	{r7, pc}
	...

08020450 <SCSI_ModeSense6>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_ModeSense6(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8020450:	b580      	push	{r7, lr}
 8020452:	b086      	sub	sp, #24
 8020454:	af00      	add	r7, sp, #0
 8020456:	60f8      	str	r0, [r7, #12]
 8020458:	460b      	mov	r3, r1
 802045a:	607a      	str	r2, [r7, #4]
 802045c:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 802045e:	68fb      	ldr	r3, [r7, #12]
 8020460:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8020464:	613b      	str	r3, [r7, #16]
  uint16_t len = MODE_SENSE6_LEN;
 8020466:	2317      	movs	r3, #23
 8020468:	82fb      	strh	r3, [r7, #22]

  if (hmsc == NULL)
 802046a:	693b      	ldr	r3, [r7, #16]
 802046c:	2b00      	cmp	r3, #0
 802046e:	d102      	bne.n	8020476 <SCSI_ModeSense6+0x26>
  {
    return -1;
 8020470:	f04f 33ff 	mov.w	r3, #4294967295
 8020474:	e011      	b.n	802049a <SCSI_ModeSense6+0x4a>
  }

  if (params[4] <= len)
 8020476:	687b      	ldr	r3, [r7, #4]
 8020478:	3304      	adds	r3, #4
 802047a:	781b      	ldrb	r3, [r3, #0]
 802047c:	b29b      	uxth	r3, r3
 802047e:	8afa      	ldrh	r2, [r7, #22]
 8020480:	429a      	cmp	r2, r3
 8020482:	d303      	bcc.n	802048c <SCSI_ModeSense6+0x3c>
  {
    len = params[4];
 8020484:	687b      	ldr	r3, [r7, #4]
 8020486:	3304      	adds	r3, #4
 8020488:	781b      	ldrb	r3, [r3, #0]
 802048a:	82fb      	strh	r3, [r7, #22]
  }

  (void)SCSI_UpdateBotData(hmsc, MSC_Mode_Sense6_data, len);
 802048c:	8afb      	ldrh	r3, [r7, #22]
 802048e:	461a      	mov	r2, r3
 8020490:	4904      	ldr	r1, [pc, #16]	; (80204a4 <SCSI_ModeSense6+0x54>)
 8020492:	6938      	ldr	r0, [r7, #16]
 8020494:	f000 fdbc 	bl	8021010 <SCSI_UpdateBotData>

  return 0;
 8020498:	2300      	movs	r3, #0
}
 802049a:	4618      	mov	r0, r3
 802049c:	3718      	adds	r7, #24
 802049e:	46bd      	mov	sp, r7
 80204a0:	bd80      	pop	{r7, pc}
 80204a2:	bf00      	nop
 80204a4:	2000064c 	.word	0x2000064c

080204a8 <SCSI_ModeSense10>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_ModeSense10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 80204a8:	b580      	push	{r7, lr}
 80204aa:	b086      	sub	sp, #24
 80204ac:	af00      	add	r7, sp, #0
 80204ae:	60f8      	str	r0, [r7, #12]
 80204b0:	460b      	mov	r3, r1
 80204b2:	607a      	str	r2, [r7, #4]
 80204b4:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 80204b6:	68fb      	ldr	r3, [r7, #12]
 80204b8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80204bc:	613b      	str	r3, [r7, #16]
  uint16_t len = MODE_SENSE10_LEN;
 80204be:	231b      	movs	r3, #27
 80204c0:	82fb      	strh	r3, [r7, #22]

  if (hmsc == NULL)
 80204c2:	693b      	ldr	r3, [r7, #16]
 80204c4:	2b00      	cmp	r3, #0
 80204c6:	d102      	bne.n	80204ce <SCSI_ModeSense10+0x26>
  {
    return -1;
 80204c8:	f04f 33ff 	mov.w	r3, #4294967295
 80204cc:	e011      	b.n	80204f2 <SCSI_ModeSense10+0x4a>
  }

  if (params[8] <= len)
 80204ce:	687b      	ldr	r3, [r7, #4]
 80204d0:	3308      	adds	r3, #8
 80204d2:	781b      	ldrb	r3, [r3, #0]
 80204d4:	b29b      	uxth	r3, r3
 80204d6:	8afa      	ldrh	r2, [r7, #22]
 80204d8:	429a      	cmp	r2, r3
 80204da:	d303      	bcc.n	80204e4 <SCSI_ModeSense10+0x3c>
  {
    len = params[8];
 80204dc:	687b      	ldr	r3, [r7, #4]
 80204de:	3308      	adds	r3, #8
 80204e0:	781b      	ldrb	r3, [r3, #0]
 80204e2:	82fb      	strh	r3, [r7, #22]
  }

  (void)SCSI_UpdateBotData(hmsc, MSC_Mode_Sense10_data, len);
 80204e4:	8afb      	ldrh	r3, [r7, #22]
 80204e6:	461a      	mov	r2, r3
 80204e8:	4904      	ldr	r1, [pc, #16]	; (80204fc <SCSI_ModeSense10+0x54>)
 80204ea:	6938      	ldr	r0, [r7, #16]
 80204ec:	f000 fd90 	bl	8021010 <SCSI_UpdateBotData>

  return 0;
 80204f0:	2300      	movs	r3, #0
}
 80204f2:	4618      	mov	r0, r3
 80204f4:	3718      	adds	r7, #24
 80204f6:	46bd      	mov	sp, r7
 80204f8:	bd80      	pop	{r7, pc}
 80204fa:	bf00      	nop
 80204fc:	20000664 	.word	0x20000664

08020500 <SCSI_RequestSense>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_RequestSense(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8020500:	b580      	push	{r7, lr}
 8020502:	b086      	sub	sp, #24
 8020504:	af00      	add	r7, sp, #0
 8020506:	60f8      	str	r0, [r7, #12]
 8020508:	460b      	mov	r3, r1
 802050a:	607a      	str	r2, [r7, #4]
 802050c:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  uint8_t i;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 802050e:	68fb      	ldr	r3, [r7, #12]
 8020510:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8020514:	613b      	str	r3, [r7, #16]

  if (hmsc == NULL)
 8020516:	693b      	ldr	r3, [r7, #16]
 8020518:	2b00      	cmp	r3, #0
 802051a:	d102      	bne.n	8020522 <SCSI_RequestSense+0x22>
  {
    return -1;
 802051c:	f04f 33ff 	mov.w	r3, #4294967295
 8020520:	e069      	b.n	80205f6 <SCSI_RequestSense+0xf6>
  }

  if (hmsc->cbw.dDataLength == 0U)
 8020522:	693b      	ldr	r3, [r7, #16]
 8020524:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8020528:	2b00      	cmp	r3, #0
 802052a:	d10a      	bne.n	8020542 <SCSI_RequestSense+0x42>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 802052c:	693b      	ldr	r3, [r7, #16]
 802052e:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 8020532:	2320      	movs	r3, #32
 8020534:	2205      	movs	r2, #5
 8020536:	68f8      	ldr	r0, [r7, #12]
 8020538:	f000 f861 	bl	80205fe <SCSI_SenseCode>
    return -1;
 802053c:	f04f 33ff 	mov.w	r3, #4294967295
 8020540:	e059      	b.n	80205f6 <SCSI_RequestSense+0xf6>
  }

  for (i = 0U; i < REQUEST_SENSE_DATA_LEN; i++)
 8020542:	2300      	movs	r3, #0
 8020544:	75fb      	strb	r3, [r7, #23]
 8020546:	e007      	b.n	8020558 <SCSI_RequestSense+0x58>
  {
    hmsc->bot_data[i] = 0U;
 8020548:	7dfb      	ldrb	r3, [r7, #23]
 802054a:	693a      	ldr	r2, [r7, #16]
 802054c:	4413      	add	r3, r2
 802054e:	2200      	movs	r2, #0
 8020550:	741a      	strb	r2, [r3, #16]
  for (i = 0U; i < REQUEST_SENSE_DATA_LEN; i++)
 8020552:	7dfb      	ldrb	r3, [r7, #23]
 8020554:	3301      	adds	r3, #1
 8020556:	75fb      	strb	r3, [r7, #23]
 8020558:	7dfb      	ldrb	r3, [r7, #23]
 802055a:	2b11      	cmp	r3, #17
 802055c:	d9f4      	bls.n	8020548 <SCSI_RequestSense+0x48>
  }

  hmsc->bot_data[0] = 0x70U;
 802055e:	693b      	ldr	r3, [r7, #16]
 8020560:	2270      	movs	r2, #112	; 0x70
 8020562:	741a      	strb	r2, [r3, #16]
  hmsc->bot_data[7] = REQUEST_SENSE_DATA_LEN - 6U;
 8020564:	693b      	ldr	r3, [r7, #16]
 8020566:	220c      	movs	r2, #12
 8020568:	75da      	strb	r2, [r3, #23]

  if ((hmsc->scsi_sense_head != hmsc->scsi_sense_tail))
 802056a:	693b      	ldr	r3, [r7, #16]
 802056c:	f893 2260 	ldrb.w	r2, [r3, #608]	; 0x260
 8020570:	693b      	ldr	r3, [r7, #16]
 8020572:	f893 3261 	ldrb.w	r3, [r3, #609]	; 0x261
 8020576:	429a      	cmp	r2, r3
 8020578:	d02e      	beq.n	80205d8 <SCSI_RequestSense+0xd8>
  {
    hmsc->bot_data[2] = (uint8_t)hmsc->scsi_sense[hmsc->scsi_sense_head].Skey;
 802057a:	693b      	ldr	r3, [r7, #16]
 802057c:	f893 3260 	ldrb.w	r3, [r3, #608]	; 0x260
 8020580:	461a      	mov	r2, r3
 8020582:	693b      	ldr	r3, [r7, #16]
 8020584:	3248      	adds	r2, #72	; 0x48
 8020586:	f813 2032 	ldrb.w	r2, [r3, r2, lsl #3]
 802058a:	693b      	ldr	r3, [r7, #16]
 802058c:	749a      	strb	r2, [r3, #18]
    hmsc->bot_data[12] = (uint8_t)hmsc->scsi_sense[hmsc->scsi_sense_head].w.b.ASC;
 802058e:	693b      	ldr	r3, [r7, #16]
 8020590:	f893 3260 	ldrb.w	r3, [r3, #608]	; 0x260
 8020594:	693a      	ldr	r2, [r7, #16]
 8020596:	3348      	adds	r3, #72	; 0x48
 8020598:	00db      	lsls	r3, r3, #3
 802059a:	4413      	add	r3, r2
 802059c:	791a      	ldrb	r2, [r3, #4]
 802059e:	693b      	ldr	r3, [r7, #16]
 80205a0:	771a      	strb	r2, [r3, #28]
    hmsc->bot_data[13] = (uint8_t)hmsc->scsi_sense[hmsc->scsi_sense_head].w.b.ASCQ;
 80205a2:	693b      	ldr	r3, [r7, #16]
 80205a4:	f893 3260 	ldrb.w	r3, [r3, #608]	; 0x260
 80205a8:	693a      	ldr	r2, [r7, #16]
 80205aa:	3348      	adds	r3, #72	; 0x48
 80205ac:	00db      	lsls	r3, r3, #3
 80205ae:	4413      	add	r3, r2
 80205b0:	795a      	ldrb	r2, [r3, #5]
 80205b2:	693b      	ldr	r3, [r7, #16]
 80205b4:	775a      	strb	r2, [r3, #29]
    hmsc->scsi_sense_head++;
 80205b6:	693b      	ldr	r3, [r7, #16]
 80205b8:	f893 3260 	ldrb.w	r3, [r3, #608]	; 0x260
 80205bc:	3301      	adds	r3, #1
 80205be:	b2da      	uxtb	r2, r3
 80205c0:	693b      	ldr	r3, [r7, #16]
 80205c2:	f883 2260 	strb.w	r2, [r3, #608]	; 0x260

    if (hmsc->scsi_sense_head == SENSE_LIST_DEEPTH)
 80205c6:	693b      	ldr	r3, [r7, #16]
 80205c8:	f893 3260 	ldrb.w	r3, [r3, #608]	; 0x260
 80205cc:	2b04      	cmp	r3, #4
 80205ce:	d103      	bne.n	80205d8 <SCSI_RequestSense+0xd8>
    {
      hmsc->scsi_sense_head = 0U;
 80205d0:	693b      	ldr	r3, [r7, #16]
 80205d2:	2200      	movs	r2, #0
 80205d4:	f883 2260 	strb.w	r2, [r3, #608]	; 0x260
    }
  }

  hmsc->bot_data_length = REQUEST_SENSE_DATA_LEN;
 80205d8:	693b      	ldr	r3, [r7, #16]
 80205da:	2212      	movs	r2, #18
 80205dc:	60da      	str	r2, [r3, #12]

  if (params[4] <= REQUEST_SENSE_DATA_LEN)
 80205de:	687b      	ldr	r3, [r7, #4]
 80205e0:	3304      	adds	r3, #4
 80205e2:	781b      	ldrb	r3, [r3, #0]
 80205e4:	2b12      	cmp	r3, #18
 80205e6:	d805      	bhi.n	80205f4 <SCSI_RequestSense+0xf4>
  {
    hmsc->bot_data_length = params[4];
 80205e8:	687b      	ldr	r3, [r7, #4]
 80205ea:	3304      	adds	r3, #4
 80205ec:	781b      	ldrb	r3, [r3, #0]
 80205ee:	461a      	mov	r2, r3
 80205f0:	693b      	ldr	r3, [r7, #16]
 80205f2:	60da      	str	r2, [r3, #12]
  }

  return 0;
 80205f4:	2300      	movs	r3, #0
}
 80205f6:	4618      	mov	r0, r3
 80205f8:	3718      	adds	r7, #24
 80205fa:	46bd      	mov	sp, r7
 80205fc:	bd80      	pop	{r7, pc}

080205fe <SCSI_SenseCode>:
  * @param  ASC: Additional Sense Code
  * @retval none

  */
void SCSI_SenseCode(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t sKey, uint8_t ASC)
{
 80205fe:	b480      	push	{r7}
 8020600:	b085      	sub	sp, #20
 8020602:	af00      	add	r7, sp, #0
 8020604:	6078      	str	r0, [r7, #4]
 8020606:	4608      	mov	r0, r1
 8020608:	4611      	mov	r1, r2
 802060a:	461a      	mov	r2, r3
 802060c:	4603      	mov	r3, r0
 802060e:	70fb      	strb	r3, [r7, #3]
 8020610:	460b      	mov	r3, r1
 8020612:	70bb      	strb	r3, [r7, #2]
 8020614:	4613      	mov	r3, r2
 8020616:	707b      	strb	r3, [r7, #1]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8020618:	687b      	ldr	r3, [r7, #4]
 802061a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 802061e:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 8020620:	68fb      	ldr	r3, [r7, #12]
 8020622:	2b00      	cmp	r3, #0
 8020624:	d02c      	beq.n	8020680 <SCSI_SenseCode+0x82>
  {
    return;
  }

  hmsc->scsi_sense[hmsc->scsi_sense_tail].Skey = sKey;
 8020626:	68fb      	ldr	r3, [r7, #12]
 8020628:	f893 3261 	ldrb.w	r3, [r3, #609]	; 0x261
 802062c:	461a      	mov	r2, r3
 802062e:	68fb      	ldr	r3, [r7, #12]
 8020630:	3248      	adds	r2, #72	; 0x48
 8020632:	78b9      	ldrb	r1, [r7, #2]
 8020634:	f803 1032 	strb.w	r1, [r3, r2, lsl #3]
  hmsc->scsi_sense[hmsc->scsi_sense_tail].w.b.ASC = ASC;
 8020638:	68fb      	ldr	r3, [r7, #12]
 802063a:	f893 3261 	ldrb.w	r3, [r3, #609]	; 0x261
 802063e:	68fa      	ldr	r2, [r7, #12]
 8020640:	3348      	adds	r3, #72	; 0x48
 8020642:	00db      	lsls	r3, r3, #3
 8020644:	4413      	add	r3, r2
 8020646:	787a      	ldrb	r2, [r7, #1]
 8020648:	711a      	strb	r2, [r3, #4]
  hmsc->scsi_sense[hmsc->scsi_sense_tail].w.b.ASCQ = 0U;
 802064a:	68fb      	ldr	r3, [r7, #12]
 802064c:	f893 3261 	ldrb.w	r3, [r3, #609]	; 0x261
 8020650:	68fa      	ldr	r2, [r7, #12]
 8020652:	3348      	adds	r3, #72	; 0x48
 8020654:	00db      	lsls	r3, r3, #3
 8020656:	4413      	add	r3, r2
 8020658:	2200      	movs	r2, #0
 802065a:	715a      	strb	r2, [r3, #5]
  hmsc->scsi_sense_tail++;
 802065c:	68fb      	ldr	r3, [r7, #12]
 802065e:	f893 3261 	ldrb.w	r3, [r3, #609]	; 0x261
 8020662:	3301      	adds	r3, #1
 8020664:	b2da      	uxtb	r2, r3
 8020666:	68fb      	ldr	r3, [r7, #12]
 8020668:	f883 2261 	strb.w	r2, [r3, #609]	; 0x261

  if (hmsc->scsi_sense_tail == SENSE_LIST_DEEPTH)
 802066c:	68fb      	ldr	r3, [r7, #12]
 802066e:	f893 3261 	ldrb.w	r3, [r3, #609]	; 0x261
 8020672:	2b04      	cmp	r3, #4
 8020674:	d105      	bne.n	8020682 <SCSI_SenseCode+0x84>
  {
    hmsc->scsi_sense_tail = 0U;
 8020676:	68fb      	ldr	r3, [r7, #12]
 8020678:	2200      	movs	r2, #0
 802067a:	f883 2261 	strb.w	r2, [r3, #609]	; 0x261
 802067e:	e000      	b.n	8020682 <SCSI_SenseCode+0x84>
    return;
 8020680:	bf00      	nop
  }
}
 8020682:	3714      	adds	r7, #20
 8020684:	46bd      	mov	sp, r7
 8020686:	f85d 7b04 	ldr.w	r7, [sp], #4
 802068a:	4770      	bx	lr

0802068c <SCSI_StartStopUnit>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_StartStopUnit(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 802068c:	b580      	push	{r7, lr}
 802068e:	b086      	sub	sp, #24
 8020690:	af00      	add	r7, sp, #0
 8020692:	60f8      	str	r0, [r7, #12]
 8020694:	460b      	mov	r3, r1
 8020696:	607a      	str	r2, [r7, #4]
 8020698:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 802069a:	68fb      	ldr	r3, [r7, #12]
 802069c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80206a0:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 80206a2:	697b      	ldr	r3, [r7, #20]
 80206a4:	2b00      	cmp	r3, #0
 80206a6:	d102      	bne.n	80206ae <SCSI_StartStopUnit+0x22>
  {
    return -1;
 80206a8:	f04f 33ff 	mov.w	r3, #4294967295
 80206ac:	e03b      	b.n	8020726 <SCSI_StartStopUnit+0x9a>
  }

  if ((hmsc->scsi_medium_state == SCSI_MEDIUM_LOCKED) && ((params[4] & 0x3U) == 2U))
 80206ae:	697b      	ldr	r3, [r7, #20]
 80206b0:	f893 3262 	ldrb.w	r3, [r3, #610]	; 0x262
 80206b4:	2b01      	cmp	r3, #1
 80206b6:	d10f      	bne.n	80206d8 <SCSI_StartStopUnit+0x4c>
 80206b8:	687b      	ldr	r3, [r7, #4]
 80206ba:	3304      	adds	r3, #4
 80206bc:	781b      	ldrb	r3, [r3, #0]
 80206be:	f003 0303 	and.w	r3, r3, #3
 80206c2:	2b02      	cmp	r3, #2
 80206c4:	d108      	bne.n	80206d8 <SCSI_StartStopUnit+0x4c>
  {
    SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, INVALID_FIELED_IN_COMMAND);
 80206c6:	7af9      	ldrb	r1, [r7, #11]
 80206c8:	2324      	movs	r3, #36	; 0x24
 80206ca:	2205      	movs	r2, #5
 80206cc:	68f8      	ldr	r0, [r7, #12]
 80206ce:	f7ff ff96 	bl	80205fe <SCSI_SenseCode>

    return -1;
 80206d2:	f04f 33ff 	mov.w	r3, #4294967295
 80206d6:	e026      	b.n	8020726 <SCSI_StartStopUnit+0x9a>
  }

  if ((params[4] & 0x3U) == 0x1U) /* START=1 */
 80206d8:	687b      	ldr	r3, [r7, #4]
 80206da:	3304      	adds	r3, #4
 80206dc:	781b      	ldrb	r3, [r3, #0]
 80206de:	f003 0303 	and.w	r3, r3, #3
 80206e2:	2b01      	cmp	r3, #1
 80206e4:	d104      	bne.n	80206f0 <SCSI_StartStopUnit+0x64>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 80206e6:	697b      	ldr	r3, [r7, #20]
 80206e8:	2200      	movs	r2, #0
 80206ea:	f883 2262 	strb.w	r2, [r3, #610]	; 0x262
 80206ee:	e016      	b.n	802071e <SCSI_StartStopUnit+0x92>
  }
  else if ((params[4] & 0x3U) == 0x2U) /* START=0 and LOEJ Load Eject=1 */
 80206f0:	687b      	ldr	r3, [r7, #4]
 80206f2:	3304      	adds	r3, #4
 80206f4:	781b      	ldrb	r3, [r3, #0]
 80206f6:	f003 0303 	and.w	r3, r3, #3
 80206fa:	2b02      	cmp	r3, #2
 80206fc:	d104      	bne.n	8020708 <SCSI_StartStopUnit+0x7c>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_EJECTED;
 80206fe:	697b      	ldr	r3, [r7, #20]
 8020700:	2202      	movs	r2, #2
 8020702:	f883 2262 	strb.w	r2, [r3, #610]	; 0x262
 8020706:	e00a      	b.n	802071e <SCSI_StartStopUnit+0x92>
  }
  else if ((params[4] & 0x3U) == 0x3U) /* START=1 and LOEJ Load Eject=1 */
 8020708:	687b      	ldr	r3, [r7, #4]
 802070a:	3304      	adds	r3, #4
 802070c:	781b      	ldrb	r3, [r3, #0]
 802070e:	f003 0303 	and.w	r3, r3, #3
 8020712:	2b03      	cmp	r3, #3
 8020714:	d103      	bne.n	802071e <SCSI_StartStopUnit+0x92>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 8020716:	697b      	ldr	r3, [r7, #20]
 8020718:	2200      	movs	r2, #0
 802071a:	f883 2262 	strb.w	r2, [r3, #610]	; 0x262
  }
  else
  {
    /* .. */
  }
  hmsc->bot_data_length = 0U;
 802071e:	697b      	ldr	r3, [r7, #20]
 8020720:	2200      	movs	r2, #0
 8020722:	60da      	str	r2, [r3, #12]

  return 0;
 8020724:	2300      	movs	r3, #0
}
 8020726:	4618      	mov	r0, r3
 8020728:	3718      	adds	r7, #24
 802072a:	46bd      	mov	sp, r7
 802072c:	bd80      	pop	{r7, pc}

0802072e <SCSI_AllowPreventRemovable>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_AllowPreventRemovable(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 802072e:	b480      	push	{r7}
 8020730:	b087      	sub	sp, #28
 8020732:	af00      	add	r7, sp, #0
 8020734:	60f8      	str	r0, [r7, #12]
 8020736:	460b      	mov	r3, r1
 8020738:	607a      	str	r2, [r7, #4]
 802073a:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 802073c:	68fb      	ldr	r3, [r7, #12]
 802073e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8020742:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 8020744:	697b      	ldr	r3, [r7, #20]
 8020746:	2b00      	cmp	r3, #0
 8020748:	d102      	bne.n	8020750 <SCSI_AllowPreventRemovable+0x22>
  {
    return -1;
 802074a:	f04f 33ff 	mov.w	r3, #4294967295
 802074e:	e011      	b.n	8020774 <SCSI_AllowPreventRemovable+0x46>
  }

  if (params[4] == 0U)
 8020750:	687b      	ldr	r3, [r7, #4]
 8020752:	3304      	adds	r3, #4
 8020754:	781b      	ldrb	r3, [r3, #0]
 8020756:	2b00      	cmp	r3, #0
 8020758:	d104      	bne.n	8020764 <SCSI_AllowPreventRemovable+0x36>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 802075a:	697b      	ldr	r3, [r7, #20]
 802075c:	2200      	movs	r2, #0
 802075e:	f883 2262 	strb.w	r2, [r3, #610]	; 0x262
 8020762:	e003      	b.n	802076c <SCSI_AllowPreventRemovable+0x3e>
  }
  else
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_LOCKED;
 8020764:	697b      	ldr	r3, [r7, #20]
 8020766:	2201      	movs	r2, #1
 8020768:	f883 2262 	strb.w	r2, [r3, #610]	; 0x262
  }

  hmsc->bot_data_length = 0U;
 802076c:	697b      	ldr	r3, [r7, #20]
 802076e:	2200      	movs	r2, #0
 8020770:	60da      	str	r2, [r3, #12]

  return 0;
 8020772:	2300      	movs	r3, #0
}
 8020774:	4618      	mov	r0, r3
 8020776:	371c      	adds	r7, #28
 8020778:	46bd      	mov	sp, r7
 802077a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802077e:	4770      	bx	lr

08020780 <SCSI_Read10>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Read10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8020780:	b580      	push	{r7, lr}
 8020782:	b086      	sub	sp, #24
 8020784:	af00      	add	r7, sp, #0
 8020786:	60f8      	str	r0, [r7, #12]
 8020788:	460b      	mov	r3, r1
 802078a:	607a      	str	r2, [r7, #4]
 802078c:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 802078e:	68fb      	ldr	r3, [r7, #12]
 8020790:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8020794:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 8020796:	697b      	ldr	r3, [r7, #20]
 8020798:	2b00      	cmp	r3, #0
 802079a:	d102      	bne.n	80207a2 <SCSI_Read10+0x22>
  {
    return -1;
 802079c:	f04f 33ff 	mov.w	r3, #4294967295
 80207a0:	e08a      	b.n	80208b8 <SCSI_Read10+0x138>
  }

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 80207a2:	697b      	ldr	r3, [r7, #20]
 80207a4:	7a1b      	ldrb	r3, [r3, #8]
 80207a6:	2b00      	cmp	r3, #0
 80207a8:	d17c      	bne.n	80208a4 <SCSI_Read10+0x124>
  {
    /* case 10 : Ho <> Di */
    if ((hmsc->cbw.bmFlags & 0x80U) != 0x80U)
 80207aa:	697b      	ldr	r3, [r7, #20]
 80207ac:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
 80207b0:	b25b      	sxtb	r3, r3
 80207b2:	2b00      	cmp	r3, #0
 80207b4:	db0a      	blt.n	80207cc <SCSI_Read10+0x4c>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 80207b6:	697b      	ldr	r3, [r7, #20]
 80207b8:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 80207bc:	2320      	movs	r3, #32
 80207be:	2205      	movs	r2, #5
 80207c0:	68f8      	ldr	r0, [r7, #12]
 80207c2:	f7ff ff1c 	bl	80205fe <SCSI_SenseCode>
      return -1;
 80207c6:	f04f 33ff 	mov.w	r3, #4294967295
 80207ca:	e075      	b.n	80208b8 <SCSI_Read10+0x138>
    }

    if (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED)
 80207cc:	697b      	ldr	r3, [r7, #20]
 80207ce:	f893 3262 	ldrb.w	r3, [r3, #610]	; 0x262
 80207d2:	2b02      	cmp	r3, #2
 80207d4:	d108      	bne.n	80207e8 <SCSI_Read10+0x68>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 80207d6:	7af9      	ldrb	r1, [r7, #11]
 80207d8:	233a      	movs	r3, #58	; 0x3a
 80207da:	2202      	movs	r2, #2
 80207dc:	68f8      	ldr	r0, [r7, #12]
 80207de:	f7ff ff0e 	bl	80205fe <SCSI_SenseCode>

      return -1;
 80207e2:	f04f 33ff 	mov.w	r3, #4294967295
 80207e6:	e067      	b.n	80208b8 <SCSI_Read10+0x138>
    }

    if (((USBD_StorageTypeDef *)pdev->pUserData)->IsReady(lun) != 0)
 80207e8:	68fb      	ldr	r3, [r7, #12]
 80207ea:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80207ee:	689b      	ldr	r3, [r3, #8]
 80207f0:	7afa      	ldrb	r2, [r7, #11]
 80207f2:	4610      	mov	r0, r2
 80207f4:	4798      	blx	r3
 80207f6:	4603      	mov	r3, r0
 80207f8:	2b00      	cmp	r3, #0
 80207fa:	d008      	beq.n	802080e <SCSI_Read10+0x8e>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 80207fc:	7af9      	ldrb	r1, [r7, #11]
 80207fe:	233a      	movs	r3, #58	; 0x3a
 8020800:	2202      	movs	r2, #2
 8020802:	68f8      	ldr	r0, [r7, #12]
 8020804:	f7ff fefb 	bl	80205fe <SCSI_SenseCode>
      return -1;
 8020808:	f04f 33ff 	mov.w	r3, #4294967295
 802080c:	e054      	b.n	80208b8 <SCSI_Read10+0x138>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 802080e:	687b      	ldr	r3, [r7, #4]
 8020810:	3302      	adds	r3, #2
 8020812:	781b      	ldrb	r3, [r3, #0]
 8020814:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 8020816:	687b      	ldr	r3, [r7, #4]
 8020818:	3303      	adds	r3, #3
 802081a:	781b      	ldrb	r3, [r3, #0]
 802081c:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 802081e:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] <<  8) |
 8020820:	687b      	ldr	r3, [r7, #4]
 8020822:	3304      	adds	r3, #4
 8020824:	781b      	ldrb	r3, [r3, #0]
 8020826:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 8020828:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 802082a:	687a      	ldr	r2, [r7, #4]
 802082c:	3205      	adds	r2, #5
 802082e:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] <<  8) |
 8020830:	431a      	orrs	r2, r3
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8020832:	697b      	ldr	r3, [r7, #20]
 8020834:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

    hmsc->scsi_blk_len = ((uint32_t)params[7] <<  8) | (uint32_t)params[8];
 8020838:	687b      	ldr	r3, [r7, #4]
 802083a:	3307      	adds	r3, #7
 802083c:	781b      	ldrb	r3, [r3, #0]
 802083e:	021b      	lsls	r3, r3, #8
 8020840:	687a      	ldr	r2, [r7, #4]
 8020842:	3208      	adds	r2, #8
 8020844:	7812      	ldrb	r2, [r2, #0]
 8020846:	431a      	orrs	r2, r3
 8020848:	697b      	ldr	r3, [r7, #20]
 802084a:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 802084e:	697b      	ldr	r3, [r7, #20]
 8020850:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
 8020854:	697b      	ldr	r3, [r7, #20]
 8020856:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 802085a:	7af9      	ldrb	r1, [r7, #11]
 802085c:	68f8      	ldr	r0, [r7, #12]
 802085e:	f000 faad 	bl	8020dbc <SCSI_CheckAddressRange>
 8020862:	4603      	mov	r3, r0
 8020864:	2b00      	cmp	r3, #0
 8020866:	da02      	bge.n	802086e <SCSI_Read10+0xee>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 8020868:	f04f 33ff 	mov.w	r3, #4294967295
 802086c:	e024      	b.n	80208b8 <SCSI_Read10+0x138>
    }

    /* cases 4,5 : Hi <> Dn */
    if (hmsc->cbw.dDataLength != (hmsc->scsi_blk_len * hmsc->scsi_blk_size))
 802086e:	697b      	ldr	r3, [r7, #20]
 8020870:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 8020874:	697b      	ldr	r3, [r7, #20]
 8020876:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 802087a:	6979      	ldr	r1, [r7, #20]
 802087c:	f8b1 1264 	ldrh.w	r1, [r1, #612]	; 0x264
 8020880:	fb01 f303 	mul.w	r3, r1, r3
 8020884:	429a      	cmp	r2, r3
 8020886:	d00a      	beq.n	802089e <SCSI_Read10+0x11e>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8020888:	697b      	ldr	r3, [r7, #20]
 802088a:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 802088e:	2320      	movs	r3, #32
 8020890:	2205      	movs	r2, #5
 8020892:	68f8      	ldr	r0, [r7, #12]
 8020894:	f7ff feb3 	bl	80205fe <SCSI_SenseCode>
      return -1;
 8020898:	f04f 33ff 	mov.w	r3, #4294967295
 802089c:	e00c      	b.n	80208b8 <SCSI_Read10+0x138>
    }

    hmsc->bot_state = USBD_BOT_DATA_IN;
 802089e:	697b      	ldr	r3, [r7, #20]
 80208a0:	2202      	movs	r2, #2
 80208a2:	721a      	strb	r2, [r3, #8]
  }
  hmsc->bot_data_length = MSC_MEDIA_PACKET;
 80208a4:	697b      	ldr	r3, [r7, #20]
 80208a6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80208aa:	60da      	str	r2, [r3, #12]

  return SCSI_ProcessRead(pdev, lun);
 80208ac:	7afb      	ldrb	r3, [r7, #11]
 80208ae:	4619      	mov	r1, r3
 80208b0:	68f8      	ldr	r0, [r7, #12]
 80208b2:	f000 faab 	bl	8020e0c <SCSI_ProcessRead>
 80208b6:	4603      	mov	r3, r0
}
 80208b8:	4618      	mov	r0, r3
 80208ba:	3718      	adds	r7, #24
 80208bc:	46bd      	mov	sp, r7
 80208be:	bd80      	pop	{r7, pc}

080208c0 <SCSI_Read12>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Read12(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 80208c0:	b580      	push	{r7, lr}
 80208c2:	b086      	sub	sp, #24
 80208c4:	af00      	add	r7, sp, #0
 80208c6:	60f8      	str	r0, [r7, #12]
 80208c8:	460b      	mov	r3, r1
 80208ca:	607a      	str	r2, [r7, #4]
 80208cc:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 80208ce:	68fb      	ldr	r3, [r7, #12]
 80208d0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80208d4:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 80208d6:	697b      	ldr	r3, [r7, #20]
 80208d8:	2b00      	cmp	r3, #0
 80208da:	d102      	bne.n	80208e2 <SCSI_Read12+0x22>
  {
    return -1;
 80208dc:	f04f 33ff 	mov.w	r3, #4294967295
 80208e0:	e095      	b.n	8020a0e <SCSI_Read12+0x14e>
  }

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 80208e2:	697b      	ldr	r3, [r7, #20]
 80208e4:	7a1b      	ldrb	r3, [r3, #8]
 80208e6:	2b00      	cmp	r3, #0
 80208e8:	f040 8087 	bne.w	80209fa <SCSI_Read12+0x13a>
  {
    /* case 10 : Ho <> Di */
    if ((hmsc->cbw.bmFlags & 0x80U) != 0x80U)
 80208ec:	697b      	ldr	r3, [r7, #20]
 80208ee:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
 80208f2:	b25b      	sxtb	r3, r3
 80208f4:	2b00      	cmp	r3, #0
 80208f6:	db0a      	blt.n	802090e <SCSI_Read12+0x4e>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 80208f8:	697b      	ldr	r3, [r7, #20]
 80208fa:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 80208fe:	2320      	movs	r3, #32
 8020900:	2205      	movs	r2, #5
 8020902:	68f8      	ldr	r0, [r7, #12]
 8020904:	f7ff fe7b 	bl	80205fe <SCSI_SenseCode>
      return -1;
 8020908:	f04f 33ff 	mov.w	r3, #4294967295
 802090c:	e07f      	b.n	8020a0e <SCSI_Read12+0x14e>
    }

    if (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED)
 802090e:	697b      	ldr	r3, [r7, #20]
 8020910:	f893 3262 	ldrb.w	r3, [r3, #610]	; 0x262
 8020914:	2b02      	cmp	r3, #2
 8020916:	d108      	bne.n	802092a <SCSI_Read12+0x6a>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8020918:	7af9      	ldrb	r1, [r7, #11]
 802091a:	233a      	movs	r3, #58	; 0x3a
 802091c:	2202      	movs	r2, #2
 802091e:	68f8      	ldr	r0, [r7, #12]
 8020920:	f7ff fe6d 	bl	80205fe <SCSI_SenseCode>
      return -1;
 8020924:	f04f 33ff 	mov.w	r3, #4294967295
 8020928:	e071      	b.n	8020a0e <SCSI_Read12+0x14e>
    }

    if (((USBD_StorageTypeDef *)pdev->pUserData)->IsReady(lun) != 0)
 802092a:	68fb      	ldr	r3, [r7, #12]
 802092c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8020930:	689b      	ldr	r3, [r3, #8]
 8020932:	7afa      	ldrb	r2, [r7, #11]
 8020934:	4610      	mov	r0, r2
 8020936:	4798      	blx	r3
 8020938:	4603      	mov	r3, r0
 802093a:	2b00      	cmp	r3, #0
 802093c:	d008      	beq.n	8020950 <SCSI_Read12+0x90>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 802093e:	7af9      	ldrb	r1, [r7, #11]
 8020940:	233a      	movs	r3, #58	; 0x3a
 8020942:	2202      	movs	r2, #2
 8020944:	68f8      	ldr	r0, [r7, #12]
 8020946:	f7ff fe5a 	bl	80205fe <SCSI_SenseCode>
      return -1;
 802094a:	f04f 33ff 	mov.w	r3, #4294967295
 802094e:	e05e      	b.n	8020a0e <SCSI_Read12+0x14e>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8020950:	687b      	ldr	r3, [r7, #4]
 8020952:	3302      	adds	r3, #2
 8020954:	781b      	ldrb	r3, [r3, #0]
 8020956:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 8020958:	687b      	ldr	r3, [r7, #4]
 802095a:	3303      	adds	r3, #3
 802095c:	781b      	ldrb	r3, [r3, #0]
 802095e:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8020960:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] <<  8) |
 8020962:	687b      	ldr	r3, [r7, #4]
 8020964:	3304      	adds	r3, #4
 8020966:	781b      	ldrb	r3, [r3, #0]
 8020968:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 802096a:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 802096c:	687a      	ldr	r2, [r7, #4]
 802096e:	3205      	adds	r2, #5
 8020970:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] <<  8) |
 8020972:	431a      	orrs	r2, r3
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8020974:	697b      	ldr	r3, [r7, #20]
 8020976:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 802097a:	687b      	ldr	r3, [r7, #4]
 802097c:	3306      	adds	r3, #6
 802097e:	781b      	ldrb	r3, [r3, #0]
 8020980:	061a      	lsls	r2, r3, #24
                         ((uint32_t)params[7] << 16) |
 8020982:	687b      	ldr	r3, [r7, #4]
 8020984:	3307      	adds	r3, #7
 8020986:	781b      	ldrb	r3, [r3, #0]
 8020988:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 802098a:	431a      	orrs	r2, r3
                         ((uint32_t)params[8] << 8) |
 802098c:	687b      	ldr	r3, [r7, #4]
 802098e:	3308      	adds	r3, #8
 8020990:	781b      	ldrb	r3, [r3, #0]
 8020992:	021b      	lsls	r3, r3, #8
                         ((uint32_t)params[7] << 16) |
 8020994:	4313      	orrs	r3, r2
                         (uint32_t)params[9];
 8020996:	687a      	ldr	r2, [r7, #4]
 8020998:	3209      	adds	r2, #9
 802099a:	7812      	ldrb	r2, [r2, #0]
                         ((uint32_t)params[8] << 8) |
 802099c:	431a      	orrs	r2, r3
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 802099e:	697b      	ldr	r3, [r7, #20]
 80209a0:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 80209a4:	697b      	ldr	r3, [r7, #20]
 80209a6:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
 80209aa:	697b      	ldr	r3, [r7, #20]
 80209ac:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 80209b0:	7af9      	ldrb	r1, [r7, #11]
 80209b2:	68f8      	ldr	r0, [r7, #12]
 80209b4:	f000 fa02 	bl	8020dbc <SCSI_CheckAddressRange>
 80209b8:	4603      	mov	r3, r0
 80209ba:	2b00      	cmp	r3, #0
 80209bc:	da02      	bge.n	80209c4 <SCSI_Read12+0x104>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 80209be:	f04f 33ff 	mov.w	r3, #4294967295
 80209c2:	e024      	b.n	8020a0e <SCSI_Read12+0x14e>
    }

    /* cases 4,5 : Hi <> Dn */
    if (hmsc->cbw.dDataLength != (hmsc->scsi_blk_len * hmsc->scsi_blk_size))
 80209c4:	697b      	ldr	r3, [r7, #20]
 80209c6:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 80209ca:	697b      	ldr	r3, [r7, #20]
 80209cc:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 80209d0:	6979      	ldr	r1, [r7, #20]
 80209d2:	f8b1 1264 	ldrh.w	r1, [r1, #612]	; 0x264
 80209d6:	fb01 f303 	mul.w	r3, r1, r3
 80209da:	429a      	cmp	r2, r3
 80209dc:	d00a      	beq.n	80209f4 <SCSI_Read12+0x134>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 80209de:	697b      	ldr	r3, [r7, #20]
 80209e0:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 80209e4:	2320      	movs	r3, #32
 80209e6:	2205      	movs	r2, #5
 80209e8:	68f8      	ldr	r0, [r7, #12]
 80209ea:	f7ff fe08 	bl	80205fe <SCSI_SenseCode>
      return -1;
 80209ee:	f04f 33ff 	mov.w	r3, #4294967295
 80209f2:	e00c      	b.n	8020a0e <SCSI_Read12+0x14e>
    }

    hmsc->bot_state = USBD_BOT_DATA_IN;
 80209f4:	697b      	ldr	r3, [r7, #20]
 80209f6:	2202      	movs	r2, #2
 80209f8:	721a      	strb	r2, [r3, #8]
  }
  hmsc->bot_data_length = MSC_MEDIA_PACKET;
 80209fa:	697b      	ldr	r3, [r7, #20]
 80209fc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8020a00:	60da      	str	r2, [r3, #12]

  return SCSI_ProcessRead(pdev, lun);
 8020a02:	7afb      	ldrb	r3, [r7, #11]
 8020a04:	4619      	mov	r1, r3
 8020a06:	68f8      	ldr	r0, [r7, #12]
 8020a08:	f000 fa00 	bl	8020e0c <SCSI_ProcessRead>
 8020a0c:	4603      	mov	r3, r0
}
 8020a0e:	4618      	mov	r0, r3
 8020a10:	3718      	adds	r7, #24
 8020a12:	46bd      	mov	sp, r7
 8020a14:	bd80      	pop	{r7, pc}

08020a16 <SCSI_Write10>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Write10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8020a16:	b580      	push	{r7, lr}
 8020a18:	b086      	sub	sp, #24
 8020a1a:	af00      	add	r7, sp, #0
 8020a1c:	60f8      	str	r0, [r7, #12]
 8020a1e:	460b      	mov	r3, r1
 8020a20:	607a      	str	r2, [r7, #4]
 8020a22:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8020a24:	68fb      	ldr	r3, [r7, #12]
 8020a26:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8020a2a:	617b      	str	r3, [r7, #20]
  uint32_t len;

  if (hmsc == NULL)
 8020a2c:	697b      	ldr	r3, [r7, #20]
 8020a2e:	2b00      	cmp	r3, #0
 8020a30:	d102      	bne.n	8020a38 <SCSI_Write10+0x22>
  {
    return -1;
 8020a32:	f04f 33ff 	mov.w	r3, #4294967295
 8020a36:	e0af      	b.n	8020b98 <SCSI_Write10+0x182>
  }

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 8020a38:	697b      	ldr	r3, [r7, #20]
 8020a3a:	7a1b      	ldrb	r3, [r3, #8]
 8020a3c:	2b00      	cmp	r3, #0
 8020a3e:	f040 80a5 	bne.w	8020b8c <SCSI_Write10+0x176>
  {
    if (hmsc->cbw.dDataLength == 0U)
 8020a42:	697b      	ldr	r3, [r7, #20]
 8020a44:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8020a48:	2b00      	cmp	r3, #0
 8020a4a:	d10a      	bne.n	8020a62 <SCSI_Write10+0x4c>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8020a4c:	697b      	ldr	r3, [r7, #20]
 8020a4e:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 8020a52:	2320      	movs	r3, #32
 8020a54:	2205      	movs	r2, #5
 8020a56:	68f8      	ldr	r0, [r7, #12]
 8020a58:	f7ff fdd1 	bl	80205fe <SCSI_SenseCode>
      return -1;
 8020a5c:	f04f 33ff 	mov.w	r3, #4294967295
 8020a60:	e09a      	b.n	8020b98 <SCSI_Write10+0x182>
    }

    /* case 8 : Hi <> Do */
    if ((hmsc->cbw.bmFlags & 0x80U) == 0x80U)
 8020a62:	697b      	ldr	r3, [r7, #20]
 8020a64:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
 8020a68:	b25b      	sxtb	r3, r3
 8020a6a:	2b00      	cmp	r3, #0
 8020a6c:	da0a      	bge.n	8020a84 <SCSI_Write10+0x6e>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8020a6e:	697b      	ldr	r3, [r7, #20]
 8020a70:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 8020a74:	2320      	movs	r3, #32
 8020a76:	2205      	movs	r2, #5
 8020a78:	68f8      	ldr	r0, [r7, #12]
 8020a7a:	f7ff fdc0 	bl	80205fe <SCSI_SenseCode>
      return -1;
 8020a7e:	f04f 33ff 	mov.w	r3, #4294967295
 8020a82:	e089      	b.n	8020b98 <SCSI_Write10+0x182>
    }

    /* Check whether Media is ready */
    if (((USBD_StorageTypeDef *)pdev->pUserData)->IsReady(lun) != 0)
 8020a84:	68fb      	ldr	r3, [r7, #12]
 8020a86:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8020a8a:	689b      	ldr	r3, [r3, #8]
 8020a8c:	7afa      	ldrb	r2, [r7, #11]
 8020a8e:	4610      	mov	r0, r2
 8020a90:	4798      	blx	r3
 8020a92:	4603      	mov	r3, r0
 8020a94:	2b00      	cmp	r3, #0
 8020a96:	d008      	beq.n	8020aaa <SCSI_Write10+0x94>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8020a98:	7af9      	ldrb	r1, [r7, #11]
 8020a9a:	233a      	movs	r3, #58	; 0x3a
 8020a9c:	2202      	movs	r2, #2
 8020a9e:	68f8      	ldr	r0, [r7, #12]
 8020aa0:	f7ff fdad 	bl	80205fe <SCSI_SenseCode>
      return -1;
 8020aa4:	f04f 33ff 	mov.w	r3, #4294967295
 8020aa8:	e076      	b.n	8020b98 <SCSI_Write10+0x182>
    }

    /* Check If media is write-protected */
    if (((USBD_StorageTypeDef *)pdev->pUserData)->IsWriteProtected(lun) != 0)
 8020aaa:	68fb      	ldr	r3, [r7, #12]
 8020aac:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8020ab0:	68db      	ldr	r3, [r3, #12]
 8020ab2:	7afa      	ldrb	r2, [r7, #11]
 8020ab4:	4610      	mov	r0, r2
 8020ab6:	4798      	blx	r3
 8020ab8:	4603      	mov	r3, r0
 8020aba:	2b00      	cmp	r3, #0
 8020abc:	d008      	beq.n	8020ad0 <SCSI_Write10+0xba>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, WRITE_PROTECTED);
 8020abe:	7af9      	ldrb	r1, [r7, #11]
 8020ac0:	2327      	movs	r3, #39	; 0x27
 8020ac2:	2202      	movs	r2, #2
 8020ac4:	68f8      	ldr	r0, [r7, #12]
 8020ac6:	f7ff fd9a 	bl	80205fe <SCSI_SenseCode>
      return -1;
 8020aca:	f04f 33ff 	mov.w	r3, #4294967295
 8020ace:	e063      	b.n	8020b98 <SCSI_Write10+0x182>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8020ad0:	687b      	ldr	r3, [r7, #4]
 8020ad2:	3302      	adds	r3, #2
 8020ad4:	781b      	ldrb	r3, [r3, #0]
 8020ad6:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 8020ad8:	687b      	ldr	r3, [r7, #4]
 8020ada:	3303      	adds	r3, #3
 8020adc:	781b      	ldrb	r3, [r3, #0]
 8020ade:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8020ae0:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] << 8) |
 8020ae2:	687b      	ldr	r3, [r7, #4]
 8020ae4:	3304      	adds	r3, #4
 8020ae6:	781b      	ldrb	r3, [r3, #0]
 8020ae8:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 8020aea:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 8020aec:	687a      	ldr	r2, [r7, #4]
 8020aee:	3205      	adds	r2, #5
 8020af0:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] << 8) |
 8020af2:	431a      	orrs	r2, r3
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8020af4:	697b      	ldr	r3, [r7, #20]
 8020af6:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

    hmsc->scsi_blk_len = ((uint32_t)params[7] << 8) |
 8020afa:	687b      	ldr	r3, [r7, #4]
 8020afc:	3307      	adds	r3, #7
 8020afe:	781b      	ldrb	r3, [r3, #0]
 8020b00:	021b      	lsls	r3, r3, #8
                         (uint32_t)params[8];
 8020b02:	687a      	ldr	r2, [r7, #4]
 8020b04:	3208      	adds	r2, #8
 8020b06:	7812      	ldrb	r2, [r2, #0]
    hmsc->scsi_blk_len = ((uint32_t)params[7] << 8) |
 8020b08:	431a      	orrs	r2, r3
 8020b0a:	697b      	ldr	r3, [r7, #20]
 8020b0c:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

    /* check if LBA address is in the right range */
    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 8020b10:	697b      	ldr	r3, [r7, #20]
 8020b12:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
 8020b16:	697b      	ldr	r3, [r7, #20]
 8020b18:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 8020b1c:	7af9      	ldrb	r1, [r7, #11]
 8020b1e:	68f8      	ldr	r0, [r7, #12]
 8020b20:	f000 f94c 	bl	8020dbc <SCSI_CheckAddressRange>
 8020b24:	4603      	mov	r3, r0
 8020b26:	2b00      	cmp	r3, #0
 8020b28:	da02      	bge.n	8020b30 <SCSI_Write10+0x11a>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 8020b2a:	f04f 33ff 	mov.w	r3, #4294967295
 8020b2e:	e033      	b.n	8020b98 <SCSI_Write10+0x182>
    }

    len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 8020b30:	697b      	ldr	r3, [r7, #20]
 8020b32:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 8020b36:	697a      	ldr	r2, [r7, #20]
 8020b38:	f8b2 2264 	ldrh.w	r2, [r2, #612]	; 0x264
 8020b3c:	fb02 f303 	mul.w	r3, r2, r3
 8020b40:	613b      	str	r3, [r7, #16]

    /* cases 3,11,13 : Hn,Ho <> D0 */
    if (hmsc->cbw.dDataLength != len)
 8020b42:	697b      	ldr	r3, [r7, #20]
 8020b44:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8020b48:	693a      	ldr	r2, [r7, #16]
 8020b4a:	429a      	cmp	r2, r3
 8020b4c:	d00a      	beq.n	8020b64 <SCSI_Write10+0x14e>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8020b4e:	697b      	ldr	r3, [r7, #20]
 8020b50:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 8020b54:	2320      	movs	r3, #32
 8020b56:	2205      	movs	r2, #5
 8020b58:	68f8      	ldr	r0, [r7, #12]
 8020b5a:	f7ff fd50 	bl	80205fe <SCSI_SenseCode>
      return -1;
 8020b5e:	f04f 33ff 	mov.w	r3, #4294967295
 8020b62:	e019      	b.n	8020b98 <SCSI_Write10+0x182>
    }

    len = MIN(len, MSC_MEDIA_PACKET);
 8020b64:	693b      	ldr	r3, [r7, #16]
 8020b66:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8020b6a:	bf28      	it	cs
 8020b6c:	f44f 7300 	movcs.w	r3, #512	; 0x200
 8020b70:	613b      	str	r3, [r7, #16]

    /* Prepare EP to receive first data packet */
    hmsc->bot_state = USBD_BOT_DATA_OUT;
 8020b72:	697b      	ldr	r3, [r7, #20]
 8020b74:	2201      	movs	r2, #1
 8020b76:	721a      	strb	r2, [r3, #8]
    (void)USBD_LL_PrepareReceive(pdev, MSC_EPOUT_ADDR, hmsc->bot_data, len);
 8020b78:	697b      	ldr	r3, [r7, #20]
 8020b7a:	f103 0210 	add.w	r2, r3, #16
 8020b7e:	693b      	ldr	r3, [r7, #16]
 8020b80:	2101      	movs	r1, #1
 8020b82:	68f8      	ldr	r0, [r7, #12]
 8020b84:	f002 f87f 	bl	8022c86 <USBD_LL_PrepareReceive>
  else /* Write Process ongoing */
  {
    return SCSI_ProcessWrite(pdev, lun);
  }

  return 0;
 8020b88:	2300      	movs	r3, #0
 8020b8a:	e005      	b.n	8020b98 <SCSI_Write10+0x182>
    return SCSI_ProcessWrite(pdev, lun);
 8020b8c:	7afb      	ldrb	r3, [r7, #11]
 8020b8e:	4619      	mov	r1, r3
 8020b90:	68f8      	ldr	r0, [r7, #12]
 8020b92:	f000 f9b4 	bl	8020efe <SCSI_ProcessWrite>
 8020b96:	4603      	mov	r3, r0
}
 8020b98:	4618      	mov	r0, r3
 8020b9a:	3718      	adds	r7, #24
 8020b9c:	46bd      	mov	sp, r7
 8020b9e:	bd80      	pop	{r7, pc}

08020ba0 <SCSI_Write12>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Write12(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8020ba0:	b580      	push	{r7, lr}
 8020ba2:	b086      	sub	sp, #24
 8020ba4:	af00      	add	r7, sp, #0
 8020ba6:	60f8      	str	r0, [r7, #12]
 8020ba8:	460b      	mov	r3, r1
 8020baa:	607a      	str	r2, [r7, #4]
 8020bac:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8020bae:	68fb      	ldr	r3, [r7, #12]
 8020bb0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8020bb4:	617b      	str	r3, [r7, #20]
  uint32_t len;

  if (hmsc == NULL)
 8020bb6:	697b      	ldr	r3, [r7, #20]
 8020bb8:	2b00      	cmp	r3, #0
 8020bba:	d102      	bne.n	8020bc2 <SCSI_Write12+0x22>
  {
    return -1;
 8020bbc:	f04f 33ff 	mov.w	r3, #4294967295
 8020bc0:	e0bf      	b.n	8020d42 <SCSI_Write12+0x1a2>
  }

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 8020bc2:	697b      	ldr	r3, [r7, #20]
 8020bc4:	7a1b      	ldrb	r3, [r3, #8]
 8020bc6:	2b00      	cmp	r3, #0
 8020bc8:	f040 80b5 	bne.w	8020d36 <SCSI_Write12+0x196>
  {
    if (hmsc->cbw.dDataLength == 0U)
 8020bcc:	697b      	ldr	r3, [r7, #20]
 8020bce:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8020bd2:	2b00      	cmp	r3, #0
 8020bd4:	d10a      	bne.n	8020bec <SCSI_Write12+0x4c>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8020bd6:	697b      	ldr	r3, [r7, #20]
 8020bd8:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 8020bdc:	2320      	movs	r3, #32
 8020bde:	2205      	movs	r2, #5
 8020be0:	68f8      	ldr	r0, [r7, #12]
 8020be2:	f7ff fd0c 	bl	80205fe <SCSI_SenseCode>
      return -1;
 8020be6:	f04f 33ff 	mov.w	r3, #4294967295
 8020bea:	e0aa      	b.n	8020d42 <SCSI_Write12+0x1a2>
    }

    /* case 8 : Hi <> Do */
    if ((hmsc->cbw.bmFlags & 0x80U) == 0x80U)
 8020bec:	697b      	ldr	r3, [r7, #20]
 8020bee:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
 8020bf2:	b25b      	sxtb	r3, r3
 8020bf4:	2b00      	cmp	r3, #0
 8020bf6:	da0a      	bge.n	8020c0e <SCSI_Write12+0x6e>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8020bf8:	697b      	ldr	r3, [r7, #20]
 8020bfa:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 8020bfe:	2320      	movs	r3, #32
 8020c00:	2205      	movs	r2, #5
 8020c02:	68f8      	ldr	r0, [r7, #12]
 8020c04:	f7ff fcfb 	bl	80205fe <SCSI_SenseCode>
      return -1;
 8020c08:	f04f 33ff 	mov.w	r3, #4294967295
 8020c0c:	e099      	b.n	8020d42 <SCSI_Write12+0x1a2>
    }

    /* Check whether Media is ready */
    if (((USBD_StorageTypeDef *)pdev->pUserData)->IsReady(lun) != 0)
 8020c0e:	68fb      	ldr	r3, [r7, #12]
 8020c10:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8020c14:	689b      	ldr	r3, [r3, #8]
 8020c16:	7afa      	ldrb	r2, [r7, #11]
 8020c18:	4610      	mov	r0, r2
 8020c1a:	4798      	blx	r3
 8020c1c:	4603      	mov	r3, r0
 8020c1e:	2b00      	cmp	r3, #0
 8020c20:	d00b      	beq.n	8020c3a <SCSI_Write12+0x9a>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8020c22:	7af9      	ldrb	r1, [r7, #11]
 8020c24:	233a      	movs	r3, #58	; 0x3a
 8020c26:	2202      	movs	r2, #2
 8020c28:	68f8      	ldr	r0, [r7, #12]
 8020c2a:	f7ff fce8 	bl	80205fe <SCSI_SenseCode>
      hmsc->bot_state = USBD_BOT_NO_DATA;
 8020c2e:	697b      	ldr	r3, [r7, #20]
 8020c30:	2205      	movs	r2, #5
 8020c32:	721a      	strb	r2, [r3, #8]
      return -1;
 8020c34:	f04f 33ff 	mov.w	r3, #4294967295
 8020c38:	e083      	b.n	8020d42 <SCSI_Write12+0x1a2>
    }

    /* Check If media is write-protected */
    if (((USBD_StorageTypeDef *)pdev->pUserData)->IsWriteProtected(lun) != 0)
 8020c3a:	68fb      	ldr	r3, [r7, #12]
 8020c3c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8020c40:	68db      	ldr	r3, [r3, #12]
 8020c42:	7afa      	ldrb	r2, [r7, #11]
 8020c44:	4610      	mov	r0, r2
 8020c46:	4798      	blx	r3
 8020c48:	4603      	mov	r3, r0
 8020c4a:	2b00      	cmp	r3, #0
 8020c4c:	d00b      	beq.n	8020c66 <SCSI_Write12+0xc6>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, WRITE_PROTECTED);
 8020c4e:	7af9      	ldrb	r1, [r7, #11]
 8020c50:	2327      	movs	r3, #39	; 0x27
 8020c52:	2202      	movs	r2, #2
 8020c54:	68f8      	ldr	r0, [r7, #12]
 8020c56:	f7ff fcd2 	bl	80205fe <SCSI_SenseCode>
      hmsc->bot_state = USBD_BOT_NO_DATA;
 8020c5a:	697b      	ldr	r3, [r7, #20]
 8020c5c:	2205      	movs	r2, #5
 8020c5e:	721a      	strb	r2, [r3, #8]
      return -1;
 8020c60:	f04f 33ff 	mov.w	r3, #4294967295
 8020c64:	e06d      	b.n	8020d42 <SCSI_Write12+0x1a2>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8020c66:	687b      	ldr	r3, [r7, #4]
 8020c68:	3302      	adds	r3, #2
 8020c6a:	781b      	ldrb	r3, [r3, #0]
 8020c6c:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 8020c6e:	687b      	ldr	r3, [r7, #4]
 8020c70:	3303      	adds	r3, #3
 8020c72:	781b      	ldrb	r3, [r3, #0]
 8020c74:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8020c76:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] << 8) |
 8020c78:	687b      	ldr	r3, [r7, #4]
 8020c7a:	3304      	adds	r3, #4
 8020c7c:	781b      	ldrb	r3, [r3, #0]
 8020c7e:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 8020c80:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 8020c82:	687a      	ldr	r2, [r7, #4]
 8020c84:	3205      	adds	r2, #5
 8020c86:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] << 8) |
 8020c88:	431a      	orrs	r2, r3
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8020c8a:	697b      	ldr	r3, [r7, #20]
 8020c8c:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 8020c90:	687b      	ldr	r3, [r7, #4]
 8020c92:	3306      	adds	r3, #6
 8020c94:	781b      	ldrb	r3, [r3, #0]
 8020c96:	061a      	lsls	r2, r3, #24
                         ((uint32_t)params[7] << 16) |
 8020c98:	687b      	ldr	r3, [r7, #4]
 8020c9a:	3307      	adds	r3, #7
 8020c9c:	781b      	ldrb	r3, [r3, #0]
 8020c9e:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 8020ca0:	431a      	orrs	r2, r3
                         ((uint32_t)params[8] << 8) |
 8020ca2:	687b      	ldr	r3, [r7, #4]
 8020ca4:	3308      	adds	r3, #8
 8020ca6:	781b      	ldrb	r3, [r3, #0]
 8020ca8:	021b      	lsls	r3, r3, #8
                         ((uint32_t)params[7] << 16) |
 8020caa:	4313      	orrs	r3, r2
                         (uint32_t)params[9];
 8020cac:	687a      	ldr	r2, [r7, #4]
 8020cae:	3209      	adds	r2, #9
 8020cb0:	7812      	ldrb	r2, [r2, #0]
                         ((uint32_t)params[8] << 8) |
 8020cb2:	431a      	orrs	r2, r3
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 8020cb4:	697b      	ldr	r3, [r7, #20]
 8020cb6:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

    /* check if LBA address is in the right range */
    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 8020cba:	697b      	ldr	r3, [r7, #20]
 8020cbc:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
 8020cc0:	697b      	ldr	r3, [r7, #20]
 8020cc2:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 8020cc6:	7af9      	ldrb	r1, [r7, #11]
 8020cc8:	68f8      	ldr	r0, [r7, #12]
 8020cca:	f000 f877 	bl	8020dbc <SCSI_CheckAddressRange>
 8020cce:	4603      	mov	r3, r0
 8020cd0:	2b00      	cmp	r3, #0
 8020cd2:	da02      	bge.n	8020cda <SCSI_Write12+0x13a>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 8020cd4:	f04f 33ff 	mov.w	r3, #4294967295
 8020cd8:	e033      	b.n	8020d42 <SCSI_Write12+0x1a2>
    }

    len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 8020cda:	697b      	ldr	r3, [r7, #20]
 8020cdc:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 8020ce0:	697a      	ldr	r2, [r7, #20]
 8020ce2:	f8b2 2264 	ldrh.w	r2, [r2, #612]	; 0x264
 8020ce6:	fb02 f303 	mul.w	r3, r2, r3
 8020cea:	613b      	str	r3, [r7, #16]

    /* cases 3,11,13 : Hn,Ho <> D0 */
    if (hmsc->cbw.dDataLength != len)
 8020cec:	697b      	ldr	r3, [r7, #20]
 8020cee:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8020cf2:	693a      	ldr	r2, [r7, #16]
 8020cf4:	429a      	cmp	r2, r3
 8020cf6:	d00a      	beq.n	8020d0e <SCSI_Write12+0x16e>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8020cf8:	697b      	ldr	r3, [r7, #20]
 8020cfa:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 8020cfe:	2320      	movs	r3, #32
 8020d00:	2205      	movs	r2, #5
 8020d02:	68f8      	ldr	r0, [r7, #12]
 8020d04:	f7ff fc7b 	bl	80205fe <SCSI_SenseCode>
      return -1;
 8020d08:	f04f 33ff 	mov.w	r3, #4294967295
 8020d0c:	e019      	b.n	8020d42 <SCSI_Write12+0x1a2>
    }

    len = MIN(len, MSC_MEDIA_PACKET);
 8020d0e:	693b      	ldr	r3, [r7, #16]
 8020d10:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8020d14:	bf28      	it	cs
 8020d16:	f44f 7300 	movcs.w	r3, #512	; 0x200
 8020d1a:	613b      	str	r3, [r7, #16]

    /* Prepare EP to receive first data packet */
    hmsc->bot_state = USBD_BOT_DATA_OUT;
 8020d1c:	697b      	ldr	r3, [r7, #20]
 8020d1e:	2201      	movs	r2, #1
 8020d20:	721a      	strb	r2, [r3, #8]
    (void)USBD_LL_PrepareReceive(pdev, MSC_EPOUT_ADDR, hmsc->bot_data, len);
 8020d22:	697b      	ldr	r3, [r7, #20]
 8020d24:	f103 0210 	add.w	r2, r3, #16
 8020d28:	693b      	ldr	r3, [r7, #16]
 8020d2a:	2101      	movs	r1, #1
 8020d2c:	68f8      	ldr	r0, [r7, #12]
 8020d2e:	f001 ffaa 	bl	8022c86 <USBD_LL_PrepareReceive>
  else /* Write Process ongoing */
  {
    return SCSI_ProcessWrite(pdev, lun);
  }

  return 0;
 8020d32:	2300      	movs	r3, #0
 8020d34:	e005      	b.n	8020d42 <SCSI_Write12+0x1a2>
    return SCSI_ProcessWrite(pdev, lun);
 8020d36:	7afb      	ldrb	r3, [r7, #11]
 8020d38:	4619      	mov	r1, r3
 8020d3a:	68f8      	ldr	r0, [r7, #12]
 8020d3c:	f000 f8df 	bl	8020efe <SCSI_ProcessWrite>
 8020d40:	4603      	mov	r3, r0
}
 8020d42:	4618      	mov	r0, r3
 8020d44:	3718      	adds	r7, #24
 8020d46:	46bd      	mov	sp, r7
 8020d48:	bd80      	pop	{r7, pc}

08020d4a <SCSI_Verify10>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Verify10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8020d4a:	b580      	push	{r7, lr}
 8020d4c:	b086      	sub	sp, #24
 8020d4e:	af00      	add	r7, sp, #0
 8020d50:	60f8      	str	r0, [r7, #12]
 8020d52:	460b      	mov	r3, r1
 8020d54:	607a      	str	r2, [r7, #4]
 8020d56:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8020d58:	68fb      	ldr	r3, [r7, #12]
 8020d5a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8020d5e:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 8020d60:	697b      	ldr	r3, [r7, #20]
 8020d62:	2b00      	cmp	r3, #0
 8020d64:	d102      	bne.n	8020d6c <SCSI_Verify10+0x22>
  {
    return -1;
 8020d66:	f04f 33ff 	mov.w	r3, #4294967295
 8020d6a:	e023      	b.n	8020db4 <SCSI_Verify10+0x6a>
  }

  if ((params[1] & 0x02U) == 0x02U)
 8020d6c:	687b      	ldr	r3, [r7, #4]
 8020d6e:	3301      	adds	r3, #1
 8020d70:	781b      	ldrb	r3, [r3, #0]
 8020d72:	f003 0302 	and.w	r3, r3, #2
 8020d76:	2b00      	cmp	r3, #0
 8020d78:	d008      	beq.n	8020d8c <SCSI_Verify10+0x42>
  {
    SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, INVALID_FIELED_IN_COMMAND);
 8020d7a:	7af9      	ldrb	r1, [r7, #11]
 8020d7c:	2324      	movs	r3, #36	; 0x24
 8020d7e:	2205      	movs	r2, #5
 8020d80:	68f8      	ldr	r0, [r7, #12]
 8020d82:	f7ff fc3c 	bl	80205fe <SCSI_SenseCode>
    return -1; /* Error, Verify Mode Not supported*/
 8020d86:	f04f 33ff 	mov.w	r3, #4294967295
 8020d8a:	e013      	b.n	8020db4 <SCSI_Verify10+0x6a>
  }

  if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr, hmsc->scsi_blk_len) < 0)
 8020d8c:	697b      	ldr	r3, [r7, #20]
 8020d8e:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
 8020d92:	697b      	ldr	r3, [r7, #20]
 8020d94:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 8020d98:	7af9      	ldrb	r1, [r7, #11]
 8020d9a:	68f8      	ldr	r0, [r7, #12]
 8020d9c:	f000 f80e 	bl	8020dbc <SCSI_CheckAddressRange>
 8020da0:	4603      	mov	r3, r0
 8020da2:	2b00      	cmp	r3, #0
 8020da4:	da02      	bge.n	8020dac <SCSI_Verify10+0x62>
  {
    return -1; /* error */
 8020da6:	f04f 33ff 	mov.w	r3, #4294967295
 8020daa:	e003      	b.n	8020db4 <SCSI_Verify10+0x6a>
  }

  hmsc->bot_data_length = 0U;
 8020dac:	697b      	ldr	r3, [r7, #20]
 8020dae:	2200      	movs	r2, #0
 8020db0:	60da      	str	r2, [r3, #12]

  return 0;
 8020db2:	2300      	movs	r3, #0
}
 8020db4:	4618      	mov	r0, r3
 8020db6:	3718      	adds	r7, #24
 8020db8:	46bd      	mov	sp, r7
 8020dba:	bd80      	pop	{r7, pc}

08020dbc <SCSI_CheckAddressRange>:
  * @param  blk_nbr: number of block to be processed
  * @retval status
  */
static int8_t SCSI_CheckAddressRange(USBD_HandleTypeDef *pdev, uint8_t lun,
                                     uint32_t blk_offset, uint32_t blk_nbr)
{
 8020dbc:	b580      	push	{r7, lr}
 8020dbe:	b086      	sub	sp, #24
 8020dc0:	af00      	add	r7, sp, #0
 8020dc2:	60f8      	str	r0, [r7, #12]
 8020dc4:	607a      	str	r2, [r7, #4]
 8020dc6:	603b      	str	r3, [r7, #0]
 8020dc8:	460b      	mov	r3, r1
 8020dca:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8020dcc:	68fb      	ldr	r3, [r7, #12]
 8020dce:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8020dd2:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 8020dd4:	697b      	ldr	r3, [r7, #20]
 8020dd6:	2b00      	cmp	r3, #0
 8020dd8:	d102      	bne.n	8020de0 <SCSI_CheckAddressRange+0x24>
  {
    return -1;
 8020dda:	f04f 33ff 	mov.w	r3, #4294967295
 8020dde:	e011      	b.n	8020e04 <SCSI_CheckAddressRange+0x48>
  }

  if ((blk_offset + blk_nbr) > hmsc->scsi_blk_nbr)
 8020de0:	687a      	ldr	r2, [r7, #4]
 8020de2:	683b      	ldr	r3, [r7, #0]
 8020de4:	441a      	add	r2, r3
 8020de6:	697b      	ldr	r3, [r7, #20]
 8020de8:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8020dec:	429a      	cmp	r2, r3
 8020dee:	d908      	bls.n	8020e02 <SCSI_CheckAddressRange+0x46>
  {
    SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, ADDRESS_OUT_OF_RANGE);
 8020df0:	7af9      	ldrb	r1, [r7, #11]
 8020df2:	2321      	movs	r3, #33	; 0x21
 8020df4:	2205      	movs	r2, #5
 8020df6:	68f8      	ldr	r0, [r7, #12]
 8020df8:	f7ff fc01 	bl	80205fe <SCSI_SenseCode>
    return -1;
 8020dfc:	f04f 33ff 	mov.w	r3, #4294967295
 8020e00:	e000      	b.n	8020e04 <SCSI_CheckAddressRange+0x48>
  }

  return 0;
 8020e02:	2300      	movs	r3, #0
}
 8020e04:	4618      	mov	r0, r3
 8020e06:	3718      	adds	r7, #24
 8020e08:	46bd      	mov	sp, r7
 8020e0a:	bd80      	pop	{r7, pc}

08020e0c <SCSI_ProcessRead>:
  *         Handle Read Process
  * @param  lun: Logical unit number
  * @retval status
  */
static int8_t SCSI_ProcessRead(USBD_HandleTypeDef *pdev, uint8_t lun)
{
 8020e0c:	b590      	push	{r4, r7, lr}
 8020e0e:	b085      	sub	sp, #20
 8020e10:	af00      	add	r7, sp, #0
 8020e12:	6078      	str	r0, [r7, #4]
 8020e14:	460b      	mov	r3, r1
 8020e16:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8020e18:	687b      	ldr	r3, [r7, #4]
 8020e1a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8020e1e:	60fb      	str	r3, [r7, #12]
  uint32_t len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 8020e20:	68fb      	ldr	r3, [r7, #12]
 8020e22:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 8020e26:	68fa      	ldr	r2, [r7, #12]
 8020e28:	f8b2 2264 	ldrh.w	r2, [r2, #612]	; 0x264
 8020e2c:	fb02 f303 	mul.w	r3, r2, r3
 8020e30:	60bb      	str	r3, [r7, #8]

  if (hmsc == NULL)
 8020e32:	68fb      	ldr	r3, [r7, #12]
 8020e34:	2b00      	cmp	r3, #0
 8020e36:	d102      	bne.n	8020e3e <SCSI_ProcessRead+0x32>
  {
    return -1;
 8020e38:	f04f 33ff 	mov.w	r3, #4294967295
 8020e3c:	e05b      	b.n	8020ef6 <SCSI_ProcessRead+0xea>
  }

  len = MIN(len, MSC_MEDIA_PACKET);
 8020e3e:	68bb      	ldr	r3, [r7, #8]
 8020e40:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8020e44:	bf28      	it	cs
 8020e46:	f44f 7300 	movcs.w	r3, #512	; 0x200
 8020e4a:	60bb      	str	r3, [r7, #8]

  if (((USBD_StorageTypeDef *)pdev->pUserData)->Read(lun, hmsc->bot_data,
 8020e4c:	687b      	ldr	r3, [r7, #4]
 8020e4e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8020e52:	691c      	ldr	r4, [r3, #16]
 8020e54:	68fb      	ldr	r3, [r7, #12]
 8020e56:	f103 0110 	add.w	r1, r3, #16
 8020e5a:	68fb      	ldr	r3, [r7, #12]
 8020e5c:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
                                                     hmsc->scsi_blk_addr,
                                                     (len / hmsc->scsi_blk_size)) < 0)
 8020e60:	68fb      	ldr	r3, [r7, #12]
 8020e62:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 8020e66:	4618      	mov	r0, r3
 8020e68:	68bb      	ldr	r3, [r7, #8]
 8020e6a:	fbb3 f3f0 	udiv	r3, r3, r0
  if (((USBD_StorageTypeDef *)pdev->pUserData)->Read(lun, hmsc->bot_data,
 8020e6e:	b29b      	uxth	r3, r3
 8020e70:	78f8      	ldrb	r0, [r7, #3]
 8020e72:	47a0      	blx	r4
 8020e74:	4603      	mov	r3, r0
 8020e76:	2b00      	cmp	r3, #0
 8020e78:	da08      	bge.n	8020e8c <SCSI_ProcessRead+0x80>
  {
    SCSI_SenseCode(pdev, lun, HARDWARE_ERROR, UNRECOVERED_READ_ERROR);
 8020e7a:	78f9      	ldrb	r1, [r7, #3]
 8020e7c:	2311      	movs	r3, #17
 8020e7e:	2204      	movs	r2, #4
 8020e80:	6878      	ldr	r0, [r7, #4]
 8020e82:	f7ff fbbc 	bl	80205fe <SCSI_SenseCode>
    return -1;
 8020e86:	f04f 33ff 	mov.w	r3, #4294967295
 8020e8a:	e034      	b.n	8020ef6 <SCSI_ProcessRead+0xea>
  }

  (void)USBD_LL_Transmit(pdev, MSC_EPIN_ADDR, hmsc->bot_data, len);
 8020e8c:	68fb      	ldr	r3, [r7, #12]
 8020e8e:	f103 0210 	add.w	r2, r3, #16
 8020e92:	68bb      	ldr	r3, [r7, #8]
 8020e94:	2181      	movs	r1, #129	; 0x81
 8020e96:	6878      	ldr	r0, [r7, #4]
 8020e98:	f001 fed4 	bl	8022c44 <USBD_LL_Transmit>

  hmsc->scsi_blk_addr += (len / hmsc->scsi_blk_size);
 8020e9c:	68fb      	ldr	r3, [r7, #12]
 8020e9e:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
 8020ea2:	68fb      	ldr	r3, [r7, #12]
 8020ea4:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 8020ea8:	4619      	mov	r1, r3
 8020eaa:	68bb      	ldr	r3, [r7, #8]
 8020eac:	fbb3 f3f1 	udiv	r3, r3, r1
 8020eb0:	441a      	add	r2, r3
 8020eb2:	68fb      	ldr	r3, [r7, #12]
 8020eb4:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
  hmsc->scsi_blk_len -= (len / hmsc->scsi_blk_size);
 8020eb8:	68fb      	ldr	r3, [r7, #12]
 8020eba:	f8d3 2270 	ldr.w	r2, [r3, #624]	; 0x270
 8020ebe:	68fb      	ldr	r3, [r7, #12]
 8020ec0:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 8020ec4:	4619      	mov	r1, r3
 8020ec6:	68bb      	ldr	r3, [r7, #8]
 8020ec8:	fbb3 f3f1 	udiv	r3, r3, r1
 8020ecc:	1ad2      	subs	r2, r2, r3
 8020ece:	68fb      	ldr	r3, [r7, #12]
 8020ed0:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

  /* case 6 : Hi = Di */
  hmsc->csw.dDataResidue -= len;
 8020ed4:	68fb      	ldr	r3, [r7, #12]
 8020ed6:	f8d3 2238 	ldr.w	r2, [r3, #568]	; 0x238
 8020eda:	68bb      	ldr	r3, [r7, #8]
 8020edc:	1ad2      	subs	r2, r2, r3
 8020ede:	68fb      	ldr	r3, [r7, #12]
 8020ee0:	f8c3 2238 	str.w	r2, [r3, #568]	; 0x238

  if (hmsc->scsi_blk_len == 0U)
 8020ee4:	68fb      	ldr	r3, [r7, #12]
 8020ee6:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 8020eea:	2b00      	cmp	r3, #0
 8020eec:	d102      	bne.n	8020ef4 <SCSI_ProcessRead+0xe8>
  {
    hmsc->bot_state = USBD_BOT_LAST_DATA_IN;
 8020eee:	68fb      	ldr	r3, [r7, #12]
 8020ef0:	2203      	movs	r2, #3
 8020ef2:	721a      	strb	r2, [r3, #8]
  }

  return 0;
 8020ef4:	2300      	movs	r3, #0
}
 8020ef6:	4618      	mov	r0, r3
 8020ef8:	3714      	adds	r7, #20
 8020efa:	46bd      	mov	sp, r7
 8020efc:	bd90      	pop	{r4, r7, pc}

08020efe <SCSI_ProcessWrite>:
  *         Handle Write Process
  * @param  lun: Logical unit number
  * @retval status
  */
static int8_t SCSI_ProcessWrite(USBD_HandleTypeDef *pdev, uint8_t lun)
{
 8020efe:	b590      	push	{r4, r7, lr}
 8020f00:	b085      	sub	sp, #20
 8020f02:	af00      	add	r7, sp, #0
 8020f04:	6078      	str	r0, [r7, #4]
 8020f06:	460b      	mov	r3, r1
 8020f08:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8020f0a:	687b      	ldr	r3, [r7, #4]
 8020f0c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8020f10:	60fb      	str	r3, [r7, #12]
  uint32_t len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 8020f12:	68fb      	ldr	r3, [r7, #12]
 8020f14:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 8020f18:	68fa      	ldr	r2, [r7, #12]
 8020f1a:	f8b2 2264 	ldrh.w	r2, [r2, #612]	; 0x264
 8020f1e:	fb02 f303 	mul.w	r3, r2, r3
 8020f22:	60bb      	str	r3, [r7, #8]

  if (hmsc == NULL)
 8020f24:	68fb      	ldr	r3, [r7, #12]
 8020f26:	2b00      	cmp	r3, #0
 8020f28:	d102      	bne.n	8020f30 <SCSI_ProcessWrite+0x32>
  {
    return -1;
 8020f2a:	f04f 33ff 	mov.w	r3, #4294967295
 8020f2e:	e06b      	b.n	8021008 <SCSI_ProcessWrite+0x10a>
  }

  len = MIN(len, MSC_MEDIA_PACKET);
 8020f30:	68bb      	ldr	r3, [r7, #8]
 8020f32:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8020f36:	bf28      	it	cs
 8020f38:	f44f 7300 	movcs.w	r3, #512	; 0x200
 8020f3c:	60bb      	str	r3, [r7, #8]

  if (((USBD_StorageTypeDef *)pdev->pUserData)->Write(lun, hmsc->bot_data,
 8020f3e:	687b      	ldr	r3, [r7, #4]
 8020f40:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8020f44:	695c      	ldr	r4, [r3, #20]
 8020f46:	68fb      	ldr	r3, [r7, #12]
 8020f48:	f103 0110 	add.w	r1, r3, #16
 8020f4c:	68fb      	ldr	r3, [r7, #12]
 8020f4e:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
                                                      hmsc->scsi_blk_addr,
                                                      (len / hmsc->scsi_blk_size)) < 0)
 8020f52:	68fb      	ldr	r3, [r7, #12]
 8020f54:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 8020f58:	4618      	mov	r0, r3
 8020f5a:	68bb      	ldr	r3, [r7, #8]
 8020f5c:	fbb3 f3f0 	udiv	r3, r3, r0
  if (((USBD_StorageTypeDef *)pdev->pUserData)->Write(lun, hmsc->bot_data,
 8020f60:	b29b      	uxth	r3, r3
 8020f62:	78f8      	ldrb	r0, [r7, #3]
 8020f64:	47a0      	blx	r4
 8020f66:	4603      	mov	r3, r0
 8020f68:	2b00      	cmp	r3, #0
 8020f6a:	da08      	bge.n	8020f7e <SCSI_ProcessWrite+0x80>
  {
    SCSI_SenseCode(pdev, lun, HARDWARE_ERROR, WRITE_FAULT);
 8020f6c:	78f9      	ldrb	r1, [r7, #3]
 8020f6e:	2303      	movs	r3, #3
 8020f70:	2204      	movs	r2, #4
 8020f72:	6878      	ldr	r0, [r7, #4]
 8020f74:	f7ff fb43 	bl	80205fe <SCSI_SenseCode>
    return -1;
 8020f78:	f04f 33ff 	mov.w	r3, #4294967295
 8020f7c:	e044      	b.n	8021008 <SCSI_ProcessWrite+0x10a>
  }

  hmsc->scsi_blk_addr += (len / hmsc->scsi_blk_size);
 8020f7e:	68fb      	ldr	r3, [r7, #12]
 8020f80:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
 8020f84:	68fb      	ldr	r3, [r7, #12]
 8020f86:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 8020f8a:	4619      	mov	r1, r3
 8020f8c:	68bb      	ldr	r3, [r7, #8]
 8020f8e:	fbb3 f3f1 	udiv	r3, r3, r1
 8020f92:	441a      	add	r2, r3
 8020f94:	68fb      	ldr	r3, [r7, #12]
 8020f96:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
  hmsc->scsi_blk_len -= (len / hmsc->scsi_blk_size);
 8020f9a:	68fb      	ldr	r3, [r7, #12]
 8020f9c:	f8d3 2270 	ldr.w	r2, [r3, #624]	; 0x270
 8020fa0:	68fb      	ldr	r3, [r7, #12]
 8020fa2:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 8020fa6:	4619      	mov	r1, r3
 8020fa8:	68bb      	ldr	r3, [r7, #8]
 8020faa:	fbb3 f3f1 	udiv	r3, r3, r1
 8020fae:	1ad2      	subs	r2, r2, r3
 8020fb0:	68fb      	ldr	r3, [r7, #12]
 8020fb2:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

  /* case 12 : Ho = Do */
  hmsc->csw.dDataResidue -= len;
 8020fb6:	68fb      	ldr	r3, [r7, #12]
 8020fb8:	f8d3 2238 	ldr.w	r2, [r3, #568]	; 0x238
 8020fbc:	68bb      	ldr	r3, [r7, #8]
 8020fbe:	1ad2      	subs	r2, r2, r3
 8020fc0:	68fb      	ldr	r3, [r7, #12]
 8020fc2:	f8c3 2238 	str.w	r2, [r3, #568]	; 0x238

  if (hmsc->scsi_blk_len == 0U)
 8020fc6:	68fb      	ldr	r3, [r7, #12]
 8020fc8:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 8020fcc:	2b00      	cmp	r3, #0
 8020fce:	d104      	bne.n	8020fda <SCSI_ProcessWrite+0xdc>
  {
    MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_PASSED);
 8020fd0:	2100      	movs	r1, #0
 8020fd2:	6878      	ldr	r0, [r7, #4]
 8020fd4:	f7fe fdd8 	bl	801fb88 <MSC_BOT_SendCSW>
 8020fd8:	e015      	b.n	8021006 <SCSI_ProcessWrite+0x108>
  }
  else
  {
    len = MIN((hmsc->scsi_blk_len * hmsc->scsi_blk_size), MSC_MEDIA_PACKET);
 8020fda:	68fb      	ldr	r3, [r7, #12]
 8020fdc:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 8020fe0:	68fa      	ldr	r2, [r7, #12]
 8020fe2:	f8b2 2264 	ldrh.w	r2, [r2, #612]	; 0x264
 8020fe6:	fb02 f303 	mul.w	r3, r2, r3
 8020fea:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8020fee:	bf28      	it	cs
 8020ff0:	f44f 7300 	movcs.w	r3, #512	; 0x200
 8020ff4:	60bb      	str	r3, [r7, #8]

    /* Prepare EP to Receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, MSC_EPOUT_ADDR, hmsc->bot_data, len);
 8020ff6:	68fb      	ldr	r3, [r7, #12]
 8020ff8:	f103 0210 	add.w	r2, r3, #16
 8020ffc:	68bb      	ldr	r3, [r7, #8]
 8020ffe:	2101      	movs	r1, #1
 8021000:	6878      	ldr	r0, [r7, #4]
 8021002:	f001 fe40 	bl	8022c86 <USBD_LL_PrepareReceive>
  }

  return 0;
 8021006:	2300      	movs	r3, #0
}
 8021008:	4618      	mov	r0, r3
 802100a:	3714      	adds	r7, #20
 802100c:	46bd      	mov	sp, r7
 802100e:	bd90      	pop	{r4, r7, pc}

08021010 <SCSI_UpdateBotData>:
  * @param  length: Data length
  * @retval status
  */
static int8_t SCSI_UpdateBotData(USBD_MSC_BOT_HandleTypeDef *hmsc,
                                 uint8_t *pBuff, uint16_t length)
{
 8021010:	b480      	push	{r7}
 8021012:	b087      	sub	sp, #28
 8021014:	af00      	add	r7, sp, #0
 8021016:	60f8      	str	r0, [r7, #12]
 8021018:	60b9      	str	r1, [r7, #8]
 802101a:	4613      	mov	r3, r2
 802101c:	80fb      	strh	r3, [r7, #6]
  uint16_t len = length;
 802101e:	88fb      	ldrh	r3, [r7, #6]
 8021020:	82fb      	strh	r3, [r7, #22]

  if (hmsc == NULL)
 8021022:	68fb      	ldr	r3, [r7, #12]
 8021024:	2b00      	cmp	r3, #0
 8021026:	d102      	bne.n	802102e <SCSI_UpdateBotData+0x1e>
  {
    return -1;
 8021028:	f04f 33ff 	mov.w	r3, #4294967295
 802102c:	e013      	b.n	8021056 <SCSI_UpdateBotData+0x46>
  }

  hmsc->bot_data_length = len;
 802102e:	8afa      	ldrh	r2, [r7, #22]
 8021030:	68fb      	ldr	r3, [r7, #12]
 8021032:	60da      	str	r2, [r3, #12]

  while (len != 0U)
 8021034:	e00b      	b.n	802104e <SCSI_UpdateBotData+0x3e>
  {
    len--;
 8021036:	8afb      	ldrh	r3, [r7, #22]
 8021038:	3b01      	subs	r3, #1
 802103a:	82fb      	strh	r3, [r7, #22]
    hmsc->bot_data[len] = pBuff[len];
 802103c:	8afb      	ldrh	r3, [r7, #22]
 802103e:	68ba      	ldr	r2, [r7, #8]
 8021040:	441a      	add	r2, r3
 8021042:	8afb      	ldrh	r3, [r7, #22]
 8021044:	7811      	ldrb	r1, [r2, #0]
 8021046:	68fa      	ldr	r2, [r7, #12]
 8021048:	4413      	add	r3, r2
 802104a:	460a      	mov	r2, r1
 802104c:	741a      	strb	r2, [r3, #16]
  while (len != 0U)
 802104e:	8afb      	ldrh	r3, [r7, #22]
 8021050:	2b00      	cmp	r3, #0
 8021052:	d1f0      	bne.n	8021036 <SCSI_UpdateBotData+0x26>
  }

  return 0;
 8021054:	2300      	movs	r3, #0
}
 8021056:	4618      	mov	r0, r3
 8021058:	371c      	adds	r7, #28
 802105a:	46bd      	mov	sp, r7
 802105c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021060:	4770      	bx	lr

08021062 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8021062:	b580      	push	{r7, lr}
 8021064:	b086      	sub	sp, #24
 8021066:	af00      	add	r7, sp, #0
 8021068:	60f8      	str	r0, [r7, #12]
 802106a:	60b9      	str	r1, [r7, #8]
 802106c:	4613      	mov	r3, r2
 802106e:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8021070:	68fb      	ldr	r3, [r7, #12]
 8021072:	2b00      	cmp	r3, #0
 8021074:	d101      	bne.n	802107a <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8021076:	2303      	movs	r3, #3
 8021078:	e01f      	b.n	80210ba <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 802107a:	68fb      	ldr	r3, [r7, #12]
 802107c:	2200      	movs	r2, #0
 802107e:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 8021082:	68fb      	ldr	r3, [r7, #12]
 8021084:	2200      	movs	r2, #0
 8021086:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 802108a:	68fb      	ldr	r3, [r7, #12]
 802108c:	2200      	movs	r2, #0
 802108e:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8021092:	68bb      	ldr	r3, [r7, #8]
 8021094:	2b00      	cmp	r3, #0
 8021096:	d003      	beq.n	80210a0 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8021098:	68fb      	ldr	r3, [r7, #12]
 802109a:	68ba      	ldr	r2, [r7, #8]
 802109c:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80210a0:	68fb      	ldr	r3, [r7, #12]
 80210a2:	2201      	movs	r2, #1
 80210a4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 80210a8:	68fb      	ldr	r3, [r7, #12]
 80210aa:	79fa      	ldrb	r2, [r7, #7]
 80210ac:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 80210ae:	68f8      	ldr	r0, [r7, #12]
 80210b0:	f001 fc74 	bl	802299c <USBD_LL_Init>
 80210b4:	4603      	mov	r3, r0
 80210b6:	75fb      	strb	r3, [r7, #23]

  return ret;
 80210b8:	7dfb      	ldrb	r3, [r7, #23]
}
 80210ba:	4618      	mov	r0, r3
 80210bc:	3718      	adds	r7, #24
 80210be:	46bd      	mov	sp, r7
 80210c0:	bd80      	pop	{r7, pc}

080210c2 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80210c2:	b580      	push	{r7, lr}
 80210c4:	b084      	sub	sp, #16
 80210c6:	af00      	add	r7, sp, #0
 80210c8:	6078      	str	r0, [r7, #4]
 80210ca:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80210cc:	2300      	movs	r3, #0
 80210ce:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 80210d0:	683b      	ldr	r3, [r7, #0]
 80210d2:	2b00      	cmp	r3, #0
 80210d4:	d101      	bne.n	80210da <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 80210d6:	2303      	movs	r3, #3
 80210d8:	e016      	b.n	8021108 <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 80210da:	687b      	ldr	r3, [r7, #4]
 80210dc:	683a      	ldr	r2, [r7, #0]
 80210de:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 80210e2:	687b      	ldr	r3, [r7, #4]
 80210e4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80210e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80210ea:	2b00      	cmp	r3, #0
 80210ec:	d00b      	beq.n	8021106 <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 80210ee:	687b      	ldr	r3, [r7, #4]
 80210f0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80210f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80210f6:	f107 020e 	add.w	r2, r7, #14
 80210fa:	4610      	mov	r0, r2
 80210fc:	4798      	blx	r3
 80210fe:	4602      	mov	r2, r0
 8021100:	687b      	ldr	r3, [r7, #4]
 8021102:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 8021106:	2300      	movs	r3, #0
}
 8021108:	4618      	mov	r0, r3
 802110a:	3710      	adds	r7, #16
 802110c:	46bd      	mov	sp, r7
 802110e:	bd80      	pop	{r7, pc}

08021110 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8021110:	b580      	push	{r7, lr}
 8021112:	b082      	sub	sp, #8
 8021114:	af00      	add	r7, sp, #0
 8021116:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8021118:	6878      	ldr	r0, [r7, #4]
 802111a:	f001 fc8b 	bl	8022a34 <USBD_LL_Start>
 802111e:	4603      	mov	r3, r0
}
 8021120:	4618      	mov	r0, r3
 8021122:	3708      	adds	r7, #8
 8021124:	46bd      	mov	sp, r7
 8021126:	bd80      	pop	{r7, pc}

08021128 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8021128:	b480      	push	{r7}
 802112a:	b083      	sub	sp, #12
 802112c:	af00      	add	r7, sp, #0
 802112e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8021130:	2300      	movs	r3, #0
}
 8021132:	4618      	mov	r0, r3
 8021134:	370c      	adds	r7, #12
 8021136:	46bd      	mov	sp, r7
 8021138:	f85d 7b04 	ldr.w	r7, [sp], #4
 802113c:	4770      	bx	lr

0802113e <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 802113e:	b580      	push	{r7, lr}
 8021140:	b084      	sub	sp, #16
 8021142:	af00      	add	r7, sp, #0
 8021144:	6078      	str	r0, [r7, #4]
 8021146:	460b      	mov	r3, r1
 8021148:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 802114a:	2303      	movs	r3, #3
 802114c:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 802114e:	687b      	ldr	r3, [r7, #4]
 8021150:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8021154:	2b00      	cmp	r3, #0
 8021156:	d009      	beq.n	802116c <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 8021158:	687b      	ldr	r3, [r7, #4]
 802115a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 802115e:	681b      	ldr	r3, [r3, #0]
 8021160:	78fa      	ldrb	r2, [r7, #3]
 8021162:	4611      	mov	r1, r2
 8021164:	6878      	ldr	r0, [r7, #4]
 8021166:	4798      	blx	r3
 8021168:	4603      	mov	r3, r0
 802116a:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 802116c:	7bfb      	ldrb	r3, [r7, #15]
}
 802116e:	4618      	mov	r0, r3
 8021170:	3710      	adds	r7, #16
 8021172:	46bd      	mov	sp, r7
 8021174:	bd80      	pop	{r7, pc}

08021176 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8021176:	b580      	push	{r7, lr}
 8021178:	b082      	sub	sp, #8
 802117a:	af00      	add	r7, sp, #0
 802117c:	6078      	str	r0, [r7, #4]
 802117e:	460b      	mov	r3, r1
 8021180:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 8021182:	687b      	ldr	r3, [r7, #4]
 8021184:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8021188:	2b00      	cmp	r3, #0
 802118a:	d007      	beq.n	802119c <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 802118c:	687b      	ldr	r3, [r7, #4]
 802118e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8021192:	685b      	ldr	r3, [r3, #4]
 8021194:	78fa      	ldrb	r2, [r7, #3]
 8021196:	4611      	mov	r1, r2
 8021198:	6878      	ldr	r0, [r7, #4]
 802119a:	4798      	blx	r3
  }

  return USBD_OK;
 802119c:	2300      	movs	r3, #0
}
 802119e:	4618      	mov	r0, r3
 80211a0:	3708      	adds	r7, #8
 80211a2:	46bd      	mov	sp, r7
 80211a4:	bd80      	pop	{r7, pc}

080211a6 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80211a6:	b580      	push	{r7, lr}
 80211a8:	b084      	sub	sp, #16
 80211aa:	af00      	add	r7, sp, #0
 80211ac:	6078      	str	r0, [r7, #4]
 80211ae:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 80211b0:	687b      	ldr	r3, [r7, #4]
 80211b2:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80211b6:	6839      	ldr	r1, [r7, #0]
 80211b8:	4618      	mov	r0, r3
 80211ba:	f000 ffb9 	bl	8022130 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80211be:	687b      	ldr	r3, [r7, #4]
 80211c0:	2201      	movs	r2, #1
 80211c2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80211c6:	687b      	ldr	r3, [r7, #4]
 80211c8:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 80211cc:	461a      	mov	r2, r3
 80211ce:	687b      	ldr	r3, [r7, #4]
 80211d0:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80211d4:	687b      	ldr	r3, [r7, #4]
 80211d6:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80211da:	f003 031f 	and.w	r3, r3, #31
 80211de:	2b02      	cmp	r3, #2
 80211e0:	d01a      	beq.n	8021218 <USBD_LL_SetupStage+0x72>
 80211e2:	2b02      	cmp	r3, #2
 80211e4:	d822      	bhi.n	802122c <USBD_LL_SetupStage+0x86>
 80211e6:	2b00      	cmp	r3, #0
 80211e8:	d002      	beq.n	80211f0 <USBD_LL_SetupStage+0x4a>
 80211ea:	2b01      	cmp	r3, #1
 80211ec:	d00a      	beq.n	8021204 <USBD_LL_SetupStage+0x5e>
 80211ee:	e01d      	b.n	802122c <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 80211f0:	687b      	ldr	r3, [r7, #4]
 80211f2:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80211f6:	4619      	mov	r1, r3
 80211f8:	6878      	ldr	r0, [r7, #4]
 80211fa:	f000 fa61 	bl	80216c0 <USBD_StdDevReq>
 80211fe:	4603      	mov	r3, r0
 8021200:	73fb      	strb	r3, [r7, #15]
      break;
 8021202:	e020      	b.n	8021246 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8021204:	687b      	ldr	r3, [r7, #4]
 8021206:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 802120a:	4619      	mov	r1, r3
 802120c:	6878      	ldr	r0, [r7, #4]
 802120e:	f000 fac5 	bl	802179c <USBD_StdItfReq>
 8021212:	4603      	mov	r3, r0
 8021214:	73fb      	strb	r3, [r7, #15]
      break;
 8021216:	e016      	b.n	8021246 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8021218:	687b      	ldr	r3, [r7, #4]
 802121a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 802121e:	4619      	mov	r1, r3
 8021220:	6878      	ldr	r0, [r7, #4]
 8021222:	f000 fb04 	bl	802182e <USBD_StdEPReq>
 8021226:	4603      	mov	r3, r0
 8021228:	73fb      	strb	r3, [r7, #15]
      break;
 802122a:	e00c      	b.n	8021246 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 802122c:	687b      	ldr	r3, [r7, #4]
 802122e:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8021232:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8021236:	b2db      	uxtb	r3, r3
 8021238:	4619      	mov	r1, r3
 802123a:	6878      	ldr	r0, [r7, #4]
 802123c:	f001 fc79 	bl	8022b32 <USBD_LL_StallEP>
 8021240:	4603      	mov	r3, r0
 8021242:	73fb      	strb	r3, [r7, #15]
      break;
 8021244:	bf00      	nop
  }

  return ret;
 8021246:	7bfb      	ldrb	r3, [r7, #15]
}
 8021248:	4618      	mov	r0, r3
 802124a:	3710      	adds	r7, #16
 802124c:	46bd      	mov	sp, r7
 802124e:	bd80      	pop	{r7, pc}

08021250 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8021250:	b580      	push	{r7, lr}
 8021252:	b086      	sub	sp, #24
 8021254:	af00      	add	r7, sp, #0
 8021256:	60f8      	str	r0, [r7, #12]
 8021258:	460b      	mov	r3, r1
 802125a:	607a      	str	r2, [r7, #4]
 802125c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 802125e:	7afb      	ldrb	r3, [r7, #11]
 8021260:	2b00      	cmp	r3, #0
 8021262:	d138      	bne.n	80212d6 <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 8021264:	68fb      	ldr	r3, [r7, #12]
 8021266:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 802126a:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 802126c:	68fb      	ldr	r3, [r7, #12]
 802126e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8021272:	2b03      	cmp	r3, #3
 8021274:	d14a      	bne.n	802130c <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 8021276:	693b      	ldr	r3, [r7, #16]
 8021278:	689a      	ldr	r2, [r3, #8]
 802127a:	693b      	ldr	r3, [r7, #16]
 802127c:	68db      	ldr	r3, [r3, #12]
 802127e:	429a      	cmp	r2, r3
 8021280:	d913      	bls.n	80212aa <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8021282:	693b      	ldr	r3, [r7, #16]
 8021284:	689a      	ldr	r2, [r3, #8]
 8021286:	693b      	ldr	r3, [r7, #16]
 8021288:	68db      	ldr	r3, [r3, #12]
 802128a:	1ad2      	subs	r2, r2, r3
 802128c:	693b      	ldr	r3, [r7, #16]
 802128e:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8021290:	693b      	ldr	r3, [r7, #16]
 8021292:	68da      	ldr	r2, [r3, #12]
 8021294:	693b      	ldr	r3, [r7, #16]
 8021296:	689b      	ldr	r3, [r3, #8]
 8021298:	4293      	cmp	r3, r2
 802129a:	bf28      	it	cs
 802129c:	4613      	movcs	r3, r2
 802129e:	461a      	mov	r2, r3
 80212a0:	6879      	ldr	r1, [r7, #4]
 80212a2:	68f8      	ldr	r0, [r7, #12]
 80212a4:	f001 f81b 	bl	80222de <USBD_CtlContinueRx>
 80212a8:	e030      	b.n	802130c <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80212aa:	68fb      	ldr	r3, [r7, #12]
 80212ac:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80212b0:	b2db      	uxtb	r3, r3
 80212b2:	2b03      	cmp	r3, #3
 80212b4:	d10b      	bne.n	80212ce <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 80212b6:	68fb      	ldr	r3, [r7, #12]
 80212b8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80212bc:	691b      	ldr	r3, [r3, #16]
 80212be:	2b00      	cmp	r3, #0
 80212c0:	d005      	beq.n	80212ce <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 80212c2:	68fb      	ldr	r3, [r7, #12]
 80212c4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80212c8:	691b      	ldr	r3, [r3, #16]
 80212ca:	68f8      	ldr	r0, [r7, #12]
 80212cc:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 80212ce:	68f8      	ldr	r0, [r7, #12]
 80212d0:	f001 f816 	bl	8022300 <USBD_CtlSendStatus>
 80212d4:	e01a      	b.n	802130c <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80212d6:	68fb      	ldr	r3, [r7, #12]
 80212d8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80212dc:	b2db      	uxtb	r3, r3
 80212de:	2b03      	cmp	r3, #3
 80212e0:	d114      	bne.n	802130c <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 80212e2:	68fb      	ldr	r3, [r7, #12]
 80212e4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80212e8:	699b      	ldr	r3, [r3, #24]
 80212ea:	2b00      	cmp	r3, #0
 80212ec:	d00e      	beq.n	802130c <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 80212ee:	68fb      	ldr	r3, [r7, #12]
 80212f0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80212f4:	699b      	ldr	r3, [r3, #24]
 80212f6:	7afa      	ldrb	r2, [r7, #11]
 80212f8:	4611      	mov	r1, r2
 80212fa:	68f8      	ldr	r0, [r7, #12]
 80212fc:	4798      	blx	r3
 80212fe:	4603      	mov	r3, r0
 8021300:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8021302:	7dfb      	ldrb	r3, [r7, #23]
 8021304:	2b00      	cmp	r3, #0
 8021306:	d001      	beq.n	802130c <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 8021308:	7dfb      	ldrb	r3, [r7, #23]
 802130a:	e000      	b.n	802130e <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 802130c:	2300      	movs	r3, #0
}
 802130e:	4618      	mov	r0, r3
 8021310:	3718      	adds	r7, #24
 8021312:	46bd      	mov	sp, r7
 8021314:	bd80      	pop	{r7, pc}

08021316 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8021316:	b580      	push	{r7, lr}
 8021318:	b086      	sub	sp, #24
 802131a:	af00      	add	r7, sp, #0
 802131c:	60f8      	str	r0, [r7, #12]
 802131e:	460b      	mov	r3, r1
 8021320:	607a      	str	r2, [r7, #4]
 8021322:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8021324:	7afb      	ldrb	r3, [r7, #11]
 8021326:	2b00      	cmp	r3, #0
 8021328:	d16b      	bne.n	8021402 <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 802132a:	68fb      	ldr	r3, [r7, #12]
 802132c:	3314      	adds	r3, #20
 802132e:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8021330:	68fb      	ldr	r3, [r7, #12]
 8021332:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8021336:	2b02      	cmp	r3, #2
 8021338:	d156      	bne.n	80213e8 <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 802133a:	693b      	ldr	r3, [r7, #16]
 802133c:	689a      	ldr	r2, [r3, #8]
 802133e:	693b      	ldr	r3, [r7, #16]
 8021340:	68db      	ldr	r3, [r3, #12]
 8021342:	429a      	cmp	r2, r3
 8021344:	d914      	bls.n	8021370 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8021346:	693b      	ldr	r3, [r7, #16]
 8021348:	689a      	ldr	r2, [r3, #8]
 802134a:	693b      	ldr	r3, [r7, #16]
 802134c:	68db      	ldr	r3, [r3, #12]
 802134e:	1ad2      	subs	r2, r2, r3
 8021350:	693b      	ldr	r3, [r7, #16]
 8021352:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8021354:	693b      	ldr	r3, [r7, #16]
 8021356:	689b      	ldr	r3, [r3, #8]
 8021358:	461a      	mov	r2, r3
 802135a:	6879      	ldr	r1, [r7, #4]
 802135c:	68f8      	ldr	r0, [r7, #12]
 802135e:	f000 ffad 	bl	80222bc <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8021362:	2300      	movs	r3, #0
 8021364:	2200      	movs	r2, #0
 8021366:	2100      	movs	r1, #0
 8021368:	68f8      	ldr	r0, [r7, #12]
 802136a:	f001 fc8c 	bl	8022c86 <USBD_LL_PrepareReceive>
 802136e:	e03b      	b.n	80213e8 <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8021370:	693b      	ldr	r3, [r7, #16]
 8021372:	68da      	ldr	r2, [r3, #12]
 8021374:	693b      	ldr	r3, [r7, #16]
 8021376:	689b      	ldr	r3, [r3, #8]
 8021378:	429a      	cmp	r2, r3
 802137a:	d11c      	bne.n	80213b6 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 802137c:	693b      	ldr	r3, [r7, #16]
 802137e:	685a      	ldr	r2, [r3, #4]
 8021380:	693b      	ldr	r3, [r7, #16]
 8021382:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8021384:	429a      	cmp	r2, r3
 8021386:	d316      	bcc.n	80213b6 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8021388:	693b      	ldr	r3, [r7, #16]
 802138a:	685a      	ldr	r2, [r3, #4]
 802138c:	68fb      	ldr	r3, [r7, #12]
 802138e:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8021392:	429a      	cmp	r2, r3
 8021394:	d20f      	bcs.n	80213b6 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8021396:	2200      	movs	r2, #0
 8021398:	2100      	movs	r1, #0
 802139a:	68f8      	ldr	r0, [r7, #12]
 802139c:	f000 ff8e 	bl	80222bc <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80213a0:	68fb      	ldr	r3, [r7, #12]
 80213a2:	2200      	movs	r2, #0
 80213a4:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80213a8:	2300      	movs	r3, #0
 80213aa:	2200      	movs	r2, #0
 80213ac:	2100      	movs	r1, #0
 80213ae:	68f8      	ldr	r0, [r7, #12]
 80213b0:	f001 fc69 	bl	8022c86 <USBD_LL_PrepareReceive>
 80213b4:	e018      	b.n	80213e8 <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80213b6:	68fb      	ldr	r3, [r7, #12]
 80213b8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80213bc:	b2db      	uxtb	r3, r3
 80213be:	2b03      	cmp	r3, #3
 80213c0:	d10b      	bne.n	80213da <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 80213c2:	68fb      	ldr	r3, [r7, #12]
 80213c4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80213c8:	68db      	ldr	r3, [r3, #12]
 80213ca:	2b00      	cmp	r3, #0
 80213cc:	d005      	beq.n	80213da <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 80213ce:	68fb      	ldr	r3, [r7, #12]
 80213d0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80213d4:	68db      	ldr	r3, [r3, #12]
 80213d6:	68f8      	ldr	r0, [r7, #12]
 80213d8:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80213da:	2180      	movs	r1, #128	; 0x80
 80213dc:	68f8      	ldr	r0, [r7, #12]
 80213de:	f001 fba8 	bl	8022b32 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 80213e2:	68f8      	ldr	r0, [r7, #12]
 80213e4:	f000 ff9f 	bl	8022326 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 80213e8:	68fb      	ldr	r3, [r7, #12]
 80213ea:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 80213ee:	2b01      	cmp	r3, #1
 80213f0:	d122      	bne.n	8021438 <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 80213f2:	68f8      	ldr	r0, [r7, #12]
 80213f4:	f7ff fe98 	bl	8021128 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80213f8:	68fb      	ldr	r3, [r7, #12]
 80213fa:	2200      	movs	r2, #0
 80213fc:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8021400:	e01a      	b.n	8021438 <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8021402:	68fb      	ldr	r3, [r7, #12]
 8021404:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8021408:	b2db      	uxtb	r3, r3
 802140a:	2b03      	cmp	r3, #3
 802140c:	d114      	bne.n	8021438 <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 802140e:	68fb      	ldr	r3, [r7, #12]
 8021410:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8021414:	695b      	ldr	r3, [r3, #20]
 8021416:	2b00      	cmp	r3, #0
 8021418:	d00e      	beq.n	8021438 <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 802141a:	68fb      	ldr	r3, [r7, #12]
 802141c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8021420:	695b      	ldr	r3, [r3, #20]
 8021422:	7afa      	ldrb	r2, [r7, #11]
 8021424:	4611      	mov	r1, r2
 8021426:	68f8      	ldr	r0, [r7, #12]
 8021428:	4798      	blx	r3
 802142a:	4603      	mov	r3, r0
 802142c:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 802142e:	7dfb      	ldrb	r3, [r7, #23]
 8021430:	2b00      	cmp	r3, #0
 8021432:	d001      	beq.n	8021438 <USBD_LL_DataInStage+0x122>
        {
          return ret;
 8021434:	7dfb      	ldrb	r3, [r7, #23]
 8021436:	e000      	b.n	802143a <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 8021438:	2300      	movs	r3, #0
}
 802143a:	4618      	mov	r0, r3
 802143c:	3718      	adds	r7, #24
 802143e:	46bd      	mov	sp, r7
 8021440:	bd80      	pop	{r7, pc}

08021442 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8021442:	b580      	push	{r7, lr}
 8021444:	b082      	sub	sp, #8
 8021446:	af00      	add	r7, sp, #0
 8021448:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 802144a:	687b      	ldr	r3, [r7, #4]
 802144c:	2201      	movs	r2, #1
 802144e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8021452:	687b      	ldr	r3, [r7, #4]
 8021454:	2200      	movs	r2, #0
 8021456:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 802145a:	687b      	ldr	r3, [r7, #4]
 802145c:	2200      	movs	r2, #0
 802145e:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8021460:	687b      	ldr	r3, [r7, #4]
 8021462:	2200      	movs	r2, #0
 8021464:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 8021468:	687b      	ldr	r3, [r7, #4]
 802146a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 802146e:	2b00      	cmp	r3, #0
 8021470:	d101      	bne.n	8021476 <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 8021472:	2303      	movs	r3, #3
 8021474:	e02f      	b.n	80214d6 <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 8021476:	687b      	ldr	r3, [r7, #4]
 8021478:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 802147c:	2b00      	cmp	r3, #0
 802147e:	d00f      	beq.n	80214a0 <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 8021480:	687b      	ldr	r3, [r7, #4]
 8021482:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8021486:	685b      	ldr	r3, [r3, #4]
 8021488:	2b00      	cmp	r3, #0
 802148a:	d009      	beq.n	80214a0 <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 802148c:	687b      	ldr	r3, [r7, #4]
 802148e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8021492:	685b      	ldr	r3, [r3, #4]
 8021494:	687a      	ldr	r2, [r7, #4]
 8021496:	6852      	ldr	r2, [r2, #4]
 8021498:	b2d2      	uxtb	r2, r2
 802149a:	4611      	mov	r1, r2
 802149c:	6878      	ldr	r0, [r7, #4]
 802149e:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80214a0:	2340      	movs	r3, #64	; 0x40
 80214a2:	2200      	movs	r2, #0
 80214a4:	2100      	movs	r1, #0
 80214a6:	6878      	ldr	r0, [r7, #4]
 80214a8:	f001 fadf 	bl	8022a6a <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80214ac:	687b      	ldr	r3, [r7, #4]
 80214ae:	2201      	movs	r2, #1
 80214b0:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80214b4:	687b      	ldr	r3, [r7, #4]
 80214b6:	2240      	movs	r2, #64	; 0x40
 80214b8:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80214bc:	2340      	movs	r3, #64	; 0x40
 80214be:	2200      	movs	r2, #0
 80214c0:	2180      	movs	r1, #128	; 0x80
 80214c2:	6878      	ldr	r0, [r7, #4]
 80214c4:	f001 fad1 	bl	8022a6a <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80214c8:	687b      	ldr	r3, [r7, #4]
 80214ca:	2201      	movs	r2, #1
 80214cc:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80214ce:	687b      	ldr	r3, [r7, #4]
 80214d0:	2240      	movs	r2, #64	; 0x40
 80214d2:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 80214d4:	2300      	movs	r3, #0
}
 80214d6:	4618      	mov	r0, r3
 80214d8:	3708      	adds	r7, #8
 80214da:	46bd      	mov	sp, r7
 80214dc:	bd80      	pop	{r7, pc}

080214de <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80214de:	b480      	push	{r7}
 80214e0:	b083      	sub	sp, #12
 80214e2:	af00      	add	r7, sp, #0
 80214e4:	6078      	str	r0, [r7, #4]
 80214e6:	460b      	mov	r3, r1
 80214e8:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80214ea:	687b      	ldr	r3, [r7, #4]
 80214ec:	78fa      	ldrb	r2, [r7, #3]
 80214ee:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80214f0:	2300      	movs	r3, #0
}
 80214f2:	4618      	mov	r0, r3
 80214f4:	370c      	adds	r7, #12
 80214f6:	46bd      	mov	sp, r7
 80214f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80214fc:	4770      	bx	lr

080214fe <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80214fe:	b480      	push	{r7}
 8021500:	b083      	sub	sp, #12
 8021502:	af00      	add	r7, sp, #0
 8021504:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8021506:	687b      	ldr	r3, [r7, #4]
 8021508:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 802150c:	b2da      	uxtb	r2, r3
 802150e:	687b      	ldr	r3, [r7, #4]
 8021510:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8021514:	687b      	ldr	r3, [r7, #4]
 8021516:	2204      	movs	r2, #4
 8021518:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 802151c:	2300      	movs	r3, #0
}
 802151e:	4618      	mov	r0, r3
 8021520:	370c      	adds	r7, #12
 8021522:	46bd      	mov	sp, r7
 8021524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021528:	4770      	bx	lr

0802152a <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 802152a:	b480      	push	{r7}
 802152c:	b083      	sub	sp, #12
 802152e:	af00      	add	r7, sp, #0
 8021530:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8021532:	687b      	ldr	r3, [r7, #4]
 8021534:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8021538:	b2db      	uxtb	r3, r3
 802153a:	2b04      	cmp	r3, #4
 802153c:	d106      	bne.n	802154c <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 802153e:	687b      	ldr	r3, [r7, #4]
 8021540:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8021544:	b2da      	uxtb	r2, r3
 8021546:	687b      	ldr	r3, [r7, #4]
 8021548:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 802154c:	2300      	movs	r3, #0
}
 802154e:	4618      	mov	r0, r3
 8021550:	370c      	adds	r7, #12
 8021552:	46bd      	mov	sp, r7
 8021554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021558:	4770      	bx	lr

0802155a <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 802155a:	b580      	push	{r7, lr}
 802155c:	b082      	sub	sp, #8
 802155e:	af00      	add	r7, sp, #0
 8021560:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 8021562:	687b      	ldr	r3, [r7, #4]
 8021564:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8021568:	2b00      	cmp	r3, #0
 802156a:	d101      	bne.n	8021570 <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 802156c:	2303      	movs	r3, #3
 802156e:	e012      	b.n	8021596 <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8021570:	687b      	ldr	r3, [r7, #4]
 8021572:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8021576:	b2db      	uxtb	r3, r3
 8021578:	2b03      	cmp	r3, #3
 802157a:	d10b      	bne.n	8021594 <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 802157c:	687b      	ldr	r3, [r7, #4]
 802157e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8021582:	69db      	ldr	r3, [r3, #28]
 8021584:	2b00      	cmp	r3, #0
 8021586:	d005      	beq.n	8021594 <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 8021588:	687b      	ldr	r3, [r7, #4]
 802158a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 802158e:	69db      	ldr	r3, [r3, #28]
 8021590:	6878      	ldr	r0, [r7, #4]
 8021592:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8021594:	2300      	movs	r3, #0
}
 8021596:	4618      	mov	r0, r3
 8021598:	3708      	adds	r7, #8
 802159a:	46bd      	mov	sp, r7
 802159c:	bd80      	pop	{r7, pc}

0802159e <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 802159e:	b580      	push	{r7, lr}
 80215a0:	b082      	sub	sp, #8
 80215a2:	af00      	add	r7, sp, #0
 80215a4:	6078      	str	r0, [r7, #4]
 80215a6:	460b      	mov	r3, r1
 80215a8:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 80215aa:	687b      	ldr	r3, [r7, #4]
 80215ac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80215b0:	2b00      	cmp	r3, #0
 80215b2:	d101      	bne.n	80215b8 <USBD_LL_IsoINIncomplete+0x1a>
  {
    return USBD_FAIL;
 80215b4:	2303      	movs	r3, #3
 80215b6:	e014      	b.n	80215e2 <USBD_LL_IsoINIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80215b8:	687b      	ldr	r3, [r7, #4]
 80215ba:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80215be:	b2db      	uxtb	r3, r3
 80215c0:	2b03      	cmp	r3, #3
 80215c2:	d10d      	bne.n	80215e0 <USBD_LL_IsoINIncomplete+0x42>
  {
    if (pdev->pClass->IsoINIncomplete != NULL)
 80215c4:	687b      	ldr	r3, [r7, #4]
 80215c6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80215ca:	6a1b      	ldr	r3, [r3, #32]
 80215cc:	2b00      	cmp	r3, #0
 80215ce:	d007      	beq.n	80215e0 <USBD_LL_IsoINIncomplete+0x42>
    {
      (void)pdev->pClass->IsoINIncomplete(pdev, epnum);
 80215d0:	687b      	ldr	r3, [r7, #4]
 80215d2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80215d6:	6a1b      	ldr	r3, [r3, #32]
 80215d8:	78fa      	ldrb	r2, [r7, #3]
 80215da:	4611      	mov	r1, r2
 80215dc:	6878      	ldr	r0, [r7, #4]
 80215de:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80215e0:	2300      	movs	r3, #0
}
 80215e2:	4618      	mov	r0, r3
 80215e4:	3708      	adds	r7, #8
 80215e6:	46bd      	mov	sp, r7
 80215e8:	bd80      	pop	{r7, pc}

080215ea <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 80215ea:	b580      	push	{r7, lr}
 80215ec:	b082      	sub	sp, #8
 80215ee:	af00      	add	r7, sp, #0
 80215f0:	6078      	str	r0, [r7, #4]
 80215f2:	460b      	mov	r3, r1
 80215f4:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 80215f6:	687b      	ldr	r3, [r7, #4]
 80215f8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80215fc:	2b00      	cmp	r3, #0
 80215fe:	d101      	bne.n	8021604 <USBD_LL_IsoOUTIncomplete+0x1a>
  {
    return USBD_FAIL;
 8021600:	2303      	movs	r3, #3
 8021602:	e014      	b.n	802162e <USBD_LL_IsoOUTIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8021604:	687b      	ldr	r3, [r7, #4]
 8021606:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 802160a:	b2db      	uxtb	r3, r3
 802160c:	2b03      	cmp	r3, #3
 802160e:	d10d      	bne.n	802162c <USBD_LL_IsoOUTIncomplete+0x42>
  {
    if (pdev->pClass->IsoOUTIncomplete != NULL)
 8021610:	687b      	ldr	r3, [r7, #4]
 8021612:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8021616:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8021618:	2b00      	cmp	r3, #0
 802161a:	d007      	beq.n	802162c <USBD_LL_IsoOUTIncomplete+0x42>
    {
      (void)pdev->pClass->IsoOUTIncomplete(pdev, epnum);
 802161c:	687b      	ldr	r3, [r7, #4]
 802161e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8021622:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8021624:	78fa      	ldrb	r2, [r7, #3]
 8021626:	4611      	mov	r1, r2
 8021628:	6878      	ldr	r0, [r7, #4]
 802162a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 802162c:	2300      	movs	r3, #0
}
 802162e:	4618      	mov	r0, r3
 8021630:	3708      	adds	r7, #8
 8021632:	46bd      	mov	sp, r7
 8021634:	bd80      	pop	{r7, pc}

08021636 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8021636:	b480      	push	{r7}
 8021638:	b083      	sub	sp, #12
 802163a:	af00      	add	r7, sp, #0
 802163c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 802163e:	2300      	movs	r3, #0
}
 8021640:	4618      	mov	r0, r3
 8021642:	370c      	adds	r7, #12
 8021644:	46bd      	mov	sp, r7
 8021646:	f85d 7b04 	ldr.w	r7, [sp], #4
 802164a:	4770      	bx	lr

0802164c <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 802164c:	b580      	push	{r7, lr}
 802164e:	b082      	sub	sp, #8
 8021650:	af00      	add	r7, sp, #0
 8021652:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8021654:	687b      	ldr	r3, [r7, #4]
 8021656:	2201      	movs	r2, #1
 8021658:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 802165c:	687b      	ldr	r3, [r7, #4]
 802165e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8021662:	2b00      	cmp	r3, #0
 8021664:	d009      	beq.n	802167a <USBD_LL_DevDisconnected+0x2e>
  {
    (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8021666:	687b      	ldr	r3, [r7, #4]
 8021668:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 802166c:	685b      	ldr	r3, [r3, #4]
 802166e:	687a      	ldr	r2, [r7, #4]
 8021670:	6852      	ldr	r2, [r2, #4]
 8021672:	b2d2      	uxtb	r2, r2
 8021674:	4611      	mov	r1, r2
 8021676:	6878      	ldr	r0, [r7, #4]
 8021678:	4798      	blx	r3
  }

  return USBD_OK;
 802167a:	2300      	movs	r3, #0
}
 802167c:	4618      	mov	r0, r3
 802167e:	3708      	adds	r7, #8
 8021680:	46bd      	mov	sp, r7
 8021682:	bd80      	pop	{r7, pc}

08021684 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8021684:	b480      	push	{r7}
 8021686:	b087      	sub	sp, #28
 8021688:	af00      	add	r7, sp, #0
 802168a:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 802168c:	687b      	ldr	r3, [r7, #4]
 802168e:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8021690:	697b      	ldr	r3, [r7, #20]
 8021692:	781b      	ldrb	r3, [r3, #0]
 8021694:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8021696:	697b      	ldr	r3, [r7, #20]
 8021698:	3301      	adds	r3, #1
 802169a:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 802169c:	697b      	ldr	r3, [r7, #20]
 802169e:	781b      	ldrb	r3, [r3, #0]
 80216a0:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 80216a2:	8a3b      	ldrh	r3, [r7, #16]
 80216a4:	021b      	lsls	r3, r3, #8
 80216a6:	b21a      	sxth	r2, r3
 80216a8:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80216ac:	4313      	orrs	r3, r2
 80216ae:	b21b      	sxth	r3, r3
 80216b0:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 80216b2:	89fb      	ldrh	r3, [r7, #14]
}
 80216b4:	4618      	mov	r0, r3
 80216b6:	371c      	adds	r7, #28
 80216b8:	46bd      	mov	sp, r7
 80216ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80216be:	4770      	bx	lr

080216c0 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80216c0:	b580      	push	{r7, lr}
 80216c2:	b084      	sub	sp, #16
 80216c4:	af00      	add	r7, sp, #0
 80216c6:	6078      	str	r0, [r7, #4]
 80216c8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80216ca:	2300      	movs	r3, #0
 80216cc:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80216ce:	683b      	ldr	r3, [r7, #0]
 80216d0:	781b      	ldrb	r3, [r3, #0]
 80216d2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80216d6:	2b40      	cmp	r3, #64	; 0x40
 80216d8:	d005      	beq.n	80216e6 <USBD_StdDevReq+0x26>
 80216da:	2b40      	cmp	r3, #64	; 0x40
 80216dc:	d853      	bhi.n	8021786 <USBD_StdDevReq+0xc6>
 80216de:	2b00      	cmp	r3, #0
 80216e0:	d00b      	beq.n	80216fa <USBD_StdDevReq+0x3a>
 80216e2:	2b20      	cmp	r3, #32
 80216e4:	d14f      	bne.n	8021786 <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80216e6:	687b      	ldr	r3, [r7, #4]
 80216e8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80216ec:	689b      	ldr	r3, [r3, #8]
 80216ee:	6839      	ldr	r1, [r7, #0]
 80216f0:	6878      	ldr	r0, [r7, #4]
 80216f2:	4798      	blx	r3
 80216f4:	4603      	mov	r3, r0
 80216f6:	73fb      	strb	r3, [r7, #15]
      break;
 80216f8:	e04a      	b.n	8021790 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80216fa:	683b      	ldr	r3, [r7, #0]
 80216fc:	785b      	ldrb	r3, [r3, #1]
 80216fe:	2b09      	cmp	r3, #9
 8021700:	d83b      	bhi.n	802177a <USBD_StdDevReq+0xba>
 8021702:	a201      	add	r2, pc, #4	; (adr r2, 8021708 <USBD_StdDevReq+0x48>)
 8021704:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8021708:	0802175d 	.word	0x0802175d
 802170c:	08021771 	.word	0x08021771
 8021710:	0802177b 	.word	0x0802177b
 8021714:	08021767 	.word	0x08021767
 8021718:	0802177b 	.word	0x0802177b
 802171c:	0802173b 	.word	0x0802173b
 8021720:	08021731 	.word	0x08021731
 8021724:	0802177b 	.word	0x0802177b
 8021728:	08021753 	.word	0x08021753
 802172c:	08021745 	.word	0x08021745
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8021730:	6839      	ldr	r1, [r7, #0]
 8021732:	6878      	ldr	r0, [r7, #4]
 8021734:	f000 f9de 	bl	8021af4 <USBD_GetDescriptor>
          break;
 8021738:	e024      	b.n	8021784 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 802173a:	6839      	ldr	r1, [r7, #0]
 802173c:	6878      	ldr	r0, [r7, #4]
 802173e:	f000 fb6d 	bl	8021e1c <USBD_SetAddress>
          break;
 8021742:	e01f      	b.n	8021784 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8021744:	6839      	ldr	r1, [r7, #0]
 8021746:	6878      	ldr	r0, [r7, #4]
 8021748:	f000 fbac 	bl	8021ea4 <USBD_SetConfig>
 802174c:	4603      	mov	r3, r0
 802174e:	73fb      	strb	r3, [r7, #15]
          break;
 8021750:	e018      	b.n	8021784 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8021752:	6839      	ldr	r1, [r7, #0]
 8021754:	6878      	ldr	r0, [r7, #4]
 8021756:	f000 fc4b 	bl	8021ff0 <USBD_GetConfig>
          break;
 802175a:	e013      	b.n	8021784 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 802175c:	6839      	ldr	r1, [r7, #0]
 802175e:	6878      	ldr	r0, [r7, #4]
 8021760:	f000 fc7c 	bl	802205c <USBD_GetStatus>
          break;
 8021764:	e00e      	b.n	8021784 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8021766:	6839      	ldr	r1, [r7, #0]
 8021768:	6878      	ldr	r0, [r7, #4]
 802176a:	f000 fcab 	bl	80220c4 <USBD_SetFeature>
          break;
 802176e:	e009      	b.n	8021784 <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8021770:	6839      	ldr	r1, [r7, #0]
 8021772:	6878      	ldr	r0, [r7, #4]
 8021774:	f000 fcba 	bl	80220ec <USBD_ClrFeature>
          break;
 8021778:	e004      	b.n	8021784 <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 802177a:	6839      	ldr	r1, [r7, #0]
 802177c:	6878      	ldr	r0, [r7, #4]
 802177e:	f000 fd11 	bl	80221a4 <USBD_CtlError>
          break;
 8021782:	bf00      	nop
      }
      break;
 8021784:	e004      	b.n	8021790 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 8021786:	6839      	ldr	r1, [r7, #0]
 8021788:	6878      	ldr	r0, [r7, #4]
 802178a:	f000 fd0b 	bl	80221a4 <USBD_CtlError>
      break;
 802178e:	bf00      	nop
  }

  return ret;
 8021790:	7bfb      	ldrb	r3, [r7, #15]
}
 8021792:	4618      	mov	r0, r3
 8021794:	3710      	adds	r7, #16
 8021796:	46bd      	mov	sp, r7
 8021798:	bd80      	pop	{r7, pc}
 802179a:	bf00      	nop

0802179c <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 802179c:	b580      	push	{r7, lr}
 802179e:	b084      	sub	sp, #16
 80217a0:	af00      	add	r7, sp, #0
 80217a2:	6078      	str	r0, [r7, #4]
 80217a4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80217a6:	2300      	movs	r3, #0
 80217a8:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80217aa:	683b      	ldr	r3, [r7, #0]
 80217ac:	781b      	ldrb	r3, [r3, #0]
 80217ae:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80217b2:	2b40      	cmp	r3, #64	; 0x40
 80217b4:	d005      	beq.n	80217c2 <USBD_StdItfReq+0x26>
 80217b6:	2b40      	cmp	r3, #64	; 0x40
 80217b8:	d82f      	bhi.n	802181a <USBD_StdItfReq+0x7e>
 80217ba:	2b00      	cmp	r3, #0
 80217bc:	d001      	beq.n	80217c2 <USBD_StdItfReq+0x26>
 80217be:	2b20      	cmp	r3, #32
 80217c0:	d12b      	bne.n	802181a <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 80217c2:	687b      	ldr	r3, [r7, #4]
 80217c4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80217c8:	b2db      	uxtb	r3, r3
 80217ca:	3b01      	subs	r3, #1
 80217cc:	2b02      	cmp	r3, #2
 80217ce:	d81d      	bhi.n	802180c <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80217d0:	683b      	ldr	r3, [r7, #0]
 80217d2:	889b      	ldrh	r3, [r3, #4]
 80217d4:	b2db      	uxtb	r3, r3
 80217d6:	2b01      	cmp	r3, #1
 80217d8:	d813      	bhi.n	8021802 <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80217da:	687b      	ldr	r3, [r7, #4]
 80217dc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80217e0:	689b      	ldr	r3, [r3, #8]
 80217e2:	6839      	ldr	r1, [r7, #0]
 80217e4:	6878      	ldr	r0, [r7, #4]
 80217e6:	4798      	blx	r3
 80217e8:	4603      	mov	r3, r0
 80217ea:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 80217ec:	683b      	ldr	r3, [r7, #0]
 80217ee:	88db      	ldrh	r3, [r3, #6]
 80217f0:	2b00      	cmp	r3, #0
 80217f2:	d110      	bne.n	8021816 <USBD_StdItfReq+0x7a>
 80217f4:	7bfb      	ldrb	r3, [r7, #15]
 80217f6:	2b00      	cmp	r3, #0
 80217f8:	d10d      	bne.n	8021816 <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 80217fa:	6878      	ldr	r0, [r7, #4]
 80217fc:	f000 fd80 	bl	8022300 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8021800:	e009      	b.n	8021816 <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 8021802:	6839      	ldr	r1, [r7, #0]
 8021804:	6878      	ldr	r0, [r7, #4]
 8021806:	f000 fccd 	bl	80221a4 <USBD_CtlError>
          break;
 802180a:	e004      	b.n	8021816 <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 802180c:	6839      	ldr	r1, [r7, #0]
 802180e:	6878      	ldr	r0, [r7, #4]
 8021810:	f000 fcc8 	bl	80221a4 <USBD_CtlError>
          break;
 8021814:	e000      	b.n	8021818 <USBD_StdItfReq+0x7c>
          break;
 8021816:	bf00      	nop
      }
      break;
 8021818:	e004      	b.n	8021824 <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 802181a:	6839      	ldr	r1, [r7, #0]
 802181c:	6878      	ldr	r0, [r7, #4]
 802181e:	f000 fcc1 	bl	80221a4 <USBD_CtlError>
      break;
 8021822:	bf00      	nop
  }

  return ret;
 8021824:	7bfb      	ldrb	r3, [r7, #15]
}
 8021826:	4618      	mov	r0, r3
 8021828:	3710      	adds	r7, #16
 802182a:	46bd      	mov	sp, r7
 802182c:	bd80      	pop	{r7, pc}

0802182e <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 802182e:	b580      	push	{r7, lr}
 8021830:	b084      	sub	sp, #16
 8021832:	af00      	add	r7, sp, #0
 8021834:	6078      	str	r0, [r7, #4]
 8021836:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8021838:	2300      	movs	r3, #0
 802183a:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 802183c:	683b      	ldr	r3, [r7, #0]
 802183e:	889b      	ldrh	r3, [r3, #4]
 8021840:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8021842:	683b      	ldr	r3, [r7, #0]
 8021844:	781b      	ldrb	r3, [r3, #0]
 8021846:	f003 0360 	and.w	r3, r3, #96	; 0x60
 802184a:	2b40      	cmp	r3, #64	; 0x40
 802184c:	d007      	beq.n	802185e <USBD_StdEPReq+0x30>
 802184e:	2b40      	cmp	r3, #64	; 0x40
 8021850:	f200 8145 	bhi.w	8021ade <USBD_StdEPReq+0x2b0>
 8021854:	2b00      	cmp	r3, #0
 8021856:	d00c      	beq.n	8021872 <USBD_StdEPReq+0x44>
 8021858:	2b20      	cmp	r3, #32
 802185a:	f040 8140 	bne.w	8021ade <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 802185e:	687b      	ldr	r3, [r7, #4]
 8021860:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8021864:	689b      	ldr	r3, [r3, #8]
 8021866:	6839      	ldr	r1, [r7, #0]
 8021868:	6878      	ldr	r0, [r7, #4]
 802186a:	4798      	blx	r3
 802186c:	4603      	mov	r3, r0
 802186e:	73fb      	strb	r3, [r7, #15]
      break;
 8021870:	e13a      	b.n	8021ae8 <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8021872:	683b      	ldr	r3, [r7, #0]
 8021874:	785b      	ldrb	r3, [r3, #1]
 8021876:	2b03      	cmp	r3, #3
 8021878:	d007      	beq.n	802188a <USBD_StdEPReq+0x5c>
 802187a:	2b03      	cmp	r3, #3
 802187c:	f300 8129 	bgt.w	8021ad2 <USBD_StdEPReq+0x2a4>
 8021880:	2b00      	cmp	r3, #0
 8021882:	d07f      	beq.n	8021984 <USBD_StdEPReq+0x156>
 8021884:	2b01      	cmp	r3, #1
 8021886:	d03c      	beq.n	8021902 <USBD_StdEPReq+0xd4>
 8021888:	e123      	b.n	8021ad2 <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 802188a:	687b      	ldr	r3, [r7, #4]
 802188c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8021890:	b2db      	uxtb	r3, r3
 8021892:	2b02      	cmp	r3, #2
 8021894:	d002      	beq.n	802189c <USBD_StdEPReq+0x6e>
 8021896:	2b03      	cmp	r3, #3
 8021898:	d016      	beq.n	80218c8 <USBD_StdEPReq+0x9a>
 802189a:	e02c      	b.n	80218f6 <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 802189c:	7bbb      	ldrb	r3, [r7, #14]
 802189e:	2b00      	cmp	r3, #0
 80218a0:	d00d      	beq.n	80218be <USBD_StdEPReq+0x90>
 80218a2:	7bbb      	ldrb	r3, [r7, #14]
 80218a4:	2b80      	cmp	r3, #128	; 0x80
 80218a6:	d00a      	beq.n	80218be <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80218a8:	7bbb      	ldrb	r3, [r7, #14]
 80218aa:	4619      	mov	r1, r3
 80218ac:	6878      	ldr	r0, [r7, #4]
 80218ae:	f001 f940 	bl	8022b32 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80218b2:	2180      	movs	r1, #128	; 0x80
 80218b4:	6878      	ldr	r0, [r7, #4]
 80218b6:	f001 f93c 	bl	8022b32 <USBD_LL_StallEP>
 80218ba:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80218bc:	e020      	b.n	8021900 <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 80218be:	6839      	ldr	r1, [r7, #0]
 80218c0:	6878      	ldr	r0, [r7, #4]
 80218c2:	f000 fc6f 	bl	80221a4 <USBD_CtlError>
              break;
 80218c6:	e01b      	b.n	8021900 <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80218c8:	683b      	ldr	r3, [r7, #0]
 80218ca:	885b      	ldrh	r3, [r3, #2]
 80218cc:	2b00      	cmp	r3, #0
 80218ce:	d10e      	bne.n	80218ee <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80218d0:	7bbb      	ldrb	r3, [r7, #14]
 80218d2:	2b00      	cmp	r3, #0
 80218d4:	d00b      	beq.n	80218ee <USBD_StdEPReq+0xc0>
 80218d6:	7bbb      	ldrb	r3, [r7, #14]
 80218d8:	2b80      	cmp	r3, #128	; 0x80
 80218da:	d008      	beq.n	80218ee <USBD_StdEPReq+0xc0>
 80218dc:	683b      	ldr	r3, [r7, #0]
 80218de:	88db      	ldrh	r3, [r3, #6]
 80218e0:	2b00      	cmp	r3, #0
 80218e2:	d104      	bne.n	80218ee <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 80218e4:	7bbb      	ldrb	r3, [r7, #14]
 80218e6:	4619      	mov	r1, r3
 80218e8:	6878      	ldr	r0, [r7, #4]
 80218ea:	f001 f922 	bl	8022b32 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 80218ee:	6878      	ldr	r0, [r7, #4]
 80218f0:	f000 fd06 	bl	8022300 <USBD_CtlSendStatus>

              break;
 80218f4:	e004      	b.n	8021900 <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 80218f6:	6839      	ldr	r1, [r7, #0]
 80218f8:	6878      	ldr	r0, [r7, #4]
 80218fa:	f000 fc53 	bl	80221a4 <USBD_CtlError>
              break;
 80218fe:	bf00      	nop
          }
          break;
 8021900:	e0ec      	b.n	8021adc <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8021902:	687b      	ldr	r3, [r7, #4]
 8021904:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8021908:	b2db      	uxtb	r3, r3
 802190a:	2b02      	cmp	r3, #2
 802190c:	d002      	beq.n	8021914 <USBD_StdEPReq+0xe6>
 802190e:	2b03      	cmp	r3, #3
 8021910:	d016      	beq.n	8021940 <USBD_StdEPReq+0x112>
 8021912:	e030      	b.n	8021976 <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8021914:	7bbb      	ldrb	r3, [r7, #14]
 8021916:	2b00      	cmp	r3, #0
 8021918:	d00d      	beq.n	8021936 <USBD_StdEPReq+0x108>
 802191a:	7bbb      	ldrb	r3, [r7, #14]
 802191c:	2b80      	cmp	r3, #128	; 0x80
 802191e:	d00a      	beq.n	8021936 <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8021920:	7bbb      	ldrb	r3, [r7, #14]
 8021922:	4619      	mov	r1, r3
 8021924:	6878      	ldr	r0, [r7, #4]
 8021926:	f001 f904 	bl	8022b32 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 802192a:	2180      	movs	r1, #128	; 0x80
 802192c:	6878      	ldr	r0, [r7, #4]
 802192e:	f001 f900 	bl	8022b32 <USBD_LL_StallEP>
 8021932:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8021934:	e025      	b.n	8021982 <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 8021936:	6839      	ldr	r1, [r7, #0]
 8021938:	6878      	ldr	r0, [r7, #4]
 802193a:	f000 fc33 	bl	80221a4 <USBD_CtlError>
              break;
 802193e:	e020      	b.n	8021982 <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8021940:	683b      	ldr	r3, [r7, #0]
 8021942:	885b      	ldrh	r3, [r3, #2]
 8021944:	2b00      	cmp	r3, #0
 8021946:	d11b      	bne.n	8021980 <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8021948:	7bbb      	ldrb	r3, [r7, #14]
 802194a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 802194e:	2b00      	cmp	r3, #0
 8021950:	d004      	beq.n	802195c <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8021952:	7bbb      	ldrb	r3, [r7, #14]
 8021954:	4619      	mov	r1, r3
 8021956:	6878      	ldr	r0, [r7, #4]
 8021958:	f001 f90a 	bl	8022b70 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 802195c:	6878      	ldr	r0, [r7, #4]
 802195e:	f000 fccf 	bl	8022300 <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8021962:	687b      	ldr	r3, [r7, #4]
 8021964:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8021968:	689b      	ldr	r3, [r3, #8]
 802196a:	6839      	ldr	r1, [r7, #0]
 802196c:	6878      	ldr	r0, [r7, #4]
 802196e:	4798      	blx	r3
 8021970:	4603      	mov	r3, r0
 8021972:	73fb      	strb	r3, [r7, #15]
              }
              break;
 8021974:	e004      	b.n	8021980 <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 8021976:	6839      	ldr	r1, [r7, #0]
 8021978:	6878      	ldr	r0, [r7, #4]
 802197a:	f000 fc13 	bl	80221a4 <USBD_CtlError>
              break;
 802197e:	e000      	b.n	8021982 <USBD_StdEPReq+0x154>
              break;
 8021980:	bf00      	nop
          }
          break;
 8021982:	e0ab      	b.n	8021adc <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8021984:	687b      	ldr	r3, [r7, #4]
 8021986:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 802198a:	b2db      	uxtb	r3, r3
 802198c:	2b02      	cmp	r3, #2
 802198e:	d002      	beq.n	8021996 <USBD_StdEPReq+0x168>
 8021990:	2b03      	cmp	r3, #3
 8021992:	d032      	beq.n	80219fa <USBD_StdEPReq+0x1cc>
 8021994:	e097      	b.n	8021ac6 <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8021996:	7bbb      	ldrb	r3, [r7, #14]
 8021998:	2b00      	cmp	r3, #0
 802199a:	d007      	beq.n	80219ac <USBD_StdEPReq+0x17e>
 802199c:	7bbb      	ldrb	r3, [r7, #14]
 802199e:	2b80      	cmp	r3, #128	; 0x80
 80219a0:	d004      	beq.n	80219ac <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 80219a2:	6839      	ldr	r1, [r7, #0]
 80219a4:	6878      	ldr	r0, [r7, #4]
 80219a6:	f000 fbfd 	bl	80221a4 <USBD_CtlError>
                break;
 80219aa:	e091      	b.n	8021ad0 <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80219ac:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80219b0:	2b00      	cmp	r3, #0
 80219b2:	da0b      	bge.n	80219cc <USBD_StdEPReq+0x19e>
 80219b4:	7bbb      	ldrb	r3, [r7, #14]
 80219b6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80219ba:	4613      	mov	r3, r2
 80219bc:	009b      	lsls	r3, r3, #2
 80219be:	4413      	add	r3, r2
 80219c0:	009b      	lsls	r3, r3, #2
 80219c2:	3310      	adds	r3, #16
 80219c4:	687a      	ldr	r2, [r7, #4]
 80219c6:	4413      	add	r3, r2
 80219c8:	3304      	adds	r3, #4
 80219ca:	e00b      	b.n	80219e4 <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80219cc:	7bbb      	ldrb	r3, [r7, #14]
 80219ce:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80219d2:	4613      	mov	r3, r2
 80219d4:	009b      	lsls	r3, r3, #2
 80219d6:	4413      	add	r3, r2
 80219d8:	009b      	lsls	r3, r3, #2
 80219da:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80219de:	687a      	ldr	r2, [r7, #4]
 80219e0:	4413      	add	r3, r2
 80219e2:	3304      	adds	r3, #4
 80219e4:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 80219e6:	68bb      	ldr	r3, [r7, #8]
 80219e8:	2200      	movs	r2, #0
 80219ea:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80219ec:	68bb      	ldr	r3, [r7, #8]
 80219ee:	2202      	movs	r2, #2
 80219f0:	4619      	mov	r1, r3
 80219f2:	6878      	ldr	r0, [r7, #4]
 80219f4:	f000 fc47 	bl	8022286 <USBD_CtlSendData>
              break;
 80219f8:	e06a      	b.n	8021ad0 <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 80219fa:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80219fe:	2b00      	cmp	r3, #0
 8021a00:	da11      	bge.n	8021a26 <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8021a02:	7bbb      	ldrb	r3, [r7, #14]
 8021a04:	f003 020f 	and.w	r2, r3, #15
 8021a08:	6879      	ldr	r1, [r7, #4]
 8021a0a:	4613      	mov	r3, r2
 8021a0c:	009b      	lsls	r3, r3, #2
 8021a0e:	4413      	add	r3, r2
 8021a10:	009b      	lsls	r3, r3, #2
 8021a12:	440b      	add	r3, r1
 8021a14:	3324      	adds	r3, #36	; 0x24
 8021a16:	881b      	ldrh	r3, [r3, #0]
 8021a18:	2b00      	cmp	r3, #0
 8021a1a:	d117      	bne.n	8021a4c <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8021a1c:	6839      	ldr	r1, [r7, #0]
 8021a1e:	6878      	ldr	r0, [r7, #4]
 8021a20:	f000 fbc0 	bl	80221a4 <USBD_CtlError>
                  break;
 8021a24:	e054      	b.n	8021ad0 <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8021a26:	7bbb      	ldrb	r3, [r7, #14]
 8021a28:	f003 020f 	and.w	r2, r3, #15
 8021a2c:	6879      	ldr	r1, [r7, #4]
 8021a2e:	4613      	mov	r3, r2
 8021a30:	009b      	lsls	r3, r3, #2
 8021a32:	4413      	add	r3, r2
 8021a34:	009b      	lsls	r3, r3, #2
 8021a36:	440b      	add	r3, r1
 8021a38:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8021a3c:	881b      	ldrh	r3, [r3, #0]
 8021a3e:	2b00      	cmp	r3, #0
 8021a40:	d104      	bne.n	8021a4c <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8021a42:	6839      	ldr	r1, [r7, #0]
 8021a44:	6878      	ldr	r0, [r7, #4]
 8021a46:	f000 fbad 	bl	80221a4 <USBD_CtlError>
                  break;
 8021a4a:	e041      	b.n	8021ad0 <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8021a4c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8021a50:	2b00      	cmp	r3, #0
 8021a52:	da0b      	bge.n	8021a6c <USBD_StdEPReq+0x23e>
 8021a54:	7bbb      	ldrb	r3, [r7, #14]
 8021a56:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8021a5a:	4613      	mov	r3, r2
 8021a5c:	009b      	lsls	r3, r3, #2
 8021a5e:	4413      	add	r3, r2
 8021a60:	009b      	lsls	r3, r3, #2
 8021a62:	3310      	adds	r3, #16
 8021a64:	687a      	ldr	r2, [r7, #4]
 8021a66:	4413      	add	r3, r2
 8021a68:	3304      	adds	r3, #4
 8021a6a:	e00b      	b.n	8021a84 <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8021a6c:	7bbb      	ldrb	r3, [r7, #14]
 8021a6e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8021a72:	4613      	mov	r3, r2
 8021a74:	009b      	lsls	r3, r3, #2
 8021a76:	4413      	add	r3, r2
 8021a78:	009b      	lsls	r3, r3, #2
 8021a7a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8021a7e:	687a      	ldr	r2, [r7, #4]
 8021a80:	4413      	add	r3, r2
 8021a82:	3304      	adds	r3, #4
 8021a84:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8021a86:	7bbb      	ldrb	r3, [r7, #14]
 8021a88:	2b00      	cmp	r3, #0
 8021a8a:	d002      	beq.n	8021a92 <USBD_StdEPReq+0x264>
 8021a8c:	7bbb      	ldrb	r3, [r7, #14]
 8021a8e:	2b80      	cmp	r3, #128	; 0x80
 8021a90:	d103      	bne.n	8021a9a <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 8021a92:	68bb      	ldr	r3, [r7, #8]
 8021a94:	2200      	movs	r2, #0
 8021a96:	601a      	str	r2, [r3, #0]
 8021a98:	e00e      	b.n	8021ab8 <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8021a9a:	7bbb      	ldrb	r3, [r7, #14]
 8021a9c:	4619      	mov	r1, r3
 8021a9e:	6878      	ldr	r0, [r7, #4]
 8021aa0:	f001 f885 	bl	8022bae <USBD_LL_IsStallEP>
 8021aa4:	4603      	mov	r3, r0
 8021aa6:	2b00      	cmp	r3, #0
 8021aa8:	d003      	beq.n	8021ab2 <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 8021aaa:	68bb      	ldr	r3, [r7, #8]
 8021aac:	2201      	movs	r2, #1
 8021aae:	601a      	str	r2, [r3, #0]
 8021ab0:	e002      	b.n	8021ab8 <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 8021ab2:	68bb      	ldr	r3, [r7, #8]
 8021ab4:	2200      	movs	r2, #0
 8021ab6:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8021ab8:	68bb      	ldr	r3, [r7, #8]
 8021aba:	2202      	movs	r2, #2
 8021abc:	4619      	mov	r1, r3
 8021abe:	6878      	ldr	r0, [r7, #4]
 8021ac0:	f000 fbe1 	bl	8022286 <USBD_CtlSendData>
              break;
 8021ac4:	e004      	b.n	8021ad0 <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 8021ac6:	6839      	ldr	r1, [r7, #0]
 8021ac8:	6878      	ldr	r0, [r7, #4]
 8021aca:	f000 fb6b 	bl	80221a4 <USBD_CtlError>
              break;
 8021ace:	bf00      	nop
          }
          break;
 8021ad0:	e004      	b.n	8021adc <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 8021ad2:	6839      	ldr	r1, [r7, #0]
 8021ad4:	6878      	ldr	r0, [r7, #4]
 8021ad6:	f000 fb65 	bl	80221a4 <USBD_CtlError>
          break;
 8021ada:	bf00      	nop
      }
      break;
 8021adc:	e004      	b.n	8021ae8 <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 8021ade:	6839      	ldr	r1, [r7, #0]
 8021ae0:	6878      	ldr	r0, [r7, #4]
 8021ae2:	f000 fb5f 	bl	80221a4 <USBD_CtlError>
      break;
 8021ae6:	bf00      	nop
  }

  return ret;
 8021ae8:	7bfb      	ldrb	r3, [r7, #15]
}
 8021aea:	4618      	mov	r0, r3
 8021aec:	3710      	adds	r7, #16
 8021aee:	46bd      	mov	sp, r7
 8021af0:	bd80      	pop	{r7, pc}
	...

08021af4 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8021af4:	b580      	push	{r7, lr}
 8021af6:	b084      	sub	sp, #16
 8021af8:	af00      	add	r7, sp, #0
 8021afa:	6078      	str	r0, [r7, #4]
 8021afc:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8021afe:	2300      	movs	r3, #0
 8021b00:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8021b02:	2300      	movs	r3, #0
 8021b04:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8021b06:	2300      	movs	r3, #0
 8021b08:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8021b0a:	683b      	ldr	r3, [r7, #0]
 8021b0c:	885b      	ldrh	r3, [r3, #2]
 8021b0e:	0a1b      	lsrs	r3, r3, #8
 8021b10:	b29b      	uxth	r3, r3
 8021b12:	3b01      	subs	r3, #1
 8021b14:	2b0e      	cmp	r3, #14
 8021b16:	f200 8152 	bhi.w	8021dbe <USBD_GetDescriptor+0x2ca>
 8021b1a:	a201      	add	r2, pc, #4	; (adr r2, 8021b20 <USBD_GetDescriptor+0x2c>)
 8021b1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8021b20:	08021b91 	.word	0x08021b91
 8021b24:	08021ba9 	.word	0x08021ba9
 8021b28:	08021be9 	.word	0x08021be9
 8021b2c:	08021dbf 	.word	0x08021dbf
 8021b30:	08021dbf 	.word	0x08021dbf
 8021b34:	08021d5f 	.word	0x08021d5f
 8021b38:	08021d8b 	.word	0x08021d8b
 8021b3c:	08021dbf 	.word	0x08021dbf
 8021b40:	08021dbf 	.word	0x08021dbf
 8021b44:	08021dbf 	.word	0x08021dbf
 8021b48:	08021dbf 	.word	0x08021dbf
 8021b4c:	08021dbf 	.word	0x08021dbf
 8021b50:	08021dbf 	.word	0x08021dbf
 8021b54:	08021dbf 	.word	0x08021dbf
 8021b58:	08021b5d 	.word	0x08021b5d
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 8021b5c:	687b      	ldr	r3, [r7, #4]
 8021b5e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8021b62:	69db      	ldr	r3, [r3, #28]
 8021b64:	2b00      	cmp	r3, #0
 8021b66:	d00b      	beq.n	8021b80 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 8021b68:	687b      	ldr	r3, [r7, #4]
 8021b6a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8021b6e:	69db      	ldr	r3, [r3, #28]
 8021b70:	687a      	ldr	r2, [r7, #4]
 8021b72:	7c12      	ldrb	r2, [r2, #16]
 8021b74:	f107 0108 	add.w	r1, r7, #8
 8021b78:	4610      	mov	r0, r2
 8021b7a:	4798      	blx	r3
 8021b7c:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8021b7e:	e126      	b.n	8021dce <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8021b80:	6839      	ldr	r1, [r7, #0]
 8021b82:	6878      	ldr	r0, [r7, #4]
 8021b84:	f000 fb0e 	bl	80221a4 <USBD_CtlError>
        err++;
 8021b88:	7afb      	ldrb	r3, [r7, #11]
 8021b8a:	3301      	adds	r3, #1
 8021b8c:	72fb      	strb	r3, [r7, #11]
      break;
 8021b8e:	e11e      	b.n	8021dce <USBD_GetDescriptor+0x2da>
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8021b90:	687b      	ldr	r3, [r7, #4]
 8021b92:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8021b96:	681b      	ldr	r3, [r3, #0]
 8021b98:	687a      	ldr	r2, [r7, #4]
 8021b9a:	7c12      	ldrb	r2, [r2, #16]
 8021b9c:	f107 0108 	add.w	r1, r7, #8
 8021ba0:	4610      	mov	r0, r2
 8021ba2:	4798      	blx	r3
 8021ba4:	60f8      	str	r0, [r7, #12]
      break;
 8021ba6:	e112      	b.n	8021dce <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8021ba8:	687b      	ldr	r3, [r7, #4]
 8021baa:	7c1b      	ldrb	r3, [r3, #16]
 8021bac:	2b00      	cmp	r3, #0
 8021bae:	d10d      	bne.n	8021bcc <USBD_GetDescriptor+0xd8>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8021bb0:	687b      	ldr	r3, [r7, #4]
 8021bb2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8021bb6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8021bb8:	f107 0208 	add.w	r2, r7, #8
 8021bbc:	4610      	mov	r0, r2
 8021bbe:	4798      	blx	r3
 8021bc0:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8021bc2:	68fb      	ldr	r3, [r7, #12]
 8021bc4:	3301      	adds	r3, #1
 8021bc6:	2202      	movs	r2, #2
 8021bc8:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8021bca:	e100      	b.n	8021dce <USBD_GetDescriptor+0x2da>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8021bcc:	687b      	ldr	r3, [r7, #4]
 8021bce:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8021bd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8021bd4:	f107 0208 	add.w	r2, r7, #8
 8021bd8:	4610      	mov	r0, r2
 8021bda:	4798      	blx	r3
 8021bdc:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8021bde:	68fb      	ldr	r3, [r7, #12]
 8021be0:	3301      	adds	r3, #1
 8021be2:	2202      	movs	r2, #2
 8021be4:	701a      	strb	r2, [r3, #0]
      break;
 8021be6:	e0f2      	b.n	8021dce <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8021be8:	683b      	ldr	r3, [r7, #0]
 8021bea:	885b      	ldrh	r3, [r3, #2]
 8021bec:	b2db      	uxtb	r3, r3
 8021bee:	2b05      	cmp	r3, #5
 8021bf0:	f200 80ac 	bhi.w	8021d4c <USBD_GetDescriptor+0x258>
 8021bf4:	a201      	add	r2, pc, #4	; (adr r2, 8021bfc <USBD_GetDescriptor+0x108>)
 8021bf6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8021bfa:	bf00      	nop
 8021bfc:	08021c15 	.word	0x08021c15
 8021c00:	08021c49 	.word	0x08021c49
 8021c04:	08021c7d 	.word	0x08021c7d
 8021c08:	08021cb1 	.word	0x08021cb1
 8021c0c:	08021ce5 	.word	0x08021ce5
 8021c10:	08021d19 	.word	0x08021d19
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8021c14:	687b      	ldr	r3, [r7, #4]
 8021c16:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8021c1a:	685b      	ldr	r3, [r3, #4]
 8021c1c:	2b00      	cmp	r3, #0
 8021c1e:	d00b      	beq.n	8021c38 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8021c20:	687b      	ldr	r3, [r7, #4]
 8021c22:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8021c26:	685b      	ldr	r3, [r3, #4]
 8021c28:	687a      	ldr	r2, [r7, #4]
 8021c2a:	7c12      	ldrb	r2, [r2, #16]
 8021c2c:	f107 0108 	add.w	r1, r7, #8
 8021c30:	4610      	mov	r0, r2
 8021c32:	4798      	blx	r3
 8021c34:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8021c36:	e091      	b.n	8021d5c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8021c38:	6839      	ldr	r1, [r7, #0]
 8021c3a:	6878      	ldr	r0, [r7, #4]
 8021c3c:	f000 fab2 	bl	80221a4 <USBD_CtlError>
            err++;
 8021c40:	7afb      	ldrb	r3, [r7, #11]
 8021c42:	3301      	adds	r3, #1
 8021c44:	72fb      	strb	r3, [r7, #11]
          break;
 8021c46:	e089      	b.n	8021d5c <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8021c48:	687b      	ldr	r3, [r7, #4]
 8021c4a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8021c4e:	689b      	ldr	r3, [r3, #8]
 8021c50:	2b00      	cmp	r3, #0
 8021c52:	d00b      	beq.n	8021c6c <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8021c54:	687b      	ldr	r3, [r7, #4]
 8021c56:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8021c5a:	689b      	ldr	r3, [r3, #8]
 8021c5c:	687a      	ldr	r2, [r7, #4]
 8021c5e:	7c12      	ldrb	r2, [r2, #16]
 8021c60:	f107 0108 	add.w	r1, r7, #8
 8021c64:	4610      	mov	r0, r2
 8021c66:	4798      	blx	r3
 8021c68:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8021c6a:	e077      	b.n	8021d5c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8021c6c:	6839      	ldr	r1, [r7, #0]
 8021c6e:	6878      	ldr	r0, [r7, #4]
 8021c70:	f000 fa98 	bl	80221a4 <USBD_CtlError>
            err++;
 8021c74:	7afb      	ldrb	r3, [r7, #11]
 8021c76:	3301      	adds	r3, #1
 8021c78:	72fb      	strb	r3, [r7, #11]
          break;
 8021c7a:	e06f      	b.n	8021d5c <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8021c7c:	687b      	ldr	r3, [r7, #4]
 8021c7e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8021c82:	68db      	ldr	r3, [r3, #12]
 8021c84:	2b00      	cmp	r3, #0
 8021c86:	d00b      	beq.n	8021ca0 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8021c88:	687b      	ldr	r3, [r7, #4]
 8021c8a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8021c8e:	68db      	ldr	r3, [r3, #12]
 8021c90:	687a      	ldr	r2, [r7, #4]
 8021c92:	7c12      	ldrb	r2, [r2, #16]
 8021c94:	f107 0108 	add.w	r1, r7, #8
 8021c98:	4610      	mov	r0, r2
 8021c9a:	4798      	blx	r3
 8021c9c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8021c9e:	e05d      	b.n	8021d5c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8021ca0:	6839      	ldr	r1, [r7, #0]
 8021ca2:	6878      	ldr	r0, [r7, #4]
 8021ca4:	f000 fa7e 	bl	80221a4 <USBD_CtlError>
            err++;
 8021ca8:	7afb      	ldrb	r3, [r7, #11]
 8021caa:	3301      	adds	r3, #1
 8021cac:	72fb      	strb	r3, [r7, #11]
          break;
 8021cae:	e055      	b.n	8021d5c <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8021cb0:	687b      	ldr	r3, [r7, #4]
 8021cb2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8021cb6:	691b      	ldr	r3, [r3, #16]
 8021cb8:	2b00      	cmp	r3, #0
 8021cba:	d00b      	beq.n	8021cd4 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8021cbc:	687b      	ldr	r3, [r7, #4]
 8021cbe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8021cc2:	691b      	ldr	r3, [r3, #16]
 8021cc4:	687a      	ldr	r2, [r7, #4]
 8021cc6:	7c12      	ldrb	r2, [r2, #16]
 8021cc8:	f107 0108 	add.w	r1, r7, #8
 8021ccc:	4610      	mov	r0, r2
 8021cce:	4798      	blx	r3
 8021cd0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8021cd2:	e043      	b.n	8021d5c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8021cd4:	6839      	ldr	r1, [r7, #0]
 8021cd6:	6878      	ldr	r0, [r7, #4]
 8021cd8:	f000 fa64 	bl	80221a4 <USBD_CtlError>
            err++;
 8021cdc:	7afb      	ldrb	r3, [r7, #11]
 8021cde:	3301      	adds	r3, #1
 8021ce0:	72fb      	strb	r3, [r7, #11]
          break;
 8021ce2:	e03b      	b.n	8021d5c <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8021ce4:	687b      	ldr	r3, [r7, #4]
 8021ce6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8021cea:	695b      	ldr	r3, [r3, #20]
 8021cec:	2b00      	cmp	r3, #0
 8021cee:	d00b      	beq.n	8021d08 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8021cf0:	687b      	ldr	r3, [r7, #4]
 8021cf2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8021cf6:	695b      	ldr	r3, [r3, #20]
 8021cf8:	687a      	ldr	r2, [r7, #4]
 8021cfa:	7c12      	ldrb	r2, [r2, #16]
 8021cfc:	f107 0108 	add.w	r1, r7, #8
 8021d00:	4610      	mov	r0, r2
 8021d02:	4798      	blx	r3
 8021d04:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8021d06:	e029      	b.n	8021d5c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8021d08:	6839      	ldr	r1, [r7, #0]
 8021d0a:	6878      	ldr	r0, [r7, #4]
 8021d0c:	f000 fa4a 	bl	80221a4 <USBD_CtlError>
            err++;
 8021d10:	7afb      	ldrb	r3, [r7, #11]
 8021d12:	3301      	adds	r3, #1
 8021d14:	72fb      	strb	r3, [r7, #11]
          break;
 8021d16:	e021      	b.n	8021d5c <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8021d18:	687b      	ldr	r3, [r7, #4]
 8021d1a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8021d1e:	699b      	ldr	r3, [r3, #24]
 8021d20:	2b00      	cmp	r3, #0
 8021d22:	d00b      	beq.n	8021d3c <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8021d24:	687b      	ldr	r3, [r7, #4]
 8021d26:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8021d2a:	699b      	ldr	r3, [r3, #24]
 8021d2c:	687a      	ldr	r2, [r7, #4]
 8021d2e:	7c12      	ldrb	r2, [r2, #16]
 8021d30:	f107 0108 	add.w	r1, r7, #8
 8021d34:	4610      	mov	r0, r2
 8021d36:	4798      	blx	r3
 8021d38:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8021d3a:	e00f      	b.n	8021d5c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8021d3c:	6839      	ldr	r1, [r7, #0]
 8021d3e:	6878      	ldr	r0, [r7, #4]
 8021d40:	f000 fa30 	bl	80221a4 <USBD_CtlError>
            err++;
 8021d44:	7afb      	ldrb	r3, [r7, #11]
 8021d46:	3301      	adds	r3, #1
 8021d48:	72fb      	strb	r3, [r7, #11]
          break;
 8021d4a:	e007      	b.n	8021d5c <USBD_GetDescriptor+0x268>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8021d4c:	6839      	ldr	r1, [r7, #0]
 8021d4e:	6878      	ldr	r0, [r7, #4]
 8021d50:	f000 fa28 	bl	80221a4 <USBD_CtlError>
          err++;
 8021d54:	7afb      	ldrb	r3, [r7, #11]
 8021d56:	3301      	adds	r3, #1
 8021d58:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 8021d5a:	bf00      	nop
      }
      break;
 8021d5c:	e037      	b.n	8021dce <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8021d5e:	687b      	ldr	r3, [r7, #4]
 8021d60:	7c1b      	ldrb	r3, [r3, #16]
 8021d62:	2b00      	cmp	r3, #0
 8021d64:	d109      	bne.n	8021d7a <USBD_GetDescriptor+0x286>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8021d66:	687b      	ldr	r3, [r7, #4]
 8021d68:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8021d6c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8021d6e:	f107 0208 	add.w	r2, r7, #8
 8021d72:	4610      	mov	r0, r2
 8021d74:	4798      	blx	r3
 8021d76:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8021d78:	e029      	b.n	8021dce <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8021d7a:	6839      	ldr	r1, [r7, #0]
 8021d7c:	6878      	ldr	r0, [r7, #4]
 8021d7e:	f000 fa11 	bl	80221a4 <USBD_CtlError>
        err++;
 8021d82:	7afb      	ldrb	r3, [r7, #11]
 8021d84:	3301      	adds	r3, #1
 8021d86:	72fb      	strb	r3, [r7, #11]
      break;
 8021d88:	e021      	b.n	8021dce <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8021d8a:	687b      	ldr	r3, [r7, #4]
 8021d8c:	7c1b      	ldrb	r3, [r3, #16]
 8021d8e:	2b00      	cmp	r3, #0
 8021d90:	d10d      	bne.n	8021dae <USBD_GetDescriptor+0x2ba>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8021d92:	687b      	ldr	r3, [r7, #4]
 8021d94:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8021d98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8021d9a:	f107 0208 	add.w	r2, r7, #8
 8021d9e:	4610      	mov	r0, r2
 8021da0:	4798      	blx	r3
 8021da2:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8021da4:	68fb      	ldr	r3, [r7, #12]
 8021da6:	3301      	adds	r3, #1
 8021da8:	2207      	movs	r2, #7
 8021daa:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8021dac:	e00f      	b.n	8021dce <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8021dae:	6839      	ldr	r1, [r7, #0]
 8021db0:	6878      	ldr	r0, [r7, #4]
 8021db2:	f000 f9f7 	bl	80221a4 <USBD_CtlError>
        err++;
 8021db6:	7afb      	ldrb	r3, [r7, #11]
 8021db8:	3301      	adds	r3, #1
 8021dba:	72fb      	strb	r3, [r7, #11]
      break;
 8021dbc:	e007      	b.n	8021dce <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 8021dbe:	6839      	ldr	r1, [r7, #0]
 8021dc0:	6878      	ldr	r0, [r7, #4]
 8021dc2:	f000 f9ef 	bl	80221a4 <USBD_CtlError>
      err++;
 8021dc6:	7afb      	ldrb	r3, [r7, #11]
 8021dc8:	3301      	adds	r3, #1
 8021dca:	72fb      	strb	r3, [r7, #11]
      break;
 8021dcc:	bf00      	nop
  }

  if (err != 0U)
 8021dce:	7afb      	ldrb	r3, [r7, #11]
 8021dd0:	2b00      	cmp	r3, #0
 8021dd2:	d11e      	bne.n	8021e12 <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 8021dd4:	683b      	ldr	r3, [r7, #0]
 8021dd6:	88db      	ldrh	r3, [r3, #6]
 8021dd8:	2b00      	cmp	r3, #0
 8021dda:	d016      	beq.n	8021e0a <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 8021ddc:	893b      	ldrh	r3, [r7, #8]
 8021dde:	2b00      	cmp	r3, #0
 8021de0:	d00e      	beq.n	8021e00 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 8021de2:	683b      	ldr	r3, [r7, #0]
 8021de4:	88da      	ldrh	r2, [r3, #6]
 8021de6:	893b      	ldrh	r3, [r7, #8]
 8021de8:	4293      	cmp	r3, r2
 8021dea:	bf28      	it	cs
 8021dec:	4613      	movcs	r3, r2
 8021dee:	b29b      	uxth	r3, r3
 8021df0:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8021df2:	893b      	ldrh	r3, [r7, #8]
 8021df4:	461a      	mov	r2, r3
 8021df6:	68f9      	ldr	r1, [r7, #12]
 8021df8:	6878      	ldr	r0, [r7, #4]
 8021dfa:	f000 fa44 	bl	8022286 <USBD_CtlSendData>
 8021dfe:	e009      	b.n	8021e14 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8021e00:	6839      	ldr	r1, [r7, #0]
 8021e02:	6878      	ldr	r0, [r7, #4]
 8021e04:	f000 f9ce 	bl	80221a4 <USBD_CtlError>
 8021e08:	e004      	b.n	8021e14 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8021e0a:	6878      	ldr	r0, [r7, #4]
 8021e0c:	f000 fa78 	bl	8022300 <USBD_CtlSendStatus>
 8021e10:	e000      	b.n	8021e14 <USBD_GetDescriptor+0x320>
    return;
 8021e12:	bf00      	nop
  }
}
 8021e14:	3710      	adds	r7, #16
 8021e16:	46bd      	mov	sp, r7
 8021e18:	bd80      	pop	{r7, pc}
 8021e1a:	bf00      	nop

08021e1c <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8021e1c:	b580      	push	{r7, lr}
 8021e1e:	b084      	sub	sp, #16
 8021e20:	af00      	add	r7, sp, #0
 8021e22:	6078      	str	r0, [r7, #4]
 8021e24:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8021e26:	683b      	ldr	r3, [r7, #0]
 8021e28:	889b      	ldrh	r3, [r3, #4]
 8021e2a:	2b00      	cmp	r3, #0
 8021e2c:	d131      	bne.n	8021e92 <USBD_SetAddress+0x76>
 8021e2e:	683b      	ldr	r3, [r7, #0]
 8021e30:	88db      	ldrh	r3, [r3, #6]
 8021e32:	2b00      	cmp	r3, #0
 8021e34:	d12d      	bne.n	8021e92 <USBD_SetAddress+0x76>
 8021e36:	683b      	ldr	r3, [r7, #0]
 8021e38:	885b      	ldrh	r3, [r3, #2]
 8021e3a:	2b7f      	cmp	r3, #127	; 0x7f
 8021e3c:	d829      	bhi.n	8021e92 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8021e3e:	683b      	ldr	r3, [r7, #0]
 8021e40:	885b      	ldrh	r3, [r3, #2]
 8021e42:	b2db      	uxtb	r3, r3
 8021e44:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8021e48:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8021e4a:	687b      	ldr	r3, [r7, #4]
 8021e4c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8021e50:	b2db      	uxtb	r3, r3
 8021e52:	2b03      	cmp	r3, #3
 8021e54:	d104      	bne.n	8021e60 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8021e56:	6839      	ldr	r1, [r7, #0]
 8021e58:	6878      	ldr	r0, [r7, #4]
 8021e5a:	f000 f9a3 	bl	80221a4 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8021e5e:	e01d      	b.n	8021e9c <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8021e60:	687b      	ldr	r3, [r7, #4]
 8021e62:	7bfa      	ldrb	r2, [r7, #15]
 8021e64:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8021e68:	7bfb      	ldrb	r3, [r7, #15]
 8021e6a:	4619      	mov	r1, r3
 8021e6c:	6878      	ldr	r0, [r7, #4]
 8021e6e:	f000 feca 	bl	8022c06 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8021e72:	6878      	ldr	r0, [r7, #4]
 8021e74:	f000 fa44 	bl	8022300 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8021e78:	7bfb      	ldrb	r3, [r7, #15]
 8021e7a:	2b00      	cmp	r3, #0
 8021e7c:	d004      	beq.n	8021e88 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8021e7e:	687b      	ldr	r3, [r7, #4]
 8021e80:	2202      	movs	r2, #2
 8021e82:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8021e86:	e009      	b.n	8021e9c <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8021e88:	687b      	ldr	r3, [r7, #4]
 8021e8a:	2201      	movs	r2, #1
 8021e8c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8021e90:	e004      	b.n	8021e9c <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8021e92:	6839      	ldr	r1, [r7, #0]
 8021e94:	6878      	ldr	r0, [r7, #4]
 8021e96:	f000 f985 	bl	80221a4 <USBD_CtlError>
  }
}
 8021e9a:	bf00      	nop
 8021e9c:	bf00      	nop
 8021e9e:	3710      	adds	r7, #16
 8021ea0:	46bd      	mov	sp, r7
 8021ea2:	bd80      	pop	{r7, pc}

08021ea4 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8021ea4:	b580      	push	{r7, lr}
 8021ea6:	b084      	sub	sp, #16
 8021ea8:	af00      	add	r7, sp, #0
 8021eaa:	6078      	str	r0, [r7, #4]
 8021eac:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8021eae:	2300      	movs	r3, #0
 8021eb0:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8021eb2:	683b      	ldr	r3, [r7, #0]
 8021eb4:	885b      	ldrh	r3, [r3, #2]
 8021eb6:	b2da      	uxtb	r2, r3
 8021eb8:	4b4c      	ldr	r3, [pc, #304]	; (8021fec <USBD_SetConfig+0x148>)
 8021eba:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8021ebc:	4b4b      	ldr	r3, [pc, #300]	; (8021fec <USBD_SetConfig+0x148>)
 8021ebe:	781b      	ldrb	r3, [r3, #0]
 8021ec0:	2b01      	cmp	r3, #1
 8021ec2:	d905      	bls.n	8021ed0 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8021ec4:	6839      	ldr	r1, [r7, #0]
 8021ec6:	6878      	ldr	r0, [r7, #4]
 8021ec8:	f000 f96c 	bl	80221a4 <USBD_CtlError>
    return USBD_FAIL;
 8021ecc:	2303      	movs	r3, #3
 8021ece:	e088      	b.n	8021fe2 <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 8021ed0:	687b      	ldr	r3, [r7, #4]
 8021ed2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8021ed6:	b2db      	uxtb	r3, r3
 8021ed8:	2b02      	cmp	r3, #2
 8021eda:	d002      	beq.n	8021ee2 <USBD_SetConfig+0x3e>
 8021edc:	2b03      	cmp	r3, #3
 8021ede:	d025      	beq.n	8021f2c <USBD_SetConfig+0x88>
 8021ee0:	e071      	b.n	8021fc6 <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8021ee2:	4b42      	ldr	r3, [pc, #264]	; (8021fec <USBD_SetConfig+0x148>)
 8021ee4:	781b      	ldrb	r3, [r3, #0]
 8021ee6:	2b00      	cmp	r3, #0
 8021ee8:	d01c      	beq.n	8021f24 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 8021eea:	4b40      	ldr	r3, [pc, #256]	; (8021fec <USBD_SetConfig+0x148>)
 8021eec:	781b      	ldrb	r3, [r3, #0]
 8021eee:	461a      	mov	r2, r3
 8021ef0:	687b      	ldr	r3, [r7, #4]
 8021ef2:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8021ef4:	4b3d      	ldr	r3, [pc, #244]	; (8021fec <USBD_SetConfig+0x148>)
 8021ef6:	781b      	ldrb	r3, [r3, #0]
 8021ef8:	4619      	mov	r1, r3
 8021efa:	6878      	ldr	r0, [r7, #4]
 8021efc:	f7ff f91f 	bl	802113e <USBD_SetClassConfig>
 8021f00:	4603      	mov	r3, r0
 8021f02:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8021f04:	7bfb      	ldrb	r3, [r7, #15]
 8021f06:	2b00      	cmp	r3, #0
 8021f08:	d004      	beq.n	8021f14 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 8021f0a:	6839      	ldr	r1, [r7, #0]
 8021f0c:	6878      	ldr	r0, [r7, #4]
 8021f0e:	f000 f949 	bl	80221a4 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8021f12:	e065      	b.n	8021fe0 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8021f14:	6878      	ldr	r0, [r7, #4]
 8021f16:	f000 f9f3 	bl	8022300 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8021f1a:	687b      	ldr	r3, [r7, #4]
 8021f1c:	2203      	movs	r2, #3
 8021f1e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8021f22:	e05d      	b.n	8021fe0 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8021f24:	6878      	ldr	r0, [r7, #4]
 8021f26:	f000 f9eb 	bl	8022300 <USBD_CtlSendStatus>
      break;
 8021f2a:	e059      	b.n	8021fe0 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8021f2c:	4b2f      	ldr	r3, [pc, #188]	; (8021fec <USBD_SetConfig+0x148>)
 8021f2e:	781b      	ldrb	r3, [r3, #0]
 8021f30:	2b00      	cmp	r3, #0
 8021f32:	d112      	bne.n	8021f5a <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8021f34:	687b      	ldr	r3, [r7, #4]
 8021f36:	2202      	movs	r2, #2
 8021f38:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8021f3c:	4b2b      	ldr	r3, [pc, #172]	; (8021fec <USBD_SetConfig+0x148>)
 8021f3e:	781b      	ldrb	r3, [r3, #0]
 8021f40:	461a      	mov	r2, r3
 8021f42:	687b      	ldr	r3, [r7, #4]
 8021f44:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8021f46:	4b29      	ldr	r3, [pc, #164]	; (8021fec <USBD_SetConfig+0x148>)
 8021f48:	781b      	ldrb	r3, [r3, #0]
 8021f4a:	4619      	mov	r1, r3
 8021f4c:	6878      	ldr	r0, [r7, #4]
 8021f4e:	f7ff f912 	bl	8021176 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8021f52:	6878      	ldr	r0, [r7, #4]
 8021f54:	f000 f9d4 	bl	8022300 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8021f58:	e042      	b.n	8021fe0 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 8021f5a:	4b24      	ldr	r3, [pc, #144]	; (8021fec <USBD_SetConfig+0x148>)
 8021f5c:	781b      	ldrb	r3, [r3, #0]
 8021f5e:	461a      	mov	r2, r3
 8021f60:	687b      	ldr	r3, [r7, #4]
 8021f62:	685b      	ldr	r3, [r3, #4]
 8021f64:	429a      	cmp	r2, r3
 8021f66:	d02a      	beq.n	8021fbe <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8021f68:	687b      	ldr	r3, [r7, #4]
 8021f6a:	685b      	ldr	r3, [r3, #4]
 8021f6c:	b2db      	uxtb	r3, r3
 8021f6e:	4619      	mov	r1, r3
 8021f70:	6878      	ldr	r0, [r7, #4]
 8021f72:	f7ff f900 	bl	8021176 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8021f76:	4b1d      	ldr	r3, [pc, #116]	; (8021fec <USBD_SetConfig+0x148>)
 8021f78:	781b      	ldrb	r3, [r3, #0]
 8021f7a:	461a      	mov	r2, r3
 8021f7c:	687b      	ldr	r3, [r7, #4]
 8021f7e:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8021f80:	4b1a      	ldr	r3, [pc, #104]	; (8021fec <USBD_SetConfig+0x148>)
 8021f82:	781b      	ldrb	r3, [r3, #0]
 8021f84:	4619      	mov	r1, r3
 8021f86:	6878      	ldr	r0, [r7, #4]
 8021f88:	f7ff f8d9 	bl	802113e <USBD_SetClassConfig>
 8021f8c:	4603      	mov	r3, r0
 8021f8e:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8021f90:	7bfb      	ldrb	r3, [r7, #15]
 8021f92:	2b00      	cmp	r3, #0
 8021f94:	d00f      	beq.n	8021fb6 <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 8021f96:	6839      	ldr	r1, [r7, #0]
 8021f98:	6878      	ldr	r0, [r7, #4]
 8021f9a:	f000 f903 	bl	80221a4 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8021f9e:	687b      	ldr	r3, [r7, #4]
 8021fa0:	685b      	ldr	r3, [r3, #4]
 8021fa2:	b2db      	uxtb	r3, r3
 8021fa4:	4619      	mov	r1, r3
 8021fa6:	6878      	ldr	r0, [r7, #4]
 8021fa8:	f7ff f8e5 	bl	8021176 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8021fac:	687b      	ldr	r3, [r7, #4]
 8021fae:	2202      	movs	r2, #2
 8021fb0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8021fb4:	e014      	b.n	8021fe0 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8021fb6:	6878      	ldr	r0, [r7, #4]
 8021fb8:	f000 f9a2 	bl	8022300 <USBD_CtlSendStatus>
      break;
 8021fbc:	e010      	b.n	8021fe0 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8021fbe:	6878      	ldr	r0, [r7, #4]
 8021fc0:	f000 f99e 	bl	8022300 <USBD_CtlSendStatus>
      break;
 8021fc4:	e00c      	b.n	8021fe0 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 8021fc6:	6839      	ldr	r1, [r7, #0]
 8021fc8:	6878      	ldr	r0, [r7, #4]
 8021fca:	f000 f8eb 	bl	80221a4 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8021fce:	4b07      	ldr	r3, [pc, #28]	; (8021fec <USBD_SetConfig+0x148>)
 8021fd0:	781b      	ldrb	r3, [r3, #0]
 8021fd2:	4619      	mov	r1, r3
 8021fd4:	6878      	ldr	r0, [r7, #4]
 8021fd6:	f7ff f8ce 	bl	8021176 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8021fda:	2303      	movs	r3, #3
 8021fdc:	73fb      	strb	r3, [r7, #15]
      break;
 8021fde:	bf00      	nop
  }

  return ret;
 8021fe0:	7bfb      	ldrb	r3, [r7, #15]
}
 8021fe2:	4618      	mov	r0, r3
 8021fe4:	3710      	adds	r7, #16
 8021fe6:	46bd      	mov	sp, r7
 8021fe8:	bd80      	pop	{r7, pc}
 8021fea:	bf00      	nop
 8021fec:	200007b4 	.word	0x200007b4

08021ff0 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8021ff0:	b580      	push	{r7, lr}
 8021ff2:	b082      	sub	sp, #8
 8021ff4:	af00      	add	r7, sp, #0
 8021ff6:	6078      	str	r0, [r7, #4]
 8021ff8:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8021ffa:	683b      	ldr	r3, [r7, #0]
 8021ffc:	88db      	ldrh	r3, [r3, #6]
 8021ffe:	2b01      	cmp	r3, #1
 8022000:	d004      	beq.n	802200c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8022002:	6839      	ldr	r1, [r7, #0]
 8022004:	6878      	ldr	r0, [r7, #4]
 8022006:	f000 f8cd 	bl	80221a4 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 802200a:	e023      	b.n	8022054 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 802200c:	687b      	ldr	r3, [r7, #4]
 802200e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8022012:	b2db      	uxtb	r3, r3
 8022014:	2b02      	cmp	r3, #2
 8022016:	dc02      	bgt.n	802201e <USBD_GetConfig+0x2e>
 8022018:	2b00      	cmp	r3, #0
 802201a:	dc03      	bgt.n	8022024 <USBD_GetConfig+0x34>
 802201c:	e015      	b.n	802204a <USBD_GetConfig+0x5a>
 802201e:	2b03      	cmp	r3, #3
 8022020:	d00b      	beq.n	802203a <USBD_GetConfig+0x4a>
 8022022:	e012      	b.n	802204a <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8022024:	687b      	ldr	r3, [r7, #4]
 8022026:	2200      	movs	r2, #0
 8022028:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 802202a:	687b      	ldr	r3, [r7, #4]
 802202c:	3308      	adds	r3, #8
 802202e:	2201      	movs	r2, #1
 8022030:	4619      	mov	r1, r3
 8022032:	6878      	ldr	r0, [r7, #4]
 8022034:	f000 f927 	bl	8022286 <USBD_CtlSendData>
        break;
 8022038:	e00c      	b.n	8022054 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 802203a:	687b      	ldr	r3, [r7, #4]
 802203c:	3304      	adds	r3, #4
 802203e:	2201      	movs	r2, #1
 8022040:	4619      	mov	r1, r3
 8022042:	6878      	ldr	r0, [r7, #4]
 8022044:	f000 f91f 	bl	8022286 <USBD_CtlSendData>
        break;
 8022048:	e004      	b.n	8022054 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 802204a:	6839      	ldr	r1, [r7, #0]
 802204c:	6878      	ldr	r0, [r7, #4]
 802204e:	f000 f8a9 	bl	80221a4 <USBD_CtlError>
        break;
 8022052:	bf00      	nop
}
 8022054:	bf00      	nop
 8022056:	3708      	adds	r7, #8
 8022058:	46bd      	mov	sp, r7
 802205a:	bd80      	pop	{r7, pc}

0802205c <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 802205c:	b580      	push	{r7, lr}
 802205e:	b082      	sub	sp, #8
 8022060:	af00      	add	r7, sp, #0
 8022062:	6078      	str	r0, [r7, #4]
 8022064:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8022066:	687b      	ldr	r3, [r7, #4]
 8022068:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 802206c:	b2db      	uxtb	r3, r3
 802206e:	3b01      	subs	r3, #1
 8022070:	2b02      	cmp	r3, #2
 8022072:	d81e      	bhi.n	80220b2 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8022074:	683b      	ldr	r3, [r7, #0]
 8022076:	88db      	ldrh	r3, [r3, #6]
 8022078:	2b02      	cmp	r3, #2
 802207a:	d004      	beq.n	8022086 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 802207c:	6839      	ldr	r1, [r7, #0]
 802207e:	6878      	ldr	r0, [r7, #4]
 8022080:	f000 f890 	bl	80221a4 <USBD_CtlError>
        break;
 8022084:	e01a      	b.n	80220bc <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8022086:	687b      	ldr	r3, [r7, #4]
 8022088:	2201      	movs	r2, #1
 802208a:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 802208c:	687b      	ldr	r3, [r7, #4]
 802208e:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8022092:	2b00      	cmp	r3, #0
 8022094:	d005      	beq.n	80220a2 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8022096:	687b      	ldr	r3, [r7, #4]
 8022098:	68db      	ldr	r3, [r3, #12]
 802209a:	f043 0202 	orr.w	r2, r3, #2
 802209e:	687b      	ldr	r3, [r7, #4]
 80220a0:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 80220a2:	687b      	ldr	r3, [r7, #4]
 80220a4:	330c      	adds	r3, #12
 80220a6:	2202      	movs	r2, #2
 80220a8:	4619      	mov	r1, r3
 80220aa:	6878      	ldr	r0, [r7, #4]
 80220ac:	f000 f8eb 	bl	8022286 <USBD_CtlSendData>
      break;
 80220b0:	e004      	b.n	80220bc <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 80220b2:	6839      	ldr	r1, [r7, #0]
 80220b4:	6878      	ldr	r0, [r7, #4]
 80220b6:	f000 f875 	bl	80221a4 <USBD_CtlError>
      break;
 80220ba:	bf00      	nop
  }
}
 80220bc:	bf00      	nop
 80220be:	3708      	adds	r7, #8
 80220c0:	46bd      	mov	sp, r7
 80220c2:	bd80      	pop	{r7, pc}

080220c4 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80220c4:	b580      	push	{r7, lr}
 80220c6:	b082      	sub	sp, #8
 80220c8:	af00      	add	r7, sp, #0
 80220ca:	6078      	str	r0, [r7, #4]
 80220cc:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80220ce:	683b      	ldr	r3, [r7, #0]
 80220d0:	885b      	ldrh	r3, [r3, #2]
 80220d2:	2b01      	cmp	r3, #1
 80220d4:	d106      	bne.n	80220e4 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 80220d6:	687b      	ldr	r3, [r7, #4]
 80220d8:	2201      	movs	r2, #1
 80220da:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 80220de:	6878      	ldr	r0, [r7, #4]
 80220e0:	f000 f90e 	bl	8022300 <USBD_CtlSendStatus>
  }
}
 80220e4:	bf00      	nop
 80220e6:	3708      	adds	r7, #8
 80220e8:	46bd      	mov	sp, r7
 80220ea:	bd80      	pop	{r7, pc}

080220ec <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80220ec:	b580      	push	{r7, lr}
 80220ee:	b082      	sub	sp, #8
 80220f0:	af00      	add	r7, sp, #0
 80220f2:	6078      	str	r0, [r7, #4]
 80220f4:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80220f6:	687b      	ldr	r3, [r7, #4]
 80220f8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80220fc:	b2db      	uxtb	r3, r3
 80220fe:	3b01      	subs	r3, #1
 8022100:	2b02      	cmp	r3, #2
 8022102:	d80b      	bhi.n	802211c <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8022104:	683b      	ldr	r3, [r7, #0]
 8022106:	885b      	ldrh	r3, [r3, #2]
 8022108:	2b01      	cmp	r3, #1
 802210a:	d10c      	bne.n	8022126 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 802210c:	687b      	ldr	r3, [r7, #4]
 802210e:	2200      	movs	r2, #0
 8022110:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8022114:	6878      	ldr	r0, [r7, #4]
 8022116:	f000 f8f3 	bl	8022300 <USBD_CtlSendStatus>
      }
      break;
 802211a:	e004      	b.n	8022126 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 802211c:	6839      	ldr	r1, [r7, #0]
 802211e:	6878      	ldr	r0, [r7, #4]
 8022120:	f000 f840 	bl	80221a4 <USBD_CtlError>
      break;
 8022124:	e000      	b.n	8022128 <USBD_ClrFeature+0x3c>
      break;
 8022126:	bf00      	nop
  }
}
 8022128:	bf00      	nop
 802212a:	3708      	adds	r7, #8
 802212c:	46bd      	mov	sp, r7
 802212e:	bd80      	pop	{r7, pc}

08022130 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8022130:	b580      	push	{r7, lr}
 8022132:	b084      	sub	sp, #16
 8022134:	af00      	add	r7, sp, #0
 8022136:	6078      	str	r0, [r7, #4]
 8022138:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 802213a:	683b      	ldr	r3, [r7, #0]
 802213c:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 802213e:	68fb      	ldr	r3, [r7, #12]
 8022140:	781a      	ldrb	r2, [r3, #0]
 8022142:	687b      	ldr	r3, [r7, #4]
 8022144:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8022146:	68fb      	ldr	r3, [r7, #12]
 8022148:	3301      	adds	r3, #1
 802214a:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 802214c:	68fb      	ldr	r3, [r7, #12]
 802214e:	781a      	ldrb	r2, [r3, #0]
 8022150:	687b      	ldr	r3, [r7, #4]
 8022152:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8022154:	68fb      	ldr	r3, [r7, #12]
 8022156:	3301      	adds	r3, #1
 8022158:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 802215a:	68f8      	ldr	r0, [r7, #12]
 802215c:	f7ff fa92 	bl	8021684 <SWAPBYTE>
 8022160:	4603      	mov	r3, r0
 8022162:	461a      	mov	r2, r3
 8022164:	687b      	ldr	r3, [r7, #4]
 8022166:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8022168:	68fb      	ldr	r3, [r7, #12]
 802216a:	3301      	adds	r3, #1
 802216c:	60fb      	str	r3, [r7, #12]
  pbuff++;
 802216e:	68fb      	ldr	r3, [r7, #12]
 8022170:	3301      	adds	r3, #1
 8022172:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8022174:	68f8      	ldr	r0, [r7, #12]
 8022176:	f7ff fa85 	bl	8021684 <SWAPBYTE>
 802217a:	4603      	mov	r3, r0
 802217c:	461a      	mov	r2, r3
 802217e:	687b      	ldr	r3, [r7, #4]
 8022180:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8022182:	68fb      	ldr	r3, [r7, #12]
 8022184:	3301      	adds	r3, #1
 8022186:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8022188:	68fb      	ldr	r3, [r7, #12]
 802218a:	3301      	adds	r3, #1
 802218c:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 802218e:	68f8      	ldr	r0, [r7, #12]
 8022190:	f7ff fa78 	bl	8021684 <SWAPBYTE>
 8022194:	4603      	mov	r3, r0
 8022196:	461a      	mov	r2, r3
 8022198:	687b      	ldr	r3, [r7, #4]
 802219a:	80da      	strh	r2, [r3, #6]
}
 802219c:	bf00      	nop
 802219e:	3710      	adds	r7, #16
 80221a0:	46bd      	mov	sp, r7
 80221a2:	bd80      	pop	{r7, pc}

080221a4 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80221a4:	b580      	push	{r7, lr}
 80221a6:	b082      	sub	sp, #8
 80221a8:	af00      	add	r7, sp, #0
 80221aa:	6078      	str	r0, [r7, #4]
 80221ac:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 80221ae:	2180      	movs	r1, #128	; 0x80
 80221b0:	6878      	ldr	r0, [r7, #4]
 80221b2:	f000 fcbe 	bl	8022b32 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 80221b6:	2100      	movs	r1, #0
 80221b8:	6878      	ldr	r0, [r7, #4]
 80221ba:	f000 fcba 	bl	8022b32 <USBD_LL_StallEP>
}
 80221be:	bf00      	nop
 80221c0:	3708      	adds	r7, #8
 80221c2:	46bd      	mov	sp, r7
 80221c4:	bd80      	pop	{r7, pc}

080221c6 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80221c6:	b580      	push	{r7, lr}
 80221c8:	b086      	sub	sp, #24
 80221ca:	af00      	add	r7, sp, #0
 80221cc:	60f8      	str	r0, [r7, #12]
 80221ce:	60b9      	str	r1, [r7, #8]
 80221d0:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80221d2:	2300      	movs	r3, #0
 80221d4:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 80221d6:	68fb      	ldr	r3, [r7, #12]
 80221d8:	2b00      	cmp	r3, #0
 80221da:	d036      	beq.n	802224a <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 80221dc:	68fb      	ldr	r3, [r7, #12]
 80221de:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 80221e0:	6938      	ldr	r0, [r7, #16]
 80221e2:	f000 f836 	bl	8022252 <USBD_GetLen>
 80221e6:	4603      	mov	r3, r0
 80221e8:	3301      	adds	r3, #1
 80221ea:	b29b      	uxth	r3, r3
 80221ec:	005b      	lsls	r3, r3, #1
 80221ee:	b29a      	uxth	r2, r3
 80221f0:	687b      	ldr	r3, [r7, #4]
 80221f2:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 80221f4:	7dfb      	ldrb	r3, [r7, #23]
 80221f6:	68ba      	ldr	r2, [r7, #8]
 80221f8:	4413      	add	r3, r2
 80221fa:	687a      	ldr	r2, [r7, #4]
 80221fc:	7812      	ldrb	r2, [r2, #0]
 80221fe:	701a      	strb	r2, [r3, #0]
  idx++;
 8022200:	7dfb      	ldrb	r3, [r7, #23]
 8022202:	3301      	adds	r3, #1
 8022204:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8022206:	7dfb      	ldrb	r3, [r7, #23]
 8022208:	68ba      	ldr	r2, [r7, #8]
 802220a:	4413      	add	r3, r2
 802220c:	2203      	movs	r2, #3
 802220e:	701a      	strb	r2, [r3, #0]
  idx++;
 8022210:	7dfb      	ldrb	r3, [r7, #23]
 8022212:	3301      	adds	r3, #1
 8022214:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8022216:	e013      	b.n	8022240 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8022218:	7dfb      	ldrb	r3, [r7, #23]
 802221a:	68ba      	ldr	r2, [r7, #8]
 802221c:	4413      	add	r3, r2
 802221e:	693a      	ldr	r2, [r7, #16]
 8022220:	7812      	ldrb	r2, [r2, #0]
 8022222:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8022224:	693b      	ldr	r3, [r7, #16]
 8022226:	3301      	adds	r3, #1
 8022228:	613b      	str	r3, [r7, #16]
    idx++;
 802222a:	7dfb      	ldrb	r3, [r7, #23]
 802222c:	3301      	adds	r3, #1
 802222e:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8022230:	7dfb      	ldrb	r3, [r7, #23]
 8022232:	68ba      	ldr	r2, [r7, #8]
 8022234:	4413      	add	r3, r2
 8022236:	2200      	movs	r2, #0
 8022238:	701a      	strb	r2, [r3, #0]
    idx++;
 802223a:	7dfb      	ldrb	r3, [r7, #23]
 802223c:	3301      	adds	r3, #1
 802223e:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8022240:	693b      	ldr	r3, [r7, #16]
 8022242:	781b      	ldrb	r3, [r3, #0]
 8022244:	2b00      	cmp	r3, #0
 8022246:	d1e7      	bne.n	8022218 <USBD_GetString+0x52>
 8022248:	e000      	b.n	802224c <USBD_GetString+0x86>
    return;
 802224a:	bf00      	nop
  }
}
 802224c:	3718      	adds	r7, #24
 802224e:	46bd      	mov	sp, r7
 8022250:	bd80      	pop	{r7, pc}

08022252 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8022252:	b480      	push	{r7}
 8022254:	b085      	sub	sp, #20
 8022256:	af00      	add	r7, sp, #0
 8022258:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 802225a:	2300      	movs	r3, #0
 802225c:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 802225e:	687b      	ldr	r3, [r7, #4]
 8022260:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8022262:	e005      	b.n	8022270 <USBD_GetLen+0x1e>
  {
    len++;
 8022264:	7bfb      	ldrb	r3, [r7, #15]
 8022266:	3301      	adds	r3, #1
 8022268:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 802226a:	68bb      	ldr	r3, [r7, #8]
 802226c:	3301      	adds	r3, #1
 802226e:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8022270:	68bb      	ldr	r3, [r7, #8]
 8022272:	781b      	ldrb	r3, [r3, #0]
 8022274:	2b00      	cmp	r3, #0
 8022276:	d1f5      	bne.n	8022264 <USBD_GetLen+0x12>
  }

  return len;
 8022278:	7bfb      	ldrb	r3, [r7, #15]
}
 802227a:	4618      	mov	r0, r3
 802227c:	3714      	adds	r7, #20
 802227e:	46bd      	mov	sp, r7
 8022280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022284:	4770      	bx	lr

08022286 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8022286:	b580      	push	{r7, lr}
 8022288:	b084      	sub	sp, #16
 802228a:	af00      	add	r7, sp, #0
 802228c:	60f8      	str	r0, [r7, #12]
 802228e:	60b9      	str	r1, [r7, #8]
 8022290:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8022292:	68fb      	ldr	r3, [r7, #12]
 8022294:	2202      	movs	r2, #2
 8022296:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 802229a:	68fb      	ldr	r3, [r7, #12]
 802229c:	687a      	ldr	r2, [r7, #4]
 802229e:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 80222a0:	68fb      	ldr	r3, [r7, #12]
 80222a2:	687a      	ldr	r2, [r7, #4]
 80222a4:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80222a6:	687b      	ldr	r3, [r7, #4]
 80222a8:	68ba      	ldr	r2, [r7, #8]
 80222aa:	2100      	movs	r1, #0
 80222ac:	68f8      	ldr	r0, [r7, #12]
 80222ae:	f000 fcc9 	bl	8022c44 <USBD_LL_Transmit>

  return USBD_OK;
 80222b2:	2300      	movs	r3, #0
}
 80222b4:	4618      	mov	r0, r3
 80222b6:	3710      	adds	r7, #16
 80222b8:	46bd      	mov	sp, r7
 80222ba:	bd80      	pop	{r7, pc}

080222bc <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 80222bc:	b580      	push	{r7, lr}
 80222be:	b084      	sub	sp, #16
 80222c0:	af00      	add	r7, sp, #0
 80222c2:	60f8      	str	r0, [r7, #12]
 80222c4:	60b9      	str	r1, [r7, #8]
 80222c6:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80222c8:	687b      	ldr	r3, [r7, #4]
 80222ca:	68ba      	ldr	r2, [r7, #8]
 80222cc:	2100      	movs	r1, #0
 80222ce:	68f8      	ldr	r0, [r7, #12]
 80222d0:	f000 fcb8 	bl	8022c44 <USBD_LL_Transmit>

  return USBD_OK;
 80222d4:	2300      	movs	r3, #0
}
 80222d6:	4618      	mov	r0, r3
 80222d8:	3710      	adds	r7, #16
 80222da:	46bd      	mov	sp, r7
 80222dc:	bd80      	pop	{r7, pc}

080222de <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 80222de:	b580      	push	{r7, lr}
 80222e0:	b084      	sub	sp, #16
 80222e2:	af00      	add	r7, sp, #0
 80222e4:	60f8      	str	r0, [r7, #12]
 80222e6:	60b9      	str	r1, [r7, #8]
 80222e8:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80222ea:	687b      	ldr	r3, [r7, #4]
 80222ec:	68ba      	ldr	r2, [r7, #8]
 80222ee:	2100      	movs	r1, #0
 80222f0:	68f8      	ldr	r0, [r7, #12]
 80222f2:	f000 fcc8 	bl	8022c86 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80222f6:	2300      	movs	r3, #0
}
 80222f8:	4618      	mov	r0, r3
 80222fa:	3710      	adds	r7, #16
 80222fc:	46bd      	mov	sp, r7
 80222fe:	bd80      	pop	{r7, pc}

08022300 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8022300:	b580      	push	{r7, lr}
 8022302:	b082      	sub	sp, #8
 8022304:	af00      	add	r7, sp, #0
 8022306:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8022308:	687b      	ldr	r3, [r7, #4]
 802230a:	2204      	movs	r2, #4
 802230c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8022310:	2300      	movs	r3, #0
 8022312:	2200      	movs	r2, #0
 8022314:	2100      	movs	r1, #0
 8022316:	6878      	ldr	r0, [r7, #4]
 8022318:	f000 fc94 	bl	8022c44 <USBD_LL_Transmit>

  return USBD_OK;
 802231c:	2300      	movs	r3, #0
}
 802231e:	4618      	mov	r0, r3
 8022320:	3708      	adds	r7, #8
 8022322:	46bd      	mov	sp, r7
 8022324:	bd80      	pop	{r7, pc}

08022326 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8022326:	b580      	push	{r7, lr}
 8022328:	b082      	sub	sp, #8
 802232a:	af00      	add	r7, sp, #0
 802232c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 802232e:	687b      	ldr	r3, [r7, #4]
 8022330:	2205      	movs	r2, #5
 8022332:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8022336:	2300      	movs	r3, #0
 8022338:	2200      	movs	r2, #0
 802233a:	2100      	movs	r1, #0
 802233c:	6878      	ldr	r0, [r7, #4]
 802233e:	f000 fca2 	bl	8022c86 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8022342:	2300      	movs	r3, #0
}
 8022344:	4618      	mov	r0, r3
 8022346:	3708      	adds	r7, #8
 8022348:	46bd      	mov	sp, r7
 802234a:	bd80      	pop	{r7, pc}

0802234c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 802234c:	b580      	push	{r7, lr}
 802234e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8022350:	2200      	movs	r2, #0
 8022352:	4912      	ldr	r1, [pc, #72]	; (802239c <MX_USB_DEVICE_Init+0x50>)
 8022354:	4812      	ldr	r0, [pc, #72]	; (80223a0 <MX_USB_DEVICE_Init+0x54>)
 8022356:	f7fe fe84 	bl	8021062 <USBD_Init>
 802235a:	4603      	mov	r3, r0
 802235c:	2b00      	cmp	r3, #0
 802235e:	d001      	beq.n	8022364 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8022360:	f7f5 fdd8 	bl	8017f14 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_MSC) != USBD_OK)
 8022364:	490f      	ldr	r1, [pc, #60]	; (80223a4 <MX_USB_DEVICE_Init+0x58>)
 8022366:	480e      	ldr	r0, [pc, #56]	; (80223a0 <MX_USB_DEVICE_Init+0x54>)
 8022368:	f7fe feab 	bl	80210c2 <USBD_RegisterClass>
 802236c:	4603      	mov	r3, r0
 802236e:	2b00      	cmp	r3, #0
 8022370:	d001      	beq.n	8022376 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8022372:	f7f5 fdcf 	bl	8017f14 <Error_Handler>
  }
  if (USBD_MSC_RegisterStorage(&hUsbDeviceFS, &USBD_Storage_Interface_fops_FS) != USBD_OK)
 8022376:	490c      	ldr	r1, [pc, #48]	; (80223a8 <MX_USB_DEVICE_Init+0x5c>)
 8022378:	4809      	ldr	r0, [pc, #36]	; (80223a0 <MX_USB_DEVICE_Init+0x54>)
 802237a:	f7fd fa5b 	bl	801f834 <USBD_MSC_RegisterStorage>
 802237e:	4603      	mov	r3, r0
 8022380:	2b00      	cmp	r3, #0
 8022382:	d001      	beq.n	8022388 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8022384:	f7f5 fdc6 	bl	8017f14 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8022388:	4805      	ldr	r0, [pc, #20]	; (80223a0 <MX_USB_DEVICE_Init+0x54>)
 802238a:	f7fe fec1 	bl	8021110 <USBD_Start>
 802238e:	4603      	mov	r3, r0
 8022390:	2b00      	cmp	r3, #0
 8022392:	d001      	beq.n	8022398 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8022394:	f7f5 fdbe 	bl	8017f14 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8022398:	bf00      	nop
 802239a:	bd80      	pop	{r7, pc}
 802239c:	20000680 	.word	0x20000680
 80223a0:	20006c48 	.word	0x20006c48
 80223a4:	20000598 	.word	0x20000598
 80223a8:	200006e0 	.word	0x200006e0

080223ac <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80223ac:	b480      	push	{r7}
 80223ae:	b083      	sub	sp, #12
 80223b0:	af00      	add	r7, sp, #0
 80223b2:	4603      	mov	r3, r0
 80223b4:	6039      	str	r1, [r7, #0]
 80223b6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 80223b8:	683b      	ldr	r3, [r7, #0]
 80223ba:	2212      	movs	r2, #18
 80223bc:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 80223be:	4b03      	ldr	r3, [pc, #12]	; (80223cc <USBD_FS_DeviceDescriptor+0x20>)
}
 80223c0:	4618      	mov	r0, r3
 80223c2:	370c      	adds	r7, #12
 80223c4:	46bd      	mov	sp, r7
 80223c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80223ca:	4770      	bx	lr
 80223cc:	200006a0 	.word	0x200006a0

080223d0 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80223d0:	b480      	push	{r7}
 80223d2:	b083      	sub	sp, #12
 80223d4:	af00      	add	r7, sp, #0
 80223d6:	4603      	mov	r3, r0
 80223d8:	6039      	str	r1, [r7, #0]
 80223da:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80223dc:	683b      	ldr	r3, [r7, #0]
 80223de:	2204      	movs	r2, #4
 80223e0:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 80223e2:	4b03      	ldr	r3, [pc, #12]	; (80223f0 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 80223e4:	4618      	mov	r0, r3
 80223e6:	370c      	adds	r7, #12
 80223e8:	46bd      	mov	sp, r7
 80223ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80223ee:	4770      	bx	lr
 80223f0:	200006c0 	.word	0x200006c0

080223f4 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80223f4:	b580      	push	{r7, lr}
 80223f6:	b082      	sub	sp, #8
 80223f8:	af00      	add	r7, sp, #0
 80223fa:	4603      	mov	r3, r0
 80223fc:	6039      	str	r1, [r7, #0]
 80223fe:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8022400:	79fb      	ldrb	r3, [r7, #7]
 8022402:	2b00      	cmp	r3, #0
 8022404:	d105      	bne.n	8022412 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8022406:	683a      	ldr	r2, [r7, #0]
 8022408:	4907      	ldr	r1, [pc, #28]	; (8022428 <USBD_FS_ProductStrDescriptor+0x34>)
 802240a:	4808      	ldr	r0, [pc, #32]	; (802242c <USBD_FS_ProductStrDescriptor+0x38>)
 802240c:	f7ff fedb 	bl	80221c6 <USBD_GetString>
 8022410:	e004      	b.n	802241c <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8022412:	683a      	ldr	r2, [r7, #0]
 8022414:	4904      	ldr	r1, [pc, #16]	; (8022428 <USBD_FS_ProductStrDescriptor+0x34>)
 8022416:	4805      	ldr	r0, [pc, #20]	; (802242c <USBD_FS_ProductStrDescriptor+0x38>)
 8022418:	f7ff fed5 	bl	80221c6 <USBD_GetString>
  }
  return USBD_StrDesc;
 802241c:	4b02      	ldr	r3, [pc, #8]	; (8022428 <USBD_FS_ProductStrDescriptor+0x34>)
}
 802241e:	4618      	mov	r0, r3
 8022420:	3708      	adds	r7, #8
 8022422:	46bd      	mov	sp, r7
 8022424:	bd80      	pop	{r7, pc}
 8022426:	bf00      	nop
 8022428:	20006f18 	.word	0x20006f18
 802242c:	08000a84 	.word	0x08000a84

08022430 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8022430:	b580      	push	{r7, lr}
 8022432:	b082      	sub	sp, #8
 8022434:	af00      	add	r7, sp, #0
 8022436:	4603      	mov	r3, r0
 8022438:	6039      	str	r1, [r7, #0]
 802243a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 802243c:	683a      	ldr	r2, [r7, #0]
 802243e:	4904      	ldr	r1, [pc, #16]	; (8022450 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8022440:	4804      	ldr	r0, [pc, #16]	; (8022454 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8022442:	f7ff fec0 	bl	80221c6 <USBD_GetString>
  return USBD_StrDesc;
 8022446:	4b02      	ldr	r3, [pc, #8]	; (8022450 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8022448:	4618      	mov	r0, r3
 802244a:	3708      	adds	r7, #8
 802244c:	46bd      	mov	sp, r7
 802244e:	bd80      	pop	{r7, pc}
 8022450:	20006f18 	.word	0x20006f18
 8022454:	08000a98 	.word	0x08000a98

08022458 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8022458:	b580      	push	{r7, lr}
 802245a:	b082      	sub	sp, #8
 802245c:	af00      	add	r7, sp, #0
 802245e:	4603      	mov	r3, r0
 8022460:	6039      	str	r1, [r7, #0]
 8022462:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8022464:	683b      	ldr	r3, [r7, #0]
 8022466:	221a      	movs	r2, #26
 8022468:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 802246a:	f000 f855 	bl	8022518 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 802246e:	4b02      	ldr	r3, [pc, #8]	; (8022478 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8022470:	4618      	mov	r0, r3
 8022472:	3708      	adds	r7, #8
 8022474:	46bd      	mov	sp, r7
 8022476:	bd80      	pop	{r7, pc}
 8022478:	200006c4 	.word	0x200006c4

0802247c <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 802247c:	b580      	push	{r7, lr}
 802247e:	b082      	sub	sp, #8
 8022480:	af00      	add	r7, sp, #0
 8022482:	4603      	mov	r3, r0
 8022484:	6039      	str	r1, [r7, #0]
 8022486:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8022488:	79fb      	ldrb	r3, [r7, #7]
 802248a:	2b00      	cmp	r3, #0
 802248c:	d105      	bne.n	802249a <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 802248e:	683a      	ldr	r2, [r7, #0]
 8022490:	4907      	ldr	r1, [pc, #28]	; (80224b0 <USBD_FS_ConfigStrDescriptor+0x34>)
 8022492:	4808      	ldr	r0, [pc, #32]	; (80224b4 <USBD_FS_ConfigStrDescriptor+0x38>)
 8022494:	f7ff fe97 	bl	80221c6 <USBD_GetString>
 8022498:	e004      	b.n	80224a4 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 802249a:	683a      	ldr	r2, [r7, #0]
 802249c:	4904      	ldr	r1, [pc, #16]	; (80224b0 <USBD_FS_ConfigStrDescriptor+0x34>)
 802249e:	4805      	ldr	r0, [pc, #20]	; (80224b4 <USBD_FS_ConfigStrDescriptor+0x38>)
 80224a0:	f7ff fe91 	bl	80221c6 <USBD_GetString>
  }
  return USBD_StrDesc;
 80224a4:	4b02      	ldr	r3, [pc, #8]	; (80224b0 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 80224a6:	4618      	mov	r0, r3
 80224a8:	3708      	adds	r7, #8
 80224aa:	46bd      	mov	sp, r7
 80224ac:	bd80      	pop	{r7, pc}
 80224ae:	bf00      	nop
 80224b0:	20006f18 	.word	0x20006f18
 80224b4:	08000aac 	.word	0x08000aac

080224b8 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80224b8:	b580      	push	{r7, lr}
 80224ba:	b082      	sub	sp, #8
 80224bc:	af00      	add	r7, sp, #0
 80224be:	4603      	mov	r3, r0
 80224c0:	6039      	str	r1, [r7, #0]
 80224c2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80224c4:	79fb      	ldrb	r3, [r7, #7]
 80224c6:	2b00      	cmp	r3, #0
 80224c8:	d105      	bne.n	80224d6 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80224ca:	683a      	ldr	r2, [r7, #0]
 80224cc:	4907      	ldr	r1, [pc, #28]	; (80224ec <USBD_FS_InterfaceStrDescriptor+0x34>)
 80224ce:	4808      	ldr	r0, [pc, #32]	; (80224f0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80224d0:	f7ff fe79 	bl	80221c6 <USBD_GetString>
 80224d4:	e004      	b.n	80224e0 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80224d6:	683a      	ldr	r2, [r7, #0]
 80224d8:	4904      	ldr	r1, [pc, #16]	; (80224ec <USBD_FS_InterfaceStrDescriptor+0x34>)
 80224da:	4805      	ldr	r0, [pc, #20]	; (80224f0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80224dc:	f7ff fe73 	bl	80221c6 <USBD_GetString>
  }
  return USBD_StrDesc;
 80224e0:	4b02      	ldr	r3, [pc, #8]	; (80224ec <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 80224e2:	4618      	mov	r0, r3
 80224e4:	3708      	adds	r7, #8
 80224e6:	46bd      	mov	sp, r7
 80224e8:	bd80      	pop	{r7, pc}
 80224ea:	bf00      	nop
 80224ec:	20006f18 	.word	0x20006f18
 80224f0:	08000ab8 	.word	0x08000ab8

080224f4 <USBD_FS_USR_BOSDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80224f4:	b480      	push	{r7}
 80224f6:	b083      	sub	sp, #12
 80224f8:	af00      	add	r7, sp, #0
 80224fa:	4603      	mov	r3, r0
 80224fc:	6039      	str	r1, [r7, #0]
 80224fe:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_BOSDesc);
 8022500:	683b      	ldr	r3, [r7, #0]
 8022502:	220c      	movs	r2, #12
 8022504:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)USBD_FS_BOSDesc;
 8022506:	4b03      	ldr	r3, [pc, #12]	; (8022514 <USBD_FS_USR_BOSDescriptor+0x20>)
}
 8022508:	4618      	mov	r0, r3
 802250a:	370c      	adds	r7, #12
 802250c:	46bd      	mov	sp, r7
 802250e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022512:	4770      	bx	lr
 8022514:	200006b4 	.word	0x200006b4

08022518 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8022518:	b580      	push	{r7, lr}
 802251a:	b084      	sub	sp, #16
 802251c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 802251e:	4b0f      	ldr	r3, [pc, #60]	; (802255c <Get_SerialNum+0x44>)
 8022520:	681b      	ldr	r3, [r3, #0]
 8022522:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8022524:	4b0e      	ldr	r3, [pc, #56]	; (8022560 <Get_SerialNum+0x48>)
 8022526:	681b      	ldr	r3, [r3, #0]
 8022528:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 802252a:	4b0e      	ldr	r3, [pc, #56]	; (8022564 <Get_SerialNum+0x4c>)
 802252c:	681b      	ldr	r3, [r3, #0]
 802252e:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8022530:	68fa      	ldr	r2, [r7, #12]
 8022532:	687b      	ldr	r3, [r7, #4]
 8022534:	4413      	add	r3, r2
 8022536:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8022538:	68fb      	ldr	r3, [r7, #12]
 802253a:	2b00      	cmp	r3, #0
 802253c:	d009      	beq.n	8022552 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 802253e:	2208      	movs	r2, #8
 8022540:	4909      	ldr	r1, [pc, #36]	; (8022568 <Get_SerialNum+0x50>)
 8022542:	68f8      	ldr	r0, [r7, #12]
 8022544:	f000 f814 	bl	8022570 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8022548:	2204      	movs	r2, #4
 802254a:	4908      	ldr	r1, [pc, #32]	; (802256c <Get_SerialNum+0x54>)
 802254c:	68b8      	ldr	r0, [r7, #8]
 802254e:	f000 f80f 	bl	8022570 <IntToUnicode>
  }
}
 8022552:	bf00      	nop
 8022554:	3710      	adds	r7, #16
 8022556:	46bd      	mov	sp, r7
 8022558:	bd80      	pop	{r7, pc}
 802255a:	bf00      	nop
 802255c:	1fff7a10 	.word	0x1fff7a10
 8022560:	1fff7a14 	.word	0x1fff7a14
 8022564:	1fff7a18 	.word	0x1fff7a18
 8022568:	200006c6 	.word	0x200006c6
 802256c:	200006d6 	.word	0x200006d6

08022570 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8022570:	b480      	push	{r7}
 8022572:	b087      	sub	sp, #28
 8022574:	af00      	add	r7, sp, #0
 8022576:	60f8      	str	r0, [r7, #12]
 8022578:	60b9      	str	r1, [r7, #8]
 802257a:	4613      	mov	r3, r2
 802257c:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 802257e:	2300      	movs	r3, #0
 8022580:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8022582:	2300      	movs	r3, #0
 8022584:	75fb      	strb	r3, [r7, #23]
 8022586:	e027      	b.n	80225d8 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8022588:	68fb      	ldr	r3, [r7, #12]
 802258a:	0f1b      	lsrs	r3, r3, #28
 802258c:	2b09      	cmp	r3, #9
 802258e:	d80b      	bhi.n	80225a8 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8022590:	68fb      	ldr	r3, [r7, #12]
 8022592:	0f1b      	lsrs	r3, r3, #28
 8022594:	b2da      	uxtb	r2, r3
 8022596:	7dfb      	ldrb	r3, [r7, #23]
 8022598:	005b      	lsls	r3, r3, #1
 802259a:	4619      	mov	r1, r3
 802259c:	68bb      	ldr	r3, [r7, #8]
 802259e:	440b      	add	r3, r1
 80225a0:	3230      	adds	r2, #48	; 0x30
 80225a2:	b2d2      	uxtb	r2, r2
 80225a4:	701a      	strb	r2, [r3, #0]
 80225a6:	e00a      	b.n	80225be <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80225a8:	68fb      	ldr	r3, [r7, #12]
 80225aa:	0f1b      	lsrs	r3, r3, #28
 80225ac:	b2da      	uxtb	r2, r3
 80225ae:	7dfb      	ldrb	r3, [r7, #23]
 80225b0:	005b      	lsls	r3, r3, #1
 80225b2:	4619      	mov	r1, r3
 80225b4:	68bb      	ldr	r3, [r7, #8]
 80225b6:	440b      	add	r3, r1
 80225b8:	3237      	adds	r2, #55	; 0x37
 80225ba:	b2d2      	uxtb	r2, r2
 80225bc:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 80225be:	68fb      	ldr	r3, [r7, #12]
 80225c0:	011b      	lsls	r3, r3, #4
 80225c2:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 80225c4:	7dfb      	ldrb	r3, [r7, #23]
 80225c6:	005b      	lsls	r3, r3, #1
 80225c8:	3301      	adds	r3, #1
 80225ca:	68ba      	ldr	r2, [r7, #8]
 80225cc:	4413      	add	r3, r2
 80225ce:	2200      	movs	r2, #0
 80225d0:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 80225d2:	7dfb      	ldrb	r3, [r7, #23]
 80225d4:	3301      	adds	r3, #1
 80225d6:	75fb      	strb	r3, [r7, #23]
 80225d8:	7dfa      	ldrb	r2, [r7, #23]
 80225da:	79fb      	ldrb	r3, [r7, #7]
 80225dc:	429a      	cmp	r2, r3
 80225de:	d3d3      	bcc.n	8022588 <IntToUnicode+0x18>
  }
}
 80225e0:	bf00      	nop
 80225e2:	bf00      	nop
 80225e4:	371c      	adds	r7, #28
 80225e6:	46bd      	mov	sp, r7
 80225e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80225ec:	4770      	bx	lr

080225ee <STORAGE_Init_FS>:
  * @brief  Initializes over USB FS IP
  * @param  lun:
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_Init_FS(uint8_t lun)
{
 80225ee:	b480      	push	{r7}
 80225f0:	b083      	sub	sp, #12
 80225f2:	af00      	add	r7, sp, #0
 80225f4:	4603      	mov	r3, r0
 80225f6:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 2 */
  return (USBD_OK);
 80225f8:	2300      	movs	r3, #0
  /* USER CODE END 2 */
}
 80225fa:	4618      	mov	r0, r3
 80225fc:	370c      	adds	r7, #12
 80225fe:	46bd      	mov	sp, r7
 8022600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022604:	4770      	bx	lr

08022606 <STORAGE_GetCapacity_FS>:
  * @param  block_num: .
  * @param  block_size: .
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_GetCapacity_FS(uint8_t lun, uint32_t *block_num, uint16_t *block_size)
{
 8022606:	b480      	push	{r7}
 8022608:	b085      	sub	sp, #20
 802260a:	af00      	add	r7, sp, #0
 802260c:	4603      	mov	r3, r0
 802260e:	60b9      	str	r1, [r7, #8]
 8022610:	607a      	str	r2, [r7, #4]
 8022612:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 3 */
  *block_num  = STORAGE_BLK_NBR;
 8022614:	68bb      	ldr	r3, [r7, #8]
 8022616:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 802261a:	601a      	str	r2, [r3, #0]
  *block_size = STORAGE_BLK_SIZ;
 802261c:	687b      	ldr	r3, [r7, #4]
 802261e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8022622:	801a      	strh	r2, [r3, #0]
  return (USBD_OK);
 8022624:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8022626:	4618      	mov	r0, r3
 8022628:	3714      	adds	r7, #20
 802262a:	46bd      	mov	sp, r7
 802262c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022630:	4770      	bx	lr

08022632 <STORAGE_IsReady_FS>:
  * @brief  .
  * @param  lun: .
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_IsReady_FS(uint8_t lun)
{
 8022632:	b480      	push	{r7}
 8022634:	b083      	sub	sp, #12
 8022636:	af00      	add	r7, sp, #0
 8022638:	4603      	mov	r3, r0
 802263a:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 802263c:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 802263e:	4618      	mov	r0, r3
 8022640:	370c      	adds	r7, #12
 8022642:	46bd      	mov	sp, r7
 8022644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022648:	4770      	bx	lr

0802264a <STORAGE_IsWriteProtected_FS>:
  * @brief  .
  * @param  lun: .
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_IsWriteProtected_FS(uint8_t lun)
{
 802264a:	b480      	push	{r7}
 802264c:	b083      	sub	sp, #12
 802264e:	af00      	add	r7, sp, #0
 8022650:	4603      	mov	r3, r0
 8022652:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 5 */
  return (USBD_OK);
 8022654:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8022656:	4618      	mov	r0, r3
 8022658:	370c      	adds	r7, #12
 802265a:	46bd      	mov	sp, r7
 802265c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022660:	4770      	bx	lr

08022662 <STORAGE_Read_FS>:
  * @brief  .
  * @param  lun: .
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_Read_FS(uint8_t lun, uint8_t *buf, uint32_t blk_addr, uint16_t blk_len)
{
 8022662:	b580      	push	{r7, lr}
 8022664:	b084      	sub	sp, #16
 8022666:	af00      	add	r7, sp, #0
 8022668:	60b9      	str	r1, [r7, #8]
 802266a:	607a      	str	r2, [r7, #4]
 802266c:	461a      	mov	r2, r3
 802266e:	4603      	mov	r3, r0
 8022670:	73fb      	strb	r3, [r7, #15]
 8022672:	4613      	mov	r3, r2
 8022674:	81bb      	strh	r3, [r7, #12]
  /* USER CODE BEGIN 6 */
	ExtFlash_PageRD( (char *)buf, blk_addr*STORAGE_BLK_SIZ, blk_len);
 8022676:	687b      	ldr	r3, [r7, #4]
 8022678:	025b      	lsls	r3, r3, #9
 802267a:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 802267e:	4619      	mov	r1, r3
 8022680:	68b8      	ldr	r0, [r7, #8]
 8022682:	f7ec fc0b 	bl	800ee9c <ExtFlash_PageRD>
  return (USBD_OK);
 8022686:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8022688:	4618      	mov	r0, r3
 802268a:	3710      	adds	r7, #16
 802268c:	46bd      	mov	sp, r7
 802268e:	bd80      	pop	{r7, pc}

08022690 <STORAGE_Write_FS>:
  * @brief  .
  * @param  lun: .
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_Write_FS(uint8_t lun, uint8_t *buf, uint32_t blk_addr, uint16_t blk_len)
{
 8022690:	b580      	push	{r7, lr}
 8022692:	b084      	sub	sp, #16
 8022694:	af00      	add	r7, sp, #0
 8022696:	60b9      	str	r1, [r7, #8]
 8022698:	607a      	str	r2, [r7, #4]
 802269a:	461a      	mov	r2, r3
 802269c:	4603      	mov	r3, r0
 802269e:	73fb      	strb	r3, [r7, #15]
 80226a0:	4613      	mov	r3, r2
 80226a2:	81bb      	strh	r3, [r7, #12]
  /* USER CODE BEGIN 7 */
	ExtFlash_PageWR( (char *)buf, blk_addr*STORAGE_BLK_SIZ);
 80226a4:	687b      	ldr	r3, [r7, #4]
 80226a6:	025b      	lsls	r3, r3, #9
 80226a8:	4619      	mov	r1, r3
 80226aa:	68b8      	ldr	r0, [r7, #8]
 80226ac:	f7ec fcce 	bl	800f04c <ExtFlash_PageWR>
	return (USBD_OK);
 80226b0:	2300      	movs	r3, #0
  /* USER CODE END 7 */
}
 80226b2:	4618      	mov	r0, r3
 80226b4:	3710      	adds	r7, #16
 80226b6:	46bd      	mov	sp, r7
 80226b8:	bd80      	pop	{r7, pc}

080226ba <STORAGE_GetMaxLun_FS>:
  * @brief  .
  * @param  None
  * @retval .
  */
int8_t STORAGE_GetMaxLun_FS(void)
{
 80226ba:	b480      	push	{r7}
 80226bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 8 */
  return (STORAGE_LUN_NBR - 1);
 80226be:	2300      	movs	r3, #0
  /* USER CODE END 8 */
}
 80226c0:	4618      	mov	r0, r3
 80226c2:	46bd      	mov	sp, r7
 80226c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80226c8:	4770      	bx	lr
	...

080226cc <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80226cc:	b580      	push	{r7, lr}
 80226ce:	b0a0      	sub	sp, #128	; 0x80
 80226d0:	af00      	add	r7, sp, #0
 80226d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80226d4:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80226d8:	2200      	movs	r2, #0
 80226da:	601a      	str	r2, [r3, #0]
 80226dc:	605a      	str	r2, [r3, #4]
 80226de:	609a      	str	r2, [r3, #8]
 80226e0:	60da      	str	r2, [r3, #12]
 80226e2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80226e4:	f107 0310 	add.w	r3, r7, #16
 80226e8:	225c      	movs	r2, #92	; 0x5c
 80226ea:	2100      	movs	r1, #0
 80226ec:	4618      	mov	r0, r3
 80226ee:	f000 fbd9 	bl	8022ea4 <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 80226f2:	687b      	ldr	r3, [r7, #4]
 80226f4:	681b      	ldr	r3, [r3, #0]
 80226f6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80226fa:	d154      	bne.n	80227a6 <HAL_PCD_MspInit+0xda>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 80226fc:	f44f 7380 	mov.w	r3, #256	; 0x100
 8022700:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.PLLSAI.PLLSAIM = 25;
 8022702:	2319      	movs	r3, #25
 8022704:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.PLLSAI.PLLSAIN = 192;
 8022706:	23c0      	movs	r3, #192	; 0xc0
 8022708:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInitStruct.PLLSAI.PLLSAIQ = 2;
 802270a:	2302      	movs	r3, #2
 802270c:	637b      	str	r3, [r7, #52]	; 0x34
    PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV4;
 802270e:	2304      	movs	r3, #4
 8022710:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInitStruct.PLLSAIDivQ = 1;
 8022712:	2301      	movs	r3, #1
 8022714:	63fb      	str	r3, [r7, #60]	; 0x3c
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48CLKSOURCE_PLLSAIP;
 8022716:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 802271a:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 802271c:	f107 0310 	add.w	r3, r7, #16
 8022720:	4618      	mov	r0, r3
 8022722:	f7f8 fec1 	bl	801b4a8 <HAL_RCCEx_PeriphCLKConfig>
 8022726:	4603      	mov	r3, r0
 8022728:	2b00      	cmp	r3, #0
 802272a:	d001      	beq.n	8022730 <HAL_PCD_MspInit+0x64>
    {
      Error_Handler();
 802272c:	f7f5 fbf2 	bl	8017f14 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8022730:	2300      	movs	r3, #0
 8022732:	60fb      	str	r3, [r7, #12]
 8022734:	4b1e      	ldr	r3, [pc, #120]	; (80227b0 <HAL_PCD_MspInit+0xe4>)
 8022736:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8022738:	4a1d      	ldr	r2, [pc, #116]	; (80227b0 <HAL_PCD_MspInit+0xe4>)
 802273a:	f043 0301 	orr.w	r3, r3, #1
 802273e:	6313      	str	r3, [r2, #48]	; 0x30
 8022740:	4b1b      	ldr	r3, [pc, #108]	; (80227b0 <HAL_PCD_MspInit+0xe4>)
 8022742:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8022744:	f003 0301 	and.w	r3, r3, #1
 8022748:	60fb      	str	r3, [r7, #12]
 802274a:	68fb      	ldr	r3, [r7, #12]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = D__Pin|D_A12_Pin;
 802274c:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8022750:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8022752:	2302      	movs	r3, #2
 8022754:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8022756:	2300      	movs	r3, #0
 8022758:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 802275a:	2303      	movs	r3, #3
 802275c:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 802275e:	230a      	movs	r3, #10
 8022760:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8022762:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8022766:	4619      	mov	r1, r3
 8022768:	4812      	ldr	r0, [pc, #72]	; (80227b4 <HAL_PCD_MspInit+0xe8>)
 802276a:	f7f7 f999 	bl	8019aa0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 802276e:	4b10      	ldr	r3, [pc, #64]	; (80227b0 <HAL_PCD_MspInit+0xe4>)
 8022770:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8022772:	4a0f      	ldr	r2, [pc, #60]	; (80227b0 <HAL_PCD_MspInit+0xe4>)
 8022774:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8022778:	6353      	str	r3, [r2, #52]	; 0x34
 802277a:	2300      	movs	r3, #0
 802277c:	60bb      	str	r3, [r7, #8]
 802277e:	4b0c      	ldr	r3, [pc, #48]	; (80227b0 <HAL_PCD_MspInit+0xe4>)
 8022780:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8022782:	4a0b      	ldr	r2, [pc, #44]	; (80227b0 <HAL_PCD_MspInit+0xe4>)
 8022784:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8022788:	6453      	str	r3, [r2, #68]	; 0x44
 802278a:	4b09      	ldr	r3, [pc, #36]	; (80227b0 <HAL_PCD_MspInit+0xe4>)
 802278c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 802278e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8022792:	60bb      	str	r3, [r7, #8]
 8022794:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8022796:	2200      	movs	r2, #0
 8022798:	2100      	movs	r1, #0
 802279a:	2043      	movs	r0, #67	; 0x43
 802279c:	f7f6 fabf 	bl	8018d1e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 80227a0:	2043      	movs	r0, #67	; 0x43
 80227a2:	f7f6 fad8 	bl	8018d56 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80227a6:	bf00      	nop
 80227a8:	3780      	adds	r7, #128	; 0x80
 80227aa:	46bd      	mov	sp, r7
 80227ac:	bd80      	pop	{r7, pc}
 80227ae:	bf00      	nop
 80227b0:	40023800 	.word	0x40023800
 80227b4:	40020000 	.word	0x40020000

080227b8 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80227b8:	b580      	push	{r7, lr}
 80227ba:	b082      	sub	sp, #8
 80227bc:	af00      	add	r7, sp, #0
 80227be:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80227c0:	687b      	ldr	r3, [r7, #4]
 80227c2:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 80227c6:	687b      	ldr	r3, [r7, #4]
 80227c8:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80227cc:	4619      	mov	r1, r3
 80227ce:	4610      	mov	r0, r2
 80227d0:	f7fe fce9 	bl	80211a6 <USBD_LL_SetupStage>
}
 80227d4:	bf00      	nop
 80227d6:	3708      	adds	r7, #8
 80227d8:	46bd      	mov	sp, r7
 80227da:	bd80      	pop	{r7, pc}

080227dc <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80227dc:	b580      	push	{r7, lr}
 80227de:	b082      	sub	sp, #8
 80227e0:	af00      	add	r7, sp, #0
 80227e2:	6078      	str	r0, [r7, #4]
 80227e4:	460b      	mov	r3, r1
 80227e6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80227e8:	687b      	ldr	r3, [r7, #4]
 80227ea:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 80227ee:	78fa      	ldrb	r2, [r7, #3]
 80227f0:	6879      	ldr	r1, [r7, #4]
 80227f2:	4613      	mov	r3, r2
 80227f4:	00db      	lsls	r3, r3, #3
 80227f6:	1a9b      	subs	r3, r3, r2
 80227f8:	009b      	lsls	r3, r3, #2
 80227fa:	440b      	add	r3, r1
 80227fc:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8022800:	681a      	ldr	r2, [r3, #0]
 8022802:	78fb      	ldrb	r3, [r7, #3]
 8022804:	4619      	mov	r1, r3
 8022806:	f7fe fd23 	bl	8021250 <USBD_LL_DataOutStage>
}
 802280a:	bf00      	nop
 802280c:	3708      	adds	r7, #8
 802280e:	46bd      	mov	sp, r7
 8022810:	bd80      	pop	{r7, pc}

08022812 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8022812:	b580      	push	{r7, lr}
 8022814:	b082      	sub	sp, #8
 8022816:	af00      	add	r7, sp, #0
 8022818:	6078      	str	r0, [r7, #4]
 802281a:	460b      	mov	r3, r1
 802281c:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 802281e:	687b      	ldr	r3, [r7, #4]
 8022820:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8022824:	78fa      	ldrb	r2, [r7, #3]
 8022826:	6879      	ldr	r1, [r7, #4]
 8022828:	4613      	mov	r3, r2
 802282a:	00db      	lsls	r3, r3, #3
 802282c:	1a9b      	subs	r3, r3, r2
 802282e:	009b      	lsls	r3, r3, #2
 8022830:	440b      	add	r3, r1
 8022832:	3348      	adds	r3, #72	; 0x48
 8022834:	681a      	ldr	r2, [r3, #0]
 8022836:	78fb      	ldrb	r3, [r7, #3]
 8022838:	4619      	mov	r1, r3
 802283a:	f7fe fd6c 	bl	8021316 <USBD_LL_DataInStage>
}
 802283e:	bf00      	nop
 8022840:	3708      	adds	r7, #8
 8022842:	46bd      	mov	sp, r7
 8022844:	bd80      	pop	{r7, pc}

08022846 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8022846:	b580      	push	{r7, lr}
 8022848:	b082      	sub	sp, #8
 802284a:	af00      	add	r7, sp, #0
 802284c:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 802284e:	687b      	ldr	r3, [r7, #4]
 8022850:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8022854:	4618      	mov	r0, r3
 8022856:	f7fe fe80 	bl	802155a <USBD_LL_SOF>
}
 802285a:	bf00      	nop
 802285c:	3708      	adds	r7, #8
 802285e:	46bd      	mov	sp, r7
 8022860:	bd80      	pop	{r7, pc}

08022862 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8022862:	b580      	push	{r7, lr}
 8022864:	b084      	sub	sp, #16
 8022866:	af00      	add	r7, sp, #0
 8022868:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 802286a:	2301      	movs	r3, #1
 802286c:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 802286e:	687b      	ldr	r3, [r7, #4]
 8022870:	68db      	ldr	r3, [r3, #12]
 8022872:	2b00      	cmp	r3, #0
 8022874:	d102      	bne.n	802287c <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 8022876:	2300      	movs	r3, #0
 8022878:	73fb      	strb	r3, [r7, #15]
 802287a:	e008      	b.n	802288e <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 802287c:	687b      	ldr	r3, [r7, #4]
 802287e:	68db      	ldr	r3, [r3, #12]
 8022880:	2b02      	cmp	r3, #2
 8022882:	d102      	bne.n	802288a <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8022884:	2301      	movs	r3, #1
 8022886:	73fb      	strb	r3, [r7, #15]
 8022888:	e001      	b.n	802288e <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 802288a:	f7f5 fb43 	bl	8017f14 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 802288e:	687b      	ldr	r3, [r7, #4]
 8022890:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8022894:	7bfa      	ldrb	r2, [r7, #15]
 8022896:	4611      	mov	r1, r2
 8022898:	4618      	mov	r0, r3
 802289a:	f7fe fe20 	bl	80214de <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 802289e:	687b      	ldr	r3, [r7, #4]
 80228a0:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80228a4:	4618      	mov	r0, r3
 80228a6:	f7fe fdcc 	bl	8021442 <USBD_LL_Reset>
}
 80228aa:	bf00      	nop
 80228ac:	3710      	adds	r7, #16
 80228ae:	46bd      	mov	sp, r7
 80228b0:	bd80      	pop	{r7, pc}
	...

080228b4 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80228b4:	b580      	push	{r7, lr}
 80228b6:	b082      	sub	sp, #8
 80228b8:	af00      	add	r7, sp, #0
 80228ba:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80228bc:	687b      	ldr	r3, [r7, #4]
 80228be:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80228c2:	4618      	mov	r0, r3
 80228c4:	f7fe fe1b 	bl	80214fe <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 80228c8:	687b      	ldr	r3, [r7, #4]
 80228ca:	681b      	ldr	r3, [r3, #0]
 80228cc:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80228d0:	681b      	ldr	r3, [r3, #0]
 80228d2:	687a      	ldr	r2, [r7, #4]
 80228d4:	6812      	ldr	r2, [r2, #0]
 80228d6:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80228da:	f043 0301 	orr.w	r3, r3, #1
 80228de:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80228e0:	687b      	ldr	r3, [r7, #4]
 80228e2:	6a1b      	ldr	r3, [r3, #32]
 80228e4:	2b00      	cmp	r3, #0
 80228e6:	d005      	beq.n	80228f4 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80228e8:	4b04      	ldr	r3, [pc, #16]	; (80228fc <HAL_PCD_SuspendCallback+0x48>)
 80228ea:	691b      	ldr	r3, [r3, #16]
 80228ec:	4a03      	ldr	r2, [pc, #12]	; (80228fc <HAL_PCD_SuspendCallback+0x48>)
 80228ee:	f043 0306 	orr.w	r3, r3, #6
 80228f2:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 80228f4:	bf00      	nop
 80228f6:	3708      	adds	r7, #8
 80228f8:	46bd      	mov	sp, r7
 80228fa:	bd80      	pop	{r7, pc}
 80228fc:	e000ed00 	.word	0xe000ed00

08022900 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8022900:	b580      	push	{r7, lr}
 8022902:	b082      	sub	sp, #8
 8022904:	af00      	add	r7, sp, #0
 8022906:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8022908:	687b      	ldr	r3, [r7, #4]
 802290a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 802290e:	4618      	mov	r0, r3
 8022910:	f7fe fe0b 	bl	802152a <USBD_LL_Resume>
}
 8022914:	bf00      	nop
 8022916:	3708      	adds	r7, #8
 8022918:	46bd      	mov	sp, r7
 802291a:	bd80      	pop	{r7, pc}

0802291c <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 802291c:	b580      	push	{r7, lr}
 802291e:	b082      	sub	sp, #8
 8022920:	af00      	add	r7, sp, #0
 8022922:	6078      	str	r0, [r7, #4]
 8022924:	460b      	mov	r3, r1
 8022926:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8022928:	687b      	ldr	r3, [r7, #4]
 802292a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 802292e:	78fa      	ldrb	r2, [r7, #3]
 8022930:	4611      	mov	r1, r2
 8022932:	4618      	mov	r0, r3
 8022934:	f7fe fe59 	bl	80215ea <USBD_LL_IsoOUTIncomplete>
}
 8022938:	bf00      	nop
 802293a:	3708      	adds	r7, #8
 802293c:	46bd      	mov	sp, r7
 802293e:	bd80      	pop	{r7, pc}

08022940 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8022940:	b580      	push	{r7, lr}
 8022942:	b082      	sub	sp, #8
 8022944:	af00      	add	r7, sp, #0
 8022946:	6078      	str	r0, [r7, #4]
 8022948:	460b      	mov	r3, r1
 802294a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 802294c:	687b      	ldr	r3, [r7, #4]
 802294e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8022952:	78fa      	ldrb	r2, [r7, #3]
 8022954:	4611      	mov	r1, r2
 8022956:	4618      	mov	r0, r3
 8022958:	f7fe fe21 	bl	802159e <USBD_LL_IsoINIncomplete>
}
 802295c:	bf00      	nop
 802295e:	3708      	adds	r7, #8
 8022960:	46bd      	mov	sp, r7
 8022962:	bd80      	pop	{r7, pc}

08022964 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8022964:	b580      	push	{r7, lr}
 8022966:	b082      	sub	sp, #8
 8022968:	af00      	add	r7, sp, #0
 802296a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 802296c:	687b      	ldr	r3, [r7, #4]
 802296e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8022972:	4618      	mov	r0, r3
 8022974:	f7fe fe5f 	bl	8021636 <USBD_LL_DevConnected>
}
 8022978:	bf00      	nop
 802297a:	3708      	adds	r7, #8
 802297c:	46bd      	mov	sp, r7
 802297e:	bd80      	pop	{r7, pc}

08022980 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8022980:	b580      	push	{r7, lr}
 8022982:	b082      	sub	sp, #8
 8022984:	af00      	add	r7, sp, #0
 8022986:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8022988:	687b      	ldr	r3, [r7, #4]
 802298a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 802298e:	4618      	mov	r0, r3
 8022990:	f7fe fe5c 	bl	802164c <USBD_LL_DevDisconnected>
}
 8022994:	bf00      	nop
 8022996:	3708      	adds	r7, #8
 8022998:	46bd      	mov	sp, r7
 802299a:	bd80      	pop	{r7, pc}

0802299c <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 802299c:	b580      	push	{r7, lr}
 802299e:	b082      	sub	sp, #8
 80229a0:	af00      	add	r7, sp, #0
 80229a2:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 80229a4:	687b      	ldr	r3, [r7, #4]
 80229a6:	781b      	ldrb	r3, [r3, #0]
 80229a8:	2b00      	cmp	r3, #0
 80229aa:	d13c      	bne.n	8022a26 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 80229ac:	4a20      	ldr	r2, [pc, #128]	; (8022a30 <USBD_LL_Init+0x94>)
 80229ae:	687b      	ldr	r3, [r7, #4]
 80229b0:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 80229b4:	687b      	ldr	r3, [r7, #4]
 80229b6:	4a1e      	ldr	r2, [pc, #120]	; (8022a30 <USBD_LL_Init+0x94>)
 80229b8:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80229bc:	4b1c      	ldr	r3, [pc, #112]	; (8022a30 <USBD_LL_Init+0x94>)
 80229be:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80229c2:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 80229c4:	4b1a      	ldr	r3, [pc, #104]	; (8022a30 <USBD_LL_Init+0x94>)
 80229c6:	2206      	movs	r2, #6
 80229c8:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80229ca:	4b19      	ldr	r3, [pc, #100]	; (8022a30 <USBD_LL_Init+0x94>)
 80229cc:	2202      	movs	r2, #2
 80229ce:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80229d0:	4b17      	ldr	r3, [pc, #92]	; (8022a30 <USBD_LL_Init+0x94>)
 80229d2:	2200      	movs	r2, #0
 80229d4:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80229d6:	4b16      	ldr	r3, [pc, #88]	; (8022a30 <USBD_LL_Init+0x94>)
 80229d8:	2202      	movs	r2, #2
 80229da:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 80229dc:	4b14      	ldr	r3, [pc, #80]	; (8022a30 <USBD_LL_Init+0x94>)
 80229de:	2200      	movs	r2, #0
 80229e0:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80229e2:	4b13      	ldr	r3, [pc, #76]	; (8022a30 <USBD_LL_Init+0x94>)
 80229e4:	2200      	movs	r2, #0
 80229e6:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80229e8:	4b11      	ldr	r3, [pc, #68]	; (8022a30 <USBD_LL_Init+0x94>)
 80229ea:	2200      	movs	r2, #0
 80229ec:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 80229ee:	4b10      	ldr	r3, [pc, #64]	; (8022a30 <USBD_LL_Init+0x94>)
 80229f0:	2200      	movs	r2, #0
 80229f2:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80229f4:	4b0e      	ldr	r3, [pc, #56]	; (8022a30 <USBD_LL_Init+0x94>)
 80229f6:	2200      	movs	r2, #0
 80229f8:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80229fa:	480d      	ldr	r0, [pc, #52]	; (8022a30 <USBD_LL_Init+0x94>)
 80229fc:	f7f7 fa15 	bl	8019e2a <HAL_PCD_Init>
 8022a00:	4603      	mov	r3, r0
 8022a02:	2b00      	cmp	r3, #0
 8022a04:	d001      	beq.n	8022a0a <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8022a06:	f7f5 fa85 	bl	8017f14 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8022a0a:	2180      	movs	r1, #128	; 0x80
 8022a0c:	4808      	ldr	r0, [pc, #32]	; (8022a30 <USBD_LL_Init+0x94>)
 8022a0e:	f7f8 fbd4 	bl	801b1ba <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8022a12:	2240      	movs	r2, #64	; 0x40
 8022a14:	2100      	movs	r1, #0
 8022a16:	4806      	ldr	r0, [pc, #24]	; (8022a30 <USBD_LL_Init+0x94>)
 8022a18:	f7f8 fb88 	bl	801b12c <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8022a1c:	2280      	movs	r2, #128	; 0x80
 8022a1e:	2101      	movs	r1, #1
 8022a20:	4803      	ldr	r0, [pc, #12]	; (8022a30 <USBD_LL_Init+0x94>)
 8022a22:	f7f8 fb83 	bl	801b12c <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8022a26:	2300      	movs	r3, #0
}
 8022a28:	4618      	mov	r0, r3
 8022a2a:	3708      	adds	r7, #8
 8022a2c:	46bd      	mov	sp, r7
 8022a2e:	bd80      	pop	{r7, pc}
 8022a30:	20007118 	.word	0x20007118

08022a34 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8022a34:	b580      	push	{r7, lr}
 8022a36:	b084      	sub	sp, #16
 8022a38:	af00      	add	r7, sp, #0
 8022a3a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8022a3c:	2300      	movs	r3, #0
 8022a3e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8022a40:	2300      	movs	r3, #0
 8022a42:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8022a44:	687b      	ldr	r3, [r7, #4]
 8022a46:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8022a4a:	4618      	mov	r0, r3
 8022a4c:	f7f7 fb11 	bl	801a072 <HAL_PCD_Start>
 8022a50:	4603      	mov	r3, r0
 8022a52:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8022a54:	7bfb      	ldrb	r3, [r7, #15]
 8022a56:	4618      	mov	r0, r3
 8022a58:	f000 f9b0 	bl	8022dbc <USBD_Get_USB_Status>
 8022a5c:	4603      	mov	r3, r0
 8022a5e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8022a60:	7bbb      	ldrb	r3, [r7, #14]
}
 8022a62:	4618      	mov	r0, r3
 8022a64:	3710      	adds	r7, #16
 8022a66:	46bd      	mov	sp, r7
 8022a68:	bd80      	pop	{r7, pc}

08022a6a <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8022a6a:	b580      	push	{r7, lr}
 8022a6c:	b084      	sub	sp, #16
 8022a6e:	af00      	add	r7, sp, #0
 8022a70:	6078      	str	r0, [r7, #4]
 8022a72:	4608      	mov	r0, r1
 8022a74:	4611      	mov	r1, r2
 8022a76:	461a      	mov	r2, r3
 8022a78:	4603      	mov	r3, r0
 8022a7a:	70fb      	strb	r3, [r7, #3]
 8022a7c:	460b      	mov	r3, r1
 8022a7e:	70bb      	strb	r3, [r7, #2]
 8022a80:	4613      	mov	r3, r2
 8022a82:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8022a84:	2300      	movs	r3, #0
 8022a86:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8022a88:	2300      	movs	r3, #0
 8022a8a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8022a8c:	687b      	ldr	r3, [r7, #4]
 8022a8e:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8022a92:	78bb      	ldrb	r3, [r7, #2]
 8022a94:	883a      	ldrh	r2, [r7, #0]
 8022a96:	78f9      	ldrb	r1, [r7, #3]
 8022a98:	f7f7 ff22 	bl	801a8e0 <HAL_PCD_EP_Open>
 8022a9c:	4603      	mov	r3, r0
 8022a9e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8022aa0:	7bfb      	ldrb	r3, [r7, #15]
 8022aa2:	4618      	mov	r0, r3
 8022aa4:	f000 f98a 	bl	8022dbc <USBD_Get_USB_Status>
 8022aa8:	4603      	mov	r3, r0
 8022aaa:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8022aac:	7bbb      	ldrb	r3, [r7, #14]
}
 8022aae:	4618      	mov	r0, r3
 8022ab0:	3710      	adds	r7, #16
 8022ab2:	46bd      	mov	sp, r7
 8022ab4:	bd80      	pop	{r7, pc}

08022ab6 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8022ab6:	b580      	push	{r7, lr}
 8022ab8:	b084      	sub	sp, #16
 8022aba:	af00      	add	r7, sp, #0
 8022abc:	6078      	str	r0, [r7, #4]
 8022abe:	460b      	mov	r3, r1
 8022ac0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8022ac2:	2300      	movs	r3, #0
 8022ac4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8022ac6:	2300      	movs	r3, #0
 8022ac8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8022aca:	687b      	ldr	r3, [r7, #4]
 8022acc:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8022ad0:	78fa      	ldrb	r2, [r7, #3]
 8022ad2:	4611      	mov	r1, r2
 8022ad4:	4618      	mov	r0, r3
 8022ad6:	f7f7 ff6b 	bl	801a9b0 <HAL_PCD_EP_Close>
 8022ada:	4603      	mov	r3, r0
 8022adc:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8022ade:	7bfb      	ldrb	r3, [r7, #15]
 8022ae0:	4618      	mov	r0, r3
 8022ae2:	f000 f96b 	bl	8022dbc <USBD_Get_USB_Status>
 8022ae6:	4603      	mov	r3, r0
 8022ae8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8022aea:	7bbb      	ldrb	r3, [r7, #14]
}
 8022aec:	4618      	mov	r0, r3
 8022aee:	3710      	adds	r7, #16
 8022af0:	46bd      	mov	sp, r7
 8022af2:	bd80      	pop	{r7, pc}

08022af4 <USBD_LL_FlushEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_FlushEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8022af4:	b580      	push	{r7, lr}
 8022af6:	b084      	sub	sp, #16
 8022af8:	af00      	add	r7, sp, #0
 8022afa:	6078      	str	r0, [r7, #4]
 8022afc:	460b      	mov	r3, r1
 8022afe:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8022b00:	2300      	movs	r3, #0
 8022b02:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8022b04:	2300      	movs	r3, #0
 8022b06:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Flush(pdev->pData, ep_addr);
 8022b08:	687b      	ldr	r3, [r7, #4]
 8022b0a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8022b0e:	78fa      	ldrb	r2, [r7, #3]
 8022b10:	4611      	mov	r1, r2
 8022b12:	4618      	mov	r0, r3
 8022b14:	f7f8 f8fd 	bl	801ad12 <HAL_PCD_EP_Flush>
 8022b18:	4603      	mov	r3, r0
 8022b1a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8022b1c:	7bfb      	ldrb	r3, [r7, #15]
 8022b1e:	4618      	mov	r0, r3
 8022b20:	f000 f94c 	bl	8022dbc <USBD_Get_USB_Status>
 8022b24:	4603      	mov	r3, r0
 8022b26:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8022b28:	7bbb      	ldrb	r3, [r7, #14]
}
 8022b2a:	4618      	mov	r0, r3
 8022b2c:	3710      	adds	r7, #16
 8022b2e:	46bd      	mov	sp, r7
 8022b30:	bd80      	pop	{r7, pc}

08022b32 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8022b32:	b580      	push	{r7, lr}
 8022b34:	b084      	sub	sp, #16
 8022b36:	af00      	add	r7, sp, #0
 8022b38:	6078      	str	r0, [r7, #4]
 8022b3a:	460b      	mov	r3, r1
 8022b3c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8022b3e:	2300      	movs	r3, #0
 8022b40:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8022b42:	2300      	movs	r3, #0
 8022b44:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8022b46:	687b      	ldr	r3, [r7, #4]
 8022b48:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8022b4c:	78fa      	ldrb	r2, [r7, #3]
 8022b4e:	4611      	mov	r1, r2
 8022b50:	4618      	mov	r0, r3
 8022b52:	f7f8 f824 	bl	801ab9e <HAL_PCD_EP_SetStall>
 8022b56:	4603      	mov	r3, r0
 8022b58:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8022b5a:	7bfb      	ldrb	r3, [r7, #15]
 8022b5c:	4618      	mov	r0, r3
 8022b5e:	f000 f92d 	bl	8022dbc <USBD_Get_USB_Status>
 8022b62:	4603      	mov	r3, r0
 8022b64:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8022b66:	7bbb      	ldrb	r3, [r7, #14]
}
 8022b68:	4618      	mov	r0, r3
 8022b6a:	3710      	adds	r7, #16
 8022b6c:	46bd      	mov	sp, r7
 8022b6e:	bd80      	pop	{r7, pc}

08022b70 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8022b70:	b580      	push	{r7, lr}
 8022b72:	b084      	sub	sp, #16
 8022b74:	af00      	add	r7, sp, #0
 8022b76:	6078      	str	r0, [r7, #4]
 8022b78:	460b      	mov	r3, r1
 8022b7a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8022b7c:	2300      	movs	r3, #0
 8022b7e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8022b80:	2300      	movs	r3, #0
 8022b82:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8022b84:	687b      	ldr	r3, [r7, #4]
 8022b86:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8022b8a:	78fa      	ldrb	r2, [r7, #3]
 8022b8c:	4611      	mov	r1, r2
 8022b8e:	4618      	mov	r0, r3
 8022b90:	f7f8 f869 	bl	801ac66 <HAL_PCD_EP_ClrStall>
 8022b94:	4603      	mov	r3, r0
 8022b96:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8022b98:	7bfb      	ldrb	r3, [r7, #15]
 8022b9a:	4618      	mov	r0, r3
 8022b9c:	f000 f90e 	bl	8022dbc <USBD_Get_USB_Status>
 8022ba0:	4603      	mov	r3, r0
 8022ba2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8022ba4:	7bbb      	ldrb	r3, [r7, #14]
}
 8022ba6:	4618      	mov	r0, r3
 8022ba8:	3710      	adds	r7, #16
 8022baa:	46bd      	mov	sp, r7
 8022bac:	bd80      	pop	{r7, pc}

08022bae <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8022bae:	b480      	push	{r7}
 8022bb0:	b085      	sub	sp, #20
 8022bb2:	af00      	add	r7, sp, #0
 8022bb4:	6078      	str	r0, [r7, #4]
 8022bb6:	460b      	mov	r3, r1
 8022bb8:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8022bba:	687b      	ldr	r3, [r7, #4]
 8022bbc:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8022bc0:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8022bc2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8022bc6:	2b00      	cmp	r3, #0
 8022bc8:	da0b      	bge.n	8022be2 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8022bca:	78fb      	ldrb	r3, [r7, #3]
 8022bcc:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8022bd0:	68f9      	ldr	r1, [r7, #12]
 8022bd2:	4613      	mov	r3, r2
 8022bd4:	00db      	lsls	r3, r3, #3
 8022bd6:	1a9b      	subs	r3, r3, r2
 8022bd8:	009b      	lsls	r3, r3, #2
 8022bda:	440b      	add	r3, r1
 8022bdc:	333e      	adds	r3, #62	; 0x3e
 8022bde:	781b      	ldrb	r3, [r3, #0]
 8022be0:	e00b      	b.n	8022bfa <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8022be2:	78fb      	ldrb	r3, [r7, #3]
 8022be4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8022be8:	68f9      	ldr	r1, [r7, #12]
 8022bea:	4613      	mov	r3, r2
 8022bec:	00db      	lsls	r3, r3, #3
 8022bee:	1a9b      	subs	r3, r3, r2
 8022bf0:	009b      	lsls	r3, r3, #2
 8022bf2:	440b      	add	r3, r1
 8022bf4:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8022bf8:	781b      	ldrb	r3, [r3, #0]
  }
}
 8022bfa:	4618      	mov	r0, r3
 8022bfc:	3714      	adds	r7, #20
 8022bfe:	46bd      	mov	sp, r7
 8022c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022c04:	4770      	bx	lr

08022c06 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8022c06:	b580      	push	{r7, lr}
 8022c08:	b084      	sub	sp, #16
 8022c0a:	af00      	add	r7, sp, #0
 8022c0c:	6078      	str	r0, [r7, #4]
 8022c0e:	460b      	mov	r3, r1
 8022c10:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8022c12:	2300      	movs	r3, #0
 8022c14:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8022c16:	2300      	movs	r3, #0
 8022c18:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8022c1a:	687b      	ldr	r3, [r7, #4]
 8022c1c:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8022c20:	78fa      	ldrb	r2, [r7, #3]
 8022c22:	4611      	mov	r1, r2
 8022c24:	4618      	mov	r0, r3
 8022c26:	f7f7 fe36 	bl	801a896 <HAL_PCD_SetAddress>
 8022c2a:	4603      	mov	r3, r0
 8022c2c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8022c2e:	7bfb      	ldrb	r3, [r7, #15]
 8022c30:	4618      	mov	r0, r3
 8022c32:	f000 f8c3 	bl	8022dbc <USBD_Get_USB_Status>
 8022c36:	4603      	mov	r3, r0
 8022c38:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8022c3a:	7bbb      	ldrb	r3, [r7, #14]
}
 8022c3c:	4618      	mov	r0, r3
 8022c3e:	3710      	adds	r7, #16
 8022c40:	46bd      	mov	sp, r7
 8022c42:	bd80      	pop	{r7, pc}

08022c44 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8022c44:	b580      	push	{r7, lr}
 8022c46:	b086      	sub	sp, #24
 8022c48:	af00      	add	r7, sp, #0
 8022c4a:	60f8      	str	r0, [r7, #12]
 8022c4c:	607a      	str	r2, [r7, #4]
 8022c4e:	603b      	str	r3, [r7, #0]
 8022c50:	460b      	mov	r3, r1
 8022c52:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8022c54:	2300      	movs	r3, #0
 8022c56:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8022c58:	2300      	movs	r3, #0
 8022c5a:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8022c5c:	68fb      	ldr	r3, [r7, #12]
 8022c5e:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8022c62:	7af9      	ldrb	r1, [r7, #11]
 8022c64:	683b      	ldr	r3, [r7, #0]
 8022c66:	687a      	ldr	r2, [r7, #4]
 8022c68:	f7f7 ff4f 	bl	801ab0a <HAL_PCD_EP_Transmit>
 8022c6c:	4603      	mov	r3, r0
 8022c6e:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8022c70:	7dfb      	ldrb	r3, [r7, #23]
 8022c72:	4618      	mov	r0, r3
 8022c74:	f000 f8a2 	bl	8022dbc <USBD_Get_USB_Status>
 8022c78:	4603      	mov	r3, r0
 8022c7a:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8022c7c:	7dbb      	ldrb	r3, [r7, #22]
}
 8022c7e:	4618      	mov	r0, r3
 8022c80:	3718      	adds	r7, #24
 8022c82:	46bd      	mov	sp, r7
 8022c84:	bd80      	pop	{r7, pc}

08022c86 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8022c86:	b580      	push	{r7, lr}
 8022c88:	b086      	sub	sp, #24
 8022c8a:	af00      	add	r7, sp, #0
 8022c8c:	60f8      	str	r0, [r7, #12]
 8022c8e:	607a      	str	r2, [r7, #4]
 8022c90:	603b      	str	r3, [r7, #0]
 8022c92:	460b      	mov	r3, r1
 8022c94:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8022c96:	2300      	movs	r3, #0
 8022c98:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8022c9a:	2300      	movs	r3, #0
 8022c9c:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8022c9e:	68fb      	ldr	r3, [r7, #12]
 8022ca0:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8022ca4:	7af9      	ldrb	r1, [r7, #11]
 8022ca6:	683b      	ldr	r3, [r7, #0]
 8022ca8:	687a      	ldr	r2, [r7, #4]
 8022caa:	f7f7 fecb 	bl	801aa44 <HAL_PCD_EP_Receive>
 8022cae:	4603      	mov	r3, r0
 8022cb0:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8022cb2:	7dfb      	ldrb	r3, [r7, #23]
 8022cb4:	4618      	mov	r0, r3
 8022cb6:	f000 f881 	bl	8022dbc <USBD_Get_USB_Status>
 8022cba:	4603      	mov	r3, r0
 8022cbc:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8022cbe:	7dbb      	ldrb	r3, [r7, #22]
}
 8022cc0:	4618      	mov	r0, r3
 8022cc2:	3718      	adds	r7, #24
 8022cc4:	46bd      	mov	sp, r7
 8022cc6:	bd80      	pop	{r7, pc}

08022cc8 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8022cc8:	b580      	push	{r7, lr}
 8022cca:	b082      	sub	sp, #8
 8022ccc:	af00      	add	r7, sp, #0
 8022cce:	6078      	str	r0, [r7, #4]
 8022cd0:	460b      	mov	r3, r1
 8022cd2:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8022cd4:	687b      	ldr	r3, [r7, #4]
 8022cd6:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8022cda:	78fa      	ldrb	r2, [r7, #3]
 8022cdc:	4611      	mov	r1, r2
 8022cde:	4618      	mov	r0, r3
 8022ce0:	f7f7 fefb 	bl	801aada <HAL_PCD_EP_GetRxCount>
 8022ce4:	4603      	mov	r3, r0
}
 8022ce6:	4618      	mov	r0, r3
 8022ce8:	3708      	adds	r7, #8
 8022cea:	46bd      	mov	sp, r7
 8022cec:	bd80      	pop	{r7, pc}
	...

08022cf0 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8022cf0:	b580      	push	{r7, lr}
 8022cf2:	b082      	sub	sp, #8
 8022cf4:	af00      	add	r7, sp, #0
 8022cf6:	6078      	str	r0, [r7, #4]
 8022cf8:	460b      	mov	r3, r1
 8022cfa:	70fb      	strb	r3, [r7, #3]
  switch (msg)
 8022cfc:	78fb      	ldrb	r3, [r7, #3]
 8022cfe:	2b00      	cmp	r3, #0
 8022d00:	d002      	beq.n	8022d08 <HAL_PCDEx_LPM_Callback+0x18>
 8022d02:	2b01      	cmp	r3, #1
 8022d04:	d01f      	beq.n	8022d46 <HAL_PCDEx_LPM_Callback+0x56>
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
}
 8022d06:	e03b      	b.n	8022d80 <HAL_PCDEx_LPM_Callback+0x90>
    if (hpcd->Init.low_power_enable)
 8022d08:	687b      	ldr	r3, [r7, #4]
 8022d0a:	6a1b      	ldr	r3, [r3, #32]
 8022d0c:	2b00      	cmp	r3, #0
 8022d0e:	d007      	beq.n	8022d20 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClock_Config();
 8022d10:	f7f4 fc96 	bl	8017640 <SystemClock_Config>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8022d14:	4b1c      	ldr	r3, [pc, #112]	; (8022d88 <HAL_PCDEx_LPM_Callback+0x98>)
 8022d16:	691b      	ldr	r3, [r3, #16]
 8022d18:	4a1b      	ldr	r2, [pc, #108]	; (8022d88 <HAL_PCDEx_LPM_Callback+0x98>)
 8022d1a:	f023 0306 	bic.w	r3, r3, #6
 8022d1e:	6113      	str	r3, [r2, #16]
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 8022d20:	687b      	ldr	r3, [r7, #4]
 8022d22:	681b      	ldr	r3, [r3, #0]
 8022d24:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8022d28:	681b      	ldr	r3, [r3, #0]
 8022d2a:	687a      	ldr	r2, [r7, #4]
 8022d2c:	6812      	ldr	r2, [r2, #0]
 8022d2e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8022d32:	f023 0301 	bic.w	r3, r3, #1
 8022d36:	6013      	str	r3, [r2, #0]
    USBD_LL_Resume(hpcd->pData);
 8022d38:	687b      	ldr	r3, [r7, #4]
 8022d3a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8022d3e:	4618      	mov	r0, r3
 8022d40:	f7fe fbf3 	bl	802152a <USBD_LL_Resume>
    break;
 8022d44:	e01c      	b.n	8022d80 <HAL_PCDEx_LPM_Callback+0x90>
    __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8022d46:	687b      	ldr	r3, [r7, #4]
 8022d48:	681b      	ldr	r3, [r3, #0]
 8022d4a:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8022d4e:	681b      	ldr	r3, [r3, #0]
 8022d50:	687a      	ldr	r2, [r7, #4]
 8022d52:	6812      	ldr	r2, [r2, #0]
 8022d54:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8022d58:	f043 0301 	orr.w	r3, r3, #1
 8022d5c:	6013      	str	r3, [r2, #0]
    USBD_LL_Suspend(hpcd->pData);
 8022d5e:	687b      	ldr	r3, [r7, #4]
 8022d60:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8022d64:	4618      	mov	r0, r3
 8022d66:	f7fe fbca 	bl	80214fe <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 8022d6a:	687b      	ldr	r3, [r7, #4]
 8022d6c:	6a1b      	ldr	r3, [r3, #32]
 8022d6e:	2b00      	cmp	r3, #0
 8022d70:	d005      	beq.n	8022d7e <HAL_PCDEx_LPM_Callback+0x8e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8022d72:	4b05      	ldr	r3, [pc, #20]	; (8022d88 <HAL_PCDEx_LPM_Callback+0x98>)
 8022d74:	691b      	ldr	r3, [r3, #16]
 8022d76:	4a04      	ldr	r2, [pc, #16]	; (8022d88 <HAL_PCDEx_LPM_Callback+0x98>)
 8022d78:	f043 0306 	orr.w	r3, r3, #6
 8022d7c:	6113      	str	r3, [r2, #16]
    break;
 8022d7e:	bf00      	nop
}
 8022d80:	bf00      	nop
 8022d82:	3708      	adds	r7, #8
 8022d84:	46bd      	mov	sp, r7
 8022d86:	bd80      	pop	{r7, pc}
 8022d88:	e000ed00 	.word	0xe000ed00

08022d8c <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8022d8c:	b480      	push	{r7}
 8022d8e:	b083      	sub	sp, #12
 8022d90:	af00      	add	r7, sp, #0
 8022d92:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_MSC_BOT_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8022d94:	4b03      	ldr	r3, [pc, #12]	; (8022da4 <USBD_static_malloc+0x18>)
}
 8022d96:	4618      	mov	r0, r3
 8022d98:	370c      	adds	r7, #12
 8022d9a:	46bd      	mov	sp, r7
 8022d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022da0:	4770      	bx	lr
 8022da2:	bf00      	nop
 8022da4:	200007b8 	.word	0x200007b8

08022da8 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8022da8:	b480      	push	{r7}
 8022daa:	b083      	sub	sp, #12
 8022dac:	af00      	add	r7, sp, #0
 8022dae:	6078      	str	r0, [r7, #4]

}
 8022db0:	bf00      	nop
 8022db2:	370c      	adds	r7, #12
 8022db4:	46bd      	mov	sp, r7
 8022db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022dba:	4770      	bx	lr

08022dbc <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8022dbc:	b480      	push	{r7}
 8022dbe:	b085      	sub	sp, #20
 8022dc0:	af00      	add	r7, sp, #0
 8022dc2:	4603      	mov	r3, r0
 8022dc4:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8022dc6:	2300      	movs	r3, #0
 8022dc8:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8022dca:	79fb      	ldrb	r3, [r7, #7]
 8022dcc:	2b03      	cmp	r3, #3
 8022dce:	d817      	bhi.n	8022e00 <USBD_Get_USB_Status+0x44>
 8022dd0:	a201      	add	r2, pc, #4	; (adr r2, 8022dd8 <USBD_Get_USB_Status+0x1c>)
 8022dd2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8022dd6:	bf00      	nop
 8022dd8:	08022de9 	.word	0x08022de9
 8022ddc:	08022def 	.word	0x08022def
 8022de0:	08022df5 	.word	0x08022df5
 8022de4:	08022dfb 	.word	0x08022dfb
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8022de8:	2300      	movs	r3, #0
 8022dea:	73fb      	strb	r3, [r7, #15]
    break;
 8022dec:	e00b      	b.n	8022e06 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8022dee:	2303      	movs	r3, #3
 8022df0:	73fb      	strb	r3, [r7, #15]
    break;
 8022df2:	e008      	b.n	8022e06 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8022df4:	2301      	movs	r3, #1
 8022df6:	73fb      	strb	r3, [r7, #15]
    break;
 8022df8:	e005      	b.n	8022e06 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8022dfa:	2303      	movs	r3, #3
 8022dfc:	73fb      	strb	r3, [r7, #15]
    break;
 8022dfe:	e002      	b.n	8022e06 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8022e00:	2303      	movs	r3, #3
 8022e02:	73fb      	strb	r3, [r7, #15]
    break;
 8022e04:	bf00      	nop
  }
  return usb_status;
 8022e06:	7bfb      	ldrb	r3, [r7, #15]
}
 8022e08:	4618      	mov	r0, r3
 8022e0a:	3714      	adds	r7, #20
 8022e0c:	46bd      	mov	sp, r7
 8022e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022e12:	4770      	bx	lr

08022e14 <__errno>:
 8022e14:	4b01      	ldr	r3, [pc, #4]	; (8022e1c <__errno+0x8>)
 8022e16:	6818      	ldr	r0, [r3, #0]
 8022e18:	4770      	bx	lr
 8022e1a:	bf00      	nop
 8022e1c:	20000700 	.word	0x20000700

08022e20 <__libc_init_array>:
 8022e20:	b570      	push	{r4, r5, r6, lr}
 8022e22:	4d0d      	ldr	r5, [pc, #52]	; (8022e58 <__libc_init_array+0x38>)
 8022e24:	4c0d      	ldr	r4, [pc, #52]	; (8022e5c <__libc_init_array+0x3c>)
 8022e26:	1b64      	subs	r4, r4, r5
 8022e28:	10a4      	asrs	r4, r4, #2
 8022e2a:	2600      	movs	r6, #0
 8022e2c:	42a6      	cmp	r6, r4
 8022e2e:	d109      	bne.n	8022e44 <__libc_init_array+0x24>
 8022e30:	4d0b      	ldr	r5, [pc, #44]	; (8022e60 <__libc_init_array+0x40>)
 8022e32:	4c0c      	ldr	r4, [pc, #48]	; (8022e64 <__libc_init_array+0x44>)
 8022e34:	f000 f906 	bl	8023044 <_init>
 8022e38:	1b64      	subs	r4, r4, r5
 8022e3a:	10a4      	asrs	r4, r4, #2
 8022e3c:	2600      	movs	r6, #0
 8022e3e:	42a6      	cmp	r6, r4
 8022e40:	d105      	bne.n	8022e4e <__libc_init_array+0x2e>
 8022e42:	bd70      	pop	{r4, r5, r6, pc}
 8022e44:	f855 3b04 	ldr.w	r3, [r5], #4
 8022e48:	4798      	blx	r3
 8022e4a:	3601      	adds	r6, #1
 8022e4c:	e7ee      	b.n	8022e2c <__libc_init_array+0xc>
 8022e4e:	f855 3b04 	ldr.w	r3, [r5], #4
 8022e52:	4798      	blx	r3
 8022e54:	3601      	adds	r6, #1
 8022e56:	e7f2      	b.n	8022e3e <__libc_init_array+0x1e>
 8022e58:	08023064 	.word	0x08023064
 8022e5c:	08023064 	.word	0x08023064
 8022e60:	08023064 	.word	0x08023064
 8022e64:	08023068 	.word	0x08023068

08022e68 <malloc>:
 8022e68:	4b02      	ldr	r3, [pc, #8]	; (8022e74 <malloc+0xc>)
 8022e6a:	4601      	mov	r1, r0
 8022e6c:	6818      	ldr	r0, [r3, #0]
 8022e6e:	f000 b871 	b.w	8022f54 <_malloc_r>
 8022e72:	bf00      	nop
 8022e74:	20000700 	.word	0x20000700

08022e78 <free>:
 8022e78:	4b02      	ldr	r3, [pc, #8]	; (8022e84 <free+0xc>)
 8022e7a:	4601      	mov	r1, r0
 8022e7c:	6818      	ldr	r0, [r3, #0]
 8022e7e:	f000 b819 	b.w	8022eb4 <_free_r>
 8022e82:	bf00      	nop
 8022e84:	20000700 	.word	0x20000700

08022e88 <memcpy>:
 8022e88:	440a      	add	r2, r1
 8022e8a:	4291      	cmp	r1, r2
 8022e8c:	f100 33ff 	add.w	r3, r0, #4294967295
 8022e90:	d100      	bne.n	8022e94 <memcpy+0xc>
 8022e92:	4770      	bx	lr
 8022e94:	b510      	push	{r4, lr}
 8022e96:	f811 4b01 	ldrb.w	r4, [r1], #1
 8022e9a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8022e9e:	4291      	cmp	r1, r2
 8022ea0:	d1f9      	bne.n	8022e96 <memcpy+0xe>
 8022ea2:	bd10      	pop	{r4, pc}

08022ea4 <memset>:
 8022ea4:	4402      	add	r2, r0
 8022ea6:	4603      	mov	r3, r0
 8022ea8:	4293      	cmp	r3, r2
 8022eaa:	d100      	bne.n	8022eae <memset+0xa>
 8022eac:	4770      	bx	lr
 8022eae:	f803 1b01 	strb.w	r1, [r3], #1
 8022eb2:	e7f9      	b.n	8022ea8 <memset+0x4>

08022eb4 <_free_r>:
 8022eb4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8022eb6:	2900      	cmp	r1, #0
 8022eb8:	d048      	beq.n	8022f4c <_free_r+0x98>
 8022eba:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8022ebe:	9001      	str	r0, [sp, #4]
 8022ec0:	2b00      	cmp	r3, #0
 8022ec2:	f1a1 0404 	sub.w	r4, r1, #4
 8022ec6:	bfb8      	it	lt
 8022ec8:	18e4      	addlt	r4, r4, r3
 8022eca:	f000 f8ad 	bl	8023028 <__malloc_lock>
 8022ece:	4a20      	ldr	r2, [pc, #128]	; (8022f50 <_free_r+0x9c>)
 8022ed0:	9801      	ldr	r0, [sp, #4]
 8022ed2:	6813      	ldr	r3, [r2, #0]
 8022ed4:	4615      	mov	r5, r2
 8022ed6:	b933      	cbnz	r3, 8022ee6 <_free_r+0x32>
 8022ed8:	6063      	str	r3, [r4, #4]
 8022eda:	6014      	str	r4, [r2, #0]
 8022edc:	b003      	add	sp, #12
 8022ede:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8022ee2:	f000 b8a7 	b.w	8023034 <__malloc_unlock>
 8022ee6:	42a3      	cmp	r3, r4
 8022ee8:	d90b      	bls.n	8022f02 <_free_r+0x4e>
 8022eea:	6821      	ldr	r1, [r4, #0]
 8022eec:	1862      	adds	r2, r4, r1
 8022eee:	4293      	cmp	r3, r2
 8022ef0:	bf04      	itt	eq
 8022ef2:	681a      	ldreq	r2, [r3, #0]
 8022ef4:	685b      	ldreq	r3, [r3, #4]
 8022ef6:	6063      	str	r3, [r4, #4]
 8022ef8:	bf04      	itt	eq
 8022efa:	1852      	addeq	r2, r2, r1
 8022efc:	6022      	streq	r2, [r4, #0]
 8022efe:	602c      	str	r4, [r5, #0]
 8022f00:	e7ec      	b.n	8022edc <_free_r+0x28>
 8022f02:	461a      	mov	r2, r3
 8022f04:	685b      	ldr	r3, [r3, #4]
 8022f06:	b10b      	cbz	r3, 8022f0c <_free_r+0x58>
 8022f08:	42a3      	cmp	r3, r4
 8022f0a:	d9fa      	bls.n	8022f02 <_free_r+0x4e>
 8022f0c:	6811      	ldr	r1, [r2, #0]
 8022f0e:	1855      	adds	r5, r2, r1
 8022f10:	42a5      	cmp	r5, r4
 8022f12:	d10b      	bne.n	8022f2c <_free_r+0x78>
 8022f14:	6824      	ldr	r4, [r4, #0]
 8022f16:	4421      	add	r1, r4
 8022f18:	1854      	adds	r4, r2, r1
 8022f1a:	42a3      	cmp	r3, r4
 8022f1c:	6011      	str	r1, [r2, #0]
 8022f1e:	d1dd      	bne.n	8022edc <_free_r+0x28>
 8022f20:	681c      	ldr	r4, [r3, #0]
 8022f22:	685b      	ldr	r3, [r3, #4]
 8022f24:	6053      	str	r3, [r2, #4]
 8022f26:	4421      	add	r1, r4
 8022f28:	6011      	str	r1, [r2, #0]
 8022f2a:	e7d7      	b.n	8022edc <_free_r+0x28>
 8022f2c:	d902      	bls.n	8022f34 <_free_r+0x80>
 8022f2e:	230c      	movs	r3, #12
 8022f30:	6003      	str	r3, [r0, #0]
 8022f32:	e7d3      	b.n	8022edc <_free_r+0x28>
 8022f34:	6825      	ldr	r5, [r4, #0]
 8022f36:	1961      	adds	r1, r4, r5
 8022f38:	428b      	cmp	r3, r1
 8022f3a:	bf04      	itt	eq
 8022f3c:	6819      	ldreq	r1, [r3, #0]
 8022f3e:	685b      	ldreq	r3, [r3, #4]
 8022f40:	6063      	str	r3, [r4, #4]
 8022f42:	bf04      	itt	eq
 8022f44:	1949      	addeq	r1, r1, r5
 8022f46:	6021      	streq	r1, [r4, #0]
 8022f48:	6054      	str	r4, [r2, #4]
 8022f4a:	e7c7      	b.n	8022edc <_free_r+0x28>
 8022f4c:	b003      	add	sp, #12
 8022f4e:	bd30      	pop	{r4, r5, pc}
 8022f50:	20000a30 	.word	0x20000a30

08022f54 <_malloc_r>:
 8022f54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8022f56:	1ccd      	adds	r5, r1, #3
 8022f58:	f025 0503 	bic.w	r5, r5, #3
 8022f5c:	3508      	adds	r5, #8
 8022f5e:	2d0c      	cmp	r5, #12
 8022f60:	bf38      	it	cc
 8022f62:	250c      	movcc	r5, #12
 8022f64:	2d00      	cmp	r5, #0
 8022f66:	4606      	mov	r6, r0
 8022f68:	db01      	blt.n	8022f6e <_malloc_r+0x1a>
 8022f6a:	42a9      	cmp	r1, r5
 8022f6c:	d903      	bls.n	8022f76 <_malloc_r+0x22>
 8022f6e:	230c      	movs	r3, #12
 8022f70:	6033      	str	r3, [r6, #0]
 8022f72:	2000      	movs	r0, #0
 8022f74:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8022f76:	f000 f857 	bl	8023028 <__malloc_lock>
 8022f7a:	4921      	ldr	r1, [pc, #132]	; (8023000 <_malloc_r+0xac>)
 8022f7c:	680a      	ldr	r2, [r1, #0]
 8022f7e:	4614      	mov	r4, r2
 8022f80:	b99c      	cbnz	r4, 8022faa <_malloc_r+0x56>
 8022f82:	4f20      	ldr	r7, [pc, #128]	; (8023004 <_malloc_r+0xb0>)
 8022f84:	683b      	ldr	r3, [r7, #0]
 8022f86:	b923      	cbnz	r3, 8022f92 <_malloc_r+0x3e>
 8022f88:	4621      	mov	r1, r4
 8022f8a:	4630      	mov	r0, r6
 8022f8c:	f000 f83c 	bl	8023008 <_sbrk_r>
 8022f90:	6038      	str	r0, [r7, #0]
 8022f92:	4629      	mov	r1, r5
 8022f94:	4630      	mov	r0, r6
 8022f96:	f000 f837 	bl	8023008 <_sbrk_r>
 8022f9a:	1c43      	adds	r3, r0, #1
 8022f9c:	d123      	bne.n	8022fe6 <_malloc_r+0x92>
 8022f9e:	230c      	movs	r3, #12
 8022fa0:	6033      	str	r3, [r6, #0]
 8022fa2:	4630      	mov	r0, r6
 8022fa4:	f000 f846 	bl	8023034 <__malloc_unlock>
 8022fa8:	e7e3      	b.n	8022f72 <_malloc_r+0x1e>
 8022faa:	6823      	ldr	r3, [r4, #0]
 8022fac:	1b5b      	subs	r3, r3, r5
 8022fae:	d417      	bmi.n	8022fe0 <_malloc_r+0x8c>
 8022fb0:	2b0b      	cmp	r3, #11
 8022fb2:	d903      	bls.n	8022fbc <_malloc_r+0x68>
 8022fb4:	6023      	str	r3, [r4, #0]
 8022fb6:	441c      	add	r4, r3
 8022fb8:	6025      	str	r5, [r4, #0]
 8022fba:	e004      	b.n	8022fc6 <_malloc_r+0x72>
 8022fbc:	6863      	ldr	r3, [r4, #4]
 8022fbe:	42a2      	cmp	r2, r4
 8022fc0:	bf0c      	ite	eq
 8022fc2:	600b      	streq	r3, [r1, #0]
 8022fc4:	6053      	strne	r3, [r2, #4]
 8022fc6:	4630      	mov	r0, r6
 8022fc8:	f000 f834 	bl	8023034 <__malloc_unlock>
 8022fcc:	f104 000b 	add.w	r0, r4, #11
 8022fd0:	1d23      	adds	r3, r4, #4
 8022fd2:	f020 0007 	bic.w	r0, r0, #7
 8022fd6:	1ac2      	subs	r2, r0, r3
 8022fd8:	d0cc      	beq.n	8022f74 <_malloc_r+0x20>
 8022fda:	1a1b      	subs	r3, r3, r0
 8022fdc:	50a3      	str	r3, [r4, r2]
 8022fde:	e7c9      	b.n	8022f74 <_malloc_r+0x20>
 8022fe0:	4622      	mov	r2, r4
 8022fe2:	6864      	ldr	r4, [r4, #4]
 8022fe4:	e7cc      	b.n	8022f80 <_malloc_r+0x2c>
 8022fe6:	1cc4      	adds	r4, r0, #3
 8022fe8:	f024 0403 	bic.w	r4, r4, #3
 8022fec:	42a0      	cmp	r0, r4
 8022fee:	d0e3      	beq.n	8022fb8 <_malloc_r+0x64>
 8022ff0:	1a21      	subs	r1, r4, r0
 8022ff2:	4630      	mov	r0, r6
 8022ff4:	f000 f808 	bl	8023008 <_sbrk_r>
 8022ff8:	3001      	adds	r0, #1
 8022ffa:	d1dd      	bne.n	8022fb8 <_malloc_r+0x64>
 8022ffc:	e7cf      	b.n	8022f9e <_malloc_r+0x4a>
 8022ffe:	bf00      	nop
 8023000:	20000a30 	.word	0x20000a30
 8023004:	20000a34 	.word	0x20000a34

08023008 <_sbrk_r>:
 8023008:	b538      	push	{r3, r4, r5, lr}
 802300a:	4d06      	ldr	r5, [pc, #24]	; (8023024 <_sbrk_r+0x1c>)
 802300c:	2300      	movs	r3, #0
 802300e:	4604      	mov	r4, r0
 8023010:	4608      	mov	r0, r1
 8023012:	602b      	str	r3, [r5, #0]
 8023014:	f7f5 fa2e 	bl	8018474 <_sbrk>
 8023018:	1c43      	adds	r3, r0, #1
 802301a:	d102      	bne.n	8023022 <_sbrk_r+0x1a>
 802301c:	682b      	ldr	r3, [r5, #0]
 802301e:	b103      	cbz	r3, 8023022 <_sbrk_r+0x1a>
 8023020:	6023      	str	r3, [r4, #0]
 8023022:	bd38      	pop	{r3, r4, r5, pc}
 8023024:	20007520 	.word	0x20007520

08023028 <__malloc_lock>:
 8023028:	4801      	ldr	r0, [pc, #4]	; (8023030 <__malloc_lock+0x8>)
 802302a:	f000 b809 	b.w	8023040 <__retarget_lock_acquire_recursive>
 802302e:	bf00      	nop
 8023030:	20007528 	.word	0x20007528

08023034 <__malloc_unlock>:
 8023034:	4801      	ldr	r0, [pc, #4]	; (802303c <__malloc_unlock+0x8>)
 8023036:	f000 b804 	b.w	8023042 <__retarget_lock_release_recursive>
 802303a:	bf00      	nop
 802303c:	20007528 	.word	0x20007528

08023040 <__retarget_lock_acquire_recursive>:
 8023040:	4770      	bx	lr

08023042 <__retarget_lock_release_recursive>:
 8023042:	4770      	bx	lr

08023044 <_init>:
 8023044:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8023046:	bf00      	nop
 8023048:	bcf8      	pop	{r3, r4, r5, r6, r7}
 802304a:	bc08      	pop	{r3}
 802304c:	469e      	mov	lr, r3
 802304e:	4770      	bx	lr

08023050 <_fini>:
 8023050:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8023052:	bf00      	nop
 8023054:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8023056:	bc08      	pop	{r3}
 8023058:	469e      	mov	lr, r3
 802305a:	4770      	bx	lr
