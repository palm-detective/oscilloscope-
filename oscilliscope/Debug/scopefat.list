
scopefat.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001a5ac  0800c000  0800c000  0001c000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002328  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080265ac  080265ac  00040754  2**0
                  CONTENTS
  4 .ARM          00000008  080265ac  080265ac  000365ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080265b4  080265b4  00040754  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080265b4  080265b4  000365b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080265b8  080265b8  000365b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000754  20000000  080265bc  00040000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000ac78  20000754  08026d10  00040754  2**2
                  ALLOC
 10 ._user_heap_stack 00003004  2000b3cc  08026d10  0004b3cc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00040754  2**0
                  CONTENTS, READONLY
 12 .debug_info   00046930  00000000  00000000  00040784  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000075ae  00000000  00000000  000870b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001f98  00000000  00000000  0008e668  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001c78  00000000  00000000  00090600  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002cba1  00000000  00000000  00092278  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002f60d  00000000  00000000  000bee19  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e7821  00000000  00000000  000ee426  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001d5c47  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000083e0  00000000  00000000  001d5c9c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800c000 <__do_global_dtors_aux>:
 800c000:	b510      	push	{r4, lr}
 800c002:	4c05      	ldr	r4, [pc, #20]	; (800c018 <__do_global_dtors_aux+0x18>)
 800c004:	7823      	ldrb	r3, [r4, #0]
 800c006:	b933      	cbnz	r3, 800c016 <__do_global_dtors_aux+0x16>
 800c008:	4b04      	ldr	r3, [pc, #16]	; (800c01c <__do_global_dtors_aux+0x1c>)
 800c00a:	b113      	cbz	r3, 800c012 <__do_global_dtors_aux+0x12>
 800c00c:	4804      	ldr	r0, [pc, #16]	; (800c020 <__do_global_dtors_aux+0x20>)
 800c00e:	f3af 8000 	nop.w
 800c012:	2301      	movs	r3, #1
 800c014:	7023      	strb	r3, [r4, #0]
 800c016:	bd10      	pop	{r4, pc}
 800c018:	20000754 	.word	0x20000754
 800c01c:	00000000 	.word	0x00000000
 800c020:	08026594 	.word	0x08026594

0800c024 <frame_dummy>:
 800c024:	b508      	push	{r3, lr}
 800c026:	4b03      	ldr	r3, [pc, #12]	; (800c034 <frame_dummy+0x10>)
 800c028:	b11b      	cbz	r3, 800c032 <frame_dummy+0xe>
 800c02a:	4903      	ldr	r1, [pc, #12]	; (800c038 <frame_dummy+0x14>)
 800c02c:	4803      	ldr	r0, [pc, #12]	; (800c03c <frame_dummy+0x18>)
 800c02e:	f3af 8000 	nop.w
 800c032:	bd08      	pop	{r3, pc}
 800c034:	00000000 	.word	0x00000000
 800c038:	20000758 	.word	0x20000758
 800c03c:	08026594 	.word	0x08026594

0800c040 <strlen>:
 800c040:	4603      	mov	r3, r0
 800c042:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c046:	2a00      	cmp	r2, #0
 800c048:	d1fb      	bne.n	800c042 <strlen+0x2>
 800c04a:	1a18      	subs	r0, r3, r0
 800c04c:	3801      	subs	r0, #1
 800c04e:	4770      	bx	lr

0800c050 <__aeabi_uldivmod>:
 800c050:	b953      	cbnz	r3, 800c068 <__aeabi_uldivmod+0x18>
 800c052:	b94a      	cbnz	r2, 800c068 <__aeabi_uldivmod+0x18>
 800c054:	2900      	cmp	r1, #0
 800c056:	bf08      	it	eq
 800c058:	2800      	cmpeq	r0, #0
 800c05a:	bf1c      	itt	ne
 800c05c:	f04f 31ff 	movne.w	r1, #4294967295
 800c060:	f04f 30ff 	movne.w	r0, #4294967295
 800c064:	f000 b96e 	b.w	800c344 <__aeabi_idiv0>
 800c068:	f1ad 0c08 	sub.w	ip, sp, #8
 800c06c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800c070:	f000 f806 	bl	800c080 <__udivmoddi4>
 800c074:	f8dd e004 	ldr.w	lr, [sp, #4]
 800c078:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800c07c:	b004      	add	sp, #16
 800c07e:	4770      	bx	lr

0800c080 <__udivmoddi4>:
 800c080:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c084:	9d08      	ldr	r5, [sp, #32]
 800c086:	4604      	mov	r4, r0
 800c088:	468c      	mov	ip, r1
 800c08a:	2b00      	cmp	r3, #0
 800c08c:	f040 8083 	bne.w	800c196 <__udivmoddi4+0x116>
 800c090:	428a      	cmp	r2, r1
 800c092:	4617      	mov	r7, r2
 800c094:	d947      	bls.n	800c126 <__udivmoddi4+0xa6>
 800c096:	fab2 f282 	clz	r2, r2
 800c09a:	b142      	cbz	r2, 800c0ae <__udivmoddi4+0x2e>
 800c09c:	f1c2 0020 	rsb	r0, r2, #32
 800c0a0:	fa24 f000 	lsr.w	r0, r4, r0
 800c0a4:	4091      	lsls	r1, r2
 800c0a6:	4097      	lsls	r7, r2
 800c0a8:	ea40 0c01 	orr.w	ip, r0, r1
 800c0ac:	4094      	lsls	r4, r2
 800c0ae:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800c0b2:	0c23      	lsrs	r3, r4, #16
 800c0b4:	fbbc f6f8 	udiv	r6, ip, r8
 800c0b8:	fa1f fe87 	uxth.w	lr, r7
 800c0bc:	fb08 c116 	mls	r1, r8, r6, ip
 800c0c0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800c0c4:	fb06 f10e 	mul.w	r1, r6, lr
 800c0c8:	4299      	cmp	r1, r3
 800c0ca:	d909      	bls.n	800c0e0 <__udivmoddi4+0x60>
 800c0cc:	18fb      	adds	r3, r7, r3
 800c0ce:	f106 30ff 	add.w	r0, r6, #4294967295
 800c0d2:	f080 8119 	bcs.w	800c308 <__udivmoddi4+0x288>
 800c0d6:	4299      	cmp	r1, r3
 800c0d8:	f240 8116 	bls.w	800c308 <__udivmoddi4+0x288>
 800c0dc:	3e02      	subs	r6, #2
 800c0de:	443b      	add	r3, r7
 800c0e0:	1a5b      	subs	r3, r3, r1
 800c0e2:	b2a4      	uxth	r4, r4
 800c0e4:	fbb3 f0f8 	udiv	r0, r3, r8
 800c0e8:	fb08 3310 	mls	r3, r8, r0, r3
 800c0ec:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800c0f0:	fb00 fe0e 	mul.w	lr, r0, lr
 800c0f4:	45a6      	cmp	lr, r4
 800c0f6:	d909      	bls.n	800c10c <__udivmoddi4+0x8c>
 800c0f8:	193c      	adds	r4, r7, r4
 800c0fa:	f100 33ff 	add.w	r3, r0, #4294967295
 800c0fe:	f080 8105 	bcs.w	800c30c <__udivmoddi4+0x28c>
 800c102:	45a6      	cmp	lr, r4
 800c104:	f240 8102 	bls.w	800c30c <__udivmoddi4+0x28c>
 800c108:	3802      	subs	r0, #2
 800c10a:	443c      	add	r4, r7
 800c10c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800c110:	eba4 040e 	sub.w	r4, r4, lr
 800c114:	2600      	movs	r6, #0
 800c116:	b11d      	cbz	r5, 800c120 <__udivmoddi4+0xa0>
 800c118:	40d4      	lsrs	r4, r2
 800c11a:	2300      	movs	r3, #0
 800c11c:	e9c5 4300 	strd	r4, r3, [r5]
 800c120:	4631      	mov	r1, r6
 800c122:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c126:	b902      	cbnz	r2, 800c12a <__udivmoddi4+0xaa>
 800c128:	deff      	udf	#255	; 0xff
 800c12a:	fab2 f282 	clz	r2, r2
 800c12e:	2a00      	cmp	r2, #0
 800c130:	d150      	bne.n	800c1d4 <__udivmoddi4+0x154>
 800c132:	1bcb      	subs	r3, r1, r7
 800c134:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800c138:	fa1f f887 	uxth.w	r8, r7
 800c13c:	2601      	movs	r6, #1
 800c13e:	fbb3 fcfe 	udiv	ip, r3, lr
 800c142:	0c21      	lsrs	r1, r4, #16
 800c144:	fb0e 331c 	mls	r3, lr, ip, r3
 800c148:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800c14c:	fb08 f30c 	mul.w	r3, r8, ip
 800c150:	428b      	cmp	r3, r1
 800c152:	d907      	bls.n	800c164 <__udivmoddi4+0xe4>
 800c154:	1879      	adds	r1, r7, r1
 800c156:	f10c 30ff 	add.w	r0, ip, #4294967295
 800c15a:	d202      	bcs.n	800c162 <__udivmoddi4+0xe2>
 800c15c:	428b      	cmp	r3, r1
 800c15e:	f200 80e9 	bhi.w	800c334 <__udivmoddi4+0x2b4>
 800c162:	4684      	mov	ip, r0
 800c164:	1ac9      	subs	r1, r1, r3
 800c166:	b2a3      	uxth	r3, r4
 800c168:	fbb1 f0fe 	udiv	r0, r1, lr
 800c16c:	fb0e 1110 	mls	r1, lr, r0, r1
 800c170:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 800c174:	fb08 f800 	mul.w	r8, r8, r0
 800c178:	45a0      	cmp	r8, r4
 800c17a:	d907      	bls.n	800c18c <__udivmoddi4+0x10c>
 800c17c:	193c      	adds	r4, r7, r4
 800c17e:	f100 33ff 	add.w	r3, r0, #4294967295
 800c182:	d202      	bcs.n	800c18a <__udivmoddi4+0x10a>
 800c184:	45a0      	cmp	r8, r4
 800c186:	f200 80d9 	bhi.w	800c33c <__udivmoddi4+0x2bc>
 800c18a:	4618      	mov	r0, r3
 800c18c:	eba4 0408 	sub.w	r4, r4, r8
 800c190:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800c194:	e7bf      	b.n	800c116 <__udivmoddi4+0x96>
 800c196:	428b      	cmp	r3, r1
 800c198:	d909      	bls.n	800c1ae <__udivmoddi4+0x12e>
 800c19a:	2d00      	cmp	r5, #0
 800c19c:	f000 80b1 	beq.w	800c302 <__udivmoddi4+0x282>
 800c1a0:	2600      	movs	r6, #0
 800c1a2:	e9c5 0100 	strd	r0, r1, [r5]
 800c1a6:	4630      	mov	r0, r6
 800c1a8:	4631      	mov	r1, r6
 800c1aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c1ae:	fab3 f683 	clz	r6, r3
 800c1b2:	2e00      	cmp	r6, #0
 800c1b4:	d14a      	bne.n	800c24c <__udivmoddi4+0x1cc>
 800c1b6:	428b      	cmp	r3, r1
 800c1b8:	d302      	bcc.n	800c1c0 <__udivmoddi4+0x140>
 800c1ba:	4282      	cmp	r2, r0
 800c1bc:	f200 80b8 	bhi.w	800c330 <__udivmoddi4+0x2b0>
 800c1c0:	1a84      	subs	r4, r0, r2
 800c1c2:	eb61 0103 	sbc.w	r1, r1, r3
 800c1c6:	2001      	movs	r0, #1
 800c1c8:	468c      	mov	ip, r1
 800c1ca:	2d00      	cmp	r5, #0
 800c1cc:	d0a8      	beq.n	800c120 <__udivmoddi4+0xa0>
 800c1ce:	e9c5 4c00 	strd	r4, ip, [r5]
 800c1d2:	e7a5      	b.n	800c120 <__udivmoddi4+0xa0>
 800c1d4:	f1c2 0320 	rsb	r3, r2, #32
 800c1d8:	fa20 f603 	lsr.w	r6, r0, r3
 800c1dc:	4097      	lsls	r7, r2
 800c1de:	fa01 f002 	lsl.w	r0, r1, r2
 800c1e2:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800c1e6:	40d9      	lsrs	r1, r3
 800c1e8:	4330      	orrs	r0, r6
 800c1ea:	0c03      	lsrs	r3, r0, #16
 800c1ec:	fbb1 f6fe 	udiv	r6, r1, lr
 800c1f0:	fa1f f887 	uxth.w	r8, r7
 800c1f4:	fb0e 1116 	mls	r1, lr, r6, r1
 800c1f8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800c1fc:	fb06 f108 	mul.w	r1, r6, r8
 800c200:	4299      	cmp	r1, r3
 800c202:	fa04 f402 	lsl.w	r4, r4, r2
 800c206:	d909      	bls.n	800c21c <__udivmoddi4+0x19c>
 800c208:	18fb      	adds	r3, r7, r3
 800c20a:	f106 3cff 	add.w	ip, r6, #4294967295
 800c20e:	f080 808d 	bcs.w	800c32c <__udivmoddi4+0x2ac>
 800c212:	4299      	cmp	r1, r3
 800c214:	f240 808a 	bls.w	800c32c <__udivmoddi4+0x2ac>
 800c218:	3e02      	subs	r6, #2
 800c21a:	443b      	add	r3, r7
 800c21c:	1a5b      	subs	r3, r3, r1
 800c21e:	b281      	uxth	r1, r0
 800c220:	fbb3 f0fe 	udiv	r0, r3, lr
 800c224:	fb0e 3310 	mls	r3, lr, r0, r3
 800c228:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800c22c:	fb00 f308 	mul.w	r3, r0, r8
 800c230:	428b      	cmp	r3, r1
 800c232:	d907      	bls.n	800c244 <__udivmoddi4+0x1c4>
 800c234:	1879      	adds	r1, r7, r1
 800c236:	f100 3cff 	add.w	ip, r0, #4294967295
 800c23a:	d273      	bcs.n	800c324 <__udivmoddi4+0x2a4>
 800c23c:	428b      	cmp	r3, r1
 800c23e:	d971      	bls.n	800c324 <__udivmoddi4+0x2a4>
 800c240:	3802      	subs	r0, #2
 800c242:	4439      	add	r1, r7
 800c244:	1acb      	subs	r3, r1, r3
 800c246:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800c24a:	e778      	b.n	800c13e <__udivmoddi4+0xbe>
 800c24c:	f1c6 0c20 	rsb	ip, r6, #32
 800c250:	fa03 f406 	lsl.w	r4, r3, r6
 800c254:	fa22 f30c 	lsr.w	r3, r2, ip
 800c258:	431c      	orrs	r4, r3
 800c25a:	fa20 f70c 	lsr.w	r7, r0, ip
 800c25e:	fa01 f306 	lsl.w	r3, r1, r6
 800c262:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 800c266:	fa21 f10c 	lsr.w	r1, r1, ip
 800c26a:	431f      	orrs	r7, r3
 800c26c:	0c3b      	lsrs	r3, r7, #16
 800c26e:	fbb1 f9fe 	udiv	r9, r1, lr
 800c272:	fa1f f884 	uxth.w	r8, r4
 800c276:	fb0e 1119 	mls	r1, lr, r9, r1
 800c27a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800c27e:	fb09 fa08 	mul.w	sl, r9, r8
 800c282:	458a      	cmp	sl, r1
 800c284:	fa02 f206 	lsl.w	r2, r2, r6
 800c288:	fa00 f306 	lsl.w	r3, r0, r6
 800c28c:	d908      	bls.n	800c2a0 <__udivmoddi4+0x220>
 800c28e:	1861      	adds	r1, r4, r1
 800c290:	f109 30ff 	add.w	r0, r9, #4294967295
 800c294:	d248      	bcs.n	800c328 <__udivmoddi4+0x2a8>
 800c296:	458a      	cmp	sl, r1
 800c298:	d946      	bls.n	800c328 <__udivmoddi4+0x2a8>
 800c29a:	f1a9 0902 	sub.w	r9, r9, #2
 800c29e:	4421      	add	r1, r4
 800c2a0:	eba1 010a 	sub.w	r1, r1, sl
 800c2a4:	b2bf      	uxth	r7, r7
 800c2a6:	fbb1 f0fe 	udiv	r0, r1, lr
 800c2aa:	fb0e 1110 	mls	r1, lr, r0, r1
 800c2ae:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800c2b2:	fb00 f808 	mul.w	r8, r0, r8
 800c2b6:	45b8      	cmp	r8, r7
 800c2b8:	d907      	bls.n	800c2ca <__udivmoddi4+0x24a>
 800c2ba:	19e7      	adds	r7, r4, r7
 800c2bc:	f100 31ff 	add.w	r1, r0, #4294967295
 800c2c0:	d22e      	bcs.n	800c320 <__udivmoddi4+0x2a0>
 800c2c2:	45b8      	cmp	r8, r7
 800c2c4:	d92c      	bls.n	800c320 <__udivmoddi4+0x2a0>
 800c2c6:	3802      	subs	r0, #2
 800c2c8:	4427      	add	r7, r4
 800c2ca:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800c2ce:	eba7 0708 	sub.w	r7, r7, r8
 800c2d2:	fba0 8902 	umull	r8, r9, r0, r2
 800c2d6:	454f      	cmp	r7, r9
 800c2d8:	46c6      	mov	lr, r8
 800c2da:	4649      	mov	r1, r9
 800c2dc:	d31a      	bcc.n	800c314 <__udivmoddi4+0x294>
 800c2de:	d017      	beq.n	800c310 <__udivmoddi4+0x290>
 800c2e0:	b15d      	cbz	r5, 800c2fa <__udivmoddi4+0x27a>
 800c2e2:	ebb3 020e 	subs.w	r2, r3, lr
 800c2e6:	eb67 0701 	sbc.w	r7, r7, r1
 800c2ea:	fa07 fc0c 	lsl.w	ip, r7, ip
 800c2ee:	40f2      	lsrs	r2, r6
 800c2f0:	ea4c 0202 	orr.w	r2, ip, r2
 800c2f4:	40f7      	lsrs	r7, r6
 800c2f6:	e9c5 2700 	strd	r2, r7, [r5]
 800c2fa:	2600      	movs	r6, #0
 800c2fc:	4631      	mov	r1, r6
 800c2fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c302:	462e      	mov	r6, r5
 800c304:	4628      	mov	r0, r5
 800c306:	e70b      	b.n	800c120 <__udivmoddi4+0xa0>
 800c308:	4606      	mov	r6, r0
 800c30a:	e6e9      	b.n	800c0e0 <__udivmoddi4+0x60>
 800c30c:	4618      	mov	r0, r3
 800c30e:	e6fd      	b.n	800c10c <__udivmoddi4+0x8c>
 800c310:	4543      	cmp	r3, r8
 800c312:	d2e5      	bcs.n	800c2e0 <__udivmoddi4+0x260>
 800c314:	ebb8 0e02 	subs.w	lr, r8, r2
 800c318:	eb69 0104 	sbc.w	r1, r9, r4
 800c31c:	3801      	subs	r0, #1
 800c31e:	e7df      	b.n	800c2e0 <__udivmoddi4+0x260>
 800c320:	4608      	mov	r0, r1
 800c322:	e7d2      	b.n	800c2ca <__udivmoddi4+0x24a>
 800c324:	4660      	mov	r0, ip
 800c326:	e78d      	b.n	800c244 <__udivmoddi4+0x1c4>
 800c328:	4681      	mov	r9, r0
 800c32a:	e7b9      	b.n	800c2a0 <__udivmoddi4+0x220>
 800c32c:	4666      	mov	r6, ip
 800c32e:	e775      	b.n	800c21c <__udivmoddi4+0x19c>
 800c330:	4630      	mov	r0, r6
 800c332:	e74a      	b.n	800c1ca <__udivmoddi4+0x14a>
 800c334:	f1ac 0c02 	sub.w	ip, ip, #2
 800c338:	4439      	add	r1, r7
 800c33a:	e713      	b.n	800c164 <__udivmoddi4+0xe4>
 800c33c:	3802      	subs	r0, #2
 800c33e:	443c      	add	r4, r7
 800c340:	e724      	b.n	800c18c <__udivmoddi4+0x10c>
 800c342:	bf00      	nop

0800c344 <__aeabi_idiv0>:
 800c344:	4770      	bx	lr
 800c346:	bf00      	nop

0800c348 <BIOS_Info>:

/*******************************************************************************
 Info :  Ӳ���豸��Ϣ
*******************************************************************************/
unsigned BIOS_Info(char Item)
{
 800c348:	b480      	push	{r7}
 800c34a:	b083      	sub	sp, #12
 800c34c:	af00      	add	r7, sp, #0
 800c34e:	4603      	mov	r3, r0
 800c350:	71fb      	strb	r3, [r7, #7]
  switch (Item){
 800c352:	79fb      	ldrb	r3, [r7, #7]
 800c354:	2b00      	cmp	r3, #0
 800c356:	d103      	bne.n	800c360 <BIOS_Info+0x18>
    case CHA_CNT:
    	return __HAL_DMA_GET_COUNTER(&hdma_adc1);  /*(u16)DMA_CH_A->CNDTR*/
 800c358:	4b05      	ldr	r3, [pc, #20]	; (800c370 <BIOS_Info+0x28>)
 800c35a:	681b      	ldr	r3, [r3, #0]
 800c35c:	685b      	ldr	r3, [r3, #4]
 800c35e:	e000      	b.n	800c362 <BIOS_Info+0x1a>
/*    case SIN_TAB: return (u32)SIN_DATA;
    case TRG_TAB: return (u32)TRG_DATA;
    case SAW_TAB: return (u32)SAW_DATA;    */
    default:
    	return 0;
 800c360:	2300      	movs	r3, #0
  }
}
 800c362:	4618      	mov	r0, r3
 800c364:	370c      	adds	r7, #12
 800c366:	46bd      	mov	sp, r7
 800c368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c36c:	4770      	bx	lr
 800c36e:	bf00      	nop
 800c370:	2000793c 	.word	0x2000793c

0800c374 <BIOS_Ctrl>:
/*******************************************************************************
 DevCtrl:  Ӳ���豸����
*******************************************************************************/
void BIOS_Ctrl(char Item, unsigned Val)
{
 800c374:	b580      	push	{r7, lr}
 800c376:	b088      	sub	sp, #32
 800c378:	af00      	add	r7, sp, #0
 800c37a:	4603      	mov	r3, r0
 800c37c:	6039      	str	r1, [r7, #0]
 800c37e:	71fb      	strb	r3, [r7, #7]
  GPIO_InitTypeDef         GPIO_InitStructure;
  unsigned dma_tmp;

  switch (Item){
 800c380:	79fb      	ldrb	r3, [r7, #7]
 800c382:	2b08      	cmp	r3, #8
 800c384:	f200 8150 	bhi.w	800c628 <BIOS_Ctrl+0x2b4>
 800c388:	a201      	add	r2, pc, #4	; (adr r2, 800c390 <BIOS_Ctrl+0x1c>)
 800c38a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c38e:	bf00      	nop
 800c390:	0800c52b 	.word	0x0800c52b
 800c394:	0800c4d9 	.word	0x0800c4d9
 800c398:	0800c51f 	.word	0x0800c51f
 800c39c:	0800c4e9 	.word	0x0800c4e9
 800c3a0:	0800c3b5 	.word	0x0800c3b5
 800c3a4:	0800c417 	.word	0x0800c417
 800c3a8:	0800c441 	.word	0x0800c441
 800c3ac:	0800c469 	.word	0x0800c469
 800c3b0:	0800c4cb 	.word	0x0800c4cb
    case SMPL_ST: if(Val == DISABLE)
 800c3b4:	683b      	ldr	r3, [r7, #0]
 800c3b6:	2b00      	cmp	r3, #0
 800c3b8:	d108      	bne.n	800c3cc <BIOS_Ctrl+0x58>
    			  {
    				  __HAL_DMA_DISABLE(&hdma_adc1);  /*DMA1_Channel1->CCR &= (~ENABLE);*/
 800c3ba:	4ba0      	ldr	r3, [pc, #640]	; (800c63c <BIOS_Ctrl+0x2c8>)
 800c3bc:	681b      	ldr	r3, [r3, #0]
 800c3be:	681a      	ldr	r2, [r3, #0]
 800c3c0:	4b9e      	ldr	r3, [pc, #632]	; (800c63c <BIOS_Ctrl+0x2c8>)
 800c3c2:	681b      	ldr	r3, [r3, #0]
 800c3c4:	f022 0201 	bic.w	r2, r2, #1
 800c3c8:	601a      	str	r2, [r3, #0]
                    if(Val == INTERLEAVE)
                    {
                      DMA1_Channel1->CCR = 0x3A80;
                    } */
                  }
    			  break;
 800c3ca:	e12f      	b.n	800c62c <BIOS_Ctrl+0x2b8>
    				  if(Val == ENABLE)
 800c3cc:	683b      	ldr	r3, [r7, #0]
 800c3ce:	2b01      	cmp	r3, #1
 800c3d0:	f040 812c 	bne.w	800c62c <BIOS_Ctrl+0x2b8>
    			    __HAL_DMA_ENABLE(&hdma_adc1);  /* DMA1_Channel1->CCR |= ENABLE; */
 800c3d4:	4b99      	ldr	r3, [pc, #612]	; (800c63c <BIOS_Ctrl+0x2c8>)
 800c3d6:	681b      	ldr	r3, [r3, #0]
 800c3d8:	681a      	ldr	r2, [r3, #0]
 800c3da:	4b98      	ldr	r3, [pc, #608]	; (800c63c <BIOS_Ctrl+0x2c8>)
 800c3dc:	681b      	ldr	r3, [r3, #0]
 800c3de:	f042 0201 	orr.w	r2, r2, #1
 800c3e2:	601a      	str	r2, [r3, #0]
                    __HAL_ADC_ENABLE(&hadc1);  //ADC1->CR2 |= 0x00000001; //AD_ON
 800c3e4:	4b96      	ldr	r3, [pc, #600]	; (800c640 <BIOS_Ctrl+0x2cc>)
 800c3e6:	681b      	ldr	r3, [r3, #0]
 800c3e8:	689a      	ldr	r2, [r3, #8]
 800c3ea:	4b95      	ldr	r3, [pc, #596]	; (800c640 <BIOS_Ctrl+0x2cc>)
 800c3ec:	681b      	ldr	r3, [r3, #0]
 800c3ee:	f042 0201 	orr.w	r2, r2, #1
 800c3f2:	609a      	str	r2, [r3, #8]
                    __HAL_ADC_ENABLE(&hadc2);  //ADC2->CR2 |= 0x00000001; //AD_ON
 800c3f4:	4b93      	ldr	r3, [pc, #588]	; (800c644 <BIOS_Ctrl+0x2d0>)
 800c3f6:	681b      	ldr	r3, [r3, #0]
 800c3f8:	689a      	ldr	r2, [r3, #8]
 800c3fa:	4b92      	ldr	r3, [pc, #584]	; (800c644 <BIOS_Ctrl+0x2d0>)
 800c3fc:	681b      	ldr	r3, [r3, #0]
 800c3fe:	f042 0201 	orr.w	r2, r2, #1
 800c402:	609a      	str	r2, [r3, #8]
                    __HAL_TIM_ENABLE(&htim1);  /*TIM1->CR1 = 0x0081; */
 800c404:	4b90      	ldr	r3, [pc, #576]	; (800c648 <BIOS_Ctrl+0x2d4>)
 800c406:	681b      	ldr	r3, [r3, #0]
 800c408:	681a      	ldr	r2, [r3, #0]
 800c40a:	4b8f      	ldr	r3, [pc, #572]	; (800c648 <BIOS_Ctrl+0x2d4>)
 800c40c:	681b      	ldr	r3, [r3, #0]
 800c40e:	f042 0201 	orr.w	r2, r2, #1
 800c412:	601a      	str	r2, [r3, #0]
    			  break;
 800c414:	e10a      	b.n	800c62c <BIOS_Ctrl+0x2b8>

    case SMPLTIM:
    			  octim1.Pulse = (Val+1)/2;
 800c416:	683b      	ldr	r3, [r7, #0]
 800c418:	3301      	adds	r3, #1
 800c41a:	085b      	lsrs	r3, r3, #1
 800c41c:	4a8b      	ldr	r2, [pc, #556]	; (800c64c <BIOS_Ctrl+0x2d8>)
 800c41e:	6053      	str	r3, [r2, #4]
    			  HAL_TIM_OC_ConfigChannel(&htim1, &octim1, 1 );
 800c420:	2201      	movs	r2, #1
 800c422:	498a      	ldr	r1, [pc, #552]	; (800c64c <BIOS_Ctrl+0x2d8>)
 800c424:	4888      	ldr	r0, [pc, #544]	; (800c648 <BIOS_Ctrl+0x2d4>)
 800c426:	f010 fd31 	bl	801ce8c <HAL_TIM_OC_ConfigChannel>
    			  htim1.Init.Prescaler = 0;
 800c42a:	4b87      	ldr	r3, [pc, #540]	; (800c648 <BIOS_Ctrl+0x2d4>)
 800c42c:	2200      	movs	r2, #0
 800c42e:	605a      	str	r2, [r3, #4]
    			  htim1.Init.Period = Val -1;
 800c430:	683b      	ldr	r3, [r7, #0]
 800c432:	3b01      	subs	r3, #1
 800c434:	4a84      	ldr	r2, [pc, #528]	; (800c648 <BIOS_Ctrl+0x2d4>)
 800c436:	60d3      	str	r3, [r2, #12]
    			  HAL_TIM_Base_Init(&htim1);
 800c438:	4883      	ldr	r0, [pc, #524]	; (800c648 <BIOS_Ctrl+0x2d4>)
 800c43a:	f010 fb5f 	bl	801cafc <HAL_TIM_Base_Init>
                  break;
 800c43e:	e0f8      	b.n	800c632 <BIOS_Ctrl+0x2be>

    case SMPLNUM:
    			  __HAL_TIM_URS_DISABLE(&htim1);
 800c440:	4b81      	ldr	r3, [pc, #516]	; (800c648 <BIOS_Ctrl+0x2d4>)
 800c442:	681b      	ldr	r3, [r3, #0]
 800c444:	681a      	ldr	r2, [r3, #0]
 800c446:	4b80      	ldr	r3, [pc, #512]	; (800c648 <BIOS_Ctrl+0x2d4>)
 800c448:	681b      	ldr	r3, [r3, #0]
 800c44a:	f022 0204 	bic.w	r2, r2, #4
 800c44e:	601a      	str	r2, [r3, #0]
    			  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800c450:	4b7d      	ldr	r3, [pc, #500]	; (800c648 <BIOS_Ctrl+0x2d4>)
 800c452:	2200      	movs	r2, #0
 800c454:	609a      	str	r2, [r3, #8]
    			  HAL_TIM_Base_Init(&htim1);
 800c456:	487c      	ldr	r0, [pc, #496]	; (800c648 <BIOS_Ctrl+0x2d4>)
 800c458:	f010 fb50 	bl	801cafc <HAL_TIM_Base_Init>
    			  __HAL_DMA_SET_COUNTER( &hdma_adc1, Val);  /* DMA_CH_A->CNDTR = (u32)Val;    */
 800c45c:	683b      	ldr	r3, [r7, #0]
 800c45e:	b29a      	uxth	r2, r3
 800c460:	4b76      	ldr	r3, [pc, #472]	; (800c63c <BIOS_Ctrl+0x2c8>)
 800c462:	681b      	ldr	r3, [r3, #0]
 800c464:	605a      	str	r2, [r3, #4]
                  break;
 800c466:	e0e4      	b.n	800c632 <BIOS_Ctrl+0x2be>

    case AiRANGE: if(Val & DC)
 800c468:	683b      	ldr	r3, [r7, #0]
 800c46a:	f003 0302 	and.w	r3, r3, #2
 800c46e:	2b00      	cmp	r3, #0
 800c470:	d005      	beq.n	800c47e <BIOS_Ctrl+0x10a>
    				  HAL_GPIO_WritePin(Az_GPIO_Port, Az_Pin,GPIO_PIN_SET);  // AZ_HIGH;
 800c472:	2201      	movs	r2, #1
 800c474:	2110      	movs	r1, #16
 800c476:	4876      	ldr	r0, [pc, #472]	; (800c650 <BIOS_Ctrl+0x2dc>)
 800c478:	f00d f9fe 	bl	8019878 <HAL_GPIO_WritePin>
 800c47c:	e004      	b.n	800c488 <BIOS_Ctrl+0x114>
                  else
                	  HAL_GPIO_WritePin(Az_GPIO_Port, Az_Pin,GPIO_PIN_RESET);  //AZ_LOW;   CH_A_AC
 800c47e:	2200      	movs	r2, #0
 800c480:	2110      	movs	r1, #16
 800c482:	4873      	ldr	r0, [pc, #460]	; (800c650 <BIOS_Ctrl+0x2dc>)
 800c484:	f00d f9f8 	bl	8019878 <HAL_GPIO_WritePin>
                  if(Val & HV)
 800c488:	683b      	ldr	r3, [r7, #0]
 800c48a:	f003 0301 	and.w	r3, r3, #1
 800c48e:	2b00      	cmp	r3, #0
 800c490:	d005      	beq.n	800c49e <BIOS_Ctrl+0x12a>
                	  HAL_GPIO_WritePin(Ay_GPIO_Port, Ay_Pin,GPIO_PIN_SET);  //AY_HIGH;  CH_A_HV
 800c492:	2201      	movs	r2, #1
 800c494:	2120      	movs	r1, #32
 800c496:	486e      	ldr	r0, [pc, #440]	; (800c650 <BIOS_Ctrl+0x2dc>)
 800c498:	f00d f9ee 	bl	8019878 <HAL_GPIO_WritePin>
 800c49c:	e004      	b.n	800c4a8 <BIOS_Ctrl+0x134>
                  else
                	  HAL_GPIO_WritePin(Ay_GPIO_Port, Ay_Pin,GPIO_PIN_RESET);  //AY_LOW;   CH_A_LV
 800c49e:	2200      	movs	r2, #0
 800c4a0:	2120      	movs	r1, #32
 800c4a2:	486b      	ldr	r0, [pc, #428]	; (800c650 <BIOS_Ctrl+0x2dc>)
 800c4a4:	f00d f9e8 	bl	8019878 <HAL_GPIO_WritePin>
                  if(Val & ACT)
 800c4a8:	683b      	ldr	r3, [r7, #0]
 800c4aa:	f003 0304 	and.w	r3, r3, #4
 800c4ae:	2b00      	cmp	r3, #0
 800c4b0:	d005      	beq.n	800c4be <BIOS_Ctrl+0x14a>
                	  HAL_GPIO_WritePin(Ax_GPIO_Port, Ax_Pin,GPIO_PIN_SET);  //AX_HIGH;  CH_A_ACT
 800c4b2:	2201      	movs	r2, #1
 800c4b4:	2101      	movs	r1, #1
 800c4b6:	4867      	ldr	r0, [pc, #412]	; (800c654 <BIOS_Ctrl+0x2e0>)
 800c4b8:	f00d f9de 	bl	8019878 <HAL_GPIO_WritePin>
                  else
                	  HAL_GPIO_WritePin(Ax_GPIO_Port, Ax_Pin,GPIO_PIN_RESET);  //AX_LOW;   CH_A_GND
                  break;
 800c4bc:	e0b9      	b.n	800c632 <BIOS_Ctrl+0x2be>
                	  HAL_GPIO_WritePin(Ax_GPIO_Port, Ax_Pin,GPIO_PIN_RESET);  //AX_LOW;   CH_A_GND
 800c4be:	2200      	movs	r2, #0
 800c4c0:	2101      	movs	r1, #1
 800c4c2:	4864      	ldr	r0, [pc, #400]	; (800c654 <BIOS_Ctrl+0x2e0>)
 800c4c4:	f00d f9d8 	bl	8019878 <HAL_GPIO_WritePin>
                  break;
 800c4c8:	e0b3      	b.n	800c632 <BIOS_Ctrl+0x2be>

    case AOFFSET: HAL_DAC_SetValue( &hdac, DAC_CHANNEL_2, DAC_ALIGN_12B_R, Val);  /*DAC->DHR12R2  = (u16)Val; */
 800c4ca:	683b      	ldr	r3, [r7, #0]
 800c4cc:	2200      	movs	r2, #0
 800c4ce:	2110      	movs	r1, #16
 800c4d0:	4861      	ldr	r0, [pc, #388]	; (800c658 <BIOS_Ctrl+0x2e4>)
 800c4d2:	f00c f9bc 	bl	801884e <HAL_DAC_SetValue>
                  break;
 800c4d6:	e0ac      	b.n	800c632 <BIOS_Ctrl+0x2be>

    case DAC_TIM:
    			  htim7.Init.Period = Val-1;
 800c4d8:	683b      	ldr	r3, [r7, #0]
 800c4da:	3b01      	subs	r3, #1
 800c4dc:	4a5f      	ldr	r2, [pc, #380]	; (800c65c <BIOS_Ctrl+0x2e8>)
 800c4de:	60d3      	str	r3, [r2, #12]
    			  HAL_TIM_Base_Init(&htim7);
 800c4e0:	485e      	ldr	r0, [pc, #376]	; (800c65c <BIOS_Ctrl+0x2e8>)
 800c4e2:	f010 fb0b 	bl	801cafc <HAL_TIM_Base_Init>
    			  break;
 800c4e6:	e0a4      	b.n	800c632 <BIOS_Ctrl+0x2be>

    case OUT_BUF:
    // need to do this at low level
        		  // set circular  /* OUT_DMA->CCR   = 0x15B0; // PL=01, M/P_SIZE=0101, M/P_INC=10, CIRC=1, DIR=1, En=0 */
    			  dma_tmp = hdma_dac1.Instance->CR;
 800c4e8:	4b5d      	ldr	r3, [pc, #372]	; (800c660 <BIOS_Ctrl+0x2ec>)
 800c4ea:	681b      	ldr	r3, [r3, #0]
 800c4ec:	681b      	ldr	r3, [r3, #0]
 800c4ee:	61fb      	str	r3, [r7, #28]
    			  dma_tmp &= 0x0FFFFEDE;
 800c4f0:	69fa      	ldr	r2, [r7, #28]
 800c4f2:	4b5c      	ldr	r3, [pc, #368]	; (800c664 <BIOS_Ctrl+0x2f0>)
 800c4f4:	4013      	ands	r3, r2
 800c4f6:	61fb      	str	r3, [r7, #28]
    			  dma_tmp |= 0x120; //set circ and pfctrl
 800c4f8:	69fb      	ldr	r3, [r7, #28]
 800c4fa:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 800c4fe:	61fb      	str	r3, [r7, #28]
				  hdma_dac1.Instance->CR = dma_tmp;
 800c500:	4b57      	ldr	r3, [pc, #348]	; (800c660 <BIOS_Ctrl+0x2ec>)
 800c502:	681b      	ldr	r3, [r3, #0]
 800c504:	69fa      	ldr	r2, [r7, #28]
 800c506:	601a      	str	r2, [r3, #0]
         		  hdma_dac1.Instance->PAR = hdac.Instance->DHR12R1;  /* OUT_DMA->CPAR  = (u32)&DAC->DHR12R1; */
 800c508:	4b53      	ldr	r3, [pc, #332]	; (800c658 <BIOS_Ctrl+0x2e4>)
 800c50a:	681a      	ldr	r2, [r3, #0]
 800c50c:	4b54      	ldr	r3, [pc, #336]	; (800c660 <BIOS_Ctrl+0x2ec>)
 800c50e:	681b      	ldr	r3, [r3, #0]
 800c510:	6892      	ldr	r2, [r2, #8]
 800c512:	609a      	str	r2, [r3, #8]
        		  hdma_dac1.Instance->M0AR = Val;  /*  OUT_DMA->CMAR  = (u32)Val; */
 800c514:	4b52      	ldr	r3, [pc, #328]	; (800c660 <BIOS_Ctrl+0x2ec>)
 800c516:	681b      	ldr	r3, [r3, #0]
 800c518:	683a      	ldr	r2, [r7, #0]
 800c51a:	60da      	str	r2, [r3, #12]
                  break;
 800c51c:	e089      	b.n	800c632 <BIOS_Ctrl+0x2be>

    case OUT_CNT:
    			  __HAL_DMA_SET_COUNTER( &hdma_dac1, Val);  /*OUT_DMA->CNDTR = (u16)Val; */
 800c51e:	683b      	ldr	r3, [r7, #0]
 800c520:	b29a      	uxth	r2, r3
 800c522:	4b4f      	ldr	r3, [pc, #316]	; (800c660 <BIOS_Ctrl+0x2ec>)
 800c524:	681b      	ldr	r3, [r3, #0]
 800c526:	605a      	str	r2, [r3, #4]
    			  break;
 800c528:	e083      	b.n	800c632 <BIOS_Ctrl+0x2be>

    case OUT_MOD:
      GPIO_InitStructure.Speed = GPIO_SPEED_FREQ_MEDIUM;
 800c52a:	2301      	movs	r3, #1
 800c52c:	617b      	str	r3, [r7, #20]
 800c52e:	683b      	ldr	r3, [r7, #0]
 800c530:	2b04      	cmp	r3, #4
 800c532:	d009      	beq.n	800c548 <BIOS_Ctrl+0x1d4>
 800c534:	683b      	ldr	r3, [r7, #0]
 800c536:	2b04      	cmp	r3, #4
 800c538:	d87a      	bhi.n	800c630 <BIOS_Ctrl+0x2bc>
 800c53a:	683b      	ldr	r3, [r7, #0]
 800c53c:	2b00      	cmp	r3, #0
 800c53e:	d04d      	beq.n	800c5dc <BIOS_Ctrl+0x268>
 800c540:	683b      	ldr	r3, [r7, #0]
 800c542:	2b02      	cmp	r3, #2
 800c544:	d025      	beq.n	800c592 <BIOS_Ctrl+0x21e>
                                  GPIO_InitStructure.Pin   = Fo4_Pin ;
                                  GPIO_InitStructure.Mode  = GPIO_MODE_INPUT;
                                  HAL_GPIO_Init(Fo4_GPIO_Port, &GPIO_InitStructure);
                                  break;
                  }
                  break;
 800c546:	e073      	b.n	800c630 <BIOS_Ctrl+0x2bc>
                                  __HAL_DMA_DISABLE(&hdma_dac1); // OUT_DMA->CCR &= 0xFFFE;               //�رղ������DMA
 800c548:	4b45      	ldr	r3, [pc, #276]	; (800c660 <BIOS_Ctrl+0x2ec>)
 800c54a:	681b      	ldr	r3, [r3, #0]
 800c54c:	681a      	ldr	r2, [r3, #0]
 800c54e:	4b44      	ldr	r3, [pc, #272]	; (800c660 <BIOS_Ctrl+0x2ec>)
 800c550:	681b      	ldr	r3, [r3, #0]
 800c552:	f022 0201 	bic.w	r2, r2, #1
 800c556:	601a      	str	r2, [r3, #0]
                    		      __HAL_DAC_DISABLE(&hdac, DAC_CHANNEL_1);
 800c558:	4b3f      	ldr	r3, [pc, #252]	; (800c658 <BIOS_Ctrl+0x2e4>)
 800c55a:	681b      	ldr	r3, [r3, #0]
 800c55c:	681a      	ldr	r2, [r3, #0]
 800c55e:	4b3e      	ldr	r3, [pc, #248]	; (800c658 <BIOS_Ctrl+0x2e4>)
 800c560:	681b      	ldr	r3, [r3, #0]
 800c562:	f022 0201 	bic.w	r2, r2, #1
 800c566:	601a      	str	r2, [r3, #0]
                                  GPIO_InitStructure.Pin   = Fo2_Pin;
 800c568:	2304      	movs	r3, #4
 800c56a:	60bb      	str	r3, [r7, #8]
                                  GPIO_InitStructure.Mode  = GPIO_MODE_AF_PP;
 800c56c:	2302      	movs	r3, #2
 800c56e:	60fb      	str	r3, [r7, #12]
                                  HAL_GPIO_Init(Fo2_GPIO_Port, &GPIO_InitStructure);
 800c570:	f107 0308 	add.w	r3, r7, #8
 800c574:	4619      	mov	r1, r3
 800c576:	483c      	ldr	r0, [pc, #240]	; (800c668 <BIOS_Ctrl+0x2f4>)
 800c578:	f00c ffd2 	bl	8019520 <HAL_GPIO_Init>
                                  GPIO_InitStructure.Pin   = Fo4_Pin ;
 800c57c:	2310      	movs	r3, #16
 800c57e:	60bb      	str	r3, [r7, #8]
                                  GPIO_InitStructure.Mode  = GPIO_MODE_INPUT;
 800c580:	2300      	movs	r3, #0
 800c582:	60fb      	str	r3, [r7, #12]
                                  HAL_GPIO_Init(Fo4_GPIO_Port, &GPIO_InitStructure);
 800c584:	f107 0308 	add.w	r3, r7, #8
 800c588:	4619      	mov	r1, r3
 800c58a:	4837      	ldr	r0, [pc, #220]	; (800c668 <BIOS_Ctrl+0x2f4>)
 800c58c:	f00c ffc8 	bl	8019520 <HAL_GPIO_Init>
                                  break;
 800c590:	e049      	b.n	800c626 <BIOS_Ctrl+0x2b2>
                    			  GPIO_InitStructure.Pin   = Fo2_Pin ;
 800c592:	2304      	movs	r3, #4
 800c594:	60bb      	str	r3, [r7, #8]
                                  GPIO_InitStructure.Mode  = GPIO_MODE_INPUT;
 800c596:	2300      	movs	r3, #0
 800c598:	60fb      	str	r3, [r7, #12]
                                  HAL_GPIO_Init(Fo2_GPIO_Port, &GPIO_InitStructure);
 800c59a:	f107 0308 	add.w	r3, r7, #8
 800c59e:	4619      	mov	r1, r3
 800c5a0:	4831      	ldr	r0, [pc, #196]	; (800c668 <BIOS_Ctrl+0x2f4>)
 800c5a2:	f00c ffbd 	bl	8019520 <HAL_GPIO_Init>
                                  GPIO_InitStructure.Pin   = Fo4_Pin ;
 800c5a6:	2310      	movs	r3, #16
 800c5a8:	60bb      	str	r3, [r7, #8]
                                  GPIO_InitStructure.Mode  = GPIO_MODE_ANALOG;
 800c5aa:	2303      	movs	r3, #3
 800c5ac:	60fb      	str	r3, [r7, #12]
                                  HAL_GPIO_Init(Fo4_GPIO_Port, &GPIO_InitStructure);
 800c5ae:	f107 0308 	add.w	r3, r7, #8
 800c5b2:	4619      	mov	r1, r3
 800c5b4:	482c      	ldr	r0, [pc, #176]	; (800c668 <BIOS_Ctrl+0x2f4>)
 800c5b6:	f00c ffb3 	bl	8019520 <HAL_GPIO_Init>
                                  __HAL_DMA_ENABLE(&hdma_dac1);  // OUT_DMA->CCR |= ENABLE;               //���������DMA
 800c5ba:	4b29      	ldr	r3, [pc, #164]	; (800c660 <BIOS_Ctrl+0x2ec>)
 800c5bc:	681b      	ldr	r3, [r3, #0]
 800c5be:	681a      	ldr	r2, [r3, #0]
 800c5c0:	4b27      	ldr	r3, [pc, #156]	; (800c660 <BIOS_Ctrl+0x2ec>)
 800c5c2:	681b      	ldr	r3, [r3, #0]
 800c5c4:	f042 0201 	orr.w	r2, r2, #1
 800c5c8:	601a      	str	r2, [r3, #0]
                                  __HAL_DAC_ENABLE(&hdac, DAC_CHANNEL_1);
 800c5ca:	4b23      	ldr	r3, [pc, #140]	; (800c658 <BIOS_Ctrl+0x2e4>)
 800c5cc:	681b      	ldr	r3, [r3, #0]
 800c5ce:	681a      	ldr	r2, [r3, #0]
 800c5d0:	4b21      	ldr	r3, [pc, #132]	; (800c658 <BIOS_Ctrl+0x2e4>)
 800c5d2:	681b      	ldr	r3, [r3, #0]
 800c5d4:	f042 0201 	orr.w	r2, r2, #1
 800c5d8:	601a      	str	r2, [r3, #0]
                                  break;
 800c5da:	e024      	b.n	800c626 <BIOS_Ctrl+0x2b2>
                    			  __HAL_DMA_DISABLE(&hdma_dac1);  // OUT_DMA->CCR &= 0xFFFE;                //�رղ������DMA
 800c5dc:	4b20      	ldr	r3, [pc, #128]	; (800c660 <BIOS_Ctrl+0x2ec>)
 800c5de:	681b      	ldr	r3, [r3, #0]
 800c5e0:	681a      	ldr	r2, [r3, #0]
 800c5e2:	4b1f      	ldr	r3, [pc, #124]	; (800c660 <BIOS_Ctrl+0x2ec>)
 800c5e4:	681b      	ldr	r3, [r3, #0]
 800c5e6:	f022 0201 	bic.w	r2, r2, #1
 800c5ea:	601a      	str	r2, [r3, #0]
                    		      __HAL_DAC_DISABLE(&hdac, DAC_CHANNEL_1);
 800c5ec:	4b1a      	ldr	r3, [pc, #104]	; (800c658 <BIOS_Ctrl+0x2e4>)
 800c5ee:	681b      	ldr	r3, [r3, #0]
 800c5f0:	681a      	ldr	r2, [r3, #0]
 800c5f2:	4b19      	ldr	r3, [pc, #100]	; (800c658 <BIOS_Ctrl+0x2e4>)
 800c5f4:	681b      	ldr	r3, [r3, #0]
 800c5f6:	f022 0201 	bic.w	r2, r2, #1
 800c5fa:	601a      	str	r2, [r3, #0]
                                  GPIO_InitStructure.Pin   = Fo2_Pin ;
 800c5fc:	2304      	movs	r3, #4
 800c5fe:	60bb      	str	r3, [r7, #8]
                                  GPIO_InitStructure.Mode  = GPIO_MODE_AF_PP;
 800c600:	2302      	movs	r3, #2
 800c602:	60fb      	str	r3, [r7, #12]
                                  HAL_GPIO_Init(Fo2_GPIO_Port, &GPIO_InitStructure);
 800c604:	f107 0308 	add.w	r3, r7, #8
 800c608:	4619      	mov	r1, r3
 800c60a:	4817      	ldr	r0, [pc, #92]	; (800c668 <BIOS_Ctrl+0x2f4>)
 800c60c:	f00c ff88 	bl	8019520 <HAL_GPIO_Init>
                                  GPIO_InitStructure.Pin   = Fo4_Pin ;
 800c610:	2310      	movs	r3, #16
 800c612:	60bb      	str	r3, [r7, #8]
                                  GPIO_InitStructure.Mode  = GPIO_MODE_INPUT;
 800c614:	2300      	movs	r3, #0
 800c616:	60fb      	str	r3, [r7, #12]
                                  HAL_GPIO_Init(Fo4_GPIO_Port, &GPIO_InitStructure);
 800c618:	f107 0308 	add.w	r3, r7, #8
 800c61c:	4619      	mov	r1, r3
 800c61e:	4812      	ldr	r0, [pc, #72]	; (800c668 <BIOS_Ctrl+0x2f4>)
 800c620:	f00c ff7e 	bl	8019520 <HAL_GPIO_Init>
                                  break;
 800c624:	bf00      	nop
                  break;
 800c626:	e003      	b.n	800c630 <BIOS_Ctrl+0x2bc>

    default: break;
 800c628:	bf00      	nop
 800c62a:	e002      	b.n	800c632 <BIOS_Ctrl+0x2be>
    			  break;
 800c62c:	bf00      	nop
 800c62e:	e000      	b.n	800c632 <BIOS_Ctrl+0x2be>
                  break;
 800c630:	bf00      	nop
  }
}
 800c632:	bf00      	nop
 800c634:	3720      	adds	r7, #32
 800c636:	46bd      	mov	sp, r7
 800c638:	bd80      	pop	{r7, pc}
 800c63a:	bf00      	nop
 800c63c:	2000793c 	.word	0x2000793c
 800c640:	200078a8 	.word	0x200078a8
 800c644:	20007718 	.word	0x20007718
 800c648:	200079b8 	.word	0x200079b8
 800c64c:	2000799c 	.word	0x2000799c
 800c650:	40020800 	.word	0x40020800
 800c654:	40020400 	.word	0x40020400
 800c658:	20007928 	.word	0x20007928
 800c65c:	20007a00 	.word	0x20007a00
 800c660:	20007848 	.word	0x20007848
 800c664:	0ffffede 	.word	0x0ffffede
 800c668:	40020000 	.word	0x40020000

0800c66c <Set_Base>:

/*******************************************************************************
 Set_Base: ˮƽɨ��ʱ��ת������
*******************************************************************************/
void Set_Base(short Base)
{
 800c66c:	b580      	push	{r7, lr}
 800c66e:	b082      	sub	sp, #8
 800c670:	af00      	add	r7, sp, #0
 800c672:	4603      	mov	r3, r0
 800c674:	80fb      	strh	r3, [r7, #6]
	octim1.Pulse = (ARR[Base]+1)/2;
 800c676:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800c67a:	4a13      	ldr	r2, [pc, #76]	; (800c6c8 <Set_Base+0x5c>)
 800c67c:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800c680:	3301      	adds	r3, #1
 800c682:	0fda      	lsrs	r2, r3, #31
 800c684:	4413      	add	r3, r2
 800c686:	105b      	asrs	r3, r3, #1
 800c688:	461a      	mov	r2, r3
 800c68a:	4b10      	ldr	r3, [pc, #64]	; (800c6cc <Set_Base+0x60>)
 800c68c:	605a      	str	r2, [r3, #4]
	HAL_TIM_OC_ConfigChannel(&htim1, &octim1, 1 );
 800c68e:	2201      	movs	r2, #1
 800c690:	490e      	ldr	r1, [pc, #56]	; (800c6cc <Set_Base+0x60>)
 800c692:	480f      	ldr	r0, [pc, #60]	; (800c6d0 <Set_Base+0x64>)
 800c694:	f010 fbfa 	bl	801ce8c <HAL_TIM_OC_ConfigChannel>
	htim1.Init.Prescaler = PSC[Base];
 800c698:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800c69c:	4a0d      	ldr	r2, [pc, #52]	; (800c6d4 <Set_Base+0x68>)
 800c69e:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800c6a2:	461a      	mov	r2, r3
 800c6a4:	4b0a      	ldr	r3, [pc, #40]	; (800c6d0 <Set_Base+0x64>)
 800c6a6:	605a      	str	r2, [r3, #4]
	htim1.Init.Period = ARR[Base];
 800c6a8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800c6ac:	4a06      	ldr	r2, [pc, #24]	; (800c6c8 <Set_Base+0x5c>)
 800c6ae:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800c6b2:	461a      	mov	r2, r3
 800c6b4:	4b06      	ldr	r3, [pc, #24]	; (800c6d0 <Set_Base+0x64>)
 800c6b6:	60da      	str	r2, [r3, #12]
	HAL_TIM_Base_Init(&htim1);
 800c6b8:	4805      	ldr	r0, [pc, #20]	; (800c6d0 <Set_Base+0x64>)
 800c6ba:	f010 fa1f 	bl	801cafc <HAL_TIM_Base_Init>
}
 800c6be:	bf00      	nop
 800c6c0:	3708      	adds	r7, #8
 800c6c2:	46bd      	mov	sp, r7
 800c6c4:	bd80      	pop	{r7, pc}
 800c6c6:	bf00      	nop
 800c6c8:	08000bcc 	.word	0x08000bcc
 800c6cc:	2000799c 	.word	0x2000799c
 800c6d0:	200079b8 	.word	0x200079b8
 800c6d4:	08000ba4 	.word	0x08000ba4

0800c6d8 <Set_Duty>:

/*******************************************************************************
 Set_Duty: �������ռ�ձ�����
*******************************************************************************/
void Set_Duty(void)
{
 800c6d8:	b580      	push	{r7, lr}
 800c6da:	af00      	add	r7, sp, #0
	 octim5.Pulse = (FARR[List[FREQ_OUT].Val]+1)*(10-List[FREQ_DUT].Val)/10;
 800c6dc:	4b0f      	ldr	r3, [pc, #60]	; (800c71c <Set_Duty+0x44>)
 800c6de:	f9b3 312c 	ldrsh.w	r3, [r3, #300]	; 0x12c
 800c6e2:	461a      	mov	r2, r3
 800c6e4:	4b0e      	ldr	r3, [pc, #56]	; (800c720 <Set_Duty+0x48>)
 800c6e6:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 800c6ea:	3301      	adds	r3, #1
 800c6ec:	4a0b      	ldr	r2, [pc, #44]	; (800c71c <Set_Duty+0x44>)
 800c6ee:	f9b2 2134 	ldrsh.w	r2, [r2, #308]	; 0x134
 800c6f2:	f1c2 020a 	rsb	r2, r2, #10
 800c6f6:	fb02 f303 	mul.w	r3, r2, r3
 800c6fa:	4a0a      	ldr	r2, [pc, #40]	; (800c724 <Set_Duty+0x4c>)
 800c6fc:	fb82 1203 	smull	r1, r2, r2, r3
 800c700:	1092      	asrs	r2, r2, #2
 800c702:	17db      	asrs	r3, r3, #31
 800c704:	1ad3      	subs	r3, r2, r3
 800c706:	461a      	mov	r2, r3
 800c708:	4b07      	ldr	r3, [pc, #28]	; (800c728 <Set_Duty+0x50>)
 800c70a:	605a      	str	r2, [r3, #4]
	 HAL_TIM_OC_ConfigChannel(&htim5, &octim5, 3 );
 800c70c:	2203      	movs	r2, #3
 800c70e:	4906      	ldr	r1, [pc, #24]	; (800c728 <Set_Duty+0x50>)
 800c710:	4806      	ldr	r0, [pc, #24]	; (800c72c <Set_Duty+0x54>)
 800c712:	f010 fbbb 	bl	801ce8c <HAL_TIM_OC_ConfigChannel>
}
 800c716:	bf00      	nop
 800c718:	bd80      	pop	{r7, pc}
 800c71a:	bf00      	nop
 800c71c:	20000274 	.word	0x20000274
 800c720:	08000b84 	.word	0x08000b84
 800c724:	66666667 	.word	0x66666667
 800c728:	2000790c 	.word	0x2000790c
 800c72c:	20007760 	.word	0x20007760

0800c730 <Set_Fout>:

/*******************************************************************************
 Set_Fout: �������Ƶ������
*******************************************************************************/
void Set_Fout(short Range)
{
 800c730:	b580      	push	{r7, lr}
 800c732:	b082      	sub	sp, #8
 800c734:	af00      	add	r7, sp, #0
 800c736:	4603      	mov	r3, r0
 800c738:	80fb      	strh	r3, [r7, #6]
	octim5.Pulse = (FARR[Range]+1)/2;
 800c73a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800c73e:	4a13      	ldr	r2, [pc, #76]	; (800c78c <Set_Fout+0x5c>)
 800c740:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800c744:	3301      	adds	r3, #1
 800c746:	0fda      	lsrs	r2, r3, #31
 800c748:	4413      	add	r3, r2
 800c74a:	105b      	asrs	r3, r3, #1
 800c74c:	461a      	mov	r2, r3
 800c74e:	4b10      	ldr	r3, [pc, #64]	; (800c790 <Set_Fout+0x60>)
 800c750:	605a      	str	r2, [r3, #4]
	HAL_TIM_OC_ConfigChannel(&htim5, &octim5, 3 );
 800c752:	2203      	movs	r2, #3
 800c754:	490e      	ldr	r1, [pc, #56]	; (800c790 <Set_Fout+0x60>)
 800c756:	480f      	ldr	r0, [pc, #60]	; (800c794 <Set_Fout+0x64>)
 800c758:	f010 fb98 	bl	801ce8c <HAL_TIM_OC_ConfigChannel>
	htim5.Init.Prescaler = FPSC[Range];
 800c75c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800c760:	4a0d      	ldr	r2, [pc, #52]	; (800c798 <Set_Fout+0x68>)
 800c762:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800c766:	461a      	mov	r2, r3
 800c768:	4b0a      	ldr	r3, [pc, #40]	; (800c794 <Set_Fout+0x64>)
 800c76a:	605a      	str	r2, [r3, #4]
	htim5.Init.Period = FARR[Range];
 800c76c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800c770:	4a06      	ldr	r2, [pc, #24]	; (800c78c <Set_Fout+0x5c>)
 800c772:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800c776:	461a      	mov	r2, r3
 800c778:	4b06      	ldr	r3, [pc, #24]	; (800c794 <Set_Fout+0x64>)
 800c77a:	60da      	str	r2, [r3, #12]
	HAL_TIM_Base_Init(&htim5);
 800c77c:	4805      	ldr	r0, [pc, #20]	; (800c794 <Set_Fout+0x64>)
 800c77e:	f010 f9bd 	bl	801cafc <HAL_TIM_Base_Init>
}
 800c782:	bf00      	nop
 800c784:	3708      	adds	r7, #8
 800c786:	46bd      	mov	sp, r7
 800c788:	bd80      	pop	{r7, pc}
 800c78a:	bf00      	nop
 800c78c:	08000b84 	.word	0x08000b84
 800c790:	2000790c 	.word	0x2000790c
 800c794:	20007760 	.word	0x20007760
 800c798:	08000b64 	.word	0x08000b64

0800c79c <ADC_Start>:

/*******************************************************************************
 ADC_Start: ���¿�ʼADCɨ�����
*******************************************************************************/
void ADC_Start(void)
{
 800c79c:	b480      	push	{r7}
 800c79e:	af00      	add	r7, sp, #0
  Sampl[0]   = List[TIM_BASE].Val;         // �������ʱ����λֵ
 800c7a0:	4b20      	ldr	r3, [pc, #128]	; (800c824 <ADC_Start+0x88>)
 800c7a2:	f9b3 203c 	ldrsh.w	r2, [r3, #60]	; 0x3c
 800c7a6:	4b20      	ldr	r3, [pc, #128]	; (800c828 <ADC_Start+0x8c>)
 800c7a8:	801a      	strh	r2, [r3, #0]
  __HAL_DMA_DISABLE(&hdma_adc1);  //  DMA1_Channel1->CCR   &= 0xFFFFFFFFE;
 800c7aa:	4b20      	ldr	r3, [pc, #128]	; (800c82c <ADC_Start+0x90>)
 800c7ac:	681b      	ldr	r3, [r3, #0]
 800c7ae:	681a      	ldr	r2, [r3, #0]
 800c7b0:	4b1e      	ldr	r3, [pc, #120]	; (800c82c <ADC_Start+0x90>)
 800c7b2:	681b      	ldr	r3, [r3, #0]
 800c7b4:	f022 0201 	bic.w	r2, r2, #1
 800c7b8:	601a      	str	r2, [r3, #0]
  hdma_adc1.Instance->M0AR = (unsigned)&Sampl[2];//  DMA1_Channel1->CMAR  = (u32)&Sampl[2];      // �����趨DMAͨ��1
 800c7ba:	4b1c      	ldr	r3, [pc, #112]	; (800c82c <ADC_Start+0x90>)
 800c7bc:	681b      	ldr	r3, [r3, #0]
 800c7be:	4a1c      	ldr	r2, [pc, #112]	; (800c830 <ADC_Start+0x94>)
 800c7c0:	60da      	str	r2, [r3, #12]
  if(( List[SYNCMODE].Val == NONE|| List[SYNCMODE].Val == SCAN)
 800c7c2:	4b18      	ldr	r3, [pc, #96]	; (800c824 <ADC_Start+0x88>)
 800c7c4:	f9b3 306c 	ldrsh.w	r3, [r3, #108]	; 0x6c
 800c7c8:	2b05      	cmp	r3, #5
 800c7ca:	d004      	beq.n	800c7d6 <ADC_Start+0x3a>
 800c7cc:	4b15      	ldr	r3, [pc, #84]	; (800c824 <ADC_Start+0x88>)
 800c7ce:	f9b3 306c 	ldrsh.w	r3, [r3, #108]	; 0x6c
 800c7d2:	2b01      	cmp	r3, #1
 800c7d4:	d10e      	bne.n	800c7f4 <ADC_Start+0x58>
     &&( List[TIM_BASE].Val>11))
 800c7d6:	4b13      	ldr	r3, [pc, #76]	; (800c824 <ADC_Start+0x88>)
 800c7d8:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800c7dc:	2b0b      	cmp	r3, #11
 800c7de:	dd09      	ble.n	800c7f4 <ADC_Start+0x58>
     {
	  __HAL_DMA_SET_COUNTER(&hdma_adc1, 302);  //       DMA1_Channel1->CNDTR  = 302;                       //10ms
 800c7e0:	4b12      	ldr	r3, [pc, #72]	; (800c82c <ADC_Start+0x90>)
 800c7e2:	681b      	ldr	r3, [r3, #0]
 800c7e4:	f44f 7297 	mov.w	r2, #302	; 0x12e
 800c7e8:	605a      	str	r2, [r3, #4]
       List[VIEWPOSI].Val= 0;
 800c7ea:	4b0e      	ldr	r3, [pc, #56]	; (800c824 <ADC_Start+0x88>)
 800c7ec:	2200      	movs	r2, #0
 800c7ee:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
 800c7f2:	e00a      	b.n	800c80a <ADC_Start+0x6e>
     }
  else
  __HAL_DMA_SET_COUNTER(&hdma_adc1, DEPTH[List[SMPL_DPTH].Val]);//    DMA1_Channel1->CNDTR = DEPTH[List[SMPL_DPTH].Val]; // 0x00001000;
 800c7f4:	4b0b      	ldr	r3, [pc, #44]	; (800c824 <ADC_Start+0x88>)
 800c7f6:	f9b3 304c 	ldrsh.w	r3, [r3, #76]	; 0x4c
 800c7fa:	461a      	mov	r2, r3
 800c7fc:	4b0d      	ldr	r3, [pc, #52]	; (800c834 <ADC_Start+0x98>)
 800c7fe:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 800c802:	b29a      	uxth	r2, r3
 800c804:	4b09      	ldr	r3, [pc, #36]	; (800c82c <ADC_Start+0x90>)
 800c806:	681b      	ldr	r3, [r3, #0]
 800c808:	605a      	str	r2, [r3, #4]
  __HAL_DMA_ENABLE(&hdma_adc1);  //  DMA1_Channel1->CCR  |= 0x00000001;                 // ���¿�ʼɨ�����
 800c80a:	4b08      	ldr	r3, [pc, #32]	; (800c82c <ADC_Start+0x90>)
 800c80c:	681b      	ldr	r3, [r3, #0]
 800c80e:	681a      	ldr	r2, [r3, #0]
 800c810:	4b06      	ldr	r3, [pc, #24]	; (800c82c <ADC_Start+0x90>)
 800c812:	681b      	ldr	r3, [r3, #0]
 800c814:	f042 0201 	orr.w	r2, r2, #1
 800c818:	601a      	str	r2, [r3, #0]
}
 800c81a:	bf00      	nop
 800c81c:	46bd      	mov	sp, r7
 800c81e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c822:	4770      	bx	lr
 800c824:	20000274 	.word	0x20000274
 800c828:	2000369c 	.word	0x2000369c
 800c82c:	2000793c 	.word	0x2000793c
 800c830:	200036a0 	.word	0x200036a0
 800c834:	0800230c 	.word	0x0800230c

0800c838 <Valid_Button>:

// returns 0 if invalad or code
char Valid_Button(short x,short y)
{
 800c838:	b480      	push	{r7}
 800c83a:	b085      	sub	sp, #20
 800c83c:	af00      	add	r7, sp, #0
 800c83e:	4603      	mov	r3, r0
 800c840:	460a      	mov	r2, r1
 800c842:	80fb      	strh	r3, [r7, #6]
 800c844:	4613      	mov	r3, r2
 800c846:	80bb      	strh	r3, [r7, #4]
	char valid;
	valid =0;
 800c848:	2300      	movs	r3, #0
 800c84a:	73fb      	strb	r3, [r7, #15]

	x=x/4;
 800c84c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800c850:	2b00      	cmp	r3, #0
 800c852:	da00      	bge.n	800c856 <Valid_Button+0x1e>
 800c854:	3303      	adds	r3, #3
 800c856:	109b      	asrs	r3, r3, #2
 800c858:	80fb      	strh	r3, [r7, #6]
	y=y/4;
 800c85a:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800c85e:	2b00      	cmp	r3, #0
 800c860:	da00      	bge.n	800c864 <Valid_Button+0x2c>
 800c862:	3303      	adds	r3, #3
 800c864:	109b      	asrs	r3, r3, #2
 800c866:	80bb      	strh	r3, [r7, #4]

	if(y<=205)  //lower screen
 800c868:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800c86c:	2bcd      	cmp	r3, #205	; 0xcd
 800c86e:	dc17      	bgt.n	800c8a0 <Valid_Button+0x68>
	{
		if((x>359) && (x<664))  //middle screen bottom
 800c870:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800c874:	f5b3 7fb4 	cmp.w	r3, #360	; 0x168
 800c878:	db06      	blt.n	800c888 <Valid_Button+0x50>
 800c87a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800c87e:	f5b3 7f26 	cmp.w	r3, #664	; 0x298
 800c882:	da01      	bge.n	800c888 <Valid_Button+0x50>
			valid =KEYCODE_DOWN;
 800c884:	2304      	movs	r3, #4
 800c886:	73fb      	strb	r3, [r7, #15]
		if((x <= 205)||(x >= 818)) //left or right screen
 800c888:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800c88c:	2bcd      	cmp	r3, #205	; 0xcd
 800c88e:	dd05      	ble.n	800c89c <Valid_Button+0x64>
 800c890:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800c894:	f240 3231 	movw	r2, #817	; 0x331
 800c898:	4293      	cmp	r3, r2
 800c89a:	dd01      	ble.n	800c8a0 <Valid_Button+0x68>
			valid = KEYCODE_MANU;
 800c89c:	2302      	movs	r3, #2
 800c89e:	73fb      	strb	r3, [r7, #15]
	}

	if(y >= 818)  //upper screen
 800c8a0:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800c8a4:	f240 3231 	movw	r2, #817	; 0x331
 800c8a8:	4293      	cmp	r3, r2
 800c8aa:	dd17      	ble.n	800c8dc <Valid_Button+0xa4>
	{
		if((x>359) && (x<664))  //middle screen up
 800c8ac:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800c8b0:	f5b3 7fb4 	cmp.w	r3, #360	; 0x168
 800c8b4:	db06      	blt.n	800c8c4 <Valid_Button+0x8c>
 800c8b6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800c8ba:	f5b3 7f26 	cmp.w	r3, #664	; 0x298
 800c8be:	da01      	bge.n	800c8c4 <Valid_Button+0x8c>
			valid =KEYCODE_UP;
 800c8c0:	2303      	movs	r3, #3
 800c8c2:	73fb      	strb	r3, [r7, #15]
		if((x <= 205)||(x >= 818)) //left or right screen
 800c8c4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800c8c8:	2bcd      	cmp	r3, #205	; 0xcd
 800c8ca:	dd05      	ble.n	800c8d8 <Valid_Button+0xa0>
 800c8cc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800c8d0:	f240 3231 	movw	r2, #817	; 0x331
 800c8d4:	4293      	cmp	r3, r2
 800c8d6:	dd01      	ble.n	800c8dc <Valid_Button+0xa4>
			valid = KEYCODE_PLAY;
 800c8d8:	2301      	movs	r3, #1
 800c8da:	73fb      	strb	r3, [r7, #15]
	}

	if((y>409) && (y<613))  //middle screen
 800c8dc:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800c8e0:	f5b3 7fcd 	cmp.w	r3, #410	; 0x19a
 800c8e4:	db12      	blt.n	800c90c <Valid_Button+0xd4>
 800c8e6:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800c8ea:	f5b3 7f19 	cmp.w	r3, #612	; 0x264
 800c8ee:	dc0d      	bgt.n	800c90c <Valid_Button+0xd4>
	{
		if(x <= 306) //left screen
 800c8f0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800c8f4:	f5b3 7f99 	cmp.w	r3, #306	; 0x132
 800c8f8:	dc01      	bgt.n	800c8fe <Valid_Button+0xc6>
			valid=KEYCODE_LEFT;
 800c8fa:	2305      	movs	r3, #5
 800c8fc:	73fb      	strb	r3, [r7, #15]
		if(x >= 717) //right screen
 800c8fe:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800c902:	f5b3 7f33 	cmp.w	r3, #716	; 0x2cc
 800c906:	dd01      	ble.n	800c90c <Valid_Button+0xd4>
			valid=KEYCODE_RIGHT;
 800c908:	2306      	movs	r3, #6
 800c90a:	73fb      	strb	r3, [r7, #15]
	}

	return valid;
 800c90c:	7bfb      	ldrb	r3, [r7, #15]
}
 800c90e:	4618      	mov	r0, r3
 800c910:	3714      	adds	r7, #20
 800c912:	46bd      	mov	sp, r7
 800c914:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c918:	4770      	bx	lr
	...

0800c91c <touchscan>:
//touchscan -- maps touch to key codes  returns 0 if no change
char touchscan(void)
{
 800c91c:	b580      	push	{r7, lr}
 800c91e:	b082      	sub	sp, #8
 800c920:	af00      	add	r7, sp, #0
	short x,y;
	char Code, TmpCode, Touched;

	TmpCode = Code =0;
 800c922:	2300      	movs	r3, #0
 800c924:	71fb      	strb	r3, [r7, #7]
 800c926:	79fb      	ldrb	r3, [r7, #7]
 800c928:	71bb      	strb	r3, [r7, #6]
	Touched = Touch_Read(&x,&y);
 800c92a:	463a      	mov	r2, r7
 800c92c:	1cbb      	adds	r3, r7, #2
 800c92e:	4611      	mov	r1, r2
 800c930:	4618      	mov	r0, r3
 800c932:	f009 f8bb 	bl	8015aac <Touch_Read>
 800c936:	4603      	mov	r3, r0
 800c938:	717b      	strb	r3, [r7, #5]

	if(Touched!=0)
 800c93a:	797b      	ldrb	r3, [r7, #5]
 800c93c:	2b00      	cmp	r3, #0
 800c93e:	f000 8087 	beq.w	800ca50 <touchscan+0x134>
	{  // there was a touch
		TmpCode = Valid_Button(x, y);
 800c942:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800c946:	f9b7 2000 	ldrsh.w	r2, [r7]
 800c94a:	4611      	mov	r1, r2
 800c94c:	4618      	mov	r0, r3
 800c94e:	f7ff ff73 	bl	800c838 <Valid_Button>
 800c952:	4603      	mov	r3, r0
 800c954:	71bb      	strb	r3, [r7, #6]
		if((TmpCode!=0) && (TmpCode != Lastcode))  //changed to pressed
 800c956:	79bb      	ldrb	r3, [r7, #6]
 800c958:	2b00      	cmp	r3, #0
 800c95a:	d03c      	beq.n	800c9d6 <touchscan+0xba>
 800c95c:	4b62      	ldr	r3, [pc, #392]	; (800cae8 <touchscan+0x1cc>)
 800c95e:	781b      	ldrb	r3, [r3, #0]
 800c960:	b2db      	uxtb	r3, r3
 800c962:	79ba      	ldrb	r2, [r7, #6]
 800c964:	429a      	cmp	r2, r3
 800c966:	d036      	beq.n	800c9d6 <touchscan+0xba>
		{
		    Key_Wait_Cnt   = 50;                              // ���ó������� 1.0S ����
 800c968:	4b60      	ldr	r3, [pc, #384]	; (800caec <touchscan+0x1d0>)
 800c96a:	2232      	movs	r2, #50	; 0x32
 800c96c:	701a      	strb	r2, [r3, #0]
		    Key_Repeat_Cnt = 3;                               // �趨 60mS �Զ��ظ�����
 800c96e:	4b60      	ldr	r3, [pc, #384]	; (800caf0 <touchscan+0x1d4>)
 800c970:	2203      	movs	r2, #3
 800c972:	701a      	strb	r2, [r3, #0]
		    if(TmpCode == KEYCODE_PLAY)
 800c974:	79bb      	ldrb	r3, [r7, #6]
 800c976:	2b01      	cmp	r3, #1
 800c978:	d102      	bne.n	800c980 <touchscan+0x64>
		    	TmpKeyP = KEYCODE_PLAY;        // KeyCode(Play/A)
 800c97a:	4b5e      	ldr	r3, [pc, #376]	; (800caf4 <touchscan+0x1d8>)
 800c97c:	2201      	movs	r2, #1
 800c97e:	701a      	strb	r2, [r3, #0]
		    if(TmpCode == KEYCODE_MANU)
 800c980:	79bb      	ldrb	r3, [r7, #6]
 800c982:	2b02      	cmp	r3, #2
 800c984:	d121      	bne.n	800c9ca <touchscan+0xae>
		    {
		        if(KeymS_F)
 800c986:	4b5c      	ldr	r3, [pc, #368]	; (800caf8 <touchscan+0x1dc>)
 800c988:	781b      	ldrb	r3, [r3, #0]
 800c98a:	2b00      	cmp	r3, #0
 800c98c:	d013      	beq.n	800c9b6 <touchscan+0x9a>
		        {                            // OK��˫��
		             KeymS_F = 0;                        //�������ʱ��־��KeymS_Cnt��ʱ
 800c98e:	4b5a      	ldr	r3, [pc, #360]	; (800caf8 <touchscan+0x1dc>)
 800c990:	2200      	movs	r2, #0
 800c992:	701a      	strb	r2, [r3, #0]
		             if(KeymS_Cnt < KEYTIME)
 800c994:	4b59      	ldr	r3, [pc, #356]	; (800cafc <touchscan+0x1e0>)
 800c996:	881b      	ldrh	r3, [r3, #0]
 800c998:	b21a      	sxth	r2, r3
 800c99a:	4b59      	ldr	r3, [pc, #356]	; (800cb00 <touchscan+0x1e4>)
 800c99c:	f9b3 3000 	ldrsh.w	r3, [r3]
 800c9a0:	429a      	cmp	r2, r3
 800c9a2:	da02      	bge.n	800c9aa <touchscan+0x8e>
		             {            // KEYTIME�������������μ���Ϊ˫��
		                  Code = KEYCODE_D_MANU;
 800c9a4:	230a      	movs	r3, #10
 800c9a6:	71fb      	strb	r3, [r7, #7]
 800c9a8:	e001      	b.n	800c9ae <touchscan+0x92>
		             }
		             else
		             {
		                  Code = KEYCODE_MANU;
 800c9aa:	2302      	movs	r3, #2
 800c9ac:	71fb      	strb	r3, [r7, #7]
		             }
		             KeymS_Cnt = 0;
 800c9ae:	4b53      	ldr	r3, [pc, #332]	; (800cafc <touchscan+0x1e0>)
 800c9b0:	2200      	movs	r2, #0
 800c9b2:	801a      	strh	r2, [r3, #0]
		    if(TmpCode == KEYCODE_MANU)
 800c9b4:	e04b      	b.n	800ca4e <touchscan+0x132>
		        }
		        else
		        {                                  // OK��˫��
		                KeymS_Cnt = 0;
 800c9b6:	4b51      	ldr	r3, [pc, #324]	; (800cafc <touchscan+0x1e0>)
 800c9b8:	2200      	movs	r2, #0
 800c9ba:	801a      	strh	r2, [r3, #0]
		                KeymS_F = 1;
 800c9bc:	4b4e      	ldr	r3, [pc, #312]	; (800caf8 <touchscan+0x1dc>)
 800c9be:	2201      	movs	r2, #1
 800c9c0:	701a      	strb	r2, [r3, #0]
		                TmpKeyOK = KEYCODE_MANU;
 800c9c2:	4b50      	ldr	r3, [pc, #320]	; (800cb04 <touchscan+0x1e8>)
 800c9c4:	2202      	movs	r2, #2
 800c9c6:	701a      	strb	r2, [r3, #0]
		    if(TmpCode == KEYCODE_MANU)
 800c9c8:	e041      	b.n	800ca4e <touchscan+0x132>
		        }
		    }
		    else
		    {
			    if(TmpCode != KEYCODE_PLAY)
 800c9ca:	79bb      	ldrb	r3, [r7, #6]
 800c9cc:	2b01      	cmp	r3, #1
 800c9ce:	d03e      	beq.n	800ca4e <touchscan+0x132>
			    	Code = TmpCode;
 800c9d0:	79bb      	ldrb	r3, [r7, #6]
 800c9d2:	71fb      	strb	r3, [r7, #7]
		    if(TmpCode == KEYCODE_MANU)
 800c9d4:	e03b      	b.n	800ca4e <touchscan+0x132>
		    }
		}
		else
		{
			if(TmpCode != 0)  // same press
 800c9d6:	79bb      	ldrb	r3, [r7, #6]
 800c9d8:	2b00      	cmp	r3, #0
 800c9da:	d039      	beq.n	800ca50 <touchscan+0x134>
			{
			      if((Key_Wait_Cnt < 25)&&(Key_Repeat_Cnt == 0))
 800c9dc:	4b43      	ldr	r3, [pc, #268]	; (800caec <touchscan+0x1d0>)
 800c9de:	781b      	ldrb	r3, [r3, #0]
 800c9e0:	b2db      	uxtb	r3, r3
 800c9e2:	2b18      	cmp	r3, #24
 800c9e4:	d80f      	bhi.n	800ca06 <touchscan+0xea>
 800c9e6:	4b42      	ldr	r3, [pc, #264]	; (800caf0 <touchscan+0x1d4>)
 800c9e8:	781b      	ldrb	r3, [r3, #0]
 800c9ea:	b2db      	uxtb	r3, r3
 800c9ec:	2b00      	cmp	r3, #0
 800c9ee:	d10a      	bne.n	800ca06 <touchscan+0xea>
			      { // �������� 0.5S ����
			    	  if((TmpCode != KEYCODE_PLAY) && (TmpCode != KEYCODE_MANU))
 800c9f0:	79bb      	ldrb	r3, [r7, #6]
 800c9f2:	2b01      	cmp	r3, #1
 800c9f4:	d007      	beq.n	800ca06 <touchscan+0xea>
 800c9f6:	79bb      	ldrb	r3, [r7, #6]
 800c9f8:	2b02      	cmp	r3, #2
 800c9fa:	d004      	beq.n	800ca06 <touchscan+0xea>
			    	  {
						  Key_Repeat_Cnt = 3;        // �趨 60mS �Զ��ظ�����
 800c9fc:	4b3c      	ldr	r3, [pc, #240]	; (800caf0 <touchscan+0x1d4>)
 800c9fe:	2203      	movs	r2, #3
 800ca00:	701a      	strb	r2, [r3, #0]
						  Code = TmpCode;
 800ca02:	79bb      	ldrb	r3, [r7, #6]
 800ca04:	71fb      	strb	r3, [r7, #7]
					  }
			      }
			      if((Key_Wait_Cnt == 0)&&(Key_Repeat_Cnt == 0))
 800ca06:	4b39      	ldr	r3, [pc, #228]	; (800caec <touchscan+0x1d0>)
 800ca08:	781b      	ldrb	r3, [r3, #0]
 800ca0a:	b2db      	uxtb	r3, r3
 800ca0c:	2b00      	cmp	r3, #0
 800ca0e:	d11f      	bne.n	800ca50 <touchscan+0x134>
 800ca10:	4b37      	ldr	r3, [pc, #220]	; (800caf0 <touchscan+0x1d4>)
 800ca12:	781b      	ldrb	r3, [r3, #0]
 800ca14:	b2db      	uxtb	r3, r3
 800ca16:	2b00      	cmp	r3, #0
 800ca18:	d11a      	bne.n	800ca50 <touchscan+0x134>
			      { // �������� 1.0S ����
			    	  if((TmpCode == KEYCODE_PLAY) || (TmpCode == KEYCODE_MANU))
 800ca1a:	79bb      	ldrb	r3, [r7, #6]
 800ca1c:	2b01      	cmp	r3, #1
 800ca1e:	d002      	beq.n	800ca26 <touchscan+0x10a>
 800ca20:	79bb      	ldrb	r3, [r7, #6]
 800ca22:	2b02      	cmp	r3, #2
 800ca24:	d114      	bne.n	800ca50 <touchscan+0x134>
			    	  {
			    		  if(TmpCode == KEYCODE_PLAY)
 800ca26:	79bb      	ldrb	r3, [r7, #6]
 800ca28:	2b01      	cmp	r3, #1
 800ca2a:	d104      	bne.n	800ca36 <touchscan+0x11a>
			    		  {
			    			  Code = KEYCODE_ACT; TmpKeyP = 0;
 800ca2c:	2308      	movs	r3, #8
 800ca2e:	71fb      	strb	r3, [r7, #7]
 800ca30:	4b30      	ldr	r3, [pc, #192]	; (800caf4 <touchscan+0x1d8>)
 800ca32:	2200      	movs	r2, #0
 800ca34:	701a      	strb	r2, [r3, #0]
			    		  }
			    		  if(TmpCode == KEYCODE_MANU)
 800ca36:	79bb      	ldrb	r3, [r7, #6]
 800ca38:	2b02      	cmp	r3, #2
 800ca3a:	d104      	bne.n	800ca46 <touchscan+0x12a>
			    		  {
			    			  Code = KEYCODE_MEM; TmpKeyM = 0;
 800ca3c:	2309      	movs	r3, #9
 800ca3e:	71fb      	strb	r3, [r7, #7]
 800ca40:	4b31      	ldr	r3, [pc, #196]	; (800cb08 <touchscan+0x1ec>)
 800ca42:	2200      	movs	r2, #0
 800ca44:	701a      	strb	r2, [r3, #0]
			    		  }
			         	  Key_Repeat_Cnt = 50;       //�趨 1.0S �Զ��ظ�����
 800ca46:	4b2a      	ldr	r3, [pc, #168]	; (800caf0 <touchscan+0x1d4>)
 800ca48:	2232      	movs	r2, #50	; 0x32
 800ca4a:	701a      	strb	r2, [r3, #0]
 800ca4c:	e000      	b.n	800ca50 <touchscan+0x134>
		    if(TmpCode == KEYCODE_MANU)
 800ca4e:	bf00      	nop
			    	  }
			      }
			}
		}
	}
	if((Touched == 0)||((TmpCode == 0) && (TmpCode == Lastcode)))
 800ca50:	797b      	ldrb	r3, [r7, #5]
 800ca52:	2b00      	cmp	r3, #0
 800ca54:	d008      	beq.n	800ca68 <touchscan+0x14c>
 800ca56:	79bb      	ldrb	r3, [r7, #6]
 800ca58:	2b00      	cmp	r3, #0
 800ca5a:	d13c      	bne.n	800cad6 <touchscan+0x1ba>
 800ca5c:	4b22      	ldr	r3, [pc, #136]	; (800cae8 <touchscan+0x1cc>)
 800ca5e:	781b      	ldrb	r3, [r3, #0]
 800ca60:	b2db      	uxtb	r3, r3
 800ca62:	79ba      	ldrb	r2, [r7, #6]
 800ca64:	429a      	cmp	r2, r3
 800ca66:	d136      	bne.n	800cad6 <touchscan+0x1ba>
	{  // untouched
	    if(TmpKeyP)
 800ca68:	4b22      	ldr	r3, [pc, #136]	; (800caf4 <touchscan+0x1d8>)
 800ca6a:	781b      	ldrb	r3, [r3, #0]
 800ca6c:	b2db      	uxtb	r3, r3
 800ca6e:	2b00      	cmp	r3, #0
 800ca70:	d005      	beq.n	800ca7e <touchscan+0x162>
	    {
	    	Code = TmpKeyP;
 800ca72:	4b20      	ldr	r3, [pc, #128]	; (800caf4 <touchscan+0x1d8>)
 800ca74:	781b      	ldrb	r3, [r3, #0]
 800ca76:	71fb      	strb	r3, [r7, #7]
	    	TmpKeyP = 0;
 800ca78:	4b1e      	ldr	r3, [pc, #120]	; (800caf4 <touchscan+0x1d8>)
 800ca7a:	2200      	movs	r2, #0
 800ca7c:	701a      	strb	r2, [r3, #0]
	    }
	    if(TmpKeyOK &&(KeymS_F)&& (KeymS_Cnt > KEYTIME))
 800ca7e:	4b21      	ldr	r3, [pc, #132]	; (800cb04 <touchscan+0x1e8>)
 800ca80:	781b      	ldrb	r3, [r3, #0]
 800ca82:	b2db      	uxtb	r3, r3
 800ca84:	2b00      	cmp	r3, #0
 800ca86:	d018      	beq.n	800caba <touchscan+0x19e>
 800ca88:	4b1b      	ldr	r3, [pc, #108]	; (800caf8 <touchscan+0x1dc>)
 800ca8a:	781b      	ldrb	r3, [r3, #0]
 800ca8c:	2b00      	cmp	r3, #0
 800ca8e:	d014      	beq.n	800caba <touchscan+0x19e>
 800ca90:	4b1a      	ldr	r3, [pc, #104]	; (800cafc <touchscan+0x1e0>)
 800ca92:	881b      	ldrh	r3, [r3, #0]
 800ca94:	b21a      	sxth	r2, r3
 800ca96:	4b1a      	ldr	r3, [pc, #104]	; (800cb00 <touchscan+0x1e4>)
 800ca98:	f9b3 3000 	ldrsh.w	r3, [r3]
 800ca9c:	429a      	cmp	r2, r3
 800ca9e:	dd0c      	ble.n	800caba <touchscan+0x19e>
	    {
	        Code = TmpKeyOK;
 800caa0:	4b18      	ldr	r3, [pc, #96]	; (800cb04 <touchscan+0x1e8>)
 800caa2:	781b      	ldrb	r3, [r3, #0]
 800caa4:	71fb      	strb	r3, [r7, #7]
	        TmpKeyOK  = 0;
 800caa6:	4b17      	ldr	r3, [pc, #92]	; (800cb04 <touchscan+0x1e8>)
 800caa8:	2200      	movs	r2, #0
 800caaa:	701a      	strb	r2, [r3, #0]
	        KeymS_F = 0;
 800caac:	4b12      	ldr	r3, [pc, #72]	; (800caf8 <touchscan+0x1dc>)
 800caae:	2200      	movs	r2, #0
 800cab0:	701a      	strb	r2, [r3, #0]
	        KeymS_Cnt = 0;
 800cab2:	4b12      	ldr	r3, [pc, #72]	; (800cafc <touchscan+0x1e0>)
 800cab4:	2200      	movs	r2, #0
 800cab6:	801a      	strh	r2, [r3, #0]
 800cab8:	e00a      	b.n	800cad0 <touchscan+0x1b4>
	    }
	    else
	    	if(TmpKeyM) {Code = TmpKeyM; TmpKeyM = 0;}
 800caba:	4b13      	ldr	r3, [pc, #76]	; (800cb08 <touchscan+0x1ec>)
 800cabc:	781b      	ldrb	r3, [r3, #0]
 800cabe:	b2db      	uxtb	r3, r3
 800cac0:	2b00      	cmp	r3, #0
 800cac2:	d005      	beq.n	800cad0 <touchscan+0x1b4>
 800cac4:	4b10      	ldr	r3, [pc, #64]	; (800cb08 <touchscan+0x1ec>)
 800cac6:	781b      	ldrb	r3, [r3, #0]
 800cac8:	71fb      	strb	r3, [r7, #7]
 800caca:	4b0f      	ldr	r3, [pc, #60]	; (800cb08 <touchscan+0x1ec>)
 800cacc:	2200      	movs	r2, #0
 800cace:	701a      	strb	r2, [r3, #0]
	        	Key_Wait_Cnt=50;                                //���ó������� 1.0S ����
 800cad0:	4b06      	ldr	r3, [pc, #24]	; (800caec <touchscan+0x1d0>)
 800cad2:	2232      	movs	r2, #50	; 0x32
 800cad4:	701a      	strb	r2, [r3, #0]
	}
	Lastcode = TmpCode;
 800cad6:	4a04      	ldr	r2, [pc, #16]	; (800cae8 <touchscan+0x1cc>)
 800cad8:	79bb      	ldrb	r3, [r7, #6]
 800cada:	7013      	strb	r3, [r2, #0]
	return Code;
 800cadc:	79fb      	ldrb	r3, [r7, #7]
}
 800cade:	4618      	mov	r0, r3
 800cae0:	3708      	adds	r7, #8
 800cae2:	46bd      	mov	sp, r7
 800cae4:	bd80      	pop	{r7, pc}
 800cae6:	bf00      	nop
 800cae8:	2000077e 	.word	0x2000077e
 800caec:	20000781 	.word	0x20000781
 800caf0:	20000780 	.word	0x20000780
 800caf4:	20000772 	.word	0x20000772
 800caf8:	2000077f 	.word	0x2000077f
 800cafc:	20001862 	.word	0x20001862
 800cb00:	20000776 	.word	0x20000776
 800cb04:	20000774 	.word	0x20000774
 800cb08:	20000773 	.word	0x20000773

0800cb0c <Tim3_ISP>:

/*******************************************************************************
* Tim3�жϴ������
*******************************************************************************/
void Tim3_ISP(void)
{
 800cb0c:	b580      	push	{r7, lr}
 800cb0e:	b082      	sub	sp, #8
 800cb10:	af00      	add	r7, sp, #0

	char checkpress;
    char KeyCode;

//  TIM3->SR = 0;          //moved to main //���жϱ�־
  if(KeymS_F)KeymS_Cnt++;                  //�������ʱ
 800cb12:	4b73      	ldr	r3, [pc, #460]	; (800cce0 <Tim3_ISP+0x1d4>)
 800cb14:	781b      	ldrb	r3, [r3, #0]
 800cb16:	2b00      	cmp	r3, #0
 800cb18:	d008      	beq.n	800cb2c <Tim3_ISP+0x20>
 800cb1a:	4b72      	ldr	r3, [pc, #456]	; (800cce4 <Tim3_ISP+0x1d8>)
 800cb1c:	881b      	ldrh	r3, [r3, #0]
 800cb1e:	b21b      	sxth	r3, r3
 800cb20:	b29b      	uxth	r3, r3
 800cb22:	3301      	adds	r3, #1
 800cb24:	b29b      	uxth	r3, r3
 800cb26:	b21a      	sxth	r2, r3
 800cb28:	4b6e      	ldr	r3, [pc, #440]	; (800cce4 <Tim3_ISP+0x1d8>)
 800cb2a:	801a      	strh	r2, [r3, #0]
  Tim_Cnt++;
 800cb2c:	4b6e      	ldr	r3, [pc, #440]	; (800cce8 <Tim3_ISP+0x1dc>)
 800cb2e:	881b      	ldrh	r3, [r3, #0]
 800cb30:	b21b      	sxth	r3, r3
 800cb32:	b29b      	uxth	r3, r3
 800cb34:	3301      	adds	r3, #1
 800cb36:	b29b      	uxth	r3, r3
 800cb38:	b21a      	sxth	r2, r3
 800cb3a:	4b6b      	ldr	r3, [pc, #428]	; (800cce8 <Tim3_ISP+0x1dc>)
 800cb3c:	801a      	strh	r2, [r3, #0]
  if(Delay_Cnt>0) Delay_Cnt--;
 800cb3e:	4b6b      	ldr	r3, [pc, #428]	; (800ccec <Tim3_ISP+0x1e0>)
 800cb40:	881b      	ldrh	r3, [r3, #0]
 800cb42:	b21b      	sxth	r3, r3
 800cb44:	2b00      	cmp	r3, #0
 800cb46:	dd08      	ble.n	800cb5a <Tim3_ISP+0x4e>
 800cb48:	4b68      	ldr	r3, [pc, #416]	; (800ccec <Tim3_ISP+0x1e0>)
 800cb4a:	881b      	ldrh	r3, [r3, #0]
 800cb4c:	b21b      	sxth	r3, r3
 800cb4e:	b29b      	uxth	r3, r3
 800cb50:	3b01      	subs	r3, #1
 800cb52:	b29b      	uxth	r3, r3
 800cb54:	b21a      	sxth	r2, r3
 800cb56:	4b65      	ldr	r3, [pc, #404]	; (800ccec <Tim3_ISP+0x1e0>)
 800cb58:	801a      	strh	r2, [r3, #0]
  if (mS_Cnt > 0)
 800cb5a:	4b65      	ldr	r3, [pc, #404]	; (800ccf0 <Tim3_ISP+0x1e4>)
 800cb5c:	881b      	ldrh	r3, [r3, #0]
 800cb5e:	b21b      	sxth	r3, r3
 800cb60:	2b00      	cmp	r3, #0
 800cb62:	f340 8081 	ble.w	800cc68 <Tim3_ISP+0x15c>
  {
    mS_Cnt--;
 800cb66:	4b62      	ldr	r3, [pc, #392]	; (800ccf0 <Tim3_ISP+0x1e4>)
 800cb68:	881b      	ldrh	r3, [r3, #0]
 800cb6a:	b21b      	sxth	r3, r3
 800cb6c:	b29b      	uxth	r3, r3
 800cb6e:	3b01      	subs	r3, #1
 800cb70:	b29b      	uxth	r3, r3
 800cb72:	b21a      	sxth	r2, r3
 800cb74:	4b5e      	ldr	r3, [pc, #376]	; (800ccf0 <Tim3_ISP+0x1e4>)
 800cb76:	801a      	strh	r2, [r3, #0]
    if ((mS_Cnt%20)== 0)
 800cb78:	4b5d      	ldr	r3, [pc, #372]	; (800ccf0 <Tim3_ISP+0x1e4>)
 800cb7a:	881b      	ldrh	r3, [r3, #0]
 800cb7c:	b21a      	sxth	r2, r3
 800cb7e:	4b5d      	ldr	r3, [pc, #372]	; (800ccf4 <Tim3_ISP+0x1e8>)
 800cb80:	fb83 1302 	smull	r1, r3, r3, r2
 800cb84:	10d9      	asrs	r1, r3, #3
 800cb86:	17d3      	asrs	r3, r2, #31
 800cb88:	1ac9      	subs	r1, r1, r3
 800cb8a:	460b      	mov	r3, r1
 800cb8c:	009b      	lsls	r3, r3, #2
 800cb8e:	440b      	add	r3, r1
 800cb90:	009b      	lsls	r3, r3, #2
 800cb92:	1ad3      	subs	r3, r2, r3
 800cb94:	b21b      	sxth	r3, r3
 800cb96:	2b00      	cmp	r3, #0
 800cb98:	f040 809d 	bne.w	800ccd6 <Tim3_ISP+0x1ca>
    {                 //  20mS  ÿ20mS��1�μ���
    	if(Key_Wait_Cnt)    Key_Wait_Cnt--;
 800cb9c:	4b56      	ldr	r3, [pc, #344]	; (800ccf8 <Tim3_ISP+0x1ec>)
 800cb9e:	781b      	ldrb	r3, [r3, #0]
 800cba0:	b2db      	uxtb	r3, r3
 800cba2:	2b00      	cmp	r3, #0
 800cba4:	d006      	beq.n	800cbb4 <Tim3_ISP+0xa8>
 800cba6:	4b54      	ldr	r3, [pc, #336]	; (800ccf8 <Tim3_ISP+0x1ec>)
 800cba8:	781b      	ldrb	r3, [r3, #0]
 800cbaa:	b2db      	uxtb	r3, r3
 800cbac:	3b01      	subs	r3, #1
 800cbae:	b2da      	uxtb	r2, r3
 800cbb0:	4b51      	ldr	r3, [pc, #324]	; (800ccf8 <Tim3_ISP+0x1ec>)
 800cbb2:	701a      	strb	r2, [r3, #0]
    	if(Key_Repeat_Cnt)  Key_Repeat_Cnt--;
 800cbb4:	4b51      	ldr	r3, [pc, #324]	; (800ccfc <Tim3_ISP+0x1f0>)
 800cbb6:	781b      	ldrb	r3, [r3, #0]
 800cbb8:	b2db      	uxtb	r3, r3
 800cbba:	2b00      	cmp	r3, #0
 800cbbc:	d006      	beq.n	800cbcc <Tim3_ISP+0xc0>
 800cbbe:	4b4f      	ldr	r3, [pc, #316]	; (800ccfc <Tim3_ISP+0x1f0>)
 800cbc0:	781b      	ldrb	r3, [r3, #0]
 800cbc2:	b2db      	uxtb	r3, r3
 800cbc4:	3b01      	subs	r3, #1
 800cbc6:	b2da      	uxtb	r2, r3
 800cbc8:	4b4c      	ldr	r3, [pc, #304]	; (800ccfc <Tim3_ISP+0x1f0>)
 800cbca:	701a      	strb	r2, [r3, #0]
    	KeyCode = checkpress =0 ;
 800cbcc:	2300      	movs	r3, #0
 800cbce:	71fb      	strb	r3, [r7, #7]
 800cbd0:	79fb      	ldrb	r3, [r7, #7]
 800cbd2:	71bb      	strb	r3, [r7, #6]
    	Touch = HAL_GPIO_ReadPin(TpI_GPIO_Port, TpI_Pin);  //read pen
 800cbd4:	f44f 7180 	mov.w	r1, #256	; 0x100
 800cbd8:	4849      	ldr	r0, [pc, #292]	; (800cd00 <Tim3_ISP+0x1f4>)
 800cbda:	f00c fe35 	bl	8019848 <HAL_GPIO_ReadPin>
 800cbde:	4603      	mov	r3, r0
 800cbe0:	461a      	mov	r2, r3
 800cbe2:	4b48      	ldr	r3, [pc, #288]	; (800cd04 <Tim3_ISP+0x1f8>)
 800cbe4:	701a      	strb	r2, [r3, #0]
    	if (Touch != LastTouch)
 800cbe6:	4b47      	ldr	r3, [pc, #284]	; (800cd04 <Tim3_ISP+0x1f8>)
 800cbe8:	781a      	ldrb	r2, [r3, #0]
 800cbea:	4b47      	ldr	r3, [pc, #284]	; (800cd08 <Tim3_ISP+0x1fc>)
 800cbec:	781b      	ldrb	r3, [r3, #0]
 800cbee:	429a      	cmp	r2, r3
 800cbf0:	d006      	beq.n	800cc00 <Tim3_ISP+0xf4>
    	{
    	// pen changed
    		checkpress =1; //check pressure if pen changed
 800cbf2:	2301      	movs	r3, #1
 800cbf4:	71fb      	strb	r3, [r7, #7]
    		LastTouch = Touch;
 800cbf6:	4b43      	ldr	r3, [pc, #268]	; (800cd04 <Tim3_ISP+0x1f8>)
 800cbf8:	781a      	ldrb	r2, [r3, #0]
 800cbfa:	4b43      	ldr	r3, [pc, #268]	; (800cd08 <Tim3_ISP+0x1fc>)
 800cbfc:	701a      	strb	r2, [r3, #0]
 800cbfe:	e005      	b.n	800cc0c <Tim3_ISP+0x100>
    	}
    	else
    	{
    	  if(Touch != 0)
 800cc00:	4b40      	ldr	r3, [pc, #256]	; (800cd04 <Tim3_ISP+0x1f8>)
 800cc02:	781b      	ldrb	r3, [r3, #0]
 800cc04:	2b00      	cmp	r3, #0
 800cc06:	d001      	beq.n	800cc0c <Tim3_ISP+0x100>
    	  {
    	    //check that press is valid
    		checkpress =1;
 800cc08:	2301      	movs	r3, #1
 800cc0a:	71fb      	strb	r3, [r7, #7]
    	  }
    	}

    	if(checkpress !=0)
 800cc0c:	79fb      	ldrb	r3, [r7, #7]
 800cc0e:	2b00      	cmp	r3, #0
 800cc10:	d003      	beq.n	800cc1a <Tim3_ISP+0x10e>
    	{
    		KeyCode = touchscan();
 800cc12:	f7ff fe83 	bl	800c91c <touchscan>
 800cc16:	4603      	mov	r3, r0
 800cc18:	71bb      	strb	r3, [r7, #6]
       	}
//      KeyCode = KeyScan();
      if(KeyCode !=0) Key_Buffer = KeyCode;
 800cc1a:	79bb      	ldrb	r3, [r7, #6]
 800cc1c:	2b00      	cmp	r3, #0
 800cc1e:	d002      	beq.n	800cc26 <Tim3_ISP+0x11a>
 800cc20:	4a3a      	ldr	r2, [pc, #232]	; (800cd0c <Tim3_ISP+0x200>)
 800cc22:	79bb      	ldrb	r3, [r7, #6]
 800cc24:	7013      	strb	r3, [r2, #0]

      if(Cursor_Cnt >0)
 800cc26:	4b3a      	ldr	r3, [pc, #232]	; (800cd10 <Tim3_ISP+0x204>)
 800cc28:	881b      	ldrh	r3, [r3, #0]
 800cc2a:	b21b      	sxth	r3, r3
 800cc2c:	2b00      	cmp	r3, #0
 800cc2e:	dd09      	ble.n	800cc44 <Tim3_ISP+0x138>
    	  Cursor_Cnt--;
 800cc30:	4b37      	ldr	r3, [pc, #220]	; (800cd10 <Tim3_ISP+0x204>)
 800cc32:	881b      	ldrh	r3, [r3, #0]
 800cc34:	b21b      	sxth	r3, r3
 800cc36:	b29b      	uxth	r3, r3
 800cc38:	3b01      	subs	r3, #1
 800cc3a:	b29b      	uxth	r3, r3
 800cc3c:	b21a      	sxth	r2, r3
 800cc3e:	4b34      	ldr	r3, [pc, #208]	; (800cd10 <Tim3_ISP+0x204>)
 800cc40:	801a      	strh	r2, [r3, #0]
        Windows_Pop = 0;
        Clr_WavePosi(DAR);
      }
    }
  }
}
 800cc42:	e048      	b.n	800ccd6 <Tim3_ISP+0x1ca>
        Cursor_Cnt = 12;                  // 12*20mS=240mS
 800cc44:	4b32      	ldr	r3, [pc, #200]	; (800cd10 <Tim3_ISP+0x204>)
 800cc46:	220c      	movs	r2, #12
 800cc48:	801a      	strh	r2, [r3, #0]
        Twink = !Twink;
 800cc4a:	4b32      	ldr	r3, [pc, #200]	; (800cd14 <Tim3_ISP+0x208>)
 800cc4c:	781b      	ldrb	r3, [r3, #0]
 800cc4e:	b2db      	uxtb	r3, r3
 800cc50:	2b00      	cmp	r3, #0
 800cc52:	bf0c      	ite	eq
 800cc54:	2301      	moveq	r3, #1
 800cc56:	2300      	movne	r3, #0
 800cc58:	b2db      	uxtb	r3, r3
 800cc5a:	461a      	mov	r2, r3
 800cc5c:	4b2d      	ldr	r3, [pc, #180]	; (800cd14 <Tim3_ISP+0x208>)
 800cc5e:	701a      	strb	r2, [r3, #0]
        Blink =  BLINK;
 800cc60:	4b2d      	ldr	r3, [pc, #180]	; (800cd18 <Tim3_ISP+0x20c>)
 800cc62:	2201      	movs	r2, #1
 800cc64:	701a      	strb	r2, [r3, #0]
}
 800cc66:	e036      	b.n	800ccd6 <Tim3_ISP+0x1ca>
    mS_Cnt = 1000;
 800cc68:	4b21      	ldr	r3, [pc, #132]	; (800ccf0 <Tim3_ISP+0x1e4>)
 800cc6a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800cc6e:	801a      	strh	r2, [r3, #0]
    if((List[STANDBY].Val !=0) && (StdBy_Time > 0))
 800cc70:	4b2a      	ldr	r3, [pc, #168]	; (800cd1c <Tim3_ISP+0x210>)
 800cc72:	f9b3 314c 	ldrsh.w	r3, [r3, #332]	; 0x14c
 800cc76:	2b00      	cmp	r3, #0
 800cc78:	d00d      	beq.n	800cc96 <Tim3_ISP+0x18a>
 800cc7a:	4b29      	ldr	r3, [pc, #164]	; (800cd20 <Tim3_ISP+0x214>)
 800cc7c:	f9b3 3000 	ldrsh.w	r3, [r3]
 800cc80:	2b00      	cmp	r3, #0
 800cc82:	dd08      	ble.n	800cc96 <Tim3_ISP+0x18a>
      StdBy_Time--;      //������ʱ
 800cc84:	4b26      	ldr	r3, [pc, #152]	; (800cd20 <Tim3_ISP+0x214>)
 800cc86:	f9b3 3000 	ldrsh.w	r3, [r3]
 800cc8a:	b29b      	uxth	r3, r3
 800cc8c:	3b01      	subs	r3, #1
 800cc8e:	b29b      	uxth	r3, r3
 800cc90:	b21a      	sxth	r2, r3
 800cc92:	4b23      	ldr	r3, [pc, #140]	; (800cd20 <Tim3_ISP+0x214>)
 800cc94:	801a      	strh	r2, [r3, #0]
    if(PopupCnt > 0)
 800cc96:	4b23      	ldr	r3, [pc, #140]	; (800cd24 <Tim3_ISP+0x218>)
 800cc98:	881b      	ldrh	r3, [r3, #0]
 800cc9a:	b21b      	sxth	r3, r3
 800cc9c:	2b00      	cmp	r3, #0
 800cc9e:	dd0d      	ble.n	800ccbc <Tim3_ISP+0x1b0>
      if(Cal_Flag == 0)
 800cca0:	4b21      	ldr	r3, [pc, #132]	; (800cd28 <Tim3_ISP+0x21c>)
 800cca2:	781b      	ldrb	r3, [r3, #0]
 800cca4:	2b00      	cmp	r3, #0
 800cca6:	d116      	bne.n	800ccd6 <Tim3_ISP+0x1ca>
    	  PopupCnt--;
 800cca8:	4b1e      	ldr	r3, [pc, #120]	; (800cd24 <Tim3_ISP+0x218>)
 800ccaa:	881b      	ldrh	r3, [r3, #0]
 800ccac:	b21b      	sxth	r3, r3
 800ccae:	b29b      	uxth	r3, r3
 800ccb0:	3b01      	subs	r3, #1
 800ccb2:	b29b      	uxth	r3, r3
 800ccb4:	b21a      	sxth	r2, r3
 800ccb6:	4b1b      	ldr	r3, [pc, #108]	; (800cd24 <Tim3_ISP+0x218>)
 800ccb8:	801a      	strh	r2, [r3, #0]
}
 800ccba:	e00c      	b.n	800ccd6 <Tim3_ISP+0x1ca>
      Close_Pop();        // �رնԻ���
 800ccbc:	f001 ff04 	bl	800eac8 <Close_Pop>
      if(Windows_Pop)
 800ccc0:	4b1a      	ldr	r3, [pc, #104]	; (800cd2c <Tim3_ISP+0x220>)
 800ccc2:	781b      	ldrb	r3, [r3, #0]
 800ccc4:	2b00      	cmp	r3, #0
 800ccc6:	d006      	beq.n	800ccd6 <Tim3_ISP+0x1ca>
        Windows_Pop = 0;
 800ccc8:	4b18      	ldr	r3, [pc, #96]	; (800cd2c <Tim3_ISP+0x220>)
 800ccca:	2200      	movs	r2, #0
 800cccc:	701a      	strb	r2, [r3, #0]
        Clr_WavePosi(DAR);
 800ccce:	f643 10e7 	movw	r0, #14823	; 0x39e7
 800ccd2:	f007 f867 	bl	8013da4 <Clr_WavePosi>
}
 800ccd6:	bf00      	nop
 800ccd8:	3708      	adds	r7, #8
 800ccda:	46bd      	mov	sp, r7
 800ccdc:	bd80      	pop	{r7, pc}
 800ccde:	bf00      	nop
 800cce0:	2000077f 	.word	0x2000077f
 800cce4:	20001862 	.word	0x20001862
 800cce8:	20001864 	.word	0x20001864
 800ccec:	2000077c 	.word	0x2000077c
 800ccf0:	2000077a 	.word	0x2000077a
 800ccf4:	66666667 	.word	0x66666667
 800ccf8:	20000781 	.word	0x20000781
 800ccfc:	20000780 	.word	0x20000780
 800cd00:	40020400 	.word	0x40020400
 800cd04:	20001860 	.word	0x20001860
 800cd08:	20000782 	.word	0x20000782
 800cd0c:	20000771 	.word	0x20000771
 800cd10:	20000778 	.word	0x20000778
 800cd14:	20000770 	.word	0x20000770
 800cd18:	20001861 	.word	0x20001861
 800cd1c:	20000274 	.word	0x20000274
 800cd20:	20000798 	.word	0x20000798
 800cd24:	20000000 	.word	0x20000000
 800cd28:	20000192 	.word	0x20000192
 800cd2c:	200007a2 	.word	0x200007a2

0800cd30 <Fill_Base>:
unsigned short AA[205];  //one more than orginal size

// R0:pDat, R1:pTab, R2:Col, R3:Var, R4:pBuf, R5:Cnt, R6:Tmp,
//void Fill_Base(R3 = u32 Color)// �л��������ɫ RET: R4+202 Used: R3-R5
void Fill_Base(void)
{
 800cd30:	b480      	push	{r7}
 800cd32:	af00      	add	r7, sp, #0
	R4.A = (char*) &AA[204]; // 204��/2 ��408 Bytes
 800cd34:	4b12      	ldr	r3, [pc, #72]	; (800cd80 <Fill_Base+0x50>)
 800cd36:	4a13      	ldr	r2, [pc, #76]	; (800cd84 <Fill_Base+0x54>)
 800cd38:	601a      	str	r2, [r3, #0]
	R5 =102;
 800cd3a:	4b13      	ldr	r3, [pc, #76]	; (800cd88 <Fill_Base+0x58>)
 800cd3c:	2266      	movs	r2, #102	; 0x66
 800cd3e:	601a      	str	r2, [r3, #0]

Fill_Loop0:
	*(unsigned*)R4.A =R3;
 800cd40:	4b0f      	ldr	r3, [pc, #60]	; (800cd80 <Fill_Base+0x50>)
 800cd42:	681b      	ldr	r3, [r3, #0]
 800cd44:	4a11      	ldr	r2, [pc, #68]	; (800cd8c <Fill_Base+0x5c>)
 800cd46:	6812      	ldr	r2, [r2, #0]
 800cd48:	601a      	str	r2, [r3, #0]
	R4.A= R4.A +4;
 800cd4a:	4b0d      	ldr	r3, [pc, #52]	; (800cd80 <Fill_Base+0x50>)
 800cd4c:	681b      	ldr	r3, [r3, #0]
 800cd4e:	3304      	adds	r3, #4
 800cd50:	4a0b      	ldr	r2, [pc, #44]	; (800cd80 <Fill_Base+0x50>)
 800cd52:	6013      	str	r3, [r2, #0]
	R5 =R5 -1;
 800cd54:	4b0c      	ldr	r3, [pc, #48]	; (800cd88 <Fill_Base+0x58>)
 800cd56:	681b      	ldr	r3, [r3, #0]
 800cd58:	3b01      	subs	r3, #1
 800cd5a:	4a0b      	ldr	r2, [pc, #44]	; (800cd88 <Fill_Base+0x58>)
 800cd5c:	6013      	str	r3, [r2, #0]
	if (R5!=0)
 800cd5e:	4b0a      	ldr	r3, [pc, #40]	; (800cd88 <Fill_Base+0x58>)
 800cd60:	681b      	ldr	r3, [r3, #0]
 800cd62:	2b00      	cmp	r3, #0
 800cd64:	d000      	beq.n	800cd68 <Fill_Base+0x38>
	{
		goto Fill_Loop0;
 800cd66:	e7eb      	b.n	800cd40 <Fill_Base+0x10>
	}
	R4.A = (char*) &AA[203];
 800cd68:	4b05      	ldr	r3, [pc, #20]	; (800cd80 <Fill_Base+0x50>)
 800cd6a:	4a09      	ldr	r2, [pc, #36]	; (800cd90 <Fill_Base+0x60>)
 800cd6c:	601a      	str	r2, [r3, #0]
	R3= GRID;
 800cd6e:	4b07      	ldr	r3, [pc, #28]	; (800cd8c <Fill_Base+0x5c>)
 800cd70:	f647 32ef 	movw	r2, #31727	; 0x7bef
 800cd74:	601a      	str	r2, [r3, #0]
}
 800cd76:	bf00      	nop
 800cd78:	46bd      	mov	sp, r7
 800cd7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd7e:	4770      	bx	lr
 800cd80:	20001a1c 	.word	0x20001a1c
 800cd84:	20001a10 	.word	0x20001a10
 800cd88:	2000186c 	.word	0x2000186c
 800cd8c:	20001870 	.word	0x20001870
 800cd90:	20001a0e 	.word	0x20001a0e

0800cd94 <Buld_0>:

/*// void Buld_0(R4 = u16* pCol)   // ���������л������ı������� Used: R3-R5*/
void Buld_0(void)
{
 800cd94:	b580      	push	{r7, lr}
 800cd96:	af00      	add	r7, sp, #0
	R3 = BACKGROUND;
 800cd98:	4b03      	ldr	r3, [pc, #12]	; (800cda8 <Buld_0+0x14>)
 800cd9a:	2200      	movs	r2, #0
 800cd9c:	601a      	str	r2, [r3, #0]
	Fill_Base();
 800cd9e:	f7ff ffc7 	bl	800cd30 <Fill_Base>
}
 800cda2:	bf00      	nop
 800cda4:	bd80      	pop	{r7, pc}
 800cda6:	bf00      	nop
 800cda8:	20001870 	.word	0x20001870

0800cdac <Buld_1>:

// void Buld_1(R4 = u16* pCol)   // ���������л������ı������� Used: R3-R6
void Buld_1(void)
{
 800cdac:	b580      	push	{r7, lr}
 800cdae:	af00      	add	r7, sp, #0
	R3 = GRID_COLOR;
 800cdb0:	4b0e      	ldr	r3, [pc, #56]	; (800cdec <Buld_1+0x40>)
 800cdb2:	4a0f      	ldr	r2, [pc, #60]	; (800cdf0 <Buld_1+0x44>)
 800cdb4:	601a      	str	r2, [r3, #0]
	Fill_Base();
 800cdb6:	f7ff ffbb 	bl	800cd30 <Fill_Base>
	R3 =0;
 800cdba:	4b0c      	ldr	r3, [pc, #48]	; (800cdec <Buld_1+0x40>)
 800cdbc:	2200      	movs	r2, #0
 800cdbe:	601a      	str	r2, [r3, #0]
	R5=402;
 800cdc0:	4b0c      	ldr	r3, [pc, #48]	; (800cdf4 <Buld_1+0x48>)
 800cdc2:	f44f 72c9 	mov.w	r2, #402	; 0x192
 800cdc6:	601a      	str	r2, [r3, #0]
	*(unsigned short*)(R4.A +R5)=R3;
 800cdc8:	4b08      	ldr	r3, [pc, #32]	; (800cdec <Buld_1+0x40>)
 800cdca:	6819      	ldr	r1, [r3, #0]
 800cdcc:	4b0a      	ldr	r3, [pc, #40]	; (800cdf8 <Buld_1+0x4c>)
 800cdce:	681a      	ldr	r2, [r3, #0]
 800cdd0:	4b08      	ldr	r3, [pc, #32]	; (800cdf4 <Buld_1+0x48>)
 800cdd2:	681b      	ldr	r3, [r3, #0]
 800cdd4:	4413      	add	r3, r2
 800cdd6:	b28a      	uxth	r2, r1
 800cdd8:	801a      	strh	r2, [r3, #0]
	*(unsigned short*)(R4.A -2)=R3;
 800cdda:	4b04      	ldr	r3, [pc, #16]	; (800cdec <Buld_1+0x40>)
 800cddc:	681a      	ldr	r2, [r3, #0]
 800cdde:	4b06      	ldr	r3, [pc, #24]	; (800cdf8 <Buld_1+0x4c>)
 800cde0:	681b      	ldr	r3, [r3, #0]
 800cde2:	3b02      	subs	r3, #2
 800cde4:	b292      	uxth	r2, r2
 800cde6:	801a      	strh	r2, [r3, #0]
}
 800cde8:	bf00      	nop
 800cdea:	bd80      	pop	{r7, pc}
 800cdec:	20001870 	.word	0x20001870
 800cdf0:	7bef7bef 	.word	0x7bef7bef
 800cdf4:	2000186c 	.word	0x2000186c
 800cdf8:	20001a1c 	.word	0x20001a1c

0800cdfc <Buld_2>:

// void Buld_2(R4 = u16* pCol)   // ���������л������ı������� Used: R3-R6
void Buld_2(void)
{
 800cdfc:	b580      	push	{r7, lr}
 800cdfe:	af00      	add	r7, sp, #0
	R3 = BACKGROUND;
 800ce00:	4b0c      	ldr	r3, [pc, #48]	; (800ce34 <Buld_2+0x38>)
 800ce02:	2200      	movs	r2, #0
 800ce04:	601a      	str	r2, [r3, #0]
	Fill_Base();
 800ce06:	f7ff ff93 	bl	800cd30 <Fill_Base>
	R5 =400;
 800ce0a:	4b0b      	ldr	r3, [pc, #44]	; (800ce38 <Buld_2+0x3c>)
 800ce0c:	f44f 72c8 	mov.w	r2, #400	; 0x190
 800ce10:	601a      	str	r2, [r3, #0]
	*(unsigned short*)(R4.A +R5)=R3;
 800ce12:	4b08      	ldr	r3, [pc, #32]	; (800ce34 <Buld_2+0x38>)
 800ce14:	6819      	ldr	r1, [r3, #0]
 800ce16:	4b09      	ldr	r3, [pc, #36]	; (800ce3c <Buld_2+0x40>)
 800ce18:	681a      	ldr	r2, [r3, #0]
 800ce1a:	4b07      	ldr	r3, [pc, #28]	; (800ce38 <Buld_2+0x3c>)
 800ce1c:	681b      	ldr	r3, [r3, #0]
 800ce1e:	4413      	add	r3, r2
 800ce20:	b28a      	uxth	r2, r1
 800ce22:	801a      	strh	r2, [r3, #0]
	*(unsigned short*)(R4.A)=R3;
 800ce24:	4b03      	ldr	r3, [pc, #12]	; (800ce34 <Buld_2+0x38>)
 800ce26:	681a      	ldr	r2, [r3, #0]
 800ce28:	4b04      	ldr	r3, [pc, #16]	; (800ce3c <Buld_2+0x40>)
 800ce2a:	681b      	ldr	r3, [r3, #0]
 800ce2c:	b292      	uxth	r2, r2
 800ce2e:	801a      	strh	r2, [r3, #0]
}
 800ce30:	bf00      	nop
 800ce32:	bd80      	pop	{r7, pc}
 800ce34:	20001870 	.word	0x20001870
 800ce38:	2000186c 	.word	0x2000186c
 800ce3c:	20001a1c 	.word	0x20001a1c

0800ce40 <Buld_3>:

// void Buld_3(R4 = u16* pCol)   // ��������л������ı������� Used: R3-R6
void Buld_3(void)
{
 800ce40:	b580      	push	{r7, lr}
 800ce42:	af00      	add	r7, sp, #0
	R3 = BACKGROUND;
 800ce44:	4b0e      	ldr	r3, [pc, #56]	; (800ce80 <Buld_3+0x40>)
 800ce46:	2200      	movs	r2, #0
 800ce48:	601a      	str	r2, [r3, #0]
	Fill_Base();
 800ce4a:	f7ff ff71 	bl	800cd30 <Fill_Base>
	R5=450;
 800ce4e:	4b0d      	ldr	r3, [pc, #52]	; (800ce84 <Buld_3+0x44>)
 800ce50:	f44f 72e1 	mov.w	r2, #450	; 0x1c2
 800ce54:	601a      	str	r2, [r3, #0]

Loop3:
	R5 = R5 -50;
 800ce56:	4b0b      	ldr	r3, [pc, #44]	; (800ce84 <Buld_3+0x44>)
 800ce58:	681b      	ldr	r3, [r3, #0]
 800ce5a:	3b32      	subs	r3, #50	; 0x32
 800ce5c:	4a09      	ldr	r2, [pc, #36]	; (800ce84 <Buld_3+0x44>)
 800ce5e:	6013      	str	r3, [r2, #0]
	*(unsigned short*)(R4.A +R5)=R3;
 800ce60:	4b07      	ldr	r3, [pc, #28]	; (800ce80 <Buld_3+0x40>)
 800ce62:	6819      	ldr	r1, [r3, #0]
 800ce64:	4b08      	ldr	r3, [pc, #32]	; (800ce88 <Buld_3+0x48>)
 800ce66:	681a      	ldr	r2, [r3, #0]
 800ce68:	4b06      	ldr	r3, [pc, #24]	; (800ce84 <Buld_3+0x44>)
 800ce6a:	681b      	ldr	r3, [r3, #0]
 800ce6c:	4413      	add	r3, r2
 800ce6e:	b28a      	uxth	r2, r1
 800ce70:	801a      	strh	r2, [r3, #0]
	if ( R5!=0)
 800ce72:	4b04      	ldr	r3, [pc, #16]	; (800ce84 <Buld_3+0x44>)
 800ce74:	681b      	ldr	r3, [r3, #0]
 800ce76:	2b00      	cmp	r3, #0
 800ce78:	d000      	beq.n	800ce7c <Buld_3+0x3c>
	{
		goto Loop3;
 800ce7a:	e7ec      	b.n	800ce56 <Buld_3+0x16>
	}
	return;
 800ce7c:	bf00      	nop
}
 800ce7e:	bd80      	pop	{r7, pc}
 800ce80:	20001870 	.word	0x20001870
 800ce84:	2000186c 	.word	0x2000186c
 800ce88:	20001a1c 	.word	0x20001a1c

0800ce8c <Buld_4>:

// void Buld_4(R4 = u16* pCol)   // ���������л������ı�������
void Buld_4(void)
{
 800ce8c:	b580      	push	{r7, lr}
 800ce8e:	af00      	add	r7, sp, #0
	R3 = BACKGROUND;
 800ce90:	4b0e      	ldr	r3, [pc, #56]	; (800cecc <Buld_4+0x40>)
 800ce92:	2200      	movs	r2, #0
 800ce94:	601a      	str	r2, [r3, #0]
	Fill_Base();
 800ce96:	f7ff ff4b 	bl	800cd30 <Fill_Base>
	R5=410;
 800ce9a:	4b0d      	ldr	r3, [pc, #52]	; (800ced0 <Buld_4+0x44>)
 800ce9c:	f44f 72cd 	mov.w	r2, #410	; 0x19a
 800cea0:	601a      	str	r2, [r3, #0]

Loop7:
	R5 = R5 -10;
 800cea2:	4b0b      	ldr	r3, [pc, #44]	; (800ced0 <Buld_4+0x44>)
 800cea4:	681b      	ldr	r3, [r3, #0]
 800cea6:	3b0a      	subs	r3, #10
 800cea8:	4a09      	ldr	r2, [pc, #36]	; (800ced0 <Buld_4+0x44>)
 800ceaa:	6013      	str	r3, [r2, #0]
	*(unsigned short*)(R4.A +R5)=R3;
 800ceac:	4b07      	ldr	r3, [pc, #28]	; (800cecc <Buld_4+0x40>)
 800ceae:	6819      	ldr	r1, [r3, #0]
 800ceb0:	4b08      	ldr	r3, [pc, #32]	; (800ced4 <Buld_4+0x48>)
 800ceb2:	681a      	ldr	r2, [r3, #0]
 800ceb4:	4b06      	ldr	r3, [pc, #24]	; (800ced0 <Buld_4+0x44>)
 800ceb6:	681b      	ldr	r3, [r3, #0]
 800ceb8:	4413      	add	r3, r2
 800ceba:	b28a      	uxth	r2, r1
 800cebc:	801a      	strh	r2, [r3, #0]
	if ( R5!=0)
 800cebe:	4b04      	ldr	r3, [pc, #16]	; (800ced0 <Buld_4+0x44>)
 800cec0:	681b      	ldr	r3, [r3, #0]
 800cec2:	2b00      	cmp	r3, #0
 800cec4:	d000      	beq.n	800cec8 <Buld_4+0x3c>
	{
		goto Loop7;
 800cec6:	e7ec      	b.n	800cea2 <Buld_4+0x16>
	}
	return;
 800cec8:	bf00      	nop
}
 800ceca:	bd80      	pop	{r7, pc}
 800cecc:	20001870 	.word	0x20001870
 800ced0:	2000186c 	.word	0x2000186c
 800ced4:	20001a1c 	.word	0x20001a1c

0800ced8 <Draw_Digit_Analog>:

// Draw_Digit(R0:pDat, R2:Col, R3:Color, R4:Posi, R8:Mask)// �����ֲ��� Used: R5-R7
// Draw_Analog(R2:Col, R3:Color, R4:pDat)// ��ģ�Ⲩ������  Used: R3-R7
void Draw_Digit_Analog(unsigned short DorA)
{
 800ced8:	b480      	push	{r7}
 800ceda:	b083      	sub	sp, #12
 800cedc:	af00      	add	r7, sp, #0
 800cede:	4603      	mov	r3, r0
 800cee0:	80fb      	strh	r3, [r7, #6]
	if(DorA == 1)  //draw digit
 800cee2:	88fb      	ldrh	r3, [r7, #6]
 800cee4:	2b01      	cmp	r3, #1
 800cee6:	d144      	bne.n	800cf72 <Draw_Digit_Analog+0x9a>
	{
	R7 =R0 +900;
 800cee8:	4b7d      	ldr	r3, [pc, #500]	; (800d0e0 <Draw_Digit_Analog+0x208>)
 800ceea:	681b      	ldr	r3, [r3, #0]
 800ceec:	f503 7361 	add.w	r3, r3, #900	; 0x384
 800cef0:	4a7c      	ldr	r2, [pc, #496]	; (800d0e4 <Draw_Digit_Analog+0x20c>)
 800cef2:	6013      	str	r3, [r2, #0]
	R7 = R7 + R2;
 800cef4:	4b7b      	ldr	r3, [pc, #492]	; (800d0e4 <Draw_Digit_Analog+0x20c>)
 800cef6:	681a      	ldr	r2, [r3, #0]
 800cef8:	4b7b      	ldr	r3, [pc, #492]	; (800d0e8 <Draw_Digit_Analog+0x210>)
 800cefa:	681b      	ldr	r3, [r3, #0]
 800cefc:	4413      	add	r3, r2
 800cefe:	4a79      	ldr	r2, [pc, #484]	; (800d0e4 <Draw_Digit_Analog+0x20c>)
 800cf00:	6013      	str	r3, [r2, #0]
	R5 = *(char*) R7;
 800cf02:	4b78      	ldr	r3, [pc, #480]	; (800d0e4 <Draw_Digit_Analog+0x20c>)
 800cf04:	681b      	ldr	r3, [r3, #0]
 800cf06:	781b      	ldrb	r3, [r3, #0]
 800cf08:	461a      	mov	r2, r3
 800cf0a:	4b78      	ldr	r3, [pc, #480]	; (800d0ec <Draw_Digit_Analog+0x214>)
 800cf0c:	601a      	str	r2, [r3, #0]
	R6 = *(char*) (R7 -1);
 800cf0e:	4b75      	ldr	r3, [pc, #468]	; (800d0e4 <Draw_Digit_Analog+0x20c>)
 800cf10:	681b      	ldr	r3, [r3, #0]
 800cf12:	3b01      	subs	r3, #1
 800cf14:	781b      	ldrb	r3, [r3, #0]
 800cf16:	461a      	mov	r2, r3
 800cf18:	4b75      	ldr	r3, [pc, #468]	; (800d0f0 <Draw_Digit_Analog+0x218>)
 800cf1a:	601a      	str	r2, [r3, #0]
	R4.I = R4.I >> 1;
 800cf1c:	4b75      	ldr	r3, [pc, #468]	; (800d0f4 <Draw_Digit_Analog+0x21c>)
 800cf1e:	681b      	ldr	r3, [r3, #0]
 800cf20:	085b      	lsrs	r3, r3, #1
 800cf22:	4a74      	ldr	r2, [pc, #464]	; (800d0f4 <Draw_Digit_Analog+0x21c>)
 800cf24:	6013      	str	r3, [r2, #0]
	R5 = R5 & R8;
 800cf26:	4b71      	ldr	r3, [pc, #452]	; (800d0ec <Draw_Digit_Analog+0x214>)
 800cf28:	681a      	ldr	r2, [r3, #0]
 800cf2a:	4b73      	ldr	r3, [pc, #460]	; (800d0f8 <Draw_Digit_Analog+0x220>)
 800cf2c:	681b      	ldr	r3, [r3, #0]
 800cf2e:	4013      	ands	r3, r2
 800cf30:	4a6e      	ldr	r2, [pc, #440]	; (800d0ec <Draw_Digit_Analog+0x214>)
 800cf32:	6013      	str	r3, [r2, #0]
	if (R5 == 0 )
 800cf34:	4b6d      	ldr	r3, [pc, #436]	; (800d0ec <Draw_Digit_Analog+0x214>)
 800cf36:	681b      	ldr	r3, [r3, #0]
 800cf38:	2b00      	cmp	r3, #0
 800cf3a:	d104      	bne.n	800cf46 <Draw_Digit_Analog+0x6e>
		R5 = R4.I;
 800cf3c:	4b6d      	ldr	r3, [pc, #436]	; (800d0f4 <Draw_Digit_Analog+0x21c>)
 800cf3e:	681b      	ldr	r3, [r3, #0]
 800cf40:	4a6a      	ldr	r2, [pc, #424]	; (800d0ec <Draw_Digit_Analog+0x214>)
 800cf42:	6013      	str	r3, [r2, #0]
 800cf44:	e004      	b.n	800cf50 <Draw_Digit_Analog+0x78>
	else
		R5 = R4.I + 30;
 800cf46:	4b6b      	ldr	r3, [pc, #428]	; (800d0f4 <Draw_Digit_Analog+0x21c>)
 800cf48:	681b      	ldr	r3, [r3, #0]
 800cf4a:	331e      	adds	r3, #30
 800cf4c:	4a67      	ldr	r2, [pc, #412]	; (800d0ec <Draw_Digit_Analog+0x214>)
 800cf4e:	6013      	str	r3, [r2, #0]
	R6 = R6 & R8;
 800cf50:	4b67      	ldr	r3, [pc, #412]	; (800d0f0 <Draw_Digit_Analog+0x218>)
 800cf52:	681a      	ldr	r2, [r3, #0]
 800cf54:	4b68      	ldr	r3, [pc, #416]	; (800d0f8 <Draw_Digit_Analog+0x220>)
 800cf56:	681b      	ldr	r3, [r3, #0]
 800cf58:	4013      	ands	r3, r2
 800cf5a:	4a65      	ldr	r2, [pc, #404]	; (800d0f0 <Draw_Digit_Analog+0x218>)
 800cf5c:	6013      	str	r3, [r2, #0]
	if( R6 != 0)
 800cf5e:	4b64      	ldr	r3, [pc, #400]	; (800d0f0 <Draw_Digit_Analog+0x218>)
 800cf60:	681b      	ldr	r3, [r3, #0]
 800cf62:	2b00      	cmp	r3, #0
 800cf64:	d01c      	beq.n	800cfa0 <Draw_Digit_Analog+0xc8>
		R4.I = R4.I + 30;
 800cf66:	4b63      	ldr	r3, [pc, #396]	; (800d0f4 <Draw_Digit_Analog+0x21c>)
 800cf68:	681b      	ldr	r3, [r3, #0]
 800cf6a:	331e      	adds	r3, #30
 800cf6c:	4a61      	ldr	r2, [pc, #388]	; (800d0f4 <Draw_Digit_Analog+0x21c>)
 800cf6e:	6013      	str	r3, [r2, #0]
	goto Analog0;
 800cf70:	e016      	b.n	800cfa0 <Draw_Digit_Analog+0xc8>
	}

	if(DorA == 0)  //draw analog
 800cf72:	88fb      	ldrh	r3, [r7, #6]
 800cf74:	2b00      	cmp	r3, #0
 800cf76:	f040 80a5 	bne.w	800d0c4 <Draw_Digit_Analog+0x1ec>
	{
		R4.A = R4.A +2;
 800cf7a:	4b5e      	ldr	r3, [pc, #376]	; (800d0f4 <Draw_Digit_Analog+0x21c>)
 800cf7c:	681b      	ldr	r3, [r3, #0]
 800cf7e:	3302      	adds	r3, #2
 800cf80:	4a5c      	ldr	r2, [pc, #368]	; (800d0f4 <Draw_Digit_Analog+0x21c>)
 800cf82:	6013      	str	r3, [r2, #0]
		R5 = *(char*)R4.A; //n1
 800cf84:	4b5b      	ldr	r3, [pc, #364]	; (800d0f4 <Draw_Digit_Analog+0x21c>)
 800cf86:	681b      	ldr	r3, [r3, #0]
 800cf88:	781b      	ldrb	r3, [r3, #0]
 800cf8a:	461a      	mov	r2, r3
 800cf8c:	4b57      	ldr	r3, [pc, #348]	; (800d0ec <Draw_Digit_Analog+0x214>)
 800cf8e:	601a      	str	r2, [r3, #0]
		R4.I = *(char*)(R4.A-1); //n0
 800cf90:	4b58      	ldr	r3, [pc, #352]	; (800d0f4 <Draw_Digit_Analog+0x21c>)
 800cf92:	681b      	ldr	r3, [r3, #0]
 800cf94:	3b01      	subs	r3, #1
 800cf96:	781b      	ldrb	r3, [r3, #0]
 800cf98:	461a      	mov	r2, r3
 800cf9a:	4b56      	ldr	r3, [pc, #344]	; (800d0f4 <Draw_Digit_Analog+0x21c>)
 800cf9c:	601a      	str	r2, [r3, #0]
		goto Analog0;
 800cf9e:	e000      	b.n	800cfa2 <Draw_Digit_Analog+0xca>
	goto Analog0;
 800cfa0:	bf00      	nop

	R5 = R5 +50;
	R4.I =R4.I +50;

	Analog0:
	if (R5 == 255)
 800cfa2:	4b52      	ldr	r3, [pc, #328]	; (800d0ec <Draw_Digit_Analog+0x214>)
 800cfa4:	681b      	ldr	r3, [r3, #0]
 800cfa6:	2bff      	cmp	r3, #255	; 0xff
 800cfa8:	f000 808e 	beq.w	800d0c8 <Draw_Digit_Analog+0x1f0>
		return;
	if (R5 == 0)
 800cfac:	4b4f      	ldr	r3, [pc, #316]	; (800d0ec <Draw_Digit_Analog+0x214>)
 800cfae:	681b      	ldr	r3, [r3, #0]
 800cfb0:	2b00      	cmp	r3, #0
 800cfb2:	f000 808b 	beq.w	800d0cc <Draw_Digit_Analog+0x1f4>
		return;

	if(R5 >= R4.I)  // R5 = | n1 - n0 |
 800cfb6:	4b4f      	ldr	r3, [pc, #316]	; (800d0f4 <Draw_Digit_Analog+0x21c>)
 800cfb8:	681a      	ldr	r2, [r3, #0]
 800cfba:	4b4c      	ldr	r3, [pc, #304]	; (800d0ec <Draw_Digit_Analog+0x214>)
 800cfbc:	681b      	ldr	r3, [r3, #0]
 800cfbe:	429a      	cmp	r2, r3
 800cfc0:	d80b      	bhi.n	800cfda <Draw_Digit_Analog+0x102>
	{
		R6 =R4.I;
 800cfc2:	4b4c      	ldr	r3, [pc, #304]	; (800d0f4 <Draw_Digit_Analog+0x21c>)
 800cfc4:	681b      	ldr	r3, [r3, #0]
 800cfc6:	4a4a      	ldr	r2, [pc, #296]	; (800d0f0 <Draw_Digit_Analog+0x218>)
 800cfc8:	6013      	str	r3, [r2, #0]
		R5 = R5 -R4.I;
 800cfca:	4b48      	ldr	r3, [pc, #288]	; (800d0ec <Draw_Digit_Analog+0x214>)
 800cfcc:	681a      	ldr	r2, [r3, #0]
 800cfce:	4b49      	ldr	r3, [pc, #292]	; (800d0f4 <Draw_Digit_Analog+0x21c>)
 800cfd0:	681b      	ldr	r3, [r3, #0]
 800cfd2:	1ad3      	subs	r3, r2, r3
 800cfd4:	4a45      	ldr	r2, [pc, #276]	; (800d0ec <Draw_Digit_Analog+0x214>)
 800cfd6:	6013      	str	r3, [r2, #0]
 800cfd8:	e00a      	b.n	800cff0 <Draw_Digit_Analog+0x118>
	}
	else
	{
		R6 = R5;  // n1, n0 ����С���� R6
 800cfda:	4b44      	ldr	r3, [pc, #272]	; (800d0ec <Draw_Digit_Analog+0x214>)
 800cfdc:	681b      	ldr	r3, [r3, #0]
 800cfde:	4a44      	ldr	r2, [pc, #272]	; (800d0f0 <Draw_Digit_Analog+0x218>)
 800cfe0:	6013      	str	r3, [r2, #0]
		R5 = R4.I -R5;
 800cfe2:	4b44      	ldr	r3, [pc, #272]	; (800d0f4 <Draw_Digit_Analog+0x21c>)
 800cfe4:	681a      	ldr	r2, [r3, #0]
 800cfe6:	4b41      	ldr	r3, [pc, #260]	; (800d0ec <Draw_Digit_Analog+0x214>)
 800cfe8:	681b      	ldr	r3, [r3, #0]
 800cfea:	1ad3      	subs	r3, r2, r3
 800cfec:	4a3f      	ldr	r2, [pc, #252]	; (800d0ec <Draw_Digit_Analog+0x214>)
 800cfee:	6013      	str	r3, [r2, #0]
	}

	if(R6 > 199)
 800cff0:	4b3f      	ldr	r3, [pc, #252]	; (800d0f0 <Draw_Digit_Analog+0x218>)
 800cff2:	681b      	ldr	r3, [r3, #0]
 800cff4:	2bc7      	cmp	r3, #199	; 0xc7
 800cff6:	d86b      	bhi.n	800d0d0 <Draw_Digit_Analog+0x1f8>
		return;

	R4.I = R5 +R6;
 800cff8:	4b3c      	ldr	r3, [pc, #240]	; (800d0ec <Draw_Digit_Analog+0x214>)
 800cffa:	681a      	ldr	r2, [r3, #0]
 800cffc:	4b3c      	ldr	r3, [pc, #240]	; (800d0f0 <Draw_Digit_Analog+0x218>)
 800cffe:	681b      	ldr	r3, [r3, #0]
 800d000:	4413      	add	r3, r2
 800d002:	4a3c      	ldr	r2, [pc, #240]	; (800d0f4 <Draw_Digit_Analog+0x21c>)
 800d004:	6013      	str	r3, [r2, #0]
	if(R4.I >199)
 800d006:	4b3b      	ldr	r3, [pc, #236]	; (800d0f4 <Draw_Digit_Analog+0x21c>)
 800d008:	681b      	ldr	r3, [r3, #0]
 800d00a:	2bc7      	cmp	r3, #199	; 0xc7
 800d00c:	d906      	bls.n	800d01c <Draw_Digit_Analog+0x144>
	{
		R5 = 199 - R6;
 800d00e:	4b38      	ldr	r3, [pc, #224]	; (800d0f0 <Draw_Digit_Analog+0x218>)
 800d010:	681b      	ldr	r3, [r3, #0]
 800d012:	f1c3 03c7 	rsb	r3, r3, #199	; 0xc7
 800d016:	4a35      	ldr	r2, [pc, #212]	; (800d0ec <Draw_Digit_Analog+0x214>)
 800d018:	6013      	str	r3, [r2, #0]
		goto Analog2;
 800d01a:	e020      	b.n	800d05e <Draw_Digit_Analog+0x186>
	}

	if( R4.I < 3 )
 800d01c:	4b35      	ldr	r3, [pc, #212]	; (800d0f4 <Draw_Digit_Analog+0x21c>)
 800d01e:	681b      	ldr	r3, [r3, #0]
 800d020:	2b02      	cmp	r3, #2
 800d022:	d957      	bls.n	800d0d4 <Draw_Digit_Analog+0x1fc>
		return;

	if( R6 <3)
 800d024:	4b32      	ldr	r3, [pc, #200]	; (800d0f0 <Draw_Digit_Analog+0x218>)
 800d026:	681b      	ldr	r3, [r3, #0]
 800d028:	2b02      	cmp	r3, #2
 800d02a:	d808      	bhi.n	800d03e <Draw_Digit_Analog+0x166>
	{
		R6 = 3;
 800d02c:	4b30      	ldr	r3, [pc, #192]	; (800d0f0 <Draw_Digit_Analog+0x218>)
 800d02e:	2203      	movs	r2, #3
 800d030:	601a      	str	r2, [r3, #0]
		R5 =R4.I -3;
 800d032:	4b30      	ldr	r3, [pc, #192]	; (800d0f4 <Draw_Digit_Analog+0x21c>)
 800d034:	681b      	ldr	r3, [r3, #0]
 800d036:	3b03      	subs	r3, #3
 800d038:	4a2c      	ldr	r2, [pc, #176]	; (800d0ec <Draw_Digit_Analog+0x214>)
 800d03a:	6013      	str	r3, [r2, #0]
		goto Analog2;
 800d03c:	e00f      	b.n	800d05e <Draw_Digit_Analog+0x186>
	}

	if(R5 ==0 )
 800d03e:	4b2b      	ldr	r3, [pc, #172]	; (800d0ec <Draw_Digit_Analog+0x214>)
 800d040:	681b      	ldr	r3, [r3, #0]
 800d042:	2b00      	cmp	r3, #0
 800d044:	d10a      	bne.n	800d05c <Draw_Digit_Analog+0x184>
	{
		R6 = R6 -1;
 800d046:	4b2a      	ldr	r3, [pc, #168]	; (800d0f0 <Draw_Digit_Analog+0x218>)
 800d048:	681b      	ldr	r3, [r3, #0]
 800d04a:	3b01      	subs	r3, #1
 800d04c:	4a28      	ldr	r2, [pc, #160]	; (800d0f0 <Draw_Digit_Analog+0x218>)
 800d04e:	6013      	str	r3, [r2, #0]
		R5 = R5 +2;
 800d050:	4b26      	ldr	r3, [pc, #152]	; (800d0ec <Draw_Digit_Analog+0x214>)
 800d052:	681b      	ldr	r3, [r3, #0]
 800d054:	3302      	adds	r3, #2
 800d056:	4a25      	ldr	r2, [pc, #148]	; (800d0ec <Draw_Digit_Analog+0x214>)
 800d058:	6013      	str	r3, [r2, #0]
 800d05a:	e000      	b.n	800d05e <Draw_Digit_Analog+0x186>
	}

Analog2:
 800d05c:	bf00      	nop
	if( R5>= 20)
 800d05e:	4b23      	ldr	r3, [pc, #140]	; (800d0ec <Draw_Digit_Analog+0x214>)
 800d060:	681b      	ldr	r3, [r3, #0]
 800d062:	2b13      	cmp	r3, #19
 800d064:	d904      	bls.n	800d070 <Draw_Digit_Analog+0x198>
		R3= R3 +20;
 800d066:	4b25      	ldr	r3, [pc, #148]	; (800d0fc <Draw_Digit_Analog+0x224>)
 800d068:	681b      	ldr	r3, [r3, #0]
 800d06a:	3314      	adds	r3, #20
 800d06c:	4a23      	ldr	r2, [pc, #140]	; (800d0fc <Draw_Digit_Analog+0x224>)
 800d06e:	6013      	str	r3, [r2, #0]

	R3 =  *(unsigned short*) (R1 +R3);
 800d070:	4b23      	ldr	r3, [pc, #140]	; (800d100 <Draw_Digit_Analog+0x228>)
 800d072:	681a      	ldr	r2, [r3, #0]
 800d074:	4b21      	ldr	r3, [pc, #132]	; (800d0fc <Draw_Digit_Analog+0x224>)
 800d076:	681b      	ldr	r3, [r3, #0]
 800d078:	4413      	add	r3, r2
 800d07a:	881b      	ldrh	r3, [r3, #0]
 800d07c:	461a      	mov	r2, r3
 800d07e:	4b1f      	ldr	r3, [pc, #124]	; (800d0fc <Draw_Digit_Analog+0x224>)
 800d080:	601a      	str	r2, [r3, #0]
	R6 = R6 << 1;
 800d082:	4b1b      	ldr	r3, [pc, #108]	; (800d0f0 <Draw_Digit_Analog+0x218>)
 800d084:	681b      	ldr	r3, [r3, #0]
 800d086:	005b      	lsls	r3, r3, #1
 800d088:	4a19      	ldr	r2, [pc, #100]	; (800d0f0 <Draw_Digit_Analog+0x218>)
 800d08a:	6013      	str	r3, [r2, #0]
//    ADD     R6,  SP, R6            ;// ȷ����ʾλ��
    R6 = (unsigned) &AA[204- R6/2];
 800d08c:	4b18      	ldr	r3, [pc, #96]	; (800d0f0 <Draw_Digit_Analog+0x218>)
 800d08e:	681b      	ldr	r3, [r3, #0]
 800d090:	085b      	lsrs	r3, r3, #1
 800d092:	f1c3 03cc 	rsb	r3, r3, #204	; 0xcc
 800d096:	005b      	lsls	r3, r3, #1
 800d098:	4a1a      	ldr	r2, [pc, #104]	; (800d104 <Draw_Digit_Analog+0x22c>)
 800d09a:	4413      	add	r3, r2
 800d09c:	461a      	mov	r2, r3
 800d09e:	4b14      	ldr	r3, [pc, #80]	; (800d0f0 <Draw_Digit_Analog+0x218>)
 800d0a0:	601a      	str	r2, [r3, #0]

Analog3:
	*(unsigned short*)R6 = R3;
 800d0a2:	4b16      	ldr	r3, [pc, #88]	; (800d0fc <Draw_Digit_Analog+0x224>)
 800d0a4:	681a      	ldr	r2, [r3, #0]
 800d0a6:	4b12      	ldr	r3, [pc, #72]	; (800d0f0 <Draw_Digit_Analog+0x218>)
 800d0a8:	681b      	ldr	r3, [r3, #0]
 800d0aa:	b292      	uxth	r2, r2
 800d0ac:	801a      	strh	r2, [r3, #0]
	R6 =R6 +2;
 800d0ae:	4b10      	ldr	r3, [pc, #64]	; (800d0f0 <Draw_Digit_Analog+0x218>)
 800d0b0:	681b      	ldr	r3, [r3, #0]
 800d0b2:	3302      	adds	r3, #2
 800d0b4:	4a0e      	ldr	r2, [pc, #56]	; (800d0f0 <Draw_Digit_Analog+0x218>)
 800d0b6:	6013      	str	r3, [r2, #0]
	R5 =R5 -1;
 800d0b8:	4b0c      	ldr	r3, [pc, #48]	; (800d0ec <Draw_Digit_Analog+0x214>)
 800d0ba:	681b      	ldr	r3, [r3, #0]
 800d0bc:	3b01      	subs	r3, #1
 800d0be:	4a0b      	ldr	r2, [pc, #44]	; (800d0ec <Draw_Digit_Analog+0x214>)
 800d0c0:	6013      	str	r3, [r2, #0]
	if(R5>=0)
		goto Analog3;
 800d0c2:	e7ee      	b.n	800d0a2 <Draw_Digit_Analog+0x1ca>
	return;
 800d0c4:	bf00      	nop
 800d0c6:	e006      	b.n	800d0d6 <Draw_Digit_Analog+0x1fe>
		return;
 800d0c8:	bf00      	nop
 800d0ca:	e004      	b.n	800d0d6 <Draw_Digit_Analog+0x1fe>
		return;
 800d0cc:	bf00      	nop
 800d0ce:	e002      	b.n	800d0d6 <Draw_Digit_Analog+0x1fe>
		return;
 800d0d0:	bf00      	nop
 800d0d2:	e000      	b.n	800d0d6 <Draw_Digit_Analog+0x1fe>
		return;
 800d0d4:	bf00      	nop

return;
}
 800d0d6:	370c      	adds	r7, #12
 800d0d8:	46bd      	mov	sp, r7
 800d0da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0de:	4770      	bx	lr
 800d0e0:	20001874 	.word	0x20001874
 800d0e4:	20001a30 	.word	0x20001a30
 800d0e8:	20001a28 	.word	0x20001a28
 800d0ec:	2000186c 	.word	0x2000186c
 800d0f0:	20001a18 	.word	0x20001a18
 800d0f4:	20001a1c 	.word	0x20001a1c
 800d0f8:	20001868 	.word	0x20001868
 800d0fc:	20001870 	.word	0x20001870
 800d100:	20001a20 	.word	0x20001a20
 800d104:	20001878 	.word	0x20001878

0800d108 <Cursor_0>:

// Cursor_0(R1:pTab, R2:Col)// ���������α�˵�  Used: R3-R6
void Cursor_0(short *pTab)
{
 800d108:	b480      	push	{r7}
 800d10a:	b083      	sub	sp, #12
 800d10c:	af00      	add	r7, sp, #0
 800d10e:	6078      	str	r0, [r7, #4]
	R3 =6;
 800d110:	4b3c      	ldr	r3, [pc, #240]	; (800d204 <Cursor_0+0xfc>)
 800d112:	2206      	movs	r2, #6
 800d114:	601a      	str	r2, [r3, #0]
	R4.A = (char*) &AA[204];
 800d116:	4b3c      	ldr	r3, [pc, #240]	; (800d208 <Cursor_0+0x100>)
 800d118:	4a3c      	ldr	r2, [pc, #240]	; (800d20c <Cursor_0+0x104>)
 800d11a:	601a      	str	r2, [r3, #0]

Cursor01:
	R5 = pTab[R3];
 800d11c:	4b39      	ldr	r3, [pc, #228]	; (800d204 <Cursor_0+0xfc>)
 800d11e:	681b      	ldr	r3, [r3, #0]
 800d120:	005b      	lsls	r3, r3, #1
 800d122:	687a      	ldr	r2, [r7, #4]
 800d124:	4413      	add	r3, r2
 800d126:	f9b3 3000 	ldrsh.w	r3, [r3]
 800d12a:	461a      	mov	r2, r3
 800d12c:	4b38      	ldr	r3, [pc, #224]	; (800d210 <Cursor_0+0x108>)
 800d12e:	601a      	str	r2, [r3, #0]
	if( (R5&1) != 0)
 800d130:	4b37      	ldr	r3, [pc, #220]	; (800d210 <Cursor_0+0x108>)
 800d132:	681b      	ldr	r3, [r3, #0]
 800d134:	f003 0301 	and.w	r3, r3, #1
 800d138:	2b00      	cmp	r3, #0
 800d13a:	d15c      	bne.n	800d1f6 <Cursor_0+0xee>
	{
		goto Cursor02;
	}
	R5 = pTab[R3 +10];
 800d13c:	4b31      	ldr	r3, [pc, #196]	; (800d204 <Cursor_0+0xfc>)
 800d13e:	681b      	ldr	r3, [r3, #0]
 800d140:	330a      	adds	r3, #10
 800d142:	005b      	lsls	r3, r3, #1
 800d144:	687a      	ldr	r2, [r7, #4]
 800d146:	4413      	add	r3, r2
 800d148:	f9b3 3000 	ldrsh.w	r3, [r3]
 800d14c:	461a      	mov	r2, r3
 800d14e:	4b30      	ldr	r3, [pc, #192]	; (800d210 <Cursor_0+0x108>)
 800d150:	601a      	str	r2, [r3, #0]
	R4.A = (char*)&AA[204 - R5/2];
 800d152:	4b2f      	ldr	r3, [pc, #188]	; (800d210 <Cursor_0+0x108>)
 800d154:	681b      	ldr	r3, [r3, #0]
 800d156:	085b      	lsrs	r3, r3, #1
 800d158:	f1c3 03cc 	rsb	r3, r3, #204	; 0xcc
 800d15c:	005b      	lsls	r3, r3, #1
 800d15e:	4a2d      	ldr	r2, [pc, #180]	; (800d214 <Cursor_0+0x10c>)
 800d160:	4413      	add	r3, r2
 800d162:	4a29      	ldr	r2, [pc, #164]	; (800d208 <Cursor_0+0x100>)
 800d164:	6013      	str	r3, [r2, #0]
	R6 = pTab[R3 +20];
 800d166:	4b27      	ldr	r3, [pc, #156]	; (800d204 <Cursor_0+0xfc>)
 800d168:	681b      	ldr	r3, [r3, #0]
 800d16a:	3314      	adds	r3, #20
 800d16c:	005b      	lsls	r3, r3, #1
 800d16e:	687a      	ldr	r2, [r7, #4]
 800d170:	4413      	add	r3, r2
 800d172:	f9b3 3000 	ldrsh.w	r3, [r3]
 800d176:	461a      	mov	r2, r3
 800d178:	4b27      	ldr	r3, [pc, #156]	; (800d218 <Cursor_0+0x110>)
 800d17a:	601a      	str	r2, [r3, #0]
	R4.I = R4.I -4;
 800d17c:	4b22      	ldr	r3, [pc, #136]	; (800d208 <Cursor_0+0x100>)
 800d17e:	681b      	ldr	r3, [r3, #0]
 800d180:	3b04      	subs	r3, #4
 800d182:	4a21      	ldr	r2, [pc, #132]	; (800d208 <Cursor_0+0x100>)
 800d184:	6013      	str	r3, [r2, #0]
	*(unsigned short*)R4.A =R6;
 800d186:	4b24      	ldr	r3, [pc, #144]	; (800d218 <Cursor_0+0x110>)
 800d188:	681a      	ldr	r2, [r3, #0]
 800d18a:	4b1f      	ldr	r3, [pc, #124]	; (800d208 <Cursor_0+0x100>)
 800d18c:	681b      	ldr	r3, [r3, #0]
 800d18e:	b292      	uxth	r2, r2
 800d190:	801a      	strh	r2, [r3, #0]
	R4.A= R4.A +2;
 800d192:	4b1d      	ldr	r3, [pc, #116]	; (800d208 <Cursor_0+0x100>)
 800d194:	681b      	ldr	r3, [r3, #0]
 800d196:	3302      	adds	r3, #2
 800d198:	4a1b      	ldr	r2, [pc, #108]	; (800d208 <Cursor_0+0x100>)
 800d19a:	6013      	str	r3, [r2, #0]
	*(unsigned short*)R4.A =R6;
 800d19c:	4b1e      	ldr	r3, [pc, #120]	; (800d218 <Cursor_0+0x110>)
 800d19e:	681a      	ldr	r2, [r3, #0]
 800d1a0:	4b19      	ldr	r3, [pc, #100]	; (800d208 <Cursor_0+0x100>)
 800d1a2:	681b      	ldr	r3, [r3, #0]
 800d1a4:	b292      	uxth	r2, r2
 800d1a6:	801a      	strh	r2, [r3, #0]
	R4.A= R4.A +2;
 800d1a8:	4b17      	ldr	r3, [pc, #92]	; (800d208 <Cursor_0+0x100>)
 800d1aa:	681b      	ldr	r3, [r3, #0]
 800d1ac:	3302      	adds	r3, #2
 800d1ae:	4a16      	ldr	r2, [pc, #88]	; (800d208 <Cursor_0+0x100>)
 800d1b0:	6013      	str	r3, [r2, #0]
	*(unsigned short*)R4.A =R6;
 800d1b2:	4b19      	ldr	r3, [pc, #100]	; (800d218 <Cursor_0+0x110>)
 800d1b4:	681a      	ldr	r2, [r3, #0]
 800d1b6:	4b14      	ldr	r3, [pc, #80]	; (800d208 <Cursor_0+0x100>)
 800d1b8:	681b      	ldr	r3, [r3, #0]
 800d1ba:	b292      	uxth	r2, r2
 800d1bc:	801a      	strh	r2, [r3, #0]
	R4.A= R4.A +2;
 800d1be:	4b12      	ldr	r3, [pc, #72]	; (800d208 <Cursor_0+0x100>)
 800d1c0:	681b      	ldr	r3, [r3, #0]
 800d1c2:	3302      	adds	r3, #2
 800d1c4:	4a10      	ldr	r2, [pc, #64]	; (800d208 <Cursor_0+0x100>)
 800d1c6:	6013      	str	r3, [r2, #0]
	*(unsigned short*)R4.A =R6;
 800d1c8:	4b13      	ldr	r3, [pc, #76]	; (800d218 <Cursor_0+0x110>)
 800d1ca:	681a      	ldr	r2, [r3, #0]
 800d1cc:	4b0e      	ldr	r3, [pc, #56]	; (800d208 <Cursor_0+0x100>)
 800d1ce:	681b      	ldr	r3, [r3, #0]
 800d1d0:	b292      	uxth	r2, r2
 800d1d2:	801a      	strh	r2, [r3, #0]
	R4.A= R4.A +2;
 800d1d4:	4b0c      	ldr	r3, [pc, #48]	; (800d208 <Cursor_0+0x100>)
 800d1d6:	681b      	ldr	r3, [r3, #0]
 800d1d8:	3302      	adds	r3, #2
 800d1da:	4a0b      	ldr	r2, [pc, #44]	; (800d208 <Cursor_0+0x100>)
 800d1dc:	6013      	str	r3, [r2, #0]
	*(unsigned short*)R4.A =R6;
 800d1de:	4b0e      	ldr	r3, [pc, #56]	; (800d218 <Cursor_0+0x110>)
 800d1e0:	681a      	ldr	r2, [r3, #0]
 800d1e2:	4b09      	ldr	r3, [pc, #36]	; (800d208 <Cursor_0+0x100>)
 800d1e4:	681b      	ldr	r3, [r3, #0]
 800d1e6:	b292      	uxth	r2, r2
 800d1e8:	801a      	strh	r2, [r3, #0]
	R4.A= R4.A +2;
 800d1ea:	4b07      	ldr	r3, [pc, #28]	; (800d208 <Cursor_0+0x100>)
 800d1ec:	681b      	ldr	r3, [r3, #0]
 800d1ee:	3302      	adds	r3, #2
 800d1f0:	4a05      	ldr	r2, [pc, #20]	; (800d208 <Cursor_0+0x100>)
 800d1f2:	6013      	str	r3, [r2, #0]
 800d1f4:	e000      	b.n	800d1f8 <Cursor_0+0xf0>
		goto Cursor02;
 800d1f6:	bf00      	nop

Cursor02:
	R3 = R3 -1;
 800d1f8:	4b02      	ldr	r3, [pc, #8]	; (800d204 <Cursor_0+0xfc>)
 800d1fa:	681b      	ldr	r3, [r3, #0]
 800d1fc:	3b01      	subs	r3, #1
 800d1fe:	4a01      	ldr	r2, [pc, #4]	; (800d204 <Cursor_0+0xfc>)
 800d200:	6013      	str	r3, [r2, #0]
	if( R3 >= 0)
	{
		goto Cursor01;
 800d202:	e78b      	b.n	800d11c <Cursor_0+0x14>
 800d204:	20001870 	.word	0x20001870
 800d208:	20001a1c 	.word	0x20001a1c
 800d20c:	20001a10 	.word	0x20001a10
 800d210:	2000186c 	.word	0x2000186c
 800d214:	20001878 	.word	0x20001878
 800d218:	20001a18 	.word	0x20001a18

0800d21c <Cursor_1>:
	}
	return;
}

void Cursor_1(short *pTab)
{
 800d21c:	b480      	push	{r7}
 800d21e:	b083      	sub	sp, #12
 800d220:	af00      	add	r7, sp, #0
 800d222:	6078      	str	r0, [r7, #4]
	R3 =6;
 800d224:	4b31      	ldr	r3, [pc, #196]	; (800d2ec <Cursor_1+0xd0>)
 800d226:	2206      	movs	r2, #6
 800d228:	601a      	str	r2, [r3, #0]
	R4.A = (char*) &AA[204];
 800d22a:	4b31      	ldr	r3, [pc, #196]	; (800d2f0 <Cursor_1+0xd4>)
 800d22c:	4a31      	ldr	r2, [pc, #196]	; (800d2f4 <Cursor_1+0xd8>)
 800d22e:	601a      	str	r2, [r3, #0]

Cursor11:
	R5 = pTab[R3];
 800d230:	4b2e      	ldr	r3, [pc, #184]	; (800d2ec <Cursor_1+0xd0>)
 800d232:	681b      	ldr	r3, [r3, #0]
 800d234:	005b      	lsls	r3, r3, #1
 800d236:	687a      	ldr	r2, [r7, #4]
 800d238:	4413      	add	r3, r2
 800d23a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800d23e:	461a      	mov	r2, r3
 800d240:	4b2d      	ldr	r3, [pc, #180]	; (800d2f8 <Cursor_1+0xdc>)
 800d242:	601a      	str	r2, [r3, #0]
	if( (R5&1) != 0)
 800d244:	4b2c      	ldr	r3, [pc, #176]	; (800d2f8 <Cursor_1+0xdc>)
 800d246:	681b      	ldr	r3, [r3, #0]
 800d248:	f003 0301 	and.w	r3, r3, #1
 800d24c:	2b00      	cmp	r3, #0
 800d24e:	d146      	bne.n	800d2de <Cursor_1+0xc2>
	{
		goto Cursor12;
	}
	R5 = pTab[R3 +10];
 800d250:	4b26      	ldr	r3, [pc, #152]	; (800d2ec <Cursor_1+0xd0>)
 800d252:	681b      	ldr	r3, [r3, #0]
 800d254:	330a      	adds	r3, #10
 800d256:	005b      	lsls	r3, r3, #1
 800d258:	687a      	ldr	r2, [r7, #4]
 800d25a:	4413      	add	r3, r2
 800d25c:	f9b3 3000 	ldrsh.w	r3, [r3]
 800d260:	461a      	mov	r2, r3
 800d262:	4b25      	ldr	r3, [pc, #148]	; (800d2f8 <Cursor_1+0xdc>)
 800d264:	601a      	str	r2, [r3, #0]
	R4.A = (char*)&AA[204 - R5/2];
 800d266:	4b24      	ldr	r3, [pc, #144]	; (800d2f8 <Cursor_1+0xdc>)
 800d268:	681b      	ldr	r3, [r3, #0]
 800d26a:	085b      	lsrs	r3, r3, #1
 800d26c:	f1c3 03cc 	rsb	r3, r3, #204	; 0xcc
 800d270:	005b      	lsls	r3, r3, #1
 800d272:	4a22      	ldr	r2, [pc, #136]	; (800d2fc <Cursor_1+0xe0>)
 800d274:	4413      	add	r3, r2
 800d276:	4a1e      	ldr	r2, [pc, #120]	; (800d2f0 <Cursor_1+0xd4>)
 800d278:	6013      	str	r3, [r2, #0]
	R6 = pTab[R3 +20];
 800d27a:	4b1c      	ldr	r3, [pc, #112]	; (800d2ec <Cursor_1+0xd0>)
 800d27c:	681b      	ldr	r3, [r3, #0]
 800d27e:	3314      	adds	r3, #20
 800d280:	005b      	lsls	r3, r3, #1
 800d282:	687a      	ldr	r2, [r7, #4]
 800d284:	4413      	add	r3, r2
 800d286:	f9b3 3000 	ldrsh.w	r3, [r3]
 800d28a:	461a      	mov	r2, r3
 800d28c:	4b1c      	ldr	r3, [pc, #112]	; (800d300 <Cursor_1+0xe4>)
 800d28e:	601a      	str	r2, [r3, #0]
	R4.I = R4.I -2;
 800d290:	4b17      	ldr	r3, [pc, #92]	; (800d2f0 <Cursor_1+0xd4>)
 800d292:	681b      	ldr	r3, [r3, #0]
 800d294:	3b02      	subs	r3, #2
 800d296:	4a16      	ldr	r2, [pc, #88]	; (800d2f0 <Cursor_1+0xd4>)
 800d298:	6013      	str	r3, [r2, #0]
	*(unsigned short*)R4.A =R6;
 800d29a:	4b19      	ldr	r3, [pc, #100]	; (800d300 <Cursor_1+0xe4>)
 800d29c:	681a      	ldr	r2, [r3, #0]
 800d29e:	4b14      	ldr	r3, [pc, #80]	; (800d2f0 <Cursor_1+0xd4>)
 800d2a0:	681b      	ldr	r3, [r3, #0]
 800d2a2:	b292      	uxth	r2, r2
 800d2a4:	801a      	strh	r2, [r3, #0]
	R4.A= R4.A +2;
 800d2a6:	4b12      	ldr	r3, [pc, #72]	; (800d2f0 <Cursor_1+0xd4>)
 800d2a8:	681b      	ldr	r3, [r3, #0]
 800d2aa:	3302      	adds	r3, #2
 800d2ac:	4a10      	ldr	r2, [pc, #64]	; (800d2f0 <Cursor_1+0xd4>)
 800d2ae:	6013      	str	r3, [r2, #0]
	*(unsigned short*)R4.A =R6;
 800d2b0:	4b13      	ldr	r3, [pc, #76]	; (800d300 <Cursor_1+0xe4>)
 800d2b2:	681a      	ldr	r2, [r3, #0]
 800d2b4:	4b0e      	ldr	r3, [pc, #56]	; (800d2f0 <Cursor_1+0xd4>)
 800d2b6:	681b      	ldr	r3, [r3, #0]
 800d2b8:	b292      	uxth	r2, r2
 800d2ba:	801a      	strh	r2, [r3, #0]
	R4.A= R4.A +2;
 800d2bc:	4b0c      	ldr	r3, [pc, #48]	; (800d2f0 <Cursor_1+0xd4>)
 800d2be:	681b      	ldr	r3, [r3, #0]
 800d2c0:	3302      	adds	r3, #2
 800d2c2:	4a0b      	ldr	r2, [pc, #44]	; (800d2f0 <Cursor_1+0xd4>)
 800d2c4:	6013      	str	r3, [r2, #0]
	*(unsigned short*)R4.A =R6;
 800d2c6:	4b0e      	ldr	r3, [pc, #56]	; (800d300 <Cursor_1+0xe4>)
 800d2c8:	681a      	ldr	r2, [r3, #0]
 800d2ca:	4b09      	ldr	r3, [pc, #36]	; (800d2f0 <Cursor_1+0xd4>)
 800d2cc:	681b      	ldr	r3, [r3, #0]
 800d2ce:	b292      	uxth	r2, r2
 800d2d0:	801a      	strh	r2, [r3, #0]
	R4.A= R4.A +2;
 800d2d2:	4b07      	ldr	r3, [pc, #28]	; (800d2f0 <Cursor_1+0xd4>)
 800d2d4:	681b      	ldr	r3, [r3, #0]
 800d2d6:	3302      	adds	r3, #2
 800d2d8:	4a05      	ldr	r2, [pc, #20]	; (800d2f0 <Cursor_1+0xd4>)
 800d2da:	6013      	str	r3, [r2, #0]
 800d2dc:	e000      	b.n	800d2e0 <Cursor_1+0xc4>
		goto Cursor12;
 800d2de:	bf00      	nop

Cursor12:
	R3 = R3 -1;
 800d2e0:	4b02      	ldr	r3, [pc, #8]	; (800d2ec <Cursor_1+0xd0>)
 800d2e2:	681b      	ldr	r3, [r3, #0]
 800d2e4:	3b01      	subs	r3, #1
 800d2e6:	4a01      	ldr	r2, [pc, #4]	; (800d2ec <Cursor_1+0xd0>)
 800d2e8:	6013      	str	r3, [r2, #0]
	if( R3 >= 0)
	{
		goto Cursor11;
 800d2ea:	e7a1      	b.n	800d230 <Cursor_1+0x14>
 800d2ec:	20001870 	.word	0x20001870
 800d2f0:	20001a1c 	.word	0x20001a1c
 800d2f4:	20001a10 	.word	0x20001a10
 800d2f8:	2000186c 	.word	0x2000186c
 800d2fc:	20001878 	.word	0x20001878
 800d300:	20001a18 	.word	0x20001a18

0800d304 <Cursor_2>:
	}
	return;
}

void Cursor_2(short *pTab)
{
 800d304:	b480      	push	{r7}
 800d306:	b083      	sub	sp, #12
 800d308:	af00      	add	r7, sp, #0
 800d30a:	6078      	str	r0, [r7, #4]
	R3 =6;
 800d30c:	4b21      	ldr	r3, [pc, #132]	; (800d394 <Cursor_2+0x90>)
 800d30e:	2206      	movs	r2, #6
 800d310:	601a      	str	r2, [r3, #0]
	R4.A = (char*) &AA[204];
 800d312:	4b21      	ldr	r3, [pc, #132]	; (800d398 <Cursor_2+0x94>)
 800d314:	4a21      	ldr	r2, [pc, #132]	; (800d39c <Cursor_2+0x98>)
 800d316:	601a      	str	r2, [r3, #0]

Cursor21:
	R5 = pTab[R3];
 800d318:	4b1e      	ldr	r3, [pc, #120]	; (800d394 <Cursor_2+0x90>)
 800d31a:	681b      	ldr	r3, [r3, #0]
 800d31c:	005b      	lsls	r3, r3, #1
 800d31e:	687a      	ldr	r2, [r7, #4]
 800d320:	4413      	add	r3, r2
 800d322:	f9b3 3000 	ldrsh.w	r3, [r3]
 800d326:	461a      	mov	r2, r3
 800d328:	4b1d      	ldr	r3, [pc, #116]	; (800d3a0 <Cursor_2+0x9c>)
 800d32a:	601a      	str	r2, [r3, #0]
	if( (R5&1) != 0)
 800d32c:	4b1c      	ldr	r3, [pc, #112]	; (800d3a0 <Cursor_2+0x9c>)
 800d32e:	681b      	ldr	r3, [r3, #0]
 800d330:	f003 0301 	and.w	r3, r3, #1
 800d334:	2b00      	cmp	r3, #0
 800d336:	d126      	bne.n	800d386 <Cursor_2+0x82>
	{
		goto Cursor22;
	}
	R5 = pTab[R3 +10];
 800d338:	4b16      	ldr	r3, [pc, #88]	; (800d394 <Cursor_2+0x90>)
 800d33a:	681b      	ldr	r3, [r3, #0]
 800d33c:	330a      	adds	r3, #10
 800d33e:	005b      	lsls	r3, r3, #1
 800d340:	687a      	ldr	r2, [r7, #4]
 800d342:	4413      	add	r3, r2
 800d344:	f9b3 3000 	ldrsh.w	r3, [r3]
 800d348:	461a      	mov	r2, r3
 800d34a:	4b15      	ldr	r3, [pc, #84]	; (800d3a0 <Cursor_2+0x9c>)
 800d34c:	601a      	str	r2, [r3, #0]
	R4.A = (char*)&AA[204 - R5/2];
 800d34e:	4b14      	ldr	r3, [pc, #80]	; (800d3a0 <Cursor_2+0x9c>)
 800d350:	681b      	ldr	r3, [r3, #0]
 800d352:	085b      	lsrs	r3, r3, #1
 800d354:	f1c3 03cc 	rsb	r3, r3, #204	; 0xcc
 800d358:	005b      	lsls	r3, r3, #1
 800d35a:	4a12      	ldr	r2, [pc, #72]	; (800d3a4 <Cursor_2+0xa0>)
 800d35c:	4413      	add	r3, r2
 800d35e:	4a0e      	ldr	r2, [pc, #56]	; (800d398 <Cursor_2+0x94>)
 800d360:	6013      	str	r3, [r2, #0]
	R6 = pTab[R3 +20];
 800d362:	4b0c      	ldr	r3, [pc, #48]	; (800d394 <Cursor_2+0x90>)
 800d364:	681b      	ldr	r3, [r3, #0]
 800d366:	3314      	adds	r3, #20
 800d368:	005b      	lsls	r3, r3, #1
 800d36a:	687a      	ldr	r2, [r7, #4]
 800d36c:	4413      	add	r3, r2
 800d36e:	f9b3 3000 	ldrsh.w	r3, [r3]
 800d372:	461a      	mov	r2, r3
 800d374:	4b0c      	ldr	r3, [pc, #48]	; (800d3a8 <Cursor_2+0xa4>)
 800d376:	601a      	str	r2, [r3, #0]
	*(unsigned short*)R4.A =R6;
 800d378:	4b0b      	ldr	r3, [pc, #44]	; (800d3a8 <Cursor_2+0xa4>)
 800d37a:	681a      	ldr	r2, [r3, #0]
 800d37c:	4b06      	ldr	r3, [pc, #24]	; (800d398 <Cursor_2+0x94>)
 800d37e:	681b      	ldr	r3, [r3, #0]
 800d380:	b292      	uxth	r2, r2
 800d382:	801a      	strh	r2, [r3, #0]
 800d384:	e000      	b.n	800d388 <Cursor_2+0x84>
		goto Cursor22;
 800d386:	bf00      	nop

Cursor22:
	R3 = R3 -1;
 800d388:	4b02      	ldr	r3, [pc, #8]	; (800d394 <Cursor_2+0x90>)
 800d38a:	681b      	ldr	r3, [r3, #0]
 800d38c:	3b01      	subs	r3, #1
 800d38e:	4a01      	ldr	r2, [pc, #4]	; (800d394 <Cursor_2+0x90>)
 800d390:	6013      	str	r3, [r2, #0]
	if( R3 >= 0)
	{
		goto Cursor21;
 800d392:	e7c1      	b.n	800d318 <Cursor_2+0x14>
 800d394:	20001870 	.word	0x20001870
 800d398:	20001a1c 	.word	0x20001a1c
 800d39c:	20001a10 	.word	0x20001a10
 800d3a0:	2000186c 	.word	0x2000186c
 800d3a4:	20001878 	.word	0x20001878
 800d3a8:	20001a18 	.word	0x20001a18

0800d3ac <Cursor_3>:
	return;
}

// Cursor_3(R1:pTab, R2:Col)// ���������α���  Used: R3-R6
void Cursor_3(short *pTab)
{
 800d3ac:	b480      	push	{r7}
 800d3ae:	b083      	sub	sp, #12
 800d3b0:	af00      	add	r7, sp, #0
 800d3b2:	6078      	str	r0, [r7, #4]
	R3 =6;
 800d3b4:	4b2a      	ldr	r3, [pc, #168]	; (800d460 <Cursor_3+0xb4>)
 800d3b6:	2206      	movs	r2, #6
 800d3b8:	601a      	str	r2, [r3, #0]
	R4.A = (char*) &AA[204];
 800d3ba:	4b2a      	ldr	r3, [pc, #168]	; (800d464 <Cursor_3+0xb8>)
 800d3bc:	4a2a      	ldr	r2, [pc, #168]	; (800d468 <Cursor_3+0xbc>)
 800d3be:	601a      	str	r2, [r3, #0]

Cursor31:
	R5 = pTab[R3];
 800d3c0:	4b27      	ldr	r3, [pc, #156]	; (800d460 <Cursor_3+0xb4>)
 800d3c2:	681b      	ldr	r3, [r3, #0]
 800d3c4:	005b      	lsls	r3, r3, #1
 800d3c6:	687a      	ldr	r2, [r7, #4]
 800d3c8:	4413      	add	r3, r2
 800d3ca:	f9b3 3000 	ldrsh.w	r3, [r3]
 800d3ce:	461a      	mov	r2, r3
 800d3d0:	4b26      	ldr	r3, [pc, #152]	; (800d46c <Cursor_3+0xc0>)
 800d3d2:	601a      	str	r2, [r3, #0]
	if( (R5&2) != 0)
 800d3d4:	4b25      	ldr	r3, [pc, #148]	; (800d46c <Cursor_3+0xc0>)
 800d3d6:	681b      	ldr	r3, [r3, #0]
 800d3d8:	f003 0302 	and.w	r3, r3, #2
 800d3dc:	2b00      	cmp	r3, #0
 800d3de:	d135      	bne.n	800d44c <Cursor_3+0xa0>
	{
		goto Cursor32;
	}

	R5= R2 -1;
 800d3e0:	4b23      	ldr	r3, [pc, #140]	; (800d470 <Cursor_3+0xc4>)
 800d3e2:	681b      	ldr	r3, [r3, #0]
 800d3e4:	3b01      	subs	r3, #1
 800d3e6:	4a21      	ldr	r2, [pc, #132]	; (800d46c <Cursor_3+0xc0>)
 800d3e8:	6013      	str	r3, [r2, #0]
	R5 = R5 &3;
 800d3ea:	4b20      	ldr	r3, [pc, #128]	; (800d46c <Cursor_3+0xc0>)
 800d3ec:	681b      	ldr	r3, [r3, #0]
 800d3ee:	f003 0303 	and.w	r3, r3, #3
 800d3f2:	4a1e      	ldr	r2, [pc, #120]	; (800d46c <Cursor_3+0xc0>)
 800d3f4:	6013      	str	r3, [r2, #0]
	if( R5 != 0)
 800d3f6:	4b1d      	ldr	r3, [pc, #116]	; (800d46c <Cursor_3+0xc0>)
 800d3f8:	681b      	ldr	r3, [r3, #0]
 800d3fa:	2b00      	cmp	r3, #0
 800d3fc:	d128      	bne.n	800d450 <Cursor_3+0xa4>
	{
		goto Cursor32;
	}

	R5 = pTab[R3 +10];
 800d3fe:	4b18      	ldr	r3, [pc, #96]	; (800d460 <Cursor_3+0xb4>)
 800d400:	681b      	ldr	r3, [r3, #0]
 800d402:	330a      	adds	r3, #10
 800d404:	005b      	lsls	r3, r3, #1
 800d406:	687a      	ldr	r2, [r7, #4]
 800d408:	4413      	add	r3, r2
 800d40a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800d40e:	461a      	mov	r2, r3
 800d410:	4b16      	ldr	r3, [pc, #88]	; (800d46c <Cursor_3+0xc0>)
 800d412:	601a      	str	r2, [r3, #0]
	R4.A = (char*)&AA[204 - R5/2];
 800d414:	4b15      	ldr	r3, [pc, #84]	; (800d46c <Cursor_3+0xc0>)
 800d416:	681b      	ldr	r3, [r3, #0]
 800d418:	085b      	lsrs	r3, r3, #1
 800d41a:	f1c3 03cc 	rsb	r3, r3, #204	; 0xcc
 800d41e:	005b      	lsls	r3, r3, #1
 800d420:	4a14      	ldr	r2, [pc, #80]	; (800d474 <Cursor_3+0xc8>)
 800d422:	4413      	add	r3, r2
 800d424:	4a0f      	ldr	r2, [pc, #60]	; (800d464 <Cursor_3+0xb8>)
 800d426:	6013      	str	r3, [r2, #0]
	R6 = pTab[R3 +20];
 800d428:	4b0d      	ldr	r3, [pc, #52]	; (800d460 <Cursor_3+0xb4>)
 800d42a:	681b      	ldr	r3, [r3, #0]
 800d42c:	3314      	adds	r3, #20
 800d42e:	005b      	lsls	r3, r3, #1
 800d430:	687a      	ldr	r2, [r7, #4]
 800d432:	4413      	add	r3, r2
 800d434:	f9b3 3000 	ldrsh.w	r3, [r3]
 800d438:	461a      	mov	r2, r3
 800d43a:	4b0f      	ldr	r3, [pc, #60]	; (800d478 <Cursor_3+0xcc>)
 800d43c:	601a      	str	r2, [r3, #0]
	*(unsigned short*)R4.A =R6;
 800d43e:	4b0e      	ldr	r3, [pc, #56]	; (800d478 <Cursor_3+0xcc>)
 800d440:	681a      	ldr	r2, [r3, #0]
 800d442:	4b08      	ldr	r3, [pc, #32]	; (800d464 <Cursor_3+0xb8>)
 800d444:	681b      	ldr	r3, [r3, #0]
 800d446:	b292      	uxth	r2, r2
 800d448:	801a      	strh	r2, [r3, #0]
 800d44a:	e002      	b.n	800d452 <Cursor_3+0xa6>
		goto Cursor32;
 800d44c:	bf00      	nop
 800d44e:	e000      	b.n	800d452 <Cursor_3+0xa6>
		goto Cursor32;
 800d450:	bf00      	nop

Cursor32:
	R3 = R3 -1;
 800d452:	4b03      	ldr	r3, [pc, #12]	; (800d460 <Cursor_3+0xb4>)
 800d454:	681b      	ldr	r3, [r3, #0]
 800d456:	3b01      	subs	r3, #1
 800d458:	4a01      	ldr	r2, [pc, #4]	; (800d460 <Cursor_3+0xb4>)
 800d45a:	6013      	str	r3, [r2, #0]
	if( R3 >= 0)
	{
		goto Cursor31;
 800d45c:	e7b0      	b.n	800d3c0 <Cursor_3+0x14>
 800d45e:	bf00      	nop
 800d460:	20001870 	.word	0x20001870
 800d464:	20001a1c 	.word	0x20001a1c
 800d468:	20001a10 	.word	0x20001a10
 800d46c:	2000186c 	.word	0x2000186c
 800d470:	20001a28 	.word	0x20001a28
 800d474:	20001878 	.word	0x20001878
 800d478:	20001a18 	.word	0x20001a18

0800d47c <Cursor_4>:
	return;
}

// Cursor_4(R1:pTab, R2:Col)// �����л��α�˵�  Used: R3-R8
void Cursor_4(short *pTab)
{
 800d47c:	b480      	push	{r7}
 800d47e:	b083      	sub	sp, #12
 800d480:	af00      	add	r7, sp, #0
 800d482:	6078      	str	r0, [r7, #4]
	R3 = 7;
 800d484:	4b7a      	ldr	r3, [pc, #488]	; (800d670 <Cursor_4+0x1f4>)
 800d486:	2207      	movs	r2, #7
 800d488:	601a      	str	r2, [r3, #0]

Cursor40:
	R4.A = (char*) &AA[204];
 800d48a:	4b7a      	ldr	r3, [pc, #488]	; (800d674 <Cursor_4+0x1f8>)
 800d48c:	4a7a      	ldr	r2, [pc, #488]	; (800d678 <Cursor_4+0x1fc>)
 800d48e:	601a      	str	r2, [r3, #0]
	R5 = pTab[R3];
 800d490:	4b77      	ldr	r3, [pc, #476]	; (800d670 <Cursor_4+0x1f4>)
 800d492:	681b      	ldr	r3, [r3, #0]
 800d494:	005b      	lsls	r3, r3, #1
 800d496:	687a      	ldr	r2, [r7, #4]
 800d498:	4413      	add	r3, r2
 800d49a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800d49e:	461a      	mov	r2, r3
 800d4a0:	4b76      	ldr	r3, [pc, #472]	; (800d67c <Cursor_4+0x200>)
 800d4a2:	601a      	str	r2, [r3, #0]
	if((R5 & 1) == 0)
 800d4a4:	4b75      	ldr	r3, [pc, #468]	; (800d67c <Cursor_4+0x200>)
 800d4a6:	681b      	ldr	r3, [r3, #0]
 800d4a8:	f003 0301 	and.w	r3, r3, #1
 800d4ac:	2b00      	cmp	r3, #0
 800d4ae:	f040 8145 	bne.w	800d73c <Cursor_4+0x2c0>
	{
		goto Cursor41;
 800d4b2:	bf00      	nop
	}
	goto Cursor49;

Cursor41:
	R5 = pTab[R3+10];
 800d4b4:	4b6e      	ldr	r3, [pc, #440]	; (800d670 <Cursor_4+0x1f4>)
 800d4b6:	681b      	ldr	r3, [r3, #0]
 800d4b8:	330a      	adds	r3, #10
 800d4ba:	005b      	lsls	r3, r3, #1
 800d4bc:	687a      	ldr	r2, [r7, #4]
 800d4be:	4413      	add	r3, r2
 800d4c0:	f9b3 3000 	ldrsh.w	r3, [r3]
 800d4c4:	461a      	mov	r2, r3
 800d4c6:	4b6d      	ldr	r3, [pc, #436]	; (800d67c <Cursor_4+0x200>)
 800d4c8:	601a      	str	r2, [r3, #0]
	R6 = pTab[R3+20];
 800d4ca:	4b69      	ldr	r3, [pc, #420]	; (800d670 <Cursor_4+0x1f4>)
 800d4cc:	681b      	ldr	r3, [r3, #0]
 800d4ce:	3314      	adds	r3, #20
 800d4d0:	005b      	lsls	r3, r3, #1
 800d4d2:	687a      	ldr	r2, [r7, #4]
 800d4d4:	4413      	add	r3, r2
 800d4d6:	f9b3 3000 	ldrsh.w	r3, [r3]
 800d4da:	461a      	mov	r2, r3
 800d4dc:	4b68      	ldr	r3, [pc, #416]	; (800d680 <Cursor_4+0x204>)
 800d4de:	601a      	str	r2, [r3, #0]

	R8 =R5 -2;
 800d4e0:	4b66      	ldr	r3, [pc, #408]	; (800d67c <Cursor_4+0x200>)
 800d4e2:	681b      	ldr	r3, [r3, #0]
 800d4e4:	3b02      	subs	r3, #2
 800d4e6:	4a67      	ldr	r2, [pc, #412]	; (800d684 <Cursor_4+0x208>)
 800d4e8:	6013      	str	r3, [r2, #0]
	if (R5 != R8)
 800d4ea:	4b64      	ldr	r3, [pc, #400]	; (800d67c <Cursor_4+0x200>)
 800d4ec:	681a      	ldr	r2, [r3, #0]
 800d4ee:	4b65      	ldr	r3, [pc, #404]	; (800d684 <Cursor_4+0x208>)
 800d4f0:	681b      	ldr	r3, [r3, #0]
 800d4f2:	429a      	cmp	r2, r3
 800d4f4:	d112      	bne.n	800d51c <Cursor_4+0xa0>
	{
		goto Cursor42;
	}

	*(unsigned short*)R4.A =R6;
 800d4f6:	4b62      	ldr	r3, [pc, #392]	; (800d680 <Cursor_4+0x204>)
 800d4f8:	681a      	ldr	r2, [r3, #0]
 800d4fa:	4b5e      	ldr	r3, [pc, #376]	; (800d674 <Cursor_4+0x1f8>)
 800d4fc:	681b      	ldr	r3, [r3, #0]
 800d4fe:	b292      	uxth	r2, r2
 800d500:	801a      	strh	r2, [r3, #0]
	R4.A = R4.A +404;
 800d502:	4b5c      	ldr	r3, [pc, #368]	; (800d674 <Cursor_4+0x1f8>)
 800d504:	681b      	ldr	r3, [r3, #0]
 800d506:	f503 73ca 	add.w	r3, r3, #404	; 0x194
 800d50a:	4a5a      	ldr	r2, [pc, #360]	; (800d674 <Cursor_4+0x1f8>)
 800d50c:	6013      	str	r3, [r2, #0]
	*(unsigned short*)R4.A =R6;
 800d50e:	4b5c      	ldr	r3, [pc, #368]	; (800d680 <Cursor_4+0x204>)
 800d510:	681a      	ldr	r2, [r3, #0]
 800d512:	4b58      	ldr	r3, [pc, #352]	; (800d674 <Cursor_4+0x1f8>)
 800d514:	681b      	ldr	r3, [r3, #0]
 800d516:	b292      	uxth	r2, r2
 800d518:	801a      	strh	r2, [r3, #0]
	goto Cursor49;
 800d51a:	e114      	b.n	800d746 <Cursor_4+0x2ca>
		goto Cursor42;
 800d51c:	bf00      	nop

Cursor42:
	R8 = R8 +1;
 800d51e:	4b59      	ldr	r3, [pc, #356]	; (800d684 <Cursor_4+0x208>)
 800d520:	681b      	ldr	r3, [r3, #0]
 800d522:	3301      	adds	r3, #1
 800d524:	4a57      	ldr	r2, [pc, #348]	; (800d684 <Cursor_4+0x208>)
 800d526:	6013      	str	r3, [r2, #0]
	if (R2 != R8)
 800d528:	4b57      	ldr	r3, [pc, #348]	; (800d688 <Cursor_4+0x20c>)
 800d52a:	681a      	ldr	r2, [r3, #0]
 800d52c:	4b55      	ldr	r3, [pc, #340]	; (800d684 <Cursor_4+0x208>)
 800d52e:	681b      	ldr	r3, [r3, #0]
 800d530:	429a      	cmp	r2, r3
 800d532:	d128      	bne.n	800d586 <Cursor_4+0x10a>
	{
		goto Cursor43;
	}

	*(unsigned short*)R4.A =R6;
 800d534:	4b52      	ldr	r3, [pc, #328]	; (800d680 <Cursor_4+0x204>)
 800d536:	681a      	ldr	r2, [r3, #0]
 800d538:	4b4e      	ldr	r3, [pc, #312]	; (800d674 <Cursor_4+0x1f8>)
 800d53a:	681b      	ldr	r3, [r3, #0]
 800d53c:	b292      	uxth	r2, r2
 800d53e:	801a      	strh	r2, [r3, #0]
	R4.A= R4.A +2;
 800d540:	4b4c      	ldr	r3, [pc, #304]	; (800d674 <Cursor_4+0x1f8>)
 800d542:	681b      	ldr	r3, [r3, #0]
 800d544:	3302      	adds	r3, #2
 800d546:	4a4b      	ldr	r2, [pc, #300]	; (800d674 <Cursor_4+0x1f8>)
 800d548:	6013      	str	r3, [r2, #0]
	*(unsigned short*)R4.A =R6;
 800d54a:	4b4d      	ldr	r3, [pc, #308]	; (800d680 <Cursor_4+0x204>)
 800d54c:	681a      	ldr	r2, [r3, #0]
 800d54e:	4b49      	ldr	r3, [pc, #292]	; (800d674 <Cursor_4+0x1f8>)
 800d550:	681b      	ldr	r3, [r3, #0]
 800d552:	b292      	uxth	r2, r2
 800d554:	801a      	strh	r2, [r3, #0]
	R4.A = R4.A +400;
 800d556:	4b47      	ldr	r3, [pc, #284]	; (800d674 <Cursor_4+0x1f8>)
 800d558:	681b      	ldr	r3, [r3, #0]
 800d55a:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 800d55e:	4a45      	ldr	r2, [pc, #276]	; (800d674 <Cursor_4+0x1f8>)
 800d560:	6013      	str	r3, [r2, #0]
	*(unsigned short*)R4.A =R6;
 800d562:	4b47      	ldr	r3, [pc, #284]	; (800d680 <Cursor_4+0x204>)
 800d564:	681a      	ldr	r2, [r3, #0]
 800d566:	4b43      	ldr	r3, [pc, #268]	; (800d674 <Cursor_4+0x1f8>)
 800d568:	681b      	ldr	r3, [r3, #0]
 800d56a:	b292      	uxth	r2, r2
 800d56c:	801a      	strh	r2, [r3, #0]
	R4.A= R4.A +2;
 800d56e:	4b41      	ldr	r3, [pc, #260]	; (800d674 <Cursor_4+0x1f8>)
 800d570:	681b      	ldr	r3, [r3, #0]
 800d572:	3302      	adds	r3, #2
 800d574:	4a3f      	ldr	r2, [pc, #252]	; (800d674 <Cursor_4+0x1f8>)
 800d576:	6013      	str	r3, [r2, #0]
	*(unsigned short*)R4.A =R6;
 800d578:	4b41      	ldr	r3, [pc, #260]	; (800d680 <Cursor_4+0x204>)
 800d57a:	681a      	ldr	r2, [r3, #0]
 800d57c:	4b3d      	ldr	r3, [pc, #244]	; (800d674 <Cursor_4+0x1f8>)
 800d57e:	681b      	ldr	r3, [r3, #0]
 800d580:	b292      	uxth	r2, r2
 800d582:	801a      	strh	r2, [r3, #0]
	goto Cursor49;
 800d584:	e0df      	b.n	800d746 <Cursor_4+0x2ca>
		goto Cursor43;
 800d586:	bf00      	nop

Cursor43:
	R8 = R8 +1;
 800d588:	4b3e      	ldr	r3, [pc, #248]	; (800d684 <Cursor_4+0x208>)
 800d58a:	681b      	ldr	r3, [r3, #0]
 800d58c:	3301      	adds	r3, #1
 800d58e:	4a3d      	ldr	r2, [pc, #244]	; (800d684 <Cursor_4+0x208>)
 800d590:	6013      	str	r3, [r2, #0]
	if (R2 != R8)
 800d592:	4b3d      	ldr	r3, [pc, #244]	; (800d688 <Cursor_4+0x20c>)
 800d594:	681a      	ldr	r2, [r3, #0]
 800d596:	4b3b      	ldr	r3, [pc, #236]	; (800d684 <Cursor_4+0x208>)
 800d598:	681b      	ldr	r3, [r3, #0]
 800d59a:	429a      	cmp	r2, r3
 800d59c:	d166      	bne.n	800d66c <Cursor_4+0x1f0>
	{
		goto Cursor45;
	}

	*(unsigned short*)R4.A =R6;
 800d59e:	4b38      	ldr	r3, [pc, #224]	; (800d680 <Cursor_4+0x204>)
 800d5a0:	681a      	ldr	r2, [r3, #0]
 800d5a2:	4b34      	ldr	r3, [pc, #208]	; (800d674 <Cursor_4+0x1f8>)
 800d5a4:	681b      	ldr	r3, [r3, #0]
 800d5a6:	b292      	uxth	r2, r2
 800d5a8:	801a      	strh	r2, [r3, #0]
	R4.A= R4.A +2;
 800d5aa:	4b32      	ldr	r3, [pc, #200]	; (800d674 <Cursor_4+0x1f8>)
 800d5ac:	681b      	ldr	r3, [r3, #0]
 800d5ae:	3302      	adds	r3, #2
 800d5b0:	4a30      	ldr	r2, [pc, #192]	; (800d674 <Cursor_4+0x1f8>)
 800d5b2:	6013      	str	r3, [r2, #0]
	*(unsigned short*)R4.A =R6;
 800d5b4:	4b32      	ldr	r3, [pc, #200]	; (800d680 <Cursor_4+0x204>)
 800d5b6:	681a      	ldr	r2, [r3, #0]
 800d5b8:	4b2e      	ldr	r3, [pc, #184]	; (800d674 <Cursor_4+0x1f8>)
 800d5ba:	681b      	ldr	r3, [r3, #0]
 800d5bc:	b292      	uxth	r2, r2
 800d5be:	801a      	strh	r2, [r3, #0]
	R4.A= R4.A +2;
 800d5c0:	4b2c      	ldr	r3, [pc, #176]	; (800d674 <Cursor_4+0x1f8>)
 800d5c2:	681b      	ldr	r3, [r3, #0]
 800d5c4:	3302      	adds	r3, #2
 800d5c6:	4a2b      	ldr	r2, [pc, #172]	; (800d674 <Cursor_4+0x1f8>)
 800d5c8:	6013      	str	r3, [r2, #0]
	*(unsigned short*)R4.A =R6;
 800d5ca:	4b2d      	ldr	r3, [pc, #180]	; (800d680 <Cursor_4+0x204>)
 800d5cc:	681a      	ldr	r2, [r3, #0]
 800d5ce:	4b29      	ldr	r3, [pc, #164]	; (800d674 <Cursor_4+0x1f8>)
 800d5d0:	681b      	ldr	r3, [r3, #0]
 800d5d2:	b292      	uxth	r2, r2
 800d5d4:	801a      	strh	r2, [r3, #0]
	R4.A = (char*) &AA[4];
 800d5d6:	4b27      	ldr	r3, [pc, #156]	; (800d674 <Cursor_4+0x1f8>)
 800d5d8:	4a2c      	ldr	r2, [pc, #176]	; (800d68c <Cursor_4+0x210>)
 800d5da:	601a      	str	r2, [r3, #0]
	*(unsigned short*)R4.A =R6;
 800d5dc:	4b28      	ldr	r3, [pc, #160]	; (800d680 <Cursor_4+0x204>)
 800d5de:	681a      	ldr	r2, [r3, #0]
 800d5e0:	4b24      	ldr	r3, [pc, #144]	; (800d674 <Cursor_4+0x1f8>)
 800d5e2:	681b      	ldr	r3, [r3, #0]
 800d5e4:	b292      	uxth	r2, r2
 800d5e6:	801a      	strh	r2, [r3, #0]
	R4.A= R4.A +2;
 800d5e8:	4b22      	ldr	r3, [pc, #136]	; (800d674 <Cursor_4+0x1f8>)
 800d5ea:	681b      	ldr	r3, [r3, #0]
 800d5ec:	3302      	adds	r3, #2
 800d5ee:	4a21      	ldr	r2, [pc, #132]	; (800d674 <Cursor_4+0x1f8>)
 800d5f0:	6013      	str	r3, [r2, #0]
	*(unsigned short*)R4.A =R6;
 800d5f2:	4b23      	ldr	r3, [pc, #140]	; (800d680 <Cursor_4+0x204>)
 800d5f4:	681a      	ldr	r2, [r3, #0]
 800d5f6:	4b1f      	ldr	r3, [pc, #124]	; (800d674 <Cursor_4+0x1f8>)
 800d5f8:	681b      	ldr	r3, [r3, #0]
 800d5fa:	b292      	uxth	r2, r2
 800d5fc:	801a      	strh	r2, [r3, #0]
	R4.A= R4.A +2;
 800d5fe:	4b1d      	ldr	r3, [pc, #116]	; (800d674 <Cursor_4+0x1f8>)
 800d600:	681b      	ldr	r3, [r3, #0]
 800d602:	3302      	adds	r3, #2
 800d604:	4a1b      	ldr	r2, [pc, #108]	; (800d674 <Cursor_4+0x1f8>)
 800d606:	6013      	str	r3, [r2, #0]
	*(unsigned short*)R4.A =R6;
 800d608:	4b1d      	ldr	r3, [pc, #116]	; (800d680 <Cursor_4+0x204>)
 800d60a:	681a      	ldr	r2, [r3, #0]
 800d60c:	4b19      	ldr	r3, [pc, #100]	; (800d674 <Cursor_4+0x1f8>)
 800d60e:	681b      	ldr	r3, [r3, #0]
 800d610:	b292      	uxth	r2, r2
 800d612:	801a      	strh	r2, [r3, #0]
	R5 = pTab[R3+10];
 800d614:	4b16      	ldr	r3, [pc, #88]	; (800d670 <Cursor_4+0x1f4>)
 800d616:	681b      	ldr	r3, [r3, #0]
 800d618:	330a      	adds	r3, #10
 800d61a:	005b      	lsls	r3, r3, #1
 800d61c:	687a      	ldr	r2, [r7, #4]
 800d61e:	4413      	add	r3, r2
 800d620:	f9b3 3000 	ldrsh.w	r3, [r3]
 800d624:	461a      	mov	r2, r3
 800d626:	4b15      	ldr	r3, [pc, #84]	; (800d67c <Cursor_4+0x200>)
 800d628:	601a      	str	r2, [r3, #0]
	if((R5 & 2) != 0)
 800d62a:	4b14      	ldr	r3, [pc, #80]	; (800d67c <Cursor_4+0x200>)
 800d62c:	681b      	ldr	r3, [r3, #0]
 800d62e:	f003 0302 	and.w	r3, r3, #2
 800d632:	2b00      	cmp	r3, #0
 800d634:	d12e      	bne.n	800d694 <Cursor_4+0x218>
	{
		goto Cursor45;
	}
	R4.A = (char*) &AA[204];
 800d636:	4b0f      	ldr	r3, [pc, #60]	; (800d674 <Cursor_4+0x1f8>)
 800d638:	4a0f      	ldr	r2, [pc, #60]	; (800d678 <Cursor_4+0x1fc>)
 800d63a:	601a      	str	r2, [r3, #0]
	R7 = R4.I +400;
 800d63c:	4b0d      	ldr	r3, [pc, #52]	; (800d674 <Cursor_4+0x1f8>)
 800d63e:	681b      	ldr	r3, [r3, #0]
 800d640:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 800d644:	4a12      	ldr	r2, [pc, #72]	; (800d690 <Cursor_4+0x214>)
 800d646:	6013      	str	r3, [r2, #0]

Cursor44:
	R4.A= R4.A +8;
 800d648:	4b0a      	ldr	r3, [pc, #40]	; (800d674 <Cursor_4+0x1f8>)
 800d64a:	681b      	ldr	r3, [r3, #0]
 800d64c:	3308      	adds	r3, #8
 800d64e:	4a09      	ldr	r2, [pc, #36]	; (800d674 <Cursor_4+0x1f8>)
 800d650:	6013      	str	r3, [r2, #0]
	*(unsigned short*)R4.A =R6;
 800d652:	4b0b      	ldr	r3, [pc, #44]	; (800d680 <Cursor_4+0x204>)
 800d654:	681a      	ldr	r2, [r3, #0]
 800d656:	4b07      	ldr	r3, [pc, #28]	; (800d674 <Cursor_4+0x1f8>)
 800d658:	681b      	ldr	r3, [r3, #0]
 800d65a:	b292      	uxth	r2, r2
 800d65c:	801a      	strh	r2, [r3, #0]
	if(R7 >= R4.I)
 800d65e:	4b05      	ldr	r3, [pc, #20]	; (800d674 <Cursor_4+0x1f8>)
 800d660:	681a      	ldr	r2, [r3, #0]
 800d662:	4b0b      	ldr	r3, [pc, #44]	; (800d690 <Cursor_4+0x214>)
 800d664:	681b      	ldr	r3, [r3, #0]
 800d666:	429a      	cmp	r2, r3
 800d668:	d86a      	bhi.n	800d740 <Cursor_4+0x2c4>
	{
		goto Cursor44;
 800d66a:	e7ed      	b.n	800d648 <Cursor_4+0x1cc>
		goto Cursor45;
 800d66c:	bf00      	nop
 800d66e:	e012      	b.n	800d696 <Cursor_4+0x21a>
 800d670:	20001870 	.word	0x20001870
 800d674:	20001a1c 	.word	0x20001a1c
 800d678:	20001a10 	.word	0x20001a10
 800d67c:	2000186c 	.word	0x2000186c
 800d680:	20001a18 	.word	0x20001a18
 800d684:	20001868 	.word	0x20001868
 800d688:	20001a28 	.word	0x20001a28
 800d68c:	20001880 	.word	0x20001880
 800d690:	20001a30 	.word	0x20001a30
		goto Cursor45;
 800d694:	bf00      	nop
	}
	goto Cursor49;

Cursor45:
	R8 = R8 +1;
 800d696:	4b34      	ldr	r3, [pc, #208]	; (800d768 <Cursor_4+0x2ec>)
 800d698:	681b      	ldr	r3, [r3, #0]
 800d69a:	3301      	adds	r3, #1
 800d69c:	4a32      	ldr	r2, [pc, #200]	; (800d768 <Cursor_4+0x2ec>)
 800d69e:	6013      	str	r3, [r2, #0]
	if (R8 != R2)
 800d6a0:	4b31      	ldr	r3, [pc, #196]	; (800d768 <Cursor_4+0x2ec>)
 800d6a2:	681a      	ldr	r2, [r3, #0]
 800d6a4:	4b31      	ldr	r3, [pc, #196]	; (800d76c <Cursor_4+0x2f0>)
 800d6a6:	681b      	ldr	r3, [r3, #0]
 800d6a8:	429a      	cmp	r2, r3
 800d6aa:	d128      	bne.n	800d6fe <Cursor_4+0x282>
	{
		goto Cursor46;
	}
	*(unsigned short*)R4.A =R6;
 800d6ac:	4b30      	ldr	r3, [pc, #192]	; (800d770 <Cursor_4+0x2f4>)
 800d6ae:	681a      	ldr	r2, [r3, #0]
 800d6b0:	4b30      	ldr	r3, [pc, #192]	; (800d774 <Cursor_4+0x2f8>)
 800d6b2:	681b      	ldr	r3, [r3, #0]
 800d6b4:	b292      	uxth	r2, r2
 800d6b6:	801a      	strh	r2, [r3, #0]
	R4.A= R4.A +2;
 800d6b8:	4b2e      	ldr	r3, [pc, #184]	; (800d774 <Cursor_4+0x2f8>)
 800d6ba:	681b      	ldr	r3, [r3, #0]
 800d6bc:	3302      	adds	r3, #2
 800d6be:	4a2d      	ldr	r2, [pc, #180]	; (800d774 <Cursor_4+0x2f8>)
 800d6c0:	6013      	str	r3, [r2, #0]
	*(unsigned short*)R4.A =R6;
 800d6c2:	4b2b      	ldr	r3, [pc, #172]	; (800d770 <Cursor_4+0x2f4>)
 800d6c4:	681a      	ldr	r2, [r3, #0]
 800d6c6:	4b2b      	ldr	r3, [pc, #172]	; (800d774 <Cursor_4+0x2f8>)
 800d6c8:	681b      	ldr	r3, [r3, #0]
 800d6ca:	b292      	uxth	r2, r2
 800d6cc:	801a      	strh	r2, [r3, #0]
	R4.I = R4.I +400;
 800d6ce:	4b29      	ldr	r3, [pc, #164]	; (800d774 <Cursor_4+0x2f8>)
 800d6d0:	681b      	ldr	r3, [r3, #0]
 800d6d2:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 800d6d6:	4a27      	ldr	r2, [pc, #156]	; (800d774 <Cursor_4+0x2f8>)
 800d6d8:	6013      	str	r3, [r2, #0]
	*(unsigned short*)R4.A =R6;
 800d6da:	4b25      	ldr	r3, [pc, #148]	; (800d770 <Cursor_4+0x2f4>)
 800d6dc:	681a      	ldr	r2, [r3, #0]
 800d6de:	4b25      	ldr	r3, [pc, #148]	; (800d774 <Cursor_4+0x2f8>)
 800d6e0:	681b      	ldr	r3, [r3, #0]
 800d6e2:	b292      	uxth	r2, r2
 800d6e4:	801a      	strh	r2, [r3, #0]
	R4.A= R4.A +2;
 800d6e6:	4b23      	ldr	r3, [pc, #140]	; (800d774 <Cursor_4+0x2f8>)
 800d6e8:	681b      	ldr	r3, [r3, #0]
 800d6ea:	3302      	adds	r3, #2
 800d6ec:	4a21      	ldr	r2, [pc, #132]	; (800d774 <Cursor_4+0x2f8>)
 800d6ee:	6013      	str	r3, [r2, #0]
	*(unsigned short*)R4.A =R6;
 800d6f0:	4b1f      	ldr	r3, [pc, #124]	; (800d770 <Cursor_4+0x2f4>)
 800d6f2:	681a      	ldr	r2, [r3, #0]
 800d6f4:	4b1f      	ldr	r3, [pc, #124]	; (800d774 <Cursor_4+0x2f8>)
 800d6f6:	681b      	ldr	r3, [r3, #0]
 800d6f8:	b292      	uxth	r2, r2
 800d6fa:	801a      	strh	r2, [r3, #0]
	goto Cursor49;
 800d6fc:	e023      	b.n	800d746 <Cursor_4+0x2ca>
		goto Cursor46;
 800d6fe:	bf00      	nop

Cursor46:
	R8 = R8 +1;
 800d700:	4b19      	ldr	r3, [pc, #100]	; (800d768 <Cursor_4+0x2ec>)
 800d702:	681b      	ldr	r3, [r3, #0]
 800d704:	3301      	adds	r3, #1
 800d706:	4a18      	ldr	r2, [pc, #96]	; (800d768 <Cursor_4+0x2ec>)
 800d708:	6013      	str	r3, [r2, #0]
	if (R8 != R2)
 800d70a:	4b17      	ldr	r3, [pc, #92]	; (800d768 <Cursor_4+0x2ec>)
 800d70c:	681a      	ldr	r2, [r3, #0]
 800d70e:	4b17      	ldr	r3, [pc, #92]	; (800d76c <Cursor_4+0x2f0>)
 800d710:	681b      	ldr	r3, [r3, #0]
 800d712:	429a      	cmp	r2, r3
 800d714:	d116      	bne.n	800d744 <Cursor_4+0x2c8>
	{
		goto Cursor49;
	}
	*(unsigned short*)R4.A =R6;
 800d716:	4b16      	ldr	r3, [pc, #88]	; (800d770 <Cursor_4+0x2f4>)
 800d718:	681a      	ldr	r2, [r3, #0]
 800d71a:	4b16      	ldr	r3, [pc, #88]	; (800d774 <Cursor_4+0x2f8>)
 800d71c:	681b      	ldr	r3, [r3, #0]
 800d71e:	b292      	uxth	r2, r2
 800d720:	801a      	strh	r2, [r3, #0]
	R4.I = R4.I +404;
 800d722:	4b14      	ldr	r3, [pc, #80]	; (800d774 <Cursor_4+0x2f8>)
 800d724:	681b      	ldr	r3, [r3, #0]
 800d726:	f503 73ca 	add.w	r3, r3, #404	; 0x194
 800d72a:	4a12      	ldr	r2, [pc, #72]	; (800d774 <Cursor_4+0x2f8>)
 800d72c:	6013      	str	r3, [r2, #0]
	*(unsigned short*)R4.A =R6;
 800d72e:	4b10      	ldr	r3, [pc, #64]	; (800d770 <Cursor_4+0x2f4>)
 800d730:	681a      	ldr	r2, [r3, #0]
 800d732:	4b10      	ldr	r3, [pc, #64]	; (800d774 <Cursor_4+0x2f8>)
 800d734:	681b      	ldr	r3, [r3, #0]
 800d736:	b292      	uxth	r2, r2
 800d738:	801a      	strh	r2, [r3, #0]
 800d73a:	e004      	b.n	800d746 <Cursor_4+0x2ca>
	goto Cursor49;
 800d73c:	bf00      	nop
 800d73e:	e002      	b.n	800d746 <Cursor_4+0x2ca>
	goto Cursor49;
 800d740:	bf00      	nop
 800d742:	e000      	b.n	800d746 <Cursor_4+0x2ca>
		goto Cursor49;
 800d744:	bf00      	nop

Cursor49:
	R3 = R3 +1;
 800d746:	4b0c      	ldr	r3, [pc, #48]	; (800d778 <Cursor_4+0x2fc>)
 800d748:	681b      	ldr	r3, [r3, #0]
 800d74a:	3301      	adds	r3, #1
 800d74c:	4a0a      	ldr	r2, [pc, #40]	; (800d778 <Cursor_4+0x2fc>)
 800d74e:	6013      	str	r3, [r2, #0]
	if (R3 != 10)
 800d750:	4b09      	ldr	r3, [pc, #36]	; (800d778 <Cursor_4+0x2fc>)
 800d752:	681b      	ldr	r3, [r3, #0]
 800d754:	2b0a      	cmp	r3, #10
 800d756:	d000      	beq.n	800d75a <Cursor_4+0x2de>
		goto Cursor40;
 800d758:	e697      	b.n	800d48a <Cursor_4+0xe>

return;
 800d75a:	bf00      	nop
}
 800d75c:	370c      	adds	r7, #12
 800d75e:	46bd      	mov	sp, r7
 800d760:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d764:	4770      	bx	lr
 800d766:	bf00      	nop
 800d768:	20001868 	.word	0x20001868
 800d76c:	20001a28 	.word	0x20001a28
 800d770:	20001a18 	.word	0x20001a18
 800d774:	20001a1c 	.word	0x20001a1c
 800d778:	20001870 	.word	0x20001870

0800d77c <Send_LCD>:

// R0:pDat, R1:pTab, R2:Col, R3:Tmp, R4:pBuf, R5:WR , R6:LCD, R7:Ctrl, R8:RS
// void Send_LCD(u16* pBuf, u16 Row) // �ӻ���������һ�����ݵ�LCD Used: R3-R8
void Send_LCD(short* pTab)
{
 800d77c:	b580      	push	{r7, lr}
 800d77e:	b082      	sub	sp, #8
 800d780:	af00      	add	r7, sp, #0
 800d782:	6078      	str	r0, [r7, #4]
	R5 = (unsigned)&AA[204];
 800d784:	4a12      	ldr	r2, [pc, #72]	; (800d7d0 <Send_LCD+0x54>)
 800d786:	4b13      	ldr	r3, [pc, #76]	; (800d7d4 <Send_LCD+0x58>)
 800d788:	601a      	str	r2, [r3, #0]

	LCD_Set_Posi(R2, WINDOW_Y0);
 800d78a:	4b13      	ldr	r3, [pc, #76]	; (800d7d8 <Send_LCD+0x5c>)
 800d78c:	681b      	ldr	r3, [r3, #0]
 800d78e:	b21b      	sxth	r3, r3
 800d790:	2113      	movs	r1, #19
 800d792:	4618      	mov	r0, r3
 800d794:	f004 f8c8 	bl	8011928 <LCD_Set_Posi>
	R4.I =203;
 800d798:	4b10      	ldr	r3, [pc, #64]	; (800d7dc <Send_LCD+0x60>)
 800d79a:	22cb      	movs	r2, #203	; 0xcb
 800d79c:	601a      	str	r2, [r3, #0]

Send_LCD_Loop:
	LCD_Set_Pixel( *(unsigned short*)R5);
 800d79e:	4b0d      	ldr	r3, [pc, #52]	; (800d7d4 <Send_LCD+0x58>)
 800d7a0:	681b      	ldr	r3, [r3, #0]
 800d7a2:	881b      	ldrh	r3, [r3, #0]
 800d7a4:	4618      	mov	r0, r3
 800d7a6:	f004 f90d 	bl	80119c4 <LCD_Set_Pixel>
	R5 = R5+2;
 800d7aa:	4b0a      	ldr	r3, [pc, #40]	; (800d7d4 <Send_LCD+0x58>)
 800d7ac:	681b      	ldr	r3, [r3, #0]
 800d7ae:	3302      	adds	r3, #2
 800d7b0:	4a08      	ldr	r2, [pc, #32]	; (800d7d4 <Send_LCD+0x58>)
 800d7b2:	6013      	str	r3, [r2, #0]
	R4.I = R4.I - 1;
 800d7b4:	4b09      	ldr	r3, [pc, #36]	; (800d7dc <Send_LCD+0x60>)
 800d7b6:	681b      	ldr	r3, [r3, #0]
 800d7b8:	3b01      	subs	r3, #1
 800d7ba:	4a08      	ldr	r2, [pc, #32]	; (800d7dc <Send_LCD+0x60>)
 800d7bc:	6013      	str	r3, [r2, #0]
	if(R4.I !=0 )
 800d7be:	4b07      	ldr	r3, [pc, #28]	; (800d7dc <Send_LCD+0x60>)
 800d7c0:	681b      	ldr	r3, [r3, #0]
 800d7c2:	2b00      	cmp	r3, #0
 800d7c4:	d000      	beq.n	800d7c8 <Send_LCD+0x4c>
		goto Send_LCD_Loop;
 800d7c6:	e7ea      	b.n	800d79e <Send_LCD+0x22>

	return;
 800d7c8:	bf00      	nop
}
 800d7ca:	3708      	adds	r7, #8
 800d7cc:	46bd      	mov	sp, r7
 800d7ce:	bd80      	pop	{r7, pc}
 800d7d0:	20001a10 	.word	0x20001a10
 800d7d4:	2000186c 	.word	0x2000186c
 800d7d8:	20001a28 	.word	0x20001a28
 800d7dc:	20001a1c 	.word	0x20001a1c

0800d7e0 <Draw_Pop>:

// Draw_Pop(R2:Col, R10:pPop, R11:By0, R12:By1)// ���������� Used: R5-R7
void Draw_Pop(short* pTab)
{
 800d7e0:	b480      	push	{r7}
 800d7e2:	b083      	sub	sp, #12
 800d7e4:	af00      	add	r7, sp, #0
 800d7e6:	6078      	str	r0, [r7, #4]
	R7 = 0x10001;
 800d7e8:	4b85      	ldr	r3, [pc, #532]	; (800da00 <Draw_Pop+0x220>)
 800d7ea:	f04f 1201 	mov.w	r2, #65537	; 0x10001
 800d7ee:	601a      	str	r2, [r3, #0]
	R5 = pTab[36];
 800d7f0:	687b      	ldr	r3, [r7, #4]
 800d7f2:	3348      	adds	r3, #72	; 0x48
 800d7f4:	f9b3 3000 	ldrsh.w	r3, [r3]
 800d7f8:	461a      	mov	r2, r3
 800d7fa:	4b82      	ldr	r3, [pc, #520]	; (800da04 <Draw_Pop+0x224>)
 800d7fc:	601a      	str	r2, [r3, #0]
	R6 = pTab[37];
 800d7fe:	687b      	ldr	r3, [r7, #4]
 800d800:	334a      	adds	r3, #74	; 0x4a
 800d802:	f9b3 3000 	ldrsh.w	r3, [r3]
 800d806:	461a      	mov	r2, r3
 800d808:	4b7f      	ldr	r3, [pc, #508]	; (800da08 <Draw_Pop+0x228>)
 800d80a:	601a      	str	r2, [r3, #0]

	R3 = R11;
 800d80c:	4b7f      	ldr	r3, [pc, #508]	; (800da0c <Draw_Pop+0x22c>)
 800d80e:	681b      	ldr	r3, [r3, #0]
 800d810:	4a7f      	ldr	r2, [pc, #508]	; (800da10 <Draw_Pop+0x230>)
 800d812:	6013      	str	r3, [r2, #0]
	if( R2 == R3 )
 800d814:	4b7f      	ldr	r3, [pc, #508]	; (800da14 <Draw_Pop+0x234>)
 800d816:	681a      	ldr	r2, [r3, #0]
 800d818:	4b7d      	ldr	r3, [pc, #500]	; (800da10 <Draw_Pop+0x230>)
 800d81a:	681b      	ldr	r3, [r3, #0]
 800d81c:	429a      	cmp	r2, r3
 800d81e:	d10d      	bne.n	800d83c <Draw_Pop+0x5c>
	{
		R5 = R5 +6;
 800d820:	4b78      	ldr	r3, [pc, #480]	; (800da04 <Draw_Pop+0x224>)
 800d822:	681b      	ldr	r3, [r3, #0]
 800d824:	3306      	adds	r3, #6
 800d826:	4a77      	ldr	r2, [pc, #476]	; (800da04 <Draw_Pop+0x224>)
 800d828:	6013      	str	r3, [r2, #0]
		R6 = R6 - 12;
 800d82a:	4b77      	ldr	r3, [pc, #476]	; (800da08 <Draw_Pop+0x228>)
 800d82c:	681b      	ldr	r3, [r3, #0]
 800d82e:	3b0c      	subs	r3, #12
 800d830:	4a75      	ldr	r2, [pc, #468]	; (800da08 <Draw_Pop+0x228>)
 800d832:	6013      	str	r3, [r2, #0]
		R7 = 0X80008;
 800d834:	4b72      	ldr	r3, [pc, #456]	; (800da00 <Draw_Pop+0x220>)
 800d836:	f04f 1208 	mov.w	r2, #524296	; 0x80008
 800d83a:	601a      	str	r2, [r3, #0]
	}

	R3 = R11 + 1;
 800d83c:	4b73      	ldr	r3, [pc, #460]	; (800da0c <Draw_Pop+0x22c>)
 800d83e:	681b      	ldr	r3, [r3, #0]
 800d840:	3301      	adds	r3, #1
 800d842:	4a73      	ldr	r2, [pc, #460]	; (800da10 <Draw_Pop+0x230>)
 800d844:	6013      	str	r3, [r2, #0]
	if( R2 == R3 )
 800d846:	4b73      	ldr	r3, [pc, #460]	; (800da14 <Draw_Pop+0x234>)
 800d848:	681a      	ldr	r2, [r3, #0]
 800d84a:	4b71      	ldr	r3, [pc, #452]	; (800da10 <Draw_Pop+0x230>)
 800d84c:	681b      	ldr	r3, [r3, #0]
 800d84e:	429a      	cmp	r2, r3
 800d850:	d10d      	bne.n	800d86e <Draw_Pop+0x8e>
	{
		R5 = R5 +4;
 800d852:	4b6c      	ldr	r3, [pc, #432]	; (800da04 <Draw_Pop+0x224>)
 800d854:	681b      	ldr	r3, [r3, #0]
 800d856:	3304      	adds	r3, #4
 800d858:	4a6a      	ldr	r2, [pc, #424]	; (800da04 <Draw_Pop+0x224>)
 800d85a:	6013      	str	r3, [r2, #0]
		R6 = R6 - 8;
 800d85c:	4b6a      	ldr	r3, [pc, #424]	; (800da08 <Draw_Pop+0x228>)
 800d85e:	681b      	ldr	r3, [r3, #0]
 800d860:	3b08      	subs	r3, #8
 800d862:	4a69      	ldr	r2, [pc, #420]	; (800da08 <Draw_Pop+0x228>)
 800d864:	6013      	str	r3, [r2, #0]
		R7 = 0X40004;
 800d866:	4b66      	ldr	r3, [pc, #408]	; (800da00 <Draw_Pop+0x220>)
 800d868:	f04f 1204 	mov.w	r2, #262148	; 0x40004
 800d86c:	601a      	str	r2, [r3, #0]
	}

	R3 = R11 + 2;
 800d86e:	4b67      	ldr	r3, [pc, #412]	; (800da0c <Draw_Pop+0x22c>)
 800d870:	681b      	ldr	r3, [r3, #0]
 800d872:	3302      	adds	r3, #2
 800d874:	4a66      	ldr	r2, [pc, #408]	; (800da10 <Draw_Pop+0x230>)
 800d876:	6013      	str	r3, [r2, #0]
	if( R2 == R3 )
 800d878:	4b66      	ldr	r3, [pc, #408]	; (800da14 <Draw_Pop+0x234>)
 800d87a:	681a      	ldr	r2, [r3, #0]
 800d87c:	4b64      	ldr	r3, [pc, #400]	; (800da10 <Draw_Pop+0x230>)
 800d87e:	681b      	ldr	r3, [r3, #0]
 800d880:	429a      	cmp	r2, r3
 800d882:	d10d      	bne.n	800d8a0 <Draw_Pop+0xc0>
	{
		R5 = R5 +2;
 800d884:	4b5f      	ldr	r3, [pc, #380]	; (800da04 <Draw_Pop+0x224>)
 800d886:	681b      	ldr	r3, [r3, #0]
 800d888:	3302      	adds	r3, #2
 800d88a:	4a5e      	ldr	r2, [pc, #376]	; (800da04 <Draw_Pop+0x224>)
 800d88c:	6013      	str	r3, [r2, #0]
		R6 = R6 - 4;
 800d88e:	4b5e      	ldr	r3, [pc, #376]	; (800da08 <Draw_Pop+0x228>)
 800d890:	681b      	ldr	r3, [r3, #0]
 800d892:	3b04      	subs	r3, #4
 800d894:	4a5c      	ldr	r2, [pc, #368]	; (800da08 <Draw_Pop+0x228>)
 800d896:	6013      	str	r3, [r2, #0]
		R7 = 0X20002;
 800d898:	4b59      	ldr	r3, [pc, #356]	; (800da00 <Draw_Pop+0x220>)
 800d89a:	f04f 1202 	mov.w	r2, #131074	; 0x20002
 800d89e:	601a      	str	r2, [r3, #0]
	}

	R3 = R12 -3;
 800d8a0:	4b5d      	ldr	r3, [pc, #372]	; (800da18 <Draw_Pop+0x238>)
 800d8a2:	681b      	ldr	r3, [r3, #0]
 800d8a4:	3b03      	subs	r3, #3
 800d8a6:	4a5a      	ldr	r2, [pc, #360]	; (800da10 <Draw_Pop+0x230>)
 800d8a8:	6013      	str	r3, [r2, #0]
	if( R2 == R3 )
 800d8aa:	4b5a      	ldr	r3, [pc, #360]	; (800da14 <Draw_Pop+0x234>)
 800d8ac:	681a      	ldr	r2, [r3, #0]
 800d8ae:	4b58      	ldr	r3, [pc, #352]	; (800da10 <Draw_Pop+0x230>)
 800d8b0:	681b      	ldr	r3, [r3, #0]
 800d8b2:	429a      	cmp	r2, r3
 800d8b4:	d10d      	bne.n	800d8d2 <Draw_Pop+0xf2>
	{
		R5 = R5 +2;
 800d8b6:	4b53      	ldr	r3, [pc, #332]	; (800da04 <Draw_Pop+0x224>)
 800d8b8:	681b      	ldr	r3, [r3, #0]
 800d8ba:	3302      	adds	r3, #2
 800d8bc:	4a51      	ldr	r2, [pc, #324]	; (800da04 <Draw_Pop+0x224>)
 800d8be:	6013      	str	r3, [r2, #0]
		R6 = R6 - 4;
 800d8c0:	4b51      	ldr	r3, [pc, #324]	; (800da08 <Draw_Pop+0x228>)
 800d8c2:	681b      	ldr	r3, [r3, #0]
 800d8c4:	3b04      	subs	r3, #4
 800d8c6:	4a50      	ldr	r2, [pc, #320]	; (800da08 <Draw_Pop+0x228>)
 800d8c8:	6013      	str	r3, [r2, #0]
		R7 = 0X20002;
 800d8ca:	4b4d      	ldr	r3, [pc, #308]	; (800da00 <Draw_Pop+0x220>)
 800d8cc:	f04f 1202 	mov.w	r2, #131074	; 0x20002
 800d8d0:	601a      	str	r2, [r3, #0]
	}

	R3 = R12 -2;
 800d8d2:	4b51      	ldr	r3, [pc, #324]	; (800da18 <Draw_Pop+0x238>)
 800d8d4:	681b      	ldr	r3, [r3, #0]
 800d8d6:	3b02      	subs	r3, #2
 800d8d8:	4a4d      	ldr	r2, [pc, #308]	; (800da10 <Draw_Pop+0x230>)
 800d8da:	6013      	str	r3, [r2, #0]
	if( R2 == R3 )
 800d8dc:	4b4d      	ldr	r3, [pc, #308]	; (800da14 <Draw_Pop+0x234>)
 800d8de:	681a      	ldr	r2, [r3, #0]
 800d8e0:	4b4b      	ldr	r3, [pc, #300]	; (800da10 <Draw_Pop+0x230>)
 800d8e2:	681b      	ldr	r3, [r3, #0]
 800d8e4:	429a      	cmp	r2, r3
 800d8e6:	d10d      	bne.n	800d904 <Draw_Pop+0x124>
	{
		R5 = R5 +4;
 800d8e8:	4b46      	ldr	r3, [pc, #280]	; (800da04 <Draw_Pop+0x224>)
 800d8ea:	681b      	ldr	r3, [r3, #0]
 800d8ec:	3304      	adds	r3, #4
 800d8ee:	4a45      	ldr	r2, [pc, #276]	; (800da04 <Draw_Pop+0x224>)
 800d8f0:	6013      	str	r3, [r2, #0]
		R6 = R6 - 8;
 800d8f2:	4b45      	ldr	r3, [pc, #276]	; (800da08 <Draw_Pop+0x228>)
 800d8f4:	681b      	ldr	r3, [r3, #0]
 800d8f6:	3b08      	subs	r3, #8
 800d8f8:	4a43      	ldr	r2, [pc, #268]	; (800da08 <Draw_Pop+0x228>)
 800d8fa:	6013      	str	r3, [r2, #0]
		R7 = 0X40004;
 800d8fc:	4b40      	ldr	r3, [pc, #256]	; (800da00 <Draw_Pop+0x220>)
 800d8fe:	f04f 1204 	mov.w	r2, #262148	; 0x40004
 800d902:	601a      	str	r2, [r3, #0]
	}

	R3 = R12 -1;
 800d904:	4b44      	ldr	r3, [pc, #272]	; (800da18 <Draw_Pop+0x238>)
 800d906:	681b      	ldr	r3, [r3, #0]
 800d908:	3b01      	subs	r3, #1
 800d90a:	4a41      	ldr	r2, [pc, #260]	; (800da10 <Draw_Pop+0x230>)
 800d90c:	6013      	str	r3, [r2, #0]
	if( R2 == R3 )
 800d90e:	4b41      	ldr	r3, [pc, #260]	; (800da14 <Draw_Pop+0x234>)
 800d910:	681a      	ldr	r2, [r3, #0]
 800d912:	4b3f      	ldr	r3, [pc, #252]	; (800da10 <Draw_Pop+0x230>)
 800d914:	681b      	ldr	r3, [r3, #0]
 800d916:	429a      	cmp	r2, r3
 800d918:	d10d      	bne.n	800d936 <Draw_Pop+0x156>
	{
		R5 = R5 +6;
 800d91a:	4b3a      	ldr	r3, [pc, #232]	; (800da04 <Draw_Pop+0x224>)
 800d91c:	681b      	ldr	r3, [r3, #0]
 800d91e:	3306      	adds	r3, #6
 800d920:	4a38      	ldr	r2, [pc, #224]	; (800da04 <Draw_Pop+0x224>)
 800d922:	6013      	str	r3, [r2, #0]
		R6 = R6 - 12;
 800d924:	4b38      	ldr	r3, [pc, #224]	; (800da08 <Draw_Pop+0x228>)
 800d926:	681b      	ldr	r3, [r3, #0]
 800d928:	3b0c      	subs	r3, #12
 800d92a:	4a37      	ldr	r2, [pc, #220]	; (800da08 <Draw_Pop+0x228>)
 800d92c:	6013      	str	r3, [r2, #0]
		R7 = 0X80008;
 800d92e:	4b34      	ldr	r3, [pc, #208]	; (800da00 <Draw_Pop+0x220>)
 800d930:	f04f 1208 	mov.w	r2, #524296	; 0x80008
 800d934:	601a      	str	r2, [r3, #0]
	}

//    ADD     R4,  SP, R5
	R4.A = (char*) &AA[204-R5/2];
 800d936:	4b33      	ldr	r3, [pc, #204]	; (800da04 <Draw_Pop+0x224>)
 800d938:	681b      	ldr	r3, [r3, #0]
 800d93a:	085b      	lsrs	r3, r3, #1
 800d93c:	f1c3 03cc 	rsb	r3, r3, #204	; 0xcc
 800d940:	005b      	lsls	r3, r3, #1
 800d942:	4a36      	ldr	r2, [pc, #216]	; (800da1c <Draw_Pop+0x23c>)
 800d944:	4413      	add	r3, r2
 800d946:	4a36      	ldr	r2, [pc, #216]	; (800da20 <Draw_Pop+0x240>)
 800d948:	6013      	str	r3, [r2, #0]
	R8 = pTab[39];
 800d94a:	687b      	ldr	r3, [r7, #4]
 800d94c:	334e      	adds	r3, #78	; 0x4e
 800d94e:	f9b3 3000 	ldrsh.w	r3, [r3]
 800d952:	461a      	mov	r2, r3
 800d954:	4b33      	ldr	r3, [pc, #204]	; (800da24 <Draw_Pop+0x244>)
 800d956:	601a      	str	r2, [r3, #0]
	R9 = pTab[40];
 800d958:	687b      	ldr	r3, [r7, #4]
 800d95a:	3350      	adds	r3, #80	; 0x50
 800d95c:	f9b3 3000 	ldrsh.w	r3, [r3]
 800d960:	461a      	mov	r2, r3
 800d962:	4b31      	ldr	r3, [pc, #196]	; (800da28 <Draw_Pop+0x248>)
 800d964:	601a      	str	r2, [r3, #0]
	R3 =  *(unsigned short*) R10;
 800d966:	4b31      	ldr	r3, [pc, #196]	; (800da2c <Draw_Pop+0x24c>)
 800d968:	681b      	ldr	r3, [r3, #0]
 800d96a:	881b      	ldrh	r3, [r3, #0]
 800d96c:	461a      	mov	r2, r3
 800d96e:	4b28      	ldr	r3, [pc, #160]	; (800da10 <Draw_Pop+0x230>)
 800d970:	601a      	str	r2, [r3, #0]
	R10= R10+2;
 800d972:	4b2e      	ldr	r3, [pc, #184]	; (800da2c <Draw_Pop+0x24c>)
 800d974:	681b      	ldr	r3, [r3, #0]
 800d976:	3302      	adds	r3, #2
 800d978:	4a2c      	ldr	r2, [pc, #176]	; (800da2c <Draw_Pop+0x24c>)
 800d97a:	6013      	str	r3, [r2, #0]

	if(R8 == 0)
 800d97c:	4b29      	ldr	r3, [pc, #164]	; (800da24 <Draw_Pop+0x244>)
 800d97e:	681b      	ldr	r3, [r3, #0]
 800d980:	2b00      	cmp	r3, #0
 800d982:	d100      	bne.n	800d986 <Draw_Pop+0x1a6>
	{
		goto Pop_Loop_Penetrate;
 800d984:	e054      	b.n	800da30 <Draw_Pop+0x250>
	}

Pop_Loop:
 800d986:	bf00      	nop
	if((R3 & R7) != 0)
 800d988:	4b21      	ldr	r3, [pc, #132]	; (800da10 <Draw_Pop+0x230>)
 800d98a:	681a      	ldr	r2, [r3, #0]
 800d98c:	4b1c      	ldr	r3, [pc, #112]	; (800da00 <Draw_Pop+0x220>)
 800d98e:	681b      	ldr	r3, [r3, #0]
 800d990:	4013      	ands	r3, r2
 800d992:	2b00      	cmp	r3, #0
 800d994:	d006      	beq.n	800d9a4 <Draw_Pop+0x1c4>
		R9 = *R4.A;
 800d996:	4b22      	ldr	r3, [pc, #136]	; (800da20 <Draw_Pop+0x240>)
 800d998:	681b      	ldr	r3, [r3, #0]
 800d99a:	781b      	ldrb	r3, [r3, #0]
 800d99c:	461a      	mov	r2, r3
 800d99e:	4b22      	ldr	r3, [pc, #136]	; (800da28 <Draw_Pop+0x248>)
 800d9a0:	601a      	str	r2, [r3, #0]
 800d9a2:	e005      	b.n	800d9b0 <Draw_Pop+0x1d0>
	else
		R8 = *R4.A;
 800d9a4:	4b1e      	ldr	r3, [pc, #120]	; (800da20 <Draw_Pop+0x240>)
 800d9a6:	681b      	ldr	r3, [r3, #0]
 800d9a8:	781b      	ldrb	r3, [r3, #0]
 800d9aa:	461a      	mov	r2, r3
 800d9ac:	4b1d      	ldr	r3, [pc, #116]	; (800da24 <Draw_Pop+0x244>)
 800d9ae:	601a      	str	r2, [r3, #0]
	R4.A = R4.A + 1;
 800d9b0:	4b1b      	ldr	r3, [pc, #108]	; (800da20 <Draw_Pop+0x240>)
 800d9b2:	681b      	ldr	r3, [r3, #0]
 800d9b4:	3301      	adds	r3, #1
 800d9b6:	4a1a      	ldr	r2, [pc, #104]	; (800da20 <Draw_Pop+0x240>)
 800d9b8:	6013      	str	r3, [r2, #0]
	R6 = R6 - 2;
 800d9ba:	4b13      	ldr	r3, [pc, #76]	; (800da08 <Draw_Pop+0x228>)
 800d9bc:	681b      	ldr	r3, [r3, #0]
 800d9be:	3b02      	subs	r3, #2
 800d9c0:	4a11      	ldr	r2, [pc, #68]	; (800da08 <Draw_Pop+0x228>)
 800d9c2:	6013      	str	r3, [r2, #0]
	if(R6 == 0 )
 800d9c4:	4b10      	ldr	r3, [pc, #64]	; (800da08 <Draw_Pop+0x228>)
 800d9c6:	681b      	ldr	r3, [r3, #0]
 800d9c8:	2b00      	cmp	r3, #0
 800d9ca:	d066      	beq.n	800da9a <Draw_Pop+0x2ba>
		return;

	if((R7 & 0x80000000) != 0 )
 800d9cc:	4b0c      	ldr	r3, [pc, #48]	; (800da00 <Draw_Pop+0x220>)
 800d9ce:	681b      	ldr	r3, [r3, #0]
 800d9d0:	2b00      	cmp	r3, #0
 800d9d2:	da0f      	bge.n	800d9f4 <Draw_Pop+0x214>
	{
		R3 = *(unsigned short*) R10;
 800d9d4:	4b15      	ldr	r3, [pc, #84]	; (800da2c <Draw_Pop+0x24c>)
 800d9d6:	681b      	ldr	r3, [r3, #0]
 800d9d8:	881b      	ldrh	r3, [r3, #0]
 800d9da:	461a      	mov	r2, r3
 800d9dc:	4b0c      	ldr	r3, [pc, #48]	; (800da10 <Draw_Pop+0x230>)
 800d9de:	601a      	str	r2, [r3, #0]
		R10= R10+2;
 800d9e0:	4b12      	ldr	r3, [pc, #72]	; (800da2c <Draw_Pop+0x24c>)
 800d9e2:	681b      	ldr	r3, [r3, #0]
 800d9e4:	3302      	adds	r3, #2
 800d9e6:	4a11      	ldr	r2, [pc, #68]	; (800da2c <Draw_Pop+0x24c>)
 800d9e8:	6013      	str	r3, [r2, #0]
		R7 = 0x10001;
 800d9ea:	4b05      	ldr	r3, [pc, #20]	; (800da00 <Draw_Pop+0x220>)
 800d9ec:	f04f 1201 	mov.w	r2, #65537	; 0x10001
 800d9f0:	601a      	str	r2, [r3, #0]
 800d9f2:	e7c9      	b.n	800d988 <Draw_Pop+0x1a8>
	}
	else
		R7 = R7 << 1;
 800d9f4:	4b02      	ldr	r3, [pc, #8]	; (800da00 <Draw_Pop+0x220>)
 800d9f6:	681b      	ldr	r3, [r3, #0]
 800d9f8:	005b      	lsls	r3, r3, #1
 800d9fa:	4a01      	ldr	r2, [pc, #4]	; (800da00 <Draw_Pop+0x220>)
 800d9fc:	6013      	str	r3, [r2, #0]
	goto Pop_Loop;
 800d9fe:	e7c3      	b.n	800d988 <Draw_Pop+0x1a8>
 800da00:	20001a30 	.word	0x20001a30
 800da04:	2000186c 	.word	0x2000186c
 800da08:	20001a18 	.word	0x20001a18
 800da0c:	20001a14 	.word	0x20001a14
 800da10:	20001870 	.word	0x20001870
 800da14:	20001a28 	.word	0x20001a28
 800da18:	20001a24 	.word	0x20001a24
 800da1c:	20001878 	.word	0x20001878
 800da20:	20001a1c 	.word	0x20001a1c
 800da24:	20001868 	.word	0x20001868
 800da28:	20001a2c 	.word	0x20001a2c
 800da2c:	20001a34 	.word	0x20001a34

Pop_Loop_Penetrate:
	if((R2 & R7) != 0)
 800da30:	4b1e      	ldr	r3, [pc, #120]	; (800daac <Draw_Pop+0x2cc>)
 800da32:	681a      	ldr	r2, [r3, #0]
 800da34:	4b1e      	ldr	r3, [pc, #120]	; (800dab0 <Draw_Pop+0x2d0>)
 800da36:	681b      	ldr	r3, [r3, #0]
 800da38:	4013      	ands	r3, r2
 800da3a:	2b00      	cmp	r3, #0
 800da3c:	d005      	beq.n	800da4a <Draw_Pop+0x26a>
		R9 = *R4.A;
 800da3e:	4b1d      	ldr	r3, [pc, #116]	; (800dab4 <Draw_Pop+0x2d4>)
 800da40:	681b      	ldr	r3, [r3, #0]
 800da42:	781b      	ldrb	r3, [r3, #0]
 800da44:	461a      	mov	r2, r3
 800da46:	4b1c      	ldr	r3, [pc, #112]	; (800dab8 <Draw_Pop+0x2d8>)
 800da48:	601a      	str	r2, [r3, #0]
	R4.A = R4.A + 1;
 800da4a:	4b1a      	ldr	r3, [pc, #104]	; (800dab4 <Draw_Pop+0x2d4>)
 800da4c:	681b      	ldr	r3, [r3, #0]
 800da4e:	3301      	adds	r3, #1
 800da50:	4a18      	ldr	r2, [pc, #96]	; (800dab4 <Draw_Pop+0x2d4>)
 800da52:	6013      	str	r3, [r2, #0]
	R6 = R6 - 2;
 800da54:	4b19      	ldr	r3, [pc, #100]	; (800dabc <Draw_Pop+0x2dc>)
 800da56:	681b      	ldr	r3, [r3, #0]
 800da58:	3b02      	subs	r3, #2
 800da5a:	4a18      	ldr	r2, [pc, #96]	; (800dabc <Draw_Pop+0x2dc>)
 800da5c:	6013      	str	r3, [r2, #0]
	if(R6 == 0 )
 800da5e:	4b17      	ldr	r3, [pc, #92]	; (800dabc <Draw_Pop+0x2dc>)
 800da60:	681b      	ldr	r3, [r3, #0]
 800da62:	2b00      	cmp	r3, #0
 800da64:	d01b      	beq.n	800da9e <Draw_Pop+0x2be>
		return;

	if((R7 & 0x80000000) != 0 )
 800da66:	4b12      	ldr	r3, [pc, #72]	; (800dab0 <Draw_Pop+0x2d0>)
 800da68:	681b      	ldr	r3, [r3, #0]
 800da6a:	2b00      	cmp	r3, #0
 800da6c:	da0f      	bge.n	800da8e <Draw_Pop+0x2ae>
	{
		R3 = *(unsigned short*) R10;
 800da6e:	4b14      	ldr	r3, [pc, #80]	; (800dac0 <Draw_Pop+0x2e0>)
 800da70:	681b      	ldr	r3, [r3, #0]
 800da72:	881b      	ldrh	r3, [r3, #0]
 800da74:	461a      	mov	r2, r3
 800da76:	4b13      	ldr	r3, [pc, #76]	; (800dac4 <Draw_Pop+0x2e4>)
 800da78:	601a      	str	r2, [r3, #0]
		R10= R10+2;
 800da7a:	4b11      	ldr	r3, [pc, #68]	; (800dac0 <Draw_Pop+0x2e0>)
 800da7c:	681b      	ldr	r3, [r3, #0]
 800da7e:	3302      	adds	r3, #2
 800da80:	4a0f      	ldr	r2, [pc, #60]	; (800dac0 <Draw_Pop+0x2e0>)
 800da82:	6013      	str	r3, [r2, #0]
		R7 = 0x10001;
 800da84:	4b0a      	ldr	r3, [pc, #40]	; (800dab0 <Draw_Pop+0x2d0>)
 800da86:	f04f 1201 	mov.w	r2, #65537	; 0x10001
 800da8a:	601a      	str	r2, [r3, #0]
 800da8c:	e7d0      	b.n	800da30 <Draw_Pop+0x250>
		}
	else
		R7 = R7 << 1;
 800da8e:	4b08      	ldr	r3, [pc, #32]	; (800dab0 <Draw_Pop+0x2d0>)
 800da90:	681b      	ldr	r3, [r3, #0]
 800da92:	005b      	lsls	r3, r3, #1
 800da94:	4a06      	ldr	r2, [pc, #24]	; (800dab0 <Draw_Pop+0x2d0>)
 800da96:	6013      	str	r3, [r2, #0]
	goto Pop_Loop_Penetrate;
 800da98:	e7ca      	b.n	800da30 <Draw_Pop+0x250>
		return;
 800da9a:	bf00      	nop
 800da9c:	e000      	b.n	800daa0 <Draw_Pop+0x2c0>
		return;
 800da9e:	bf00      	nop

}
 800daa0:	370c      	adds	r7, #12
 800daa2:	46bd      	mov	sp, r7
 800daa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800daa8:	4770      	bx	lr
 800daaa:	bf00      	nop
 800daac:	20001a28 	.word	0x20001a28
 800dab0:	20001a30 	.word	0x20001a30
 800dab4:	20001a1c 	.word	0x20001a1c
 800dab8:	20001a2c 	.word	0x20001a2c
 800dabc:	20001a18 	.word	0x20001a18
 800dac0:	20001a34 	.word	0x20001a34
 800dac4:	20001870 	.word	0x20001870

0800dac8 <DrawWindow>:

// R0:pDat, R1:pTab, R2:Col, R3:Var, R4:pCol, R5:Cnt, R6:Tmp,
// R0:pBuf, R1:pTab, R2:Col, R3:LCD, R4:Ctrl, R5:WR,  R6:Tmp, R7:Cnt, R8:RS
void DrawWindow(char* pBuf, short* pTab)
{
 800dac8:	b580      	push	{r7, lr}
 800daca:	b082      	sub	sp, #8
 800dacc:	af00      	add	r7, sp, #0
 800dace:	6078      	str	r0, [r7, #4]
 800dad0:	6039      	str	r1, [r7, #0]
	R0 = (unsigned)&pBuf[0];
 800dad2:	687b      	ldr	r3, [r7, #4]
 800dad4:	4a9b      	ldr	r2, [pc, #620]	; (800dd44 <DrawWindow+0x27c>)
 800dad6:	6013      	str	r3, [r2, #0]
	R2 = 0;
 800dad8:	4b9b      	ldr	r3, [pc, #620]	; (800dd48 <DrawWindow+0x280>)
 800dada:	2200      	movs	r2, #0
 800dadc:	601a      	str	r2, [r3, #0]
	R10 = &pBuf[900];
 800dade:	687b      	ldr	r3, [r7, #4]
 800dae0:	f503 7361 	add.w	r3, r3, #900	; 0x384
 800dae4:	4a99      	ldr	r2, [pc, #612]	; (800dd4c <DrawWindow+0x284>)
 800dae6:	6013      	str	r3, [r2, #0]
	R11 = pTab[34];
 800dae8:	683b      	ldr	r3, [r7, #0]
 800daea:	3344      	adds	r3, #68	; 0x44
 800daec:	f9b3 3000 	ldrsh.w	r3, [r3]
 800daf0:	461a      	mov	r2, r3
 800daf2:	4b97      	ldr	r3, [pc, #604]	; (800dd50 <DrawWindow+0x288>)
 800daf4:	601a      	str	r2, [r3, #0]
	R12 = pTab[35];
 800daf6:	683b      	ldr	r3, [r7, #0]
 800daf8:	3346      	adds	r3, #70	; 0x46
 800dafa:	f9b3 3000 	ldrsh.w	r3, [r3]
 800dafe:	461a      	mov	r2, r3
 800db00:	4b94      	ldr	r3, [pc, #592]	; (800dd54 <DrawWindow+0x28c>)
 800db02:	601a      	str	r2, [r3, #0]
	R12 = R11 + R12;
 800db04:	4b92      	ldr	r3, [pc, #584]	; (800dd50 <DrawWindow+0x288>)
 800db06:	681a      	ldr	r2, [r3, #0]
 800db08:	4b92      	ldr	r3, [pc, #584]	; (800dd54 <DrawWindow+0x28c>)
 800db0a:	681b      	ldr	r3, [r3, #0]
 800db0c:	4413      	add	r3, r2
 800db0e:	4a91      	ldr	r2, [pc, #580]	; (800dd54 <DrawWindow+0x28c>)
 800db10:	6013      	str	r3, [r2, #0]

Draw_Loop:
	if (R2 == 0)
 800db12:	4b8d      	ldr	r3, [pc, #564]	; (800dd48 <DrawWindow+0x280>)
 800db14:	681b      	ldr	r3, [r3, #0]
 800db16:	2b00      	cmp	r3, #0
 800db18:	d102      	bne.n	800db20 <DrawWindow+0x58>
	{
		Buld_0();
 800db1a:	f7ff f93b 	bl	800cd94 <Buld_0>
		goto Draw_Wave;
 800db1e:	e064      	b.n	800dbea <DrawWindow+0x122>
	}

	if (R2 == 302)
 800db20:	4b89      	ldr	r3, [pc, #548]	; (800dd48 <DrawWindow+0x280>)
 800db22:	681b      	ldr	r3, [r3, #0]
 800db24:	f5b3 7f97 	cmp.w	r3, #302	; 0x12e
 800db28:	d102      	bne.n	800db30 <DrawWindow+0x68>
	{
		Buld_0();
 800db2a:	f7ff f933 	bl	800cd94 <Buld_0>
		goto Draw_Wave;
 800db2e:	e05c      	b.n	800dbea <DrawWindow+0x122>
	}

	if (R2 == 1)
 800db30:	4b85      	ldr	r3, [pc, #532]	; (800dd48 <DrawWindow+0x280>)
 800db32:	681b      	ldr	r3, [r3, #0]
 800db34:	2b01      	cmp	r3, #1
 800db36:	d102      	bne.n	800db3e <DrawWindow+0x76>
	{
		Buld_1();
 800db38:	f7ff f938 	bl	800cdac <Buld_1>
		goto Draw_Wave;
 800db3c:	e055      	b.n	800dbea <DrawWindow+0x122>
	}
	R3 = 301;
 800db3e:	4b86      	ldr	r3, [pc, #536]	; (800dd58 <DrawWindow+0x290>)
 800db40:	f240 122d 	movw	r2, #301	; 0x12d
 800db44:	601a      	str	r2, [r3, #0]

	if (R2 == R3)
 800db46:	4b80      	ldr	r3, [pc, #512]	; (800dd48 <DrawWindow+0x280>)
 800db48:	681a      	ldr	r2, [r3, #0]
 800db4a:	4b83      	ldr	r3, [pc, #524]	; (800dd58 <DrawWindow+0x290>)
 800db4c:	681b      	ldr	r3, [r3, #0]
 800db4e:	429a      	cmp	r2, r3
 800db50:	d102      	bne.n	800db58 <DrawWindow+0x90>
	{
		Buld_1();
 800db52:	f7ff f92b 	bl	800cdac <Buld_1>
		goto Draw_Wave;
 800db56:	e048      	b.n	800dbea <DrawWindow+0x122>
	}

	R3 = R2 - 1;
 800db58:	4b7b      	ldr	r3, [pc, #492]	; (800dd48 <DrawWindow+0x280>)
 800db5a:	681b      	ldr	r3, [r3, #0]
 800db5c:	3b01      	subs	r3, #1
 800db5e:	4a7e      	ldr	r2, [pc, #504]	; (800dd58 <DrawWindow+0x290>)
 800db60:	6013      	str	r3, [r2, #0]
	R6 = 25;
 800db62:	4b7e      	ldr	r3, [pc, #504]	; (800dd5c <DrawWindow+0x294>)
 800db64:	2219      	movs	r2, #25
 800db66:	601a      	str	r2, [r3, #0]
	R5 = R3/R6;
 800db68:	4b7b      	ldr	r3, [pc, #492]	; (800dd58 <DrawWindow+0x290>)
 800db6a:	681a      	ldr	r2, [r3, #0]
 800db6c:	4b7b      	ldr	r3, [pc, #492]	; (800dd5c <DrawWindow+0x294>)
 800db6e:	681b      	ldr	r3, [r3, #0]
 800db70:	fbb2 f3f3 	udiv	r3, r2, r3
 800db74:	4a7a      	ldr	r2, [pc, #488]	; (800dd60 <DrawWindow+0x298>)
 800db76:	6013      	str	r3, [r2, #0]
	R5 = R5*R6;
 800db78:	4b79      	ldr	r3, [pc, #484]	; (800dd60 <DrawWindow+0x298>)
 800db7a:	681b      	ldr	r3, [r3, #0]
 800db7c:	4a77      	ldr	r2, [pc, #476]	; (800dd5c <DrawWindow+0x294>)
 800db7e:	6812      	ldr	r2, [r2, #0]
 800db80:	fb02 f303 	mul.w	r3, r2, r3
 800db84:	4a76      	ldr	r2, [pc, #472]	; (800dd60 <DrawWindow+0x298>)
 800db86:	6013      	str	r3, [r2, #0]
	R5 = R3 - R5;
 800db88:	4b73      	ldr	r3, [pc, #460]	; (800dd58 <DrawWindow+0x290>)
 800db8a:	681a      	ldr	r2, [r3, #0]
 800db8c:	4b74      	ldr	r3, [pc, #464]	; (800dd60 <DrawWindow+0x298>)
 800db8e:	681b      	ldr	r3, [r3, #0]
 800db90:	1ad3      	subs	r3, r2, r3
 800db92:	4a73      	ldr	r2, [pc, #460]	; (800dd60 <DrawWindow+0x298>)
 800db94:	6013      	str	r3, [r2, #0]

	if (R5 == 0)
 800db96:	4b72      	ldr	r3, [pc, #456]	; (800dd60 <DrawWindow+0x298>)
 800db98:	681b      	ldr	r3, [r3, #0]
 800db9a:	2b00      	cmp	r3, #0
 800db9c:	d102      	bne.n	800dba4 <DrawWindow+0xdc>
	{
		Buld_4();
 800db9e:	f7ff f975 	bl	800ce8c <Buld_4>
		goto Draw_Wave;
 800dba2:	e022      	b.n	800dbea <DrawWindow+0x122>
	}

	R6 = 5;
 800dba4:	4b6d      	ldr	r3, [pc, #436]	; (800dd5c <DrawWindow+0x294>)
 800dba6:	2205      	movs	r2, #5
 800dba8:	601a      	str	r2, [r3, #0]
	R5 = R3/R6;
 800dbaa:	4b6b      	ldr	r3, [pc, #428]	; (800dd58 <DrawWindow+0x290>)
 800dbac:	681a      	ldr	r2, [r3, #0]
 800dbae:	4b6b      	ldr	r3, [pc, #428]	; (800dd5c <DrawWindow+0x294>)
 800dbb0:	681b      	ldr	r3, [r3, #0]
 800dbb2:	fbb2 f3f3 	udiv	r3, r2, r3
 800dbb6:	4a6a      	ldr	r2, [pc, #424]	; (800dd60 <DrawWindow+0x298>)
 800dbb8:	6013      	str	r3, [r2, #0]
	R5 = R5*R6;
 800dbba:	4b69      	ldr	r3, [pc, #420]	; (800dd60 <DrawWindow+0x298>)
 800dbbc:	681b      	ldr	r3, [r3, #0]
 800dbbe:	4a67      	ldr	r2, [pc, #412]	; (800dd5c <DrawWindow+0x294>)
 800dbc0:	6812      	ldr	r2, [r2, #0]
 800dbc2:	fb02 f303 	mul.w	r3, r2, r3
 800dbc6:	4a66      	ldr	r2, [pc, #408]	; (800dd60 <DrawWindow+0x298>)
 800dbc8:	6013      	str	r3, [r2, #0]
	R5 = R3 - R5;
 800dbca:	4b63      	ldr	r3, [pc, #396]	; (800dd58 <DrawWindow+0x290>)
 800dbcc:	681a      	ldr	r2, [r3, #0]
 800dbce:	4b64      	ldr	r3, [pc, #400]	; (800dd60 <DrawWindow+0x298>)
 800dbd0:	681b      	ldr	r3, [r3, #0]
 800dbd2:	1ad3      	subs	r3, r2, r3
 800dbd4:	4a62      	ldr	r2, [pc, #392]	; (800dd60 <DrawWindow+0x298>)
 800dbd6:	6013      	str	r3, [r2, #0]

	if (R5 == 0)
 800dbd8:	4b61      	ldr	r3, [pc, #388]	; (800dd60 <DrawWindow+0x298>)
 800dbda:	681b      	ldr	r3, [r3, #0]
 800dbdc:	2b00      	cmp	r3, #0
 800dbde:	d102      	bne.n	800dbe6 <DrawWindow+0x11e>
	{
		Buld_3();
 800dbe0:	f7ff f92e 	bl	800ce40 <Buld_3>
		goto Draw_Wave;
 800dbe4:	e001      	b.n	800dbea <DrawWindow+0x122>
	}
	Buld_2();
 800dbe6:	f7ff f909 	bl	800cdfc <Buld_2>

Draw_Wave:
	if( (R2<3) || (R2 >= 300) ) //3 to 299
 800dbea:	4b57      	ldr	r3, [pc, #348]	; (800dd48 <DrawWindow+0x280>)
 800dbec:	681b      	ldr	r3, [r3, #0]
 800dbee:	2b02      	cmp	r3, #2
 800dbf0:	d96c      	bls.n	800dccc <DrawWindow+0x204>
 800dbf2:	4b55      	ldr	r3, [pc, #340]	; (800dd48 <DrawWindow+0x280>)
 800dbf4:	681b      	ldr	r3, [r3, #0]
 800dbf6:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 800dbfa:	d267      	bcs.n	800dccc <DrawWindow+0x204>
	{
		goto Horozontal;
	}
	R3 = pTab[3]; //Ch_3
 800dbfc:	683b      	ldr	r3, [r7, #0]
 800dbfe:	3306      	adds	r3, #6
 800dc00:	f9b3 3000 	ldrsh.w	r3, [r3]
 800dc04:	461a      	mov	r2, r3
 800dc06:	4b54      	ldr	r3, [pc, #336]	; (800dd58 <DrawWindow+0x290>)
 800dc08:	601a      	str	r2, [r3, #0]
	if((R3 & 4) == 0)
 800dc0a:	4b53      	ldr	r3, [pc, #332]	; (800dd58 <DrawWindow+0x290>)
 800dc0c:	681b      	ldr	r3, [r3, #0]
 800dc0e:	f003 0304 	and.w	r3, r3, #4
 800dc12:	2b00      	cmp	r3, #0
 800dc14:	d10f      	bne.n	800dc36 <DrawWindow+0x16e>
	{
		R3 = 46;
 800dc16:	4b50      	ldr	r3, [pc, #320]	; (800dd58 <DrawWindow+0x290>)
 800dc18:	222e      	movs	r2, #46	; 0x2e
 800dc1a:	601a      	str	r2, [r3, #0]
		R4.I = pTab[13];
 800dc1c:	683b      	ldr	r3, [r7, #0]
 800dc1e:	331a      	adds	r3, #26
 800dc20:	f9b3 3000 	ldrsh.w	r3, [r3]
 800dc24:	461a      	mov	r2, r3
 800dc26:	4b4f      	ldr	r3, [pc, #316]	; (800dd64 <DrawWindow+0x29c>)
 800dc28:	601a      	str	r2, [r3, #0]
		R8 = 8;
 800dc2a:	4b4f      	ldr	r3, [pc, #316]	; (800dd68 <DrawWindow+0x2a0>)
 800dc2c:	2208      	movs	r2, #8
 800dc2e:	601a      	str	r2, [r3, #0]
		Draw_Digit_Analog(1);
 800dc30:	2001      	movs	r0, #1
 800dc32:	f7ff f951 	bl	800ced8 <Draw_Digit_Analog>
	}

	R3 =pTab[2]; //Ch_2
 800dc36:	683b      	ldr	r3, [r7, #0]
 800dc38:	3304      	adds	r3, #4
 800dc3a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800dc3e:	461a      	mov	r2, r3
 800dc40:	4b45      	ldr	r3, [pc, #276]	; (800dd58 <DrawWindow+0x290>)
 800dc42:	601a      	str	r2, [r3, #0]
	if((R3 & 4) == 0)
 800dc44:	4b44      	ldr	r3, [pc, #272]	; (800dd58 <DrawWindow+0x290>)
 800dc46:	681b      	ldr	r3, [r3, #0]
 800dc48:	f003 0304 	and.w	r3, r3, #4
 800dc4c:	2b00      	cmp	r3, #0
 800dc4e:	d10f      	bne.n	800dc70 <DrawWindow+0x1a8>
	{
		R3 = 44;
 800dc50:	4b41      	ldr	r3, [pc, #260]	; (800dd58 <DrawWindow+0x290>)
 800dc52:	222c      	movs	r2, #44	; 0x2c
 800dc54:	601a      	str	r2, [r3, #0]
		R4.I = pTab[12];
 800dc56:	683b      	ldr	r3, [r7, #0]
 800dc58:	3318      	adds	r3, #24
 800dc5a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800dc5e:	461a      	mov	r2, r3
 800dc60:	4b40      	ldr	r3, [pc, #256]	; (800dd64 <DrawWindow+0x29c>)
 800dc62:	601a      	str	r2, [r3, #0]
		R8 = 4;
 800dc64:	4b40      	ldr	r3, [pc, #256]	; (800dd68 <DrawWindow+0x2a0>)
 800dc66:	2204      	movs	r2, #4
 800dc68:	601a      	str	r2, [r3, #0]
		Draw_Digit_Analog(1);
 800dc6a:	2001      	movs	r0, #1
 800dc6c:	f7ff f934 	bl	800ced8 <Draw_Digit_Analog>
	}

	R3 =pTab[1]; //Ch_1
 800dc70:	683b      	ldr	r3, [r7, #0]
 800dc72:	3302      	adds	r3, #2
 800dc74:	f9b3 3000 	ldrsh.w	r3, [r3]
 800dc78:	461a      	mov	r2, r3
 800dc7a:	4b37      	ldr	r3, [pc, #220]	; (800dd58 <DrawWindow+0x290>)
 800dc7c:	601a      	str	r2, [r3, #0]
	if((R3 & 4) == 0)
 800dc7e:	4b36      	ldr	r3, [pc, #216]	; (800dd58 <DrawWindow+0x290>)
 800dc80:	681b      	ldr	r3, [r3, #0]
 800dc82:	f003 0304 	and.w	r3, r3, #4
 800dc86:	2b00      	cmp	r3, #0
 800dc88:	d10a      	bne.n	800dca0 <DrawWindow+0x1d8>
	{
		R3 = 42;
 800dc8a:	4b33      	ldr	r3, [pc, #204]	; (800dd58 <DrawWindow+0x290>)
 800dc8c:	222a      	movs	r2, #42	; 0x2a
 800dc8e:	601a      	str	r2, [r3, #0]
		R4.A = &pBuf[300];
 800dc90:	687b      	ldr	r3, [r7, #4]
 800dc92:	f503 7396 	add.w	r3, r3, #300	; 0x12c
 800dc96:	4a33      	ldr	r2, [pc, #204]	; (800dd64 <DrawWindow+0x29c>)
 800dc98:	6013      	str	r3, [r2, #0]
		Draw_Digit_Analog(0);
 800dc9a:	2000      	movs	r0, #0
 800dc9c:	f7ff f91c 	bl	800ced8 <Draw_Digit_Analog>
	}

	R3 =pTab[0]; //Ch_0
 800dca0:	683b      	ldr	r3, [r7, #0]
 800dca2:	f9b3 3000 	ldrsh.w	r3, [r3]
 800dca6:	461a      	mov	r2, r3
 800dca8:	4b2b      	ldr	r3, [pc, #172]	; (800dd58 <DrawWindow+0x290>)
 800dcaa:	601a      	str	r2, [r3, #0]
	if((R3 & 4) == 0)
 800dcac:	4b2a      	ldr	r3, [pc, #168]	; (800dd58 <DrawWindow+0x290>)
 800dcae:	681b      	ldr	r3, [r3, #0]
 800dcb0:	f003 0304 	and.w	r3, r3, #4
 800dcb4:	2b00      	cmp	r3, #0
 800dcb6:	d10b      	bne.n	800dcd0 <DrawWindow+0x208>
	{
		R3 = 40;
 800dcb8:	4b27      	ldr	r3, [pc, #156]	; (800dd58 <DrawWindow+0x290>)
 800dcba:	2228      	movs	r2, #40	; 0x28
 800dcbc:	601a      	str	r2, [r3, #0]
		R4.A = pBuf;
 800dcbe:	4a29      	ldr	r2, [pc, #164]	; (800dd64 <DrawWindow+0x29c>)
 800dcc0:	687b      	ldr	r3, [r7, #4]
 800dcc2:	6013      	str	r3, [r2, #0]
		Draw_Digit_Analog(0);
 800dcc4:	2000      	movs	r0, #0
 800dcc6:	f7ff f907 	bl	800ced8 <Draw_Digit_Analog>
 800dcca:	e002      	b.n	800dcd2 <DrawWindow+0x20a>
		goto Horozontal;
 800dccc:	bf00      	nop
 800dcce:	e000      	b.n	800dcd2 <DrawWindow+0x20a>
	}

Horozontal:
 800dcd0:	bf00      	nop
	if(R2 == 0)
 800dcd2:	4b1d      	ldr	r3, [pc, #116]	; (800dd48 <DrawWindow+0x280>)
 800dcd4:	681b      	ldr	r3, [r3, #0]
 800dcd6:	2b00      	cmp	r3, #0
 800dcd8:	d103      	bne.n	800dce2 <DrawWindow+0x21a>
	{
		Cursor_0(pTab);
 800dcda:	6838      	ldr	r0, [r7, #0]
 800dcdc:	f7ff fa14 	bl	800d108 <Cursor_0>
		goto Vertical;
 800dce0:	e047      	b.n	800dd72 <DrawWindow+0x2aa>
	}

	if(R2 == 302)
 800dce2:	4b19      	ldr	r3, [pc, #100]	; (800dd48 <DrawWindow+0x280>)
 800dce4:	681b      	ldr	r3, [r3, #0]
 800dce6:	f5b3 7f97 	cmp.w	r3, #302	; 0x12e
 800dcea:	d103      	bne.n	800dcf4 <DrawWindow+0x22c>
	{
		Cursor_0(pTab);
 800dcec:	6838      	ldr	r0, [r7, #0]
 800dcee:	f7ff fa0b 	bl	800d108 <Cursor_0>
		goto Vertical;
 800dcf2:	e03e      	b.n	800dd72 <DrawWindow+0x2aa>
	}

	if(R2 == 1)
 800dcf4:	4b14      	ldr	r3, [pc, #80]	; (800dd48 <DrawWindow+0x280>)
 800dcf6:	681b      	ldr	r3, [r3, #0]
 800dcf8:	2b01      	cmp	r3, #1
 800dcfa:	d103      	bne.n	800dd04 <DrawWindow+0x23c>
	{
		Cursor_1(pTab);
 800dcfc:	6838      	ldr	r0, [r7, #0]
 800dcfe:	f7ff fa8d 	bl	800d21c <Cursor_1>
		goto Vertical;
 800dd02:	e036      	b.n	800dd72 <DrawWindow+0x2aa>
	}
	R5 = 301;
 800dd04:	4b16      	ldr	r3, [pc, #88]	; (800dd60 <DrawWindow+0x298>)
 800dd06:	f240 122d 	movw	r2, #301	; 0x12d
 800dd0a:	601a      	str	r2, [r3, #0]
	if(R2 == R5)
 800dd0c:	4b0e      	ldr	r3, [pc, #56]	; (800dd48 <DrawWindow+0x280>)
 800dd0e:	681a      	ldr	r2, [r3, #0]
 800dd10:	4b13      	ldr	r3, [pc, #76]	; (800dd60 <DrawWindow+0x298>)
 800dd12:	681b      	ldr	r3, [r3, #0]
 800dd14:	429a      	cmp	r2, r3
 800dd16:	d103      	bne.n	800dd20 <DrawWindow+0x258>
	{
		Cursor_1(pTab);
 800dd18:	6838      	ldr	r0, [r7, #0]
 800dd1a:	f7ff fa7f 	bl	800d21c <Cursor_1>
		goto Vertical;
 800dd1e:	e028      	b.n	800dd72 <DrawWindow+0x2aa>
	}

	if(R2 == 2)
 800dd20:	4b09      	ldr	r3, [pc, #36]	; (800dd48 <DrawWindow+0x280>)
 800dd22:	681b      	ldr	r3, [r3, #0]
 800dd24:	2b02      	cmp	r3, #2
 800dd26:	d103      	bne.n	800dd30 <DrawWindow+0x268>
	{
		Cursor_2(pTab);
 800dd28:	6838      	ldr	r0, [r7, #0]
 800dd2a:	f7ff faeb 	bl	800d304 <Cursor_2>
		goto Vertical;
 800dd2e:	e020      	b.n	800dd72 <DrawWindow+0x2aa>
	}
	if(R2 == 300)
 800dd30:	4b05      	ldr	r3, [pc, #20]	; (800dd48 <DrawWindow+0x280>)
 800dd32:	681b      	ldr	r3, [r3, #0]
 800dd34:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 800dd38:	d118      	bne.n	800dd6c <DrawWindow+0x2a4>
	{
		Cursor_2(pTab);
 800dd3a:	6838      	ldr	r0, [r7, #0]
 800dd3c:	f7ff fae2 	bl	800d304 <Cursor_2>
		goto Vertical;
 800dd40:	e017      	b.n	800dd72 <DrawWindow+0x2aa>
 800dd42:	bf00      	nop
 800dd44:	20001874 	.word	0x20001874
 800dd48:	20001a28 	.word	0x20001a28
 800dd4c:	20001a34 	.word	0x20001a34
 800dd50:	20001a14 	.word	0x20001a14
 800dd54:	20001a24 	.word	0x20001a24
 800dd58:	20001870 	.word	0x20001870
 800dd5c:	20001a18 	.word	0x20001a18
 800dd60:	2000186c 	.word	0x2000186c
 800dd64:	20001a1c 	.word	0x20001a1c
 800dd68:	20001868 	.word	0x20001868
	}
	Cursor_3(pTab);
 800dd6c:	6838      	ldr	r0, [r7, #0]
 800dd6e:	f7ff fb1d 	bl	800d3ac <Cursor_3>

Vertical:
	Cursor_4(pTab);
 800dd72:	6838      	ldr	r0, [r7, #0]
 800dd74:	f7ff fb82 	bl	800d47c <Cursor_4>

	R3 = pTab[38];
 800dd78:	683b      	ldr	r3, [r7, #0]
 800dd7a:	334c      	adds	r3, #76	; 0x4c
 800dd7c:	f9b3 3000 	ldrsh.w	r3, [r3]
 800dd80:	461a      	mov	r2, r3
 800dd82:	4b17      	ldr	r3, [pc, #92]	; (800dde0 <DrawWindow+0x318>)
 800dd84:	601a      	str	r2, [r3, #0]
	if( (R3&1) !=1 )
 800dd86:	4b16      	ldr	r3, [pc, #88]	; (800dde0 <DrawWindow+0x318>)
 800dd88:	681b      	ldr	r3, [r3, #0]
 800dd8a:	f003 0301 	and.w	r3, r3, #1
 800dd8e:	2b00      	cmp	r3, #0
 800dd90:	d00f      	beq.n	800ddb2 <DrawWindow+0x2ea>
	{
		goto Send;
	}

	if(R2 < R11)
 800dd92:	4b14      	ldr	r3, [pc, #80]	; (800dde4 <DrawWindow+0x31c>)
 800dd94:	681a      	ldr	r2, [r3, #0]
 800dd96:	4b14      	ldr	r3, [pc, #80]	; (800dde8 <DrawWindow+0x320>)
 800dd98:	681b      	ldr	r3, [r3, #0]
 800dd9a:	429a      	cmp	r2, r3
 800dd9c:	d30b      	bcc.n	800ddb6 <DrawWindow+0x2ee>
	{
		goto Send;
	}

	if(R2 < R12)
 800dd9e:	4b11      	ldr	r3, [pc, #68]	; (800dde4 <DrawWindow+0x31c>)
 800dda0:	681a      	ldr	r2, [r3, #0]
 800dda2:	4b12      	ldr	r3, [pc, #72]	; (800ddec <DrawWindow+0x324>)
 800dda4:	681b      	ldr	r3, [r3, #0]
 800dda6:	429a      	cmp	r2, r3
 800dda8:	d207      	bcs.n	800ddba <DrawWindow+0x2f2>
	{
		Draw_Pop(pTab);
 800ddaa:	6838      	ldr	r0, [r7, #0]
 800ddac:	f7ff fd18 	bl	800d7e0 <Draw_Pop>
 800ddb0:	e004      	b.n	800ddbc <DrawWindow+0x2f4>
		goto Send;
 800ddb2:	bf00      	nop
 800ddb4:	e002      	b.n	800ddbc <DrawWindow+0x2f4>
		goto Send;
 800ddb6:	bf00      	nop
 800ddb8:	e000      	b.n	800ddbc <DrawWindow+0x2f4>
	}

Send:
 800ddba:	bf00      	nop
	Send_LCD(pTab);
 800ddbc:	6838      	ldr	r0, [r7, #0]
 800ddbe:	f7ff fcdd 	bl	800d77c <Send_LCD>

	if( R2 != 302 )
 800ddc2:	4b08      	ldr	r3, [pc, #32]	; (800dde4 <DrawWindow+0x31c>)
 800ddc4:	681b      	ldr	r3, [r3, #0]
 800ddc6:	f5b3 7f97 	cmp.w	r3, #302	; 0x12e
 800ddca:	d005      	beq.n	800ddd8 <DrawWindow+0x310>
	{
		R2 =R2 +1;
 800ddcc:	4b05      	ldr	r3, [pc, #20]	; (800dde4 <DrawWindow+0x31c>)
 800ddce:	681b      	ldr	r3, [r3, #0]
 800ddd0:	3301      	adds	r3, #1
 800ddd2:	4a04      	ldr	r2, [pc, #16]	; (800dde4 <DrawWindow+0x31c>)
 800ddd4:	6013      	str	r3, [r2, #0]
		goto Draw_Loop;
 800ddd6:	e69c      	b.n	800db12 <DrawWindow+0x4a>
	}

	return;
 800ddd8:	bf00      	nop
}
 800ddda:	3708      	adds	r7, #8
 800dddc:	46bd      	mov	sp, r7
 800ddde:	bd80      	pop	{r7, pc}
 800dde0:	20001870 	.word	0x20001870
 800dde4:	20001a28 	.word	0x20001a28
 800dde8:	20001a14 	.word	0x20001a14
 800ddec:	20001a24 	.word	0x20001a24

0800ddf0 <DispChar8x14>:
//+======+======+======+======+======+======+======+======+======+======+======+

char  WaveBuf[TRACK1_SIZE + TRACK2_SIZE + TRACK23_SIZE + POP_SIZE]; // ��ʾ������

void DispChar8x14(char Mode, char Code)
{
 800ddf0:	b580      	push	{r7, lr}
 800ddf2:	b084      	sub	sp, #16
 800ddf4:	af00      	add	r7, sp, #0
 800ddf6:	4603      	mov	r3, r0
 800ddf8:	460a      	mov	r2, r1
 800ddfa:	71fb      	strb	r3, [r7, #7]
 800ddfc:	4613      	mov	r3, r2
 800ddfe:	71bb      	strb	r3, [r7, #6]
  short i, j, k;

  for(i=0; i<8; ++i)
 800de00:	2300      	movs	r3, #0
 800de02:	81fb      	strh	r3, [r7, #14]
 800de04:	e06d      	b.n	800dee2 <DispChar8x14+0xf2>
  {
    if(Mode & SYMB)
 800de06:	79fb      	ldrb	r3, [r7, #7]
 800de08:	f003 0310 	and.w	r3, r3, #16
 800de0c:	2b00      	cmp	r3, #0
 800de0e:	d00a      	beq.n	800de26 <DispChar8x14+0x36>
    	k = SYMB8x14[(Code - '@')*8 + i];
 800de10:	79bb      	ldrb	r3, [r7, #6]
 800de12:	3b40      	subs	r3, #64	; 0x40
 800de14:	00da      	lsls	r2, r3, #3
 800de16:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800de1a:	4413      	add	r3, r2
 800de1c:	4a35      	ldr	r2, [pc, #212]	; (800def4 <DispChar8x14+0x104>)
 800de1e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800de22:	817b      	strh	r3, [r7, #10]
 800de24:	e005      	b.n	800de32 <DispChar8x14+0x42>
    else
        k = CHAR8x14[i];
 800de26:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800de2a:	4a33      	ldr	r2, [pc, #204]	; (800def8 <DispChar8x14+0x108>)
 800de2c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800de30:	817b      	strh	r3, [r7, #10]

    if(Mode & VOID)
 800de32:	79fb      	ldrb	r3, [r7, #7]
 800de34:	f003 0320 	and.w	r3, r3, #32
 800de38:	2b00      	cmp	r3, #0
 800de3a:	d00c      	beq.n	800de56 <DispChar8x14+0x66>
    	k &= (i%2)? 0xAAAA : 0x5555;
 800de3c:	89fb      	ldrh	r3, [r7, #14]
 800de3e:	f003 0301 	and.w	r3, r3, #1
 800de42:	b29b      	uxth	r3, r3
 800de44:	2b00      	cmp	r3, #0
 800de46:	d001      	beq.n	800de4c <DispChar8x14+0x5c>
 800de48:	4a2c      	ldr	r2, [pc, #176]	; (800defc <DispChar8x14+0x10c>)
 800de4a:	e001      	b.n	800de50 <DispChar8x14+0x60>
 800de4c:	f245 5255 	movw	r2, #21845	; 0x5555
 800de50:	897b      	ldrh	r3, [r7, #10]
 800de52:	4013      	ands	r3, r2
 800de54:	817b      	strh	r3, [r7, #10]
    LCD_Set_Posi(Sx, Sy);
 800de56:	4b2a      	ldr	r3, [pc, #168]	; (800df00 <DispChar8x14+0x110>)
 800de58:	f9b3 3000 	ldrsh.w	r3, [r3]
 800de5c:	4a29      	ldr	r2, [pc, #164]	; (800df04 <DispChar8x14+0x114>)
 800de5e:	f9b2 2000 	ldrsh.w	r2, [r2]
 800de62:	4611      	mov	r1, r2
 800de64:	4618      	mov	r0, r3
 800de66:	f003 fd5f 	bl	8011928 <LCD_Set_Posi>
    for(j=0; j<14; ++j)
 800de6a:	2300      	movs	r3, #0
 800de6c:	81bb      	strh	r3, [r7, #12]
 800de6e:	e027      	b.n	800dec0 <DispChar8x14+0xd0>
    {
      if(k & 4)
 800de70:	897b      	ldrh	r3, [r7, #10]
 800de72:	f003 0304 	and.w	r3, r3, #4
 800de76:	2b00      	cmp	r3, #0
 800de78:	d00d      	beq.n	800de96 <DispChar8x14+0xa6>
    	  LCD_Set_Pixel((Mode & INV)? Background : Foreground);
 800de7a:	79fb      	ldrb	r3, [r7, #7]
 800de7c:	f003 0301 	and.w	r3, r3, #1
 800de80:	2b00      	cmp	r3, #0
 800de82:	d002      	beq.n	800de8a <DispChar8x14+0x9a>
 800de84:	4b20      	ldr	r3, [pc, #128]	; (800df08 <DispChar8x14+0x118>)
 800de86:	881b      	ldrh	r3, [r3, #0]
 800de88:	e001      	b.n	800de8e <DispChar8x14+0x9e>
 800de8a:	4b20      	ldr	r3, [pc, #128]	; (800df0c <DispChar8x14+0x11c>)
 800de8c:	881b      	ldrh	r3, [r3, #0]
 800de8e:	4618      	mov	r0, r3
 800de90:	f003 fd98 	bl	80119c4 <LCD_Set_Pixel>
 800de94:	e00c      	b.n	800deb0 <DispChar8x14+0xc0>
      else
    	  LCD_Set_Pixel((Mode & INV)? Foreground : Background);
 800de96:	79fb      	ldrb	r3, [r7, #7]
 800de98:	f003 0301 	and.w	r3, r3, #1
 800de9c:	2b00      	cmp	r3, #0
 800de9e:	d002      	beq.n	800dea6 <DispChar8x14+0xb6>
 800dea0:	4b1a      	ldr	r3, [pc, #104]	; (800df0c <DispChar8x14+0x11c>)
 800dea2:	881b      	ldrh	r3, [r3, #0]
 800dea4:	e001      	b.n	800deaa <DispChar8x14+0xba>
 800dea6:	4b18      	ldr	r3, [pc, #96]	; (800df08 <DispChar8x14+0x118>)
 800dea8:	881b      	ldrh	r3, [r3, #0]
 800deaa:	4618      	mov	r0, r3
 800deac:	f003 fd8a 	bl	80119c4 <LCD_Set_Pixel>
      k >>= 1;
 800deb0:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800deb4:	105b      	asrs	r3, r3, #1
 800deb6:	817b      	strh	r3, [r7, #10]
    for(j=0; j<14; ++j)
 800deb8:	89bb      	ldrh	r3, [r7, #12]
 800deba:	3301      	adds	r3, #1
 800debc:	b29b      	uxth	r3, r3
 800debe:	81bb      	strh	r3, [r7, #12]
 800dec0:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800dec4:	2b0d      	cmp	r3, #13
 800dec6:	ddd3      	ble.n	800de70 <DispChar8x14+0x80>
    }
    Sx++;
 800dec8:	4b0d      	ldr	r3, [pc, #52]	; (800df00 <DispChar8x14+0x110>)
 800deca:	f9b3 3000 	ldrsh.w	r3, [r3]
 800dece:	b29b      	uxth	r3, r3
 800ded0:	3301      	adds	r3, #1
 800ded2:	b29b      	uxth	r3, r3
 800ded4:	b21a      	sxth	r2, r3
 800ded6:	4b0a      	ldr	r3, [pc, #40]	; (800df00 <DispChar8x14+0x110>)
 800ded8:	801a      	strh	r2, [r3, #0]
  for(i=0; i<8; ++i)
 800deda:	89fb      	ldrh	r3, [r7, #14]
 800dedc:	3301      	adds	r3, #1
 800dede:	b29b      	uxth	r3, r3
 800dee0:	81fb      	strh	r3, [r7, #14]
 800dee2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800dee6:	2b07      	cmp	r3, #7
 800dee8:	dd8d      	ble.n	800de06 <DispChar8x14+0x16>
  }
}
 800deea:	bf00      	nop
 800deec:	bf00      	nop
 800deee:	3710      	adds	r7, #16
 800def0:	46bd      	mov	sp, r7
 800def2:	bd80      	pop	{r7, pc}
 800def4:	0800132c 	.word	0x0800132c
 800def8:	08000d2c 	.word	0x08000d2c
 800defc:	ffffaaaa 	.word	0xffffaaaa
 800df00:	20000784 	.word	0x20000784
 800df04:	20000786 	.word	0x20000786
 800df08:	200023fe 	.word	0x200023fe
 800df0c:	200023fc 	.word	0x200023fc

0800df10 <DispStr8x14>:

//Mode = bit0: Normal/Inv, bit1: Char/Map
void DispStr8x14(short x0, short y0, char Mode, char *Str)
{
 800df10:	b580      	push	{r7, lr}
 800df12:	b086      	sub	sp, #24
 800df14:	af00      	add	r7, sp, #0
 800df16:	607b      	str	r3, [r7, #4]
 800df18:	4603      	mov	r3, r0
 800df1a:	81fb      	strh	r3, [r7, #14]
 800df1c:	460b      	mov	r3, r1
 800df1e:	81bb      	strh	r3, [r7, #12]
 800df20:	4613      	mov	r3, r2
 800df22:	72fb      	strb	r3, [r7, #11]
	  short i;
	  Sx = x0; Sy = y0;
 800df24:	4a22      	ldr	r2, [pc, #136]	; (800dfb0 <DispStr8x14+0xa0>)
 800df26:	89fb      	ldrh	r3, [r7, #14]
 800df28:	8013      	strh	r3, [r2, #0]
 800df2a:	4a22      	ldr	r2, [pc, #136]	; (800dfb4 <DispStr8x14+0xa4>)
 800df2c:	89bb      	ldrh	r3, [r7, #12]
 800df2e:	8013      	strh	r3, [r2, #0]
	  LCD_Set_Posi(Sx, Sy);
 800df30:	4b1f      	ldr	r3, [pc, #124]	; (800dfb0 <DispStr8x14+0xa0>)
 800df32:	f9b3 3000 	ldrsh.w	r3, [r3]
 800df36:	4a1f      	ldr	r2, [pc, #124]	; (800dfb4 <DispStr8x14+0xa4>)
 800df38:	f9b2 2000 	ldrsh.w	r2, [r2]
 800df3c:	4611      	mov	r1, r2
 800df3e:	4618      	mov	r0, r3
 800df40:	f003 fcf2 	bl	8011928 <LCD_Set_Posi>
	  for (i=0; i<14; i++)
 800df44:	2300      	movs	r3, #0
 800df46:	82fb      	strh	r3, [r7, #22]
 800df48:	e012      	b.n	800df70 <DispStr8x14+0x60>
	  {
		  LCD_Set_Pixel((Mode & INV)? Foreground : Background);
 800df4a:	7afb      	ldrb	r3, [r7, #11]
 800df4c:	f003 0301 	and.w	r3, r3, #1
 800df50:	2b00      	cmp	r3, #0
 800df52:	d002      	beq.n	800df5a <DispStr8x14+0x4a>
 800df54:	4b18      	ldr	r3, [pc, #96]	; (800dfb8 <DispStr8x14+0xa8>)
 800df56:	881b      	ldrh	r3, [r3, #0]
 800df58:	e001      	b.n	800df5e <DispStr8x14+0x4e>
 800df5a:	4b18      	ldr	r3, [pc, #96]	; (800dfbc <DispStr8x14+0xac>)
 800df5c:	881b      	ldrh	r3, [r3, #0]
 800df5e:	4618      	mov	r0, r3
 800df60:	f003 fd30 	bl	80119c4 <LCD_Set_Pixel>
	  for (i=0; i<14; i++)
 800df64:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800df68:	b29b      	uxth	r3, r3
 800df6a:	3301      	adds	r3, #1
 800df6c:	b29b      	uxth	r3, r3
 800df6e:	82fb      	strh	r3, [r7, #22]
 800df70:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800df74:	2b0d      	cmp	r3, #13
 800df76:	dde8      	ble.n	800df4a <DispStr8x14+0x3a>
	  }
	  Sx++;
 800df78:	4b0d      	ldr	r3, [pc, #52]	; (800dfb0 <DispStr8x14+0xa0>)
 800df7a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800df7e:	b29b      	uxth	r3, r3
 800df80:	3301      	adds	r3, #1
 800df82:	b29b      	uxth	r3, r3
 800df84:	b21a      	sxth	r2, r3
 800df86:	4b0a      	ldr	r3, [pc, #40]	; (800dfb0 <DispStr8x14+0xa0>)
 800df88:	801a      	strh	r2, [r3, #0]
	  while(*Str != 0)
 800df8a:	e008      	b.n	800df9e <DispStr8x14+0x8e>
	  {
	    DispChar8x14(Mode, *Str++);
 800df8c:	687b      	ldr	r3, [r7, #4]
 800df8e:	1c5a      	adds	r2, r3, #1
 800df90:	607a      	str	r2, [r7, #4]
 800df92:	781a      	ldrb	r2, [r3, #0]
 800df94:	7afb      	ldrb	r3, [r7, #11]
 800df96:	4611      	mov	r1, r2
 800df98:	4618      	mov	r0, r3
 800df9a:	f7ff ff29 	bl	800ddf0 <DispChar8x14>
	  while(*Str != 0)
 800df9e:	687b      	ldr	r3, [r7, #4]
 800dfa0:	781b      	ldrb	r3, [r3, #0]
 800dfa2:	2b00      	cmp	r3, #0
 800dfa4:	d1f2      	bne.n	800df8c <DispStr8x14+0x7c>
	  }
}
 800dfa6:	bf00      	nop
 800dfa8:	bf00      	nop
 800dfaa:	3718      	adds	r7, #24
 800dfac:	46bd      	mov	sp, r7
 800dfae:	bd80      	pop	{r7, pc}
 800dfb0:	20000784 	.word	0x20000784
 800dfb4:	20000786 	.word	0x20000786
 800dfb8:	200023fc 	.word	0x200023fc
 800dfbc:	200023fe 	.word	0x200023fe

0800dfc0 <SetColor>:

void SetColor(unsigned short Board_Color, unsigned short Text_Color)
{
 800dfc0:	b480      	push	{r7}
 800dfc2:	b083      	sub	sp, #12
 800dfc4:	af00      	add	r7, sp, #0
 800dfc6:	4603      	mov	r3, r0
 800dfc8:	460a      	mov	r2, r1
 800dfca:	80fb      	strh	r3, [r7, #6]
 800dfcc:	4613      	mov	r3, r2
 800dfce:	80bb      	strh	r3, [r7, #4]
	  Background = Board_Color;
 800dfd0:	4a05      	ldr	r2, [pc, #20]	; (800dfe8 <SetColor+0x28>)
 800dfd2:	88fb      	ldrh	r3, [r7, #6]
 800dfd4:	8013      	strh	r3, [r2, #0]
	  Foreground = Text_Color;
 800dfd6:	4a05      	ldr	r2, [pc, #20]	; (800dfec <SetColor+0x2c>)
 800dfd8:	88bb      	ldrh	r3, [r7, #4]
 800dfda:	8013      	strh	r3, [r2, #0]
}
 800dfdc:	bf00      	nop
 800dfde:	370c      	adds	r7, #12
 800dfe0:	46bd      	mov	sp, r7
 800dfe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfe6:	4770      	bx	lr
 800dfe8:	200023fe 	.word	0x200023fe
 800dfec:	200023fc 	.word	0x200023fc

0800dff0 <DispStr>:

/*******************************************************************************
  DispStr: ����Ļ��ʾ�ַ�/ͼ�鴮        Mode = bit0: Normal/Inv, bit1: Char/Map
*******************************************************************************/
void DispStr(short x0, short y0, char Mode, char *Str)
{
 800dff0:	b580      	push	{r7, lr}
 800dff2:	b086      	sub	sp, #24
 800dff4:	af00      	add	r7, sp, #0
 800dff6:	607b      	str	r3, [r7, #4]
 800dff8:	4603      	mov	r3, r0
 800dffa:	81fb      	strh	r3, [r7, #14]
 800dffc:	460b      	mov	r3, r1
 800dffe:	81bb      	strh	r3, [r7, #12]
 800e000:	4613      	mov	r3, r2
 800e002:	72fb      	strb	r3, [r7, #11]
  char Code;
  short i, j, k;

  Sx = x0; Sy = y0;
 800e004:	4a5e      	ldr	r2, [pc, #376]	; (800e180 <DispStr+0x190>)
 800e006:	89fb      	ldrh	r3, [r7, #14]
 800e008:	8013      	strh	r3, [r2, #0]
 800e00a:	4a5e      	ldr	r2, [pc, #376]	; (800e184 <DispStr+0x194>)
 800e00c:	89bb      	ldrh	r3, [r7, #12]
 800e00e:	8013      	strh	r3, [r2, #0]
  LCD_Set_Posi(Sx, Sy);
 800e010:	4b5b      	ldr	r3, [pc, #364]	; (800e180 <DispStr+0x190>)
 800e012:	f9b3 3000 	ldrsh.w	r3, [r3]
 800e016:	4a5b      	ldr	r2, [pc, #364]	; (800e184 <DispStr+0x194>)
 800e018:	f9b2 2000 	ldrsh.w	r2, [r2]
 800e01c:	4611      	mov	r1, r2
 800e01e:	4618      	mov	r0, r3
 800e020:	f003 fc82 	bl	8011928 <LCD_Set_Posi>

  while(*Str != 0)
 800e024:	e0a1      	b.n	800e16a <DispStr+0x17a>
  {
    Code = *Str++;
 800e026:	687b      	ldr	r3, [r7, #4]
 800e028:	1c5a      	adds	r2, r3, #1
 800e02a:	607a      	str	r2, [r7, #4]
 800e02c:	781b      	ldrb	r3, [r3, #0]
 800e02e:	747b      	strb	r3, [r7, #17]
    for(i=0; i<6; ++i)
 800e030:	2300      	movs	r3, #0
 800e032:	82fb      	strh	r3, [r7, #22]
 800e034:	e094      	b.n	800e160 <DispStr+0x170>
    {
      if(!(Mode & SYMB))
 800e036:	7afb      	ldrb	r3, [r7, #11]
 800e038:	f003 0310 	and.w	r3, r3, #16
 800e03c:	2b00      	cmp	r3, #0
 800e03e:	d10e      	bne.n	800e05e <DispStr+0x6e>
    	  k = CHAR6x8[((Code-0X21)*6)+i];
 800e040:	7c7b      	ldrb	r3, [r7, #17]
 800e042:	f1a3 0221 	sub.w	r2, r3, #33	; 0x21
 800e046:	4613      	mov	r3, r2
 800e048:	005b      	lsls	r3, r3, #1
 800e04a:	4413      	add	r3, r2
 800e04c:	005b      	lsls	r3, r3, #1
 800e04e:	461a      	mov	r2, r3
 800e050:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800e054:	4413      	add	r3, r2
 800e056:	4a4c      	ldr	r2, [pc, #304]	; (800e188 <DispStr+0x198>)
 800e058:	5cd3      	ldrb	r3, [r2, r3]
 800e05a:	827b      	strh	r3, [r7, #18]
 800e05c:	e00d      	b.n	800e07a <DispStr+0x8a>
      else
    	  k = SYMB6x8[(Code - '!')*6 + i];
 800e05e:	7c7b      	ldrb	r3, [r7, #17]
 800e060:	f1a3 0221 	sub.w	r2, r3, #33	; 0x21
 800e064:	4613      	mov	r3, r2
 800e066:	005b      	lsls	r3, r3, #1
 800e068:	4413      	add	r3, r2
 800e06a:	005b      	lsls	r3, r3, #1
 800e06c:	461a      	mov	r2, r3
 800e06e:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800e072:	4413      	add	r3, r2
 800e074:	4a45      	ldr	r2, [pc, #276]	; (800e18c <DispStr+0x19c>)
 800e076:	5cd3      	ldrb	r3, [r2, r3]
 800e078:	827b      	strh	r3, [r7, #18]
      if(Mode & VOID)
 800e07a:	7afb      	ldrb	r3, [r7, #11]
 800e07c:	f003 0320 	and.w	r3, r3, #32
 800e080:	2b00      	cmp	r3, #0
 800e082:	d00c      	beq.n	800e09e <DispStr+0xae>
    	  k &= (i%2)? 0xAAAA : 0x5555;
 800e084:	8afb      	ldrh	r3, [r7, #22]
 800e086:	f003 0301 	and.w	r3, r3, #1
 800e08a:	b29b      	uxth	r3, r3
 800e08c:	2b00      	cmp	r3, #0
 800e08e:	d001      	beq.n	800e094 <DispStr+0xa4>
 800e090:	4a3f      	ldr	r2, [pc, #252]	; (800e190 <DispStr+0x1a0>)
 800e092:	e001      	b.n	800e098 <DispStr+0xa8>
 800e094:	f245 5255 	movw	r2, #21845	; 0x5555
 800e098:	8a7b      	ldrh	r3, [r7, #18]
 800e09a:	4013      	ands	r3, r2
 800e09c:	827b      	strh	r3, [r7, #18]
      LCD_Set_Posi(Sx, Sy);
 800e09e:	4b38      	ldr	r3, [pc, #224]	; (800e180 <DispStr+0x190>)
 800e0a0:	f9b3 3000 	ldrsh.w	r3, [r3]
 800e0a4:	4a37      	ldr	r2, [pc, #220]	; (800e184 <DispStr+0x194>)
 800e0a6:	f9b2 2000 	ldrsh.w	r2, [r2]
 800e0aa:	4611      	mov	r1, r2
 800e0ac:	4618      	mov	r0, r3
 800e0ae:	f003 fc3b 	bl	8011928 <LCD_Set_Posi>
      LCD_Set_Pixel((Mode & INV)? Foreground : Background);
 800e0b2:	7afb      	ldrb	r3, [r7, #11]
 800e0b4:	f003 0301 	and.w	r3, r3, #1
 800e0b8:	2b00      	cmp	r3, #0
 800e0ba:	d002      	beq.n	800e0c2 <DispStr+0xd2>
 800e0bc:	4b35      	ldr	r3, [pc, #212]	; (800e194 <DispStr+0x1a4>)
 800e0be:	881b      	ldrh	r3, [r3, #0]
 800e0c0:	e001      	b.n	800e0c6 <DispStr+0xd6>
 800e0c2:	4b35      	ldr	r3, [pc, #212]	; (800e198 <DispStr+0x1a8>)
 800e0c4:	881b      	ldrh	r3, [r3, #0]
 800e0c6:	4618      	mov	r0, r3
 800e0c8:	f003 fc7c 	bl	80119c4 <LCD_Set_Pixel>
      LCD_Set_Posi(Sx, Sy+1);
 800e0cc:	4b2c      	ldr	r3, [pc, #176]	; (800e180 <DispStr+0x190>)
 800e0ce:	f9b3 2000 	ldrsh.w	r2, [r3]
 800e0d2:	4b2c      	ldr	r3, [pc, #176]	; (800e184 <DispStr+0x194>)
 800e0d4:	f9b3 3000 	ldrsh.w	r3, [r3]
 800e0d8:	b29b      	uxth	r3, r3
 800e0da:	3301      	adds	r3, #1
 800e0dc:	b29b      	uxth	r3, r3
 800e0de:	b21b      	sxth	r3, r3
 800e0e0:	4619      	mov	r1, r3
 800e0e2:	4610      	mov	r0, r2
 800e0e4:	f003 fc20 	bl	8011928 <LCD_Set_Posi>
      for(j=0; j<10; ++j)
 800e0e8:	2300      	movs	r3, #0
 800e0ea:	82bb      	strh	r3, [r7, #20]
 800e0ec:	e027      	b.n	800e13e <DispStr+0x14e>
      {  //j<8ʱ�����У�j<10������   �����¸�������
        if(k & 1)
 800e0ee:	8a7b      	ldrh	r3, [r7, #18]
 800e0f0:	f003 0301 	and.w	r3, r3, #1
 800e0f4:	2b00      	cmp	r3, #0
 800e0f6:	d00d      	beq.n	800e114 <DispStr+0x124>
        	LCD_Set_Pixel((Mode & INV)? Background : Foreground);
 800e0f8:	7afb      	ldrb	r3, [r7, #11]
 800e0fa:	f003 0301 	and.w	r3, r3, #1
 800e0fe:	2b00      	cmp	r3, #0
 800e100:	d002      	beq.n	800e108 <DispStr+0x118>
 800e102:	4b25      	ldr	r3, [pc, #148]	; (800e198 <DispStr+0x1a8>)
 800e104:	881b      	ldrh	r3, [r3, #0]
 800e106:	e001      	b.n	800e10c <DispStr+0x11c>
 800e108:	4b22      	ldr	r3, [pc, #136]	; (800e194 <DispStr+0x1a4>)
 800e10a:	881b      	ldrh	r3, [r3, #0]
 800e10c:	4618      	mov	r0, r3
 800e10e:	f003 fc59 	bl	80119c4 <LCD_Set_Pixel>
 800e112:	e00c      	b.n	800e12e <DispStr+0x13e>
        else
        	LCD_Set_Pixel((Mode & INV)? Foreground : Background);
 800e114:	7afb      	ldrb	r3, [r7, #11]
 800e116:	f003 0301 	and.w	r3, r3, #1
 800e11a:	2b00      	cmp	r3, #0
 800e11c:	d002      	beq.n	800e124 <DispStr+0x134>
 800e11e:	4b1d      	ldr	r3, [pc, #116]	; (800e194 <DispStr+0x1a4>)
 800e120:	881b      	ldrh	r3, [r3, #0]
 800e122:	e001      	b.n	800e128 <DispStr+0x138>
 800e124:	4b1c      	ldr	r3, [pc, #112]	; (800e198 <DispStr+0x1a8>)
 800e126:	881b      	ldrh	r3, [r3, #0]
 800e128:	4618      	mov	r0, r3
 800e12a:	f003 fc4b 	bl	80119c4 <LCD_Set_Pixel>
       k >>= 1;
 800e12e:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800e132:	105b      	asrs	r3, r3, #1
 800e134:	827b      	strh	r3, [r7, #18]
      for(j=0; j<10; ++j)
 800e136:	8abb      	ldrh	r3, [r7, #20]
 800e138:	3301      	adds	r3, #1
 800e13a:	b29b      	uxth	r3, r3
 800e13c:	82bb      	strh	r3, [r7, #20]
 800e13e:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800e142:	2b09      	cmp	r3, #9
 800e144:	ddd3      	ble.n	800e0ee <DispStr+0xfe>
      }
      Sx++;                 //��ʾλ��ˮƽ����+1
 800e146:	4b0e      	ldr	r3, [pc, #56]	; (800e180 <DispStr+0x190>)
 800e148:	f9b3 3000 	ldrsh.w	r3, [r3]
 800e14c:	b29b      	uxth	r3, r3
 800e14e:	3301      	adds	r3, #1
 800e150:	b29b      	uxth	r3, r3
 800e152:	b21a      	sxth	r2, r3
 800e154:	4b0a      	ldr	r3, [pc, #40]	; (800e180 <DispStr+0x190>)
 800e156:	801a      	strh	r2, [r3, #0]
    for(i=0; i<6; ++i)
 800e158:	8afb      	ldrh	r3, [r7, #22]
 800e15a:	3301      	adds	r3, #1
 800e15c:	b29b      	uxth	r3, r3
 800e15e:	82fb      	strh	r3, [r7, #22]
 800e160:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800e164:	2b05      	cmp	r3, #5
 800e166:	f77f af66 	ble.w	800e036 <DispStr+0x46>
  while(*Str != 0)
 800e16a:	687b      	ldr	r3, [r7, #4]
 800e16c:	781b      	ldrb	r3, [r3, #0]
 800e16e:	2b00      	cmp	r3, #0
 800e170:	f47f af59 	bne.w	800e026 <DispStr+0x36>
    }
  }
}
 800e174:	bf00      	nop
 800e176:	bf00      	nop
 800e178:	3718      	adds	r7, #24
 800e17a:	46bd      	mov	sp, r7
 800e17c:	bd80      	pop	{r7, pc}
 800e17e:	bf00      	nop
 800e180:	20000784 	.word	0x20000784
 800e184:	20000786 	.word	0x20000786
 800e188:	08001760 	.word	0x08001760
 800e18c:	0800152c 	.word	0x0800152c
 800e190:	ffffaaaa 	.word	0xffffaaaa
 800e194:	200023fc 	.word	0x200023fc
 800e198:	200023fe 	.word	0x200023fe

0800e19c <Draw_Circle_D>:

/*******************************************************************************
����Ŀ��˫��Բ�ǿ�
*******************************************************************************/
void Draw_Circle_D(char Mode, short Posi_x, short Posi_y, short High, short Width, short Distance)
{
 800e19c:	b590      	push	{r4, r7, lr}
 800e19e:	b085      	sub	sp, #20
 800e1a0:	af00      	add	r7, sp, #0
 800e1a2:	4604      	mov	r4, r0
 800e1a4:	4608      	mov	r0, r1
 800e1a6:	4611      	mov	r1, r2
 800e1a8:	461a      	mov	r2, r3
 800e1aa:	4623      	mov	r3, r4
 800e1ac:	71fb      	strb	r3, [r7, #7]
 800e1ae:	4603      	mov	r3, r0
 800e1b0:	80bb      	strh	r3, [r7, #4]
 800e1b2:	460b      	mov	r3, r1
 800e1b4:	807b      	strh	r3, [r7, #2]
 800e1b6:	4613      	mov	r3, r2
 800e1b8:	803b      	strh	r3, [r7, #0]
  short x, y, i, j;

  Distance = Distance + Width*2 + 5 ;
 800e1ba:	8c3b      	ldrh	r3, [r7, #32]
 800e1bc:	005b      	lsls	r3, r3, #1
 800e1be:	b29a      	uxth	r2, r3
 800e1c0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e1c2:	4413      	add	r3, r2
 800e1c4:	b29b      	uxth	r3, r3
 800e1c6:	3305      	adds	r3, #5
 800e1c8:	b29b      	uxth	r3, r3
 800e1ca:	84bb      	strh	r3, [r7, #36]	; 0x24
  Posi_x = Posi_x - Width;
 800e1cc:	88ba      	ldrh	r2, [r7, #4]
 800e1ce:	8c3b      	ldrh	r3, [r7, #32]
 800e1d0:	1ad3      	subs	r3, r2, r3
 800e1d2:	b29b      	uxth	r3, r3
 800e1d4:	80bb      	strh	r3, [r7, #4]

  x = Posi_x;
 800e1d6:	88bb      	ldrh	r3, [r7, #4]
 800e1d8:	817b      	strh	r3, [r7, #10]
  y = Posi_y + 2;
 800e1da:	887b      	ldrh	r3, [r7, #2]
 800e1dc:	3302      	adds	r3, #2
 800e1de:	b29b      	uxth	r3, r3
 800e1e0:	813b      	strh	r3, [r7, #8]
  LCD_Set_Posi(x, y);
 800e1e2:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 800e1e6:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800e1ea:	4611      	mov	r1, r2
 800e1ec:	4618      	mov	r0, r3
 800e1ee:	f003 fb9b 	bl	8011928 <LCD_Set_Posi>
  for(j=0;j<High-4;j++ )LCD_Set_Pixel((Mode & INV)? Foreground : Background);
 800e1f2:	2300      	movs	r3, #0
 800e1f4:	81bb      	strh	r3, [r7, #12]
 800e1f6:	e012      	b.n	800e21e <Draw_Circle_D+0x82>
 800e1f8:	79fb      	ldrb	r3, [r7, #7]
 800e1fa:	f003 0301 	and.w	r3, r3, #1
 800e1fe:	2b00      	cmp	r3, #0
 800e200:	d002      	beq.n	800e208 <Draw_Circle_D+0x6c>
 800e202:	4bad      	ldr	r3, [pc, #692]	; (800e4b8 <Draw_Circle_D+0x31c>)
 800e204:	881b      	ldrh	r3, [r3, #0]
 800e206:	e001      	b.n	800e20c <Draw_Circle_D+0x70>
 800e208:	4bac      	ldr	r3, [pc, #688]	; (800e4bc <Draw_Circle_D+0x320>)
 800e20a:	881b      	ldrh	r3, [r3, #0]
 800e20c:	4618      	mov	r0, r3
 800e20e:	f003 fbd9 	bl	80119c4 <LCD_Set_Pixel>
 800e212:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800e216:	b29b      	uxth	r3, r3
 800e218:	3301      	adds	r3, #1
 800e21a:	b29b      	uxth	r3, r3
 800e21c:	81bb      	strh	r3, [r7, #12]
 800e21e:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 800e222:	f9b7 3000 	ldrsh.w	r3, [r7]
 800e226:	3b04      	subs	r3, #4
 800e228:	429a      	cmp	r2, r3
 800e22a:	dbe5      	blt.n	800e1f8 <Draw_Circle_D+0x5c>
  x = Posi_x + Distance;
 800e22c:	88ba      	ldrh	r2, [r7, #4]
 800e22e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e230:	4413      	add	r3, r2
 800e232:	b29b      	uxth	r3, r3
 800e234:	817b      	strh	r3, [r7, #10]
  LCD_Set_Posi(x, y);
 800e236:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 800e23a:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800e23e:	4611      	mov	r1, r2
 800e240:	4618      	mov	r0, r3
 800e242:	f003 fb71 	bl	8011928 <LCD_Set_Posi>
  for(j=0;j<High-4;j++ )LCD_Set_Pixel((Mode & INV)? Foreground : Background);
 800e246:	2300      	movs	r3, #0
 800e248:	81bb      	strh	r3, [r7, #12]
 800e24a:	e012      	b.n	800e272 <Draw_Circle_D+0xd6>
 800e24c:	79fb      	ldrb	r3, [r7, #7]
 800e24e:	f003 0301 	and.w	r3, r3, #1
 800e252:	2b00      	cmp	r3, #0
 800e254:	d002      	beq.n	800e25c <Draw_Circle_D+0xc0>
 800e256:	4b98      	ldr	r3, [pc, #608]	; (800e4b8 <Draw_Circle_D+0x31c>)
 800e258:	881b      	ldrh	r3, [r3, #0]
 800e25a:	e001      	b.n	800e260 <Draw_Circle_D+0xc4>
 800e25c:	4b97      	ldr	r3, [pc, #604]	; (800e4bc <Draw_Circle_D+0x320>)
 800e25e:	881b      	ldrh	r3, [r3, #0]
 800e260:	4618      	mov	r0, r3
 800e262:	f003 fbaf 	bl	80119c4 <LCD_Set_Pixel>
 800e266:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800e26a:	b29b      	uxth	r3, r3
 800e26c:	3301      	adds	r3, #1
 800e26e:	b29b      	uxth	r3, r3
 800e270:	81bb      	strh	r3, [r7, #12]
 800e272:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 800e276:	f9b7 3000 	ldrsh.w	r3, [r7]
 800e27a:	3b04      	subs	r3, #4
 800e27c:	429a      	cmp	r2, r3
 800e27e:	dbe5      	blt.n	800e24c <Draw_Circle_D+0xb0>

  x = Posi_x + 1;
 800e280:	88bb      	ldrh	r3, [r7, #4]
 800e282:	3301      	adds	r3, #1
 800e284:	b29b      	uxth	r3, r3
 800e286:	817b      	strh	r3, [r7, #10]
  y = Posi_y + 1;
 800e288:	887b      	ldrh	r3, [r7, #2]
 800e28a:	3301      	adds	r3, #1
 800e28c:	b29b      	uxth	r3, r3
 800e28e:	813b      	strh	r3, [r7, #8]
  LCD_Set_Posi(x, y);
 800e290:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 800e294:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800e298:	4611      	mov	r1, r2
 800e29a:	4618      	mov	r0, r3
 800e29c:	f003 fb44 	bl	8011928 <LCD_Set_Posi>
  for(j=0;j<High-2;j++ )LCD_Set_Pixel((Mode & INV)? Foreground : Background);
 800e2a0:	2300      	movs	r3, #0
 800e2a2:	81bb      	strh	r3, [r7, #12]
 800e2a4:	e012      	b.n	800e2cc <Draw_Circle_D+0x130>
 800e2a6:	79fb      	ldrb	r3, [r7, #7]
 800e2a8:	f003 0301 	and.w	r3, r3, #1
 800e2ac:	2b00      	cmp	r3, #0
 800e2ae:	d002      	beq.n	800e2b6 <Draw_Circle_D+0x11a>
 800e2b0:	4b81      	ldr	r3, [pc, #516]	; (800e4b8 <Draw_Circle_D+0x31c>)
 800e2b2:	881b      	ldrh	r3, [r3, #0]
 800e2b4:	e001      	b.n	800e2ba <Draw_Circle_D+0x11e>
 800e2b6:	4b81      	ldr	r3, [pc, #516]	; (800e4bc <Draw_Circle_D+0x320>)
 800e2b8:	881b      	ldrh	r3, [r3, #0]
 800e2ba:	4618      	mov	r0, r3
 800e2bc:	f003 fb82 	bl	80119c4 <LCD_Set_Pixel>
 800e2c0:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800e2c4:	b29b      	uxth	r3, r3
 800e2c6:	3301      	adds	r3, #1
 800e2c8:	b29b      	uxth	r3, r3
 800e2ca:	81bb      	strh	r3, [r7, #12]
 800e2cc:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 800e2d0:	f9b7 3000 	ldrsh.w	r3, [r7]
 800e2d4:	3b02      	subs	r3, #2
 800e2d6:	429a      	cmp	r2, r3
 800e2d8:	dbe5      	blt.n	800e2a6 <Draw_Circle_D+0x10a>
  x = Posi_x + Distance-1;
 800e2da:	88ba      	ldrh	r2, [r7, #4]
 800e2dc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e2de:	4413      	add	r3, r2
 800e2e0:	b29b      	uxth	r3, r3
 800e2e2:	3b01      	subs	r3, #1
 800e2e4:	b29b      	uxth	r3, r3
 800e2e6:	817b      	strh	r3, [r7, #10]
  LCD_Set_Posi(x, y);
 800e2e8:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 800e2ec:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800e2f0:	4611      	mov	r1, r2
 800e2f2:	4618      	mov	r0, r3
 800e2f4:	f003 fb18 	bl	8011928 <LCD_Set_Posi>
  for(j=0;j<High-2;j++ )LCD_Set_Pixel((Mode & INV)? Foreground : Background);
 800e2f8:	2300      	movs	r3, #0
 800e2fa:	81bb      	strh	r3, [r7, #12]
 800e2fc:	e012      	b.n	800e324 <Draw_Circle_D+0x188>
 800e2fe:	79fb      	ldrb	r3, [r7, #7]
 800e300:	f003 0301 	and.w	r3, r3, #1
 800e304:	2b00      	cmp	r3, #0
 800e306:	d002      	beq.n	800e30e <Draw_Circle_D+0x172>
 800e308:	4b6b      	ldr	r3, [pc, #428]	; (800e4b8 <Draw_Circle_D+0x31c>)
 800e30a:	881b      	ldrh	r3, [r3, #0]
 800e30c:	e001      	b.n	800e312 <Draw_Circle_D+0x176>
 800e30e:	4b6b      	ldr	r3, [pc, #428]	; (800e4bc <Draw_Circle_D+0x320>)
 800e310:	881b      	ldrh	r3, [r3, #0]
 800e312:	4618      	mov	r0, r3
 800e314:	f003 fb56 	bl	80119c4 <LCD_Set_Pixel>
 800e318:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800e31c:	b29b      	uxth	r3, r3
 800e31e:	3301      	adds	r3, #1
 800e320:	b29b      	uxth	r3, r3
 800e322:	81bb      	strh	r3, [r7, #12]
 800e324:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 800e328:	f9b7 3000 	ldrsh.w	r3, [r7]
 800e32c:	3b02      	subs	r3, #2
 800e32e:	429a      	cmp	r2, r3
 800e330:	dbe5      	blt.n	800e2fe <Draw_Circle_D+0x162>

  x = Posi_x + 2;
 800e332:	88bb      	ldrh	r3, [r7, #4]
 800e334:	3302      	adds	r3, #2
 800e336:	b29b      	uxth	r3, r3
 800e338:	817b      	strh	r3, [r7, #10]
  y = Posi_y;
 800e33a:	887b      	ldrh	r3, [r7, #2]
 800e33c:	813b      	strh	r3, [r7, #8]
  LCD_Set_Posi(x, y);
 800e33e:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 800e342:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800e346:	4611      	mov	r1, r2
 800e348:	4618      	mov	r0, r3
 800e34a:	f003 faed 	bl	8011928 <LCD_Set_Posi>
  for(j=0;j<High;j++ )LCD_Set_Pixel((Mode & INV)? Foreground : Background);
 800e34e:	2300      	movs	r3, #0
 800e350:	81bb      	strh	r3, [r7, #12]
 800e352:	e012      	b.n	800e37a <Draw_Circle_D+0x1de>
 800e354:	79fb      	ldrb	r3, [r7, #7]
 800e356:	f003 0301 	and.w	r3, r3, #1
 800e35a:	2b00      	cmp	r3, #0
 800e35c:	d002      	beq.n	800e364 <Draw_Circle_D+0x1c8>
 800e35e:	4b56      	ldr	r3, [pc, #344]	; (800e4b8 <Draw_Circle_D+0x31c>)
 800e360:	881b      	ldrh	r3, [r3, #0]
 800e362:	e001      	b.n	800e368 <Draw_Circle_D+0x1cc>
 800e364:	4b55      	ldr	r3, [pc, #340]	; (800e4bc <Draw_Circle_D+0x320>)
 800e366:	881b      	ldrh	r3, [r3, #0]
 800e368:	4618      	mov	r0, r3
 800e36a:	f003 fb2b 	bl	80119c4 <LCD_Set_Pixel>
 800e36e:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800e372:	b29b      	uxth	r3, r3
 800e374:	3301      	adds	r3, #1
 800e376:	b29b      	uxth	r3, r3
 800e378:	81bb      	strh	r3, [r7, #12]
 800e37a:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 800e37e:	f9b7 3000 	ldrsh.w	r3, [r7]
 800e382:	429a      	cmp	r2, r3
 800e384:	dbe6      	blt.n	800e354 <Draw_Circle_D+0x1b8>
  x = Posi_x + Distance-2;
 800e386:	88ba      	ldrh	r2, [r7, #4]
 800e388:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e38a:	4413      	add	r3, r2
 800e38c:	b29b      	uxth	r3, r3
 800e38e:	3b02      	subs	r3, #2
 800e390:	b29b      	uxth	r3, r3
 800e392:	817b      	strh	r3, [r7, #10]
  y = Posi_y;
 800e394:	887b      	ldrh	r3, [r7, #2]
 800e396:	813b      	strh	r3, [r7, #8]
  LCD_Set_Posi(x, y);
 800e398:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 800e39c:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800e3a0:	4611      	mov	r1, r2
 800e3a2:	4618      	mov	r0, r3
 800e3a4:	f003 fac0 	bl	8011928 <LCD_Set_Posi>
  for(j=0;j<High;j++ )LCD_Set_Pixel((Mode & INV)? Foreground : Background);
 800e3a8:	2300      	movs	r3, #0
 800e3aa:	81bb      	strh	r3, [r7, #12]
 800e3ac:	e012      	b.n	800e3d4 <Draw_Circle_D+0x238>
 800e3ae:	79fb      	ldrb	r3, [r7, #7]
 800e3b0:	f003 0301 	and.w	r3, r3, #1
 800e3b4:	2b00      	cmp	r3, #0
 800e3b6:	d002      	beq.n	800e3be <Draw_Circle_D+0x222>
 800e3b8:	4b3f      	ldr	r3, [pc, #252]	; (800e4b8 <Draw_Circle_D+0x31c>)
 800e3ba:	881b      	ldrh	r3, [r3, #0]
 800e3bc:	e001      	b.n	800e3c2 <Draw_Circle_D+0x226>
 800e3be:	4b3f      	ldr	r3, [pc, #252]	; (800e4bc <Draw_Circle_D+0x320>)
 800e3c0:	881b      	ldrh	r3, [r3, #0]
 800e3c2:	4618      	mov	r0, r3
 800e3c4:	f003 fafe 	bl	80119c4 <LCD_Set_Pixel>
 800e3c8:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800e3cc:	b29b      	uxth	r3, r3
 800e3ce:	3301      	adds	r3, #1
 800e3d0:	b29b      	uxth	r3, r3
 800e3d2:	81bb      	strh	r3, [r7, #12]
 800e3d4:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 800e3d8:	f9b7 3000 	ldrsh.w	r3, [r7]
 800e3dc:	429a      	cmp	r2, r3
 800e3de:	dbe6      	blt.n	800e3ae <Draw_Circle_D+0x212>

  y = Posi_y;
 800e3e0:	887b      	ldrh	r3, [r7, #2]
 800e3e2:	813b      	strh	r3, [r7, #8]

  for(i=0;i<Width;i++){
 800e3e4:	2300      	movs	r3, #0
 800e3e6:	81fb      	strh	r3, [r7, #14]
 800e3e8:	e05a      	b.n	800e4a0 <Draw_Circle_D+0x304>
    LCD_Set_Posi(Posi_x+3+i, y);
 800e3ea:	88ba      	ldrh	r2, [r7, #4]
 800e3ec:	89fb      	ldrh	r3, [r7, #14]
 800e3ee:	4413      	add	r3, r2
 800e3f0:	b29b      	uxth	r3, r3
 800e3f2:	3303      	adds	r3, #3
 800e3f4:	b29b      	uxth	r3, r3
 800e3f6:	b21b      	sxth	r3, r3
 800e3f8:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 800e3fc:	4611      	mov	r1, r2
 800e3fe:	4618      	mov	r0, r3
 800e400:	f003 fa92 	bl	8011928 <LCD_Set_Posi>
    for(j=0; j<High; j++)LCD_Set_Pixel((Mode & INV)? Foreground : Background);
 800e404:	2300      	movs	r3, #0
 800e406:	81bb      	strh	r3, [r7, #12]
 800e408:	e012      	b.n	800e430 <Draw_Circle_D+0x294>
 800e40a:	79fb      	ldrb	r3, [r7, #7]
 800e40c:	f003 0301 	and.w	r3, r3, #1
 800e410:	2b00      	cmp	r3, #0
 800e412:	d002      	beq.n	800e41a <Draw_Circle_D+0x27e>
 800e414:	4b28      	ldr	r3, [pc, #160]	; (800e4b8 <Draw_Circle_D+0x31c>)
 800e416:	881b      	ldrh	r3, [r3, #0]
 800e418:	e001      	b.n	800e41e <Draw_Circle_D+0x282>
 800e41a:	4b28      	ldr	r3, [pc, #160]	; (800e4bc <Draw_Circle_D+0x320>)
 800e41c:	881b      	ldrh	r3, [r3, #0]
 800e41e:	4618      	mov	r0, r3
 800e420:	f003 fad0 	bl	80119c4 <LCD_Set_Pixel>
 800e424:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800e428:	b29b      	uxth	r3, r3
 800e42a:	3301      	adds	r3, #1
 800e42c:	b29b      	uxth	r3, r3
 800e42e:	81bb      	strh	r3, [r7, #12]
 800e430:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 800e434:	f9b7 3000 	ldrsh.w	r3, [r7]
 800e438:	429a      	cmp	r2, r3
 800e43a:	dbe6      	blt.n	800e40a <Draw_Circle_D+0x26e>
    LCD_Set_Posi(Posi_x+Distance-3-i, y);
 800e43c:	88ba      	ldrh	r2, [r7, #4]
 800e43e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e440:	4413      	add	r3, r2
 800e442:	b29a      	uxth	r2, r3
 800e444:	89fb      	ldrh	r3, [r7, #14]
 800e446:	1ad3      	subs	r3, r2, r3
 800e448:	b29b      	uxth	r3, r3
 800e44a:	3b03      	subs	r3, #3
 800e44c:	b29b      	uxth	r3, r3
 800e44e:	b21b      	sxth	r3, r3
 800e450:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 800e454:	4611      	mov	r1, r2
 800e456:	4618      	mov	r0, r3
 800e458:	f003 fa66 	bl	8011928 <LCD_Set_Posi>
    for(j=0; j<High; j++)LCD_Set_Pixel((Mode & INV)? Foreground : Background);
 800e45c:	2300      	movs	r3, #0
 800e45e:	81bb      	strh	r3, [r7, #12]
 800e460:	e012      	b.n	800e488 <Draw_Circle_D+0x2ec>
 800e462:	79fb      	ldrb	r3, [r7, #7]
 800e464:	f003 0301 	and.w	r3, r3, #1
 800e468:	2b00      	cmp	r3, #0
 800e46a:	d002      	beq.n	800e472 <Draw_Circle_D+0x2d6>
 800e46c:	4b12      	ldr	r3, [pc, #72]	; (800e4b8 <Draw_Circle_D+0x31c>)
 800e46e:	881b      	ldrh	r3, [r3, #0]
 800e470:	e001      	b.n	800e476 <Draw_Circle_D+0x2da>
 800e472:	4b12      	ldr	r3, [pc, #72]	; (800e4bc <Draw_Circle_D+0x320>)
 800e474:	881b      	ldrh	r3, [r3, #0]
 800e476:	4618      	mov	r0, r3
 800e478:	f003 faa4 	bl	80119c4 <LCD_Set_Pixel>
 800e47c:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800e480:	b29b      	uxth	r3, r3
 800e482:	3301      	adds	r3, #1
 800e484:	b29b      	uxth	r3, r3
 800e486:	81bb      	strh	r3, [r7, #12]
 800e488:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 800e48c:	f9b7 3000 	ldrsh.w	r3, [r7]
 800e490:	429a      	cmp	r2, r3
 800e492:	dbe6      	blt.n	800e462 <Draw_Circle_D+0x2c6>
  for(i=0;i<Width;i++){
 800e494:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800e498:	b29b      	uxth	r3, r3
 800e49a:	3301      	adds	r3, #1
 800e49c:	b29b      	uxth	r3, r3
 800e49e:	81fb      	strh	r3, [r7, #14]
 800e4a0:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 800e4a4:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800e4a8:	429a      	cmp	r2, r3
 800e4aa:	db9e      	blt.n	800e3ea <Draw_Circle_D+0x24e>
  }
}
 800e4ac:	bf00      	nop
 800e4ae:	bf00      	nop
 800e4b0:	3714      	adds	r7, #20
 800e4b2:	46bd      	mov	sp, r7
 800e4b4:	bd90      	pop	{r4, r7, pc}
 800e4b6:	bf00      	nop
 800e4b8:	200023fc 	.word	0x200023fc
 800e4bc:	200023fe 	.word	0x200023fe

0800e4c0 <DispStr10x14>:

/*******************************************************************************
  DispStr:                               Mode = bit0: Normal/Inv, bit1: Char/Map
*******************************************************************************/
void DispStr10x14(short x0, short y0, char Mode, char *Str)
{
 800e4c0:	b580      	push	{r7, lr}
 800e4c2:	b084      	sub	sp, #16
 800e4c4:	af00      	add	r7, sp, #0
 800e4c6:	607b      	str	r3, [r7, #4]
 800e4c8:	4603      	mov	r3, r0
 800e4ca:	81fb      	strh	r3, [r7, #14]
 800e4cc:	460b      	mov	r3, r1
 800e4ce:	81bb      	strh	r3, [r7, #12]
 800e4d0:	4613      	mov	r3, r2
 800e4d2:	72fb      	strb	r3, [r7, #11]
  Sx = x0; Sy = y0;
 800e4d4:	4a0c      	ldr	r2, [pc, #48]	; (800e508 <DispStr10x14+0x48>)
 800e4d6:	89fb      	ldrh	r3, [r7, #14]
 800e4d8:	8013      	strh	r3, [r2, #0]
 800e4da:	4a0c      	ldr	r2, [pc, #48]	; (800e50c <DispStr10x14+0x4c>)
 800e4dc:	89bb      	ldrh	r3, [r7, #12]
 800e4de:	8013      	strh	r3, [r2, #0]
  while(*Str != 0)
 800e4e0:	e008      	b.n	800e4f4 <DispStr10x14+0x34>
  {
    DispChar10x14(Mode, *Str++);
 800e4e2:	687b      	ldr	r3, [r7, #4]
 800e4e4:	1c5a      	adds	r2, r3, #1
 800e4e6:	607a      	str	r2, [r7, #4]
 800e4e8:	781a      	ldrb	r2, [r3, #0]
 800e4ea:	7afb      	ldrb	r3, [r7, #11]
 800e4ec:	4611      	mov	r1, r2
 800e4ee:	4618      	mov	r0, r3
 800e4f0:	f000 f80e 	bl	800e510 <DispChar10x14>
  while(*Str != 0)
 800e4f4:	687b      	ldr	r3, [r7, #4]
 800e4f6:	781b      	ldrb	r3, [r3, #0]
 800e4f8:	2b00      	cmp	r3, #0
 800e4fa:	d1f2      	bne.n	800e4e2 <DispStr10x14+0x22>
  }
}
 800e4fc:	bf00      	nop
 800e4fe:	bf00      	nop
 800e500:	3710      	adds	r7, #16
 800e502:	46bd      	mov	sp, r7
 800e504:	bd80      	pop	{r7, pc}
 800e506:	bf00      	nop
 800e508:	20000784 	.word	0x20000784
 800e50c:	20000786 	.word	0x20000786

0800e510 <DispChar10x14>:
/*******************************************************************************
 Disp_Char10x14:                        Mode = bit0: Normal/Inv, bit1: Char/Map
*******************************************************************************/
void DispChar10x14(char Mode, char Code)
{
 800e510:	b580      	push	{r7, lr}
 800e512:	b084      	sub	sp, #16
 800e514:	af00      	add	r7, sp, #0
 800e516:	4603      	mov	r3, r0
 800e518:	460a      	mov	r2, r1
 800e51a:	71fb      	strb	r3, [r7, #7]
 800e51c:	4613      	mov	r3, r2
 800e51e:	71bb      	strb	r3, [r7, #6]
  short i, j, k;

  for(i=0; i<10; ++i)
 800e520:	2300      	movs	r3, #0
 800e522:	81fb      	strh	r3, [r7, #14]
 800e524:	e0fe      	b.n	800e724 <DispChar10x14+0x214>
  {
    if(Mode & SYMB) k = SYMB10x14[(Code - '@')*10 + i];
 800e526:	79fb      	ldrb	r3, [r7, #7]
 800e528:	f003 0310 	and.w	r3, r3, #16
 800e52c:	2b00      	cmp	r3, #0
 800e52e:	d00f      	beq.n	800e550 <DispChar10x14+0x40>
 800e530:	79bb      	ldrb	r3, [r7, #6]
 800e532:	f1a3 0240 	sub.w	r2, r3, #64	; 0x40
 800e536:	4613      	mov	r3, r2
 800e538:	009b      	lsls	r3, r3, #2
 800e53a:	4413      	add	r3, r2
 800e53c:	005b      	lsls	r3, r3, #1
 800e53e:	461a      	mov	r2, r3
 800e540:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800e544:	4413      	add	r3, r2
 800e546:	4a7c      	ldr	r2, [pc, #496]	; (800e738 <DispChar10x14+0x228>)
 800e548:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800e54c:	817b      	strh	r3, [r7, #10]
 800e54e:	e00e      	b.n	800e56e <DispChar10x14+0x5e>
    else            k = CHAR10x14[((Code-0X21)*10)+i];
 800e550:	79bb      	ldrb	r3, [r7, #6]
 800e552:	f1a3 0221 	sub.w	r2, r3, #33	; 0x21
 800e556:	4613      	mov	r3, r2
 800e558:	009b      	lsls	r3, r3, #2
 800e55a:	4413      	add	r3, r2
 800e55c:	005b      	lsls	r3, r3, #1
 800e55e:	461a      	mov	r2, r3
 800e560:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800e564:	4413      	add	r3, r2
 800e566:	4a75      	ldr	r2, [pc, #468]	; (800e73c <DispChar10x14+0x22c>)
 800e568:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800e56c:	817b      	strh	r3, [r7, #10]
    if(Mode & VOID) k &= (i%2)? 0xAAAA : 0x5555;
 800e56e:	79fb      	ldrb	r3, [r7, #7]
 800e570:	f003 0320 	and.w	r3, r3, #32
 800e574:	2b00      	cmp	r3, #0
 800e576:	d00c      	beq.n	800e592 <DispChar10x14+0x82>
 800e578:	89fb      	ldrh	r3, [r7, #14]
 800e57a:	f003 0301 	and.w	r3, r3, #1
 800e57e:	b29b      	uxth	r3, r3
 800e580:	2b00      	cmp	r3, #0
 800e582:	d001      	beq.n	800e588 <DispChar10x14+0x78>
 800e584:	4a6e      	ldr	r2, [pc, #440]	; (800e740 <DispChar10x14+0x230>)
 800e586:	e001      	b.n	800e58c <DispChar10x14+0x7c>
 800e588:	f245 5255 	movw	r2, #21845	; 0x5555
 800e58c:	897b      	ldrh	r3, [r7, #10]
 800e58e:	4013      	ands	r3, r2
 800e590:	817b      	strh	r3, [r7, #10]
    LCD_Set_Posi(Sx, Sy);
 800e592:	4b6c      	ldr	r3, [pc, #432]	; (800e744 <DispChar10x14+0x234>)
 800e594:	f9b3 3000 	ldrsh.w	r3, [r3]
 800e598:	4a6b      	ldr	r2, [pc, #428]	; (800e748 <DispChar10x14+0x238>)
 800e59a:	f9b2 2000 	ldrsh.w	r2, [r2]
 800e59e:	4611      	mov	r1, r2
 800e5a0:	4618      	mov	r0, r3
 800e5a2:	f003 f9c1 	bl	8011928 <LCD_Set_Posi>
    if((Mode & SYMB)&&(Code == 'C' || Code=='D'|| Code=='E')){       //AC/DC
 800e5a6:	79fb      	ldrb	r3, [r7, #7]
 800e5a8:	f003 0310 	and.w	r3, r3, #16
 800e5ac:	2b00      	cmp	r3, #0
 800e5ae:	d038      	beq.n	800e622 <DispChar10x14+0x112>
 800e5b0:	79bb      	ldrb	r3, [r7, #6]
 800e5b2:	2b43      	cmp	r3, #67	; 0x43
 800e5b4:	d005      	beq.n	800e5c2 <DispChar10x14+0xb2>
 800e5b6:	79bb      	ldrb	r3, [r7, #6]
 800e5b8:	2b44      	cmp	r3, #68	; 0x44
 800e5ba:	d002      	beq.n	800e5c2 <DispChar10x14+0xb2>
 800e5bc:	79bb      	ldrb	r3, [r7, #6]
 800e5be:	2b45      	cmp	r3, #69	; 0x45
 800e5c0:	d12f      	bne.n	800e622 <DispChar10x14+0x112>
      for(j=0; j<11; ++j){
 800e5c2:	2300      	movs	r3, #0
 800e5c4:	81bb      	strh	r3, [r7, #12]
 800e5c6:	e027      	b.n	800e618 <DispChar10x14+0x108>
        if(k & 4)  LCD_Set_Pixel((Mode & INV)? Background : Foreground);
 800e5c8:	897b      	ldrh	r3, [r7, #10]
 800e5ca:	f003 0304 	and.w	r3, r3, #4
 800e5ce:	2b00      	cmp	r3, #0
 800e5d0:	d00d      	beq.n	800e5ee <DispChar10x14+0xde>
 800e5d2:	79fb      	ldrb	r3, [r7, #7]
 800e5d4:	f003 0301 	and.w	r3, r3, #1
 800e5d8:	2b00      	cmp	r3, #0
 800e5da:	d002      	beq.n	800e5e2 <DispChar10x14+0xd2>
 800e5dc:	4b5b      	ldr	r3, [pc, #364]	; (800e74c <DispChar10x14+0x23c>)
 800e5de:	881b      	ldrh	r3, [r3, #0]
 800e5e0:	e001      	b.n	800e5e6 <DispChar10x14+0xd6>
 800e5e2:	4b5b      	ldr	r3, [pc, #364]	; (800e750 <DispChar10x14+0x240>)
 800e5e4:	881b      	ldrh	r3, [r3, #0]
 800e5e6:	4618      	mov	r0, r3
 800e5e8:	f003 f9ec 	bl	80119c4 <LCD_Set_Pixel>
 800e5ec:	e00c      	b.n	800e608 <DispChar10x14+0xf8>
        else       LCD_Set_Pixel((Mode & INV)? Foreground : Background);
 800e5ee:	79fb      	ldrb	r3, [r7, #7]
 800e5f0:	f003 0301 	and.w	r3, r3, #1
 800e5f4:	2b00      	cmp	r3, #0
 800e5f6:	d002      	beq.n	800e5fe <DispChar10x14+0xee>
 800e5f8:	4b55      	ldr	r3, [pc, #340]	; (800e750 <DispChar10x14+0x240>)
 800e5fa:	881b      	ldrh	r3, [r3, #0]
 800e5fc:	e001      	b.n	800e602 <DispChar10x14+0xf2>
 800e5fe:	4b53      	ldr	r3, [pc, #332]	; (800e74c <DispChar10x14+0x23c>)
 800e600:	881b      	ldrh	r3, [r3, #0]
 800e602:	4618      	mov	r0, r3
 800e604:	f003 f9de 	bl	80119c4 <LCD_Set_Pixel>
        k >>= 1;}
 800e608:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800e60c:	105b      	asrs	r3, r3, #1
 800e60e:	817b      	strh	r3, [r7, #10]
      for(j=0; j<11; ++j){
 800e610:	89bb      	ldrh	r3, [r7, #12]
 800e612:	3301      	adds	r3, #1
 800e614:	b29b      	uxth	r3, r3
 800e616:	81bb      	strh	r3, [r7, #12]
 800e618:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800e61c:	2b0a      	cmp	r3, #10
 800e61e:	ddd3      	ble.n	800e5c8 <DispChar10x14+0xb8>
    if((Mode & SYMB)&&(Code == 'C' || Code=='D'|| Code=='E')){       //AC/DC
 800e620:	e073      	b.n	800e70a <DispChar10x14+0x1fa>
    }
    else if((Mode & SYMB)&&(Code == 'L' || Code=='H')){
 800e622:	79fb      	ldrb	r3, [r7, #7]
 800e624:	f003 0310 	and.w	r3, r3, #16
 800e628:	2b00      	cmp	r3, #0
 800e62a:	d03f      	beq.n	800e6ac <DispChar10x14+0x19c>
 800e62c:	79bb      	ldrb	r3, [r7, #6]
 800e62e:	2b4c      	cmp	r3, #76	; 0x4c
 800e630:	d002      	beq.n	800e638 <DispChar10x14+0x128>
 800e632:	79bb      	ldrb	r3, [r7, #6]
 800e634:	2b48      	cmp	r3, #72	; 0x48
 800e636:	d139      	bne.n	800e6ac <DispChar10x14+0x19c>
      LCD_Set_Posi(Sx, Sy);
 800e638:	4b42      	ldr	r3, [pc, #264]	; (800e744 <DispChar10x14+0x234>)
 800e63a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800e63e:	4a42      	ldr	r2, [pc, #264]	; (800e748 <DispChar10x14+0x238>)
 800e640:	f9b2 2000 	ldrsh.w	r2, [r2]
 800e644:	4611      	mov	r1, r2
 800e646:	4618      	mov	r0, r3
 800e648:	f003 f96e 	bl	8011928 <LCD_Set_Posi>
      for(j=0; j<11; ++j){
 800e64c:	2300      	movs	r3, #0
 800e64e:	81bb      	strh	r3, [r7, #12]
 800e650:	e027      	b.n	800e6a2 <DispChar10x14+0x192>
        if(k & 4)  LCD_Set_Pixel((Mode & INV)? Background : Foreground);
 800e652:	897b      	ldrh	r3, [r7, #10]
 800e654:	f003 0304 	and.w	r3, r3, #4
 800e658:	2b00      	cmp	r3, #0
 800e65a:	d00d      	beq.n	800e678 <DispChar10x14+0x168>
 800e65c:	79fb      	ldrb	r3, [r7, #7]
 800e65e:	f003 0301 	and.w	r3, r3, #1
 800e662:	2b00      	cmp	r3, #0
 800e664:	d002      	beq.n	800e66c <DispChar10x14+0x15c>
 800e666:	4b39      	ldr	r3, [pc, #228]	; (800e74c <DispChar10x14+0x23c>)
 800e668:	881b      	ldrh	r3, [r3, #0]
 800e66a:	e001      	b.n	800e670 <DispChar10x14+0x160>
 800e66c:	4b38      	ldr	r3, [pc, #224]	; (800e750 <DispChar10x14+0x240>)
 800e66e:	881b      	ldrh	r3, [r3, #0]
 800e670:	4618      	mov	r0, r3
 800e672:	f003 f9a7 	bl	80119c4 <LCD_Set_Pixel>
 800e676:	e00c      	b.n	800e692 <DispChar10x14+0x182>
        else       LCD_Set_Pixel((Mode & INV)? Foreground : Background);
 800e678:	79fb      	ldrb	r3, [r7, #7]
 800e67a:	f003 0301 	and.w	r3, r3, #1
 800e67e:	2b00      	cmp	r3, #0
 800e680:	d002      	beq.n	800e688 <DispChar10x14+0x178>
 800e682:	4b33      	ldr	r3, [pc, #204]	; (800e750 <DispChar10x14+0x240>)
 800e684:	881b      	ldrh	r3, [r3, #0]
 800e686:	e001      	b.n	800e68c <DispChar10x14+0x17c>
 800e688:	4b30      	ldr	r3, [pc, #192]	; (800e74c <DispChar10x14+0x23c>)
 800e68a:	881b      	ldrh	r3, [r3, #0]
 800e68c:	4618      	mov	r0, r3
 800e68e:	f003 f999 	bl	80119c4 <LCD_Set_Pixel>
        k >>= 1;
 800e692:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800e696:	105b      	asrs	r3, r3, #1
 800e698:	817b      	strh	r3, [r7, #10]
      for(j=0; j<11; ++j){
 800e69a:	89bb      	ldrh	r3, [r7, #12]
 800e69c:	3301      	adds	r3, #1
 800e69e:	b29b      	uxth	r3, r3
 800e6a0:	81bb      	strh	r3, [r7, #12]
 800e6a2:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800e6a6:	2b0a      	cmp	r3, #10
 800e6a8:	ddd3      	ble.n	800e652 <DispChar10x14+0x142>
    else if((Mode & SYMB)&&(Code == 'L' || Code=='H')){
 800e6aa:	e02e      	b.n	800e70a <DispChar10x14+0x1fa>
      }
    }
    else{
      for(j=0; j<14; ++j){
 800e6ac:	2300      	movs	r3, #0
 800e6ae:	81bb      	strh	r3, [r7, #12]
 800e6b0:	e027      	b.n	800e702 <DispChar10x14+0x1f2>
        if(k & 4)  LCD_Set_Pixel((Mode & INV)? Background : Foreground);
 800e6b2:	897b      	ldrh	r3, [r7, #10]
 800e6b4:	f003 0304 	and.w	r3, r3, #4
 800e6b8:	2b00      	cmp	r3, #0
 800e6ba:	d00d      	beq.n	800e6d8 <DispChar10x14+0x1c8>
 800e6bc:	79fb      	ldrb	r3, [r7, #7]
 800e6be:	f003 0301 	and.w	r3, r3, #1
 800e6c2:	2b00      	cmp	r3, #0
 800e6c4:	d002      	beq.n	800e6cc <DispChar10x14+0x1bc>
 800e6c6:	4b21      	ldr	r3, [pc, #132]	; (800e74c <DispChar10x14+0x23c>)
 800e6c8:	881b      	ldrh	r3, [r3, #0]
 800e6ca:	e001      	b.n	800e6d0 <DispChar10x14+0x1c0>
 800e6cc:	4b20      	ldr	r3, [pc, #128]	; (800e750 <DispChar10x14+0x240>)
 800e6ce:	881b      	ldrh	r3, [r3, #0]
 800e6d0:	4618      	mov	r0, r3
 800e6d2:	f003 f977 	bl	80119c4 <LCD_Set_Pixel>
 800e6d6:	e00c      	b.n	800e6f2 <DispChar10x14+0x1e2>
        else       LCD_Set_Pixel((Mode & INV)? Foreground : Background);
 800e6d8:	79fb      	ldrb	r3, [r7, #7]
 800e6da:	f003 0301 	and.w	r3, r3, #1
 800e6de:	2b00      	cmp	r3, #0
 800e6e0:	d002      	beq.n	800e6e8 <DispChar10x14+0x1d8>
 800e6e2:	4b1b      	ldr	r3, [pc, #108]	; (800e750 <DispChar10x14+0x240>)
 800e6e4:	881b      	ldrh	r3, [r3, #0]
 800e6e6:	e001      	b.n	800e6ec <DispChar10x14+0x1dc>
 800e6e8:	4b18      	ldr	r3, [pc, #96]	; (800e74c <DispChar10x14+0x23c>)
 800e6ea:	881b      	ldrh	r3, [r3, #0]
 800e6ec:	4618      	mov	r0, r3
 800e6ee:	f003 f969 	bl	80119c4 <LCD_Set_Pixel>
        k >>= 1;
 800e6f2:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800e6f6:	105b      	asrs	r3, r3, #1
 800e6f8:	817b      	strh	r3, [r7, #10]
      for(j=0; j<14; ++j){
 800e6fa:	89bb      	ldrh	r3, [r7, #12]
 800e6fc:	3301      	adds	r3, #1
 800e6fe:	b29b      	uxth	r3, r3
 800e700:	81bb      	strh	r3, [r7, #12]
 800e702:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800e706:	2b0d      	cmp	r3, #13
 800e708:	ddd3      	ble.n	800e6b2 <DispChar10x14+0x1a2>
      }
    }
    Sx++;
 800e70a:	4b0e      	ldr	r3, [pc, #56]	; (800e744 <DispChar10x14+0x234>)
 800e70c:	f9b3 3000 	ldrsh.w	r3, [r3]
 800e710:	b29b      	uxth	r3, r3
 800e712:	3301      	adds	r3, #1
 800e714:	b29b      	uxth	r3, r3
 800e716:	b21a      	sxth	r2, r3
 800e718:	4b0a      	ldr	r3, [pc, #40]	; (800e744 <DispChar10x14+0x234>)
 800e71a:	801a      	strh	r2, [r3, #0]
  for(i=0; i<10; ++i)
 800e71c:	89fb      	ldrh	r3, [r7, #14]
 800e71e:	3301      	adds	r3, #1
 800e720:	b29b      	uxth	r3, r3
 800e722:	81fb      	strh	r3, [r7, #14]
 800e724:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800e728:	2b09      	cmp	r3, #9
 800e72a:	f77f aefc 	ble.w	800e526 <DispChar10x14+0x16>
  }
}
 800e72e:	bf00      	nop
 800e730:	bf00      	nop
 800e732:	3710      	adds	r7, #16
 800e734:	46bd      	mov	sp, r7
 800e736:	bd80      	pop	{r7, pc}
 800e738:	08001994 	.word	0x08001994
 800e73c:	08001a34 	.word	0x08001a34
 800e740:	ffffaaaa 	.word	0xffffaaaa
 800e744:	20000784 	.word	0x20000784
 800e748:	20000786 	.word	0x20000786
 800e74c:	200023fe 	.word	0x200023fe
 800e750:	200023fc 	.word	0x200023fc

0800e754 <NotePixel>:

/*******************************************************************************
 NotePixel: ��������������     Color: ������ɫ(1/0)  ���ض�λ: Nx, Ny
*******************************************************************************/
void NotePixel(char Color)
{
 800e754:	b480      	push	{r7}
 800e756:	b085      	sub	sp, #20
 800e758:	af00      	add	r7, sp, #0
 800e75a:	4603      	mov	r3, r0
 800e75c:	71fb      	strb	r3, [r7, #7]
  short i, j, *pBuf = (short*)&WaveBuf[300 + 300 + 300];
 800e75e:	4b42      	ldr	r3, [pc, #264]	; (800e868 <NotePixel+0x114>)
 800e760:	60fb      	str	r3, [r7, #12]

  Nx = Nx%ParamTab[WXx1];
 800e762:	4b42      	ldr	r3, [pc, #264]	; (800e86c <NotePixel+0x118>)
 800e764:	f9b3 3000 	ldrsh.w	r3, [r3]
 800e768:	4a41      	ldr	r2, [pc, #260]	; (800e870 <NotePixel+0x11c>)
 800e76a:	f9b2 2046 	ldrsh.w	r2, [r2, #70]	; 0x46
 800e76e:	fb93 f1f2 	sdiv	r1, r3, r2
 800e772:	fb02 f201 	mul.w	r2, r2, r1
 800e776:	1a9b      	subs	r3, r3, r2
 800e778:	b21a      	sxth	r2, r3
 800e77a:	4b3c      	ldr	r3, [pc, #240]	; (800e86c <NotePixel+0x118>)
 800e77c:	801a      	strh	r2, [r3, #0]
  Ny = Ny%ParamTab[HYx2];             // Nx, Ny �����򷵻����
 800e77e:	4b3d      	ldr	r3, [pc, #244]	; (800e874 <NotePixel+0x120>)
 800e780:	f9b3 3000 	ldrsh.w	r3, [r3]
 800e784:	4a3a      	ldr	r2, [pc, #232]	; (800e870 <NotePixel+0x11c>)
 800e786:	f9b2 204a 	ldrsh.w	r2, [r2, #74]	; 0x4a
 800e78a:	fb93 f1f2 	sdiv	r1, r3, r2
 800e78e:	fb02 f201 	mul.w	r2, r2, r1
 800e792:	1a9b      	subs	r3, r3, r2
 800e794:	b21a      	sxth	r2, r3
 800e796:	4b37      	ldr	r3, [pc, #220]	; (800e874 <NotePixel+0x120>)
 800e798:	801a      	strh	r2, [r3, #0]
  i  = Nx*(ParamTab[HYx2]/32)+ Ny/16;
 800e79a:	4b35      	ldr	r3, [pc, #212]	; (800e870 <NotePixel+0x11c>)
 800e79c:	f9b3 304a 	ldrsh.w	r3, [r3, #74]	; 0x4a
 800e7a0:	2b00      	cmp	r3, #0
 800e7a2:	da00      	bge.n	800e7a6 <NotePixel+0x52>
 800e7a4:	331f      	adds	r3, #31
 800e7a6:	115b      	asrs	r3, r3, #5
 800e7a8:	b21b      	sxth	r3, r3
 800e7aa:	b29a      	uxth	r2, r3
 800e7ac:	4b2f      	ldr	r3, [pc, #188]	; (800e86c <NotePixel+0x118>)
 800e7ae:	f9b3 3000 	ldrsh.w	r3, [r3]
 800e7b2:	b29b      	uxth	r3, r3
 800e7b4:	fb12 f303 	smulbb	r3, r2, r3
 800e7b8:	b29a      	uxth	r2, r3
 800e7ba:	4b2e      	ldr	r3, [pc, #184]	; (800e874 <NotePixel+0x120>)
 800e7bc:	f9b3 3000 	ldrsh.w	r3, [r3]
 800e7c0:	2b00      	cmp	r3, #0
 800e7c2:	da00      	bge.n	800e7c6 <NotePixel+0x72>
 800e7c4:	330f      	adds	r3, #15
 800e7c6:	111b      	asrs	r3, r3, #4
 800e7c8:	b21b      	sxth	r3, r3
 800e7ca:	b29b      	uxth	r3, r3
 800e7cc:	4413      	add	r3, r2
 800e7ce:	b29b      	uxth	r3, r3
 800e7d0:	817b      	strh	r3, [r7, #10]
  j  = Ny%16;
 800e7d2:	4b28      	ldr	r3, [pc, #160]	; (800e874 <NotePixel+0x120>)
 800e7d4:	f9b3 3000 	ldrsh.w	r3, [r3]
 800e7d8:	425a      	negs	r2, r3
 800e7da:	f003 030f 	and.w	r3, r3, #15
 800e7de:	f002 020f 	and.w	r2, r2, #15
 800e7e2:	bf58      	it	pl
 800e7e4:	4253      	negpl	r3, r2
 800e7e6:	813b      	strh	r3, [r7, #8]
  if(Color) pBuf[i] |=  1 << j;
 800e7e8:	79fb      	ldrb	r3, [r7, #7]
 800e7ea:	2b00      	cmp	r3, #0
 800e7ec:	d015      	beq.n	800e81a <NotePixel+0xc6>
 800e7ee:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800e7f2:	005b      	lsls	r3, r3, #1
 800e7f4:	68fa      	ldr	r2, [r7, #12]
 800e7f6:	4413      	add	r3, r2
 800e7f8:	f9b3 1000 	ldrsh.w	r1, [r3]
 800e7fc:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 800e800:	2201      	movs	r2, #1
 800e802:	fa02 f303 	lsl.w	r3, r2, r3
 800e806:	b21a      	sxth	r2, r3
 800e808:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800e80c:	005b      	lsls	r3, r3, #1
 800e80e:	68f8      	ldr	r0, [r7, #12]
 800e810:	4403      	add	r3, r0
 800e812:	430a      	orrs	r2, r1
 800e814:	b212      	sxth	r2, r2
 800e816:	801a      	strh	r2, [r3, #0]
 800e818:	e016      	b.n	800e848 <NotePixel+0xf4>
  else      pBuf[i] &=~(1 << j);
 800e81a:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800e81e:	005b      	lsls	r3, r3, #1
 800e820:	68fa      	ldr	r2, [r7, #12]
 800e822:	4413      	add	r3, r2
 800e824:	f9b3 1000 	ldrsh.w	r1, [r3]
 800e828:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 800e82c:	2201      	movs	r2, #1
 800e82e:	fa02 f303 	lsl.w	r3, r2, r3
 800e832:	b21b      	sxth	r3, r3
 800e834:	43db      	mvns	r3, r3
 800e836:	b21a      	sxth	r2, r3
 800e838:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800e83c:	005b      	lsls	r3, r3, #1
 800e83e:	68f8      	ldr	r0, [r7, #12]
 800e840:	4403      	add	r3, r0
 800e842:	400a      	ands	r2, r1
 800e844:	b212      	sxth	r2, r2
 800e846:	801a      	strh	r2, [r3, #0]
  Ny++;
 800e848:	4b0a      	ldr	r3, [pc, #40]	; (800e874 <NotePixel+0x120>)
 800e84a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800e84e:	b29b      	uxth	r3, r3
 800e850:	3301      	adds	r3, #1
 800e852:	b29b      	uxth	r3, r3
 800e854:	b21a      	sxth	r2, r3
 800e856:	4b07      	ldr	r3, [pc, #28]	; (800e874 <NotePixel+0x120>)
 800e858:	801a      	strh	r2, [r3, #0]
}
 800e85a:	bf00      	nop
 800e85c:	3714      	adds	r7, #20
 800e85e:	46bd      	mov	sp, r7
 800e860:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e864:	4770      	bx	lr
 800e866:	bf00      	nop
 800e868:	20001dbc 	.word	0x20001dbc
 800e86c:	20000002 	.word	0x20000002
 800e870:	20000140 	.word	0x20000140
 800e874:	20000004 	.word	0x20000004

0800e878 <Buil_Pop>:

/*******************************************************************************
  Bull_Pop: ������������ݼ���������   �������: Nx, Ny, Wx, Hy
*******************************************************************************/
void Buil_Pop(void)
{
 800e878:	b580      	push	{r7, lr}
 800e87a:	b082      	sub	sp, #8
 800e87c:	af00      	add	r7, sp, #0
  short i;
  memset(&WaveBuf[TRACK1_SIZE+TRACK2_SIZE+TRACK23_SIZE], BLK, POP_SIZE);
 800e87e:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800e882:	2100      	movs	r1, #0
 800e884:	487f      	ldr	r0, [pc, #508]	; (800ea84 <Buil_Pop+0x20c>)
 800e886:	f017 f971 	bl	8025b6c <memset>
  Nx = 0; Ny = 3; for(i=0; i<ParamTab[HYx2]/2-6; i++) NotePixel(1);
 800e88a:	4b7f      	ldr	r3, [pc, #508]	; (800ea88 <Buil_Pop+0x210>)
 800e88c:	2200      	movs	r2, #0
 800e88e:	801a      	strh	r2, [r3, #0]
 800e890:	4b7e      	ldr	r3, [pc, #504]	; (800ea8c <Buil_Pop+0x214>)
 800e892:	2203      	movs	r2, #3
 800e894:	801a      	strh	r2, [r3, #0]
 800e896:	2300      	movs	r3, #0
 800e898:	80fb      	strh	r3, [r7, #6]
 800e89a:	e008      	b.n	800e8ae <Buil_Pop+0x36>
 800e89c:	2001      	movs	r0, #1
 800e89e:	f7ff ff59 	bl	800e754 <NotePixel>
 800e8a2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800e8a6:	b29b      	uxth	r3, r3
 800e8a8:	3301      	adds	r3, #1
 800e8aa:	b29b      	uxth	r3, r3
 800e8ac:	80fb      	strh	r3, [r7, #6]
 800e8ae:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800e8b2:	4b77      	ldr	r3, [pc, #476]	; (800ea90 <Buil_Pop+0x218>)
 800e8b4:	f9b3 304a 	ldrsh.w	r3, [r3, #74]	; 0x4a
 800e8b8:	0fd9      	lsrs	r1, r3, #31
 800e8ba:	440b      	add	r3, r1
 800e8bc:	105b      	asrs	r3, r3, #1
 800e8be:	b21b      	sxth	r3, r3
 800e8c0:	3b06      	subs	r3, #6
 800e8c2:	429a      	cmp	r2, r3
 800e8c4:	dbea      	blt.n	800e89c <Buil_Pop+0x24>
  Nx = 1; Ny = 2;                    NotePixel(1);
 800e8c6:	4b70      	ldr	r3, [pc, #448]	; (800ea88 <Buil_Pop+0x210>)
 800e8c8:	2201      	movs	r2, #1
 800e8ca:	801a      	strh	r2, [r3, #0]
 800e8cc:	4b6f      	ldr	r3, [pc, #444]	; (800ea8c <Buil_Pop+0x214>)
 800e8ce:	2202      	movs	r2, #2
 800e8d0:	801a      	strh	r2, [r3, #0]
 800e8d2:	2001      	movs	r0, #1
 800e8d4:	f7ff ff3e 	bl	800e754 <NotePixel>
  Nx = 1; Ny = ParamTab[HYx2]/2 - 3; NotePixel(1);
 800e8d8:	4b6b      	ldr	r3, [pc, #428]	; (800ea88 <Buil_Pop+0x210>)
 800e8da:	2201      	movs	r2, #1
 800e8dc:	801a      	strh	r2, [r3, #0]
 800e8de:	4b6c      	ldr	r3, [pc, #432]	; (800ea90 <Buil_Pop+0x218>)
 800e8e0:	f9b3 304a 	ldrsh.w	r3, [r3, #74]	; 0x4a
 800e8e4:	0fda      	lsrs	r2, r3, #31
 800e8e6:	4413      	add	r3, r2
 800e8e8:	105b      	asrs	r3, r3, #1
 800e8ea:	b21b      	sxth	r3, r3
 800e8ec:	b29b      	uxth	r3, r3
 800e8ee:	3b03      	subs	r3, #3
 800e8f0:	b29b      	uxth	r3, r3
 800e8f2:	b21a      	sxth	r2, r3
 800e8f4:	4b65      	ldr	r3, [pc, #404]	; (800ea8c <Buil_Pop+0x214>)
 800e8f6:	801a      	strh	r2, [r3, #0]
 800e8f8:	2001      	movs	r0, #1
 800e8fa:	f7ff ff2b 	bl	800e754 <NotePixel>
  Nx = 2; Ny = 1;                    NotePixel(1);
 800e8fe:	4b62      	ldr	r3, [pc, #392]	; (800ea88 <Buil_Pop+0x210>)
 800e900:	2202      	movs	r2, #2
 800e902:	801a      	strh	r2, [r3, #0]
 800e904:	4b61      	ldr	r3, [pc, #388]	; (800ea8c <Buil_Pop+0x214>)
 800e906:	2201      	movs	r2, #1
 800e908:	801a      	strh	r2, [r3, #0]
 800e90a:	2001      	movs	r0, #1
 800e90c:	f7ff ff22 	bl	800e754 <NotePixel>
  Nx = 2; Ny = ParamTab[HYx2]/2 - 2; NotePixel(1);
 800e910:	4b5d      	ldr	r3, [pc, #372]	; (800ea88 <Buil_Pop+0x210>)
 800e912:	2202      	movs	r2, #2
 800e914:	801a      	strh	r2, [r3, #0]
 800e916:	4b5e      	ldr	r3, [pc, #376]	; (800ea90 <Buil_Pop+0x218>)
 800e918:	f9b3 304a 	ldrsh.w	r3, [r3, #74]	; 0x4a
 800e91c:	0fda      	lsrs	r2, r3, #31
 800e91e:	4413      	add	r3, r2
 800e920:	105b      	asrs	r3, r3, #1
 800e922:	b21b      	sxth	r3, r3
 800e924:	b29b      	uxth	r3, r3
 800e926:	3b02      	subs	r3, #2
 800e928:	b29b      	uxth	r3, r3
 800e92a:	b21a      	sxth	r2, r3
 800e92c:	4b57      	ldr	r3, [pc, #348]	; (800ea8c <Buil_Pop+0x214>)
 800e92e:	801a      	strh	r2, [r3, #0]
 800e930:	2001      	movs	r0, #1
 800e932:	f7ff ff0f 	bl	800e754 <NotePixel>
  for(Nx=3; Nx<ParamTab[WXx1]-2; Nx++)
 800e936:	4b54      	ldr	r3, [pc, #336]	; (800ea88 <Buil_Pop+0x210>)
 800e938:	2203      	movs	r2, #3
 800e93a:	801a      	strh	r2, [r3, #0]
 800e93c:	e01e      	b.n	800e97c <Buil_Pop+0x104>
  {
    Ny = 0;                     NotePixel(1);
 800e93e:	4b53      	ldr	r3, [pc, #332]	; (800ea8c <Buil_Pop+0x214>)
 800e940:	2200      	movs	r2, #0
 800e942:	801a      	strh	r2, [r3, #0]
 800e944:	2001      	movs	r0, #1
 800e946:	f7ff ff05 	bl	800e754 <NotePixel>
    Ny = ParamTab[HYx2]/2 - 1;; NotePixel(1);
 800e94a:	4b51      	ldr	r3, [pc, #324]	; (800ea90 <Buil_Pop+0x218>)
 800e94c:	f9b3 304a 	ldrsh.w	r3, [r3, #74]	; 0x4a
 800e950:	0fda      	lsrs	r2, r3, #31
 800e952:	4413      	add	r3, r2
 800e954:	105b      	asrs	r3, r3, #1
 800e956:	b21b      	sxth	r3, r3
 800e958:	b29b      	uxth	r3, r3
 800e95a:	3b01      	subs	r3, #1
 800e95c:	b29b      	uxth	r3, r3
 800e95e:	b21a      	sxth	r2, r3
 800e960:	4b4a      	ldr	r3, [pc, #296]	; (800ea8c <Buil_Pop+0x214>)
 800e962:	801a      	strh	r2, [r3, #0]
 800e964:	2001      	movs	r0, #1
 800e966:	f7ff fef5 	bl	800e754 <NotePixel>
  for(Nx=3; Nx<ParamTab[WXx1]-2; Nx++)
 800e96a:	4b47      	ldr	r3, [pc, #284]	; (800ea88 <Buil_Pop+0x210>)
 800e96c:	f9b3 3000 	ldrsh.w	r3, [r3]
 800e970:	b29b      	uxth	r3, r3
 800e972:	3301      	adds	r3, #1
 800e974:	b29b      	uxth	r3, r3
 800e976:	b21a      	sxth	r2, r3
 800e978:	4b43      	ldr	r3, [pc, #268]	; (800ea88 <Buil_Pop+0x210>)
 800e97a:	801a      	strh	r2, [r3, #0]
 800e97c:	4b42      	ldr	r3, [pc, #264]	; (800ea88 <Buil_Pop+0x210>)
 800e97e:	f9b3 3000 	ldrsh.w	r3, [r3]
 800e982:	461a      	mov	r2, r3
 800e984:	4b42      	ldr	r3, [pc, #264]	; (800ea90 <Buil_Pop+0x218>)
 800e986:	f9b3 3046 	ldrsh.w	r3, [r3, #70]	; 0x46
 800e98a:	3b02      	subs	r3, #2
 800e98c:	429a      	cmp	r2, r3
 800e98e:	dbd6      	blt.n	800e93e <Buil_Pop+0xc6>
  }
  Nx = ParamTab[WXx1]-3; Ny = 1;                    NotePixel(1);
 800e990:	4b3f      	ldr	r3, [pc, #252]	; (800ea90 <Buil_Pop+0x218>)
 800e992:	f9b3 3046 	ldrsh.w	r3, [r3, #70]	; 0x46
 800e996:	b29b      	uxth	r3, r3
 800e998:	3b03      	subs	r3, #3
 800e99a:	b29b      	uxth	r3, r3
 800e99c:	b21a      	sxth	r2, r3
 800e99e:	4b3a      	ldr	r3, [pc, #232]	; (800ea88 <Buil_Pop+0x210>)
 800e9a0:	801a      	strh	r2, [r3, #0]
 800e9a2:	4b3a      	ldr	r3, [pc, #232]	; (800ea8c <Buil_Pop+0x214>)
 800e9a4:	2201      	movs	r2, #1
 800e9a6:	801a      	strh	r2, [r3, #0]
 800e9a8:	2001      	movs	r0, #1
 800e9aa:	f7ff fed3 	bl	800e754 <NotePixel>
  Nx = ParamTab[WXx1]-3; Ny = ParamTab[HYx2]/2 - 2; NotePixel(1);
 800e9ae:	4b38      	ldr	r3, [pc, #224]	; (800ea90 <Buil_Pop+0x218>)
 800e9b0:	f9b3 3046 	ldrsh.w	r3, [r3, #70]	; 0x46
 800e9b4:	b29b      	uxth	r3, r3
 800e9b6:	3b03      	subs	r3, #3
 800e9b8:	b29b      	uxth	r3, r3
 800e9ba:	b21a      	sxth	r2, r3
 800e9bc:	4b32      	ldr	r3, [pc, #200]	; (800ea88 <Buil_Pop+0x210>)
 800e9be:	801a      	strh	r2, [r3, #0]
 800e9c0:	4b33      	ldr	r3, [pc, #204]	; (800ea90 <Buil_Pop+0x218>)
 800e9c2:	f9b3 304a 	ldrsh.w	r3, [r3, #74]	; 0x4a
 800e9c6:	0fda      	lsrs	r2, r3, #31
 800e9c8:	4413      	add	r3, r2
 800e9ca:	105b      	asrs	r3, r3, #1
 800e9cc:	b21b      	sxth	r3, r3
 800e9ce:	b29b      	uxth	r3, r3
 800e9d0:	3b02      	subs	r3, #2
 800e9d2:	b29b      	uxth	r3, r3
 800e9d4:	b21a      	sxth	r2, r3
 800e9d6:	4b2d      	ldr	r3, [pc, #180]	; (800ea8c <Buil_Pop+0x214>)
 800e9d8:	801a      	strh	r2, [r3, #0]
 800e9da:	2001      	movs	r0, #1
 800e9dc:	f7ff feba 	bl	800e754 <NotePixel>
  Nx = ParamTab[WXx1]-2; Ny = 2;                    NotePixel(1);
 800e9e0:	4b2b      	ldr	r3, [pc, #172]	; (800ea90 <Buil_Pop+0x218>)
 800e9e2:	f9b3 3046 	ldrsh.w	r3, [r3, #70]	; 0x46
 800e9e6:	b29b      	uxth	r3, r3
 800e9e8:	3b02      	subs	r3, #2
 800e9ea:	b29b      	uxth	r3, r3
 800e9ec:	b21a      	sxth	r2, r3
 800e9ee:	4b26      	ldr	r3, [pc, #152]	; (800ea88 <Buil_Pop+0x210>)
 800e9f0:	801a      	strh	r2, [r3, #0]
 800e9f2:	4b26      	ldr	r3, [pc, #152]	; (800ea8c <Buil_Pop+0x214>)
 800e9f4:	2202      	movs	r2, #2
 800e9f6:	801a      	strh	r2, [r3, #0]
 800e9f8:	2001      	movs	r0, #1
 800e9fa:	f7ff feab 	bl	800e754 <NotePixel>
  Nx = ParamTab[WXx1]-2; Ny = ParamTab[HYx2]/2 - 3; NotePixel(1);
 800e9fe:	4b24      	ldr	r3, [pc, #144]	; (800ea90 <Buil_Pop+0x218>)
 800ea00:	f9b3 3046 	ldrsh.w	r3, [r3, #70]	; 0x46
 800ea04:	b29b      	uxth	r3, r3
 800ea06:	3b02      	subs	r3, #2
 800ea08:	b29b      	uxth	r3, r3
 800ea0a:	b21a      	sxth	r2, r3
 800ea0c:	4b1e      	ldr	r3, [pc, #120]	; (800ea88 <Buil_Pop+0x210>)
 800ea0e:	801a      	strh	r2, [r3, #0]
 800ea10:	4b1f      	ldr	r3, [pc, #124]	; (800ea90 <Buil_Pop+0x218>)
 800ea12:	f9b3 304a 	ldrsh.w	r3, [r3, #74]	; 0x4a
 800ea16:	0fda      	lsrs	r2, r3, #31
 800ea18:	4413      	add	r3, r2
 800ea1a:	105b      	asrs	r3, r3, #1
 800ea1c:	b21b      	sxth	r3, r3
 800ea1e:	b29b      	uxth	r3, r3
 800ea20:	3b03      	subs	r3, #3
 800ea22:	b29b      	uxth	r3, r3
 800ea24:	b21a      	sxth	r2, r3
 800ea26:	4b19      	ldr	r3, [pc, #100]	; (800ea8c <Buil_Pop+0x214>)
 800ea28:	801a      	strh	r2, [r3, #0]
 800ea2a:	2001      	movs	r0, #1
 800ea2c:	f7ff fe92 	bl	800e754 <NotePixel>
  Nx = ParamTab[WXx1]-1; Ny = 3; for(i=0; i<ParamTab[HYx2]/2-6; i++) NotePixel(1);
 800ea30:	4b17      	ldr	r3, [pc, #92]	; (800ea90 <Buil_Pop+0x218>)
 800ea32:	f9b3 3046 	ldrsh.w	r3, [r3, #70]	; 0x46
 800ea36:	b29b      	uxth	r3, r3
 800ea38:	3b01      	subs	r3, #1
 800ea3a:	b29b      	uxth	r3, r3
 800ea3c:	b21a      	sxth	r2, r3
 800ea3e:	4b12      	ldr	r3, [pc, #72]	; (800ea88 <Buil_Pop+0x210>)
 800ea40:	801a      	strh	r2, [r3, #0]
 800ea42:	4b12      	ldr	r3, [pc, #72]	; (800ea8c <Buil_Pop+0x214>)
 800ea44:	2203      	movs	r2, #3
 800ea46:	801a      	strh	r2, [r3, #0]
 800ea48:	2300      	movs	r3, #0
 800ea4a:	80fb      	strh	r3, [r7, #6]
 800ea4c:	e008      	b.n	800ea60 <Buil_Pop+0x1e8>
 800ea4e:	2001      	movs	r0, #1
 800ea50:	f7ff fe80 	bl	800e754 <NotePixel>
 800ea54:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800ea58:	b29b      	uxth	r3, r3
 800ea5a:	3301      	adds	r3, #1
 800ea5c:	b29b      	uxth	r3, r3
 800ea5e:	80fb      	strh	r3, [r7, #6]
 800ea60:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800ea64:	4b0a      	ldr	r3, [pc, #40]	; (800ea90 <Buil_Pop+0x218>)
 800ea66:	f9b3 304a 	ldrsh.w	r3, [r3, #74]	; 0x4a
 800ea6a:	0fd9      	lsrs	r1, r3, #31
 800ea6c:	440b      	add	r3, r1
 800ea6e:	105b      	asrs	r3, r3, #1
 800ea70:	b21b      	sxth	r3, r3
 800ea72:	3b06      	subs	r3, #6
 800ea74:	429a      	cmp	r2, r3
 800ea76:	dbea      	blt.n	800ea4e <Buil_Pop+0x1d6>
}
 800ea78:	bf00      	nop
 800ea7a:	bf00      	nop
 800ea7c:	3708      	adds	r7, #8
 800ea7e:	46bd      	mov	sp, r7
 800ea80:	bd80      	pop	{r7, pc}
 800ea82:	bf00      	nop
 800ea84:	20001dbc 	.word	0x20001dbc
 800ea88:	20000002 	.word	0x20000002
 800ea8c:	20000004 	.word	0x20000004
 800ea90:	20000140 	.word	0x20000140

0800ea94 <PopColor>:

/*******************************************************************************
 PopColor: ��������ɫ����
*******************************************************************************/
void PopColor(unsigned short Board_Color, unsigned short Text_Color)
{
 800ea94:	b480      	push	{r7}
 800ea96:	b083      	sub	sp, #12
 800ea98:	af00      	add	r7, sp, #0
 800ea9a:	4603      	mov	r3, r0
 800ea9c:	460a      	mov	r2, r1
 800ea9e:	80fb      	strh	r3, [r7, #6]
 800eaa0:	4613      	mov	r3, r2
 800eaa2:	80bb      	strh	r3, [r7, #4]
  ParamTab[POP_B] = Board_Color;
 800eaa4:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800eaa8:	4b06      	ldr	r3, [pc, #24]	; (800eac4 <PopColor+0x30>)
 800eaaa:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  ParamTab[POP_T] = Text_Color;
 800eaae:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 800eab2:	4b04      	ldr	r3, [pc, #16]	; (800eac4 <PopColor+0x30>)
 800eab4:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
}
 800eab8:	bf00      	nop
 800eaba:	370c      	adds	r7, #12
 800eabc:	46bd      	mov	sp, r7
 800eabe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eac2:	4770      	bx	lr
 800eac4:	20000140 	.word	0x20000140

0800eac8 <Close_Pop>:

/*******************************************************************************
  Close_Pop: �رղ˵������Ự��
*******************************************************************************/
void Close_Pop(void)
{
 800eac8:	b480      	push	{r7}
 800eaca:	af00      	add	r7, sp, #0
  PopType &= ~(LIST_POP | DAILOG_POP);
 800eacc:	4b07      	ldr	r3, [pc, #28]	; (800eaec <Close_Pop+0x24>)
 800eace:	781b      	ldrb	r3, [r3, #0]
 800ead0:	f023 0306 	bic.w	r3, r3, #6
 800ead4:	b2da      	uxtb	r2, r3
 800ead6:	4b05      	ldr	r3, [pc, #20]	; (800eaec <Close_Pop+0x24>)
 800ead8:	701a      	strb	r2, [r3, #0]
  ParamTab[POP_F] = P_HID;
 800eada:	4b05      	ldr	r3, [pc, #20]	; (800eaf0 <Close_Pop+0x28>)
 800eadc:	2201      	movs	r2, #1
 800eade:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
}
 800eae2:	bf00      	nop
 800eae4:	46bd      	mov	sp, r7
 800eae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eaea:	4770      	bx	lr
 800eaec:	20000788 	.word	0x20000788
 800eaf0:	20000140 	.word	0x20000140

0800eaf4 <List_Pop>:

/*******************************************************************************
  List_Pop: �򿪲˵���
*******************************************************************************/
void List_Pop(void)
{
 800eaf4:	b480      	push	{r7}
 800eaf6:	af00      	add	r7, sp, #0
  PopType |= LIST_POP;
 800eaf8:	4b07      	ldr	r3, [pc, #28]	; (800eb18 <List_Pop+0x24>)
 800eafa:	781b      	ldrb	r3, [r3, #0]
 800eafc:	f043 0302 	orr.w	r3, r3, #2
 800eb00:	b2da      	uxtb	r2, r3
 800eb02:	4b05      	ldr	r3, [pc, #20]	; (800eb18 <List_Pop+0x24>)
 800eb04:	701a      	strb	r2, [r3, #0]
  ParamTab[POP_F] = SHOW;
 800eb06:	4b05      	ldr	r3, [pc, #20]	; (800eb1c <List_Pop+0x28>)
 800eb08:	2200      	movs	r2, #0
 800eb0a:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
}
 800eb0e:	bf00      	nop
 800eb10:	46bd      	mov	sp, r7
 800eb12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb16:	4770      	bx	lr
 800eb18:	20000788 	.word	0x20000788
 800eb1c:	20000140 	.word	0x20000140

0800eb20 <Dialog_Pop>:

/*******************************************************************************
  Dialog_Pop: �����Ự��
*******************************************************************************/
void Dialog_Pop(char* Str)
{
 800eb20:	b580      	push	{r7, lr}
 800eb22:	b084      	sub	sp, #16
 800eb24:	af02      	add	r7, sp, #8
 800eb26:	6078      	str	r0, [r7, #4]
  PopType |= DAILOG_POP;
 800eb28:	4b2a      	ldr	r3, [pc, #168]	; (800ebd4 <Dialog_Pop+0xb4>)
 800eb2a:	781b      	ldrb	r3, [r3, #0]
 800eb2c:	f043 0304 	orr.w	r3, r3, #4
 800eb30:	b2da      	uxtb	r2, r3
 800eb32:	4b28      	ldr	r3, [pc, #160]	; (800ebd4 <Dialog_Pop+0xb4>)
 800eb34:	701a      	strb	r2, [r3, #0]
  ParamTab[WXx1]= 16*8;
 800eb36:	4b28      	ldr	r3, [pc, #160]	; (800ebd8 <Dialog_Pop+0xb8>)
 800eb38:	2280      	movs	r2, #128	; 0x80
 800eb3a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  ParamTab[HYx2]= 2*3*16;
 800eb3e:	4b26      	ldr	r3, [pc, #152]	; (800ebd8 <Dialog_Pop+0xb8>)
 800eb40:	2260      	movs	r2, #96	; 0x60
 800eb42:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
  ParamTab[BXx1]= 80;
 800eb46:	4b24      	ldr	r3, [pc, #144]	; (800ebd8 <Dialog_Pop+0xb8>)
 800eb48:	2250      	movs	r2, #80	; 0x50
 800eb4a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  ParamTab[BYx2]= 200;
 800eb4e:	4b22      	ldr	r3, [pc, #136]	; (800ebd8 <Dialog_Pop+0xb8>)
 800eb50:	22c8      	movs	r2, #200	; 0xc8
 800eb52:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
  PopColor(WHT, DAR);
 800eb56:	f643 11e7 	movw	r1, #14823	; 0x39e7
 800eb5a:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800eb5e:	f7ff ff99 	bl	800ea94 <PopColor>
  Buil_Pop();
 800eb62:	f7ff fe89 	bl	800e878 <Buil_Pop>
  NoteSTR( 1*8, 28, PRN, Str);
 800eb66:	687b      	ldr	r3, [r7, #4]
 800eb68:	2200      	movs	r2, #0
 800eb6a:	211c      	movs	r1, #28
 800eb6c:	2008      	movs	r0, #8
 800eb6e:	f000 f8e1 	bl	800ed34 <NoteSTR>
  NoteSTR( 2*6, 8, SYMB+INV,  "{|");
 800eb72:	4b1a      	ldr	r3, [pc, #104]	; (800ebdc <Dialog_Pop+0xbc>)
 800eb74:	2211      	movs	r2, #17
 800eb76:	2108      	movs	r1, #8
 800eb78:	200c      	movs	r0, #12
 800eb7a:	f000 f8db 	bl	800ed34 <NoteSTR>
  Note_4Point(PRN, 2*6, 8, 2, 10);
 800eb7e:	230a      	movs	r3, #10
 800eb80:	9300      	str	r3, [sp, #0]
 800eb82:	2302      	movs	r3, #2
 800eb84:	2208      	movs	r2, #8
 800eb86:	210c      	movs	r1, #12
 800eb88:	2000      	movs	r0, #0
 800eb8a:	f000 f979 	bl	800ee80 <Note_4Point>
  NoteSTR( 4*6, 8, PRN,  ": Yes");
 800eb8e:	4b14      	ldr	r3, [pc, #80]	; (800ebe0 <Dialog_Pop+0xc0>)
 800eb90:	2200      	movs	r2, #0
 800eb92:	2108      	movs	r1, #8
 800eb94:	2018      	movs	r0, #24
 800eb96:	f000 f8cd 	bl	800ed34 <NoteSTR>
  NoteSTR(12*6, 8, SYMB+INV,  "yz");
 800eb9a:	4b12      	ldr	r3, [pc, #72]	; (800ebe4 <Dialog_Pop+0xc4>)
 800eb9c:	2211      	movs	r2, #17
 800eb9e:	2108      	movs	r1, #8
 800eba0:	2048      	movs	r0, #72	; 0x48
 800eba2:	f000 f8c7 	bl	800ed34 <NoteSTR>
  Note_4Point(PRN, 12*6, 8, 2, 10);
 800eba6:	230a      	movs	r3, #10
 800eba8:	9300      	str	r3, [sp, #0]
 800ebaa:	2302      	movs	r3, #2
 800ebac:	2208      	movs	r2, #8
 800ebae:	2148      	movs	r1, #72	; 0x48
 800ebb0:	2000      	movs	r0, #0
 800ebb2:	f000 f965 	bl	800ee80 <Note_4Point>
  NoteSTR(14*6, 8, PRN,  ": No");
 800ebb6:	4b0c      	ldr	r3, [pc, #48]	; (800ebe8 <Dialog_Pop+0xc8>)
 800ebb8:	2200      	movs	r2, #0
 800ebba:	2108      	movs	r1, #8
 800ebbc:	2054      	movs	r0, #84	; 0x54
 800ebbe:	f000 f8b9 	bl	800ed34 <NoteSTR>
  ParamTab[POP_F] = SHOW;
 800ebc2:	4b05      	ldr	r3, [pc, #20]	; (800ebd8 <Dialog_Pop+0xb8>)
 800ebc4:	2200      	movs	r2, #0
 800ebc6:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
}
 800ebca:	bf00      	nop
 800ebcc:	3708      	adds	r7, #8
 800ebce:	46bd      	mov	sp, r7
 800ebd0:	bd80      	pop	{r7, pc}
 800ebd2:	bf00      	nop
 800ebd4:	20000788 	.word	0x20000788
 800ebd8:	20000140 	.word	0x20000140
 800ebdc:	080001c4 	.word	0x080001c4
 800ebe0:	080001c8 	.word	0x080001c8
 800ebe4:	080001d0 	.word	0x080001d0
 800ebe8:	080001d4 	.word	0x080001d4

0800ebec <Calibrate_Pop>:

/*******************************************************************************
  Calibrate_Pop: �����Ự��
*******************************************************************************/
void Calibrate_Pop(char* Str)
{
 800ebec:	b580      	push	{r7, lr}
 800ebee:	b082      	sub	sp, #8
 800ebf0:	af00      	add	r7, sp, #0
 800ebf2:	6078      	str	r0, [r7, #4]
  PopType |= DAILOG_POP;
 800ebf4:	4b16      	ldr	r3, [pc, #88]	; (800ec50 <Calibrate_Pop+0x64>)
 800ebf6:	781b      	ldrb	r3, [r3, #0]
 800ebf8:	f043 0304 	orr.w	r3, r3, #4
 800ebfc:	b2da      	uxtb	r2, r3
 800ebfe:	4b14      	ldr	r3, [pc, #80]	; (800ec50 <Calibrate_Pop+0x64>)
 800ec00:	701a      	strb	r2, [r3, #0]
  ParamTab[WXx1]= 25*8;
 800ec02:	4b14      	ldr	r3, [pc, #80]	; (800ec54 <Calibrate_Pop+0x68>)
 800ec04:	22c8      	movs	r2, #200	; 0xc8
 800ec06:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  ParamTab[HYx2]= 4*16;
 800ec0a:	4b12      	ldr	r3, [pc, #72]	; (800ec54 <Calibrate_Pop+0x68>)
 800ec0c:	2240      	movs	r2, #64	; 0x40
 800ec0e:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
  ParamTab[BXx1]= 50;
 800ec12:	4b10      	ldr	r3, [pc, #64]	; (800ec54 <Calibrate_Pop+0x68>)
 800ec14:	2232      	movs	r2, #50	; 0x32
 800ec16:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  ParamTab[BYx2]= 230;
 800ec1a:	4b0e      	ldr	r3, [pc, #56]	; (800ec54 <Calibrate_Pop+0x68>)
 800ec1c:	22e6      	movs	r2, #230	; 0xe6
 800ec1e:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
  PopColor(WHT, DAR);
 800ec22:	f643 11e7 	movw	r1, #14823	; 0x39e7
 800ec26:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800ec2a:	f7ff ff33 	bl	800ea94 <PopColor>
  Buil_Pop();
 800ec2e:	f7ff fe23 	bl	800e878 <Buil_Pop>
  NoteSTR( 2*8, 10, PRN, Str);
 800ec32:	687b      	ldr	r3, [r7, #4]
 800ec34:	2200      	movs	r2, #0
 800ec36:	210a      	movs	r1, #10
 800ec38:	2010      	movs	r0, #16
 800ec3a:	f000 f87b 	bl	800ed34 <NoteSTR>
  ParamTab[POP_F] = SHOW;
 800ec3e:	4b05      	ldr	r3, [pc, #20]	; (800ec54 <Calibrate_Pop+0x68>)
 800ec40:	2200      	movs	r2, #0
 800ec42:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
}
 800ec46:	bf00      	nop
 800ec48:	3708      	adds	r7, #8
 800ec4a:	46bd      	mov	sp, r7
 800ec4c:	bd80      	pop	{r7, pc}
 800ec4e:	bf00      	nop
 800ec50:	20000788 	.word	0x20000788
 800ec54:	20000140 	.word	0x20000140

0800ec58 <CalSave_Pop>:

/*******************************************************************************
  CalSaveg_Pop: �����Ự��
*******************************************************************************/
void CalSave_Pop(char* Str)
{
 800ec58:	b580      	push	{r7, lr}
 800ec5a:	b084      	sub	sp, #16
 800ec5c:	af02      	add	r7, sp, #8
 800ec5e:	6078      	str	r0, [r7, #4]
  PopType |= DAILOG_POP;
 800ec60:	4b2d      	ldr	r3, [pc, #180]	; (800ed18 <CalSave_Pop+0xc0>)
 800ec62:	781b      	ldrb	r3, [r3, #0]
 800ec64:	f043 0304 	orr.w	r3, r3, #4
 800ec68:	b2da      	uxtb	r2, r3
 800ec6a:	4b2b      	ldr	r3, [pc, #172]	; (800ed18 <CalSave_Pop+0xc0>)
 800ec6c:	701a      	strb	r2, [r3, #0]
  ParamTab[WXx1]= 13*16;
 800ec6e:	4b2b      	ldr	r3, [pc, #172]	; (800ed1c <CalSave_Pop+0xc4>)
 800ec70:	22d0      	movs	r2, #208	; 0xd0
 800ec72:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  ParamTab[HYx2]= 6*16;
 800ec76:	4b29      	ldr	r3, [pc, #164]	; (800ed1c <CalSave_Pop+0xc4>)
 800ec78:	2260      	movs	r2, #96	; 0x60
 800ec7a:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
  ParamTab[BXx1]= 30;
 800ec7e:	4b27      	ldr	r3, [pc, #156]	; (800ed1c <CalSave_Pop+0xc4>)
 800ec80:	221e      	movs	r2, #30
 800ec82:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  ParamTab[BYx2]= 200;
 800ec86:	4b25      	ldr	r3, [pc, #148]	; (800ed1c <CalSave_Pop+0xc4>)
 800ec88:	22c8      	movs	r2, #200	; 0xc8
 800ec8a:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
  PopColor(WHT, DAR);
 800ec8e:	f643 11e7 	movw	r1, #14823	; 0x39e7
 800ec92:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800ec96:	f7ff fefd 	bl	800ea94 <PopColor>
  Buil_Pop();
 800ec9a:	f7ff fded 	bl	800e878 <Buil_Pop>
  NoteSTR( 1*6, 28, PRN, "Complete Cal,");
 800ec9e:	4b20      	ldr	r3, [pc, #128]	; (800ed20 <CalSave_Pop+0xc8>)
 800eca0:	2200      	movs	r2, #0
 800eca2:	211c      	movs	r1, #28
 800eca4:	2006      	movs	r0, #6
 800eca6:	f000 f845 	bl	800ed34 <NoteSTR>
  NoteSTR( 15*6, 28, PRN, Str);
 800ecaa:	687b      	ldr	r3, [r7, #4]
 800ecac:	2200      	movs	r2, #0
 800ecae:	211c      	movs	r1, #28
 800ecb0:	205a      	movs	r0, #90	; 0x5a
 800ecb2:	f000 f83f 	bl	800ed34 <NoteSTR>
  NoteSTR( 5*6, 8, SYMB+INV,  "{|");
 800ecb6:	4b1b      	ldr	r3, [pc, #108]	; (800ed24 <CalSave_Pop+0xcc>)
 800ecb8:	2211      	movs	r2, #17
 800ecba:	2108      	movs	r1, #8
 800ecbc:	201e      	movs	r0, #30
 800ecbe:	f000 f839 	bl	800ed34 <NoteSTR>
  Note_4Point(PRN, 5*6, 8, 2, 10);
 800ecc2:	230a      	movs	r3, #10
 800ecc4:	9300      	str	r3, [sp, #0]
 800ecc6:	2302      	movs	r3, #2
 800ecc8:	2208      	movs	r2, #8
 800ecca:	211e      	movs	r1, #30
 800eccc:	2000      	movs	r0, #0
 800ecce:	f000 f8d7 	bl	800ee80 <Note_4Point>
  NoteSTR( 7*6, 8, PRN,  ": Yes");
 800ecd2:	4b15      	ldr	r3, [pc, #84]	; (800ed28 <CalSave_Pop+0xd0>)
 800ecd4:	2200      	movs	r2, #0
 800ecd6:	2108      	movs	r1, #8
 800ecd8:	202a      	movs	r0, #42	; 0x2a
 800ecda:	f000 f82b 	bl	800ed34 <NoteSTR>
  NoteSTR(20*6, 8, SYMB+INV,  "yz");
 800ecde:	4b13      	ldr	r3, [pc, #76]	; (800ed2c <CalSave_Pop+0xd4>)
 800ece0:	2211      	movs	r2, #17
 800ece2:	2108      	movs	r1, #8
 800ece4:	2078      	movs	r0, #120	; 0x78
 800ece6:	f000 f825 	bl	800ed34 <NoteSTR>
  Note_4Point(PRN, 20*6, 8, 2, 10);
 800ecea:	230a      	movs	r3, #10
 800ecec:	9300      	str	r3, [sp, #0]
 800ecee:	2302      	movs	r3, #2
 800ecf0:	2208      	movs	r2, #8
 800ecf2:	2178      	movs	r1, #120	; 0x78
 800ecf4:	2000      	movs	r0, #0
 800ecf6:	f000 f8c3 	bl	800ee80 <Note_4Point>
  NoteSTR(22*6, 8, PRN,  ": No");
 800ecfa:	4b0d      	ldr	r3, [pc, #52]	; (800ed30 <CalSave_Pop+0xd8>)
 800ecfc:	2200      	movs	r2, #0
 800ecfe:	2108      	movs	r1, #8
 800ed00:	2084      	movs	r0, #132	; 0x84
 800ed02:	f000 f817 	bl	800ed34 <NoteSTR>
  ParamTab[POP_F] = SHOW;
 800ed06:	4b05      	ldr	r3, [pc, #20]	; (800ed1c <CalSave_Pop+0xc4>)
 800ed08:	2200      	movs	r2, #0
 800ed0a:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
}
 800ed0e:	bf00      	nop
 800ed10:	3708      	adds	r7, #8
 800ed12:	46bd      	mov	sp, r7
 800ed14:	bd80      	pop	{r7, pc}
 800ed16:	bf00      	nop
 800ed18:	20000788 	.word	0x20000788
 800ed1c:	20000140 	.word	0x20000140
 800ed20:	080001dc 	.word	0x080001dc
 800ed24:	080001c4 	.word	0x080001c4
 800ed28:	080001c8 	.word	0x080001c8
 800ed2c:	080001d0 	.word	0x080001d0
 800ed30:	080001d4 	.word	0x080001d4

0800ed34 <NoteSTR>:

/*******************************************************************************
 NoteSTR: ����������ʾ�ַ�/ͼ�鴮      Mode = bit0: Normal/Inv, bit1: Char/Symb
*******************************************************************************/
void NoteSTR(short Nx0, short Ny0, char Mode, char *Str)
{
 800ed34:	b580      	push	{r7, lr}
 800ed36:	b086      	sub	sp, #24
 800ed38:	af00      	add	r7, sp, #0
 800ed3a:	607b      	str	r3, [r7, #4]
 800ed3c:	4603      	mov	r3, r0
 800ed3e:	81fb      	strh	r3, [r7, #14]
 800ed40:	460b      	mov	r3, r1
 800ed42:	81bb      	strh	r3, [r7, #12]
 800ed44:	4613      	mov	r3, r2
 800ed46:	72fb      	strb	r3, [r7, #11]

  char Code;
  short i, j, k;

  Nx = Nx0, Ny = Ny0;
 800ed48:	4a48      	ldr	r2, [pc, #288]	; (800ee6c <NoteSTR+0x138>)
 800ed4a:	89fb      	ldrh	r3, [r7, #14]
 800ed4c:	8013      	strh	r3, [r2, #0]
 800ed4e:	4a48      	ldr	r2, [pc, #288]	; (800ee70 <NoteSTR+0x13c>)
 800ed50:	89bb      	ldrh	r3, [r7, #12]
 800ed52:	8013      	strh	r3, [r2, #0]

  while(*Str != 0){
 800ed54:	e080      	b.n	800ee58 <NoteSTR+0x124>
    Code = *Str++;
 800ed56:	687b      	ldr	r3, [r7, #4]
 800ed58:	1c5a      	adds	r2, r3, #1
 800ed5a:	607a      	str	r2, [r7, #4]
 800ed5c:	781b      	ldrb	r3, [r3, #0]
 800ed5e:	747b      	strb	r3, [r7, #17]

    for(i=0; i<6; ++i){
 800ed60:	2300      	movs	r3, #0
 800ed62:	82fb      	strh	r3, [r7, #22]
 800ed64:	e074      	b.n	800ee50 <NoteSTR+0x11c>
      if(!(Mode & SYMB)) k = CHAR6x8[((Code-0X21)*6)+ i];
 800ed66:	7afb      	ldrb	r3, [r7, #11]
 800ed68:	f003 0310 	and.w	r3, r3, #16
 800ed6c:	2b00      	cmp	r3, #0
 800ed6e:	d10e      	bne.n	800ed8e <NoteSTR+0x5a>
 800ed70:	7c7b      	ldrb	r3, [r7, #17]
 800ed72:	f1a3 0221 	sub.w	r2, r3, #33	; 0x21
 800ed76:	4613      	mov	r3, r2
 800ed78:	005b      	lsls	r3, r3, #1
 800ed7a:	4413      	add	r3, r2
 800ed7c:	005b      	lsls	r3, r3, #1
 800ed7e:	461a      	mov	r2, r3
 800ed80:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800ed84:	4413      	add	r3, r2
 800ed86:	4a3b      	ldr	r2, [pc, #236]	; (800ee74 <NoteSTR+0x140>)
 800ed88:	5cd3      	ldrb	r3, [r2, r3]
 800ed8a:	827b      	strh	r3, [r7, #18]
 800ed8c:	e00d      	b.n	800edaa <NoteSTR+0x76>
      else               k = SYMB6x8[(Code - '!')*6 + i];
 800ed8e:	7c7b      	ldrb	r3, [r7, #17]
 800ed90:	f1a3 0221 	sub.w	r2, r3, #33	; 0x21
 800ed94:	4613      	mov	r3, r2
 800ed96:	005b      	lsls	r3, r3, #1
 800ed98:	4413      	add	r3, r2
 800ed9a:	005b      	lsls	r3, r3, #1
 800ed9c:	461a      	mov	r2, r3
 800ed9e:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800eda2:	4413      	add	r3, r2
 800eda4:	4a34      	ldr	r2, [pc, #208]	; (800ee78 <NoteSTR+0x144>)
 800eda6:	5cd3      	ldrb	r3, [r2, r3]
 800eda8:	827b      	strh	r3, [r7, #18]
      if(Mode & VOID) k &= (i%2)? 0xAAAA : 0x5555;
 800edaa:	7afb      	ldrb	r3, [r7, #11]
 800edac:	f003 0320 	and.w	r3, r3, #32
 800edb0:	2b00      	cmp	r3, #0
 800edb2:	d00c      	beq.n	800edce <NoteSTR+0x9a>
 800edb4:	8afb      	ldrh	r3, [r7, #22]
 800edb6:	f003 0301 	and.w	r3, r3, #1
 800edba:	b29b      	uxth	r3, r3
 800edbc:	2b00      	cmp	r3, #0
 800edbe:	d001      	beq.n	800edc4 <NoteSTR+0x90>
 800edc0:	4a2e      	ldr	r2, [pc, #184]	; (800ee7c <NoteSTR+0x148>)
 800edc2:	e001      	b.n	800edc8 <NoteSTR+0x94>
 800edc4:	f245 5255 	movw	r2, #21845	; 0x5555
 800edc8:	8a7b      	ldrh	r3, [r7, #18]
 800edca:	4013      	ands	r3, r2
 800edcc:	827b      	strh	r3, [r7, #18]
      k <<= 2;
 800edce:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800edd2:	009b      	lsls	r3, r3, #2
 800edd4:	827b      	strh	r3, [r7, #18]
      for(j=0; j<14; ++j){  //j<8ʱ�����У�j<10������   �����¸�������
 800edd6:	2300      	movs	r3, #0
 800edd8:	82bb      	strh	r3, [r7, #20]
 800edda:	e01f      	b.n	800ee1c <NoteSTR+0xe8>
        if(k & 1)  NotePixel((Mode & INV)? 0 : 1);
 800eddc:	8a7b      	ldrh	r3, [r7, #18]
 800edde:	f003 0301 	and.w	r3, r3, #1
 800ede2:	2b00      	cmp	r3, #0
 800ede4:	d00b      	beq.n	800edfe <NoteSTR+0xca>
 800ede6:	7afb      	ldrb	r3, [r7, #11]
 800ede8:	f003 0301 	and.w	r3, r3, #1
 800edec:	2b00      	cmp	r3, #0
 800edee:	bf0c      	ite	eq
 800edf0:	2301      	moveq	r3, #1
 800edf2:	2300      	movne	r3, #0
 800edf4:	b2db      	uxtb	r3, r3
 800edf6:	4618      	mov	r0, r3
 800edf8:	f7ff fcac 	bl	800e754 <NotePixel>
 800edfc:	e006      	b.n	800ee0c <NoteSTR+0xd8>
        else       NotePixel((Mode & INV)? 1 : 0);
 800edfe:	7afb      	ldrb	r3, [r7, #11]
 800ee00:	f003 0301 	and.w	r3, r3, #1
 800ee04:	b2db      	uxtb	r3, r3
 800ee06:	4618      	mov	r0, r3
 800ee08:	f7ff fca4 	bl	800e754 <NotePixel>
       k >>= 1;
 800ee0c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800ee10:	105b      	asrs	r3, r3, #1
 800ee12:	827b      	strh	r3, [r7, #18]
      for(j=0; j<14; ++j){  //j<8ʱ�����У�j<10������   �����¸�������
 800ee14:	8abb      	ldrh	r3, [r7, #20]
 800ee16:	3301      	adds	r3, #1
 800ee18:	b29b      	uxth	r3, r3
 800ee1a:	82bb      	strh	r3, [r7, #20]
 800ee1c:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800ee20:	2b0d      	cmp	r3, #13
 800ee22:	dddb      	ble.n	800eddc <NoteSTR+0xa8>
      }
      Nx++; Ny -= 14;
 800ee24:	4b11      	ldr	r3, [pc, #68]	; (800ee6c <NoteSTR+0x138>)
 800ee26:	f9b3 3000 	ldrsh.w	r3, [r3]
 800ee2a:	b29b      	uxth	r3, r3
 800ee2c:	3301      	adds	r3, #1
 800ee2e:	b29b      	uxth	r3, r3
 800ee30:	b21a      	sxth	r2, r3
 800ee32:	4b0e      	ldr	r3, [pc, #56]	; (800ee6c <NoteSTR+0x138>)
 800ee34:	801a      	strh	r2, [r3, #0]
 800ee36:	4b0e      	ldr	r3, [pc, #56]	; (800ee70 <NoteSTR+0x13c>)
 800ee38:	f9b3 3000 	ldrsh.w	r3, [r3]
 800ee3c:	b29b      	uxth	r3, r3
 800ee3e:	3b0e      	subs	r3, #14
 800ee40:	b29b      	uxth	r3, r3
 800ee42:	b21a      	sxth	r2, r3
 800ee44:	4b0a      	ldr	r3, [pc, #40]	; (800ee70 <NoteSTR+0x13c>)
 800ee46:	801a      	strh	r2, [r3, #0]
    for(i=0; i<6; ++i){
 800ee48:	8afb      	ldrh	r3, [r7, #22]
 800ee4a:	3301      	adds	r3, #1
 800ee4c:	b29b      	uxth	r3, r3
 800ee4e:	82fb      	strh	r3, [r7, #22]
 800ee50:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800ee54:	2b05      	cmp	r3, #5
 800ee56:	dd86      	ble.n	800ed66 <NoteSTR+0x32>
  while(*Str != 0){
 800ee58:	687b      	ldr	r3, [r7, #4]
 800ee5a:	781b      	ldrb	r3, [r3, #0]
 800ee5c:	2b00      	cmp	r3, #0
 800ee5e:	f47f af7a 	bne.w	800ed56 <NoteSTR+0x22>
    }
  }
}
 800ee62:	bf00      	nop
 800ee64:	bf00      	nop
 800ee66:	3718      	adds	r7, #24
 800ee68:	46bd      	mov	sp, r7
 800ee6a:	bd80      	pop	{r7, pc}
 800ee6c:	20000002 	.word	0x20000002
 800ee70:	20000004 	.word	0x20000004
 800ee74:	08001760 	.word	0x08001760
 800ee78:	0800152c 	.word	0x0800152c
 800ee7c:	ffffaaaa 	.word	0xffffaaaa

0800ee80 <Note_4Point>:

/*******************************************************************************
Note_4Point:���Ķ��ǵ�
*******************************************************************************/
void Note_4Point(char Mode, short x, short y, char Str_Cnt, char High)
{
 800ee80:	b590      	push	{r4, r7, lr}
 800ee82:	b083      	sub	sp, #12
 800ee84:	af00      	add	r7, sp, #0
 800ee86:	4604      	mov	r4, r0
 800ee88:	4608      	mov	r0, r1
 800ee8a:	4611      	mov	r1, r2
 800ee8c:	461a      	mov	r2, r3
 800ee8e:	4623      	mov	r3, r4
 800ee90:	71fb      	strb	r3, [r7, #7]
 800ee92:	4603      	mov	r3, r0
 800ee94:	80bb      	strh	r3, [r7, #4]
 800ee96:	460b      	mov	r3, r1
 800ee98:	807b      	strh	r3, [r7, #2]
 800ee9a:	4613      	mov	r3, r2
 800ee9c:	71bb      	strb	r3, [r7, #6]
  High = High+4;
 800ee9e:	7e3b      	ldrb	r3, [r7, #24]
 800eea0:	3304      	adds	r3, #4
 800eea2:	763b      	strb	r3, [r7, #24]

  Nx = x, Ny = y;
 800eea4:	4a2e      	ldr	r2, [pc, #184]	; (800ef60 <Note_4Point+0xe0>)
 800eea6:	88bb      	ldrh	r3, [r7, #4]
 800eea8:	8013      	strh	r3, [r2, #0]
 800eeaa:	4a2e      	ldr	r2, [pc, #184]	; (800ef64 <Note_4Point+0xe4>)
 800eeac:	887b      	ldrh	r3, [r7, #2]
 800eeae:	8013      	strh	r3, [r2, #0]
  NotePixel((Mode & INV)? 1 : 0);
 800eeb0:	79fb      	ldrb	r3, [r7, #7]
 800eeb2:	f003 0301 	and.w	r3, r3, #1
 800eeb6:	b2db      	uxtb	r3, r3
 800eeb8:	4618      	mov	r0, r3
 800eeba:	f7ff fc4b 	bl	800e754 <NotePixel>
  Nx = x, Ny = y+High-1;
 800eebe:	4a28      	ldr	r2, [pc, #160]	; (800ef60 <Note_4Point+0xe0>)
 800eec0:	88bb      	ldrh	r3, [r7, #4]
 800eec2:	8013      	strh	r3, [r2, #0]
 800eec4:	7e3b      	ldrb	r3, [r7, #24]
 800eec6:	b29a      	uxth	r2, r3
 800eec8:	887b      	ldrh	r3, [r7, #2]
 800eeca:	4413      	add	r3, r2
 800eecc:	b29b      	uxth	r3, r3
 800eece:	3b01      	subs	r3, #1
 800eed0:	b29b      	uxth	r3, r3
 800eed2:	b21a      	sxth	r2, r3
 800eed4:	4b23      	ldr	r3, [pc, #140]	; (800ef64 <Note_4Point+0xe4>)
 800eed6:	801a      	strh	r2, [r3, #0]
  NotePixel((Mode & INV)? 1 : 0);
 800eed8:	79fb      	ldrb	r3, [r7, #7]
 800eeda:	f003 0301 	and.w	r3, r3, #1
 800eede:	b2db      	uxtb	r3, r3
 800eee0:	4618      	mov	r0, r3
 800eee2:	f7ff fc37 	bl	800e754 <NotePixel>
  Nx = x+Str_Cnt*(6)-1, Ny = y;
 800eee6:	79bb      	ldrb	r3, [r7, #6]
 800eee8:	b29b      	uxth	r3, r3
 800eeea:	461a      	mov	r2, r3
 800eeec:	0052      	lsls	r2, r2, #1
 800eeee:	4413      	add	r3, r2
 800eef0:	005b      	lsls	r3, r3, #1
 800eef2:	b29a      	uxth	r2, r3
 800eef4:	88bb      	ldrh	r3, [r7, #4]
 800eef6:	4413      	add	r3, r2
 800eef8:	b29b      	uxth	r3, r3
 800eefa:	3b01      	subs	r3, #1
 800eefc:	b29b      	uxth	r3, r3
 800eefe:	b21a      	sxth	r2, r3
 800ef00:	4b17      	ldr	r3, [pc, #92]	; (800ef60 <Note_4Point+0xe0>)
 800ef02:	801a      	strh	r2, [r3, #0]
 800ef04:	4a17      	ldr	r2, [pc, #92]	; (800ef64 <Note_4Point+0xe4>)
 800ef06:	887b      	ldrh	r3, [r7, #2]
 800ef08:	8013      	strh	r3, [r2, #0]
  NotePixel((Mode & INV)? 1 : 0);
 800ef0a:	79fb      	ldrb	r3, [r7, #7]
 800ef0c:	f003 0301 	and.w	r3, r3, #1
 800ef10:	b2db      	uxtb	r3, r3
 800ef12:	4618      	mov	r0, r3
 800ef14:	f7ff fc1e 	bl	800e754 <NotePixel>
  Nx = x+Str_Cnt*(6)-1, Ny = y+High-1;
 800ef18:	79bb      	ldrb	r3, [r7, #6]
 800ef1a:	b29b      	uxth	r3, r3
 800ef1c:	461a      	mov	r2, r3
 800ef1e:	0052      	lsls	r2, r2, #1
 800ef20:	4413      	add	r3, r2
 800ef22:	005b      	lsls	r3, r3, #1
 800ef24:	b29a      	uxth	r2, r3
 800ef26:	88bb      	ldrh	r3, [r7, #4]
 800ef28:	4413      	add	r3, r2
 800ef2a:	b29b      	uxth	r3, r3
 800ef2c:	3b01      	subs	r3, #1
 800ef2e:	b29b      	uxth	r3, r3
 800ef30:	b21a      	sxth	r2, r3
 800ef32:	4b0b      	ldr	r3, [pc, #44]	; (800ef60 <Note_4Point+0xe0>)
 800ef34:	801a      	strh	r2, [r3, #0]
 800ef36:	7e3b      	ldrb	r3, [r7, #24]
 800ef38:	b29a      	uxth	r2, r3
 800ef3a:	887b      	ldrh	r3, [r7, #2]
 800ef3c:	4413      	add	r3, r2
 800ef3e:	b29b      	uxth	r3, r3
 800ef40:	3b01      	subs	r3, #1
 800ef42:	b29b      	uxth	r3, r3
 800ef44:	b21a      	sxth	r2, r3
 800ef46:	4b07      	ldr	r3, [pc, #28]	; (800ef64 <Note_4Point+0xe4>)
 800ef48:	801a      	strh	r2, [r3, #0]
  NotePixel((Mode & INV)? 1 : 0);
 800ef4a:	79fb      	ldrb	r3, [r7, #7]
 800ef4c:	f003 0301 	and.w	r3, r3, #1
 800ef50:	b2db      	uxtb	r3, r3
 800ef52:	4618      	mov	r0, r3
 800ef54:	f7ff fbfe 	bl	800e754 <NotePixel>

}
 800ef58:	bf00      	nop
 800ef5a:	370c      	adds	r7, #12
 800ef5c:	46bd      	mov	sp, r7
 800ef5e:	bd90      	pop	{r4, r7, pc}
 800ef60:	20000002 	.word	0x20000002
 800ef64:	20000004 	.word	0x20000004

0800ef68 <Color_Num>:

/*******************************************************************************
Color_Num: �����ǰ��ɫ�Ķ�Ӧ��ɫ����
*******************************************************************************/
char Color_Num(short Color)
{
 800ef68:	b480      	push	{r7}
 800ef6a:	b083      	sub	sp, #12
 800ef6c:	af00      	add	r7, sp, #0
 800ef6e:	4603      	mov	r3, r0
 800ef70:	80fb      	strh	r3, [r7, #6]
  if(Color == WHT)                  return 0;
  else if((Color & CYN  )== CYN  )  return 1;
 800ef72:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800ef76:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 800ef7a:	4013      	ands	r3, r2
 800ef7c:	f64f 72e0 	movw	r2, #65504	; 0xffe0
 800ef80:	4293      	cmp	r3, r2
 800ef82:	d101      	bne.n	800ef88 <Color_Num+0x20>
 800ef84:	2301      	movs	r3, #1
 800ef86:	e068      	b.n	800f05a <Color_Num+0xf2>
  else if((Color & CYN_ )== CYN_ )  return 2;
 800ef88:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800ef8c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800ef90:	f5b3 4f04 	cmp.w	r3, #33792	; 0x8400
 800ef94:	d101      	bne.n	800ef9a <Color_Num+0x32>
 800ef96:	2302      	movs	r3, #2
 800ef98:	e05f      	b.n	800f05a <Color_Num+0xf2>
  else if((Color & YEL  )== YEL  )  return 3;
 800ef9a:	88fb      	ldrh	r3, [r7, #6]
 800ef9c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800efa0:	f240 72ff 	movw	r2, #2047	; 0x7ff
 800efa4:	4293      	cmp	r3, r2
 800efa6:	d101      	bne.n	800efac <Color_Num+0x44>
 800efa8:	2303      	movs	r3, #3
 800efaa:	e056      	b.n	800f05a <Color_Num+0xf2>
  else if((Color & YEL_ )== YEL_ )  return 4;
 800efac:	88fb      	ldrh	r3, [r7, #6]
 800efae:	f403 6382 	and.w	r3, r3, #1040	; 0x410
 800efb2:	f5b3 6f82 	cmp.w	r3, #1040	; 0x410
 800efb6:	d101      	bne.n	800efbc <Color_Num+0x54>
 800efb8:	2304      	movs	r3, #4
 800efba:	e04e      	b.n	800f05a <Color_Num+0xf2>
  else if((Color & PUR  )== PUR  )  return 5;
 800efbc:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800efc0:	f64f 031f 	movw	r3, #63519	; 0xf81f
 800efc4:	4013      	ands	r3, r2
 800efc6:	f64f 021f 	movw	r2, #63519	; 0xf81f
 800efca:	4293      	cmp	r3, r2
 800efcc:	d101      	bne.n	800efd2 <Color_Num+0x6a>
 800efce:	2305      	movs	r3, #5
 800efd0:	e043      	b.n	800f05a <Color_Num+0xf2>
  else if((Color & PUR_ )== PUR_ )  return 6;
 800efd2:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800efd6:	f248 0310 	movw	r3, #32784	; 0x8010
 800efda:	4013      	ands	r3, r2
 800efdc:	f248 0210 	movw	r2, #32784	; 0x8010
 800efe0:	4293      	cmp	r3, r2
 800efe2:	d101      	bne.n	800efe8 <Color_Num+0x80>
 800efe4:	2306      	movs	r3, #6
 800efe6:	e038      	b.n	800f05a <Color_Num+0xf2>
  else if((Color & GRN  )== GRN  )  return 7;
 800efe8:	88fb      	ldrh	r3, [r7, #6]
 800efea:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 800efee:	f5b3 6ffc 	cmp.w	r3, #2016	; 0x7e0
 800eff2:	d101      	bne.n	800eff8 <Color_Num+0x90>
 800eff4:	2307      	movs	r3, #7
 800eff6:	e030      	b.n	800f05a <Color_Num+0xf2>
  else if((Color & GRN_ )== GRN_ )  return 8;
 800eff8:	88fb      	ldrh	r3, [r7, #6]
 800effa:	f403 6382 	and.w	r3, r3, #1040	; 0x410
 800effe:	f5b3 6f82 	cmp.w	r3, #1040	; 0x410
 800f002:	d101      	bne.n	800f008 <Color_Num+0xa0>
 800f004:	2308      	movs	r3, #8
 800f006:	e028      	b.n	800f05a <Color_Num+0xf2>
  else if((Color & GRY  )== GRY  )  return 9;
 800f008:	88fb      	ldrh	r3, [r7, #6]
 800f00a:	461a      	mov	r2, r3
 800f00c:	f643 13e7 	movw	r3, #14823	; 0x39e7
 800f010:	4013      	ands	r3, r2
 800f012:	f643 12e7 	movw	r2, #14823	; 0x39e7
 800f016:	4293      	cmp	r3, r2
 800f018:	d101      	bne.n	800f01e <Color_Num+0xb6>
 800f01a:	2309      	movs	r3, #9
 800f01c:	e01d      	b.n	800f05a <Color_Num+0xf2>
  else if((Color & ORN  )== ORN  )  return 10;
 800f01e:	88fb      	ldrh	r3, [r7, #6]
 800f020:	461a      	mov	r2, r3
 800f022:	f240 531f 	movw	r3, #1311	; 0x51f
 800f026:	4013      	ands	r3, r2
 800f028:	f240 521f 	movw	r2, #1311	; 0x51f
 800f02c:	4293      	cmp	r3, r2
 800f02e:	d101      	bne.n	800f034 <Color_Num+0xcc>
 800f030:	230a      	movs	r3, #10
 800f032:	e012      	b.n	800f05a <Color_Num+0xf2>
  else if((Color & BLU  )== BLU  )  return 11;
 800f034:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800f038:	f64f 4310 	movw	r3, #64528	; 0xfc10
 800f03c:	4013      	ands	r3, r2
 800f03e:	f64f 4210 	movw	r2, #64528	; 0xfc10
 800f042:	4293      	cmp	r3, r2
 800f044:	d101      	bne.n	800f04a <Color_Num+0xe2>
 800f046:	230b      	movs	r3, #11
 800f048:	e007      	b.n	800f05a <Color_Num+0xf2>
  else if((Color & RED  )== RED  )  return 12;
 800f04a:	88fb      	ldrh	r3, [r7, #6]
 800f04c:	f003 031f 	and.w	r3, r3, #31
 800f050:	2b1f      	cmp	r3, #31
 800f052:	d101      	bne.n	800f058 <Color_Num+0xf0>
 800f054:	230c      	movs	r3, #12
 800f056:	e000      	b.n	800f05a <Color_Num+0xf2>
  else if((Color & BLK  )== BLK  )  return 13;
 800f058:	230d      	movs	r3, #13
  else if((Color & LGN  )== LGN  )  return 14;
  else                              return 15;
}
 800f05a:	4618      	mov	r0, r3
 800f05c:	370c      	adds	r7, #12
 800f05e:	46bd      	mov	sp, r7
 800f060:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f064:	4770      	bx	lr
	...

0800f068 <PrintClk>:

/*******************************************************************************
 Print_Clk: ����ָʾ
*******************************************************************************/
void PrintClk(short x0, short y0, char Phase)
{
 800f068:	b580      	push	{r7, lr}
 800f06a:	b084      	sub	sp, #16
 800f06c:	af00      	add	r7, sp, #0
 800f06e:	4603      	mov	r3, r0
 800f070:	80fb      	strh	r3, [r7, #6]
 800f072:	460b      	mov	r3, r1
 800f074:	80bb      	strh	r3, [r7, #4]
 800f076:	4613      	mov	r3, r2
 800f078:	70fb      	strb	r3, [r7, #3]
  short i, j, b;
  SetColor(GRY, TCOLOR[FN]);
 800f07a:	4b31      	ldr	r3, [pc, #196]	; (800f140 <PrintClk+0xd8>)
 800f07c:	895b      	ldrh	r3, [r3, #10]
 800f07e:	4619      	mov	r1, r3
 800f080:	f643 10e7 	movw	r0, #14823	; 0x39e7
 800f084:	f7fe ff9c 	bl	800dfc0 <SetColor>
  x0=S_X[SAVE_BMP]+30;
 800f088:	4b2e      	ldr	r3, [pc, #184]	; (800f144 <PrintClk+0xdc>)
 800f08a:	f9b3 303a 	ldrsh.w	r3, [r3, #58]	; 0x3a
 800f08e:	b29b      	uxth	r3, r3
 800f090:	331e      	adds	r3, #30
 800f092:	b29b      	uxth	r3, r3
 800f094:	80fb      	strh	r3, [r7, #6]
  DispStr(S_X[SAVE_BMP]-3, LABLE_Y, PRN, "             ");
 800f096:	4b2b      	ldr	r3, [pc, #172]	; (800f144 <PrintClk+0xdc>)
 800f098:	f9b3 303a 	ldrsh.w	r3, [r3, #58]	; 0x3a
 800f09c:	b29b      	uxth	r3, r3
 800f09e:	3b03      	subs	r3, #3
 800f0a0:	b29b      	uxth	r3, r3
 800f0a2:	b218      	sxth	r0, r3
 800f0a4:	4b28      	ldr	r3, [pc, #160]	; (800f148 <PrintClk+0xe0>)
 800f0a6:	2200      	movs	r2, #0
 800f0a8:	2103      	movs	r1, #3
 800f0aa:	f7fe ffa1 	bl	800dff0 <DispStr>
  for(i=1; i<11; ++i){
 800f0ae:	2301      	movs	r3, #1
 800f0b0:	81fb      	strh	r3, [r7, #14]
 800f0b2:	e03c      	b.n	800f12e <PrintClk+0xc6>
    b = CLK_TAB[Phase *11 + i];
 800f0b4:	78fa      	ldrb	r2, [r7, #3]
 800f0b6:	4613      	mov	r3, r2
 800f0b8:	009b      	lsls	r3, r3, #2
 800f0ba:	4413      	add	r3, r2
 800f0bc:	005b      	lsls	r3, r3, #1
 800f0be:	441a      	add	r2, r3
 800f0c0:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800f0c4:	4413      	add	r3, r2
 800f0c6:	4a21      	ldr	r2, [pc, #132]	; (800f14c <PrintClk+0xe4>)
 800f0c8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800f0cc:	817b      	strh	r3, [r7, #10]
    for(j=0; j<11; ++j){
 800f0ce:	2300      	movs	r3, #0
 800f0d0:	81bb      	strh	r3, [r7, #12]
 800f0d2:	e024      	b.n	800f11e <PrintClk+0xb6>
      LCD_Set_Posi((x0+j), (y0+i));
 800f0d4:	88fa      	ldrh	r2, [r7, #6]
 800f0d6:	89bb      	ldrh	r3, [r7, #12]
 800f0d8:	4413      	add	r3, r2
 800f0da:	b29b      	uxth	r3, r3
 800f0dc:	b218      	sxth	r0, r3
 800f0de:	88ba      	ldrh	r2, [r7, #4]
 800f0e0:	89fb      	ldrh	r3, [r7, #14]
 800f0e2:	4413      	add	r3, r2
 800f0e4:	b29b      	uxth	r3, r3
 800f0e6:	b21b      	sxth	r3, r3
 800f0e8:	4619      	mov	r1, r3
 800f0ea:	f002 fc1d 	bl	8011928 <LCD_Set_Posi>
      if((b >> j)& 0x001)
 800f0ee:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 800f0f2:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800f0f6:	fa42 f303 	asr.w	r3, r2, r3
 800f0fa:	f003 0301 	and.w	r3, r3, #1
 800f0fe:	2b00      	cmp	r3, #0
 800f100:	d004      	beq.n	800f10c <PrintClk+0xa4>
        LCD_Set_Pixel(BLU);
 800f102:	f64f 4010 	movw	r0, #64528	; 0xfc10
 800f106:	f002 fc5d 	bl	80119c4 <LCD_Set_Pixel>
 800f10a:	e004      	b.n	800f116 <PrintClk+0xae>
      else
        LCD_Set_Pixel(Background);
 800f10c:	4b10      	ldr	r3, [pc, #64]	; (800f150 <PrintClk+0xe8>)
 800f10e:	881b      	ldrh	r3, [r3, #0]
 800f110:	4618      	mov	r0, r3
 800f112:	f002 fc57 	bl	80119c4 <LCD_Set_Pixel>
    for(j=0; j<11; ++j){
 800f116:	89bb      	ldrh	r3, [r7, #12]
 800f118:	3301      	adds	r3, #1
 800f11a:	b29b      	uxth	r3, r3
 800f11c:	81bb      	strh	r3, [r7, #12]
 800f11e:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800f122:	2b0a      	cmp	r3, #10
 800f124:	ddd6      	ble.n	800f0d4 <PrintClk+0x6c>
  for(i=1; i<11; ++i){
 800f126:	89fb      	ldrh	r3, [r7, #14]
 800f128:	3301      	adds	r3, #1
 800f12a:	b29b      	uxth	r3, r3
 800f12c:	81fb      	strh	r3, [r7, #14]
 800f12e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800f132:	2b0a      	cmp	r3, #10
 800f134:	ddbe      	ble.n	800f0b4 <PrintClk+0x4c>
    }
  }
}
 800f136:	bf00      	nop
 800f138:	bf00      	nop
 800f13a:	3710      	adds	r7, #16
 800f13c:	46bd      	mov	sp, r7
 800f13e:	bd80      	pop	{r7, pc}
 800f140:	08001fa4 	.word	0x08001fa4
 800f144:	080021f8 	.word	0x080021f8
 800f148:	080001ec 	.word	0x080001ec
 800f14c:	08001c58 	.word	0x08001c58
 800f150:	200023fe 	.word	0x200023fe

0800f154 <WriteVar>:

/*******************************************************************************
 WriteVar
*******************************************************************************/
void WriteVar(short Var, short* pClu)
  {
 800f154:	b580      	push	{r7, lr}
 800f156:	b084      	sub	sp, #16
 800f158:	af00      	add	r7, sp, #0
 800f15a:	4603      	mov	r3, r0
 800f15c:	6039      	str	r1, [r7, #0]
 800f15e:	80fb      	strh	r3, [r7, #6]
    short temp_addr,temp_len;
    unsigned j;

    memset(Num, 0, 4);
 800f160:	2204      	movs	r2, #4
 800f162:	2100      	movs	r1, #0
 800f164:	4847      	ldr	r0, [pc, #284]	; (800f284 <WriteVar+0x130>)
 800f166:	f016 fd01 	bl	8025b6c <memset>
    u16ToDec4Str(Num,Var);
 800f16a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800f16e:	4619      	mov	r1, r3
 800f170:	4844      	ldr	r0, [pc, #272]	; (800f284 <WriteVar+0x130>)
 800f172:	f002 f957 	bl	8011424 <u16ToDec4Str>
    Length = strlen((char const*)Num);
 800f176:	4843      	ldr	r0, [pc, #268]	; (800f284 <WriteVar+0x130>)
 800f178:	f7fc ff62 	bl	800c040 <strlen>
 800f17c:	4603      	mov	r3, r0
 800f17e:	b21a      	sxth	r2, r3
 800f180:	4b41      	ldr	r3, [pc, #260]	; (800f288 <WriteVar+0x134>)
 800f182:	801a      	strh	r2, [r3, #0]
    memcpy(&F_Buff[Addr], Num, Length);
 800f184:	4b41      	ldr	r3, [pc, #260]	; (800f28c <WriteVar+0x138>)
 800f186:	f9b3 3000 	ldrsh.w	r3, [r3]
 800f18a:	461a      	mov	r2, r3
 800f18c:	4b40      	ldr	r3, [pc, #256]	; (800f290 <WriteVar+0x13c>)
 800f18e:	4413      	add	r3, r2
 800f190:	4a3d      	ldr	r2, [pc, #244]	; (800f288 <WriteVar+0x134>)
 800f192:	f9b2 2000 	ldrsh.w	r2, [r2]
 800f196:	493b      	ldr	r1, [pc, #236]	; (800f284 <WriteVar+0x130>)
 800f198:	4618      	mov	r0, r3
 800f19a:	f016 fcd9 	bl	8025b50 <memcpy>
    Addr = Addr + Length;
 800f19e:	4b3b      	ldr	r3, [pc, #236]	; (800f28c <WriteVar+0x138>)
 800f1a0:	f9b3 3000 	ldrsh.w	r3, [r3]
 800f1a4:	b29a      	uxth	r2, r3
 800f1a6:	4b38      	ldr	r3, [pc, #224]	; (800f288 <WriteVar+0x134>)
 800f1a8:	f9b3 3000 	ldrsh.w	r3, [r3]
 800f1ac:	b29b      	uxth	r3, r3
 800f1ae:	4413      	add	r3, r2
 800f1b0:	b29b      	uxth	r3, r3
 800f1b2:	b21a      	sxth	r2, r3
 800f1b4:	4b35      	ldr	r3, [pc, #212]	; (800f28c <WriteVar+0x138>)
 800f1b6:	801a      	strh	r2, [r3, #0]
    Svg_Cnt = Svg_Cnt+ Length;
 800f1b8:	4b33      	ldr	r3, [pc, #204]	; (800f288 <WriteVar+0x134>)
 800f1ba:	f9b3 3000 	ldrsh.w	r3, [r3]
 800f1be:	461a      	mov	r2, r3
 800f1c0:	4b34      	ldr	r3, [pc, #208]	; (800f294 <WriteVar+0x140>)
 800f1c2:	681b      	ldr	r3, [r3, #0]
 800f1c4:	4413      	add	r3, r2
 800f1c6:	4a33      	ldr	r2, [pc, #204]	; (800f294 <WriteVar+0x140>)
 800f1c8:	6013      	str	r3, [r2, #0]
    if(Addr >=4096)
 800f1ca:	4b30      	ldr	r3, [pc, #192]	; (800f28c <WriteVar+0x138>)
 800f1cc:	f9b3 3000 	ldrsh.w	r3, [r3]
 800f1d0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800f1d4:	db52      	blt.n	800f27c <WriteVar+0x128>
    {
      f_write(&USERFile, F_Buff, 4096, &j);
 800f1d6:	f107 0308 	add.w	r3, r7, #8
 800f1da:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800f1de:	492c      	ldr	r1, [pc, #176]	; (800f290 <WriteVar+0x13c>)
 800f1e0:	482d      	ldr	r0, [pc, #180]	; (800f298 <WriteVar+0x144>)
 800f1e2:	f015 f856 	bl	8024292 <f_write>
      PrintClk(264,2,(Clk_Cnt++ >>1)& 3);  // ����ָʾ
 800f1e6:	4b2d      	ldr	r3, [pc, #180]	; (800f29c <WriteVar+0x148>)
 800f1e8:	681b      	ldr	r3, [r3, #0]
 800f1ea:	1c5a      	adds	r2, r3, #1
 800f1ec:	492b      	ldr	r1, [pc, #172]	; (800f29c <WriteVar+0x148>)
 800f1ee:	600a      	str	r2, [r1, #0]
 800f1f0:	105b      	asrs	r3, r3, #1
 800f1f2:	b2db      	uxtb	r3, r3
 800f1f4:	f003 0303 	and.w	r3, r3, #3
 800f1f8:	b2db      	uxtb	r3, r3
 800f1fa:	461a      	mov	r2, r3
 800f1fc:	2102      	movs	r1, #2
 800f1fe:	f44f 7084 	mov.w	r0, #264	; 0x108
 800f202:	f7ff ff31 	bl	800f068 <PrintClk>
      temp_len = Addr -4096;
 800f206:	4b21      	ldr	r3, [pc, #132]	; (800f28c <WriteVar+0x138>)
 800f208:	f9b3 3000 	ldrsh.w	r3, [r3]
 800f20c:	b29b      	uxth	r3, r3
 800f20e:	f5a3 5380 	sub.w	r3, r3, #4096	; 0x1000
 800f212:	b29b      	uxth	r3, r3
 800f214:	81fb      	strh	r3, [r7, #14]
      temp_addr = Length - temp_len;
 800f216:	4b1c      	ldr	r3, [pc, #112]	; (800f288 <WriteVar+0x134>)
 800f218:	f9b3 3000 	ldrsh.w	r3, [r3]
 800f21c:	b29a      	uxth	r2, r3
 800f21e:	89fb      	ldrh	r3, [r7, #14]
 800f220:	1ad3      	subs	r3, r2, r3
 800f222:	b29b      	uxth	r3, r3
 800f224:	81bb      	strh	r3, [r7, #12]
      Addr = 0;
 800f226:	4b19      	ldr	r3, [pc, #100]	; (800f28c <WriteVar+0x138>)
 800f228:	2200      	movs	r2, #0
 800f22a:	801a      	strh	r2, [r3, #0]
      memset(F_Buff,0,4096);
 800f22c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800f230:	2100      	movs	r1, #0
 800f232:	4817      	ldr	r0, [pc, #92]	; (800f290 <WriteVar+0x13c>)
 800f234:	f016 fc9a 	bl	8025b6c <memset>
      memset(Data,0,310);
 800f238:	f44f 729b 	mov.w	r2, #310	; 0x136
 800f23c:	2100      	movs	r1, #0
 800f23e:	4818      	ldr	r0, [pc, #96]	; (800f2a0 <WriteVar+0x14c>)
 800f240:	f016 fc94 	bl	8025b6c <memset>
      memcpy(&F_Buff[Addr],Num + temp_addr, temp_len);
 800f244:	4b11      	ldr	r3, [pc, #68]	; (800f28c <WriteVar+0x138>)
 800f246:	f9b3 3000 	ldrsh.w	r3, [r3]
 800f24a:	461a      	mov	r2, r3
 800f24c:	4b10      	ldr	r3, [pc, #64]	; (800f290 <WriteVar+0x13c>)
 800f24e:	18d0      	adds	r0, r2, r3
 800f250:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800f254:	4a0b      	ldr	r2, [pc, #44]	; (800f284 <WriteVar+0x130>)
 800f256:	4413      	add	r3, r2
 800f258:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 800f25c:	4619      	mov	r1, r3
 800f25e:	f016 fc77 	bl	8025b50 <memcpy>
      Addr = Addr + temp_len;
 800f262:	4b0a      	ldr	r3, [pc, #40]	; (800f28c <WriteVar+0x138>)
 800f264:	f9b3 3000 	ldrsh.w	r3, [r3]
 800f268:	b29a      	uxth	r2, r3
 800f26a:	89fb      	ldrh	r3, [r7, #14]
 800f26c:	4413      	add	r3, r2
 800f26e:	b29b      	uxth	r3, r3
 800f270:	b21a      	sxth	r2, r3
 800f272:	4b06      	ldr	r3, [pc, #24]	; (800f28c <WriteVar+0x138>)
 800f274:	801a      	strh	r2, [r3, #0]
      Length = 0;
 800f276:	4b04      	ldr	r3, [pc, #16]	; (800f288 <WriteVar+0x134>)
 800f278:	2200      	movs	r2, #0
 800f27a:	801a      	strh	r2, [r3, #0]
    }
  }
 800f27c:	bf00      	nop
 800f27e:	3710      	adds	r7, #16
 800f280:	46bd      	mov	sp, r7
 800f282:	bd80      	pop	{r7, pc}
 800f284:	20002400 	.word	0x20002400
 800f288:	2000078c 	.word	0x2000078c
 800f28c:	2000078a 	.word	0x2000078a
 800f290:	20002604 	.word	0x20002604
 800f294:	20000790 	.word	0x20000790
 800f298:	20008a88 	.word	0x20008a88
 800f29c:	20000794 	.word	0x20000794
 800f2a0:	20000008 	.word	0x20000008

0800f2a4 <WriteStr>:

/*******************************************************************************
 WriteStr
*******************************************************************************/
void WriteStr(char* Str, short* pClu)
  {
 800f2a4:	b580      	push	{r7, lr}
 800f2a6:	b084      	sub	sp, #16
 800f2a8:	af00      	add	r7, sp, #0
 800f2aa:	6078      	str	r0, [r7, #4]
 800f2ac:	6039      	str	r1, [r7, #0]
    short temp_addr,temp_len;
    unsigned j;

    Length = strlen((char const*)Str);
 800f2ae:	6878      	ldr	r0, [r7, #4]
 800f2b0:	f7fc fec6 	bl	800c040 <strlen>
 800f2b4:	4603      	mov	r3, r0
 800f2b6:	b21a      	sxth	r2, r3
 800f2b8:	4b40      	ldr	r3, [pc, #256]	; (800f3bc <WriteStr+0x118>)
 800f2ba:	801a      	strh	r2, [r3, #0]
    memcpy(&F_Buff[Addr], Str, Length);
 800f2bc:	4b40      	ldr	r3, [pc, #256]	; (800f3c0 <WriteStr+0x11c>)
 800f2be:	f9b3 3000 	ldrsh.w	r3, [r3]
 800f2c2:	461a      	mov	r2, r3
 800f2c4:	4b3f      	ldr	r3, [pc, #252]	; (800f3c4 <WriteStr+0x120>)
 800f2c6:	4413      	add	r3, r2
 800f2c8:	4a3c      	ldr	r2, [pc, #240]	; (800f3bc <WriteStr+0x118>)
 800f2ca:	f9b2 2000 	ldrsh.w	r2, [r2]
 800f2ce:	6879      	ldr	r1, [r7, #4]
 800f2d0:	4618      	mov	r0, r3
 800f2d2:	f016 fc3d 	bl	8025b50 <memcpy>
    Addr = Addr + Length;
 800f2d6:	4b3a      	ldr	r3, [pc, #232]	; (800f3c0 <WriteStr+0x11c>)
 800f2d8:	f9b3 3000 	ldrsh.w	r3, [r3]
 800f2dc:	b29a      	uxth	r2, r3
 800f2de:	4b37      	ldr	r3, [pc, #220]	; (800f3bc <WriteStr+0x118>)
 800f2e0:	f9b3 3000 	ldrsh.w	r3, [r3]
 800f2e4:	b29b      	uxth	r3, r3
 800f2e6:	4413      	add	r3, r2
 800f2e8:	b29b      	uxth	r3, r3
 800f2ea:	b21a      	sxth	r2, r3
 800f2ec:	4b34      	ldr	r3, [pc, #208]	; (800f3c0 <WriteStr+0x11c>)
 800f2ee:	801a      	strh	r2, [r3, #0]
    Svg_Cnt = Svg_Cnt+ Length;
 800f2f0:	4b32      	ldr	r3, [pc, #200]	; (800f3bc <WriteStr+0x118>)
 800f2f2:	f9b3 3000 	ldrsh.w	r3, [r3]
 800f2f6:	461a      	mov	r2, r3
 800f2f8:	4b33      	ldr	r3, [pc, #204]	; (800f3c8 <WriteStr+0x124>)
 800f2fa:	681b      	ldr	r3, [r3, #0]
 800f2fc:	4413      	add	r3, r2
 800f2fe:	4a32      	ldr	r2, [pc, #200]	; (800f3c8 <WriteStr+0x124>)
 800f300:	6013      	str	r3, [r2, #0]
    if(Addr >=4096)
 800f302:	4b2f      	ldr	r3, [pc, #188]	; (800f3c0 <WriteStr+0x11c>)
 800f304:	f9b3 3000 	ldrsh.w	r3, [r3]
 800f308:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800f30c:	db52      	blt.n	800f3b4 <WriteStr+0x110>
    {
        f_write(&USERFile, F_Buff, 4096, &j);
 800f30e:	f107 0308 	add.w	r3, r7, #8
 800f312:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800f316:	492b      	ldr	r1, [pc, #172]	; (800f3c4 <WriteStr+0x120>)
 800f318:	482c      	ldr	r0, [pc, #176]	; (800f3cc <WriteStr+0x128>)
 800f31a:	f014 ffba 	bl	8024292 <f_write>
      PrintClk(264,2,(Clk_Cnt++ >>1)& 3);     // ����ָʾ
 800f31e:	4b2c      	ldr	r3, [pc, #176]	; (800f3d0 <WriteStr+0x12c>)
 800f320:	681b      	ldr	r3, [r3, #0]
 800f322:	1c5a      	adds	r2, r3, #1
 800f324:	492a      	ldr	r1, [pc, #168]	; (800f3d0 <WriteStr+0x12c>)
 800f326:	600a      	str	r2, [r1, #0]
 800f328:	105b      	asrs	r3, r3, #1
 800f32a:	b2db      	uxtb	r3, r3
 800f32c:	f003 0303 	and.w	r3, r3, #3
 800f330:	b2db      	uxtb	r3, r3
 800f332:	461a      	mov	r2, r3
 800f334:	2102      	movs	r1, #2
 800f336:	f44f 7084 	mov.w	r0, #264	; 0x108
 800f33a:	f7ff fe95 	bl	800f068 <PrintClk>
      temp_len = Addr -4096;
 800f33e:	4b20      	ldr	r3, [pc, #128]	; (800f3c0 <WriteStr+0x11c>)
 800f340:	f9b3 3000 	ldrsh.w	r3, [r3]
 800f344:	b29b      	uxth	r3, r3
 800f346:	f5a3 5380 	sub.w	r3, r3, #4096	; 0x1000
 800f34a:	b29b      	uxth	r3, r3
 800f34c:	81fb      	strh	r3, [r7, #14]
      temp_addr = Length - temp_len;
 800f34e:	4b1b      	ldr	r3, [pc, #108]	; (800f3bc <WriteStr+0x118>)
 800f350:	f9b3 3000 	ldrsh.w	r3, [r3]
 800f354:	b29a      	uxth	r2, r3
 800f356:	89fb      	ldrh	r3, [r7, #14]
 800f358:	1ad3      	subs	r3, r2, r3
 800f35a:	b29b      	uxth	r3, r3
 800f35c:	81bb      	strh	r3, [r7, #12]
      Addr = 0;
 800f35e:	4b18      	ldr	r3, [pc, #96]	; (800f3c0 <WriteStr+0x11c>)
 800f360:	2200      	movs	r2, #0
 800f362:	801a      	strh	r2, [r3, #0]
      memset(F_Buff,0,4096);
 800f364:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800f368:	2100      	movs	r1, #0
 800f36a:	4816      	ldr	r0, [pc, #88]	; (800f3c4 <WriteStr+0x120>)
 800f36c:	f016 fbfe 	bl	8025b6c <memset>
      memset(Data,0,310);
 800f370:	f44f 729b 	mov.w	r2, #310	; 0x136
 800f374:	2100      	movs	r1, #0
 800f376:	4817      	ldr	r0, [pc, #92]	; (800f3d4 <WriteStr+0x130>)
 800f378:	f016 fbf8 	bl	8025b6c <memset>
      memcpy(&F_Buff[Addr],Str + temp_addr, temp_len);
 800f37c:	4b10      	ldr	r3, [pc, #64]	; (800f3c0 <WriteStr+0x11c>)
 800f37e:	f9b3 3000 	ldrsh.w	r3, [r3]
 800f382:	461a      	mov	r2, r3
 800f384:	4b0f      	ldr	r3, [pc, #60]	; (800f3c4 <WriteStr+0x120>)
 800f386:	18d0      	adds	r0, r2, r3
 800f388:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800f38c:	687a      	ldr	r2, [r7, #4]
 800f38e:	4413      	add	r3, r2
 800f390:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 800f394:	4619      	mov	r1, r3
 800f396:	f016 fbdb 	bl	8025b50 <memcpy>
      Addr = Addr + temp_len;
 800f39a:	4b09      	ldr	r3, [pc, #36]	; (800f3c0 <WriteStr+0x11c>)
 800f39c:	f9b3 3000 	ldrsh.w	r3, [r3]
 800f3a0:	b29a      	uxth	r2, r3
 800f3a2:	89fb      	ldrh	r3, [r7, #14]
 800f3a4:	4413      	add	r3, r2
 800f3a6:	b29b      	uxth	r3, r3
 800f3a8:	b21a      	sxth	r2, r3
 800f3aa:	4b05      	ldr	r3, [pc, #20]	; (800f3c0 <WriteStr+0x11c>)
 800f3ac:	801a      	strh	r2, [r3, #0]
      Length = 0;
 800f3ae:	4b03      	ldr	r3, [pc, #12]	; (800f3bc <WriteStr+0x118>)
 800f3b0:	2200      	movs	r2, #0
 800f3b2:	801a      	strh	r2, [r3, #0]
    }
  }
 800f3b4:	bf00      	nop
 800f3b6:	3710      	adds	r7, #16
 800f3b8:	46bd      	mov	sp, r7
 800f3ba:	bd80      	pop	{r7, pc}
 800f3bc:	2000078c 	.word	0x2000078c
 800f3c0:	2000078a 	.word	0x2000078a
 800f3c4:	20002604 	.word	0x20002604
 800f3c8:	20000790 	.word	0x20000790
 800f3cc:	20008a88 	.word	0x20008a88
 800f3d0:	20000794 	.word	0x20000794
 800f3d4:	20000008 	.word	0x20000008

0800f3d8 <Make_Filename>:

/*******************************************************************************

*******************************************************************************/
void Make_Filename(short FileNo, char* FileName)
{
 800f3d8:	b580      	push	{r7, lr}
 800f3da:	b084      	sub	sp, #16
 800f3dc:	af00      	add	r7, sp, #0
 800f3de:	4603      	mov	r3, r0
 800f3e0:	6039      	str	r1, [r7, #0]
 800f3e2:	80fb      	strh	r3, [r7, #6]
  char Num[4];
  u8ToDec3(Num, FileNo);
 800f3e4:	88fb      	ldrh	r3, [r7, #6]
 800f3e6:	b2da      	uxtb	r2, r3
 800f3e8:	f107 030c 	add.w	r3, r7, #12
 800f3ec:	4611      	mov	r1, r2
 800f3ee:	4618      	mov	r0, r3
 800f3f0:	f001 fe72 	bl	80110d8 <u8ToDec3>
  FileName[4] = Num[0];
 800f3f4:	683b      	ldr	r3, [r7, #0]
 800f3f6:	3304      	adds	r3, #4
 800f3f8:	7b3a      	ldrb	r2, [r7, #12]
 800f3fa:	701a      	strb	r2, [r3, #0]
  FileName[5] = Num[1];
 800f3fc:	683b      	ldr	r3, [r7, #0]
 800f3fe:	3305      	adds	r3, #5
 800f400:	7b7a      	ldrb	r2, [r7, #13]
 800f402:	701a      	strb	r2, [r3, #0]
  FileName[6] = Num[2];
 800f404:	683b      	ldr	r3, [r7, #0]
 800f406:	3306      	adds	r3, #6
 800f408:	7bba      	ldrb	r2, [r7, #14]
 800f40a:	701a      	strb	r2, [r3, #0]
}
 800f40c:	bf00      	nop
 800f40e:	3710      	adds	r7, #16
 800f410:	46bd      	mov	sp, r7
 800f412:	bd80      	pop	{r7, pc}

0800f414 <Load_File_Num>:

/*******************************************************************************
Load_File_Num(char Tpye)
*******************************************************************************/
short Load_File_Num(char Type)
{
 800f414:	b580      	push	{r7, lr}
 800f416:	b086      	sub	sp, #24
 800f418:	af00      	add	r7, sp, #0
 800f41a:	4603      	mov	r3, r0
 800f41c:	71fb      	strb	r3, [r7, #7]
  short FileNo=0;
 800f41e:	2300      	movs	r3, #0
 800f420:	82fb      	strh	r3, [r7, #22]
  char  pFileName[13]="FILE       ";
 800f422:	4a35      	ldr	r2, [pc, #212]	; (800f4f8 <Load_File_Num+0xe4>)
 800f424:	f107 0308 	add.w	r3, r7, #8
 800f428:	ca07      	ldmia	r2, {r0, r1, r2}
 800f42a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800f42e:	2300      	movs	r3, #0
 800f430:	753b      	strb	r3, [r7, #20]

  switch(Type)
 800f432:	79fb      	ldrb	r3, [r7, #7]
 800f434:	3b1d      	subs	r3, #29
 800f436:	2b04      	cmp	r3, #4
 800f438:	d834      	bhi.n	800f4a4 <Load_File_Num+0x90>
 800f43a:	a201      	add	r2, pc, #4	; (adr r2, 800f440 <Load_File_Num+0x2c>)
 800f43c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f440:	0800f455 	.word	0x0800f455
 800f444:	0800f465 	.word	0x0800f465
 800f448:	0800f475 	.word	0x0800f475
 800f44c:	0800f485 	.word	0x0800f485
 800f450:	0800f495 	.word	0x0800f495
  {
  case SAVE_BMP:
    memcpy(pFileName,"IMG_   .BMP",12);
 800f454:	f107 0308 	add.w	r3, r7, #8
 800f458:	220c      	movs	r2, #12
 800f45a:	4928      	ldr	r1, [pc, #160]	; (800f4fc <Load_File_Num+0xe8>)
 800f45c:	4618      	mov	r0, r3
 800f45e:	f016 fb77 	bl	8025b50 <memcpy>
    break;
 800f462:	e01f      	b.n	800f4a4 <Load_File_Num+0x90>
  case SAVE_DAT:
    memcpy(pFileName,"FILE   .DAT",12);
 800f464:	f107 0308 	add.w	r3, r7, #8
 800f468:	220c      	movs	r2, #12
 800f46a:	4925      	ldr	r1, [pc, #148]	; (800f500 <Load_File_Num+0xec>)
 800f46c:	4618      	mov	r0, r3
 800f46e:	f016 fb6f 	bl	8025b50 <memcpy>
    break;
 800f472:	e017      	b.n	800f4a4 <Load_File_Num+0x90>
  case SAVE_BUF:
    memcpy(pFileName,"DATA   .BUF",12);
 800f474:	f107 0308 	add.w	r3, r7, #8
 800f478:	220c      	movs	r2, #12
 800f47a:	4922      	ldr	r1, [pc, #136]	; (800f504 <Load_File_Num+0xf0>)
 800f47c:	4618      	mov	r0, r3
 800f47e:	f016 fb67 	bl	8025b50 <memcpy>
    break;
 800f482:	e00f      	b.n	800f4a4 <Load_File_Num+0x90>
  case SAVE_CSV:
    memcpy(pFileName,"DATA   .CSV",12);
 800f484:	f107 0308 	add.w	r3, r7, #8
 800f488:	220c      	movs	r2, #12
 800f48a:	491f      	ldr	r1, [pc, #124]	; (800f508 <Load_File_Num+0xf4>)
 800f48c:	4618      	mov	r0, r3
 800f48e:	f016 fb5f 	bl	8025b50 <memcpy>
    break;
 800f492:	e007      	b.n	800f4a4 <Load_File_Num+0x90>
  case SAVE_SVG:
    memcpy(pFileName,"DATA   .SVG",12);
 800f494:	f107 0308 	add.w	r3, r7, #8
 800f498:	220c      	movs	r2, #12
 800f49a:	491c      	ldr	r1, [pc, #112]	; (800f50c <Load_File_Num+0xf8>)
 800f49c:	4618      	mov	r0, r3
 800f49e:	f016 fb57 	bl	8025b50 <memcpy>
    break;
 800f4a2:	bf00      	nop
  }
    Make_Filename(FileNo, pFileName);
 800f4a4:	f107 0208 	add.w	r2, r7, #8
 800f4a8:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800f4ac:	4611      	mov	r1, r2
 800f4ae:	4618      	mov	r0, r3
 800f4b0:	f7ff ff92 	bl	800f3d8 <Make_Filename>
    while( f_open( &USERFile, pFileName, FA_OPEN_EXISTING)==FR_OK)
 800f4b4:	e010      	b.n	800f4d8 <Load_File_Num+0xc4>
    {
      f_close(&USERFile);
 800f4b6:	4816      	ldr	r0, [pc, #88]	; (800f510 <Load_File_Num+0xfc>)
 800f4b8:	f015 f8b8 	bl	802462c <f_close>
      FileNo++;
 800f4bc:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800f4c0:	b29b      	uxth	r3, r3
 800f4c2:	3301      	adds	r3, #1
 800f4c4:	b29b      	uxth	r3, r3
 800f4c6:	82fb      	strh	r3, [r7, #22]
      Make_Filename(FileNo, pFileName);
 800f4c8:	f107 0208 	add.w	r2, r7, #8
 800f4cc:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800f4d0:	4611      	mov	r1, r2
 800f4d2:	4618      	mov	r0, r3
 800f4d4:	f7ff ff80 	bl	800f3d8 <Make_Filename>
    while( f_open( &USERFile, pFileName, FA_OPEN_EXISTING)==FR_OK)
 800f4d8:	f107 0308 	add.w	r3, r7, #8
 800f4dc:	2200      	movs	r2, #0
 800f4de:	4619      	mov	r1, r3
 800f4e0:	480b      	ldr	r0, [pc, #44]	; (800f510 <Load_File_Num+0xfc>)
 800f4e2:	f014 fc01 	bl	8023ce8 <f_open>
 800f4e6:	4603      	mov	r3, r0
 800f4e8:	2b00      	cmp	r3, #0
 800f4ea:	d0e4      	beq.n	800f4b6 <Load_File_Num+0xa2>
    }

  return FileNo;
 800f4ec:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
}
 800f4f0:	4618      	mov	r0, r3
 800f4f2:	3718      	adds	r7, #24
 800f4f4:	46bd      	mov	sp, r7
 800f4f6:	bd80      	pop	{r7, pc}
 800f4f8:	08000238 	.word	0x08000238
 800f4fc:	080001fc 	.word	0x080001fc
 800f500:	08000208 	.word	0x08000208
 800f504:	08000214 	.word	0x08000214
 800f508:	08000220 	.word	0x08000220
 800f50c:	0800022c 	.word	0x0800022c
 800f510:	20008a88 	.word	0x20008a88

0800f514 <File_Num>:

/*******************************************************************************
void File_Num(void)
*******************************************************************************/
void File_Num(void)
{
 800f514:	b580      	push	{r7, lr}
 800f516:	af00      	add	r7, sp, #0
  List[SAVE_BMP].Val =  Load_File_Num(SAVE_BMP);
 800f518:	201d      	movs	r0, #29
 800f51a:	f7ff ff7b 	bl	800f414 <Load_File_Num>
 800f51e:	4603      	mov	r3, r0
 800f520:	461a      	mov	r2, r3
 800f522:	4b12      	ldr	r3, [pc, #72]	; (800f56c <File_Num+0x58>)
 800f524:	f8a3 20ec 	strh.w	r2, [r3, #236]	; 0xec
  List[SAVE_DAT].Val =  Load_File_Num(SAVE_DAT);
 800f528:	201e      	movs	r0, #30
 800f52a:	f7ff ff73 	bl	800f414 <Load_File_Num>
 800f52e:	4603      	mov	r3, r0
 800f530:	461a      	mov	r2, r3
 800f532:	4b0e      	ldr	r3, [pc, #56]	; (800f56c <File_Num+0x58>)
 800f534:	f8a3 20f4 	strh.w	r2, [r3, #244]	; 0xf4
  List[SAVE_BUF].Val =  Load_File_Num(SAVE_BUF);
 800f538:	201f      	movs	r0, #31
 800f53a:	f7ff ff6b 	bl	800f414 <Load_File_Num>
 800f53e:	4603      	mov	r3, r0
 800f540:	461a      	mov	r2, r3
 800f542:	4b0a      	ldr	r3, [pc, #40]	; (800f56c <File_Num+0x58>)
 800f544:	f8a3 20fc 	strh.w	r2, [r3, #252]	; 0xfc
  List[SAVE_CSV].Val =  Load_File_Num(SAVE_CSV);
 800f548:	2020      	movs	r0, #32
 800f54a:	f7ff ff63 	bl	800f414 <Load_File_Num>
 800f54e:	4603      	mov	r3, r0
 800f550:	461a      	mov	r2, r3
 800f552:	4b06      	ldr	r3, [pc, #24]	; (800f56c <File_Num+0x58>)
 800f554:	f8a3 2104 	strh.w	r2, [r3, #260]	; 0x104
  List[SAVE_SVG].Val =  Load_File_Num(SAVE_SVG);
 800f558:	2021      	movs	r0, #33	; 0x21
 800f55a:	f7ff ff5b 	bl	800f414 <Load_File_Num>
 800f55e:	4603      	mov	r3, r0
 800f560:	461a      	mov	r2, r3
 800f562:	4b02      	ldr	r3, [pc, #8]	; (800f56c <File_Num+0x58>)
 800f564:	f8a3 210c 	strh.w	r2, [r3, #268]	; 0x10c
}
 800f568:	bf00      	nop
 800f56a:	bd80      	pop	{r7, pc}
 800f56c:	20000274 	.word	0x20000274

0800f570 <Load_Buf>:

/*******************************************************************************
Load_Buf: ���ر�����Ĳɼ����ݻ�����    ���룺�ļ����     ����ֵ��0x00=�ɹ�
*******************************************************************************/
char Load_Buf(short FileNo)
{
 800f570:	b580      	push	{r7, lr}
 800f572:	b08c      	sub	sp, #48	; 0x30
 800f574:	af00      	add	r7, sp, #0
 800f576:	4603      	mov	r3, r0
 800f578:	80fb      	strh	r3, [r7, #6]
  char pFileName[13]="DATA   .BUF";
 800f57a:	4a68      	ldr	r2, [pc, #416]	; (800f71c <Load_Buf+0x1ac>)
 800f57c:	f107 0310 	add.w	r3, r7, #16
 800f580:	ca07      	ldmia	r2, {r0, r1, r2}
 800f582:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800f586:	2300      	movs	r3, #0
 800f588:	773b      	strb	r3, [r7, #28]
  short *ptr;
  int i,Rvalue,n;
  unsigned j;

  Make_Filename(FileNo, pFileName);
 800f58a:	f107 0210 	add.w	r2, r7, #16
 800f58e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800f592:	4611      	mov	r1, r2
 800f594:	4618      	mov	r0, r3
 800f596:	f7ff ff1f 	bl	800f3d8 <Make_Filename>

  Rvalue =f_open( &USERFile, pFileName, FA_OPEN_EXISTING |FA_READ );
 800f59a:	f107 0310 	add.w	r3, r7, #16
 800f59e:	2201      	movs	r2, #1
 800f5a0:	4619      	mov	r1, r3
 800f5a2:	485f      	ldr	r0, [pc, #380]	; (800f720 <Load_Buf+0x1b0>)
 800f5a4:	f014 fba0 	bl	8023ce8 <f_open>
 800f5a8:	4603      	mov	r3, r0
 800f5aa:	627b      	str	r3, [r7, #36]	; 0x24
  if(Rvalue !=FR_OK)
 800f5ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f5ae:	2b00      	cmp	r3, #0
 800f5b0:	d002      	beq.n	800f5b8 <Load_Buf+0x48>
	  return Rvalue;
 800f5b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f5b4:	b2db      	uxtb	r3, r3
 800f5b6:	e0ac      	b.n	800f712 <Load_Buf+0x1a2>
  n=2;
 800f5b8:	2302      	movs	r3, #2
 800f5ba:	62bb      	str	r3, [r7, #40]	; 0x28
  if(List[SMPL_DPTH].Val==3)
 800f5bc:	4b59      	ldr	r3, [pc, #356]	; (800f724 <Load_Buf+0x1b4>)
 800f5be:	f9b3 304c 	ldrsh.w	r3, [r3, #76]	; 0x4c
 800f5c2:	2b03      	cmp	r3, #3
 800f5c4:	d101      	bne.n	800f5ca <Load_Buf+0x5a>
	  n =4 ;//8K
 800f5c6:	2304      	movs	r3, #4
 800f5c8:	62bb      	str	r3, [r7, #40]	; 0x28
  for(i=0;i<n;i++)
 800f5ca:	2300      	movs	r3, #0
 800f5cc:	62fb      	str	r3, [r7, #44]	; 0x2c
 800f5ce:	e021      	b.n	800f614 <Load_Buf+0xa4>
  {
    if(f_read(&USERFile, F_Buff, 4096, &j)!= FR_OK)
 800f5d0:	f107 030c 	add.w	r3, r7, #12
 800f5d4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800f5d8:	4953      	ldr	r1, [pc, #332]	; (800f728 <Load_Buf+0x1b8>)
 800f5da:	4851      	ldr	r0, [pc, #324]	; (800f720 <Load_Buf+0x1b0>)
 800f5dc:	f014 fd40 	bl	8024060 <f_read>
 800f5e0:	4603      	mov	r3, r0
 800f5e2:	2b00      	cmp	r3, #0
 800f5e4:	d001      	beq.n	800f5ea <Load_Buf+0x7a>
    	return FILE_RW_ERR;
 800f5e6:	2303      	movs	r3, #3
 800f5e8:	e093      	b.n	800f712 <Load_Buf+0x1a2>
    if(j != 4096)
 800f5ea:	68fb      	ldr	r3, [r7, #12]
 800f5ec:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800f5f0:	d001      	beq.n	800f5f6 <Load_Buf+0x86>
    	return FILE_RW_ERR;
 800f5f2:	2303      	movs	r3, #3
 800f5f4:	e08d      	b.n	800f712 <Load_Buf+0x1a2>
    memcpy(&(Sampl[i*4096/2+2]),F_Buff,4096);
 800f5f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f5f8:	02db      	lsls	r3, r3, #11
 800f5fa:	3302      	adds	r3, #2
 800f5fc:	005b      	lsls	r3, r3, #1
 800f5fe:	4a4b      	ldr	r2, [pc, #300]	; (800f72c <Load_Buf+0x1bc>)
 800f600:	4413      	add	r3, r2
 800f602:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800f606:	4948      	ldr	r1, [pc, #288]	; (800f728 <Load_Buf+0x1b8>)
 800f608:	4618      	mov	r0, r3
 800f60a:	f016 faa1 	bl	8025b50 <memcpy>
  for(i=0;i<n;i++)
 800f60e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f610:	3301      	adds	r3, #1
 800f612:	62fb      	str	r3, [r7, #44]	; 0x2c
 800f614:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f616:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f618:	429a      	cmp	r2, r3
 800f61a:	dbd9      	blt.n	800f5d0 <Load_Buf+0x60>
  }
  if(f_read(&USERFile, F_Buff, 4096, &j)!= FR_OK)
 800f61c:	f107 030c 	add.w	r3, r7, #12
 800f620:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800f624:	4940      	ldr	r1, [pc, #256]	; (800f728 <Load_Buf+0x1b8>)
 800f626:	483e      	ldr	r0, [pc, #248]	; (800f720 <Load_Buf+0x1b0>)
 800f628:	f014 fd1a 	bl	8024060 <f_read>
 800f62c:	4603      	mov	r3, r0
 800f62e:	2b00      	cmp	r3, #0
 800f630:	d001      	beq.n	800f636 <Load_Buf+0xc6>
  	return FILE_RW_ERR;
 800f632:	2303      	movs	r3, #3
 800f634:	e06d      	b.n	800f712 <Load_Buf+0x1a2>
  f_close(&USERFile);
 800f636:	483a      	ldr	r0, [pc, #232]	; (800f720 <Load_Buf+0x1b0>)
 800f638:	f014 fff8 	bl	802462c <f_close>

  ptr=(short*)F_Sector;                               //�����ֳ�
 800f63c:	4b3c      	ldr	r3, [pc, #240]	; (800f730 <Load_Buf+0x1c0>)
 800f63e:	623b      	str	r3, [r7, #32]
  *ptr++=0xaa55;
 800f640:	6a3b      	ldr	r3, [r7, #32]
 800f642:	1c9a      	adds	r2, r3, #2
 800f644:	623a      	str	r2, [r7, #32]
 800f646:	f64a 2255 	movw	r2, #43605	; 0xaa55
 800f64a:	801a      	strh	r2, [r3, #0]
  *ptr++=Sampl[0];
 800f64c:	6a3b      	ldr	r3, [r7, #32]
 800f64e:	1c9a      	adds	r2, r3, #2
 800f650:	623a      	str	r2, [r7, #32]
 800f652:	4a36      	ldr	r2, [pc, #216]	; (800f72c <Load_Buf+0x1bc>)
 800f654:	f9b2 2000 	ldrsh.w	r2, [r2]
 800f658:	801a      	strh	r2, [r3, #0]
  *ptr++=Sampl[1];
 800f65a:	6a3b      	ldr	r3, [r7, #32]
 800f65c:	1c9a      	adds	r2, r3, #2
 800f65e:	623a      	str	r2, [r7, #32]
 800f660:	4a32      	ldr	r2, [pc, #200]	; (800f72c <Load_Buf+0x1bc>)
 800f662:	f9b2 2002 	ldrsh.w	r2, [r2, #2]
 800f666:	801a      	strh	r2, [r3, #0]
  *ptr++=List[Y_RANGES].Val;
 800f668:	6a3b      	ldr	r3, [r7, #32]
 800f66a:	1c9a      	adds	r2, r3, #2
 800f66c:	623a      	str	r2, [r7, #32]
 800f66e:	4a2d      	ldr	r2, [pc, #180]	; (800f724 <Load_Buf+0x1b4>)
 800f670:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 800f674:	801a      	strh	r2, [r3, #0]
  *ptr++=List[PROBEATT].Val;
 800f676:	6a3b      	ldr	r3, [r7, #32]
 800f678:	1c9a      	adds	r2, r3, #2
 800f67a:	623a      	str	r2, [r7, #32]
 800f67c:	4a29      	ldr	r2, [pc, #164]	; (800f724 <Load_Buf+0x1b4>)
 800f67e:	f9b2 2014 	ldrsh.w	r2, [r2, #20]
 800f682:	801a      	strh	r2, [r3, #0]
  *ptr++=List[SMPL_DPTH].Val;
 800f684:	6a3b      	ldr	r3, [r7, #32]
 800f686:	1c9a      	adds	r2, r3, #2
 800f688:	623a      	str	r2, [r7, #32]
 800f68a:	4a26      	ldr	r2, [pc, #152]	; (800f724 <Load_Buf+0x1b4>)
 800f68c:	f9b2 204c 	ldrsh.w	r2, [r2, #76]	; 0x4c
 800f690:	801a      	strh	r2, [r3, #0]
  ptr =(short*)F_Buff;                            //��ԭ���Ĳ���
 800f692:	4b25      	ldr	r3, [pc, #148]	; (800f728 <Load_Buf+0x1b8>)
 800f694:	623b      	str	r3, [r7, #32]
  Sampl[0]=*ptr++;
 800f696:	6a3b      	ldr	r3, [r7, #32]
 800f698:	1c9a      	adds	r2, r3, #2
 800f69a:	623a      	str	r2, [r7, #32]
 800f69c:	f9b3 2000 	ldrsh.w	r2, [r3]
 800f6a0:	4b22      	ldr	r3, [pc, #136]	; (800f72c <Load_Buf+0x1bc>)
 800f6a2:	801a      	strh	r2, [r3, #0]
  Sampl[1]=*ptr++;
 800f6a4:	6a3b      	ldr	r3, [r7, #32]
 800f6a6:	1c9a      	adds	r2, r3, #2
 800f6a8:	623a      	str	r2, [r7, #32]
 800f6aa:	f9b3 2000 	ldrsh.w	r2, [r3]
 800f6ae:	4b1f      	ldr	r3, [pc, #124]	; (800f72c <Load_Buf+0x1bc>)
 800f6b0:	805a      	strh	r2, [r3, #2]
  List[Y_RANGES].Val=*ptr++;
 800f6b2:	6a3b      	ldr	r3, [r7, #32]
 800f6b4:	1c9a      	adds	r2, r3, #2
 800f6b6:	623a      	str	r2, [r7, #32]
 800f6b8:	f9b3 2000 	ldrsh.w	r2, [r3]
 800f6bc:	4b19      	ldr	r3, [pc, #100]	; (800f724 <Load_Buf+0x1b4>)
 800f6be:	809a      	strh	r2, [r3, #4]
  List[PROBEATT].Val=*ptr++;
 800f6c0:	6a3b      	ldr	r3, [r7, #32]
 800f6c2:	1c9a      	adds	r2, r3, #2
 800f6c4:	623a      	str	r2, [r7, #32]
 800f6c6:	f9b3 2000 	ldrsh.w	r2, [r3]
 800f6ca:	4b16      	ldr	r3, [pc, #88]	; (800f724 <Load_Buf+0x1b4>)
 800f6cc:	829a      	strh	r2, [r3, #20]
  List[SMPL_DPTH].Val=*ptr++;
 800f6ce:	6a3b      	ldr	r3, [r7, #32]
 800f6d0:	1c9a      	adds	r2, r3, #2
 800f6d2:	623a      	str	r2, [r7, #32]
 800f6d4:	f9b3 2000 	ldrsh.w	r2, [r3]
 800f6d8:	4b12      	ldr	r3, [pc, #72]	; (800f724 <Load_Buf+0x1b4>)
 800f6da:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  Status |=  STOP;
 800f6de:	4b15      	ldr	r3, [pc, #84]	; (800f734 <Load_Buf+0x1c4>)
 800f6e0:	f9b3 3000 	ldrsh.w	r3, [r3]
 800f6e4:	f043 0301 	orr.w	r3, r3, #1
 800f6e8:	b21a      	sxth	r2, r3
 800f6ea:	4b12      	ldr	r3, [pc, #72]	; (800f734 <Load_Buf+0x1c4>)
 800f6ec:	801a      	strh	r2, [r3, #0]
  DispStatus();
 800f6ee:	f004 fa27 	bl	8013b40 <DispStatus>
  if(List[LOAD_BUF].Val<99)
 800f6f2:	4b0c      	ldr	r3, [pc, #48]	; (800f724 <Load_Buf+0x1b4>)
 800f6f4:	f9b3 311c 	ldrsh.w	r3, [r3, #284]	; 0x11c
 800f6f8:	2b62      	cmp	r3, #98	; 0x62
 800f6fa:	dc09      	bgt.n	800f710 <Load_Buf+0x1a0>
	  List[LOAD_BUF].Val++;
 800f6fc:	4b09      	ldr	r3, [pc, #36]	; (800f724 <Load_Buf+0x1b4>)
 800f6fe:	f9b3 311c 	ldrsh.w	r3, [r3, #284]	; 0x11c
 800f702:	b29b      	uxth	r3, r3
 800f704:	3301      	adds	r3, #1
 800f706:	b29b      	uxth	r3, r3
 800f708:	b21a      	sxth	r2, r3
 800f70a:	4b06      	ldr	r3, [pc, #24]	; (800f724 <Load_Buf+0x1b4>)
 800f70c:	f8a3 211c 	strh.w	r2, [r3, #284]	; 0x11c
  return 0;
 800f710:	2300      	movs	r3, #0
}
 800f712:	4618      	mov	r0, r3
 800f714:	3730      	adds	r7, #48	; 0x30
 800f716:	46bd      	mov	sp, r7
 800f718:	bd80      	pop	{r7, pc}
 800f71a:	bf00      	nop
 800f71c:	08000248 	.word	0x08000248
 800f720:	20008a88 	.word	0x20008a88
 800f724:	20000274 	.word	0x20000274
 800f728:	20002604 	.word	0x20002604
 800f72c:	2000369c 	.word	0x2000369c
 800f730:	20002404 	.word	0x20002404
 800f734:	2000079c 	.word	0x2000079c

0800f738 <Save_Buf>:

/*******************************************************************************
Save_Buf: ����ɼ����ݻ�����ΪBUF��ʽ    ���룺�ļ����     ����ֵ��0x00=�ɹ�
*******************************************************************************/
char Save_Buf(short FileNo)
{
 800f738:	b580      	push	{r7, lr}
 800f73a:	b08a      	sub	sp, #40	; 0x28
 800f73c:	af00      	add	r7, sp, #0
 800f73e:	4603      	mov	r3, r0
 800f740:	80fb      	strh	r3, [r7, #6]
  char pFileName[13]="DATA   .BUF";
 800f742:	4a55      	ldr	r2, [pc, #340]	; (800f898 <Save_Buf+0x160>)
 800f744:	f107 030c 	add.w	r3, r7, #12
 800f748:	ca07      	ldmia	r2, {r0, r1, r2}
 800f74a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800f74e:	2300      	movs	r3, #0
 800f750:	763b      	strb	r3, [r7, #24]
  int i;
  short *p;
  char  l=0;
 800f752:	2300      	movs	r3, #0
 800f754:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  short n;
  unsigned j;

  n=2;
 800f758:	2302      	movs	r3, #2
 800f75a:	843b      	strh	r3, [r7, #32]

  if(List[SMPL_DPTH].Val==3) n =4 ;//8K
 800f75c:	4b4f      	ldr	r3, [pc, #316]	; (800f89c <Save_Buf+0x164>)
 800f75e:	f9b3 304c 	ldrsh.w	r3, [r3, #76]	; 0x4c
 800f762:	2b03      	cmp	r3, #3
 800f764:	d101      	bne.n	800f76a <Save_Buf+0x32>
 800f766:	2304      	movs	r3, #4
 800f768:	843b      	strh	r3, [r7, #32]

  Make_Filename(FileNo, pFileName);
 800f76a:	f107 020c 	add.w	r2, r7, #12
 800f76e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800f772:	4611      	mov	r1, r2
 800f774:	4618      	mov	r0, r3
 800f776:	f7ff fe2f 	bl	800f3d8 <Make_Filename>
  if(f_open(&USERFile, pFileName, FA_OPEN_ALWAYS | FA_WRITE | FA_READ)!=FR_OK)
 800f77a:	f107 030c 	add.w	r3, r7, #12
 800f77e:	2213      	movs	r2, #19
 800f780:	4619      	mov	r1, r3
 800f782:	4847      	ldr	r0, [pc, #284]	; (800f8a0 <Save_Buf+0x168>)
 800f784:	f014 fab0 	bl	8023ce8 <f_open>
 800f788:	4603      	mov	r3, r0
 800f78a:	2b00      	cmp	r3, #0
 800f78c:	d001      	beq.n	800f792 <Save_Buf+0x5a>
	  return DISK_RW_ERR;
 800f78e:	2304      	movs	r3, #4
 800f790:	e07d      	b.n	800f88e <Save_Buf+0x156>

  for(i=0; i<n; i++)
 800f792:	2300      	movs	r3, #0
 800f794:	627b      	str	r3, [r7, #36]	; 0x24
 800f796:	e02b      	b.n	800f7f0 <Save_Buf+0xb8>
  {
    memcpy(F_Buff,&(Sampl[i*4096/2+2]),4096);
 800f798:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f79a:	02db      	lsls	r3, r3, #11
 800f79c:	3302      	adds	r3, #2
 800f79e:	005b      	lsls	r3, r3, #1
 800f7a0:	4a40      	ldr	r2, [pc, #256]	; (800f8a4 <Save_Buf+0x16c>)
 800f7a2:	4413      	add	r3, r2
 800f7a4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800f7a8:	4619      	mov	r1, r3
 800f7aa:	483f      	ldr	r0, [pc, #252]	; (800f8a8 <Save_Buf+0x170>)
 800f7ac:	f016 f9d0 	bl	8025b50 <memcpy>
    if(f_write( &USERFile, F_Buff, 4096, &j)!= FR_OK) return FILE_RW_ERR; // д������
 800f7b0:	f107 0308 	add.w	r3, r7, #8
 800f7b4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800f7b8:	493b      	ldr	r1, [pc, #236]	; (800f8a8 <Save_Buf+0x170>)
 800f7ba:	4839      	ldr	r0, [pc, #228]	; (800f8a0 <Save_Buf+0x168>)
 800f7bc:	f014 fd69 	bl	8024292 <f_write>
 800f7c0:	4603      	mov	r3, r0
 800f7c2:	2b00      	cmp	r3, #0
 800f7c4:	d001      	beq.n	800f7ca <Save_Buf+0x92>
 800f7c6:	2303      	movs	r3, #3
 800f7c8:	e061      	b.n	800f88e <Save_Buf+0x156>
    PrintClk(264,2,(l++ >>1) & 3);                    // ����ָʾ
 800f7ca:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800f7ce:	1c5a      	adds	r2, r3, #1
 800f7d0:	f887 2023 	strb.w	r2, [r7, #35]	; 0x23
 800f7d4:	085b      	lsrs	r3, r3, #1
 800f7d6:	b2db      	uxtb	r3, r3
 800f7d8:	f003 0303 	and.w	r3, r3, #3
 800f7dc:	b2db      	uxtb	r3, r3
 800f7de:	461a      	mov	r2, r3
 800f7e0:	2102      	movs	r1, #2
 800f7e2:	f44f 7084 	mov.w	r0, #264	; 0x108
 800f7e6:	f7ff fc3f 	bl	800f068 <PrintClk>
  for(i=0; i<n; i++)
 800f7ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f7ec:	3301      	adds	r3, #1
 800f7ee:	627b      	str	r3, [r7, #36]	; 0x24
 800f7f0:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800f7f4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f7f6:	429a      	cmp	r2, r3
 800f7f8:	dbce      	blt.n	800f798 <Save_Buf+0x60>
  }
  memset(F_Buff,0,4096);
 800f7fa:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800f7fe:	2100      	movs	r1, #0
 800f800:	4829      	ldr	r0, [pc, #164]	; (800f8a8 <Save_Buf+0x170>)
 800f802:	f016 f9b3 	bl	8025b6c <memset>
  p =(short*)&F_Buff;
 800f806:	4b28      	ldr	r3, [pc, #160]	; (800f8a8 <Save_Buf+0x170>)
 800f808:	61fb      	str	r3, [r7, #28]
  *p++=Sampl[0];
 800f80a:	69fb      	ldr	r3, [r7, #28]
 800f80c:	1c9a      	adds	r2, r3, #2
 800f80e:	61fa      	str	r2, [r7, #28]
 800f810:	4a24      	ldr	r2, [pc, #144]	; (800f8a4 <Save_Buf+0x16c>)
 800f812:	f9b2 2000 	ldrsh.w	r2, [r2]
 800f816:	801a      	strh	r2, [r3, #0]
  *p++=Sampl[1];
 800f818:	69fb      	ldr	r3, [r7, #28]
 800f81a:	1c9a      	adds	r2, r3, #2
 800f81c:	61fa      	str	r2, [r7, #28]
 800f81e:	4a21      	ldr	r2, [pc, #132]	; (800f8a4 <Save_Buf+0x16c>)
 800f820:	f9b2 2002 	ldrsh.w	r2, [r2, #2]
 800f824:	801a      	strh	r2, [r3, #0]
  *p++=List[Y_RANGES].Val;
 800f826:	69fb      	ldr	r3, [r7, #28]
 800f828:	1c9a      	adds	r2, r3, #2
 800f82a:	61fa      	str	r2, [r7, #28]
 800f82c:	4a1b      	ldr	r2, [pc, #108]	; (800f89c <Save_Buf+0x164>)
 800f82e:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 800f832:	801a      	strh	r2, [r3, #0]
  *p++=List[PROBEATT].Val;
 800f834:	69fb      	ldr	r3, [r7, #28]
 800f836:	1c9a      	adds	r2, r3, #2
 800f838:	61fa      	str	r2, [r7, #28]
 800f83a:	4a18      	ldr	r2, [pc, #96]	; (800f89c <Save_Buf+0x164>)
 800f83c:	f9b2 2014 	ldrsh.w	r2, [r2, #20]
 800f840:	801a      	strh	r2, [r3, #0]
  *p++=List[SMPL_DPTH].Val;
 800f842:	69fb      	ldr	r3, [r7, #28]
 800f844:	1c9a      	adds	r2, r3, #2
 800f846:	61fa      	str	r2, [r7, #28]
 800f848:	4a14      	ldr	r2, [pc, #80]	; (800f89c <Save_Buf+0x164>)
 800f84a:	f9b2 204c 	ldrsh.w	r2, [r2, #76]	; 0x4c
 800f84e:	801a      	strh	r2, [r3, #0]
  if(f_write( &USERFile, F_Buff, 12, &j)!= FR_OK) return FILE_RW_ERR; // д������
 800f850:	f107 0308 	add.w	r3, r7, #8
 800f854:	220c      	movs	r2, #12
 800f856:	4914      	ldr	r1, [pc, #80]	; (800f8a8 <Save_Buf+0x170>)
 800f858:	4811      	ldr	r0, [pc, #68]	; (800f8a0 <Save_Buf+0x168>)
 800f85a:	f014 fd1a 	bl	8024292 <f_write>
 800f85e:	4603      	mov	r3, r0
 800f860:	2b00      	cmp	r3, #0
 800f862:	d001      	beq.n	800f868 <Save_Buf+0x130>
 800f864:	2303      	movs	r3, #3
 800f866:	e012      	b.n	800f88e <Save_Buf+0x156>
  f_close(&USERFile);
 800f868:	480d      	ldr	r0, [pc, #52]	; (800f8a0 <Save_Buf+0x168>)
 800f86a:	f014 fedf 	bl	802462c <f_close>
  if(List[SAVE_BUF].Val<99)
 800f86e:	4b0b      	ldr	r3, [pc, #44]	; (800f89c <Save_Buf+0x164>)
 800f870:	f9b3 30fc 	ldrsh.w	r3, [r3, #252]	; 0xfc
 800f874:	2b62      	cmp	r3, #98	; 0x62
 800f876:	dc09      	bgt.n	800f88c <Save_Buf+0x154>
	  List[SAVE_BUF].Val++;
 800f878:	4b08      	ldr	r3, [pc, #32]	; (800f89c <Save_Buf+0x164>)
 800f87a:	f9b3 30fc 	ldrsh.w	r3, [r3, #252]	; 0xfc
 800f87e:	b29b      	uxth	r3, r3
 800f880:	3301      	adds	r3, #1
 800f882:	b29b      	uxth	r3, r3
 800f884:	b21a      	sxth	r2, r3
 800f886:	4b05      	ldr	r3, [pc, #20]	; (800f89c <Save_Buf+0x164>)
 800f888:	f8a3 20fc 	strh.w	r2, [r3, #252]	; 0xfc
  return OK;
 800f88c:	2300      	movs	r3, #0
}
 800f88e:	4618      	mov	r0, r3
 800f890:	3728      	adds	r7, #40	; 0x28
 800f892:	46bd      	mov	sp, r7
 800f894:	bd80      	pop	{r7, pc}
 800f896:	bf00      	nop
 800f898:	08000248 	.word	0x08000248
 800f89c:	20000274 	.word	0x20000274
 800f8a0:	20008a88 	.word	0x20008a88
 800f8a4:	2000369c 	.word	0x2000369c
 800f8a8:	20002604 	.word	0x20002604

0800f8ac <Save_Dat>:

/*******************************************************************************
Save_Dat: ���浱ǰ��Ļ��ʾͼ��ԭʼ����    ���룺�ļ����     ����ֵ��0x00=�ɹ�
*******************************************************************************/
char Save_Dat(short FileNo)
{
 800f8ac:	b580      	push	{r7, lr}
 800f8ae:	b088      	sub	sp, #32
 800f8b0:	af00      	add	r7, sp, #0
 800f8b2:	4603      	mov	r3, r0
 800f8b4:	80fb      	strh	r3, [r7, #6]
  char pFileName[13]="FILE   .DAT";
 800f8b6:	4a3c      	ldr	r2, [pc, #240]	; (800f9a8 <Save_Dat+0xfc>)
 800f8b8:	f107 0310 	add.w	r3, r7, #16
 800f8bc:	ca07      	ldmia	r2, {r0, r1, r2}
 800f8be:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800f8c2:	2300      	movs	r3, #0
 800f8c4:	773b      	strb	r3, [r7, #28]
  unsigned j;

  Make_Filename(FileNo, pFileName);
 800f8c6:	f107 0210 	add.w	r2, r7, #16
 800f8ca:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800f8ce:	4611      	mov	r1, r2
 800f8d0:	4618      	mov	r0, r3
 800f8d2:	f7ff fd81 	bl	800f3d8 <Make_Filename>
  memset(F_Buff,0,4096);
 800f8d6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800f8da:	2100      	movs	r1, #0
 800f8dc:	4833      	ldr	r0, [pc, #204]	; (800f9ac <Save_Dat+0x100>)
 800f8de:	f016 f945 	bl	8025b6c <memset>
  if(f_open(&USERFile, pFileName, FA_OPEN_ALWAYS | FA_WRITE | FA_READ)!=FR_OK)
 800f8e2:	f107 0310 	add.w	r3, r7, #16
 800f8e6:	2213      	movs	r2, #19
 800f8e8:	4619      	mov	r1, r3
 800f8ea:	4831      	ldr	r0, [pc, #196]	; (800f9b0 <Save_Dat+0x104>)
 800f8ec:	f014 f9fc 	bl	8023ce8 <f_open>
 800f8f0:	4603      	mov	r3, r0
 800f8f2:	2b00      	cmp	r3, #0
 800f8f4:	d001      	beq.n	800f8fa <Save_Dat+0x4e>
	  return DISK_RW_ERR;
 800f8f6:	2304      	movs	r3, #4
 800f8f8:	e052      	b.n	800f9a0 <Save_Dat+0xf4>
  F_Buff[0]  = 1;              //Ver0001
 800f8fa:	4b2c      	ldr	r3, [pc, #176]	; (800f9ac <Save_Dat+0x100>)
 800f8fc:	2201      	movs	r2, #1
 800f8fe:	701a      	strb	r2, [r3, #0]
  F_Buff[1]  = List[V0_POSI].Val;
 800f900:	4b2c      	ldr	r3, [pc, #176]	; (800f9b4 <Save_Dat+0x108>)
 800f902:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 800f906:	b2da      	uxtb	r2, r3
 800f908:	4b28      	ldr	r3, [pc, #160]	; (800f9ac <Save_Dat+0x100>)
 800f90a:	705a      	strb	r2, [r3, #1]
  F_Buff[2]  = List[EXT_POSI].Val;
 800f90c:	4b29      	ldr	r3, [pc, #164]	; (800f9b4 <Save_Dat+0x108>)
 800f90e:	f9b3 30dc 	ldrsh.w	r3, [r3, #220]	; 0xdc
 800f912:	b2da      	uxtb	r2, r3
 800f914:	4b25      	ldr	r3, [pc, #148]	; (800f9ac <Save_Dat+0x100>)
 800f916:	709a      	strb	r2, [r3, #2]
  F_Buff[3]  = List[TIM_BASE].Val;
 800f918:	4b26      	ldr	r3, [pc, #152]	; (800f9b4 <Save_Dat+0x108>)
 800f91a:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800f91e:	b2da      	uxtb	r2, r3
 800f920:	4b22      	ldr	r3, [pc, #136]	; (800f9ac <Save_Dat+0x100>)
 800f922:	70da      	strb	r2, [r3, #3]
  F_Buff[4]  = List[Y_RANGES].Val;
 800f924:	4b23      	ldr	r3, [pc, #140]	; (800f9b4 <Save_Dat+0x108>)
 800f926:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800f92a:	b2da      	uxtb	r2, r3
 800f92c:	4b1f      	ldr	r3, [pc, #124]	; (800f9ac <Save_Dat+0x100>)
 800f92e:	711a      	strb	r2, [r3, #4]
  F_Buff[5]  = List[COUPLING].Val;
 800f930:	4b20      	ldr	r3, [pc, #128]	; (800f9b4 <Save_Dat+0x108>)
 800f932:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 800f936:	b2da      	uxtb	r2, r3
 800f938:	4b1c      	ldr	r3, [pc, #112]	; (800f9ac <Save_Dat+0x100>)
 800f93a:	715a      	strb	r2, [r3, #5]
  F_Buff[6]  = List[PROBEATT].Val;
 800f93c:	4b1d      	ldr	r3, [pc, #116]	; (800f9b4 <Save_Dat+0x108>)
 800f93e:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 800f942:	b2da      	uxtb	r2, r3
 800f944:	4b19      	ldr	r3, [pc, #100]	; (800f9ac <Save_Dat+0x100>)
 800f946:	719a      	strb	r2, [r3, #6]
  F_Buff[7]  = List[TR_MODE].Val;
 800f948:	4b1a      	ldr	r3, [pc, #104]	; (800f9b4 <Save_Dat+0x108>)
 800f94a:	f9b3 3074 	ldrsh.w	r3, [r3, #116]	; 0x74
 800f94e:	b2da      	uxtb	r2, r3
 800f950:	4b16      	ldr	r3, [pc, #88]	; (800f9ac <Save_Dat+0x100>)
 800f952:	71da      	strb	r2, [r3, #7]

  memcpy(&F_Buff[10], WaveBuf, 300);
 800f954:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800f958:	4917      	ldr	r1, [pc, #92]	; (800f9b8 <Save_Dat+0x10c>)
 800f95a:	4818      	ldr	r0, [pc, #96]	; (800f9bc <Save_Dat+0x110>)
 800f95c:	f016 f8f8 	bl	8025b50 <memcpy>
  if(f_write( &USERFile, F_Buff, 310, &j)!= FR_OK) return FILE_RW_ERR; // д������
 800f960:	f107 030c 	add.w	r3, r7, #12
 800f964:	f44f 729b 	mov.w	r2, #310	; 0x136
 800f968:	4910      	ldr	r1, [pc, #64]	; (800f9ac <Save_Dat+0x100>)
 800f96a:	4811      	ldr	r0, [pc, #68]	; (800f9b0 <Save_Dat+0x104>)
 800f96c:	f014 fc91 	bl	8024292 <f_write>
 800f970:	4603      	mov	r3, r0
 800f972:	2b00      	cmp	r3, #0
 800f974:	d001      	beq.n	800f97a <Save_Dat+0xce>
 800f976:	2303      	movs	r3, #3
 800f978:	e012      	b.n	800f9a0 <Save_Dat+0xf4>
  f_close(&USERFile);
 800f97a:	480d      	ldr	r0, [pc, #52]	; (800f9b0 <Save_Dat+0x104>)
 800f97c:	f014 fe56 	bl	802462c <f_close>
  if(List[SAVE_DAT].Val<99)List[SAVE_DAT].Val++;
 800f980:	4b0c      	ldr	r3, [pc, #48]	; (800f9b4 <Save_Dat+0x108>)
 800f982:	f9b3 30f4 	ldrsh.w	r3, [r3, #244]	; 0xf4
 800f986:	2b62      	cmp	r3, #98	; 0x62
 800f988:	dc09      	bgt.n	800f99e <Save_Dat+0xf2>
 800f98a:	4b0a      	ldr	r3, [pc, #40]	; (800f9b4 <Save_Dat+0x108>)
 800f98c:	f9b3 30f4 	ldrsh.w	r3, [r3, #244]	; 0xf4
 800f990:	b29b      	uxth	r3, r3
 800f992:	3301      	adds	r3, #1
 800f994:	b29b      	uxth	r3, r3
 800f996:	b21a      	sxth	r2, r3
 800f998:	4b06      	ldr	r3, [pc, #24]	; (800f9b4 <Save_Dat+0x108>)
 800f99a:	f8a3 20f4 	strh.w	r2, [r3, #244]	; 0xf4
  return OK;
 800f99e:	2300      	movs	r3, #0
}
 800f9a0:	4618      	mov	r0, r3
 800f9a2:	3720      	adds	r7, #32
 800f9a4:	46bd      	mov	sp, r7
 800f9a6:	bd80      	pop	{r7, pc}
 800f9a8:	08000258 	.word	0x08000258
 800f9ac:	20002604 	.word	0x20002604
 800f9b0:	20008a88 	.word	0x20008a88
 800f9b4:	20000274 	.word	0x20000274
 800f9b8:	20001a38 	.word	0x20001a38
 800f9bc:	2000260e 	.word	0x2000260e

0800f9c0 <Load_Dat>:

/*******************************************************************************
Load_Dat: ���ر��������Ļͼ��ԭʼ����    ���룺�ļ����     ����ֵ��0x00=�ɹ�
*******************************************************************************/
char Load_Dat(short FileNo)
{
 800f9c0:	b580      	push	{r7, lr}
 800f9c2:	b088      	sub	sp, #32
 800f9c4:	af00      	add	r7, sp, #0
 800f9c6:	4603      	mov	r3, r0
 800f9c8:	80fb      	strh	r3, [r7, #6]
  char pFileName[13]="FILE   .DAT";
 800f9ca:	4a52      	ldr	r2, [pc, #328]	; (800fb14 <Load_Dat+0x154>)
 800f9cc:	f107 030c 	add.w	r3, r7, #12
 800f9d0:	ca07      	ldmia	r2, {r0, r1, r2}
 800f9d2:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800f9d6:	2300      	movs	r3, #0
 800f9d8:	763b      	strb	r3, [r7, #24]
  short  Rvalue;
  int i;
  unsigned j;

  Make_Filename(FileNo, pFileName);
 800f9da:	f107 020c 	add.w	r2, r7, #12
 800f9de:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800f9e2:	4611      	mov	r1, r2
 800f9e4:	4618      	mov	r0, r3
 800f9e6:	f7ff fcf7 	bl	800f3d8 <Make_Filename>

  Rvalue =f_open( &USERFile, pFileName, FA_OPEN_EXISTING |FA_READ );
 800f9ea:	f107 030c 	add.w	r3, r7, #12
 800f9ee:	2201      	movs	r2, #1
 800f9f0:	4619      	mov	r1, r3
 800f9f2:	4849      	ldr	r0, [pc, #292]	; (800fb18 <Load_Dat+0x158>)
 800f9f4:	f014 f978 	bl	8023ce8 <f_open>
 800f9f8:	4603      	mov	r3, r0
 800f9fa:	837b      	strh	r3, [r7, #26]
  if(Rvalue !=FR_OK)
 800f9fc:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 800fa00:	2b00      	cmp	r3, #0
 800fa02:	d002      	beq.n	800fa0a <Load_Dat+0x4a>
	  return Rvalue;
 800fa04:	8b7b      	ldrh	r3, [r7, #26]
 800fa06:	b2db      	uxtb	r3, r3
 800fa08:	e07f      	b.n	800fb0a <Load_Dat+0x14a>

  if(f_read(&USERFile, F_Buff, 310, &j)!= FR_OK)
 800fa0a:	f107 0308 	add.w	r3, r7, #8
 800fa0e:	f44f 729b 	mov.w	r2, #310	; 0x136
 800fa12:	4942      	ldr	r1, [pc, #264]	; (800fb1c <Load_Dat+0x15c>)
 800fa14:	4840      	ldr	r0, [pc, #256]	; (800fb18 <Load_Dat+0x158>)
 800fa16:	f014 fb23 	bl	8024060 <f_read>
 800fa1a:	4603      	mov	r3, r0
 800fa1c:	2b00      	cmp	r3, #0
 800fa1e:	d001      	beq.n	800fa24 <Load_Dat+0x64>
   	return FILE_RW_ERR;
 800fa20:	2303      	movs	r3, #3
 800fa22:	e072      	b.n	800fb0a <Load_Dat+0x14a>
   if(j != 310)
 800fa24:	68bb      	ldr	r3, [r7, #8]
 800fa26:	f5b3 7f9b 	cmp.w	r3, #310	; 0x136
 800fa2a:	d001      	beq.n	800fa30 <Load_Dat+0x70>
   	return FILE_RW_ERR;
 800fa2c:	2303      	movs	r3, #3
 800fa2e:	e06c      	b.n	800fb0a <Load_Dat+0x14a>

  memcpy(Data, F_Buff, 310);
 800fa30:	f44f 729b 	mov.w	r2, #310	; 0x136
 800fa34:	4939      	ldr	r1, [pc, #228]	; (800fb1c <Load_Dat+0x15c>)
 800fa36:	483a      	ldr	r0, [pc, #232]	; (800fb20 <Load_Dat+0x160>)
 800fa38:	f016 f88a 	bl	8025b50 <memcpy>

  List[TIM_BASE].Val = F_Buff[3];
 800fa3c:	4b37      	ldr	r3, [pc, #220]	; (800fb1c <Load_Dat+0x15c>)
 800fa3e:	78db      	ldrb	r3, [r3, #3]
 800fa40:	b21a      	sxth	r2, r3
 800fa42:	4b38      	ldr	r3, [pc, #224]	; (800fb24 <Load_Dat+0x164>)
 800fa44:	879a      	strh	r2, [r3, #60]	; 0x3c
  List[Y_RANGES].Val = F_Buff[4];
 800fa46:	4b35      	ldr	r3, [pc, #212]	; (800fb1c <Load_Dat+0x15c>)
 800fa48:	791b      	ldrb	r3, [r3, #4]
 800fa4a:	b21a      	sxth	r2, r3
 800fa4c:	4b35      	ldr	r3, [pc, #212]	; (800fb24 <Load_Dat+0x164>)
 800fa4e:	809a      	strh	r2, [r3, #4]
  List[COUPLING].Val = F_Buff[5];
 800fa50:	4b32      	ldr	r3, [pc, #200]	; (800fb1c <Load_Dat+0x15c>)
 800fa52:	795b      	ldrb	r3, [r3, #5]
 800fa54:	b21a      	sxth	r2, r3
 800fa56:	4b33      	ldr	r3, [pc, #204]	; (800fb24 <Load_Dat+0x164>)
 800fa58:	819a      	strh	r2, [r3, #12]
  List[PROBEATT].Val = F_Buff[6];
 800fa5a:	4b30      	ldr	r3, [pc, #192]	; (800fb1c <Load_Dat+0x15c>)
 800fa5c:	799b      	ldrb	r3, [r3, #6]
 800fa5e:	b21a      	sxth	r2, r3
 800fa60:	4b30      	ldr	r3, [pc, #192]	; (800fb24 <Load_Dat+0x164>)
 800fa62:	829a      	strh	r2, [r3, #20]
  List[TR_MODE].Val  = F_Buff[7];
 800fa64:	4b2d      	ldr	r3, [pc, #180]	; (800fb1c <Load_Dat+0x15c>)
 800fa66:	79db      	ldrb	r3, [r3, #7]
 800fa68:	b21a      	sxth	r2, r3
 800fa6a:	4b2e      	ldr	r3, [pc, #184]	; (800fb24 <Load_Dat+0x164>)
 800fa6c:	f8a3 2074 	strh.w	r2, [r3, #116]	; 0x74

  for(i=0;i<4;i++)List[i].Flg |= UPD;
 800fa70:	2300      	movs	r3, #0
 800fa72:	61fb      	str	r3, [r7, #28]
 800fa74:	e010      	b.n	800fa98 <Load_Dat+0xd8>
 800fa76:	4a2b      	ldr	r2, [pc, #172]	; (800fb24 <Load_Dat+0x164>)
 800fa78:	69fb      	ldr	r3, [r7, #28]
 800fa7a:	00db      	lsls	r3, r3, #3
 800fa7c:	4413      	add	r3, r2
 800fa7e:	799b      	ldrb	r3, [r3, #6]
 800fa80:	f043 0320 	orr.w	r3, r3, #32
 800fa84:	b2d9      	uxtb	r1, r3
 800fa86:	4a27      	ldr	r2, [pc, #156]	; (800fb24 <Load_Dat+0x164>)
 800fa88:	69fb      	ldr	r3, [r7, #28]
 800fa8a:	00db      	lsls	r3, r3, #3
 800fa8c:	4413      	add	r3, r2
 800fa8e:	460a      	mov	r2, r1
 800fa90:	719a      	strb	r2, [r3, #6]
 800fa92:	69fb      	ldr	r3, [r7, #28]
 800fa94:	3301      	adds	r3, #1
 800fa96:	61fb      	str	r3, [r7, #28]
 800fa98:	69fb      	ldr	r3, [r7, #28]
 800fa9a:	2b03      	cmp	r3, #3
 800fa9c:	ddeb      	ble.n	800fa76 <Load_Dat+0xb6>
  List[EXT_REFN].Flg |= UPD;
 800fa9e:	4b21      	ldr	r3, [pc, #132]	; (800fb24 <Load_Dat+0x164>)
 800faa0:	f893 30d6 	ldrb.w	r3, [r3, #214]	; 0xd6
 800faa4:	f043 0320 	orr.w	r3, r3, #32
 800faa8:	b2da      	uxtb	r2, r3
 800faaa:	4b1e      	ldr	r3, [pc, #120]	; (800fb24 <Load_Dat+0x164>)
 800faac:	f883 20d6 	strb.w	r2, [r3, #214]	; 0xd6
  List[EXT_POSI].Flg |= UPD;
 800fab0:	4b1c      	ldr	r3, [pc, #112]	; (800fb24 <Load_Dat+0x164>)
 800fab2:	f893 30de 	ldrb.w	r3, [r3, #222]	; 0xde
 800fab6:	f043 0320 	orr.w	r3, r3, #32
 800faba:	b2da      	uxtb	r2, r3
 800fabc:	4b19      	ldr	r3, [pc, #100]	; (800fb24 <Load_Dat+0x164>)
 800fabe:	f883 20de 	strb.w	r2, [r3, #222]	; 0xde
  List[TIM_BASE].Flg |= UPD;
 800fac2:	4b18      	ldr	r3, [pc, #96]	; (800fb24 <Load_Dat+0x164>)
 800fac4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800fac8:	f043 0320 	orr.w	r3, r3, #32
 800facc:	b2da      	uxtb	r2, r3
 800face:	4b15      	ldr	r3, [pc, #84]	; (800fb24 <Load_Dat+0x164>)
 800fad0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  List[TR_MODE].Flg |= UPD;
 800fad4:	4b13      	ldr	r3, [pc, #76]	; (800fb24 <Load_Dat+0x164>)
 800fad6:	f893 3076 	ldrb.w	r3, [r3, #118]	; 0x76
 800fada:	f043 0320 	orr.w	r3, r3, #32
 800fade:	b2da      	uxtb	r2, r3
 800fae0:	4b10      	ldr	r3, [pc, #64]	; (800fb24 <Load_Dat+0x164>)
 800fae2:	f883 2076 	strb.w	r2, [r3, #118]	; 0x76
  Update_Detail();
 800fae6:	f002 ff9f 	bl	8012a28 <Update_Detail>
  if(List[LOAD_DAT].Val<99)List[LOAD_DAT].Val++;
 800faea:	4b0e      	ldr	r3, [pc, #56]	; (800fb24 <Load_Dat+0x164>)
 800faec:	f9b3 3114 	ldrsh.w	r3, [r3, #276]	; 0x114
 800faf0:	2b62      	cmp	r3, #98	; 0x62
 800faf2:	dc09      	bgt.n	800fb08 <Load_Dat+0x148>
 800faf4:	4b0b      	ldr	r3, [pc, #44]	; (800fb24 <Load_Dat+0x164>)
 800faf6:	f9b3 3114 	ldrsh.w	r3, [r3, #276]	; 0x114
 800fafa:	b29b      	uxth	r3, r3
 800fafc:	3301      	adds	r3, #1
 800fafe:	b29b      	uxth	r3, r3
 800fb00:	b21a      	sxth	r2, r3
 800fb02:	4b08      	ldr	r3, [pc, #32]	; (800fb24 <Load_Dat+0x164>)
 800fb04:	f8a3 2114 	strh.w	r2, [r3, #276]	; 0x114
  return OK;
 800fb08:	2300      	movs	r3, #0
}
 800fb0a:	4618      	mov	r0, r3
 800fb0c:	3720      	adds	r7, #32
 800fb0e:	46bd      	mov	sp, r7
 800fb10:	bd80      	pop	{r7, pc}
 800fb12:	bf00      	nop
 800fb14:	08000258 	.word	0x08000258
 800fb18:	20008a88 	.word	0x20008a88
 800fb1c:	20002604 	.word	0x20002604
 800fb20:	20000008 	.word	0x20000008
 800fb24:	20000274 	.word	0x20000274

0800fb28 <Save_Bmp>:

/*******************************************************************************
Save_Bmp: ���浱ǰ��Ļ��ʾͼ��ΪBMP��ʽ    ���룺�ļ����     ����ֵ��0x00=�ɹ�
*******************************************************************************/
char Save_Bmp(short FileNo)
{
 800fb28:	b5f0      	push	{r4, r5, r6, r7, lr}
 800fb2a:	b08d      	sub	sp, #52	; 0x34
 800fb2c:	af00      	add	r7, sp, #0
 800fb2e:	4603      	mov	r3, r0
 800fb30:	80fb      	strh	r3, [r7, #6]
  char  pFileName[13]="IMG_   .BMP";
 800fb32:	4aa6      	ldr	r2, [pc, #664]	; (800fdcc <Save_Bmp+0x2a4>)
 800fb34:	f107 0310 	add.w	r3, r7, #16
 800fb38:	ca07      	ldmia	r2, {r0, r1, r2}
 800fb3a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800fb3e:	2300      	movs	r3, #0
 800fb40:	773b      	strb	r3, [r7, #28]
  short x, y, i=54, j,ColorH,ColorL ;
 800fb42:	2336      	movs	r3, #54	; 0x36
 800fb44:	857b      	strh	r3, [r7, #42]	; 0x2a
  short k=0, l=0;
 800fb46:	2300      	movs	r3, #0
 800fb48:	84fb      	strh	r3, [r7, #38]	; 0x26
 800fb4a:	2300      	movs	r3, #0
 800fb4c:	84bb      	strh	r3, [r7, #36]	; 0x24
  unsigned m;

  if(Current == FN)
 800fb4e:	4ba0      	ldr	r3, [pc, #640]	; (800fdd0 <Save_Bmp+0x2a8>)
 800fb50:	f9b3 3000 	ldrsh.w	r3, [r3]
 800fb54:	2b05      	cmp	r3, #5
 800fb56:	d105      	bne.n	800fb64 <Save_Bmp+0x3c>
  {
    Close_Pop();
 800fb58:	f7fe ffb6 	bl	800eac8 <Close_Pop>
    DrawWindow(WaveBuf, ParamTab);
 800fb5c:	499d      	ldr	r1, [pc, #628]	; (800fdd4 <Save_Bmp+0x2ac>)
 800fb5e:	489e      	ldr	r0, [pc, #632]	; (800fdd8 <Save_Bmp+0x2b0>)
 800fb60:	f7fd ffb2 	bl	800dac8 <DrawWindow>
  }
  Make_Filename(FileNo, pFileName);
 800fb64:	f107 0210 	add.w	r2, r7, #16
 800fb68:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800fb6c:	4611      	mov	r1, r2
 800fb6e:	4618      	mov	r0, r3
 800fb70:	f7ff fc32 	bl	800f3d8 <Make_Filename>

  if(f_open(&USERFile, pFileName, FA_OPEN_ALWAYS | FA_WRITE | FA_READ)!=FR_OK)
 800fb74:	f107 0310 	add.w	r3, r7, #16
 800fb78:	2213      	movs	r2, #19
 800fb7a:	4619      	mov	r1, r3
 800fb7c:	4897      	ldr	r0, [pc, #604]	; (800fddc <Save_Bmp+0x2b4>)
 800fb7e:	f014 f8b3 	bl	8023ce8 <f_open>
 800fb82:	4603      	mov	r3, r0
 800fb84:	2b00      	cmp	r3, #0
 800fb86:	d001      	beq.n	800fb8c <Save_Bmp+0x64>
	  return DISK_RW_ERR;
 800fb88:	2304      	movs	r3, #4
 800fb8a:	e11b      	b.n	800fdc4 <Save_Bmp+0x29c>
  memcpy(F_Buff, BmpHead, 54);
 800fb8c:	4b94      	ldr	r3, [pc, #592]	; (800fde0 <Save_Bmp+0x2b8>)
 800fb8e:	4a95      	ldr	r2, [pc, #596]	; (800fde4 <Save_Bmp+0x2bc>)
 800fb90:	4614      	mov	r4, r2
 800fb92:	469c      	mov	ip, r3
 800fb94:	f104 0e30 	add.w	lr, r4, #48	; 0x30
 800fb98:	4665      	mov	r5, ip
 800fb9a:	4626      	mov	r6, r4
 800fb9c:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800fb9e:	6028      	str	r0, [r5, #0]
 800fba0:	6069      	str	r1, [r5, #4]
 800fba2:	60aa      	str	r2, [r5, #8]
 800fba4:	60eb      	str	r3, [r5, #12]
 800fba6:	3410      	adds	r4, #16
 800fba8:	f10c 0c10 	add.w	ip, ip, #16
 800fbac:	4574      	cmp	r4, lr
 800fbae:	d1f3      	bne.n	800fb98 <Save_Bmp+0x70>
 800fbb0:	4663      	mov	r3, ip
 800fbb2:	4622      	mov	r2, r4
 800fbb4:	6810      	ldr	r0, [r2, #0]
 800fbb6:	6018      	str	r0, [r3, #0]
 800fbb8:	8892      	ldrh	r2, [r2, #4]
 800fbba:	809a      	strh	r2, [r3, #4]
  i = 0x0036;                                     // ��ɫ���ſ�ʼ��ַ
 800fbbc:	2336      	movs	r3, #54	; 0x36
 800fbbe:	857b      	strh	r3, [r7, #42]	; 0x2a
  for(j=0; j<16; ++j)
 800fbc0:	2300      	movs	r3, #0
 800fbc2:	853b      	strh	r3, [r7, #40]	; 0x28
 800fbc4:	e042      	b.n	800fc4c <Save_Bmp+0x124>
  {
    F_Buff[j*4 +i+0]=(BMP_Color[j] & 0xF800)>>8;  // Bule
 800fbc6:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 800fbca:	4a87      	ldr	r2, [pc, #540]	; (800fde8 <Save_Bmp+0x2c0>)
 800fbcc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800fbd0:	121b      	asrs	r3, r3, #8
 800fbd2:	b2da      	uxtb	r2, r3
 800fbd4:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 800fbd8:	0099      	lsls	r1, r3, #2
 800fbda:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 800fbde:	440b      	add	r3, r1
 800fbe0:	f022 0207 	bic.w	r2, r2, #7
 800fbe4:	b2d1      	uxtb	r1, r2
 800fbe6:	4a7e      	ldr	r2, [pc, #504]	; (800fde0 <Save_Bmp+0x2b8>)
 800fbe8:	54d1      	strb	r1, [r2, r3]
    F_Buff[j*4 +i+1]=(BMP_Color[j] & 0x07E0)>>3;  // Green&
 800fbea:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 800fbee:	4a7e      	ldr	r2, [pc, #504]	; (800fde8 <Save_Bmp+0x2c0>)
 800fbf0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800fbf4:	10db      	asrs	r3, r3, #3
 800fbf6:	b2da      	uxtb	r2, r3
 800fbf8:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 800fbfc:	0099      	lsls	r1, r3, #2
 800fbfe:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 800fc02:	440b      	add	r3, r1
 800fc04:	3301      	adds	r3, #1
 800fc06:	f022 0203 	bic.w	r2, r2, #3
 800fc0a:	b2d1      	uxtb	r1, r2
 800fc0c:	4a74      	ldr	r2, [pc, #464]	; (800fde0 <Save_Bmp+0x2b8>)
 800fc0e:	54d1      	strb	r1, [r2, r3]
    F_Buff[j*4 +i+2]=(BMP_Color[j] & 0x001F)<<3;  // Red
 800fc10:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 800fc14:	4a74      	ldr	r2, [pc, #464]	; (800fde8 <Save_Bmp+0x2c0>)
 800fc16:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800fc1a:	00d9      	lsls	r1, r3, #3
 800fc1c:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 800fc20:	009a      	lsls	r2, r3, #2
 800fc22:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 800fc26:	4413      	add	r3, r2
 800fc28:	3302      	adds	r3, #2
 800fc2a:	b2c9      	uxtb	r1, r1
 800fc2c:	4a6c      	ldr	r2, [pc, #432]	; (800fde0 <Save_Bmp+0x2b8>)
 800fc2e:	54d1      	strb	r1, [r2, r3]
    F_Buff[j*4 +i+3]= 0;                          // Alpha
 800fc30:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 800fc34:	009a      	lsls	r2, r3, #2
 800fc36:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 800fc3a:	4413      	add	r3, r2
 800fc3c:	3303      	adds	r3, #3
 800fc3e:	4a68      	ldr	r2, [pc, #416]	; (800fde0 <Save_Bmp+0x2b8>)
 800fc40:	2100      	movs	r1, #0
 800fc42:	54d1      	strb	r1, [r2, r3]
  for(j=0; j<16; ++j)
 800fc44:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800fc46:	3301      	adds	r3, #1
 800fc48:	b29b      	uxth	r3, r3
 800fc4a:	853b      	strh	r3, [r7, #40]	; 0x28
 800fc4c:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 800fc50:	2b0f      	cmp	r3, #15
 800fc52:	ddb8      	ble.n	800fbc6 <Save_Bmp+0x9e>
  }
  i = 0x0076;                                     // ͼ�����ݿ�ʼ��ŵ�ַ
 800fc54:	2376      	movs	r3, #118	; 0x76
 800fc56:	857b      	strh	r3, [r7, #42]	; 0x2a
  for(y=0; y<240; y++)
 800fc58:	2300      	movs	r3, #0
 800fc5a:	85bb      	strh	r3, [r7, #44]	; 0x2c
 800fc5c:	e07b      	b.n	800fd56 <Save_Bmp+0x22e>
  {
    for(x=0; x<320 ; x+=2)
 800fc5e:	2300      	movs	r3, #0
 800fc60:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800fc62:	e06d      	b.n	800fd40 <Save_Bmp+0x218>
    {
      LCD_Set_Posi(x, y);
 800fc64:	f9b7 202c 	ldrsh.w	r2, [r7, #44]	; 0x2c
 800fc68:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 800fc6c:	4611      	mov	r1, r2
 800fc6e:	4618      	mov	r0, r3
 800fc70:	f001 fe5a 	bl	8011928 <LCD_Set_Posi>
      ColorH = LCD_Get_Pixel();
 800fc74:	f001 fece 	bl	8011a14 <LCD_Get_Pixel>
 800fc78:	4603      	mov	r3, r0
 800fc7a:	847b      	strh	r3, [r7, #34]	; 0x22
      LCD_Set_Posi(x+1, y);
 800fc7c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800fc7e:	3301      	adds	r3, #1
 800fc80:	b29b      	uxth	r3, r3
 800fc82:	b21b      	sxth	r3, r3
 800fc84:	f9b7 202c 	ldrsh.w	r2, [r7, #44]	; 0x2c
 800fc88:	4611      	mov	r1, r2
 800fc8a:	4618      	mov	r0, r3
 800fc8c:	f001 fe4c 	bl	8011928 <LCD_Set_Posi>
      ColorL = LCD_Get_Pixel();
 800fc90:	f001 fec0 	bl	8011a14 <LCD_Get_Pixel>
 800fc94:	4603      	mov	r3, r0
 800fc96:	843b      	strh	r3, [r7, #32]
      F_Buff[i] =(Color_Num(ColorH)<<4)+ Color_Num(ColorL);
 800fc98:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 800fc9c:	4618      	mov	r0, r3
 800fc9e:	f7ff f963 	bl	800ef68 <Color_Num>
 800fca2:	4603      	mov	r3, r0
 800fca4:	011b      	lsls	r3, r3, #4
 800fca6:	b2dc      	uxtb	r4, r3
 800fca8:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800fcac:	4618      	mov	r0, r3
 800fcae:	f7ff f95b 	bl	800ef68 <Color_Num>
 800fcb2:	4603      	mov	r3, r0
 800fcb4:	461a      	mov	r2, r3
 800fcb6:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 800fcba:	4422      	add	r2, r4
 800fcbc:	b2d1      	uxtb	r1, r2
 800fcbe:	4a48      	ldr	r2, [pc, #288]	; (800fde0 <Save_Bmp+0x2b8>)
 800fcc0:	54d1      	strb	r1, [r2, r3]
      i++;
 800fcc2:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 800fcc6:	b29b      	uxth	r3, r3
 800fcc8:	3301      	adds	r3, #1
 800fcca:	b29b      	uxth	r3, r3
 800fccc:	857b      	strh	r3, [r7, #42]	; 0x2a
      if(i>=4096)
 800fcce:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 800fcd2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800fcd6:	db2f      	blt.n	800fd38 <Save_Bmp+0x210>
      {
        i=0;
 800fcd8:	2300      	movs	r3, #0
 800fcda:	857b      	strh	r3, [r7, #42]	; 0x2a
        if(f_write( &USERFile, F_Buff, 4096, &m)!= FR_OK) return FILE_RW_ERR; // д������
 800fcdc:	f107 030c 	add.w	r3, r7, #12
 800fce0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800fce4:	493e      	ldr	r1, [pc, #248]	; (800fde0 <Save_Bmp+0x2b8>)
 800fce6:	483d      	ldr	r0, [pc, #244]	; (800fddc <Save_Bmp+0x2b4>)
 800fce8:	f014 fad3 	bl	8024292 <f_write>
 800fcec:	4603      	mov	r3, r0
 800fcee:	2b00      	cmp	r3, #0
 800fcf0:	d001      	beq.n	800fcf6 <Save_Bmp+0x1ce>
 800fcf2:	2303      	movs	r3, #3
 800fcf4:	e066      	b.n	800fdc4 <Save_Bmp+0x29c>
        if(l==0)
 800fcf6:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 800fcfa:	2b00      	cmp	r3, #0
 800fcfc:	d110      	bne.n	800fd20 <Save_Bmp+0x1f8>
        	PrintClk(168,2,(k++ >>1)& 3);         // ����ָʾ
 800fcfe:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 800fd02:	b29a      	uxth	r2, r3
 800fd04:	3201      	adds	r2, #1
 800fd06:	b292      	uxth	r2, r2
 800fd08:	84fa      	strh	r2, [r7, #38]	; 0x26
 800fd0a:	105b      	asrs	r3, r3, #1
 800fd0c:	b21b      	sxth	r3, r3
 800fd0e:	b2db      	uxtb	r3, r3
 800fd10:	f003 0303 	and.w	r3, r3, #3
 800fd14:	b2db      	uxtb	r3, r3
 800fd16:	461a      	mov	r2, r3
 800fd18:	2102      	movs	r1, #2
 800fd1a:	20a8      	movs	r0, #168	; 0xa8
 800fd1c:	f7ff f9a4 	bl	800f068 <PrintClk>
        l++;
 800fd20:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 800fd24:	b29b      	uxth	r3, r3
 800fd26:	3301      	adds	r3, #1
 800fd28:	b29b      	uxth	r3, r3
 800fd2a:	84bb      	strh	r3, [r7, #36]	; 0x24
        if(l>=2)l=0;
 800fd2c:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 800fd30:	2b01      	cmp	r3, #1
 800fd32:	dd01      	ble.n	800fd38 <Save_Bmp+0x210>
 800fd34:	2300      	movs	r3, #0
 800fd36:	84bb      	strh	r3, [r7, #36]	; 0x24
    for(x=0; x<320 ; x+=2)
 800fd38:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800fd3a:	3302      	adds	r3, #2
 800fd3c:	b29b      	uxth	r3, r3
 800fd3e:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800fd40:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 800fd44:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 800fd48:	db8c      	blt.n	800fc64 <Save_Bmp+0x13c>
  for(y=0; y<240; y++)
 800fd4a:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	; 0x2c
 800fd4e:	b29b      	uxth	r3, r3
 800fd50:	3301      	adds	r3, #1
 800fd52:	b29b      	uxth	r3, r3
 800fd54:	85bb      	strh	r3, [r7, #44]	; 0x2c
 800fd56:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	; 0x2c
 800fd5a:	2bef      	cmp	r3, #239	; 0xef
 800fd5c:	f77f af7f 	ble.w	800fc5e <Save_Bmp+0x136>
      }
    }
  }
  if(i!=0)
 800fd60:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 800fd64:	2b00      	cmp	r3, #0
 800fd66:	d00e      	beq.n	800fd86 <Save_Bmp+0x25e>
  {
      if(f_write( &USERFile, F_Buff, i, &m)!= FR_OK)
 800fd68:	f9b7 202a 	ldrsh.w	r2, [r7, #42]	; 0x2a
 800fd6c:	f107 030c 	add.w	r3, r7, #12
 800fd70:	491b      	ldr	r1, [pc, #108]	; (800fde0 <Save_Bmp+0x2b8>)
 800fd72:	481a      	ldr	r0, [pc, #104]	; (800fddc <Save_Bmp+0x2b4>)
 800fd74:	f014 fa8d 	bl	8024292 <f_write>
 800fd78:	4603      	mov	r3, r0
 800fd7a:	2b00      	cmp	r3, #0
 800fd7c:	d003      	beq.n	800fd86 <Save_Bmp+0x25e>
      {
    	  List_Pop();
 800fd7e:	f7fe feb9 	bl	800eaf4 <List_Pop>
    	  return FILE_RW_ERR;
 800fd82:	2303      	movs	r3, #3
 800fd84:	e01e      	b.n	800fdc4 <Save_Bmp+0x29c>
      } // д������
  }
  if(f_close(&USERFile)!= FR_OK )
 800fd86:	4815      	ldr	r0, [pc, #84]	; (800fddc <Save_Bmp+0x2b4>)
 800fd88:	f014 fc50 	bl	802462c <f_close>
 800fd8c:	4603      	mov	r3, r0
 800fd8e:	2b00      	cmp	r3, #0
 800fd90:	d001      	beq.n	800fd96 <Save_Bmp+0x26e>
	  return FILE_RW_ERR;
 800fd92:	2303      	movs	r3, #3
 800fd94:	e016      	b.n	800fdc4 <Save_Bmp+0x29c>
  if(Current == FN)
 800fd96:	4b0e      	ldr	r3, [pc, #56]	; (800fdd0 <Save_Bmp+0x2a8>)
 800fd98:	f9b3 3000 	ldrsh.w	r3, [r3]
 800fd9c:	2b05      	cmp	r3, #5
 800fd9e:	d101      	bne.n	800fda4 <Save_Bmp+0x27c>
	  List_Pop();
 800fda0:	f7fe fea8 	bl	800eaf4 <List_Pop>
  if(List[SAVE_BMP].Val<99)
 800fda4:	4b11      	ldr	r3, [pc, #68]	; (800fdec <Save_Bmp+0x2c4>)
 800fda6:	f9b3 30ec 	ldrsh.w	r3, [r3, #236]	; 0xec
 800fdaa:	2b62      	cmp	r3, #98	; 0x62
 800fdac:	dc09      	bgt.n	800fdc2 <Save_Bmp+0x29a>
	  List[SAVE_BMP].Val++;
 800fdae:	4b0f      	ldr	r3, [pc, #60]	; (800fdec <Save_Bmp+0x2c4>)
 800fdb0:	f9b3 30ec 	ldrsh.w	r3, [r3, #236]	; 0xec
 800fdb4:	b29b      	uxth	r3, r3
 800fdb6:	3301      	adds	r3, #1
 800fdb8:	b29b      	uxth	r3, r3
 800fdba:	b21a      	sxth	r2, r3
 800fdbc:	4b0b      	ldr	r3, [pc, #44]	; (800fdec <Save_Bmp+0x2c4>)
 800fdbe:	f8a3 20ec 	strh.w	r2, [r3, #236]	; 0xec

  return OK;
 800fdc2:	2300      	movs	r3, #0
}
 800fdc4:	4618      	mov	r0, r3
 800fdc6:	3734      	adds	r7, #52	; 0x34
 800fdc8:	46bd      	mov	sp, r7
 800fdca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800fdcc:	08000268 	.word	0x08000268
 800fdd0:	2000079a 	.word	0x2000079a
 800fdd4:	20000140 	.word	0x20000140
 800fdd8:	20001a38 	.word	0x20001a38
 800fddc:	20008a88 	.word	0x20008a88
 800fde0:	20002604 	.word	0x20002604
 800fde4:	08001c20 	.word	0x08001c20
 800fde8:	08001c00 	.word	0x08001c00
 800fdec:	20000274 	.word	0x20000274

0800fdf0 <Save_Csv>:

/*******************************************************************************
Save_Csv: ����ɼ����ݻ�����ΪCSV��ʽ    ���룺�ļ����     ����ֵ��0x00=�ɹ�
*******************************************************************************/
char Save_Csv(short FileNo)
{
 800fdf0:	b580      	push	{r7, lr}
 800fdf2:	b08e      	sub	sp, #56	; 0x38
 800fdf4:	af00      	add	r7, sp, #0
 800fdf6:	4603      	mov	r3, r0
 800fdf8:	80fb      	strh	r3, [r7, #6]

  int Ak = (KgA[KindA+(StateA?1:0)]*4)/GK[GainA];
 800fdfa:	4baf      	ldr	r3, [pc, #700]	; (80100b8 <Save_Csv+0x2c8>)
 800fdfc:	681a      	ldr	r2, [r3, #0]
 800fdfe:	4baf      	ldr	r3, [pc, #700]	; (80100bc <Save_Csv+0x2cc>)
 800fe00:	f9b3 3000 	ldrsh.w	r3, [r3]
 800fe04:	4619      	mov	r1, r3
 800fe06:	4bae      	ldr	r3, [pc, #696]	; (80100c0 <Save_Csv+0x2d0>)
 800fe08:	f9b3 3000 	ldrsh.w	r3, [r3]
 800fe0c:	2b00      	cmp	r3, #0
 800fe0e:	bf14      	ite	ne
 800fe10:	2301      	movne	r3, #1
 800fe12:	2300      	moveq	r3, #0
 800fe14:	b2db      	uxtb	r3, r3
 800fe16:	440b      	add	r3, r1
 800fe18:	005b      	lsls	r3, r3, #1
 800fe1a:	4413      	add	r3, r2
 800fe1c:	f9b3 3000 	ldrsh.w	r3, [r3]
 800fe20:	009b      	lsls	r3, r3, #2
 800fe22:	4aa8      	ldr	r2, [pc, #672]	; (80100c4 <Save_Csv+0x2d4>)
 800fe24:	f9b2 2000 	ldrsh.w	r2, [r2]
 800fe28:	4611      	mov	r1, r2
 800fe2a:	4aa7      	ldr	r2, [pc, #668]	; (80100c8 <Save_Csv+0x2d8>)
 800fe2c:	5c52      	ldrb	r2, [r2, r1]
 800fe2e:	fb93 f3f2 	sdiv	r3, r3, r2
 800fe32:	62bb      	str	r3, [r7, #40]	; 0x28

  char pFileName[13]="DATA   .CSV";
 800fe34:	4aa5      	ldr	r2, [pc, #660]	; (80100cc <Save_Csv+0x2dc>)
 800fe36:	f107 0314 	add.w	r3, r7, #20
 800fe3a:	ca07      	ldmia	r2, {r0, r1, r2}
 800fe3c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800fe40:	2300      	movs	r3, #0
 800fe42:	f887 3020 	strb.w	r3, [r7, #32]
  short i,k=0,l=0;
 800fe46:	2300      	movs	r3, #0
 800fe48:	86bb      	strh	r3, [r7, #52]	; 0x34
 800fe4a:	2300      	movs	r3, #0
 800fe4c:	867b      	strh	r3, [r7, #50]	; 0x32
  short temp;
  short count;
  char* ptr;
  char* buf;

  Make_Filename(FileNo, pFileName);
 800fe4e:	f107 0214 	add.w	r2, r7, #20
 800fe52:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800fe56:	4611      	mov	r1, r2
 800fe58:	4618      	mov	r0, r3
 800fe5a:	f7ff fabd 	bl	800f3d8 <Make_Filename>
  if(f_open(&USERFile, pFileName, FA_OPEN_ALWAYS | FA_WRITE | FA_READ)!=FR_OK)
 800fe5e:	f107 0314 	add.w	r3, r7, #20
 800fe62:	2213      	movs	r2, #19
 800fe64:	4619      	mov	r1, r3
 800fe66:	489a      	ldr	r0, [pc, #616]	; (80100d0 <Save_Csv+0x2e0>)
 800fe68:	f013 ff3e 	bl	8023ce8 <f_open>
 800fe6c:	4603      	mov	r3, r0
 800fe6e:	2b00      	cmp	r3, #0
 800fe70:	d001      	beq.n	800fe76 <Save_Csv+0x86>
	  return DISK_RW_ERR;
 800fe72:	2304      	movs	r3, #4
 800fe74:	e1d3      	b.n	801021e <Save_Csv+0x42e>
  memcpy(&F_Buff[0],TimeBase_Str[List[TIM_BASE].Val],5);
 800fe76:	4b97      	ldr	r3, [pc, #604]	; (80100d4 <Save_Csv+0x2e4>)
 800fe78:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800fe7c:	00db      	lsls	r3, r3, #3
 800fe7e:	4a96      	ldr	r2, [pc, #600]	; (80100d8 <Save_Csv+0x2e8>)
 800fe80:	4413      	add	r3, r2
 800fe82:	2205      	movs	r2, #5
 800fe84:	4619      	mov	r1, r3
 800fe86:	4895      	ldr	r0, [pc, #596]	; (80100dc <Save_Csv+0x2ec>)
 800fe88:	f015 fe62 	bl	8025b50 <memcpy>
  memcpy(&F_Buff[5],"   ",3);
 800fe8c:	2203      	movs	r2, #3
 800fe8e:	4994      	ldr	r1, [pc, #592]	; (80100e0 <Save_Csv+0x2f0>)
 800fe90:	4894      	ldr	r0, [pc, #592]	; (80100e4 <Save_Csv+0x2f4>)
 800fe92:	f015 fe5d 	bl	8025b50 <memcpy>
  buf=&F_Buff[8];
 800fe96:	4b94      	ldr	r3, [pc, #592]	; (80100e8 <Save_Csv+0x2f8>)
 800fe98:	627b      	str	r3, [r7, #36]	; 0x24
  //------------------------------------------------------------------
    i=0;
 800fe9a:	2300      	movs	r3, #0
 800fe9c:	86fb      	strh	r3, [r7, #54]	; 0x36
    ptr=(char*)&R[List[Y_RANGES].Val];
 800fe9e:	4b8d      	ldr	r3, [pc, #564]	; (80100d4 <Save_Csv+0x2e4>)
 800fea0:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800fea4:	461a      	mov	r2, r3
 800fea6:	4613      	mov	r3, r2
 800fea8:	005b      	lsls	r3, r3, #1
 800feaa:	4413      	add	r3, r2
 800feac:	005b      	lsls	r3, r3, #1
 800feae:	4a8f      	ldr	r2, [pc, #572]	; (80100ec <Save_Csv+0x2fc>)
 800feb0:	4413      	add	r3, r2
 800feb2:	62fb      	str	r3, [r7, #44]	; 0x2c
    while(*ptr != 0)
 800feb4:	e00c      	b.n	800fed0 <Save_Csv+0xe0>
    	buf[i++] = *ptr++;
 800feb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800feb8:	1c5a      	adds	r2, r3, #1
 800feba:	62fa      	str	r2, [r7, #44]	; 0x2c
 800febc:	f9b7 1036 	ldrsh.w	r1, [r7, #54]	; 0x36
 800fec0:	b28a      	uxth	r2, r1
 800fec2:	3201      	adds	r2, #1
 800fec4:	b292      	uxth	r2, r2
 800fec6:	86fa      	strh	r2, [r7, #54]	; 0x36
 800fec8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800feca:	440a      	add	r2, r1
 800fecc:	781b      	ldrb	r3, [r3, #0]
 800fece:	7013      	strb	r3, [r2, #0]
    while(*ptr != 0)
 800fed0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fed2:	781b      	ldrb	r3, [r3, #0]
 800fed4:	2b00      	cmp	r3, #0
 800fed6:	d1ee      	bne.n	800feb6 <Save_Csv+0xc6>
    buf[i++]   = 0x2a;
 800fed8:	f9b7 2036 	ldrsh.w	r2, [r7, #54]	; 0x36
 800fedc:	b293      	uxth	r3, r2
 800fede:	3301      	adds	r3, #1
 800fee0:	b29b      	uxth	r3, r3
 800fee2:	86fb      	strh	r3, [r7, #54]	; 0x36
 800fee4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fee6:	4413      	add	r3, r2
 800fee8:	222a      	movs	r2, #42	; 0x2a
 800feea:	701a      	strb	r2, [r3, #0]
    ptr=(char*)&N[List[PROBEATT].Val];
 800feec:	4b79      	ldr	r3, [pc, #484]	; (80100d4 <Save_Csv+0x2e4>)
 800feee:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 800fef2:	461a      	mov	r2, r3
 800fef4:	4613      	mov	r3, r2
 800fef6:	005b      	lsls	r3, r3, #1
 800fef8:	4413      	add	r3, r2
 800fefa:	005b      	lsls	r3, r3, #1
 800fefc:	4a7c      	ldr	r2, [pc, #496]	; (80100f0 <Save_Csv+0x300>)
 800fefe:	4413      	add	r3, r2
 800ff00:	62fb      	str	r3, [r7, #44]	; 0x2c
    while(*ptr != 0)
 800ff02:	e00c      	b.n	800ff1e <Save_Csv+0x12e>
    	buf[i++] = *ptr++;
 800ff04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ff06:	1c5a      	adds	r2, r3, #1
 800ff08:	62fa      	str	r2, [r7, #44]	; 0x2c
 800ff0a:	f9b7 1036 	ldrsh.w	r1, [r7, #54]	; 0x36
 800ff0e:	b28a      	uxth	r2, r1
 800ff10:	3201      	adds	r2, #1
 800ff12:	b292      	uxth	r2, r2
 800ff14:	86fa      	strh	r2, [r7, #54]	; 0x36
 800ff16:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ff18:	440a      	add	r2, r1
 800ff1a:	781b      	ldrb	r3, [r3, #0]
 800ff1c:	7013      	strb	r3, [r2, #0]
    while(*ptr != 0)
 800ff1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ff20:	781b      	ldrb	r3, [r3, #0]
 800ff22:	2b00      	cmp	r3, #0
 800ff24:	d1ee      	bne.n	800ff04 <Save_Csv+0x114>
    buf[i]   = 0x2c;
 800ff26:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 800ff2a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ff2c:	4413      	add	r3, r2
 800ff2e:	222c      	movs	r2, #44	; 0x2c
 800ff30:	701a      	strb	r2, [r3, #0]
    buf[i+1] = 0;
 800ff32:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 800ff36:	3301      	adds	r3, #1
 800ff38:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ff3a:	4413      	add	r3, r2
 800ff3c:	2200      	movs	r2, #0
 800ff3e:	701a      	strb	r2, [r3, #0]
    count = i+1;
 800ff40:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800ff42:	3301      	adds	r3, #1
 800ff44:	b29b      	uxth	r3, r3
 800ff46:	863b      	strh	r3, [r7, #48]	; 0x30

  k=8+count;
 800ff48:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800ff4a:	3308      	adds	r3, #8
 800ff4c:	b29b      	uxth	r3, r3
 800ff4e:	86bb      	strh	r3, [r7, #52]	; 0x34
  memcpy(&F_Buff[k],"\r\n",2);
 800ff50:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	; 0x34
 800ff54:	4a61      	ldr	r2, [pc, #388]	; (80100dc <Save_Csv+0x2ec>)
 800ff56:	4413      	add	r3, r2
 800ff58:	2202      	movs	r2, #2
 800ff5a:	4966      	ldr	r1, [pc, #408]	; (80100f4 <Save_Csv+0x304>)
 800ff5c:	4618      	mov	r0, r3
 800ff5e:	f015 fdf7 	bl	8025b50 <memcpy>
  k+=2;
 800ff62:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800ff64:	3302      	adds	r3, #2
 800ff66:	b29b      	uxth	r3, r3
 800ff68:	86bb      	strh	r3, [r7, #52]	; 0x34
  for(i=0; i<DEPTH[List[SMPL_DPTH].Val]; i++)
 800ff6a:	2300      	movs	r3, #0
 800ff6c:	86fb      	strh	r3, [r7, #54]	; 0x36
 800ff6e:	e0f1      	b.n	8010154 <Save_Csv+0x364>
  {
    temp = ((((Sampl[2+i])-2048)*Ak)>>12)+100;
 800ff70:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 800ff74:	3302      	adds	r3, #2
 800ff76:	4a60      	ldr	r2, [pc, #384]	; (80100f8 <Save_Csv+0x308>)
 800ff78:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800ff7c:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 800ff80:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ff82:	fb02 f303 	mul.w	r3, r2, r3
 800ff86:	131b      	asrs	r3, r3, #12
 800ff88:	b29b      	uxth	r3, r3
 800ff8a:	3364      	adds	r3, #100	; 0x64
 800ff8c:	b29b      	uxth	r3, r3
 800ff8e:	847b      	strh	r3, [r7, #34]	; 0x22

    if(temp > 0)
 800ff90:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 800ff94:	2b00      	cmp	r3, #0
 800ff96:	dd0a      	ble.n	800ffae <Save_Csv+0x1be>
    {
      if(temp > 200)  track[0] = 199;
 800ff98:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 800ff9c:	2bc8      	cmp	r3, #200	; 0xc8
 800ff9e:	dd02      	ble.n	800ffa6 <Save_Csv+0x1b6>
 800ffa0:	23c7      	movs	r3, #199	; 0xc7
 800ffa2:	723b      	strb	r3, [r7, #8]
 800ffa4:	e005      	b.n	800ffb2 <Save_Csv+0x1c2>
      else            track[0] = temp;
 800ffa6:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800ffa8:	b2db      	uxtb	r3, r3
 800ffaa:	723b      	strb	r3, [r7, #8]
 800ffac:	e001      	b.n	800ffb2 <Save_Csv+0x1c2>
    } else            track[0] = 0;
 800ffae:	2300      	movs	r3, #0
 800ffb0:	723b      	strb	r3, [r7, #8]
    u8ToDec3(Num,track[0]);
 800ffb2:	7a3a      	ldrb	r2, [r7, #8]
 800ffb4:	f107 030c 	add.w	r3, r7, #12
 800ffb8:	4611      	mov	r1, r2
 800ffba:	4618      	mov	r0, r3
 800ffbc:	f001 f88c 	bl	80110d8 <u8ToDec3>
    for(count=0; count<3; count++)
 800ffc0:	2300      	movs	r3, #0
 800ffc2:	863b      	strh	r3, [r7, #48]	; 0x30
 800ffc4:	e044      	b.n	8010050 <Save_Csv+0x260>
    {
      if(Num[count] == 0) break;
 800ffc6:	f9b7 3030 	ldrsh.w	r3, [r7, #48]	; 0x30
 800ffca:	f107 0238 	add.w	r2, r7, #56	; 0x38
 800ffce:	4413      	add	r3, r2
 800ffd0:	f813 3c2c 	ldrb.w	r3, [r3, #-44]
 800ffd4:	2b00      	cmp	r3, #0
 800ffd6:	d040      	beq.n	801005a <Save_Csv+0x26a>
      F_Buff[k++] = Num[count];
 800ffd8:	f9b7 3030 	ldrsh.w	r3, [r7, #48]	; 0x30
 800ffdc:	f9b7 1034 	ldrsh.w	r1, [r7, #52]	; 0x34
 800ffe0:	b28a      	uxth	r2, r1
 800ffe2:	3201      	adds	r2, #1
 800ffe4:	b292      	uxth	r2, r2
 800ffe6:	86ba      	strh	r2, [r7, #52]	; 0x34
 800ffe8:	460a      	mov	r2, r1
 800ffea:	f107 0138 	add.w	r1, r7, #56	; 0x38
 800ffee:	440b      	add	r3, r1
 800fff0:	f813 1c2c 	ldrb.w	r1, [r3, #-44]
 800fff4:	4b39      	ldr	r3, [pc, #228]	; (80100dc <Save_Csv+0x2ec>)
 800fff6:	5499      	strb	r1, [r3, r2]
      if(k >= 4096)
 800fff8:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	; 0x34
 800fffc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8010000:	db20      	blt.n	8010044 <Save_Csv+0x254>
      {
        if(f_write( &USERFile, F_Buff, 4096, &j)!= FR_OK) return FILE_RW_ERR; // д������
 8010002:	f107 0310 	add.w	r3, r7, #16
 8010006:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 801000a:	4934      	ldr	r1, [pc, #208]	; (80100dc <Save_Csv+0x2ec>)
 801000c:	4830      	ldr	r0, [pc, #192]	; (80100d0 <Save_Csv+0x2e0>)
 801000e:	f014 f940 	bl	8024292 <f_write>
 8010012:	4603      	mov	r3, r0
 8010014:	2b00      	cmp	r3, #0
 8010016:	d001      	beq.n	801001c <Save_Csv+0x22c>
 8010018:	2303      	movs	r3, #3
 801001a:	e100      	b.n	801021e <Save_Csv+0x42e>
        PrintClk(264,2,(l++ >>1) & 3);                    // ����ָʾ
 801001c:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 8010020:	b29a      	uxth	r2, r3
 8010022:	3201      	adds	r2, #1
 8010024:	b292      	uxth	r2, r2
 8010026:	867a      	strh	r2, [r7, #50]	; 0x32
 8010028:	105b      	asrs	r3, r3, #1
 801002a:	b21b      	sxth	r3, r3
 801002c:	b2db      	uxtb	r3, r3
 801002e:	f003 0303 	and.w	r3, r3, #3
 8010032:	b2db      	uxtb	r3, r3
 8010034:	461a      	mov	r2, r3
 8010036:	2102      	movs	r1, #2
 8010038:	f44f 7084 	mov.w	r0, #264	; 0x108
 801003c:	f7ff f814 	bl	800f068 <PrintClk>
        k = 0;
 8010040:	2300      	movs	r3, #0
 8010042:	86bb      	strh	r3, [r7, #52]	; 0x34
    for(count=0; count<3; count++)
 8010044:	f9b7 3030 	ldrsh.w	r3, [r7, #48]	; 0x30
 8010048:	b29b      	uxth	r3, r3
 801004a:	3301      	adds	r3, #1
 801004c:	b29b      	uxth	r3, r3
 801004e:	863b      	strh	r3, [r7, #48]	; 0x30
 8010050:	f9b7 3030 	ldrsh.w	r3, [r7, #48]	; 0x30
 8010054:	2b02      	cmp	r3, #2
 8010056:	ddb6      	ble.n	800ffc6 <Save_Csv+0x1d6>
 8010058:	e000      	b.n	801005c <Save_Csv+0x26c>
      if(Num[count] == 0) break;
 801005a:	bf00      	nop
      }
    }
    F_Buff[k++] = 0x2c;
 801005c:	f9b7 2034 	ldrsh.w	r2, [r7, #52]	; 0x34
 8010060:	b293      	uxth	r3, r2
 8010062:	3301      	adds	r3, #1
 8010064:	b29b      	uxth	r3, r3
 8010066:	86bb      	strh	r3, [r7, #52]	; 0x34
 8010068:	4b1c      	ldr	r3, [pc, #112]	; (80100dc <Save_Csv+0x2ec>)
 801006a:	212c      	movs	r1, #44	; 0x2c
 801006c:	5499      	strb	r1, [r3, r2]
    F_Buff[k++] = 0x0d;
 801006e:	f9b7 2034 	ldrsh.w	r2, [r7, #52]	; 0x34
 8010072:	b293      	uxth	r3, r2
 8010074:	3301      	adds	r3, #1
 8010076:	b29b      	uxth	r3, r3
 8010078:	86bb      	strh	r3, [r7, #52]	; 0x34
 801007a:	4b18      	ldr	r3, [pc, #96]	; (80100dc <Save_Csv+0x2ec>)
 801007c:	210d      	movs	r1, #13
 801007e:	5499      	strb	r1, [r3, r2]
    F_Buff[k++] = 0x0a;
 8010080:	f9b7 2034 	ldrsh.w	r2, [r7, #52]	; 0x34
 8010084:	b293      	uxth	r3, r2
 8010086:	3301      	adds	r3, #1
 8010088:	b29b      	uxth	r3, r3
 801008a:	86bb      	strh	r3, [r7, #52]	; 0x34
 801008c:	4b13      	ldr	r3, [pc, #76]	; (80100dc <Save_Csv+0x2ec>)
 801008e:	210a      	movs	r1, #10
 8010090:	5499      	strb	r1, [r3, r2]
    if(k >= 4096)
 8010092:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	; 0x34
 8010096:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801009a:	db55      	blt.n	8010148 <Save_Csv+0x358>
    {
      if(f_write( &USERFile, F_Buff, 4096, &j)!= FR_OK) return FILE_RW_ERR; // д������
 801009c:	f107 0310 	add.w	r3, r7, #16
 80100a0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80100a4:	490d      	ldr	r1, [pc, #52]	; (80100dc <Save_Csv+0x2ec>)
 80100a6:	480a      	ldr	r0, [pc, #40]	; (80100d0 <Save_Csv+0x2e0>)
 80100a8:	f014 f8f3 	bl	8024292 <f_write>
 80100ac:	4603      	mov	r3, r0
 80100ae:	2b00      	cmp	r3, #0
 80100b0:	d024      	beq.n	80100fc <Save_Csv+0x30c>
 80100b2:	2303      	movs	r3, #3
 80100b4:	e0b3      	b.n	801021e <Save_Csv+0x42e>
 80100b6:	bf00      	nop
 80100b8:	20000558 	.word	0x20000558
 80100bc:	200076b2 	.word	0x200076b2
 80100c0:	2000368e 	.word	0x2000368e
 80100c4:	20003676 	.word	0x20003676
 80100c8:	2000053c 	.word	0x2000053c
 80100cc:	08000280 	.word	0x08000280
 80100d0:	20008a88 	.word	0x20008a88
 80100d4:	20000274 	.word	0x20000274
 80100d8:	200001ac 	.word	0x200001ac
 80100dc:	20002604 	.word	0x20002604
 80100e0:	08000278 	.word	0x08000278
 80100e4:	20002609 	.word	0x20002609
 80100e8:	2000260c 	.word	0x2000260c
 80100ec:	08001e44 	.word	0x08001e44
 80100f0:	08001d70 	.word	0x08001d70
 80100f4:	0800027c 	.word	0x0800027c
 80100f8:	2000369c 	.word	0x2000369c
      PrintClk(264,2,(l++ >>1)& 3);                    // ����ָʾ
 80100fc:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 8010100:	b29a      	uxth	r2, r3
 8010102:	3201      	adds	r2, #1
 8010104:	b292      	uxth	r2, r2
 8010106:	867a      	strh	r2, [r7, #50]	; 0x32
 8010108:	105b      	asrs	r3, r3, #1
 801010a:	b21b      	sxth	r3, r3
 801010c:	b2db      	uxtb	r3, r3
 801010e:	f003 0303 	and.w	r3, r3, #3
 8010112:	b2db      	uxtb	r3, r3
 8010114:	461a      	mov	r2, r3
 8010116:	2102      	movs	r1, #2
 8010118:	f44f 7084 	mov.w	r0, #264	; 0x108
 801011c:	f7fe ffa4 	bl	800f068 <PrintClk>
      k = k - 4096;
 8010120:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8010122:	f5a3 5380 	sub.w	r3, r3, #4096	; 0x1000
 8010126:	b29b      	uxth	r3, r3
 8010128:	86bb      	strh	r3, [r7, #52]	; 0x34
      memcpy(&F_Buff[k], &F_Buff[k+4096], k);
 801012a:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	; 0x34
 801012e:	4a3e      	ldr	r2, [pc, #248]	; (8010228 <Save_Csv+0x438>)
 8010130:	1898      	adds	r0, r3, r2
 8010132:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	; 0x34
 8010136:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801013a:	4a3b      	ldr	r2, [pc, #236]	; (8010228 <Save_Csv+0x438>)
 801013c:	4413      	add	r3, r2
 801013e:	f9b7 2034 	ldrsh.w	r2, [r7, #52]	; 0x34
 8010142:	4619      	mov	r1, r3
 8010144:	f015 fd04 	bl	8025b50 <memcpy>
  for(i=0; i<DEPTH[List[SMPL_DPTH].Val]; i++)
 8010148:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 801014c:	b29b      	uxth	r3, r3
 801014e:	3301      	adds	r3, #1
 8010150:	b29b      	uxth	r3, r3
 8010152:	86fb      	strh	r3, [r7, #54]	; 0x36
 8010154:	4b35      	ldr	r3, [pc, #212]	; (801022c <Save_Csv+0x43c>)
 8010156:	f9b3 304c 	ldrsh.w	r3, [r3, #76]	; 0x4c
 801015a:	461a      	mov	r2, r3
 801015c:	4b34      	ldr	r3, [pc, #208]	; (8010230 <Save_Csv+0x440>)
 801015e:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8010162:	f9b7 2036 	ldrsh.w	r2, [r7, #54]	; 0x36
 8010166:	429a      	cmp	r2, r3
 8010168:	f6ff af02 	blt.w	800ff70 <Save_Csv+0x180>
    }
  }
  if(k != 0)
 801016c:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	; 0x34
 8010170:	2b00      	cmp	r3, #0
 8010172:	d03c      	beq.n	80101ee <Save_Csv+0x3fe>
  {
    F_Buff[k++]=0x0d;
 8010174:	f9b7 2034 	ldrsh.w	r2, [r7, #52]	; 0x34
 8010178:	b293      	uxth	r3, r2
 801017a:	3301      	adds	r3, #1
 801017c:	b29b      	uxth	r3, r3
 801017e:	86bb      	strh	r3, [r7, #52]	; 0x34
 8010180:	4b29      	ldr	r3, [pc, #164]	; (8010228 <Save_Csv+0x438>)
 8010182:	210d      	movs	r1, #13
 8010184:	5499      	strb	r1, [r3, r2]
    F_Buff[k++]=0x0a;
 8010186:	f9b7 2034 	ldrsh.w	r2, [r7, #52]	; 0x34
 801018a:	b293      	uxth	r3, r2
 801018c:	3301      	adds	r3, #1
 801018e:	b29b      	uxth	r3, r3
 8010190:	86bb      	strh	r3, [r7, #52]	; 0x34
 8010192:	4b25      	ldr	r3, [pc, #148]	; (8010228 <Save_Csv+0x438>)
 8010194:	210a      	movs	r1, #10
 8010196:	5499      	strb	r1, [r3, r2]
    memset(&F_Buff[k],32,(4096-k)); //32->�ո�
 8010198:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	; 0x34
 801019c:	4a22      	ldr	r2, [pc, #136]	; (8010228 <Save_Csv+0x438>)
 801019e:	1898      	adds	r0, r3, r2
 80101a0:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	; 0x34
 80101a4:	f5c3 5380 	rsb	r3, r3, #4096	; 0x1000
 80101a8:	461a      	mov	r2, r3
 80101aa:	2120      	movs	r1, #32
 80101ac:	f015 fcde 	bl	8025b6c <memset>
    if(f_write( &USERFile, F_Buff, 4096, &j)!= FR_OK) return FILE_RW_ERR; // д������
 80101b0:	f107 0310 	add.w	r3, r7, #16
 80101b4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80101b8:	491b      	ldr	r1, [pc, #108]	; (8010228 <Save_Csv+0x438>)
 80101ba:	481e      	ldr	r0, [pc, #120]	; (8010234 <Save_Csv+0x444>)
 80101bc:	f014 f869 	bl	8024292 <f_write>
 80101c0:	4603      	mov	r3, r0
 80101c2:	2b00      	cmp	r3, #0
 80101c4:	d001      	beq.n	80101ca <Save_Csv+0x3da>
 80101c6:	2303      	movs	r3, #3
 80101c8:	e029      	b.n	801021e <Save_Csv+0x42e>
    PrintClk(264,2,(l++ >>1)& 3);                     // ����ָʾ
 80101ca:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 80101ce:	b29a      	uxth	r2, r3
 80101d0:	3201      	adds	r2, #1
 80101d2:	b292      	uxth	r2, r2
 80101d4:	867a      	strh	r2, [r7, #50]	; 0x32
 80101d6:	105b      	asrs	r3, r3, #1
 80101d8:	b21b      	sxth	r3, r3
 80101da:	b2db      	uxtb	r3, r3
 80101dc:	f003 0303 	and.w	r3, r3, #3
 80101e0:	b2db      	uxtb	r3, r3
 80101e2:	461a      	mov	r2, r3
 80101e4:	2102      	movs	r1, #2
 80101e6:	f44f 7084 	mov.w	r0, #264	; 0x108
 80101ea:	f7fe ff3d 	bl	800f068 <PrintClk>
  }
  if(f_close(&USERFile)!= FR_OK )
 80101ee:	4811      	ldr	r0, [pc, #68]	; (8010234 <Save_Csv+0x444>)
 80101f0:	f014 fa1c 	bl	802462c <f_close>
 80101f4:	4603      	mov	r3, r0
 80101f6:	2b00      	cmp	r3, #0
 80101f8:	d001      	beq.n	80101fe <Save_Csv+0x40e>
	  return FILE_RW_ERR;
 80101fa:	2303      	movs	r3, #3
 80101fc:	e00f      	b.n	801021e <Save_Csv+0x42e>
  if(List[SAVE_CSV].Val<99)List[SAVE_CSV].Val++;
 80101fe:	4b0b      	ldr	r3, [pc, #44]	; (801022c <Save_Csv+0x43c>)
 8010200:	f9b3 3104 	ldrsh.w	r3, [r3, #260]	; 0x104
 8010204:	2b62      	cmp	r3, #98	; 0x62
 8010206:	dc09      	bgt.n	801021c <Save_Csv+0x42c>
 8010208:	4b08      	ldr	r3, [pc, #32]	; (801022c <Save_Csv+0x43c>)
 801020a:	f9b3 3104 	ldrsh.w	r3, [r3, #260]	; 0x104
 801020e:	b29b      	uxth	r3, r3
 8010210:	3301      	adds	r3, #1
 8010212:	b29b      	uxth	r3, r3
 8010214:	b21a      	sxth	r2, r3
 8010216:	4b05      	ldr	r3, [pc, #20]	; (801022c <Save_Csv+0x43c>)
 8010218:	f8a3 2104 	strh.w	r2, [r3, #260]	; 0x104
  return OK;
 801021c:	2300      	movs	r3, #0
}
 801021e:	4618      	mov	r0, r3
 8010220:	3738      	adds	r7, #56	; 0x38
 8010222:	46bd      	mov	sp, r7
 8010224:	bd80      	pop	{r7, pc}
 8010226:	bf00      	nop
 8010228:	20002604 	.word	0x20002604
 801022c:	20000274 	.word	0x20000274
 8010230:	0800230c 	.word	0x0800230c
 8010234:	20008a88 	.word	0x20008a88

08010238 <Save_Svg>:

/*******************************************************************************
Save_Svg: ����ɼ����ݻ�����ΪBUF��ʽ    ���룺�ļ����     ����ֵ��0x00=�ɹ�
*******************************************************************************/
char Save_Svg(short FileNo)
{
 8010238:	b580      	push	{r7, lr}
 801023a:	b092      	sub	sp, #72	; 0x48
 801023c:	af00      	add	r7, sp, #0
 801023e:	4603      	mov	r3, r0
 8010240:	80fb      	strh	r3, [r7, #6]
  char pFileName[13]="DATA   .SVG";
 8010242:	4ac1      	ldr	r2, [pc, #772]	; (8010548 <Save_Svg+0x310>)
 8010244:	f107 0320 	add.w	r3, r7, #32
 8010248:	ca07      	ldmia	r2, {r0, r1, r2}
 801024a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 801024e:	2300      	movs	r3, #0
 8010250:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  short pCluster[3];
  short track[4];
  int l = 0;
 8010254:	2300      	movs	r3, #0
 8010256:	63bb      	str	r3, [r7, #56]	; 0x38
  short i,x, y;
  short temp;
  char  *str;
  short Posi1 = 0;
 8010258:	2300      	movs	r3, #0
 801025a:	86fb      	strh	r3, [r7, #54]	; 0x36
  int Ak = (KgA[KindA+(StateA?1:0)]*4)/GK[GainA];
 801025c:	4bbb      	ldr	r3, [pc, #748]	; (801054c <Save_Svg+0x314>)
 801025e:	681a      	ldr	r2, [r3, #0]
 8010260:	4bbb      	ldr	r3, [pc, #748]	; (8010550 <Save_Svg+0x318>)
 8010262:	f9b3 3000 	ldrsh.w	r3, [r3]
 8010266:	4619      	mov	r1, r3
 8010268:	4bba      	ldr	r3, [pc, #744]	; (8010554 <Save_Svg+0x31c>)
 801026a:	f9b3 3000 	ldrsh.w	r3, [r3]
 801026e:	2b00      	cmp	r3, #0
 8010270:	bf14      	ite	ne
 8010272:	2301      	movne	r3, #1
 8010274:	2300      	moveq	r3, #0
 8010276:	b2db      	uxtb	r3, r3
 8010278:	440b      	add	r3, r1
 801027a:	005b      	lsls	r3, r3, #1
 801027c:	4413      	add	r3, r2
 801027e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8010282:	009b      	lsls	r3, r3, #2
 8010284:	4ab4      	ldr	r2, [pc, #720]	; (8010558 <Save_Svg+0x320>)
 8010286:	f9b2 2000 	ldrsh.w	r2, [r2]
 801028a:	4611      	mov	r1, r2
 801028c:	4ab3      	ldr	r2, [pc, #716]	; (801055c <Save_Svg+0x324>)
 801028e:	5c52      	ldrb	r2, [r2, r1]
 8010290:	fb93 f3f2 	sdiv	r3, r3, r2
 8010294:	633b      	str	r3, [r7, #48]	; 0x30
  unsigned j;

  Svg_Cnt = 0;
 8010296:	4bb2      	ldr	r3, [pc, #712]	; (8010560 <Save_Svg+0x328>)
 8010298:	2200      	movs	r2, #0
 801029a:	601a      	str	r2, [r3, #0]
  Addr = 0, Length = 0;
 801029c:	4bb1      	ldr	r3, [pc, #708]	; (8010564 <Save_Svg+0x32c>)
 801029e:	2200      	movs	r2, #0
 80102a0:	801a      	strh	r2, [r3, #0]
 80102a2:	4bb1      	ldr	r3, [pc, #708]	; (8010568 <Save_Svg+0x330>)
 80102a4:	2200      	movs	r2, #0
 80102a6:	801a      	strh	r2, [r3, #0]
  str = (char*)&Data;
 80102a8:	4bb0      	ldr	r3, [pc, #704]	; (801056c <Save_Svg+0x334>)
 80102aa:	63fb      	str	r3, [r7, #60]	; 0x3c
  memset(Data,0,310);
 80102ac:	f44f 729b 	mov.w	r2, #310	; 0x136
 80102b0:	2100      	movs	r1, #0
 80102b2:	48ae      	ldr	r0, [pc, #696]	; (801056c <Save_Svg+0x334>)
 80102b4:	f015 fc5a 	bl	8025b6c <memset>
  memset(F_Buff,0,4096);
 80102b8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80102bc:	2100      	movs	r1, #0
 80102be:	48ac      	ldr	r0, [pc, #688]	; (8010570 <Save_Svg+0x338>)
 80102c0:	f015 fc54 	bl	8025b6c <memset>
  Make_Filename(FileNo, pFileName);
 80102c4:	f107 0220 	add.w	r2, r7, #32
 80102c8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80102cc:	4611      	mov	r1, r2
 80102ce:	4618      	mov	r0, r3
 80102d0:	f7ff f882 	bl	800f3d8 <Make_Filename>
  if(f_open(&USERFile, pFileName, FA_OPEN_ALWAYS | FA_WRITE | FA_READ)!=FR_OK)
 80102d4:	f107 0320 	add.w	r3, r7, #32
 80102d8:	2213      	movs	r2, #19
 80102da:	4619      	mov	r1, r3
 80102dc:	48a5      	ldr	r0, [pc, #660]	; (8010574 <Save_Svg+0x33c>)
 80102de:	f013 fd03 	bl	8023ce8 <f_open>
 80102e2:	4603      	mov	r3, r0
 80102e4:	2b00      	cmp	r3, #0
 80102e6:	d001      	beq.n	80102ec <Save_Svg+0xb4>
	  return DISK_RW_ERR;
 80102e8:	2304      	movs	r3, #4
 80102ea:	e3c2      	b.n	8010a72 <Save_Svg+0x83a>
  //SVG �ĵ���ĳЩ��������SVG ,ָ���ⲿ��DTD
  str = "<?xml version=\"1.0\" encoding=\"iso-8859-1\"?>\n";
 80102ec:	4ba2      	ldr	r3, [pc, #648]	; (8010578 <Save_Svg+0x340>)
 80102ee:	63fb      	str	r3, [r7, #60]	; 0x3c
  WriteStr(str, pCluster);
 80102f0:	f107 0318 	add.w	r3, r7, #24
 80102f4:	4619      	mov	r1, r3
 80102f6:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80102f8:	f7fe ffd4 	bl	800f2a4 <WriteStr>
  str = "<!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.0//EN\" \"http://www.w3.org/TR/2001/REC-SVG-20010904/DTD/svg10.dtd\">\n";
 80102fc:	4b9f      	ldr	r3, [pc, #636]	; (801057c <Save_Svg+0x344>)
 80102fe:	63fb      	str	r3, [r7, #60]	; 0x3c
  WriteStr(str, pCluster);
 8010300:	f107 0318 	add.w	r3, r7, #24
 8010304:	4619      	mov	r1, r3
 8010306:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8010308:	f7fe ffcc 	bl	800f2a4 <WriteStr>
  str = "<svg width=\"";
 801030c:	4b9c      	ldr	r3, [pc, #624]	; (8010580 <Save_Svg+0x348>)
 801030e:	63fb      	str	r3, [r7, #60]	; 0x3c
  WriteStr(str, pCluster);
 8010310:	f107 0318 	add.w	r3, r7, #24
 8010314:	4619      	mov	r1, r3
 8010316:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8010318:	f7fe ffc4 	bl	800f2a4 <WriteStr>
  WriteVar(DEPTH[List[SMPL_DPTH].Val], pCluster);
 801031c:	4b99      	ldr	r3, [pc, #612]	; (8010584 <Save_Svg+0x34c>)
 801031e:	f9b3 304c 	ldrsh.w	r3, [r3, #76]	; 0x4c
 8010322:	461a      	mov	r2, r3
 8010324:	4b98      	ldr	r3, [pc, #608]	; (8010588 <Save_Svg+0x350>)
 8010326:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 801032a:	f107 0218 	add.w	r2, r7, #24
 801032e:	4611      	mov	r1, r2
 8010330:	4618      	mov	r0, r3
 8010332:	f7fe ff0f 	bl	800f154 <WriteVar>
  str = "\" height=\"200\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" onload=\"init(evt)\" onmousemove=\"msMove(evt)\">\n";
 8010336:	4b95      	ldr	r3, [pc, #596]	; (801058c <Save_Svg+0x354>)
 8010338:	63fb      	str	r3, [r7, #60]	; 0x3c
  WriteStr(str, pCluster);
 801033a:	f107 0318 	add.w	r3, r7, #24
 801033e:	4619      	mov	r1, r3
 8010340:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8010342:	f7fe ffaf 	bl	800f2a4 <WriteStr>

  //�������С��ɫ
  str = "<path stroke=\"none\" fill=\"black\" d=\"M0,0 H";
 8010346:	4b92      	ldr	r3, [pc, #584]	; (8010590 <Save_Svg+0x358>)
 8010348:	63fb      	str	r3, [r7, #60]	; 0x3c
  WriteStr(str, pCluster);
 801034a:	f107 0318 	add.w	r3, r7, #24
 801034e:	4619      	mov	r1, r3
 8010350:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8010352:	f7fe ffa7 	bl	800f2a4 <WriteStr>
  WriteVar(DEPTH[List[SMPL_DPTH].Val], pCluster);
 8010356:	4b8b      	ldr	r3, [pc, #556]	; (8010584 <Save_Svg+0x34c>)
 8010358:	f9b3 304c 	ldrsh.w	r3, [r3, #76]	; 0x4c
 801035c:	461a      	mov	r2, r3
 801035e:	4b8a      	ldr	r3, [pc, #552]	; (8010588 <Save_Svg+0x350>)
 8010360:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8010364:	f107 0218 	add.w	r2, r7, #24
 8010368:	4611      	mov	r1, r2
 801036a:	4618      	mov	r0, r3
 801036c:	f7fe fef2 	bl	800f154 <WriteVar>
  str = " V200 H0 V0\"/>\n";
 8010370:	4b88      	ldr	r3, [pc, #544]	; (8010594 <Save_Svg+0x35c>)
 8010372:	63fb      	str	r3, [r7, #60]	; 0x3c
  WriteStr(str, pCluster);
 8010374:	f107 0318 	add.w	r3, r7, #24
 8010378:	4619      	mov	r1, r3
 801037a:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 801037c:	f7fe ff92 	bl	800f2a4 <WriteStr>
  //��ǰ���ڱ���
  str = "<path stroke=\"none\" fill=\"#400040\" d=\"M";  //��ɫ
 8010380:	4b85      	ldr	r3, [pc, #532]	; (8010598 <Save_Svg+0x360>)
 8010382:	63fb      	str	r3, [r7, #60]	; 0x3c
  WriteStr(str, pCluster);
 8010384:	f107 0318 	add.w	r3, r7, #24
 8010388:	4619      	mov	r1, r3
 801038a:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 801038c:	f7fe ff8a 	bl	800f2a4 <WriteStr>
  WriteVar(List[VIEWPOSI].Val, pCluster);
 8010390:	4b7c      	ldr	r3, [pc, #496]	; (8010584 <Save_Svg+0x34c>)
 8010392:	f9b3 3044 	ldrsh.w	r3, [r3, #68]	; 0x44
 8010396:	f107 0218 	add.w	r2, r7, #24
 801039a:	4611      	mov	r1, r2
 801039c:	4618      	mov	r0, r3
 801039e:	f7fe fed9 	bl	800f154 <WriteVar>
  str = ",0 H";
 80103a2:	4b7e      	ldr	r3, [pc, #504]	; (801059c <Save_Svg+0x364>)
 80103a4:	63fb      	str	r3, [r7, #60]	; 0x3c
  WriteStr(str, pCluster);
 80103a6:	f107 0318 	add.w	r3, r7, #24
 80103aa:	4619      	mov	r1, r3
 80103ac:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80103ae:	f7fe ff79 	bl	800f2a4 <WriteStr>
  WriteVar(List[VIEWPOSI].Val, pCluster);
 80103b2:	4b74      	ldr	r3, [pc, #464]	; (8010584 <Save_Svg+0x34c>)
 80103b4:	f9b3 3044 	ldrsh.w	r3, [r3, #68]	; 0x44
 80103b8:	f107 0218 	add.w	r2, r7, #24
 80103bc:	4611      	mov	r1, r2
 80103be:	4618      	mov	r0, r3
 80103c0:	f7fe fec8 	bl	800f154 <WriteVar>
  str = " V200 H";
 80103c4:	4b76      	ldr	r3, [pc, #472]	; (80105a0 <Save_Svg+0x368>)
 80103c6:	63fb      	str	r3, [r7, #60]	; 0x3c
  WriteStr(str, pCluster);
 80103c8:	f107 0318 	add.w	r3, r7, #24
 80103cc:	4619      	mov	r1, r3
 80103ce:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80103d0:	f7fe ff68 	bl	800f2a4 <WriteStr>
  WriteVar(List[VIEWPOSI].Val+300, pCluster);
 80103d4:	4b6b      	ldr	r3, [pc, #428]	; (8010584 <Save_Svg+0x34c>)
 80103d6:	f9b3 3044 	ldrsh.w	r3, [r3, #68]	; 0x44
 80103da:	b29b      	uxth	r3, r3
 80103dc:	f503 7396 	add.w	r3, r3, #300	; 0x12c
 80103e0:	b29b      	uxth	r3, r3
 80103e2:	b21b      	sxth	r3, r3
 80103e4:	f107 0218 	add.w	r2, r7, #24
 80103e8:	4611      	mov	r1, r2
 80103ea:	4618      	mov	r0, r3
 80103ec:	f7fe feb2 	bl	800f154 <WriteVar>
  str = "  V0\"/>\n";
 80103f0:	4b6c      	ldr	r3, [pc, #432]	; (80105a4 <Save_Svg+0x36c>)
 80103f2:	63fb      	str	r3, [r7, #60]	; 0x3c
  WriteStr(str, pCluster);
 80103f4:	f107 0318 	add.w	r3, r7, #24
 80103f8:	4619      	mov	r1, r3
 80103fa:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80103fc:	f7fe ff52 	bl	800f2a4 <WriteStr>
  //��������
 for (y=0; y<=200; y+=25){
 8010400:	2300      	movs	r3, #0
 8010402:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8010406:	e032      	b.n	801046e <Save_Svg+0x236>
    //<path stroke="#404040" d="M0,0 H4096"/>
    str = "<path stroke=\"#404040\" d=\"M0,";
 8010408:	4b67      	ldr	r3, [pc, #412]	; (80105a8 <Save_Svg+0x370>)
 801040a:	63fb      	str	r3, [r7, #60]	; 0x3c
    WriteStr(str, pCluster);
 801040c:	f107 0318 	add.w	r3, r7, #24
 8010410:	4619      	mov	r1, r3
 8010412:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8010414:	f7fe ff46 	bl	800f2a4 <WriteStr>
    WriteVar(y, pCluster);
 8010418:	f107 0218 	add.w	r2, r7, #24
 801041c:	f9b7 3042 	ldrsh.w	r3, [r7, #66]	; 0x42
 8010420:	4611      	mov	r1, r2
 8010422:	4618      	mov	r0, r3
 8010424:	f7fe fe96 	bl	800f154 <WriteVar>
    str = " H";
 8010428:	4b60      	ldr	r3, [pc, #384]	; (80105ac <Save_Svg+0x374>)
 801042a:	63fb      	str	r3, [r7, #60]	; 0x3c
    WriteStr(str, pCluster);
 801042c:	f107 0318 	add.w	r3, r7, #24
 8010430:	4619      	mov	r1, r3
 8010432:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8010434:	f7fe ff36 	bl	800f2a4 <WriteStr>
    WriteVar(DEPTH[List[SMPL_DPTH].Val], pCluster);
 8010438:	4b52      	ldr	r3, [pc, #328]	; (8010584 <Save_Svg+0x34c>)
 801043a:	f9b3 304c 	ldrsh.w	r3, [r3, #76]	; 0x4c
 801043e:	461a      	mov	r2, r3
 8010440:	4b51      	ldr	r3, [pc, #324]	; (8010588 <Save_Svg+0x350>)
 8010442:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8010446:	f107 0218 	add.w	r2, r7, #24
 801044a:	4611      	mov	r1, r2
 801044c:	4618      	mov	r0, r3
 801044e:	f7fe fe81 	bl	800f154 <WriteVar>
    str = "\"/>\n";
 8010452:	4b57      	ldr	r3, [pc, #348]	; (80105b0 <Save_Svg+0x378>)
 8010454:	63fb      	str	r3, [r7, #60]	; 0x3c
    WriteStr(str, pCluster);
 8010456:	f107 0318 	add.w	r3, r7, #24
 801045a:	4619      	mov	r1, r3
 801045c:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 801045e:	f7fe ff21 	bl	800f2a4 <WriteStr>
 for (y=0; y<=200; y+=25){
 8010462:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8010466:	3319      	adds	r3, #25
 8010468:	b29b      	uxth	r3, r3
 801046a:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 801046e:	f9b7 3042 	ldrsh.w	r3, [r7, #66]	; 0x42
 8010472:	2bc8      	cmp	r3, #200	; 0xc8
 8010474:	ddc8      	ble.n	8010408 <Save_Svg+0x1d0>
  }
  for (x=0; x<=DEPTH[List[SMPL_DPTH].Val]; x+=25)
 8010476:	2300      	movs	r3, #0
 8010478:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 801047c:	e01d      	b.n	80104ba <Save_Svg+0x282>
  {
    //<path stroke="#404040" d="M0,0 V256"/>
    str = "<path stroke=\"#404040\" d=\"M";
 801047e:	4b4d      	ldr	r3, [pc, #308]	; (80105b4 <Save_Svg+0x37c>)
 8010480:	63fb      	str	r3, [r7, #60]	; 0x3c
    WriteStr(str, pCluster);
 8010482:	f107 0318 	add.w	r3, r7, #24
 8010486:	4619      	mov	r1, r3
 8010488:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 801048a:	f7fe ff0b 	bl	800f2a4 <WriteStr>
    WriteVar(x, pCluster);
 801048e:	f107 0218 	add.w	r2, r7, #24
 8010492:	f9b7 3044 	ldrsh.w	r3, [r7, #68]	; 0x44
 8010496:	4611      	mov	r1, r2
 8010498:	4618      	mov	r0, r3
 801049a:	f7fe fe5b 	bl	800f154 <WriteVar>
    str = ",0 V200\"/>\n";
 801049e:	4b46      	ldr	r3, [pc, #280]	; (80105b8 <Save_Svg+0x380>)
 80104a0:	63fb      	str	r3, [r7, #60]	; 0x3c
    WriteStr(str, pCluster);
 80104a2:	f107 0318 	add.w	r3, r7, #24
 80104a6:	4619      	mov	r1, r3
 80104a8:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80104aa:	f7fe fefb 	bl	800f2a4 <WriteStr>
  for (x=0; x<=DEPTH[List[SMPL_DPTH].Val]; x+=25)
 80104ae:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80104b2:	3319      	adds	r3, #25
 80104b4:	b29b      	uxth	r3, r3
 80104b6:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 80104ba:	4b32      	ldr	r3, [pc, #200]	; (8010584 <Save_Svg+0x34c>)
 80104bc:	f9b3 304c 	ldrsh.w	r3, [r3, #76]	; 0x4c
 80104c0:	461a      	mov	r2, r3
 80104c2:	4b31      	ldr	r3, [pc, #196]	; (8010588 <Save_Svg+0x350>)
 80104c4:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 80104c8:	f9b7 2044 	ldrsh.w	r2, [r7, #68]	; 0x44
 80104cc:	429a      	cmp	r2, r3
 80104ce:	ddd6      	ble.n	801047e <Save_Svg+0x246>
  }
  //ͨ��A����
  str = "<path stroke=\"cyan\" fill=\"none\" stroke-width=\"1\" d=\"";
 80104d0:	4b3a      	ldr	r3, [pc, #232]	; (80105bc <Save_Svg+0x384>)
 80104d2:	63fb      	str	r3, [r7, #60]	; 0x3c
  WriteStr(str, pCluster);
 80104d4:	f107 0318 	add.w	r3, r7, #24
 80104d8:	4619      	mov	r1, r3
 80104da:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80104dc:	f7fe fee2 	bl	800f2a4 <WriteStr>
  for (i=0; i<=DEPTH[List[SMPL_DPTH].Val]; i++)
 80104e0:	2300      	movs	r3, #0
 80104e2:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 80104e6:	e096      	b.n	8010616 <Save_Svg+0x3de>
  {
      temp = ((((Sampl[2+i])-2048)*Ak)>>12)+100;
 80104e8:	f9b7 3046 	ldrsh.w	r3, [r7, #70]	; 0x46
 80104ec:	3302      	adds	r3, #2
 80104ee:	4a34      	ldr	r2, [pc, #208]	; (80105c0 <Save_Svg+0x388>)
 80104f0:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 80104f4:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 80104f8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80104fa:	fb02 f303 	mul.w	r3, r2, r3
 80104fe:	131b      	asrs	r3, r3, #12
 8010500:	b29b      	uxth	r3, r3
 8010502:	3364      	adds	r3, #100	; 0x64
 8010504:	b29b      	uxth	r3, r3
 8010506:	85fb      	strh	r3, [r7, #46]	; 0x2e
    if(temp > 0)
 8010508:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 801050c:	2b00      	cmp	r3, #0
 801050e:	dd09      	ble.n	8010524 <Save_Svg+0x2ec>
    {
      if(temp > 200)  track[0] = 199;
 8010510:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 8010514:	2bc8      	cmp	r3, #200	; 0xc8
 8010516:	dd02      	ble.n	801051e <Save_Svg+0x2e6>
 8010518:	23c7      	movs	r3, #199	; 0xc7
 801051a:	823b      	strh	r3, [r7, #16]
 801051c:	e004      	b.n	8010528 <Save_Svg+0x2f0>
      else            track[0] = temp;
 801051e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8010520:	823b      	strh	r3, [r7, #16]
 8010522:	e001      	b.n	8010528 <Save_Svg+0x2f0>
    } else            track[0] = 0;
 8010524:	2300      	movs	r3, #0
 8010526:	823b      	strh	r3, [r7, #16]
    track[0] =  200- track[0];
 8010528:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 801052c:	b29b      	uxth	r3, r3
 801052e:	f1c3 03c8 	rsb	r3, r3, #200	; 0xc8
 8010532:	b29b      	uxth	r3, r3
 8010534:	b21b      	sxth	r3, r3
 8010536:	823b      	strh	r3, [r7, #16]
    if(i==0)str = "M";
 8010538:	f9b7 3046 	ldrsh.w	r3, [r7, #70]	; 0x46
 801053c:	2b00      	cmp	r3, #0
 801053e:	d143      	bne.n	80105c8 <Save_Svg+0x390>
 8010540:	4b20      	ldr	r3, [pc, #128]	; (80105c4 <Save_Svg+0x38c>)
 8010542:	63fb      	str	r3, [r7, #60]	; 0x3c
 8010544:	e042      	b.n	80105cc <Save_Svg+0x394>
 8010546:	bf00      	nop
 8010548:	0800098c 	.word	0x0800098c
 801054c:	20000558 	.word	0x20000558
 8010550:	200076b2 	.word	0x200076b2
 8010554:	2000368e 	.word	0x2000368e
 8010558:	20003676 	.word	0x20003676
 801055c:	2000053c 	.word	0x2000053c
 8010560:	20000790 	.word	0x20000790
 8010564:	2000078a 	.word	0x2000078a
 8010568:	2000078c 	.word	0x2000078c
 801056c:	20000008 	.word	0x20000008
 8010570:	20002604 	.word	0x20002604
 8010574:	20008a88 	.word	0x20008a88
 8010578:	08000290 	.word	0x08000290
 801057c:	080002c0 	.word	0x080002c0
 8010580:	0800032c 	.word	0x0800032c
 8010584:	20000274 	.word	0x20000274
 8010588:	0800230c 	.word	0x0800230c
 801058c:	0800033c 	.word	0x0800033c
 8010590:	080003c8 	.word	0x080003c8
 8010594:	080003f4 	.word	0x080003f4
 8010598:	08000404 	.word	0x08000404
 801059c:	0800042c 	.word	0x0800042c
 80105a0:	08000434 	.word	0x08000434
 80105a4:	0800043c 	.word	0x0800043c
 80105a8:	08000448 	.word	0x08000448
 80105ac:	08000468 	.word	0x08000468
 80105b0:	0800046c 	.word	0x0800046c
 80105b4:	08000474 	.word	0x08000474
 80105b8:	08000490 	.word	0x08000490
 80105bc:	0800049c 	.word	0x0800049c
 80105c0:	2000369c 	.word	0x2000369c
 80105c4:	080004d4 	.word	0x080004d4
    else    str = " L";
 80105c8:	4bbb      	ldr	r3, [pc, #748]	; (80108b8 <Save_Svg+0x680>)
 80105ca:	63fb      	str	r3, [r7, #60]	; 0x3c
    WriteStr(str, pCluster);
 80105cc:	f107 0318 	add.w	r3, r7, #24
 80105d0:	4619      	mov	r1, r3
 80105d2:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80105d4:	f7fe fe66 	bl	800f2a4 <WriteStr>
    WriteVar(i, pCluster);
 80105d8:	f107 0218 	add.w	r2, r7, #24
 80105dc:	f9b7 3046 	ldrsh.w	r3, [r7, #70]	; 0x46
 80105e0:	4611      	mov	r1, r2
 80105e2:	4618      	mov	r0, r3
 80105e4:	f7fe fdb6 	bl	800f154 <WriteVar>
    str = ",";
 80105e8:	4bb4      	ldr	r3, [pc, #720]	; (80108bc <Save_Svg+0x684>)
 80105ea:	63fb      	str	r3, [r7, #60]	; 0x3c
    WriteStr(str, pCluster);
 80105ec:	f107 0318 	add.w	r3, r7, #24
 80105f0:	4619      	mov	r1, r3
 80105f2:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80105f4:	f7fe fe56 	bl	800f2a4 <WriteStr>
    WriteVar(track[0], pCluster);
 80105f8:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80105fc:	f107 0218 	add.w	r2, r7, #24
 8010600:	4611      	mov	r1, r2
 8010602:	4618      	mov	r0, r3
 8010604:	f7fe fda6 	bl	800f154 <WriteVar>
  for (i=0; i<=DEPTH[List[SMPL_DPTH].Val]; i++)
 8010608:	f9b7 3046 	ldrsh.w	r3, [r7, #70]	; 0x46
 801060c:	b29b      	uxth	r3, r3
 801060e:	3301      	adds	r3, #1
 8010610:	b29b      	uxth	r3, r3
 8010612:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8010616:	4baa      	ldr	r3, [pc, #680]	; (80108c0 <Save_Svg+0x688>)
 8010618:	f9b3 304c 	ldrsh.w	r3, [r3, #76]	; 0x4c
 801061c:	461a      	mov	r2, r3
 801061e:	4ba9      	ldr	r3, [pc, #676]	; (80108c4 <Save_Svg+0x68c>)
 8010620:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8010624:	f9b7 2046 	ldrsh.w	r2, [r7, #70]	; 0x46
 8010628:	429a      	cmp	r2, r3
 801062a:	f77f af5d 	ble.w	80104e8 <Save_Svg+0x2b0>
  }
  str = "\"/>\n";
 801062e:	4ba6      	ldr	r3, [pc, #664]	; (80108c8 <Save_Svg+0x690>)
 8010630:	63fb      	str	r3, [r7, #60]	; 0x3c
  WriteStr(str, pCluster);
 8010632:	f107 0318 	add.w	r3, r7, #24
 8010636:	4619      	mov	r1, r3
 8010638:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 801063a:	f7fe fe33 	bl	800f2a4 <WriteStr>

  //�Ҷ˵�λ��ʱ������
  str = "<text font-family=\"Arial\" x=\"638\" y=\"170\" fill=\"cyan\" font-size=\"18\" text-anchor=\"end\" id=\"CH1s\">CH1: ";
 801063e:	4ba3      	ldr	r3, [pc, #652]	; (80108cc <Save_Svg+0x694>)
 8010640:	63fb      	str	r3, [r7, #60]	; 0x3c
  WriteStr(str, pCluster);
 8010642:	f107 0318 	add.w	r3, r7, #24
 8010646:	4619      	mov	r1, r3
 8010648:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 801064a:	f7fe fe2b 	bl	800f2a4 <WriteStr>
  if(List[PROBEATT].Val)str = (char*)Vol_10X[List[Y_RANGES].Val];
 801064e:	4b9c      	ldr	r3, [pc, #624]	; (80108c0 <Save_Svg+0x688>)
 8010650:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8010654:	2b00      	cmp	r3, #0
 8010656:	d007      	beq.n	8010668 <Save_Svg+0x430>
 8010658:	4b99      	ldr	r3, [pc, #612]	; (80108c0 <Save_Svg+0x688>)
 801065a:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801065e:	00db      	lsls	r3, r3, #3
 8010660:	4a9b      	ldr	r2, [pc, #620]	; (80108d0 <Save_Svg+0x698>)
 8010662:	4413      	add	r3, r2
 8010664:	63fb      	str	r3, [r7, #60]	; 0x3c
 8010666:	e006      	b.n	8010676 <Save_Svg+0x43e>
  else                         str = (char*)Vol_Str[List[Y_RANGES].Val];
 8010668:	4b95      	ldr	r3, [pc, #596]	; (80108c0 <Save_Svg+0x688>)
 801066a:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801066e:	00db      	lsls	r3, r3, #3
 8010670:	4a98      	ldr	r2, [pc, #608]	; (80108d4 <Save_Svg+0x69c>)
 8010672:	4413      	add	r3, r2
 8010674:	63fb      	str	r3, [r7, #60]	; 0x3c
  WriteStr(str, pCluster);
 8010676:	f107 0318 	add.w	r3, r7, #24
 801067a:	4619      	mov	r1, r3
 801067c:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 801067e:	f7fe fe11 	bl	800f2a4 <WriteStr>
  str = "/div ";
 8010682:	4b95      	ldr	r3, [pc, #596]	; (80108d8 <Save_Svg+0x6a0>)
 8010684:	63fb      	str	r3, [r7, #60]	; 0x3c
  WriteStr(str, pCluster);
 8010686:	f107 0318 	add.w	r3, r7, #24
 801068a:	4619      	mov	r1, r3
 801068c:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 801068e:	f7fe fe09 	bl	800f2a4 <WriteStr>
  str = "(";
 8010692:	4b92      	ldr	r3, [pc, #584]	; (80108dc <Save_Svg+0x6a4>)
 8010694:	63fb      	str	r3, [r7, #60]	; 0x3c
  WriteStr(str, pCluster);
 8010696:	f107 0318 	add.w	r3, r7, #24
 801069a:	4619      	mov	r1, r3
 801069c:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 801069e:	f7fe fe01 	bl	800f2a4 <WriteStr>
  if(List[PROBEATT].Val)str = "X10";        //X10
 80106a2:	4b87      	ldr	r3, [pc, #540]	; (80108c0 <Save_Svg+0x688>)
 80106a4:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 80106a8:	2b00      	cmp	r3, #0
 80106aa:	d002      	beq.n	80106b2 <Save_Svg+0x47a>
 80106ac:	4b8c      	ldr	r3, [pc, #560]	; (80108e0 <Save_Svg+0x6a8>)
 80106ae:	63fb      	str	r3, [r7, #60]	; 0x3c
 80106b0:	e001      	b.n	80106b6 <Save_Svg+0x47e>
  else                         str = "X1";  //X1
 80106b2:	4b8c      	ldr	r3, [pc, #560]	; (80108e4 <Save_Svg+0x6ac>)
 80106b4:	63fb      	str	r3, [r7, #60]	; 0x3c
  WriteStr(str, pCluster);
 80106b6:	f107 0318 	add.w	r3, r7, #24
 80106ba:	4619      	mov	r1, r3
 80106bc:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80106be:	f7fe fdf1 	bl	800f2a4 <WriteStr>
  str = ") ";
 80106c2:	4b89      	ldr	r3, [pc, #548]	; (80108e8 <Save_Svg+0x6b0>)
 80106c4:	63fb      	str	r3, [r7, #60]	; 0x3c
  WriteStr(str, pCluster);
 80106c6:	f107 0318 	add.w	r3, r7, #24
 80106ca:	4619      	mov	r1, r3
 80106cc:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80106ce:	f7fe fde9 	bl	800f2a4 <WriteStr>
  str = (char*)TimeBase_Str[List[TIM_BASE].Val]; //Timebase
 80106d2:	4b7b      	ldr	r3, [pc, #492]	; (80108c0 <Save_Svg+0x688>)
 80106d4:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 80106d8:	00db      	lsls	r3, r3, #3
 80106da:	4a84      	ldr	r2, [pc, #528]	; (80108ec <Save_Svg+0x6b4>)
 80106dc:	4413      	add	r3, r2
 80106de:	63fb      	str	r3, [r7, #60]	; 0x3c
  WriteStr(str, pCluster);
 80106e0:	f107 0318 	add.w	r3, r7, #24
 80106e4:	4619      	mov	r1, r3
 80106e6:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80106e8:	f7fe fddc 	bl	800f2a4 <WriteStr>
  str = "/div</text>\n";
 80106ec:	4b80      	ldr	r3, [pc, #512]	; (80108f0 <Save_Svg+0x6b8>)
 80106ee:	63fb      	str	r3, [r7, #60]	; 0x3c
  WriteStr(str, pCluster);
 80106f0:	f107 0318 	add.w	r3, r7, #24
 80106f4:	4619      	mov	r1, r3
 80106f6:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80106f8:	f7fe fdd4 	bl	800f2a4 <WriteStr>
  str = "<text font-family=\"Arial\" x=\"2\" y=\"170\" fill=\"cyan\" font-size=\"18\" text-anchor=\"start\" id=\"CH1\"> </text>\n";
 80106fc:	4b7d      	ldr	r3, [pc, #500]	; (80108f4 <Save_Svg+0x6bc>)
 80106fe:	63fb      	str	r3, [r7, #60]	; 0x3c
  WriteStr(str, pCluster);
 8010700:	f107 0318 	add.w	r3, r7, #24
 8010704:	4619      	mov	r1, r3
 8010706:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8010708:	f7fe fdcc 	bl	800f2a4 <WriteStr>
 //===============================
  //����
  Posi1 = 199-List[V0_POSI].Val;
 801070c:	4b6c      	ldr	r3, [pc, #432]	; (80108c0 <Save_Svg+0x688>)
 801070e:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 8010712:	b29b      	uxth	r3, r3
 8010714:	f1c3 03c7 	rsb	r3, r3, #199	; 0xc7
 8010718:	b29b      	uxth	r3, r3
 801071a:	86fb      	strh	r3, [r7, #54]	; 0x36
  //===============================
  str = "<script type=\"text/ecmascript\"><![CDATA[\n";
 801071c:	4b76      	ldr	r3, [pc, #472]	; (80108f8 <Save_Svg+0x6c0>)
 801071e:	63fb      	str	r3, [r7, #60]	; 0x3c
  WriteStr(str, pCluster);
 8010720:	f107 0318 	add.w	r3, r7, #24
 8010724:	4619      	mov	r1, r3
 8010726:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8010728:	f7fe fdbc 	bl	800f2a4 <WriteStr>
  str = "function init(evt) { if ( window.svgDocument == null ) svgDocument = evt.target.ownerDocument; }\n";
 801072c:	4b73      	ldr	r3, [pc, #460]	; (80108fc <Save_Svg+0x6c4>)
 801072e:	63fb      	str	r3, [r7, #60]	; 0x3c
  WriteStr(str, pCluster);
 8010730:	f107 0318 	add.w	r3, r7, #24
 8010734:	4619      	mov	r1, r3
 8010736:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8010738:	f7fe fdb4 	bl	800f2a4 <WriteStr>
  str = "function fmtT(val, div) {\n";
 801073c:	4b70      	ldr	r3, [pc, #448]	; (8010900 <Save_Svg+0x6c8>)
 801073e:	63fb      	str	r3, [r7, #60]	; 0x3c
  WriteStr(str, pCluster);
 8010740:	f107 0318 	add.w	r3, r7, #24
 8010744:	4619      	mov	r1, r3
 8010746:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8010748:	f7fe fdac 	bl	800f2a4 <WriteStr>
  str = "if (div > 10000) return Math.floor(val*div/25/1000) + \" ms\";\n";
 801074c:	4b6d      	ldr	r3, [pc, #436]	; (8010904 <Save_Svg+0x6cc>)
 801074e:	63fb      	str	r3, [r7, #60]	; 0x3c
  WriteStr(str, pCluster);
 8010750:	f107 0318 	add.w	r3, r7, #24
 8010754:	4619      	mov	r1, r3
 8010756:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8010758:	f7fe fda4 	bl	800f2a4 <WriteStr>
  str = "if (div > 250) return Math.floor(val*div/25)/1000 + \" ms\";\n";
 801075c:	4b6a      	ldr	r3, [pc, #424]	; (8010908 <Save_Svg+0x6d0>)
 801075e:	63fb      	str	r3, [r7, #60]	; 0x3c
  WriteStr(str, pCluster);
 8010760:	f107 0318 	add.w	r3, r7, #24
 8010764:	4619      	mov	r1, r3
 8010766:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8010768:	f7fe fd9c 	bl	800f2a4 <WriteStr>
  str = "return Math.floor(val*div*1000/25)/1000 + \" us\";\n";
 801076c:	4b67      	ldr	r3, [pc, #412]	; (801090c <Save_Svg+0x6d4>)
 801076e:	63fb      	str	r3, [r7, #60]	; 0x3c
  WriteStr(str, pCluster);
 8010770:	f107 0318 	add.w	r3, r7, #24
 8010774:	4619      	mov	r1, r3
 8010776:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8010778:	f7fe fd94 	bl	800f2a4 <WriteStr>
  str = "}\n";
 801077c:	4b64      	ldr	r3, [pc, #400]	; (8010910 <Save_Svg+0x6d8>)
 801077e:	63fb      	str	r3, [r7, #60]	; 0x3c
  WriteStr(str, pCluster);
 8010780:	f107 0318 	add.w	r3, r7, #24
 8010784:	4619      	mov	r1, r3
 8010786:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8010788:	f7fe fd8c 	bl	800f2a4 <WriteStr>
  str = "function fmtU(val, div, shift) { return Math.floor((shift-val)*div/25) + \" mV\"; }\n";
 801078c:	4b61      	ldr	r3, [pc, #388]	; (8010914 <Save_Svg+0x6dc>)
 801078e:	63fb      	str	r3, [r7, #60]	; 0x3c
  WriteStr(str, pCluster);
 8010790:	f107 0318 	add.w	r3, r7, #24
 8010794:	4619      	mov	r1, r3
 8010796:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8010798:	f7fe fd84 	bl	800f2a4 <WriteStr>
  str = "function msMove (evt)\n";
 801079c:	4b5e      	ldr	r3, [pc, #376]	; (8010918 <Save_Svg+0x6e0>)
 801079e:	63fb      	str	r3, [r7, #60]	; 0x3c
  WriteStr(str, pCluster);
 80107a0:	f107 0318 	add.w	r3, r7, #24
 80107a4:	4619      	mov	r1, r3
 80107a6:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80107a8:	f7fe fd7c 	bl	800f2a4 <WriteStr>
  str = "{\n";
 80107ac:	4b5b      	ldr	r3, [pc, #364]	; (801091c <Save_Svg+0x6e4>)
 80107ae:	63fb      	str	r3, [r7, #60]	; 0x3c
  WriteStr(str, pCluster);
 80107b0:	f107 0318 	add.w	r3, r7, #24
 80107b4:	4619      	mov	r1, r3
 80107b6:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80107b8:	f7fe fd74 	bl	800f2a4 <WriteStr>
  str = "var x = evt.pageX;\n";
 80107bc:	4b58      	ldr	r3, [pc, #352]	; (8010920 <Save_Svg+0x6e8>)
 80107be:	63fb      	str	r3, [r7, #60]	; 0x3c
  WriteStr(str, pCluster);
 80107c0:	f107 0318 	add.w	r3, r7, #24
 80107c4:	4619      	mov	r1, r3
 80107c6:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80107c8:	f7fe fd6c 	bl	800f2a4 <WriteStr>
  str = "var y = evt.clientY;\n";
 80107cc:	4b55      	ldr	r3, [pc, #340]	; (8010924 <Save_Svg+0x6ec>)
 80107ce:	63fb      	str	r3, [r7, #60]	; 0x3c
  WriteStr(str, pCluster);
 80107d0:	f107 0318 	add.w	r3, r7, #24
 80107d4:	4619      	mov	r1, r3
 80107d6:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80107d8:	f7fe fd64 	bl	800f2a4 <WriteStr>
  str = "if (x < 0 || y < 0 || x >= ";
 80107dc:	4b52      	ldr	r3, [pc, #328]	; (8010928 <Save_Svg+0x6f0>)
 80107de:	63fb      	str	r3, [r7, #60]	; 0x3c
  WriteStr(str, pCluster);
 80107e0:	f107 0318 	add.w	r3, r7, #24
 80107e4:	4619      	mov	r1, r3
 80107e6:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80107e8:	f7fe fd5c 	bl	800f2a4 <WriteStr>
  WriteVar(DEPTH[List[SMPL_DPTH].Val], pCluster);
 80107ec:	4b34      	ldr	r3, [pc, #208]	; (80108c0 <Save_Svg+0x688>)
 80107ee:	f9b3 304c 	ldrsh.w	r3, [r3, #76]	; 0x4c
 80107f2:	461a      	mov	r2, r3
 80107f4:	4b33      	ldr	r3, [pc, #204]	; (80108c4 <Save_Svg+0x68c>)
 80107f6:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 80107fa:	f107 0218 	add.w	r2, r7, #24
 80107fe:	4611      	mov	r1, r2
 8010800:	4618      	mov	r0, r3
 8010802:	f7fe fca7 	bl	800f154 <WriteVar>
  str = "|| y >= 200)\n";
 8010806:	4b49      	ldr	r3, [pc, #292]	; (801092c <Save_Svg+0x6f4>)
 8010808:	63fb      	str	r3, [r7, #60]	; 0x3c
  WriteStr(str, pCluster);
 801080a:	f107 0318 	add.w	r3, r7, #24
 801080e:	4619      	mov	r1, r3
 8010810:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8010812:	f7fe fd47 	bl	800f2a4 <WriteStr>
  str = "return;\n";
 8010816:	4b46      	ldr	r3, [pc, #280]	; (8010930 <Save_Svg+0x6f8>)
 8010818:	63fb      	str	r3, [r7, #60]	; 0x3c
  WriteStr(str, pCluster);
 801081a:	f107 0318 	add.w	r3, r7, #24
 801081e:	4619      	mov	r1, r3
 8010820:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8010822:	f7fe fd3f 	bl	800f2a4 <WriteStr>
  str = "var hscroll = (document.all ? document.scrollLeft : window.pageXOffset);\n";
 8010826:	4b43      	ldr	r3, [pc, #268]	; (8010934 <Save_Svg+0x6fc>)
 8010828:	63fb      	str	r3, [r7, #60]	; 0x3c
  WriteStr(str, pCluster);
 801082a:	f107 0318 	add.w	r3, r7, #24
 801082e:	4619      	mov	r1, r3
 8010830:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8010832:	f7fe fd37 	bl	800f2a4 <WriteStr>
  str = "var width = window.innerWidth;\n";
 8010836:	4b40      	ldr	r3, [pc, #256]	; (8010938 <Save_Svg+0x700>)
 8010838:	63fb      	str	r3, [r7, #60]	; 0x3c
  WriteStr(str, pCluster);
 801083a:	f107 0318 	add.w	r3, r7, #24
 801083e:	4619      	mov	r1, r3
 8010840:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8010842:	f7fe fd2f 	bl	800f2a4 <WriteStr>
  str = "\n";
 8010846:	4b3d      	ldr	r3, [pc, #244]	; (801093c <Save_Svg+0x704>)
 8010848:	63fb      	str	r3, [r7, #60]	; 0x3c
  WriteStr(str, pCluster);
 801084a:	f107 0318 	add.w	r3, r7, #24
 801084e:	4619      	mov	r1, r3
 8010850:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8010852:	f7fe fd27 	bl	800f2a4 <WriteStr>
  str = "svgDocument.getElementById(\"CH1\").setAttribute(\"x\", hscroll+20);\n";
 8010856:	4b3a      	ldr	r3, [pc, #232]	; (8010940 <Save_Svg+0x708>)
 8010858:	63fb      	str	r3, [r7, #60]	; 0x3c
  WriteStr(str, pCluster);
 801085a:	f107 0318 	add.w	r3, r7, #24
 801085e:	4619      	mov	r1, r3
 8010860:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8010862:	f7fe fd1f 	bl	800f2a4 <WriteStr>
  str = "svgDocument.getElementById(\"CH1s\").setAttribute(\"x\", hscroll+width-20);\n";
 8010866:	4b37      	ldr	r3, [pc, #220]	; (8010944 <Save_Svg+0x70c>)
 8010868:	63fb      	str	r3, [r7, #60]	; 0x3c
  WriteStr(str, pCluster);
 801086a:	f107 0318 	add.w	r3, r7, #24
 801086e:	4619      	mov	r1, r3
 8010870:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8010872:	f7fe fd17 	bl	800f2a4 <WriteStr>
  str = "\n";
 8010876:	4b31      	ldr	r3, [pc, #196]	; (801093c <Save_Svg+0x704>)
 8010878:	63fb      	str	r3, [r7, #60]	; 0x3c
  WriteStr(str, pCluster);
 801087a:	f107 0318 	add.w	r3, r7, #24
 801087e:	4619      	mov	r1, r3
 8010880:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8010882:	f7fe fd0f 	bl	800f2a4 <WriteStr>
  //==============================
  str = "svgDocument.getElementById(\"CH1\").firstChild.data = \"CH1: \"+fmtU(y, ";
 8010886:	4b30      	ldr	r3, [pc, #192]	; (8010948 <Save_Svg+0x710>)
 8010888:	63fb      	str	r3, [r7, #60]	; 0x3c
  WriteStr(str, pCluster);
 801088a:	f107 0318 	add.w	r3, r7, #24
 801088e:	4619      	mov	r1, r3
 8010890:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8010892:	f7fe fd07 	bl	800f2a4 <WriteStr>
  if(List[PROBEATT].Val)str = (char*)VScale_Str_10X[List[Y_RANGES].Val];
 8010896:	4b0a      	ldr	r3, [pc, #40]	; (80108c0 <Save_Svg+0x688>)
 8010898:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 801089c:	2b00      	cmp	r3, #0
 801089e:	d057      	beq.n	8010950 <Save_Svg+0x718>
 80108a0:	4b07      	ldr	r3, [pc, #28]	; (80108c0 <Save_Svg+0x688>)
 80108a2:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80108a6:	461a      	mov	r2, r3
 80108a8:	4613      	mov	r3, r2
 80108aa:	005b      	lsls	r3, r3, #1
 80108ac:	4413      	add	r3, r2
 80108ae:	005b      	lsls	r3, r3, #1
 80108b0:	4a26      	ldr	r2, [pc, #152]	; (801094c <Save_Svg+0x714>)
 80108b2:	4413      	add	r3, r2
 80108b4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80108b6:	e056      	b.n	8010966 <Save_Svg+0x72e>
 80108b8:	080004d8 	.word	0x080004d8
 80108bc:	080004dc 	.word	0x080004dc
 80108c0:	20000274 	.word	0x20000274
 80108c4:	0800230c 	.word	0x0800230c
 80108c8:	0800046c 	.word	0x0800046c
 80108cc:	080004e0 	.word	0x080004e0
 80108d0:	08001a98 	.word	0x08001a98
 80108d4:	08001a48 	.word	0x08001a48
 80108d8:	08000548 	.word	0x08000548
 80108dc:	08000550 	.word	0x08000550
 80108e0:	08000554 	.word	0x08000554
 80108e4:	08000558 	.word	0x08000558
 80108e8:	0800055c 	.word	0x0800055c
 80108ec:	200001ac 	.word	0x200001ac
 80108f0:	08000560 	.word	0x08000560
 80108f4:	08000570 	.word	0x08000570
 80108f8:	080005dc 	.word	0x080005dc
 80108fc:	08000608 	.word	0x08000608
 8010900:	0800066c 	.word	0x0800066c
 8010904:	08000688 	.word	0x08000688
 8010908:	080006c8 	.word	0x080006c8
 801090c:	08000704 	.word	0x08000704
 8010910:	08000738 	.word	0x08000738
 8010914:	0800073c 	.word	0x0800073c
 8010918:	08000790 	.word	0x08000790
 801091c:	080007a8 	.word	0x080007a8
 8010920:	080007ac 	.word	0x080007ac
 8010924:	080007c0 	.word	0x080007c0
 8010928:	080007d8 	.word	0x080007d8
 801092c:	080007f4 	.word	0x080007f4
 8010930:	08000804 	.word	0x08000804
 8010934:	08000810 	.word	0x08000810
 8010938:	0800085c 	.word	0x0800085c
 801093c:	0800087c 	.word	0x0800087c
 8010940:	08000880 	.word	0x08000880
 8010944:	080008c4 	.word	0x080008c4
 8010948:	08000910 	.word	0x08000910
 801094c:	08001b24 	.word	0x08001b24
  else str = (char*)VScale_Str[List[Y_RANGES].Val];
 8010950:	4b4a      	ldr	r3, [pc, #296]	; (8010a7c <Save_Svg+0x844>)
 8010952:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8010956:	461a      	mov	r2, r3
 8010958:	4613      	mov	r3, r2
 801095a:	005b      	lsls	r3, r3, #1
 801095c:	4413      	add	r3, r2
 801095e:	005b      	lsls	r3, r3, #1
 8010960:	4a47      	ldr	r2, [pc, #284]	; (8010a80 <Save_Svg+0x848>)
 8010962:	4413      	add	r3, r2
 8010964:	63fb      	str	r3, [r7, #60]	; 0x3c
  WriteStr(str, pCluster);
 8010966:	f107 0318 	add.w	r3, r7, #24
 801096a:	4619      	mov	r1, r3
 801096c:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 801096e:	f7fe fc99 	bl	800f2a4 <WriteStr>
  str = ", ";
 8010972:	4b44      	ldr	r3, [pc, #272]	; (8010a84 <Save_Svg+0x84c>)
 8010974:	63fb      	str	r3, [r7, #60]	; 0x3c
  WriteStr(str, pCluster);
 8010976:	f107 0318 	add.w	r3, r7, #24
 801097a:	4619      	mov	r1, r3
 801097c:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 801097e:	f7fe fc91 	bl	800f2a4 <WriteStr>
  WriteVar((short)Posi1, pCluster);
 8010982:	f107 0218 	add.w	r2, r7, #24
 8010986:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 801098a:	4611      	mov	r1, r2
 801098c:	4618      	mov	r0, r3
 801098e:	f7fe fbe1 	bl	800f154 <WriteVar>
  str = ") + \" \" + fmtT(x, ";
 8010992:	4b3d      	ldr	r3, [pc, #244]	; (8010a88 <Save_Svg+0x850>)
 8010994:	63fb      	str	r3, [r7, #60]	; 0x3c
  WriteStr(str, pCluster);
 8010996:	f107 0318 	add.w	r3, r7, #24
 801099a:	4619      	mov	r1, r3
 801099c:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 801099e:	f7fe fc81 	bl	800f2a4 <WriteStr>
  str = (char*)TScale_Str[List[TIM_BASE].Val]; //Timebase
 80109a2:	4b36      	ldr	r3, [pc, #216]	; (8010a7c <Save_Svg+0x844>)
 80109a4:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 80109a8:	00db      	lsls	r3, r3, #3
 80109aa:	4a38      	ldr	r2, [pc, #224]	; (8010a8c <Save_Svg+0x854>)
 80109ac:	4413      	add	r3, r2
 80109ae:	63fb      	str	r3, [r7, #60]	; 0x3c
  WriteStr(str, pCluster);
 80109b0:	f107 0318 	add.w	r3, r7, #24
 80109b4:	4619      	mov	r1, r3
 80109b6:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80109b8:	f7fe fc74 	bl	800f2a4 <WriteStr>
  str = ");\n";
 80109bc:	4b34      	ldr	r3, [pc, #208]	; (8010a90 <Save_Svg+0x858>)
 80109be:	63fb      	str	r3, [r7, #60]	; 0x3c
  WriteStr(str, pCluster);
 80109c0:	f107 0318 	add.w	r3, r7, #24
 80109c4:	4619      	mov	r1, r3
 80109c6:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80109c8:	f7fe fc6c 	bl	800f2a4 <WriteStr>

  //==============================
  str = "}\n";
 80109cc:	4b31      	ldr	r3, [pc, #196]	; (8010a94 <Save_Svg+0x85c>)
 80109ce:	63fb      	str	r3, [r7, #60]	; 0x3c
  WriteStr(str, pCluster);
 80109d0:	f107 0318 	add.w	r3, r7, #24
 80109d4:	4619      	mov	r1, r3
 80109d6:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80109d8:	f7fe fc64 	bl	800f2a4 <WriteStr>
  str = "]]></script>\n";
 80109dc:	4b2e      	ldr	r3, [pc, #184]	; (8010a98 <Save_Svg+0x860>)
 80109de:	63fb      	str	r3, [r7, #60]	; 0x3c
  WriteStr(str, pCluster);
 80109e0:	f107 0318 	add.w	r3, r7, #24
 80109e4:	4619      	mov	r1, r3
 80109e6:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80109e8:	f7fe fc5c 	bl	800f2a4 <WriteStr>
  str = "</svg>\n";
 80109ec:	4b2b      	ldr	r3, [pc, #172]	; (8010a9c <Save_Svg+0x864>)
 80109ee:	63fb      	str	r3, [r7, #60]	; 0x3c
  WriteStr(str, pCluster);
 80109f0:	f107 0318 	add.w	r3, r7, #24
 80109f4:	4619      	mov	r1, r3
 80109f6:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80109f8:	f7fe fc54 	bl	800f2a4 <WriteStr>
  if(f_write( &USERFile, F_Buff, Length, &j)!= FR_OK) return FILE_RW_ERR; // д������
 80109fc:	4b28      	ldr	r3, [pc, #160]	; (8010aa0 <Save_Svg+0x868>)
 80109fe:	f9b3 3000 	ldrsh.w	r3, [r3]
 8010a02:	461a      	mov	r2, r3
 8010a04:	f107 030c 	add.w	r3, r7, #12
 8010a08:	4926      	ldr	r1, [pc, #152]	; (8010aa4 <Save_Svg+0x86c>)
 8010a0a:	4827      	ldr	r0, [pc, #156]	; (8010aa8 <Save_Svg+0x870>)
 8010a0c:	f013 fc41 	bl	8024292 <f_write>
 8010a10:	4603      	mov	r3, r0
 8010a12:	2b00      	cmp	r3, #0
 8010a14:	d001      	beq.n	8010a1a <Save_Svg+0x7e2>
 8010a16:	2303      	movs	r3, #3
 8010a18:	e02b      	b.n	8010a72 <Save_Svg+0x83a>
  PrintClk(264,2,(l++ >>1)& 3);                               // ����ָʾ
 8010a1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010a1c:	1c5a      	adds	r2, r3, #1
 8010a1e:	63ba      	str	r2, [r7, #56]	; 0x38
 8010a20:	105b      	asrs	r3, r3, #1
 8010a22:	b2db      	uxtb	r3, r3
 8010a24:	f003 0303 	and.w	r3, r3, #3
 8010a28:	b2db      	uxtb	r3, r3
 8010a2a:	461a      	mov	r2, r3
 8010a2c:	2102      	movs	r1, #2
 8010a2e:	f44f 7084 	mov.w	r0, #264	; 0x108
 8010a32:	f7fe fb19 	bl	800f068 <PrintClk>

  if(f_close(&USERFile)!= FR_OK )
 8010a36:	481c      	ldr	r0, [pc, #112]	; (8010aa8 <Save_Svg+0x870>)
 8010a38:	f013 fdf8 	bl	802462c <f_close>
 8010a3c:	4603      	mov	r3, r0
 8010a3e:	2b00      	cmp	r3, #0
 8010a40:	d001      	beq.n	8010a46 <Save_Svg+0x80e>
	  return FILE_RW_ERR;
 8010a42:	2303      	movs	r3, #3
 8010a44:	e015      	b.n	8010a72 <Save_Svg+0x83a>
  if(List[SAVE_SVG].Val<99)List[SAVE_SVG].Val++;
 8010a46:	4b0d      	ldr	r3, [pc, #52]	; (8010a7c <Save_Svg+0x844>)
 8010a48:	f9b3 310c 	ldrsh.w	r3, [r3, #268]	; 0x10c
 8010a4c:	2b62      	cmp	r3, #98	; 0x62
 8010a4e:	dc09      	bgt.n	8010a64 <Save_Svg+0x82c>
 8010a50:	4b0a      	ldr	r3, [pc, #40]	; (8010a7c <Save_Svg+0x844>)
 8010a52:	f9b3 310c 	ldrsh.w	r3, [r3, #268]	; 0x10c
 8010a56:	b29b      	uxth	r3, r3
 8010a58:	3301      	adds	r3, #1
 8010a5a:	b29b      	uxth	r3, r3
 8010a5c:	b21a      	sxth	r2, r3
 8010a5e:	4b07      	ldr	r3, [pc, #28]	; (8010a7c <Save_Svg+0x844>)
 8010a60:	f8a3 210c 	strh.w	r2, [r3, #268]	; 0x10c
  memset(Data,0,310);
 8010a64:	f44f 729b 	mov.w	r2, #310	; 0x136
 8010a68:	2100      	movs	r1, #0
 8010a6a:	4810      	ldr	r0, [pc, #64]	; (8010aac <Save_Svg+0x874>)
 8010a6c:	f015 f87e 	bl	8025b6c <memset>
  return OK;
 8010a70:	2300      	movs	r3, #0
}
 8010a72:	4618      	mov	r0, r3
 8010a74:	3748      	adds	r7, #72	; 0x48
 8010a76:	46bd      	mov	sp, r7
 8010a78:	bd80      	pop	{r7, pc}
 8010a7a:	bf00      	nop
 8010a7c:	20000274 	.word	0x20000274
 8010a80:	08001ae8 	.word	0x08001ae8
 8010a84:	08000958 	.word	0x08000958
 8010a88:	0800095c 	.word	0x0800095c
 8010a8c:	08001b60 	.word	0x08001b60
 8010a90:	08000970 	.word	0x08000970
 8010a94:	08000738 	.word	0x08000738
 8010a98:	08000974 	.word	0x08000974
 8010a9c:	08000984 	.word	0x08000984
 8010aa0:	2000078c 	.word	0x2000078c
 8010aa4:	20002604 	.word	0x20002604
 8010aa8:	20008a88 	.word	0x20008a88
 8010aac:	20000008 	.word	0x20000008

08010ab0 <Read_CalFlag>:
unsigned long err;

FLASH_EraseInitTypeDef Flash_Erase ={0, 1, 1, 1, 2};

 void Read_CalFlag(void)
 {
 8010ab0:	b480      	push	{r7}
 8010ab2:	b083      	sub	sp, #12
 8010ab4:	af00      	add	r7, sp, #0
	  unsigned short* ptr;
	  ptr=(unsigned short*)Kpg_Address;
 8010ab6:	4b10      	ldr	r3, [pc, #64]	; (8010af8 <Read_CalFlag+0x48>)
 8010ab8:	607b      	str	r3, [r7, #4]
	  if(*ptr++!=0xaa55)
 8010aba:	687b      	ldr	r3, [r7, #4]
 8010abc:	1c9a      	adds	r2, r3, #2
 8010abe:	607a      	str	r2, [r7, #4]
 8010ac0:	881b      	ldrh	r3, [r3, #0]
 8010ac2:	f64a 2255 	movw	r2, #43605	; 0xaa55
 8010ac6:	4293      	cmp	r3, r2
 8010ac8:	d10e      	bne.n	8010ae8 <Read_CalFlag+0x38>
		  return;
	  if(*ptr++!=0x0400)
 8010aca:	687b      	ldr	r3, [r7, #4]
 8010acc:	1c9a      	adds	r2, r3, #2
 8010ace:	607a      	str	r2, [r7, #4]
 8010ad0:	881b      	ldrh	r3, [r3, #0]
 8010ad2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8010ad6:	d109      	bne.n	8010aec <Read_CalFlag+0x3c>
		  return;
	  Cal_Flag = *ptr++;
 8010ad8:	687b      	ldr	r3, [r7, #4]
 8010ada:	1c9a      	adds	r2, r3, #2
 8010adc:	607a      	str	r2, [r7, #4]
 8010ade:	881b      	ldrh	r3, [r3, #0]
 8010ae0:	b2da      	uxtb	r2, r3
 8010ae2:	4b06      	ldr	r3, [pc, #24]	; (8010afc <Read_CalFlag+0x4c>)
 8010ae4:	701a      	strb	r2, [r3, #0]
	  return;
 8010ae6:	e002      	b.n	8010aee <Read_CalFlag+0x3e>
		  return;
 8010ae8:	bf00      	nop
 8010aea:	e000      	b.n	8010aee <Read_CalFlag+0x3e>
		  return;
 8010aec:	bf00      	nop
 }
 8010aee:	370c      	adds	r7, #12
 8010af0:	46bd      	mov	sp, r7
 8010af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010af6:	4770      	bx	lr
 8010af8:	08004000 	.word	0x08004000
 8010afc:	20000192 	.word	0x20000192

08010b00 <Save_Parameter>:

 /*******************************************************************************
  Save_Parameter:                          Return: 0= Success
 *******************************************************************************/
 char Save_Parameter(void)
 {
 8010b00:	b580      	push	{r7, lr}
 8010b02:	b082      	sub	sp, #8
 8010b04:	af00      	add	r7, sp, #0
   short i, j;
   unsigned short* ptr;

   Flash_Erase.Sector = 2;
 8010b06:	4b45      	ldr	r3, [pc, #276]	; (8010c1c <Save_Parameter+0x11c>)
 8010b08:	2202      	movs	r2, #2
 8010b0a:	609a      	str	r2, [r3, #8]

   HAL_FLASH_Unlock();
 8010b0c:	f008 fa74 	bl	8018ff8 <HAL_FLASH_Unlock>
   j=HAL_FLASHEx_Erase( &Flash_Erase, &err);
 8010b10:	4943      	ldr	r1, [pc, #268]	; (8010c20 <Save_Parameter+0x120>)
 8010b12:	4842      	ldr	r0, [pc, #264]	; (8010c1c <Save_Parameter+0x11c>)
 8010b14:	f008 fbe2 	bl	80192dc <HAL_FLASHEx_Erase>
 8010b18:	4603      	mov	r3, r0
 8010b1a:	80bb      	strh	r3, [r7, #4]
   if(j== HAL_OK)
 8010b1c:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8010b20:	2b00      	cmp	r3, #0
 8010b22:	d173      	bne.n	8010c0c <Save_Parameter+0x10c>
   {
     ptr=F_Buff;
 8010b24:	4b3f      	ldr	r3, [pc, #252]	; (8010c24 <Save_Parameter+0x124>)
 8010b26:	603b      	str	r3, [r7, #0]
     *ptr++=0x0400;                              //Ver:4.00
 8010b28:	683b      	ldr	r3, [r7, #0]
 8010b2a:	1c9a      	adds	r2, r3, #2
 8010b2c:	603a      	str	r2, [r7, #0]
 8010b2e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8010b32:	801a      	strh	r2, [r3, #0]
     *ptr++=Current;
 8010b34:	4b3c      	ldr	r3, [pc, #240]	; (8010c28 <Save_Parameter+0x128>)
 8010b36:	f9b3 1000 	ldrsh.w	r1, [r3]
 8010b3a:	683b      	ldr	r3, [r7, #0]
 8010b3c:	1c9a      	adds	r2, r3, #2
 8010b3e:	603a      	str	r2, [r7, #0]
 8010b40:	b28a      	uxth	r2, r1
 8010b42:	801a      	strh	r2, [r3, #0]
     *ptr++=Status;
 8010b44:	4b39      	ldr	r3, [pc, #228]	; (8010c2c <Save_Parameter+0x12c>)
 8010b46:	f9b3 1000 	ldrsh.w	r1, [r3]
 8010b4a:	683b      	ldr	r3, [r7, #0]
 8010b4c:	1c9a      	adds	r2, r3, #2
 8010b4e:	603a      	str	r2, [r7, #0]
 8010b50:	b28a      	uxth	r2, r1
 8010b52:	801a      	strh	r2, [r3, #0]
     for(i=0;i<42;i++)
 8010b54:	2300      	movs	r3, #0
 8010b56:	80fb      	strh	r3, [r7, #6]
 8010b58:	e011      	b.n	8010b7e <Save_Parameter+0x7e>
    	 *ptr++=List[i].Val;
 8010b5a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8010b5e:	4a34      	ldr	r2, [pc, #208]	; (8010c30 <Save_Parameter+0x130>)
 8010b60:	00db      	lsls	r3, r3, #3
 8010b62:	4413      	add	r3, r2
 8010b64:	f9b3 1004 	ldrsh.w	r1, [r3, #4]
 8010b68:	683b      	ldr	r3, [r7, #0]
 8010b6a:	1c9a      	adds	r2, r3, #2
 8010b6c:	603a      	str	r2, [r7, #0]
 8010b6e:	b28a      	uxth	r2, r1
 8010b70:	801a      	strh	r2, [r3, #0]
     for(i=0;i<42;i++)
 8010b72:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8010b76:	b29b      	uxth	r3, r3
 8010b78:	3301      	adds	r3, #1
 8010b7a:	b29b      	uxth	r3, r3
 8010b7c:	80fb      	strh	r3, [r7, #6]
 8010b7e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8010b82:	2b29      	cmp	r3, #41	; 0x29
 8010b84:	dde9      	ble.n	8010b5a <Save_Parameter+0x5a>
     for(i=0;i<8;i++)
 8010b86:	2300      	movs	r3, #0
 8010b88:	80fb      	strh	r3, [r7, #6]
 8010b8a:	e00f      	b.n	8010bac <Save_Parameter+0xac>
    	 *ptr++=MenuNow[i];
 8010b8c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8010b90:	4a28      	ldr	r2, [pc, #160]	; (8010c34 <Save_Parameter+0x134>)
 8010b92:	f932 1013 	ldrsh.w	r1, [r2, r3, lsl #1]
 8010b96:	683b      	ldr	r3, [r7, #0]
 8010b98:	1c9a      	adds	r2, r3, #2
 8010b9a:	603a      	str	r2, [r7, #0]
 8010b9c:	b28a      	uxth	r2, r1
 8010b9e:	801a      	strh	r2, [r3, #0]
     for(i=0;i<8;i++)
 8010ba0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8010ba4:	b29b      	uxth	r3, r3
 8010ba6:	3301      	adds	r3, #1
 8010ba8:	b29b      	uxth	r3, r3
 8010baa:	80fb      	strh	r3, [r7, #6]
 8010bac:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8010bb0:	2b07      	cmp	r3, #7
 8010bb2:	ddeb      	ble.n	8010b8c <Save_Parameter+0x8c>
     *ptr++=0xaa55;
 8010bb4:	683b      	ldr	r3, [r7, #0]
 8010bb6:	1c9a      	adds	r2, r3, #2
 8010bb8:	603a      	str	r2, [r7, #0]
 8010bba:	f64a 2255 	movw	r2, #43605	; 0xaa55
 8010bbe:	801a      	strh	r2, [r3, #0]
     ptr=F_Buff;
 8010bc0:	4b18      	ldr	r3, [pc, #96]	; (8010c24 <Save_Parameter+0x124>)
 8010bc2:	603b      	str	r3, [r7, #0]
     for(i=0; i<256; i+=2)
 8010bc4:	2300      	movs	r3, #0
 8010bc6:	80fb      	strh	r3, [r7, #6]
 8010bc8:	e01a      	b.n	8010c00 <Save_Parameter+0x100>
     {                      //128 SHORT
       j= HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, Page_Address+i, *ptr++);
 8010bca:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8010bce:	f103 6300 	add.w	r3, r3, #134217728	; 0x8000000
 8010bd2:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8010bd6:	4619      	mov	r1, r3
 8010bd8:	683b      	ldr	r3, [r7, #0]
 8010bda:	1c9a      	adds	r2, r3, #2
 8010bdc:	603a      	str	r2, [r7, #0]
 8010bde:	881b      	ldrh	r3, [r3, #0]
 8010be0:	b29a      	uxth	r2, r3
 8010be2:	f04f 0300 	mov.w	r3, #0
 8010be6:	2001      	movs	r0, #1
 8010be8:	f008 f9b2 	bl	8018f50 <HAL_FLASH_Program>
 8010bec:	4603      	mov	r3, r0
 8010bee:	80bb      	strh	r3, [r7, #4]
       if(j!= HAL_OK)
 8010bf0:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8010bf4:	2b00      	cmp	r3, #0
 8010bf6:	d108      	bne.n	8010c0a <Save_Parameter+0x10a>
     for(i=0; i<256; i+=2)
 8010bf8:	88fb      	ldrh	r3, [r7, #6]
 8010bfa:	3302      	adds	r3, #2
 8010bfc:	b29b      	uxth	r3, r3
 8010bfe:	80fb      	strh	r3, [r7, #6]
 8010c00:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8010c04:	2bff      	cmp	r3, #255	; 0xff
 8010c06:	dde0      	ble.n	8010bca <Save_Parameter+0xca>
 8010c08:	e000      	b.n	8010c0c <Save_Parameter+0x10c>
    	   break;
 8010c0a:	bf00      	nop
     }
   }
   HAL_FLASH_Lock();
 8010c0c:	f008 fa16 	bl	801903c <HAL_FLASH_Lock>

   return j;
 8010c10:	88bb      	ldrh	r3, [r7, #4]
 8010c12:	b2db      	uxtb	r3, r3
 }
 8010c14:	4618      	mov	r0, r3
 8010c16:	3708      	adds	r7, #8
 8010c18:	46bd      	mov	sp, r7
 8010c1a:	bd80      	pop	{r7, pc}
 8010c1c:	20000194 	.word	0x20000194
 8010c20:	20003644 	.word	0x20003644
 8010c24:	20002604 	.word	0x20002604
 8010c28:	2000079a 	.word	0x2000079a
 8010c2c:	2000079c 	.word	0x2000079c
 8010c30:	20000274 	.word	0x20000274
 8010c34:	20000514 	.word	0x20000514

08010c38 <Read_Parameter>:
 /*******************************************************************************
 Read_Parameter:
 *******************************************************************************/
 void Read_Parameter(void)
 {
 8010c38:	b480      	push	{r7}
 8010c3a:	b083      	sub	sp, #12
 8010c3c:	af00      	add	r7, sp, #0
   short i;
   unsigned short* ptr;
   ptr=(unsigned short*)(Page_Address+55*2); //94*2-40
 8010c3e:	4b3f      	ldr	r3, [pc, #252]	; (8010d3c <Read_Parameter+0x104>)
 8010c40:	603b      	str	r3, [r7, #0]
   TIM_BASE_Val=List[TIM_BASE].Val;
 8010c42:	4b3f      	ldr	r3, [pc, #252]	; (8010d40 <Read_Parameter+0x108>)
 8010c44:	f9b3 203c 	ldrsh.w	r2, [r3, #60]	; 0x3c
 8010c48:	4b3e      	ldr	r3, [pc, #248]	; (8010d44 <Read_Parameter+0x10c>)
 8010c4a:	801a      	strh	r2, [r3, #0]
   List[TIM_BASE].Val=0;
 8010c4c:	4b3c      	ldr	r3, [pc, #240]	; (8010d40 <Read_Parameter+0x108>)
 8010c4e:	2200      	movs	r2, #0
 8010c50:	879a      	strh	r2, [r3, #60]	; 0x3c
   if(*ptr!=0xaa55)
 8010c52:	683b      	ldr	r3, [r7, #0]
 8010c54:	881b      	ldrh	r3, [r3, #0]
 8010c56:	f64a 2255 	movw	r2, #43605	; 0xaa55
 8010c5a:	4293      	cmp	r3, r2
 8010c5c:	d166      	bne.n	8010d2c <Read_Parameter+0xf4>
	   return ;
   ptr=(unsigned short*)Page_Address;
 8010c5e:	4b3a      	ldr	r3, [pc, #232]	; (8010d48 <Read_Parameter+0x110>)
 8010c60:	603b      	str	r3, [r7, #0]
   if(*ptr++!=0x0400)
 8010c62:	683b      	ldr	r3, [r7, #0]
 8010c64:	1c9a      	adds	r2, r3, #2
 8010c66:	603a      	str	r2, [r7, #0]
 8010c68:	881b      	ldrh	r3, [r3, #0]
 8010c6a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8010c6e:	d15f      	bne.n	8010d30 <Read_Parameter+0xf8>
	   return ;
   Current=*ptr++;
 8010c70:	683b      	ldr	r3, [r7, #0]
 8010c72:	1c9a      	adds	r2, r3, #2
 8010c74:	603a      	str	r2, [r7, #0]
 8010c76:	881b      	ldrh	r3, [r3, #0]
 8010c78:	b21a      	sxth	r2, r3
 8010c7a:	4b34      	ldr	r3, [pc, #208]	; (8010d4c <Read_Parameter+0x114>)
 8010c7c:	801a      	strh	r2, [r3, #0]
   List[MenuNow[Current]].Flg |= UPD;
 8010c7e:	4b33      	ldr	r3, [pc, #204]	; (8010d4c <Read_Parameter+0x114>)
 8010c80:	f9b3 3000 	ldrsh.w	r3, [r3]
 8010c84:	461a      	mov	r2, r3
 8010c86:	4b32      	ldr	r3, [pc, #200]	; (8010d50 <Read_Parameter+0x118>)
 8010c88:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8010c8c:	4a2c      	ldr	r2, [pc, #176]	; (8010d40 <Read_Parameter+0x108>)
 8010c8e:	00db      	lsls	r3, r3, #3
 8010c90:	4413      	add	r3, r2
 8010c92:	799b      	ldrb	r3, [r3, #6]
 8010c94:	4a2d      	ldr	r2, [pc, #180]	; (8010d4c <Read_Parameter+0x114>)
 8010c96:	f9b2 2000 	ldrsh.w	r2, [r2]
 8010c9a:	4611      	mov	r1, r2
 8010c9c:	4a2c      	ldr	r2, [pc, #176]	; (8010d50 <Read_Parameter+0x118>)
 8010c9e:	f932 2011 	ldrsh.w	r2, [r2, r1, lsl #1]
 8010ca2:	4610      	mov	r0, r2
 8010ca4:	f043 0320 	orr.w	r3, r3, #32
 8010ca8:	b2d9      	uxtb	r1, r3
 8010caa:	4a25      	ldr	r2, [pc, #148]	; (8010d40 <Read_Parameter+0x108>)
 8010cac:	00c3      	lsls	r3, r0, #3
 8010cae:	4413      	add	r3, r2
 8010cb0:	460a      	mov	r2, r1
 8010cb2:	719a      	strb	r2, [r3, #6]
   ptr++;
 8010cb4:	683b      	ldr	r3, [r7, #0]
 8010cb6:	3302      	adds	r3, #2
 8010cb8:	603b      	str	r3, [r7, #0]
   for(i=0;i<42;i++)
 8010cba:	2300      	movs	r3, #0
 8010cbc:	80fb      	strh	r3, [r7, #6]
 8010cbe:	e011      	b.n	8010ce4 <Read_Parameter+0xac>
	   List[i].Val=*ptr++;
 8010cc0:	683b      	ldr	r3, [r7, #0]
 8010cc2:	1c9a      	adds	r2, r3, #2
 8010cc4:	603a      	str	r2, [r7, #0]
 8010cc6:	881a      	ldrh	r2, [r3, #0]
 8010cc8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8010ccc:	b211      	sxth	r1, r2
 8010cce:	4a1c      	ldr	r2, [pc, #112]	; (8010d40 <Read_Parameter+0x108>)
 8010cd0:	00db      	lsls	r3, r3, #3
 8010cd2:	4413      	add	r3, r2
 8010cd4:	460a      	mov	r2, r1
 8010cd6:	809a      	strh	r2, [r3, #4]
   for(i=0;i<42;i++)
 8010cd8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8010cdc:	b29b      	uxth	r3, r3
 8010cde:	3301      	adds	r3, #1
 8010ce0:	b29b      	uxth	r3, r3
 8010ce2:	80fb      	strh	r3, [r7, #6]
 8010ce4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8010ce8:	2b29      	cmp	r3, #41	; 0x29
 8010cea:	dde9      	ble.n	8010cc0 <Read_Parameter+0x88>
   for(i=0;i<8;i++)
 8010cec:	2300      	movs	r3, #0
 8010cee:	80fb      	strh	r3, [r7, #6]
 8010cf0:	e00f      	b.n	8010d12 <Read_Parameter+0xda>
	   MenuNow[i]=*ptr++;
 8010cf2:	683b      	ldr	r3, [r7, #0]
 8010cf4:	1c9a      	adds	r2, r3, #2
 8010cf6:	603a      	str	r2, [r7, #0]
 8010cf8:	881a      	ldrh	r2, [r3, #0]
 8010cfa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8010cfe:	b211      	sxth	r1, r2
 8010d00:	4a13      	ldr	r2, [pc, #76]	; (8010d50 <Read_Parameter+0x118>)
 8010d02:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
   for(i=0;i<8;i++)
 8010d06:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8010d0a:	b29b      	uxth	r3, r3
 8010d0c:	3301      	adds	r3, #1
 8010d0e:	b29b      	uxth	r3, r3
 8010d10:	80fb      	strh	r3, [r7, #6]
 8010d12:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8010d16:	2b07      	cmp	r3, #7
 8010d18:	ddeb      	ble.n	8010cf2 <Read_Parameter+0xba>
   TIM_BASE_Val=List[TIM_BASE].Val;
 8010d1a:	4b09      	ldr	r3, [pc, #36]	; (8010d40 <Read_Parameter+0x108>)
 8010d1c:	f9b3 203c 	ldrsh.w	r2, [r3, #60]	; 0x3c
 8010d20:	4b08      	ldr	r3, [pc, #32]	; (8010d44 <Read_Parameter+0x10c>)
 8010d22:	801a      	strh	r2, [r3, #0]
   List[TIM_BASE].Val=0;
 8010d24:	4b06      	ldr	r3, [pc, #24]	; (8010d40 <Read_Parameter+0x108>)
 8010d26:	2200      	movs	r2, #0
 8010d28:	879a      	strh	r2, [r3, #60]	; 0x3c

   return ;
 8010d2a:	e002      	b.n	8010d32 <Read_Parameter+0xfa>
	   return ;
 8010d2c:	bf00      	nop
 8010d2e:	e000      	b.n	8010d32 <Read_Parameter+0xfa>
	   return ;
 8010d30:	bf00      	nop
 }
 8010d32:	370c      	adds	r7, #12
 8010d34:	46bd      	mov	sp, r7
 8010d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d3a:	4770      	bx	lr
 8010d3c:	0800806e 	.word	0x0800806e
 8010d40:	20000274 	.word	0x20000274
 8010d44:	20003640 	.word	0x20003640
 8010d48:	08008000 	.word	0x08008000
 8010d4c:	2000079a 	.word	0x2000079a
 8010d50:	20000514 	.word	0x20000514

08010d54 <Save_Kpg>:
 /*******************************************************************************
  Save_Kpg:                       Return: 0= Success
 *******************************************************************************/
 char Save_Kpg(void)
 {
 8010d54:	b580      	push	{r7, lr}
 8010d56:	b082      	sub	sp, #8
 8010d58:	af00      	add	r7, sp, #0
   short i, j;
   unsigned short* ptr;

   Flash_Erase.Sector = 1;
 8010d5a:	4b34      	ldr	r3, [pc, #208]	; (8010e2c <Save_Kpg+0xd8>)
 8010d5c:	2201      	movs	r2, #1
 8010d5e:	609a      	str	r2, [r3, #8]

   HAL_FLASH_Unlock();
 8010d60:	f008 f94a 	bl	8018ff8 <HAL_FLASH_Unlock>
   j=HAL_FLASHEx_Erase( &Flash_Erase, &err);
 8010d64:	4932      	ldr	r1, [pc, #200]	; (8010e30 <Save_Kpg+0xdc>)
 8010d66:	4831      	ldr	r0, [pc, #196]	; (8010e2c <Save_Kpg+0xd8>)
 8010d68:	f008 fab8 	bl	80192dc <HAL_FLASHEx_Erase>
 8010d6c:	4603      	mov	r3, r0
 8010d6e:	80bb      	strh	r3, [r7, #4]
   if(j== HAL_OK)
 8010d70:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8010d74:	2b00      	cmp	r3, #0
 8010d76:	d151      	bne.n	8010e1c <Save_Kpg+0xc8>
   {
     ptr=F_Buff;
 8010d78:	4b2e      	ldr	r3, [pc, #184]	; (8010e34 <Save_Kpg+0xe0>)
 8010d7a:	603b      	str	r3, [r7, #0]
     *ptr++=0xaa55;
 8010d7c:	683b      	ldr	r3, [r7, #0]
 8010d7e:	1c9a      	adds	r2, r3, #2
 8010d80:	603a      	str	r2, [r7, #0]
 8010d82:	f64a 2255 	movw	r2, #43605	; 0xaa55
 8010d86:	801a      	strh	r2, [r3, #0]
     *ptr++=0x0400;                              //Ver:3.00
 8010d88:	683b      	ldr	r3, [r7, #0]
 8010d8a:	1c9a      	adds	r2, r3, #2
 8010d8c:	603a      	str	r2, [r7, #0]
 8010d8e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8010d92:	801a      	strh	r2, [r3, #0]
     *ptr++=Cal_Flag;
 8010d94:	4b28      	ldr	r3, [pc, #160]	; (8010e38 <Save_Kpg+0xe4>)
 8010d96:	7819      	ldrb	r1, [r3, #0]
 8010d98:	683b      	ldr	r3, [r7, #0]
 8010d9a:	1c9a      	adds	r2, r3, #2
 8010d9c:	603a      	str	r2, [r7, #0]
 8010d9e:	b28a      	uxth	r2, r1
 8010da0:	801a      	strh	r2, [r3, #0]
     for(i=0;i<3;i++)
 8010da2:	2300      	movs	r3, #0
 8010da4:	80fb      	strh	r3, [r7, #6]
 8010da6:	e00f      	b.n	8010dc8 <Save_Kpg+0x74>
    	 *ptr++=Kpg[i];
 8010da8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8010dac:	4a23      	ldr	r2, [pc, #140]	; (8010e3c <Save_Kpg+0xe8>)
 8010dae:	f932 1013 	ldrsh.w	r1, [r2, r3, lsl #1]
 8010db2:	683b      	ldr	r3, [r7, #0]
 8010db4:	1c9a      	adds	r2, r3, #2
 8010db6:	603a      	str	r2, [r7, #0]
 8010db8:	b28a      	uxth	r2, r1
 8010dba:	801a      	strh	r2, [r3, #0]
     for(i=0;i<3;i++)
 8010dbc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8010dc0:	b29b      	uxth	r3, r3
 8010dc2:	3301      	adds	r3, #1
 8010dc4:	b29b      	uxth	r3, r3
 8010dc6:	80fb      	strh	r3, [r7, #6]
 8010dc8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8010dcc:	2b02      	cmp	r3, #2
 8010dce:	ddeb      	ble.n	8010da8 <Save_Kpg+0x54>
     ptr=F_Buff;
 8010dd0:	4b18      	ldr	r3, [pc, #96]	; (8010e34 <Save_Kpg+0xe0>)
 8010dd2:	603b      	str	r3, [r7, #0]
     for(i=0; i<256; i+=2)
 8010dd4:	2300      	movs	r3, #0
 8010dd6:	80fb      	strh	r3, [r7, #6]
 8010dd8:	e01a      	b.n	8010e10 <Save_Kpg+0xbc>
     {                      //128 SHORT
       j= HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, Kpg_Address+i, *ptr++);
 8010dda:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8010dde:	f103 6300 	add.w	r3, r3, #134217728	; 0x8000000
 8010de2:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8010de6:	4619      	mov	r1, r3
 8010de8:	683b      	ldr	r3, [r7, #0]
 8010dea:	1c9a      	adds	r2, r3, #2
 8010dec:	603a      	str	r2, [r7, #0]
 8010dee:	881b      	ldrh	r3, [r3, #0]
 8010df0:	b29a      	uxth	r2, r3
 8010df2:	f04f 0300 	mov.w	r3, #0
 8010df6:	2001      	movs	r0, #1
 8010df8:	f008 f8aa 	bl	8018f50 <HAL_FLASH_Program>
 8010dfc:	4603      	mov	r3, r0
 8010dfe:	80bb      	strh	r3, [r7, #4]
       if(j!= HAL_OK)
 8010e00:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8010e04:	2b00      	cmp	r3, #0
 8010e06:	d108      	bne.n	8010e1a <Save_Kpg+0xc6>
     for(i=0; i<256; i+=2)
 8010e08:	88fb      	ldrh	r3, [r7, #6]
 8010e0a:	3302      	adds	r3, #2
 8010e0c:	b29b      	uxth	r3, r3
 8010e0e:	80fb      	strh	r3, [r7, #6]
 8010e10:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8010e14:	2bff      	cmp	r3, #255	; 0xff
 8010e16:	dde0      	ble.n	8010dda <Save_Kpg+0x86>
 8010e18:	e000      	b.n	8010e1c <Save_Kpg+0xc8>
    	   break;
 8010e1a:	bf00      	nop
     }
   }
   HAL_FLASH_Lock();
 8010e1c:	f008 f90e 	bl	801903c <HAL_FLASH_Lock>
   return j;
 8010e20:	88bb      	ldrh	r3, [r7, #4]
 8010e22:	b2db      	uxtb	r3, r3
 }
 8010e24:	4618      	mov	r0, r3
 8010e26:	3708      	adds	r7, #8
 8010e28:	46bd      	mov	sp, r7
 8010e2a:	bd80      	pop	{r7, pc}
 8010e2c:	20000194 	.word	0x20000194
 8010e30:	20003644 	.word	0x20003644
 8010e34:	20002604 	.word	0x20002604
 8010e38:	20000192 	.word	0x20000192
 8010e3c:	20000548 	.word	0x20000548

08010e40 <Read_Kpg>:
 /*******************************************************************************
 Read_Kpg:
 *******************************************************************************/
 void Read_Kpg(void)
 {
 8010e40:	b480      	push	{r7}
 8010e42:	b083      	sub	sp, #12
 8010e44:	af00      	add	r7, sp, #0
   short i;
   unsigned short* ptr;
   ptr=(unsigned short*)Kpg_Address;
 8010e46:	4b1c      	ldr	r3, [pc, #112]	; (8010eb8 <Read_Kpg+0x78>)
 8010e48:	603b      	str	r3, [r7, #0]
   if(*ptr++!=0xaa55)
 8010e4a:	683b      	ldr	r3, [r7, #0]
 8010e4c:	1c9a      	adds	r2, r3, #2
 8010e4e:	603a      	str	r2, [r7, #0]
 8010e50:	881b      	ldrh	r3, [r3, #0]
 8010e52:	f64a 2255 	movw	r2, #43605	; 0xaa55
 8010e56:	4293      	cmp	r3, r2
 8010e58:	d125      	bne.n	8010ea6 <Read_Kpg+0x66>
	   return ;
   if(*ptr++!=0x0400)
 8010e5a:	683b      	ldr	r3, [r7, #0]
 8010e5c:	1c9a      	adds	r2, r3, #2
 8010e5e:	603a      	str	r2, [r7, #0]
 8010e60:	881b      	ldrh	r3, [r3, #0]
 8010e62:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8010e66:	d120      	bne.n	8010eaa <Read_Kpg+0x6a>
	   return ;
   Cal_Flag = *ptr++;
 8010e68:	683b      	ldr	r3, [r7, #0]
 8010e6a:	1c9a      	adds	r2, r3, #2
 8010e6c:	603a      	str	r2, [r7, #0]
 8010e6e:	881b      	ldrh	r3, [r3, #0]
 8010e70:	b2da      	uxtb	r2, r3
 8010e72:	4b12      	ldr	r3, [pc, #72]	; (8010ebc <Read_Kpg+0x7c>)
 8010e74:	701a      	strb	r2, [r3, #0]
   for(i=0;i< 3;i++)
 8010e76:	2300      	movs	r3, #0
 8010e78:	80fb      	strh	r3, [r7, #6]
 8010e7a:	e00f      	b.n	8010e9c <Read_Kpg+0x5c>
       Kpg[i] = *ptr++;  //CH_A,CH_B
 8010e7c:	683b      	ldr	r3, [r7, #0]
 8010e7e:	1c9a      	adds	r2, r3, #2
 8010e80:	603a      	str	r2, [r7, #0]
 8010e82:	881a      	ldrh	r2, [r3, #0]
 8010e84:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8010e88:	b211      	sxth	r1, r2
 8010e8a:	4a0d      	ldr	r2, [pc, #52]	; (8010ec0 <Read_Kpg+0x80>)
 8010e8c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
   for(i=0;i< 3;i++)
 8010e90:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8010e94:	b29b      	uxth	r3, r3
 8010e96:	3301      	adds	r3, #1
 8010e98:	b29b      	uxth	r3, r3
 8010e9a:	80fb      	strh	r3, [r7, #6]
 8010e9c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8010ea0:	2b02      	cmp	r3, #2
 8010ea2:	ddeb      	ble.n	8010e7c <Read_Kpg+0x3c>
   return ;
 8010ea4:	e002      	b.n	8010eac <Read_Kpg+0x6c>
	   return ;
 8010ea6:	bf00      	nop
 8010ea8:	e000      	b.n	8010eac <Read_Kpg+0x6c>
	   return ;
 8010eaa:	bf00      	nop
 }
 8010eac:	370c      	adds	r7, #12
 8010eae:	46bd      	mov	sp, r7
 8010eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010eb4:	4770      	bx	lr
 8010eb6:	bf00      	nop
 8010eb8:	08004000 	.word	0x08004000
 8010ebc:	20000192 	.word	0x20000192
 8010ec0:	20000548 	.word	0x20000548

08010ec4 <Restore>:

 void Restore(void)
 {
 8010ec4:	b580      	push	{r7, lr}
 8010ec6:	b082      	sub	sp, #8
 8010ec8:	af00      	add	r7, sp, #0
   short i;
   TIM_BASE_Val=List[TIM_BASE].Val;
 8010eca:	4b2d      	ldr	r3, [pc, #180]	; (8010f80 <Restore+0xbc>)
 8010ecc:	f9b3 203c 	ldrsh.w	r2, [r3, #60]	; 0x3c
 8010ed0:	4b2c      	ldr	r3, [pc, #176]	; (8010f84 <Restore+0xc0>)
 8010ed2:	801a      	strh	r2, [r3, #0]
   Current=0;
 8010ed4:	4b2c      	ldr	r3, [pc, #176]	; (8010f88 <Restore+0xc4>)
 8010ed6:	2200      	movs	r2, #0
 8010ed8:	801a      	strh	r2, [r3, #0]
   List[MenuNow[Current]].Flg |= UPD;
 8010eda:	4b2b      	ldr	r3, [pc, #172]	; (8010f88 <Restore+0xc4>)
 8010edc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8010ee0:	461a      	mov	r2, r3
 8010ee2:	4b2a      	ldr	r3, [pc, #168]	; (8010f8c <Restore+0xc8>)
 8010ee4:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8010ee8:	4a25      	ldr	r2, [pc, #148]	; (8010f80 <Restore+0xbc>)
 8010eea:	00db      	lsls	r3, r3, #3
 8010eec:	4413      	add	r3, r2
 8010eee:	799b      	ldrb	r3, [r3, #6]
 8010ef0:	4a25      	ldr	r2, [pc, #148]	; (8010f88 <Restore+0xc4>)
 8010ef2:	f9b2 2000 	ldrsh.w	r2, [r2]
 8010ef6:	4611      	mov	r1, r2
 8010ef8:	4a24      	ldr	r2, [pc, #144]	; (8010f8c <Restore+0xc8>)
 8010efa:	f932 2011 	ldrsh.w	r2, [r2, r1, lsl #1]
 8010efe:	4610      	mov	r0, r2
 8010f00:	f043 0320 	orr.w	r3, r3, #32
 8010f04:	b2d9      	uxtb	r1, r3
 8010f06:	4a1e      	ldr	r2, [pc, #120]	; (8010f80 <Restore+0xbc>)
 8010f08:	00c3      	lsls	r3, r0, #3
 8010f0a:	4413      	add	r3, r2
 8010f0c:	460a      	mov	r2, r1
 8010f0e:	719a      	strb	r2, [r3, #6]
   for(i=0;i<42;i++)
 8010f10:	2300      	movs	r3, #0
 8010f12:	80fb      	strh	r3, [r7, #6]
 8010f14:	e013      	b.n	8010f3e <Restore+0x7a>
	   List[i].Val= List_c[i].Val;
 8010f16:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8010f1a:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8010f1e:	491c      	ldr	r1, [pc, #112]	; (8010f90 <Restore+0xcc>)
 8010f20:	00db      	lsls	r3, r3, #3
 8010f22:	440b      	add	r3, r1
 8010f24:	f9b3 0004 	ldrsh.w	r0, [r3, #4]
 8010f28:	4915      	ldr	r1, [pc, #84]	; (8010f80 <Restore+0xbc>)
 8010f2a:	00d3      	lsls	r3, r2, #3
 8010f2c:	440b      	add	r3, r1
 8010f2e:	4602      	mov	r2, r0
 8010f30:	809a      	strh	r2, [r3, #4]
   for(i=0;i<42;i++)
 8010f32:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8010f36:	b29b      	uxth	r3, r3
 8010f38:	3301      	adds	r3, #1
 8010f3a:	b29b      	uxth	r3, r3
 8010f3c:	80fb      	strh	r3, [r7, #6]
 8010f3e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8010f42:	2b29      	cmp	r3, #41	; 0x29
 8010f44:	dde7      	ble.n	8010f16 <Restore+0x52>
   for(i=0;i<8;i++)
 8010f46:	2300      	movs	r3, #0
 8010f48:	80fb      	strh	r3, [r7, #6]
 8010f4a:	e00f      	b.n	8010f6c <Restore+0xa8>
	   MenuNow[i]= MenuNow_C[i];
 8010f4c:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8010f50:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8010f54:	490f      	ldr	r1, [pc, #60]	; (8010f94 <Restore+0xd0>)
 8010f56:	f931 1012 	ldrsh.w	r1, [r1, r2, lsl #1]
 8010f5a:	4a0c      	ldr	r2, [pc, #48]	; (8010f8c <Restore+0xc8>)
 8010f5c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
   for(i=0;i<8;i++)
 8010f60:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8010f64:	b29b      	uxth	r3, r3
 8010f66:	3301      	adds	r3, #1
 8010f68:	b29b      	uxth	r3, r3
 8010f6a:	80fb      	strh	r3, [r7, #6]
 8010f6c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8010f70:	2b07      	cmp	r3, #7
 8010f72:	ddeb      	ble.n	8010f4c <Restore+0x88>
   Update_Title();
 8010f74:	f000 fdec 	bl	8011b50 <Update_Title>
}
 8010f78:	bf00      	nop
 8010f7a:	3708      	adds	r7, #8
 8010f7c:	46bd      	mov	sp, r7
 8010f7e:	bd80      	pop	{r7, pc}
 8010f80:	20000274 	.word	0x20000274
 8010f84:	20003640 	.word	0x20003640
 8010f88:	2000079a 	.word	0x2000079a
 8010f8c:	20000514 	.word	0x20000514
 8010f90:	200003c4 	.word	0x200003c4
 8010f94:	08001f94 	.word	0x08001f94

08010f98 <Restore_CalPar>:

 void Restore_CalPar(void)
 {
 8010f98:	b580      	push	{r7, lr}
 8010f9a:	b082      	sub	sp, #8
 8010f9c:	af00      	add	r7, sp, #0
   short i = 0;
 8010f9e:	2300      	movs	r3, #0
 8010fa0:	80fb      	strh	r3, [r7, #6]
   List[SMPL_DPTH].Flg |= UPD;
 8010fa2:	4b47      	ldr	r3, [pc, #284]	; (80110c0 <Restore_CalPar+0x128>)
 8010fa4:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 8010fa8:	f043 0320 	orr.w	r3, r3, #32
 8010fac:	b2da      	uxtb	r2, r3
 8010fae:	4b44      	ldr	r3, [pc, #272]	; (80110c0 <Restore_CalPar+0x128>)
 8010fb0:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
   TIM_BASE_Val=List[TIM_BASE].Val;
 8010fb4:	4b42      	ldr	r3, [pc, #264]	; (80110c0 <Restore_CalPar+0x128>)
 8010fb6:	f9b3 203c 	ldrsh.w	r2, [r3, #60]	; 0x3c
 8010fba:	4b42      	ldr	r3, [pc, #264]	; (80110c4 <Restore_CalPar+0x12c>)
 8010fbc:	801a      	strh	r2, [r3, #0]
   List[TIM_BASE].Val=0;
 8010fbe:	4b40      	ldr	r3, [pc, #256]	; (80110c0 <Restore_CalPar+0x128>)
 8010fc0:	2200      	movs	r2, #0
 8010fc2:	879a      	strh	r2, [r3, #60]	; 0x3c
   Current=0;
 8010fc4:	4b40      	ldr	r3, [pc, #256]	; (80110c8 <Restore_CalPar+0x130>)
 8010fc6:	2200      	movs	r2, #0
 8010fc8:	801a      	strh	r2, [r3, #0]
   List[MenuNow[Current]].Flg |= UPD;
 8010fca:	4b3f      	ldr	r3, [pc, #252]	; (80110c8 <Restore_CalPar+0x130>)
 8010fcc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8010fd0:	461a      	mov	r2, r3
 8010fd2:	4b3e      	ldr	r3, [pc, #248]	; (80110cc <Restore_CalPar+0x134>)
 8010fd4:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8010fd8:	4a39      	ldr	r2, [pc, #228]	; (80110c0 <Restore_CalPar+0x128>)
 8010fda:	00db      	lsls	r3, r3, #3
 8010fdc:	4413      	add	r3, r2
 8010fde:	799b      	ldrb	r3, [r3, #6]
 8010fe0:	4a39      	ldr	r2, [pc, #228]	; (80110c8 <Restore_CalPar+0x130>)
 8010fe2:	f9b2 2000 	ldrsh.w	r2, [r2]
 8010fe6:	4611      	mov	r1, r2
 8010fe8:	4a38      	ldr	r2, [pc, #224]	; (80110cc <Restore_CalPar+0x134>)
 8010fea:	f932 2011 	ldrsh.w	r2, [r2, r1, lsl #1]
 8010fee:	4610      	mov	r0, r2
 8010ff0:	f043 0320 	orr.w	r3, r3, #32
 8010ff4:	b2d9      	uxtb	r1, r3
 8010ff6:	4a32      	ldr	r2, [pc, #200]	; (80110c0 <Restore_CalPar+0x128>)
 8010ff8:	00c3      	lsls	r3, r0, #3
 8010ffa:	4413      	add	r3, r2
 8010ffc:	460a      	mov	r2, r1
 8010ffe:	719a      	strb	r2, [r3, #6]
   for(i=0;i<42;i++) List[i].Val= List_c[i].Val;
 8011000:	2300      	movs	r3, #0
 8011002:	80fb      	strh	r3, [r7, #6]
 8011004:	e013      	b.n	801102e <Restore_CalPar+0x96>
 8011006:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801100a:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 801100e:	4930      	ldr	r1, [pc, #192]	; (80110d0 <Restore_CalPar+0x138>)
 8011010:	00db      	lsls	r3, r3, #3
 8011012:	440b      	add	r3, r1
 8011014:	f9b3 0004 	ldrsh.w	r0, [r3, #4]
 8011018:	4929      	ldr	r1, [pc, #164]	; (80110c0 <Restore_CalPar+0x128>)
 801101a:	00d3      	lsls	r3, r2, #3
 801101c:	440b      	add	r3, r1
 801101e:	4602      	mov	r2, r0
 8011020:	809a      	strh	r2, [r3, #4]
 8011022:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8011026:	b29b      	uxth	r3, r3
 8011028:	3301      	adds	r3, #1
 801102a:	b29b      	uxth	r3, r3
 801102c:	80fb      	strh	r3, [r7, #6]
 801102e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8011032:	2b29      	cmp	r3, #41	; 0x29
 8011034:	dde7      	ble.n	8011006 <Restore_CalPar+0x6e>
   for(i=0;i<8;i++)  MenuNow[i]= MenuNow_C[i];
 8011036:	2300      	movs	r3, #0
 8011038:	80fb      	strh	r3, [r7, #6]
 801103a:	e00f      	b.n	801105c <Restore_CalPar+0xc4>
 801103c:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8011040:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8011044:	4923      	ldr	r1, [pc, #140]	; (80110d4 <Restore_CalPar+0x13c>)
 8011046:	f931 1012 	ldrsh.w	r1, [r1, r2, lsl #1]
 801104a:	4a20      	ldr	r2, [pc, #128]	; (80110cc <Restore_CalPar+0x134>)
 801104c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8011050:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8011054:	b29b      	uxth	r3, r3
 8011056:	3301      	adds	r3, #1
 8011058:	b29b      	uxth	r3, r3
 801105a:	80fb      	strh	r3, [r7, #6]
 801105c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8011060:	2b07      	cmp	r3, #7
 8011062:	ddeb      	ble.n	801103c <Restore_CalPar+0xa4>
   TIM_BASE_Val=List[TIM_BASE].Val;
 8011064:	4b16      	ldr	r3, [pc, #88]	; (80110c0 <Restore_CalPar+0x128>)
 8011066:	f9b3 203c 	ldrsh.w	r2, [r3, #60]	; 0x3c
 801106a:	4b16      	ldr	r3, [pc, #88]	; (80110c4 <Restore_CalPar+0x12c>)
 801106c:	801a      	strh	r2, [r3, #0]
   List[TIM_BASE].Val=0;
 801106e:	4b14      	ldr	r3, [pc, #80]	; (80110c0 <Restore_CalPar+0x128>)
 8011070:	2200      	movs	r2, #0
 8011072:	879a      	strh	r2, [r3, #60]	; 0x3c
   for(i=Y_RANGES; i<=STANDBY; i++){
 8011074:	2300      	movs	r3, #0
 8011076:	80fb      	strh	r3, [r7, #6]
 8011078:	e015      	b.n	80110a6 <Restore_CalPar+0x10e>
   List[i].Flg |= UPD;
 801107a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801107e:	4a10      	ldr	r2, [pc, #64]	; (80110c0 <Restore_CalPar+0x128>)
 8011080:	00db      	lsls	r3, r3, #3
 8011082:	4413      	add	r3, r2
 8011084:	799a      	ldrb	r2, [r3, #6]
 8011086:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801108a:	f042 0220 	orr.w	r2, r2, #32
 801108e:	b2d1      	uxtb	r1, r2
 8011090:	4a0b      	ldr	r2, [pc, #44]	; (80110c0 <Restore_CalPar+0x128>)
 8011092:	00db      	lsls	r3, r3, #3
 8011094:	4413      	add	r3, r2
 8011096:	460a      	mov	r2, r1
 8011098:	719a      	strb	r2, [r3, #6]
   for(i=Y_RANGES; i<=STANDBY; i++){
 801109a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801109e:	b29b      	uxth	r3, r3
 80110a0:	3301      	adds	r3, #1
 80110a2:	b29b      	uxth	r3, r3
 80110a4:	80fb      	strh	r3, [r7, #6]
 80110a6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80110aa:	2b29      	cmp	r3, #41	; 0x29
 80110ac:	dde5      	ble.n	801107a <Restore_CalPar+0xe2>
   }
   Update_Title();
 80110ae:	f000 fd4f 	bl	8011b50 <Update_Title>
   Close_Pop();
 80110b2:	f7fd fd09 	bl	800eac8 <Close_Pop>
 }
 80110b6:	bf00      	nop
 80110b8:	3708      	adds	r7, #8
 80110ba:	46bd      	mov	sp, r7
 80110bc:	bd80      	pop	{r7, pc}
 80110be:	bf00      	nop
 80110c0:	20000274 	.word	0x20000274
 80110c4:	20003640 	.word	0x20003640
 80110c8:	2000079a 	.word	0x2000079a
 80110cc:	20000514 	.word	0x20000514
 80110d0:	200003c4 	.word	0x200003c4
 80110d4:	08001f94 	.word	0x08001f94

080110d8 <u8ToDec3>:

/*******************************************************************************
 u8ToDec3: Change Byte to 3 decimal number string
*******************************************************************************/
void u8ToDec3(char *p, char n)
{
 80110d8:	b480      	push	{r7}
 80110da:	b083      	sub	sp, #12
 80110dc:	af00      	add	r7, sp, #0
 80110de:	6078      	str	r0, [r7, #4]
 80110e0:	460b      	mov	r3, r1
 80110e2:	70fb      	strb	r3, [r7, #3]
    *p++ = '0'+n/100;
 80110e4:	78fb      	ldrb	r3, [r7, #3]
 80110e6:	4a1e      	ldr	r2, [pc, #120]	; (8011160 <u8ToDec3+0x88>)
 80110e8:	fba2 2303 	umull	r2, r3, r2, r3
 80110ec:	095b      	lsrs	r3, r3, #5
 80110ee:	b2da      	uxtb	r2, r3
 80110f0:	687b      	ldr	r3, [r7, #4]
 80110f2:	1c59      	adds	r1, r3, #1
 80110f4:	6079      	str	r1, [r7, #4]
 80110f6:	3230      	adds	r2, #48	; 0x30
 80110f8:	b2d2      	uxtb	r2, r2
 80110fa:	701a      	strb	r2, [r3, #0]
    n %= 100;
 80110fc:	78fb      	ldrb	r3, [r7, #3]
 80110fe:	4a18      	ldr	r2, [pc, #96]	; (8011160 <u8ToDec3+0x88>)
 8011100:	fba2 1203 	umull	r1, r2, r2, r3
 8011104:	0952      	lsrs	r2, r2, #5
 8011106:	2164      	movs	r1, #100	; 0x64
 8011108:	fb01 f202 	mul.w	r2, r1, r2
 801110c:	1a9b      	subs	r3, r3, r2
 801110e:	70fb      	strb	r3, [r7, #3]
    *p++ = '0'+n/10;
 8011110:	78fb      	ldrb	r3, [r7, #3]
 8011112:	4a14      	ldr	r2, [pc, #80]	; (8011164 <u8ToDec3+0x8c>)
 8011114:	fba2 2303 	umull	r2, r3, r2, r3
 8011118:	08db      	lsrs	r3, r3, #3
 801111a:	b2da      	uxtb	r2, r3
 801111c:	687b      	ldr	r3, [r7, #4]
 801111e:	1c59      	adds	r1, r3, #1
 8011120:	6079      	str	r1, [r7, #4]
 8011122:	3230      	adds	r2, #48	; 0x30
 8011124:	b2d2      	uxtb	r2, r2
 8011126:	701a      	strb	r2, [r3, #0]
    n %= 10;
 8011128:	78fa      	ldrb	r2, [r7, #3]
 801112a:	4b0e      	ldr	r3, [pc, #56]	; (8011164 <u8ToDec3+0x8c>)
 801112c:	fba3 1302 	umull	r1, r3, r3, r2
 8011130:	08d9      	lsrs	r1, r3, #3
 8011132:	460b      	mov	r3, r1
 8011134:	009b      	lsls	r3, r3, #2
 8011136:	440b      	add	r3, r1
 8011138:	005b      	lsls	r3, r3, #1
 801113a:	1ad3      	subs	r3, r2, r3
 801113c:	70fb      	strb	r3, [r7, #3]
    *p++ = '0'+n;
 801113e:	687b      	ldr	r3, [r7, #4]
 8011140:	1c5a      	adds	r2, r3, #1
 8011142:	607a      	str	r2, [r7, #4]
 8011144:	78fa      	ldrb	r2, [r7, #3]
 8011146:	3230      	adds	r2, #48	; 0x30
 8011148:	b2d2      	uxtb	r2, r2
 801114a:	701a      	strb	r2, [r3, #0]
    *p = 0;
 801114c:	687b      	ldr	r3, [r7, #4]
 801114e:	2200      	movs	r2, #0
 8011150:	701a      	strb	r2, [r3, #0]
}
 8011152:	bf00      	nop
 8011154:	370c      	adds	r7, #12
 8011156:	46bd      	mov	sp, r7
 8011158:	f85d 7b04 	ldr.w	r7, [sp], #4
 801115c:	4770      	bx	lr
 801115e:	bf00      	nop
 8011160:	51eb851f 	.word	0x51eb851f
 8011164:	cccccccd 	.word	0xcccccccd

08011168 <memset16>:

// 16 bit memset

void memset16(unsigned short* ptr, unsigned short value, short len)
{
 8011168:	b480      	push	{r7}
 801116a:	b083      	sub	sp, #12
 801116c:	af00      	add	r7, sp, #0
 801116e:	6078      	str	r0, [r7, #4]
 8011170:	460b      	mov	r3, r1
 8011172:	807b      	strh	r3, [r7, #2]
 8011174:	4613      	mov	r3, r2
 8011176:	803b      	strh	r3, [r7, #0]
	while(len!=0)
 8011178:	e00a      	b.n	8011190 <memset16+0x28>
	{
		*ptr++ = value;
 801117a:	687b      	ldr	r3, [r7, #4]
 801117c:	1c9a      	adds	r2, r3, #2
 801117e:	607a      	str	r2, [r7, #4]
 8011180:	887a      	ldrh	r2, [r7, #2]
 8011182:	801a      	strh	r2, [r3, #0]
		len--;
 8011184:	f9b7 3000 	ldrsh.w	r3, [r7]
 8011188:	b29b      	uxth	r3, r3
 801118a:	3b01      	subs	r3, #1
 801118c:	b29b      	uxth	r3, r3
 801118e:	803b      	strh	r3, [r7, #0]
	while(len!=0)
 8011190:	f9b7 3000 	ldrsh.w	r3, [r7]
 8011194:	2b00      	cmp	r3, #0
 8011196:	d1f0      	bne.n	801117a <memset16+0x12>
	}
}
 8011198:	bf00      	nop
 801119a:	bf00      	nop
 801119c:	370c      	adds	r7, #12
 801119e:	46bd      	mov	sp, r7
 80111a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80111a4:	4770      	bx	lr
	...

080111a8 <Value2Str>:

/*******************************************************************************
 Value2Str: 32λ��תeλ��Ч���ַ��� + �����ַ������ṹΪUnit[][6]��+  ģʽ
*******************************************************************************/
void Value2Str(char *p, long n, const char *pUnit, char e, char Mode)
{
 80111a8:	b580      	push	{r7, lr}
 80111aa:	b088      	sub	sp, #32
 80111ac:	af00      	add	r7, sp, #0
 80111ae:	60f8      	str	r0, [r7, #12]
 80111b0:	60b9      	str	r1, [r7, #8]
 80111b2:	607a      	str	r2, [r7, #4]
 80111b4:	70fb      	strb	r3, [r7, #3]
  short i = 0;
 80111b6:	2300      	movs	r3, #0
 80111b8:	83fb      	strh	r3, [r7, #30]
  long m = n, c = 5;
 80111ba:	68bb      	ldr	r3, [r7, #8]
 80111bc:	61bb      	str	r3, [r7, #24]
 80111be:	2305      	movs	r3, #5
 80111c0:	617b      	str	r3, [r7, #20]

  if(Mode == SIGN)
 80111c2:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80111c6:	2b00      	cmp	r3, #0
 80111c8:	d129      	bne.n	801121e <Value2Str+0x76>
  {
    if(n == 0) *p++ = ' ';
 80111ca:	68bb      	ldr	r3, [r7, #8]
 80111cc:	2b00      	cmp	r3, #0
 80111ce:	d104      	bne.n	80111da <Value2Str+0x32>
 80111d0:	68fb      	ldr	r3, [r7, #12]
 80111d2:	1c5a      	adds	r2, r3, #1
 80111d4:	60fa      	str	r2, [r7, #12]
 80111d6:	2220      	movs	r2, #32
 80111d8:	701a      	strb	r2, [r3, #0]
    if(n >  0) *p++ = '+';
 80111da:	68bb      	ldr	r3, [r7, #8]
 80111dc:	2b00      	cmp	r3, #0
 80111de:	dd04      	ble.n	80111ea <Value2Str+0x42>
 80111e0:	68fb      	ldr	r3, [r7, #12]
 80111e2:	1c5a      	adds	r2, r3, #1
 80111e4:	60fa      	str	r2, [r7, #12]
 80111e6:	222b      	movs	r2, #43	; 0x2b
 80111e8:	701a      	strb	r2, [r3, #0]
    if(n <  0){*p++ = '-'; n = -n;}
 80111ea:	68bb      	ldr	r3, [r7, #8]
 80111ec:	2b00      	cmp	r3, #0
 80111ee:	da16      	bge.n	801121e <Value2Str+0x76>
 80111f0:	68fb      	ldr	r3, [r7, #12]
 80111f2:	1c5a      	adds	r2, r3, #1
 80111f4:	60fa      	str	r2, [r7, #12]
 80111f6:	222d      	movs	r2, #45	; 0x2d
 80111f8:	701a      	strb	r2, [r3, #0]
 80111fa:	68bb      	ldr	r3, [r7, #8]
 80111fc:	425b      	negs	r3, r3
 80111fe:	60bb      	str	r3, [r7, #8]
  }
  while(m >= 10){m /= 10; i++;} // ���� n ����Чλ�� i
 8011200:	e00d      	b.n	801121e <Value2Str+0x76>
 8011202:	69bb      	ldr	r3, [r7, #24]
 8011204:	4a64      	ldr	r2, [pc, #400]	; (8011398 <Value2Str+0x1f0>)
 8011206:	fb82 1203 	smull	r1, r2, r2, r3
 801120a:	1092      	asrs	r2, r2, #2
 801120c:	17db      	asrs	r3, r3, #31
 801120e:	1ad3      	subs	r3, r2, r3
 8011210:	61bb      	str	r3, [r7, #24]
 8011212:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8011216:	b29b      	uxth	r3, r3
 8011218:	3301      	adds	r3, #1
 801121a:	b29b      	uxth	r3, r3
 801121c:	83fb      	strh	r3, [r7, #30]
 801121e:	69bb      	ldr	r3, [r7, #24]
 8011220:	2b09      	cmp	r3, #9
 8011222:	dcee      	bgt.n	8011202 <Value2Str+0x5a>
  if((i%3 == 2)&&(e == 2)) e++;
 8011224:	f9b7 201e 	ldrsh.w	r2, [r7, #30]
 8011228:	4b5c      	ldr	r3, [pc, #368]	; (801139c <Value2Str+0x1f4>)
 801122a:	fb83 3102 	smull	r3, r1, r3, r2
 801122e:	17d3      	asrs	r3, r2, #31
 8011230:	1ac9      	subs	r1, r1, r3
 8011232:	460b      	mov	r3, r1
 8011234:	005b      	lsls	r3, r3, #1
 8011236:	440b      	add	r3, r1
 8011238:	1ad3      	subs	r3, r2, r3
 801123a:	b21b      	sxth	r3, r3
 801123c:	2b02      	cmp	r3, #2
 801123e:	d105      	bne.n	801124c <Value2Str+0xa4>
 8011240:	78fb      	ldrb	r3, [r7, #3]
 8011242:	2b02      	cmp	r3, #2
 8011244:	d102      	bne.n	801124c <Value2Str+0xa4>
 8011246:	78fb      	ldrb	r3, [r7, #3]
 8011248:	3301      	adds	r3, #1
 801124a:	70fb      	strb	r3, [r7, #3]
  m = n; i = 0;
 801124c:	68bb      	ldr	r3, [r7, #8]
 801124e:	61bb      	str	r3, [r7, #24]
 8011250:	2300      	movs	r3, #0
 8011252:	83fb      	strh	r3, [r7, #30]
  while(m >= 10)
 8011254:	e016      	b.n	8011284 <Value2Str+0xdc>
  {
    m /= 10;
 8011256:	69bb      	ldr	r3, [r7, #24]
 8011258:	4a4f      	ldr	r2, [pc, #316]	; (8011398 <Value2Str+0x1f0>)
 801125a:	fb82 1203 	smull	r1, r2, r2, r3
 801125e:	1092      	asrs	r2, r2, #2
 8011260:	17db      	asrs	r3, r3, #31
 8011262:	1ad3      	subs	r3, r2, r3
 8011264:	61bb      	str	r3, [r7, #24]
    if(++i > e) c *= 10;        // n ����Чλ�� i ����e�������������ֵ
 8011266:	8bfb      	ldrh	r3, [r7, #30]
 8011268:	3301      	adds	r3, #1
 801126a:	b29b      	uxth	r3, r3
 801126c:	83fb      	strh	r3, [r7, #30]
 801126e:	f9b7 201e 	ldrsh.w	r2, [r7, #30]
 8011272:	78fb      	ldrb	r3, [r7, #3]
 8011274:	429a      	cmp	r2, r3
 8011276:	dd05      	ble.n	8011284 <Value2Str+0xdc>
 8011278:	697a      	ldr	r2, [r7, #20]
 801127a:	4613      	mov	r3, r2
 801127c:	009b      	lsls	r3, r3, #2
 801127e:	4413      	add	r3, r2
 8011280:	005b      	lsls	r3, r3, #1
 8011282:	617b      	str	r3, [r7, #20]
  while(m >= 10)
 8011284:	69bb      	ldr	r3, [r7, #24]
 8011286:	2b09      	cmp	r3, #9
 8011288:	dce5      	bgt.n	8011256 <Value2Str+0xae>
  }
  if(i >= e) n += c;            // n ������������ֵ
 801128a:	f9b7 201e 	ldrsh.w	r2, [r7, #30]
 801128e:	78fb      	ldrb	r3, [r7, #3]
 8011290:	429a      	cmp	r2, r3
 8011292:	db03      	blt.n	801129c <Value2Str+0xf4>
 8011294:	68ba      	ldr	r2, [r7, #8]
 8011296:	697b      	ldr	r3, [r7, #20]
 8011298:	4413      	add	r3, r2
 801129a:	60bb      	str	r3, [r7, #8]
  m = n; i = 0;
 801129c:	68bb      	ldr	r3, [r7, #8]
 801129e:	61bb      	str	r3, [r7, #24]
 80112a0:	2300      	movs	r3, #0
 80112a2:	83fb      	strh	r3, [r7, #30]
  while(m >= 10){m /= 10; i++;} // ���¼��� n ����Чλ�� i
 80112a4:	e00d      	b.n	80112c2 <Value2Str+0x11a>
 80112a6:	69bb      	ldr	r3, [r7, #24]
 80112a8:	4a3b      	ldr	r2, [pc, #236]	; (8011398 <Value2Str+0x1f0>)
 80112aa:	fb82 1203 	smull	r1, r2, r2, r3
 80112ae:	1092      	asrs	r2, r2, #2
 80112b0:	17db      	asrs	r3, r3, #31
 80112b2:	1ad3      	subs	r3, r2, r3
 80112b4:	61bb      	str	r3, [r7, #24]
 80112b6:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80112ba:	b29b      	uxth	r3, r3
 80112bc:	3301      	adds	r3, #1
 80112be:	b29b      	uxth	r3, r3
 80112c0:	83fb      	strh	r3, [r7, #30]
 80112c2:	69bb      	ldr	r3, [r7, #24]
 80112c4:	2b09      	cmp	r3, #9
 80112c6:	dcee      	bgt.n	80112a6 <Value2Str+0xfe>

  m = i/3;                      // �������ٵ�λȡֵƫ����
 80112c8:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80112cc:	4a33      	ldr	r2, [pc, #204]	; (801139c <Value2Str+0x1f4>)
 80112ce:	fb82 1203 	smull	r1, r2, r2, r3
 80112d2:	17db      	asrs	r3, r3, #31
 80112d4:	1ad3      	subs	r3, r2, r3
 80112d6:	b21b      	sxth	r3, r3
 80112d8:	61bb      	str	r3, [r7, #24]
  while(e--)
 80112da:	e03e      	b.n	801135a <Value2Str+0x1b2>
  {
    *p++ = '0'+ n/Exp(i);
 80112dc:	8bfb      	ldrh	r3, [r7, #30]
 80112de:	b2db      	uxtb	r3, r3
 80112e0:	4618      	mov	r0, r3
 80112e2:	f000 f85d 	bl	80113a0 <Exp>
 80112e6:	4602      	mov	r2, r0
 80112e8:	68bb      	ldr	r3, [r7, #8]
 80112ea:	fb93 f3f2 	sdiv	r3, r3, r2
 80112ee:	b2da      	uxtb	r2, r3
 80112f0:	68fb      	ldr	r3, [r7, #12]
 80112f2:	1c59      	adds	r1, r3, #1
 80112f4:	60f9      	str	r1, [r7, #12]
 80112f6:	3230      	adds	r2, #48	; 0x30
 80112f8:	b2d2      	uxtb	r2, r2
 80112fa:	701a      	strb	r2, [r3, #0]
    if(e &&(i%3 == 0)) *p++ = '.';
 80112fc:	78fb      	ldrb	r3, [r7, #3]
 80112fe:	2b00      	cmp	r3, #0
 8011300:	d012      	beq.n	8011328 <Value2Str+0x180>
 8011302:	f9b7 201e 	ldrsh.w	r2, [r7, #30]
 8011306:	4b25      	ldr	r3, [pc, #148]	; (801139c <Value2Str+0x1f4>)
 8011308:	fb83 3102 	smull	r3, r1, r3, r2
 801130c:	17d3      	asrs	r3, r2, #31
 801130e:	1ac9      	subs	r1, r1, r3
 8011310:	460b      	mov	r3, r1
 8011312:	005b      	lsls	r3, r3, #1
 8011314:	440b      	add	r3, r1
 8011316:	1ad3      	subs	r3, r2, r3
 8011318:	b21b      	sxth	r3, r3
 801131a:	2b00      	cmp	r3, #0
 801131c:	d104      	bne.n	8011328 <Value2Str+0x180>
 801131e:	68fb      	ldr	r3, [r7, #12]
 8011320:	1c5a      	adds	r2, r3, #1
 8011322:	60fa      	str	r2, [r7, #12]
 8011324:	222e      	movs	r2, #46	; 0x2e
 8011326:	701a      	strb	r2, [r3, #0]
    n = (i < 0)? 0 : n%Exp(i);
 8011328:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 801132c:	2b00      	cmp	r3, #0
 801132e:	db0c      	blt.n	801134a <Value2Str+0x1a2>
 8011330:	8bfb      	ldrh	r3, [r7, #30]
 8011332:	b2db      	uxtb	r3, r3
 8011334:	4618      	mov	r0, r3
 8011336:	f000 f833 	bl	80113a0 <Exp>
 801133a:	4602      	mov	r2, r0
 801133c:	68bb      	ldr	r3, [r7, #8]
 801133e:	fb93 f1f2 	sdiv	r1, r3, r2
 8011342:	fb02 f201 	mul.w	r2, r2, r1
 8011346:	1a9b      	subs	r3, r3, r2
 8011348:	e000      	b.n	801134c <Value2Str+0x1a4>
 801134a:	2300      	movs	r3, #0
 801134c:	60bb      	str	r3, [r7, #8]
    i--;
 801134e:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8011352:	b29b      	uxth	r3, r3
 8011354:	3b01      	subs	r3, #1
 8011356:	b29b      	uxth	r3, r3
 8011358:	83fb      	strh	r3, [r7, #30]
  while(e--)
 801135a:	78fb      	ldrb	r3, [r7, #3]
 801135c:	1e5a      	subs	r2, r3, #1
 801135e:	70fa      	strb	r2, [r7, #3]
 8011360:	2b00      	cmp	r3, #0
 8011362:	d1bb      	bne.n	80112dc <Value2Str+0x134>
  }
  pUnit += 6*m;                 //
 8011364:	69ba      	ldr	r2, [r7, #24]
 8011366:	4613      	mov	r3, r2
 8011368:	005b      	lsls	r3, r3, #1
 801136a:	4413      	add	r3, r2
 801136c:	005b      	lsls	r3, r3, #1
 801136e:	461a      	mov	r2, r3
 8011370:	687b      	ldr	r3, [r7, #4]
 8011372:	4413      	add	r3, r2
 8011374:	607b      	str	r3, [r7, #4]
  do {*p++ = *pUnit;}
 8011376:	68fb      	ldr	r3, [r7, #12]
 8011378:	1c5a      	adds	r2, r3, #1
 801137a:	60fa      	str	r2, [r7, #12]
 801137c:	687a      	ldr	r2, [r7, #4]
 801137e:	7812      	ldrb	r2, [r2, #0]
 8011380:	701a      	strb	r2, [r3, #0]
  while(*pUnit++);              // ���������ַ��ַ���
 8011382:	687b      	ldr	r3, [r7, #4]
 8011384:	1c5a      	adds	r2, r3, #1
 8011386:	607a      	str	r2, [r7, #4]
 8011388:	781b      	ldrb	r3, [r3, #0]
 801138a:	2b00      	cmp	r3, #0
 801138c:	d1f3      	bne.n	8011376 <Value2Str+0x1ce>
}
 801138e:	bf00      	nop
 8011390:	bf00      	nop
 8011392:	3720      	adds	r7, #32
 8011394:	46bd      	mov	sp, r7
 8011396:	bd80      	pop	{r7, pc}
 8011398:	66666667 	.word	0x66666667
 801139c:	55555556 	.word	0x55555556

080113a0 <Exp>:

/*******************************************************************************
  ���� 10 �� x �η�
*******************************************************************************/
long Exp(char x)
{
 80113a0:	b480      	push	{r7}
 80113a2:	b085      	sub	sp, #20
 80113a4:	af00      	add	r7, sp, #0
 80113a6:	4603      	mov	r3, r0
 80113a8:	71fb      	strb	r3, [r7, #7]
  long m = 1;
 80113aa:	2301      	movs	r3, #1
 80113ac:	60fb      	str	r3, [r7, #12]

  while(x--)
 80113ae:	e005      	b.n	80113bc <Exp+0x1c>
	  m *= 10;
 80113b0:	68fa      	ldr	r2, [r7, #12]
 80113b2:	4613      	mov	r3, r2
 80113b4:	009b      	lsls	r3, r3, #2
 80113b6:	4413      	add	r3, r2
 80113b8:	005b      	lsls	r3, r3, #1
 80113ba:	60fb      	str	r3, [r7, #12]
  while(x--)
 80113bc:	79fb      	ldrb	r3, [r7, #7]
 80113be:	1e5a      	subs	r2, r3, #1
 80113c0:	71fa      	strb	r2, [r7, #7]
 80113c2:	2b00      	cmp	r3, #0
 80113c4:	d1f4      	bne.n	80113b0 <Exp+0x10>
  return m;
 80113c6:	68fb      	ldr	r3, [r7, #12]
}
 80113c8:	4618      	mov	r0, r3
 80113ca:	3714      	adds	r7, #20
 80113cc:	46bd      	mov	sp, r7
 80113ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80113d2:	4770      	bx	lr

080113d4 <Sqrt32>:

/*******************************************************************************
 Int_sqrt: unsigned int square root
*******************************************************************************/
short Sqrt32(int n)
{
 80113d4:	b580      	push	{r7, lr}
 80113d6:	b084      	sub	sp, #16
 80113d8:	af00      	add	r7, sp, #0
 80113da:	6078      	str	r0, [r7, #4]
	int k;
  if ( n == 0 ) return 0;
 80113dc:	687b      	ldr	r3, [r7, #4]
 80113de:	2b00      	cmp	r3, #0
 80113e0:	d101      	bne.n	80113e6 <Sqrt32+0x12>
 80113e2:	2300      	movs	r3, #0
 80113e4:	e019      	b.n	801141a <Sqrt32+0x46>
  k = 2*Sqrt32(n/4)+1;
 80113e6:	687b      	ldr	r3, [r7, #4]
 80113e8:	2b00      	cmp	r3, #0
 80113ea:	da00      	bge.n	80113ee <Sqrt32+0x1a>
 80113ec:	3303      	adds	r3, #3
 80113ee:	109b      	asrs	r3, r3, #2
 80113f0:	4618      	mov	r0, r3
 80113f2:	f7ff ffef 	bl	80113d4 <Sqrt32>
 80113f6:	4603      	mov	r3, r0
 80113f8:	005b      	lsls	r3, r3, #1
 80113fa:	3301      	adds	r3, #1
 80113fc:	60fb      	str	r3, [r7, #12]
  if ( k*k > n ) return k-1;
 80113fe:	68fb      	ldr	r3, [r7, #12]
 8011400:	fb03 f303 	mul.w	r3, r3, r3
 8011404:	687a      	ldr	r2, [r7, #4]
 8011406:	429a      	cmp	r2, r3
 8011408:	da05      	bge.n	8011416 <Sqrt32+0x42>
 801140a:	68fb      	ldr	r3, [r7, #12]
 801140c:	b29b      	uxth	r3, r3
 801140e:	3b01      	subs	r3, #1
 8011410:	b29b      	uxth	r3, r3
 8011412:	b21b      	sxth	r3, r3
 8011414:	e001      	b.n	801141a <Sqrt32+0x46>
  else return k;
 8011416:	68fb      	ldr	r3, [r7, #12]
 8011418:	b21b      	sxth	r3, r3
}
 801141a:	4618      	mov	r0, r3
 801141c:	3710      	adds	r7, #16
 801141e:	46bd      	mov	sp, r7
 8011420:	bd80      	pop	{r7, pc}
	...

08011424 <u16ToDec4Str>:

/*******************************************************************************
 u16ToDec4Str: �޷���16λ��������ת4λʮ�����ַ�������Ч����ǰ��ո�
*******************************************************************************/
void u16ToDec4Str(char *p, short n)
{
 8011424:	b480      	push	{r7}
 8011426:	b083      	sub	sp, #12
 8011428:	af00      	add	r7, sp, #0
 801142a:	6078      	str	r0, [r7, #4]
 801142c:	460b      	mov	r3, r1
 801142e:	807b      	strh	r3, [r7, #2]
  if(n/10000){
 8011430:	887b      	ldrh	r3, [r7, #2]
 8011432:	f503 531c 	add.w	r3, r3, #9984	; 0x2700
 8011436:	330f      	adds	r3, #15
 8011438:	b29b      	uxth	r3, r3
 801143a:	f644 621e 	movw	r2, #19998	; 0x4e1e
 801143e:	4293      	cmp	r3, r2
 8011440:	d917      	bls.n	8011472 <u16ToDec4Str+0x4e>
    *p++ = 'O';
 8011442:	687b      	ldr	r3, [r7, #4]
 8011444:	1c5a      	adds	r2, r3, #1
 8011446:	607a      	str	r2, [r7, #4]
 8011448:	224f      	movs	r2, #79	; 0x4f
 801144a:	701a      	strb	r2, [r3, #0]
    *p++ = 'v';
 801144c:	687b      	ldr	r3, [r7, #4]
 801144e:	1c5a      	adds	r2, r3, #1
 8011450:	607a      	str	r2, [r7, #4]
 8011452:	2276      	movs	r2, #118	; 0x76
 8011454:	701a      	strb	r2, [r3, #0]
    *p++ = 'e';
 8011456:	687b      	ldr	r3, [r7, #4]
 8011458:	1c5a      	adds	r2, r3, #1
 801145a:	607a      	str	r2, [r7, #4]
 801145c:	2265      	movs	r2, #101	; 0x65
 801145e:	701a      	strb	r2, [r3, #0]
    *p++ = 'r';
 8011460:	687b      	ldr	r3, [r7, #4]
 8011462:	1c5a      	adds	r2, r3, #1
 8011464:	607a      	str	r2, [r7, #4]
 8011466:	2272      	movs	r2, #114	; 0x72
 8011468:	701a      	strb	r2, [r3, #0]
    *p   = 0;
 801146a:	687b      	ldr	r3, [r7, #4]
 801146c:	2200      	movs	r2, #0
 801146e:	701a      	strb	r2, [r3, #0]
    return;
 8011470:	e07e      	b.n	8011570 <u16ToDec4Str+0x14c>
  }
  *p++ = '0'+n/1000;
 8011472:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8011476:	4a41      	ldr	r2, [pc, #260]	; (801157c <u16ToDec4Str+0x158>)
 8011478:	fb82 1203 	smull	r1, r2, r2, r3
 801147c:	1192      	asrs	r2, r2, #6
 801147e:	17db      	asrs	r3, r3, #31
 8011480:	1ad3      	subs	r3, r2, r3
 8011482:	b21b      	sxth	r3, r3
 8011484:	b2da      	uxtb	r2, r3
 8011486:	687b      	ldr	r3, [r7, #4]
 8011488:	1c59      	adds	r1, r3, #1
 801148a:	6079      	str	r1, [r7, #4]
 801148c:	3230      	adds	r2, #48	; 0x30
 801148e:	b2d2      	uxtb	r2, r2
 8011490:	701a      	strb	r2, [r3, #0]
  n %= 1000;
 8011492:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8011496:	4a39      	ldr	r2, [pc, #228]	; (801157c <u16ToDec4Str+0x158>)
 8011498:	fb82 1203 	smull	r1, r2, r2, r3
 801149c:	1191      	asrs	r1, r2, #6
 801149e:	17da      	asrs	r2, r3, #31
 80114a0:	1a8a      	subs	r2, r1, r2
 80114a2:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80114a6:	fb01 f202 	mul.w	r2, r1, r2
 80114aa:	1a9b      	subs	r3, r3, r2
 80114ac:	807b      	strh	r3, [r7, #2]
  *p++ = '0'+n/100;
 80114ae:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80114b2:	4a33      	ldr	r2, [pc, #204]	; (8011580 <u16ToDec4Str+0x15c>)
 80114b4:	fb82 1203 	smull	r1, r2, r2, r3
 80114b8:	1152      	asrs	r2, r2, #5
 80114ba:	17db      	asrs	r3, r3, #31
 80114bc:	1ad3      	subs	r3, r2, r3
 80114be:	b21b      	sxth	r3, r3
 80114c0:	b2da      	uxtb	r2, r3
 80114c2:	687b      	ldr	r3, [r7, #4]
 80114c4:	1c59      	adds	r1, r3, #1
 80114c6:	6079      	str	r1, [r7, #4]
 80114c8:	3230      	adds	r2, #48	; 0x30
 80114ca:	b2d2      	uxtb	r2, r2
 80114cc:	701a      	strb	r2, [r3, #0]
  n %= 100;
 80114ce:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80114d2:	4a2b      	ldr	r2, [pc, #172]	; (8011580 <u16ToDec4Str+0x15c>)
 80114d4:	fb82 1203 	smull	r1, r2, r2, r3
 80114d8:	1151      	asrs	r1, r2, #5
 80114da:	17da      	asrs	r2, r3, #31
 80114dc:	1a8a      	subs	r2, r1, r2
 80114de:	2164      	movs	r1, #100	; 0x64
 80114e0:	fb01 f202 	mul.w	r2, r1, r2
 80114e4:	1a9b      	subs	r3, r3, r2
 80114e6:	807b      	strh	r3, [r7, #2]
  *p++ = '0'+n/10;
 80114e8:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80114ec:	4a25      	ldr	r2, [pc, #148]	; (8011584 <u16ToDec4Str+0x160>)
 80114ee:	fb82 1203 	smull	r1, r2, r2, r3
 80114f2:	1092      	asrs	r2, r2, #2
 80114f4:	17db      	asrs	r3, r3, #31
 80114f6:	1ad3      	subs	r3, r2, r3
 80114f8:	b21b      	sxth	r3, r3
 80114fa:	b2da      	uxtb	r2, r3
 80114fc:	687b      	ldr	r3, [r7, #4]
 80114fe:	1c59      	adds	r1, r3, #1
 8011500:	6079      	str	r1, [r7, #4]
 8011502:	3230      	adds	r2, #48	; 0x30
 8011504:	b2d2      	uxtb	r2, r2
 8011506:	701a      	strb	r2, [r3, #0]
  n %= 10;
 8011508:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 801150c:	4b1d      	ldr	r3, [pc, #116]	; (8011584 <u16ToDec4Str+0x160>)
 801150e:	fb83 1302 	smull	r1, r3, r3, r2
 8011512:	1099      	asrs	r1, r3, #2
 8011514:	17d3      	asrs	r3, r2, #31
 8011516:	1ac9      	subs	r1, r1, r3
 8011518:	460b      	mov	r3, r1
 801151a:	009b      	lsls	r3, r3, #2
 801151c:	440b      	add	r3, r1
 801151e:	005b      	lsls	r3, r3, #1
 8011520:	1ad3      	subs	r3, r2, r3
 8011522:	807b      	strh	r3, [r7, #2]
  *p++ = '0'+n;
 8011524:	887b      	ldrh	r3, [r7, #2]
 8011526:	b2da      	uxtb	r2, r3
 8011528:	687b      	ldr	r3, [r7, #4]
 801152a:	1c59      	adds	r1, r3, #1
 801152c:	6079      	str	r1, [r7, #4]
 801152e:	3230      	adds	r2, #48	; 0x30
 8011530:	b2d2      	uxtb	r2, r2
 8011532:	701a      	strb	r2, [r3, #0]
  *p = 0;
 8011534:	687b      	ldr	r3, [r7, #4]
 8011536:	2200      	movs	r2, #0
 8011538:	701a      	strb	r2, [r3, #0]
  if(p[-4] == '0'){
 801153a:	687b      	ldr	r3, [r7, #4]
 801153c:	3b04      	subs	r3, #4
 801153e:	781b      	ldrb	r3, [r3, #0]
 8011540:	2b30      	cmp	r3, #48	; 0x30
 8011542:	d115      	bne.n	8011570 <u16ToDec4Str+0x14c>
    p[-4] = ' ';
 8011544:	687b      	ldr	r3, [r7, #4]
 8011546:	3b04      	subs	r3, #4
 8011548:	2220      	movs	r2, #32
 801154a:	701a      	strb	r2, [r3, #0]
    if(p[-3] == '0'){
 801154c:	687b      	ldr	r3, [r7, #4]
 801154e:	3b03      	subs	r3, #3
 8011550:	781b      	ldrb	r3, [r3, #0]
 8011552:	2b30      	cmp	r3, #48	; 0x30
 8011554:	d10c      	bne.n	8011570 <u16ToDec4Str+0x14c>
      p[-3] = ' ';
 8011556:	687b      	ldr	r3, [r7, #4]
 8011558:	3b03      	subs	r3, #3
 801155a:	2220      	movs	r2, #32
 801155c:	701a      	strb	r2, [r3, #0]
      if(p[-2] == '0') p[-2] = ' ';
 801155e:	687b      	ldr	r3, [r7, #4]
 8011560:	3b02      	subs	r3, #2
 8011562:	781b      	ldrb	r3, [r3, #0]
 8011564:	2b30      	cmp	r3, #48	; 0x30
 8011566:	d103      	bne.n	8011570 <u16ToDec4Str+0x14c>
 8011568:	687b      	ldr	r3, [r7, #4]
 801156a:	3b02      	subs	r3, #2
 801156c:	2220      	movs	r2, #32
 801156e:	701a      	strb	r2, [r3, #0]
    }
  }
}
 8011570:	370c      	adds	r7, #12
 8011572:	46bd      	mov	sp, r7
 8011574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011578:	4770      	bx	lr
 801157a:	bf00      	nop
 801157c:	10624dd3 	.word	0x10624dd3
 8011580:	51eb851f 	.word	0x51eb851f
 8011584:	66666667 	.word	0x66666667

08011588 <lcd_write_cmd_data>:
#include "Func.h"

unsigned short data[15];

void lcd_write_cmd_data( unsigned short Cmd, short Len, unsigned short *Data )
{
 8011588:	b580      	push	{r7, lr}
 801158a:	b082      	sub	sp, #8
 801158c:	af00      	add	r7, sp, #0
 801158e:	4603      	mov	r3, r0
 8011590:	603a      	str	r2, [r7, #0]
 8011592:	80fb      	strh	r3, [r7, #6]
 8011594:	460b      	mov	r3, r1
 8011596:	80bb      	strh	r3, [r7, #4]
	HAL_GPIO_WritePin( LcdRs_GPIO_Port, LcdRs_Pin, GPIO_PIN_RESET); // low for command
 8011598:	2200      	movs	r2, #0
 801159a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 801159e:	480e      	ldr	r0, [pc, #56]	; (80115d8 <lcd_write_cmd_data+0x50>)
 80115a0:	f008 f96a 	bl	8019878 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi3, (unsigned char*)&Cmd, 1, 1);// timeout 1 ms
 80115a4:	1db9      	adds	r1, r7, #6
 80115a6:	2301      	movs	r3, #1
 80115a8:	2201      	movs	r2, #1
 80115aa:	480c      	ldr	r0, [pc, #48]	; (80115dc <lcd_write_cmd_data+0x54>)
 80115ac:	f00a fc69 	bl	801be82 <HAL_SPI_Transmit>

	if(Len !=0)
 80115b0:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80115b4:	2b00      	cmp	r3, #0
 80115b6:	d00b      	beq.n	80115d0 <lcd_write_cmd_data+0x48>
	{
		HAL_GPIO_WritePin( LcdRs_GPIO_Port, LcdRs_Pin, GPIO_PIN_SET);  //high for data
 80115b8:	2201      	movs	r2, #1
 80115ba:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80115be:	4806      	ldr	r0, [pc, #24]	; (80115d8 <lcd_write_cmd_data+0x50>)
 80115c0:	f008 f95a 	bl	8019878 <HAL_GPIO_WritePin>
		HAL_SPI_Transmit(&hspi3, (unsigned char*)Data, Len, 1);// timeout 1 ms
 80115c4:	88ba      	ldrh	r2, [r7, #4]
 80115c6:	2301      	movs	r3, #1
 80115c8:	6839      	ldr	r1, [r7, #0]
 80115ca:	4804      	ldr	r0, [pc, #16]	; (80115dc <lcd_write_cmd_data+0x54>)
 80115cc:	f00a fc59 	bl	801be82 <HAL_SPI_Transmit>
	}
}
 80115d0:	bf00      	nop
 80115d2:	3708      	adds	r7, #8
 80115d4:	46bd      	mov	sp, r7
 80115d6:	bd80      	pop	{r7, pc}
 80115d8:	40020800 	.word	0x40020800
 80115dc:	200077f0 	.word	0x200077f0

080115e0 <Init_LCD>:

// initialize the LCD
void Init_LCD(void)
{
 80115e0:	b580      	push	{r7, lr}
 80115e2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin( LcdCs_GPIO_Port, LcdCs_Pin, GPIO_PIN_RESET);  //enable lcd controller
 80115e4:	2200      	movs	r2, #0
 80115e6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80115ea:	4885      	ldr	r0, [pc, #532]	; (8011800 <Init_LCD+0x220>)
 80115ec:	f008 f944 	bl	8019878 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin( Dres_GPIO_Port, Dres_Pin, GPIO_PIN_SET);  //display reset
 80115f0:	2201      	movs	r2, #1
 80115f2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80115f6:	4883      	ldr	r0, [pc, #524]	; (8011804 <Init_LCD+0x224>)
 80115f8:	f008 f93e 	bl	8019878 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 80115fc:	2001      	movs	r0, #1
 80115fe:	f006 fd5d 	bl	80180bc <HAL_Delay>
	HAL_GPIO_WritePin( Dres_GPIO_Port, Dres_Pin, GPIO_PIN_RESET);
 8011602:	2200      	movs	r2, #0
 8011604:	f44f 7100 	mov.w	r1, #512	; 0x200
 8011608:	487e      	ldr	r0, [pc, #504]	; (8011804 <Init_LCD+0x224>)
 801160a:	f008 f935 	bl	8019878 <HAL_GPIO_WritePin>
	HAL_Delay(10);
 801160e:	200a      	movs	r0, #10
 8011610:	f006 fd54 	bl	80180bc <HAL_Delay>
	HAL_GPIO_WritePin( Dres_GPIO_Port, Dres_Pin, GPIO_PIN_SET);
 8011614:	2201      	movs	r2, #1
 8011616:	f44f 7100 	mov.w	r1, #512	; 0x200
 801161a:	487a      	ldr	r0, [pc, #488]	; (8011804 <Init_LCD+0x224>)
 801161c:	f008 f92c 	bl	8019878 <HAL_GPIO_WritePin>
	HAL_Delay(120);
 8011620:	2078      	movs	r0, #120	; 0x78
 8011622:	f006 fd4b 	bl	80180bc <HAL_Delay>

	data[0]=0;
 8011626:	4b78      	ldr	r3, [pc, #480]	; (8011808 <Init_LCD+0x228>)
 8011628:	2200      	movs	r2, #0
 801162a:	801a      	strh	r2, [r3, #0]
	lcd_write_cmd_data(0xb0, 1, data);  //set interface
 801162c:	4a76      	ldr	r2, [pc, #472]	; (8011808 <Init_LCD+0x228>)
 801162e:	2101      	movs	r1, #1
 8011630:	20b0      	movs	r0, #176	; 0xb0
 8011632:	f7ff ffa9 	bl	8011588 <lcd_write_cmd_data>
	lcd_write_cmd_data(0x11, 0, data);  //sleep
 8011636:	4a74      	ldr	r2, [pc, #464]	; (8011808 <Init_LCD+0x228>)
 8011638:	2100      	movs	r1, #0
 801163a:	2011      	movs	r0, #17
 801163c:	f7ff ffa4 	bl	8011588 <lcd_write_cmd_data>
	HAL_Delay(120);
 8011640:	2078      	movs	r0, #120	; 0x78
 8011642:	f006 fd3b 	bl	80180bc <HAL_Delay>
	data[0]=0x55;
 8011646:	4b70      	ldr	r3, [pc, #448]	; (8011808 <Init_LCD+0x228>)
 8011648:	2255      	movs	r2, #85	; 0x55
 801164a:	801a      	strh	r2, [r3, #0]
	lcd_write_cmd_data(0x3A, 1, data);  //set pixels to 16 bit
 801164c:	4a6e      	ldr	r2, [pc, #440]	; (8011808 <Init_LCD+0x228>)
 801164e:	2101      	movs	r1, #1
 8011650:	203a      	movs	r0, #58	; 0x3a
 8011652:	f7ff ff99 	bl	8011588 <lcd_write_cmd_data>
	data[0]=data[1]=9;
 8011656:	4b6c      	ldr	r3, [pc, #432]	; (8011808 <Init_LCD+0x228>)
 8011658:	2209      	movs	r2, #9
 801165a:	805a      	strh	r2, [r3, #2]
 801165c:	4b6a      	ldr	r3, [pc, #424]	; (8011808 <Init_LCD+0x228>)
 801165e:	885a      	ldrh	r2, [r3, #2]
 8011660:	4b69      	ldr	r3, [pc, #420]	; (8011808 <Init_LCD+0x228>)
 8011662:	801a      	strh	r2, [r3, #0]
	lcd_write_cmd_data(0xc0, 2, data);  //set power
 8011664:	4a68      	ldr	r2, [pc, #416]	; (8011808 <Init_LCD+0x228>)
 8011666:	2102      	movs	r1, #2
 8011668:	20c0      	movs	r0, #192	; 0xc0
 801166a:	f7ff ff8d 	bl	8011588 <lcd_write_cmd_data>
	data[0]= 0x41;
 801166e:	4b66      	ldr	r3, [pc, #408]	; (8011808 <Init_LCD+0x228>)
 8011670:	2241      	movs	r2, #65	; 0x41
 8011672:	801a      	strh	r2, [r3, #0]
	data[1]=0;
 8011674:	4b64      	ldr	r3, [pc, #400]	; (8011808 <Init_LCD+0x228>)
 8011676:	2200      	movs	r2, #0
 8011678:	805a      	strh	r2, [r3, #2]
	lcd_write_cmd_data(0xc1, 2, data);  //set power
 801167a:	4a63      	ldr	r2, [pc, #396]	; (8011808 <Init_LCD+0x228>)
 801167c:	2102      	movs	r1, #2
 801167e:	20c1      	movs	r0, #193	; 0xc1
 8011680:	f7ff ff82 	bl	8011588 <lcd_write_cmd_data>
	data[0]= 0x33;
 8011684:	4b60      	ldr	r3, [pc, #384]	; (8011808 <Init_LCD+0x228>)
 8011686:	2233      	movs	r2, #51	; 0x33
 8011688:	801a      	strh	r2, [r3, #0]
	lcd_write_cmd_data(0xc2, 1, data);  //set power
 801168a:	4a5f      	ldr	r2, [pc, #380]	; (8011808 <Init_LCD+0x228>)
 801168c:	2101      	movs	r1, #1
 801168e:	20c2      	movs	r0, #194	; 0xc2
 8011690:	f7ff ff7a 	bl	8011588 <lcd_write_cmd_data>
	data[0]=data[1]=0;
 8011694:	4b5c      	ldr	r3, [pc, #368]	; (8011808 <Init_LCD+0x228>)
 8011696:	2200      	movs	r2, #0
 8011698:	805a      	strh	r2, [r3, #2]
 801169a:	4b5b      	ldr	r3, [pc, #364]	; (8011808 <Init_LCD+0x228>)
 801169c:	885a      	ldrh	r2, [r3, #2]
 801169e:	4b5a      	ldr	r3, [pc, #360]	; (8011808 <Init_LCD+0x228>)
 80116a0:	801a      	strh	r2, [r3, #0]
	data[2]=data[3]=0;  //#3 may be 0x36
 80116a2:	4b59      	ldr	r3, [pc, #356]	; (8011808 <Init_LCD+0x228>)
 80116a4:	2200      	movs	r2, #0
 80116a6:	80da      	strh	r2, [r3, #6]
 80116a8:	4b57      	ldr	r3, [pc, #348]	; (8011808 <Init_LCD+0x228>)
 80116aa:	88da      	ldrh	r2, [r3, #6]
 80116ac:	4b56      	ldr	r3, [pc, #344]	; (8011808 <Init_LCD+0x228>)
 80116ae:	809a      	strh	r2, [r3, #4]
	lcd_write_cmd_data(0xc5, 4, data);  //Vcom control
 80116b0:	4a55      	ldr	r2, [pc, #340]	; (8011808 <Init_LCD+0x228>)
 80116b2:	2104      	movs	r1, #4
 80116b4:	20c5      	movs	r0, #197	; 0xc5
 80116b6:	f7ff ff67 	bl	8011588 <lcd_write_cmd_data>

	data[0]=  0;
 80116ba:	4b53      	ldr	r3, [pc, #332]	; (8011808 <Init_LCD+0x228>)
 80116bc:	2200      	movs	r2, #0
 80116be:	801a      	strh	r2, [r3, #0]
	lcd_write_cmd_data(0x36, 1, data);  //madctl
 80116c0:	4a51      	ldr	r2, [pc, #324]	; (8011808 <Init_LCD+0x228>)
 80116c2:	2101      	movs	r1, #1
 80116c4:	2036      	movs	r0, #54	; 0x36
 80116c6:	f7ff ff5f 	bl	8011588 <lcd_write_cmd_data>
	 Digital Gamma Control 1
	-1, 0xE2, 0x0F, 0x32, 0x2E, 0x0B, 0x0D, 0x05, 0x47, 0x75,
	          0x37, 0x06, 0x10, 0x03, 0x24, 0x20, 0x00,
    SPI_TRANSFER(0xE0 Positive Gamma Control, 0x00, 0x2C, 0x2C, 0x0B, 0x0C, 0x04, 0x4C, 0x64, 0x36, 0x03, 0x0E, 0x01, 0x10, 0x01, 0x00);
    SPI_TRANSFER(0xE1 Negative Gamma Control, 0x0F, 0x37, 0x37, 0x0C, 0x0F, 0x05, 0x50, 0x32, 0x36, 0x04, 0x0B, 0x00, 0x19, 0x14, 0x0F); */
	data[0]=data[14]=  0;
 80116ca:	4b4f      	ldr	r3, [pc, #316]	; (8011808 <Init_LCD+0x228>)
 80116cc:	2200      	movs	r2, #0
 80116ce:	839a      	strh	r2, [r3, #28]
 80116d0:	4b4d      	ldr	r3, [pc, #308]	; (8011808 <Init_LCD+0x228>)
 80116d2:	8b9a      	ldrh	r2, [r3, #28]
 80116d4:	4b4c      	ldr	r3, [pc, #304]	; (8011808 <Init_LCD+0x228>)
 80116d6:	801a      	strh	r2, [r3, #0]
	data[1]=data[2]=   0x2C;
 80116d8:	4b4b      	ldr	r3, [pc, #300]	; (8011808 <Init_LCD+0x228>)
 80116da:	222c      	movs	r2, #44	; 0x2c
 80116dc:	809a      	strh	r2, [r3, #4]
 80116de:	4b4a      	ldr	r3, [pc, #296]	; (8011808 <Init_LCD+0x228>)
 80116e0:	889a      	ldrh	r2, [r3, #4]
 80116e2:	4b49      	ldr	r3, [pc, #292]	; (8011808 <Init_LCD+0x228>)
 80116e4:	805a      	strh	r2, [r3, #2]
	data[3]=  0x0B;
 80116e6:	4b48      	ldr	r3, [pc, #288]	; (8011808 <Init_LCD+0x228>)
 80116e8:	220b      	movs	r2, #11
 80116ea:	80da      	strh	r2, [r3, #6]
	data[4]=  0x0C;
 80116ec:	4b46      	ldr	r3, [pc, #280]	; (8011808 <Init_LCD+0x228>)
 80116ee:	220c      	movs	r2, #12
 80116f0:	811a      	strh	r2, [r3, #8]
	data[5]=  0x04;
 80116f2:	4b45      	ldr	r3, [pc, #276]	; (8011808 <Init_LCD+0x228>)
 80116f4:	2204      	movs	r2, #4
 80116f6:	815a      	strh	r2, [r3, #10]
	data[6]=  0x4C;
 80116f8:	4b43      	ldr	r3, [pc, #268]	; (8011808 <Init_LCD+0x228>)
 80116fa:	224c      	movs	r2, #76	; 0x4c
 80116fc:	819a      	strh	r2, [r3, #12]
	data[7]=  0x64;
 80116fe:	4b42      	ldr	r3, [pc, #264]	; (8011808 <Init_LCD+0x228>)
 8011700:	2264      	movs	r2, #100	; 0x64
 8011702:	81da      	strh	r2, [r3, #14]
	data[8]=  0x36;
 8011704:	4b40      	ldr	r3, [pc, #256]	; (8011808 <Init_LCD+0x228>)
 8011706:	2236      	movs	r2, #54	; 0x36
 8011708:	821a      	strh	r2, [r3, #16]
	data[9]=  0x03;
 801170a:	4b3f      	ldr	r3, [pc, #252]	; (8011808 <Init_LCD+0x228>)
 801170c:	2203      	movs	r2, #3
 801170e:	825a      	strh	r2, [r3, #18]
	data[10]= 0x0E;
 8011710:	4b3d      	ldr	r3, [pc, #244]	; (8011808 <Init_LCD+0x228>)
 8011712:	220e      	movs	r2, #14
 8011714:	829a      	strh	r2, [r3, #20]
	data[11]=data[13]= 0x2C;
 8011716:	4b3c      	ldr	r3, [pc, #240]	; (8011808 <Init_LCD+0x228>)
 8011718:	222c      	movs	r2, #44	; 0x2c
 801171a:	835a      	strh	r2, [r3, #26]
 801171c:	4b3a      	ldr	r3, [pc, #232]	; (8011808 <Init_LCD+0x228>)
 801171e:	8b5a      	ldrh	r2, [r3, #26]
 8011720:	4b39      	ldr	r3, [pc, #228]	; (8011808 <Init_LCD+0x228>)
 8011722:	82da      	strh	r2, [r3, #22]
	data[12]= 0x10;
 8011724:	4b38      	ldr	r3, [pc, #224]	; (8011808 <Init_LCD+0x228>)
 8011726:	2210      	movs	r2, #16
 8011728:	831a      	strh	r2, [r3, #24]
	lcd_write_cmd_data(0xe0, 15, data);  //positive gamma control
 801172a:	4a37      	ldr	r2, [pc, #220]	; (8011808 <Init_LCD+0x228>)
 801172c:	210f      	movs	r1, #15
 801172e:	20e0      	movs	r0, #224	; 0xe0
 8011730:	f7ff ff2a 	bl	8011588 <lcd_write_cmd_data>

	data[0]=data[4]= data[14]= 0x0F;
 8011734:	4b34      	ldr	r3, [pc, #208]	; (8011808 <Init_LCD+0x228>)
 8011736:	220f      	movs	r2, #15
 8011738:	839a      	strh	r2, [r3, #28]
 801173a:	4b33      	ldr	r3, [pc, #204]	; (8011808 <Init_LCD+0x228>)
 801173c:	8b9a      	ldrh	r2, [r3, #28]
 801173e:	4b32      	ldr	r3, [pc, #200]	; (8011808 <Init_LCD+0x228>)
 8011740:	811a      	strh	r2, [r3, #8]
 8011742:	4b31      	ldr	r3, [pc, #196]	; (8011808 <Init_LCD+0x228>)
 8011744:	891a      	ldrh	r2, [r3, #8]
 8011746:	4b30      	ldr	r3, [pc, #192]	; (8011808 <Init_LCD+0x228>)
 8011748:	801a      	strh	r2, [r3, #0]
	data[1]=data[2]= 0x37;
 801174a:	4b2f      	ldr	r3, [pc, #188]	; (8011808 <Init_LCD+0x228>)
 801174c:	2237      	movs	r2, #55	; 0x37
 801174e:	809a      	strh	r2, [r3, #4]
 8011750:	4b2d      	ldr	r3, [pc, #180]	; (8011808 <Init_LCD+0x228>)
 8011752:	889a      	ldrh	r2, [r3, #4]
 8011754:	4b2c      	ldr	r3, [pc, #176]	; (8011808 <Init_LCD+0x228>)
 8011756:	805a      	strh	r2, [r3, #2]
	data[3]=  0x0C;
 8011758:	4b2b      	ldr	r3, [pc, #172]	; (8011808 <Init_LCD+0x228>)
 801175a:	220c      	movs	r2, #12
 801175c:	80da      	strh	r2, [r3, #6]
	data[5]=  0x05;
 801175e:	4b2a      	ldr	r3, [pc, #168]	; (8011808 <Init_LCD+0x228>)
 8011760:	2205      	movs	r2, #5
 8011762:	815a      	strh	r2, [r3, #10]
	data[6]=  0x50;
 8011764:	4b28      	ldr	r3, [pc, #160]	; (8011808 <Init_LCD+0x228>)
 8011766:	2250      	movs	r2, #80	; 0x50
 8011768:	819a      	strh	r2, [r3, #12]
	data[7]=  0x32;
 801176a:	4b27      	ldr	r3, [pc, #156]	; (8011808 <Init_LCD+0x228>)
 801176c:	2232      	movs	r2, #50	; 0x32
 801176e:	81da      	strh	r2, [r3, #14]
	data[8]=  0x36;
 8011770:	4b25      	ldr	r3, [pc, #148]	; (8011808 <Init_LCD+0x228>)
 8011772:	2236      	movs	r2, #54	; 0x36
 8011774:	821a      	strh	r2, [r3, #16]
	data[9]=  0x04;
 8011776:	4b24      	ldr	r3, [pc, #144]	; (8011808 <Init_LCD+0x228>)
 8011778:	2204      	movs	r2, #4
 801177a:	825a      	strh	r2, [r3, #18]
	data[10]= 0x0B;
 801177c:	4b22      	ldr	r3, [pc, #136]	; (8011808 <Init_LCD+0x228>)
 801177e:	220b      	movs	r2, #11
 8011780:	829a      	strh	r2, [r3, #20]
	data[11]= 0;
 8011782:	4b21      	ldr	r3, [pc, #132]	; (8011808 <Init_LCD+0x228>)
 8011784:	2200      	movs	r2, #0
 8011786:	82da      	strh	r2, [r3, #22]
	data[12]= 0x19;
 8011788:	4b1f      	ldr	r3, [pc, #124]	; (8011808 <Init_LCD+0x228>)
 801178a:	2219      	movs	r2, #25
 801178c:	831a      	strh	r2, [r3, #24]
	data[13]= 0x14;
 801178e:	4b1e      	ldr	r3, [pc, #120]	; (8011808 <Init_LCD+0x228>)
 8011790:	2214      	movs	r2, #20
 8011792:	835a      	strh	r2, [r3, #26]
	lcd_write_cmd_data(0xe1, 15, data);  //Negitive gamma control
 8011794:	4a1c      	ldr	r2, [pc, #112]	; (8011808 <Init_LCD+0x228>)
 8011796:	210f      	movs	r1, #15
 8011798:	20e1      	movs	r0, #225	; 0xe1
 801179a:	f7ff fef5 	bl	8011588 <lcd_write_cmd_data>

//	SPI_TRANSFER(0xB6/*Display Function Control*/, 0, /*ISC=2*/2, /*Display Height h=*/59); // Actual display height = (h+1)*8 so (59+1)*8=480
	data[0]=0;
 801179e:	4b1a      	ldr	r3, [pc, #104]	; (8011808 <Init_LCD+0x228>)
 80117a0:	2200      	movs	r2, #0
 80117a2:	801a      	strh	r2, [r3, #0]
	data[1]=2;
 80117a4:	4b18      	ldr	r3, [pc, #96]	; (8011808 <Init_LCD+0x228>)
 80117a6:	2202      	movs	r2, #2
 80117a8:	805a      	strh	r2, [r3, #2]
	data[2]=59;
 80117aa:	4b17      	ldr	r3, [pc, #92]	; (8011808 <Init_LCD+0x228>)
 80117ac:	223b      	movs	r2, #59	; 0x3b
 80117ae:	809a      	strh	r2, [r3, #4]
	lcd_write_cmd_data(0xb6, 3, data);  //display function control
 80117b0:	4a15      	ldr	r2, [pc, #84]	; (8011808 <Init_LCD+0x228>)
 80117b2:	2103      	movs	r1, #3
 80117b4:	20b6      	movs	r0, #182	; 0xb6
 80117b6:	f7ff fee7 	bl	8011588 <lcd_write_cmd_data>

	lcd_write_cmd_data(0x11, 0, data);  //sleep
 80117ba:	4a13      	ldr	r2, [pc, #76]	; (8011808 <Init_LCD+0x228>)
 80117bc:	2100      	movs	r1, #0
 80117be:	2011      	movs	r0, #17
 80117c0:	f7ff fee2 	bl	8011588 <lcd_write_cmd_data>
	HAL_Delay(120);
 80117c4:	2078      	movs	r0, #120	; 0x78
 80117c6:	f006 fc79 	bl	80180bc <HAL_Delay>
	lcd_write_cmd_data(0x29, 0, data);  //display on
 80117ca:	4a0f      	ldr	r2, [pc, #60]	; (8011808 <Init_LCD+0x228>)
 80117cc:	2100      	movs	r1, #0
 80117ce:	2029      	movs	r0, #41	; 0x29
 80117d0:	f7ff feda 	bl	8011588 <lcd_write_cmd_data>
	lcd_write_cmd_data(0x38, 0, data);  //idle off
 80117d4:	4a0c      	ldr	r2, [pc, #48]	; (8011808 <Init_LCD+0x228>)
 80117d6:	2100      	movs	r1, #0
 80117d8:	2038      	movs	r0, #56	; 0x38
 80117da:	f7ff fed5 	bl	8011588 <lcd_write_cmd_data>
	lcd_write_cmd_data(0x13, 0, data);  //Normal Display Mode ON
 80117de:	4a0a      	ldr	r2, [pc, #40]	; (8011808 <Init_LCD+0x228>)
 80117e0:	2100      	movs	r1, #0
 80117e2:	2013      	movs	r0, #19
 80117e4:	f7ff fed0 	bl	8011588 <lcd_write_cmd_data>

	HAL_GPIO_WritePin( LcdCs_GPIO_Port, LcdCs_Pin, GPIO_PIN_SET);  //disable lcd controller
 80117e8:	2201      	movs	r2, #1
 80117ea:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80117ee:	4804      	ldr	r0, [pc, #16]	; (8011800 <Init_LCD+0x220>)
 80117f0:	f008 f842 	bl	8019878 <HAL_GPIO_WritePin>

	LCD_ClrScrn(0);  //clear screen to black
 80117f4:	2000      	movs	r0, #0
 80117f6:	f000 f809 	bl	801180c <LCD_ClrScrn>
}
 80117fa:	bf00      	nop
 80117fc:	bd80      	pop	{r7, pc}
 80117fe:	bf00      	nop
 8011800:	40020800 	.word	0x40020800
 8011804:	40020400 	.word	0x40020400
 8011808:	20003648 	.word	0x20003648

0801180c <LCD_ClrScrn>:

void LCD_ClrScrn(unsigned short Color)
{
 801180c:	b580      	push	{r7, lr}
 801180e:	b084      	sub	sp, #16
 8011810:	af00      	add	r7, sp, #0
 8011812:	4603      	mov	r3, r0
 8011814:	80fb      	strh	r3, [r7, #6]
short y;
unsigned short *ptr;

ptr = malloc(320*2);
 8011816:	f44f 7020 	mov.w	r0, #640	; 0x280
 801181a:	f014 f989 	bl	8025b30 <malloc>
 801181e:	4603      	mov	r3, r0
 8011820:	60bb      	str	r3, [r7, #8]
HAL_GPIO_WritePin( LcdCs_GPIO_Port, LcdCs_Pin, GPIO_PIN_RESET);  //enable lcd controller
 8011822:	2200      	movs	r2, #0
 8011824:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8011828:	483d      	ldr	r0, [pc, #244]	; (8011920 <LCD_ClrScrn+0x114>)
 801182a:	f008 f825 	bl	8019878 <HAL_GPIO_WritePin>

for(y=0; y<480; ++y )
 801182e:	2300      	movs	r3, #0
 8011830:	81fb      	strh	r3, [r7, #14]
 8011832:	e03c      	b.n	80118ae <LCD_ClrScrn+0xa2>
{
	data[0]=data[1]= 0;
 8011834:	4b3b      	ldr	r3, [pc, #236]	; (8011924 <LCD_ClrScrn+0x118>)
 8011836:	2200      	movs	r2, #0
 8011838:	805a      	strh	r2, [r3, #2]
 801183a:	4b3a      	ldr	r3, [pc, #232]	; (8011924 <LCD_ClrScrn+0x118>)
 801183c:	885a      	ldrh	r2, [r3, #2]
 801183e:	4b39      	ldr	r3, [pc, #228]	; (8011924 <LCD_ClrScrn+0x118>)
 8011840:	801a      	strh	r2, [r3, #0]
	data[2]= 319>>8;
 8011842:	4b38      	ldr	r3, [pc, #224]	; (8011924 <LCD_ClrScrn+0x118>)
 8011844:	2201      	movs	r2, #1
 8011846:	809a      	strh	r2, [r3, #4]
	data[3]= 319 & 0xFF;
 8011848:	4b36      	ldr	r3, [pc, #216]	; (8011924 <LCD_ClrScrn+0x118>)
 801184a:	223f      	movs	r2, #63	; 0x3f
 801184c:	80da      	strh	r2, [r3, #6]
	lcd_write_cmd_data(0x2A, 4, data);  //set x
 801184e:	4a35      	ldr	r2, [pc, #212]	; (8011924 <LCD_ClrScrn+0x118>)
 8011850:	2104      	movs	r1, #4
 8011852:	202a      	movs	r0, #42	; 0x2a
 8011854:	f7ff fe98 	bl	8011588 <lcd_write_cmd_data>
	data[0]= y>>8;
 8011858:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 801185c:	121b      	asrs	r3, r3, #8
 801185e:	b21b      	sxth	r3, r3
 8011860:	b29a      	uxth	r2, r3
 8011862:	4b30      	ldr	r3, [pc, #192]	; (8011924 <LCD_ClrScrn+0x118>)
 8011864:	801a      	strh	r2, [r3, #0]
	data[1]= y & 0xFF;
 8011866:	89fb      	ldrh	r3, [r7, #14]
 8011868:	b2db      	uxtb	r3, r3
 801186a:	b29a      	uxth	r2, r3
 801186c:	4b2d      	ldr	r3, [pc, #180]	; (8011924 <LCD_ClrScrn+0x118>)
 801186e:	805a      	strh	r2, [r3, #2]
	data[2]= 479>>8;
 8011870:	4b2c      	ldr	r3, [pc, #176]	; (8011924 <LCD_ClrScrn+0x118>)
 8011872:	2201      	movs	r2, #1
 8011874:	809a      	strh	r2, [r3, #4]
	data[3]= 479 & 0xFF;
 8011876:	4b2b      	ldr	r3, [pc, #172]	; (8011924 <LCD_ClrScrn+0x118>)
 8011878:	22df      	movs	r2, #223	; 0xdf
 801187a:	80da      	strh	r2, [r3, #6]
	lcd_write_cmd_data(0x2B, 4, data);  //set y
 801187c:	4a29      	ldr	r2, [pc, #164]	; (8011924 <LCD_ClrScrn+0x118>)
 801187e:	2104      	movs	r1, #4
 8011880:	202b      	movs	r0, #43	; 0x2b
 8011882:	f7ff fe81 	bl	8011588 <lcd_write_cmd_data>

	if(ptr != NULL)
 8011886:	68bb      	ldr	r3, [r7, #8]
 8011888:	2b00      	cmp	r3, #0
 801188a:	d016      	beq.n	80118ba <LCD_ClrScrn+0xae>
	{
		memset16(ptr, Color, 320);
 801188c:	88fb      	ldrh	r3, [r7, #6]
 801188e:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8011892:	4619      	mov	r1, r3
 8011894:	68b8      	ldr	r0, [r7, #8]
 8011896:	f7ff fc67 	bl	8011168 <memset16>
		lcd_write_cmd_data(0x2C, 320, ptr);  //write out pixels
 801189a:	68ba      	ldr	r2, [r7, #8]
 801189c:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80118a0:	202c      	movs	r0, #44	; 0x2c
 80118a2:	f7ff fe71 	bl	8011588 <lcd_write_cmd_data>
for(y=0; y<480; ++y )
 80118a6:	89fb      	ldrh	r3, [r7, #14]
 80118a8:	3301      	adds	r3, #1
 80118aa:	b29b      	uxth	r3, r3
 80118ac:	81fb      	strh	r3, [r7, #14]
 80118ae:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80118b2:	f5b3 7ff0 	cmp.w	r3, #480	; 0x1e0
 80118b6:	dbbd      	blt.n	8011834 <LCD_ClrScrn+0x28>
 80118b8:	e000      	b.n	80118bc <LCD_ClrScrn+0xb0>
	}
	else
		break; //bail out
 80118ba:	bf00      	nop
}

free(ptr);
 80118bc:	68b8      	ldr	r0, [r7, #8]
 80118be:	f014 f93f 	bl	8025b40 <free>

data[0]=data[1]= 0;
 80118c2:	4b18      	ldr	r3, [pc, #96]	; (8011924 <LCD_ClrScrn+0x118>)
 80118c4:	2200      	movs	r2, #0
 80118c6:	805a      	strh	r2, [r3, #2]
 80118c8:	4b16      	ldr	r3, [pc, #88]	; (8011924 <LCD_ClrScrn+0x118>)
 80118ca:	885a      	ldrh	r2, [r3, #2]
 80118cc:	4b15      	ldr	r3, [pc, #84]	; (8011924 <LCD_ClrScrn+0x118>)
 80118ce:	801a      	strh	r2, [r3, #0]
data[2]= 319>>8;
 80118d0:	4b14      	ldr	r3, [pc, #80]	; (8011924 <LCD_ClrScrn+0x118>)
 80118d2:	2201      	movs	r2, #1
 80118d4:	809a      	strh	r2, [r3, #4]
data[3]= 319 & 0xFF;
 80118d6:	4b13      	ldr	r3, [pc, #76]	; (8011924 <LCD_ClrScrn+0x118>)
 80118d8:	223f      	movs	r2, #63	; 0x3f
 80118da:	80da      	strh	r2, [r3, #6]
lcd_write_cmd_data(0x2A, 4, data);  //set x
 80118dc:	4a11      	ldr	r2, [pc, #68]	; (8011924 <LCD_ClrScrn+0x118>)
 80118de:	2104      	movs	r1, #4
 80118e0:	202a      	movs	r0, #42	; 0x2a
 80118e2:	f7ff fe51 	bl	8011588 <lcd_write_cmd_data>
data[0]=data[1]= 0;
 80118e6:	4b0f      	ldr	r3, [pc, #60]	; (8011924 <LCD_ClrScrn+0x118>)
 80118e8:	2200      	movs	r2, #0
 80118ea:	805a      	strh	r2, [r3, #2]
 80118ec:	4b0d      	ldr	r3, [pc, #52]	; (8011924 <LCD_ClrScrn+0x118>)
 80118ee:	885a      	ldrh	r2, [r3, #2]
 80118f0:	4b0c      	ldr	r3, [pc, #48]	; (8011924 <LCD_ClrScrn+0x118>)
 80118f2:	801a      	strh	r2, [r3, #0]
data[2]= 479>>8;
 80118f4:	4b0b      	ldr	r3, [pc, #44]	; (8011924 <LCD_ClrScrn+0x118>)
 80118f6:	2201      	movs	r2, #1
 80118f8:	809a      	strh	r2, [r3, #4]
data[3]= 479 & 0xFF;
 80118fa:	4b0a      	ldr	r3, [pc, #40]	; (8011924 <LCD_ClrScrn+0x118>)
 80118fc:	22df      	movs	r2, #223	; 0xdf
 80118fe:	80da      	strh	r2, [r3, #6]
lcd_write_cmd_data(0x2B, 4, data);  //set y
 8011900:	4a08      	ldr	r2, [pc, #32]	; (8011924 <LCD_ClrScrn+0x118>)
 8011902:	2104      	movs	r1, #4
 8011904:	202b      	movs	r0, #43	; 0x2b
 8011906:	f7ff fe3f 	bl	8011588 <lcd_write_cmd_data>

HAL_GPIO_WritePin( LcdCs_GPIO_Port, LcdCs_Pin, GPIO_PIN_SET);  //disable lcd controller
 801190a:	2201      	movs	r2, #1
 801190c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8011910:	4803      	ldr	r0, [pc, #12]	; (8011920 <LCD_ClrScrn+0x114>)
 8011912:	f007 ffb1 	bl	8019878 <HAL_GPIO_WritePin>

}
 8011916:	bf00      	nop
 8011918:	3710      	adds	r7, #16
 801191a:	46bd      	mov	sp, r7
 801191c:	bd80      	pop	{r7, pc}
 801191e:	bf00      	nop
 8011920:	40020800 	.word	0x40020800
 8011924:	20003648 	.word	0x20003648

08011928 <LCD_Set_Posi>:

void LCD_Set_Posi(short Sx, short Sy)
{
 8011928:	b580      	push	{r7, lr}
 801192a:	b082      	sub	sp, #8
 801192c:	af00      	add	r7, sp, #0
 801192e:	4603      	mov	r3, r0
 8011930:	460a      	mov	r2, r1
 8011932:	80fb      	strh	r3, [r7, #6]
 8011934:	4613      	mov	r3, r2
 8011936:	80bb      	strh	r3, [r7, #4]
	HAL_GPIO_WritePin( LcdCs_GPIO_Port, LcdCs_Pin, GPIO_PIN_RESET);  //enable lcd controller
 8011938:	2200      	movs	r2, #0
 801193a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 801193e:	481f      	ldr	r0, [pc, #124]	; (80119bc <LCD_Set_Posi+0x94>)
 8011940:	f007 ff9a 	bl	8019878 <HAL_GPIO_WritePin>

	data[0]= data[2]= Sx>>8;
 8011944:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8011948:	121b      	asrs	r3, r3, #8
 801194a:	b21b      	sxth	r3, r3
 801194c:	b29a      	uxth	r2, r3
 801194e:	4b1c      	ldr	r3, [pc, #112]	; (80119c0 <LCD_Set_Posi+0x98>)
 8011950:	809a      	strh	r2, [r3, #4]
 8011952:	4b1b      	ldr	r3, [pc, #108]	; (80119c0 <LCD_Set_Posi+0x98>)
 8011954:	889a      	ldrh	r2, [r3, #4]
 8011956:	4b1a      	ldr	r3, [pc, #104]	; (80119c0 <LCD_Set_Posi+0x98>)
 8011958:	801a      	strh	r2, [r3, #0]
	data[1]= data[3]= Sx & 0xFF;
 801195a:	88fb      	ldrh	r3, [r7, #6]
 801195c:	b2db      	uxtb	r3, r3
 801195e:	b29a      	uxth	r2, r3
 8011960:	4b17      	ldr	r3, [pc, #92]	; (80119c0 <LCD_Set_Posi+0x98>)
 8011962:	80da      	strh	r2, [r3, #6]
 8011964:	4b16      	ldr	r3, [pc, #88]	; (80119c0 <LCD_Set_Posi+0x98>)
 8011966:	88da      	ldrh	r2, [r3, #6]
 8011968:	4b15      	ldr	r3, [pc, #84]	; (80119c0 <LCD_Set_Posi+0x98>)
 801196a:	805a      	strh	r2, [r3, #2]
	lcd_write_cmd_data(0x2A, 4, data);  //set x
 801196c:	4a14      	ldr	r2, [pc, #80]	; (80119c0 <LCD_Set_Posi+0x98>)
 801196e:	2104      	movs	r1, #4
 8011970:	202a      	movs	r0, #42	; 0x2a
 8011972:	f7ff fe09 	bl	8011588 <lcd_write_cmd_data>
	data[0]= data[1]= Sy>>8;
 8011976:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 801197a:	121b      	asrs	r3, r3, #8
 801197c:	b21b      	sxth	r3, r3
 801197e:	b29a      	uxth	r2, r3
 8011980:	4b0f      	ldr	r3, [pc, #60]	; (80119c0 <LCD_Set_Posi+0x98>)
 8011982:	805a      	strh	r2, [r3, #2]
 8011984:	4b0e      	ldr	r3, [pc, #56]	; (80119c0 <LCD_Set_Posi+0x98>)
 8011986:	885a      	ldrh	r2, [r3, #2]
 8011988:	4b0d      	ldr	r3, [pc, #52]	; (80119c0 <LCD_Set_Posi+0x98>)
 801198a:	801a      	strh	r2, [r3, #0]
	data[2]= data[3]= Sy & 0xFF;
 801198c:	88bb      	ldrh	r3, [r7, #4]
 801198e:	b2db      	uxtb	r3, r3
 8011990:	b29a      	uxth	r2, r3
 8011992:	4b0b      	ldr	r3, [pc, #44]	; (80119c0 <LCD_Set_Posi+0x98>)
 8011994:	80da      	strh	r2, [r3, #6]
 8011996:	4b0a      	ldr	r3, [pc, #40]	; (80119c0 <LCD_Set_Posi+0x98>)
 8011998:	88da      	ldrh	r2, [r3, #6]
 801199a:	4b09      	ldr	r3, [pc, #36]	; (80119c0 <LCD_Set_Posi+0x98>)
 801199c:	809a      	strh	r2, [r3, #4]
	lcd_write_cmd_data(0x2B, 4, data);  //set y
 801199e:	4a08      	ldr	r2, [pc, #32]	; (80119c0 <LCD_Set_Posi+0x98>)
 80119a0:	2104      	movs	r1, #4
 80119a2:	202b      	movs	r0, #43	; 0x2b
 80119a4:	f7ff fdf0 	bl	8011588 <lcd_write_cmd_data>

	HAL_GPIO_WritePin( LcdCs_GPIO_Port, LcdCs_Pin, GPIO_PIN_SET);    //disable lcd controller
 80119a8:	2201      	movs	r2, #1
 80119aa:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80119ae:	4803      	ldr	r0, [pc, #12]	; (80119bc <LCD_Set_Posi+0x94>)
 80119b0:	f007 ff62 	bl	8019878 <HAL_GPIO_WritePin>
}
 80119b4:	bf00      	nop
 80119b6:	3708      	adds	r7, #8
 80119b8:	46bd      	mov	sp, r7
 80119ba:	bd80      	pop	{r7, pc}
 80119bc:	40020800 	.word	0x40020800
 80119c0:	20003648 	.word	0x20003648

080119c4 <LCD_Set_Pixel>:

void LCD_Set_Pixel(unsigned short Color)
{
 80119c4:	b580      	push	{r7, lr}
 80119c6:	b082      	sub	sp, #8
 80119c8:	af00      	add	r7, sp, #0
 80119ca:	4603      	mov	r3, r0
 80119cc:	80fb      	strh	r3, [r7, #6]
	HAL_GPIO_WritePin( LcdCs_GPIO_Port, LcdCs_Pin, GPIO_PIN_RESET);  //enable lcd controller
 80119ce:	2200      	movs	r2, #0
 80119d0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80119d4:	480d      	ldr	r0, [pc, #52]	; (8011a0c <LCD_Set_Pixel+0x48>)
 80119d6:	f007 ff4f 	bl	8019878 <HAL_GPIO_WritePin>

	data[0]= Color>>8;
 80119da:	88fb      	ldrh	r3, [r7, #6]
 80119dc:	0a1b      	lsrs	r3, r3, #8
 80119de:	b29a      	uxth	r2, r3
 80119e0:	4b0b      	ldr	r3, [pc, #44]	; (8011a10 <LCD_Set_Pixel+0x4c>)
 80119e2:	801a      	strh	r2, [r3, #0]
	data[1]= Color & 0xFF;
 80119e4:	88fb      	ldrh	r3, [r7, #6]
 80119e6:	b2db      	uxtb	r3, r3
 80119e8:	b29a      	uxth	r2, r3
 80119ea:	4b09      	ldr	r3, [pc, #36]	; (8011a10 <LCD_Set_Pixel+0x4c>)
 80119ec:	805a      	strh	r2, [r3, #2]
	lcd_write_cmd_data(0x2C, 2, data);  //set pixel
 80119ee:	4a08      	ldr	r2, [pc, #32]	; (8011a10 <LCD_Set_Pixel+0x4c>)
 80119f0:	2102      	movs	r1, #2
 80119f2:	202c      	movs	r0, #44	; 0x2c
 80119f4:	f7ff fdc8 	bl	8011588 <lcd_write_cmd_data>
	HAL_GPIO_WritePin( LcdCs_GPIO_Port, LcdCs_Pin, GPIO_PIN_SET);    //disable lcd controller
 80119f8:	2201      	movs	r2, #1
 80119fa:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80119fe:	4803      	ldr	r0, [pc, #12]	; (8011a0c <LCD_Set_Pixel+0x48>)
 8011a00:	f007 ff3a 	bl	8019878 <HAL_GPIO_WritePin>
}
 8011a04:	bf00      	nop
 8011a06:	3708      	adds	r7, #8
 8011a08:	46bd      	mov	sp, r7
 8011a0a:	bd80      	pop	{r7, pc}
 8011a0c:	40020800 	.word	0x40020800
 8011a10:	20003648 	.word	0x20003648

08011a14 <LCD_Get_Pixel>:

unsigned short LCD_Get_Pixel(void)
{
 8011a14:	b580      	push	{r7, lr}
 8011a16:	b082      	sub	sp, #8
 8011a18:	af00      	add	r7, sp, #0
	short ret;
	unsigned short fred;

	HAL_GPIO_WritePin( LcdCs_GPIO_Port, LcdCs_Pin, GPIO_PIN_RESET);  //enable lcd controller
 8011a1a:	2200      	movs	r2, #0
 8011a1c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8011a20:	4814      	ldr	r0, [pc, #80]	; (8011a74 <LCD_Get_Pixel+0x60>)
 8011a22:	f007 ff29 	bl	8019878 <HAL_GPIO_WritePin>
	lcd_write_cmd_data(0x2E, 0, data);  //read data
 8011a26:	4a14      	ldr	r2, [pc, #80]	; (8011a78 <LCD_Get_Pixel+0x64>)
 8011a28:	2100      	movs	r1, #0
 8011a2a:	202e      	movs	r0, #46	; 0x2e
 8011a2c:	f7ff fdac 	bl	8011588 <lcd_write_cmd_data>

	ret = HAL_SPI_Receive(&hspi3, (unsigned char *)data, 2, 1);
 8011a30:	2301      	movs	r3, #1
 8011a32:	2202      	movs	r2, #2
 8011a34:	4910      	ldr	r1, [pc, #64]	; (8011a78 <LCD_Get_Pixel+0x64>)
 8011a36:	4811      	ldr	r0, [pc, #68]	; (8011a7c <LCD_Get_Pixel+0x68>)
 8011a38:	f00a fb5f 	bl	801c0fa <HAL_SPI_Receive>
 8011a3c:	4603      	mov	r3, r0
 8011a3e:	80fb      	strh	r3, [r7, #6]

	HAL_GPIO_WritePin( LcdCs_GPIO_Port, LcdCs_Pin, GPIO_PIN_SET);    //disable lcd controller
 8011a40:	2201      	movs	r2, #1
 8011a42:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8011a46:	480b      	ldr	r0, [pc, #44]	; (8011a74 <LCD_Get_Pixel+0x60>)
 8011a48:	f007 ff16 	bl	8019878 <HAL_GPIO_WritePin>

	if( ret == HAL_OK )
 8011a4c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8011a50:	2b00      	cmp	r3, #0
 8011a52:	d10a      	bne.n	8011a6a <LCD_Get_Pixel+0x56>
		{
		fred =data[0]<<8;
 8011a54:	4b08      	ldr	r3, [pc, #32]	; (8011a78 <LCD_Get_Pixel+0x64>)
 8011a56:	881b      	ldrh	r3, [r3, #0]
 8011a58:	021b      	lsls	r3, r3, #8
 8011a5a:	80bb      	strh	r3, [r7, #4]
		fred |= data[1];
 8011a5c:	4b06      	ldr	r3, [pc, #24]	; (8011a78 <LCD_Get_Pixel+0x64>)
 8011a5e:	885a      	ldrh	r2, [r3, #2]
 8011a60:	88bb      	ldrh	r3, [r7, #4]
 8011a62:	4313      	orrs	r3, r2
 8011a64:	80bb      	strh	r3, [r7, #4]
		return (fred);
 8011a66:	88bb      	ldrh	r3, [r7, #4]
 8011a68:	e000      	b.n	8011a6c <LCD_Get_Pixel+0x58>
		}
	else
		return 0;
 8011a6a:	2300      	movs	r3, #0

}
 8011a6c:	4618      	mov	r0, r3
 8011a6e:	3708      	adds	r7, #8
 8011a70:	46bd      	mov	sp, r7
 8011a72:	bd80      	pop	{r7, pc}
 8011a74:	40020800 	.word	0x40020800
 8011a78:	20003648 	.word	0x20003648
 8011a7c:	200077f0 	.word	0x200077f0

08011a80 <Draw_4Point>:

/*******************************************************************************
Draw_4Point:
*******************************************************************************/
void Draw_4Point(short x, short y, char Str_Cnt, char High)
{
 8011a80:	b590      	push	{r4, r7, lr}
 8011a82:	b083      	sub	sp, #12
 8011a84:	af00      	add	r7, sp, #0
 8011a86:	4604      	mov	r4, r0
 8011a88:	4608      	mov	r0, r1
 8011a8a:	4611      	mov	r1, r2
 8011a8c:	461a      	mov	r2, r3
 8011a8e:	4623      	mov	r3, r4
 8011a90:	80fb      	strh	r3, [r7, #6]
 8011a92:	4603      	mov	r3, r0
 8011a94:	80bb      	strh	r3, [r7, #4]
 8011a96:	460b      	mov	r3, r1
 8011a98:	70fb      	strb	r3, [r7, #3]
 8011a9a:	4613      	mov	r3, r2
 8011a9c:	70bb      	strb	r3, [r7, #2]
  LCD_Set_Posi(x,y);
 8011a9e:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8011aa2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8011aa6:	4611      	mov	r1, r2
 8011aa8:	4618      	mov	r0, r3
 8011aaa:	f7ff ff3d 	bl	8011928 <LCD_Set_Posi>
  LCD_Set_Pixel(DAR);
 8011aae:	f643 10e7 	movw	r0, #14823	; 0x39e7
 8011ab2:	f7ff ff87 	bl	80119c4 <LCD_Set_Pixel>
  LCD_Set_Posi(x,y+High-1);
 8011ab6:	78bb      	ldrb	r3, [r7, #2]
 8011ab8:	b29a      	uxth	r2, r3
 8011aba:	88bb      	ldrh	r3, [r7, #4]
 8011abc:	4413      	add	r3, r2
 8011abe:	b29b      	uxth	r3, r3
 8011ac0:	3b01      	subs	r3, #1
 8011ac2:	b29b      	uxth	r3, r3
 8011ac4:	b21a      	sxth	r2, r3
 8011ac6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8011aca:	4611      	mov	r1, r2
 8011acc:	4618      	mov	r0, r3
 8011ace:	f7ff ff2b 	bl	8011928 <LCD_Set_Posi>
  LCD_Set_Pixel(DAR);
 8011ad2:	f643 10e7 	movw	r0, #14823	; 0x39e7
 8011ad6:	f7ff ff75 	bl	80119c4 <LCD_Set_Pixel>
  LCD_Set_Posi(x+Str_Cnt*((High>10)? 8:6),y);
 8011ada:	78fb      	ldrb	r3, [r7, #3]
 8011adc:	b29b      	uxth	r3, r3
 8011ade:	78ba      	ldrb	r2, [r7, #2]
 8011ae0:	2a0a      	cmp	r2, #10
 8011ae2:	d901      	bls.n	8011ae8 <Draw_4Point+0x68>
 8011ae4:	2208      	movs	r2, #8
 8011ae6:	e000      	b.n	8011aea <Draw_4Point+0x6a>
 8011ae8:	2206      	movs	r2, #6
 8011aea:	fb12 f303 	smulbb	r3, r2, r3
 8011aee:	b29a      	uxth	r2, r3
 8011af0:	88fb      	ldrh	r3, [r7, #6]
 8011af2:	4413      	add	r3, r2
 8011af4:	b29b      	uxth	r3, r3
 8011af6:	b21b      	sxth	r3, r3
 8011af8:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8011afc:	4611      	mov	r1, r2
 8011afe:	4618      	mov	r0, r3
 8011b00:	f7ff ff12 	bl	8011928 <LCD_Set_Posi>
  LCD_Set_Pixel(DAR);
 8011b04:	f643 10e7 	movw	r0, #14823	; 0x39e7
 8011b08:	f7ff ff5c 	bl	80119c4 <LCD_Set_Pixel>
  LCD_Set_Posi(x+Str_Cnt*((High>10)? 8:6),y+High-1);
 8011b0c:	78fb      	ldrb	r3, [r7, #3]
 8011b0e:	b29b      	uxth	r3, r3
 8011b10:	78ba      	ldrb	r2, [r7, #2]
 8011b12:	2a0a      	cmp	r2, #10
 8011b14:	d901      	bls.n	8011b1a <Draw_4Point+0x9a>
 8011b16:	2208      	movs	r2, #8
 8011b18:	e000      	b.n	8011b1c <Draw_4Point+0x9c>
 8011b1a:	2206      	movs	r2, #6
 8011b1c:	fb12 f303 	smulbb	r3, r2, r3
 8011b20:	b29a      	uxth	r2, r3
 8011b22:	88fb      	ldrh	r3, [r7, #6]
 8011b24:	4413      	add	r3, r2
 8011b26:	b29b      	uxth	r3, r3
 8011b28:	b218      	sxth	r0, r3
 8011b2a:	78bb      	ldrb	r3, [r7, #2]
 8011b2c:	b29a      	uxth	r2, r3
 8011b2e:	88bb      	ldrh	r3, [r7, #4]
 8011b30:	4413      	add	r3, r2
 8011b32:	b29b      	uxth	r3, r3
 8011b34:	3b01      	subs	r3, #1
 8011b36:	b29b      	uxth	r3, r3
 8011b38:	b21b      	sxth	r3, r3
 8011b3a:	4619      	mov	r1, r3
 8011b3c:	f7ff fef4 	bl	8011928 <LCD_Set_Posi>
  LCD_Set_Pixel(DAR);
 8011b40:	f643 10e7 	movw	r0, #14823	; 0x39e7
 8011b44:	f7ff ff3e 	bl	80119c4 <LCD_Set_Pixel>
}
 8011b48:	bf00      	nop
 8011b4a:	370c      	adds	r7, #12
 8011b4c:	46bd      	mov	sp, r7
 8011b4e:	bd90      	pop	{r4, r7, pc}

08011b50 <Update_Title>:

/*******************************************************************************
 Update_Item:
*******************************************************************************/
void Update_Title(void)
{
 8011b50:	b580      	push	{r7, lr}
 8011b52:	b082      	sub	sp, #8
 8011b54:	af00      	add	r7, sp, #0
  short i;

  for(i=0; i<8; i++)
 8011b56:	2300      	movs	r3, #0
 8011b58:	80fb      	strh	r3, [r7, #6]
 8011b5a:	e03b      	b.n	8011bd4 <Update_Title+0x84>
  {
    SetColor(GRY, TCOLOR[i]);
 8011b5c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8011b60:	4a21      	ldr	r2, [pc, #132]	; (8011be8 <Update_Title+0x98>)
 8011b62:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8011b66:	4619      	mov	r1, r3
 8011b68:	f643 10e7 	movw	r0, #14823	; 0x39e7
 8011b6c:	f7fc fa28 	bl	800dfc0 <SetColor>
    DispStr8x14(T_X-2, TITLE_Y[i], (Current == i)? INV : PRN, (char*)TSTR[i]);
 8011b70:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8011b74:	4a1d      	ldr	r2, [pc, #116]	; (8011bec <Update_Title+0x9c>)
 8011b76:	5cd3      	ldrb	r3, [r2, r3]
 8011b78:	b219      	sxth	r1, r3
 8011b7a:	4b1d      	ldr	r3, [pc, #116]	; (8011bf0 <Update_Title+0xa0>)
 8011b7c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8011b80:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8011b84:	429a      	cmp	r2, r3
 8011b86:	bf0c      	ite	eq
 8011b88:	2301      	moveq	r3, #1
 8011b8a:	2300      	movne	r3, #0
 8011b8c:	b2db      	uxtb	r3, r3
 8011b8e:	4618      	mov	r0, r3
 8011b90:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8011b94:	009b      	lsls	r3, r3, #2
 8011b96:	4a17      	ldr	r2, [pc, #92]	; (8011bf4 <Update_Title+0xa4>)
 8011b98:	4413      	add	r3, r2
 8011b9a:	4602      	mov	r2, r0
 8011b9c:	f240 102f 	movw	r0, #303	; 0x12f
 8011ba0:	f7fc f9b6 	bl	800df10 <DispStr8x14>
    if(Current == i)
 8011ba4:	4b12      	ldr	r3, [pc, #72]	; (8011bf0 <Update_Title+0xa0>)
 8011ba6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8011baa:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8011bae:	429a      	cmp	r2, r3
 8011bb0:	d10a      	bne.n	8011bc8 <Update_Title+0x78>
    {
        Draw_4Point(T_X-2, TITLE_Y[i], 2, Font8x14_H);
 8011bb2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8011bb6:	4a0d      	ldr	r2, [pc, #52]	; (8011bec <Update_Title+0x9c>)
 8011bb8:	5cd3      	ldrb	r3, [r2, r3]
 8011bba:	b219      	sxth	r1, r3
 8011bbc:	230e      	movs	r3, #14
 8011bbe:	2202      	movs	r2, #2
 8011bc0:	f240 102f 	movw	r0, #303	; 0x12f
 8011bc4:	f7ff ff5c 	bl	8011a80 <Draw_4Point>
  for(i=0; i<8; i++)
 8011bc8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8011bcc:	b29b      	uxth	r3, r3
 8011bce:	3301      	adds	r3, #1
 8011bd0:	b29b      	uxth	r3, r3
 8011bd2:	80fb      	strh	r3, [r7, #6]
 8011bd4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8011bd8:	2b07      	cmp	r3, #7
 8011bda:	ddbf      	ble.n	8011b5c <Update_Title+0xc>
    }
  }
}
 8011bdc:	bf00      	nop
 8011bde:	bf00      	nop
 8011be0:	3708      	adds	r7, #8
 8011be2:	46bd      	mov	sp, r7
 8011be4:	bd80      	pop	{r7, pc}
 8011be6:	bf00      	nop
 8011be8:	08001fa4 	.word	0x08001fa4
 8011bec:	08001fd4 	.word	0x08001fd4
 8011bf0:	2000079a 	.word	0x2000079a
 8011bf4:	08001fb4 	.word	0x08001fb4

08011bf8 <Update_Blink>:

/*******************************************************************************
 Update_Blink:
*******************************************************************************/
void Update_Blink(void)
{
 8011bf8:	b590      	push	{r4, r7, lr}
 8011bfa:	b087      	sub	sp, #28
 8011bfc:	af02      	add	r7, sp, #8
  char* ptr;
  long Tmp;
  unsigned short i, Range = List[Y_RANGES].Val + 10*List[PROBEATT].Val;
 8011bfe:	4bbd      	ldr	r3, [pc, #756]	; (8011ef4 <Update_Blink+0x2fc>)
 8011c00:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8011c04:	b29a      	uxth	r2, r3
 8011c06:	4bbb      	ldr	r3, [pc, #748]	; (8011ef4 <Update_Blink+0x2fc>)
 8011c08:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8011c0c:	b29b      	uxth	r3, r3
 8011c0e:	4619      	mov	r1, r3
 8011c10:	0089      	lsls	r1, r1, #2
 8011c12:	440b      	add	r3, r1
 8011c14:	005b      	lsls	r3, r3, #1
 8011c16:	b29b      	uxth	r3, r3
 8011c18:	4413      	add	r3, r2
 8011c1a:	81fb      	strh	r3, [r7, #14]

  i = MenuNow[Current];
 8011c1c:	4bb6      	ldr	r3, [pc, #728]	; (8011ef8 <Update_Blink+0x300>)
 8011c1e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8011c22:	461a      	mov	r2, r3
 8011c24:	4bb5      	ldr	r3, [pc, #724]	; (8011efc <Update_Blink+0x304>)
 8011c26:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8011c2a:	81bb      	strh	r3, [r7, #12]
  ptr = (char*)(List[i].PTR +(List[i].Val)*6);
 8011c2c:	89bb      	ldrh	r3, [r7, #12]
 8011c2e:	4ab1      	ldr	r2, [pc, #708]	; (8011ef4 <Update_Blink+0x2fc>)
 8011c30:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 8011c34:	89bb      	ldrh	r3, [r7, #12]
 8011c36:	49af      	ldr	r1, [pc, #700]	; (8011ef4 <Update_Blink+0x2fc>)
 8011c38:	00db      	lsls	r3, r3, #3
 8011c3a:	440b      	add	r3, r1
 8011c3c:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8011c40:	4619      	mov	r1, r3
 8011c42:	460b      	mov	r3, r1
 8011c44:	005b      	lsls	r3, r3, #1
 8011c46:	440b      	add	r3, r1
 8011c48:	005b      	lsls	r3, r3, #1
 8011c4a:	4413      	add	r3, r2
 8011c4c:	60bb      	str	r3, [r7, #8]
  if(Blink == BLINK)
 8011c4e:	4bac      	ldr	r3, [pc, #688]	; (8011f00 <Update_Blink+0x308>)
 8011c50:	781b      	ldrb	r3, [r3, #0]
 8011c52:	b2db      	uxtb	r3, r3
 8011c54:	2b01      	cmp	r3, #1
 8011c56:	f040 86ca 	bne.w	80129ee <Update_Blink+0xdf6>
  {
    Blink = 0;
 8011c5a:	4ba9      	ldr	r3, [pc, #676]	; (8011f00 <Update_Blink+0x308>)
 8011c5c:	2200      	movs	r2, #0
 8011c5e:	701a      	strb	r2, [r3, #0]
    List[MenuNow[ME]].Flg |= UPD; //
 8011c60:	4ba6      	ldr	r3, [pc, #664]	; (8011efc <Update_Blink+0x304>)
 8011c62:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8011c66:	4aa3      	ldr	r2, [pc, #652]	; (8011ef4 <Update_Blink+0x2fc>)
 8011c68:	00db      	lsls	r3, r3, #3
 8011c6a:	4413      	add	r3, r2
 8011c6c:	799b      	ldrb	r3, [r3, #6]
 8011c6e:	4aa3      	ldr	r2, [pc, #652]	; (8011efc <Update_Blink+0x304>)
 8011c70:	f9b2 2006 	ldrsh.w	r2, [r2, #6]
 8011c74:	4610      	mov	r0, r2
 8011c76:	f043 0320 	orr.w	r3, r3, #32
 8011c7a:	b2d9      	uxtb	r1, r3
 8011c7c:	4a9d      	ldr	r2, [pc, #628]	; (8011ef4 <Update_Blink+0x2fc>)
 8011c7e:	00c3      	lsls	r3, r0, #3
 8011c80:	4413      	add	r3, r2
 8011c82:	460a      	mov	r2, r1
 8011c84:	719a      	strb	r2, [r3, #6]
    switch(i)
 8011c86:	89bb      	ldrh	r3, [r7, #12]
 8011c88:	2b29      	cmp	r3, #41	; 0x29
 8011c8a:	f200 86aa 	bhi.w	80129e2 <Update_Blink+0xdea>
 8011c8e:	a201      	add	r2, pc, #4	; (adr r2, 8011c94 <Update_Blink+0x9c>)
 8011c90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011c94:	08011dff 	.word	0x08011dff
 8011c98:	08011dff 	.word	0x08011dff
 8011c9c:	08011dff 	.word	0x08011dff
 8011ca0:	08011e93 	.word	0x08011e93
 8011ca4:	08011ec5 	.word	0x08011ec5
 8011ca8:	08011ec5 	.word	0x08011ec5
 8011cac:	08011ffb 	.word	0x08011ffb
 8011cb0:	08012059 	.word	0x08012059
 8011cb4:	080120b1 	.word	0x080120b1
 8011cb8:	080120e3 	.word	0x080120e3
 8011cbc:	0801214f 	.word	0x0801214f
 8011cc0:	0801214f 	.word	0x0801214f
 8011cc4:	080122b1 	.word	0x080122b1
 8011cc8:	0801230b 	.word	0x0801230b
 8011ccc:	08012369 	.word	0x08012369
 8011cd0:	08012439 	.word	0x08012439
 8011cd4:	08012463 	.word	0x08012463
 8011cd8:	08012369 	.word	0x08012369
 8011cdc:	08012491 	.word	0x08012491
 8011ce0:	080129e3 	.word	0x080129e3
 8011ce4:	080129e3 	.word	0x080129e3
 8011ce8:	080129e3 	.word	0x080129e3
 8011cec:	080129e3 	.word	0x080129e3
 8011cf0:	080129e3 	.word	0x080129e3
 8011cf4:	080129e3 	.word	0x080129e3
 8011cf8:	080129e3 	.word	0x080129e3
 8011cfc:	08012509 	.word	0x08012509
 8011d00:	08012585 	.word	0x08012585
 8011d04:	080125b3 	.word	0x080125b3
 8011d08:	08011d3d 	.word	0x08011d3d
 8011d0c:	08011d3d 	.word	0x08011d3d
 8011d10:	08011d3d 	.word	0x08011d3d
 8011d14:	08011d3d 	.word	0x08011d3d
 8011d18:	08011d3d 	.word	0x08011d3d
 8011d1c:	08011d3d 	.word	0x08011d3d
 8011d20:	08011d3d 	.word	0x08011d3d
 8011d24:	0801262f 	.word	0x0801262f
 8011d28:	080126c9 	.word	0x080126c9
 8011d2c:	0801278d 	.word	0x0801278d
 8011d30:	0801283b 	.word	0x0801283b
 8011d34:	080128d5 	.word	0x080128d5
 8011d38:	08012943 	.word	0x08012943
    case SAVE_BUF:
    case SAVE_CSV:
    case SAVE_SVG:
    case LOAD_DAT:
    case LOAD_BUF:
      SetColor(GRY, TCOLOR[FN]);
 8011d3c:	f64f 4310 	movw	r3, #64528	; 0xfc10
 8011d40:	4619      	mov	r1, r3
 8011d42:	f643 10e7 	movw	r0, #14823	; 0x39e7
 8011d46:	f7fc f93b 	bl	800dfc0 <SetColor>
      u8ToDec3(NumStr, List[i].Val);
 8011d4a:	89bb      	ldrh	r3, [r7, #12]
 8011d4c:	4a69      	ldr	r2, [pc, #420]	; (8011ef4 <Update_Blink+0x2fc>)
 8011d4e:	00db      	lsls	r3, r3, #3
 8011d50:	4413      	add	r3, r2
 8011d52:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8011d56:	b2db      	uxtb	r3, r3
 8011d58:	4619      	mov	r1, r3
 8011d5a:	486a      	ldr	r0, [pc, #424]	; (8011f04 <Update_Blink+0x30c>)
 8011d5c:	f7ff f9bc 	bl	80110d8 <u8ToDec3>
      Draw_Circle_D(Twink, S_X[i]-3, LABLE_Y, 11, 0, 6*11);
 8011d60:	4b69      	ldr	r3, [pc, #420]	; (8011f08 <Update_Blink+0x310>)
 8011d62:	781b      	ldrb	r3, [r3, #0]
 8011d64:	b2d8      	uxtb	r0, r3
 8011d66:	89bb      	ldrh	r3, [r7, #12]
 8011d68:	4a68      	ldr	r2, [pc, #416]	; (8011f0c <Update_Blink+0x314>)
 8011d6a:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8011d6e:	b29b      	uxth	r3, r3
 8011d70:	3b03      	subs	r3, #3
 8011d72:	b29b      	uxth	r3, r3
 8011d74:	b219      	sxth	r1, r3
 8011d76:	2342      	movs	r3, #66	; 0x42
 8011d78:	9301      	str	r3, [sp, #4]
 8011d7a:	2300      	movs	r3, #0
 8011d7c:	9300      	str	r3, [sp, #0]
 8011d7e:	230b      	movs	r3, #11
 8011d80:	2203      	movs	r2, #3
 8011d82:	f7fc fa0b 	bl	800e19c <Draw_Circle_D>
      DispStr(S_X[i],    LABLE_Y, Twink, ((i > SAVE_SVG)? "Load" : "Save"));//0513
 8011d86:	89bb      	ldrh	r3, [r7, #12]
 8011d88:	4a60      	ldr	r2, [pc, #384]	; (8011f0c <Update_Blink+0x314>)
 8011d8a:	f932 0013 	ldrsh.w	r0, [r2, r3, lsl #1]
 8011d8e:	4b5e      	ldr	r3, [pc, #376]	; (8011f08 <Update_Blink+0x310>)
 8011d90:	781b      	ldrb	r3, [r3, #0]
 8011d92:	b2da      	uxtb	r2, r3
 8011d94:	89bb      	ldrh	r3, [r7, #12]
 8011d96:	2b21      	cmp	r3, #33	; 0x21
 8011d98:	d901      	bls.n	8011d9e <Update_Blink+0x1a6>
 8011d9a:	4b5d      	ldr	r3, [pc, #372]	; (8011f10 <Update_Blink+0x318>)
 8011d9c:	e000      	b.n	8011da0 <Update_Blink+0x1a8>
 8011d9e:	4b5d      	ldr	r3, [pc, #372]	; (8011f14 <Update_Blink+0x31c>)
 8011da0:	2103      	movs	r1, #3
 8011da2:	f7fc f925 	bl	800dff0 <DispStr>
      DispStr(S_X[i]+24, LABLE_Y, Twink, (char *)NumStr);
 8011da6:	89bb      	ldrh	r3, [r7, #12]
 8011da8:	4a58      	ldr	r2, [pc, #352]	; (8011f0c <Update_Blink+0x314>)
 8011daa:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8011dae:	b29b      	uxth	r3, r3
 8011db0:	3318      	adds	r3, #24
 8011db2:	b29b      	uxth	r3, r3
 8011db4:	b218      	sxth	r0, r3
 8011db6:	4b54      	ldr	r3, [pc, #336]	; (8011f08 <Update_Blink+0x310>)
 8011db8:	781b      	ldrb	r3, [r3, #0]
 8011dba:	b2da      	uxtb	r2, r3
 8011dbc:	4b51      	ldr	r3, [pc, #324]	; (8011f04 <Update_Blink+0x30c>)
 8011dbe:	2103      	movs	r1, #3
 8011dc0:	f7fc f916 	bl	800dff0 <DispStr>
      DispStr(S_X[i]+42, LABLE_Y, Twink, (List[i].PTR +(i - SAVE_BMP)*6));
 8011dc4:	89bb      	ldrh	r3, [r7, #12]
 8011dc6:	4a51      	ldr	r2, [pc, #324]	; (8011f0c <Update_Blink+0x314>)
 8011dc8:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8011dcc:	b29b      	uxth	r3, r3
 8011dce:	332a      	adds	r3, #42	; 0x2a
 8011dd0:	b29b      	uxth	r3, r3
 8011dd2:	b218      	sxth	r0, r3
 8011dd4:	4b4c      	ldr	r3, [pc, #304]	; (8011f08 <Update_Blink+0x310>)
 8011dd6:	781b      	ldrb	r3, [r3, #0]
 8011dd8:	b2dc      	uxtb	r4, r3
 8011dda:	89bb      	ldrh	r3, [r7, #12]
 8011ddc:	4a45      	ldr	r2, [pc, #276]	; (8011ef4 <Update_Blink+0x2fc>)
 8011dde:	f852 1033 	ldr.w	r1, [r2, r3, lsl #3]
 8011de2:	89bb      	ldrh	r3, [r7, #12]
 8011de4:	f1a3 021d 	sub.w	r2, r3, #29
 8011de8:	4613      	mov	r3, r2
 8011dea:	005b      	lsls	r3, r3, #1
 8011dec:	4413      	add	r3, r2
 8011dee:	005b      	lsls	r3, r3, #1
 8011df0:	440b      	add	r3, r1
 8011df2:	4622      	mov	r2, r4
 8011df4:	2103      	movs	r1, #3
 8011df6:	f7fc f8fb 	bl	800dff0 <DispStr>
      break;
 8011dfa:	f000 bdf2 	b.w	80129e2 <Update_Blink+0xdea>

    case Y_RANGES:
    case COUPLING:
    case PROBEATT:
      SetColor(GRY, TCOLOR[YN]);
 8011dfe:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8011e02:	4619      	mov	r1, r3
 8011e04:	f643 10e7 	movw	r0, #14823	; 0x39e7
 8011e08:	f7fc f8da 	bl	800dfc0 <SetColor>
      Draw_Circle_D(Twink, S_X[Y_RANGES]-3, TITLE_Y_POS, 11, 0, 6*7);
 8011e0c:	4b3e      	ldr	r3, [pc, #248]	; (8011f08 <Update_Blink+0x310>)
 8011e0e:	781b      	ldrb	r3, [r3, #0]
 8011e10:	b2d8      	uxtb	r0, r3
 8011e12:	232f      	movs	r3, #47	; 0x2f
 8011e14:	b29b      	uxth	r3, r3
 8011e16:	3b03      	subs	r3, #3
 8011e18:	b29b      	uxth	r3, r3
 8011e1a:	b219      	sxth	r1, r3
 8011e1c:	232a      	movs	r3, #42	; 0x2a
 8011e1e:	9301      	str	r3, [sp, #4]
 8011e20:	2300      	movs	r3, #0
 8011e22:	9300      	str	r3, [sp, #0]
 8011e24:	230b      	movs	r3, #11
 8011e26:	22e1      	movs	r2, #225	; 0xe1
 8011e28:	f7fc f9b8 	bl	800e19c <Draw_Circle_D>
      DispStr(S_X[Y_RANGES], TITLE_Y_POS, Twink, (List[Y_RANGES].PTR +(Range)*6));
 8011e2c:	242f      	movs	r4, #47	; 0x2f
 8011e2e:	4b36      	ldr	r3, [pc, #216]	; (8011f08 <Update_Blink+0x310>)
 8011e30:	781b      	ldrb	r3, [r3, #0]
 8011e32:	b2d8      	uxtb	r0, r3
 8011e34:	4b2f      	ldr	r3, [pc, #188]	; (8011ef4 <Update_Blink+0x2fc>)
 8011e36:	6819      	ldr	r1, [r3, #0]
 8011e38:	89fa      	ldrh	r2, [r7, #14]
 8011e3a:	4613      	mov	r3, r2
 8011e3c:	005b      	lsls	r3, r3, #1
 8011e3e:	4413      	add	r3, r2
 8011e40:	005b      	lsls	r3, r3, #1
 8011e42:	440b      	add	r3, r1
 8011e44:	4602      	mov	r2, r0
 8011e46:	21e1      	movs	r1, #225	; 0xe1
 8011e48:	4620      	mov	r0, r4
 8011e4a:	f7fc f8d1 	bl	800dff0 <DispStr>
      DispStr(S_X[COUPLING], TITLE_Y_POS, Twink, (List[COUPLING].PTR +(List[COUPLING].Val)*6));
 8011e4e:	2047      	movs	r0, #71	; 0x47
 8011e50:	4b2d      	ldr	r3, [pc, #180]	; (8011f08 <Update_Blink+0x310>)
 8011e52:	781b      	ldrb	r3, [r3, #0]
 8011e54:	b2d9      	uxtb	r1, r3
 8011e56:	4b27      	ldr	r3, [pc, #156]	; (8011ef4 <Update_Blink+0x2fc>)
 8011e58:	689a      	ldr	r2, [r3, #8]
 8011e5a:	4b26      	ldr	r3, [pc, #152]	; (8011ef4 <Update_Blink+0x2fc>)
 8011e5c:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8011e60:	461c      	mov	r4, r3
 8011e62:	4623      	mov	r3, r4
 8011e64:	005b      	lsls	r3, r3, #1
 8011e66:	4423      	add	r3, r4
 8011e68:	005b      	lsls	r3, r3, #1
 8011e6a:	4413      	add	r3, r2
 8011e6c:	460a      	mov	r2, r1
 8011e6e:	21e1      	movs	r1, #225	; 0xe1
 8011e70:	f7fc f8be 	bl	800dff0 <DispStr>
      DispStr10x14(S_X[PROBEATT], TITLE_Y_POS, PRN+SYMB,(List[PROBEATT].Val?("A"):("B")));
 8011e74:	2020      	movs	r0, #32
 8011e76:	4b1f      	ldr	r3, [pc, #124]	; (8011ef4 <Update_Blink+0x2fc>)
 8011e78:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8011e7c:	2b00      	cmp	r3, #0
 8011e7e:	d001      	beq.n	8011e84 <Update_Blink+0x28c>
 8011e80:	4b25      	ldr	r3, [pc, #148]	; (8011f18 <Update_Blink+0x320>)
 8011e82:	e000      	b.n	8011e86 <Update_Blink+0x28e>
 8011e84:	4b25      	ldr	r3, [pc, #148]	; (8011f1c <Update_Blink+0x324>)
 8011e86:	2210      	movs	r2, #16
 8011e88:	21e1      	movs	r1, #225	; 0xe1
 8011e8a:	f7fc fb19 	bl	800e4c0 <DispStr10x14>
      break;
 8011e8e:	f000 bda8 	b.w	80129e2 <Update_Blink+0xdea>

    case V0_POSI:
      if(Twink) ParamTab[P1F] |=  D_HID;
 8011e92:	4b1d      	ldr	r3, [pc, #116]	; (8011f08 <Update_Blink+0x310>)
 8011e94:	781b      	ldrb	r3, [r3, #0]
 8011e96:	b2db      	uxtb	r3, r3
 8011e98:	2b00      	cmp	r3, #0
 8011e9a:	d009      	beq.n	8011eb0 <Update_Blink+0x2b8>
 8011e9c:	4b20      	ldr	r3, [pc, #128]	; (8011f20 <Update_Blink+0x328>)
 8011e9e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8011ea2:	f043 0301 	orr.w	r3, r3, #1
 8011ea6:	b21a      	sxth	r2, r3
 8011ea8:	4b1d      	ldr	r3, [pc, #116]	; (8011f20 <Update_Blink+0x328>)
 8011eaa:	801a      	strh	r2, [r3, #0]
      else      ParamTab[P1F] &= ~D_HID;
      break;
 8011eac:	f000 bd99 	b.w	80129e2 <Update_Blink+0xdea>
      else      ParamTab[P1F] &= ~D_HID;
 8011eb0:	4b1b      	ldr	r3, [pc, #108]	; (8011f20 <Update_Blink+0x328>)
 8011eb2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8011eb6:	f023 0301 	bic.w	r3, r3, #1
 8011eba:	b21a      	sxth	r2, r3
 8011ebc:	4b18      	ldr	r3, [pc, #96]	; (8011f20 <Update_Blink+0x328>)
 8011ebe:	801a      	strh	r2, [r3, #0]
      break;
 8011ec0:	f000 bd8f 	b.w	80129e2 <Update_Blink+0xdea>

    case V1_POSI:
    case V2_POSI:
      Tmp = (i == V1_POSI)? V1F : V2F;
 8011ec4:	89bb      	ldrh	r3, [r7, #12]
 8011ec6:	2b04      	cmp	r3, #4
 8011ec8:	d101      	bne.n	8011ece <Update_Blink+0x2d6>
 8011eca:	2305      	movs	r3, #5
 8011ecc:	e000      	b.n	8011ed0 <Update_Blink+0x2d8>
 8011ece:	2306      	movs	r3, #6
 8011ed0:	607b      	str	r3, [r7, #4]
      if(Twink) ParamTab[Tmp] |=  D_HID;
 8011ed2:	4b0d      	ldr	r3, [pc, #52]	; (8011f08 <Update_Blink+0x310>)
 8011ed4:	781b      	ldrb	r3, [r3, #0]
 8011ed6:	b2db      	uxtb	r3, r3
 8011ed8:	2b00      	cmp	r3, #0
 8011eda:	d023      	beq.n	8011f24 <Update_Blink+0x32c>
 8011edc:	4a10      	ldr	r2, [pc, #64]	; (8011f20 <Update_Blink+0x328>)
 8011ede:	687b      	ldr	r3, [r7, #4]
 8011ee0:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8011ee4:	f043 0301 	orr.w	r3, r3, #1
 8011ee8:	b219      	sxth	r1, r3
 8011eea:	4a0d      	ldr	r2, [pc, #52]	; (8011f20 <Update_Blink+0x328>)
 8011eec:	687b      	ldr	r3, [r7, #4]
 8011eee:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8011ef2:	e022      	b.n	8011f3a <Update_Blink+0x342>
 8011ef4:	20000274 	.word	0x20000274
 8011ef8:	2000079a 	.word	0x2000079a
 8011efc:	20000514 	.word	0x20000514
 8011f00:	20001861 	.word	0x20001861
 8011f04:	20003668 	.word	0x20003668
 8011f08:	20000770 	.word	0x20000770
 8011f0c:	080021f8 	.word	0x080021f8
 8011f10:	0800099c 	.word	0x0800099c
 8011f14:	080009a4 	.word	0x080009a4
 8011f18:	080009ac 	.word	0x080009ac
 8011f1c:	080009b0 	.word	0x080009b0
 8011f20:	20000140 	.word	0x20000140
      else      ParamTab[Tmp] &= ~D_HID;
 8011f24:	4ab1      	ldr	r2, [pc, #708]	; (80121ec <Update_Blink+0x5f4>)
 8011f26:	687b      	ldr	r3, [r7, #4]
 8011f28:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8011f2c:	f023 0301 	bic.w	r3, r3, #1
 8011f30:	b219      	sxth	r1, r3
 8011f32:	4aae      	ldr	r2, [pc, #696]	; (80121ec <Update_Blink+0x5f4>)
 8011f34:	687b      	ldr	r3, [r7, #4]
 8011f36:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
      Tmp  =(ParamTab[V1x2]- ParamTab[V2x2])/2;         // V2 - V1 ��ֵ
 8011f3a:	4bac      	ldr	r3, [pc, #688]	; (80121ec <Update_Blink+0x5f4>)
 8011f3c:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 8011f40:	461a      	mov	r2, r3
 8011f42:	4baa      	ldr	r3, [pc, #680]	; (80121ec <Update_Blink+0x5f4>)
 8011f44:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 8011f48:	1ad3      	subs	r3, r2, r3
 8011f4a:	0fda      	lsrs	r2, r3, #31
 8011f4c:	4413      	add	r3, r2
 8011f4e:	105b      	asrs	r3, r3, #1
 8011f50:	607b      	str	r3, [r7, #4]
      Tmp *= X_SCALE[Range]* Exp(V_SCALE[Range]);
 8011f52:	89fb      	ldrh	r3, [r7, #14]
 8011f54:	4aa6      	ldr	r2, [pc, #664]	; (80121f0 <Update_Blink+0x5f8>)
 8011f56:	5cd3      	ldrb	r3, [r2, r3]
 8011f58:	461c      	mov	r4, r3
 8011f5a:	89fb      	ldrh	r3, [r7, #14]
 8011f5c:	4aa5      	ldr	r2, [pc, #660]	; (80121f4 <Update_Blink+0x5fc>)
 8011f5e:	5cd3      	ldrb	r3, [r2, r3]
 8011f60:	4618      	mov	r0, r3
 8011f62:	f7ff fa1d 	bl	80113a0 <Exp>
 8011f66:	4603      	mov	r3, r0
 8011f68:	fb03 f204 	mul.w	r2, r3, r4
 8011f6c:	687b      	ldr	r3, [r7, #4]
 8011f6e:	fb02 f303 	mul.w	r3, r2, r3
 8011f72:	607b      	str	r3, [r7, #4]
      Value2Str(NumStr, Tmp, V[0], 3, UNSIGN);
 8011f74:	2301      	movs	r3, #1
 8011f76:	9300      	str	r3, [sp, #0]
 8011f78:	2303      	movs	r3, #3
 8011f7a:	4a9f      	ldr	r2, [pc, #636]	; (80121f8 <Update_Blink+0x600>)
 8011f7c:	6879      	ldr	r1, [r7, #4]
 8011f7e:	489f      	ldr	r0, [pc, #636]	; (80121fc <Update_Blink+0x604>)
 8011f80:	f7ff f912 	bl	80111a8 <Value2Str>
      SetColor(GRY, TCOLOR[YN]);
 8011f84:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8011f88:	4619      	mov	r1, r3
 8011f8a:	f643 10e7 	movw	r0, #14823	; 0x39e7
 8011f8e:	f7fc f817 	bl	800dfc0 <SetColor>
      Draw_Circle_D(Twink, S_X[V1_POSI]-3, LABLE_Y, 11, 0, 6*9);
 8011f92:	4b9b      	ldr	r3, [pc, #620]	; (8012200 <Update_Blink+0x608>)
 8011f94:	781b      	ldrb	r3, [r3, #0]
 8011f96:	b2d8      	uxtb	r0, r3
 8011f98:	2307      	movs	r3, #7
 8011f9a:	b29b      	uxth	r3, r3
 8011f9c:	3b03      	subs	r3, #3
 8011f9e:	b29b      	uxth	r3, r3
 8011fa0:	b219      	sxth	r1, r3
 8011fa2:	2336      	movs	r3, #54	; 0x36
 8011fa4:	9301      	str	r3, [sp, #4]
 8011fa6:	2300      	movs	r3, #0
 8011fa8:	9300      	str	r3, [sp, #0]
 8011faa:	230b      	movs	r3, #11
 8011fac:	2203      	movs	r2, #3
 8011fae:	f7fc f8f5 	bl	800e19c <Draw_Circle_D>
      DispStr(S_X[V1_POSI]+0*6, LABLE_Y, Twink+SYMB, "]");
 8011fb2:	2007      	movs	r0, #7
 8011fb4:	4b92      	ldr	r3, [pc, #584]	; (8012200 <Update_Blink+0x608>)
 8011fb6:	781b      	ldrb	r3, [r3, #0]
 8011fb8:	b2db      	uxtb	r3, r3
 8011fba:	3310      	adds	r3, #16
 8011fbc:	b2da      	uxtb	r2, r3
 8011fbe:	4b91      	ldr	r3, [pc, #580]	; (8012204 <Update_Blink+0x60c>)
 8011fc0:	2103      	movs	r1, #3
 8011fc2:	f7fc f815 	bl	800dff0 <DispStr>
      DispStr(S_X[V1_POSI]+1*6, LABLE_Y, Twink,      "V:      ");
 8011fc6:	2307      	movs	r3, #7
 8011fc8:	b29b      	uxth	r3, r3
 8011fca:	3306      	adds	r3, #6
 8011fcc:	b29b      	uxth	r3, r3
 8011fce:	b218      	sxth	r0, r3
 8011fd0:	4b8b      	ldr	r3, [pc, #556]	; (8012200 <Update_Blink+0x608>)
 8011fd2:	781b      	ldrb	r3, [r3, #0]
 8011fd4:	b2da      	uxtb	r2, r3
 8011fd6:	4b8c      	ldr	r3, [pc, #560]	; (8012208 <Update_Blink+0x610>)
 8011fd8:	2103      	movs	r1, #3
 8011fda:	f7fc f809 	bl	800dff0 <DispStr>
      DispStr(S_X[V1_POSI]+3*6, LABLE_Y, Twink, (char *)NumStr);
 8011fde:	2307      	movs	r3, #7
 8011fe0:	b29b      	uxth	r3, r3
 8011fe2:	3312      	adds	r3, #18
 8011fe4:	b29b      	uxth	r3, r3
 8011fe6:	b218      	sxth	r0, r3
 8011fe8:	4b85      	ldr	r3, [pc, #532]	; (8012200 <Update_Blink+0x608>)
 8011fea:	781b      	ldrb	r3, [r3, #0]
 8011fec:	b2da      	uxtb	r2, r3
 8011fee:	4b83      	ldr	r3, [pc, #524]	; (80121fc <Update_Blink+0x604>)
 8011ff0:	2103      	movs	r1, #3
 8011ff2:	f7fb fffd 	bl	800dff0 <DispStr>
      break;
 8011ff6:	f000 bcf4 	b.w	80129e2 <Update_Blink+0xdea>

    case YN_TYPE:
      if(Twink) ParamTab[V1F] |=  D_HID;
 8011ffa:	4b81      	ldr	r3, [pc, #516]	; (8012200 <Update_Blink+0x608>)
 8011ffc:	781b      	ldrb	r3, [r3, #0]
 8011ffe:	b2db      	uxtb	r3, r3
 8012000:	2b00      	cmp	r3, #0
 8012002:	d008      	beq.n	8012016 <Update_Blink+0x41e>
 8012004:	4b79      	ldr	r3, [pc, #484]	; (80121ec <Update_Blink+0x5f4>)
 8012006:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 801200a:	f043 0301 	orr.w	r3, r3, #1
 801200e:	b21a      	sxth	r2, r3
 8012010:	4b76      	ldr	r3, [pc, #472]	; (80121ec <Update_Blink+0x5f4>)
 8012012:	815a      	strh	r2, [r3, #10]
 8012014:	e007      	b.n	8012026 <Update_Blink+0x42e>
      else      ParamTab[V1F] &= ~D_HID;
 8012016:	4b75      	ldr	r3, [pc, #468]	; (80121ec <Update_Blink+0x5f4>)
 8012018:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 801201c:	f023 0301 	bic.w	r3, r3, #1
 8012020:	b21a      	sxth	r2, r3
 8012022:	4b72      	ldr	r3, [pc, #456]	; (80121ec <Update_Blink+0x5f4>)
 8012024:	815a      	strh	r2, [r3, #10]
      if(Twink) ParamTab[V2F] |=  D_HID;
 8012026:	4b76      	ldr	r3, [pc, #472]	; (8012200 <Update_Blink+0x608>)
 8012028:	781b      	ldrb	r3, [r3, #0]
 801202a:	b2db      	uxtb	r3, r3
 801202c:	2b00      	cmp	r3, #0
 801202e:	d009      	beq.n	8012044 <Update_Blink+0x44c>
 8012030:	4b6e      	ldr	r3, [pc, #440]	; (80121ec <Update_Blink+0x5f4>)
 8012032:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8012036:	f043 0301 	orr.w	r3, r3, #1
 801203a:	b21a      	sxth	r2, r3
 801203c:	4b6b      	ldr	r3, [pc, #428]	; (80121ec <Update_Blink+0x5f4>)
 801203e:	819a      	strh	r2, [r3, #12]
      else      ParamTab[V2F] &= ~D_HID;
      break;
 8012040:	f000 bccf 	b.w	80129e2 <Update_Blink+0xdea>
      else      ParamTab[V2F] &= ~D_HID;
 8012044:	4b69      	ldr	r3, [pc, #420]	; (80121ec <Update_Blink+0x5f4>)
 8012046:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 801204a:	f023 0301 	bic.w	r3, r3, #1
 801204e:	b21a      	sxth	r2, r3
 8012050:	4b66      	ldr	r3, [pc, #408]	; (80121ec <Update_Blink+0x5f4>)
 8012052:	819a      	strh	r2, [r3, #12]
      break;
 8012054:	f000 bcc5 	b.w	80129e2 <Update_Blink+0xdea>

    case TIM_BASE:
      SetColor(GRY, TCOLOR[XN]);
 8012058:	f240 73ff 	movw	r3, #2047	; 0x7ff
 801205c:	4619      	mov	r1, r3
 801205e:	f643 10e7 	movw	r0, #14823	; 0x39e7
 8012062:	f7fb ffad 	bl	800dfc0 <SetColor>
      Draw_Circle_D(Twink, S_X[i]-3, TITLE_Y_POS, 11, 2, 6*5);
 8012066:	4b66      	ldr	r3, [pc, #408]	; (8012200 <Update_Blink+0x608>)
 8012068:	781b      	ldrb	r3, [r3, #0]
 801206a:	b2d8      	uxtb	r0, r3
 801206c:	89bb      	ldrh	r3, [r7, #12]
 801206e:	4a67      	ldr	r2, [pc, #412]	; (801220c <Update_Blink+0x614>)
 8012070:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8012074:	b29b      	uxth	r3, r3
 8012076:	3b03      	subs	r3, #3
 8012078:	b29b      	uxth	r3, r3
 801207a:	b219      	sxth	r1, r3
 801207c:	231e      	movs	r3, #30
 801207e:	9301      	str	r3, [sp, #4]
 8012080:	2302      	movs	r3, #2
 8012082:	9300      	str	r3, [sp, #0]
 8012084:	230b      	movs	r3, #11
 8012086:	22e1      	movs	r2, #225	; 0xe1
 8012088:	f7fc f888 	bl	800e19c <Draw_Circle_D>
      DispStr(S_X[i], TITLE_Y_POS, Twink, TimeBase_Str[List[TIM_BASE].Val]);
 801208c:	89bb      	ldrh	r3, [r7, #12]
 801208e:	4a5f      	ldr	r2, [pc, #380]	; (801220c <Update_Blink+0x614>)
 8012090:	f932 0013 	ldrsh.w	r0, [r2, r3, lsl #1]
 8012094:	4b5a      	ldr	r3, [pc, #360]	; (8012200 <Update_Blink+0x608>)
 8012096:	781b      	ldrb	r3, [r3, #0]
 8012098:	b2da      	uxtb	r2, r3
 801209a:	4b5d      	ldr	r3, [pc, #372]	; (8012210 <Update_Blink+0x618>)
 801209c:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 80120a0:	00db      	lsls	r3, r3, #3
 80120a2:	495c      	ldr	r1, [pc, #368]	; (8012214 <Update_Blink+0x61c>)
 80120a4:	440b      	add	r3, r1
 80120a6:	21e1      	movs	r1, #225	; 0xe1
 80120a8:	f7fb ffa2 	bl	800dff0 <DispStr>
      break;
 80120ac:	f000 bc99 	b.w	80129e2 <Update_Blink+0xdea>

    case VIEWPOSI:
      if(Twink) ParamTab[T0F] |=  D_HID;
 80120b0:	4b53      	ldr	r3, [pc, #332]	; (8012200 <Update_Blink+0x608>)
 80120b2:	781b      	ldrb	r3, [r3, #0]
 80120b4:	b2db      	uxtb	r3, r3
 80120b6:	2b00      	cmp	r3, #0
 80120b8:	d009      	beq.n	80120ce <Update_Blink+0x4d6>
 80120ba:	4b4c      	ldr	r3, [pc, #304]	; (80121ec <Update_Blink+0x5f4>)
 80120bc:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 80120c0:	f043 0301 	orr.w	r3, r3, #1
 80120c4:	b21a      	sxth	r2, r3
 80120c6:	4b49      	ldr	r3, [pc, #292]	; (80121ec <Update_Blink+0x5f4>)
 80120c8:	81da      	strh	r2, [r3, #14]
      else      ParamTab[T0F] &= ~D_HID;
      break;
 80120ca:	f000 bc8a 	b.w	80129e2 <Update_Blink+0xdea>
      else      ParamTab[T0F] &= ~D_HID;
 80120ce:	4b47      	ldr	r3, [pc, #284]	; (80121ec <Update_Blink+0x5f4>)
 80120d0:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 80120d4:	f023 0301 	bic.w	r3, r3, #1
 80120d8:	b21a      	sxth	r2, r3
 80120da:	4b44      	ldr	r3, [pc, #272]	; (80121ec <Update_Blink+0x5f4>)
 80120dc:	81da      	strh	r2, [r3, #14]
      break;
 80120de:	f000 bc80 	b.w	80129e2 <Update_Blink+0xdea>

    case SMPL_DPTH:
      SetColor(GRY, TCOLOR[XN]);
 80120e2:	f240 73ff 	movw	r3, #2047	; 0x7ff
 80120e6:	4619      	mov	r1, r3
 80120e8:	f643 10e7 	movw	r0, #14823	; 0x39e7
 80120ec:	f7fb ff68 	bl	800dfc0 <SetColor>
      Draw_Circle_D(Twink, S_X[SMPL_DPTH]-3, LABLE_Y, 11, 0, 6*11);
 80120f0:	4b43      	ldr	r3, [pc, #268]	; (8012200 <Update_Blink+0x608>)
 80120f2:	781b      	ldrb	r3, [r3, #0]
 80120f4:	b2d8      	uxtb	r0, r3
 80120f6:	23f8      	movs	r3, #248	; 0xf8
 80120f8:	b29b      	uxth	r3, r3
 80120fa:	3b03      	subs	r3, #3
 80120fc:	b29b      	uxth	r3, r3
 80120fe:	b219      	sxth	r1, r3
 8012100:	2342      	movs	r3, #66	; 0x42
 8012102:	9301      	str	r3, [sp, #4]
 8012104:	2300      	movs	r3, #0
 8012106:	9300      	str	r3, [sp, #0]
 8012108:	230b      	movs	r3, #11
 801210a:	2203      	movs	r2, #3
 801210c:	f7fc f846 	bl	800e19c <Draw_Circle_D>
      DispStr(S_X[SMPL_DPTH],    LABLE_Y,  Twink, "SmplDpth:  ");
 8012110:	20f8      	movs	r0, #248	; 0xf8
 8012112:	4b3b      	ldr	r3, [pc, #236]	; (8012200 <Update_Blink+0x608>)
 8012114:	781b      	ldrb	r3, [r3, #0]
 8012116:	b2da      	uxtb	r2, r3
 8012118:	4b3f      	ldr	r3, [pc, #252]	; (8012218 <Update_Blink+0x620>)
 801211a:	2103      	movs	r1, #3
 801211c:	f7fb ff68 	bl	800dff0 <DispStr>
      DispStr(S_X[SMPL_DPTH]+6*9, LABLE_Y,  Twink, (char *)&D[List[SMPL_DPTH].Val]);
 8012120:	23f8      	movs	r3, #248	; 0xf8
 8012122:	b29b      	uxth	r3, r3
 8012124:	3336      	adds	r3, #54	; 0x36
 8012126:	b29b      	uxth	r3, r3
 8012128:	b218      	sxth	r0, r3
 801212a:	4b35      	ldr	r3, [pc, #212]	; (8012200 <Update_Blink+0x608>)
 801212c:	781b      	ldrb	r3, [r3, #0]
 801212e:	b2da      	uxtb	r2, r3
 8012130:	4b37      	ldr	r3, [pc, #220]	; (8012210 <Update_Blink+0x618>)
 8012132:	f9b3 304c 	ldrsh.w	r3, [r3, #76]	; 0x4c
 8012136:	4619      	mov	r1, r3
 8012138:	460b      	mov	r3, r1
 801213a:	005b      	lsls	r3, r3, #1
 801213c:	440b      	add	r3, r1
 801213e:	005b      	lsls	r3, r3, #1
 8012140:	4936      	ldr	r1, [pc, #216]	; (801221c <Update_Blink+0x624>)
 8012142:	440b      	add	r3, r1
 8012144:	2103      	movs	r1, #3
 8012146:	f7fb ff53 	bl	800dff0 <DispStr>
      break;
 801214a:	f000 bc4a 	b.w	80129e2 <Update_Blink+0xdea>

    case T1_POSI:
    case T2_POSI:
      Tmp = (i == T1_POSI)? T1F : T2F;
 801214e:	89bb      	ldrh	r3, [r7, #12]
 8012150:	2b0a      	cmp	r3, #10
 8012152:	d101      	bne.n	8012158 <Update_Blink+0x560>
 8012154:	2308      	movs	r3, #8
 8012156:	e000      	b.n	801215a <Update_Blink+0x562>
 8012158:	2309      	movs	r3, #9
 801215a:	607b      	str	r3, [r7, #4]
      if(Twink) ParamTab[Tmp] |=  D_HID;
 801215c:	4b28      	ldr	r3, [pc, #160]	; (8012200 <Update_Blink+0x608>)
 801215e:	781b      	ldrb	r3, [r3, #0]
 8012160:	b2db      	uxtb	r3, r3
 8012162:	2b00      	cmp	r3, #0
 8012164:	d00b      	beq.n	801217e <Update_Blink+0x586>
 8012166:	4a21      	ldr	r2, [pc, #132]	; (80121ec <Update_Blink+0x5f4>)
 8012168:	687b      	ldr	r3, [r7, #4]
 801216a:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 801216e:	f043 0301 	orr.w	r3, r3, #1
 8012172:	b219      	sxth	r1, r3
 8012174:	4a1d      	ldr	r2, [pc, #116]	; (80121ec <Update_Blink+0x5f4>)
 8012176:	687b      	ldr	r3, [r7, #4]
 8012178:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 801217c:	e00a      	b.n	8012194 <Update_Blink+0x59c>
      else      ParamTab[Tmp] &= ~D_HID;
 801217e:	4a1b      	ldr	r2, [pc, #108]	; (80121ec <Update_Blink+0x5f4>)
 8012180:	687b      	ldr	r3, [r7, #4]
 8012182:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8012186:	f023 0301 	bic.w	r3, r3, #1
 801218a:	b219      	sxth	r1, r3
 801218c:	4a17      	ldr	r2, [pc, #92]	; (80121ec <Update_Blink+0x5f4>)
 801218e:	687b      	ldr	r3, [r7, #4]
 8012190:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
      Tmp  = ParamTab[T2x1] - ParamTab[T1x1];          // T2 - T1 ��ֵ
 8012194:	4b15      	ldr	r3, [pc, #84]	; (80121ec <Update_Blink+0x5f4>)
 8012196:	f9b3 3026 	ldrsh.w	r3, [r3, #38]	; 0x26
 801219a:	461a      	mov	r2, r3
 801219c:	4b13      	ldr	r3, [pc, #76]	; (80121ec <Update_Blink+0x5f4>)
 801219e:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	; 0x24
 80121a2:	1ad3      	subs	r3, r2, r3
 80121a4:	607b      	str	r3, [r7, #4]
      Tmp *= B_SCALE[List[TIM_BASE].Val]* Exp(T_SCALE[List[TIM_BASE].Val]);
 80121a6:	4b1a      	ldr	r3, [pc, #104]	; (8012210 <Update_Blink+0x618>)
 80121a8:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 80121ac:	461a      	mov	r2, r3
 80121ae:	4b1c      	ldr	r3, [pc, #112]	; (8012220 <Update_Blink+0x628>)
 80121b0:	5c9b      	ldrb	r3, [r3, r2]
 80121b2:	461c      	mov	r4, r3
 80121b4:	4b16      	ldr	r3, [pc, #88]	; (8012210 <Update_Blink+0x618>)
 80121b6:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 80121ba:	461a      	mov	r2, r3
 80121bc:	4b19      	ldr	r3, [pc, #100]	; (8012224 <Update_Blink+0x62c>)
 80121be:	5c9b      	ldrb	r3, [r3, r2]
 80121c0:	4618      	mov	r0, r3
 80121c2:	f7ff f8ed 	bl	80113a0 <Exp>
 80121c6:	4603      	mov	r3, r0
 80121c8:	fb03 f204 	mul.w	r2, r3, r4
 80121cc:	687b      	ldr	r3, [r7, #4]
 80121ce:	fb02 f303 	mul.w	r3, r2, r3
 80121d2:	607b      	str	r3, [r7, #4]
      if(Tmp>=0)
 80121d4:	687b      	ldr	r3, [r7, #4]
 80121d6:	2b00      	cmp	r3, #0
 80121d8:	db28      	blt.n	801222c <Update_Blink+0x634>
        Value2Str(NumStr, Tmp, T[0], 3, UNSIGN);
 80121da:	2301      	movs	r3, #1
 80121dc:	9300      	str	r3, [sp, #0]
 80121de:	2303      	movs	r3, #3
 80121e0:	4a11      	ldr	r2, [pc, #68]	; (8012228 <Update_Blink+0x630>)
 80121e2:	6879      	ldr	r1, [r7, #4]
 80121e4:	4805      	ldr	r0, [pc, #20]	; (80121fc <Update_Blink+0x604>)
 80121e6:	f7fe ffdf 	bl	80111a8 <Value2Str>
 80121ea:	e027      	b.n	801223c <Update_Blink+0x644>
 80121ec:	20000140 	.word	0x20000140
 80121f0:	080021cc 	.word	0x080021cc
 80121f4:	080021a4 	.word	0x080021a4
 80121f8:	08001d9c 	.word	0x08001d9c
 80121fc:	20003668 	.word	0x20003668
 8012200:	20000770 	.word	0x20000770
 8012204:	080009b4 	.word	0x080009b4
 8012208:	080009b8 	.word	0x080009b8
 801220c:	080021f8 	.word	0x080021f8
 8012210:	20000274 	.word	0x20000274
 8012214:	200001ac 	.word	0x200001ac
 8012218:	080009c4 	.word	0x080009c4
 801221c:	08001ce8 	.word	0x08001ce8
 8012220:	080021b8 	.word	0x080021b8
 8012224:	08002190 	.word	0x08002190
 8012228:	08001d84 	.word	0x08001d84
      else
        Value2Str(NumStr, Tmp, T[0], 3, SIGN);
 801222c:	2300      	movs	r3, #0
 801222e:	9300      	str	r3, [sp, #0]
 8012230:	2303      	movs	r3, #3
 8012232:	4aa3      	ldr	r2, [pc, #652]	; (80124c0 <Update_Blink+0x8c8>)
 8012234:	6879      	ldr	r1, [r7, #4]
 8012236:	48a3      	ldr	r0, [pc, #652]	; (80124c4 <Update_Blink+0x8cc>)
 8012238:	f7fe ffb6 	bl	80111a8 <Value2Str>
      SetColor(GRY, TCOLOR[XN]);
 801223c:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8012240:	4619      	mov	r1, r3
 8012242:	f643 10e7 	movw	r0, #14823	; 0x39e7
 8012246:	f7fb febb 	bl	800dfc0 <SetColor>
      Draw_Circle_D(Twink, S_X[T1_POSI]-3, LABLE_Y, 11, 0, 6*9);
 801224a:	4b9f      	ldr	r3, [pc, #636]	; (80124c8 <Update_Blink+0x8d0>)
 801224c:	781b      	ldrb	r3, [r3, #0]
 801224e:	b2d8      	uxtb	r0, r3
 8012250:	2307      	movs	r3, #7
 8012252:	b29b      	uxth	r3, r3
 8012254:	3b03      	subs	r3, #3
 8012256:	b29b      	uxth	r3, r3
 8012258:	b219      	sxth	r1, r3
 801225a:	2336      	movs	r3, #54	; 0x36
 801225c:	9301      	str	r3, [sp, #4]
 801225e:	2300      	movs	r3, #0
 8012260:	9300      	str	r3, [sp, #0]
 8012262:	230b      	movs	r3, #11
 8012264:	2203      	movs	r2, #3
 8012266:	f7fb ff99 	bl	800e19c <Draw_Circle_D>
      DispStr(S_X[T1_POSI]+0*6, LABLE_Y, Twink+SYMB, "]");
 801226a:	2007      	movs	r0, #7
 801226c:	4b96      	ldr	r3, [pc, #600]	; (80124c8 <Update_Blink+0x8d0>)
 801226e:	781b      	ldrb	r3, [r3, #0]
 8012270:	b2db      	uxtb	r3, r3
 8012272:	3310      	adds	r3, #16
 8012274:	b2da      	uxtb	r2, r3
 8012276:	4b95      	ldr	r3, [pc, #596]	; (80124cc <Update_Blink+0x8d4>)
 8012278:	2103      	movs	r1, #3
 801227a:	f7fb feb9 	bl	800dff0 <DispStr>
      DispStr(S_X[T1_POSI]+1*6, LABLE_Y, Twink,      "T:      ");
 801227e:	2307      	movs	r3, #7
 8012280:	b29b      	uxth	r3, r3
 8012282:	3306      	adds	r3, #6
 8012284:	b29b      	uxth	r3, r3
 8012286:	b218      	sxth	r0, r3
 8012288:	4b8f      	ldr	r3, [pc, #572]	; (80124c8 <Update_Blink+0x8d0>)
 801228a:	781b      	ldrb	r3, [r3, #0]
 801228c:	b2da      	uxtb	r2, r3
 801228e:	4b90      	ldr	r3, [pc, #576]	; (80124d0 <Update_Blink+0x8d8>)
 8012290:	2103      	movs	r1, #3
 8012292:	f7fb fead 	bl	800dff0 <DispStr>
      DispStr(S_X[T1_POSI]+3*6, LABLE_Y, Twink,      (char *)NumStr);
 8012296:	2307      	movs	r3, #7
 8012298:	b29b      	uxth	r3, r3
 801229a:	3312      	adds	r3, #18
 801229c:	b29b      	uxth	r3, r3
 801229e:	b218      	sxth	r0, r3
 80122a0:	4b89      	ldr	r3, [pc, #548]	; (80124c8 <Update_Blink+0x8d0>)
 80122a2:	781b      	ldrb	r3, [r3, #0]
 80122a4:	b2da      	uxtb	r2, r3
 80122a6:	4b87      	ldr	r3, [pc, #540]	; (80124c4 <Update_Blink+0x8cc>)
 80122a8:	2103      	movs	r1, #3
 80122aa:	f7fb fea1 	bl	800dff0 <DispStr>
      break;
 80122ae:	e398      	b.n	80129e2 <Update_Blink+0xdea>

    case XN_TYPE:
      if(Twink) ParamTab[T1F] |=  D_HID;
 80122b0:	4b85      	ldr	r3, [pc, #532]	; (80124c8 <Update_Blink+0x8d0>)
 80122b2:	781b      	ldrb	r3, [r3, #0]
 80122b4:	b2db      	uxtb	r3, r3
 80122b6:	2b00      	cmp	r3, #0
 80122b8:	d008      	beq.n	80122cc <Update_Blink+0x6d4>
 80122ba:	4b86      	ldr	r3, [pc, #536]	; (80124d4 <Update_Blink+0x8dc>)
 80122bc:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 80122c0:	f043 0301 	orr.w	r3, r3, #1
 80122c4:	b21a      	sxth	r2, r3
 80122c6:	4b83      	ldr	r3, [pc, #524]	; (80124d4 <Update_Blink+0x8dc>)
 80122c8:	821a      	strh	r2, [r3, #16]
 80122ca:	e007      	b.n	80122dc <Update_Blink+0x6e4>
      else      ParamTab[T1F] &= ~D_HID;
 80122cc:	4b81      	ldr	r3, [pc, #516]	; (80124d4 <Update_Blink+0x8dc>)
 80122ce:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 80122d2:	f023 0301 	bic.w	r3, r3, #1
 80122d6:	b21a      	sxth	r2, r3
 80122d8:	4b7e      	ldr	r3, [pc, #504]	; (80124d4 <Update_Blink+0x8dc>)
 80122da:	821a      	strh	r2, [r3, #16]
      if(Twink) ParamTab[T2F] |=  D_HID;
 80122dc:	4b7a      	ldr	r3, [pc, #488]	; (80124c8 <Update_Blink+0x8d0>)
 80122de:	781b      	ldrb	r3, [r3, #0]
 80122e0:	b2db      	uxtb	r3, r3
 80122e2:	2b00      	cmp	r3, #0
 80122e4:	d008      	beq.n	80122f8 <Update_Blink+0x700>
 80122e6:	4b7b      	ldr	r3, [pc, #492]	; (80124d4 <Update_Blink+0x8dc>)
 80122e8:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 80122ec:	f043 0301 	orr.w	r3, r3, #1
 80122f0:	b21a      	sxth	r2, r3
 80122f2:	4b78      	ldr	r3, [pc, #480]	; (80124d4 <Update_Blink+0x8dc>)
 80122f4:	825a      	strh	r2, [r3, #18]
      else      ParamTab[T2F] &= ~D_HID;
      break;
 80122f6:	e374      	b.n	80129e2 <Update_Blink+0xdea>
      else      ParamTab[T2F] &= ~D_HID;
 80122f8:	4b76      	ldr	r3, [pc, #472]	; (80124d4 <Update_Blink+0x8dc>)
 80122fa:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 80122fe:	f023 0301 	bic.w	r3, r3, #1
 8012302:	b21a      	sxth	r2, r3
 8012304:	4b73      	ldr	r3, [pc, #460]	; (80124d4 <Update_Blink+0x8dc>)
 8012306:	825a      	strh	r2, [r3, #18]
      break;
 8012308:	e36b      	b.n	80129e2 <Update_Blink+0xdea>

    case SYNCMODE:
      if(!(Status &  STOP))
 801230a:	4b73      	ldr	r3, [pc, #460]	; (80124d8 <Update_Blink+0x8e0>)
 801230c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8012310:	b29b      	uxth	r3, r3
 8012312:	f003 0301 	and.w	r3, r3, #1
 8012316:	2b00      	cmp	r3, #0
 8012318:	f040 8362 	bne.w	80129e0 <Update_Blink+0xde8>
      {
      SetColor(GRY, TCOLOR[TRG]);
 801231c:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8012320:	4619      	mov	r1, r3
 8012322:	f643 10e7 	movw	r0, #14823	; 0x39e7
 8012326:	f7fb fe4b 	bl	800dfc0 <SetColor>
      Draw_Circle_D(Twink, S_X[i]-3, TITLE_Y_POS, 11, 1, 6*4);
 801232a:	4b67      	ldr	r3, [pc, #412]	; (80124c8 <Update_Blink+0x8d0>)
 801232c:	781b      	ldrb	r3, [r3, #0]
 801232e:	b2d8      	uxtb	r0, r3
 8012330:	89bb      	ldrh	r3, [r7, #12]
 8012332:	4a6a      	ldr	r2, [pc, #424]	; (80124dc <Update_Blink+0x8e4>)
 8012334:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8012338:	b29b      	uxth	r3, r3
 801233a:	3b03      	subs	r3, #3
 801233c:	b29b      	uxth	r3, r3
 801233e:	b219      	sxth	r1, r3
 8012340:	2318      	movs	r3, #24
 8012342:	9301      	str	r3, [sp, #4]
 8012344:	2301      	movs	r3, #1
 8012346:	9300      	str	r3, [sp, #0]
 8012348:	230b      	movs	r3, #11
 801234a:	22e1      	movs	r2, #225	; 0xe1
 801234c:	f7fb ff26 	bl	800e19c <Draw_Circle_D>
      DispStr(S_X[i], TITLE_Y_POS, Twink, (char *)ptr);
 8012350:	89bb      	ldrh	r3, [r7, #12]
 8012352:	4a62      	ldr	r2, [pc, #392]	; (80124dc <Update_Blink+0x8e4>)
 8012354:	f932 0013 	ldrsh.w	r0, [r2, r3, lsl #1]
 8012358:	4b5b      	ldr	r3, [pc, #364]	; (80124c8 <Update_Blink+0x8d0>)
 801235a:	781b      	ldrb	r3, [r3, #0]
 801235c:	b2da      	uxtb	r2, r3
 801235e:	68bb      	ldr	r3, [r7, #8]
 8012360:	21e1      	movs	r1, #225	; 0xe1
 8012362:	f7fb fe45 	bl	800dff0 <DispStr>
      }
      break;
 8012366:	e33b      	b.n	80129e0 <Update_Blink+0xde8>

    case TR_MODE:
    case SENSITIVE:
      SetColor(GRY, TCOLOR[TRG]);
 8012368:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 801236c:	4619      	mov	r1, r3
 801236e:	f643 10e7 	movw	r0, #14823	; 0x39e7
 8012372:	f7fb fe25 	bl	800dfc0 <SetColor>
      Draw_Circle_D(Twink, S_X[TR_MODE]-3, TITLE_Y_POS, 11, 0, 6*8);
 8012376:	4b54      	ldr	r3, [pc, #336]	; (80124c8 <Update_Blink+0x8d0>)
 8012378:	781b      	ldrb	r3, [r3, #0]
 801237a:	b2d8      	uxtb	r0, r3
 801237c:	23dd      	movs	r3, #221	; 0xdd
 801237e:	b29b      	uxth	r3, r3
 8012380:	3b03      	subs	r3, #3
 8012382:	b29b      	uxth	r3, r3
 8012384:	b219      	sxth	r1, r3
 8012386:	2330      	movs	r3, #48	; 0x30
 8012388:	9301      	str	r3, [sp, #4]
 801238a:	2300      	movs	r3, #0
 801238c:	9300      	str	r3, [sp, #0]
 801238e:	230b      	movs	r3, #11
 8012390:	22e1      	movs	r2, #225	; 0xe1
 8012392:	f7fb ff03 	bl	800e19c <Draw_Circle_D>
      DispStr10x14(S_X[TR_MODE], TITLE_Y_POS, Twink+SYMB,(List[TR_MODE].Val?("D"):("C")));
 8012396:	20dd      	movs	r0, #221	; 0xdd
 8012398:	4b4b      	ldr	r3, [pc, #300]	; (80124c8 <Update_Blink+0x8d0>)
 801239a:	781b      	ldrb	r3, [r3, #0]
 801239c:	b2db      	uxtb	r3, r3
 801239e:	3310      	adds	r3, #16
 80123a0:	b2da      	uxtb	r2, r3
 80123a2:	4b4f      	ldr	r3, [pc, #316]	; (80124e0 <Update_Blink+0x8e8>)
 80123a4:	f9b3 3074 	ldrsh.w	r3, [r3, #116]	; 0x74
 80123a8:	2b00      	cmp	r3, #0
 80123aa:	d001      	beq.n	80123b0 <Update_Blink+0x7b8>
 80123ac:	4b4d      	ldr	r3, [pc, #308]	; (80124e4 <Update_Blink+0x8ec>)
 80123ae:	e000      	b.n	80123b2 <Update_Blink+0x7ba>
 80123b0:	4b4d      	ldr	r3, [pc, #308]	; (80124e8 <Update_Blink+0x8f0>)
 80123b2:	21e1      	movs	r1, #225	; 0xe1
 80123b4:	f7fc f884 	bl	800e4c0 <DispStr10x14>

      Tmp  = List[SENSITIVE].Val;                        // �����ز�ֵ
 80123b8:	4b49      	ldr	r3, [pc, #292]	; (80124e0 <Update_Blink+0x8e8>)
 80123ba:	f9b3 308c 	ldrsh.w	r3, [r3, #140]	; 0x8c
 80123be:	607b      	str	r3, [r7, #4]
      Tmp *= X_SCALE[Range]* Exp(V_SCALE[Range]);
 80123c0:	89fb      	ldrh	r3, [r7, #14]
 80123c2:	4a4a      	ldr	r2, [pc, #296]	; (80124ec <Update_Blink+0x8f4>)
 80123c4:	5cd3      	ldrb	r3, [r2, r3]
 80123c6:	461c      	mov	r4, r3
 80123c8:	89fb      	ldrh	r3, [r7, #14]
 80123ca:	4a49      	ldr	r2, [pc, #292]	; (80124f0 <Update_Blink+0x8f8>)
 80123cc:	5cd3      	ldrb	r3, [r2, r3]
 80123ce:	4618      	mov	r0, r3
 80123d0:	f7fe ffe6 	bl	80113a0 <Exp>
 80123d4:	4603      	mov	r3, r0
 80123d6:	fb03 f204 	mul.w	r2, r3, r4
 80123da:	687b      	ldr	r3, [r7, #4]
 80123dc:	fb02 f303 	mul.w	r3, r2, r3
 80123e0:	607b      	str	r3, [r7, #4]
      Value2Str(NumStr, Tmp, V[0], 2, UNSIGN);
 80123e2:	2301      	movs	r3, #1
 80123e4:	9300      	str	r3, [sp, #0]
 80123e6:	2302      	movs	r3, #2
 80123e8:	4a42      	ldr	r2, [pc, #264]	; (80124f4 <Update_Blink+0x8fc>)
 80123ea:	6879      	ldr	r1, [r7, #4]
 80123ec:	4835      	ldr	r0, [pc, #212]	; (80124c4 <Update_Blink+0x8cc>)
 80123ee:	f7fe fedb 	bl	80111a8 <Value2Str>
      DispStr(S_X[SENSITIVE]+9, TITLE_Y_POS, Twink,  "     ");
 80123f2:	23e7      	movs	r3, #231	; 0xe7
 80123f4:	b29b      	uxth	r3, r3
 80123f6:	3309      	adds	r3, #9
 80123f8:	b29b      	uxth	r3, r3
 80123fa:	b218      	sxth	r0, r3
 80123fc:	4b32      	ldr	r3, [pc, #200]	; (80124c8 <Update_Blink+0x8d0>)
 80123fe:	781b      	ldrb	r3, [r3, #0]
 8012400:	b2da      	uxtb	r2, r3
 8012402:	4b3d      	ldr	r3, [pc, #244]	; (80124f8 <Update_Blink+0x900>)
 8012404:	21e1      	movs	r1, #225	; 0xe1
 8012406:	f7fb fdf3 	bl	800dff0 <DispStr>
      DispStr10x14(S_X[SENSITIVE], TITLE_Y_POS, Twink+SYMB,"E");
 801240a:	20e7      	movs	r0, #231	; 0xe7
 801240c:	4b2e      	ldr	r3, [pc, #184]	; (80124c8 <Update_Blink+0x8d0>)
 801240e:	781b      	ldrb	r3, [r3, #0]
 8012410:	b2db      	uxtb	r3, r3
 8012412:	3310      	adds	r3, #16
 8012414:	b2da      	uxtb	r2, r3
 8012416:	4b39      	ldr	r3, [pc, #228]	; (80124fc <Update_Blink+0x904>)
 8012418:	21e1      	movs	r1, #225	; 0xe1
 801241a:	f7fc f851 	bl	800e4c0 <DispStr10x14>
      DispStr(S_X[SENSITIVE]+9, TITLE_Y_POS, Twink     ,  (char *)NumStr);
 801241e:	23e7      	movs	r3, #231	; 0xe7
 8012420:	b29b      	uxth	r3, r3
 8012422:	3309      	adds	r3, #9
 8012424:	b29b      	uxth	r3, r3
 8012426:	b218      	sxth	r0, r3
 8012428:	4b27      	ldr	r3, [pc, #156]	; (80124c8 <Update_Blink+0x8d0>)
 801242a:	781b      	ldrb	r3, [r3, #0]
 801242c:	b2da      	uxtb	r2, r3
 801242e:	4b25      	ldr	r3, [pc, #148]	; (80124c4 <Update_Blink+0x8cc>)
 8012430:	21e1      	movs	r1, #225	; 0xe1
 8012432:	f7fb fddd 	bl	800dff0 <DispStr>
      break;
 8012436:	e2d4      	b.n	80129e2 <Update_Blink+0xdea>

    case FITTRIGG:
      SetColor(GRY, TCOLOR[TRG]);
 8012438:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 801243c:	4619      	mov	r1, r3
 801243e:	f643 10e7 	movw	r0, #14823	; 0x39e7
 8012442:	f7fb fdbd 	bl	800dfc0 <SetColor>
      DispStr10x14(S_X[FITTRIGG], TITLE_Y_POS, PRN+SYMB,(List[FITTRIGG].Val?("F"):("B")));
 8012446:	20cf      	movs	r0, #207	; 0xcf
 8012448:	4b25      	ldr	r3, [pc, #148]	; (80124e0 <Update_Blink+0x8e8>)
 801244a:	f9b3 307c 	ldrsh.w	r3, [r3, #124]	; 0x7c
 801244e:	2b00      	cmp	r3, #0
 8012450:	d001      	beq.n	8012456 <Update_Blink+0x85e>
 8012452:	4b2b      	ldr	r3, [pc, #172]	; (8012500 <Update_Blink+0x908>)
 8012454:	e000      	b.n	8012458 <Update_Blink+0x860>
 8012456:	4b2b      	ldr	r3, [pc, #172]	; (8012504 <Update_Blink+0x90c>)
 8012458:	2210      	movs	r2, #16
 801245a:	21e1      	movs	r1, #225	; 0xe1
 801245c:	f7fc f830 	bl	800e4c0 <DispStr10x14>
      break;
 8012460:	e2bf      	b.n	80129e2 <Update_Blink+0xdea>

    case THRESHOLD:
      if(Twink) ParamTab[VTF] |=  D_HID;
 8012462:	4b19      	ldr	r3, [pc, #100]	; (80124c8 <Update_Blink+0x8d0>)
 8012464:	781b      	ldrb	r3, [r3, #0]
 8012466:	b2db      	uxtb	r3, r3
 8012468:	2b00      	cmp	r3, #0
 801246a:	d008      	beq.n	801247e <Update_Blink+0x886>
 801246c:	4b19      	ldr	r3, [pc, #100]	; (80124d4 <Update_Blink+0x8dc>)
 801246e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8012472:	f043 0301 	orr.w	r3, r3, #1
 8012476:	b21a      	sxth	r2, r3
 8012478:	4b16      	ldr	r3, [pc, #88]	; (80124d4 <Update_Blink+0x8dc>)
 801247a:	811a      	strh	r2, [r3, #8]
      else      ParamTab[VTF] &= ~D_HID;
      break;
 801247c:	e2b1      	b.n	80129e2 <Update_Blink+0xdea>
      else      ParamTab[VTF] &= ~D_HID;
 801247e:	4b15      	ldr	r3, [pc, #84]	; (80124d4 <Update_Blink+0x8dc>)
 8012480:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8012484:	f023 0301 	bic.w	r3, r3, #1
 8012488:	b21a      	sxth	r2, r3
 801248a:	4b12      	ldr	r3, [pc, #72]	; (80124d4 <Update_Blink+0x8dc>)
 801248c:	811a      	strh	r2, [r3, #8]
      break;
 801248e:	e2a8      	b.n	80129e2 <Update_Blink+0xdea>

    case TR_TYPE:
      if(Twink) ParamTab[VTF] |=  D_HID;
 8012490:	4b0d      	ldr	r3, [pc, #52]	; (80124c8 <Update_Blink+0x8d0>)
 8012492:	781b      	ldrb	r3, [r3, #0]
 8012494:	b2db      	uxtb	r3, r3
 8012496:	2b00      	cmp	r3, #0
 8012498:	d008      	beq.n	80124ac <Update_Blink+0x8b4>
 801249a:	4b0e      	ldr	r3, [pc, #56]	; (80124d4 <Update_Blink+0x8dc>)
 801249c:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80124a0:	f043 0301 	orr.w	r3, r3, #1
 80124a4:	b21a      	sxth	r2, r3
 80124a6:	4b0b      	ldr	r3, [pc, #44]	; (80124d4 <Update_Blink+0x8dc>)
 80124a8:	811a      	strh	r2, [r3, #8]
      else      ParamTab[VTF] &= ~D_HID;
      break;
 80124aa:	e29a      	b.n	80129e2 <Update_Blink+0xdea>
      else      ParamTab[VTF] &= ~D_HID;
 80124ac:	4b09      	ldr	r3, [pc, #36]	; (80124d4 <Update_Blink+0x8dc>)
 80124ae:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80124b2:	f023 0301 	bic.w	r3, r3, #1
 80124b6:	b21a      	sxth	r2, r3
 80124b8:	4b06      	ldr	r3, [pc, #24]	; (80124d4 <Update_Blink+0x8dc>)
 80124ba:	811a      	strh	r2, [r3, #8]
      break;
 80124bc:	e291      	b.n	80129e2 <Update_Blink+0xdea>
 80124be:	bf00      	nop
 80124c0:	08001d84 	.word	0x08001d84
 80124c4:	20003668 	.word	0x20003668
 80124c8:	20000770 	.word	0x20000770
 80124cc:	080009b4 	.word	0x080009b4
 80124d0:	080009d0 	.word	0x080009d0
 80124d4:	20000140 	.word	0x20000140
 80124d8:	2000079c 	.word	0x2000079c
 80124dc:	080021f8 	.word	0x080021f8
 80124e0:	20000274 	.word	0x20000274
 80124e4:	080009dc 	.word	0x080009dc
 80124e8:	080009e0 	.word	0x080009e0
 80124ec:	080021cc 	.word	0x080021cc
 80124f0:	080021a4 	.word	0x080021a4
 80124f4:	08001d9c 	.word	0x08001d9c
 80124f8:	080009e4 	.word	0x080009e4
 80124fc:	080009ec 	.word	0x080009ec
 8012500:	080009f0 	.word	0x080009f0
 8012504:	080009b0 	.word	0x080009b0

    case EXT_REFN:
      SetColor(GRY, TCOLOR[EX]);
 8012508:	f64f 031f 	movw	r3, #63519	; 0xf81f
 801250c:	4619      	mov	r1, r3
 801250e:	f643 10e7 	movw	r0, #14823	; 0x39e7
 8012512:	f7fb fd55 	bl	800dfc0 <SetColor>
      Draw_Circle_D(Twink, S_X[i]-3, TITLE_Y_POS, 11, 1, 6*5);
 8012516:	4b93      	ldr	r3, [pc, #588]	; (8012764 <Update_Blink+0xb6c>)
 8012518:	781b      	ldrb	r3, [r3, #0]
 801251a:	b2d8      	uxtb	r0, r3
 801251c:	89bb      	ldrh	r3, [r7, #12]
 801251e:	4a92      	ldr	r2, [pc, #584]	; (8012768 <Update_Blink+0xb70>)
 8012520:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8012524:	b29b      	uxth	r3, r3
 8012526:	3b03      	subs	r3, #3
 8012528:	b29b      	uxth	r3, r3
 801252a:	b219      	sxth	r1, r3
 801252c:	231e      	movs	r3, #30
 801252e:	9301      	str	r3, [sp, #4]
 8012530:	2301      	movs	r3, #1
 8012532:	9300      	str	r3, [sp, #0]
 8012534:	230b      	movs	r3, #11
 8012536:	22e1      	movs	r2, #225	; 0xe1
 8012538:	f7fb fe30 	bl	800e19c <Draw_Circle_D>
      DispStr(S_X[i], TITLE_Y_POS, Twink, (char*)(List[EXT_HIDE].Val? I[List[EXT_REFN].Val] : I[6]));
 801253c:	89bb      	ldrh	r3, [r7, #12]
 801253e:	4a8a      	ldr	r2, [pc, #552]	; (8012768 <Update_Blink+0xb70>)
 8012540:	f932 0013 	ldrsh.w	r0, [r2, r3, lsl #1]
 8012544:	4b87      	ldr	r3, [pc, #540]	; (8012764 <Update_Blink+0xb6c>)
 8012546:	781b      	ldrb	r3, [r3, #0]
 8012548:	b2da      	uxtb	r2, r3
 801254a:	4b88      	ldr	r3, [pc, #544]	; (801276c <Update_Blink+0xb74>)
 801254c:	f9b3 30e4 	ldrsh.w	r3, [r3, #228]	; 0xe4
 8012550:	2b00      	cmp	r3, #0
 8012552:	d00a      	beq.n	801256a <Update_Blink+0x972>
 8012554:	4b85      	ldr	r3, [pc, #532]	; (801276c <Update_Blink+0xb74>)
 8012556:	f9b3 30d4 	ldrsh.w	r3, [r3, #212]	; 0xd4
 801255a:	4619      	mov	r1, r3
 801255c:	460b      	mov	r3, r1
 801255e:	005b      	lsls	r3, r3, #1
 8012560:	440b      	add	r3, r1
 8012562:	005b      	lsls	r3, r3, #1
 8012564:	4982      	ldr	r1, [pc, #520]	; (8012770 <Update_Blink+0xb78>)
 8012566:	440b      	add	r3, r1
 8012568:	e000      	b.n	801256c <Update_Blink+0x974>
 801256a:	4b82      	ldr	r3, [pc, #520]	; (8012774 <Update_Blink+0xb7c>)
 801256c:	21e1      	movs	r1, #225	; 0xe1
 801256e:	f7fb fd3f 	bl	800dff0 <DispStr>
      ParamTab[P2F] &= ~D_HID;
 8012572:	4b81      	ldr	r3, [pc, #516]	; (8012778 <Update_Blink+0xb80>)
 8012574:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8012578:	f023 0301 	bic.w	r3, r3, #1
 801257c:	b21a      	sxth	r2, r3
 801257e:	4b7e      	ldr	r3, [pc, #504]	; (8012778 <Update_Blink+0xb80>)
 8012580:	805a      	strh	r2, [r3, #2]
      break;
 8012582:	e22e      	b.n	80129e2 <Update_Blink+0xdea>

    case EXT_POSI:
      if(Twink) ParamTab[P2F] |=  D_HID;
 8012584:	4b77      	ldr	r3, [pc, #476]	; (8012764 <Update_Blink+0xb6c>)
 8012586:	781b      	ldrb	r3, [r3, #0]
 8012588:	b2db      	uxtb	r3, r3
 801258a:	2b00      	cmp	r3, #0
 801258c:	d008      	beq.n	80125a0 <Update_Blink+0x9a8>
 801258e:	4b7a      	ldr	r3, [pc, #488]	; (8012778 <Update_Blink+0xb80>)
 8012590:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8012594:	f043 0301 	orr.w	r3, r3, #1
 8012598:	b21a      	sxth	r2, r3
 801259a:	4b77      	ldr	r3, [pc, #476]	; (8012778 <Update_Blink+0xb80>)
 801259c:	805a      	strh	r2, [r3, #2]
      else      ParamTab[P2F] &= ~D_HID;
      break;
 801259e:	e220      	b.n	80129e2 <Update_Blink+0xdea>
      else      ParamTab[P2F] &= ~D_HID;
 80125a0:	4b75      	ldr	r3, [pc, #468]	; (8012778 <Update_Blink+0xb80>)
 80125a2:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80125a6:	f023 0301 	bic.w	r3, r3, #1
 80125aa:	b21a      	sxth	r2, r3
 80125ac:	4b72      	ldr	r3, [pc, #456]	; (8012778 <Update_Blink+0xb80>)
 80125ae:	805a      	strh	r2, [r3, #2]
      break;
 80125b0:	e217      	b.n	80129e2 <Update_Blink+0xdea>

    case EXT_HIDE:
      SetColor(GRY, TCOLOR[EX]);
 80125b2:	f64f 031f 	movw	r3, #63519	; 0xf81f
 80125b6:	4619      	mov	r1, r3
 80125b8:	f643 10e7 	movw	r0, #14823	; 0x39e7
 80125bc:	f7fb fd00 	bl	800dfc0 <SetColor>
      Draw_Circle_D(Twink, S_X[i]-3, TITLE_Y_POS, 11, 1, 6*5);
 80125c0:	4b68      	ldr	r3, [pc, #416]	; (8012764 <Update_Blink+0xb6c>)
 80125c2:	781b      	ldrb	r3, [r3, #0]
 80125c4:	b2d8      	uxtb	r0, r3
 80125c6:	89bb      	ldrh	r3, [r7, #12]
 80125c8:	4a67      	ldr	r2, [pc, #412]	; (8012768 <Update_Blink+0xb70>)
 80125ca:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 80125ce:	b29b      	uxth	r3, r3
 80125d0:	3b03      	subs	r3, #3
 80125d2:	b29b      	uxth	r3, r3
 80125d4:	b219      	sxth	r1, r3
 80125d6:	231e      	movs	r3, #30
 80125d8:	9301      	str	r3, [sp, #4]
 80125da:	2301      	movs	r3, #1
 80125dc:	9300      	str	r3, [sp, #0]
 80125de:	230b      	movs	r3, #11
 80125e0:	22e1      	movs	r2, #225	; 0xe1
 80125e2:	f7fb fddb 	bl	800e19c <Draw_Circle_D>
      DispStr(S_X[i], TITLE_Y_POS, Twink, (char*)(List[EXT_HIDE].Val? I[List[EXT_REFN].Val] : I[6]));
 80125e6:	89bb      	ldrh	r3, [r7, #12]
 80125e8:	4a5f      	ldr	r2, [pc, #380]	; (8012768 <Update_Blink+0xb70>)
 80125ea:	f932 0013 	ldrsh.w	r0, [r2, r3, lsl #1]
 80125ee:	4b5d      	ldr	r3, [pc, #372]	; (8012764 <Update_Blink+0xb6c>)
 80125f0:	781b      	ldrb	r3, [r3, #0]
 80125f2:	b2da      	uxtb	r2, r3
 80125f4:	4b5d      	ldr	r3, [pc, #372]	; (801276c <Update_Blink+0xb74>)
 80125f6:	f9b3 30e4 	ldrsh.w	r3, [r3, #228]	; 0xe4
 80125fa:	2b00      	cmp	r3, #0
 80125fc:	d00a      	beq.n	8012614 <Update_Blink+0xa1c>
 80125fe:	4b5b      	ldr	r3, [pc, #364]	; (801276c <Update_Blink+0xb74>)
 8012600:	f9b3 30d4 	ldrsh.w	r3, [r3, #212]	; 0xd4
 8012604:	4619      	mov	r1, r3
 8012606:	460b      	mov	r3, r1
 8012608:	005b      	lsls	r3, r3, #1
 801260a:	440b      	add	r3, r1
 801260c:	005b      	lsls	r3, r3, #1
 801260e:	4958      	ldr	r1, [pc, #352]	; (8012770 <Update_Blink+0xb78>)
 8012610:	440b      	add	r3, r1
 8012612:	e000      	b.n	8012616 <Update_Blink+0xa1e>
 8012614:	4b57      	ldr	r3, [pc, #348]	; (8012774 <Update_Blink+0xb7c>)
 8012616:	21e1      	movs	r1, #225	; 0xe1
 8012618:	f7fb fcea 	bl	800dff0 <DispStr>
      ParamTab[P2F] &= ~D_HID;
 801261c:	4b56      	ldr	r3, [pc, #344]	; (8012778 <Update_Blink+0xb80>)
 801261e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8012622:	f023 0301 	bic.w	r3, r3, #1
 8012626:	b21a      	sxth	r2, r3
 8012628:	4b53      	ldr	r3, [pc, #332]	; (8012778 <Update_Blink+0xb80>)
 801262a:	805a      	strh	r2, [r3, #2]
      break;
 801262c:	e1d9      	b.n	80129e2 <Update_Blink+0xdea>

    case TPYE_OUT:
      SetColor(GRY, TCOLOR[SN]);
 801262e:	f240 531f 	movw	r3, #1311	; 0x51f
 8012632:	4619      	mov	r1, r3
 8012634:	f643 10e7 	movw	r0, #14823	; 0x39e7
 8012638:	f7fb fcc2 	bl	800dfc0 <SetColor>
      Draw_Circle_D(Twink, S_X[TPYE_OUT]-3, LABLE_Y, 11, 0, 6*9);
 801263c:	4b49      	ldr	r3, [pc, #292]	; (8012764 <Update_Blink+0xb6c>)
 801263e:	781b      	ldrb	r3, [r3, #0]
 8012640:	b2d8      	uxtb	r0, r3
 8012642:	2307      	movs	r3, #7
 8012644:	b29b      	uxth	r3, r3
 8012646:	3b03      	subs	r3, #3
 8012648:	b29b      	uxth	r3, r3
 801264a:	b219      	sxth	r1, r3
 801264c:	2336      	movs	r3, #54	; 0x36
 801264e:	9301      	str	r3, [sp, #4]
 8012650:	2300      	movs	r3, #0
 8012652:	9300      	str	r3, [sp, #0]
 8012654:	230b      	movs	r3, #11
 8012656:	2203      	movs	r2, #3
 8012658:	f7fb fda0 	bl	800e19c <Draw_Circle_D>
      DispStr(S_X[i],    LABLE_Y, Twink, "FO: ");
 801265c:	89bb      	ldrh	r3, [r7, #12]
 801265e:	4a42      	ldr	r2, [pc, #264]	; (8012768 <Update_Blink+0xb70>)
 8012660:	f932 0013 	ldrsh.w	r0, [r2, r3, lsl #1]
 8012664:	4b3f      	ldr	r3, [pc, #252]	; (8012764 <Update_Blink+0xb6c>)
 8012666:	781b      	ldrb	r3, [r3, #0]
 8012668:	b2da      	uxtb	r2, r3
 801266a:	4b44      	ldr	r3, [pc, #272]	; (801277c <Update_Blink+0xb84>)
 801266c:	2103      	movs	r1, #3
 801266e:	f7fb fcbf 	bl	800dff0 <DispStr>
      DispStr(S_X[i]+24, LABLE_Y, Twink, "     ");
 8012672:	89bb      	ldrh	r3, [r7, #12]
 8012674:	4a3c      	ldr	r2, [pc, #240]	; (8012768 <Update_Blink+0xb70>)
 8012676:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 801267a:	b29b      	uxth	r3, r3
 801267c:	3318      	adds	r3, #24
 801267e:	b29b      	uxth	r3, r3
 8012680:	b218      	sxth	r0, r3
 8012682:	4b38      	ldr	r3, [pc, #224]	; (8012764 <Update_Blink+0xb6c>)
 8012684:	781b      	ldrb	r3, [r3, #0]
 8012686:	b2da      	uxtb	r2, r3
 8012688:	4b3d      	ldr	r3, [pc, #244]	; (8012780 <Update_Blink+0xb88>)
 801268a:	2103      	movs	r1, #3
 801268c:	f7fb fcb0 	bl	800dff0 <DispStr>
      DispStr(S_X[i]+24, LABLE_Y, Twink, (char*)OT[List[i].Val]);
 8012690:	89bb      	ldrh	r3, [r7, #12]
 8012692:	4a35      	ldr	r2, [pc, #212]	; (8012768 <Update_Blink+0xb70>)
 8012694:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8012698:	b29b      	uxth	r3, r3
 801269a:	3318      	adds	r3, #24
 801269c:	b29b      	uxth	r3, r3
 801269e:	b218      	sxth	r0, r3
 80126a0:	4b30      	ldr	r3, [pc, #192]	; (8012764 <Update_Blink+0xb6c>)
 80126a2:	781b      	ldrb	r3, [r3, #0]
 80126a4:	b2da      	uxtb	r2, r3
 80126a6:	89bb      	ldrh	r3, [r7, #12]
 80126a8:	4930      	ldr	r1, [pc, #192]	; (801276c <Update_Blink+0xb74>)
 80126aa:	00db      	lsls	r3, r3, #3
 80126ac:	440b      	add	r3, r1
 80126ae:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80126b2:	4619      	mov	r1, r3
 80126b4:	460b      	mov	r3, r1
 80126b6:	005b      	lsls	r3, r3, #1
 80126b8:	440b      	add	r3, r1
 80126ba:	005b      	lsls	r3, r3, #1
 80126bc:	4931      	ldr	r1, [pc, #196]	; (8012784 <Update_Blink+0xb8c>)
 80126be:	440b      	add	r3, r1
 80126c0:	2103      	movs	r1, #3
 80126c2:	f7fb fc95 	bl	800dff0 <DispStr>
      break;
 80126c6:	e18c      	b.n	80129e2 <Update_Blink+0xdea>

    case FREQ_OUT:
      SetColor(GRY, TCOLOR[SN]);
 80126c8:	f240 531f 	movw	r3, #1311	; 0x51f
 80126cc:	4619      	mov	r1, r3
 80126ce:	f643 10e7 	movw	r0, #14823	; 0x39e7
 80126d2:	f7fb fc75 	bl	800dfc0 <SetColor>
      Draw_Circle_D(Twink, S_X[FREQ_OUT]-3, LABLE_Y, 11, 0, 6*9);
 80126d6:	4b23      	ldr	r3, [pc, #140]	; (8012764 <Update_Blink+0xb6c>)
 80126d8:	781b      	ldrb	r3, [r3, #0]
 80126da:	b2d8      	uxtb	r0, r3
 80126dc:	2307      	movs	r3, #7
 80126de:	b29b      	uxth	r3, r3
 80126e0:	3b03      	subs	r3, #3
 80126e2:	b29b      	uxth	r3, r3
 80126e4:	b219      	sxth	r1, r3
 80126e6:	2336      	movs	r3, #54	; 0x36
 80126e8:	9301      	str	r3, [sp, #4]
 80126ea:	2300      	movs	r3, #0
 80126ec:	9300      	str	r3, [sp, #0]
 80126ee:	230b      	movs	r3, #11
 80126f0:	2203      	movs	r2, #3
 80126f2:	f7fb fd53 	bl	800e19c <Draw_Circle_D>
      DispStr(S_X[i],    LABLE_Y, Twink, "FO: ");
 80126f6:	89bb      	ldrh	r3, [r7, #12]
 80126f8:	4a1b      	ldr	r2, [pc, #108]	; (8012768 <Update_Blink+0xb70>)
 80126fa:	f932 0013 	ldrsh.w	r0, [r2, r3, lsl #1]
 80126fe:	4b19      	ldr	r3, [pc, #100]	; (8012764 <Update_Blink+0xb6c>)
 8012700:	781b      	ldrb	r3, [r3, #0]
 8012702:	b2da      	uxtb	r2, r3
 8012704:	4b1d      	ldr	r3, [pc, #116]	; (801277c <Update_Blink+0xb84>)
 8012706:	2103      	movs	r1, #3
 8012708:	f7fb fc72 	bl	800dff0 <DispStr>
      DispStr(S_X[i]+24, LABLE_Y, Twink, "     ");
 801270c:	89bb      	ldrh	r3, [r7, #12]
 801270e:	4a16      	ldr	r2, [pc, #88]	; (8012768 <Update_Blink+0xb70>)
 8012710:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8012714:	b29b      	uxth	r3, r3
 8012716:	3318      	adds	r3, #24
 8012718:	b29b      	uxth	r3, r3
 801271a:	b218      	sxth	r0, r3
 801271c:	4b11      	ldr	r3, [pc, #68]	; (8012764 <Update_Blink+0xb6c>)
 801271e:	781b      	ldrb	r3, [r3, #0]
 8012720:	b2da      	uxtb	r2, r3
 8012722:	4b17      	ldr	r3, [pc, #92]	; (8012780 <Update_Blink+0xb88>)
 8012724:	2103      	movs	r1, #3
 8012726:	f7fb fc63 	bl	800dff0 <DispStr>
      DispStr(S_X[i]+24, LABLE_Y, Twink, (char*)Q[List[i].Val]);
 801272a:	89bb      	ldrh	r3, [r7, #12]
 801272c:	4a0e      	ldr	r2, [pc, #56]	; (8012768 <Update_Blink+0xb70>)
 801272e:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8012732:	b29b      	uxth	r3, r3
 8012734:	3318      	adds	r3, #24
 8012736:	b29b      	uxth	r3, r3
 8012738:	b218      	sxth	r0, r3
 801273a:	4b0a      	ldr	r3, [pc, #40]	; (8012764 <Update_Blink+0xb6c>)
 801273c:	781b      	ldrb	r3, [r3, #0]
 801273e:	b2da      	uxtb	r2, r3
 8012740:	89bb      	ldrh	r3, [r7, #12]
 8012742:	490a      	ldr	r1, [pc, #40]	; (801276c <Update_Blink+0xb74>)
 8012744:	00db      	lsls	r3, r3, #3
 8012746:	440b      	add	r3, r1
 8012748:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801274c:	4619      	mov	r1, r3
 801274e:	460b      	mov	r3, r1
 8012750:	005b      	lsls	r3, r3, #1
 8012752:	440b      	add	r3, r1
 8012754:	005b      	lsls	r3, r3, #1
 8012756:	490c      	ldr	r1, [pc, #48]	; (8012788 <Update_Blink+0xb90>)
 8012758:	440b      	add	r3, r1
 801275a:	2103      	movs	r1, #3
 801275c:	f7fb fc48 	bl	800dff0 <DispStr>
      break;
 8012760:	e13f      	b.n	80129e2 <Update_Blink+0xdea>
 8012762:	bf00      	nop
 8012764:	20000770 	.word	0x20000770
 8012768:	080021f8 	.word	0x080021f8
 801276c:	20000274 	.word	0x20000274
 8012770:	08001d24 	.word	0x08001d24
 8012774:	08001d48 	.word	0x08001d48
 8012778:	20000140 	.word	0x20000140
 801277c:	080009f4 	.word	0x080009f4
 8012780:	080009e4 	.word	0x080009e4
 8012784:	08001dec 	.word	0x08001dec
 8012788:	08001f34 	.word	0x08001f34

    case FREQ_DUT:
      SetColor(GRY, TCOLOR[SN]);
 801278c:	f240 531f 	movw	r3, #1311	; 0x51f
 8012790:	4619      	mov	r1, r3
 8012792:	f643 10e7 	movw	r0, #14823	; 0x39e7
 8012796:	f7fb fc13 	bl	800dfc0 <SetColor>
      Value2Str(NumStr, List[i].Val*10, List[i].PTR, 2, UNSIGN);
 801279a:	89bb      	ldrh	r3, [r7, #12]
 801279c:	4a96      	ldr	r2, [pc, #600]	; (80129f8 <Update_Blink+0xe00>)
 801279e:	00db      	lsls	r3, r3, #3
 80127a0:	4413      	add	r3, r2
 80127a2:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80127a6:	461a      	mov	r2, r3
 80127a8:	4613      	mov	r3, r2
 80127aa:	009b      	lsls	r3, r3, #2
 80127ac:	4413      	add	r3, r2
 80127ae:	005b      	lsls	r3, r3, #1
 80127b0:	4619      	mov	r1, r3
 80127b2:	89bb      	ldrh	r3, [r7, #12]
 80127b4:	4a90      	ldr	r2, [pc, #576]	; (80129f8 <Update_Blink+0xe00>)
 80127b6:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 80127ba:	2301      	movs	r3, #1
 80127bc:	9300      	str	r3, [sp, #0]
 80127be:	2302      	movs	r3, #2
 80127c0:	488e      	ldr	r0, [pc, #568]	; (80129fc <Update_Blink+0xe04>)
 80127c2:	f7fe fcf1 	bl	80111a8 <Value2Str>
      Draw_Circle_D(Twink, S_X[FREQ_DUT]-3, LABLE_Y, 11, 0, 6*9);
 80127c6:	4b8e      	ldr	r3, [pc, #568]	; (8012a00 <Update_Blink+0xe08>)
 80127c8:	781b      	ldrb	r3, [r3, #0]
 80127ca:	b2d8      	uxtb	r0, r3
 80127cc:	2307      	movs	r3, #7
 80127ce:	b29b      	uxth	r3, r3
 80127d0:	3b03      	subs	r3, #3
 80127d2:	b29b      	uxth	r3, r3
 80127d4:	b219      	sxth	r1, r3
 80127d6:	2336      	movs	r3, #54	; 0x36
 80127d8:	9301      	str	r3, [sp, #4]
 80127da:	2300      	movs	r3, #0
 80127dc:	9300      	str	r3, [sp, #0]
 80127de:	230b      	movs	r3, #11
 80127e0:	2203      	movs	r2, #3
 80127e2:	f7fb fcdb 	bl	800e19c <Draw_Circle_D>
      DispStr(S_X[i],    LABLE_Y, Twink, "Duty: ");
 80127e6:	89bb      	ldrh	r3, [r7, #12]
 80127e8:	4a86      	ldr	r2, [pc, #536]	; (8012a04 <Update_Blink+0xe0c>)
 80127ea:	f932 0013 	ldrsh.w	r0, [r2, r3, lsl #1]
 80127ee:	4b84      	ldr	r3, [pc, #528]	; (8012a00 <Update_Blink+0xe08>)
 80127f0:	781b      	ldrb	r3, [r3, #0]
 80127f2:	b2da      	uxtb	r2, r3
 80127f4:	4b84      	ldr	r3, [pc, #528]	; (8012a08 <Update_Blink+0xe10>)
 80127f6:	2103      	movs	r1, #3
 80127f8:	f7fb fbfa 	bl	800dff0 <DispStr>
      DispStr(S_X[i]+36, LABLE_Y, Twink, "   ");
 80127fc:	89bb      	ldrh	r3, [r7, #12]
 80127fe:	4a81      	ldr	r2, [pc, #516]	; (8012a04 <Update_Blink+0xe0c>)
 8012800:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8012804:	b29b      	uxth	r3, r3
 8012806:	3324      	adds	r3, #36	; 0x24
 8012808:	b29b      	uxth	r3, r3
 801280a:	b218      	sxth	r0, r3
 801280c:	4b7c      	ldr	r3, [pc, #496]	; (8012a00 <Update_Blink+0xe08>)
 801280e:	781b      	ldrb	r3, [r3, #0]
 8012810:	b2da      	uxtb	r2, r3
 8012812:	4b7e      	ldr	r3, [pc, #504]	; (8012a0c <Update_Blink+0xe14>)
 8012814:	2103      	movs	r1, #3
 8012816:	f7fb fbeb 	bl	800dff0 <DispStr>
      DispStr(S_X[i]+36, LABLE_Y, Twink, (char *)NumStr);
 801281a:	89bb      	ldrh	r3, [r7, #12]
 801281c:	4a79      	ldr	r2, [pc, #484]	; (8012a04 <Update_Blink+0xe0c>)
 801281e:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8012822:	b29b      	uxth	r3, r3
 8012824:	3324      	adds	r3, #36	; 0x24
 8012826:	b29b      	uxth	r3, r3
 8012828:	b218      	sxth	r0, r3
 801282a:	4b75      	ldr	r3, [pc, #468]	; (8012a00 <Update_Blink+0xe08>)
 801282c:	781b      	ldrb	r3, [r3, #0]
 801282e:	b2da      	uxtb	r2, r3
 8012830:	4b72      	ldr	r3, [pc, #456]	; (80129fc <Update_Blink+0xe04>)
 8012832:	2103      	movs	r1, #3
 8012834:	f7fb fbdc 	bl	800dff0 <DispStr>
      break;
 8012838:	e0d3      	b.n	80129e2 <Update_Blink+0xdea>

    case AUTO_CAL:
      if(Twink) ParamTab[P1F] |=  W_HID;
 801283a:	4b71      	ldr	r3, [pc, #452]	; (8012a00 <Update_Blink+0xe08>)
 801283c:	781b      	ldrb	r3, [r3, #0]
 801283e:	b2db      	uxtb	r3, r3
 8012840:	2b00      	cmp	r3, #0
 8012842:	d008      	beq.n	8012856 <Update_Blink+0xc5e>
 8012844:	4b72      	ldr	r3, [pc, #456]	; (8012a10 <Update_Blink+0xe18>)
 8012846:	f9b3 3000 	ldrsh.w	r3, [r3]
 801284a:	f043 0304 	orr.w	r3, r3, #4
 801284e:	b21a      	sxth	r2, r3
 8012850:	4b6f      	ldr	r3, [pc, #444]	; (8012a10 <Update_Blink+0xe18>)
 8012852:	801a      	strh	r2, [r3, #0]
 8012854:	e007      	b.n	8012866 <Update_Blink+0xc6e>
      else      ParamTab[P1F] &= ~W_HID;
 8012856:	4b6e      	ldr	r3, [pc, #440]	; (8012a10 <Update_Blink+0xe18>)
 8012858:	f9b3 3000 	ldrsh.w	r3, [r3]
 801285c:	f023 0304 	bic.w	r3, r3, #4
 8012860:	b21a      	sxth	r2, r3
 8012862:	4b6b      	ldr	r3, [pc, #428]	; (8012a10 <Update_Blink+0xe18>)
 8012864:	801a      	strh	r2, [r3, #0]

      SetColor(GRY, TCOLOR[ST]);
 8012866:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 801286a:	4619      	mov	r1, r3
 801286c:	f643 10e7 	movw	r0, #14823	; 0x39e7
 8012870:	f7fb fba6 	bl	800dfc0 <SetColor>
      Draw_Circle_D(Twink, S_X[i]-3, LABLE_Y, 11, 0, 6*9);
 8012874:	4b62      	ldr	r3, [pc, #392]	; (8012a00 <Update_Blink+0xe08>)
 8012876:	781b      	ldrb	r3, [r3, #0]
 8012878:	b2d8      	uxtb	r0, r3
 801287a:	89bb      	ldrh	r3, [r7, #12]
 801287c:	4a61      	ldr	r2, [pc, #388]	; (8012a04 <Update_Blink+0xe0c>)
 801287e:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8012882:	b29b      	uxth	r3, r3
 8012884:	3b03      	subs	r3, #3
 8012886:	b29b      	uxth	r3, r3
 8012888:	b219      	sxth	r1, r3
 801288a:	2336      	movs	r3, #54	; 0x36
 801288c:	9301      	str	r3, [sp, #4]
 801288e:	2300      	movs	r3, #0
 8012890:	9300      	str	r3, [sp, #0]
 8012892:	230b      	movs	r3, #11
 8012894:	2203      	movs	r2, #3
 8012896:	f7fb fc81 	bl	800e19c <Draw_Circle_D>
      DispStr( S_X[i]+0, LABLE_Y, Twink+PRN,  "Press:   ");
 801289a:	89bb      	ldrh	r3, [r7, #12]
 801289c:	4a59      	ldr	r2, [pc, #356]	; (8012a04 <Update_Blink+0xe0c>)
 801289e:	f932 0013 	ldrsh.w	r0, [r2, r3, lsl #1]
 80128a2:	4b57      	ldr	r3, [pc, #348]	; (8012a00 <Update_Blink+0xe08>)
 80128a4:	781b      	ldrb	r3, [r3, #0]
 80128a6:	b2da      	uxtb	r2, r3
 80128a8:	4b5a      	ldr	r3, [pc, #360]	; (8012a14 <Update_Blink+0xe1c>)
 80128aa:	2103      	movs	r1, #3
 80128ac:	f7fb fba0 	bl	800dff0 <DispStr>
      DispStr(S_X[i]+40, LABLE_Y, Twink+SYMB, "{|");//������ͣͼ��
 80128b0:	89bb      	ldrh	r3, [r7, #12]
 80128b2:	4a54      	ldr	r2, [pc, #336]	; (8012a04 <Update_Blink+0xe0c>)
 80128b4:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 80128b8:	b29b      	uxth	r3, r3
 80128ba:	3328      	adds	r3, #40	; 0x28
 80128bc:	b29b      	uxth	r3, r3
 80128be:	b218      	sxth	r0, r3
 80128c0:	4b4f      	ldr	r3, [pc, #316]	; (8012a00 <Update_Blink+0xe08>)
 80128c2:	781b      	ldrb	r3, [r3, #0]
 80128c4:	b2db      	uxtb	r3, r3
 80128c6:	3310      	adds	r3, #16
 80128c8:	b2da      	uxtb	r2, r3
 80128ca:	4b53      	ldr	r3, [pc, #332]	; (8012a18 <Update_Blink+0xe20>)
 80128cc:	2103      	movs	r1, #3
 80128ce:	f7fb fb8f 	bl	800dff0 <DispStr>
      break;
 80128d2:	e086      	b.n	80129e2 <Update_Blink+0xdea>

    case RESTORE:
      SetColor(GRY, TCOLOR[ST]);
 80128d4:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 80128d8:	4619      	mov	r1, r3
 80128da:	f643 10e7 	movw	r0, #14823	; 0x39e7
 80128de:	f7fb fb6f 	bl	800dfc0 <SetColor>
      Draw_Circle_D(Twink, S_X[i]-3, LABLE_Y, 11, 0, 6*9);
 80128e2:	4b47      	ldr	r3, [pc, #284]	; (8012a00 <Update_Blink+0xe08>)
 80128e4:	781b      	ldrb	r3, [r3, #0]
 80128e6:	b2d8      	uxtb	r0, r3
 80128e8:	89bb      	ldrh	r3, [r7, #12]
 80128ea:	4a46      	ldr	r2, [pc, #280]	; (8012a04 <Update_Blink+0xe0c>)
 80128ec:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 80128f0:	b29b      	uxth	r3, r3
 80128f2:	3b03      	subs	r3, #3
 80128f4:	b29b      	uxth	r3, r3
 80128f6:	b219      	sxth	r1, r3
 80128f8:	2336      	movs	r3, #54	; 0x36
 80128fa:	9301      	str	r3, [sp, #4]
 80128fc:	2300      	movs	r3, #0
 80128fe:	9300      	str	r3, [sp, #0]
 8012900:	230b      	movs	r3, #11
 8012902:	2203      	movs	r2, #3
 8012904:	f7fb fc4a 	bl	800e19c <Draw_Circle_D>
      DispStr( S_X[i]+0, LABLE_Y, Twink+PRN,  "Press:   ");
 8012908:	89bb      	ldrh	r3, [r7, #12]
 801290a:	4a3e      	ldr	r2, [pc, #248]	; (8012a04 <Update_Blink+0xe0c>)
 801290c:	f932 0013 	ldrsh.w	r0, [r2, r3, lsl #1]
 8012910:	4b3b      	ldr	r3, [pc, #236]	; (8012a00 <Update_Blink+0xe08>)
 8012912:	781b      	ldrb	r3, [r3, #0]
 8012914:	b2da      	uxtb	r2, r3
 8012916:	4b3f      	ldr	r3, [pc, #252]	; (8012a14 <Update_Blink+0xe1c>)
 8012918:	2103      	movs	r1, #3
 801291a:	f7fb fb69 	bl	800dff0 <DispStr>
      DispStr( S_X[i]+40, LABLE_Y, Twink+SYMB, "{|");//������ͣͼ��
 801291e:	89bb      	ldrh	r3, [r7, #12]
 8012920:	4a38      	ldr	r2, [pc, #224]	; (8012a04 <Update_Blink+0xe0c>)
 8012922:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8012926:	b29b      	uxth	r3, r3
 8012928:	3328      	adds	r3, #40	; 0x28
 801292a:	b29b      	uxth	r3, r3
 801292c:	b218      	sxth	r0, r3
 801292e:	4b34      	ldr	r3, [pc, #208]	; (8012a00 <Update_Blink+0xe08>)
 8012930:	781b      	ldrb	r3, [r3, #0]
 8012932:	b2db      	uxtb	r3, r3
 8012934:	3310      	adds	r3, #16
 8012936:	b2da      	uxtb	r2, r3
 8012938:	4b37      	ldr	r3, [pc, #220]	; (8012a18 <Update_Blink+0xe20>)
 801293a:	2103      	movs	r1, #3
 801293c:	f7fb fb58 	bl	800dff0 <DispStr>
      break;
 8012940:	e04f      	b.n	80129e2 <Update_Blink+0xdea>

    case STANDBY:
      SetColor(GRY, TCOLOR[ST]);
 8012942:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8012946:	4619      	mov	r1, r3
 8012948:	f643 10e7 	movw	r0, #14823	; 0x39e7
 801294c:	f7fb fb38 	bl	800dfc0 <SetColor>
      Value2Str(NumStr, List[STANDBY].Val, NSTR[0], 2, UNSIGN);
 8012950:	4b29      	ldr	r3, [pc, #164]	; (80129f8 <Update_Blink+0xe00>)
 8012952:	f9b3 314c 	ldrsh.w	r3, [r3, #332]	; 0x14c
 8012956:	4619      	mov	r1, r3
 8012958:	2301      	movs	r3, #1
 801295a:	9300      	str	r3, [sp, #0]
 801295c:	2302      	movs	r3, #2
 801295e:	4a2f      	ldr	r2, [pc, #188]	; (8012a1c <Update_Blink+0xe24>)
 8012960:	4826      	ldr	r0, [pc, #152]	; (80129fc <Update_Blink+0xe04>)
 8012962:	f7fe fc21 	bl	80111a8 <Value2Str>
      Draw_Circle_D(Twink, S_X[i]-3, LABLE_Y, 11, 0, 6*9);
 8012966:	4b26      	ldr	r3, [pc, #152]	; (8012a00 <Update_Blink+0xe08>)
 8012968:	781b      	ldrb	r3, [r3, #0]
 801296a:	b2d8      	uxtb	r0, r3
 801296c:	89bb      	ldrh	r3, [r7, #12]
 801296e:	4a25      	ldr	r2, [pc, #148]	; (8012a04 <Update_Blink+0xe0c>)
 8012970:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8012974:	b29b      	uxth	r3, r3
 8012976:	3b03      	subs	r3, #3
 8012978:	b29b      	uxth	r3, r3
 801297a:	b219      	sxth	r1, r3
 801297c:	2336      	movs	r3, #54	; 0x36
 801297e:	9301      	str	r3, [sp, #4]
 8012980:	2300      	movs	r3, #0
 8012982:	9300      	str	r3, [sp, #0]
 8012984:	230b      	movs	r3, #11
 8012986:	2203      	movs	r2, #3
 8012988:	f7fb fc08 	bl	800e19c <Draw_Circle_D>
      DispStr(S_X[i],    LABLE_Y, Twink+PRN,  " ");
 801298c:	89bb      	ldrh	r3, [r7, #12]
 801298e:	4a1d      	ldr	r2, [pc, #116]	; (8012a04 <Update_Blink+0xe0c>)
 8012990:	f932 0013 	ldrsh.w	r0, [r2, r3, lsl #1]
 8012994:	4b1a      	ldr	r3, [pc, #104]	; (8012a00 <Update_Blink+0xe08>)
 8012996:	781b      	ldrb	r3, [r3, #0]
 8012998:	b2da      	uxtb	r2, r3
 801299a:	4b21      	ldr	r3, [pc, #132]	; (8012a20 <Update_Blink+0xe28>)
 801299c:	2103      	movs	r1, #3
 801299e:	f7fb fb27 	bl	800dff0 <DispStr>
      DispStr(S_X[i]+6, LABLE_Y, Twink+PRN,  (char *)NumStr);
 80129a2:	89bb      	ldrh	r3, [r7, #12]
 80129a4:	4a17      	ldr	r2, [pc, #92]	; (8012a04 <Update_Blink+0xe0c>)
 80129a6:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 80129aa:	b29b      	uxth	r3, r3
 80129ac:	3306      	adds	r3, #6
 80129ae:	b29b      	uxth	r3, r3
 80129b0:	b218      	sxth	r0, r3
 80129b2:	4b13      	ldr	r3, [pc, #76]	; (8012a00 <Update_Blink+0xe08>)
 80129b4:	781b      	ldrb	r3, [r3, #0]
 80129b6:	b2da      	uxtb	r2, r3
 80129b8:	4b10      	ldr	r3, [pc, #64]	; (80129fc <Update_Blink+0xe04>)
 80129ba:	2103      	movs	r1, #3
 80129bc:	f7fb fb18 	bl	800dff0 <DispStr>
      DispStr(S_X[i]+30, LABLE_Y, Twink+PRN,  "min ");
 80129c0:	89bb      	ldrh	r3, [r7, #12]
 80129c2:	4a10      	ldr	r2, [pc, #64]	; (8012a04 <Update_Blink+0xe0c>)
 80129c4:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 80129c8:	b29b      	uxth	r3, r3
 80129ca:	331e      	adds	r3, #30
 80129cc:	b29b      	uxth	r3, r3
 80129ce:	b218      	sxth	r0, r3
 80129d0:	4b0b      	ldr	r3, [pc, #44]	; (8012a00 <Update_Blink+0xe08>)
 80129d2:	781b      	ldrb	r3, [r3, #0]
 80129d4:	b2da      	uxtb	r2, r3
 80129d6:	4b13      	ldr	r3, [pc, #76]	; (8012a24 <Update_Blink+0xe2c>)
 80129d8:	2103      	movs	r1, #3
 80129da:	f7fb fb09 	bl	800dff0 <DispStr>
      break;
 80129de:	e000      	b.n	80129e2 <Update_Blink+0xdea>
      break;
 80129e0:	bf00      	nop

    }
    if(i != V0_POSI)  ParamTab[P1F]   = L_HID ;//0513
 80129e2:	89bb      	ldrh	r3, [r7, #12]
 80129e4:	2b03      	cmp	r3, #3
 80129e6:	d002      	beq.n	80129ee <Update_Blink+0xdf6>
 80129e8:	4b09      	ldr	r3, [pc, #36]	; (8012a10 <Update_Blink+0xe18>)
 80129ea:	2202      	movs	r2, #2
 80129ec:	801a      	strh	r2, [r3, #0]
  }
}
 80129ee:	bf00      	nop
 80129f0:	3714      	adds	r7, #20
 80129f2:	46bd      	mov	sp, r7
 80129f4:	bd90      	pop	{r4, r7, pc}
 80129f6:	bf00      	nop
 80129f8:	20000274 	.word	0x20000274
 80129fc:	20003668 	.word	0x20003668
 8012a00:	20000770 	.word	0x20000770
 8012a04:	080021f8 	.word	0x080021f8
 8012a08:	080009fc 	.word	0x080009fc
 8012a0c:	08000a04 	.word	0x08000a04
 8012a10:	20000140 	.word	0x20000140
 8012a14:	08000a08 	.word	0x08000a08
 8012a18:	08000a14 	.word	0x08000a14
 8012a1c:	20000524 	.word	0x20000524
 8012a20:	08000a18 	.word	0x08000a18
 8012a24:	08000a1c 	.word	0x08000a1c

08012a28 <Update_Detail>:
/*******************************************************************************
 Update_Detail:
*******************************************************************************/
void Update_Detail(void)
{
 8012a28:	b590      	push	{r4, r7, lr}
 8012a2a:	b089      	sub	sp, #36	; 0x24
 8012a2c:	af02      	add	r7, sp, #8
  long scale = 0;
 8012a2e:	2300      	movs	r3, #0
 8012a30:	60bb      	str	r3, [r7, #8]
  int  Ak = (KgA[KindA+(StateA?1:0)]*4)/GK[GainA];
 8012a32:	4ba9      	ldr	r3, [pc, #676]	; (8012cd8 <Update_Detail+0x2b0>)
 8012a34:	681a      	ldr	r2, [r3, #0]
 8012a36:	4ba9      	ldr	r3, [pc, #676]	; (8012cdc <Update_Detail+0x2b4>)
 8012a38:	f9b3 3000 	ldrsh.w	r3, [r3]
 8012a3c:	4619      	mov	r1, r3
 8012a3e:	4ba8      	ldr	r3, [pc, #672]	; (8012ce0 <Update_Detail+0x2b8>)
 8012a40:	f9b3 3000 	ldrsh.w	r3, [r3]
 8012a44:	2b00      	cmp	r3, #0
 8012a46:	bf14      	ite	ne
 8012a48:	2301      	movne	r3, #1
 8012a4a:	2300      	moveq	r3, #0
 8012a4c:	b2db      	uxtb	r3, r3
 8012a4e:	440b      	add	r3, r1
 8012a50:	005b      	lsls	r3, r3, #1
 8012a52:	4413      	add	r3, r2
 8012a54:	f9b3 3000 	ldrsh.w	r3, [r3]
 8012a58:	009b      	lsls	r3, r3, #2
 8012a5a:	4aa2      	ldr	r2, [pc, #648]	; (8012ce4 <Update_Detail+0x2bc>)
 8012a5c:	f9b2 2000 	ldrsh.w	r2, [r2]
 8012a60:	4611      	mov	r1, r2
 8012a62:	4aa1      	ldr	r2, [pc, #644]	; (8012ce8 <Update_Detail+0x2c0>)
 8012a64:	5c52      	ldrb	r2, [r2, r1]
 8012a66:	fb93 f3f2 	sdiv	r3, r3, r2
 8012a6a:	607b      	str	r3, [r7, #4]
  unsigned short i, k = HighT+LowT;
 8012a6c:	4b9f      	ldr	r3, [pc, #636]	; (8012cec <Update_Detail+0x2c4>)
 8012a6e:	681b      	ldr	r3, [r3, #0]
 8012a70:	b29a      	uxth	r2, r3
 8012a72:	4b9f      	ldr	r3, [pc, #636]	; (8012cf0 <Update_Detail+0x2c8>)
 8012a74:	681b      	ldr	r3, [r3, #0]
 8012a76:	b29b      	uxth	r3, r3
 8012a78:	4413      	add	r3, r2
 8012a7a:	807b      	strh	r3, [r7, #2]
  long Tmp = 0;
 8012a7c:	2300      	movs	r3, #0
 8012a7e:	613b      	str	r3, [r7, #16]
  short Range = List[Y_RANGES].Val + 10*List[PROBEATT].Val;
 8012a80:	4b9c      	ldr	r3, [pc, #624]	; (8012cf4 <Update_Detail+0x2cc>)
 8012a82:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8012a86:	b29a      	uxth	r2, r3
 8012a88:	4b9a      	ldr	r3, [pc, #616]	; (8012cf4 <Update_Detail+0x2cc>)
 8012a8a:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8012a8e:	b29b      	uxth	r3, r3
 8012a90:	4619      	mov	r1, r3
 8012a92:	0089      	lsls	r1, r1, #2
 8012a94:	440b      	add	r3, r1
 8012a96:	005b      	lsls	r3, r3, #1
 8012a98:	b29b      	uxth	r3, r3
 8012a9a:	4413      	add	r3, r2
 8012a9c:	b29b      	uxth	r3, r3
 8012a9e:	803b      	strh	r3, [r7, #0]
  unsigned long FTmp;

  for(i=Y_RANGES; i<=STANDBY; i++){
 8012aa0:	2300      	movs	r3, #0
 8012aa2:	82fb      	strh	r3, [r7, #22]
 8012aa4:	f000 bfb3 	b.w	8013a0e <Update_Detail+0xfe6>
    if(i==FREQUENC)
 8012aa8:	8afb      	ldrh	r3, [r7, #22]
 8012aaa:	2b13      	cmp	r3, #19
 8012aac:	d118      	bne.n	8012ae0 <Update_Detail+0xb8>
    {
      if(Freq_Cnt > 10){
 8012aae:	4b92      	ldr	r3, [pc, #584]	; (8012cf8 <Update_Detail+0x2d0>)
 8012ab0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8012ab4:	2b0a      	cmp	r3, #10
 8012ab6:	dd0a      	ble.n	8012ace <Update_Detail+0xa6>
        Freq_Cnt = 0;
 8012ab8:	4b8f      	ldr	r3, [pc, #572]	; (8012cf8 <Update_Detail+0x2d0>)
 8012aba:	2200      	movs	r2, #0
 8012abc:	801a      	strh	r2, [r3, #0]
        Freq_Flag |= UPD;
 8012abe:	4b8f      	ldr	r3, [pc, #572]	; (8012cfc <Update_Detail+0x2d4>)
 8012ac0:	781b      	ldrb	r3, [r3, #0]
 8012ac2:	f043 0320 	orr.w	r3, r3, #32
 8012ac6:	b2da      	uxtb	r2, r3
 8012ac8:	4b8c      	ldr	r3, [pc, #560]	; (8012cfc <Update_Detail+0x2d4>)
 8012aca:	701a      	strb	r2, [r3, #0]
 8012acc:	e008      	b.n	8012ae0 <Update_Detail+0xb8>
      }
      else Freq_Cnt++;
 8012ace:	4b8a      	ldr	r3, [pc, #552]	; (8012cf8 <Update_Detail+0x2d0>)
 8012ad0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8012ad4:	b29b      	uxth	r3, r3
 8012ad6:	3301      	adds	r3, #1
 8012ad8:	b29b      	uxth	r3, r3
 8012ada:	b21a      	sxth	r2, r3
 8012adc:	4b86      	ldr	r3, [pc, #536]	; (8012cf8 <Update_Detail+0x2d0>)
 8012ade:	801a      	strh	r2, [r3, #0]
    }

    if(List[i].Flg & UPD){
 8012ae0:	8afb      	ldrh	r3, [r7, #22]
 8012ae2:	4a84      	ldr	r2, [pc, #528]	; (8012cf4 <Update_Detail+0x2cc>)
 8012ae4:	00db      	lsls	r3, r3, #3
 8012ae6:	4413      	add	r3, r2
 8012ae8:	799b      	ldrb	r3, [r3, #6]
 8012aea:	f003 0320 	and.w	r3, r3, #32
 8012aee:	2b00      	cmp	r3, #0
 8012af0:	f000 878a 	beq.w	8013a08 <Update_Detail+0xfe0>
      List[i].Flg &= ~UPD;
 8012af4:	8afb      	ldrh	r3, [r7, #22]
 8012af6:	4a7f      	ldr	r2, [pc, #508]	; (8012cf4 <Update_Detail+0x2cc>)
 8012af8:	00db      	lsls	r3, r3, #3
 8012afa:	4413      	add	r3, r2
 8012afc:	799a      	ldrb	r2, [r3, #6]
 8012afe:	8afb      	ldrh	r3, [r7, #22]
 8012b00:	f022 0220 	bic.w	r2, r2, #32
 8012b04:	b2d1      	uxtb	r1, r2
 8012b06:	4a7b      	ldr	r2, [pc, #492]	; (8012cf4 <Update_Detail+0x2cc>)
 8012b08:	00db      	lsls	r3, r3, #3
 8012b0a:	4413      	add	r3, r2
 8012b0c:	460a      	mov	r2, r1
 8012b0e:	719a      	strb	r2, [r3, #6]
      switch (i){
 8012b10:	8afb      	ldrh	r3, [r7, #22]
 8012b12:	2b29      	cmp	r3, #41	; 0x29
 8012b14:	f200 8739 	bhi.w	801398a <Update_Detail+0xf62>
 8012b18:	a201      	add	r2, pc, #4	; (adr r2, 8012b20 <Update_Detail+0xf8>)
 8012b1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012b1e:	bf00      	nop
 8012b20:	08012bc9 	.word	0x08012bc9
 8012b24:	08012bc9 	.word	0x08012bc9
 8012b28:	08012bc9 	.word	0x08012bc9
 8012b2c:	08012bc9 	.word	0x08012bc9
 8012b30:	08012bc9 	.word	0x08012bc9
 8012b34:	08012bc9 	.word	0x08012bc9
 8012b38:	08012bc9 	.word	0x08012bc9
 8012b3c:	080133d1 	.word	0x080133d1
 8012b40:	080133d1 	.word	0x080133d1
 8012b44:	080133d1 	.word	0x080133d1
 8012b48:	080133d1 	.word	0x080133d1
 8012b4c:	080133d1 	.word	0x080133d1
 8012b50:	080133d1 	.word	0x080133d1
 8012b54:	08013267 	.word	0x08013267
 8012b58:	08013267 	.word	0x08013267
 8012b5c:	08013267 	.word	0x08013267
 8012b60:	08013267 	.word	0x08013267
 8012b64:	08013267 	.word	0x08013267
 8012b68:	08013267 	.word	0x08013267
 8012b6c:	08013629 	.word	0x08013629
 8012b70:	0801369d 	.word	0x0801369d
 8012b74:	080136bd 	.word	0x080136bd
 8012b78:	080137c3 	.word	0x080137c3
 8012b7c:	08013733 	.word	0x08013733
 8012b80:	08013849 	.word	0x08013849
 8012b84:	080138cf 	.word	0x080138cf
 8012b88:	0801314b 	.word	0x0801314b
 8012b8c:	0801314b 	.word	0x0801314b
 8012b90:	080131e3 	.word	0x080131e3
 8012b94:	08012ec9 	.word	0x08012ec9
 8012b98:	08012ec9 	.word	0x08012ec9
 8012b9c:	08012ec9 	.word	0x08012ec9
 8012ba0:	08012ec9 	.word	0x08012ec9
 8012ba4:	08012ec9 	.word	0x08012ec9
 8012ba8:	08012ec9 	.word	0x08012ec9
 8012bac:	08012ec9 	.word	0x08012ec9
 8012bb0:	08012f79 	.word	0x08012f79
 8012bb4:	08013065 	.word	0x08013065
 8012bb8:	08013107 	.word	0x08013107
 8012bbc:	0801398b 	.word	0x0801398b
 8012bc0:	0801398b 	.word	0x0801398b
 8012bc4:	0801398b 	.word	0x0801398b
      case COUPLING:   // ˢ����ʾ���ģʽ״̬
      case V0_POSI:    // ˢ����ʾ��ֱƫ��λ��
      case V1_POSI:    // ˢ����ʾ��λ�α�λ��
      case V2_POSI:    // ˢ����ʾ��λ�α�λ��
      case YN_TYPE:    // ˢ����ʾ�α���ʽ
        SetColor(GRY, TCOLOR[YN]);
 8012bc8:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8012bcc:	4619      	mov	r1, r3
 8012bce:	f643 10e7 	movw	r0, #14823	; 0x39e7
 8012bd2:	f7fb f9f5 	bl	800dfc0 <SetColor>
        if(i == Y_RANGES || i == COUPLING||i == PROBEATT)
 8012bd6:	8afb      	ldrh	r3, [r7, #22]
 8012bd8:	2b00      	cmp	r3, #0
 8012bda:	d005      	beq.n	8012be8 <Update_Detail+0x1c0>
 8012bdc:	8afb      	ldrh	r3, [r7, #22]
 8012bde:	2b01      	cmp	r3, #1
 8012be0:	d002      	beq.n	8012be8 <Update_Detail+0x1c0>
 8012be2:	8afb      	ldrh	r3, [r7, #22]
 8012be4:	2b02      	cmp	r3, #2
 8012be6:	d138      	bne.n	8012c5a <Update_Detail+0x232>
        {
      Draw_Circle_D(INV, S_X[Y_RANGES]-3, TITLE_Y_POS, 11, 0, 6*7);
 8012be8:	232f      	movs	r3, #47	; 0x2f
 8012bea:	b29b      	uxth	r3, r3
 8012bec:	3b03      	subs	r3, #3
 8012bee:	b29b      	uxth	r3, r3
 8012bf0:	b219      	sxth	r1, r3
 8012bf2:	232a      	movs	r3, #42	; 0x2a
 8012bf4:	9301      	str	r3, [sp, #4]
 8012bf6:	2300      	movs	r3, #0
 8012bf8:	9300      	str	r3, [sp, #0]
 8012bfa:	230b      	movs	r3, #11
 8012bfc:	22e1      	movs	r2, #225	; 0xe1
 8012bfe:	2001      	movs	r0, #1
 8012c00:	f7fb facc 	bl	800e19c <Draw_Circle_D>
      DispStr(S_X[Y_RANGES], TITLE_Y_POS, INV,      (List[Y_RANGES].PTR +(Range)*6));
 8012c04:	202f      	movs	r0, #47	; 0x2f
 8012c06:	4b3b      	ldr	r3, [pc, #236]	; (8012cf4 <Update_Detail+0x2cc>)
 8012c08:	6819      	ldr	r1, [r3, #0]
 8012c0a:	f9b7 2000 	ldrsh.w	r2, [r7]
 8012c0e:	4613      	mov	r3, r2
 8012c10:	005b      	lsls	r3, r3, #1
 8012c12:	4413      	add	r3, r2
 8012c14:	005b      	lsls	r3, r3, #1
 8012c16:	440b      	add	r3, r1
 8012c18:	2201      	movs	r2, #1
 8012c1a:	21e1      	movs	r1, #225	; 0xe1
 8012c1c:	f7fb f9e8 	bl	800dff0 <DispStr>
      DispStr(S_X[COUPLING], TITLE_Y_POS, INV,      (List[COUPLING].PTR +(List[COUPLING].Val)*6));
 8012c20:	2047      	movs	r0, #71	; 0x47
 8012c22:	4b34      	ldr	r3, [pc, #208]	; (8012cf4 <Update_Detail+0x2cc>)
 8012c24:	689a      	ldr	r2, [r3, #8]
 8012c26:	4b33      	ldr	r3, [pc, #204]	; (8012cf4 <Update_Detail+0x2cc>)
 8012c28:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8012c2c:	4619      	mov	r1, r3
 8012c2e:	460b      	mov	r3, r1
 8012c30:	005b      	lsls	r3, r3, #1
 8012c32:	440b      	add	r3, r1
 8012c34:	005b      	lsls	r3, r3, #1
 8012c36:	4413      	add	r3, r2
 8012c38:	2201      	movs	r2, #1
 8012c3a:	21e1      	movs	r1, #225	; 0xe1
 8012c3c:	f7fb f9d8 	bl	800dff0 <DispStr>
      DispStr10x14(S_X[PROBEATT], TITLE_Y_POS, PRN+SYMB,(List[PROBEATT].Val?("A"):("B")));
 8012c40:	2020      	movs	r0, #32
 8012c42:	4b2c      	ldr	r3, [pc, #176]	; (8012cf4 <Update_Detail+0x2cc>)
 8012c44:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8012c48:	2b00      	cmp	r3, #0
 8012c4a:	d001      	beq.n	8012c50 <Update_Detail+0x228>
 8012c4c:	4b2c      	ldr	r3, [pc, #176]	; (8012d00 <Update_Detail+0x2d8>)
 8012c4e:	e000      	b.n	8012c52 <Update_Detail+0x22a>
 8012c50:	4b2c      	ldr	r3, [pc, #176]	; (8012d04 <Update_Detail+0x2dc>)
 8012c52:	2210      	movs	r2, #16
 8012c54:	21e1      	movs	r1, #225	; 0xe1
 8012c56:	f7fb fc33 	bl	800e4c0 <DispStr10x14>
        }
        ParamTab[P1x2] = 2*((List[V0_POSI].Val+1));
 8012c5a:	4b26      	ldr	r3, [pc, #152]	; (8012cf4 <Update_Detail+0x2cc>)
 8012c5c:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 8012c60:	3301      	adds	r3, #1
 8012c62:	b29b      	uxth	r3, r3
 8012c64:	005b      	lsls	r3, r3, #1
 8012c66:	b29b      	uxth	r3, r3
 8012c68:	b21a      	sxth	r2, r3
 8012c6a:	4b27      	ldr	r3, [pc, #156]	; (8012d08 <Update_Detail+0x2e0>)
 8012c6c:	829a      	strh	r2, [r3, #20]
        ParamTab[VTx2] = ParamTab[P1x2]+ 2*(List[THRESHOLD].Val+1);
 8012c6e:	4b26      	ldr	r3, [pc, #152]	; (8012d08 <Update_Detail+0x2e0>)
 8012c70:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8012c74:	b29a      	uxth	r2, r3
 8012c76:	4b1f      	ldr	r3, [pc, #124]	; (8012cf4 <Update_Detail+0x2cc>)
 8012c78:	f9b3 3084 	ldrsh.w	r3, [r3, #132]	; 0x84
 8012c7c:	3301      	adds	r3, #1
 8012c7e:	b29b      	uxth	r3, r3
 8012c80:	005b      	lsls	r3, r3, #1
 8012c82:	b29b      	uxth	r3, r3
 8012c84:	4413      	add	r3, r2
 8012c86:	b29b      	uxth	r3, r3
 8012c88:	b21a      	sxth	r2, r3
 8012c8a:	4b1f      	ldr	r3, [pc, #124]	; (8012d08 <Update_Detail+0x2e0>)
 8012c8c:	839a      	strh	r2, [r3, #28]
        ParamTab[V1x2] = 2*(List[V1_POSI].Val+1);
 8012c8e:	4b19      	ldr	r3, [pc, #100]	; (8012cf4 <Update_Detail+0x2cc>)
 8012c90:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	; 0x24
 8012c94:	3301      	adds	r3, #1
 8012c96:	b29b      	uxth	r3, r3
 8012c98:	005b      	lsls	r3, r3, #1
 8012c9a:	b29b      	uxth	r3, r3
 8012c9c:	b21a      	sxth	r2, r3
 8012c9e:	4b1a      	ldr	r3, [pc, #104]	; (8012d08 <Update_Detail+0x2e0>)
 8012ca0:	83da      	strh	r2, [r3, #30]
        ParamTab[V2x2] = 2*(List[V2_POSI].Val+1);
 8012ca2:	4b14      	ldr	r3, [pc, #80]	; (8012cf4 <Update_Detail+0x2cc>)
 8012ca4:	f9b3 302c 	ldrsh.w	r3, [r3, #44]	; 0x2c
 8012ca8:	3301      	adds	r3, #1
 8012caa:	b29b      	uxth	r3, r3
 8012cac:	005b      	lsls	r3, r3, #1
 8012cae:	b29b      	uxth	r3, r3
 8012cb0:	b21a      	sxth	r2, r3
 8012cb2:	4b15      	ldr	r3, [pc, #84]	; (8012d08 <Update_Detail+0x2e0>)
 8012cb4:	841a      	strh	r2, [r3, #32]
        ParamTab[V1F]  = (List[YN_TYPE].Val)? L_HID : SHOW;
 8012cb6:	4b0f      	ldr	r3, [pc, #60]	; (8012cf4 <Update_Detail+0x2cc>)
 8012cb8:	f9b3 3034 	ldrsh.w	r3, [r3, #52]	; 0x34
 8012cbc:	2b00      	cmp	r3, #0
 8012cbe:	d001      	beq.n	8012cc4 <Update_Detail+0x29c>
 8012cc0:	2202      	movs	r2, #2
 8012cc2:	e000      	b.n	8012cc6 <Update_Detail+0x29e>
 8012cc4:	2200      	movs	r2, #0
 8012cc6:	4b10      	ldr	r3, [pc, #64]	; (8012d08 <Update_Detail+0x2e0>)
 8012cc8:	815a      	strh	r2, [r3, #10]
        ParamTab[V2F]  = (List[YN_TYPE].Val)? L_HID : SHOW;
 8012cca:	4b0a      	ldr	r3, [pc, #40]	; (8012cf4 <Update_Detail+0x2cc>)
 8012ccc:	f9b3 3034 	ldrsh.w	r3, [r3, #52]	; 0x34
 8012cd0:	2b00      	cmp	r3, #0
 8012cd2:	d01b      	beq.n	8012d0c <Update_Detail+0x2e4>
 8012cd4:	2202      	movs	r2, #2
 8012cd6:	e01a      	b.n	8012d0e <Update_Detail+0x2e6>
 8012cd8:	20000558 	.word	0x20000558
 8012cdc:	200076b2 	.word	0x200076b2
 8012ce0:	2000368e 	.word	0x2000368e
 8012ce4:	20003676 	.word	0x20003676
 8012ce8:	2000053c 	.word	0x2000053c
 8012cec:	200076a4 	.word	0x200076a4
 8012cf0:	200076b8 	.word	0x200076b8
 8012cf4:	20000274 	.word	0x20000274
 8012cf8:	200007a0 	.word	0x200007a0
 8012cfc:	200001a8 	.word	0x200001a8
 8012d00:	080009ac 	.word	0x080009ac
 8012d04:	080009b0 	.word	0x080009b0
 8012d08:	20000140 	.word	0x20000140
 8012d0c:	2200      	movs	r2, #0
 8012d0e:	4ba6      	ldr	r3, [pc, #664]	; (8012fa8 <Update_Detail+0x580>)
 8012d10:	819a      	strh	r2, [r3, #12]

        Tmp  =(ParamTab[V1x2]- ParamTab[V2x2])/2;         // ˢ����ʾV2-V1��ֵ
 8012d12:	4ba5      	ldr	r3, [pc, #660]	; (8012fa8 <Update_Detail+0x580>)
 8012d14:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 8012d18:	461a      	mov	r2, r3
 8012d1a:	4ba3      	ldr	r3, [pc, #652]	; (8012fa8 <Update_Detail+0x580>)
 8012d1c:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 8012d20:	1ad3      	subs	r3, r2, r3
 8012d22:	0fda      	lsrs	r2, r3, #31
 8012d24:	4413      	add	r3, r2
 8012d26:	105b      	asrs	r3, r3, #1
 8012d28:	613b      	str	r3, [r7, #16]
        Tmp *= X_SCALE[Range]* Exp(V_SCALE[Range]);
 8012d2a:	f9b7 3000 	ldrsh.w	r3, [r7]
 8012d2e:	4a9f      	ldr	r2, [pc, #636]	; (8012fac <Update_Detail+0x584>)
 8012d30:	5cd3      	ldrb	r3, [r2, r3]
 8012d32:	461c      	mov	r4, r3
 8012d34:	f9b7 3000 	ldrsh.w	r3, [r7]
 8012d38:	4a9d      	ldr	r2, [pc, #628]	; (8012fb0 <Update_Detail+0x588>)
 8012d3a:	5cd3      	ldrb	r3, [r2, r3]
 8012d3c:	4618      	mov	r0, r3
 8012d3e:	f7fe fb2f 	bl	80113a0 <Exp>
 8012d42:	4603      	mov	r3, r0
 8012d44:	fb03 f204 	mul.w	r2, r3, r4
 8012d48:	693b      	ldr	r3, [r7, #16]
 8012d4a:	fb02 f303 	mul.w	r3, r2, r3
 8012d4e:	613b      	str	r3, [r7, #16]
        Value2Str(NumStr, Tmp, V[0], 3, UNSIGN);
 8012d50:	2301      	movs	r3, #1
 8012d52:	9300      	str	r3, [sp, #0]
 8012d54:	2303      	movs	r3, #3
 8012d56:	4a97      	ldr	r2, [pc, #604]	; (8012fb4 <Update_Detail+0x58c>)
 8012d58:	6939      	ldr	r1, [r7, #16]
 8012d5a:	4897      	ldr	r0, [pc, #604]	; (8012fb8 <Update_Detail+0x590>)
 8012d5c:	f7fe fa24 	bl	80111a8 <Value2Str>
        Draw_Circle_D(INV, S_X[V1_POSI]-3, LABLE_Y, 11, 0, 6*9);
 8012d60:	2307      	movs	r3, #7
 8012d62:	b29b      	uxth	r3, r3
 8012d64:	3b03      	subs	r3, #3
 8012d66:	b29b      	uxth	r3, r3
 8012d68:	b219      	sxth	r1, r3
 8012d6a:	2336      	movs	r3, #54	; 0x36
 8012d6c:	9301      	str	r3, [sp, #4]
 8012d6e:	2300      	movs	r3, #0
 8012d70:	9300      	str	r3, [sp, #0]
 8012d72:	230b      	movs	r3, #11
 8012d74:	2203      	movs	r2, #3
 8012d76:	2001      	movs	r0, #1
 8012d78:	f7fb fa10 	bl	800e19c <Draw_Circle_D>
        DispStr(S_X[V1_POSI]+0*6, LABLE_Y, INV+SYMB, "]");
 8012d7c:	2007      	movs	r0, #7
 8012d7e:	4b8f      	ldr	r3, [pc, #572]	; (8012fbc <Update_Detail+0x594>)
 8012d80:	2211      	movs	r2, #17
 8012d82:	2103      	movs	r1, #3
 8012d84:	f7fb f934 	bl	800dff0 <DispStr>
        DispStr(S_X[V1_POSI]+1*6, LABLE_Y, INV,      "V:      ");
 8012d88:	2307      	movs	r3, #7
 8012d8a:	b29b      	uxth	r3, r3
 8012d8c:	3306      	adds	r3, #6
 8012d8e:	b29b      	uxth	r3, r3
 8012d90:	b218      	sxth	r0, r3
 8012d92:	4b8b      	ldr	r3, [pc, #556]	; (8012fc0 <Update_Detail+0x598>)
 8012d94:	2201      	movs	r2, #1
 8012d96:	2103      	movs	r1, #3
 8012d98:	f7fb f92a 	bl	800dff0 <DispStr>
        DispStr(S_X[V1_POSI]+7*6, LABLE_Y, INV,  "  ");
 8012d9c:	2307      	movs	r3, #7
 8012d9e:	b29b      	uxth	r3, r3
 8012da0:	332a      	adds	r3, #42	; 0x2a
 8012da2:	b29b      	uxth	r3, r3
 8012da4:	b218      	sxth	r0, r3
 8012da6:	4b87      	ldr	r3, [pc, #540]	; (8012fc4 <Update_Detail+0x59c>)
 8012da8:	2201      	movs	r2, #1
 8012daa:	2103      	movs	r1, #3
 8012dac:	f7fb f920 	bl	800dff0 <DispStr>
        DispStr(S_X[V1_POSI]+3*6, LABLE_Y, INV,  (char *)NumStr);
 8012db0:	2307      	movs	r3, #7
 8012db2:	b29b      	uxth	r3, r3
 8012db4:	3312      	adds	r3, #18
 8012db6:	b29b      	uxth	r3, r3
 8012db8:	b218      	sxth	r0, r3
 8012dba:	4b7f      	ldr	r3, [pc, #508]	; (8012fb8 <Update_Detail+0x590>)
 8012dbc:	2201      	movs	r2, #1
 8012dbe:	2103      	movs	r1, #3
 8012dc0:	f7fb f916 	bl	800dff0 <DispStr>

        SetColor(GRY, TCOLOR[TRG]);
 8012dc4:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8012dc8:	4619      	mov	r1, r3
 8012dca:	f643 10e7 	movw	r0, #14823	; 0x39e7
 8012dce:	f7fb f8f7 	bl	800dfc0 <SetColor>
        Tmp  = List[SENSITIVE].Val;                       // ˢ����ʾ�����ز�ֵ
 8012dd2:	4b7d      	ldr	r3, [pc, #500]	; (8012fc8 <Update_Detail+0x5a0>)
 8012dd4:	f9b3 308c 	ldrsh.w	r3, [r3, #140]	; 0x8c
 8012dd8:	613b      	str	r3, [r7, #16]
        Tmp *= X_SCALE[Range]* Exp(V_SCALE[Range]);
 8012dda:	f9b7 3000 	ldrsh.w	r3, [r7]
 8012dde:	4a73      	ldr	r2, [pc, #460]	; (8012fac <Update_Detail+0x584>)
 8012de0:	5cd3      	ldrb	r3, [r2, r3]
 8012de2:	461c      	mov	r4, r3
 8012de4:	f9b7 3000 	ldrsh.w	r3, [r7]
 8012de8:	4a71      	ldr	r2, [pc, #452]	; (8012fb0 <Update_Detail+0x588>)
 8012dea:	5cd3      	ldrb	r3, [r2, r3]
 8012dec:	4618      	mov	r0, r3
 8012dee:	f7fe fad7 	bl	80113a0 <Exp>
 8012df2:	4603      	mov	r3, r0
 8012df4:	fb03 f204 	mul.w	r2, r3, r4
 8012df8:	693b      	ldr	r3, [r7, #16]
 8012dfa:	fb02 f303 	mul.w	r3, r2, r3
 8012dfe:	613b      	str	r3, [r7, #16]
        Value2Str(NumStr, Tmp,V[0], 2, UNSIGN);
 8012e00:	2301      	movs	r3, #1
 8012e02:	9300      	str	r3, [sp, #0]
 8012e04:	2302      	movs	r3, #2
 8012e06:	4a6b      	ldr	r2, [pc, #428]	; (8012fb4 <Update_Detail+0x58c>)
 8012e08:	6939      	ldr	r1, [r7, #16]
 8012e0a:	486b      	ldr	r0, [pc, #428]	; (8012fb8 <Update_Detail+0x590>)
 8012e0c:	f7fe f9cc 	bl	80111a8 <Value2Str>
        DispStr(S_X[SENSITIVE]+9, TITLE_Y_POS, INV,  "     ");
 8012e10:	23e7      	movs	r3, #231	; 0xe7
 8012e12:	b29b      	uxth	r3, r3
 8012e14:	3309      	adds	r3, #9
 8012e16:	b29b      	uxth	r3, r3
 8012e18:	b218      	sxth	r0, r3
 8012e1a:	4b6c      	ldr	r3, [pc, #432]	; (8012fcc <Update_Detail+0x5a4>)
 8012e1c:	2201      	movs	r2, #1
 8012e1e:	21e1      	movs	r1, #225	; 0xe1
 8012e20:	f7fb f8e6 	bl	800dff0 <DispStr>
        DispStr(S_X[SENSITIVE]+9, TITLE_Y_POS, INV,  (char *)NumStr);
 8012e24:	23e7      	movs	r3, #231	; 0xe7
 8012e26:	b29b      	uxth	r3, r3
 8012e28:	3309      	adds	r3, #9
 8012e2a:	b29b      	uxth	r3, r3
 8012e2c:	b218      	sxth	r0, r3
 8012e2e:	4b62      	ldr	r3, [pc, #392]	; (8012fb8 <Update_Detail+0x590>)
 8012e30:	2201      	movs	r2, #1
 8012e32:	21e1      	movs	r1, #225	; 0xe1
 8012e34:	f7fb f8dc 	bl	800dff0 <DispStr>
        DispStr10x14(S_X[SENSITIVE], TITLE_Y_POS, INV+SYMB,"E");
 8012e38:	20e7      	movs	r0, #231	; 0xe7
 8012e3a:	4b65      	ldr	r3, [pc, #404]	; (8012fd0 <Update_Detail+0x5a8>)
 8012e3c:	2211      	movs	r2, #17
 8012e3e:	21e1      	movs	r1, #225	; 0xe1
 8012e40:	f7fb fb3e 	bl	800e4c0 <DispStr10x14>
        GainA  = (char)List[Y_RANGES].Val;
 8012e44:	4b60      	ldr	r3, [pc, #384]	; (8012fc8 <Update_Detail+0x5a0>)
 8012e46:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8012e4a:	b2db      	uxtb	r3, r3
 8012e4c:	b21a      	sxth	r2, r3
 8012e4e:	4b61      	ldr	r3, [pc, #388]	; (8012fd4 <Update_Detail+0x5ac>)
 8012e50:	801a      	strh	r2, [r3, #0]

        if((char)List[Y_RANGES].Val>1)
 8012e52:	4b5d      	ldr	r3, [pc, #372]	; (8012fc8 <Update_Detail+0x5a0>)
 8012e54:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8012e58:	b2db      	uxtb	r3, r3
 8012e5a:	2b01      	cmp	r3, #1
 8012e5c:	d903      	bls.n	8012e66 <Update_Detail+0x43e>
          KindA  = HV;
 8012e5e:	4b5e      	ldr	r3, [pc, #376]	; (8012fd8 <Update_Detail+0x5b0>)
 8012e60:	2201      	movs	r2, #1
 8012e62:	801a      	strh	r2, [r3, #0]
 8012e64:	e002      	b.n	8012e6c <Update_Detail+0x444>
        else
          KindA  = LV;                //Ch1ѡ���ѹ���ѹ����
 8012e66:	4b5c      	ldr	r3, [pc, #368]	; (8012fd8 <Update_Detail+0x5b0>)
 8012e68:	2200      	movs	r2, #0
 8012e6a:	801a      	strh	r2, [r3, #0]
        StateA =  ((char)List[Y_RANGES].Val>5)?ACT: GND;
 8012e6c:	4b56      	ldr	r3, [pc, #344]	; (8012fc8 <Update_Detail+0x5a0>)
 8012e6e:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8012e72:	b2db      	uxtb	r3, r3
 8012e74:	2b05      	cmp	r3, #5
 8012e76:	d901      	bls.n	8012e7c <Update_Detail+0x454>
 8012e78:	2204      	movs	r2, #4
 8012e7a:	e000      	b.n	8012e7e <Update_Detail+0x456>
 8012e7c:	2200      	movs	r2, #0
 8012e7e:	4b57      	ldr	r3, [pc, #348]	; (8012fdc <Update_Detail+0x5b4>)
 8012e80:	801a      	strh	r2, [r3, #0]

        CouplA = (List[COUPLING].Val)? AC : DC;                      // AC);  //AC/DC��Ϸ�ʽ
 8012e82:	4b51      	ldr	r3, [pc, #324]	; (8012fc8 <Update_Detail+0x5a0>)
 8012e84:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8012e88:	2b00      	cmp	r3, #0
 8012e8a:	d001      	beq.n	8012e90 <Update_Detail+0x468>
 8012e8c:	2200      	movs	r2, #0
 8012e8e:	e000      	b.n	8012e92 <Update_Detail+0x46a>
 8012e90:	2202      	movs	r2, #2
 8012e92:	4b53      	ldr	r3, [pc, #332]	; (8012fe0 <Update_Detail+0x5b8>)
 8012e94:	801a      	strh	r2, [r3, #0]
        BIOS_Ctrl(AiRANGE, KindA+CouplA+StateA);             //Ch1״̬ˢ��
 8012e96:	4b50      	ldr	r3, [pc, #320]	; (8012fd8 <Update_Detail+0x5b0>)
 8012e98:	f9b3 3000 	ldrsh.w	r3, [r3]
 8012e9c:	461a      	mov	r2, r3
 8012e9e:	4b50      	ldr	r3, [pc, #320]	; (8012fe0 <Update_Detail+0x5b8>)
 8012ea0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8012ea4:	4413      	add	r3, r2
 8012ea6:	4a4d      	ldr	r2, [pc, #308]	; (8012fdc <Update_Detail+0x5b4>)
 8012ea8:	f9b2 2000 	ldrsh.w	r2, [r2]
 8012eac:	4413      	add	r3, r2
 8012eae:	4619      	mov	r1, r3
 8012eb0:	2007      	movs	r0, #7
 8012eb2:	f7f9 fa5f 	bl	800c374 <BIOS_Ctrl>
        AiPosi(List[V0_POSI].Val);                        //Ch1Ӳ����Ӧλ��
 8012eb6:	4b44      	ldr	r3, [pc, #272]	; (8012fc8 <Update_Detail+0x5a0>)
 8012eb8:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 8012ebc:	b2db      	uxtb	r3, r3
 8012ebe:	4618      	mov	r0, r3
 8012ec0:	f001 fc5c 	bl	801477c <AiPosi>
        break;
 8012ec4:	f000 bd61 	b.w	801398a <Update_Detail+0xf62>
      case SAVE_BUF:
      case SAVE_CSV:
      case SAVE_SVG:
      case LOAD_DAT: //��ʾ��ѡ��Ҫ��ȡ���ļ����
      case LOAD_BUF:
        SetColor(GRY, TCOLOR[FN]);
 8012ec8:	f64f 4310 	movw	r3, #64528	; 0xfc10
 8012ecc:	4619      	mov	r1, r3
 8012ece:	f643 10e7 	movw	r0, #14823	; 0x39e7
 8012ed2:	f7fb f875 	bl	800dfc0 <SetColor>
        u8ToDec3(NumStr, List[i].Val);
 8012ed6:	8afb      	ldrh	r3, [r7, #22]
 8012ed8:	4a3b      	ldr	r2, [pc, #236]	; (8012fc8 <Update_Detail+0x5a0>)
 8012eda:	00db      	lsls	r3, r3, #3
 8012edc:	4413      	add	r3, r2
 8012ede:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8012ee2:	b2db      	uxtb	r3, r3
 8012ee4:	4619      	mov	r1, r3
 8012ee6:	4834      	ldr	r0, [pc, #208]	; (8012fb8 <Update_Detail+0x590>)
 8012ee8:	f7fe f8f6 	bl	80110d8 <u8ToDec3>
        Draw_Circle_D(INV, S_X[i]-3, LABLE_Y, 11, 0, 6*11);
 8012eec:	8afb      	ldrh	r3, [r7, #22]
 8012eee:	4a3d      	ldr	r2, [pc, #244]	; (8012fe4 <Update_Detail+0x5bc>)
 8012ef0:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8012ef4:	b29b      	uxth	r3, r3
 8012ef6:	3b03      	subs	r3, #3
 8012ef8:	b29b      	uxth	r3, r3
 8012efa:	b219      	sxth	r1, r3
 8012efc:	2342      	movs	r3, #66	; 0x42
 8012efe:	9301      	str	r3, [sp, #4]
 8012f00:	2300      	movs	r3, #0
 8012f02:	9300      	str	r3, [sp, #0]
 8012f04:	230b      	movs	r3, #11
 8012f06:	2203      	movs	r2, #3
 8012f08:	2001      	movs	r0, #1
 8012f0a:	f7fb f947 	bl	800e19c <Draw_Circle_D>
        DispStr(S_X[i],    LABLE_Y, INV, ((i > SAVE_SVG)? "Load" : "Save"));//0513
 8012f0e:	8afb      	ldrh	r3, [r7, #22]
 8012f10:	4a34      	ldr	r2, [pc, #208]	; (8012fe4 <Update_Detail+0x5bc>)
 8012f12:	f932 0013 	ldrsh.w	r0, [r2, r3, lsl #1]
 8012f16:	8afb      	ldrh	r3, [r7, #22]
 8012f18:	2b21      	cmp	r3, #33	; 0x21
 8012f1a:	d901      	bls.n	8012f20 <Update_Detail+0x4f8>
 8012f1c:	4b32      	ldr	r3, [pc, #200]	; (8012fe8 <Update_Detail+0x5c0>)
 8012f1e:	e000      	b.n	8012f22 <Update_Detail+0x4fa>
 8012f20:	4b32      	ldr	r3, [pc, #200]	; (8012fec <Update_Detail+0x5c4>)
 8012f22:	2201      	movs	r2, #1
 8012f24:	2103      	movs	r1, #3
 8012f26:	f7fb f863 	bl	800dff0 <DispStr>
        DispStr(S_X[i]+24, LABLE_Y, INV, (char *)NumStr);
 8012f2a:	8afb      	ldrh	r3, [r7, #22]
 8012f2c:	4a2d      	ldr	r2, [pc, #180]	; (8012fe4 <Update_Detail+0x5bc>)
 8012f2e:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8012f32:	b29b      	uxth	r3, r3
 8012f34:	3318      	adds	r3, #24
 8012f36:	b29b      	uxth	r3, r3
 8012f38:	b218      	sxth	r0, r3
 8012f3a:	4b1f      	ldr	r3, [pc, #124]	; (8012fb8 <Update_Detail+0x590>)
 8012f3c:	2201      	movs	r2, #1
 8012f3e:	2103      	movs	r1, #3
 8012f40:	f7fb f856 	bl	800dff0 <DispStr>
        DispStr(S_X[i]+42, LABLE_Y, INV, (List[i].PTR +(i - SAVE_BMP)*6));
 8012f44:	8afb      	ldrh	r3, [r7, #22]
 8012f46:	4a27      	ldr	r2, [pc, #156]	; (8012fe4 <Update_Detail+0x5bc>)
 8012f48:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8012f4c:	b29b      	uxth	r3, r3
 8012f4e:	332a      	adds	r3, #42	; 0x2a
 8012f50:	b29b      	uxth	r3, r3
 8012f52:	b218      	sxth	r0, r3
 8012f54:	8afb      	ldrh	r3, [r7, #22]
 8012f56:	4a1c      	ldr	r2, [pc, #112]	; (8012fc8 <Update_Detail+0x5a0>)
 8012f58:	f852 1033 	ldr.w	r1, [r2, r3, lsl #3]
 8012f5c:	8afb      	ldrh	r3, [r7, #22]
 8012f5e:	f1a3 021d 	sub.w	r2, r3, #29
 8012f62:	4613      	mov	r3, r2
 8012f64:	005b      	lsls	r3, r3, #1
 8012f66:	4413      	add	r3, r2
 8012f68:	005b      	lsls	r3, r3, #1
 8012f6a:	440b      	add	r3, r1
 8012f6c:	2201      	movs	r2, #1
 8012f6e:	2103      	movs	r1, #3
 8012f70:	f7fb f83e 	bl	800dff0 <DispStr>
        break;
 8012f74:	f000 bd09 	b.w	801398a <Update_Detail+0xf62>

      case TPYE_OUT:
        if(List[TPYE_OUT].Val ==0) //suqar
 8012f78:	4b13      	ldr	r3, [pc, #76]	; (8012fc8 <Update_Detail+0x5a0>)
 8012f7a:	f9b3 3124 	ldrsh.w	r3, [r3, #292]	; 0x124
 8012f7e:	2b00      	cmp	r3, #0
 8012f80:	d136      	bne.n	8012ff0 <Update_Detail+0x5c8>
        {
          BIOS_Ctrl(OUT_MOD, DISABLE);            // �ر����ģʽ
 8012f82:	2100      	movs	r1, #0
 8012f84:	2000      	movs	r0, #0
 8012f86:	f7f9 f9f5 	bl	800c374 <BIOS_Ctrl>
          Set_Fout(List[FREQ_OUT].Val);
 8012f8a:	4b0f      	ldr	r3, [pc, #60]	; (8012fc8 <Update_Detail+0x5a0>)
 8012f8c:	f9b3 312c 	ldrsh.w	r3, [r3, #300]	; 0x12c
 8012f90:	4618      	mov	r0, r3
 8012f92:	f7f9 fbcd 	bl	800c730 <Set_Fout>
          Set_Duty();
 8012f96:	f7f9 fb9f 	bl	800c6d8 <Set_Duty>
          BIOS_Ctrl(OUT_MOD, PULSED);             // �趨�������ģʽ
 8012f9a:	2104      	movs	r1, #4
 8012f9c:	2000      	movs	r0, #0
 8012f9e:	f7f9 f9e9 	bl	800c374 <BIOS_Ctrl>
           BIOS_Ctrl(OUT_CNT, 180);
           BIOS_Ctrl(OUT_BUF, BIOS_Info(List[TPYE_OUT].Val));    // ����ģ��������Ҳ������ݱ�
           BIOS_Ctrl(OUT_MOD, ANALOG);             // �趨ģ�����ģʽ
        }

      break;
 8012fa2:	f000 bcf2 	b.w	801398a <Update_Detail+0xf62>
 8012fa6:	bf00      	nop
 8012fa8:	20000140 	.word	0x20000140
 8012fac:	080021cc 	.word	0x080021cc
 8012fb0:	080021a4 	.word	0x080021a4
 8012fb4:	08001d9c 	.word	0x08001d9c
 8012fb8:	20003668 	.word	0x20003668
 8012fbc:	080009b4 	.word	0x080009b4
 8012fc0:	080009b8 	.word	0x080009b8
 8012fc4:	08000a24 	.word	0x08000a24
 8012fc8:	20000274 	.word	0x20000274
 8012fcc:	080009e4 	.word	0x080009e4
 8012fd0:	080009ec 	.word	0x080009ec
 8012fd4:	20003676 	.word	0x20003676
 8012fd8:	200076b2 	.word	0x200076b2
 8012fdc:	2000368e 	.word	0x2000368e
 8012fe0:	200076b4 	.word	0x200076b4
 8012fe4:	080021f8 	.word	0x080021f8
 8012fe8:	0800099c 	.word	0x0800099c
 8012fec:	080009a4 	.word	0x080009a4
          if(List[FREQ_OUT].Val > MAX_FREQ)
 8012ff0:	4bbf      	ldr	r3, [pc, #764]	; (80132f0 <Update_Detail+0x8c8>)
 8012ff2:	f9b3 312c 	ldrsh.w	r3, [r3, #300]	; 0x12c
 8012ff6:	2b09      	cmp	r3, #9
 8012ff8:	dd03      	ble.n	8013002 <Update_Detail+0x5da>
             List[FREQ_OUT].Val = MAX_FREQ ;   //10KHz
 8012ffa:	4bbd      	ldr	r3, [pc, #756]	; (80132f0 <Update_Detail+0x8c8>)
 8012ffc:	2209      	movs	r2, #9
 8012ffe:	f8a3 212c 	strh.w	r2, [r3, #300]	; 0x12c
           BIOS_Ctrl(OUT_MOD, DISABLE);            // �ر����ģʽ
 8013002:	2100      	movs	r1, #0
 8013004:	2000      	movs	r0, #0
 8013006:	f7f9 f9b5 	bl	800c374 <BIOS_Ctrl>
           htim7.Init.Prescaler = Dac_Psc[List[FREQ_OUT].Val] - 1;
 801300a:	4bb9      	ldr	r3, [pc, #740]	; (80132f0 <Update_Detail+0x8c8>)
 801300c:	f9b3 312c 	ldrsh.w	r3, [r3, #300]	; 0x12c
 8013010:	461a      	mov	r2, r3
 8013012:	4bb8      	ldr	r3, [pc, #736]	; (80132f4 <Update_Detail+0x8cc>)
 8013014:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8013018:	3b01      	subs	r3, #1
 801301a:	461a      	mov	r2, r3
 801301c:	4bb6      	ldr	r3, [pc, #728]	; (80132f8 <Update_Detail+0x8d0>)
 801301e:	605a      	str	r2, [r3, #4]
           BIOS_Ctrl(DAC_TIM, Dac_Tim[List[FREQ_OUT].Val]-1); // 72MHz/2/180/100 = 2KHz ģ���������(ÿ����36��)
 8013020:	4bb3      	ldr	r3, [pc, #716]	; (80132f0 <Update_Detail+0x8c8>)
 8013022:	f9b3 312c 	ldrsh.w	r3, [r3, #300]	; 0x12c
 8013026:	461a      	mov	r2, r3
 8013028:	4bb4      	ldr	r3, [pc, #720]	; (80132fc <Update_Detail+0x8d4>)
 801302a:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 801302e:	3b01      	subs	r3, #1
 8013030:	4619      	mov	r1, r3
 8013032:	2001      	movs	r0, #1
 8013034:	f7f9 f99e 	bl	800c374 <BIOS_Ctrl>
           BIOS_Ctrl(OUT_CNT, 180);
 8013038:	21b4      	movs	r1, #180	; 0xb4
 801303a:	2002      	movs	r0, #2
 801303c:	f7f9 f99a 	bl	800c374 <BIOS_Ctrl>
           BIOS_Ctrl(OUT_BUF, BIOS_Info(List[TPYE_OUT].Val));    // ����ģ��������Ҳ������ݱ�
 8013040:	4bab      	ldr	r3, [pc, #684]	; (80132f0 <Update_Detail+0x8c8>)
 8013042:	f9b3 3124 	ldrsh.w	r3, [r3, #292]	; 0x124
 8013046:	b2db      	uxtb	r3, r3
 8013048:	4618      	mov	r0, r3
 801304a:	f7f9 f97d 	bl	800c348 <BIOS_Info>
 801304e:	4603      	mov	r3, r0
 8013050:	4619      	mov	r1, r3
 8013052:	2003      	movs	r0, #3
 8013054:	f7f9 f98e 	bl	800c374 <BIOS_Ctrl>
           BIOS_Ctrl(OUT_MOD, ANALOG);             // �趨ģ�����ģʽ
 8013058:	2102      	movs	r1, #2
 801305a:	2000      	movs	r0, #0
 801305c:	f7f9 f98a 	bl	800c374 <BIOS_Ctrl>
      break;
 8013060:	f000 bc93 	b.w	801398a <Update_Detail+0xf62>

      case FREQ_OUT: // ��ʾ�������Ƶ��
        if(List[TPYE_OUT].Val ==0) //suqar
 8013064:	4ba2      	ldr	r3, [pc, #648]	; (80132f0 <Update_Detail+0x8c8>)
 8013066:	f9b3 3124 	ldrsh.w	r3, [r3, #292]	; 0x124
 801306a:	2b00      	cmp	r3, #0
 801306c:	d111      	bne.n	8013092 <Update_Detail+0x66a>
        {
          BIOS_Ctrl(OUT_MOD, DISABLE);            // �ر����ģʽ
 801306e:	2100      	movs	r1, #0
 8013070:	2000      	movs	r0, #0
 8013072:	f7f9 f97f 	bl	800c374 <BIOS_Ctrl>
          Set_Fout(List[FREQ_OUT].Val);
 8013076:	4b9e      	ldr	r3, [pc, #632]	; (80132f0 <Update_Detail+0x8c8>)
 8013078:	f9b3 312c 	ldrsh.w	r3, [r3, #300]	; 0x12c
 801307c:	4618      	mov	r0, r3
 801307e:	f7f9 fb57 	bl	800c730 <Set_Fout>
          Set_Duty();
 8013082:	f7f9 fb29 	bl	800c6d8 <Set_Duty>
          BIOS_Ctrl(OUT_MOD, PULSED);             // �趨�������ģʽ
 8013086:	2104      	movs	r1, #4
 8013088:	2000      	movs	r0, #0
 801308a:	f7f9 f973 	bl	800c374 <BIOS_Ctrl>
          BIOS_Ctrl(DAC_TIM, Dac_Tim[List[FREQ_OUT].Val]-1); // 72MHz/2/180/100 = 2KHz ģ���������(ÿ����36��)
          BIOS_Ctrl(OUT_CNT, 180);
          BIOS_Ctrl(OUT_BUF, BIOS_Info(List[TPYE_OUT].Val));    // ����ģ��������Ҳ������ݱ�
          BIOS_Ctrl(OUT_MOD, ANALOG);             // �趨ģ�����ģʽ
        }
        break;
 801308e:	f000 bc7c 	b.w	801398a <Update_Detail+0xf62>
          if(List[FREQ_OUT].Val > MAX_FREQ)
 8013092:	4b97      	ldr	r3, [pc, #604]	; (80132f0 <Update_Detail+0x8c8>)
 8013094:	f9b3 312c 	ldrsh.w	r3, [r3, #300]	; 0x12c
 8013098:	2b09      	cmp	r3, #9
 801309a:	dd03      	ble.n	80130a4 <Update_Detail+0x67c>
            List[FREQ_OUT].Val = MAX_FREQ ;   //10KHz
 801309c:	4b94      	ldr	r3, [pc, #592]	; (80132f0 <Update_Detail+0x8c8>)
 801309e:	2209      	movs	r2, #9
 80130a0:	f8a3 212c 	strh.w	r2, [r3, #300]	; 0x12c
          BIOS_Ctrl(OUT_MOD, DISABLE);            // �ر����ģʽ
 80130a4:	2100      	movs	r1, #0
 80130a6:	2000      	movs	r0, #0
 80130a8:	f7f9 f964 	bl	800c374 <BIOS_Ctrl>
          htim7.Init.Prescaler = Dac_Psc[List[FREQ_OUT].Val] - 1;
 80130ac:	4b90      	ldr	r3, [pc, #576]	; (80132f0 <Update_Detail+0x8c8>)
 80130ae:	f9b3 312c 	ldrsh.w	r3, [r3, #300]	; 0x12c
 80130b2:	461a      	mov	r2, r3
 80130b4:	4b8f      	ldr	r3, [pc, #572]	; (80132f4 <Update_Detail+0x8cc>)
 80130b6:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 80130ba:	3b01      	subs	r3, #1
 80130bc:	461a      	mov	r2, r3
 80130be:	4b8e      	ldr	r3, [pc, #568]	; (80132f8 <Update_Detail+0x8d0>)
 80130c0:	605a      	str	r2, [r3, #4]
          BIOS_Ctrl(DAC_TIM, Dac_Tim[List[FREQ_OUT].Val]-1); // 72MHz/2/180/100 = 2KHz ģ���������(ÿ����36��)
 80130c2:	4b8b      	ldr	r3, [pc, #556]	; (80132f0 <Update_Detail+0x8c8>)
 80130c4:	f9b3 312c 	ldrsh.w	r3, [r3, #300]	; 0x12c
 80130c8:	461a      	mov	r2, r3
 80130ca:	4b8c      	ldr	r3, [pc, #560]	; (80132fc <Update_Detail+0x8d4>)
 80130cc:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 80130d0:	3b01      	subs	r3, #1
 80130d2:	4619      	mov	r1, r3
 80130d4:	2001      	movs	r0, #1
 80130d6:	f7f9 f94d 	bl	800c374 <BIOS_Ctrl>
          BIOS_Ctrl(OUT_CNT, 180);
 80130da:	21b4      	movs	r1, #180	; 0xb4
 80130dc:	2002      	movs	r0, #2
 80130de:	f7f9 f949 	bl	800c374 <BIOS_Ctrl>
          BIOS_Ctrl(OUT_BUF, BIOS_Info(List[TPYE_OUT].Val));    // ����ģ��������Ҳ������ݱ�
 80130e2:	4b83      	ldr	r3, [pc, #524]	; (80132f0 <Update_Detail+0x8c8>)
 80130e4:	f9b3 3124 	ldrsh.w	r3, [r3, #292]	; 0x124
 80130e8:	b2db      	uxtb	r3, r3
 80130ea:	4618      	mov	r0, r3
 80130ec:	f7f9 f92c 	bl	800c348 <BIOS_Info>
 80130f0:	4603      	mov	r3, r0
 80130f2:	4619      	mov	r1, r3
 80130f4:	2003      	movs	r0, #3
 80130f6:	f7f9 f93d 	bl	800c374 <BIOS_Ctrl>
          BIOS_Ctrl(OUT_MOD, ANALOG);             // �趨ģ�����ģʽ
 80130fa:	2102      	movs	r1, #2
 80130fc:	2000      	movs	r0, #0
 80130fe:	f7f9 f939 	bl	800c374 <BIOS_Ctrl>
        break;
 8013102:	f000 bc42 	b.w	801398a <Update_Detail+0xf62>

      case FREQ_DUT: // ��ʾ�������ռ�ձ�
        SetColor(GRY, TCOLOR[SN]);
 8013106:	f240 531f 	movw	r3, #1311	; 0x51f
 801310a:	4619      	mov	r1, r3
 801310c:	f643 10e7 	movw	r0, #14823	; 0x39e7
 8013110:	f7fa ff56 	bl	800dfc0 <SetColor>
        Draw_Circle_D(INV, S_X[i]-3, LABLE_Y, 11, 0, 6*9);
 8013114:	8afb      	ldrh	r3, [r7, #22]
 8013116:	4a7a      	ldr	r2, [pc, #488]	; (8013300 <Update_Detail+0x8d8>)
 8013118:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 801311c:	b29b      	uxth	r3, r3
 801311e:	3b03      	subs	r3, #3
 8013120:	b29b      	uxth	r3, r3
 8013122:	b219      	sxth	r1, r3
 8013124:	2336      	movs	r3, #54	; 0x36
 8013126:	9301      	str	r3, [sp, #4]
 8013128:	2300      	movs	r3, #0
 801312a:	9300      	str	r3, [sp, #0]
 801312c:	230b      	movs	r3, #11
 801312e:	2203      	movs	r2, #3
 8013130:	2001      	movs	r0, #1
 8013132:	f7fb f833 	bl	800e19c <Draw_Circle_D>
        if(List[TPYE_OUT].Val == 0) //suqar
 8013136:	4b6e      	ldr	r3, [pc, #440]	; (80132f0 <Update_Detail+0x8c8>)
 8013138:	f9b3 3124 	ldrsh.w	r3, [r3, #292]	; 0x124
 801313c:	2b00      	cmp	r3, #0
 801313e:	f040 8423 	bne.w	8013988 <Update_Detail+0xf60>
        {
          Set_Duty();
 8013142:	f7f9 fac9 	bl	800c6d8 <Set_Duty>
        }
        break;
 8013146:	f000 bc1f 	b.w	8013988 <Update_Detail+0xf60>

      case EXT_REFN: // ��ʾ�ο���������
      case EXT_POSI: // ��ʾ�ο�����ƫ��
        SetColor(GRY, TCOLOR[EX]);
 801314a:	f64f 031f 	movw	r3, #63519	; 0xf81f
 801314e:	4619      	mov	r1, r3
 8013150:	f643 10e7 	movw	r0, #14823	; 0x39e7
 8013154:	f7fa ff34 	bl	800dfc0 <SetColor>
        if((i == EXT_REFN) || (i == EXT_POSI))
 8013158:	8afb      	ldrh	r3, [r7, #22]
 801315a:	2b1a      	cmp	r3, #26
 801315c:	d002      	beq.n	8013164 <Update_Detail+0x73c>
 801315e:	8afb      	ldrh	r3, [r7, #22]
 8013160:	2b1b      	cmp	r3, #27
 8013162:	d123      	bne.n	80131ac <Update_Detail+0x784>
        {
          Draw_Circle_D(INV, S_X[EXT_REFN]-3, TITLE_Y_POS, 11, 1, 6*5);
 8013164:	23a8      	movs	r3, #168	; 0xa8
 8013166:	b29b      	uxth	r3, r3
 8013168:	3b03      	subs	r3, #3
 801316a:	b29b      	uxth	r3, r3
 801316c:	b219      	sxth	r1, r3
 801316e:	231e      	movs	r3, #30
 8013170:	9301      	str	r3, [sp, #4]
 8013172:	2301      	movs	r3, #1
 8013174:	9300      	str	r3, [sp, #0]
 8013176:	230b      	movs	r3, #11
 8013178:	22e1      	movs	r2, #225	; 0xe1
 801317a:	2001      	movs	r0, #1
 801317c:	f7fb f80e 	bl	800e19c <Draw_Circle_D>
          DispStr(S_X[EXT_REFN], TITLE_Y_POS, INV, (char*)(List[EXT_HIDE].Val? I[List[EXT_REFN].Val] : I[6]));
 8013180:	20a8      	movs	r0, #168	; 0xa8
 8013182:	4b5b      	ldr	r3, [pc, #364]	; (80132f0 <Update_Detail+0x8c8>)
 8013184:	f9b3 30e4 	ldrsh.w	r3, [r3, #228]	; 0xe4
 8013188:	2b00      	cmp	r3, #0
 801318a:	d00a      	beq.n	80131a2 <Update_Detail+0x77a>
 801318c:	4b58      	ldr	r3, [pc, #352]	; (80132f0 <Update_Detail+0x8c8>)
 801318e:	f9b3 30d4 	ldrsh.w	r3, [r3, #212]	; 0xd4
 8013192:	461a      	mov	r2, r3
 8013194:	4613      	mov	r3, r2
 8013196:	005b      	lsls	r3, r3, #1
 8013198:	4413      	add	r3, r2
 801319a:	005b      	lsls	r3, r3, #1
 801319c:	4a59      	ldr	r2, [pc, #356]	; (8013304 <Update_Detail+0x8dc>)
 801319e:	4413      	add	r3, r2
 80131a0:	e000      	b.n	80131a4 <Update_Detail+0x77c>
 80131a2:	4b59      	ldr	r3, [pc, #356]	; (8013308 <Update_Detail+0x8e0>)
 80131a4:	2201      	movs	r2, #1
 80131a6:	21e1      	movs	r1, #225	; 0xe1
 80131a8:	f7fa ff22 	bl	800dff0 <DispStr>
        }
        if(List[EXT_REFN].Val < 6) ParamTab[P2x2]=(List[EXT_POSI].Val + 1)*2;
 80131ac:	4b50      	ldr	r3, [pc, #320]	; (80132f0 <Update_Detail+0x8c8>)
 80131ae:	f9b3 30d4 	ldrsh.w	r3, [r3, #212]	; 0xd4
 80131b2:	2b05      	cmp	r3, #5
 80131b4:	dc0a      	bgt.n	80131cc <Update_Detail+0x7a4>
 80131b6:	4b4e      	ldr	r3, [pc, #312]	; (80132f0 <Update_Detail+0x8c8>)
 80131b8:	f9b3 30dc 	ldrsh.w	r3, [r3, #220]	; 0xdc
 80131bc:	3301      	adds	r3, #1
 80131be:	b29b      	uxth	r3, r3
 80131c0:	005b      	lsls	r3, r3, #1
 80131c2:	b29b      	uxth	r3, r3
 80131c4:	b21a      	sxth	r2, r3
 80131c6:	4b51      	ldr	r3, [pc, #324]	; (801330c <Update_Detail+0x8e4>)
 80131c8:	82da      	strh	r2, [r3, #22]
        else                       ParamTab[P2x2]=(List[ V0_POSI].Val + 1)*2;
        break;
 80131ca:	e3de      	b.n	801398a <Update_Detail+0xf62>
        else                       ParamTab[P2x2]=(List[ V0_POSI].Val + 1)*2;
 80131cc:	4b48      	ldr	r3, [pc, #288]	; (80132f0 <Update_Detail+0x8c8>)
 80131ce:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 80131d2:	3301      	adds	r3, #1
 80131d4:	b29b      	uxth	r3, r3
 80131d6:	005b      	lsls	r3, r3, #1
 80131d8:	b29b      	uxth	r3, r3
 80131da:	b21a      	sxth	r2, r3
 80131dc:	4b4b      	ldr	r3, [pc, #300]	; (801330c <Update_Detail+0x8e4>)
 80131de:	82da      	strh	r2, [r3, #22]
        break;
 80131e0:	e3d3      	b.n	801398a <Update_Detail+0xf62>

      case EXT_HIDE:
        if(List[EXT_HIDE].Val == 0) ParamTab[P2F] |=  W_HID;  // W_HID�����ο�����
 80131e2:	4b43      	ldr	r3, [pc, #268]	; (80132f0 <Update_Detail+0x8c8>)
 80131e4:	f9b3 30e4 	ldrsh.w	r3, [r3, #228]	; 0xe4
 80131e8:	2b00      	cmp	r3, #0
 80131ea:	d108      	bne.n	80131fe <Update_Detail+0x7d6>
 80131ec:	4b47      	ldr	r3, [pc, #284]	; (801330c <Update_Detail+0x8e4>)
 80131ee:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80131f2:	f043 0304 	orr.w	r3, r3, #4
 80131f6:	b21a      	sxth	r2, r3
 80131f8:	4b44      	ldr	r3, [pc, #272]	; (801330c <Update_Detail+0x8e4>)
 80131fa:	805a      	strh	r2, [r3, #2]
 80131fc:	e007      	b.n	801320e <Update_Detail+0x7e6>
        else                        ParamTab[P2F] &= ~W_HID;  // W_HID��ʾ�ο�����
 80131fe:	4b43      	ldr	r3, [pc, #268]	; (801330c <Update_Detail+0x8e4>)
 8013200:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8013204:	f023 0304 	bic.w	r3, r3, #4
 8013208:	b21a      	sxth	r2, r3
 801320a:	4b40      	ldr	r3, [pc, #256]	; (801330c <Update_Detail+0x8e4>)
 801320c:	805a      	strh	r2, [r3, #2]
        SetColor(GRY, TCOLOR[EX]);
 801320e:	f64f 031f 	movw	r3, #63519	; 0xf81f
 8013212:	4619      	mov	r1, r3
 8013214:	f643 10e7 	movw	r0, #14823	; 0x39e7
 8013218:	f7fa fed2 	bl	800dfc0 <SetColor>
        Draw_Circle_D(INV, S_X[EXT_REFN]-3, TITLE_Y_POS, 11, 1, 6*5);
 801321c:	23a8      	movs	r3, #168	; 0xa8
 801321e:	b29b      	uxth	r3, r3
 8013220:	3b03      	subs	r3, #3
 8013222:	b29b      	uxth	r3, r3
 8013224:	b219      	sxth	r1, r3
 8013226:	231e      	movs	r3, #30
 8013228:	9301      	str	r3, [sp, #4]
 801322a:	2301      	movs	r3, #1
 801322c:	9300      	str	r3, [sp, #0]
 801322e:	230b      	movs	r3, #11
 8013230:	22e1      	movs	r2, #225	; 0xe1
 8013232:	2001      	movs	r0, #1
 8013234:	f7fa ffb2 	bl	800e19c <Draw_Circle_D>
        DispStr(S_X[EXT_REFN], TITLE_Y_POS, INV, (char*)(List[EXT_HIDE].Val? I[List[EXT_REFN].Val] : I[6]));
 8013238:	20a8      	movs	r0, #168	; 0xa8
 801323a:	4b2d      	ldr	r3, [pc, #180]	; (80132f0 <Update_Detail+0x8c8>)
 801323c:	f9b3 30e4 	ldrsh.w	r3, [r3, #228]	; 0xe4
 8013240:	2b00      	cmp	r3, #0
 8013242:	d00a      	beq.n	801325a <Update_Detail+0x832>
 8013244:	4b2a      	ldr	r3, [pc, #168]	; (80132f0 <Update_Detail+0x8c8>)
 8013246:	f9b3 30d4 	ldrsh.w	r3, [r3, #212]	; 0xd4
 801324a:	461a      	mov	r2, r3
 801324c:	4613      	mov	r3, r2
 801324e:	005b      	lsls	r3, r3, #1
 8013250:	4413      	add	r3, r2
 8013252:	005b      	lsls	r3, r3, #1
 8013254:	4a2b      	ldr	r2, [pc, #172]	; (8013304 <Update_Detail+0x8dc>)
 8013256:	4413      	add	r3, r2
 8013258:	e000      	b.n	801325c <Update_Detail+0x834>
 801325a:	4b2b      	ldr	r3, [pc, #172]	; (8013308 <Update_Detail+0x8e0>)
 801325c:	2201      	movs	r2, #1
 801325e:	21e1      	movs	r1, #225	; 0xe1
 8013260:	f7fa fec6 	bl	800dff0 <DispStr>
      break;
 8013264:	e391      	b.n	801398a <Update_Detail+0xf62>
      case TR_MODE:   // ˢ����ʾ������ʽ
      case FITTRIGG:  // ˢ����ʾ�Զ�������ֵ
      case THRESHOLD: // ˢ����ʾ������ֵ
      case SENSITIVE: // ˢ����ʾ����������
      case TR_TYPE:   // ˢ����ʾ�α���ʽ
        DispStatus();
 8013266:	f000 fc6b 	bl	8013b40 <DispStatus>
        SetColor(GRY, TCOLOR[TRG]);
 801326a:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 801326e:	4619      	mov	r1, r3
 8013270:	f643 10e7 	movw	r0, #14823	; 0x39e7
 8013274:	f7fa fea4 	bl	800dfc0 <SetColor>
        if(i == TR_MODE || i==SENSITIVE)
 8013278:	8afb      	ldrh	r3, [r7, #22]
 801327a:	2b0e      	cmp	r3, #14
 801327c:	d002      	beq.n	8013284 <Update_Detail+0x85c>
 801327e:	8afb      	ldrh	r3, [r7, #22]
 8013280:	2b11      	cmp	r3, #17
 8013282:	d11a      	bne.n	80132ba <Update_Detail+0x892>
        {
          Draw_Circle_D(INV, S_X[TR_MODE]-3, TITLE_Y_POS, 11, 0, 6*8);
 8013284:	23dd      	movs	r3, #221	; 0xdd
 8013286:	b29b      	uxth	r3, r3
 8013288:	3b03      	subs	r3, #3
 801328a:	b29b      	uxth	r3, r3
 801328c:	b219      	sxth	r1, r3
 801328e:	2330      	movs	r3, #48	; 0x30
 8013290:	9301      	str	r3, [sp, #4]
 8013292:	2300      	movs	r3, #0
 8013294:	9300      	str	r3, [sp, #0]
 8013296:	230b      	movs	r3, #11
 8013298:	22e1      	movs	r2, #225	; 0xe1
 801329a:	2001      	movs	r0, #1
 801329c:	f7fa ff7e 	bl	800e19c <Draw_Circle_D>
          DispStr10x14(S_X[TR_MODE], TITLE_Y_POS, INV+SYMB,(List[TR_MODE].Val?("D"):("C")));
 80132a0:	20dd      	movs	r0, #221	; 0xdd
 80132a2:	4b13      	ldr	r3, [pc, #76]	; (80132f0 <Update_Detail+0x8c8>)
 80132a4:	f9b3 3074 	ldrsh.w	r3, [r3, #116]	; 0x74
 80132a8:	2b00      	cmp	r3, #0
 80132aa:	d001      	beq.n	80132b0 <Update_Detail+0x888>
 80132ac:	4b18      	ldr	r3, [pc, #96]	; (8013310 <Update_Detail+0x8e8>)
 80132ae:	e000      	b.n	80132b2 <Update_Detail+0x88a>
 80132b0:	4b18      	ldr	r3, [pc, #96]	; (8013314 <Update_Detail+0x8ec>)
 80132b2:	2211      	movs	r2, #17
 80132b4:	21e1      	movs	r1, #225	; 0xe1
 80132b6:	f7fb f903 	bl	800e4c0 <DispStr10x14>
        }
        if(i == FITTRIGG)
 80132ba:	8afb      	ldrh	r3, [r7, #22]
 80132bc:	2b0f      	cmp	r3, #15
 80132be:	d134      	bne.n	801332a <Update_Detail+0x902>
        {
          DispStr10x14(S_X[FITTRIGG], TITLE_Y_POS, PRN+SYMB,(List[FITTRIGG].Val?("F"):("B")));
 80132c0:	20cf      	movs	r0, #207	; 0xcf
 80132c2:	4b0b      	ldr	r3, [pc, #44]	; (80132f0 <Update_Detail+0x8c8>)
 80132c4:	f9b3 307c 	ldrsh.w	r3, [r3, #124]	; 0x7c
 80132c8:	2b00      	cmp	r3, #0
 80132ca:	d001      	beq.n	80132d0 <Update_Detail+0x8a8>
 80132cc:	4b12      	ldr	r3, [pc, #72]	; (8013318 <Update_Detail+0x8f0>)
 80132ce:	e000      	b.n	80132d2 <Update_Detail+0x8aa>
 80132d0:	4b12      	ldr	r3, [pc, #72]	; (801331c <Update_Detail+0x8f4>)
 80132d2:	2210      	movs	r2, #16
 80132d4:	21e1      	movs	r1, #225	; 0xe1
 80132d6:	f7fb f8f3 	bl	800e4c0 <DispStr10x14>
          if(List[FITTRIGG].Val)KEYTIME = 300;
 80132da:	4b05      	ldr	r3, [pc, #20]	; (80132f0 <Update_Detail+0x8c8>)
 80132dc:	f9b3 307c 	ldrsh.w	r3, [r3, #124]	; 0x7c
 80132e0:	2b00      	cmp	r3, #0
 80132e2:	d01f      	beq.n	8013324 <Update_Detail+0x8fc>
 80132e4:	4b0e      	ldr	r3, [pc, #56]	; (8013320 <Update_Detail+0x8f8>)
 80132e6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80132ea:	801a      	strh	r2, [r3, #0]
 80132ec:	e01d      	b.n	801332a <Update_Detail+0x902>
 80132ee:	bf00      	nop
 80132f0:	20000274 	.word	0x20000274
 80132f4:	080023d4 	.word	0x080023d4
 80132f8:	20007a00 	.word	0x20007a00
 80132fc:	08001e2c 	.word	0x08001e2c
 8013300:	080021f8 	.word	0x080021f8
 8013304:	08001d24 	.word	0x08001d24
 8013308:	08001d48 	.word	0x08001d48
 801330c:	20000140 	.word	0x20000140
 8013310:	080009dc 	.word	0x080009dc
 8013314:	080009e0 	.word	0x080009e0
 8013318:	080009f0 	.word	0x080009f0
 801331c:	080009b0 	.word	0x080009b0
 8013320:	20000776 	.word	0x20000776
          else KEYTIME = 0;
 8013324:	4bac      	ldr	r3, [pc, #688]	; (80135d8 <Update_Detail+0xbb0>)
 8013326:	2200      	movs	r2, #0
 8013328:	801a      	strh	r2, [r3, #0]
        }
        ParamTab[VTx2]= ParamTab[P1x2]+2*List[THRESHOLD].Val;
 801332a:	4bac      	ldr	r3, [pc, #688]	; (80135dc <Update_Detail+0xbb4>)
 801332c:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8013330:	b29a      	uxth	r2, r3
 8013332:	4bab      	ldr	r3, [pc, #684]	; (80135e0 <Update_Detail+0xbb8>)
 8013334:	f9b3 3084 	ldrsh.w	r3, [r3, #132]	; 0x84
 8013338:	b29b      	uxth	r3, r3
 801333a:	005b      	lsls	r3, r3, #1
 801333c:	b29b      	uxth	r3, r3
 801333e:	4413      	add	r3, r2
 8013340:	b29b      	uxth	r3, r3
 8013342:	b21a      	sxth	r2, r3
 8013344:	4ba5      	ldr	r3, [pc, #660]	; (80135dc <Update_Detail+0xbb4>)
 8013346:	839a      	strh	r2, [r3, #28]
        Tmp  = List[SENSITIVE].Val;
 8013348:	4ba5      	ldr	r3, [pc, #660]	; (80135e0 <Update_Detail+0xbb8>)
 801334a:	f9b3 308c 	ldrsh.w	r3, [r3, #140]	; 0x8c
 801334e:	613b      	str	r3, [r7, #16]
        Tmp *= X_SCALE[Range]* Exp(V_SCALE[Range]);
 8013350:	f9b7 3000 	ldrsh.w	r3, [r7]
 8013354:	4aa3      	ldr	r2, [pc, #652]	; (80135e4 <Update_Detail+0xbbc>)
 8013356:	5cd3      	ldrb	r3, [r2, r3]
 8013358:	461c      	mov	r4, r3
 801335a:	f9b7 3000 	ldrsh.w	r3, [r7]
 801335e:	4aa2      	ldr	r2, [pc, #648]	; (80135e8 <Update_Detail+0xbc0>)
 8013360:	5cd3      	ldrb	r3, [r2, r3]
 8013362:	4618      	mov	r0, r3
 8013364:	f7fe f81c 	bl	80113a0 <Exp>
 8013368:	4603      	mov	r3, r0
 801336a:	fb03 f204 	mul.w	r2, r3, r4
 801336e:	693b      	ldr	r3, [r7, #16]
 8013370:	fb02 f303 	mul.w	r3, r2, r3
 8013374:	613b      	str	r3, [r7, #16]
        Value2Str(NumStr, Tmp, V[0], 2, UNSIGN);
 8013376:	2301      	movs	r3, #1
 8013378:	9300      	str	r3, [sp, #0]
 801337a:	2302      	movs	r3, #2
 801337c:	4a9b      	ldr	r2, [pc, #620]	; (80135ec <Update_Detail+0xbc4>)
 801337e:	6939      	ldr	r1, [r7, #16]
 8013380:	489b      	ldr	r0, [pc, #620]	; (80135f0 <Update_Detail+0xbc8>)
 8013382:	f7fd ff11 	bl	80111a8 <Value2Str>
        DispStr10x14(S_X[SENSITIVE], TITLE_Y_POS, INV+SYMB,"E");
 8013386:	20e7      	movs	r0, #231	; 0xe7
 8013388:	4b9a      	ldr	r3, [pc, #616]	; (80135f4 <Update_Detail+0xbcc>)
 801338a:	2211      	movs	r2, #17
 801338c:	21e1      	movs	r1, #225	; 0xe1
 801338e:	f7fb f897 	bl	800e4c0 <DispStr10x14>
        DispStr(S_X[SENSITIVE]+9, TITLE_Y_POS, INV,  "     ");
 8013392:	23e7      	movs	r3, #231	; 0xe7
 8013394:	b29b      	uxth	r3, r3
 8013396:	3309      	adds	r3, #9
 8013398:	b29b      	uxth	r3, r3
 801339a:	b218      	sxth	r0, r3
 801339c:	4b96      	ldr	r3, [pc, #600]	; (80135f8 <Update_Detail+0xbd0>)
 801339e:	2201      	movs	r2, #1
 80133a0:	21e1      	movs	r1, #225	; 0xe1
 80133a2:	f7fa fe25 	bl	800dff0 <DispStr>
        DispStr(S_X[SENSITIVE]+9, TITLE_Y_POS, INV,  (char *)NumStr);
 80133a6:	23e7      	movs	r3, #231	; 0xe7
 80133a8:	b29b      	uxth	r3, r3
 80133aa:	3309      	adds	r3, #9
 80133ac:	b29b      	uxth	r3, r3
 80133ae:	b218      	sxth	r0, r3
 80133b0:	4b8f      	ldr	r3, [pc, #572]	; (80135f0 <Update_Detail+0xbc8>)
 80133b2:	2201      	movs	r2, #1
 80133b4:	21e1      	movs	r1, #225	; 0xe1
 80133b6:	f7fa fe1b 	bl	800dff0 <DispStr>
        ParamTab[VTF]=(List[TR_TYPE].Val)? L_HID : SHOW;
 80133ba:	4b89      	ldr	r3, [pc, #548]	; (80135e0 <Update_Detail+0xbb8>)
 80133bc:	f9b3 3094 	ldrsh.w	r3, [r3, #148]	; 0x94
 80133c0:	2b00      	cmp	r3, #0
 80133c2:	d001      	beq.n	80133c8 <Update_Detail+0x9a0>
 80133c4:	2202      	movs	r2, #2
 80133c6:	e000      	b.n	80133ca <Update_Detail+0x9a2>
 80133c8:	2200      	movs	r2, #0
 80133ca:	4b84      	ldr	r3, [pc, #528]	; (80135dc <Update_Detail+0xbb4>)
 80133cc:	811a      	strh	r2, [r3, #8]
        break;
 80133ce:	e2dc      	b.n	801398a <Update_Detail+0xf62>
      case VIEWPOSI:  // ˢ����ʾˮƽ�Ӵ�λ��
      case SMPL_DPTH: // ˢ����ʾ�������
      case T1_POSI:   // ˢ����ʾ����α�λ��
      case T2_POSI:   // ˢ����ʾ�Ҷ��α�λ��
      case XN_TYPE:   // ˢ����ʾ�α���ʽ
        SetColor(GRY, TCOLOR[XN]);
 80133d0:	f240 73ff 	movw	r3, #2047	; 0x7ff
 80133d4:	4619      	mov	r1, r3
 80133d6:	f643 10e7 	movw	r0, #14823	; 0x39e7
 80133da:	f7fa fdf1 	bl	800dfc0 <SetColor>
        if(i == TIM_BASE)
 80133de:	8afb      	ldrh	r3, [r7, #22]
 80133e0:	2b07      	cmp	r3, #7
 80133e2:	d11e      	bne.n	8013422 <Update_Detail+0x9fa>
        {
          Draw_Circle_D(INV, S_X[i]-3, TITLE_Y_POS, 11, 2, 6*5);
 80133e4:	8afb      	ldrh	r3, [r7, #22]
 80133e6:	4a85      	ldr	r2, [pc, #532]	; (80135fc <Update_Detail+0xbd4>)
 80133e8:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 80133ec:	b29b      	uxth	r3, r3
 80133ee:	3b03      	subs	r3, #3
 80133f0:	b29b      	uxth	r3, r3
 80133f2:	b219      	sxth	r1, r3
 80133f4:	231e      	movs	r3, #30
 80133f6:	9301      	str	r3, [sp, #4]
 80133f8:	2302      	movs	r3, #2
 80133fa:	9300      	str	r3, [sp, #0]
 80133fc:	230b      	movs	r3, #11
 80133fe:	22e1      	movs	r2, #225	; 0xe1
 8013400:	2001      	movs	r0, #1
 8013402:	f7fa fecb 	bl	800e19c <Draw_Circle_D>
          DispStr(S_X[i], TITLE_Y_POS, INV, TimeBase_Str[List[TIM_BASE].Val]);
 8013406:	8afb      	ldrh	r3, [r7, #22]
 8013408:	4a7c      	ldr	r2, [pc, #496]	; (80135fc <Update_Detail+0xbd4>)
 801340a:	f932 0013 	ldrsh.w	r0, [r2, r3, lsl #1]
 801340e:	4b74      	ldr	r3, [pc, #464]	; (80135e0 <Update_Detail+0xbb8>)
 8013410:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8013414:	00db      	lsls	r3, r3, #3
 8013416:	4a7a      	ldr	r2, [pc, #488]	; (8013600 <Update_Detail+0xbd8>)
 8013418:	4413      	add	r3, r2
 801341a:	2201      	movs	r2, #1
 801341c:	21e1      	movs	r1, #225	; 0xe1
 801341e:	f7fa fde7 	bl	800dff0 <DispStr>
        }
        if(i == SMPL_DPTH){
 8013422:	8afb      	ldrh	r3, [r7, #22]
 8013424:	2b09      	cmp	r3, #9
 8013426:	d126      	bne.n	8013476 <Update_Detail+0xa4e>
          Draw_Circle_D(INV, S_X[SMPL_DPTH]-3, LABLE_Y, 11, 0, 6*11);
 8013428:	23f8      	movs	r3, #248	; 0xf8
 801342a:	b29b      	uxth	r3, r3
 801342c:	3b03      	subs	r3, #3
 801342e:	b29b      	uxth	r3, r3
 8013430:	b219      	sxth	r1, r3
 8013432:	2342      	movs	r3, #66	; 0x42
 8013434:	9301      	str	r3, [sp, #4]
 8013436:	2300      	movs	r3, #0
 8013438:	9300      	str	r3, [sp, #0]
 801343a:	230b      	movs	r3, #11
 801343c:	2203      	movs	r2, #3
 801343e:	2001      	movs	r0, #1
 8013440:	f7fa feac 	bl	800e19c <Draw_Circle_D>
          DispStr(S_X[SMPL_DPTH],    LABLE_Y,  INV, "SmplDpth:  ");
 8013444:	20f8      	movs	r0, #248	; 0xf8
 8013446:	4b6f      	ldr	r3, [pc, #444]	; (8013604 <Update_Detail+0xbdc>)
 8013448:	2201      	movs	r2, #1
 801344a:	2103      	movs	r1, #3
 801344c:	f7fa fdd0 	bl	800dff0 <DispStr>
          DispStr(S_X[SMPL_DPTH]+6*9, LABLE_Y,  INV, (char *)&D[List[SMPL_DPTH].Val]);
 8013450:	23f8      	movs	r3, #248	; 0xf8
 8013452:	b29b      	uxth	r3, r3
 8013454:	3336      	adds	r3, #54	; 0x36
 8013456:	b29b      	uxth	r3, r3
 8013458:	b218      	sxth	r0, r3
 801345a:	4b61      	ldr	r3, [pc, #388]	; (80135e0 <Update_Detail+0xbb8>)
 801345c:	f9b3 304c 	ldrsh.w	r3, [r3, #76]	; 0x4c
 8013460:	461a      	mov	r2, r3
 8013462:	4613      	mov	r3, r2
 8013464:	005b      	lsls	r3, r3, #1
 8013466:	4413      	add	r3, r2
 8013468:	005b      	lsls	r3, r3, #1
 801346a:	4a67      	ldr	r2, [pc, #412]	; (8013608 <Update_Detail+0xbe0>)
 801346c:	4413      	add	r3, r2
 801346e:	2201      	movs	r2, #1
 8013470:	2103      	movs	r1, #3
 8013472:	f7fa fdbd 	bl	800dff0 <DispStr>
        }
        Update_Windows();
 8013476:	f000 fbad 	bl	8013bd4 <Update_Windows>

        ParamTab[T0x1] = 2 + Presampling - List[VIEWPOSI].Val;
 801347a:	4b64      	ldr	r3, [pc, #400]	; (801360c <Update_Detail+0xbe4>)
 801347c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8013480:	b29a      	uxth	r2, r3
 8013482:	4b57      	ldr	r3, [pc, #348]	; (80135e0 <Update_Detail+0xbb8>)
 8013484:	f9b3 3044 	ldrsh.w	r3, [r3, #68]	; 0x44
 8013488:	b29b      	uxth	r3, r3
 801348a:	1ad3      	subs	r3, r2, r3
 801348c:	b29b      	uxth	r3, r3
 801348e:	3302      	adds	r3, #2
 8013490:	b29b      	uxth	r3, r3
 8013492:	b21a      	sxth	r2, r3
 8013494:	4b51      	ldr	r3, [pc, #324]	; (80135dc <Update_Detail+0xbb4>)
 8013496:	845a      	strh	r2, [r3, #34]	; 0x22
        ParamTab[T0F] &= ~D_HID;
 8013498:	4b50      	ldr	r3, [pc, #320]	; (80135dc <Update_Detail+0xbb4>)
 801349a:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 801349e:	f023 0301 	bic.w	r3, r3, #1
 80134a2:	b21a      	sxth	r2, r3
 80134a4:	4b4d      	ldr	r3, [pc, #308]	; (80135dc <Update_Detail+0xbb4>)
 80134a6:	81da      	strh	r2, [r3, #14]
        ParamTab[T1F] &= ~D_HID;
 80134a8:	4b4c      	ldr	r3, [pc, #304]	; (80135dc <Update_Detail+0xbb4>)
 80134aa:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 80134ae:	f023 0301 	bic.w	r3, r3, #1
 80134b2:	b21a      	sxth	r2, r3
 80134b4:	4b49      	ldr	r3, [pc, #292]	; (80135dc <Update_Detail+0xbb4>)
 80134b6:	821a      	strh	r2, [r3, #16]
        ParamTab[T1F] &= ~D_HID;
 80134b8:	4b48      	ldr	r3, [pc, #288]	; (80135dc <Update_Detail+0xbb4>)
 80134ba:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 80134be:	f023 0301 	bic.w	r3, r3, #1
 80134c2:	b21a      	sxth	r2, r3
 80134c4:	4b45      	ldr	r3, [pc, #276]	; (80135dc <Update_Detail+0xbb4>)
 80134c6:	821a      	strh	r2, [r3, #16]
        ParamTab[T1x1] = List[T1_POSI].Val+1;
 80134c8:	4b45      	ldr	r3, [pc, #276]	; (80135e0 <Update_Detail+0xbb8>)
 80134ca:	f9b3 3054 	ldrsh.w	r3, [r3, #84]	; 0x54
 80134ce:	b29b      	uxth	r3, r3
 80134d0:	3301      	adds	r3, #1
 80134d2:	b29b      	uxth	r3, r3
 80134d4:	b21a      	sxth	r2, r3
 80134d6:	4b41      	ldr	r3, [pc, #260]	; (80135dc <Update_Detail+0xbb4>)
 80134d8:	849a      	strh	r2, [r3, #36]	; 0x24
        ParamTab[T2x1] = List[T2_POSI].Val+1;
 80134da:	4b41      	ldr	r3, [pc, #260]	; (80135e0 <Update_Detail+0xbb8>)
 80134dc:	f9b3 305c 	ldrsh.w	r3, [r3, #92]	; 0x5c
 80134e0:	b29b      	uxth	r3, r3
 80134e2:	3301      	adds	r3, #1
 80134e4:	b29b      	uxth	r3, r3
 80134e6:	b21a      	sxth	r2, r3
 80134e8:	4b3c      	ldr	r3, [pc, #240]	; (80135dc <Update_Detail+0xbb4>)
 80134ea:	84da      	strh	r2, [r3, #38]	; 0x26
        ParamTab[T1F]  = (List[XN_TYPE].Val)? L_HID : SHOW;
 80134ec:	4b3c      	ldr	r3, [pc, #240]	; (80135e0 <Update_Detail+0xbb8>)
 80134ee:	f9b3 3064 	ldrsh.w	r3, [r3, #100]	; 0x64
 80134f2:	2b00      	cmp	r3, #0
 80134f4:	d001      	beq.n	80134fa <Update_Detail+0xad2>
 80134f6:	2202      	movs	r2, #2
 80134f8:	e000      	b.n	80134fc <Update_Detail+0xad4>
 80134fa:	2200      	movs	r2, #0
 80134fc:	4b37      	ldr	r3, [pc, #220]	; (80135dc <Update_Detail+0xbb4>)
 80134fe:	821a      	strh	r2, [r3, #16]
        ParamTab[T2F]  = (List[XN_TYPE].Val)? L_HID : SHOW;
 8013500:	4b37      	ldr	r3, [pc, #220]	; (80135e0 <Update_Detail+0xbb8>)
 8013502:	f9b3 3064 	ldrsh.w	r3, [r3, #100]	; 0x64
 8013506:	2b00      	cmp	r3, #0
 8013508:	d001      	beq.n	801350e <Update_Detail+0xae6>
 801350a:	2202      	movs	r2, #2
 801350c:	e000      	b.n	8013510 <Update_Detail+0xae8>
 801350e:	2200      	movs	r2, #0
 8013510:	4b32      	ldr	r3, [pc, #200]	; (80135dc <Update_Detail+0xbb4>)
 8013512:	825a      	strh	r2, [r3, #18]
        Tmp  = ParamTab[T2x1] - ParamTab[T1x1];
 8013514:	4b31      	ldr	r3, [pc, #196]	; (80135dc <Update_Detail+0xbb4>)
 8013516:	f9b3 3026 	ldrsh.w	r3, [r3, #38]	; 0x26
 801351a:	461a      	mov	r2, r3
 801351c:	4b2f      	ldr	r3, [pc, #188]	; (80135dc <Update_Detail+0xbb4>)
 801351e:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	; 0x24
 8013522:	1ad3      	subs	r3, r2, r3
 8013524:	613b      	str	r3, [r7, #16]
        Tmp *= B_SCALE[List[TIM_BASE].Val]* Exp(T_SCALE[List[TIM_BASE].Val]);
 8013526:	4b2e      	ldr	r3, [pc, #184]	; (80135e0 <Update_Detail+0xbb8>)
 8013528:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 801352c:	461a      	mov	r2, r3
 801352e:	4b38      	ldr	r3, [pc, #224]	; (8013610 <Update_Detail+0xbe8>)
 8013530:	5c9b      	ldrb	r3, [r3, r2]
 8013532:	461c      	mov	r4, r3
 8013534:	4b2a      	ldr	r3, [pc, #168]	; (80135e0 <Update_Detail+0xbb8>)
 8013536:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 801353a:	461a      	mov	r2, r3
 801353c:	4b35      	ldr	r3, [pc, #212]	; (8013614 <Update_Detail+0xbec>)
 801353e:	5c9b      	ldrb	r3, [r3, r2]
 8013540:	4618      	mov	r0, r3
 8013542:	f7fd ff2d 	bl	80113a0 <Exp>
 8013546:	4603      	mov	r3, r0
 8013548:	fb03 f204 	mul.w	r2, r3, r4
 801354c:	693b      	ldr	r3, [r7, #16]
 801354e:	fb02 f303 	mul.w	r3, r2, r3
 8013552:	613b      	str	r3, [r7, #16]
        Value2Str(NumStr, Tmp, T[0], 3, UNSIGN);
 8013554:	2301      	movs	r3, #1
 8013556:	9300      	str	r3, [sp, #0]
 8013558:	2303      	movs	r3, #3
 801355a:	4a2f      	ldr	r2, [pc, #188]	; (8013618 <Update_Detail+0xbf0>)
 801355c:	6939      	ldr	r1, [r7, #16]
 801355e:	4824      	ldr	r0, [pc, #144]	; (80135f0 <Update_Detail+0xbc8>)
 8013560:	f7fd fe22 	bl	80111a8 <Value2Str>
        Draw_Circle_D(INV, S_X[V1_POSI]-3, LABLE_Y, 11, 0, 6*9);
 8013564:	2307      	movs	r3, #7
 8013566:	b29b      	uxth	r3, r3
 8013568:	3b03      	subs	r3, #3
 801356a:	b29b      	uxth	r3, r3
 801356c:	b219      	sxth	r1, r3
 801356e:	2336      	movs	r3, #54	; 0x36
 8013570:	9301      	str	r3, [sp, #4]
 8013572:	2300      	movs	r3, #0
 8013574:	9300      	str	r3, [sp, #0]
 8013576:	230b      	movs	r3, #11
 8013578:	2203      	movs	r2, #3
 801357a:	2001      	movs	r0, #1
 801357c:	f7fa fe0e 	bl	800e19c <Draw_Circle_D>
        DispStr(S_X[T1_POSI]+0*6, LABLE_Y, INV+SYMB, "]");
 8013580:	2007      	movs	r0, #7
 8013582:	4b26      	ldr	r3, [pc, #152]	; (801361c <Update_Detail+0xbf4>)
 8013584:	2211      	movs	r2, #17
 8013586:	2103      	movs	r1, #3
 8013588:	f7fa fd32 	bl	800dff0 <DispStr>
        DispStr(S_X[T1_POSI]+1*6, LABLE_Y, INV,      "T:      ");
 801358c:	2307      	movs	r3, #7
 801358e:	b29b      	uxth	r3, r3
 8013590:	3306      	adds	r3, #6
 8013592:	b29b      	uxth	r3, r3
 8013594:	b218      	sxth	r0, r3
 8013596:	4b22      	ldr	r3, [pc, #136]	; (8013620 <Update_Detail+0xbf8>)
 8013598:	2201      	movs	r2, #1
 801359a:	2103      	movs	r1, #3
 801359c:	f7fa fd28 	bl	800dff0 <DispStr>
        DispStr(S_X[T1_POSI]+7*6, LABLE_Y, INV,  "  ");
 80135a0:	2307      	movs	r3, #7
 80135a2:	b29b      	uxth	r3, r3
 80135a4:	332a      	adds	r3, #42	; 0x2a
 80135a6:	b29b      	uxth	r3, r3
 80135a8:	b218      	sxth	r0, r3
 80135aa:	4b1e      	ldr	r3, [pc, #120]	; (8013624 <Update_Detail+0xbfc>)
 80135ac:	2201      	movs	r2, #1
 80135ae:	2103      	movs	r1, #3
 80135b0:	f7fa fd1e 	bl	800dff0 <DispStr>
        DispStr(S_X[T1_POSI]+3*6, LABLE_Y, INV,  (char *)NumStr);
 80135b4:	2307      	movs	r3, #7
 80135b6:	b29b      	uxth	r3, r3
 80135b8:	3312      	adds	r3, #18
 80135ba:	b29b      	uxth	r3, r3
 80135bc:	b218      	sxth	r0, r3
 80135be:	4b0c      	ldr	r3, [pc, #48]	; (80135f0 <Update_Detail+0xbc8>)
 80135c0:	2201      	movs	r2, #1
 80135c2:	2103      	movs	r1, #3
 80135c4:	f7fa fd14 	bl	800dff0 <DispStr>
        Set_Base(List[TIM_BASE].Val);          // Ӳ������ɨ��ʱ����λ
 80135c8:	4b05      	ldr	r3, [pc, #20]	; (80135e0 <Update_Detail+0xbb8>)
 80135ca:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 80135ce:	4618      	mov	r0, r3
 80135d0:	f7f9 f84c 	bl	800c66c <Set_Base>
      break;
 80135d4:	e1d9      	b.n	801398a <Update_Detail+0xf62>
 80135d6:	bf00      	nop
 80135d8:	20000776 	.word	0x20000776
 80135dc:	20000140 	.word	0x20000140
 80135e0:	20000274 	.word	0x20000274
 80135e4:	080021cc 	.word	0x080021cc
 80135e8:	080021a4 	.word	0x080021a4
 80135ec:	08001d9c 	.word	0x08001d9c
 80135f0:	20003668 	.word	0x20003668
 80135f4:	080009ec 	.word	0x080009ec
 80135f8:	080009e4 	.word	0x080009e4
 80135fc:	080021f8 	.word	0x080021f8
 8013600:	200001ac 	.word	0x200001ac
 8013604:	080009c4 	.word	0x080009c4
 8013608:	08001ce8 	.word	0x08001ce8
 801360c:	20000536 	.word	0x20000536
 8013610:	080021b8 	.word	0x080021b8
 8013614:	08002190 	.word	0x08002190
 8013618:	08001d84 	.word	0x08001d84
 801361c:	080009b4 	.word	0x080009b4
 8013620:	080009d0 	.word	0x080009d0
 8013624:	08000a24 	.word	0x08000a24

      case FREQUENC://��ʾƵ��
        FTmp=Edge*25*1000/2;
 8013628:	4bb7      	ldr	r3, [pc, #732]	; (8013908 <Update_Detail+0xee0>)
 801362a:	681b      	ldr	r3, [r3, #0]
 801362c:	f243 02d4 	movw	r2, #12500	; 0x30d4
 8013630:	fb02 f303 	mul.w	r3, r2, r3
 8013634:	60fb      	str	r3, [r7, #12]
        if(List[TIM_BASE].Val<9)FTmp= FTmp*1000000;
 8013636:	4bb5      	ldr	r3, [pc, #724]	; (801390c <Update_Detail+0xee4>)
 8013638:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 801363c:	2b08      	cmp	r3, #8
 801363e:	dc05      	bgt.n	801364c <Update_Detail+0xc24>
 8013640:	68fb      	ldr	r3, [r7, #12]
 8013642:	4ab3      	ldr	r2, [pc, #716]	; (8013910 <Update_Detail+0xee8>)
 8013644:	fb02 f303 	mul.w	r3, r2, r3
 8013648:	60fb      	str	r3, [r7, #12]
 801364a:	e00a      	b.n	8013662 <Update_Detail+0xc3a>
        else if(List[TIM_BASE].Val<18)FTmp= FTmp*1000;
 801364c:	4baf      	ldr	r3, [pc, #700]	; (801390c <Update_Detail+0xee4>)
 801364e:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8013652:	2b11      	cmp	r3, #17
 8013654:	dc05      	bgt.n	8013662 <Update_Detail+0xc3a>
 8013656:	68fb      	ldr	r3, [r7, #12]
 8013658:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 801365c:	fb02 f303 	mul.w	r3, r2, r3
 8013660:	60fb      	str	r3, [r7, #12]
        FTmp=FTmp/Ts[List[TIM_BASE].Val]/DEPTH[List[SMPL_DPTH].Val];
 8013662:	4baa      	ldr	r3, [pc, #680]	; (801390c <Update_Detail+0xee4>)
 8013664:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8013668:	461a      	mov	r2, r3
 801366a:	4baa      	ldr	r3, [pc, #680]	; (8013914 <Update_Detail+0xeec>)
 801366c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013670:	461a      	mov	r2, r3
 8013672:	68fb      	ldr	r3, [r7, #12]
 8013674:	fbb3 f3f2 	udiv	r3, r3, r2
 8013678:	4aa4      	ldr	r2, [pc, #656]	; (801390c <Update_Detail+0xee4>)
 801367a:	f9b2 204c 	ldrsh.w	r2, [r2, #76]	; 0x4c
 801367e:	4611      	mov	r1, r2
 8013680:	4aa5      	ldr	r2, [pc, #660]	; (8013918 <Update_Detail+0xef0>)
 8013682:	f932 2011 	ldrsh.w	r2, [r2, r1, lsl #1]
 8013686:	fbb3 f3f2 	udiv	r3, r3, r2
 801368a:	60fb      	str	r3, [r7, #12]
          DispMeter(i, 1, UNSIGN,FTmp);
 801368c:	f9b7 0016 	ldrsh.w	r0, [r7, #22]
 8013690:	68fb      	ldr	r3, [r7, #12]
 8013692:	2201      	movs	r2, #1
 8013694:	2101      	movs	r1, #1
 8013696:	f000 f9d3 	bl	8013a40 <DispMeter>
      break;
 801369a:	e176      	b.n	801398a <Update_Detail+0xf62>

      case DUTY:    //��ʾռ�ձ�
         DispMeter(i, k, UNSIGN,(HighT*100)/k);
 801369c:	f9b7 0016 	ldrsh.w	r0, [r7, #22]
 80136a0:	887b      	ldrh	r3, [r7, #2]
 80136a2:	b2d9      	uxtb	r1, r3
 80136a4:	4b9d      	ldr	r3, [pc, #628]	; (801391c <Update_Detail+0xef4>)
 80136a6:	681b      	ldr	r3, [r3, #0]
 80136a8:	2264      	movs	r2, #100	; 0x64
 80136aa:	fb02 f203 	mul.w	r2, r2, r3
 80136ae:	887b      	ldrh	r3, [r7, #2]
 80136b0:	fb92 f3f3 	sdiv	r3, r2, r3
 80136b4:	2201      	movs	r2, #1
 80136b6:	f000 f9c3 	bl	8013a40 <DispMeter>
        break;
 80136ba:	e166      	b.n	801398a <Update_Detail+0xf62>

      case VRMS://��ʾ��ѹ��Чֵ
        if(abs(Vrms)<4)
 80136bc:	4b98      	ldr	r3, [pc, #608]	; (8013920 <Update_Detail+0xef8>)
 80136be:	681b      	ldr	r3, [r3, #0]
 80136c0:	f113 0f03 	cmn.w	r3, #3
 80136c4:	db06      	blt.n	80136d4 <Update_Detail+0xcac>
 80136c6:	4b96      	ldr	r3, [pc, #600]	; (8013920 <Update_Detail+0xef8>)
 80136c8:	681b      	ldr	r3, [r3, #0]
 80136ca:	2b03      	cmp	r3, #3
 80136cc:	dc02      	bgt.n	80136d4 <Update_Detail+0xcac>
        {
          Tmp = 0.00;
 80136ce:	2300      	movs	r3, #0
 80136d0:	613b      	str	r3, [r7, #16]
 80136d2:	e026      	b.n	8013722 <Update_Detail+0xcfa>
        }else{
		  scale = (List[PROBEATT].Val?
 80136d4:	4b8d      	ldr	r3, [pc, #564]	; (801390c <Update_Detail+0xee4>)
 80136d6:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
                  VScale_10X[List[Y_RANGES].Val]:VScale[List[Y_RANGES].Val])*40;
 80136da:	2b00      	cmp	r3, #0
 80136dc:	d00b      	beq.n	80136f6 <Update_Detail+0xcce>
 80136de:	4b8b      	ldr	r3, [pc, #556]	; (801390c <Update_Detail+0xee4>)
 80136e0:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80136e4:	461a      	mov	r2, r3
 80136e6:	4b8f      	ldr	r3, [pc, #572]	; (8013924 <Update_Detail+0xefc>)
 80136e8:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80136ec:	4613      	mov	r3, r2
 80136ee:	009b      	lsls	r3, r3, #2
 80136f0:	4413      	add	r3, r2
 80136f2:	00db      	lsls	r3, r3, #3
 80136f4:	e00a      	b.n	801370c <Update_Detail+0xce4>
 80136f6:	4b85      	ldr	r3, [pc, #532]	; (801390c <Update_Detail+0xee4>)
 80136f8:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80136fc:	461a      	mov	r2, r3
 80136fe:	4b8a      	ldr	r3, [pc, #552]	; (8013928 <Update_Detail+0xf00>)
 8013700:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8013704:	4613      	mov	r3, r2
 8013706:	009b      	lsls	r3, r3, #2
 8013708:	4413      	add	r3, r2
 801370a:	00db      	lsls	r3, r3, #3
		  scale = (List[PROBEATT].Val?
 801370c:	60bb      	str	r3, [r7, #8]
	          Tmp  = ((((Vrms)*Ak)>>12))*scale;
 801370e:	4b84      	ldr	r3, [pc, #528]	; (8013920 <Update_Detail+0xef8>)
 8013710:	681b      	ldr	r3, [r3, #0]
 8013712:	687a      	ldr	r2, [r7, #4]
 8013714:	fb02 f303 	mul.w	r3, r2, r3
 8013718:	131a      	asrs	r2, r3, #12
 801371a:	68bb      	ldr	r3, [r7, #8]
 801371c:	fb02 f303 	mul.w	r3, r2, r3
 8013720:	613b      	str	r3, [r7, #16]
        }
        DispMeter(i, 1, UNSIGN, Tmp);
 8013722:	f9b7 0016 	ldrsh.w	r0, [r7, #22]
 8013726:	693b      	ldr	r3, [r7, #16]
 8013728:	2201      	movs	r2, #1
 801372a:	2101      	movs	r1, #1
 801372c:	f000 f988 	bl	8013a40 <DispMeter>
        break;
 8013730:	e12b      	b.n	801398a <Update_Detail+0xf62>

      case VP_P://��ʾ��ѹ���ֵ
        if(abs(Vpp)<7){
 8013732:	4b7e      	ldr	r3, [pc, #504]	; (801392c <Update_Detail+0xf04>)
 8013734:	681b      	ldr	r3, [r3, #0]
 8013736:	f113 0f06 	cmn.w	r3, #6
 801373a:	db06      	blt.n	801374a <Update_Detail+0xd22>
 801373c:	4b7b      	ldr	r3, [pc, #492]	; (801392c <Update_Detail+0xf04>)
 801373e:	681b      	ldr	r3, [r3, #0]
 8013740:	2b06      	cmp	r3, #6
 8013742:	dc02      	bgt.n	801374a <Update_Detail+0xd22>
          Tmp = 0.00;
 8013744:	2300      	movs	r3, #0
 8013746:	613b      	str	r3, [r7, #16]
 8013748:	e033      	b.n	80137b2 <Update_Detail+0xd8a>
        }
        else
        {
           scale = (List[PROBEATT].Val?
 801374a:	4b70      	ldr	r3, [pc, #448]	; (801390c <Update_Detail+0xee4>)
 801374c:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
                  VScale_10X[List[Y_RANGES].Val]:VScale[List[Y_RANGES].Val])*40;
 8013750:	2b00      	cmp	r3, #0
 8013752:	d00b      	beq.n	801376c <Update_Detail+0xd44>
 8013754:	4b6d      	ldr	r3, [pc, #436]	; (801390c <Update_Detail+0xee4>)
 8013756:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801375a:	461a      	mov	r2, r3
 801375c:	4b71      	ldr	r3, [pc, #452]	; (8013924 <Update_Detail+0xefc>)
 801375e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8013762:	4613      	mov	r3, r2
 8013764:	009b      	lsls	r3, r3, #2
 8013766:	4413      	add	r3, r2
 8013768:	00db      	lsls	r3, r3, #3
 801376a:	e00a      	b.n	8013782 <Update_Detail+0xd5a>
 801376c:	4b67      	ldr	r3, [pc, #412]	; (801390c <Update_Detail+0xee4>)
 801376e:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8013772:	461a      	mov	r2, r3
 8013774:	4b6c      	ldr	r3, [pc, #432]	; (8013928 <Update_Detail+0xf00>)
 8013776:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 801377a:	4613      	mov	r3, r2
 801377c:	009b      	lsls	r3, r3, #2
 801377e:	4413      	add	r3, r2
 8013780:	00db      	lsls	r3, r3, #3
           scale = (List[PROBEATT].Val?
 8013782:	60bb      	str	r3, [r7, #8]
          Tmp  = ((((Vmax-2048)*(Ak))>>12)-(((Vmin-2048)*(Ak))>>12))*scale;
 8013784:	4b6a      	ldr	r3, [pc, #424]	; (8013930 <Update_Detail+0xf08>)
 8013786:	f9b3 3000 	ldrsh.w	r3, [r3]
 801378a:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 801378e:	687a      	ldr	r2, [r7, #4]
 8013790:	fb02 f303 	mul.w	r3, r2, r3
 8013794:	131a      	asrs	r2, r3, #12
 8013796:	4b67      	ldr	r3, [pc, #412]	; (8013934 <Update_Detail+0xf0c>)
 8013798:	f9b3 3000 	ldrsh.w	r3, [r3]
 801379c:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 80137a0:	6879      	ldr	r1, [r7, #4]
 80137a2:	fb01 f303 	mul.w	r3, r1, r3
 80137a6:	131b      	asrs	r3, r3, #12
 80137a8:	1ad2      	subs	r2, r2, r3
 80137aa:	68bb      	ldr	r3, [r7, #8]
 80137ac:	fb02 f303 	mul.w	r3, r2, r3
 80137b0:	613b      	str	r3, [r7, #16]
        }
        DispMeter(i, 1, UNSIGN, Tmp);
 80137b2:	f9b7 0016 	ldrsh.w	r0, [r7, #22]
 80137b6:	693b      	ldr	r3, [r7, #16]
 80137b8:	2201      	movs	r2, #1
 80137ba:	2101      	movs	r1, #1
 80137bc:	f000 f940 	bl	8013a40 <DispMeter>
        break;
 80137c0:	e0e3      	b.n	801398a <Update_Detail+0xf62>

      case VAVG://��ʾ��ѹƽ��ֵ
        if(abs(Vavg)<4)
 80137c2:	4b5d      	ldr	r3, [pc, #372]	; (8013938 <Update_Detail+0xf10>)
 80137c4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80137c8:	2b00      	cmp	r3, #0
 80137ca:	bfb8      	it	lt
 80137cc:	425b      	neglt	r3, r3
 80137ce:	b29b      	uxth	r3, r3
 80137d0:	2b03      	cmp	r3, #3
 80137d2:	d802      	bhi.n	80137da <Update_Detail+0xdb2>
        {
          Tmp = 0.00;
 80137d4:	2300      	movs	r3, #0
 80137d6:	613b      	str	r3, [r7, #16]
 80137d8:	e02e      	b.n	8013838 <Update_Detail+0xe10>
        }else{
          scale = (List[PROBEATT].Val?
 80137da:	4b4c      	ldr	r3, [pc, #304]	; (801390c <Update_Detail+0xee4>)
 80137dc:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
                  VScale_10X[List[Y_RANGES].Val]:VScale[List[Y_RANGES].Val])*40;
 80137e0:	2b00      	cmp	r3, #0
 80137e2:	d00b      	beq.n	80137fc <Update_Detail+0xdd4>
 80137e4:	4b49      	ldr	r3, [pc, #292]	; (801390c <Update_Detail+0xee4>)
 80137e6:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80137ea:	461a      	mov	r2, r3
 80137ec:	4b4d      	ldr	r3, [pc, #308]	; (8013924 <Update_Detail+0xefc>)
 80137ee:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80137f2:	4613      	mov	r3, r2
 80137f4:	009b      	lsls	r3, r3, #2
 80137f6:	4413      	add	r3, r2
 80137f8:	00db      	lsls	r3, r3, #3
 80137fa:	e00a      	b.n	8013812 <Update_Detail+0xdea>
 80137fc:	4b43      	ldr	r3, [pc, #268]	; (801390c <Update_Detail+0xee4>)
 80137fe:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8013802:	461a      	mov	r2, r3
 8013804:	4b48      	ldr	r3, [pc, #288]	; (8013928 <Update_Detail+0xf00>)
 8013806:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 801380a:	4613      	mov	r3, r2
 801380c:	009b      	lsls	r3, r3, #2
 801380e:	4413      	add	r3, r2
 8013810:	00db      	lsls	r3, r3, #3
          scale = (List[PROBEATT].Val?
 8013812:	60bb      	str	r3, [r7, #8]
          Tmp = ((((Vavg-2048)*(Ak))>>12)+100-List[V0_POSI].Val)*scale;
 8013814:	4b48      	ldr	r3, [pc, #288]	; (8013938 <Update_Detail+0xf10>)
 8013816:	f9b3 3000 	ldrsh.w	r3, [r3]
 801381a:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 801381e:	687a      	ldr	r2, [r7, #4]
 8013820:	fb02 f303 	mul.w	r3, r2, r3
 8013824:	131b      	asrs	r3, r3, #12
 8013826:	3364      	adds	r3, #100	; 0x64
 8013828:	4a38      	ldr	r2, [pc, #224]	; (801390c <Update_Detail+0xee4>)
 801382a:	f9b2 201c 	ldrsh.w	r2, [r2, #28]
 801382e:	1a9a      	subs	r2, r3, r2
 8013830:	68bb      	ldr	r3, [r7, #8]
 8013832:	fb02 f303 	mul.w	r3, r2, r3
 8013836:	613b      	str	r3, [r7, #16]
        }
        DispMeter(i, 1, UNSIGN, Tmp);
 8013838:	f9b7 0016 	ldrsh.w	r0, [r7, #22]
 801383c:	693b      	ldr	r3, [r7, #16]
 801383e:	2201      	movs	r2, #1
 8013840:	2101      	movs	r1, #1
 8013842:	f000 f8fd 	bl	8013a40 <DispMeter>
        break;
 8013846:	e0a0      	b.n	801398a <Update_Detail+0xf62>

      case VMAX://��ʾ��ѹ���ֵ
        if(abs(Vmax)<4){
 8013848:	4b39      	ldr	r3, [pc, #228]	; (8013930 <Update_Detail+0xf08>)
 801384a:	f9b3 3000 	ldrsh.w	r3, [r3]
 801384e:	2b00      	cmp	r3, #0
 8013850:	bfb8      	it	lt
 8013852:	425b      	neglt	r3, r3
 8013854:	b29b      	uxth	r3, r3
 8013856:	2b03      	cmp	r3, #3
 8013858:	d802      	bhi.n	8013860 <Update_Detail+0xe38>
          Tmp = 0.00;
 801385a:	2300      	movs	r3, #0
 801385c:	613b      	str	r3, [r7, #16]
 801385e:	e02e      	b.n	80138be <Update_Detail+0xe96>
        }else{
		  scale = (List[PROBEATT].Val?
 8013860:	4b2a      	ldr	r3, [pc, #168]	; (801390c <Update_Detail+0xee4>)
 8013862:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
                  VScale_10X[List[Y_RANGES].Val]:VScale[List[Y_RANGES].Val])*40;
 8013866:	2b00      	cmp	r3, #0
 8013868:	d00b      	beq.n	8013882 <Update_Detail+0xe5a>
 801386a:	4b28      	ldr	r3, [pc, #160]	; (801390c <Update_Detail+0xee4>)
 801386c:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8013870:	461a      	mov	r2, r3
 8013872:	4b2c      	ldr	r3, [pc, #176]	; (8013924 <Update_Detail+0xefc>)
 8013874:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8013878:	4613      	mov	r3, r2
 801387a:	009b      	lsls	r3, r3, #2
 801387c:	4413      	add	r3, r2
 801387e:	00db      	lsls	r3, r3, #3
 8013880:	e00a      	b.n	8013898 <Update_Detail+0xe70>
 8013882:	4b22      	ldr	r3, [pc, #136]	; (801390c <Update_Detail+0xee4>)
 8013884:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8013888:	461a      	mov	r2, r3
 801388a:	4b27      	ldr	r3, [pc, #156]	; (8013928 <Update_Detail+0xf00>)
 801388c:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8013890:	4613      	mov	r3, r2
 8013892:	009b      	lsls	r3, r3, #2
 8013894:	4413      	add	r3, r2
 8013896:	00db      	lsls	r3, r3, #3
		  scale = (List[PROBEATT].Val?
 8013898:	60bb      	str	r3, [r7, #8]
          Tmp  = ((((Vmax-2048)*(Ak))>>12)+100-List[V0_POSI].Val)*scale;
 801389a:	4b25      	ldr	r3, [pc, #148]	; (8013930 <Update_Detail+0xf08>)
 801389c:	f9b3 3000 	ldrsh.w	r3, [r3]
 80138a0:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 80138a4:	687a      	ldr	r2, [r7, #4]
 80138a6:	fb02 f303 	mul.w	r3, r2, r3
 80138aa:	131b      	asrs	r3, r3, #12
 80138ac:	3364      	adds	r3, #100	; 0x64
 80138ae:	4a17      	ldr	r2, [pc, #92]	; (801390c <Update_Detail+0xee4>)
 80138b0:	f9b2 201c 	ldrsh.w	r2, [r2, #28]
 80138b4:	1a9a      	subs	r2, r3, r2
 80138b6:	68bb      	ldr	r3, [r7, #8]
 80138b8:	fb02 f303 	mul.w	r3, r2, r3
 80138bc:	613b      	str	r3, [r7, #16]
        }
        DispMeter(i, 1, UNSIGN, Tmp);
 80138be:	f9b7 0016 	ldrsh.w	r0, [r7, #22]
 80138c2:	693b      	ldr	r3, [r7, #16]
 80138c4:	2201      	movs	r2, #1
 80138c6:	2101      	movs	r1, #1
 80138c8:	f000 f8ba 	bl	8013a40 <DispMeter>
        break;
 80138cc:	e05d      	b.n	801398a <Update_Detail+0xf62>

      case VMIN://��ʾ��ѹ��Сֵ
        if(abs(Vmin)<4){
 80138ce:	4b19      	ldr	r3, [pc, #100]	; (8013934 <Update_Detail+0xf0c>)
 80138d0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80138d4:	2b00      	cmp	r3, #0
 80138d6:	bfb8      	it	lt
 80138d8:	425b      	neglt	r3, r3
 80138da:	b29b      	uxth	r3, r3
 80138dc:	2b03      	cmp	r3, #3
 80138de:	d802      	bhi.n	80138e6 <Update_Detail+0xebe>
          Tmp = 0.00;
 80138e0:	2300      	movs	r3, #0
 80138e2:	613b      	str	r3, [r7, #16]
 80138e4:	e048      	b.n	8013978 <Update_Detail+0xf50>
        }else{
		  scale = (List[PROBEATT].Val?
 80138e6:	4b09      	ldr	r3, [pc, #36]	; (801390c <Update_Detail+0xee4>)
 80138e8:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
                           VScale_10X[List[Y_RANGES].Val]:VScale[List[Y_RANGES].Val])*40;
 80138ec:	2b00      	cmp	r3, #0
 80138ee:	d025      	beq.n	801393c <Update_Detail+0xf14>
 80138f0:	4b06      	ldr	r3, [pc, #24]	; (801390c <Update_Detail+0xee4>)
 80138f2:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80138f6:	461a      	mov	r2, r3
 80138f8:	4b0a      	ldr	r3, [pc, #40]	; (8013924 <Update_Detail+0xefc>)
 80138fa:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80138fe:	4613      	mov	r3, r2
 8013900:	009b      	lsls	r3, r3, #2
 8013902:	4413      	add	r3, r2
 8013904:	00db      	lsls	r3, r3, #3
 8013906:	e024      	b.n	8013952 <Update_Detail+0xf2a>
 8013908:	2000367c 	.word	0x2000367c
 801390c:	20000274 	.word	0x20000274
 8013910:	000f4240 	.word	0x000f4240
 8013914:	0800233c 	.word	0x0800233c
 8013918:	0800230c 	.word	0x0800230c
 801391c:	200076a4 	.word	0x200076a4
 8013920:	20003690 	.word	0x20003690
 8013924:	2000024c 	.word	0x2000024c
 8013928:	08001e04 	.word	0x08001e04
 801392c:	200076ac 	.word	0x200076ac
 8013930:	20003682 	.word	0x20003682
 8013934:	20003694 	.word	0x20003694
 8013938:	20003684 	.word	0x20003684
 801393c:	4b38      	ldr	r3, [pc, #224]	; (8013a20 <Update_Detail+0xff8>)
 801393e:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8013942:	461a      	mov	r2, r3
 8013944:	4b37      	ldr	r3, [pc, #220]	; (8013a24 <Update_Detail+0xffc>)
 8013946:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 801394a:	4613      	mov	r3, r2
 801394c:	009b      	lsls	r3, r3, #2
 801394e:	4413      	add	r3, r2
 8013950:	00db      	lsls	r3, r3, #3
		  scale = (List[PROBEATT].Val?
 8013952:	60bb      	str	r3, [r7, #8]
                  Tmp  = ((((Vmin-2048)*(Ak))>>12)+100-List[V0_POSI].Val)*scale;
 8013954:	4b34      	ldr	r3, [pc, #208]	; (8013a28 <Update_Detail+0x1000>)
 8013956:	f9b3 3000 	ldrsh.w	r3, [r3]
 801395a:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 801395e:	687a      	ldr	r2, [r7, #4]
 8013960:	fb02 f303 	mul.w	r3, r2, r3
 8013964:	131b      	asrs	r3, r3, #12
 8013966:	3364      	adds	r3, #100	; 0x64
 8013968:	4a2d      	ldr	r2, [pc, #180]	; (8013a20 <Update_Detail+0xff8>)
 801396a:	f9b2 201c 	ldrsh.w	r2, [r2, #28]
 801396e:	1a9a      	subs	r2, r3, r2
 8013970:	68bb      	ldr	r3, [r7, #8]
 8013972:	fb02 f303 	mul.w	r3, r2, r3
 8013976:	613b      	str	r3, [r7, #16]
        }
        DispMeter(i, 1, SIGN, Tmp);
 8013978:	f9b7 0016 	ldrsh.w	r0, [r7, #22]
 801397c:	693b      	ldr	r3, [r7, #16]
 801397e:	2200      	movs	r2, #0
 8013980:	2101      	movs	r1, #1
 8013982:	f000 f85d 	bl	8013a40 <DispMeter>
        break;
 8013986:	e000      	b.n	801398a <Update_Detail+0xf62>
        break;
 8013988:	bf00      	nop

        break;

      }
      /**/
      if(Freq_Flag){
 801398a:	4b28      	ldr	r3, [pc, #160]	; (8013a2c <Update_Detail+0x1004>)
 801398c:	781b      	ldrb	r3, [r3, #0]
 801398e:	2b00      	cmp	r3, #0
 8013990:	d03a      	beq.n	8013a08 <Update_Detail+0xfe0>
        Freq_Flag = 0;
 8013992:	4b26      	ldr	r3, [pc, #152]	; (8013a2c <Update_Detail+0x1004>)
 8013994:	2200      	movs	r2, #0
 8013996:	701a      	strb	r2, [r3, #0]
        FTmp=Edge*25*1000/2;
 8013998:	4b25      	ldr	r3, [pc, #148]	; (8013a30 <Update_Detail+0x1008>)
 801399a:	681b      	ldr	r3, [r3, #0]
 801399c:	f243 02d4 	movw	r2, #12500	; 0x30d4
 80139a0:	fb02 f303 	mul.w	r3, r2, r3
 80139a4:	60fb      	str	r3, [r7, #12]
        if(List[TIM_BASE].Val<9)FTmp= FTmp*1000000;
 80139a6:	4b1e      	ldr	r3, [pc, #120]	; (8013a20 <Update_Detail+0xff8>)
 80139a8:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 80139ac:	2b08      	cmp	r3, #8
 80139ae:	dc05      	bgt.n	80139bc <Update_Detail+0xf94>
 80139b0:	68fb      	ldr	r3, [r7, #12]
 80139b2:	4a20      	ldr	r2, [pc, #128]	; (8013a34 <Update_Detail+0x100c>)
 80139b4:	fb02 f303 	mul.w	r3, r2, r3
 80139b8:	60fb      	str	r3, [r7, #12]
 80139ba:	e00a      	b.n	80139d2 <Update_Detail+0xfaa>
        else if(List[TIM_BASE].Val<18)FTmp= FTmp*1000;
 80139bc:	4b18      	ldr	r3, [pc, #96]	; (8013a20 <Update_Detail+0xff8>)
 80139be:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 80139c2:	2b11      	cmp	r3, #17
 80139c4:	dc05      	bgt.n	80139d2 <Update_Detail+0xfaa>
 80139c6:	68fb      	ldr	r3, [r7, #12]
 80139c8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80139cc:	fb02 f303 	mul.w	r3, r2, r3
 80139d0:	60fb      	str	r3, [r7, #12]
        FTmp=FTmp/Ts[List[TIM_BASE].Val]/DEPTH[List[SMPL_DPTH].Val];
 80139d2:	4b13      	ldr	r3, [pc, #76]	; (8013a20 <Update_Detail+0xff8>)
 80139d4:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 80139d8:	461a      	mov	r2, r3
 80139da:	4b17      	ldr	r3, [pc, #92]	; (8013a38 <Update_Detail+0x1010>)
 80139dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80139e0:	461a      	mov	r2, r3
 80139e2:	68fb      	ldr	r3, [r7, #12]
 80139e4:	fbb3 f3f2 	udiv	r3, r3, r2
 80139e8:	4a0d      	ldr	r2, [pc, #52]	; (8013a20 <Update_Detail+0xff8>)
 80139ea:	f9b2 204c 	ldrsh.w	r2, [r2, #76]	; 0x4c
 80139ee:	4611      	mov	r1, r2
 80139f0:	4a12      	ldr	r2, [pc, #72]	; (8013a3c <Update_Detail+0x1014>)
 80139f2:	f932 2011 	ldrsh.w	r2, [r2, r1, lsl #1]
 80139f6:	fbb3 f3f2 	udiv	r3, r3, r2
 80139fa:	60fb      	str	r3, [r7, #12]
        DispFreq(    1, UNSIGN,FTmp);
 80139fc:	68fb      	ldr	r3, [r7, #12]
 80139fe:	461a      	mov	r2, r3
 8013a00:	2101      	movs	r1, #1
 8013a02:	2001      	movs	r0, #1
 8013a04:	f000 fa08 	bl	8013e18 <DispFreq>
  for(i=Y_RANGES; i<=STANDBY; i++){
 8013a08:	8afb      	ldrh	r3, [r7, #22]
 8013a0a:	3301      	adds	r3, #1
 8013a0c:	82fb      	strh	r3, [r7, #22]
 8013a0e:	8afb      	ldrh	r3, [r7, #22]
 8013a10:	2b29      	cmp	r3, #41	; 0x29
 8013a12:	f67f a849 	bls.w	8012aa8 <Update_Detail+0x80>
      }
    }
  }

}
 8013a16:	bf00      	nop
 8013a18:	bf00      	nop
 8013a1a:	371c      	adds	r7, #28
 8013a1c:	46bd      	mov	sp, r7
 8013a1e:	bd90      	pop	{r4, r7, pc}
 8013a20:	20000274 	.word	0x20000274
 8013a24:	08001e04 	.word	0x08001e04
 8013a28:	20003694 	.word	0x20003694
 8013a2c:	200001a8 	.word	0x200001a8
 8013a30:	2000367c 	.word	0x2000367c
 8013a34:	000f4240 	.word	0x000f4240
 8013a38:	0800233c 	.word	0x0800233c
 8013a3c:	0800230c 	.word	0x0800230c

08013a40 <DispMeter>:
/*******************************************************************************

*******************************************************************************/
void DispMeter(short Item, char St, char Mode, int Val)
{
 8013a40:	b580      	push	{r7, lr}
 8013a42:	b084      	sub	sp, #16
 8013a44:	af02      	add	r7, sp, #8
 8013a46:	603b      	str	r3, [r7, #0]
 8013a48:	4603      	mov	r3, r0
 8013a4a:	80fb      	strh	r3, [r7, #6]
 8013a4c:	460b      	mov	r3, r1
 8013a4e:	717b      	strb	r3, [r7, #5]
 8013a50:	4613      	mov	r3, r2
 8013a52:	713b      	strb	r3, [r7, #4]
  SetColor(GRY, TCOLOR[ME]);
 8013a54:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8013a58:	4619      	mov	r1, r3
 8013a5a:	f643 10e7 	movw	r0, #14823	; 0x39e7
 8013a5e:	f7fa faaf 	bl	800dfc0 <SetColor>

  Draw_Circle_D(INV, S_X[Item]-3, LABLE_Y, 11, 0, 6*12);
 8013a62:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8013a66:	4a30      	ldr	r2, [pc, #192]	; (8013b28 <DispMeter+0xe8>)
 8013a68:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8013a6c:	b29b      	uxth	r3, r3
 8013a6e:	3b03      	subs	r3, #3
 8013a70:	b29b      	uxth	r3, r3
 8013a72:	b219      	sxth	r1, r3
 8013a74:	2348      	movs	r3, #72	; 0x48
 8013a76:	9301      	str	r3, [sp, #4]
 8013a78:	2300      	movs	r3, #0
 8013a7a:	9300      	str	r3, [sp, #0]
 8013a7c:	230b      	movs	r3, #11
 8013a7e:	2203      	movs	r2, #3
 8013a80:	2001      	movs	r0, #1
 8013a82:	f7fa fb8b 	bl	800e19c <Draw_Circle_D>
  DispStr(S_X[Item], LABLE_Y, INV, (char *)&Z[Item-FREQUENC]);// ��ʾ������Ŀ����
 8013a86:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8013a8a:	4a27      	ldr	r2, [pc, #156]	; (8013b28 <DispMeter+0xe8>)
 8013a8c:	f932 0013 	ldrsh.w	r0, [r2, r3, lsl #1]
 8013a90:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8013a94:	f1a3 0213 	sub.w	r2, r3, #19
 8013a98:	4613      	mov	r3, r2
 8013a9a:	005b      	lsls	r3, r3, #1
 8013a9c:	4413      	add	r3, r2
 8013a9e:	005b      	lsls	r3, r3, #1
 8013aa0:	4a22      	ldr	r2, [pc, #136]	; (8013b2c <DispMeter+0xec>)
 8013aa2:	4413      	add	r3, r2
 8013aa4:	2201      	movs	r2, #1
 8013aa6:	2103      	movs	r1, #3
 8013aa8:	f7fa faa2 	bl	800dff0 <DispStr>
  Value2Str(NumStr, Val, List[Item].PTR, 3, Mode);
 8013aac:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8013ab0:	4a1f      	ldr	r2, [pc, #124]	; (8013b30 <DispMeter+0xf0>)
 8013ab2:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 8013ab6:	793b      	ldrb	r3, [r7, #4]
 8013ab8:	9300      	str	r3, [sp, #0]
 8013aba:	2303      	movs	r3, #3
 8013abc:	6839      	ldr	r1, [r7, #0]
 8013abe:	481d      	ldr	r0, [pc, #116]	; (8013b34 <DispMeter+0xf4>)
 8013ac0:	f7fd fb72 	bl	80111a8 <Value2Str>

  if(St)
 8013ac4:	797b      	ldrb	r3, [r7, #5]
 8013ac6:	2b00      	cmp	r3, #0
 8013ac8:	d01c      	beq.n	8013b04 <DispMeter+0xc4>
  {
    DispStr(S_X[Item]+24, LABLE_Y, INV, ":       ");
 8013aca:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8013ace:	4a16      	ldr	r2, [pc, #88]	; (8013b28 <DispMeter+0xe8>)
 8013ad0:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8013ad4:	b29b      	uxth	r3, r3
 8013ad6:	3318      	adds	r3, #24
 8013ad8:	b29b      	uxth	r3, r3
 8013ada:	b218      	sxth	r0, r3
 8013adc:	4b16      	ldr	r3, [pc, #88]	; (8013b38 <DispMeter+0xf8>)
 8013ade:	2201      	movs	r2, #1
 8013ae0:	2103      	movs	r1, #3
 8013ae2:	f7fa fa85 	bl	800dff0 <DispStr>
    DispStr(S_X[Item]+30, LABLE_Y, INV, (char *)NumStr);   // ��ʾ������ֵ+����
 8013ae6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8013aea:	4a0f      	ldr	r2, [pc, #60]	; (8013b28 <DispMeter+0xe8>)
 8013aec:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8013af0:	b29b      	uxth	r3, r3
 8013af2:	331e      	adds	r3, #30
 8013af4:	b29b      	uxth	r3, r3
 8013af6:	b218      	sxth	r0, r3
 8013af8:	4b0e      	ldr	r3, [pc, #56]	; (8013b34 <DispMeter+0xf4>)
 8013afa:	2201      	movs	r2, #1
 8013afc:	2103      	movs	r1, #3
 8013afe:	f7fa fa77 	bl	800dff0 <DispStr>
  }
  else
	  DispStr(S_X[Item]+24, LABLE_Y, INV, ": ----- ");
}
 8013b02:	e00d      	b.n	8013b20 <DispMeter+0xe0>
	  DispStr(S_X[Item]+24, LABLE_Y, INV, ": ----- ");
 8013b04:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8013b08:	4a07      	ldr	r2, [pc, #28]	; (8013b28 <DispMeter+0xe8>)
 8013b0a:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8013b0e:	b29b      	uxth	r3, r3
 8013b10:	3318      	adds	r3, #24
 8013b12:	b29b      	uxth	r3, r3
 8013b14:	b218      	sxth	r0, r3
 8013b16:	4b09      	ldr	r3, [pc, #36]	; (8013b3c <DispMeter+0xfc>)
 8013b18:	2201      	movs	r2, #1
 8013b1a:	2103      	movs	r1, #3
 8013b1c:	f7fa fa68 	bl	800dff0 <DispStr>
}
 8013b20:	bf00      	nop
 8013b22:	3708      	adds	r7, #8
 8013b24:	46bd      	mov	sp, r7
 8013b26:	bd80      	pop	{r7, pc}
 8013b28:	080021f8 	.word	0x080021f8
 8013b2c:	08001db4 	.word	0x08001db4
 8013b30:	20000274 	.word	0x20000274
 8013b34:	20003668 	.word	0x20003668
 8013b38:	08000a28 	.word	0x08000a28
 8013b3c:	08000a34 	.word	0x08000a34

08013b40 <DispStatus>:

/*******************************************************************************

*******************************************************************************/
void DispStatus(void)
{
 8013b40:	b580      	push	{r7, lr}
 8013b42:	b084      	sub	sp, #16
 8013b44:	af02      	add	r7, sp, #8
  char* p;
  SetColor(GRY, (Status & STOP) ? RED : TCOLOR[TRG]);
 8013b46:	4b20      	ldr	r3, [pc, #128]	; (8013bc8 <DispStatus+0x88>)
 8013b48:	f9b3 3000 	ldrsh.w	r3, [r3]
 8013b4c:	b29b      	uxth	r3, r3
 8013b4e:	f003 0301 	and.w	r3, r3, #1
 8013b52:	2b00      	cmp	r3, #0
 8013b54:	d102      	bne.n	8013b5c <DispStatus+0x1c>
 8013b56:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8013b5a:	e000      	b.n	8013b5e <DispStatus+0x1e>
 8013b5c:	231f      	movs	r3, #31
 8013b5e:	4619      	mov	r1, r3
 8013b60:	f643 10e7 	movw	r0, #14823	; 0x39e7
 8013b64:	f7fa fa2c 	bl	800dfc0 <SetColor>
  p =(Status & STOP)?(char*)M :(List[SYNCMODE].PTR +(List[SYNCMODE].Val)*6);
 8013b68:	4b17      	ldr	r3, [pc, #92]	; (8013bc8 <DispStatus+0x88>)
 8013b6a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8013b6e:	b29b      	uxth	r3, r3
 8013b70:	f003 0301 	and.w	r3, r3, #1
 8013b74:	2b00      	cmp	r3, #0
 8013b76:	d10b      	bne.n	8013b90 <DispStatus+0x50>
 8013b78:	4b14      	ldr	r3, [pc, #80]	; (8013bcc <DispStatus+0x8c>)
 8013b7a:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8013b7c:	4b13      	ldr	r3, [pc, #76]	; (8013bcc <DispStatus+0x8c>)
 8013b7e:	f9b3 306c 	ldrsh.w	r3, [r3, #108]	; 0x6c
 8013b82:	4619      	mov	r1, r3
 8013b84:	460b      	mov	r3, r1
 8013b86:	005b      	lsls	r3, r3, #1
 8013b88:	440b      	add	r3, r1
 8013b8a:	005b      	lsls	r3, r3, #1
 8013b8c:	4413      	add	r3, r2
 8013b8e:	e000      	b.n	8013b92 <DispStatus+0x52>
 8013b90:	4b0f      	ldr	r3, [pc, #60]	; (8013bd0 <DispStatus+0x90>)
 8013b92:	607b      	str	r3, [r7, #4]
  Draw_Circle_D(INV, S_X[SYNCMODE]-3, TITLE_Y_POS, 11, 1, 6*4);
 8013b94:	f240 1321 	movw	r3, #289	; 0x121
 8013b98:	b29b      	uxth	r3, r3
 8013b9a:	3b03      	subs	r3, #3
 8013b9c:	b29b      	uxth	r3, r3
 8013b9e:	b219      	sxth	r1, r3
 8013ba0:	2318      	movs	r3, #24
 8013ba2:	9301      	str	r3, [sp, #4]
 8013ba4:	2301      	movs	r3, #1
 8013ba6:	9300      	str	r3, [sp, #0]
 8013ba8:	230b      	movs	r3, #11
 8013baa:	22e1      	movs	r2, #225	; 0xe1
 8013bac:	2001      	movs	r0, #1
 8013bae:	f7fa faf5 	bl	800e19c <Draw_Circle_D>
  DispStr(S_X[SYNCMODE], TITLE_Y_POS, INV, (char *)p);
 8013bb2:	f240 1021 	movw	r0, #289	; 0x121
 8013bb6:	687b      	ldr	r3, [r7, #4]
 8013bb8:	2201      	movs	r2, #1
 8013bba:	21e1      	movs	r1, #225	; 0xe1
 8013bbc:	f7fa fa18 	bl	800dff0 <DispStr>
}
 8013bc0:	bf00      	nop
 8013bc2:	3708      	adds	r7, #8
 8013bc4:	46bd      	mov	sp, r7
 8013bc6:	bd80      	pop	{r7, pc}
 8013bc8:	2000079c 	.word	0x2000079c
 8013bcc:	20000274 	.word	0x20000274
 8013bd0:	08001d50 	.word	0x08001d50

08013bd4 <Update_Windows>:

/*******************************************************************************
���»���������λ��
*******************************************************************************/
void Update_Windows(void)
{
 8013bd4:	b580      	push	{r7, lr}
 8013bd6:	b084      	sub	sp, #16
 8013bd8:	af00      	add	r7, sp, #0
  short  x0,x,y,i,j,Width;
  short  Depth =  DEPTH[List[SMPL_DPTH].Val];
 8013bda:	4b6a      	ldr	r3, [pc, #424]	; (8013d84 <Update_Windows+0x1b0>)
 8013bdc:	f9b3 304c 	ldrsh.w	r3, [r3, #76]	; 0x4c
 8013be0:	461a      	mov	r2, r3
 8013be2:	4b69      	ldr	r3, [pc, #420]	; (8013d88 <Update_Windows+0x1b4>)
 8013be4:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8013be8:	80fb      	strh	r3, [r7, #6]
  Width =(300*300)/Depth;
 8013bea:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8013bee:	4a67      	ldr	r2, [pc, #412]	; (8013d8c <Update_Windows+0x1b8>)
 8013bf0:	fb92 f3f3 	sdiv	r3, r2, r3
 8013bf4:	80bb      	strh	r3, [r7, #4]
  if(Current == XN &&(PopType & LIST_POP) )
 8013bf6:	4b66      	ldr	r3, [pc, #408]	; (8013d90 <Update_Windows+0x1bc>)
 8013bf8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8013bfc:	2b01      	cmp	r3, #1
 8013bfe:	f040 80a9 	bne.w	8013d54 <Update_Windows+0x180>
 8013c02:	4b64      	ldr	r3, [pc, #400]	; (8013d94 <Update_Windows+0x1c0>)
 8013c04:	781b      	ldrb	r3, [r3, #0]
 8013c06:	f003 0302 	and.w	r3, r3, #2
 8013c0a:	2b00      	cmp	r3, #0
 8013c0c:	f000 80a2 	beq.w	8013d54 <Update_Windows+0x180>
  {
      Windows_Pop = 1;
 8013c10:	4b61      	ldr	r3, [pc, #388]	; (8013d98 <Update_Windows+0x1c4>)
 8013c12:	2201      	movs	r2, #1
 8013c14:	701a      	strb	r2, [r3, #0]
      x0=2+(List[VIEWPOSI].Val)*300/Depth;
 8013c16:	4b5b      	ldr	r3, [pc, #364]	; (8013d84 <Update_Windows+0x1b0>)
 8013c18:	f9b3 3044 	ldrsh.w	r3, [r3, #68]	; 0x44
 8013c1c:	461a      	mov	r2, r3
 8013c1e:	f44f 7396 	mov.w	r3, #300	; 0x12c
 8013c22:	fb03 f202 	mul.w	r2, r3, r2
 8013c26:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8013c2a:	fb92 f3f3 	sdiv	r3, r2, r3
 8013c2e:	b29b      	uxth	r3, r3
 8013c30:	3302      	adds	r3, #2
 8013c32:	b29b      	uxth	r3, r3
 8013c34:	81fb      	strh	r3, [r7, #14]
      x=2;
 8013c36:	2302      	movs	r3, #2
 8013c38:	81bb      	strh	r3, [r7, #12]
      y=15;
 8013c3a:	230f      	movs	r3, #15
 8013c3c:	807b      	strh	r3, [r7, #2]
      for(i=0;i<300;i++){    //��������
 8013c3e:	2300      	movs	r3, #0
 8013c40:	817b      	strh	r3, [r7, #10]
 8013c42:	e029      	b.n	8013c98 <Update_Windows+0xc4>
        LCD_Set_Posi(x++, y);
 8013c44:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8013c48:	b293      	uxth	r3, r2
 8013c4a:	3301      	adds	r3, #1
 8013c4c:	b29b      	uxth	r3, r3
 8013c4e:	81bb      	strh	r3, [r7, #12]
 8013c50:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8013c54:	4619      	mov	r1, r3
 8013c56:	4610      	mov	r0, r2
 8013c58:	f7fd fe66 	bl	8011928 <LCD_Set_Posi>
        LCD_Set_Pixel(DAR);
 8013c5c:	f643 10e7 	movw	r0, #14823	; 0x39e7
 8013c60:	f7fd feb0 	bl	80119c4 <LCD_Set_Pixel>
        for(j=0; j<2; j++)LCD_Set_Pixel(RED);
 8013c64:	2300      	movs	r3, #0
 8013c66:	813b      	strh	r3, [r7, #8]
 8013c68:	e008      	b.n	8013c7c <Update_Windows+0xa8>
 8013c6a:	201f      	movs	r0, #31
 8013c6c:	f7fd feaa 	bl	80119c4 <LCD_Set_Pixel>
 8013c70:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8013c74:	b29b      	uxth	r3, r3
 8013c76:	3301      	adds	r3, #1
 8013c78:	b29b      	uxth	r3, r3
 8013c7a:	813b      	strh	r3, [r7, #8]
 8013c7c:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8013c80:	2b01      	cmp	r3, #1
 8013c82:	ddf2      	ble.n	8013c6a <Update_Windows+0x96>
        LCD_Set_Pixel(DAR);
 8013c84:	f643 10e7 	movw	r0, #14823	; 0x39e7
 8013c88:	f7fd fe9c 	bl	80119c4 <LCD_Set_Pixel>
      for(i=0;i<300;i++){    //��������
 8013c8c:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8013c90:	b29b      	uxth	r3, r3
 8013c92:	3301      	adds	r3, #1
 8013c94:	b29b      	uxth	r3, r3
 8013c96:	817b      	strh	r3, [r7, #10]
 8013c98:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8013c9c:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8013ca0:	dbd0      	blt.n	8013c44 <Update_Windows+0x70>
      }
      if(Current == XN && (MenuNow[XN]==SMPL_DPTH ))
 8013ca2:	4b3b      	ldr	r3, [pc, #236]	; (8013d90 <Update_Windows+0x1bc>)
 8013ca4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8013ca8:	2b01      	cmp	r3, #1
 8013caa:	d122      	bne.n	8013cf2 <Update_Windows+0x11e>
 8013cac:	4b3b      	ldr	r3, [pc, #236]	; (8013d9c <Update_Windows+0x1c8>)
 8013cae:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8013cb2:	2b09      	cmp	r3, #9
 8013cb4:	d11d      	bne.n	8013cf2 <Update_Windows+0x11e>
      {  //Depthѡ��
        if(Key_Buffer == KEYCODE_RIGHT || Key_Buffer == KEYCODE_LEFT)
 8013cb6:	4b3a      	ldr	r3, [pc, #232]	; (8013da0 <Update_Windows+0x1cc>)
 8013cb8:	781b      	ldrb	r3, [r3, #0]
 8013cba:	b2db      	uxtb	r3, r3
 8013cbc:	2b06      	cmp	r3, #6
 8013cbe:	d004      	beq.n	8013cca <Update_Windows+0xf6>
 8013cc0:	4b37      	ldr	r3, [pc, #220]	; (8013da0 <Update_Windows+0x1cc>)
 8013cc2:	781b      	ldrb	r3, [r3, #0]
 8013cc4:	b2db      	uxtb	r3, r3
 8013cc6:	2b05      	cmp	r3, #5
 8013cc8:	d113      	bne.n	8013cf2 <Update_Windows+0x11e>
        {  //ѡ���б䶯ʱ�ı�Ԥ����λ��
          List[VIEWPOSI].Val= 0;
 8013cca:	4b2e      	ldr	r3, [pc, #184]	; (8013d84 <Update_Windows+0x1b0>)
 8013ccc:	2200      	movs	r2, #0
 8013cce:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
          x0=2+(List[VIEWPOSI].Val)*300/Depth;
 8013cd2:	4b2c      	ldr	r3, [pc, #176]	; (8013d84 <Update_Windows+0x1b0>)
 8013cd4:	f9b3 3044 	ldrsh.w	r3, [r3, #68]	; 0x44
 8013cd8:	461a      	mov	r2, r3
 8013cda:	f44f 7396 	mov.w	r3, #300	; 0x12c
 8013cde:	fb03 f202 	mul.w	r2, r3, r2
 8013ce2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8013ce6:	fb92 f3f3 	sdiv	r3, r2, r3
 8013cea:	b29b      	uxth	r3, r3
 8013cec:	3302      	adds	r3, #2
 8013cee:	b29b      	uxth	r3, r3
 8013cf0:	81fb      	strh	r3, [r7, #14]
        }
      }
      x = x0;               //��ǰ�����ڻ�����λ��
 8013cf2:	89fb      	ldrh	r3, [r7, #14]
 8013cf4:	81bb      	strh	r3, [r7, #12]
      y=15;
 8013cf6:	230f      	movs	r3, #15
 8013cf8:	807b      	strh	r3, [r7, #2]
      for(i=0;i<Width;i++){
 8013cfa:	2300      	movs	r3, #0
 8013cfc:	817b      	strh	r3, [r7, #10]
 8013cfe:	e022      	b.n	8013d46 <Update_Windows+0x172>
        LCD_Set_Posi(x++, y);
 8013d00:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8013d04:	b293      	uxth	r3, r2
 8013d06:	3301      	adds	r3, #1
 8013d08:	b29b      	uxth	r3, r3
 8013d0a:	81bb      	strh	r3, [r7, #12]
 8013d0c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8013d10:	4619      	mov	r1, r3
 8013d12:	4610      	mov	r0, r2
 8013d14:	f7fd fe08 	bl	8011928 <LCD_Set_Posi>
        for(j=0; j<4; j++)LCD_Set_Pixel(GRN);
 8013d18:	2300      	movs	r3, #0
 8013d1a:	813b      	strh	r3, [r7, #8]
 8013d1c:	e009      	b.n	8013d32 <Update_Windows+0x15e>
 8013d1e:	f44f 60fc 	mov.w	r0, #2016	; 0x7e0
 8013d22:	f7fd fe4f 	bl	80119c4 <LCD_Set_Pixel>
 8013d26:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8013d2a:	b29b      	uxth	r3, r3
 8013d2c:	3301      	adds	r3, #1
 8013d2e:	b29b      	uxth	r3, r3
 8013d30:	813b      	strh	r3, [r7, #8]
 8013d32:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8013d36:	2b03      	cmp	r3, #3
 8013d38:	ddf1      	ble.n	8013d1e <Update_Windows+0x14a>
      for(i=0;i<Width;i++){
 8013d3a:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8013d3e:	b29b      	uxth	r3, r3
 8013d40:	3301      	adds	r3, #1
 8013d42:	b29b      	uxth	r3, r3
 8013d44:	817b      	strh	r3, [r7, #10]
 8013d46:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8013d4a:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8013d4e:	429a      	cmp	r2, r3
 8013d50:	dbd6      	blt.n	8013d00 <Update_Windows+0x12c>
  if(Current == XN &&(PopType & LIST_POP) )
 8013d52:	e012      	b.n	8013d7a <Update_Windows+0x1a6>
      }
  }
  else if(Current == XN &&!(PopType & LIST_POP))
 8013d54:	4b0e      	ldr	r3, [pc, #56]	; (8013d90 <Update_Windows+0x1bc>)
 8013d56:	f9b3 3000 	ldrsh.w	r3, [r3]
 8013d5a:	2b01      	cmp	r3, #1
 8013d5c:	d10d      	bne.n	8013d7a <Update_Windows+0x1a6>
 8013d5e:	4b0d      	ldr	r3, [pc, #52]	; (8013d94 <Update_Windows+0x1c0>)
 8013d60:	781b      	ldrb	r3, [r3, #0]
 8013d62:	f003 0302 	and.w	r3, r3, #2
 8013d66:	2b00      	cmp	r3, #0
 8013d68:	d107      	bne.n	8013d7a <Update_Windows+0x1a6>
  {
    Windows_Pop = 0;
 8013d6a:	4b0b      	ldr	r3, [pc, #44]	; (8013d98 <Update_Windows+0x1c4>)
 8013d6c:	2200      	movs	r2, #0
 8013d6e:	701a      	strb	r2, [r3, #0]
    Clr_WavePosi(DAR);
 8013d70:	f643 10e7 	movw	r0, #14823	; 0x39e7
 8013d74:	f000 f816 	bl	8013da4 <Clr_WavePosi>
  }
}
 8013d78:	e7ff      	b.n	8013d7a <Update_Windows+0x1a6>
 8013d7a:	bf00      	nop
 8013d7c:	3710      	adds	r7, #16
 8013d7e:	46bd      	mov	sp, r7
 8013d80:	bd80      	pop	{r7, pc}
 8013d82:	bf00      	nop
 8013d84:	20000274 	.word	0x20000274
 8013d88:	0800230c 	.word	0x0800230c
 8013d8c:	00015f90 	.word	0x00015f90
 8013d90:	2000079a 	.word	0x2000079a
 8013d94:	20000788 	.word	0x20000788
 8013d98:	200007a2 	.word	0x200007a2
 8013d9c:	20000514 	.word	0x20000514
 8013da0:	20000771 	.word	0x20000771

08013da4 <Clr_WavePosi>:

/*******************************************************************************
 void Clr_WavePosi(u16 Col)  �������λ����ʾ
*******************************************************************************/
void Clr_WavePosi(short Col)
{
 8013da4:	b580      	push	{r7, lr}
 8013da6:	b084      	sub	sp, #16
 8013da8:	af00      	add	r7, sp, #0
 8013daa:	4603      	mov	r3, r0
 8013dac:	80fb      	strh	r3, [r7, #6]
  short x,y,i,j;
  x=2;
 8013dae:	2302      	movs	r3, #2
 8013db0:	81fb      	strh	r3, [r7, #14]
  y=14;
 8013db2:	230e      	movs	r3, #14
 8013db4:	813b      	strh	r3, [r7, #8]
  for(i=0;i<300;i++)
 8013db6:	2300      	movs	r3, #0
 8013db8:	81bb      	strh	r3, [r7, #12]
 8013dba:	e022      	b.n	8013e02 <Clr_WavePosi+0x5e>
  {
    LCD_Set_Posi(x++, y);
 8013dbc:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8013dc0:	b293      	uxth	r3, r2
 8013dc2:	3301      	adds	r3, #1
 8013dc4:	b29b      	uxth	r3, r3
 8013dc6:	81fb      	strh	r3, [r7, #14]
 8013dc8:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8013dcc:	4619      	mov	r1, r3
 8013dce:	4610      	mov	r0, r2
 8013dd0:	f7fd fdaa 	bl	8011928 <LCD_Set_Posi>
    for(j=0; j<6; j++)
 8013dd4:	2300      	movs	r3, #0
 8013dd6:	817b      	strh	r3, [r7, #10]
 8013dd8:	e009      	b.n	8013dee <Clr_WavePosi+0x4a>
    	LCD_Set_Pixel(Col);
 8013dda:	88fb      	ldrh	r3, [r7, #6]
 8013ddc:	4618      	mov	r0, r3
 8013dde:	f7fd fdf1 	bl	80119c4 <LCD_Set_Pixel>
    for(j=0; j<6; j++)
 8013de2:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8013de6:	b29b      	uxth	r3, r3
 8013de8:	3301      	adds	r3, #1
 8013dea:	b29b      	uxth	r3, r3
 8013dec:	817b      	strh	r3, [r7, #10]
 8013dee:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8013df2:	2b05      	cmp	r3, #5
 8013df4:	ddf1      	ble.n	8013dda <Clr_WavePosi+0x36>
  for(i=0;i<300;i++)
 8013df6:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8013dfa:	b29b      	uxth	r3, r3
 8013dfc:	3301      	adds	r3, #1
 8013dfe:	b29b      	uxth	r3, r3
 8013e00:	81bb      	strh	r3, [r7, #12]
 8013e02:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8013e06:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8013e0a:	dbd7      	blt.n	8013dbc <Clr_WavePosi+0x18>
  }
}
 8013e0c:	bf00      	nop
 8013e0e:	bf00      	nop
 8013e10:	3710      	adds	r7, #16
 8013e12:	46bd      	mov	sp, r7
 8013e14:	bd80      	pop	{r7, pc}
	...

08013e18 <DispFreq>:

/*******************************************************************************

*******************************************************************************/
void DispFreq(char St, char Mode, int Val)
{
 8013e18:	b580      	push	{r7, lr}
 8013e1a:	b084      	sub	sp, #16
 8013e1c:	af02      	add	r7, sp, #8
 8013e1e:	4603      	mov	r3, r0
 8013e20:	603a      	str	r2, [r7, #0]
 8013e22:	71fb      	strb	r3, [r7, #7]
 8013e24:	460b      	mov	r3, r1
 8013e26:	71bb      	strb	r3, [r7, #6]
  SetColor(GRY, TCOLOR[ME]);
 8013e28:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8013e2c:	4619      	mov	r1, r3
 8013e2e:	f643 10e7 	movw	r0, #14823	; 0x39e7
 8013e32:	f7fa f8c5 	bl	800dfc0 <SetColor>

  Draw_Circle_D(INV, S_X[FREQUENC]-6*15-3+4, LABLE_Y, 11, 0, 6*12);
 8013e36:	23a2      	movs	r3, #162	; 0xa2
 8013e38:	b29b      	uxth	r3, r3
 8013e3a:	3b59      	subs	r3, #89	; 0x59
 8013e3c:	b29b      	uxth	r3, r3
 8013e3e:	b219      	sxth	r1, r3
 8013e40:	2348      	movs	r3, #72	; 0x48
 8013e42:	9301      	str	r3, [sp, #4]
 8013e44:	2300      	movs	r3, #0
 8013e46:	9300      	str	r3, [sp, #0]
 8013e48:	230b      	movs	r3, #11
 8013e4a:	2203      	movs	r2, #3
 8013e4c:	2001      	movs	r0, #1
 8013e4e:	f7fa f9a5 	bl	800e19c <Draw_Circle_D>
  DispStr(S_X[FREQUENC]-6*15+4, LABLE_Y, INV, (char*)&Z[0]);// ��ʾ������Ŀ����
 8013e52:	23a2      	movs	r3, #162	; 0xa2
 8013e54:	b29b      	uxth	r3, r3
 8013e56:	3b56      	subs	r3, #86	; 0x56
 8013e58:	b29b      	uxth	r3, r3
 8013e5a:	b218      	sxth	r0, r3
 8013e5c:	4b1a      	ldr	r3, [pc, #104]	; (8013ec8 <DispFreq+0xb0>)
 8013e5e:	2201      	movs	r2, #1
 8013e60:	2103      	movs	r1, #3
 8013e62:	f7fa f8c5 	bl	800dff0 <DispStr>
  Value2Str(NumStr, Val, List[FREQUENC].PTR, 3, Mode);
 8013e66:	4b19      	ldr	r3, [pc, #100]	; (8013ecc <DispFreq+0xb4>)
 8013e68:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 8013e6c:	79bb      	ldrb	r3, [r7, #6]
 8013e6e:	9300      	str	r3, [sp, #0]
 8013e70:	2303      	movs	r3, #3
 8013e72:	6839      	ldr	r1, [r7, #0]
 8013e74:	4816      	ldr	r0, [pc, #88]	; (8013ed0 <DispFreq+0xb8>)
 8013e76:	f7fd f997 	bl	80111a8 <Value2Str>

  if(St) {
 8013e7a:	79fb      	ldrb	r3, [r7, #7]
 8013e7c:	2b00      	cmp	r3, #0
 8013e7e:	d014      	beq.n	8013eaa <DispFreq+0x92>
    DispStr(24+S_X[FREQUENC]-6*15+4, LABLE_Y, INV, ":       ");
 8013e80:	23a2      	movs	r3, #162	; 0xa2
 8013e82:	b29b      	uxth	r3, r3
 8013e84:	3b3e      	subs	r3, #62	; 0x3e
 8013e86:	b29b      	uxth	r3, r3
 8013e88:	b218      	sxth	r0, r3
 8013e8a:	4b12      	ldr	r3, [pc, #72]	; (8013ed4 <DispFreq+0xbc>)
 8013e8c:	2201      	movs	r2, #1
 8013e8e:	2103      	movs	r1, #3
 8013e90:	f7fa f8ae 	bl	800dff0 <DispStr>
    DispStr(30+S_X[FREQUENC]-6*15+4, LABLE_Y, INV, (char *)NumStr);   // ��ʾ������ֵ+����
 8013e94:	23a2      	movs	r3, #162	; 0xa2
 8013e96:	b29b      	uxth	r3, r3
 8013e98:	3b38      	subs	r3, #56	; 0x38
 8013e9a:	b29b      	uxth	r3, r3
 8013e9c:	b218      	sxth	r0, r3
 8013e9e:	4b0c      	ldr	r3, [pc, #48]	; (8013ed0 <DispFreq+0xb8>)
 8013ea0:	2201      	movs	r2, #1
 8013ea2:	2103      	movs	r1, #3
 8013ea4:	f7fa f8a4 	bl	800dff0 <DispStr>
  }
  else   DispStr(24+S_X[FREQUENC]-6*15+4, LABLE_Y, INV, ": ---- ");
}
 8013ea8:	e009      	b.n	8013ebe <DispFreq+0xa6>
  else   DispStr(24+S_X[FREQUENC]-6*15+4, LABLE_Y, INV, ": ---- ");
 8013eaa:	23a2      	movs	r3, #162	; 0xa2
 8013eac:	b29b      	uxth	r3, r3
 8013eae:	3b3e      	subs	r3, #62	; 0x3e
 8013eb0:	b29b      	uxth	r3, r3
 8013eb2:	b218      	sxth	r0, r3
 8013eb4:	4b08      	ldr	r3, [pc, #32]	; (8013ed8 <DispFreq+0xc0>)
 8013eb6:	2201      	movs	r2, #1
 8013eb8:	2103      	movs	r1, #3
 8013eba:	f7fa f899 	bl	800dff0 <DispStr>
}
 8013ebe:	bf00      	nop
 8013ec0:	3708      	adds	r7, #8
 8013ec2:	46bd      	mov	sp, r7
 8013ec4:	bd80      	pop	{r7, pc}
 8013ec6:	bf00      	nop
 8013ec8:	08001db4 	.word	0x08001db4
 8013ecc:	20000274 	.word	0x20000274
 8013ed0:	20003668 	.word	0x20003668
 8013ed4:	08000a28 	.word	0x08000a28
 8013ed8:	08000a40 	.word	0x08000a40

08013edc <Show_List>:

/*******************************************************************************
 Show_List: ���ò˵���λ�á��ߴ硢��ɫ����ʾ����
*******************************************************************************/
void Show_List(void)
{
 8013edc:	b580      	push	{r7, lr}
 8013ede:	b088      	sub	sp, #32
 8013ee0:	af02      	add	r7, sp, #8
  short i, Ny0, Nx0, CurrentMax = MU_BEGN[Current]+ M_ITEMS[Current];
 8013ee2:	4b59      	ldr	r3, [pc, #356]	; (8014048 <Show_List+0x16c>)
 8013ee4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8013ee8:	461a      	mov	r2, r3
 8013eea:	4b58      	ldr	r3, [pc, #352]	; (801404c <Show_List+0x170>)
 8013eec:	5c9b      	ldrb	r3, [r3, r2]
 8013eee:	b29a      	uxth	r2, r3
 8013ef0:	4b55      	ldr	r3, [pc, #340]	; (8014048 <Show_List+0x16c>)
 8013ef2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8013ef6:	4619      	mov	r1, r3
 8013ef8:	4b55      	ldr	r3, [pc, #340]	; (8014050 <Show_List+0x174>)
 8013efa:	5c5b      	ldrb	r3, [r3, r1]
 8013efc:	b29b      	uxth	r3, r3
 8013efe:	4413      	add	r3, r2
 8013f00:	b29b      	uxth	r3, r3
 8013f02:	827b      	strh	r3, [r7, #18]
  char  Flag = 0;
 8013f04:	2300      	movs	r3, #0
 8013f06:	757b      	strb	r3, [r7, #21]
  char  str[12];
  ParamTab[BXx1]= BLOCK_X[Current];
 8013f08:	4b4f      	ldr	r3, [pc, #316]	; (8014048 <Show_List+0x16c>)
 8013f0a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8013f0e:	461a      	mov	r2, r3
 8013f10:	4b50      	ldr	r3, [pc, #320]	; (8014054 <Show_List+0x178>)
 8013f12:	5c9b      	ldrb	r3, [r3, r2]
 8013f14:	b21a      	sxth	r2, r3
 8013f16:	4b50      	ldr	r3, [pc, #320]	; (8014058 <Show_List+0x17c>)
 8013f18:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  ParamTab[BYx2]= BLOCK_Y[Current]*2;
 8013f1c:	4b4a      	ldr	r3, [pc, #296]	; (8014048 <Show_List+0x16c>)
 8013f1e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8013f22:	461a      	mov	r2, r3
 8013f24:	4b4d      	ldr	r3, [pc, #308]	; (801405c <Show_List+0x180>)
 8013f26:	5c9b      	ldrb	r3, [r3, r2]
 8013f28:	b29b      	uxth	r3, r3
 8013f2a:	005b      	lsls	r3, r3, #1
 8013f2c:	b29b      	uxth	r3, r3
 8013f2e:	b21a      	sxth	r2, r3
 8013f30:	4b49      	ldr	r3, [pc, #292]	; (8014058 <Show_List+0x17c>)
 8013f32:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
  ParamTab[WXx1]= BLOCK_W[Current];
 8013f36:	4b44      	ldr	r3, [pc, #272]	; (8014048 <Show_List+0x16c>)
 8013f38:	f9b3 3000 	ldrsh.w	r3, [r3]
 8013f3c:	461a      	mov	r2, r3
 8013f3e:	4b48      	ldr	r3, [pc, #288]	; (8014060 <Show_List+0x184>)
 8013f40:	5c9b      	ldrb	r3, [r3, r2]
 8013f42:	b21a      	sxth	r2, r3
 8013f44:	4b44      	ldr	r3, [pc, #272]	; (8014058 <Show_List+0x17c>)
 8013f46:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  ParamTab[HYx2]=(M_ITEMS[Current]+1)*32;
 8013f4a:	4b3f      	ldr	r3, [pc, #252]	; (8014048 <Show_List+0x16c>)
 8013f4c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8013f50:	461a      	mov	r2, r3
 8013f52:	4b3f      	ldr	r3, [pc, #252]	; (8014050 <Show_List+0x174>)
 8013f54:	5c9b      	ldrb	r3, [r3, r2]
 8013f56:	3301      	adds	r3, #1
 8013f58:	b29b      	uxth	r3, r3
 8013f5a:	015b      	lsls	r3, r3, #5
 8013f5c:	b29b      	uxth	r3, r3
 8013f5e:	b21a      	sxth	r2, r3
 8013f60:	4b3d      	ldr	r3, [pc, #244]	; (8014058 <Show_List+0x17c>)
 8013f62:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
  PopColor(WHT, DAR);
 8013f66:	f643 11e7 	movw	r1, #14823	; 0x39e7
 8013f6a:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8013f6e:	f7fa fd91 	bl	800ea94 <PopColor>
  Buil_Pop();
 8013f72:	f7fa fc81 	bl	800e878 <Buil_Pop>
  for(i=MU_BEGN[Current]; i<CurrentMax; i++){
 8013f76:	4b34      	ldr	r3, [pc, #208]	; (8014048 <Show_List+0x16c>)
 8013f78:	f9b3 3000 	ldrsh.w	r3, [r3]
 8013f7c:	461a      	mov	r2, r3
 8013f7e:	4b33      	ldr	r3, [pc, #204]	; (801404c <Show_List+0x170>)
 8013f80:	5c9b      	ldrb	r3, [r3, r2]
 8013f82:	82fb      	strh	r3, [r7, #22]
 8013f84:	e054      	b.n	8014030 <Show_List+0x154>
    if(i == MenuNow[Current]) {
 8013f86:	4b30      	ldr	r3, [pc, #192]	; (8014048 <Show_List+0x16c>)
 8013f88:	f9b3 3000 	ldrsh.w	r3, [r3]
 8013f8c:	461a      	mov	r2, r3
 8013f8e:	4b35      	ldr	r3, [pc, #212]	; (8014064 <Show_List+0x188>)
 8013f90:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8013f94:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8013f98:	429a      	cmp	r2, r3
 8013f9a:	d102      	bne.n	8013fa2 <Show_List+0xc6>
      Flag = INV;
 8013f9c:	2301      	movs	r3, #1
 8013f9e:	757b      	strb	r3, [r7, #21]
 8013fa0:	e007      	b.n	8013fb2 <Show_List+0xd6>
    }
    else                      {
      PopColor(WHT, DAR);
 8013fa2:	f643 11e7 	movw	r1, #14823	; 0x39e7
 8013fa6:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8013faa:	f7fa fd73 	bl	800ea94 <PopColor>
      Flag = PRN;
 8013fae:	2300      	movs	r3, #0
 8013fb0:	757b      	strb	r3, [r7, #21]
    }
    Ny0 = ((CurrentMax - i)*17 - 10);
 8013fb2:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8013fb6:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8013fba:	1ad3      	subs	r3, r2, r3
 8013fbc:	b29b      	uxth	r3, r3
 8013fbe:	461a      	mov	r2, r3
 8013fc0:	0112      	lsls	r2, r2, #4
 8013fc2:	4413      	add	r3, r2
 8013fc4:	b29b      	uxth	r3, r3
 8013fc6:	3b0a      	subs	r3, #10
 8013fc8:	b29b      	uxth	r3, r3
 8013fca:	823b      	strh	r3, [r7, #16]
    Nx0 = N_X ;
 8013fcc:	2304      	movs	r3, #4
 8013fce:	81fb      	strh	r3, [r7, #14]
    memset(str,0,12);
 8013fd0:	463b      	mov	r3, r7
 8013fd2:	220c      	movs	r2, #12
 8013fd4:	2100      	movs	r1, #0
 8013fd6:	4618      	mov	r0, r3
 8013fd8:	f011 fdc8 	bl	8025b6c <memset>
    memcpy(str,&ESTR[i],10);
 8013fdc:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8013fe0:	4613      	mov	r3, r2
 8013fe2:	009b      	lsls	r3, r3, #2
 8013fe4:	4413      	add	r3, r2
 8013fe6:	005b      	lsls	r3, r3, #1
 8013fe8:	4a1f      	ldr	r2, [pc, #124]	; (8014068 <Show_List+0x18c>)
 8013fea:	1899      	adds	r1, r3, r2
 8013fec:	463b      	mov	r3, r7
 8013fee:	220a      	movs	r2, #10
 8013ff0:	4618      	mov	r0, r3
 8013ff2:	f011 fdad 	bl	8025b50 <memcpy>
    NoteSTR(Nx0, Ny0, Flag, (char *)str);
 8013ff6:	463b      	mov	r3, r7
 8013ff8:	7d7a      	ldrb	r2, [r7, #21]
 8013ffa:	f9b7 1010 	ldrsh.w	r1, [r7, #16]
 8013ffe:	f9b7 000e 	ldrsh.w	r0, [r7, #14]
 8014002:	f7fa fe97 	bl	800ed34 <NoteSTR>
    Note_4Point(PRN, Nx0, Ny0, strlen((char*)str), Font6x8_H);
 8014006:	463b      	mov	r3, r7
 8014008:	4618      	mov	r0, r3
 801400a:	f7f8 f819 	bl	800c040 <strlen>
 801400e:	4603      	mov	r3, r0
 8014010:	b2db      	uxtb	r3, r3
 8014012:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8014016:	f9b7 100e 	ldrsh.w	r1, [r7, #14]
 801401a:	200a      	movs	r0, #10
 801401c:	9000      	str	r0, [sp, #0]
 801401e:	2000      	movs	r0, #0
 8014020:	f7fa ff2e 	bl	800ee80 <Note_4Point>
  for(i=MU_BEGN[Current]; i<CurrentMax; i++){
 8014024:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8014028:	b29b      	uxth	r3, r3
 801402a:	3301      	adds	r3, #1
 801402c:	b29b      	uxth	r3, r3
 801402e:	82fb      	strh	r3, [r7, #22]
 8014030:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8014034:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8014038:	429a      	cmp	r2, r3
 801403a:	dba4      	blt.n	8013f86 <Show_List+0xaa>
  }
  List_Pop();
 801403c:	f7fa fd5a 	bl	800eaf4 <List_Pop>
}
 8014040:	bf00      	nop
 8014042:	3718      	adds	r7, #24
 8014044:	46bd      	mov	sp, r7
 8014046:	bd80      	pop	{r7, pc}
 8014048:	2000079a 	.word	0x2000079a
 801404c:	08001fdc 	.word	0x08001fdc
 8014050:	08001fe4 	.word	0x08001fe4
 8014054:	080021e0 	.word	0x080021e0
 8014058:	20000140 	.word	0x20000140
 801405c:	080021e8 	.word	0x080021e8
 8014060:	080021f0 	.word	0x080021f0
 8014064:	20000514 	.word	0x20000514
 8014068:	08001fec 	.word	0x08001fec

0801406c <DispFileInfo>:

/*******************************************************************************

*******************************************************************************/
void DispFileInfo(char Info)
{
 801406c:	b580      	push	{r7, lr}
 801406e:	b084      	sub	sp, #16
 8014070:	af02      	add	r7, sp, #8
 8014072:	4603      	mov	r3, r0
 8014074:	71fb      	strb	r3, [r7, #7]
  SetColor(DAR, BLU);
 8014076:	f64f 4110 	movw	r1, #64528	; 0xfc10
 801407a:	f643 10e7 	movw	r0, #14823	; 0x39e7
 801407e:	f7f9 ff9f 	bl	800dfc0 <SetColor>
  Draw_Circle_D(INV, S_X[SAVE_BMP]-3, LABLE_Y, 11, 0, 6*11);
 8014082:	23f8      	movs	r3, #248	; 0xf8
 8014084:	b29b      	uxth	r3, r3
 8014086:	3b03      	subs	r3, #3
 8014088:	b29b      	uxth	r3, r3
 801408a:	b219      	sxth	r1, r3
 801408c:	2342      	movs	r3, #66	; 0x42
 801408e:	9301      	str	r3, [sp, #4]
 8014090:	2300      	movs	r3, #0
 8014092:	9300      	str	r3, [sp, #0]
 8014094:	230b      	movs	r3, #11
 8014096:	2203      	movs	r2, #3
 8014098:	2001      	movs	r0, #1
 801409a:	f7fa f87f 	bl	800e19c <Draw_Circle_D>
  DispStr(S_X[SAVE_BMP], LABLE_Y, INV, (char *)(&FnNote+14*Info));
 801409e:	20f8      	movs	r0, #248	; 0xf8
 80140a0:	79fb      	ldrb	r3, [r7, #7]
 80140a2:	f44f 7275 	mov.w	r2, #980	; 0x3d4
 80140a6:	fb02 f303 	mul.w	r3, r2, r3
 80140aa:	4a07      	ldr	r2, [pc, #28]	; (80140c8 <DispFileInfo+0x5c>)
 80140ac:	4413      	add	r3, r2
 80140ae:	2201      	movs	r2, #1
 80140b0:	2103      	movs	r1, #3
 80140b2:	f7f9 ff9d 	bl	800dff0 <DispStr>
  HAL_Delay(2000);
 80140b6:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80140ba:	f003 ffff 	bl	80180bc <HAL_Delay>

}
 80140be:	bf00      	nop
 80140c0:	3708      	adds	r7, #8
 80140c2:	46bd      	mov	sp, r7
 80140c4:	bd80      	pop	{r7, pc}
 80140c6:	bf00      	nop
 80140c8:	0800238c 	.word	0x0800238c

080140cc <DispBMPInfo>:

/*******************************************************************************

*******************************************************************************/
void DispBMPInfo(void)
{
 80140cc:	b580      	push	{r7, lr}
 80140ce:	b082      	sub	sp, #8
 80140d0:	af02      	add	r7, sp, #8
  SetColor(GRY, TCOLOR[FN]);
 80140d2:	f64f 4310 	movw	r3, #64528	; 0xfc10
 80140d6:	4619      	mov	r1, r3
 80140d8:	f643 10e7 	movw	r0, #14823	; 0x39e7
 80140dc:	f7f9 ff70 	bl	800dfc0 <SetColor>
  u8ToDec3(NumStr, List[SAVE_BMP].Val);
 80140e0:	4b1a      	ldr	r3, [pc, #104]	; (801414c <DispBMPInfo+0x80>)
 80140e2:	f9b3 30ec 	ldrsh.w	r3, [r3, #236]	; 0xec
 80140e6:	b2db      	uxtb	r3, r3
 80140e8:	4619      	mov	r1, r3
 80140ea:	4819      	ldr	r0, [pc, #100]	; (8014150 <DispBMPInfo+0x84>)
 80140ec:	f7fc fff4 	bl	80110d8 <u8ToDec3>
  Draw_Circle_D(INV, S_X[SAVE_BMP]-3, LABLE_Y, 11, 0, 6*11);
 80140f0:	23f8      	movs	r3, #248	; 0xf8
 80140f2:	b29b      	uxth	r3, r3
 80140f4:	3b03      	subs	r3, #3
 80140f6:	b29b      	uxth	r3, r3
 80140f8:	b219      	sxth	r1, r3
 80140fa:	2342      	movs	r3, #66	; 0x42
 80140fc:	9301      	str	r3, [sp, #4]
 80140fe:	2300      	movs	r3, #0
 8014100:	9300      	str	r3, [sp, #0]
 8014102:	230b      	movs	r3, #11
 8014104:	2203      	movs	r2, #3
 8014106:	2001      	movs	r0, #1
 8014108:	f7fa f848 	bl	800e19c <Draw_Circle_D>
  DispStr(S_X[SAVE_BMP],    LABLE_Y, INV, ("Save"));//0513
 801410c:	20f8      	movs	r0, #248	; 0xf8
 801410e:	4b11      	ldr	r3, [pc, #68]	; (8014154 <DispBMPInfo+0x88>)
 8014110:	2201      	movs	r2, #1
 8014112:	2103      	movs	r1, #3
 8014114:	f7f9 ff6c 	bl	800dff0 <DispStr>
  DispStr(S_X[SAVE_BMP]+24, LABLE_Y, INV, (char *)NumStr);
 8014118:	23f8      	movs	r3, #248	; 0xf8
 801411a:	b29b      	uxth	r3, r3
 801411c:	3318      	adds	r3, #24
 801411e:	b29b      	uxth	r3, r3
 8014120:	b218      	sxth	r0, r3
 8014122:	4b0b      	ldr	r3, [pc, #44]	; (8014150 <DispBMPInfo+0x84>)
 8014124:	2201      	movs	r2, #1
 8014126:	2103      	movs	r1, #3
 8014128:	f7f9 ff62 	bl	800dff0 <DispStr>
  DispStr(S_X[SAVE_BMP]+42, LABLE_Y, INV, (List[SAVE_BMP].PTR ));
 801412c:	23f8      	movs	r3, #248	; 0xf8
 801412e:	b29b      	uxth	r3, r3
 8014130:	332a      	adds	r3, #42	; 0x2a
 8014132:	b29b      	uxth	r3, r3
 8014134:	b218      	sxth	r0, r3
 8014136:	4b05      	ldr	r3, [pc, #20]	; (801414c <DispBMPInfo+0x80>)
 8014138:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 801413c:	2201      	movs	r2, #1
 801413e:	2103      	movs	r1, #3
 8014140:	f7f9 ff56 	bl	800dff0 <DispStr>
}
 8014144:	bf00      	nop
 8014146:	46bd      	mov	sp, r7
 8014148:	bd80      	pop	{r7, pc}
 801414a:	bf00      	nop
 801414c:	20000274 	.word	0x20000274
 8014150:	20003668 	.word	0x20003668
 8014154:	080009a4 	.word	0x080009a4

08014158 <Update_Proc_All>:

/*******************************************************************************
Update_Proc_All  ȫ��ˢ��
*******************************************************************************/
void Update_Proc_All(void)
{
 8014158:	b590      	push	{r4, r7, lr}
 801415a:	b087      	sub	sp, #28
 801415c:	af02      	add	r7, sp, #8
  short i;
  long Tmp = 0;
 801415e:	2300      	movs	r3, #0
 8014160:	60bb      	str	r3, [r7, #8]
  short Range = List[Y_RANGES].Val + 10*List[PROBEATT].Val;
 8014162:	4ba3      	ldr	r3, [pc, #652]	; (80143f0 <Update_Proc_All+0x298>)
 8014164:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8014168:	b29a      	uxth	r2, r3
 801416a:	4ba1      	ldr	r3, [pc, #644]	; (80143f0 <Update_Proc_All+0x298>)
 801416c:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8014170:	b29b      	uxth	r3, r3
 8014172:	4619      	mov	r1, r3
 8014174:	0089      	lsls	r1, r1, #2
 8014176:	440b      	add	r3, r1
 8014178:	005b      	lsls	r3, r3, #1
 801417a:	b29b      	uxth	r3, r3
 801417c:	4413      	add	r3, r2
 801417e:	b29b      	uxth	r3, r3
 8014180:	80fb      	strh	r3, [r7, #6]

  for(i=Y_RANGES; i<=STANDBY; i++){
 8014182:	2300      	movs	r3, #0
 8014184:	81fb      	strh	r3, [r7, #14]
 8014186:	e015      	b.n	80141b4 <Update_Proc_All+0x5c>
    List[i].Flg |= UPD;
 8014188:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 801418c:	4a98      	ldr	r2, [pc, #608]	; (80143f0 <Update_Proc_All+0x298>)
 801418e:	00db      	lsls	r3, r3, #3
 8014190:	4413      	add	r3, r2
 8014192:	799a      	ldrb	r2, [r3, #6]
 8014194:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8014198:	f042 0220 	orr.w	r2, r2, #32
 801419c:	b2d1      	uxtb	r1, r2
 801419e:	4a94      	ldr	r2, [pc, #592]	; (80143f0 <Update_Proc_All+0x298>)
 80141a0:	00db      	lsls	r3, r3, #3
 80141a2:	4413      	add	r3, r2
 80141a4:	460a      	mov	r2, r1
 80141a6:	719a      	strb	r2, [r3, #6]
  for(i=Y_RANGES; i<=STANDBY; i++){
 80141a8:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80141ac:	b29b      	uxth	r3, r3
 80141ae:	3301      	adds	r3, #1
 80141b0:	b29b      	uxth	r3, r3
 80141b2:	81fb      	strh	r3, [r7, #14]
 80141b4:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80141b8:	2b29      	cmp	r3, #41	; 0x29
 80141ba:	dde5      	ble.n	8014188 <Update_Proc_All+0x30>
  }

  for(i=Y_RANGES; i<=STANDBY; i++){
 80141bc:	2300      	movs	r3, #0
 80141be:	81fb      	strh	r3, [r7, #14]
 80141c0:	e1be      	b.n	8014540 <Update_Proc_All+0x3e8>
    if(List[i].Flg & UPD){
 80141c2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80141c6:	4a8a      	ldr	r2, [pc, #552]	; (80143f0 <Update_Proc_All+0x298>)
 80141c8:	00db      	lsls	r3, r3, #3
 80141ca:	4413      	add	r3, r2
 80141cc:	799b      	ldrb	r3, [r3, #6]
 80141ce:	f003 0320 	and.w	r3, r3, #32
 80141d2:	2b00      	cmp	r3, #0
 80141d4:	f000 81ad 	beq.w	8014532 <Update_Proc_All+0x3da>
      List[i].Flg &= ~UPD;
 80141d8:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80141dc:	4a84      	ldr	r2, [pc, #528]	; (80143f0 <Update_Proc_All+0x298>)
 80141de:	00db      	lsls	r3, r3, #3
 80141e0:	4413      	add	r3, r2
 80141e2:	799a      	ldrb	r2, [r3, #6]
 80141e4:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80141e8:	f022 0220 	bic.w	r2, r2, #32
 80141ec:	b2d1      	uxtb	r1, r2
 80141ee:	4a80      	ldr	r2, [pc, #512]	; (80143f0 <Update_Proc_All+0x298>)
 80141f0:	00db      	lsls	r3, r3, #3
 80141f2:	4413      	add	r3, r2
 80141f4:	460a      	mov	r2, r1
 80141f6:	719a      	strb	r2, [r3, #6]
      switch (i){
 80141f8:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80141fc:	2b12      	cmp	r3, #18
 80141fe:	f300 8199 	bgt.w	8014534 <Update_Proc_All+0x3dc>
 8014202:	2b0d      	cmp	r3, #13
 8014204:	f280 80ac 	bge.w	8014360 <Update_Proc_All+0x208>
 8014208:	2b03      	cmp	r3, #3
 801420a:	dc02      	bgt.n	8014212 <Update_Proc_All+0xba>
 801420c:	2b00      	cmp	r3, #0
 801420e:	da04      	bge.n	801421a <Update_Proc_All+0xc2>
 8014210:	e190      	b.n	8014534 <Update_Proc_All+0x3dc>
 8014212:	2b07      	cmp	r3, #7
 8014214:	f000 815a 	beq.w	80144cc <Update_Proc_All+0x374>
 8014218:	e18c      	b.n	8014534 <Update_Proc_All+0x3dc>
      case Y_RANGES:   // ˢ����ʾ Y ���̵�λ
      case PROBEATT:   // ˢ����ʾ̽ͷ˥������
      case COUPLING:   // ˢ����ʾ���ģʽ״̬
      case V0_POSI:    // ˢ����ʾ��ֱƫ��λ��
        SetColor(GRY, TCOLOR[YN]);
 801421a:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 801421e:	4619      	mov	r1, r3
 8014220:	f643 10e7 	movw	r0, #14823	; 0x39e7
 8014224:	f7f9 fecc 	bl	800dfc0 <SetColor>
        if(i == Y_RANGES || i == COUPLING||i == PROBEATT){
 8014228:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 801422c:	2b00      	cmp	r3, #0
 801422e:	d007      	beq.n	8014240 <Update_Proc_All+0xe8>
 8014230:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8014234:	2b01      	cmp	r3, #1
 8014236:	d003      	beq.n	8014240 <Update_Proc_All+0xe8>
 8014238:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 801423c:	2b02      	cmp	r3, #2
 801423e:	d138      	bne.n	80142b2 <Update_Proc_All+0x15a>
          Draw_Circle_D(INV, S_X[Y_RANGES]-3, TITLE_Y_POS, 11, 0, 6*7);
 8014240:	232f      	movs	r3, #47	; 0x2f
 8014242:	b29b      	uxth	r3, r3
 8014244:	3b03      	subs	r3, #3
 8014246:	b29b      	uxth	r3, r3
 8014248:	b219      	sxth	r1, r3
 801424a:	232a      	movs	r3, #42	; 0x2a
 801424c:	9301      	str	r3, [sp, #4]
 801424e:	2300      	movs	r3, #0
 8014250:	9300      	str	r3, [sp, #0]
 8014252:	230b      	movs	r3, #11
 8014254:	22e1      	movs	r2, #225	; 0xe1
 8014256:	2001      	movs	r0, #1
 8014258:	f7f9 ffa0 	bl	800e19c <Draw_Circle_D>
          DispStr(S_X[Y_RANGES], TITLE_Y_POS, INV,      (List[Y_RANGES].PTR +(Range)*6));
 801425c:	202f      	movs	r0, #47	; 0x2f
 801425e:	4b64      	ldr	r3, [pc, #400]	; (80143f0 <Update_Proc_All+0x298>)
 8014260:	6819      	ldr	r1, [r3, #0]
 8014262:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8014266:	4613      	mov	r3, r2
 8014268:	005b      	lsls	r3, r3, #1
 801426a:	4413      	add	r3, r2
 801426c:	005b      	lsls	r3, r3, #1
 801426e:	440b      	add	r3, r1
 8014270:	2201      	movs	r2, #1
 8014272:	21e1      	movs	r1, #225	; 0xe1
 8014274:	f7f9 febc 	bl	800dff0 <DispStr>
          DispStr(S_X[COUPLING], TITLE_Y_POS, INV,      (List[COUPLING].PTR +(List[COUPLING].Val)*6));
 8014278:	2047      	movs	r0, #71	; 0x47
 801427a:	4b5d      	ldr	r3, [pc, #372]	; (80143f0 <Update_Proc_All+0x298>)
 801427c:	689a      	ldr	r2, [r3, #8]
 801427e:	4b5c      	ldr	r3, [pc, #368]	; (80143f0 <Update_Proc_All+0x298>)
 8014280:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8014284:	4619      	mov	r1, r3
 8014286:	460b      	mov	r3, r1
 8014288:	005b      	lsls	r3, r3, #1
 801428a:	440b      	add	r3, r1
 801428c:	005b      	lsls	r3, r3, #1
 801428e:	4413      	add	r3, r2
 8014290:	2201      	movs	r2, #1
 8014292:	21e1      	movs	r1, #225	; 0xe1
 8014294:	f7f9 feac 	bl	800dff0 <DispStr>
          DispStr10x14(S_X[PROBEATT], TITLE_Y_POS, PRN+SYMB,(List[PROBEATT].Val?("A"):("B")));
 8014298:	2020      	movs	r0, #32
 801429a:	4b55      	ldr	r3, [pc, #340]	; (80143f0 <Update_Proc_All+0x298>)
 801429c:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 80142a0:	2b00      	cmp	r3, #0
 80142a2:	d001      	beq.n	80142a8 <Update_Proc_All+0x150>
 80142a4:	4b53      	ldr	r3, [pc, #332]	; (80143f4 <Update_Proc_All+0x29c>)
 80142a6:	e000      	b.n	80142aa <Update_Proc_All+0x152>
 80142a8:	4b53      	ldr	r3, [pc, #332]	; (80143f8 <Update_Proc_All+0x2a0>)
 80142aa:	2210      	movs	r2, #16
 80142ac:	21e1      	movs	r1, #225	; 0xe1
 80142ae:	f7fa f907 	bl	800e4c0 <DispStr10x14>
        }
        ParamTab[P1x2] = 2*((List[V0_POSI].Val+1));
 80142b2:	4b4f      	ldr	r3, [pc, #316]	; (80143f0 <Update_Proc_All+0x298>)
 80142b4:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 80142b8:	3301      	adds	r3, #1
 80142ba:	b29b      	uxth	r3, r3
 80142bc:	005b      	lsls	r3, r3, #1
 80142be:	b29b      	uxth	r3, r3
 80142c0:	b21a      	sxth	r2, r3
 80142c2:	4b4e      	ldr	r3, [pc, #312]	; (80143fc <Update_Proc_All+0x2a4>)
 80142c4:	829a      	strh	r2, [r3, #20]
        ParamTab[VTx2] = ParamTab[P1x2]+ 2*(List[THRESHOLD].Val+1);
 80142c6:	4b4d      	ldr	r3, [pc, #308]	; (80143fc <Update_Proc_All+0x2a4>)
 80142c8:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 80142cc:	b29a      	uxth	r2, r3
 80142ce:	4b48      	ldr	r3, [pc, #288]	; (80143f0 <Update_Proc_All+0x298>)
 80142d0:	f9b3 3084 	ldrsh.w	r3, [r3, #132]	; 0x84
 80142d4:	3301      	adds	r3, #1
 80142d6:	b29b      	uxth	r3, r3
 80142d8:	005b      	lsls	r3, r3, #1
 80142da:	b29b      	uxth	r3, r3
 80142dc:	4413      	add	r3, r2
 80142de:	b29b      	uxth	r3, r3
 80142e0:	b21a      	sxth	r2, r3
 80142e2:	4b46      	ldr	r3, [pc, #280]	; (80143fc <Update_Proc_All+0x2a4>)
 80142e4:	839a      	strh	r2, [r3, #28]

        StateA =  (List[Y_RANGES].Val>5)?ACT: GND;                                    //ACT GND �ӵػ򼤻�״̬
 80142e6:	4b42      	ldr	r3, [pc, #264]	; (80143f0 <Update_Proc_All+0x298>)
 80142e8:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80142ec:	2b05      	cmp	r3, #5
 80142ee:	dd01      	ble.n	80142f4 <Update_Proc_All+0x19c>
 80142f0:	2204      	movs	r2, #4
 80142f2:	e000      	b.n	80142f6 <Update_Proc_All+0x19e>
 80142f4:	2200      	movs	r2, #0
 80142f6:	4b42      	ldr	r3, [pc, #264]	; (8014400 <Update_Proc_All+0x2a8>)
 80142f8:	801a      	strh	r2, [r3, #0]
        GainA  = List[Y_RANGES].Val;
 80142fa:	4b3d      	ldr	r3, [pc, #244]	; (80143f0 <Update_Proc_All+0x298>)
 80142fc:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
 8014300:	4b40      	ldr	r3, [pc, #256]	; (8014404 <Update_Proc_All+0x2ac>)
 8014302:	801a      	strh	r2, [r3, #0]
        if(List[Y_RANGES].Val>1)
 8014304:	4b3a      	ldr	r3, [pc, #232]	; (80143f0 <Update_Proc_All+0x298>)
 8014306:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801430a:	2b01      	cmp	r3, #1
 801430c:	dd03      	ble.n	8014316 <Update_Proc_All+0x1be>
          KindA  = HV;
 801430e:	4b3e      	ldr	r3, [pc, #248]	; (8014408 <Update_Proc_All+0x2b0>)
 8014310:	2201      	movs	r2, #1
 8014312:	801a      	strh	r2, [r3, #0]
 8014314:	e002      	b.n	801431c <Update_Proc_All+0x1c4>
        else
          KindA  = LV;                //Ch1ѡ���ѹ���ѹ����
 8014316:	4b3c      	ldr	r3, [pc, #240]	; (8014408 <Update_Proc_All+0x2b0>)
 8014318:	2200      	movs	r2, #0
 801431a:	801a      	strh	r2, [r3, #0]

        CouplA = (List[COUPLING].Val)? AC : DC;                      // AC);  //AC/DC��Ϸ�ʽ
 801431c:	4b34      	ldr	r3, [pc, #208]	; (80143f0 <Update_Proc_All+0x298>)
 801431e:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8014322:	2b00      	cmp	r3, #0
 8014324:	d001      	beq.n	801432a <Update_Proc_All+0x1d2>
 8014326:	2200      	movs	r2, #0
 8014328:	e000      	b.n	801432c <Update_Proc_All+0x1d4>
 801432a:	2202      	movs	r2, #2
 801432c:	4b37      	ldr	r3, [pc, #220]	; (801440c <Update_Proc_All+0x2b4>)
 801432e:	801a      	strh	r2, [r3, #0]
        BIOS_Ctrl(AiRANGE, KindA+CouplA+StateA);             //Ch1״̬ˢ��
 8014330:	4b35      	ldr	r3, [pc, #212]	; (8014408 <Update_Proc_All+0x2b0>)
 8014332:	f9b3 3000 	ldrsh.w	r3, [r3]
 8014336:	461a      	mov	r2, r3
 8014338:	4b34      	ldr	r3, [pc, #208]	; (801440c <Update_Proc_All+0x2b4>)
 801433a:	f9b3 3000 	ldrsh.w	r3, [r3]
 801433e:	4413      	add	r3, r2
 8014340:	4a2f      	ldr	r2, [pc, #188]	; (8014400 <Update_Proc_All+0x2a8>)
 8014342:	f9b2 2000 	ldrsh.w	r2, [r2]
 8014346:	4413      	add	r3, r2
 8014348:	4619      	mov	r1, r3
 801434a:	2007      	movs	r0, #7
 801434c:	f7f8 f812 	bl	800c374 <BIOS_Ctrl>
        AiPosi(List[V0_POSI].Val);                        //Ch1Ӳ����Ӧλ��
 8014350:	4b27      	ldr	r3, [pc, #156]	; (80143f0 <Update_Proc_All+0x298>)
 8014352:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 8014356:	b2db      	uxtb	r3, r3
 8014358:	4618      	mov	r0, r3
 801435a:	f000 fa0f 	bl	801477c <AiPosi>

        break;
 801435e:	e0e9      	b.n	8014534 <Update_Proc_All+0x3dc>
      case TR_MODE:   // ˢ����ʾ������ʽ
      case FITTRIGG:  // ˢ����ʾ�Զ�������ֵ
      case THRESHOLD: // ˢ����ʾ������ֵ
      case SENSITIVE: // ˢ����ʾ����������
      case TR_TYPE:   // ˢ����ʾ�α���ʽ
        DispStatus();
 8014360:	f7ff fbee 	bl	8013b40 <DispStatus>
        SetColor(GRY, TCOLOR[TRG]);
 8014364:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8014368:	4619      	mov	r1, r3
 801436a:	f643 10e7 	movw	r0, #14823	; 0x39e7
 801436e:	f7f9 fe27 	bl	800dfc0 <SetColor>
        if(i == TR_MODE || i==SENSITIVE)
 8014372:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8014376:	2b0e      	cmp	r3, #14
 8014378:	d003      	beq.n	8014382 <Update_Proc_All+0x22a>
 801437a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 801437e:	2b11      	cmp	r3, #17
 8014380:	d11a      	bne.n	80143b8 <Update_Proc_All+0x260>
        {
          Draw_Circle_D(INV, S_X[TR_MODE]-3, TITLE_Y_POS, 11, 0, 6*8);
 8014382:	23dd      	movs	r3, #221	; 0xdd
 8014384:	b29b      	uxth	r3, r3
 8014386:	3b03      	subs	r3, #3
 8014388:	b29b      	uxth	r3, r3
 801438a:	b219      	sxth	r1, r3
 801438c:	2330      	movs	r3, #48	; 0x30
 801438e:	9301      	str	r3, [sp, #4]
 8014390:	2300      	movs	r3, #0
 8014392:	9300      	str	r3, [sp, #0]
 8014394:	230b      	movs	r3, #11
 8014396:	22e1      	movs	r2, #225	; 0xe1
 8014398:	2001      	movs	r0, #1
 801439a:	f7f9 feff 	bl	800e19c <Draw_Circle_D>
          DispStr10x14(S_X[TR_MODE], TITLE_Y_POS, INV+SYMB,(List[TR_MODE].Val?("D"):("C")));
 801439e:	20dd      	movs	r0, #221	; 0xdd
 80143a0:	4b13      	ldr	r3, [pc, #76]	; (80143f0 <Update_Proc_All+0x298>)
 80143a2:	f9b3 3074 	ldrsh.w	r3, [r3, #116]	; 0x74
 80143a6:	2b00      	cmp	r3, #0
 80143a8:	d001      	beq.n	80143ae <Update_Proc_All+0x256>
 80143aa:	4b19      	ldr	r3, [pc, #100]	; (8014410 <Update_Proc_All+0x2b8>)
 80143ac:	e000      	b.n	80143b0 <Update_Proc_All+0x258>
 80143ae:	4b19      	ldr	r3, [pc, #100]	; (8014414 <Update_Proc_All+0x2bc>)
 80143b0:	2211      	movs	r2, #17
 80143b2:	21e1      	movs	r1, #225	; 0xe1
 80143b4:	f7fa f884 	bl	800e4c0 <DispStr10x14>
        }
        if(i == FITTRIGG)
 80143b8:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80143bc:	2b0f      	cmp	r3, #15
 80143be:	d132      	bne.n	8014426 <Update_Proc_All+0x2ce>
        {
          DispStr10x14(S_X[FITTRIGG], TITLE_Y_POS, PRN+SYMB,(List[FITTRIGG].Val?("F"):("B")));
 80143c0:	20cf      	movs	r0, #207	; 0xcf
 80143c2:	4b0b      	ldr	r3, [pc, #44]	; (80143f0 <Update_Proc_All+0x298>)
 80143c4:	f9b3 307c 	ldrsh.w	r3, [r3, #124]	; 0x7c
 80143c8:	2b00      	cmp	r3, #0
 80143ca:	d001      	beq.n	80143d0 <Update_Proc_All+0x278>
 80143cc:	4b12      	ldr	r3, [pc, #72]	; (8014418 <Update_Proc_All+0x2c0>)
 80143ce:	e000      	b.n	80143d2 <Update_Proc_All+0x27a>
 80143d0:	4b09      	ldr	r3, [pc, #36]	; (80143f8 <Update_Proc_All+0x2a0>)
 80143d2:	2210      	movs	r2, #16
 80143d4:	21e1      	movs	r1, #225	; 0xe1
 80143d6:	f7fa f873 	bl	800e4c0 <DispStr10x14>
          if(List[FITTRIGG].Val)KEYTIME = 300;
 80143da:	4b05      	ldr	r3, [pc, #20]	; (80143f0 <Update_Proc_All+0x298>)
 80143dc:	f9b3 307c 	ldrsh.w	r3, [r3, #124]	; 0x7c
 80143e0:	2b00      	cmp	r3, #0
 80143e2:	d01d      	beq.n	8014420 <Update_Proc_All+0x2c8>
 80143e4:	4b0d      	ldr	r3, [pc, #52]	; (801441c <Update_Proc_All+0x2c4>)
 80143e6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80143ea:	801a      	strh	r2, [r3, #0]
 80143ec:	e01b      	b.n	8014426 <Update_Proc_All+0x2ce>
 80143ee:	bf00      	nop
 80143f0:	20000274 	.word	0x20000274
 80143f4:	080009ac 	.word	0x080009ac
 80143f8:	080009b0 	.word	0x080009b0
 80143fc:	20000140 	.word	0x20000140
 8014400:	2000368e 	.word	0x2000368e
 8014404:	20003676 	.word	0x20003676
 8014408:	200076b2 	.word	0x200076b2
 801440c:	200076b4 	.word	0x200076b4
 8014410:	080009dc 	.word	0x080009dc
 8014414:	080009e0 	.word	0x080009e0
 8014418:	080009f0 	.word	0x080009f0
 801441c:	20000776 	.word	0x20000776
          else KEYTIME = 0;
 8014420:	4b4c      	ldr	r3, [pc, #304]	; (8014554 <Update_Proc_All+0x3fc>)
 8014422:	2200      	movs	r2, #0
 8014424:	801a      	strh	r2, [r3, #0]
        };
        ParamTab[VTx2]= ParamTab[P1x2]+2*List[THRESHOLD].Val;
 8014426:	4b4c      	ldr	r3, [pc, #304]	; (8014558 <Update_Proc_All+0x400>)
 8014428:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 801442c:	b29a      	uxth	r2, r3
 801442e:	4b4b      	ldr	r3, [pc, #300]	; (801455c <Update_Proc_All+0x404>)
 8014430:	f9b3 3084 	ldrsh.w	r3, [r3, #132]	; 0x84
 8014434:	b29b      	uxth	r3, r3
 8014436:	005b      	lsls	r3, r3, #1
 8014438:	b29b      	uxth	r3, r3
 801443a:	4413      	add	r3, r2
 801443c:	b29b      	uxth	r3, r3
 801443e:	b21a      	sxth	r2, r3
 8014440:	4b45      	ldr	r3, [pc, #276]	; (8014558 <Update_Proc_All+0x400>)
 8014442:	839a      	strh	r2, [r3, #28]
        Tmp  = List[SENSITIVE].Val;
 8014444:	4b45      	ldr	r3, [pc, #276]	; (801455c <Update_Proc_All+0x404>)
 8014446:	f9b3 308c 	ldrsh.w	r3, [r3, #140]	; 0x8c
 801444a:	60bb      	str	r3, [r7, #8]
        Tmp *= X_SCALE[Range]* Exp(V_SCALE[Range]);
 801444c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8014450:	4a43      	ldr	r2, [pc, #268]	; (8014560 <Update_Proc_All+0x408>)
 8014452:	5cd3      	ldrb	r3, [r2, r3]
 8014454:	461c      	mov	r4, r3
 8014456:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801445a:	4a42      	ldr	r2, [pc, #264]	; (8014564 <Update_Proc_All+0x40c>)
 801445c:	5cd3      	ldrb	r3, [r2, r3]
 801445e:	4618      	mov	r0, r3
 8014460:	f7fc ff9e 	bl	80113a0 <Exp>
 8014464:	4603      	mov	r3, r0
 8014466:	fb03 f204 	mul.w	r2, r3, r4
 801446a:	68bb      	ldr	r3, [r7, #8]
 801446c:	fb02 f303 	mul.w	r3, r2, r3
 8014470:	60bb      	str	r3, [r7, #8]
        Value2Str(NumStr, Tmp, V[2], 2, UNSIGN);
 8014472:	2301      	movs	r3, #1
 8014474:	9300      	str	r3, [sp, #0]
 8014476:	2302      	movs	r3, #2
 8014478:	4a3b      	ldr	r2, [pc, #236]	; (8014568 <Update_Proc_All+0x410>)
 801447a:	68b9      	ldr	r1, [r7, #8]
 801447c:	483b      	ldr	r0, [pc, #236]	; (801456c <Update_Proc_All+0x414>)
 801447e:	f7fc fe93 	bl	80111a8 <Value2Str>
        DispStr10x14(S_X[SENSITIVE], TITLE_Y_POS, INV+SYMB,"E");
 8014482:	20e7      	movs	r0, #231	; 0xe7
 8014484:	4b3a      	ldr	r3, [pc, #232]	; (8014570 <Update_Proc_All+0x418>)
 8014486:	2211      	movs	r2, #17
 8014488:	21e1      	movs	r1, #225	; 0xe1
 801448a:	f7fa f819 	bl	800e4c0 <DispStr10x14>
        DispStr(S_X[SENSITIVE]+9, TITLE_Y_POS, INV,  "     ");
 801448e:	23e7      	movs	r3, #231	; 0xe7
 8014490:	b29b      	uxth	r3, r3
 8014492:	3309      	adds	r3, #9
 8014494:	b29b      	uxth	r3, r3
 8014496:	b218      	sxth	r0, r3
 8014498:	4b36      	ldr	r3, [pc, #216]	; (8014574 <Update_Proc_All+0x41c>)
 801449a:	2201      	movs	r2, #1
 801449c:	21e1      	movs	r1, #225	; 0xe1
 801449e:	f7f9 fda7 	bl	800dff0 <DispStr>
        DispStr(S_X[SENSITIVE]+9, TITLE_Y_POS, INV,  (char *)NumStr);
 80144a2:	23e7      	movs	r3, #231	; 0xe7
 80144a4:	b29b      	uxth	r3, r3
 80144a6:	3309      	adds	r3, #9
 80144a8:	b29b      	uxth	r3, r3
 80144aa:	b218      	sxth	r0, r3
 80144ac:	4b2f      	ldr	r3, [pc, #188]	; (801456c <Update_Proc_All+0x414>)
 80144ae:	2201      	movs	r2, #1
 80144b0:	21e1      	movs	r1, #225	; 0xe1
 80144b2:	f7f9 fd9d 	bl	800dff0 <DispStr>
        ParamTab[VTF]=(List[TR_TYPE].Val)? L_HID : SHOW;
 80144b6:	4b29      	ldr	r3, [pc, #164]	; (801455c <Update_Proc_All+0x404>)
 80144b8:	f9b3 3094 	ldrsh.w	r3, [r3, #148]	; 0x94
 80144bc:	2b00      	cmp	r3, #0
 80144be:	d001      	beq.n	80144c4 <Update_Proc_All+0x36c>
 80144c0:	2202      	movs	r2, #2
 80144c2:	e000      	b.n	80144c6 <Update_Proc_All+0x36e>
 80144c4:	2200      	movs	r2, #0
 80144c6:	4b24      	ldr	r3, [pc, #144]	; (8014558 <Update_Proc_All+0x400>)
 80144c8:	811a      	strh	r2, [r3, #8]
        break;
 80144ca:	e033      	b.n	8014534 <Update_Proc_All+0x3dc>

      case TIM_BASE:  // ˢ����ʾʱ����λ
        SetColor(GRY, TCOLOR[XN]);
 80144cc:	f240 73ff 	movw	r3, #2047	; 0x7ff
 80144d0:	4619      	mov	r1, r3
 80144d2:	f643 10e7 	movw	r0, #14823	; 0x39e7
 80144d6:	f7f9 fd73 	bl	800dfc0 <SetColor>
        if(i == TIM_BASE)
 80144da:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80144de:	2b07      	cmp	r3, #7
 80144e0:	d120      	bne.n	8014524 <Update_Proc_All+0x3cc>
        {
          Draw_Circle_D(INV, S_X[i]-3, TITLE_Y_POS, 11, 2, 6*5);
 80144e2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80144e6:	4a24      	ldr	r2, [pc, #144]	; (8014578 <Update_Proc_All+0x420>)
 80144e8:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 80144ec:	b29b      	uxth	r3, r3
 80144ee:	3b03      	subs	r3, #3
 80144f0:	b29b      	uxth	r3, r3
 80144f2:	b219      	sxth	r1, r3
 80144f4:	231e      	movs	r3, #30
 80144f6:	9301      	str	r3, [sp, #4]
 80144f8:	2302      	movs	r3, #2
 80144fa:	9300      	str	r3, [sp, #0]
 80144fc:	230b      	movs	r3, #11
 80144fe:	22e1      	movs	r2, #225	; 0xe1
 8014500:	2001      	movs	r0, #1
 8014502:	f7f9 fe4b 	bl	800e19c <Draw_Circle_D>
          DispStr(S_X[i], TITLE_Y_POS, INV, (char *)TimeBase_Str[List[TIM_BASE].Val]);
 8014506:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 801450a:	4a1b      	ldr	r2, [pc, #108]	; (8014578 <Update_Proc_All+0x420>)
 801450c:	f932 0013 	ldrsh.w	r0, [r2, r3, lsl #1]
 8014510:	4b12      	ldr	r3, [pc, #72]	; (801455c <Update_Proc_All+0x404>)
 8014512:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8014516:	00db      	lsls	r3, r3, #3
 8014518:	4a18      	ldr	r2, [pc, #96]	; (801457c <Update_Proc_All+0x424>)
 801451a:	4413      	add	r3, r2
 801451c:	2201      	movs	r2, #1
 801451e:	21e1      	movs	r1, #225	; 0xe1
 8014520:	f7f9 fd66 	bl	800dff0 <DispStr>
        }
        Set_Base(List[TIM_BASE].Val);          // Ӳ������ɨ��ʱ����λ
 8014524:	4b0d      	ldr	r3, [pc, #52]	; (801455c <Update_Proc_All+0x404>)
 8014526:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 801452a:	4618      	mov	r0, r3
 801452c:	f7f8 f89e 	bl	800c66c <Set_Base>
      break;
 8014530:	e000      	b.n	8014534 <Update_Proc_All+0x3dc>

      }
    }
 8014532:	bf00      	nop
  for(i=Y_RANGES; i<=STANDBY; i++){
 8014534:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8014538:	b29b      	uxth	r3, r3
 801453a:	3301      	adds	r3, #1
 801453c:	b29b      	uxth	r3, r3
 801453e:	81fb      	strh	r3, [r7, #14]
 8014540:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8014544:	2b29      	cmp	r3, #41	; 0x29
 8014546:	f77f ae3c 	ble.w	80141c2 <Update_Proc_All+0x6a>
  }
}
 801454a:	bf00      	nop
 801454c:	bf00      	nop
 801454e:	3714      	adds	r7, #20
 8014550:	46bd      	mov	sp, r7
 8014552:	bd90      	pop	{r4, r7, pc}
 8014554:	20000776 	.word	0x20000776
 8014558:	20000140 	.word	0x20000140
 801455c:	20000274 	.word	0x20000274
 8014560:	080021cc 	.word	0x080021cc
 8014564:	080021a4 	.word	0x080021a4
 8014568:	08001da8 	.word	0x08001da8
 801456c:	20003668 	.word	0x20003668
 8014570:	080009ec 	.word	0x080009ec
 8014574:	080009e4 	.word	0x080009e4
 8014578:	080021f8 	.word	0x080021f8
 801457c:	200001ac 	.word	0x200001ac

08014580 <Align_Set>:

/*******************************************************************************
 Align_Set:
*******************************************************************************/
void Align_Set(void)
{
 8014580:	b580      	push	{r7, lr}
 8014582:	b082      	sub	sp, #8
 8014584:	af00      	add	r7, sp, #0
  unsigned short i, TmpA = 0, StA = 0;
 8014586:	2300      	movs	r3, #0
 8014588:	807b      	strh	r3, [r7, #2]
 801458a:	2300      	movs	r3, #0
 801458c:	80bb      	strh	r3, [r7, #4]

  Analys();
 801458e:	f000 f8b1 	bl	80146f4 <Analys>
  for(i=0; i<100; i++)
 8014592:	2300      	movs	r3, #0
 8014594:	80fb      	strh	r3, [r7, #6]
 8014596:	e051      	b.n	801463c <Align_Set+0xbc>
  {
    AiPosi(100);
 8014598:	2064      	movs	r0, #100	; 0x64
 801459a:	f000 f8ef 	bl	801477c <AiPosi>
    HAL_Delay(10);                             // Wait 10mS
 801459e:	200a      	movs	r0, #10
 80145a0:	f003 fd8c 	bl	80180bc <HAL_Delay>
    Analys();
 80145a4:	f000 f8a6 	bl	80146f4 <Analys>
    TmpA = 2048-Vavg;
 80145a8:	4b28      	ldr	r3, [pc, #160]	; (801464c <Align_Set+0xcc>)
 80145aa:	f9b3 3000 	ldrsh.w	r3, [r3]
 80145ae:	b29b      	uxth	r3, r3
 80145b0:	f5c3 6300 	rsb	r3, r3, #2048	; 0x800
 80145b4:	807b      	strh	r3, [r7, #2]

    if(TmpA != 0)
 80145b6:	887b      	ldrh	r3, [r7, #2]
 80145b8:	2b00      	cmp	r3, #0
 80145ba:	d036      	beq.n	801462a <Align_Set+0xaa>
    {
      KpA[KindA+(StateA?1:0)] += 700*TmpA/2048;
 80145bc:	4b24      	ldr	r3, [pc, #144]	; (8014650 <Align_Set+0xd0>)
 80145be:	681a      	ldr	r2, [r3, #0]
 80145c0:	4b24      	ldr	r3, [pc, #144]	; (8014654 <Align_Set+0xd4>)
 80145c2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80145c6:	4619      	mov	r1, r3
 80145c8:	4b23      	ldr	r3, [pc, #140]	; (8014658 <Align_Set+0xd8>)
 80145ca:	f9b3 3000 	ldrsh.w	r3, [r3]
 80145ce:	2b00      	cmp	r3, #0
 80145d0:	bf14      	ite	ne
 80145d2:	2301      	movne	r3, #1
 80145d4:	2300      	moveq	r3, #0
 80145d6:	b2db      	uxtb	r3, r3
 80145d8:	440b      	add	r3, r1
 80145da:	005b      	lsls	r3, r3, #1
 80145dc:	4413      	add	r3, r2
 80145de:	f9b3 3000 	ldrsh.w	r3, [r3]
 80145e2:	b29a      	uxth	r2, r3
 80145e4:	887b      	ldrh	r3, [r7, #2]
 80145e6:	f44f 712f 	mov.w	r1, #700	; 0x2bc
 80145ea:	fb01 f303 	mul.w	r3, r1, r3
 80145ee:	2b00      	cmp	r3, #0
 80145f0:	da01      	bge.n	80145f6 <Align_Set+0x76>
 80145f2:	f203 73ff 	addw	r3, r3, #2047	; 0x7ff
 80145f6:	12db      	asrs	r3, r3, #11
 80145f8:	b29b      	uxth	r3, r3
 80145fa:	4413      	add	r3, r2
 80145fc:	b299      	uxth	r1, r3
 80145fe:	4b14      	ldr	r3, [pc, #80]	; (8014650 <Align_Set+0xd0>)
 8014600:	681a      	ldr	r2, [r3, #0]
 8014602:	4b14      	ldr	r3, [pc, #80]	; (8014654 <Align_Set+0xd4>)
 8014604:	f9b3 3000 	ldrsh.w	r3, [r3]
 8014608:	4618      	mov	r0, r3
 801460a:	4b13      	ldr	r3, [pc, #76]	; (8014658 <Align_Set+0xd8>)
 801460c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8014610:	2b00      	cmp	r3, #0
 8014612:	bf14      	ite	ne
 8014614:	2301      	movne	r3, #1
 8014616:	2300      	moveq	r3, #0
 8014618:	b2db      	uxtb	r3, r3
 801461a:	4403      	add	r3, r0
 801461c:	005b      	lsls	r3, r3, #1
 801461e:	4413      	add	r3, r2
 8014620:	b20a      	sxth	r2, r1
 8014622:	801a      	strh	r2, [r3, #0]
      StA = 0;
 8014624:	2300      	movs	r3, #0
 8014626:	80bb      	strh	r3, [r7, #4]
 8014628:	e002      	b.n	8014630 <Align_Set+0xb0>
    }
    else
      StA++;
 801462a:	88bb      	ldrh	r3, [r7, #4]
 801462c:	3301      	adds	r3, #1
 801462e:	80bb      	strh	r3, [r7, #4]

    if(StA > 4)
 8014630:	88bb      	ldrh	r3, [r7, #4]
 8014632:	2b04      	cmp	r3, #4
 8014634:	d806      	bhi.n	8014644 <Align_Set+0xc4>
  for(i=0; i<100; i++)
 8014636:	88fb      	ldrh	r3, [r7, #6]
 8014638:	3301      	adds	r3, #1
 801463a:	80fb      	strh	r3, [r7, #6]
 801463c:	88fb      	ldrh	r3, [r7, #6]
 801463e:	2b63      	cmp	r3, #99	; 0x63
 8014640:	d9aa      	bls.n	8014598 <Align_Set+0x18>
 8014642:	e000      	b.n	8014646 <Align_Set+0xc6>
    	return;
 8014644:	bf00      	nop
  }

}
 8014646:	3708      	adds	r7, #8
 8014648:	46bd      	mov	sp, r7
 801464a:	bd80      	pop	{r7, pc}
 801464c:	20003684 	.word	0x20003684
 8014650:	20000554 	.word	0x20000554
 8014654:	200076b2 	.word	0x200076b2
 8014658:	2000368e 	.word	0x2000368e

0801465c <Zero_Align>:

/*******************************************************************************
 Channel's zero alignment:
*******************************************************************************/
void Zero_Align(void)
{
 801465c:	b580      	push	{r7, lr}
 801465e:	af00      	add	r7, sp, #0
  GainA  = 0;//0x20;
 8014660:	4b21      	ldr	r3, [pc, #132]	; (80146e8 <Zero_Align+0x8c>)
 8014662:	2200      	movs	r2, #0
 8014664:	801a      	strh	r2, [r3, #0]
  KindA  = HV;
 8014666:	4b21      	ldr	r3, [pc, #132]	; (80146ec <Zero_Align+0x90>)
 8014668:	2201      	movs	r2, #1
 801466a:	801a      	strh	r2, [r3, #0]
  StateA = ACT;
 801466c:	4b20      	ldr	r3, [pc, #128]	; (80146f0 <Zero_Align+0x94>)
 801466e:	2204      	movs	r2, #4
 8014670:	801a      	strh	r2, [r3, #0]
  BIOS_Ctrl(AiRANGE, HV+AC+ACT);
 8014672:	2105      	movs	r1, #5
 8014674:	2007      	movs	r0, #7
 8014676:	f7f7 fe7d 	bl	800c374 <BIOS_Ctrl>
  AiPosi(100);
 801467a:	2064      	movs	r0, #100	; 0x64
 801467c:	f000 f87e 	bl	801477c <AiPosi>
  HAL_Delay(1000);
 8014680:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8014684:	f003 fd1a 	bl	80180bc <HAL_Delay>
  Align_Set();
 8014688:	f7ff ff7a 	bl	8014580 <Align_Set>

  GainA  = 0;//0x20;
 801468c:	4b16      	ldr	r3, [pc, #88]	; (80146e8 <Zero_Align+0x8c>)
 801468e:	2200      	movs	r2, #0
 8014690:	801a      	strh	r2, [r3, #0]
  KindA  = HV;
 8014692:	4b16      	ldr	r3, [pc, #88]	; (80146ec <Zero_Align+0x90>)
 8014694:	2201      	movs	r2, #1
 8014696:	801a      	strh	r2, [r3, #0]
  StateA = GND;
 8014698:	4b15      	ldr	r3, [pc, #84]	; (80146f0 <Zero_Align+0x94>)
 801469a:	2200      	movs	r2, #0
 801469c:	801a      	strh	r2, [r3, #0]
  BIOS_Ctrl(AiRANGE, HV+AC+GND);
 801469e:	2101      	movs	r1, #1
 80146a0:	2007      	movs	r0, #7
 80146a2:	f7f7 fe67 	bl	800c374 <BIOS_Ctrl>
  AiPosi(100);
 80146a6:	2064      	movs	r0, #100	; 0x64
 80146a8:	f000 f868 	bl	801477c <AiPosi>
  HAL_Delay(1000);
 80146ac:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80146b0:	f003 fd04 	bl	80180bc <HAL_Delay>
  Align_Set();
 80146b4:	f7ff ff64 	bl	8014580 <Align_Set>

  GainA  = 0;//0x20;
 80146b8:	4b0b      	ldr	r3, [pc, #44]	; (80146e8 <Zero_Align+0x8c>)
 80146ba:	2200      	movs	r2, #0
 80146bc:	801a      	strh	r2, [r3, #0]
  KindA  = LV;
 80146be:	4b0b      	ldr	r3, [pc, #44]	; (80146ec <Zero_Align+0x90>)
 80146c0:	2200      	movs	r2, #0
 80146c2:	801a      	strh	r2, [r3, #0]
  StateA = GND;
 80146c4:	4b0a      	ldr	r3, [pc, #40]	; (80146f0 <Zero_Align+0x94>)
 80146c6:	2200      	movs	r2, #0
 80146c8:	801a      	strh	r2, [r3, #0]
  BIOS_Ctrl(AiRANGE, LV+AC+GND);
 80146ca:	2100      	movs	r1, #0
 80146cc:	2007      	movs	r0, #7
 80146ce:	f7f7 fe51 	bl	800c374 <BIOS_Ctrl>
  AiPosi(100);
 80146d2:	2064      	movs	r0, #100	; 0x64
 80146d4:	f000 f852 	bl	801477c <AiPosi>
  HAL_Delay(1000);
 80146d8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80146dc:	f003 fcee 	bl	80180bc <HAL_Delay>
  Align_Set();
 80146e0:	f7ff ff4e 	bl	8014580 <Align_Set>

}
 80146e4:	bf00      	nop
 80146e6:	bd80      	pop	{r7, pc}
 80146e8:	20003676 	.word	0x20003676
 80146ec:	200076b2 	.word	0x200076b2
 80146f0:	2000368e 	.word	0x2000368e

080146f4 <Analys>:

/*******************************************************************************
 Channel's error analys
*******************************************************************************/
void Analys(void)
{
 80146f4:	b580      	push	{r7, lr}
 80146f6:	b082      	sub	sp, #8
 80146f8:	af00      	add	r7, sp, #0
  unsigned i, SumA = 0;
 80146fa:	2300      	movs	r3, #0
 80146fc:	603b      	str	r3, [r7, #0]

  BIOS_Ctrl(SMPL_ST, DISABLE);
 80146fe:	2100      	movs	r1, #0
 8014700:	2004      	movs	r0, #4
 8014702:	f7f7 fe37 	bl	800c374 <BIOS_Ctrl>
  BIOS_Ctrl(SMPLTIM, 720-1);      // 72MHz/360 = 400kHz = 2.5uS
 8014706:	f240 21cf 	movw	r1, #719	; 0x2cf
 801470a:	2005      	movs	r0, #5
 801470c:	f7f7 fe32 	bl	800c374 <BIOS_Ctrl>
  BIOS_Ctrl(SMPLNUM, 4096);       // 8192
 8014710:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8014714:	2006      	movs	r0, #6
 8014716:	f7f7 fe2d 	bl	800c374 <BIOS_Ctrl>
  BIOS_Ctrl(SMPL_ST, ENABLE);
 801471a:	2101      	movs	r1, #1
 801471c:	2004      	movs	r0, #4
 801471e:	f7f7 fe29 	bl	800c374 <BIOS_Ctrl>
  while((BIOS_Info(CHA_CNT) != 0)) {};
 8014722:	bf00      	nop
 8014724:	2000      	movs	r0, #0
 8014726:	f7f7 fe0f 	bl	800c348 <BIOS_Info>
 801472a:	4603      	mov	r3, r0
 801472c:	2b00      	cmp	r3, #0
 801472e:	d1f9      	bne.n	8014724 <Analys+0x30>
  for(i=2; i<4000+2; i++){
 8014730:	2302      	movs	r3, #2
 8014732:	607b      	str	r3, [r7, #4]
 8014734:	e00a      	b.n	801474c <Analys+0x58>
    SumA += Sampl[i];
 8014736:	4a0e      	ldr	r2, [pc, #56]	; (8014770 <Analys+0x7c>)
 8014738:	687b      	ldr	r3, [r7, #4]
 801473a:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 801473e:	461a      	mov	r2, r3
 8014740:	683b      	ldr	r3, [r7, #0]
 8014742:	4413      	add	r3, r2
 8014744:	603b      	str	r3, [r7, #0]
  for(i=2; i<4000+2; i++){
 8014746:	687b      	ldr	r3, [r7, #4]
 8014748:	3301      	adds	r3, #1
 801474a:	607b      	str	r3, [r7, #4]
 801474c:	687b      	ldr	r3, [r7, #4]
 801474e:	f640 72a1 	movw	r2, #4001	; 0xfa1
 8014752:	4293      	cmp	r3, r2
 8014754:	d9ef      	bls.n	8014736 <Analys+0x42>
  }
  Vavg = SumA/4000; // 4000
 8014756:	683b      	ldr	r3, [r7, #0]
 8014758:	4a06      	ldr	r2, [pc, #24]	; (8014774 <Analys+0x80>)
 801475a:	fba2 2303 	umull	r2, r3, r2, r3
 801475e:	0a1b      	lsrs	r3, r3, #8
 8014760:	b21a      	sxth	r2, r3
 8014762:	4b05      	ldr	r3, [pc, #20]	; (8014778 <Analys+0x84>)
 8014764:	801a      	strh	r2, [r3, #0]
}
 8014766:	bf00      	nop
 8014768:	3708      	adds	r7, #8
 801476a:	46bd      	mov	sp, r7
 801476c:	bd80      	pop	{r7, pc}
 801476e:	bf00      	nop
 8014770:	2000369c 	.word	0x2000369c
 8014774:	10624dd3 	.word	0x10624dd3
 8014778:	20003684 	.word	0x20003684

0801477c <AiPosi>:

/*******************************************************************************
 DevCtrl:  offset
*******************************************************************************/
void AiPosi(char Val)
{
 801477c:	b580      	push	{r7, lr}
 801477e:	b082      	sub	sp, #8
 8014780:	af00      	add	r7, sp, #0
 8014782:	4603      	mov	r3, r0
 8014784:	71fb      	strb	r3, [r7, #7]
   BIOS_Ctrl(AOFFSET,((char)Val-100)*(KpA[KindA+(StateA?1:0)]/2)*GK[GainA]/KgA[KindA+(StateA?1:0)]+KpA[KindA+(StateA?1:0)]);
 8014786:	79fb      	ldrb	r3, [r7, #7]
 8014788:	f1a3 0264 	sub.w	r2, r3, #100	; 0x64
 801478c:	4b28      	ldr	r3, [pc, #160]	; (8014830 <AiPosi+0xb4>)
 801478e:	6819      	ldr	r1, [r3, #0]
 8014790:	4b28      	ldr	r3, [pc, #160]	; (8014834 <AiPosi+0xb8>)
 8014792:	f9b3 3000 	ldrsh.w	r3, [r3]
 8014796:	4618      	mov	r0, r3
 8014798:	4b27      	ldr	r3, [pc, #156]	; (8014838 <AiPosi+0xbc>)
 801479a:	f9b3 3000 	ldrsh.w	r3, [r3]
 801479e:	2b00      	cmp	r3, #0
 80147a0:	bf14      	ite	ne
 80147a2:	2301      	movne	r3, #1
 80147a4:	2300      	moveq	r3, #0
 80147a6:	b2db      	uxtb	r3, r3
 80147a8:	4403      	add	r3, r0
 80147aa:	005b      	lsls	r3, r3, #1
 80147ac:	440b      	add	r3, r1
 80147ae:	f9b3 3000 	ldrsh.w	r3, [r3]
 80147b2:	0fd9      	lsrs	r1, r3, #31
 80147b4:	440b      	add	r3, r1
 80147b6:	105b      	asrs	r3, r3, #1
 80147b8:	b21b      	sxth	r3, r3
 80147ba:	fb03 f302 	mul.w	r3, r3, r2
 80147be:	4a1f      	ldr	r2, [pc, #124]	; (801483c <AiPosi+0xc0>)
 80147c0:	f9b2 2000 	ldrsh.w	r2, [r2]
 80147c4:	4611      	mov	r1, r2
 80147c6:	4a1e      	ldr	r2, [pc, #120]	; (8014840 <AiPosi+0xc4>)
 80147c8:	5c52      	ldrb	r2, [r2, r1]
 80147ca:	fb02 f303 	mul.w	r3, r2, r3
 80147ce:	4a1d      	ldr	r2, [pc, #116]	; (8014844 <AiPosi+0xc8>)
 80147d0:	6811      	ldr	r1, [r2, #0]
 80147d2:	4a18      	ldr	r2, [pc, #96]	; (8014834 <AiPosi+0xb8>)
 80147d4:	f9b2 2000 	ldrsh.w	r2, [r2]
 80147d8:	4610      	mov	r0, r2
 80147da:	4a17      	ldr	r2, [pc, #92]	; (8014838 <AiPosi+0xbc>)
 80147dc:	f9b2 2000 	ldrsh.w	r2, [r2]
 80147e0:	2a00      	cmp	r2, #0
 80147e2:	bf14      	ite	ne
 80147e4:	2201      	movne	r2, #1
 80147e6:	2200      	moveq	r2, #0
 80147e8:	b2d2      	uxtb	r2, r2
 80147ea:	4402      	add	r2, r0
 80147ec:	0052      	lsls	r2, r2, #1
 80147ee:	440a      	add	r2, r1
 80147f0:	f9b2 2000 	ldrsh.w	r2, [r2]
 80147f4:	fb93 f3f2 	sdiv	r3, r3, r2
 80147f8:	4a0d      	ldr	r2, [pc, #52]	; (8014830 <AiPosi+0xb4>)
 80147fa:	6811      	ldr	r1, [r2, #0]
 80147fc:	4a0d      	ldr	r2, [pc, #52]	; (8014834 <AiPosi+0xb8>)
 80147fe:	f9b2 2000 	ldrsh.w	r2, [r2]
 8014802:	4610      	mov	r0, r2
 8014804:	4a0c      	ldr	r2, [pc, #48]	; (8014838 <AiPosi+0xbc>)
 8014806:	f9b2 2000 	ldrsh.w	r2, [r2]
 801480a:	2a00      	cmp	r2, #0
 801480c:	bf14      	ite	ne
 801480e:	2201      	movne	r2, #1
 8014810:	2200      	moveq	r2, #0
 8014812:	b2d2      	uxtb	r2, r2
 8014814:	4402      	add	r2, r0
 8014816:	0052      	lsls	r2, r2, #1
 8014818:	440a      	add	r2, r1
 801481a:	f9b2 2000 	ldrsh.w	r2, [r2]
 801481e:	4413      	add	r3, r2
 8014820:	4619      	mov	r1, r3
 8014822:	2008      	movs	r0, #8
 8014824:	f7f7 fda6 	bl	800c374 <BIOS_Ctrl>
}
 8014828:	bf00      	nop
 801482a:	3708      	adds	r7, #8
 801482c:	46bd      	mov	sp, r7
 801482e:	bd80      	pop	{r7, pc}
 8014830:	20000554 	.word	0x20000554
 8014834:	200076b2 	.word	0x200076b2
 8014838:	2000368e 	.word	0x2000368e
 801483c:	20003676 	.word	0x20003676
 8014840:	2000053c 	.word	0x2000053c
 8014844:	20000558 	.word	0x20000558

08014848 <WaveProcess>:
/*******************************************************************************
 WaveProcess: ���㴦���������������
*******************************************************************************/

void WaveProcess(void)
{
 8014848:	b580      	push	{r7, lr}
 801484a:	b094      	sub	sp, #80	; 0x50
 801484c:	af00      	add	r7, sp, #0
  //------------------ ����Ԥ����,���ɽ���ָ��������ݵ���Ч�� -----------------//

  short* Ain  = (short*)&Sampl[2];
 801484e:	4bb0      	ldr	r3, [pc, #704]	; (8014b10 <WaveProcess+0x2c8>)
 8014850:	617b      	str	r3, [r7, #20]

  int  Ak = (KgA[KindA+(StateA?1:0)]*4)/GK[GainA];
 8014852:	4bb0      	ldr	r3, [pc, #704]	; (8014b14 <WaveProcess+0x2cc>)
 8014854:	681a      	ldr	r2, [r3, #0]
 8014856:	4bb0      	ldr	r3, [pc, #704]	; (8014b18 <WaveProcess+0x2d0>)
 8014858:	f9b3 3000 	ldrsh.w	r3, [r3]
 801485c:	4619      	mov	r1, r3
 801485e:	4baf      	ldr	r3, [pc, #700]	; (8014b1c <WaveProcess+0x2d4>)
 8014860:	f9b3 3000 	ldrsh.w	r3, [r3]
 8014864:	2b00      	cmp	r3, #0
 8014866:	bf14      	ite	ne
 8014868:	2301      	movne	r3, #1
 801486a:	2300      	moveq	r3, #0
 801486c:	b2db      	uxtb	r3, r3
 801486e:	440b      	add	r3, r1
 8014870:	005b      	lsls	r3, r3, #1
 8014872:	4413      	add	r3, r2
 8014874:	f9b3 3000 	ldrsh.w	r3, [r3]
 8014878:	009b      	lsls	r3, r3, #2
 801487a:	4aa9      	ldr	r2, [pc, #676]	; (8014b20 <WaveProcess+0x2d8>)
 801487c:	f9b2 2000 	ldrsh.w	r2, [r2]
 8014880:	4611      	mov	r1, r2
 8014882:	4aa8      	ldr	r2, [pc, #672]	; (8014b24 <WaveProcess+0x2dc>)
 8014884:	5c52      	ldrb	r2, [r2, r1]
 8014886:	fb93 f3f2 	sdiv	r3, r3, r2
 801488a:	613b      	str	r3, [r7, #16]
  short  i, n, k, p = 0;
 801488c:	2300      	movs	r3, #0
 801488e:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48

  short  VtlA, ViA, VthA, VeA, VpA, VoA;            // VtA,

  short  DtA   = 0, TslA  =  0, TshA = 0, StA  = 2;
 8014892:	2300      	movs	r3, #0
 8014894:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8014896:	2300      	movs	r3, #0
 8014898:	877b      	strh	r3, [r7, #58]	; 0x3a
 801489a:	2300      	movs	r3, #0
 801489c:	873b      	strh	r3, [r7, #56]	; 0x38
 801489e:	2302      	movs	r3, #2
 80148a0:	86fb      	strh	r3, [r7, #54]	; 0x36
  short  FallA = 0, RiseA =  0, UpA  = 0, DnA  = 0;
 80148a2:	2300      	movs	r3, #0
 80148a4:	86bb      	strh	r3, [r7, #52]	; 0x34
 80148a6:	2300      	movs	r3, #0
 80148a8:	867b      	strh	r3, [r7, #50]	; 0x32
 80148aa:	2300      	movs	r3, #0
 80148ac:	863b      	strh	r3, [r7, #48]	; 0x30
 80148ae:	2300      	movs	r3, #0
 80148b0:	85fb      	strh	r3, [r7, #46]	; 0x2e
  int  MaxA  = 0, MinA  = ~0, SumA = 0, SsqA = 0; // ���/��Сֵ,�ۼ�/ƽ���� = 0
 80148b2:	2300      	movs	r3, #0
 80148b4:	62bb      	str	r3, [r7, #40]	; 0x28
 80148b6:	f04f 33ff 	mov.w	r3, #4294967295
 80148ba:	627b      	str	r3, [r7, #36]	; 0x24
 80148bc:	2300      	movs	r3, #0
 80148be:	623b      	str	r3, [r7, #32]
 80148c0:	2300      	movs	r3, #0
 80148c2:	61fb      	str	r3, [r7, #28]

  short  Dpth  = DEPTH[List[SMPL_DPTH].Val] - 1;
 80148c4:	4b98      	ldr	r3, [pc, #608]	; (8014b28 <WaveProcess+0x2e0>)
 80148c6:	f9b3 304c 	ldrsh.w	r3, [r3, #76]	; 0x4c
 80148ca:	461a      	mov	r2, r3
 80148cc:	4b97      	ldr	r3, [pc, #604]	; (8014b2c <WaveProcess+0x2e4>)
 80148ce:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 80148d2:	b29b      	uxth	r3, r3
 80148d4:	3b01      	subs	r3, #1
 80148d6:	b29b      	uxth	r3, r3
 80148d8:	837b      	strh	r3, [r7, #26]
  short  Tp    = PRE_SMPL+1, Tm = List[TR_MODE].Val & 1;
 80148da:	2397      	movs	r3, #151	; 0x97
 80148dc:	81fb      	strh	r3, [r7, #14]
 80148de:	4b92      	ldr	r3, [pc, #584]	; (8014b28 <WaveProcess+0x2e0>)
 80148e0:	f9b3 3074 	ldrsh.w	r3, [r3, #116]	; 0x74
 80148e4:	f003 0301 	and.w	r3, r3, #1
 80148e8:	81bb      	strh	r3, [r7, #12]
  short  Ks    = KS[List[TIM_BASE].Val],  Sm = List[SYNCMODE].Val;
 80148ea:	4b8f      	ldr	r3, [pc, #572]	; (8014b28 <WaveProcess+0x2e0>)
 80148ec:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 80148f0:	461a      	mov	r2, r3
 80148f2:	4b8f      	ldr	r3, [pc, #572]	; (8014b30 <WaveProcess+0x2e8>)
 80148f4:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 80148f8:	817b      	strh	r3, [r7, #10]
 80148fa:	4b8b      	ldr	r3, [pc, #556]	; (8014b28 <WaveProcess+0x2e0>)
 80148fc:	f8b3 306c 	ldrh.w	r3, [r3, #108]	; 0x6c
 8014900:	813b      	strh	r3, [r7, #8]
  char   Ext = List[EXT_REFN].Val;
 8014902:	4b89      	ldr	r3, [pc, #548]	; (8014b28 <WaveProcess+0x2e0>)
 8014904:	f9b3 30d4 	ldrsh.w	r3, [r3, #212]	; 0xd4
 8014908:	71fb      	strb	r3, [r7, #7]

//---------------------- ��������Ԥ����,����ʵ�ʴ�����ֵ ---------------------//
  if(Status == STOP)
 801490a:	4b8a      	ldr	r3, [pc, #552]	; (8014b34 <WaveProcess+0x2ec>)
 801490c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8014910:	2b01      	cmp	r3, #1
 8014912:	d13c      	bne.n	801498e <WaveProcess+0x146>
  {
    VtlA  = (((Tri_Posi + Ch1_Posi - List[SENSITIVE].Val-100)<<12)/Ak)+2048;
 8014914:	4b88      	ldr	r3, [pc, #544]	; (8014b38 <WaveProcess+0x2f0>)
 8014916:	f9b3 3000 	ldrsh.w	r3, [r3]
 801491a:	461a      	mov	r2, r3
 801491c:	4b87      	ldr	r3, [pc, #540]	; (8014b3c <WaveProcess+0x2f4>)
 801491e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8014922:	4413      	add	r3, r2
 8014924:	4a80      	ldr	r2, [pc, #512]	; (8014b28 <WaveProcess+0x2e0>)
 8014926:	f9b2 208c 	ldrsh.w	r2, [r2, #140]	; 0x8c
 801492a:	1a9b      	subs	r3, r3, r2
 801492c:	3b64      	subs	r3, #100	; 0x64
 801492e:	031a      	lsls	r2, r3, #12
 8014930:	693b      	ldr	r3, [r7, #16]
 8014932:	fb92 f3f3 	sdiv	r3, r2, r3
 8014936:	b29b      	uxth	r3, r3
 8014938:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801493c:	b29b      	uxth	r3, r3
 801493e:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
    VthA  = (((Tri_Posi + Ch1_Posi + List[SENSITIVE].Val-100)<<12)/Ak)+2048;
 8014942:	4b7d      	ldr	r3, [pc, #500]	; (8014b38 <WaveProcess+0x2f0>)
 8014944:	f9b3 3000 	ldrsh.w	r3, [r3]
 8014948:	461a      	mov	r2, r3
 801494a:	4b7c      	ldr	r3, [pc, #496]	; (8014b3c <WaveProcess+0x2f4>)
 801494c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8014950:	4413      	add	r3, r2
 8014952:	4a75      	ldr	r2, [pc, #468]	; (8014b28 <WaveProcess+0x2e0>)
 8014954:	f9b2 208c 	ldrsh.w	r2, [r2, #140]	; 0x8c
 8014958:	4413      	add	r3, r2
 801495a:	3b64      	subs	r3, #100	; 0x64
 801495c:	031a      	lsls	r2, r3, #12
 801495e:	693b      	ldr	r3, [r7, #16]
 8014960:	fb92 f3f3 	sdiv	r3, r2, r3
 8014964:	b29b      	uxth	r3, r3
 8014966:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801496a:	b29b      	uxth	r3, r3
 801496c:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
    VpA   = ((((List[V0_POSI].Val)       -100)<<12)/Ak)+2048; //??
 8014970:	4b6d      	ldr	r3, [pc, #436]	; (8014b28 <WaveProcess+0x2e0>)
 8014972:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 8014976:	3b64      	subs	r3, #100	; 0x64
 8014978:	031a      	lsls	r2, r3, #12
 801497a:	693b      	ldr	r3, [r7, #16]
 801497c:	fb92 f3f3 	sdiv	r3, r2, r3
 8014980:	b29b      	uxth	r3, r3
 8014982:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8014986:	b29b      	uxth	r3, r3
 8014988:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 801498c:	e03b      	b.n	8014a06 <WaveProcess+0x1be>
  }
  else
  {
    VtlA  = (((List[THRESHOLD].Val + List[V0_POSI].Val - List[SENSITIVE].Val-100)<<12)/Ak)+2048;
 801498e:	4b66      	ldr	r3, [pc, #408]	; (8014b28 <WaveProcess+0x2e0>)
 8014990:	f9b3 3084 	ldrsh.w	r3, [r3, #132]	; 0x84
 8014994:	461a      	mov	r2, r3
 8014996:	4b64      	ldr	r3, [pc, #400]	; (8014b28 <WaveProcess+0x2e0>)
 8014998:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 801499c:	4413      	add	r3, r2
 801499e:	4a62      	ldr	r2, [pc, #392]	; (8014b28 <WaveProcess+0x2e0>)
 80149a0:	f9b2 208c 	ldrsh.w	r2, [r2, #140]	; 0x8c
 80149a4:	1a9b      	subs	r3, r3, r2
 80149a6:	3b64      	subs	r3, #100	; 0x64
 80149a8:	031a      	lsls	r2, r3, #12
 80149aa:	693b      	ldr	r3, [r7, #16]
 80149ac:	fb92 f3f3 	sdiv	r3, r2, r3
 80149b0:	b29b      	uxth	r3, r3
 80149b2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80149b6:	b29b      	uxth	r3, r3
 80149b8:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
    VthA  = (((List[THRESHOLD].Val + List[V0_POSI].Val + List[SENSITIVE].Val-100)<<12)/Ak)+2048;
 80149bc:	4b5a      	ldr	r3, [pc, #360]	; (8014b28 <WaveProcess+0x2e0>)
 80149be:	f9b3 3084 	ldrsh.w	r3, [r3, #132]	; 0x84
 80149c2:	461a      	mov	r2, r3
 80149c4:	4b58      	ldr	r3, [pc, #352]	; (8014b28 <WaveProcess+0x2e0>)
 80149c6:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 80149ca:	4413      	add	r3, r2
 80149cc:	4a56      	ldr	r2, [pc, #344]	; (8014b28 <WaveProcess+0x2e0>)
 80149ce:	f9b2 208c 	ldrsh.w	r2, [r2, #140]	; 0x8c
 80149d2:	4413      	add	r3, r2
 80149d4:	3b64      	subs	r3, #100	; 0x64
 80149d6:	031a      	lsls	r2, r3, #12
 80149d8:	693b      	ldr	r3, [r7, #16]
 80149da:	fb92 f3f3 	sdiv	r3, r2, r3
 80149de:	b29b      	uxth	r3, r3
 80149e0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80149e4:	b29b      	uxth	r3, r3
 80149e6:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
    VpA   = ((((List[V0_POSI].Val)       -100)<<12)/Ak)+2048;
 80149ea:	4b4f      	ldr	r3, [pc, #316]	; (8014b28 <WaveProcess+0x2e0>)
 80149ec:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 80149f0:	3b64      	subs	r3, #100	; 0x64
 80149f2:	031a      	lsls	r2, r3, #12
 80149f4:	693b      	ldr	r3, [r7, #16]
 80149f6:	fb92 f3f3 	sdiv	r3, r2, r3
 80149fa:	b29b      	uxth	r3, r3
 80149fc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8014a00:	b29b      	uxth	r3, r3
 8014a02:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  }
//-------------------------- ��������ͳ������� ------------------------------//


  if(((List[SYNCMODE].Val == NONE)||(List[SYNCMODE].Val == SCAN))
 8014a06:	4b48      	ldr	r3, [pc, #288]	; (8014b28 <WaveProcess+0x2e0>)
 8014a08:	f9b3 306c 	ldrsh.w	r3, [r3, #108]	; 0x6c
 8014a0c:	2b05      	cmp	r3, #5
 8014a0e:	d004      	beq.n	8014a1a <WaveProcess+0x1d2>
 8014a10:	4b45      	ldr	r3, [pc, #276]	; (8014b28 <WaveProcess+0x2e0>)
 8014a12:	f9b3 306c 	ldrsh.w	r3, [r3, #108]	; 0x6c
 8014a16:	2b01      	cmp	r3, #1
 8014a18:	d10b      	bne.n	8014a32 <WaveProcess+0x1ea>
     &&(List[TIM_BASE].Val>11))
 8014a1a:	4b43      	ldr	r3, [pc, #268]	; (8014b28 <WaveProcess+0x2e0>)
 8014a1c:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8014a20:	2b0b      	cmp	r3, #11
 8014a22:	dd06      	ble.n	8014a32 <WaveProcess+0x1ea>
  {
    Dpth = 302;
 8014a24:	f44f 7397 	mov.w	r3, #302	; 0x12e
 8014a28:	837b      	strh	r3, [r7, #26]
    List[VIEWPOSI].Val = 0;
 8014a2a:	4b3f      	ldr	r3, [pc, #252]	; (8014b28 <WaveProcess+0x2e0>)
 8014a2c:	2200      	movs	r2, #0
 8014a2e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  for(i=0; i<Dpth; i++)
 8014a32:	2300      	movs	r3, #0
 8014a34:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8014a38:	e0ad      	b.n	8014b96 <WaveProcess+0x34e>
  {
	n = __HAL_DMA_GET_COUNTER(&hdma_adc1);//    DMA1_Channel1->CNDTR;              //DMA_CH_A->CNDTR; //DMA1_CNDTR1
 8014a3a:	4b41      	ldr	r3, [pc, #260]	; (8014b40 <WaveProcess+0x2f8>)
 8014a3c:	681b      	ldr	r3, [r3, #0]
 8014a3e:	685b      	ldr	r3, [r3, #4]
 8014a40:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
    if(i >= (Dpth-n)) break;      // ����һ���ڵȴ�A/Dת�����
 8014a44:	f9b7 204e 	ldrsh.w	r2, [r7, #78]	; 0x4e
 8014a48:	f9b7 101a 	ldrsh.w	r1, [r7, #26]
 8014a4c:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 8014a50:	1acb      	subs	r3, r1, r3
 8014a52:	429a      	cmp	r2, r3
 8014a54:	f280 80a7 	bge.w	8014ba6 <WaveProcess+0x35e>
    ViA = Ain[i];
 8014a58:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 8014a5c:	005b      	lsls	r3, r3, #1
 8014a5e:	697a      	ldr	r2, [r7, #20]
 8014a60:	4413      	add	r3, r2
 8014a62:	881b      	ldrh	r3, [r3, #0]
 8014a64:	80bb      	strh	r3, [r7, #4]

    if(MaxA < ViA) MaxA = ViA;    // ͳ�����ֵ
 8014a66:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8014a6a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8014a6c:	429a      	cmp	r2, r3
 8014a6e:	da02      	bge.n	8014a76 <WaveProcess+0x22e>
 8014a70:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8014a74:	62bb      	str	r3, [r7, #40]	; 0x28
    if(MinA > ViA) MinA = ViA;    // ͳ����Сֵ
 8014a76:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8014a7a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8014a7c:	429a      	cmp	r2, r3
 8014a7e:	dd02      	ble.n	8014a86 <WaveProcess+0x23e>
 8014a80:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8014a84:	627b      	str	r3, [r7, #36]	; 0x24
    SumA += ViA;                  // ͳ���ۼӺ�
 8014a86:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8014a8a:	6a3a      	ldr	r2, [r7, #32]
 8014a8c:	4413      	add	r3, r2
 8014a8e:	623b      	str	r3, [r7, #32]
    SsqA +=(ViA-VpA)*(ViA-VpA);   // ͳ��ƽ����
 8014a90:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8014a94:	f9b7 3040 	ldrsh.w	r3, [r7, #64]	; 0x40
 8014a98:	1ad3      	subs	r3, r2, r3
 8014a9a:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8014a9e:	f9b7 2040 	ldrsh.w	r2, [r7, #64]	; 0x40
 8014aa2:	1a8a      	subs	r2, r1, r2
 8014aa4:	fb02 f303 	mul.w	r3, r2, r3
 8014aa8:	69fa      	ldr	r2, [r7, #28]
 8014aaa:	4413      	add	r3, r2
 8014aac:	61fb      	str	r3, [r7, #28]


    if(StA == 2) DtA = 0;                  // ����CH_A�׸�������ǰ��ʱ���ۼ�
 8014aae:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 8014ab2:	2b02      	cmp	r3, #2
 8014ab4:	d102      	bne.n	8014abc <WaveProcess+0x274>
 8014ab6:	2300      	movs	r3, #0
 8014ab8:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8014aba:	e005      	b.n	8014ac8 <WaveProcess+0x280>
    else         DtA++;
 8014abc:	f9b7 303c 	ldrsh.w	r3, [r7, #60]	; 0x3c
 8014ac0:	b29b      	uxth	r3, r3
 8014ac2:	3301      	adds	r3, #1
 8014ac4:	b29b      	uxth	r3, r3
 8014ac6:	87bb      	strh	r3, [r7, #60]	; 0x3c

    if(ViA > VthA){                        // ViA ������ֵ����
 8014ac8:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8014acc:	f9b7 3044 	ldrsh.w	r3, [r7, #68]	; 0x44
 8014ad0:	429a      	cmp	r2, r3
 8014ad2:	dd37      	ble.n	8014b44 <WaveProcess+0x2fc>
      if(StA == 0){
 8014ad4:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 8014ad8:	2b00      	cmp	r3, #0
 8014ada:	d115      	bne.n	8014b08 <WaveProcess+0x2c0>
        TslA += DtA; DtA = 0; RiseA++;     // CH_A��λʱ���ۼƣ��������ۼ�
 8014adc:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8014ade:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8014ae0:	4413      	add	r3, r2
 8014ae2:	b29b      	uxth	r3, r3
 8014ae4:	877b      	strh	r3, [r7, #58]	; 0x3a
 8014ae6:	2300      	movs	r3, #0
 8014ae8:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8014aea:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 8014aee:	b29b      	uxth	r3, r3
 8014af0:	3301      	adds	r3, #1
 8014af2:	b29b      	uxth	r3, r3
 8014af4:	867b      	strh	r3, [r7, #50]	; 0x32
        if(UpA < Tp) UpA = i;              // ��¼Ԥ������CH_A��һ��������λ��
 8014af6:	f9b7 2030 	ldrsh.w	r2, [r7, #48]	; 0x30
 8014afa:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8014afe:	429a      	cmp	r2, r3
 8014b00:	da02      	bge.n	8014b08 <WaveProcess+0x2c0>
 8014b02:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8014b06:	863b      	strh	r3, [r7, #48]	; 0x30
      }
      StA = 1;                             // ��ǰCH_A״̬��Ϊ��λ
 8014b08:	2301      	movs	r3, #1
 8014b0a:	86fb      	strh	r3, [r7, #54]	; 0x36
 8014b0c:	e03c      	b.n	8014b88 <WaveProcess+0x340>
 8014b0e:	bf00      	nop
 8014b10:	200036a0 	.word	0x200036a0
 8014b14:	20000558 	.word	0x20000558
 8014b18:	200076b2 	.word	0x200076b2
 8014b1c:	2000368e 	.word	0x2000368e
 8014b20:	20003676 	.word	0x20003676
 8014b24:	2000053c 	.word	0x2000053c
 8014b28:	20000274 	.word	0x20000274
 8014b2c:	0800230c 	.word	0x0800230c
 8014b30:	08002314 	.word	0x08002314
 8014b34:	2000079c 	.word	0x2000079c
 8014b38:	2000368c 	.word	0x2000368c
 8014b3c:	200076b0 	.word	0x200076b0
 8014b40:	2000793c 	.word	0x2000793c
    } else if(ViA < VtlA){                 // ViA ������ֵ����
 8014b44:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8014b48:	f9b7 3046 	ldrsh.w	r3, [r7, #70]	; 0x46
 8014b4c:	429a      	cmp	r2, r3
 8014b4e:	da1b      	bge.n	8014b88 <WaveProcess+0x340>
      if(StA == 1){
 8014b50:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 8014b54:	2b01      	cmp	r3, #1
 8014b56:	d115      	bne.n	8014b84 <WaveProcess+0x33c>
        TshA += DtA; DtA = 0; FallA++;     // CH_A��λʱ���ۼƣ��½����ۼ�
 8014b58:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 8014b5a:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8014b5c:	4413      	add	r3, r2
 8014b5e:	b29b      	uxth	r3, r3
 8014b60:	873b      	strh	r3, [r7, #56]	; 0x38
 8014b62:	2300      	movs	r3, #0
 8014b64:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8014b66:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	; 0x34
 8014b6a:	b29b      	uxth	r3, r3
 8014b6c:	3301      	adds	r3, #1
 8014b6e:	b29b      	uxth	r3, r3
 8014b70:	86bb      	strh	r3, [r7, #52]	; 0x34
        if(DnA < Tp) DnA = i;              // ��¼Ԥ������CH_A��һ���½���λ��
 8014b72:	f9b7 202e 	ldrsh.w	r2, [r7, #46]	; 0x2e
 8014b76:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8014b7a:	429a      	cmp	r2, r3
 8014b7c:	da02      	bge.n	8014b84 <WaveProcess+0x33c>
 8014b7e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8014b82:	85fb      	strh	r3, [r7, #46]	; 0x2e
      }
      StA = 0;                             // ��ǰCH_A״̬��Ϊ��λ
 8014b84:	2300      	movs	r3, #0
 8014b86:	86fb      	strh	r3, [r7, #54]	; 0x36
  for(i=0; i<Dpth; i++)
 8014b88:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 8014b8c:	b29b      	uxth	r3, r3
 8014b8e:	3301      	adds	r3, #1
 8014b90:	b29b      	uxth	r3, r3
 8014b92:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8014b96:	f9b7 204e 	ldrsh.w	r2, [r7, #78]	; 0x4e
 8014b9a:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8014b9e:	429a      	cmp	r2, r3
 8014ba0:	f6ff af4b 	blt.w	8014a3a <WaveProcess+0x1f2>
 8014ba4:	e000      	b.n	8014ba8 <WaveProcess+0x360>
    if(i >= (Dpth-n)) break;      // ����һ���ڵȴ�A/Dת�����
 8014ba6:	bf00      	nop
    }
  }
  if(n == 0)
 8014ba8:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 8014bac:	2b00      	cmp	r3, #0
 8014bae:	d14f      	bne.n	8014c50 <WaveProcess+0x408>
  {                              // ����ȫ����ɺ��������ֵ i == Dpth
    Vmax = MaxA; Vmin = MinA; Vavg = SumA/i; Vssq = SsqA/(i+1);
 8014bb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014bb2:	b21a      	sxth	r2, r3
 8014bb4:	4b9a      	ldr	r3, [pc, #616]	; (8014e20 <WaveProcess+0x5d8>)
 8014bb6:	801a      	strh	r2, [r3, #0]
 8014bb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014bba:	b21a      	sxth	r2, r3
 8014bbc:	4b99      	ldr	r3, [pc, #612]	; (8014e24 <WaveProcess+0x5dc>)
 8014bbe:	801a      	strh	r2, [r3, #0]
 8014bc0:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 8014bc4:	6a3a      	ldr	r2, [r7, #32]
 8014bc6:	fb92 f3f3 	sdiv	r3, r2, r3
 8014bca:	b21a      	sxth	r2, r3
 8014bcc:	4b96      	ldr	r3, [pc, #600]	; (8014e28 <WaveProcess+0x5e0>)
 8014bce:	801a      	strh	r2, [r3, #0]
 8014bd0:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 8014bd4:	3301      	adds	r3, #1
 8014bd6:	69fa      	ldr	r2, [r7, #28]
 8014bd8:	fb92 f3f3 	sdiv	r3, r2, r3
 8014bdc:	4a93      	ldr	r2, [pc, #588]	; (8014e2c <WaveProcess+0x5e4>)
 8014bde:	6013      	str	r3, [r2, #0]
    Vrms = (Sqrt32(Vssq)); Vmid = (Vmax + Vmin)/2; Vpp = Vmax - Vmin;
 8014be0:	4b92      	ldr	r3, [pc, #584]	; (8014e2c <WaveProcess+0x5e4>)
 8014be2:	681b      	ldr	r3, [r3, #0]
 8014be4:	4618      	mov	r0, r3
 8014be6:	f7fc fbf5 	bl	80113d4 <Sqrt32>
 8014bea:	4603      	mov	r3, r0
 8014bec:	461a      	mov	r2, r3
 8014bee:	4b90      	ldr	r3, [pc, #576]	; (8014e30 <WaveProcess+0x5e8>)
 8014bf0:	601a      	str	r2, [r3, #0]
 8014bf2:	4b8b      	ldr	r3, [pc, #556]	; (8014e20 <WaveProcess+0x5d8>)
 8014bf4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8014bf8:	461a      	mov	r2, r3
 8014bfa:	4b8a      	ldr	r3, [pc, #552]	; (8014e24 <WaveProcess+0x5dc>)
 8014bfc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8014c00:	4413      	add	r3, r2
 8014c02:	0fda      	lsrs	r2, r3, #31
 8014c04:	4413      	add	r3, r2
 8014c06:	105b      	asrs	r3, r3, #1
 8014c08:	b21a      	sxth	r2, r3
 8014c0a:	4b8a      	ldr	r3, [pc, #552]	; (8014e34 <WaveProcess+0x5ec>)
 8014c0c:	801a      	strh	r2, [r3, #0]
 8014c0e:	4b84      	ldr	r3, [pc, #528]	; (8014e20 <WaveProcess+0x5d8>)
 8014c10:	f9b3 3000 	ldrsh.w	r3, [r3]
 8014c14:	461a      	mov	r2, r3
 8014c16:	4b83      	ldr	r3, [pc, #524]	; (8014e24 <WaveProcess+0x5dc>)
 8014c18:	f9b3 3000 	ldrsh.w	r3, [r3]
 8014c1c:	1ad3      	subs	r3, r2, r3
 8014c1e:	4a86      	ldr	r2, [pc, #536]	; (8014e38 <WaveProcess+0x5f0>)
 8014c20:	6013      	str	r3, [r2, #0]
    HighT = TshA/FallA; LowT = TslA/RiseA; Edge = FallA+ RiseA;
 8014c22:	f9b7 2038 	ldrsh.w	r2, [r7, #56]	; 0x38
 8014c26:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	; 0x34
 8014c2a:	fb92 f3f3 	sdiv	r3, r2, r3
 8014c2e:	4a83      	ldr	r2, [pc, #524]	; (8014e3c <WaveProcess+0x5f4>)
 8014c30:	6013      	str	r3, [r2, #0]
 8014c32:	f9b7 203a 	ldrsh.w	r2, [r7, #58]	; 0x3a
 8014c36:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 8014c3a:	fb92 f3f3 	sdiv	r3, r2, r3
 8014c3e:	4a80      	ldr	r2, [pc, #512]	; (8014e40 <WaveProcess+0x5f8>)
 8014c40:	6013      	str	r3, [r2, #0]
 8014c42:	f9b7 2034 	ldrsh.w	r2, [r7, #52]	; 0x34
 8014c46:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 8014c4a:	4413      	add	r3, r2
 8014c4c:	4a7d      	ldr	r2, [pc, #500]	; (8014e44 <WaveProcess+0x5fc>)
 8014c4e:	6013      	str	r3, [r2, #0]

  }
//--------------------------- ���ɲ�����ʾ���� -------------------------------//

  if(((Sm == NONE)||(Sm == SCAN))){
 8014c50:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8014c54:	2b05      	cmp	r3, #5
 8014c56:	d003      	beq.n	8014c60 <WaveProcess+0x418>
 8014c58:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8014c5c:	2b01      	cmp	r3, #1
 8014c5e:	d12f      	bne.n	8014cc0 <WaveProcess+0x478>
    if(List[TIM_BASE].Val > 11)
 8014c60:	4b79      	ldr	r3, [pc, #484]	; (8014e48 <WaveProcess+0x600>)
 8014c62:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8014c66:	2b0b      	cmp	r3, #11
 8014c68:	dd03      	ble.n	8014c72 <WaveProcess+0x42a>
      k = 1;                         // NONE SCAN ģʽ��ǿ�ƴ���
 8014c6a:	2301      	movs	r3, #1
 8014c6c:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
    if(List[TIM_BASE].Val > 11)
 8014c70:	e033      	b.n	8014cda <WaveProcess+0x492>
    else
    {
      k =((Tm == RISE)? UpA : DnA)-Tp; // k:Ԥ�����󴥷���λ��
 8014c72:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8014c76:	2b00      	cmp	r3, #0
 8014c78:	d101      	bne.n	8014c7e <WaveProcess+0x436>
 8014c7a:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8014c7c:	e000      	b.n	8014c80 <WaveProcess+0x438>
 8014c7e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8014c80:	89fa      	ldrh	r2, [r7, #14]
 8014c82:	1a9b      	subs	r3, r3, r2
 8014c84:	b29b      	uxth	r3, r3
 8014c86:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

      if((Sm == SCAN)&&(k < 0)){ // AUTO ģʽ���޴���ʱ
 8014c8a:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8014c8e:	2b01      	cmp	r3, #1
 8014c90:	d123      	bne.n	8014cda <WaveProcess+0x492>
 8014c92:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 8014c96:	2b00      	cmp	r3, #0
 8014c98:	da1f      	bge.n	8014cda <WaveProcess+0x492>
        if(i > Dpth/4) k = 1;    // ������1/4����ǿ�ƴ���
 8014c9a:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8014c9e:	2b00      	cmp	r3, #0
 8014ca0:	da00      	bge.n	8014ca4 <WaveProcess+0x45c>
 8014ca2:	3303      	adds	r3, #3
 8014ca4:	109b      	asrs	r3, r3, #2
 8014ca6:	b21b      	sxth	r3, r3
 8014ca8:	f9b7 204e 	ldrsh.w	r2, [r7, #78]	; 0x4e
 8014cac:	429a      	cmp	r2, r3
 8014cae:	dd03      	ble.n	8014cb8 <WaveProcess+0x470>
 8014cb0:	2301      	movs	r3, #1
 8014cb2:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
    if(List[TIM_BASE].Val > 11)
 8014cb6:	e010      	b.n	8014cda <WaveProcess+0x492>
        else           k = 0;    // ������1/4��ǰ����ʾ
 8014cb8:	2300      	movs	r3, #0
 8014cba:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
    if(List[TIM_BASE].Val > 11)
 8014cbe:	e00c      	b.n	8014cda <WaveProcess+0x492>
      }

    }
  } else
    k =((Tm == RISE)? UpA : DnA)-Tp; // k:Ԥ�����󴥷���λ��
 8014cc0:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8014cc4:	2b00      	cmp	r3, #0
 8014cc6:	d101      	bne.n	8014ccc <WaveProcess+0x484>
 8014cc8:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8014cca:	e000      	b.n	8014cce <WaveProcess+0x486>
 8014ccc:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8014cce:	89fa      	ldrh	r2, [r7, #14]
 8014cd0:	1a9b      	subs	r3, r3, r2
 8014cd2:	b29b      	uxth	r3, r3
 8014cd4:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8014cd8:	e000      	b.n	8014cdc <WaveProcess+0x494>
    if(List[TIM_BASE].Val > 11)
 8014cda:	bf00      	nop

  if((!n)&&(Sm == SINGL)&&(k > 0)){ // SNGL ģʽ���д���ʱ�����������Զ�ֹͣ
 8014cdc:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 8014ce0:	2b00      	cmp	r3, #0
 8014ce2:	d10c      	bne.n	8014cfe <WaveProcess+0x4b6>
 8014ce4:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8014ce8:	2b04      	cmp	r3, #4
 8014cea:	d108      	bne.n	8014cfe <WaveProcess+0x4b6>
 8014cec:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 8014cf0:	2b00      	cmp	r3, #0
 8014cf2:	dd04      	ble.n	8014cfe <WaveProcess+0x4b6>
    Status = STOP;
 8014cf4:	4b55      	ldr	r3, [pc, #340]	; (8014e4c <WaveProcess+0x604>)
 8014cf6:	2201      	movs	r2, #1
 8014cf8:	801a      	strh	r2, [r3, #0]
    DispStatus();
 8014cfa:	f7fe ff21 	bl	8013b40 <DispStatus>
  }

  if((Sm == AUTO)&&(k < 0)){ // AUTO ģʽ���޴���ʱ
 8014cfe:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8014d02:	2b02      	cmp	r3, #2
 8014d04:	d115      	bne.n	8014d32 <WaveProcess+0x4ea>
 8014d06:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 8014d0a:	2b00      	cmp	r3, #0
 8014d0c:	da11      	bge.n	8014d32 <WaveProcess+0x4ea>
    if(i > Dpth/4) k = 1;    // ������1/4����ǿ�ƴ���
 8014d0e:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8014d12:	2b00      	cmp	r3, #0
 8014d14:	da00      	bge.n	8014d18 <WaveProcess+0x4d0>
 8014d16:	3303      	adds	r3, #3
 8014d18:	109b      	asrs	r3, r3, #2
 8014d1a:	b21b      	sxth	r3, r3
 8014d1c:	f9b7 204e 	ldrsh.w	r2, [r7, #78]	; 0x4e
 8014d20:	429a      	cmp	r2, r3
 8014d22:	dd03      	ble.n	8014d2c <WaveProcess+0x4e4>
 8014d24:	2301      	movs	r3, #1
 8014d26:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8014d2a:	e002      	b.n	8014d32 <WaveProcess+0x4ea>
    else           k = 0;    // ������1/4��ǰ����ʾ
 8014d2c:	2300      	movs	r3, #0
 8014d2e:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
  }

  Trigger_k = k;
 8014d32:	4a47      	ldr	r2, [pc, #284]	; (8014e50 <WaveProcess+0x608>)
 8014d34:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8014d38:	8013      	strh	r3, [r2, #0]

  if(Trigger_k>0)NORM_Kflag = 1;
 8014d3a:	4b45      	ldr	r3, [pc, #276]	; (8014e50 <WaveProcess+0x608>)
 8014d3c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8014d40:	2b00      	cmp	r3, #0
 8014d42:	dd02      	ble.n	8014d4a <WaveProcess+0x502>
 8014d44:	4b43      	ldr	r3, [pc, #268]	; (8014e54 <WaveProcess+0x60c>)
 8014d46:	2201      	movs	r2, #1
 8014d48:	701a      	strb	r2, [r3, #0]

  if((SNGL_Kflag)&&(Status == STOP))
 8014d4a:	4b43      	ldr	r3, [pc, #268]	; (8014e58 <WaveProcess+0x610>)
 8014d4c:	781b      	ldrb	r3, [r3, #0]
 8014d4e:	2b00      	cmp	r3, #0
 8014d50:	d016      	beq.n	8014d80 <WaveProcess+0x538>
 8014d52:	4b3e      	ldr	r3, [pc, #248]	; (8014e4c <WaveProcess+0x604>)
 8014d54:	f9b3 3000 	ldrsh.w	r3, [r3]
 8014d58:	2b01      	cmp	r3, #1
 8014d5a:	d111      	bne.n	8014d80 <WaveProcess+0x538>
  {
    Ch1_Posi = List[V0_POSI].Val;
 8014d5c:	4b3a      	ldr	r3, [pc, #232]	; (8014e48 <WaveProcess+0x600>)
 8014d5e:	f9b3 201c 	ldrsh.w	r2, [r3, #28]
 8014d62:	4b3e      	ldr	r3, [pc, #248]	; (8014e5c <WaveProcess+0x614>)
 8014d64:	801a      	strh	r2, [r3, #0]
    Ch2_Posi = List[EXT_POSI].Val;
 8014d66:	4b38      	ldr	r3, [pc, #224]	; (8014e48 <WaveProcess+0x600>)
 8014d68:	f9b3 20dc 	ldrsh.w	r2, [r3, #220]	; 0xdc
 8014d6c:	4b3c      	ldr	r3, [pc, #240]	; (8014e60 <WaveProcess+0x618>)
 8014d6e:	801a      	strh	r2, [r3, #0]
    Tri_Posi = List[THRESHOLD].Val;
 8014d70:	4b35      	ldr	r3, [pc, #212]	; (8014e48 <WaveProcess+0x600>)
 8014d72:	f9b3 2084 	ldrsh.w	r2, [r3, #132]	; 0x84
 8014d76:	4b3b      	ldr	r3, [pc, #236]	; (8014e64 <WaveProcess+0x61c>)
 8014d78:	801a      	strh	r2, [r3, #0]
    SNGL_Kflag = 0;
 8014d7a:	4b37      	ldr	r3, [pc, #220]	; (8014e58 <WaveProcess+0x610>)
 8014d7c:	2200      	movs	r2, #0
 8014d7e:	701a      	strb	r2, [r3, #0]
  }

  if(k > 0)
 8014d80:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 8014d84:	2b00      	cmp	r3, #0
 8014d86:	f340 8104 	ble.w	8014f92 <WaveProcess+0x74a>
  {                                               // �д���ʱ����ʾ����
    k += List[VIEWPOSI].Val+((1024-Ks)*Tp+512)/1024; // ���β�ֵ���
 8014d8a:	4b2f      	ldr	r3, [pc, #188]	; (8014e48 <WaveProcess+0x600>)
 8014d8c:	f9b3 3044 	ldrsh.w	r3, [r3, #68]	; 0x44
 8014d90:	b29a      	uxth	r2, r3
 8014d92:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8014d96:	f5c3 6380 	rsb	r3, r3, #1024	; 0x400
 8014d9a:	f9b7 100e 	ldrsh.w	r1, [r7, #14]
 8014d9e:	fb01 f303 	mul.w	r3, r1, r3
 8014da2:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8014da6:	2b00      	cmp	r3, #0
 8014da8:	da01      	bge.n	8014dae <WaveProcess+0x566>
 8014daa:	f203 33ff 	addw	r3, r3, #1023	; 0x3ff
 8014dae:	129b      	asrs	r3, r3, #10
 8014db0:	b29b      	uxth	r3, r3
 8014db2:	4413      	add	r3, r2
 8014db4:	b29a      	uxth	r2, r3
 8014db6:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8014dba:	4413      	add	r3, r2
 8014dbc:	b29b      	uxth	r3, r3
 8014dbe:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
    VeA =(((Ain[k]-2048)*Ak)>>12)+100;
 8014dc2:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 8014dc6:	005b      	lsls	r3, r3, #1
 8014dc8:	697a      	ldr	r2, [r7, #20]
 8014dca:	4413      	add	r3, r2
 8014dcc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8014dd0:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 8014dd4:	693a      	ldr	r2, [r7, #16]
 8014dd6:	fb02 f303 	mul.w	r3, r2, r3
 8014dda:	131b      	asrs	r3, r3, #12
 8014ddc:	b29b      	uxth	r3, r3
 8014dde:	3364      	adds	r3, #100	; 0x64
 8014de0:	b29b      	uxth	r3, r3
 8014de2:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

    for(n=0; n<300;)
 8014de6:	2300      	movs	r3, #0
 8014de8:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 8014dec:	e0c7      	b.n	8014f7e <WaveProcess+0x736>
    {
      ViA =(((Ain[k]-2048)*Ak)>>12)+100;
 8014dee:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 8014df2:	005b      	lsls	r3, r3, #1
 8014df4:	697a      	ldr	r2, [r7, #20]
 8014df6:	4413      	add	r3, r2
 8014df8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8014dfc:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 8014e00:	693a      	ldr	r2, [r7, #16]
 8014e02:	fb02 f303 	mul.w	r3, r2, r3
 8014e06:	131b      	asrs	r3, r3, #12
 8014e08:	b29b      	uxth	r3, r3
 8014e0a:	3364      	adds	r3, #100	; 0x64
 8014e0c:	b29b      	uxth	r3, r3
 8014e0e:	80bb      	strh	r3, [r7, #4]
      k++;
 8014e10:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 8014e14:	b29b      	uxth	r3, r3
 8014e16:	3301      	adds	r3, #1
 8014e18:	b29b      	uxth	r3, r3
 8014e1a:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
      while(p > 0){
 8014e1e:	e09e      	b.n	8014f5e <WaveProcess+0x716>
 8014e20:	20003682 	.word	0x20003682
 8014e24:	20003694 	.word	0x20003694
 8014e28:	20003684 	.word	0x20003684
 8014e2c:	20003688 	.word	0x20003688
 8014e30:	20003690 	.word	0x20003690
 8014e34:	20003696 	.word	0x20003696
 8014e38:	200076ac 	.word	0x200076ac
 8014e3c:	200076a4 	.word	0x200076a4
 8014e40:	200076b8 	.word	0x200076b8
 8014e44:	2000367c 	.word	0x2000367c
 8014e48:	20000274 	.word	0x20000274
 8014e4c:	2000079c 	.word	0x2000079c
 8014e50:	20003680 	.word	0x20003680
 8014e54:	20003698 	.word	0x20003698
 8014e58:	20000538 	.word	0x20000538
 8014e5c:	200076b0 	.word	0x200076b0
 8014e60:	200076a8 	.word	0x200076a8
 8014e64:	2000368c 	.word	0x2000368c
        VoA = VeA +((ViA-VeA)*(1024-p))/1024; // ���� A ͨ����ǰ���ε�Ĳ�ֵ
 8014e68:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8014e6c:	f9b7 3042 	ldrsh.w	r3, [r7, #66]	; 0x42
 8014e70:	1ad3      	subs	r3, r2, r3
 8014e72:	f9b7 2048 	ldrsh.w	r2, [r7, #72]	; 0x48
 8014e76:	f5c2 6280 	rsb	r2, r2, #1024	; 0x400
 8014e7a:	fb02 f303 	mul.w	r3, r2, r3
 8014e7e:	2b00      	cmp	r3, #0
 8014e80:	da01      	bge.n	8014e86 <WaveProcess+0x63e>
 8014e82:	f203 33ff 	addw	r3, r3, #1023	; 0x3ff
 8014e86:	129b      	asrs	r3, r3, #10
 8014e88:	b29a      	uxth	r2, r3
 8014e8a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8014e8e:	4413      	add	r3, r2
 8014e90:	b29b      	uxth	r3, r3
 8014e92:	87fb      	strh	r3, [r7, #62]	; 0x3e
        if(Status == STOP){
 8014e94:	4b63      	ldr	r3, [pc, #396]	; (8015024 <WaveProcess+0x7dc>)
 8014e96:	f9b3 3000 	ldrsh.w	r3, [r3]
 8014e9a:	2b01      	cmp	r3, #1
 8014e9c:	d132      	bne.n	8014f04 <WaveProcess+0x6bc>

          Vo_Temp = VoA+(List[V0_POSI].Val-Ch1_Posi);
 8014e9e:	4b62      	ldr	r3, [pc, #392]	; (8015028 <WaveProcess+0x7e0>)
 8014ea0:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 8014ea4:	b29a      	uxth	r2, r3
 8014ea6:	4b61      	ldr	r3, [pc, #388]	; (801502c <WaveProcess+0x7e4>)
 8014ea8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8014eac:	b29b      	uxth	r3, r3
 8014eae:	1ad3      	subs	r3, r2, r3
 8014eb0:	b29a      	uxth	r2, r3
 8014eb2:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8014eb4:	4413      	add	r3, r2
 8014eb6:	b29b      	uxth	r3, r3
 8014eb8:	b21a      	sxth	r2, r3
 8014eba:	4b5d      	ldr	r3, [pc, #372]	; (8015030 <WaveProcess+0x7e8>)
 8014ebc:	801a      	strh	r2, [r3, #0]

          if(Vo_Temp > 199) Vo_Temp = 202;
 8014ebe:	4b5c      	ldr	r3, [pc, #368]	; (8015030 <WaveProcess+0x7e8>)
 8014ec0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8014ec4:	2bc7      	cmp	r3, #199	; 0xc7
 8014ec6:	dd02      	ble.n	8014ece <WaveProcess+0x686>
 8014ec8:	4b59      	ldr	r3, [pc, #356]	; (8015030 <WaveProcess+0x7e8>)
 8014eca:	22ca      	movs	r2, #202	; 0xca
 8014ecc:	801a      	strh	r2, [r3, #0]
          if(Vo_Temp <   3) Vo_Temp = 1;                     // �����޷�
 8014ece:	4b58      	ldr	r3, [pc, #352]	; (8015030 <WaveProcess+0x7e8>)
 8014ed0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8014ed4:	2b02      	cmp	r3, #2
 8014ed6:	dc02      	bgt.n	8014ede <WaveProcess+0x696>
 8014ed8:	4b55      	ldr	r3, [pc, #340]	; (8015030 <WaveProcess+0x7e8>)
 8014eda:	2201      	movs	r2, #1
 8014edc:	801a      	strh	r2, [r3, #0]

          WaveBuf[n]= Vo_Temp;
 8014ede:	4b54      	ldr	r3, [pc, #336]	; (8015030 <WaveProcess+0x7e8>)
 8014ee0:	f9b3 2000 	ldrsh.w	r2, [r3]
 8014ee4:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 8014ee8:	b2d1      	uxtb	r1, r2
 8014eea:	4a52      	ldr	r2, [pc, #328]	; (8015034 <WaveProcess+0x7ec>)
 8014eec:	54d1      	strb	r1, [r2, r3]

          Build_Ext(n, Ext, List[V0_POSI].Val);
 8014eee:	4b4e      	ldr	r3, [pc, #312]	; (8015028 <WaveProcess+0x7e0>)
 8014ef0:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 8014ef4:	b2da      	uxtb	r2, r3
 8014ef6:	79f9      	ldrb	r1, [r7, #7]
 8014ef8:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 8014efc:	4618      	mov	r0, r3
 8014efe:	f000 f89d 	bl	801503c <Build_Ext>
 8014f02:	e01b      	b.n	8014f3c <WaveProcess+0x6f4>
        }
        else{
          if(VoA > 199) VoA = 202;                   // �����޷�  ��������
 8014f04:	f9b7 303e 	ldrsh.w	r3, [r7, #62]	; 0x3e
 8014f08:	2bc7      	cmp	r3, #199	; 0xc7
 8014f0a:	dd01      	ble.n	8014f10 <WaveProcess+0x6c8>
 8014f0c:	23ca      	movs	r3, #202	; 0xca
 8014f0e:	87fb      	strh	r3, [r7, #62]	; 0x3e
          if(VoA <   3) VoA = 2;                     // �����޷�
 8014f10:	f9b7 303e 	ldrsh.w	r3, [r7, #62]	; 0x3e
 8014f14:	2b02      	cmp	r3, #2
 8014f16:	dc01      	bgt.n	8014f1c <WaveProcess+0x6d4>
 8014f18:	2302      	movs	r3, #2
 8014f1a:	87fb      	strh	r3, [r7, #62]	; 0x3e
          WaveBuf[n]= VoA;
 8014f1c:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 8014f20:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8014f22:	b2d1      	uxtb	r1, r2
 8014f24:	4a43      	ldr	r2, [pc, #268]	; (8015034 <WaveProcess+0x7ec>)
 8014f26:	54d1      	strb	r1, [r2, r3]

          Build_Ext(n, Ext, List[V0_POSI].Val);
 8014f28:	4b3f      	ldr	r3, [pc, #252]	; (8015028 <WaveProcess+0x7e0>)
 8014f2a:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 8014f2e:	b2da      	uxtb	r2, r3
 8014f30:	79f9      	ldrb	r1, [r7, #7]
 8014f32:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 8014f36:	4618      	mov	r0, r3
 8014f38:	f000 f880 	bl	801503c <Build_Ext>
        }

        if(n++ >= 300) break;
 8014f3c:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 8014f40:	b29a      	uxth	r2, r3
 8014f42:	3201      	adds	r2, #1
 8014f44:	b292      	uxth	r2, r2
 8014f46:	f8a7 204c 	strh.w	r2, [r7, #76]	; 0x4c
 8014f4a:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8014f4e:	da0b      	bge.n	8014f68 <WaveProcess+0x720>
        p -= Ks;
 8014f50:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 8014f54:	897b      	ldrh	r3, [r7, #10]
 8014f56:	1ad3      	subs	r3, r2, r3
 8014f58:	b29b      	uxth	r3, r3
 8014f5a:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
      while(p > 0){
 8014f5e:	f9b7 3048 	ldrsh.w	r3, [r7, #72]	; 0x48
 8014f62:	2b00      	cmp	r3, #0
 8014f64:	dc80      	bgt.n	8014e68 <WaveProcess+0x620>
 8014f66:	e000      	b.n	8014f6a <WaveProcess+0x722>
        if(n++ >= 300) break;
 8014f68:	bf00      	nop
      }
      p += 1024;
 8014f6a:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8014f6e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8014f72:	b29b      	uxth	r3, r3
 8014f74:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
      VeA = ViA;                              // �ݴ浱ǰ���ε��ֵ
 8014f78:	88bb      	ldrh	r3, [r7, #4]
 8014f7a:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
    for(n=0; n<300;)
 8014f7e:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 8014f82:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8014f86:	f6ff af32 	blt.w	8014dee <WaveProcess+0x5a6>
    }
    Norm_Clr = 0;                                          //NORM����
 8014f8a:	4b2b      	ldr	r3, [pc, #172]	; (8015038 <WaveProcess+0x7f0>)
 8014f8c:	2200      	movs	r2, #0
 8014f8e:	701a      	strb	r2, [r3, #0]
 8014f90:	e037      	b.n	8015002 <WaveProcess+0x7ba>
  }
  else if((k < 0) && ((Sm != NORM)||(Norm_Clr))){          //NORM��������Ļ
 8014f92:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 8014f96:	2b00      	cmp	r3, #0
 8014f98:	da33      	bge.n	8015002 <WaveProcess+0x7ba>
 8014f9a:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8014f9e:	2b03      	cmp	r3, #3
 8014fa0:	d103      	bne.n	8014faa <WaveProcess+0x762>
 8014fa2:	4b25      	ldr	r3, [pc, #148]	; (8015038 <WaveProcess+0x7f0>)
 8014fa4:	781b      	ldrb	r3, [r3, #0]
 8014fa6:	2b00      	cmp	r3, #0
 8014fa8:	d02b      	beq.n	8015002 <WaveProcess+0x7ba>
    for(n=0; n<300;){
 8014faa:	2300      	movs	r3, #0
 8014fac:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 8014fb0:	e022      	b.n	8014ff8 <WaveProcess+0x7b0>
      while(p > 0){
        WaveBuf[n]= 255;
 8014fb2:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 8014fb6:	4a1f      	ldr	r2, [pc, #124]	; (8015034 <WaveProcess+0x7ec>)
 8014fb8:	21ff      	movs	r1, #255	; 0xff
 8014fba:	54d1      	strb	r1, [r2, r3]

        if(n++ >= 300) break;
 8014fbc:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 8014fc0:	b29a      	uxth	r2, r3
 8014fc2:	3201      	adds	r2, #1
 8014fc4:	b292      	uxth	r2, r2
 8014fc6:	f8a7 204c 	strh.w	r2, [r7, #76]	; 0x4c
 8014fca:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8014fce:	da0b      	bge.n	8014fe8 <WaveProcess+0x7a0>
        p -= Ks;
 8014fd0:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 8014fd4:	897b      	ldrh	r3, [r7, #10]
 8014fd6:	1ad3      	subs	r3, r2, r3
 8014fd8:	b29b      	uxth	r3, r3
 8014fda:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
      while(p > 0){
 8014fde:	f9b7 3048 	ldrsh.w	r3, [r7, #72]	; 0x48
 8014fe2:	2b00      	cmp	r3, #0
 8014fe4:	dce5      	bgt.n	8014fb2 <WaveProcess+0x76a>
 8014fe6:	e000      	b.n	8014fea <WaveProcess+0x7a2>
        if(n++ >= 300) break;
 8014fe8:	bf00      	nop
      }
      p += 1024;
 8014fea:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8014fee:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8014ff2:	b29b      	uxth	r3, r3
 8014ff4:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
    for(n=0; n<300;){
 8014ff8:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 8014ffc:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8015000:	dbed      	blt.n	8014fde <WaveProcess+0x796>
    }
  }
  if((i == Dpth)&&(Status != STOP))
 8015002:	f9b7 204e 	ldrsh.w	r2, [r7, #78]	; 0x4e
 8015006:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 801500a:	429a      	cmp	r2, r3
 801500c:	d106      	bne.n	801501c <WaveProcess+0x7d4>
 801500e:	4b05      	ldr	r3, [pc, #20]	; (8015024 <WaveProcess+0x7dc>)
 8015010:	f9b3 3000 	ldrsh.w	r3, [r3]
 8015014:	2b01      	cmp	r3, #1
 8015016:	d001      	beq.n	801501c <WaveProcess+0x7d4>
  {
	  ADC_Start();       // ���¿�ʼ ADC ɨ�����
 8015018:	f7f7 fbc0 	bl	800c79c <ADC_Start>
  }
}
 801501c:	bf00      	nop
 801501e:	3750      	adds	r7, #80	; 0x50
 8015020:	46bd      	mov	sp, r7
 8015022:	bd80      	pop	{r7, pc}
 8015024:	2000079c 	.word	0x2000079c
 8015028:	20000274 	.word	0x20000274
 801502c:	200076b0 	.word	0x200076b0
 8015030:	20003674 	.word	0x20003674
 8015034:	20001a38 	.word	0x20001a38
 8015038:	200007a3 	.word	0x200007a3

0801503c <Build_Ext>:

/*******************************************************************************
 Build_Ext: ��չͨ��������ʾ
*******************************************************************************/
void  Build_Ext(short x, char Ext, char Yp)
{
 801503c:	b480      	push	{r7}
 801503e:	b085      	sub	sp, #20
 8015040:	af00      	add	r7, sp, #0
 8015042:	4603      	mov	r3, r0
 8015044:	80fb      	strh	r3, [r7, #6]
 8015046:	460b      	mov	r3, r1
 8015048:	717b      	strb	r3, [r7, #5]
 801504a:	4613      	mov	r3, r2
 801504c:	713b      	strb	r3, [r7, #4]
  char* Buf = WaveBuf + TRACK1_SIZE;
 801504e:	4b69      	ldr	r3, [pc, #420]	; (80151f4 <Build_Ext+0x1b8>)
 8015050:	60bb      	str	r3, [r7, #8]
  short  Vo;

  Posi_2F1 = List[EXT_POSI].Val -  Data[1] - List[V0_POSI].Val;
 8015052:	4b69      	ldr	r3, [pc, #420]	; (80151f8 <Build_Ext+0x1bc>)
 8015054:	f9b3 30dc 	ldrsh.w	r3, [r3, #220]	; 0xdc
 8015058:	b29a      	uxth	r2, r3
 801505a:	4b68      	ldr	r3, [pc, #416]	; (80151fc <Build_Ext+0x1c0>)
 801505c:	785b      	ldrb	r3, [r3, #1]
 801505e:	b29b      	uxth	r3, r3
 8015060:	1ad3      	subs	r3, r2, r3
 8015062:	b29a      	uxth	r2, r3
 8015064:	4b64      	ldr	r3, [pc, #400]	; (80151f8 <Build_Ext+0x1bc>)
 8015066:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 801506a:	b29b      	uxth	r3, r3
 801506c:	1ad3      	subs	r3, r2, r3
 801506e:	b29b      	uxth	r3, r3
 8015070:	b21a      	sxth	r2, r3
 8015072:	4b63      	ldr	r3, [pc, #396]	; (8015200 <Build_Ext+0x1c4>)
 8015074:	801a      	strh	r2, [r3, #0]
  Posi_2F2 = List[EXT_POSI].Val;// - Data[2];
 8015076:	4b60      	ldr	r3, [pc, #384]	; (80151f8 <Build_Ext+0x1bc>)
 8015078:	f9b3 20dc 	ldrsh.w	r2, [r3, #220]	; 0xdc
 801507c:	4b61      	ldr	r3, [pc, #388]	; (8015204 <Build_Ext+0x1c8>)
 801507e:	801a      	strh	r2, [r3, #0]

  switch(Ext)
 8015080:	797b      	ldrb	r3, [r7, #5]
 8015082:	2b05      	cmp	r3, #5
 8015084:	f200 809c 	bhi.w	80151c0 <Build_Ext+0x184>
 8015088:	a201      	add	r2, pc, #4	; (adr r2, 8015090 <Build_Ext+0x54>)
 801508a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801508e:	bf00      	nop
 8015090:	080150a9 	.word	0x080150a9
 8015094:	080150cf 	.word	0x080150cf
 8015098:	080150f5 	.word	0x080150f5
 801509c:	0801511f 	.word	0x0801511f
 80150a0:	0801515f 	.word	0x0801515f
 80150a4:	0801519f 	.word	0x0801519f
  {
  case 0: // D
    Vo = Data[x+10]-Data[1]+List[EXT_POSI].Val; break;
 80150a8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80150ac:	330a      	adds	r3, #10
 80150ae:	4a53      	ldr	r2, [pc, #332]	; (80151fc <Build_Ext+0x1c0>)
 80150b0:	5cd3      	ldrb	r3, [r2, r3]
 80150b2:	b29a      	uxth	r2, r3
 80150b4:	4b51      	ldr	r3, [pc, #324]	; (80151fc <Build_Ext+0x1c0>)
 80150b6:	785b      	ldrb	r3, [r3, #1]
 80150b8:	b29b      	uxth	r3, r3
 80150ba:	1ad3      	subs	r3, r2, r3
 80150bc:	b29a      	uxth	r2, r3
 80150be:	4b4e      	ldr	r3, [pc, #312]	; (80151f8 <Build_Ext+0x1bc>)
 80150c0:	f9b3 30dc 	ldrsh.w	r3, [r3, #220]	; 0xdc
 80150c4:	b29b      	uxth	r3, r3
 80150c6:	4413      	add	r3, r2
 80150c8:	b29b      	uxth	r3, r3
 80150ca:	81fb      	strh	r3, [r7, #14]
 80150cc:	e078      	b.n	80151c0 <Build_Ext+0x184>
  case 1: // -D
    Vo = List[EXT_POSI].Val+Data[1]-Data[x+10]; break;
 80150ce:	4b4a      	ldr	r3, [pc, #296]	; (80151f8 <Build_Ext+0x1bc>)
 80150d0:	f9b3 30dc 	ldrsh.w	r3, [r3, #220]	; 0xdc
 80150d4:	b29a      	uxth	r2, r3
 80150d6:	4b49      	ldr	r3, [pc, #292]	; (80151fc <Build_Ext+0x1c0>)
 80150d8:	785b      	ldrb	r3, [r3, #1]
 80150da:	b29b      	uxth	r3, r3
 80150dc:	4413      	add	r3, r2
 80150de:	b29a      	uxth	r2, r3
 80150e0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80150e4:	330a      	adds	r3, #10
 80150e6:	4945      	ldr	r1, [pc, #276]	; (80151fc <Build_Ext+0x1c0>)
 80150e8:	5ccb      	ldrb	r3, [r1, r3]
 80150ea:	b29b      	uxth	r3, r3
 80150ec:	1ad3      	subs	r3, r2, r3
 80150ee:	b29b      	uxth	r3, r3
 80150f0:	81fb      	strh	r3, [r7, #14]
 80150f2:	e065      	b.n	80151c0 <Build_Ext+0x184>
  case 2: // Inp+D
    Vo = Data[x+10]+ WaveBuf[x]+Posi_2F1; break;
 80150f4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80150f8:	330a      	adds	r3, #10
 80150fa:	4a40      	ldr	r2, [pc, #256]	; (80151fc <Build_Ext+0x1c0>)
 80150fc:	5cd3      	ldrb	r3, [r2, r3]
 80150fe:	b29a      	uxth	r2, r3
 8015100:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8015104:	4940      	ldr	r1, [pc, #256]	; (8015208 <Build_Ext+0x1cc>)
 8015106:	5ccb      	ldrb	r3, [r1, r3]
 8015108:	b29b      	uxth	r3, r3
 801510a:	4413      	add	r3, r2
 801510c:	b29a      	uxth	r2, r3
 801510e:	4b3c      	ldr	r3, [pc, #240]	; (8015200 <Build_Ext+0x1c4>)
 8015110:	f9b3 3000 	ldrsh.w	r3, [r3]
 8015114:	b29b      	uxth	r3, r3
 8015116:	4413      	add	r3, r2
 8015118:	b29b      	uxth	r3, r3
 801511a:	81fb      	strh	r3, [r7, #14]
 801511c:	e050      	b.n	80151c0 <Build_Ext+0x184>
  case 3: // D-Inp
    Vo = (Data[x+10]-Data[1])- (WaveBuf[x]-List[V0_POSI].Val)+ List[EXT_POSI].Val; break;
 801511e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8015122:	330a      	adds	r3, #10
 8015124:	4a35      	ldr	r2, [pc, #212]	; (80151fc <Build_Ext+0x1c0>)
 8015126:	5cd3      	ldrb	r3, [r2, r3]
 8015128:	b29a      	uxth	r2, r3
 801512a:	4b34      	ldr	r3, [pc, #208]	; (80151fc <Build_Ext+0x1c0>)
 801512c:	785b      	ldrb	r3, [r3, #1]
 801512e:	b29b      	uxth	r3, r3
 8015130:	1ad3      	subs	r3, r2, r3
 8015132:	b29a      	uxth	r2, r3
 8015134:	4b30      	ldr	r3, [pc, #192]	; (80151f8 <Build_Ext+0x1bc>)
 8015136:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 801513a:	b299      	uxth	r1, r3
 801513c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8015140:	4831      	ldr	r0, [pc, #196]	; (8015208 <Build_Ext+0x1cc>)
 8015142:	5cc3      	ldrb	r3, [r0, r3]
 8015144:	b29b      	uxth	r3, r3
 8015146:	1acb      	subs	r3, r1, r3
 8015148:	b29b      	uxth	r3, r3
 801514a:	4413      	add	r3, r2
 801514c:	b29a      	uxth	r2, r3
 801514e:	4b2a      	ldr	r3, [pc, #168]	; (80151f8 <Build_Ext+0x1bc>)
 8015150:	f9b3 30dc 	ldrsh.w	r3, [r3, #220]	; 0xdc
 8015154:	b29b      	uxth	r3, r3
 8015156:	4413      	add	r3, r2
 8015158:	b29b      	uxth	r3, r3
 801515a:	81fb      	strh	r3, [r7, #14]
 801515c:	e030      	b.n	80151c0 <Build_Ext+0x184>
  case 4: // Inp-D
    Vo = (WaveBuf[x]-List[V0_POSI].Val)-(Data[x+10]-Data[1]) + List[EXT_POSI].Val; break;
 801515e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8015162:	4a29      	ldr	r2, [pc, #164]	; (8015208 <Build_Ext+0x1cc>)
 8015164:	5cd3      	ldrb	r3, [r2, r3]
 8015166:	b29a      	uxth	r2, r3
 8015168:	4b23      	ldr	r3, [pc, #140]	; (80151f8 <Build_Ext+0x1bc>)
 801516a:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 801516e:	b29b      	uxth	r3, r3
 8015170:	1ad3      	subs	r3, r2, r3
 8015172:	b29a      	uxth	r2, r3
 8015174:	4b21      	ldr	r3, [pc, #132]	; (80151fc <Build_Ext+0x1c0>)
 8015176:	785b      	ldrb	r3, [r3, #1]
 8015178:	b299      	uxth	r1, r3
 801517a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801517e:	330a      	adds	r3, #10
 8015180:	481e      	ldr	r0, [pc, #120]	; (80151fc <Build_Ext+0x1c0>)
 8015182:	5cc3      	ldrb	r3, [r0, r3]
 8015184:	b29b      	uxth	r3, r3
 8015186:	1acb      	subs	r3, r1, r3
 8015188:	b29b      	uxth	r3, r3
 801518a:	4413      	add	r3, r2
 801518c:	b29a      	uxth	r2, r3
 801518e:	4b1a      	ldr	r3, [pc, #104]	; (80151f8 <Build_Ext+0x1bc>)
 8015190:	f9b3 30dc 	ldrsh.w	r3, [r3, #220]	; 0xdc
 8015194:	b29b      	uxth	r3, r3
 8015196:	4413      	add	r3, r2
 8015198:	b29b      	uxth	r3, r3
 801519a:	81fb      	strh	r3, [r7, #14]
 801519c:	e010      	b.n	80151c0 <Build_Ext+0x184>
  case 5: // -Inp
    Vo = Yp+List[EXT_POSI].Val - WaveBuf[x]; break;
 801519e:	793b      	ldrb	r3, [r7, #4]
 80151a0:	b29a      	uxth	r2, r3
 80151a2:	4b15      	ldr	r3, [pc, #84]	; (80151f8 <Build_Ext+0x1bc>)
 80151a4:	f9b3 30dc 	ldrsh.w	r3, [r3, #220]	; 0xdc
 80151a8:	b29b      	uxth	r3, r3
 80151aa:	4413      	add	r3, r2
 80151ac:	b29a      	uxth	r2, r3
 80151ae:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80151b2:	4915      	ldr	r1, [pc, #84]	; (8015208 <Build_Ext+0x1cc>)
 80151b4:	5ccb      	ldrb	r3, [r1, r3]
 80151b6:	b29b      	uxth	r3, r3
 80151b8:	1ad3      	subs	r3, r2, r3
 80151ba:	b29b      	uxth	r3, r3
 80151bc:	81fb      	strh	r3, [r7, #14]
 80151be:	bf00      	nop
  }
  if(Vo > 199) Vo = 202;
 80151c0:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80151c4:	2bc7      	cmp	r3, #199	; 0xc7
 80151c6:	dd01      	ble.n	80151cc <Build_Ext+0x190>
 80151c8:	23ca      	movs	r3, #202	; 0xca
 80151ca:	81fb      	strh	r3, [r7, #14]
  if(Vo <   3) Vo = 1;                     // �����޷�
 80151cc:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80151d0:	2b02      	cmp	r3, #2
 80151d2:	dc01      	bgt.n	80151d8 <Build_Ext+0x19c>
 80151d4:	2301      	movs	r3, #1
 80151d6:	81fb      	strh	r3, [r7, #14]
  Buf[x]= Vo;
 80151d8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80151dc:	68ba      	ldr	r2, [r7, #8]
 80151de:	4413      	add	r3, r2
 80151e0:	89fa      	ldrh	r2, [r7, #14]
 80151e2:	b2d2      	uxtb	r2, r2
 80151e4:	701a      	strb	r2, [r3, #0]
}
 80151e6:	bf00      	nop
 80151e8:	3714      	adds	r7, #20
 80151ea:	46bd      	mov	sp, r7
 80151ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80151f0:	4770      	bx	lr
 80151f2:	bf00      	nop
 80151f4:	20001b64 	.word	0x20001b64
 80151f8:	20000274 	.word	0x20000274
 80151fc:	20000008 	.word	0x20000008
 8015200:	20003678 	.word	0x20003678
 8015204:	200076a0 	.word	0x200076a0
 8015208:	20001a38 	.word	0x20001a38

0801520c <Auto_Fit>:

void Auto_Fit(void)
{
 801520c:	b590      	push	{r4, r7, lr}
 801520e:	b083      	sub	sp, #12
 8015210:	af00      	add	r7, sp, #0
  char i,j,k=0;
 8015212:	2300      	movs	r3, #0
 8015214:	717b      	strb	r3, [r7, #5]
  short Tmp,Tmp1;

  if(Status != STOP){
 8015216:	4b38      	ldr	r3, [pc, #224]	; (80152f8 <Auto_Fit+0xec>)
 8015218:	f9b3 3000 	ldrsh.w	r3, [r3]
 801521c:	2b01      	cmp	r3, #1
 801521e:	f000 83de 	beq.w	80159de <Auto_Fit+0x7d2>
    //======��ѹ���Զ�ѡ��==============
    for(i=0;i<9;i++){
 8015222:	2300      	movs	r3, #0
 8015224:	71fb      	strb	r3, [r7, #7]
 8015226:	e098      	b.n	801535a <Auto_Fit+0x14e>
      //******Aͨ��***********
      Tmp1 = ((((Vmax-2048)*((KgA[KindA+(StateA?1:0)]*4)/GK[GainA]))>>12)+100-List[V0_POSI].Val)
 8015228:	4b34      	ldr	r3, [pc, #208]	; (80152fc <Auto_Fit+0xf0>)
 801522a:	f9b3 3000 	ldrsh.w	r3, [r3]
 801522e:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 8015232:	4a33      	ldr	r2, [pc, #204]	; (8015300 <Auto_Fit+0xf4>)
 8015234:	6811      	ldr	r1, [r2, #0]
 8015236:	4a33      	ldr	r2, [pc, #204]	; (8015304 <Auto_Fit+0xf8>)
 8015238:	f9b2 2000 	ldrsh.w	r2, [r2]
 801523c:	4610      	mov	r0, r2
 801523e:	4a32      	ldr	r2, [pc, #200]	; (8015308 <Auto_Fit+0xfc>)
 8015240:	f9b2 2000 	ldrsh.w	r2, [r2]
 8015244:	2a00      	cmp	r2, #0
 8015246:	bf14      	ite	ne
 8015248:	2201      	movne	r2, #1
 801524a:	2200      	moveq	r2, #0
 801524c:	b2d2      	uxtb	r2, r2
 801524e:	4402      	add	r2, r0
 8015250:	0052      	lsls	r2, r2, #1
 8015252:	440a      	add	r2, r1
 8015254:	f9b2 2000 	ldrsh.w	r2, [r2]
 8015258:	0092      	lsls	r2, r2, #2
 801525a:	492c      	ldr	r1, [pc, #176]	; (801530c <Auto_Fit+0x100>)
 801525c:	f9b1 1000 	ldrsh.w	r1, [r1]
 8015260:	4608      	mov	r0, r1
 8015262:	492b      	ldr	r1, [pc, #172]	; (8015310 <Auto_Fit+0x104>)
 8015264:	5c09      	ldrb	r1, [r1, r0]
 8015266:	fb92 f2f1 	sdiv	r2, r2, r1
 801526a:	fb02 f303 	mul.w	r3, r2, r3
 801526e:	131b      	asrs	r3, r3, #12
           - ((((Vmin-2048)*((KgA[KindA+(StateA?1:0)]*4)/GK[GainA]))>>12)+100-List[V0_POSI].Val);
 8015270:	b29a      	uxth	r2, r3
 8015272:	4b28      	ldr	r3, [pc, #160]	; (8015314 <Auto_Fit+0x108>)
 8015274:	f9b3 3000 	ldrsh.w	r3, [r3]
 8015278:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 801527c:	4920      	ldr	r1, [pc, #128]	; (8015300 <Auto_Fit+0xf4>)
 801527e:	6808      	ldr	r0, [r1, #0]
 8015280:	4920      	ldr	r1, [pc, #128]	; (8015304 <Auto_Fit+0xf8>)
 8015282:	f9b1 1000 	ldrsh.w	r1, [r1]
 8015286:	460c      	mov	r4, r1
 8015288:	491f      	ldr	r1, [pc, #124]	; (8015308 <Auto_Fit+0xfc>)
 801528a:	f9b1 1000 	ldrsh.w	r1, [r1]
 801528e:	2900      	cmp	r1, #0
 8015290:	bf14      	ite	ne
 8015292:	2101      	movne	r1, #1
 8015294:	2100      	moveq	r1, #0
 8015296:	b2c9      	uxtb	r1, r1
 8015298:	4421      	add	r1, r4
 801529a:	0049      	lsls	r1, r1, #1
 801529c:	4401      	add	r1, r0
 801529e:	f9b1 1000 	ldrsh.w	r1, [r1]
 80152a2:	0089      	lsls	r1, r1, #2
 80152a4:	4819      	ldr	r0, [pc, #100]	; (801530c <Auto_Fit+0x100>)
 80152a6:	f9b0 0000 	ldrsh.w	r0, [r0]
 80152aa:	4604      	mov	r4, r0
 80152ac:	4818      	ldr	r0, [pc, #96]	; (8015310 <Auto_Fit+0x104>)
 80152ae:	5d00      	ldrb	r0, [r0, r4]
 80152b0:	fb91 f1f0 	sdiv	r1, r1, r0
 80152b4:	fb01 f303 	mul.w	r3, r1, r3
 80152b8:	131b      	asrs	r3, r3, #12
 80152ba:	b29b      	uxth	r3, r3
 80152bc:	1ad3      	subs	r3, r2, r3
 80152be:	b29b      	uxth	r3, r3
      Tmp1 = ((((Vmax-2048)*((KgA[KindA+(StateA?1:0)]*4)/GK[GainA]))>>12)+100-List[V0_POSI].Val)
 80152c0:	803b      	strh	r3, [r7, #0]
      if((Tmp1 < 40)&&(List[Y_RANGES].Val > 2)){       //40
 80152c2:	f9b7 3000 	ldrsh.w	r3, [r7]
 80152c6:	2b27      	cmp	r3, #39	; 0x27
 80152c8:	dc28      	bgt.n	801531c <Auto_Fit+0x110>
 80152ca:	4b13      	ldr	r3, [pc, #76]	; (8015318 <Auto_Fit+0x10c>)
 80152cc:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80152d0:	2b02      	cmp	r3, #2
 80152d2:	dd23      	ble.n	801531c <Auto_Fit+0x110>
        List[Y_RANGES].Val--;
 80152d4:	4b10      	ldr	r3, [pc, #64]	; (8015318 <Auto_Fit+0x10c>)
 80152d6:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80152da:	b29b      	uxth	r3, r3
 80152dc:	3b01      	subs	r3, #1
 80152de:	b29b      	uxth	r3, r3
 80152e0:	b21a      	sxth	r2, r3
 80152e2:	4b0d      	ldr	r3, [pc, #52]	; (8015318 <Auto_Fit+0x10c>)
 80152e4:	809a      	strh	r2, [r3, #4]
        List[V0_POSI].Val=100;
 80152e6:	4b0c      	ldr	r3, [pc, #48]	; (8015318 <Auto_Fit+0x10c>)
 80152e8:	2264      	movs	r2, #100	; 0x64
 80152ea:	839a      	strh	r2, [r3, #28]
        WaveProcess();
 80152ec:	f7ff faac 	bl	8014848 <WaveProcess>
        Update_Proc_All();
 80152f0:	f7fe ff32 	bl	8014158 <Update_Proc_All>
 80152f4:	e02b      	b.n	801534e <Auto_Fit+0x142>
 80152f6:	bf00      	nop
 80152f8:	2000079c 	.word	0x2000079c
 80152fc:	20003682 	.word	0x20003682
 8015300:	20000558 	.word	0x20000558
 8015304:	200076b2 	.word	0x200076b2
 8015308:	2000368e 	.word	0x2000368e
 801530c:	20003676 	.word	0x20003676
 8015310:	2000053c 	.word	0x2000053c
 8015314:	20003694 	.word	0x20003694
 8015318:	20000274 	.word	0x20000274
      }
      else if((Tmp1 > 110)&&(List[Y_RANGES].Val < 9)){ //110
 801531c:	f9b7 3000 	ldrsh.w	r3, [r7]
 8015320:	2b6e      	cmp	r3, #110	; 0x6e
 8015322:	dd14      	ble.n	801534e <Auto_Fit+0x142>
 8015324:	4bbe      	ldr	r3, [pc, #760]	; (8015620 <Auto_Fit+0x414>)
 8015326:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801532a:	2b08      	cmp	r3, #8
 801532c:	dc0f      	bgt.n	801534e <Auto_Fit+0x142>
        List[Y_RANGES].Val++;
 801532e:	4bbc      	ldr	r3, [pc, #752]	; (8015620 <Auto_Fit+0x414>)
 8015330:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8015334:	b29b      	uxth	r3, r3
 8015336:	3301      	adds	r3, #1
 8015338:	b29b      	uxth	r3, r3
 801533a:	b21a      	sxth	r2, r3
 801533c:	4bb8      	ldr	r3, [pc, #736]	; (8015620 <Auto_Fit+0x414>)
 801533e:	809a      	strh	r2, [r3, #4]
        List[V0_POSI].Val=100;
 8015340:	4bb7      	ldr	r3, [pc, #732]	; (8015620 <Auto_Fit+0x414>)
 8015342:	2264      	movs	r2, #100	; 0x64
 8015344:	839a      	strh	r2, [r3, #28]
        WaveProcess();
 8015346:	f7ff fa7f 	bl	8014848 <WaveProcess>
        Update_Proc_All();
 801534a:	f7fe ff05 	bl	8014158 <Update_Proc_All>
      }
      HAL_Delay(50);
 801534e:	2032      	movs	r0, #50	; 0x32
 8015350:	f002 feb4 	bl	80180bc <HAL_Delay>
    for(i=0;i<9;i++){
 8015354:	79fb      	ldrb	r3, [r7, #7]
 8015356:	3301      	adds	r3, #1
 8015358:	71fb      	strb	r3, [r7, #7]
 801535a:	79fb      	ldrb	r3, [r7, #7]
 801535c:	2b08      	cmp	r3, #8
 801535e:	f67f af63 	bls.w	8015228 <Auto_Fit+0x1c>
    //============ʶ�𴥷�Դ======================


    //======�������Զ�ѡ��==============
    //if(!List[TRI_Ch]){//******Aͨ��***********
      Tmp = (((((Vmax-2048)*((KgA[KindA+(StateA?1:0)]*4)/GK[GainA]))>>12)+100-List[V0_POSI].Val)
 8015362:	4bb0      	ldr	r3, [pc, #704]	; (8015624 <Auto_Fit+0x418>)
 8015364:	f9b3 3000 	ldrsh.w	r3, [r3]
 8015368:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 801536c:	4aae      	ldr	r2, [pc, #696]	; (8015628 <Auto_Fit+0x41c>)
 801536e:	6811      	ldr	r1, [r2, #0]
 8015370:	4aae      	ldr	r2, [pc, #696]	; (801562c <Auto_Fit+0x420>)
 8015372:	f9b2 2000 	ldrsh.w	r2, [r2]
 8015376:	4610      	mov	r0, r2
 8015378:	4aad      	ldr	r2, [pc, #692]	; (8015630 <Auto_Fit+0x424>)
 801537a:	f9b2 2000 	ldrsh.w	r2, [r2]
 801537e:	2a00      	cmp	r2, #0
 8015380:	bf14      	ite	ne
 8015382:	2201      	movne	r2, #1
 8015384:	2200      	moveq	r2, #0
 8015386:	b2d2      	uxtb	r2, r2
 8015388:	4402      	add	r2, r0
 801538a:	0052      	lsls	r2, r2, #1
 801538c:	440a      	add	r2, r1
 801538e:	f9b2 2000 	ldrsh.w	r2, [r2]
 8015392:	0092      	lsls	r2, r2, #2
 8015394:	49a7      	ldr	r1, [pc, #668]	; (8015634 <Auto_Fit+0x428>)
 8015396:	f9b1 1000 	ldrsh.w	r1, [r1]
 801539a:	4608      	mov	r0, r1
 801539c:	49a6      	ldr	r1, [pc, #664]	; (8015638 <Auto_Fit+0x42c>)
 801539e:	5c09      	ldrb	r1, [r1, r0]
 80153a0:	fb92 f2f1 	sdiv	r2, r2, r1
 80153a4:	fb02 f303 	mul.w	r3, r2, r3
 80153a8:	131a      	asrs	r2, r3, #12
           - ((((Vmin-2048)*((KgA[KindA+(StateA?1:0)]*4)/GK[GainA]))>>12)+100-List[V0_POSI].Val))/4;
 80153aa:	4ba4      	ldr	r3, [pc, #656]	; (801563c <Auto_Fit+0x430>)
 80153ac:	f9b3 3000 	ldrsh.w	r3, [r3]
 80153b0:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 80153b4:	499c      	ldr	r1, [pc, #624]	; (8015628 <Auto_Fit+0x41c>)
 80153b6:	6808      	ldr	r0, [r1, #0]
 80153b8:	499c      	ldr	r1, [pc, #624]	; (801562c <Auto_Fit+0x420>)
 80153ba:	f9b1 1000 	ldrsh.w	r1, [r1]
 80153be:	460c      	mov	r4, r1
 80153c0:	499b      	ldr	r1, [pc, #620]	; (8015630 <Auto_Fit+0x424>)
 80153c2:	f9b1 1000 	ldrsh.w	r1, [r1]
 80153c6:	2900      	cmp	r1, #0
 80153c8:	bf14      	ite	ne
 80153ca:	2101      	movne	r1, #1
 80153cc:	2100      	moveq	r1, #0
 80153ce:	b2c9      	uxtb	r1, r1
 80153d0:	4421      	add	r1, r4
 80153d2:	0049      	lsls	r1, r1, #1
 80153d4:	4401      	add	r1, r0
 80153d6:	f9b1 1000 	ldrsh.w	r1, [r1]
 80153da:	0089      	lsls	r1, r1, #2
 80153dc:	4895      	ldr	r0, [pc, #596]	; (8015634 <Auto_Fit+0x428>)
 80153de:	f9b0 0000 	ldrsh.w	r0, [r0]
 80153e2:	4604      	mov	r4, r0
 80153e4:	4894      	ldr	r0, [pc, #592]	; (8015638 <Auto_Fit+0x42c>)
 80153e6:	5d00      	ldrb	r0, [r0, r4]
 80153e8:	fb91 f1f0 	sdiv	r1, r1, r0
 80153ec:	fb01 f303 	mul.w	r3, r1, r3
 80153f0:	131b      	asrs	r3, r3, #12
 80153f2:	1ad3      	subs	r3, r2, r3
 80153f4:	2b00      	cmp	r3, #0
 80153f6:	da00      	bge.n	80153fa <Auto_Fit+0x1ee>
 80153f8:	3303      	adds	r3, #3
 80153fa:	109b      	asrs	r3, r3, #2
      Tmp = (((((Vmax-2048)*((KgA[KindA+(StateA?1:0)]*4)/GK[GainA]))>>12)+100-List[V0_POSI].Val)
 80153fc:	807b      	strh	r3, [r7, #2]
      if((List[THRESHOLD].Val > (((((Vmid-2048)*((KgA[KindA+(StateA?1:0)]*4)/GK[GainA]))>>12)+100-List[V0_POSI].Val)  + Tmp))||
 80153fe:	4b88      	ldr	r3, [pc, #544]	; (8015620 <Auto_Fit+0x414>)
 8015400:	f9b3 3084 	ldrsh.w	r3, [r3, #132]	; 0x84
 8015404:	4618      	mov	r0, r3
 8015406:	4b8e      	ldr	r3, [pc, #568]	; (8015640 <Auto_Fit+0x434>)
 8015408:	f9b3 3000 	ldrsh.w	r3, [r3]
 801540c:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 8015410:	4a85      	ldr	r2, [pc, #532]	; (8015628 <Auto_Fit+0x41c>)
 8015412:	6811      	ldr	r1, [r2, #0]
 8015414:	4a85      	ldr	r2, [pc, #532]	; (801562c <Auto_Fit+0x420>)
 8015416:	f9b2 2000 	ldrsh.w	r2, [r2]
 801541a:	4614      	mov	r4, r2
 801541c:	4a84      	ldr	r2, [pc, #528]	; (8015630 <Auto_Fit+0x424>)
 801541e:	f9b2 2000 	ldrsh.w	r2, [r2]
 8015422:	2a00      	cmp	r2, #0
 8015424:	bf14      	ite	ne
 8015426:	2201      	movne	r2, #1
 8015428:	2200      	moveq	r2, #0
 801542a:	b2d2      	uxtb	r2, r2
 801542c:	4422      	add	r2, r4
 801542e:	0052      	lsls	r2, r2, #1
 8015430:	440a      	add	r2, r1
 8015432:	f9b2 2000 	ldrsh.w	r2, [r2]
 8015436:	0092      	lsls	r2, r2, #2
 8015438:	497e      	ldr	r1, [pc, #504]	; (8015634 <Auto_Fit+0x428>)
 801543a:	f9b1 1000 	ldrsh.w	r1, [r1]
 801543e:	460c      	mov	r4, r1
 8015440:	497d      	ldr	r1, [pc, #500]	; (8015638 <Auto_Fit+0x42c>)
 8015442:	5d09      	ldrb	r1, [r1, r4]
 8015444:	fb92 f2f1 	sdiv	r2, r2, r1
 8015448:	fb02 f303 	mul.w	r3, r2, r3
 801544c:	131b      	asrs	r3, r3, #12
 801544e:	3364      	adds	r3, #100	; 0x64
 8015450:	4a73      	ldr	r2, [pc, #460]	; (8015620 <Auto_Fit+0x414>)
 8015452:	f9b2 201c 	ldrsh.w	r2, [r2, #28]
 8015456:	1a9a      	subs	r2, r3, r2
 8015458:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 801545c:	4413      	add	r3, r2
 801545e:	4298      	cmp	r0, r3
 8015460:	dc32      	bgt.n	80154c8 <Auto_Fit+0x2bc>
         (List[THRESHOLD].Val < (((((Vmid-2048)*((KgA[KindA+(StateA?1:0)]*4)/GK[GainA]))>>12)+100-List[V0_POSI].Val)  - Tmp))){
 8015462:	4b6f      	ldr	r3, [pc, #444]	; (8015620 <Auto_Fit+0x414>)
 8015464:	f9b3 3084 	ldrsh.w	r3, [r3, #132]	; 0x84
 8015468:	4618      	mov	r0, r3
 801546a:	4b75      	ldr	r3, [pc, #468]	; (8015640 <Auto_Fit+0x434>)
 801546c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8015470:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 8015474:	4a6c      	ldr	r2, [pc, #432]	; (8015628 <Auto_Fit+0x41c>)
 8015476:	6811      	ldr	r1, [r2, #0]
 8015478:	4a6c      	ldr	r2, [pc, #432]	; (801562c <Auto_Fit+0x420>)
 801547a:	f9b2 2000 	ldrsh.w	r2, [r2]
 801547e:	4614      	mov	r4, r2
 8015480:	4a6b      	ldr	r2, [pc, #428]	; (8015630 <Auto_Fit+0x424>)
 8015482:	f9b2 2000 	ldrsh.w	r2, [r2]
 8015486:	2a00      	cmp	r2, #0
 8015488:	bf14      	ite	ne
 801548a:	2201      	movne	r2, #1
 801548c:	2200      	moveq	r2, #0
 801548e:	b2d2      	uxtb	r2, r2
 8015490:	4422      	add	r2, r4
 8015492:	0052      	lsls	r2, r2, #1
 8015494:	440a      	add	r2, r1
 8015496:	f9b2 2000 	ldrsh.w	r2, [r2]
 801549a:	0092      	lsls	r2, r2, #2
 801549c:	4965      	ldr	r1, [pc, #404]	; (8015634 <Auto_Fit+0x428>)
 801549e:	f9b1 1000 	ldrsh.w	r1, [r1]
 80154a2:	460c      	mov	r4, r1
 80154a4:	4964      	ldr	r1, [pc, #400]	; (8015638 <Auto_Fit+0x42c>)
 80154a6:	5d09      	ldrb	r1, [r1, r4]
 80154a8:	fb92 f2f1 	sdiv	r2, r2, r1
 80154ac:	fb02 f303 	mul.w	r3, r2, r3
 80154b0:	131b      	asrs	r3, r3, #12
 80154b2:	3364      	adds	r3, #100	; 0x64
 80154b4:	4a5a      	ldr	r2, [pc, #360]	; (8015620 <Auto_Fit+0x414>)
 80154b6:	f9b2 201c 	ldrsh.w	r2, [r2, #28]
 80154ba:	1a9a      	subs	r2, r3, r2
 80154bc:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80154c0:	1ad3      	subs	r3, r2, r3
      if((List[THRESHOLD].Val > (((((Vmid-2048)*((KgA[KindA+(StateA?1:0)]*4)/GK[GainA]))>>12)+100-List[V0_POSI].Val)  + Tmp))||
 80154c2:	4298      	cmp	r0, r3
 80154c4:	f280 808e 	bge.w	80155e4 <Auto_Fit+0x3d8>
           if(abs(((((Vmid-2048)*((KgA[KindA+(StateA?1:0)]*4)/GK[GainA]))>>12)+100-List[V0_POSI].Val)+15)<195)
 80154c8:	4b5d      	ldr	r3, [pc, #372]	; (8015640 <Auto_Fit+0x434>)
 80154ca:	f9b3 3000 	ldrsh.w	r3, [r3]
 80154ce:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 80154d2:	4a55      	ldr	r2, [pc, #340]	; (8015628 <Auto_Fit+0x41c>)
 80154d4:	6811      	ldr	r1, [r2, #0]
 80154d6:	4a55      	ldr	r2, [pc, #340]	; (801562c <Auto_Fit+0x420>)
 80154d8:	f9b2 2000 	ldrsh.w	r2, [r2]
 80154dc:	4610      	mov	r0, r2
 80154de:	4a54      	ldr	r2, [pc, #336]	; (8015630 <Auto_Fit+0x424>)
 80154e0:	f9b2 2000 	ldrsh.w	r2, [r2]
 80154e4:	2a00      	cmp	r2, #0
 80154e6:	bf14      	ite	ne
 80154e8:	2201      	movne	r2, #1
 80154ea:	2200      	moveq	r2, #0
 80154ec:	b2d2      	uxtb	r2, r2
 80154ee:	4402      	add	r2, r0
 80154f0:	0052      	lsls	r2, r2, #1
 80154f2:	440a      	add	r2, r1
 80154f4:	f9b2 2000 	ldrsh.w	r2, [r2]
 80154f8:	0092      	lsls	r2, r2, #2
 80154fa:	494e      	ldr	r1, [pc, #312]	; (8015634 <Auto_Fit+0x428>)
 80154fc:	f9b1 1000 	ldrsh.w	r1, [r1]
 8015500:	4608      	mov	r0, r1
 8015502:	494d      	ldr	r1, [pc, #308]	; (8015638 <Auto_Fit+0x42c>)
 8015504:	5c09      	ldrb	r1, [r1, r0]
 8015506:	fb92 f2f1 	sdiv	r2, r2, r1
 801550a:	fb02 f303 	mul.w	r3, r2, r3
 801550e:	131b      	asrs	r3, r3, #12
 8015510:	3364      	adds	r3, #100	; 0x64
 8015512:	4a43      	ldr	r2, [pc, #268]	; (8015620 <Auto_Fit+0x414>)
 8015514:	f9b2 201c 	ldrsh.w	r2, [r2, #28]
 8015518:	1a9b      	subs	r3, r3, r2
 801551a:	330f      	adds	r3, #15
 801551c:	f113 0fc2 	cmn.w	r3, #194	; 0xc2
 8015520:	db5c      	blt.n	80155dc <Auto_Fit+0x3d0>
 8015522:	4b47      	ldr	r3, [pc, #284]	; (8015640 <Auto_Fit+0x434>)
 8015524:	f9b3 3000 	ldrsh.w	r3, [r3]
 8015528:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 801552c:	4a3e      	ldr	r2, [pc, #248]	; (8015628 <Auto_Fit+0x41c>)
 801552e:	6811      	ldr	r1, [r2, #0]
 8015530:	4a3e      	ldr	r2, [pc, #248]	; (801562c <Auto_Fit+0x420>)
 8015532:	f9b2 2000 	ldrsh.w	r2, [r2]
 8015536:	4610      	mov	r0, r2
 8015538:	4a3d      	ldr	r2, [pc, #244]	; (8015630 <Auto_Fit+0x424>)
 801553a:	f9b2 2000 	ldrsh.w	r2, [r2]
 801553e:	2a00      	cmp	r2, #0
 8015540:	bf14      	ite	ne
 8015542:	2201      	movne	r2, #1
 8015544:	2200      	moveq	r2, #0
 8015546:	b2d2      	uxtb	r2, r2
 8015548:	4402      	add	r2, r0
 801554a:	0052      	lsls	r2, r2, #1
 801554c:	440a      	add	r2, r1
 801554e:	f9b2 2000 	ldrsh.w	r2, [r2]
 8015552:	0092      	lsls	r2, r2, #2
 8015554:	4937      	ldr	r1, [pc, #220]	; (8015634 <Auto_Fit+0x428>)
 8015556:	f9b1 1000 	ldrsh.w	r1, [r1]
 801555a:	4608      	mov	r0, r1
 801555c:	4936      	ldr	r1, [pc, #216]	; (8015638 <Auto_Fit+0x42c>)
 801555e:	5c09      	ldrb	r1, [r1, r0]
 8015560:	fb92 f2f1 	sdiv	r2, r2, r1
 8015564:	fb02 f303 	mul.w	r3, r2, r3
 8015568:	131b      	asrs	r3, r3, #12
 801556a:	3364      	adds	r3, #100	; 0x64
 801556c:	4a2c      	ldr	r2, [pc, #176]	; (8015620 <Auto_Fit+0x414>)
 801556e:	f9b2 201c 	ldrsh.w	r2, [r2, #28]
 8015572:	1a9b      	subs	r3, r3, r2
 8015574:	330f      	adds	r3, #15
 8015576:	2bc2      	cmp	r3, #194	; 0xc2
 8015578:	dc30      	bgt.n	80155dc <Auto_Fit+0x3d0>
             List[THRESHOLD].Val = ((((Vmid-2048)*((KgA[KindA+(StateA?1:0)]*4)/GK[GainA]))>>12)+100-List[V0_POSI].Val)+15 ;
 801557a:	4b31      	ldr	r3, [pc, #196]	; (8015640 <Auto_Fit+0x434>)
 801557c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8015580:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 8015584:	4a28      	ldr	r2, [pc, #160]	; (8015628 <Auto_Fit+0x41c>)
 8015586:	6811      	ldr	r1, [r2, #0]
 8015588:	4a28      	ldr	r2, [pc, #160]	; (801562c <Auto_Fit+0x420>)
 801558a:	f9b2 2000 	ldrsh.w	r2, [r2]
 801558e:	4610      	mov	r0, r2
 8015590:	4a27      	ldr	r2, [pc, #156]	; (8015630 <Auto_Fit+0x424>)
 8015592:	f9b2 2000 	ldrsh.w	r2, [r2]
 8015596:	2a00      	cmp	r2, #0
 8015598:	bf14      	ite	ne
 801559a:	2201      	movne	r2, #1
 801559c:	2200      	moveq	r2, #0
 801559e:	b2d2      	uxtb	r2, r2
 80155a0:	4402      	add	r2, r0
 80155a2:	0052      	lsls	r2, r2, #1
 80155a4:	440a      	add	r2, r1
 80155a6:	f9b2 2000 	ldrsh.w	r2, [r2]
 80155aa:	0092      	lsls	r2, r2, #2
 80155ac:	4921      	ldr	r1, [pc, #132]	; (8015634 <Auto_Fit+0x428>)
 80155ae:	f9b1 1000 	ldrsh.w	r1, [r1]
 80155b2:	4608      	mov	r0, r1
 80155b4:	4920      	ldr	r1, [pc, #128]	; (8015638 <Auto_Fit+0x42c>)
 80155b6:	5c09      	ldrb	r1, [r1, r0]
 80155b8:	fb92 f2f1 	sdiv	r2, r2, r1
 80155bc:	fb02 f303 	mul.w	r3, r2, r3
 80155c0:	131b      	asrs	r3, r3, #12
 80155c2:	b29a      	uxth	r2, r3
 80155c4:	4b16      	ldr	r3, [pc, #88]	; (8015620 <Auto_Fit+0x414>)
 80155c6:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 80155ca:	b29b      	uxth	r3, r3
 80155cc:	1ad3      	subs	r3, r2, r3
 80155ce:	b29b      	uxth	r3, r3
 80155d0:	3373      	adds	r3, #115	; 0x73
 80155d2:	b29b      	uxth	r3, r3
 80155d4:	b21a      	sxth	r2, r3
 80155d6:	4b12      	ldr	r3, [pc, #72]	; (8015620 <Auto_Fit+0x414>)
 80155d8:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84
           WaveProcess();
 80155dc:	f7ff f934 	bl	8014848 <WaveProcess>
           Update_Proc_All();
 80155e0:	f7fe fdba 	bl	8014158 <Update_Proc_All>
         }

      ParamTab[VTx2]= ParamTab[P1x2] + 2*List[THRESHOLD].Val;
 80155e4:	4b17      	ldr	r3, [pc, #92]	; (8015644 <Auto_Fit+0x438>)
 80155e6:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 80155ea:	b29a      	uxth	r2, r3
 80155ec:	4b0c      	ldr	r3, [pc, #48]	; (8015620 <Auto_Fit+0x414>)
 80155ee:	f9b3 3084 	ldrsh.w	r3, [r3, #132]	; 0x84
 80155f2:	b29b      	uxth	r3, r3
 80155f4:	005b      	lsls	r3, r3, #1
 80155f6:	b29b      	uxth	r3, r3
 80155f8:	4413      	add	r3, r2
 80155fa:	b29b      	uxth	r3, r3
 80155fc:	b21a      	sxth	r2, r3
 80155fe:	4b11      	ldr	r3, [pc, #68]	; (8015644 <Auto_Fit+0x438>)
 8015600:	839a      	strh	r2, [r3, #28]
      List[THRESHOLD].Flg |= UPD;
 8015602:	4b07      	ldr	r3, [pc, #28]	; (8015620 <Auto_Fit+0x414>)
 8015604:	f893 3086 	ldrb.w	r3, [r3, #134]	; 0x86
 8015608:	f043 0320 	orr.w	r3, r3, #32
 801560c:	b2da      	uxtb	r2, r3
 801560e:	4b04      	ldr	r3, [pc, #16]	; (8015620 <Auto_Fit+0x414>)
 8015610:	f883 2086 	strb.w	r2, [r3, #134]	; 0x86
      Update_Title();
 8015614:	f7fc fa9c 	bl	8011b50 <Update_Title>

    //===========��ƽʱ��������==================
    HAL_Delay(100);
 8015618:	2064      	movs	r0, #100	; 0x64
 801561a:	f002 fd4f 	bl	80180bc <HAL_Delay>
 801561e:	e013      	b.n	8015648 <Auto_Fit+0x43c>
 8015620:	20000274 	.word	0x20000274
 8015624:	20003682 	.word	0x20003682
 8015628:	20000558 	.word	0x20000558
 801562c:	200076b2 	.word	0x200076b2
 8015630:	2000368e 	.word	0x2000368e
 8015634:	20003676 	.word	0x20003676
 8015638:	2000053c 	.word	0x2000053c
 801563c:	20003694 	.word	0x20003694
 8015640:	20003696 	.word	0x20003696
 8015644:	20000140 	.word	0x20000140

        if(((((Vmid-2048)*((KgA[KindA+(StateA?1:0)]*4)/GK[GainA]))>>12)+100-List[V0_POSI].Val)>10){
 8015648:	4ba3      	ldr	r3, [pc, #652]	; (80158d8 <Auto_Fit+0x6cc>)
 801564a:	f9b3 3000 	ldrsh.w	r3, [r3]
 801564e:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 8015652:	4aa2      	ldr	r2, [pc, #648]	; (80158dc <Auto_Fit+0x6d0>)
 8015654:	6811      	ldr	r1, [r2, #0]
 8015656:	4aa2      	ldr	r2, [pc, #648]	; (80158e0 <Auto_Fit+0x6d4>)
 8015658:	f9b2 2000 	ldrsh.w	r2, [r2]
 801565c:	4610      	mov	r0, r2
 801565e:	4aa1      	ldr	r2, [pc, #644]	; (80158e4 <Auto_Fit+0x6d8>)
 8015660:	f9b2 2000 	ldrsh.w	r2, [r2]
 8015664:	2a00      	cmp	r2, #0
 8015666:	bf14      	ite	ne
 8015668:	2201      	movne	r2, #1
 801566a:	2200      	moveq	r2, #0
 801566c:	b2d2      	uxtb	r2, r2
 801566e:	4402      	add	r2, r0
 8015670:	0052      	lsls	r2, r2, #1
 8015672:	440a      	add	r2, r1
 8015674:	f9b2 2000 	ldrsh.w	r2, [r2]
 8015678:	0092      	lsls	r2, r2, #2
 801567a:	499b      	ldr	r1, [pc, #620]	; (80158e8 <Auto_Fit+0x6dc>)
 801567c:	f9b1 1000 	ldrsh.w	r1, [r1]
 8015680:	4608      	mov	r0, r1
 8015682:	499a      	ldr	r1, [pc, #616]	; (80158ec <Auto_Fit+0x6e0>)
 8015684:	5c09      	ldrb	r1, [r1, r0]
 8015686:	fb92 f2f1 	sdiv	r2, r2, r1
 801568a:	fb02 f303 	mul.w	r3, r2, r3
 801568e:	131b      	asrs	r3, r3, #12
 8015690:	3364      	adds	r3, #100	; 0x64
 8015692:	4a97      	ldr	r2, [pc, #604]	; (80158f0 <Auto_Fit+0x6e4>)
 8015694:	f9b2 201c 	ldrsh.w	r2, [r2, #28]
 8015698:	1a9b      	subs	r3, r3, r2
 801569a:	2b0a      	cmp	r3, #10
 801569c:	dd76      	ble.n	801578c <Auto_Fit+0x580>
      WaveProcess();
 801569e:	f7ff f8d3 	bl	8014848 <WaveProcess>
      Update_Proc_All();
 80156a2:	f7fe fd59 	bl	8014158 <Update_Proc_All>
      HAL_Delay(100);
 80156a6:	2064      	movs	r0, #100	; 0x64
 80156a8:	f002 fd08 	bl	80180bc <HAL_Delay>
      for(i=0;i<9;i++){
 80156ac:	2300      	movs	r3, #0
 80156ae:	71fb      	strb	r3, [r7, #7]
 80156b0:	e068      	b.n	8015784 <Auto_Fit+0x578>
        WaveProcess();
 80156b2:	f7ff f8c9 	bl	8014848 <WaveProcess>
        Tmp1 = (((Vmax-2048)*((KgA[KindA+(StateA?1:0)]*4)/GK[GainA]))>>12)+100-List[V0_POSI].Val;
 80156b6:	4b8f      	ldr	r3, [pc, #572]	; (80158f4 <Auto_Fit+0x6e8>)
 80156b8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80156bc:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 80156c0:	4a86      	ldr	r2, [pc, #536]	; (80158dc <Auto_Fit+0x6d0>)
 80156c2:	6811      	ldr	r1, [r2, #0]
 80156c4:	4a86      	ldr	r2, [pc, #536]	; (80158e0 <Auto_Fit+0x6d4>)
 80156c6:	f9b2 2000 	ldrsh.w	r2, [r2]
 80156ca:	4610      	mov	r0, r2
 80156cc:	4a85      	ldr	r2, [pc, #532]	; (80158e4 <Auto_Fit+0x6d8>)
 80156ce:	f9b2 2000 	ldrsh.w	r2, [r2]
 80156d2:	2a00      	cmp	r2, #0
 80156d4:	bf14      	ite	ne
 80156d6:	2201      	movne	r2, #1
 80156d8:	2200      	moveq	r2, #0
 80156da:	b2d2      	uxtb	r2, r2
 80156dc:	4402      	add	r2, r0
 80156de:	0052      	lsls	r2, r2, #1
 80156e0:	440a      	add	r2, r1
 80156e2:	f9b2 2000 	ldrsh.w	r2, [r2]
 80156e6:	0092      	lsls	r2, r2, #2
 80156e8:	497f      	ldr	r1, [pc, #508]	; (80158e8 <Auto_Fit+0x6dc>)
 80156ea:	f9b1 1000 	ldrsh.w	r1, [r1]
 80156ee:	4608      	mov	r0, r1
 80156f0:	497e      	ldr	r1, [pc, #504]	; (80158ec <Auto_Fit+0x6e0>)
 80156f2:	5c09      	ldrb	r1, [r1, r0]
 80156f4:	fb92 f2f1 	sdiv	r2, r2, r1
 80156f8:	fb02 f303 	mul.w	r3, r2, r3
 80156fc:	131b      	asrs	r3, r3, #12
 80156fe:	b29a      	uxth	r2, r3
 8015700:	4b7b      	ldr	r3, [pc, #492]	; (80158f0 <Auto_Fit+0x6e4>)
 8015702:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 8015706:	b29b      	uxth	r3, r3
 8015708:	1ad3      	subs	r3, r2, r3
 801570a:	b29b      	uxth	r3, r3
 801570c:	3364      	adds	r3, #100	; 0x64
 801570e:	b29b      	uxth	r3, r3
 8015710:	803b      	strh	r3, [r7, #0]
        if((Tmp1 < 40)&&(List[Y_RANGES].Val > 2)){       //40
 8015712:	f9b7 3000 	ldrsh.w	r3, [r7]
 8015716:	2b27      	cmp	r3, #39	; 0x27
 8015718:	dc15      	bgt.n	8015746 <Auto_Fit+0x53a>
 801571a:	4b75      	ldr	r3, [pc, #468]	; (80158f0 <Auto_Fit+0x6e4>)
 801571c:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8015720:	2b02      	cmp	r3, #2
 8015722:	dd10      	ble.n	8015746 <Auto_Fit+0x53a>
          List[Y_RANGES].Val--;
 8015724:	4b72      	ldr	r3, [pc, #456]	; (80158f0 <Auto_Fit+0x6e4>)
 8015726:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801572a:	b29b      	uxth	r3, r3
 801572c:	3b01      	subs	r3, #1
 801572e:	b29b      	uxth	r3, r3
 8015730:	b21a      	sxth	r2, r3
 8015732:	4b6f      	ldr	r3, [pc, #444]	; (80158f0 <Auto_Fit+0x6e4>)
 8015734:	809a      	strh	r2, [r3, #4]
          List[V0_POSI].Val=100;
 8015736:	4b6e      	ldr	r3, [pc, #440]	; (80158f0 <Auto_Fit+0x6e4>)
 8015738:	2264      	movs	r2, #100	; 0x64
 801573a:	839a      	strh	r2, [r3, #28]
          WaveProcess();
 801573c:	f7ff f884 	bl	8014848 <WaveProcess>
          Update_Proc_All();
 8015740:	f7fe fd0a 	bl	8014158 <Update_Proc_All>
 8015744:	e018      	b.n	8015778 <Auto_Fit+0x56c>
        }
        else if((Tmp1 > 100)&&(List[Y_RANGES].Val < 9)){ //110
 8015746:	f9b7 3000 	ldrsh.w	r3, [r7]
 801574a:	2b64      	cmp	r3, #100	; 0x64
 801574c:	dd14      	ble.n	8015778 <Auto_Fit+0x56c>
 801574e:	4b68      	ldr	r3, [pc, #416]	; (80158f0 <Auto_Fit+0x6e4>)
 8015750:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8015754:	2b08      	cmp	r3, #8
 8015756:	dc0f      	bgt.n	8015778 <Auto_Fit+0x56c>
          List[Y_RANGES].Val++;
 8015758:	4b65      	ldr	r3, [pc, #404]	; (80158f0 <Auto_Fit+0x6e4>)
 801575a:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801575e:	b29b      	uxth	r3, r3
 8015760:	3301      	adds	r3, #1
 8015762:	b29b      	uxth	r3, r3
 8015764:	b21a      	sxth	r2, r3
 8015766:	4b62      	ldr	r3, [pc, #392]	; (80158f0 <Auto_Fit+0x6e4>)
 8015768:	809a      	strh	r2, [r3, #4]
          List[V0_POSI].Val=100;
 801576a:	4b61      	ldr	r3, [pc, #388]	; (80158f0 <Auto_Fit+0x6e4>)
 801576c:	2264      	movs	r2, #100	; 0x64
 801576e:	839a      	strh	r2, [r3, #28]
          WaveProcess();
 8015770:	f7ff f86a 	bl	8014848 <WaveProcess>
          Update_Proc_All();
 8015774:	f7fe fcf0 	bl	8014158 <Update_Proc_All>
        }
        HAL_Delay(50);
 8015778:	2032      	movs	r0, #50	; 0x32
 801577a:	f002 fc9f 	bl	80180bc <HAL_Delay>
      for(i=0;i<9;i++){
 801577e:	79fb      	ldrb	r3, [r7, #7]
 8015780:	3301      	adds	r3, #1
 8015782:	71fb      	strb	r3, [r7, #7]
 8015784:	79fb      	ldrb	r3, [r7, #7]
 8015786:	2b08      	cmp	r3, #8
 8015788:	d993      	bls.n	80156b2 <Auto_Fit+0x4a6>
 801578a:	e054      	b.n	8015836 <Auto_Fit+0x62a>
      }
    }
    else if((((((Vmax-2048)*((KgA[KindA+(StateA?1:0)]*4)/GK[GainA]))>>12)+100-List[V0_POSI].Val)
 801578c:	4b59      	ldr	r3, [pc, #356]	; (80158f4 <Auto_Fit+0x6e8>)
 801578e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8015792:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 8015796:	4a51      	ldr	r2, [pc, #324]	; (80158dc <Auto_Fit+0x6d0>)
 8015798:	6811      	ldr	r1, [r2, #0]
 801579a:	4a51      	ldr	r2, [pc, #324]	; (80158e0 <Auto_Fit+0x6d4>)
 801579c:	f9b2 2000 	ldrsh.w	r2, [r2]
 80157a0:	4610      	mov	r0, r2
 80157a2:	4a50      	ldr	r2, [pc, #320]	; (80158e4 <Auto_Fit+0x6d8>)
 80157a4:	f9b2 2000 	ldrsh.w	r2, [r2]
 80157a8:	2a00      	cmp	r2, #0
 80157aa:	bf14      	ite	ne
 80157ac:	2201      	movne	r2, #1
 80157ae:	2200      	moveq	r2, #0
 80157b0:	b2d2      	uxtb	r2, r2
 80157b2:	4402      	add	r2, r0
 80157b4:	0052      	lsls	r2, r2, #1
 80157b6:	440a      	add	r2, r1
 80157b8:	f9b2 2000 	ldrsh.w	r2, [r2]
 80157bc:	0092      	lsls	r2, r2, #2
 80157be:	494a      	ldr	r1, [pc, #296]	; (80158e8 <Auto_Fit+0x6dc>)
 80157c0:	f9b1 1000 	ldrsh.w	r1, [r1]
 80157c4:	4608      	mov	r0, r1
 80157c6:	4949      	ldr	r1, [pc, #292]	; (80158ec <Auto_Fit+0x6e0>)
 80157c8:	5c09      	ldrb	r1, [r1, r0]
 80157ca:	fb92 f2f1 	sdiv	r2, r2, r1
 80157ce:	fb02 f303 	mul.w	r3, r2, r3
 80157d2:	131a      	asrs	r2, r3, #12
         - ((((Vmin-2048)*((KgA[KindA+(StateA?1:0)]*4)/GK[GainA]))>>12)+100-List[V0_POSI].Val)) <10){
 80157d4:	4b48      	ldr	r3, [pc, #288]	; (80158f8 <Auto_Fit+0x6ec>)
 80157d6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80157da:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 80157de:	493f      	ldr	r1, [pc, #252]	; (80158dc <Auto_Fit+0x6d0>)
 80157e0:	6808      	ldr	r0, [r1, #0]
 80157e2:	493f      	ldr	r1, [pc, #252]	; (80158e0 <Auto_Fit+0x6d4>)
 80157e4:	f9b1 1000 	ldrsh.w	r1, [r1]
 80157e8:	460c      	mov	r4, r1
 80157ea:	493e      	ldr	r1, [pc, #248]	; (80158e4 <Auto_Fit+0x6d8>)
 80157ec:	f9b1 1000 	ldrsh.w	r1, [r1]
 80157f0:	2900      	cmp	r1, #0
 80157f2:	bf14      	ite	ne
 80157f4:	2101      	movne	r1, #1
 80157f6:	2100      	moveq	r1, #0
 80157f8:	b2c9      	uxtb	r1, r1
 80157fa:	4421      	add	r1, r4
 80157fc:	0049      	lsls	r1, r1, #1
 80157fe:	4401      	add	r1, r0
 8015800:	f9b1 1000 	ldrsh.w	r1, [r1]
 8015804:	0089      	lsls	r1, r1, #2
 8015806:	4838      	ldr	r0, [pc, #224]	; (80158e8 <Auto_Fit+0x6dc>)
 8015808:	f9b0 0000 	ldrsh.w	r0, [r0]
 801580c:	4604      	mov	r4, r0
 801580e:	4837      	ldr	r0, [pc, #220]	; (80158ec <Auto_Fit+0x6e0>)
 8015810:	5d00      	ldrb	r0, [r0, r4]
 8015812:	fb91 f1f0 	sdiv	r1, r1, r0
 8015816:	fb01 f303 	mul.w	r3, r1, r3
 801581a:	131b      	asrs	r3, r3, #12
 801581c:	1ad3      	subs	r3, r2, r3
    else if((((((Vmax-2048)*((KgA[KindA+(StateA?1:0)]*4)/GK[GainA]))>>12)+100-List[V0_POSI].Val)
 801581e:	2b09      	cmp	r3, #9
 8015820:	dc09      	bgt.n	8015836 <Auto_Fit+0x62a>
      //===========���ź�ʱ��ѹ��2V==================
        List[Y_RANGES].Val=7; //2v
 8015822:	4b33      	ldr	r3, [pc, #204]	; (80158f0 <Auto_Fit+0x6e4>)
 8015824:	2207      	movs	r2, #7
 8015826:	809a      	strh	r2, [r3, #4]
        WaveProcess();
 8015828:	f7ff f80e 	bl	8014848 <WaveProcess>
        Update_Proc_All();
 801582c:	f7fe fc94 	bl	8014158 <Update_Proc_All>
        HAL_Delay(50);
 8015830:	2032      	movs	r0, #50	; 0x32
 8015832:	f002 fc43 	bl	80180bc <HAL_Delay>


    //======ʱ���Զ�ѡ��==============

    //if(!List[TRI_Ch].Val){//******Aͨ��***********
      Tmp1 = ((((Vmax-2048)*((KgA[KindA+(StateA?1:0)]*4)/GK[GainA]))>>12)+100-List[V0_POSI].Val)
 8015836:	4b2f      	ldr	r3, [pc, #188]	; (80158f4 <Auto_Fit+0x6e8>)
 8015838:	f9b3 3000 	ldrsh.w	r3, [r3]
 801583c:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 8015840:	4a26      	ldr	r2, [pc, #152]	; (80158dc <Auto_Fit+0x6d0>)
 8015842:	6811      	ldr	r1, [r2, #0]
 8015844:	4a26      	ldr	r2, [pc, #152]	; (80158e0 <Auto_Fit+0x6d4>)
 8015846:	f9b2 2000 	ldrsh.w	r2, [r2]
 801584a:	4610      	mov	r0, r2
 801584c:	4a25      	ldr	r2, [pc, #148]	; (80158e4 <Auto_Fit+0x6d8>)
 801584e:	f9b2 2000 	ldrsh.w	r2, [r2]
 8015852:	2a00      	cmp	r2, #0
 8015854:	bf14      	ite	ne
 8015856:	2201      	movne	r2, #1
 8015858:	2200      	moveq	r2, #0
 801585a:	b2d2      	uxtb	r2, r2
 801585c:	4402      	add	r2, r0
 801585e:	0052      	lsls	r2, r2, #1
 8015860:	440a      	add	r2, r1
 8015862:	f9b2 2000 	ldrsh.w	r2, [r2]
 8015866:	0092      	lsls	r2, r2, #2
 8015868:	491f      	ldr	r1, [pc, #124]	; (80158e8 <Auto_Fit+0x6dc>)
 801586a:	f9b1 1000 	ldrsh.w	r1, [r1]
 801586e:	4608      	mov	r0, r1
 8015870:	491e      	ldr	r1, [pc, #120]	; (80158ec <Auto_Fit+0x6e0>)
 8015872:	5c09      	ldrb	r1, [r1, r0]
 8015874:	fb92 f2f1 	sdiv	r2, r2, r1
 8015878:	fb02 f303 	mul.w	r3, r2, r3
 801587c:	131b      	asrs	r3, r3, #12
           - ((((Vmin-2048)*((KgA[KindA+(StateA?1:0)]*4)/GK[GainA]))>>12)+100-List[V0_POSI].Val);
 801587e:	b29a      	uxth	r2, r3
 8015880:	4b1d      	ldr	r3, [pc, #116]	; (80158f8 <Auto_Fit+0x6ec>)
 8015882:	f9b3 3000 	ldrsh.w	r3, [r3]
 8015886:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 801588a:	4914      	ldr	r1, [pc, #80]	; (80158dc <Auto_Fit+0x6d0>)
 801588c:	6808      	ldr	r0, [r1, #0]
 801588e:	4914      	ldr	r1, [pc, #80]	; (80158e0 <Auto_Fit+0x6d4>)
 8015890:	f9b1 1000 	ldrsh.w	r1, [r1]
 8015894:	460c      	mov	r4, r1
 8015896:	4913      	ldr	r1, [pc, #76]	; (80158e4 <Auto_Fit+0x6d8>)
 8015898:	f9b1 1000 	ldrsh.w	r1, [r1]
 801589c:	2900      	cmp	r1, #0
 801589e:	bf14      	ite	ne
 80158a0:	2101      	movne	r1, #1
 80158a2:	2100      	moveq	r1, #0
 80158a4:	b2c9      	uxtb	r1, r1
 80158a6:	4421      	add	r1, r4
 80158a8:	0049      	lsls	r1, r1, #1
 80158aa:	4401      	add	r1, r0
 80158ac:	f9b1 1000 	ldrsh.w	r1, [r1]
 80158b0:	0089      	lsls	r1, r1, #2
 80158b2:	480d      	ldr	r0, [pc, #52]	; (80158e8 <Auto_Fit+0x6dc>)
 80158b4:	f9b0 0000 	ldrsh.w	r0, [r0]
 80158b8:	4604      	mov	r4, r0
 80158ba:	480c      	ldr	r0, [pc, #48]	; (80158ec <Auto_Fit+0x6e0>)
 80158bc:	5d00      	ldrb	r0, [r0, r4]
 80158be:	fb91 f1f0 	sdiv	r1, r1, r0
 80158c2:	fb01 f303 	mul.w	r3, r1, r3
 80158c6:	131b      	asrs	r3, r3, #12
 80158c8:	b29b      	uxth	r3, r3
 80158ca:	1ad3      	subs	r3, r2, r3
 80158cc:	b29b      	uxth	r3, r3
      Tmp1 = ((((Vmax-2048)*((KgA[KindA+(StateA?1:0)]*4)/GK[GainA]))>>12)+100-List[V0_POSI].Val)
 80158ce:	803b      	strh	r3, [r7, #0]
      for(j=0;j<11;j++){
 80158d0:	2300      	movs	r3, #0
 80158d2:	71bb      	strb	r3, [r7, #6]
 80158d4:	e06e      	b.n	80159b4 <Auto_Fit+0x7a8>
 80158d6:	bf00      	nop
 80158d8:	20003696 	.word	0x20003696
 80158dc:	20000558 	.word	0x20000558
 80158e0:	200076b2 	.word	0x200076b2
 80158e4:	2000368e 	.word	0x2000368e
 80158e8:	20003676 	.word	0x20003676
 80158ec:	2000053c 	.word	0x2000053c
 80158f0:	20000274 	.word	0x20000274
 80158f4:	20003682 	.word	0x20003682
 80158f8:	20003694 	.word	0x20003694
        WaveProcess();
 80158fc:	f7fe ffa4 	bl	8014848 <WaveProcess>
        if((k==0)&&(Edge < 60)&&(List[TIM_BASE].Val >5)){
 8015900:	797b      	ldrb	r3, [r7, #5]
 8015902:	2b00      	cmp	r3, #0
 8015904:	d114      	bne.n	8015930 <Auto_Fit+0x724>
 8015906:	4b38      	ldr	r3, [pc, #224]	; (80159e8 <Auto_Fit+0x7dc>)
 8015908:	681b      	ldr	r3, [r3, #0]
 801590a:	2b3b      	cmp	r3, #59	; 0x3b
 801590c:	dc10      	bgt.n	8015930 <Auto_Fit+0x724>
 801590e:	4b37      	ldr	r3, [pc, #220]	; (80159ec <Auto_Fit+0x7e0>)
 8015910:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8015914:	2b05      	cmp	r3, #5
 8015916:	dd0b      	ble.n	8015930 <Auto_Fit+0x724>
          Set_Base(5);                           // Ӳ������ɨ��ʱ����λ
 8015918:	2005      	movs	r0, #5
 801591a:	f7f6 fea7 	bl	800c66c <Set_Base>
          List[TIM_BASE].Val = 5;
 801591e:	4b33      	ldr	r3, [pc, #204]	; (80159ec <Auto_Fit+0x7e0>)
 8015920:	2205      	movs	r2, #5
 8015922:	879a      	strh	r2, [r3, #60]	; 0x3c
          WaveProcess();
 8015924:	f7fe ff90 	bl	8014848 <WaveProcess>
          Update_Proc_All();
 8015928:	f7fe fc16 	bl	8014158 <Update_Proc_All>
          k=1;
 801592c:	2301      	movs	r3, #1
 801592e:	717b      	strb	r3, [r7, #5]
        }
        if((Edge > 180)&&(List[TIM_BASE].Val > 2)){
 8015930:	4b2d      	ldr	r3, [pc, #180]	; (80159e8 <Auto_Fit+0x7dc>)
 8015932:	681b      	ldr	r3, [r3, #0]
 8015934:	2bb4      	cmp	r3, #180	; 0xb4
 8015936:	dd1b      	ble.n	8015970 <Auto_Fit+0x764>
 8015938:	4b2c      	ldr	r3, [pc, #176]	; (80159ec <Auto_Fit+0x7e0>)
 801593a:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 801593e:	2b02      	cmp	r3, #2
 8015940:	dd16      	ble.n	8015970 <Auto_Fit+0x764>
          List[TIM_BASE].Val--;
 8015942:	4b2a      	ldr	r3, [pc, #168]	; (80159ec <Auto_Fit+0x7e0>)
 8015944:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8015948:	b29b      	uxth	r3, r3
 801594a:	3b01      	subs	r3, #1
 801594c:	b29b      	uxth	r3, r3
 801594e:	b21a      	sxth	r2, r3
 8015950:	4b26      	ldr	r3, [pc, #152]	; (80159ec <Auto_Fit+0x7e0>)
 8015952:	879a      	strh	r2, [r3, #60]	; 0x3c
          Set_Base(List[TIM_BASE].Val);   // Ӳ������ɨ��ʱ����λ
 8015954:	4b25      	ldr	r3, [pc, #148]	; (80159ec <Auto_Fit+0x7e0>)
 8015956:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 801595a:	4618      	mov	r0, r3
 801595c:	f7f6 fe86 	bl	800c66c <Set_Base>
          WaveProcess();
 8015960:	f7fe ff72 	bl	8014848 <WaveProcess>
                 Update_Proc_All();
 8015964:	f7fe fbf8 	bl	8014158 <Update_Proc_All>
          HAL_Delay(50);
 8015968:	2032      	movs	r0, #50	; 0x32
 801596a:	f002 fba7 	bl	80180bc <HAL_Delay>
 801596e:	e01e      	b.n	80159ae <Auto_Fit+0x7a2>
        }
        else if((Edge < 80)&&(List[TIM_BASE].Val< 11)){
 8015970:	4b1d      	ldr	r3, [pc, #116]	; (80159e8 <Auto_Fit+0x7dc>)
 8015972:	681b      	ldr	r3, [r3, #0]
 8015974:	2b4f      	cmp	r3, #79	; 0x4f
 8015976:	dc1a      	bgt.n	80159ae <Auto_Fit+0x7a2>
 8015978:	4b1c      	ldr	r3, [pc, #112]	; (80159ec <Auto_Fit+0x7e0>)
 801597a:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 801597e:	2b0a      	cmp	r3, #10
 8015980:	dc15      	bgt.n	80159ae <Auto_Fit+0x7a2>
          List[TIM_BASE].Val++;
 8015982:	4b1a      	ldr	r3, [pc, #104]	; (80159ec <Auto_Fit+0x7e0>)
 8015984:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8015988:	b29b      	uxth	r3, r3
 801598a:	3301      	adds	r3, #1
 801598c:	b29b      	uxth	r3, r3
 801598e:	b21a      	sxth	r2, r3
 8015990:	4b16      	ldr	r3, [pc, #88]	; (80159ec <Auto_Fit+0x7e0>)
 8015992:	879a      	strh	r2, [r3, #60]	; 0x3c
          Set_Base(List[TIM_BASE].Val);   // Ӳ������ɨ��ʱ����λ
 8015994:	4b15      	ldr	r3, [pc, #84]	; (80159ec <Auto_Fit+0x7e0>)
 8015996:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 801599a:	4618      	mov	r0, r3
 801599c:	f7f6 fe66 	bl	800c66c <Set_Base>
          WaveProcess();
 80159a0:	f7fe ff52 	bl	8014848 <WaveProcess>
                 Update_Proc_All();
 80159a4:	f7fe fbd8 	bl	8014158 <Update_Proc_All>
          HAL_Delay(50);
 80159a8:	2032      	movs	r0, #50	; 0x32
 80159aa:	f002 fb87 	bl	80180bc <HAL_Delay>
      for(j=0;j<11;j++){
 80159ae:	79bb      	ldrb	r3, [r7, #6]
 80159b0:	3301      	adds	r3, #1
 80159b2:	71bb      	strb	r3, [r7, #6]
 80159b4:	79bb      	ldrb	r3, [r7, #6]
 80159b6:	2b0a      	cmp	r3, #10
 80159b8:	d9a0      	bls.n	80158fc <Auto_Fit+0x6f0>
        }
      }

      if(Tmp1 < 20){
 80159ba:	f9b7 3000 	ldrsh.w	r3, [r7]
 80159be:	2b13      	cmp	r3, #19
 80159c0:	dc0b      	bgt.n	80159da <Auto_Fit+0x7ce>
        List[TIM_BASE].Val=5; //50us
 80159c2:	4b0a      	ldr	r3, [pc, #40]	; (80159ec <Auto_Fit+0x7e0>)
 80159c4:	2205      	movs	r2, #5
 80159c6:	879a      	strh	r2, [r3, #60]	; 0x3c
        Set_Base(List[TIM_BASE].Val);   // Ӳ������ɨ��ʱ����λ
 80159c8:	4b08      	ldr	r3, [pc, #32]	; (80159ec <Auto_Fit+0x7e0>)
 80159ca:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 80159ce:	4618      	mov	r0, r3
 80159d0:	f7f6 fe4c 	bl	800c66c <Set_Base>
        HAL_Delay(50);
 80159d4:	2032      	movs	r0, #50	; 0x32
 80159d6:	f002 fb71 	bl	80180bc <HAL_Delay>
      }
       Update_Proc_All();
 80159da:	f7fe fbbd 	bl	8014158 <Update_Proc_All>
  }
}
 80159de:	bf00      	nop
 80159e0:	370c      	adds	r7, #12
 80159e2:	46bd      	mov	sp, r7
 80159e4:	bd90      	pop	{r4, r7, pc}
 80159e6:	bf00      	nop
 80159e8:	2000367c 	.word	0x2000367c
 80159ec:	20000274 	.word	0x20000274

080159f0 <Init_Touch>:

unsigned char val[2]; //input buffer

// initialize touch screen
void Init_Touch(void)
{
 80159f0:	b580      	push	{r7, lr}
 80159f2:	af00      	add	r7, sp, #0
	Touch_SPI();
 80159f4:	f000 f810 	bl	8015a18 <Touch_SPI>
	HAL_GPIO_WritePin( TpCs_GPIO_Port, TpCs_Pin, GPIO_PIN_RESET);
 80159f8:	2200      	movs	r2, #0
 80159fa:	2140      	movs	r1, #64	; 0x40
 80159fc:	4805      	ldr	r0, [pc, #20]	; (8015a14 <Init_Touch+0x24>)
 80159fe:	f003 ff3b 	bl	8019878 <HAL_GPIO_WritePin>
// not needed yet
	HAL_GPIO_WritePin( TpCs_GPIO_Port, TpCs_Pin, GPIO_PIN_SET);
 8015a02:	2201      	movs	r2, #1
 8015a04:	2140      	movs	r1, #64	; 0x40
 8015a06:	4803      	ldr	r0, [pc, #12]	; (8015a14 <Init_Touch+0x24>)
 8015a08:	f003 ff36 	bl	8019878 <HAL_GPIO_WritePin>
	LCD_SPI();
 8015a0c:	f000 f814 	bl	8015a38 <LCD_SPI>
}
 8015a10:	bf00      	nop
 8015a12:	bd80      	pop	{r7, pc}
 8015a14:	40020400 	.word	0x40020400

08015a18 <Touch_SPI>:

// set SPI for touch controller
void Touch_SPI(void)
{
 8015a18:	b580      	push	{r7, lr}
 8015a1a:	af00      	add	r7, sp, #0
//	HAL_SPI_DeInit(&hspi3);  switch on the fly
	hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8015a1c:	4b05      	ldr	r3, [pc, #20]	; (8015a34 <Touch_SPI+0x1c>)
 8015a1e:	2200      	movs	r2, #0
 8015a20:	60da      	str	r2, [r3, #12]
	hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16; //slow clock for touch controller
 8015a22:	4b04      	ldr	r3, [pc, #16]	; (8015a34 <Touch_SPI+0x1c>)
 8015a24:	2218      	movs	r2, #24
 8015a26:	61da      	str	r2, [r3, #28]
	HAL_SPI_Init(&hspi3);
 8015a28:	4802      	ldr	r0, [pc, #8]	; (8015a34 <Touch_SPI+0x1c>)
 8015a2a:	f006 f9a1 	bl	801bd70 <HAL_SPI_Init>
}
 8015a2e:	bf00      	nop
 8015a30:	bd80      	pop	{r7, pc}
 8015a32:	bf00      	nop
 8015a34:	200077f0 	.word	0x200077f0

08015a38 <LCD_SPI>:

// set SPI for LCD display
void LCD_SPI(void)
{
 8015a38:	b580      	push	{r7, lr}
 8015a3a:	af00      	add	r7, sp, #0
//	HAL_SPI_DeInit(&hspi3); switch on fly
	hspi3.Init.DataSize = SPI_DATASIZE_16BIT;
 8015a3c:	4b05      	ldr	r3, [pc, #20]	; (8015a54 <LCD_SPI+0x1c>)
 8015a3e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8015a42:	60da      	str	r2, [r3, #12]
	hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8015a44:	4b03      	ldr	r3, [pc, #12]	; (8015a54 <LCD_SPI+0x1c>)
 8015a46:	2210      	movs	r2, #16
 8015a48:	61da      	str	r2, [r3, #28]
	HAL_SPI_Init(&hspi3);
 8015a4a:	4802      	ldr	r0, [pc, #8]	; (8015a54 <LCD_SPI+0x1c>)
 8015a4c:	f006 f990 	bl	801bd70 <HAL_SPI_Init>
}
 8015a50:	bf00      	nop
 8015a52:	bd80      	pop	{r7, pc}
 8015a54:	200077f0 	.word	0x200077f0

08015a58 <read_2046>:

short read_2046( unsigned char cmd )  //internal value read
{
 8015a58:	b580      	push	{r7, lr}
 8015a5a:	b084      	sub	sp, #16
 8015a5c:	af00      	add	r7, sp, #0
 8015a5e:	4603      	mov	r3, r0
 8015a60:	71fb      	strb	r3, [r7, #7]
	short xyz;

	HAL_SPI_Transmit(&hspi3, &cmd, 1, 1);// timeout 1 ms
 8015a62:	1df9      	adds	r1, r7, #7
 8015a64:	2301      	movs	r3, #1
 8015a66:	2201      	movs	r2, #1
 8015a68:	480e      	ldr	r0, [pc, #56]	; (8015aa4 <read_2046+0x4c>)
 8015a6a:	f006 fa0a 	bl	801be82 <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspi3,val,2,1);   // read value
 8015a6e:	2301      	movs	r3, #1
 8015a70:	2202      	movs	r2, #2
 8015a72:	490d      	ldr	r1, [pc, #52]	; (8015aa8 <read_2046+0x50>)
 8015a74:	480b      	ldr	r0, [pc, #44]	; (8015aa4 <read_2046+0x4c>)
 8015a76:	f006 fb40 	bl	801c0fa <HAL_SPI_Receive>

	xyz = (val[0] <<8) +val[1];
 8015a7a:	4b0b      	ldr	r3, [pc, #44]	; (8015aa8 <read_2046+0x50>)
 8015a7c:	781b      	ldrb	r3, [r3, #0]
 8015a7e:	b29b      	uxth	r3, r3
 8015a80:	021b      	lsls	r3, r3, #8
 8015a82:	b29a      	uxth	r2, r3
 8015a84:	4b08      	ldr	r3, [pc, #32]	; (8015aa8 <read_2046+0x50>)
 8015a86:	785b      	ldrb	r3, [r3, #1]
 8015a88:	b29b      	uxth	r3, r3
 8015a8a:	4413      	add	r3, r2
 8015a8c:	b29b      	uxth	r3, r3
 8015a8e:	81fb      	strh	r3, [r7, #14]
	xyz = xyz >> 3;  //12 bit value
 8015a90:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8015a94:	10db      	asrs	r3, r3, #3
 8015a96:	81fb      	strh	r3, [r7, #14]
	return xyz;
 8015a98:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 8015a9c:	4618      	mov	r0, r3
 8015a9e:	3710      	adds	r7, #16
 8015aa0:	46bd      	mov	sp, r7
 8015aa2:	bd80      	pop	{r7, pc}
 8015aa4:	200077f0 	.word	0x200077f0
 8015aa8:	200076bc 	.word	0x200076bc

08015aac <Touch_Read>:

char Touch_Read(short *x, short*y)
{
 8015aac:	b580      	push	{r7, lr}
 8015aae:	b084      	sub	sp, #16
 8015ab0:	af00      	add	r7, sp, #0
 8015ab2:	6078      	str	r0, [r7, #4]
 8015ab4:	6039      	str	r1, [r7, #0]
	short z1,z2;
	short press;
	press =0;
 8015ab6:	2300      	movs	r3, #0
 8015ab8:	81fb      	strh	r3, [r7, #14]

	Touch_SPI();
 8015aba:	f7ff ffad 	bl	8015a18 <Touch_SPI>
	HAL_GPIO_WritePin( TpCs_GPIO_Port, TpCs_Pin, GPIO_PIN_RESET);
 8015abe:	2200      	movs	r2, #0
 8015ac0:	2140      	movs	r1, #64	; 0x40
 8015ac2:	481f      	ldr	r0, [pc, #124]	; (8015b40 <Touch_Read+0x94>)
 8015ac4:	f003 fed8 	bl	8019878 <HAL_GPIO_WritePin>

	z1 = read_2046(0xB0);  //read z1 cmd 8+3
 8015ac8:	20b0      	movs	r0, #176	; 0xb0
 8015aca:	f7ff ffc5 	bl	8015a58 <read_2046>
 8015ace:	4603      	mov	r3, r0
 8015ad0:	81bb      	strh	r3, [r7, #12]
	z2 = read_2046(0xC0);  //read z2 cmd 8+4
 8015ad2:	20c0      	movs	r0, #192	; 0xc0
 8015ad4:	f7ff ffc0 	bl	8015a58 <read_2046>
 8015ad8:	4603      	mov	r3, r0
 8015ada:	817b      	strh	r3, [r7, #10]
	press = z1 + 4095;
 8015adc:	89bb      	ldrh	r3, [r7, #12]
 8015ade:	f603 73ff 	addw	r3, r3, #4095	; 0xfff
 8015ae2:	b29b      	uxth	r3, r3
 8015ae4:	81fb      	strh	r3, [r7, #14]
	press -= z2;
 8015ae6:	89fa      	ldrh	r2, [r7, #14]
 8015ae8:	897b      	ldrh	r3, [r7, #10]
 8015aea:	1ad3      	subs	r3, r2, r3
 8015aec:	b29b      	uxth	r3, r3
 8015aee:	81fb      	strh	r3, [r7, #14]

	if( press >= 400 )
 8015af0:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8015af4:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 8015af8:	db0d      	blt.n	8015b16 <Touch_Read+0x6a>
	{
		*x = read_2046(0xD0);  //read x cmd 8+5
 8015afa:	20d0      	movs	r0, #208	; 0xd0
 8015afc:	f7ff ffac 	bl	8015a58 <read_2046>
 8015b00:	4603      	mov	r3, r0
 8015b02:	461a      	mov	r2, r3
 8015b04:	687b      	ldr	r3, [r7, #4]
 8015b06:	801a      	strh	r2, [r3, #0]
		*y = read_2046(0x90);  //read y cmd 8+1
 8015b08:	2090      	movs	r0, #144	; 0x90
 8015b0a:	f7ff ffa5 	bl	8015a58 <read_2046>
 8015b0e:	4603      	mov	r3, r0
 8015b10:	461a      	mov	r2, r3
 8015b12:	683b      	ldr	r3, [r7, #0]
 8015b14:	801a      	strh	r2, [r3, #0]
	}

	HAL_GPIO_WritePin( TpCs_GPIO_Port, TpCs_Pin, GPIO_PIN_SET);
 8015b16:	2201      	movs	r2, #1
 8015b18:	2140      	movs	r1, #64	; 0x40
 8015b1a:	4809      	ldr	r0, [pc, #36]	; (8015b40 <Touch_Read+0x94>)
 8015b1c:	f003 feac 	bl	8019878 <HAL_GPIO_WritePin>
	LCD_SPI();
 8015b20:	f7ff ff8a 	bl	8015a38 <LCD_SPI>

	return (press<400)?0:1;
 8015b24:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8015b28:	f240 128f 	movw	r2, #399	; 0x18f
 8015b2c:	4293      	cmp	r3, r2
 8015b2e:	bfcc      	ite	gt
 8015b30:	2301      	movgt	r3, #1
 8015b32:	2300      	movle	r3, #0
 8015b34:	b2db      	uxtb	r3, r3
}
 8015b36:	4618      	mov	r0, r3
 8015b38:	3710      	adds	r7, #16
 8015b3a:	46bd      	mov	sp, r7
 8015b3c:	bd80      	pop	{r7, pc}
 8015b3e:	bf00      	nop
 8015b40:	40020400 	.word	0x40020400

08015b44 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8015b44:	b580      	push	{r7, lr}
 8015b46:	b082      	sub	sp, #8
 8015b48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
  short i;
  char SAVE_FLAG = 0;
 8015b4a:	2300      	movs	r3, #0
 8015b4c:	717b      	strb	r3, [r7, #5]
  char Pop_Num = 0;
 8015b4e:	2300      	movs	r3, #0
 8015b50:	713b      	strb	r3, [r7, #4]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8015b52:	f002 fa41 	bl	8017fd8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8015b56:	f001 f85b 	bl	8016c10 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8015b5a:	f001 fbfd 	bl	8017358 <MX_GPIO_Init>
  MX_DMA_Init();
 8015b5e:	f001 fbc5 	bl	80172ec <MX_DMA_Init>
  MX_ADC1_Init();
 8015b62:	f001 f8c9 	bl	8016cf8 <MX_ADC1_Init>
  MX_ADC2_Init();
 8015b66:	f001 f919 	bl	8016d9c <MX_ADC2_Init>
  MX_DAC_Init();
 8015b6a:	f001 f969 	bl	8016e40 <MX_DAC_Init>
  MX_SPI2_Init();
 8015b6e:	f001 f9a5 	bl	8016ebc <MX_SPI2_Init>
  MX_SPI3_Init();
 8015b72:	f001 f9d9 	bl	8016f28 <MX_SPI3_Init>
  MX_TIM1_Init();
 8015b76:	f001 fa0f 	bl	8016f98 <MX_TIM1_Init>
  MX_TIM3_Init();
 8015b7a:	f001 fa83 	bl	8017084 <MX_TIM3_Init>
  MX_TIM5_Init();
 8015b7e:	f001 fae1 	bl	8017144 <MX_TIM5_Init>
  MX_USB_DEVICE_Init();
 8015b82:	f00f f9ff 	bl	8024f84 <MX_USB_DEVICE_Init>
  MX_TIM7_Init();
 8015b86:	f001 fb6b 	bl	8017260 <MX_TIM7_Init>
  MX_FATFS_Init();
 8015b8a:	f009 f9b9 	bl	801ef00 <MX_FATFS_Init>
  /* USER CODE BEGIN 2 */

  // initialize adc dma
  __HAL_DMA_DISABLE(&hdma_adc1);
 8015b8e:	4bb1      	ldr	r3, [pc, #708]	; (8015e54 <main+0x310>)
 8015b90:	681b      	ldr	r3, [r3, #0]
 8015b92:	681a      	ldr	r2, [r3, #0]
 8015b94:	4baf      	ldr	r3, [pc, #700]	; (8015e54 <main+0x310>)
 8015b96:	681b      	ldr	r3, [r3, #0]
 8015b98:	f022 0201 	bic.w	r2, r2, #1
 8015b9c:	601a      	str	r2, [r3, #0]
  dma_tmp = hdma_adc1.Instance->CR;
 8015b9e:	4bad      	ldr	r3, [pc, #692]	; (8015e54 <main+0x310>)
 8015ba0:	681b      	ldr	r3, [r3, #0]
 8015ba2:	681b      	ldr	r3, [r3, #0]
 8015ba4:	603b      	str	r3, [r7, #0]
  dma_tmp &= 0x0FFCFFFE;
 8015ba6:	683a      	ldr	r2, [r7, #0]
 8015ba8:	4bab      	ldr	r3, [pc, #684]	; (8015e58 <main+0x314>)
 8015baa:	4013      	ands	r3, r2
 8015bac:	603b      	str	r3, [r7, #0]
  dma_tmp |= 0x30000; //set very high pirority
 8015bae:	683b      	ldr	r3, [r7, #0]
 8015bb0:	f443 3340 	orr.w	r3, r3, #196608	; 0x30000
 8015bb4:	603b      	str	r3, [r7, #0]
  hdma_adc1.Instance->CR = dma_tmp;
 8015bb6:	4ba7      	ldr	r3, [pc, #668]	; (8015e54 <main+0x310>)
 8015bb8:	681b      	ldr	r3, [r3, #0]
 8015bba:	683a      	ldr	r2, [r7, #0]
 8015bbc:	601a      	str	r2, [r3, #0]

   hdma_adc1.Instance->M0AR = (unsigned)&Sampl[2];
 8015bbe:	4ba5      	ldr	r3, [pc, #660]	; (8015e54 <main+0x310>)
 8015bc0:	681b      	ldr	r3, [r3, #0]
 8015bc2:	4aa6      	ldr	r2, [pc, #664]	; (8015e5c <main+0x318>)
 8015bc4:	60da      	str	r2, [r3, #12]
   hdma_adc1.Instance->PAR = hadc1.Instance->DR;
 8015bc6:	4ba6      	ldr	r3, [pc, #664]	; (8015e60 <main+0x31c>)
 8015bc8:	681a      	ldr	r2, [r3, #0]
 8015bca:	4ba2      	ldr	r3, [pc, #648]	; (8015e54 <main+0x310>)
 8015bcc:	681b      	ldr	r3, [r3, #0]
 8015bce:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8015bd0:	609a      	str	r2, [r3, #8]
   __HAL_DMA_SET_COUNTER(&hdma_adc1, 0x1000);
 8015bd2:	4ba0      	ldr	r3, [pc, #640]	; (8015e54 <main+0x310>)
 8015bd4:	681b      	ldr	r3, [r3, #0]
 8015bd6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8015bda:	605a      	str	r2, [r3, #4]
   __HAL_DMA_ENABLE(&hdma_adc1);
 8015bdc:	4b9d      	ldr	r3, [pc, #628]	; (8015e54 <main+0x310>)
 8015bde:	681b      	ldr	r3, [r3, #0]
 8015be0:	681a      	ldr	r2, [r3, #0]
 8015be2:	4b9c      	ldr	r3, [pc, #624]	; (8015e54 <main+0x310>)
 8015be4:	681b      	ldr	r3, [r3, #0]
 8015be6:	f042 0201 	orr.w	r2, r2, #1
 8015bea:	601a      	str	r2, [r3, #0]

  // inittialize LCD and touch screen
  Init_LCD();
 8015bec:	f7fb fcf8 	bl	80115e0 <Init_LCD>
  Init_Touch();
 8015bf0:	f7ff fefe 	bl	80159f0 <Init_Touch>

  SetColor(BLK, WHT);
 8015bf4:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8015bf8:	2000      	movs	r0, #0
 8015bfa:	f7f8 f9e1 	bl	800dfc0 <SetColor>

  DispStr8x14(8, 90, PRN, "         Oscilloscope              ");
 8015bfe:	4b99      	ldr	r3, [pc, #612]	; (8015e64 <main+0x320>)
 8015c00:	2200      	movs	r2, #0
 8015c02:	215a      	movs	r1, #90	; 0x5a
 8015c04:	2008      	movs	r0, #8
 8015c06:	f7f8 f983 	bl	800df10 <DispStr8x14>
  DispStr8x14(8+22*8, 90, PRN, APP_VERSION);
 8015c0a:	4b97      	ldr	r3, [pc, #604]	; (8015e68 <main+0x324>)
 8015c0c:	2200      	movs	r2, #0
 8015c0e:	215a      	movs	r1, #90	; 0x5a
 8015c10:	20b8      	movs	r0, #184	; 0xb8
 8015c12:	f7f8 f97d 	bl	800df10 <DispStr8x14>
  DispStr8x14(8, 70, PRN, "        System Initializing...       ");
 8015c16:	4b95      	ldr	r3, [pc, #596]	; (8015e6c <main+0x328>)
 8015c18:	2200      	movs	r2, #0
 8015c1a:	2146      	movs	r1, #70	; 0x46
 8015c1c:	2008      	movs	r0, #8
 8015c1e:	f7f8 f977 	bl	800df10 <DispStr8x14>

  HAL_Delay(1000);
 8015c22:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8015c26:	f002 fa49 	bl	80180bc <HAL_Delay>

//=============================check callibration׼===========================
  Read_CalFlag();
 8015c2a:	f7fa ff41 	bl	8010ab0 <Read_CalFlag>

  if(Cal_Flag == 1)
 8015c2e:	4b90      	ldr	r3, [pc, #576]	; (8015e70 <main+0x32c>)
 8015c30:	781b      	ldrb	r3, [r3, #0]
 8015c32:	2b01      	cmp	r3, #1
 8015c34:	d10f      	bne.n	8015c56 <main+0x112>
  {
	  Cal_Flag = 0;
 8015c36:	4b8e      	ldr	r3, [pc, #568]	; (8015e70 <main+0x32c>)
 8015c38:	2200      	movs	r2, #0
 8015c3a:	701a      	strb	r2, [r3, #0]
	  SetColor(BLK, WHT);
 8015c3c:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8015c40:	2000      	movs	r0, #0
 8015c42:	f7f8 f9bd 	bl	800dfc0 <SetColor>
	  Zero_Align();                              //set zero
 8015c46:	f7fe fd09 	bl	801465c <Zero_Align>
	  Restore();                                 //restore list
 8015c4a:	f7fb f93b 	bl	8010ec4 <Restore>
	  Save_Parameter();                          //save list
 8015c4e:	f7fa ff57 	bl	8010b00 <Save_Parameter>
	  Save_Kpg();
 8015c52:	f7fb f87f 	bl	8010d54 <Save_Kpg>
  }
  Read_Kpg();
 8015c56:	f7fb f8f3 	bl	8010e40 <Read_Kpg>
  Read_Parameter();
 8015c5a:	f7fa ffed 	bl	8010c38 <Read_Parameter>
  File_Num();
 8015c5e:	f7f9 fc59 	bl	800f514 <File_Num>
  memcpy(Data, DEMO, 310);
 8015c62:	f44f 729b 	mov.w	r2, #310	; 0x136
 8015c66:	4983      	ldr	r1, [pc, #524]	; (8015e74 <main+0x330>)
 8015c68:	4883      	ldr	r0, [pc, #524]	; (8015e78 <main+0x334>)
 8015c6a:	f00f ff71 	bl	8025b50 <memcpy>

  LCD_ClrScrn(GRY);
 8015c6e:	f643 10e7 	movw	r0, #14823	; 0x39e7
 8015c72:	f7fb fdcb 	bl	801180c <LCD_ClrScrn>
  Update_Title();
 8015c76:	f7fb ff6b 	bl	8011b50 <Update_Title>

  List[SMPL_DPTH].Flg |= UPD;
 8015c7a:	4b80      	ldr	r3, [pc, #512]	; (8015e7c <main+0x338>)
 8015c7c:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 8015c80:	f043 0320 	orr.w	r3, r3, #32
 8015c84:	b2da      	uxtb	r2, r3
 8015c86:	4b7d      	ldr	r3, [pc, #500]	; (8015e7c <main+0x338>)
 8015c88:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e

  StdBy_Time = List[STANDBY].Val * MIN_UNIT;
 8015c8c:	4b7b      	ldr	r3, [pc, #492]	; (8015e7c <main+0x338>)
 8015c8e:	f9b3 314c 	ldrsh.w	r3, [r3, #332]	; 0x14c
 8015c92:	b29b      	uxth	r3, r3
 8015c94:	461a      	mov	r2, r3
 8015c96:	0112      	lsls	r2, r2, #4
 8015c98:	1ad3      	subs	r3, r2, r3
 8015c9a:	009b      	lsls	r3, r3, #2
 8015c9c:	b29b      	uxth	r3, r3
 8015c9e:	b21a      	sxth	r2, r3
 8015ca0:	4b77      	ldr	r3, [pc, #476]	; (8015e80 <main+0x33c>)
 8015ca2:	801a      	strh	r2, [r3, #0]

  // Start timer
  HAL_TIM_Base_Start_IT(&htim3);
 8015ca4:	4877      	ldr	r0, [pc, #476]	; (8015e84 <main+0x340>)
 8015ca6:	f006 ff79 	bl	801cb9c <HAL_TIM_Base_Start_IT>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	    if((List[STANDBY].Val != 0)&&(StdBy_Time == 0))
 8015caa:	4b74      	ldr	r3, [pc, #464]	; (8015e7c <main+0x338>)
 8015cac:	f9b3 314c 	ldrsh.w	r3, [r3, #332]	; 0x14c
 8015cb0:	2b00      	cmp	r3, #0
 8015cb2:	d007      	beq.n	8015cc4 <main+0x180>
 8015cb4:	4b72      	ldr	r3, [pc, #456]	; (8015e80 <main+0x33c>)
 8015cb6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8015cba:	2b00      	cmp	r3, #0
 8015cbc:	d102      	bne.n	8015cc4 <main+0x180>
	    {
	      StdBy_Flag = 1;
 8015cbe:	4b72      	ldr	r3, [pc, #456]	; (8015e88 <main+0x344>)
 8015cc0:	2201      	movs	r2, #1
 8015cc2:	701a      	strb	r2, [r3, #0]
	    }

	    Update_Detail();
 8015cc4:	f7fc feb0 	bl	8012a28 <Update_Detail>
	    Update_Blink();
 8015cc8:	f7fb ff96 	bl	8011bf8 <Update_Blink>
	    WaveProcess();
 8015ccc:	f7fe fdbc 	bl	8014848 <WaveProcess>
	    DrawWindow(WaveBuf, ParamTab);
 8015cd0:	496e      	ldr	r1, [pc, #440]	; (8015e8c <main+0x348>)
 8015cd2:	486f      	ldr	r0, [pc, #444]	; (8015e90 <main+0x34c>)
 8015cd4:	f7f7 fef8 	bl	800dac8 <DrawWindow>

	   if(TIM_BASE_Val!=0)
 8015cd8:	4b6e      	ldr	r3, [pc, #440]	; (8015e94 <main+0x350>)
 8015cda:	f9b3 3000 	ldrsh.w	r3, [r3]
 8015cde:	2b00      	cmp	r3, #0
 8015ce0:	d01c      	beq.n	8015d1c <main+0x1d8>
	    {
	      List[TIM_BASE].Val=TIM_BASE_Val;
 8015ce2:	4b6c      	ldr	r3, [pc, #432]	; (8015e94 <main+0x350>)
 8015ce4:	f9b3 2000 	ldrsh.w	r2, [r3]
 8015ce8:	4b64      	ldr	r3, [pc, #400]	; (8015e7c <main+0x338>)
 8015cea:	879a      	strh	r2, [r3, #60]	; 0x3c
	      List[TIM_BASE].Flg |= UPD;
 8015cec:	4b63      	ldr	r3, [pc, #396]	; (8015e7c <main+0x338>)
 8015cee:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8015cf2:	f043 0320 	orr.w	r3, r3, #32
 8015cf6:	b2da      	uxtb	r2, r3
 8015cf8:	4b60      	ldr	r3, [pc, #384]	; (8015e7c <main+0x338>)
 8015cfa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
	      TIM_BASE_Val=Current;
 8015cfe:	4b66      	ldr	r3, [pc, #408]	; (8015e98 <main+0x354>)
 8015d00:	f9b3 2000 	ldrsh.w	r2, [r3]
 8015d04:	4b63      	ldr	r3, [pc, #396]	; (8015e94 <main+0x350>)
 8015d06:	801a      	strh	r2, [r3, #0]
	      Update_Title();
 8015d08:	f7fb ff22 	bl	8011b50 <Update_Title>
	      Current=TIM_BASE_Val;
 8015d0c:	4b61      	ldr	r3, [pc, #388]	; (8015e94 <main+0x350>)
 8015d0e:	f9b3 2000 	ldrsh.w	r2, [r3]
 8015d12:	4b61      	ldr	r3, [pc, #388]	; (8015e98 <main+0x354>)
 8015d14:	801a      	strh	r2, [r3, #0]
	      TIM_BASE_Val=0;
 8015d16:	4b5f      	ldr	r3, [pc, #380]	; (8015e94 <main+0x350>)
 8015d18:	2200      	movs	r2, #0
 8015d1a:	801a      	strh	r2, [r3, #0]
	    }
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	    if(Key_Buffer != 0)
 8015d1c:	4b5f      	ldr	r3, [pc, #380]	; (8015e9c <main+0x358>)
 8015d1e:	781b      	ldrb	r3, [r3, #0]
 8015d20:	b2db      	uxtb	r3, r3
 8015d22:	2b00      	cmp	r3, #0
 8015d24:	d0c1      	beq.n	8015caa <main+0x166>
	    {
	      StdBy_Flag = 0;
 8015d26:	4b58      	ldr	r3, [pc, #352]	; (8015e88 <main+0x344>)
 8015d28:	2200      	movs	r2, #0
 8015d2a:	701a      	strb	r2, [r3, #0]
	      PopupCnt = 10;                  // �ް���ʱ�˵���ά����ʾ 10��
 8015d2c:	4b5c      	ldr	r3, [pc, #368]	; (8015ea0 <main+0x35c>)
 8015d2e:	220a      	movs	r2, #10
 8015d30:	801a      	strh	r2, [r3, #0]
	      List[MenuNow[Current]].Flg |= UPD;
 8015d32:	4b59      	ldr	r3, [pc, #356]	; (8015e98 <main+0x354>)
 8015d34:	f9b3 3000 	ldrsh.w	r3, [r3]
 8015d38:	461a      	mov	r2, r3
 8015d3a:	4b5a      	ldr	r3, [pc, #360]	; (8015ea4 <main+0x360>)
 8015d3c:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8015d40:	4a4e      	ldr	r2, [pc, #312]	; (8015e7c <main+0x338>)
 8015d42:	00db      	lsls	r3, r3, #3
 8015d44:	4413      	add	r3, r2
 8015d46:	799b      	ldrb	r3, [r3, #6]
 8015d48:	4a53      	ldr	r2, [pc, #332]	; (8015e98 <main+0x354>)
 8015d4a:	f9b2 2000 	ldrsh.w	r2, [r2]
 8015d4e:	4611      	mov	r1, r2
 8015d50:	4a54      	ldr	r2, [pc, #336]	; (8015ea4 <main+0x360>)
 8015d52:	f932 2011 	ldrsh.w	r2, [r2, r1, lsl #1]
 8015d56:	4610      	mov	r0, r2
 8015d58:	f043 0320 	orr.w	r3, r3, #32
 8015d5c:	b2d9      	uxtb	r1, r3
 8015d5e:	4a47      	ldr	r2, [pc, #284]	; (8015e7c <main+0x338>)
 8015d60:	00c3      	lsls	r3, r0, #3
 8015d62:	4413      	add	r3, r2
 8015d64:	460a      	mov	r2, r1
 8015d66:	719a      	strb	r2, [r3, #6]

	      switch (Key_Buffer)
 8015d68:	4b4c      	ldr	r3, [pc, #304]	; (8015e9c <main+0x358>)
 8015d6a:	781b      	ldrb	r3, [r3, #0]
 8015d6c:	b2db      	uxtb	r3, r3
 8015d6e:	3b01      	subs	r3, #1
 8015d70:	2b09      	cmp	r3, #9
 8015d72:	f200 8709 	bhi.w	8016b88 <main+0x1044>
 8015d76:	a201      	add	r2, pc, #4	; (adr r2, 8015d7c <main+0x238>)
 8015d78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015d7c:	08015ded 	.word	0x08015ded
 8015d80:	08016101 	.word	0x08016101
 8015d84:	08016259 	.word	0x08016259
 8015d88:	08016307 	.word	0x08016307
 8015d8c:	080163bd 	.word	0x080163bd
 8015d90:	08016763 	.word	0x08016763
 8015d94:	08016b89 	.word	0x08016b89
 8015d98:	08015dc7 	.word	0x08015dc7
 8015d9c:	08015da5 	.word	0x08015da5
 8015da0:	080160ed 	.word	0x080160ed
	      {
	     case KEYCODE_MEM:
	         i = Save_Bmp(List[SAVE_BMP].Val);
 8015da4:	4b35      	ldr	r3, [pc, #212]	; (8015e7c <main+0x338>)
 8015da6:	f9b3 30ec 	ldrsh.w	r3, [r3, #236]	; 0xec
 8015daa:	4618      	mov	r0, r3
 8015dac:	f7f9 febc 	bl	800fb28 <Save_Bmp>
 8015db0:	4603      	mov	r3, r0
 8015db2:	80fb      	strh	r3, [r7, #6]
	         DispFileInfo(i);
 8015db4:	88fb      	ldrh	r3, [r7, #6]
 8015db6:	b2db      	uxtb	r3, r3
 8015db8:	4618      	mov	r0, r3
 8015dba:	f7fe f957 	bl	801406c <DispFileInfo>
	         DispBMPInfo();
 8015dbe:	f7fe f985 	bl	80140cc <DispBMPInfo>
	        break;
 8015dc2:	f000 bee1 	b.w	8016b88 <main+0x1044>

	     case KEYCODE_ACT:
	       SAVE_FLAG=0;
 8015dc6:	2300      	movs	r3, #0
 8015dc8:	717b      	strb	r3, [r7, #5]
	       if(PopType & DAILOG_POP) Close_Pop();
 8015dca:	4b37      	ldr	r3, [pc, #220]	; (8015ea8 <main+0x364>)
 8015dcc:	781b      	ldrb	r3, [r3, #0]
 8015dce:	f003 0304 	and.w	r3, r3, #4
 8015dd2:	2b00      	cmp	r3, #0
 8015dd4:	d003      	beq.n	8015dde <main+0x29a>
 8015dd6:	f7f8 fe77 	bl	800eac8 <Close_Pop>
	       else {
	         Dialog_Pop("Save All ParamTab?");
	         Pop_Num = 1;
	       }
	       break;
 8015dda:	f000 bed5 	b.w	8016b88 <main+0x1044>
	         Dialog_Pop("Save All ParamTab?");
 8015dde:	4833      	ldr	r0, [pc, #204]	; (8015eac <main+0x368>)
 8015de0:	f7f8 fe9e 	bl	800eb20 <Dialog_Pop>
	         Pop_Num = 1;
 8015de4:	2301      	movs	r3, #1
 8015de6:	713b      	strb	r3, [r7, #4]
	       break;
 8015de8:	f000 bece 	b.w	8016b88 <main+0x1044>

	     case KEYCODE_PLAY:
	       if((Current == ST)&&(Cal_Flag==0))
 8015dec:	4b2a      	ldr	r3, [pc, #168]	; (8015e98 <main+0x354>)
 8015dee:	f9b3 3000 	ldrsh.w	r3, [r3]
 8015df2:	2b07      	cmp	r3, #7
 8015df4:	f040 8080 	bne.w	8015ef8 <main+0x3b4>
 8015df8:	4b1d      	ldr	r3, [pc, #116]	; (8015e70 <main+0x32c>)
 8015dfa:	781b      	ldrb	r3, [r3, #0]
 8015dfc:	2b00      	cmp	r3, #0
 8015dfe:	d17b      	bne.n	8015ef8 <main+0x3b4>
	       {
	         if(PopType & DAILOG_POP){
 8015e00:	4b29      	ldr	r3, [pc, #164]	; (8015ea8 <main+0x364>)
 8015e02:	781b      	ldrb	r3, [r3, #0]
 8015e04:	f003 0304 	and.w	r3, r3, #4
 8015e08:	2b00      	cmp	r3, #0
 8015e0a:	d00e      	beq.n	8015e2a <main+0x2e6>
	           if(Pop_Num == 1){
 8015e0c:	793b      	ldrb	r3, [r7, #4]
 8015e0e:	2b01      	cmp	r3, #1
 8015e10:	d105      	bne.n	8015e1e <main+0x2da>
	             Save_Parameter();
 8015e12:	f7fa fe75 	bl	8010b00 <Save_Parameter>
	             Close_Pop();
 8015e16:	f7f8 fe57 	bl	800eac8 <Close_Pop>
	           Zero_Align();
	           Update_Proc_All();
	           Close_Pop();
	           CalSave_Pop("Save Cal ParamTab?");
	         }
	         break;
 8015e1a:	f000 bea6 	b.w	8016b6a <main+0x1026>
	             Close_Pop();
 8015e1e:	f7f8 fe53 	bl	800eac8 <Close_Pop>
	             List_Pop();
 8015e22:	f7f8 fe67 	bl	800eaf4 <List_Pop>
	         break;
 8015e26:	f000 bea0 	b.w	8016b6a <main+0x1026>
	         else if((PopType & LIST_POP) && (MenuNow[ST]==RESTORE )) {
 8015e2a:	4b1f      	ldr	r3, [pc, #124]	; (8015ea8 <main+0x364>)
 8015e2c:	781b      	ldrb	r3, [r3, #0]
 8015e2e:	f003 0302 	and.w	r3, r3, #2
 8015e32:	2b00      	cmp	r3, #0
 8015e34:	d03c      	beq.n	8015eb0 <main+0x36c>
 8015e36:	4b1b      	ldr	r3, [pc, #108]	; (8015ea4 <main+0x360>)
 8015e38:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8015e3c:	2b28      	cmp	r3, #40	; 0x28
 8015e3e:	d137      	bne.n	8015eb0 <main+0x36c>
	           Restore_CalPar();
 8015e40:	f7fb f8aa 	bl	8010f98 <Restore_CalPar>
	           Dialog_Pop("Save All ParamTab?");
 8015e44:	4819      	ldr	r0, [pc, #100]	; (8015eac <main+0x368>)
 8015e46:	f7f8 fe6b 	bl	800eb20 <Dialog_Pop>
	           Cal_Flag = 1;
 8015e4a:	4b09      	ldr	r3, [pc, #36]	; (8015e70 <main+0x32c>)
 8015e4c:	2201      	movs	r2, #1
 8015e4e:	701a      	strb	r2, [r3, #0]
	         break;
 8015e50:	f000 be8b 	b.w	8016b6a <main+0x1026>
 8015e54:	2000793c 	.word	0x2000793c
 8015e58:	0ffcfffe 	.word	0x0ffcfffe
 8015e5c:	200036a0 	.word	0x200036a0
 8015e60:	200078a8 	.word	0x200078a8
 8015e64:	08000a48 	.word	0x08000a48
 8015e68:	2000055c 	.word	0x2000055c
 8015e6c:	08000a6c 	.word	0x08000a6c
 8015e70:	20000192 	.word	0x20000192
 8015e74:	08000bf4 	.word	0x08000bf4
 8015e78:	20000008 	.word	0x20000008
 8015e7c:	20000274 	.word	0x20000274
 8015e80:	20000798 	.word	0x20000798
 8015e84:	200077a8 	.word	0x200077a8
 8015e88:	2000079e 	.word	0x2000079e
 8015e8c:	20000140 	.word	0x20000140
 8015e90:	20001a38 	.word	0x20001a38
 8015e94:	20003640 	.word	0x20003640
 8015e98:	2000079a 	.word	0x2000079a
 8015e9c:	20000771 	.word	0x20000771
 8015ea0:	20000000 	.word	0x20000000
 8015ea4:	20000514 	.word	0x20000514
 8015ea8:	20000788 	.word	0x20000788
 8015eac:	08000a94 	.word	0x08000a94
	         else if((PopType & LIST_POP) && (MenuNow[ST]==AUTO_CAL )) {
 8015eb0:	4baf      	ldr	r3, [pc, #700]	; (8016170 <main+0x62c>)
 8015eb2:	781b      	ldrb	r3, [r3, #0]
 8015eb4:	f003 0302 	and.w	r3, r3, #2
 8015eb8:	2b00      	cmp	r3, #0
 8015eba:	f000 8656 	beq.w	8016b6a <main+0x1026>
 8015ebe:	4bad      	ldr	r3, [pc, #692]	; (8016174 <main+0x630>)
 8015ec0:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8015ec4:	2b27      	cmp	r3, #39	; 0x27
 8015ec6:	f040 8650 	bne.w	8016b6a <main+0x1026>
	           Close_Pop();
 8015eca:	f7f8 fdfd 	bl	800eac8 <Close_Pop>
	           Calibrate_Pop("Waiting for Calibration...");
 8015ece:	48aa      	ldr	r0, [pc, #680]	; (8016178 <main+0x634>)
 8015ed0:	f7f8 fe8c 	bl	800ebec <Calibrate_Pop>
	           Cal_Flag = 1;
 8015ed4:	4ba9      	ldr	r3, [pc, #676]	; (801617c <main+0x638>)
 8015ed6:	2201      	movs	r2, #1
 8015ed8:	701a      	strb	r2, [r3, #0]
	           DrawWindow(WaveBuf, ParamTab);
 8015eda:	49a9      	ldr	r1, [pc, #676]	; (8016180 <main+0x63c>)
 8015edc:	48a9      	ldr	r0, [pc, #676]	; (8016184 <main+0x640>)
 8015ede:	f7f7 fdf3 	bl	800dac8 <DrawWindow>
	           Zero_Align();
 8015ee2:	f7fe fbbb 	bl	801465c <Zero_Align>
	           Update_Proc_All();
 8015ee6:	f7fe f937 	bl	8014158 <Update_Proc_All>
	           Close_Pop();
 8015eea:	f7f8 fded 	bl	800eac8 <Close_Pop>
	           CalSave_Pop("Save Cal ParamTab?");
 8015eee:	48a6      	ldr	r0, [pc, #664]	; (8016188 <main+0x644>)
 8015ef0:	f7f8 feb2 	bl	800ec58 <CalSave_Pop>
	         break;
 8015ef4:	f000 be39 	b.w	8016b6a <main+0x1026>
	       }
	       else if((Current == ST)&&(Cal_Flag==1)){
 8015ef8:	4ba4      	ldr	r3, [pc, #656]	; (801618c <main+0x648>)
 8015efa:	f9b3 3000 	ldrsh.w	r3, [r3]
 8015efe:	2b07      	cmp	r3, #7
 8015f00:	d113      	bne.n	8015f2a <main+0x3e6>
 8015f02:	4b9e      	ldr	r3, [pc, #632]	; (801617c <main+0x638>)
 8015f04:	781b      	ldrb	r3, [r3, #0]
 8015f06:	2b01      	cmp	r3, #1
 8015f08:	d10f      	bne.n	8015f2a <main+0x3e6>
	         if(PopType & DAILOG_POP){
 8015f0a:	4b99      	ldr	r3, [pc, #612]	; (8016170 <main+0x62c>)
 8015f0c:	781b      	ldrb	r3, [r3, #0]
 8015f0e:	f003 0304 	and.w	r3, r3, #4
 8015f12:	2b00      	cmp	r3, #0
 8015f14:	f000 862b 	beq.w	8016b6e <main+0x102a>
	           Save_Kpg();
 8015f18:	f7fa ff1c 	bl	8010d54 <Save_Kpg>
	           Close_Pop();
 8015f1c:	f7f8 fdd4 	bl	800eac8 <Close_Pop>
	           Cal_Flag = 0;
 8015f20:	4b96      	ldr	r3, [pc, #600]	; (801617c <main+0x638>)
 8015f22:	2200      	movs	r2, #0
 8015f24:	701a      	strb	r2, [r3, #0]
	         }
	         break;
 8015f26:	f000 be22 	b.w	8016b6e <main+0x102a>
	       }

	       if ((Current == FN)&&(PopType & LIST_POP)){
 8015f2a:	4b98      	ldr	r3, [pc, #608]	; (801618c <main+0x648>)
 8015f2c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8015f30:	2b05      	cmp	r3, #5
 8015f32:	d177      	bne.n	8016024 <main+0x4e0>
 8015f34:	4b8e      	ldr	r3, [pc, #568]	; (8016170 <main+0x62c>)
 8015f36:	781b      	ldrb	r3, [r3, #0]
 8015f38:	f003 0302 	and.w	r3, r3, #2
 8015f3c:	2b00      	cmp	r3, #0
 8015f3e:	d071      	beq.n	8016024 <main+0x4e0>
	         i = 0;
 8015f40:	2300      	movs	r3, #0
 8015f42:	80fb      	strh	r3, [r7, #6]
	         {
	           if(SAVE_FLAG==KEYCODE_MEM)Close_Pop();
 8015f44:	797b      	ldrb	r3, [r7, #5]
 8015f46:	2b09      	cmp	r3, #9
 8015f48:	d101      	bne.n	8015f4e <main+0x40a>
 8015f4a:	f7f8 fdbd 	bl	800eac8 <Close_Pop>
	           if(MenuNow[FN] == SAVE_BMP) i = Save_Bmp(List[SAVE_BMP].Val);
 8015f4e:	4b89      	ldr	r3, [pc, #548]	; (8016174 <main+0x630>)
 8015f50:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8015f54:	2b1d      	cmp	r3, #29
 8015f56:	d107      	bne.n	8015f68 <main+0x424>
 8015f58:	4b8d      	ldr	r3, [pc, #564]	; (8016190 <main+0x64c>)
 8015f5a:	f9b3 30ec 	ldrsh.w	r3, [r3, #236]	; 0xec
 8015f5e:	4618      	mov	r0, r3
 8015f60:	f7f9 fde2 	bl	800fb28 <Save_Bmp>
 8015f64:	4603      	mov	r3, r0
 8015f66:	80fb      	strh	r3, [r7, #6]
	           if(MenuNow[FN] == SAVE_DAT) i = Save_Dat(List[SAVE_DAT].Val);
 8015f68:	4b82      	ldr	r3, [pc, #520]	; (8016174 <main+0x630>)
 8015f6a:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8015f6e:	2b1e      	cmp	r3, #30
 8015f70:	d107      	bne.n	8015f82 <main+0x43e>
 8015f72:	4b87      	ldr	r3, [pc, #540]	; (8016190 <main+0x64c>)
 8015f74:	f9b3 30f4 	ldrsh.w	r3, [r3, #244]	; 0xf4
 8015f78:	4618      	mov	r0, r3
 8015f7a:	f7f9 fc97 	bl	800f8ac <Save_Dat>
 8015f7e:	4603      	mov	r3, r0
 8015f80:	80fb      	strh	r3, [r7, #6]
	           if(MenuNow[FN] == SAVE_BUF) i = Save_Buf(List[SAVE_BUF].Val);
 8015f82:	4b7c      	ldr	r3, [pc, #496]	; (8016174 <main+0x630>)
 8015f84:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8015f88:	2b1f      	cmp	r3, #31
 8015f8a:	d107      	bne.n	8015f9c <main+0x458>
 8015f8c:	4b80      	ldr	r3, [pc, #512]	; (8016190 <main+0x64c>)
 8015f8e:	f9b3 30fc 	ldrsh.w	r3, [r3, #252]	; 0xfc
 8015f92:	4618      	mov	r0, r3
 8015f94:	f7f9 fbd0 	bl	800f738 <Save_Buf>
 8015f98:	4603      	mov	r3, r0
 8015f9a:	80fb      	strh	r3, [r7, #6]
	           if(MenuNow[FN] == SAVE_CSV) i = Save_Csv(List[SAVE_CSV].Val);
 8015f9c:	4b75      	ldr	r3, [pc, #468]	; (8016174 <main+0x630>)
 8015f9e:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8015fa2:	2b20      	cmp	r3, #32
 8015fa4:	d107      	bne.n	8015fb6 <main+0x472>
 8015fa6:	4b7a      	ldr	r3, [pc, #488]	; (8016190 <main+0x64c>)
 8015fa8:	f9b3 3104 	ldrsh.w	r3, [r3, #260]	; 0x104
 8015fac:	4618      	mov	r0, r3
 8015fae:	f7f9 ff1f 	bl	800fdf0 <Save_Csv>
 8015fb2:	4603      	mov	r3, r0
 8015fb4:	80fb      	strh	r3, [r7, #6]
	           if(MenuNow[FN] == SAVE_SVG) i = Save_Svg(List[SAVE_SVG].Val);
 8015fb6:	4b6f      	ldr	r3, [pc, #444]	; (8016174 <main+0x630>)
 8015fb8:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8015fbc:	2b21      	cmp	r3, #33	; 0x21
 8015fbe:	d107      	bne.n	8015fd0 <main+0x48c>
 8015fc0:	4b73      	ldr	r3, [pc, #460]	; (8016190 <main+0x64c>)
 8015fc2:	f9b3 310c 	ldrsh.w	r3, [r3, #268]	; 0x10c
 8015fc6:	4618      	mov	r0, r3
 8015fc8:	f7fa f936 	bl	8010238 <Save_Svg>
 8015fcc:	4603      	mov	r3, r0
 8015fce:	80fb      	strh	r3, [r7, #6]
	           if(MenuNow[FN] == LOAD_DAT) i = Load_Dat(List[LOAD_DAT].Val);
 8015fd0:	4b68      	ldr	r3, [pc, #416]	; (8016174 <main+0x630>)
 8015fd2:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8015fd6:	2b22      	cmp	r3, #34	; 0x22
 8015fd8:	d107      	bne.n	8015fea <main+0x4a6>
 8015fda:	4b6d      	ldr	r3, [pc, #436]	; (8016190 <main+0x64c>)
 8015fdc:	f9b3 3114 	ldrsh.w	r3, [r3, #276]	; 0x114
 8015fe0:	4618      	mov	r0, r3
 8015fe2:	f7f9 fced 	bl	800f9c0 <Load_Dat>
 8015fe6:	4603      	mov	r3, r0
 8015fe8:	80fb      	strh	r3, [r7, #6]
	           if(MenuNow[FN] == LOAD_BUF) i = Load_Buf(List[LOAD_BUF].Val);
 8015fea:	4b62      	ldr	r3, [pc, #392]	; (8016174 <main+0x630>)
 8015fec:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8015ff0:	2b23      	cmp	r3, #35	; 0x23
 8015ff2:	d107      	bne.n	8016004 <main+0x4c0>
 8015ff4:	4b66      	ldr	r3, [pc, #408]	; (8016190 <main+0x64c>)
 8015ff6:	f9b3 311c 	ldrsh.w	r3, [r3, #284]	; 0x11c
 8015ffa:	4618      	mov	r0, r3
 8015ffc:	f7f9 fab8 	bl	800f570 <Load_Buf>
 8016000:	4603      	mov	r3, r0
 8016002:	80fb      	strh	r3, [r7, #6]
	           SAVE_FLAG = 0;
 8016004:	2300      	movs	r3, #0
 8016006:	717b      	strb	r3, [r7, #5]
	         }
	         DispFileInfo(i);
 8016008:	88fb      	ldrh	r3, [r7, #6]
 801600a:	b2db      	uxtb	r3, r3
 801600c:	4618      	mov	r0, r3
 801600e:	f7fe f82d 	bl	801406c <DispFileInfo>

	         if(PopType & DAILOG_POP)  Close_Pop();
 8016012:	4b57      	ldr	r3, [pc, #348]	; (8016170 <main+0x62c>)
 8016014:	781b      	ldrb	r3, [r3, #0]
 8016016:	f003 0304 	and.w	r3, r3, #4
 801601a:	2b00      	cmp	r3, #0
 801601c:	d062      	beq.n	80160e4 <main+0x5a0>
 801601e:	f7f8 fd53 	bl	800eac8 <Close_Pop>
 8016022:	e05f      	b.n	80160e4 <main+0x5a0>

	       }
	       else if((PopType & DAILOG_POP ) &&(SAVE_FLAG!=KEYCODE_MEM)){
 8016024:	4b52      	ldr	r3, [pc, #328]	; (8016170 <main+0x62c>)
 8016026:	781b      	ldrb	r3, [r3, #0]
 8016028:	f003 0304 	and.w	r3, r3, #4
 801602c:	2b00      	cmp	r3, #0
 801602e:	d00b      	beq.n	8016048 <main+0x504>
 8016030:	797b      	ldrb	r3, [r7, #5]
 8016032:	2b09      	cmp	r3, #9
 8016034:	d008      	beq.n	8016048 <main+0x504>
	         Save_Parameter();
 8016036:	f7fa fd63 	bl	8010b00 <Save_Parameter>
	         Cal_Flag = 0;
 801603a:	4b50      	ldr	r3, [pc, #320]	; (801617c <main+0x638>)
 801603c:	2200      	movs	r2, #0
 801603e:	701a      	strb	r2, [r3, #0]
	         Close_Pop();
 8016040:	f7f8 fd42 	bl	800eac8 <Close_Pop>
	         break;
 8016044:	f000 bda0 	b.w	8016b88 <main+0x1044>
	       }
	       else {
	          if(Status & STOP){
 8016048:	4b52      	ldr	r3, [pc, #328]	; (8016194 <main+0x650>)
 801604a:	f9b3 3000 	ldrsh.w	r3, [r3]
 801604e:	b29b      	uxth	r3, r3
 8016050:	f003 0301 	and.w	r3, r3, #1
 8016054:	2b00      	cmp	r3, #0
 8016056:	d02e      	beq.n	80160b6 <main+0x572>
	            if(Status & LOADM )Status &= ~LOADM;
 8016058:	4b4e      	ldr	r3, [pc, #312]	; (8016194 <main+0x650>)
 801605a:	f9b3 3000 	ldrsh.w	r3, [r3]
 801605e:	b29b      	uxth	r3, r3
 8016060:	f003 0310 	and.w	r3, r3, #16
 8016064:	2b00      	cmp	r3, #0
 8016066:	d007      	beq.n	8016078 <main+0x534>
 8016068:	4b4a      	ldr	r3, [pc, #296]	; (8016194 <main+0x650>)
 801606a:	f9b3 3000 	ldrsh.w	r3, [r3]
 801606e:	f023 0310 	bic.w	r3, r3, #16
 8016072:	b21a      	sxth	r2, r3
 8016074:	4b47      	ldr	r3, [pc, #284]	; (8016194 <main+0x650>)
 8016076:	801a      	strh	r2, [r3, #0]
	            Status &= ~STOP;     // ��������״̬
 8016078:	4b46      	ldr	r3, [pc, #280]	; (8016194 <main+0x650>)
 801607a:	f9b3 3000 	ldrsh.w	r3, [r3]
 801607e:	f023 0301 	bic.w	r3, r3, #1
 8016082:	b21a      	sxth	r2, r3
 8016084:	4b43      	ldr	r3, [pc, #268]	; (8016194 <main+0x650>)
 8016086:	801a      	strh	r2, [r3, #0]
	            if(List[SYNCMODE].Val==SINGL) ADC_Start();
 8016088:	4b41      	ldr	r3, [pc, #260]	; (8016190 <main+0x64c>)
 801608a:	f9b3 306c 	ldrsh.w	r3, [r3, #108]	; 0x6c
 801608e:	2b04      	cmp	r3, #4
 8016090:	d101      	bne.n	8016096 <main+0x552>
 8016092:	f7f6 fb83 	bl	800c79c <ADC_Start>
	            if(List[SYNCMODE].Val==NORM)  ADC_Start();
 8016096:	4b3e      	ldr	r3, [pc, #248]	; (8016190 <main+0x64c>)
 8016098:	f9b3 306c 	ldrsh.w	r3, [r3, #108]	; 0x6c
 801609c:	2b03      	cmp	r3, #3
 801609e:	d101      	bne.n	80160a4 <main+0x560>
 80160a0:	f7f6 fb7c 	bl	800c79c <ADC_Start>
	            Norm_Clr = 1;
 80160a4:	4b3c      	ldr	r3, [pc, #240]	; (8016198 <main+0x654>)
 80160a6:	2201      	movs	r2, #1
 80160a8:	701a      	strb	r2, [r3, #0]
	            SNGL_Kflag = 1;
 80160aa:	4b3c      	ldr	r3, [pc, #240]	; (801619c <main+0x658>)
 80160ac:	2201      	movs	r2, #1
 80160ae:	701a      	strb	r2, [r3, #0]
	            Update_Proc_All();
 80160b0:	f7fe f852 	bl	8014158 <Update_Proc_All>
 80160b4:	e016      	b.n	80160e4 <main+0x5a0>

	            if(*(short*)F_Sector==0xaa55)Restore_Scene();

	          }
	          else {
	            Status |=  STOP;     // ������ͣ״̬
 80160b6:	4b37      	ldr	r3, [pc, #220]	; (8016194 <main+0x650>)
 80160b8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80160bc:	f043 0301 	orr.w	r3, r3, #1
 80160c0:	b21a      	sxth	r2, r3
 80160c2:	4b34      	ldr	r3, [pc, #208]	; (8016194 <main+0x650>)
 80160c4:	801a      	strh	r2, [r3, #0]
	            Ch1_Posi = List[V0_POSI].Val;
 80160c6:	4b32      	ldr	r3, [pc, #200]	; (8016190 <main+0x64c>)
 80160c8:	f9b3 201c 	ldrsh.w	r2, [r3, #28]
 80160cc:	4b34      	ldr	r3, [pc, #208]	; (80161a0 <main+0x65c>)
 80160ce:	801a      	strh	r2, [r3, #0]
	            Ch2_Posi = List[EXT_POSI].Val;
 80160d0:	4b2f      	ldr	r3, [pc, #188]	; (8016190 <main+0x64c>)
 80160d2:	f9b3 20dc 	ldrsh.w	r2, [r3, #220]	; 0xdc
 80160d6:	4b33      	ldr	r3, [pc, #204]	; (80161a4 <main+0x660>)
 80160d8:	801a      	strh	r2, [r3, #0]
	            Tri_Posi = List[THRESHOLD].Val;
 80160da:	4b2d      	ldr	r3, [pc, #180]	; (8016190 <main+0x64c>)
 80160dc:	f9b3 2084 	ldrsh.w	r2, [r3, #132]	; 0x84
 80160e0:	4b31      	ldr	r3, [pc, #196]	; (80161a8 <main+0x664>)
 80160e2:	801a      	strh	r2, [r3, #0]
	            Save_Bmp(List[SAVE_BMP].Val);
	            List[SAVE_BMP].Val++;
	          #endif
	          }
	        }
	        DispStatus();            // ��ʾ����״̬
 80160e4:	f7fd fd2c 	bl	8013b40 <DispStatus>
 	       break;
 80160e8:	f000 bd4e 	b.w	8016b88 <main+0x1044>

	      case KEYCODE_D_MANU:
	        if(List[FITTRIGG].Val)
 80160ec:	4b28      	ldr	r3, [pc, #160]	; (8016190 <main+0x64c>)
 80160ee:	f9b3 307c 	ldrsh.w	r3, [r3, #124]	; 0x7c
 80160f2:	2b00      	cmp	r3, #0
 80160f4:	f000 853d 	beq.w	8016b72 <main+0x102e>
	        {
	          Auto_Fit();
 80160f8:	f7ff f888 	bl	801520c <Auto_Fit>
	        }
	        break;
 80160fc:	f000 bd39 	b.w	8016b72 <main+0x102e>

	      case KEYCODE_MANU:
	        if(!(PopType & LIST_POP)){
 8016100:	4b1b      	ldr	r3, [pc, #108]	; (8016170 <main+0x62c>)
 8016102:	781b      	ldrb	r3, [r3, #0]
 8016104:	f003 0302 	and.w	r3, r3, #2
 8016108:	2b00      	cmp	r3, #0
 801610a:	d111      	bne.n	8016130 <main+0x5ec>
	            if(Cal_Flag){
 801610c:	4b1b      	ldr	r3, [pc, #108]	; (801617c <main+0x638>)
 801610e:	781b      	ldrb	r3, [r3, #0]
 8016110:	2b00      	cmp	r3, #0
 8016112:	d006      	beq.n	8016122 <main+0x5de>
	              Cal_Flag = 0;
 8016114:	4b19      	ldr	r3, [pc, #100]	; (801617c <main+0x638>)
 8016116:	2200      	movs	r2, #0
 8016118:	701a      	strb	r2, [r3, #0]
	              Close_Pop();
 801611a:	f7f8 fcd5 	bl	800eac8 <Close_Pop>
	          // ------------ �ָ���ʾ��Ϣ��ʾ���Ҷ�ԭ����ʾ��Ϣ ------------
	          if(MenuNow[Current] == SMPL_DPTH) List[SMPL_DPTH].Flg  |= UPD; // ������ȸ�����ʾ
	          else if(Current == FN)           List[MenuNow[FN]].Flg |= UPD; // ָ�����ļ���д�������ʾ
	          else                             List[MenuNow[ME]].Flg |= UPD; // ָ���Ĳ��β����������ʾ
	        }
	        break;
 801611e:	f000 bd33 	b.w	8016b88 <main+0x1044>
	              Cal_Flag = 0;
 8016122:	4b16      	ldr	r3, [pc, #88]	; (801617c <main+0x638>)
 8016124:	2200      	movs	r2, #0
 8016126:	701a      	strb	r2, [r3, #0]
	              List_Pop(); // �˵����ر�ʱ, �򿪲˵���
 8016128:	f7f8 fce4 	bl	800eaf4 <List_Pop>
	        break;
 801612c:	f000 bd2c 	b.w	8016b88 <main+0x1044>
	          Close_Pop();                // �˵����Ѵ�ʱ, �رղ˵���
 8016130:	f7f8 fcca 	bl	800eac8 <Close_Pop>
	          if(Current == XN)      List[T1_POSI   ].Flg |= UPD;
 8016134:	4b15      	ldr	r3, [pc, #84]	; (801618c <main+0x648>)
 8016136:	f9b3 3000 	ldrsh.w	r3, [r3]
 801613a:	2b01      	cmp	r3, #1
 801613c:	d109      	bne.n	8016152 <main+0x60e>
 801613e:	4b14      	ldr	r3, [pc, #80]	; (8016190 <main+0x64c>)
 8016140:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8016144:	f043 0320 	orr.w	r3, r3, #32
 8016148:	b2da      	uxtb	r2, r3
 801614a:	4b11      	ldr	r3, [pc, #68]	; (8016190 <main+0x64c>)
 801614c:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
 8016150:	e03f      	b.n	80161d2 <main+0x68e>
	          else if(Current == YN) List[V1_POSI   ].Flg |= UPD;
 8016152:	4b0e      	ldr	r3, [pc, #56]	; (801618c <main+0x648>)
 8016154:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016158:	2b00      	cmp	r3, #0
 801615a:	d127      	bne.n	80161ac <main+0x668>
 801615c:	4b0c      	ldr	r3, [pc, #48]	; (8016190 <main+0x64c>)
 801615e:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8016162:	f043 0320 	orr.w	r3, r3, #32
 8016166:	b2da      	uxtb	r2, r3
 8016168:	4b09      	ldr	r3, [pc, #36]	; (8016190 <main+0x64c>)
 801616a:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
 801616e:	e030      	b.n	80161d2 <main+0x68e>
 8016170:	20000788 	.word	0x20000788
 8016174:	20000514 	.word	0x20000514
 8016178:	08000aa8 	.word	0x08000aa8
 801617c:	20000192 	.word	0x20000192
 8016180:	20000140 	.word	0x20000140
 8016184:	20001a38 	.word	0x20001a38
 8016188:	08000ac4 	.word	0x08000ac4
 801618c:	2000079a 	.word	0x2000079a
 8016190:	20000274 	.word	0x20000274
 8016194:	2000079c 	.word	0x2000079c
 8016198:	200007a3 	.word	0x200007a3
 801619c:	20000538 	.word	0x20000538
 80161a0:	200076b0 	.word	0x200076b0
 80161a4:	200076a8 	.word	0x200076a8
 80161a8:	2000368c 	.word	0x2000368c
	          else                   List[MenuNow[SN]].Flg |= UPD;
 80161ac:	4b7d      	ldr	r3, [pc, #500]	; (80163a4 <main+0x860>)
 80161ae:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 80161b2:	4a7d      	ldr	r2, [pc, #500]	; (80163a8 <main+0x864>)
 80161b4:	00db      	lsls	r3, r3, #3
 80161b6:	4413      	add	r3, r2
 80161b8:	799b      	ldrb	r3, [r3, #6]
 80161ba:	4a7a      	ldr	r2, [pc, #488]	; (80163a4 <main+0x860>)
 80161bc:	f9b2 200c 	ldrsh.w	r2, [r2, #12]
 80161c0:	4610      	mov	r0, r2
 80161c2:	f043 0320 	orr.w	r3, r3, #32
 80161c6:	b2d9      	uxtb	r1, r3
 80161c8:	4a77      	ldr	r2, [pc, #476]	; (80163a8 <main+0x864>)
 80161ca:	00c3      	lsls	r3, r0, #3
 80161cc:	4413      	add	r3, r2
 80161ce:	460a      	mov	r2, r1
 80161d0:	719a      	strb	r2, [r3, #6]
	          if(MenuNow[Current] == SMPL_DPTH) List[SMPL_DPTH].Flg  |= UPD; // ������ȸ�����ʾ
 80161d2:	4b76      	ldr	r3, [pc, #472]	; (80163ac <main+0x868>)
 80161d4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80161d8:	461a      	mov	r2, r3
 80161da:	4b72      	ldr	r3, [pc, #456]	; (80163a4 <main+0x860>)
 80161dc:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 80161e0:	2b09      	cmp	r3, #9
 80161e2:	d10a      	bne.n	80161fa <main+0x6b6>
 80161e4:	4b70      	ldr	r3, [pc, #448]	; (80163a8 <main+0x864>)
 80161e6:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 80161ea:	f043 0320 	orr.w	r3, r3, #32
 80161ee:	b2da      	uxtb	r2, r3
 80161f0:	4b6d      	ldr	r3, [pc, #436]	; (80163a8 <main+0x864>)
 80161f2:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
	        break;
 80161f6:	f000 bcc7 	b.w	8016b88 <main+0x1044>
	          else if(Current == FN)           List[MenuNow[FN]].Flg |= UPD; // ָ�����ļ���д�������ʾ
 80161fa:	4b6c      	ldr	r3, [pc, #432]	; (80163ac <main+0x868>)
 80161fc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016200:	2b05      	cmp	r3, #5
 8016202:	d114      	bne.n	801622e <main+0x6ea>
 8016204:	4b67      	ldr	r3, [pc, #412]	; (80163a4 <main+0x860>)
 8016206:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 801620a:	4a67      	ldr	r2, [pc, #412]	; (80163a8 <main+0x864>)
 801620c:	00db      	lsls	r3, r3, #3
 801620e:	4413      	add	r3, r2
 8016210:	799b      	ldrb	r3, [r3, #6]
 8016212:	4a64      	ldr	r2, [pc, #400]	; (80163a4 <main+0x860>)
 8016214:	f9b2 200a 	ldrsh.w	r2, [r2, #10]
 8016218:	4610      	mov	r0, r2
 801621a:	f043 0320 	orr.w	r3, r3, #32
 801621e:	b2d9      	uxtb	r1, r3
 8016220:	4a61      	ldr	r2, [pc, #388]	; (80163a8 <main+0x864>)
 8016222:	00c3      	lsls	r3, r0, #3
 8016224:	4413      	add	r3, r2
 8016226:	460a      	mov	r2, r1
 8016228:	719a      	strb	r2, [r3, #6]
	        break;
 801622a:	f000 bcad 	b.w	8016b88 <main+0x1044>
	          else                             List[MenuNow[ME]].Flg |= UPD; // ָ���Ĳ��β����������ʾ
 801622e:	4b5d      	ldr	r3, [pc, #372]	; (80163a4 <main+0x860>)
 8016230:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8016234:	4a5c      	ldr	r2, [pc, #368]	; (80163a8 <main+0x864>)
 8016236:	00db      	lsls	r3, r3, #3
 8016238:	4413      	add	r3, r2
 801623a:	799b      	ldrb	r3, [r3, #6]
 801623c:	4a59      	ldr	r2, [pc, #356]	; (80163a4 <main+0x860>)
 801623e:	f9b2 2006 	ldrsh.w	r2, [r2, #6]
 8016242:	4610      	mov	r0, r2
 8016244:	f043 0320 	orr.w	r3, r3, #32
 8016248:	b2d9      	uxtb	r1, r3
 801624a:	4a57      	ldr	r2, [pc, #348]	; (80163a8 <main+0x864>)
 801624c:	00c3      	lsls	r3, r0, #3
 801624e:	4413      	add	r3, r2
 8016250:	460a      	mov	r2, r1
 8016252:	719a      	strb	r2, [r3, #6]
	        break;
 8016254:	f000 bc98 	b.w	8016b88 <main+0x1044>

	      case KEYCODE_UP:
	        if (PopType & LIST_POP){
 8016258:	4b55      	ldr	r3, [pc, #340]	; (80163b0 <main+0x86c>)
 801625a:	781b      	ldrb	r3, [r3, #0]
 801625c:	f003 0302 	and.w	r3, r3, #2
 8016260:	2b00      	cmp	r3, #0
 8016262:	d03b      	beq.n	80162dc <main+0x798>
	          if(MenuNow[Current] > MU_BEGN[Current]) MenuNow[Current]--;
 8016264:	4b51      	ldr	r3, [pc, #324]	; (80163ac <main+0x868>)
 8016266:	f9b3 3000 	ldrsh.w	r3, [r3]
 801626a:	461a      	mov	r2, r3
 801626c:	4b4d      	ldr	r3, [pc, #308]	; (80163a4 <main+0x860>)
 801626e:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8016272:	461a      	mov	r2, r3
 8016274:	4b4d      	ldr	r3, [pc, #308]	; (80163ac <main+0x868>)
 8016276:	f9b3 3000 	ldrsh.w	r3, [r3]
 801627a:	4619      	mov	r1, r3
 801627c:	4b4d      	ldr	r3, [pc, #308]	; (80163b4 <main+0x870>)
 801627e:	5c5b      	ldrb	r3, [r3, r1]
 8016280:	429a      	cmp	r2, r3
 8016282:	dd0e      	ble.n	80162a2 <main+0x75e>
 8016284:	4b49      	ldr	r3, [pc, #292]	; (80163ac <main+0x868>)
 8016286:	f9b3 3000 	ldrsh.w	r3, [r3]
 801628a:	4a46      	ldr	r2, [pc, #280]	; (80163a4 <main+0x860>)
 801628c:	f932 2013 	ldrsh.w	r2, [r2, r3, lsl #1]
 8016290:	b292      	uxth	r2, r2
 8016292:	3a01      	subs	r2, #1
 8016294:	b292      	uxth	r2, r2
 8016296:	b211      	sxth	r1, r2
 8016298:	4a42      	ldr	r2, [pc, #264]	; (80163a4 <main+0x860>)
 801629a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	          else                  MenuNow[Current] += M_ITEMS[Current]-1;
	        } else {
	          if (Current > 0) Current--;
	          else             Current = ST;
	        }
	        break;
 801629e:	f000 bc73 	b.w	8016b88 <main+0x1044>
	          else                  MenuNow[Current] += M_ITEMS[Current]-1;
 80162a2:	4b42      	ldr	r3, [pc, #264]	; (80163ac <main+0x868>)
 80162a4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80162a8:	461a      	mov	r2, r3
 80162aa:	4b3e      	ldr	r3, [pc, #248]	; (80163a4 <main+0x860>)
 80162ac:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 80162b0:	b29a      	uxth	r2, r3
 80162b2:	4b3e      	ldr	r3, [pc, #248]	; (80163ac <main+0x868>)
 80162b4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80162b8:	4619      	mov	r1, r3
 80162ba:	4b3f      	ldr	r3, [pc, #252]	; (80163b8 <main+0x874>)
 80162bc:	5c5b      	ldrb	r3, [r3, r1]
 80162be:	b29b      	uxth	r3, r3
 80162c0:	4413      	add	r3, r2
 80162c2:	b29b      	uxth	r3, r3
 80162c4:	3b01      	subs	r3, #1
 80162c6:	b299      	uxth	r1, r3
 80162c8:	4b38      	ldr	r3, [pc, #224]	; (80163ac <main+0x868>)
 80162ca:	f9b3 3000 	ldrsh.w	r3, [r3]
 80162ce:	461a      	mov	r2, r3
 80162d0:	b209      	sxth	r1, r1
 80162d2:	4b34      	ldr	r3, [pc, #208]	; (80163a4 <main+0x860>)
 80162d4:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
	        break;
 80162d8:	f000 bc56 	b.w	8016b88 <main+0x1044>
	          if (Current > 0) Current--;
 80162dc:	4b33      	ldr	r3, [pc, #204]	; (80163ac <main+0x868>)
 80162de:	f9b3 3000 	ldrsh.w	r3, [r3]
 80162e2:	2b00      	cmp	r3, #0
 80162e4:	dd0a      	ble.n	80162fc <main+0x7b8>
 80162e6:	4b31      	ldr	r3, [pc, #196]	; (80163ac <main+0x868>)
 80162e8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80162ec:	b29b      	uxth	r3, r3
 80162ee:	3b01      	subs	r3, #1
 80162f0:	b29b      	uxth	r3, r3
 80162f2:	b21a      	sxth	r2, r3
 80162f4:	4b2d      	ldr	r3, [pc, #180]	; (80163ac <main+0x868>)
 80162f6:	801a      	strh	r2, [r3, #0]
	        break;
 80162f8:	f000 bc46 	b.w	8016b88 <main+0x1044>
	          else             Current = ST;
 80162fc:	4b2b      	ldr	r3, [pc, #172]	; (80163ac <main+0x868>)
 80162fe:	2207      	movs	r2, #7
 8016300:	801a      	strh	r2, [r3, #0]
	        break;
 8016302:	f000 bc41 	b.w	8016b88 <main+0x1044>

	     case KEYCODE_DOWN:
	        if(PopType & LIST_POP){
 8016306:	4b2a      	ldr	r3, [pc, #168]	; (80163b0 <main+0x86c>)
 8016308:	781b      	ldrb	r3, [r3, #0]
 801630a:	f003 0302 	and.w	r3, r3, #2
 801630e:	2b00      	cmp	r3, #0
 8016310:	d034      	beq.n	801637c <main+0x838>
	          MenuNow[Current]++;
 8016312:	4b26      	ldr	r3, [pc, #152]	; (80163ac <main+0x868>)
 8016314:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016318:	4a22      	ldr	r2, [pc, #136]	; (80163a4 <main+0x860>)
 801631a:	f932 2013 	ldrsh.w	r2, [r2, r3, lsl #1]
 801631e:	b292      	uxth	r2, r2
 8016320:	3201      	adds	r2, #1
 8016322:	b292      	uxth	r2, r2
 8016324:	b211      	sxth	r1, r2
 8016326:	4a1f      	ldr	r2, [pc, #124]	; (80163a4 <main+0x860>)
 8016328:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	          if(MenuNow[Current] >=(MU_BEGN[Current]+M_ITEMS[Current])){
 801632c:	4b1f      	ldr	r3, [pc, #124]	; (80163ac <main+0x868>)
 801632e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016332:	461a      	mov	r2, r3
 8016334:	4b1b      	ldr	r3, [pc, #108]	; (80163a4 <main+0x860>)
 8016336:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 801633a:	461a      	mov	r2, r3
 801633c:	4b1b      	ldr	r3, [pc, #108]	; (80163ac <main+0x868>)
 801633e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016342:	4619      	mov	r1, r3
 8016344:	4b1b      	ldr	r3, [pc, #108]	; (80163b4 <main+0x870>)
 8016346:	5c5b      	ldrb	r3, [r3, r1]
 8016348:	4619      	mov	r1, r3
 801634a:	4b18      	ldr	r3, [pc, #96]	; (80163ac <main+0x868>)
 801634c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016350:	4618      	mov	r0, r3
 8016352:	4b19      	ldr	r3, [pc, #100]	; (80163b8 <main+0x874>)
 8016354:	5c1b      	ldrb	r3, [r3, r0]
 8016356:	440b      	add	r3, r1
 8016358:	429a      	cmp	r2, r3
 801635a:	f2c0 840c 	blt.w	8016b76 <main+0x1032>
	            MenuNow[Current] = MU_BEGN[Current];
 801635e:	4b13      	ldr	r3, [pc, #76]	; (80163ac <main+0x868>)
 8016360:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016364:	461a      	mov	r2, r3
 8016366:	4b13      	ldr	r3, [pc, #76]	; (80163b4 <main+0x870>)
 8016368:	5c99      	ldrb	r1, [r3, r2]
 801636a:	4b10      	ldr	r3, [pc, #64]	; (80163ac <main+0x868>)
 801636c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016370:	461a      	mov	r2, r3
 8016372:	b209      	sxth	r1, r1
 8016374:	4b0b      	ldr	r3, [pc, #44]	; (80163a4 <main+0x860>)
 8016376:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
	          }
	        } else {
	          if (Current < 7) Current++;
	          else             Current = YN;
	        }
	        break;
 801637a:	e3fc      	b.n	8016b76 <main+0x1032>
	          if (Current < 7) Current++;
 801637c:	4b0b      	ldr	r3, [pc, #44]	; (80163ac <main+0x868>)
 801637e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016382:	2b06      	cmp	r3, #6
 8016384:	dc09      	bgt.n	801639a <main+0x856>
 8016386:	4b09      	ldr	r3, [pc, #36]	; (80163ac <main+0x868>)
 8016388:	f9b3 3000 	ldrsh.w	r3, [r3]
 801638c:	b29b      	uxth	r3, r3
 801638e:	3301      	adds	r3, #1
 8016390:	b29b      	uxth	r3, r3
 8016392:	b21a      	sxth	r2, r3
 8016394:	4b05      	ldr	r3, [pc, #20]	; (80163ac <main+0x868>)
 8016396:	801a      	strh	r2, [r3, #0]
	        break;
 8016398:	e3ed      	b.n	8016b76 <main+0x1032>
	          else             Current = YN;
 801639a:	4b04      	ldr	r3, [pc, #16]	; (80163ac <main+0x868>)
 801639c:	2200      	movs	r2, #0
 801639e:	801a      	strh	r2, [r3, #0]
	        break;
 80163a0:	e3e9      	b.n	8016b76 <main+0x1032>
 80163a2:	bf00      	nop
 80163a4:	20000514 	.word	0x20000514
 80163a8:	20000274 	.word	0x20000274
 80163ac:	2000079a 	.word	0x2000079a
 80163b0:	20000788 	.word	0x20000788
 80163b4:	08001fdc 	.word	0x08001fdc
 80163b8:	08001fe4 	.word	0x08001fe4

	      case KEYCODE_LEFT:
	        if((Current==ST)&& !(PopType & LIST_POP))break;
 80163bc:	4bb9      	ldr	r3, [pc, #740]	; (80166a4 <main+0xb60>)
 80163be:	f9b3 3000 	ldrsh.w	r3, [r3]
 80163c2:	2b07      	cmp	r3, #7
 80163c4:	d106      	bne.n	80163d4 <main+0x890>
 80163c6:	4bb8      	ldr	r3, [pc, #736]	; (80166a8 <main+0xb64>)
 80163c8:	781b      	ldrb	r3, [r3, #0]
 80163ca:	f003 0302 	and.w	r3, r3, #2
 80163ce:	2b00      	cmp	r3, #0
 80163d0:	f000 83d3 	beq.w	8016b7a <main+0x1036>
	        List[MenuNow[Current]].Flg |= UPD;  // ˢ�±��ǰԭ��ʾ��Ŀ����
 80163d4:	4bb3      	ldr	r3, [pc, #716]	; (80166a4 <main+0xb60>)
 80163d6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80163da:	461a      	mov	r2, r3
 80163dc:	4bb3      	ldr	r3, [pc, #716]	; (80166ac <main+0xb68>)
 80163de:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 80163e2:	4ab3      	ldr	r2, [pc, #716]	; (80166b0 <main+0xb6c>)
 80163e4:	00db      	lsls	r3, r3, #3
 80163e6:	4413      	add	r3, r2
 80163e8:	799b      	ldrb	r3, [r3, #6]
 80163ea:	4aae      	ldr	r2, [pc, #696]	; (80166a4 <main+0xb60>)
 80163ec:	f9b2 2000 	ldrsh.w	r2, [r2]
 80163f0:	4611      	mov	r1, r2
 80163f2:	4aae      	ldr	r2, [pc, #696]	; (80166ac <main+0xb68>)
 80163f4:	f932 2011 	ldrsh.w	r2, [r2, r1, lsl #1]
 80163f8:	4610      	mov	r0, r2
 80163fa:	f043 0320 	orr.w	r3, r3, #32
 80163fe:	b2d9      	uxtb	r1, r3
 8016400:	4aab      	ldr	r2, [pc, #684]	; (80166b0 <main+0xb6c>)
 8016402:	00c3      	lsls	r3, r0, #3
 8016404:	4413      	add	r3, r2
 8016406:	460a      	mov	r2, r1
 8016408:	719a      	strb	r2, [r3, #6]
	        if(List[MenuNow[Current]].Val <=MIN[MenuNow[Current]]){
 801640a:	4ba6      	ldr	r3, [pc, #664]	; (80166a4 <main+0xb60>)
 801640c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016410:	461a      	mov	r2, r3
 8016412:	4ba6      	ldr	r3, [pc, #664]	; (80166ac <main+0xb68>)
 8016414:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8016418:	4aa5      	ldr	r2, [pc, #660]	; (80166b0 <main+0xb6c>)
 801641a:	00db      	lsls	r3, r3, #3
 801641c:	4413      	add	r3, r2
 801641e:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
 8016422:	4ba0      	ldr	r3, [pc, #640]	; (80166a4 <main+0xb60>)
 8016424:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016428:	4619      	mov	r1, r3
 801642a:	4ba0      	ldr	r3, [pc, #640]	; (80166ac <main+0xb68>)
 801642c:	f933 3011 	ldrsh.w	r3, [r3, r1, lsl #1]
 8016430:	4619      	mov	r1, r3
 8016432:	4ba0      	ldr	r3, [pc, #640]	; (80166b4 <main+0xb70>)
 8016434:	f933 3011 	ldrsh.w	r3, [r3, r1, lsl #1]
 8016438:	429a      	cmp	r2, r3
 801643a:	dc73      	bgt.n	8016524 <main+0x9e0>
	          if((MenuNow[Current] == COUPLING)||(MenuNow[Current] == YN_TYPE )||
 801643c:	4b99      	ldr	r3, [pc, #612]	; (80166a4 <main+0xb60>)
 801643e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016442:	461a      	mov	r2, r3
 8016444:	4b99      	ldr	r3, [pc, #612]	; (80166ac <main+0xb68>)
 8016446:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 801644a:	2b01      	cmp	r3, #1
 801644c:	d051      	beq.n	80164f2 <main+0x9ae>
 801644e:	4b95      	ldr	r3, [pc, #596]	; (80166a4 <main+0xb60>)
 8016450:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016454:	461a      	mov	r2, r3
 8016456:	4b95      	ldr	r3, [pc, #596]	; (80166ac <main+0xb68>)
 8016458:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 801645c:	2b06      	cmp	r3, #6
 801645e:	d048      	beq.n	80164f2 <main+0x9ae>
	            (MenuNow[Current] == XN_TYPE )||(MenuNow[Current] == EXT_HIDE)||
 8016460:	4b90      	ldr	r3, [pc, #576]	; (80166a4 <main+0xb60>)
 8016462:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016466:	461a      	mov	r2, r3
 8016468:	4b90      	ldr	r3, [pc, #576]	; (80166ac <main+0xb68>)
 801646a:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
	          if((MenuNow[Current] == COUPLING)||(MenuNow[Current] == YN_TYPE )||
 801646e:	2b0c      	cmp	r3, #12
 8016470:	d03f      	beq.n	80164f2 <main+0x9ae>
	            (MenuNow[Current] == XN_TYPE )||(MenuNow[Current] == EXT_HIDE)||
 8016472:	4b8c      	ldr	r3, [pc, #560]	; (80166a4 <main+0xb60>)
 8016474:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016478:	461a      	mov	r2, r3
 801647a:	4b8c      	ldr	r3, [pc, #560]	; (80166ac <main+0xb68>)
 801647c:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8016480:	2b1c      	cmp	r3, #28
 8016482:	d036      	beq.n	80164f2 <main+0x9ae>
	            ( MenuNow[Current] == FITTRIGG)||(MenuNow[Current] == TR_MODE )||
 8016484:	4b87      	ldr	r3, [pc, #540]	; (80166a4 <main+0xb60>)
 8016486:	f9b3 3000 	ldrsh.w	r3, [r3]
 801648a:	461a      	mov	r2, r3
 801648c:	4b87      	ldr	r3, [pc, #540]	; (80166ac <main+0xb68>)
 801648e:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
	            (MenuNow[Current] == XN_TYPE )||(MenuNow[Current] == EXT_HIDE)||
 8016492:	2b0f      	cmp	r3, #15
 8016494:	d02d      	beq.n	80164f2 <main+0x9ae>
	            ( MenuNow[Current] == FITTRIGG)||(MenuNow[Current] == TR_MODE )||
 8016496:	4b83      	ldr	r3, [pc, #524]	; (80166a4 <main+0xb60>)
 8016498:	f9b3 3000 	ldrsh.w	r3, [r3]
 801649c:	461a      	mov	r2, r3
 801649e:	4b83      	ldr	r3, [pc, #524]	; (80166ac <main+0xb68>)
 80164a0:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 80164a4:	2b0e      	cmp	r3, #14
 80164a6:	d024      	beq.n	80164f2 <main+0x9ae>
	            ( MenuNow[Current] == SYNCMODE)||(MenuNow[Current] == EXT_REFN)||
 80164a8:	4b7e      	ldr	r3, [pc, #504]	; (80166a4 <main+0xb60>)
 80164aa:	f9b3 3000 	ldrsh.w	r3, [r3]
 80164ae:	461a      	mov	r2, r3
 80164b0:	4b7e      	ldr	r3, [pc, #504]	; (80166ac <main+0xb68>)
 80164b2:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
	            ( MenuNow[Current] == FITTRIGG)||(MenuNow[Current] == TR_MODE )||
 80164b6:	2b0d      	cmp	r3, #13
 80164b8:	d01b      	beq.n	80164f2 <main+0x9ae>
	            ( MenuNow[Current] == SYNCMODE)||(MenuNow[Current] == EXT_REFN)||
 80164ba:	4b7a      	ldr	r3, [pc, #488]	; (80166a4 <main+0xb60>)
 80164bc:	f9b3 3000 	ldrsh.w	r3, [r3]
 80164c0:	461a      	mov	r2, r3
 80164c2:	4b7a      	ldr	r3, [pc, #488]	; (80166ac <main+0xb68>)
 80164c4:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 80164c8:	2b1a      	cmp	r3, #26
 80164ca:	d012      	beq.n	80164f2 <main+0x9ae>
	            (MenuNow[Current] == PROBEATT)||(MenuNow[Current] == TPYE_OUT))
 80164cc:	4b75      	ldr	r3, [pc, #468]	; (80166a4 <main+0xb60>)
 80164ce:	f9b3 3000 	ldrsh.w	r3, [r3]
 80164d2:	461a      	mov	r2, r3
 80164d4:	4b75      	ldr	r3, [pc, #468]	; (80166ac <main+0xb68>)
 80164d6:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
	            ( MenuNow[Current] == SYNCMODE)||(MenuNow[Current] == EXT_REFN)||
 80164da:	2b02      	cmp	r3, #2
 80164dc:	d009      	beq.n	80164f2 <main+0x9ae>
	            (MenuNow[Current] == PROBEATT)||(MenuNow[Current] == TPYE_OUT))
 80164de:	4b71      	ldr	r3, [pc, #452]	; (80166a4 <main+0xb60>)
 80164e0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80164e4:	461a      	mov	r2, r3
 80164e6:	4b71      	ldr	r3, [pc, #452]	; (80166ac <main+0xb68>)
 80164e8:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 80164ec:	2b24      	cmp	r3, #36	; 0x24
 80164ee:	f040 8129 	bne.w	8016744 <main+0xc00>
	            List[MenuNow[Current]].Val =MAX[MenuNow[Current]] ;
 80164f2:	4b6c      	ldr	r3, [pc, #432]	; (80166a4 <main+0xb60>)
 80164f4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80164f8:	461a      	mov	r2, r3
 80164fa:	4b6c      	ldr	r3, [pc, #432]	; (80166ac <main+0xb68>)
 80164fc:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8016500:	461a      	mov	r2, r3
 8016502:	4b68      	ldr	r3, [pc, #416]	; (80166a4 <main+0xb60>)
 8016504:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016508:	4619      	mov	r1, r3
 801650a:	4b68      	ldr	r3, [pc, #416]	; (80166ac <main+0xb68>)
 801650c:	f933 3011 	ldrsh.w	r3, [r3, r1, lsl #1]
 8016510:	4618      	mov	r0, r3
 8016512:	4b69      	ldr	r3, [pc, #420]	; (80166b8 <main+0xb74>)
 8016514:	f933 1012 	ldrsh.w	r1, [r3, r2, lsl #1]
 8016518:	4a65      	ldr	r2, [pc, #404]	; (80166b0 <main+0xb6c>)
 801651a:	00c3      	lsls	r3, r0, #3
 801651c:	4413      	add	r3, r2
 801651e:	460a      	mov	r2, r1
 8016520:	809a      	strh	r2, [r3, #4]
 8016522:	e10f      	b.n	8016744 <main+0xc00>
	        } else {
	          if((MenuNow[Current] == VIEWPOSI)&&((List[MenuNow[Current]].Val) >=150 ))
 8016524:	4b5f      	ldr	r3, [pc, #380]	; (80166a4 <main+0xb60>)
 8016526:	f9b3 3000 	ldrsh.w	r3, [r3]
 801652a:	461a      	mov	r2, r3
 801652c:	4b5f      	ldr	r3, [pc, #380]	; (80166ac <main+0xb68>)
 801652e:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8016532:	2b08      	cmp	r3, #8
 8016534:	d12a      	bne.n	801658c <main+0xa48>
 8016536:	4b5b      	ldr	r3, [pc, #364]	; (80166a4 <main+0xb60>)
 8016538:	f9b3 3000 	ldrsh.w	r3, [r3]
 801653c:	461a      	mov	r2, r3
 801653e:	4b5b      	ldr	r3, [pc, #364]	; (80166ac <main+0xb68>)
 8016540:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8016544:	4a5a      	ldr	r2, [pc, #360]	; (80166b0 <main+0xb6c>)
 8016546:	00db      	lsls	r3, r3, #3
 8016548:	4413      	add	r3, r2
 801654a:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801654e:	2b95      	cmp	r3, #149	; 0x95
 8016550:	dd1c      	ble.n	801658c <main+0xa48>
	            List[MenuNow[Current]].Val-=25;
 8016552:	4b54      	ldr	r3, [pc, #336]	; (80166a4 <main+0xb60>)
 8016554:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016558:	461a      	mov	r2, r3
 801655a:	4b54      	ldr	r3, [pc, #336]	; (80166ac <main+0xb68>)
 801655c:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8016560:	4a53      	ldr	r2, [pc, #332]	; (80166b0 <main+0xb6c>)
 8016562:	00db      	lsls	r3, r3, #3
 8016564:	4413      	add	r3, r2
 8016566:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801656a:	b29b      	uxth	r3, r3
 801656c:	3b19      	subs	r3, #25
 801656e:	b29a      	uxth	r2, r3
 8016570:	4b4c      	ldr	r3, [pc, #304]	; (80166a4 <main+0xb60>)
 8016572:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016576:	4619      	mov	r1, r3
 8016578:	4b4c      	ldr	r3, [pc, #304]	; (80166ac <main+0xb68>)
 801657a:	f933 3011 	ldrsh.w	r3, [r3, r1, lsl #1]
 801657e:	b211      	sxth	r1, r2
 8016580:	4a4b      	ldr	r2, [pc, #300]	; (80166b0 <main+0xb6c>)
 8016582:	00db      	lsls	r3, r3, #3
 8016584:	4413      	add	r3, r2
 8016586:	460a      	mov	r2, r1
 8016588:	809a      	strh	r2, [r3, #4]
 801658a:	e0ad      	b.n	80166e8 <main+0xba4>
	          else{
	          //============5.04�޸������߳�����������========
	            if(MenuNow[Current] == THRESHOLD){
 801658c:	4b45      	ldr	r3, [pc, #276]	; (80166a4 <main+0xb60>)
 801658e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016592:	461a      	mov	r2, r3
 8016594:	4b45      	ldr	r3, [pc, #276]	; (80166ac <main+0xb68>)
 8016596:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 801659a:	2b10      	cmp	r3, #16
 801659c:	d121      	bne.n	80165e2 <main+0xa9e>
	              if((List[V0_POSI].Val + List[THRESHOLD].Val) > 2)  //����������
 801659e:	4b44      	ldr	r3, [pc, #272]	; (80166b0 <main+0xb6c>)
 80165a0:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 80165a4:	461a      	mov	r2, r3
 80165a6:	4b42      	ldr	r3, [pc, #264]	; (80166b0 <main+0xb6c>)
 80165a8:	f9b3 3084 	ldrsh.w	r3, [r3, #132]	; 0x84
 80165ac:	4413      	add	r3, r2
 80165ae:	2b02      	cmp	r3, #2
 80165b0:	f340 809a 	ble.w	80166e8 <main+0xba4>
	                List[MenuNow[Current]].Val--;
 80165b4:	4b3b      	ldr	r3, [pc, #236]	; (80166a4 <main+0xb60>)
 80165b6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80165ba:	461a      	mov	r2, r3
 80165bc:	4b3b      	ldr	r3, [pc, #236]	; (80166ac <main+0xb68>)
 80165be:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 80165c2:	461a      	mov	r2, r3
 80165c4:	493a      	ldr	r1, [pc, #232]	; (80166b0 <main+0xb6c>)
 80165c6:	00d3      	lsls	r3, r2, #3
 80165c8:	440b      	add	r3, r1
 80165ca:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80165ce:	b29b      	uxth	r3, r3
 80165d0:	3b01      	subs	r3, #1
 80165d2:	b29b      	uxth	r3, r3
 80165d4:	b218      	sxth	r0, r3
 80165d6:	4936      	ldr	r1, [pc, #216]	; (80166b0 <main+0xb6c>)
 80165d8:	00d3      	lsls	r3, r2, #3
 80165da:	440b      	add	r3, r1
 80165dc:	4602      	mov	r2, r0
 80165de:	809a      	strh	r2, [r3, #4]
 80165e0:	e082      	b.n	80166e8 <main+0xba4>
	            }
	            else if(MenuNow[Current] == V0_POSI){
 80165e2:	4b30      	ldr	r3, [pc, #192]	; (80166a4 <main+0xb60>)
 80165e4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80165e8:	461a      	mov	r2, r3
 80165ea:	4b30      	ldr	r3, [pc, #192]	; (80166ac <main+0xb68>)
 80165ec:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 80165f0:	2b03      	cmp	r3, #3
 80165f2:	d134      	bne.n	801665e <main+0xb1a>
	              if((List[V0_POSI].Val + List[THRESHOLD].Val) <2){
 80165f4:	4b2e      	ldr	r3, [pc, #184]	; (80166b0 <main+0xb6c>)
 80165f6:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 80165fa:	461a      	mov	r2, r3
 80165fc:	4b2c      	ldr	r3, [pc, #176]	; (80166b0 <main+0xb6c>)
 80165fe:	f9b3 3084 	ldrsh.w	r3, [r3, #132]	; 0x84
 8016602:	4413      	add	r3, r2
 8016604:	2b01      	cmp	r3, #1
 8016606:	dc13      	bgt.n	8016630 <main+0xaec>
	                List[V0_POSI].Val--;
 8016608:	4b29      	ldr	r3, [pc, #164]	; (80166b0 <main+0xb6c>)
 801660a:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 801660e:	b29b      	uxth	r3, r3
 8016610:	3b01      	subs	r3, #1
 8016612:	b29b      	uxth	r3, r3
 8016614:	b21a      	sxth	r2, r3
 8016616:	4b26      	ldr	r3, [pc, #152]	; (80166b0 <main+0xb6c>)
 8016618:	839a      	strh	r2, [r3, #28]
	                List[THRESHOLD].Val++;
 801661a:	4b25      	ldr	r3, [pc, #148]	; (80166b0 <main+0xb6c>)
 801661c:	f9b3 3084 	ldrsh.w	r3, [r3, #132]	; 0x84
 8016620:	b29b      	uxth	r3, r3
 8016622:	3301      	adds	r3, #1
 8016624:	b29b      	uxth	r3, r3
 8016626:	b21a      	sxth	r2, r3
 8016628:	4b21      	ldr	r3, [pc, #132]	; (80166b0 <main+0xb6c>)
 801662a:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84
 801662e:	e05b      	b.n	80166e8 <main+0xba4>
	              }else List[MenuNow[Current]].Val--;
 8016630:	4b1c      	ldr	r3, [pc, #112]	; (80166a4 <main+0xb60>)
 8016632:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016636:	461a      	mov	r2, r3
 8016638:	4b1c      	ldr	r3, [pc, #112]	; (80166ac <main+0xb68>)
 801663a:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 801663e:	461a      	mov	r2, r3
 8016640:	491b      	ldr	r1, [pc, #108]	; (80166b0 <main+0xb6c>)
 8016642:	00d3      	lsls	r3, r2, #3
 8016644:	440b      	add	r3, r1
 8016646:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801664a:	b29b      	uxth	r3, r3
 801664c:	3b01      	subs	r3, #1
 801664e:	b29b      	uxth	r3, r3
 8016650:	b218      	sxth	r0, r3
 8016652:	4917      	ldr	r1, [pc, #92]	; (80166b0 <main+0xb6c>)
 8016654:	00d3      	lsls	r3, r2, #3
 8016656:	440b      	add	r3, r1
 8016658:	4602      	mov	r2, r0
 801665a:	809a      	strh	r2, [r3, #4]
 801665c:	e044      	b.n	80166e8 <main+0xba4>
	            }
	            else if((MenuNow[Current] ==V1_POSI) && (List[V1_POSI].Val <= List[V2_POSI].Val))
 801665e:	4b11      	ldr	r3, [pc, #68]	; (80166a4 <main+0xb60>)
 8016660:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016664:	461a      	mov	r2, r3
 8016666:	4b11      	ldr	r3, [pc, #68]	; (80166ac <main+0xb68>)
 8016668:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 801666c:	2b04      	cmp	r3, #4
 801666e:	d125      	bne.n	80166bc <main+0xb78>
 8016670:	4b0f      	ldr	r3, [pc, #60]	; (80166b0 <main+0xb6c>)
 8016672:	f9b3 2024 	ldrsh.w	r2, [r3, #36]	; 0x24
 8016676:	4b0e      	ldr	r3, [pc, #56]	; (80166b0 <main+0xb6c>)
 8016678:	f9b3 302c 	ldrsh.w	r3, [r3, #44]	; 0x2c
 801667c:	429a      	cmp	r2, r3
 801667e:	dc1d      	bgt.n	80166bc <main+0xb78>
	            List[MenuNow[Current]].Val=List[V2_POSI].Val;
 8016680:	4b08      	ldr	r3, [pc, #32]	; (80166a4 <main+0xb60>)
 8016682:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016686:	461a      	mov	r2, r3
 8016688:	4b08      	ldr	r3, [pc, #32]	; (80166ac <main+0xb68>)
 801668a:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 801668e:	4618      	mov	r0, r3
 8016690:	4b07      	ldr	r3, [pc, #28]	; (80166b0 <main+0xb6c>)
 8016692:	f9b3 102c 	ldrsh.w	r1, [r3, #44]	; 0x2c
 8016696:	4a06      	ldr	r2, [pc, #24]	; (80166b0 <main+0xb6c>)
 8016698:	00c3      	lsls	r3, r0, #3
 801669a:	4413      	add	r3, r2
 801669c:	460a      	mov	r2, r1
 801669e:	809a      	strh	r2, [r3, #4]
 80166a0:	e022      	b.n	80166e8 <main+0xba4>
 80166a2:	bf00      	nop
 80166a4:	2000079a 	.word	0x2000079a
 80166a8:	20000788 	.word	0x20000788
 80166ac:	20000514 	.word	0x20000514
 80166b0:	20000274 	.word	0x20000274
 80166b4:	080022b0 	.word	0x080022b0
 80166b8:	08002254 	.word	0x08002254
	            else List[MenuNow[Current]].Val--;
 80166bc:	4bb7      	ldr	r3, [pc, #732]	; (801699c <main+0xe58>)
 80166be:	f9b3 3000 	ldrsh.w	r3, [r3]
 80166c2:	461a      	mov	r2, r3
 80166c4:	4bb6      	ldr	r3, [pc, #728]	; (80169a0 <main+0xe5c>)
 80166c6:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 80166ca:	461a      	mov	r2, r3
 80166cc:	49b5      	ldr	r1, [pc, #724]	; (80169a4 <main+0xe60>)
 80166ce:	00d3      	lsls	r3, r2, #3
 80166d0:	440b      	add	r3, r1
 80166d2:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80166d6:	b29b      	uxth	r3, r3
 80166d8:	3b01      	subs	r3, #1
 80166da:	b29b      	uxth	r3, r3
 80166dc:	b218      	sxth	r0, r3
 80166de:	49b1      	ldr	r1, [pc, #708]	; (80169a4 <main+0xe60>)
 80166e0:	00d3      	lsls	r3, r2, #3
 80166e2:	440b      	add	r3, r1
 80166e4:	4602      	mov	r2, r0
 80166e6:	809a      	strh	r2, [r3, #4]
	          }
	          //==============================================
	            if(MenuNow[Current] == SMPL_DPTH){
 80166e8:	4bac      	ldr	r3, [pc, #688]	; (801699c <main+0xe58>)
 80166ea:	f9b3 3000 	ldrsh.w	r3, [r3]
 80166ee:	461a      	mov	r2, r3
 80166f0:	4bab      	ldr	r3, [pc, #684]	; (80169a0 <main+0xe5c>)
 80166f2:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 80166f6:	2b09      	cmp	r3, #9
 80166f8:	d103      	bne.n	8016702 <main+0xbbe>
	              List[VIEWPOSI].Val=1 ;
 80166fa:	4baa      	ldr	r3, [pc, #680]	; (80169a4 <main+0xe60>)
 80166fc:	2201      	movs	r2, #1
 80166fe:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
	           }
	            if((MenuNow[Current] ==T2_POSI) && (List[T2_POSI].Val <= List[T1_POSI].Val))
 8016702:	4ba6      	ldr	r3, [pc, #664]	; (801699c <main+0xe58>)
 8016704:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016708:	461a      	mov	r2, r3
 801670a:	4ba5      	ldr	r3, [pc, #660]	; (80169a0 <main+0xe5c>)
 801670c:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8016710:	2b0b      	cmp	r3, #11
 8016712:	d117      	bne.n	8016744 <main+0xc00>
 8016714:	4ba3      	ldr	r3, [pc, #652]	; (80169a4 <main+0xe60>)
 8016716:	f9b3 205c 	ldrsh.w	r2, [r3, #92]	; 0x5c
 801671a:	4ba2      	ldr	r3, [pc, #648]	; (80169a4 <main+0xe60>)
 801671c:	f9b3 3054 	ldrsh.w	r3, [r3, #84]	; 0x54
 8016720:	429a      	cmp	r2, r3
 8016722:	dc0f      	bgt.n	8016744 <main+0xc00>
	              List[MenuNow[Current]].Val=List[T1_POSI].Val;
 8016724:	4b9d      	ldr	r3, [pc, #628]	; (801699c <main+0xe58>)
 8016726:	f9b3 3000 	ldrsh.w	r3, [r3]
 801672a:	461a      	mov	r2, r3
 801672c:	4b9c      	ldr	r3, [pc, #624]	; (80169a0 <main+0xe5c>)
 801672e:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8016732:	4618      	mov	r0, r3
 8016734:	4b9b      	ldr	r3, [pc, #620]	; (80169a4 <main+0xe60>)
 8016736:	f9b3 1054 	ldrsh.w	r1, [r3, #84]	; 0x54
 801673a:	4a9a      	ldr	r2, [pc, #616]	; (80169a4 <main+0xe60>)
 801673c:	00c3      	lsls	r3, r0, #3
 801673e:	4413      	add	r3, r2
 8016740:	460a      	mov	r2, r1
 8016742:	809a      	strh	r2, [r3, #4]
	        }
	        if(Current == TRG) Status &= ~STOP; // �ı�ͬ��ģʽ��ָ�����״̬
 8016744:	4b95      	ldr	r3, [pc, #596]	; (801699c <main+0xe58>)
 8016746:	f9b3 3000 	ldrsh.w	r3, [r3]
 801674a:	2b02      	cmp	r3, #2
 801674c:	f040 8217 	bne.w	8016b7e <main+0x103a>
 8016750:	4b95      	ldr	r3, [pc, #596]	; (80169a8 <main+0xe64>)
 8016752:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016756:	f023 0301 	bic.w	r3, r3, #1
 801675a:	b21a      	sxth	r2, r3
 801675c:	4b92      	ldr	r3, [pc, #584]	; (80169a8 <main+0xe64>)
 801675e:	801a      	strh	r2, [r3, #0]
	        break;
 8016760:	e20d      	b.n	8016b7e <main+0x103a>

	      case KEYCODE_RIGHT:
	        if((Current==ST)&& !(PopType & LIST_POP))break;
 8016762:	4b8e      	ldr	r3, [pc, #568]	; (801699c <main+0xe58>)
 8016764:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016768:	2b07      	cmp	r3, #7
 801676a:	d106      	bne.n	801677a <main+0xc36>
 801676c:	4b8f      	ldr	r3, [pc, #572]	; (80169ac <main+0xe68>)
 801676e:	781b      	ldrb	r3, [r3, #0]
 8016770:	f003 0302 	and.w	r3, r3, #2
 8016774:	2b00      	cmp	r3, #0
 8016776:	f000 8204 	beq.w	8016b82 <main+0x103e>
	        List[MenuNow[Current]].Flg |= UPD;  // ˢ�±��ǰԭ��ʾ��Ŀ����
 801677a:	4b88      	ldr	r3, [pc, #544]	; (801699c <main+0xe58>)
 801677c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016780:	461a      	mov	r2, r3
 8016782:	4b87      	ldr	r3, [pc, #540]	; (80169a0 <main+0xe5c>)
 8016784:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8016788:	4a86      	ldr	r2, [pc, #536]	; (80169a4 <main+0xe60>)
 801678a:	00db      	lsls	r3, r3, #3
 801678c:	4413      	add	r3, r2
 801678e:	799b      	ldrb	r3, [r3, #6]
 8016790:	4a82      	ldr	r2, [pc, #520]	; (801699c <main+0xe58>)
 8016792:	f9b2 2000 	ldrsh.w	r2, [r2]
 8016796:	4611      	mov	r1, r2
 8016798:	4a81      	ldr	r2, [pc, #516]	; (80169a0 <main+0xe5c>)
 801679a:	f932 2011 	ldrsh.w	r2, [r2, r1, lsl #1]
 801679e:	4610      	mov	r0, r2
 80167a0:	f043 0320 	orr.w	r3, r3, #32
 80167a4:	b2d9      	uxtb	r1, r3
 80167a6:	4a7f      	ldr	r2, [pc, #508]	; (80169a4 <main+0xe60>)
 80167a8:	00c3      	lsls	r3, r0, #3
 80167aa:	4413      	add	r3, r2
 80167ac:	460a      	mov	r2, r1
 80167ae:	719a      	strb	r2, [r3, #6]
	        if(List[MenuNow[Current]].Val >=MAX[MenuNow[Current]] ){
 80167b0:	4b7a      	ldr	r3, [pc, #488]	; (801699c <main+0xe58>)
 80167b2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80167b6:	461a      	mov	r2, r3
 80167b8:	4b79      	ldr	r3, [pc, #484]	; (80169a0 <main+0xe5c>)
 80167ba:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 80167be:	4a79      	ldr	r2, [pc, #484]	; (80169a4 <main+0xe60>)
 80167c0:	00db      	lsls	r3, r3, #3
 80167c2:	4413      	add	r3, r2
 80167c4:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
 80167c8:	4b74      	ldr	r3, [pc, #464]	; (801699c <main+0xe58>)
 80167ca:	f9b3 3000 	ldrsh.w	r3, [r3]
 80167ce:	4619      	mov	r1, r3
 80167d0:	4b73      	ldr	r3, [pc, #460]	; (80169a0 <main+0xe5c>)
 80167d2:	f933 3011 	ldrsh.w	r3, [r3, r1, lsl #1]
 80167d6:	4619      	mov	r1, r3
 80167d8:	4b75      	ldr	r3, [pc, #468]	; (80169b0 <main+0xe6c>)
 80167da:	f933 3011 	ldrsh.w	r3, [r3, r1, lsl #1]
 80167de:	429a      	cmp	r2, r3
 80167e0:	db73      	blt.n	80168ca <main+0xd86>
	          if((MenuNow[Current] == COUPLING)||(MenuNow[Current] == YN_TYPE )||
 80167e2:	4b6e      	ldr	r3, [pc, #440]	; (801699c <main+0xe58>)
 80167e4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80167e8:	461a      	mov	r2, r3
 80167ea:	4b6d      	ldr	r3, [pc, #436]	; (80169a0 <main+0xe5c>)
 80167ec:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 80167f0:	2b01      	cmp	r3, #1
 80167f2:	d051      	beq.n	8016898 <main+0xd54>
 80167f4:	4b69      	ldr	r3, [pc, #420]	; (801699c <main+0xe58>)
 80167f6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80167fa:	461a      	mov	r2, r3
 80167fc:	4b68      	ldr	r3, [pc, #416]	; (80169a0 <main+0xe5c>)
 80167fe:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8016802:	2b06      	cmp	r3, #6
 8016804:	d048      	beq.n	8016898 <main+0xd54>
	            (MenuNow[Current] == XN_TYPE )||(MenuNow[Current] == EXT_HIDE)||
 8016806:	4b65      	ldr	r3, [pc, #404]	; (801699c <main+0xe58>)
 8016808:	f9b3 3000 	ldrsh.w	r3, [r3]
 801680c:	461a      	mov	r2, r3
 801680e:	4b64      	ldr	r3, [pc, #400]	; (80169a0 <main+0xe5c>)
 8016810:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
	          if((MenuNow[Current] == COUPLING)||(MenuNow[Current] == YN_TYPE )||
 8016814:	2b0c      	cmp	r3, #12
 8016816:	d03f      	beq.n	8016898 <main+0xd54>
	            (MenuNow[Current] == XN_TYPE )||(MenuNow[Current] == EXT_HIDE)||
 8016818:	4b60      	ldr	r3, [pc, #384]	; (801699c <main+0xe58>)
 801681a:	f9b3 3000 	ldrsh.w	r3, [r3]
 801681e:	461a      	mov	r2, r3
 8016820:	4b5f      	ldr	r3, [pc, #380]	; (80169a0 <main+0xe5c>)
 8016822:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8016826:	2b1c      	cmp	r3, #28
 8016828:	d036      	beq.n	8016898 <main+0xd54>
	            ( MenuNow[Current] == FITTRIGG)||(MenuNow[Current] == TR_MODE )||
 801682a:	4b5c      	ldr	r3, [pc, #368]	; (801699c <main+0xe58>)
 801682c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016830:	461a      	mov	r2, r3
 8016832:	4b5b      	ldr	r3, [pc, #364]	; (80169a0 <main+0xe5c>)
 8016834:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
	            (MenuNow[Current] == XN_TYPE )||(MenuNow[Current] == EXT_HIDE)||
 8016838:	2b0f      	cmp	r3, #15
 801683a:	d02d      	beq.n	8016898 <main+0xd54>
	            ( MenuNow[Current] == FITTRIGG)||(MenuNow[Current] == TR_MODE )||
 801683c:	4b57      	ldr	r3, [pc, #348]	; (801699c <main+0xe58>)
 801683e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016842:	461a      	mov	r2, r3
 8016844:	4b56      	ldr	r3, [pc, #344]	; (80169a0 <main+0xe5c>)
 8016846:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 801684a:	2b0e      	cmp	r3, #14
 801684c:	d024      	beq.n	8016898 <main+0xd54>
	            ( MenuNow[Current] == SYNCMODE)||(MenuNow[Current] == EXT_REFN)||
 801684e:	4b53      	ldr	r3, [pc, #332]	; (801699c <main+0xe58>)
 8016850:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016854:	461a      	mov	r2, r3
 8016856:	4b52      	ldr	r3, [pc, #328]	; (80169a0 <main+0xe5c>)
 8016858:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
	            ( MenuNow[Current] == FITTRIGG)||(MenuNow[Current] == TR_MODE )||
 801685c:	2b0d      	cmp	r3, #13
 801685e:	d01b      	beq.n	8016898 <main+0xd54>
	            ( MenuNow[Current] == SYNCMODE)||(MenuNow[Current] == EXT_REFN)||
 8016860:	4b4e      	ldr	r3, [pc, #312]	; (801699c <main+0xe58>)
 8016862:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016866:	461a      	mov	r2, r3
 8016868:	4b4d      	ldr	r3, [pc, #308]	; (80169a0 <main+0xe5c>)
 801686a:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 801686e:	2b1a      	cmp	r3, #26
 8016870:	d012      	beq.n	8016898 <main+0xd54>
	            (MenuNow[Current] == PROBEATT)||(MenuNow[Current] == TPYE_OUT))
 8016872:	4b4a      	ldr	r3, [pc, #296]	; (801699c <main+0xe58>)
 8016874:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016878:	461a      	mov	r2, r3
 801687a:	4b49      	ldr	r3, [pc, #292]	; (80169a0 <main+0xe5c>)
 801687c:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
	            ( MenuNow[Current] == SYNCMODE)||(MenuNow[Current] == EXT_REFN)||
 8016880:	2b02      	cmp	r3, #2
 8016882:	d009      	beq.n	8016898 <main+0xd54>
	            (MenuNow[Current] == PROBEATT)||(MenuNow[Current] == TPYE_OUT))
 8016884:	4b45      	ldr	r3, [pc, #276]	; (801699c <main+0xe58>)
 8016886:	f9b3 3000 	ldrsh.w	r3, [r3]
 801688a:	461a      	mov	r2, r3
 801688c:	4b44      	ldr	r3, [pc, #272]	; (80169a0 <main+0xe5c>)
 801688e:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8016892:	2b24      	cmp	r3, #36	; 0x24
 8016894:	f040 8154 	bne.w	8016b40 <main+0xffc>
	            List[MenuNow[Current]].Val =MIN[MenuNow[Current]] ;
 8016898:	4b40      	ldr	r3, [pc, #256]	; (801699c <main+0xe58>)
 801689a:	f9b3 3000 	ldrsh.w	r3, [r3]
 801689e:	461a      	mov	r2, r3
 80168a0:	4b3f      	ldr	r3, [pc, #252]	; (80169a0 <main+0xe5c>)
 80168a2:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 80168a6:	461a      	mov	r2, r3
 80168a8:	4b3c      	ldr	r3, [pc, #240]	; (801699c <main+0xe58>)
 80168aa:	f9b3 3000 	ldrsh.w	r3, [r3]
 80168ae:	4619      	mov	r1, r3
 80168b0:	4b3b      	ldr	r3, [pc, #236]	; (80169a0 <main+0xe5c>)
 80168b2:	f933 3011 	ldrsh.w	r3, [r3, r1, lsl #1]
 80168b6:	4618      	mov	r0, r3
 80168b8:	4b3e      	ldr	r3, [pc, #248]	; (80169b4 <main+0xe70>)
 80168ba:	f933 1012 	ldrsh.w	r1, [r3, r2, lsl #1]
 80168be:	4a39      	ldr	r2, [pc, #228]	; (80169a4 <main+0xe60>)
 80168c0:	00c3      	lsls	r3, r0, #3
 80168c2:	4413      	add	r3, r2
 80168c4:	460a      	mov	r2, r1
 80168c6:	809a      	strh	r2, [r3, #4]
 80168c8:	e13a      	b.n	8016b40 <main+0xffc>
	        } else {
	            if(MenuNow[Current] == VIEWPOSI)
 80168ca:	4b34      	ldr	r3, [pc, #208]	; (801699c <main+0xe58>)
 80168cc:	f9b3 3000 	ldrsh.w	r3, [r3]
 80168d0:	461a      	mov	r2, r3
 80168d2:	4b33      	ldr	r3, [pc, #204]	; (80169a0 <main+0xe5c>)
 80168d4:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 80168d8:	2b08      	cmp	r3, #8
 80168da:	d16f      	bne.n	80169bc <main+0xe78>
	            {
	              if(List[MenuNow[Current]].Val <(DEPTH[List[SMPL_DPTH].Val]-(350-List[SMPL_DPTH].Val)))
 80168dc:	4b2f      	ldr	r3, [pc, #188]	; (801699c <main+0xe58>)
 80168de:	f9b3 3000 	ldrsh.w	r3, [r3]
 80168e2:	461a      	mov	r2, r3
 80168e4:	4b2e      	ldr	r3, [pc, #184]	; (80169a0 <main+0xe5c>)
 80168e6:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 80168ea:	4a2e      	ldr	r2, [pc, #184]	; (80169a4 <main+0xe60>)
 80168ec:	00db      	lsls	r3, r3, #3
 80168ee:	4413      	add	r3, r2
 80168f0:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80168f4:	461a      	mov	r2, r3
 80168f6:	4b2b      	ldr	r3, [pc, #172]	; (80169a4 <main+0xe60>)
 80168f8:	f9b3 304c 	ldrsh.w	r3, [r3, #76]	; 0x4c
 80168fc:	4619      	mov	r1, r3
 80168fe:	4b2e      	ldr	r3, [pc, #184]	; (80169b8 <main+0xe74>)
 8016900:	f933 3011 	ldrsh.w	r3, [r3, r1, lsl #1]
 8016904:	4619      	mov	r1, r3
 8016906:	4b27      	ldr	r3, [pc, #156]	; (80169a4 <main+0xe60>)
 8016908:	f9b3 304c 	ldrsh.w	r3, [r3, #76]	; 0x4c
 801690c:	f5c3 73af 	rsb	r3, r3, #350	; 0x15e
 8016910:	1acb      	subs	r3, r1, r3
 8016912:	429a      	cmp	r2, r3
 8016914:	f280 80f3 	bge.w	8016afe <main+0xfba>
	              {
	                if(List[MenuNow[Current]].Val >150 )
 8016918:	4b20      	ldr	r3, [pc, #128]	; (801699c <main+0xe58>)
 801691a:	f9b3 3000 	ldrsh.w	r3, [r3]
 801691e:	461a      	mov	r2, r3
 8016920:	4b1f      	ldr	r3, [pc, #124]	; (80169a0 <main+0xe5c>)
 8016922:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8016926:	4a1f      	ldr	r2, [pc, #124]	; (80169a4 <main+0xe60>)
 8016928:	00db      	lsls	r3, r3, #3
 801692a:	4413      	add	r3, r2
 801692c:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8016930:	2b96      	cmp	r3, #150	; 0x96
 8016932:	dd1c      	ble.n	801696e <main+0xe2a>
	                  List[MenuNow[Current]].Val += 25;
 8016934:	4b19      	ldr	r3, [pc, #100]	; (801699c <main+0xe58>)
 8016936:	f9b3 3000 	ldrsh.w	r3, [r3]
 801693a:	461a      	mov	r2, r3
 801693c:	4b18      	ldr	r3, [pc, #96]	; (80169a0 <main+0xe5c>)
 801693e:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8016942:	4a18      	ldr	r2, [pc, #96]	; (80169a4 <main+0xe60>)
 8016944:	00db      	lsls	r3, r3, #3
 8016946:	4413      	add	r3, r2
 8016948:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801694c:	b29b      	uxth	r3, r3
 801694e:	3319      	adds	r3, #25
 8016950:	b29a      	uxth	r2, r3
 8016952:	4b12      	ldr	r3, [pc, #72]	; (801699c <main+0xe58>)
 8016954:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016958:	4619      	mov	r1, r3
 801695a:	4b11      	ldr	r3, [pc, #68]	; (80169a0 <main+0xe5c>)
 801695c:	f933 3011 	ldrsh.w	r3, [r3, r1, lsl #1]
 8016960:	b211      	sxth	r1, r2
 8016962:	4a10      	ldr	r2, [pc, #64]	; (80169a4 <main+0xe60>)
 8016964:	00db      	lsls	r3, r3, #3
 8016966:	4413      	add	r3, r2
 8016968:	460a      	mov	r2, r1
 801696a:	809a      	strh	r2, [r3, #4]
 801696c:	e0c7      	b.n	8016afe <main+0xfba>
	                else
	                  List[MenuNow[Current]].Val++;
 801696e:	4b0b      	ldr	r3, [pc, #44]	; (801699c <main+0xe58>)
 8016970:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016974:	461a      	mov	r2, r3
 8016976:	4b0a      	ldr	r3, [pc, #40]	; (80169a0 <main+0xe5c>)
 8016978:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 801697c:	461a      	mov	r2, r3
 801697e:	4909      	ldr	r1, [pc, #36]	; (80169a4 <main+0xe60>)
 8016980:	00d3      	lsls	r3, r2, #3
 8016982:	440b      	add	r3, r1
 8016984:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8016988:	b29b      	uxth	r3, r3
 801698a:	3301      	adds	r3, #1
 801698c:	b29b      	uxth	r3, r3
 801698e:	b218      	sxth	r0, r3
 8016990:	4904      	ldr	r1, [pc, #16]	; (80169a4 <main+0xe60>)
 8016992:	00d3      	lsls	r3, r2, #3
 8016994:	440b      	add	r3, r1
 8016996:	4602      	mov	r2, r0
 8016998:	809a      	strh	r2, [r3, #4]
 801699a:	e0b0      	b.n	8016afe <main+0xfba>
 801699c:	2000079a 	.word	0x2000079a
 80169a0:	20000514 	.word	0x20000514
 80169a4:	20000274 	.word	0x20000274
 80169a8:	2000079c 	.word	0x2000079c
 80169ac:	20000788 	.word	0x20000788
 80169b0:	08002254 	.word	0x08002254
 80169b4:	080022b0 	.word	0x080022b0
 80169b8:	0800230c 	.word	0x0800230c
	              }
	            }
	            else{
	              //============4.27�޸������߳�����������========
	              if(MenuNow[Current] == THRESHOLD){
 80169bc:	4b8d      	ldr	r3, [pc, #564]	; (8016bf4 <main+0x10b0>)
 80169be:	f9b3 3000 	ldrsh.w	r3, [r3]
 80169c2:	461a      	mov	r2, r3
 80169c4:	4b8c      	ldr	r3, [pc, #560]	; (8016bf8 <main+0x10b4>)
 80169c6:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 80169ca:	2b10      	cmp	r3, #16
 80169cc:	d121      	bne.n	8016a12 <main+0xece>
	                if((List[V0_POSI].Val + List[THRESHOLD].Val) < 198)
 80169ce:	4b8b      	ldr	r3, [pc, #556]	; (8016bfc <main+0x10b8>)
 80169d0:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 80169d4:	461a      	mov	r2, r3
 80169d6:	4b89      	ldr	r3, [pc, #548]	; (8016bfc <main+0x10b8>)
 80169d8:	f9b3 3084 	ldrsh.w	r3, [r3, #132]	; 0x84
 80169dc:	4413      	add	r3, r2
 80169de:	2bc5      	cmp	r3, #197	; 0xc5
 80169e0:	f300 808d 	bgt.w	8016afe <main+0xfba>
	                 List[MenuNow[Current]].Val++;
 80169e4:	4b83      	ldr	r3, [pc, #524]	; (8016bf4 <main+0x10b0>)
 80169e6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80169ea:	461a      	mov	r2, r3
 80169ec:	4b82      	ldr	r3, [pc, #520]	; (8016bf8 <main+0x10b4>)
 80169ee:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 80169f2:	461a      	mov	r2, r3
 80169f4:	4981      	ldr	r1, [pc, #516]	; (8016bfc <main+0x10b8>)
 80169f6:	00d3      	lsls	r3, r2, #3
 80169f8:	440b      	add	r3, r1
 80169fa:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80169fe:	b29b      	uxth	r3, r3
 8016a00:	3301      	adds	r3, #1
 8016a02:	b29b      	uxth	r3, r3
 8016a04:	b218      	sxth	r0, r3
 8016a06:	497d      	ldr	r1, [pc, #500]	; (8016bfc <main+0x10b8>)
 8016a08:	00d3      	lsls	r3, r2, #3
 8016a0a:	440b      	add	r3, r1
 8016a0c:	4602      	mov	r2, r0
 8016a0e:	809a      	strh	r2, [r3, #4]
 8016a10:	e075      	b.n	8016afe <main+0xfba>
	              }
	              else if(MenuNow[Current] == V0_POSI){
 8016a12:	4b78      	ldr	r3, [pc, #480]	; (8016bf4 <main+0x10b0>)
 8016a14:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016a18:	461a      	mov	r2, r3
 8016a1a:	4b77      	ldr	r3, [pc, #476]	; (8016bf8 <main+0x10b4>)
 8016a1c:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8016a20:	2b03      	cmp	r3, #3
 8016a22:	d134      	bne.n	8016a8e <main+0xf4a>
	                if((List[V0_POSI].Val + List[THRESHOLD].Val) > 198){
 8016a24:	4b75      	ldr	r3, [pc, #468]	; (8016bfc <main+0x10b8>)
 8016a26:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 8016a2a:	461a      	mov	r2, r3
 8016a2c:	4b73      	ldr	r3, [pc, #460]	; (8016bfc <main+0x10b8>)
 8016a2e:	f9b3 3084 	ldrsh.w	r3, [r3, #132]	; 0x84
 8016a32:	4413      	add	r3, r2
 8016a34:	2bc6      	cmp	r3, #198	; 0xc6
 8016a36:	dd13      	ble.n	8016a60 <main+0xf1c>
	                  List[V0_POSI].Val++;
 8016a38:	4b70      	ldr	r3, [pc, #448]	; (8016bfc <main+0x10b8>)
 8016a3a:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 8016a3e:	b29b      	uxth	r3, r3
 8016a40:	3301      	adds	r3, #1
 8016a42:	b29b      	uxth	r3, r3
 8016a44:	b21a      	sxth	r2, r3
 8016a46:	4b6d      	ldr	r3, [pc, #436]	; (8016bfc <main+0x10b8>)
 8016a48:	839a      	strh	r2, [r3, #28]
	                  List[THRESHOLD].Val--;
 8016a4a:	4b6c      	ldr	r3, [pc, #432]	; (8016bfc <main+0x10b8>)
 8016a4c:	f9b3 3084 	ldrsh.w	r3, [r3, #132]	; 0x84
 8016a50:	b29b      	uxth	r3, r3
 8016a52:	3b01      	subs	r3, #1
 8016a54:	b29b      	uxth	r3, r3
 8016a56:	b21a      	sxth	r2, r3
 8016a58:	4b68      	ldr	r3, [pc, #416]	; (8016bfc <main+0x10b8>)
 8016a5a:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84
 8016a5e:	e04e      	b.n	8016afe <main+0xfba>
	                }else List[MenuNow[Current]].Val++;
 8016a60:	4b64      	ldr	r3, [pc, #400]	; (8016bf4 <main+0x10b0>)
 8016a62:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016a66:	461a      	mov	r2, r3
 8016a68:	4b63      	ldr	r3, [pc, #396]	; (8016bf8 <main+0x10b4>)
 8016a6a:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8016a6e:	461a      	mov	r2, r3
 8016a70:	4962      	ldr	r1, [pc, #392]	; (8016bfc <main+0x10b8>)
 8016a72:	00d3      	lsls	r3, r2, #3
 8016a74:	440b      	add	r3, r1
 8016a76:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8016a7a:	b29b      	uxth	r3, r3
 8016a7c:	3301      	adds	r3, #1
 8016a7e:	b29b      	uxth	r3, r3
 8016a80:	b218      	sxth	r0, r3
 8016a82:	495e      	ldr	r1, [pc, #376]	; (8016bfc <main+0x10b8>)
 8016a84:	00d3      	lsls	r3, r2, #3
 8016a86:	440b      	add	r3, r1
 8016a88:	4602      	mov	r2, r0
 8016a8a:	809a      	strh	r2, [r3, #4]
 8016a8c:	e037      	b.n	8016afe <main+0xfba>
	              }
	              else if((MenuNow[Current] ==V2_POSI) && (List[V2_POSI].Val >= List[V1_POSI].Val))
 8016a8e:	4b59      	ldr	r3, [pc, #356]	; (8016bf4 <main+0x10b0>)
 8016a90:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016a94:	461a      	mov	r2, r3
 8016a96:	4b58      	ldr	r3, [pc, #352]	; (8016bf8 <main+0x10b4>)
 8016a98:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8016a9c:	2b05      	cmp	r3, #5
 8016a9e:	d118      	bne.n	8016ad2 <main+0xf8e>
 8016aa0:	4b56      	ldr	r3, [pc, #344]	; (8016bfc <main+0x10b8>)
 8016aa2:	f9b3 202c 	ldrsh.w	r2, [r3, #44]	; 0x2c
 8016aa6:	4b55      	ldr	r3, [pc, #340]	; (8016bfc <main+0x10b8>)
 8016aa8:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	; 0x24
 8016aac:	429a      	cmp	r2, r3
 8016aae:	db10      	blt.n	8016ad2 <main+0xf8e>
	                List[MenuNow[Current]].Val=List[V1_POSI].Val;
 8016ab0:	4b50      	ldr	r3, [pc, #320]	; (8016bf4 <main+0x10b0>)
 8016ab2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016ab6:	461a      	mov	r2, r3
 8016ab8:	4b4f      	ldr	r3, [pc, #316]	; (8016bf8 <main+0x10b4>)
 8016aba:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8016abe:	4618      	mov	r0, r3
 8016ac0:	4b4e      	ldr	r3, [pc, #312]	; (8016bfc <main+0x10b8>)
 8016ac2:	f9b3 1024 	ldrsh.w	r1, [r3, #36]	; 0x24
 8016ac6:	4a4d      	ldr	r2, [pc, #308]	; (8016bfc <main+0x10b8>)
 8016ac8:	00c3      	lsls	r3, r0, #3
 8016aca:	4413      	add	r3, r2
 8016acc:	460a      	mov	r2, r1
 8016ace:	809a      	strh	r2, [r3, #4]
 8016ad0:	e015      	b.n	8016afe <main+0xfba>
	              else List[MenuNow[Current]].Val++;
 8016ad2:	4b48      	ldr	r3, [pc, #288]	; (8016bf4 <main+0x10b0>)
 8016ad4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016ad8:	461a      	mov	r2, r3
 8016ada:	4b47      	ldr	r3, [pc, #284]	; (8016bf8 <main+0x10b4>)
 8016adc:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8016ae0:	461a      	mov	r2, r3
 8016ae2:	4946      	ldr	r1, [pc, #280]	; (8016bfc <main+0x10b8>)
 8016ae4:	00d3      	lsls	r3, r2, #3
 8016ae6:	440b      	add	r3, r1
 8016ae8:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8016aec:	b29b      	uxth	r3, r3
 8016aee:	3301      	adds	r3, #1
 8016af0:	b29b      	uxth	r3, r3
 8016af2:	b218      	sxth	r0, r3
 8016af4:	4941      	ldr	r1, [pc, #260]	; (8016bfc <main+0x10b8>)
 8016af6:	00d3      	lsls	r3, r2, #3
 8016af8:	440b      	add	r3, r1
 8016afa:	4602      	mov	r2, r0
 8016afc:	809a      	strh	r2, [r3, #4]
	            }
	            //==============================================
	            if((MenuNow[Current] ==T1_POSI) && (List[T1_POSI].Val >= List[T2_POSI].Val))
 8016afe:	4b3d      	ldr	r3, [pc, #244]	; (8016bf4 <main+0x10b0>)
 8016b00:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016b04:	461a      	mov	r2, r3
 8016b06:	4b3c      	ldr	r3, [pc, #240]	; (8016bf8 <main+0x10b4>)
 8016b08:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8016b0c:	2b0a      	cmp	r3, #10
 8016b0e:	d117      	bne.n	8016b40 <main+0xffc>
 8016b10:	4b3a      	ldr	r3, [pc, #232]	; (8016bfc <main+0x10b8>)
 8016b12:	f9b3 2054 	ldrsh.w	r2, [r3, #84]	; 0x54
 8016b16:	4b39      	ldr	r3, [pc, #228]	; (8016bfc <main+0x10b8>)
 8016b18:	f9b3 305c 	ldrsh.w	r3, [r3, #92]	; 0x5c
 8016b1c:	429a      	cmp	r2, r3
 8016b1e:	db0f      	blt.n	8016b40 <main+0xffc>
	               List[MenuNow[Current]].Val=List[T2_POSI].Val;
 8016b20:	4b34      	ldr	r3, [pc, #208]	; (8016bf4 <main+0x10b0>)
 8016b22:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016b26:	461a      	mov	r2, r3
 8016b28:	4b33      	ldr	r3, [pc, #204]	; (8016bf8 <main+0x10b4>)
 8016b2a:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8016b2e:	4618      	mov	r0, r3
 8016b30:	4b32      	ldr	r3, [pc, #200]	; (8016bfc <main+0x10b8>)
 8016b32:	f9b3 105c 	ldrsh.w	r1, [r3, #92]	; 0x5c
 8016b36:	4a31      	ldr	r2, [pc, #196]	; (8016bfc <main+0x10b8>)
 8016b38:	00c3      	lsls	r3, r0, #3
 8016b3a:	4413      	add	r3, r2
 8016b3c:	460a      	mov	r2, r1
 8016b3e:	809a      	strh	r2, [r3, #4]
	        }
	        if(Current == TRG) {Status &= ~STOP; // �ı�ͬ��ģʽ��ָ�����״̬
 8016b40:	4b2c      	ldr	r3, [pc, #176]	; (8016bf4 <main+0x10b0>)
 8016b42:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016b46:	2b02      	cmp	r3, #2
 8016b48:	d11d      	bne.n	8016b86 <main+0x1042>
 8016b4a:	4b2d      	ldr	r3, [pc, #180]	; (8016c00 <main+0x10bc>)
 8016b4c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016b50:	f023 0301 	bic.w	r3, r3, #1
 8016b54:	b21a      	sxth	r2, r3
 8016b56:	4b2a      	ldr	r3, [pc, #168]	; (8016c00 <main+0x10bc>)
 8016b58:	801a      	strh	r2, [r3, #0]
	        if(List[SYNCMODE].Val==SINGL)ADC_Start(); }
 8016b5a:	4b28      	ldr	r3, [pc, #160]	; (8016bfc <main+0x10b8>)
 8016b5c:	f9b3 306c 	ldrsh.w	r3, [r3, #108]	; 0x6c
 8016b60:	2b04      	cmp	r3, #4
 8016b62:	d110      	bne.n	8016b86 <main+0x1042>
 8016b64:	f7f5 fe1a 	bl	800c79c <ADC_Start>
	        break;
 8016b68:	e00d      	b.n	8016b86 <main+0x1042>
	         break;
 8016b6a:	bf00      	nop
 8016b6c:	e00c      	b.n	8016b88 <main+0x1044>
	         break;
 8016b6e:	bf00      	nop
 8016b70:	e00a      	b.n	8016b88 <main+0x1044>
	        break;
 8016b72:	bf00      	nop
 8016b74:	e008      	b.n	8016b88 <main+0x1044>
	        break;
 8016b76:	bf00      	nop
 8016b78:	e006      	b.n	8016b88 <main+0x1044>
	        if((Current==ST)&& !(PopType & LIST_POP))break;
 8016b7a:	bf00      	nop
 8016b7c:	e004      	b.n	8016b88 <main+0x1044>
	        break;
 8016b7e:	bf00      	nop
 8016b80:	e002      	b.n	8016b88 <main+0x1044>
	        if((Current==ST)&& !(PopType & LIST_POP))break;
 8016b82:	bf00      	nop
 8016b84:	e000      	b.n	8016b88 <main+0x1044>
	        break;
 8016b86:	bf00      	nop

	     } //switch end
	     List[MenuNow[Current]].Flg |= UPD;
 8016b88:	4b1a      	ldr	r3, [pc, #104]	; (8016bf4 <main+0x10b0>)
 8016b8a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016b8e:	461a      	mov	r2, r3
 8016b90:	4b19      	ldr	r3, [pc, #100]	; (8016bf8 <main+0x10b4>)
 8016b92:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8016b96:	4a19      	ldr	r2, [pc, #100]	; (8016bfc <main+0x10b8>)
 8016b98:	00db      	lsls	r3, r3, #3
 8016b9a:	4413      	add	r3, r2
 8016b9c:	799b      	ldrb	r3, [r3, #6]
 8016b9e:	4a15      	ldr	r2, [pc, #84]	; (8016bf4 <main+0x10b0>)
 8016ba0:	f9b2 2000 	ldrsh.w	r2, [r2]
 8016ba4:	4611      	mov	r1, r2
 8016ba6:	4a14      	ldr	r2, [pc, #80]	; (8016bf8 <main+0x10b4>)
 8016ba8:	f932 2011 	ldrsh.w	r2, [r2, r1, lsl #1]
 8016bac:	4610      	mov	r0, r2
 8016bae:	f043 0320 	orr.w	r3, r3, #32
 8016bb2:	b2d9      	uxtb	r1, r3
 8016bb4:	4a11      	ldr	r2, [pc, #68]	; (8016bfc <main+0x10b8>)
 8016bb6:	00c3      	lsls	r3, r0, #3
 8016bb8:	4413      	add	r3, r2
 8016bba:	460a      	mov	r2, r1
 8016bbc:	719a      	strb	r2, [r3, #6]
	     StdBy_Time  = List[STANDBY].Val * MIN_UNIT;  //����
 8016bbe:	4b0f      	ldr	r3, [pc, #60]	; (8016bfc <main+0x10b8>)
 8016bc0:	f9b3 314c 	ldrsh.w	r3, [r3, #332]	; 0x14c
 8016bc4:	b29b      	uxth	r3, r3
 8016bc6:	461a      	mov	r2, r3
 8016bc8:	0112      	lsls	r2, r2, #4
 8016bca:	1ad3      	subs	r3, r2, r3
 8016bcc:	009b      	lsls	r3, r3, #2
 8016bce:	b29b      	uxth	r3, r3
 8016bd0:	b21a      	sxth	r2, r3
 8016bd2:	4b0c      	ldr	r3, [pc, #48]	; (8016c04 <main+0x10c0>)
 8016bd4:	801a      	strh	r2, [r3, #0]

	      if(PopType & LIST_POP) Show_List();
 8016bd6:	4b0c      	ldr	r3, [pc, #48]	; (8016c08 <main+0x10c4>)
 8016bd8:	781b      	ldrb	r3, [r3, #0]
 8016bda:	f003 0302 	and.w	r3, r3, #2
 8016bde:	2b00      	cmp	r3, #0
 8016be0:	d001      	beq.n	8016be6 <main+0x10a2>
 8016be2:	f7fd f97b 	bl	8013edc <Show_List>
	      Update_Title();
 8016be6:	f7fa ffb3 	bl	8011b50 <Update_Title>
	      Key_Buffer = 0;
 8016bea:	4b08      	ldr	r3, [pc, #32]	; (8016c0c <main+0x10c8>)
 8016bec:	2200      	movs	r2, #0
 8016bee:	701a      	strb	r2, [r3, #0]
	    if((List[STANDBY].Val != 0)&&(StdBy_Time == 0))
 8016bf0:	f7ff b85b 	b.w	8015caa <main+0x166>
 8016bf4:	2000079a 	.word	0x2000079a
 8016bf8:	20000514 	.word	0x20000514
 8016bfc:	20000274 	.word	0x20000274
 8016c00:	2000079c 	.word	0x2000079c
 8016c04:	20000798 	.word	0x20000798
 8016c08:	20000788 	.word	0x20000788
 8016c0c:	20000771 	.word	0x20000771

08016c10 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8016c10:	b580      	push	{r7, lr}
 8016c12:	b094      	sub	sp, #80	; 0x50
 8016c14:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8016c16:	f107 031c 	add.w	r3, r7, #28
 8016c1a:	2234      	movs	r2, #52	; 0x34
 8016c1c:	2100      	movs	r1, #0
 8016c1e:	4618      	mov	r0, r3
 8016c20:	f00e ffa4 	bl	8025b6c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8016c24:	f107 0308 	add.w	r3, r7, #8
 8016c28:	2200      	movs	r2, #0
 8016c2a:	601a      	str	r2, [r3, #0]
 8016c2c:	605a      	str	r2, [r3, #4]
 8016c2e:	609a      	str	r2, [r3, #8]
 8016c30:	60da      	str	r2, [r3, #12]
 8016c32:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8016c34:	2300      	movs	r3, #0
 8016c36:	607b      	str	r3, [r7, #4]
 8016c38:	4b2d      	ldr	r3, [pc, #180]	; (8016cf0 <SystemClock_Config+0xe0>)
 8016c3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8016c3c:	4a2c      	ldr	r2, [pc, #176]	; (8016cf0 <SystemClock_Config+0xe0>)
 8016c3e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8016c42:	6413      	str	r3, [r2, #64]	; 0x40
 8016c44:	4b2a      	ldr	r3, [pc, #168]	; (8016cf0 <SystemClock_Config+0xe0>)
 8016c46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8016c48:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8016c4c:	607b      	str	r3, [r7, #4]
 8016c4e:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8016c50:	2300      	movs	r3, #0
 8016c52:	603b      	str	r3, [r7, #0]
 8016c54:	4b27      	ldr	r3, [pc, #156]	; (8016cf4 <SystemClock_Config+0xe4>)
 8016c56:	681b      	ldr	r3, [r3, #0]
 8016c58:	4a26      	ldr	r2, [pc, #152]	; (8016cf4 <SystemClock_Config+0xe4>)
 8016c5a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8016c5e:	6013      	str	r3, [r2, #0]
 8016c60:	4b24      	ldr	r3, [pc, #144]	; (8016cf4 <SystemClock_Config+0xe4>)
 8016c62:	681b      	ldr	r3, [r3, #0]
 8016c64:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8016c68:	603b      	str	r3, [r7, #0]
 8016c6a:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8016c6c:	2301      	movs	r3, #1
 8016c6e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8016c70:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8016c74:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8016c76:	2302      	movs	r3, #2
 8016c78:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8016c7a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8016c7e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 25;
 8016c80:	2319      	movs	r3, #25
 8016c82:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 360;
 8016c84:	f44f 73b4 	mov.w	r3, #360	; 0x168
 8016c88:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8016c8a:	2302      	movs	r3, #2
 8016c8c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 5;
 8016c8e:	2305      	movs	r3, #5
 8016c90:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8016c92:	2302      	movs	r3, #2
 8016c94:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8016c96:	f107 031c 	add.w	r3, r7, #28
 8016c9a:	4618      	mov	r0, r3
 8016c9c:	f004 fdca 	bl	801b834 <HAL_RCC_OscConfig>
 8016ca0:	4603      	mov	r3, r0
 8016ca2:	2b00      	cmp	r3, #0
 8016ca4:	d001      	beq.n	8016caa <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8016ca6:	f000 fc1d 	bl	80174e4 <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8016caa:	f003 fffb 	bl	801aca4 <HAL_PWREx_EnableOverDrive>
 8016cae:	4603      	mov	r3, r0
 8016cb0:	2b00      	cmp	r3, #0
 8016cb2:	d001      	beq.n	8016cb8 <SystemClock_Config+0xa8>
  {
    Error_Handler();
 8016cb4:	f000 fc16 	bl	80174e4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8016cb8:	230f      	movs	r3, #15
 8016cba:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8016cbc:	2302      	movs	r3, #2
 8016cbe:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8016cc0:	2300      	movs	r3, #0
 8016cc2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8016cc4:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8016cc8:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8016cca:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8016cce:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8016cd0:	f107 0308 	add.w	r3, r7, #8
 8016cd4:	2105      	movs	r1, #5
 8016cd6:	4618      	mov	r0, r3
 8016cd8:	f004 f834 	bl	801ad44 <HAL_RCC_ClockConfig>
 8016cdc:	4603      	mov	r3, r0
 8016cde:	2b00      	cmp	r3, #0
 8016ce0:	d001      	beq.n	8016ce6 <SystemClock_Config+0xd6>
  {
    Error_Handler();
 8016ce2:	f000 fbff 	bl	80174e4 <Error_Handler>
  }
}
 8016ce6:	bf00      	nop
 8016ce8:	3750      	adds	r7, #80	; 0x50
 8016cea:	46bd      	mov	sp, r7
 8016cec:	bd80      	pop	{r7, pc}
 8016cee:	bf00      	nop
 8016cf0:	40023800 	.word	0x40023800
 8016cf4:	40007000 	.word	0x40007000

08016cf8 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8016cf8:	b580      	push	{r7, lr}
 8016cfa:	b084      	sub	sp, #16
 8016cfc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8016cfe:	463b      	mov	r3, r7
 8016d00:	2200      	movs	r2, #0
 8016d02:	601a      	str	r2, [r3, #0]
 8016d04:	605a      	str	r2, [r3, #4]
 8016d06:	609a      	str	r2, [r3, #8]
 8016d08:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8016d0a:	4b22      	ldr	r3, [pc, #136]	; (8016d94 <MX_ADC1_Init+0x9c>)
 8016d0c:	4a22      	ldr	r2, [pc, #136]	; (8016d98 <MX_ADC1_Init+0xa0>)
 8016d0e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8016d10:	4b20      	ldr	r3, [pc, #128]	; (8016d94 <MX_ADC1_Init+0x9c>)
 8016d12:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8016d16:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8016d18:	4b1e      	ldr	r3, [pc, #120]	; (8016d94 <MX_ADC1_Init+0x9c>)
 8016d1a:	2200      	movs	r2, #0
 8016d1c:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8016d1e:	4b1d      	ldr	r3, [pc, #116]	; (8016d94 <MX_ADC1_Init+0x9c>)
 8016d20:	2200      	movs	r2, #0
 8016d22:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8016d24:	4b1b      	ldr	r3, [pc, #108]	; (8016d94 <MX_ADC1_Init+0x9c>)
 8016d26:	2200      	movs	r2, #0
 8016d28:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8016d2a:	4b1a      	ldr	r3, [pc, #104]	; (8016d94 <MX_ADC1_Init+0x9c>)
 8016d2c:	2200      	movs	r2, #0
 8016d2e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8016d32:	4b18      	ldr	r3, [pc, #96]	; (8016d94 <MX_ADC1_Init+0x9c>)
 8016d34:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8016d38:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T1_CC1;
 8016d3a:	4b16      	ldr	r3, [pc, #88]	; (8016d94 <MX_ADC1_Init+0x9c>)
 8016d3c:	2200      	movs	r2, #0
 8016d3e:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8016d40:	4b14      	ldr	r3, [pc, #80]	; (8016d94 <MX_ADC1_Init+0x9c>)
 8016d42:	2200      	movs	r2, #0
 8016d44:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8016d46:	4b13      	ldr	r3, [pc, #76]	; (8016d94 <MX_ADC1_Init+0x9c>)
 8016d48:	2201      	movs	r2, #1
 8016d4a:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8016d4c:	4b11      	ldr	r3, [pc, #68]	; (8016d94 <MX_ADC1_Init+0x9c>)
 8016d4e:	2200      	movs	r2, #0
 8016d50:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8016d54:	4b0f      	ldr	r3, [pc, #60]	; (8016d94 <MX_ADC1_Init+0x9c>)
 8016d56:	2201      	movs	r2, #1
 8016d58:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8016d5a:	480e      	ldr	r0, [pc, #56]	; (8016d94 <MX_ADC1_Init+0x9c>)
 8016d5c:	f001 f9d2 	bl	8018104 <HAL_ADC_Init>
 8016d60:	4603      	mov	r3, r0
 8016d62:	2b00      	cmp	r3, #0
 8016d64:	d001      	beq.n	8016d6a <MX_ADC1_Init+0x72>
  {
    Error_Handler();
 8016d66:	f000 fbbd 	bl	80174e4 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8016d6a:	2306      	movs	r3, #6
 8016d6c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8016d6e:	2301      	movs	r3, #1
 8016d70:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8016d72:	2300      	movs	r3, #0
 8016d74:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8016d76:	463b      	mov	r3, r7
 8016d78:	4619      	mov	r1, r3
 8016d7a:	4806      	ldr	r0, [pc, #24]	; (8016d94 <MX_ADC1_Init+0x9c>)
 8016d7c:	f001 fa06 	bl	801818c <HAL_ADC_ConfigChannel>
 8016d80:	4603      	mov	r3, r0
 8016d82:	2b00      	cmp	r3, #0
 8016d84:	d001      	beq.n	8016d8a <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 8016d86:	f000 fbad 	bl	80174e4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8016d8a:	bf00      	nop
 8016d8c:	3710      	adds	r7, #16
 8016d8e:	46bd      	mov	sp, r7
 8016d90:	bd80      	pop	{r7, pc}
 8016d92:	bf00      	nop
 8016d94:	200078a8 	.word	0x200078a8
 8016d98:	40012000 	.word	0x40012000

08016d9c <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8016d9c:	b580      	push	{r7, lr}
 8016d9e:	b084      	sub	sp, #16
 8016da0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8016da2:	463b      	mov	r3, r7
 8016da4:	2200      	movs	r2, #0
 8016da6:	601a      	str	r2, [r3, #0]
 8016da8:	605a      	str	r2, [r3, #4]
 8016daa:	609a      	str	r2, [r3, #8]
 8016dac:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC2_Init 1 */

  /* USER CODE END ADC2_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 8016dae:	4b22      	ldr	r3, [pc, #136]	; (8016e38 <MX_ADC2_Init+0x9c>)
 8016db0:	4a22      	ldr	r2, [pc, #136]	; (8016e3c <MX_ADC2_Init+0xa0>)
 8016db2:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8016db4:	4b20      	ldr	r3, [pc, #128]	; (8016e38 <MX_ADC2_Init+0x9c>)
 8016db6:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8016dba:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8016dbc:	4b1e      	ldr	r3, [pc, #120]	; (8016e38 <MX_ADC2_Init+0x9c>)
 8016dbe:	2200      	movs	r2, #0
 8016dc0:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = DISABLE;
 8016dc2:	4b1d      	ldr	r3, [pc, #116]	; (8016e38 <MX_ADC2_Init+0x9c>)
 8016dc4:	2200      	movs	r2, #0
 8016dc6:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8016dc8:	4b1b      	ldr	r3, [pc, #108]	; (8016e38 <MX_ADC2_Init+0x9c>)
 8016dca:	2200      	movs	r2, #0
 8016dcc:	761a      	strb	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8016dce:	4b1a      	ldr	r3, [pc, #104]	; (8016e38 <MX_ADC2_Init+0x9c>)
 8016dd0:	2200      	movs	r2, #0
 8016dd2:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8016dd6:	4b18      	ldr	r3, [pc, #96]	; (8016e38 <MX_ADC2_Init+0x9c>)
 8016dd8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8016ddc:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T1_CC1;
 8016dde:	4b16      	ldr	r3, [pc, #88]	; (8016e38 <MX_ADC2_Init+0x9c>)
 8016de0:	2200      	movs	r2, #0
 8016de2:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8016de4:	4b14      	ldr	r3, [pc, #80]	; (8016e38 <MX_ADC2_Init+0x9c>)
 8016de6:	2200      	movs	r2, #0
 8016de8:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 1;
 8016dea:	4b13      	ldr	r3, [pc, #76]	; (8016e38 <MX_ADC2_Init+0x9c>)
 8016dec:	2201      	movs	r2, #1
 8016dee:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8016df0:	4b11      	ldr	r3, [pc, #68]	; (8016e38 <MX_ADC2_Init+0x9c>)
 8016df2:	2200      	movs	r2, #0
 8016df4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8016df8:	4b0f      	ldr	r3, [pc, #60]	; (8016e38 <MX_ADC2_Init+0x9c>)
 8016dfa:	2201      	movs	r2, #1
 8016dfc:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8016dfe:	480e      	ldr	r0, [pc, #56]	; (8016e38 <MX_ADC2_Init+0x9c>)
 8016e00:	f001 f980 	bl	8018104 <HAL_ADC_Init>
 8016e04:	4603      	mov	r3, r0
 8016e06:	2b00      	cmp	r3, #0
 8016e08:	d001      	beq.n	8016e0e <MX_ADC2_Init+0x72>
  {
    Error_Handler();
 8016e0a:	f000 fb6b 	bl	80174e4 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8016e0e:	2307      	movs	r3, #7
 8016e10:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8016e12:	2301      	movs	r3, #1
 8016e14:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8016e16:	2300      	movs	r3, #0
 8016e18:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8016e1a:	463b      	mov	r3, r7
 8016e1c:	4619      	mov	r1, r3
 8016e1e:	4806      	ldr	r0, [pc, #24]	; (8016e38 <MX_ADC2_Init+0x9c>)
 8016e20:	f001 f9b4 	bl	801818c <HAL_ADC_ConfigChannel>
 8016e24:	4603      	mov	r3, r0
 8016e26:	2b00      	cmp	r3, #0
 8016e28:	d001      	beq.n	8016e2e <MX_ADC2_Init+0x92>
  {
    Error_Handler();
 8016e2a:	f000 fb5b 	bl	80174e4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8016e2e:	bf00      	nop
 8016e30:	3710      	adds	r7, #16
 8016e32:	46bd      	mov	sp, r7
 8016e34:	bd80      	pop	{r7, pc}
 8016e36:	bf00      	nop
 8016e38:	20007718 	.word	0x20007718
 8016e3c:	40012100 	.word	0x40012100

08016e40 <MX_DAC_Init>:
  * @brief DAC Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC_Init(void)
{
 8016e40:	b580      	push	{r7, lr}
 8016e42:	b082      	sub	sp, #8
 8016e44:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8016e46:	463b      	mov	r3, r7
 8016e48:	2200      	movs	r2, #0
 8016e4a:	601a      	str	r2, [r3, #0]
 8016e4c:	605a      	str	r2, [r3, #4]
  /* USER CODE BEGIN DAC_Init 1 */

  /* USER CODE END DAC_Init 1 */
  /** DAC Initialization
  */
  hdac.Instance = DAC;
 8016e4e:	4b19      	ldr	r3, [pc, #100]	; (8016eb4 <MX_DAC_Init+0x74>)
 8016e50:	4a19      	ldr	r2, [pc, #100]	; (8016eb8 <MX_DAC_Init+0x78>)
 8016e52:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 8016e54:	4817      	ldr	r0, [pc, #92]	; (8016eb4 <MX_DAC_Init+0x74>)
 8016e56:	f001 fcd8 	bl	801880a <HAL_DAC_Init>
 8016e5a:	4603      	mov	r3, r0
 8016e5c:	2b00      	cmp	r3, #0
 8016e5e:	d001      	beq.n	8016e64 <MX_DAC_Init+0x24>
  {
    Error_Handler();
 8016e60:	f000 fb40 	bl	80174e4 <Error_Handler>
  }
  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8016e64:	2300      	movs	r3, #0
 8016e66:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8016e68:	2300      	movs	r3, #0
 8016e6a:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8016e6c:	463b      	mov	r3, r7
 8016e6e:	2200      	movs	r2, #0
 8016e70:	4619      	mov	r1, r3
 8016e72:	4810      	ldr	r0, [pc, #64]	; (8016eb4 <MX_DAC_Init+0x74>)
 8016e74:	f001 fd10 	bl	8018898 <HAL_DAC_ConfigChannel>
 8016e78:	4603      	mov	r3, r0
 8016e7a:	2b00      	cmp	r3, #0
 8016e7c:	d001      	beq.n	8016e82 <MX_DAC_Init+0x42>
  {
    Error_Handler();
 8016e7e:	f000 fb31 	bl	80174e4 <Error_Handler>
  }
  /** DAC channel OUT2 config
  */
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_DISABLE;
 8016e82:	2302      	movs	r3, #2
 8016e84:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 8016e86:	463b      	mov	r3, r7
 8016e88:	2210      	movs	r2, #16
 8016e8a:	4619      	mov	r1, r3
 8016e8c:	4809      	ldr	r0, [pc, #36]	; (8016eb4 <MX_DAC_Init+0x74>)
 8016e8e:	f001 fd03 	bl	8018898 <HAL_DAC_ConfigChannel>
 8016e92:	4603      	mov	r3, r0
 8016e94:	2b00      	cmp	r3, #0
 8016e96:	d001      	beq.n	8016e9c <MX_DAC_Init+0x5c>
  {
    Error_Handler();
 8016e98:	f000 fb24 	bl	80174e4 <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */
  HAL_DAC_SetValue(&hdac, DAC_CHANNEL_2, DAC_ALIGN_12B_R, 620);  //(620*4095)/330;//50mv
 8016e9c:	f44f 731b 	mov.w	r3, #620	; 0x26c
 8016ea0:	2200      	movs	r2, #0
 8016ea2:	2110      	movs	r1, #16
 8016ea4:	4803      	ldr	r0, [pc, #12]	; (8016eb4 <MX_DAC_Init+0x74>)
 8016ea6:	f001 fcd2 	bl	801884e <HAL_DAC_SetValue>
  /* USER CODE END DAC_Init 2 */

}
 8016eaa:	bf00      	nop
 8016eac:	3708      	adds	r7, #8
 8016eae:	46bd      	mov	sp, r7
 8016eb0:	bd80      	pop	{r7, pc}
 8016eb2:	bf00      	nop
 8016eb4:	20007928 	.word	0x20007928
 8016eb8:	40007400 	.word	0x40007400

08016ebc <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8016ebc:	b580      	push	{r7, lr}
 8016ebe:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8016ec0:	4b17      	ldr	r3, [pc, #92]	; (8016f20 <MX_SPI2_Init+0x64>)
 8016ec2:	4a18      	ldr	r2, [pc, #96]	; (8016f24 <MX_SPI2_Init+0x68>)
 8016ec4:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8016ec6:	4b16      	ldr	r3, [pc, #88]	; (8016f20 <MX_SPI2_Init+0x64>)
 8016ec8:	f44f 7282 	mov.w	r2, #260	; 0x104
 8016ecc:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8016ece:	4b14      	ldr	r3, [pc, #80]	; (8016f20 <MX_SPI2_Init+0x64>)
 8016ed0:	2200      	movs	r2, #0
 8016ed2:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8016ed4:	4b12      	ldr	r3, [pc, #72]	; (8016f20 <MX_SPI2_Init+0x64>)
 8016ed6:	2200      	movs	r2, #0
 8016ed8:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8016eda:	4b11      	ldr	r3, [pc, #68]	; (8016f20 <MX_SPI2_Init+0x64>)
 8016edc:	2202      	movs	r2, #2
 8016ede:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_2EDGE;
 8016ee0:	4b0f      	ldr	r3, [pc, #60]	; (8016f20 <MX_SPI2_Init+0x64>)
 8016ee2:	2201      	movs	r2, #1
 8016ee4:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8016ee6:	4b0e      	ldr	r3, [pc, #56]	; (8016f20 <MX_SPI2_Init+0x64>)
 8016ee8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8016eec:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8016eee:	4b0c      	ldr	r3, [pc, #48]	; (8016f20 <MX_SPI2_Init+0x64>)
 8016ef0:	2200      	movs	r2, #0
 8016ef2:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8016ef4:	4b0a      	ldr	r3, [pc, #40]	; (8016f20 <MX_SPI2_Init+0x64>)
 8016ef6:	2200      	movs	r2, #0
 8016ef8:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8016efa:	4b09      	ldr	r3, [pc, #36]	; (8016f20 <MX_SPI2_Init+0x64>)
 8016efc:	2200      	movs	r2, #0
 8016efe:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8016f00:	4b07      	ldr	r3, [pc, #28]	; (8016f20 <MX_SPI2_Init+0x64>)
 8016f02:	2200      	movs	r2, #0
 8016f04:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8016f06:	4b06      	ldr	r3, [pc, #24]	; (8016f20 <MX_SPI2_Init+0x64>)
 8016f08:	220a      	movs	r2, #10
 8016f0a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8016f0c:	4804      	ldr	r0, [pc, #16]	; (8016f20 <MX_SPI2_Init+0x64>)
 8016f0e:	f004 ff2f 	bl	801bd70 <HAL_SPI_Init>
 8016f12:	4603      	mov	r3, r0
 8016f14:	2b00      	cmp	r3, #0
 8016f16:	d001      	beq.n	8016f1c <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8016f18:	f000 fae4 	bl	80174e4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8016f1c:	bf00      	nop
 8016f1e:	bd80      	pop	{r7, pc}
 8016f20:	200076c0 	.word	0x200076c0
 8016f24:	40003800 	.word	0x40003800

08016f28 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8016f28:	b580      	push	{r7, lr}
 8016f2a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8016f2c:	4b18      	ldr	r3, [pc, #96]	; (8016f90 <MX_SPI3_Init+0x68>)
 8016f2e:	4a19      	ldr	r2, [pc, #100]	; (8016f94 <MX_SPI3_Init+0x6c>)
 8016f30:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8016f32:	4b17      	ldr	r3, [pc, #92]	; (8016f90 <MX_SPI3_Init+0x68>)
 8016f34:	f44f 7282 	mov.w	r2, #260	; 0x104
 8016f38:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8016f3a:	4b15      	ldr	r3, [pc, #84]	; (8016f90 <MX_SPI3_Init+0x68>)
 8016f3c:	2200      	movs	r2, #0
 8016f3e:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_16BIT;
 8016f40:	4b13      	ldr	r3, [pc, #76]	; (8016f90 <MX_SPI3_Init+0x68>)
 8016f42:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8016f46:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8016f48:	4b11      	ldr	r3, [pc, #68]	; (8016f90 <MX_SPI3_Init+0x68>)
 8016f4a:	2200      	movs	r2, #0
 8016f4c:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8016f4e:	4b10      	ldr	r3, [pc, #64]	; (8016f90 <MX_SPI3_Init+0x68>)
 8016f50:	2200      	movs	r2, #0
 8016f52:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8016f54:	4b0e      	ldr	r3, [pc, #56]	; (8016f90 <MX_SPI3_Init+0x68>)
 8016f56:	f44f 7200 	mov.w	r2, #512	; 0x200
 8016f5a:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8016f5c:	4b0c      	ldr	r3, [pc, #48]	; (8016f90 <MX_SPI3_Init+0x68>)
 8016f5e:	2210      	movs	r2, #16
 8016f60:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8016f62:	4b0b      	ldr	r3, [pc, #44]	; (8016f90 <MX_SPI3_Init+0x68>)
 8016f64:	2200      	movs	r2, #0
 8016f66:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8016f68:	4b09      	ldr	r3, [pc, #36]	; (8016f90 <MX_SPI3_Init+0x68>)
 8016f6a:	2200      	movs	r2, #0
 8016f6c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8016f6e:	4b08      	ldr	r3, [pc, #32]	; (8016f90 <MX_SPI3_Init+0x68>)
 8016f70:	2200      	movs	r2, #0
 8016f72:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 10;
 8016f74:	4b06      	ldr	r3, [pc, #24]	; (8016f90 <MX_SPI3_Init+0x68>)
 8016f76:	220a      	movs	r2, #10
 8016f78:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8016f7a:	4805      	ldr	r0, [pc, #20]	; (8016f90 <MX_SPI3_Init+0x68>)
 8016f7c:	f004 fef8 	bl	801bd70 <HAL_SPI_Init>
 8016f80:	4603      	mov	r3, r0
 8016f82:	2b00      	cmp	r3, #0
 8016f84:	d001      	beq.n	8016f8a <MX_SPI3_Init+0x62>
  {
    Error_Handler();
 8016f86:	f000 faad 	bl	80174e4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8016f8a:	bf00      	nop
 8016f8c:	bd80      	pop	{r7, pc}
 8016f8e:	bf00      	nop
 8016f90:	200077f0 	.word	0x200077f0
 8016f94:	40003c00 	.word	0x40003c00

08016f98 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8016f98:	b580      	push	{r7, lr}
 8016f9a:	b086      	sub	sp, #24
 8016f9c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8016f9e:	f107 0308 	add.w	r3, r7, #8
 8016fa2:	2200      	movs	r2, #0
 8016fa4:	601a      	str	r2, [r3, #0]
 8016fa6:	605a      	str	r2, [r3, #4]
 8016fa8:	609a      	str	r2, [r3, #8]
 8016faa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8016fac:	463b      	mov	r3, r7
 8016fae:	2200      	movs	r2, #0
 8016fb0:	601a      	str	r2, [r3, #0]
 8016fb2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */
  octim1.Pulse = 500;
 8016fb4:	4b30      	ldr	r3, [pc, #192]	; (8017078 <MX_TIM1_Init+0xe0>)
 8016fb6:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8016fba:	605a      	str	r2, [r3, #4]
  octim1.OCMode = TIM_OCMODE_PWM2;
 8016fbc:	4b2e      	ldr	r3, [pc, #184]	; (8017078 <MX_TIM1_Init+0xe0>)
 8016fbe:	2270      	movs	r2, #112	; 0x70
 8016fc0:	601a      	str	r2, [r3, #0]
  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8016fc2:	4b2e      	ldr	r3, [pc, #184]	; (801707c <MX_TIM1_Init+0xe4>)
 8016fc4:	4a2e      	ldr	r2, [pc, #184]	; (8017080 <MX_TIM1_Init+0xe8>)
 8016fc6:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 89;
 8016fc8:	4b2c      	ldr	r3, [pc, #176]	; (801707c <MX_TIM1_Init+0xe4>)
 8016fca:	2259      	movs	r2, #89	; 0x59
 8016fcc:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_DOWN;
 8016fce:	4b2b      	ldr	r3, [pc, #172]	; (801707c <MX_TIM1_Init+0xe4>)
 8016fd0:	2210      	movs	r2, #16
 8016fd2:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 999;
 8016fd4:	4b29      	ldr	r3, [pc, #164]	; (801707c <MX_TIM1_Init+0xe4>)
 8016fd6:	f240 32e7 	movw	r2, #999	; 0x3e7
 8016fda:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8016fdc:	4b27      	ldr	r3, [pc, #156]	; (801707c <MX_TIM1_Init+0xe4>)
 8016fde:	2200      	movs	r2, #0
 8016fe0:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8016fe2:	4b26      	ldr	r3, [pc, #152]	; (801707c <MX_TIM1_Init+0xe4>)
 8016fe4:	2200      	movs	r2, #0
 8016fe6:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8016fe8:	4b24      	ldr	r3, [pc, #144]	; (801707c <MX_TIM1_Init+0xe4>)
 8016fea:	2280      	movs	r2, #128	; 0x80
 8016fec:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8016fee:	4823      	ldr	r0, [pc, #140]	; (801707c <MX_TIM1_Init+0xe4>)
 8016ff0:	f005 fd84 	bl	801cafc <HAL_TIM_Base_Init>
 8016ff4:	4603      	mov	r3, r0
 8016ff6:	2b00      	cmp	r3, #0
 8016ff8:	d001      	beq.n	8016ffe <MX_TIM1_Init+0x66>
  {
    Error_Handler();
 8016ffa:	f000 fa73 	bl	80174e4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8016ffe:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8017002:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8017004:	f107 0308 	add.w	r3, r7, #8
 8017008:	4619      	mov	r1, r3
 801700a:	481c      	ldr	r0, [pc, #112]	; (801707c <MX_TIM1_Init+0xe4>)
 801700c:	f005 ff9a 	bl	801cf44 <HAL_TIM_ConfigClockSource>
 8017010:	4603      	mov	r3, r0
 8017012:	2b00      	cmp	r3, #0
 8017014:	d001      	beq.n	801701a <MX_TIM1_Init+0x82>
  {
    Error_Handler();
 8017016:	f000 fa65 	bl	80174e4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 801701a:	2300      	movs	r3, #0
 801701c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 801701e:	2300      	movs	r3, #0
 8017020:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8017022:	463b      	mov	r3, r7
 8017024:	4619      	mov	r1, r3
 8017026:	4815      	ldr	r0, [pc, #84]	; (801707c <MX_TIM1_Init+0xe4>)
 8017028:	f006 fb66 	bl	801d6f8 <HAL_TIMEx_MasterConfigSynchronization>
 801702c:	4603      	mov	r3, r0
 801702e:	2b00      	cmp	r3, #0
 8017030:	d001      	beq.n	8017036 <MX_TIM1_Init+0x9e>
  {
    Error_Handler();
 8017032:	f000 fa57 	bl	80174e4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */
  HAL_TIM_OC_ConfigChannel(&htim1, &octim1, 1 );
 8017036:	2201      	movs	r2, #1
 8017038:	490f      	ldr	r1, [pc, #60]	; (8017078 <MX_TIM1_Init+0xe0>)
 801703a:	4810      	ldr	r0, [pc, #64]	; (801707c <MX_TIM1_Init+0xe4>)
 801703c:	f005 ff26 	bl	801ce8c <HAL_TIM_OC_ConfigChannel>
  __HAL_TIM_URS_ENABLE(&htim1);
 8017040:	4b0e      	ldr	r3, [pc, #56]	; (801707c <MX_TIM1_Init+0xe4>)
 8017042:	681b      	ldr	r3, [r3, #0]
 8017044:	681a      	ldr	r2, [r3, #0]
 8017046:	4b0d      	ldr	r3, [pc, #52]	; (801707c <MX_TIM1_Init+0xe4>)
 8017048:	681b      	ldr	r3, [r3, #0]
 801704a:	f042 0204 	orr.w	r2, r2, #4
 801704e:	601a      	str	r2, [r3, #0]
  __HAL_TIM_ENABLE_DMA(&htim1, TIM_DMA_CC1 | TIM_DMA_TRIGGER);
 8017050:	4b0a      	ldr	r3, [pc, #40]	; (801707c <MX_TIM1_Init+0xe4>)
 8017052:	681b      	ldr	r3, [r3, #0]
 8017054:	68da      	ldr	r2, [r3, #12]
 8017056:	4b09      	ldr	r3, [pc, #36]	; (801707c <MX_TIM1_Init+0xe4>)
 8017058:	681b      	ldr	r3, [r3, #0]
 801705a:	f442 4284 	orr.w	r2, r2, #16896	; 0x4200
 801705e:	60da      	str	r2, [r3, #12]
  __HAL_TIM_ENABLE(&htim1);
 8017060:	4b06      	ldr	r3, [pc, #24]	; (801707c <MX_TIM1_Init+0xe4>)
 8017062:	681b      	ldr	r3, [r3, #0]
 8017064:	681a      	ldr	r2, [r3, #0]
 8017066:	4b05      	ldr	r3, [pc, #20]	; (801707c <MX_TIM1_Init+0xe4>)
 8017068:	681b      	ldr	r3, [r3, #0]
 801706a:	f042 0201 	orr.w	r2, r2, #1
 801706e:	601a      	str	r2, [r3, #0]
  /* USER CODE END TIM1_Init 2 */

}
 8017070:	bf00      	nop
 8017072:	3718      	adds	r7, #24
 8017074:	46bd      	mov	sp, r7
 8017076:	bd80      	pop	{r7, pc}
 8017078:	2000799c 	.word	0x2000799c
 801707c:	200079b8 	.word	0x200079b8
 8017080:	40010000 	.word	0x40010000

08017084 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8017084:	b580      	push	{r7, lr}
 8017086:	b086      	sub	sp, #24
 8017088:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 801708a:	f107 0308 	add.w	r3, r7, #8
 801708e:	2200      	movs	r2, #0
 8017090:	601a      	str	r2, [r3, #0]
 8017092:	605a      	str	r2, [r3, #4]
 8017094:	609a      	str	r2, [r3, #8]
 8017096:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8017098:	463b      	mov	r3, r7
 801709a:	2200      	movs	r2, #0
 801709c:	601a      	str	r2, [r3, #0]
 801709e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */
  octim3.Pulse = 3750;
 80170a0:	4b25      	ldr	r3, [pc, #148]	; (8017138 <MX_TIM3_Init+0xb4>)
 80170a2:	f640 62a6 	movw	r2, #3750	; 0xea6
 80170a6:	605a      	str	r2, [r3, #4]
  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80170a8:	4b24      	ldr	r3, [pc, #144]	; (801713c <MX_TIM3_Init+0xb8>)
 80170aa:	4a25      	ldr	r2, [pc, #148]	; (8017140 <MX_TIM3_Init+0xbc>)
 80170ac:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 11;
 80170ae:	4b23      	ldr	r3, [pc, #140]	; (801713c <MX_TIM3_Init+0xb8>)
 80170b0:	220b      	movs	r2, #11
 80170b2:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80170b4:	4b21      	ldr	r3, [pc, #132]	; (801713c <MX_TIM3_Init+0xb8>)
 80170b6:	2200      	movs	r2, #0
 80170b8:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 7499;
 80170ba:	4b20      	ldr	r3, [pc, #128]	; (801713c <MX_TIM3_Init+0xb8>)
 80170bc:	f641 524b 	movw	r2, #7499	; 0x1d4b
 80170c0:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80170c2:	4b1e      	ldr	r3, [pc, #120]	; (801713c <MX_TIM3_Init+0xb8>)
 80170c4:	2200      	movs	r2, #0
 80170c6:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80170c8:	4b1c      	ldr	r3, [pc, #112]	; (801713c <MX_TIM3_Init+0xb8>)
 80170ca:	2280      	movs	r2, #128	; 0x80
 80170cc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80170ce:	481b      	ldr	r0, [pc, #108]	; (801713c <MX_TIM3_Init+0xb8>)
 80170d0:	f005 fd14 	bl	801cafc <HAL_TIM_Base_Init>
 80170d4:	4603      	mov	r3, r0
 80170d6:	2b00      	cmp	r3, #0
 80170d8:	d001      	beq.n	80170de <MX_TIM3_Init+0x5a>
  {
    Error_Handler();
 80170da:	f000 fa03 	bl	80174e4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80170de:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80170e2:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80170e4:	f107 0308 	add.w	r3, r7, #8
 80170e8:	4619      	mov	r1, r3
 80170ea:	4814      	ldr	r0, [pc, #80]	; (801713c <MX_TIM3_Init+0xb8>)
 80170ec:	f005 ff2a 	bl	801cf44 <HAL_TIM_ConfigClockSource>
 80170f0:	4603      	mov	r3, r0
 80170f2:	2b00      	cmp	r3, #0
 80170f4:	d001      	beq.n	80170fa <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 80170f6:	f000 f9f5 	bl	80174e4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80170fa:	2320      	movs	r3, #32
 80170fc:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80170fe:	2300      	movs	r3, #0
 8017100:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8017102:	463b      	mov	r3, r7
 8017104:	4619      	mov	r1, r3
 8017106:	480d      	ldr	r0, [pc, #52]	; (801713c <MX_TIM3_Init+0xb8>)
 8017108:	f006 faf6 	bl	801d6f8 <HAL_TIMEx_MasterConfigSynchronization>
 801710c:	4603      	mov	r3, r0
 801710e:	2b00      	cmp	r3, #0
 8017110:	d001      	beq.n	8017116 <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8017112:	f000 f9e7 	bl	80174e4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */
  HAL_TIM_OC_ConfigChannel(&htim3, &octim3, 1 );
 8017116:	2201      	movs	r2, #1
 8017118:	4907      	ldr	r1, [pc, #28]	; (8017138 <MX_TIM3_Init+0xb4>)
 801711a:	4808      	ldr	r0, [pc, #32]	; (801713c <MX_TIM3_Init+0xb8>)
 801711c:	f005 feb6 	bl	801ce8c <HAL_TIM_OC_ConfigChannel>
  __HAL_TIM_ENABLE(&htim3);
 8017120:	4b06      	ldr	r3, [pc, #24]	; (801713c <MX_TIM3_Init+0xb8>)
 8017122:	681b      	ldr	r3, [r3, #0]
 8017124:	681a      	ldr	r2, [r3, #0]
 8017126:	4b05      	ldr	r3, [pc, #20]	; (801713c <MX_TIM3_Init+0xb8>)
 8017128:	681b      	ldr	r3, [r3, #0]
 801712a:	f042 0201 	orr.w	r2, r2, #1
 801712e:	601a      	str	r2, [r3, #0]

  /* USER CODE END TIM3_Init 2 */

}
 8017130:	bf00      	nop
 8017132:	3718      	adds	r7, #24
 8017134:	46bd      	mov	sp, r7
 8017136:	bd80      	pop	{r7, pc}
 8017138:	200078f0 	.word	0x200078f0
 801713c:	200077a8 	.word	0x200077a8
 8017140:	40000400 	.word	0x40000400

08017144 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8017144:	b580      	push	{r7, lr}
 8017146:	b086      	sub	sp, #24
 8017148:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 801714a:	f107 0308 	add.w	r3, r7, #8
 801714e:	2200      	movs	r2, #0
 8017150:	601a      	str	r2, [r3, #0]
 8017152:	605a      	str	r2, [r3, #4]
 8017154:	609a      	str	r2, [r3, #8]
 8017156:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8017158:	463b      	mov	r3, r7
 801715a:	2200      	movs	r2, #0
 801715c:	601a      	str	r2, [r3, #0]
 801715e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */
  octim5.Pulse = (FARR[List[FREQ_OUT].Val]+1)/2;
 8017160:	4b3a      	ldr	r3, [pc, #232]	; (801724c <MX_TIM5_Init+0x108>)
 8017162:	f9b3 312c 	ldrsh.w	r3, [r3, #300]	; 0x12c
 8017166:	461a      	mov	r2, r3
 8017168:	4b39      	ldr	r3, [pc, #228]	; (8017250 <MX_TIM5_Init+0x10c>)
 801716a:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 801716e:	3301      	adds	r3, #1
 8017170:	0fda      	lsrs	r2, r3, #31
 8017172:	4413      	add	r3, r2
 8017174:	105b      	asrs	r3, r3, #1
 8017176:	461a      	mov	r2, r3
 8017178:	4b36      	ldr	r3, [pc, #216]	; (8017254 <MX_TIM5_Init+0x110>)
 801717a:	605a      	str	r2, [r3, #4]
  octim5.OCMode = TIM_OCMODE_PWM2;
 801717c:	4b35      	ldr	r3, [pc, #212]	; (8017254 <MX_TIM5_Init+0x110>)
 801717e:	2270      	movs	r2, #112	; 0x70
 8017180:	601a      	str	r2, [r3, #0]
  octim5.OCFastMode = TIM_OCFAST_ENABLE;
 8017182:	4b34      	ldr	r3, [pc, #208]	; (8017254 <MX_TIM5_Init+0x110>)
 8017184:	2204      	movs	r2, #4
 8017186:	611a      	str	r2, [r3, #16]
  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8017188:	4b33      	ldr	r3, [pc, #204]	; (8017258 <MX_TIM5_Init+0x114>)
 801718a:	4a34      	ldr	r2, [pc, #208]	; (801725c <MX_TIM5_Init+0x118>)
 801718c:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 9;
 801718e:	4b32      	ldr	r3, [pc, #200]	; (8017258 <MX_TIM5_Init+0x114>)
 8017190:	2209      	movs	r2, #9
 8017192:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8017194:	4b30      	ldr	r3, [pc, #192]	; (8017258 <MX_TIM5_Init+0x114>)
 8017196:	2200      	movs	r2, #0
 8017198:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 18000;
 801719a:	4b2f      	ldr	r3, [pc, #188]	; (8017258 <MX_TIM5_Init+0x114>)
 801719c:	f244 6250 	movw	r2, #18000	; 0x4650
 80171a0:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80171a2:	4b2d      	ldr	r3, [pc, #180]	; (8017258 <MX_TIM5_Init+0x114>)
 80171a4:	2200      	movs	r2, #0
 80171a6:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80171a8:	4b2b      	ldr	r3, [pc, #172]	; (8017258 <MX_TIM5_Init+0x114>)
 80171aa:	2280      	movs	r2, #128	; 0x80
 80171ac:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 80171ae:	482a      	ldr	r0, [pc, #168]	; (8017258 <MX_TIM5_Init+0x114>)
 80171b0:	f005 fca4 	bl	801cafc <HAL_TIM_Base_Init>
 80171b4:	4603      	mov	r3, r0
 80171b6:	2b00      	cmp	r3, #0
 80171b8:	d001      	beq.n	80171be <MX_TIM5_Init+0x7a>
  {
    Error_Handler();
 80171ba:	f000 f993 	bl	80174e4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80171be:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80171c2:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 80171c4:	f107 0308 	add.w	r3, r7, #8
 80171c8:	4619      	mov	r1, r3
 80171ca:	4823      	ldr	r0, [pc, #140]	; (8017258 <MX_TIM5_Init+0x114>)
 80171cc:	f005 feba 	bl	801cf44 <HAL_TIM_ConfigClockSource>
 80171d0:	4603      	mov	r3, r0
 80171d2:	2b00      	cmp	r3, #0
 80171d4:	d001      	beq.n	80171da <MX_TIM5_Init+0x96>
  {
    Error_Handler();
 80171d6:	f000 f985 	bl	80174e4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80171da:	2300      	movs	r3, #0
 80171dc:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80171de:	2300      	movs	r3, #0
 80171e0:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 80171e2:	463b      	mov	r3, r7
 80171e4:	4619      	mov	r1, r3
 80171e6:	481c      	ldr	r0, [pc, #112]	; (8017258 <MX_TIM5_Init+0x114>)
 80171e8:	f006 fa86 	bl	801d6f8 <HAL_TIMEx_MasterConfigSynchronization>
 80171ec:	4603      	mov	r3, r0
 80171ee:	2b00      	cmp	r3, #0
 80171f0:	d001      	beq.n	80171f6 <MX_TIM5_Init+0xb2>
  {
    Error_Handler();
 80171f2:	f000 f977 	bl	80174e4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */
  htim5.Init.Period = FARR[List[FREQ_OUT].Val];
 80171f6:	4b15      	ldr	r3, [pc, #84]	; (801724c <MX_TIM5_Init+0x108>)
 80171f8:	f9b3 312c 	ldrsh.w	r3, [r3, #300]	; 0x12c
 80171fc:	461a      	mov	r2, r3
 80171fe:	4b14      	ldr	r3, [pc, #80]	; (8017250 <MX_TIM5_Init+0x10c>)
 8017200:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8017204:	461a      	mov	r2, r3
 8017206:	4b14      	ldr	r3, [pc, #80]	; (8017258 <MX_TIM5_Init+0x114>)
 8017208:	60da      	str	r2, [r3, #12]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 801720a:	4813      	ldr	r0, [pc, #76]	; (8017258 <MX_TIM5_Init+0x114>)
 801720c:	f005 fc76 	bl	801cafc <HAL_TIM_Base_Init>
 8017210:	4603      	mov	r3, r0
 8017212:	2b00      	cmp	r3, #0
 8017214:	d001      	beq.n	801721a <MX_TIM5_Init+0xd6>
  {
    Error_Handler();
 8017216:	f000 f965 	bl	80174e4 <Error_Handler>
  }
  HAL_TIM_OC_ConfigChannel(&htim5, &octim5, 3 );
 801721a:	2203      	movs	r2, #3
 801721c:	490d      	ldr	r1, [pc, #52]	; (8017254 <MX_TIM5_Init+0x110>)
 801721e:	480e      	ldr	r0, [pc, #56]	; (8017258 <MX_TIM5_Init+0x114>)
 8017220:	f005 fe34 	bl	801ce8c <HAL_TIM_OC_ConfigChannel>
  __HAL_TIM_URS_ENABLE(&htim5);
 8017224:	4b0c      	ldr	r3, [pc, #48]	; (8017258 <MX_TIM5_Init+0x114>)
 8017226:	681b      	ldr	r3, [r3, #0]
 8017228:	681a      	ldr	r2, [r3, #0]
 801722a:	4b0b      	ldr	r3, [pc, #44]	; (8017258 <MX_TIM5_Init+0x114>)
 801722c:	681b      	ldr	r3, [r3, #0]
 801722e:	f042 0204 	orr.w	r2, r2, #4
 8017232:	601a      	str	r2, [r3, #0]
  __HAL_TIM_ENABLE(&htim5);
 8017234:	4b08      	ldr	r3, [pc, #32]	; (8017258 <MX_TIM5_Init+0x114>)
 8017236:	681b      	ldr	r3, [r3, #0]
 8017238:	681a      	ldr	r2, [r3, #0]
 801723a:	4b07      	ldr	r3, [pc, #28]	; (8017258 <MX_TIM5_Init+0x114>)
 801723c:	681b      	ldr	r3, [r3, #0]
 801723e:	f042 0201 	orr.w	r2, r2, #1
 8017242:	601a      	str	r2, [r3, #0]
  /* USER CODE END TIM5_Init 2 */

}
 8017244:	bf00      	nop
 8017246:	3718      	adds	r7, #24
 8017248:	46bd      	mov	sp, r7
 801724a:	bd80      	pop	{r7, pc}
 801724c:	20000274 	.word	0x20000274
 8017250:	08000b84 	.word	0x08000b84
 8017254:	2000790c 	.word	0x2000790c
 8017258:	20007760 	.word	0x20007760
 801725c:	40000c00 	.word	0x40000c00

08017260 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 8017260:	b580      	push	{r7, lr}
 8017262:	b082      	sub	sp, #8
 8017264:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */
  // aka tim_da
  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8017266:	463b      	mov	r3, r7
 8017268:	2200      	movs	r2, #0
 801726a:	601a      	str	r2, [r3, #0]
 801726c:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 801726e:	4b1d      	ldr	r3, [pc, #116]	; (80172e4 <MX_TIM7_Init+0x84>)
 8017270:	4a1d      	ldr	r2, [pc, #116]	; (80172e8 <MX_TIM7_Init+0x88>)
 8017272:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 2;
 8017274:	4b1b      	ldr	r3, [pc, #108]	; (80172e4 <MX_TIM7_Init+0x84>)
 8017276:	2202      	movs	r2, #2
 8017278:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 801727a:	4b1a      	ldr	r3, [pc, #104]	; (80172e4 <MX_TIM7_Init+0x84>)
 801727c:	2200      	movs	r2, #0
 801727e:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 999;
 8017280:	4b18      	ldr	r3, [pc, #96]	; (80172e4 <MX_TIM7_Init+0x84>)
 8017282:	f240 32e7 	movw	r2, #999	; 0x3e7
 8017286:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8017288:	4b16      	ldr	r3, [pc, #88]	; (80172e4 <MX_TIM7_Init+0x84>)
 801728a:	2200      	movs	r2, #0
 801728c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 801728e:	4815      	ldr	r0, [pc, #84]	; (80172e4 <MX_TIM7_Init+0x84>)
 8017290:	f005 fc34 	bl	801cafc <HAL_TIM_Base_Init>
 8017294:	4603      	mov	r3, r0
 8017296:	2b00      	cmp	r3, #0
 8017298:	d001      	beq.n	801729e <MX_TIM7_Init+0x3e>
  {
    Error_Handler();
 801729a:	f000 f923 	bl	80174e4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 801729e:	2300      	movs	r3, #0
 80172a0:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80172a2:	2300      	movs	r3, #0
 80172a4:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 80172a6:	463b      	mov	r3, r7
 80172a8:	4619      	mov	r1, r3
 80172aa:	480e      	ldr	r0, [pc, #56]	; (80172e4 <MX_TIM7_Init+0x84>)
 80172ac:	f006 fa24 	bl	801d6f8 <HAL_TIMEx_MasterConfigSynchronization>
 80172b0:	4603      	mov	r3, r0
 80172b2:	2b00      	cmp	r3, #0
 80172b4:	d001      	beq.n	80172ba <MX_TIM7_Init+0x5a>
  {
    Error_Handler();
 80172b6:	f000 f915 	bl	80174e4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */
  __HAL_TIM_ENABLE_DMA(&htim7,TIM_DMA_UPDATE);
 80172ba:	4b0a      	ldr	r3, [pc, #40]	; (80172e4 <MX_TIM7_Init+0x84>)
 80172bc:	681b      	ldr	r3, [r3, #0]
 80172be:	68da      	ldr	r2, [r3, #12]
 80172c0:	4b08      	ldr	r3, [pc, #32]	; (80172e4 <MX_TIM7_Init+0x84>)
 80172c2:	681b      	ldr	r3, [r3, #0]
 80172c4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80172c8:	60da      	str	r2, [r3, #12]
  __HAL_TIM_ENABLE(&htim7);
 80172ca:	4b06      	ldr	r3, [pc, #24]	; (80172e4 <MX_TIM7_Init+0x84>)
 80172cc:	681b      	ldr	r3, [r3, #0]
 80172ce:	681a      	ldr	r2, [r3, #0]
 80172d0:	4b04      	ldr	r3, [pc, #16]	; (80172e4 <MX_TIM7_Init+0x84>)
 80172d2:	681b      	ldr	r3, [r3, #0]
 80172d4:	f042 0201 	orr.w	r2, r2, #1
 80172d8:	601a      	str	r2, [r3, #0]
  /* USER CODE END TIM7_Init 2 */

}
 80172da:	bf00      	nop
 80172dc:	3708      	adds	r7, #8
 80172de:	46bd      	mov	sp, r7
 80172e0:	bd80      	pop	{r7, pc}
 80172e2:	bf00      	nop
 80172e4:	20007a00 	.word	0x20007a00
 80172e8:	40001400 	.word	0x40001400

080172ec <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80172ec:	b580      	push	{r7, lr}
 80172ee:	b082      	sub	sp, #8
 80172f0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80172f2:	2300      	movs	r3, #0
 80172f4:	607b      	str	r3, [r7, #4]
 80172f6:	4b17      	ldr	r3, [pc, #92]	; (8017354 <MX_DMA_Init+0x68>)
 80172f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80172fa:	4a16      	ldr	r2, [pc, #88]	; (8017354 <MX_DMA_Init+0x68>)
 80172fc:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8017300:	6313      	str	r3, [r2, #48]	; 0x30
 8017302:	4b14      	ldr	r3, [pc, #80]	; (8017354 <MX_DMA_Init+0x68>)
 8017304:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8017306:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 801730a:	607b      	str	r3, [r7, #4]
 801730c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 801730e:	2300      	movs	r3, #0
 8017310:	603b      	str	r3, [r7, #0]
 8017312:	4b10      	ldr	r3, [pc, #64]	; (8017354 <MX_DMA_Init+0x68>)
 8017314:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8017316:	4a0f      	ldr	r2, [pc, #60]	; (8017354 <MX_DMA_Init+0x68>)
 8017318:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 801731c:	6313      	str	r3, [r2, #48]	; 0x30
 801731e:	4b0d      	ldr	r3, [pc, #52]	; (8017354 <MX_DMA_Init+0x68>)
 8017320:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8017322:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8017326:	603b      	str	r3, [r7, #0]
 8017328:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 801732a:	2200      	movs	r2, #0
 801732c:	2100      	movs	r1, #0
 801732e:	2010      	movs	r0, #16
 8017330:	f001 fa35 	bl	801879e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8017334:	2010      	movs	r0, #16
 8017336:	f001 fa4e 	bl	80187d6 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 801733a:	2200      	movs	r2, #0
 801733c:	2100      	movs	r1, #0
 801733e:	2038      	movs	r0, #56	; 0x38
 8017340:	f001 fa2d 	bl	801879e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8017344:	2038      	movs	r0, #56	; 0x38
 8017346:	f001 fa46 	bl	80187d6 <HAL_NVIC_EnableIRQ>

}
 801734a:	bf00      	nop
 801734c:	3708      	adds	r7, #8
 801734e:	46bd      	mov	sp, r7
 8017350:	bd80      	pop	{r7, pc}
 8017352:	bf00      	nop
 8017354:	40023800 	.word	0x40023800

08017358 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8017358:	b580      	push	{r7, lr}
 801735a:	b08a      	sub	sp, #40	; 0x28
 801735c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 801735e:	f107 0314 	add.w	r3, r7, #20
 8017362:	2200      	movs	r2, #0
 8017364:	601a      	str	r2, [r3, #0]
 8017366:	605a      	str	r2, [r3, #4]
 8017368:	609a      	str	r2, [r3, #8]
 801736a:	60da      	str	r2, [r3, #12]
 801736c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 801736e:	2300      	movs	r3, #0
 8017370:	613b      	str	r3, [r7, #16]
 8017372:	4b4e      	ldr	r3, [pc, #312]	; (80174ac <MX_GPIO_Init+0x154>)
 8017374:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8017376:	4a4d      	ldr	r2, [pc, #308]	; (80174ac <MX_GPIO_Init+0x154>)
 8017378:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801737c:	6313      	str	r3, [r2, #48]	; 0x30
 801737e:	4b4b      	ldr	r3, [pc, #300]	; (80174ac <MX_GPIO_Init+0x154>)
 8017380:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8017382:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8017386:	613b      	str	r3, [r7, #16]
 8017388:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 801738a:	2300      	movs	r3, #0
 801738c:	60fb      	str	r3, [r7, #12]
 801738e:	4b47      	ldr	r3, [pc, #284]	; (80174ac <MX_GPIO_Init+0x154>)
 8017390:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8017392:	4a46      	ldr	r2, [pc, #280]	; (80174ac <MX_GPIO_Init+0x154>)
 8017394:	f043 0301 	orr.w	r3, r3, #1
 8017398:	6313      	str	r3, [r2, #48]	; 0x30
 801739a:	4b44      	ldr	r3, [pc, #272]	; (80174ac <MX_GPIO_Init+0x154>)
 801739c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801739e:	f003 0301 	and.w	r3, r3, #1
 80173a2:	60fb      	str	r3, [r7, #12]
 80173a4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80173a6:	2300      	movs	r3, #0
 80173a8:	60bb      	str	r3, [r7, #8]
 80173aa:	4b40      	ldr	r3, [pc, #256]	; (80174ac <MX_GPIO_Init+0x154>)
 80173ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80173ae:	4a3f      	ldr	r2, [pc, #252]	; (80174ac <MX_GPIO_Init+0x154>)
 80173b0:	f043 0304 	orr.w	r3, r3, #4
 80173b4:	6313      	str	r3, [r2, #48]	; 0x30
 80173b6:	4b3d      	ldr	r3, [pc, #244]	; (80174ac <MX_GPIO_Init+0x154>)
 80173b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80173ba:	f003 0304 	and.w	r3, r3, #4
 80173be:	60bb      	str	r3, [r7, #8]
 80173c0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80173c2:	2300      	movs	r3, #0
 80173c4:	607b      	str	r3, [r7, #4]
 80173c6:	4b39      	ldr	r3, [pc, #228]	; (80174ac <MX_GPIO_Init+0x154>)
 80173c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80173ca:	4a38      	ldr	r2, [pc, #224]	; (80174ac <MX_GPIO_Init+0x154>)
 80173cc:	f043 0302 	orr.w	r3, r3, #2
 80173d0:	6313      	str	r3, [r2, #48]	; 0x30
 80173d2:	4b36      	ldr	r3, [pc, #216]	; (80174ac <MX_GPIO_Init+0x154>)
 80173d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80173d6:	f003 0302 	and.w	r3, r3, #2
 80173da:	607b      	str	r3, [r7, #4]
 80173dc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Fo2_GPIO_Port, Fo2_Pin, GPIO_PIN_RESET);
 80173de:	2200      	movs	r2, #0
 80173e0:	2104      	movs	r1, #4
 80173e2:	4833      	ldr	r0, [pc, #204]	; (80174b0 <MX_GPIO_Init+0x158>)
 80173e4:	f002 fa48 	bl	8019878 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, Az_Pin|Ay_Pin|LcdRs_Pin, GPIO_PIN_RESET);
 80173e8:	2200      	movs	r2, #0
 80173ea:	f44f 6103 	mov.w	r1, #2096	; 0x830
 80173ee:	4831      	ldr	r0, [pc, #196]	; (80174b4 <MX_GPIO_Init+0x15c>)
 80173f0:	f002 fa42 	bl	8019878 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, Ax_Pin|Dres_Pin, GPIO_PIN_RESET);
 80173f4:	2200      	movs	r2, #0
 80173f6:	f240 2101 	movw	r1, #513	; 0x201
 80173fa:	482f      	ldr	r0, [pc, #188]	; (80174b8 <MX_GPIO_Init+0x160>)
 80173fc:	f002 fa3c 	bl	8019878 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SS_Pin|TpCs_Pin, GPIO_PIN_SET);
 8017400:	2201      	movs	r2, #1
 8017402:	f44f 5182 	mov.w	r1, #4160	; 0x1040
 8017406:	482c      	ldr	r0, [pc, #176]	; (80174b8 <MX_GPIO_Init+0x160>)
 8017408:	f002 fa36 	bl	8019878 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LcdCs_GPIO_Port, LcdCs_Pin, GPIO_PIN_SET);
 801740c:	2201      	movs	r2, #1
 801740e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8017412:	4828      	ldr	r0, [pc, #160]	; (80174b4 <MX_GPIO_Init+0x15c>)
 8017414:	f002 fa30 	bl	8019878 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : Fo2_Pin */
  GPIO_InitStruct.Pin = Fo2_Pin;
 8017418:	2304      	movs	r3, #4
 801741a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 801741c:	2301      	movs	r3, #1
 801741e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8017420:	2300      	movs	r3, #0
 8017422:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8017424:	2300      	movs	r3, #0
 8017426:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(Fo2_GPIO_Port, &GPIO_InitStruct);
 8017428:	f107 0314 	add.w	r3, r7, #20
 801742c:	4619      	mov	r1, r3
 801742e:	4820      	ldr	r0, [pc, #128]	; (80174b0 <MX_GPIO_Init+0x158>)
 8017430:	f002 f876 	bl	8019520 <HAL_GPIO_Init>

  /*Configure GPIO pins : Az_Pin Ay_Pin LcdRs_Pin LcdCs_Pin */
  GPIO_InitStruct.Pin = Az_Pin|Ay_Pin|LcdRs_Pin|LcdCs_Pin;
 8017434:	f641 0330 	movw	r3, #6192	; 0x1830
 8017438:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 801743a:	2301      	movs	r3, #1
 801743c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 801743e:	2300      	movs	r3, #0
 8017440:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8017442:	2300      	movs	r3, #0
 8017444:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8017446:	f107 0314 	add.w	r3, r7, #20
 801744a:	4619      	mov	r1, r3
 801744c:	4819      	ldr	r0, [pc, #100]	; (80174b4 <MX_GPIO_Init+0x15c>)
 801744e:	f002 f867 	bl	8019520 <HAL_GPIO_Init>

  /*Configure GPIO pins : Ax_Pin SS_Pin TpCs_Pin Dres_Pin */
  GPIO_InitStruct.Pin = Ax_Pin|SS_Pin|TpCs_Pin|Dres_Pin;
 8017452:	f241 2341 	movw	r3, #4673	; 0x1241
 8017456:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8017458:	2301      	movs	r3, #1
 801745a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 801745c:	2300      	movs	r3, #0
 801745e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8017460:	2300      	movs	r3, #0
 8017462:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8017464:	f107 0314 	add.w	r3, r7, #20
 8017468:	4619      	mov	r1, r3
 801746a:	4813      	ldr	r0, [pc, #76]	; (80174b8 <MX_GPIO_Init+0x160>)
 801746c:	f002 f858 	bl	8019520 <HAL_GPIO_Init>

  /*Configure GPIO pin : Boot1_Pin */
  GPIO_InitStruct.Pin = Boot1_Pin;
 8017470:	2304      	movs	r3, #4
 8017472:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8017474:	2300      	movs	r3, #0
 8017476:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8017478:	2300      	movs	r3, #0
 801747a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Boot1_GPIO_Port, &GPIO_InitStruct);
 801747c:	f107 0314 	add.w	r3, r7, #20
 8017480:	4619      	mov	r1, r3
 8017482:	480d      	ldr	r0, [pc, #52]	; (80174b8 <MX_GPIO_Init+0x160>)
 8017484:	f002 f84c 	bl	8019520 <HAL_GPIO_Init>

  /*Configure GPIO pin : TpI_Pin */
  GPIO_InitStruct.Pin = TpI_Pin;
 8017488:	f44f 7380 	mov.w	r3, #256	; 0x100
 801748c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 801748e:	2300      	movs	r3, #0
 8017490:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8017492:	2301      	movs	r3, #1
 8017494:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(TpI_GPIO_Port, &GPIO_InitStruct);
 8017496:	f107 0314 	add.w	r3, r7, #20
 801749a:	4619      	mov	r1, r3
 801749c:	4806      	ldr	r0, [pc, #24]	; (80174b8 <MX_GPIO_Init+0x160>)
 801749e:	f002 f83f 	bl	8019520 <HAL_GPIO_Init>

}
 80174a2:	bf00      	nop
 80174a4:	3728      	adds	r7, #40	; 0x28
 80174a6:	46bd      	mov	sp, r7
 80174a8:	bd80      	pop	{r7, pc}
 80174aa:	bf00      	nop
 80174ac:	40023800 	.word	0x40023800
 80174b0:	40020000 	.word	0x40020000
 80174b4:	40020800 	.word	0x40020800
 80174b8:	40020400 	.word	0x40020400

080174bc <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
// Callback: timer has rolled over
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80174bc:	b580      	push	{r7, lr}
 80174be:	b082      	sub	sp, #8
 80174c0:	af00      	add	r7, sp, #0
 80174c2:	6078      	str	r0, [r7, #4]
  // Check which version of the timer triggered this callback
  if (htim == &htim3 )
 80174c4:	687b      	ldr	r3, [r7, #4]
 80174c6:	4a06      	ldr	r2, [pc, #24]	; (80174e0 <HAL_TIM_PeriodElapsedCallback+0x24>)
 80174c8:	4293      	cmp	r3, r2
 80174ca:	d105      	bne.n	80174d8 <HAL_TIM_PeriodElapsedCallback+0x1c>
  {
	  htim->Instance->SR =0;
 80174cc:	687b      	ldr	r3, [r7, #4]
 80174ce:	681b      	ldr	r3, [r3, #0]
 80174d0:	2200      	movs	r2, #0
 80174d2:	611a      	str	r2, [r3, #16]
	  Tim3_ISP();
 80174d4:	f7f5 fb1a 	bl	800cb0c <Tim3_ISP>
  }
}
 80174d8:	bf00      	nop
 80174da:	3708      	adds	r7, #8
 80174dc:	46bd      	mov	sp, r7
 80174de:	bd80      	pop	{r7, pc}
 80174e0:	200077a8 	.word	0x200077a8

080174e4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80174e4:	b480      	push	{r7}
 80174e6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80174e8:	b672      	cpsid	i
}
 80174ea:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80174ec:	e7fe      	b.n	80174ec <Error_Handler+0x8>
	...

080174f0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80174f0:	b480      	push	{r7}
 80174f2:	b083      	sub	sp, #12
 80174f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80174f6:	2300      	movs	r3, #0
 80174f8:	607b      	str	r3, [r7, #4]
 80174fa:	4b10      	ldr	r3, [pc, #64]	; (801753c <HAL_MspInit+0x4c>)
 80174fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80174fe:	4a0f      	ldr	r2, [pc, #60]	; (801753c <HAL_MspInit+0x4c>)
 8017500:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8017504:	6453      	str	r3, [r2, #68]	; 0x44
 8017506:	4b0d      	ldr	r3, [pc, #52]	; (801753c <HAL_MspInit+0x4c>)
 8017508:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801750a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 801750e:	607b      	str	r3, [r7, #4]
 8017510:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8017512:	2300      	movs	r3, #0
 8017514:	603b      	str	r3, [r7, #0]
 8017516:	4b09      	ldr	r3, [pc, #36]	; (801753c <HAL_MspInit+0x4c>)
 8017518:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801751a:	4a08      	ldr	r2, [pc, #32]	; (801753c <HAL_MspInit+0x4c>)
 801751c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8017520:	6413      	str	r3, [r2, #64]	; 0x40
 8017522:	4b06      	ldr	r3, [pc, #24]	; (801753c <HAL_MspInit+0x4c>)
 8017524:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8017526:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 801752a:	603b      	str	r3, [r7, #0]
 801752c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 801752e:	bf00      	nop
 8017530:	370c      	adds	r7, #12
 8017532:	46bd      	mov	sp, r7
 8017534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017538:	4770      	bx	lr
 801753a:	bf00      	nop
 801753c:	40023800 	.word	0x40023800

08017540 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8017540:	b580      	push	{r7, lr}
 8017542:	b08c      	sub	sp, #48	; 0x30
 8017544:	af00      	add	r7, sp, #0
 8017546:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8017548:	f107 031c 	add.w	r3, r7, #28
 801754c:	2200      	movs	r2, #0
 801754e:	601a      	str	r2, [r3, #0]
 8017550:	605a      	str	r2, [r3, #4]
 8017552:	609a      	str	r2, [r3, #8]
 8017554:	60da      	str	r2, [r3, #12]
 8017556:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8017558:	687b      	ldr	r3, [r7, #4]
 801755a:	681b      	ldr	r3, [r3, #0]
 801755c:	4a45      	ldr	r2, [pc, #276]	; (8017674 <HAL_ADC_MspInit+0x134>)
 801755e:	4293      	cmp	r3, r2
 8017560:	d157      	bne.n	8017612 <HAL_ADC_MspInit+0xd2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8017562:	2300      	movs	r3, #0
 8017564:	61bb      	str	r3, [r7, #24]
 8017566:	4b44      	ldr	r3, [pc, #272]	; (8017678 <HAL_ADC_MspInit+0x138>)
 8017568:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801756a:	4a43      	ldr	r2, [pc, #268]	; (8017678 <HAL_ADC_MspInit+0x138>)
 801756c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8017570:	6453      	str	r3, [r2, #68]	; 0x44
 8017572:	4b41      	ldr	r3, [pc, #260]	; (8017678 <HAL_ADC_MspInit+0x138>)
 8017574:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8017576:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801757a:	61bb      	str	r3, [r7, #24]
 801757c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 801757e:	2300      	movs	r3, #0
 8017580:	617b      	str	r3, [r7, #20]
 8017582:	4b3d      	ldr	r3, [pc, #244]	; (8017678 <HAL_ADC_MspInit+0x138>)
 8017584:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8017586:	4a3c      	ldr	r2, [pc, #240]	; (8017678 <HAL_ADC_MspInit+0x138>)
 8017588:	f043 0301 	orr.w	r3, r3, #1
 801758c:	6313      	str	r3, [r2, #48]	; 0x30
 801758e:	4b3a      	ldr	r3, [pc, #232]	; (8017678 <HAL_ADC_MspInit+0x138>)
 8017590:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8017592:	f003 0301 	and.w	r3, r3, #1
 8017596:	617b      	str	r3, [r7, #20]
 8017598:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PA6     ------> ADC1_IN6
    */
    GPIO_InitStruct.Pin = Ao_Pin;
 801759a:	2340      	movs	r3, #64	; 0x40
 801759c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 801759e:	2303      	movs	r3, #3
 80175a0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80175a2:	2300      	movs	r3, #0
 80175a4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(Ao_GPIO_Port, &GPIO_InitStruct);
 80175a6:	f107 031c 	add.w	r3, r7, #28
 80175aa:	4619      	mov	r1, r3
 80175ac:	4833      	ldr	r0, [pc, #204]	; (801767c <HAL_ADC_MspInit+0x13c>)
 80175ae:	f001 ffb7 	bl	8019520 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 80175b2:	4b33      	ldr	r3, [pc, #204]	; (8017680 <HAL_ADC_MspInit+0x140>)
 80175b4:	4a33      	ldr	r2, [pc, #204]	; (8017684 <HAL_ADC_MspInit+0x144>)
 80175b6:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 80175b8:	4b31      	ldr	r3, [pc, #196]	; (8017680 <HAL_ADC_MspInit+0x140>)
 80175ba:	2200      	movs	r2, #0
 80175bc:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80175be:	4b30      	ldr	r3, [pc, #192]	; (8017680 <HAL_ADC_MspInit+0x140>)
 80175c0:	2200      	movs	r2, #0
 80175c2:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80175c4:	4b2e      	ldr	r3, [pc, #184]	; (8017680 <HAL_ADC_MspInit+0x140>)
 80175c6:	2200      	movs	r2, #0
 80175c8:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80175ca:	4b2d      	ldr	r3, [pc, #180]	; (8017680 <HAL_ADC_MspInit+0x140>)
 80175cc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80175d0:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80175d2:	4b2b      	ldr	r3, [pc, #172]	; (8017680 <HAL_ADC_MspInit+0x140>)
 80175d4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80175d8:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80175da:	4b29      	ldr	r3, [pc, #164]	; (8017680 <HAL_ADC_MspInit+0x140>)
 80175dc:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80175e0:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 80175e2:	4b27      	ldr	r3, [pc, #156]	; (8017680 <HAL_ADC_MspInit+0x140>)
 80175e4:	2200      	movs	r2, #0
 80175e6:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80175e8:	4b25      	ldr	r3, [pc, #148]	; (8017680 <HAL_ADC_MspInit+0x140>)
 80175ea:	2200      	movs	r2, #0
 80175ec:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80175ee:	4b24      	ldr	r3, [pc, #144]	; (8017680 <HAL_ADC_MspInit+0x140>)
 80175f0:	2200      	movs	r2, #0
 80175f2:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80175f4:	4822      	ldr	r0, [pc, #136]	; (8017680 <HAL_ADC_MspInit+0x140>)
 80175f6:	f001 f99f 	bl	8018938 <HAL_DMA_Init>
 80175fa:	4603      	mov	r3, r0
 80175fc:	2b00      	cmp	r3, #0
 80175fe:	d001      	beq.n	8017604 <HAL_ADC_MspInit+0xc4>
    {
      Error_Handler();
 8017600:	f7ff ff70 	bl	80174e4 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8017604:	687b      	ldr	r3, [r7, #4]
 8017606:	4a1e      	ldr	r2, [pc, #120]	; (8017680 <HAL_ADC_MspInit+0x140>)
 8017608:	639a      	str	r2, [r3, #56]	; 0x38
 801760a:	4a1d      	ldr	r2, [pc, #116]	; (8017680 <HAL_ADC_MspInit+0x140>)
 801760c:	687b      	ldr	r3, [r7, #4]
 801760e:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8017610:	e02c      	b.n	801766c <HAL_ADC_MspInit+0x12c>
  else if(hadc->Instance==ADC2)
 8017612:	687b      	ldr	r3, [r7, #4]
 8017614:	681b      	ldr	r3, [r3, #0]
 8017616:	4a1c      	ldr	r2, [pc, #112]	; (8017688 <HAL_ADC_MspInit+0x148>)
 8017618:	4293      	cmp	r3, r2
 801761a:	d127      	bne.n	801766c <HAL_ADC_MspInit+0x12c>
    __HAL_RCC_ADC2_CLK_ENABLE();
 801761c:	2300      	movs	r3, #0
 801761e:	613b      	str	r3, [r7, #16]
 8017620:	4b15      	ldr	r3, [pc, #84]	; (8017678 <HAL_ADC_MspInit+0x138>)
 8017622:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8017624:	4a14      	ldr	r2, [pc, #80]	; (8017678 <HAL_ADC_MspInit+0x138>)
 8017626:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 801762a:	6453      	str	r3, [r2, #68]	; 0x44
 801762c:	4b12      	ldr	r3, [pc, #72]	; (8017678 <HAL_ADC_MspInit+0x138>)
 801762e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8017630:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8017634:	613b      	str	r3, [r7, #16]
 8017636:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8017638:	2300      	movs	r3, #0
 801763a:	60fb      	str	r3, [r7, #12]
 801763c:	4b0e      	ldr	r3, [pc, #56]	; (8017678 <HAL_ADC_MspInit+0x138>)
 801763e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8017640:	4a0d      	ldr	r2, [pc, #52]	; (8017678 <HAL_ADC_MspInit+0x138>)
 8017642:	f043 0301 	orr.w	r3, r3, #1
 8017646:	6313      	str	r3, [r2, #48]	; 0x30
 8017648:	4b0b      	ldr	r3, [pc, #44]	; (8017678 <HAL_ADC_MspInit+0x138>)
 801764a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801764c:	f003 0301 	and.w	r3, r3, #1
 8017650:	60fb      	str	r3, [r7, #12]
 8017652:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = AoA7_Pin;
 8017654:	2380      	movs	r3, #128	; 0x80
 8017656:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8017658:	2303      	movs	r3, #3
 801765a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801765c:	2300      	movs	r3, #0
 801765e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(AoA7_GPIO_Port, &GPIO_InitStruct);
 8017660:	f107 031c 	add.w	r3, r7, #28
 8017664:	4619      	mov	r1, r3
 8017666:	4805      	ldr	r0, [pc, #20]	; (801767c <HAL_ADC_MspInit+0x13c>)
 8017668:	f001 ff5a 	bl	8019520 <HAL_GPIO_Init>
}
 801766c:	bf00      	nop
 801766e:	3730      	adds	r7, #48	; 0x30
 8017670:	46bd      	mov	sp, r7
 8017672:	bd80      	pop	{r7, pc}
 8017674:	40012000 	.word	0x40012000
 8017678:	40023800 	.word	0x40023800
 801767c:	40020000 	.word	0x40020000
 8017680:	2000793c 	.word	0x2000793c
 8017684:	40026410 	.word	0x40026410
 8017688:	40012100 	.word	0x40012100

0801768c <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 801768c:	b580      	push	{r7, lr}
 801768e:	b08a      	sub	sp, #40	; 0x28
 8017690:	af00      	add	r7, sp, #0
 8017692:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8017694:	f107 0314 	add.w	r3, r7, #20
 8017698:	2200      	movs	r2, #0
 801769a:	601a      	str	r2, [r3, #0]
 801769c:	605a      	str	r2, [r3, #4]
 801769e:	609a      	str	r2, [r3, #8]
 80176a0:	60da      	str	r2, [r3, #12]
 80176a2:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC)
 80176a4:	687b      	ldr	r3, [r7, #4]
 80176a6:	681b      	ldr	r3, [r3, #0]
 80176a8:	4a33      	ldr	r2, [pc, #204]	; (8017778 <HAL_DAC_MspInit+0xec>)
 80176aa:	4293      	cmp	r3, r2
 80176ac:	d15f      	bne.n	801776e <HAL_DAC_MspInit+0xe2>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 80176ae:	2300      	movs	r3, #0
 80176b0:	613b      	str	r3, [r7, #16]
 80176b2:	4b32      	ldr	r3, [pc, #200]	; (801777c <HAL_DAC_MspInit+0xf0>)
 80176b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80176b6:	4a31      	ldr	r2, [pc, #196]	; (801777c <HAL_DAC_MspInit+0xf0>)
 80176b8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80176bc:	6413      	str	r3, [r2, #64]	; 0x40
 80176be:	4b2f      	ldr	r3, [pc, #188]	; (801777c <HAL_DAC_MspInit+0xf0>)
 80176c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80176c2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80176c6:	613b      	str	r3, [r7, #16]
 80176c8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80176ca:	2300      	movs	r3, #0
 80176cc:	60fb      	str	r3, [r7, #12]
 80176ce:	4b2b      	ldr	r3, [pc, #172]	; (801777c <HAL_DAC_MspInit+0xf0>)
 80176d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80176d2:	4a2a      	ldr	r2, [pc, #168]	; (801777c <HAL_DAC_MspInit+0xf0>)
 80176d4:	f043 0301 	orr.w	r3, r3, #1
 80176d8:	6313      	str	r3, [r2, #48]	; 0x30
 80176da:	4b28      	ldr	r3, [pc, #160]	; (801777c <HAL_DAC_MspInit+0xf0>)
 80176dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80176de:	f003 0301 	and.w	r3, r3, #1
 80176e2:	60fb      	str	r3, [r7, #12]
 80176e4:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    PA5     ------> DAC_OUT2
    */
    GPIO_InitStruct.Pin = Fo4_Pin|Ap_Pin;
 80176e6:	2330      	movs	r3, #48	; 0x30
 80176e8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80176ea:	2303      	movs	r3, #3
 80176ec:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80176ee:	2300      	movs	r3, #0
 80176f0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80176f2:	f107 0314 	add.w	r3, r7, #20
 80176f6:	4619      	mov	r1, r3
 80176f8:	4821      	ldr	r0, [pc, #132]	; (8017780 <HAL_DAC_MspInit+0xf4>)
 80176fa:	f001 ff11 	bl	8019520 <HAL_GPIO_Init>

    /* DAC DMA Init */
    /* DAC1 Init */
    hdma_dac1.Instance = DMA1_Stream5;
 80176fe:	4b21      	ldr	r3, [pc, #132]	; (8017784 <HAL_DAC_MspInit+0xf8>)
 8017700:	4a21      	ldr	r2, [pc, #132]	; (8017788 <HAL_DAC_MspInit+0xfc>)
 8017702:	601a      	str	r2, [r3, #0]
    hdma_dac1.Init.Channel = DMA_CHANNEL_7;
 8017704:	4b1f      	ldr	r3, [pc, #124]	; (8017784 <HAL_DAC_MspInit+0xf8>)
 8017706:	f04f 6260 	mov.w	r2, #234881024	; 0xe000000
 801770a:	605a      	str	r2, [r3, #4]
    hdma_dac1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 801770c:	4b1d      	ldr	r3, [pc, #116]	; (8017784 <HAL_DAC_MspInit+0xf8>)
 801770e:	2240      	movs	r2, #64	; 0x40
 8017710:	609a      	str	r2, [r3, #8]
    hdma_dac1.Init.PeriphInc = DMA_PINC_DISABLE;
 8017712:	4b1c      	ldr	r3, [pc, #112]	; (8017784 <HAL_DAC_MspInit+0xf8>)
 8017714:	2200      	movs	r2, #0
 8017716:	60da      	str	r2, [r3, #12]
    hdma_dac1.Init.MemInc = DMA_MINC_ENABLE;
 8017718:	4b1a      	ldr	r3, [pc, #104]	; (8017784 <HAL_DAC_MspInit+0xf8>)
 801771a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 801771e:	611a      	str	r2, [r3, #16]
    hdma_dac1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8017720:	4b18      	ldr	r3, [pc, #96]	; (8017784 <HAL_DAC_MspInit+0xf8>)
 8017722:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8017726:	615a      	str	r2, [r3, #20]
    hdma_dac1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8017728:	4b16      	ldr	r3, [pc, #88]	; (8017784 <HAL_DAC_MspInit+0xf8>)
 801772a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 801772e:	619a      	str	r2, [r3, #24]
    hdma_dac1.Init.Mode = DMA_NORMAL;
 8017730:	4b14      	ldr	r3, [pc, #80]	; (8017784 <HAL_DAC_MspInit+0xf8>)
 8017732:	2200      	movs	r2, #0
 8017734:	61da      	str	r2, [r3, #28]
    hdma_dac1.Init.Priority = DMA_PRIORITY_LOW;
 8017736:	4b13      	ldr	r3, [pc, #76]	; (8017784 <HAL_DAC_MspInit+0xf8>)
 8017738:	2200      	movs	r2, #0
 801773a:	621a      	str	r2, [r3, #32]
    hdma_dac1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 801773c:	4b11      	ldr	r3, [pc, #68]	; (8017784 <HAL_DAC_MspInit+0xf8>)
 801773e:	2200      	movs	r2, #0
 8017740:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_dac1) != HAL_OK)
 8017742:	4810      	ldr	r0, [pc, #64]	; (8017784 <HAL_DAC_MspInit+0xf8>)
 8017744:	f001 f8f8 	bl	8018938 <HAL_DMA_Init>
 8017748:	4603      	mov	r3, r0
 801774a:	2b00      	cmp	r3, #0
 801774c:	d001      	beq.n	8017752 <HAL_DAC_MspInit+0xc6>
    {
      Error_Handler();
 801774e:	f7ff fec9 	bl	80174e4 <Error_Handler>
    }

    __HAL_LINKDMA(hdac,DMA_Handle1,hdma_dac1);
 8017752:	687b      	ldr	r3, [r7, #4]
 8017754:	4a0b      	ldr	r2, [pc, #44]	; (8017784 <HAL_DAC_MspInit+0xf8>)
 8017756:	609a      	str	r2, [r3, #8]
 8017758:	4a0a      	ldr	r2, [pc, #40]	; (8017784 <HAL_DAC_MspInit+0xf8>)
 801775a:	687b      	ldr	r3, [r7, #4]
 801775c:	6393      	str	r3, [r2, #56]	; 0x38

    /* DAC interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 801775e:	2200      	movs	r2, #0
 8017760:	2100      	movs	r1, #0
 8017762:	2036      	movs	r0, #54	; 0x36
 8017764:	f001 f81b 	bl	801879e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8017768:	2036      	movs	r0, #54	; 0x36
 801776a:	f001 f834 	bl	80187d6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }

}
 801776e:	bf00      	nop
 8017770:	3728      	adds	r7, #40	; 0x28
 8017772:	46bd      	mov	sp, r7
 8017774:	bd80      	pop	{r7, pc}
 8017776:	bf00      	nop
 8017778:	40007400 	.word	0x40007400
 801777c:	40023800 	.word	0x40023800
 8017780:	40020000 	.word	0x40020000
 8017784:	20007848 	.word	0x20007848
 8017788:	40026088 	.word	0x40026088

0801778c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 801778c:	b580      	push	{r7, lr}
 801778e:	b08c      	sub	sp, #48	; 0x30
 8017790:	af00      	add	r7, sp, #0
 8017792:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8017794:	f107 031c 	add.w	r3, r7, #28
 8017798:	2200      	movs	r2, #0
 801779a:	601a      	str	r2, [r3, #0]
 801779c:	605a      	str	r2, [r3, #4]
 801779e:	609a      	str	r2, [r3, #8]
 80177a0:	60da      	str	r2, [r3, #12]
 80177a2:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 80177a4:	687b      	ldr	r3, [r7, #4]
 80177a6:	681b      	ldr	r3, [r3, #0]
 80177a8:	4a3a      	ldr	r2, [pc, #232]	; (8017894 <HAL_SPI_MspInit+0x108>)
 80177aa:	4293      	cmp	r3, r2
 80177ac:	d135      	bne.n	801781a <HAL_SPI_MspInit+0x8e>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80177ae:	2300      	movs	r3, #0
 80177b0:	61bb      	str	r3, [r7, #24]
 80177b2:	4b39      	ldr	r3, [pc, #228]	; (8017898 <HAL_SPI_MspInit+0x10c>)
 80177b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80177b6:	4a38      	ldr	r2, [pc, #224]	; (8017898 <HAL_SPI_MspInit+0x10c>)
 80177b8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80177bc:	6413      	str	r3, [r2, #64]	; 0x40
 80177be:	4b36      	ldr	r3, [pc, #216]	; (8017898 <HAL_SPI_MspInit+0x10c>)
 80177c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80177c2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80177c6:	61bb      	str	r3, [r7, #24]
 80177c8:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80177ca:	2300      	movs	r3, #0
 80177cc:	617b      	str	r3, [r7, #20]
 80177ce:	4b32      	ldr	r3, [pc, #200]	; (8017898 <HAL_SPI_MspInit+0x10c>)
 80177d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80177d2:	4a31      	ldr	r2, [pc, #196]	; (8017898 <HAL_SPI_MspInit+0x10c>)
 80177d4:	f043 0302 	orr.w	r3, r3, #2
 80177d8:	6313      	str	r3, [r2, #48]	; 0x30
 80177da:	4b2f      	ldr	r3, [pc, #188]	; (8017898 <HAL_SPI_MspInit+0x10c>)
 80177dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80177de:	f003 0302 	and.w	r3, r3, #2
 80177e2:	617b      	str	r3, [r7, #20]
 80177e4:	697b      	ldr	r3, [r7, #20]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = SCK_Pin|So_Pin|Si_Pin;
 80177e6:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 80177ea:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80177ec:	2302      	movs	r3, #2
 80177ee:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80177f0:	2300      	movs	r3, #0
 80177f2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80177f4:	2303      	movs	r3, #3
 80177f6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80177f8:	2305      	movs	r3, #5
 80177fa:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80177fc:	f107 031c 	add.w	r3, r7, #28
 8017800:	4619      	mov	r1, r3
 8017802:	4826      	ldr	r0, [pc, #152]	; (801789c <HAL_SPI_MspInit+0x110>)
 8017804:	f001 fe8c 	bl	8019520 <HAL_GPIO_Init>

    /* SPI2 interrupt Init */
    HAL_NVIC_SetPriority(SPI2_IRQn, 1, 0);
 8017808:	2200      	movs	r2, #0
 801780a:	2101      	movs	r1, #1
 801780c:	2024      	movs	r0, #36	; 0x24
 801780e:	f000 ffc6 	bl	801879e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 8017812:	2024      	movs	r0, #36	; 0x24
 8017814:	f000 ffdf 	bl	80187d6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8017818:	e038      	b.n	801788c <HAL_SPI_MspInit+0x100>
  else if(hspi->Instance==SPI3)
 801781a:	687b      	ldr	r3, [r7, #4]
 801781c:	681b      	ldr	r3, [r3, #0]
 801781e:	4a20      	ldr	r2, [pc, #128]	; (80178a0 <HAL_SPI_MspInit+0x114>)
 8017820:	4293      	cmp	r3, r2
 8017822:	d133      	bne.n	801788c <HAL_SPI_MspInit+0x100>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8017824:	2300      	movs	r3, #0
 8017826:	613b      	str	r3, [r7, #16]
 8017828:	4b1b      	ldr	r3, [pc, #108]	; (8017898 <HAL_SPI_MspInit+0x10c>)
 801782a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801782c:	4a1a      	ldr	r2, [pc, #104]	; (8017898 <HAL_SPI_MspInit+0x10c>)
 801782e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8017832:	6413      	str	r3, [r2, #64]	; 0x40
 8017834:	4b18      	ldr	r3, [pc, #96]	; (8017898 <HAL_SPI_MspInit+0x10c>)
 8017836:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8017838:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 801783c:	613b      	str	r3, [r7, #16]
 801783e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8017840:	2300      	movs	r3, #0
 8017842:	60fb      	str	r3, [r7, #12]
 8017844:	4b14      	ldr	r3, [pc, #80]	; (8017898 <HAL_SPI_MspInit+0x10c>)
 8017846:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8017848:	4a13      	ldr	r2, [pc, #76]	; (8017898 <HAL_SPI_MspInit+0x10c>)
 801784a:	f043 0302 	orr.w	r3, r3, #2
 801784e:	6313      	str	r3, [r2, #48]	; 0x30
 8017850:	4b11      	ldr	r3, [pc, #68]	; (8017898 <HAL_SPI_MspInit+0x10c>)
 8017852:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8017854:	f003 0302 	and.w	r3, r3, #2
 8017858:	60fb      	str	r3, [r7, #12]
 801785a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = TpCk_Pin|TpSo_Pin|TpSi_Pin;
 801785c:	2338      	movs	r3, #56	; 0x38
 801785e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8017860:	2302      	movs	r3, #2
 8017862:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8017864:	2300      	movs	r3, #0
 8017866:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8017868:	2303      	movs	r3, #3
 801786a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 801786c:	2306      	movs	r3, #6
 801786e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8017870:	f107 031c 	add.w	r3, r7, #28
 8017874:	4619      	mov	r1, r3
 8017876:	4809      	ldr	r0, [pc, #36]	; (801789c <HAL_SPI_MspInit+0x110>)
 8017878:	f001 fe52 	bl	8019520 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(SPI3_IRQn, 1, 0);
 801787c:	2200      	movs	r2, #0
 801787e:	2101      	movs	r1, #1
 8017880:	2033      	movs	r0, #51	; 0x33
 8017882:	f000 ff8c 	bl	801879e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI3_IRQn);
 8017886:	2033      	movs	r0, #51	; 0x33
 8017888:	f000 ffa5 	bl	80187d6 <HAL_NVIC_EnableIRQ>
}
 801788c:	bf00      	nop
 801788e:	3730      	adds	r7, #48	; 0x30
 8017890:	46bd      	mov	sp, r7
 8017892:	bd80      	pop	{r7, pc}
 8017894:	40003800 	.word	0x40003800
 8017898:	40023800 	.word	0x40023800
 801789c:	40020400 	.word	0x40020400
 80178a0:	40003c00 	.word	0x40003c00

080178a4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80178a4:	b580      	push	{r7, lr}
 80178a6:	b086      	sub	sp, #24
 80178a8:	af00      	add	r7, sp, #0
 80178aa:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80178ac:	687b      	ldr	r3, [r7, #4]
 80178ae:	681b      	ldr	r3, [r3, #0]
 80178b0:	4a2c      	ldr	r2, [pc, #176]	; (8017964 <HAL_TIM_Base_MspInit+0xc0>)
 80178b2:	4293      	cmp	r3, r2
 80178b4:	d10e      	bne.n	80178d4 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80178b6:	2300      	movs	r3, #0
 80178b8:	617b      	str	r3, [r7, #20]
 80178ba:	4b2b      	ldr	r3, [pc, #172]	; (8017968 <HAL_TIM_Base_MspInit+0xc4>)
 80178bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80178be:	4a2a      	ldr	r2, [pc, #168]	; (8017968 <HAL_TIM_Base_MspInit+0xc4>)
 80178c0:	f043 0301 	orr.w	r3, r3, #1
 80178c4:	6453      	str	r3, [r2, #68]	; 0x44
 80178c6:	4b28      	ldr	r3, [pc, #160]	; (8017968 <HAL_TIM_Base_MspInit+0xc4>)
 80178c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80178ca:	f003 0301 	and.w	r3, r3, #1
 80178ce:	617b      	str	r3, [r7, #20]
 80178d0:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }

}
 80178d2:	e042      	b.n	801795a <HAL_TIM_Base_MspInit+0xb6>
  else if(htim_base->Instance==TIM3)
 80178d4:	687b      	ldr	r3, [r7, #4]
 80178d6:	681b      	ldr	r3, [r3, #0]
 80178d8:	4a24      	ldr	r2, [pc, #144]	; (801796c <HAL_TIM_Base_MspInit+0xc8>)
 80178da:	4293      	cmp	r3, r2
 80178dc:	d116      	bne.n	801790c <HAL_TIM_Base_MspInit+0x68>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80178de:	2300      	movs	r3, #0
 80178e0:	613b      	str	r3, [r7, #16]
 80178e2:	4b21      	ldr	r3, [pc, #132]	; (8017968 <HAL_TIM_Base_MspInit+0xc4>)
 80178e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80178e6:	4a20      	ldr	r2, [pc, #128]	; (8017968 <HAL_TIM_Base_MspInit+0xc4>)
 80178e8:	f043 0302 	orr.w	r3, r3, #2
 80178ec:	6413      	str	r3, [r2, #64]	; 0x40
 80178ee:	4b1e      	ldr	r3, [pc, #120]	; (8017968 <HAL_TIM_Base_MspInit+0xc4>)
 80178f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80178f2:	f003 0302 	and.w	r3, r3, #2
 80178f6:	613b      	str	r3, [r7, #16]
 80178f8:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80178fa:	2200      	movs	r2, #0
 80178fc:	2100      	movs	r1, #0
 80178fe:	201d      	movs	r0, #29
 8017900:	f000 ff4d 	bl	801879e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8017904:	201d      	movs	r0, #29
 8017906:	f000 ff66 	bl	80187d6 <HAL_NVIC_EnableIRQ>
}
 801790a:	e026      	b.n	801795a <HAL_TIM_Base_MspInit+0xb6>
  else if(htim_base->Instance==TIM5)
 801790c:	687b      	ldr	r3, [r7, #4]
 801790e:	681b      	ldr	r3, [r3, #0]
 8017910:	4a17      	ldr	r2, [pc, #92]	; (8017970 <HAL_TIM_Base_MspInit+0xcc>)
 8017912:	4293      	cmp	r3, r2
 8017914:	d10e      	bne.n	8017934 <HAL_TIM_Base_MspInit+0x90>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8017916:	2300      	movs	r3, #0
 8017918:	60fb      	str	r3, [r7, #12]
 801791a:	4b13      	ldr	r3, [pc, #76]	; (8017968 <HAL_TIM_Base_MspInit+0xc4>)
 801791c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801791e:	4a12      	ldr	r2, [pc, #72]	; (8017968 <HAL_TIM_Base_MspInit+0xc4>)
 8017920:	f043 0308 	orr.w	r3, r3, #8
 8017924:	6413      	str	r3, [r2, #64]	; 0x40
 8017926:	4b10      	ldr	r3, [pc, #64]	; (8017968 <HAL_TIM_Base_MspInit+0xc4>)
 8017928:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801792a:	f003 0308 	and.w	r3, r3, #8
 801792e:	60fb      	str	r3, [r7, #12]
 8017930:	68fb      	ldr	r3, [r7, #12]
}
 8017932:	e012      	b.n	801795a <HAL_TIM_Base_MspInit+0xb6>
  else if(htim_base->Instance==TIM7)
 8017934:	687b      	ldr	r3, [r7, #4]
 8017936:	681b      	ldr	r3, [r3, #0]
 8017938:	4a0e      	ldr	r2, [pc, #56]	; (8017974 <HAL_TIM_Base_MspInit+0xd0>)
 801793a:	4293      	cmp	r3, r2
 801793c:	d10d      	bne.n	801795a <HAL_TIM_Base_MspInit+0xb6>
    __HAL_RCC_TIM7_CLK_ENABLE();
 801793e:	2300      	movs	r3, #0
 8017940:	60bb      	str	r3, [r7, #8]
 8017942:	4b09      	ldr	r3, [pc, #36]	; (8017968 <HAL_TIM_Base_MspInit+0xc4>)
 8017944:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8017946:	4a08      	ldr	r2, [pc, #32]	; (8017968 <HAL_TIM_Base_MspInit+0xc4>)
 8017948:	f043 0320 	orr.w	r3, r3, #32
 801794c:	6413      	str	r3, [r2, #64]	; 0x40
 801794e:	4b06      	ldr	r3, [pc, #24]	; (8017968 <HAL_TIM_Base_MspInit+0xc4>)
 8017950:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8017952:	f003 0320 	and.w	r3, r3, #32
 8017956:	60bb      	str	r3, [r7, #8]
 8017958:	68bb      	ldr	r3, [r7, #8]
}
 801795a:	bf00      	nop
 801795c:	3718      	adds	r7, #24
 801795e:	46bd      	mov	sp, r7
 8017960:	bd80      	pop	{r7, pc}
 8017962:	bf00      	nop
 8017964:	40010000 	.word	0x40010000
 8017968:	40023800 	.word	0x40023800
 801796c:	40000400 	.word	0x40000400
 8017970:	40000c00 	.word	0x40000c00
 8017974:	40001400 	.word	0x40001400

08017978 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8017978:	b480      	push	{r7}
 801797a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 801797c:	e7fe      	b.n	801797c <NMI_Handler+0x4>

0801797e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 801797e:	b480      	push	{r7}
 8017980:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8017982:	e7fe      	b.n	8017982 <HardFault_Handler+0x4>

08017984 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8017984:	b480      	push	{r7}
 8017986:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8017988:	e7fe      	b.n	8017988 <MemManage_Handler+0x4>

0801798a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 801798a:	b480      	push	{r7}
 801798c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 801798e:	e7fe      	b.n	801798e <BusFault_Handler+0x4>

08017990 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8017990:	b480      	push	{r7}
 8017992:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8017994:	e7fe      	b.n	8017994 <UsageFault_Handler+0x4>

08017996 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8017996:	b480      	push	{r7}
 8017998:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 801799a:	bf00      	nop
 801799c:	46bd      	mov	sp, r7
 801799e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80179a2:	4770      	bx	lr

080179a4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80179a4:	b480      	push	{r7}
 80179a6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80179a8:	bf00      	nop
 80179aa:	46bd      	mov	sp, r7
 80179ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80179b0:	4770      	bx	lr

080179b2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80179b2:	b480      	push	{r7}
 80179b4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80179b6:	bf00      	nop
 80179b8:	46bd      	mov	sp, r7
 80179ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80179be:	4770      	bx	lr

080179c0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80179c0:	b580      	push	{r7, lr}
 80179c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80179c4:	f000 fb5a 	bl	801807c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80179c8:	bf00      	nop
 80179ca:	bd80      	pop	{r7, pc}

080179cc <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 80179cc:	b580      	push	{r7, lr}
 80179ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1);
 80179d0:	4802      	ldr	r0, [pc, #8]	; (80179dc <DMA1_Stream5_IRQHandler+0x10>)
 80179d2:	f001 f881 	bl	8018ad8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 80179d6:	bf00      	nop
 80179d8:	bd80      	pop	{r7, pc}
 80179da:	bf00      	nop
 80179dc:	20007848 	.word	0x20007848

080179e0 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80179e0:	b580      	push	{r7, lr}
 80179e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80179e4:	4802      	ldr	r0, [pc, #8]	; (80179f0 <TIM3_IRQHandler+0x10>)
 80179e6:	f005 f949 	bl	801cc7c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80179ea:	bf00      	nop
 80179ec:	bd80      	pop	{r7, pc}
 80179ee:	bf00      	nop
 80179f0:	200077a8 	.word	0x200077a8

080179f4 <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 80179f4:	b580      	push	{r7, lr}
 80179f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 80179f8:	4802      	ldr	r0, [pc, #8]	; (8017a04 <SPI2_IRQHandler+0x10>)
 80179fa:	f004 fe31 	bl	801c660 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 80179fe:	bf00      	nop
 8017a00:	bd80      	pop	{r7, pc}
 8017a02:	bf00      	nop
 8017a04:	200076c0 	.word	0x200076c0

08017a08 <SPI3_IRQHandler>:

/**
  * @brief This function handles SPI3 global interrupt.
  */
void SPI3_IRQHandler(void)
{
 8017a08:	b580      	push	{r7, lr}
 8017a0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI3_IRQn 0 */

  /* USER CODE END SPI3_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi3);
 8017a0c:	4802      	ldr	r0, [pc, #8]	; (8017a18 <SPI3_IRQHandler+0x10>)
 8017a0e:	f004 fe27 	bl	801c660 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI3_IRQn 1 */

  /* USER CODE END SPI3_IRQn 1 */
}
 8017a12:	bf00      	nop
 8017a14:	bd80      	pop	{r7, pc}
 8017a16:	bf00      	nop
 8017a18:	200077f0 	.word	0x200077f0

08017a1c <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8017a1c:	b580      	push	{r7, lr}
 8017a1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8017a20:	4802      	ldr	r0, [pc, #8]	; (8017a2c <DMA2_Stream0_IRQHandler+0x10>)
 8017a22:	f001 f859 	bl	8018ad8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8017a26:	bf00      	nop
 8017a28:	bd80      	pop	{r7, pc}
 8017a2a:	bf00      	nop
 8017a2c:	2000793c 	.word	0x2000793c

08017a30 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8017a30:	b580      	push	{r7, lr}
 8017a32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8017a34:	4802      	ldr	r0, [pc, #8]	; (8017a40 <OTG_FS_IRQHandler+0x10>)
 8017a36:	f002 f88f 	bl	8019b58 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8017a3a:	bf00      	nop
 8017a3c:	bd80      	pop	{r7, pc}
 8017a3e:	bf00      	nop
 8017a40:	2000afb4 	.word	0x2000afb4

08017a44 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8017a44:	b580      	push	{r7, lr}
 8017a46:	b086      	sub	sp, #24
 8017a48:	af00      	add	r7, sp, #0
 8017a4a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8017a4c:	4a14      	ldr	r2, [pc, #80]	; (8017aa0 <_sbrk+0x5c>)
 8017a4e:	4b15      	ldr	r3, [pc, #84]	; (8017aa4 <_sbrk+0x60>)
 8017a50:	1ad3      	subs	r3, r2, r3
 8017a52:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8017a54:	697b      	ldr	r3, [r7, #20]
 8017a56:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8017a58:	4b13      	ldr	r3, [pc, #76]	; (8017aa8 <_sbrk+0x64>)
 8017a5a:	681b      	ldr	r3, [r3, #0]
 8017a5c:	2b00      	cmp	r3, #0
 8017a5e:	d102      	bne.n	8017a66 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8017a60:	4b11      	ldr	r3, [pc, #68]	; (8017aa8 <_sbrk+0x64>)
 8017a62:	4a12      	ldr	r2, [pc, #72]	; (8017aac <_sbrk+0x68>)
 8017a64:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8017a66:	4b10      	ldr	r3, [pc, #64]	; (8017aa8 <_sbrk+0x64>)
 8017a68:	681a      	ldr	r2, [r3, #0]
 8017a6a:	687b      	ldr	r3, [r7, #4]
 8017a6c:	4413      	add	r3, r2
 8017a6e:	693a      	ldr	r2, [r7, #16]
 8017a70:	429a      	cmp	r2, r3
 8017a72:	d207      	bcs.n	8017a84 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8017a74:	f00e f832 	bl	8025adc <__errno>
 8017a78:	4603      	mov	r3, r0
 8017a7a:	220c      	movs	r2, #12
 8017a7c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8017a7e:	f04f 33ff 	mov.w	r3, #4294967295
 8017a82:	e009      	b.n	8017a98 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8017a84:	4b08      	ldr	r3, [pc, #32]	; (8017aa8 <_sbrk+0x64>)
 8017a86:	681b      	ldr	r3, [r3, #0]
 8017a88:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8017a8a:	4b07      	ldr	r3, [pc, #28]	; (8017aa8 <_sbrk+0x64>)
 8017a8c:	681a      	ldr	r2, [r3, #0]
 8017a8e:	687b      	ldr	r3, [r7, #4]
 8017a90:	4413      	add	r3, r2
 8017a92:	4a05      	ldr	r2, [pc, #20]	; (8017aa8 <_sbrk+0x64>)
 8017a94:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8017a96:	68fb      	ldr	r3, [r7, #12]
}
 8017a98:	4618      	mov	r0, r3
 8017a9a:	3718      	adds	r7, #24
 8017a9c:	46bd      	mov	sp, r7
 8017a9e:	bd80      	pop	{r7, pc}
 8017aa0:	20020000 	.word	0x20020000
 8017aa4:	00001000 	.word	0x00001000
 8017aa8:	200007a4 	.word	0x200007a4
 8017aac:	2000b3d0 	.word	0x2000b3d0

08017ab0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8017ab0:	b480      	push	{r7}
 8017ab2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8017ab4:	4b06      	ldr	r3, [pc, #24]	; (8017ad0 <SystemInit+0x20>)
 8017ab6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8017aba:	4a05      	ldr	r2, [pc, #20]	; (8017ad0 <SystemInit+0x20>)
 8017abc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8017ac0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8017ac4:	bf00      	nop
 8017ac6:	46bd      	mov	sp, r7
 8017ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017acc:	4770      	bx	lr
 8017ace:	bf00      	nop
 8017ad0:	e000ed00 	.word	0xe000ed00

08017ad4 <W25Qx_Init>:
/**
  * @brief  Initializes the W25QXXXX interface.
  * @retval None
  */
uint8_t W25Qx_Init(void)
{ 
 8017ad4:	b580      	push	{r7, lr}
 8017ad6:	b082      	sub	sp, #8
 8017ad8:	af00      	add	r7, sp, #0
	uint8_t state;
	/* Reset W25Qxxx */
	W25Qx_Reset();
 8017ada:	f000 f80d 	bl	8017af8 <W25Qx_Reset>
	
	state = W25Qx_Get_Parameter(&W25Qx_Para);
 8017ade:	4805      	ldr	r0, [pc, #20]	; (8017af4 <W25Qx_Init+0x20>)
 8017ae0:	f000 f8c8 	bl	8017c74 <W25Qx_Get_Parameter>
 8017ae4:	4603      	mov	r3, r0
 8017ae6:	71fb      	strb	r3, [r7, #7]
	
	return state;
 8017ae8:	79fb      	ldrb	r3, [r7, #7]
}
 8017aea:	4618      	mov	r0, r3
 8017aec:	3708      	adds	r7, #8
 8017aee:	46bd      	mov	sp, r7
 8017af0:	bd80      	pop	{r7, pc}
 8017af2:	bf00      	nop
 8017af4:	20007a48 	.word	0x20007a48

08017af8 <W25Qx_Reset>:
/**
  * @brief  This function reset the W25Qx.
  * @retval None
  */
void	W25Qx_Reset(void)
{
 8017af8:	b580      	push	{r7, lr}
 8017afa:	b082      	sub	sp, #8
 8017afc:	af00      	add	r7, sp, #0
	uint8_t cmd[2] = {RESET_ENABLE_CMD,RESET_MEMORY_CMD};
 8017afe:	f649 1366 	movw	r3, #39270	; 0x9966
 8017b02:	80bb      	strh	r3, [r7, #4]
	
	W25Qx_Enable();
 8017b04:	2200      	movs	r2, #0
 8017b06:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8017b0a:	480a      	ldr	r0, [pc, #40]	; (8017b34 <W25Qx_Reset+0x3c>)
 8017b0c:	f001 feb4 	bl	8019878 <HAL_GPIO_WritePin>
	/* Send the reset command */
	HAL_SPI_Transmit(&hspi2, cmd, 2, W25QXXXX_TIMEOUT_VALUE);
 8017b10:	1d39      	adds	r1, r7, #4
 8017b12:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8017b16:	2202      	movs	r2, #2
 8017b18:	4807      	ldr	r0, [pc, #28]	; (8017b38 <W25Qx_Reset+0x40>)
 8017b1a:	f004 f9b2 	bl	801be82 <HAL_SPI_Transmit>
	W25Qx_Disable();
 8017b1e:	2201      	movs	r2, #1
 8017b20:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8017b24:	4803      	ldr	r0, [pc, #12]	; (8017b34 <W25Qx_Reset+0x3c>)
 8017b26:	f001 fea7 	bl	8019878 <HAL_GPIO_WritePin>

}
 8017b2a:	bf00      	nop
 8017b2c:	3708      	adds	r7, #8
 8017b2e:	46bd      	mov	sp, r7
 8017b30:	bd80      	pop	{r7, pc}
 8017b32:	bf00      	nop
 8017b34:	40020400 	.word	0x40020400
 8017b38:	200076c0 	.word	0x200076c0

08017b3c <W25Qx_GetStatus>:
/**
  * @brief  Reads current status of the W25QXXXX.
  * @retval W25QXXXX memory status
  */
uint8_t W25Qx_GetStatus(void)
{
 8017b3c:	b580      	push	{r7, lr}
 8017b3e:	b082      	sub	sp, #8
 8017b40:	af00      	add	r7, sp, #0
	uint8_t cmd[] = {READ_STATUS_REG1_CMD};
 8017b42:	2305      	movs	r3, #5
 8017b44:	713b      	strb	r3, [r7, #4]
	uint8_t status;
	
	W25Qx_Enable();
 8017b46:	2200      	movs	r2, #0
 8017b48:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8017b4c:	4811      	ldr	r0, [pc, #68]	; (8017b94 <W25Qx_GetStatus+0x58>)
 8017b4e:	f001 fe93 	bl	8019878 <HAL_GPIO_WritePin>
	
	/* Send the read status command */
	HAL_SPI_Transmit(&hspi2, cmd, 1, W25QXXXX_TIMEOUT_VALUE);
 8017b52:	1d39      	adds	r1, r7, #4
 8017b54:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8017b58:	2201      	movs	r2, #1
 8017b5a:	480f      	ldr	r0, [pc, #60]	; (8017b98 <W25Qx_GetStatus+0x5c>)
 8017b5c:	f004 f991 	bl	801be82 <HAL_SPI_Transmit>
	/* Reception of the data */
	HAL_SPI_Receive(&hspi2,&status, 1, W25QXXXX_TIMEOUT_VALUE);
 8017b60:	1cf9      	adds	r1, r7, #3
 8017b62:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8017b66:	2201      	movs	r2, #1
 8017b68:	480b      	ldr	r0, [pc, #44]	; (8017b98 <W25Qx_GetStatus+0x5c>)
 8017b6a:	f004 fac6 	bl	801c0fa <HAL_SPI_Receive>
	W25Qx_Disable();
 8017b6e:	2201      	movs	r2, #1
 8017b70:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8017b74:	4807      	ldr	r0, [pc, #28]	; (8017b94 <W25Qx_GetStatus+0x58>)
 8017b76:	f001 fe7f 	bl	8019878 <HAL_GPIO_WritePin>
	
	/* Check the value of the register */
  if((status & W25QXXXX_FSR_BUSY) != 0)
 8017b7a:	78fb      	ldrb	r3, [r7, #3]
 8017b7c:	f003 0301 	and.w	r3, r3, #1
 8017b80:	2b00      	cmp	r3, #0
 8017b82:	d001      	beq.n	8017b88 <W25Qx_GetStatus+0x4c>
  {
    return W25Qx_BUSY;
 8017b84:	2302      	movs	r3, #2
 8017b86:	e000      	b.n	8017b8a <W25Qx_GetStatus+0x4e>
  }
	else
	{
		return W25Qx_OK;
 8017b88:	2300      	movs	r3, #0
	}		
}
 8017b8a:	4618      	mov	r0, r3
 8017b8c:	3708      	adds	r7, #8
 8017b8e:	46bd      	mov	sp, r7
 8017b90:	bd80      	pop	{r7, pc}
 8017b92:	bf00      	nop
 8017b94:	40020400 	.word	0x40020400
 8017b98:	200076c0 	.word	0x200076c0

08017b9c <W25Qx_WriteEnable>:
/**
  * @brief  This function send a Write Enable and wait it is effective.
  * @retval None
  */
uint8_t W25Qx_WriteEnable(void)
{
 8017b9c:	b580      	push	{r7, lr}
 8017b9e:	b082      	sub	sp, #8
 8017ba0:	af00      	add	r7, sp, #0
	uint8_t cmd[] = {WRITE_ENABLE_CMD};
 8017ba2:	2306      	movs	r3, #6
 8017ba4:	703b      	strb	r3, [r7, #0]
	uint32_t tickstart = get_tick();
 8017ba6:	f000 fa7d 	bl	80180a4 <HAL_GetTick>
 8017baa:	6078      	str	r0, [r7, #4]

	/*Select the FLASH: Chip Select low */
	W25Qx_Enable();
 8017bac:	2200      	movs	r2, #0
 8017bae:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8017bb2:	4814      	ldr	r0, [pc, #80]	; (8017c04 <W25Qx_WriteEnable+0x68>)
 8017bb4:	f001 fe60 	bl	8019878 <HAL_GPIO_WritePin>
	/* Send the read ID command */
	HAL_SPI_Transmit(&hspi2, cmd, 1, W25QXXXX_TIMEOUT_VALUE);
 8017bb8:	4639      	mov	r1, r7
 8017bba:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8017bbe:	2201      	movs	r2, #1
 8017bc0:	4811      	ldr	r0, [pc, #68]	; (8017c08 <W25Qx_WriteEnable+0x6c>)
 8017bc2:	f004 f95e 	bl	801be82 <HAL_SPI_Transmit>
	/*Deselect the FLASH: Chip Select high */
	W25Qx_Disable();
 8017bc6:	2201      	movs	r2, #1
 8017bc8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8017bcc:	480d      	ldr	r0, [pc, #52]	; (8017c04 <W25Qx_WriteEnable+0x68>)
 8017bce:	f001 fe53 	bl	8019878 <HAL_GPIO_WritePin>
	
	/* Wait the end of Flash writing */
	while(W25Qx_GetStatus() == W25Qx_BUSY)
 8017bd2:	e00c      	b.n	8017bee <W25Qx_WriteEnable+0x52>
	{
		/* Check for the Timeout */
    if((get_tick() - tickstart) > W25QXXXX_TIMEOUT_VALUE)
 8017bd4:	f000 fa66 	bl	80180a4 <HAL_GetTick>
 8017bd8:	4602      	mov	r2, r0
 8017bda:	687b      	ldr	r3, [r7, #4]
 8017bdc:	1ad3      	subs	r3, r2, r3
 8017bde:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8017be2:	d901      	bls.n	8017be8 <W25Qx_WriteEnable+0x4c>
    {        
			return W25Qx_TIMEOUT;
 8017be4:	2303      	movs	r3, #3
 8017be6:	e008      	b.n	8017bfa <W25Qx_WriteEnable+0x5e>
    }
	  delay(1);
 8017be8:	2001      	movs	r0, #1
 8017bea:	f000 fa67 	bl	80180bc <HAL_Delay>
	while(W25Qx_GetStatus() == W25Qx_BUSY)
 8017bee:	f7ff ffa5 	bl	8017b3c <W25Qx_GetStatus>
 8017bf2:	4603      	mov	r3, r0
 8017bf4:	2b02      	cmp	r3, #2
 8017bf6:	d0ed      	beq.n	8017bd4 <W25Qx_WriteEnable+0x38>
	}
	
	return W25Qx_OK;
 8017bf8:	2300      	movs	r3, #0
}
 8017bfa:	4618      	mov	r0, r3
 8017bfc:	3708      	adds	r7, #8
 8017bfe:	46bd      	mov	sp, r7
 8017c00:	bd80      	pop	{r7, pc}
 8017c02:	bf00      	nop
 8017c04:	40020400 	.word	0x40020400
 8017c08:	200076c0 	.word	0x200076c0

08017c0c <W25Qx_Read_ID>:
/   0XEF15,��ʾоƬ�ͺ�ΪW25Q32   
/   0XEF16,��ʾоƬ�ͺ�ΪW25Q64  
  * @retval None
  */
void W25Qx_Read_ID(uint16_t *ID)
{
 8017c0c:	b580      	push	{r7, lr}
 8017c0e:	b084      	sub	sp, #16
 8017c10:	af00      	add	r7, sp, #0
 8017c12:	6078      	str	r0, [r7, #4]
	uint8_t idt[2];
	
	uint8_t cmd[4] = {READ_ID_CMD,0x00,0x00,0x00};
 8017c14:	2390      	movs	r3, #144	; 0x90
 8017c16:	60bb      	str	r3, [r7, #8]
	
	W25Qx_Enable();
 8017c18:	2200      	movs	r2, #0
 8017c1a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8017c1e:	4813      	ldr	r0, [pc, #76]	; (8017c6c <W25Qx_Read_ID+0x60>)
 8017c20:	f001 fe2a 	bl	8019878 <HAL_GPIO_WritePin>
	/* Send the read ID command */
	HAL_SPI_Transmit(&hspi2, cmd, 4, W25QXXXX_TIMEOUT_VALUE);
 8017c24:	f107 0108 	add.w	r1, r7, #8
 8017c28:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8017c2c:	2204      	movs	r2, #4
 8017c2e:	4810      	ldr	r0, [pc, #64]	; (8017c70 <W25Qx_Read_ID+0x64>)
 8017c30:	f004 f927 	bl	801be82 <HAL_SPI_Transmit>
	/* Reception of the data */
	HAL_SPI_Receive(&hspi2,idt, 2, W25QXXXX_TIMEOUT_VALUE);
 8017c34:	f107 010c 	add.w	r1, r7, #12
 8017c38:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8017c3c:	2202      	movs	r2, #2
 8017c3e:	480c      	ldr	r0, [pc, #48]	; (8017c70 <W25Qx_Read_ID+0x64>)
 8017c40:	f004 fa5b 	bl	801c0fa <HAL_SPI_Receive>
	
	*ID = (idt[0] << 8) + idt[1]; 
 8017c44:	7b3b      	ldrb	r3, [r7, #12]
 8017c46:	b29b      	uxth	r3, r3
 8017c48:	021b      	lsls	r3, r3, #8
 8017c4a:	b29a      	uxth	r2, r3
 8017c4c:	7b7b      	ldrb	r3, [r7, #13]
 8017c4e:	b29b      	uxth	r3, r3
 8017c50:	4413      	add	r3, r2
 8017c52:	b29a      	uxth	r2, r3
 8017c54:	687b      	ldr	r3, [r7, #4]
 8017c56:	801a      	strh	r2, [r3, #0]
	
	W25Qx_Disable();
 8017c58:	2201      	movs	r2, #1
 8017c5a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8017c5e:	4803      	ldr	r0, [pc, #12]	; (8017c6c <W25Qx_Read_ID+0x60>)
 8017c60:	f001 fe0a 	bl	8019878 <HAL_GPIO_WritePin>
		
}
 8017c64:	bf00      	nop
 8017c66:	3710      	adds	r7, #16
 8017c68:	46bd      	mov	sp, r7
 8017c6a:	bd80      	pop	{r7, pc}
 8017c6c:	40020400 	.word	0x40020400
 8017c70:	200076c0 	.word	0x200076c0

08017c74 <W25Qx_Get_Parameter>:
  * @brief  Get W25QX Parameter.
  * @param  Para: W25Qx_Parameter
  * @retval NULL
  */
uint8_t W25Qx_Get_Parameter(W25Qx_Parameter *Para)
{
 8017c74:	b580      	push	{r7, lr}
 8017c76:	b084      	sub	sp, #16
 8017c78:	af00      	add	r7, sp, #0
 8017c7a:	6078      	str	r0, [r7, #4]
	uint16_t id;
	uint32_t size;
	
	Para->PAGE_SIZE = 256;
 8017c7c:	687b      	ldr	r3, [r7, #4]
 8017c7e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8017c82:	81da      	strh	r2, [r3, #14]
	Para->SUBSECTOR_SIZE = 4096;
 8017c84:	687b      	ldr	r3, [r7, #4]
 8017c86:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8017c8a:	819a      	strh	r2, [r3, #12]
	Para->SECTOR_SIZE = 0x10000;
 8017c8c:	687b      	ldr	r3, [r7, #4]
 8017c8e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8017c92:	605a      	str	r2, [r3, #4]
	
	W25Qx_Read_ID(&id);
 8017c94:	f107 030a 	add.w	r3, r7, #10
 8017c98:	4618      	mov	r0, r3
 8017c9a:	f7ff ffb7 	bl	8017c0c <W25Qx_Read_ID>
	if ((id < W25Q80 || id > W25Q256) &&
 8017c9e:	897b      	ldrh	r3, [r7, #10]
 8017ca0:	f64e 7212 	movw	r2, #61202	; 0xef12
 8017ca4:	4293      	cmp	r3, r2
 8017ca6:	d904      	bls.n	8017cb2 <W25Qx_Get_Parameter+0x3e>
 8017ca8:	897b      	ldrh	r3, [r7, #10]
 8017caa:	f64e 7218 	movw	r2, #61208	; 0xef18
 8017cae:	4293      	cmp	r3, r2
 8017cb0:	d90b      	bls.n	8017cca <W25Qx_Get_Parameter+0x56>
		(id < GD25Q64 || id > GD25Q256))return W25Qx_ERROR;
 8017cb2:	897b      	ldrh	r3, [r7, #10]
	if ((id < W25Q80 || id > W25Q256) &&
 8017cb4:	f64c 0215 	movw	r2, #51221	; 0xc815
 8017cb8:	4293      	cmp	r3, r2
 8017cba:	d904      	bls.n	8017cc6 <W25Qx_Get_Parameter+0x52>
		(id < GD25Q64 || id > GD25Q256))return W25Qx_ERROR;
 8017cbc:	897b      	ldrh	r3, [r7, #10]
 8017cbe:	f64c 0218 	movw	r2, #51224	; 0xc818
 8017cc2:	4293      	cmp	r3, r2
 8017cc4:	d901      	bls.n	8017cca <W25Qx_Get_Parameter+0x56>
 8017cc6:	2301      	movs	r3, #1
 8017cc8:	e049      	b.n	8017d5e <W25Qx_Get_Parameter+0xea>
	
	if (id > GD25Q256) //wq25q part
 8017cca:	897b      	ldrh	r3, [r7, #10]
 8017ccc:	f64c 0218 	movw	r2, #51224	; 0xc818
 8017cd0:	4293      	cmp	r3, r2
 8017cd2:	d916      	bls.n	8017d02 <W25Qx_Get_Parameter+0x8e>
		size = (uint32_t) powf(2,(id - 0xEF13)) * 1024 * 1024;
 8017cd4:	897b      	ldrh	r3, [r7, #10]
 8017cd6:	f5a3 436f 	sub.w	r3, r3, #61184	; 0xef00
 8017cda:	3b13      	subs	r3, #19
 8017cdc:	ee07 3a90 	vmov	s15, r3
 8017ce0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8017ce4:	eef0 0a67 	vmov.f32	s1, s15
 8017ce8:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
 8017cec:	f00e f80e 	bl	8025d0c <powf>
 8017cf0:	eef0 7a40 	vmov.f32	s15, s0
 8017cf4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8017cf8:	ee17 3a90 	vmov	r3, s15
 8017cfc:	051b      	lsls	r3, r3, #20
 8017cfe:	60fb      	str	r3, [r7, #12]
 8017d00:	e015      	b.n	8017d2e <W25Qx_Get_Parameter+0xba>
	else  //gd25q part
		size = (uint32_t) powf(2,(id - 0xC816)) * 1024 * 1024 * 8;
 8017d02:	897b      	ldrh	r3, [r7, #10]
 8017d04:	f5a3 4348 	sub.w	r3, r3, #51200	; 0xc800
 8017d08:	3b16      	subs	r3, #22
 8017d0a:	ee07 3a90 	vmov	s15, r3
 8017d0e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8017d12:	eef0 0a67 	vmov.f32	s1, s15
 8017d16:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
 8017d1a:	f00d fff7 	bl	8025d0c <powf>
 8017d1e:	eef0 7a40 	vmov.f32	s15, s0
 8017d22:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8017d26:	ee17 3a90 	vmov	r3, s15
 8017d2a:	05db      	lsls	r3, r3, #23
 8017d2c:	60fb      	str	r3, [r7, #12]

	Para->FLASH_ID = id;
 8017d2e:	897a      	ldrh	r2, [r7, #10]
 8017d30:	687b      	ldr	r3, [r7, #4]
 8017d32:	801a      	strh	r2, [r3, #0]
	Para->FLASH_SIZE = size;
 8017d34:	687b      	ldr	r3, [r7, #4]
 8017d36:	68fa      	ldr	r2, [r7, #12]
 8017d38:	611a      	str	r2, [r3, #16]
	Para->SUBSECTOR_COUNT = Para->FLASH_SIZE / Para->SUBSECTOR_SIZE;
 8017d3a:	687b      	ldr	r3, [r7, #4]
 8017d3c:	691b      	ldr	r3, [r3, #16]
 8017d3e:	687a      	ldr	r2, [r7, #4]
 8017d40:	8992      	ldrh	r2, [r2, #12]
 8017d42:	fbb3 f2f2 	udiv	r2, r3, r2
 8017d46:	687b      	ldr	r3, [r7, #4]
 8017d48:	609a      	str	r2, [r3, #8]
	Para->SECTOR_COUNT = Para->FLASH_SIZE / Para->SECTOR_SIZE;
 8017d4a:	687b      	ldr	r3, [r7, #4]
 8017d4c:	691a      	ldr	r2, [r3, #16]
 8017d4e:	687b      	ldr	r3, [r7, #4]
 8017d50:	685b      	ldr	r3, [r3, #4]
 8017d52:	fbb2 f3f3 	udiv	r3, r2, r3
 8017d56:	b29a      	uxth	r2, r3
 8017d58:	687b      	ldr	r3, [r7, #4]
 8017d5a:	805a      	strh	r2, [r3, #2]
	
	return W25Qx_OK;
 8017d5c:	2300      	movs	r3, #0
}
 8017d5e:	4618      	mov	r0, r3
 8017d60:	3710      	adds	r7, #16
 8017d62:	46bd      	mov	sp, r7
 8017d64:	bd80      	pop	{r7, pc}
	...

08017d68 <W25Qx_Read>:
  * @param  ReadAddr: Read start address
  * @param  Size: Size of data to read    
  * @retval QSPI memory status
  */
uint8_t W25Qx_Read(uint8_t* pData, uint32_t ReadAddr, uint32_t Size)
{
 8017d68:	b580      	push	{r7, lr}
 8017d6a:	b086      	sub	sp, #24
 8017d6c:	af00      	add	r7, sp, #0
 8017d6e:	60f8      	str	r0, [r7, #12]
 8017d70:	60b9      	str	r1, [r7, #8]
 8017d72:	607a      	str	r2, [r7, #4]
	uint8_t cmd[4];

	/* Configure the command */
	cmd[0] = READ_CMD;
 8017d74:	2303      	movs	r3, #3
 8017d76:	753b      	strb	r3, [r7, #20]
	cmd[1] = (uint8_t)(ReadAddr >> 16);
 8017d78:	68bb      	ldr	r3, [r7, #8]
 8017d7a:	0c1b      	lsrs	r3, r3, #16
 8017d7c:	b2db      	uxtb	r3, r3
 8017d7e:	757b      	strb	r3, [r7, #21]
	cmd[2] = (uint8_t)(ReadAddr >> 8);
 8017d80:	68bb      	ldr	r3, [r7, #8]
 8017d82:	0a1b      	lsrs	r3, r3, #8
 8017d84:	b2db      	uxtb	r3, r3
 8017d86:	75bb      	strb	r3, [r7, #22]
	cmd[3] = (uint8_t)(ReadAddr);
 8017d88:	68bb      	ldr	r3, [r7, #8]
 8017d8a:	b2db      	uxtb	r3, r3
 8017d8c:	75fb      	strb	r3, [r7, #23]
	
	W25Qx_Enable();
 8017d8e:	2200      	movs	r2, #0
 8017d90:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8017d94:	4811      	ldr	r0, [pc, #68]	; (8017ddc <W25Qx_Read+0x74>)
 8017d96:	f001 fd6f 	bl	8019878 <HAL_GPIO_WritePin>
	/* Send the read ID command */
	HAL_SPI_Transmit(&hspi2, cmd, 4, W25QXXXX_TIMEOUT_VALUE);
 8017d9a:	f107 0114 	add.w	r1, r7, #20
 8017d9e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8017da2:	2204      	movs	r2, #4
 8017da4:	480e      	ldr	r0, [pc, #56]	; (8017de0 <W25Qx_Read+0x78>)
 8017da6:	f004 f86c 	bl	801be82 <HAL_SPI_Transmit>
	/* Reception of the data */
	if (HAL_SPI_Receive(&hspi2, pData,Size,W25QXXXX_TIMEOUT_VALUE) != HAL_OK)
 8017daa:	687b      	ldr	r3, [r7, #4]
 8017dac:	b29a      	uxth	r2, r3
 8017dae:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8017db2:	68f9      	ldr	r1, [r7, #12]
 8017db4:	480a      	ldr	r0, [pc, #40]	; (8017de0 <W25Qx_Read+0x78>)
 8017db6:	f004 f9a0 	bl	801c0fa <HAL_SPI_Receive>
 8017dba:	4603      	mov	r3, r0
 8017dbc:	2b00      	cmp	r3, #0
 8017dbe:	d001      	beq.n	8017dc4 <W25Qx_Read+0x5c>
  {
    return W25Qx_ERROR;
 8017dc0:	2301      	movs	r3, #1
 8017dc2:	e006      	b.n	8017dd2 <W25Qx_Read+0x6a>
  }
	W25Qx_Disable();
 8017dc4:	2201      	movs	r2, #1
 8017dc6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8017dca:	4804      	ldr	r0, [pc, #16]	; (8017ddc <W25Qx_Read+0x74>)
 8017dcc:	f001 fd54 	bl	8019878 <HAL_GPIO_WritePin>
	return W25Qx_OK;
 8017dd0:	2300      	movs	r3, #0
}
 8017dd2:	4618      	mov	r0, r3
 8017dd4:	3718      	adds	r7, #24
 8017dd6:	46bd      	mov	sp, r7
 8017dd8:	bd80      	pop	{r7, pc}
 8017dda:	bf00      	nop
 8017ddc:	40020400 	.word	0x40020400
 8017de0:	200076c0 	.word	0x200076c0

08017de4 <W25Qx_Write>:
  * @param  WriteAddr: Write start address
  * @param  Size: Size of data to write,No more than 256byte.    
  * @retval QSPI memory status
  */
uint8_t W25Qx_Write(uint8_t* pData, uint32_t WriteAddr, uint32_t Size)
{
 8017de4:	b580      	push	{r7, lr}
 8017de6:	b08a      	sub	sp, #40	; 0x28
 8017de8:	af00      	add	r7, sp, #0
 8017dea:	60f8      	str	r0, [r7, #12]
 8017dec:	60b9      	str	r1, [r7, #8]
 8017dee:	607a      	str	r2, [r7, #4]
	uint8_t cmd[4];
	uint32_t end_addr, current_size, current_addr;
	uint32_t tickstart = get_tick();
 8017df0:	f000 f958 	bl	80180a4 <HAL_GetTick>
 8017df4:	61f8      	str	r0, [r7, #28]
	
	/* Calculation of the size between the write address and the end of the page */
  current_addr = 0;
 8017df6:	2300      	movs	r3, #0
 8017df8:	623b      	str	r3, [r7, #32]

  while (current_addr <= WriteAddr)
 8017dfa:	e003      	b.n	8017e04 <W25Qx_Write+0x20>
  {
    current_addr += W25QXXXX_PAGE_SIZE;
 8017dfc:	6a3b      	ldr	r3, [r7, #32]
 8017dfe:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8017e02:	623b      	str	r3, [r7, #32]
  while (current_addr <= WriteAddr)
 8017e04:	6a3a      	ldr	r2, [r7, #32]
 8017e06:	68bb      	ldr	r3, [r7, #8]
 8017e08:	429a      	cmp	r2, r3
 8017e0a:	d9f7      	bls.n	8017dfc <W25Qx_Write+0x18>
  }
  current_size = current_addr - WriteAddr;
 8017e0c:	6a3a      	ldr	r2, [r7, #32]
 8017e0e:	68bb      	ldr	r3, [r7, #8]
 8017e10:	1ad3      	subs	r3, r2, r3
 8017e12:	627b      	str	r3, [r7, #36]	; 0x24

  /* Check if the size of the data is less than the remaining place in the page */
  if (current_size > Size)
 8017e14:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8017e16:	687b      	ldr	r3, [r7, #4]
 8017e18:	429a      	cmp	r2, r3
 8017e1a:	d901      	bls.n	8017e20 <W25Qx_Write+0x3c>
  {
    current_size = Size;
 8017e1c:	687b      	ldr	r3, [r7, #4]
 8017e1e:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Initialize the adress variables */
  current_addr = WriteAddr;
 8017e20:	68bb      	ldr	r3, [r7, #8]
 8017e22:	623b      	str	r3, [r7, #32]
  end_addr = WriteAddr + Size;
 8017e24:	68ba      	ldr	r2, [r7, #8]
 8017e26:	687b      	ldr	r3, [r7, #4]
 8017e28:	4413      	add	r3, r2
 8017e2a:	61bb      	str	r3, [r7, #24]
	
  /* Perform the write page by page */
  do
  {
		/* Configure the command */
		cmd[0] = PAGE_PROG_CMD;
 8017e2c:	2302      	movs	r3, #2
 8017e2e:	753b      	strb	r3, [r7, #20]
		cmd[1] = (uint8_t)(current_addr >> 16);
 8017e30:	6a3b      	ldr	r3, [r7, #32]
 8017e32:	0c1b      	lsrs	r3, r3, #16
 8017e34:	b2db      	uxtb	r3, r3
 8017e36:	757b      	strb	r3, [r7, #21]
		cmd[2] = (uint8_t)(current_addr >> 8);
 8017e38:	6a3b      	ldr	r3, [r7, #32]
 8017e3a:	0a1b      	lsrs	r3, r3, #8
 8017e3c:	b2db      	uxtb	r3, r3
 8017e3e:	75bb      	strb	r3, [r7, #22]
		cmd[3] = (uint8_t)(current_addr);
 8017e40:	6a3b      	ldr	r3, [r7, #32]
 8017e42:	b2db      	uxtb	r3, r3
 8017e44:	75fb      	strb	r3, [r7, #23]

		/* Enable write operations */
		W25Qx_WriteEnable();
 8017e46:	f7ff fea9 	bl	8017b9c <W25Qx_WriteEnable>
	
		W25Qx_Enable();
 8017e4a:	2200      	movs	r2, #0
 8017e4c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8017e50:	4828      	ldr	r0, [pc, #160]	; (8017ef4 <W25Qx_Write+0x110>)
 8017e52:	f001 fd11 	bl	8019878 <HAL_GPIO_WritePin>
    /* Send the command */
    if (HAL_SPI_Transmit(&hspi2,cmd, 4, W25QXXXX_TIMEOUT_VALUE) != HAL_OK)
 8017e56:	f107 0114 	add.w	r1, r7, #20
 8017e5a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8017e5e:	2204      	movs	r2, #4
 8017e60:	4825      	ldr	r0, [pc, #148]	; (8017ef8 <W25Qx_Write+0x114>)
 8017e62:	f004 f80e 	bl	801be82 <HAL_SPI_Transmit>
 8017e66:	4603      	mov	r3, r0
 8017e68:	2b00      	cmp	r3, #0
 8017e6a:	d001      	beq.n	8017e70 <W25Qx_Write+0x8c>
    {
      return W25Qx_ERROR;
 8017e6c:	2301      	movs	r3, #1
 8017e6e:	e03c      	b.n	8017eea <W25Qx_Write+0x106>
    }
    
    /* Transmission of the data */
    if (HAL_SPI_Transmit(&hspi2, pData,current_size, W25QXXXX_TIMEOUT_VALUE) != HAL_OK)
 8017e70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017e72:	b29a      	uxth	r2, r3
 8017e74:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8017e78:	68f9      	ldr	r1, [r7, #12]
 8017e7a:	481f      	ldr	r0, [pc, #124]	; (8017ef8 <W25Qx_Write+0x114>)
 8017e7c:	f004 f801 	bl	801be82 <HAL_SPI_Transmit>
 8017e80:	4603      	mov	r3, r0
 8017e82:	2b00      	cmp	r3, #0
 8017e84:	d001      	beq.n	8017e8a <W25Qx_Write+0xa6>
    {
      return W25Qx_ERROR;
 8017e86:	2301      	movs	r3, #1
 8017e88:	e02f      	b.n	8017eea <W25Qx_Write+0x106>
    }
		W25Qx_Disable();
 8017e8a:	2201      	movs	r2, #1
 8017e8c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8017e90:	4818      	ldr	r0, [pc, #96]	; (8017ef4 <W25Qx_Write+0x110>)
 8017e92:	f001 fcf1 	bl	8019878 <HAL_GPIO_WritePin>
    	/* Wait the end of Flash writing */
		while(W25Qx_GetStatus() == W25Qx_BUSY)
 8017e96:	e009      	b.n	8017eac <W25Qx_Write+0xc8>
		{
			/* Check for the Timeout */
			if((get_tick() - tickstart) > W25QXXXX_TIMEOUT_VALUE)
 8017e98:	f000 f904 	bl	80180a4 <HAL_GetTick>
 8017e9c:	4602      	mov	r2, r0
 8017e9e:	69fb      	ldr	r3, [r7, #28]
 8017ea0:	1ad3      	subs	r3, r2, r3
 8017ea2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8017ea6:	d901      	bls.n	8017eac <W25Qx_Write+0xc8>
			{        
				return W25Qx_TIMEOUT;
 8017ea8:	2303      	movs	r3, #3
 8017eaa:	e01e      	b.n	8017eea <W25Qx_Write+0x106>
		while(W25Qx_GetStatus() == W25Qx_BUSY)
 8017eac:	f7ff fe46 	bl	8017b3c <W25Qx_GetStatus>
 8017eb0:	4603      	mov	r3, r0
 8017eb2:	2b02      	cmp	r3, #2
 8017eb4:	d0f0      	beq.n	8017e98 <W25Qx_Write+0xb4>
			}
			//delay(1);
		}
    
    /* Update the address and size variables for next page programming */
    current_addr += current_size;
 8017eb6:	6a3a      	ldr	r2, [r7, #32]
 8017eb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017eba:	4413      	add	r3, r2
 8017ebc:	623b      	str	r3, [r7, #32]
    pData += current_size;
 8017ebe:	68fa      	ldr	r2, [r7, #12]
 8017ec0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017ec2:	4413      	add	r3, r2
 8017ec4:	60fb      	str	r3, [r7, #12]
    current_size = ((current_addr + W25QXXXX_PAGE_SIZE) > end_addr) ? (end_addr - current_addr) : W25QXXXX_PAGE_SIZE;
 8017ec6:	6a3b      	ldr	r3, [r7, #32]
 8017ec8:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8017ecc:	69ba      	ldr	r2, [r7, #24]
 8017ece:	429a      	cmp	r2, r3
 8017ed0:	d203      	bcs.n	8017eda <W25Qx_Write+0xf6>
 8017ed2:	69ba      	ldr	r2, [r7, #24]
 8017ed4:	6a3b      	ldr	r3, [r7, #32]
 8017ed6:	1ad3      	subs	r3, r2, r3
 8017ed8:	e001      	b.n	8017ede <W25Qx_Write+0xfa>
 8017eda:	f44f 7380 	mov.w	r3, #256	; 0x100
 8017ede:	627b      	str	r3, [r7, #36]	; 0x24
  } while (current_addr < end_addr);
 8017ee0:	6a3a      	ldr	r2, [r7, #32]
 8017ee2:	69bb      	ldr	r3, [r7, #24]
 8017ee4:	429a      	cmp	r2, r3
 8017ee6:	d3a1      	bcc.n	8017e2c <W25Qx_Write+0x48>

	
	return W25Qx_OK;
 8017ee8:	2300      	movs	r3, #0
}
 8017eea:	4618      	mov	r0, r3
 8017eec:	3728      	adds	r7, #40	; 0x28
 8017eee:	46bd      	mov	sp, r7
 8017ef0:	bd80      	pop	{r7, pc}
 8017ef2:	bf00      	nop
 8017ef4:	40020400 	.word	0x40020400
 8017ef8:	200076c0 	.word	0x200076c0

08017efc <W25Qx_Erase_Block>:
  * @brief  Erases the specified block of the QSPI memory. 
  * @param  BlockAddress: Block address to erase  
  * @retval QSPI memory status
  */
uint8_t W25Qx_Erase_Block(uint32_t Address)
{
 8017efc:	b580      	push	{r7, lr}
 8017efe:	b084      	sub	sp, #16
 8017f00:	af00      	add	r7, sp, #0
 8017f02:	6078      	str	r0, [r7, #4]
	uint8_t cmd[4];
	uint32_t tickstart = get_tick();
 8017f04:	f000 f8ce 	bl	80180a4 <HAL_GetTick>
 8017f08:	60f8      	str	r0, [r7, #12]
	cmd[0] = SECTOR_ERASE_CMD;
 8017f0a:	2320      	movs	r3, #32
 8017f0c:	723b      	strb	r3, [r7, #8]
	cmd[1] = (uint8_t)(Address >> 16);
 8017f0e:	687b      	ldr	r3, [r7, #4]
 8017f10:	0c1b      	lsrs	r3, r3, #16
 8017f12:	b2db      	uxtb	r3, r3
 8017f14:	727b      	strb	r3, [r7, #9]
	cmd[2] = (uint8_t)(Address >> 8);
 8017f16:	687b      	ldr	r3, [r7, #4]
 8017f18:	0a1b      	lsrs	r3, r3, #8
 8017f1a:	b2db      	uxtb	r3, r3
 8017f1c:	72bb      	strb	r3, [r7, #10]
	cmd[3] = (uint8_t)(Address);
 8017f1e:	687b      	ldr	r3, [r7, #4]
 8017f20:	b2db      	uxtb	r3, r3
 8017f22:	72fb      	strb	r3, [r7, #11]
	
	/* Enable write operations */
	W25Qx_WriteEnable();
 8017f24:	f7ff fe3a 	bl	8017b9c <W25Qx_WriteEnable>
	
	/*Select the FLASH: Chip Select low */
	W25Qx_Enable();
 8017f28:	2200      	movs	r2, #0
 8017f2a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8017f2e:	4813      	ldr	r0, [pc, #76]	; (8017f7c <W25Qx_Erase_Block+0x80>)
 8017f30:	f001 fca2 	bl	8019878 <HAL_GPIO_WritePin>
	/* Send the read ID command */
	HAL_SPI_Transmit(&hspi2, cmd, 4, W25QXXXX_TIMEOUT_VALUE);
 8017f34:	f107 0108 	add.w	r1, r7, #8
 8017f38:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8017f3c:	2204      	movs	r2, #4
 8017f3e:	4810      	ldr	r0, [pc, #64]	; (8017f80 <W25Qx_Erase_Block+0x84>)
 8017f40:	f003 ff9f 	bl	801be82 <HAL_SPI_Transmit>
	/*Deselect the FLASH: Chip Select high */
	W25Qx_Disable();
 8017f44:	2201      	movs	r2, #1
 8017f46:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8017f4a:	480c      	ldr	r0, [pc, #48]	; (8017f7c <W25Qx_Erase_Block+0x80>)
 8017f4c:	f001 fc94 	bl	8019878 <HAL_GPIO_WritePin>
	
	/* Wait the end of Flash writing */
	while(W25Qx_GetStatus() == W25Qx_BUSY)
 8017f50:	e00a      	b.n	8017f68 <W25Qx_Erase_Block+0x6c>
	{
		/* Check for the Timeout */
    if((get_tick() - tickstart) > W25QXXXX_SECTOR_ERASE_MAX_TIME)
 8017f52:	f000 f8a7 	bl	80180a4 <HAL_GetTick>
 8017f56:	4602      	mov	r2, r0
 8017f58:	68fb      	ldr	r3, [r7, #12]
 8017f5a:	1ad3      	subs	r3, r2, r3
 8017f5c:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8017f60:	4293      	cmp	r3, r2
 8017f62:	d901      	bls.n	8017f68 <W25Qx_Erase_Block+0x6c>
    {        
			return W25Qx_TIMEOUT;
 8017f64:	2303      	movs	r3, #3
 8017f66:	e005      	b.n	8017f74 <W25Qx_Erase_Block+0x78>
	while(W25Qx_GetStatus() == W25Qx_BUSY)
 8017f68:	f7ff fde8 	bl	8017b3c <W25Qx_GetStatus>
 8017f6c:	4603      	mov	r3, r0
 8017f6e:	2b02      	cmp	r3, #2
 8017f70:	d0ef      	beq.n	8017f52 <W25Qx_Erase_Block+0x56>
    }
	  //delay(1);
	}
	return W25Qx_OK;
 8017f72:	2300      	movs	r3, #0
}
 8017f74:	4618      	mov	r0, r3
 8017f76:	3710      	adds	r7, #16
 8017f78:	46bd      	mov	sp, r7
 8017f7a:	bd80      	pop	{r7, pc}
 8017f7c:	40020400 	.word	0x40020400
 8017f80:	200076c0 	.word	0x200076c0

08017f84 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8017f84:	f8df d034 	ldr.w	sp, [pc, #52]	; 8017fbc <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8017f88:	480d      	ldr	r0, [pc, #52]	; (8017fc0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8017f8a:	490e      	ldr	r1, [pc, #56]	; (8017fc4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8017f8c:	4a0e      	ldr	r2, [pc, #56]	; (8017fc8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8017f8e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8017f90:	e002      	b.n	8017f98 <LoopCopyDataInit>

08017f92 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8017f92:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8017f94:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8017f96:	3304      	adds	r3, #4

08017f98 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8017f98:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8017f9a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8017f9c:	d3f9      	bcc.n	8017f92 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8017f9e:	4a0b      	ldr	r2, [pc, #44]	; (8017fcc <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8017fa0:	4c0b      	ldr	r4, [pc, #44]	; (8017fd0 <LoopFillZerobss+0x26>)
  movs r3, #0
 8017fa2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8017fa4:	e001      	b.n	8017faa <LoopFillZerobss>

08017fa6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8017fa6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8017fa8:	3204      	adds	r2, #4

08017faa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8017faa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8017fac:	d3fb      	bcc.n	8017fa6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8017fae:	f7ff fd7f 	bl	8017ab0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8017fb2:	f00d fd99 	bl	8025ae8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8017fb6:	f7fd fdc5 	bl	8015b44 <main>
  bx  lr    
 8017fba:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8017fbc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8017fc0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8017fc4:	20000754 	.word	0x20000754
  ldr r2, =_sidata
 8017fc8:	080265bc 	.word	0x080265bc
  ldr r2, =_sbss
 8017fcc:	20000754 	.word	0x20000754
  ldr r4, =_ebss
 8017fd0:	2000b3cc 	.word	0x2000b3cc

08017fd4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8017fd4:	e7fe      	b.n	8017fd4 <ADC_IRQHandler>
	...

08017fd8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8017fd8:	b580      	push	{r7, lr}
 8017fda:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8017fdc:	4b0e      	ldr	r3, [pc, #56]	; (8018018 <HAL_Init+0x40>)
 8017fde:	681b      	ldr	r3, [r3, #0]
 8017fe0:	4a0d      	ldr	r2, [pc, #52]	; (8018018 <HAL_Init+0x40>)
 8017fe2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8017fe6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8017fe8:	4b0b      	ldr	r3, [pc, #44]	; (8018018 <HAL_Init+0x40>)
 8017fea:	681b      	ldr	r3, [r3, #0]
 8017fec:	4a0a      	ldr	r2, [pc, #40]	; (8018018 <HAL_Init+0x40>)
 8017fee:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8017ff2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8017ff4:	4b08      	ldr	r3, [pc, #32]	; (8018018 <HAL_Init+0x40>)
 8017ff6:	681b      	ldr	r3, [r3, #0]
 8017ff8:	4a07      	ldr	r2, [pc, #28]	; (8018018 <HAL_Init+0x40>)
 8017ffa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8017ffe:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8018000:	2003      	movs	r0, #3
 8018002:	f000 fbc1 	bl	8018788 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8018006:	2000      	movs	r0, #0
 8018008:	f000 f808 	bl	801801c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 801800c:	f7ff fa70 	bl	80174f0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8018010:	2300      	movs	r3, #0
}
 8018012:	4618      	mov	r0, r3
 8018014:	bd80      	pop	{r7, pc}
 8018016:	bf00      	nop
 8018018:	40023c00 	.word	0x40023c00

0801801c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 801801c:	b580      	push	{r7, lr}
 801801e:	b082      	sub	sp, #8
 8018020:	af00      	add	r7, sp, #0
 8018022:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8018024:	4b12      	ldr	r3, [pc, #72]	; (8018070 <HAL_InitTick+0x54>)
 8018026:	681a      	ldr	r2, [r3, #0]
 8018028:	4b12      	ldr	r3, [pc, #72]	; (8018074 <HAL_InitTick+0x58>)
 801802a:	781b      	ldrb	r3, [r3, #0]
 801802c:	4619      	mov	r1, r3
 801802e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8018032:	fbb3 f3f1 	udiv	r3, r3, r1
 8018036:	fbb2 f3f3 	udiv	r3, r2, r3
 801803a:	4618      	mov	r0, r3
 801803c:	f000 fbd9 	bl	80187f2 <HAL_SYSTICK_Config>
 8018040:	4603      	mov	r3, r0
 8018042:	2b00      	cmp	r3, #0
 8018044:	d001      	beq.n	801804a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8018046:	2301      	movs	r3, #1
 8018048:	e00e      	b.n	8018068 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 801804a:	687b      	ldr	r3, [r7, #4]
 801804c:	2b0f      	cmp	r3, #15
 801804e:	d80a      	bhi.n	8018066 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8018050:	2200      	movs	r2, #0
 8018052:	6879      	ldr	r1, [r7, #4]
 8018054:	f04f 30ff 	mov.w	r0, #4294967295
 8018058:	f000 fba1 	bl	801879e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 801805c:	4a06      	ldr	r2, [pc, #24]	; (8018078 <HAL_InitTick+0x5c>)
 801805e:	687b      	ldr	r3, [r7, #4]
 8018060:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8018062:	2300      	movs	r3, #0
 8018064:	e000      	b.n	8018068 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8018066:	2301      	movs	r3, #1
}
 8018068:	4618      	mov	r0, r3
 801806a:	3708      	adds	r7, #8
 801806c:	46bd      	mov	sp, r7
 801806e:	bd80      	pop	{r7, pc}
 8018070:	20000564 	.word	0x20000564
 8018074:	2000056c 	.word	0x2000056c
 8018078:	20000568 	.word	0x20000568

0801807c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 801807c:	b480      	push	{r7}
 801807e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8018080:	4b06      	ldr	r3, [pc, #24]	; (801809c <HAL_IncTick+0x20>)
 8018082:	781b      	ldrb	r3, [r3, #0]
 8018084:	461a      	mov	r2, r3
 8018086:	4b06      	ldr	r3, [pc, #24]	; (80180a0 <HAL_IncTick+0x24>)
 8018088:	681b      	ldr	r3, [r3, #0]
 801808a:	4413      	add	r3, r2
 801808c:	4a04      	ldr	r2, [pc, #16]	; (80180a0 <HAL_IncTick+0x24>)
 801808e:	6013      	str	r3, [r2, #0]
}
 8018090:	bf00      	nop
 8018092:	46bd      	mov	sp, r7
 8018094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018098:	4770      	bx	lr
 801809a:	bf00      	nop
 801809c:	2000056c 	.word	0x2000056c
 80180a0:	20007a5c 	.word	0x20007a5c

080180a4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80180a4:	b480      	push	{r7}
 80180a6:	af00      	add	r7, sp, #0
  return uwTick;
 80180a8:	4b03      	ldr	r3, [pc, #12]	; (80180b8 <HAL_GetTick+0x14>)
 80180aa:	681b      	ldr	r3, [r3, #0]
}
 80180ac:	4618      	mov	r0, r3
 80180ae:	46bd      	mov	sp, r7
 80180b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80180b4:	4770      	bx	lr
 80180b6:	bf00      	nop
 80180b8:	20007a5c 	.word	0x20007a5c

080180bc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80180bc:	b580      	push	{r7, lr}
 80180be:	b084      	sub	sp, #16
 80180c0:	af00      	add	r7, sp, #0
 80180c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80180c4:	f7ff ffee 	bl	80180a4 <HAL_GetTick>
 80180c8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80180ca:	687b      	ldr	r3, [r7, #4]
 80180cc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80180ce:	68fb      	ldr	r3, [r7, #12]
 80180d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80180d4:	d005      	beq.n	80180e2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80180d6:	4b0a      	ldr	r3, [pc, #40]	; (8018100 <HAL_Delay+0x44>)
 80180d8:	781b      	ldrb	r3, [r3, #0]
 80180da:	461a      	mov	r2, r3
 80180dc:	68fb      	ldr	r3, [r7, #12]
 80180de:	4413      	add	r3, r2
 80180e0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80180e2:	bf00      	nop
 80180e4:	f7ff ffde 	bl	80180a4 <HAL_GetTick>
 80180e8:	4602      	mov	r2, r0
 80180ea:	68bb      	ldr	r3, [r7, #8]
 80180ec:	1ad3      	subs	r3, r2, r3
 80180ee:	68fa      	ldr	r2, [r7, #12]
 80180f0:	429a      	cmp	r2, r3
 80180f2:	d8f7      	bhi.n	80180e4 <HAL_Delay+0x28>
  {
  }
}
 80180f4:	bf00      	nop
 80180f6:	bf00      	nop
 80180f8:	3710      	adds	r7, #16
 80180fa:	46bd      	mov	sp, r7
 80180fc:	bd80      	pop	{r7, pc}
 80180fe:	bf00      	nop
 8018100:	2000056c 	.word	0x2000056c

08018104 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8018104:	b580      	push	{r7, lr}
 8018106:	b084      	sub	sp, #16
 8018108:	af00      	add	r7, sp, #0
 801810a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 801810c:	2300      	movs	r3, #0
 801810e:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8018110:	687b      	ldr	r3, [r7, #4]
 8018112:	2b00      	cmp	r3, #0
 8018114:	d101      	bne.n	801811a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8018116:	2301      	movs	r3, #1
 8018118:	e033      	b.n	8018182 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 801811a:	687b      	ldr	r3, [r7, #4]
 801811c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801811e:	2b00      	cmp	r3, #0
 8018120:	d109      	bne.n	8018136 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8018122:	6878      	ldr	r0, [r7, #4]
 8018124:	f7ff fa0c 	bl	8017540 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8018128:	687b      	ldr	r3, [r7, #4]
 801812a:	2200      	movs	r2, #0
 801812c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 801812e:	687b      	ldr	r3, [r7, #4]
 8018130:	2200      	movs	r2, #0
 8018132:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8018136:	687b      	ldr	r3, [r7, #4]
 8018138:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801813a:	f003 0310 	and.w	r3, r3, #16
 801813e:	2b00      	cmp	r3, #0
 8018140:	d118      	bne.n	8018174 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8018142:	687b      	ldr	r3, [r7, #4]
 8018144:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8018146:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 801814a:	f023 0302 	bic.w	r3, r3, #2
 801814e:	f043 0202 	orr.w	r2, r3, #2
 8018152:	687b      	ldr	r3, [r7, #4]
 8018154:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8018156:	6878      	ldr	r0, [r7, #4]
 8018158:	f000 f94a 	bl	80183f0 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 801815c:	687b      	ldr	r3, [r7, #4]
 801815e:	2200      	movs	r2, #0
 8018160:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8018162:	687b      	ldr	r3, [r7, #4]
 8018164:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8018166:	f023 0303 	bic.w	r3, r3, #3
 801816a:	f043 0201 	orr.w	r2, r3, #1
 801816e:	687b      	ldr	r3, [r7, #4]
 8018170:	641a      	str	r2, [r3, #64]	; 0x40
 8018172:	e001      	b.n	8018178 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8018174:	2301      	movs	r3, #1
 8018176:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8018178:	687b      	ldr	r3, [r7, #4]
 801817a:	2200      	movs	r2, #0
 801817c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8018180:	7bfb      	ldrb	r3, [r7, #15]
}
 8018182:	4618      	mov	r0, r3
 8018184:	3710      	adds	r7, #16
 8018186:	46bd      	mov	sp, r7
 8018188:	bd80      	pop	{r7, pc}
	...

0801818c <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 801818c:	b480      	push	{r7}
 801818e:	b085      	sub	sp, #20
 8018190:	af00      	add	r7, sp, #0
 8018192:	6078      	str	r0, [r7, #4]
 8018194:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8018196:	2300      	movs	r3, #0
 8018198:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 801819a:	687b      	ldr	r3, [r7, #4]
 801819c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80181a0:	2b01      	cmp	r3, #1
 80181a2:	d101      	bne.n	80181a8 <HAL_ADC_ConfigChannel+0x1c>
 80181a4:	2302      	movs	r3, #2
 80181a6:	e113      	b.n	80183d0 <HAL_ADC_ConfigChannel+0x244>
 80181a8:	687b      	ldr	r3, [r7, #4]
 80181aa:	2201      	movs	r2, #1
 80181ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80181b0:	683b      	ldr	r3, [r7, #0]
 80181b2:	681b      	ldr	r3, [r3, #0]
 80181b4:	2b09      	cmp	r3, #9
 80181b6:	d925      	bls.n	8018204 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80181b8:	687b      	ldr	r3, [r7, #4]
 80181ba:	681b      	ldr	r3, [r3, #0]
 80181bc:	68d9      	ldr	r1, [r3, #12]
 80181be:	683b      	ldr	r3, [r7, #0]
 80181c0:	681b      	ldr	r3, [r3, #0]
 80181c2:	b29b      	uxth	r3, r3
 80181c4:	461a      	mov	r2, r3
 80181c6:	4613      	mov	r3, r2
 80181c8:	005b      	lsls	r3, r3, #1
 80181ca:	4413      	add	r3, r2
 80181cc:	3b1e      	subs	r3, #30
 80181ce:	2207      	movs	r2, #7
 80181d0:	fa02 f303 	lsl.w	r3, r2, r3
 80181d4:	43da      	mvns	r2, r3
 80181d6:	687b      	ldr	r3, [r7, #4]
 80181d8:	681b      	ldr	r3, [r3, #0]
 80181da:	400a      	ands	r2, r1
 80181dc:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80181de:	687b      	ldr	r3, [r7, #4]
 80181e0:	681b      	ldr	r3, [r3, #0]
 80181e2:	68d9      	ldr	r1, [r3, #12]
 80181e4:	683b      	ldr	r3, [r7, #0]
 80181e6:	689a      	ldr	r2, [r3, #8]
 80181e8:	683b      	ldr	r3, [r7, #0]
 80181ea:	681b      	ldr	r3, [r3, #0]
 80181ec:	b29b      	uxth	r3, r3
 80181ee:	4618      	mov	r0, r3
 80181f0:	4603      	mov	r3, r0
 80181f2:	005b      	lsls	r3, r3, #1
 80181f4:	4403      	add	r3, r0
 80181f6:	3b1e      	subs	r3, #30
 80181f8:	409a      	lsls	r2, r3
 80181fa:	687b      	ldr	r3, [r7, #4]
 80181fc:	681b      	ldr	r3, [r3, #0]
 80181fe:	430a      	orrs	r2, r1
 8018200:	60da      	str	r2, [r3, #12]
 8018202:	e022      	b.n	801824a <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8018204:	687b      	ldr	r3, [r7, #4]
 8018206:	681b      	ldr	r3, [r3, #0]
 8018208:	6919      	ldr	r1, [r3, #16]
 801820a:	683b      	ldr	r3, [r7, #0]
 801820c:	681b      	ldr	r3, [r3, #0]
 801820e:	b29b      	uxth	r3, r3
 8018210:	461a      	mov	r2, r3
 8018212:	4613      	mov	r3, r2
 8018214:	005b      	lsls	r3, r3, #1
 8018216:	4413      	add	r3, r2
 8018218:	2207      	movs	r2, #7
 801821a:	fa02 f303 	lsl.w	r3, r2, r3
 801821e:	43da      	mvns	r2, r3
 8018220:	687b      	ldr	r3, [r7, #4]
 8018222:	681b      	ldr	r3, [r3, #0]
 8018224:	400a      	ands	r2, r1
 8018226:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8018228:	687b      	ldr	r3, [r7, #4]
 801822a:	681b      	ldr	r3, [r3, #0]
 801822c:	6919      	ldr	r1, [r3, #16]
 801822e:	683b      	ldr	r3, [r7, #0]
 8018230:	689a      	ldr	r2, [r3, #8]
 8018232:	683b      	ldr	r3, [r7, #0]
 8018234:	681b      	ldr	r3, [r3, #0]
 8018236:	b29b      	uxth	r3, r3
 8018238:	4618      	mov	r0, r3
 801823a:	4603      	mov	r3, r0
 801823c:	005b      	lsls	r3, r3, #1
 801823e:	4403      	add	r3, r0
 8018240:	409a      	lsls	r2, r3
 8018242:	687b      	ldr	r3, [r7, #4]
 8018244:	681b      	ldr	r3, [r3, #0]
 8018246:	430a      	orrs	r2, r1
 8018248:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 801824a:	683b      	ldr	r3, [r7, #0]
 801824c:	685b      	ldr	r3, [r3, #4]
 801824e:	2b06      	cmp	r3, #6
 8018250:	d824      	bhi.n	801829c <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8018252:	687b      	ldr	r3, [r7, #4]
 8018254:	681b      	ldr	r3, [r3, #0]
 8018256:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8018258:	683b      	ldr	r3, [r7, #0]
 801825a:	685a      	ldr	r2, [r3, #4]
 801825c:	4613      	mov	r3, r2
 801825e:	009b      	lsls	r3, r3, #2
 8018260:	4413      	add	r3, r2
 8018262:	3b05      	subs	r3, #5
 8018264:	221f      	movs	r2, #31
 8018266:	fa02 f303 	lsl.w	r3, r2, r3
 801826a:	43da      	mvns	r2, r3
 801826c:	687b      	ldr	r3, [r7, #4]
 801826e:	681b      	ldr	r3, [r3, #0]
 8018270:	400a      	ands	r2, r1
 8018272:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8018274:	687b      	ldr	r3, [r7, #4]
 8018276:	681b      	ldr	r3, [r3, #0]
 8018278:	6b59      	ldr	r1, [r3, #52]	; 0x34
 801827a:	683b      	ldr	r3, [r7, #0]
 801827c:	681b      	ldr	r3, [r3, #0]
 801827e:	b29b      	uxth	r3, r3
 8018280:	4618      	mov	r0, r3
 8018282:	683b      	ldr	r3, [r7, #0]
 8018284:	685a      	ldr	r2, [r3, #4]
 8018286:	4613      	mov	r3, r2
 8018288:	009b      	lsls	r3, r3, #2
 801828a:	4413      	add	r3, r2
 801828c:	3b05      	subs	r3, #5
 801828e:	fa00 f203 	lsl.w	r2, r0, r3
 8018292:	687b      	ldr	r3, [r7, #4]
 8018294:	681b      	ldr	r3, [r3, #0]
 8018296:	430a      	orrs	r2, r1
 8018298:	635a      	str	r2, [r3, #52]	; 0x34
 801829a:	e04c      	b.n	8018336 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 801829c:	683b      	ldr	r3, [r7, #0]
 801829e:	685b      	ldr	r3, [r3, #4]
 80182a0:	2b0c      	cmp	r3, #12
 80182a2:	d824      	bhi.n	80182ee <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80182a4:	687b      	ldr	r3, [r7, #4]
 80182a6:	681b      	ldr	r3, [r3, #0]
 80182a8:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80182aa:	683b      	ldr	r3, [r7, #0]
 80182ac:	685a      	ldr	r2, [r3, #4]
 80182ae:	4613      	mov	r3, r2
 80182b0:	009b      	lsls	r3, r3, #2
 80182b2:	4413      	add	r3, r2
 80182b4:	3b23      	subs	r3, #35	; 0x23
 80182b6:	221f      	movs	r2, #31
 80182b8:	fa02 f303 	lsl.w	r3, r2, r3
 80182bc:	43da      	mvns	r2, r3
 80182be:	687b      	ldr	r3, [r7, #4]
 80182c0:	681b      	ldr	r3, [r3, #0]
 80182c2:	400a      	ands	r2, r1
 80182c4:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80182c6:	687b      	ldr	r3, [r7, #4]
 80182c8:	681b      	ldr	r3, [r3, #0]
 80182ca:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80182cc:	683b      	ldr	r3, [r7, #0]
 80182ce:	681b      	ldr	r3, [r3, #0]
 80182d0:	b29b      	uxth	r3, r3
 80182d2:	4618      	mov	r0, r3
 80182d4:	683b      	ldr	r3, [r7, #0]
 80182d6:	685a      	ldr	r2, [r3, #4]
 80182d8:	4613      	mov	r3, r2
 80182da:	009b      	lsls	r3, r3, #2
 80182dc:	4413      	add	r3, r2
 80182de:	3b23      	subs	r3, #35	; 0x23
 80182e0:	fa00 f203 	lsl.w	r2, r0, r3
 80182e4:	687b      	ldr	r3, [r7, #4]
 80182e6:	681b      	ldr	r3, [r3, #0]
 80182e8:	430a      	orrs	r2, r1
 80182ea:	631a      	str	r2, [r3, #48]	; 0x30
 80182ec:	e023      	b.n	8018336 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80182ee:	687b      	ldr	r3, [r7, #4]
 80182f0:	681b      	ldr	r3, [r3, #0]
 80182f2:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80182f4:	683b      	ldr	r3, [r7, #0]
 80182f6:	685a      	ldr	r2, [r3, #4]
 80182f8:	4613      	mov	r3, r2
 80182fa:	009b      	lsls	r3, r3, #2
 80182fc:	4413      	add	r3, r2
 80182fe:	3b41      	subs	r3, #65	; 0x41
 8018300:	221f      	movs	r2, #31
 8018302:	fa02 f303 	lsl.w	r3, r2, r3
 8018306:	43da      	mvns	r2, r3
 8018308:	687b      	ldr	r3, [r7, #4]
 801830a:	681b      	ldr	r3, [r3, #0]
 801830c:	400a      	ands	r2, r1
 801830e:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8018310:	687b      	ldr	r3, [r7, #4]
 8018312:	681b      	ldr	r3, [r3, #0]
 8018314:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8018316:	683b      	ldr	r3, [r7, #0]
 8018318:	681b      	ldr	r3, [r3, #0]
 801831a:	b29b      	uxth	r3, r3
 801831c:	4618      	mov	r0, r3
 801831e:	683b      	ldr	r3, [r7, #0]
 8018320:	685a      	ldr	r2, [r3, #4]
 8018322:	4613      	mov	r3, r2
 8018324:	009b      	lsls	r3, r3, #2
 8018326:	4413      	add	r3, r2
 8018328:	3b41      	subs	r3, #65	; 0x41
 801832a:	fa00 f203 	lsl.w	r2, r0, r3
 801832e:	687b      	ldr	r3, [r7, #4]
 8018330:	681b      	ldr	r3, [r3, #0]
 8018332:	430a      	orrs	r2, r1
 8018334:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8018336:	4b29      	ldr	r3, [pc, #164]	; (80183dc <HAL_ADC_ConfigChannel+0x250>)
 8018338:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 801833a:	687b      	ldr	r3, [r7, #4]
 801833c:	681b      	ldr	r3, [r3, #0]
 801833e:	4a28      	ldr	r2, [pc, #160]	; (80183e0 <HAL_ADC_ConfigChannel+0x254>)
 8018340:	4293      	cmp	r3, r2
 8018342:	d10f      	bne.n	8018364 <HAL_ADC_ConfigChannel+0x1d8>
 8018344:	683b      	ldr	r3, [r7, #0]
 8018346:	681b      	ldr	r3, [r3, #0]
 8018348:	2b12      	cmp	r3, #18
 801834a:	d10b      	bne.n	8018364 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 801834c:	68fb      	ldr	r3, [r7, #12]
 801834e:	685b      	ldr	r3, [r3, #4]
 8018350:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8018354:	68fb      	ldr	r3, [r7, #12]
 8018356:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8018358:	68fb      	ldr	r3, [r7, #12]
 801835a:	685b      	ldr	r3, [r3, #4]
 801835c:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8018360:	68fb      	ldr	r3, [r7, #12]
 8018362:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8018364:	687b      	ldr	r3, [r7, #4]
 8018366:	681b      	ldr	r3, [r3, #0]
 8018368:	4a1d      	ldr	r2, [pc, #116]	; (80183e0 <HAL_ADC_ConfigChannel+0x254>)
 801836a:	4293      	cmp	r3, r2
 801836c:	d12b      	bne.n	80183c6 <HAL_ADC_ConfigChannel+0x23a>
 801836e:	683b      	ldr	r3, [r7, #0]
 8018370:	681b      	ldr	r3, [r3, #0]
 8018372:	4a1c      	ldr	r2, [pc, #112]	; (80183e4 <HAL_ADC_ConfigChannel+0x258>)
 8018374:	4293      	cmp	r3, r2
 8018376:	d003      	beq.n	8018380 <HAL_ADC_ConfigChannel+0x1f4>
 8018378:	683b      	ldr	r3, [r7, #0]
 801837a:	681b      	ldr	r3, [r3, #0]
 801837c:	2b11      	cmp	r3, #17
 801837e:	d122      	bne.n	80183c6 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8018380:	68fb      	ldr	r3, [r7, #12]
 8018382:	685b      	ldr	r3, [r3, #4]
 8018384:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8018388:	68fb      	ldr	r3, [r7, #12]
 801838a:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 801838c:	68fb      	ldr	r3, [r7, #12]
 801838e:	685b      	ldr	r3, [r3, #4]
 8018390:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8018394:	68fb      	ldr	r3, [r7, #12]
 8018396:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8018398:	683b      	ldr	r3, [r7, #0]
 801839a:	681b      	ldr	r3, [r3, #0]
 801839c:	4a11      	ldr	r2, [pc, #68]	; (80183e4 <HAL_ADC_ConfigChannel+0x258>)
 801839e:	4293      	cmp	r3, r2
 80183a0:	d111      	bne.n	80183c6 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80183a2:	4b11      	ldr	r3, [pc, #68]	; (80183e8 <HAL_ADC_ConfigChannel+0x25c>)
 80183a4:	681b      	ldr	r3, [r3, #0]
 80183a6:	4a11      	ldr	r2, [pc, #68]	; (80183ec <HAL_ADC_ConfigChannel+0x260>)
 80183a8:	fba2 2303 	umull	r2, r3, r2, r3
 80183ac:	0c9a      	lsrs	r2, r3, #18
 80183ae:	4613      	mov	r3, r2
 80183b0:	009b      	lsls	r3, r3, #2
 80183b2:	4413      	add	r3, r2
 80183b4:	005b      	lsls	r3, r3, #1
 80183b6:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80183b8:	e002      	b.n	80183c0 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 80183ba:	68bb      	ldr	r3, [r7, #8]
 80183bc:	3b01      	subs	r3, #1
 80183be:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80183c0:	68bb      	ldr	r3, [r7, #8]
 80183c2:	2b00      	cmp	r3, #0
 80183c4:	d1f9      	bne.n	80183ba <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80183c6:	687b      	ldr	r3, [r7, #4]
 80183c8:	2200      	movs	r2, #0
 80183ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80183ce:	2300      	movs	r3, #0
}
 80183d0:	4618      	mov	r0, r3
 80183d2:	3714      	adds	r7, #20
 80183d4:	46bd      	mov	sp, r7
 80183d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80183da:	4770      	bx	lr
 80183dc:	40012300 	.word	0x40012300
 80183e0:	40012000 	.word	0x40012000
 80183e4:	10000012 	.word	0x10000012
 80183e8:	20000564 	.word	0x20000564
 80183ec:	431bde83 	.word	0x431bde83

080183f0 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80183f0:	b480      	push	{r7}
 80183f2:	b085      	sub	sp, #20
 80183f4:	af00      	add	r7, sp, #0
 80183f6:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80183f8:	4b79      	ldr	r3, [pc, #484]	; (80185e0 <ADC_Init+0x1f0>)
 80183fa:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80183fc:	68fb      	ldr	r3, [r7, #12]
 80183fe:	685b      	ldr	r3, [r3, #4]
 8018400:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8018404:	68fb      	ldr	r3, [r7, #12]
 8018406:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8018408:	68fb      	ldr	r3, [r7, #12]
 801840a:	685a      	ldr	r2, [r3, #4]
 801840c:	687b      	ldr	r3, [r7, #4]
 801840e:	685b      	ldr	r3, [r3, #4]
 8018410:	431a      	orrs	r2, r3
 8018412:	68fb      	ldr	r3, [r7, #12]
 8018414:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8018416:	687b      	ldr	r3, [r7, #4]
 8018418:	681b      	ldr	r3, [r3, #0]
 801841a:	685a      	ldr	r2, [r3, #4]
 801841c:	687b      	ldr	r3, [r7, #4]
 801841e:	681b      	ldr	r3, [r3, #0]
 8018420:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8018424:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8018426:	687b      	ldr	r3, [r7, #4]
 8018428:	681b      	ldr	r3, [r3, #0]
 801842a:	6859      	ldr	r1, [r3, #4]
 801842c:	687b      	ldr	r3, [r7, #4]
 801842e:	691b      	ldr	r3, [r3, #16]
 8018430:	021a      	lsls	r2, r3, #8
 8018432:	687b      	ldr	r3, [r7, #4]
 8018434:	681b      	ldr	r3, [r3, #0]
 8018436:	430a      	orrs	r2, r1
 8018438:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 801843a:	687b      	ldr	r3, [r7, #4]
 801843c:	681b      	ldr	r3, [r3, #0]
 801843e:	685a      	ldr	r2, [r3, #4]
 8018440:	687b      	ldr	r3, [r7, #4]
 8018442:	681b      	ldr	r3, [r3, #0]
 8018444:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8018448:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 801844a:	687b      	ldr	r3, [r7, #4]
 801844c:	681b      	ldr	r3, [r3, #0]
 801844e:	6859      	ldr	r1, [r3, #4]
 8018450:	687b      	ldr	r3, [r7, #4]
 8018452:	689a      	ldr	r2, [r3, #8]
 8018454:	687b      	ldr	r3, [r7, #4]
 8018456:	681b      	ldr	r3, [r3, #0]
 8018458:	430a      	orrs	r2, r1
 801845a:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 801845c:	687b      	ldr	r3, [r7, #4]
 801845e:	681b      	ldr	r3, [r3, #0]
 8018460:	689a      	ldr	r2, [r3, #8]
 8018462:	687b      	ldr	r3, [r7, #4]
 8018464:	681b      	ldr	r3, [r3, #0]
 8018466:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 801846a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 801846c:	687b      	ldr	r3, [r7, #4]
 801846e:	681b      	ldr	r3, [r3, #0]
 8018470:	6899      	ldr	r1, [r3, #8]
 8018472:	687b      	ldr	r3, [r7, #4]
 8018474:	68da      	ldr	r2, [r3, #12]
 8018476:	687b      	ldr	r3, [r7, #4]
 8018478:	681b      	ldr	r3, [r3, #0]
 801847a:	430a      	orrs	r2, r1
 801847c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 801847e:	687b      	ldr	r3, [r7, #4]
 8018480:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8018482:	4a58      	ldr	r2, [pc, #352]	; (80185e4 <ADC_Init+0x1f4>)
 8018484:	4293      	cmp	r3, r2
 8018486:	d022      	beq.n	80184ce <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8018488:	687b      	ldr	r3, [r7, #4]
 801848a:	681b      	ldr	r3, [r3, #0]
 801848c:	689a      	ldr	r2, [r3, #8]
 801848e:	687b      	ldr	r3, [r7, #4]
 8018490:	681b      	ldr	r3, [r3, #0]
 8018492:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8018496:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8018498:	687b      	ldr	r3, [r7, #4]
 801849a:	681b      	ldr	r3, [r3, #0]
 801849c:	6899      	ldr	r1, [r3, #8]
 801849e:	687b      	ldr	r3, [r7, #4]
 80184a0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80184a2:	687b      	ldr	r3, [r7, #4]
 80184a4:	681b      	ldr	r3, [r3, #0]
 80184a6:	430a      	orrs	r2, r1
 80184a8:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80184aa:	687b      	ldr	r3, [r7, #4]
 80184ac:	681b      	ldr	r3, [r3, #0]
 80184ae:	689a      	ldr	r2, [r3, #8]
 80184b0:	687b      	ldr	r3, [r7, #4]
 80184b2:	681b      	ldr	r3, [r3, #0]
 80184b4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80184b8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80184ba:	687b      	ldr	r3, [r7, #4]
 80184bc:	681b      	ldr	r3, [r3, #0]
 80184be:	6899      	ldr	r1, [r3, #8]
 80184c0:	687b      	ldr	r3, [r7, #4]
 80184c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80184c4:	687b      	ldr	r3, [r7, #4]
 80184c6:	681b      	ldr	r3, [r3, #0]
 80184c8:	430a      	orrs	r2, r1
 80184ca:	609a      	str	r2, [r3, #8]
 80184cc:	e00f      	b.n	80184ee <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80184ce:	687b      	ldr	r3, [r7, #4]
 80184d0:	681b      	ldr	r3, [r3, #0]
 80184d2:	689a      	ldr	r2, [r3, #8]
 80184d4:	687b      	ldr	r3, [r7, #4]
 80184d6:	681b      	ldr	r3, [r3, #0]
 80184d8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80184dc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80184de:	687b      	ldr	r3, [r7, #4]
 80184e0:	681b      	ldr	r3, [r3, #0]
 80184e2:	689a      	ldr	r2, [r3, #8]
 80184e4:	687b      	ldr	r3, [r7, #4]
 80184e6:	681b      	ldr	r3, [r3, #0]
 80184e8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80184ec:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80184ee:	687b      	ldr	r3, [r7, #4]
 80184f0:	681b      	ldr	r3, [r3, #0]
 80184f2:	689a      	ldr	r2, [r3, #8]
 80184f4:	687b      	ldr	r3, [r7, #4]
 80184f6:	681b      	ldr	r3, [r3, #0]
 80184f8:	f022 0202 	bic.w	r2, r2, #2
 80184fc:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80184fe:	687b      	ldr	r3, [r7, #4]
 8018500:	681b      	ldr	r3, [r3, #0]
 8018502:	6899      	ldr	r1, [r3, #8]
 8018504:	687b      	ldr	r3, [r7, #4]
 8018506:	7e1b      	ldrb	r3, [r3, #24]
 8018508:	005a      	lsls	r2, r3, #1
 801850a:	687b      	ldr	r3, [r7, #4]
 801850c:	681b      	ldr	r3, [r3, #0]
 801850e:	430a      	orrs	r2, r1
 8018510:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8018512:	687b      	ldr	r3, [r7, #4]
 8018514:	f893 3020 	ldrb.w	r3, [r3, #32]
 8018518:	2b00      	cmp	r3, #0
 801851a:	d01b      	beq.n	8018554 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 801851c:	687b      	ldr	r3, [r7, #4]
 801851e:	681b      	ldr	r3, [r3, #0]
 8018520:	685a      	ldr	r2, [r3, #4]
 8018522:	687b      	ldr	r3, [r7, #4]
 8018524:	681b      	ldr	r3, [r3, #0]
 8018526:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 801852a:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 801852c:	687b      	ldr	r3, [r7, #4]
 801852e:	681b      	ldr	r3, [r3, #0]
 8018530:	685a      	ldr	r2, [r3, #4]
 8018532:	687b      	ldr	r3, [r7, #4]
 8018534:	681b      	ldr	r3, [r3, #0]
 8018536:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 801853a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 801853c:	687b      	ldr	r3, [r7, #4]
 801853e:	681b      	ldr	r3, [r3, #0]
 8018540:	6859      	ldr	r1, [r3, #4]
 8018542:	687b      	ldr	r3, [r7, #4]
 8018544:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018546:	3b01      	subs	r3, #1
 8018548:	035a      	lsls	r2, r3, #13
 801854a:	687b      	ldr	r3, [r7, #4]
 801854c:	681b      	ldr	r3, [r3, #0]
 801854e:	430a      	orrs	r2, r1
 8018550:	605a      	str	r2, [r3, #4]
 8018552:	e007      	b.n	8018564 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8018554:	687b      	ldr	r3, [r7, #4]
 8018556:	681b      	ldr	r3, [r3, #0]
 8018558:	685a      	ldr	r2, [r3, #4]
 801855a:	687b      	ldr	r3, [r7, #4]
 801855c:	681b      	ldr	r3, [r3, #0]
 801855e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8018562:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8018564:	687b      	ldr	r3, [r7, #4]
 8018566:	681b      	ldr	r3, [r3, #0]
 8018568:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801856a:	687b      	ldr	r3, [r7, #4]
 801856c:	681b      	ldr	r3, [r3, #0]
 801856e:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8018572:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8018574:	687b      	ldr	r3, [r7, #4]
 8018576:	681b      	ldr	r3, [r3, #0]
 8018578:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 801857a:	687b      	ldr	r3, [r7, #4]
 801857c:	69db      	ldr	r3, [r3, #28]
 801857e:	3b01      	subs	r3, #1
 8018580:	051a      	lsls	r2, r3, #20
 8018582:	687b      	ldr	r3, [r7, #4]
 8018584:	681b      	ldr	r3, [r3, #0]
 8018586:	430a      	orrs	r2, r1
 8018588:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 801858a:	687b      	ldr	r3, [r7, #4]
 801858c:	681b      	ldr	r3, [r3, #0]
 801858e:	689a      	ldr	r2, [r3, #8]
 8018590:	687b      	ldr	r3, [r7, #4]
 8018592:	681b      	ldr	r3, [r3, #0]
 8018594:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8018598:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 801859a:	687b      	ldr	r3, [r7, #4]
 801859c:	681b      	ldr	r3, [r3, #0]
 801859e:	6899      	ldr	r1, [r3, #8]
 80185a0:	687b      	ldr	r3, [r7, #4]
 80185a2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80185a6:	025a      	lsls	r2, r3, #9
 80185a8:	687b      	ldr	r3, [r7, #4]
 80185aa:	681b      	ldr	r3, [r3, #0]
 80185ac:	430a      	orrs	r2, r1
 80185ae:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80185b0:	687b      	ldr	r3, [r7, #4]
 80185b2:	681b      	ldr	r3, [r3, #0]
 80185b4:	689a      	ldr	r2, [r3, #8]
 80185b6:	687b      	ldr	r3, [r7, #4]
 80185b8:	681b      	ldr	r3, [r3, #0]
 80185ba:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80185be:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80185c0:	687b      	ldr	r3, [r7, #4]
 80185c2:	681b      	ldr	r3, [r3, #0]
 80185c4:	6899      	ldr	r1, [r3, #8]
 80185c6:	687b      	ldr	r3, [r7, #4]
 80185c8:	695b      	ldr	r3, [r3, #20]
 80185ca:	029a      	lsls	r2, r3, #10
 80185cc:	687b      	ldr	r3, [r7, #4]
 80185ce:	681b      	ldr	r3, [r3, #0]
 80185d0:	430a      	orrs	r2, r1
 80185d2:	609a      	str	r2, [r3, #8]
}
 80185d4:	bf00      	nop
 80185d6:	3714      	adds	r7, #20
 80185d8:	46bd      	mov	sp, r7
 80185da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80185de:	4770      	bx	lr
 80185e0:	40012300 	.word	0x40012300
 80185e4:	0f000001 	.word	0x0f000001

080185e8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80185e8:	b480      	push	{r7}
 80185ea:	b085      	sub	sp, #20
 80185ec:	af00      	add	r7, sp, #0
 80185ee:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80185f0:	687b      	ldr	r3, [r7, #4]
 80185f2:	f003 0307 	and.w	r3, r3, #7
 80185f6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80185f8:	4b0c      	ldr	r3, [pc, #48]	; (801862c <__NVIC_SetPriorityGrouping+0x44>)
 80185fa:	68db      	ldr	r3, [r3, #12]
 80185fc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80185fe:	68ba      	ldr	r2, [r7, #8]
 8018600:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8018604:	4013      	ands	r3, r2
 8018606:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8018608:	68fb      	ldr	r3, [r7, #12]
 801860a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 801860c:	68bb      	ldr	r3, [r7, #8]
 801860e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8018610:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8018614:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8018618:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 801861a:	4a04      	ldr	r2, [pc, #16]	; (801862c <__NVIC_SetPriorityGrouping+0x44>)
 801861c:	68bb      	ldr	r3, [r7, #8]
 801861e:	60d3      	str	r3, [r2, #12]
}
 8018620:	bf00      	nop
 8018622:	3714      	adds	r7, #20
 8018624:	46bd      	mov	sp, r7
 8018626:	f85d 7b04 	ldr.w	r7, [sp], #4
 801862a:	4770      	bx	lr
 801862c:	e000ed00 	.word	0xe000ed00

08018630 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8018630:	b480      	push	{r7}
 8018632:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8018634:	4b04      	ldr	r3, [pc, #16]	; (8018648 <__NVIC_GetPriorityGrouping+0x18>)
 8018636:	68db      	ldr	r3, [r3, #12]
 8018638:	0a1b      	lsrs	r3, r3, #8
 801863a:	f003 0307 	and.w	r3, r3, #7
}
 801863e:	4618      	mov	r0, r3
 8018640:	46bd      	mov	sp, r7
 8018642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018646:	4770      	bx	lr
 8018648:	e000ed00 	.word	0xe000ed00

0801864c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 801864c:	b480      	push	{r7}
 801864e:	b083      	sub	sp, #12
 8018650:	af00      	add	r7, sp, #0
 8018652:	4603      	mov	r3, r0
 8018654:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8018656:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801865a:	2b00      	cmp	r3, #0
 801865c:	db0b      	blt.n	8018676 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 801865e:	79fb      	ldrb	r3, [r7, #7]
 8018660:	f003 021f 	and.w	r2, r3, #31
 8018664:	4907      	ldr	r1, [pc, #28]	; (8018684 <__NVIC_EnableIRQ+0x38>)
 8018666:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801866a:	095b      	lsrs	r3, r3, #5
 801866c:	2001      	movs	r0, #1
 801866e:	fa00 f202 	lsl.w	r2, r0, r2
 8018672:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8018676:	bf00      	nop
 8018678:	370c      	adds	r7, #12
 801867a:	46bd      	mov	sp, r7
 801867c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018680:	4770      	bx	lr
 8018682:	bf00      	nop
 8018684:	e000e100 	.word	0xe000e100

08018688 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8018688:	b480      	push	{r7}
 801868a:	b083      	sub	sp, #12
 801868c:	af00      	add	r7, sp, #0
 801868e:	4603      	mov	r3, r0
 8018690:	6039      	str	r1, [r7, #0]
 8018692:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8018694:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8018698:	2b00      	cmp	r3, #0
 801869a:	db0a      	blt.n	80186b2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 801869c:	683b      	ldr	r3, [r7, #0]
 801869e:	b2da      	uxtb	r2, r3
 80186a0:	490c      	ldr	r1, [pc, #48]	; (80186d4 <__NVIC_SetPriority+0x4c>)
 80186a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80186a6:	0112      	lsls	r2, r2, #4
 80186a8:	b2d2      	uxtb	r2, r2
 80186aa:	440b      	add	r3, r1
 80186ac:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80186b0:	e00a      	b.n	80186c8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80186b2:	683b      	ldr	r3, [r7, #0]
 80186b4:	b2da      	uxtb	r2, r3
 80186b6:	4908      	ldr	r1, [pc, #32]	; (80186d8 <__NVIC_SetPriority+0x50>)
 80186b8:	79fb      	ldrb	r3, [r7, #7]
 80186ba:	f003 030f 	and.w	r3, r3, #15
 80186be:	3b04      	subs	r3, #4
 80186c0:	0112      	lsls	r2, r2, #4
 80186c2:	b2d2      	uxtb	r2, r2
 80186c4:	440b      	add	r3, r1
 80186c6:	761a      	strb	r2, [r3, #24]
}
 80186c8:	bf00      	nop
 80186ca:	370c      	adds	r7, #12
 80186cc:	46bd      	mov	sp, r7
 80186ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80186d2:	4770      	bx	lr
 80186d4:	e000e100 	.word	0xe000e100
 80186d8:	e000ed00 	.word	0xe000ed00

080186dc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80186dc:	b480      	push	{r7}
 80186de:	b089      	sub	sp, #36	; 0x24
 80186e0:	af00      	add	r7, sp, #0
 80186e2:	60f8      	str	r0, [r7, #12]
 80186e4:	60b9      	str	r1, [r7, #8]
 80186e6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80186e8:	68fb      	ldr	r3, [r7, #12]
 80186ea:	f003 0307 	and.w	r3, r3, #7
 80186ee:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80186f0:	69fb      	ldr	r3, [r7, #28]
 80186f2:	f1c3 0307 	rsb	r3, r3, #7
 80186f6:	2b04      	cmp	r3, #4
 80186f8:	bf28      	it	cs
 80186fa:	2304      	movcs	r3, #4
 80186fc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80186fe:	69fb      	ldr	r3, [r7, #28]
 8018700:	3304      	adds	r3, #4
 8018702:	2b06      	cmp	r3, #6
 8018704:	d902      	bls.n	801870c <NVIC_EncodePriority+0x30>
 8018706:	69fb      	ldr	r3, [r7, #28]
 8018708:	3b03      	subs	r3, #3
 801870a:	e000      	b.n	801870e <NVIC_EncodePriority+0x32>
 801870c:	2300      	movs	r3, #0
 801870e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8018710:	f04f 32ff 	mov.w	r2, #4294967295
 8018714:	69bb      	ldr	r3, [r7, #24]
 8018716:	fa02 f303 	lsl.w	r3, r2, r3
 801871a:	43da      	mvns	r2, r3
 801871c:	68bb      	ldr	r3, [r7, #8]
 801871e:	401a      	ands	r2, r3
 8018720:	697b      	ldr	r3, [r7, #20]
 8018722:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8018724:	f04f 31ff 	mov.w	r1, #4294967295
 8018728:	697b      	ldr	r3, [r7, #20]
 801872a:	fa01 f303 	lsl.w	r3, r1, r3
 801872e:	43d9      	mvns	r1, r3
 8018730:	687b      	ldr	r3, [r7, #4]
 8018732:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8018734:	4313      	orrs	r3, r2
         );
}
 8018736:	4618      	mov	r0, r3
 8018738:	3724      	adds	r7, #36	; 0x24
 801873a:	46bd      	mov	sp, r7
 801873c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018740:	4770      	bx	lr
	...

08018744 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8018744:	b580      	push	{r7, lr}
 8018746:	b082      	sub	sp, #8
 8018748:	af00      	add	r7, sp, #0
 801874a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 801874c:	687b      	ldr	r3, [r7, #4]
 801874e:	3b01      	subs	r3, #1
 8018750:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8018754:	d301      	bcc.n	801875a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8018756:	2301      	movs	r3, #1
 8018758:	e00f      	b.n	801877a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 801875a:	4a0a      	ldr	r2, [pc, #40]	; (8018784 <SysTick_Config+0x40>)
 801875c:	687b      	ldr	r3, [r7, #4]
 801875e:	3b01      	subs	r3, #1
 8018760:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8018762:	210f      	movs	r1, #15
 8018764:	f04f 30ff 	mov.w	r0, #4294967295
 8018768:	f7ff ff8e 	bl	8018688 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 801876c:	4b05      	ldr	r3, [pc, #20]	; (8018784 <SysTick_Config+0x40>)
 801876e:	2200      	movs	r2, #0
 8018770:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8018772:	4b04      	ldr	r3, [pc, #16]	; (8018784 <SysTick_Config+0x40>)
 8018774:	2207      	movs	r2, #7
 8018776:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8018778:	2300      	movs	r3, #0
}
 801877a:	4618      	mov	r0, r3
 801877c:	3708      	adds	r7, #8
 801877e:	46bd      	mov	sp, r7
 8018780:	bd80      	pop	{r7, pc}
 8018782:	bf00      	nop
 8018784:	e000e010 	.word	0xe000e010

08018788 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8018788:	b580      	push	{r7, lr}
 801878a:	b082      	sub	sp, #8
 801878c:	af00      	add	r7, sp, #0
 801878e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8018790:	6878      	ldr	r0, [r7, #4]
 8018792:	f7ff ff29 	bl	80185e8 <__NVIC_SetPriorityGrouping>
}
 8018796:	bf00      	nop
 8018798:	3708      	adds	r7, #8
 801879a:	46bd      	mov	sp, r7
 801879c:	bd80      	pop	{r7, pc}

0801879e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 801879e:	b580      	push	{r7, lr}
 80187a0:	b086      	sub	sp, #24
 80187a2:	af00      	add	r7, sp, #0
 80187a4:	4603      	mov	r3, r0
 80187a6:	60b9      	str	r1, [r7, #8]
 80187a8:	607a      	str	r2, [r7, #4]
 80187aa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80187ac:	2300      	movs	r3, #0
 80187ae:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80187b0:	f7ff ff3e 	bl	8018630 <__NVIC_GetPriorityGrouping>
 80187b4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80187b6:	687a      	ldr	r2, [r7, #4]
 80187b8:	68b9      	ldr	r1, [r7, #8]
 80187ba:	6978      	ldr	r0, [r7, #20]
 80187bc:	f7ff ff8e 	bl	80186dc <NVIC_EncodePriority>
 80187c0:	4602      	mov	r2, r0
 80187c2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80187c6:	4611      	mov	r1, r2
 80187c8:	4618      	mov	r0, r3
 80187ca:	f7ff ff5d 	bl	8018688 <__NVIC_SetPriority>
}
 80187ce:	bf00      	nop
 80187d0:	3718      	adds	r7, #24
 80187d2:	46bd      	mov	sp, r7
 80187d4:	bd80      	pop	{r7, pc}

080187d6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80187d6:	b580      	push	{r7, lr}
 80187d8:	b082      	sub	sp, #8
 80187da:	af00      	add	r7, sp, #0
 80187dc:	4603      	mov	r3, r0
 80187de:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80187e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80187e4:	4618      	mov	r0, r3
 80187e6:	f7ff ff31 	bl	801864c <__NVIC_EnableIRQ>
}
 80187ea:	bf00      	nop
 80187ec:	3708      	adds	r7, #8
 80187ee:	46bd      	mov	sp, r7
 80187f0:	bd80      	pop	{r7, pc}

080187f2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80187f2:	b580      	push	{r7, lr}
 80187f4:	b082      	sub	sp, #8
 80187f6:	af00      	add	r7, sp, #0
 80187f8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80187fa:	6878      	ldr	r0, [r7, #4]
 80187fc:	f7ff ffa2 	bl	8018744 <SysTick_Config>
 8018800:	4603      	mov	r3, r0
}
 8018802:	4618      	mov	r0, r3
 8018804:	3708      	adds	r7, #8
 8018806:	46bd      	mov	sp, r7
 8018808:	bd80      	pop	{r7, pc}

0801880a <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 801880a:	b580      	push	{r7, lr}
 801880c:	b082      	sub	sp, #8
 801880e:	af00      	add	r7, sp, #0
 8018810:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 8018812:	687b      	ldr	r3, [r7, #4]
 8018814:	2b00      	cmp	r3, #0
 8018816:	d101      	bne.n	801881c <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8018818:	2301      	movs	r3, #1
 801881a:	e014      	b.n	8018846 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 801881c:	687b      	ldr	r3, [r7, #4]
 801881e:	791b      	ldrb	r3, [r3, #4]
 8018820:	b2db      	uxtb	r3, r3
 8018822:	2b00      	cmp	r3, #0
 8018824:	d105      	bne.n	8018832 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8018826:	687b      	ldr	r3, [r7, #4]
 8018828:	2200      	movs	r2, #0
 801882a:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 801882c:	6878      	ldr	r0, [r7, #4]
 801882e:	f7fe ff2d 	bl	801768c <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8018832:	687b      	ldr	r3, [r7, #4]
 8018834:	2202      	movs	r2, #2
 8018836:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8018838:	687b      	ldr	r3, [r7, #4]
 801883a:	2200      	movs	r2, #0
 801883c:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 801883e:	687b      	ldr	r3, [r7, #4]
 8018840:	2201      	movs	r2, #1
 8018842:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8018844:	2300      	movs	r3, #0
}
 8018846:	4618      	mov	r0, r3
 8018848:	3708      	adds	r7, #8
 801884a:	46bd      	mov	sp, r7
 801884c:	bd80      	pop	{r7, pc}

0801884e <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 801884e:	b480      	push	{r7}
 8018850:	b087      	sub	sp, #28
 8018852:	af00      	add	r7, sp, #0
 8018854:	60f8      	str	r0, [r7, #12]
 8018856:	60b9      	str	r1, [r7, #8]
 8018858:	607a      	str	r2, [r7, #4]
 801885a:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0UL;
 801885c:	2300      	movs	r3, #0
 801885e:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));

  tmp = (uint32_t)hdac->Instance;
 8018860:	68fb      	ldr	r3, [r7, #12]
 8018862:	681b      	ldr	r3, [r3, #0]
 8018864:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 8018866:	68bb      	ldr	r3, [r7, #8]
 8018868:	2b00      	cmp	r3, #0
 801886a:	d105      	bne.n	8018878 <HAL_DAC_SetValue+0x2a>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 801886c:	697a      	ldr	r2, [r7, #20]
 801886e:	687b      	ldr	r3, [r7, #4]
 8018870:	4413      	add	r3, r2
 8018872:	3308      	adds	r3, #8
 8018874:	617b      	str	r3, [r7, #20]
 8018876:	e004      	b.n	8018882 <HAL_DAC_SetValue+0x34>
  }
#if defined(DAC_CHANNEL2_SUPPORT)
  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 8018878:	697a      	ldr	r2, [r7, #20]
 801887a:	687b      	ldr	r3, [r7, #4]
 801887c:	4413      	add	r3, r2
 801887e:	3314      	adds	r3, #20
 8018880:	617b      	str	r3, [r7, #20]
  }
#endif /* DAC_CHANNEL2_SUPPORT */

  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 8018882:	697b      	ldr	r3, [r7, #20]
 8018884:	461a      	mov	r2, r3
 8018886:	683b      	ldr	r3, [r7, #0]
 8018888:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 801888a:	2300      	movs	r3, #0
}
 801888c:	4618      	mov	r0, r3
 801888e:	371c      	adds	r7, #28
 8018890:	46bd      	mov	sp, r7
 8018892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018896:	4770      	bx	lr

08018898 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8018898:	b480      	push	{r7}
 801889a:	b087      	sub	sp, #28
 801889c:	af00      	add	r7, sp, #0
 801889e:	60f8      	str	r0, [r7, #12]
 80188a0:	60b9      	str	r1, [r7, #8]
 80188a2:	607a      	str	r2, [r7, #4]
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 80188a4:	68fb      	ldr	r3, [r7, #12]
 80188a6:	795b      	ldrb	r3, [r3, #5]
 80188a8:	2b01      	cmp	r3, #1
 80188aa:	d101      	bne.n	80188b0 <HAL_DAC_ConfigChannel+0x18>
 80188ac:	2302      	movs	r3, #2
 80188ae:	e03c      	b.n	801892a <HAL_DAC_ConfigChannel+0x92>
 80188b0:	68fb      	ldr	r3, [r7, #12]
 80188b2:	2201      	movs	r2, #1
 80188b4:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80188b6:	68fb      	ldr	r3, [r7, #12]
 80188b8:	2202      	movs	r2, #2
 80188ba:	711a      	strb	r2, [r3, #4]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 80188bc:	68fb      	ldr	r3, [r7, #12]
 80188be:	681b      	ldr	r3, [r3, #0]
 80188c0:	681b      	ldr	r3, [r3, #0]
 80188c2:	617b      	str	r3, [r7, #20]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << (Channel & 0x10UL));
 80188c4:	687b      	ldr	r3, [r7, #4]
 80188c6:	f003 0310 	and.w	r3, r3, #16
 80188ca:	f640 72fe 	movw	r2, #4094	; 0xffe
 80188ce:	fa02 f303 	lsl.w	r3, r2, r3
 80188d2:	43db      	mvns	r3, r3
 80188d4:	697a      	ldr	r2, [r7, #20]
 80188d6:	4013      	ands	r3, r2
 80188d8:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 80188da:	68bb      	ldr	r3, [r7, #8]
 80188dc:	681a      	ldr	r2, [r3, #0]
 80188de:	68bb      	ldr	r3, [r7, #8]
 80188e0:	685b      	ldr	r3, [r3, #4]
 80188e2:	4313      	orrs	r3, r2
 80188e4:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80188e6:	687b      	ldr	r3, [r7, #4]
 80188e8:	f003 0310 	and.w	r3, r3, #16
 80188ec:	693a      	ldr	r2, [r7, #16]
 80188ee:	fa02 f303 	lsl.w	r3, r2, r3
 80188f2:	697a      	ldr	r2, [r7, #20]
 80188f4:	4313      	orrs	r3, r2
 80188f6:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 80188f8:	68fb      	ldr	r3, [r7, #12]
 80188fa:	681b      	ldr	r3, [r3, #0]
 80188fc:	697a      	ldr	r2, [r7, #20]
 80188fe:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8018900:	68fb      	ldr	r3, [r7, #12]
 8018902:	681b      	ldr	r3, [r3, #0]
 8018904:	6819      	ldr	r1, [r3, #0]
 8018906:	687b      	ldr	r3, [r7, #4]
 8018908:	f003 0310 	and.w	r3, r3, #16
 801890c:	22c0      	movs	r2, #192	; 0xc0
 801890e:	fa02 f303 	lsl.w	r3, r2, r3
 8018912:	43da      	mvns	r2, r3
 8018914:	68fb      	ldr	r3, [r7, #12]
 8018916:	681b      	ldr	r3, [r3, #0]
 8018918:	400a      	ands	r2, r1
 801891a:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 801891c:	68fb      	ldr	r3, [r7, #12]
 801891e:	2201      	movs	r2, #1
 8018920:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8018922:	68fb      	ldr	r3, [r7, #12]
 8018924:	2200      	movs	r2, #0
 8018926:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8018928:	2300      	movs	r3, #0
}
 801892a:	4618      	mov	r0, r3
 801892c:	371c      	adds	r7, #28
 801892e:	46bd      	mov	sp, r7
 8018930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018934:	4770      	bx	lr
	...

08018938 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8018938:	b580      	push	{r7, lr}
 801893a:	b086      	sub	sp, #24
 801893c:	af00      	add	r7, sp, #0
 801893e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8018940:	2300      	movs	r3, #0
 8018942:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8018944:	f7ff fbae 	bl	80180a4 <HAL_GetTick>
 8018948:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 801894a:	687b      	ldr	r3, [r7, #4]
 801894c:	2b00      	cmp	r3, #0
 801894e:	d101      	bne.n	8018954 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8018950:	2301      	movs	r3, #1
 8018952:	e099      	b.n	8018a88 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8018954:	687b      	ldr	r3, [r7, #4]
 8018956:	2202      	movs	r2, #2
 8018958:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 801895c:	687b      	ldr	r3, [r7, #4]
 801895e:	2200      	movs	r2, #0
 8018960:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8018964:	687b      	ldr	r3, [r7, #4]
 8018966:	681b      	ldr	r3, [r3, #0]
 8018968:	681a      	ldr	r2, [r3, #0]
 801896a:	687b      	ldr	r3, [r7, #4]
 801896c:	681b      	ldr	r3, [r3, #0]
 801896e:	f022 0201 	bic.w	r2, r2, #1
 8018972:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8018974:	e00f      	b.n	8018996 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8018976:	f7ff fb95 	bl	80180a4 <HAL_GetTick>
 801897a:	4602      	mov	r2, r0
 801897c:	693b      	ldr	r3, [r7, #16]
 801897e:	1ad3      	subs	r3, r2, r3
 8018980:	2b05      	cmp	r3, #5
 8018982:	d908      	bls.n	8018996 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8018984:	687b      	ldr	r3, [r7, #4]
 8018986:	2220      	movs	r2, #32
 8018988:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 801898a:	687b      	ldr	r3, [r7, #4]
 801898c:	2203      	movs	r2, #3
 801898e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8018992:	2303      	movs	r3, #3
 8018994:	e078      	b.n	8018a88 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8018996:	687b      	ldr	r3, [r7, #4]
 8018998:	681b      	ldr	r3, [r3, #0]
 801899a:	681b      	ldr	r3, [r3, #0]
 801899c:	f003 0301 	and.w	r3, r3, #1
 80189a0:	2b00      	cmp	r3, #0
 80189a2:	d1e8      	bne.n	8018976 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80189a4:	687b      	ldr	r3, [r7, #4]
 80189a6:	681b      	ldr	r3, [r3, #0]
 80189a8:	681b      	ldr	r3, [r3, #0]
 80189aa:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80189ac:	697a      	ldr	r2, [r7, #20]
 80189ae:	4b38      	ldr	r3, [pc, #224]	; (8018a90 <HAL_DMA_Init+0x158>)
 80189b0:	4013      	ands	r3, r2
 80189b2:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80189b4:	687b      	ldr	r3, [r7, #4]
 80189b6:	685a      	ldr	r2, [r3, #4]
 80189b8:	687b      	ldr	r3, [r7, #4]
 80189ba:	689b      	ldr	r3, [r3, #8]
 80189bc:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80189be:	687b      	ldr	r3, [r7, #4]
 80189c0:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80189c2:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80189c4:	687b      	ldr	r3, [r7, #4]
 80189c6:	691b      	ldr	r3, [r3, #16]
 80189c8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80189ca:	687b      	ldr	r3, [r7, #4]
 80189cc:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80189ce:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80189d0:	687b      	ldr	r3, [r7, #4]
 80189d2:	699b      	ldr	r3, [r3, #24]
 80189d4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80189d6:	687b      	ldr	r3, [r7, #4]
 80189d8:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80189da:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80189dc:	687b      	ldr	r3, [r7, #4]
 80189de:	6a1b      	ldr	r3, [r3, #32]
 80189e0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80189e2:	697a      	ldr	r2, [r7, #20]
 80189e4:	4313      	orrs	r3, r2
 80189e6:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80189e8:	687b      	ldr	r3, [r7, #4]
 80189ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80189ec:	2b04      	cmp	r3, #4
 80189ee:	d107      	bne.n	8018a00 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80189f0:	687b      	ldr	r3, [r7, #4]
 80189f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80189f4:	687b      	ldr	r3, [r7, #4]
 80189f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80189f8:	4313      	orrs	r3, r2
 80189fa:	697a      	ldr	r2, [r7, #20]
 80189fc:	4313      	orrs	r3, r2
 80189fe:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8018a00:	687b      	ldr	r3, [r7, #4]
 8018a02:	681b      	ldr	r3, [r3, #0]
 8018a04:	697a      	ldr	r2, [r7, #20]
 8018a06:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8018a08:	687b      	ldr	r3, [r7, #4]
 8018a0a:	681b      	ldr	r3, [r3, #0]
 8018a0c:	695b      	ldr	r3, [r3, #20]
 8018a0e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8018a10:	697b      	ldr	r3, [r7, #20]
 8018a12:	f023 0307 	bic.w	r3, r3, #7
 8018a16:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8018a18:	687b      	ldr	r3, [r7, #4]
 8018a1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018a1c:	697a      	ldr	r2, [r7, #20]
 8018a1e:	4313      	orrs	r3, r2
 8018a20:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8018a22:	687b      	ldr	r3, [r7, #4]
 8018a24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018a26:	2b04      	cmp	r3, #4
 8018a28:	d117      	bne.n	8018a5a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8018a2a:	687b      	ldr	r3, [r7, #4]
 8018a2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8018a2e:	697a      	ldr	r2, [r7, #20]
 8018a30:	4313      	orrs	r3, r2
 8018a32:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8018a34:	687b      	ldr	r3, [r7, #4]
 8018a36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018a38:	2b00      	cmp	r3, #0
 8018a3a:	d00e      	beq.n	8018a5a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8018a3c:	6878      	ldr	r0, [r7, #4]
 8018a3e:	f000 fa0b 	bl	8018e58 <DMA_CheckFifoParam>
 8018a42:	4603      	mov	r3, r0
 8018a44:	2b00      	cmp	r3, #0
 8018a46:	d008      	beq.n	8018a5a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8018a48:	687b      	ldr	r3, [r7, #4]
 8018a4a:	2240      	movs	r2, #64	; 0x40
 8018a4c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8018a4e:	687b      	ldr	r3, [r7, #4]
 8018a50:	2201      	movs	r2, #1
 8018a52:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8018a56:	2301      	movs	r3, #1
 8018a58:	e016      	b.n	8018a88 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8018a5a:	687b      	ldr	r3, [r7, #4]
 8018a5c:	681b      	ldr	r3, [r3, #0]
 8018a5e:	697a      	ldr	r2, [r7, #20]
 8018a60:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8018a62:	6878      	ldr	r0, [r7, #4]
 8018a64:	f000 f9c2 	bl	8018dec <DMA_CalcBaseAndBitshift>
 8018a68:	4603      	mov	r3, r0
 8018a6a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8018a6c:	687b      	ldr	r3, [r7, #4]
 8018a6e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8018a70:	223f      	movs	r2, #63	; 0x3f
 8018a72:	409a      	lsls	r2, r3
 8018a74:	68fb      	ldr	r3, [r7, #12]
 8018a76:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8018a78:	687b      	ldr	r3, [r7, #4]
 8018a7a:	2200      	movs	r2, #0
 8018a7c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8018a7e:	687b      	ldr	r3, [r7, #4]
 8018a80:	2201      	movs	r2, #1
 8018a82:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8018a86:	2300      	movs	r3, #0
}
 8018a88:	4618      	mov	r0, r3
 8018a8a:	3718      	adds	r7, #24
 8018a8c:	46bd      	mov	sp, r7
 8018a8e:	bd80      	pop	{r7, pc}
 8018a90:	f010803f 	.word	0xf010803f

08018a94 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8018a94:	b480      	push	{r7}
 8018a96:	b083      	sub	sp, #12
 8018a98:	af00      	add	r7, sp, #0
 8018a9a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8018a9c:	687b      	ldr	r3, [r7, #4]
 8018a9e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8018aa2:	b2db      	uxtb	r3, r3
 8018aa4:	2b02      	cmp	r3, #2
 8018aa6:	d004      	beq.n	8018ab2 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8018aa8:	687b      	ldr	r3, [r7, #4]
 8018aaa:	2280      	movs	r2, #128	; 0x80
 8018aac:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8018aae:	2301      	movs	r3, #1
 8018ab0:	e00c      	b.n	8018acc <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8018ab2:	687b      	ldr	r3, [r7, #4]
 8018ab4:	2205      	movs	r2, #5
 8018ab6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8018aba:	687b      	ldr	r3, [r7, #4]
 8018abc:	681b      	ldr	r3, [r3, #0]
 8018abe:	681a      	ldr	r2, [r3, #0]
 8018ac0:	687b      	ldr	r3, [r7, #4]
 8018ac2:	681b      	ldr	r3, [r3, #0]
 8018ac4:	f022 0201 	bic.w	r2, r2, #1
 8018ac8:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8018aca:	2300      	movs	r3, #0
}
 8018acc:	4618      	mov	r0, r3
 8018ace:	370c      	adds	r7, #12
 8018ad0:	46bd      	mov	sp, r7
 8018ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018ad6:	4770      	bx	lr

08018ad8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8018ad8:	b580      	push	{r7, lr}
 8018ada:	b086      	sub	sp, #24
 8018adc:	af00      	add	r7, sp, #0
 8018ade:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8018ae0:	2300      	movs	r3, #0
 8018ae2:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8018ae4:	4b92      	ldr	r3, [pc, #584]	; (8018d30 <HAL_DMA_IRQHandler+0x258>)
 8018ae6:	681b      	ldr	r3, [r3, #0]
 8018ae8:	4a92      	ldr	r2, [pc, #584]	; (8018d34 <HAL_DMA_IRQHandler+0x25c>)
 8018aea:	fba2 2303 	umull	r2, r3, r2, r3
 8018aee:	0a9b      	lsrs	r3, r3, #10
 8018af0:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8018af2:	687b      	ldr	r3, [r7, #4]
 8018af4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8018af6:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8018af8:	693b      	ldr	r3, [r7, #16]
 8018afa:	681b      	ldr	r3, [r3, #0]
 8018afc:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8018afe:	687b      	ldr	r3, [r7, #4]
 8018b00:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8018b02:	2208      	movs	r2, #8
 8018b04:	409a      	lsls	r2, r3
 8018b06:	68fb      	ldr	r3, [r7, #12]
 8018b08:	4013      	ands	r3, r2
 8018b0a:	2b00      	cmp	r3, #0
 8018b0c:	d01a      	beq.n	8018b44 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8018b0e:	687b      	ldr	r3, [r7, #4]
 8018b10:	681b      	ldr	r3, [r3, #0]
 8018b12:	681b      	ldr	r3, [r3, #0]
 8018b14:	f003 0304 	and.w	r3, r3, #4
 8018b18:	2b00      	cmp	r3, #0
 8018b1a:	d013      	beq.n	8018b44 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8018b1c:	687b      	ldr	r3, [r7, #4]
 8018b1e:	681b      	ldr	r3, [r3, #0]
 8018b20:	681a      	ldr	r2, [r3, #0]
 8018b22:	687b      	ldr	r3, [r7, #4]
 8018b24:	681b      	ldr	r3, [r3, #0]
 8018b26:	f022 0204 	bic.w	r2, r2, #4
 8018b2a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8018b2c:	687b      	ldr	r3, [r7, #4]
 8018b2e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8018b30:	2208      	movs	r2, #8
 8018b32:	409a      	lsls	r2, r3
 8018b34:	693b      	ldr	r3, [r7, #16]
 8018b36:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8018b38:	687b      	ldr	r3, [r7, #4]
 8018b3a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8018b3c:	f043 0201 	orr.w	r2, r3, #1
 8018b40:	687b      	ldr	r3, [r7, #4]
 8018b42:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8018b44:	687b      	ldr	r3, [r7, #4]
 8018b46:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8018b48:	2201      	movs	r2, #1
 8018b4a:	409a      	lsls	r2, r3
 8018b4c:	68fb      	ldr	r3, [r7, #12]
 8018b4e:	4013      	ands	r3, r2
 8018b50:	2b00      	cmp	r3, #0
 8018b52:	d012      	beq.n	8018b7a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8018b54:	687b      	ldr	r3, [r7, #4]
 8018b56:	681b      	ldr	r3, [r3, #0]
 8018b58:	695b      	ldr	r3, [r3, #20]
 8018b5a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8018b5e:	2b00      	cmp	r3, #0
 8018b60:	d00b      	beq.n	8018b7a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8018b62:	687b      	ldr	r3, [r7, #4]
 8018b64:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8018b66:	2201      	movs	r2, #1
 8018b68:	409a      	lsls	r2, r3
 8018b6a:	693b      	ldr	r3, [r7, #16]
 8018b6c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8018b6e:	687b      	ldr	r3, [r7, #4]
 8018b70:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8018b72:	f043 0202 	orr.w	r2, r3, #2
 8018b76:	687b      	ldr	r3, [r7, #4]
 8018b78:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8018b7a:	687b      	ldr	r3, [r7, #4]
 8018b7c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8018b7e:	2204      	movs	r2, #4
 8018b80:	409a      	lsls	r2, r3
 8018b82:	68fb      	ldr	r3, [r7, #12]
 8018b84:	4013      	ands	r3, r2
 8018b86:	2b00      	cmp	r3, #0
 8018b88:	d012      	beq.n	8018bb0 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8018b8a:	687b      	ldr	r3, [r7, #4]
 8018b8c:	681b      	ldr	r3, [r3, #0]
 8018b8e:	681b      	ldr	r3, [r3, #0]
 8018b90:	f003 0302 	and.w	r3, r3, #2
 8018b94:	2b00      	cmp	r3, #0
 8018b96:	d00b      	beq.n	8018bb0 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8018b98:	687b      	ldr	r3, [r7, #4]
 8018b9a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8018b9c:	2204      	movs	r2, #4
 8018b9e:	409a      	lsls	r2, r3
 8018ba0:	693b      	ldr	r3, [r7, #16]
 8018ba2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8018ba4:	687b      	ldr	r3, [r7, #4]
 8018ba6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8018ba8:	f043 0204 	orr.w	r2, r3, #4
 8018bac:	687b      	ldr	r3, [r7, #4]
 8018bae:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8018bb0:	687b      	ldr	r3, [r7, #4]
 8018bb2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8018bb4:	2210      	movs	r2, #16
 8018bb6:	409a      	lsls	r2, r3
 8018bb8:	68fb      	ldr	r3, [r7, #12]
 8018bba:	4013      	ands	r3, r2
 8018bbc:	2b00      	cmp	r3, #0
 8018bbe:	d043      	beq.n	8018c48 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8018bc0:	687b      	ldr	r3, [r7, #4]
 8018bc2:	681b      	ldr	r3, [r3, #0]
 8018bc4:	681b      	ldr	r3, [r3, #0]
 8018bc6:	f003 0308 	and.w	r3, r3, #8
 8018bca:	2b00      	cmp	r3, #0
 8018bcc:	d03c      	beq.n	8018c48 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8018bce:	687b      	ldr	r3, [r7, #4]
 8018bd0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8018bd2:	2210      	movs	r2, #16
 8018bd4:	409a      	lsls	r2, r3
 8018bd6:	693b      	ldr	r3, [r7, #16]
 8018bd8:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8018bda:	687b      	ldr	r3, [r7, #4]
 8018bdc:	681b      	ldr	r3, [r3, #0]
 8018bde:	681b      	ldr	r3, [r3, #0]
 8018be0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8018be4:	2b00      	cmp	r3, #0
 8018be6:	d018      	beq.n	8018c1a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8018be8:	687b      	ldr	r3, [r7, #4]
 8018bea:	681b      	ldr	r3, [r3, #0]
 8018bec:	681b      	ldr	r3, [r3, #0]
 8018bee:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8018bf2:	2b00      	cmp	r3, #0
 8018bf4:	d108      	bne.n	8018c08 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8018bf6:	687b      	ldr	r3, [r7, #4]
 8018bf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8018bfa:	2b00      	cmp	r3, #0
 8018bfc:	d024      	beq.n	8018c48 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8018bfe:	687b      	ldr	r3, [r7, #4]
 8018c00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8018c02:	6878      	ldr	r0, [r7, #4]
 8018c04:	4798      	blx	r3
 8018c06:	e01f      	b.n	8018c48 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8018c08:	687b      	ldr	r3, [r7, #4]
 8018c0a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8018c0c:	2b00      	cmp	r3, #0
 8018c0e:	d01b      	beq.n	8018c48 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8018c10:	687b      	ldr	r3, [r7, #4]
 8018c12:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8018c14:	6878      	ldr	r0, [r7, #4]
 8018c16:	4798      	blx	r3
 8018c18:	e016      	b.n	8018c48 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8018c1a:	687b      	ldr	r3, [r7, #4]
 8018c1c:	681b      	ldr	r3, [r3, #0]
 8018c1e:	681b      	ldr	r3, [r3, #0]
 8018c20:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8018c24:	2b00      	cmp	r3, #0
 8018c26:	d107      	bne.n	8018c38 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8018c28:	687b      	ldr	r3, [r7, #4]
 8018c2a:	681b      	ldr	r3, [r3, #0]
 8018c2c:	681a      	ldr	r2, [r3, #0]
 8018c2e:	687b      	ldr	r3, [r7, #4]
 8018c30:	681b      	ldr	r3, [r3, #0]
 8018c32:	f022 0208 	bic.w	r2, r2, #8
 8018c36:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8018c38:	687b      	ldr	r3, [r7, #4]
 8018c3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8018c3c:	2b00      	cmp	r3, #0
 8018c3e:	d003      	beq.n	8018c48 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8018c40:	687b      	ldr	r3, [r7, #4]
 8018c42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8018c44:	6878      	ldr	r0, [r7, #4]
 8018c46:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8018c48:	687b      	ldr	r3, [r7, #4]
 8018c4a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8018c4c:	2220      	movs	r2, #32
 8018c4e:	409a      	lsls	r2, r3
 8018c50:	68fb      	ldr	r3, [r7, #12]
 8018c52:	4013      	ands	r3, r2
 8018c54:	2b00      	cmp	r3, #0
 8018c56:	f000 808e 	beq.w	8018d76 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8018c5a:	687b      	ldr	r3, [r7, #4]
 8018c5c:	681b      	ldr	r3, [r3, #0]
 8018c5e:	681b      	ldr	r3, [r3, #0]
 8018c60:	f003 0310 	and.w	r3, r3, #16
 8018c64:	2b00      	cmp	r3, #0
 8018c66:	f000 8086 	beq.w	8018d76 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8018c6a:	687b      	ldr	r3, [r7, #4]
 8018c6c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8018c6e:	2220      	movs	r2, #32
 8018c70:	409a      	lsls	r2, r3
 8018c72:	693b      	ldr	r3, [r7, #16]
 8018c74:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8018c76:	687b      	ldr	r3, [r7, #4]
 8018c78:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8018c7c:	b2db      	uxtb	r3, r3
 8018c7e:	2b05      	cmp	r3, #5
 8018c80:	d136      	bne.n	8018cf0 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8018c82:	687b      	ldr	r3, [r7, #4]
 8018c84:	681b      	ldr	r3, [r3, #0]
 8018c86:	681a      	ldr	r2, [r3, #0]
 8018c88:	687b      	ldr	r3, [r7, #4]
 8018c8a:	681b      	ldr	r3, [r3, #0]
 8018c8c:	f022 0216 	bic.w	r2, r2, #22
 8018c90:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8018c92:	687b      	ldr	r3, [r7, #4]
 8018c94:	681b      	ldr	r3, [r3, #0]
 8018c96:	695a      	ldr	r2, [r3, #20]
 8018c98:	687b      	ldr	r3, [r7, #4]
 8018c9a:	681b      	ldr	r3, [r3, #0]
 8018c9c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8018ca0:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8018ca2:	687b      	ldr	r3, [r7, #4]
 8018ca4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8018ca6:	2b00      	cmp	r3, #0
 8018ca8:	d103      	bne.n	8018cb2 <HAL_DMA_IRQHandler+0x1da>
 8018caa:	687b      	ldr	r3, [r7, #4]
 8018cac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8018cae:	2b00      	cmp	r3, #0
 8018cb0:	d007      	beq.n	8018cc2 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8018cb2:	687b      	ldr	r3, [r7, #4]
 8018cb4:	681b      	ldr	r3, [r3, #0]
 8018cb6:	681a      	ldr	r2, [r3, #0]
 8018cb8:	687b      	ldr	r3, [r7, #4]
 8018cba:	681b      	ldr	r3, [r3, #0]
 8018cbc:	f022 0208 	bic.w	r2, r2, #8
 8018cc0:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8018cc2:	687b      	ldr	r3, [r7, #4]
 8018cc4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8018cc6:	223f      	movs	r2, #63	; 0x3f
 8018cc8:	409a      	lsls	r2, r3
 8018cca:	693b      	ldr	r3, [r7, #16]
 8018ccc:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8018cce:	687b      	ldr	r3, [r7, #4]
 8018cd0:	2201      	movs	r2, #1
 8018cd2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8018cd6:	687b      	ldr	r3, [r7, #4]
 8018cd8:	2200      	movs	r2, #0
 8018cda:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8018cde:	687b      	ldr	r3, [r7, #4]
 8018ce0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8018ce2:	2b00      	cmp	r3, #0
 8018ce4:	d07d      	beq.n	8018de2 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8018ce6:	687b      	ldr	r3, [r7, #4]
 8018ce8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8018cea:	6878      	ldr	r0, [r7, #4]
 8018cec:	4798      	blx	r3
        }
        return;
 8018cee:	e078      	b.n	8018de2 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8018cf0:	687b      	ldr	r3, [r7, #4]
 8018cf2:	681b      	ldr	r3, [r3, #0]
 8018cf4:	681b      	ldr	r3, [r3, #0]
 8018cf6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8018cfa:	2b00      	cmp	r3, #0
 8018cfc:	d01c      	beq.n	8018d38 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8018cfe:	687b      	ldr	r3, [r7, #4]
 8018d00:	681b      	ldr	r3, [r3, #0]
 8018d02:	681b      	ldr	r3, [r3, #0]
 8018d04:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8018d08:	2b00      	cmp	r3, #0
 8018d0a:	d108      	bne.n	8018d1e <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8018d0c:	687b      	ldr	r3, [r7, #4]
 8018d0e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8018d10:	2b00      	cmp	r3, #0
 8018d12:	d030      	beq.n	8018d76 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8018d14:	687b      	ldr	r3, [r7, #4]
 8018d16:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8018d18:	6878      	ldr	r0, [r7, #4]
 8018d1a:	4798      	blx	r3
 8018d1c:	e02b      	b.n	8018d76 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8018d1e:	687b      	ldr	r3, [r7, #4]
 8018d20:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8018d22:	2b00      	cmp	r3, #0
 8018d24:	d027      	beq.n	8018d76 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8018d26:	687b      	ldr	r3, [r7, #4]
 8018d28:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8018d2a:	6878      	ldr	r0, [r7, #4]
 8018d2c:	4798      	blx	r3
 8018d2e:	e022      	b.n	8018d76 <HAL_DMA_IRQHandler+0x29e>
 8018d30:	20000564 	.word	0x20000564
 8018d34:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8018d38:	687b      	ldr	r3, [r7, #4]
 8018d3a:	681b      	ldr	r3, [r3, #0]
 8018d3c:	681b      	ldr	r3, [r3, #0]
 8018d3e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8018d42:	2b00      	cmp	r3, #0
 8018d44:	d10f      	bne.n	8018d66 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8018d46:	687b      	ldr	r3, [r7, #4]
 8018d48:	681b      	ldr	r3, [r3, #0]
 8018d4a:	681a      	ldr	r2, [r3, #0]
 8018d4c:	687b      	ldr	r3, [r7, #4]
 8018d4e:	681b      	ldr	r3, [r3, #0]
 8018d50:	f022 0210 	bic.w	r2, r2, #16
 8018d54:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8018d56:	687b      	ldr	r3, [r7, #4]
 8018d58:	2201      	movs	r2, #1
 8018d5a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8018d5e:	687b      	ldr	r3, [r7, #4]
 8018d60:	2200      	movs	r2, #0
 8018d62:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8018d66:	687b      	ldr	r3, [r7, #4]
 8018d68:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8018d6a:	2b00      	cmp	r3, #0
 8018d6c:	d003      	beq.n	8018d76 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8018d6e:	687b      	ldr	r3, [r7, #4]
 8018d70:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8018d72:	6878      	ldr	r0, [r7, #4]
 8018d74:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8018d76:	687b      	ldr	r3, [r7, #4]
 8018d78:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8018d7a:	2b00      	cmp	r3, #0
 8018d7c:	d032      	beq.n	8018de4 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8018d7e:	687b      	ldr	r3, [r7, #4]
 8018d80:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8018d82:	f003 0301 	and.w	r3, r3, #1
 8018d86:	2b00      	cmp	r3, #0
 8018d88:	d022      	beq.n	8018dd0 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8018d8a:	687b      	ldr	r3, [r7, #4]
 8018d8c:	2205      	movs	r2, #5
 8018d8e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8018d92:	687b      	ldr	r3, [r7, #4]
 8018d94:	681b      	ldr	r3, [r3, #0]
 8018d96:	681a      	ldr	r2, [r3, #0]
 8018d98:	687b      	ldr	r3, [r7, #4]
 8018d9a:	681b      	ldr	r3, [r3, #0]
 8018d9c:	f022 0201 	bic.w	r2, r2, #1
 8018da0:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8018da2:	68bb      	ldr	r3, [r7, #8]
 8018da4:	3301      	adds	r3, #1
 8018da6:	60bb      	str	r3, [r7, #8]
 8018da8:	697a      	ldr	r2, [r7, #20]
 8018daa:	429a      	cmp	r2, r3
 8018dac:	d307      	bcc.n	8018dbe <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8018dae:	687b      	ldr	r3, [r7, #4]
 8018db0:	681b      	ldr	r3, [r3, #0]
 8018db2:	681b      	ldr	r3, [r3, #0]
 8018db4:	f003 0301 	and.w	r3, r3, #1
 8018db8:	2b00      	cmp	r3, #0
 8018dba:	d1f2      	bne.n	8018da2 <HAL_DMA_IRQHandler+0x2ca>
 8018dbc:	e000      	b.n	8018dc0 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8018dbe:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8018dc0:	687b      	ldr	r3, [r7, #4]
 8018dc2:	2201      	movs	r2, #1
 8018dc4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8018dc8:	687b      	ldr	r3, [r7, #4]
 8018dca:	2200      	movs	r2, #0
 8018dcc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8018dd0:	687b      	ldr	r3, [r7, #4]
 8018dd2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8018dd4:	2b00      	cmp	r3, #0
 8018dd6:	d005      	beq.n	8018de4 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8018dd8:	687b      	ldr	r3, [r7, #4]
 8018dda:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8018ddc:	6878      	ldr	r0, [r7, #4]
 8018dde:	4798      	blx	r3
 8018de0:	e000      	b.n	8018de4 <HAL_DMA_IRQHandler+0x30c>
        return;
 8018de2:	bf00      	nop
    }
  }
}
 8018de4:	3718      	adds	r7, #24
 8018de6:	46bd      	mov	sp, r7
 8018de8:	bd80      	pop	{r7, pc}
 8018dea:	bf00      	nop

08018dec <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8018dec:	b480      	push	{r7}
 8018dee:	b085      	sub	sp, #20
 8018df0:	af00      	add	r7, sp, #0
 8018df2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8018df4:	687b      	ldr	r3, [r7, #4]
 8018df6:	681b      	ldr	r3, [r3, #0]
 8018df8:	b2db      	uxtb	r3, r3
 8018dfa:	3b10      	subs	r3, #16
 8018dfc:	4a14      	ldr	r2, [pc, #80]	; (8018e50 <DMA_CalcBaseAndBitshift+0x64>)
 8018dfe:	fba2 2303 	umull	r2, r3, r2, r3
 8018e02:	091b      	lsrs	r3, r3, #4
 8018e04:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8018e06:	4a13      	ldr	r2, [pc, #76]	; (8018e54 <DMA_CalcBaseAndBitshift+0x68>)
 8018e08:	68fb      	ldr	r3, [r7, #12]
 8018e0a:	4413      	add	r3, r2
 8018e0c:	781b      	ldrb	r3, [r3, #0]
 8018e0e:	461a      	mov	r2, r3
 8018e10:	687b      	ldr	r3, [r7, #4]
 8018e12:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8018e14:	68fb      	ldr	r3, [r7, #12]
 8018e16:	2b03      	cmp	r3, #3
 8018e18:	d909      	bls.n	8018e2e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8018e1a:	687b      	ldr	r3, [r7, #4]
 8018e1c:	681b      	ldr	r3, [r3, #0]
 8018e1e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8018e22:	f023 0303 	bic.w	r3, r3, #3
 8018e26:	1d1a      	adds	r2, r3, #4
 8018e28:	687b      	ldr	r3, [r7, #4]
 8018e2a:	659a      	str	r2, [r3, #88]	; 0x58
 8018e2c:	e007      	b.n	8018e3e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8018e2e:	687b      	ldr	r3, [r7, #4]
 8018e30:	681b      	ldr	r3, [r3, #0]
 8018e32:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8018e36:	f023 0303 	bic.w	r3, r3, #3
 8018e3a:	687a      	ldr	r2, [r7, #4]
 8018e3c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8018e3e:	687b      	ldr	r3, [r7, #4]
 8018e40:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8018e42:	4618      	mov	r0, r3
 8018e44:	3714      	adds	r7, #20
 8018e46:	46bd      	mov	sp, r7
 8018e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018e4c:	4770      	bx	lr
 8018e4e:	bf00      	nop
 8018e50:	aaaaaaab 	.word	0xaaaaaaab
 8018e54:	080023fc 	.word	0x080023fc

08018e58 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8018e58:	b480      	push	{r7}
 8018e5a:	b085      	sub	sp, #20
 8018e5c:	af00      	add	r7, sp, #0
 8018e5e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8018e60:	2300      	movs	r3, #0
 8018e62:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8018e64:	687b      	ldr	r3, [r7, #4]
 8018e66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8018e68:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8018e6a:	687b      	ldr	r3, [r7, #4]
 8018e6c:	699b      	ldr	r3, [r3, #24]
 8018e6e:	2b00      	cmp	r3, #0
 8018e70:	d11f      	bne.n	8018eb2 <DMA_CheckFifoParam+0x5a>
 8018e72:	68bb      	ldr	r3, [r7, #8]
 8018e74:	2b03      	cmp	r3, #3
 8018e76:	d856      	bhi.n	8018f26 <DMA_CheckFifoParam+0xce>
 8018e78:	a201      	add	r2, pc, #4	; (adr r2, 8018e80 <DMA_CheckFifoParam+0x28>)
 8018e7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8018e7e:	bf00      	nop
 8018e80:	08018e91 	.word	0x08018e91
 8018e84:	08018ea3 	.word	0x08018ea3
 8018e88:	08018e91 	.word	0x08018e91
 8018e8c:	08018f27 	.word	0x08018f27
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8018e90:	687b      	ldr	r3, [r7, #4]
 8018e92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018e94:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8018e98:	2b00      	cmp	r3, #0
 8018e9a:	d046      	beq.n	8018f2a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8018e9c:	2301      	movs	r3, #1
 8018e9e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8018ea0:	e043      	b.n	8018f2a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8018ea2:	687b      	ldr	r3, [r7, #4]
 8018ea4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018ea6:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8018eaa:	d140      	bne.n	8018f2e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8018eac:	2301      	movs	r3, #1
 8018eae:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8018eb0:	e03d      	b.n	8018f2e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8018eb2:	687b      	ldr	r3, [r7, #4]
 8018eb4:	699b      	ldr	r3, [r3, #24]
 8018eb6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8018eba:	d121      	bne.n	8018f00 <DMA_CheckFifoParam+0xa8>
 8018ebc:	68bb      	ldr	r3, [r7, #8]
 8018ebe:	2b03      	cmp	r3, #3
 8018ec0:	d837      	bhi.n	8018f32 <DMA_CheckFifoParam+0xda>
 8018ec2:	a201      	add	r2, pc, #4	; (adr r2, 8018ec8 <DMA_CheckFifoParam+0x70>)
 8018ec4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8018ec8:	08018ed9 	.word	0x08018ed9
 8018ecc:	08018edf 	.word	0x08018edf
 8018ed0:	08018ed9 	.word	0x08018ed9
 8018ed4:	08018ef1 	.word	0x08018ef1
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8018ed8:	2301      	movs	r3, #1
 8018eda:	73fb      	strb	r3, [r7, #15]
      break;
 8018edc:	e030      	b.n	8018f40 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8018ede:	687b      	ldr	r3, [r7, #4]
 8018ee0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018ee2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8018ee6:	2b00      	cmp	r3, #0
 8018ee8:	d025      	beq.n	8018f36 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8018eea:	2301      	movs	r3, #1
 8018eec:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8018eee:	e022      	b.n	8018f36 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8018ef0:	687b      	ldr	r3, [r7, #4]
 8018ef2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018ef4:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8018ef8:	d11f      	bne.n	8018f3a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8018efa:	2301      	movs	r3, #1
 8018efc:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8018efe:	e01c      	b.n	8018f3a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8018f00:	68bb      	ldr	r3, [r7, #8]
 8018f02:	2b02      	cmp	r3, #2
 8018f04:	d903      	bls.n	8018f0e <DMA_CheckFifoParam+0xb6>
 8018f06:	68bb      	ldr	r3, [r7, #8]
 8018f08:	2b03      	cmp	r3, #3
 8018f0a:	d003      	beq.n	8018f14 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8018f0c:	e018      	b.n	8018f40 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8018f0e:	2301      	movs	r3, #1
 8018f10:	73fb      	strb	r3, [r7, #15]
      break;
 8018f12:	e015      	b.n	8018f40 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8018f14:	687b      	ldr	r3, [r7, #4]
 8018f16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018f18:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8018f1c:	2b00      	cmp	r3, #0
 8018f1e:	d00e      	beq.n	8018f3e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8018f20:	2301      	movs	r3, #1
 8018f22:	73fb      	strb	r3, [r7, #15]
      break;
 8018f24:	e00b      	b.n	8018f3e <DMA_CheckFifoParam+0xe6>
      break;
 8018f26:	bf00      	nop
 8018f28:	e00a      	b.n	8018f40 <DMA_CheckFifoParam+0xe8>
      break;
 8018f2a:	bf00      	nop
 8018f2c:	e008      	b.n	8018f40 <DMA_CheckFifoParam+0xe8>
      break;
 8018f2e:	bf00      	nop
 8018f30:	e006      	b.n	8018f40 <DMA_CheckFifoParam+0xe8>
      break;
 8018f32:	bf00      	nop
 8018f34:	e004      	b.n	8018f40 <DMA_CheckFifoParam+0xe8>
      break;
 8018f36:	bf00      	nop
 8018f38:	e002      	b.n	8018f40 <DMA_CheckFifoParam+0xe8>
      break;   
 8018f3a:	bf00      	nop
 8018f3c:	e000      	b.n	8018f40 <DMA_CheckFifoParam+0xe8>
      break;
 8018f3e:	bf00      	nop
    }
  } 
  
  return status; 
 8018f40:	7bfb      	ldrb	r3, [r7, #15]
}
 8018f42:	4618      	mov	r0, r3
 8018f44:	3714      	adds	r7, #20
 8018f46:	46bd      	mov	sp, r7
 8018f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018f4c:	4770      	bx	lr
 8018f4e:	bf00      	nop

08018f50 <HAL_FLASH_Program>:
  * @param  Data specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8018f50:	b580      	push	{r7, lr}
 8018f52:	b086      	sub	sp, #24
 8018f54:	af00      	add	r7, sp, #0
 8018f56:	60f8      	str	r0, [r7, #12]
 8018f58:	60b9      	str	r1, [r7, #8]
 8018f5a:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 8018f5e:	2301      	movs	r3, #1
 8018f60:	75fb      	strb	r3, [r7, #23]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8018f62:	4b23      	ldr	r3, [pc, #140]	; (8018ff0 <HAL_FLASH_Program+0xa0>)
 8018f64:	7e1b      	ldrb	r3, [r3, #24]
 8018f66:	2b01      	cmp	r3, #1
 8018f68:	d101      	bne.n	8018f6e <HAL_FLASH_Program+0x1e>
 8018f6a:	2302      	movs	r3, #2
 8018f6c:	e03b      	b.n	8018fe6 <HAL_FLASH_Program+0x96>
 8018f6e:	4b20      	ldr	r3, [pc, #128]	; (8018ff0 <HAL_FLASH_Program+0xa0>)
 8018f70:	2201      	movs	r2, #1
 8018f72:	761a      	strb	r2, [r3, #24]
  
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8018f74:	f24c 3050 	movw	r0, #50000	; 0xc350
 8018f78:	f000 f870 	bl	801905c <FLASH_WaitForLastOperation>
 8018f7c:	4603      	mov	r3, r0
 8018f7e:	75fb      	strb	r3, [r7, #23]
  
  if(status == HAL_OK)
 8018f80:	7dfb      	ldrb	r3, [r7, #23]
 8018f82:	2b00      	cmp	r3, #0
 8018f84:	d12b      	bne.n	8018fde <HAL_FLASH_Program+0x8e>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 8018f86:	68fb      	ldr	r3, [r7, #12]
 8018f88:	2b00      	cmp	r3, #0
 8018f8a:	d105      	bne.n	8018f98 <HAL_FLASH_Program+0x48>
    {
      /*Program byte (8-bit) at a specified address.*/
      FLASH_Program_Byte(Address, (uint8_t) Data);
 8018f8c:	783b      	ldrb	r3, [r7, #0]
 8018f8e:	4619      	mov	r1, r3
 8018f90:	68b8      	ldr	r0, [r7, #8]
 8018f92:	f000 f91b 	bl	80191cc <FLASH_Program_Byte>
 8018f96:	e016      	b.n	8018fc6 <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8018f98:	68fb      	ldr	r3, [r7, #12]
 8018f9a:	2b01      	cmp	r3, #1
 8018f9c:	d105      	bne.n	8018faa <HAL_FLASH_Program+0x5a>
    {
      /*Program halfword (16-bit) at a specified address.*/
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
 8018f9e:	883b      	ldrh	r3, [r7, #0]
 8018fa0:	4619      	mov	r1, r3
 8018fa2:	68b8      	ldr	r0, [r7, #8]
 8018fa4:	f000 f8ee 	bl	8019184 <FLASH_Program_HalfWord>
 8018fa8:	e00d      	b.n	8018fc6 <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 8018faa:	68fb      	ldr	r3, [r7, #12]
 8018fac:	2b02      	cmp	r3, #2
 8018fae:	d105      	bne.n	8018fbc <HAL_FLASH_Program+0x6c>
    {
      /*Program word (32-bit) at a specified address.*/
      FLASH_Program_Word(Address, (uint32_t) Data);
 8018fb0:	683b      	ldr	r3, [r7, #0]
 8018fb2:	4619      	mov	r1, r3
 8018fb4:	68b8      	ldr	r0, [r7, #8]
 8018fb6:	f000 f8c3 	bl	8019140 <FLASH_Program_Word>
 8018fba:	e004      	b.n	8018fc6 <HAL_FLASH_Program+0x76>
    }
    else
    {
      /*Program double word (64-bit) at a specified address.*/
      FLASH_Program_DoubleWord(Address, Data);
 8018fbc:	e9d7 2300 	ldrd	r2, r3, [r7]
 8018fc0:	68b8      	ldr	r0, [r7, #8]
 8018fc2:	f000 f88b 	bl	80190dc <FLASH_Program_DoubleWord>
    }
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8018fc6:	f24c 3050 	movw	r0, #50000	; 0xc350
 8018fca:	f000 f847 	bl	801905c <FLASH_WaitForLastOperation>
 8018fce:	4603      	mov	r3, r0
 8018fd0:	75fb      	strb	r3, [r7, #23]
    
    /* If the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);  
 8018fd2:	4b08      	ldr	r3, [pc, #32]	; (8018ff4 <HAL_FLASH_Program+0xa4>)
 8018fd4:	691b      	ldr	r3, [r3, #16]
 8018fd6:	4a07      	ldr	r2, [pc, #28]	; (8018ff4 <HAL_FLASH_Program+0xa4>)
 8018fd8:	f023 0301 	bic.w	r3, r3, #1
 8018fdc:	6113      	str	r3, [r2, #16]
  }
  
  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8018fde:	4b04      	ldr	r3, [pc, #16]	; (8018ff0 <HAL_FLASH_Program+0xa0>)
 8018fe0:	2200      	movs	r2, #0
 8018fe2:	761a      	strb	r2, [r3, #24]
  
  return status;
 8018fe4:	7dfb      	ldrb	r3, [r7, #23]
}
 8018fe6:	4618      	mov	r0, r3
 8018fe8:	3718      	adds	r7, #24
 8018fea:	46bd      	mov	sp, r7
 8018fec:	bd80      	pop	{r7, pc}
 8018fee:	bf00      	nop
 8018ff0:	20007a60 	.word	0x20007a60
 8018ff4:	40023c00 	.word	0x40023c00

08018ff8 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8018ff8:	b480      	push	{r7}
 8018ffa:	b083      	sub	sp, #12
 8018ffc:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8018ffe:	2300      	movs	r3, #0
 8019000:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8019002:	4b0b      	ldr	r3, [pc, #44]	; (8019030 <HAL_FLASH_Unlock+0x38>)
 8019004:	691b      	ldr	r3, [r3, #16]
 8019006:	2b00      	cmp	r3, #0
 8019008:	da0b      	bge.n	8019022 <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 801900a:	4b09      	ldr	r3, [pc, #36]	; (8019030 <HAL_FLASH_Unlock+0x38>)
 801900c:	4a09      	ldr	r2, [pc, #36]	; (8019034 <HAL_FLASH_Unlock+0x3c>)
 801900e:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8019010:	4b07      	ldr	r3, [pc, #28]	; (8019030 <HAL_FLASH_Unlock+0x38>)
 8019012:	4a09      	ldr	r2, [pc, #36]	; (8019038 <HAL_FLASH_Unlock+0x40>)
 8019014:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8019016:	4b06      	ldr	r3, [pc, #24]	; (8019030 <HAL_FLASH_Unlock+0x38>)
 8019018:	691b      	ldr	r3, [r3, #16]
 801901a:	2b00      	cmp	r3, #0
 801901c:	da01      	bge.n	8019022 <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 801901e:	2301      	movs	r3, #1
 8019020:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 8019022:	79fb      	ldrb	r3, [r7, #7]
}
 8019024:	4618      	mov	r0, r3
 8019026:	370c      	adds	r7, #12
 8019028:	46bd      	mov	sp, r7
 801902a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801902e:	4770      	bx	lr
 8019030:	40023c00 	.word	0x40023c00
 8019034:	45670123 	.word	0x45670123
 8019038:	cdef89ab 	.word	0xcdef89ab

0801903c <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 801903c:	b480      	push	{r7}
 801903e:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 8019040:	4b05      	ldr	r3, [pc, #20]	; (8019058 <HAL_FLASH_Lock+0x1c>)
 8019042:	691b      	ldr	r3, [r3, #16]
 8019044:	4a04      	ldr	r2, [pc, #16]	; (8019058 <HAL_FLASH_Lock+0x1c>)
 8019046:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 801904a:	6113      	str	r3, [r2, #16]
  
  return HAL_OK;  
 801904c:	2300      	movs	r3, #0
}
 801904e:	4618      	mov	r0, r3
 8019050:	46bd      	mov	sp, r7
 8019052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019056:	4770      	bx	lr
 8019058:	40023c00 	.word	0x40023c00

0801905c <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{ 
 801905c:	b580      	push	{r7, lr}
 801905e:	b084      	sub	sp, #16
 8019060:	af00      	add	r7, sp, #0
 8019062:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8019064:	2300      	movs	r3, #0
 8019066:	60fb      	str	r3, [r7, #12]
  
  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8019068:	4b1a      	ldr	r3, [pc, #104]	; (80190d4 <FLASH_WaitForLastOperation+0x78>)
 801906a:	2200      	movs	r2, #0
 801906c:	61da      	str	r2, [r3, #28]
  
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 801906e:	f7ff f819 	bl	80180a4 <HAL_GetTick>
 8019072:	60f8      	str	r0, [r7, #12]

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8019074:	e010      	b.n	8019098 <FLASH_WaitForLastOperation+0x3c>
  { 
    if(Timeout != HAL_MAX_DELAY)
 8019076:	687b      	ldr	r3, [r7, #4]
 8019078:	f1b3 3fff 	cmp.w	r3, #4294967295
 801907c:	d00c      	beq.n	8019098 <FLASH_WaitForLastOperation+0x3c>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 801907e:	687b      	ldr	r3, [r7, #4]
 8019080:	2b00      	cmp	r3, #0
 8019082:	d007      	beq.n	8019094 <FLASH_WaitForLastOperation+0x38>
 8019084:	f7ff f80e 	bl	80180a4 <HAL_GetTick>
 8019088:	4602      	mov	r2, r0
 801908a:	68fb      	ldr	r3, [r7, #12]
 801908c:	1ad3      	subs	r3, r2, r3
 801908e:	687a      	ldr	r2, [r7, #4]
 8019090:	429a      	cmp	r2, r3
 8019092:	d201      	bcs.n	8019098 <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 8019094:	2303      	movs	r3, #3
 8019096:	e019      	b.n	80190cc <FLASH_WaitForLastOperation+0x70>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8019098:	4b0f      	ldr	r3, [pc, #60]	; (80190d8 <FLASH_WaitForLastOperation+0x7c>)
 801909a:	68db      	ldr	r3, [r3, #12]
 801909c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80190a0:	2b00      	cmp	r3, #0
 80190a2:	d1e8      	bne.n	8019076 <FLASH_WaitForLastOperation+0x1a>
      }
    } 
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 80190a4:	4b0c      	ldr	r3, [pc, #48]	; (80190d8 <FLASH_WaitForLastOperation+0x7c>)
 80190a6:	68db      	ldr	r3, [r3, #12]
 80190a8:	f003 0301 	and.w	r3, r3, #1
 80190ac:	2b00      	cmp	r3, #0
 80190ae:	d002      	beq.n	80190b6 <FLASH_WaitForLastOperation+0x5a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 80190b0:	4b09      	ldr	r3, [pc, #36]	; (80190d8 <FLASH_WaitForLastOperation+0x7c>)
 80190b2:	2201      	movs	r2, #1
 80190b4:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)  
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 80190b6:	4b08      	ldr	r3, [pc, #32]	; (80190d8 <FLASH_WaitForLastOperation+0x7c>)
 80190b8:	68db      	ldr	r3, [r3, #12]
 80190ba:	f403 73f9 	and.w	r3, r3, #498	; 0x1f2
 80190be:	2b00      	cmp	r3, #0
 80190c0:	d003      	beq.n	80190ca <FLASH_WaitForLastOperation+0x6e>
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 80190c2:	f000 f8a5 	bl	8019210 <FLASH_SetErrorCode>
    return HAL_ERROR;
 80190c6:	2301      	movs	r3, #1
 80190c8:	e000      	b.n	80190cc <FLASH_WaitForLastOperation+0x70>
  }

  /* If there is no error flag set */
  return HAL_OK;
 80190ca:	2300      	movs	r3, #0
  
}  
 80190cc:	4618      	mov	r0, r3
 80190ce:	3710      	adds	r7, #16
 80190d0:	46bd      	mov	sp, r7
 80190d2:	bd80      	pop	{r7, pc}
 80190d4:	20007a60 	.word	0x20007a60
 80190d8:	40023c00 	.word	0x40023c00

080190dc <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 80190dc:	b480      	push	{r7}
 80190de:	b085      	sub	sp, #20
 80190e0:	af00      	add	r7, sp, #0
 80190e2:	60f8      	str	r0, [r7, #12]
 80190e4:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80190e8:	4b14      	ldr	r3, [pc, #80]	; (801913c <FLASH_Program_DoubleWord+0x60>)
 80190ea:	691b      	ldr	r3, [r3, #16]
 80190ec:	4a13      	ldr	r2, [pc, #76]	; (801913c <FLASH_Program_DoubleWord+0x60>)
 80190ee:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80190f2:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 80190f4:	4b11      	ldr	r3, [pc, #68]	; (801913c <FLASH_Program_DoubleWord+0x60>)
 80190f6:	691b      	ldr	r3, [r3, #16]
 80190f8:	4a10      	ldr	r2, [pc, #64]	; (801913c <FLASH_Program_DoubleWord+0x60>)
 80190fa:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 80190fe:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8019100:	4b0e      	ldr	r3, [pc, #56]	; (801913c <FLASH_Program_DoubleWord+0x60>)
 8019102:	691b      	ldr	r3, [r3, #16]
 8019104:	4a0d      	ldr	r2, [pc, #52]	; (801913c <FLASH_Program_DoubleWord+0x60>)
 8019106:	f043 0301 	orr.w	r3, r3, #1
 801910a:	6113      	str	r3, [r2, #16]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 801910c:	68fb      	ldr	r3, [r7, #12]
 801910e:	683a      	ldr	r2, [r7, #0]
 8019110:	601a      	str	r2, [r3, #0]
           so that all instructions following the ISB are fetched from cache or memory,
           after the instruction has been completed.
 */
__STATIC_FORCEINLINE void __ISB(void)
{
  __ASM volatile ("isb 0xF":::"memory");
 8019112:	f3bf 8f6f 	isb	sy
}
 8019116:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4) = (uint32_t)(Data >> 32);
 8019118:	e9d7 0100 	ldrd	r0, r1, [r7]
 801911c:	f04f 0200 	mov.w	r2, #0
 8019120:	f04f 0300 	mov.w	r3, #0
 8019124:	000a      	movs	r2, r1
 8019126:	2300      	movs	r3, #0
 8019128:	68f9      	ldr	r1, [r7, #12]
 801912a:	3104      	adds	r1, #4
 801912c:	4613      	mov	r3, r2
 801912e:	600b      	str	r3, [r1, #0]
}
 8019130:	bf00      	nop
 8019132:	3714      	adds	r7, #20
 8019134:	46bd      	mov	sp, r7
 8019136:	f85d 7b04 	ldr.w	r7, [sp], #4
 801913a:	4770      	bx	lr
 801913c:	40023c00 	.word	0x40023c00

08019140 <FLASH_Program_Word>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
 8019140:	b480      	push	{r7}
 8019142:	b083      	sub	sp, #12
 8019144:	af00      	add	r7, sp, #0
 8019146:	6078      	str	r0, [r7, #4]
 8019148:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 801914a:	4b0d      	ldr	r3, [pc, #52]	; (8019180 <FLASH_Program_Word+0x40>)
 801914c:	691b      	ldr	r3, [r3, #16]
 801914e:	4a0c      	ldr	r2, [pc, #48]	; (8019180 <FLASH_Program_Word+0x40>)
 8019150:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8019154:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 8019156:	4b0a      	ldr	r3, [pc, #40]	; (8019180 <FLASH_Program_Word+0x40>)
 8019158:	691b      	ldr	r3, [r3, #16]
 801915a:	4a09      	ldr	r2, [pc, #36]	; (8019180 <FLASH_Program_Word+0x40>)
 801915c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8019160:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8019162:	4b07      	ldr	r3, [pc, #28]	; (8019180 <FLASH_Program_Word+0x40>)
 8019164:	691b      	ldr	r3, [r3, #16]
 8019166:	4a06      	ldr	r2, [pc, #24]	; (8019180 <FLASH_Program_Word+0x40>)
 8019168:	f043 0301 	orr.w	r3, r3, #1
 801916c:	6113      	str	r3, [r2, #16]

  *(__IO uint32_t*)Address = Data;
 801916e:	687b      	ldr	r3, [r7, #4]
 8019170:	683a      	ldr	r2, [r7, #0]
 8019172:	601a      	str	r2, [r3, #0]
}
 8019174:	bf00      	nop
 8019176:	370c      	adds	r7, #12
 8019178:	46bd      	mov	sp, r7
 801917a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801917e:	4770      	bx	lr
 8019180:	40023c00 	.word	0x40023c00

08019184 <FLASH_Program_HalfWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8019184:	b480      	push	{r7}
 8019186:	b083      	sub	sp, #12
 8019188:	af00      	add	r7, sp, #0
 801918a:	6078      	str	r0, [r7, #4]
 801918c:	460b      	mov	r3, r1
 801918e:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8019190:	4b0d      	ldr	r3, [pc, #52]	; (80191c8 <FLASH_Program_HalfWord+0x44>)
 8019192:	691b      	ldr	r3, [r3, #16]
 8019194:	4a0c      	ldr	r2, [pc, #48]	; (80191c8 <FLASH_Program_HalfWord+0x44>)
 8019196:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 801919a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 801919c:	4b0a      	ldr	r3, [pc, #40]	; (80191c8 <FLASH_Program_HalfWord+0x44>)
 801919e:	691b      	ldr	r3, [r3, #16]
 80191a0:	4a09      	ldr	r2, [pc, #36]	; (80191c8 <FLASH_Program_HalfWord+0x44>)
 80191a2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80191a6:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 80191a8:	4b07      	ldr	r3, [pc, #28]	; (80191c8 <FLASH_Program_HalfWord+0x44>)
 80191aa:	691b      	ldr	r3, [r3, #16]
 80191ac:	4a06      	ldr	r2, [pc, #24]	; (80191c8 <FLASH_Program_HalfWord+0x44>)
 80191ae:	f043 0301 	orr.w	r3, r3, #1
 80191b2:	6113      	str	r3, [r2, #16]

  *(__IO uint16_t*)Address = Data;
 80191b4:	687b      	ldr	r3, [r7, #4]
 80191b6:	887a      	ldrh	r2, [r7, #2]
 80191b8:	801a      	strh	r2, [r3, #0]
}
 80191ba:	bf00      	nop
 80191bc:	370c      	adds	r7, #12
 80191be:	46bd      	mov	sp, r7
 80191c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80191c4:	4770      	bx	lr
 80191c6:	bf00      	nop
 80191c8:	40023c00 	.word	0x40023c00

080191cc <FLASH_Program_Byte>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
{
 80191cc:	b480      	push	{r7}
 80191ce:	b083      	sub	sp, #12
 80191d0:	af00      	add	r7, sp, #0
 80191d2:	6078      	str	r0, [r7, #4]
 80191d4:	460b      	mov	r3, r1
 80191d6:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80191d8:	4b0c      	ldr	r3, [pc, #48]	; (801920c <FLASH_Program_Byte+0x40>)
 80191da:	691b      	ldr	r3, [r3, #16]
 80191dc:	4a0b      	ldr	r2, [pc, #44]	; (801920c <FLASH_Program_Byte+0x40>)
 80191de:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80191e2:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 80191e4:	4b09      	ldr	r3, [pc, #36]	; (801920c <FLASH_Program_Byte+0x40>)
 80191e6:	4a09      	ldr	r2, [pc, #36]	; (801920c <FLASH_Program_Byte+0x40>)
 80191e8:	691b      	ldr	r3, [r3, #16]
 80191ea:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 80191ec:	4b07      	ldr	r3, [pc, #28]	; (801920c <FLASH_Program_Byte+0x40>)
 80191ee:	691b      	ldr	r3, [r3, #16]
 80191f0:	4a06      	ldr	r2, [pc, #24]	; (801920c <FLASH_Program_Byte+0x40>)
 80191f2:	f043 0301 	orr.w	r3, r3, #1
 80191f6:	6113      	str	r3, [r2, #16]

  *(__IO uint8_t*)Address = Data;
 80191f8:	687b      	ldr	r3, [r7, #4]
 80191fa:	78fa      	ldrb	r2, [r7, #3]
 80191fc:	701a      	strb	r2, [r3, #0]
}
 80191fe:	bf00      	nop
 8019200:	370c      	adds	r7, #12
 8019202:	46bd      	mov	sp, r7
 8019204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019208:	4770      	bx	lr
 801920a:	bf00      	nop
 801920c:	40023c00 	.word	0x40023c00

08019210 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
 8019210:	b480      	push	{r7}
 8019212:	af00      	add	r7, sp, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 8019214:	4b2f      	ldr	r3, [pc, #188]	; (80192d4 <FLASH_SetErrorCode+0xc4>)
 8019216:	68db      	ldr	r3, [r3, #12]
 8019218:	f003 0310 	and.w	r3, r3, #16
 801921c:	2b00      	cmp	r3, #0
 801921e:	d008      	beq.n	8019232 <FLASH_SetErrorCode+0x22>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8019220:	4b2d      	ldr	r3, [pc, #180]	; (80192d8 <FLASH_SetErrorCode+0xc8>)
 8019222:	69db      	ldr	r3, [r3, #28]
 8019224:	f043 0310 	orr.w	r3, r3, #16
 8019228:	4a2b      	ldr	r2, [pc, #172]	; (80192d8 <FLASH_SetErrorCode+0xc8>)
 801922a:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH write protection error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 801922c:	4b29      	ldr	r3, [pc, #164]	; (80192d4 <FLASH_SetErrorCode+0xc4>)
 801922e:	2210      	movs	r2, #16
 8019230:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 8019232:	4b28      	ldr	r3, [pc, #160]	; (80192d4 <FLASH_SetErrorCode+0xc4>)
 8019234:	68db      	ldr	r3, [r3, #12]
 8019236:	f003 0320 	and.w	r3, r3, #32
 801923a:	2b00      	cmp	r3, #0
 801923c:	d008      	beq.n	8019250 <FLASH_SetErrorCode+0x40>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 801923e:	4b26      	ldr	r3, [pc, #152]	; (80192d8 <FLASH_SetErrorCode+0xc8>)
 8019240:	69db      	ldr	r3, [r3, #28]
 8019242:	f043 0308 	orr.w	r3, r3, #8
 8019246:	4a24      	ldr	r2, [pc, #144]	; (80192d8 <FLASH_SetErrorCode+0xc8>)
 8019248:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH Programming alignment error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 801924a:	4b22      	ldr	r3, [pc, #136]	; (80192d4 <FLASH_SetErrorCode+0xc4>)
 801924c:	2220      	movs	r2, #32
 801924e:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 8019250:	4b20      	ldr	r3, [pc, #128]	; (80192d4 <FLASH_SetErrorCode+0xc4>)
 8019252:	68db      	ldr	r3, [r3, #12]
 8019254:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8019258:	2b00      	cmp	r3, #0
 801925a:	d008      	beq.n	801926e <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 801925c:	4b1e      	ldr	r3, [pc, #120]	; (80192d8 <FLASH_SetErrorCode+0xc8>)
 801925e:	69db      	ldr	r3, [r3, #28]
 8019260:	f043 0304 	orr.w	r3, r3, #4
 8019264:	4a1c      	ldr	r2, [pc, #112]	; (80192d8 <FLASH_SetErrorCode+0xc8>)
 8019266:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 8019268:	4b1a      	ldr	r3, [pc, #104]	; (80192d4 <FLASH_SetErrorCode+0xc4>)
 801926a:	2240      	movs	r2, #64	; 0x40
 801926c:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 801926e:	4b19      	ldr	r3, [pc, #100]	; (80192d4 <FLASH_SetErrorCode+0xc4>)
 8019270:	68db      	ldr	r3, [r3, #12]
 8019272:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8019276:	2b00      	cmp	r3, #0
 8019278:	d008      	beq.n	801928c <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 801927a:	4b17      	ldr	r3, [pc, #92]	; (80192d8 <FLASH_SetErrorCode+0xc8>)
 801927c:	69db      	ldr	r3, [r3, #28]
 801927e:	f043 0302 	orr.w	r3, r3, #2
 8019282:	4a15      	ldr	r2, [pc, #84]	; (80192d8 <FLASH_SetErrorCode+0xc8>)
 8019284:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 8019286:	4b13      	ldr	r3, [pc, #76]	; (80192d4 <FLASH_SetErrorCode+0xc4>)
 8019288:	2280      	movs	r2, #128	; 0x80
 801928a:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR) 
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR) != RESET)
 801928c:	4b11      	ldr	r3, [pc, #68]	; (80192d4 <FLASH_SetErrorCode+0xc4>)
 801928e:	68db      	ldr	r3, [r3, #12]
 8019290:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8019294:	2b00      	cmp	r3, #0
 8019296:	d009      	beq.n	80192ac <FLASH_SetErrorCode+0x9c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_RD;
 8019298:	4b0f      	ldr	r3, [pc, #60]	; (80192d8 <FLASH_SetErrorCode+0xc8>)
 801929a:	69db      	ldr	r3, [r3, #28]
 801929c:	f043 0301 	orr.w	r3, r3, #1
 80192a0:	4a0d      	ldr	r2, [pc, #52]	; (80192d8 <FLASH_SetErrorCode+0xc8>)
 80192a2:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
 80192a4:	4b0b      	ldr	r3, [pc, #44]	; (80192d4 <FLASH_SetErrorCode+0xc4>)
 80192a6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80192aa:	60da      	str	r2, [r3, #12]
  }
#endif /* FLASH_SR_RDERR */  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 80192ac:	4b09      	ldr	r3, [pc, #36]	; (80192d4 <FLASH_SetErrorCode+0xc4>)
 80192ae:	68db      	ldr	r3, [r3, #12]
 80192b0:	f003 0302 	and.w	r3, r3, #2
 80192b4:	2b00      	cmp	r3, #0
 80192b6:	d008      	beq.n	80192ca <FLASH_SetErrorCode+0xba>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 80192b8:	4b07      	ldr	r3, [pc, #28]	; (80192d8 <FLASH_SetErrorCode+0xc8>)
 80192ba:	69db      	ldr	r3, [r3, #28]
 80192bc:	f043 0320 	orr.w	r3, r3, #32
 80192c0:	4a05      	ldr	r2, [pc, #20]	; (80192d8 <FLASH_SetErrorCode+0xc8>)
 80192c2:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 80192c4:	4b03      	ldr	r3, [pc, #12]	; (80192d4 <FLASH_SetErrorCode+0xc4>)
 80192c6:	2202      	movs	r2, #2
 80192c8:	60da      	str	r2, [r3, #12]
  }
}
 80192ca:	bf00      	nop
 80192cc:	46bd      	mov	sp, r7
 80192ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80192d2:	4770      	bx	lr
 80192d4:	40023c00 	.word	0x40023c00
 80192d8:	20007a60 	.word	0x20007a60

080192dc <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFFU means that all the sectors have been correctly erased)
  *
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *SectorError)
{
 80192dc:	b580      	push	{r7, lr}
 80192de:	b084      	sub	sp, #16
 80192e0:	af00      	add	r7, sp, #0
 80192e2:	6078      	str	r0, [r7, #4]
 80192e4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 80192e6:	2301      	movs	r3, #1
 80192e8:	73fb      	strb	r3, [r7, #15]
  uint32_t index = 0U;
 80192ea:	2300      	movs	r3, #0
 80192ec:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80192ee:	4b31      	ldr	r3, [pc, #196]	; (80193b4 <HAL_FLASHEx_Erase+0xd8>)
 80192f0:	7e1b      	ldrb	r3, [r3, #24]
 80192f2:	2b01      	cmp	r3, #1
 80192f4:	d101      	bne.n	80192fa <HAL_FLASHEx_Erase+0x1e>
 80192f6:	2302      	movs	r3, #2
 80192f8:	e058      	b.n	80193ac <HAL_FLASHEx_Erase+0xd0>
 80192fa:	4b2e      	ldr	r3, [pc, #184]	; (80193b4 <HAL_FLASHEx_Erase+0xd8>)
 80192fc:	2201      	movs	r2, #1
 80192fe:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8019300:	f24c 3050 	movw	r0, #50000	; 0xc350
 8019304:	f7ff feaa 	bl	801905c <FLASH_WaitForLastOperation>
 8019308:	4603      	mov	r3, r0
 801930a:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 801930c:	7bfb      	ldrb	r3, [r7, #15]
 801930e:	2b00      	cmp	r3, #0
 8019310:	d148      	bne.n	80193a4 <HAL_FLASHEx_Erase+0xc8>
  {
    /*Initialization of SectorError variable*/
    *SectorError = 0xFFFFFFFFU;
 8019312:	683b      	ldr	r3, [r7, #0]
 8019314:	f04f 32ff 	mov.w	r2, #4294967295
 8019318:	601a      	str	r2, [r3, #0]

    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 801931a:	687b      	ldr	r3, [r7, #4]
 801931c:	681b      	ldr	r3, [r3, #0]
 801931e:	2b01      	cmp	r3, #1
 8019320:	d115      	bne.n	801934e <HAL_FLASHEx_Erase+0x72>
    {
      /*Mass erase to be done*/
      FLASH_MassErase((uint8_t) pEraseInit->VoltageRange, pEraseInit->Banks);
 8019322:	687b      	ldr	r3, [r7, #4]
 8019324:	691b      	ldr	r3, [r3, #16]
 8019326:	b2da      	uxtb	r2, r3
 8019328:	687b      	ldr	r3, [r7, #4]
 801932a:	685b      	ldr	r3, [r3, #4]
 801932c:	4619      	mov	r1, r3
 801932e:	4610      	mov	r0, r2
 8019330:	f000 f844 	bl	80193bc <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8019334:	f24c 3050 	movw	r0, #50000	; 0xc350
 8019338:	f7ff fe90 	bl	801905c <FLASH_WaitForLastOperation>
 801933c:	4603      	mov	r3, r0
 801933e:	73fb      	strb	r3, [r7, #15]

      /* if the erase operation is completed, disable the MER Bit */
      FLASH->CR &= (~FLASH_MER_BIT);
 8019340:	4b1d      	ldr	r3, [pc, #116]	; (80193b8 <HAL_FLASHEx_Erase+0xdc>)
 8019342:	691b      	ldr	r3, [r3, #16]
 8019344:	4a1c      	ldr	r2, [pc, #112]	; (80193b8 <HAL_FLASHEx_Erase+0xdc>)
 8019346:	f023 0304 	bic.w	r3, r3, #4
 801934a:	6113      	str	r3, [r2, #16]
 801934c:	e028      	b.n	80193a0 <HAL_FLASHEx_Erase+0xc4>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_NBSECTORS(pEraseInit->NbSectors + pEraseInit->Sector));

      /* Erase by sector by sector to be done*/
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 801934e:	687b      	ldr	r3, [r7, #4]
 8019350:	689b      	ldr	r3, [r3, #8]
 8019352:	60bb      	str	r3, [r7, #8]
 8019354:	e01c      	b.n	8019390 <HAL_FLASHEx_Erase+0xb4>
      {
        FLASH_Erase_Sector(index, (uint8_t) pEraseInit->VoltageRange);
 8019356:	687b      	ldr	r3, [r7, #4]
 8019358:	691b      	ldr	r3, [r3, #16]
 801935a:	b2db      	uxtb	r3, r3
 801935c:	4619      	mov	r1, r3
 801935e:	68b8      	ldr	r0, [r7, #8]
 8019360:	f000 f850 	bl	8019404 <FLASH_Erase_Sector>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8019364:	f24c 3050 	movw	r0, #50000	; 0xc350
 8019368:	f7ff fe78 	bl	801905c <FLASH_WaitForLastOperation>
 801936c:	4603      	mov	r3, r0
 801936e:	73fb      	strb	r3, [r7, #15]

        /* If the erase operation is completed, disable the SER and SNB Bits */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB));
 8019370:	4b11      	ldr	r3, [pc, #68]	; (80193b8 <HAL_FLASHEx_Erase+0xdc>)
 8019372:	691b      	ldr	r3, [r3, #16]
 8019374:	4a10      	ldr	r2, [pc, #64]	; (80193b8 <HAL_FLASHEx_Erase+0xdc>)
 8019376:	f023 03fa 	bic.w	r3, r3, #250	; 0xfa
 801937a:	6113      	str	r3, [r2, #16]

        if (status != HAL_OK)
 801937c:	7bfb      	ldrb	r3, [r7, #15]
 801937e:	2b00      	cmp	r3, #0
 8019380:	d003      	beq.n	801938a <HAL_FLASHEx_Erase+0xae>
        {
          /* In case of error, stop erase procedure and return the faulty sector*/
          *SectorError = index;
 8019382:	683b      	ldr	r3, [r7, #0]
 8019384:	68ba      	ldr	r2, [r7, #8]
 8019386:	601a      	str	r2, [r3, #0]
          break;
 8019388:	e00a      	b.n	80193a0 <HAL_FLASHEx_Erase+0xc4>
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 801938a:	68bb      	ldr	r3, [r7, #8]
 801938c:	3301      	adds	r3, #1
 801938e:	60bb      	str	r3, [r7, #8]
 8019390:	687b      	ldr	r3, [r7, #4]
 8019392:	68da      	ldr	r2, [r3, #12]
 8019394:	687b      	ldr	r3, [r7, #4]
 8019396:	689b      	ldr	r3, [r3, #8]
 8019398:	4413      	add	r3, r2
 801939a:	68ba      	ldr	r2, [r7, #8]
 801939c:	429a      	cmp	r2, r3
 801939e:	d3da      	bcc.n	8019356 <HAL_FLASHEx_Erase+0x7a>
        }
      }
    }
    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 80193a0:	f000 f878 	bl	8019494 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 80193a4:	4b03      	ldr	r3, [pc, #12]	; (80193b4 <HAL_FLASHEx_Erase+0xd8>)
 80193a6:	2200      	movs	r2, #0
 80193a8:	761a      	strb	r2, [r3, #24]

  return status;
 80193aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80193ac:	4618      	mov	r0, r3
 80193ae:	3710      	adds	r7, #16
 80193b0:	46bd      	mov	sp, r7
 80193b2:	bd80      	pop	{r7, pc}
 80193b4:	20007a60 	.word	0x20007a60
 80193b8:	40023c00 	.word	0x40023c00

080193bc <FLASH_MassErase>:
  *            @arg FLASH_BANK_1: Bank1 to be erased
  *
  * @retval None
  */
static void FLASH_MassErase(uint8_t VoltageRange, uint32_t Banks)
{
 80193bc:	b480      	push	{r7}
 80193be:	b083      	sub	sp, #12
 80193c0:	af00      	add	r7, sp, #0
 80193c2:	4603      	mov	r3, r0
 80193c4:	6039      	str	r1, [r7, #0]
 80193c6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  assert_param(IS_FLASH_BANK(Banks));

  /* If the previous operation is completed, proceed to erase all sectors */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80193c8:	4b0d      	ldr	r3, [pc, #52]	; (8019400 <FLASH_MassErase+0x44>)
 80193ca:	691b      	ldr	r3, [r3, #16]
 80193cc:	4a0c      	ldr	r2, [pc, #48]	; (8019400 <FLASH_MassErase+0x44>)
 80193ce:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80193d2:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_MER;
 80193d4:	4b0a      	ldr	r3, [pc, #40]	; (8019400 <FLASH_MassErase+0x44>)
 80193d6:	691b      	ldr	r3, [r3, #16]
 80193d8:	4a09      	ldr	r2, [pc, #36]	; (8019400 <FLASH_MassErase+0x44>)
 80193da:	f043 0304 	orr.w	r3, r3, #4
 80193de:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT | ((uint32_t)VoltageRange << 8U);
 80193e0:	4b07      	ldr	r3, [pc, #28]	; (8019400 <FLASH_MassErase+0x44>)
 80193e2:	691a      	ldr	r2, [r3, #16]
 80193e4:	79fb      	ldrb	r3, [r7, #7]
 80193e6:	021b      	lsls	r3, r3, #8
 80193e8:	4313      	orrs	r3, r2
 80193ea:	4a05      	ldr	r2, [pc, #20]	; (8019400 <FLASH_MassErase+0x44>)
 80193ec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80193f0:	6113      	str	r3, [r2, #16]
}
 80193f2:	bf00      	nop
 80193f4:	370c      	adds	r7, #12
 80193f6:	46bd      	mov	sp, r7
 80193f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80193fc:	4770      	bx	lr
 80193fe:	bf00      	nop
 8019400:	40023c00 	.word	0x40023c00

08019404 <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  *
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 8019404:	b480      	push	{r7}
 8019406:	b085      	sub	sp, #20
 8019408:	af00      	add	r7, sp, #0
 801940a:	6078      	str	r0, [r7, #4]
 801940c:	460b      	mov	r3, r1
 801940e:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
 8019410:	2300      	movs	r3, #0
 8019412:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));

  if (VoltageRange == FLASH_VOLTAGE_RANGE_1)
 8019414:	78fb      	ldrb	r3, [r7, #3]
 8019416:	2b00      	cmp	r3, #0
 8019418:	d102      	bne.n	8019420 <FLASH_Erase_Sector+0x1c>
  {
    tmp_psize = FLASH_PSIZE_BYTE;
 801941a:	2300      	movs	r3, #0
 801941c:	60fb      	str	r3, [r7, #12]
 801941e:	e010      	b.n	8019442 <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_2)
 8019420:	78fb      	ldrb	r3, [r7, #3]
 8019422:	2b01      	cmp	r3, #1
 8019424:	d103      	bne.n	801942e <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 8019426:	f44f 7380 	mov.w	r3, #256	; 0x100
 801942a:	60fb      	str	r3, [r7, #12]
 801942c:	e009      	b.n	8019442 <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_3)
 801942e:	78fb      	ldrb	r3, [r7, #3]
 8019430:	2b02      	cmp	r3, #2
 8019432:	d103      	bne.n	801943c <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 8019434:	f44f 7300 	mov.w	r3, #512	; 0x200
 8019438:	60fb      	str	r3, [r7, #12]
 801943a:	e002      	b.n	8019442 <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 801943c:	f44f 7340 	mov.w	r3, #768	; 0x300
 8019440:	60fb      	str	r3, [r7, #12]
  }

  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8019442:	4b13      	ldr	r3, [pc, #76]	; (8019490 <FLASH_Erase_Sector+0x8c>)
 8019444:	691b      	ldr	r3, [r3, #16]
 8019446:	4a12      	ldr	r2, [pc, #72]	; (8019490 <FLASH_Erase_Sector+0x8c>)
 8019448:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 801944c:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 801944e:	4b10      	ldr	r3, [pc, #64]	; (8019490 <FLASH_Erase_Sector+0x8c>)
 8019450:	691a      	ldr	r2, [r3, #16]
 8019452:	490f      	ldr	r1, [pc, #60]	; (8019490 <FLASH_Erase_Sector+0x8c>)
 8019454:	68fb      	ldr	r3, [r7, #12]
 8019456:	4313      	orrs	r3, r2
 8019458:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 801945a:	4b0d      	ldr	r3, [pc, #52]	; (8019490 <FLASH_Erase_Sector+0x8c>)
 801945c:	691b      	ldr	r3, [r3, #16]
 801945e:	4a0c      	ldr	r2, [pc, #48]	; (8019490 <FLASH_Erase_Sector+0x8c>)
 8019460:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8019464:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 8019466:	4b0a      	ldr	r3, [pc, #40]	; (8019490 <FLASH_Erase_Sector+0x8c>)
 8019468:	691a      	ldr	r2, [r3, #16]
 801946a:	687b      	ldr	r3, [r7, #4]
 801946c:	00db      	lsls	r3, r3, #3
 801946e:	4313      	orrs	r3, r2
 8019470:	4a07      	ldr	r2, [pc, #28]	; (8019490 <FLASH_Erase_Sector+0x8c>)
 8019472:	f043 0302 	orr.w	r3, r3, #2
 8019476:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 8019478:	4b05      	ldr	r3, [pc, #20]	; (8019490 <FLASH_Erase_Sector+0x8c>)
 801947a:	691b      	ldr	r3, [r3, #16]
 801947c:	4a04      	ldr	r2, [pc, #16]	; (8019490 <FLASH_Erase_Sector+0x8c>)
 801947e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8019482:	6113      	str	r3, [r2, #16]
}
 8019484:	bf00      	nop
 8019486:	3714      	adds	r7, #20
 8019488:	46bd      	mov	sp, r7
 801948a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801948e:	4770      	bx	lr
 8019490:	40023c00 	.word	0x40023c00

08019494 <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 8019494:	b480      	push	{r7}
 8019496:	af00      	add	r7, sp, #0
  /* Flush instruction cache  */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != RESET)
 8019498:	4b20      	ldr	r3, [pc, #128]	; (801951c <FLASH_FlushCaches+0x88>)
 801949a:	681b      	ldr	r3, [r3, #0]
 801949c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80194a0:	2b00      	cmp	r3, #0
 80194a2:	d017      	beq.n	80194d4 <FLASH_FlushCaches+0x40>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 80194a4:	4b1d      	ldr	r3, [pc, #116]	; (801951c <FLASH_FlushCaches+0x88>)
 80194a6:	681b      	ldr	r3, [r3, #0]
 80194a8:	4a1c      	ldr	r2, [pc, #112]	; (801951c <FLASH_FlushCaches+0x88>)
 80194aa:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80194ae:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 80194b0:	4b1a      	ldr	r3, [pc, #104]	; (801951c <FLASH_FlushCaches+0x88>)
 80194b2:	681b      	ldr	r3, [r3, #0]
 80194b4:	4a19      	ldr	r2, [pc, #100]	; (801951c <FLASH_FlushCaches+0x88>)
 80194b6:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80194ba:	6013      	str	r3, [r2, #0]
 80194bc:	4b17      	ldr	r3, [pc, #92]	; (801951c <FLASH_FlushCaches+0x88>)
 80194be:	681b      	ldr	r3, [r3, #0]
 80194c0:	4a16      	ldr	r2, [pc, #88]	; (801951c <FLASH_FlushCaches+0x88>)
 80194c2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80194c6:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80194c8:	4b14      	ldr	r3, [pc, #80]	; (801951c <FLASH_FlushCaches+0x88>)
 80194ca:	681b      	ldr	r3, [r3, #0]
 80194cc:	4a13      	ldr	r2, [pc, #76]	; (801951c <FLASH_FlushCaches+0x88>)
 80194ce:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80194d2:	6013      	str	r3, [r2, #0]
  }

  /* Flush data cache */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != RESET)
 80194d4:	4b11      	ldr	r3, [pc, #68]	; (801951c <FLASH_FlushCaches+0x88>)
 80194d6:	681b      	ldr	r3, [r3, #0]
 80194d8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80194dc:	2b00      	cmp	r3, #0
 80194de:	d017      	beq.n	8019510 <FLASH_FlushCaches+0x7c>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 80194e0:	4b0e      	ldr	r3, [pc, #56]	; (801951c <FLASH_FlushCaches+0x88>)
 80194e2:	681b      	ldr	r3, [r3, #0]
 80194e4:	4a0d      	ldr	r2, [pc, #52]	; (801951c <FLASH_FlushCaches+0x88>)
 80194e6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80194ea:	6013      	str	r3, [r2, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 80194ec:	4b0b      	ldr	r3, [pc, #44]	; (801951c <FLASH_FlushCaches+0x88>)
 80194ee:	681b      	ldr	r3, [r3, #0]
 80194f0:	4a0a      	ldr	r2, [pc, #40]	; (801951c <FLASH_FlushCaches+0x88>)
 80194f2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80194f6:	6013      	str	r3, [r2, #0]
 80194f8:	4b08      	ldr	r3, [pc, #32]	; (801951c <FLASH_FlushCaches+0x88>)
 80194fa:	681b      	ldr	r3, [r3, #0]
 80194fc:	4a07      	ldr	r2, [pc, #28]	; (801951c <FLASH_FlushCaches+0x88>)
 80194fe:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8019502:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 8019504:	4b05      	ldr	r3, [pc, #20]	; (801951c <FLASH_FlushCaches+0x88>)
 8019506:	681b      	ldr	r3, [r3, #0]
 8019508:	4a04      	ldr	r2, [pc, #16]	; (801951c <FLASH_FlushCaches+0x88>)
 801950a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 801950e:	6013      	str	r3, [r2, #0]
  }
}
 8019510:	bf00      	nop
 8019512:	46bd      	mov	sp, r7
 8019514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019518:	4770      	bx	lr
 801951a:	bf00      	nop
 801951c:	40023c00 	.word	0x40023c00

08019520 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8019520:	b480      	push	{r7}
 8019522:	b089      	sub	sp, #36	; 0x24
 8019524:	af00      	add	r7, sp, #0
 8019526:	6078      	str	r0, [r7, #4]
 8019528:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 801952a:	2300      	movs	r3, #0
 801952c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 801952e:	2300      	movs	r3, #0
 8019530:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8019532:	2300      	movs	r3, #0
 8019534:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8019536:	2300      	movs	r3, #0
 8019538:	61fb      	str	r3, [r7, #28]
 801953a:	e165      	b.n	8019808 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 801953c:	2201      	movs	r2, #1
 801953e:	69fb      	ldr	r3, [r7, #28]
 8019540:	fa02 f303 	lsl.w	r3, r2, r3
 8019544:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8019546:	683b      	ldr	r3, [r7, #0]
 8019548:	681b      	ldr	r3, [r3, #0]
 801954a:	697a      	ldr	r2, [r7, #20]
 801954c:	4013      	ands	r3, r2
 801954e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8019550:	693a      	ldr	r2, [r7, #16]
 8019552:	697b      	ldr	r3, [r7, #20]
 8019554:	429a      	cmp	r2, r3
 8019556:	f040 8154 	bne.w	8019802 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 801955a:	683b      	ldr	r3, [r7, #0]
 801955c:	685b      	ldr	r3, [r3, #4]
 801955e:	f003 0303 	and.w	r3, r3, #3
 8019562:	2b01      	cmp	r3, #1
 8019564:	d005      	beq.n	8019572 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8019566:	683b      	ldr	r3, [r7, #0]
 8019568:	685b      	ldr	r3, [r3, #4]
 801956a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 801956e:	2b02      	cmp	r3, #2
 8019570:	d130      	bne.n	80195d4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8019572:	687b      	ldr	r3, [r7, #4]
 8019574:	689b      	ldr	r3, [r3, #8]
 8019576:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8019578:	69fb      	ldr	r3, [r7, #28]
 801957a:	005b      	lsls	r3, r3, #1
 801957c:	2203      	movs	r2, #3
 801957e:	fa02 f303 	lsl.w	r3, r2, r3
 8019582:	43db      	mvns	r3, r3
 8019584:	69ba      	ldr	r2, [r7, #24]
 8019586:	4013      	ands	r3, r2
 8019588:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 801958a:	683b      	ldr	r3, [r7, #0]
 801958c:	68da      	ldr	r2, [r3, #12]
 801958e:	69fb      	ldr	r3, [r7, #28]
 8019590:	005b      	lsls	r3, r3, #1
 8019592:	fa02 f303 	lsl.w	r3, r2, r3
 8019596:	69ba      	ldr	r2, [r7, #24]
 8019598:	4313      	orrs	r3, r2
 801959a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 801959c:	687b      	ldr	r3, [r7, #4]
 801959e:	69ba      	ldr	r2, [r7, #24]
 80195a0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80195a2:	687b      	ldr	r3, [r7, #4]
 80195a4:	685b      	ldr	r3, [r3, #4]
 80195a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80195a8:	2201      	movs	r2, #1
 80195aa:	69fb      	ldr	r3, [r7, #28]
 80195ac:	fa02 f303 	lsl.w	r3, r2, r3
 80195b0:	43db      	mvns	r3, r3
 80195b2:	69ba      	ldr	r2, [r7, #24]
 80195b4:	4013      	ands	r3, r2
 80195b6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80195b8:	683b      	ldr	r3, [r7, #0]
 80195ba:	685b      	ldr	r3, [r3, #4]
 80195bc:	091b      	lsrs	r3, r3, #4
 80195be:	f003 0201 	and.w	r2, r3, #1
 80195c2:	69fb      	ldr	r3, [r7, #28]
 80195c4:	fa02 f303 	lsl.w	r3, r2, r3
 80195c8:	69ba      	ldr	r2, [r7, #24]
 80195ca:	4313      	orrs	r3, r2
 80195cc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80195ce:	687b      	ldr	r3, [r7, #4]
 80195d0:	69ba      	ldr	r2, [r7, #24]
 80195d2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80195d4:	683b      	ldr	r3, [r7, #0]
 80195d6:	685b      	ldr	r3, [r3, #4]
 80195d8:	f003 0303 	and.w	r3, r3, #3
 80195dc:	2b03      	cmp	r3, #3
 80195de:	d017      	beq.n	8019610 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80195e0:	687b      	ldr	r3, [r7, #4]
 80195e2:	68db      	ldr	r3, [r3, #12]
 80195e4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80195e6:	69fb      	ldr	r3, [r7, #28]
 80195e8:	005b      	lsls	r3, r3, #1
 80195ea:	2203      	movs	r2, #3
 80195ec:	fa02 f303 	lsl.w	r3, r2, r3
 80195f0:	43db      	mvns	r3, r3
 80195f2:	69ba      	ldr	r2, [r7, #24]
 80195f4:	4013      	ands	r3, r2
 80195f6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80195f8:	683b      	ldr	r3, [r7, #0]
 80195fa:	689a      	ldr	r2, [r3, #8]
 80195fc:	69fb      	ldr	r3, [r7, #28]
 80195fe:	005b      	lsls	r3, r3, #1
 8019600:	fa02 f303 	lsl.w	r3, r2, r3
 8019604:	69ba      	ldr	r2, [r7, #24]
 8019606:	4313      	orrs	r3, r2
 8019608:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 801960a:	687b      	ldr	r3, [r7, #4]
 801960c:	69ba      	ldr	r2, [r7, #24]
 801960e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8019610:	683b      	ldr	r3, [r7, #0]
 8019612:	685b      	ldr	r3, [r3, #4]
 8019614:	f003 0303 	and.w	r3, r3, #3
 8019618:	2b02      	cmp	r3, #2
 801961a:	d123      	bne.n	8019664 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 801961c:	69fb      	ldr	r3, [r7, #28]
 801961e:	08da      	lsrs	r2, r3, #3
 8019620:	687b      	ldr	r3, [r7, #4]
 8019622:	3208      	adds	r2, #8
 8019624:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8019628:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 801962a:	69fb      	ldr	r3, [r7, #28]
 801962c:	f003 0307 	and.w	r3, r3, #7
 8019630:	009b      	lsls	r3, r3, #2
 8019632:	220f      	movs	r2, #15
 8019634:	fa02 f303 	lsl.w	r3, r2, r3
 8019638:	43db      	mvns	r3, r3
 801963a:	69ba      	ldr	r2, [r7, #24]
 801963c:	4013      	ands	r3, r2
 801963e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8019640:	683b      	ldr	r3, [r7, #0]
 8019642:	691a      	ldr	r2, [r3, #16]
 8019644:	69fb      	ldr	r3, [r7, #28]
 8019646:	f003 0307 	and.w	r3, r3, #7
 801964a:	009b      	lsls	r3, r3, #2
 801964c:	fa02 f303 	lsl.w	r3, r2, r3
 8019650:	69ba      	ldr	r2, [r7, #24]
 8019652:	4313      	orrs	r3, r2
 8019654:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8019656:	69fb      	ldr	r3, [r7, #28]
 8019658:	08da      	lsrs	r2, r3, #3
 801965a:	687b      	ldr	r3, [r7, #4]
 801965c:	3208      	adds	r2, #8
 801965e:	69b9      	ldr	r1, [r7, #24]
 8019660:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8019664:	687b      	ldr	r3, [r7, #4]
 8019666:	681b      	ldr	r3, [r3, #0]
 8019668:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 801966a:	69fb      	ldr	r3, [r7, #28]
 801966c:	005b      	lsls	r3, r3, #1
 801966e:	2203      	movs	r2, #3
 8019670:	fa02 f303 	lsl.w	r3, r2, r3
 8019674:	43db      	mvns	r3, r3
 8019676:	69ba      	ldr	r2, [r7, #24]
 8019678:	4013      	ands	r3, r2
 801967a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 801967c:	683b      	ldr	r3, [r7, #0]
 801967e:	685b      	ldr	r3, [r3, #4]
 8019680:	f003 0203 	and.w	r2, r3, #3
 8019684:	69fb      	ldr	r3, [r7, #28]
 8019686:	005b      	lsls	r3, r3, #1
 8019688:	fa02 f303 	lsl.w	r3, r2, r3
 801968c:	69ba      	ldr	r2, [r7, #24]
 801968e:	4313      	orrs	r3, r2
 8019690:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8019692:	687b      	ldr	r3, [r7, #4]
 8019694:	69ba      	ldr	r2, [r7, #24]
 8019696:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8019698:	683b      	ldr	r3, [r7, #0]
 801969a:	685b      	ldr	r3, [r3, #4]
 801969c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80196a0:	2b00      	cmp	r3, #0
 80196a2:	f000 80ae 	beq.w	8019802 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80196a6:	2300      	movs	r3, #0
 80196a8:	60fb      	str	r3, [r7, #12]
 80196aa:	4b5d      	ldr	r3, [pc, #372]	; (8019820 <HAL_GPIO_Init+0x300>)
 80196ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80196ae:	4a5c      	ldr	r2, [pc, #368]	; (8019820 <HAL_GPIO_Init+0x300>)
 80196b0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80196b4:	6453      	str	r3, [r2, #68]	; 0x44
 80196b6:	4b5a      	ldr	r3, [pc, #360]	; (8019820 <HAL_GPIO_Init+0x300>)
 80196b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80196ba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80196be:	60fb      	str	r3, [r7, #12]
 80196c0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80196c2:	4a58      	ldr	r2, [pc, #352]	; (8019824 <HAL_GPIO_Init+0x304>)
 80196c4:	69fb      	ldr	r3, [r7, #28]
 80196c6:	089b      	lsrs	r3, r3, #2
 80196c8:	3302      	adds	r3, #2
 80196ca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80196ce:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80196d0:	69fb      	ldr	r3, [r7, #28]
 80196d2:	f003 0303 	and.w	r3, r3, #3
 80196d6:	009b      	lsls	r3, r3, #2
 80196d8:	220f      	movs	r2, #15
 80196da:	fa02 f303 	lsl.w	r3, r2, r3
 80196de:	43db      	mvns	r3, r3
 80196e0:	69ba      	ldr	r2, [r7, #24]
 80196e2:	4013      	ands	r3, r2
 80196e4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80196e6:	687b      	ldr	r3, [r7, #4]
 80196e8:	4a4f      	ldr	r2, [pc, #316]	; (8019828 <HAL_GPIO_Init+0x308>)
 80196ea:	4293      	cmp	r3, r2
 80196ec:	d025      	beq.n	801973a <HAL_GPIO_Init+0x21a>
 80196ee:	687b      	ldr	r3, [r7, #4]
 80196f0:	4a4e      	ldr	r2, [pc, #312]	; (801982c <HAL_GPIO_Init+0x30c>)
 80196f2:	4293      	cmp	r3, r2
 80196f4:	d01f      	beq.n	8019736 <HAL_GPIO_Init+0x216>
 80196f6:	687b      	ldr	r3, [r7, #4]
 80196f8:	4a4d      	ldr	r2, [pc, #308]	; (8019830 <HAL_GPIO_Init+0x310>)
 80196fa:	4293      	cmp	r3, r2
 80196fc:	d019      	beq.n	8019732 <HAL_GPIO_Init+0x212>
 80196fe:	687b      	ldr	r3, [r7, #4]
 8019700:	4a4c      	ldr	r2, [pc, #304]	; (8019834 <HAL_GPIO_Init+0x314>)
 8019702:	4293      	cmp	r3, r2
 8019704:	d013      	beq.n	801972e <HAL_GPIO_Init+0x20e>
 8019706:	687b      	ldr	r3, [r7, #4]
 8019708:	4a4b      	ldr	r2, [pc, #300]	; (8019838 <HAL_GPIO_Init+0x318>)
 801970a:	4293      	cmp	r3, r2
 801970c:	d00d      	beq.n	801972a <HAL_GPIO_Init+0x20a>
 801970e:	687b      	ldr	r3, [r7, #4]
 8019710:	4a4a      	ldr	r2, [pc, #296]	; (801983c <HAL_GPIO_Init+0x31c>)
 8019712:	4293      	cmp	r3, r2
 8019714:	d007      	beq.n	8019726 <HAL_GPIO_Init+0x206>
 8019716:	687b      	ldr	r3, [r7, #4]
 8019718:	4a49      	ldr	r2, [pc, #292]	; (8019840 <HAL_GPIO_Init+0x320>)
 801971a:	4293      	cmp	r3, r2
 801971c:	d101      	bne.n	8019722 <HAL_GPIO_Init+0x202>
 801971e:	2306      	movs	r3, #6
 8019720:	e00c      	b.n	801973c <HAL_GPIO_Init+0x21c>
 8019722:	2307      	movs	r3, #7
 8019724:	e00a      	b.n	801973c <HAL_GPIO_Init+0x21c>
 8019726:	2305      	movs	r3, #5
 8019728:	e008      	b.n	801973c <HAL_GPIO_Init+0x21c>
 801972a:	2304      	movs	r3, #4
 801972c:	e006      	b.n	801973c <HAL_GPIO_Init+0x21c>
 801972e:	2303      	movs	r3, #3
 8019730:	e004      	b.n	801973c <HAL_GPIO_Init+0x21c>
 8019732:	2302      	movs	r3, #2
 8019734:	e002      	b.n	801973c <HAL_GPIO_Init+0x21c>
 8019736:	2301      	movs	r3, #1
 8019738:	e000      	b.n	801973c <HAL_GPIO_Init+0x21c>
 801973a:	2300      	movs	r3, #0
 801973c:	69fa      	ldr	r2, [r7, #28]
 801973e:	f002 0203 	and.w	r2, r2, #3
 8019742:	0092      	lsls	r2, r2, #2
 8019744:	4093      	lsls	r3, r2
 8019746:	69ba      	ldr	r2, [r7, #24]
 8019748:	4313      	orrs	r3, r2
 801974a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 801974c:	4935      	ldr	r1, [pc, #212]	; (8019824 <HAL_GPIO_Init+0x304>)
 801974e:	69fb      	ldr	r3, [r7, #28]
 8019750:	089b      	lsrs	r3, r3, #2
 8019752:	3302      	adds	r3, #2
 8019754:	69ba      	ldr	r2, [r7, #24]
 8019756:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 801975a:	4b3a      	ldr	r3, [pc, #232]	; (8019844 <HAL_GPIO_Init+0x324>)
 801975c:	681b      	ldr	r3, [r3, #0]
 801975e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8019760:	693b      	ldr	r3, [r7, #16]
 8019762:	43db      	mvns	r3, r3
 8019764:	69ba      	ldr	r2, [r7, #24]
 8019766:	4013      	ands	r3, r2
 8019768:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 801976a:	683b      	ldr	r3, [r7, #0]
 801976c:	685b      	ldr	r3, [r3, #4]
 801976e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8019772:	2b00      	cmp	r3, #0
 8019774:	d003      	beq.n	801977e <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8019776:	69ba      	ldr	r2, [r7, #24]
 8019778:	693b      	ldr	r3, [r7, #16]
 801977a:	4313      	orrs	r3, r2
 801977c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 801977e:	4a31      	ldr	r2, [pc, #196]	; (8019844 <HAL_GPIO_Init+0x324>)
 8019780:	69bb      	ldr	r3, [r7, #24]
 8019782:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8019784:	4b2f      	ldr	r3, [pc, #188]	; (8019844 <HAL_GPIO_Init+0x324>)
 8019786:	685b      	ldr	r3, [r3, #4]
 8019788:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 801978a:	693b      	ldr	r3, [r7, #16]
 801978c:	43db      	mvns	r3, r3
 801978e:	69ba      	ldr	r2, [r7, #24]
 8019790:	4013      	ands	r3, r2
 8019792:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8019794:	683b      	ldr	r3, [r7, #0]
 8019796:	685b      	ldr	r3, [r3, #4]
 8019798:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801979c:	2b00      	cmp	r3, #0
 801979e:	d003      	beq.n	80197a8 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 80197a0:	69ba      	ldr	r2, [r7, #24]
 80197a2:	693b      	ldr	r3, [r7, #16]
 80197a4:	4313      	orrs	r3, r2
 80197a6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80197a8:	4a26      	ldr	r2, [pc, #152]	; (8019844 <HAL_GPIO_Init+0x324>)
 80197aa:	69bb      	ldr	r3, [r7, #24]
 80197ac:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80197ae:	4b25      	ldr	r3, [pc, #148]	; (8019844 <HAL_GPIO_Init+0x324>)
 80197b0:	689b      	ldr	r3, [r3, #8]
 80197b2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80197b4:	693b      	ldr	r3, [r7, #16]
 80197b6:	43db      	mvns	r3, r3
 80197b8:	69ba      	ldr	r2, [r7, #24]
 80197ba:	4013      	ands	r3, r2
 80197bc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80197be:	683b      	ldr	r3, [r7, #0]
 80197c0:	685b      	ldr	r3, [r3, #4]
 80197c2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80197c6:	2b00      	cmp	r3, #0
 80197c8:	d003      	beq.n	80197d2 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80197ca:	69ba      	ldr	r2, [r7, #24]
 80197cc:	693b      	ldr	r3, [r7, #16]
 80197ce:	4313      	orrs	r3, r2
 80197d0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80197d2:	4a1c      	ldr	r2, [pc, #112]	; (8019844 <HAL_GPIO_Init+0x324>)
 80197d4:	69bb      	ldr	r3, [r7, #24]
 80197d6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80197d8:	4b1a      	ldr	r3, [pc, #104]	; (8019844 <HAL_GPIO_Init+0x324>)
 80197da:	68db      	ldr	r3, [r3, #12]
 80197dc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80197de:	693b      	ldr	r3, [r7, #16]
 80197e0:	43db      	mvns	r3, r3
 80197e2:	69ba      	ldr	r2, [r7, #24]
 80197e4:	4013      	ands	r3, r2
 80197e6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80197e8:	683b      	ldr	r3, [r7, #0]
 80197ea:	685b      	ldr	r3, [r3, #4]
 80197ec:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80197f0:	2b00      	cmp	r3, #0
 80197f2:	d003      	beq.n	80197fc <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80197f4:	69ba      	ldr	r2, [r7, #24]
 80197f6:	693b      	ldr	r3, [r7, #16]
 80197f8:	4313      	orrs	r3, r2
 80197fa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80197fc:	4a11      	ldr	r2, [pc, #68]	; (8019844 <HAL_GPIO_Init+0x324>)
 80197fe:	69bb      	ldr	r3, [r7, #24]
 8019800:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8019802:	69fb      	ldr	r3, [r7, #28]
 8019804:	3301      	adds	r3, #1
 8019806:	61fb      	str	r3, [r7, #28]
 8019808:	69fb      	ldr	r3, [r7, #28]
 801980a:	2b0f      	cmp	r3, #15
 801980c:	f67f ae96 	bls.w	801953c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8019810:	bf00      	nop
 8019812:	bf00      	nop
 8019814:	3724      	adds	r7, #36	; 0x24
 8019816:	46bd      	mov	sp, r7
 8019818:	f85d 7b04 	ldr.w	r7, [sp], #4
 801981c:	4770      	bx	lr
 801981e:	bf00      	nop
 8019820:	40023800 	.word	0x40023800
 8019824:	40013800 	.word	0x40013800
 8019828:	40020000 	.word	0x40020000
 801982c:	40020400 	.word	0x40020400
 8019830:	40020800 	.word	0x40020800
 8019834:	40020c00 	.word	0x40020c00
 8019838:	40021000 	.word	0x40021000
 801983c:	40021400 	.word	0x40021400
 8019840:	40021800 	.word	0x40021800
 8019844:	40013c00 	.word	0x40013c00

08019848 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8019848:	b480      	push	{r7}
 801984a:	b085      	sub	sp, #20
 801984c:	af00      	add	r7, sp, #0
 801984e:	6078      	str	r0, [r7, #4]
 8019850:	460b      	mov	r3, r1
 8019852:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8019854:	687b      	ldr	r3, [r7, #4]
 8019856:	691a      	ldr	r2, [r3, #16]
 8019858:	887b      	ldrh	r3, [r7, #2]
 801985a:	4013      	ands	r3, r2
 801985c:	2b00      	cmp	r3, #0
 801985e:	d002      	beq.n	8019866 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8019860:	2301      	movs	r3, #1
 8019862:	73fb      	strb	r3, [r7, #15]
 8019864:	e001      	b.n	801986a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8019866:	2300      	movs	r3, #0
 8019868:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 801986a:	7bfb      	ldrb	r3, [r7, #15]
}
 801986c:	4618      	mov	r0, r3
 801986e:	3714      	adds	r7, #20
 8019870:	46bd      	mov	sp, r7
 8019872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019876:	4770      	bx	lr

08019878 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8019878:	b480      	push	{r7}
 801987a:	b083      	sub	sp, #12
 801987c:	af00      	add	r7, sp, #0
 801987e:	6078      	str	r0, [r7, #4]
 8019880:	460b      	mov	r3, r1
 8019882:	807b      	strh	r3, [r7, #2]
 8019884:	4613      	mov	r3, r2
 8019886:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8019888:	787b      	ldrb	r3, [r7, #1]
 801988a:	2b00      	cmp	r3, #0
 801988c:	d003      	beq.n	8019896 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 801988e:	887a      	ldrh	r2, [r7, #2]
 8019890:	687b      	ldr	r3, [r7, #4]
 8019892:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8019894:	e003      	b.n	801989e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8019896:	887b      	ldrh	r3, [r7, #2]
 8019898:	041a      	lsls	r2, r3, #16
 801989a:	687b      	ldr	r3, [r7, #4]
 801989c:	619a      	str	r2, [r3, #24]
}
 801989e:	bf00      	nop
 80198a0:	370c      	adds	r7, #12
 80198a2:	46bd      	mov	sp, r7
 80198a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80198a8:	4770      	bx	lr

080198aa <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80198aa:	b5f0      	push	{r4, r5, r6, r7, lr}
 80198ac:	b08f      	sub	sp, #60	; 0x3c
 80198ae:	af0a      	add	r7, sp, #40	; 0x28
 80198b0:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80198b2:	687b      	ldr	r3, [r7, #4]
 80198b4:	2b00      	cmp	r3, #0
 80198b6:	d101      	bne.n	80198bc <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80198b8:	2301      	movs	r3, #1
 80198ba:	e116      	b.n	8019aea <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 80198bc:	687b      	ldr	r3, [r7, #4]
 80198be:	681b      	ldr	r3, [r3, #0]
 80198c0:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80198c2:	687b      	ldr	r3, [r7, #4]
 80198c4:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 80198c8:	b2db      	uxtb	r3, r3
 80198ca:	2b00      	cmp	r3, #0
 80198cc:	d106      	bne.n	80198dc <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80198ce:	687b      	ldr	r3, [r7, #4]
 80198d0:	2200      	movs	r2, #0
 80198d2:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80198d6:	6878      	ldr	r0, [r7, #4]
 80198d8:	f00b fd5c 	bl	8025394 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80198dc:	687b      	ldr	r3, [r7, #4]
 80198de:	2203      	movs	r2, #3
 80198e0:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80198e4:	68bb      	ldr	r3, [r7, #8]
 80198e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80198e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80198ec:	2b00      	cmp	r3, #0
 80198ee:	d102      	bne.n	80198f6 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80198f0:	687b      	ldr	r3, [r7, #4]
 80198f2:	2200      	movs	r2, #0
 80198f4:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80198f6:	687b      	ldr	r3, [r7, #4]
 80198f8:	681b      	ldr	r3, [r3, #0]
 80198fa:	4618      	mov	r0, r3
 80198fc:	f004 f8a1 	bl	801da42 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8019900:	687b      	ldr	r3, [r7, #4]
 8019902:	681b      	ldr	r3, [r3, #0]
 8019904:	603b      	str	r3, [r7, #0]
 8019906:	687e      	ldr	r6, [r7, #4]
 8019908:	466d      	mov	r5, sp
 801990a:	f106 0410 	add.w	r4, r6, #16
 801990e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8019910:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8019912:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8019914:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8019916:	e894 0003 	ldmia.w	r4, {r0, r1}
 801991a:	e885 0003 	stmia.w	r5, {r0, r1}
 801991e:	1d33      	adds	r3, r6, #4
 8019920:	cb0e      	ldmia	r3, {r1, r2, r3}
 8019922:	6838      	ldr	r0, [r7, #0]
 8019924:	f003 ff78 	bl	801d818 <USB_CoreInit>
 8019928:	4603      	mov	r3, r0
 801992a:	2b00      	cmp	r3, #0
 801992c:	d005      	beq.n	801993a <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 801992e:	687b      	ldr	r3, [r7, #4]
 8019930:	2202      	movs	r2, #2
 8019932:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8019936:	2301      	movs	r3, #1
 8019938:	e0d7      	b.n	8019aea <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 801993a:	687b      	ldr	r3, [r7, #4]
 801993c:	681b      	ldr	r3, [r3, #0]
 801993e:	2100      	movs	r1, #0
 8019940:	4618      	mov	r0, r3
 8019942:	f004 f88f 	bl	801da64 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8019946:	2300      	movs	r3, #0
 8019948:	73fb      	strb	r3, [r7, #15]
 801994a:	e04a      	b.n	80199e2 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 801994c:	7bfa      	ldrb	r2, [r7, #15]
 801994e:	6879      	ldr	r1, [r7, #4]
 8019950:	4613      	mov	r3, r2
 8019952:	00db      	lsls	r3, r3, #3
 8019954:	1a9b      	subs	r3, r3, r2
 8019956:	009b      	lsls	r3, r3, #2
 8019958:	440b      	add	r3, r1
 801995a:	333d      	adds	r3, #61	; 0x3d
 801995c:	2201      	movs	r2, #1
 801995e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8019960:	7bfa      	ldrb	r2, [r7, #15]
 8019962:	6879      	ldr	r1, [r7, #4]
 8019964:	4613      	mov	r3, r2
 8019966:	00db      	lsls	r3, r3, #3
 8019968:	1a9b      	subs	r3, r3, r2
 801996a:	009b      	lsls	r3, r3, #2
 801996c:	440b      	add	r3, r1
 801996e:	333c      	adds	r3, #60	; 0x3c
 8019970:	7bfa      	ldrb	r2, [r7, #15]
 8019972:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8019974:	7bfa      	ldrb	r2, [r7, #15]
 8019976:	7bfb      	ldrb	r3, [r7, #15]
 8019978:	b298      	uxth	r0, r3
 801997a:	6879      	ldr	r1, [r7, #4]
 801997c:	4613      	mov	r3, r2
 801997e:	00db      	lsls	r3, r3, #3
 8019980:	1a9b      	subs	r3, r3, r2
 8019982:	009b      	lsls	r3, r3, #2
 8019984:	440b      	add	r3, r1
 8019986:	3342      	adds	r3, #66	; 0x42
 8019988:	4602      	mov	r2, r0
 801998a:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 801998c:	7bfa      	ldrb	r2, [r7, #15]
 801998e:	6879      	ldr	r1, [r7, #4]
 8019990:	4613      	mov	r3, r2
 8019992:	00db      	lsls	r3, r3, #3
 8019994:	1a9b      	subs	r3, r3, r2
 8019996:	009b      	lsls	r3, r3, #2
 8019998:	440b      	add	r3, r1
 801999a:	333f      	adds	r3, #63	; 0x3f
 801999c:	2200      	movs	r2, #0
 801999e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80199a0:	7bfa      	ldrb	r2, [r7, #15]
 80199a2:	6879      	ldr	r1, [r7, #4]
 80199a4:	4613      	mov	r3, r2
 80199a6:	00db      	lsls	r3, r3, #3
 80199a8:	1a9b      	subs	r3, r3, r2
 80199aa:	009b      	lsls	r3, r3, #2
 80199ac:	440b      	add	r3, r1
 80199ae:	3344      	adds	r3, #68	; 0x44
 80199b0:	2200      	movs	r2, #0
 80199b2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80199b4:	7bfa      	ldrb	r2, [r7, #15]
 80199b6:	6879      	ldr	r1, [r7, #4]
 80199b8:	4613      	mov	r3, r2
 80199ba:	00db      	lsls	r3, r3, #3
 80199bc:	1a9b      	subs	r3, r3, r2
 80199be:	009b      	lsls	r3, r3, #2
 80199c0:	440b      	add	r3, r1
 80199c2:	3348      	adds	r3, #72	; 0x48
 80199c4:	2200      	movs	r2, #0
 80199c6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80199c8:	7bfa      	ldrb	r2, [r7, #15]
 80199ca:	6879      	ldr	r1, [r7, #4]
 80199cc:	4613      	mov	r3, r2
 80199ce:	00db      	lsls	r3, r3, #3
 80199d0:	1a9b      	subs	r3, r3, r2
 80199d2:	009b      	lsls	r3, r3, #2
 80199d4:	440b      	add	r3, r1
 80199d6:	3350      	adds	r3, #80	; 0x50
 80199d8:	2200      	movs	r2, #0
 80199da:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80199dc:	7bfb      	ldrb	r3, [r7, #15]
 80199de:	3301      	adds	r3, #1
 80199e0:	73fb      	strb	r3, [r7, #15]
 80199e2:	7bfa      	ldrb	r2, [r7, #15]
 80199e4:	687b      	ldr	r3, [r7, #4]
 80199e6:	685b      	ldr	r3, [r3, #4]
 80199e8:	429a      	cmp	r2, r3
 80199ea:	d3af      	bcc.n	801994c <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80199ec:	2300      	movs	r3, #0
 80199ee:	73fb      	strb	r3, [r7, #15]
 80199f0:	e044      	b.n	8019a7c <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80199f2:	7bfa      	ldrb	r2, [r7, #15]
 80199f4:	6879      	ldr	r1, [r7, #4]
 80199f6:	4613      	mov	r3, r2
 80199f8:	00db      	lsls	r3, r3, #3
 80199fa:	1a9b      	subs	r3, r3, r2
 80199fc:	009b      	lsls	r3, r3, #2
 80199fe:	440b      	add	r3, r1
 8019a00:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8019a04:	2200      	movs	r2, #0
 8019a06:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8019a08:	7bfa      	ldrb	r2, [r7, #15]
 8019a0a:	6879      	ldr	r1, [r7, #4]
 8019a0c:	4613      	mov	r3, r2
 8019a0e:	00db      	lsls	r3, r3, #3
 8019a10:	1a9b      	subs	r3, r3, r2
 8019a12:	009b      	lsls	r3, r3, #2
 8019a14:	440b      	add	r3, r1
 8019a16:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8019a1a:	7bfa      	ldrb	r2, [r7, #15]
 8019a1c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8019a1e:	7bfa      	ldrb	r2, [r7, #15]
 8019a20:	6879      	ldr	r1, [r7, #4]
 8019a22:	4613      	mov	r3, r2
 8019a24:	00db      	lsls	r3, r3, #3
 8019a26:	1a9b      	subs	r3, r3, r2
 8019a28:	009b      	lsls	r3, r3, #2
 8019a2a:	440b      	add	r3, r1
 8019a2c:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8019a30:	2200      	movs	r2, #0
 8019a32:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8019a34:	7bfa      	ldrb	r2, [r7, #15]
 8019a36:	6879      	ldr	r1, [r7, #4]
 8019a38:	4613      	mov	r3, r2
 8019a3a:	00db      	lsls	r3, r3, #3
 8019a3c:	1a9b      	subs	r3, r3, r2
 8019a3e:	009b      	lsls	r3, r3, #2
 8019a40:	440b      	add	r3, r1
 8019a42:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8019a46:	2200      	movs	r2, #0
 8019a48:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8019a4a:	7bfa      	ldrb	r2, [r7, #15]
 8019a4c:	6879      	ldr	r1, [r7, #4]
 8019a4e:	4613      	mov	r3, r2
 8019a50:	00db      	lsls	r3, r3, #3
 8019a52:	1a9b      	subs	r3, r3, r2
 8019a54:	009b      	lsls	r3, r3, #2
 8019a56:	440b      	add	r3, r1
 8019a58:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8019a5c:	2200      	movs	r2, #0
 8019a5e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8019a60:	7bfa      	ldrb	r2, [r7, #15]
 8019a62:	6879      	ldr	r1, [r7, #4]
 8019a64:	4613      	mov	r3, r2
 8019a66:	00db      	lsls	r3, r3, #3
 8019a68:	1a9b      	subs	r3, r3, r2
 8019a6a:	009b      	lsls	r3, r3, #2
 8019a6c:	440b      	add	r3, r1
 8019a6e:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8019a72:	2200      	movs	r2, #0
 8019a74:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8019a76:	7bfb      	ldrb	r3, [r7, #15]
 8019a78:	3301      	adds	r3, #1
 8019a7a:	73fb      	strb	r3, [r7, #15]
 8019a7c:	7bfa      	ldrb	r2, [r7, #15]
 8019a7e:	687b      	ldr	r3, [r7, #4]
 8019a80:	685b      	ldr	r3, [r3, #4]
 8019a82:	429a      	cmp	r2, r3
 8019a84:	d3b5      	bcc.n	80199f2 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8019a86:	687b      	ldr	r3, [r7, #4]
 8019a88:	681b      	ldr	r3, [r3, #0]
 8019a8a:	603b      	str	r3, [r7, #0]
 8019a8c:	687e      	ldr	r6, [r7, #4]
 8019a8e:	466d      	mov	r5, sp
 8019a90:	f106 0410 	add.w	r4, r6, #16
 8019a94:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8019a96:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8019a98:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8019a9a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8019a9c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8019aa0:	e885 0003 	stmia.w	r5, {r0, r1}
 8019aa4:	1d33      	adds	r3, r6, #4
 8019aa6:	cb0e      	ldmia	r3, {r1, r2, r3}
 8019aa8:	6838      	ldr	r0, [r7, #0]
 8019aaa:	f004 f827 	bl	801dafc <USB_DevInit>
 8019aae:	4603      	mov	r3, r0
 8019ab0:	2b00      	cmp	r3, #0
 8019ab2:	d005      	beq.n	8019ac0 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8019ab4:	687b      	ldr	r3, [r7, #4]
 8019ab6:	2202      	movs	r2, #2
 8019ab8:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8019abc:	2301      	movs	r3, #1
 8019abe:	e014      	b.n	8019aea <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8019ac0:	687b      	ldr	r3, [r7, #4]
 8019ac2:	2200      	movs	r2, #0
 8019ac4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8019ac8:	687b      	ldr	r3, [r7, #4]
 8019aca:	2201      	movs	r2, #1
 8019acc:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8019ad0:	687b      	ldr	r3, [r7, #4]
 8019ad2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019ad4:	2b01      	cmp	r3, #1
 8019ad6:	d102      	bne.n	8019ade <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8019ad8:	6878      	ldr	r0, [r7, #4]
 8019ada:	f001 f8bf 	bl	801ac5c <HAL_PCDEx_ActivateLPM>
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8019ade:	687b      	ldr	r3, [r7, #4]
 8019ae0:	681b      	ldr	r3, [r3, #0]
 8019ae2:	4618      	mov	r0, r3
 8019ae4:	f005 f896 	bl	801ec14 <USB_DevDisconnect>

  return HAL_OK;
 8019ae8:	2300      	movs	r3, #0
}
 8019aea:	4618      	mov	r0, r3
 8019aec:	3714      	adds	r7, #20
 8019aee:	46bd      	mov	sp, r7
 8019af0:	bdf0      	pop	{r4, r5, r6, r7, pc}

08019af2 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8019af2:	b580      	push	{r7, lr}
 8019af4:	b084      	sub	sp, #16
 8019af6:	af00      	add	r7, sp, #0
 8019af8:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8019afa:	687b      	ldr	r3, [r7, #4]
 8019afc:	681b      	ldr	r3, [r3, #0]
 8019afe:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8019b00:	687b      	ldr	r3, [r7, #4]
 8019b02:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8019b06:	2b01      	cmp	r3, #1
 8019b08:	d101      	bne.n	8019b0e <HAL_PCD_Start+0x1c>
 8019b0a:	2302      	movs	r3, #2
 8019b0c:	e020      	b.n	8019b50 <HAL_PCD_Start+0x5e>
 8019b0e:	687b      	ldr	r3, [r7, #4]
 8019b10:	2201      	movs	r2, #1
 8019b12:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8019b16:	687b      	ldr	r3, [r7, #4]
 8019b18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8019b1a:	2b01      	cmp	r3, #1
 8019b1c:	d109      	bne.n	8019b32 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8019b1e:	687b      	ldr	r3, [r7, #4]
 8019b20:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8019b22:	2b01      	cmp	r3, #1
 8019b24:	d005      	beq.n	8019b32 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8019b26:	68fb      	ldr	r3, [r7, #12]
 8019b28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8019b2a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8019b2e:	68fb      	ldr	r3, [r7, #12]
 8019b30:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8019b32:	687b      	ldr	r3, [r7, #4]
 8019b34:	681b      	ldr	r3, [r3, #0]
 8019b36:	4618      	mov	r0, r3
 8019b38:	f003 ff72 	bl	801da20 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8019b3c:	687b      	ldr	r3, [r7, #4]
 8019b3e:	681b      	ldr	r3, [r3, #0]
 8019b40:	4618      	mov	r0, r3
 8019b42:	f005 f846 	bl	801ebd2 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8019b46:	687b      	ldr	r3, [r7, #4]
 8019b48:	2200      	movs	r2, #0
 8019b4a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8019b4e:	2300      	movs	r3, #0
}
 8019b50:	4618      	mov	r0, r3
 8019b52:	3710      	adds	r7, #16
 8019b54:	46bd      	mov	sp, r7
 8019b56:	bd80      	pop	{r7, pc}

08019b58 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8019b58:	b590      	push	{r4, r7, lr}
 8019b5a:	b08d      	sub	sp, #52	; 0x34
 8019b5c:	af00      	add	r7, sp, #0
 8019b5e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8019b60:	687b      	ldr	r3, [r7, #4]
 8019b62:	681b      	ldr	r3, [r3, #0]
 8019b64:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8019b66:	6a3b      	ldr	r3, [r7, #32]
 8019b68:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t temp;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8019b6a:	687b      	ldr	r3, [r7, #4]
 8019b6c:	681b      	ldr	r3, [r3, #0]
 8019b6e:	4618      	mov	r0, r3
 8019b70:	f005 f904 	bl	801ed7c <USB_GetMode>
 8019b74:	4603      	mov	r3, r0
 8019b76:	2b00      	cmp	r3, #0
 8019b78:	f040 83ca 	bne.w	801a310 <HAL_PCD_IRQHandler+0x7b8>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8019b7c:	687b      	ldr	r3, [r7, #4]
 8019b7e:	681b      	ldr	r3, [r3, #0]
 8019b80:	4618      	mov	r0, r3
 8019b82:	f005 f868 	bl	801ec56 <USB_ReadInterrupts>
 8019b86:	4603      	mov	r3, r0
 8019b88:	2b00      	cmp	r3, #0
 8019b8a:	f000 83c0 	beq.w	801a30e <HAL_PCD_IRQHandler+0x7b6>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8019b8e:	687b      	ldr	r3, [r7, #4]
 8019b90:	681b      	ldr	r3, [r3, #0]
 8019b92:	4618      	mov	r0, r3
 8019b94:	f005 f85f 	bl	801ec56 <USB_ReadInterrupts>
 8019b98:	4603      	mov	r3, r0
 8019b9a:	f003 0302 	and.w	r3, r3, #2
 8019b9e:	2b02      	cmp	r3, #2
 8019ba0:	d107      	bne.n	8019bb2 <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8019ba2:	687b      	ldr	r3, [r7, #4]
 8019ba4:	681b      	ldr	r3, [r3, #0]
 8019ba6:	695a      	ldr	r2, [r3, #20]
 8019ba8:	687b      	ldr	r3, [r7, #4]
 8019baa:	681b      	ldr	r3, [r3, #0]
 8019bac:	f002 0202 	and.w	r2, r2, #2
 8019bb0:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8019bb2:	687b      	ldr	r3, [r7, #4]
 8019bb4:	681b      	ldr	r3, [r3, #0]
 8019bb6:	4618      	mov	r0, r3
 8019bb8:	f005 f84d 	bl	801ec56 <USB_ReadInterrupts>
 8019bbc:	4603      	mov	r3, r0
 8019bbe:	f003 0310 	and.w	r3, r3, #16
 8019bc2:	2b10      	cmp	r3, #16
 8019bc4:	d161      	bne.n	8019c8a <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8019bc6:	687b      	ldr	r3, [r7, #4]
 8019bc8:	681b      	ldr	r3, [r3, #0]
 8019bca:	699a      	ldr	r2, [r3, #24]
 8019bcc:	687b      	ldr	r3, [r7, #4]
 8019bce:	681b      	ldr	r3, [r3, #0]
 8019bd0:	f022 0210 	bic.w	r2, r2, #16
 8019bd4:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 8019bd6:	6a3b      	ldr	r3, [r7, #32]
 8019bd8:	6a1b      	ldr	r3, [r3, #32]
 8019bda:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 8019bdc:	69bb      	ldr	r3, [r7, #24]
 8019bde:	f003 020f 	and.w	r2, r3, #15
 8019be2:	4613      	mov	r3, r2
 8019be4:	00db      	lsls	r3, r3, #3
 8019be6:	1a9b      	subs	r3, r3, r2
 8019be8:	009b      	lsls	r3, r3, #2
 8019bea:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8019bee:	687a      	ldr	r2, [r7, #4]
 8019bf0:	4413      	add	r3, r2
 8019bf2:	3304      	adds	r3, #4
 8019bf4:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8019bf6:	69bb      	ldr	r3, [r7, #24]
 8019bf8:	0c5b      	lsrs	r3, r3, #17
 8019bfa:	f003 030f 	and.w	r3, r3, #15
 8019bfe:	2b02      	cmp	r3, #2
 8019c00:	d124      	bne.n	8019c4c <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 8019c02:	69ba      	ldr	r2, [r7, #24]
 8019c04:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8019c08:	4013      	ands	r3, r2
 8019c0a:	2b00      	cmp	r3, #0
 8019c0c:	d035      	beq.n	8019c7a <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8019c0e:	697b      	ldr	r3, [r7, #20]
 8019c10:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 8019c12:	69bb      	ldr	r3, [r7, #24]
 8019c14:	091b      	lsrs	r3, r3, #4
 8019c16:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8019c18:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8019c1c:	b29b      	uxth	r3, r3
 8019c1e:	461a      	mov	r2, r3
 8019c20:	6a38      	ldr	r0, [r7, #32]
 8019c22:	f004 fe84 	bl	801e92e <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8019c26:	697b      	ldr	r3, [r7, #20]
 8019c28:	68da      	ldr	r2, [r3, #12]
 8019c2a:	69bb      	ldr	r3, [r7, #24]
 8019c2c:	091b      	lsrs	r3, r3, #4
 8019c2e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8019c32:	441a      	add	r2, r3
 8019c34:	697b      	ldr	r3, [r7, #20]
 8019c36:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8019c38:	697b      	ldr	r3, [r7, #20]
 8019c3a:	699a      	ldr	r2, [r3, #24]
 8019c3c:	69bb      	ldr	r3, [r7, #24]
 8019c3e:	091b      	lsrs	r3, r3, #4
 8019c40:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8019c44:	441a      	add	r2, r3
 8019c46:	697b      	ldr	r3, [r7, #20]
 8019c48:	619a      	str	r2, [r3, #24]
 8019c4a:	e016      	b.n	8019c7a <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 8019c4c:	69bb      	ldr	r3, [r7, #24]
 8019c4e:	0c5b      	lsrs	r3, r3, #17
 8019c50:	f003 030f 	and.w	r3, r3, #15
 8019c54:	2b06      	cmp	r3, #6
 8019c56:	d110      	bne.n	8019c7a <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8019c58:	687b      	ldr	r3, [r7, #4]
 8019c5a:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8019c5e:	2208      	movs	r2, #8
 8019c60:	4619      	mov	r1, r3
 8019c62:	6a38      	ldr	r0, [r7, #32]
 8019c64:	f004 fe63 	bl	801e92e <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8019c68:	697b      	ldr	r3, [r7, #20]
 8019c6a:	699a      	ldr	r2, [r3, #24]
 8019c6c:	69bb      	ldr	r3, [r7, #24]
 8019c6e:	091b      	lsrs	r3, r3, #4
 8019c70:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8019c74:	441a      	add	r2, r3
 8019c76:	697b      	ldr	r3, [r7, #20]
 8019c78:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8019c7a:	687b      	ldr	r3, [r7, #4]
 8019c7c:	681b      	ldr	r3, [r3, #0]
 8019c7e:	699a      	ldr	r2, [r3, #24]
 8019c80:	687b      	ldr	r3, [r7, #4]
 8019c82:	681b      	ldr	r3, [r3, #0]
 8019c84:	f042 0210 	orr.w	r2, r2, #16
 8019c88:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8019c8a:	687b      	ldr	r3, [r7, #4]
 8019c8c:	681b      	ldr	r3, [r3, #0]
 8019c8e:	4618      	mov	r0, r3
 8019c90:	f004 ffe1 	bl	801ec56 <USB_ReadInterrupts>
 8019c94:	4603      	mov	r3, r0
 8019c96:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8019c9a:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8019c9e:	d16e      	bne.n	8019d7e <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 8019ca0:	2300      	movs	r3, #0
 8019ca2:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8019ca4:	687b      	ldr	r3, [r7, #4]
 8019ca6:	681b      	ldr	r3, [r3, #0]
 8019ca8:	4618      	mov	r0, r3
 8019caa:	f004 ffe7 	bl	801ec7c <USB_ReadDevAllOutEpInterrupt>
 8019cae:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8019cb0:	e062      	b.n	8019d78 <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 8019cb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019cb4:	f003 0301 	and.w	r3, r3, #1
 8019cb8:	2b00      	cmp	r3, #0
 8019cba:	d057      	beq.n	8019d6c <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8019cbc:	687b      	ldr	r3, [r7, #4]
 8019cbe:	681b      	ldr	r3, [r3, #0]
 8019cc0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8019cc2:	b2d2      	uxtb	r2, r2
 8019cc4:	4611      	mov	r1, r2
 8019cc6:	4618      	mov	r0, r3
 8019cc8:	f005 f80c 	bl	801ece4 <USB_ReadDevOutEPInterrupt>
 8019ccc:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8019cce:	693b      	ldr	r3, [r7, #16]
 8019cd0:	f003 0301 	and.w	r3, r3, #1
 8019cd4:	2b00      	cmp	r3, #0
 8019cd6:	d00c      	beq.n	8019cf2 <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8019cd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019cda:	015a      	lsls	r2, r3, #5
 8019cdc:	69fb      	ldr	r3, [r7, #28]
 8019cde:	4413      	add	r3, r2
 8019ce0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8019ce4:	461a      	mov	r2, r3
 8019ce6:	2301      	movs	r3, #1
 8019ce8:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8019cea:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8019cec:	6878      	ldr	r0, [r7, #4]
 8019cee:	f000 fe0b 	bl	801a908 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8019cf2:	693b      	ldr	r3, [r7, #16]
 8019cf4:	f003 0308 	and.w	r3, r3, #8
 8019cf8:	2b00      	cmp	r3, #0
 8019cfa:	d00c      	beq.n	8019d16 <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8019cfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019cfe:	015a      	lsls	r2, r3, #5
 8019d00:	69fb      	ldr	r3, [r7, #28]
 8019d02:	4413      	add	r3, r2
 8019d04:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8019d08:	461a      	mov	r2, r3
 8019d0a:	2308      	movs	r3, #8
 8019d0c:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8019d0e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8019d10:	6878      	ldr	r0, [r7, #4]
 8019d12:	f000 ff05 	bl	801ab20 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8019d16:	693b      	ldr	r3, [r7, #16]
 8019d18:	f003 0310 	and.w	r3, r3, #16
 8019d1c:	2b00      	cmp	r3, #0
 8019d1e:	d008      	beq.n	8019d32 <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8019d20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019d22:	015a      	lsls	r2, r3, #5
 8019d24:	69fb      	ldr	r3, [r7, #28]
 8019d26:	4413      	add	r3, r2
 8019d28:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8019d2c:	461a      	mov	r2, r3
 8019d2e:	2310      	movs	r3, #16
 8019d30:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8019d32:	693b      	ldr	r3, [r7, #16]
 8019d34:	f003 0320 	and.w	r3, r3, #32
 8019d38:	2b00      	cmp	r3, #0
 8019d3a:	d008      	beq.n	8019d4e <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8019d3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019d3e:	015a      	lsls	r2, r3, #5
 8019d40:	69fb      	ldr	r3, [r7, #28]
 8019d42:	4413      	add	r3, r2
 8019d44:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8019d48:	461a      	mov	r2, r3
 8019d4a:	2320      	movs	r3, #32
 8019d4c:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8019d4e:	693b      	ldr	r3, [r7, #16]
 8019d50:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8019d54:	2b00      	cmp	r3, #0
 8019d56:	d009      	beq.n	8019d6c <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8019d58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019d5a:	015a      	lsls	r2, r3, #5
 8019d5c:	69fb      	ldr	r3, [r7, #28]
 8019d5e:	4413      	add	r3, r2
 8019d60:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8019d64:	461a      	mov	r2, r3
 8019d66:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8019d6a:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8019d6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019d6e:	3301      	adds	r3, #1
 8019d70:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8019d72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019d74:	085b      	lsrs	r3, r3, #1
 8019d76:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8019d78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019d7a:	2b00      	cmp	r3, #0
 8019d7c:	d199      	bne.n	8019cb2 <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8019d7e:	687b      	ldr	r3, [r7, #4]
 8019d80:	681b      	ldr	r3, [r3, #0]
 8019d82:	4618      	mov	r0, r3
 8019d84:	f004 ff67 	bl	801ec56 <USB_ReadInterrupts>
 8019d88:	4603      	mov	r3, r0
 8019d8a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8019d8e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8019d92:	f040 80c0 	bne.w	8019f16 <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8019d96:	687b      	ldr	r3, [r7, #4]
 8019d98:	681b      	ldr	r3, [r3, #0]
 8019d9a:	4618      	mov	r0, r3
 8019d9c:	f004 ff88 	bl	801ecb0 <USB_ReadDevAllInEpInterrupt>
 8019da0:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8019da2:	2300      	movs	r3, #0
 8019da4:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8019da6:	e0b2      	b.n	8019f0e <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8019da8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019daa:	f003 0301 	and.w	r3, r3, #1
 8019dae:	2b00      	cmp	r3, #0
 8019db0:	f000 80a7 	beq.w	8019f02 <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8019db4:	687b      	ldr	r3, [r7, #4]
 8019db6:	681b      	ldr	r3, [r3, #0]
 8019db8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8019dba:	b2d2      	uxtb	r2, r2
 8019dbc:	4611      	mov	r1, r2
 8019dbe:	4618      	mov	r0, r3
 8019dc0:	f004 ffae 	bl	801ed20 <USB_ReadDevInEPInterrupt>
 8019dc4:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8019dc6:	693b      	ldr	r3, [r7, #16]
 8019dc8:	f003 0301 	and.w	r3, r3, #1
 8019dcc:	2b00      	cmp	r3, #0
 8019dce:	d057      	beq.n	8019e80 <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8019dd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019dd2:	f003 030f 	and.w	r3, r3, #15
 8019dd6:	2201      	movs	r2, #1
 8019dd8:	fa02 f303 	lsl.w	r3, r2, r3
 8019ddc:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8019dde:	69fb      	ldr	r3, [r7, #28]
 8019de0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8019de4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8019de6:	68fb      	ldr	r3, [r7, #12]
 8019de8:	43db      	mvns	r3, r3
 8019dea:	69f9      	ldr	r1, [r7, #28]
 8019dec:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8019df0:	4013      	ands	r3, r2
 8019df2:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8019df4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019df6:	015a      	lsls	r2, r3, #5
 8019df8:	69fb      	ldr	r3, [r7, #28]
 8019dfa:	4413      	add	r3, r2
 8019dfc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8019e00:	461a      	mov	r2, r3
 8019e02:	2301      	movs	r3, #1
 8019e04:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8019e06:	687b      	ldr	r3, [r7, #4]
 8019e08:	691b      	ldr	r3, [r3, #16]
 8019e0a:	2b01      	cmp	r3, #1
 8019e0c:	d132      	bne.n	8019e74 <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8019e0e:	6879      	ldr	r1, [r7, #4]
 8019e10:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8019e12:	4613      	mov	r3, r2
 8019e14:	00db      	lsls	r3, r3, #3
 8019e16:	1a9b      	subs	r3, r3, r2
 8019e18:	009b      	lsls	r3, r3, #2
 8019e1a:	440b      	add	r3, r1
 8019e1c:	3348      	adds	r3, #72	; 0x48
 8019e1e:	6819      	ldr	r1, [r3, #0]
 8019e20:	6878      	ldr	r0, [r7, #4]
 8019e22:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8019e24:	4613      	mov	r3, r2
 8019e26:	00db      	lsls	r3, r3, #3
 8019e28:	1a9b      	subs	r3, r3, r2
 8019e2a:	009b      	lsls	r3, r3, #2
 8019e2c:	4403      	add	r3, r0
 8019e2e:	3344      	adds	r3, #68	; 0x44
 8019e30:	681b      	ldr	r3, [r3, #0]
 8019e32:	4419      	add	r1, r3
 8019e34:	6878      	ldr	r0, [r7, #4]
 8019e36:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8019e38:	4613      	mov	r3, r2
 8019e3a:	00db      	lsls	r3, r3, #3
 8019e3c:	1a9b      	subs	r3, r3, r2
 8019e3e:	009b      	lsls	r3, r3, #2
 8019e40:	4403      	add	r3, r0
 8019e42:	3348      	adds	r3, #72	; 0x48
 8019e44:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8019e46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019e48:	2b00      	cmp	r3, #0
 8019e4a:	d113      	bne.n	8019e74 <HAL_PCD_IRQHandler+0x31c>
 8019e4c:	6879      	ldr	r1, [r7, #4]
 8019e4e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8019e50:	4613      	mov	r3, r2
 8019e52:	00db      	lsls	r3, r3, #3
 8019e54:	1a9b      	subs	r3, r3, r2
 8019e56:	009b      	lsls	r3, r3, #2
 8019e58:	440b      	add	r3, r1
 8019e5a:	3350      	adds	r3, #80	; 0x50
 8019e5c:	681b      	ldr	r3, [r3, #0]
 8019e5e:	2b00      	cmp	r3, #0
 8019e60:	d108      	bne.n	8019e74 <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8019e62:	687b      	ldr	r3, [r7, #4]
 8019e64:	6818      	ldr	r0, [r3, #0]
 8019e66:	687b      	ldr	r3, [r7, #4]
 8019e68:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8019e6c:	461a      	mov	r2, r3
 8019e6e:	2101      	movs	r1, #1
 8019e70:	f004 ffb6 	bl	801ede0 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8019e74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019e76:	b2db      	uxtb	r3, r3
 8019e78:	4619      	mov	r1, r3
 8019e7a:	6878      	ldr	r0, [r7, #4]
 8019e7c:	f00b fb2d 	bl	80254da <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8019e80:	693b      	ldr	r3, [r7, #16]
 8019e82:	f003 0308 	and.w	r3, r3, #8
 8019e86:	2b00      	cmp	r3, #0
 8019e88:	d008      	beq.n	8019e9c <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8019e8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019e8c:	015a      	lsls	r2, r3, #5
 8019e8e:	69fb      	ldr	r3, [r7, #28]
 8019e90:	4413      	add	r3, r2
 8019e92:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8019e96:	461a      	mov	r2, r3
 8019e98:	2308      	movs	r3, #8
 8019e9a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8019e9c:	693b      	ldr	r3, [r7, #16]
 8019e9e:	f003 0310 	and.w	r3, r3, #16
 8019ea2:	2b00      	cmp	r3, #0
 8019ea4:	d008      	beq.n	8019eb8 <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8019ea6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019ea8:	015a      	lsls	r2, r3, #5
 8019eaa:	69fb      	ldr	r3, [r7, #28]
 8019eac:	4413      	add	r3, r2
 8019eae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8019eb2:	461a      	mov	r2, r3
 8019eb4:	2310      	movs	r3, #16
 8019eb6:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8019eb8:	693b      	ldr	r3, [r7, #16]
 8019eba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8019ebe:	2b00      	cmp	r3, #0
 8019ec0:	d008      	beq.n	8019ed4 <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8019ec2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019ec4:	015a      	lsls	r2, r3, #5
 8019ec6:	69fb      	ldr	r3, [r7, #28]
 8019ec8:	4413      	add	r3, r2
 8019eca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8019ece:	461a      	mov	r2, r3
 8019ed0:	2340      	movs	r3, #64	; 0x40
 8019ed2:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8019ed4:	693b      	ldr	r3, [r7, #16]
 8019ed6:	f003 0302 	and.w	r3, r3, #2
 8019eda:	2b00      	cmp	r3, #0
 8019edc:	d008      	beq.n	8019ef0 <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8019ede:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019ee0:	015a      	lsls	r2, r3, #5
 8019ee2:	69fb      	ldr	r3, [r7, #28]
 8019ee4:	4413      	add	r3, r2
 8019ee6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8019eea:	461a      	mov	r2, r3
 8019eec:	2302      	movs	r3, #2
 8019eee:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8019ef0:	693b      	ldr	r3, [r7, #16]
 8019ef2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8019ef6:	2b00      	cmp	r3, #0
 8019ef8:	d003      	beq.n	8019f02 <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8019efa:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8019efc:	6878      	ldr	r0, [r7, #4]
 8019efe:	f000 fc75 	bl	801a7ec <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8019f02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019f04:	3301      	adds	r3, #1
 8019f06:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8019f08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019f0a:	085b      	lsrs	r3, r3, #1
 8019f0c:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8019f0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019f10:	2b00      	cmp	r3, #0
 8019f12:	f47f af49 	bne.w	8019da8 <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8019f16:	687b      	ldr	r3, [r7, #4]
 8019f18:	681b      	ldr	r3, [r3, #0]
 8019f1a:	4618      	mov	r0, r3
 8019f1c:	f004 fe9b 	bl	801ec56 <USB_ReadInterrupts>
 8019f20:	4603      	mov	r3, r0
 8019f22:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8019f26:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8019f2a:	d122      	bne.n	8019f72 <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8019f2c:	69fb      	ldr	r3, [r7, #28]
 8019f2e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8019f32:	685b      	ldr	r3, [r3, #4]
 8019f34:	69fa      	ldr	r2, [r7, #28]
 8019f36:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8019f3a:	f023 0301 	bic.w	r3, r3, #1
 8019f3e:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8019f40:	687b      	ldr	r3, [r7, #4]
 8019f42:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8019f46:	2b01      	cmp	r3, #1
 8019f48:	d108      	bne.n	8019f5c <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 8019f4a:	687b      	ldr	r3, [r7, #4]
 8019f4c:	2200      	movs	r2, #0
 8019f4e:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8019f52:	2100      	movs	r1, #0
 8019f54:	6878      	ldr	r0, [r7, #4]
 8019f56:	f00b fd2f 	bl	80259b8 <HAL_PCDEx_LPM_Callback>
 8019f5a:	e002      	b.n	8019f62 <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8019f5c:	6878      	ldr	r0, [r7, #4]
 8019f5e:	f00b fb33 	bl	80255c8 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8019f62:	687b      	ldr	r3, [r7, #4]
 8019f64:	681b      	ldr	r3, [r3, #0]
 8019f66:	695a      	ldr	r2, [r3, #20]
 8019f68:	687b      	ldr	r3, [r7, #4]
 8019f6a:	681b      	ldr	r3, [r3, #0]
 8019f6c:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8019f70:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8019f72:	687b      	ldr	r3, [r7, #4]
 8019f74:	681b      	ldr	r3, [r3, #0]
 8019f76:	4618      	mov	r0, r3
 8019f78:	f004 fe6d 	bl	801ec56 <USB_ReadInterrupts>
 8019f7c:	4603      	mov	r3, r0
 8019f7e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8019f82:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8019f86:	d112      	bne.n	8019fae <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8019f88:	69fb      	ldr	r3, [r7, #28]
 8019f8a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8019f8e:	689b      	ldr	r3, [r3, #8]
 8019f90:	f003 0301 	and.w	r3, r3, #1
 8019f94:	2b01      	cmp	r3, #1
 8019f96:	d102      	bne.n	8019f9e <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8019f98:	6878      	ldr	r0, [r7, #4]
 8019f9a:	f00b faef 	bl	802557c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8019f9e:	687b      	ldr	r3, [r7, #4]
 8019fa0:	681b      	ldr	r3, [r3, #0]
 8019fa2:	695a      	ldr	r2, [r3, #20]
 8019fa4:	687b      	ldr	r3, [r7, #4]
 8019fa6:	681b      	ldr	r3, [r3, #0]
 8019fa8:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8019fac:	615a      	str	r2, [r3, #20]
    }
#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 8019fae:	687b      	ldr	r3, [r7, #4]
 8019fb0:	681b      	ldr	r3, [r3, #0]
 8019fb2:	4618      	mov	r0, r3
 8019fb4:	f004 fe4f 	bl	801ec56 <USB_ReadInterrupts>
 8019fb8:	4603      	mov	r3, r0
 8019fba:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8019fbe:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8019fc2:	d121      	bne.n	801a008 <HAL_PCD_IRQHandler+0x4b0>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 8019fc4:	687b      	ldr	r3, [r7, #4]
 8019fc6:	681b      	ldr	r3, [r3, #0]
 8019fc8:	695a      	ldr	r2, [r3, #20]
 8019fca:	687b      	ldr	r3, [r7, #4]
 8019fcc:	681b      	ldr	r3, [r3, #0]
 8019fce:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 8019fd2:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 8019fd4:	687b      	ldr	r3, [r7, #4]
 8019fd6:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8019fda:	2b00      	cmp	r3, #0
 8019fdc:	d111      	bne.n	801a002 <HAL_PCD_IRQHandler+0x4aa>
      {
        hpcd->LPM_State = LPM_L1;
 8019fde:	687b      	ldr	r3, [r7, #4]
 8019fe0:	2201      	movs	r2, #1
 8019fe2:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8019fe6:	687b      	ldr	r3, [r7, #4]
 8019fe8:	681b      	ldr	r3, [r3, #0]
 8019fea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8019fec:	089b      	lsrs	r3, r3, #2
 8019fee:	f003 020f 	and.w	r2, r3, #15
 8019ff2:	687b      	ldr	r3, [r7, #4]
 8019ff4:	f8c3 23f8 	str.w	r2, [r3, #1016]	; 0x3f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8019ff8:	2101      	movs	r1, #1
 8019ffa:	6878      	ldr	r0, [r7, #4]
 8019ffc:	f00b fcdc 	bl	80259b8 <HAL_PCDEx_LPM_Callback>
 801a000:	e002      	b.n	801a008 <HAL_PCD_IRQHandler+0x4b0>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 801a002:	6878      	ldr	r0, [r7, #4]
 801a004:	f00b faba 	bl	802557c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 801a008:	687b      	ldr	r3, [r7, #4]
 801a00a:	681b      	ldr	r3, [r3, #0]
 801a00c:	4618      	mov	r0, r3
 801a00e:	f004 fe22 	bl	801ec56 <USB_ReadInterrupts>
 801a012:	4603      	mov	r3, r0
 801a014:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 801a018:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801a01c:	f040 80c7 	bne.w	801a1ae <HAL_PCD_IRQHandler+0x656>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 801a020:	69fb      	ldr	r3, [r7, #28]
 801a022:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801a026:	685b      	ldr	r3, [r3, #4]
 801a028:	69fa      	ldr	r2, [r7, #28]
 801a02a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 801a02e:	f023 0301 	bic.w	r3, r3, #1
 801a032:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 801a034:	687b      	ldr	r3, [r7, #4]
 801a036:	681b      	ldr	r3, [r3, #0]
 801a038:	2110      	movs	r1, #16
 801a03a:	4618      	mov	r0, r3
 801a03c:	f003 febc 	bl	801ddb8 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 801a040:	2300      	movs	r3, #0
 801a042:	62fb      	str	r3, [r7, #44]	; 0x2c
 801a044:	e056      	b.n	801a0f4 <HAL_PCD_IRQHandler+0x59c>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 801a046:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a048:	015a      	lsls	r2, r3, #5
 801a04a:	69fb      	ldr	r3, [r7, #28]
 801a04c:	4413      	add	r3, r2
 801a04e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801a052:	461a      	mov	r2, r3
 801a054:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 801a058:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 801a05a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a05c:	015a      	lsls	r2, r3, #5
 801a05e:	69fb      	ldr	r3, [r7, #28]
 801a060:	4413      	add	r3, r2
 801a062:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801a066:	681b      	ldr	r3, [r3, #0]
 801a068:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801a06a:	0151      	lsls	r1, r2, #5
 801a06c:	69fa      	ldr	r2, [r7, #28]
 801a06e:	440a      	add	r2, r1
 801a070:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801a074:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 801a078:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 801a07a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a07c:	015a      	lsls	r2, r3, #5
 801a07e:	69fb      	ldr	r3, [r7, #28]
 801a080:	4413      	add	r3, r2
 801a082:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801a086:	681b      	ldr	r3, [r3, #0]
 801a088:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801a08a:	0151      	lsls	r1, r2, #5
 801a08c:	69fa      	ldr	r2, [r7, #28]
 801a08e:	440a      	add	r2, r1
 801a090:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801a094:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 801a098:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 801a09a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a09c:	015a      	lsls	r2, r3, #5
 801a09e:	69fb      	ldr	r3, [r7, #28]
 801a0a0:	4413      	add	r3, r2
 801a0a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801a0a6:	461a      	mov	r2, r3
 801a0a8:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 801a0ac:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 801a0ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a0b0:	015a      	lsls	r2, r3, #5
 801a0b2:	69fb      	ldr	r3, [r7, #28]
 801a0b4:	4413      	add	r3, r2
 801a0b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801a0ba:	681b      	ldr	r3, [r3, #0]
 801a0bc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801a0be:	0151      	lsls	r1, r2, #5
 801a0c0:	69fa      	ldr	r2, [r7, #28]
 801a0c2:	440a      	add	r2, r1
 801a0c4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801a0c8:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 801a0cc:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 801a0ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a0d0:	015a      	lsls	r2, r3, #5
 801a0d2:	69fb      	ldr	r3, [r7, #28]
 801a0d4:	4413      	add	r3, r2
 801a0d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801a0da:	681b      	ldr	r3, [r3, #0]
 801a0dc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801a0de:	0151      	lsls	r1, r2, #5
 801a0e0:	69fa      	ldr	r2, [r7, #28]
 801a0e2:	440a      	add	r2, r1
 801a0e4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801a0e8:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 801a0ec:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 801a0ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a0f0:	3301      	adds	r3, #1
 801a0f2:	62fb      	str	r3, [r7, #44]	; 0x2c
 801a0f4:	687b      	ldr	r3, [r7, #4]
 801a0f6:	685b      	ldr	r3, [r3, #4]
 801a0f8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801a0fa:	429a      	cmp	r2, r3
 801a0fc:	d3a3      	bcc.n	801a046 <HAL_PCD_IRQHandler+0x4ee>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 801a0fe:	69fb      	ldr	r3, [r7, #28]
 801a100:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801a104:	69db      	ldr	r3, [r3, #28]
 801a106:	69fa      	ldr	r2, [r7, #28]
 801a108:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 801a10c:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 801a110:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 801a112:	687b      	ldr	r3, [r7, #4]
 801a114:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801a116:	2b00      	cmp	r3, #0
 801a118:	d016      	beq.n	801a148 <HAL_PCD_IRQHandler+0x5f0>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 801a11a:	69fb      	ldr	r3, [r7, #28]
 801a11c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801a120:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801a124:	69fa      	ldr	r2, [r7, #28]
 801a126:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 801a12a:	f043 030b 	orr.w	r3, r3, #11
 801a12e:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 801a132:	69fb      	ldr	r3, [r7, #28]
 801a134:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801a138:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801a13a:	69fa      	ldr	r2, [r7, #28]
 801a13c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 801a140:	f043 030b 	orr.w	r3, r3, #11
 801a144:	6453      	str	r3, [r2, #68]	; 0x44
 801a146:	e015      	b.n	801a174 <HAL_PCD_IRQHandler+0x61c>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 801a148:	69fb      	ldr	r3, [r7, #28]
 801a14a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801a14e:	695b      	ldr	r3, [r3, #20]
 801a150:	69fa      	ldr	r2, [r7, #28]
 801a152:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 801a156:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 801a15a:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 801a15e:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 801a160:	69fb      	ldr	r3, [r7, #28]
 801a162:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801a166:	691b      	ldr	r3, [r3, #16]
 801a168:	69fa      	ldr	r2, [r7, #28]
 801a16a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 801a16e:	f043 030b 	orr.w	r3, r3, #11
 801a172:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 801a174:	69fb      	ldr	r3, [r7, #28]
 801a176:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801a17a:	681b      	ldr	r3, [r3, #0]
 801a17c:	69fa      	ldr	r2, [r7, #28]
 801a17e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 801a182:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 801a186:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 801a188:	687b      	ldr	r3, [r7, #4]
 801a18a:	6818      	ldr	r0, [r3, #0]
 801a18c:	687b      	ldr	r3, [r7, #4]
 801a18e:	691b      	ldr	r3, [r3, #16]
 801a190:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 801a192:	687b      	ldr	r3, [r7, #4]
 801a194:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 801a198:	461a      	mov	r2, r3
 801a19a:	f004 fe21 	bl	801ede0 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 801a19e:	687b      	ldr	r3, [r7, #4]
 801a1a0:	681b      	ldr	r3, [r3, #0]
 801a1a2:	695a      	ldr	r2, [r3, #20]
 801a1a4:	687b      	ldr	r3, [r7, #4]
 801a1a6:	681b      	ldr	r3, [r3, #0]
 801a1a8:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 801a1ac:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 801a1ae:	687b      	ldr	r3, [r7, #4]
 801a1b0:	681b      	ldr	r3, [r3, #0]
 801a1b2:	4618      	mov	r0, r3
 801a1b4:	f004 fd4f 	bl	801ec56 <USB_ReadInterrupts>
 801a1b8:	4603      	mov	r3, r0
 801a1ba:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 801a1be:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 801a1c2:	d124      	bne.n	801a20e <HAL_PCD_IRQHandler+0x6b6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 801a1c4:	687b      	ldr	r3, [r7, #4]
 801a1c6:	681b      	ldr	r3, [r3, #0]
 801a1c8:	4618      	mov	r0, r3
 801a1ca:	f004 fde5 	bl	801ed98 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 801a1ce:	687b      	ldr	r3, [r7, #4]
 801a1d0:	681b      	ldr	r3, [r3, #0]
 801a1d2:	4618      	mov	r0, r3
 801a1d4:	f003 fe4d 	bl	801de72 <USB_GetDevSpeed>
 801a1d8:	4603      	mov	r3, r0
 801a1da:	461a      	mov	r2, r3
 801a1dc:	687b      	ldr	r3, [r7, #4]
 801a1de:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 801a1e0:	687b      	ldr	r3, [r7, #4]
 801a1e2:	681c      	ldr	r4, [r3, #0]
 801a1e4:	f000 fe94 	bl	801af10 <HAL_RCC_GetHCLKFreq>
 801a1e8:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 801a1ea:	687b      	ldr	r3, [r7, #4]
 801a1ec:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 801a1ee:	b2db      	uxtb	r3, r3
 801a1f0:	461a      	mov	r2, r3
 801a1f2:	4620      	mov	r0, r4
 801a1f4:	f003 fb72 	bl	801d8dc <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 801a1f8:	6878      	ldr	r0, [r7, #4]
 801a1fa:	f00b f996 	bl	802552a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 801a1fe:	687b      	ldr	r3, [r7, #4]
 801a200:	681b      	ldr	r3, [r3, #0]
 801a202:	695a      	ldr	r2, [r3, #20]
 801a204:	687b      	ldr	r3, [r7, #4]
 801a206:	681b      	ldr	r3, [r3, #0]
 801a208:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 801a20c:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 801a20e:	687b      	ldr	r3, [r7, #4]
 801a210:	681b      	ldr	r3, [r3, #0]
 801a212:	4618      	mov	r0, r3
 801a214:	f004 fd1f 	bl	801ec56 <USB_ReadInterrupts>
 801a218:	4603      	mov	r3, r0
 801a21a:	f003 0308 	and.w	r3, r3, #8
 801a21e:	2b08      	cmp	r3, #8
 801a220:	d10a      	bne.n	801a238 <HAL_PCD_IRQHandler+0x6e0>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 801a222:	6878      	ldr	r0, [r7, #4]
 801a224:	f00b f973 	bl	802550e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 801a228:	687b      	ldr	r3, [r7, #4]
 801a22a:	681b      	ldr	r3, [r3, #0]
 801a22c:	695a      	ldr	r2, [r3, #20]
 801a22e:	687b      	ldr	r3, [r7, #4]
 801a230:	681b      	ldr	r3, [r3, #0]
 801a232:	f002 0208 	and.w	r2, r2, #8
 801a236:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 801a238:	687b      	ldr	r3, [r7, #4]
 801a23a:	681b      	ldr	r3, [r3, #0]
 801a23c:	4618      	mov	r0, r3
 801a23e:	f004 fd0a 	bl	801ec56 <USB_ReadInterrupts>
 801a242:	4603      	mov	r3, r0
 801a244:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 801a248:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 801a24c:	d10f      	bne.n	801a26e <HAL_PCD_IRQHandler+0x716>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 801a24e:	2300      	movs	r3, #0
 801a250:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 801a252:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a254:	b2db      	uxtb	r3, r3
 801a256:	4619      	mov	r1, r3
 801a258:	6878      	ldr	r0, [r7, #4]
 801a25a:	f00b f9d5 	bl	8025608 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 801a25e:	687b      	ldr	r3, [r7, #4]
 801a260:	681b      	ldr	r3, [r3, #0]
 801a262:	695a      	ldr	r2, [r3, #20]
 801a264:	687b      	ldr	r3, [r7, #4]
 801a266:	681b      	ldr	r3, [r3, #0]
 801a268:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 801a26c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 801a26e:	687b      	ldr	r3, [r7, #4]
 801a270:	681b      	ldr	r3, [r3, #0]
 801a272:	4618      	mov	r0, r3
 801a274:	f004 fcef 	bl	801ec56 <USB_ReadInterrupts>
 801a278:	4603      	mov	r3, r0
 801a27a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 801a27e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 801a282:	d10f      	bne.n	801a2a4 <HAL_PCD_IRQHandler+0x74c>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 801a284:	2300      	movs	r3, #0
 801a286:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 801a288:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a28a:	b2db      	uxtb	r3, r3
 801a28c:	4619      	mov	r1, r3
 801a28e:	6878      	ldr	r0, [r7, #4]
 801a290:	f00b f9a8 	bl	80255e4 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 801a294:	687b      	ldr	r3, [r7, #4]
 801a296:	681b      	ldr	r3, [r3, #0]
 801a298:	695a      	ldr	r2, [r3, #20]
 801a29a:	687b      	ldr	r3, [r7, #4]
 801a29c:	681b      	ldr	r3, [r3, #0]
 801a29e:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 801a2a2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 801a2a4:	687b      	ldr	r3, [r7, #4]
 801a2a6:	681b      	ldr	r3, [r3, #0]
 801a2a8:	4618      	mov	r0, r3
 801a2aa:	f004 fcd4 	bl	801ec56 <USB_ReadInterrupts>
 801a2ae:	4603      	mov	r3, r0
 801a2b0:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 801a2b4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801a2b8:	d10a      	bne.n	801a2d0 <HAL_PCD_IRQHandler+0x778>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 801a2ba:	6878      	ldr	r0, [r7, #4]
 801a2bc:	f00b f9b6 	bl	802562c <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 801a2c0:	687b      	ldr	r3, [r7, #4]
 801a2c2:	681b      	ldr	r3, [r3, #0]
 801a2c4:	695a      	ldr	r2, [r3, #20]
 801a2c6:	687b      	ldr	r3, [r7, #4]
 801a2c8:	681b      	ldr	r3, [r3, #0]
 801a2ca:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 801a2ce:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 801a2d0:	687b      	ldr	r3, [r7, #4]
 801a2d2:	681b      	ldr	r3, [r3, #0]
 801a2d4:	4618      	mov	r0, r3
 801a2d6:	f004 fcbe 	bl	801ec56 <USB_ReadInterrupts>
 801a2da:	4603      	mov	r3, r0
 801a2dc:	f003 0304 	and.w	r3, r3, #4
 801a2e0:	2b04      	cmp	r3, #4
 801a2e2:	d115      	bne.n	801a310 <HAL_PCD_IRQHandler+0x7b8>
    {
      temp = hpcd->Instance->GOTGINT;
 801a2e4:	687b      	ldr	r3, [r7, #4]
 801a2e6:	681b      	ldr	r3, [r3, #0]
 801a2e8:	685b      	ldr	r3, [r3, #4]
 801a2ea:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 801a2ec:	69bb      	ldr	r3, [r7, #24]
 801a2ee:	f003 0304 	and.w	r3, r3, #4
 801a2f2:	2b00      	cmp	r3, #0
 801a2f4:	d002      	beq.n	801a2fc <HAL_PCD_IRQHandler+0x7a4>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 801a2f6:	6878      	ldr	r0, [r7, #4]
 801a2f8:	f00b f9a6 	bl	8025648 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 801a2fc:	687b      	ldr	r3, [r7, #4]
 801a2fe:	681b      	ldr	r3, [r3, #0]
 801a300:	6859      	ldr	r1, [r3, #4]
 801a302:	687b      	ldr	r3, [r7, #4]
 801a304:	681b      	ldr	r3, [r3, #0]
 801a306:	69ba      	ldr	r2, [r7, #24]
 801a308:	430a      	orrs	r2, r1
 801a30a:	605a      	str	r2, [r3, #4]
 801a30c:	e000      	b.n	801a310 <HAL_PCD_IRQHandler+0x7b8>
      return;
 801a30e:	bf00      	nop
    }
  }
}
 801a310:	3734      	adds	r7, #52	; 0x34
 801a312:	46bd      	mov	sp, r7
 801a314:	bd90      	pop	{r4, r7, pc}

0801a316 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 801a316:	b580      	push	{r7, lr}
 801a318:	b082      	sub	sp, #8
 801a31a:	af00      	add	r7, sp, #0
 801a31c:	6078      	str	r0, [r7, #4]
 801a31e:	460b      	mov	r3, r1
 801a320:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 801a322:	687b      	ldr	r3, [r7, #4]
 801a324:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 801a328:	2b01      	cmp	r3, #1
 801a32a:	d101      	bne.n	801a330 <HAL_PCD_SetAddress+0x1a>
 801a32c:	2302      	movs	r3, #2
 801a32e:	e013      	b.n	801a358 <HAL_PCD_SetAddress+0x42>
 801a330:	687b      	ldr	r3, [r7, #4]
 801a332:	2201      	movs	r2, #1
 801a334:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 801a338:	687b      	ldr	r3, [r7, #4]
 801a33a:	78fa      	ldrb	r2, [r7, #3]
 801a33c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 801a340:	687b      	ldr	r3, [r7, #4]
 801a342:	681b      	ldr	r3, [r3, #0]
 801a344:	78fa      	ldrb	r2, [r7, #3]
 801a346:	4611      	mov	r1, r2
 801a348:	4618      	mov	r0, r3
 801a34a:	f004 fc1c 	bl	801eb86 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 801a34e:	687b      	ldr	r3, [r7, #4]
 801a350:	2200      	movs	r2, #0
 801a352:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 801a356:	2300      	movs	r3, #0
}
 801a358:	4618      	mov	r0, r3
 801a35a:	3708      	adds	r7, #8
 801a35c:	46bd      	mov	sp, r7
 801a35e:	bd80      	pop	{r7, pc}

0801a360 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 801a360:	b580      	push	{r7, lr}
 801a362:	b084      	sub	sp, #16
 801a364:	af00      	add	r7, sp, #0
 801a366:	6078      	str	r0, [r7, #4]
 801a368:	4608      	mov	r0, r1
 801a36a:	4611      	mov	r1, r2
 801a36c:	461a      	mov	r2, r3
 801a36e:	4603      	mov	r3, r0
 801a370:	70fb      	strb	r3, [r7, #3]
 801a372:	460b      	mov	r3, r1
 801a374:	803b      	strh	r3, [r7, #0]
 801a376:	4613      	mov	r3, r2
 801a378:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 801a37a:	2300      	movs	r3, #0
 801a37c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 801a37e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 801a382:	2b00      	cmp	r3, #0
 801a384:	da0f      	bge.n	801a3a6 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 801a386:	78fb      	ldrb	r3, [r7, #3]
 801a388:	f003 020f 	and.w	r2, r3, #15
 801a38c:	4613      	mov	r3, r2
 801a38e:	00db      	lsls	r3, r3, #3
 801a390:	1a9b      	subs	r3, r3, r2
 801a392:	009b      	lsls	r3, r3, #2
 801a394:	3338      	adds	r3, #56	; 0x38
 801a396:	687a      	ldr	r2, [r7, #4]
 801a398:	4413      	add	r3, r2
 801a39a:	3304      	adds	r3, #4
 801a39c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 801a39e:	68fb      	ldr	r3, [r7, #12]
 801a3a0:	2201      	movs	r2, #1
 801a3a2:	705a      	strb	r2, [r3, #1]
 801a3a4:	e00f      	b.n	801a3c6 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 801a3a6:	78fb      	ldrb	r3, [r7, #3]
 801a3a8:	f003 020f 	and.w	r2, r3, #15
 801a3ac:	4613      	mov	r3, r2
 801a3ae:	00db      	lsls	r3, r3, #3
 801a3b0:	1a9b      	subs	r3, r3, r2
 801a3b2:	009b      	lsls	r3, r3, #2
 801a3b4:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 801a3b8:	687a      	ldr	r2, [r7, #4]
 801a3ba:	4413      	add	r3, r2
 801a3bc:	3304      	adds	r3, #4
 801a3be:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 801a3c0:	68fb      	ldr	r3, [r7, #12]
 801a3c2:	2200      	movs	r2, #0
 801a3c4:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 801a3c6:	78fb      	ldrb	r3, [r7, #3]
 801a3c8:	f003 030f 	and.w	r3, r3, #15
 801a3cc:	b2da      	uxtb	r2, r3
 801a3ce:	68fb      	ldr	r3, [r7, #12]
 801a3d0:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 801a3d2:	883a      	ldrh	r2, [r7, #0]
 801a3d4:	68fb      	ldr	r3, [r7, #12]
 801a3d6:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 801a3d8:	68fb      	ldr	r3, [r7, #12]
 801a3da:	78ba      	ldrb	r2, [r7, #2]
 801a3dc:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 801a3de:	68fb      	ldr	r3, [r7, #12]
 801a3e0:	785b      	ldrb	r3, [r3, #1]
 801a3e2:	2b00      	cmp	r3, #0
 801a3e4:	d004      	beq.n	801a3f0 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 801a3e6:	68fb      	ldr	r3, [r7, #12]
 801a3e8:	781b      	ldrb	r3, [r3, #0]
 801a3ea:	b29a      	uxth	r2, r3
 801a3ec:	68fb      	ldr	r3, [r7, #12]
 801a3ee:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 801a3f0:	78bb      	ldrb	r3, [r7, #2]
 801a3f2:	2b02      	cmp	r3, #2
 801a3f4:	d102      	bne.n	801a3fc <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 801a3f6:	68fb      	ldr	r3, [r7, #12]
 801a3f8:	2200      	movs	r2, #0
 801a3fa:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 801a3fc:	687b      	ldr	r3, [r7, #4]
 801a3fe:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 801a402:	2b01      	cmp	r3, #1
 801a404:	d101      	bne.n	801a40a <HAL_PCD_EP_Open+0xaa>
 801a406:	2302      	movs	r3, #2
 801a408:	e00e      	b.n	801a428 <HAL_PCD_EP_Open+0xc8>
 801a40a:	687b      	ldr	r3, [r7, #4]
 801a40c:	2201      	movs	r2, #1
 801a40e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 801a412:	687b      	ldr	r3, [r7, #4]
 801a414:	681b      	ldr	r3, [r3, #0]
 801a416:	68f9      	ldr	r1, [r7, #12]
 801a418:	4618      	mov	r0, r3
 801a41a:	f003 fd4f 	bl	801debc <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 801a41e:	687b      	ldr	r3, [r7, #4]
 801a420:	2200      	movs	r2, #0
 801a422:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 801a426:	7afb      	ldrb	r3, [r7, #11]
}
 801a428:	4618      	mov	r0, r3
 801a42a:	3710      	adds	r7, #16
 801a42c:	46bd      	mov	sp, r7
 801a42e:	bd80      	pop	{r7, pc}

0801a430 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 801a430:	b580      	push	{r7, lr}
 801a432:	b084      	sub	sp, #16
 801a434:	af00      	add	r7, sp, #0
 801a436:	6078      	str	r0, [r7, #4]
 801a438:	460b      	mov	r3, r1
 801a43a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 801a43c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 801a440:	2b00      	cmp	r3, #0
 801a442:	da0f      	bge.n	801a464 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 801a444:	78fb      	ldrb	r3, [r7, #3]
 801a446:	f003 020f 	and.w	r2, r3, #15
 801a44a:	4613      	mov	r3, r2
 801a44c:	00db      	lsls	r3, r3, #3
 801a44e:	1a9b      	subs	r3, r3, r2
 801a450:	009b      	lsls	r3, r3, #2
 801a452:	3338      	adds	r3, #56	; 0x38
 801a454:	687a      	ldr	r2, [r7, #4]
 801a456:	4413      	add	r3, r2
 801a458:	3304      	adds	r3, #4
 801a45a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 801a45c:	68fb      	ldr	r3, [r7, #12]
 801a45e:	2201      	movs	r2, #1
 801a460:	705a      	strb	r2, [r3, #1]
 801a462:	e00f      	b.n	801a484 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 801a464:	78fb      	ldrb	r3, [r7, #3]
 801a466:	f003 020f 	and.w	r2, r3, #15
 801a46a:	4613      	mov	r3, r2
 801a46c:	00db      	lsls	r3, r3, #3
 801a46e:	1a9b      	subs	r3, r3, r2
 801a470:	009b      	lsls	r3, r3, #2
 801a472:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 801a476:	687a      	ldr	r2, [r7, #4]
 801a478:	4413      	add	r3, r2
 801a47a:	3304      	adds	r3, #4
 801a47c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 801a47e:	68fb      	ldr	r3, [r7, #12]
 801a480:	2200      	movs	r2, #0
 801a482:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 801a484:	78fb      	ldrb	r3, [r7, #3]
 801a486:	f003 030f 	and.w	r3, r3, #15
 801a48a:	b2da      	uxtb	r2, r3
 801a48c:	68fb      	ldr	r3, [r7, #12]
 801a48e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 801a490:	687b      	ldr	r3, [r7, #4]
 801a492:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 801a496:	2b01      	cmp	r3, #1
 801a498:	d101      	bne.n	801a49e <HAL_PCD_EP_Close+0x6e>
 801a49a:	2302      	movs	r3, #2
 801a49c:	e00e      	b.n	801a4bc <HAL_PCD_EP_Close+0x8c>
 801a49e:	687b      	ldr	r3, [r7, #4]
 801a4a0:	2201      	movs	r2, #1
 801a4a2:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 801a4a6:	687b      	ldr	r3, [r7, #4]
 801a4a8:	681b      	ldr	r3, [r3, #0]
 801a4aa:	68f9      	ldr	r1, [r7, #12]
 801a4ac:	4618      	mov	r0, r3
 801a4ae:	f003 fd8d 	bl	801dfcc <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 801a4b2:	687b      	ldr	r3, [r7, #4]
 801a4b4:	2200      	movs	r2, #0
 801a4b6:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 801a4ba:	2300      	movs	r3, #0
}
 801a4bc:	4618      	mov	r0, r3
 801a4be:	3710      	adds	r7, #16
 801a4c0:	46bd      	mov	sp, r7
 801a4c2:	bd80      	pop	{r7, pc}

0801a4c4 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 801a4c4:	b580      	push	{r7, lr}
 801a4c6:	b086      	sub	sp, #24
 801a4c8:	af00      	add	r7, sp, #0
 801a4ca:	60f8      	str	r0, [r7, #12]
 801a4cc:	607a      	str	r2, [r7, #4]
 801a4ce:	603b      	str	r3, [r7, #0]
 801a4d0:	460b      	mov	r3, r1
 801a4d2:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 801a4d4:	7afb      	ldrb	r3, [r7, #11]
 801a4d6:	f003 020f 	and.w	r2, r3, #15
 801a4da:	4613      	mov	r3, r2
 801a4dc:	00db      	lsls	r3, r3, #3
 801a4de:	1a9b      	subs	r3, r3, r2
 801a4e0:	009b      	lsls	r3, r3, #2
 801a4e2:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 801a4e6:	68fa      	ldr	r2, [r7, #12]
 801a4e8:	4413      	add	r3, r2
 801a4ea:	3304      	adds	r3, #4
 801a4ec:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 801a4ee:	697b      	ldr	r3, [r7, #20]
 801a4f0:	687a      	ldr	r2, [r7, #4]
 801a4f2:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 801a4f4:	697b      	ldr	r3, [r7, #20]
 801a4f6:	683a      	ldr	r2, [r7, #0]
 801a4f8:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 801a4fa:	697b      	ldr	r3, [r7, #20]
 801a4fc:	2200      	movs	r2, #0
 801a4fe:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 801a500:	697b      	ldr	r3, [r7, #20]
 801a502:	2200      	movs	r2, #0
 801a504:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 801a506:	7afb      	ldrb	r3, [r7, #11]
 801a508:	f003 030f 	and.w	r3, r3, #15
 801a50c:	b2da      	uxtb	r2, r3
 801a50e:	697b      	ldr	r3, [r7, #20]
 801a510:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 801a512:	68fb      	ldr	r3, [r7, #12]
 801a514:	691b      	ldr	r3, [r3, #16]
 801a516:	2b01      	cmp	r3, #1
 801a518:	d102      	bne.n	801a520 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 801a51a:	687a      	ldr	r2, [r7, #4]
 801a51c:	697b      	ldr	r3, [r7, #20]
 801a51e:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 801a520:	7afb      	ldrb	r3, [r7, #11]
 801a522:	f003 030f 	and.w	r3, r3, #15
 801a526:	2b00      	cmp	r3, #0
 801a528:	d109      	bne.n	801a53e <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 801a52a:	68fb      	ldr	r3, [r7, #12]
 801a52c:	6818      	ldr	r0, [r3, #0]
 801a52e:	68fb      	ldr	r3, [r7, #12]
 801a530:	691b      	ldr	r3, [r3, #16]
 801a532:	b2db      	uxtb	r3, r3
 801a534:	461a      	mov	r2, r3
 801a536:	6979      	ldr	r1, [r7, #20]
 801a538:	f004 f868 	bl	801e60c <USB_EP0StartXfer>
 801a53c:	e008      	b.n	801a550 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 801a53e:	68fb      	ldr	r3, [r7, #12]
 801a540:	6818      	ldr	r0, [r3, #0]
 801a542:	68fb      	ldr	r3, [r7, #12]
 801a544:	691b      	ldr	r3, [r3, #16]
 801a546:	b2db      	uxtb	r3, r3
 801a548:	461a      	mov	r2, r3
 801a54a:	6979      	ldr	r1, [r7, #20]
 801a54c:	f003 fe1a 	bl	801e184 <USB_EPStartXfer>
  }

  return HAL_OK;
 801a550:	2300      	movs	r3, #0
}
 801a552:	4618      	mov	r0, r3
 801a554:	3718      	adds	r7, #24
 801a556:	46bd      	mov	sp, r7
 801a558:	bd80      	pop	{r7, pc}

0801a55a <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 801a55a:	b480      	push	{r7}
 801a55c:	b083      	sub	sp, #12
 801a55e:	af00      	add	r7, sp, #0
 801a560:	6078      	str	r0, [r7, #4]
 801a562:	460b      	mov	r3, r1
 801a564:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 801a566:	78fb      	ldrb	r3, [r7, #3]
 801a568:	f003 020f 	and.w	r2, r3, #15
 801a56c:	6879      	ldr	r1, [r7, #4]
 801a56e:	4613      	mov	r3, r2
 801a570:	00db      	lsls	r3, r3, #3
 801a572:	1a9b      	subs	r3, r3, r2
 801a574:	009b      	lsls	r3, r3, #2
 801a576:	440b      	add	r3, r1
 801a578:	f503 7305 	add.w	r3, r3, #532	; 0x214
 801a57c:	681b      	ldr	r3, [r3, #0]
}
 801a57e:	4618      	mov	r0, r3
 801a580:	370c      	adds	r7, #12
 801a582:	46bd      	mov	sp, r7
 801a584:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a588:	4770      	bx	lr

0801a58a <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 801a58a:	b580      	push	{r7, lr}
 801a58c:	b086      	sub	sp, #24
 801a58e:	af00      	add	r7, sp, #0
 801a590:	60f8      	str	r0, [r7, #12]
 801a592:	607a      	str	r2, [r7, #4]
 801a594:	603b      	str	r3, [r7, #0]
 801a596:	460b      	mov	r3, r1
 801a598:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 801a59a:	7afb      	ldrb	r3, [r7, #11]
 801a59c:	f003 020f 	and.w	r2, r3, #15
 801a5a0:	4613      	mov	r3, r2
 801a5a2:	00db      	lsls	r3, r3, #3
 801a5a4:	1a9b      	subs	r3, r3, r2
 801a5a6:	009b      	lsls	r3, r3, #2
 801a5a8:	3338      	adds	r3, #56	; 0x38
 801a5aa:	68fa      	ldr	r2, [r7, #12]
 801a5ac:	4413      	add	r3, r2
 801a5ae:	3304      	adds	r3, #4
 801a5b0:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 801a5b2:	697b      	ldr	r3, [r7, #20]
 801a5b4:	687a      	ldr	r2, [r7, #4]
 801a5b6:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 801a5b8:	697b      	ldr	r3, [r7, #20]
 801a5ba:	683a      	ldr	r2, [r7, #0]
 801a5bc:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 801a5be:	697b      	ldr	r3, [r7, #20]
 801a5c0:	2200      	movs	r2, #0
 801a5c2:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 801a5c4:	697b      	ldr	r3, [r7, #20]
 801a5c6:	2201      	movs	r2, #1
 801a5c8:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 801a5ca:	7afb      	ldrb	r3, [r7, #11]
 801a5cc:	f003 030f 	and.w	r3, r3, #15
 801a5d0:	b2da      	uxtb	r2, r3
 801a5d2:	697b      	ldr	r3, [r7, #20]
 801a5d4:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 801a5d6:	68fb      	ldr	r3, [r7, #12]
 801a5d8:	691b      	ldr	r3, [r3, #16]
 801a5da:	2b01      	cmp	r3, #1
 801a5dc:	d102      	bne.n	801a5e4 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 801a5de:	687a      	ldr	r2, [r7, #4]
 801a5e0:	697b      	ldr	r3, [r7, #20]
 801a5e2:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 801a5e4:	7afb      	ldrb	r3, [r7, #11]
 801a5e6:	f003 030f 	and.w	r3, r3, #15
 801a5ea:	2b00      	cmp	r3, #0
 801a5ec:	d109      	bne.n	801a602 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 801a5ee:	68fb      	ldr	r3, [r7, #12]
 801a5f0:	6818      	ldr	r0, [r3, #0]
 801a5f2:	68fb      	ldr	r3, [r7, #12]
 801a5f4:	691b      	ldr	r3, [r3, #16]
 801a5f6:	b2db      	uxtb	r3, r3
 801a5f8:	461a      	mov	r2, r3
 801a5fa:	6979      	ldr	r1, [r7, #20]
 801a5fc:	f004 f806 	bl	801e60c <USB_EP0StartXfer>
 801a600:	e008      	b.n	801a614 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 801a602:	68fb      	ldr	r3, [r7, #12]
 801a604:	6818      	ldr	r0, [r3, #0]
 801a606:	68fb      	ldr	r3, [r7, #12]
 801a608:	691b      	ldr	r3, [r3, #16]
 801a60a:	b2db      	uxtb	r3, r3
 801a60c:	461a      	mov	r2, r3
 801a60e:	6979      	ldr	r1, [r7, #20]
 801a610:	f003 fdb8 	bl	801e184 <USB_EPStartXfer>
  }

  return HAL_OK;
 801a614:	2300      	movs	r3, #0
}
 801a616:	4618      	mov	r0, r3
 801a618:	3718      	adds	r7, #24
 801a61a:	46bd      	mov	sp, r7
 801a61c:	bd80      	pop	{r7, pc}

0801a61e <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 801a61e:	b580      	push	{r7, lr}
 801a620:	b084      	sub	sp, #16
 801a622:	af00      	add	r7, sp, #0
 801a624:	6078      	str	r0, [r7, #4]
 801a626:	460b      	mov	r3, r1
 801a628:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 801a62a:	78fb      	ldrb	r3, [r7, #3]
 801a62c:	f003 020f 	and.w	r2, r3, #15
 801a630:	687b      	ldr	r3, [r7, #4]
 801a632:	685b      	ldr	r3, [r3, #4]
 801a634:	429a      	cmp	r2, r3
 801a636:	d901      	bls.n	801a63c <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 801a638:	2301      	movs	r3, #1
 801a63a:	e050      	b.n	801a6de <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 801a63c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 801a640:	2b00      	cmp	r3, #0
 801a642:	da0f      	bge.n	801a664 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 801a644:	78fb      	ldrb	r3, [r7, #3]
 801a646:	f003 020f 	and.w	r2, r3, #15
 801a64a:	4613      	mov	r3, r2
 801a64c:	00db      	lsls	r3, r3, #3
 801a64e:	1a9b      	subs	r3, r3, r2
 801a650:	009b      	lsls	r3, r3, #2
 801a652:	3338      	adds	r3, #56	; 0x38
 801a654:	687a      	ldr	r2, [r7, #4]
 801a656:	4413      	add	r3, r2
 801a658:	3304      	adds	r3, #4
 801a65a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 801a65c:	68fb      	ldr	r3, [r7, #12]
 801a65e:	2201      	movs	r2, #1
 801a660:	705a      	strb	r2, [r3, #1]
 801a662:	e00d      	b.n	801a680 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 801a664:	78fa      	ldrb	r2, [r7, #3]
 801a666:	4613      	mov	r3, r2
 801a668:	00db      	lsls	r3, r3, #3
 801a66a:	1a9b      	subs	r3, r3, r2
 801a66c:	009b      	lsls	r3, r3, #2
 801a66e:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 801a672:	687a      	ldr	r2, [r7, #4]
 801a674:	4413      	add	r3, r2
 801a676:	3304      	adds	r3, #4
 801a678:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 801a67a:	68fb      	ldr	r3, [r7, #12]
 801a67c:	2200      	movs	r2, #0
 801a67e:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 801a680:	68fb      	ldr	r3, [r7, #12]
 801a682:	2201      	movs	r2, #1
 801a684:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 801a686:	78fb      	ldrb	r3, [r7, #3]
 801a688:	f003 030f 	and.w	r3, r3, #15
 801a68c:	b2da      	uxtb	r2, r3
 801a68e:	68fb      	ldr	r3, [r7, #12]
 801a690:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 801a692:	687b      	ldr	r3, [r7, #4]
 801a694:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 801a698:	2b01      	cmp	r3, #1
 801a69a:	d101      	bne.n	801a6a0 <HAL_PCD_EP_SetStall+0x82>
 801a69c:	2302      	movs	r3, #2
 801a69e:	e01e      	b.n	801a6de <HAL_PCD_EP_SetStall+0xc0>
 801a6a0:	687b      	ldr	r3, [r7, #4]
 801a6a2:	2201      	movs	r2, #1
 801a6a4:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 801a6a8:	687b      	ldr	r3, [r7, #4]
 801a6aa:	681b      	ldr	r3, [r3, #0]
 801a6ac:	68f9      	ldr	r1, [r7, #12]
 801a6ae:	4618      	mov	r0, r3
 801a6b0:	f004 f995 	bl	801e9de <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 801a6b4:	78fb      	ldrb	r3, [r7, #3]
 801a6b6:	f003 030f 	and.w	r3, r3, #15
 801a6ba:	2b00      	cmp	r3, #0
 801a6bc:	d10a      	bne.n	801a6d4 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 801a6be:	687b      	ldr	r3, [r7, #4]
 801a6c0:	6818      	ldr	r0, [r3, #0]
 801a6c2:	687b      	ldr	r3, [r7, #4]
 801a6c4:	691b      	ldr	r3, [r3, #16]
 801a6c6:	b2d9      	uxtb	r1, r3
 801a6c8:	687b      	ldr	r3, [r7, #4]
 801a6ca:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 801a6ce:	461a      	mov	r2, r3
 801a6d0:	f004 fb86 	bl	801ede0 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 801a6d4:	687b      	ldr	r3, [r7, #4]
 801a6d6:	2200      	movs	r2, #0
 801a6d8:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 801a6dc:	2300      	movs	r3, #0
}
 801a6de:	4618      	mov	r0, r3
 801a6e0:	3710      	adds	r7, #16
 801a6e2:	46bd      	mov	sp, r7
 801a6e4:	bd80      	pop	{r7, pc}

0801a6e6 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 801a6e6:	b580      	push	{r7, lr}
 801a6e8:	b084      	sub	sp, #16
 801a6ea:	af00      	add	r7, sp, #0
 801a6ec:	6078      	str	r0, [r7, #4]
 801a6ee:	460b      	mov	r3, r1
 801a6f0:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 801a6f2:	78fb      	ldrb	r3, [r7, #3]
 801a6f4:	f003 020f 	and.w	r2, r3, #15
 801a6f8:	687b      	ldr	r3, [r7, #4]
 801a6fa:	685b      	ldr	r3, [r3, #4]
 801a6fc:	429a      	cmp	r2, r3
 801a6fe:	d901      	bls.n	801a704 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 801a700:	2301      	movs	r3, #1
 801a702:	e042      	b.n	801a78a <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 801a704:	f997 3003 	ldrsb.w	r3, [r7, #3]
 801a708:	2b00      	cmp	r3, #0
 801a70a:	da0f      	bge.n	801a72c <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 801a70c:	78fb      	ldrb	r3, [r7, #3]
 801a70e:	f003 020f 	and.w	r2, r3, #15
 801a712:	4613      	mov	r3, r2
 801a714:	00db      	lsls	r3, r3, #3
 801a716:	1a9b      	subs	r3, r3, r2
 801a718:	009b      	lsls	r3, r3, #2
 801a71a:	3338      	adds	r3, #56	; 0x38
 801a71c:	687a      	ldr	r2, [r7, #4]
 801a71e:	4413      	add	r3, r2
 801a720:	3304      	adds	r3, #4
 801a722:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 801a724:	68fb      	ldr	r3, [r7, #12]
 801a726:	2201      	movs	r2, #1
 801a728:	705a      	strb	r2, [r3, #1]
 801a72a:	e00f      	b.n	801a74c <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 801a72c:	78fb      	ldrb	r3, [r7, #3]
 801a72e:	f003 020f 	and.w	r2, r3, #15
 801a732:	4613      	mov	r3, r2
 801a734:	00db      	lsls	r3, r3, #3
 801a736:	1a9b      	subs	r3, r3, r2
 801a738:	009b      	lsls	r3, r3, #2
 801a73a:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 801a73e:	687a      	ldr	r2, [r7, #4]
 801a740:	4413      	add	r3, r2
 801a742:	3304      	adds	r3, #4
 801a744:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 801a746:	68fb      	ldr	r3, [r7, #12]
 801a748:	2200      	movs	r2, #0
 801a74a:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 801a74c:	68fb      	ldr	r3, [r7, #12]
 801a74e:	2200      	movs	r2, #0
 801a750:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 801a752:	78fb      	ldrb	r3, [r7, #3]
 801a754:	f003 030f 	and.w	r3, r3, #15
 801a758:	b2da      	uxtb	r2, r3
 801a75a:	68fb      	ldr	r3, [r7, #12]
 801a75c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 801a75e:	687b      	ldr	r3, [r7, #4]
 801a760:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 801a764:	2b01      	cmp	r3, #1
 801a766:	d101      	bne.n	801a76c <HAL_PCD_EP_ClrStall+0x86>
 801a768:	2302      	movs	r3, #2
 801a76a:	e00e      	b.n	801a78a <HAL_PCD_EP_ClrStall+0xa4>
 801a76c:	687b      	ldr	r3, [r7, #4]
 801a76e:	2201      	movs	r2, #1
 801a770:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 801a774:	687b      	ldr	r3, [r7, #4]
 801a776:	681b      	ldr	r3, [r3, #0]
 801a778:	68f9      	ldr	r1, [r7, #12]
 801a77a:	4618      	mov	r0, r3
 801a77c:	f004 f99d 	bl	801eaba <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 801a780:	687b      	ldr	r3, [r7, #4]
 801a782:	2200      	movs	r2, #0
 801a784:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 801a788:	2300      	movs	r3, #0
}
 801a78a:	4618      	mov	r0, r3
 801a78c:	3710      	adds	r7, #16
 801a78e:	46bd      	mov	sp, r7
 801a790:	bd80      	pop	{r7, pc}

0801a792 <HAL_PCD_EP_Flush>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Flush(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 801a792:	b580      	push	{r7, lr}
 801a794:	b082      	sub	sp, #8
 801a796:	af00      	add	r7, sp, #0
 801a798:	6078      	str	r0, [r7, #4]
 801a79a:	460b      	mov	r3, r1
 801a79c:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 801a79e:	687b      	ldr	r3, [r7, #4]
 801a7a0:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 801a7a4:	2b01      	cmp	r3, #1
 801a7a6:	d101      	bne.n	801a7ac <HAL_PCD_EP_Flush+0x1a>
 801a7a8:	2302      	movs	r3, #2
 801a7aa:	e01b      	b.n	801a7e4 <HAL_PCD_EP_Flush+0x52>
 801a7ac:	687b      	ldr	r3, [r7, #4]
 801a7ae:	2201      	movs	r2, #1
 801a7b0:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  if ((ep_addr & 0x80U) == 0x80U)
 801a7b4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 801a7b8:	2b00      	cmp	r3, #0
 801a7ba:	da09      	bge.n	801a7d0 <HAL_PCD_EP_Flush+0x3e>
  {
    (void)USB_FlushTxFifo(hpcd->Instance, (uint32_t)ep_addr & EP_ADDR_MSK);
 801a7bc:	687b      	ldr	r3, [r7, #4]
 801a7be:	681a      	ldr	r2, [r3, #0]
 801a7c0:	78fb      	ldrb	r3, [r7, #3]
 801a7c2:	f003 030f 	and.w	r3, r3, #15
 801a7c6:	4619      	mov	r1, r3
 801a7c8:	4610      	mov	r0, r2
 801a7ca:	f003 faf5 	bl	801ddb8 <USB_FlushTxFifo>
 801a7ce:	e004      	b.n	801a7da <HAL_PCD_EP_Flush+0x48>
  }
  else
  {
    (void)USB_FlushRxFifo(hpcd->Instance);
 801a7d0:	687b      	ldr	r3, [r7, #4]
 801a7d2:	681b      	ldr	r3, [r3, #0]
 801a7d4:	4618      	mov	r0, r3
 801a7d6:	f003 fb13 	bl	801de00 <USB_FlushRxFifo>
  }

  __HAL_UNLOCK(hpcd);
 801a7da:	687b      	ldr	r3, [r7, #4]
 801a7dc:	2200      	movs	r2, #0
 801a7de:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 801a7e2:	2300      	movs	r3, #0
}
 801a7e4:	4618      	mov	r0, r3
 801a7e6:	3708      	adds	r7, #8
 801a7e8:	46bd      	mov	sp, r7
 801a7ea:	bd80      	pop	{r7, pc}

0801a7ec <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 801a7ec:	b580      	push	{r7, lr}
 801a7ee:	b08a      	sub	sp, #40	; 0x28
 801a7f0:	af02      	add	r7, sp, #8
 801a7f2:	6078      	str	r0, [r7, #4]
 801a7f4:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 801a7f6:	687b      	ldr	r3, [r7, #4]
 801a7f8:	681b      	ldr	r3, [r3, #0]
 801a7fa:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801a7fc:	697b      	ldr	r3, [r7, #20]
 801a7fe:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 801a800:	683a      	ldr	r2, [r7, #0]
 801a802:	4613      	mov	r3, r2
 801a804:	00db      	lsls	r3, r3, #3
 801a806:	1a9b      	subs	r3, r3, r2
 801a808:	009b      	lsls	r3, r3, #2
 801a80a:	3338      	adds	r3, #56	; 0x38
 801a80c:	687a      	ldr	r2, [r7, #4]
 801a80e:	4413      	add	r3, r2
 801a810:	3304      	adds	r3, #4
 801a812:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 801a814:	68fb      	ldr	r3, [r7, #12]
 801a816:	699a      	ldr	r2, [r3, #24]
 801a818:	68fb      	ldr	r3, [r7, #12]
 801a81a:	695b      	ldr	r3, [r3, #20]
 801a81c:	429a      	cmp	r2, r3
 801a81e:	d901      	bls.n	801a824 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 801a820:	2301      	movs	r3, #1
 801a822:	e06c      	b.n	801a8fe <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 801a824:	68fb      	ldr	r3, [r7, #12]
 801a826:	695a      	ldr	r2, [r3, #20]
 801a828:	68fb      	ldr	r3, [r7, #12]
 801a82a:	699b      	ldr	r3, [r3, #24]
 801a82c:	1ad3      	subs	r3, r2, r3
 801a82e:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 801a830:	68fb      	ldr	r3, [r7, #12]
 801a832:	689b      	ldr	r3, [r3, #8]
 801a834:	69fa      	ldr	r2, [r7, #28]
 801a836:	429a      	cmp	r2, r3
 801a838:	d902      	bls.n	801a840 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 801a83a:	68fb      	ldr	r3, [r7, #12]
 801a83c:	689b      	ldr	r3, [r3, #8]
 801a83e:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 801a840:	69fb      	ldr	r3, [r7, #28]
 801a842:	3303      	adds	r3, #3
 801a844:	089b      	lsrs	r3, r3, #2
 801a846:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 801a848:	e02b      	b.n	801a8a2 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 801a84a:	68fb      	ldr	r3, [r7, #12]
 801a84c:	695a      	ldr	r2, [r3, #20]
 801a84e:	68fb      	ldr	r3, [r7, #12]
 801a850:	699b      	ldr	r3, [r3, #24]
 801a852:	1ad3      	subs	r3, r2, r3
 801a854:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 801a856:	68fb      	ldr	r3, [r7, #12]
 801a858:	689b      	ldr	r3, [r3, #8]
 801a85a:	69fa      	ldr	r2, [r7, #28]
 801a85c:	429a      	cmp	r2, r3
 801a85e:	d902      	bls.n	801a866 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 801a860:	68fb      	ldr	r3, [r7, #12]
 801a862:	689b      	ldr	r3, [r3, #8]
 801a864:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 801a866:	69fb      	ldr	r3, [r7, #28]
 801a868:	3303      	adds	r3, #3
 801a86a:	089b      	lsrs	r3, r3, #2
 801a86c:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 801a86e:	68fb      	ldr	r3, [r7, #12]
 801a870:	68d9      	ldr	r1, [r3, #12]
 801a872:	683b      	ldr	r3, [r7, #0]
 801a874:	b2da      	uxtb	r2, r3
 801a876:	69fb      	ldr	r3, [r7, #28]
 801a878:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 801a87a:	687b      	ldr	r3, [r7, #4]
 801a87c:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 801a87e:	b2db      	uxtb	r3, r3
 801a880:	9300      	str	r3, [sp, #0]
 801a882:	4603      	mov	r3, r0
 801a884:	6978      	ldr	r0, [r7, #20]
 801a886:	f004 f814 	bl	801e8b2 <USB_WritePacket>

    ep->xfer_buff  += len;
 801a88a:	68fb      	ldr	r3, [r7, #12]
 801a88c:	68da      	ldr	r2, [r3, #12]
 801a88e:	69fb      	ldr	r3, [r7, #28]
 801a890:	441a      	add	r2, r3
 801a892:	68fb      	ldr	r3, [r7, #12]
 801a894:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 801a896:	68fb      	ldr	r3, [r7, #12]
 801a898:	699a      	ldr	r2, [r3, #24]
 801a89a:	69fb      	ldr	r3, [r7, #28]
 801a89c:	441a      	add	r2, r3
 801a89e:	68fb      	ldr	r3, [r7, #12]
 801a8a0:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 801a8a2:	683b      	ldr	r3, [r7, #0]
 801a8a4:	015a      	lsls	r2, r3, #5
 801a8a6:	693b      	ldr	r3, [r7, #16]
 801a8a8:	4413      	add	r3, r2
 801a8aa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801a8ae:	699b      	ldr	r3, [r3, #24]
 801a8b0:	b29b      	uxth	r3, r3
 801a8b2:	69ba      	ldr	r2, [r7, #24]
 801a8b4:	429a      	cmp	r2, r3
 801a8b6:	d809      	bhi.n	801a8cc <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 801a8b8:	68fb      	ldr	r3, [r7, #12]
 801a8ba:	699a      	ldr	r2, [r3, #24]
 801a8bc:	68fb      	ldr	r3, [r7, #12]
 801a8be:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 801a8c0:	429a      	cmp	r2, r3
 801a8c2:	d203      	bcs.n	801a8cc <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 801a8c4:	68fb      	ldr	r3, [r7, #12]
 801a8c6:	695b      	ldr	r3, [r3, #20]
 801a8c8:	2b00      	cmp	r3, #0
 801a8ca:	d1be      	bne.n	801a84a <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 801a8cc:	68fb      	ldr	r3, [r7, #12]
 801a8ce:	695a      	ldr	r2, [r3, #20]
 801a8d0:	68fb      	ldr	r3, [r7, #12]
 801a8d2:	699b      	ldr	r3, [r3, #24]
 801a8d4:	429a      	cmp	r2, r3
 801a8d6:	d811      	bhi.n	801a8fc <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 801a8d8:	683b      	ldr	r3, [r7, #0]
 801a8da:	f003 030f 	and.w	r3, r3, #15
 801a8de:	2201      	movs	r2, #1
 801a8e0:	fa02 f303 	lsl.w	r3, r2, r3
 801a8e4:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 801a8e6:	693b      	ldr	r3, [r7, #16]
 801a8e8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801a8ec:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 801a8ee:	68bb      	ldr	r3, [r7, #8]
 801a8f0:	43db      	mvns	r3, r3
 801a8f2:	6939      	ldr	r1, [r7, #16]
 801a8f4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 801a8f8:	4013      	ands	r3, r2
 801a8fa:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 801a8fc:	2300      	movs	r3, #0
}
 801a8fe:	4618      	mov	r0, r3
 801a900:	3720      	adds	r7, #32
 801a902:	46bd      	mov	sp, r7
 801a904:	bd80      	pop	{r7, pc}
	...

0801a908 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 801a908:	b580      	push	{r7, lr}
 801a90a:	b086      	sub	sp, #24
 801a90c:	af00      	add	r7, sp, #0
 801a90e:	6078      	str	r0, [r7, #4]
 801a910:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 801a912:	687b      	ldr	r3, [r7, #4]
 801a914:	681b      	ldr	r3, [r3, #0]
 801a916:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801a918:	697b      	ldr	r3, [r7, #20]
 801a91a:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 801a91c:	697b      	ldr	r3, [r7, #20]
 801a91e:	333c      	adds	r3, #60	; 0x3c
 801a920:	3304      	adds	r3, #4
 801a922:	681b      	ldr	r3, [r3, #0]
 801a924:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 801a926:	683b      	ldr	r3, [r7, #0]
 801a928:	015a      	lsls	r2, r3, #5
 801a92a:	693b      	ldr	r3, [r7, #16]
 801a92c:	4413      	add	r3, r2
 801a92e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801a932:	689b      	ldr	r3, [r3, #8]
 801a934:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 801a936:	687b      	ldr	r3, [r7, #4]
 801a938:	691b      	ldr	r3, [r3, #16]
 801a93a:	2b01      	cmp	r3, #1
 801a93c:	f040 80a0 	bne.w	801aa80 <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 801a940:	68bb      	ldr	r3, [r7, #8]
 801a942:	f003 0308 	and.w	r3, r3, #8
 801a946:	2b00      	cmp	r3, #0
 801a948:	d015      	beq.n	801a976 <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 801a94a:	68fb      	ldr	r3, [r7, #12]
 801a94c:	4a72      	ldr	r2, [pc, #456]	; (801ab18 <PCD_EP_OutXfrComplete_int+0x210>)
 801a94e:	4293      	cmp	r3, r2
 801a950:	f240 80dd 	bls.w	801ab0e <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 801a954:	68bb      	ldr	r3, [r7, #8]
 801a956:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 801a95a:	2b00      	cmp	r3, #0
 801a95c:	f000 80d7 	beq.w	801ab0e <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 801a960:	683b      	ldr	r3, [r7, #0]
 801a962:	015a      	lsls	r2, r3, #5
 801a964:	693b      	ldr	r3, [r7, #16]
 801a966:	4413      	add	r3, r2
 801a968:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801a96c:	461a      	mov	r2, r3
 801a96e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 801a972:	6093      	str	r3, [r2, #8]
 801a974:	e0cb      	b.n	801ab0e <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 801a976:	68bb      	ldr	r3, [r7, #8]
 801a978:	f003 0320 	and.w	r3, r3, #32
 801a97c:	2b00      	cmp	r3, #0
 801a97e:	d009      	beq.n	801a994 <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 801a980:	683b      	ldr	r3, [r7, #0]
 801a982:	015a      	lsls	r2, r3, #5
 801a984:	693b      	ldr	r3, [r7, #16]
 801a986:	4413      	add	r3, r2
 801a988:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801a98c:	461a      	mov	r2, r3
 801a98e:	2320      	movs	r3, #32
 801a990:	6093      	str	r3, [r2, #8]
 801a992:	e0bc      	b.n	801ab0e <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 801a994:	68bb      	ldr	r3, [r7, #8]
 801a996:	f003 0328 	and.w	r3, r3, #40	; 0x28
 801a99a:	2b00      	cmp	r3, #0
 801a99c:	f040 80b7 	bne.w	801ab0e <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 801a9a0:	68fb      	ldr	r3, [r7, #12]
 801a9a2:	4a5d      	ldr	r2, [pc, #372]	; (801ab18 <PCD_EP_OutXfrComplete_int+0x210>)
 801a9a4:	4293      	cmp	r3, r2
 801a9a6:	d90f      	bls.n	801a9c8 <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 801a9a8:	68bb      	ldr	r3, [r7, #8]
 801a9aa:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 801a9ae:	2b00      	cmp	r3, #0
 801a9b0:	d00a      	beq.n	801a9c8 <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 801a9b2:	683b      	ldr	r3, [r7, #0]
 801a9b4:	015a      	lsls	r2, r3, #5
 801a9b6:	693b      	ldr	r3, [r7, #16]
 801a9b8:	4413      	add	r3, r2
 801a9ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801a9be:	461a      	mov	r2, r3
 801a9c0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 801a9c4:	6093      	str	r3, [r2, #8]
 801a9c6:	e0a2      	b.n	801ab0e <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 801a9c8:	6879      	ldr	r1, [r7, #4]
 801a9ca:	683a      	ldr	r2, [r7, #0]
 801a9cc:	4613      	mov	r3, r2
 801a9ce:	00db      	lsls	r3, r3, #3
 801a9d0:	1a9b      	subs	r3, r3, r2
 801a9d2:	009b      	lsls	r3, r3, #2
 801a9d4:	440b      	add	r3, r1
 801a9d6:	f503 7301 	add.w	r3, r3, #516	; 0x204
 801a9da:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 801a9dc:	683b      	ldr	r3, [r7, #0]
 801a9de:	0159      	lsls	r1, r3, #5
 801a9e0:	693b      	ldr	r3, [r7, #16]
 801a9e2:	440b      	add	r3, r1
 801a9e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801a9e8:	691b      	ldr	r3, [r3, #16]
 801a9ea:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 801a9ee:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 801a9f0:	6878      	ldr	r0, [r7, #4]
 801a9f2:	683a      	ldr	r2, [r7, #0]
 801a9f4:	4613      	mov	r3, r2
 801a9f6:	00db      	lsls	r3, r3, #3
 801a9f8:	1a9b      	subs	r3, r3, r2
 801a9fa:	009b      	lsls	r3, r3, #2
 801a9fc:	4403      	add	r3, r0
 801a9fe:	f503 7305 	add.w	r3, r3, #532	; 0x214
 801aa02:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 801aa04:	6879      	ldr	r1, [r7, #4]
 801aa06:	683a      	ldr	r2, [r7, #0]
 801aa08:	4613      	mov	r3, r2
 801aa0a:	00db      	lsls	r3, r3, #3
 801aa0c:	1a9b      	subs	r3, r3, r2
 801aa0e:	009b      	lsls	r3, r3, #2
 801aa10:	440b      	add	r3, r1
 801aa12:	f503 7302 	add.w	r3, r3, #520	; 0x208
 801aa16:	6819      	ldr	r1, [r3, #0]
 801aa18:	6878      	ldr	r0, [r7, #4]
 801aa1a:	683a      	ldr	r2, [r7, #0]
 801aa1c:	4613      	mov	r3, r2
 801aa1e:	00db      	lsls	r3, r3, #3
 801aa20:	1a9b      	subs	r3, r3, r2
 801aa22:	009b      	lsls	r3, r3, #2
 801aa24:	4403      	add	r3, r0
 801aa26:	f503 7301 	add.w	r3, r3, #516	; 0x204
 801aa2a:	681b      	ldr	r3, [r3, #0]
 801aa2c:	4419      	add	r1, r3
 801aa2e:	6878      	ldr	r0, [r7, #4]
 801aa30:	683a      	ldr	r2, [r7, #0]
 801aa32:	4613      	mov	r3, r2
 801aa34:	00db      	lsls	r3, r3, #3
 801aa36:	1a9b      	subs	r3, r3, r2
 801aa38:	009b      	lsls	r3, r3, #2
 801aa3a:	4403      	add	r3, r0
 801aa3c:	f503 7302 	add.w	r3, r3, #520	; 0x208
 801aa40:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 801aa42:	683b      	ldr	r3, [r7, #0]
 801aa44:	2b00      	cmp	r3, #0
 801aa46:	d114      	bne.n	801aa72 <PCD_EP_OutXfrComplete_int+0x16a>
 801aa48:	6879      	ldr	r1, [r7, #4]
 801aa4a:	683a      	ldr	r2, [r7, #0]
 801aa4c:	4613      	mov	r3, r2
 801aa4e:	00db      	lsls	r3, r3, #3
 801aa50:	1a9b      	subs	r3, r3, r2
 801aa52:	009b      	lsls	r3, r3, #2
 801aa54:	440b      	add	r3, r1
 801aa56:	f503 7304 	add.w	r3, r3, #528	; 0x210
 801aa5a:	681b      	ldr	r3, [r3, #0]
 801aa5c:	2b00      	cmp	r3, #0
 801aa5e:	d108      	bne.n	801aa72 <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 801aa60:	687b      	ldr	r3, [r7, #4]
 801aa62:	6818      	ldr	r0, [r3, #0]
 801aa64:	687b      	ldr	r3, [r7, #4]
 801aa66:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 801aa6a:	461a      	mov	r2, r3
 801aa6c:	2101      	movs	r1, #1
 801aa6e:	f004 f9b7 	bl	801ede0 <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 801aa72:	683b      	ldr	r3, [r7, #0]
 801aa74:	b2db      	uxtb	r3, r3
 801aa76:	4619      	mov	r1, r3
 801aa78:	6878      	ldr	r0, [r7, #4]
 801aa7a:	f00a fd13 	bl	80254a4 <HAL_PCD_DataOutStageCallback>
 801aa7e:	e046      	b.n	801ab0e <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 801aa80:	68fb      	ldr	r3, [r7, #12]
 801aa82:	4a26      	ldr	r2, [pc, #152]	; (801ab1c <PCD_EP_OutXfrComplete_int+0x214>)
 801aa84:	4293      	cmp	r3, r2
 801aa86:	d124      	bne.n	801aad2 <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 801aa88:	68bb      	ldr	r3, [r7, #8]
 801aa8a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 801aa8e:	2b00      	cmp	r3, #0
 801aa90:	d00a      	beq.n	801aaa8 <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 801aa92:	683b      	ldr	r3, [r7, #0]
 801aa94:	015a      	lsls	r2, r3, #5
 801aa96:	693b      	ldr	r3, [r7, #16]
 801aa98:	4413      	add	r3, r2
 801aa9a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801aa9e:	461a      	mov	r2, r3
 801aaa0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 801aaa4:	6093      	str	r3, [r2, #8]
 801aaa6:	e032      	b.n	801ab0e <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 801aaa8:	68bb      	ldr	r3, [r7, #8]
 801aaaa:	f003 0320 	and.w	r3, r3, #32
 801aaae:	2b00      	cmp	r3, #0
 801aab0:	d008      	beq.n	801aac4 <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 801aab2:	683b      	ldr	r3, [r7, #0]
 801aab4:	015a      	lsls	r2, r3, #5
 801aab6:	693b      	ldr	r3, [r7, #16]
 801aab8:	4413      	add	r3, r2
 801aaba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801aabe:	461a      	mov	r2, r3
 801aac0:	2320      	movs	r3, #32
 801aac2:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 801aac4:	683b      	ldr	r3, [r7, #0]
 801aac6:	b2db      	uxtb	r3, r3
 801aac8:	4619      	mov	r1, r3
 801aaca:	6878      	ldr	r0, [r7, #4]
 801aacc:	f00a fcea 	bl	80254a4 <HAL_PCD_DataOutStageCallback>
 801aad0:	e01d      	b.n	801ab0e <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 801aad2:	683b      	ldr	r3, [r7, #0]
 801aad4:	2b00      	cmp	r3, #0
 801aad6:	d114      	bne.n	801ab02 <PCD_EP_OutXfrComplete_int+0x1fa>
 801aad8:	6879      	ldr	r1, [r7, #4]
 801aada:	683a      	ldr	r2, [r7, #0]
 801aadc:	4613      	mov	r3, r2
 801aade:	00db      	lsls	r3, r3, #3
 801aae0:	1a9b      	subs	r3, r3, r2
 801aae2:	009b      	lsls	r3, r3, #2
 801aae4:	440b      	add	r3, r1
 801aae6:	f503 7304 	add.w	r3, r3, #528	; 0x210
 801aaea:	681b      	ldr	r3, [r3, #0]
 801aaec:	2b00      	cmp	r3, #0
 801aaee:	d108      	bne.n	801ab02 <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 801aaf0:	687b      	ldr	r3, [r7, #4]
 801aaf2:	6818      	ldr	r0, [r3, #0]
 801aaf4:	687b      	ldr	r3, [r7, #4]
 801aaf6:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 801aafa:	461a      	mov	r2, r3
 801aafc:	2100      	movs	r1, #0
 801aafe:	f004 f96f 	bl	801ede0 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 801ab02:	683b      	ldr	r3, [r7, #0]
 801ab04:	b2db      	uxtb	r3, r3
 801ab06:	4619      	mov	r1, r3
 801ab08:	6878      	ldr	r0, [r7, #4]
 801ab0a:	f00a fccb 	bl	80254a4 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 801ab0e:	2300      	movs	r3, #0
}
 801ab10:	4618      	mov	r0, r3
 801ab12:	3718      	adds	r7, #24
 801ab14:	46bd      	mov	sp, r7
 801ab16:	bd80      	pop	{r7, pc}
 801ab18:	4f54300a 	.word	0x4f54300a
 801ab1c:	4f54310a 	.word	0x4f54310a

0801ab20 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 801ab20:	b580      	push	{r7, lr}
 801ab22:	b086      	sub	sp, #24
 801ab24:	af00      	add	r7, sp, #0
 801ab26:	6078      	str	r0, [r7, #4]
 801ab28:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 801ab2a:	687b      	ldr	r3, [r7, #4]
 801ab2c:	681b      	ldr	r3, [r3, #0]
 801ab2e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801ab30:	697b      	ldr	r3, [r7, #20]
 801ab32:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 801ab34:	697b      	ldr	r3, [r7, #20]
 801ab36:	333c      	adds	r3, #60	; 0x3c
 801ab38:	3304      	adds	r3, #4
 801ab3a:	681b      	ldr	r3, [r3, #0]
 801ab3c:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 801ab3e:	683b      	ldr	r3, [r7, #0]
 801ab40:	015a      	lsls	r2, r3, #5
 801ab42:	693b      	ldr	r3, [r7, #16]
 801ab44:	4413      	add	r3, r2
 801ab46:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801ab4a:	689b      	ldr	r3, [r3, #8]
 801ab4c:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 801ab4e:	68fb      	ldr	r3, [r7, #12]
 801ab50:	4a15      	ldr	r2, [pc, #84]	; (801aba8 <PCD_EP_OutSetupPacket_int+0x88>)
 801ab52:	4293      	cmp	r3, r2
 801ab54:	d90e      	bls.n	801ab74 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 801ab56:	68bb      	ldr	r3, [r7, #8]
 801ab58:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 801ab5c:	2b00      	cmp	r3, #0
 801ab5e:	d009      	beq.n	801ab74 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 801ab60:	683b      	ldr	r3, [r7, #0]
 801ab62:	015a      	lsls	r2, r3, #5
 801ab64:	693b      	ldr	r3, [r7, #16]
 801ab66:	4413      	add	r3, r2
 801ab68:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801ab6c:	461a      	mov	r2, r3
 801ab6e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 801ab72:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 801ab74:	6878      	ldr	r0, [r7, #4]
 801ab76:	f00a fc83 	bl	8025480 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 801ab7a:	68fb      	ldr	r3, [r7, #12]
 801ab7c:	4a0a      	ldr	r2, [pc, #40]	; (801aba8 <PCD_EP_OutSetupPacket_int+0x88>)
 801ab7e:	4293      	cmp	r3, r2
 801ab80:	d90c      	bls.n	801ab9c <PCD_EP_OutSetupPacket_int+0x7c>
 801ab82:	687b      	ldr	r3, [r7, #4]
 801ab84:	691b      	ldr	r3, [r3, #16]
 801ab86:	2b01      	cmp	r3, #1
 801ab88:	d108      	bne.n	801ab9c <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 801ab8a:	687b      	ldr	r3, [r7, #4]
 801ab8c:	6818      	ldr	r0, [r3, #0]
 801ab8e:	687b      	ldr	r3, [r7, #4]
 801ab90:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 801ab94:	461a      	mov	r2, r3
 801ab96:	2101      	movs	r1, #1
 801ab98:	f004 f922 	bl	801ede0 <USB_EP0_OutStart>
  }

  return HAL_OK;
 801ab9c:	2300      	movs	r3, #0
}
 801ab9e:	4618      	mov	r0, r3
 801aba0:	3718      	adds	r7, #24
 801aba2:	46bd      	mov	sp, r7
 801aba4:	bd80      	pop	{r7, pc}
 801aba6:	bf00      	nop
 801aba8:	4f54300a 	.word	0x4f54300a

0801abac <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 801abac:	b480      	push	{r7}
 801abae:	b085      	sub	sp, #20
 801abb0:	af00      	add	r7, sp, #0
 801abb2:	6078      	str	r0, [r7, #4]
 801abb4:	460b      	mov	r3, r1
 801abb6:	70fb      	strb	r3, [r7, #3]
 801abb8:	4613      	mov	r3, r2
 801abba:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 801abbc:	687b      	ldr	r3, [r7, #4]
 801abbe:	681b      	ldr	r3, [r3, #0]
 801abc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801abc2:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 801abc4:	78fb      	ldrb	r3, [r7, #3]
 801abc6:	2b00      	cmp	r3, #0
 801abc8:	d107      	bne.n	801abda <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 801abca:	883b      	ldrh	r3, [r7, #0]
 801abcc:	0419      	lsls	r1, r3, #16
 801abce:	687b      	ldr	r3, [r7, #4]
 801abd0:	681b      	ldr	r3, [r3, #0]
 801abd2:	68ba      	ldr	r2, [r7, #8]
 801abd4:	430a      	orrs	r2, r1
 801abd6:	629a      	str	r2, [r3, #40]	; 0x28
 801abd8:	e028      	b.n	801ac2c <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 801abda:	687b      	ldr	r3, [r7, #4]
 801abdc:	681b      	ldr	r3, [r3, #0]
 801abde:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801abe0:	0c1b      	lsrs	r3, r3, #16
 801abe2:	68ba      	ldr	r2, [r7, #8]
 801abe4:	4413      	add	r3, r2
 801abe6:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 801abe8:	2300      	movs	r3, #0
 801abea:	73fb      	strb	r3, [r7, #15]
 801abec:	e00d      	b.n	801ac0a <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 801abee:	687b      	ldr	r3, [r7, #4]
 801abf0:	681a      	ldr	r2, [r3, #0]
 801abf2:	7bfb      	ldrb	r3, [r7, #15]
 801abf4:	3340      	adds	r3, #64	; 0x40
 801abf6:	009b      	lsls	r3, r3, #2
 801abf8:	4413      	add	r3, r2
 801abfa:	685b      	ldr	r3, [r3, #4]
 801abfc:	0c1b      	lsrs	r3, r3, #16
 801abfe:	68ba      	ldr	r2, [r7, #8]
 801ac00:	4413      	add	r3, r2
 801ac02:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 801ac04:	7bfb      	ldrb	r3, [r7, #15]
 801ac06:	3301      	adds	r3, #1
 801ac08:	73fb      	strb	r3, [r7, #15]
 801ac0a:	7bfa      	ldrb	r2, [r7, #15]
 801ac0c:	78fb      	ldrb	r3, [r7, #3]
 801ac0e:	3b01      	subs	r3, #1
 801ac10:	429a      	cmp	r2, r3
 801ac12:	d3ec      	bcc.n	801abee <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 801ac14:	883b      	ldrh	r3, [r7, #0]
 801ac16:	0418      	lsls	r0, r3, #16
 801ac18:	687b      	ldr	r3, [r7, #4]
 801ac1a:	6819      	ldr	r1, [r3, #0]
 801ac1c:	78fb      	ldrb	r3, [r7, #3]
 801ac1e:	3b01      	subs	r3, #1
 801ac20:	68ba      	ldr	r2, [r7, #8]
 801ac22:	4302      	orrs	r2, r0
 801ac24:	3340      	adds	r3, #64	; 0x40
 801ac26:	009b      	lsls	r3, r3, #2
 801ac28:	440b      	add	r3, r1
 801ac2a:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 801ac2c:	2300      	movs	r3, #0
}
 801ac2e:	4618      	mov	r0, r3
 801ac30:	3714      	adds	r7, #20
 801ac32:	46bd      	mov	sp, r7
 801ac34:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ac38:	4770      	bx	lr

0801ac3a <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 801ac3a:	b480      	push	{r7}
 801ac3c:	b083      	sub	sp, #12
 801ac3e:	af00      	add	r7, sp, #0
 801ac40:	6078      	str	r0, [r7, #4]
 801ac42:	460b      	mov	r3, r1
 801ac44:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 801ac46:	687b      	ldr	r3, [r7, #4]
 801ac48:	681b      	ldr	r3, [r3, #0]
 801ac4a:	887a      	ldrh	r2, [r7, #2]
 801ac4c:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 801ac4e:	2300      	movs	r3, #0
}
 801ac50:	4618      	mov	r0, r3
 801ac52:	370c      	adds	r7, #12
 801ac54:	46bd      	mov	sp, r7
 801ac56:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ac5a:	4770      	bx	lr

0801ac5c <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 801ac5c:	b480      	push	{r7}
 801ac5e:	b085      	sub	sp, #20
 801ac60:	af00      	add	r7, sp, #0
 801ac62:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 801ac64:	687b      	ldr	r3, [r7, #4]
 801ac66:	681b      	ldr	r3, [r3, #0]
 801ac68:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 801ac6a:	687b      	ldr	r3, [r7, #4]
 801ac6c:	2201      	movs	r2, #1
 801ac6e:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 801ac72:	687b      	ldr	r3, [r7, #4]
 801ac74:	2200      	movs	r2, #0
 801ac76:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 801ac7a:	68fb      	ldr	r3, [r7, #12]
 801ac7c:	699b      	ldr	r3, [r3, #24]
 801ac7e:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 801ac82:	68fb      	ldr	r3, [r7, #12]
 801ac84:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 801ac86:	68fb      	ldr	r3, [r7, #12]
 801ac88:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801ac8a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 801ac8e:	f043 0303 	orr.w	r3, r3, #3
 801ac92:	68fa      	ldr	r2, [r7, #12]
 801ac94:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 801ac96:	2300      	movs	r3, #0
}
 801ac98:	4618      	mov	r0, r3
 801ac9a:	3714      	adds	r7, #20
 801ac9c:	46bd      	mov	sp, r7
 801ac9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801aca2:	4770      	bx	lr

0801aca4 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 801aca4:	b580      	push	{r7, lr}
 801aca6:	b082      	sub	sp, #8
 801aca8:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 801acaa:	2300      	movs	r3, #0
 801acac:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 801acae:	2300      	movs	r3, #0
 801acb0:	603b      	str	r3, [r7, #0]
 801acb2:	4b20      	ldr	r3, [pc, #128]	; (801ad34 <HAL_PWREx_EnableOverDrive+0x90>)
 801acb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801acb6:	4a1f      	ldr	r2, [pc, #124]	; (801ad34 <HAL_PWREx_EnableOverDrive+0x90>)
 801acb8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 801acbc:	6413      	str	r3, [r2, #64]	; 0x40
 801acbe:	4b1d      	ldr	r3, [pc, #116]	; (801ad34 <HAL_PWREx_EnableOverDrive+0x90>)
 801acc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801acc2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 801acc6:	603b      	str	r3, [r7, #0]
 801acc8:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 801acca:	4b1b      	ldr	r3, [pc, #108]	; (801ad38 <HAL_PWREx_EnableOverDrive+0x94>)
 801accc:	2201      	movs	r2, #1
 801acce:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 801acd0:	f7fd f9e8 	bl	80180a4 <HAL_GetTick>
 801acd4:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 801acd6:	e009      	b.n	801acec <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 801acd8:	f7fd f9e4 	bl	80180a4 <HAL_GetTick>
 801acdc:	4602      	mov	r2, r0
 801acde:	687b      	ldr	r3, [r7, #4]
 801ace0:	1ad3      	subs	r3, r2, r3
 801ace2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 801ace6:	d901      	bls.n	801acec <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 801ace8:	2303      	movs	r3, #3
 801acea:	e01f      	b.n	801ad2c <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 801acec:	4b13      	ldr	r3, [pc, #76]	; (801ad3c <HAL_PWREx_EnableOverDrive+0x98>)
 801acee:	685b      	ldr	r3, [r3, #4]
 801acf0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 801acf4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801acf8:	d1ee      	bne.n	801acd8 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 801acfa:	4b11      	ldr	r3, [pc, #68]	; (801ad40 <HAL_PWREx_EnableOverDrive+0x9c>)
 801acfc:	2201      	movs	r2, #1
 801acfe:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 801ad00:	f7fd f9d0 	bl	80180a4 <HAL_GetTick>
 801ad04:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 801ad06:	e009      	b.n	801ad1c <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 801ad08:	f7fd f9cc 	bl	80180a4 <HAL_GetTick>
 801ad0c:	4602      	mov	r2, r0
 801ad0e:	687b      	ldr	r3, [r7, #4]
 801ad10:	1ad3      	subs	r3, r2, r3
 801ad12:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 801ad16:	d901      	bls.n	801ad1c <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 801ad18:	2303      	movs	r3, #3
 801ad1a:	e007      	b.n	801ad2c <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 801ad1c:	4b07      	ldr	r3, [pc, #28]	; (801ad3c <HAL_PWREx_EnableOverDrive+0x98>)
 801ad1e:	685b      	ldr	r3, [r3, #4]
 801ad20:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801ad24:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 801ad28:	d1ee      	bne.n	801ad08 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 801ad2a:	2300      	movs	r3, #0
}
 801ad2c:	4618      	mov	r0, r3
 801ad2e:	3708      	adds	r7, #8
 801ad30:	46bd      	mov	sp, r7
 801ad32:	bd80      	pop	{r7, pc}
 801ad34:	40023800 	.word	0x40023800
 801ad38:	420e0040 	.word	0x420e0040
 801ad3c:	40007000 	.word	0x40007000
 801ad40:	420e0044 	.word	0x420e0044

0801ad44 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 801ad44:	b580      	push	{r7, lr}
 801ad46:	b084      	sub	sp, #16
 801ad48:	af00      	add	r7, sp, #0
 801ad4a:	6078      	str	r0, [r7, #4]
 801ad4c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 801ad4e:	687b      	ldr	r3, [r7, #4]
 801ad50:	2b00      	cmp	r3, #0
 801ad52:	d101      	bne.n	801ad58 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 801ad54:	2301      	movs	r3, #1
 801ad56:	e0cc      	b.n	801aef2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 801ad58:	4b68      	ldr	r3, [pc, #416]	; (801aefc <HAL_RCC_ClockConfig+0x1b8>)
 801ad5a:	681b      	ldr	r3, [r3, #0]
 801ad5c:	f003 030f 	and.w	r3, r3, #15
 801ad60:	683a      	ldr	r2, [r7, #0]
 801ad62:	429a      	cmp	r2, r3
 801ad64:	d90c      	bls.n	801ad80 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 801ad66:	4b65      	ldr	r3, [pc, #404]	; (801aefc <HAL_RCC_ClockConfig+0x1b8>)
 801ad68:	683a      	ldr	r2, [r7, #0]
 801ad6a:	b2d2      	uxtb	r2, r2
 801ad6c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 801ad6e:	4b63      	ldr	r3, [pc, #396]	; (801aefc <HAL_RCC_ClockConfig+0x1b8>)
 801ad70:	681b      	ldr	r3, [r3, #0]
 801ad72:	f003 030f 	and.w	r3, r3, #15
 801ad76:	683a      	ldr	r2, [r7, #0]
 801ad78:	429a      	cmp	r2, r3
 801ad7a:	d001      	beq.n	801ad80 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 801ad7c:	2301      	movs	r3, #1
 801ad7e:	e0b8      	b.n	801aef2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 801ad80:	687b      	ldr	r3, [r7, #4]
 801ad82:	681b      	ldr	r3, [r3, #0]
 801ad84:	f003 0302 	and.w	r3, r3, #2
 801ad88:	2b00      	cmp	r3, #0
 801ad8a:	d020      	beq.n	801adce <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 801ad8c:	687b      	ldr	r3, [r7, #4]
 801ad8e:	681b      	ldr	r3, [r3, #0]
 801ad90:	f003 0304 	and.w	r3, r3, #4
 801ad94:	2b00      	cmp	r3, #0
 801ad96:	d005      	beq.n	801ada4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 801ad98:	4b59      	ldr	r3, [pc, #356]	; (801af00 <HAL_RCC_ClockConfig+0x1bc>)
 801ad9a:	689b      	ldr	r3, [r3, #8]
 801ad9c:	4a58      	ldr	r2, [pc, #352]	; (801af00 <HAL_RCC_ClockConfig+0x1bc>)
 801ad9e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 801ada2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 801ada4:	687b      	ldr	r3, [r7, #4]
 801ada6:	681b      	ldr	r3, [r3, #0]
 801ada8:	f003 0308 	and.w	r3, r3, #8
 801adac:	2b00      	cmp	r3, #0
 801adae:	d005      	beq.n	801adbc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 801adb0:	4b53      	ldr	r3, [pc, #332]	; (801af00 <HAL_RCC_ClockConfig+0x1bc>)
 801adb2:	689b      	ldr	r3, [r3, #8]
 801adb4:	4a52      	ldr	r2, [pc, #328]	; (801af00 <HAL_RCC_ClockConfig+0x1bc>)
 801adb6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 801adba:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 801adbc:	4b50      	ldr	r3, [pc, #320]	; (801af00 <HAL_RCC_ClockConfig+0x1bc>)
 801adbe:	689b      	ldr	r3, [r3, #8]
 801adc0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 801adc4:	687b      	ldr	r3, [r7, #4]
 801adc6:	689b      	ldr	r3, [r3, #8]
 801adc8:	494d      	ldr	r1, [pc, #308]	; (801af00 <HAL_RCC_ClockConfig+0x1bc>)
 801adca:	4313      	orrs	r3, r2
 801adcc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 801adce:	687b      	ldr	r3, [r7, #4]
 801add0:	681b      	ldr	r3, [r3, #0]
 801add2:	f003 0301 	and.w	r3, r3, #1
 801add6:	2b00      	cmp	r3, #0
 801add8:	d044      	beq.n	801ae64 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 801adda:	687b      	ldr	r3, [r7, #4]
 801addc:	685b      	ldr	r3, [r3, #4]
 801adde:	2b01      	cmp	r3, #1
 801ade0:	d107      	bne.n	801adf2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 801ade2:	4b47      	ldr	r3, [pc, #284]	; (801af00 <HAL_RCC_ClockConfig+0x1bc>)
 801ade4:	681b      	ldr	r3, [r3, #0]
 801ade6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801adea:	2b00      	cmp	r3, #0
 801adec:	d119      	bne.n	801ae22 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 801adee:	2301      	movs	r3, #1
 801adf0:	e07f      	b.n	801aef2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 801adf2:	687b      	ldr	r3, [r7, #4]
 801adf4:	685b      	ldr	r3, [r3, #4]
 801adf6:	2b02      	cmp	r3, #2
 801adf8:	d003      	beq.n	801ae02 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 801adfa:	687b      	ldr	r3, [r7, #4]
 801adfc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 801adfe:	2b03      	cmp	r3, #3
 801ae00:	d107      	bne.n	801ae12 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 801ae02:	4b3f      	ldr	r3, [pc, #252]	; (801af00 <HAL_RCC_ClockConfig+0x1bc>)
 801ae04:	681b      	ldr	r3, [r3, #0]
 801ae06:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 801ae0a:	2b00      	cmp	r3, #0
 801ae0c:	d109      	bne.n	801ae22 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 801ae0e:	2301      	movs	r3, #1
 801ae10:	e06f      	b.n	801aef2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 801ae12:	4b3b      	ldr	r3, [pc, #236]	; (801af00 <HAL_RCC_ClockConfig+0x1bc>)
 801ae14:	681b      	ldr	r3, [r3, #0]
 801ae16:	f003 0302 	and.w	r3, r3, #2
 801ae1a:	2b00      	cmp	r3, #0
 801ae1c:	d101      	bne.n	801ae22 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 801ae1e:	2301      	movs	r3, #1
 801ae20:	e067      	b.n	801aef2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 801ae22:	4b37      	ldr	r3, [pc, #220]	; (801af00 <HAL_RCC_ClockConfig+0x1bc>)
 801ae24:	689b      	ldr	r3, [r3, #8]
 801ae26:	f023 0203 	bic.w	r2, r3, #3
 801ae2a:	687b      	ldr	r3, [r7, #4]
 801ae2c:	685b      	ldr	r3, [r3, #4]
 801ae2e:	4934      	ldr	r1, [pc, #208]	; (801af00 <HAL_RCC_ClockConfig+0x1bc>)
 801ae30:	4313      	orrs	r3, r2
 801ae32:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 801ae34:	f7fd f936 	bl	80180a4 <HAL_GetTick>
 801ae38:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 801ae3a:	e00a      	b.n	801ae52 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 801ae3c:	f7fd f932 	bl	80180a4 <HAL_GetTick>
 801ae40:	4602      	mov	r2, r0
 801ae42:	68fb      	ldr	r3, [r7, #12]
 801ae44:	1ad3      	subs	r3, r2, r3
 801ae46:	f241 3288 	movw	r2, #5000	; 0x1388
 801ae4a:	4293      	cmp	r3, r2
 801ae4c:	d901      	bls.n	801ae52 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 801ae4e:	2303      	movs	r3, #3
 801ae50:	e04f      	b.n	801aef2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 801ae52:	4b2b      	ldr	r3, [pc, #172]	; (801af00 <HAL_RCC_ClockConfig+0x1bc>)
 801ae54:	689b      	ldr	r3, [r3, #8]
 801ae56:	f003 020c 	and.w	r2, r3, #12
 801ae5a:	687b      	ldr	r3, [r7, #4]
 801ae5c:	685b      	ldr	r3, [r3, #4]
 801ae5e:	009b      	lsls	r3, r3, #2
 801ae60:	429a      	cmp	r2, r3
 801ae62:	d1eb      	bne.n	801ae3c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 801ae64:	4b25      	ldr	r3, [pc, #148]	; (801aefc <HAL_RCC_ClockConfig+0x1b8>)
 801ae66:	681b      	ldr	r3, [r3, #0]
 801ae68:	f003 030f 	and.w	r3, r3, #15
 801ae6c:	683a      	ldr	r2, [r7, #0]
 801ae6e:	429a      	cmp	r2, r3
 801ae70:	d20c      	bcs.n	801ae8c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 801ae72:	4b22      	ldr	r3, [pc, #136]	; (801aefc <HAL_RCC_ClockConfig+0x1b8>)
 801ae74:	683a      	ldr	r2, [r7, #0]
 801ae76:	b2d2      	uxtb	r2, r2
 801ae78:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 801ae7a:	4b20      	ldr	r3, [pc, #128]	; (801aefc <HAL_RCC_ClockConfig+0x1b8>)
 801ae7c:	681b      	ldr	r3, [r3, #0]
 801ae7e:	f003 030f 	and.w	r3, r3, #15
 801ae82:	683a      	ldr	r2, [r7, #0]
 801ae84:	429a      	cmp	r2, r3
 801ae86:	d001      	beq.n	801ae8c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 801ae88:	2301      	movs	r3, #1
 801ae8a:	e032      	b.n	801aef2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 801ae8c:	687b      	ldr	r3, [r7, #4]
 801ae8e:	681b      	ldr	r3, [r3, #0]
 801ae90:	f003 0304 	and.w	r3, r3, #4
 801ae94:	2b00      	cmp	r3, #0
 801ae96:	d008      	beq.n	801aeaa <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 801ae98:	4b19      	ldr	r3, [pc, #100]	; (801af00 <HAL_RCC_ClockConfig+0x1bc>)
 801ae9a:	689b      	ldr	r3, [r3, #8]
 801ae9c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 801aea0:	687b      	ldr	r3, [r7, #4]
 801aea2:	68db      	ldr	r3, [r3, #12]
 801aea4:	4916      	ldr	r1, [pc, #88]	; (801af00 <HAL_RCC_ClockConfig+0x1bc>)
 801aea6:	4313      	orrs	r3, r2
 801aea8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 801aeaa:	687b      	ldr	r3, [r7, #4]
 801aeac:	681b      	ldr	r3, [r3, #0]
 801aeae:	f003 0308 	and.w	r3, r3, #8
 801aeb2:	2b00      	cmp	r3, #0
 801aeb4:	d009      	beq.n	801aeca <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 801aeb6:	4b12      	ldr	r3, [pc, #72]	; (801af00 <HAL_RCC_ClockConfig+0x1bc>)
 801aeb8:	689b      	ldr	r3, [r3, #8]
 801aeba:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 801aebe:	687b      	ldr	r3, [r7, #4]
 801aec0:	691b      	ldr	r3, [r3, #16]
 801aec2:	00db      	lsls	r3, r3, #3
 801aec4:	490e      	ldr	r1, [pc, #56]	; (801af00 <HAL_RCC_ClockConfig+0x1bc>)
 801aec6:	4313      	orrs	r3, r2
 801aec8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 801aeca:	f000 fb57 	bl	801b57c <HAL_RCC_GetSysClockFreq>
 801aece:	4602      	mov	r2, r0
 801aed0:	4b0b      	ldr	r3, [pc, #44]	; (801af00 <HAL_RCC_ClockConfig+0x1bc>)
 801aed2:	689b      	ldr	r3, [r3, #8]
 801aed4:	091b      	lsrs	r3, r3, #4
 801aed6:	f003 030f 	and.w	r3, r3, #15
 801aeda:	490a      	ldr	r1, [pc, #40]	; (801af04 <HAL_RCC_ClockConfig+0x1c0>)
 801aedc:	5ccb      	ldrb	r3, [r1, r3]
 801aede:	fa22 f303 	lsr.w	r3, r2, r3
 801aee2:	4a09      	ldr	r2, [pc, #36]	; (801af08 <HAL_RCC_ClockConfig+0x1c4>)
 801aee4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 801aee6:	4b09      	ldr	r3, [pc, #36]	; (801af0c <HAL_RCC_ClockConfig+0x1c8>)
 801aee8:	681b      	ldr	r3, [r3, #0]
 801aeea:	4618      	mov	r0, r3
 801aeec:	f7fd f896 	bl	801801c <HAL_InitTick>

  return HAL_OK;
 801aef0:	2300      	movs	r3, #0
}
 801aef2:	4618      	mov	r0, r3
 801aef4:	3710      	adds	r7, #16
 801aef6:	46bd      	mov	sp, r7
 801aef8:	bd80      	pop	{r7, pc}
 801aefa:	bf00      	nop
 801aefc:	40023c00 	.word	0x40023c00
 801af00:	40023800 	.word	0x40023800
 801af04:	080023ec 	.word	0x080023ec
 801af08:	20000564 	.word	0x20000564
 801af0c:	20000568 	.word	0x20000568

0801af10 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 801af10:	b480      	push	{r7}
 801af12:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 801af14:	4b03      	ldr	r3, [pc, #12]	; (801af24 <HAL_RCC_GetHCLKFreq+0x14>)
 801af16:	681b      	ldr	r3, [r3, #0]
}
 801af18:	4618      	mov	r0, r3
 801af1a:	46bd      	mov	sp, r7
 801af1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801af20:	4770      	bx	lr
 801af22:	bf00      	nop
 801af24:	20000564 	.word	0x20000564

0801af28 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 801af28:	b580      	push	{r7, lr}
 801af2a:	b08c      	sub	sp, #48	; 0x30
 801af2c:	af00      	add	r7, sp, #0
 801af2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 801af30:	2300      	movs	r3, #0
 801af32:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmpreg1 = 0U;
 801af34:	2300      	movs	r3, #0
 801af36:	623b      	str	r3, [r7, #32]
  uint32_t plli2sp = 0U;
 801af38:	2300      	movs	r3, #0
 801af3a:	61fb      	str	r3, [r7, #28]
  uint32_t plli2sq = 0U;
 801af3c:	2300      	movs	r3, #0
 801af3e:	61bb      	str	r3, [r7, #24]
  uint32_t plli2sr = 0U;
 801af40:	2300      	movs	r3, #0
 801af42:	617b      	str	r3, [r7, #20]
  uint32_t pllsaip = 0U;
 801af44:	2300      	movs	r3, #0
 801af46:	613b      	str	r3, [r7, #16]
  uint32_t pllsaiq = 0U;
 801af48:	2300      	movs	r3, #0
 801af4a:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0U;
 801af4c:	2300      	movs	r3, #0
 801af4e:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t pllsaiused = 0U;
 801af50:	2300      	movs	r3, #0
 801af52:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the peripheral clock selection parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------ I2S APB1 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 801af54:	687b      	ldr	r3, [r7, #4]
 801af56:	681b      	ldr	r3, [r3, #0]
 801af58:	f003 0301 	and.w	r3, r3, #1
 801af5c:	2b00      	cmp	r3, #0
 801af5e:	d010      	beq.n	801af82 <HAL_RCCEx_PeriphCLKConfig+0x5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB1CLKSOURCE(PeriphClkInit->I2sApb1ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 801af60:	4b6f      	ldr	r3, [pc, #444]	; (801b120 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 801af62:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801af66:	f023 62c0 	bic.w	r2, r3, #100663296	; 0x6000000
 801af6a:	687b      	ldr	r3, [r7, #4]
 801af6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801af6e:	496c      	ldr	r1, [pc, #432]	; (801b120 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 801af70:	4313      	orrs	r3, r2
 801af72:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
 801af76:	687b      	ldr	r3, [r7, #4]
 801af78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801af7a:	2b00      	cmp	r3, #0
 801af7c:	d101      	bne.n	801af82 <HAL_RCCEx_PeriphCLKConfig+0x5a>
    {
      plli2sused = 1U;
 801af7e:	2301      	movs	r3, #1
 801af80:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- I2S APB2 configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == (RCC_PERIPHCLK_I2S_APB2))
 801af82:	687b      	ldr	r3, [r7, #4]
 801af84:	681b      	ldr	r3, [r3, #0]
 801af86:	f003 0302 	and.w	r3, r3, #2
 801af8a:	2b00      	cmp	r3, #0
 801af8c:	d010      	beq.n	801afb0 <HAL_RCCEx_PeriphCLKConfig+0x88>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB2CLKSOURCE(PeriphClkInit->I2sApb2ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 801af8e:	4b64      	ldr	r3, [pc, #400]	; (801b120 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 801af90:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801af94:	f023 52c0 	bic.w	r2, r3, #402653184	; 0x18000000
 801af98:	687b      	ldr	r3, [r7, #4]
 801af9a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801af9c:	4960      	ldr	r1, [pc, #384]	; (801b120 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 801af9e:	4313      	orrs	r3, r2
 801afa0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)
 801afa4:	687b      	ldr	r3, [r7, #4]
 801afa6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801afa8:	2b00      	cmp	r3, #0
 801afaa:	d101      	bne.n	801afb0 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      plli2sused = 1U;
 801afac:	2301      	movs	r3, #1
 801afae:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*--------------------------- SAI1 configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 801afb0:	687b      	ldr	r3, [r7, #4]
 801afb2:	681b      	ldr	r3, [r3, #0]
 801afb4:	f003 0304 	and.w	r3, r3, #4
 801afb8:	2b00      	cmp	r3, #0
 801afba:	d017      	beq.n	801afec <HAL_RCCEx_PeriphCLKConfig+0xc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 801afbc:	4b58      	ldr	r3, [pc, #352]	; (801b120 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 801afbe:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801afc2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 801afc6:	687b      	ldr	r3, [r7, #4]
 801afc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801afca:	4955      	ldr	r1, [pc, #340]	; (801b120 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 801afcc:	4313      	orrs	r3, r2
 801afce:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 801afd2:	687b      	ldr	r3, [r7, #4]
 801afd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801afd6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 801afda:	d101      	bne.n	801afe0 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      plli2sused = 1U;
 801afdc:	2301      	movs	r3, #1
 801afde:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 801afe0:	687b      	ldr	r3, [r7, #4]
 801afe2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801afe4:	2b00      	cmp	r3, #0
 801afe6:	d101      	bne.n	801afec <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      pllsaiused = 1U;
 801afe8:	2301      	movs	r3, #1
 801afea:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------------- SAI2 configuration ----------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 801afec:	687b      	ldr	r3, [r7, #4]
 801afee:	681b      	ldr	r3, [r3, #0]
 801aff0:	f003 0308 	and.w	r3, r3, #8
 801aff4:	2b00      	cmp	r3, #0
 801aff6:	d017      	beq.n	801b028 <HAL_RCCEx_PeriphCLKConfig+0x100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 801aff8:	4b49      	ldr	r3, [pc, #292]	; (801b120 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 801affa:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801affe:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 801b002:	687b      	ldr	r3, [r7, #4]
 801b004:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801b006:	4946      	ldr	r1, [pc, #280]	; (801b120 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 801b008:	4313      	orrs	r3, r2
 801b00a:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 801b00e:	687b      	ldr	r3, [r7, #4]
 801b010:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801b012:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 801b016:	d101      	bne.n	801b01c <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      plli2sused = 1U;
 801b018:	2301      	movs	r3, #1
 801b01a:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 801b01c:	687b      	ldr	r3, [r7, #4]
 801b01e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801b020:	2b00      	cmp	r3, #0
 801b022:	d101      	bne.n	801b028 <HAL_RCCEx_PeriphCLKConfig+0x100>
    {
      pllsaiused = 1U;
 801b024:	2301      	movs	r3, #1
 801b026:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- RTC configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 801b028:	687b      	ldr	r3, [r7, #4]
 801b02a:	681b      	ldr	r3, [r3, #0]
 801b02c:	f003 0320 	and.w	r3, r3, #32
 801b030:	2b00      	cmp	r3, #0
 801b032:	f000 808a 	beq.w	801b14a <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 801b036:	2300      	movs	r3, #0
 801b038:	60bb      	str	r3, [r7, #8]
 801b03a:	4b39      	ldr	r3, [pc, #228]	; (801b120 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 801b03c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801b03e:	4a38      	ldr	r2, [pc, #224]	; (801b120 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 801b040:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 801b044:	6413      	str	r3, [r2, #64]	; 0x40
 801b046:	4b36      	ldr	r3, [pc, #216]	; (801b120 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 801b048:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801b04a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 801b04e:	60bb      	str	r3, [r7, #8]
 801b050:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 801b052:	4b34      	ldr	r3, [pc, #208]	; (801b124 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 801b054:	681b      	ldr	r3, [r3, #0]
 801b056:	4a33      	ldr	r2, [pc, #204]	; (801b124 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 801b058:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 801b05c:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 801b05e:	f7fd f821 	bl	80180a4 <HAL_GetTick>
 801b062:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR & PWR_CR_DBP) == RESET)
 801b064:	e008      	b.n	801b078 <HAL_RCCEx_PeriphCLKConfig+0x150>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 801b066:	f7fd f81d 	bl	80180a4 <HAL_GetTick>
 801b06a:	4602      	mov	r2, r0
 801b06c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b06e:	1ad3      	subs	r3, r2, r3
 801b070:	2b02      	cmp	r3, #2
 801b072:	d901      	bls.n	801b078 <HAL_RCCEx_PeriphCLKConfig+0x150>
      {
        return HAL_TIMEOUT;
 801b074:	2303      	movs	r3, #3
 801b076:	e278      	b.n	801b56a <HAL_RCCEx_PeriphCLKConfig+0x642>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 801b078:	4b2a      	ldr	r3, [pc, #168]	; (801b124 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 801b07a:	681b      	ldr	r3, [r3, #0]
 801b07c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801b080:	2b00      	cmp	r3, #0
 801b082:	d0f0      	beq.n	801b066 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 801b084:	4b26      	ldr	r3, [pc, #152]	; (801b120 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 801b086:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801b088:	f403 7340 	and.w	r3, r3, #768	; 0x300
 801b08c:	623b      	str	r3, [r7, #32]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 801b08e:	6a3b      	ldr	r3, [r7, #32]
 801b090:	2b00      	cmp	r3, #0
 801b092:	d02f      	beq.n	801b0f4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 801b094:	687b      	ldr	r3, [r7, #4]
 801b096:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801b098:	f403 7340 	and.w	r3, r3, #768	; 0x300
 801b09c:	6a3a      	ldr	r2, [r7, #32]
 801b09e:	429a      	cmp	r2, r3
 801b0a0:	d028      	beq.n	801b0f4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 801b0a2:	4b1f      	ldr	r3, [pc, #124]	; (801b120 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 801b0a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801b0a6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 801b0aa:	623b      	str	r3, [r7, #32]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 801b0ac:	4b1e      	ldr	r3, [pc, #120]	; (801b128 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 801b0ae:	2201      	movs	r2, #1
 801b0b0:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 801b0b2:	4b1d      	ldr	r3, [pc, #116]	; (801b128 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 801b0b4:	2200      	movs	r2, #0
 801b0b6:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 801b0b8:	4a19      	ldr	r2, [pc, #100]	; (801b120 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 801b0ba:	6a3b      	ldr	r3, [r7, #32]
 801b0bc:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 801b0be:	4b18      	ldr	r3, [pc, #96]	; (801b120 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 801b0c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801b0c2:	f003 0301 	and.w	r3, r3, #1
 801b0c6:	2b01      	cmp	r3, #1
 801b0c8:	d114      	bne.n	801b0f4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 801b0ca:	f7fc ffeb 	bl	80180a4 <HAL_GetTick>
 801b0ce:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 801b0d0:	e00a      	b.n	801b0e8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 801b0d2:	f7fc ffe7 	bl	80180a4 <HAL_GetTick>
 801b0d6:	4602      	mov	r2, r0
 801b0d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b0da:	1ad3      	subs	r3, r2, r3
 801b0dc:	f241 3288 	movw	r2, #5000	; 0x1388
 801b0e0:	4293      	cmp	r3, r2
 801b0e2:	d901      	bls.n	801b0e8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
          {
            return HAL_TIMEOUT;
 801b0e4:	2303      	movs	r3, #3
 801b0e6:	e240      	b.n	801b56a <HAL_RCCEx_PeriphCLKConfig+0x642>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 801b0e8:	4b0d      	ldr	r3, [pc, #52]	; (801b120 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 801b0ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801b0ec:	f003 0302 	and.w	r3, r3, #2
 801b0f0:	2b00      	cmp	r3, #0
 801b0f2:	d0ee      	beq.n	801b0d2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 801b0f4:	687b      	ldr	r3, [r7, #4]
 801b0f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801b0f8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 801b0fc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 801b100:	d114      	bne.n	801b12c <HAL_RCCEx_PeriphCLKConfig+0x204>
 801b102:	4b07      	ldr	r3, [pc, #28]	; (801b120 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 801b104:	689b      	ldr	r3, [r3, #8]
 801b106:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 801b10a:	687b      	ldr	r3, [r7, #4]
 801b10c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801b10e:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 801b112:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 801b116:	4902      	ldr	r1, [pc, #8]	; (801b120 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 801b118:	4313      	orrs	r3, r2
 801b11a:	608b      	str	r3, [r1, #8]
 801b11c:	e00c      	b.n	801b138 <HAL_RCCEx_PeriphCLKConfig+0x210>
 801b11e:	bf00      	nop
 801b120:	40023800 	.word	0x40023800
 801b124:	40007000 	.word	0x40007000
 801b128:	42470e40 	.word	0x42470e40
 801b12c:	4b4a      	ldr	r3, [pc, #296]	; (801b258 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 801b12e:	689b      	ldr	r3, [r3, #8]
 801b130:	4a49      	ldr	r2, [pc, #292]	; (801b258 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 801b132:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 801b136:	6093      	str	r3, [r2, #8]
 801b138:	4b47      	ldr	r3, [pc, #284]	; (801b258 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 801b13a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 801b13c:	687b      	ldr	r3, [r7, #4]
 801b13e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801b140:	f3c3 030b 	ubfx	r3, r3, #0, #12
 801b144:	4944      	ldr	r1, [pc, #272]	; (801b258 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 801b146:	4313      	orrs	r3, r2
 801b148:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 801b14a:	687b      	ldr	r3, [r7, #4]
 801b14c:	681b      	ldr	r3, [r3, #0]
 801b14e:	f003 0310 	and.w	r3, r3, #16
 801b152:	2b00      	cmp	r3, #0
 801b154:	d004      	beq.n	801b160 <HAL_RCCEx_PeriphCLKConfig+0x238>
  {
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 801b156:	687b      	ldr	r3, [r7, #4]
 801b158:	f893 2058 	ldrb.w	r2, [r3, #88]	; 0x58
 801b15c:	4b3f      	ldr	r3, [pc, #252]	; (801b25c <HAL_RCCEx_PeriphCLKConfig+0x334>)
 801b15e:	601a      	str	r2, [r3, #0]
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- FMPI2C1 Configuration -----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMPI2C1) == RCC_PERIPHCLK_FMPI2C1)
 801b160:	687b      	ldr	r3, [r7, #4]
 801b162:	681b      	ldr	r3, [r3, #0]
 801b164:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801b168:	2b00      	cmp	r3, #0
 801b16a:	d00a      	beq.n	801b182 <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMPI2C1CLKSOURCE(PeriphClkInit->Fmpi2c1ClockSelection));

    /* Configure the FMPI2C1 clock source */
    __HAL_RCC_FMPI2C1_CONFIG(PeriphClkInit->Fmpi2c1ClockSelection);
 801b16c:	4b3a      	ldr	r3, [pc, #232]	; (801b258 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 801b16e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 801b172:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 801b176:	687b      	ldr	r3, [r7, #4]
 801b178:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801b17a:	4937      	ldr	r1, [pc, #220]	; (801b258 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 801b17c:	4313      	orrs	r3, r2
 801b17e:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ CEC Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 801b182:	687b      	ldr	r3, [r7, #4]
 801b184:	681b      	ldr	r3, [r3, #0]
 801b186:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801b18a:	2b00      	cmp	r3, #0
 801b18c:	d00a      	beq.n	801b1a4 <HAL_RCCEx_PeriphCLKConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 801b18e:	4b32      	ldr	r3, [pc, #200]	; (801b258 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 801b190:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 801b194:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 801b198:	687b      	ldr	r3, [r7, #4]
 801b19a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801b19c:	492e      	ldr	r1, [pc, #184]	; (801b258 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 801b19e:	4313      	orrs	r3, r2
 801b1a0:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- CLK48 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 801b1a4:	687b      	ldr	r3, [r7, #4]
 801b1a6:	681b      	ldr	r3, [r3, #0]
 801b1a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801b1ac:	2b00      	cmp	r3, #0
 801b1ae:	d011      	beq.n	801b1d4 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 801b1b0:	4b29      	ldr	r3, [pc, #164]	; (801b258 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 801b1b2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 801b1b6:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 801b1ba:	687b      	ldr	r3, [r7, #4]
 801b1bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801b1be:	4926      	ldr	r1, [pc, #152]	; (801b258 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 801b1c0:	4313      	orrs	r3, r2
 801b1c2:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94

    /* Enable the PLLSAI when it's used as clock source for CLK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP)
 801b1c6:	687b      	ldr	r3, [r7, #4]
 801b1c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801b1ca:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 801b1ce:	d101      	bne.n	801b1d4 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      pllsaiused = 1U;
 801b1d0:	2301      	movs	r3, #1
 801b1d2:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- SDIO Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 801b1d4:	687b      	ldr	r3, [r7, #4]
 801b1d6:	681b      	ldr	r3, [r3, #0]
 801b1d8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 801b1dc:	2b00      	cmp	r3, #0
 801b1de:	d00a      	beq.n	801b1f6 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 801b1e0:	4b1d      	ldr	r3, [pc, #116]	; (801b258 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 801b1e2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 801b1e6:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 801b1ea:	687b      	ldr	r3, [r7, #4]
 801b1ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801b1ee:	491a      	ldr	r1, [pc, #104]	; (801b258 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 801b1f0:	4313      	orrs	r3, r2
 801b1f2:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ SPDIFRX Configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 801b1f6:	687b      	ldr	r3, [r7, #4]
 801b1f8:	681b      	ldr	r3, [r3, #0]
 801b1fa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 801b1fe:	2b00      	cmp	r3, #0
 801b200:	d011      	beq.n	801b226 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPDIFRXCLKSOURCE(PeriphClkInit->SpdifClockSelection));

    /* Configure the SPDIFRX clock source */
    __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifClockSelection);
 801b202:	4b15      	ldr	r3, [pc, #84]	; (801b258 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 801b204:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 801b208:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 801b20c:	687b      	ldr	r3, [r7, #4]
 801b20e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801b210:	4911      	ldr	r1, [pc, #68]	; (801b258 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 801b212:	4313      	orrs	r3, r2
 801b214:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
    /* Enable the PLLI2S when it's used as clock source for SPDIFRX */
    if(PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP)
 801b218:	687b      	ldr	r3, [r7, #4]
 801b21a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801b21c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 801b220:	d101      	bne.n	801b226 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
    {
      plli2sused = 1U;
 801b222:	2301      	movs	r3, #1
 801b224:	62fb      	str	r3, [r7, #44]	; 0x2c
  /*--------------------------------------------------------------------------*/

  /*---------------------------- PLLI2S Configuration ------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S on APB1,
     I2S on APB2 or SPDIFRX */
  if((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 801b226:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801b228:	2b01      	cmp	r3, #1
 801b22a:	d005      	beq.n	801b238 <HAL_RCCEx_PeriphCLKConfig+0x310>
 801b22c:	687b      	ldr	r3, [r7, #4]
 801b22e:	681b      	ldr	r3, [r3, #0]
 801b230:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 801b234:	f040 80ff 	bne.w	801b436 <HAL_RCCEx_PeriphCLKConfig+0x50e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 801b238:	4b09      	ldr	r3, [pc, #36]	; (801b260 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 801b23a:	2200      	movs	r2, #0
 801b23c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 801b23e:	f7fc ff31 	bl	80180a4 <HAL_GetTick>
 801b242:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 801b244:	e00e      	b.n	801b264 <HAL_RCCEx_PeriphCLKConfig+0x33c>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 801b246:	f7fc ff2d 	bl	80180a4 <HAL_GetTick>
 801b24a:	4602      	mov	r2, r0
 801b24c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b24e:	1ad3      	subs	r3, r2, r3
 801b250:	2b02      	cmp	r3, #2
 801b252:	d907      	bls.n	801b264 <HAL_RCCEx_PeriphCLKConfig+0x33c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 801b254:	2303      	movs	r3, #3
 801b256:	e188      	b.n	801b56a <HAL_RCCEx_PeriphCLKConfig+0x642>
 801b258:	40023800 	.word	0x40023800
 801b25c:	424711e0 	.word	0x424711e0
 801b260:	42470068 	.word	0x42470068
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 801b264:	4b7e      	ldr	r3, [pc, #504]	; (801b460 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 801b266:	681b      	ldr	r3, [r3, #0]
 801b268:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 801b26c:	2b00      	cmp	r3, #0
 801b26e:	d1ea      	bne.n	801b246 <HAL_RCCEx_PeriphCLKConfig+0x31e>
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*------ In Case of PLLI2S is selected as source clock for I2S -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 801b270:	687b      	ldr	r3, [r7, #4]
 801b272:	681b      	ldr	r3, [r3, #0]
 801b274:	f003 0301 	and.w	r3, r3, #1
 801b278:	2b00      	cmp	r3, #0
 801b27a:	d003      	beq.n	801b284 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 801b27c:	687b      	ldr	r3, [r7, #4]
 801b27e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801b280:	2b00      	cmp	r3, #0
 801b282:	d009      	beq.n	801b298 <HAL_RCCEx_PeriphCLKConfig+0x370>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 801b284:	687b      	ldr	r3, [r7, #4]
 801b286:	681b      	ldr	r3, [r3, #0]
 801b288:	f003 0302 	and.w	r3, r3, #2
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 801b28c:	2b00      	cmp	r3, #0
 801b28e:	d028      	beq.n	801b2e2 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 801b290:	687b      	ldr	r3, [r7, #4]
 801b292:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801b294:	2b00      	cmp	r3, #0
 801b296:	d124      	bne.n	801b2e2 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP/PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 801b298:	4b71      	ldr	r3, [pc, #452]	; (801b460 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 801b29a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801b29e:	0c1b      	lsrs	r3, r3, #16
 801b2a0:	f003 0303 	and.w	r3, r3, #3
 801b2a4:	3301      	adds	r3, #1
 801b2a6:	005b      	lsls	r3, r3, #1
 801b2a8:	61fb      	str	r3, [r7, #28]
      plli2sq = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 801b2aa:	4b6d      	ldr	r3, [pc, #436]	; (801b460 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 801b2ac:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801b2b0:	0e1b      	lsrs	r3, r3, #24
 801b2b2:	f003 030f 	and.w	r3, r3, #15
 801b2b6:	61bb      	str	r3, [r7, #24]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, plli2sq, PeriphClkInit->PLLI2S.PLLI2SR);
 801b2b8:	687b      	ldr	r3, [r7, #4]
 801b2ba:	685a      	ldr	r2, [r3, #4]
 801b2bc:	687b      	ldr	r3, [r7, #4]
 801b2be:	689b      	ldr	r3, [r3, #8]
 801b2c0:	019b      	lsls	r3, r3, #6
 801b2c2:	431a      	orrs	r2, r3
 801b2c4:	69fb      	ldr	r3, [r7, #28]
 801b2c6:	085b      	lsrs	r3, r3, #1
 801b2c8:	3b01      	subs	r3, #1
 801b2ca:	041b      	lsls	r3, r3, #16
 801b2cc:	431a      	orrs	r2, r3
 801b2ce:	69bb      	ldr	r3, [r7, #24]
 801b2d0:	061b      	lsls	r3, r3, #24
 801b2d2:	431a      	orrs	r2, r3
 801b2d4:	687b      	ldr	r3, [r7, #4]
 801b2d6:	695b      	ldr	r3, [r3, #20]
 801b2d8:	071b      	lsls	r3, r3, #28
 801b2da:	4961      	ldr	r1, [pc, #388]	; (801b460 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 801b2dc:	4313      	orrs	r3, r2
 801b2de:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*------- In Case of PLLI2S is selected as source clock for SAI ----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 801b2e2:	687b      	ldr	r3, [r7, #4]
 801b2e4:	681b      	ldr	r3, [r3, #0]
 801b2e6:	f003 0304 	and.w	r3, r3, #4
 801b2ea:	2b00      	cmp	r3, #0
 801b2ec:	d004      	beq.n	801b2f8 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
 801b2ee:	687b      	ldr	r3, [r7, #4]
 801b2f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801b2f2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 801b2f6:	d00a      	beq.n	801b30e <HAL_RCCEx_PeriphCLKConfig+0x3e6>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 801b2f8:	687b      	ldr	r3, [r7, #4]
 801b2fa:	681b      	ldr	r3, [r3, #0]
 801b2fc:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 801b300:	2b00      	cmp	r3, #0
 801b302:	d035      	beq.n	801b370 <HAL_RCCEx_PeriphCLKConfig+0x448>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 801b304:	687b      	ldr	r3, [r7, #4]
 801b306:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801b308:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 801b30c:	d130      	bne.n	801b370 <HAL_RCCEx_PeriphCLKConfig+0x448>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP/PLLI2SR value from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 801b30e:	4b54      	ldr	r3, [pc, #336]	; (801b460 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 801b310:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801b314:	0c1b      	lsrs	r3, r3, #16
 801b316:	f003 0303 	and.w	r3, r3, #3
 801b31a:	3301      	adds	r3, #1
 801b31c:	005b      	lsls	r3, r3, #1
 801b31e:	61fb      	str	r3, [r7, #28]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 801b320:	4b4f      	ldr	r3, [pc, #316]	; (801b460 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 801b322:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801b326:	0f1b      	lsrs	r3, r3, #28
 801b328:	f003 0307 	and.w	r3, r3, #7
 801b32c:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, PeriphClkInit->PLLI2S.PLLI2SQ, plli2sr);
 801b32e:	687b      	ldr	r3, [r7, #4]
 801b330:	685a      	ldr	r2, [r3, #4]
 801b332:	687b      	ldr	r3, [r7, #4]
 801b334:	689b      	ldr	r3, [r3, #8]
 801b336:	019b      	lsls	r3, r3, #6
 801b338:	431a      	orrs	r2, r3
 801b33a:	69fb      	ldr	r3, [r7, #28]
 801b33c:	085b      	lsrs	r3, r3, #1
 801b33e:	3b01      	subs	r3, #1
 801b340:	041b      	lsls	r3, r3, #16
 801b342:	431a      	orrs	r2, r3
 801b344:	687b      	ldr	r3, [r7, #4]
 801b346:	691b      	ldr	r3, [r3, #16]
 801b348:	061b      	lsls	r3, r3, #24
 801b34a:	431a      	orrs	r2, r3
 801b34c:	697b      	ldr	r3, [r7, #20]
 801b34e:	071b      	lsls	r3, r3, #28
 801b350:	4943      	ldr	r1, [pc, #268]	; (801b460 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 801b352:	4313      	orrs	r3, r2
 801b354:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 801b358:	4b41      	ldr	r3, [pc, #260]	; (801b460 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 801b35a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801b35e:	f023 021f 	bic.w	r2, r3, #31
 801b362:	687b      	ldr	r3, [r7, #4]
 801b364:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801b366:	3b01      	subs	r3, #1
 801b368:	493d      	ldr	r1, [pc, #244]	; (801b460 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 801b36a:	4313      	orrs	r3, r2
 801b36c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLI2S is selected as source clock for SPDIFRX -------*/
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX) && (PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP))
 801b370:	687b      	ldr	r3, [r7, #4]
 801b372:	681b      	ldr	r3, [r3, #0]
 801b374:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 801b378:	2b00      	cmp	r3, #0
 801b37a:	d029      	beq.n	801b3d0 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 801b37c:	687b      	ldr	r3, [r7, #4]
 801b37e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801b380:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 801b384:	d124      	bne.n	801b3d0 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      plli2sq = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 801b386:	4b36      	ldr	r3, [pc, #216]	; (801b460 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 801b388:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801b38c:	0c1b      	lsrs	r3, r3, #16
 801b38e:	f003 0303 	and.w	r3, r3, #3
 801b392:	3301      	adds	r3, #1
 801b394:	005b      	lsls	r3, r3, #1
 801b396:	61bb      	str	r3, [r7, #24]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 801b398:	4b31      	ldr	r3, [pc, #196]	; (801b460 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 801b39a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801b39e:	0f1b      	lsrs	r3, r3, #28
 801b3a0:	f003 0307 	and.w	r3, r3, #7
 801b3a4:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, plli2sq, plli2sr);
 801b3a6:	687b      	ldr	r3, [r7, #4]
 801b3a8:	685a      	ldr	r2, [r3, #4]
 801b3aa:	687b      	ldr	r3, [r7, #4]
 801b3ac:	689b      	ldr	r3, [r3, #8]
 801b3ae:	019b      	lsls	r3, r3, #6
 801b3b0:	431a      	orrs	r2, r3
 801b3b2:	687b      	ldr	r3, [r7, #4]
 801b3b4:	68db      	ldr	r3, [r3, #12]
 801b3b6:	085b      	lsrs	r3, r3, #1
 801b3b8:	3b01      	subs	r3, #1
 801b3ba:	041b      	lsls	r3, r3, #16
 801b3bc:	431a      	orrs	r2, r3
 801b3be:	69bb      	ldr	r3, [r7, #24]
 801b3c0:	061b      	lsls	r3, r3, #24
 801b3c2:	431a      	orrs	r2, r3
 801b3c4:	697b      	ldr	r3, [r7, #20]
 801b3c6:	071b      	lsls	r3, r3, #28
 801b3c8:	4925      	ldr	r1, [pc, #148]	; (801b460 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 801b3ca:	4313      	orrs	r3, r2
 801b3cc:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

     /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 801b3d0:	687b      	ldr	r3, [r7, #4]
 801b3d2:	681b      	ldr	r3, [r3, #0]
 801b3d4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 801b3d8:	2b00      	cmp	r3, #0
 801b3da:	d016      	beq.n	801b40a <HAL_RCCEx_PeriphCLKConfig+0x4e2>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 801b3dc:	687b      	ldr	r3, [r7, #4]
 801b3de:	685a      	ldr	r2, [r3, #4]
 801b3e0:	687b      	ldr	r3, [r7, #4]
 801b3e2:	689b      	ldr	r3, [r3, #8]
 801b3e4:	019b      	lsls	r3, r3, #6
 801b3e6:	431a      	orrs	r2, r3
 801b3e8:	687b      	ldr	r3, [r7, #4]
 801b3ea:	68db      	ldr	r3, [r3, #12]
 801b3ec:	085b      	lsrs	r3, r3, #1
 801b3ee:	3b01      	subs	r3, #1
 801b3f0:	041b      	lsls	r3, r3, #16
 801b3f2:	431a      	orrs	r2, r3
 801b3f4:	687b      	ldr	r3, [r7, #4]
 801b3f6:	691b      	ldr	r3, [r3, #16]
 801b3f8:	061b      	lsls	r3, r3, #24
 801b3fa:	431a      	orrs	r2, r3
 801b3fc:	687b      	ldr	r3, [r7, #4]
 801b3fe:	695b      	ldr	r3, [r3, #20]
 801b400:	071b      	lsls	r3, r3, #28
 801b402:	4917      	ldr	r1, [pc, #92]	; (801b460 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 801b404:	4313      	orrs	r3, r2
 801b406:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 801b40a:	4b16      	ldr	r3, [pc, #88]	; (801b464 <HAL_RCCEx_PeriphCLKConfig+0x53c>)
 801b40c:	2201      	movs	r2, #1
 801b40e:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 801b410:	f7fc fe48 	bl	80180a4 <HAL_GetTick>
 801b414:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 801b416:	e008      	b.n	801b42a <HAL_RCCEx_PeriphCLKConfig+0x502>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 801b418:	f7fc fe44 	bl	80180a4 <HAL_GetTick>
 801b41c:	4602      	mov	r2, r0
 801b41e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b420:	1ad3      	subs	r3, r2, r3
 801b422:	2b02      	cmp	r3, #2
 801b424:	d901      	bls.n	801b42a <HAL_RCCEx_PeriphCLKConfig+0x502>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 801b426:	2303      	movs	r3, #3
 801b428:	e09f      	b.n	801b56a <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 801b42a:	4b0d      	ldr	r3, [pc, #52]	; (801b460 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 801b42c:	681b      	ldr	r3, [r3, #0]
 801b42e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 801b432:	2b00      	cmp	r3, #0
 801b434:	d0f0      	beq.n	801b418 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- PLLSAI Configuration -----------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, CLK48 or SDIO */
  if(pllsaiused == 1U)
 801b436:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801b438:	2b01      	cmp	r3, #1
 801b43a:	f040 8095 	bne.w	801b568 <HAL_RCCEx_PeriphCLKConfig+0x640>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 801b43e:	4b0a      	ldr	r3, [pc, #40]	; (801b468 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 801b440:	2200      	movs	r2, #0
 801b442:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 801b444:	f7fc fe2e 	bl	80180a4 <HAL_GetTick>
 801b448:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 801b44a:	e00f      	b.n	801b46c <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 801b44c:	f7fc fe2a 	bl	80180a4 <HAL_GetTick>
 801b450:	4602      	mov	r2, r0
 801b452:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b454:	1ad3      	subs	r3, r2, r3
 801b456:	2b02      	cmp	r3, #2
 801b458:	d908      	bls.n	801b46c <HAL_RCCEx_PeriphCLKConfig+0x544>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 801b45a:	2303      	movs	r3, #3
 801b45c:	e085      	b.n	801b56a <HAL_RCCEx_PeriphCLKConfig+0x642>
 801b45e:	bf00      	nop
 801b460:	40023800 	.word	0x40023800
 801b464:	42470068 	.word	0x42470068
 801b468:	42470070 	.word	0x42470070
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 801b46c:	4b41      	ldr	r3, [pc, #260]	; (801b574 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 801b46e:	681b      	ldr	r3, [r3, #0]
 801b470:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 801b474:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 801b478:	d0e8      	beq.n	801b44c <HAL_RCCEx_PeriphCLKConfig+0x524>
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIM_VALUE(PeriphClkInit->PLLSAI.PLLSAIM));
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*------ In Case of PLLSAI is selected as source clock for SAI -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 801b47a:	687b      	ldr	r3, [r7, #4]
 801b47c:	681b      	ldr	r3, [r3, #0]
 801b47e:	f003 0304 	and.w	r3, r3, #4
 801b482:	2b00      	cmp	r3, #0
 801b484:	d003      	beq.n	801b48e <HAL_RCCEx_PeriphCLKConfig+0x566>
 801b486:	687b      	ldr	r3, [r7, #4]
 801b488:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801b48a:	2b00      	cmp	r3, #0
 801b48c:	d009      	beq.n	801b4a2 <HAL_RCCEx_PeriphCLKConfig+0x57a>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 801b48e:	687b      	ldr	r3, [r7, #4]
 801b490:	681b      	ldr	r3, [r3, #0]
 801b492:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 801b496:	2b00      	cmp	r3, #0
 801b498:	d02b      	beq.n	801b4f2 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 801b49a:	687b      	ldr	r3, [r7, #4]
 801b49c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801b49e:	2b00      	cmp	r3, #0
 801b4a0:	d127      	bne.n	801b4f2 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 801b4a2:	4b34      	ldr	r3, [pc, #208]	; (801b574 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 801b4a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801b4a8:	0c1b      	lsrs	r3, r3, #16
 801b4aa:	f003 0303 	and.w	r3, r3, #3
 801b4ae:	3301      	adds	r3, #1
 801b4b0:	005b      	lsls	r3, r3, #1
 801b4b2:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , pllsaip, PeriphClkInit->PLLSAI.PLLSAIQ, 0U);
 801b4b4:	687b      	ldr	r3, [r7, #4]
 801b4b6:	699a      	ldr	r2, [r3, #24]
 801b4b8:	687b      	ldr	r3, [r7, #4]
 801b4ba:	69db      	ldr	r3, [r3, #28]
 801b4bc:	019b      	lsls	r3, r3, #6
 801b4be:	431a      	orrs	r2, r3
 801b4c0:	693b      	ldr	r3, [r7, #16]
 801b4c2:	085b      	lsrs	r3, r3, #1
 801b4c4:	3b01      	subs	r3, #1
 801b4c6:	041b      	lsls	r3, r3, #16
 801b4c8:	431a      	orrs	r2, r3
 801b4ca:	687b      	ldr	r3, [r7, #4]
 801b4cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801b4ce:	061b      	lsls	r3, r3, #24
 801b4d0:	4928      	ldr	r1, [pc, #160]	; (801b574 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 801b4d2:	4313      	orrs	r3, r2
 801b4d4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 801b4d8:	4b26      	ldr	r3, [pc, #152]	; (801b574 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 801b4da:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801b4de:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 801b4e2:	687b      	ldr	r3, [r7, #4]
 801b4e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801b4e6:	3b01      	subs	r3, #1
 801b4e8:	021b      	lsls	r3, r3, #8
 801b4ea:	4922      	ldr	r1, [pc, #136]	; (801b574 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 801b4ec:	4313      	orrs	r3, r2
 801b4ee:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLSAI is selected as source clock for CLK48 ---------*/
    /* In Case of PLLI2S is selected as source clock for CLK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP))
 801b4f2:	687b      	ldr	r3, [r7, #4]
 801b4f4:	681b      	ldr	r3, [r3, #0]
 801b4f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801b4fa:	2b00      	cmp	r3, #0
 801b4fc:	d01d      	beq.n	801b53a <HAL_RCCEx_PeriphCLKConfig+0x612>
 801b4fe:	687b      	ldr	r3, [r7, #4]
 801b500:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801b502:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 801b506:	d118      	bne.n	801b53a <HAL_RCCEx_PeriphCLKConfig+0x612>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 801b508:	4b1a      	ldr	r3, [pc, #104]	; (801b574 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 801b50a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801b50e:	0e1b      	lsrs	r3, r3, #24
 801b510:	f003 030f 	and.w	r3, r3, #15
 801b514:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) * (PLLI2SN/PLLSAIM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, pllsaiq, 0U);
 801b516:	687b      	ldr	r3, [r7, #4]
 801b518:	699a      	ldr	r2, [r3, #24]
 801b51a:	687b      	ldr	r3, [r7, #4]
 801b51c:	69db      	ldr	r3, [r3, #28]
 801b51e:	019b      	lsls	r3, r3, #6
 801b520:	431a      	orrs	r2, r3
 801b522:	687b      	ldr	r3, [r7, #4]
 801b524:	6a1b      	ldr	r3, [r3, #32]
 801b526:	085b      	lsrs	r3, r3, #1
 801b528:	3b01      	subs	r3, #1
 801b52a:	041b      	lsls	r3, r3, #16
 801b52c:	431a      	orrs	r2, r3
 801b52e:	68fb      	ldr	r3, [r7, #12]
 801b530:	061b      	lsls	r3, r3, #24
 801b532:	4910      	ldr	r1, [pc, #64]	; (801b574 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 801b534:	4313      	orrs	r3, r2
 801b536:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 801b53a:	4b0f      	ldr	r3, [pc, #60]	; (801b578 <HAL_RCCEx_PeriphCLKConfig+0x650>)
 801b53c:	2201      	movs	r2, #1
 801b53e:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 801b540:	f7fc fdb0 	bl	80180a4 <HAL_GetTick>
 801b544:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 801b546:	e008      	b.n	801b55a <HAL_RCCEx_PeriphCLKConfig+0x632>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 801b548:	f7fc fdac 	bl	80180a4 <HAL_GetTick>
 801b54c:	4602      	mov	r2, r0
 801b54e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b550:	1ad3      	subs	r3, r2, r3
 801b552:	2b02      	cmp	r3, #2
 801b554:	d901      	bls.n	801b55a <HAL_RCCEx_PeriphCLKConfig+0x632>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 801b556:	2303      	movs	r3, #3
 801b558:	e007      	b.n	801b56a <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 801b55a:	4b06      	ldr	r3, [pc, #24]	; (801b574 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 801b55c:	681b      	ldr	r3, [r3, #0]
 801b55e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 801b562:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 801b566:	d1ef      	bne.n	801b548 <HAL_RCCEx_PeriphCLKConfig+0x620>
      }
    }
  }
  return HAL_OK;
 801b568:	2300      	movs	r3, #0
}
 801b56a:	4618      	mov	r0, r3
 801b56c:	3730      	adds	r7, #48	; 0x30
 801b56e:	46bd      	mov	sp, r7
 801b570:	bd80      	pop	{r7, pc}
 801b572:	bf00      	nop
 801b574:	40023800 	.word	0x40023800
 801b578:	42470070 	.word	0x42470070

0801b57c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 801b57c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801b580:	b087      	sub	sp, #28
 801b582:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 801b584:	2600      	movs	r6, #0
 801b586:	60fe      	str	r6, [r7, #12]
  uint32_t pllvco = 0U;
 801b588:	2600      	movs	r6, #0
 801b58a:	617e      	str	r6, [r7, #20]
  uint32_t pllp = 0U;
 801b58c:	2600      	movs	r6, #0
 801b58e:	60be      	str	r6, [r7, #8]
  uint32_t pllr = 0U;
 801b590:	2600      	movs	r6, #0
 801b592:	607e      	str	r6, [r7, #4]
  uint32_t sysclockfreq = 0U;
 801b594:	2600      	movs	r6, #0
 801b596:	613e      	str	r6, [r7, #16]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 801b598:	4ea3      	ldr	r6, [pc, #652]	; (801b828 <HAL_RCC_GetSysClockFreq+0x2ac>)
 801b59a:	68b6      	ldr	r6, [r6, #8]
 801b59c:	f006 060c 	and.w	r6, r6, #12
 801b5a0:	2e0c      	cmp	r6, #12
 801b5a2:	f200 8137 	bhi.w	801b814 <HAL_RCC_GetSysClockFreq+0x298>
 801b5a6:	f20f 0c08 	addw	ip, pc, #8
 801b5aa:	f85c f026 	ldr.w	pc, [ip, r6, lsl #2]
 801b5ae:	bf00      	nop
 801b5b0:	0801b5e5 	.word	0x0801b5e5
 801b5b4:	0801b815 	.word	0x0801b815
 801b5b8:	0801b815 	.word	0x0801b815
 801b5bc:	0801b815 	.word	0x0801b815
 801b5c0:	0801b5eb 	.word	0x0801b5eb
 801b5c4:	0801b815 	.word	0x0801b815
 801b5c8:	0801b815 	.word	0x0801b815
 801b5cc:	0801b815 	.word	0x0801b815
 801b5d0:	0801b5f1 	.word	0x0801b5f1
 801b5d4:	0801b815 	.word	0x0801b815
 801b5d8:	0801b815 	.word	0x0801b815
 801b5dc:	0801b815 	.word	0x0801b815
 801b5e0:	0801b707 	.word	0x0801b707
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 801b5e4:	4b91      	ldr	r3, [pc, #580]	; (801b82c <HAL_RCC_GetSysClockFreq+0x2b0>)
 801b5e6:	613b      	str	r3, [r7, #16]
       break;
 801b5e8:	e117      	b.n	801b81a <HAL_RCC_GetSysClockFreq+0x29e>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 801b5ea:	4b91      	ldr	r3, [pc, #580]	; (801b830 <HAL_RCC_GetSysClockFreq+0x2b4>)
 801b5ec:	613b      	str	r3, [r7, #16]
      break;
 801b5ee:	e114      	b.n	801b81a <HAL_RCC_GetSysClockFreq+0x29e>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 801b5f0:	4b8d      	ldr	r3, [pc, #564]	; (801b828 <HAL_RCC_GetSysClockFreq+0x2ac>)
 801b5f2:	685b      	ldr	r3, [r3, #4]
 801b5f4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801b5f8:	60fb      	str	r3, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 801b5fa:	4b8b      	ldr	r3, [pc, #556]	; (801b828 <HAL_RCC_GetSysClockFreq+0x2ac>)
 801b5fc:	685b      	ldr	r3, [r3, #4]
 801b5fe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 801b602:	2b00      	cmp	r3, #0
 801b604:	d024      	beq.n	801b650 <HAL_RCC_GetSysClockFreq+0xd4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 801b606:	4b88      	ldr	r3, [pc, #544]	; (801b828 <HAL_RCC_GetSysClockFreq+0x2ac>)
 801b608:	685b      	ldr	r3, [r3, #4]
 801b60a:	099b      	lsrs	r3, r3, #6
 801b60c:	461a      	mov	r2, r3
 801b60e:	f04f 0300 	mov.w	r3, #0
 801b612:	f240 14ff 	movw	r4, #511	; 0x1ff
 801b616:	f04f 0500 	mov.w	r5, #0
 801b61a:	ea02 0004 	and.w	r0, r2, r4
 801b61e:	ea03 0105 	and.w	r1, r3, r5
 801b622:	4b83      	ldr	r3, [pc, #524]	; (801b830 <HAL_RCC_GetSysClockFreq+0x2b4>)
 801b624:	fb03 f201 	mul.w	r2, r3, r1
 801b628:	2300      	movs	r3, #0
 801b62a:	fb03 f300 	mul.w	r3, r3, r0
 801b62e:	4413      	add	r3, r2
 801b630:	4a7f      	ldr	r2, [pc, #508]	; (801b830 <HAL_RCC_GetSysClockFreq+0x2b4>)
 801b632:	fba0 0102 	umull	r0, r1, r0, r2
 801b636:	440b      	add	r3, r1
 801b638:	4619      	mov	r1, r3
 801b63a:	68fb      	ldr	r3, [r7, #12]
 801b63c:	461a      	mov	r2, r3
 801b63e:	f04f 0300 	mov.w	r3, #0
 801b642:	f7f0 fd05 	bl	800c050 <__aeabi_uldivmod>
 801b646:	4602      	mov	r2, r0
 801b648:	460b      	mov	r3, r1
 801b64a:	4613      	mov	r3, r2
 801b64c:	617b      	str	r3, [r7, #20]
 801b64e:	e04c      	b.n	801b6ea <HAL_RCC_GetSysClockFreq+0x16e>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 801b650:	4b75      	ldr	r3, [pc, #468]	; (801b828 <HAL_RCC_GetSysClockFreq+0x2ac>)
 801b652:	685b      	ldr	r3, [r3, #4]
 801b654:	099b      	lsrs	r3, r3, #6
 801b656:	461a      	mov	r2, r3
 801b658:	f04f 0300 	mov.w	r3, #0
 801b65c:	f240 10ff 	movw	r0, #511	; 0x1ff
 801b660:	f04f 0100 	mov.w	r1, #0
 801b664:	ea02 0800 	and.w	r8, r2, r0
 801b668:	ea03 0901 	and.w	r9, r3, r1
 801b66c:	4640      	mov	r0, r8
 801b66e:	4649      	mov	r1, r9
 801b670:	f04f 0200 	mov.w	r2, #0
 801b674:	f04f 0300 	mov.w	r3, #0
 801b678:	014b      	lsls	r3, r1, #5
 801b67a:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 801b67e:	0142      	lsls	r2, r0, #5
 801b680:	4610      	mov	r0, r2
 801b682:	4619      	mov	r1, r3
 801b684:	ebb0 0008 	subs.w	r0, r0, r8
 801b688:	eb61 0109 	sbc.w	r1, r1, r9
 801b68c:	f04f 0200 	mov.w	r2, #0
 801b690:	f04f 0300 	mov.w	r3, #0
 801b694:	018b      	lsls	r3, r1, #6
 801b696:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 801b69a:	0182      	lsls	r2, r0, #6
 801b69c:	1a12      	subs	r2, r2, r0
 801b69e:	eb63 0301 	sbc.w	r3, r3, r1
 801b6a2:	f04f 0000 	mov.w	r0, #0
 801b6a6:	f04f 0100 	mov.w	r1, #0
 801b6aa:	00d9      	lsls	r1, r3, #3
 801b6ac:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 801b6b0:	00d0      	lsls	r0, r2, #3
 801b6b2:	4602      	mov	r2, r0
 801b6b4:	460b      	mov	r3, r1
 801b6b6:	eb12 0208 	adds.w	r2, r2, r8
 801b6ba:	eb43 0309 	adc.w	r3, r3, r9
 801b6be:	f04f 0000 	mov.w	r0, #0
 801b6c2:	f04f 0100 	mov.w	r1, #0
 801b6c6:	0299      	lsls	r1, r3, #10
 801b6c8:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 801b6cc:	0290      	lsls	r0, r2, #10
 801b6ce:	4602      	mov	r2, r0
 801b6d0:	460b      	mov	r3, r1
 801b6d2:	4610      	mov	r0, r2
 801b6d4:	4619      	mov	r1, r3
 801b6d6:	68fb      	ldr	r3, [r7, #12]
 801b6d8:	461a      	mov	r2, r3
 801b6da:	f04f 0300 	mov.w	r3, #0
 801b6de:	f7f0 fcb7 	bl	800c050 <__aeabi_uldivmod>
 801b6e2:	4602      	mov	r2, r0
 801b6e4:	460b      	mov	r3, r1
 801b6e6:	4613      	mov	r3, r2
 801b6e8:	617b      	str	r3, [r7, #20]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 801b6ea:	4b4f      	ldr	r3, [pc, #316]	; (801b828 <HAL_RCC_GetSysClockFreq+0x2ac>)
 801b6ec:	685b      	ldr	r3, [r3, #4]
 801b6ee:	0c1b      	lsrs	r3, r3, #16
 801b6f0:	f003 0303 	and.w	r3, r3, #3
 801b6f4:	3301      	adds	r3, #1
 801b6f6:	005b      	lsls	r3, r3, #1
 801b6f8:	60bb      	str	r3, [r7, #8]

      sysclockfreq = pllvco/pllp;
 801b6fa:	697a      	ldr	r2, [r7, #20]
 801b6fc:	68bb      	ldr	r3, [r7, #8]
 801b6fe:	fbb2 f3f3 	udiv	r3, r2, r3
 801b702:	613b      	str	r3, [r7, #16]
      break;
 801b704:	e089      	b.n	801b81a <HAL_RCC_GetSysClockFreq+0x29e>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 801b706:	4948      	ldr	r1, [pc, #288]	; (801b828 <HAL_RCC_GetSysClockFreq+0x2ac>)
 801b708:	6849      	ldr	r1, [r1, #4]
 801b70a:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 801b70e:	60f9      	str	r1, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 801b710:	4945      	ldr	r1, [pc, #276]	; (801b828 <HAL_RCC_GetSysClockFreq+0x2ac>)
 801b712:	6849      	ldr	r1, [r1, #4]
 801b714:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 801b718:	2900      	cmp	r1, #0
 801b71a:	d024      	beq.n	801b766 <HAL_RCC_GetSysClockFreq+0x1ea>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 801b71c:	4942      	ldr	r1, [pc, #264]	; (801b828 <HAL_RCC_GetSysClockFreq+0x2ac>)
 801b71e:	6849      	ldr	r1, [r1, #4]
 801b720:	0989      	lsrs	r1, r1, #6
 801b722:	4608      	mov	r0, r1
 801b724:	f04f 0100 	mov.w	r1, #0
 801b728:	f240 14ff 	movw	r4, #511	; 0x1ff
 801b72c:	f04f 0500 	mov.w	r5, #0
 801b730:	ea00 0204 	and.w	r2, r0, r4
 801b734:	ea01 0305 	and.w	r3, r1, r5
 801b738:	493d      	ldr	r1, [pc, #244]	; (801b830 <HAL_RCC_GetSysClockFreq+0x2b4>)
 801b73a:	fb01 f003 	mul.w	r0, r1, r3
 801b73e:	2100      	movs	r1, #0
 801b740:	fb01 f102 	mul.w	r1, r1, r2
 801b744:	1844      	adds	r4, r0, r1
 801b746:	493a      	ldr	r1, [pc, #232]	; (801b830 <HAL_RCC_GetSysClockFreq+0x2b4>)
 801b748:	fba2 0101 	umull	r0, r1, r2, r1
 801b74c:	1863      	adds	r3, r4, r1
 801b74e:	4619      	mov	r1, r3
 801b750:	68fb      	ldr	r3, [r7, #12]
 801b752:	461a      	mov	r2, r3
 801b754:	f04f 0300 	mov.w	r3, #0
 801b758:	f7f0 fc7a 	bl	800c050 <__aeabi_uldivmod>
 801b75c:	4602      	mov	r2, r0
 801b75e:	460b      	mov	r3, r1
 801b760:	4613      	mov	r3, r2
 801b762:	617b      	str	r3, [r7, #20]
 801b764:	e04a      	b.n	801b7fc <HAL_RCC_GetSysClockFreq+0x280>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 801b766:	4b30      	ldr	r3, [pc, #192]	; (801b828 <HAL_RCC_GetSysClockFreq+0x2ac>)
 801b768:	685b      	ldr	r3, [r3, #4]
 801b76a:	099b      	lsrs	r3, r3, #6
 801b76c:	461a      	mov	r2, r3
 801b76e:	f04f 0300 	mov.w	r3, #0
 801b772:	f240 10ff 	movw	r0, #511	; 0x1ff
 801b776:	f04f 0100 	mov.w	r1, #0
 801b77a:	ea02 0400 	and.w	r4, r2, r0
 801b77e:	ea03 0501 	and.w	r5, r3, r1
 801b782:	4620      	mov	r0, r4
 801b784:	4629      	mov	r1, r5
 801b786:	f04f 0200 	mov.w	r2, #0
 801b78a:	f04f 0300 	mov.w	r3, #0
 801b78e:	014b      	lsls	r3, r1, #5
 801b790:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 801b794:	0142      	lsls	r2, r0, #5
 801b796:	4610      	mov	r0, r2
 801b798:	4619      	mov	r1, r3
 801b79a:	1b00      	subs	r0, r0, r4
 801b79c:	eb61 0105 	sbc.w	r1, r1, r5
 801b7a0:	f04f 0200 	mov.w	r2, #0
 801b7a4:	f04f 0300 	mov.w	r3, #0
 801b7a8:	018b      	lsls	r3, r1, #6
 801b7aa:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 801b7ae:	0182      	lsls	r2, r0, #6
 801b7b0:	1a12      	subs	r2, r2, r0
 801b7b2:	eb63 0301 	sbc.w	r3, r3, r1
 801b7b6:	f04f 0000 	mov.w	r0, #0
 801b7ba:	f04f 0100 	mov.w	r1, #0
 801b7be:	00d9      	lsls	r1, r3, #3
 801b7c0:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 801b7c4:	00d0      	lsls	r0, r2, #3
 801b7c6:	4602      	mov	r2, r0
 801b7c8:	460b      	mov	r3, r1
 801b7ca:	1912      	adds	r2, r2, r4
 801b7cc:	eb45 0303 	adc.w	r3, r5, r3
 801b7d0:	f04f 0000 	mov.w	r0, #0
 801b7d4:	f04f 0100 	mov.w	r1, #0
 801b7d8:	0299      	lsls	r1, r3, #10
 801b7da:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 801b7de:	0290      	lsls	r0, r2, #10
 801b7e0:	4602      	mov	r2, r0
 801b7e2:	460b      	mov	r3, r1
 801b7e4:	4610      	mov	r0, r2
 801b7e6:	4619      	mov	r1, r3
 801b7e8:	68fb      	ldr	r3, [r7, #12]
 801b7ea:	461a      	mov	r2, r3
 801b7ec:	f04f 0300 	mov.w	r3, #0
 801b7f0:	f7f0 fc2e 	bl	800c050 <__aeabi_uldivmod>
 801b7f4:	4602      	mov	r2, r0
 801b7f6:	460b      	mov	r3, r1
 801b7f8:	4613      	mov	r3, r2
 801b7fa:	617b      	str	r3, [r7, #20]
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 801b7fc:	4b0a      	ldr	r3, [pc, #40]	; (801b828 <HAL_RCC_GetSysClockFreq+0x2ac>)
 801b7fe:	685b      	ldr	r3, [r3, #4]
 801b800:	0f1b      	lsrs	r3, r3, #28
 801b802:	f003 0307 	and.w	r3, r3, #7
 801b806:	607b      	str	r3, [r7, #4]

      sysclockfreq = pllvco/pllr;
 801b808:	697a      	ldr	r2, [r7, #20]
 801b80a:	687b      	ldr	r3, [r7, #4]
 801b80c:	fbb2 f3f3 	udiv	r3, r2, r3
 801b810:	613b      	str	r3, [r7, #16]
      break;
 801b812:	e002      	b.n	801b81a <HAL_RCC_GetSysClockFreq+0x29e>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 801b814:	4b05      	ldr	r3, [pc, #20]	; (801b82c <HAL_RCC_GetSysClockFreq+0x2b0>)
 801b816:	613b      	str	r3, [r7, #16]
      break;
 801b818:	bf00      	nop
    }
  }
  return sysclockfreq;
 801b81a:	693b      	ldr	r3, [r7, #16]
}
 801b81c:	4618      	mov	r0, r3
 801b81e:	371c      	adds	r7, #28
 801b820:	46bd      	mov	sp, r7
 801b822:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801b826:	bf00      	nop
 801b828:	40023800 	.word	0x40023800
 801b82c:	00f42400 	.word	0x00f42400
 801b830:	017d7840 	.word	0x017d7840

0801b834 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 801b834:	b580      	push	{r7, lr}
 801b836:	b086      	sub	sp, #24
 801b838:	af00      	add	r7, sp, #0
 801b83a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 801b83c:	687b      	ldr	r3, [r7, #4]
 801b83e:	2b00      	cmp	r3, #0
 801b840:	d101      	bne.n	801b846 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 801b842:	2301      	movs	r3, #1
 801b844:	e28d      	b.n	801bd62 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 801b846:	687b      	ldr	r3, [r7, #4]
 801b848:	681b      	ldr	r3, [r3, #0]
 801b84a:	f003 0301 	and.w	r3, r3, #1
 801b84e:	2b00      	cmp	r3, #0
 801b850:	f000 8083 	beq.w	801b95a <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 801b854:	4b94      	ldr	r3, [pc, #592]	; (801baa8 <HAL_RCC_OscConfig+0x274>)
 801b856:	689b      	ldr	r3, [r3, #8]
 801b858:	f003 030c 	and.w	r3, r3, #12
 801b85c:	2b04      	cmp	r3, #4
 801b85e:	d019      	beq.n	801b894 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 801b860:	4b91      	ldr	r3, [pc, #580]	; (801baa8 <HAL_RCC_OscConfig+0x274>)
 801b862:	689b      	ldr	r3, [r3, #8]
 801b864:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 801b868:	2b08      	cmp	r3, #8
 801b86a:	d106      	bne.n	801b87a <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 801b86c:	4b8e      	ldr	r3, [pc, #568]	; (801baa8 <HAL_RCC_OscConfig+0x274>)
 801b86e:	685b      	ldr	r3, [r3, #4]
 801b870:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 801b874:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 801b878:	d00c      	beq.n	801b894 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 801b87a:	4b8b      	ldr	r3, [pc, #556]	; (801baa8 <HAL_RCC_OscConfig+0x274>)
 801b87c:	689b      	ldr	r3, [r3, #8]
 801b87e:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 801b882:	2b0c      	cmp	r3, #12
 801b884:	d112      	bne.n	801b8ac <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 801b886:	4b88      	ldr	r3, [pc, #544]	; (801baa8 <HAL_RCC_OscConfig+0x274>)
 801b888:	685b      	ldr	r3, [r3, #4]
 801b88a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 801b88e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 801b892:	d10b      	bne.n	801b8ac <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 801b894:	4b84      	ldr	r3, [pc, #528]	; (801baa8 <HAL_RCC_OscConfig+0x274>)
 801b896:	681b      	ldr	r3, [r3, #0]
 801b898:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801b89c:	2b00      	cmp	r3, #0
 801b89e:	d05b      	beq.n	801b958 <HAL_RCC_OscConfig+0x124>
 801b8a0:	687b      	ldr	r3, [r7, #4]
 801b8a2:	685b      	ldr	r3, [r3, #4]
 801b8a4:	2b00      	cmp	r3, #0
 801b8a6:	d157      	bne.n	801b958 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 801b8a8:	2301      	movs	r3, #1
 801b8aa:	e25a      	b.n	801bd62 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 801b8ac:	687b      	ldr	r3, [r7, #4]
 801b8ae:	685b      	ldr	r3, [r3, #4]
 801b8b0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801b8b4:	d106      	bne.n	801b8c4 <HAL_RCC_OscConfig+0x90>
 801b8b6:	4b7c      	ldr	r3, [pc, #496]	; (801baa8 <HAL_RCC_OscConfig+0x274>)
 801b8b8:	681b      	ldr	r3, [r3, #0]
 801b8ba:	4a7b      	ldr	r2, [pc, #492]	; (801baa8 <HAL_RCC_OscConfig+0x274>)
 801b8bc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 801b8c0:	6013      	str	r3, [r2, #0]
 801b8c2:	e01d      	b.n	801b900 <HAL_RCC_OscConfig+0xcc>
 801b8c4:	687b      	ldr	r3, [r7, #4]
 801b8c6:	685b      	ldr	r3, [r3, #4]
 801b8c8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 801b8cc:	d10c      	bne.n	801b8e8 <HAL_RCC_OscConfig+0xb4>
 801b8ce:	4b76      	ldr	r3, [pc, #472]	; (801baa8 <HAL_RCC_OscConfig+0x274>)
 801b8d0:	681b      	ldr	r3, [r3, #0]
 801b8d2:	4a75      	ldr	r2, [pc, #468]	; (801baa8 <HAL_RCC_OscConfig+0x274>)
 801b8d4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 801b8d8:	6013      	str	r3, [r2, #0]
 801b8da:	4b73      	ldr	r3, [pc, #460]	; (801baa8 <HAL_RCC_OscConfig+0x274>)
 801b8dc:	681b      	ldr	r3, [r3, #0]
 801b8de:	4a72      	ldr	r2, [pc, #456]	; (801baa8 <HAL_RCC_OscConfig+0x274>)
 801b8e0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 801b8e4:	6013      	str	r3, [r2, #0]
 801b8e6:	e00b      	b.n	801b900 <HAL_RCC_OscConfig+0xcc>
 801b8e8:	4b6f      	ldr	r3, [pc, #444]	; (801baa8 <HAL_RCC_OscConfig+0x274>)
 801b8ea:	681b      	ldr	r3, [r3, #0]
 801b8ec:	4a6e      	ldr	r2, [pc, #440]	; (801baa8 <HAL_RCC_OscConfig+0x274>)
 801b8ee:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 801b8f2:	6013      	str	r3, [r2, #0]
 801b8f4:	4b6c      	ldr	r3, [pc, #432]	; (801baa8 <HAL_RCC_OscConfig+0x274>)
 801b8f6:	681b      	ldr	r3, [r3, #0]
 801b8f8:	4a6b      	ldr	r2, [pc, #428]	; (801baa8 <HAL_RCC_OscConfig+0x274>)
 801b8fa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 801b8fe:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 801b900:	687b      	ldr	r3, [r7, #4]
 801b902:	685b      	ldr	r3, [r3, #4]
 801b904:	2b00      	cmp	r3, #0
 801b906:	d013      	beq.n	801b930 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801b908:	f7fc fbcc 	bl	80180a4 <HAL_GetTick>
 801b90c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 801b90e:	e008      	b.n	801b922 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 801b910:	f7fc fbc8 	bl	80180a4 <HAL_GetTick>
 801b914:	4602      	mov	r2, r0
 801b916:	693b      	ldr	r3, [r7, #16]
 801b918:	1ad3      	subs	r3, r2, r3
 801b91a:	2b64      	cmp	r3, #100	; 0x64
 801b91c:	d901      	bls.n	801b922 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 801b91e:	2303      	movs	r3, #3
 801b920:	e21f      	b.n	801bd62 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 801b922:	4b61      	ldr	r3, [pc, #388]	; (801baa8 <HAL_RCC_OscConfig+0x274>)
 801b924:	681b      	ldr	r3, [r3, #0]
 801b926:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801b92a:	2b00      	cmp	r3, #0
 801b92c:	d0f0      	beq.n	801b910 <HAL_RCC_OscConfig+0xdc>
 801b92e:	e014      	b.n	801b95a <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801b930:	f7fc fbb8 	bl	80180a4 <HAL_GetTick>
 801b934:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 801b936:	e008      	b.n	801b94a <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 801b938:	f7fc fbb4 	bl	80180a4 <HAL_GetTick>
 801b93c:	4602      	mov	r2, r0
 801b93e:	693b      	ldr	r3, [r7, #16]
 801b940:	1ad3      	subs	r3, r2, r3
 801b942:	2b64      	cmp	r3, #100	; 0x64
 801b944:	d901      	bls.n	801b94a <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 801b946:	2303      	movs	r3, #3
 801b948:	e20b      	b.n	801bd62 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 801b94a:	4b57      	ldr	r3, [pc, #348]	; (801baa8 <HAL_RCC_OscConfig+0x274>)
 801b94c:	681b      	ldr	r3, [r3, #0]
 801b94e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801b952:	2b00      	cmp	r3, #0
 801b954:	d1f0      	bne.n	801b938 <HAL_RCC_OscConfig+0x104>
 801b956:	e000      	b.n	801b95a <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 801b958:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 801b95a:	687b      	ldr	r3, [r7, #4]
 801b95c:	681b      	ldr	r3, [r3, #0]
 801b95e:	f003 0302 	and.w	r3, r3, #2
 801b962:	2b00      	cmp	r3, #0
 801b964:	d06f      	beq.n	801ba46 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 801b966:	4b50      	ldr	r3, [pc, #320]	; (801baa8 <HAL_RCC_OscConfig+0x274>)
 801b968:	689b      	ldr	r3, [r3, #8]
 801b96a:	f003 030c 	and.w	r3, r3, #12
 801b96e:	2b00      	cmp	r3, #0
 801b970:	d017      	beq.n	801b9a2 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 801b972:	4b4d      	ldr	r3, [pc, #308]	; (801baa8 <HAL_RCC_OscConfig+0x274>)
 801b974:	689b      	ldr	r3, [r3, #8]
 801b976:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 801b97a:	2b08      	cmp	r3, #8
 801b97c:	d105      	bne.n	801b98a <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 801b97e:	4b4a      	ldr	r3, [pc, #296]	; (801baa8 <HAL_RCC_OscConfig+0x274>)
 801b980:	685b      	ldr	r3, [r3, #4]
 801b982:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 801b986:	2b00      	cmp	r3, #0
 801b988:	d00b      	beq.n	801b9a2 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 801b98a:	4b47      	ldr	r3, [pc, #284]	; (801baa8 <HAL_RCC_OscConfig+0x274>)
 801b98c:	689b      	ldr	r3, [r3, #8]
 801b98e:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 801b992:	2b0c      	cmp	r3, #12
 801b994:	d11c      	bne.n	801b9d0 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 801b996:	4b44      	ldr	r3, [pc, #272]	; (801baa8 <HAL_RCC_OscConfig+0x274>)
 801b998:	685b      	ldr	r3, [r3, #4]
 801b99a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 801b99e:	2b00      	cmp	r3, #0
 801b9a0:	d116      	bne.n	801b9d0 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 801b9a2:	4b41      	ldr	r3, [pc, #260]	; (801baa8 <HAL_RCC_OscConfig+0x274>)
 801b9a4:	681b      	ldr	r3, [r3, #0]
 801b9a6:	f003 0302 	and.w	r3, r3, #2
 801b9aa:	2b00      	cmp	r3, #0
 801b9ac:	d005      	beq.n	801b9ba <HAL_RCC_OscConfig+0x186>
 801b9ae:	687b      	ldr	r3, [r7, #4]
 801b9b0:	68db      	ldr	r3, [r3, #12]
 801b9b2:	2b01      	cmp	r3, #1
 801b9b4:	d001      	beq.n	801b9ba <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 801b9b6:	2301      	movs	r3, #1
 801b9b8:	e1d3      	b.n	801bd62 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 801b9ba:	4b3b      	ldr	r3, [pc, #236]	; (801baa8 <HAL_RCC_OscConfig+0x274>)
 801b9bc:	681b      	ldr	r3, [r3, #0]
 801b9be:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 801b9c2:	687b      	ldr	r3, [r7, #4]
 801b9c4:	691b      	ldr	r3, [r3, #16]
 801b9c6:	00db      	lsls	r3, r3, #3
 801b9c8:	4937      	ldr	r1, [pc, #220]	; (801baa8 <HAL_RCC_OscConfig+0x274>)
 801b9ca:	4313      	orrs	r3, r2
 801b9cc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 801b9ce:	e03a      	b.n	801ba46 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 801b9d0:	687b      	ldr	r3, [r7, #4]
 801b9d2:	68db      	ldr	r3, [r3, #12]
 801b9d4:	2b00      	cmp	r3, #0
 801b9d6:	d020      	beq.n	801ba1a <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 801b9d8:	4b34      	ldr	r3, [pc, #208]	; (801baac <HAL_RCC_OscConfig+0x278>)
 801b9da:	2201      	movs	r2, #1
 801b9dc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801b9de:	f7fc fb61 	bl	80180a4 <HAL_GetTick>
 801b9e2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 801b9e4:	e008      	b.n	801b9f8 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 801b9e6:	f7fc fb5d 	bl	80180a4 <HAL_GetTick>
 801b9ea:	4602      	mov	r2, r0
 801b9ec:	693b      	ldr	r3, [r7, #16]
 801b9ee:	1ad3      	subs	r3, r2, r3
 801b9f0:	2b02      	cmp	r3, #2
 801b9f2:	d901      	bls.n	801b9f8 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 801b9f4:	2303      	movs	r3, #3
 801b9f6:	e1b4      	b.n	801bd62 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 801b9f8:	4b2b      	ldr	r3, [pc, #172]	; (801baa8 <HAL_RCC_OscConfig+0x274>)
 801b9fa:	681b      	ldr	r3, [r3, #0]
 801b9fc:	f003 0302 	and.w	r3, r3, #2
 801ba00:	2b00      	cmp	r3, #0
 801ba02:	d0f0      	beq.n	801b9e6 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 801ba04:	4b28      	ldr	r3, [pc, #160]	; (801baa8 <HAL_RCC_OscConfig+0x274>)
 801ba06:	681b      	ldr	r3, [r3, #0]
 801ba08:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 801ba0c:	687b      	ldr	r3, [r7, #4]
 801ba0e:	691b      	ldr	r3, [r3, #16]
 801ba10:	00db      	lsls	r3, r3, #3
 801ba12:	4925      	ldr	r1, [pc, #148]	; (801baa8 <HAL_RCC_OscConfig+0x274>)
 801ba14:	4313      	orrs	r3, r2
 801ba16:	600b      	str	r3, [r1, #0]
 801ba18:	e015      	b.n	801ba46 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 801ba1a:	4b24      	ldr	r3, [pc, #144]	; (801baac <HAL_RCC_OscConfig+0x278>)
 801ba1c:	2200      	movs	r2, #0
 801ba1e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801ba20:	f7fc fb40 	bl	80180a4 <HAL_GetTick>
 801ba24:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 801ba26:	e008      	b.n	801ba3a <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 801ba28:	f7fc fb3c 	bl	80180a4 <HAL_GetTick>
 801ba2c:	4602      	mov	r2, r0
 801ba2e:	693b      	ldr	r3, [r7, #16]
 801ba30:	1ad3      	subs	r3, r2, r3
 801ba32:	2b02      	cmp	r3, #2
 801ba34:	d901      	bls.n	801ba3a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 801ba36:	2303      	movs	r3, #3
 801ba38:	e193      	b.n	801bd62 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 801ba3a:	4b1b      	ldr	r3, [pc, #108]	; (801baa8 <HAL_RCC_OscConfig+0x274>)
 801ba3c:	681b      	ldr	r3, [r3, #0]
 801ba3e:	f003 0302 	and.w	r3, r3, #2
 801ba42:	2b00      	cmp	r3, #0
 801ba44:	d1f0      	bne.n	801ba28 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 801ba46:	687b      	ldr	r3, [r7, #4]
 801ba48:	681b      	ldr	r3, [r3, #0]
 801ba4a:	f003 0308 	and.w	r3, r3, #8
 801ba4e:	2b00      	cmp	r3, #0
 801ba50:	d036      	beq.n	801bac0 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 801ba52:	687b      	ldr	r3, [r7, #4]
 801ba54:	695b      	ldr	r3, [r3, #20]
 801ba56:	2b00      	cmp	r3, #0
 801ba58:	d016      	beq.n	801ba88 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 801ba5a:	4b15      	ldr	r3, [pc, #84]	; (801bab0 <HAL_RCC_OscConfig+0x27c>)
 801ba5c:	2201      	movs	r2, #1
 801ba5e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 801ba60:	f7fc fb20 	bl	80180a4 <HAL_GetTick>
 801ba64:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 801ba66:	e008      	b.n	801ba7a <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 801ba68:	f7fc fb1c 	bl	80180a4 <HAL_GetTick>
 801ba6c:	4602      	mov	r2, r0
 801ba6e:	693b      	ldr	r3, [r7, #16]
 801ba70:	1ad3      	subs	r3, r2, r3
 801ba72:	2b02      	cmp	r3, #2
 801ba74:	d901      	bls.n	801ba7a <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 801ba76:	2303      	movs	r3, #3
 801ba78:	e173      	b.n	801bd62 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 801ba7a:	4b0b      	ldr	r3, [pc, #44]	; (801baa8 <HAL_RCC_OscConfig+0x274>)
 801ba7c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801ba7e:	f003 0302 	and.w	r3, r3, #2
 801ba82:	2b00      	cmp	r3, #0
 801ba84:	d0f0      	beq.n	801ba68 <HAL_RCC_OscConfig+0x234>
 801ba86:	e01b      	b.n	801bac0 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 801ba88:	4b09      	ldr	r3, [pc, #36]	; (801bab0 <HAL_RCC_OscConfig+0x27c>)
 801ba8a:	2200      	movs	r2, #0
 801ba8c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 801ba8e:	f7fc fb09 	bl	80180a4 <HAL_GetTick>
 801ba92:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 801ba94:	e00e      	b.n	801bab4 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 801ba96:	f7fc fb05 	bl	80180a4 <HAL_GetTick>
 801ba9a:	4602      	mov	r2, r0
 801ba9c:	693b      	ldr	r3, [r7, #16]
 801ba9e:	1ad3      	subs	r3, r2, r3
 801baa0:	2b02      	cmp	r3, #2
 801baa2:	d907      	bls.n	801bab4 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 801baa4:	2303      	movs	r3, #3
 801baa6:	e15c      	b.n	801bd62 <HAL_RCC_OscConfig+0x52e>
 801baa8:	40023800 	.word	0x40023800
 801baac:	42470000 	.word	0x42470000
 801bab0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 801bab4:	4b8a      	ldr	r3, [pc, #552]	; (801bce0 <HAL_RCC_OscConfig+0x4ac>)
 801bab6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801bab8:	f003 0302 	and.w	r3, r3, #2
 801babc:	2b00      	cmp	r3, #0
 801babe:	d1ea      	bne.n	801ba96 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 801bac0:	687b      	ldr	r3, [r7, #4]
 801bac2:	681b      	ldr	r3, [r3, #0]
 801bac4:	f003 0304 	and.w	r3, r3, #4
 801bac8:	2b00      	cmp	r3, #0
 801baca:	f000 8097 	beq.w	801bbfc <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 801bace:	2300      	movs	r3, #0
 801bad0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 801bad2:	4b83      	ldr	r3, [pc, #524]	; (801bce0 <HAL_RCC_OscConfig+0x4ac>)
 801bad4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801bad6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 801bada:	2b00      	cmp	r3, #0
 801badc:	d10f      	bne.n	801bafe <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 801bade:	2300      	movs	r3, #0
 801bae0:	60bb      	str	r3, [r7, #8]
 801bae2:	4b7f      	ldr	r3, [pc, #508]	; (801bce0 <HAL_RCC_OscConfig+0x4ac>)
 801bae4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801bae6:	4a7e      	ldr	r2, [pc, #504]	; (801bce0 <HAL_RCC_OscConfig+0x4ac>)
 801bae8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 801baec:	6413      	str	r3, [r2, #64]	; 0x40
 801baee:	4b7c      	ldr	r3, [pc, #496]	; (801bce0 <HAL_RCC_OscConfig+0x4ac>)
 801baf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801baf2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 801baf6:	60bb      	str	r3, [r7, #8]
 801baf8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 801bafa:	2301      	movs	r3, #1
 801bafc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 801bafe:	4b79      	ldr	r3, [pc, #484]	; (801bce4 <HAL_RCC_OscConfig+0x4b0>)
 801bb00:	681b      	ldr	r3, [r3, #0]
 801bb02:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801bb06:	2b00      	cmp	r3, #0
 801bb08:	d118      	bne.n	801bb3c <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 801bb0a:	4b76      	ldr	r3, [pc, #472]	; (801bce4 <HAL_RCC_OscConfig+0x4b0>)
 801bb0c:	681b      	ldr	r3, [r3, #0]
 801bb0e:	4a75      	ldr	r2, [pc, #468]	; (801bce4 <HAL_RCC_OscConfig+0x4b0>)
 801bb10:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 801bb14:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 801bb16:	f7fc fac5 	bl	80180a4 <HAL_GetTick>
 801bb1a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 801bb1c:	e008      	b.n	801bb30 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 801bb1e:	f7fc fac1 	bl	80180a4 <HAL_GetTick>
 801bb22:	4602      	mov	r2, r0
 801bb24:	693b      	ldr	r3, [r7, #16]
 801bb26:	1ad3      	subs	r3, r2, r3
 801bb28:	2b02      	cmp	r3, #2
 801bb2a:	d901      	bls.n	801bb30 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 801bb2c:	2303      	movs	r3, #3
 801bb2e:	e118      	b.n	801bd62 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 801bb30:	4b6c      	ldr	r3, [pc, #432]	; (801bce4 <HAL_RCC_OscConfig+0x4b0>)
 801bb32:	681b      	ldr	r3, [r3, #0]
 801bb34:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801bb38:	2b00      	cmp	r3, #0
 801bb3a:	d0f0      	beq.n	801bb1e <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 801bb3c:	687b      	ldr	r3, [r7, #4]
 801bb3e:	689b      	ldr	r3, [r3, #8]
 801bb40:	2b01      	cmp	r3, #1
 801bb42:	d106      	bne.n	801bb52 <HAL_RCC_OscConfig+0x31e>
 801bb44:	4b66      	ldr	r3, [pc, #408]	; (801bce0 <HAL_RCC_OscConfig+0x4ac>)
 801bb46:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801bb48:	4a65      	ldr	r2, [pc, #404]	; (801bce0 <HAL_RCC_OscConfig+0x4ac>)
 801bb4a:	f043 0301 	orr.w	r3, r3, #1
 801bb4e:	6713      	str	r3, [r2, #112]	; 0x70
 801bb50:	e01c      	b.n	801bb8c <HAL_RCC_OscConfig+0x358>
 801bb52:	687b      	ldr	r3, [r7, #4]
 801bb54:	689b      	ldr	r3, [r3, #8]
 801bb56:	2b05      	cmp	r3, #5
 801bb58:	d10c      	bne.n	801bb74 <HAL_RCC_OscConfig+0x340>
 801bb5a:	4b61      	ldr	r3, [pc, #388]	; (801bce0 <HAL_RCC_OscConfig+0x4ac>)
 801bb5c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801bb5e:	4a60      	ldr	r2, [pc, #384]	; (801bce0 <HAL_RCC_OscConfig+0x4ac>)
 801bb60:	f043 0304 	orr.w	r3, r3, #4
 801bb64:	6713      	str	r3, [r2, #112]	; 0x70
 801bb66:	4b5e      	ldr	r3, [pc, #376]	; (801bce0 <HAL_RCC_OscConfig+0x4ac>)
 801bb68:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801bb6a:	4a5d      	ldr	r2, [pc, #372]	; (801bce0 <HAL_RCC_OscConfig+0x4ac>)
 801bb6c:	f043 0301 	orr.w	r3, r3, #1
 801bb70:	6713      	str	r3, [r2, #112]	; 0x70
 801bb72:	e00b      	b.n	801bb8c <HAL_RCC_OscConfig+0x358>
 801bb74:	4b5a      	ldr	r3, [pc, #360]	; (801bce0 <HAL_RCC_OscConfig+0x4ac>)
 801bb76:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801bb78:	4a59      	ldr	r2, [pc, #356]	; (801bce0 <HAL_RCC_OscConfig+0x4ac>)
 801bb7a:	f023 0301 	bic.w	r3, r3, #1
 801bb7e:	6713      	str	r3, [r2, #112]	; 0x70
 801bb80:	4b57      	ldr	r3, [pc, #348]	; (801bce0 <HAL_RCC_OscConfig+0x4ac>)
 801bb82:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801bb84:	4a56      	ldr	r2, [pc, #344]	; (801bce0 <HAL_RCC_OscConfig+0x4ac>)
 801bb86:	f023 0304 	bic.w	r3, r3, #4
 801bb8a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 801bb8c:	687b      	ldr	r3, [r7, #4]
 801bb8e:	689b      	ldr	r3, [r3, #8]
 801bb90:	2b00      	cmp	r3, #0
 801bb92:	d015      	beq.n	801bbc0 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 801bb94:	f7fc fa86 	bl	80180a4 <HAL_GetTick>
 801bb98:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 801bb9a:	e00a      	b.n	801bbb2 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 801bb9c:	f7fc fa82 	bl	80180a4 <HAL_GetTick>
 801bba0:	4602      	mov	r2, r0
 801bba2:	693b      	ldr	r3, [r7, #16]
 801bba4:	1ad3      	subs	r3, r2, r3
 801bba6:	f241 3288 	movw	r2, #5000	; 0x1388
 801bbaa:	4293      	cmp	r3, r2
 801bbac:	d901      	bls.n	801bbb2 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 801bbae:	2303      	movs	r3, #3
 801bbb0:	e0d7      	b.n	801bd62 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 801bbb2:	4b4b      	ldr	r3, [pc, #300]	; (801bce0 <HAL_RCC_OscConfig+0x4ac>)
 801bbb4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801bbb6:	f003 0302 	and.w	r3, r3, #2
 801bbba:	2b00      	cmp	r3, #0
 801bbbc:	d0ee      	beq.n	801bb9c <HAL_RCC_OscConfig+0x368>
 801bbbe:	e014      	b.n	801bbea <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 801bbc0:	f7fc fa70 	bl	80180a4 <HAL_GetTick>
 801bbc4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 801bbc6:	e00a      	b.n	801bbde <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 801bbc8:	f7fc fa6c 	bl	80180a4 <HAL_GetTick>
 801bbcc:	4602      	mov	r2, r0
 801bbce:	693b      	ldr	r3, [r7, #16]
 801bbd0:	1ad3      	subs	r3, r2, r3
 801bbd2:	f241 3288 	movw	r2, #5000	; 0x1388
 801bbd6:	4293      	cmp	r3, r2
 801bbd8:	d901      	bls.n	801bbde <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 801bbda:	2303      	movs	r3, #3
 801bbdc:	e0c1      	b.n	801bd62 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 801bbde:	4b40      	ldr	r3, [pc, #256]	; (801bce0 <HAL_RCC_OscConfig+0x4ac>)
 801bbe0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801bbe2:	f003 0302 	and.w	r3, r3, #2
 801bbe6:	2b00      	cmp	r3, #0
 801bbe8:	d1ee      	bne.n	801bbc8 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 801bbea:	7dfb      	ldrb	r3, [r7, #23]
 801bbec:	2b01      	cmp	r3, #1
 801bbee:	d105      	bne.n	801bbfc <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 801bbf0:	4b3b      	ldr	r3, [pc, #236]	; (801bce0 <HAL_RCC_OscConfig+0x4ac>)
 801bbf2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801bbf4:	4a3a      	ldr	r2, [pc, #232]	; (801bce0 <HAL_RCC_OscConfig+0x4ac>)
 801bbf6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 801bbfa:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 801bbfc:	687b      	ldr	r3, [r7, #4]
 801bbfe:	699b      	ldr	r3, [r3, #24]
 801bc00:	2b00      	cmp	r3, #0
 801bc02:	f000 80ad 	beq.w	801bd60 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 801bc06:	4b36      	ldr	r3, [pc, #216]	; (801bce0 <HAL_RCC_OscConfig+0x4ac>)
 801bc08:	689b      	ldr	r3, [r3, #8]
 801bc0a:	f003 030c 	and.w	r3, r3, #12
 801bc0e:	2b08      	cmp	r3, #8
 801bc10:	d060      	beq.n	801bcd4 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 801bc12:	687b      	ldr	r3, [r7, #4]
 801bc14:	699b      	ldr	r3, [r3, #24]
 801bc16:	2b02      	cmp	r3, #2
 801bc18:	d145      	bne.n	801bca6 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 801bc1a:	4b33      	ldr	r3, [pc, #204]	; (801bce8 <HAL_RCC_OscConfig+0x4b4>)
 801bc1c:	2200      	movs	r2, #0
 801bc1e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801bc20:	f7fc fa40 	bl	80180a4 <HAL_GetTick>
 801bc24:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 801bc26:	e008      	b.n	801bc3a <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 801bc28:	f7fc fa3c 	bl	80180a4 <HAL_GetTick>
 801bc2c:	4602      	mov	r2, r0
 801bc2e:	693b      	ldr	r3, [r7, #16]
 801bc30:	1ad3      	subs	r3, r2, r3
 801bc32:	2b02      	cmp	r3, #2
 801bc34:	d901      	bls.n	801bc3a <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 801bc36:	2303      	movs	r3, #3
 801bc38:	e093      	b.n	801bd62 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 801bc3a:	4b29      	ldr	r3, [pc, #164]	; (801bce0 <HAL_RCC_OscConfig+0x4ac>)
 801bc3c:	681b      	ldr	r3, [r3, #0]
 801bc3e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 801bc42:	2b00      	cmp	r3, #0
 801bc44:	d1f0      	bne.n	801bc28 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 801bc46:	687b      	ldr	r3, [r7, #4]
 801bc48:	69da      	ldr	r2, [r3, #28]
 801bc4a:	687b      	ldr	r3, [r7, #4]
 801bc4c:	6a1b      	ldr	r3, [r3, #32]
 801bc4e:	431a      	orrs	r2, r3
 801bc50:	687b      	ldr	r3, [r7, #4]
 801bc52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801bc54:	019b      	lsls	r3, r3, #6
 801bc56:	431a      	orrs	r2, r3
 801bc58:	687b      	ldr	r3, [r7, #4]
 801bc5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801bc5c:	085b      	lsrs	r3, r3, #1
 801bc5e:	3b01      	subs	r3, #1
 801bc60:	041b      	lsls	r3, r3, #16
 801bc62:	431a      	orrs	r2, r3
 801bc64:	687b      	ldr	r3, [r7, #4]
 801bc66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801bc68:	061b      	lsls	r3, r3, #24
 801bc6a:	431a      	orrs	r2, r3
 801bc6c:	687b      	ldr	r3, [r7, #4]
 801bc6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801bc70:	071b      	lsls	r3, r3, #28
 801bc72:	491b      	ldr	r1, [pc, #108]	; (801bce0 <HAL_RCC_OscConfig+0x4ac>)
 801bc74:	4313      	orrs	r3, r2
 801bc76:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 801bc78:	4b1b      	ldr	r3, [pc, #108]	; (801bce8 <HAL_RCC_OscConfig+0x4b4>)
 801bc7a:	2201      	movs	r2, #1
 801bc7c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801bc7e:	f7fc fa11 	bl	80180a4 <HAL_GetTick>
 801bc82:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 801bc84:	e008      	b.n	801bc98 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 801bc86:	f7fc fa0d 	bl	80180a4 <HAL_GetTick>
 801bc8a:	4602      	mov	r2, r0
 801bc8c:	693b      	ldr	r3, [r7, #16]
 801bc8e:	1ad3      	subs	r3, r2, r3
 801bc90:	2b02      	cmp	r3, #2
 801bc92:	d901      	bls.n	801bc98 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 801bc94:	2303      	movs	r3, #3
 801bc96:	e064      	b.n	801bd62 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 801bc98:	4b11      	ldr	r3, [pc, #68]	; (801bce0 <HAL_RCC_OscConfig+0x4ac>)
 801bc9a:	681b      	ldr	r3, [r3, #0]
 801bc9c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 801bca0:	2b00      	cmp	r3, #0
 801bca2:	d0f0      	beq.n	801bc86 <HAL_RCC_OscConfig+0x452>
 801bca4:	e05c      	b.n	801bd60 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 801bca6:	4b10      	ldr	r3, [pc, #64]	; (801bce8 <HAL_RCC_OscConfig+0x4b4>)
 801bca8:	2200      	movs	r2, #0
 801bcaa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801bcac:	f7fc f9fa 	bl	80180a4 <HAL_GetTick>
 801bcb0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 801bcb2:	e008      	b.n	801bcc6 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 801bcb4:	f7fc f9f6 	bl	80180a4 <HAL_GetTick>
 801bcb8:	4602      	mov	r2, r0
 801bcba:	693b      	ldr	r3, [r7, #16]
 801bcbc:	1ad3      	subs	r3, r2, r3
 801bcbe:	2b02      	cmp	r3, #2
 801bcc0:	d901      	bls.n	801bcc6 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 801bcc2:	2303      	movs	r3, #3
 801bcc4:	e04d      	b.n	801bd62 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 801bcc6:	4b06      	ldr	r3, [pc, #24]	; (801bce0 <HAL_RCC_OscConfig+0x4ac>)
 801bcc8:	681b      	ldr	r3, [r3, #0]
 801bcca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 801bcce:	2b00      	cmp	r3, #0
 801bcd0:	d1f0      	bne.n	801bcb4 <HAL_RCC_OscConfig+0x480>
 801bcd2:	e045      	b.n	801bd60 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 801bcd4:	687b      	ldr	r3, [r7, #4]
 801bcd6:	699b      	ldr	r3, [r3, #24]
 801bcd8:	2b01      	cmp	r3, #1
 801bcda:	d107      	bne.n	801bcec <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 801bcdc:	2301      	movs	r3, #1
 801bcde:	e040      	b.n	801bd62 <HAL_RCC_OscConfig+0x52e>
 801bce0:	40023800 	.word	0x40023800
 801bce4:	40007000 	.word	0x40007000
 801bce8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 801bcec:	4b1f      	ldr	r3, [pc, #124]	; (801bd6c <HAL_RCC_OscConfig+0x538>)
 801bcee:	685b      	ldr	r3, [r3, #4]
 801bcf0:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 801bcf2:	687b      	ldr	r3, [r7, #4]
 801bcf4:	699b      	ldr	r3, [r3, #24]
 801bcf6:	2b01      	cmp	r3, #1
 801bcf8:	d030      	beq.n	801bd5c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 801bcfa:	68fb      	ldr	r3, [r7, #12]
 801bcfc:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 801bd00:	687b      	ldr	r3, [r7, #4]
 801bd02:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 801bd04:	429a      	cmp	r2, r3
 801bd06:	d129      	bne.n	801bd5c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 801bd08:	68fb      	ldr	r3, [r7, #12]
 801bd0a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 801bd0e:	687b      	ldr	r3, [r7, #4]
 801bd10:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 801bd12:	429a      	cmp	r2, r3
 801bd14:	d122      	bne.n	801bd5c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 801bd16:	68fa      	ldr	r2, [r7, #12]
 801bd18:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 801bd1c:	4013      	ands	r3, r2
 801bd1e:	687a      	ldr	r2, [r7, #4]
 801bd20:	6a52      	ldr	r2, [r2, #36]	; 0x24
 801bd22:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 801bd24:	4293      	cmp	r3, r2
 801bd26:	d119      	bne.n	801bd5c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 801bd28:	68fb      	ldr	r3, [r7, #12]
 801bd2a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 801bd2e:	687b      	ldr	r3, [r7, #4]
 801bd30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801bd32:	085b      	lsrs	r3, r3, #1
 801bd34:	3b01      	subs	r3, #1
 801bd36:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 801bd38:	429a      	cmp	r2, r3
 801bd3a:	d10f      	bne.n	801bd5c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 801bd3c:	68fb      	ldr	r3, [r7, #12]
 801bd3e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 801bd42:	687b      	ldr	r3, [r7, #4]
 801bd44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801bd46:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 801bd48:	429a      	cmp	r2, r3
 801bd4a:	d107      	bne.n	801bd5c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 801bd4c:	68fb      	ldr	r3, [r7, #12]
 801bd4e:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 801bd52:	687b      	ldr	r3, [r7, #4]
 801bd54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801bd56:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 801bd58:	429a      	cmp	r2, r3
 801bd5a:	d001      	beq.n	801bd60 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 801bd5c:	2301      	movs	r3, #1
 801bd5e:	e000      	b.n	801bd62 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 801bd60:	2300      	movs	r3, #0
}
 801bd62:	4618      	mov	r0, r3
 801bd64:	3718      	adds	r7, #24
 801bd66:	46bd      	mov	sp, r7
 801bd68:	bd80      	pop	{r7, pc}
 801bd6a:	bf00      	nop
 801bd6c:	40023800 	.word	0x40023800

0801bd70 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 801bd70:	b580      	push	{r7, lr}
 801bd72:	b082      	sub	sp, #8
 801bd74:	af00      	add	r7, sp, #0
 801bd76:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 801bd78:	687b      	ldr	r3, [r7, #4]
 801bd7a:	2b00      	cmp	r3, #0
 801bd7c:	d101      	bne.n	801bd82 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 801bd7e:	2301      	movs	r3, #1
 801bd80:	e07b      	b.n	801be7a <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 801bd82:	687b      	ldr	r3, [r7, #4]
 801bd84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801bd86:	2b00      	cmp	r3, #0
 801bd88:	d108      	bne.n	801bd9c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 801bd8a:	687b      	ldr	r3, [r7, #4]
 801bd8c:	685b      	ldr	r3, [r3, #4]
 801bd8e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 801bd92:	d009      	beq.n	801bda8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 801bd94:	687b      	ldr	r3, [r7, #4]
 801bd96:	2200      	movs	r2, #0
 801bd98:	61da      	str	r2, [r3, #28]
 801bd9a:	e005      	b.n	801bda8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 801bd9c:	687b      	ldr	r3, [r7, #4]
 801bd9e:	2200      	movs	r2, #0
 801bda0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 801bda2:	687b      	ldr	r3, [r7, #4]
 801bda4:	2200      	movs	r2, #0
 801bda6:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 801bda8:	687b      	ldr	r3, [r7, #4]
 801bdaa:	2200      	movs	r2, #0
 801bdac:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 801bdae:	687b      	ldr	r3, [r7, #4]
 801bdb0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 801bdb4:	b2db      	uxtb	r3, r3
 801bdb6:	2b00      	cmp	r3, #0
 801bdb8:	d106      	bne.n	801bdc8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 801bdba:	687b      	ldr	r3, [r7, #4]
 801bdbc:	2200      	movs	r2, #0
 801bdbe:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 801bdc2:	6878      	ldr	r0, [r7, #4]
 801bdc4:	f7fb fce2 	bl	801778c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 801bdc8:	687b      	ldr	r3, [r7, #4]
 801bdca:	2202      	movs	r2, #2
 801bdcc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 801bdd0:	687b      	ldr	r3, [r7, #4]
 801bdd2:	681b      	ldr	r3, [r3, #0]
 801bdd4:	681a      	ldr	r2, [r3, #0]
 801bdd6:	687b      	ldr	r3, [r7, #4]
 801bdd8:	681b      	ldr	r3, [r3, #0]
 801bdda:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 801bdde:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 801bde0:	687b      	ldr	r3, [r7, #4]
 801bde2:	685b      	ldr	r3, [r3, #4]
 801bde4:	f403 7282 	and.w	r2, r3, #260	; 0x104
 801bde8:	687b      	ldr	r3, [r7, #4]
 801bdea:	689b      	ldr	r3, [r3, #8]
 801bdec:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 801bdf0:	431a      	orrs	r2, r3
 801bdf2:	687b      	ldr	r3, [r7, #4]
 801bdf4:	68db      	ldr	r3, [r3, #12]
 801bdf6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 801bdfa:	431a      	orrs	r2, r3
 801bdfc:	687b      	ldr	r3, [r7, #4]
 801bdfe:	691b      	ldr	r3, [r3, #16]
 801be00:	f003 0302 	and.w	r3, r3, #2
 801be04:	431a      	orrs	r2, r3
 801be06:	687b      	ldr	r3, [r7, #4]
 801be08:	695b      	ldr	r3, [r3, #20]
 801be0a:	f003 0301 	and.w	r3, r3, #1
 801be0e:	431a      	orrs	r2, r3
 801be10:	687b      	ldr	r3, [r7, #4]
 801be12:	699b      	ldr	r3, [r3, #24]
 801be14:	f403 7300 	and.w	r3, r3, #512	; 0x200
 801be18:	431a      	orrs	r2, r3
 801be1a:	687b      	ldr	r3, [r7, #4]
 801be1c:	69db      	ldr	r3, [r3, #28]
 801be1e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 801be22:	431a      	orrs	r2, r3
 801be24:	687b      	ldr	r3, [r7, #4]
 801be26:	6a1b      	ldr	r3, [r3, #32]
 801be28:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801be2c:	ea42 0103 	orr.w	r1, r2, r3
 801be30:	687b      	ldr	r3, [r7, #4]
 801be32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801be34:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 801be38:	687b      	ldr	r3, [r7, #4]
 801be3a:	681b      	ldr	r3, [r3, #0]
 801be3c:	430a      	orrs	r2, r1
 801be3e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 801be40:	687b      	ldr	r3, [r7, #4]
 801be42:	699b      	ldr	r3, [r3, #24]
 801be44:	0c1b      	lsrs	r3, r3, #16
 801be46:	f003 0104 	and.w	r1, r3, #4
 801be4a:	687b      	ldr	r3, [r7, #4]
 801be4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801be4e:	f003 0210 	and.w	r2, r3, #16
 801be52:	687b      	ldr	r3, [r7, #4]
 801be54:	681b      	ldr	r3, [r3, #0]
 801be56:	430a      	orrs	r2, r1
 801be58:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 801be5a:	687b      	ldr	r3, [r7, #4]
 801be5c:	681b      	ldr	r3, [r3, #0]
 801be5e:	69da      	ldr	r2, [r3, #28]
 801be60:	687b      	ldr	r3, [r7, #4]
 801be62:	681b      	ldr	r3, [r3, #0]
 801be64:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 801be68:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 801be6a:	687b      	ldr	r3, [r7, #4]
 801be6c:	2200      	movs	r2, #0
 801be6e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 801be70:	687b      	ldr	r3, [r7, #4]
 801be72:	2201      	movs	r2, #1
 801be74:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 801be78:	2300      	movs	r3, #0
}
 801be7a:	4618      	mov	r0, r3
 801be7c:	3708      	adds	r7, #8
 801be7e:	46bd      	mov	sp, r7
 801be80:	bd80      	pop	{r7, pc}

0801be82 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 801be82:	b580      	push	{r7, lr}
 801be84:	b088      	sub	sp, #32
 801be86:	af00      	add	r7, sp, #0
 801be88:	60f8      	str	r0, [r7, #12]
 801be8a:	60b9      	str	r1, [r7, #8]
 801be8c:	603b      	str	r3, [r7, #0]
 801be8e:	4613      	mov	r3, r2
 801be90:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 801be92:	2300      	movs	r3, #0
 801be94:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 801be96:	68fb      	ldr	r3, [r7, #12]
 801be98:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 801be9c:	2b01      	cmp	r3, #1
 801be9e:	d101      	bne.n	801bea4 <HAL_SPI_Transmit+0x22>
 801bea0:	2302      	movs	r3, #2
 801bea2:	e126      	b.n	801c0f2 <HAL_SPI_Transmit+0x270>
 801bea4:	68fb      	ldr	r3, [r7, #12]
 801bea6:	2201      	movs	r2, #1
 801bea8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 801beac:	f7fc f8fa 	bl	80180a4 <HAL_GetTick>
 801beb0:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 801beb2:	88fb      	ldrh	r3, [r7, #6]
 801beb4:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 801beb6:	68fb      	ldr	r3, [r7, #12]
 801beb8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 801bebc:	b2db      	uxtb	r3, r3
 801bebe:	2b01      	cmp	r3, #1
 801bec0:	d002      	beq.n	801bec8 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 801bec2:	2302      	movs	r3, #2
 801bec4:	77fb      	strb	r3, [r7, #31]
    goto error;
 801bec6:	e10b      	b.n	801c0e0 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 801bec8:	68bb      	ldr	r3, [r7, #8]
 801beca:	2b00      	cmp	r3, #0
 801becc:	d002      	beq.n	801bed4 <HAL_SPI_Transmit+0x52>
 801bece:	88fb      	ldrh	r3, [r7, #6]
 801bed0:	2b00      	cmp	r3, #0
 801bed2:	d102      	bne.n	801beda <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 801bed4:	2301      	movs	r3, #1
 801bed6:	77fb      	strb	r3, [r7, #31]
    goto error;
 801bed8:	e102      	b.n	801c0e0 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 801beda:	68fb      	ldr	r3, [r7, #12]
 801bedc:	2203      	movs	r2, #3
 801bede:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 801bee2:	68fb      	ldr	r3, [r7, #12]
 801bee4:	2200      	movs	r2, #0
 801bee6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 801bee8:	68fb      	ldr	r3, [r7, #12]
 801beea:	68ba      	ldr	r2, [r7, #8]
 801beec:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 801beee:	68fb      	ldr	r3, [r7, #12]
 801bef0:	88fa      	ldrh	r2, [r7, #6]
 801bef2:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 801bef4:	68fb      	ldr	r3, [r7, #12]
 801bef6:	88fa      	ldrh	r2, [r7, #6]
 801bef8:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 801befa:	68fb      	ldr	r3, [r7, #12]
 801befc:	2200      	movs	r2, #0
 801befe:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 801bf00:	68fb      	ldr	r3, [r7, #12]
 801bf02:	2200      	movs	r2, #0
 801bf04:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 801bf06:	68fb      	ldr	r3, [r7, #12]
 801bf08:	2200      	movs	r2, #0
 801bf0a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 801bf0c:	68fb      	ldr	r3, [r7, #12]
 801bf0e:	2200      	movs	r2, #0
 801bf10:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 801bf12:	68fb      	ldr	r3, [r7, #12]
 801bf14:	2200      	movs	r2, #0
 801bf16:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 801bf18:	68fb      	ldr	r3, [r7, #12]
 801bf1a:	689b      	ldr	r3, [r3, #8]
 801bf1c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801bf20:	d10f      	bne.n	801bf42 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 801bf22:	68fb      	ldr	r3, [r7, #12]
 801bf24:	681b      	ldr	r3, [r3, #0]
 801bf26:	681a      	ldr	r2, [r3, #0]
 801bf28:	68fb      	ldr	r3, [r7, #12]
 801bf2a:	681b      	ldr	r3, [r3, #0]
 801bf2c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 801bf30:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 801bf32:	68fb      	ldr	r3, [r7, #12]
 801bf34:	681b      	ldr	r3, [r3, #0]
 801bf36:	681a      	ldr	r2, [r3, #0]
 801bf38:	68fb      	ldr	r3, [r7, #12]
 801bf3a:	681b      	ldr	r3, [r3, #0]
 801bf3c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 801bf40:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 801bf42:	68fb      	ldr	r3, [r7, #12]
 801bf44:	681b      	ldr	r3, [r3, #0]
 801bf46:	681b      	ldr	r3, [r3, #0]
 801bf48:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801bf4c:	2b40      	cmp	r3, #64	; 0x40
 801bf4e:	d007      	beq.n	801bf60 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 801bf50:	68fb      	ldr	r3, [r7, #12]
 801bf52:	681b      	ldr	r3, [r3, #0]
 801bf54:	681a      	ldr	r2, [r3, #0]
 801bf56:	68fb      	ldr	r3, [r7, #12]
 801bf58:	681b      	ldr	r3, [r3, #0]
 801bf5a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 801bf5e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 801bf60:	68fb      	ldr	r3, [r7, #12]
 801bf62:	68db      	ldr	r3, [r3, #12]
 801bf64:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 801bf68:	d14b      	bne.n	801c002 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 801bf6a:	68fb      	ldr	r3, [r7, #12]
 801bf6c:	685b      	ldr	r3, [r3, #4]
 801bf6e:	2b00      	cmp	r3, #0
 801bf70:	d002      	beq.n	801bf78 <HAL_SPI_Transmit+0xf6>
 801bf72:	8afb      	ldrh	r3, [r7, #22]
 801bf74:	2b01      	cmp	r3, #1
 801bf76:	d13e      	bne.n	801bff6 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 801bf78:	68fb      	ldr	r3, [r7, #12]
 801bf7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801bf7c:	881a      	ldrh	r2, [r3, #0]
 801bf7e:	68fb      	ldr	r3, [r7, #12]
 801bf80:	681b      	ldr	r3, [r3, #0]
 801bf82:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 801bf84:	68fb      	ldr	r3, [r7, #12]
 801bf86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801bf88:	1c9a      	adds	r2, r3, #2
 801bf8a:	68fb      	ldr	r3, [r7, #12]
 801bf8c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 801bf8e:	68fb      	ldr	r3, [r7, #12]
 801bf90:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 801bf92:	b29b      	uxth	r3, r3
 801bf94:	3b01      	subs	r3, #1
 801bf96:	b29a      	uxth	r2, r3
 801bf98:	68fb      	ldr	r3, [r7, #12]
 801bf9a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 801bf9c:	e02b      	b.n	801bff6 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 801bf9e:	68fb      	ldr	r3, [r7, #12]
 801bfa0:	681b      	ldr	r3, [r3, #0]
 801bfa2:	689b      	ldr	r3, [r3, #8]
 801bfa4:	f003 0302 	and.w	r3, r3, #2
 801bfa8:	2b02      	cmp	r3, #2
 801bfaa:	d112      	bne.n	801bfd2 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 801bfac:	68fb      	ldr	r3, [r7, #12]
 801bfae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801bfb0:	881a      	ldrh	r2, [r3, #0]
 801bfb2:	68fb      	ldr	r3, [r7, #12]
 801bfb4:	681b      	ldr	r3, [r3, #0]
 801bfb6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 801bfb8:	68fb      	ldr	r3, [r7, #12]
 801bfba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801bfbc:	1c9a      	adds	r2, r3, #2
 801bfbe:	68fb      	ldr	r3, [r7, #12]
 801bfc0:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 801bfc2:	68fb      	ldr	r3, [r7, #12]
 801bfc4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 801bfc6:	b29b      	uxth	r3, r3
 801bfc8:	3b01      	subs	r3, #1
 801bfca:	b29a      	uxth	r2, r3
 801bfcc:	68fb      	ldr	r3, [r7, #12]
 801bfce:	86da      	strh	r2, [r3, #54]	; 0x36
 801bfd0:	e011      	b.n	801bff6 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 801bfd2:	f7fc f867 	bl	80180a4 <HAL_GetTick>
 801bfd6:	4602      	mov	r2, r0
 801bfd8:	69bb      	ldr	r3, [r7, #24]
 801bfda:	1ad3      	subs	r3, r2, r3
 801bfdc:	683a      	ldr	r2, [r7, #0]
 801bfde:	429a      	cmp	r2, r3
 801bfe0:	d803      	bhi.n	801bfea <HAL_SPI_Transmit+0x168>
 801bfe2:	683b      	ldr	r3, [r7, #0]
 801bfe4:	f1b3 3fff 	cmp.w	r3, #4294967295
 801bfe8:	d102      	bne.n	801bff0 <HAL_SPI_Transmit+0x16e>
 801bfea:	683b      	ldr	r3, [r7, #0]
 801bfec:	2b00      	cmp	r3, #0
 801bfee:	d102      	bne.n	801bff6 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 801bff0:	2303      	movs	r3, #3
 801bff2:	77fb      	strb	r3, [r7, #31]
          goto error;
 801bff4:	e074      	b.n	801c0e0 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 801bff6:	68fb      	ldr	r3, [r7, #12]
 801bff8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 801bffa:	b29b      	uxth	r3, r3
 801bffc:	2b00      	cmp	r3, #0
 801bffe:	d1ce      	bne.n	801bf9e <HAL_SPI_Transmit+0x11c>
 801c000:	e04c      	b.n	801c09c <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 801c002:	68fb      	ldr	r3, [r7, #12]
 801c004:	685b      	ldr	r3, [r3, #4]
 801c006:	2b00      	cmp	r3, #0
 801c008:	d002      	beq.n	801c010 <HAL_SPI_Transmit+0x18e>
 801c00a:	8afb      	ldrh	r3, [r7, #22]
 801c00c:	2b01      	cmp	r3, #1
 801c00e:	d140      	bne.n	801c092 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 801c010:	68fb      	ldr	r3, [r7, #12]
 801c012:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801c014:	68fb      	ldr	r3, [r7, #12]
 801c016:	681b      	ldr	r3, [r3, #0]
 801c018:	330c      	adds	r3, #12
 801c01a:	7812      	ldrb	r2, [r2, #0]
 801c01c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 801c01e:	68fb      	ldr	r3, [r7, #12]
 801c020:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801c022:	1c5a      	adds	r2, r3, #1
 801c024:	68fb      	ldr	r3, [r7, #12]
 801c026:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 801c028:	68fb      	ldr	r3, [r7, #12]
 801c02a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 801c02c:	b29b      	uxth	r3, r3
 801c02e:	3b01      	subs	r3, #1
 801c030:	b29a      	uxth	r2, r3
 801c032:	68fb      	ldr	r3, [r7, #12]
 801c034:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 801c036:	e02c      	b.n	801c092 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 801c038:	68fb      	ldr	r3, [r7, #12]
 801c03a:	681b      	ldr	r3, [r3, #0]
 801c03c:	689b      	ldr	r3, [r3, #8]
 801c03e:	f003 0302 	and.w	r3, r3, #2
 801c042:	2b02      	cmp	r3, #2
 801c044:	d113      	bne.n	801c06e <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 801c046:	68fb      	ldr	r3, [r7, #12]
 801c048:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801c04a:	68fb      	ldr	r3, [r7, #12]
 801c04c:	681b      	ldr	r3, [r3, #0]
 801c04e:	330c      	adds	r3, #12
 801c050:	7812      	ldrb	r2, [r2, #0]
 801c052:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 801c054:	68fb      	ldr	r3, [r7, #12]
 801c056:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801c058:	1c5a      	adds	r2, r3, #1
 801c05a:	68fb      	ldr	r3, [r7, #12]
 801c05c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 801c05e:	68fb      	ldr	r3, [r7, #12]
 801c060:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 801c062:	b29b      	uxth	r3, r3
 801c064:	3b01      	subs	r3, #1
 801c066:	b29a      	uxth	r2, r3
 801c068:	68fb      	ldr	r3, [r7, #12]
 801c06a:	86da      	strh	r2, [r3, #54]	; 0x36
 801c06c:	e011      	b.n	801c092 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 801c06e:	f7fc f819 	bl	80180a4 <HAL_GetTick>
 801c072:	4602      	mov	r2, r0
 801c074:	69bb      	ldr	r3, [r7, #24]
 801c076:	1ad3      	subs	r3, r2, r3
 801c078:	683a      	ldr	r2, [r7, #0]
 801c07a:	429a      	cmp	r2, r3
 801c07c:	d803      	bhi.n	801c086 <HAL_SPI_Transmit+0x204>
 801c07e:	683b      	ldr	r3, [r7, #0]
 801c080:	f1b3 3fff 	cmp.w	r3, #4294967295
 801c084:	d102      	bne.n	801c08c <HAL_SPI_Transmit+0x20a>
 801c086:	683b      	ldr	r3, [r7, #0]
 801c088:	2b00      	cmp	r3, #0
 801c08a:	d102      	bne.n	801c092 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 801c08c:	2303      	movs	r3, #3
 801c08e:	77fb      	strb	r3, [r7, #31]
          goto error;
 801c090:	e026      	b.n	801c0e0 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 801c092:	68fb      	ldr	r3, [r7, #12]
 801c094:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 801c096:	b29b      	uxth	r3, r3
 801c098:	2b00      	cmp	r3, #0
 801c09a:	d1cd      	bne.n	801c038 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 801c09c:	69ba      	ldr	r2, [r7, #24]
 801c09e:	6839      	ldr	r1, [r7, #0]
 801c0a0:	68f8      	ldr	r0, [r7, #12]
 801c0a2:	f000 fce9 	bl	801ca78 <SPI_EndRxTxTransaction>
 801c0a6:	4603      	mov	r3, r0
 801c0a8:	2b00      	cmp	r3, #0
 801c0aa:	d002      	beq.n	801c0b2 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 801c0ac:	68fb      	ldr	r3, [r7, #12]
 801c0ae:	2220      	movs	r2, #32
 801c0b0:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 801c0b2:	68fb      	ldr	r3, [r7, #12]
 801c0b4:	689b      	ldr	r3, [r3, #8]
 801c0b6:	2b00      	cmp	r3, #0
 801c0b8:	d10a      	bne.n	801c0d0 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 801c0ba:	2300      	movs	r3, #0
 801c0bc:	613b      	str	r3, [r7, #16]
 801c0be:	68fb      	ldr	r3, [r7, #12]
 801c0c0:	681b      	ldr	r3, [r3, #0]
 801c0c2:	68db      	ldr	r3, [r3, #12]
 801c0c4:	613b      	str	r3, [r7, #16]
 801c0c6:	68fb      	ldr	r3, [r7, #12]
 801c0c8:	681b      	ldr	r3, [r3, #0]
 801c0ca:	689b      	ldr	r3, [r3, #8]
 801c0cc:	613b      	str	r3, [r7, #16]
 801c0ce:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 801c0d0:	68fb      	ldr	r3, [r7, #12]
 801c0d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801c0d4:	2b00      	cmp	r3, #0
 801c0d6:	d002      	beq.n	801c0de <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 801c0d8:	2301      	movs	r3, #1
 801c0da:	77fb      	strb	r3, [r7, #31]
 801c0dc:	e000      	b.n	801c0e0 <HAL_SPI_Transmit+0x25e>
  }

error:
 801c0de:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 801c0e0:	68fb      	ldr	r3, [r7, #12]
 801c0e2:	2201      	movs	r2, #1
 801c0e4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 801c0e8:	68fb      	ldr	r3, [r7, #12]
 801c0ea:	2200      	movs	r2, #0
 801c0ec:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 801c0f0:	7ffb      	ldrb	r3, [r7, #31]
}
 801c0f2:	4618      	mov	r0, r3
 801c0f4:	3720      	adds	r7, #32
 801c0f6:	46bd      	mov	sp, r7
 801c0f8:	bd80      	pop	{r7, pc}

0801c0fa <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 801c0fa:	b580      	push	{r7, lr}
 801c0fc:	b088      	sub	sp, #32
 801c0fe:	af02      	add	r7, sp, #8
 801c100:	60f8      	str	r0, [r7, #12]
 801c102:	60b9      	str	r1, [r7, #8]
 801c104:	603b      	str	r3, [r7, #0]
 801c106:	4613      	mov	r3, r2
 801c108:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 801c10a:	2300      	movs	r3, #0
 801c10c:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 801c10e:	68fb      	ldr	r3, [r7, #12]
 801c110:	685b      	ldr	r3, [r3, #4]
 801c112:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 801c116:	d112      	bne.n	801c13e <HAL_SPI_Receive+0x44>
 801c118:	68fb      	ldr	r3, [r7, #12]
 801c11a:	689b      	ldr	r3, [r3, #8]
 801c11c:	2b00      	cmp	r3, #0
 801c11e:	d10e      	bne.n	801c13e <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 801c120:	68fb      	ldr	r3, [r7, #12]
 801c122:	2204      	movs	r2, #4
 801c124:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 801c128:	88fa      	ldrh	r2, [r7, #6]
 801c12a:	683b      	ldr	r3, [r7, #0]
 801c12c:	9300      	str	r3, [sp, #0]
 801c12e:	4613      	mov	r3, r2
 801c130:	68ba      	ldr	r2, [r7, #8]
 801c132:	68b9      	ldr	r1, [r7, #8]
 801c134:	68f8      	ldr	r0, [r7, #12]
 801c136:	f000 f8f1 	bl	801c31c <HAL_SPI_TransmitReceive>
 801c13a:	4603      	mov	r3, r0
 801c13c:	e0ea      	b.n	801c314 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 801c13e:	68fb      	ldr	r3, [r7, #12]
 801c140:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 801c144:	2b01      	cmp	r3, #1
 801c146:	d101      	bne.n	801c14c <HAL_SPI_Receive+0x52>
 801c148:	2302      	movs	r3, #2
 801c14a:	e0e3      	b.n	801c314 <HAL_SPI_Receive+0x21a>
 801c14c:	68fb      	ldr	r3, [r7, #12]
 801c14e:	2201      	movs	r2, #1
 801c150:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 801c154:	f7fb ffa6 	bl	80180a4 <HAL_GetTick>
 801c158:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 801c15a:	68fb      	ldr	r3, [r7, #12]
 801c15c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 801c160:	b2db      	uxtb	r3, r3
 801c162:	2b01      	cmp	r3, #1
 801c164:	d002      	beq.n	801c16c <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 801c166:	2302      	movs	r3, #2
 801c168:	75fb      	strb	r3, [r7, #23]
    goto error;
 801c16a:	e0ca      	b.n	801c302 <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 801c16c:	68bb      	ldr	r3, [r7, #8]
 801c16e:	2b00      	cmp	r3, #0
 801c170:	d002      	beq.n	801c178 <HAL_SPI_Receive+0x7e>
 801c172:	88fb      	ldrh	r3, [r7, #6]
 801c174:	2b00      	cmp	r3, #0
 801c176:	d102      	bne.n	801c17e <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 801c178:	2301      	movs	r3, #1
 801c17a:	75fb      	strb	r3, [r7, #23]
    goto error;
 801c17c:	e0c1      	b.n	801c302 <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 801c17e:	68fb      	ldr	r3, [r7, #12]
 801c180:	2204      	movs	r2, #4
 801c182:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 801c186:	68fb      	ldr	r3, [r7, #12]
 801c188:	2200      	movs	r2, #0
 801c18a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 801c18c:	68fb      	ldr	r3, [r7, #12]
 801c18e:	68ba      	ldr	r2, [r7, #8]
 801c190:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 801c192:	68fb      	ldr	r3, [r7, #12]
 801c194:	88fa      	ldrh	r2, [r7, #6]
 801c196:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 801c198:	68fb      	ldr	r3, [r7, #12]
 801c19a:	88fa      	ldrh	r2, [r7, #6]
 801c19c:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 801c19e:	68fb      	ldr	r3, [r7, #12]
 801c1a0:	2200      	movs	r2, #0
 801c1a2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 801c1a4:	68fb      	ldr	r3, [r7, #12]
 801c1a6:	2200      	movs	r2, #0
 801c1a8:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 801c1aa:	68fb      	ldr	r3, [r7, #12]
 801c1ac:	2200      	movs	r2, #0
 801c1ae:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 801c1b0:	68fb      	ldr	r3, [r7, #12]
 801c1b2:	2200      	movs	r2, #0
 801c1b4:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 801c1b6:	68fb      	ldr	r3, [r7, #12]
 801c1b8:	2200      	movs	r2, #0
 801c1ba:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 801c1bc:	68fb      	ldr	r3, [r7, #12]
 801c1be:	689b      	ldr	r3, [r3, #8]
 801c1c0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801c1c4:	d10f      	bne.n	801c1e6 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 801c1c6:	68fb      	ldr	r3, [r7, #12]
 801c1c8:	681b      	ldr	r3, [r3, #0]
 801c1ca:	681a      	ldr	r2, [r3, #0]
 801c1cc:	68fb      	ldr	r3, [r7, #12]
 801c1ce:	681b      	ldr	r3, [r3, #0]
 801c1d0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 801c1d4:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 801c1d6:	68fb      	ldr	r3, [r7, #12]
 801c1d8:	681b      	ldr	r3, [r3, #0]
 801c1da:	681a      	ldr	r2, [r3, #0]
 801c1dc:	68fb      	ldr	r3, [r7, #12]
 801c1de:	681b      	ldr	r3, [r3, #0]
 801c1e0:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 801c1e4:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 801c1e6:	68fb      	ldr	r3, [r7, #12]
 801c1e8:	681b      	ldr	r3, [r3, #0]
 801c1ea:	681b      	ldr	r3, [r3, #0]
 801c1ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801c1f0:	2b40      	cmp	r3, #64	; 0x40
 801c1f2:	d007      	beq.n	801c204 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 801c1f4:	68fb      	ldr	r3, [r7, #12]
 801c1f6:	681b      	ldr	r3, [r3, #0]
 801c1f8:	681a      	ldr	r2, [r3, #0]
 801c1fa:	68fb      	ldr	r3, [r7, #12]
 801c1fc:	681b      	ldr	r3, [r3, #0]
 801c1fe:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 801c202:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 801c204:	68fb      	ldr	r3, [r7, #12]
 801c206:	68db      	ldr	r3, [r3, #12]
 801c208:	2b00      	cmp	r3, #0
 801c20a:	d162      	bne.n	801c2d2 <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 801c20c:	e02e      	b.n	801c26c <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 801c20e:	68fb      	ldr	r3, [r7, #12]
 801c210:	681b      	ldr	r3, [r3, #0]
 801c212:	689b      	ldr	r3, [r3, #8]
 801c214:	f003 0301 	and.w	r3, r3, #1
 801c218:	2b01      	cmp	r3, #1
 801c21a:	d115      	bne.n	801c248 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 801c21c:	68fb      	ldr	r3, [r7, #12]
 801c21e:	681b      	ldr	r3, [r3, #0]
 801c220:	f103 020c 	add.w	r2, r3, #12
 801c224:	68fb      	ldr	r3, [r7, #12]
 801c226:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801c228:	7812      	ldrb	r2, [r2, #0]
 801c22a:	b2d2      	uxtb	r2, r2
 801c22c:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 801c22e:	68fb      	ldr	r3, [r7, #12]
 801c230:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801c232:	1c5a      	adds	r2, r3, #1
 801c234:	68fb      	ldr	r3, [r7, #12]
 801c236:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 801c238:	68fb      	ldr	r3, [r7, #12]
 801c23a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801c23c:	b29b      	uxth	r3, r3
 801c23e:	3b01      	subs	r3, #1
 801c240:	b29a      	uxth	r2, r3
 801c242:	68fb      	ldr	r3, [r7, #12]
 801c244:	87da      	strh	r2, [r3, #62]	; 0x3e
 801c246:	e011      	b.n	801c26c <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 801c248:	f7fb ff2c 	bl	80180a4 <HAL_GetTick>
 801c24c:	4602      	mov	r2, r0
 801c24e:	693b      	ldr	r3, [r7, #16]
 801c250:	1ad3      	subs	r3, r2, r3
 801c252:	683a      	ldr	r2, [r7, #0]
 801c254:	429a      	cmp	r2, r3
 801c256:	d803      	bhi.n	801c260 <HAL_SPI_Receive+0x166>
 801c258:	683b      	ldr	r3, [r7, #0]
 801c25a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801c25e:	d102      	bne.n	801c266 <HAL_SPI_Receive+0x16c>
 801c260:	683b      	ldr	r3, [r7, #0]
 801c262:	2b00      	cmp	r3, #0
 801c264:	d102      	bne.n	801c26c <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 801c266:	2303      	movs	r3, #3
 801c268:	75fb      	strb	r3, [r7, #23]
          goto error;
 801c26a:	e04a      	b.n	801c302 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 801c26c:	68fb      	ldr	r3, [r7, #12]
 801c26e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801c270:	b29b      	uxth	r3, r3
 801c272:	2b00      	cmp	r3, #0
 801c274:	d1cb      	bne.n	801c20e <HAL_SPI_Receive+0x114>
 801c276:	e031      	b.n	801c2dc <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 801c278:	68fb      	ldr	r3, [r7, #12]
 801c27a:	681b      	ldr	r3, [r3, #0]
 801c27c:	689b      	ldr	r3, [r3, #8]
 801c27e:	f003 0301 	and.w	r3, r3, #1
 801c282:	2b01      	cmp	r3, #1
 801c284:	d113      	bne.n	801c2ae <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 801c286:	68fb      	ldr	r3, [r7, #12]
 801c288:	681b      	ldr	r3, [r3, #0]
 801c28a:	68da      	ldr	r2, [r3, #12]
 801c28c:	68fb      	ldr	r3, [r7, #12]
 801c28e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801c290:	b292      	uxth	r2, r2
 801c292:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 801c294:	68fb      	ldr	r3, [r7, #12]
 801c296:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801c298:	1c9a      	adds	r2, r3, #2
 801c29a:	68fb      	ldr	r3, [r7, #12]
 801c29c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 801c29e:	68fb      	ldr	r3, [r7, #12]
 801c2a0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801c2a2:	b29b      	uxth	r3, r3
 801c2a4:	3b01      	subs	r3, #1
 801c2a6:	b29a      	uxth	r2, r3
 801c2a8:	68fb      	ldr	r3, [r7, #12]
 801c2aa:	87da      	strh	r2, [r3, #62]	; 0x3e
 801c2ac:	e011      	b.n	801c2d2 <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 801c2ae:	f7fb fef9 	bl	80180a4 <HAL_GetTick>
 801c2b2:	4602      	mov	r2, r0
 801c2b4:	693b      	ldr	r3, [r7, #16]
 801c2b6:	1ad3      	subs	r3, r2, r3
 801c2b8:	683a      	ldr	r2, [r7, #0]
 801c2ba:	429a      	cmp	r2, r3
 801c2bc:	d803      	bhi.n	801c2c6 <HAL_SPI_Receive+0x1cc>
 801c2be:	683b      	ldr	r3, [r7, #0]
 801c2c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 801c2c4:	d102      	bne.n	801c2cc <HAL_SPI_Receive+0x1d2>
 801c2c6:	683b      	ldr	r3, [r7, #0]
 801c2c8:	2b00      	cmp	r3, #0
 801c2ca:	d102      	bne.n	801c2d2 <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 801c2cc:	2303      	movs	r3, #3
 801c2ce:	75fb      	strb	r3, [r7, #23]
          goto error;
 801c2d0:	e017      	b.n	801c302 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 801c2d2:	68fb      	ldr	r3, [r7, #12]
 801c2d4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801c2d6:	b29b      	uxth	r3, r3
 801c2d8:	2b00      	cmp	r3, #0
 801c2da:	d1cd      	bne.n	801c278 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 801c2dc:	693a      	ldr	r2, [r7, #16]
 801c2de:	6839      	ldr	r1, [r7, #0]
 801c2e0:	68f8      	ldr	r0, [r7, #12]
 801c2e2:	f000 fb63 	bl	801c9ac <SPI_EndRxTransaction>
 801c2e6:	4603      	mov	r3, r0
 801c2e8:	2b00      	cmp	r3, #0
 801c2ea:	d002      	beq.n	801c2f2 <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 801c2ec:	68fb      	ldr	r3, [r7, #12]
 801c2ee:	2220      	movs	r2, #32
 801c2f0:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 801c2f2:	68fb      	ldr	r3, [r7, #12]
 801c2f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801c2f6:	2b00      	cmp	r3, #0
 801c2f8:	d002      	beq.n	801c300 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 801c2fa:	2301      	movs	r3, #1
 801c2fc:	75fb      	strb	r3, [r7, #23]
 801c2fe:	e000      	b.n	801c302 <HAL_SPI_Receive+0x208>
  }

error :
 801c300:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 801c302:	68fb      	ldr	r3, [r7, #12]
 801c304:	2201      	movs	r2, #1
 801c306:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 801c30a:	68fb      	ldr	r3, [r7, #12]
 801c30c:	2200      	movs	r2, #0
 801c30e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 801c312:	7dfb      	ldrb	r3, [r7, #23]
}
 801c314:	4618      	mov	r0, r3
 801c316:	3718      	adds	r7, #24
 801c318:	46bd      	mov	sp, r7
 801c31a:	bd80      	pop	{r7, pc}

0801c31c <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 801c31c:	b580      	push	{r7, lr}
 801c31e:	b08c      	sub	sp, #48	; 0x30
 801c320:	af00      	add	r7, sp, #0
 801c322:	60f8      	str	r0, [r7, #12]
 801c324:	60b9      	str	r1, [r7, #8]
 801c326:	607a      	str	r2, [r7, #4]
 801c328:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 801c32a:	2301      	movs	r3, #1
 801c32c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 801c32e:	2300      	movs	r3, #0
 801c330:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 801c334:	68fb      	ldr	r3, [r7, #12]
 801c336:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 801c33a:	2b01      	cmp	r3, #1
 801c33c:	d101      	bne.n	801c342 <HAL_SPI_TransmitReceive+0x26>
 801c33e:	2302      	movs	r3, #2
 801c340:	e18a      	b.n	801c658 <HAL_SPI_TransmitReceive+0x33c>
 801c342:	68fb      	ldr	r3, [r7, #12]
 801c344:	2201      	movs	r2, #1
 801c346:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 801c34a:	f7fb feab 	bl	80180a4 <HAL_GetTick>
 801c34e:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 801c350:	68fb      	ldr	r3, [r7, #12]
 801c352:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 801c356:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 801c35a:	68fb      	ldr	r3, [r7, #12]
 801c35c:	685b      	ldr	r3, [r3, #4]
 801c35e:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 801c360:	887b      	ldrh	r3, [r7, #2]
 801c362:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 801c364:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 801c368:	2b01      	cmp	r3, #1
 801c36a:	d00f      	beq.n	801c38c <HAL_SPI_TransmitReceive+0x70>
 801c36c:	69fb      	ldr	r3, [r7, #28]
 801c36e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 801c372:	d107      	bne.n	801c384 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 801c374:	68fb      	ldr	r3, [r7, #12]
 801c376:	689b      	ldr	r3, [r3, #8]
 801c378:	2b00      	cmp	r3, #0
 801c37a:	d103      	bne.n	801c384 <HAL_SPI_TransmitReceive+0x68>
 801c37c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 801c380:	2b04      	cmp	r3, #4
 801c382:	d003      	beq.n	801c38c <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 801c384:	2302      	movs	r3, #2
 801c386:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 801c38a:	e15b      	b.n	801c644 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 801c38c:	68bb      	ldr	r3, [r7, #8]
 801c38e:	2b00      	cmp	r3, #0
 801c390:	d005      	beq.n	801c39e <HAL_SPI_TransmitReceive+0x82>
 801c392:	687b      	ldr	r3, [r7, #4]
 801c394:	2b00      	cmp	r3, #0
 801c396:	d002      	beq.n	801c39e <HAL_SPI_TransmitReceive+0x82>
 801c398:	887b      	ldrh	r3, [r7, #2]
 801c39a:	2b00      	cmp	r3, #0
 801c39c:	d103      	bne.n	801c3a6 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 801c39e:	2301      	movs	r3, #1
 801c3a0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 801c3a4:	e14e      	b.n	801c644 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 801c3a6:	68fb      	ldr	r3, [r7, #12]
 801c3a8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 801c3ac:	b2db      	uxtb	r3, r3
 801c3ae:	2b04      	cmp	r3, #4
 801c3b0:	d003      	beq.n	801c3ba <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 801c3b2:	68fb      	ldr	r3, [r7, #12]
 801c3b4:	2205      	movs	r2, #5
 801c3b6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 801c3ba:	68fb      	ldr	r3, [r7, #12]
 801c3bc:	2200      	movs	r2, #0
 801c3be:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 801c3c0:	68fb      	ldr	r3, [r7, #12]
 801c3c2:	687a      	ldr	r2, [r7, #4]
 801c3c4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 801c3c6:	68fb      	ldr	r3, [r7, #12]
 801c3c8:	887a      	ldrh	r2, [r7, #2]
 801c3ca:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 801c3cc:	68fb      	ldr	r3, [r7, #12]
 801c3ce:	887a      	ldrh	r2, [r7, #2]
 801c3d0:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 801c3d2:	68fb      	ldr	r3, [r7, #12]
 801c3d4:	68ba      	ldr	r2, [r7, #8]
 801c3d6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 801c3d8:	68fb      	ldr	r3, [r7, #12]
 801c3da:	887a      	ldrh	r2, [r7, #2]
 801c3dc:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 801c3de:	68fb      	ldr	r3, [r7, #12]
 801c3e0:	887a      	ldrh	r2, [r7, #2]
 801c3e2:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 801c3e4:	68fb      	ldr	r3, [r7, #12]
 801c3e6:	2200      	movs	r2, #0
 801c3e8:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 801c3ea:	68fb      	ldr	r3, [r7, #12]
 801c3ec:	2200      	movs	r2, #0
 801c3ee:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 801c3f0:	68fb      	ldr	r3, [r7, #12]
 801c3f2:	681b      	ldr	r3, [r3, #0]
 801c3f4:	681b      	ldr	r3, [r3, #0]
 801c3f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801c3fa:	2b40      	cmp	r3, #64	; 0x40
 801c3fc:	d007      	beq.n	801c40e <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 801c3fe:	68fb      	ldr	r3, [r7, #12]
 801c400:	681b      	ldr	r3, [r3, #0]
 801c402:	681a      	ldr	r2, [r3, #0]
 801c404:	68fb      	ldr	r3, [r7, #12]
 801c406:	681b      	ldr	r3, [r3, #0]
 801c408:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 801c40c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 801c40e:	68fb      	ldr	r3, [r7, #12]
 801c410:	68db      	ldr	r3, [r3, #12]
 801c412:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 801c416:	d178      	bne.n	801c50a <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 801c418:	68fb      	ldr	r3, [r7, #12]
 801c41a:	685b      	ldr	r3, [r3, #4]
 801c41c:	2b00      	cmp	r3, #0
 801c41e:	d002      	beq.n	801c426 <HAL_SPI_TransmitReceive+0x10a>
 801c420:	8b7b      	ldrh	r3, [r7, #26]
 801c422:	2b01      	cmp	r3, #1
 801c424:	d166      	bne.n	801c4f4 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 801c426:	68fb      	ldr	r3, [r7, #12]
 801c428:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801c42a:	881a      	ldrh	r2, [r3, #0]
 801c42c:	68fb      	ldr	r3, [r7, #12]
 801c42e:	681b      	ldr	r3, [r3, #0]
 801c430:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 801c432:	68fb      	ldr	r3, [r7, #12]
 801c434:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801c436:	1c9a      	adds	r2, r3, #2
 801c438:	68fb      	ldr	r3, [r7, #12]
 801c43a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 801c43c:	68fb      	ldr	r3, [r7, #12]
 801c43e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 801c440:	b29b      	uxth	r3, r3
 801c442:	3b01      	subs	r3, #1
 801c444:	b29a      	uxth	r2, r3
 801c446:	68fb      	ldr	r3, [r7, #12]
 801c448:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 801c44a:	e053      	b.n	801c4f4 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 801c44c:	68fb      	ldr	r3, [r7, #12]
 801c44e:	681b      	ldr	r3, [r3, #0]
 801c450:	689b      	ldr	r3, [r3, #8]
 801c452:	f003 0302 	and.w	r3, r3, #2
 801c456:	2b02      	cmp	r3, #2
 801c458:	d11b      	bne.n	801c492 <HAL_SPI_TransmitReceive+0x176>
 801c45a:	68fb      	ldr	r3, [r7, #12]
 801c45c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 801c45e:	b29b      	uxth	r3, r3
 801c460:	2b00      	cmp	r3, #0
 801c462:	d016      	beq.n	801c492 <HAL_SPI_TransmitReceive+0x176>
 801c464:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801c466:	2b01      	cmp	r3, #1
 801c468:	d113      	bne.n	801c492 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 801c46a:	68fb      	ldr	r3, [r7, #12]
 801c46c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801c46e:	881a      	ldrh	r2, [r3, #0]
 801c470:	68fb      	ldr	r3, [r7, #12]
 801c472:	681b      	ldr	r3, [r3, #0]
 801c474:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 801c476:	68fb      	ldr	r3, [r7, #12]
 801c478:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801c47a:	1c9a      	adds	r2, r3, #2
 801c47c:	68fb      	ldr	r3, [r7, #12]
 801c47e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 801c480:	68fb      	ldr	r3, [r7, #12]
 801c482:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 801c484:	b29b      	uxth	r3, r3
 801c486:	3b01      	subs	r3, #1
 801c488:	b29a      	uxth	r2, r3
 801c48a:	68fb      	ldr	r3, [r7, #12]
 801c48c:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 801c48e:	2300      	movs	r3, #0
 801c490:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 801c492:	68fb      	ldr	r3, [r7, #12]
 801c494:	681b      	ldr	r3, [r3, #0]
 801c496:	689b      	ldr	r3, [r3, #8]
 801c498:	f003 0301 	and.w	r3, r3, #1
 801c49c:	2b01      	cmp	r3, #1
 801c49e:	d119      	bne.n	801c4d4 <HAL_SPI_TransmitReceive+0x1b8>
 801c4a0:	68fb      	ldr	r3, [r7, #12]
 801c4a2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801c4a4:	b29b      	uxth	r3, r3
 801c4a6:	2b00      	cmp	r3, #0
 801c4a8:	d014      	beq.n	801c4d4 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 801c4aa:	68fb      	ldr	r3, [r7, #12]
 801c4ac:	681b      	ldr	r3, [r3, #0]
 801c4ae:	68da      	ldr	r2, [r3, #12]
 801c4b0:	68fb      	ldr	r3, [r7, #12]
 801c4b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801c4b4:	b292      	uxth	r2, r2
 801c4b6:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 801c4b8:	68fb      	ldr	r3, [r7, #12]
 801c4ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801c4bc:	1c9a      	adds	r2, r3, #2
 801c4be:	68fb      	ldr	r3, [r7, #12]
 801c4c0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 801c4c2:	68fb      	ldr	r3, [r7, #12]
 801c4c4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801c4c6:	b29b      	uxth	r3, r3
 801c4c8:	3b01      	subs	r3, #1
 801c4ca:	b29a      	uxth	r2, r3
 801c4cc:	68fb      	ldr	r3, [r7, #12]
 801c4ce:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 801c4d0:	2301      	movs	r3, #1
 801c4d2:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 801c4d4:	f7fb fde6 	bl	80180a4 <HAL_GetTick>
 801c4d8:	4602      	mov	r2, r0
 801c4da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c4dc:	1ad3      	subs	r3, r2, r3
 801c4de:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801c4e0:	429a      	cmp	r2, r3
 801c4e2:	d807      	bhi.n	801c4f4 <HAL_SPI_TransmitReceive+0x1d8>
 801c4e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801c4e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 801c4ea:	d003      	beq.n	801c4f4 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 801c4ec:	2303      	movs	r3, #3
 801c4ee:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 801c4f2:	e0a7      	b.n	801c644 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 801c4f4:	68fb      	ldr	r3, [r7, #12]
 801c4f6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 801c4f8:	b29b      	uxth	r3, r3
 801c4fa:	2b00      	cmp	r3, #0
 801c4fc:	d1a6      	bne.n	801c44c <HAL_SPI_TransmitReceive+0x130>
 801c4fe:	68fb      	ldr	r3, [r7, #12]
 801c500:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801c502:	b29b      	uxth	r3, r3
 801c504:	2b00      	cmp	r3, #0
 801c506:	d1a1      	bne.n	801c44c <HAL_SPI_TransmitReceive+0x130>
 801c508:	e07c      	b.n	801c604 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 801c50a:	68fb      	ldr	r3, [r7, #12]
 801c50c:	685b      	ldr	r3, [r3, #4]
 801c50e:	2b00      	cmp	r3, #0
 801c510:	d002      	beq.n	801c518 <HAL_SPI_TransmitReceive+0x1fc>
 801c512:	8b7b      	ldrh	r3, [r7, #26]
 801c514:	2b01      	cmp	r3, #1
 801c516:	d16b      	bne.n	801c5f0 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 801c518:	68fb      	ldr	r3, [r7, #12]
 801c51a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801c51c:	68fb      	ldr	r3, [r7, #12]
 801c51e:	681b      	ldr	r3, [r3, #0]
 801c520:	330c      	adds	r3, #12
 801c522:	7812      	ldrb	r2, [r2, #0]
 801c524:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 801c526:	68fb      	ldr	r3, [r7, #12]
 801c528:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801c52a:	1c5a      	adds	r2, r3, #1
 801c52c:	68fb      	ldr	r3, [r7, #12]
 801c52e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 801c530:	68fb      	ldr	r3, [r7, #12]
 801c532:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 801c534:	b29b      	uxth	r3, r3
 801c536:	3b01      	subs	r3, #1
 801c538:	b29a      	uxth	r2, r3
 801c53a:	68fb      	ldr	r3, [r7, #12]
 801c53c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 801c53e:	e057      	b.n	801c5f0 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 801c540:	68fb      	ldr	r3, [r7, #12]
 801c542:	681b      	ldr	r3, [r3, #0]
 801c544:	689b      	ldr	r3, [r3, #8]
 801c546:	f003 0302 	and.w	r3, r3, #2
 801c54a:	2b02      	cmp	r3, #2
 801c54c:	d11c      	bne.n	801c588 <HAL_SPI_TransmitReceive+0x26c>
 801c54e:	68fb      	ldr	r3, [r7, #12]
 801c550:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 801c552:	b29b      	uxth	r3, r3
 801c554:	2b00      	cmp	r3, #0
 801c556:	d017      	beq.n	801c588 <HAL_SPI_TransmitReceive+0x26c>
 801c558:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801c55a:	2b01      	cmp	r3, #1
 801c55c:	d114      	bne.n	801c588 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 801c55e:	68fb      	ldr	r3, [r7, #12]
 801c560:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801c562:	68fb      	ldr	r3, [r7, #12]
 801c564:	681b      	ldr	r3, [r3, #0]
 801c566:	330c      	adds	r3, #12
 801c568:	7812      	ldrb	r2, [r2, #0]
 801c56a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 801c56c:	68fb      	ldr	r3, [r7, #12]
 801c56e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801c570:	1c5a      	adds	r2, r3, #1
 801c572:	68fb      	ldr	r3, [r7, #12]
 801c574:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 801c576:	68fb      	ldr	r3, [r7, #12]
 801c578:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 801c57a:	b29b      	uxth	r3, r3
 801c57c:	3b01      	subs	r3, #1
 801c57e:	b29a      	uxth	r2, r3
 801c580:	68fb      	ldr	r3, [r7, #12]
 801c582:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 801c584:	2300      	movs	r3, #0
 801c586:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 801c588:	68fb      	ldr	r3, [r7, #12]
 801c58a:	681b      	ldr	r3, [r3, #0]
 801c58c:	689b      	ldr	r3, [r3, #8]
 801c58e:	f003 0301 	and.w	r3, r3, #1
 801c592:	2b01      	cmp	r3, #1
 801c594:	d119      	bne.n	801c5ca <HAL_SPI_TransmitReceive+0x2ae>
 801c596:	68fb      	ldr	r3, [r7, #12]
 801c598:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801c59a:	b29b      	uxth	r3, r3
 801c59c:	2b00      	cmp	r3, #0
 801c59e:	d014      	beq.n	801c5ca <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 801c5a0:	68fb      	ldr	r3, [r7, #12]
 801c5a2:	681b      	ldr	r3, [r3, #0]
 801c5a4:	68da      	ldr	r2, [r3, #12]
 801c5a6:	68fb      	ldr	r3, [r7, #12]
 801c5a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801c5aa:	b2d2      	uxtb	r2, r2
 801c5ac:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 801c5ae:	68fb      	ldr	r3, [r7, #12]
 801c5b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801c5b2:	1c5a      	adds	r2, r3, #1
 801c5b4:	68fb      	ldr	r3, [r7, #12]
 801c5b6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 801c5b8:	68fb      	ldr	r3, [r7, #12]
 801c5ba:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801c5bc:	b29b      	uxth	r3, r3
 801c5be:	3b01      	subs	r3, #1
 801c5c0:	b29a      	uxth	r2, r3
 801c5c2:	68fb      	ldr	r3, [r7, #12]
 801c5c4:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 801c5c6:	2301      	movs	r3, #1
 801c5c8:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 801c5ca:	f7fb fd6b 	bl	80180a4 <HAL_GetTick>
 801c5ce:	4602      	mov	r2, r0
 801c5d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c5d2:	1ad3      	subs	r3, r2, r3
 801c5d4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801c5d6:	429a      	cmp	r2, r3
 801c5d8:	d803      	bhi.n	801c5e2 <HAL_SPI_TransmitReceive+0x2c6>
 801c5da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801c5dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 801c5e0:	d102      	bne.n	801c5e8 <HAL_SPI_TransmitReceive+0x2cc>
 801c5e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801c5e4:	2b00      	cmp	r3, #0
 801c5e6:	d103      	bne.n	801c5f0 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 801c5e8:	2303      	movs	r3, #3
 801c5ea:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 801c5ee:	e029      	b.n	801c644 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 801c5f0:	68fb      	ldr	r3, [r7, #12]
 801c5f2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 801c5f4:	b29b      	uxth	r3, r3
 801c5f6:	2b00      	cmp	r3, #0
 801c5f8:	d1a2      	bne.n	801c540 <HAL_SPI_TransmitReceive+0x224>
 801c5fa:	68fb      	ldr	r3, [r7, #12]
 801c5fc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801c5fe:	b29b      	uxth	r3, r3
 801c600:	2b00      	cmp	r3, #0
 801c602:	d19d      	bne.n	801c540 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 801c604:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801c606:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 801c608:	68f8      	ldr	r0, [r7, #12]
 801c60a:	f000 fa35 	bl	801ca78 <SPI_EndRxTxTransaction>
 801c60e:	4603      	mov	r3, r0
 801c610:	2b00      	cmp	r3, #0
 801c612:	d006      	beq.n	801c622 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 801c614:	2301      	movs	r3, #1
 801c616:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 801c61a:	68fb      	ldr	r3, [r7, #12]
 801c61c:	2220      	movs	r2, #32
 801c61e:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 801c620:	e010      	b.n	801c644 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 801c622:	68fb      	ldr	r3, [r7, #12]
 801c624:	689b      	ldr	r3, [r3, #8]
 801c626:	2b00      	cmp	r3, #0
 801c628:	d10b      	bne.n	801c642 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 801c62a:	2300      	movs	r3, #0
 801c62c:	617b      	str	r3, [r7, #20]
 801c62e:	68fb      	ldr	r3, [r7, #12]
 801c630:	681b      	ldr	r3, [r3, #0]
 801c632:	68db      	ldr	r3, [r3, #12]
 801c634:	617b      	str	r3, [r7, #20]
 801c636:	68fb      	ldr	r3, [r7, #12]
 801c638:	681b      	ldr	r3, [r3, #0]
 801c63a:	689b      	ldr	r3, [r3, #8]
 801c63c:	617b      	str	r3, [r7, #20]
 801c63e:	697b      	ldr	r3, [r7, #20]
 801c640:	e000      	b.n	801c644 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 801c642:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 801c644:	68fb      	ldr	r3, [r7, #12]
 801c646:	2201      	movs	r2, #1
 801c648:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 801c64c:	68fb      	ldr	r3, [r7, #12]
 801c64e:	2200      	movs	r2, #0
 801c650:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 801c654:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 801c658:	4618      	mov	r0, r3
 801c65a:	3730      	adds	r7, #48	; 0x30
 801c65c:	46bd      	mov	sp, r7
 801c65e:	bd80      	pop	{r7, pc}

0801c660 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 801c660:	b580      	push	{r7, lr}
 801c662:	b088      	sub	sp, #32
 801c664:	af00      	add	r7, sp, #0
 801c666:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 801c668:	687b      	ldr	r3, [r7, #4]
 801c66a:	681b      	ldr	r3, [r3, #0]
 801c66c:	685b      	ldr	r3, [r3, #4]
 801c66e:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 801c670:	687b      	ldr	r3, [r7, #4]
 801c672:	681b      	ldr	r3, [r3, #0]
 801c674:	689b      	ldr	r3, [r3, #8]
 801c676:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 801c678:	69bb      	ldr	r3, [r7, #24]
 801c67a:	099b      	lsrs	r3, r3, #6
 801c67c:	f003 0301 	and.w	r3, r3, #1
 801c680:	2b00      	cmp	r3, #0
 801c682:	d10f      	bne.n	801c6a4 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 801c684:	69bb      	ldr	r3, [r7, #24]
 801c686:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 801c68a:	2b00      	cmp	r3, #0
 801c68c:	d00a      	beq.n	801c6a4 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 801c68e:	69fb      	ldr	r3, [r7, #28]
 801c690:	099b      	lsrs	r3, r3, #6
 801c692:	f003 0301 	and.w	r3, r3, #1
 801c696:	2b00      	cmp	r3, #0
 801c698:	d004      	beq.n	801c6a4 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 801c69a:	687b      	ldr	r3, [r7, #4]
 801c69c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801c69e:	6878      	ldr	r0, [r7, #4]
 801c6a0:	4798      	blx	r3
    return;
 801c6a2:	e0d7      	b.n	801c854 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 801c6a4:	69bb      	ldr	r3, [r7, #24]
 801c6a6:	085b      	lsrs	r3, r3, #1
 801c6a8:	f003 0301 	and.w	r3, r3, #1
 801c6ac:	2b00      	cmp	r3, #0
 801c6ae:	d00a      	beq.n	801c6c6 <HAL_SPI_IRQHandler+0x66>
 801c6b0:	69fb      	ldr	r3, [r7, #28]
 801c6b2:	09db      	lsrs	r3, r3, #7
 801c6b4:	f003 0301 	and.w	r3, r3, #1
 801c6b8:	2b00      	cmp	r3, #0
 801c6ba:	d004      	beq.n	801c6c6 <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 801c6bc:	687b      	ldr	r3, [r7, #4]
 801c6be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801c6c0:	6878      	ldr	r0, [r7, #4]
 801c6c2:	4798      	blx	r3
    return;
 801c6c4:	e0c6      	b.n	801c854 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 801c6c6:	69bb      	ldr	r3, [r7, #24]
 801c6c8:	095b      	lsrs	r3, r3, #5
 801c6ca:	f003 0301 	and.w	r3, r3, #1
 801c6ce:	2b00      	cmp	r3, #0
 801c6d0:	d10c      	bne.n	801c6ec <HAL_SPI_IRQHandler+0x8c>
 801c6d2:	69bb      	ldr	r3, [r7, #24]
 801c6d4:	099b      	lsrs	r3, r3, #6
 801c6d6:	f003 0301 	and.w	r3, r3, #1
 801c6da:	2b00      	cmp	r3, #0
 801c6dc:	d106      	bne.n	801c6ec <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 801c6de:	69bb      	ldr	r3, [r7, #24]
 801c6e0:	0a1b      	lsrs	r3, r3, #8
 801c6e2:	f003 0301 	and.w	r3, r3, #1
 801c6e6:	2b00      	cmp	r3, #0
 801c6e8:	f000 80b4 	beq.w	801c854 <HAL_SPI_IRQHandler+0x1f4>
 801c6ec:	69fb      	ldr	r3, [r7, #28]
 801c6ee:	095b      	lsrs	r3, r3, #5
 801c6f0:	f003 0301 	and.w	r3, r3, #1
 801c6f4:	2b00      	cmp	r3, #0
 801c6f6:	f000 80ad 	beq.w	801c854 <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 801c6fa:	69bb      	ldr	r3, [r7, #24]
 801c6fc:	099b      	lsrs	r3, r3, #6
 801c6fe:	f003 0301 	and.w	r3, r3, #1
 801c702:	2b00      	cmp	r3, #0
 801c704:	d023      	beq.n	801c74e <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 801c706:	687b      	ldr	r3, [r7, #4]
 801c708:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 801c70c:	b2db      	uxtb	r3, r3
 801c70e:	2b03      	cmp	r3, #3
 801c710:	d011      	beq.n	801c736 <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 801c712:	687b      	ldr	r3, [r7, #4]
 801c714:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801c716:	f043 0204 	orr.w	r2, r3, #4
 801c71a:	687b      	ldr	r3, [r7, #4]
 801c71c:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 801c71e:	2300      	movs	r3, #0
 801c720:	617b      	str	r3, [r7, #20]
 801c722:	687b      	ldr	r3, [r7, #4]
 801c724:	681b      	ldr	r3, [r3, #0]
 801c726:	68db      	ldr	r3, [r3, #12]
 801c728:	617b      	str	r3, [r7, #20]
 801c72a:	687b      	ldr	r3, [r7, #4]
 801c72c:	681b      	ldr	r3, [r3, #0]
 801c72e:	689b      	ldr	r3, [r3, #8]
 801c730:	617b      	str	r3, [r7, #20]
 801c732:	697b      	ldr	r3, [r7, #20]
 801c734:	e00b      	b.n	801c74e <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 801c736:	2300      	movs	r3, #0
 801c738:	613b      	str	r3, [r7, #16]
 801c73a:	687b      	ldr	r3, [r7, #4]
 801c73c:	681b      	ldr	r3, [r3, #0]
 801c73e:	68db      	ldr	r3, [r3, #12]
 801c740:	613b      	str	r3, [r7, #16]
 801c742:	687b      	ldr	r3, [r7, #4]
 801c744:	681b      	ldr	r3, [r3, #0]
 801c746:	689b      	ldr	r3, [r3, #8]
 801c748:	613b      	str	r3, [r7, #16]
 801c74a:	693b      	ldr	r3, [r7, #16]
        return;
 801c74c:	e082      	b.n	801c854 <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 801c74e:	69bb      	ldr	r3, [r7, #24]
 801c750:	095b      	lsrs	r3, r3, #5
 801c752:	f003 0301 	and.w	r3, r3, #1
 801c756:	2b00      	cmp	r3, #0
 801c758:	d014      	beq.n	801c784 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 801c75a:	687b      	ldr	r3, [r7, #4]
 801c75c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801c75e:	f043 0201 	orr.w	r2, r3, #1
 801c762:	687b      	ldr	r3, [r7, #4]
 801c764:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 801c766:	2300      	movs	r3, #0
 801c768:	60fb      	str	r3, [r7, #12]
 801c76a:	687b      	ldr	r3, [r7, #4]
 801c76c:	681b      	ldr	r3, [r3, #0]
 801c76e:	689b      	ldr	r3, [r3, #8]
 801c770:	60fb      	str	r3, [r7, #12]
 801c772:	687b      	ldr	r3, [r7, #4]
 801c774:	681b      	ldr	r3, [r3, #0]
 801c776:	681a      	ldr	r2, [r3, #0]
 801c778:	687b      	ldr	r3, [r7, #4]
 801c77a:	681b      	ldr	r3, [r3, #0]
 801c77c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 801c780:	601a      	str	r2, [r3, #0]
 801c782:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 801c784:	69bb      	ldr	r3, [r7, #24]
 801c786:	0a1b      	lsrs	r3, r3, #8
 801c788:	f003 0301 	and.w	r3, r3, #1
 801c78c:	2b00      	cmp	r3, #0
 801c78e:	d00c      	beq.n	801c7aa <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 801c790:	687b      	ldr	r3, [r7, #4]
 801c792:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801c794:	f043 0208 	orr.w	r2, r3, #8
 801c798:	687b      	ldr	r3, [r7, #4]
 801c79a:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 801c79c:	2300      	movs	r3, #0
 801c79e:	60bb      	str	r3, [r7, #8]
 801c7a0:	687b      	ldr	r3, [r7, #4]
 801c7a2:	681b      	ldr	r3, [r3, #0]
 801c7a4:	689b      	ldr	r3, [r3, #8]
 801c7a6:	60bb      	str	r3, [r7, #8]
 801c7a8:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 801c7aa:	687b      	ldr	r3, [r7, #4]
 801c7ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801c7ae:	2b00      	cmp	r3, #0
 801c7b0:	d04f      	beq.n	801c852 <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 801c7b2:	687b      	ldr	r3, [r7, #4]
 801c7b4:	681b      	ldr	r3, [r3, #0]
 801c7b6:	685a      	ldr	r2, [r3, #4]
 801c7b8:	687b      	ldr	r3, [r7, #4]
 801c7ba:	681b      	ldr	r3, [r3, #0]
 801c7bc:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 801c7c0:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 801c7c2:	687b      	ldr	r3, [r7, #4]
 801c7c4:	2201      	movs	r2, #1
 801c7c6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 801c7ca:	69fb      	ldr	r3, [r7, #28]
 801c7cc:	f003 0302 	and.w	r3, r3, #2
 801c7d0:	2b00      	cmp	r3, #0
 801c7d2:	d104      	bne.n	801c7de <HAL_SPI_IRQHandler+0x17e>
 801c7d4:	69fb      	ldr	r3, [r7, #28]
 801c7d6:	f003 0301 	and.w	r3, r3, #1
 801c7da:	2b00      	cmp	r3, #0
 801c7dc:	d034      	beq.n	801c848 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 801c7de:	687b      	ldr	r3, [r7, #4]
 801c7e0:	681b      	ldr	r3, [r3, #0]
 801c7e2:	685a      	ldr	r2, [r3, #4]
 801c7e4:	687b      	ldr	r3, [r7, #4]
 801c7e6:	681b      	ldr	r3, [r3, #0]
 801c7e8:	f022 0203 	bic.w	r2, r2, #3
 801c7ec:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 801c7ee:	687b      	ldr	r3, [r7, #4]
 801c7f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801c7f2:	2b00      	cmp	r3, #0
 801c7f4:	d011      	beq.n	801c81a <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 801c7f6:	687b      	ldr	r3, [r7, #4]
 801c7f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801c7fa:	4a18      	ldr	r2, [pc, #96]	; (801c85c <HAL_SPI_IRQHandler+0x1fc>)
 801c7fc:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 801c7fe:	687b      	ldr	r3, [r7, #4]
 801c800:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801c802:	4618      	mov	r0, r3
 801c804:	f7fc f946 	bl	8018a94 <HAL_DMA_Abort_IT>
 801c808:	4603      	mov	r3, r0
 801c80a:	2b00      	cmp	r3, #0
 801c80c:	d005      	beq.n	801c81a <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 801c80e:	687b      	ldr	r3, [r7, #4]
 801c810:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801c812:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 801c816:	687b      	ldr	r3, [r7, #4]
 801c818:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 801c81a:	687b      	ldr	r3, [r7, #4]
 801c81c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801c81e:	2b00      	cmp	r3, #0
 801c820:	d016      	beq.n	801c850 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 801c822:	687b      	ldr	r3, [r7, #4]
 801c824:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801c826:	4a0d      	ldr	r2, [pc, #52]	; (801c85c <HAL_SPI_IRQHandler+0x1fc>)
 801c828:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 801c82a:	687b      	ldr	r3, [r7, #4]
 801c82c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801c82e:	4618      	mov	r0, r3
 801c830:	f7fc f930 	bl	8018a94 <HAL_DMA_Abort_IT>
 801c834:	4603      	mov	r3, r0
 801c836:	2b00      	cmp	r3, #0
 801c838:	d00a      	beq.n	801c850 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 801c83a:	687b      	ldr	r3, [r7, #4]
 801c83c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801c83e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 801c842:	687b      	ldr	r3, [r7, #4]
 801c844:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 801c846:	e003      	b.n	801c850 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 801c848:	6878      	ldr	r0, [r7, #4]
 801c84a:	f000 f809 	bl	801c860 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 801c84e:	e000      	b.n	801c852 <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 801c850:	bf00      	nop
    return;
 801c852:	bf00      	nop
  }
}
 801c854:	3720      	adds	r7, #32
 801c856:	46bd      	mov	sp, r7
 801c858:	bd80      	pop	{r7, pc}
 801c85a:	bf00      	nop
 801c85c:	0801c875 	.word	0x0801c875

0801c860 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 801c860:	b480      	push	{r7}
 801c862:	b083      	sub	sp, #12
 801c864:	af00      	add	r7, sp, #0
 801c866:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 801c868:	bf00      	nop
 801c86a:	370c      	adds	r7, #12
 801c86c:	46bd      	mov	sp, r7
 801c86e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c872:	4770      	bx	lr

0801c874 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 801c874:	b580      	push	{r7, lr}
 801c876:	b084      	sub	sp, #16
 801c878:	af00      	add	r7, sp, #0
 801c87a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 801c87c:	687b      	ldr	r3, [r7, #4]
 801c87e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801c880:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 801c882:	68fb      	ldr	r3, [r7, #12]
 801c884:	2200      	movs	r2, #0
 801c886:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 801c888:	68fb      	ldr	r3, [r7, #12]
 801c88a:	2200      	movs	r2, #0
 801c88c:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 801c88e:	68f8      	ldr	r0, [r7, #12]
 801c890:	f7ff ffe6 	bl	801c860 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 801c894:	bf00      	nop
 801c896:	3710      	adds	r7, #16
 801c898:	46bd      	mov	sp, r7
 801c89a:	bd80      	pop	{r7, pc}

0801c89c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 801c89c:	b580      	push	{r7, lr}
 801c89e:	b088      	sub	sp, #32
 801c8a0:	af00      	add	r7, sp, #0
 801c8a2:	60f8      	str	r0, [r7, #12]
 801c8a4:	60b9      	str	r1, [r7, #8]
 801c8a6:	603b      	str	r3, [r7, #0]
 801c8a8:	4613      	mov	r3, r2
 801c8aa:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 801c8ac:	f7fb fbfa 	bl	80180a4 <HAL_GetTick>
 801c8b0:	4602      	mov	r2, r0
 801c8b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801c8b4:	1a9b      	subs	r3, r3, r2
 801c8b6:	683a      	ldr	r2, [r7, #0]
 801c8b8:	4413      	add	r3, r2
 801c8ba:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 801c8bc:	f7fb fbf2 	bl	80180a4 <HAL_GetTick>
 801c8c0:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 801c8c2:	4b39      	ldr	r3, [pc, #228]	; (801c9a8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 801c8c4:	681b      	ldr	r3, [r3, #0]
 801c8c6:	015b      	lsls	r3, r3, #5
 801c8c8:	0d1b      	lsrs	r3, r3, #20
 801c8ca:	69fa      	ldr	r2, [r7, #28]
 801c8cc:	fb02 f303 	mul.w	r3, r2, r3
 801c8d0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 801c8d2:	e054      	b.n	801c97e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 801c8d4:	683b      	ldr	r3, [r7, #0]
 801c8d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 801c8da:	d050      	beq.n	801c97e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 801c8dc:	f7fb fbe2 	bl	80180a4 <HAL_GetTick>
 801c8e0:	4602      	mov	r2, r0
 801c8e2:	69bb      	ldr	r3, [r7, #24]
 801c8e4:	1ad3      	subs	r3, r2, r3
 801c8e6:	69fa      	ldr	r2, [r7, #28]
 801c8e8:	429a      	cmp	r2, r3
 801c8ea:	d902      	bls.n	801c8f2 <SPI_WaitFlagStateUntilTimeout+0x56>
 801c8ec:	69fb      	ldr	r3, [r7, #28]
 801c8ee:	2b00      	cmp	r3, #0
 801c8f0:	d13d      	bne.n	801c96e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 801c8f2:	68fb      	ldr	r3, [r7, #12]
 801c8f4:	681b      	ldr	r3, [r3, #0]
 801c8f6:	685a      	ldr	r2, [r3, #4]
 801c8f8:	68fb      	ldr	r3, [r7, #12]
 801c8fa:	681b      	ldr	r3, [r3, #0]
 801c8fc:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 801c900:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 801c902:	68fb      	ldr	r3, [r7, #12]
 801c904:	685b      	ldr	r3, [r3, #4]
 801c906:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 801c90a:	d111      	bne.n	801c930 <SPI_WaitFlagStateUntilTimeout+0x94>
 801c90c:	68fb      	ldr	r3, [r7, #12]
 801c90e:	689b      	ldr	r3, [r3, #8]
 801c910:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801c914:	d004      	beq.n	801c920 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 801c916:	68fb      	ldr	r3, [r7, #12]
 801c918:	689b      	ldr	r3, [r3, #8]
 801c91a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801c91e:	d107      	bne.n	801c930 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 801c920:	68fb      	ldr	r3, [r7, #12]
 801c922:	681b      	ldr	r3, [r3, #0]
 801c924:	681a      	ldr	r2, [r3, #0]
 801c926:	68fb      	ldr	r3, [r7, #12]
 801c928:	681b      	ldr	r3, [r3, #0]
 801c92a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 801c92e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 801c930:	68fb      	ldr	r3, [r7, #12]
 801c932:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801c934:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 801c938:	d10f      	bne.n	801c95a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 801c93a:	68fb      	ldr	r3, [r7, #12]
 801c93c:	681b      	ldr	r3, [r3, #0]
 801c93e:	681a      	ldr	r2, [r3, #0]
 801c940:	68fb      	ldr	r3, [r7, #12]
 801c942:	681b      	ldr	r3, [r3, #0]
 801c944:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 801c948:	601a      	str	r2, [r3, #0]
 801c94a:	68fb      	ldr	r3, [r7, #12]
 801c94c:	681b      	ldr	r3, [r3, #0]
 801c94e:	681a      	ldr	r2, [r3, #0]
 801c950:	68fb      	ldr	r3, [r7, #12]
 801c952:	681b      	ldr	r3, [r3, #0]
 801c954:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 801c958:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 801c95a:	68fb      	ldr	r3, [r7, #12]
 801c95c:	2201      	movs	r2, #1
 801c95e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 801c962:	68fb      	ldr	r3, [r7, #12]
 801c964:	2200      	movs	r2, #0
 801c966:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 801c96a:	2303      	movs	r3, #3
 801c96c:	e017      	b.n	801c99e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 801c96e:	697b      	ldr	r3, [r7, #20]
 801c970:	2b00      	cmp	r3, #0
 801c972:	d101      	bne.n	801c978 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 801c974:	2300      	movs	r3, #0
 801c976:	61fb      	str	r3, [r7, #28]
      }
      count--;
 801c978:	697b      	ldr	r3, [r7, #20]
 801c97a:	3b01      	subs	r3, #1
 801c97c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 801c97e:	68fb      	ldr	r3, [r7, #12]
 801c980:	681b      	ldr	r3, [r3, #0]
 801c982:	689a      	ldr	r2, [r3, #8]
 801c984:	68bb      	ldr	r3, [r7, #8]
 801c986:	4013      	ands	r3, r2
 801c988:	68ba      	ldr	r2, [r7, #8]
 801c98a:	429a      	cmp	r2, r3
 801c98c:	bf0c      	ite	eq
 801c98e:	2301      	moveq	r3, #1
 801c990:	2300      	movne	r3, #0
 801c992:	b2db      	uxtb	r3, r3
 801c994:	461a      	mov	r2, r3
 801c996:	79fb      	ldrb	r3, [r7, #7]
 801c998:	429a      	cmp	r2, r3
 801c99a:	d19b      	bne.n	801c8d4 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 801c99c:	2300      	movs	r3, #0
}
 801c99e:	4618      	mov	r0, r3
 801c9a0:	3720      	adds	r7, #32
 801c9a2:	46bd      	mov	sp, r7
 801c9a4:	bd80      	pop	{r7, pc}
 801c9a6:	bf00      	nop
 801c9a8:	20000564 	.word	0x20000564

0801c9ac <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 801c9ac:	b580      	push	{r7, lr}
 801c9ae:	b086      	sub	sp, #24
 801c9b0:	af02      	add	r7, sp, #8
 801c9b2:	60f8      	str	r0, [r7, #12]
 801c9b4:	60b9      	str	r1, [r7, #8]
 801c9b6:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 801c9b8:	68fb      	ldr	r3, [r7, #12]
 801c9ba:	685b      	ldr	r3, [r3, #4]
 801c9bc:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 801c9c0:	d111      	bne.n	801c9e6 <SPI_EndRxTransaction+0x3a>
 801c9c2:	68fb      	ldr	r3, [r7, #12]
 801c9c4:	689b      	ldr	r3, [r3, #8]
 801c9c6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801c9ca:	d004      	beq.n	801c9d6 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 801c9cc:	68fb      	ldr	r3, [r7, #12]
 801c9ce:	689b      	ldr	r3, [r3, #8]
 801c9d0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801c9d4:	d107      	bne.n	801c9e6 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 801c9d6:	68fb      	ldr	r3, [r7, #12]
 801c9d8:	681b      	ldr	r3, [r3, #0]
 801c9da:	681a      	ldr	r2, [r3, #0]
 801c9dc:	68fb      	ldr	r3, [r7, #12]
 801c9de:	681b      	ldr	r3, [r3, #0]
 801c9e0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 801c9e4:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 801c9e6:	68fb      	ldr	r3, [r7, #12]
 801c9e8:	685b      	ldr	r3, [r3, #4]
 801c9ea:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 801c9ee:	d12a      	bne.n	801ca46 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 801c9f0:	68fb      	ldr	r3, [r7, #12]
 801c9f2:	689b      	ldr	r3, [r3, #8]
 801c9f4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801c9f8:	d012      	beq.n	801ca20 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 801c9fa:	687b      	ldr	r3, [r7, #4]
 801c9fc:	9300      	str	r3, [sp, #0]
 801c9fe:	68bb      	ldr	r3, [r7, #8]
 801ca00:	2200      	movs	r2, #0
 801ca02:	2180      	movs	r1, #128	; 0x80
 801ca04:	68f8      	ldr	r0, [r7, #12]
 801ca06:	f7ff ff49 	bl	801c89c <SPI_WaitFlagStateUntilTimeout>
 801ca0a:	4603      	mov	r3, r0
 801ca0c:	2b00      	cmp	r3, #0
 801ca0e:	d02d      	beq.n	801ca6c <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 801ca10:	68fb      	ldr	r3, [r7, #12]
 801ca12:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801ca14:	f043 0220 	orr.w	r2, r3, #32
 801ca18:	68fb      	ldr	r3, [r7, #12]
 801ca1a:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 801ca1c:	2303      	movs	r3, #3
 801ca1e:	e026      	b.n	801ca6e <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 801ca20:	687b      	ldr	r3, [r7, #4]
 801ca22:	9300      	str	r3, [sp, #0]
 801ca24:	68bb      	ldr	r3, [r7, #8]
 801ca26:	2200      	movs	r2, #0
 801ca28:	2101      	movs	r1, #1
 801ca2a:	68f8      	ldr	r0, [r7, #12]
 801ca2c:	f7ff ff36 	bl	801c89c <SPI_WaitFlagStateUntilTimeout>
 801ca30:	4603      	mov	r3, r0
 801ca32:	2b00      	cmp	r3, #0
 801ca34:	d01a      	beq.n	801ca6c <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 801ca36:	68fb      	ldr	r3, [r7, #12]
 801ca38:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801ca3a:	f043 0220 	orr.w	r2, r3, #32
 801ca3e:	68fb      	ldr	r3, [r7, #12]
 801ca40:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 801ca42:	2303      	movs	r3, #3
 801ca44:	e013      	b.n	801ca6e <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 801ca46:	687b      	ldr	r3, [r7, #4]
 801ca48:	9300      	str	r3, [sp, #0]
 801ca4a:	68bb      	ldr	r3, [r7, #8]
 801ca4c:	2200      	movs	r2, #0
 801ca4e:	2101      	movs	r1, #1
 801ca50:	68f8      	ldr	r0, [r7, #12]
 801ca52:	f7ff ff23 	bl	801c89c <SPI_WaitFlagStateUntilTimeout>
 801ca56:	4603      	mov	r3, r0
 801ca58:	2b00      	cmp	r3, #0
 801ca5a:	d007      	beq.n	801ca6c <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 801ca5c:	68fb      	ldr	r3, [r7, #12]
 801ca5e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801ca60:	f043 0220 	orr.w	r2, r3, #32
 801ca64:	68fb      	ldr	r3, [r7, #12]
 801ca66:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 801ca68:	2303      	movs	r3, #3
 801ca6a:	e000      	b.n	801ca6e <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 801ca6c:	2300      	movs	r3, #0
}
 801ca6e:	4618      	mov	r0, r3
 801ca70:	3710      	adds	r7, #16
 801ca72:	46bd      	mov	sp, r7
 801ca74:	bd80      	pop	{r7, pc}
	...

0801ca78 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 801ca78:	b580      	push	{r7, lr}
 801ca7a:	b088      	sub	sp, #32
 801ca7c:	af02      	add	r7, sp, #8
 801ca7e:	60f8      	str	r0, [r7, #12]
 801ca80:	60b9      	str	r1, [r7, #8]
 801ca82:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 801ca84:	4b1b      	ldr	r3, [pc, #108]	; (801caf4 <SPI_EndRxTxTransaction+0x7c>)
 801ca86:	681b      	ldr	r3, [r3, #0]
 801ca88:	4a1b      	ldr	r2, [pc, #108]	; (801caf8 <SPI_EndRxTxTransaction+0x80>)
 801ca8a:	fba2 2303 	umull	r2, r3, r2, r3
 801ca8e:	0d5b      	lsrs	r3, r3, #21
 801ca90:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 801ca94:	fb02 f303 	mul.w	r3, r2, r3
 801ca98:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 801ca9a:	68fb      	ldr	r3, [r7, #12]
 801ca9c:	685b      	ldr	r3, [r3, #4]
 801ca9e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 801caa2:	d112      	bne.n	801caca <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 801caa4:	687b      	ldr	r3, [r7, #4]
 801caa6:	9300      	str	r3, [sp, #0]
 801caa8:	68bb      	ldr	r3, [r7, #8]
 801caaa:	2200      	movs	r2, #0
 801caac:	2180      	movs	r1, #128	; 0x80
 801caae:	68f8      	ldr	r0, [r7, #12]
 801cab0:	f7ff fef4 	bl	801c89c <SPI_WaitFlagStateUntilTimeout>
 801cab4:	4603      	mov	r3, r0
 801cab6:	2b00      	cmp	r3, #0
 801cab8:	d016      	beq.n	801cae8 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 801caba:	68fb      	ldr	r3, [r7, #12]
 801cabc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801cabe:	f043 0220 	orr.w	r2, r3, #32
 801cac2:	68fb      	ldr	r3, [r7, #12]
 801cac4:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 801cac6:	2303      	movs	r3, #3
 801cac8:	e00f      	b.n	801caea <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 801caca:	697b      	ldr	r3, [r7, #20]
 801cacc:	2b00      	cmp	r3, #0
 801cace:	d00a      	beq.n	801cae6 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 801cad0:	697b      	ldr	r3, [r7, #20]
 801cad2:	3b01      	subs	r3, #1
 801cad4:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 801cad6:	68fb      	ldr	r3, [r7, #12]
 801cad8:	681b      	ldr	r3, [r3, #0]
 801cada:	689b      	ldr	r3, [r3, #8]
 801cadc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801cae0:	2b80      	cmp	r3, #128	; 0x80
 801cae2:	d0f2      	beq.n	801caca <SPI_EndRxTxTransaction+0x52>
 801cae4:	e000      	b.n	801cae8 <SPI_EndRxTxTransaction+0x70>
        break;
 801cae6:	bf00      	nop
  }

  return HAL_OK;
 801cae8:	2300      	movs	r3, #0
}
 801caea:	4618      	mov	r0, r3
 801caec:	3718      	adds	r7, #24
 801caee:	46bd      	mov	sp, r7
 801caf0:	bd80      	pop	{r7, pc}
 801caf2:	bf00      	nop
 801caf4:	20000564 	.word	0x20000564
 801caf8:	165e9f81 	.word	0x165e9f81

0801cafc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 801cafc:	b580      	push	{r7, lr}
 801cafe:	b082      	sub	sp, #8
 801cb00:	af00      	add	r7, sp, #0
 801cb02:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 801cb04:	687b      	ldr	r3, [r7, #4]
 801cb06:	2b00      	cmp	r3, #0
 801cb08:	d101      	bne.n	801cb0e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 801cb0a:	2301      	movs	r3, #1
 801cb0c:	e041      	b.n	801cb92 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 801cb0e:	687b      	ldr	r3, [r7, #4]
 801cb10:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801cb14:	b2db      	uxtb	r3, r3
 801cb16:	2b00      	cmp	r3, #0
 801cb18:	d106      	bne.n	801cb28 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 801cb1a:	687b      	ldr	r3, [r7, #4]
 801cb1c:	2200      	movs	r2, #0
 801cb1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 801cb22:	6878      	ldr	r0, [r7, #4]
 801cb24:	f7fa febe 	bl	80178a4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 801cb28:	687b      	ldr	r3, [r7, #4]
 801cb2a:	2202      	movs	r2, #2
 801cb2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 801cb30:	687b      	ldr	r3, [r7, #4]
 801cb32:	681a      	ldr	r2, [r3, #0]
 801cb34:	687b      	ldr	r3, [r7, #4]
 801cb36:	3304      	adds	r3, #4
 801cb38:	4619      	mov	r1, r3
 801cb3a:	4610      	mov	r0, r2
 801cb3c:	f000 faf2 	bl	801d124 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 801cb40:	687b      	ldr	r3, [r7, #4]
 801cb42:	2201      	movs	r2, #1
 801cb44:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 801cb48:	687b      	ldr	r3, [r7, #4]
 801cb4a:	2201      	movs	r2, #1
 801cb4c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 801cb50:	687b      	ldr	r3, [r7, #4]
 801cb52:	2201      	movs	r2, #1
 801cb54:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 801cb58:	687b      	ldr	r3, [r7, #4]
 801cb5a:	2201      	movs	r2, #1
 801cb5c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 801cb60:	687b      	ldr	r3, [r7, #4]
 801cb62:	2201      	movs	r2, #1
 801cb64:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 801cb68:	687b      	ldr	r3, [r7, #4]
 801cb6a:	2201      	movs	r2, #1
 801cb6c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 801cb70:	687b      	ldr	r3, [r7, #4]
 801cb72:	2201      	movs	r2, #1
 801cb74:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 801cb78:	687b      	ldr	r3, [r7, #4]
 801cb7a:	2201      	movs	r2, #1
 801cb7c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 801cb80:	687b      	ldr	r3, [r7, #4]
 801cb82:	2201      	movs	r2, #1
 801cb84:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 801cb88:	687b      	ldr	r3, [r7, #4]
 801cb8a:	2201      	movs	r2, #1
 801cb8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 801cb90:	2300      	movs	r3, #0
}
 801cb92:	4618      	mov	r0, r3
 801cb94:	3708      	adds	r7, #8
 801cb96:	46bd      	mov	sp, r7
 801cb98:	bd80      	pop	{r7, pc}
	...

0801cb9c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 801cb9c:	b480      	push	{r7}
 801cb9e:	b085      	sub	sp, #20
 801cba0:	af00      	add	r7, sp, #0
 801cba2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 801cba4:	687b      	ldr	r3, [r7, #4]
 801cba6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801cbaa:	b2db      	uxtb	r3, r3
 801cbac:	2b01      	cmp	r3, #1
 801cbae:	d001      	beq.n	801cbb4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 801cbb0:	2301      	movs	r3, #1
 801cbb2:	e04e      	b.n	801cc52 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 801cbb4:	687b      	ldr	r3, [r7, #4]
 801cbb6:	2202      	movs	r2, #2
 801cbb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 801cbbc:	687b      	ldr	r3, [r7, #4]
 801cbbe:	681b      	ldr	r3, [r3, #0]
 801cbc0:	68da      	ldr	r2, [r3, #12]
 801cbc2:	687b      	ldr	r3, [r7, #4]
 801cbc4:	681b      	ldr	r3, [r3, #0]
 801cbc6:	f042 0201 	orr.w	r2, r2, #1
 801cbca:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 801cbcc:	687b      	ldr	r3, [r7, #4]
 801cbce:	681b      	ldr	r3, [r3, #0]
 801cbd0:	4a23      	ldr	r2, [pc, #140]	; (801cc60 <HAL_TIM_Base_Start_IT+0xc4>)
 801cbd2:	4293      	cmp	r3, r2
 801cbd4:	d022      	beq.n	801cc1c <HAL_TIM_Base_Start_IT+0x80>
 801cbd6:	687b      	ldr	r3, [r7, #4]
 801cbd8:	681b      	ldr	r3, [r3, #0]
 801cbda:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801cbde:	d01d      	beq.n	801cc1c <HAL_TIM_Base_Start_IT+0x80>
 801cbe0:	687b      	ldr	r3, [r7, #4]
 801cbe2:	681b      	ldr	r3, [r3, #0]
 801cbe4:	4a1f      	ldr	r2, [pc, #124]	; (801cc64 <HAL_TIM_Base_Start_IT+0xc8>)
 801cbe6:	4293      	cmp	r3, r2
 801cbe8:	d018      	beq.n	801cc1c <HAL_TIM_Base_Start_IT+0x80>
 801cbea:	687b      	ldr	r3, [r7, #4]
 801cbec:	681b      	ldr	r3, [r3, #0]
 801cbee:	4a1e      	ldr	r2, [pc, #120]	; (801cc68 <HAL_TIM_Base_Start_IT+0xcc>)
 801cbf0:	4293      	cmp	r3, r2
 801cbf2:	d013      	beq.n	801cc1c <HAL_TIM_Base_Start_IT+0x80>
 801cbf4:	687b      	ldr	r3, [r7, #4]
 801cbf6:	681b      	ldr	r3, [r3, #0]
 801cbf8:	4a1c      	ldr	r2, [pc, #112]	; (801cc6c <HAL_TIM_Base_Start_IT+0xd0>)
 801cbfa:	4293      	cmp	r3, r2
 801cbfc:	d00e      	beq.n	801cc1c <HAL_TIM_Base_Start_IT+0x80>
 801cbfe:	687b      	ldr	r3, [r7, #4]
 801cc00:	681b      	ldr	r3, [r3, #0]
 801cc02:	4a1b      	ldr	r2, [pc, #108]	; (801cc70 <HAL_TIM_Base_Start_IT+0xd4>)
 801cc04:	4293      	cmp	r3, r2
 801cc06:	d009      	beq.n	801cc1c <HAL_TIM_Base_Start_IT+0x80>
 801cc08:	687b      	ldr	r3, [r7, #4]
 801cc0a:	681b      	ldr	r3, [r3, #0]
 801cc0c:	4a19      	ldr	r2, [pc, #100]	; (801cc74 <HAL_TIM_Base_Start_IT+0xd8>)
 801cc0e:	4293      	cmp	r3, r2
 801cc10:	d004      	beq.n	801cc1c <HAL_TIM_Base_Start_IT+0x80>
 801cc12:	687b      	ldr	r3, [r7, #4]
 801cc14:	681b      	ldr	r3, [r3, #0]
 801cc16:	4a18      	ldr	r2, [pc, #96]	; (801cc78 <HAL_TIM_Base_Start_IT+0xdc>)
 801cc18:	4293      	cmp	r3, r2
 801cc1a:	d111      	bne.n	801cc40 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 801cc1c:	687b      	ldr	r3, [r7, #4]
 801cc1e:	681b      	ldr	r3, [r3, #0]
 801cc20:	689b      	ldr	r3, [r3, #8]
 801cc22:	f003 0307 	and.w	r3, r3, #7
 801cc26:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801cc28:	68fb      	ldr	r3, [r7, #12]
 801cc2a:	2b06      	cmp	r3, #6
 801cc2c:	d010      	beq.n	801cc50 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 801cc2e:	687b      	ldr	r3, [r7, #4]
 801cc30:	681b      	ldr	r3, [r3, #0]
 801cc32:	681a      	ldr	r2, [r3, #0]
 801cc34:	687b      	ldr	r3, [r7, #4]
 801cc36:	681b      	ldr	r3, [r3, #0]
 801cc38:	f042 0201 	orr.w	r2, r2, #1
 801cc3c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801cc3e:	e007      	b.n	801cc50 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 801cc40:	687b      	ldr	r3, [r7, #4]
 801cc42:	681b      	ldr	r3, [r3, #0]
 801cc44:	681a      	ldr	r2, [r3, #0]
 801cc46:	687b      	ldr	r3, [r7, #4]
 801cc48:	681b      	ldr	r3, [r3, #0]
 801cc4a:	f042 0201 	orr.w	r2, r2, #1
 801cc4e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 801cc50:	2300      	movs	r3, #0
}
 801cc52:	4618      	mov	r0, r3
 801cc54:	3714      	adds	r7, #20
 801cc56:	46bd      	mov	sp, r7
 801cc58:	f85d 7b04 	ldr.w	r7, [sp], #4
 801cc5c:	4770      	bx	lr
 801cc5e:	bf00      	nop
 801cc60:	40010000 	.word	0x40010000
 801cc64:	40000400 	.word	0x40000400
 801cc68:	40000800 	.word	0x40000800
 801cc6c:	40000c00 	.word	0x40000c00
 801cc70:	40010400 	.word	0x40010400
 801cc74:	40014000 	.word	0x40014000
 801cc78:	40001800 	.word	0x40001800

0801cc7c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 801cc7c:	b580      	push	{r7, lr}
 801cc7e:	b082      	sub	sp, #8
 801cc80:	af00      	add	r7, sp, #0
 801cc82:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 801cc84:	687b      	ldr	r3, [r7, #4]
 801cc86:	681b      	ldr	r3, [r3, #0]
 801cc88:	691b      	ldr	r3, [r3, #16]
 801cc8a:	f003 0302 	and.w	r3, r3, #2
 801cc8e:	2b02      	cmp	r3, #2
 801cc90:	d122      	bne.n	801ccd8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 801cc92:	687b      	ldr	r3, [r7, #4]
 801cc94:	681b      	ldr	r3, [r3, #0]
 801cc96:	68db      	ldr	r3, [r3, #12]
 801cc98:	f003 0302 	and.w	r3, r3, #2
 801cc9c:	2b02      	cmp	r3, #2
 801cc9e:	d11b      	bne.n	801ccd8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 801cca0:	687b      	ldr	r3, [r7, #4]
 801cca2:	681b      	ldr	r3, [r3, #0]
 801cca4:	f06f 0202 	mvn.w	r2, #2
 801cca8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 801ccaa:	687b      	ldr	r3, [r7, #4]
 801ccac:	2201      	movs	r2, #1
 801ccae:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 801ccb0:	687b      	ldr	r3, [r7, #4]
 801ccb2:	681b      	ldr	r3, [r3, #0]
 801ccb4:	699b      	ldr	r3, [r3, #24]
 801ccb6:	f003 0303 	and.w	r3, r3, #3
 801ccba:	2b00      	cmp	r3, #0
 801ccbc:	d003      	beq.n	801ccc6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 801ccbe:	6878      	ldr	r0, [r7, #4]
 801ccc0:	f000 fa11 	bl	801d0e6 <HAL_TIM_IC_CaptureCallback>
 801ccc4:	e005      	b.n	801ccd2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 801ccc6:	6878      	ldr	r0, [r7, #4]
 801ccc8:	f000 fa03 	bl	801d0d2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 801cccc:	6878      	ldr	r0, [r7, #4]
 801ccce:	f000 fa14 	bl	801d0fa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 801ccd2:	687b      	ldr	r3, [r7, #4]
 801ccd4:	2200      	movs	r2, #0
 801ccd6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 801ccd8:	687b      	ldr	r3, [r7, #4]
 801ccda:	681b      	ldr	r3, [r3, #0]
 801ccdc:	691b      	ldr	r3, [r3, #16]
 801ccde:	f003 0304 	and.w	r3, r3, #4
 801cce2:	2b04      	cmp	r3, #4
 801cce4:	d122      	bne.n	801cd2c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 801cce6:	687b      	ldr	r3, [r7, #4]
 801cce8:	681b      	ldr	r3, [r3, #0]
 801ccea:	68db      	ldr	r3, [r3, #12]
 801ccec:	f003 0304 	and.w	r3, r3, #4
 801ccf0:	2b04      	cmp	r3, #4
 801ccf2:	d11b      	bne.n	801cd2c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 801ccf4:	687b      	ldr	r3, [r7, #4]
 801ccf6:	681b      	ldr	r3, [r3, #0]
 801ccf8:	f06f 0204 	mvn.w	r2, #4
 801ccfc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 801ccfe:	687b      	ldr	r3, [r7, #4]
 801cd00:	2202      	movs	r2, #2
 801cd02:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 801cd04:	687b      	ldr	r3, [r7, #4]
 801cd06:	681b      	ldr	r3, [r3, #0]
 801cd08:	699b      	ldr	r3, [r3, #24]
 801cd0a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 801cd0e:	2b00      	cmp	r3, #0
 801cd10:	d003      	beq.n	801cd1a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 801cd12:	6878      	ldr	r0, [r7, #4]
 801cd14:	f000 f9e7 	bl	801d0e6 <HAL_TIM_IC_CaptureCallback>
 801cd18:	e005      	b.n	801cd26 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 801cd1a:	6878      	ldr	r0, [r7, #4]
 801cd1c:	f000 f9d9 	bl	801d0d2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 801cd20:	6878      	ldr	r0, [r7, #4]
 801cd22:	f000 f9ea 	bl	801d0fa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 801cd26:	687b      	ldr	r3, [r7, #4]
 801cd28:	2200      	movs	r2, #0
 801cd2a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 801cd2c:	687b      	ldr	r3, [r7, #4]
 801cd2e:	681b      	ldr	r3, [r3, #0]
 801cd30:	691b      	ldr	r3, [r3, #16]
 801cd32:	f003 0308 	and.w	r3, r3, #8
 801cd36:	2b08      	cmp	r3, #8
 801cd38:	d122      	bne.n	801cd80 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 801cd3a:	687b      	ldr	r3, [r7, #4]
 801cd3c:	681b      	ldr	r3, [r3, #0]
 801cd3e:	68db      	ldr	r3, [r3, #12]
 801cd40:	f003 0308 	and.w	r3, r3, #8
 801cd44:	2b08      	cmp	r3, #8
 801cd46:	d11b      	bne.n	801cd80 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 801cd48:	687b      	ldr	r3, [r7, #4]
 801cd4a:	681b      	ldr	r3, [r3, #0]
 801cd4c:	f06f 0208 	mvn.w	r2, #8
 801cd50:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 801cd52:	687b      	ldr	r3, [r7, #4]
 801cd54:	2204      	movs	r2, #4
 801cd56:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 801cd58:	687b      	ldr	r3, [r7, #4]
 801cd5a:	681b      	ldr	r3, [r3, #0]
 801cd5c:	69db      	ldr	r3, [r3, #28]
 801cd5e:	f003 0303 	and.w	r3, r3, #3
 801cd62:	2b00      	cmp	r3, #0
 801cd64:	d003      	beq.n	801cd6e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 801cd66:	6878      	ldr	r0, [r7, #4]
 801cd68:	f000 f9bd 	bl	801d0e6 <HAL_TIM_IC_CaptureCallback>
 801cd6c:	e005      	b.n	801cd7a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 801cd6e:	6878      	ldr	r0, [r7, #4]
 801cd70:	f000 f9af 	bl	801d0d2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 801cd74:	6878      	ldr	r0, [r7, #4]
 801cd76:	f000 f9c0 	bl	801d0fa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 801cd7a:	687b      	ldr	r3, [r7, #4]
 801cd7c:	2200      	movs	r2, #0
 801cd7e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 801cd80:	687b      	ldr	r3, [r7, #4]
 801cd82:	681b      	ldr	r3, [r3, #0]
 801cd84:	691b      	ldr	r3, [r3, #16]
 801cd86:	f003 0310 	and.w	r3, r3, #16
 801cd8a:	2b10      	cmp	r3, #16
 801cd8c:	d122      	bne.n	801cdd4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 801cd8e:	687b      	ldr	r3, [r7, #4]
 801cd90:	681b      	ldr	r3, [r3, #0]
 801cd92:	68db      	ldr	r3, [r3, #12]
 801cd94:	f003 0310 	and.w	r3, r3, #16
 801cd98:	2b10      	cmp	r3, #16
 801cd9a:	d11b      	bne.n	801cdd4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 801cd9c:	687b      	ldr	r3, [r7, #4]
 801cd9e:	681b      	ldr	r3, [r3, #0]
 801cda0:	f06f 0210 	mvn.w	r2, #16
 801cda4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 801cda6:	687b      	ldr	r3, [r7, #4]
 801cda8:	2208      	movs	r2, #8
 801cdaa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 801cdac:	687b      	ldr	r3, [r7, #4]
 801cdae:	681b      	ldr	r3, [r3, #0]
 801cdb0:	69db      	ldr	r3, [r3, #28]
 801cdb2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 801cdb6:	2b00      	cmp	r3, #0
 801cdb8:	d003      	beq.n	801cdc2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 801cdba:	6878      	ldr	r0, [r7, #4]
 801cdbc:	f000 f993 	bl	801d0e6 <HAL_TIM_IC_CaptureCallback>
 801cdc0:	e005      	b.n	801cdce <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 801cdc2:	6878      	ldr	r0, [r7, #4]
 801cdc4:	f000 f985 	bl	801d0d2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 801cdc8:	6878      	ldr	r0, [r7, #4]
 801cdca:	f000 f996 	bl	801d0fa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 801cdce:	687b      	ldr	r3, [r7, #4]
 801cdd0:	2200      	movs	r2, #0
 801cdd2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 801cdd4:	687b      	ldr	r3, [r7, #4]
 801cdd6:	681b      	ldr	r3, [r3, #0]
 801cdd8:	691b      	ldr	r3, [r3, #16]
 801cdda:	f003 0301 	and.w	r3, r3, #1
 801cdde:	2b01      	cmp	r3, #1
 801cde0:	d10e      	bne.n	801ce00 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 801cde2:	687b      	ldr	r3, [r7, #4]
 801cde4:	681b      	ldr	r3, [r3, #0]
 801cde6:	68db      	ldr	r3, [r3, #12]
 801cde8:	f003 0301 	and.w	r3, r3, #1
 801cdec:	2b01      	cmp	r3, #1
 801cdee:	d107      	bne.n	801ce00 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 801cdf0:	687b      	ldr	r3, [r7, #4]
 801cdf2:	681b      	ldr	r3, [r3, #0]
 801cdf4:	f06f 0201 	mvn.w	r2, #1
 801cdf8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 801cdfa:	6878      	ldr	r0, [r7, #4]
 801cdfc:	f7fa fb5e 	bl	80174bc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 801ce00:	687b      	ldr	r3, [r7, #4]
 801ce02:	681b      	ldr	r3, [r3, #0]
 801ce04:	691b      	ldr	r3, [r3, #16]
 801ce06:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801ce0a:	2b80      	cmp	r3, #128	; 0x80
 801ce0c:	d10e      	bne.n	801ce2c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 801ce0e:	687b      	ldr	r3, [r7, #4]
 801ce10:	681b      	ldr	r3, [r3, #0]
 801ce12:	68db      	ldr	r3, [r3, #12]
 801ce14:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801ce18:	2b80      	cmp	r3, #128	; 0x80
 801ce1a:	d107      	bne.n	801ce2c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 801ce1c:	687b      	ldr	r3, [r7, #4]
 801ce1e:	681b      	ldr	r3, [r3, #0]
 801ce20:	f06f 0280 	mvn.w	r2, #128	; 0x80
 801ce24:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 801ce26:	6878      	ldr	r0, [r7, #4]
 801ce28:	f000 fcec 	bl	801d804 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 801ce2c:	687b      	ldr	r3, [r7, #4]
 801ce2e:	681b      	ldr	r3, [r3, #0]
 801ce30:	691b      	ldr	r3, [r3, #16]
 801ce32:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801ce36:	2b40      	cmp	r3, #64	; 0x40
 801ce38:	d10e      	bne.n	801ce58 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 801ce3a:	687b      	ldr	r3, [r7, #4]
 801ce3c:	681b      	ldr	r3, [r3, #0]
 801ce3e:	68db      	ldr	r3, [r3, #12]
 801ce40:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801ce44:	2b40      	cmp	r3, #64	; 0x40
 801ce46:	d107      	bne.n	801ce58 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 801ce48:	687b      	ldr	r3, [r7, #4]
 801ce4a:	681b      	ldr	r3, [r3, #0]
 801ce4c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 801ce50:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 801ce52:	6878      	ldr	r0, [r7, #4]
 801ce54:	f000 f95b 	bl	801d10e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 801ce58:	687b      	ldr	r3, [r7, #4]
 801ce5a:	681b      	ldr	r3, [r3, #0]
 801ce5c:	691b      	ldr	r3, [r3, #16]
 801ce5e:	f003 0320 	and.w	r3, r3, #32
 801ce62:	2b20      	cmp	r3, #32
 801ce64:	d10e      	bne.n	801ce84 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 801ce66:	687b      	ldr	r3, [r7, #4]
 801ce68:	681b      	ldr	r3, [r3, #0]
 801ce6a:	68db      	ldr	r3, [r3, #12]
 801ce6c:	f003 0320 	and.w	r3, r3, #32
 801ce70:	2b20      	cmp	r3, #32
 801ce72:	d107      	bne.n	801ce84 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 801ce74:	687b      	ldr	r3, [r7, #4]
 801ce76:	681b      	ldr	r3, [r3, #0]
 801ce78:	f06f 0220 	mvn.w	r2, #32
 801ce7c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 801ce7e:	6878      	ldr	r0, [r7, #4]
 801ce80:	f000 fcb6 	bl	801d7f0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 801ce84:	bf00      	nop
 801ce86:	3708      	adds	r7, #8
 801ce88:	46bd      	mov	sp, r7
 801ce8a:	bd80      	pop	{r7, pc}

0801ce8c <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 801ce8c:	b580      	push	{r7, lr}
 801ce8e:	b086      	sub	sp, #24
 801ce90:	af00      	add	r7, sp, #0
 801ce92:	60f8      	str	r0, [r7, #12]
 801ce94:	60b9      	str	r1, [r7, #8]
 801ce96:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 801ce98:	2300      	movs	r3, #0
 801ce9a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 801ce9c:	68fb      	ldr	r3, [r7, #12]
 801ce9e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 801cea2:	2b01      	cmp	r3, #1
 801cea4:	d101      	bne.n	801ceaa <HAL_TIM_OC_ConfigChannel+0x1e>
 801cea6:	2302      	movs	r3, #2
 801cea8:	e048      	b.n	801cf3c <HAL_TIM_OC_ConfigChannel+0xb0>
 801ceaa:	68fb      	ldr	r3, [r7, #12]
 801ceac:	2201      	movs	r2, #1
 801ceae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 801ceb2:	687b      	ldr	r3, [r7, #4]
 801ceb4:	2b0c      	cmp	r3, #12
 801ceb6:	d839      	bhi.n	801cf2c <HAL_TIM_OC_ConfigChannel+0xa0>
 801ceb8:	a201      	add	r2, pc, #4	; (adr r2, 801cec0 <HAL_TIM_OC_ConfigChannel+0x34>)
 801ceba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801cebe:	bf00      	nop
 801cec0:	0801cef5 	.word	0x0801cef5
 801cec4:	0801cf2d 	.word	0x0801cf2d
 801cec8:	0801cf2d 	.word	0x0801cf2d
 801cecc:	0801cf2d 	.word	0x0801cf2d
 801ced0:	0801cf03 	.word	0x0801cf03
 801ced4:	0801cf2d 	.word	0x0801cf2d
 801ced8:	0801cf2d 	.word	0x0801cf2d
 801cedc:	0801cf2d 	.word	0x0801cf2d
 801cee0:	0801cf11 	.word	0x0801cf11
 801cee4:	0801cf2d 	.word	0x0801cf2d
 801cee8:	0801cf2d 	.word	0x0801cf2d
 801ceec:	0801cf2d 	.word	0x0801cf2d
 801cef0:	0801cf1f 	.word	0x0801cf1f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 801cef4:	68fb      	ldr	r3, [r7, #12]
 801cef6:	681b      	ldr	r3, [r3, #0]
 801cef8:	68b9      	ldr	r1, [r7, #8]
 801cefa:	4618      	mov	r0, r3
 801cefc:	f000 f9b2 	bl	801d264 <TIM_OC1_SetConfig>
      break;
 801cf00:	e017      	b.n	801cf32 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 801cf02:	68fb      	ldr	r3, [r7, #12]
 801cf04:	681b      	ldr	r3, [r3, #0]
 801cf06:	68b9      	ldr	r1, [r7, #8]
 801cf08:	4618      	mov	r0, r3
 801cf0a:	f000 fa1b 	bl	801d344 <TIM_OC2_SetConfig>
      break;
 801cf0e:	e010      	b.n	801cf32 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 801cf10:	68fb      	ldr	r3, [r7, #12]
 801cf12:	681b      	ldr	r3, [r3, #0]
 801cf14:	68b9      	ldr	r1, [r7, #8]
 801cf16:	4618      	mov	r0, r3
 801cf18:	f000 fa8a 	bl	801d430 <TIM_OC3_SetConfig>
      break;
 801cf1c:	e009      	b.n	801cf32 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 801cf1e:	68fb      	ldr	r3, [r7, #12]
 801cf20:	681b      	ldr	r3, [r3, #0]
 801cf22:	68b9      	ldr	r1, [r7, #8]
 801cf24:	4618      	mov	r0, r3
 801cf26:	f000 faf7 	bl	801d518 <TIM_OC4_SetConfig>
      break;
 801cf2a:	e002      	b.n	801cf32 <HAL_TIM_OC_ConfigChannel+0xa6>
    }

    default:
      status = HAL_ERROR;
 801cf2c:	2301      	movs	r3, #1
 801cf2e:	75fb      	strb	r3, [r7, #23]
      break;
 801cf30:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 801cf32:	68fb      	ldr	r3, [r7, #12]
 801cf34:	2200      	movs	r2, #0
 801cf36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 801cf3a:	7dfb      	ldrb	r3, [r7, #23]
}
 801cf3c:	4618      	mov	r0, r3
 801cf3e:	3718      	adds	r7, #24
 801cf40:	46bd      	mov	sp, r7
 801cf42:	bd80      	pop	{r7, pc}

0801cf44 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 801cf44:	b580      	push	{r7, lr}
 801cf46:	b084      	sub	sp, #16
 801cf48:	af00      	add	r7, sp, #0
 801cf4a:	6078      	str	r0, [r7, #4]
 801cf4c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 801cf4e:	2300      	movs	r3, #0
 801cf50:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 801cf52:	687b      	ldr	r3, [r7, #4]
 801cf54:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 801cf58:	2b01      	cmp	r3, #1
 801cf5a:	d101      	bne.n	801cf60 <HAL_TIM_ConfigClockSource+0x1c>
 801cf5c:	2302      	movs	r3, #2
 801cf5e:	e0b4      	b.n	801d0ca <HAL_TIM_ConfigClockSource+0x186>
 801cf60:	687b      	ldr	r3, [r7, #4]
 801cf62:	2201      	movs	r2, #1
 801cf64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 801cf68:	687b      	ldr	r3, [r7, #4]
 801cf6a:	2202      	movs	r2, #2
 801cf6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 801cf70:	687b      	ldr	r3, [r7, #4]
 801cf72:	681b      	ldr	r3, [r3, #0]
 801cf74:	689b      	ldr	r3, [r3, #8]
 801cf76:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 801cf78:	68bb      	ldr	r3, [r7, #8]
 801cf7a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 801cf7e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 801cf80:	68bb      	ldr	r3, [r7, #8]
 801cf82:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 801cf86:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 801cf88:	687b      	ldr	r3, [r7, #4]
 801cf8a:	681b      	ldr	r3, [r3, #0]
 801cf8c:	68ba      	ldr	r2, [r7, #8]
 801cf8e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 801cf90:	683b      	ldr	r3, [r7, #0]
 801cf92:	681b      	ldr	r3, [r3, #0]
 801cf94:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 801cf98:	d03e      	beq.n	801d018 <HAL_TIM_ConfigClockSource+0xd4>
 801cf9a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 801cf9e:	f200 8087 	bhi.w	801d0b0 <HAL_TIM_ConfigClockSource+0x16c>
 801cfa2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801cfa6:	f000 8086 	beq.w	801d0b6 <HAL_TIM_ConfigClockSource+0x172>
 801cfaa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801cfae:	d87f      	bhi.n	801d0b0 <HAL_TIM_ConfigClockSource+0x16c>
 801cfb0:	2b70      	cmp	r3, #112	; 0x70
 801cfb2:	d01a      	beq.n	801cfea <HAL_TIM_ConfigClockSource+0xa6>
 801cfb4:	2b70      	cmp	r3, #112	; 0x70
 801cfb6:	d87b      	bhi.n	801d0b0 <HAL_TIM_ConfigClockSource+0x16c>
 801cfb8:	2b60      	cmp	r3, #96	; 0x60
 801cfba:	d050      	beq.n	801d05e <HAL_TIM_ConfigClockSource+0x11a>
 801cfbc:	2b60      	cmp	r3, #96	; 0x60
 801cfbe:	d877      	bhi.n	801d0b0 <HAL_TIM_ConfigClockSource+0x16c>
 801cfc0:	2b50      	cmp	r3, #80	; 0x50
 801cfc2:	d03c      	beq.n	801d03e <HAL_TIM_ConfigClockSource+0xfa>
 801cfc4:	2b50      	cmp	r3, #80	; 0x50
 801cfc6:	d873      	bhi.n	801d0b0 <HAL_TIM_ConfigClockSource+0x16c>
 801cfc8:	2b40      	cmp	r3, #64	; 0x40
 801cfca:	d058      	beq.n	801d07e <HAL_TIM_ConfigClockSource+0x13a>
 801cfcc:	2b40      	cmp	r3, #64	; 0x40
 801cfce:	d86f      	bhi.n	801d0b0 <HAL_TIM_ConfigClockSource+0x16c>
 801cfd0:	2b30      	cmp	r3, #48	; 0x30
 801cfd2:	d064      	beq.n	801d09e <HAL_TIM_ConfigClockSource+0x15a>
 801cfd4:	2b30      	cmp	r3, #48	; 0x30
 801cfd6:	d86b      	bhi.n	801d0b0 <HAL_TIM_ConfigClockSource+0x16c>
 801cfd8:	2b20      	cmp	r3, #32
 801cfda:	d060      	beq.n	801d09e <HAL_TIM_ConfigClockSource+0x15a>
 801cfdc:	2b20      	cmp	r3, #32
 801cfde:	d867      	bhi.n	801d0b0 <HAL_TIM_ConfigClockSource+0x16c>
 801cfe0:	2b00      	cmp	r3, #0
 801cfe2:	d05c      	beq.n	801d09e <HAL_TIM_ConfigClockSource+0x15a>
 801cfe4:	2b10      	cmp	r3, #16
 801cfe6:	d05a      	beq.n	801d09e <HAL_TIM_ConfigClockSource+0x15a>
 801cfe8:	e062      	b.n	801d0b0 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 801cfea:	687b      	ldr	r3, [r7, #4]
 801cfec:	6818      	ldr	r0, [r3, #0]
 801cfee:	683b      	ldr	r3, [r7, #0]
 801cff0:	6899      	ldr	r1, [r3, #8]
 801cff2:	683b      	ldr	r3, [r7, #0]
 801cff4:	685a      	ldr	r2, [r3, #4]
 801cff6:	683b      	ldr	r3, [r7, #0]
 801cff8:	68db      	ldr	r3, [r3, #12]
 801cffa:	f000 fb5d 	bl	801d6b8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 801cffe:	687b      	ldr	r3, [r7, #4]
 801d000:	681b      	ldr	r3, [r3, #0]
 801d002:	689b      	ldr	r3, [r3, #8]
 801d004:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 801d006:	68bb      	ldr	r3, [r7, #8]
 801d008:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 801d00c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 801d00e:	687b      	ldr	r3, [r7, #4]
 801d010:	681b      	ldr	r3, [r3, #0]
 801d012:	68ba      	ldr	r2, [r7, #8]
 801d014:	609a      	str	r2, [r3, #8]
      break;
 801d016:	e04f      	b.n	801d0b8 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 801d018:	687b      	ldr	r3, [r7, #4]
 801d01a:	6818      	ldr	r0, [r3, #0]
 801d01c:	683b      	ldr	r3, [r7, #0]
 801d01e:	6899      	ldr	r1, [r3, #8]
 801d020:	683b      	ldr	r3, [r7, #0]
 801d022:	685a      	ldr	r2, [r3, #4]
 801d024:	683b      	ldr	r3, [r7, #0]
 801d026:	68db      	ldr	r3, [r3, #12]
 801d028:	f000 fb46 	bl	801d6b8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 801d02c:	687b      	ldr	r3, [r7, #4]
 801d02e:	681b      	ldr	r3, [r3, #0]
 801d030:	689a      	ldr	r2, [r3, #8]
 801d032:	687b      	ldr	r3, [r7, #4]
 801d034:	681b      	ldr	r3, [r3, #0]
 801d036:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 801d03a:	609a      	str	r2, [r3, #8]
      break;
 801d03c:	e03c      	b.n	801d0b8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 801d03e:	687b      	ldr	r3, [r7, #4]
 801d040:	6818      	ldr	r0, [r3, #0]
 801d042:	683b      	ldr	r3, [r7, #0]
 801d044:	6859      	ldr	r1, [r3, #4]
 801d046:	683b      	ldr	r3, [r7, #0]
 801d048:	68db      	ldr	r3, [r3, #12]
 801d04a:	461a      	mov	r2, r3
 801d04c:	f000 faba 	bl	801d5c4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 801d050:	687b      	ldr	r3, [r7, #4]
 801d052:	681b      	ldr	r3, [r3, #0]
 801d054:	2150      	movs	r1, #80	; 0x50
 801d056:	4618      	mov	r0, r3
 801d058:	f000 fb13 	bl	801d682 <TIM_ITRx_SetConfig>
      break;
 801d05c:	e02c      	b.n	801d0b8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 801d05e:	687b      	ldr	r3, [r7, #4]
 801d060:	6818      	ldr	r0, [r3, #0]
 801d062:	683b      	ldr	r3, [r7, #0]
 801d064:	6859      	ldr	r1, [r3, #4]
 801d066:	683b      	ldr	r3, [r7, #0]
 801d068:	68db      	ldr	r3, [r3, #12]
 801d06a:	461a      	mov	r2, r3
 801d06c:	f000 fad9 	bl	801d622 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 801d070:	687b      	ldr	r3, [r7, #4]
 801d072:	681b      	ldr	r3, [r3, #0]
 801d074:	2160      	movs	r1, #96	; 0x60
 801d076:	4618      	mov	r0, r3
 801d078:	f000 fb03 	bl	801d682 <TIM_ITRx_SetConfig>
      break;
 801d07c:	e01c      	b.n	801d0b8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 801d07e:	687b      	ldr	r3, [r7, #4]
 801d080:	6818      	ldr	r0, [r3, #0]
 801d082:	683b      	ldr	r3, [r7, #0]
 801d084:	6859      	ldr	r1, [r3, #4]
 801d086:	683b      	ldr	r3, [r7, #0]
 801d088:	68db      	ldr	r3, [r3, #12]
 801d08a:	461a      	mov	r2, r3
 801d08c:	f000 fa9a 	bl	801d5c4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 801d090:	687b      	ldr	r3, [r7, #4]
 801d092:	681b      	ldr	r3, [r3, #0]
 801d094:	2140      	movs	r1, #64	; 0x40
 801d096:	4618      	mov	r0, r3
 801d098:	f000 faf3 	bl	801d682 <TIM_ITRx_SetConfig>
      break;
 801d09c:	e00c      	b.n	801d0b8 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 801d09e:	687b      	ldr	r3, [r7, #4]
 801d0a0:	681a      	ldr	r2, [r3, #0]
 801d0a2:	683b      	ldr	r3, [r7, #0]
 801d0a4:	681b      	ldr	r3, [r3, #0]
 801d0a6:	4619      	mov	r1, r3
 801d0a8:	4610      	mov	r0, r2
 801d0aa:	f000 faea 	bl	801d682 <TIM_ITRx_SetConfig>
      break;
 801d0ae:	e003      	b.n	801d0b8 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 801d0b0:	2301      	movs	r3, #1
 801d0b2:	73fb      	strb	r3, [r7, #15]
      break;
 801d0b4:	e000      	b.n	801d0b8 <HAL_TIM_ConfigClockSource+0x174>
      break;
 801d0b6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 801d0b8:	687b      	ldr	r3, [r7, #4]
 801d0ba:	2201      	movs	r2, #1
 801d0bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 801d0c0:	687b      	ldr	r3, [r7, #4]
 801d0c2:	2200      	movs	r2, #0
 801d0c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 801d0c8:	7bfb      	ldrb	r3, [r7, #15]
}
 801d0ca:	4618      	mov	r0, r3
 801d0cc:	3710      	adds	r7, #16
 801d0ce:	46bd      	mov	sp, r7
 801d0d0:	bd80      	pop	{r7, pc}

0801d0d2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 801d0d2:	b480      	push	{r7}
 801d0d4:	b083      	sub	sp, #12
 801d0d6:	af00      	add	r7, sp, #0
 801d0d8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 801d0da:	bf00      	nop
 801d0dc:	370c      	adds	r7, #12
 801d0de:	46bd      	mov	sp, r7
 801d0e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d0e4:	4770      	bx	lr

0801d0e6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 801d0e6:	b480      	push	{r7}
 801d0e8:	b083      	sub	sp, #12
 801d0ea:	af00      	add	r7, sp, #0
 801d0ec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 801d0ee:	bf00      	nop
 801d0f0:	370c      	adds	r7, #12
 801d0f2:	46bd      	mov	sp, r7
 801d0f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d0f8:	4770      	bx	lr

0801d0fa <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 801d0fa:	b480      	push	{r7}
 801d0fc:	b083      	sub	sp, #12
 801d0fe:	af00      	add	r7, sp, #0
 801d100:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 801d102:	bf00      	nop
 801d104:	370c      	adds	r7, #12
 801d106:	46bd      	mov	sp, r7
 801d108:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d10c:	4770      	bx	lr

0801d10e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 801d10e:	b480      	push	{r7}
 801d110:	b083      	sub	sp, #12
 801d112:	af00      	add	r7, sp, #0
 801d114:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 801d116:	bf00      	nop
 801d118:	370c      	adds	r7, #12
 801d11a:	46bd      	mov	sp, r7
 801d11c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d120:	4770      	bx	lr
	...

0801d124 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 801d124:	b480      	push	{r7}
 801d126:	b085      	sub	sp, #20
 801d128:	af00      	add	r7, sp, #0
 801d12a:	6078      	str	r0, [r7, #4]
 801d12c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 801d12e:	687b      	ldr	r3, [r7, #4]
 801d130:	681b      	ldr	r3, [r3, #0]
 801d132:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 801d134:	687b      	ldr	r3, [r7, #4]
 801d136:	4a40      	ldr	r2, [pc, #256]	; (801d238 <TIM_Base_SetConfig+0x114>)
 801d138:	4293      	cmp	r3, r2
 801d13a:	d013      	beq.n	801d164 <TIM_Base_SetConfig+0x40>
 801d13c:	687b      	ldr	r3, [r7, #4]
 801d13e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801d142:	d00f      	beq.n	801d164 <TIM_Base_SetConfig+0x40>
 801d144:	687b      	ldr	r3, [r7, #4]
 801d146:	4a3d      	ldr	r2, [pc, #244]	; (801d23c <TIM_Base_SetConfig+0x118>)
 801d148:	4293      	cmp	r3, r2
 801d14a:	d00b      	beq.n	801d164 <TIM_Base_SetConfig+0x40>
 801d14c:	687b      	ldr	r3, [r7, #4]
 801d14e:	4a3c      	ldr	r2, [pc, #240]	; (801d240 <TIM_Base_SetConfig+0x11c>)
 801d150:	4293      	cmp	r3, r2
 801d152:	d007      	beq.n	801d164 <TIM_Base_SetConfig+0x40>
 801d154:	687b      	ldr	r3, [r7, #4]
 801d156:	4a3b      	ldr	r2, [pc, #236]	; (801d244 <TIM_Base_SetConfig+0x120>)
 801d158:	4293      	cmp	r3, r2
 801d15a:	d003      	beq.n	801d164 <TIM_Base_SetConfig+0x40>
 801d15c:	687b      	ldr	r3, [r7, #4]
 801d15e:	4a3a      	ldr	r2, [pc, #232]	; (801d248 <TIM_Base_SetConfig+0x124>)
 801d160:	4293      	cmp	r3, r2
 801d162:	d108      	bne.n	801d176 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 801d164:	68fb      	ldr	r3, [r7, #12]
 801d166:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801d16a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 801d16c:	683b      	ldr	r3, [r7, #0]
 801d16e:	685b      	ldr	r3, [r3, #4]
 801d170:	68fa      	ldr	r2, [r7, #12]
 801d172:	4313      	orrs	r3, r2
 801d174:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 801d176:	687b      	ldr	r3, [r7, #4]
 801d178:	4a2f      	ldr	r2, [pc, #188]	; (801d238 <TIM_Base_SetConfig+0x114>)
 801d17a:	4293      	cmp	r3, r2
 801d17c:	d02b      	beq.n	801d1d6 <TIM_Base_SetConfig+0xb2>
 801d17e:	687b      	ldr	r3, [r7, #4]
 801d180:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801d184:	d027      	beq.n	801d1d6 <TIM_Base_SetConfig+0xb2>
 801d186:	687b      	ldr	r3, [r7, #4]
 801d188:	4a2c      	ldr	r2, [pc, #176]	; (801d23c <TIM_Base_SetConfig+0x118>)
 801d18a:	4293      	cmp	r3, r2
 801d18c:	d023      	beq.n	801d1d6 <TIM_Base_SetConfig+0xb2>
 801d18e:	687b      	ldr	r3, [r7, #4]
 801d190:	4a2b      	ldr	r2, [pc, #172]	; (801d240 <TIM_Base_SetConfig+0x11c>)
 801d192:	4293      	cmp	r3, r2
 801d194:	d01f      	beq.n	801d1d6 <TIM_Base_SetConfig+0xb2>
 801d196:	687b      	ldr	r3, [r7, #4]
 801d198:	4a2a      	ldr	r2, [pc, #168]	; (801d244 <TIM_Base_SetConfig+0x120>)
 801d19a:	4293      	cmp	r3, r2
 801d19c:	d01b      	beq.n	801d1d6 <TIM_Base_SetConfig+0xb2>
 801d19e:	687b      	ldr	r3, [r7, #4]
 801d1a0:	4a29      	ldr	r2, [pc, #164]	; (801d248 <TIM_Base_SetConfig+0x124>)
 801d1a2:	4293      	cmp	r3, r2
 801d1a4:	d017      	beq.n	801d1d6 <TIM_Base_SetConfig+0xb2>
 801d1a6:	687b      	ldr	r3, [r7, #4]
 801d1a8:	4a28      	ldr	r2, [pc, #160]	; (801d24c <TIM_Base_SetConfig+0x128>)
 801d1aa:	4293      	cmp	r3, r2
 801d1ac:	d013      	beq.n	801d1d6 <TIM_Base_SetConfig+0xb2>
 801d1ae:	687b      	ldr	r3, [r7, #4]
 801d1b0:	4a27      	ldr	r2, [pc, #156]	; (801d250 <TIM_Base_SetConfig+0x12c>)
 801d1b2:	4293      	cmp	r3, r2
 801d1b4:	d00f      	beq.n	801d1d6 <TIM_Base_SetConfig+0xb2>
 801d1b6:	687b      	ldr	r3, [r7, #4]
 801d1b8:	4a26      	ldr	r2, [pc, #152]	; (801d254 <TIM_Base_SetConfig+0x130>)
 801d1ba:	4293      	cmp	r3, r2
 801d1bc:	d00b      	beq.n	801d1d6 <TIM_Base_SetConfig+0xb2>
 801d1be:	687b      	ldr	r3, [r7, #4]
 801d1c0:	4a25      	ldr	r2, [pc, #148]	; (801d258 <TIM_Base_SetConfig+0x134>)
 801d1c2:	4293      	cmp	r3, r2
 801d1c4:	d007      	beq.n	801d1d6 <TIM_Base_SetConfig+0xb2>
 801d1c6:	687b      	ldr	r3, [r7, #4]
 801d1c8:	4a24      	ldr	r2, [pc, #144]	; (801d25c <TIM_Base_SetConfig+0x138>)
 801d1ca:	4293      	cmp	r3, r2
 801d1cc:	d003      	beq.n	801d1d6 <TIM_Base_SetConfig+0xb2>
 801d1ce:	687b      	ldr	r3, [r7, #4]
 801d1d0:	4a23      	ldr	r2, [pc, #140]	; (801d260 <TIM_Base_SetConfig+0x13c>)
 801d1d2:	4293      	cmp	r3, r2
 801d1d4:	d108      	bne.n	801d1e8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 801d1d6:	68fb      	ldr	r3, [r7, #12]
 801d1d8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 801d1dc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 801d1de:	683b      	ldr	r3, [r7, #0]
 801d1e0:	68db      	ldr	r3, [r3, #12]
 801d1e2:	68fa      	ldr	r2, [r7, #12]
 801d1e4:	4313      	orrs	r3, r2
 801d1e6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 801d1e8:	68fb      	ldr	r3, [r7, #12]
 801d1ea:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 801d1ee:	683b      	ldr	r3, [r7, #0]
 801d1f0:	695b      	ldr	r3, [r3, #20]
 801d1f2:	4313      	orrs	r3, r2
 801d1f4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 801d1f6:	687b      	ldr	r3, [r7, #4]
 801d1f8:	68fa      	ldr	r2, [r7, #12]
 801d1fa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 801d1fc:	683b      	ldr	r3, [r7, #0]
 801d1fe:	689a      	ldr	r2, [r3, #8]
 801d200:	687b      	ldr	r3, [r7, #4]
 801d202:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 801d204:	683b      	ldr	r3, [r7, #0]
 801d206:	681a      	ldr	r2, [r3, #0]
 801d208:	687b      	ldr	r3, [r7, #4]
 801d20a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 801d20c:	687b      	ldr	r3, [r7, #4]
 801d20e:	4a0a      	ldr	r2, [pc, #40]	; (801d238 <TIM_Base_SetConfig+0x114>)
 801d210:	4293      	cmp	r3, r2
 801d212:	d003      	beq.n	801d21c <TIM_Base_SetConfig+0xf8>
 801d214:	687b      	ldr	r3, [r7, #4]
 801d216:	4a0c      	ldr	r2, [pc, #48]	; (801d248 <TIM_Base_SetConfig+0x124>)
 801d218:	4293      	cmp	r3, r2
 801d21a:	d103      	bne.n	801d224 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 801d21c:	683b      	ldr	r3, [r7, #0]
 801d21e:	691a      	ldr	r2, [r3, #16]
 801d220:	687b      	ldr	r3, [r7, #4]
 801d222:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 801d224:	687b      	ldr	r3, [r7, #4]
 801d226:	2201      	movs	r2, #1
 801d228:	615a      	str	r2, [r3, #20]
}
 801d22a:	bf00      	nop
 801d22c:	3714      	adds	r7, #20
 801d22e:	46bd      	mov	sp, r7
 801d230:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d234:	4770      	bx	lr
 801d236:	bf00      	nop
 801d238:	40010000 	.word	0x40010000
 801d23c:	40000400 	.word	0x40000400
 801d240:	40000800 	.word	0x40000800
 801d244:	40000c00 	.word	0x40000c00
 801d248:	40010400 	.word	0x40010400
 801d24c:	40014000 	.word	0x40014000
 801d250:	40014400 	.word	0x40014400
 801d254:	40014800 	.word	0x40014800
 801d258:	40001800 	.word	0x40001800
 801d25c:	40001c00 	.word	0x40001c00
 801d260:	40002000 	.word	0x40002000

0801d264 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 801d264:	b480      	push	{r7}
 801d266:	b087      	sub	sp, #28
 801d268:	af00      	add	r7, sp, #0
 801d26a:	6078      	str	r0, [r7, #4]
 801d26c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 801d26e:	687b      	ldr	r3, [r7, #4]
 801d270:	6a1b      	ldr	r3, [r3, #32]
 801d272:	f023 0201 	bic.w	r2, r3, #1
 801d276:	687b      	ldr	r3, [r7, #4]
 801d278:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801d27a:	687b      	ldr	r3, [r7, #4]
 801d27c:	6a1b      	ldr	r3, [r3, #32]
 801d27e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 801d280:	687b      	ldr	r3, [r7, #4]
 801d282:	685b      	ldr	r3, [r3, #4]
 801d284:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 801d286:	687b      	ldr	r3, [r7, #4]
 801d288:	699b      	ldr	r3, [r3, #24]
 801d28a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 801d28c:	68fb      	ldr	r3, [r7, #12]
 801d28e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801d292:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 801d294:	68fb      	ldr	r3, [r7, #12]
 801d296:	f023 0303 	bic.w	r3, r3, #3
 801d29a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 801d29c:	683b      	ldr	r3, [r7, #0]
 801d29e:	681b      	ldr	r3, [r3, #0]
 801d2a0:	68fa      	ldr	r2, [r7, #12]
 801d2a2:	4313      	orrs	r3, r2
 801d2a4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 801d2a6:	697b      	ldr	r3, [r7, #20]
 801d2a8:	f023 0302 	bic.w	r3, r3, #2
 801d2ac:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 801d2ae:	683b      	ldr	r3, [r7, #0]
 801d2b0:	689b      	ldr	r3, [r3, #8]
 801d2b2:	697a      	ldr	r2, [r7, #20]
 801d2b4:	4313      	orrs	r3, r2
 801d2b6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 801d2b8:	687b      	ldr	r3, [r7, #4]
 801d2ba:	4a20      	ldr	r2, [pc, #128]	; (801d33c <TIM_OC1_SetConfig+0xd8>)
 801d2bc:	4293      	cmp	r3, r2
 801d2be:	d003      	beq.n	801d2c8 <TIM_OC1_SetConfig+0x64>
 801d2c0:	687b      	ldr	r3, [r7, #4]
 801d2c2:	4a1f      	ldr	r2, [pc, #124]	; (801d340 <TIM_OC1_SetConfig+0xdc>)
 801d2c4:	4293      	cmp	r3, r2
 801d2c6:	d10c      	bne.n	801d2e2 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 801d2c8:	697b      	ldr	r3, [r7, #20]
 801d2ca:	f023 0308 	bic.w	r3, r3, #8
 801d2ce:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 801d2d0:	683b      	ldr	r3, [r7, #0]
 801d2d2:	68db      	ldr	r3, [r3, #12]
 801d2d4:	697a      	ldr	r2, [r7, #20]
 801d2d6:	4313      	orrs	r3, r2
 801d2d8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 801d2da:	697b      	ldr	r3, [r7, #20]
 801d2dc:	f023 0304 	bic.w	r3, r3, #4
 801d2e0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 801d2e2:	687b      	ldr	r3, [r7, #4]
 801d2e4:	4a15      	ldr	r2, [pc, #84]	; (801d33c <TIM_OC1_SetConfig+0xd8>)
 801d2e6:	4293      	cmp	r3, r2
 801d2e8:	d003      	beq.n	801d2f2 <TIM_OC1_SetConfig+0x8e>
 801d2ea:	687b      	ldr	r3, [r7, #4]
 801d2ec:	4a14      	ldr	r2, [pc, #80]	; (801d340 <TIM_OC1_SetConfig+0xdc>)
 801d2ee:	4293      	cmp	r3, r2
 801d2f0:	d111      	bne.n	801d316 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 801d2f2:	693b      	ldr	r3, [r7, #16]
 801d2f4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 801d2f8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 801d2fa:	693b      	ldr	r3, [r7, #16]
 801d2fc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 801d300:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 801d302:	683b      	ldr	r3, [r7, #0]
 801d304:	695b      	ldr	r3, [r3, #20]
 801d306:	693a      	ldr	r2, [r7, #16]
 801d308:	4313      	orrs	r3, r2
 801d30a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 801d30c:	683b      	ldr	r3, [r7, #0]
 801d30e:	699b      	ldr	r3, [r3, #24]
 801d310:	693a      	ldr	r2, [r7, #16]
 801d312:	4313      	orrs	r3, r2
 801d314:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801d316:	687b      	ldr	r3, [r7, #4]
 801d318:	693a      	ldr	r2, [r7, #16]
 801d31a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 801d31c:	687b      	ldr	r3, [r7, #4]
 801d31e:	68fa      	ldr	r2, [r7, #12]
 801d320:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 801d322:	683b      	ldr	r3, [r7, #0]
 801d324:	685a      	ldr	r2, [r3, #4]
 801d326:	687b      	ldr	r3, [r7, #4]
 801d328:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 801d32a:	687b      	ldr	r3, [r7, #4]
 801d32c:	697a      	ldr	r2, [r7, #20]
 801d32e:	621a      	str	r2, [r3, #32]
}
 801d330:	bf00      	nop
 801d332:	371c      	adds	r7, #28
 801d334:	46bd      	mov	sp, r7
 801d336:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d33a:	4770      	bx	lr
 801d33c:	40010000 	.word	0x40010000
 801d340:	40010400 	.word	0x40010400

0801d344 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 801d344:	b480      	push	{r7}
 801d346:	b087      	sub	sp, #28
 801d348:	af00      	add	r7, sp, #0
 801d34a:	6078      	str	r0, [r7, #4]
 801d34c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 801d34e:	687b      	ldr	r3, [r7, #4]
 801d350:	6a1b      	ldr	r3, [r3, #32]
 801d352:	f023 0210 	bic.w	r2, r3, #16
 801d356:	687b      	ldr	r3, [r7, #4]
 801d358:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801d35a:	687b      	ldr	r3, [r7, #4]
 801d35c:	6a1b      	ldr	r3, [r3, #32]
 801d35e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 801d360:	687b      	ldr	r3, [r7, #4]
 801d362:	685b      	ldr	r3, [r3, #4]
 801d364:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 801d366:	687b      	ldr	r3, [r7, #4]
 801d368:	699b      	ldr	r3, [r3, #24]
 801d36a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 801d36c:	68fb      	ldr	r3, [r7, #12]
 801d36e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 801d372:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 801d374:	68fb      	ldr	r3, [r7, #12]
 801d376:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 801d37a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 801d37c:	683b      	ldr	r3, [r7, #0]
 801d37e:	681b      	ldr	r3, [r3, #0]
 801d380:	021b      	lsls	r3, r3, #8
 801d382:	68fa      	ldr	r2, [r7, #12]
 801d384:	4313      	orrs	r3, r2
 801d386:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 801d388:	697b      	ldr	r3, [r7, #20]
 801d38a:	f023 0320 	bic.w	r3, r3, #32
 801d38e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 801d390:	683b      	ldr	r3, [r7, #0]
 801d392:	689b      	ldr	r3, [r3, #8]
 801d394:	011b      	lsls	r3, r3, #4
 801d396:	697a      	ldr	r2, [r7, #20]
 801d398:	4313      	orrs	r3, r2
 801d39a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 801d39c:	687b      	ldr	r3, [r7, #4]
 801d39e:	4a22      	ldr	r2, [pc, #136]	; (801d428 <TIM_OC2_SetConfig+0xe4>)
 801d3a0:	4293      	cmp	r3, r2
 801d3a2:	d003      	beq.n	801d3ac <TIM_OC2_SetConfig+0x68>
 801d3a4:	687b      	ldr	r3, [r7, #4]
 801d3a6:	4a21      	ldr	r2, [pc, #132]	; (801d42c <TIM_OC2_SetConfig+0xe8>)
 801d3a8:	4293      	cmp	r3, r2
 801d3aa:	d10d      	bne.n	801d3c8 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 801d3ac:	697b      	ldr	r3, [r7, #20]
 801d3ae:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 801d3b2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 801d3b4:	683b      	ldr	r3, [r7, #0]
 801d3b6:	68db      	ldr	r3, [r3, #12]
 801d3b8:	011b      	lsls	r3, r3, #4
 801d3ba:	697a      	ldr	r2, [r7, #20]
 801d3bc:	4313      	orrs	r3, r2
 801d3be:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 801d3c0:	697b      	ldr	r3, [r7, #20]
 801d3c2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 801d3c6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 801d3c8:	687b      	ldr	r3, [r7, #4]
 801d3ca:	4a17      	ldr	r2, [pc, #92]	; (801d428 <TIM_OC2_SetConfig+0xe4>)
 801d3cc:	4293      	cmp	r3, r2
 801d3ce:	d003      	beq.n	801d3d8 <TIM_OC2_SetConfig+0x94>
 801d3d0:	687b      	ldr	r3, [r7, #4]
 801d3d2:	4a16      	ldr	r2, [pc, #88]	; (801d42c <TIM_OC2_SetConfig+0xe8>)
 801d3d4:	4293      	cmp	r3, r2
 801d3d6:	d113      	bne.n	801d400 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 801d3d8:	693b      	ldr	r3, [r7, #16]
 801d3da:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 801d3de:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 801d3e0:	693b      	ldr	r3, [r7, #16]
 801d3e2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 801d3e6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 801d3e8:	683b      	ldr	r3, [r7, #0]
 801d3ea:	695b      	ldr	r3, [r3, #20]
 801d3ec:	009b      	lsls	r3, r3, #2
 801d3ee:	693a      	ldr	r2, [r7, #16]
 801d3f0:	4313      	orrs	r3, r2
 801d3f2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 801d3f4:	683b      	ldr	r3, [r7, #0]
 801d3f6:	699b      	ldr	r3, [r3, #24]
 801d3f8:	009b      	lsls	r3, r3, #2
 801d3fa:	693a      	ldr	r2, [r7, #16]
 801d3fc:	4313      	orrs	r3, r2
 801d3fe:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801d400:	687b      	ldr	r3, [r7, #4]
 801d402:	693a      	ldr	r2, [r7, #16]
 801d404:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 801d406:	687b      	ldr	r3, [r7, #4]
 801d408:	68fa      	ldr	r2, [r7, #12]
 801d40a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 801d40c:	683b      	ldr	r3, [r7, #0]
 801d40e:	685a      	ldr	r2, [r3, #4]
 801d410:	687b      	ldr	r3, [r7, #4]
 801d412:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 801d414:	687b      	ldr	r3, [r7, #4]
 801d416:	697a      	ldr	r2, [r7, #20]
 801d418:	621a      	str	r2, [r3, #32]
}
 801d41a:	bf00      	nop
 801d41c:	371c      	adds	r7, #28
 801d41e:	46bd      	mov	sp, r7
 801d420:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d424:	4770      	bx	lr
 801d426:	bf00      	nop
 801d428:	40010000 	.word	0x40010000
 801d42c:	40010400 	.word	0x40010400

0801d430 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 801d430:	b480      	push	{r7}
 801d432:	b087      	sub	sp, #28
 801d434:	af00      	add	r7, sp, #0
 801d436:	6078      	str	r0, [r7, #4]
 801d438:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 801d43a:	687b      	ldr	r3, [r7, #4]
 801d43c:	6a1b      	ldr	r3, [r3, #32]
 801d43e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 801d442:	687b      	ldr	r3, [r7, #4]
 801d444:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801d446:	687b      	ldr	r3, [r7, #4]
 801d448:	6a1b      	ldr	r3, [r3, #32]
 801d44a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 801d44c:	687b      	ldr	r3, [r7, #4]
 801d44e:	685b      	ldr	r3, [r3, #4]
 801d450:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 801d452:	687b      	ldr	r3, [r7, #4]
 801d454:	69db      	ldr	r3, [r3, #28]
 801d456:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 801d458:	68fb      	ldr	r3, [r7, #12]
 801d45a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801d45e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 801d460:	68fb      	ldr	r3, [r7, #12]
 801d462:	f023 0303 	bic.w	r3, r3, #3
 801d466:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 801d468:	683b      	ldr	r3, [r7, #0]
 801d46a:	681b      	ldr	r3, [r3, #0]
 801d46c:	68fa      	ldr	r2, [r7, #12]
 801d46e:	4313      	orrs	r3, r2
 801d470:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 801d472:	697b      	ldr	r3, [r7, #20]
 801d474:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 801d478:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 801d47a:	683b      	ldr	r3, [r7, #0]
 801d47c:	689b      	ldr	r3, [r3, #8]
 801d47e:	021b      	lsls	r3, r3, #8
 801d480:	697a      	ldr	r2, [r7, #20]
 801d482:	4313      	orrs	r3, r2
 801d484:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 801d486:	687b      	ldr	r3, [r7, #4]
 801d488:	4a21      	ldr	r2, [pc, #132]	; (801d510 <TIM_OC3_SetConfig+0xe0>)
 801d48a:	4293      	cmp	r3, r2
 801d48c:	d003      	beq.n	801d496 <TIM_OC3_SetConfig+0x66>
 801d48e:	687b      	ldr	r3, [r7, #4]
 801d490:	4a20      	ldr	r2, [pc, #128]	; (801d514 <TIM_OC3_SetConfig+0xe4>)
 801d492:	4293      	cmp	r3, r2
 801d494:	d10d      	bne.n	801d4b2 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 801d496:	697b      	ldr	r3, [r7, #20]
 801d498:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 801d49c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 801d49e:	683b      	ldr	r3, [r7, #0]
 801d4a0:	68db      	ldr	r3, [r3, #12]
 801d4a2:	021b      	lsls	r3, r3, #8
 801d4a4:	697a      	ldr	r2, [r7, #20]
 801d4a6:	4313      	orrs	r3, r2
 801d4a8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 801d4aa:	697b      	ldr	r3, [r7, #20]
 801d4ac:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 801d4b0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 801d4b2:	687b      	ldr	r3, [r7, #4]
 801d4b4:	4a16      	ldr	r2, [pc, #88]	; (801d510 <TIM_OC3_SetConfig+0xe0>)
 801d4b6:	4293      	cmp	r3, r2
 801d4b8:	d003      	beq.n	801d4c2 <TIM_OC3_SetConfig+0x92>
 801d4ba:	687b      	ldr	r3, [r7, #4]
 801d4bc:	4a15      	ldr	r2, [pc, #84]	; (801d514 <TIM_OC3_SetConfig+0xe4>)
 801d4be:	4293      	cmp	r3, r2
 801d4c0:	d113      	bne.n	801d4ea <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 801d4c2:	693b      	ldr	r3, [r7, #16]
 801d4c4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801d4c8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 801d4ca:	693b      	ldr	r3, [r7, #16]
 801d4cc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 801d4d0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 801d4d2:	683b      	ldr	r3, [r7, #0]
 801d4d4:	695b      	ldr	r3, [r3, #20]
 801d4d6:	011b      	lsls	r3, r3, #4
 801d4d8:	693a      	ldr	r2, [r7, #16]
 801d4da:	4313      	orrs	r3, r2
 801d4dc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 801d4de:	683b      	ldr	r3, [r7, #0]
 801d4e0:	699b      	ldr	r3, [r3, #24]
 801d4e2:	011b      	lsls	r3, r3, #4
 801d4e4:	693a      	ldr	r2, [r7, #16]
 801d4e6:	4313      	orrs	r3, r2
 801d4e8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801d4ea:	687b      	ldr	r3, [r7, #4]
 801d4ec:	693a      	ldr	r2, [r7, #16]
 801d4ee:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 801d4f0:	687b      	ldr	r3, [r7, #4]
 801d4f2:	68fa      	ldr	r2, [r7, #12]
 801d4f4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 801d4f6:	683b      	ldr	r3, [r7, #0]
 801d4f8:	685a      	ldr	r2, [r3, #4]
 801d4fa:	687b      	ldr	r3, [r7, #4]
 801d4fc:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 801d4fe:	687b      	ldr	r3, [r7, #4]
 801d500:	697a      	ldr	r2, [r7, #20]
 801d502:	621a      	str	r2, [r3, #32]
}
 801d504:	bf00      	nop
 801d506:	371c      	adds	r7, #28
 801d508:	46bd      	mov	sp, r7
 801d50a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d50e:	4770      	bx	lr
 801d510:	40010000 	.word	0x40010000
 801d514:	40010400 	.word	0x40010400

0801d518 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 801d518:	b480      	push	{r7}
 801d51a:	b087      	sub	sp, #28
 801d51c:	af00      	add	r7, sp, #0
 801d51e:	6078      	str	r0, [r7, #4]
 801d520:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 801d522:	687b      	ldr	r3, [r7, #4]
 801d524:	6a1b      	ldr	r3, [r3, #32]
 801d526:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 801d52a:	687b      	ldr	r3, [r7, #4]
 801d52c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801d52e:	687b      	ldr	r3, [r7, #4]
 801d530:	6a1b      	ldr	r3, [r3, #32]
 801d532:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 801d534:	687b      	ldr	r3, [r7, #4]
 801d536:	685b      	ldr	r3, [r3, #4]
 801d538:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 801d53a:	687b      	ldr	r3, [r7, #4]
 801d53c:	69db      	ldr	r3, [r3, #28]
 801d53e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 801d540:	68fb      	ldr	r3, [r7, #12]
 801d542:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 801d546:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 801d548:	68fb      	ldr	r3, [r7, #12]
 801d54a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 801d54e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 801d550:	683b      	ldr	r3, [r7, #0]
 801d552:	681b      	ldr	r3, [r3, #0]
 801d554:	021b      	lsls	r3, r3, #8
 801d556:	68fa      	ldr	r2, [r7, #12]
 801d558:	4313      	orrs	r3, r2
 801d55a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 801d55c:	693b      	ldr	r3, [r7, #16]
 801d55e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 801d562:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 801d564:	683b      	ldr	r3, [r7, #0]
 801d566:	689b      	ldr	r3, [r3, #8]
 801d568:	031b      	lsls	r3, r3, #12
 801d56a:	693a      	ldr	r2, [r7, #16]
 801d56c:	4313      	orrs	r3, r2
 801d56e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 801d570:	687b      	ldr	r3, [r7, #4]
 801d572:	4a12      	ldr	r2, [pc, #72]	; (801d5bc <TIM_OC4_SetConfig+0xa4>)
 801d574:	4293      	cmp	r3, r2
 801d576:	d003      	beq.n	801d580 <TIM_OC4_SetConfig+0x68>
 801d578:	687b      	ldr	r3, [r7, #4]
 801d57a:	4a11      	ldr	r2, [pc, #68]	; (801d5c0 <TIM_OC4_SetConfig+0xa8>)
 801d57c:	4293      	cmp	r3, r2
 801d57e:	d109      	bne.n	801d594 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 801d580:	697b      	ldr	r3, [r7, #20]
 801d582:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 801d586:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 801d588:	683b      	ldr	r3, [r7, #0]
 801d58a:	695b      	ldr	r3, [r3, #20]
 801d58c:	019b      	lsls	r3, r3, #6
 801d58e:	697a      	ldr	r2, [r7, #20]
 801d590:	4313      	orrs	r3, r2
 801d592:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801d594:	687b      	ldr	r3, [r7, #4]
 801d596:	697a      	ldr	r2, [r7, #20]
 801d598:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 801d59a:	687b      	ldr	r3, [r7, #4]
 801d59c:	68fa      	ldr	r2, [r7, #12]
 801d59e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 801d5a0:	683b      	ldr	r3, [r7, #0]
 801d5a2:	685a      	ldr	r2, [r3, #4]
 801d5a4:	687b      	ldr	r3, [r7, #4]
 801d5a6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 801d5a8:	687b      	ldr	r3, [r7, #4]
 801d5aa:	693a      	ldr	r2, [r7, #16]
 801d5ac:	621a      	str	r2, [r3, #32]
}
 801d5ae:	bf00      	nop
 801d5b0:	371c      	adds	r7, #28
 801d5b2:	46bd      	mov	sp, r7
 801d5b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d5b8:	4770      	bx	lr
 801d5ba:	bf00      	nop
 801d5bc:	40010000 	.word	0x40010000
 801d5c0:	40010400 	.word	0x40010400

0801d5c4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 801d5c4:	b480      	push	{r7}
 801d5c6:	b087      	sub	sp, #28
 801d5c8:	af00      	add	r7, sp, #0
 801d5ca:	60f8      	str	r0, [r7, #12]
 801d5cc:	60b9      	str	r1, [r7, #8]
 801d5ce:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 801d5d0:	68fb      	ldr	r3, [r7, #12]
 801d5d2:	6a1b      	ldr	r3, [r3, #32]
 801d5d4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 801d5d6:	68fb      	ldr	r3, [r7, #12]
 801d5d8:	6a1b      	ldr	r3, [r3, #32]
 801d5da:	f023 0201 	bic.w	r2, r3, #1
 801d5de:	68fb      	ldr	r3, [r7, #12]
 801d5e0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 801d5e2:	68fb      	ldr	r3, [r7, #12]
 801d5e4:	699b      	ldr	r3, [r3, #24]
 801d5e6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 801d5e8:	693b      	ldr	r3, [r7, #16]
 801d5ea:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 801d5ee:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 801d5f0:	687b      	ldr	r3, [r7, #4]
 801d5f2:	011b      	lsls	r3, r3, #4
 801d5f4:	693a      	ldr	r2, [r7, #16]
 801d5f6:	4313      	orrs	r3, r2
 801d5f8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 801d5fa:	697b      	ldr	r3, [r7, #20]
 801d5fc:	f023 030a 	bic.w	r3, r3, #10
 801d600:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 801d602:	697a      	ldr	r2, [r7, #20]
 801d604:	68bb      	ldr	r3, [r7, #8]
 801d606:	4313      	orrs	r3, r2
 801d608:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 801d60a:	68fb      	ldr	r3, [r7, #12]
 801d60c:	693a      	ldr	r2, [r7, #16]
 801d60e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 801d610:	68fb      	ldr	r3, [r7, #12]
 801d612:	697a      	ldr	r2, [r7, #20]
 801d614:	621a      	str	r2, [r3, #32]
}
 801d616:	bf00      	nop
 801d618:	371c      	adds	r7, #28
 801d61a:	46bd      	mov	sp, r7
 801d61c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d620:	4770      	bx	lr

0801d622 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 801d622:	b480      	push	{r7}
 801d624:	b087      	sub	sp, #28
 801d626:	af00      	add	r7, sp, #0
 801d628:	60f8      	str	r0, [r7, #12]
 801d62a:	60b9      	str	r1, [r7, #8]
 801d62c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 801d62e:	68fb      	ldr	r3, [r7, #12]
 801d630:	6a1b      	ldr	r3, [r3, #32]
 801d632:	f023 0210 	bic.w	r2, r3, #16
 801d636:	68fb      	ldr	r3, [r7, #12]
 801d638:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 801d63a:	68fb      	ldr	r3, [r7, #12]
 801d63c:	699b      	ldr	r3, [r3, #24]
 801d63e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 801d640:	68fb      	ldr	r3, [r7, #12]
 801d642:	6a1b      	ldr	r3, [r3, #32]
 801d644:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 801d646:	697b      	ldr	r3, [r7, #20]
 801d648:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 801d64c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 801d64e:	687b      	ldr	r3, [r7, #4]
 801d650:	031b      	lsls	r3, r3, #12
 801d652:	697a      	ldr	r2, [r7, #20]
 801d654:	4313      	orrs	r3, r2
 801d656:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 801d658:	693b      	ldr	r3, [r7, #16]
 801d65a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 801d65e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 801d660:	68bb      	ldr	r3, [r7, #8]
 801d662:	011b      	lsls	r3, r3, #4
 801d664:	693a      	ldr	r2, [r7, #16]
 801d666:	4313      	orrs	r3, r2
 801d668:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 801d66a:	68fb      	ldr	r3, [r7, #12]
 801d66c:	697a      	ldr	r2, [r7, #20]
 801d66e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 801d670:	68fb      	ldr	r3, [r7, #12]
 801d672:	693a      	ldr	r2, [r7, #16]
 801d674:	621a      	str	r2, [r3, #32]
}
 801d676:	bf00      	nop
 801d678:	371c      	adds	r7, #28
 801d67a:	46bd      	mov	sp, r7
 801d67c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d680:	4770      	bx	lr

0801d682 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 801d682:	b480      	push	{r7}
 801d684:	b085      	sub	sp, #20
 801d686:	af00      	add	r7, sp, #0
 801d688:	6078      	str	r0, [r7, #4]
 801d68a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 801d68c:	687b      	ldr	r3, [r7, #4]
 801d68e:	689b      	ldr	r3, [r3, #8]
 801d690:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 801d692:	68fb      	ldr	r3, [r7, #12]
 801d694:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801d698:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 801d69a:	683a      	ldr	r2, [r7, #0]
 801d69c:	68fb      	ldr	r3, [r7, #12]
 801d69e:	4313      	orrs	r3, r2
 801d6a0:	f043 0307 	orr.w	r3, r3, #7
 801d6a4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 801d6a6:	687b      	ldr	r3, [r7, #4]
 801d6a8:	68fa      	ldr	r2, [r7, #12]
 801d6aa:	609a      	str	r2, [r3, #8]
}
 801d6ac:	bf00      	nop
 801d6ae:	3714      	adds	r7, #20
 801d6b0:	46bd      	mov	sp, r7
 801d6b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d6b6:	4770      	bx	lr

0801d6b8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 801d6b8:	b480      	push	{r7}
 801d6ba:	b087      	sub	sp, #28
 801d6bc:	af00      	add	r7, sp, #0
 801d6be:	60f8      	str	r0, [r7, #12]
 801d6c0:	60b9      	str	r1, [r7, #8]
 801d6c2:	607a      	str	r2, [r7, #4]
 801d6c4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 801d6c6:	68fb      	ldr	r3, [r7, #12]
 801d6c8:	689b      	ldr	r3, [r3, #8]
 801d6ca:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 801d6cc:	697b      	ldr	r3, [r7, #20]
 801d6ce:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 801d6d2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 801d6d4:	683b      	ldr	r3, [r7, #0]
 801d6d6:	021a      	lsls	r2, r3, #8
 801d6d8:	687b      	ldr	r3, [r7, #4]
 801d6da:	431a      	orrs	r2, r3
 801d6dc:	68bb      	ldr	r3, [r7, #8]
 801d6de:	4313      	orrs	r3, r2
 801d6e0:	697a      	ldr	r2, [r7, #20]
 801d6e2:	4313      	orrs	r3, r2
 801d6e4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 801d6e6:	68fb      	ldr	r3, [r7, #12]
 801d6e8:	697a      	ldr	r2, [r7, #20]
 801d6ea:	609a      	str	r2, [r3, #8]
}
 801d6ec:	bf00      	nop
 801d6ee:	371c      	adds	r7, #28
 801d6f0:	46bd      	mov	sp, r7
 801d6f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d6f6:	4770      	bx	lr

0801d6f8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 801d6f8:	b480      	push	{r7}
 801d6fa:	b085      	sub	sp, #20
 801d6fc:	af00      	add	r7, sp, #0
 801d6fe:	6078      	str	r0, [r7, #4]
 801d700:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 801d702:	687b      	ldr	r3, [r7, #4]
 801d704:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 801d708:	2b01      	cmp	r3, #1
 801d70a:	d101      	bne.n	801d710 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 801d70c:	2302      	movs	r3, #2
 801d70e:	e05a      	b.n	801d7c6 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 801d710:	687b      	ldr	r3, [r7, #4]
 801d712:	2201      	movs	r2, #1
 801d714:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 801d718:	687b      	ldr	r3, [r7, #4]
 801d71a:	2202      	movs	r2, #2
 801d71c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 801d720:	687b      	ldr	r3, [r7, #4]
 801d722:	681b      	ldr	r3, [r3, #0]
 801d724:	685b      	ldr	r3, [r3, #4]
 801d726:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 801d728:	687b      	ldr	r3, [r7, #4]
 801d72a:	681b      	ldr	r3, [r3, #0]
 801d72c:	689b      	ldr	r3, [r3, #8]
 801d72e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 801d730:	68fb      	ldr	r3, [r7, #12]
 801d732:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801d736:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 801d738:	683b      	ldr	r3, [r7, #0]
 801d73a:	681b      	ldr	r3, [r3, #0]
 801d73c:	68fa      	ldr	r2, [r7, #12]
 801d73e:	4313      	orrs	r3, r2
 801d740:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 801d742:	687b      	ldr	r3, [r7, #4]
 801d744:	681b      	ldr	r3, [r3, #0]
 801d746:	68fa      	ldr	r2, [r7, #12]
 801d748:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 801d74a:	687b      	ldr	r3, [r7, #4]
 801d74c:	681b      	ldr	r3, [r3, #0]
 801d74e:	4a21      	ldr	r2, [pc, #132]	; (801d7d4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 801d750:	4293      	cmp	r3, r2
 801d752:	d022      	beq.n	801d79a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 801d754:	687b      	ldr	r3, [r7, #4]
 801d756:	681b      	ldr	r3, [r3, #0]
 801d758:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801d75c:	d01d      	beq.n	801d79a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 801d75e:	687b      	ldr	r3, [r7, #4]
 801d760:	681b      	ldr	r3, [r3, #0]
 801d762:	4a1d      	ldr	r2, [pc, #116]	; (801d7d8 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 801d764:	4293      	cmp	r3, r2
 801d766:	d018      	beq.n	801d79a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 801d768:	687b      	ldr	r3, [r7, #4]
 801d76a:	681b      	ldr	r3, [r3, #0]
 801d76c:	4a1b      	ldr	r2, [pc, #108]	; (801d7dc <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 801d76e:	4293      	cmp	r3, r2
 801d770:	d013      	beq.n	801d79a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 801d772:	687b      	ldr	r3, [r7, #4]
 801d774:	681b      	ldr	r3, [r3, #0]
 801d776:	4a1a      	ldr	r2, [pc, #104]	; (801d7e0 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 801d778:	4293      	cmp	r3, r2
 801d77a:	d00e      	beq.n	801d79a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 801d77c:	687b      	ldr	r3, [r7, #4]
 801d77e:	681b      	ldr	r3, [r3, #0]
 801d780:	4a18      	ldr	r2, [pc, #96]	; (801d7e4 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 801d782:	4293      	cmp	r3, r2
 801d784:	d009      	beq.n	801d79a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 801d786:	687b      	ldr	r3, [r7, #4]
 801d788:	681b      	ldr	r3, [r3, #0]
 801d78a:	4a17      	ldr	r2, [pc, #92]	; (801d7e8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 801d78c:	4293      	cmp	r3, r2
 801d78e:	d004      	beq.n	801d79a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 801d790:	687b      	ldr	r3, [r7, #4]
 801d792:	681b      	ldr	r3, [r3, #0]
 801d794:	4a15      	ldr	r2, [pc, #84]	; (801d7ec <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 801d796:	4293      	cmp	r3, r2
 801d798:	d10c      	bne.n	801d7b4 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 801d79a:	68bb      	ldr	r3, [r7, #8]
 801d79c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 801d7a0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 801d7a2:	683b      	ldr	r3, [r7, #0]
 801d7a4:	685b      	ldr	r3, [r3, #4]
 801d7a6:	68ba      	ldr	r2, [r7, #8]
 801d7a8:	4313      	orrs	r3, r2
 801d7aa:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 801d7ac:	687b      	ldr	r3, [r7, #4]
 801d7ae:	681b      	ldr	r3, [r3, #0]
 801d7b0:	68ba      	ldr	r2, [r7, #8]
 801d7b2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 801d7b4:	687b      	ldr	r3, [r7, #4]
 801d7b6:	2201      	movs	r2, #1
 801d7b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 801d7bc:	687b      	ldr	r3, [r7, #4]
 801d7be:	2200      	movs	r2, #0
 801d7c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 801d7c4:	2300      	movs	r3, #0
}
 801d7c6:	4618      	mov	r0, r3
 801d7c8:	3714      	adds	r7, #20
 801d7ca:	46bd      	mov	sp, r7
 801d7cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d7d0:	4770      	bx	lr
 801d7d2:	bf00      	nop
 801d7d4:	40010000 	.word	0x40010000
 801d7d8:	40000400 	.word	0x40000400
 801d7dc:	40000800 	.word	0x40000800
 801d7e0:	40000c00 	.word	0x40000c00
 801d7e4:	40010400 	.word	0x40010400
 801d7e8:	40014000 	.word	0x40014000
 801d7ec:	40001800 	.word	0x40001800

0801d7f0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 801d7f0:	b480      	push	{r7}
 801d7f2:	b083      	sub	sp, #12
 801d7f4:	af00      	add	r7, sp, #0
 801d7f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 801d7f8:	bf00      	nop
 801d7fa:	370c      	adds	r7, #12
 801d7fc:	46bd      	mov	sp, r7
 801d7fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d802:	4770      	bx	lr

0801d804 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 801d804:	b480      	push	{r7}
 801d806:	b083      	sub	sp, #12
 801d808:	af00      	add	r7, sp, #0
 801d80a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 801d80c:	bf00      	nop
 801d80e:	370c      	adds	r7, #12
 801d810:	46bd      	mov	sp, r7
 801d812:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d816:	4770      	bx	lr

0801d818 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 801d818:	b084      	sub	sp, #16
 801d81a:	b580      	push	{r7, lr}
 801d81c:	b084      	sub	sp, #16
 801d81e:	af00      	add	r7, sp, #0
 801d820:	6078      	str	r0, [r7, #4]
 801d822:	f107 001c 	add.w	r0, r7, #28
 801d826:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 801d82a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801d82c:	2b01      	cmp	r3, #1
 801d82e:	d122      	bne.n	801d876 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 801d830:	687b      	ldr	r3, [r7, #4]
 801d832:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801d834:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 801d838:	687b      	ldr	r3, [r7, #4]
 801d83a:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 801d83c:	687b      	ldr	r3, [r7, #4]
 801d83e:	68db      	ldr	r3, [r3, #12]
 801d840:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 801d844:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 801d848:	687a      	ldr	r2, [r7, #4]
 801d84a:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 801d84c:	687b      	ldr	r3, [r7, #4]
 801d84e:	68db      	ldr	r3, [r3, #12]
 801d850:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 801d854:	687b      	ldr	r3, [r7, #4]
 801d856:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 801d858:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801d85a:	2b01      	cmp	r3, #1
 801d85c:	d105      	bne.n	801d86a <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 801d85e:	687b      	ldr	r3, [r7, #4]
 801d860:	68db      	ldr	r3, [r3, #12]
 801d862:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 801d866:	687b      	ldr	r3, [r7, #4]
 801d868:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 801d86a:	6878      	ldr	r0, [r7, #4]
 801d86c:	f001 fb16 	bl	801ee9c <USB_CoreReset>
 801d870:	4603      	mov	r3, r0
 801d872:	73fb      	strb	r3, [r7, #15]
 801d874:	e01a      	b.n	801d8ac <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 801d876:	687b      	ldr	r3, [r7, #4]
 801d878:	68db      	ldr	r3, [r3, #12]
 801d87a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 801d87e:	687b      	ldr	r3, [r7, #4]
 801d880:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 801d882:	6878      	ldr	r0, [r7, #4]
 801d884:	f001 fb0a 	bl	801ee9c <USB_CoreReset>
 801d888:	4603      	mov	r3, r0
 801d88a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 801d88c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801d88e:	2b00      	cmp	r3, #0
 801d890:	d106      	bne.n	801d8a0 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 801d892:	687b      	ldr	r3, [r7, #4]
 801d894:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801d896:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 801d89a:	687b      	ldr	r3, [r7, #4]
 801d89c:	639a      	str	r2, [r3, #56]	; 0x38
 801d89e:	e005      	b.n	801d8ac <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 801d8a0:	687b      	ldr	r3, [r7, #4]
 801d8a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801d8a4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 801d8a8:	687b      	ldr	r3, [r7, #4]
 801d8aa:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 801d8ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801d8ae:	2b01      	cmp	r3, #1
 801d8b0:	d10b      	bne.n	801d8ca <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 801d8b2:	687b      	ldr	r3, [r7, #4]
 801d8b4:	689b      	ldr	r3, [r3, #8]
 801d8b6:	f043 0206 	orr.w	r2, r3, #6
 801d8ba:	687b      	ldr	r3, [r7, #4]
 801d8bc:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 801d8be:	687b      	ldr	r3, [r7, #4]
 801d8c0:	689b      	ldr	r3, [r3, #8]
 801d8c2:	f043 0220 	orr.w	r2, r3, #32
 801d8c6:	687b      	ldr	r3, [r7, #4]
 801d8c8:	609a      	str	r2, [r3, #8]
  }

  return ret;
 801d8ca:	7bfb      	ldrb	r3, [r7, #15]
}
 801d8cc:	4618      	mov	r0, r3
 801d8ce:	3710      	adds	r7, #16
 801d8d0:	46bd      	mov	sp, r7
 801d8d2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 801d8d6:	b004      	add	sp, #16
 801d8d8:	4770      	bx	lr
	...

0801d8dc <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 801d8dc:	b480      	push	{r7}
 801d8de:	b087      	sub	sp, #28
 801d8e0:	af00      	add	r7, sp, #0
 801d8e2:	60f8      	str	r0, [r7, #12]
 801d8e4:	60b9      	str	r1, [r7, #8]
 801d8e6:	4613      	mov	r3, r2
 801d8e8:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 801d8ea:	79fb      	ldrb	r3, [r7, #7]
 801d8ec:	2b02      	cmp	r3, #2
 801d8ee:	d165      	bne.n	801d9bc <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 801d8f0:	68bb      	ldr	r3, [r7, #8]
 801d8f2:	4a41      	ldr	r2, [pc, #260]	; (801d9f8 <USB_SetTurnaroundTime+0x11c>)
 801d8f4:	4293      	cmp	r3, r2
 801d8f6:	d906      	bls.n	801d906 <USB_SetTurnaroundTime+0x2a>
 801d8f8:	68bb      	ldr	r3, [r7, #8]
 801d8fa:	4a40      	ldr	r2, [pc, #256]	; (801d9fc <USB_SetTurnaroundTime+0x120>)
 801d8fc:	4293      	cmp	r3, r2
 801d8fe:	d202      	bcs.n	801d906 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 801d900:	230f      	movs	r3, #15
 801d902:	617b      	str	r3, [r7, #20]
 801d904:	e062      	b.n	801d9cc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 801d906:	68bb      	ldr	r3, [r7, #8]
 801d908:	4a3c      	ldr	r2, [pc, #240]	; (801d9fc <USB_SetTurnaroundTime+0x120>)
 801d90a:	4293      	cmp	r3, r2
 801d90c:	d306      	bcc.n	801d91c <USB_SetTurnaroundTime+0x40>
 801d90e:	68bb      	ldr	r3, [r7, #8]
 801d910:	4a3b      	ldr	r2, [pc, #236]	; (801da00 <USB_SetTurnaroundTime+0x124>)
 801d912:	4293      	cmp	r3, r2
 801d914:	d202      	bcs.n	801d91c <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 801d916:	230e      	movs	r3, #14
 801d918:	617b      	str	r3, [r7, #20]
 801d91a:	e057      	b.n	801d9cc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 801d91c:	68bb      	ldr	r3, [r7, #8]
 801d91e:	4a38      	ldr	r2, [pc, #224]	; (801da00 <USB_SetTurnaroundTime+0x124>)
 801d920:	4293      	cmp	r3, r2
 801d922:	d306      	bcc.n	801d932 <USB_SetTurnaroundTime+0x56>
 801d924:	68bb      	ldr	r3, [r7, #8]
 801d926:	4a37      	ldr	r2, [pc, #220]	; (801da04 <USB_SetTurnaroundTime+0x128>)
 801d928:	4293      	cmp	r3, r2
 801d92a:	d202      	bcs.n	801d932 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 801d92c:	230d      	movs	r3, #13
 801d92e:	617b      	str	r3, [r7, #20]
 801d930:	e04c      	b.n	801d9cc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 801d932:	68bb      	ldr	r3, [r7, #8]
 801d934:	4a33      	ldr	r2, [pc, #204]	; (801da04 <USB_SetTurnaroundTime+0x128>)
 801d936:	4293      	cmp	r3, r2
 801d938:	d306      	bcc.n	801d948 <USB_SetTurnaroundTime+0x6c>
 801d93a:	68bb      	ldr	r3, [r7, #8]
 801d93c:	4a32      	ldr	r2, [pc, #200]	; (801da08 <USB_SetTurnaroundTime+0x12c>)
 801d93e:	4293      	cmp	r3, r2
 801d940:	d802      	bhi.n	801d948 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 801d942:	230c      	movs	r3, #12
 801d944:	617b      	str	r3, [r7, #20]
 801d946:	e041      	b.n	801d9cc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 801d948:	68bb      	ldr	r3, [r7, #8]
 801d94a:	4a2f      	ldr	r2, [pc, #188]	; (801da08 <USB_SetTurnaroundTime+0x12c>)
 801d94c:	4293      	cmp	r3, r2
 801d94e:	d906      	bls.n	801d95e <USB_SetTurnaroundTime+0x82>
 801d950:	68bb      	ldr	r3, [r7, #8]
 801d952:	4a2e      	ldr	r2, [pc, #184]	; (801da0c <USB_SetTurnaroundTime+0x130>)
 801d954:	4293      	cmp	r3, r2
 801d956:	d802      	bhi.n	801d95e <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 801d958:	230b      	movs	r3, #11
 801d95a:	617b      	str	r3, [r7, #20]
 801d95c:	e036      	b.n	801d9cc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 801d95e:	68bb      	ldr	r3, [r7, #8]
 801d960:	4a2a      	ldr	r2, [pc, #168]	; (801da0c <USB_SetTurnaroundTime+0x130>)
 801d962:	4293      	cmp	r3, r2
 801d964:	d906      	bls.n	801d974 <USB_SetTurnaroundTime+0x98>
 801d966:	68bb      	ldr	r3, [r7, #8]
 801d968:	4a29      	ldr	r2, [pc, #164]	; (801da10 <USB_SetTurnaroundTime+0x134>)
 801d96a:	4293      	cmp	r3, r2
 801d96c:	d802      	bhi.n	801d974 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 801d96e:	230a      	movs	r3, #10
 801d970:	617b      	str	r3, [r7, #20]
 801d972:	e02b      	b.n	801d9cc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 801d974:	68bb      	ldr	r3, [r7, #8]
 801d976:	4a26      	ldr	r2, [pc, #152]	; (801da10 <USB_SetTurnaroundTime+0x134>)
 801d978:	4293      	cmp	r3, r2
 801d97a:	d906      	bls.n	801d98a <USB_SetTurnaroundTime+0xae>
 801d97c:	68bb      	ldr	r3, [r7, #8]
 801d97e:	4a25      	ldr	r2, [pc, #148]	; (801da14 <USB_SetTurnaroundTime+0x138>)
 801d980:	4293      	cmp	r3, r2
 801d982:	d202      	bcs.n	801d98a <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 801d984:	2309      	movs	r3, #9
 801d986:	617b      	str	r3, [r7, #20]
 801d988:	e020      	b.n	801d9cc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 801d98a:	68bb      	ldr	r3, [r7, #8]
 801d98c:	4a21      	ldr	r2, [pc, #132]	; (801da14 <USB_SetTurnaroundTime+0x138>)
 801d98e:	4293      	cmp	r3, r2
 801d990:	d306      	bcc.n	801d9a0 <USB_SetTurnaroundTime+0xc4>
 801d992:	68bb      	ldr	r3, [r7, #8]
 801d994:	4a20      	ldr	r2, [pc, #128]	; (801da18 <USB_SetTurnaroundTime+0x13c>)
 801d996:	4293      	cmp	r3, r2
 801d998:	d802      	bhi.n	801d9a0 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 801d99a:	2308      	movs	r3, #8
 801d99c:	617b      	str	r3, [r7, #20]
 801d99e:	e015      	b.n	801d9cc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 801d9a0:	68bb      	ldr	r3, [r7, #8]
 801d9a2:	4a1d      	ldr	r2, [pc, #116]	; (801da18 <USB_SetTurnaroundTime+0x13c>)
 801d9a4:	4293      	cmp	r3, r2
 801d9a6:	d906      	bls.n	801d9b6 <USB_SetTurnaroundTime+0xda>
 801d9a8:	68bb      	ldr	r3, [r7, #8]
 801d9aa:	4a1c      	ldr	r2, [pc, #112]	; (801da1c <USB_SetTurnaroundTime+0x140>)
 801d9ac:	4293      	cmp	r3, r2
 801d9ae:	d202      	bcs.n	801d9b6 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 801d9b0:	2307      	movs	r3, #7
 801d9b2:	617b      	str	r3, [r7, #20]
 801d9b4:	e00a      	b.n	801d9cc <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 801d9b6:	2306      	movs	r3, #6
 801d9b8:	617b      	str	r3, [r7, #20]
 801d9ba:	e007      	b.n	801d9cc <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 801d9bc:	79fb      	ldrb	r3, [r7, #7]
 801d9be:	2b00      	cmp	r3, #0
 801d9c0:	d102      	bne.n	801d9c8 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 801d9c2:	2309      	movs	r3, #9
 801d9c4:	617b      	str	r3, [r7, #20]
 801d9c6:	e001      	b.n	801d9cc <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 801d9c8:	2309      	movs	r3, #9
 801d9ca:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 801d9cc:	68fb      	ldr	r3, [r7, #12]
 801d9ce:	68db      	ldr	r3, [r3, #12]
 801d9d0:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 801d9d4:	68fb      	ldr	r3, [r7, #12]
 801d9d6:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 801d9d8:	68fb      	ldr	r3, [r7, #12]
 801d9da:	68da      	ldr	r2, [r3, #12]
 801d9dc:	697b      	ldr	r3, [r7, #20]
 801d9de:	029b      	lsls	r3, r3, #10
 801d9e0:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 801d9e4:	431a      	orrs	r2, r3
 801d9e6:	68fb      	ldr	r3, [r7, #12]
 801d9e8:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 801d9ea:	2300      	movs	r3, #0
}
 801d9ec:	4618      	mov	r0, r3
 801d9ee:	371c      	adds	r7, #28
 801d9f0:	46bd      	mov	sp, r7
 801d9f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d9f6:	4770      	bx	lr
 801d9f8:	00d8acbf 	.word	0x00d8acbf
 801d9fc:	00e4e1c0 	.word	0x00e4e1c0
 801da00:	00f42400 	.word	0x00f42400
 801da04:	01067380 	.word	0x01067380
 801da08:	011a499f 	.word	0x011a499f
 801da0c:	01312cff 	.word	0x01312cff
 801da10:	014ca43f 	.word	0x014ca43f
 801da14:	016e3600 	.word	0x016e3600
 801da18:	01a6ab1f 	.word	0x01a6ab1f
 801da1c:	01e84800 	.word	0x01e84800

0801da20 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 801da20:	b480      	push	{r7}
 801da22:	b083      	sub	sp, #12
 801da24:	af00      	add	r7, sp, #0
 801da26:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 801da28:	687b      	ldr	r3, [r7, #4]
 801da2a:	689b      	ldr	r3, [r3, #8]
 801da2c:	f043 0201 	orr.w	r2, r3, #1
 801da30:	687b      	ldr	r3, [r7, #4]
 801da32:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 801da34:	2300      	movs	r3, #0
}
 801da36:	4618      	mov	r0, r3
 801da38:	370c      	adds	r7, #12
 801da3a:	46bd      	mov	sp, r7
 801da3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801da40:	4770      	bx	lr

0801da42 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 801da42:	b480      	push	{r7}
 801da44:	b083      	sub	sp, #12
 801da46:	af00      	add	r7, sp, #0
 801da48:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 801da4a:	687b      	ldr	r3, [r7, #4]
 801da4c:	689b      	ldr	r3, [r3, #8]
 801da4e:	f023 0201 	bic.w	r2, r3, #1
 801da52:	687b      	ldr	r3, [r7, #4]
 801da54:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 801da56:	2300      	movs	r3, #0
}
 801da58:	4618      	mov	r0, r3
 801da5a:	370c      	adds	r7, #12
 801da5c:	46bd      	mov	sp, r7
 801da5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801da62:	4770      	bx	lr

0801da64 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 801da64:	b580      	push	{r7, lr}
 801da66:	b084      	sub	sp, #16
 801da68:	af00      	add	r7, sp, #0
 801da6a:	6078      	str	r0, [r7, #4]
 801da6c:	460b      	mov	r3, r1
 801da6e:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 801da70:	2300      	movs	r3, #0
 801da72:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 801da74:	687b      	ldr	r3, [r7, #4]
 801da76:	68db      	ldr	r3, [r3, #12]
 801da78:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 801da7c:	687b      	ldr	r3, [r7, #4]
 801da7e:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 801da80:	78fb      	ldrb	r3, [r7, #3]
 801da82:	2b01      	cmp	r3, #1
 801da84:	d115      	bne.n	801dab2 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 801da86:	687b      	ldr	r3, [r7, #4]
 801da88:	68db      	ldr	r3, [r3, #12]
 801da8a:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 801da8e:	687b      	ldr	r3, [r7, #4]
 801da90:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 801da92:	2001      	movs	r0, #1
 801da94:	f7fa fb12 	bl	80180bc <HAL_Delay>
      ms++;
 801da98:	68fb      	ldr	r3, [r7, #12]
 801da9a:	3301      	adds	r3, #1
 801da9c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 801da9e:	6878      	ldr	r0, [r7, #4]
 801daa0:	f001 f96c 	bl	801ed7c <USB_GetMode>
 801daa4:	4603      	mov	r3, r0
 801daa6:	2b01      	cmp	r3, #1
 801daa8:	d01e      	beq.n	801dae8 <USB_SetCurrentMode+0x84>
 801daaa:	68fb      	ldr	r3, [r7, #12]
 801daac:	2b31      	cmp	r3, #49	; 0x31
 801daae:	d9f0      	bls.n	801da92 <USB_SetCurrentMode+0x2e>
 801dab0:	e01a      	b.n	801dae8 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 801dab2:	78fb      	ldrb	r3, [r7, #3]
 801dab4:	2b00      	cmp	r3, #0
 801dab6:	d115      	bne.n	801dae4 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 801dab8:	687b      	ldr	r3, [r7, #4]
 801daba:	68db      	ldr	r3, [r3, #12]
 801dabc:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 801dac0:	687b      	ldr	r3, [r7, #4]
 801dac2:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 801dac4:	2001      	movs	r0, #1
 801dac6:	f7fa faf9 	bl	80180bc <HAL_Delay>
      ms++;
 801daca:	68fb      	ldr	r3, [r7, #12]
 801dacc:	3301      	adds	r3, #1
 801dace:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 801dad0:	6878      	ldr	r0, [r7, #4]
 801dad2:	f001 f953 	bl	801ed7c <USB_GetMode>
 801dad6:	4603      	mov	r3, r0
 801dad8:	2b00      	cmp	r3, #0
 801dada:	d005      	beq.n	801dae8 <USB_SetCurrentMode+0x84>
 801dadc:	68fb      	ldr	r3, [r7, #12]
 801dade:	2b31      	cmp	r3, #49	; 0x31
 801dae0:	d9f0      	bls.n	801dac4 <USB_SetCurrentMode+0x60>
 801dae2:	e001      	b.n	801dae8 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 801dae4:	2301      	movs	r3, #1
 801dae6:	e005      	b.n	801daf4 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 801dae8:	68fb      	ldr	r3, [r7, #12]
 801daea:	2b32      	cmp	r3, #50	; 0x32
 801daec:	d101      	bne.n	801daf2 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 801daee:	2301      	movs	r3, #1
 801daf0:	e000      	b.n	801daf4 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 801daf2:	2300      	movs	r3, #0
}
 801daf4:	4618      	mov	r0, r3
 801daf6:	3710      	adds	r7, #16
 801daf8:	46bd      	mov	sp, r7
 801dafa:	bd80      	pop	{r7, pc}

0801dafc <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 801dafc:	b084      	sub	sp, #16
 801dafe:	b580      	push	{r7, lr}
 801db00:	b086      	sub	sp, #24
 801db02:	af00      	add	r7, sp, #0
 801db04:	6078      	str	r0, [r7, #4]
 801db06:	f107 0024 	add.w	r0, r7, #36	; 0x24
 801db0a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 801db0e:	2300      	movs	r3, #0
 801db10:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801db12:	687b      	ldr	r3, [r7, #4]
 801db14:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 801db16:	2300      	movs	r3, #0
 801db18:	613b      	str	r3, [r7, #16]
 801db1a:	e009      	b.n	801db30 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 801db1c:	687a      	ldr	r2, [r7, #4]
 801db1e:	693b      	ldr	r3, [r7, #16]
 801db20:	3340      	adds	r3, #64	; 0x40
 801db22:	009b      	lsls	r3, r3, #2
 801db24:	4413      	add	r3, r2
 801db26:	2200      	movs	r2, #0
 801db28:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 801db2a:	693b      	ldr	r3, [r7, #16]
 801db2c:	3301      	adds	r3, #1
 801db2e:	613b      	str	r3, [r7, #16]
 801db30:	693b      	ldr	r3, [r7, #16]
 801db32:	2b0e      	cmp	r3, #14
 801db34:	d9f2      	bls.n	801db1c <USB_DevInit+0x20>
  }

#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 801db36:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801db38:	2b00      	cmp	r3, #0
 801db3a:	d11c      	bne.n	801db76 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 801db3c:	68fb      	ldr	r3, [r7, #12]
 801db3e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801db42:	685b      	ldr	r3, [r3, #4]
 801db44:	68fa      	ldr	r2, [r7, #12]
 801db46:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 801db4a:	f043 0302 	orr.w	r3, r3, #2
 801db4e:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 801db50:	687b      	ldr	r3, [r7, #4]
 801db52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801db54:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 801db58:	687b      	ldr	r3, [r7, #4]
 801db5a:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 801db5c:	687b      	ldr	r3, [r7, #4]
 801db5e:	681b      	ldr	r3, [r3, #0]
 801db60:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 801db64:	687b      	ldr	r3, [r7, #4]
 801db66:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 801db68:	687b      	ldr	r3, [r7, #4]
 801db6a:	681b      	ldr	r3, [r3, #0]
 801db6c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 801db70:	687b      	ldr	r3, [r7, #4]
 801db72:	601a      	str	r2, [r3, #0]
 801db74:	e005      	b.n	801db82 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 801db76:	687b      	ldr	r3, [r7, #4]
 801db78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801db7a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 801db7e:	687b      	ldr	r3, [r7, #4]
 801db80:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 801db82:	68fb      	ldr	r3, [r7, #12]
 801db84:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 801db88:	461a      	mov	r2, r3
 801db8a:	2300      	movs	r3, #0
 801db8c:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 801db8e:	68fb      	ldr	r3, [r7, #12]
 801db90:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801db94:	4619      	mov	r1, r3
 801db96:	68fb      	ldr	r3, [r7, #12]
 801db98:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801db9c:	461a      	mov	r2, r3
 801db9e:	680b      	ldr	r3, [r1, #0]
 801dba0:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 801dba2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801dba4:	2b01      	cmp	r3, #1
 801dba6:	d10c      	bne.n	801dbc2 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 801dba8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801dbaa:	2b00      	cmp	r3, #0
 801dbac:	d104      	bne.n	801dbb8 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 801dbae:	2100      	movs	r1, #0
 801dbb0:	6878      	ldr	r0, [r7, #4]
 801dbb2:	f000 f945 	bl	801de40 <USB_SetDevSpeed>
 801dbb6:	e008      	b.n	801dbca <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 801dbb8:	2101      	movs	r1, #1
 801dbba:	6878      	ldr	r0, [r7, #4]
 801dbbc:	f000 f940 	bl	801de40 <USB_SetDevSpeed>
 801dbc0:	e003      	b.n	801dbca <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 801dbc2:	2103      	movs	r1, #3
 801dbc4:	6878      	ldr	r0, [r7, #4]
 801dbc6:	f000 f93b 	bl	801de40 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 801dbca:	2110      	movs	r1, #16
 801dbcc:	6878      	ldr	r0, [r7, #4]
 801dbce:	f000 f8f3 	bl	801ddb8 <USB_FlushTxFifo>
 801dbd2:	4603      	mov	r3, r0
 801dbd4:	2b00      	cmp	r3, #0
 801dbd6:	d001      	beq.n	801dbdc <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 801dbd8:	2301      	movs	r3, #1
 801dbda:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 801dbdc:	6878      	ldr	r0, [r7, #4]
 801dbde:	f000 f90f 	bl	801de00 <USB_FlushRxFifo>
 801dbe2:	4603      	mov	r3, r0
 801dbe4:	2b00      	cmp	r3, #0
 801dbe6:	d001      	beq.n	801dbec <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 801dbe8:	2301      	movs	r3, #1
 801dbea:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 801dbec:	68fb      	ldr	r3, [r7, #12]
 801dbee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801dbf2:	461a      	mov	r2, r3
 801dbf4:	2300      	movs	r3, #0
 801dbf6:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 801dbf8:	68fb      	ldr	r3, [r7, #12]
 801dbfa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801dbfe:	461a      	mov	r2, r3
 801dc00:	2300      	movs	r3, #0
 801dc02:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 801dc04:	68fb      	ldr	r3, [r7, #12]
 801dc06:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801dc0a:	461a      	mov	r2, r3
 801dc0c:	2300      	movs	r3, #0
 801dc0e:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 801dc10:	2300      	movs	r3, #0
 801dc12:	613b      	str	r3, [r7, #16]
 801dc14:	e043      	b.n	801dc9e <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 801dc16:	693b      	ldr	r3, [r7, #16]
 801dc18:	015a      	lsls	r2, r3, #5
 801dc1a:	68fb      	ldr	r3, [r7, #12]
 801dc1c:	4413      	add	r3, r2
 801dc1e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801dc22:	681b      	ldr	r3, [r3, #0]
 801dc24:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 801dc28:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 801dc2c:	d118      	bne.n	801dc60 <USB_DevInit+0x164>
    {
      if (i == 0U)
 801dc2e:	693b      	ldr	r3, [r7, #16]
 801dc30:	2b00      	cmp	r3, #0
 801dc32:	d10a      	bne.n	801dc4a <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 801dc34:	693b      	ldr	r3, [r7, #16]
 801dc36:	015a      	lsls	r2, r3, #5
 801dc38:	68fb      	ldr	r3, [r7, #12]
 801dc3a:	4413      	add	r3, r2
 801dc3c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801dc40:	461a      	mov	r2, r3
 801dc42:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 801dc46:	6013      	str	r3, [r2, #0]
 801dc48:	e013      	b.n	801dc72 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 801dc4a:	693b      	ldr	r3, [r7, #16]
 801dc4c:	015a      	lsls	r2, r3, #5
 801dc4e:	68fb      	ldr	r3, [r7, #12]
 801dc50:	4413      	add	r3, r2
 801dc52:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801dc56:	461a      	mov	r2, r3
 801dc58:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 801dc5c:	6013      	str	r3, [r2, #0]
 801dc5e:	e008      	b.n	801dc72 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 801dc60:	693b      	ldr	r3, [r7, #16]
 801dc62:	015a      	lsls	r2, r3, #5
 801dc64:	68fb      	ldr	r3, [r7, #12]
 801dc66:	4413      	add	r3, r2
 801dc68:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801dc6c:	461a      	mov	r2, r3
 801dc6e:	2300      	movs	r3, #0
 801dc70:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 801dc72:	693b      	ldr	r3, [r7, #16]
 801dc74:	015a      	lsls	r2, r3, #5
 801dc76:	68fb      	ldr	r3, [r7, #12]
 801dc78:	4413      	add	r3, r2
 801dc7a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801dc7e:	461a      	mov	r2, r3
 801dc80:	2300      	movs	r3, #0
 801dc82:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 801dc84:	693b      	ldr	r3, [r7, #16]
 801dc86:	015a      	lsls	r2, r3, #5
 801dc88:	68fb      	ldr	r3, [r7, #12]
 801dc8a:	4413      	add	r3, r2
 801dc8c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801dc90:	461a      	mov	r2, r3
 801dc92:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 801dc96:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 801dc98:	693b      	ldr	r3, [r7, #16]
 801dc9a:	3301      	adds	r3, #1
 801dc9c:	613b      	str	r3, [r7, #16]
 801dc9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801dca0:	693a      	ldr	r2, [r7, #16]
 801dca2:	429a      	cmp	r2, r3
 801dca4:	d3b7      	bcc.n	801dc16 <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 801dca6:	2300      	movs	r3, #0
 801dca8:	613b      	str	r3, [r7, #16]
 801dcaa:	e043      	b.n	801dd34 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 801dcac:	693b      	ldr	r3, [r7, #16]
 801dcae:	015a      	lsls	r2, r3, #5
 801dcb0:	68fb      	ldr	r3, [r7, #12]
 801dcb2:	4413      	add	r3, r2
 801dcb4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801dcb8:	681b      	ldr	r3, [r3, #0]
 801dcba:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 801dcbe:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 801dcc2:	d118      	bne.n	801dcf6 <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 801dcc4:	693b      	ldr	r3, [r7, #16]
 801dcc6:	2b00      	cmp	r3, #0
 801dcc8:	d10a      	bne.n	801dce0 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 801dcca:	693b      	ldr	r3, [r7, #16]
 801dccc:	015a      	lsls	r2, r3, #5
 801dcce:	68fb      	ldr	r3, [r7, #12]
 801dcd0:	4413      	add	r3, r2
 801dcd2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801dcd6:	461a      	mov	r2, r3
 801dcd8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 801dcdc:	6013      	str	r3, [r2, #0]
 801dcde:	e013      	b.n	801dd08 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 801dce0:	693b      	ldr	r3, [r7, #16]
 801dce2:	015a      	lsls	r2, r3, #5
 801dce4:	68fb      	ldr	r3, [r7, #12]
 801dce6:	4413      	add	r3, r2
 801dce8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801dcec:	461a      	mov	r2, r3
 801dcee:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 801dcf2:	6013      	str	r3, [r2, #0]
 801dcf4:	e008      	b.n	801dd08 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 801dcf6:	693b      	ldr	r3, [r7, #16]
 801dcf8:	015a      	lsls	r2, r3, #5
 801dcfa:	68fb      	ldr	r3, [r7, #12]
 801dcfc:	4413      	add	r3, r2
 801dcfe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801dd02:	461a      	mov	r2, r3
 801dd04:	2300      	movs	r3, #0
 801dd06:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 801dd08:	693b      	ldr	r3, [r7, #16]
 801dd0a:	015a      	lsls	r2, r3, #5
 801dd0c:	68fb      	ldr	r3, [r7, #12]
 801dd0e:	4413      	add	r3, r2
 801dd10:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801dd14:	461a      	mov	r2, r3
 801dd16:	2300      	movs	r3, #0
 801dd18:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 801dd1a:	693b      	ldr	r3, [r7, #16]
 801dd1c:	015a      	lsls	r2, r3, #5
 801dd1e:	68fb      	ldr	r3, [r7, #12]
 801dd20:	4413      	add	r3, r2
 801dd22:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801dd26:	461a      	mov	r2, r3
 801dd28:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 801dd2c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 801dd2e:	693b      	ldr	r3, [r7, #16]
 801dd30:	3301      	adds	r3, #1
 801dd32:	613b      	str	r3, [r7, #16]
 801dd34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801dd36:	693a      	ldr	r2, [r7, #16]
 801dd38:	429a      	cmp	r2, r3
 801dd3a:	d3b7      	bcc.n	801dcac <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 801dd3c:	68fb      	ldr	r3, [r7, #12]
 801dd3e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801dd42:	691b      	ldr	r3, [r3, #16]
 801dd44:	68fa      	ldr	r2, [r7, #12]
 801dd46:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 801dd4a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 801dd4e:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 801dd50:	687b      	ldr	r3, [r7, #4]
 801dd52:	2200      	movs	r2, #0
 801dd54:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 801dd56:	687b      	ldr	r3, [r7, #4]
 801dd58:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 801dd5c:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 801dd5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801dd60:	2b00      	cmp	r3, #0
 801dd62:	d105      	bne.n	801dd70 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 801dd64:	687b      	ldr	r3, [r7, #4]
 801dd66:	699b      	ldr	r3, [r3, #24]
 801dd68:	f043 0210 	orr.w	r2, r3, #16
 801dd6c:	687b      	ldr	r3, [r7, #4]
 801dd6e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 801dd70:	687b      	ldr	r3, [r7, #4]
 801dd72:	699a      	ldr	r2, [r3, #24]
 801dd74:	4b0f      	ldr	r3, [pc, #60]	; (801ddb4 <USB_DevInit+0x2b8>)
 801dd76:	4313      	orrs	r3, r2
 801dd78:	687a      	ldr	r2, [r7, #4]
 801dd7a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 801dd7c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801dd7e:	2b00      	cmp	r3, #0
 801dd80:	d005      	beq.n	801dd8e <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 801dd82:	687b      	ldr	r3, [r7, #4]
 801dd84:	699b      	ldr	r3, [r3, #24]
 801dd86:	f043 0208 	orr.w	r2, r3, #8
 801dd8a:	687b      	ldr	r3, [r7, #4]
 801dd8c:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 801dd8e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801dd90:	2b01      	cmp	r3, #1
 801dd92:	d107      	bne.n	801dda4 <USB_DevInit+0x2a8>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 801dd94:	687b      	ldr	r3, [r7, #4]
 801dd96:	699b      	ldr	r3, [r3, #24]
 801dd98:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 801dd9c:	f043 0304 	orr.w	r3, r3, #4
 801dda0:	687a      	ldr	r2, [r7, #4]
 801dda2:	6193      	str	r3, [r2, #24]
  }

  return ret;
 801dda4:	7dfb      	ldrb	r3, [r7, #23]
}
 801dda6:	4618      	mov	r0, r3
 801dda8:	3718      	adds	r7, #24
 801ddaa:	46bd      	mov	sp, r7
 801ddac:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 801ddb0:	b004      	add	sp, #16
 801ddb2:	4770      	bx	lr
 801ddb4:	803c3800 	.word	0x803c3800

0801ddb8 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 801ddb8:	b480      	push	{r7}
 801ddba:	b085      	sub	sp, #20
 801ddbc:	af00      	add	r7, sp, #0
 801ddbe:	6078      	str	r0, [r7, #4]
 801ddc0:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 801ddc2:	2300      	movs	r3, #0
 801ddc4:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 801ddc6:	683b      	ldr	r3, [r7, #0]
 801ddc8:	019b      	lsls	r3, r3, #6
 801ddca:	f043 0220 	orr.w	r2, r3, #32
 801ddce:	687b      	ldr	r3, [r7, #4]
 801ddd0:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 801ddd2:	68fb      	ldr	r3, [r7, #12]
 801ddd4:	3301      	adds	r3, #1
 801ddd6:	60fb      	str	r3, [r7, #12]
 801ddd8:	4a08      	ldr	r2, [pc, #32]	; (801ddfc <USB_FlushTxFifo+0x44>)
 801ddda:	4293      	cmp	r3, r2
 801dddc:	d901      	bls.n	801dde2 <USB_FlushTxFifo+0x2a>
    {
      return HAL_TIMEOUT;
 801ddde:	2303      	movs	r3, #3
 801dde0:	e006      	b.n	801ddf0 <USB_FlushTxFifo+0x38>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 801dde2:	687b      	ldr	r3, [r7, #4]
 801dde4:	691b      	ldr	r3, [r3, #16]
 801dde6:	f003 0320 	and.w	r3, r3, #32
 801ddea:	2b20      	cmp	r3, #32
 801ddec:	d0f1      	beq.n	801ddd2 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 801ddee:	2300      	movs	r3, #0
}
 801ddf0:	4618      	mov	r0, r3
 801ddf2:	3714      	adds	r7, #20
 801ddf4:	46bd      	mov	sp, r7
 801ddf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ddfa:	4770      	bx	lr
 801ddfc:	00030d40 	.word	0x00030d40

0801de00 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 801de00:	b480      	push	{r7}
 801de02:	b085      	sub	sp, #20
 801de04:	af00      	add	r7, sp, #0
 801de06:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 801de08:	2300      	movs	r3, #0
 801de0a:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 801de0c:	687b      	ldr	r3, [r7, #4]
 801de0e:	2210      	movs	r2, #16
 801de10:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 801de12:	68fb      	ldr	r3, [r7, #12]
 801de14:	3301      	adds	r3, #1
 801de16:	60fb      	str	r3, [r7, #12]
 801de18:	4a08      	ldr	r2, [pc, #32]	; (801de3c <USB_FlushRxFifo+0x3c>)
 801de1a:	4293      	cmp	r3, r2
 801de1c:	d901      	bls.n	801de22 <USB_FlushRxFifo+0x22>
    {
      return HAL_TIMEOUT;
 801de1e:	2303      	movs	r3, #3
 801de20:	e006      	b.n	801de30 <USB_FlushRxFifo+0x30>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 801de22:	687b      	ldr	r3, [r7, #4]
 801de24:	691b      	ldr	r3, [r3, #16]
 801de26:	f003 0310 	and.w	r3, r3, #16
 801de2a:	2b10      	cmp	r3, #16
 801de2c:	d0f1      	beq.n	801de12 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 801de2e:	2300      	movs	r3, #0
}
 801de30:	4618      	mov	r0, r3
 801de32:	3714      	adds	r7, #20
 801de34:	46bd      	mov	sp, r7
 801de36:	f85d 7b04 	ldr.w	r7, [sp], #4
 801de3a:	4770      	bx	lr
 801de3c:	00030d40 	.word	0x00030d40

0801de40 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 801de40:	b480      	push	{r7}
 801de42:	b085      	sub	sp, #20
 801de44:	af00      	add	r7, sp, #0
 801de46:	6078      	str	r0, [r7, #4]
 801de48:	460b      	mov	r3, r1
 801de4a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801de4c:	687b      	ldr	r3, [r7, #4]
 801de4e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 801de50:	68fb      	ldr	r3, [r7, #12]
 801de52:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801de56:	681a      	ldr	r2, [r3, #0]
 801de58:	78fb      	ldrb	r3, [r7, #3]
 801de5a:	68f9      	ldr	r1, [r7, #12]
 801de5c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 801de60:	4313      	orrs	r3, r2
 801de62:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 801de64:	2300      	movs	r3, #0
}
 801de66:	4618      	mov	r0, r3
 801de68:	3714      	adds	r7, #20
 801de6a:	46bd      	mov	sp, r7
 801de6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801de70:	4770      	bx	lr

0801de72 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 801de72:	b480      	push	{r7}
 801de74:	b087      	sub	sp, #28
 801de76:	af00      	add	r7, sp, #0
 801de78:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801de7a:	687b      	ldr	r3, [r7, #4]
 801de7c:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 801de7e:	693b      	ldr	r3, [r7, #16]
 801de80:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801de84:	689b      	ldr	r3, [r3, #8]
 801de86:	f003 0306 	and.w	r3, r3, #6
 801de8a:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 801de8c:	68fb      	ldr	r3, [r7, #12]
 801de8e:	2b00      	cmp	r3, #0
 801de90:	d102      	bne.n	801de98 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 801de92:	2300      	movs	r3, #0
 801de94:	75fb      	strb	r3, [r7, #23]
 801de96:	e00a      	b.n	801deae <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 801de98:	68fb      	ldr	r3, [r7, #12]
 801de9a:	2b02      	cmp	r3, #2
 801de9c:	d002      	beq.n	801dea4 <USB_GetDevSpeed+0x32>
 801de9e:	68fb      	ldr	r3, [r7, #12]
 801dea0:	2b06      	cmp	r3, #6
 801dea2:	d102      	bne.n	801deaa <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 801dea4:	2302      	movs	r3, #2
 801dea6:	75fb      	strb	r3, [r7, #23]
 801dea8:	e001      	b.n	801deae <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 801deaa:	230f      	movs	r3, #15
 801deac:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 801deae:	7dfb      	ldrb	r3, [r7, #23]
}
 801deb0:	4618      	mov	r0, r3
 801deb2:	371c      	adds	r7, #28
 801deb4:	46bd      	mov	sp, r7
 801deb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801deba:	4770      	bx	lr

0801debc <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 801debc:	b480      	push	{r7}
 801debe:	b085      	sub	sp, #20
 801dec0:	af00      	add	r7, sp, #0
 801dec2:	6078      	str	r0, [r7, #4]
 801dec4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801dec6:	687b      	ldr	r3, [r7, #4]
 801dec8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 801deca:	683b      	ldr	r3, [r7, #0]
 801decc:	781b      	ldrb	r3, [r3, #0]
 801dece:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 801ded0:	683b      	ldr	r3, [r7, #0]
 801ded2:	785b      	ldrb	r3, [r3, #1]
 801ded4:	2b01      	cmp	r3, #1
 801ded6:	d13a      	bne.n	801df4e <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 801ded8:	68fb      	ldr	r3, [r7, #12]
 801deda:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801dede:	69da      	ldr	r2, [r3, #28]
 801dee0:	683b      	ldr	r3, [r7, #0]
 801dee2:	781b      	ldrb	r3, [r3, #0]
 801dee4:	f003 030f 	and.w	r3, r3, #15
 801dee8:	2101      	movs	r1, #1
 801deea:	fa01 f303 	lsl.w	r3, r1, r3
 801deee:	b29b      	uxth	r3, r3
 801def0:	68f9      	ldr	r1, [r7, #12]
 801def2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 801def6:	4313      	orrs	r3, r2
 801def8:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 801defa:	68bb      	ldr	r3, [r7, #8]
 801defc:	015a      	lsls	r2, r3, #5
 801defe:	68fb      	ldr	r3, [r7, #12]
 801df00:	4413      	add	r3, r2
 801df02:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801df06:	681b      	ldr	r3, [r3, #0]
 801df08:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 801df0c:	2b00      	cmp	r3, #0
 801df0e:	d155      	bne.n	801dfbc <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 801df10:	68bb      	ldr	r3, [r7, #8]
 801df12:	015a      	lsls	r2, r3, #5
 801df14:	68fb      	ldr	r3, [r7, #12]
 801df16:	4413      	add	r3, r2
 801df18:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801df1c:	681a      	ldr	r2, [r3, #0]
 801df1e:	683b      	ldr	r3, [r7, #0]
 801df20:	689b      	ldr	r3, [r3, #8]
 801df22:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 801df26:	683b      	ldr	r3, [r7, #0]
 801df28:	78db      	ldrb	r3, [r3, #3]
 801df2a:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 801df2c:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 801df2e:	68bb      	ldr	r3, [r7, #8]
 801df30:	059b      	lsls	r3, r3, #22
 801df32:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 801df34:	4313      	orrs	r3, r2
 801df36:	68ba      	ldr	r2, [r7, #8]
 801df38:	0151      	lsls	r1, r2, #5
 801df3a:	68fa      	ldr	r2, [r7, #12]
 801df3c:	440a      	add	r2, r1
 801df3e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801df42:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 801df46:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 801df4a:	6013      	str	r3, [r2, #0]
 801df4c:	e036      	b.n	801dfbc <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 801df4e:	68fb      	ldr	r3, [r7, #12]
 801df50:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801df54:	69da      	ldr	r2, [r3, #28]
 801df56:	683b      	ldr	r3, [r7, #0]
 801df58:	781b      	ldrb	r3, [r3, #0]
 801df5a:	f003 030f 	and.w	r3, r3, #15
 801df5e:	2101      	movs	r1, #1
 801df60:	fa01 f303 	lsl.w	r3, r1, r3
 801df64:	041b      	lsls	r3, r3, #16
 801df66:	68f9      	ldr	r1, [r7, #12]
 801df68:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 801df6c:	4313      	orrs	r3, r2
 801df6e:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 801df70:	68bb      	ldr	r3, [r7, #8]
 801df72:	015a      	lsls	r2, r3, #5
 801df74:	68fb      	ldr	r3, [r7, #12]
 801df76:	4413      	add	r3, r2
 801df78:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801df7c:	681b      	ldr	r3, [r3, #0]
 801df7e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 801df82:	2b00      	cmp	r3, #0
 801df84:	d11a      	bne.n	801dfbc <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 801df86:	68bb      	ldr	r3, [r7, #8]
 801df88:	015a      	lsls	r2, r3, #5
 801df8a:	68fb      	ldr	r3, [r7, #12]
 801df8c:	4413      	add	r3, r2
 801df8e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801df92:	681a      	ldr	r2, [r3, #0]
 801df94:	683b      	ldr	r3, [r7, #0]
 801df96:	689b      	ldr	r3, [r3, #8]
 801df98:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 801df9c:	683b      	ldr	r3, [r7, #0]
 801df9e:	78db      	ldrb	r3, [r3, #3]
 801dfa0:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 801dfa2:	430b      	orrs	r3, r1
 801dfa4:	4313      	orrs	r3, r2
 801dfa6:	68ba      	ldr	r2, [r7, #8]
 801dfa8:	0151      	lsls	r1, r2, #5
 801dfaa:	68fa      	ldr	r2, [r7, #12]
 801dfac:	440a      	add	r2, r1
 801dfae:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801dfb2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 801dfb6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 801dfba:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 801dfbc:	2300      	movs	r3, #0
}
 801dfbe:	4618      	mov	r0, r3
 801dfc0:	3714      	adds	r7, #20
 801dfc2:	46bd      	mov	sp, r7
 801dfc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 801dfc8:	4770      	bx	lr
	...

0801dfcc <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 801dfcc:	b480      	push	{r7}
 801dfce:	b085      	sub	sp, #20
 801dfd0:	af00      	add	r7, sp, #0
 801dfd2:	6078      	str	r0, [r7, #4]
 801dfd4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801dfd6:	687b      	ldr	r3, [r7, #4]
 801dfd8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 801dfda:	683b      	ldr	r3, [r7, #0]
 801dfdc:	781b      	ldrb	r3, [r3, #0]
 801dfde:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 801dfe0:	683b      	ldr	r3, [r7, #0]
 801dfe2:	785b      	ldrb	r3, [r3, #1]
 801dfe4:	2b01      	cmp	r3, #1
 801dfe6:	d161      	bne.n	801e0ac <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 801dfe8:	68bb      	ldr	r3, [r7, #8]
 801dfea:	015a      	lsls	r2, r3, #5
 801dfec:	68fb      	ldr	r3, [r7, #12]
 801dfee:	4413      	add	r3, r2
 801dff0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801dff4:	681b      	ldr	r3, [r3, #0]
 801dff6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 801dffa:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 801dffe:	d11f      	bne.n	801e040 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 801e000:	68bb      	ldr	r3, [r7, #8]
 801e002:	015a      	lsls	r2, r3, #5
 801e004:	68fb      	ldr	r3, [r7, #12]
 801e006:	4413      	add	r3, r2
 801e008:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801e00c:	681b      	ldr	r3, [r3, #0]
 801e00e:	68ba      	ldr	r2, [r7, #8]
 801e010:	0151      	lsls	r1, r2, #5
 801e012:	68fa      	ldr	r2, [r7, #12]
 801e014:	440a      	add	r2, r1
 801e016:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801e01a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 801e01e:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 801e020:	68bb      	ldr	r3, [r7, #8]
 801e022:	015a      	lsls	r2, r3, #5
 801e024:	68fb      	ldr	r3, [r7, #12]
 801e026:	4413      	add	r3, r2
 801e028:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801e02c:	681b      	ldr	r3, [r3, #0]
 801e02e:	68ba      	ldr	r2, [r7, #8]
 801e030:	0151      	lsls	r1, r2, #5
 801e032:	68fa      	ldr	r2, [r7, #12]
 801e034:	440a      	add	r2, r1
 801e036:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801e03a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 801e03e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 801e040:	68fb      	ldr	r3, [r7, #12]
 801e042:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801e046:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 801e048:	683b      	ldr	r3, [r7, #0]
 801e04a:	781b      	ldrb	r3, [r3, #0]
 801e04c:	f003 030f 	and.w	r3, r3, #15
 801e050:	2101      	movs	r1, #1
 801e052:	fa01 f303 	lsl.w	r3, r1, r3
 801e056:	b29b      	uxth	r3, r3
 801e058:	43db      	mvns	r3, r3
 801e05a:	68f9      	ldr	r1, [r7, #12]
 801e05c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 801e060:	4013      	ands	r3, r2
 801e062:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 801e064:	68fb      	ldr	r3, [r7, #12]
 801e066:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801e06a:	69da      	ldr	r2, [r3, #28]
 801e06c:	683b      	ldr	r3, [r7, #0]
 801e06e:	781b      	ldrb	r3, [r3, #0]
 801e070:	f003 030f 	and.w	r3, r3, #15
 801e074:	2101      	movs	r1, #1
 801e076:	fa01 f303 	lsl.w	r3, r1, r3
 801e07a:	b29b      	uxth	r3, r3
 801e07c:	43db      	mvns	r3, r3
 801e07e:	68f9      	ldr	r1, [r7, #12]
 801e080:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 801e084:	4013      	ands	r3, r2
 801e086:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 801e088:	68bb      	ldr	r3, [r7, #8]
 801e08a:	015a      	lsls	r2, r3, #5
 801e08c:	68fb      	ldr	r3, [r7, #12]
 801e08e:	4413      	add	r3, r2
 801e090:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801e094:	681a      	ldr	r2, [r3, #0]
 801e096:	68bb      	ldr	r3, [r7, #8]
 801e098:	0159      	lsls	r1, r3, #5
 801e09a:	68fb      	ldr	r3, [r7, #12]
 801e09c:	440b      	add	r3, r1
 801e09e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801e0a2:	4619      	mov	r1, r3
 801e0a4:	4b35      	ldr	r3, [pc, #212]	; (801e17c <USB_DeactivateEndpoint+0x1b0>)
 801e0a6:	4013      	ands	r3, r2
 801e0a8:	600b      	str	r3, [r1, #0]
 801e0aa:	e060      	b.n	801e16e <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 801e0ac:	68bb      	ldr	r3, [r7, #8]
 801e0ae:	015a      	lsls	r2, r3, #5
 801e0b0:	68fb      	ldr	r3, [r7, #12]
 801e0b2:	4413      	add	r3, r2
 801e0b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801e0b8:	681b      	ldr	r3, [r3, #0]
 801e0ba:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 801e0be:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 801e0c2:	d11f      	bne.n	801e104 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 801e0c4:	68bb      	ldr	r3, [r7, #8]
 801e0c6:	015a      	lsls	r2, r3, #5
 801e0c8:	68fb      	ldr	r3, [r7, #12]
 801e0ca:	4413      	add	r3, r2
 801e0cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801e0d0:	681b      	ldr	r3, [r3, #0]
 801e0d2:	68ba      	ldr	r2, [r7, #8]
 801e0d4:	0151      	lsls	r1, r2, #5
 801e0d6:	68fa      	ldr	r2, [r7, #12]
 801e0d8:	440a      	add	r2, r1
 801e0da:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801e0de:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 801e0e2:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 801e0e4:	68bb      	ldr	r3, [r7, #8]
 801e0e6:	015a      	lsls	r2, r3, #5
 801e0e8:	68fb      	ldr	r3, [r7, #12]
 801e0ea:	4413      	add	r3, r2
 801e0ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801e0f0:	681b      	ldr	r3, [r3, #0]
 801e0f2:	68ba      	ldr	r2, [r7, #8]
 801e0f4:	0151      	lsls	r1, r2, #5
 801e0f6:	68fa      	ldr	r2, [r7, #12]
 801e0f8:	440a      	add	r2, r1
 801e0fa:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801e0fe:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 801e102:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 801e104:	68fb      	ldr	r3, [r7, #12]
 801e106:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801e10a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 801e10c:	683b      	ldr	r3, [r7, #0]
 801e10e:	781b      	ldrb	r3, [r3, #0]
 801e110:	f003 030f 	and.w	r3, r3, #15
 801e114:	2101      	movs	r1, #1
 801e116:	fa01 f303 	lsl.w	r3, r1, r3
 801e11a:	041b      	lsls	r3, r3, #16
 801e11c:	43db      	mvns	r3, r3
 801e11e:	68f9      	ldr	r1, [r7, #12]
 801e120:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 801e124:	4013      	ands	r3, r2
 801e126:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 801e128:	68fb      	ldr	r3, [r7, #12]
 801e12a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801e12e:	69da      	ldr	r2, [r3, #28]
 801e130:	683b      	ldr	r3, [r7, #0]
 801e132:	781b      	ldrb	r3, [r3, #0]
 801e134:	f003 030f 	and.w	r3, r3, #15
 801e138:	2101      	movs	r1, #1
 801e13a:	fa01 f303 	lsl.w	r3, r1, r3
 801e13e:	041b      	lsls	r3, r3, #16
 801e140:	43db      	mvns	r3, r3
 801e142:	68f9      	ldr	r1, [r7, #12]
 801e144:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 801e148:	4013      	ands	r3, r2
 801e14a:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 801e14c:	68bb      	ldr	r3, [r7, #8]
 801e14e:	015a      	lsls	r2, r3, #5
 801e150:	68fb      	ldr	r3, [r7, #12]
 801e152:	4413      	add	r3, r2
 801e154:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801e158:	681a      	ldr	r2, [r3, #0]
 801e15a:	68bb      	ldr	r3, [r7, #8]
 801e15c:	0159      	lsls	r1, r3, #5
 801e15e:	68fb      	ldr	r3, [r7, #12]
 801e160:	440b      	add	r3, r1
 801e162:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801e166:	4619      	mov	r1, r3
 801e168:	4b05      	ldr	r3, [pc, #20]	; (801e180 <USB_DeactivateEndpoint+0x1b4>)
 801e16a:	4013      	ands	r3, r2
 801e16c:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 801e16e:	2300      	movs	r3, #0
}
 801e170:	4618      	mov	r0, r3
 801e172:	3714      	adds	r7, #20
 801e174:	46bd      	mov	sp, r7
 801e176:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e17a:	4770      	bx	lr
 801e17c:	ec337800 	.word	0xec337800
 801e180:	eff37800 	.word	0xeff37800

0801e184 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 801e184:	b580      	push	{r7, lr}
 801e186:	b08a      	sub	sp, #40	; 0x28
 801e188:	af02      	add	r7, sp, #8
 801e18a:	60f8      	str	r0, [r7, #12]
 801e18c:	60b9      	str	r1, [r7, #8]
 801e18e:	4613      	mov	r3, r2
 801e190:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801e192:	68fb      	ldr	r3, [r7, #12]
 801e194:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 801e196:	68bb      	ldr	r3, [r7, #8]
 801e198:	781b      	ldrb	r3, [r3, #0]
 801e19a:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 801e19c:	68bb      	ldr	r3, [r7, #8]
 801e19e:	785b      	ldrb	r3, [r3, #1]
 801e1a0:	2b01      	cmp	r3, #1
 801e1a2:	f040 815c 	bne.w	801e45e <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 801e1a6:	68bb      	ldr	r3, [r7, #8]
 801e1a8:	695b      	ldr	r3, [r3, #20]
 801e1aa:	2b00      	cmp	r3, #0
 801e1ac:	d132      	bne.n	801e214 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 801e1ae:	69bb      	ldr	r3, [r7, #24]
 801e1b0:	015a      	lsls	r2, r3, #5
 801e1b2:	69fb      	ldr	r3, [r7, #28]
 801e1b4:	4413      	add	r3, r2
 801e1b6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801e1ba:	691b      	ldr	r3, [r3, #16]
 801e1bc:	69ba      	ldr	r2, [r7, #24]
 801e1be:	0151      	lsls	r1, r2, #5
 801e1c0:	69fa      	ldr	r2, [r7, #28]
 801e1c2:	440a      	add	r2, r1
 801e1c4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801e1c8:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 801e1cc:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 801e1d0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 801e1d2:	69bb      	ldr	r3, [r7, #24]
 801e1d4:	015a      	lsls	r2, r3, #5
 801e1d6:	69fb      	ldr	r3, [r7, #28]
 801e1d8:	4413      	add	r3, r2
 801e1da:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801e1de:	691b      	ldr	r3, [r3, #16]
 801e1e0:	69ba      	ldr	r2, [r7, #24]
 801e1e2:	0151      	lsls	r1, r2, #5
 801e1e4:	69fa      	ldr	r2, [r7, #28]
 801e1e6:	440a      	add	r2, r1
 801e1e8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801e1ec:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 801e1f0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 801e1f2:	69bb      	ldr	r3, [r7, #24]
 801e1f4:	015a      	lsls	r2, r3, #5
 801e1f6:	69fb      	ldr	r3, [r7, #28]
 801e1f8:	4413      	add	r3, r2
 801e1fa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801e1fe:	691b      	ldr	r3, [r3, #16]
 801e200:	69ba      	ldr	r2, [r7, #24]
 801e202:	0151      	lsls	r1, r2, #5
 801e204:	69fa      	ldr	r2, [r7, #28]
 801e206:	440a      	add	r2, r1
 801e208:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801e20c:	0cdb      	lsrs	r3, r3, #19
 801e20e:	04db      	lsls	r3, r3, #19
 801e210:	6113      	str	r3, [r2, #16]
 801e212:	e074      	b.n	801e2fe <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 801e214:	69bb      	ldr	r3, [r7, #24]
 801e216:	015a      	lsls	r2, r3, #5
 801e218:	69fb      	ldr	r3, [r7, #28]
 801e21a:	4413      	add	r3, r2
 801e21c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801e220:	691b      	ldr	r3, [r3, #16]
 801e222:	69ba      	ldr	r2, [r7, #24]
 801e224:	0151      	lsls	r1, r2, #5
 801e226:	69fa      	ldr	r2, [r7, #28]
 801e228:	440a      	add	r2, r1
 801e22a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801e22e:	0cdb      	lsrs	r3, r3, #19
 801e230:	04db      	lsls	r3, r3, #19
 801e232:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 801e234:	69bb      	ldr	r3, [r7, #24]
 801e236:	015a      	lsls	r2, r3, #5
 801e238:	69fb      	ldr	r3, [r7, #28]
 801e23a:	4413      	add	r3, r2
 801e23c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801e240:	691b      	ldr	r3, [r3, #16]
 801e242:	69ba      	ldr	r2, [r7, #24]
 801e244:	0151      	lsls	r1, r2, #5
 801e246:	69fa      	ldr	r2, [r7, #28]
 801e248:	440a      	add	r2, r1
 801e24a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801e24e:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 801e252:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 801e256:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 801e258:	69bb      	ldr	r3, [r7, #24]
 801e25a:	015a      	lsls	r2, r3, #5
 801e25c:	69fb      	ldr	r3, [r7, #28]
 801e25e:	4413      	add	r3, r2
 801e260:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801e264:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 801e266:	68bb      	ldr	r3, [r7, #8]
 801e268:	6959      	ldr	r1, [r3, #20]
 801e26a:	68bb      	ldr	r3, [r7, #8]
 801e26c:	689b      	ldr	r3, [r3, #8]
 801e26e:	440b      	add	r3, r1
 801e270:	1e59      	subs	r1, r3, #1
 801e272:	68bb      	ldr	r3, [r7, #8]
 801e274:	689b      	ldr	r3, [r3, #8]
 801e276:	fbb1 f3f3 	udiv	r3, r1, r3
 801e27a:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 801e27c:	4b9d      	ldr	r3, [pc, #628]	; (801e4f4 <USB_EPStartXfer+0x370>)
 801e27e:	400b      	ands	r3, r1
 801e280:	69b9      	ldr	r1, [r7, #24]
 801e282:	0148      	lsls	r0, r1, #5
 801e284:	69f9      	ldr	r1, [r7, #28]
 801e286:	4401      	add	r1, r0
 801e288:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 801e28c:	4313      	orrs	r3, r2
 801e28e:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 801e290:	69bb      	ldr	r3, [r7, #24]
 801e292:	015a      	lsls	r2, r3, #5
 801e294:	69fb      	ldr	r3, [r7, #28]
 801e296:	4413      	add	r3, r2
 801e298:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801e29c:	691a      	ldr	r2, [r3, #16]
 801e29e:	68bb      	ldr	r3, [r7, #8]
 801e2a0:	695b      	ldr	r3, [r3, #20]
 801e2a2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 801e2a6:	69b9      	ldr	r1, [r7, #24]
 801e2a8:	0148      	lsls	r0, r1, #5
 801e2aa:	69f9      	ldr	r1, [r7, #28]
 801e2ac:	4401      	add	r1, r0
 801e2ae:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 801e2b2:	4313      	orrs	r3, r2
 801e2b4:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 801e2b6:	68bb      	ldr	r3, [r7, #8]
 801e2b8:	78db      	ldrb	r3, [r3, #3]
 801e2ba:	2b01      	cmp	r3, #1
 801e2bc:	d11f      	bne.n	801e2fe <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 801e2be:	69bb      	ldr	r3, [r7, #24]
 801e2c0:	015a      	lsls	r2, r3, #5
 801e2c2:	69fb      	ldr	r3, [r7, #28]
 801e2c4:	4413      	add	r3, r2
 801e2c6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801e2ca:	691b      	ldr	r3, [r3, #16]
 801e2cc:	69ba      	ldr	r2, [r7, #24]
 801e2ce:	0151      	lsls	r1, r2, #5
 801e2d0:	69fa      	ldr	r2, [r7, #28]
 801e2d2:	440a      	add	r2, r1
 801e2d4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801e2d8:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 801e2dc:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 801e2de:	69bb      	ldr	r3, [r7, #24]
 801e2e0:	015a      	lsls	r2, r3, #5
 801e2e2:	69fb      	ldr	r3, [r7, #28]
 801e2e4:	4413      	add	r3, r2
 801e2e6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801e2ea:	691b      	ldr	r3, [r3, #16]
 801e2ec:	69ba      	ldr	r2, [r7, #24]
 801e2ee:	0151      	lsls	r1, r2, #5
 801e2f0:	69fa      	ldr	r2, [r7, #28]
 801e2f2:	440a      	add	r2, r1
 801e2f4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801e2f8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 801e2fc:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 801e2fe:	79fb      	ldrb	r3, [r7, #7]
 801e300:	2b01      	cmp	r3, #1
 801e302:	d14b      	bne.n	801e39c <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 801e304:	68bb      	ldr	r3, [r7, #8]
 801e306:	691b      	ldr	r3, [r3, #16]
 801e308:	2b00      	cmp	r3, #0
 801e30a:	d009      	beq.n	801e320 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 801e30c:	69bb      	ldr	r3, [r7, #24]
 801e30e:	015a      	lsls	r2, r3, #5
 801e310:	69fb      	ldr	r3, [r7, #28]
 801e312:	4413      	add	r3, r2
 801e314:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801e318:	461a      	mov	r2, r3
 801e31a:	68bb      	ldr	r3, [r7, #8]
 801e31c:	691b      	ldr	r3, [r3, #16]
 801e31e:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 801e320:	68bb      	ldr	r3, [r7, #8]
 801e322:	78db      	ldrb	r3, [r3, #3]
 801e324:	2b01      	cmp	r3, #1
 801e326:	d128      	bne.n	801e37a <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 801e328:	69fb      	ldr	r3, [r7, #28]
 801e32a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801e32e:	689b      	ldr	r3, [r3, #8]
 801e330:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801e334:	2b00      	cmp	r3, #0
 801e336:	d110      	bne.n	801e35a <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 801e338:	69bb      	ldr	r3, [r7, #24]
 801e33a:	015a      	lsls	r2, r3, #5
 801e33c:	69fb      	ldr	r3, [r7, #28]
 801e33e:	4413      	add	r3, r2
 801e340:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801e344:	681b      	ldr	r3, [r3, #0]
 801e346:	69ba      	ldr	r2, [r7, #24]
 801e348:	0151      	lsls	r1, r2, #5
 801e34a:	69fa      	ldr	r2, [r7, #28]
 801e34c:	440a      	add	r2, r1
 801e34e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801e352:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 801e356:	6013      	str	r3, [r2, #0]
 801e358:	e00f      	b.n	801e37a <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 801e35a:	69bb      	ldr	r3, [r7, #24]
 801e35c:	015a      	lsls	r2, r3, #5
 801e35e:	69fb      	ldr	r3, [r7, #28]
 801e360:	4413      	add	r3, r2
 801e362:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801e366:	681b      	ldr	r3, [r3, #0]
 801e368:	69ba      	ldr	r2, [r7, #24]
 801e36a:	0151      	lsls	r1, r2, #5
 801e36c:	69fa      	ldr	r2, [r7, #28]
 801e36e:	440a      	add	r2, r1
 801e370:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801e374:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 801e378:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 801e37a:	69bb      	ldr	r3, [r7, #24]
 801e37c:	015a      	lsls	r2, r3, #5
 801e37e:	69fb      	ldr	r3, [r7, #28]
 801e380:	4413      	add	r3, r2
 801e382:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801e386:	681b      	ldr	r3, [r3, #0]
 801e388:	69ba      	ldr	r2, [r7, #24]
 801e38a:	0151      	lsls	r1, r2, #5
 801e38c:	69fa      	ldr	r2, [r7, #28]
 801e38e:	440a      	add	r2, r1
 801e390:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801e394:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 801e398:	6013      	str	r3, [r2, #0]
 801e39a:	e12f      	b.n	801e5fc <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 801e39c:	69bb      	ldr	r3, [r7, #24]
 801e39e:	015a      	lsls	r2, r3, #5
 801e3a0:	69fb      	ldr	r3, [r7, #28]
 801e3a2:	4413      	add	r3, r2
 801e3a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801e3a8:	681b      	ldr	r3, [r3, #0]
 801e3aa:	69ba      	ldr	r2, [r7, #24]
 801e3ac:	0151      	lsls	r1, r2, #5
 801e3ae:	69fa      	ldr	r2, [r7, #28]
 801e3b0:	440a      	add	r2, r1
 801e3b2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801e3b6:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 801e3ba:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 801e3bc:	68bb      	ldr	r3, [r7, #8]
 801e3be:	78db      	ldrb	r3, [r3, #3]
 801e3c0:	2b01      	cmp	r3, #1
 801e3c2:	d015      	beq.n	801e3f0 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 801e3c4:	68bb      	ldr	r3, [r7, #8]
 801e3c6:	695b      	ldr	r3, [r3, #20]
 801e3c8:	2b00      	cmp	r3, #0
 801e3ca:	f000 8117 	beq.w	801e5fc <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 801e3ce:	69fb      	ldr	r3, [r7, #28]
 801e3d0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801e3d4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 801e3d6:	68bb      	ldr	r3, [r7, #8]
 801e3d8:	781b      	ldrb	r3, [r3, #0]
 801e3da:	f003 030f 	and.w	r3, r3, #15
 801e3de:	2101      	movs	r1, #1
 801e3e0:	fa01 f303 	lsl.w	r3, r1, r3
 801e3e4:	69f9      	ldr	r1, [r7, #28]
 801e3e6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 801e3ea:	4313      	orrs	r3, r2
 801e3ec:	634b      	str	r3, [r1, #52]	; 0x34
 801e3ee:	e105      	b.n	801e5fc <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 801e3f0:	69fb      	ldr	r3, [r7, #28]
 801e3f2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801e3f6:	689b      	ldr	r3, [r3, #8]
 801e3f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801e3fc:	2b00      	cmp	r3, #0
 801e3fe:	d110      	bne.n	801e422 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 801e400:	69bb      	ldr	r3, [r7, #24]
 801e402:	015a      	lsls	r2, r3, #5
 801e404:	69fb      	ldr	r3, [r7, #28]
 801e406:	4413      	add	r3, r2
 801e408:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801e40c:	681b      	ldr	r3, [r3, #0]
 801e40e:	69ba      	ldr	r2, [r7, #24]
 801e410:	0151      	lsls	r1, r2, #5
 801e412:	69fa      	ldr	r2, [r7, #28]
 801e414:	440a      	add	r2, r1
 801e416:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801e41a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 801e41e:	6013      	str	r3, [r2, #0]
 801e420:	e00f      	b.n	801e442 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 801e422:	69bb      	ldr	r3, [r7, #24]
 801e424:	015a      	lsls	r2, r3, #5
 801e426:	69fb      	ldr	r3, [r7, #28]
 801e428:	4413      	add	r3, r2
 801e42a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801e42e:	681b      	ldr	r3, [r3, #0]
 801e430:	69ba      	ldr	r2, [r7, #24]
 801e432:	0151      	lsls	r1, r2, #5
 801e434:	69fa      	ldr	r2, [r7, #28]
 801e436:	440a      	add	r2, r1
 801e438:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801e43c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 801e440:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 801e442:	68bb      	ldr	r3, [r7, #8]
 801e444:	68d9      	ldr	r1, [r3, #12]
 801e446:	68bb      	ldr	r3, [r7, #8]
 801e448:	781a      	ldrb	r2, [r3, #0]
 801e44a:	68bb      	ldr	r3, [r7, #8]
 801e44c:	695b      	ldr	r3, [r3, #20]
 801e44e:	b298      	uxth	r0, r3
 801e450:	79fb      	ldrb	r3, [r7, #7]
 801e452:	9300      	str	r3, [sp, #0]
 801e454:	4603      	mov	r3, r0
 801e456:	68f8      	ldr	r0, [r7, #12]
 801e458:	f000 fa2b 	bl	801e8b2 <USB_WritePacket>
 801e45c:	e0ce      	b.n	801e5fc <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 801e45e:	69bb      	ldr	r3, [r7, #24]
 801e460:	015a      	lsls	r2, r3, #5
 801e462:	69fb      	ldr	r3, [r7, #28]
 801e464:	4413      	add	r3, r2
 801e466:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801e46a:	691b      	ldr	r3, [r3, #16]
 801e46c:	69ba      	ldr	r2, [r7, #24]
 801e46e:	0151      	lsls	r1, r2, #5
 801e470:	69fa      	ldr	r2, [r7, #28]
 801e472:	440a      	add	r2, r1
 801e474:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801e478:	0cdb      	lsrs	r3, r3, #19
 801e47a:	04db      	lsls	r3, r3, #19
 801e47c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 801e47e:	69bb      	ldr	r3, [r7, #24]
 801e480:	015a      	lsls	r2, r3, #5
 801e482:	69fb      	ldr	r3, [r7, #28]
 801e484:	4413      	add	r3, r2
 801e486:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801e48a:	691b      	ldr	r3, [r3, #16]
 801e48c:	69ba      	ldr	r2, [r7, #24]
 801e48e:	0151      	lsls	r1, r2, #5
 801e490:	69fa      	ldr	r2, [r7, #28]
 801e492:	440a      	add	r2, r1
 801e494:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801e498:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 801e49c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 801e4a0:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 801e4a2:	68bb      	ldr	r3, [r7, #8]
 801e4a4:	695b      	ldr	r3, [r3, #20]
 801e4a6:	2b00      	cmp	r3, #0
 801e4a8:	d126      	bne.n	801e4f8 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 801e4aa:	69bb      	ldr	r3, [r7, #24]
 801e4ac:	015a      	lsls	r2, r3, #5
 801e4ae:	69fb      	ldr	r3, [r7, #28]
 801e4b0:	4413      	add	r3, r2
 801e4b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801e4b6:	691a      	ldr	r2, [r3, #16]
 801e4b8:	68bb      	ldr	r3, [r7, #8]
 801e4ba:	689b      	ldr	r3, [r3, #8]
 801e4bc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 801e4c0:	69b9      	ldr	r1, [r7, #24]
 801e4c2:	0148      	lsls	r0, r1, #5
 801e4c4:	69f9      	ldr	r1, [r7, #28]
 801e4c6:	4401      	add	r1, r0
 801e4c8:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 801e4cc:	4313      	orrs	r3, r2
 801e4ce:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 801e4d0:	69bb      	ldr	r3, [r7, #24]
 801e4d2:	015a      	lsls	r2, r3, #5
 801e4d4:	69fb      	ldr	r3, [r7, #28]
 801e4d6:	4413      	add	r3, r2
 801e4d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801e4dc:	691b      	ldr	r3, [r3, #16]
 801e4de:	69ba      	ldr	r2, [r7, #24]
 801e4e0:	0151      	lsls	r1, r2, #5
 801e4e2:	69fa      	ldr	r2, [r7, #28]
 801e4e4:	440a      	add	r2, r1
 801e4e6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801e4ea:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 801e4ee:	6113      	str	r3, [r2, #16]
 801e4f0:	e036      	b.n	801e560 <USB_EPStartXfer+0x3dc>
 801e4f2:	bf00      	nop
 801e4f4:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 801e4f8:	68bb      	ldr	r3, [r7, #8]
 801e4fa:	695a      	ldr	r2, [r3, #20]
 801e4fc:	68bb      	ldr	r3, [r7, #8]
 801e4fe:	689b      	ldr	r3, [r3, #8]
 801e500:	4413      	add	r3, r2
 801e502:	1e5a      	subs	r2, r3, #1
 801e504:	68bb      	ldr	r3, [r7, #8]
 801e506:	689b      	ldr	r3, [r3, #8]
 801e508:	fbb2 f3f3 	udiv	r3, r2, r3
 801e50c:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 801e50e:	69bb      	ldr	r3, [r7, #24]
 801e510:	015a      	lsls	r2, r3, #5
 801e512:	69fb      	ldr	r3, [r7, #28]
 801e514:	4413      	add	r3, r2
 801e516:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801e51a:	691a      	ldr	r2, [r3, #16]
 801e51c:	8afb      	ldrh	r3, [r7, #22]
 801e51e:	04d9      	lsls	r1, r3, #19
 801e520:	4b39      	ldr	r3, [pc, #228]	; (801e608 <USB_EPStartXfer+0x484>)
 801e522:	400b      	ands	r3, r1
 801e524:	69b9      	ldr	r1, [r7, #24]
 801e526:	0148      	lsls	r0, r1, #5
 801e528:	69f9      	ldr	r1, [r7, #28]
 801e52a:	4401      	add	r1, r0
 801e52c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 801e530:	4313      	orrs	r3, r2
 801e532:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 801e534:	69bb      	ldr	r3, [r7, #24]
 801e536:	015a      	lsls	r2, r3, #5
 801e538:	69fb      	ldr	r3, [r7, #28]
 801e53a:	4413      	add	r3, r2
 801e53c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801e540:	691a      	ldr	r2, [r3, #16]
 801e542:	68bb      	ldr	r3, [r7, #8]
 801e544:	689b      	ldr	r3, [r3, #8]
 801e546:	8af9      	ldrh	r1, [r7, #22]
 801e548:	fb01 f303 	mul.w	r3, r1, r3
 801e54c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 801e550:	69b9      	ldr	r1, [r7, #24]
 801e552:	0148      	lsls	r0, r1, #5
 801e554:	69f9      	ldr	r1, [r7, #28]
 801e556:	4401      	add	r1, r0
 801e558:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 801e55c:	4313      	orrs	r3, r2
 801e55e:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 801e560:	79fb      	ldrb	r3, [r7, #7]
 801e562:	2b01      	cmp	r3, #1
 801e564:	d10d      	bne.n	801e582 <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 801e566:	68bb      	ldr	r3, [r7, #8]
 801e568:	68db      	ldr	r3, [r3, #12]
 801e56a:	2b00      	cmp	r3, #0
 801e56c:	d009      	beq.n	801e582 <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 801e56e:	68bb      	ldr	r3, [r7, #8]
 801e570:	68d9      	ldr	r1, [r3, #12]
 801e572:	69bb      	ldr	r3, [r7, #24]
 801e574:	015a      	lsls	r2, r3, #5
 801e576:	69fb      	ldr	r3, [r7, #28]
 801e578:	4413      	add	r3, r2
 801e57a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801e57e:	460a      	mov	r2, r1
 801e580:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 801e582:	68bb      	ldr	r3, [r7, #8]
 801e584:	78db      	ldrb	r3, [r3, #3]
 801e586:	2b01      	cmp	r3, #1
 801e588:	d128      	bne.n	801e5dc <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 801e58a:	69fb      	ldr	r3, [r7, #28]
 801e58c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801e590:	689b      	ldr	r3, [r3, #8]
 801e592:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801e596:	2b00      	cmp	r3, #0
 801e598:	d110      	bne.n	801e5bc <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 801e59a:	69bb      	ldr	r3, [r7, #24]
 801e59c:	015a      	lsls	r2, r3, #5
 801e59e:	69fb      	ldr	r3, [r7, #28]
 801e5a0:	4413      	add	r3, r2
 801e5a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801e5a6:	681b      	ldr	r3, [r3, #0]
 801e5a8:	69ba      	ldr	r2, [r7, #24]
 801e5aa:	0151      	lsls	r1, r2, #5
 801e5ac:	69fa      	ldr	r2, [r7, #28]
 801e5ae:	440a      	add	r2, r1
 801e5b0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801e5b4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 801e5b8:	6013      	str	r3, [r2, #0]
 801e5ba:	e00f      	b.n	801e5dc <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 801e5bc:	69bb      	ldr	r3, [r7, #24]
 801e5be:	015a      	lsls	r2, r3, #5
 801e5c0:	69fb      	ldr	r3, [r7, #28]
 801e5c2:	4413      	add	r3, r2
 801e5c4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801e5c8:	681b      	ldr	r3, [r3, #0]
 801e5ca:	69ba      	ldr	r2, [r7, #24]
 801e5cc:	0151      	lsls	r1, r2, #5
 801e5ce:	69fa      	ldr	r2, [r7, #28]
 801e5d0:	440a      	add	r2, r1
 801e5d2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801e5d6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 801e5da:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 801e5dc:	69bb      	ldr	r3, [r7, #24]
 801e5de:	015a      	lsls	r2, r3, #5
 801e5e0:	69fb      	ldr	r3, [r7, #28]
 801e5e2:	4413      	add	r3, r2
 801e5e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801e5e8:	681b      	ldr	r3, [r3, #0]
 801e5ea:	69ba      	ldr	r2, [r7, #24]
 801e5ec:	0151      	lsls	r1, r2, #5
 801e5ee:	69fa      	ldr	r2, [r7, #28]
 801e5f0:	440a      	add	r2, r1
 801e5f2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801e5f6:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 801e5fa:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 801e5fc:	2300      	movs	r3, #0
}
 801e5fe:	4618      	mov	r0, r3
 801e600:	3720      	adds	r7, #32
 801e602:	46bd      	mov	sp, r7
 801e604:	bd80      	pop	{r7, pc}
 801e606:	bf00      	nop
 801e608:	1ff80000 	.word	0x1ff80000

0801e60c <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 801e60c:	b480      	push	{r7}
 801e60e:	b087      	sub	sp, #28
 801e610:	af00      	add	r7, sp, #0
 801e612:	60f8      	str	r0, [r7, #12]
 801e614:	60b9      	str	r1, [r7, #8]
 801e616:	4613      	mov	r3, r2
 801e618:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801e61a:	68fb      	ldr	r3, [r7, #12]
 801e61c:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 801e61e:	68bb      	ldr	r3, [r7, #8]
 801e620:	781b      	ldrb	r3, [r3, #0]
 801e622:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 801e624:	68bb      	ldr	r3, [r7, #8]
 801e626:	785b      	ldrb	r3, [r3, #1]
 801e628:	2b01      	cmp	r3, #1
 801e62a:	f040 80cd 	bne.w	801e7c8 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 801e62e:	68bb      	ldr	r3, [r7, #8]
 801e630:	695b      	ldr	r3, [r3, #20]
 801e632:	2b00      	cmp	r3, #0
 801e634:	d132      	bne.n	801e69c <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 801e636:	693b      	ldr	r3, [r7, #16]
 801e638:	015a      	lsls	r2, r3, #5
 801e63a:	697b      	ldr	r3, [r7, #20]
 801e63c:	4413      	add	r3, r2
 801e63e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801e642:	691b      	ldr	r3, [r3, #16]
 801e644:	693a      	ldr	r2, [r7, #16]
 801e646:	0151      	lsls	r1, r2, #5
 801e648:	697a      	ldr	r2, [r7, #20]
 801e64a:	440a      	add	r2, r1
 801e64c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801e650:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 801e654:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 801e658:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 801e65a:	693b      	ldr	r3, [r7, #16]
 801e65c:	015a      	lsls	r2, r3, #5
 801e65e:	697b      	ldr	r3, [r7, #20]
 801e660:	4413      	add	r3, r2
 801e662:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801e666:	691b      	ldr	r3, [r3, #16]
 801e668:	693a      	ldr	r2, [r7, #16]
 801e66a:	0151      	lsls	r1, r2, #5
 801e66c:	697a      	ldr	r2, [r7, #20]
 801e66e:	440a      	add	r2, r1
 801e670:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801e674:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 801e678:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 801e67a:	693b      	ldr	r3, [r7, #16]
 801e67c:	015a      	lsls	r2, r3, #5
 801e67e:	697b      	ldr	r3, [r7, #20]
 801e680:	4413      	add	r3, r2
 801e682:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801e686:	691b      	ldr	r3, [r3, #16]
 801e688:	693a      	ldr	r2, [r7, #16]
 801e68a:	0151      	lsls	r1, r2, #5
 801e68c:	697a      	ldr	r2, [r7, #20]
 801e68e:	440a      	add	r2, r1
 801e690:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801e694:	0cdb      	lsrs	r3, r3, #19
 801e696:	04db      	lsls	r3, r3, #19
 801e698:	6113      	str	r3, [r2, #16]
 801e69a:	e04e      	b.n	801e73a <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 801e69c:	693b      	ldr	r3, [r7, #16]
 801e69e:	015a      	lsls	r2, r3, #5
 801e6a0:	697b      	ldr	r3, [r7, #20]
 801e6a2:	4413      	add	r3, r2
 801e6a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801e6a8:	691b      	ldr	r3, [r3, #16]
 801e6aa:	693a      	ldr	r2, [r7, #16]
 801e6ac:	0151      	lsls	r1, r2, #5
 801e6ae:	697a      	ldr	r2, [r7, #20]
 801e6b0:	440a      	add	r2, r1
 801e6b2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801e6b6:	0cdb      	lsrs	r3, r3, #19
 801e6b8:	04db      	lsls	r3, r3, #19
 801e6ba:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 801e6bc:	693b      	ldr	r3, [r7, #16]
 801e6be:	015a      	lsls	r2, r3, #5
 801e6c0:	697b      	ldr	r3, [r7, #20]
 801e6c2:	4413      	add	r3, r2
 801e6c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801e6c8:	691b      	ldr	r3, [r3, #16]
 801e6ca:	693a      	ldr	r2, [r7, #16]
 801e6cc:	0151      	lsls	r1, r2, #5
 801e6ce:	697a      	ldr	r2, [r7, #20]
 801e6d0:	440a      	add	r2, r1
 801e6d2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801e6d6:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 801e6da:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 801e6de:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 801e6e0:	68bb      	ldr	r3, [r7, #8]
 801e6e2:	695a      	ldr	r2, [r3, #20]
 801e6e4:	68bb      	ldr	r3, [r7, #8]
 801e6e6:	689b      	ldr	r3, [r3, #8]
 801e6e8:	429a      	cmp	r2, r3
 801e6ea:	d903      	bls.n	801e6f4 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 801e6ec:	68bb      	ldr	r3, [r7, #8]
 801e6ee:	689a      	ldr	r2, [r3, #8]
 801e6f0:	68bb      	ldr	r3, [r7, #8]
 801e6f2:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 801e6f4:	693b      	ldr	r3, [r7, #16]
 801e6f6:	015a      	lsls	r2, r3, #5
 801e6f8:	697b      	ldr	r3, [r7, #20]
 801e6fa:	4413      	add	r3, r2
 801e6fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801e700:	691b      	ldr	r3, [r3, #16]
 801e702:	693a      	ldr	r2, [r7, #16]
 801e704:	0151      	lsls	r1, r2, #5
 801e706:	697a      	ldr	r2, [r7, #20]
 801e708:	440a      	add	r2, r1
 801e70a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801e70e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 801e712:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 801e714:	693b      	ldr	r3, [r7, #16]
 801e716:	015a      	lsls	r2, r3, #5
 801e718:	697b      	ldr	r3, [r7, #20]
 801e71a:	4413      	add	r3, r2
 801e71c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801e720:	691a      	ldr	r2, [r3, #16]
 801e722:	68bb      	ldr	r3, [r7, #8]
 801e724:	695b      	ldr	r3, [r3, #20]
 801e726:	f3c3 0312 	ubfx	r3, r3, #0, #19
 801e72a:	6939      	ldr	r1, [r7, #16]
 801e72c:	0148      	lsls	r0, r1, #5
 801e72e:	6979      	ldr	r1, [r7, #20]
 801e730:	4401      	add	r1, r0
 801e732:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 801e736:	4313      	orrs	r3, r2
 801e738:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 801e73a:	79fb      	ldrb	r3, [r7, #7]
 801e73c:	2b01      	cmp	r3, #1
 801e73e:	d11e      	bne.n	801e77e <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 801e740:	68bb      	ldr	r3, [r7, #8]
 801e742:	691b      	ldr	r3, [r3, #16]
 801e744:	2b00      	cmp	r3, #0
 801e746:	d009      	beq.n	801e75c <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 801e748:	693b      	ldr	r3, [r7, #16]
 801e74a:	015a      	lsls	r2, r3, #5
 801e74c:	697b      	ldr	r3, [r7, #20]
 801e74e:	4413      	add	r3, r2
 801e750:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801e754:	461a      	mov	r2, r3
 801e756:	68bb      	ldr	r3, [r7, #8]
 801e758:	691b      	ldr	r3, [r3, #16]
 801e75a:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 801e75c:	693b      	ldr	r3, [r7, #16]
 801e75e:	015a      	lsls	r2, r3, #5
 801e760:	697b      	ldr	r3, [r7, #20]
 801e762:	4413      	add	r3, r2
 801e764:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801e768:	681b      	ldr	r3, [r3, #0]
 801e76a:	693a      	ldr	r2, [r7, #16]
 801e76c:	0151      	lsls	r1, r2, #5
 801e76e:	697a      	ldr	r2, [r7, #20]
 801e770:	440a      	add	r2, r1
 801e772:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801e776:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 801e77a:	6013      	str	r3, [r2, #0]
 801e77c:	e092      	b.n	801e8a4 <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 801e77e:	693b      	ldr	r3, [r7, #16]
 801e780:	015a      	lsls	r2, r3, #5
 801e782:	697b      	ldr	r3, [r7, #20]
 801e784:	4413      	add	r3, r2
 801e786:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801e78a:	681b      	ldr	r3, [r3, #0]
 801e78c:	693a      	ldr	r2, [r7, #16]
 801e78e:	0151      	lsls	r1, r2, #5
 801e790:	697a      	ldr	r2, [r7, #20]
 801e792:	440a      	add	r2, r1
 801e794:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801e798:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 801e79c:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 801e79e:	68bb      	ldr	r3, [r7, #8]
 801e7a0:	695b      	ldr	r3, [r3, #20]
 801e7a2:	2b00      	cmp	r3, #0
 801e7a4:	d07e      	beq.n	801e8a4 <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 801e7a6:	697b      	ldr	r3, [r7, #20]
 801e7a8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801e7ac:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 801e7ae:	68bb      	ldr	r3, [r7, #8]
 801e7b0:	781b      	ldrb	r3, [r3, #0]
 801e7b2:	f003 030f 	and.w	r3, r3, #15
 801e7b6:	2101      	movs	r1, #1
 801e7b8:	fa01 f303 	lsl.w	r3, r1, r3
 801e7bc:	6979      	ldr	r1, [r7, #20]
 801e7be:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 801e7c2:	4313      	orrs	r3, r2
 801e7c4:	634b      	str	r3, [r1, #52]	; 0x34
 801e7c6:	e06d      	b.n	801e8a4 <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 801e7c8:	693b      	ldr	r3, [r7, #16]
 801e7ca:	015a      	lsls	r2, r3, #5
 801e7cc:	697b      	ldr	r3, [r7, #20]
 801e7ce:	4413      	add	r3, r2
 801e7d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801e7d4:	691b      	ldr	r3, [r3, #16]
 801e7d6:	693a      	ldr	r2, [r7, #16]
 801e7d8:	0151      	lsls	r1, r2, #5
 801e7da:	697a      	ldr	r2, [r7, #20]
 801e7dc:	440a      	add	r2, r1
 801e7de:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801e7e2:	0cdb      	lsrs	r3, r3, #19
 801e7e4:	04db      	lsls	r3, r3, #19
 801e7e6:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 801e7e8:	693b      	ldr	r3, [r7, #16]
 801e7ea:	015a      	lsls	r2, r3, #5
 801e7ec:	697b      	ldr	r3, [r7, #20]
 801e7ee:	4413      	add	r3, r2
 801e7f0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801e7f4:	691b      	ldr	r3, [r3, #16]
 801e7f6:	693a      	ldr	r2, [r7, #16]
 801e7f8:	0151      	lsls	r1, r2, #5
 801e7fa:	697a      	ldr	r2, [r7, #20]
 801e7fc:	440a      	add	r2, r1
 801e7fe:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801e802:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 801e806:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 801e80a:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 801e80c:	68bb      	ldr	r3, [r7, #8]
 801e80e:	695b      	ldr	r3, [r3, #20]
 801e810:	2b00      	cmp	r3, #0
 801e812:	d003      	beq.n	801e81c <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 801e814:	68bb      	ldr	r3, [r7, #8]
 801e816:	689a      	ldr	r2, [r3, #8]
 801e818:	68bb      	ldr	r3, [r7, #8]
 801e81a:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 801e81c:	693b      	ldr	r3, [r7, #16]
 801e81e:	015a      	lsls	r2, r3, #5
 801e820:	697b      	ldr	r3, [r7, #20]
 801e822:	4413      	add	r3, r2
 801e824:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801e828:	691b      	ldr	r3, [r3, #16]
 801e82a:	693a      	ldr	r2, [r7, #16]
 801e82c:	0151      	lsls	r1, r2, #5
 801e82e:	697a      	ldr	r2, [r7, #20]
 801e830:	440a      	add	r2, r1
 801e832:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801e836:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 801e83a:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 801e83c:	693b      	ldr	r3, [r7, #16]
 801e83e:	015a      	lsls	r2, r3, #5
 801e840:	697b      	ldr	r3, [r7, #20]
 801e842:	4413      	add	r3, r2
 801e844:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801e848:	691a      	ldr	r2, [r3, #16]
 801e84a:	68bb      	ldr	r3, [r7, #8]
 801e84c:	689b      	ldr	r3, [r3, #8]
 801e84e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 801e852:	6939      	ldr	r1, [r7, #16]
 801e854:	0148      	lsls	r0, r1, #5
 801e856:	6979      	ldr	r1, [r7, #20]
 801e858:	4401      	add	r1, r0
 801e85a:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 801e85e:	4313      	orrs	r3, r2
 801e860:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 801e862:	79fb      	ldrb	r3, [r7, #7]
 801e864:	2b01      	cmp	r3, #1
 801e866:	d10d      	bne.n	801e884 <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 801e868:	68bb      	ldr	r3, [r7, #8]
 801e86a:	68db      	ldr	r3, [r3, #12]
 801e86c:	2b00      	cmp	r3, #0
 801e86e:	d009      	beq.n	801e884 <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 801e870:	68bb      	ldr	r3, [r7, #8]
 801e872:	68d9      	ldr	r1, [r3, #12]
 801e874:	693b      	ldr	r3, [r7, #16]
 801e876:	015a      	lsls	r2, r3, #5
 801e878:	697b      	ldr	r3, [r7, #20]
 801e87a:	4413      	add	r3, r2
 801e87c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801e880:	460a      	mov	r2, r1
 801e882:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 801e884:	693b      	ldr	r3, [r7, #16]
 801e886:	015a      	lsls	r2, r3, #5
 801e888:	697b      	ldr	r3, [r7, #20]
 801e88a:	4413      	add	r3, r2
 801e88c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801e890:	681b      	ldr	r3, [r3, #0]
 801e892:	693a      	ldr	r2, [r7, #16]
 801e894:	0151      	lsls	r1, r2, #5
 801e896:	697a      	ldr	r2, [r7, #20]
 801e898:	440a      	add	r2, r1
 801e89a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801e89e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 801e8a2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 801e8a4:	2300      	movs	r3, #0
}
 801e8a6:	4618      	mov	r0, r3
 801e8a8:	371c      	adds	r7, #28
 801e8aa:	46bd      	mov	sp, r7
 801e8ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e8b0:	4770      	bx	lr

0801e8b2 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 801e8b2:	b480      	push	{r7}
 801e8b4:	b089      	sub	sp, #36	; 0x24
 801e8b6:	af00      	add	r7, sp, #0
 801e8b8:	60f8      	str	r0, [r7, #12]
 801e8ba:	60b9      	str	r1, [r7, #8]
 801e8bc:	4611      	mov	r1, r2
 801e8be:	461a      	mov	r2, r3
 801e8c0:	460b      	mov	r3, r1
 801e8c2:	71fb      	strb	r3, [r7, #7]
 801e8c4:	4613      	mov	r3, r2
 801e8c6:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801e8c8:	68fb      	ldr	r3, [r7, #12]
 801e8ca:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 801e8cc:	68bb      	ldr	r3, [r7, #8]
 801e8ce:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 801e8d0:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 801e8d4:	2b00      	cmp	r3, #0
 801e8d6:	d123      	bne.n	801e920 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 801e8d8:	88bb      	ldrh	r3, [r7, #4]
 801e8da:	3303      	adds	r3, #3
 801e8dc:	089b      	lsrs	r3, r3, #2
 801e8de:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 801e8e0:	2300      	movs	r3, #0
 801e8e2:	61bb      	str	r3, [r7, #24]
 801e8e4:	e018      	b.n	801e918 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 801e8e6:	79fb      	ldrb	r3, [r7, #7]
 801e8e8:	031a      	lsls	r2, r3, #12
 801e8ea:	697b      	ldr	r3, [r7, #20]
 801e8ec:	4413      	add	r3, r2
 801e8ee:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801e8f2:	461a      	mov	r2, r3
 801e8f4:	69fb      	ldr	r3, [r7, #28]
 801e8f6:	681b      	ldr	r3, [r3, #0]
 801e8f8:	6013      	str	r3, [r2, #0]
      pSrc++;
 801e8fa:	69fb      	ldr	r3, [r7, #28]
 801e8fc:	3301      	adds	r3, #1
 801e8fe:	61fb      	str	r3, [r7, #28]
      pSrc++;
 801e900:	69fb      	ldr	r3, [r7, #28]
 801e902:	3301      	adds	r3, #1
 801e904:	61fb      	str	r3, [r7, #28]
      pSrc++;
 801e906:	69fb      	ldr	r3, [r7, #28]
 801e908:	3301      	adds	r3, #1
 801e90a:	61fb      	str	r3, [r7, #28]
      pSrc++;
 801e90c:	69fb      	ldr	r3, [r7, #28]
 801e90e:	3301      	adds	r3, #1
 801e910:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 801e912:	69bb      	ldr	r3, [r7, #24]
 801e914:	3301      	adds	r3, #1
 801e916:	61bb      	str	r3, [r7, #24]
 801e918:	69ba      	ldr	r2, [r7, #24]
 801e91a:	693b      	ldr	r3, [r7, #16]
 801e91c:	429a      	cmp	r2, r3
 801e91e:	d3e2      	bcc.n	801e8e6 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 801e920:	2300      	movs	r3, #0
}
 801e922:	4618      	mov	r0, r3
 801e924:	3724      	adds	r7, #36	; 0x24
 801e926:	46bd      	mov	sp, r7
 801e928:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e92c:	4770      	bx	lr

0801e92e <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 801e92e:	b480      	push	{r7}
 801e930:	b08b      	sub	sp, #44	; 0x2c
 801e932:	af00      	add	r7, sp, #0
 801e934:	60f8      	str	r0, [r7, #12]
 801e936:	60b9      	str	r1, [r7, #8]
 801e938:	4613      	mov	r3, r2
 801e93a:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801e93c:	68fb      	ldr	r3, [r7, #12]
 801e93e:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 801e940:	68bb      	ldr	r3, [r7, #8]
 801e942:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 801e944:	88fb      	ldrh	r3, [r7, #6]
 801e946:	089b      	lsrs	r3, r3, #2
 801e948:	b29b      	uxth	r3, r3
 801e94a:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 801e94c:	88fb      	ldrh	r3, [r7, #6]
 801e94e:	f003 0303 	and.w	r3, r3, #3
 801e952:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 801e954:	2300      	movs	r3, #0
 801e956:	623b      	str	r3, [r7, #32]
 801e958:	e014      	b.n	801e984 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 801e95a:	69bb      	ldr	r3, [r7, #24]
 801e95c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801e960:	681a      	ldr	r2, [r3, #0]
 801e962:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801e964:	601a      	str	r2, [r3, #0]
    pDest++;
 801e966:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801e968:	3301      	adds	r3, #1
 801e96a:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 801e96c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801e96e:	3301      	adds	r3, #1
 801e970:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 801e972:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801e974:	3301      	adds	r3, #1
 801e976:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 801e978:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801e97a:	3301      	adds	r3, #1
 801e97c:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 801e97e:	6a3b      	ldr	r3, [r7, #32]
 801e980:	3301      	adds	r3, #1
 801e982:	623b      	str	r3, [r7, #32]
 801e984:	6a3a      	ldr	r2, [r7, #32]
 801e986:	697b      	ldr	r3, [r7, #20]
 801e988:	429a      	cmp	r2, r3
 801e98a:	d3e6      	bcc.n	801e95a <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 801e98c:	8bfb      	ldrh	r3, [r7, #30]
 801e98e:	2b00      	cmp	r3, #0
 801e990:	d01e      	beq.n	801e9d0 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 801e992:	2300      	movs	r3, #0
 801e994:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 801e996:	69bb      	ldr	r3, [r7, #24]
 801e998:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801e99c:	461a      	mov	r2, r3
 801e99e:	f107 0310 	add.w	r3, r7, #16
 801e9a2:	6812      	ldr	r2, [r2, #0]
 801e9a4:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 801e9a6:	693a      	ldr	r2, [r7, #16]
 801e9a8:	6a3b      	ldr	r3, [r7, #32]
 801e9aa:	b2db      	uxtb	r3, r3
 801e9ac:	00db      	lsls	r3, r3, #3
 801e9ae:	fa22 f303 	lsr.w	r3, r2, r3
 801e9b2:	b2da      	uxtb	r2, r3
 801e9b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801e9b6:	701a      	strb	r2, [r3, #0]
      i++;
 801e9b8:	6a3b      	ldr	r3, [r7, #32]
 801e9ba:	3301      	adds	r3, #1
 801e9bc:	623b      	str	r3, [r7, #32]
      pDest++;
 801e9be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801e9c0:	3301      	adds	r3, #1
 801e9c2:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 801e9c4:	8bfb      	ldrh	r3, [r7, #30]
 801e9c6:	3b01      	subs	r3, #1
 801e9c8:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 801e9ca:	8bfb      	ldrh	r3, [r7, #30]
 801e9cc:	2b00      	cmp	r3, #0
 801e9ce:	d1ea      	bne.n	801e9a6 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 801e9d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 801e9d2:	4618      	mov	r0, r3
 801e9d4:	372c      	adds	r7, #44	; 0x2c
 801e9d6:	46bd      	mov	sp, r7
 801e9d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e9dc:	4770      	bx	lr

0801e9de <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 801e9de:	b480      	push	{r7}
 801e9e0:	b085      	sub	sp, #20
 801e9e2:	af00      	add	r7, sp, #0
 801e9e4:	6078      	str	r0, [r7, #4]
 801e9e6:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801e9e8:	687b      	ldr	r3, [r7, #4]
 801e9ea:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 801e9ec:	683b      	ldr	r3, [r7, #0]
 801e9ee:	781b      	ldrb	r3, [r3, #0]
 801e9f0:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 801e9f2:	683b      	ldr	r3, [r7, #0]
 801e9f4:	785b      	ldrb	r3, [r3, #1]
 801e9f6:	2b01      	cmp	r3, #1
 801e9f8:	d12c      	bne.n	801ea54 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 801e9fa:	68bb      	ldr	r3, [r7, #8]
 801e9fc:	015a      	lsls	r2, r3, #5
 801e9fe:	68fb      	ldr	r3, [r7, #12]
 801ea00:	4413      	add	r3, r2
 801ea02:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801ea06:	681b      	ldr	r3, [r3, #0]
 801ea08:	2b00      	cmp	r3, #0
 801ea0a:	db12      	blt.n	801ea32 <USB_EPSetStall+0x54>
 801ea0c:	68bb      	ldr	r3, [r7, #8]
 801ea0e:	2b00      	cmp	r3, #0
 801ea10:	d00f      	beq.n	801ea32 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 801ea12:	68bb      	ldr	r3, [r7, #8]
 801ea14:	015a      	lsls	r2, r3, #5
 801ea16:	68fb      	ldr	r3, [r7, #12]
 801ea18:	4413      	add	r3, r2
 801ea1a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801ea1e:	681b      	ldr	r3, [r3, #0]
 801ea20:	68ba      	ldr	r2, [r7, #8]
 801ea22:	0151      	lsls	r1, r2, #5
 801ea24:	68fa      	ldr	r2, [r7, #12]
 801ea26:	440a      	add	r2, r1
 801ea28:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801ea2c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 801ea30:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 801ea32:	68bb      	ldr	r3, [r7, #8]
 801ea34:	015a      	lsls	r2, r3, #5
 801ea36:	68fb      	ldr	r3, [r7, #12]
 801ea38:	4413      	add	r3, r2
 801ea3a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801ea3e:	681b      	ldr	r3, [r3, #0]
 801ea40:	68ba      	ldr	r2, [r7, #8]
 801ea42:	0151      	lsls	r1, r2, #5
 801ea44:	68fa      	ldr	r2, [r7, #12]
 801ea46:	440a      	add	r2, r1
 801ea48:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801ea4c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 801ea50:	6013      	str	r3, [r2, #0]
 801ea52:	e02b      	b.n	801eaac <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 801ea54:	68bb      	ldr	r3, [r7, #8]
 801ea56:	015a      	lsls	r2, r3, #5
 801ea58:	68fb      	ldr	r3, [r7, #12]
 801ea5a:	4413      	add	r3, r2
 801ea5c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801ea60:	681b      	ldr	r3, [r3, #0]
 801ea62:	2b00      	cmp	r3, #0
 801ea64:	db12      	blt.n	801ea8c <USB_EPSetStall+0xae>
 801ea66:	68bb      	ldr	r3, [r7, #8]
 801ea68:	2b00      	cmp	r3, #0
 801ea6a:	d00f      	beq.n	801ea8c <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 801ea6c:	68bb      	ldr	r3, [r7, #8]
 801ea6e:	015a      	lsls	r2, r3, #5
 801ea70:	68fb      	ldr	r3, [r7, #12]
 801ea72:	4413      	add	r3, r2
 801ea74:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801ea78:	681b      	ldr	r3, [r3, #0]
 801ea7a:	68ba      	ldr	r2, [r7, #8]
 801ea7c:	0151      	lsls	r1, r2, #5
 801ea7e:	68fa      	ldr	r2, [r7, #12]
 801ea80:	440a      	add	r2, r1
 801ea82:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801ea86:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 801ea8a:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 801ea8c:	68bb      	ldr	r3, [r7, #8]
 801ea8e:	015a      	lsls	r2, r3, #5
 801ea90:	68fb      	ldr	r3, [r7, #12]
 801ea92:	4413      	add	r3, r2
 801ea94:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801ea98:	681b      	ldr	r3, [r3, #0]
 801ea9a:	68ba      	ldr	r2, [r7, #8]
 801ea9c:	0151      	lsls	r1, r2, #5
 801ea9e:	68fa      	ldr	r2, [r7, #12]
 801eaa0:	440a      	add	r2, r1
 801eaa2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801eaa6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 801eaaa:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 801eaac:	2300      	movs	r3, #0
}
 801eaae:	4618      	mov	r0, r3
 801eab0:	3714      	adds	r7, #20
 801eab2:	46bd      	mov	sp, r7
 801eab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 801eab8:	4770      	bx	lr

0801eaba <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 801eaba:	b480      	push	{r7}
 801eabc:	b085      	sub	sp, #20
 801eabe:	af00      	add	r7, sp, #0
 801eac0:	6078      	str	r0, [r7, #4]
 801eac2:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801eac4:	687b      	ldr	r3, [r7, #4]
 801eac6:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 801eac8:	683b      	ldr	r3, [r7, #0]
 801eaca:	781b      	ldrb	r3, [r3, #0]
 801eacc:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 801eace:	683b      	ldr	r3, [r7, #0]
 801ead0:	785b      	ldrb	r3, [r3, #1]
 801ead2:	2b01      	cmp	r3, #1
 801ead4:	d128      	bne.n	801eb28 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 801ead6:	68bb      	ldr	r3, [r7, #8]
 801ead8:	015a      	lsls	r2, r3, #5
 801eada:	68fb      	ldr	r3, [r7, #12]
 801eadc:	4413      	add	r3, r2
 801eade:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801eae2:	681b      	ldr	r3, [r3, #0]
 801eae4:	68ba      	ldr	r2, [r7, #8]
 801eae6:	0151      	lsls	r1, r2, #5
 801eae8:	68fa      	ldr	r2, [r7, #12]
 801eaea:	440a      	add	r2, r1
 801eaec:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801eaf0:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 801eaf4:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 801eaf6:	683b      	ldr	r3, [r7, #0]
 801eaf8:	78db      	ldrb	r3, [r3, #3]
 801eafa:	2b03      	cmp	r3, #3
 801eafc:	d003      	beq.n	801eb06 <USB_EPClearStall+0x4c>
 801eafe:	683b      	ldr	r3, [r7, #0]
 801eb00:	78db      	ldrb	r3, [r3, #3]
 801eb02:	2b02      	cmp	r3, #2
 801eb04:	d138      	bne.n	801eb78 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 801eb06:	68bb      	ldr	r3, [r7, #8]
 801eb08:	015a      	lsls	r2, r3, #5
 801eb0a:	68fb      	ldr	r3, [r7, #12]
 801eb0c:	4413      	add	r3, r2
 801eb0e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801eb12:	681b      	ldr	r3, [r3, #0]
 801eb14:	68ba      	ldr	r2, [r7, #8]
 801eb16:	0151      	lsls	r1, r2, #5
 801eb18:	68fa      	ldr	r2, [r7, #12]
 801eb1a:	440a      	add	r2, r1
 801eb1c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801eb20:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 801eb24:	6013      	str	r3, [r2, #0]
 801eb26:	e027      	b.n	801eb78 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 801eb28:	68bb      	ldr	r3, [r7, #8]
 801eb2a:	015a      	lsls	r2, r3, #5
 801eb2c:	68fb      	ldr	r3, [r7, #12]
 801eb2e:	4413      	add	r3, r2
 801eb30:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801eb34:	681b      	ldr	r3, [r3, #0]
 801eb36:	68ba      	ldr	r2, [r7, #8]
 801eb38:	0151      	lsls	r1, r2, #5
 801eb3a:	68fa      	ldr	r2, [r7, #12]
 801eb3c:	440a      	add	r2, r1
 801eb3e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801eb42:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 801eb46:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 801eb48:	683b      	ldr	r3, [r7, #0]
 801eb4a:	78db      	ldrb	r3, [r3, #3]
 801eb4c:	2b03      	cmp	r3, #3
 801eb4e:	d003      	beq.n	801eb58 <USB_EPClearStall+0x9e>
 801eb50:	683b      	ldr	r3, [r7, #0]
 801eb52:	78db      	ldrb	r3, [r3, #3]
 801eb54:	2b02      	cmp	r3, #2
 801eb56:	d10f      	bne.n	801eb78 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 801eb58:	68bb      	ldr	r3, [r7, #8]
 801eb5a:	015a      	lsls	r2, r3, #5
 801eb5c:	68fb      	ldr	r3, [r7, #12]
 801eb5e:	4413      	add	r3, r2
 801eb60:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801eb64:	681b      	ldr	r3, [r3, #0]
 801eb66:	68ba      	ldr	r2, [r7, #8]
 801eb68:	0151      	lsls	r1, r2, #5
 801eb6a:	68fa      	ldr	r2, [r7, #12]
 801eb6c:	440a      	add	r2, r1
 801eb6e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801eb72:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 801eb76:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 801eb78:	2300      	movs	r3, #0
}
 801eb7a:	4618      	mov	r0, r3
 801eb7c:	3714      	adds	r7, #20
 801eb7e:	46bd      	mov	sp, r7
 801eb80:	f85d 7b04 	ldr.w	r7, [sp], #4
 801eb84:	4770      	bx	lr

0801eb86 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 801eb86:	b480      	push	{r7}
 801eb88:	b085      	sub	sp, #20
 801eb8a:	af00      	add	r7, sp, #0
 801eb8c:	6078      	str	r0, [r7, #4]
 801eb8e:	460b      	mov	r3, r1
 801eb90:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801eb92:	687b      	ldr	r3, [r7, #4]
 801eb94:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 801eb96:	68fb      	ldr	r3, [r7, #12]
 801eb98:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801eb9c:	681b      	ldr	r3, [r3, #0]
 801eb9e:	68fa      	ldr	r2, [r7, #12]
 801eba0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 801eba4:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 801eba8:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 801ebaa:	68fb      	ldr	r3, [r7, #12]
 801ebac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801ebb0:	681a      	ldr	r2, [r3, #0]
 801ebb2:	78fb      	ldrb	r3, [r7, #3]
 801ebb4:	011b      	lsls	r3, r3, #4
 801ebb6:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 801ebba:	68f9      	ldr	r1, [r7, #12]
 801ebbc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 801ebc0:	4313      	orrs	r3, r2
 801ebc2:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 801ebc4:	2300      	movs	r3, #0
}
 801ebc6:	4618      	mov	r0, r3
 801ebc8:	3714      	adds	r7, #20
 801ebca:	46bd      	mov	sp, r7
 801ebcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ebd0:	4770      	bx	lr

0801ebd2 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 801ebd2:	b480      	push	{r7}
 801ebd4:	b085      	sub	sp, #20
 801ebd6:	af00      	add	r7, sp, #0
 801ebd8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801ebda:	687b      	ldr	r3, [r7, #4]
 801ebdc:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 801ebde:	68fb      	ldr	r3, [r7, #12]
 801ebe0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 801ebe4:	681b      	ldr	r3, [r3, #0]
 801ebe6:	68fa      	ldr	r2, [r7, #12]
 801ebe8:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 801ebec:	f023 0303 	bic.w	r3, r3, #3
 801ebf0:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 801ebf2:	68fb      	ldr	r3, [r7, #12]
 801ebf4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801ebf8:	685b      	ldr	r3, [r3, #4]
 801ebfa:	68fa      	ldr	r2, [r7, #12]
 801ebfc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 801ec00:	f023 0302 	bic.w	r3, r3, #2
 801ec04:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 801ec06:	2300      	movs	r3, #0
}
 801ec08:	4618      	mov	r0, r3
 801ec0a:	3714      	adds	r7, #20
 801ec0c:	46bd      	mov	sp, r7
 801ec0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ec12:	4770      	bx	lr

0801ec14 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 801ec14:	b480      	push	{r7}
 801ec16:	b085      	sub	sp, #20
 801ec18:	af00      	add	r7, sp, #0
 801ec1a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801ec1c:	687b      	ldr	r3, [r7, #4]
 801ec1e:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 801ec20:	68fb      	ldr	r3, [r7, #12]
 801ec22:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 801ec26:	681b      	ldr	r3, [r3, #0]
 801ec28:	68fa      	ldr	r2, [r7, #12]
 801ec2a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 801ec2e:	f023 0303 	bic.w	r3, r3, #3
 801ec32:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 801ec34:	68fb      	ldr	r3, [r7, #12]
 801ec36:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801ec3a:	685b      	ldr	r3, [r3, #4]
 801ec3c:	68fa      	ldr	r2, [r7, #12]
 801ec3e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 801ec42:	f043 0302 	orr.w	r3, r3, #2
 801ec46:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 801ec48:	2300      	movs	r3, #0
}
 801ec4a:	4618      	mov	r0, r3
 801ec4c:	3714      	adds	r7, #20
 801ec4e:	46bd      	mov	sp, r7
 801ec50:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ec54:	4770      	bx	lr

0801ec56 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 801ec56:	b480      	push	{r7}
 801ec58:	b085      	sub	sp, #20
 801ec5a:	af00      	add	r7, sp, #0
 801ec5c:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 801ec5e:	687b      	ldr	r3, [r7, #4]
 801ec60:	695b      	ldr	r3, [r3, #20]
 801ec62:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 801ec64:	687b      	ldr	r3, [r7, #4]
 801ec66:	699b      	ldr	r3, [r3, #24]
 801ec68:	68fa      	ldr	r2, [r7, #12]
 801ec6a:	4013      	ands	r3, r2
 801ec6c:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 801ec6e:	68fb      	ldr	r3, [r7, #12]
}
 801ec70:	4618      	mov	r0, r3
 801ec72:	3714      	adds	r7, #20
 801ec74:	46bd      	mov	sp, r7
 801ec76:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ec7a:	4770      	bx	lr

0801ec7c <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 801ec7c:	b480      	push	{r7}
 801ec7e:	b085      	sub	sp, #20
 801ec80:	af00      	add	r7, sp, #0
 801ec82:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801ec84:	687b      	ldr	r3, [r7, #4]
 801ec86:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 801ec88:	68fb      	ldr	r3, [r7, #12]
 801ec8a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801ec8e:	699b      	ldr	r3, [r3, #24]
 801ec90:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 801ec92:	68fb      	ldr	r3, [r7, #12]
 801ec94:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801ec98:	69db      	ldr	r3, [r3, #28]
 801ec9a:	68ba      	ldr	r2, [r7, #8]
 801ec9c:	4013      	ands	r3, r2
 801ec9e:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 801eca0:	68bb      	ldr	r3, [r7, #8]
 801eca2:	0c1b      	lsrs	r3, r3, #16
}
 801eca4:	4618      	mov	r0, r3
 801eca6:	3714      	adds	r7, #20
 801eca8:	46bd      	mov	sp, r7
 801ecaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ecae:	4770      	bx	lr

0801ecb0 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 801ecb0:	b480      	push	{r7}
 801ecb2:	b085      	sub	sp, #20
 801ecb4:	af00      	add	r7, sp, #0
 801ecb6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801ecb8:	687b      	ldr	r3, [r7, #4]
 801ecba:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 801ecbc:	68fb      	ldr	r3, [r7, #12]
 801ecbe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801ecc2:	699b      	ldr	r3, [r3, #24]
 801ecc4:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 801ecc6:	68fb      	ldr	r3, [r7, #12]
 801ecc8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801eccc:	69db      	ldr	r3, [r3, #28]
 801ecce:	68ba      	ldr	r2, [r7, #8]
 801ecd0:	4013      	ands	r3, r2
 801ecd2:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 801ecd4:	68bb      	ldr	r3, [r7, #8]
 801ecd6:	b29b      	uxth	r3, r3
}
 801ecd8:	4618      	mov	r0, r3
 801ecda:	3714      	adds	r7, #20
 801ecdc:	46bd      	mov	sp, r7
 801ecde:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ece2:	4770      	bx	lr

0801ece4 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 801ece4:	b480      	push	{r7}
 801ece6:	b085      	sub	sp, #20
 801ece8:	af00      	add	r7, sp, #0
 801ecea:	6078      	str	r0, [r7, #4]
 801ecec:	460b      	mov	r3, r1
 801ecee:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801ecf0:	687b      	ldr	r3, [r7, #4]
 801ecf2:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 801ecf4:	78fb      	ldrb	r3, [r7, #3]
 801ecf6:	015a      	lsls	r2, r3, #5
 801ecf8:	68fb      	ldr	r3, [r7, #12]
 801ecfa:	4413      	add	r3, r2
 801ecfc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801ed00:	689b      	ldr	r3, [r3, #8]
 801ed02:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 801ed04:	68fb      	ldr	r3, [r7, #12]
 801ed06:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801ed0a:	695b      	ldr	r3, [r3, #20]
 801ed0c:	68ba      	ldr	r2, [r7, #8]
 801ed0e:	4013      	ands	r3, r2
 801ed10:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 801ed12:	68bb      	ldr	r3, [r7, #8]
}
 801ed14:	4618      	mov	r0, r3
 801ed16:	3714      	adds	r7, #20
 801ed18:	46bd      	mov	sp, r7
 801ed1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ed1e:	4770      	bx	lr

0801ed20 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 801ed20:	b480      	push	{r7}
 801ed22:	b087      	sub	sp, #28
 801ed24:	af00      	add	r7, sp, #0
 801ed26:	6078      	str	r0, [r7, #4]
 801ed28:	460b      	mov	r3, r1
 801ed2a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801ed2c:	687b      	ldr	r3, [r7, #4]
 801ed2e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 801ed30:	697b      	ldr	r3, [r7, #20]
 801ed32:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801ed36:	691b      	ldr	r3, [r3, #16]
 801ed38:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 801ed3a:	697b      	ldr	r3, [r7, #20]
 801ed3c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801ed40:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801ed42:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 801ed44:	78fb      	ldrb	r3, [r7, #3]
 801ed46:	f003 030f 	and.w	r3, r3, #15
 801ed4a:	68fa      	ldr	r2, [r7, #12]
 801ed4c:	fa22 f303 	lsr.w	r3, r2, r3
 801ed50:	01db      	lsls	r3, r3, #7
 801ed52:	b2db      	uxtb	r3, r3
 801ed54:	693a      	ldr	r2, [r7, #16]
 801ed56:	4313      	orrs	r3, r2
 801ed58:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 801ed5a:	78fb      	ldrb	r3, [r7, #3]
 801ed5c:	015a      	lsls	r2, r3, #5
 801ed5e:	697b      	ldr	r3, [r7, #20]
 801ed60:	4413      	add	r3, r2
 801ed62:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801ed66:	689b      	ldr	r3, [r3, #8]
 801ed68:	693a      	ldr	r2, [r7, #16]
 801ed6a:	4013      	ands	r3, r2
 801ed6c:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 801ed6e:	68bb      	ldr	r3, [r7, #8]
}
 801ed70:	4618      	mov	r0, r3
 801ed72:	371c      	adds	r7, #28
 801ed74:	46bd      	mov	sp, r7
 801ed76:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ed7a:	4770      	bx	lr

0801ed7c <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 801ed7c:	b480      	push	{r7}
 801ed7e:	b083      	sub	sp, #12
 801ed80:	af00      	add	r7, sp, #0
 801ed82:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 801ed84:	687b      	ldr	r3, [r7, #4]
 801ed86:	695b      	ldr	r3, [r3, #20]
 801ed88:	f003 0301 	and.w	r3, r3, #1
}
 801ed8c:	4618      	mov	r0, r3
 801ed8e:	370c      	adds	r7, #12
 801ed90:	46bd      	mov	sp, r7
 801ed92:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ed96:	4770      	bx	lr

0801ed98 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 801ed98:	b480      	push	{r7}
 801ed9a:	b085      	sub	sp, #20
 801ed9c:	af00      	add	r7, sp, #0
 801ed9e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801eda0:	687b      	ldr	r3, [r7, #4]
 801eda2:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 801eda4:	68fb      	ldr	r3, [r7, #12]
 801eda6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801edaa:	681b      	ldr	r3, [r3, #0]
 801edac:	68fa      	ldr	r2, [r7, #12]
 801edae:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801edb2:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 801edb6:	f023 0307 	bic.w	r3, r3, #7
 801edba:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 801edbc:	68fb      	ldr	r3, [r7, #12]
 801edbe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801edc2:	685b      	ldr	r3, [r3, #4]
 801edc4:	68fa      	ldr	r2, [r7, #12]
 801edc6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 801edca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 801edce:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 801edd0:	2300      	movs	r3, #0
}
 801edd2:	4618      	mov	r0, r3
 801edd4:	3714      	adds	r7, #20
 801edd6:	46bd      	mov	sp, r7
 801edd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 801eddc:	4770      	bx	lr
	...

0801ede0 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 801ede0:	b480      	push	{r7}
 801ede2:	b087      	sub	sp, #28
 801ede4:	af00      	add	r7, sp, #0
 801ede6:	60f8      	str	r0, [r7, #12]
 801ede8:	460b      	mov	r3, r1
 801edea:	607a      	str	r2, [r7, #4]
 801edec:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801edee:	68fb      	ldr	r3, [r7, #12]
 801edf0:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 801edf2:	68fb      	ldr	r3, [r7, #12]
 801edf4:	333c      	adds	r3, #60	; 0x3c
 801edf6:	3304      	adds	r3, #4
 801edf8:	681b      	ldr	r3, [r3, #0]
 801edfa:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 801edfc:	693b      	ldr	r3, [r7, #16]
 801edfe:	4a26      	ldr	r2, [pc, #152]	; (801ee98 <USB_EP0_OutStart+0xb8>)
 801ee00:	4293      	cmp	r3, r2
 801ee02:	d90a      	bls.n	801ee1a <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 801ee04:	697b      	ldr	r3, [r7, #20]
 801ee06:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801ee0a:	681b      	ldr	r3, [r3, #0]
 801ee0c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 801ee10:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 801ee14:	d101      	bne.n	801ee1a <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 801ee16:	2300      	movs	r3, #0
 801ee18:	e037      	b.n	801ee8a <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 801ee1a:	697b      	ldr	r3, [r7, #20]
 801ee1c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801ee20:	461a      	mov	r2, r3
 801ee22:	2300      	movs	r3, #0
 801ee24:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 801ee26:	697b      	ldr	r3, [r7, #20]
 801ee28:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801ee2c:	691b      	ldr	r3, [r3, #16]
 801ee2e:	697a      	ldr	r2, [r7, #20]
 801ee30:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801ee34:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 801ee38:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 801ee3a:	697b      	ldr	r3, [r7, #20]
 801ee3c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801ee40:	691b      	ldr	r3, [r3, #16]
 801ee42:	697a      	ldr	r2, [r7, #20]
 801ee44:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801ee48:	f043 0318 	orr.w	r3, r3, #24
 801ee4c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 801ee4e:	697b      	ldr	r3, [r7, #20]
 801ee50:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801ee54:	691b      	ldr	r3, [r3, #16]
 801ee56:	697a      	ldr	r2, [r7, #20]
 801ee58:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801ee5c:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 801ee60:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 801ee62:	7afb      	ldrb	r3, [r7, #11]
 801ee64:	2b01      	cmp	r3, #1
 801ee66:	d10f      	bne.n	801ee88 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 801ee68:	697b      	ldr	r3, [r7, #20]
 801ee6a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801ee6e:	461a      	mov	r2, r3
 801ee70:	687b      	ldr	r3, [r7, #4]
 801ee72:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 801ee74:	697b      	ldr	r3, [r7, #20]
 801ee76:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801ee7a:	681b      	ldr	r3, [r3, #0]
 801ee7c:	697a      	ldr	r2, [r7, #20]
 801ee7e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801ee82:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 801ee86:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 801ee88:	2300      	movs	r3, #0
}
 801ee8a:	4618      	mov	r0, r3
 801ee8c:	371c      	adds	r7, #28
 801ee8e:	46bd      	mov	sp, r7
 801ee90:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ee94:	4770      	bx	lr
 801ee96:	bf00      	nop
 801ee98:	4f54300a 	.word	0x4f54300a

0801ee9c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 801ee9c:	b480      	push	{r7}
 801ee9e:	b085      	sub	sp, #20
 801eea0:	af00      	add	r7, sp, #0
 801eea2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 801eea4:	2300      	movs	r3, #0
 801eea6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 801eea8:	68fb      	ldr	r3, [r7, #12]
 801eeaa:	3301      	adds	r3, #1
 801eeac:	60fb      	str	r3, [r7, #12]
 801eeae:	4a13      	ldr	r2, [pc, #76]	; (801eefc <USB_CoreReset+0x60>)
 801eeb0:	4293      	cmp	r3, r2
 801eeb2:	d901      	bls.n	801eeb8 <USB_CoreReset+0x1c>
    {
      return HAL_TIMEOUT;
 801eeb4:	2303      	movs	r3, #3
 801eeb6:	e01a      	b.n	801eeee <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 801eeb8:	687b      	ldr	r3, [r7, #4]
 801eeba:	691b      	ldr	r3, [r3, #16]
 801eebc:	2b00      	cmp	r3, #0
 801eebe:	daf3      	bge.n	801eea8 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 801eec0:	2300      	movs	r3, #0
 801eec2:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 801eec4:	687b      	ldr	r3, [r7, #4]
 801eec6:	691b      	ldr	r3, [r3, #16]
 801eec8:	f043 0201 	orr.w	r2, r3, #1
 801eecc:	687b      	ldr	r3, [r7, #4]
 801eece:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 801eed0:	68fb      	ldr	r3, [r7, #12]
 801eed2:	3301      	adds	r3, #1
 801eed4:	60fb      	str	r3, [r7, #12]
 801eed6:	4a09      	ldr	r2, [pc, #36]	; (801eefc <USB_CoreReset+0x60>)
 801eed8:	4293      	cmp	r3, r2
 801eeda:	d901      	bls.n	801eee0 <USB_CoreReset+0x44>
    {
      return HAL_TIMEOUT;
 801eedc:	2303      	movs	r3, #3
 801eede:	e006      	b.n	801eeee <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 801eee0:	687b      	ldr	r3, [r7, #4]
 801eee2:	691b      	ldr	r3, [r3, #16]
 801eee4:	f003 0301 	and.w	r3, r3, #1
 801eee8:	2b01      	cmp	r3, #1
 801eeea:	d0f1      	beq.n	801eed0 <USB_CoreReset+0x34>

  return HAL_OK;
 801eeec:	2300      	movs	r3, #0
}
 801eeee:	4618      	mov	r0, r3
 801eef0:	3714      	adds	r7, #20
 801eef2:	46bd      	mov	sp, r7
 801eef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 801eef8:	4770      	bx	lr
 801eefa:	bf00      	nop
 801eefc:	00030d40 	.word	0x00030d40

0801ef00 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */
uint8_t workbuf[4096];
/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 801ef00:	b580      	push	{r7, lr}
 801ef02:	b082      	sub	sp, #8
 801ef04:	af02      	add	r7, sp, #8
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 801ef06:	4918      	ldr	r1, [pc, #96]	; (801ef68 <MX_FATFS_Init+0x68>)
 801ef08:	4818      	ldr	r0, [pc, #96]	; (801ef6c <MX_FATFS_Init+0x6c>)
 801ef0a:	f006 f82b 	bl	8024f64 <FATFS_LinkDriver>
 801ef0e:	4603      	mov	r3, r0
 801ef10:	461a      	mov	r2, r3
 801ef12:	4b17      	ldr	r3, [pc, #92]	; (801ef70 <MX_FATFS_Init+0x70>)
 801ef14:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
	if(retUSER == FR_OK)
 801ef16:	4b16      	ldr	r3, [pc, #88]	; (801ef70 <MX_FATFS_Init+0x70>)
 801ef18:	781b      	ldrb	r3, [r3, #0]
 801ef1a:	2b00      	cmp	r3, #0
 801ef1c:	d121      	bne.n	801ef62 <MX_FATFS_Init+0x62>
	{
		retUSER = f_mount(&USERFatFS,(TCHAR const*)USERPath,1) ;
 801ef1e:	2201      	movs	r2, #1
 801ef20:	4911      	ldr	r1, [pc, #68]	; (801ef68 <MX_FATFS_Init+0x68>)
 801ef22:	4814      	ldr	r0, [pc, #80]	; (801ef74 <MX_FATFS_Init+0x74>)
 801ef24:	f004 fe9a 	bl	8023c5c <f_mount>
 801ef28:	4603      	mov	r3, r0
 801ef2a:	461a      	mov	r2, r3
 801ef2c:	4b10      	ldr	r3, [pc, #64]	; (801ef70 <MX_FATFS_Init+0x70>)
 801ef2e:	701a      	strb	r2, [r3, #0]
		if(retUSER != FR_OK)
 801ef30:	4b0f      	ldr	r3, [pc, #60]	; (801ef70 <MX_FATFS_Init+0x70>)
 801ef32:	781b      	ldrb	r3, [r3, #0]
 801ef34:	2b00      	cmp	r3, #0
 801ef36:	d00b      	beq.n	801ef50 <MX_FATFS_Init+0x50>
		{
			retUSER = 2;
 801ef38:	4b0d      	ldr	r3, [pc, #52]	; (801ef70 <MX_FATFS_Init+0x70>)
 801ef3a:	2202      	movs	r2, #2
 801ef3c:	701a      	strb	r2, [r3, #0]
			f_mkfs((TCHAR const*)USERPath, 0, 0,workbuf,4096);
 801ef3e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 801ef42:	9300      	str	r3, [sp, #0]
 801ef44:	4b0c      	ldr	r3, [pc, #48]	; (801ef78 <MX_FATFS_Init+0x78>)
 801ef46:	2200      	movs	r2, #0
 801ef48:	2100      	movs	r1, #0
 801ef4a:	4807      	ldr	r0, [pc, #28]	; (801ef68 <MX_FATFS_Init+0x68>)
 801ef4c:	f005 fb98 	bl	8024680 <f_mkfs>
		}

		retUSER = f_mount(&USERFatFS,"",1) ;
 801ef50:	2201      	movs	r2, #1
 801ef52:	490a      	ldr	r1, [pc, #40]	; (801ef7c <MX_FATFS_Init+0x7c>)
 801ef54:	4807      	ldr	r0, [pc, #28]	; (801ef74 <MX_FATFS_Init+0x74>)
 801ef56:	f004 fe81 	bl	8023c5c <f_mount>
 801ef5a:	4603      	mov	r3, r0
 801ef5c:	461a      	mov	r2, r3
 801ef5e:	4b04      	ldr	r3, [pc, #16]	; (801ef70 <MX_FATFS_Init+0x70>)
 801ef60:	701a      	strb	r2, [r3, #0]
	}

  /* USER CODE END Init */
}
 801ef62:	bf00      	nop
 801ef64:	46bd      	mov	sp, r7
 801ef66:	bd80      	pop	{r7, pc}
 801ef68:	20007a80 	.word	0x20007a80
 801ef6c:	20000570 	.word	0x20000570
 801ef70:	20007a84 	.word	0x20007a84
 801ef74:	20009ab4 	.word	0x20009ab4
 801ef78:	20007a88 	.word	0x20007a88
 801ef7c:	08000ad8 	.word	0x08000ad8

0801ef80 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 801ef80:	b580      	push	{r7, lr}
 801ef82:	b084      	sub	sp, #16
 801ef84:	af00      	add	r7, sp, #0
 801ef86:	4603      	mov	r3, r0
 801ef88:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
    uint8_t state;

	state = W25Qx_Init();
 801ef8a:	f7f8 fda3 	bl	8017ad4 <W25Qx_Init>
 801ef8e:	4603      	mov	r3, r0
 801ef90:	73fb      	strb	r3, [r7, #15]

	if(state != W25Qx_OK)
 801ef92:	7bfb      	ldrb	r3, [r7, #15]
 801ef94:	2b00      	cmp	r3, #0
 801ef96:	d003      	beq.n	801efa0 <USER_initialize+0x20>
		Stat = RES_ERROR;
 801ef98:	4b06      	ldr	r3, [pc, #24]	; (801efb4 <USER_initialize+0x34>)
 801ef9a:	2201      	movs	r2, #1
 801ef9c:	701a      	strb	r2, [r3, #0]
 801ef9e:	e002      	b.n	801efa6 <USER_initialize+0x26>
    else
    	Stat = RES_OK;
 801efa0:	4b04      	ldr	r3, [pc, #16]	; (801efb4 <USER_initialize+0x34>)
 801efa2:	2200      	movs	r2, #0
 801efa4:	701a      	strb	r2, [r3, #0]
    return Stat;
 801efa6:	4b03      	ldr	r3, [pc, #12]	; (801efb4 <USER_initialize+0x34>)
 801efa8:	781b      	ldrb	r3, [r3, #0]
 801efaa:	b2db      	uxtb	r3, r3
  /* USER CODE END INIT */
}
 801efac:	4618      	mov	r0, r3
 801efae:	3710      	adds	r7, #16
 801efb0:	46bd      	mov	sp, r7
 801efb2:	bd80      	pop	{r7, pc}
 801efb4:	2000056d 	.word	0x2000056d

0801efb8 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 801efb8:	b480      	push	{r7}
 801efba:	b083      	sub	sp, #12
 801efbc:	af00      	add	r7, sp, #0
 801efbe:	4603      	mov	r3, r0
 801efc0:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
    Stat = RES_OK;
 801efc2:	4b06      	ldr	r3, [pc, #24]	; (801efdc <USER_status+0x24>)
 801efc4:	2200      	movs	r2, #0
 801efc6:	701a      	strb	r2, [r3, #0]
    return Stat;
 801efc8:	4b04      	ldr	r3, [pc, #16]	; (801efdc <USER_status+0x24>)
 801efca:	781b      	ldrb	r3, [r3, #0]
 801efcc:	b2db      	uxtb	r3, r3
  /* USER CODE END STATUS */
}
 801efce:	4618      	mov	r0, r3
 801efd0:	370c      	adds	r7, #12
 801efd2:	46bd      	mov	sp, r7
 801efd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 801efd8:	4770      	bx	lr
 801efda:	bf00      	nop
 801efdc:	2000056d 	.word	0x2000056d

0801efe0 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 801efe0:	b580      	push	{r7, lr}
 801efe2:	b086      	sub	sp, #24
 801efe4:	af00      	add	r7, sp, #0
 801efe6:	60b9      	str	r1, [r7, #8]
 801efe8:	607a      	str	r2, [r7, #4]
 801efea:	603b      	str	r3, [r7, #0]
 801efec:	4603      	mov	r3, r0
 801efee:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
	UINT i;
	for(i = 0; i < count; i ++)
 801eff0:	2300      	movs	r3, #0
 801eff2:	617b      	str	r3, [r7, #20]
 801eff4:	e017      	b.n	801f026 <USER_read+0x46>
	{
		W25Qx_Read(buff,sector * (W25Qx_Para.SUBSECTOR_SIZE),W25Qx_Para.SUBSECTOR_SIZE);
 801eff6:	4b10      	ldr	r3, [pc, #64]	; (801f038 <USER_read+0x58>)
 801eff8:	899b      	ldrh	r3, [r3, #12]
 801effa:	461a      	mov	r2, r3
 801effc:	687b      	ldr	r3, [r7, #4]
 801effe:	fb03 f302 	mul.w	r3, r3, r2
 801f002:	4a0d      	ldr	r2, [pc, #52]	; (801f038 <USER_read+0x58>)
 801f004:	8992      	ldrh	r2, [r2, #12]
 801f006:	4619      	mov	r1, r3
 801f008:	68b8      	ldr	r0, [r7, #8]
 801f00a:	f7f8 fead 	bl	8017d68 <W25Qx_Read>
		sector ++;
 801f00e:	687b      	ldr	r3, [r7, #4]
 801f010:	3301      	adds	r3, #1
 801f012:	607b      	str	r3, [r7, #4]
		buff += W25Qx_Para.SUBSECTOR_SIZE;
 801f014:	4b08      	ldr	r3, [pc, #32]	; (801f038 <USER_read+0x58>)
 801f016:	899b      	ldrh	r3, [r3, #12]
 801f018:	461a      	mov	r2, r3
 801f01a:	68bb      	ldr	r3, [r7, #8]
 801f01c:	4413      	add	r3, r2
 801f01e:	60bb      	str	r3, [r7, #8]
	for(i = 0; i < count; i ++)
 801f020:	697b      	ldr	r3, [r7, #20]
 801f022:	3301      	adds	r3, #1
 801f024:	617b      	str	r3, [r7, #20]
 801f026:	697a      	ldr	r2, [r7, #20]
 801f028:	683b      	ldr	r3, [r7, #0]
 801f02a:	429a      	cmp	r2, r3
 801f02c:	d3e3      	bcc.n	801eff6 <USER_read+0x16>
	}
    return RES_OK;
 801f02e:	2300      	movs	r3, #0
  /* USER CODE END READ */
}
 801f030:	4618      	mov	r0, r3
 801f032:	3718      	adds	r7, #24
 801f034:	46bd      	mov	sp, r7
 801f036:	bd80      	pop	{r7, pc}
 801f038:	20007a48 	.word	0x20007a48

0801f03c <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 801f03c:	b580      	push	{r7, lr}
 801f03e:	b086      	sub	sp, #24
 801f040:	af00      	add	r7, sp, #0
 801f042:	60b9      	str	r1, [r7, #8]
 801f044:	607a      	str	r2, [r7, #4]
 801f046:	603b      	str	r3, [r7, #0]
 801f048:	4603      	mov	r3, r0
 801f04a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
	UINT i;
	for(i = 0; i < count; i ++)
 801f04c:	2300      	movs	r3, #0
 801f04e:	617b      	str	r3, [r7, #20]
 801f050:	e020      	b.n	801f094 <USER_write+0x58>
	{
		W25Qx_Erase_Block(sector * W25Qx_Para.SUBSECTOR_SIZE);
 801f052:	4b15      	ldr	r3, [pc, #84]	; (801f0a8 <USER_write+0x6c>)
 801f054:	899b      	ldrh	r3, [r3, #12]
 801f056:	461a      	mov	r2, r3
 801f058:	687b      	ldr	r3, [r7, #4]
 801f05a:	fb03 f302 	mul.w	r3, r3, r2
 801f05e:	4618      	mov	r0, r3
 801f060:	f7f8 ff4c 	bl	8017efc <W25Qx_Erase_Block>
		W25Qx_Write((uint8_t*)buff,sector * W25Qx_Para.SUBSECTOR_SIZE,W25Qx_Para.SUBSECTOR_SIZE);
 801f064:	4b10      	ldr	r3, [pc, #64]	; (801f0a8 <USER_write+0x6c>)
 801f066:	899b      	ldrh	r3, [r3, #12]
 801f068:	461a      	mov	r2, r3
 801f06a:	687b      	ldr	r3, [r7, #4]
 801f06c:	fb03 f302 	mul.w	r3, r3, r2
 801f070:	4a0d      	ldr	r2, [pc, #52]	; (801f0a8 <USER_write+0x6c>)
 801f072:	8992      	ldrh	r2, [r2, #12]
 801f074:	4619      	mov	r1, r3
 801f076:	68b8      	ldr	r0, [r7, #8]
 801f078:	f7f8 feb4 	bl	8017de4 <W25Qx_Write>
		sector ++;
 801f07c:	687b      	ldr	r3, [r7, #4]
 801f07e:	3301      	adds	r3, #1
 801f080:	607b      	str	r3, [r7, #4]
		buff += W25Qx_Para.SUBSECTOR_SIZE;
 801f082:	4b09      	ldr	r3, [pc, #36]	; (801f0a8 <USER_write+0x6c>)
 801f084:	899b      	ldrh	r3, [r3, #12]
 801f086:	461a      	mov	r2, r3
 801f088:	68bb      	ldr	r3, [r7, #8]
 801f08a:	4413      	add	r3, r2
 801f08c:	60bb      	str	r3, [r7, #8]
	for(i = 0; i < count; i ++)
 801f08e:	697b      	ldr	r3, [r7, #20]
 801f090:	3301      	adds	r3, #1
 801f092:	617b      	str	r3, [r7, #20]
 801f094:	697a      	ldr	r2, [r7, #20]
 801f096:	683b      	ldr	r3, [r7, #0]
 801f098:	429a      	cmp	r2, r3
 801f09a:	d3da      	bcc.n	801f052 <USER_write+0x16>
	}
    return RES_OK;
 801f09c:	2300      	movs	r3, #0
  /* USER CODE END WRITE */
}
 801f09e:	4618      	mov	r0, r3
 801f0a0:	3718      	adds	r7, #24
 801f0a2:	46bd      	mov	sp, r7
 801f0a4:	bd80      	pop	{r7, pc}
 801f0a6:	bf00      	nop
 801f0a8:	20007a48 	.word	0x20007a48

0801f0ac <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 801f0ac:	b480      	push	{r7}
 801f0ae:	b085      	sub	sp, #20
 801f0b0:	af00      	add	r7, sp, #0
 801f0b2:	4603      	mov	r3, r0
 801f0b4:	603a      	str	r2, [r7, #0]
 801f0b6:	71fb      	strb	r3, [r7, #7]
 801f0b8:	460b      	mov	r3, r1
 801f0ba:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
	   DRESULT res = RES_ERROR;
 801f0bc:	2301      	movs	r3, #1
 801f0be:	73fb      	strb	r3, [r7, #15]
		 switch(cmd)
 801f0c0:	79bb      	ldrb	r3, [r7, #6]
 801f0c2:	2b03      	cmp	r3, #3
 801f0c4:	d822      	bhi.n	801f10c <USER_ioctl+0x60>
 801f0c6:	a201      	add	r2, pc, #4	; (adr r2, 801f0cc <USER_ioctl+0x20>)
 801f0c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801f0cc:	0801f0dd 	.word	0x0801f0dd
 801f0d0:	0801f0ff 	.word	0x0801f0ff
 801f0d4:	0801f0e3 	.word	0x0801f0e3
 801f0d8:	0801f0f1 	.word	0x0801f0f1
		 {
			 case CTRL_SYNC:
				res = RES_OK;
 801f0dc:	2300      	movs	r3, #0
 801f0de:	73fb      	strb	r3, [r7, #15]
				  break;
 801f0e0:	e017      	b.n	801f112 <USER_ioctl+0x66>
			 case GET_SECTOR_SIZE:
				  *(WORD*)buff = W25Qx_Para.SUBSECTOR_SIZE;
 801f0e2:	4b0f      	ldr	r3, [pc, #60]	; (801f120 <USER_ioctl+0x74>)
 801f0e4:	899a      	ldrh	r2, [r3, #12]
 801f0e6:	683b      	ldr	r3, [r7, #0]
 801f0e8:	801a      	strh	r2, [r3, #0]
				  res = RES_OK;
 801f0ea:	2300      	movs	r3, #0
 801f0ec:	73fb      	strb	r3, [r7, #15]
				  break;
 801f0ee:	e010      	b.n	801f112 <USER_ioctl+0x66>
			 case GET_BLOCK_SIZE:
				  *(DWORD*)buff = W25Qx_Para.SECTOR_SIZE;
 801f0f0:	4b0b      	ldr	r3, [pc, #44]	; (801f120 <USER_ioctl+0x74>)
 801f0f2:	685a      	ldr	r2, [r3, #4]
 801f0f4:	683b      	ldr	r3, [r7, #0]
 801f0f6:	601a      	str	r2, [r3, #0]
				  res = RES_OK;
 801f0f8:	2300      	movs	r3, #0
 801f0fa:	73fb      	strb	r3, [r7, #15]
				  break;
 801f0fc:	e009      	b.n	801f112 <USER_ioctl+0x66>
			 case GET_SECTOR_COUNT:
				  *(DWORD*)buff = W25Qx_Para.SUBSECTOR_COUNT;
 801f0fe:	4b08      	ldr	r3, [pc, #32]	; (801f120 <USER_ioctl+0x74>)
 801f100:	689a      	ldr	r2, [r3, #8]
 801f102:	683b      	ldr	r3, [r7, #0]
 801f104:	601a      	str	r2, [r3, #0]
				  res = RES_OK;
 801f106:	2300      	movs	r3, #0
 801f108:	73fb      	strb	r3, [r7, #15]
				  break;
 801f10a:	e002      	b.n	801f112 <USER_ioctl+0x66>
			 default:
				  res = RES_PARERR;
 801f10c:	2304      	movs	r3, #4
 801f10e:	73fb      	strb	r3, [r7, #15]
				  break;
 801f110:	bf00      	nop
		 }
	    return res;
 801f112:	7bfb      	ldrb	r3, [r7, #15]
  /* USER CODE END IOCTL */
}
 801f114:	4618      	mov	r0, r3
 801f116:	3714      	adds	r7, #20
 801f118:	46bd      	mov	sp, r7
 801f11a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f11e:	4770      	bx	lr
 801f120:	20007a48 	.word	0x20007a48

0801f124 <USBD_MSC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
uint8_t USBD_MSC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 801f124:	b580      	push	{r7, lr}
 801f126:	b084      	sub	sp, #16
 801f128:	af00      	add	r7, sp, #0
 801f12a:	6078      	str	r0, [r7, #4]
 801f12c:	460b      	mov	r3, r1
 801f12e:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_MSC_BOT_HandleTypeDef *hmsc;

  hmsc = USBD_malloc(sizeof(USBD_MSC_BOT_HandleTypeDef));
 801f130:	f241 0074 	movw	r0, #4212	; 0x1074
 801f134:	f006 fc8e 	bl	8025a54 <USBD_static_malloc>
 801f138:	60f8      	str	r0, [r7, #12]

  if (hmsc == NULL)
 801f13a:	68fb      	ldr	r3, [r7, #12]
 801f13c:	2b00      	cmp	r3, #0
 801f13e:	d105      	bne.n	801f14c <USBD_MSC_Init+0x28>
  {
    pdev->pClassData = NULL;
 801f140:	687b      	ldr	r3, [r7, #4]
 801f142:	2200      	movs	r2, #0
 801f144:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 801f148:	2302      	movs	r3, #2
 801f14a:	e034      	b.n	801f1b6 <USBD_MSC_Init+0x92>
  }

  pdev->pClassData = (void *)hmsc;
 801f14c:	687b      	ldr	r3, [r7, #4]
 801f14e:	68fa      	ldr	r2, [r7, #12]
 801f150:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 801f154:	687b      	ldr	r3, [r7, #4]
 801f156:	7c1b      	ldrb	r3, [r3, #16]
 801f158:	2b00      	cmp	r3, #0
 801f15a:	d115      	bne.n	801f188 <USBD_MSC_Init+0x64>
  {
    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, MSC_EPOUT_ADDR, USBD_EP_TYPE_BULK, MSC_MAX_HS_PACKET);
 801f15c:	f44f 7300 	mov.w	r3, #512	; 0x200
 801f160:	2202      	movs	r2, #2
 801f162:	2101      	movs	r1, #1
 801f164:	6878      	ldr	r0, [r7, #4]
 801f166:	f006 fae4 	bl	8025732 <USBD_LL_OpenEP>
    pdev->ep_out[MSC_EPOUT_ADDR & 0xFU].is_used = 1U;
 801f16a:	687b      	ldr	r3, [r7, #4]
 801f16c:	2201      	movs	r2, #1
 801f16e:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, MSC_EPIN_ADDR, USBD_EP_TYPE_BULK, MSC_MAX_HS_PACKET);
 801f172:	f44f 7300 	mov.w	r3, #512	; 0x200
 801f176:	2202      	movs	r2, #2
 801f178:	2181      	movs	r1, #129	; 0x81
 801f17a:	6878      	ldr	r0, [r7, #4]
 801f17c:	f006 fad9 	bl	8025732 <USBD_LL_OpenEP>
    pdev->ep_in[MSC_EPIN_ADDR & 0xFU].is_used = 1U;
 801f180:	687b      	ldr	r3, [r7, #4]
 801f182:	2201      	movs	r2, #1
 801f184:	871a      	strh	r2, [r3, #56]	; 0x38
 801f186:	e012      	b.n	801f1ae <USBD_MSC_Init+0x8a>
  }
  else
  {
    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, MSC_EPOUT_ADDR, USBD_EP_TYPE_BULK, MSC_MAX_FS_PACKET);
 801f188:	2340      	movs	r3, #64	; 0x40
 801f18a:	2202      	movs	r2, #2
 801f18c:	2101      	movs	r1, #1
 801f18e:	6878      	ldr	r0, [r7, #4]
 801f190:	f006 facf 	bl	8025732 <USBD_LL_OpenEP>
    pdev->ep_out[MSC_EPOUT_ADDR & 0xFU].is_used = 1U;
 801f194:	687b      	ldr	r3, [r7, #4]
 801f196:	2201      	movs	r2, #1
 801f198:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, MSC_EPIN_ADDR, USBD_EP_TYPE_BULK, MSC_MAX_FS_PACKET);
 801f19c:	2340      	movs	r3, #64	; 0x40
 801f19e:	2202      	movs	r2, #2
 801f1a0:	2181      	movs	r1, #129	; 0x81
 801f1a2:	6878      	ldr	r0, [r7, #4]
 801f1a4:	f006 fac5 	bl	8025732 <USBD_LL_OpenEP>
    pdev->ep_in[MSC_EPIN_ADDR & 0xFU].is_used = 1U;
 801f1a8:	687b      	ldr	r3, [r7, #4]
 801f1aa:	2201      	movs	r2, #1
 801f1ac:	871a      	strh	r2, [r3, #56]	; 0x38
  }

  /* Init the BOT  layer */
  MSC_BOT_Init(pdev);
 801f1ae:	6878      	ldr	r0, [r7, #4]
 801f1b0:	f000 f999 	bl	801f4e6 <MSC_BOT_Init>

  return (uint8_t)USBD_OK;
 801f1b4:	2300      	movs	r3, #0
}
 801f1b6:	4618      	mov	r0, r3
 801f1b8:	3710      	adds	r7, #16
 801f1ba:	46bd      	mov	sp, r7
 801f1bc:	bd80      	pop	{r7, pc}

0801f1be <USBD_MSC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
uint8_t USBD_MSC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 801f1be:	b580      	push	{r7, lr}
 801f1c0:	b082      	sub	sp, #8
 801f1c2:	af00      	add	r7, sp, #0
 801f1c4:	6078      	str	r0, [r7, #4]
 801f1c6:	460b      	mov	r3, r1
 801f1c8:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close MSC EPs */
  (void)USBD_LL_CloseEP(pdev, MSC_EPOUT_ADDR);
 801f1ca:	2101      	movs	r1, #1
 801f1cc:	6878      	ldr	r0, [r7, #4]
 801f1ce:	f006 fad6 	bl	802577e <USBD_LL_CloseEP>
  pdev->ep_out[MSC_EPOUT_ADDR & 0xFU].is_used = 0U;
 801f1d2:	687b      	ldr	r3, [r7, #4]
 801f1d4:	2200      	movs	r2, #0
 801f1d6:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, MSC_EPIN_ADDR);
 801f1da:	2181      	movs	r1, #129	; 0x81
 801f1dc:	6878      	ldr	r0, [r7, #4]
 801f1de:	f006 face 	bl	802577e <USBD_LL_CloseEP>
  pdev->ep_in[MSC_EPIN_ADDR & 0xFU].is_used = 0U;
 801f1e2:	687b      	ldr	r3, [r7, #4]
 801f1e4:	2200      	movs	r2, #0
 801f1e6:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Free MSC Class Resources */
  if (pdev->pClassData != NULL)
 801f1e8:	687b      	ldr	r3, [r7, #4]
 801f1ea:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801f1ee:	2b00      	cmp	r3, #0
 801f1f0:	d00c      	beq.n	801f20c <USBD_MSC_DeInit+0x4e>
  {
    /* De-Init the BOT layer */
    MSC_BOT_DeInit(pdev);
 801f1f2:	6878      	ldr	r0, [r7, #4]
 801f1f4:	f000 f9dc 	bl	801f5b0 <MSC_BOT_DeInit>

    (void)USBD_free(pdev->pClassData);
 801f1f8:	687b      	ldr	r3, [r7, #4]
 801f1fa:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801f1fe:	4618      	mov	r0, r3
 801f200:	f006 fc36 	bl	8025a70 <USBD_static_free>
    pdev->pClassData = NULL;
 801f204:	687b      	ldr	r3, [r7, #4]
 801f206:	2200      	movs	r2, #0
 801f208:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 801f20c:	2300      	movs	r3, #0
}
 801f20e:	4618      	mov	r0, r3
 801f210:	3708      	adds	r7, #8
 801f212:	46bd      	mov	sp, r7
 801f214:	bd80      	pop	{r7, pc}
	...

0801f218 <USBD_MSC_Setup>:
  * @param  pdev: device instance
  * @param  req: USB request
  * @retval status
  */
uint8_t USBD_MSC_Setup(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801f218:	b580      	push	{r7, lr}
 801f21a:	b086      	sub	sp, #24
 801f21c:	af00      	add	r7, sp, #0
 801f21e:	6078      	str	r0, [r7, #4]
 801f220:	6039      	str	r1, [r7, #0]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 801f222:	687b      	ldr	r3, [r7, #4]
 801f224:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801f228:	613b      	str	r3, [r7, #16]
  USBD_StatusTypeDef ret = USBD_OK;
 801f22a:	2300      	movs	r3, #0
 801f22c:	75fb      	strb	r3, [r7, #23]
  uint16_t status_info = 0U;
 801f22e:	2300      	movs	r3, #0
 801f230:	81fb      	strh	r3, [r7, #14]

  if (hmsc == NULL)
 801f232:	693b      	ldr	r3, [r7, #16]
 801f234:	2b00      	cmp	r3, #0
 801f236:	d101      	bne.n	801f23c <USBD_MSC_Setup+0x24>
  {
    return (uint8_t)USBD_FAIL;
 801f238:	2303      	movs	r3, #3
 801f23a:	e0db      	b.n	801f3f4 <USBD_MSC_Setup+0x1dc>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 801f23c:	683b      	ldr	r3, [r7, #0]
 801f23e:	781b      	ldrb	r3, [r3, #0]
 801f240:	f003 0360 	and.w	r3, r3, #96	; 0x60
 801f244:	2b00      	cmp	r3, #0
 801f246:	d04e      	beq.n	801f2e6 <USBD_MSC_Setup+0xce>
 801f248:	2b20      	cmp	r3, #32
 801f24a:	f040 80cb 	bne.w	801f3e4 <USBD_MSC_Setup+0x1cc>
  {
    /* Class request */
    case USB_REQ_TYPE_CLASS:
      switch (req->bRequest)
 801f24e:	683b      	ldr	r3, [r7, #0]
 801f250:	785b      	ldrb	r3, [r3, #1]
 801f252:	2bfe      	cmp	r3, #254	; 0xfe
 801f254:	d002      	beq.n	801f25c <USBD_MSC_Setup+0x44>
 801f256:	2bff      	cmp	r3, #255	; 0xff
 801f258:	d025      	beq.n	801f2a6 <USBD_MSC_Setup+0x8e>
 801f25a:	e03c      	b.n	801f2d6 <USBD_MSC_Setup+0xbe>
      {
        case BOT_GET_MAX_LUN:
          if ((req->wValue  == 0U) && (req->wLength == 1U) &&
 801f25c:	683b      	ldr	r3, [r7, #0]
 801f25e:	885b      	ldrh	r3, [r3, #2]
 801f260:	2b00      	cmp	r3, #0
 801f262:	d119      	bne.n	801f298 <USBD_MSC_Setup+0x80>
 801f264:	683b      	ldr	r3, [r7, #0]
 801f266:	88db      	ldrh	r3, [r3, #6]
 801f268:	2b01      	cmp	r3, #1
 801f26a:	d115      	bne.n	801f298 <USBD_MSC_Setup+0x80>
              ((req->bmRequest & 0x80U) == 0x80U))
 801f26c:	683b      	ldr	r3, [r7, #0]
 801f26e:	781b      	ldrb	r3, [r3, #0]
 801f270:	b25b      	sxtb	r3, r3
          if ((req->wValue  == 0U) && (req->wLength == 1U) &&
 801f272:	2b00      	cmp	r3, #0
 801f274:	da10      	bge.n	801f298 <USBD_MSC_Setup+0x80>
          {
            hmsc->max_lun = (uint32_t)((USBD_StorageTypeDef *)pdev->pUserData)->GetMaxLun();
 801f276:	687b      	ldr	r3, [r7, #4]
 801f278:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 801f27c:	699b      	ldr	r3, [r3, #24]
 801f27e:	4798      	blx	r3
 801f280:	4603      	mov	r3, r0
 801f282:	461a      	mov	r2, r3
 801f284:	693b      	ldr	r3, [r7, #16]
 801f286:	601a      	str	r2, [r3, #0]
            (void)USBD_CtlSendData(pdev, (uint8_t *)&hmsc->max_lun, 1U);
 801f288:	693b      	ldr	r3, [r7, #16]
 801f28a:	2201      	movs	r2, #1
 801f28c:	4619      	mov	r1, r3
 801f28e:	6878      	ldr	r0, [r7, #4]
 801f290:	f002 ff73 	bl	802217a <USBD_CtlSendData>
 801f294:	bf00      	nop
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 801f296:	e025      	b.n	801f2e4 <USBD_MSC_Setup+0xcc>
            USBD_CtlError(pdev, req);
 801f298:	6839      	ldr	r1, [r7, #0]
 801f29a:	6878      	ldr	r0, [r7, #4]
 801f29c:	f002 fefc 	bl	8022098 <USBD_CtlError>
            ret = USBD_FAIL;
 801f2a0:	2303      	movs	r3, #3
 801f2a2:	75fb      	strb	r3, [r7, #23]
          break;
 801f2a4:	e01e      	b.n	801f2e4 <USBD_MSC_Setup+0xcc>

        case BOT_RESET :
          if ((req->wValue  == 0U) && (req->wLength == 0U) &&
 801f2a6:	683b      	ldr	r3, [r7, #0]
 801f2a8:	885b      	ldrh	r3, [r3, #2]
 801f2aa:	2b00      	cmp	r3, #0
 801f2ac:	d10c      	bne.n	801f2c8 <USBD_MSC_Setup+0xb0>
 801f2ae:	683b      	ldr	r3, [r7, #0]
 801f2b0:	88db      	ldrh	r3, [r3, #6]
 801f2b2:	2b00      	cmp	r3, #0
 801f2b4:	d108      	bne.n	801f2c8 <USBD_MSC_Setup+0xb0>
              ((req->bmRequest & 0x80U) != 0x80U))
 801f2b6:	683b      	ldr	r3, [r7, #0]
 801f2b8:	781b      	ldrb	r3, [r3, #0]
 801f2ba:	b25b      	sxtb	r3, r3
          if ((req->wValue  == 0U) && (req->wLength == 0U) &&
 801f2bc:	2b00      	cmp	r3, #0
 801f2be:	db03      	blt.n	801f2c8 <USBD_MSC_Setup+0xb0>
          {
            MSC_BOT_Reset(pdev);
 801f2c0:	6878      	ldr	r0, [r7, #4]
 801f2c2:	f000 f94e 	bl	801f562 <MSC_BOT_Reset>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 801f2c6:	e00d      	b.n	801f2e4 <USBD_MSC_Setup+0xcc>
            USBD_CtlError(pdev, req);
 801f2c8:	6839      	ldr	r1, [r7, #0]
 801f2ca:	6878      	ldr	r0, [r7, #4]
 801f2cc:	f002 fee4 	bl	8022098 <USBD_CtlError>
            ret = USBD_FAIL;
 801f2d0:	2303      	movs	r3, #3
 801f2d2:	75fb      	strb	r3, [r7, #23]
          break;
 801f2d4:	e006      	b.n	801f2e4 <USBD_MSC_Setup+0xcc>

        default:
          USBD_CtlError(pdev, req);
 801f2d6:	6839      	ldr	r1, [r7, #0]
 801f2d8:	6878      	ldr	r0, [r7, #4]
 801f2da:	f002 fedd 	bl	8022098 <USBD_CtlError>
          ret = USBD_FAIL;
 801f2de:	2303      	movs	r3, #3
 801f2e0:	75fb      	strb	r3, [r7, #23]
          break;
 801f2e2:	bf00      	nop
      }
      break;
 801f2e4:	e085      	b.n	801f3f2 <USBD_MSC_Setup+0x1da>
    /* Interface & Endpoint request */
    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 801f2e6:	683b      	ldr	r3, [r7, #0]
 801f2e8:	785b      	ldrb	r3, [r3, #1]
 801f2ea:	2b0b      	cmp	r3, #11
 801f2ec:	d871      	bhi.n	801f3d2 <USBD_MSC_Setup+0x1ba>
 801f2ee:	a201      	add	r2, pc, #4	; (adr r2, 801f2f4 <USBD_MSC_Setup+0xdc>)
 801f2f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801f2f4:	0801f325 	.word	0x0801f325
 801f2f8:	0801f3a1 	.word	0x0801f3a1
 801f2fc:	0801f3d3 	.word	0x0801f3d3
 801f300:	0801f3d3 	.word	0x0801f3d3
 801f304:	0801f3d3 	.word	0x0801f3d3
 801f308:	0801f3d3 	.word	0x0801f3d3
 801f30c:	0801f3d3 	.word	0x0801f3d3
 801f310:	0801f3d3 	.word	0x0801f3d3
 801f314:	0801f3d3 	.word	0x0801f3d3
 801f318:	0801f3d3 	.word	0x0801f3d3
 801f31c:	0801f34f 	.word	0x0801f34f
 801f320:	0801f379 	.word	0x0801f379
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801f324:	687b      	ldr	r3, [r7, #4]
 801f326:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801f32a:	b2db      	uxtb	r3, r3
 801f32c:	2b03      	cmp	r3, #3
 801f32e:	d107      	bne.n	801f340 <USBD_MSC_Setup+0x128>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 801f330:	f107 030e 	add.w	r3, r7, #14
 801f334:	2202      	movs	r2, #2
 801f336:	4619      	mov	r1, r3
 801f338:	6878      	ldr	r0, [r7, #4]
 801f33a:	f002 ff1e 	bl	802217a <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 801f33e:	e050      	b.n	801f3e2 <USBD_MSC_Setup+0x1ca>
            USBD_CtlError(pdev, req);
 801f340:	6839      	ldr	r1, [r7, #0]
 801f342:	6878      	ldr	r0, [r7, #4]
 801f344:	f002 fea8 	bl	8022098 <USBD_CtlError>
            ret = USBD_FAIL;
 801f348:	2303      	movs	r3, #3
 801f34a:	75fb      	strb	r3, [r7, #23]
          break;
 801f34c:	e049      	b.n	801f3e2 <USBD_MSC_Setup+0x1ca>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801f34e:	687b      	ldr	r3, [r7, #4]
 801f350:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801f354:	b2db      	uxtb	r3, r3
 801f356:	2b03      	cmp	r3, #3
 801f358:	d107      	bne.n	801f36a <USBD_MSC_Setup+0x152>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&hmsc->interface, 1U);
 801f35a:	693b      	ldr	r3, [r7, #16]
 801f35c:	3304      	adds	r3, #4
 801f35e:	2201      	movs	r2, #1
 801f360:	4619      	mov	r1, r3
 801f362:	6878      	ldr	r0, [r7, #4]
 801f364:	f002 ff09 	bl	802217a <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 801f368:	e03b      	b.n	801f3e2 <USBD_MSC_Setup+0x1ca>
            USBD_CtlError(pdev, req);
 801f36a:	6839      	ldr	r1, [r7, #0]
 801f36c:	6878      	ldr	r0, [r7, #4]
 801f36e:	f002 fe93 	bl	8022098 <USBD_CtlError>
            ret = USBD_FAIL;
 801f372:	2303      	movs	r3, #3
 801f374:	75fb      	strb	r3, [r7, #23]
          break;
 801f376:	e034      	b.n	801f3e2 <USBD_MSC_Setup+0x1ca>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801f378:	687b      	ldr	r3, [r7, #4]
 801f37a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801f37e:	b2db      	uxtb	r3, r3
 801f380:	2b03      	cmp	r3, #3
 801f382:	d106      	bne.n	801f392 <USBD_MSC_Setup+0x17a>
          {
            hmsc->interface = (uint8_t)(req->wValue);
 801f384:	683b      	ldr	r3, [r7, #0]
 801f386:	885b      	ldrh	r3, [r3, #2]
 801f388:	b2db      	uxtb	r3, r3
 801f38a:	461a      	mov	r2, r3
 801f38c:	693b      	ldr	r3, [r7, #16]
 801f38e:	605a      	str	r2, [r3, #4]
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 801f390:	e027      	b.n	801f3e2 <USBD_MSC_Setup+0x1ca>
            USBD_CtlError(pdev, req);
 801f392:	6839      	ldr	r1, [r7, #0]
 801f394:	6878      	ldr	r0, [r7, #4]
 801f396:	f002 fe7f 	bl	8022098 <USBD_CtlError>
            ret = USBD_FAIL;
 801f39a:	2303      	movs	r3, #3
 801f39c:	75fb      	strb	r3, [r7, #23]
          break;
 801f39e:	e020      	b.n	801f3e2 <USBD_MSC_Setup+0x1ca>

        case USB_REQ_CLEAR_FEATURE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801f3a0:	687b      	ldr	r3, [r7, #4]
 801f3a2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801f3a6:	b2db      	uxtb	r3, r3
 801f3a8:	2b03      	cmp	r3, #3
 801f3aa:	d119      	bne.n	801f3e0 <USBD_MSC_Setup+0x1c8>
          {
            if (req->wValue == USB_FEATURE_EP_HALT)
 801f3ac:	683b      	ldr	r3, [r7, #0]
 801f3ae:	885b      	ldrh	r3, [r3, #2]
 801f3b0:	2b00      	cmp	r3, #0
 801f3b2:	d115      	bne.n	801f3e0 <USBD_MSC_Setup+0x1c8>
            {
              /* Flush the FIFO */
              (void)USBD_LL_FlushEP(pdev, (uint8_t)req->wIndex);
 801f3b4:	683b      	ldr	r3, [r7, #0]
 801f3b6:	889b      	ldrh	r3, [r3, #4]
 801f3b8:	b2db      	uxtb	r3, r3
 801f3ba:	4619      	mov	r1, r3
 801f3bc:	6878      	ldr	r0, [r7, #4]
 801f3be:	f006 f9fd 	bl	80257bc <USBD_LL_FlushEP>

              /* Handle BOT error */
              MSC_BOT_CplClrFeature(pdev, (uint8_t)req->wIndex);
 801f3c2:	683b      	ldr	r3, [r7, #0]
 801f3c4:	889b      	ldrh	r3, [r3, #4]
 801f3c6:	b2db      	uxtb	r3, r3
 801f3c8:	4619      	mov	r1, r3
 801f3ca:	6878      	ldr	r0, [r7, #4]
 801f3cc:	f000 fab6 	bl	801f93c <MSC_BOT_CplClrFeature>
            }
          }
          break;
 801f3d0:	e006      	b.n	801f3e0 <USBD_MSC_Setup+0x1c8>

        default:
          USBD_CtlError(pdev, req);
 801f3d2:	6839      	ldr	r1, [r7, #0]
 801f3d4:	6878      	ldr	r0, [r7, #4]
 801f3d6:	f002 fe5f 	bl	8022098 <USBD_CtlError>
          ret = USBD_FAIL;
 801f3da:	2303      	movs	r3, #3
 801f3dc:	75fb      	strb	r3, [r7, #23]
          break;
 801f3de:	e000      	b.n	801f3e2 <USBD_MSC_Setup+0x1ca>
          break;
 801f3e0:	bf00      	nop
      }
      break;
 801f3e2:	e006      	b.n	801f3f2 <USBD_MSC_Setup+0x1da>

    default:
      USBD_CtlError(pdev, req);
 801f3e4:	6839      	ldr	r1, [r7, #0]
 801f3e6:	6878      	ldr	r0, [r7, #4]
 801f3e8:	f002 fe56 	bl	8022098 <USBD_CtlError>
      ret = USBD_FAIL;
 801f3ec:	2303      	movs	r3, #3
 801f3ee:	75fb      	strb	r3, [r7, #23]
      break;
 801f3f0:	bf00      	nop
  }

  return (uint8_t)ret;
 801f3f2:	7dfb      	ldrb	r3, [r7, #23]
}
 801f3f4:	4618      	mov	r0, r3
 801f3f6:	3718      	adds	r7, #24
 801f3f8:	46bd      	mov	sp, r7
 801f3fa:	bd80      	pop	{r7, pc}

0801f3fc <USBD_MSC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
uint8_t USBD_MSC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 801f3fc:	b580      	push	{r7, lr}
 801f3fe:	b082      	sub	sp, #8
 801f400:	af00      	add	r7, sp, #0
 801f402:	6078      	str	r0, [r7, #4]
 801f404:	460b      	mov	r3, r1
 801f406:	70fb      	strb	r3, [r7, #3]
  MSC_BOT_DataIn(pdev, epnum);
 801f408:	78fb      	ldrb	r3, [r7, #3]
 801f40a:	4619      	mov	r1, r3
 801f40c:	6878      	ldr	r0, [r7, #4]
 801f40e:	f000 f8e3 	bl	801f5d8 <MSC_BOT_DataIn>

  return (uint8_t)USBD_OK;
 801f412:	2300      	movs	r3, #0
}
 801f414:	4618      	mov	r0, r3
 801f416:	3708      	adds	r7, #8
 801f418:	46bd      	mov	sp, r7
 801f41a:	bd80      	pop	{r7, pc}

0801f41c <USBD_MSC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
uint8_t USBD_MSC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 801f41c:	b580      	push	{r7, lr}
 801f41e:	b082      	sub	sp, #8
 801f420:	af00      	add	r7, sp, #0
 801f422:	6078      	str	r0, [r7, #4]
 801f424:	460b      	mov	r3, r1
 801f426:	70fb      	strb	r3, [r7, #3]
  MSC_BOT_DataOut(pdev, epnum);
 801f428:	78fb      	ldrb	r3, [r7, #3]
 801f42a:	4619      	mov	r1, r3
 801f42c:	6878      	ldr	r0, [r7, #4]
 801f42e:	f000 f90c 	bl	801f64a <MSC_BOT_DataOut>

  return (uint8_t)USBD_OK;
 801f432:	2300      	movs	r3, #0
}
 801f434:	4618      	mov	r0, r3
 801f436:	3708      	adds	r7, #8
 801f438:	46bd      	mov	sp, r7
 801f43a:	bd80      	pop	{r7, pc}

0801f43c <USBD_MSC_GetHSCfgDesc>:
  *         return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_MSC_GetHSCfgDesc(uint16_t *length)
{
 801f43c:	b480      	push	{r7}
 801f43e:	b083      	sub	sp, #12
 801f440:	af00      	add	r7, sp, #0
 801f442:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_MSC_CfgHSDesc);
 801f444:	687b      	ldr	r3, [r7, #4]
 801f446:	2220      	movs	r2, #32
 801f448:	801a      	strh	r2, [r3, #0]

  return USBD_MSC_CfgHSDesc;
 801f44a:	4b03      	ldr	r3, [pc, #12]	; (801f458 <USBD_MSC_GetHSCfgDesc+0x1c>)
}
 801f44c:	4618      	mov	r0, r3
 801f44e:	370c      	adds	r7, #12
 801f450:	46bd      	mov	sp, r7
 801f452:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f456:	4770      	bx	lr
 801f458:	200005bc 	.word	0x200005bc

0801f45c <USBD_MSC_GetFSCfgDesc>:
  *         return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_MSC_GetFSCfgDesc(uint16_t *length)
{
 801f45c:	b480      	push	{r7}
 801f45e:	b083      	sub	sp, #12
 801f460:	af00      	add	r7, sp, #0
 801f462:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_MSC_CfgFSDesc);
 801f464:	687b      	ldr	r3, [r7, #4]
 801f466:	2220      	movs	r2, #32
 801f468:	801a      	strh	r2, [r3, #0]

  return USBD_MSC_CfgFSDesc;
 801f46a:	4b03      	ldr	r3, [pc, #12]	; (801f478 <USBD_MSC_GetFSCfgDesc+0x1c>)
}
 801f46c:	4618      	mov	r0, r3
 801f46e:	370c      	adds	r7, #12
 801f470:	46bd      	mov	sp, r7
 801f472:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f476:	4770      	bx	lr
 801f478:	200005dc 	.word	0x200005dc

0801f47c <USBD_MSC_GetOtherSpeedCfgDesc>:
  *         return other speed configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_MSC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 801f47c:	b480      	push	{r7}
 801f47e:	b083      	sub	sp, #12
 801f480:	af00      	add	r7, sp, #0
 801f482:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_MSC_OtherSpeedCfgDesc);
 801f484:	687b      	ldr	r3, [r7, #4]
 801f486:	2220      	movs	r2, #32
 801f488:	801a      	strh	r2, [r3, #0]

  return USBD_MSC_OtherSpeedCfgDesc;
 801f48a:	4b03      	ldr	r3, [pc, #12]	; (801f498 <USBD_MSC_GetOtherSpeedCfgDesc+0x1c>)
}
 801f48c:	4618      	mov	r0, r3
 801f48e:	370c      	adds	r7, #12
 801f490:	46bd      	mov	sp, r7
 801f492:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f496:	4770      	bx	lr
 801f498:	200005fc 	.word	0x200005fc

0801f49c <USBD_MSC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_MSC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 801f49c:	b480      	push	{r7}
 801f49e:	b083      	sub	sp, #12
 801f4a0:	af00      	add	r7, sp, #0
 801f4a2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_MSC_DeviceQualifierDesc);
 801f4a4:	687b      	ldr	r3, [r7, #4]
 801f4a6:	220a      	movs	r2, #10
 801f4a8:	801a      	strh	r2, [r3, #0]

  return USBD_MSC_DeviceQualifierDesc;
 801f4aa:	4b03      	ldr	r3, [pc, #12]	; (801f4b8 <USBD_MSC_GetDeviceQualifierDescriptor+0x1c>)
}
 801f4ac:	4618      	mov	r0, r3
 801f4ae:	370c      	adds	r7, #12
 801f4b0:	46bd      	mov	sp, r7
 801f4b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f4b6:	4770      	bx	lr
 801f4b8:	2000061c 	.word	0x2000061c

0801f4bc <USBD_MSC_RegisterStorage>:
  * @brief  USBD_MSC_RegisterStorage
  * @param  fops: storage callback
  * @retval status
  */
uint8_t USBD_MSC_RegisterStorage(USBD_HandleTypeDef *pdev, USBD_StorageTypeDef *fops)
{
 801f4bc:	b480      	push	{r7}
 801f4be:	b083      	sub	sp, #12
 801f4c0:	af00      	add	r7, sp, #0
 801f4c2:	6078      	str	r0, [r7, #4]
 801f4c4:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 801f4c6:	683b      	ldr	r3, [r7, #0]
 801f4c8:	2b00      	cmp	r3, #0
 801f4ca:	d101      	bne.n	801f4d0 <USBD_MSC_RegisterStorage+0x14>
  {
    return (uint8_t)USBD_FAIL;
 801f4cc:	2303      	movs	r3, #3
 801f4ce:	e004      	b.n	801f4da <USBD_MSC_RegisterStorage+0x1e>
  }

  pdev->pUserData = fops;
 801f4d0:	687b      	ldr	r3, [r7, #4]
 801f4d2:	683a      	ldr	r2, [r7, #0]
 801f4d4:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 801f4d8:	2300      	movs	r3, #0
}
 801f4da:	4618      	mov	r0, r3
 801f4dc:	370c      	adds	r7, #12
 801f4de:	46bd      	mov	sp, r7
 801f4e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f4e4:	4770      	bx	lr

0801f4e6 <MSC_BOT_Init>:
  *         Initialize the BOT Process
  * @param  pdev: device instance
  * @retval None
  */
void MSC_BOT_Init(USBD_HandleTypeDef *pdev)
{
 801f4e6:	b580      	push	{r7, lr}
 801f4e8:	b084      	sub	sp, #16
 801f4ea:	af00      	add	r7, sp, #0
 801f4ec:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 801f4ee:	687b      	ldr	r3, [r7, #4]
 801f4f0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801f4f4:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 801f4f6:	68fb      	ldr	r3, [r7, #12]
 801f4f8:	2b00      	cmp	r3, #0
 801f4fa:	d02e      	beq.n	801f55a <MSC_BOT_Init+0x74>
  {
    return;
  }

  hmsc->bot_state = USBD_BOT_IDLE;
 801f4fc:	68fb      	ldr	r3, [r7, #12]
 801f4fe:	2200      	movs	r2, #0
 801f500:	721a      	strb	r2, [r3, #8]
  hmsc->bot_status = USBD_BOT_STATUS_NORMAL;
 801f502:	68fb      	ldr	r3, [r7, #12]
 801f504:	2200      	movs	r2, #0
 801f506:	725a      	strb	r2, [r3, #9]

  hmsc->scsi_sense_tail = 0U;
 801f508:	68fb      	ldr	r3, [r7, #12]
 801f50a:	f503 5383 	add.w	r3, r3, #4192	; 0x1060
 801f50e:	3301      	adds	r3, #1
 801f510:	2200      	movs	r2, #0
 801f512:	701a      	strb	r2, [r3, #0]
  hmsc->scsi_sense_head = 0U;
 801f514:	68fb      	ldr	r3, [r7, #12]
 801f516:	f503 5383 	add.w	r3, r3, #4192	; 0x1060
 801f51a:	2200      	movs	r2, #0
 801f51c:	701a      	strb	r2, [r3, #0]
  hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 801f51e:	68fb      	ldr	r3, [r7, #12]
 801f520:	f503 5383 	add.w	r3, r3, #4192	; 0x1060
 801f524:	3302      	adds	r3, #2
 801f526:	2200      	movs	r2, #0
 801f528:	701a      	strb	r2, [r3, #0]

  ((USBD_StorageTypeDef *)pdev->pUserData)->Init(0U);
 801f52a:	687b      	ldr	r3, [r7, #4]
 801f52c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 801f530:	681b      	ldr	r3, [r3, #0]
 801f532:	2000      	movs	r0, #0
 801f534:	4798      	blx	r3

  (void)USBD_LL_FlushEP(pdev, MSC_EPOUT_ADDR);
 801f536:	2101      	movs	r1, #1
 801f538:	6878      	ldr	r0, [r7, #4]
 801f53a:	f006 f93f 	bl	80257bc <USBD_LL_FlushEP>
  (void)USBD_LL_FlushEP(pdev, MSC_EPIN_ADDR);
 801f53e:	2181      	movs	r1, #129	; 0x81
 801f540:	6878      	ldr	r0, [r7, #4]
 801f542:	f006 f93b 	bl	80257bc <USBD_LL_FlushEP>

  /* Prepare EP to Receive First BOT Cmd */
  (void)USBD_LL_PrepareReceive(pdev, MSC_EPOUT_ADDR, (uint8_t *)&hmsc->cbw,
 801f546:	68fb      	ldr	r3, [r7, #12]
 801f548:	f503 5280 	add.w	r2, r3, #4096	; 0x1000
 801f54c:	3210      	adds	r2, #16
 801f54e:	231f      	movs	r3, #31
 801f550:	2101      	movs	r1, #1
 801f552:	6878      	ldr	r0, [r7, #4]
 801f554:	f006 f9fb 	bl	802594e <USBD_LL_PrepareReceive>
 801f558:	e000      	b.n	801f55c <MSC_BOT_Init+0x76>
    return;
 801f55a:	bf00      	nop
                               USBD_BOT_CBW_LENGTH);
}
 801f55c:	3710      	adds	r7, #16
 801f55e:	46bd      	mov	sp, r7
 801f560:	bd80      	pop	{r7, pc}

0801f562 <MSC_BOT_Reset>:
  *         Reset the BOT Machine
  * @param  pdev: device instance
  * @retval  None
  */
void MSC_BOT_Reset(USBD_HandleTypeDef *pdev)
{
 801f562:	b580      	push	{r7, lr}
 801f564:	b084      	sub	sp, #16
 801f566:	af00      	add	r7, sp, #0
 801f568:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 801f56a:	687b      	ldr	r3, [r7, #4]
 801f56c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801f570:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 801f572:	68fb      	ldr	r3, [r7, #12]
 801f574:	2b00      	cmp	r3, #0
 801f576:	d017      	beq.n	801f5a8 <MSC_BOT_Reset+0x46>
  {
    return;
  }

  hmsc->bot_state  = USBD_BOT_IDLE;
 801f578:	68fb      	ldr	r3, [r7, #12]
 801f57a:	2200      	movs	r2, #0
 801f57c:	721a      	strb	r2, [r3, #8]
  hmsc->bot_status = USBD_BOT_STATUS_RECOVERY;
 801f57e:	68fb      	ldr	r3, [r7, #12]
 801f580:	2201      	movs	r2, #1
 801f582:	725a      	strb	r2, [r3, #9]

  (void)USBD_LL_ClearStallEP(pdev, MSC_EPIN_ADDR);
 801f584:	2181      	movs	r1, #129	; 0x81
 801f586:	6878      	ldr	r0, [r7, #4]
 801f588:	f006 f956 	bl	8025838 <USBD_LL_ClearStallEP>
  (void)USBD_LL_ClearStallEP(pdev, MSC_EPOUT_ADDR);
 801f58c:	2101      	movs	r1, #1
 801f58e:	6878      	ldr	r0, [r7, #4]
 801f590:	f006 f952 	bl	8025838 <USBD_LL_ClearStallEP>

  /* Prepare EP to Receive First BOT Cmd */
  (void)USBD_LL_PrepareReceive(pdev, MSC_EPOUT_ADDR, (uint8_t *)&hmsc->cbw,
 801f594:	68fb      	ldr	r3, [r7, #12]
 801f596:	f503 5280 	add.w	r2, r3, #4096	; 0x1000
 801f59a:	3210      	adds	r2, #16
 801f59c:	231f      	movs	r3, #31
 801f59e:	2101      	movs	r1, #1
 801f5a0:	6878      	ldr	r0, [r7, #4]
 801f5a2:	f006 f9d4 	bl	802594e <USBD_LL_PrepareReceive>
 801f5a6:	e000      	b.n	801f5aa <MSC_BOT_Reset+0x48>
    return;
 801f5a8:	bf00      	nop
                               USBD_BOT_CBW_LENGTH);
}
 801f5aa:	3710      	adds	r7, #16
 801f5ac:	46bd      	mov	sp, r7
 801f5ae:	bd80      	pop	{r7, pc}

0801f5b0 <MSC_BOT_DeInit>:
  *         DeInitialize the BOT Machine
  * @param  pdev: device instance
  * @retval None
  */
void MSC_BOT_DeInit(USBD_HandleTypeDef  *pdev)
{
 801f5b0:	b480      	push	{r7}
 801f5b2:	b085      	sub	sp, #20
 801f5b4:	af00      	add	r7, sp, #0
 801f5b6:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 801f5b8:	687b      	ldr	r3, [r7, #4]
 801f5ba:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801f5be:	60fb      	str	r3, [r7, #12]

  if (hmsc != NULL)
 801f5c0:	68fb      	ldr	r3, [r7, #12]
 801f5c2:	2b00      	cmp	r3, #0
 801f5c4:	d002      	beq.n	801f5cc <MSC_BOT_DeInit+0x1c>
  {
    hmsc->bot_state = USBD_BOT_IDLE;
 801f5c6:	68fb      	ldr	r3, [r7, #12]
 801f5c8:	2200      	movs	r2, #0
 801f5ca:	721a      	strb	r2, [r3, #8]
  }
}
 801f5cc:	bf00      	nop
 801f5ce:	3714      	adds	r7, #20
 801f5d0:	46bd      	mov	sp, r7
 801f5d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f5d6:	4770      	bx	lr

0801f5d8 <MSC_BOT_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval None
  */
void MSC_BOT_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 801f5d8:	b580      	push	{r7, lr}
 801f5da:	b084      	sub	sp, #16
 801f5dc:	af00      	add	r7, sp, #0
 801f5de:	6078      	str	r0, [r7, #4]
 801f5e0:	460b      	mov	r3, r1
 801f5e2:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 801f5e4:	687b      	ldr	r3, [r7, #4]
 801f5e6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801f5ea:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 801f5ec:	68fb      	ldr	r3, [r7, #12]
 801f5ee:	2b00      	cmp	r3, #0
 801f5f0:	d023      	beq.n	801f63a <MSC_BOT_DataIn+0x62>
  {
    return;
  }

  switch (hmsc->bot_state)
 801f5f2:	68fb      	ldr	r3, [r7, #12]
 801f5f4:	7a1b      	ldrb	r3, [r3, #8]
 801f5f6:	2b02      	cmp	r3, #2
 801f5f8:	d005      	beq.n	801f606 <MSC_BOT_DataIn+0x2e>
 801f5fa:	2b02      	cmp	r3, #2
 801f5fc:	db1f      	blt.n	801f63e <MSC_BOT_DataIn+0x66>
 801f5fe:	3b03      	subs	r3, #3
 801f600:	2b01      	cmp	r3, #1
 801f602:	d81c      	bhi.n	801f63e <MSC_BOT_DataIn+0x66>
 801f604:	e014      	b.n	801f630 <MSC_BOT_DataIn+0x58>
  {
    case USBD_BOT_DATA_IN:
      if (SCSI_ProcessCmd(pdev, hmsc->cbw.bLUN, &hmsc->cbw.CB[0]) < 0)
 801f606:	68fb      	ldr	r3, [r7, #12]
 801f608:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801f60c:	331d      	adds	r3, #29
 801f60e:	7819      	ldrb	r1, [r3, #0]
 801f610:	68fb      	ldr	r3, [r7, #12]
 801f612:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801f616:	331f      	adds	r3, #31
 801f618:	461a      	mov	r2, r3
 801f61a:	6878      	ldr	r0, [r7, #4]
 801f61c:	f000 f9bc 	bl	801f998 <SCSI_ProcessCmd>
 801f620:	4603      	mov	r3, r0
 801f622:	2b00      	cmp	r3, #0
 801f624:	da0d      	bge.n	801f642 <MSC_BOT_DataIn+0x6a>
      {
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 801f626:	2101      	movs	r1, #1
 801f628:	6878      	ldr	r0, [r7, #4]
 801f62a:	f000 f91b 	bl	801f864 <MSC_BOT_SendCSW>
      }
      break;
 801f62e:	e008      	b.n	801f642 <MSC_BOT_DataIn+0x6a>

    case USBD_BOT_SEND_DATA:
    case USBD_BOT_LAST_DATA_IN:
      MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_PASSED);
 801f630:	2100      	movs	r1, #0
 801f632:	6878      	ldr	r0, [r7, #4]
 801f634:	f000 f916 	bl	801f864 <MSC_BOT_SendCSW>
      break;
 801f638:	e004      	b.n	801f644 <MSC_BOT_DataIn+0x6c>
    return;
 801f63a:	bf00      	nop
 801f63c:	e002      	b.n	801f644 <MSC_BOT_DataIn+0x6c>

    default:
      break;
 801f63e:	bf00      	nop
 801f640:	e000      	b.n	801f644 <MSC_BOT_DataIn+0x6c>
      break;
 801f642:	bf00      	nop
  }
}
 801f644:	3710      	adds	r7, #16
 801f646:	46bd      	mov	sp, r7
 801f648:	bd80      	pop	{r7, pc}

0801f64a <MSC_BOT_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval None
  */
void MSC_BOT_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 801f64a:	b580      	push	{r7, lr}
 801f64c:	b084      	sub	sp, #16
 801f64e:	af00      	add	r7, sp, #0
 801f650:	6078      	str	r0, [r7, #4]
 801f652:	460b      	mov	r3, r1
 801f654:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 801f656:	687b      	ldr	r3, [r7, #4]
 801f658:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801f65c:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 801f65e:	68fb      	ldr	r3, [r7, #12]
 801f660:	2b00      	cmp	r3, #0
 801f662:	d01f      	beq.n	801f6a4 <MSC_BOT_DataOut+0x5a>
  {
    return;
  }

  switch (hmsc->bot_state)
 801f664:	68fb      	ldr	r3, [r7, #12]
 801f666:	7a1b      	ldrb	r3, [r3, #8]
 801f668:	2b00      	cmp	r3, #0
 801f66a:	d002      	beq.n	801f672 <MSC_BOT_DataOut+0x28>
 801f66c:	2b01      	cmp	r3, #1
 801f66e:	d004      	beq.n	801f67a <MSC_BOT_DataOut+0x30>
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
      }
      break;

    default:
      break;
 801f670:	e01b      	b.n	801f6aa <MSC_BOT_DataOut+0x60>
      MSC_BOT_CBW_Decode(pdev);
 801f672:	6878      	ldr	r0, [r7, #4]
 801f674:	f000 f81c 	bl	801f6b0 <MSC_BOT_CBW_Decode>
      break;
 801f678:	e017      	b.n	801f6aa <MSC_BOT_DataOut+0x60>
      if (SCSI_ProcessCmd(pdev, hmsc->cbw.bLUN, &hmsc->cbw.CB[0]) < 0)
 801f67a:	68fb      	ldr	r3, [r7, #12]
 801f67c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801f680:	331d      	adds	r3, #29
 801f682:	7819      	ldrb	r1, [r3, #0]
 801f684:	68fb      	ldr	r3, [r7, #12]
 801f686:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801f68a:	331f      	adds	r3, #31
 801f68c:	461a      	mov	r2, r3
 801f68e:	6878      	ldr	r0, [r7, #4]
 801f690:	f000 f982 	bl	801f998 <SCSI_ProcessCmd>
 801f694:	4603      	mov	r3, r0
 801f696:	2b00      	cmp	r3, #0
 801f698:	da06      	bge.n	801f6a8 <MSC_BOT_DataOut+0x5e>
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 801f69a:	2101      	movs	r1, #1
 801f69c:	6878      	ldr	r0, [r7, #4]
 801f69e:	f000 f8e1 	bl	801f864 <MSC_BOT_SendCSW>
      break;
 801f6a2:	e001      	b.n	801f6a8 <MSC_BOT_DataOut+0x5e>
    return;
 801f6a4:	bf00      	nop
 801f6a6:	e000      	b.n	801f6aa <MSC_BOT_DataOut+0x60>
      break;
 801f6a8:	bf00      	nop
  }
}
 801f6aa:	3710      	adds	r7, #16
 801f6ac:	46bd      	mov	sp, r7
 801f6ae:	bd80      	pop	{r7, pc}

0801f6b0 <MSC_BOT_CBW_Decode>:
  *         Decode the CBW command and set the BOT state machine accordingly
  * @param  pdev: device instance
  * @retval None
  */
static void  MSC_BOT_CBW_Decode(USBD_HandleTypeDef *pdev)
{
 801f6b0:	b580      	push	{r7, lr}
 801f6b2:	b084      	sub	sp, #16
 801f6b4:	af00      	add	r7, sp, #0
 801f6b6:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 801f6b8:	687b      	ldr	r3, [r7, #4]
 801f6ba:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801f6be:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 801f6c0:	68fb      	ldr	r3, [r7, #12]
 801f6c2:	2b00      	cmp	r3, #0
 801f6c4:	f000 808d 	beq.w	801f7e2 <MSC_BOT_CBW_Decode+0x132>
  {
    return;
  }

  hmsc->csw.dTag = hmsc->cbw.dTag;
 801f6c8:	68fb      	ldr	r3, [r7, #12]
 801f6ca:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801f6ce:	3314      	adds	r3, #20
 801f6d0:	681a      	ldr	r2, [r3, #0]
 801f6d2:	68fb      	ldr	r3, [r7, #12]
 801f6d4:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 801f6d8:	3314      	adds	r3, #20
 801f6da:	601a      	str	r2, [r3, #0]
  hmsc->csw.dDataResidue = hmsc->cbw.dDataLength;
 801f6dc:	68fb      	ldr	r3, [r7, #12]
 801f6de:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801f6e2:	3318      	adds	r3, #24
 801f6e4:	681a      	ldr	r2, [r3, #0]
 801f6e6:	68fb      	ldr	r3, [r7, #12]
 801f6e8:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 801f6ec:	3318      	adds	r3, #24
 801f6ee:	601a      	str	r2, [r3, #0]

  if ((USBD_LL_GetRxDataSize(pdev, MSC_EPOUT_ADDR) != USBD_BOT_CBW_LENGTH) ||
 801f6f0:	2101      	movs	r1, #1
 801f6f2:	6878      	ldr	r0, [r7, #4]
 801f6f4:	f006 f94c 	bl	8025990 <USBD_LL_GetRxDataSize>
 801f6f8:	4603      	mov	r3, r0
 801f6fa:	2b1f      	cmp	r3, #31
 801f6fc:	d11c      	bne.n	801f738 <MSC_BOT_CBW_Decode+0x88>
      (hmsc->cbw.dSignature != USBD_BOT_CBW_SIGNATURE) ||
 801f6fe:	68fb      	ldr	r3, [r7, #12]
 801f700:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801f704:	3310      	adds	r3, #16
 801f706:	681b      	ldr	r3, [r3, #0]
  if ((USBD_LL_GetRxDataSize(pdev, MSC_EPOUT_ADDR) != USBD_BOT_CBW_LENGTH) ||
 801f708:	4a39      	ldr	r2, [pc, #228]	; (801f7f0 <MSC_BOT_CBW_Decode+0x140>)
 801f70a:	4293      	cmp	r3, r2
 801f70c:	d114      	bne.n	801f738 <MSC_BOT_CBW_Decode+0x88>
      (hmsc->cbw.bLUN > 1U) || (hmsc->cbw.bCBLength < 1U) ||
 801f70e:	68fb      	ldr	r3, [r7, #12]
 801f710:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801f714:	331d      	adds	r3, #29
 801f716:	781b      	ldrb	r3, [r3, #0]
      (hmsc->cbw.dSignature != USBD_BOT_CBW_SIGNATURE) ||
 801f718:	2b01      	cmp	r3, #1
 801f71a:	d80d      	bhi.n	801f738 <MSC_BOT_CBW_Decode+0x88>
      (hmsc->cbw.bLUN > 1U) || (hmsc->cbw.bCBLength < 1U) ||
 801f71c:	68fb      	ldr	r3, [r7, #12]
 801f71e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801f722:	331e      	adds	r3, #30
 801f724:	781b      	ldrb	r3, [r3, #0]
 801f726:	2b00      	cmp	r3, #0
 801f728:	d006      	beq.n	801f738 <MSC_BOT_CBW_Decode+0x88>
      (hmsc->cbw.bCBLength > 16U))
 801f72a:	68fb      	ldr	r3, [r7, #12]
 801f72c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801f730:	331e      	adds	r3, #30
 801f732:	781b      	ldrb	r3, [r3, #0]
      (hmsc->cbw.bLUN > 1U) || (hmsc->cbw.bCBLength < 1U) ||
 801f734:	2b10      	cmp	r3, #16
 801f736:	d910      	bls.n	801f75a <MSC_BOT_CBW_Decode+0xaa>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 801f738:	68fb      	ldr	r3, [r7, #12]
 801f73a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801f73e:	331d      	adds	r3, #29
 801f740:	7819      	ldrb	r1, [r3, #0]
 801f742:	2320      	movs	r3, #32
 801f744:	2205      	movs	r2, #5
 801f746:	6878      	ldr	r0, [r7, #4]
 801f748:	f000 fe1a 	bl	8020380 <SCSI_SenseCode>

    hmsc->bot_status = USBD_BOT_STATUS_ERROR;
 801f74c:	68fb      	ldr	r3, [r7, #12]
 801f74e:	2202      	movs	r2, #2
 801f750:	725a      	strb	r2, [r3, #9]
    MSC_BOT_Abort(pdev);
 801f752:	6878      	ldr	r0, [r7, #4]
 801f754:	f000 f8bc 	bl	801f8d0 <MSC_BOT_Abort>
 801f758:	e046      	b.n	801f7e8 <MSC_BOT_CBW_Decode+0x138>
  }
  else
  {
    if (SCSI_ProcessCmd(pdev, hmsc->cbw.bLUN, &hmsc->cbw.CB[0]) < 0)
 801f75a:	68fb      	ldr	r3, [r7, #12]
 801f75c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801f760:	331d      	adds	r3, #29
 801f762:	7819      	ldrb	r1, [r3, #0]
 801f764:	68fb      	ldr	r3, [r7, #12]
 801f766:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801f76a:	331f      	adds	r3, #31
 801f76c:	461a      	mov	r2, r3
 801f76e:	6878      	ldr	r0, [r7, #4]
 801f770:	f000 f912 	bl	801f998 <SCSI_ProcessCmd>
 801f774:	4603      	mov	r3, r0
 801f776:	2b00      	cmp	r3, #0
 801f778:	da0c      	bge.n	801f794 <MSC_BOT_CBW_Decode+0xe4>
    {
      if (hmsc->bot_state == USBD_BOT_NO_DATA)
 801f77a:	68fb      	ldr	r3, [r7, #12]
 801f77c:	7a1b      	ldrb	r3, [r3, #8]
 801f77e:	2b05      	cmp	r3, #5
 801f780:	d104      	bne.n	801f78c <MSC_BOT_CBW_Decode+0xdc>
      {
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 801f782:	2101      	movs	r1, #1
 801f784:	6878      	ldr	r0, [r7, #4]
 801f786:	f000 f86d 	bl	801f864 <MSC_BOT_SendCSW>
 801f78a:	e02d      	b.n	801f7e8 <MSC_BOT_CBW_Decode+0x138>
      }
      else
      {
        MSC_BOT_Abort(pdev);
 801f78c:	6878      	ldr	r0, [r7, #4]
 801f78e:	f000 f89f 	bl	801f8d0 <MSC_BOT_Abort>
 801f792:	e029      	b.n	801f7e8 <MSC_BOT_CBW_Decode+0x138>
      }
    }
    /* Burst xfer handled internally */
    else if ((hmsc->bot_state != USBD_BOT_DATA_IN) &&
 801f794:	68fb      	ldr	r3, [r7, #12]
 801f796:	7a1b      	ldrb	r3, [r3, #8]
 801f798:	2b02      	cmp	r3, #2
 801f79a:	d024      	beq.n	801f7e6 <MSC_BOT_CBW_Decode+0x136>
             (hmsc->bot_state != USBD_BOT_DATA_OUT) &&
 801f79c:	68fb      	ldr	r3, [r7, #12]
 801f79e:	7a1b      	ldrb	r3, [r3, #8]
    else if ((hmsc->bot_state != USBD_BOT_DATA_IN) &&
 801f7a0:	2b01      	cmp	r3, #1
 801f7a2:	d020      	beq.n	801f7e6 <MSC_BOT_CBW_Decode+0x136>
             (hmsc->bot_state != USBD_BOT_LAST_DATA_IN))
 801f7a4:	68fb      	ldr	r3, [r7, #12]
 801f7a6:	7a1b      	ldrb	r3, [r3, #8]
             (hmsc->bot_state != USBD_BOT_DATA_OUT) &&
 801f7a8:	2b03      	cmp	r3, #3
 801f7aa:	d01c      	beq.n	801f7e6 <MSC_BOT_CBW_Decode+0x136>
    {
      if (hmsc->bot_data_length > 0U)
 801f7ac:	68fb      	ldr	r3, [r7, #12]
 801f7ae:	68db      	ldr	r3, [r3, #12]
 801f7b0:	2b00      	cmp	r3, #0
 801f7b2:	d009      	beq.n	801f7c8 <MSC_BOT_CBW_Decode+0x118>
      {
        MSC_BOT_SendData(pdev, hmsc->bot_data, hmsc->bot_data_length);
 801f7b4:	68fb      	ldr	r3, [r7, #12]
 801f7b6:	f103 0110 	add.w	r1, r3, #16
 801f7ba:	68fb      	ldr	r3, [r7, #12]
 801f7bc:	68db      	ldr	r3, [r3, #12]
 801f7be:	461a      	mov	r2, r3
 801f7c0:	6878      	ldr	r0, [r7, #4]
 801f7c2:	f000 f817 	bl	801f7f4 <MSC_BOT_SendData>
      if (hmsc->bot_data_length > 0U)
 801f7c6:	e00f      	b.n	801f7e8 <MSC_BOT_CBW_Decode+0x138>
      }
      else if (hmsc->bot_data_length == 0U)
 801f7c8:	68fb      	ldr	r3, [r7, #12]
 801f7ca:	68db      	ldr	r3, [r3, #12]
 801f7cc:	2b00      	cmp	r3, #0
 801f7ce:	d104      	bne.n	801f7da <MSC_BOT_CBW_Decode+0x12a>
      {
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_PASSED);
 801f7d0:	2100      	movs	r1, #0
 801f7d2:	6878      	ldr	r0, [r7, #4]
 801f7d4:	f000 f846 	bl	801f864 <MSC_BOT_SendCSW>
      if (hmsc->bot_data_length > 0U)
 801f7d8:	e006      	b.n	801f7e8 <MSC_BOT_CBW_Decode+0x138>
      }
      else
      {
        MSC_BOT_Abort(pdev);
 801f7da:	6878      	ldr	r0, [r7, #4]
 801f7dc:	f000 f878 	bl	801f8d0 <MSC_BOT_Abort>
      if (hmsc->bot_data_length > 0U)
 801f7e0:	e002      	b.n	801f7e8 <MSC_BOT_CBW_Decode+0x138>
    return;
 801f7e2:	bf00      	nop
 801f7e4:	e000      	b.n	801f7e8 <MSC_BOT_CBW_Decode+0x138>
      }
    }
    else
    {
      return;
 801f7e6:	bf00      	nop
    }
  }
}
 801f7e8:	3710      	adds	r7, #16
 801f7ea:	46bd      	mov	sp, r7
 801f7ec:	bd80      	pop	{r7, pc}
 801f7ee:	bf00      	nop
 801f7f0:	43425355 	.word	0x43425355

0801f7f4 <MSC_BOT_SendData>:
  * @param  buf: pointer to data buffer
  * @param  len: Data Length
  * @retval None
  */
static void  MSC_BOT_SendData(USBD_HandleTypeDef *pdev, uint8_t *pbuf, uint32_t len)
{
 801f7f4:	b580      	push	{r7, lr}
 801f7f6:	b086      	sub	sp, #24
 801f7f8:	af00      	add	r7, sp, #0
 801f7fa:	60f8      	str	r0, [r7, #12]
 801f7fc:	60b9      	str	r1, [r7, #8]
 801f7fe:	607a      	str	r2, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 801f800:	68fb      	ldr	r3, [r7, #12]
 801f802:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801f806:	617b      	str	r3, [r7, #20]

  uint32_t length = MIN(hmsc->cbw.dDataLength, len);
 801f808:	697b      	ldr	r3, [r7, #20]
 801f80a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801f80e:	3318      	adds	r3, #24
 801f810:	681b      	ldr	r3, [r3, #0]
 801f812:	687a      	ldr	r2, [r7, #4]
 801f814:	4293      	cmp	r3, r2
 801f816:	bf28      	it	cs
 801f818:	4613      	movcs	r3, r2
 801f81a:	613b      	str	r3, [r7, #16]

  if (hmsc == NULL)
 801f81c:	697b      	ldr	r3, [r7, #20]
 801f81e:	2b00      	cmp	r3, #0
 801f820:	d01b      	beq.n	801f85a <MSC_BOT_SendData+0x66>
  {
    return;
  }

  hmsc->csw.dDataResidue -= len;
 801f822:	697b      	ldr	r3, [r7, #20]
 801f824:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 801f828:	3318      	adds	r3, #24
 801f82a:	681a      	ldr	r2, [r3, #0]
 801f82c:	687b      	ldr	r3, [r7, #4]
 801f82e:	1ad2      	subs	r2, r2, r3
 801f830:	697b      	ldr	r3, [r7, #20]
 801f832:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 801f836:	3318      	adds	r3, #24
 801f838:	601a      	str	r2, [r3, #0]
  hmsc->csw.bStatus = USBD_CSW_CMD_PASSED;
 801f83a:	697b      	ldr	r3, [r7, #20]
 801f83c:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 801f840:	331c      	adds	r3, #28
 801f842:	2200      	movs	r2, #0
 801f844:	701a      	strb	r2, [r3, #0]
  hmsc->bot_state = USBD_BOT_SEND_DATA;
 801f846:	697b      	ldr	r3, [r7, #20]
 801f848:	2204      	movs	r2, #4
 801f84a:	721a      	strb	r2, [r3, #8]

  (void)USBD_LL_Transmit(pdev, MSC_EPIN_ADDR, pbuf, length);
 801f84c:	693b      	ldr	r3, [r7, #16]
 801f84e:	68ba      	ldr	r2, [r7, #8]
 801f850:	2181      	movs	r1, #129	; 0x81
 801f852:	68f8      	ldr	r0, [r7, #12]
 801f854:	f006 f85a 	bl	802590c <USBD_LL_Transmit>
 801f858:	e000      	b.n	801f85c <MSC_BOT_SendData+0x68>
    return;
 801f85a:	bf00      	nop
}
 801f85c:	3718      	adds	r7, #24
 801f85e:	46bd      	mov	sp, r7
 801f860:	bd80      	pop	{r7, pc}
	...

0801f864 <MSC_BOT_SendCSW>:
  * @param  pdev: device instance
  * @param  status : CSW status
  * @retval None
  */
void  MSC_BOT_SendCSW(USBD_HandleTypeDef *pdev, uint8_t CSW_Status)
{
 801f864:	b580      	push	{r7, lr}
 801f866:	b084      	sub	sp, #16
 801f868:	af00      	add	r7, sp, #0
 801f86a:	6078      	str	r0, [r7, #4]
 801f86c:	460b      	mov	r3, r1
 801f86e:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 801f870:	687b      	ldr	r3, [r7, #4]
 801f872:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801f876:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 801f878:	68fb      	ldr	r3, [r7, #12]
 801f87a:	2b00      	cmp	r3, #0
 801f87c:	d021      	beq.n	801f8c2 <MSC_BOT_SendCSW+0x5e>
  {
    return;
  }

  hmsc->csw.dSignature = USBD_BOT_CSW_SIGNATURE;
 801f87e:	68fb      	ldr	r3, [r7, #12]
 801f880:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 801f884:	3310      	adds	r3, #16
 801f886:	4a11      	ldr	r2, [pc, #68]	; (801f8cc <MSC_BOT_SendCSW+0x68>)
 801f888:	601a      	str	r2, [r3, #0]
  hmsc->csw.bStatus = CSW_Status;
 801f88a:	68fb      	ldr	r3, [r7, #12]
 801f88c:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 801f890:	331c      	adds	r3, #28
 801f892:	78fa      	ldrb	r2, [r7, #3]
 801f894:	701a      	strb	r2, [r3, #0]
  hmsc->bot_state = USBD_BOT_IDLE;
 801f896:	68fb      	ldr	r3, [r7, #12]
 801f898:	2200      	movs	r2, #0
 801f89a:	721a      	strb	r2, [r3, #8]

  (void)USBD_LL_Transmit(pdev, MSC_EPIN_ADDR, (uint8_t *)&hmsc->csw,
 801f89c:	68fb      	ldr	r3, [r7, #12]
 801f89e:	f503 5281 	add.w	r2, r3, #4128	; 0x1020
 801f8a2:	3210      	adds	r2, #16
 801f8a4:	230d      	movs	r3, #13
 801f8a6:	2181      	movs	r1, #129	; 0x81
 801f8a8:	6878      	ldr	r0, [r7, #4]
 801f8aa:	f006 f82f 	bl	802590c <USBD_LL_Transmit>
                         USBD_BOT_CSW_LENGTH);

  /* Prepare EP to Receive next Cmd */
  (void)USBD_LL_PrepareReceive(pdev, MSC_EPOUT_ADDR, (uint8_t *)&hmsc->cbw,
 801f8ae:	68fb      	ldr	r3, [r7, #12]
 801f8b0:	f503 5280 	add.w	r2, r3, #4096	; 0x1000
 801f8b4:	3210      	adds	r2, #16
 801f8b6:	231f      	movs	r3, #31
 801f8b8:	2101      	movs	r1, #1
 801f8ba:	6878      	ldr	r0, [r7, #4]
 801f8bc:	f006 f847 	bl	802594e <USBD_LL_PrepareReceive>
 801f8c0:	e000      	b.n	801f8c4 <MSC_BOT_SendCSW+0x60>
    return;
 801f8c2:	bf00      	nop
                               USBD_BOT_CBW_LENGTH);
}
 801f8c4:	3710      	adds	r7, #16
 801f8c6:	46bd      	mov	sp, r7
 801f8c8:	bd80      	pop	{r7, pc}
 801f8ca:	bf00      	nop
 801f8cc:	53425355 	.word	0x53425355

0801f8d0 <MSC_BOT_Abort>:
  * @param  pdev: device instance
  * @retval status
  */

static void  MSC_BOT_Abort(USBD_HandleTypeDef *pdev)
{
 801f8d0:	b580      	push	{r7, lr}
 801f8d2:	b084      	sub	sp, #16
 801f8d4:	af00      	add	r7, sp, #0
 801f8d6:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 801f8d8:	687b      	ldr	r3, [r7, #4]
 801f8da:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801f8de:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 801f8e0:	68fb      	ldr	r3, [r7, #12]
 801f8e2:	2b00      	cmp	r3, #0
 801f8e4:	d026      	beq.n	801f934 <MSC_BOT_Abort+0x64>
  {
    return;
  }

  if ((hmsc->cbw.bmFlags == 0U) &&
 801f8e6:	68fb      	ldr	r3, [r7, #12]
 801f8e8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801f8ec:	331c      	adds	r3, #28
 801f8ee:	781b      	ldrb	r3, [r3, #0]
 801f8f0:	2b00      	cmp	r3, #0
 801f8f2:	d10e      	bne.n	801f912 <MSC_BOT_Abort+0x42>
      (hmsc->cbw.dDataLength != 0U) &&
 801f8f4:	68fb      	ldr	r3, [r7, #12]
 801f8f6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801f8fa:	3318      	adds	r3, #24
 801f8fc:	681b      	ldr	r3, [r3, #0]
  if ((hmsc->cbw.bmFlags == 0U) &&
 801f8fe:	2b00      	cmp	r3, #0
 801f900:	d007      	beq.n	801f912 <MSC_BOT_Abort+0x42>
      (hmsc->bot_status == USBD_BOT_STATUS_NORMAL))
 801f902:	68fb      	ldr	r3, [r7, #12]
 801f904:	7a5b      	ldrb	r3, [r3, #9]
      (hmsc->cbw.dDataLength != 0U) &&
 801f906:	2b00      	cmp	r3, #0
 801f908:	d103      	bne.n	801f912 <MSC_BOT_Abort+0x42>
  {
    (void)USBD_LL_StallEP(pdev, MSC_EPOUT_ADDR);
 801f90a:	2101      	movs	r1, #1
 801f90c:	6878      	ldr	r0, [r7, #4]
 801f90e:	f005 ff74 	bl	80257fa <USBD_LL_StallEP>
  }

  (void)USBD_LL_StallEP(pdev, MSC_EPIN_ADDR);
 801f912:	2181      	movs	r1, #129	; 0x81
 801f914:	6878      	ldr	r0, [r7, #4]
 801f916:	f005 ff70 	bl	80257fa <USBD_LL_StallEP>

  if (hmsc->bot_status == USBD_BOT_STATUS_ERROR)
 801f91a:	68fb      	ldr	r3, [r7, #12]
 801f91c:	7a5b      	ldrb	r3, [r3, #9]
 801f91e:	2b02      	cmp	r3, #2
 801f920:	d109      	bne.n	801f936 <MSC_BOT_Abort+0x66>
  {
    (void)USBD_LL_StallEP(pdev, MSC_EPIN_ADDR);
 801f922:	2181      	movs	r1, #129	; 0x81
 801f924:	6878      	ldr	r0, [r7, #4]
 801f926:	f005 ff68 	bl	80257fa <USBD_LL_StallEP>
    (void)USBD_LL_StallEP(pdev, MSC_EPOUT_ADDR);
 801f92a:	2101      	movs	r1, #1
 801f92c:	6878      	ldr	r0, [r7, #4]
 801f92e:	f005 ff64 	bl	80257fa <USBD_LL_StallEP>
 801f932:	e000      	b.n	801f936 <MSC_BOT_Abort+0x66>
    return;
 801f934:	bf00      	nop
  }
}
 801f936:	3710      	adds	r7, #16
 801f938:	46bd      	mov	sp, r7
 801f93a:	bd80      	pop	{r7, pc}

0801f93c <MSC_BOT_CplClrFeature>:
  * @param  epnum: endpoint index
  * @retval None
  */

void  MSC_BOT_CplClrFeature(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 801f93c:	b580      	push	{r7, lr}
 801f93e:	b084      	sub	sp, #16
 801f940:	af00      	add	r7, sp, #0
 801f942:	6078      	str	r0, [r7, #4]
 801f944:	460b      	mov	r3, r1
 801f946:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 801f948:	687b      	ldr	r3, [r7, #4]
 801f94a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801f94e:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 801f950:	68fb      	ldr	r3, [r7, #12]
 801f952:	2b00      	cmp	r3, #0
 801f954:	d019      	beq.n	801f98a <MSC_BOT_CplClrFeature+0x4e>
  {
    return;
  }

  if (hmsc->bot_status == USBD_BOT_STATUS_ERROR) /* Bad CBW Signature */
 801f956:	68fb      	ldr	r3, [r7, #12]
 801f958:	7a5b      	ldrb	r3, [r3, #9]
 801f95a:	2b02      	cmp	r3, #2
 801f95c:	d108      	bne.n	801f970 <MSC_BOT_CplClrFeature+0x34>
  {
    (void)USBD_LL_StallEP(pdev, MSC_EPIN_ADDR);
 801f95e:	2181      	movs	r1, #129	; 0x81
 801f960:	6878      	ldr	r0, [r7, #4]
 801f962:	f005 ff4a 	bl	80257fa <USBD_LL_StallEP>
    (void)USBD_LL_StallEP(pdev, MSC_EPOUT_ADDR);
 801f966:	2101      	movs	r1, #1
 801f968:	6878      	ldr	r0, [r7, #4]
 801f96a:	f005 ff46 	bl	80257fa <USBD_LL_StallEP>
 801f96e:	e00f      	b.n	801f990 <MSC_BOT_CplClrFeature+0x54>
  }
  else if (((epnum & 0x80U) == 0x80U) && (hmsc->bot_status != USBD_BOT_STATUS_RECOVERY))
 801f970:	f997 3003 	ldrsb.w	r3, [r7, #3]
 801f974:	2b00      	cmp	r3, #0
 801f976:	da0a      	bge.n	801f98e <MSC_BOT_CplClrFeature+0x52>
 801f978:	68fb      	ldr	r3, [r7, #12]
 801f97a:	7a5b      	ldrb	r3, [r3, #9]
 801f97c:	2b01      	cmp	r3, #1
 801f97e:	d006      	beq.n	801f98e <MSC_BOT_CplClrFeature+0x52>
  {
    MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 801f980:	2101      	movs	r1, #1
 801f982:	6878      	ldr	r0, [r7, #4]
 801f984:	f7ff ff6e 	bl	801f864 <MSC_BOT_SendCSW>
 801f988:	e002      	b.n	801f990 <MSC_BOT_CplClrFeature+0x54>
    return;
 801f98a:	bf00      	nop
 801f98c:	e000      	b.n	801f990 <MSC_BOT_CplClrFeature+0x54>
  }
  else
  {
    return;
 801f98e:	bf00      	nop
  }
}
 801f990:	3710      	adds	r7, #16
 801f992:	46bd      	mov	sp, r7
 801f994:	bd80      	pop	{r7, pc}
	...

0801f998 <SCSI_ProcessCmd>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
int8_t SCSI_ProcessCmd(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *cmd)
{
 801f998:	b580      	push	{r7, lr}
 801f99a:	b086      	sub	sp, #24
 801f99c:	af00      	add	r7, sp, #0
 801f99e:	60f8      	str	r0, [r7, #12]
 801f9a0:	460b      	mov	r3, r1
 801f9a2:	607a      	str	r2, [r7, #4]
 801f9a4:	72fb      	strb	r3, [r7, #11]
  int8_t ret;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 801f9a6:	68fb      	ldr	r3, [r7, #12]
 801f9a8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801f9ac:	613b      	str	r3, [r7, #16]

  if (hmsc == NULL)
 801f9ae:	693b      	ldr	r3, [r7, #16]
 801f9b0:	2b00      	cmp	r3, #0
 801f9b2:	d102      	bne.n	801f9ba <SCSI_ProcessCmd+0x22>
  {
    return -1;
 801f9b4:	f04f 33ff 	mov.w	r3, #4294967295
 801f9b8:	e168      	b.n	801fc8c <SCSI_ProcessCmd+0x2f4>
  }

  switch (cmd[0])
 801f9ba:	687b      	ldr	r3, [r7, #4]
 801f9bc:	781b      	ldrb	r3, [r3, #0]
 801f9be:	2baa      	cmp	r3, #170	; 0xaa
 801f9c0:	f000 8144 	beq.w	801fc4c <SCSI_ProcessCmd+0x2b4>
 801f9c4:	2baa      	cmp	r3, #170	; 0xaa
 801f9c6:	f300 8153 	bgt.w	801fc70 <SCSI_ProcessCmd+0x2d8>
 801f9ca:	2ba8      	cmp	r3, #168	; 0xa8
 801f9cc:	f000 812c 	beq.w	801fc28 <SCSI_ProcessCmd+0x290>
 801f9d0:	2ba8      	cmp	r3, #168	; 0xa8
 801f9d2:	f300 814d 	bgt.w	801fc70 <SCSI_ProcessCmd+0x2d8>
 801f9d6:	2b5a      	cmp	r3, #90	; 0x5a
 801f9d8:	f300 80c0 	bgt.w	801fb5c <SCSI_ProcessCmd+0x1c4>
 801f9dc:	2b00      	cmp	r3, #0
 801f9de:	f2c0 8147 	blt.w	801fc70 <SCSI_ProcessCmd+0x2d8>
 801f9e2:	2b5a      	cmp	r3, #90	; 0x5a
 801f9e4:	f200 8144 	bhi.w	801fc70 <SCSI_ProcessCmd+0x2d8>
 801f9e8:	a201      	add	r2, pc, #4	; (adr r2, 801f9f0 <SCSI_ProcessCmd+0x58>)
 801f9ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801f9ee:	bf00      	nop
 801f9f0:	0801fb63 	.word	0x0801fb63
 801f9f4:	0801fc71 	.word	0x0801fc71
 801f9f8:	0801fc71 	.word	0x0801fc71
 801f9fc:	0801fb75 	.word	0x0801fb75
 801fa00:	0801fc71 	.word	0x0801fc71
 801fa04:	0801fc71 	.word	0x0801fc71
 801fa08:	0801fc71 	.word	0x0801fc71
 801fa0c:	0801fc71 	.word	0x0801fc71
 801fa10:	0801fc71 	.word	0x0801fc71
 801fa14:	0801fc71 	.word	0x0801fc71
 801fa18:	0801fc71 	.word	0x0801fc71
 801fa1c:	0801fc71 	.word	0x0801fc71
 801fa20:	0801fc71 	.word	0x0801fc71
 801fa24:	0801fc71 	.word	0x0801fc71
 801fa28:	0801fc71 	.word	0x0801fc71
 801fa2c:	0801fc71 	.word	0x0801fc71
 801fa30:	0801fc71 	.word	0x0801fc71
 801fa34:	0801fc71 	.word	0x0801fc71
 801fa38:	0801fb87 	.word	0x0801fb87
 801fa3c:	0801fc71 	.word	0x0801fc71
 801fa40:	0801fc71 	.word	0x0801fc71
 801fa44:	0801fc71 	.word	0x0801fc71
 801fa48:	0801fc71 	.word	0x0801fc71
 801fa4c:	0801fc71 	.word	0x0801fc71
 801fa50:	0801fc71 	.word	0x0801fc71
 801fa54:	0801fc71 	.word	0x0801fc71
 801fa58:	0801fbbd 	.word	0x0801fbbd
 801fa5c:	0801fb99 	.word	0x0801fb99
 801fa60:	0801fc71 	.word	0x0801fc71
 801fa64:	0801fc71 	.word	0x0801fc71
 801fa68:	0801fbab 	.word	0x0801fbab
 801fa6c:	0801fc71 	.word	0x0801fc71
 801fa70:	0801fc71 	.word	0x0801fc71
 801fa74:	0801fc71 	.word	0x0801fc71
 801fa78:	0801fc71 	.word	0x0801fc71
 801fa7c:	0801fbe1 	.word	0x0801fbe1
 801fa80:	0801fc71 	.word	0x0801fc71
 801fa84:	0801fbf3 	.word	0x0801fbf3
 801fa88:	0801fc71 	.word	0x0801fc71
 801fa8c:	0801fc71 	.word	0x0801fc71
 801fa90:	0801fc17 	.word	0x0801fc17
 801fa94:	0801fc71 	.word	0x0801fc71
 801fa98:	0801fc3b 	.word	0x0801fc3b
 801fa9c:	0801fc71 	.word	0x0801fc71
 801faa0:	0801fc71 	.word	0x0801fc71
 801faa4:	0801fc71 	.word	0x0801fc71
 801faa8:	0801fc71 	.word	0x0801fc71
 801faac:	0801fc5f 	.word	0x0801fc5f
 801fab0:	0801fc71 	.word	0x0801fc71
 801fab4:	0801fc71 	.word	0x0801fc71
 801fab8:	0801fc71 	.word	0x0801fc71
 801fabc:	0801fc71 	.word	0x0801fc71
 801fac0:	0801fc71 	.word	0x0801fc71
 801fac4:	0801fc71 	.word	0x0801fc71
 801fac8:	0801fc71 	.word	0x0801fc71
 801facc:	0801fc71 	.word	0x0801fc71
 801fad0:	0801fc71 	.word	0x0801fc71
 801fad4:	0801fc71 	.word	0x0801fc71
 801fad8:	0801fc71 	.word	0x0801fc71
 801fadc:	0801fc71 	.word	0x0801fc71
 801fae0:	0801fc71 	.word	0x0801fc71
 801fae4:	0801fc71 	.word	0x0801fc71
 801fae8:	0801fc71 	.word	0x0801fc71
 801faec:	0801fc71 	.word	0x0801fc71
 801faf0:	0801fc71 	.word	0x0801fc71
 801faf4:	0801fc71 	.word	0x0801fc71
 801faf8:	0801fc71 	.word	0x0801fc71
 801fafc:	0801fc71 	.word	0x0801fc71
 801fb00:	0801fc71 	.word	0x0801fc71
 801fb04:	0801fc71 	.word	0x0801fc71
 801fb08:	0801fc71 	.word	0x0801fc71
 801fb0c:	0801fc71 	.word	0x0801fc71
 801fb10:	0801fc71 	.word	0x0801fc71
 801fb14:	0801fc71 	.word	0x0801fc71
 801fb18:	0801fc71 	.word	0x0801fc71
 801fb1c:	0801fc71 	.word	0x0801fc71
 801fb20:	0801fc71 	.word	0x0801fc71
 801fb24:	0801fc71 	.word	0x0801fc71
 801fb28:	0801fc71 	.word	0x0801fc71
 801fb2c:	0801fc71 	.word	0x0801fc71
 801fb30:	0801fc71 	.word	0x0801fc71
 801fb34:	0801fc71 	.word	0x0801fc71
 801fb38:	0801fc71 	.word	0x0801fc71
 801fb3c:	0801fc71 	.word	0x0801fc71
 801fb40:	0801fc71 	.word	0x0801fc71
 801fb44:	0801fc71 	.word	0x0801fc71
 801fb48:	0801fc71 	.word	0x0801fc71
 801fb4c:	0801fc71 	.word	0x0801fc71
 801fb50:	0801fc71 	.word	0x0801fc71
 801fb54:	0801fc71 	.word	0x0801fc71
 801fb58:	0801fbcf 	.word	0x0801fbcf
 801fb5c:	2b9e      	cmp	r3, #158	; 0x9e
 801fb5e:	d051      	beq.n	801fc04 <SCSI_ProcessCmd+0x26c>
 801fb60:	e086      	b.n	801fc70 <SCSI_ProcessCmd+0x2d8>
  {
    case SCSI_TEST_UNIT_READY:
      ret = SCSI_TestUnitReady(pdev, lun, cmd);
 801fb62:	7afb      	ldrb	r3, [r7, #11]
 801fb64:	687a      	ldr	r2, [r7, #4]
 801fb66:	4619      	mov	r1, r3
 801fb68:	68f8      	ldr	r0, [r7, #12]
 801fb6a:	f000 f893 	bl	801fc94 <SCSI_TestUnitReady>
 801fb6e:	4603      	mov	r3, r0
 801fb70:	75fb      	strb	r3, [r7, #23]
      break;
 801fb72:	e089      	b.n	801fc88 <SCSI_ProcessCmd+0x2f0>

    case SCSI_REQUEST_SENSE:
      ret = SCSI_RequestSense(pdev, lun, cmd);
 801fb74:	7afb      	ldrb	r3, [r7, #11]
 801fb76:	687a      	ldr	r2, [r7, #4]
 801fb78:	4619      	mov	r1, r3
 801fb7a:	68f8      	ldr	r0, [r7, #12]
 801fb7c:	f000 fb70 	bl	8020260 <SCSI_RequestSense>
 801fb80:	4603      	mov	r3, r0
 801fb82:	75fb      	strb	r3, [r7, #23]
      break;
 801fb84:	e080      	b.n	801fc88 <SCSI_ProcessCmd+0x2f0>

    case SCSI_INQUIRY:
      ret = SCSI_Inquiry(pdev, lun, cmd);
 801fb86:	7afb      	ldrb	r3, [r7, #11]
 801fb88:	687a      	ldr	r2, [r7, #4]
 801fb8a:	4619      	mov	r1, r3
 801fb8c:	68f8      	ldr	r0, [r7, #12]
 801fb8e:	f000 f8d7 	bl	801fd40 <SCSI_Inquiry>
 801fb92:	4603      	mov	r3, r0
 801fb94:	75fb      	strb	r3, [r7, #23]
      break;
 801fb96:	e077      	b.n	801fc88 <SCSI_ProcessCmd+0x2f0>

    case SCSI_START_STOP_UNIT:
      ret = SCSI_StartStopUnit(pdev, lun, cmd);
 801fb98:	7afb      	ldrb	r3, [r7, #11]
 801fb9a:	687a      	ldr	r2, [r7, #4]
 801fb9c:	4619      	mov	r1, r3
 801fb9e:	68f8      	ldr	r0, [r7, #12]
 801fba0:	f000 fc46 	bl	8020430 <SCSI_StartStopUnit>
 801fba4:	4603      	mov	r3, r0
 801fba6:	75fb      	strb	r3, [r7, #23]
      break;
 801fba8:	e06e      	b.n	801fc88 <SCSI_ProcessCmd+0x2f0>

    case SCSI_ALLOW_MEDIUM_REMOVAL:
      ret = SCSI_AllowPreventRemovable(pdev, lun, cmd);
 801fbaa:	7afb      	ldrb	r3, [r7, #11]
 801fbac:	687a      	ldr	r2, [r7, #4]
 801fbae:	4619      	mov	r1, r3
 801fbb0:	68f8      	ldr	r0, [r7, #12]
 801fbb2:	f000 fc96 	bl	80204e2 <SCSI_AllowPreventRemovable>
 801fbb6:	4603      	mov	r3, r0
 801fbb8:	75fb      	strb	r3, [r7, #23]
      break;
 801fbba:	e065      	b.n	801fc88 <SCSI_ProcessCmd+0x2f0>

    case SCSI_MODE_SENSE6:
      ret = SCSI_ModeSense6(pdev, lun, cmd);
 801fbbc:	7afb      	ldrb	r3, [r7, #11]
 801fbbe:	687a      	ldr	r2, [r7, #4]
 801fbc0:	4619      	mov	r1, r3
 801fbc2:	68f8      	ldr	r0, [r7, #12]
 801fbc4:	f000 faf4 	bl	80201b0 <SCSI_ModeSense6>
 801fbc8:	4603      	mov	r3, r0
 801fbca:	75fb      	strb	r3, [r7, #23]
      break;
 801fbcc:	e05c      	b.n	801fc88 <SCSI_ProcessCmd+0x2f0>

    case SCSI_MODE_SENSE10:
      ret = SCSI_ModeSense10(pdev, lun, cmd);
 801fbce:	7afb      	ldrb	r3, [r7, #11]
 801fbd0:	687a      	ldr	r2, [r7, #4]
 801fbd2:	4619      	mov	r1, r3
 801fbd4:	68f8      	ldr	r0, [r7, #12]
 801fbd6:	f000 fb17 	bl	8020208 <SCSI_ModeSense10>
 801fbda:	4603      	mov	r3, r0
 801fbdc:	75fb      	strb	r3, [r7, #23]
      break;
 801fbde:	e053      	b.n	801fc88 <SCSI_ProcessCmd+0x2f0>

    case SCSI_READ_FORMAT_CAPACITIES:
      ret = SCSI_ReadFormatCapacity(pdev, lun, cmd);
 801fbe0:	7afb      	ldrb	r3, [r7, #11]
 801fbe2:	687a      	ldr	r2, [r7, #4]
 801fbe4:	4619      	mov	r1, r3
 801fbe6:	68f8      	ldr	r0, [r7, #12]
 801fbe8:	f000 fa6d 	bl	80200c6 <SCSI_ReadFormatCapacity>
 801fbec:	4603      	mov	r3, r0
 801fbee:	75fb      	strb	r3, [r7, #23]
      break;
 801fbf0:	e04a      	b.n	801fc88 <SCSI_ProcessCmd+0x2f0>

    case SCSI_READ_CAPACITY10:
      ret = SCSI_ReadCapacity10(pdev, lun, cmd);
 801fbf2:	7afb      	ldrb	r3, [r7, #11]
 801fbf4:	687a      	ldr	r2, [r7, #4]
 801fbf6:	4619      	mov	r1, r3
 801fbf8:	68f8      	ldr	r0, [r7, #12]
 801fbfa:	f000 f91b 	bl	801fe34 <SCSI_ReadCapacity10>
 801fbfe:	4603      	mov	r3, r0
 801fc00:	75fb      	strb	r3, [r7, #23]
      break;
 801fc02:	e041      	b.n	801fc88 <SCSI_ProcessCmd+0x2f0>

    case SCSI_READ_CAPACITY16:
      ret = SCSI_ReadCapacity16(pdev, lun, cmd);
 801fc04:	7afb      	ldrb	r3, [r7, #11]
 801fc06:	687a      	ldr	r2, [r7, #4]
 801fc08:	4619      	mov	r1, r3
 801fc0a:	68f8      	ldr	r0, [r7, #12]
 801fc0c:	f000 f99c 	bl	801ff48 <SCSI_ReadCapacity16>
 801fc10:	4603      	mov	r3, r0
 801fc12:	75fb      	strb	r3, [r7, #23]
      break;
 801fc14:	e038      	b.n	801fc88 <SCSI_ProcessCmd+0x2f0>

    case SCSI_READ10:
      ret = SCSI_Read10(pdev, lun, cmd);
 801fc16:	7afb      	ldrb	r3, [r7, #11]
 801fc18:	687a      	ldr	r2, [r7, #4]
 801fc1a:	4619      	mov	r1, r3
 801fc1c:	68f8      	ldr	r0, [r7, #12]
 801fc1e:	f000 fc8d 	bl	802053c <SCSI_Read10>
 801fc22:	4603      	mov	r3, r0
 801fc24:	75fb      	strb	r3, [r7, #23]
      break;
 801fc26:	e02f      	b.n	801fc88 <SCSI_ProcessCmd+0x2f0>

    case SCSI_READ12:
      ret = SCSI_Read12(pdev, lun, cmd);
 801fc28:	7afb      	ldrb	r3, [r7, #11]
 801fc2a:	687a      	ldr	r2, [r7, #4]
 801fc2c:	4619      	mov	r1, r3
 801fc2e:	68f8      	ldr	r0, [r7, #12]
 801fc30:	f000 fd3b 	bl	80206aa <SCSI_Read12>
 801fc34:	4603      	mov	r3, r0
 801fc36:	75fb      	strb	r3, [r7, #23]
      break;
 801fc38:	e026      	b.n	801fc88 <SCSI_ProcessCmd+0x2f0>

    case SCSI_WRITE10:
      ret = SCSI_Write10(pdev, lun, cmd);
 801fc3a:	7afb      	ldrb	r3, [r7, #11]
 801fc3c:	687a      	ldr	r2, [r7, #4]
 801fc3e:	4619      	mov	r1, r3
 801fc40:	68f8      	ldr	r0, [r7, #12]
 801fc42:	f000 fdf3 	bl	802082c <SCSI_Write10>
 801fc46:	4603      	mov	r3, r0
 801fc48:	75fb      	strb	r3, [r7, #23]
      break;
 801fc4a:	e01d      	b.n	801fc88 <SCSI_ProcessCmd+0x2f0>

    case SCSI_WRITE12:
      ret = SCSI_Write12(pdev, lun, cmd);
 801fc4c:	7afb      	ldrb	r3, [r7, #11]
 801fc4e:	687a      	ldr	r2, [r7, #4]
 801fc50:	4619      	mov	r1, r3
 801fc52:	68f8      	ldr	r0, [r7, #12]
 801fc54:	f000 fec7 	bl	80209e6 <SCSI_Write12>
 801fc58:	4603      	mov	r3, r0
 801fc5a:	75fb      	strb	r3, [r7, #23]
      break;
 801fc5c:	e014      	b.n	801fc88 <SCSI_ProcessCmd+0x2f0>

    case SCSI_VERIFY10:
      ret = SCSI_Verify10(pdev, lun, cmd);
 801fc5e:	7afb      	ldrb	r3, [r7, #11]
 801fc60:	687a      	ldr	r2, [r7, #4]
 801fc62:	4619      	mov	r1, r3
 801fc64:	68f8      	ldr	r0, [r7, #12]
 801fc66:	f000 ffab 	bl	8020bc0 <SCSI_Verify10>
 801fc6a:	4603      	mov	r3, r0
 801fc6c:	75fb      	strb	r3, [r7, #23]
      break;
 801fc6e:	e00b      	b.n	801fc88 <SCSI_ProcessCmd+0x2f0>

    default:
      SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, INVALID_CDB);
 801fc70:	7af9      	ldrb	r1, [r7, #11]
 801fc72:	2320      	movs	r3, #32
 801fc74:	2205      	movs	r2, #5
 801fc76:	68f8      	ldr	r0, [r7, #12]
 801fc78:	f000 fb82 	bl	8020380 <SCSI_SenseCode>
      hmsc->bot_status = USBD_BOT_STATUS_ERROR;
 801fc7c:	693b      	ldr	r3, [r7, #16]
 801fc7e:	2202      	movs	r2, #2
 801fc80:	725a      	strb	r2, [r3, #9]
      ret = -1;
 801fc82:	23ff      	movs	r3, #255	; 0xff
 801fc84:	75fb      	strb	r3, [r7, #23]
      break;
 801fc86:	bf00      	nop
  }

  return ret;
 801fc88:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801fc8c:	4618      	mov	r0, r3
 801fc8e:	3718      	adds	r7, #24
 801fc90:	46bd      	mov	sp, r7
 801fc92:	bd80      	pop	{r7, pc}

0801fc94 <SCSI_TestUnitReady>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_TestUnitReady(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 801fc94:	b580      	push	{r7, lr}
 801fc96:	b086      	sub	sp, #24
 801fc98:	af00      	add	r7, sp, #0
 801fc9a:	60f8      	str	r0, [r7, #12]
 801fc9c:	460b      	mov	r3, r1
 801fc9e:	607a      	str	r2, [r7, #4]
 801fca0:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 801fca2:	68fb      	ldr	r3, [r7, #12]
 801fca4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801fca8:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 801fcaa:	697b      	ldr	r3, [r7, #20]
 801fcac:	2b00      	cmp	r3, #0
 801fcae:	d102      	bne.n	801fcb6 <SCSI_TestUnitReady+0x22>
  {
    return -1;
 801fcb0:	f04f 33ff 	mov.w	r3, #4294967295
 801fcb4:	e040      	b.n	801fd38 <SCSI_TestUnitReady+0xa4>
  }

  /* case 9 : Hi > D0 */
  if (hmsc->cbw.dDataLength != 0U)
 801fcb6:	697b      	ldr	r3, [r7, #20]
 801fcb8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801fcbc:	3318      	adds	r3, #24
 801fcbe:	681b      	ldr	r3, [r3, #0]
 801fcc0:	2b00      	cmp	r3, #0
 801fcc2:	d00c      	beq.n	801fcde <SCSI_TestUnitReady+0x4a>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 801fcc4:	697b      	ldr	r3, [r7, #20]
 801fcc6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801fcca:	331d      	adds	r3, #29
 801fccc:	7819      	ldrb	r1, [r3, #0]
 801fcce:	2320      	movs	r3, #32
 801fcd0:	2205      	movs	r2, #5
 801fcd2:	68f8      	ldr	r0, [r7, #12]
 801fcd4:	f000 fb54 	bl	8020380 <SCSI_SenseCode>

    return -1;
 801fcd8:	f04f 33ff 	mov.w	r3, #4294967295
 801fcdc:	e02c      	b.n	801fd38 <SCSI_TestUnitReady+0xa4>
  }

  if (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED)
 801fcde:	697b      	ldr	r3, [r7, #20]
 801fce0:	f503 5383 	add.w	r3, r3, #4192	; 0x1060
 801fce4:	3302      	adds	r3, #2
 801fce6:	781b      	ldrb	r3, [r3, #0]
 801fce8:	2b02      	cmp	r3, #2
 801fcea:	d10b      	bne.n	801fd04 <SCSI_TestUnitReady+0x70>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 801fcec:	7af9      	ldrb	r1, [r7, #11]
 801fcee:	233a      	movs	r3, #58	; 0x3a
 801fcf0:	2202      	movs	r2, #2
 801fcf2:	68f8      	ldr	r0, [r7, #12]
 801fcf4:	f000 fb44 	bl	8020380 <SCSI_SenseCode>
    hmsc->bot_state = USBD_BOT_NO_DATA;
 801fcf8:	697b      	ldr	r3, [r7, #20]
 801fcfa:	2205      	movs	r2, #5
 801fcfc:	721a      	strb	r2, [r3, #8]
    return -1;
 801fcfe:	f04f 33ff 	mov.w	r3, #4294967295
 801fd02:	e019      	b.n	801fd38 <SCSI_TestUnitReady+0xa4>
  }

  if (((USBD_StorageTypeDef *)pdev->pUserData)->IsReady(lun) != 0)
 801fd04:	68fb      	ldr	r3, [r7, #12]
 801fd06:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 801fd0a:	689b      	ldr	r3, [r3, #8]
 801fd0c:	7afa      	ldrb	r2, [r7, #11]
 801fd0e:	4610      	mov	r0, r2
 801fd10:	4798      	blx	r3
 801fd12:	4603      	mov	r3, r0
 801fd14:	2b00      	cmp	r3, #0
 801fd16:	d00b      	beq.n	801fd30 <SCSI_TestUnitReady+0x9c>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 801fd18:	7af9      	ldrb	r1, [r7, #11]
 801fd1a:	233a      	movs	r3, #58	; 0x3a
 801fd1c:	2202      	movs	r2, #2
 801fd1e:	68f8      	ldr	r0, [r7, #12]
 801fd20:	f000 fb2e 	bl	8020380 <SCSI_SenseCode>
    hmsc->bot_state = USBD_BOT_NO_DATA;
 801fd24:	697b      	ldr	r3, [r7, #20]
 801fd26:	2205      	movs	r2, #5
 801fd28:	721a      	strb	r2, [r3, #8]

    return -1;
 801fd2a:	f04f 33ff 	mov.w	r3, #4294967295
 801fd2e:	e003      	b.n	801fd38 <SCSI_TestUnitReady+0xa4>
  }
  hmsc->bot_data_length = 0U;
 801fd30:	697b      	ldr	r3, [r7, #20]
 801fd32:	2200      	movs	r2, #0
 801fd34:	60da      	str	r2, [r3, #12]

  return 0;
 801fd36:	2300      	movs	r3, #0
}
 801fd38:	4618      	mov	r0, r3
 801fd3a:	3718      	adds	r7, #24
 801fd3c:	46bd      	mov	sp, r7
 801fd3e:	bd80      	pop	{r7, pc}

0801fd40 <SCSI_Inquiry>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Inquiry(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 801fd40:	b580      	push	{r7, lr}
 801fd42:	b088      	sub	sp, #32
 801fd44:	af00      	add	r7, sp, #0
 801fd46:	60f8      	str	r0, [r7, #12]
 801fd48:	460b      	mov	r3, r1
 801fd4a:	607a      	str	r2, [r7, #4]
 801fd4c:	72fb      	strb	r3, [r7, #11]
  uint8_t *pPage;
  uint16_t len;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 801fd4e:	68fb      	ldr	r3, [r7, #12]
 801fd50:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801fd54:	61bb      	str	r3, [r7, #24]

  if (hmsc == NULL)
 801fd56:	69bb      	ldr	r3, [r7, #24]
 801fd58:	2b00      	cmp	r3, #0
 801fd5a:	d102      	bne.n	801fd62 <SCSI_Inquiry+0x22>
  {
    return -1;
 801fd5c:	f04f 33ff 	mov.w	r3, #4294967295
 801fd60:	e060      	b.n	801fe24 <SCSI_Inquiry+0xe4>
  }

  if (hmsc->cbw.dDataLength == 0U)
 801fd62:	69bb      	ldr	r3, [r7, #24]
 801fd64:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801fd68:	3318      	adds	r3, #24
 801fd6a:	681b      	ldr	r3, [r3, #0]
 801fd6c:	2b00      	cmp	r3, #0
 801fd6e:	d10c      	bne.n	801fd8a <SCSI_Inquiry+0x4a>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 801fd70:	69bb      	ldr	r3, [r7, #24]
 801fd72:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801fd76:	331d      	adds	r3, #29
 801fd78:	7819      	ldrb	r1, [r3, #0]
 801fd7a:	2320      	movs	r3, #32
 801fd7c:	2205      	movs	r2, #5
 801fd7e:	68f8      	ldr	r0, [r7, #12]
 801fd80:	f000 fafe 	bl	8020380 <SCSI_SenseCode>
    return -1;
 801fd84:	f04f 33ff 	mov.w	r3, #4294967295
 801fd88:	e04c      	b.n	801fe24 <SCSI_Inquiry+0xe4>
  }

  if ((params[1] & 0x01U) != 0U) /* Evpd is set */
 801fd8a:	687b      	ldr	r3, [r7, #4]
 801fd8c:	3301      	adds	r3, #1
 801fd8e:	781b      	ldrb	r3, [r3, #0]
 801fd90:	f003 0301 	and.w	r3, r3, #1
 801fd94:	2b00      	cmp	r3, #0
 801fd96:	d022      	beq.n	801fdde <SCSI_Inquiry+0x9e>
  {
    if (params[2] == 0U) /* Request for Supported Vital Product Data Pages*/
 801fd98:	687b      	ldr	r3, [r7, #4]
 801fd9a:	3302      	adds	r3, #2
 801fd9c:	781b      	ldrb	r3, [r3, #0]
 801fd9e:	2b00      	cmp	r3, #0
 801fda0:	d105      	bne.n	801fdae <SCSI_Inquiry+0x6e>
    {
      (void)SCSI_UpdateBotData(hmsc, MSC_Page00_Inquiry_Data, LENGTH_INQUIRY_PAGE00);
 801fda2:	2206      	movs	r2, #6
 801fda4:	4921      	ldr	r1, [pc, #132]	; (801fe2c <SCSI_Inquiry+0xec>)
 801fda6:	69b8      	ldr	r0, [r7, #24]
 801fda8:	f001 f8ab 	bl	8020f02 <SCSI_UpdateBotData>
 801fdac:	e039      	b.n	801fe22 <SCSI_Inquiry+0xe2>
    }
    else if (params[2] == 0x80U) /* Request for VPD page 0x80 Unit Serial Number */
 801fdae:	687b      	ldr	r3, [r7, #4]
 801fdb0:	3302      	adds	r3, #2
 801fdb2:	781b      	ldrb	r3, [r3, #0]
 801fdb4:	2b80      	cmp	r3, #128	; 0x80
 801fdb6:	d105      	bne.n	801fdc4 <SCSI_Inquiry+0x84>
    {
      (void)SCSI_UpdateBotData(hmsc, MSC_Page80_Inquiry_Data, LENGTH_INQUIRY_PAGE80);
 801fdb8:	2208      	movs	r2, #8
 801fdba:	491d      	ldr	r1, [pc, #116]	; (801fe30 <SCSI_Inquiry+0xf0>)
 801fdbc:	69b8      	ldr	r0, [r7, #24]
 801fdbe:	f001 f8a0 	bl	8020f02 <SCSI_UpdateBotData>
 801fdc2:	e02e      	b.n	801fe22 <SCSI_Inquiry+0xe2>
    }
    else /* Request Not supported */
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST,
 801fdc4:	69bb      	ldr	r3, [r7, #24]
 801fdc6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801fdca:	331d      	adds	r3, #29
 801fdcc:	7819      	ldrb	r1, [r3, #0]
 801fdce:	2324      	movs	r3, #36	; 0x24
 801fdd0:	2205      	movs	r2, #5
 801fdd2:	68f8      	ldr	r0, [r7, #12]
 801fdd4:	f000 fad4 	bl	8020380 <SCSI_SenseCode>
                     INVALID_FIELED_IN_COMMAND);

      return -1;
 801fdd8:	f04f 33ff 	mov.w	r3, #4294967295
 801fddc:	e022      	b.n	801fe24 <SCSI_Inquiry+0xe4>
    }
  }
  else
  {
    pPage = (uint8_t *) &((USBD_StorageTypeDef *)pdev->pUserData)->pInquiry[lun * STANDARD_INQUIRY_DATA_LEN];
 801fdde:	68fb      	ldr	r3, [r7, #12]
 801fde0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 801fde4:	69d9      	ldr	r1, [r3, #28]
 801fde6:	7afa      	ldrb	r2, [r7, #11]
 801fde8:	4613      	mov	r3, r2
 801fdea:	00db      	lsls	r3, r3, #3
 801fdec:	4413      	add	r3, r2
 801fdee:	009b      	lsls	r3, r3, #2
 801fdf0:	440b      	add	r3, r1
 801fdf2:	617b      	str	r3, [r7, #20]
    len = (uint16_t)pPage[4] + 5U;
 801fdf4:	697b      	ldr	r3, [r7, #20]
 801fdf6:	3304      	adds	r3, #4
 801fdf8:	781b      	ldrb	r3, [r3, #0]
 801fdfa:	b29b      	uxth	r3, r3
 801fdfc:	3305      	adds	r3, #5
 801fdfe:	83fb      	strh	r3, [r7, #30]

    if (params[4] <= len)
 801fe00:	687b      	ldr	r3, [r7, #4]
 801fe02:	3304      	adds	r3, #4
 801fe04:	781b      	ldrb	r3, [r3, #0]
 801fe06:	b29b      	uxth	r3, r3
 801fe08:	8bfa      	ldrh	r2, [r7, #30]
 801fe0a:	429a      	cmp	r2, r3
 801fe0c:	d303      	bcc.n	801fe16 <SCSI_Inquiry+0xd6>
    {
      len = params[4];
 801fe0e:	687b      	ldr	r3, [r7, #4]
 801fe10:	3304      	adds	r3, #4
 801fe12:	781b      	ldrb	r3, [r3, #0]
 801fe14:	83fb      	strh	r3, [r7, #30]
    }

    (void)SCSI_UpdateBotData(hmsc, pPage, len);
 801fe16:	8bfb      	ldrh	r3, [r7, #30]
 801fe18:	461a      	mov	r2, r3
 801fe1a:	6979      	ldr	r1, [r7, #20]
 801fe1c:	69b8      	ldr	r0, [r7, #24]
 801fe1e:	f001 f870 	bl	8020f02 <SCSI_UpdateBotData>
  }

  return 0;
 801fe22:	2300      	movs	r3, #0
}
 801fe24:	4618      	mov	r0, r3
 801fe26:	3720      	adds	r7, #32
 801fe28:	46bd      	mov	sp, r7
 801fe2a:	bd80      	pop	{r7, pc}
 801fe2c:	20000628 	.word	0x20000628
 801fe30:	20000630 	.word	0x20000630

0801fe34 <SCSI_ReadCapacity10>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_ReadCapacity10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 801fe34:	b590      	push	{r4, r7, lr}
 801fe36:	b087      	sub	sp, #28
 801fe38:	af00      	add	r7, sp, #0
 801fe3a:	60f8      	str	r0, [r7, #12]
 801fe3c:	460b      	mov	r3, r1
 801fe3e:	607a      	str	r2, [r7, #4]
 801fe40:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  int8_t ret;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 801fe42:	68fb      	ldr	r3, [r7, #12]
 801fe44:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801fe48:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 801fe4a:	697b      	ldr	r3, [r7, #20]
 801fe4c:	2b00      	cmp	r3, #0
 801fe4e:	d102      	bne.n	801fe56 <SCSI_ReadCapacity10+0x22>
  {
    return -1;
 801fe50:	f04f 33ff 	mov.w	r3, #4294967295
 801fe54:	e074      	b.n	801ff40 <SCSI_ReadCapacity10+0x10c>
  }

  ret = ((USBD_StorageTypeDef *)pdev->pUserData)->GetCapacity(lun, &hmsc->scsi_blk_nbr, &hmsc->scsi_blk_size);
 801fe56:	68fb      	ldr	r3, [r7, #12]
 801fe58:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 801fe5c:	685c      	ldr	r4, [r3, #4]
 801fe5e:	697b      	ldr	r3, [r7, #20]
 801fe60:	f503 5383 	add.w	r3, r3, #4192	; 0x1060
 801fe64:	3308      	adds	r3, #8
 801fe66:	697a      	ldr	r2, [r7, #20]
 801fe68:	f502 5283 	add.w	r2, r2, #4192	; 0x1060
 801fe6c:	3204      	adds	r2, #4
 801fe6e:	7af8      	ldrb	r0, [r7, #11]
 801fe70:	4619      	mov	r1, r3
 801fe72:	47a0      	blx	r4
 801fe74:	4603      	mov	r3, r0
 801fe76:	74fb      	strb	r3, [r7, #19]

  if ((ret != 0) || (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED))
 801fe78:	f997 3013 	ldrsb.w	r3, [r7, #19]
 801fe7c:	2b00      	cmp	r3, #0
 801fe7e:	d106      	bne.n	801fe8e <SCSI_ReadCapacity10+0x5a>
 801fe80:	697b      	ldr	r3, [r7, #20]
 801fe82:	f503 5383 	add.w	r3, r3, #4192	; 0x1060
 801fe86:	3302      	adds	r3, #2
 801fe88:	781b      	ldrb	r3, [r3, #0]
 801fe8a:	2b02      	cmp	r3, #2
 801fe8c:	d108      	bne.n	801fea0 <SCSI_ReadCapacity10+0x6c>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 801fe8e:	7af9      	ldrb	r1, [r7, #11]
 801fe90:	233a      	movs	r3, #58	; 0x3a
 801fe92:	2202      	movs	r2, #2
 801fe94:	68f8      	ldr	r0, [r7, #12]
 801fe96:	f000 fa73 	bl	8020380 <SCSI_SenseCode>
    return -1;
 801fe9a:	f04f 33ff 	mov.w	r3, #4294967295
 801fe9e:	e04f      	b.n	801ff40 <SCSI_ReadCapacity10+0x10c>
  }

  hmsc->bot_data[0] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 24);
 801fea0:	697b      	ldr	r3, [r7, #20]
 801fea2:	f503 5383 	add.w	r3, r3, #4192	; 0x1060
 801fea6:	3308      	adds	r3, #8
 801fea8:	681b      	ldr	r3, [r3, #0]
 801feaa:	3b01      	subs	r3, #1
 801feac:	0e1b      	lsrs	r3, r3, #24
 801feae:	b2da      	uxtb	r2, r3
 801feb0:	697b      	ldr	r3, [r7, #20]
 801feb2:	741a      	strb	r2, [r3, #16]
  hmsc->bot_data[1] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 16);
 801feb4:	697b      	ldr	r3, [r7, #20]
 801feb6:	f503 5383 	add.w	r3, r3, #4192	; 0x1060
 801feba:	3308      	adds	r3, #8
 801febc:	681b      	ldr	r3, [r3, #0]
 801febe:	3b01      	subs	r3, #1
 801fec0:	0c1b      	lsrs	r3, r3, #16
 801fec2:	b2da      	uxtb	r2, r3
 801fec4:	697b      	ldr	r3, [r7, #20]
 801fec6:	745a      	strb	r2, [r3, #17]
  hmsc->bot_data[2] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >>  8);
 801fec8:	697b      	ldr	r3, [r7, #20]
 801feca:	f503 5383 	add.w	r3, r3, #4192	; 0x1060
 801fece:	3308      	adds	r3, #8
 801fed0:	681b      	ldr	r3, [r3, #0]
 801fed2:	3b01      	subs	r3, #1
 801fed4:	0a1b      	lsrs	r3, r3, #8
 801fed6:	b2da      	uxtb	r2, r3
 801fed8:	697b      	ldr	r3, [r7, #20]
 801feda:	749a      	strb	r2, [r3, #18]
  hmsc->bot_data[3] = (uint8_t)(hmsc->scsi_blk_nbr - 1U);
 801fedc:	697b      	ldr	r3, [r7, #20]
 801fede:	f503 5383 	add.w	r3, r3, #4192	; 0x1060
 801fee2:	3308      	adds	r3, #8
 801fee4:	681b      	ldr	r3, [r3, #0]
 801fee6:	b2db      	uxtb	r3, r3
 801fee8:	3b01      	subs	r3, #1
 801feea:	b2da      	uxtb	r2, r3
 801feec:	697b      	ldr	r3, [r7, #20]
 801feee:	74da      	strb	r2, [r3, #19]

  hmsc->bot_data[4] = (uint8_t)(hmsc->scsi_blk_size >>  24);
 801fef0:	697b      	ldr	r3, [r7, #20]
 801fef2:	f503 5383 	add.w	r3, r3, #4192	; 0x1060
 801fef6:	3304      	adds	r3, #4
 801fef8:	881b      	ldrh	r3, [r3, #0]
 801fefa:	161b      	asrs	r3, r3, #24
 801fefc:	b2da      	uxtb	r2, r3
 801fefe:	697b      	ldr	r3, [r7, #20]
 801ff00:	751a      	strb	r2, [r3, #20]
  hmsc->bot_data[5] = (uint8_t)(hmsc->scsi_blk_size >>  16);
 801ff02:	697b      	ldr	r3, [r7, #20]
 801ff04:	f503 5383 	add.w	r3, r3, #4192	; 0x1060
 801ff08:	3304      	adds	r3, #4
 801ff0a:	881b      	ldrh	r3, [r3, #0]
 801ff0c:	141b      	asrs	r3, r3, #16
 801ff0e:	b2da      	uxtb	r2, r3
 801ff10:	697b      	ldr	r3, [r7, #20]
 801ff12:	755a      	strb	r2, [r3, #21]
  hmsc->bot_data[6] = (uint8_t)(hmsc->scsi_blk_size >>  8);
 801ff14:	697b      	ldr	r3, [r7, #20]
 801ff16:	f503 5383 	add.w	r3, r3, #4192	; 0x1060
 801ff1a:	3304      	adds	r3, #4
 801ff1c:	881b      	ldrh	r3, [r3, #0]
 801ff1e:	0a1b      	lsrs	r3, r3, #8
 801ff20:	b29b      	uxth	r3, r3
 801ff22:	b2da      	uxtb	r2, r3
 801ff24:	697b      	ldr	r3, [r7, #20]
 801ff26:	759a      	strb	r2, [r3, #22]
  hmsc->bot_data[7] = (uint8_t)(hmsc->scsi_blk_size);
 801ff28:	697b      	ldr	r3, [r7, #20]
 801ff2a:	f503 5383 	add.w	r3, r3, #4192	; 0x1060
 801ff2e:	3304      	adds	r3, #4
 801ff30:	881b      	ldrh	r3, [r3, #0]
 801ff32:	b2da      	uxtb	r2, r3
 801ff34:	697b      	ldr	r3, [r7, #20]
 801ff36:	75da      	strb	r2, [r3, #23]

  hmsc->bot_data_length = 8U;
 801ff38:	697b      	ldr	r3, [r7, #20]
 801ff3a:	2208      	movs	r2, #8
 801ff3c:	60da      	str	r2, [r3, #12]

  return 0;
 801ff3e:	2300      	movs	r3, #0

}
 801ff40:	4618      	mov	r0, r3
 801ff42:	371c      	adds	r7, #28
 801ff44:	46bd      	mov	sp, r7
 801ff46:	bd90      	pop	{r4, r7, pc}

0801ff48 <SCSI_ReadCapacity16>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_ReadCapacity16(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 801ff48:	b590      	push	{r4, r7, lr}
 801ff4a:	b089      	sub	sp, #36	; 0x24
 801ff4c:	af00      	add	r7, sp, #0
 801ff4e:	60f8      	str	r0, [r7, #12]
 801ff50:	460b      	mov	r3, r1
 801ff52:	607a      	str	r2, [r7, #4]
 801ff54:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  uint8_t idx;
  int8_t ret;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 801ff56:	68fb      	ldr	r3, [r7, #12]
 801ff58:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801ff5c:	61bb      	str	r3, [r7, #24]

  if (hmsc == NULL)
 801ff5e:	69bb      	ldr	r3, [r7, #24]
 801ff60:	2b00      	cmp	r3, #0
 801ff62:	d102      	bne.n	801ff6a <SCSI_ReadCapacity16+0x22>
  {
    return -1;
 801ff64:	f04f 33ff 	mov.w	r3, #4294967295
 801ff68:	e0a9      	b.n	80200be <SCSI_ReadCapacity16+0x176>
  }

  ret = ((USBD_StorageTypeDef *)pdev->pUserData)->GetCapacity(lun, &hmsc->scsi_blk_nbr, &hmsc->scsi_blk_size);
 801ff6a:	68fb      	ldr	r3, [r7, #12]
 801ff6c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 801ff70:	685c      	ldr	r4, [r3, #4]
 801ff72:	69bb      	ldr	r3, [r7, #24]
 801ff74:	f503 5383 	add.w	r3, r3, #4192	; 0x1060
 801ff78:	3308      	adds	r3, #8
 801ff7a:	69ba      	ldr	r2, [r7, #24]
 801ff7c:	f502 5283 	add.w	r2, r2, #4192	; 0x1060
 801ff80:	3204      	adds	r2, #4
 801ff82:	7af8      	ldrb	r0, [r7, #11]
 801ff84:	4619      	mov	r1, r3
 801ff86:	47a0      	blx	r4
 801ff88:	4603      	mov	r3, r0
 801ff8a:	75fb      	strb	r3, [r7, #23]

  if ((ret != 0) || (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED))
 801ff8c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 801ff90:	2b00      	cmp	r3, #0
 801ff92:	d106      	bne.n	801ffa2 <SCSI_ReadCapacity16+0x5a>
 801ff94:	69bb      	ldr	r3, [r7, #24]
 801ff96:	f503 5383 	add.w	r3, r3, #4192	; 0x1060
 801ff9a:	3302      	adds	r3, #2
 801ff9c:	781b      	ldrb	r3, [r3, #0]
 801ff9e:	2b02      	cmp	r3, #2
 801ffa0:	d108      	bne.n	801ffb4 <SCSI_ReadCapacity16+0x6c>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 801ffa2:	7af9      	ldrb	r1, [r7, #11]
 801ffa4:	233a      	movs	r3, #58	; 0x3a
 801ffa6:	2202      	movs	r2, #2
 801ffa8:	68f8      	ldr	r0, [r7, #12]
 801ffaa:	f000 f9e9 	bl	8020380 <SCSI_SenseCode>
    return -1;
 801ffae:	f04f 33ff 	mov.w	r3, #4294967295
 801ffb2:	e084      	b.n	80200be <SCSI_ReadCapacity16+0x176>
  }

  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 801ffb4:	687b      	ldr	r3, [r7, #4]
 801ffb6:	330a      	adds	r3, #10
 801ffb8:	781b      	ldrb	r3, [r3, #0]
 801ffba:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[11] << 16) |
 801ffbc:	687b      	ldr	r3, [r7, #4]
 801ffbe:	330b      	adds	r3, #11
 801ffc0:	781b      	ldrb	r3, [r3, #0]
 801ffc2:	041b      	lsls	r3, r3, #16
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 801ffc4:	431a      	orrs	r2, r3
                          ((uint32_t)params[12] <<  8) |
 801ffc6:	687b      	ldr	r3, [r7, #4]
 801ffc8:	330c      	adds	r3, #12
 801ffca:	781b      	ldrb	r3, [r3, #0]
 801ffcc:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[11] << 16) |
 801ffce:	4313      	orrs	r3, r2
                          (uint32_t)params[13];
 801ffd0:	687a      	ldr	r2, [r7, #4]
 801ffd2:	320d      	adds	r2, #13
 801ffd4:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[12] <<  8) |
 801ffd6:	431a      	orrs	r2, r3
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 801ffd8:	69bb      	ldr	r3, [r7, #24]
 801ffda:	60da      	str	r2, [r3, #12]

  for (idx = 0U; idx < hmsc->bot_data_length; idx++)
 801ffdc:	2300      	movs	r3, #0
 801ffde:	77fb      	strb	r3, [r7, #31]
 801ffe0:	e007      	b.n	801fff2 <SCSI_ReadCapacity16+0xaa>
  {
    hmsc->bot_data[idx] = 0U;
 801ffe2:	7ffb      	ldrb	r3, [r7, #31]
 801ffe4:	69ba      	ldr	r2, [r7, #24]
 801ffe6:	4413      	add	r3, r2
 801ffe8:	2200      	movs	r2, #0
 801ffea:	741a      	strb	r2, [r3, #16]
  for (idx = 0U; idx < hmsc->bot_data_length; idx++)
 801ffec:	7ffb      	ldrb	r3, [r7, #31]
 801ffee:	3301      	adds	r3, #1
 801fff0:	77fb      	strb	r3, [r7, #31]
 801fff2:	7ffa      	ldrb	r2, [r7, #31]
 801fff4:	69bb      	ldr	r3, [r7, #24]
 801fff6:	68db      	ldr	r3, [r3, #12]
 801fff8:	429a      	cmp	r2, r3
 801fffa:	d3f2      	bcc.n	801ffe2 <SCSI_ReadCapacity16+0x9a>
  }

  hmsc->bot_data[4] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 24);
 801fffc:	69bb      	ldr	r3, [r7, #24]
 801fffe:	f503 5383 	add.w	r3, r3, #4192	; 0x1060
 8020002:	3308      	adds	r3, #8
 8020004:	681b      	ldr	r3, [r3, #0]
 8020006:	3b01      	subs	r3, #1
 8020008:	0e1b      	lsrs	r3, r3, #24
 802000a:	b2da      	uxtb	r2, r3
 802000c:	69bb      	ldr	r3, [r7, #24]
 802000e:	751a      	strb	r2, [r3, #20]
  hmsc->bot_data[5] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 16);
 8020010:	69bb      	ldr	r3, [r7, #24]
 8020012:	f503 5383 	add.w	r3, r3, #4192	; 0x1060
 8020016:	3308      	adds	r3, #8
 8020018:	681b      	ldr	r3, [r3, #0]
 802001a:	3b01      	subs	r3, #1
 802001c:	0c1b      	lsrs	r3, r3, #16
 802001e:	b2da      	uxtb	r2, r3
 8020020:	69bb      	ldr	r3, [r7, #24]
 8020022:	755a      	strb	r2, [r3, #21]
  hmsc->bot_data[6] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >>  8);
 8020024:	69bb      	ldr	r3, [r7, #24]
 8020026:	f503 5383 	add.w	r3, r3, #4192	; 0x1060
 802002a:	3308      	adds	r3, #8
 802002c:	681b      	ldr	r3, [r3, #0]
 802002e:	3b01      	subs	r3, #1
 8020030:	0a1b      	lsrs	r3, r3, #8
 8020032:	b2da      	uxtb	r2, r3
 8020034:	69bb      	ldr	r3, [r7, #24]
 8020036:	759a      	strb	r2, [r3, #22]
  hmsc->bot_data[7] = (uint8_t)(hmsc->scsi_blk_nbr - 1U);
 8020038:	69bb      	ldr	r3, [r7, #24]
 802003a:	f503 5383 	add.w	r3, r3, #4192	; 0x1060
 802003e:	3308      	adds	r3, #8
 8020040:	681b      	ldr	r3, [r3, #0]
 8020042:	b2db      	uxtb	r3, r3
 8020044:	3b01      	subs	r3, #1
 8020046:	b2da      	uxtb	r2, r3
 8020048:	69bb      	ldr	r3, [r7, #24]
 802004a:	75da      	strb	r2, [r3, #23]

  hmsc->bot_data[8] = (uint8_t)(hmsc->scsi_blk_size >>  24);
 802004c:	69bb      	ldr	r3, [r7, #24]
 802004e:	f503 5383 	add.w	r3, r3, #4192	; 0x1060
 8020052:	3304      	adds	r3, #4
 8020054:	881b      	ldrh	r3, [r3, #0]
 8020056:	161b      	asrs	r3, r3, #24
 8020058:	b2da      	uxtb	r2, r3
 802005a:	69bb      	ldr	r3, [r7, #24]
 802005c:	761a      	strb	r2, [r3, #24]
  hmsc->bot_data[9] = (uint8_t)(hmsc->scsi_blk_size >>  16);
 802005e:	69bb      	ldr	r3, [r7, #24]
 8020060:	f503 5383 	add.w	r3, r3, #4192	; 0x1060
 8020064:	3304      	adds	r3, #4
 8020066:	881b      	ldrh	r3, [r3, #0]
 8020068:	141b      	asrs	r3, r3, #16
 802006a:	b2da      	uxtb	r2, r3
 802006c:	69bb      	ldr	r3, [r7, #24]
 802006e:	765a      	strb	r2, [r3, #25]
  hmsc->bot_data[10] = (uint8_t)(hmsc->scsi_blk_size >>  8);
 8020070:	69bb      	ldr	r3, [r7, #24]
 8020072:	f503 5383 	add.w	r3, r3, #4192	; 0x1060
 8020076:	3304      	adds	r3, #4
 8020078:	881b      	ldrh	r3, [r3, #0]
 802007a:	0a1b      	lsrs	r3, r3, #8
 802007c:	b29b      	uxth	r3, r3
 802007e:	b2da      	uxtb	r2, r3
 8020080:	69bb      	ldr	r3, [r7, #24]
 8020082:	769a      	strb	r2, [r3, #26]
  hmsc->bot_data[11] = (uint8_t)(hmsc->scsi_blk_size);
 8020084:	69bb      	ldr	r3, [r7, #24]
 8020086:	f503 5383 	add.w	r3, r3, #4192	; 0x1060
 802008a:	3304      	adds	r3, #4
 802008c:	881b      	ldrh	r3, [r3, #0]
 802008e:	b2da      	uxtb	r2, r3
 8020090:	69bb      	ldr	r3, [r7, #24]
 8020092:	76da      	strb	r2, [r3, #27]

  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 8020094:	687b      	ldr	r3, [r7, #4]
 8020096:	330a      	adds	r3, #10
 8020098:	781b      	ldrb	r3, [r3, #0]
 802009a:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[11] << 16) |
 802009c:	687b      	ldr	r3, [r7, #4]
 802009e:	330b      	adds	r3, #11
 80200a0:	781b      	ldrb	r3, [r3, #0]
 80200a2:	041b      	lsls	r3, r3, #16
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 80200a4:	431a      	orrs	r2, r3
                          ((uint32_t)params[12] <<  8) |
 80200a6:	687b      	ldr	r3, [r7, #4]
 80200a8:	330c      	adds	r3, #12
 80200aa:	781b      	ldrb	r3, [r3, #0]
 80200ac:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[11] << 16) |
 80200ae:	4313      	orrs	r3, r2
                          (uint32_t)params[13];
 80200b0:	687a      	ldr	r2, [r7, #4]
 80200b2:	320d      	adds	r2, #13
 80200b4:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[12] <<  8) |
 80200b6:	431a      	orrs	r2, r3
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 80200b8:	69bb      	ldr	r3, [r7, #24]
 80200ba:	60da      	str	r2, [r3, #12]

  return 0;
 80200bc:	2300      	movs	r3, #0
}
 80200be:	4618      	mov	r0, r3
 80200c0:	3724      	adds	r7, #36	; 0x24
 80200c2:	46bd      	mov	sp, r7
 80200c4:	bd90      	pop	{r4, r7, pc}

080200c6 <SCSI_ReadFormatCapacity>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_ReadFormatCapacity(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 80200c6:	b580      	push	{r7, lr}
 80200c8:	b088      	sub	sp, #32
 80200ca:	af00      	add	r7, sp, #0
 80200cc:	60f8      	str	r0, [r7, #12]
 80200ce:	460b      	mov	r3, r1
 80200d0:	607a      	str	r2, [r7, #4]
 80200d2:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  uint16_t blk_size;
  uint32_t blk_nbr;
  uint16_t i;
  int8_t ret;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 80200d4:	68fb      	ldr	r3, [r7, #12]
 80200d6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80200da:	61bb      	str	r3, [r7, #24]

  if (hmsc == NULL)
 80200dc:	69bb      	ldr	r3, [r7, #24]
 80200de:	2b00      	cmp	r3, #0
 80200e0:	d102      	bne.n	80200e8 <SCSI_ReadFormatCapacity+0x22>
  {
    return -1;
 80200e2:	f04f 33ff 	mov.w	r3, #4294967295
 80200e6:	e05e      	b.n	80201a6 <SCSI_ReadFormatCapacity+0xe0>
  }

  ret = ((USBD_StorageTypeDef *)pdev->pUserData)->GetCapacity(lun, &blk_nbr, &blk_size);
 80200e8:	68fb      	ldr	r3, [r7, #12]
 80200ea:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80200ee:	685b      	ldr	r3, [r3, #4]
 80200f0:	f107 0214 	add.w	r2, r7, #20
 80200f4:	f107 0110 	add.w	r1, r7, #16
 80200f8:	7af8      	ldrb	r0, [r7, #11]
 80200fa:	4798      	blx	r3
 80200fc:	4603      	mov	r3, r0
 80200fe:	75fb      	strb	r3, [r7, #23]

  if ((ret != 0) || (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED))
 8020100:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8020104:	2b00      	cmp	r3, #0
 8020106:	d106      	bne.n	8020116 <SCSI_ReadFormatCapacity+0x50>
 8020108:	69bb      	ldr	r3, [r7, #24]
 802010a:	f503 5383 	add.w	r3, r3, #4192	; 0x1060
 802010e:	3302      	adds	r3, #2
 8020110:	781b      	ldrb	r3, [r3, #0]
 8020112:	2b02      	cmp	r3, #2
 8020114:	d108      	bne.n	8020128 <SCSI_ReadFormatCapacity+0x62>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8020116:	7af9      	ldrb	r1, [r7, #11]
 8020118:	233a      	movs	r3, #58	; 0x3a
 802011a:	2202      	movs	r2, #2
 802011c:	68f8      	ldr	r0, [r7, #12]
 802011e:	f000 f92f 	bl	8020380 <SCSI_SenseCode>
    return -1;
 8020122:	f04f 33ff 	mov.w	r3, #4294967295
 8020126:	e03e      	b.n	80201a6 <SCSI_ReadFormatCapacity+0xe0>
  }

  for (i = 0U; i < 12U ; i++)
 8020128:	2300      	movs	r3, #0
 802012a:	83fb      	strh	r3, [r7, #30]
 802012c:	e007      	b.n	802013e <SCSI_ReadFormatCapacity+0x78>
  {
    hmsc->bot_data[i] = 0U;
 802012e:	8bfb      	ldrh	r3, [r7, #30]
 8020130:	69ba      	ldr	r2, [r7, #24]
 8020132:	4413      	add	r3, r2
 8020134:	2200      	movs	r2, #0
 8020136:	741a      	strb	r2, [r3, #16]
  for (i = 0U; i < 12U ; i++)
 8020138:	8bfb      	ldrh	r3, [r7, #30]
 802013a:	3301      	adds	r3, #1
 802013c:	83fb      	strh	r3, [r7, #30]
 802013e:	8bfb      	ldrh	r3, [r7, #30]
 8020140:	2b0b      	cmp	r3, #11
 8020142:	d9f4      	bls.n	802012e <SCSI_ReadFormatCapacity+0x68>
  }

  hmsc->bot_data[3] = 0x08U;
 8020144:	69bb      	ldr	r3, [r7, #24]
 8020146:	2208      	movs	r2, #8
 8020148:	74da      	strb	r2, [r3, #19]
  hmsc->bot_data[4] = (uint8_t)((blk_nbr - 1U) >> 24);
 802014a:	693b      	ldr	r3, [r7, #16]
 802014c:	3b01      	subs	r3, #1
 802014e:	0e1b      	lsrs	r3, r3, #24
 8020150:	b2da      	uxtb	r2, r3
 8020152:	69bb      	ldr	r3, [r7, #24]
 8020154:	751a      	strb	r2, [r3, #20]
  hmsc->bot_data[5] = (uint8_t)((blk_nbr - 1U) >> 16);
 8020156:	693b      	ldr	r3, [r7, #16]
 8020158:	3b01      	subs	r3, #1
 802015a:	0c1b      	lsrs	r3, r3, #16
 802015c:	b2da      	uxtb	r2, r3
 802015e:	69bb      	ldr	r3, [r7, #24]
 8020160:	755a      	strb	r2, [r3, #21]
  hmsc->bot_data[6] = (uint8_t)((blk_nbr - 1U) >>  8);
 8020162:	693b      	ldr	r3, [r7, #16]
 8020164:	3b01      	subs	r3, #1
 8020166:	0a1b      	lsrs	r3, r3, #8
 8020168:	b2da      	uxtb	r2, r3
 802016a:	69bb      	ldr	r3, [r7, #24]
 802016c:	759a      	strb	r2, [r3, #22]
  hmsc->bot_data[7] = (uint8_t)(blk_nbr - 1U);
 802016e:	693b      	ldr	r3, [r7, #16]
 8020170:	b2db      	uxtb	r3, r3
 8020172:	3b01      	subs	r3, #1
 8020174:	b2da      	uxtb	r2, r3
 8020176:	69bb      	ldr	r3, [r7, #24]
 8020178:	75da      	strb	r2, [r3, #23]

  hmsc->bot_data[8] = 0x02U;
 802017a:	69bb      	ldr	r3, [r7, #24]
 802017c:	2202      	movs	r2, #2
 802017e:	761a      	strb	r2, [r3, #24]
  hmsc->bot_data[9] = (uint8_t)(blk_size >>  16);
 8020180:	8abb      	ldrh	r3, [r7, #20]
 8020182:	141b      	asrs	r3, r3, #16
 8020184:	b2da      	uxtb	r2, r3
 8020186:	69bb      	ldr	r3, [r7, #24]
 8020188:	765a      	strb	r2, [r3, #25]
  hmsc->bot_data[10] = (uint8_t)(blk_size >>  8);
 802018a:	8abb      	ldrh	r3, [r7, #20]
 802018c:	0a1b      	lsrs	r3, r3, #8
 802018e:	b29b      	uxth	r3, r3
 8020190:	b2da      	uxtb	r2, r3
 8020192:	69bb      	ldr	r3, [r7, #24]
 8020194:	769a      	strb	r2, [r3, #26]
  hmsc->bot_data[11] = (uint8_t)(blk_size);
 8020196:	8abb      	ldrh	r3, [r7, #20]
 8020198:	b2da      	uxtb	r2, r3
 802019a:	69bb      	ldr	r3, [r7, #24]
 802019c:	76da      	strb	r2, [r3, #27]

  hmsc->bot_data_length = 12U;
 802019e:	69bb      	ldr	r3, [r7, #24]
 80201a0:	220c      	movs	r2, #12
 80201a2:	60da      	str	r2, [r3, #12]

  return 0;
 80201a4:	2300      	movs	r3, #0
}
 80201a6:	4618      	mov	r0, r3
 80201a8:	3720      	adds	r7, #32
 80201aa:	46bd      	mov	sp, r7
 80201ac:	bd80      	pop	{r7, pc}
	...

080201b0 <SCSI_ModeSense6>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_ModeSense6(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 80201b0:	b580      	push	{r7, lr}
 80201b2:	b086      	sub	sp, #24
 80201b4:	af00      	add	r7, sp, #0
 80201b6:	60f8      	str	r0, [r7, #12]
 80201b8:	460b      	mov	r3, r1
 80201ba:	607a      	str	r2, [r7, #4]
 80201bc:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 80201be:	68fb      	ldr	r3, [r7, #12]
 80201c0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80201c4:	613b      	str	r3, [r7, #16]
  uint16_t len = MODE_SENSE6_LEN;
 80201c6:	2317      	movs	r3, #23
 80201c8:	82fb      	strh	r3, [r7, #22]

  if (hmsc == NULL)
 80201ca:	693b      	ldr	r3, [r7, #16]
 80201cc:	2b00      	cmp	r3, #0
 80201ce:	d102      	bne.n	80201d6 <SCSI_ModeSense6+0x26>
  {
    return -1;
 80201d0:	f04f 33ff 	mov.w	r3, #4294967295
 80201d4:	e011      	b.n	80201fa <SCSI_ModeSense6+0x4a>
  }

  if (params[4] <= len)
 80201d6:	687b      	ldr	r3, [r7, #4]
 80201d8:	3304      	adds	r3, #4
 80201da:	781b      	ldrb	r3, [r3, #0]
 80201dc:	b29b      	uxth	r3, r3
 80201de:	8afa      	ldrh	r2, [r7, #22]
 80201e0:	429a      	cmp	r2, r3
 80201e2:	d303      	bcc.n	80201ec <SCSI_ModeSense6+0x3c>
  {
    len = params[4];
 80201e4:	687b      	ldr	r3, [r7, #4]
 80201e6:	3304      	adds	r3, #4
 80201e8:	781b      	ldrb	r3, [r3, #0]
 80201ea:	82fb      	strh	r3, [r7, #22]
  }

  (void)SCSI_UpdateBotData(hmsc, MSC_Mode_Sense6_data, len);
 80201ec:	8afb      	ldrh	r3, [r7, #22]
 80201ee:	461a      	mov	r2, r3
 80201f0:	4904      	ldr	r1, [pc, #16]	; (8020204 <SCSI_ModeSense6+0x54>)
 80201f2:	6938      	ldr	r0, [r7, #16]
 80201f4:	f000 fe85 	bl	8020f02 <SCSI_UpdateBotData>

  return 0;
 80201f8:	2300      	movs	r3, #0
}
 80201fa:	4618      	mov	r0, r3
 80201fc:	3718      	adds	r7, #24
 80201fe:	46bd      	mov	sp, r7
 8020200:	bd80      	pop	{r7, pc}
 8020202:	bf00      	nop
 8020204:	20000638 	.word	0x20000638

08020208 <SCSI_ModeSense10>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_ModeSense10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8020208:	b580      	push	{r7, lr}
 802020a:	b086      	sub	sp, #24
 802020c:	af00      	add	r7, sp, #0
 802020e:	60f8      	str	r0, [r7, #12]
 8020210:	460b      	mov	r3, r1
 8020212:	607a      	str	r2, [r7, #4]
 8020214:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8020216:	68fb      	ldr	r3, [r7, #12]
 8020218:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 802021c:	613b      	str	r3, [r7, #16]
  uint16_t len = MODE_SENSE10_LEN;
 802021e:	231b      	movs	r3, #27
 8020220:	82fb      	strh	r3, [r7, #22]

  if (hmsc == NULL)
 8020222:	693b      	ldr	r3, [r7, #16]
 8020224:	2b00      	cmp	r3, #0
 8020226:	d102      	bne.n	802022e <SCSI_ModeSense10+0x26>
  {
    return -1;
 8020228:	f04f 33ff 	mov.w	r3, #4294967295
 802022c:	e011      	b.n	8020252 <SCSI_ModeSense10+0x4a>
  }

  if (params[8] <= len)
 802022e:	687b      	ldr	r3, [r7, #4]
 8020230:	3308      	adds	r3, #8
 8020232:	781b      	ldrb	r3, [r3, #0]
 8020234:	b29b      	uxth	r3, r3
 8020236:	8afa      	ldrh	r2, [r7, #22]
 8020238:	429a      	cmp	r2, r3
 802023a:	d303      	bcc.n	8020244 <SCSI_ModeSense10+0x3c>
  {
    len = params[8];
 802023c:	687b      	ldr	r3, [r7, #4]
 802023e:	3308      	adds	r3, #8
 8020240:	781b      	ldrb	r3, [r3, #0]
 8020242:	82fb      	strh	r3, [r7, #22]
  }

  (void)SCSI_UpdateBotData(hmsc, MSC_Mode_Sense10_data, len);
 8020244:	8afb      	ldrh	r3, [r7, #22]
 8020246:	461a      	mov	r2, r3
 8020248:	4904      	ldr	r1, [pc, #16]	; (802025c <SCSI_ModeSense10+0x54>)
 802024a:	6938      	ldr	r0, [r7, #16]
 802024c:	f000 fe59 	bl	8020f02 <SCSI_UpdateBotData>

  return 0;
 8020250:	2300      	movs	r3, #0
}
 8020252:	4618      	mov	r0, r3
 8020254:	3718      	adds	r7, #24
 8020256:	46bd      	mov	sp, r7
 8020258:	bd80      	pop	{r7, pc}
 802025a:	bf00      	nop
 802025c:	20000650 	.word	0x20000650

08020260 <SCSI_RequestSense>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_RequestSense(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8020260:	b580      	push	{r7, lr}
 8020262:	b086      	sub	sp, #24
 8020264:	af00      	add	r7, sp, #0
 8020266:	60f8      	str	r0, [r7, #12]
 8020268:	460b      	mov	r3, r1
 802026a:	607a      	str	r2, [r7, #4]
 802026c:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  uint8_t i;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 802026e:	68fb      	ldr	r3, [r7, #12]
 8020270:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8020274:	613b      	str	r3, [r7, #16]

  if (hmsc == NULL)
 8020276:	693b      	ldr	r3, [r7, #16]
 8020278:	2b00      	cmp	r3, #0
 802027a:	d102      	bne.n	8020282 <SCSI_RequestSense+0x22>
  {
    return -1;
 802027c:	f04f 33ff 	mov.w	r3, #4294967295
 8020280:	e07a      	b.n	8020378 <SCSI_RequestSense+0x118>
  }

  if (hmsc->cbw.dDataLength == 0U)
 8020282:	693b      	ldr	r3, [r7, #16]
 8020284:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8020288:	3318      	adds	r3, #24
 802028a:	681b      	ldr	r3, [r3, #0]
 802028c:	2b00      	cmp	r3, #0
 802028e:	d10c      	bne.n	80202aa <SCSI_RequestSense+0x4a>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8020290:	693b      	ldr	r3, [r7, #16]
 8020292:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8020296:	331d      	adds	r3, #29
 8020298:	7819      	ldrb	r1, [r3, #0]
 802029a:	2320      	movs	r3, #32
 802029c:	2205      	movs	r2, #5
 802029e:	68f8      	ldr	r0, [r7, #12]
 80202a0:	f000 f86e 	bl	8020380 <SCSI_SenseCode>
    return -1;
 80202a4:	f04f 33ff 	mov.w	r3, #4294967295
 80202a8:	e066      	b.n	8020378 <SCSI_RequestSense+0x118>
  }

  for (i = 0U; i < REQUEST_SENSE_DATA_LEN; i++)
 80202aa:	2300      	movs	r3, #0
 80202ac:	75fb      	strb	r3, [r7, #23]
 80202ae:	e007      	b.n	80202c0 <SCSI_RequestSense+0x60>
  {
    hmsc->bot_data[i] = 0U;
 80202b0:	7dfb      	ldrb	r3, [r7, #23]
 80202b2:	693a      	ldr	r2, [r7, #16]
 80202b4:	4413      	add	r3, r2
 80202b6:	2200      	movs	r2, #0
 80202b8:	741a      	strb	r2, [r3, #16]
  for (i = 0U; i < REQUEST_SENSE_DATA_LEN; i++)
 80202ba:	7dfb      	ldrb	r3, [r7, #23]
 80202bc:	3301      	adds	r3, #1
 80202be:	75fb      	strb	r3, [r7, #23]
 80202c0:	7dfb      	ldrb	r3, [r7, #23]
 80202c2:	2b11      	cmp	r3, #17
 80202c4:	d9f4      	bls.n	80202b0 <SCSI_RequestSense+0x50>
  }

  hmsc->bot_data[0] = 0x70U;
 80202c6:	693b      	ldr	r3, [r7, #16]
 80202c8:	2270      	movs	r2, #112	; 0x70
 80202ca:	741a      	strb	r2, [r3, #16]
  hmsc->bot_data[7] = REQUEST_SENSE_DATA_LEN - 6U;
 80202cc:	693b      	ldr	r3, [r7, #16]
 80202ce:	220c      	movs	r2, #12
 80202d0:	75da      	strb	r2, [r3, #23]

  if ((hmsc->scsi_sense_head != hmsc->scsi_sense_tail))
 80202d2:	693b      	ldr	r3, [r7, #16]
 80202d4:	f503 5383 	add.w	r3, r3, #4192	; 0x1060
 80202d8:	781a      	ldrb	r2, [r3, #0]
 80202da:	693b      	ldr	r3, [r7, #16]
 80202dc:	f503 5383 	add.w	r3, r3, #4192	; 0x1060
 80202e0:	3301      	adds	r3, #1
 80202e2:	781b      	ldrb	r3, [r3, #0]
 80202e4:	429a      	cmp	r2, r3
 80202e6:	d038      	beq.n	802035a <SCSI_RequestSense+0xfa>
  {
    hmsc->bot_data[2] = (uint8_t)hmsc->scsi_sense[hmsc->scsi_sense_head].Skey;
 80202e8:	693b      	ldr	r3, [r7, #16]
 80202ea:	f503 5383 	add.w	r3, r3, #4192	; 0x1060
 80202ee:	781b      	ldrb	r3, [r3, #0]
 80202f0:	461a      	mov	r2, r3
 80202f2:	693b      	ldr	r3, [r7, #16]
 80202f4:	f502 7202 	add.w	r2, r2, #520	; 0x208
 80202f8:	f813 2032 	ldrb.w	r2, [r3, r2, lsl #3]
 80202fc:	693b      	ldr	r3, [r7, #16]
 80202fe:	749a      	strb	r2, [r3, #18]
    hmsc->bot_data[12] = (uint8_t)hmsc->scsi_sense[hmsc->scsi_sense_head].w.b.ASC;
 8020300:	693b      	ldr	r3, [r7, #16]
 8020302:	f503 5383 	add.w	r3, r3, #4192	; 0x1060
 8020306:	781b      	ldrb	r3, [r3, #0]
 8020308:	693a      	ldr	r2, [r7, #16]
 802030a:	f503 7302 	add.w	r3, r3, #520	; 0x208
 802030e:	00db      	lsls	r3, r3, #3
 8020310:	4413      	add	r3, r2
 8020312:	791a      	ldrb	r2, [r3, #4]
 8020314:	693b      	ldr	r3, [r7, #16]
 8020316:	771a      	strb	r2, [r3, #28]
    hmsc->bot_data[13] = (uint8_t)hmsc->scsi_sense[hmsc->scsi_sense_head].w.b.ASCQ;
 8020318:	693b      	ldr	r3, [r7, #16]
 802031a:	f503 5383 	add.w	r3, r3, #4192	; 0x1060
 802031e:	781b      	ldrb	r3, [r3, #0]
 8020320:	693a      	ldr	r2, [r7, #16]
 8020322:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8020326:	00db      	lsls	r3, r3, #3
 8020328:	4413      	add	r3, r2
 802032a:	795a      	ldrb	r2, [r3, #5]
 802032c:	693b      	ldr	r3, [r7, #16]
 802032e:	775a      	strb	r2, [r3, #29]
    hmsc->scsi_sense_head++;
 8020330:	693b      	ldr	r3, [r7, #16]
 8020332:	f503 5383 	add.w	r3, r3, #4192	; 0x1060
 8020336:	781b      	ldrb	r3, [r3, #0]
 8020338:	3301      	adds	r3, #1
 802033a:	b2da      	uxtb	r2, r3
 802033c:	693b      	ldr	r3, [r7, #16]
 802033e:	f503 5383 	add.w	r3, r3, #4192	; 0x1060
 8020342:	701a      	strb	r2, [r3, #0]

    if (hmsc->scsi_sense_head == SENSE_LIST_DEEPTH)
 8020344:	693b      	ldr	r3, [r7, #16]
 8020346:	f503 5383 	add.w	r3, r3, #4192	; 0x1060
 802034a:	781b      	ldrb	r3, [r3, #0]
 802034c:	2b04      	cmp	r3, #4
 802034e:	d104      	bne.n	802035a <SCSI_RequestSense+0xfa>
    {
      hmsc->scsi_sense_head = 0U;
 8020350:	693b      	ldr	r3, [r7, #16]
 8020352:	f503 5383 	add.w	r3, r3, #4192	; 0x1060
 8020356:	2200      	movs	r2, #0
 8020358:	701a      	strb	r2, [r3, #0]
    }
  }

  hmsc->bot_data_length = REQUEST_SENSE_DATA_LEN;
 802035a:	693b      	ldr	r3, [r7, #16]
 802035c:	2212      	movs	r2, #18
 802035e:	60da      	str	r2, [r3, #12]

  if (params[4] <= REQUEST_SENSE_DATA_LEN)
 8020360:	687b      	ldr	r3, [r7, #4]
 8020362:	3304      	adds	r3, #4
 8020364:	781b      	ldrb	r3, [r3, #0]
 8020366:	2b12      	cmp	r3, #18
 8020368:	d805      	bhi.n	8020376 <SCSI_RequestSense+0x116>
  {
    hmsc->bot_data_length = params[4];
 802036a:	687b      	ldr	r3, [r7, #4]
 802036c:	3304      	adds	r3, #4
 802036e:	781b      	ldrb	r3, [r3, #0]
 8020370:	461a      	mov	r2, r3
 8020372:	693b      	ldr	r3, [r7, #16]
 8020374:	60da      	str	r2, [r3, #12]
  }

  return 0;
 8020376:	2300      	movs	r3, #0
}
 8020378:	4618      	mov	r0, r3
 802037a:	3718      	adds	r7, #24
 802037c:	46bd      	mov	sp, r7
 802037e:	bd80      	pop	{r7, pc}

08020380 <SCSI_SenseCode>:
  * @param  ASC: Additional Sense Code
  * @retval none

  */
void SCSI_SenseCode(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t sKey, uint8_t ASC)
{
 8020380:	b480      	push	{r7}
 8020382:	b085      	sub	sp, #20
 8020384:	af00      	add	r7, sp, #0
 8020386:	6078      	str	r0, [r7, #4]
 8020388:	4608      	mov	r0, r1
 802038a:	4611      	mov	r1, r2
 802038c:	461a      	mov	r2, r3
 802038e:	4603      	mov	r3, r0
 8020390:	70fb      	strb	r3, [r7, #3]
 8020392:	460b      	mov	r3, r1
 8020394:	70bb      	strb	r3, [r7, #2]
 8020396:	4613      	mov	r3, r2
 8020398:	707b      	strb	r3, [r7, #1]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 802039a:	687b      	ldr	r3, [r7, #4]
 802039c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80203a0:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 80203a2:	68fb      	ldr	r3, [r7, #12]
 80203a4:	2b00      	cmp	r3, #0
 80203a6:	d03d      	beq.n	8020424 <SCSI_SenseCode+0xa4>
  {
    return;
  }

  hmsc->scsi_sense[hmsc->scsi_sense_tail].Skey = sKey;
 80203a8:	68fb      	ldr	r3, [r7, #12]
 80203aa:	f503 5383 	add.w	r3, r3, #4192	; 0x1060
 80203ae:	3301      	adds	r3, #1
 80203b0:	781b      	ldrb	r3, [r3, #0]
 80203b2:	461a      	mov	r2, r3
 80203b4:	68fb      	ldr	r3, [r7, #12]
 80203b6:	f502 7202 	add.w	r2, r2, #520	; 0x208
 80203ba:	78b9      	ldrb	r1, [r7, #2]
 80203bc:	f803 1032 	strb.w	r1, [r3, r2, lsl #3]
  hmsc->scsi_sense[hmsc->scsi_sense_tail].w.b.ASC = ASC;
 80203c0:	68fb      	ldr	r3, [r7, #12]
 80203c2:	f503 5383 	add.w	r3, r3, #4192	; 0x1060
 80203c6:	3301      	adds	r3, #1
 80203c8:	781b      	ldrb	r3, [r3, #0]
 80203ca:	68fa      	ldr	r2, [r7, #12]
 80203cc:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80203d0:	00db      	lsls	r3, r3, #3
 80203d2:	4413      	add	r3, r2
 80203d4:	787a      	ldrb	r2, [r7, #1]
 80203d6:	711a      	strb	r2, [r3, #4]
  hmsc->scsi_sense[hmsc->scsi_sense_tail].w.b.ASCQ = 0U;
 80203d8:	68fb      	ldr	r3, [r7, #12]
 80203da:	f503 5383 	add.w	r3, r3, #4192	; 0x1060
 80203de:	3301      	adds	r3, #1
 80203e0:	781b      	ldrb	r3, [r3, #0]
 80203e2:	68fa      	ldr	r2, [r7, #12]
 80203e4:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80203e8:	00db      	lsls	r3, r3, #3
 80203ea:	4413      	add	r3, r2
 80203ec:	2200      	movs	r2, #0
 80203ee:	715a      	strb	r2, [r3, #5]
  hmsc->scsi_sense_tail++;
 80203f0:	68fb      	ldr	r3, [r7, #12]
 80203f2:	f503 5383 	add.w	r3, r3, #4192	; 0x1060
 80203f6:	3301      	adds	r3, #1
 80203f8:	781b      	ldrb	r3, [r3, #0]
 80203fa:	3301      	adds	r3, #1
 80203fc:	b2da      	uxtb	r2, r3
 80203fe:	68fb      	ldr	r3, [r7, #12]
 8020400:	f503 5383 	add.w	r3, r3, #4192	; 0x1060
 8020404:	3301      	adds	r3, #1
 8020406:	701a      	strb	r2, [r3, #0]

  if (hmsc->scsi_sense_tail == SENSE_LIST_DEEPTH)
 8020408:	68fb      	ldr	r3, [r7, #12]
 802040a:	f503 5383 	add.w	r3, r3, #4192	; 0x1060
 802040e:	3301      	adds	r3, #1
 8020410:	781b      	ldrb	r3, [r3, #0]
 8020412:	2b04      	cmp	r3, #4
 8020414:	d107      	bne.n	8020426 <SCSI_SenseCode+0xa6>
  {
    hmsc->scsi_sense_tail = 0U;
 8020416:	68fb      	ldr	r3, [r7, #12]
 8020418:	f503 5383 	add.w	r3, r3, #4192	; 0x1060
 802041c:	3301      	adds	r3, #1
 802041e:	2200      	movs	r2, #0
 8020420:	701a      	strb	r2, [r3, #0]
 8020422:	e000      	b.n	8020426 <SCSI_SenseCode+0xa6>
    return;
 8020424:	bf00      	nop
  }
}
 8020426:	3714      	adds	r7, #20
 8020428:	46bd      	mov	sp, r7
 802042a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802042e:	4770      	bx	lr

08020430 <SCSI_StartStopUnit>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_StartStopUnit(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8020430:	b580      	push	{r7, lr}
 8020432:	b086      	sub	sp, #24
 8020434:	af00      	add	r7, sp, #0
 8020436:	60f8      	str	r0, [r7, #12]
 8020438:	460b      	mov	r3, r1
 802043a:	607a      	str	r2, [r7, #4]
 802043c:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 802043e:	68fb      	ldr	r3, [r7, #12]
 8020440:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8020444:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 8020446:	697b      	ldr	r3, [r7, #20]
 8020448:	2b00      	cmp	r3, #0
 802044a:	d102      	bne.n	8020452 <SCSI_StartStopUnit+0x22>
  {
    return -1;
 802044c:	f04f 33ff 	mov.w	r3, #4294967295
 8020450:	e043      	b.n	80204da <SCSI_StartStopUnit+0xaa>
  }

  if ((hmsc->scsi_medium_state == SCSI_MEDIUM_LOCKED) && ((params[4] & 0x3U) == 2U))
 8020452:	697b      	ldr	r3, [r7, #20]
 8020454:	f503 5383 	add.w	r3, r3, #4192	; 0x1060
 8020458:	3302      	adds	r3, #2
 802045a:	781b      	ldrb	r3, [r3, #0]
 802045c:	2b01      	cmp	r3, #1
 802045e:	d10f      	bne.n	8020480 <SCSI_StartStopUnit+0x50>
 8020460:	687b      	ldr	r3, [r7, #4]
 8020462:	3304      	adds	r3, #4
 8020464:	781b      	ldrb	r3, [r3, #0]
 8020466:	f003 0303 	and.w	r3, r3, #3
 802046a:	2b02      	cmp	r3, #2
 802046c:	d108      	bne.n	8020480 <SCSI_StartStopUnit+0x50>
  {
    SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, INVALID_FIELED_IN_COMMAND);
 802046e:	7af9      	ldrb	r1, [r7, #11]
 8020470:	2324      	movs	r3, #36	; 0x24
 8020472:	2205      	movs	r2, #5
 8020474:	68f8      	ldr	r0, [r7, #12]
 8020476:	f7ff ff83 	bl	8020380 <SCSI_SenseCode>

    return -1;
 802047a:	f04f 33ff 	mov.w	r3, #4294967295
 802047e:	e02c      	b.n	80204da <SCSI_StartStopUnit+0xaa>
  }

  if ((params[4] & 0x3U) == 0x1U) /* START=1 */
 8020480:	687b      	ldr	r3, [r7, #4]
 8020482:	3304      	adds	r3, #4
 8020484:	781b      	ldrb	r3, [r3, #0]
 8020486:	f003 0303 	and.w	r3, r3, #3
 802048a:	2b01      	cmp	r3, #1
 802048c:	d106      	bne.n	802049c <SCSI_StartStopUnit+0x6c>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 802048e:	697b      	ldr	r3, [r7, #20]
 8020490:	f503 5383 	add.w	r3, r3, #4192	; 0x1060
 8020494:	3302      	adds	r3, #2
 8020496:	2200      	movs	r2, #0
 8020498:	701a      	strb	r2, [r3, #0]
 802049a:	e01a      	b.n	80204d2 <SCSI_StartStopUnit+0xa2>
  }
  else if ((params[4] & 0x3U) == 0x2U) /* START=0 and LOEJ Load Eject=1 */
 802049c:	687b      	ldr	r3, [r7, #4]
 802049e:	3304      	adds	r3, #4
 80204a0:	781b      	ldrb	r3, [r3, #0]
 80204a2:	f003 0303 	and.w	r3, r3, #3
 80204a6:	2b02      	cmp	r3, #2
 80204a8:	d106      	bne.n	80204b8 <SCSI_StartStopUnit+0x88>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_EJECTED;
 80204aa:	697b      	ldr	r3, [r7, #20]
 80204ac:	f503 5383 	add.w	r3, r3, #4192	; 0x1060
 80204b0:	3302      	adds	r3, #2
 80204b2:	2202      	movs	r2, #2
 80204b4:	701a      	strb	r2, [r3, #0]
 80204b6:	e00c      	b.n	80204d2 <SCSI_StartStopUnit+0xa2>
  }
  else if ((params[4] & 0x3U) == 0x3U) /* START=1 and LOEJ Load Eject=1 */
 80204b8:	687b      	ldr	r3, [r7, #4]
 80204ba:	3304      	adds	r3, #4
 80204bc:	781b      	ldrb	r3, [r3, #0]
 80204be:	f003 0303 	and.w	r3, r3, #3
 80204c2:	2b03      	cmp	r3, #3
 80204c4:	d105      	bne.n	80204d2 <SCSI_StartStopUnit+0xa2>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 80204c6:	697b      	ldr	r3, [r7, #20]
 80204c8:	f503 5383 	add.w	r3, r3, #4192	; 0x1060
 80204cc:	3302      	adds	r3, #2
 80204ce:	2200      	movs	r2, #0
 80204d0:	701a      	strb	r2, [r3, #0]
  }
  else
  {
    /* .. */
  }
  hmsc->bot_data_length = 0U;
 80204d2:	697b      	ldr	r3, [r7, #20]
 80204d4:	2200      	movs	r2, #0
 80204d6:	60da      	str	r2, [r3, #12]

  return 0;
 80204d8:	2300      	movs	r3, #0
}
 80204da:	4618      	mov	r0, r3
 80204dc:	3718      	adds	r7, #24
 80204de:	46bd      	mov	sp, r7
 80204e0:	bd80      	pop	{r7, pc}

080204e2 <SCSI_AllowPreventRemovable>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_AllowPreventRemovable(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 80204e2:	b480      	push	{r7}
 80204e4:	b087      	sub	sp, #28
 80204e6:	af00      	add	r7, sp, #0
 80204e8:	60f8      	str	r0, [r7, #12]
 80204ea:	460b      	mov	r3, r1
 80204ec:	607a      	str	r2, [r7, #4]
 80204ee:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 80204f0:	68fb      	ldr	r3, [r7, #12]
 80204f2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80204f6:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 80204f8:	697b      	ldr	r3, [r7, #20]
 80204fa:	2b00      	cmp	r3, #0
 80204fc:	d102      	bne.n	8020504 <SCSI_AllowPreventRemovable+0x22>
  {
    return -1;
 80204fe:	f04f 33ff 	mov.w	r3, #4294967295
 8020502:	e015      	b.n	8020530 <SCSI_AllowPreventRemovable+0x4e>
  }

  if (params[4] == 0U)
 8020504:	687b      	ldr	r3, [r7, #4]
 8020506:	3304      	adds	r3, #4
 8020508:	781b      	ldrb	r3, [r3, #0]
 802050a:	2b00      	cmp	r3, #0
 802050c:	d106      	bne.n	802051c <SCSI_AllowPreventRemovable+0x3a>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 802050e:	697b      	ldr	r3, [r7, #20]
 8020510:	f503 5383 	add.w	r3, r3, #4192	; 0x1060
 8020514:	3302      	adds	r3, #2
 8020516:	2200      	movs	r2, #0
 8020518:	701a      	strb	r2, [r3, #0]
 802051a:	e005      	b.n	8020528 <SCSI_AllowPreventRemovable+0x46>
  }
  else
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_LOCKED;
 802051c:	697b      	ldr	r3, [r7, #20]
 802051e:	f503 5383 	add.w	r3, r3, #4192	; 0x1060
 8020522:	3302      	adds	r3, #2
 8020524:	2201      	movs	r2, #1
 8020526:	701a      	strb	r2, [r3, #0]
  }

  hmsc->bot_data_length = 0U;
 8020528:	697b      	ldr	r3, [r7, #20]
 802052a:	2200      	movs	r2, #0
 802052c:	60da      	str	r2, [r3, #12]

  return 0;
 802052e:	2300      	movs	r3, #0
}
 8020530:	4618      	mov	r0, r3
 8020532:	371c      	adds	r7, #28
 8020534:	46bd      	mov	sp, r7
 8020536:	f85d 7b04 	ldr.w	r7, [sp], #4
 802053a:	4770      	bx	lr

0802053c <SCSI_Read10>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Read10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 802053c:	b580      	push	{r7, lr}
 802053e:	b086      	sub	sp, #24
 8020540:	af00      	add	r7, sp, #0
 8020542:	60f8      	str	r0, [r7, #12]
 8020544:	460b      	mov	r3, r1
 8020546:	607a      	str	r2, [r7, #4]
 8020548:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 802054a:	68fb      	ldr	r3, [r7, #12]
 802054c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8020550:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 8020552:	697b      	ldr	r3, [r7, #20]
 8020554:	2b00      	cmp	r3, #0
 8020556:	d102      	bne.n	802055e <SCSI_Read10+0x22>
  {
    return -1;
 8020558:	f04f 33ff 	mov.w	r3, #4294967295
 802055c:	e0a1      	b.n	80206a2 <SCSI_Read10+0x166>
  }

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 802055e:	697b      	ldr	r3, [r7, #20]
 8020560:	7a1b      	ldrb	r3, [r3, #8]
 8020562:	2b00      	cmp	r3, #0
 8020564:	f040 8093 	bne.w	802068e <SCSI_Read10+0x152>
  {
    /* case 10 : Ho <> Di */
    if ((hmsc->cbw.bmFlags & 0x80U) != 0x80U)
 8020568:	697b      	ldr	r3, [r7, #20]
 802056a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 802056e:	331c      	adds	r3, #28
 8020570:	781b      	ldrb	r3, [r3, #0]
 8020572:	b25b      	sxtb	r3, r3
 8020574:	2b00      	cmp	r3, #0
 8020576:	db0c      	blt.n	8020592 <SCSI_Read10+0x56>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8020578:	697b      	ldr	r3, [r7, #20]
 802057a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 802057e:	331d      	adds	r3, #29
 8020580:	7819      	ldrb	r1, [r3, #0]
 8020582:	2320      	movs	r3, #32
 8020584:	2205      	movs	r2, #5
 8020586:	68f8      	ldr	r0, [r7, #12]
 8020588:	f7ff fefa 	bl	8020380 <SCSI_SenseCode>
      return -1;
 802058c:	f04f 33ff 	mov.w	r3, #4294967295
 8020590:	e087      	b.n	80206a2 <SCSI_Read10+0x166>
    }

    if (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED)
 8020592:	697b      	ldr	r3, [r7, #20]
 8020594:	f503 5383 	add.w	r3, r3, #4192	; 0x1060
 8020598:	3302      	adds	r3, #2
 802059a:	781b      	ldrb	r3, [r3, #0]
 802059c:	2b02      	cmp	r3, #2
 802059e:	d108      	bne.n	80205b2 <SCSI_Read10+0x76>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 80205a0:	7af9      	ldrb	r1, [r7, #11]
 80205a2:	233a      	movs	r3, #58	; 0x3a
 80205a4:	2202      	movs	r2, #2
 80205a6:	68f8      	ldr	r0, [r7, #12]
 80205a8:	f7ff feea 	bl	8020380 <SCSI_SenseCode>

      return -1;
 80205ac:	f04f 33ff 	mov.w	r3, #4294967295
 80205b0:	e077      	b.n	80206a2 <SCSI_Read10+0x166>
    }

    if (((USBD_StorageTypeDef *)pdev->pUserData)->IsReady(lun) != 0)
 80205b2:	68fb      	ldr	r3, [r7, #12]
 80205b4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80205b8:	689b      	ldr	r3, [r3, #8]
 80205ba:	7afa      	ldrb	r2, [r7, #11]
 80205bc:	4610      	mov	r0, r2
 80205be:	4798      	blx	r3
 80205c0:	4603      	mov	r3, r0
 80205c2:	2b00      	cmp	r3, #0
 80205c4:	d008      	beq.n	80205d8 <SCSI_Read10+0x9c>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 80205c6:	7af9      	ldrb	r1, [r7, #11]
 80205c8:	233a      	movs	r3, #58	; 0x3a
 80205ca:	2202      	movs	r2, #2
 80205cc:	68f8      	ldr	r0, [r7, #12]
 80205ce:	f7ff fed7 	bl	8020380 <SCSI_SenseCode>
      return -1;
 80205d2:	f04f 33ff 	mov.w	r3, #4294967295
 80205d6:	e064      	b.n	80206a2 <SCSI_Read10+0x166>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 80205d8:	687b      	ldr	r3, [r7, #4]
 80205da:	3302      	adds	r3, #2
 80205dc:	781b      	ldrb	r3, [r3, #0]
 80205de:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 80205e0:	687b      	ldr	r3, [r7, #4]
 80205e2:	3303      	adds	r3, #3
 80205e4:	781b      	ldrb	r3, [r3, #0]
 80205e6:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 80205e8:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] <<  8) |
 80205ea:	687b      	ldr	r3, [r7, #4]
 80205ec:	3304      	adds	r3, #4
 80205ee:	781b      	ldrb	r3, [r3, #0]
 80205f0:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 80205f2:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 80205f4:	687a      	ldr	r2, [r7, #4]
 80205f6:	3205      	adds	r2, #5
 80205f8:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] <<  8) |
 80205fa:	431a      	orrs	r2, r3
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 80205fc:	697b      	ldr	r3, [r7, #20]
 80205fe:	f503 5383 	add.w	r3, r3, #4192	; 0x1060
 8020602:	330c      	adds	r3, #12
 8020604:	601a      	str	r2, [r3, #0]

    hmsc->scsi_blk_len = ((uint32_t)params[7] <<  8) | (uint32_t)params[8];
 8020606:	687b      	ldr	r3, [r7, #4]
 8020608:	3307      	adds	r3, #7
 802060a:	781b      	ldrb	r3, [r3, #0]
 802060c:	021b      	lsls	r3, r3, #8
 802060e:	687a      	ldr	r2, [r7, #4]
 8020610:	3208      	adds	r2, #8
 8020612:	7812      	ldrb	r2, [r2, #0]
 8020614:	431a      	orrs	r2, r3
 8020616:	697b      	ldr	r3, [r7, #20]
 8020618:	f503 5383 	add.w	r3, r3, #4192	; 0x1060
 802061c:	3310      	adds	r3, #16
 802061e:	601a      	str	r2, [r3, #0]

    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 8020620:	697b      	ldr	r3, [r7, #20]
 8020622:	f503 5383 	add.w	r3, r3, #4192	; 0x1060
 8020626:	330c      	adds	r3, #12
 8020628:	681a      	ldr	r2, [r3, #0]
 802062a:	697b      	ldr	r3, [r7, #20]
 802062c:	f503 5383 	add.w	r3, r3, #4192	; 0x1060
 8020630:	3310      	adds	r3, #16
 8020632:	681b      	ldr	r3, [r3, #0]
 8020634:	7af9      	ldrb	r1, [r7, #11]
 8020636:	68f8      	ldr	r0, [r7, #12]
 8020638:	f000 faff 	bl	8020c3a <SCSI_CheckAddressRange>
 802063c:	4603      	mov	r3, r0
 802063e:	2b00      	cmp	r3, #0
 8020640:	da02      	bge.n	8020648 <SCSI_Read10+0x10c>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 8020642:	f04f 33ff 	mov.w	r3, #4294967295
 8020646:	e02c      	b.n	80206a2 <SCSI_Read10+0x166>
    }

    /* cases 4,5 : Hi <> Dn */
    if (hmsc->cbw.dDataLength != (hmsc->scsi_blk_len * hmsc->scsi_blk_size))
 8020648:	697b      	ldr	r3, [r7, #20]
 802064a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 802064e:	3318      	adds	r3, #24
 8020650:	681a      	ldr	r2, [r3, #0]
 8020652:	697b      	ldr	r3, [r7, #20]
 8020654:	f503 5383 	add.w	r3, r3, #4192	; 0x1060
 8020658:	3310      	adds	r3, #16
 802065a:	6819      	ldr	r1, [r3, #0]
 802065c:	697b      	ldr	r3, [r7, #20]
 802065e:	f503 5383 	add.w	r3, r3, #4192	; 0x1060
 8020662:	3304      	adds	r3, #4
 8020664:	881b      	ldrh	r3, [r3, #0]
 8020666:	fb03 f301 	mul.w	r3, r3, r1
 802066a:	429a      	cmp	r2, r3
 802066c:	d00c      	beq.n	8020688 <SCSI_Read10+0x14c>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 802066e:	697b      	ldr	r3, [r7, #20]
 8020670:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8020674:	331d      	adds	r3, #29
 8020676:	7819      	ldrb	r1, [r3, #0]
 8020678:	2320      	movs	r3, #32
 802067a:	2205      	movs	r2, #5
 802067c:	68f8      	ldr	r0, [r7, #12]
 802067e:	f7ff fe7f 	bl	8020380 <SCSI_SenseCode>
      return -1;
 8020682:	f04f 33ff 	mov.w	r3, #4294967295
 8020686:	e00c      	b.n	80206a2 <SCSI_Read10+0x166>
    }

    hmsc->bot_state = USBD_BOT_DATA_IN;
 8020688:	697b      	ldr	r3, [r7, #20]
 802068a:	2202      	movs	r2, #2
 802068c:	721a      	strb	r2, [r3, #8]
  }
  hmsc->bot_data_length = MSC_MEDIA_PACKET;
 802068e:	697b      	ldr	r3, [r7, #20]
 8020690:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8020694:	60da      	str	r2, [r3, #12]

  return SCSI_ProcessRead(pdev, lun);
 8020696:	7afb      	ldrb	r3, [r7, #11]
 8020698:	4619      	mov	r1, r3
 802069a:	68f8      	ldr	r0, [r7, #12]
 802069c:	f000 faf7 	bl	8020c8e <SCSI_ProcessRead>
 80206a0:	4603      	mov	r3, r0
}
 80206a2:	4618      	mov	r0, r3
 80206a4:	3718      	adds	r7, #24
 80206a6:	46bd      	mov	sp, r7
 80206a8:	bd80      	pop	{r7, pc}

080206aa <SCSI_Read12>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Read12(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 80206aa:	b580      	push	{r7, lr}
 80206ac:	b086      	sub	sp, #24
 80206ae:	af00      	add	r7, sp, #0
 80206b0:	60f8      	str	r0, [r7, #12]
 80206b2:	460b      	mov	r3, r1
 80206b4:	607a      	str	r2, [r7, #4]
 80206b6:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 80206b8:	68fb      	ldr	r3, [r7, #12]
 80206ba:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80206be:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 80206c0:	697b      	ldr	r3, [r7, #20]
 80206c2:	2b00      	cmp	r3, #0
 80206c4:	d102      	bne.n	80206cc <SCSI_Read12+0x22>
  {
    return -1;
 80206c6:	f04f 33ff 	mov.w	r3, #4294967295
 80206ca:	e0ab      	b.n	8020824 <SCSI_Read12+0x17a>
  }

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 80206cc:	697b      	ldr	r3, [r7, #20]
 80206ce:	7a1b      	ldrb	r3, [r3, #8]
 80206d0:	2b00      	cmp	r3, #0
 80206d2:	f040 809d 	bne.w	8020810 <SCSI_Read12+0x166>
  {
    /* case 10 : Ho <> Di */
    if ((hmsc->cbw.bmFlags & 0x80U) != 0x80U)
 80206d6:	697b      	ldr	r3, [r7, #20]
 80206d8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80206dc:	331c      	adds	r3, #28
 80206de:	781b      	ldrb	r3, [r3, #0]
 80206e0:	b25b      	sxtb	r3, r3
 80206e2:	2b00      	cmp	r3, #0
 80206e4:	db0c      	blt.n	8020700 <SCSI_Read12+0x56>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 80206e6:	697b      	ldr	r3, [r7, #20]
 80206e8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80206ec:	331d      	adds	r3, #29
 80206ee:	7819      	ldrb	r1, [r3, #0]
 80206f0:	2320      	movs	r3, #32
 80206f2:	2205      	movs	r2, #5
 80206f4:	68f8      	ldr	r0, [r7, #12]
 80206f6:	f7ff fe43 	bl	8020380 <SCSI_SenseCode>
      return -1;
 80206fa:	f04f 33ff 	mov.w	r3, #4294967295
 80206fe:	e091      	b.n	8020824 <SCSI_Read12+0x17a>
    }

    if (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED)
 8020700:	697b      	ldr	r3, [r7, #20]
 8020702:	f503 5383 	add.w	r3, r3, #4192	; 0x1060
 8020706:	3302      	adds	r3, #2
 8020708:	781b      	ldrb	r3, [r3, #0]
 802070a:	2b02      	cmp	r3, #2
 802070c:	d108      	bne.n	8020720 <SCSI_Read12+0x76>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 802070e:	7af9      	ldrb	r1, [r7, #11]
 8020710:	233a      	movs	r3, #58	; 0x3a
 8020712:	2202      	movs	r2, #2
 8020714:	68f8      	ldr	r0, [r7, #12]
 8020716:	f7ff fe33 	bl	8020380 <SCSI_SenseCode>
      return -1;
 802071a:	f04f 33ff 	mov.w	r3, #4294967295
 802071e:	e081      	b.n	8020824 <SCSI_Read12+0x17a>
    }

    if (((USBD_StorageTypeDef *)pdev->pUserData)->IsReady(lun) != 0)
 8020720:	68fb      	ldr	r3, [r7, #12]
 8020722:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8020726:	689b      	ldr	r3, [r3, #8]
 8020728:	7afa      	ldrb	r2, [r7, #11]
 802072a:	4610      	mov	r0, r2
 802072c:	4798      	blx	r3
 802072e:	4603      	mov	r3, r0
 8020730:	2b00      	cmp	r3, #0
 8020732:	d008      	beq.n	8020746 <SCSI_Read12+0x9c>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8020734:	7af9      	ldrb	r1, [r7, #11]
 8020736:	233a      	movs	r3, #58	; 0x3a
 8020738:	2202      	movs	r2, #2
 802073a:	68f8      	ldr	r0, [r7, #12]
 802073c:	f7ff fe20 	bl	8020380 <SCSI_SenseCode>
      return -1;
 8020740:	f04f 33ff 	mov.w	r3, #4294967295
 8020744:	e06e      	b.n	8020824 <SCSI_Read12+0x17a>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8020746:	687b      	ldr	r3, [r7, #4]
 8020748:	3302      	adds	r3, #2
 802074a:	781b      	ldrb	r3, [r3, #0]
 802074c:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 802074e:	687b      	ldr	r3, [r7, #4]
 8020750:	3303      	adds	r3, #3
 8020752:	781b      	ldrb	r3, [r3, #0]
 8020754:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8020756:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] <<  8) |
 8020758:	687b      	ldr	r3, [r7, #4]
 802075a:	3304      	adds	r3, #4
 802075c:	781b      	ldrb	r3, [r3, #0]
 802075e:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 8020760:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 8020762:	687a      	ldr	r2, [r7, #4]
 8020764:	3205      	adds	r2, #5
 8020766:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] <<  8) |
 8020768:	431a      	orrs	r2, r3
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 802076a:	697b      	ldr	r3, [r7, #20]
 802076c:	f503 5383 	add.w	r3, r3, #4192	; 0x1060
 8020770:	330c      	adds	r3, #12
 8020772:	601a      	str	r2, [r3, #0]

    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 8020774:	687b      	ldr	r3, [r7, #4]
 8020776:	3306      	adds	r3, #6
 8020778:	781b      	ldrb	r3, [r3, #0]
 802077a:	061a      	lsls	r2, r3, #24
                         ((uint32_t)params[7] << 16) |
 802077c:	687b      	ldr	r3, [r7, #4]
 802077e:	3307      	adds	r3, #7
 8020780:	781b      	ldrb	r3, [r3, #0]
 8020782:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 8020784:	431a      	orrs	r2, r3
                         ((uint32_t)params[8] << 8) |
 8020786:	687b      	ldr	r3, [r7, #4]
 8020788:	3308      	adds	r3, #8
 802078a:	781b      	ldrb	r3, [r3, #0]
 802078c:	021b      	lsls	r3, r3, #8
                         ((uint32_t)params[7] << 16) |
 802078e:	4313      	orrs	r3, r2
                         (uint32_t)params[9];
 8020790:	687a      	ldr	r2, [r7, #4]
 8020792:	3209      	adds	r2, #9
 8020794:	7812      	ldrb	r2, [r2, #0]
                         ((uint32_t)params[8] << 8) |
 8020796:	431a      	orrs	r2, r3
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 8020798:	697b      	ldr	r3, [r7, #20]
 802079a:	f503 5383 	add.w	r3, r3, #4192	; 0x1060
 802079e:	3310      	adds	r3, #16
 80207a0:	601a      	str	r2, [r3, #0]

    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 80207a2:	697b      	ldr	r3, [r7, #20]
 80207a4:	f503 5383 	add.w	r3, r3, #4192	; 0x1060
 80207a8:	330c      	adds	r3, #12
 80207aa:	681a      	ldr	r2, [r3, #0]
 80207ac:	697b      	ldr	r3, [r7, #20]
 80207ae:	f503 5383 	add.w	r3, r3, #4192	; 0x1060
 80207b2:	3310      	adds	r3, #16
 80207b4:	681b      	ldr	r3, [r3, #0]
 80207b6:	7af9      	ldrb	r1, [r7, #11]
 80207b8:	68f8      	ldr	r0, [r7, #12]
 80207ba:	f000 fa3e 	bl	8020c3a <SCSI_CheckAddressRange>
 80207be:	4603      	mov	r3, r0
 80207c0:	2b00      	cmp	r3, #0
 80207c2:	da02      	bge.n	80207ca <SCSI_Read12+0x120>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 80207c4:	f04f 33ff 	mov.w	r3, #4294967295
 80207c8:	e02c      	b.n	8020824 <SCSI_Read12+0x17a>
    }

    /* cases 4,5 : Hi <> Dn */
    if (hmsc->cbw.dDataLength != (hmsc->scsi_blk_len * hmsc->scsi_blk_size))
 80207ca:	697b      	ldr	r3, [r7, #20]
 80207cc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80207d0:	3318      	adds	r3, #24
 80207d2:	681a      	ldr	r2, [r3, #0]
 80207d4:	697b      	ldr	r3, [r7, #20]
 80207d6:	f503 5383 	add.w	r3, r3, #4192	; 0x1060
 80207da:	3310      	adds	r3, #16
 80207dc:	6819      	ldr	r1, [r3, #0]
 80207de:	697b      	ldr	r3, [r7, #20]
 80207e0:	f503 5383 	add.w	r3, r3, #4192	; 0x1060
 80207e4:	3304      	adds	r3, #4
 80207e6:	881b      	ldrh	r3, [r3, #0]
 80207e8:	fb03 f301 	mul.w	r3, r3, r1
 80207ec:	429a      	cmp	r2, r3
 80207ee:	d00c      	beq.n	802080a <SCSI_Read12+0x160>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 80207f0:	697b      	ldr	r3, [r7, #20]
 80207f2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80207f6:	331d      	adds	r3, #29
 80207f8:	7819      	ldrb	r1, [r3, #0]
 80207fa:	2320      	movs	r3, #32
 80207fc:	2205      	movs	r2, #5
 80207fe:	68f8      	ldr	r0, [r7, #12]
 8020800:	f7ff fdbe 	bl	8020380 <SCSI_SenseCode>
      return -1;
 8020804:	f04f 33ff 	mov.w	r3, #4294967295
 8020808:	e00c      	b.n	8020824 <SCSI_Read12+0x17a>
    }

    hmsc->bot_state = USBD_BOT_DATA_IN;
 802080a:	697b      	ldr	r3, [r7, #20]
 802080c:	2202      	movs	r2, #2
 802080e:	721a      	strb	r2, [r3, #8]
  }
  hmsc->bot_data_length = MSC_MEDIA_PACKET;
 8020810:	697b      	ldr	r3, [r7, #20]
 8020812:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8020816:	60da      	str	r2, [r3, #12]

  return SCSI_ProcessRead(pdev, lun);
 8020818:	7afb      	ldrb	r3, [r7, #11]
 802081a:	4619      	mov	r1, r3
 802081c:	68f8      	ldr	r0, [r7, #12]
 802081e:	f000 fa36 	bl	8020c8e <SCSI_ProcessRead>
 8020822:	4603      	mov	r3, r0
}
 8020824:	4618      	mov	r0, r3
 8020826:	3718      	adds	r7, #24
 8020828:	46bd      	mov	sp, r7
 802082a:	bd80      	pop	{r7, pc}

0802082c <SCSI_Write10>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Write10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 802082c:	b580      	push	{r7, lr}
 802082e:	b086      	sub	sp, #24
 8020830:	af00      	add	r7, sp, #0
 8020832:	60f8      	str	r0, [r7, #12]
 8020834:	460b      	mov	r3, r1
 8020836:	607a      	str	r2, [r7, #4]
 8020838:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 802083a:	68fb      	ldr	r3, [r7, #12]
 802083c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8020840:	617b      	str	r3, [r7, #20]
  uint32_t len;

  if (hmsc == NULL)
 8020842:	697b      	ldr	r3, [r7, #20]
 8020844:	2b00      	cmp	r3, #0
 8020846:	d102      	bne.n	802084e <SCSI_Write10+0x22>
  {
    return -1;
 8020848:	f04f 33ff 	mov.w	r3, #4294967295
 802084c:	e0c7      	b.n	80209de <SCSI_Write10+0x1b2>
  }

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 802084e:	697b      	ldr	r3, [r7, #20]
 8020850:	7a1b      	ldrb	r3, [r3, #8]
 8020852:	2b00      	cmp	r3, #0
 8020854:	f040 80bd 	bne.w	80209d2 <SCSI_Write10+0x1a6>
  {
    if (hmsc->cbw.dDataLength == 0U)
 8020858:	697b      	ldr	r3, [r7, #20]
 802085a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 802085e:	3318      	adds	r3, #24
 8020860:	681b      	ldr	r3, [r3, #0]
 8020862:	2b00      	cmp	r3, #0
 8020864:	d10c      	bne.n	8020880 <SCSI_Write10+0x54>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8020866:	697b      	ldr	r3, [r7, #20]
 8020868:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 802086c:	331d      	adds	r3, #29
 802086e:	7819      	ldrb	r1, [r3, #0]
 8020870:	2320      	movs	r3, #32
 8020872:	2205      	movs	r2, #5
 8020874:	68f8      	ldr	r0, [r7, #12]
 8020876:	f7ff fd83 	bl	8020380 <SCSI_SenseCode>
      return -1;
 802087a:	f04f 33ff 	mov.w	r3, #4294967295
 802087e:	e0ae      	b.n	80209de <SCSI_Write10+0x1b2>
    }

    /* case 8 : Hi <> Do */
    if ((hmsc->cbw.bmFlags & 0x80U) == 0x80U)
 8020880:	697b      	ldr	r3, [r7, #20]
 8020882:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8020886:	331c      	adds	r3, #28
 8020888:	781b      	ldrb	r3, [r3, #0]
 802088a:	b25b      	sxtb	r3, r3
 802088c:	2b00      	cmp	r3, #0
 802088e:	da0c      	bge.n	80208aa <SCSI_Write10+0x7e>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8020890:	697b      	ldr	r3, [r7, #20]
 8020892:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8020896:	331d      	adds	r3, #29
 8020898:	7819      	ldrb	r1, [r3, #0]
 802089a:	2320      	movs	r3, #32
 802089c:	2205      	movs	r2, #5
 802089e:	68f8      	ldr	r0, [r7, #12]
 80208a0:	f7ff fd6e 	bl	8020380 <SCSI_SenseCode>
      return -1;
 80208a4:	f04f 33ff 	mov.w	r3, #4294967295
 80208a8:	e099      	b.n	80209de <SCSI_Write10+0x1b2>
    }

    /* Check whether Media is ready */
    if (((USBD_StorageTypeDef *)pdev->pUserData)->IsReady(lun) != 0)
 80208aa:	68fb      	ldr	r3, [r7, #12]
 80208ac:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80208b0:	689b      	ldr	r3, [r3, #8]
 80208b2:	7afa      	ldrb	r2, [r7, #11]
 80208b4:	4610      	mov	r0, r2
 80208b6:	4798      	blx	r3
 80208b8:	4603      	mov	r3, r0
 80208ba:	2b00      	cmp	r3, #0
 80208bc:	d008      	beq.n	80208d0 <SCSI_Write10+0xa4>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 80208be:	7af9      	ldrb	r1, [r7, #11]
 80208c0:	233a      	movs	r3, #58	; 0x3a
 80208c2:	2202      	movs	r2, #2
 80208c4:	68f8      	ldr	r0, [r7, #12]
 80208c6:	f7ff fd5b 	bl	8020380 <SCSI_SenseCode>
      return -1;
 80208ca:	f04f 33ff 	mov.w	r3, #4294967295
 80208ce:	e086      	b.n	80209de <SCSI_Write10+0x1b2>
    }

    /* Check If media is write-protected */
    if (((USBD_StorageTypeDef *)pdev->pUserData)->IsWriteProtected(lun) != 0)
 80208d0:	68fb      	ldr	r3, [r7, #12]
 80208d2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80208d6:	68db      	ldr	r3, [r3, #12]
 80208d8:	7afa      	ldrb	r2, [r7, #11]
 80208da:	4610      	mov	r0, r2
 80208dc:	4798      	blx	r3
 80208de:	4603      	mov	r3, r0
 80208e0:	2b00      	cmp	r3, #0
 80208e2:	d008      	beq.n	80208f6 <SCSI_Write10+0xca>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, WRITE_PROTECTED);
 80208e4:	7af9      	ldrb	r1, [r7, #11]
 80208e6:	2327      	movs	r3, #39	; 0x27
 80208e8:	2202      	movs	r2, #2
 80208ea:	68f8      	ldr	r0, [r7, #12]
 80208ec:	f7ff fd48 	bl	8020380 <SCSI_SenseCode>
      return -1;
 80208f0:	f04f 33ff 	mov.w	r3, #4294967295
 80208f4:	e073      	b.n	80209de <SCSI_Write10+0x1b2>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 80208f6:	687b      	ldr	r3, [r7, #4]
 80208f8:	3302      	adds	r3, #2
 80208fa:	781b      	ldrb	r3, [r3, #0]
 80208fc:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 80208fe:	687b      	ldr	r3, [r7, #4]
 8020900:	3303      	adds	r3, #3
 8020902:	781b      	ldrb	r3, [r3, #0]
 8020904:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8020906:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] << 8) |
 8020908:	687b      	ldr	r3, [r7, #4]
 802090a:	3304      	adds	r3, #4
 802090c:	781b      	ldrb	r3, [r3, #0]
 802090e:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 8020910:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 8020912:	687a      	ldr	r2, [r7, #4]
 8020914:	3205      	adds	r2, #5
 8020916:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] << 8) |
 8020918:	431a      	orrs	r2, r3
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 802091a:	697b      	ldr	r3, [r7, #20]
 802091c:	f503 5383 	add.w	r3, r3, #4192	; 0x1060
 8020920:	330c      	adds	r3, #12
 8020922:	601a      	str	r2, [r3, #0]

    hmsc->scsi_blk_len = ((uint32_t)params[7] << 8) |
 8020924:	687b      	ldr	r3, [r7, #4]
 8020926:	3307      	adds	r3, #7
 8020928:	781b      	ldrb	r3, [r3, #0]
 802092a:	021b      	lsls	r3, r3, #8
                         (uint32_t)params[8];
 802092c:	687a      	ldr	r2, [r7, #4]
 802092e:	3208      	adds	r2, #8
 8020930:	7812      	ldrb	r2, [r2, #0]
    hmsc->scsi_blk_len = ((uint32_t)params[7] << 8) |
 8020932:	431a      	orrs	r2, r3
 8020934:	697b      	ldr	r3, [r7, #20]
 8020936:	f503 5383 	add.w	r3, r3, #4192	; 0x1060
 802093a:	3310      	adds	r3, #16
 802093c:	601a      	str	r2, [r3, #0]

    /* check if LBA address is in the right range */
    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 802093e:	697b      	ldr	r3, [r7, #20]
 8020940:	f503 5383 	add.w	r3, r3, #4192	; 0x1060
 8020944:	330c      	adds	r3, #12
 8020946:	681a      	ldr	r2, [r3, #0]
 8020948:	697b      	ldr	r3, [r7, #20]
 802094a:	f503 5383 	add.w	r3, r3, #4192	; 0x1060
 802094e:	3310      	adds	r3, #16
 8020950:	681b      	ldr	r3, [r3, #0]
 8020952:	7af9      	ldrb	r1, [r7, #11]
 8020954:	68f8      	ldr	r0, [r7, #12]
 8020956:	f000 f970 	bl	8020c3a <SCSI_CheckAddressRange>
 802095a:	4603      	mov	r3, r0
 802095c:	2b00      	cmp	r3, #0
 802095e:	da02      	bge.n	8020966 <SCSI_Write10+0x13a>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 8020960:	f04f 33ff 	mov.w	r3, #4294967295
 8020964:	e03b      	b.n	80209de <SCSI_Write10+0x1b2>
    }

    len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 8020966:	697b      	ldr	r3, [r7, #20]
 8020968:	f503 5383 	add.w	r3, r3, #4192	; 0x1060
 802096c:	3310      	adds	r3, #16
 802096e:	681a      	ldr	r2, [r3, #0]
 8020970:	697b      	ldr	r3, [r7, #20]
 8020972:	f503 5383 	add.w	r3, r3, #4192	; 0x1060
 8020976:	3304      	adds	r3, #4
 8020978:	881b      	ldrh	r3, [r3, #0]
 802097a:	fb03 f302 	mul.w	r3, r3, r2
 802097e:	613b      	str	r3, [r7, #16]

    /* cases 3,11,13 : Hn,Ho <> D0 */
    if (hmsc->cbw.dDataLength != len)
 8020980:	697b      	ldr	r3, [r7, #20]
 8020982:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8020986:	3318      	adds	r3, #24
 8020988:	681b      	ldr	r3, [r3, #0]
 802098a:	693a      	ldr	r2, [r7, #16]
 802098c:	429a      	cmp	r2, r3
 802098e:	d00c      	beq.n	80209aa <SCSI_Write10+0x17e>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8020990:	697b      	ldr	r3, [r7, #20]
 8020992:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8020996:	331d      	adds	r3, #29
 8020998:	7819      	ldrb	r1, [r3, #0]
 802099a:	2320      	movs	r3, #32
 802099c:	2205      	movs	r2, #5
 802099e:	68f8      	ldr	r0, [r7, #12]
 80209a0:	f7ff fcee 	bl	8020380 <SCSI_SenseCode>
      return -1;
 80209a4:	f04f 33ff 	mov.w	r3, #4294967295
 80209a8:	e019      	b.n	80209de <SCSI_Write10+0x1b2>
    }

    len = MIN(len, MSC_MEDIA_PACKET);
 80209aa:	693b      	ldr	r3, [r7, #16]
 80209ac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80209b0:	bf28      	it	cs
 80209b2:	f44f 5380 	movcs.w	r3, #4096	; 0x1000
 80209b6:	613b      	str	r3, [r7, #16]

    /* Prepare EP to receive first data packet */
    hmsc->bot_state = USBD_BOT_DATA_OUT;
 80209b8:	697b      	ldr	r3, [r7, #20]
 80209ba:	2201      	movs	r2, #1
 80209bc:	721a      	strb	r2, [r3, #8]
    (void)USBD_LL_PrepareReceive(pdev, MSC_EPOUT_ADDR, hmsc->bot_data, len);
 80209be:	697b      	ldr	r3, [r7, #20]
 80209c0:	f103 0210 	add.w	r2, r3, #16
 80209c4:	693b      	ldr	r3, [r7, #16]
 80209c6:	2101      	movs	r1, #1
 80209c8:	68f8      	ldr	r0, [r7, #12]
 80209ca:	f004 ffc0 	bl	802594e <USBD_LL_PrepareReceive>
  else /* Write Process ongoing */
  {
    return SCSI_ProcessWrite(pdev, lun);
  }

  return 0;
 80209ce:	2300      	movs	r3, #0
 80209d0:	e005      	b.n	80209de <SCSI_Write10+0x1b2>
    return SCSI_ProcessWrite(pdev, lun);
 80209d2:	7afb      	ldrb	r3, [r7, #11]
 80209d4:	4619      	mov	r1, r3
 80209d6:	68f8      	ldr	r0, [r7, #12]
 80209d8:	f000 f9ec 	bl	8020db4 <SCSI_ProcessWrite>
 80209dc:	4603      	mov	r3, r0
}
 80209de:	4618      	mov	r0, r3
 80209e0:	3718      	adds	r7, #24
 80209e2:	46bd      	mov	sp, r7
 80209e4:	bd80      	pop	{r7, pc}

080209e6 <SCSI_Write12>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Write12(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 80209e6:	b580      	push	{r7, lr}
 80209e8:	b086      	sub	sp, #24
 80209ea:	af00      	add	r7, sp, #0
 80209ec:	60f8      	str	r0, [r7, #12]
 80209ee:	460b      	mov	r3, r1
 80209f0:	607a      	str	r2, [r7, #4]
 80209f2:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 80209f4:	68fb      	ldr	r3, [r7, #12]
 80209f6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80209fa:	617b      	str	r3, [r7, #20]
  uint32_t len;

  if (hmsc == NULL)
 80209fc:	697b      	ldr	r3, [r7, #20]
 80209fe:	2b00      	cmp	r3, #0
 8020a00:	d102      	bne.n	8020a08 <SCSI_Write12+0x22>
  {
    return -1;
 8020a02:	f04f 33ff 	mov.w	r3, #4294967295
 8020a06:	e0d7      	b.n	8020bb8 <SCSI_Write12+0x1d2>
  }

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 8020a08:	697b      	ldr	r3, [r7, #20]
 8020a0a:	7a1b      	ldrb	r3, [r3, #8]
 8020a0c:	2b00      	cmp	r3, #0
 8020a0e:	f040 80cd 	bne.w	8020bac <SCSI_Write12+0x1c6>
  {
    if (hmsc->cbw.dDataLength == 0U)
 8020a12:	697b      	ldr	r3, [r7, #20]
 8020a14:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8020a18:	3318      	adds	r3, #24
 8020a1a:	681b      	ldr	r3, [r3, #0]
 8020a1c:	2b00      	cmp	r3, #0
 8020a1e:	d10c      	bne.n	8020a3a <SCSI_Write12+0x54>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8020a20:	697b      	ldr	r3, [r7, #20]
 8020a22:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8020a26:	331d      	adds	r3, #29
 8020a28:	7819      	ldrb	r1, [r3, #0]
 8020a2a:	2320      	movs	r3, #32
 8020a2c:	2205      	movs	r2, #5
 8020a2e:	68f8      	ldr	r0, [r7, #12]
 8020a30:	f7ff fca6 	bl	8020380 <SCSI_SenseCode>
      return -1;
 8020a34:	f04f 33ff 	mov.w	r3, #4294967295
 8020a38:	e0be      	b.n	8020bb8 <SCSI_Write12+0x1d2>
    }

    /* case 8 : Hi <> Do */
    if ((hmsc->cbw.bmFlags & 0x80U) == 0x80U)
 8020a3a:	697b      	ldr	r3, [r7, #20]
 8020a3c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8020a40:	331c      	adds	r3, #28
 8020a42:	781b      	ldrb	r3, [r3, #0]
 8020a44:	b25b      	sxtb	r3, r3
 8020a46:	2b00      	cmp	r3, #0
 8020a48:	da0c      	bge.n	8020a64 <SCSI_Write12+0x7e>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8020a4a:	697b      	ldr	r3, [r7, #20]
 8020a4c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8020a50:	331d      	adds	r3, #29
 8020a52:	7819      	ldrb	r1, [r3, #0]
 8020a54:	2320      	movs	r3, #32
 8020a56:	2205      	movs	r2, #5
 8020a58:	68f8      	ldr	r0, [r7, #12]
 8020a5a:	f7ff fc91 	bl	8020380 <SCSI_SenseCode>
      return -1;
 8020a5e:	f04f 33ff 	mov.w	r3, #4294967295
 8020a62:	e0a9      	b.n	8020bb8 <SCSI_Write12+0x1d2>
    }

    /* Check whether Media is ready */
    if (((USBD_StorageTypeDef *)pdev->pUserData)->IsReady(lun) != 0)
 8020a64:	68fb      	ldr	r3, [r7, #12]
 8020a66:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8020a6a:	689b      	ldr	r3, [r3, #8]
 8020a6c:	7afa      	ldrb	r2, [r7, #11]
 8020a6e:	4610      	mov	r0, r2
 8020a70:	4798      	blx	r3
 8020a72:	4603      	mov	r3, r0
 8020a74:	2b00      	cmp	r3, #0
 8020a76:	d00b      	beq.n	8020a90 <SCSI_Write12+0xaa>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8020a78:	7af9      	ldrb	r1, [r7, #11]
 8020a7a:	233a      	movs	r3, #58	; 0x3a
 8020a7c:	2202      	movs	r2, #2
 8020a7e:	68f8      	ldr	r0, [r7, #12]
 8020a80:	f7ff fc7e 	bl	8020380 <SCSI_SenseCode>
      hmsc->bot_state = USBD_BOT_NO_DATA;
 8020a84:	697b      	ldr	r3, [r7, #20]
 8020a86:	2205      	movs	r2, #5
 8020a88:	721a      	strb	r2, [r3, #8]
      return -1;
 8020a8a:	f04f 33ff 	mov.w	r3, #4294967295
 8020a8e:	e093      	b.n	8020bb8 <SCSI_Write12+0x1d2>
    }

    /* Check If media is write-protected */
    if (((USBD_StorageTypeDef *)pdev->pUserData)->IsWriteProtected(lun) != 0)
 8020a90:	68fb      	ldr	r3, [r7, #12]
 8020a92:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8020a96:	68db      	ldr	r3, [r3, #12]
 8020a98:	7afa      	ldrb	r2, [r7, #11]
 8020a9a:	4610      	mov	r0, r2
 8020a9c:	4798      	blx	r3
 8020a9e:	4603      	mov	r3, r0
 8020aa0:	2b00      	cmp	r3, #0
 8020aa2:	d00b      	beq.n	8020abc <SCSI_Write12+0xd6>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, WRITE_PROTECTED);
 8020aa4:	7af9      	ldrb	r1, [r7, #11]
 8020aa6:	2327      	movs	r3, #39	; 0x27
 8020aa8:	2202      	movs	r2, #2
 8020aaa:	68f8      	ldr	r0, [r7, #12]
 8020aac:	f7ff fc68 	bl	8020380 <SCSI_SenseCode>
      hmsc->bot_state = USBD_BOT_NO_DATA;
 8020ab0:	697b      	ldr	r3, [r7, #20]
 8020ab2:	2205      	movs	r2, #5
 8020ab4:	721a      	strb	r2, [r3, #8]
      return -1;
 8020ab6:	f04f 33ff 	mov.w	r3, #4294967295
 8020aba:	e07d      	b.n	8020bb8 <SCSI_Write12+0x1d2>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8020abc:	687b      	ldr	r3, [r7, #4]
 8020abe:	3302      	adds	r3, #2
 8020ac0:	781b      	ldrb	r3, [r3, #0]
 8020ac2:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 8020ac4:	687b      	ldr	r3, [r7, #4]
 8020ac6:	3303      	adds	r3, #3
 8020ac8:	781b      	ldrb	r3, [r3, #0]
 8020aca:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8020acc:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] << 8) |
 8020ace:	687b      	ldr	r3, [r7, #4]
 8020ad0:	3304      	adds	r3, #4
 8020ad2:	781b      	ldrb	r3, [r3, #0]
 8020ad4:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 8020ad6:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 8020ad8:	687a      	ldr	r2, [r7, #4]
 8020ada:	3205      	adds	r2, #5
 8020adc:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] << 8) |
 8020ade:	431a      	orrs	r2, r3
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8020ae0:	697b      	ldr	r3, [r7, #20]
 8020ae2:	f503 5383 	add.w	r3, r3, #4192	; 0x1060
 8020ae6:	330c      	adds	r3, #12
 8020ae8:	601a      	str	r2, [r3, #0]

    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 8020aea:	687b      	ldr	r3, [r7, #4]
 8020aec:	3306      	adds	r3, #6
 8020aee:	781b      	ldrb	r3, [r3, #0]
 8020af0:	061a      	lsls	r2, r3, #24
                         ((uint32_t)params[7] << 16) |
 8020af2:	687b      	ldr	r3, [r7, #4]
 8020af4:	3307      	adds	r3, #7
 8020af6:	781b      	ldrb	r3, [r3, #0]
 8020af8:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 8020afa:	431a      	orrs	r2, r3
                         ((uint32_t)params[8] << 8) |
 8020afc:	687b      	ldr	r3, [r7, #4]
 8020afe:	3308      	adds	r3, #8
 8020b00:	781b      	ldrb	r3, [r3, #0]
 8020b02:	021b      	lsls	r3, r3, #8
                         ((uint32_t)params[7] << 16) |
 8020b04:	4313      	orrs	r3, r2
                         (uint32_t)params[9];
 8020b06:	687a      	ldr	r2, [r7, #4]
 8020b08:	3209      	adds	r2, #9
 8020b0a:	7812      	ldrb	r2, [r2, #0]
                         ((uint32_t)params[8] << 8) |
 8020b0c:	431a      	orrs	r2, r3
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 8020b0e:	697b      	ldr	r3, [r7, #20]
 8020b10:	f503 5383 	add.w	r3, r3, #4192	; 0x1060
 8020b14:	3310      	adds	r3, #16
 8020b16:	601a      	str	r2, [r3, #0]

    /* check if LBA address is in the right range */
    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 8020b18:	697b      	ldr	r3, [r7, #20]
 8020b1a:	f503 5383 	add.w	r3, r3, #4192	; 0x1060
 8020b1e:	330c      	adds	r3, #12
 8020b20:	681a      	ldr	r2, [r3, #0]
 8020b22:	697b      	ldr	r3, [r7, #20]
 8020b24:	f503 5383 	add.w	r3, r3, #4192	; 0x1060
 8020b28:	3310      	adds	r3, #16
 8020b2a:	681b      	ldr	r3, [r3, #0]
 8020b2c:	7af9      	ldrb	r1, [r7, #11]
 8020b2e:	68f8      	ldr	r0, [r7, #12]
 8020b30:	f000 f883 	bl	8020c3a <SCSI_CheckAddressRange>
 8020b34:	4603      	mov	r3, r0
 8020b36:	2b00      	cmp	r3, #0
 8020b38:	da02      	bge.n	8020b40 <SCSI_Write12+0x15a>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 8020b3a:	f04f 33ff 	mov.w	r3, #4294967295
 8020b3e:	e03b      	b.n	8020bb8 <SCSI_Write12+0x1d2>
    }

    len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 8020b40:	697b      	ldr	r3, [r7, #20]
 8020b42:	f503 5383 	add.w	r3, r3, #4192	; 0x1060
 8020b46:	3310      	adds	r3, #16
 8020b48:	681a      	ldr	r2, [r3, #0]
 8020b4a:	697b      	ldr	r3, [r7, #20]
 8020b4c:	f503 5383 	add.w	r3, r3, #4192	; 0x1060
 8020b50:	3304      	adds	r3, #4
 8020b52:	881b      	ldrh	r3, [r3, #0]
 8020b54:	fb03 f302 	mul.w	r3, r3, r2
 8020b58:	613b      	str	r3, [r7, #16]

    /* cases 3,11,13 : Hn,Ho <> D0 */
    if (hmsc->cbw.dDataLength != len)
 8020b5a:	697b      	ldr	r3, [r7, #20]
 8020b5c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8020b60:	3318      	adds	r3, #24
 8020b62:	681b      	ldr	r3, [r3, #0]
 8020b64:	693a      	ldr	r2, [r7, #16]
 8020b66:	429a      	cmp	r2, r3
 8020b68:	d00c      	beq.n	8020b84 <SCSI_Write12+0x19e>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8020b6a:	697b      	ldr	r3, [r7, #20]
 8020b6c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8020b70:	331d      	adds	r3, #29
 8020b72:	7819      	ldrb	r1, [r3, #0]
 8020b74:	2320      	movs	r3, #32
 8020b76:	2205      	movs	r2, #5
 8020b78:	68f8      	ldr	r0, [r7, #12]
 8020b7a:	f7ff fc01 	bl	8020380 <SCSI_SenseCode>
      return -1;
 8020b7e:	f04f 33ff 	mov.w	r3, #4294967295
 8020b82:	e019      	b.n	8020bb8 <SCSI_Write12+0x1d2>
    }

    len = MIN(len, MSC_MEDIA_PACKET);
 8020b84:	693b      	ldr	r3, [r7, #16]
 8020b86:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8020b8a:	bf28      	it	cs
 8020b8c:	f44f 5380 	movcs.w	r3, #4096	; 0x1000
 8020b90:	613b      	str	r3, [r7, #16]

    /* Prepare EP to receive first data packet */
    hmsc->bot_state = USBD_BOT_DATA_OUT;
 8020b92:	697b      	ldr	r3, [r7, #20]
 8020b94:	2201      	movs	r2, #1
 8020b96:	721a      	strb	r2, [r3, #8]
    (void)USBD_LL_PrepareReceive(pdev, MSC_EPOUT_ADDR, hmsc->bot_data, len);
 8020b98:	697b      	ldr	r3, [r7, #20]
 8020b9a:	f103 0210 	add.w	r2, r3, #16
 8020b9e:	693b      	ldr	r3, [r7, #16]
 8020ba0:	2101      	movs	r1, #1
 8020ba2:	68f8      	ldr	r0, [r7, #12]
 8020ba4:	f004 fed3 	bl	802594e <USBD_LL_PrepareReceive>
  else /* Write Process ongoing */
  {
    return SCSI_ProcessWrite(pdev, lun);
  }

  return 0;
 8020ba8:	2300      	movs	r3, #0
 8020baa:	e005      	b.n	8020bb8 <SCSI_Write12+0x1d2>
    return SCSI_ProcessWrite(pdev, lun);
 8020bac:	7afb      	ldrb	r3, [r7, #11]
 8020bae:	4619      	mov	r1, r3
 8020bb0:	68f8      	ldr	r0, [r7, #12]
 8020bb2:	f000 f8ff 	bl	8020db4 <SCSI_ProcessWrite>
 8020bb6:	4603      	mov	r3, r0
}
 8020bb8:	4618      	mov	r0, r3
 8020bba:	3718      	adds	r7, #24
 8020bbc:	46bd      	mov	sp, r7
 8020bbe:	bd80      	pop	{r7, pc}

08020bc0 <SCSI_Verify10>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Verify10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8020bc0:	b580      	push	{r7, lr}
 8020bc2:	b086      	sub	sp, #24
 8020bc4:	af00      	add	r7, sp, #0
 8020bc6:	60f8      	str	r0, [r7, #12]
 8020bc8:	460b      	mov	r3, r1
 8020bca:	607a      	str	r2, [r7, #4]
 8020bcc:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8020bce:	68fb      	ldr	r3, [r7, #12]
 8020bd0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8020bd4:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 8020bd6:	697b      	ldr	r3, [r7, #20]
 8020bd8:	2b00      	cmp	r3, #0
 8020bda:	d102      	bne.n	8020be2 <SCSI_Verify10+0x22>
  {
    return -1;
 8020bdc:	f04f 33ff 	mov.w	r3, #4294967295
 8020be0:	e027      	b.n	8020c32 <SCSI_Verify10+0x72>
  }

  if ((params[1] & 0x02U) == 0x02U)
 8020be2:	687b      	ldr	r3, [r7, #4]
 8020be4:	3301      	adds	r3, #1
 8020be6:	781b      	ldrb	r3, [r3, #0]
 8020be8:	f003 0302 	and.w	r3, r3, #2
 8020bec:	2b00      	cmp	r3, #0
 8020bee:	d008      	beq.n	8020c02 <SCSI_Verify10+0x42>
  {
    SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, INVALID_FIELED_IN_COMMAND);
 8020bf0:	7af9      	ldrb	r1, [r7, #11]
 8020bf2:	2324      	movs	r3, #36	; 0x24
 8020bf4:	2205      	movs	r2, #5
 8020bf6:	68f8      	ldr	r0, [r7, #12]
 8020bf8:	f7ff fbc2 	bl	8020380 <SCSI_SenseCode>
    return -1; /* Error, Verify Mode Not supported*/
 8020bfc:	f04f 33ff 	mov.w	r3, #4294967295
 8020c00:	e017      	b.n	8020c32 <SCSI_Verify10+0x72>
  }

  if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr, hmsc->scsi_blk_len) < 0)
 8020c02:	697b      	ldr	r3, [r7, #20]
 8020c04:	f503 5383 	add.w	r3, r3, #4192	; 0x1060
 8020c08:	330c      	adds	r3, #12
 8020c0a:	681a      	ldr	r2, [r3, #0]
 8020c0c:	697b      	ldr	r3, [r7, #20]
 8020c0e:	f503 5383 	add.w	r3, r3, #4192	; 0x1060
 8020c12:	3310      	adds	r3, #16
 8020c14:	681b      	ldr	r3, [r3, #0]
 8020c16:	7af9      	ldrb	r1, [r7, #11]
 8020c18:	68f8      	ldr	r0, [r7, #12]
 8020c1a:	f000 f80e 	bl	8020c3a <SCSI_CheckAddressRange>
 8020c1e:	4603      	mov	r3, r0
 8020c20:	2b00      	cmp	r3, #0
 8020c22:	da02      	bge.n	8020c2a <SCSI_Verify10+0x6a>
  {
    return -1; /* error */
 8020c24:	f04f 33ff 	mov.w	r3, #4294967295
 8020c28:	e003      	b.n	8020c32 <SCSI_Verify10+0x72>
  }

  hmsc->bot_data_length = 0U;
 8020c2a:	697b      	ldr	r3, [r7, #20]
 8020c2c:	2200      	movs	r2, #0
 8020c2e:	60da      	str	r2, [r3, #12]

  return 0;
 8020c30:	2300      	movs	r3, #0
}
 8020c32:	4618      	mov	r0, r3
 8020c34:	3718      	adds	r7, #24
 8020c36:	46bd      	mov	sp, r7
 8020c38:	bd80      	pop	{r7, pc}

08020c3a <SCSI_CheckAddressRange>:
  * @param  blk_nbr: number of block to be processed
  * @retval status
  */
static int8_t SCSI_CheckAddressRange(USBD_HandleTypeDef *pdev, uint8_t lun,
                                     uint32_t blk_offset, uint32_t blk_nbr)
{
 8020c3a:	b580      	push	{r7, lr}
 8020c3c:	b086      	sub	sp, #24
 8020c3e:	af00      	add	r7, sp, #0
 8020c40:	60f8      	str	r0, [r7, #12]
 8020c42:	607a      	str	r2, [r7, #4]
 8020c44:	603b      	str	r3, [r7, #0]
 8020c46:	460b      	mov	r3, r1
 8020c48:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8020c4a:	68fb      	ldr	r3, [r7, #12]
 8020c4c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8020c50:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 8020c52:	697b      	ldr	r3, [r7, #20]
 8020c54:	2b00      	cmp	r3, #0
 8020c56:	d102      	bne.n	8020c5e <SCSI_CheckAddressRange+0x24>
  {
    return -1;
 8020c58:	f04f 33ff 	mov.w	r3, #4294967295
 8020c5c:	e013      	b.n	8020c86 <SCSI_CheckAddressRange+0x4c>
  }

  if ((blk_offset + blk_nbr) > hmsc->scsi_blk_nbr)
 8020c5e:	687a      	ldr	r2, [r7, #4]
 8020c60:	683b      	ldr	r3, [r7, #0]
 8020c62:	441a      	add	r2, r3
 8020c64:	697b      	ldr	r3, [r7, #20]
 8020c66:	f503 5383 	add.w	r3, r3, #4192	; 0x1060
 8020c6a:	3308      	adds	r3, #8
 8020c6c:	681b      	ldr	r3, [r3, #0]
 8020c6e:	429a      	cmp	r2, r3
 8020c70:	d908      	bls.n	8020c84 <SCSI_CheckAddressRange+0x4a>
  {
    SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, ADDRESS_OUT_OF_RANGE);
 8020c72:	7af9      	ldrb	r1, [r7, #11]
 8020c74:	2321      	movs	r3, #33	; 0x21
 8020c76:	2205      	movs	r2, #5
 8020c78:	68f8      	ldr	r0, [r7, #12]
 8020c7a:	f7ff fb81 	bl	8020380 <SCSI_SenseCode>
    return -1;
 8020c7e:	f04f 33ff 	mov.w	r3, #4294967295
 8020c82:	e000      	b.n	8020c86 <SCSI_CheckAddressRange+0x4c>
  }

  return 0;
 8020c84:	2300      	movs	r3, #0
}
 8020c86:	4618      	mov	r0, r3
 8020c88:	3718      	adds	r7, #24
 8020c8a:	46bd      	mov	sp, r7
 8020c8c:	bd80      	pop	{r7, pc}

08020c8e <SCSI_ProcessRead>:
  *         Handle Read Process
  * @param  lun: Logical unit number
  * @retval status
  */
static int8_t SCSI_ProcessRead(USBD_HandleTypeDef *pdev, uint8_t lun)
{
 8020c8e:	b590      	push	{r4, r7, lr}
 8020c90:	b085      	sub	sp, #20
 8020c92:	af00      	add	r7, sp, #0
 8020c94:	6078      	str	r0, [r7, #4]
 8020c96:	460b      	mov	r3, r1
 8020c98:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8020c9a:	687b      	ldr	r3, [r7, #4]
 8020c9c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8020ca0:	60fb      	str	r3, [r7, #12]
  uint32_t len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 8020ca2:	68fb      	ldr	r3, [r7, #12]
 8020ca4:	f503 5383 	add.w	r3, r3, #4192	; 0x1060
 8020ca8:	3310      	adds	r3, #16
 8020caa:	681a      	ldr	r2, [r3, #0]
 8020cac:	68fb      	ldr	r3, [r7, #12]
 8020cae:	f503 5383 	add.w	r3, r3, #4192	; 0x1060
 8020cb2:	3304      	adds	r3, #4
 8020cb4:	881b      	ldrh	r3, [r3, #0]
 8020cb6:	fb03 f302 	mul.w	r3, r3, r2
 8020cba:	60bb      	str	r3, [r7, #8]

  if (hmsc == NULL)
 8020cbc:	68fb      	ldr	r3, [r7, #12]
 8020cbe:	2b00      	cmp	r3, #0
 8020cc0:	d102      	bne.n	8020cc8 <SCSI_ProcessRead+0x3a>
  {
    return -1;
 8020cc2:	f04f 33ff 	mov.w	r3, #4294967295
 8020cc6:	e071      	b.n	8020dac <SCSI_ProcessRead+0x11e>
  }

  len = MIN(len, MSC_MEDIA_PACKET);
 8020cc8:	68bb      	ldr	r3, [r7, #8]
 8020cca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8020cce:	bf28      	it	cs
 8020cd0:	f44f 5380 	movcs.w	r3, #4096	; 0x1000
 8020cd4:	60bb      	str	r3, [r7, #8]

  if (((USBD_StorageTypeDef *)pdev->pUserData)->Read(lun, hmsc->bot_data,
 8020cd6:	687b      	ldr	r3, [r7, #4]
 8020cd8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8020cdc:	691c      	ldr	r4, [r3, #16]
 8020cde:	68fb      	ldr	r3, [r7, #12]
 8020ce0:	f103 0110 	add.w	r1, r3, #16
 8020ce4:	68fb      	ldr	r3, [r7, #12]
 8020ce6:	f503 5383 	add.w	r3, r3, #4192	; 0x1060
 8020cea:	330c      	adds	r3, #12
 8020cec:	681a      	ldr	r2, [r3, #0]
                                                     hmsc->scsi_blk_addr,
                                                     (len / hmsc->scsi_blk_size)) < 0)
 8020cee:	68fb      	ldr	r3, [r7, #12]
 8020cf0:	f503 5383 	add.w	r3, r3, #4192	; 0x1060
 8020cf4:	3304      	adds	r3, #4
 8020cf6:	881b      	ldrh	r3, [r3, #0]
 8020cf8:	4618      	mov	r0, r3
 8020cfa:	68bb      	ldr	r3, [r7, #8]
 8020cfc:	fbb3 f3f0 	udiv	r3, r3, r0
  if (((USBD_StorageTypeDef *)pdev->pUserData)->Read(lun, hmsc->bot_data,
 8020d00:	b29b      	uxth	r3, r3
 8020d02:	78f8      	ldrb	r0, [r7, #3]
 8020d04:	47a0      	blx	r4
 8020d06:	4603      	mov	r3, r0
 8020d08:	2b00      	cmp	r3, #0
 8020d0a:	da08      	bge.n	8020d1e <SCSI_ProcessRead+0x90>
  {
    SCSI_SenseCode(pdev, lun, HARDWARE_ERROR, UNRECOVERED_READ_ERROR);
 8020d0c:	78f9      	ldrb	r1, [r7, #3]
 8020d0e:	2311      	movs	r3, #17
 8020d10:	2204      	movs	r2, #4
 8020d12:	6878      	ldr	r0, [r7, #4]
 8020d14:	f7ff fb34 	bl	8020380 <SCSI_SenseCode>
    return -1;
 8020d18:	f04f 33ff 	mov.w	r3, #4294967295
 8020d1c:	e046      	b.n	8020dac <SCSI_ProcessRead+0x11e>
  }

  (void)USBD_LL_Transmit(pdev, MSC_EPIN_ADDR, hmsc->bot_data, len);
 8020d1e:	68fb      	ldr	r3, [r7, #12]
 8020d20:	f103 0210 	add.w	r2, r3, #16
 8020d24:	68bb      	ldr	r3, [r7, #8]
 8020d26:	2181      	movs	r1, #129	; 0x81
 8020d28:	6878      	ldr	r0, [r7, #4]
 8020d2a:	f004 fdef 	bl	802590c <USBD_LL_Transmit>

  hmsc->scsi_blk_addr += (len / hmsc->scsi_blk_size);
 8020d2e:	68fb      	ldr	r3, [r7, #12]
 8020d30:	f503 5383 	add.w	r3, r3, #4192	; 0x1060
 8020d34:	330c      	adds	r3, #12
 8020d36:	681a      	ldr	r2, [r3, #0]
 8020d38:	68fb      	ldr	r3, [r7, #12]
 8020d3a:	f503 5383 	add.w	r3, r3, #4192	; 0x1060
 8020d3e:	3304      	adds	r3, #4
 8020d40:	881b      	ldrh	r3, [r3, #0]
 8020d42:	4619      	mov	r1, r3
 8020d44:	68bb      	ldr	r3, [r7, #8]
 8020d46:	fbb3 f3f1 	udiv	r3, r3, r1
 8020d4a:	441a      	add	r2, r3
 8020d4c:	68fb      	ldr	r3, [r7, #12]
 8020d4e:	f503 5383 	add.w	r3, r3, #4192	; 0x1060
 8020d52:	330c      	adds	r3, #12
 8020d54:	601a      	str	r2, [r3, #0]
  hmsc->scsi_blk_len -= (len / hmsc->scsi_blk_size);
 8020d56:	68fb      	ldr	r3, [r7, #12]
 8020d58:	f503 5383 	add.w	r3, r3, #4192	; 0x1060
 8020d5c:	3310      	adds	r3, #16
 8020d5e:	681a      	ldr	r2, [r3, #0]
 8020d60:	68fb      	ldr	r3, [r7, #12]
 8020d62:	f503 5383 	add.w	r3, r3, #4192	; 0x1060
 8020d66:	3304      	adds	r3, #4
 8020d68:	881b      	ldrh	r3, [r3, #0]
 8020d6a:	4619      	mov	r1, r3
 8020d6c:	68bb      	ldr	r3, [r7, #8]
 8020d6e:	fbb3 f3f1 	udiv	r3, r3, r1
 8020d72:	1ad2      	subs	r2, r2, r3
 8020d74:	68fb      	ldr	r3, [r7, #12]
 8020d76:	f503 5383 	add.w	r3, r3, #4192	; 0x1060
 8020d7a:	3310      	adds	r3, #16
 8020d7c:	601a      	str	r2, [r3, #0]

  /* case 6 : Hi = Di */
  hmsc->csw.dDataResidue -= len;
 8020d7e:	68fb      	ldr	r3, [r7, #12]
 8020d80:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 8020d84:	3318      	adds	r3, #24
 8020d86:	681a      	ldr	r2, [r3, #0]
 8020d88:	68bb      	ldr	r3, [r7, #8]
 8020d8a:	1ad2      	subs	r2, r2, r3
 8020d8c:	68fb      	ldr	r3, [r7, #12]
 8020d8e:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 8020d92:	3318      	adds	r3, #24
 8020d94:	601a      	str	r2, [r3, #0]

  if (hmsc->scsi_blk_len == 0U)
 8020d96:	68fb      	ldr	r3, [r7, #12]
 8020d98:	f503 5383 	add.w	r3, r3, #4192	; 0x1060
 8020d9c:	3310      	adds	r3, #16
 8020d9e:	681b      	ldr	r3, [r3, #0]
 8020da0:	2b00      	cmp	r3, #0
 8020da2:	d102      	bne.n	8020daa <SCSI_ProcessRead+0x11c>
  {
    hmsc->bot_state = USBD_BOT_LAST_DATA_IN;
 8020da4:	68fb      	ldr	r3, [r7, #12]
 8020da6:	2203      	movs	r2, #3
 8020da8:	721a      	strb	r2, [r3, #8]
  }

  return 0;
 8020daa:	2300      	movs	r3, #0
}
 8020dac:	4618      	mov	r0, r3
 8020dae:	3714      	adds	r7, #20
 8020db0:	46bd      	mov	sp, r7
 8020db2:	bd90      	pop	{r4, r7, pc}

08020db4 <SCSI_ProcessWrite>:
  *         Handle Write Process
  * @param  lun: Logical unit number
  * @retval status
  */
static int8_t SCSI_ProcessWrite(USBD_HandleTypeDef *pdev, uint8_t lun)
{
 8020db4:	b590      	push	{r4, r7, lr}
 8020db6:	b085      	sub	sp, #20
 8020db8:	af00      	add	r7, sp, #0
 8020dba:	6078      	str	r0, [r7, #4]
 8020dbc:	460b      	mov	r3, r1
 8020dbe:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8020dc0:	687b      	ldr	r3, [r7, #4]
 8020dc2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8020dc6:	60fb      	str	r3, [r7, #12]
  uint32_t len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 8020dc8:	68fb      	ldr	r3, [r7, #12]
 8020dca:	f503 5383 	add.w	r3, r3, #4192	; 0x1060
 8020dce:	3310      	adds	r3, #16
 8020dd0:	681a      	ldr	r2, [r3, #0]
 8020dd2:	68fb      	ldr	r3, [r7, #12]
 8020dd4:	f503 5383 	add.w	r3, r3, #4192	; 0x1060
 8020dd8:	3304      	adds	r3, #4
 8020dda:	881b      	ldrh	r3, [r3, #0]
 8020ddc:	fb03 f302 	mul.w	r3, r3, r2
 8020de0:	60bb      	str	r3, [r7, #8]

  if (hmsc == NULL)
 8020de2:	68fb      	ldr	r3, [r7, #12]
 8020de4:	2b00      	cmp	r3, #0
 8020de6:	d102      	bne.n	8020dee <SCSI_ProcessWrite+0x3a>
  {
    return -1;
 8020de8:	f04f 33ff 	mov.w	r3, #4294967295
 8020dec:	e085      	b.n	8020efa <SCSI_ProcessWrite+0x146>
  }

  len = MIN(len, MSC_MEDIA_PACKET);
 8020dee:	68bb      	ldr	r3, [r7, #8]
 8020df0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8020df4:	bf28      	it	cs
 8020df6:	f44f 5380 	movcs.w	r3, #4096	; 0x1000
 8020dfa:	60bb      	str	r3, [r7, #8]

  if (((USBD_StorageTypeDef *)pdev->pUserData)->Write(lun, hmsc->bot_data,
 8020dfc:	687b      	ldr	r3, [r7, #4]
 8020dfe:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8020e02:	695c      	ldr	r4, [r3, #20]
 8020e04:	68fb      	ldr	r3, [r7, #12]
 8020e06:	f103 0110 	add.w	r1, r3, #16
 8020e0a:	68fb      	ldr	r3, [r7, #12]
 8020e0c:	f503 5383 	add.w	r3, r3, #4192	; 0x1060
 8020e10:	330c      	adds	r3, #12
 8020e12:	681a      	ldr	r2, [r3, #0]
                                                      hmsc->scsi_blk_addr,
                                                      (len / hmsc->scsi_blk_size)) < 0)
 8020e14:	68fb      	ldr	r3, [r7, #12]
 8020e16:	f503 5383 	add.w	r3, r3, #4192	; 0x1060
 8020e1a:	3304      	adds	r3, #4
 8020e1c:	881b      	ldrh	r3, [r3, #0]
 8020e1e:	4618      	mov	r0, r3
 8020e20:	68bb      	ldr	r3, [r7, #8]
 8020e22:	fbb3 f3f0 	udiv	r3, r3, r0
  if (((USBD_StorageTypeDef *)pdev->pUserData)->Write(lun, hmsc->bot_data,
 8020e26:	b29b      	uxth	r3, r3
 8020e28:	78f8      	ldrb	r0, [r7, #3]
 8020e2a:	47a0      	blx	r4
 8020e2c:	4603      	mov	r3, r0
 8020e2e:	2b00      	cmp	r3, #0
 8020e30:	da08      	bge.n	8020e44 <SCSI_ProcessWrite+0x90>
  {
    SCSI_SenseCode(pdev, lun, HARDWARE_ERROR, WRITE_FAULT);
 8020e32:	78f9      	ldrb	r1, [r7, #3]
 8020e34:	2303      	movs	r3, #3
 8020e36:	2204      	movs	r2, #4
 8020e38:	6878      	ldr	r0, [r7, #4]
 8020e3a:	f7ff faa1 	bl	8020380 <SCSI_SenseCode>
    return -1;
 8020e3e:	f04f 33ff 	mov.w	r3, #4294967295
 8020e42:	e05a      	b.n	8020efa <SCSI_ProcessWrite+0x146>
  }

  hmsc->scsi_blk_addr += (len / hmsc->scsi_blk_size);
 8020e44:	68fb      	ldr	r3, [r7, #12]
 8020e46:	f503 5383 	add.w	r3, r3, #4192	; 0x1060
 8020e4a:	330c      	adds	r3, #12
 8020e4c:	681a      	ldr	r2, [r3, #0]
 8020e4e:	68fb      	ldr	r3, [r7, #12]
 8020e50:	f503 5383 	add.w	r3, r3, #4192	; 0x1060
 8020e54:	3304      	adds	r3, #4
 8020e56:	881b      	ldrh	r3, [r3, #0]
 8020e58:	4619      	mov	r1, r3
 8020e5a:	68bb      	ldr	r3, [r7, #8]
 8020e5c:	fbb3 f3f1 	udiv	r3, r3, r1
 8020e60:	441a      	add	r2, r3
 8020e62:	68fb      	ldr	r3, [r7, #12]
 8020e64:	f503 5383 	add.w	r3, r3, #4192	; 0x1060
 8020e68:	330c      	adds	r3, #12
 8020e6a:	601a      	str	r2, [r3, #0]
  hmsc->scsi_blk_len -= (len / hmsc->scsi_blk_size);
 8020e6c:	68fb      	ldr	r3, [r7, #12]
 8020e6e:	f503 5383 	add.w	r3, r3, #4192	; 0x1060
 8020e72:	3310      	adds	r3, #16
 8020e74:	681a      	ldr	r2, [r3, #0]
 8020e76:	68fb      	ldr	r3, [r7, #12]
 8020e78:	f503 5383 	add.w	r3, r3, #4192	; 0x1060
 8020e7c:	3304      	adds	r3, #4
 8020e7e:	881b      	ldrh	r3, [r3, #0]
 8020e80:	4619      	mov	r1, r3
 8020e82:	68bb      	ldr	r3, [r7, #8]
 8020e84:	fbb3 f3f1 	udiv	r3, r3, r1
 8020e88:	1ad2      	subs	r2, r2, r3
 8020e8a:	68fb      	ldr	r3, [r7, #12]
 8020e8c:	f503 5383 	add.w	r3, r3, #4192	; 0x1060
 8020e90:	3310      	adds	r3, #16
 8020e92:	601a      	str	r2, [r3, #0]

  /* case 12 : Ho = Do */
  hmsc->csw.dDataResidue -= len;
 8020e94:	68fb      	ldr	r3, [r7, #12]
 8020e96:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 8020e9a:	3318      	adds	r3, #24
 8020e9c:	681a      	ldr	r2, [r3, #0]
 8020e9e:	68bb      	ldr	r3, [r7, #8]
 8020ea0:	1ad2      	subs	r2, r2, r3
 8020ea2:	68fb      	ldr	r3, [r7, #12]
 8020ea4:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 8020ea8:	3318      	adds	r3, #24
 8020eaa:	601a      	str	r2, [r3, #0]

  if (hmsc->scsi_blk_len == 0U)
 8020eac:	68fb      	ldr	r3, [r7, #12]
 8020eae:	f503 5383 	add.w	r3, r3, #4192	; 0x1060
 8020eb2:	3310      	adds	r3, #16
 8020eb4:	681b      	ldr	r3, [r3, #0]
 8020eb6:	2b00      	cmp	r3, #0
 8020eb8:	d104      	bne.n	8020ec4 <SCSI_ProcessWrite+0x110>
  {
    MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_PASSED);
 8020eba:	2100      	movs	r1, #0
 8020ebc:	6878      	ldr	r0, [r7, #4]
 8020ebe:	f7fe fcd1 	bl	801f864 <MSC_BOT_SendCSW>
 8020ec2:	e019      	b.n	8020ef8 <SCSI_ProcessWrite+0x144>
  }
  else
  {
    len = MIN((hmsc->scsi_blk_len * hmsc->scsi_blk_size), MSC_MEDIA_PACKET);
 8020ec4:	68fb      	ldr	r3, [r7, #12]
 8020ec6:	f503 5383 	add.w	r3, r3, #4192	; 0x1060
 8020eca:	3310      	adds	r3, #16
 8020ecc:	681a      	ldr	r2, [r3, #0]
 8020ece:	68fb      	ldr	r3, [r7, #12]
 8020ed0:	f503 5383 	add.w	r3, r3, #4192	; 0x1060
 8020ed4:	3304      	adds	r3, #4
 8020ed6:	881b      	ldrh	r3, [r3, #0]
 8020ed8:	fb03 f302 	mul.w	r3, r3, r2
 8020edc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8020ee0:	bf28      	it	cs
 8020ee2:	f44f 5380 	movcs.w	r3, #4096	; 0x1000
 8020ee6:	60bb      	str	r3, [r7, #8]

    /* Prepare EP to Receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, MSC_EPOUT_ADDR, hmsc->bot_data, len);
 8020ee8:	68fb      	ldr	r3, [r7, #12]
 8020eea:	f103 0210 	add.w	r2, r3, #16
 8020eee:	68bb      	ldr	r3, [r7, #8]
 8020ef0:	2101      	movs	r1, #1
 8020ef2:	6878      	ldr	r0, [r7, #4]
 8020ef4:	f004 fd2b 	bl	802594e <USBD_LL_PrepareReceive>
  }

  return 0;
 8020ef8:	2300      	movs	r3, #0
}
 8020efa:	4618      	mov	r0, r3
 8020efc:	3714      	adds	r7, #20
 8020efe:	46bd      	mov	sp, r7
 8020f00:	bd90      	pop	{r4, r7, pc}

08020f02 <SCSI_UpdateBotData>:
  * @param  length: Data length
  * @retval status
  */
static int8_t SCSI_UpdateBotData(USBD_MSC_BOT_HandleTypeDef *hmsc,
                                 uint8_t *pBuff, uint16_t length)
{
 8020f02:	b480      	push	{r7}
 8020f04:	b087      	sub	sp, #28
 8020f06:	af00      	add	r7, sp, #0
 8020f08:	60f8      	str	r0, [r7, #12]
 8020f0a:	60b9      	str	r1, [r7, #8]
 8020f0c:	4613      	mov	r3, r2
 8020f0e:	80fb      	strh	r3, [r7, #6]
  uint16_t len = length;
 8020f10:	88fb      	ldrh	r3, [r7, #6]
 8020f12:	82fb      	strh	r3, [r7, #22]

  if (hmsc == NULL)
 8020f14:	68fb      	ldr	r3, [r7, #12]
 8020f16:	2b00      	cmp	r3, #0
 8020f18:	d102      	bne.n	8020f20 <SCSI_UpdateBotData+0x1e>
  {
    return -1;
 8020f1a:	f04f 33ff 	mov.w	r3, #4294967295
 8020f1e:	e013      	b.n	8020f48 <SCSI_UpdateBotData+0x46>
  }

  hmsc->bot_data_length = len;
 8020f20:	8afa      	ldrh	r2, [r7, #22]
 8020f22:	68fb      	ldr	r3, [r7, #12]
 8020f24:	60da      	str	r2, [r3, #12]

  while (len != 0U)
 8020f26:	e00b      	b.n	8020f40 <SCSI_UpdateBotData+0x3e>
  {
    len--;
 8020f28:	8afb      	ldrh	r3, [r7, #22]
 8020f2a:	3b01      	subs	r3, #1
 8020f2c:	82fb      	strh	r3, [r7, #22]
    hmsc->bot_data[len] = pBuff[len];
 8020f2e:	8afb      	ldrh	r3, [r7, #22]
 8020f30:	68ba      	ldr	r2, [r7, #8]
 8020f32:	441a      	add	r2, r3
 8020f34:	8afb      	ldrh	r3, [r7, #22]
 8020f36:	7811      	ldrb	r1, [r2, #0]
 8020f38:	68fa      	ldr	r2, [r7, #12]
 8020f3a:	4413      	add	r3, r2
 8020f3c:	460a      	mov	r2, r1
 8020f3e:	741a      	strb	r2, [r3, #16]
  while (len != 0U)
 8020f40:	8afb      	ldrh	r3, [r7, #22]
 8020f42:	2b00      	cmp	r3, #0
 8020f44:	d1f0      	bne.n	8020f28 <SCSI_UpdateBotData+0x26>
  }

  return 0;
 8020f46:	2300      	movs	r3, #0
}
 8020f48:	4618      	mov	r0, r3
 8020f4a:	371c      	adds	r7, #28
 8020f4c:	46bd      	mov	sp, r7
 8020f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020f52:	4770      	bx	lr

08020f54 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8020f54:	b580      	push	{r7, lr}
 8020f56:	b086      	sub	sp, #24
 8020f58:	af00      	add	r7, sp, #0
 8020f5a:	60f8      	str	r0, [r7, #12]
 8020f5c:	60b9      	str	r1, [r7, #8]
 8020f5e:	4613      	mov	r3, r2
 8020f60:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8020f62:	68fb      	ldr	r3, [r7, #12]
 8020f64:	2b00      	cmp	r3, #0
 8020f66:	d101      	bne.n	8020f6c <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8020f68:	2303      	movs	r3, #3
 8020f6a:	e01f      	b.n	8020fac <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 8020f6c:	68fb      	ldr	r3, [r7, #12]
 8020f6e:	2200      	movs	r2, #0
 8020f70:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 8020f74:	68fb      	ldr	r3, [r7, #12]
 8020f76:	2200      	movs	r2, #0
 8020f78:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 8020f7c:	68fb      	ldr	r3, [r7, #12]
 8020f7e:	2200      	movs	r2, #0
 8020f80:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8020f84:	68bb      	ldr	r3, [r7, #8]
 8020f86:	2b00      	cmp	r3, #0
 8020f88:	d003      	beq.n	8020f92 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8020f8a:	68fb      	ldr	r3, [r7, #12]
 8020f8c:	68ba      	ldr	r2, [r7, #8]
 8020f8e:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8020f92:	68fb      	ldr	r3, [r7, #12]
 8020f94:	2201      	movs	r2, #1
 8020f96:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8020f9a:	68fb      	ldr	r3, [r7, #12]
 8020f9c:	79fa      	ldrb	r2, [r7, #7]
 8020f9e:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8020fa0:	68f8      	ldr	r0, [r7, #12]
 8020fa2:	f004 fb5f 	bl	8025664 <USBD_LL_Init>
 8020fa6:	4603      	mov	r3, r0
 8020fa8:	75fb      	strb	r3, [r7, #23]

  return ret;
 8020faa:	7dfb      	ldrb	r3, [r7, #23]
}
 8020fac:	4618      	mov	r0, r3
 8020fae:	3718      	adds	r7, #24
 8020fb0:	46bd      	mov	sp, r7
 8020fb2:	bd80      	pop	{r7, pc}

08020fb4 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8020fb4:	b580      	push	{r7, lr}
 8020fb6:	b084      	sub	sp, #16
 8020fb8:	af00      	add	r7, sp, #0
 8020fba:	6078      	str	r0, [r7, #4]
 8020fbc:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8020fbe:	2300      	movs	r3, #0
 8020fc0:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8020fc2:	683b      	ldr	r3, [r7, #0]
 8020fc4:	2b00      	cmp	r3, #0
 8020fc6:	d101      	bne.n	8020fcc <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 8020fc8:	2303      	movs	r3, #3
 8020fca:	e016      	b.n	8020ffa <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 8020fcc:	687b      	ldr	r3, [r7, #4]
 8020fce:	683a      	ldr	r2, [r7, #0]
 8020fd0:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 8020fd4:	687b      	ldr	r3, [r7, #4]
 8020fd6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8020fda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8020fdc:	2b00      	cmp	r3, #0
 8020fde:	d00b      	beq.n	8020ff8 <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 8020fe0:	687b      	ldr	r3, [r7, #4]
 8020fe2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8020fe6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8020fe8:	f107 020e 	add.w	r2, r7, #14
 8020fec:	4610      	mov	r0, r2
 8020fee:	4798      	blx	r3
 8020ff0:	4602      	mov	r2, r0
 8020ff2:	687b      	ldr	r3, [r7, #4]
 8020ff4:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 8020ff8:	2300      	movs	r3, #0
}
 8020ffa:	4618      	mov	r0, r3
 8020ffc:	3710      	adds	r7, #16
 8020ffe:	46bd      	mov	sp, r7
 8021000:	bd80      	pop	{r7, pc}

08021002 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8021002:	b580      	push	{r7, lr}
 8021004:	b082      	sub	sp, #8
 8021006:	af00      	add	r7, sp, #0
 8021008:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 802100a:	6878      	ldr	r0, [r7, #4]
 802100c:	f004 fb76 	bl	80256fc <USBD_LL_Start>
 8021010:	4603      	mov	r3, r0
}
 8021012:	4618      	mov	r0, r3
 8021014:	3708      	adds	r7, #8
 8021016:	46bd      	mov	sp, r7
 8021018:	bd80      	pop	{r7, pc}

0802101a <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 802101a:	b480      	push	{r7}
 802101c:	b083      	sub	sp, #12
 802101e:	af00      	add	r7, sp, #0
 8021020:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8021022:	2300      	movs	r3, #0
}
 8021024:	4618      	mov	r0, r3
 8021026:	370c      	adds	r7, #12
 8021028:	46bd      	mov	sp, r7
 802102a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802102e:	4770      	bx	lr

08021030 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8021030:	b580      	push	{r7, lr}
 8021032:	b084      	sub	sp, #16
 8021034:	af00      	add	r7, sp, #0
 8021036:	6078      	str	r0, [r7, #4]
 8021038:	460b      	mov	r3, r1
 802103a:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 802103c:	2303      	movs	r3, #3
 802103e:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8021040:	687b      	ldr	r3, [r7, #4]
 8021042:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8021046:	2b00      	cmp	r3, #0
 8021048:	d009      	beq.n	802105e <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 802104a:	687b      	ldr	r3, [r7, #4]
 802104c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8021050:	681b      	ldr	r3, [r3, #0]
 8021052:	78fa      	ldrb	r2, [r7, #3]
 8021054:	4611      	mov	r1, r2
 8021056:	6878      	ldr	r0, [r7, #4]
 8021058:	4798      	blx	r3
 802105a:	4603      	mov	r3, r0
 802105c:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 802105e:	7bfb      	ldrb	r3, [r7, #15]
}
 8021060:	4618      	mov	r0, r3
 8021062:	3710      	adds	r7, #16
 8021064:	46bd      	mov	sp, r7
 8021066:	bd80      	pop	{r7, pc}

08021068 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8021068:	b580      	push	{r7, lr}
 802106a:	b082      	sub	sp, #8
 802106c:	af00      	add	r7, sp, #0
 802106e:	6078      	str	r0, [r7, #4]
 8021070:	460b      	mov	r3, r1
 8021072:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 8021074:	687b      	ldr	r3, [r7, #4]
 8021076:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 802107a:	2b00      	cmp	r3, #0
 802107c:	d007      	beq.n	802108e <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 802107e:	687b      	ldr	r3, [r7, #4]
 8021080:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8021084:	685b      	ldr	r3, [r3, #4]
 8021086:	78fa      	ldrb	r2, [r7, #3]
 8021088:	4611      	mov	r1, r2
 802108a:	6878      	ldr	r0, [r7, #4]
 802108c:	4798      	blx	r3
  }

  return USBD_OK;
 802108e:	2300      	movs	r3, #0
}
 8021090:	4618      	mov	r0, r3
 8021092:	3708      	adds	r7, #8
 8021094:	46bd      	mov	sp, r7
 8021096:	bd80      	pop	{r7, pc}

08021098 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8021098:	b580      	push	{r7, lr}
 802109a:	b084      	sub	sp, #16
 802109c:	af00      	add	r7, sp, #0
 802109e:	6078      	str	r0, [r7, #4]
 80210a0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 80210a2:	687b      	ldr	r3, [r7, #4]
 80210a4:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80210a8:	6839      	ldr	r1, [r7, #0]
 80210aa:	4618      	mov	r0, r3
 80210ac:	f000 ffba 	bl	8022024 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80210b0:	687b      	ldr	r3, [r7, #4]
 80210b2:	2201      	movs	r2, #1
 80210b4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80210b8:	687b      	ldr	r3, [r7, #4]
 80210ba:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 80210be:	461a      	mov	r2, r3
 80210c0:	687b      	ldr	r3, [r7, #4]
 80210c2:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80210c6:	687b      	ldr	r3, [r7, #4]
 80210c8:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80210cc:	f003 031f 	and.w	r3, r3, #31
 80210d0:	2b02      	cmp	r3, #2
 80210d2:	d01a      	beq.n	802110a <USBD_LL_SetupStage+0x72>
 80210d4:	2b02      	cmp	r3, #2
 80210d6:	d822      	bhi.n	802111e <USBD_LL_SetupStage+0x86>
 80210d8:	2b00      	cmp	r3, #0
 80210da:	d002      	beq.n	80210e2 <USBD_LL_SetupStage+0x4a>
 80210dc:	2b01      	cmp	r3, #1
 80210de:	d00a      	beq.n	80210f6 <USBD_LL_SetupStage+0x5e>
 80210e0:	e01d      	b.n	802111e <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 80210e2:	687b      	ldr	r3, [r7, #4]
 80210e4:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80210e8:	4619      	mov	r1, r3
 80210ea:	6878      	ldr	r0, [r7, #4]
 80210ec:	f000 fa62 	bl	80215b4 <USBD_StdDevReq>
 80210f0:	4603      	mov	r3, r0
 80210f2:	73fb      	strb	r3, [r7, #15]
      break;
 80210f4:	e020      	b.n	8021138 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 80210f6:	687b      	ldr	r3, [r7, #4]
 80210f8:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80210fc:	4619      	mov	r1, r3
 80210fe:	6878      	ldr	r0, [r7, #4]
 8021100:	f000 fac6 	bl	8021690 <USBD_StdItfReq>
 8021104:	4603      	mov	r3, r0
 8021106:	73fb      	strb	r3, [r7, #15]
      break;
 8021108:	e016      	b.n	8021138 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 802110a:	687b      	ldr	r3, [r7, #4]
 802110c:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8021110:	4619      	mov	r1, r3
 8021112:	6878      	ldr	r0, [r7, #4]
 8021114:	f000 fb05 	bl	8021722 <USBD_StdEPReq>
 8021118:	4603      	mov	r3, r0
 802111a:	73fb      	strb	r3, [r7, #15]
      break;
 802111c:	e00c      	b.n	8021138 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 802111e:	687b      	ldr	r3, [r7, #4]
 8021120:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8021124:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8021128:	b2db      	uxtb	r3, r3
 802112a:	4619      	mov	r1, r3
 802112c:	6878      	ldr	r0, [r7, #4]
 802112e:	f004 fb64 	bl	80257fa <USBD_LL_StallEP>
 8021132:	4603      	mov	r3, r0
 8021134:	73fb      	strb	r3, [r7, #15]
      break;
 8021136:	bf00      	nop
  }

  return ret;
 8021138:	7bfb      	ldrb	r3, [r7, #15]
}
 802113a:	4618      	mov	r0, r3
 802113c:	3710      	adds	r7, #16
 802113e:	46bd      	mov	sp, r7
 8021140:	bd80      	pop	{r7, pc}

08021142 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8021142:	b580      	push	{r7, lr}
 8021144:	b086      	sub	sp, #24
 8021146:	af00      	add	r7, sp, #0
 8021148:	60f8      	str	r0, [r7, #12]
 802114a:	460b      	mov	r3, r1
 802114c:	607a      	str	r2, [r7, #4]
 802114e:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8021150:	7afb      	ldrb	r3, [r7, #11]
 8021152:	2b00      	cmp	r3, #0
 8021154:	d138      	bne.n	80211c8 <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 8021156:	68fb      	ldr	r3, [r7, #12]
 8021158:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 802115c:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 802115e:	68fb      	ldr	r3, [r7, #12]
 8021160:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8021164:	2b03      	cmp	r3, #3
 8021166:	d14a      	bne.n	80211fe <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 8021168:	693b      	ldr	r3, [r7, #16]
 802116a:	689a      	ldr	r2, [r3, #8]
 802116c:	693b      	ldr	r3, [r7, #16]
 802116e:	68db      	ldr	r3, [r3, #12]
 8021170:	429a      	cmp	r2, r3
 8021172:	d913      	bls.n	802119c <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8021174:	693b      	ldr	r3, [r7, #16]
 8021176:	689a      	ldr	r2, [r3, #8]
 8021178:	693b      	ldr	r3, [r7, #16]
 802117a:	68db      	ldr	r3, [r3, #12]
 802117c:	1ad2      	subs	r2, r2, r3
 802117e:	693b      	ldr	r3, [r7, #16]
 8021180:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8021182:	693b      	ldr	r3, [r7, #16]
 8021184:	68da      	ldr	r2, [r3, #12]
 8021186:	693b      	ldr	r3, [r7, #16]
 8021188:	689b      	ldr	r3, [r3, #8]
 802118a:	4293      	cmp	r3, r2
 802118c:	bf28      	it	cs
 802118e:	4613      	movcs	r3, r2
 8021190:	461a      	mov	r2, r3
 8021192:	6879      	ldr	r1, [r7, #4]
 8021194:	68f8      	ldr	r0, [r7, #12]
 8021196:	f001 f81c 	bl	80221d2 <USBD_CtlContinueRx>
 802119a:	e030      	b.n	80211fe <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 802119c:	68fb      	ldr	r3, [r7, #12]
 802119e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80211a2:	b2db      	uxtb	r3, r3
 80211a4:	2b03      	cmp	r3, #3
 80211a6:	d10b      	bne.n	80211c0 <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 80211a8:	68fb      	ldr	r3, [r7, #12]
 80211aa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80211ae:	691b      	ldr	r3, [r3, #16]
 80211b0:	2b00      	cmp	r3, #0
 80211b2:	d005      	beq.n	80211c0 <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 80211b4:	68fb      	ldr	r3, [r7, #12]
 80211b6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80211ba:	691b      	ldr	r3, [r3, #16]
 80211bc:	68f8      	ldr	r0, [r7, #12]
 80211be:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 80211c0:	68f8      	ldr	r0, [r7, #12]
 80211c2:	f001 f817 	bl	80221f4 <USBD_CtlSendStatus>
 80211c6:	e01a      	b.n	80211fe <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80211c8:	68fb      	ldr	r3, [r7, #12]
 80211ca:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80211ce:	b2db      	uxtb	r3, r3
 80211d0:	2b03      	cmp	r3, #3
 80211d2:	d114      	bne.n	80211fe <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 80211d4:	68fb      	ldr	r3, [r7, #12]
 80211d6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80211da:	699b      	ldr	r3, [r3, #24]
 80211dc:	2b00      	cmp	r3, #0
 80211de:	d00e      	beq.n	80211fe <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 80211e0:	68fb      	ldr	r3, [r7, #12]
 80211e2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80211e6:	699b      	ldr	r3, [r3, #24]
 80211e8:	7afa      	ldrb	r2, [r7, #11]
 80211ea:	4611      	mov	r1, r2
 80211ec:	68f8      	ldr	r0, [r7, #12]
 80211ee:	4798      	blx	r3
 80211f0:	4603      	mov	r3, r0
 80211f2:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 80211f4:	7dfb      	ldrb	r3, [r7, #23]
 80211f6:	2b00      	cmp	r3, #0
 80211f8:	d001      	beq.n	80211fe <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 80211fa:	7dfb      	ldrb	r3, [r7, #23]
 80211fc:	e000      	b.n	8021200 <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 80211fe:	2300      	movs	r3, #0
}
 8021200:	4618      	mov	r0, r3
 8021202:	3718      	adds	r7, #24
 8021204:	46bd      	mov	sp, r7
 8021206:	bd80      	pop	{r7, pc}

08021208 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8021208:	b580      	push	{r7, lr}
 802120a:	b086      	sub	sp, #24
 802120c:	af00      	add	r7, sp, #0
 802120e:	60f8      	str	r0, [r7, #12]
 8021210:	460b      	mov	r3, r1
 8021212:	607a      	str	r2, [r7, #4]
 8021214:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8021216:	7afb      	ldrb	r3, [r7, #11]
 8021218:	2b00      	cmp	r3, #0
 802121a:	d16b      	bne.n	80212f4 <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 802121c:	68fb      	ldr	r3, [r7, #12]
 802121e:	3314      	adds	r3, #20
 8021220:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8021222:	68fb      	ldr	r3, [r7, #12]
 8021224:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8021228:	2b02      	cmp	r3, #2
 802122a:	d156      	bne.n	80212da <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 802122c:	693b      	ldr	r3, [r7, #16]
 802122e:	689a      	ldr	r2, [r3, #8]
 8021230:	693b      	ldr	r3, [r7, #16]
 8021232:	68db      	ldr	r3, [r3, #12]
 8021234:	429a      	cmp	r2, r3
 8021236:	d914      	bls.n	8021262 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8021238:	693b      	ldr	r3, [r7, #16]
 802123a:	689a      	ldr	r2, [r3, #8]
 802123c:	693b      	ldr	r3, [r7, #16]
 802123e:	68db      	ldr	r3, [r3, #12]
 8021240:	1ad2      	subs	r2, r2, r3
 8021242:	693b      	ldr	r3, [r7, #16]
 8021244:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8021246:	693b      	ldr	r3, [r7, #16]
 8021248:	689b      	ldr	r3, [r3, #8]
 802124a:	461a      	mov	r2, r3
 802124c:	6879      	ldr	r1, [r7, #4]
 802124e:	68f8      	ldr	r0, [r7, #12]
 8021250:	f000 ffae 	bl	80221b0 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8021254:	2300      	movs	r3, #0
 8021256:	2200      	movs	r2, #0
 8021258:	2100      	movs	r1, #0
 802125a:	68f8      	ldr	r0, [r7, #12]
 802125c:	f004 fb77 	bl	802594e <USBD_LL_PrepareReceive>
 8021260:	e03b      	b.n	80212da <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8021262:	693b      	ldr	r3, [r7, #16]
 8021264:	68da      	ldr	r2, [r3, #12]
 8021266:	693b      	ldr	r3, [r7, #16]
 8021268:	689b      	ldr	r3, [r3, #8]
 802126a:	429a      	cmp	r2, r3
 802126c:	d11c      	bne.n	80212a8 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 802126e:	693b      	ldr	r3, [r7, #16]
 8021270:	685a      	ldr	r2, [r3, #4]
 8021272:	693b      	ldr	r3, [r7, #16]
 8021274:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8021276:	429a      	cmp	r2, r3
 8021278:	d316      	bcc.n	80212a8 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 802127a:	693b      	ldr	r3, [r7, #16]
 802127c:	685a      	ldr	r2, [r3, #4]
 802127e:	68fb      	ldr	r3, [r7, #12]
 8021280:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8021284:	429a      	cmp	r2, r3
 8021286:	d20f      	bcs.n	80212a8 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8021288:	2200      	movs	r2, #0
 802128a:	2100      	movs	r1, #0
 802128c:	68f8      	ldr	r0, [r7, #12]
 802128e:	f000 ff8f 	bl	80221b0 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8021292:	68fb      	ldr	r3, [r7, #12]
 8021294:	2200      	movs	r2, #0
 8021296:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 802129a:	2300      	movs	r3, #0
 802129c:	2200      	movs	r2, #0
 802129e:	2100      	movs	r1, #0
 80212a0:	68f8      	ldr	r0, [r7, #12]
 80212a2:	f004 fb54 	bl	802594e <USBD_LL_PrepareReceive>
 80212a6:	e018      	b.n	80212da <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80212a8:	68fb      	ldr	r3, [r7, #12]
 80212aa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80212ae:	b2db      	uxtb	r3, r3
 80212b0:	2b03      	cmp	r3, #3
 80212b2:	d10b      	bne.n	80212cc <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 80212b4:	68fb      	ldr	r3, [r7, #12]
 80212b6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80212ba:	68db      	ldr	r3, [r3, #12]
 80212bc:	2b00      	cmp	r3, #0
 80212be:	d005      	beq.n	80212cc <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 80212c0:	68fb      	ldr	r3, [r7, #12]
 80212c2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80212c6:	68db      	ldr	r3, [r3, #12]
 80212c8:	68f8      	ldr	r0, [r7, #12]
 80212ca:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80212cc:	2180      	movs	r1, #128	; 0x80
 80212ce:	68f8      	ldr	r0, [r7, #12]
 80212d0:	f004 fa93 	bl	80257fa <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 80212d4:	68f8      	ldr	r0, [r7, #12]
 80212d6:	f000 ffa0 	bl	802221a <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 80212da:	68fb      	ldr	r3, [r7, #12]
 80212dc:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 80212e0:	2b01      	cmp	r3, #1
 80212e2:	d122      	bne.n	802132a <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 80212e4:	68f8      	ldr	r0, [r7, #12]
 80212e6:	f7ff fe98 	bl	802101a <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80212ea:	68fb      	ldr	r3, [r7, #12]
 80212ec:	2200      	movs	r2, #0
 80212ee:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 80212f2:	e01a      	b.n	802132a <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80212f4:	68fb      	ldr	r3, [r7, #12]
 80212f6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80212fa:	b2db      	uxtb	r3, r3
 80212fc:	2b03      	cmp	r3, #3
 80212fe:	d114      	bne.n	802132a <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 8021300:	68fb      	ldr	r3, [r7, #12]
 8021302:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8021306:	695b      	ldr	r3, [r3, #20]
 8021308:	2b00      	cmp	r3, #0
 802130a:	d00e      	beq.n	802132a <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 802130c:	68fb      	ldr	r3, [r7, #12]
 802130e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8021312:	695b      	ldr	r3, [r3, #20]
 8021314:	7afa      	ldrb	r2, [r7, #11]
 8021316:	4611      	mov	r1, r2
 8021318:	68f8      	ldr	r0, [r7, #12]
 802131a:	4798      	blx	r3
 802131c:	4603      	mov	r3, r0
 802131e:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8021320:	7dfb      	ldrb	r3, [r7, #23]
 8021322:	2b00      	cmp	r3, #0
 8021324:	d001      	beq.n	802132a <USBD_LL_DataInStage+0x122>
        {
          return ret;
 8021326:	7dfb      	ldrb	r3, [r7, #23]
 8021328:	e000      	b.n	802132c <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 802132a:	2300      	movs	r3, #0
}
 802132c:	4618      	mov	r0, r3
 802132e:	3718      	adds	r7, #24
 8021330:	46bd      	mov	sp, r7
 8021332:	bd80      	pop	{r7, pc}

08021334 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8021334:	b580      	push	{r7, lr}
 8021336:	b082      	sub	sp, #8
 8021338:	af00      	add	r7, sp, #0
 802133a:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 802133c:	687b      	ldr	r3, [r7, #4]
 802133e:	2201      	movs	r2, #1
 8021340:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8021344:	687b      	ldr	r3, [r7, #4]
 8021346:	2200      	movs	r2, #0
 8021348:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 802134c:	687b      	ldr	r3, [r7, #4]
 802134e:	2200      	movs	r2, #0
 8021350:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8021352:	687b      	ldr	r3, [r7, #4]
 8021354:	2200      	movs	r2, #0
 8021356:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 802135a:	687b      	ldr	r3, [r7, #4]
 802135c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8021360:	2b00      	cmp	r3, #0
 8021362:	d101      	bne.n	8021368 <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 8021364:	2303      	movs	r3, #3
 8021366:	e02f      	b.n	80213c8 <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 8021368:	687b      	ldr	r3, [r7, #4]
 802136a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 802136e:	2b00      	cmp	r3, #0
 8021370:	d00f      	beq.n	8021392 <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 8021372:	687b      	ldr	r3, [r7, #4]
 8021374:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8021378:	685b      	ldr	r3, [r3, #4]
 802137a:	2b00      	cmp	r3, #0
 802137c:	d009      	beq.n	8021392 <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 802137e:	687b      	ldr	r3, [r7, #4]
 8021380:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8021384:	685b      	ldr	r3, [r3, #4]
 8021386:	687a      	ldr	r2, [r7, #4]
 8021388:	6852      	ldr	r2, [r2, #4]
 802138a:	b2d2      	uxtb	r2, r2
 802138c:	4611      	mov	r1, r2
 802138e:	6878      	ldr	r0, [r7, #4]
 8021390:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8021392:	2340      	movs	r3, #64	; 0x40
 8021394:	2200      	movs	r2, #0
 8021396:	2100      	movs	r1, #0
 8021398:	6878      	ldr	r0, [r7, #4]
 802139a:	f004 f9ca 	bl	8025732 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 802139e:	687b      	ldr	r3, [r7, #4]
 80213a0:	2201      	movs	r2, #1
 80213a2:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80213a6:	687b      	ldr	r3, [r7, #4]
 80213a8:	2240      	movs	r2, #64	; 0x40
 80213aa:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80213ae:	2340      	movs	r3, #64	; 0x40
 80213b0:	2200      	movs	r2, #0
 80213b2:	2180      	movs	r1, #128	; 0x80
 80213b4:	6878      	ldr	r0, [r7, #4]
 80213b6:	f004 f9bc 	bl	8025732 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80213ba:	687b      	ldr	r3, [r7, #4]
 80213bc:	2201      	movs	r2, #1
 80213be:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80213c0:	687b      	ldr	r3, [r7, #4]
 80213c2:	2240      	movs	r2, #64	; 0x40
 80213c4:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 80213c6:	2300      	movs	r3, #0
}
 80213c8:	4618      	mov	r0, r3
 80213ca:	3708      	adds	r7, #8
 80213cc:	46bd      	mov	sp, r7
 80213ce:	bd80      	pop	{r7, pc}

080213d0 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80213d0:	b480      	push	{r7}
 80213d2:	b083      	sub	sp, #12
 80213d4:	af00      	add	r7, sp, #0
 80213d6:	6078      	str	r0, [r7, #4]
 80213d8:	460b      	mov	r3, r1
 80213da:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80213dc:	687b      	ldr	r3, [r7, #4]
 80213de:	78fa      	ldrb	r2, [r7, #3]
 80213e0:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80213e2:	2300      	movs	r3, #0
}
 80213e4:	4618      	mov	r0, r3
 80213e6:	370c      	adds	r7, #12
 80213e8:	46bd      	mov	sp, r7
 80213ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80213ee:	4770      	bx	lr

080213f0 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80213f0:	b480      	push	{r7}
 80213f2:	b083      	sub	sp, #12
 80213f4:	af00      	add	r7, sp, #0
 80213f6:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 80213f8:	687b      	ldr	r3, [r7, #4]
 80213fa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80213fe:	b2da      	uxtb	r2, r3
 8021400:	687b      	ldr	r3, [r7, #4]
 8021402:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8021406:	687b      	ldr	r3, [r7, #4]
 8021408:	2204      	movs	r2, #4
 802140a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 802140e:	2300      	movs	r3, #0
}
 8021410:	4618      	mov	r0, r3
 8021412:	370c      	adds	r7, #12
 8021414:	46bd      	mov	sp, r7
 8021416:	f85d 7b04 	ldr.w	r7, [sp], #4
 802141a:	4770      	bx	lr

0802141c <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 802141c:	b480      	push	{r7}
 802141e:	b083      	sub	sp, #12
 8021420:	af00      	add	r7, sp, #0
 8021422:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8021424:	687b      	ldr	r3, [r7, #4]
 8021426:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 802142a:	b2db      	uxtb	r3, r3
 802142c:	2b04      	cmp	r3, #4
 802142e:	d106      	bne.n	802143e <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8021430:	687b      	ldr	r3, [r7, #4]
 8021432:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8021436:	b2da      	uxtb	r2, r3
 8021438:	687b      	ldr	r3, [r7, #4]
 802143a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 802143e:	2300      	movs	r3, #0
}
 8021440:	4618      	mov	r0, r3
 8021442:	370c      	adds	r7, #12
 8021444:	46bd      	mov	sp, r7
 8021446:	f85d 7b04 	ldr.w	r7, [sp], #4
 802144a:	4770      	bx	lr

0802144c <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 802144c:	b580      	push	{r7, lr}
 802144e:	b082      	sub	sp, #8
 8021450:	af00      	add	r7, sp, #0
 8021452:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 8021454:	687b      	ldr	r3, [r7, #4]
 8021456:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 802145a:	2b00      	cmp	r3, #0
 802145c:	d101      	bne.n	8021462 <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 802145e:	2303      	movs	r3, #3
 8021460:	e012      	b.n	8021488 <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8021462:	687b      	ldr	r3, [r7, #4]
 8021464:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8021468:	b2db      	uxtb	r3, r3
 802146a:	2b03      	cmp	r3, #3
 802146c:	d10b      	bne.n	8021486 <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 802146e:	687b      	ldr	r3, [r7, #4]
 8021470:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8021474:	69db      	ldr	r3, [r3, #28]
 8021476:	2b00      	cmp	r3, #0
 8021478:	d005      	beq.n	8021486 <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 802147a:	687b      	ldr	r3, [r7, #4]
 802147c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8021480:	69db      	ldr	r3, [r3, #28]
 8021482:	6878      	ldr	r0, [r7, #4]
 8021484:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8021486:	2300      	movs	r3, #0
}
 8021488:	4618      	mov	r0, r3
 802148a:	3708      	adds	r7, #8
 802148c:	46bd      	mov	sp, r7
 802148e:	bd80      	pop	{r7, pc}

08021490 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8021490:	b580      	push	{r7, lr}
 8021492:	b082      	sub	sp, #8
 8021494:	af00      	add	r7, sp, #0
 8021496:	6078      	str	r0, [r7, #4]
 8021498:	460b      	mov	r3, r1
 802149a:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 802149c:	687b      	ldr	r3, [r7, #4]
 802149e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80214a2:	2b00      	cmp	r3, #0
 80214a4:	d101      	bne.n	80214aa <USBD_LL_IsoINIncomplete+0x1a>
  {
    return USBD_FAIL;
 80214a6:	2303      	movs	r3, #3
 80214a8:	e014      	b.n	80214d4 <USBD_LL_IsoINIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80214aa:	687b      	ldr	r3, [r7, #4]
 80214ac:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80214b0:	b2db      	uxtb	r3, r3
 80214b2:	2b03      	cmp	r3, #3
 80214b4:	d10d      	bne.n	80214d2 <USBD_LL_IsoINIncomplete+0x42>
  {
    if (pdev->pClass->IsoINIncomplete != NULL)
 80214b6:	687b      	ldr	r3, [r7, #4]
 80214b8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80214bc:	6a1b      	ldr	r3, [r3, #32]
 80214be:	2b00      	cmp	r3, #0
 80214c0:	d007      	beq.n	80214d2 <USBD_LL_IsoINIncomplete+0x42>
    {
      (void)pdev->pClass->IsoINIncomplete(pdev, epnum);
 80214c2:	687b      	ldr	r3, [r7, #4]
 80214c4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80214c8:	6a1b      	ldr	r3, [r3, #32]
 80214ca:	78fa      	ldrb	r2, [r7, #3]
 80214cc:	4611      	mov	r1, r2
 80214ce:	6878      	ldr	r0, [r7, #4]
 80214d0:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80214d2:	2300      	movs	r3, #0
}
 80214d4:	4618      	mov	r0, r3
 80214d6:	3708      	adds	r7, #8
 80214d8:	46bd      	mov	sp, r7
 80214da:	bd80      	pop	{r7, pc}

080214dc <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 80214dc:	b580      	push	{r7, lr}
 80214de:	b082      	sub	sp, #8
 80214e0:	af00      	add	r7, sp, #0
 80214e2:	6078      	str	r0, [r7, #4]
 80214e4:	460b      	mov	r3, r1
 80214e6:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 80214e8:	687b      	ldr	r3, [r7, #4]
 80214ea:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80214ee:	2b00      	cmp	r3, #0
 80214f0:	d101      	bne.n	80214f6 <USBD_LL_IsoOUTIncomplete+0x1a>
  {
    return USBD_FAIL;
 80214f2:	2303      	movs	r3, #3
 80214f4:	e014      	b.n	8021520 <USBD_LL_IsoOUTIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80214f6:	687b      	ldr	r3, [r7, #4]
 80214f8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80214fc:	b2db      	uxtb	r3, r3
 80214fe:	2b03      	cmp	r3, #3
 8021500:	d10d      	bne.n	802151e <USBD_LL_IsoOUTIncomplete+0x42>
  {
    if (pdev->pClass->IsoOUTIncomplete != NULL)
 8021502:	687b      	ldr	r3, [r7, #4]
 8021504:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8021508:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 802150a:	2b00      	cmp	r3, #0
 802150c:	d007      	beq.n	802151e <USBD_LL_IsoOUTIncomplete+0x42>
    {
      (void)pdev->pClass->IsoOUTIncomplete(pdev, epnum);
 802150e:	687b      	ldr	r3, [r7, #4]
 8021510:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8021514:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8021516:	78fa      	ldrb	r2, [r7, #3]
 8021518:	4611      	mov	r1, r2
 802151a:	6878      	ldr	r0, [r7, #4]
 802151c:	4798      	blx	r3
    }
  }

  return USBD_OK;
 802151e:	2300      	movs	r3, #0
}
 8021520:	4618      	mov	r0, r3
 8021522:	3708      	adds	r7, #8
 8021524:	46bd      	mov	sp, r7
 8021526:	bd80      	pop	{r7, pc}

08021528 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8021528:	b480      	push	{r7}
 802152a:	b083      	sub	sp, #12
 802152c:	af00      	add	r7, sp, #0
 802152e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8021530:	2300      	movs	r3, #0
}
 8021532:	4618      	mov	r0, r3
 8021534:	370c      	adds	r7, #12
 8021536:	46bd      	mov	sp, r7
 8021538:	f85d 7b04 	ldr.w	r7, [sp], #4
 802153c:	4770      	bx	lr

0802153e <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 802153e:	b580      	push	{r7, lr}
 8021540:	b082      	sub	sp, #8
 8021542:	af00      	add	r7, sp, #0
 8021544:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8021546:	687b      	ldr	r3, [r7, #4]
 8021548:	2201      	movs	r2, #1
 802154a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 802154e:	687b      	ldr	r3, [r7, #4]
 8021550:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8021554:	2b00      	cmp	r3, #0
 8021556:	d009      	beq.n	802156c <USBD_LL_DevDisconnected+0x2e>
  {
    (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8021558:	687b      	ldr	r3, [r7, #4]
 802155a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 802155e:	685b      	ldr	r3, [r3, #4]
 8021560:	687a      	ldr	r2, [r7, #4]
 8021562:	6852      	ldr	r2, [r2, #4]
 8021564:	b2d2      	uxtb	r2, r2
 8021566:	4611      	mov	r1, r2
 8021568:	6878      	ldr	r0, [r7, #4]
 802156a:	4798      	blx	r3
  }

  return USBD_OK;
 802156c:	2300      	movs	r3, #0
}
 802156e:	4618      	mov	r0, r3
 8021570:	3708      	adds	r7, #8
 8021572:	46bd      	mov	sp, r7
 8021574:	bd80      	pop	{r7, pc}

08021576 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8021576:	b480      	push	{r7}
 8021578:	b087      	sub	sp, #28
 802157a:	af00      	add	r7, sp, #0
 802157c:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 802157e:	687b      	ldr	r3, [r7, #4]
 8021580:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8021582:	697b      	ldr	r3, [r7, #20]
 8021584:	781b      	ldrb	r3, [r3, #0]
 8021586:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8021588:	697b      	ldr	r3, [r7, #20]
 802158a:	3301      	adds	r3, #1
 802158c:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 802158e:	697b      	ldr	r3, [r7, #20]
 8021590:	781b      	ldrb	r3, [r3, #0]
 8021592:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8021594:	8a3b      	ldrh	r3, [r7, #16]
 8021596:	021b      	lsls	r3, r3, #8
 8021598:	b21a      	sxth	r2, r3
 802159a:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 802159e:	4313      	orrs	r3, r2
 80215a0:	b21b      	sxth	r3, r3
 80215a2:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 80215a4:	89fb      	ldrh	r3, [r7, #14]
}
 80215a6:	4618      	mov	r0, r3
 80215a8:	371c      	adds	r7, #28
 80215aa:	46bd      	mov	sp, r7
 80215ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80215b0:	4770      	bx	lr
	...

080215b4 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80215b4:	b580      	push	{r7, lr}
 80215b6:	b084      	sub	sp, #16
 80215b8:	af00      	add	r7, sp, #0
 80215ba:	6078      	str	r0, [r7, #4]
 80215bc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80215be:	2300      	movs	r3, #0
 80215c0:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80215c2:	683b      	ldr	r3, [r7, #0]
 80215c4:	781b      	ldrb	r3, [r3, #0]
 80215c6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80215ca:	2b40      	cmp	r3, #64	; 0x40
 80215cc:	d005      	beq.n	80215da <USBD_StdDevReq+0x26>
 80215ce:	2b40      	cmp	r3, #64	; 0x40
 80215d0:	d853      	bhi.n	802167a <USBD_StdDevReq+0xc6>
 80215d2:	2b00      	cmp	r3, #0
 80215d4:	d00b      	beq.n	80215ee <USBD_StdDevReq+0x3a>
 80215d6:	2b20      	cmp	r3, #32
 80215d8:	d14f      	bne.n	802167a <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80215da:	687b      	ldr	r3, [r7, #4]
 80215dc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80215e0:	689b      	ldr	r3, [r3, #8]
 80215e2:	6839      	ldr	r1, [r7, #0]
 80215e4:	6878      	ldr	r0, [r7, #4]
 80215e6:	4798      	blx	r3
 80215e8:	4603      	mov	r3, r0
 80215ea:	73fb      	strb	r3, [r7, #15]
      break;
 80215ec:	e04a      	b.n	8021684 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80215ee:	683b      	ldr	r3, [r7, #0]
 80215f0:	785b      	ldrb	r3, [r3, #1]
 80215f2:	2b09      	cmp	r3, #9
 80215f4:	d83b      	bhi.n	802166e <USBD_StdDevReq+0xba>
 80215f6:	a201      	add	r2, pc, #4	; (adr r2, 80215fc <USBD_StdDevReq+0x48>)
 80215f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80215fc:	08021651 	.word	0x08021651
 8021600:	08021665 	.word	0x08021665
 8021604:	0802166f 	.word	0x0802166f
 8021608:	0802165b 	.word	0x0802165b
 802160c:	0802166f 	.word	0x0802166f
 8021610:	0802162f 	.word	0x0802162f
 8021614:	08021625 	.word	0x08021625
 8021618:	0802166f 	.word	0x0802166f
 802161c:	08021647 	.word	0x08021647
 8021620:	08021639 	.word	0x08021639
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8021624:	6839      	ldr	r1, [r7, #0]
 8021626:	6878      	ldr	r0, [r7, #4]
 8021628:	f000 f9de 	bl	80219e8 <USBD_GetDescriptor>
          break;
 802162c:	e024      	b.n	8021678 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 802162e:	6839      	ldr	r1, [r7, #0]
 8021630:	6878      	ldr	r0, [r7, #4]
 8021632:	f000 fb6d 	bl	8021d10 <USBD_SetAddress>
          break;
 8021636:	e01f      	b.n	8021678 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8021638:	6839      	ldr	r1, [r7, #0]
 802163a:	6878      	ldr	r0, [r7, #4]
 802163c:	f000 fbac 	bl	8021d98 <USBD_SetConfig>
 8021640:	4603      	mov	r3, r0
 8021642:	73fb      	strb	r3, [r7, #15]
          break;
 8021644:	e018      	b.n	8021678 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8021646:	6839      	ldr	r1, [r7, #0]
 8021648:	6878      	ldr	r0, [r7, #4]
 802164a:	f000 fc4b 	bl	8021ee4 <USBD_GetConfig>
          break;
 802164e:	e013      	b.n	8021678 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8021650:	6839      	ldr	r1, [r7, #0]
 8021652:	6878      	ldr	r0, [r7, #4]
 8021654:	f000 fc7c 	bl	8021f50 <USBD_GetStatus>
          break;
 8021658:	e00e      	b.n	8021678 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 802165a:	6839      	ldr	r1, [r7, #0]
 802165c:	6878      	ldr	r0, [r7, #4]
 802165e:	f000 fcab 	bl	8021fb8 <USBD_SetFeature>
          break;
 8021662:	e009      	b.n	8021678 <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8021664:	6839      	ldr	r1, [r7, #0]
 8021666:	6878      	ldr	r0, [r7, #4]
 8021668:	f000 fcba 	bl	8021fe0 <USBD_ClrFeature>
          break;
 802166c:	e004      	b.n	8021678 <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 802166e:	6839      	ldr	r1, [r7, #0]
 8021670:	6878      	ldr	r0, [r7, #4]
 8021672:	f000 fd11 	bl	8022098 <USBD_CtlError>
          break;
 8021676:	bf00      	nop
      }
      break;
 8021678:	e004      	b.n	8021684 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 802167a:	6839      	ldr	r1, [r7, #0]
 802167c:	6878      	ldr	r0, [r7, #4]
 802167e:	f000 fd0b 	bl	8022098 <USBD_CtlError>
      break;
 8021682:	bf00      	nop
  }

  return ret;
 8021684:	7bfb      	ldrb	r3, [r7, #15]
}
 8021686:	4618      	mov	r0, r3
 8021688:	3710      	adds	r7, #16
 802168a:	46bd      	mov	sp, r7
 802168c:	bd80      	pop	{r7, pc}
 802168e:	bf00      	nop

08021690 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8021690:	b580      	push	{r7, lr}
 8021692:	b084      	sub	sp, #16
 8021694:	af00      	add	r7, sp, #0
 8021696:	6078      	str	r0, [r7, #4]
 8021698:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 802169a:	2300      	movs	r3, #0
 802169c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 802169e:	683b      	ldr	r3, [r7, #0]
 80216a0:	781b      	ldrb	r3, [r3, #0]
 80216a2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80216a6:	2b40      	cmp	r3, #64	; 0x40
 80216a8:	d005      	beq.n	80216b6 <USBD_StdItfReq+0x26>
 80216aa:	2b40      	cmp	r3, #64	; 0x40
 80216ac:	d82f      	bhi.n	802170e <USBD_StdItfReq+0x7e>
 80216ae:	2b00      	cmp	r3, #0
 80216b0:	d001      	beq.n	80216b6 <USBD_StdItfReq+0x26>
 80216b2:	2b20      	cmp	r3, #32
 80216b4:	d12b      	bne.n	802170e <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 80216b6:	687b      	ldr	r3, [r7, #4]
 80216b8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80216bc:	b2db      	uxtb	r3, r3
 80216be:	3b01      	subs	r3, #1
 80216c0:	2b02      	cmp	r3, #2
 80216c2:	d81d      	bhi.n	8021700 <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80216c4:	683b      	ldr	r3, [r7, #0]
 80216c6:	889b      	ldrh	r3, [r3, #4]
 80216c8:	b2db      	uxtb	r3, r3
 80216ca:	2b01      	cmp	r3, #1
 80216cc:	d813      	bhi.n	80216f6 <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80216ce:	687b      	ldr	r3, [r7, #4]
 80216d0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80216d4:	689b      	ldr	r3, [r3, #8]
 80216d6:	6839      	ldr	r1, [r7, #0]
 80216d8:	6878      	ldr	r0, [r7, #4]
 80216da:	4798      	blx	r3
 80216dc:	4603      	mov	r3, r0
 80216de:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 80216e0:	683b      	ldr	r3, [r7, #0]
 80216e2:	88db      	ldrh	r3, [r3, #6]
 80216e4:	2b00      	cmp	r3, #0
 80216e6:	d110      	bne.n	802170a <USBD_StdItfReq+0x7a>
 80216e8:	7bfb      	ldrb	r3, [r7, #15]
 80216ea:	2b00      	cmp	r3, #0
 80216ec:	d10d      	bne.n	802170a <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 80216ee:	6878      	ldr	r0, [r7, #4]
 80216f0:	f000 fd80 	bl	80221f4 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 80216f4:	e009      	b.n	802170a <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 80216f6:	6839      	ldr	r1, [r7, #0]
 80216f8:	6878      	ldr	r0, [r7, #4]
 80216fa:	f000 fccd 	bl	8022098 <USBD_CtlError>
          break;
 80216fe:	e004      	b.n	802170a <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 8021700:	6839      	ldr	r1, [r7, #0]
 8021702:	6878      	ldr	r0, [r7, #4]
 8021704:	f000 fcc8 	bl	8022098 <USBD_CtlError>
          break;
 8021708:	e000      	b.n	802170c <USBD_StdItfReq+0x7c>
          break;
 802170a:	bf00      	nop
      }
      break;
 802170c:	e004      	b.n	8021718 <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 802170e:	6839      	ldr	r1, [r7, #0]
 8021710:	6878      	ldr	r0, [r7, #4]
 8021712:	f000 fcc1 	bl	8022098 <USBD_CtlError>
      break;
 8021716:	bf00      	nop
  }

  return ret;
 8021718:	7bfb      	ldrb	r3, [r7, #15]
}
 802171a:	4618      	mov	r0, r3
 802171c:	3710      	adds	r7, #16
 802171e:	46bd      	mov	sp, r7
 8021720:	bd80      	pop	{r7, pc}

08021722 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8021722:	b580      	push	{r7, lr}
 8021724:	b084      	sub	sp, #16
 8021726:	af00      	add	r7, sp, #0
 8021728:	6078      	str	r0, [r7, #4]
 802172a:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 802172c:	2300      	movs	r3, #0
 802172e:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 8021730:	683b      	ldr	r3, [r7, #0]
 8021732:	889b      	ldrh	r3, [r3, #4]
 8021734:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8021736:	683b      	ldr	r3, [r7, #0]
 8021738:	781b      	ldrb	r3, [r3, #0]
 802173a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 802173e:	2b40      	cmp	r3, #64	; 0x40
 8021740:	d007      	beq.n	8021752 <USBD_StdEPReq+0x30>
 8021742:	2b40      	cmp	r3, #64	; 0x40
 8021744:	f200 8145 	bhi.w	80219d2 <USBD_StdEPReq+0x2b0>
 8021748:	2b00      	cmp	r3, #0
 802174a:	d00c      	beq.n	8021766 <USBD_StdEPReq+0x44>
 802174c:	2b20      	cmp	r3, #32
 802174e:	f040 8140 	bne.w	80219d2 <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8021752:	687b      	ldr	r3, [r7, #4]
 8021754:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8021758:	689b      	ldr	r3, [r3, #8]
 802175a:	6839      	ldr	r1, [r7, #0]
 802175c:	6878      	ldr	r0, [r7, #4]
 802175e:	4798      	blx	r3
 8021760:	4603      	mov	r3, r0
 8021762:	73fb      	strb	r3, [r7, #15]
      break;
 8021764:	e13a      	b.n	80219dc <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8021766:	683b      	ldr	r3, [r7, #0]
 8021768:	785b      	ldrb	r3, [r3, #1]
 802176a:	2b03      	cmp	r3, #3
 802176c:	d007      	beq.n	802177e <USBD_StdEPReq+0x5c>
 802176e:	2b03      	cmp	r3, #3
 8021770:	f300 8129 	bgt.w	80219c6 <USBD_StdEPReq+0x2a4>
 8021774:	2b00      	cmp	r3, #0
 8021776:	d07f      	beq.n	8021878 <USBD_StdEPReq+0x156>
 8021778:	2b01      	cmp	r3, #1
 802177a:	d03c      	beq.n	80217f6 <USBD_StdEPReq+0xd4>
 802177c:	e123      	b.n	80219c6 <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 802177e:	687b      	ldr	r3, [r7, #4]
 8021780:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8021784:	b2db      	uxtb	r3, r3
 8021786:	2b02      	cmp	r3, #2
 8021788:	d002      	beq.n	8021790 <USBD_StdEPReq+0x6e>
 802178a:	2b03      	cmp	r3, #3
 802178c:	d016      	beq.n	80217bc <USBD_StdEPReq+0x9a>
 802178e:	e02c      	b.n	80217ea <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8021790:	7bbb      	ldrb	r3, [r7, #14]
 8021792:	2b00      	cmp	r3, #0
 8021794:	d00d      	beq.n	80217b2 <USBD_StdEPReq+0x90>
 8021796:	7bbb      	ldrb	r3, [r7, #14]
 8021798:	2b80      	cmp	r3, #128	; 0x80
 802179a:	d00a      	beq.n	80217b2 <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 802179c:	7bbb      	ldrb	r3, [r7, #14]
 802179e:	4619      	mov	r1, r3
 80217a0:	6878      	ldr	r0, [r7, #4]
 80217a2:	f004 f82a 	bl	80257fa <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80217a6:	2180      	movs	r1, #128	; 0x80
 80217a8:	6878      	ldr	r0, [r7, #4]
 80217aa:	f004 f826 	bl	80257fa <USBD_LL_StallEP>
 80217ae:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80217b0:	e020      	b.n	80217f4 <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 80217b2:	6839      	ldr	r1, [r7, #0]
 80217b4:	6878      	ldr	r0, [r7, #4]
 80217b6:	f000 fc6f 	bl	8022098 <USBD_CtlError>
              break;
 80217ba:	e01b      	b.n	80217f4 <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80217bc:	683b      	ldr	r3, [r7, #0]
 80217be:	885b      	ldrh	r3, [r3, #2]
 80217c0:	2b00      	cmp	r3, #0
 80217c2:	d10e      	bne.n	80217e2 <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80217c4:	7bbb      	ldrb	r3, [r7, #14]
 80217c6:	2b00      	cmp	r3, #0
 80217c8:	d00b      	beq.n	80217e2 <USBD_StdEPReq+0xc0>
 80217ca:	7bbb      	ldrb	r3, [r7, #14]
 80217cc:	2b80      	cmp	r3, #128	; 0x80
 80217ce:	d008      	beq.n	80217e2 <USBD_StdEPReq+0xc0>
 80217d0:	683b      	ldr	r3, [r7, #0]
 80217d2:	88db      	ldrh	r3, [r3, #6]
 80217d4:	2b00      	cmp	r3, #0
 80217d6:	d104      	bne.n	80217e2 <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 80217d8:	7bbb      	ldrb	r3, [r7, #14]
 80217da:	4619      	mov	r1, r3
 80217dc:	6878      	ldr	r0, [r7, #4]
 80217de:	f004 f80c 	bl	80257fa <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 80217e2:	6878      	ldr	r0, [r7, #4]
 80217e4:	f000 fd06 	bl	80221f4 <USBD_CtlSendStatus>

              break;
 80217e8:	e004      	b.n	80217f4 <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 80217ea:	6839      	ldr	r1, [r7, #0]
 80217ec:	6878      	ldr	r0, [r7, #4]
 80217ee:	f000 fc53 	bl	8022098 <USBD_CtlError>
              break;
 80217f2:	bf00      	nop
          }
          break;
 80217f4:	e0ec      	b.n	80219d0 <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 80217f6:	687b      	ldr	r3, [r7, #4]
 80217f8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80217fc:	b2db      	uxtb	r3, r3
 80217fe:	2b02      	cmp	r3, #2
 8021800:	d002      	beq.n	8021808 <USBD_StdEPReq+0xe6>
 8021802:	2b03      	cmp	r3, #3
 8021804:	d016      	beq.n	8021834 <USBD_StdEPReq+0x112>
 8021806:	e030      	b.n	802186a <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8021808:	7bbb      	ldrb	r3, [r7, #14]
 802180a:	2b00      	cmp	r3, #0
 802180c:	d00d      	beq.n	802182a <USBD_StdEPReq+0x108>
 802180e:	7bbb      	ldrb	r3, [r7, #14]
 8021810:	2b80      	cmp	r3, #128	; 0x80
 8021812:	d00a      	beq.n	802182a <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8021814:	7bbb      	ldrb	r3, [r7, #14]
 8021816:	4619      	mov	r1, r3
 8021818:	6878      	ldr	r0, [r7, #4]
 802181a:	f003 ffee 	bl	80257fa <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 802181e:	2180      	movs	r1, #128	; 0x80
 8021820:	6878      	ldr	r0, [r7, #4]
 8021822:	f003 ffea 	bl	80257fa <USBD_LL_StallEP>
 8021826:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8021828:	e025      	b.n	8021876 <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 802182a:	6839      	ldr	r1, [r7, #0]
 802182c:	6878      	ldr	r0, [r7, #4]
 802182e:	f000 fc33 	bl	8022098 <USBD_CtlError>
              break;
 8021832:	e020      	b.n	8021876 <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8021834:	683b      	ldr	r3, [r7, #0]
 8021836:	885b      	ldrh	r3, [r3, #2]
 8021838:	2b00      	cmp	r3, #0
 802183a:	d11b      	bne.n	8021874 <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 802183c:	7bbb      	ldrb	r3, [r7, #14]
 802183e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8021842:	2b00      	cmp	r3, #0
 8021844:	d004      	beq.n	8021850 <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8021846:	7bbb      	ldrb	r3, [r7, #14]
 8021848:	4619      	mov	r1, r3
 802184a:	6878      	ldr	r0, [r7, #4]
 802184c:	f003 fff4 	bl	8025838 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8021850:	6878      	ldr	r0, [r7, #4]
 8021852:	f000 fccf 	bl	80221f4 <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8021856:	687b      	ldr	r3, [r7, #4]
 8021858:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 802185c:	689b      	ldr	r3, [r3, #8]
 802185e:	6839      	ldr	r1, [r7, #0]
 8021860:	6878      	ldr	r0, [r7, #4]
 8021862:	4798      	blx	r3
 8021864:	4603      	mov	r3, r0
 8021866:	73fb      	strb	r3, [r7, #15]
              }
              break;
 8021868:	e004      	b.n	8021874 <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 802186a:	6839      	ldr	r1, [r7, #0]
 802186c:	6878      	ldr	r0, [r7, #4]
 802186e:	f000 fc13 	bl	8022098 <USBD_CtlError>
              break;
 8021872:	e000      	b.n	8021876 <USBD_StdEPReq+0x154>
              break;
 8021874:	bf00      	nop
          }
          break;
 8021876:	e0ab      	b.n	80219d0 <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8021878:	687b      	ldr	r3, [r7, #4]
 802187a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 802187e:	b2db      	uxtb	r3, r3
 8021880:	2b02      	cmp	r3, #2
 8021882:	d002      	beq.n	802188a <USBD_StdEPReq+0x168>
 8021884:	2b03      	cmp	r3, #3
 8021886:	d032      	beq.n	80218ee <USBD_StdEPReq+0x1cc>
 8021888:	e097      	b.n	80219ba <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 802188a:	7bbb      	ldrb	r3, [r7, #14]
 802188c:	2b00      	cmp	r3, #0
 802188e:	d007      	beq.n	80218a0 <USBD_StdEPReq+0x17e>
 8021890:	7bbb      	ldrb	r3, [r7, #14]
 8021892:	2b80      	cmp	r3, #128	; 0x80
 8021894:	d004      	beq.n	80218a0 <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 8021896:	6839      	ldr	r1, [r7, #0]
 8021898:	6878      	ldr	r0, [r7, #4]
 802189a:	f000 fbfd 	bl	8022098 <USBD_CtlError>
                break;
 802189e:	e091      	b.n	80219c4 <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80218a0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80218a4:	2b00      	cmp	r3, #0
 80218a6:	da0b      	bge.n	80218c0 <USBD_StdEPReq+0x19e>
 80218a8:	7bbb      	ldrb	r3, [r7, #14]
 80218aa:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80218ae:	4613      	mov	r3, r2
 80218b0:	009b      	lsls	r3, r3, #2
 80218b2:	4413      	add	r3, r2
 80218b4:	009b      	lsls	r3, r3, #2
 80218b6:	3310      	adds	r3, #16
 80218b8:	687a      	ldr	r2, [r7, #4]
 80218ba:	4413      	add	r3, r2
 80218bc:	3304      	adds	r3, #4
 80218be:	e00b      	b.n	80218d8 <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80218c0:	7bbb      	ldrb	r3, [r7, #14]
 80218c2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80218c6:	4613      	mov	r3, r2
 80218c8:	009b      	lsls	r3, r3, #2
 80218ca:	4413      	add	r3, r2
 80218cc:	009b      	lsls	r3, r3, #2
 80218ce:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80218d2:	687a      	ldr	r2, [r7, #4]
 80218d4:	4413      	add	r3, r2
 80218d6:	3304      	adds	r3, #4
 80218d8:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 80218da:	68bb      	ldr	r3, [r7, #8]
 80218dc:	2200      	movs	r2, #0
 80218de:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80218e0:	68bb      	ldr	r3, [r7, #8]
 80218e2:	2202      	movs	r2, #2
 80218e4:	4619      	mov	r1, r3
 80218e6:	6878      	ldr	r0, [r7, #4]
 80218e8:	f000 fc47 	bl	802217a <USBD_CtlSendData>
              break;
 80218ec:	e06a      	b.n	80219c4 <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 80218ee:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80218f2:	2b00      	cmp	r3, #0
 80218f4:	da11      	bge.n	802191a <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80218f6:	7bbb      	ldrb	r3, [r7, #14]
 80218f8:	f003 020f 	and.w	r2, r3, #15
 80218fc:	6879      	ldr	r1, [r7, #4]
 80218fe:	4613      	mov	r3, r2
 8021900:	009b      	lsls	r3, r3, #2
 8021902:	4413      	add	r3, r2
 8021904:	009b      	lsls	r3, r3, #2
 8021906:	440b      	add	r3, r1
 8021908:	3324      	adds	r3, #36	; 0x24
 802190a:	881b      	ldrh	r3, [r3, #0]
 802190c:	2b00      	cmp	r3, #0
 802190e:	d117      	bne.n	8021940 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8021910:	6839      	ldr	r1, [r7, #0]
 8021912:	6878      	ldr	r0, [r7, #4]
 8021914:	f000 fbc0 	bl	8022098 <USBD_CtlError>
                  break;
 8021918:	e054      	b.n	80219c4 <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 802191a:	7bbb      	ldrb	r3, [r7, #14]
 802191c:	f003 020f 	and.w	r2, r3, #15
 8021920:	6879      	ldr	r1, [r7, #4]
 8021922:	4613      	mov	r3, r2
 8021924:	009b      	lsls	r3, r3, #2
 8021926:	4413      	add	r3, r2
 8021928:	009b      	lsls	r3, r3, #2
 802192a:	440b      	add	r3, r1
 802192c:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8021930:	881b      	ldrh	r3, [r3, #0]
 8021932:	2b00      	cmp	r3, #0
 8021934:	d104      	bne.n	8021940 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8021936:	6839      	ldr	r1, [r7, #0]
 8021938:	6878      	ldr	r0, [r7, #4]
 802193a:	f000 fbad 	bl	8022098 <USBD_CtlError>
                  break;
 802193e:	e041      	b.n	80219c4 <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8021940:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8021944:	2b00      	cmp	r3, #0
 8021946:	da0b      	bge.n	8021960 <USBD_StdEPReq+0x23e>
 8021948:	7bbb      	ldrb	r3, [r7, #14]
 802194a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 802194e:	4613      	mov	r3, r2
 8021950:	009b      	lsls	r3, r3, #2
 8021952:	4413      	add	r3, r2
 8021954:	009b      	lsls	r3, r3, #2
 8021956:	3310      	adds	r3, #16
 8021958:	687a      	ldr	r2, [r7, #4]
 802195a:	4413      	add	r3, r2
 802195c:	3304      	adds	r3, #4
 802195e:	e00b      	b.n	8021978 <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8021960:	7bbb      	ldrb	r3, [r7, #14]
 8021962:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8021966:	4613      	mov	r3, r2
 8021968:	009b      	lsls	r3, r3, #2
 802196a:	4413      	add	r3, r2
 802196c:	009b      	lsls	r3, r3, #2
 802196e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8021972:	687a      	ldr	r2, [r7, #4]
 8021974:	4413      	add	r3, r2
 8021976:	3304      	adds	r3, #4
 8021978:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 802197a:	7bbb      	ldrb	r3, [r7, #14]
 802197c:	2b00      	cmp	r3, #0
 802197e:	d002      	beq.n	8021986 <USBD_StdEPReq+0x264>
 8021980:	7bbb      	ldrb	r3, [r7, #14]
 8021982:	2b80      	cmp	r3, #128	; 0x80
 8021984:	d103      	bne.n	802198e <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 8021986:	68bb      	ldr	r3, [r7, #8]
 8021988:	2200      	movs	r2, #0
 802198a:	601a      	str	r2, [r3, #0]
 802198c:	e00e      	b.n	80219ac <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 802198e:	7bbb      	ldrb	r3, [r7, #14]
 8021990:	4619      	mov	r1, r3
 8021992:	6878      	ldr	r0, [r7, #4]
 8021994:	f003 ff6f 	bl	8025876 <USBD_LL_IsStallEP>
 8021998:	4603      	mov	r3, r0
 802199a:	2b00      	cmp	r3, #0
 802199c:	d003      	beq.n	80219a6 <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 802199e:	68bb      	ldr	r3, [r7, #8]
 80219a0:	2201      	movs	r2, #1
 80219a2:	601a      	str	r2, [r3, #0]
 80219a4:	e002      	b.n	80219ac <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 80219a6:	68bb      	ldr	r3, [r7, #8]
 80219a8:	2200      	movs	r2, #0
 80219aa:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80219ac:	68bb      	ldr	r3, [r7, #8]
 80219ae:	2202      	movs	r2, #2
 80219b0:	4619      	mov	r1, r3
 80219b2:	6878      	ldr	r0, [r7, #4]
 80219b4:	f000 fbe1 	bl	802217a <USBD_CtlSendData>
              break;
 80219b8:	e004      	b.n	80219c4 <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 80219ba:	6839      	ldr	r1, [r7, #0]
 80219bc:	6878      	ldr	r0, [r7, #4]
 80219be:	f000 fb6b 	bl	8022098 <USBD_CtlError>
              break;
 80219c2:	bf00      	nop
          }
          break;
 80219c4:	e004      	b.n	80219d0 <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 80219c6:	6839      	ldr	r1, [r7, #0]
 80219c8:	6878      	ldr	r0, [r7, #4]
 80219ca:	f000 fb65 	bl	8022098 <USBD_CtlError>
          break;
 80219ce:	bf00      	nop
      }
      break;
 80219d0:	e004      	b.n	80219dc <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 80219d2:	6839      	ldr	r1, [r7, #0]
 80219d4:	6878      	ldr	r0, [r7, #4]
 80219d6:	f000 fb5f 	bl	8022098 <USBD_CtlError>
      break;
 80219da:	bf00      	nop
  }

  return ret;
 80219dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80219de:	4618      	mov	r0, r3
 80219e0:	3710      	adds	r7, #16
 80219e2:	46bd      	mov	sp, r7
 80219e4:	bd80      	pop	{r7, pc}
	...

080219e8 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80219e8:	b580      	push	{r7, lr}
 80219ea:	b084      	sub	sp, #16
 80219ec:	af00      	add	r7, sp, #0
 80219ee:	6078      	str	r0, [r7, #4]
 80219f0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80219f2:	2300      	movs	r3, #0
 80219f4:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 80219f6:	2300      	movs	r3, #0
 80219f8:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80219fa:	2300      	movs	r3, #0
 80219fc:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 80219fe:	683b      	ldr	r3, [r7, #0]
 8021a00:	885b      	ldrh	r3, [r3, #2]
 8021a02:	0a1b      	lsrs	r3, r3, #8
 8021a04:	b29b      	uxth	r3, r3
 8021a06:	3b01      	subs	r3, #1
 8021a08:	2b0e      	cmp	r3, #14
 8021a0a:	f200 8152 	bhi.w	8021cb2 <USBD_GetDescriptor+0x2ca>
 8021a0e:	a201      	add	r2, pc, #4	; (adr r2, 8021a14 <USBD_GetDescriptor+0x2c>)
 8021a10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8021a14:	08021a85 	.word	0x08021a85
 8021a18:	08021a9d 	.word	0x08021a9d
 8021a1c:	08021add 	.word	0x08021add
 8021a20:	08021cb3 	.word	0x08021cb3
 8021a24:	08021cb3 	.word	0x08021cb3
 8021a28:	08021c53 	.word	0x08021c53
 8021a2c:	08021c7f 	.word	0x08021c7f
 8021a30:	08021cb3 	.word	0x08021cb3
 8021a34:	08021cb3 	.word	0x08021cb3
 8021a38:	08021cb3 	.word	0x08021cb3
 8021a3c:	08021cb3 	.word	0x08021cb3
 8021a40:	08021cb3 	.word	0x08021cb3
 8021a44:	08021cb3 	.word	0x08021cb3
 8021a48:	08021cb3 	.word	0x08021cb3
 8021a4c:	08021a51 	.word	0x08021a51
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 8021a50:	687b      	ldr	r3, [r7, #4]
 8021a52:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8021a56:	69db      	ldr	r3, [r3, #28]
 8021a58:	2b00      	cmp	r3, #0
 8021a5a:	d00b      	beq.n	8021a74 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 8021a5c:	687b      	ldr	r3, [r7, #4]
 8021a5e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8021a62:	69db      	ldr	r3, [r3, #28]
 8021a64:	687a      	ldr	r2, [r7, #4]
 8021a66:	7c12      	ldrb	r2, [r2, #16]
 8021a68:	f107 0108 	add.w	r1, r7, #8
 8021a6c:	4610      	mov	r0, r2
 8021a6e:	4798      	blx	r3
 8021a70:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8021a72:	e126      	b.n	8021cc2 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8021a74:	6839      	ldr	r1, [r7, #0]
 8021a76:	6878      	ldr	r0, [r7, #4]
 8021a78:	f000 fb0e 	bl	8022098 <USBD_CtlError>
        err++;
 8021a7c:	7afb      	ldrb	r3, [r7, #11]
 8021a7e:	3301      	adds	r3, #1
 8021a80:	72fb      	strb	r3, [r7, #11]
      break;
 8021a82:	e11e      	b.n	8021cc2 <USBD_GetDescriptor+0x2da>
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8021a84:	687b      	ldr	r3, [r7, #4]
 8021a86:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8021a8a:	681b      	ldr	r3, [r3, #0]
 8021a8c:	687a      	ldr	r2, [r7, #4]
 8021a8e:	7c12      	ldrb	r2, [r2, #16]
 8021a90:	f107 0108 	add.w	r1, r7, #8
 8021a94:	4610      	mov	r0, r2
 8021a96:	4798      	blx	r3
 8021a98:	60f8      	str	r0, [r7, #12]
      break;
 8021a9a:	e112      	b.n	8021cc2 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8021a9c:	687b      	ldr	r3, [r7, #4]
 8021a9e:	7c1b      	ldrb	r3, [r3, #16]
 8021aa0:	2b00      	cmp	r3, #0
 8021aa2:	d10d      	bne.n	8021ac0 <USBD_GetDescriptor+0xd8>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8021aa4:	687b      	ldr	r3, [r7, #4]
 8021aa6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8021aaa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8021aac:	f107 0208 	add.w	r2, r7, #8
 8021ab0:	4610      	mov	r0, r2
 8021ab2:	4798      	blx	r3
 8021ab4:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8021ab6:	68fb      	ldr	r3, [r7, #12]
 8021ab8:	3301      	adds	r3, #1
 8021aba:	2202      	movs	r2, #2
 8021abc:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8021abe:	e100      	b.n	8021cc2 <USBD_GetDescriptor+0x2da>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8021ac0:	687b      	ldr	r3, [r7, #4]
 8021ac2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8021ac6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8021ac8:	f107 0208 	add.w	r2, r7, #8
 8021acc:	4610      	mov	r0, r2
 8021ace:	4798      	blx	r3
 8021ad0:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8021ad2:	68fb      	ldr	r3, [r7, #12]
 8021ad4:	3301      	adds	r3, #1
 8021ad6:	2202      	movs	r2, #2
 8021ad8:	701a      	strb	r2, [r3, #0]
      break;
 8021ada:	e0f2      	b.n	8021cc2 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8021adc:	683b      	ldr	r3, [r7, #0]
 8021ade:	885b      	ldrh	r3, [r3, #2]
 8021ae0:	b2db      	uxtb	r3, r3
 8021ae2:	2b05      	cmp	r3, #5
 8021ae4:	f200 80ac 	bhi.w	8021c40 <USBD_GetDescriptor+0x258>
 8021ae8:	a201      	add	r2, pc, #4	; (adr r2, 8021af0 <USBD_GetDescriptor+0x108>)
 8021aea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8021aee:	bf00      	nop
 8021af0:	08021b09 	.word	0x08021b09
 8021af4:	08021b3d 	.word	0x08021b3d
 8021af8:	08021b71 	.word	0x08021b71
 8021afc:	08021ba5 	.word	0x08021ba5
 8021b00:	08021bd9 	.word	0x08021bd9
 8021b04:	08021c0d 	.word	0x08021c0d
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8021b08:	687b      	ldr	r3, [r7, #4]
 8021b0a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8021b0e:	685b      	ldr	r3, [r3, #4]
 8021b10:	2b00      	cmp	r3, #0
 8021b12:	d00b      	beq.n	8021b2c <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8021b14:	687b      	ldr	r3, [r7, #4]
 8021b16:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8021b1a:	685b      	ldr	r3, [r3, #4]
 8021b1c:	687a      	ldr	r2, [r7, #4]
 8021b1e:	7c12      	ldrb	r2, [r2, #16]
 8021b20:	f107 0108 	add.w	r1, r7, #8
 8021b24:	4610      	mov	r0, r2
 8021b26:	4798      	blx	r3
 8021b28:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8021b2a:	e091      	b.n	8021c50 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8021b2c:	6839      	ldr	r1, [r7, #0]
 8021b2e:	6878      	ldr	r0, [r7, #4]
 8021b30:	f000 fab2 	bl	8022098 <USBD_CtlError>
            err++;
 8021b34:	7afb      	ldrb	r3, [r7, #11]
 8021b36:	3301      	adds	r3, #1
 8021b38:	72fb      	strb	r3, [r7, #11]
          break;
 8021b3a:	e089      	b.n	8021c50 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8021b3c:	687b      	ldr	r3, [r7, #4]
 8021b3e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8021b42:	689b      	ldr	r3, [r3, #8]
 8021b44:	2b00      	cmp	r3, #0
 8021b46:	d00b      	beq.n	8021b60 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8021b48:	687b      	ldr	r3, [r7, #4]
 8021b4a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8021b4e:	689b      	ldr	r3, [r3, #8]
 8021b50:	687a      	ldr	r2, [r7, #4]
 8021b52:	7c12      	ldrb	r2, [r2, #16]
 8021b54:	f107 0108 	add.w	r1, r7, #8
 8021b58:	4610      	mov	r0, r2
 8021b5a:	4798      	blx	r3
 8021b5c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8021b5e:	e077      	b.n	8021c50 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8021b60:	6839      	ldr	r1, [r7, #0]
 8021b62:	6878      	ldr	r0, [r7, #4]
 8021b64:	f000 fa98 	bl	8022098 <USBD_CtlError>
            err++;
 8021b68:	7afb      	ldrb	r3, [r7, #11]
 8021b6a:	3301      	adds	r3, #1
 8021b6c:	72fb      	strb	r3, [r7, #11]
          break;
 8021b6e:	e06f      	b.n	8021c50 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8021b70:	687b      	ldr	r3, [r7, #4]
 8021b72:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8021b76:	68db      	ldr	r3, [r3, #12]
 8021b78:	2b00      	cmp	r3, #0
 8021b7a:	d00b      	beq.n	8021b94 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8021b7c:	687b      	ldr	r3, [r7, #4]
 8021b7e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8021b82:	68db      	ldr	r3, [r3, #12]
 8021b84:	687a      	ldr	r2, [r7, #4]
 8021b86:	7c12      	ldrb	r2, [r2, #16]
 8021b88:	f107 0108 	add.w	r1, r7, #8
 8021b8c:	4610      	mov	r0, r2
 8021b8e:	4798      	blx	r3
 8021b90:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8021b92:	e05d      	b.n	8021c50 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8021b94:	6839      	ldr	r1, [r7, #0]
 8021b96:	6878      	ldr	r0, [r7, #4]
 8021b98:	f000 fa7e 	bl	8022098 <USBD_CtlError>
            err++;
 8021b9c:	7afb      	ldrb	r3, [r7, #11]
 8021b9e:	3301      	adds	r3, #1
 8021ba0:	72fb      	strb	r3, [r7, #11]
          break;
 8021ba2:	e055      	b.n	8021c50 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8021ba4:	687b      	ldr	r3, [r7, #4]
 8021ba6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8021baa:	691b      	ldr	r3, [r3, #16]
 8021bac:	2b00      	cmp	r3, #0
 8021bae:	d00b      	beq.n	8021bc8 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8021bb0:	687b      	ldr	r3, [r7, #4]
 8021bb2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8021bb6:	691b      	ldr	r3, [r3, #16]
 8021bb8:	687a      	ldr	r2, [r7, #4]
 8021bba:	7c12      	ldrb	r2, [r2, #16]
 8021bbc:	f107 0108 	add.w	r1, r7, #8
 8021bc0:	4610      	mov	r0, r2
 8021bc2:	4798      	blx	r3
 8021bc4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8021bc6:	e043      	b.n	8021c50 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8021bc8:	6839      	ldr	r1, [r7, #0]
 8021bca:	6878      	ldr	r0, [r7, #4]
 8021bcc:	f000 fa64 	bl	8022098 <USBD_CtlError>
            err++;
 8021bd0:	7afb      	ldrb	r3, [r7, #11]
 8021bd2:	3301      	adds	r3, #1
 8021bd4:	72fb      	strb	r3, [r7, #11]
          break;
 8021bd6:	e03b      	b.n	8021c50 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8021bd8:	687b      	ldr	r3, [r7, #4]
 8021bda:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8021bde:	695b      	ldr	r3, [r3, #20]
 8021be0:	2b00      	cmp	r3, #0
 8021be2:	d00b      	beq.n	8021bfc <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8021be4:	687b      	ldr	r3, [r7, #4]
 8021be6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8021bea:	695b      	ldr	r3, [r3, #20]
 8021bec:	687a      	ldr	r2, [r7, #4]
 8021bee:	7c12      	ldrb	r2, [r2, #16]
 8021bf0:	f107 0108 	add.w	r1, r7, #8
 8021bf4:	4610      	mov	r0, r2
 8021bf6:	4798      	blx	r3
 8021bf8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8021bfa:	e029      	b.n	8021c50 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8021bfc:	6839      	ldr	r1, [r7, #0]
 8021bfe:	6878      	ldr	r0, [r7, #4]
 8021c00:	f000 fa4a 	bl	8022098 <USBD_CtlError>
            err++;
 8021c04:	7afb      	ldrb	r3, [r7, #11]
 8021c06:	3301      	adds	r3, #1
 8021c08:	72fb      	strb	r3, [r7, #11]
          break;
 8021c0a:	e021      	b.n	8021c50 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8021c0c:	687b      	ldr	r3, [r7, #4]
 8021c0e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8021c12:	699b      	ldr	r3, [r3, #24]
 8021c14:	2b00      	cmp	r3, #0
 8021c16:	d00b      	beq.n	8021c30 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8021c18:	687b      	ldr	r3, [r7, #4]
 8021c1a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8021c1e:	699b      	ldr	r3, [r3, #24]
 8021c20:	687a      	ldr	r2, [r7, #4]
 8021c22:	7c12      	ldrb	r2, [r2, #16]
 8021c24:	f107 0108 	add.w	r1, r7, #8
 8021c28:	4610      	mov	r0, r2
 8021c2a:	4798      	blx	r3
 8021c2c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8021c2e:	e00f      	b.n	8021c50 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8021c30:	6839      	ldr	r1, [r7, #0]
 8021c32:	6878      	ldr	r0, [r7, #4]
 8021c34:	f000 fa30 	bl	8022098 <USBD_CtlError>
            err++;
 8021c38:	7afb      	ldrb	r3, [r7, #11]
 8021c3a:	3301      	adds	r3, #1
 8021c3c:	72fb      	strb	r3, [r7, #11]
          break;
 8021c3e:	e007      	b.n	8021c50 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8021c40:	6839      	ldr	r1, [r7, #0]
 8021c42:	6878      	ldr	r0, [r7, #4]
 8021c44:	f000 fa28 	bl	8022098 <USBD_CtlError>
          err++;
 8021c48:	7afb      	ldrb	r3, [r7, #11]
 8021c4a:	3301      	adds	r3, #1
 8021c4c:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 8021c4e:	bf00      	nop
      }
      break;
 8021c50:	e037      	b.n	8021cc2 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8021c52:	687b      	ldr	r3, [r7, #4]
 8021c54:	7c1b      	ldrb	r3, [r3, #16]
 8021c56:	2b00      	cmp	r3, #0
 8021c58:	d109      	bne.n	8021c6e <USBD_GetDescriptor+0x286>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8021c5a:	687b      	ldr	r3, [r7, #4]
 8021c5c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8021c60:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8021c62:	f107 0208 	add.w	r2, r7, #8
 8021c66:	4610      	mov	r0, r2
 8021c68:	4798      	blx	r3
 8021c6a:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8021c6c:	e029      	b.n	8021cc2 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8021c6e:	6839      	ldr	r1, [r7, #0]
 8021c70:	6878      	ldr	r0, [r7, #4]
 8021c72:	f000 fa11 	bl	8022098 <USBD_CtlError>
        err++;
 8021c76:	7afb      	ldrb	r3, [r7, #11]
 8021c78:	3301      	adds	r3, #1
 8021c7a:	72fb      	strb	r3, [r7, #11]
      break;
 8021c7c:	e021      	b.n	8021cc2 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8021c7e:	687b      	ldr	r3, [r7, #4]
 8021c80:	7c1b      	ldrb	r3, [r3, #16]
 8021c82:	2b00      	cmp	r3, #0
 8021c84:	d10d      	bne.n	8021ca2 <USBD_GetDescriptor+0x2ba>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8021c86:	687b      	ldr	r3, [r7, #4]
 8021c88:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8021c8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8021c8e:	f107 0208 	add.w	r2, r7, #8
 8021c92:	4610      	mov	r0, r2
 8021c94:	4798      	blx	r3
 8021c96:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8021c98:	68fb      	ldr	r3, [r7, #12]
 8021c9a:	3301      	adds	r3, #1
 8021c9c:	2207      	movs	r2, #7
 8021c9e:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8021ca0:	e00f      	b.n	8021cc2 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8021ca2:	6839      	ldr	r1, [r7, #0]
 8021ca4:	6878      	ldr	r0, [r7, #4]
 8021ca6:	f000 f9f7 	bl	8022098 <USBD_CtlError>
        err++;
 8021caa:	7afb      	ldrb	r3, [r7, #11]
 8021cac:	3301      	adds	r3, #1
 8021cae:	72fb      	strb	r3, [r7, #11]
      break;
 8021cb0:	e007      	b.n	8021cc2 <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 8021cb2:	6839      	ldr	r1, [r7, #0]
 8021cb4:	6878      	ldr	r0, [r7, #4]
 8021cb6:	f000 f9ef 	bl	8022098 <USBD_CtlError>
      err++;
 8021cba:	7afb      	ldrb	r3, [r7, #11]
 8021cbc:	3301      	adds	r3, #1
 8021cbe:	72fb      	strb	r3, [r7, #11]
      break;
 8021cc0:	bf00      	nop
  }

  if (err != 0U)
 8021cc2:	7afb      	ldrb	r3, [r7, #11]
 8021cc4:	2b00      	cmp	r3, #0
 8021cc6:	d11e      	bne.n	8021d06 <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 8021cc8:	683b      	ldr	r3, [r7, #0]
 8021cca:	88db      	ldrh	r3, [r3, #6]
 8021ccc:	2b00      	cmp	r3, #0
 8021cce:	d016      	beq.n	8021cfe <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 8021cd0:	893b      	ldrh	r3, [r7, #8]
 8021cd2:	2b00      	cmp	r3, #0
 8021cd4:	d00e      	beq.n	8021cf4 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 8021cd6:	683b      	ldr	r3, [r7, #0]
 8021cd8:	88da      	ldrh	r2, [r3, #6]
 8021cda:	893b      	ldrh	r3, [r7, #8]
 8021cdc:	4293      	cmp	r3, r2
 8021cde:	bf28      	it	cs
 8021ce0:	4613      	movcs	r3, r2
 8021ce2:	b29b      	uxth	r3, r3
 8021ce4:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8021ce6:	893b      	ldrh	r3, [r7, #8]
 8021ce8:	461a      	mov	r2, r3
 8021cea:	68f9      	ldr	r1, [r7, #12]
 8021cec:	6878      	ldr	r0, [r7, #4]
 8021cee:	f000 fa44 	bl	802217a <USBD_CtlSendData>
 8021cf2:	e009      	b.n	8021d08 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8021cf4:	6839      	ldr	r1, [r7, #0]
 8021cf6:	6878      	ldr	r0, [r7, #4]
 8021cf8:	f000 f9ce 	bl	8022098 <USBD_CtlError>
 8021cfc:	e004      	b.n	8021d08 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8021cfe:	6878      	ldr	r0, [r7, #4]
 8021d00:	f000 fa78 	bl	80221f4 <USBD_CtlSendStatus>
 8021d04:	e000      	b.n	8021d08 <USBD_GetDescriptor+0x320>
    return;
 8021d06:	bf00      	nop
  }
}
 8021d08:	3710      	adds	r7, #16
 8021d0a:	46bd      	mov	sp, r7
 8021d0c:	bd80      	pop	{r7, pc}
 8021d0e:	bf00      	nop

08021d10 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8021d10:	b580      	push	{r7, lr}
 8021d12:	b084      	sub	sp, #16
 8021d14:	af00      	add	r7, sp, #0
 8021d16:	6078      	str	r0, [r7, #4]
 8021d18:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8021d1a:	683b      	ldr	r3, [r7, #0]
 8021d1c:	889b      	ldrh	r3, [r3, #4]
 8021d1e:	2b00      	cmp	r3, #0
 8021d20:	d131      	bne.n	8021d86 <USBD_SetAddress+0x76>
 8021d22:	683b      	ldr	r3, [r7, #0]
 8021d24:	88db      	ldrh	r3, [r3, #6]
 8021d26:	2b00      	cmp	r3, #0
 8021d28:	d12d      	bne.n	8021d86 <USBD_SetAddress+0x76>
 8021d2a:	683b      	ldr	r3, [r7, #0]
 8021d2c:	885b      	ldrh	r3, [r3, #2]
 8021d2e:	2b7f      	cmp	r3, #127	; 0x7f
 8021d30:	d829      	bhi.n	8021d86 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8021d32:	683b      	ldr	r3, [r7, #0]
 8021d34:	885b      	ldrh	r3, [r3, #2]
 8021d36:	b2db      	uxtb	r3, r3
 8021d38:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8021d3c:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8021d3e:	687b      	ldr	r3, [r7, #4]
 8021d40:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8021d44:	b2db      	uxtb	r3, r3
 8021d46:	2b03      	cmp	r3, #3
 8021d48:	d104      	bne.n	8021d54 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8021d4a:	6839      	ldr	r1, [r7, #0]
 8021d4c:	6878      	ldr	r0, [r7, #4]
 8021d4e:	f000 f9a3 	bl	8022098 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8021d52:	e01d      	b.n	8021d90 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8021d54:	687b      	ldr	r3, [r7, #4]
 8021d56:	7bfa      	ldrb	r2, [r7, #15]
 8021d58:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8021d5c:	7bfb      	ldrb	r3, [r7, #15]
 8021d5e:	4619      	mov	r1, r3
 8021d60:	6878      	ldr	r0, [r7, #4]
 8021d62:	f003 fdb4 	bl	80258ce <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8021d66:	6878      	ldr	r0, [r7, #4]
 8021d68:	f000 fa44 	bl	80221f4 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8021d6c:	7bfb      	ldrb	r3, [r7, #15]
 8021d6e:	2b00      	cmp	r3, #0
 8021d70:	d004      	beq.n	8021d7c <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8021d72:	687b      	ldr	r3, [r7, #4]
 8021d74:	2202      	movs	r2, #2
 8021d76:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8021d7a:	e009      	b.n	8021d90 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8021d7c:	687b      	ldr	r3, [r7, #4]
 8021d7e:	2201      	movs	r2, #1
 8021d80:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8021d84:	e004      	b.n	8021d90 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8021d86:	6839      	ldr	r1, [r7, #0]
 8021d88:	6878      	ldr	r0, [r7, #4]
 8021d8a:	f000 f985 	bl	8022098 <USBD_CtlError>
  }
}
 8021d8e:	bf00      	nop
 8021d90:	bf00      	nop
 8021d92:	3710      	adds	r7, #16
 8021d94:	46bd      	mov	sp, r7
 8021d96:	bd80      	pop	{r7, pc}

08021d98 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8021d98:	b580      	push	{r7, lr}
 8021d9a:	b084      	sub	sp, #16
 8021d9c:	af00      	add	r7, sp, #0
 8021d9e:	6078      	str	r0, [r7, #4]
 8021da0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8021da2:	2300      	movs	r3, #0
 8021da4:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8021da6:	683b      	ldr	r3, [r7, #0]
 8021da8:	885b      	ldrh	r3, [r3, #2]
 8021daa:	b2da      	uxtb	r2, r3
 8021dac:	4b4c      	ldr	r3, [pc, #304]	; (8021ee0 <USBD_SetConfig+0x148>)
 8021dae:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8021db0:	4b4b      	ldr	r3, [pc, #300]	; (8021ee0 <USBD_SetConfig+0x148>)
 8021db2:	781b      	ldrb	r3, [r3, #0]
 8021db4:	2b01      	cmp	r3, #1
 8021db6:	d905      	bls.n	8021dc4 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8021db8:	6839      	ldr	r1, [r7, #0]
 8021dba:	6878      	ldr	r0, [r7, #4]
 8021dbc:	f000 f96c 	bl	8022098 <USBD_CtlError>
    return USBD_FAIL;
 8021dc0:	2303      	movs	r3, #3
 8021dc2:	e088      	b.n	8021ed6 <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 8021dc4:	687b      	ldr	r3, [r7, #4]
 8021dc6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8021dca:	b2db      	uxtb	r3, r3
 8021dcc:	2b02      	cmp	r3, #2
 8021dce:	d002      	beq.n	8021dd6 <USBD_SetConfig+0x3e>
 8021dd0:	2b03      	cmp	r3, #3
 8021dd2:	d025      	beq.n	8021e20 <USBD_SetConfig+0x88>
 8021dd4:	e071      	b.n	8021eba <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8021dd6:	4b42      	ldr	r3, [pc, #264]	; (8021ee0 <USBD_SetConfig+0x148>)
 8021dd8:	781b      	ldrb	r3, [r3, #0]
 8021dda:	2b00      	cmp	r3, #0
 8021ddc:	d01c      	beq.n	8021e18 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 8021dde:	4b40      	ldr	r3, [pc, #256]	; (8021ee0 <USBD_SetConfig+0x148>)
 8021de0:	781b      	ldrb	r3, [r3, #0]
 8021de2:	461a      	mov	r2, r3
 8021de4:	687b      	ldr	r3, [r7, #4]
 8021de6:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8021de8:	4b3d      	ldr	r3, [pc, #244]	; (8021ee0 <USBD_SetConfig+0x148>)
 8021dea:	781b      	ldrb	r3, [r3, #0]
 8021dec:	4619      	mov	r1, r3
 8021dee:	6878      	ldr	r0, [r7, #4]
 8021df0:	f7ff f91e 	bl	8021030 <USBD_SetClassConfig>
 8021df4:	4603      	mov	r3, r0
 8021df6:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8021df8:	7bfb      	ldrb	r3, [r7, #15]
 8021dfa:	2b00      	cmp	r3, #0
 8021dfc:	d004      	beq.n	8021e08 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 8021dfe:	6839      	ldr	r1, [r7, #0]
 8021e00:	6878      	ldr	r0, [r7, #4]
 8021e02:	f000 f949 	bl	8022098 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8021e06:	e065      	b.n	8021ed4 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8021e08:	6878      	ldr	r0, [r7, #4]
 8021e0a:	f000 f9f3 	bl	80221f4 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8021e0e:	687b      	ldr	r3, [r7, #4]
 8021e10:	2203      	movs	r2, #3
 8021e12:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8021e16:	e05d      	b.n	8021ed4 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8021e18:	6878      	ldr	r0, [r7, #4]
 8021e1a:	f000 f9eb 	bl	80221f4 <USBD_CtlSendStatus>
      break;
 8021e1e:	e059      	b.n	8021ed4 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8021e20:	4b2f      	ldr	r3, [pc, #188]	; (8021ee0 <USBD_SetConfig+0x148>)
 8021e22:	781b      	ldrb	r3, [r3, #0]
 8021e24:	2b00      	cmp	r3, #0
 8021e26:	d112      	bne.n	8021e4e <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8021e28:	687b      	ldr	r3, [r7, #4]
 8021e2a:	2202      	movs	r2, #2
 8021e2c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8021e30:	4b2b      	ldr	r3, [pc, #172]	; (8021ee0 <USBD_SetConfig+0x148>)
 8021e32:	781b      	ldrb	r3, [r3, #0]
 8021e34:	461a      	mov	r2, r3
 8021e36:	687b      	ldr	r3, [r7, #4]
 8021e38:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8021e3a:	4b29      	ldr	r3, [pc, #164]	; (8021ee0 <USBD_SetConfig+0x148>)
 8021e3c:	781b      	ldrb	r3, [r3, #0]
 8021e3e:	4619      	mov	r1, r3
 8021e40:	6878      	ldr	r0, [r7, #4]
 8021e42:	f7ff f911 	bl	8021068 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8021e46:	6878      	ldr	r0, [r7, #4]
 8021e48:	f000 f9d4 	bl	80221f4 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8021e4c:	e042      	b.n	8021ed4 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 8021e4e:	4b24      	ldr	r3, [pc, #144]	; (8021ee0 <USBD_SetConfig+0x148>)
 8021e50:	781b      	ldrb	r3, [r3, #0]
 8021e52:	461a      	mov	r2, r3
 8021e54:	687b      	ldr	r3, [r7, #4]
 8021e56:	685b      	ldr	r3, [r3, #4]
 8021e58:	429a      	cmp	r2, r3
 8021e5a:	d02a      	beq.n	8021eb2 <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8021e5c:	687b      	ldr	r3, [r7, #4]
 8021e5e:	685b      	ldr	r3, [r3, #4]
 8021e60:	b2db      	uxtb	r3, r3
 8021e62:	4619      	mov	r1, r3
 8021e64:	6878      	ldr	r0, [r7, #4]
 8021e66:	f7ff f8ff 	bl	8021068 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8021e6a:	4b1d      	ldr	r3, [pc, #116]	; (8021ee0 <USBD_SetConfig+0x148>)
 8021e6c:	781b      	ldrb	r3, [r3, #0]
 8021e6e:	461a      	mov	r2, r3
 8021e70:	687b      	ldr	r3, [r7, #4]
 8021e72:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8021e74:	4b1a      	ldr	r3, [pc, #104]	; (8021ee0 <USBD_SetConfig+0x148>)
 8021e76:	781b      	ldrb	r3, [r3, #0]
 8021e78:	4619      	mov	r1, r3
 8021e7a:	6878      	ldr	r0, [r7, #4]
 8021e7c:	f7ff f8d8 	bl	8021030 <USBD_SetClassConfig>
 8021e80:	4603      	mov	r3, r0
 8021e82:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8021e84:	7bfb      	ldrb	r3, [r7, #15]
 8021e86:	2b00      	cmp	r3, #0
 8021e88:	d00f      	beq.n	8021eaa <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 8021e8a:	6839      	ldr	r1, [r7, #0]
 8021e8c:	6878      	ldr	r0, [r7, #4]
 8021e8e:	f000 f903 	bl	8022098 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8021e92:	687b      	ldr	r3, [r7, #4]
 8021e94:	685b      	ldr	r3, [r3, #4]
 8021e96:	b2db      	uxtb	r3, r3
 8021e98:	4619      	mov	r1, r3
 8021e9a:	6878      	ldr	r0, [r7, #4]
 8021e9c:	f7ff f8e4 	bl	8021068 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8021ea0:	687b      	ldr	r3, [r7, #4]
 8021ea2:	2202      	movs	r2, #2
 8021ea4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8021ea8:	e014      	b.n	8021ed4 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8021eaa:	6878      	ldr	r0, [r7, #4]
 8021eac:	f000 f9a2 	bl	80221f4 <USBD_CtlSendStatus>
      break;
 8021eb0:	e010      	b.n	8021ed4 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8021eb2:	6878      	ldr	r0, [r7, #4]
 8021eb4:	f000 f99e 	bl	80221f4 <USBD_CtlSendStatus>
      break;
 8021eb8:	e00c      	b.n	8021ed4 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 8021eba:	6839      	ldr	r1, [r7, #0]
 8021ebc:	6878      	ldr	r0, [r7, #4]
 8021ebe:	f000 f8eb 	bl	8022098 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8021ec2:	4b07      	ldr	r3, [pc, #28]	; (8021ee0 <USBD_SetConfig+0x148>)
 8021ec4:	781b      	ldrb	r3, [r3, #0]
 8021ec6:	4619      	mov	r1, r3
 8021ec8:	6878      	ldr	r0, [r7, #4]
 8021eca:	f7ff f8cd 	bl	8021068 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8021ece:	2303      	movs	r3, #3
 8021ed0:	73fb      	strb	r3, [r7, #15]
      break;
 8021ed2:	bf00      	nop
  }

  return ret;
 8021ed4:	7bfb      	ldrb	r3, [r7, #15]
}
 8021ed6:	4618      	mov	r0, r3
 8021ed8:	3710      	adds	r7, #16
 8021eda:	46bd      	mov	sp, r7
 8021edc:	bd80      	pop	{r7, pc}
 8021ede:	bf00      	nop
 8021ee0:	200007a8 	.word	0x200007a8

08021ee4 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8021ee4:	b580      	push	{r7, lr}
 8021ee6:	b082      	sub	sp, #8
 8021ee8:	af00      	add	r7, sp, #0
 8021eea:	6078      	str	r0, [r7, #4]
 8021eec:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8021eee:	683b      	ldr	r3, [r7, #0]
 8021ef0:	88db      	ldrh	r3, [r3, #6]
 8021ef2:	2b01      	cmp	r3, #1
 8021ef4:	d004      	beq.n	8021f00 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8021ef6:	6839      	ldr	r1, [r7, #0]
 8021ef8:	6878      	ldr	r0, [r7, #4]
 8021efa:	f000 f8cd 	bl	8022098 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8021efe:	e023      	b.n	8021f48 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8021f00:	687b      	ldr	r3, [r7, #4]
 8021f02:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8021f06:	b2db      	uxtb	r3, r3
 8021f08:	2b02      	cmp	r3, #2
 8021f0a:	dc02      	bgt.n	8021f12 <USBD_GetConfig+0x2e>
 8021f0c:	2b00      	cmp	r3, #0
 8021f0e:	dc03      	bgt.n	8021f18 <USBD_GetConfig+0x34>
 8021f10:	e015      	b.n	8021f3e <USBD_GetConfig+0x5a>
 8021f12:	2b03      	cmp	r3, #3
 8021f14:	d00b      	beq.n	8021f2e <USBD_GetConfig+0x4a>
 8021f16:	e012      	b.n	8021f3e <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8021f18:	687b      	ldr	r3, [r7, #4]
 8021f1a:	2200      	movs	r2, #0
 8021f1c:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8021f1e:	687b      	ldr	r3, [r7, #4]
 8021f20:	3308      	adds	r3, #8
 8021f22:	2201      	movs	r2, #1
 8021f24:	4619      	mov	r1, r3
 8021f26:	6878      	ldr	r0, [r7, #4]
 8021f28:	f000 f927 	bl	802217a <USBD_CtlSendData>
        break;
 8021f2c:	e00c      	b.n	8021f48 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8021f2e:	687b      	ldr	r3, [r7, #4]
 8021f30:	3304      	adds	r3, #4
 8021f32:	2201      	movs	r2, #1
 8021f34:	4619      	mov	r1, r3
 8021f36:	6878      	ldr	r0, [r7, #4]
 8021f38:	f000 f91f 	bl	802217a <USBD_CtlSendData>
        break;
 8021f3c:	e004      	b.n	8021f48 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8021f3e:	6839      	ldr	r1, [r7, #0]
 8021f40:	6878      	ldr	r0, [r7, #4]
 8021f42:	f000 f8a9 	bl	8022098 <USBD_CtlError>
        break;
 8021f46:	bf00      	nop
}
 8021f48:	bf00      	nop
 8021f4a:	3708      	adds	r7, #8
 8021f4c:	46bd      	mov	sp, r7
 8021f4e:	bd80      	pop	{r7, pc}

08021f50 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8021f50:	b580      	push	{r7, lr}
 8021f52:	b082      	sub	sp, #8
 8021f54:	af00      	add	r7, sp, #0
 8021f56:	6078      	str	r0, [r7, #4]
 8021f58:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8021f5a:	687b      	ldr	r3, [r7, #4]
 8021f5c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8021f60:	b2db      	uxtb	r3, r3
 8021f62:	3b01      	subs	r3, #1
 8021f64:	2b02      	cmp	r3, #2
 8021f66:	d81e      	bhi.n	8021fa6 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8021f68:	683b      	ldr	r3, [r7, #0]
 8021f6a:	88db      	ldrh	r3, [r3, #6]
 8021f6c:	2b02      	cmp	r3, #2
 8021f6e:	d004      	beq.n	8021f7a <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8021f70:	6839      	ldr	r1, [r7, #0]
 8021f72:	6878      	ldr	r0, [r7, #4]
 8021f74:	f000 f890 	bl	8022098 <USBD_CtlError>
        break;
 8021f78:	e01a      	b.n	8021fb0 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8021f7a:	687b      	ldr	r3, [r7, #4]
 8021f7c:	2201      	movs	r2, #1
 8021f7e:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 8021f80:	687b      	ldr	r3, [r7, #4]
 8021f82:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8021f86:	2b00      	cmp	r3, #0
 8021f88:	d005      	beq.n	8021f96 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8021f8a:	687b      	ldr	r3, [r7, #4]
 8021f8c:	68db      	ldr	r3, [r3, #12]
 8021f8e:	f043 0202 	orr.w	r2, r3, #2
 8021f92:	687b      	ldr	r3, [r7, #4]
 8021f94:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8021f96:	687b      	ldr	r3, [r7, #4]
 8021f98:	330c      	adds	r3, #12
 8021f9a:	2202      	movs	r2, #2
 8021f9c:	4619      	mov	r1, r3
 8021f9e:	6878      	ldr	r0, [r7, #4]
 8021fa0:	f000 f8eb 	bl	802217a <USBD_CtlSendData>
      break;
 8021fa4:	e004      	b.n	8021fb0 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8021fa6:	6839      	ldr	r1, [r7, #0]
 8021fa8:	6878      	ldr	r0, [r7, #4]
 8021faa:	f000 f875 	bl	8022098 <USBD_CtlError>
      break;
 8021fae:	bf00      	nop
  }
}
 8021fb0:	bf00      	nop
 8021fb2:	3708      	adds	r7, #8
 8021fb4:	46bd      	mov	sp, r7
 8021fb6:	bd80      	pop	{r7, pc}

08021fb8 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8021fb8:	b580      	push	{r7, lr}
 8021fba:	b082      	sub	sp, #8
 8021fbc:	af00      	add	r7, sp, #0
 8021fbe:	6078      	str	r0, [r7, #4]
 8021fc0:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8021fc2:	683b      	ldr	r3, [r7, #0]
 8021fc4:	885b      	ldrh	r3, [r3, #2]
 8021fc6:	2b01      	cmp	r3, #1
 8021fc8:	d106      	bne.n	8021fd8 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8021fca:	687b      	ldr	r3, [r7, #4]
 8021fcc:	2201      	movs	r2, #1
 8021fce:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8021fd2:	6878      	ldr	r0, [r7, #4]
 8021fd4:	f000 f90e 	bl	80221f4 <USBD_CtlSendStatus>
  }
}
 8021fd8:	bf00      	nop
 8021fda:	3708      	adds	r7, #8
 8021fdc:	46bd      	mov	sp, r7
 8021fde:	bd80      	pop	{r7, pc}

08021fe0 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8021fe0:	b580      	push	{r7, lr}
 8021fe2:	b082      	sub	sp, #8
 8021fe4:	af00      	add	r7, sp, #0
 8021fe6:	6078      	str	r0, [r7, #4]
 8021fe8:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8021fea:	687b      	ldr	r3, [r7, #4]
 8021fec:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8021ff0:	b2db      	uxtb	r3, r3
 8021ff2:	3b01      	subs	r3, #1
 8021ff4:	2b02      	cmp	r3, #2
 8021ff6:	d80b      	bhi.n	8022010 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8021ff8:	683b      	ldr	r3, [r7, #0]
 8021ffa:	885b      	ldrh	r3, [r3, #2]
 8021ffc:	2b01      	cmp	r3, #1
 8021ffe:	d10c      	bne.n	802201a <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8022000:	687b      	ldr	r3, [r7, #4]
 8022002:	2200      	movs	r2, #0
 8022004:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8022008:	6878      	ldr	r0, [r7, #4]
 802200a:	f000 f8f3 	bl	80221f4 <USBD_CtlSendStatus>
      }
      break;
 802200e:	e004      	b.n	802201a <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8022010:	6839      	ldr	r1, [r7, #0]
 8022012:	6878      	ldr	r0, [r7, #4]
 8022014:	f000 f840 	bl	8022098 <USBD_CtlError>
      break;
 8022018:	e000      	b.n	802201c <USBD_ClrFeature+0x3c>
      break;
 802201a:	bf00      	nop
  }
}
 802201c:	bf00      	nop
 802201e:	3708      	adds	r7, #8
 8022020:	46bd      	mov	sp, r7
 8022022:	bd80      	pop	{r7, pc}

08022024 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8022024:	b580      	push	{r7, lr}
 8022026:	b084      	sub	sp, #16
 8022028:	af00      	add	r7, sp, #0
 802202a:	6078      	str	r0, [r7, #4]
 802202c:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 802202e:	683b      	ldr	r3, [r7, #0]
 8022030:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8022032:	68fb      	ldr	r3, [r7, #12]
 8022034:	781a      	ldrb	r2, [r3, #0]
 8022036:	687b      	ldr	r3, [r7, #4]
 8022038:	701a      	strb	r2, [r3, #0]

  pbuff++;
 802203a:	68fb      	ldr	r3, [r7, #12]
 802203c:	3301      	adds	r3, #1
 802203e:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8022040:	68fb      	ldr	r3, [r7, #12]
 8022042:	781a      	ldrb	r2, [r3, #0]
 8022044:	687b      	ldr	r3, [r7, #4]
 8022046:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8022048:	68fb      	ldr	r3, [r7, #12]
 802204a:	3301      	adds	r3, #1
 802204c:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 802204e:	68f8      	ldr	r0, [r7, #12]
 8022050:	f7ff fa91 	bl	8021576 <SWAPBYTE>
 8022054:	4603      	mov	r3, r0
 8022056:	461a      	mov	r2, r3
 8022058:	687b      	ldr	r3, [r7, #4]
 802205a:	805a      	strh	r2, [r3, #2]

  pbuff++;
 802205c:	68fb      	ldr	r3, [r7, #12]
 802205e:	3301      	adds	r3, #1
 8022060:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8022062:	68fb      	ldr	r3, [r7, #12]
 8022064:	3301      	adds	r3, #1
 8022066:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8022068:	68f8      	ldr	r0, [r7, #12]
 802206a:	f7ff fa84 	bl	8021576 <SWAPBYTE>
 802206e:	4603      	mov	r3, r0
 8022070:	461a      	mov	r2, r3
 8022072:	687b      	ldr	r3, [r7, #4]
 8022074:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8022076:	68fb      	ldr	r3, [r7, #12]
 8022078:	3301      	adds	r3, #1
 802207a:	60fb      	str	r3, [r7, #12]
  pbuff++;
 802207c:	68fb      	ldr	r3, [r7, #12]
 802207e:	3301      	adds	r3, #1
 8022080:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8022082:	68f8      	ldr	r0, [r7, #12]
 8022084:	f7ff fa77 	bl	8021576 <SWAPBYTE>
 8022088:	4603      	mov	r3, r0
 802208a:	461a      	mov	r2, r3
 802208c:	687b      	ldr	r3, [r7, #4]
 802208e:	80da      	strh	r2, [r3, #6]
}
 8022090:	bf00      	nop
 8022092:	3710      	adds	r7, #16
 8022094:	46bd      	mov	sp, r7
 8022096:	bd80      	pop	{r7, pc}

08022098 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8022098:	b580      	push	{r7, lr}
 802209a:	b082      	sub	sp, #8
 802209c:	af00      	add	r7, sp, #0
 802209e:	6078      	str	r0, [r7, #4]
 80220a0:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 80220a2:	2180      	movs	r1, #128	; 0x80
 80220a4:	6878      	ldr	r0, [r7, #4]
 80220a6:	f003 fba8 	bl	80257fa <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 80220aa:	2100      	movs	r1, #0
 80220ac:	6878      	ldr	r0, [r7, #4]
 80220ae:	f003 fba4 	bl	80257fa <USBD_LL_StallEP>
}
 80220b2:	bf00      	nop
 80220b4:	3708      	adds	r7, #8
 80220b6:	46bd      	mov	sp, r7
 80220b8:	bd80      	pop	{r7, pc}

080220ba <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80220ba:	b580      	push	{r7, lr}
 80220bc:	b086      	sub	sp, #24
 80220be:	af00      	add	r7, sp, #0
 80220c0:	60f8      	str	r0, [r7, #12]
 80220c2:	60b9      	str	r1, [r7, #8]
 80220c4:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80220c6:	2300      	movs	r3, #0
 80220c8:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 80220ca:	68fb      	ldr	r3, [r7, #12]
 80220cc:	2b00      	cmp	r3, #0
 80220ce:	d036      	beq.n	802213e <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 80220d0:	68fb      	ldr	r3, [r7, #12]
 80220d2:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 80220d4:	6938      	ldr	r0, [r7, #16]
 80220d6:	f000 f836 	bl	8022146 <USBD_GetLen>
 80220da:	4603      	mov	r3, r0
 80220dc:	3301      	adds	r3, #1
 80220de:	b29b      	uxth	r3, r3
 80220e0:	005b      	lsls	r3, r3, #1
 80220e2:	b29a      	uxth	r2, r3
 80220e4:	687b      	ldr	r3, [r7, #4]
 80220e6:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 80220e8:	7dfb      	ldrb	r3, [r7, #23]
 80220ea:	68ba      	ldr	r2, [r7, #8]
 80220ec:	4413      	add	r3, r2
 80220ee:	687a      	ldr	r2, [r7, #4]
 80220f0:	7812      	ldrb	r2, [r2, #0]
 80220f2:	701a      	strb	r2, [r3, #0]
  idx++;
 80220f4:	7dfb      	ldrb	r3, [r7, #23]
 80220f6:	3301      	adds	r3, #1
 80220f8:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 80220fa:	7dfb      	ldrb	r3, [r7, #23]
 80220fc:	68ba      	ldr	r2, [r7, #8]
 80220fe:	4413      	add	r3, r2
 8022100:	2203      	movs	r2, #3
 8022102:	701a      	strb	r2, [r3, #0]
  idx++;
 8022104:	7dfb      	ldrb	r3, [r7, #23]
 8022106:	3301      	adds	r3, #1
 8022108:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 802210a:	e013      	b.n	8022134 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 802210c:	7dfb      	ldrb	r3, [r7, #23]
 802210e:	68ba      	ldr	r2, [r7, #8]
 8022110:	4413      	add	r3, r2
 8022112:	693a      	ldr	r2, [r7, #16]
 8022114:	7812      	ldrb	r2, [r2, #0]
 8022116:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8022118:	693b      	ldr	r3, [r7, #16]
 802211a:	3301      	adds	r3, #1
 802211c:	613b      	str	r3, [r7, #16]
    idx++;
 802211e:	7dfb      	ldrb	r3, [r7, #23]
 8022120:	3301      	adds	r3, #1
 8022122:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8022124:	7dfb      	ldrb	r3, [r7, #23]
 8022126:	68ba      	ldr	r2, [r7, #8]
 8022128:	4413      	add	r3, r2
 802212a:	2200      	movs	r2, #0
 802212c:	701a      	strb	r2, [r3, #0]
    idx++;
 802212e:	7dfb      	ldrb	r3, [r7, #23]
 8022130:	3301      	adds	r3, #1
 8022132:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8022134:	693b      	ldr	r3, [r7, #16]
 8022136:	781b      	ldrb	r3, [r3, #0]
 8022138:	2b00      	cmp	r3, #0
 802213a:	d1e7      	bne.n	802210c <USBD_GetString+0x52>
 802213c:	e000      	b.n	8022140 <USBD_GetString+0x86>
    return;
 802213e:	bf00      	nop
  }
}
 8022140:	3718      	adds	r7, #24
 8022142:	46bd      	mov	sp, r7
 8022144:	bd80      	pop	{r7, pc}

08022146 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8022146:	b480      	push	{r7}
 8022148:	b085      	sub	sp, #20
 802214a:	af00      	add	r7, sp, #0
 802214c:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 802214e:	2300      	movs	r3, #0
 8022150:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8022152:	687b      	ldr	r3, [r7, #4]
 8022154:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8022156:	e005      	b.n	8022164 <USBD_GetLen+0x1e>
  {
    len++;
 8022158:	7bfb      	ldrb	r3, [r7, #15]
 802215a:	3301      	adds	r3, #1
 802215c:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 802215e:	68bb      	ldr	r3, [r7, #8]
 8022160:	3301      	adds	r3, #1
 8022162:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8022164:	68bb      	ldr	r3, [r7, #8]
 8022166:	781b      	ldrb	r3, [r3, #0]
 8022168:	2b00      	cmp	r3, #0
 802216a:	d1f5      	bne.n	8022158 <USBD_GetLen+0x12>
  }

  return len;
 802216c:	7bfb      	ldrb	r3, [r7, #15]
}
 802216e:	4618      	mov	r0, r3
 8022170:	3714      	adds	r7, #20
 8022172:	46bd      	mov	sp, r7
 8022174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022178:	4770      	bx	lr

0802217a <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 802217a:	b580      	push	{r7, lr}
 802217c:	b084      	sub	sp, #16
 802217e:	af00      	add	r7, sp, #0
 8022180:	60f8      	str	r0, [r7, #12]
 8022182:	60b9      	str	r1, [r7, #8]
 8022184:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8022186:	68fb      	ldr	r3, [r7, #12]
 8022188:	2202      	movs	r2, #2
 802218a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 802218e:	68fb      	ldr	r3, [r7, #12]
 8022190:	687a      	ldr	r2, [r7, #4]
 8022192:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8022194:	68fb      	ldr	r3, [r7, #12]
 8022196:	687a      	ldr	r2, [r7, #4]
 8022198:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 802219a:	687b      	ldr	r3, [r7, #4]
 802219c:	68ba      	ldr	r2, [r7, #8]
 802219e:	2100      	movs	r1, #0
 80221a0:	68f8      	ldr	r0, [r7, #12]
 80221a2:	f003 fbb3 	bl	802590c <USBD_LL_Transmit>

  return USBD_OK;
 80221a6:	2300      	movs	r3, #0
}
 80221a8:	4618      	mov	r0, r3
 80221aa:	3710      	adds	r7, #16
 80221ac:	46bd      	mov	sp, r7
 80221ae:	bd80      	pop	{r7, pc}

080221b0 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 80221b0:	b580      	push	{r7, lr}
 80221b2:	b084      	sub	sp, #16
 80221b4:	af00      	add	r7, sp, #0
 80221b6:	60f8      	str	r0, [r7, #12]
 80221b8:	60b9      	str	r1, [r7, #8]
 80221ba:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80221bc:	687b      	ldr	r3, [r7, #4]
 80221be:	68ba      	ldr	r2, [r7, #8]
 80221c0:	2100      	movs	r1, #0
 80221c2:	68f8      	ldr	r0, [r7, #12]
 80221c4:	f003 fba2 	bl	802590c <USBD_LL_Transmit>

  return USBD_OK;
 80221c8:	2300      	movs	r3, #0
}
 80221ca:	4618      	mov	r0, r3
 80221cc:	3710      	adds	r7, #16
 80221ce:	46bd      	mov	sp, r7
 80221d0:	bd80      	pop	{r7, pc}

080221d2 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 80221d2:	b580      	push	{r7, lr}
 80221d4:	b084      	sub	sp, #16
 80221d6:	af00      	add	r7, sp, #0
 80221d8:	60f8      	str	r0, [r7, #12]
 80221da:	60b9      	str	r1, [r7, #8]
 80221dc:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80221de:	687b      	ldr	r3, [r7, #4]
 80221e0:	68ba      	ldr	r2, [r7, #8]
 80221e2:	2100      	movs	r1, #0
 80221e4:	68f8      	ldr	r0, [r7, #12]
 80221e6:	f003 fbb2 	bl	802594e <USBD_LL_PrepareReceive>

  return USBD_OK;
 80221ea:	2300      	movs	r3, #0
}
 80221ec:	4618      	mov	r0, r3
 80221ee:	3710      	adds	r7, #16
 80221f0:	46bd      	mov	sp, r7
 80221f2:	bd80      	pop	{r7, pc}

080221f4 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 80221f4:	b580      	push	{r7, lr}
 80221f6:	b082      	sub	sp, #8
 80221f8:	af00      	add	r7, sp, #0
 80221fa:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80221fc:	687b      	ldr	r3, [r7, #4]
 80221fe:	2204      	movs	r2, #4
 8022200:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8022204:	2300      	movs	r3, #0
 8022206:	2200      	movs	r2, #0
 8022208:	2100      	movs	r1, #0
 802220a:	6878      	ldr	r0, [r7, #4]
 802220c:	f003 fb7e 	bl	802590c <USBD_LL_Transmit>

  return USBD_OK;
 8022210:	2300      	movs	r3, #0
}
 8022212:	4618      	mov	r0, r3
 8022214:	3708      	adds	r7, #8
 8022216:	46bd      	mov	sp, r7
 8022218:	bd80      	pop	{r7, pc}

0802221a <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 802221a:	b580      	push	{r7, lr}
 802221c:	b082      	sub	sp, #8
 802221e:	af00      	add	r7, sp, #0
 8022220:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8022222:	687b      	ldr	r3, [r7, #4]
 8022224:	2205      	movs	r2, #5
 8022226:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 802222a:	2300      	movs	r3, #0
 802222c:	2200      	movs	r2, #0
 802222e:	2100      	movs	r1, #0
 8022230:	6878      	ldr	r0, [r7, #4]
 8022232:	f003 fb8c 	bl	802594e <USBD_LL_PrepareReceive>

  return USBD_OK;
 8022236:	2300      	movs	r3, #0
}
 8022238:	4618      	mov	r0, r3
 802223a:	3708      	adds	r7, #8
 802223c:	46bd      	mov	sp, r7
 802223e:	bd80      	pop	{r7, pc}

08022240 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8022240:	b580      	push	{r7, lr}
 8022242:	b084      	sub	sp, #16
 8022244:	af00      	add	r7, sp, #0
 8022246:	4603      	mov	r3, r0
 8022248:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 802224a:	79fb      	ldrb	r3, [r7, #7]
 802224c:	4a08      	ldr	r2, [pc, #32]	; (8022270 <disk_status+0x30>)
 802224e:	009b      	lsls	r3, r3, #2
 8022250:	4413      	add	r3, r2
 8022252:	685b      	ldr	r3, [r3, #4]
 8022254:	685b      	ldr	r3, [r3, #4]
 8022256:	79fa      	ldrb	r2, [r7, #7]
 8022258:	4905      	ldr	r1, [pc, #20]	; (8022270 <disk_status+0x30>)
 802225a:	440a      	add	r2, r1
 802225c:	7a12      	ldrb	r2, [r2, #8]
 802225e:	4610      	mov	r0, r2
 8022260:	4798      	blx	r3
 8022262:	4603      	mov	r3, r0
 8022264:	73fb      	strb	r3, [r7, #15]
  return stat;
 8022266:	7bfb      	ldrb	r3, [r7, #15]
}
 8022268:	4618      	mov	r0, r3
 802226a:	3710      	adds	r7, #16
 802226c:	46bd      	mov	sp, r7
 802226e:	bd80      	pop	{r7, pc}
 8022270:	200007d4 	.word	0x200007d4

08022274 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8022274:	b580      	push	{r7, lr}
 8022276:	b084      	sub	sp, #16
 8022278:	af00      	add	r7, sp, #0
 802227a:	4603      	mov	r3, r0
 802227c:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 802227e:	2300      	movs	r3, #0
 8022280:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 8022282:	79fb      	ldrb	r3, [r7, #7]
 8022284:	4a0d      	ldr	r2, [pc, #52]	; (80222bc <disk_initialize+0x48>)
 8022286:	5cd3      	ldrb	r3, [r2, r3]
 8022288:	2b00      	cmp	r3, #0
 802228a:	d111      	bne.n	80222b0 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 802228c:	79fb      	ldrb	r3, [r7, #7]
 802228e:	4a0b      	ldr	r2, [pc, #44]	; (80222bc <disk_initialize+0x48>)
 8022290:	2101      	movs	r1, #1
 8022292:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8022294:	79fb      	ldrb	r3, [r7, #7]
 8022296:	4a09      	ldr	r2, [pc, #36]	; (80222bc <disk_initialize+0x48>)
 8022298:	009b      	lsls	r3, r3, #2
 802229a:	4413      	add	r3, r2
 802229c:	685b      	ldr	r3, [r3, #4]
 802229e:	681b      	ldr	r3, [r3, #0]
 80222a0:	79fa      	ldrb	r2, [r7, #7]
 80222a2:	4906      	ldr	r1, [pc, #24]	; (80222bc <disk_initialize+0x48>)
 80222a4:	440a      	add	r2, r1
 80222a6:	7a12      	ldrb	r2, [r2, #8]
 80222a8:	4610      	mov	r0, r2
 80222aa:	4798      	blx	r3
 80222ac:	4603      	mov	r3, r0
 80222ae:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 80222b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80222b2:	4618      	mov	r0, r3
 80222b4:	3710      	adds	r7, #16
 80222b6:	46bd      	mov	sp, r7
 80222b8:	bd80      	pop	{r7, pc}
 80222ba:	bf00      	nop
 80222bc:	200007d4 	.word	0x200007d4

080222c0 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 80222c0:	b590      	push	{r4, r7, lr}
 80222c2:	b087      	sub	sp, #28
 80222c4:	af00      	add	r7, sp, #0
 80222c6:	60b9      	str	r1, [r7, #8]
 80222c8:	607a      	str	r2, [r7, #4]
 80222ca:	603b      	str	r3, [r7, #0]
 80222cc:	4603      	mov	r3, r0
 80222ce:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 80222d0:	7bfb      	ldrb	r3, [r7, #15]
 80222d2:	4a0a      	ldr	r2, [pc, #40]	; (80222fc <disk_read+0x3c>)
 80222d4:	009b      	lsls	r3, r3, #2
 80222d6:	4413      	add	r3, r2
 80222d8:	685b      	ldr	r3, [r3, #4]
 80222da:	689c      	ldr	r4, [r3, #8]
 80222dc:	7bfb      	ldrb	r3, [r7, #15]
 80222de:	4a07      	ldr	r2, [pc, #28]	; (80222fc <disk_read+0x3c>)
 80222e0:	4413      	add	r3, r2
 80222e2:	7a18      	ldrb	r0, [r3, #8]
 80222e4:	683b      	ldr	r3, [r7, #0]
 80222e6:	687a      	ldr	r2, [r7, #4]
 80222e8:	68b9      	ldr	r1, [r7, #8]
 80222ea:	47a0      	blx	r4
 80222ec:	4603      	mov	r3, r0
 80222ee:	75fb      	strb	r3, [r7, #23]
  return res;
 80222f0:	7dfb      	ldrb	r3, [r7, #23]
}
 80222f2:	4618      	mov	r0, r3
 80222f4:	371c      	adds	r7, #28
 80222f6:	46bd      	mov	sp, r7
 80222f8:	bd90      	pop	{r4, r7, pc}
 80222fa:	bf00      	nop
 80222fc:	200007d4 	.word	0x200007d4

08022300 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8022300:	b590      	push	{r4, r7, lr}
 8022302:	b087      	sub	sp, #28
 8022304:	af00      	add	r7, sp, #0
 8022306:	60b9      	str	r1, [r7, #8]
 8022308:	607a      	str	r2, [r7, #4]
 802230a:	603b      	str	r3, [r7, #0]
 802230c:	4603      	mov	r3, r0
 802230e:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8022310:	7bfb      	ldrb	r3, [r7, #15]
 8022312:	4a0a      	ldr	r2, [pc, #40]	; (802233c <disk_write+0x3c>)
 8022314:	009b      	lsls	r3, r3, #2
 8022316:	4413      	add	r3, r2
 8022318:	685b      	ldr	r3, [r3, #4]
 802231a:	68dc      	ldr	r4, [r3, #12]
 802231c:	7bfb      	ldrb	r3, [r7, #15]
 802231e:	4a07      	ldr	r2, [pc, #28]	; (802233c <disk_write+0x3c>)
 8022320:	4413      	add	r3, r2
 8022322:	7a18      	ldrb	r0, [r3, #8]
 8022324:	683b      	ldr	r3, [r7, #0]
 8022326:	687a      	ldr	r2, [r7, #4]
 8022328:	68b9      	ldr	r1, [r7, #8]
 802232a:	47a0      	blx	r4
 802232c:	4603      	mov	r3, r0
 802232e:	75fb      	strb	r3, [r7, #23]
  return res;
 8022330:	7dfb      	ldrb	r3, [r7, #23]
}
 8022332:	4618      	mov	r0, r3
 8022334:	371c      	adds	r7, #28
 8022336:	46bd      	mov	sp, r7
 8022338:	bd90      	pop	{r4, r7, pc}
 802233a:	bf00      	nop
 802233c:	200007d4 	.word	0x200007d4

08022340 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8022340:	b580      	push	{r7, lr}
 8022342:	b084      	sub	sp, #16
 8022344:	af00      	add	r7, sp, #0
 8022346:	4603      	mov	r3, r0
 8022348:	603a      	str	r2, [r7, #0]
 802234a:	71fb      	strb	r3, [r7, #7]
 802234c:	460b      	mov	r3, r1
 802234e:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8022350:	79fb      	ldrb	r3, [r7, #7]
 8022352:	4a09      	ldr	r2, [pc, #36]	; (8022378 <disk_ioctl+0x38>)
 8022354:	009b      	lsls	r3, r3, #2
 8022356:	4413      	add	r3, r2
 8022358:	685b      	ldr	r3, [r3, #4]
 802235a:	691b      	ldr	r3, [r3, #16]
 802235c:	79fa      	ldrb	r2, [r7, #7]
 802235e:	4906      	ldr	r1, [pc, #24]	; (8022378 <disk_ioctl+0x38>)
 8022360:	440a      	add	r2, r1
 8022362:	7a10      	ldrb	r0, [r2, #8]
 8022364:	79b9      	ldrb	r1, [r7, #6]
 8022366:	683a      	ldr	r2, [r7, #0]
 8022368:	4798      	blx	r3
 802236a:	4603      	mov	r3, r0
 802236c:	73fb      	strb	r3, [r7, #15]
  return res;
 802236e:	7bfb      	ldrb	r3, [r7, #15]
}
 8022370:	4618      	mov	r0, r3
 8022372:	3710      	adds	r7, #16
 8022374:	46bd      	mov	sp, r7
 8022376:	bd80      	pop	{r7, pc}
 8022378:	200007d4 	.word	0x200007d4

0802237c <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 802237c:	b480      	push	{r7}
 802237e:	b085      	sub	sp, #20
 8022380:	af00      	add	r7, sp, #0
 8022382:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8022384:	687b      	ldr	r3, [r7, #4]
 8022386:	3301      	adds	r3, #1
 8022388:	781b      	ldrb	r3, [r3, #0]
 802238a:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 802238c:	89fb      	ldrh	r3, [r7, #14]
 802238e:	021b      	lsls	r3, r3, #8
 8022390:	b21a      	sxth	r2, r3
 8022392:	687b      	ldr	r3, [r7, #4]
 8022394:	781b      	ldrb	r3, [r3, #0]
 8022396:	b21b      	sxth	r3, r3
 8022398:	4313      	orrs	r3, r2
 802239a:	b21b      	sxth	r3, r3
 802239c:	81fb      	strh	r3, [r7, #14]
	return rv;
 802239e:	89fb      	ldrh	r3, [r7, #14]
}
 80223a0:	4618      	mov	r0, r3
 80223a2:	3714      	adds	r7, #20
 80223a4:	46bd      	mov	sp, r7
 80223a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80223aa:	4770      	bx	lr

080223ac <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 80223ac:	b480      	push	{r7}
 80223ae:	b085      	sub	sp, #20
 80223b0:	af00      	add	r7, sp, #0
 80223b2:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 80223b4:	687b      	ldr	r3, [r7, #4]
 80223b6:	3303      	adds	r3, #3
 80223b8:	781b      	ldrb	r3, [r3, #0]
 80223ba:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 80223bc:	68fb      	ldr	r3, [r7, #12]
 80223be:	021b      	lsls	r3, r3, #8
 80223c0:	687a      	ldr	r2, [r7, #4]
 80223c2:	3202      	adds	r2, #2
 80223c4:	7812      	ldrb	r2, [r2, #0]
 80223c6:	4313      	orrs	r3, r2
 80223c8:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 80223ca:	68fb      	ldr	r3, [r7, #12]
 80223cc:	021b      	lsls	r3, r3, #8
 80223ce:	687a      	ldr	r2, [r7, #4]
 80223d0:	3201      	adds	r2, #1
 80223d2:	7812      	ldrb	r2, [r2, #0]
 80223d4:	4313      	orrs	r3, r2
 80223d6:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 80223d8:	68fb      	ldr	r3, [r7, #12]
 80223da:	021b      	lsls	r3, r3, #8
 80223dc:	687a      	ldr	r2, [r7, #4]
 80223de:	7812      	ldrb	r2, [r2, #0]
 80223e0:	4313      	orrs	r3, r2
 80223e2:	60fb      	str	r3, [r7, #12]
	return rv;
 80223e4:	68fb      	ldr	r3, [r7, #12]
}
 80223e6:	4618      	mov	r0, r3
 80223e8:	3714      	adds	r7, #20
 80223ea:	46bd      	mov	sp, r7
 80223ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80223f0:	4770      	bx	lr

080223f2 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 80223f2:	b480      	push	{r7}
 80223f4:	b083      	sub	sp, #12
 80223f6:	af00      	add	r7, sp, #0
 80223f8:	6078      	str	r0, [r7, #4]
 80223fa:	460b      	mov	r3, r1
 80223fc:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 80223fe:	687b      	ldr	r3, [r7, #4]
 8022400:	1c5a      	adds	r2, r3, #1
 8022402:	607a      	str	r2, [r7, #4]
 8022404:	887a      	ldrh	r2, [r7, #2]
 8022406:	b2d2      	uxtb	r2, r2
 8022408:	701a      	strb	r2, [r3, #0]
 802240a:	887b      	ldrh	r3, [r7, #2]
 802240c:	0a1b      	lsrs	r3, r3, #8
 802240e:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8022410:	687b      	ldr	r3, [r7, #4]
 8022412:	1c5a      	adds	r2, r3, #1
 8022414:	607a      	str	r2, [r7, #4]
 8022416:	887a      	ldrh	r2, [r7, #2]
 8022418:	b2d2      	uxtb	r2, r2
 802241a:	701a      	strb	r2, [r3, #0]
}
 802241c:	bf00      	nop
 802241e:	370c      	adds	r7, #12
 8022420:	46bd      	mov	sp, r7
 8022422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022426:	4770      	bx	lr

08022428 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8022428:	b480      	push	{r7}
 802242a:	b083      	sub	sp, #12
 802242c:	af00      	add	r7, sp, #0
 802242e:	6078      	str	r0, [r7, #4]
 8022430:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8022432:	687b      	ldr	r3, [r7, #4]
 8022434:	1c5a      	adds	r2, r3, #1
 8022436:	607a      	str	r2, [r7, #4]
 8022438:	683a      	ldr	r2, [r7, #0]
 802243a:	b2d2      	uxtb	r2, r2
 802243c:	701a      	strb	r2, [r3, #0]
 802243e:	683b      	ldr	r3, [r7, #0]
 8022440:	0a1b      	lsrs	r3, r3, #8
 8022442:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8022444:	687b      	ldr	r3, [r7, #4]
 8022446:	1c5a      	adds	r2, r3, #1
 8022448:	607a      	str	r2, [r7, #4]
 802244a:	683a      	ldr	r2, [r7, #0]
 802244c:	b2d2      	uxtb	r2, r2
 802244e:	701a      	strb	r2, [r3, #0]
 8022450:	683b      	ldr	r3, [r7, #0]
 8022452:	0a1b      	lsrs	r3, r3, #8
 8022454:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8022456:	687b      	ldr	r3, [r7, #4]
 8022458:	1c5a      	adds	r2, r3, #1
 802245a:	607a      	str	r2, [r7, #4]
 802245c:	683a      	ldr	r2, [r7, #0]
 802245e:	b2d2      	uxtb	r2, r2
 8022460:	701a      	strb	r2, [r3, #0]
 8022462:	683b      	ldr	r3, [r7, #0]
 8022464:	0a1b      	lsrs	r3, r3, #8
 8022466:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8022468:	687b      	ldr	r3, [r7, #4]
 802246a:	1c5a      	adds	r2, r3, #1
 802246c:	607a      	str	r2, [r7, #4]
 802246e:	683a      	ldr	r2, [r7, #0]
 8022470:	b2d2      	uxtb	r2, r2
 8022472:	701a      	strb	r2, [r3, #0]
}
 8022474:	bf00      	nop
 8022476:	370c      	adds	r7, #12
 8022478:	46bd      	mov	sp, r7
 802247a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802247e:	4770      	bx	lr

08022480 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8022480:	b480      	push	{r7}
 8022482:	b087      	sub	sp, #28
 8022484:	af00      	add	r7, sp, #0
 8022486:	60f8      	str	r0, [r7, #12]
 8022488:	60b9      	str	r1, [r7, #8]
 802248a:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 802248c:	68fb      	ldr	r3, [r7, #12]
 802248e:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8022490:	68bb      	ldr	r3, [r7, #8]
 8022492:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8022494:	687b      	ldr	r3, [r7, #4]
 8022496:	2b00      	cmp	r3, #0
 8022498:	d00d      	beq.n	80224b6 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 802249a:	693a      	ldr	r2, [r7, #16]
 802249c:	1c53      	adds	r3, r2, #1
 802249e:	613b      	str	r3, [r7, #16]
 80224a0:	697b      	ldr	r3, [r7, #20]
 80224a2:	1c59      	adds	r1, r3, #1
 80224a4:	6179      	str	r1, [r7, #20]
 80224a6:	7812      	ldrb	r2, [r2, #0]
 80224a8:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 80224aa:	687b      	ldr	r3, [r7, #4]
 80224ac:	3b01      	subs	r3, #1
 80224ae:	607b      	str	r3, [r7, #4]
 80224b0:	687b      	ldr	r3, [r7, #4]
 80224b2:	2b00      	cmp	r3, #0
 80224b4:	d1f1      	bne.n	802249a <mem_cpy+0x1a>
	}
}
 80224b6:	bf00      	nop
 80224b8:	371c      	adds	r7, #28
 80224ba:	46bd      	mov	sp, r7
 80224bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80224c0:	4770      	bx	lr

080224c2 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 80224c2:	b480      	push	{r7}
 80224c4:	b087      	sub	sp, #28
 80224c6:	af00      	add	r7, sp, #0
 80224c8:	60f8      	str	r0, [r7, #12]
 80224ca:	60b9      	str	r1, [r7, #8]
 80224cc:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 80224ce:	68fb      	ldr	r3, [r7, #12]
 80224d0:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 80224d2:	697b      	ldr	r3, [r7, #20]
 80224d4:	1c5a      	adds	r2, r3, #1
 80224d6:	617a      	str	r2, [r7, #20]
 80224d8:	68ba      	ldr	r2, [r7, #8]
 80224da:	b2d2      	uxtb	r2, r2
 80224dc:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 80224de:	687b      	ldr	r3, [r7, #4]
 80224e0:	3b01      	subs	r3, #1
 80224e2:	607b      	str	r3, [r7, #4]
 80224e4:	687b      	ldr	r3, [r7, #4]
 80224e6:	2b00      	cmp	r3, #0
 80224e8:	d1f3      	bne.n	80224d2 <mem_set+0x10>
}
 80224ea:	bf00      	nop
 80224ec:	bf00      	nop
 80224ee:	371c      	adds	r7, #28
 80224f0:	46bd      	mov	sp, r7
 80224f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80224f6:	4770      	bx	lr

080224f8 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 80224f8:	b480      	push	{r7}
 80224fa:	b089      	sub	sp, #36	; 0x24
 80224fc:	af00      	add	r7, sp, #0
 80224fe:	60f8      	str	r0, [r7, #12]
 8022500:	60b9      	str	r1, [r7, #8]
 8022502:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8022504:	68fb      	ldr	r3, [r7, #12]
 8022506:	61fb      	str	r3, [r7, #28]
 8022508:	68bb      	ldr	r3, [r7, #8]
 802250a:	61bb      	str	r3, [r7, #24]
	int r = 0;
 802250c:	2300      	movs	r3, #0
 802250e:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8022510:	69fb      	ldr	r3, [r7, #28]
 8022512:	1c5a      	adds	r2, r3, #1
 8022514:	61fa      	str	r2, [r7, #28]
 8022516:	781b      	ldrb	r3, [r3, #0]
 8022518:	4619      	mov	r1, r3
 802251a:	69bb      	ldr	r3, [r7, #24]
 802251c:	1c5a      	adds	r2, r3, #1
 802251e:	61ba      	str	r2, [r7, #24]
 8022520:	781b      	ldrb	r3, [r3, #0]
 8022522:	1acb      	subs	r3, r1, r3
 8022524:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 8022526:	687b      	ldr	r3, [r7, #4]
 8022528:	3b01      	subs	r3, #1
 802252a:	607b      	str	r3, [r7, #4]
 802252c:	687b      	ldr	r3, [r7, #4]
 802252e:	2b00      	cmp	r3, #0
 8022530:	d002      	beq.n	8022538 <mem_cmp+0x40>
 8022532:	697b      	ldr	r3, [r7, #20]
 8022534:	2b00      	cmp	r3, #0
 8022536:	d0eb      	beq.n	8022510 <mem_cmp+0x18>

	return r;
 8022538:	697b      	ldr	r3, [r7, #20]
}
 802253a:	4618      	mov	r0, r3
 802253c:	3724      	adds	r7, #36	; 0x24
 802253e:	46bd      	mov	sp, r7
 8022540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022544:	4770      	bx	lr

08022546 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 8022546:	b480      	push	{r7}
 8022548:	b083      	sub	sp, #12
 802254a:	af00      	add	r7, sp, #0
 802254c:	6078      	str	r0, [r7, #4]
 802254e:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8022550:	e002      	b.n	8022558 <chk_chr+0x12>
 8022552:	687b      	ldr	r3, [r7, #4]
 8022554:	3301      	adds	r3, #1
 8022556:	607b      	str	r3, [r7, #4]
 8022558:	687b      	ldr	r3, [r7, #4]
 802255a:	781b      	ldrb	r3, [r3, #0]
 802255c:	2b00      	cmp	r3, #0
 802255e:	d005      	beq.n	802256c <chk_chr+0x26>
 8022560:	687b      	ldr	r3, [r7, #4]
 8022562:	781b      	ldrb	r3, [r3, #0]
 8022564:	461a      	mov	r2, r3
 8022566:	683b      	ldr	r3, [r7, #0]
 8022568:	4293      	cmp	r3, r2
 802256a:	d1f2      	bne.n	8022552 <chk_chr+0xc>
	return *str;
 802256c:	687b      	ldr	r3, [r7, #4]
 802256e:	781b      	ldrb	r3, [r3, #0]
}
 8022570:	4618      	mov	r0, r3
 8022572:	370c      	adds	r7, #12
 8022574:	46bd      	mov	sp, r7
 8022576:	f85d 7b04 	ldr.w	r7, [sp], #4
 802257a:	4770      	bx	lr

0802257c <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 802257c:	b480      	push	{r7}
 802257e:	b085      	sub	sp, #20
 8022580:	af00      	add	r7, sp, #0
 8022582:	6078      	str	r0, [r7, #4]
 8022584:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8022586:	2300      	movs	r3, #0
 8022588:	60bb      	str	r3, [r7, #8]
 802258a:	68bb      	ldr	r3, [r7, #8]
 802258c:	60fb      	str	r3, [r7, #12]
 802258e:	e029      	b.n	80225e4 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8022590:	4a27      	ldr	r2, [pc, #156]	; (8022630 <chk_lock+0xb4>)
 8022592:	68fb      	ldr	r3, [r7, #12]
 8022594:	011b      	lsls	r3, r3, #4
 8022596:	4413      	add	r3, r2
 8022598:	681b      	ldr	r3, [r3, #0]
 802259a:	2b00      	cmp	r3, #0
 802259c:	d01d      	beq.n	80225da <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 802259e:	4a24      	ldr	r2, [pc, #144]	; (8022630 <chk_lock+0xb4>)
 80225a0:	68fb      	ldr	r3, [r7, #12]
 80225a2:	011b      	lsls	r3, r3, #4
 80225a4:	4413      	add	r3, r2
 80225a6:	681a      	ldr	r2, [r3, #0]
 80225a8:	687b      	ldr	r3, [r7, #4]
 80225aa:	681b      	ldr	r3, [r3, #0]
 80225ac:	429a      	cmp	r2, r3
 80225ae:	d116      	bne.n	80225de <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 80225b0:	4a1f      	ldr	r2, [pc, #124]	; (8022630 <chk_lock+0xb4>)
 80225b2:	68fb      	ldr	r3, [r7, #12]
 80225b4:	011b      	lsls	r3, r3, #4
 80225b6:	4413      	add	r3, r2
 80225b8:	3304      	adds	r3, #4
 80225ba:	681a      	ldr	r2, [r3, #0]
 80225bc:	687b      	ldr	r3, [r7, #4]
 80225be:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 80225c0:	429a      	cmp	r2, r3
 80225c2:	d10c      	bne.n	80225de <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 80225c4:	4a1a      	ldr	r2, [pc, #104]	; (8022630 <chk_lock+0xb4>)
 80225c6:	68fb      	ldr	r3, [r7, #12]
 80225c8:	011b      	lsls	r3, r3, #4
 80225ca:	4413      	add	r3, r2
 80225cc:	3308      	adds	r3, #8
 80225ce:	681a      	ldr	r2, [r3, #0]
 80225d0:	687b      	ldr	r3, [r7, #4]
 80225d2:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 80225d4:	429a      	cmp	r2, r3
 80225d6:	d102      	bne.n	80225de <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 80225d8:	e007      	b.n	80225ea <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 80225da:	2301      	movs	r3, #1
 80225dc:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 80225de:	68fb      	ldr	r3, [r7, #12]
 80225e0:	3301      	adds	r3, #1
 80225e2:	60fb      	str	r3, [r7, #12]
 80225e4:	68fb      	ldr	r3, [r7, #12]
 80225e6:	2b01      	cmp	r3, #1
 80225e8:	d9d2      	bls.n	8022590 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 80225ea:	68fb      	ldr	r3, [r7, #12]
 80225ec:	2b02      	cmp	r3, #2
 80225ee:	d109      	bne.n	8022604 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 80225f0:	68bb      	ldr	r3, [r7, #8]
 80225f2:	2b00      	cmp	r3, #0
 80225f4:	d102      	bne.n	80225fc <chk_lock+0x80>
 80225f6:	683b      	ldr	r3, [r7, #0]
 80225f8:	2b02      	cmp	r3, #2
 80225fa:	d101      	bne.n	8022600 <chk_lock+0x84>
 80225fc:	2300      	movs	r3, #0
 80225fe:	e010      	b.n	8022622 <chk_lock+0xa6>
 8022600:	2312      	movs	r3, #18
 8022602:	e00e      	b.n	8022622 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8022604:	683b      	ldr	r3, [r7, #0]
 8022606:	2b00      	cmp	r3, #0
 8022608:	d108      	bne.n	802261c <chk_lock+0xa0>
 802260a:	4a09      	ldr	r2, [pc, #36]	; (8022630 <chk_lock+0xb4>)
 802260c:	68fb      	ldr	r3, [r7, #12]
 802260e:	011b      	lsls	r3, r3, #4
 8022610:	4413      	add	r3, r2
 8022612:	330c      	adds	r3, #12
 8022614:	881b      	ldrh	r3, [r3, #0]
 8022616:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 802261a:	d101      	bne.n	8022620 <chk_lock+0xa4>
 802261c:	2310      	movs	r3, #16
 802261e:	e000      	b.n	8022622 <chk_lock+0xa6>
 8022620:	2300      	movs	r3, #0
}
 8022622:	4618      	mov	r0, r3
 8022624:	3714      	adds	r7, #20
 8022626:	46bd      	mov	sp, r7
 8022628:	f85d 7b04 	ldr.w	r7, [sp], #4
 802262c:	4770      	bx	lr
 802262e:	bf00      	nop
 8022630:	200007b4 	.word	0x200007b4

08022634 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8022634:	b480      	push	{r7}
 8022636:	b083      	sub	sp, #12
 8022638:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 802263a:	2300      	movs	r3, #0
 802263c:	607b      	str	r3, [r7, #4]
 802263e:	e002      	b.n	8022646 <enq_lock+0x12>
 8022640:	687b      	ldr	r3, [r7, #4]
 8022642:	3301      	adds	r3, #1
 8022644:	607b      	str	r3, [r7, #4]
 8022646:	687b      	ldr	r3, [r7, #4]
 8022648:	2b01      	cmp	r3, #1
 802264a:	d806      	bhi.n	802265a <enq_lock+0x26>
 802264c:	4a09      	ldr	r2, [pc, #36]	; (8022674 <enq_lock+0x40>)
 802264e:	687b      	ldr	r3, [r7, #4]
 8022650:	011b      	lsls	r3, r3, #4
 8022652:	4413      	add	r3, r2
 8022654:	681b      	ldr	r3, [r3, #0]
 8022656:	2b00      	cmp	r3, #0
 8022658:	d1f2      	bne.n	8022640 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 802265a:	687b      	ldr	r3, [r7, #4]
 802265c:	2b02      	cmp	r3, #2
 802265e:	bf14      	ite	ne
 8022660:	2301      	movne	r3, #1
 8022662:	2300      	moveq	r3, #0
 8022664:	b2db      	uxtb	r3, r3
}
 8022666:	4618      	mov	r0, r3
 8022668:	370c      	adds	r7, #12
 802266a:	46bd      	mov	sp, r7
 802266c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022670:	4770      	bx	lr
 8022672:	bf00      	nop
 8022674:	200007b4 	.word	0x200007b4

08022678 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8022678:	b480      	push	{r7}
 802267a:	b085      	sub	sp, #20
 802267c:	af00      	add	r7, sp, #0
 802267e:	6078      	str	r0, [r7, #4]
 8022680:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8022682:	2300      	movs	r3, #0
 8022684:	60fb      	str	r3, [r7, #12]
 8022686:	e01f      	b.n	80226c8 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 8022688:	4a41      	ldr	r2, [pc, #260]	; (8022790 <inc_lock+0x118>)
 802268a:	68fb      	ldr	r3, [r7, #12]
 802268c:	011b      	lsls	r3, r3, #4
 802268e:	4413      	add	r3, r2
 8022690:	681a      	ldr	r2, [r3, #0]
 8022692:	687b      	ldr	r3, [r7, #4]
 8022694:	681b      	ldr	r3, [r3, #0]
 8022696:	429a      	cmp	r2, r3
 8022698:	d113      	bne.n	80226c2 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 802269a:	4a3d      	ldr	r2, [pc, #244]	; (8022790 <inc_lock+0x118>)
 802269c:	68fb      	ldr	r3, [r7, #12]
 802269e:	011b      	lsls	r3, r3, #4
 80226a0:	4413      	add	r3, r2
 80226a2:	3304      	adds	r3, #4
 80226a4:	681a      	ldr	r2, [r3, #0]
 80226a6:	687b      	ldr	r3, [r7, #4]
 80226a8:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 80226aa:	429a      	cmp	r2, r3
 80226ac:	d109      	bne.n	80226c2 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 80226ae:	4a38      	ldr	r2, [pc, #224]	; (8022790 <inc_lock+0x118>)
 80226b0:	68fb      	ldr	r3, [r7, #12]
 80226b2:	011b      	lsls	r3, r3, #4
 80226b4:	4413      	add	r3, r2
 80226b6:	3308      	adds	r3, #8
 80226b8:	681a      	ldr	r2, [r3, #0]
 80226ba:	687b      	ldr	r3, [r7, #4]
 80226bc:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 80226be:	429a      	cmp	r2, r3
 80226c0:	d006      	beq.n	80226d0 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 80226c2:	68fb      	ldr	r3, [r7, #12]
 80226c4:	3301      	adds	r3, #1
 80226c6:	60fb      	str	r3, [r7, #12]
 80226c8:	68fb      	ldr	r3, [r7, #12]
 80226ca:	2b01      	cmp	r3, #1
 80226cc:	d9dc      	bls.n	8022688 <inc_lock+0x10>
 80226ce:	e000      	b.n	80226d2 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 80226d0:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 80226d2:	68fb      	ldr	r3, [r7, #12]
 80226d4:	2b02      	cmp	r3, #2
 80226d6:	d132      	bne.n	802273e <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 80226d8:	2300      	movs	r3, #0
 80226da:	60fb      	str	r3, [r7, #12]
 80226dc:	e002      	b.n	80226e4 <inc_lock+0x6c>
 80226de:	68fb      	ldr	r3, [r7, #12]
 80226e0:	3301      	adds	r3, #1
 80226e2:	60fb      	str	r3, [r7, #12]
 80226e4:	68fb      	ldr	r3, [r7, #12]
 80226e6:	2b01      	cmp	r3, #1
 80226e8:	d806      	bhi.n	80226f8 <inc_lock+0x80>
 80226ea:	4a29      	ldr	r2, [pc, #164]	; (8022790 <inc_lock+0x118>)
 80226ec:	68fb      	ldr	r3, [r7, #12]
 80226ee:	011b      	lsls	r3, r3, #4
 80226f0:	4413      	add	r3, r2
 80226f2:	681b      	ldr	r3, [r3, #0]
 80226f4:	2b00      	cmp	r3, #0
 80226f6:	d1f2      	bne.n	80226de <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 80226f8:	68fb      	ldr	r3, [r7, #12]
 80226fa:	2b02      	cmp	r3, #2
 80226fc:	d101      	bne.n	8022702 <inc_lock+0x8a>
 80226fe:	2300      	movs	r3, #0
 8022700:	e040      	b.n	8022784 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 8022702:	687b      	ldr	r3, [r7, #4]
 8022704:	681a      	ldr	r2, [r3, #0]
 8022706:	4922      	ldr	r1, [pc, #136]	; (8022790 <inc_lock+0x118>)
 8022708:	68fb      	ldr	r3, [r7, #12]
 802270a:	011b      	lsls	r3, r3, #4
 802270c:	440b      	add	r3, r1
 802270e:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8022710:	687b      	ldr	r3, [r7, #4]
 8022712:	689a      	ldr	r2, [r3, #8]
 8022714:	491e      	ldr	r1, [pc, #120]	; (8022790 <inc_lock+0x118>)
 8022716:	68fb      	ldr	r3, [r7, #12]
 8022718:	011b      	lsls	r3, r3, #4
 802271a:	440b      	add	r3, r1
 802271c:	3304      	adds	r3, #4
 802271e:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8022720:	687b      	ldr	r3, [r7, #4]
 8022722:	695a      	ldr	r2, [r3, #20]
 8022724:	491a      	ldr	r1, [pc, #104]	; (8022790 <inc_lock+0x118>)
 8022726:	68fb      	ldr	r3, [r7, #12]
 8022728:	011b      	lsls	r3, r3, #4
 802272a:	440b      	add	r3, r1
 802272c:	3308      	adds	r3, #8
 802272e:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8022730:	4a17      	ldr	r2, [pc, #92]	; (8022790 <inc_lock+0x118>)
 8022732:	68fb      	ldr	r3, [r7, #12]
 8022734:	011b      	lsls	r3, r3, #4
 8022736:	4413      	add	r3, r2
 8022738:	330c      	adds	r3, #12
 802273a:	2200      	movs	r2, #0
 802273c:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 802273e:	683b      	ldr	r3, [r7, #0]
 8022740:	2b00      	cmp	r3, #0
 8022742:	d009      	beq.n	8022758 <inc_lock+0xe0>
 8022744:	4a12      	ldr	r2, [pc, #72]	; (8022790 <inc_lock+0x118>)
 8022746:	68fb      	ldr	r3, [r7, #12]
 8022748:	011b      	lsls	r3, r3, #4
 802274a:	4413      	add	r3, r2
 802274c:	330c      	adds	r3, #12
 802274e:	881b      	ldrh	r3, [r3, #0]
 8022750:	2b00      	cmp	r3, #0
 8022752:	d001      	beq.n	8022758 <inc_lock+0xe0>
 8022754:	2300      	movs	r3, #0
 8022756:	e015      	b.n	8022784 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8022758:	683b      	ldr	r3, [r7, #0]
 802275a:	2b00      	cmp	r3, #0
 802275c:	d108      	bne.n	8022770 <inc_lock+0xf8>
 802275e:	4a0c      	ldr	r2, [pc, #48]	; (8022790 <inc_lock+0x118>)
 8022760:	68fb      	ldr	r3, [r7, #12]
 8022762:	011b      	lsls	r3, r3, #4
 8022764:	4413      	add	r3, r2
 8022766:	330c      	adds	r3, #12
 8022768:	881b      	ldrh	r3, [r3, #0]
 802276a:	3301      	adds	r3, #1
 802276c:	b29a      	uxth	r2, r3
 802276e:	e001      	b.n	8022774 <inc_lock+0xfc>
 8022770:	f44f 7280 	mov.w	r2, #256	; 0x100
 8022774:	4906      	ldr	r1, [pc, #24]	; (8022790 <inc_lock+0x118>)
 8022776:	68fb      	ldr	r3, [r7, #12]
 8022778:	011b      	lsls	r3, r3, #4
 802277a:	440b      	add	r3, r1
 802277c:	330c      	adds	r3, #12
 802277e:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8022780:	68fb      	ldr	r3, [r7, #12]
 8022782:	3301      	adds	r3, #1
}
 8022784:	4618      	mov	r0, r3
 8022786:	3714      	adds	r7, #20
 8022788:	46bd      	mov	sp, r7
 802278a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802278e:	4770      	bx	lr
 8022790:	200007b4 	.word	0x200007b4

08022794 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8022794:	b480      	push	{r7}
 8022796:	b085      	sub	sp, #20
 8022798:	af00      	add	r7, sp, #0
 802279a:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 802279c:	687b      	ldr	r3, [r7, #4]
 802279e:	3b01      	subs	r3, #1
 80227a0:	607b      	str	r3, [r7, #4]
 80227a2:	687b      	ldr	r3, [r7, #4]
 80227a4:	2b01      	cmp	r3, #1
 80227a6:	d825      	bhi.n	80227f4 <dec_lock+0x60>
		n = Files[i].ctr;
 80227a8:	4a17      	ldr	r2, [pc, #92]	; (8022808 <dec_lock+0x74>)
 80227aa:	687b      	ldr	r3, [r7, #4]
 80227ac:	011b      	lsls	r3, r3, #4
 80227ae:	4413      	add	r3, r2
 80227b0:	330c      	adds	r3, #12
 80227b2:	881b      	ldrh	r3, [r3, #0]
 80227b4:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 80227b6:	89fb      	ldrh	r3, [r7, #14]
 80227b8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80227bc:	d101      	bne.n	80227c2 <dec_lock+0x2e>
 80227be:	2300      	movs	r3, #0
 80227c0:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 80227c2:	89fb      	ldrh	r3, [r7, #14]
 80227c4:	2b00      	cmp	r3, #0
 80227c6:	d002      	beq.n	80227ce <dec_lock+0x3a>
 80227c8:	89fb      	ldrh	r3, [r7, #14]
 80227ca:	3b01      	subs	r3, #1
 80227cc:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 80227ce:	4a0e      	ldr	r2, [pc, #56]	; (8022808 <dec_lock+0x74>)
 80227d0:	687b      	ldr	r3, [r7, #4]
 80227d2:	011b      	lsls	r3, r3, #4
 80227d4:	4413      	add	r3, r2
 80227d6:	330c      	adds	r3, #12
 80227d8:	89fa      	ldrh	r2, [r7, #14]
 80227da:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 80227dc:	89fb      	ldrh	r3, [r7, #14]
 80227de:	2b00      	cmp	r3, #0
 80227e0:	d105      	bne.n	80227ee <dec_lock+0x5a>
 80227e2:	4a09      	ldr	r2, [pc, #36]	; (8022808 <dec_lock+0x74>)
 80227e4:	687b      	ldr	r3, [r7, #4]
 80227e6:	011b      	lsls	r3, r3, #4
 80227e8:	4413      	add	r3, r2
 80227ea:	2200      	movs	r2, #0
 80227ec:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 80227ee:	2300      	movs	r3, #0
 80227f0:	737b      	strb	r3, [r7, #13]
 80227f2:	e001      	b.n	80227f8 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 80227f4:	2302      	movs	r3, #2
 80227f6:	737b      	strb	r3, [r7, #13]
	}
	return res;
 80227f8:	7b7b      	ldrb	r3, [r7, #13]
}
 80227fa:	4618      	mov	r0, r3
 80227fc:	3714      	adds	r7, #20
 80227fe:	46bd      	mov	sp, r7
 8022800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022804:	4770      	bx	lr
 8022806:	bf00      	nop
 8022808:	200007b4 	.word	0x200007b4

0802280c <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 802280c:	b480      	push	{r7}
 802280e:	b085      	sub	sp, #20
 8022810:	af00      	add	r7, sp, #0
 8022812:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8022814:	2300      	movs	r3, #0
 8022816:	60fb      	str	r3, [r7, #12]
 8022818:	e010      	b.n	802283c <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 802281a:	4a0d      	ldr	r2, [pc, #52]	; (8022850 <clear_lock+0x44>)
 802281c:	68fb      	ldr	r3, [r7, #12]
 802281e:	011b      	lsls	r3, r3, #4
 8022820:	4413      	add	r3, r2
 8022822:	681b      	ldr	r3, [r3, #0]
 8022824:	687a      	ldr	r2, [r7, #4]
 8022826:	429a      	cmp	r2, r3
 8022828:	d105      	bne.n	8022836 <clear_lock+0x2a>
 802282a:	4a09      	ldr	r2, [pc, #36]	; (8022850 <clear_lock+0x44>)
 802282c:	68fb      	ldr	r3, [r7, #12]
 802282e:	011b      	lsls	r3, r3, #4
 8022830:	4413      	add	r3, r2
 8022832:	2200      	movs	r2, #0
 8022834:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8022836:	68fb      	ldr	r3, [r7, #12]
 8022838:	3301      	adds	r3, #1
 802283a:	60fb      	str	r3, [r7, #12]
 802283c:	68fb      	ldr	r3, [r7, #12]
 802283e:	2b01      	cmp	r3, #1
 8022840:	d9eb      	bls.n	802281a <clear_lock+0xe>
	}
}
 8022842:	bf00      	nop
 8022844:	bf00      	nop
 8022846:	3714      	adds	r7, #20
 8022848:	46bd      	mov	sp, r7
 802284a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802284e:	4770      	bx	lr
 8022850:	200007b4 	.word	0x200007b4

08022854 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8022854:	b580      	push	{r7, lr}
 8022856:	b086      	sub	sp, #24
 8022858:	af00      	add	r7, sp, #0
 802285a:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 802285c:	2300      	movs	r3, #0
 802285e:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8022860:	687b      	ldr	r3, [r7, #4]
 8022862:	78db      	ldrb	r3, [r3, #3]
 8022864:	2b00      	cmp	r3, #0
 8022866:	d034      	beq.n	80228d2 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8022868:	687b      	ldr	r3, [r7, #4]
 802286a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 802286c:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 802286e:	687b      	ldr	r3, [r7, #4]
 8022870:	7858      	ldrb	r0, [r3, #1]
 8022872:	687b      	ldr	r3, [r7, #4]
 8022874:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8022878:	2301      	movs	r3, #1
 802287a:	697a      	ldr	r2, [r7, #20]
 802287c:	f7ff fd40 	bl	8022300 <disk_write>
 8022880:	4603      	mov	r3, r0
 8022882:	2b00      	cmp	r3, #0
 8022884:	d002      	beq.n	802288c <sync_window+0x38>
			res = FR_DISK_ERR;
 8022886:	2301      	movs	r3, #1
 8022888:	73fb      	strb	r3, [r7, #15]
 802288a:	e022      	b.n	80228d2 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 802288c:	687b      	ldr	r3, [r7, #4]
 802288e:	2200      	movs	r2, #0
 8022890:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8022892:	687b      	ldr	r3, [r7, #4]
 8022894:	6a1b      	ldr	r3, [r3, #32]
 8022896:	697a      	ldr	r2, [r7, #20]
 8022898:	1ad2      	subs	r2, r2, r3
 802289a:	687b      	ldr	r3, [r7, #4]
 802289c:	699b      	ldr	r3, [r3, #24]
 802289e:	429a      	cmp	r2, r3
 80228a0:	d217      	bcs.n	80228d2 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80228a2:	687b      	ldr	r3, [r7, #4]
 80228a4:	789b      	ldrb	r3, [r3, #2]
 80228a6:	613b      	str	r3, [r7, #16]
 80228a8:	e010      	b.n	80228cc <sync_window+0x78>
					wsect += fs->fsize;
 80228aa:	687b      	ldr	r3, [r7, #4]
 80228ac:	699b      	ldr	r3, [r3, #24]
 80228ae:	697a      	ldr	r2, [r7, #20]
 80228b0:	4413      	add	r3, r2
 80228b2:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 80228b4:	687b      	ldr	r3, [r7, #4]
 80228b6:	7858      	ldrb	r0, [r3, #1]
 80228b8:	687b      	ldr	r3, [r7, #4]
 80228ba:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80228be:	2301      	movs	r3, #1
 80228c0:	697a      	ldr	r2, [r7, #20]
 80228c2:	f7ff fd1d 	bl	8022300 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80228c6:	693b      	ldr	r3, [r7, #16]
 80228c8:	3b01      	subs	r3, #1
 80228ca:	613b      	str	r3, [r7, #16]
 80228cc:	693b      	ldr	r3, [r7, #16]
 80228ce:	2b01      	cmp	r3, #1
 80228d0:	d8eb      	bhi.n	80228aa <sync_window+0x56>
				}
			}
		}
	}
	return res;
 80228d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80228d4:	4618      	mov	r0, r3
 80228d6:	3718      	adds	r7, #24
 80228d8:	46bd      	mov	sp, r7
 80228da:	bd80      	pop	{r7, pc}

080228dc <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 80228dc:	b580      	push	{r7, lr}
 80228de:	b084      	sub	sp, #16
 80228e0:	af00      	add	r7, sp, #0
 80228e2:	6078      	str	r0, [r7, #4]
 80228e4:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 80228e6:	2300      	movs	r3, #0
 80228e8:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 80228ea:	687b      	ldr	r3, [r7, #4]
 80228ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80228ee:	683a      	ldr	r2, [r7, #0]
 80228f0:	429a      	cmp	r2, r3
 80228f2:	d01b      	beq.n	802292c <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 80228f4:	6878      	ldr	r0, [r7, #4]
 80228f6:	f7ff ffad 	bl	8022854 <sync_window>
 80228fa:	4603      	mov	r3, r0
 80228fc:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 80228fe:	7bfb      	ldrb	r3, [r7, #15]
 8022900:	2b00      	cmp	r3, #0
 8022902:	d113      	bne.n	802292c <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8022904:	687b      	ldr	r3, [r7, #4]
 8022906:	7858      	ldrb	r0, [r3, #1]
 8022908:	687b      	ldr	r3, [r7, #4]
 802290a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 802290e:	2301      	movs	r3, #1
 8022910:	683a      	ldr	r2, [r7, #0]
 8022912:	f7ff fcd5 	bl	80222c0 <disk_read>
 8022916:	4603      	mov	r3, r0
 8022918:	2b00      	cmp	r3, #0
 802291a:	d004      	beq.n	8022926 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 802291c:	f04f 33ff 	mov.w	r3, #4294967295
 8022920:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8022922:	2301      	movs	r3, #1
 8022924:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8022926:	687b      	ldr	r3, [r7, #4]
 8022928:	683a      	ldr	r2, [r7, #0]
 802292a:	62da      	str	r2, [r3, #44]	; 0x2c
		}
	}
	return res;
 802292c:	7bfb      	ldrb	r3, [r7, #15]
}
 802292e:	4618      	mov	r0, r3
 8022930:	3710      	adds	r7, #16
 8022932:	46bd      	mov	sp, r7
 8022934:	bd80      	pop	{r7, pc}
	...

08022938 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8022938:	b580      	push	{r7, lr}
 802293a:	b084      	sub	sp, #16
 802293c:	af00      	add	r7, sp, #0
 802293e:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8022940:	6878      	ldr	r0, [r7, #4]
 8022942:	f7ff ff87 	bl	8022854 <sync_window>
 8022946:	4603      	mov	r3, r0
 8022948:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 802294a:	7bfb      	ldrb	r3, [r7, #15]
 802294c:	2b00      	cmp	r3, #0
 802294e:	d158      	bne.n	8022a02 <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8022950:	687b      	ldr	r3, [r7, #4]
 8022952:	781b      	ldrb	r3, [r3, #0]
 8022954:	2b03      	cmp	r3, #3
 8022956:	d148      	bne.n	80229ea <sync_fs+0xb2>
 8022958:	687b      	ldr	r3, [r7, #4]
 802295a:	791b      	ldrb	r3, [r3, #4]
 802295c:	2b01      	cmp	r3, #1
 802295e:	d144      	bne.n	80229ea <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8022960:	687b      	ldr	r3, [r7, #4]
 8022962:	3330      	adds	r3, #48	; 0x30
 8022964:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8022968:	2100      	movs	r1, #0
 802296a:	4618      	mov	r0, r3
 802296c:	f7ff fda9 	bl	80224c2 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8022970:	687b      	ldr	r3, [r7, #4]
 8022972:	3330      	adds	r3, #48	; 0x30
 8022974:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8022978:	f64a 2155 	movw	r1, #43605	; 0xaa55
 802297c:	4618      	mov	r0, r3
 802297e:	f7ff fd38 	bl	80223f2 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 8022982:	687b      	ldr	r3, [r7, #4]
 8022984:	3330      	adds	r3, #48	; 0x30
 8022986:	4921      	ldr	r1, [pc, #132]	; (8022a0c <sync_fs+0xd4>)
 8022988:	4618      	mov	r0, r3
 802298a:	f7ff fd4d 	bl	8022428 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 802298e:	687b      	ldr	r3, [r7, #4]
 8022990:	3330      	adds	r3, #48	; 0x30
 8022992:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8022996:	491e      	ldr	r1, [pc, #120]	; (8022a10 <sync_fs+0xd8>)
 8022998:	4618      	mov	r0, r3
 802299a:	f7ff fd45 	bl	8022428 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 802299e:	687b      	ldr	r3, [r7, #4]
 80229a0:	3330      	adds	r3, #48	; 0x30
 80229a2:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 80229a6:	687b      	ldr	r3, [r7, #4]
 80229a8:	691b      	ldr	r3, [r3, #16]
 80229aa:	4619      	mov	r1, r3
 80229ac:	4610      	mov	r0, r2
 80229ae:	f7ff fd3b 	bl	8022428 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 80229b2:	687b      	ldr	r3, [r7, #4]
 80229b4:	3330      	adds	r3, #48	; 0x30
 80229b6:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 80229ba:	687b      	ldr	r3, [r7, #4]
 80229bc:	68db      	ldr	r3, [r3, #12]
 80229be:	4619      	mov	r1, r3
 80229c0:	4610      	mov	r0, r2
 80229c2:	f7ff fd31 	bl	8022428 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 80229c6:	687b      	ldr	r3, [r7, #4]
 80229c8:	69db      	ldr	r3, [r3, #28]
 80229ca:	1c5a      	adds	r2, r3, #1
 80229cc:	687b      	ldr	r3, [r7, #4]
 80229ce:	62da      	str	r2, [r3, #44]	; 0x2c
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 80229d0:	687b      	ldr	r3, [r7, #4]
 80229d2:	7858      	ldrb	r0, [r3, #1]
 80229d4:	687b      	ldr	r3, [r7, #4]
 80229d6:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80229da:	687b      	ldr	r3, [r7, #4]
 80229dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80229de:	2301      	movs	r3, #1
 80229e0:	f7ff fc8e 	bl	8022300 <disk_write>
			fs->fsi_flag = 0;
 80229e4:	687b      	ldr	r3, [r7, #4]
 80229e6:	2200      	movs	r2, #0
 80229e8:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 80229ea:	687b      	ldr	r3, [r7, #4]
 80229ec:	785b      	ldrb	r3, [r3, #1]
 80229ee:	2200      	movs	r2, #0
 80229f0:	2100      	movs	r1, #0
 80229f2:	4618      	mov	r0, r3
 80229f4:	f7ff fca4 	bl	8022340 <disk_ioctl>
 80229f8:	4603      	mov	r3, r0
 80229fa:	2b00      	cmp	r3, #0
 80229fc:	d001      	beq.n	8022a02 <sync_fs+0xca>
 80229fe:	2301      	movs	r3, #1
 8022a00:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8022a02:	7bfb      	ldrb	r3, [r7, #15]
}
 8022a04:	4618      	mov	r0, r3
 8022a06:	3710      	adds	r7, #16
 8022a08:	46bd      	mov	sp, r7
 8022a0a:	bd80      	pop	{r7, pc}
 8022a0c:	41615252 	.word	0x41615252
 8022a10:	61417272 	.word	0x61417272

08022a14 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8022a14:	b480      	push	{r7}
 8022a16:	b083      	sub	sp, #12
 8022a18:	af00      	add	r7, sp, #0
 8022a1a:	6078      	str	r0, [r7, #4]
 8022a1c:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8022a1e:	683b      	ldr	r3, [r7, #0]
 8022a20:	3b02      	subs	r3, #2
 8022a22:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8022a24:	687b      	ldr	r3, [r7, #4]
 8022a26:	695b      	ldr	r3, [r3, #20]
 8022a28:	3b02      	subs	r3, #2
 8022a2a:	683a      	ldr	r2, [r7, #0]
 8022a2c:	429a      	cmp	r2, r3
 8022a2e:	d301      	bcc.n	8022a34 <clust2sect+0x20>
 8022a30:	2300      	movs	r3, #0
 8022a32:	e008      	b.n	8022a46 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8022a34:	687b      	ldr	r3, [r7, #4]
 8022a36:	895b      	ldrh	r3, [r3, #10]
 8022a38:	461a      	mov	r2, r3
 8022a3a:	683b      	ldr	r3, [r7, #0]
 8022a3c:	fb03 f202 	mul.w	r2, r3, r2
 8022a40:	687b      	ldr	r3, [r7, #4]
 8022a42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8022a44:	4413      	add	r3, r2
}
 8022a46:	4618      	mov	r0, r3
 8022a48:	370c      	adds	r7, #12
 8022a4a:	46bd      	mov	sp, r7
 8022a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022a50:	4770      	bx	lr

08022a52 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 8022a52:	b580      	push	{r7, lr}
 8022a54:	b086      	sub	sp, #24
 8022a56:	af00      	add	r7, sp, #0
 8022a58:	6078      	str	r0, [r7, #4]
 8022a5a:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8022a5c:	687b      	ldr	r3, [r7, #4]
 8022a5e:	681b      	ldr	r3, [r3, #0]
 8022a60:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8022a62:	683b      	ldr	r3, [r7, #0]
 8022a64:	2b01      	cmp	r3, #1
 8022a66:	d904      	bls.n	8022a72 <get_fat+0x20>
 8022a68:	693b      	ldr	r3, [r7, #16]
 8022a6a:	695b      	ldr	r3, [r3, #20]
 8022a6c:	683a      	ldr	r2, [r7, #0]
 8022a6e:	429a      	cmp	r2, r3
 8022a70:	d302      	bcc.n	8022a78 <get_fat+0x26>
		val = 1;	/* Internal error */
 8022a72:	2301      	movs	r3, #1
 8022a74:	617b      	str	r3, [r7, #20]
 8022a76:	e091      	b.n	8022b9c <get_fat+0x14a>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8022a78:	f04f 33ff 	mov.w	r3, #4294967295
 8022a7c:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8022a7e:	693b      	ldr	r3, [r7, #16]
 8022a80:	781b      	ldrb	r3, [r3, #0]
 8022a82:	2b03      	cmp	r3, #3
 8022a84:	d063      	beq.n	8022b4e <get_fat+0xfc>
 8022a86:	2b03      	cmp	r3, #3
 8022a88:	dc7e      	bgt.n	8022b88 <get_fat+0x136>
 8022a8a:	2b01      	cmp	r3, #1
 8022a8c:	d002      	beq.n	8022a94 <get_fat+0x42>
 8022a8e:	2b02      	cmp	r3, #2
 8022a90:	d042      	beq.n	8022b18 <get_fat+0xc6>
 8022a92:	e079      	b.n	8022b88 <get_fat+0x136>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8022a94:	683b      	ldr	r3, [r7, #0]
 8022a96:	60fb      	str	r3, [r7, #12]
 8022a98:	68fb      	ldr	r3, [r7, #12]
 8022a9a:	085b      	lsrs	r3, r3, #1
 8022a9c:	68fa      	ldr	r2, [r7, #12]
 8022a9e:	4413      	add	r3, r2
 8022aa0:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8022aa2:	693b      	ldr	r3, [r7, #16]
 8022aa4:	6a1a      	ldr	r2, [r3, #32]
 8022aa6:	68fb      	ldr	r3, [r7, #12]
 8022aa8:	0b1b      	lsrs	r3, r3, #12
 8022aaa:	4413      	add	r3, r2
 8022aac:	4619      	mov	r1, r3
 8022aae:	6938      	ldr	r0, [r7, #16]
 8022ab0:	f7ff ff14 	bl	80228dc <move_window>
 8022ab4:	4603      	mov	r3, r0
 8022ab6:	2b00      	cmp	r3, #0
 8022ab8:	d169      	bne.n	8022b8e <get_fat+0x13c>
			wc = fs->win[bc++ % SS(fs)];
 8022aba:	68fb      	ldr	r3, [r7, #12]
 8022abc:	1c5a      	adds	r2, r3, #1
 8022abe:	60fa      	str	r2, [r7, #12]
 8022ac0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8022ac4:	693a      	ldr	r2, [r7, #16]
 8022ac6:	4413      	add	r3, r2
 8022ac8:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8022acc:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8022ace:	693b      	ldr	r3, [r7, #16]
 8022ad0:	6a1a      	ldr	r2, [r3, #32]
 8022ad2:	68fb      	ldr	r3, [r7, #12]
 8022ad4:	0b1b      	lsrs	r3, r3, #12
 8022ad6:	4413      	add	r3, r2
 8022ad8:	4619      	mov	r1, r3
 8022ada:	6938      	ldr	r0, [r7, #16]
 8022adc:	f7ff fefe 	bl	80228dc <move_window>
 8022ae0:	4603      	mov	r3, r0
 8022ae2:	2b00      	cmp	r3, #0
 8022ae4:	d155      	bne.n	8022b92 <get_fat+0x140>
			wc |= fs->win[bc % SS(fs)] << 8;
 8022ae6:	68fb      	ldr	r3, [r7, #12]
 8022ae8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8022aec:	693a      	ldr	r2, [r7, #16]
 8022aee:	4413      	add	r3, r2
 8022af0:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8022af4:	021b      	lsls	r3, r3, #8
 8022af6:	461a      	mov	r2, r3
 8022af8:	68bb      	ldr	r3, [r7, #8]
 8022afa:	4313      	orrs	r3, r2
 8022afc:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8022afe:	683b      	ldr	r3, [r7, #0]
 8022b00:	f003 0301 	and.w	r3, r3, #1
 8022b04:	2b00      	cmp	r3, #0
 8022b06:	d002      	beq.n	8022b0e <get_fat+0xbc>
 8022b08:	68bb      	ldr	r3, [r7, #8]
 8022b0a:	091b      	lsrs	r3, r3, #4
 8022b0c:	e002      	b.n	8022b14 <get_fat+0xc2>
 8022b0e:	68bb      	ldr	r3, [r7, #8]
 8022b10:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8022b14:	617b      	str	r3, [r7, #20]
			break;
 8022b16:	e041      	b.n	8022b9c <get_fat+0x14a>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8022b18:	693b      	ldr	r3, [r7, #16]
 8022b1a:	6a1a      	ldr	r2, [r3, #32]
 8022b1c:	683b      	ldr	r3, [r7, #0]
 8022b1e:	0adb      	lsrs	r3, r3, #11
 8022b20:	4413      	add	r3, r2
 8022b22:	4619      	mov	r1, r3
 8022b24:	6938      	ldr	r0, [r7, #16]
 8022b26:	f7ff fed9 	bl	80228dc <move_window>
 8022b2a:	4603      	mov	r3, r0
 8022b2c:	2b00      	cmp	r3, #0
 8022b2e:	d132      	bne.n	8022b96 <get_fat+0x144>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8022b30:	693b      	ldr	r3, [r7, #16]
 8022b32:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8022b36:	683b      	ldr	r3, [r7, #0]
 8022b38:	0059      	lsls	r1, r3, #1
 8022b3a:	f640 73fe 	movw	r3, #4094	; 0xffe
 8022b3e:	400b      	ands	r3, r1
 8022b40:	4413      	add	r3, r2
 8022b42:	4618      	mov	r0, r3
 8022b44:	f7ff fc1a 	bl	802237c <ld_word>
 8022b48:	4603      	mov	r3, r0
 8022b4a:	617b      	str	r3, [r7, #20]
			break;
 8022b4c:	e026      	b.n	8022b9c <get_fat+0x14a>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8022b4e:	693b      	ldr	r3, [r7, #16]
 8022b50:	6a1a      	ldr	r2, [r3, #32]
 8022b52:	683b      	ldr	r3, [r7, #0]
 8022b54:	0a9b      	lsrs	r3, r3, #10
 8022b56:	4413      	add	r3, r2
 8022b58:	4619      	mov	r1, r3
 8022b5a:	6938      	ldr	r0, [r7, #16]
 8022b5c:	f7ff febe 	bl	80228dc <move_window>
 8022b60:	4603      	mov	r3, r0
 8022b62:	2b00      	cmp	r3, #0
 8022b64:	d119      	bne.n	8022b9a <get_fat+0x148>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8022b66:	693b      	ldr	r3, [r7, #16]
 8022b68:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8022b6c:	683b      	ldr	r3, [r7, #0]
 8022b6e:	0099      	lsls	r1, r3, #2
 8022b70:	f640 73fc 	movw	r3, #4092	; 0xffc
 8022b74:	400b      	ands	r3, r1
 8022b76:	4413      	add	r3, r2
 8022b78:	4618      	mov	r0, r3
 8022b7a:	f7ff fc17 	bl	80223ac <ld_dword>
 8022b7e:	4603      	mov	r3, r0
 8022b80:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8022b84:	617b      	str	r3, [r7, #20]
			break;
 8022b86:	e009      	b.n	8022b9c <get_fat+0x14a>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8022b88:	2301      	movs	r3, #1
 8022b8a:	617b      	str	r3, [r7, #20]
 8022b8c:	e006      	b.n	8022b9c <get_fat+0x14a>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8022b8e:	bf00      	nop
 8022b90:	e004      	b.n	8022b9c <get_fat+0x14a>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8022b92:	bf00      	nop
 8022b94:	e002      	b.n	8022b9c <get_fat+0x14a>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8022b96:	bf00      	nop
 8022b98:	e000      	b.n	8022b9c <get_fat+0x14a>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8022b9a:	bf00      	nop
		}
	}

	return val;
 8022b9c:	697b      	ldr	r3, [r7, #20]
}
 8022b9e:	4618      	mov	r0, r3
 8022ba0:	3718      	adds	r7, #24
 8022ba2:	46bd      	mov	sp, r7
 8022ba4:	bd80      	pop	{r7, pc}

08022ba6 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8022ba6:	b590      	push	{r4, r7, lr}
 8022ba8:	b089      	sub	sp, #36	; 0x24
 8022baa:	af00      	add	r7, sp, #0
 8022bac:	60f8      	str	r0, [r7, #12]
 8022bae:	60b9      	str	r1, [r7, #8]
 8022bb0:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8022bb2:	2302      	movs	r3, #2
 8022bb4:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8022bb6:	68bb      	ldr	r3, [r7, #8]
 8022bb8:	2b01      	cmp	r3, #1
 8022bba:	f240 80d5 	bls.w	8022d68 <put_fat+0x1c2>
 8022bbe:	68fb      	ldr	r3, [r7, #12]
 8022bc0:	695b      	ldr	r3, [r3, #20]
 8022bc2:	68ba      	ldr	r2, [r7, #8]
 8022bc4:	429a      	cmp	r2, r3
 8022bc6:	f080 80cf 	bcs.w	8022d68 <put_fat+0x1c2>
		switch (fs->fs_type) {
 8022bca:	68fb      	ldr	r3, [r7, #12]
 8022bcc:	781b      	ldrb	r3, [r3, #0]
 8022bce:	2b03      	cmp	r3, #3
 8022bd0:	f000 8097 	beq.w	8022d02 <put_fat+0x15c>
 8022bd4:	2b03      	cmp	r3, #3
 8022bd6:	f300 80d0 	bgt.w	8022d7a <put_fat+0x1d4>
 8022bda:	2b01      	cmp	r3, #1
 8022bdc:	d002      	beq.n	8022be4 <put_fat+0x3e>
 8022bde:	2b02      	cmp	r3, #2
 8022be0:	d06e      	beq.n	8022cc0 <put_fat+0x11a>
 8022be2:	e0ca      	b.n	8022d7a <put_fat+0x1d4>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 8022be4:	68bb      	ldr	r3, [r7, #8]
 8022be6:	61bb      	str	r3, [r7, #24]
 8022be8:	69bb      	ldr	r3, [r7, #24]
 8022bea:	085b      	lsrs	r3, r3, #1
 8022bec:	69ba      	ldr	r2, [r7, #24]
 8022bee:	4413      	add	r3, r2
 8022bf0:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8022bf2:	68fb      	ldr	r3, [r7, #12]
 8022bf4:	6a1a      	ldr	r2, [r3, #32]
 8022bf6:	69bb      	ldr	r3, [r7, #24]
 8022bf8:	0b1b      	lsrs	r3, r3, #12
 8022bfa:	4413      	add	r3, r2
 8022bfc:	4619      	mov	r1, r3
 8022bfe:	68f8      	ldr	r0, [r7, #12]
 8022c00:	f7ff fe6c 	bl	80228dc <move_window>
 8022c04:	4603      	mov	r3, r0
 8022c06:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8022c08:	7ffb      	ldrb	r3, [r7, #31]
 8022c0a:	2b00      	cmp	r3, #0
 8022c0c:	f040 80ae 	bne.w	8022d6c <put_fat+0x1c6>
			p = fs->win + bc++ % SS(fs);
 8022c10:	68fb      	ldr	r3, [r7, #12]
 8022c12:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8022c16:	69bb      	ldr	r3, [r7, #24]
 8022c18:	1c59      	adds	r1, r3, #1
 8022c1a:	61b9      	str	r1, [r7, #24]
 8022c1c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8022c20:	4413      	add	r3, r2
 8022c22:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8022c24:	68bb      	ldr	r3, [r7, #8]
 8022c26:	f003 0301 	and.w	r3, r3, #1
 8022c2a:	2b00      	cmp	r3, #0
 8022c2c:	d00d      	beq.n	8022c4a <put_fat+0xa4>
 8022c2e:	697b      	ldr	r3, [r7, #20]
 8022c30:	781b      	ldrb	r3, [r3, #0]
 8022c32:	b25b      	sxtb	r3, r3
 8022c34:	f003 030f 	and.w	r3, r3, #15
 8022c38:	b25a      	sxtb	r2, r3
 8022c3a:	687b      	ldr	r3, [r7, #4]
 8022c3c:	b2db      	uxtb	r3, r3
 8022c3e:	011b      	lsls	r3, r3, #4
 8022c40:	b25b      	sxtb	r3, r3
 8022c42:	4313      	orrs	r3, r2
 8022c44:	b25b      	sxtb	r3, r3
 8022c46:	b2db      	uxtb	r3, r3
 8022c48:	e001      	b.n	8022c4e <put_fat+0xa8>
 8022c4a:	687b      	ldr	r3, [r7, #4]
 8022c4c:	b2db      	uxtb	r3, r3
 8022c4e:	697a      	ldr	r2, [r7, #20]
 8022c50:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8022c52:	68fb      	ldr	r3, [r7, #12]
 8022c54:	2201      	movs	r2, #1
 8022c56:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8022c58:	68fb      	ldr	r3, [r7, #12]
 8022c5a:	6a1a      	ldr	r2, [r3, #32]
 8022c5c:	69bb      	ldr	r3, [r7, #24]
 8022c5e:	0b1b      	lsrs	r3, r3, #12
 8022c60:	4413      	add	r3, r2
 8022c62:	4619      	mov	r1, r3
 8022c64:	68f8      	ldr	r0, [r7, #12]
 8022c66:	f7ff fe39 	bl	80228dc <move_window>
 8022c6a:	4603      	mov	r3, r0
 8022c6c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8022c6e:	7ffb      	ldrb	r3, [r7, #31]
 8022c70:	2b00      	cmp	r3, #0
 8022c72:	d17d      	bne.n	8022d70 <put_fat+0x1ca>
			p = fs->win + bc % SS(fs);
 8022c74:	68fb      	ldr	r3, [r7, #12]
 8022c76:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8022c7a:	69bb      	ldr	r3, [r7, #24]
 8022c7c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8022c80:	4413      	add	r3, r2
 8022c82:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8022c84:	68bb      	ldr	r3, [r7, #8]
 8022c86:	f003 0301 	and.w	r3, r3, #1
 8022c8a:	2b00      	cmp	r3, #0
 8022c8c:	d003      	beq.n	8022c96 <put_fat+0xf0>
 8022c8e:	687b      	ldr	r3, [r7, #4]
 8022c90:	091b      	lsrs	r3, r3, #4
 8022c92:	b2db      	uxtb	r3, r3
 8022c94:	e00e      	b.n	8022cb4 <put_fat+0x10e>
 8022c96:	697b      	ldr	r3, [r7, #20]
 8022c98:	781b      	ldrb	r3, [r3, #0]
 8022c9a:	b25b      	sxtb	r3, r3
 8022c9c:	f023 030f 	bic.w	r3, r3, #15
 8022ca0:	b25a      	sxtb	r2, r3
 8022ca2:	687b      	ldr	r3, [r7, #4]
 8022ca4:	0a1b      	lsrs	r3, r3, #8
 8022ca6:	b25b      	sxtb	r3, r3
 8022ca8:	f003 030f 	and.w	r3, r3, #15
 8022cac:	b25b      	sxtb	r3, r3
 8022cae:	4313      	orrs	r3, r2
 8022cb0:	b25b      	sxtb	r3, r3
 8022cb2:	b2db      	uxtb	r3, r3
 8022cb4:	697a      	ldr	r2, [r7, #20]
 8022cb6:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8022cb8:	68fb      	ldr	r3, [r7, #12]
 8022cba:	2201      	movs	r2, #1
 8022cbc:	70da      	strb	r2, [r3, #3]
			break;
 8022cbe:	e05c      	b.n	8022d7a <put_fat+0x1d4>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8022cc0:	68fb      	ldr	r3, [r7, #12]
 8022cc2:	6a1a      	ldr	r2, [r3, #32]
 8022cc4:	68bb      	ldr	r3, [r7, #8]
 8022cc6:	0adb      	lsrs	r3, r3, #11
 8022cc8:	4413      	add	r3, r2
 8022cca:	4619      	mov	r1, r3
 8022ccc:	68f8      	ldr	r0, [r7, #12]
 8022cce:	f7ff fe05 	bl	80228dc <move_window>
 8022cd2:	4603      	mov	r3, r0
 8022cd4:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8022cd6:	7ffb      	ldrb	r3, [r7, #31]
 8022cd8:	2b00      	cmp	r3, #0
 8022cda:	d14b      	bne.n	8022d74 <put_fat+0x1ce>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8022cdc:	68fb      	ldr	r3, [r7, #12]
 8022cde:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8022ce2:	68bb      	ldr	r3, [r7, #8]
 8022ce4:	0059      	lsls	r1, r3, #1
 8022ce6:	f640 73fe 	movw	r3, #4094	; 0xffe
 8022cea:	400b      	ands	r3, r1
 8022cec:	4413      	add	r3, r2
 8022cee:	687a      	ldr	r2, [r7, #4]
 8022cf0:	b292      	uxth	r2, r2
 8022cf2:	4611      	mov	r1, r2
 8022cf4:	4618      	mov	r0, r3
 8022cf6:	f7ff fb7c 	bl	80223f2 <st_word>
			fs->wflag = 1;
 8022cfa:	68fb      	ldr	r3, [r7, #12]
 8022cfc:	2201      	movs	r2, #1
 8022cfe:	70da      	strb	r2, [r3, #3]
			break;
 8022d00:	e03b      	b.n	8022d7a <put_fat+0x1d4>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8022d02:	68fb      	ldr	r3, [r7, #12]
 8022d04:	6a1a      	ldr	r2, [r3, #32]
 8022d06:	68bb      	ldr	r3, [r7, #8]
 8022d08:	0a9b      	lsrs	r3, r3, #10
 8022d0a:	4413      	add	r3, r2
 8022d0c:	4619      	mov	r1, r3
 8022d0e:	68f8      	ldr	r0, [r7, #12]
 8022d10:	f7ff fde4 	bl	80228dc <move_window>
 8022d14:	4603      	mov	r3, r0
 8022d16:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8022d18:	7ffb      	ldrb	r3, [r7, #31]
 8022d1a:	2b00      	cmp	r3, #0
 8022d1c:	d12c      	bne.n	8022d78 <put_fat+0x1d2>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8022d1e:	687b      	ldr	r3, [r7, #4]
 8022d20:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 8022d24:	68fb      	ldr	r3, [r7, #12]
 8022d26:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8022d2a:	68bb      	ldr	r3, [r7, #8]
 8022d2c:	0099      	lsls	r1, r3, #2
 8022d2e:	f640 73fc 	movw	r3, #4092	; 0xffc
 8022d32:	400b      	ands	r3, r1
 8022d34:	4413      	add	r3, r2
 8022d36:	4618      	mov	r0, r3
 8022d38:	f7ff fb38 	bl	80223ac <ld_dword>
 8022d3c:	4603      	mov	r3, r0
 8022d3e:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8022d42:	4323      	orrs	r3, r4
 8022d44:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8022d46:	68fb      	ldr	r3, [r7, #12]
 8022d48:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8022d4c:	68bb      	ldr	r3, [r7, #8]
 8022d4e:	0099      	lsls	r1, r3, #2
 8022d50:	f640 73fc 	movw	r3, #4092	; 0xffc
 8022d54:	400b      	ands	r3, r1
 8022d56:	4413      	add	r3, r2
 8022d58:	6879      	ldr	r1, [r7, #4]
 8022d5a:	4618      	mov	r0, r3
 8022d5c:	f7ff fb64 	bl	8022428 <st_dword>
			fs->wflag = 1;
 8022d60:	68fb      	ldr	r3, [r7, #12]
 8022d62:	2201      	movs	r2, #1
 8022d64:	70da      	strb	r2, [r3, #3]
			break;
 8022d66:	e008      	b.n	8022d7a <put_fat+0x1d4>
		}
	}
 8022d68:	bf00      	nop
 8022d6a:	e006      	b.n	8022d7a <put_fat+0x1d4>
			if (res != FR_OK) break;
 8022d6c:	bf00      	nop
 8022d6e:	e004      	b.n	8022d7a <put_fat+0x1d4>
			if (res != FR_OK) break;
 8022d70:	bf00      	nop
 8022d72:	e002      	b.n	8022d7a <put_fat+0x1d4>
			if (res != FR_OK) break;
 8022d74:	bf00      	nop
 8022d76:	e000      	b.n	8022d7a <put_fat+0x1d4>
			if (res != FR_OK) break;
 8022d78:	bf00      	nop
	return res;
 8022d7a:	7ffb      	ldrb	r3, [r7, #31]
}
 8022d7c:	4618      	mov	r0, r3
 8022d7e:	3724      	adds	r7, #36	; 0x24
 8022d80:	46bd      	mov	sp, r7
 8022d82:	bd90      	pop	{r4, r7, pc}

08022d84 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 8022d84:	b580      	push	{r7, lr}
 8022d86:	b088      	sub	sp, #32
 8022d88:	af00      	add	r7, sp, #0
 8022d8a:	60f8      	str	r0, [r7, #12]
 8022d8c:	60b9      	str	r1, [r7, #8]
 8022d8e:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 8022d90:	2300      	movs	r3, #0
 8022d92:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8022d94:	68fb      	ldr	r3, [r7, #12]
 8022d96:	681b      	ldr	r3, [r3, #0]
 8022d98:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8022d9a:	68bb      	ldr	r3, [r7, #8]
 8022d9c:	2b01      	cmp	r3, #1
 8022d9e:	d904      	bls.n	8022daa <remove_chain+0x26>
 8022da0:	69bb      	ldr	r3, [r7, #24]
 8022da2:	695b      	ldr	r3, [r3, #20]
 8022da4:	68ba      	ldr	r2, [r7, #8]
 8022da6:	429a      	cmp	r2, r3
 8022da8:	d301      	bcc.n	8022dae <remove_chain+0x2a>
 8022daa:	2302      	movs	r3, #2
 8022dac:	e04b      	b.n	8022e46 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8022dae:	687b      	ldr	r3, [r7, #4]
 8022db0:	2b00      	cmp	r3, #0
 8022db2:	d00c      	beq.n	8022dce <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8022db4:	f04f 32ff 	mov.w	r2, #4294967295
 8022db8:	6879      	ldr	r1, [r7, #4]
 8022dba:	69b8      	ldr	r0, [r7, #24]
 8022dbc:	f7ff fef3 	bl	8022ba6 <put_fat>
 8022dc0:	4603      	mov	r3, r0
 8022dc2:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 8022dc4:	7ffb      	ldrb	r3, [r7, #31]
 8022dc6:	2b00      	cmp	r3, #0
 8022dc8:	d001      	beq.n	8022dce <remove_chain+0x4a>
 8022dca:	7ffb      	ldrb	r3, [r7, #31]
 8022dcc:	e03b      	b.n	8022e46 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8022dce:	68b9      	ldr	r1, [r7, #8]
 8022dd0:	68f8      	ldr	r0, [r7, #12]
 8022dd2:	f7ff fe3e 	bl	8022a52 <get_fat>
 8022dd6:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 8022dd8:	697b      	ldr	r3, [r7, #20]
 8022dda:	2b00      	cmp	r3, #0
 8022ddc:	d031      	beq.n	8022e42 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8022dde:	697b      	ldr	r3, [r7, #20]
 8022de0:	2b01      	cmp	r3, #1
 8022de2:	d101      	bne.n	8022de8 <remove_chain+0x64>
 8022de4:	2302      	movs	r3, #2
 8022de6:	e02e      	b.n	8022e46 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8022de8:	697b      	ldr	r3, [r7, #20]
 8022dea:	f1b3 3fff 	cmp.w	r3, #4294967295
 8022dee:	d101      	bne.n	8022df4 <remove_chain+0x70>
 8022df0:	2301      	movs	r3, #1
 8022df2:	e028      	b.n	8022e46 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8022df4:	2200      	movs	r2, #0
 8022df6:	68b9      	ldr	r1, [r7, #8]
 8022df8:	69b8      	ldr	r0, [r7, #24]
 8022dfa:	f7ff fed4 	bl	8022ba6 <put_fat>
 8022dfe:	4603      	mov	r3, r0
 8022e00:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 8022e02:	7ffb      	ldrb	r3, [r7, #31]
 8022e04:	2b00      	cmp	r3, #0
 8022e06:	d001      	beq.n	8022e0c <remove_chain+0x88>
 8022e08:	7ffb      	ldrb	r3, [r7, #31]
 8022e0a:	e01c      	b.n	8022e46 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8022e0c:	69bb      	ldr	r3, [r7, #24]
 8022e0e:	691a      	ldr	r2, [r3, #16]
 8022e10:	69bb      	ldr	r3, [r7, #24]
 8022e12:	695b      	ldr	r3, [r3, #20]
 8022e14:	3b02      	subs	r3, #2
 8022e16:	429a      	cmp	r2, r3
 8022e18:	d20b      	bcs.n	8022e32 <remove_chain+0xae>
			fs->free_clst++;
 8022e1a:	69bb      	ldr	r3, [r7, #24]
 8022e1c:	691b      	ldr	r3, [r3, #16]
 8022e1e:	1c5a      	adds	r2, r3, #1
 8022e20:	69bb      	ldr	r3, [r7, #24]
 8022e22:	611a      	str	r2, [r3, #16]
			fs->fsi_flag |= 1;
 8022e24:	69bb      	ldr	r3, [r7, #24]
 8022e26:	791b      	ldrb	r3, [r3, #4]
 8022e28:	f043 0301 	orr.w	r3, r3, #1
 8022e2c:	b2da      	uxtb	r2, r3
 8022e2e:	69bb      	ldr	r3, [r7, #24]
 8022e30:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 8022e32:	697b      	ldr	r3, [r7, #20]
 8022e34:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8022e36:	69bb      	ldr	r3, [r7, #24]
 8022e38:	695b      	ldr	r3, [r3, #20]
 8022e3a:	68ba      	ldr	r2, [r7, #8]
 8022e3c:	429a      	cmp	r2, r3
 8022e3e:	d3c6      	bcc.n	8022dce <remove_chain+0x4a>
 8022e40:	e000      	b.n	8022e44 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 8022e42:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 8022e44:	2300      	movs	r3, #0
}
 8022e46:	4618      	mov	r0, r3
 8022e48:	3720      	adds	r7, #32
 8022e4a:	46bd      	mov	sp, r7
 8022e4c:	bd80      	pop	{r7, pc}

08022e4e <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8022e4e:	b580      	push	{r7, lr}
 8022e50:	b088      	sub	sp, #32
 8022e52:	af00      	add	r7, sp, #0
 8022e54:	6078      	str	r0, [r7, #4]
 8022e56:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 8022e58:	687b      	ldr	r3, [r7, #4]
 8022e5a:	681b      	ldr	r3, [r3, #0]
 8022e5c:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8022e5e:	683b      	ldr	r3, [r7, #0]
 8022e60:	2b00      	cmp	r3, #0
 8022e62:	d10d      	bne.n	8022e80 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8022e64:	693b      	ldr	r3, [r7, #16]
 8022e66:	68db      	ldr	r3, [r3, #12]
 8022e68:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8022e6a:	69bb      	ldr	r3, [r7, #24]
 8022e6c:	2b00      	cmp	r3, #0
 8022e6e:	d004      	beq.n	8022e7a <create_chain+0x2c>
 8022e70:	693b      	ldr	r3, [r7, #16]
 8022e72:	695b      	ldr	r3, [r3, #20]
 8022e74:	69ba      	ldr	r2, [r7, #24]
 8022e76:	429a      	cmp	r2, r3
 8022e78:	d31b      	bcc.n	8022eb2 <create_chain+0x64>
 8022e7a:	2301      	movs	r3, #1
 8022e7c:	61bb      	str	r3, [r7, #24]
 8022e7e:	e018      	b.n	8022eb2 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8022e80:	6839      	ldr	r1, [r7, #0]
 8022e82:	6878      	ldr	r0, [r7, #4]
 8022e84:	f7ff fde5 	bl	8022a52 <get_fat>
 8022e88:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 8022e8a:	68fb      	ldr	r3, [r7, #12]
 8022e8c:	2b01      	cmp	r3, #1
 8022e8e:	d801      	bhi.n	8022e94 <create_chain+0x46>
 8022e90:	2301      	movs	r3, #1
 8022e92:	e070      	b.n	8022f76 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8022e94:	68fb      	ldr	r3, [r7, #12]
 8022e96:	f1b3 3fff 	cmp.w	r3, #4294967295
 8022e9a:	d101      	bne.n	8022ea0 <create_chain+0x52>
 8022e9c:	68fb      	ldr	r3, [r7, #12]
 8022e9e:	e06a      	b.n	8022f76 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8022ea0:	693b      	ldr	r3, [r7, #16]
 8022ea2:	695b      	ldr	r3, [r3, #20]
 8022ea4:	68fa      	ldr	r2, [r7, #12]
 8022ea6:	429a      	cmp	r2, r3
 8022ea8:	d201      	bcs.n	8022eae <create_chain+0x60>
 8022eaa:	68fb      	ldr	r3, [r7, #12]
 8022eac:	e063      	b.n	8022f76 <create_chain+0x128>
		scl = clst;
 8022eae:	683b      	ldr	r3, [r7, #0]
 8022eb0:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 8022eb2:	69bb      	ldr	r3, [r7, #24]
 8022eb4:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 8022eb6:	69fb      	ldr	r3, [r7, #28]
 8022eb8:	3301      	adds	r3, #1
 8022eba:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8022ebc:	693b      	ldr	r3, [r7, #16]
 8022ebe:	695b      	ldr	r3, [r3, #20]
 8022ec0:	69fa      	ldr	r2, [r7, #28]
 8022ec2:	429a      	cmp	r2, r3
 8022ec4:	d307      	bcc.n	8022ed6 <create_chain+0x88>
				ncl = 2;
 8022ec6:	2302      	movs	r3, #2
 8022ec8:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 8022eca:	69fa      	ldr	r2, [r7, #28]
 8022ecc:	69bb      	ldr	r3, [r7, #24]
 8022ece:	429a      	cmp	r2, r3
 8022ed0:	d901      	bls.n	8022ed6 <create_chain+0x88>
 8022ed2:	2300      	movs	r3, #0
 8022ed4:	e04f      	b.n	8022f76 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8022ed6:	69f9      	ldr	r1, [r7, #28]
 8022ed8:	6878      	ldr	r0, [r7, #4]
 8022eda:	f7ff fdba 	bl	8022a52 <get_fat>
 8022ede:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 8022ee0:	68fb      	ldr	r3, [r7, #12]
 8022ee2:	2b00      	cmp	r3, #0
 8022ee4:	d00e      	beq.n	8022f04 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8022ee6:	68fb      	ldr	r3, [r7, #12]
 8022ee8:	2b01      	cmp	r3, #1
 8022eea:	d003      	beq.n	8022ef4 <create_chain+0xa6>
 8022eec:	68fb      	ldr	r3, [r7, #12]
 8022eee:	f1b3 3fff 	cmp.w	r3, #4294967295
 8022ef2:	d101      	bne.n	8022ef8 <create_chain+0xaa>
 8022ef4:	68fb      	ldr	r3, [r7, #12]
 8022ef6:	e03e      	b.n	8022f76 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 8022ef8:	69fa      	ldr	r2, [r7, #28]
 8022efa:	69bb      	ldr	r3, [r7, #24]
 8022efc:	429a      	cmp	r2, r3
 8022efe:	d1da      	bne.n	8022eb6 <create_chain+0x68>
 8022f00:	2300      	movs	r3, #0
 8022f02:	e038      	b.n	8022f76 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 8022f04:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8022f06:	f04f 32ff 	mov.w	r2, #4294967295
 8022f0a:	69f9      	ldr	r1, [r7, #28]
 8022f0c:	6938      	ldr	r0, [r7, #16]
 8022f0e:	f7ff fe4a 	bl	8022ba6 <put_fat>
 8022f12:	4603      	mov	r3, r0
 8022f14:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 8022f16:	7dfb      	ldrb	r3, [r7, #23]
 8022f18:	2b00      	cmp	r3, #0
 8022f1a:	d109      	bne.n	8022f30 <create_chain+0xe2>
 8022f1c:	683b      	ldr	r3, [r7, #0]
 8022f1e:	2b00      	cmp	r3, #0
 8022f20:	d006      	beq.n	8022f30 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 8022f22:	69fa      	ldr	r2, [r7, #28]
 8022f24:	6839      	ldr	r1, [r7, #0]
 8022f26:	6938      	ldr	r0, [r7, #16]
 8022f28:	f7ff fe3d 	bl	8022ba6 <put_fat>
 8022f2c:	4603      	mov	r3, r0
 8022f2e:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8022f30:	7dfb      	ldrb	r3, [r7, #23]
 8022f32:	2b00      	cmp	r3, #0
 8022f34:	d116      	bne.n	8022f64 <create_chain+0x116>
		fs->last_clst = ncl;
 8022f36:	693b      	ldr	r3, [r7, #16]
 8022f38:	69fa      	ldr	r2, [r7, #28]
 8022f3a:	60da      	str	r2, [r3, #12]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8022f3c:	693b      	ldr	r3, [r7, #16]
 8022f3e:	691a      	ldr	r2, [r3, #16]
 8022f40:	693b      	ldr	r3, [r7, #16]
 8022f42:	695b      	ldr	r3, [r3, #20]
 8022f44:	3b02      	subs	r3, #2
 8022f46:	429a      	cmp	r2, r3
 8022f48:	d804      	bhi.n	8022f54 <create_chain+0x106>
 8022f4a:	693b      	ldr	r3, [r7, #16]
 8022f4c:	691b      	ldr	r3, [r3, #16]
 8022f4e:	1e5a      	subs	r2, r3, #1
 8022f50:	693b      	ldr	r3, [r7, #16]
 8022f52:	611a      	str	r2, [r3, #16]
		fs->fsi_flag |= 1;
 8022f54:	693b      	ldr	r3, [r7, #16]
 8022f56:	791b      	ldrb	r3, [r3, #4]
 8022f58:	f043 0301 	orr.w	r3, r3, #1
 8022f5c:	b2da      	uxtb	r2, r3
 8022f5e:	693b      	ldr	r3, [r7, #16]
 8022f60:	711a      	strb	r2, [r3, #4]
 8022f62:	e007      	b.n	8022f74 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8022f64:	7dfb      	ldrb	r3, [r7, #23]
 8022f66:	2b01      	cmp	r3, #1
 8022f68:	d102      	bne.n	8022f70 <create_chain+0x122>
 8022f6a:	f04f 33ff 	mov.w	r3, #4294967295
 8022f6e:	e000      	b.n	8022f72 <create_chain+0x124>
 8022f70:	2301      	movs	r3, #1
 8022f72:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 8022f74:	69fb      	ldr	r3, [r7, #28]
}
 8022f76:	4618      	mov	r0, r3
 8022f78:	3720      	adds	r7, #32
 8022f7a:	46bd      	mov	sp, r7
 8022f7c:	bd80      	pop	{r7, pc}

08022f7e <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 8022f7e:	b580      	push	{r7, lr}
 8022f80:	b086      	sub	sp, #24
 8022f82:	af00      	add	r7, sp, #0
 8022f84:	6078      	str	r0, [r7, #4]
 8022f86:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 8022f88:	687b      	ldr	r3, [r7, #4]
 8022f8a:	681b      	ldr	r3, [r3, #0]
 8022f8c:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8022f8e:	683b      	ldr	r3, [r7, #0]
 8022f90:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8022f94:	d204      	bcs.n	8022fa0 <dir_sdi+0x22>
 8022f96:	683b      	ldr	r3, [r7, #0]
 8022f98:	f003 031f 	and.w	r3, r3, #31
 8022f9c:	2b00      	cmp	r3, #0
 8022f9e:	d001      	beq.n	8022fa4 <dir_sdi+0x26>
		return FR_INT_ERR;
 8022fa0:	2302      	movs	r3, #2
 8022fa2:	e063      	b.n	802306c <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 8022fa4:	687b      	ldr	r3, [r7, #4]
 8022fa6:	683a      	ldr	r2, [r7, #0]
 8022fa8:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8022faa:	687b      	ldr	r3, [r7, #4]
 8022fac:	689b      	ldr	r3, [r3, #8]
 8022fae:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8022fb0:	697b      	ldr	r3, [r7, #20]
 8022fb2:	2b00      	cmp	r3, #0
 8022fb4:	d106      	bne.n	8022fc4 <dir_sdi+0x46>
 8022fb6:	693b      	ldr	r3, [r7, #16]
 8022fb8:	781b      	ldrb	r3, [r3, #0]
 8022fba:	2b02      	cmp	r3, #2
 8022fbc:	d902      	bls.n	8022fc4 <dir_sdi+0x46>
		clst = fs->dirbase;
 8022fbe:	693b      	ldr	r3, [r7, #16]
 8022fc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8022fc2:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8022fc4:	697b      	ldr	r3, [r7, #20]
 8022fc6:	2b00      	cmp	r3, #0
 8022fc8:	d10c      	bne.n	8022fe4 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8022fca:	683b      	ldr	r3, [r7, #0]
 8022fcc:	095b      	lsrs	r3, r3, #5
 8022fce:	693a      	ldr	r2, [r7, #16]
 8022fd0:	8912      	ldrh	r2, [r2, #8]
 8022fd2:	4293      	cmp	r3, r2
 8022fd4:	d301      	bcc.n	8022fda <dir_sdi+0x5c>
 8022fd6:	2302      	movs	r3, #2
 8022fd8:	e048      	b.n	802306c <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 8022fda:	693b      	ldr	r3, [r7, #16]
 8022fdc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8022fde:	687b      	ldr	r3, [r7, #4]
 8022fe0:	61da      	str	r2, [r3, #28]
 8022fe2:	e029      	b.n	8023038 <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8022fe4:	693b      	ldr	r3, [r7, #16]
 8022fe6:	895b      	ldrh	r3, [r3, #10]
 8022fe8:	031b      	lsls	r3, r3, #12
 8022fea:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 8022fec:	e019      	b.n	8023022 <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8022fee:	687b      	ldr	r3, [r7, #4]
 8022ff0:	6979      	ldr	r1, [r7, #20]
 8022ff2:	4618      	mov	r0, r3
 8022ff4:	f7ff fd2d 	bl	8022a52 <get_fat>
 8022ff8:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8022ffa:	697b      	ldr	r3, [r7, #20]
 8022ffc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8023000:	d101      	bne.n	8023006 <dir_sdi+0x88>
 8023002:	2301      	movs	r3, #1
 8023004:	e032      	b.n	802306c <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8023006:	697b      	ldr	r3, [r7, #20]
 8023008:	2b01      	cmp	r3, #1
 802300a:	d904      	bls.n	8023016 <dir_sdi+0x98>
 802300c:	693b      	ldr	r3, [r7, #16]
 802300e:	695b      	ldr	r3, [r3, #20]
 8023010:	697a      	ldr	r2, [r7, #20]
 8023012:	429a      	cmp	r2, r3
 8023014:	d301      	bcc.n	802301a <dir_sdi+0x9c>
 8023016:	2302      	movs	r3, #2
 8023018:	e028      	b.n	802306c <dir_sdi+0xee>
			ofs -= csz;
 802301a:	683a      	ldr	r2, [r7, #0]
 802301c:	68fb      	ldr	r3, [r7, #12]
 802301e:	1ad3      	subs	r3, r2, r3
 8023020:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8023022:	683a      	ldr	r2, [r7, #0]
 8023024:	68fb      	ldr	r3, [r7, #12]
 8023026:	429a      	cmp	r2, r3
 8023028:	d2e1      	bcs.n	8022fee <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 802302a:	6979      	ldr	r1, [r7, #20]
 802302c:	6938      	ldr	r0, [r7, #16]
 802302e:	f7ff fcf1 	bl	8022a14 <clust2sect>
 8023032:	4602      	mov	r2, r0
 8023034:	687b      	ldr	r3, [r7, #4]
 8023036:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 8023038:	687b      	ldr	r3, [r7, #4]
 802303a:	697a      	ldr	r2, [r7, #20]
 802303c:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 802303e:	687b      	ldr	r3, [r7, #4]
 8023040:	69db      	ldr	r3, [r3, #28]
 8023042:	2b00      	cmp	r3, #0
 8023044:	d101      	bne.n	802304a <dir_sdi+0xcc>
 8023046:	2302      	movs	r3, #2
 8023048:	e010      	b.n	802306c <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 802304a:	687b      	ldr	r3, [r7, #4]
 802304c:	69da      	ldr	r2, [r3, #28]
 802304e:	683b      	ldr	r3, [r7, #0]
 8023050:	0b1b      	lsrs	r3, r3, #12
 8023052:	441a      	add	r2, r3
 8023054:	687b      	ldr	r3, [r7, #4]
 8023056:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8023058:	693b      	ldr	r3, [r7, #16]
 802305a:	f103 0230 	add.w	r2, r3, #48	; 0x30
 802305e:	683b      	ldr	r3, [r7, #0]
 8023060:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8023064:	441a      	add	r2, r3
 8023066:	687b      	ldr	r3, [r7, #4]
 8023068:	621a      	str	r2, [r3, #32]

	return FR_OK;
 802306a:	2300      	movs	r3, #0
}
 802306c:	4618      	mov	r0, r3
 802306e:	3718      	adds	r7, #24
 8023070:	46bd      	mov	sp, r7
 8023072:	bd80      	pop	{r7, pc}

08023074 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8023074:	b580      	push	{r7, lr}
 8023076:	b086      	sub	sp, #24
 8023078:	af00      	add	r7, sp, #0
 802307a:	6078      	str	r0, [r7, #4]
 802307c:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 802307e:	687b      	ldr	r3, [r7, #4]
 8023080:	681b      	ldr	r3, [r3, #0]
 8023082:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8023084:	687b      	ldr	r3, [r7, #4]
 8023086:	695b      	ldr	r3, [r3, #20]
 8023088:	3320      	adds	r3, #32
 802308a:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 802308c:	687b      	ldr	r3, [r7, #4]
 802308e:	69db      	ldr	r3, [r3, #28]
 8023090:	2b00      	cmp	r3, #0
 8023092:	d003      	beq.n	802309c <dir_next+0x28>
 8023094:	68bb      	ldr	r3, [r7, #8]
 8023096:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 802309a:	d301      	bcc.n	80230a0 <dir_next+0x2c>
 802309c:	2304      	movs	r3, #4
 802309e:	e0aa      	b.n	80231f6 <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 80230a0:	68bb      	ldr	r3, [r7, #8]
 80230a2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80230a6:	2b00      	cmp	r3, #0
 80230a8:	f040 8098 	bne.w	80231dc <dir_next+0x168>
		dp->sect++;				/* Next sector */
 80230ac:	687b      	ldr	r3, [r7, #4]
 80230ae:	69db      	ldr	r3, [r3, #28]
 80230b0:	1c5a      	adds	r2, r3, #1
 80230b2:	687b      	ldr	r3, [r7, #4]
 80230b4:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 80230b6:	687b      	ldr	r3, [r7, #4]
 80230b8:	699b      	ldr	r3, [r3, #24]
 80230ba:	2b00      	cmp	r3, #0
 80230bc:	d10b      	bne.n	80230d6 <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 80230be:	68bb      	ldr	r3, [r7, #8]
 80230c0:	095b      	lsrs	r3, r3, #5
 80230c2:	68fa      	ldr	r2, [r7, #12]
 80230c4:	8912      	ldrh	r2, [r2, #8]
 80230c6:	4293      	cmp	r3, r2
 80230c8:	f0c0 8088 	bcc.w	80231dc <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 80230cc:	687b      	ldr	r3, [r7, #4]
 80230ce:	2200      	movs	r2, #0
 80230d0:	61da      	str	r2, [r3, #28]
 80230d2:	2304      	movs	r3, #4
 80230d4:	e08f      	b.n	80231f6 <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 80230d6:	68bb      	ldr	r3, [r7, #8]
 80230d8:	0b1b      	lsrs	r3, r3, #12
 80230da:	68fa      	ldr	r2, [r7, #12]
 80230dc:	8952      	ldrh	r2, [r2, #10]
 80230de:	3a01      	subs	r2, #1
 80230e0:	4013      	ands	r3, r2
 80230e2:	2b00      	cmp	r3, #0
 80230e4:	d17a      	bne.n	80231dc <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 80230e6:	687a      	ldr	r2, [r7, #4]
 80230e8:	687b      	ldr	r3, [r7, #4]
 80230ea:	699b      	ldr	r3, [r3, #24]
 80230ec:	4619      	mov	r1, r3
 80230ee:	4610      	mov	r0, r2
 80230f0:	f7ff fcaf 	bl	8022a52 <get_fat>
 80230f4:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 80230f6:	697b      	ldr	r3, [r7, #20]
 80230f8:	2b01      	cmp	r3, #1
 80230fa:	d801      	bhi.n	8023100 <dir_next+0x8c>
 80230fc:	2302      	movs	r3, #2
 80230fe:	e07a      	b.n	80231f6 <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8023100:	697b      	ldr	r3, [r7, #20]
 8023102:	f1b3 3fff 	cmp.w	r3, #4294967295
 8023106:	d101      	bne.n	802310c <dir_next+0x98>
 8023108:	2301      	movs	r3, #1
 802310a:	e074      	b.n	80231f6 <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 802310c:	68fb      	ldr	r3, [r7, #12]
 802310e:	695b      	ldr	r3, [r3, #20]
 8023110:	697a      	ldr	r2, [r7, #20]
 8023112:	429a      	cmp	r2, r3
 8023114:	d358      	bcc.n	80231c8 <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 8023116:	683b      	ldr	r3, [r7, #0]
 8023118:	2b00      	cmp	r3, #0
 802311a:	d104      	bne.n	8023126 <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 802311c:	687b      	ldr	r3, [r7, #4]
 802311e:	2200      	movs	r2, #0
 8023120:	61da      	str	r2, [r3, #28]
 8023122:	2304      	movs	r3, #4
 8023124:	e067      	b.n	80231f6 <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8023126:	687a      	ldr	r2, [r7, #4]
 8023128:	687b      	ldr	r3, [r7, #4]
 802312a:	699b      	ldr	r3, [r3, #24]
 802312c:	4619      	mov	r1, r3
 802312e:	4610      	mov	r0, r2
 8023130:	f7ff fe8d 	bl	8022e4e <create_chain>
 8023134:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8023136:	697b      	ldr	r3, [r7, #20]
 8023138:	2b00      	cmp	r3, #0
 802313a:	d101      	bne.n	8023140 <dir_next+0xcc>
 802313c:	2307      	movs	r3, #7
 802313e:	e05a      	b.n	80231f6 <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8023140:	697b      	ldr	r3, [r7, #20]
 8023142:	2b01      	cmp	r3, #1
 8023144:	d101      	bne.n	802314a <dir_next+0xd6>
 8023146:	2302      	movs	r3, #2
 8023148:	e055      	b.n	80231f6 <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 802314a:	697b      	ldr	r3, [r7, #20]
 802314c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8023150:	d101      	bne.n	8023156 <dir_next+0xe2>
 8023152:	2301      	movs	r3, #1
 8023154:	e04f      	b.n	80231f6 <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8023156:	68f8      	ldr	r0, [r7, #12]
 8023158:	f7ff fb7c 	bl	8022854 <sync_window>
 802315c:	4603      	mov	r3, r0
 802315e:	2b00      	cmp	r3, #0
 8023160:	d001      	beq.n	8023166 <dir_next+0xf2>
 8023162:	2301      	movs	r3, #1
 8023164:	e047      	b.n	80231f6 <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8023166:	68fb      	ldr	r3, [r7, #12]
 8023168:	3330      	adds	r3, #48	; 0x30
 802316a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 802316e:	2100      	movs	r1, #0
 8023170:	4618      	mov	r0, r3
 8023172:	f7ff f9a6 	bl	80224c2 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8023176:	2300      	movs	r3, #0
 8023178:	613b      	str	r3, [r7, #16]
 802317a:	6979      	ldr	r1, [r7, #20]
 802317c:	68f8      	ldr	r0, [r7, #12]
 802317e:	f7ff fc49 	bl	8022a14 <clust2sect>
 8023182:	4602      	mov	r2, r0
 8023184:	68fb      	ldr	r3, [r7, #12]
 8023186:	62da      	str	r2, [r3, #44]	; 0x2c
 8023188:	e012      	b.n	80231b0 <dir_next+0x13c>
						fs->wflag = 1;
 802318a:	68fb      	ldr	r3, [r7, #12]
 802318c:	2201      	movs	r2, #1
 802318e:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8023190:	68f8      	ldr	r0, [r7, #12]
 8023192:	f7ff fb5f 	bl	8022854 <sync_window>
 8023196:	4603      	mov	r3, r0
 8023198:	2b00      	cmp	r3, #0
 802319a:	d001      	beq.n	80231a0 <dir_next+0x12c>
 802319c:	2301      	movs	r3, #1
 802319e:	e02a      	b.n	80231f6 <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 80231a0:	693b      	ldr	r3, [r7, #16]
 80231a2:	3301      	adds	r3, #1
 80231a4:	613b      	str	r3, [r7, #16]
 80231a6:	68fb      	ldr	r3, [r7, #12]
 80231a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80231aa:	1c5a      	adds	r2, r3, #1
 80231ac:	68fb      	ldr	r3, [r7, #12]
 80231ae:	62da      	str	r2, [r3, #44]	; 0x2c
 80231b0:	68fb      	ldr	r3, [r7, #12]
 80231b2:	895b      	ldrh	r3, [r3, #10]
 80231b4:	461a      	mov	r2, r3
 80231b6:	693b      	ldr	r3, [r7, #16]
 80231b8:	4293      	cmp	r3, r2
 80231ba:	d3e6      	bcc.n	802318a <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 80231bc:	68fb      	ldr	r3, [r7, #12]
 80231be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80231c0:	693b      	ldr	r3, [r7, #16]
 80231c2:	1ad2      	subs	r2, r2, r3
 80231c4:	68fb      	ldr	r3, [r7, #12]
 80231c6:	62da      	str	r2, [r3, #44]	; 0x2c
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 80231c8:	687b      	ldr	r3, [r7, #4]
 80231ca:	697a      	ldr	r2, [r7, #20]
 80231cc:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 80231ce:	6979      	ldr	r1, [r7, #20]
 80231d0:	68f8      	ldr	r0, [r7, #12]
 80231d2:	f7ff fc1f 	bl	8022a14 <clust2sect>
 80231d6:	4602      	mov	r2, r0
 80231d8:	687b      	ldr	r3, [r7, #4]
 80231da:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 80231dc:	687b      	ldr	r3, [r7, #4]
 80231de:	68ba      	ldr	r2, [r7, #8]
 80231e0:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 80231e2:	68fb      	ldr	r3, [r7, #12]
 80231e4:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80231e8:	68bb      	ldr	r3, [r7, #8]
 80231ea:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80231ee:	441a      	add	r2, r3
 80231f0:	687b      	ldr	r3, [r7, #4]
 80231f2:	621a      	str	r2, [r3, #32]

	return FR_OK;
 80231f4:	2300      	movs	r3, #0
}
 80231f6:	4618      	mov	r0, r3
 80231f8:	3718      	adds	r7, #24
 80231fa:	46bd      	mov	sp, r7
 80231fc:	bd80      	pop	{r7, pc}

080231fe <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 80231fe:	b580      	push	{r7, lr}
 8023200:	b086      	sub	sp, #24
 8023202:	af00      	add	r7, sp, #0
 8023204:	6078      	str	r0, [r7, #4]
 8023206:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 8023208:	687b      	ldr	r3, [r7, #4]
 802320a:	681b      	ldr	r3, [r3, #0]
 802320c:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 802320e:	2100      	movs	r1, #0
 8023210:	6878      	ldr	r0, [r7, #4]
 8023212:	f7ff feb4 	bl	8022f7e <dir_sdi>
 8023216:	4603      	mov	r3, r0
 8023218:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 802321a:	7dfb      	ldrb	r3, [r7, #23]
 802321c:	2b00      	cmp	r3, #0
 802321e:	d12b      	bne.n	8023278 <dir_alloc+0x7a>
		n = 0;
 8023220:	2300      	movs	r3, #0
 8023222:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 8023224:	687b      	ldr	r3, [r7, #4]
 8023226:	69db      	ldr	r3, [r3, #28]
 8023228:	4619      	mov	r1, r3
 802322a:	68f8      	ldr	r0, [r7, #12]
 802322c:	f7ff fb56 	bl	80228dc <move_window>
 8023230:	4603      	mov	r3, r0
 8023232:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8023234:	7dfb      	ldrb	r3, [r7, #23]
 8023236:	2b00      	cmp	r3, #0
 8023238:	d11d      	bne.n	8023276 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 802323a:	687b      	ldr	r3, [r7, #4]
 802323c:	6a1b      	ldr	r3, [r3, #32]
 802323e:	781b      	ldrb	r3, [r3, #0]
 8023240:	2be5      	cmp	r3, #229	; 0xe5
 8023242:	d004      	beq.n	802324e <dir_alloc+0x50>
 8023244:	687b      	ldr	r3, [r7, #4]
 8023246:	6a1b      	ldr	r3, [r3, #32]
 8023248:	781b      	ldrb	r3, [r3, #0]
 802324a:	2b00      	cmp	r3, #0
 802324c:	d107      	bne.n	802325e <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 802324e:	693b      	ldr	r3, [r7, #16]
 8023250:	3301      	adds	r3, #1
 8023252:	613b      	str	r3, [r7, #16]
 8023254:	693a      	ldr	r2, [r7, #16]
 8023256:	683b      	ldr	r3, [r7, #0]
 8023258:	429a      	cmp	r2, r3
 802325a:	d102      	bne.n	8023262 <dir_alloc+0x64>
 802325c:	e00c      	b.n	8023278 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 802325e:	2300      	movs	r3, #0
 8023260:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 8023262:	2101      	movs	r1, #1
 8023264:	6878      	ldr	r0, [r7, #4]
 8023266:	f7ff ff05 	bl	8023074 <dir_next>
 802326a:	4603      	mov	r3, r0
 802326c:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 802326e:	7dfb      	ldrb	r3, [r7, #23]
 8023270:	2b00      	cmp	r3, #0
 8023272:	d0d7      	beq.n	8023224 <dir_alloc+0x26>
 8023274:	e000      	b.n	8023278 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 8023276:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8023278:	7dfb      	ldrb	r3, [r7, #23]
 802327a:	2b04      	cmp	r3, #4
 802327c:	d101      	bne.n	8023282 <dir_alloc+0x84>
 802327e:	2307      	movs	r3, #7
 8023280:	75fb      	strb	r3, [r7, #23]
	return res;
 8023282:	7dfb      	ldrb	r3, [r7, #23]
}
 8023284:	4618      	mov	r0, r3
 8023286:	3718      	adds	r7, #24
 8023288:	46bd      	mov	sp, r7
 802328a:	bd80      	pop	{r7, pc}

0802328c <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 802328c:	b580      	push	{r7, lr}
 802328e:	b084      	sub	sp, #16
 8023290:	af00      	add	r7, sp, #0
 8023292:	6078      	str	r0, [r7, #4]
 8023294:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 8023296:	683b      	ldr	r3, [r7, #0]
 8023298:	331a      	adds	r3, #26
 802329a:	4618      	mov	r0, r3
 802329c:	f7ff f86e 	bl	802237c <ld_word>
 80232a0:	4603      	mov	r3, r0
 80232a2:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 80232a4:	687b      	ldr	r3, [r7, #4]
 80232a6:	781b      	ldrb	r3, [r3, #0]
 80232a8:	2b03      	cmp	r3, #3
 80232aa:	d109      	bne.n	80232c0 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 80232ac:	683b      	ldr	r3, [r7, #0]
 80232ae:	3314      	adds	r3, #20
 80232b0:	4618      	mov	r0, r3
 80232b2:	f7ff f863 	bl	802237c <ld_word>
 80232b6:	4603      	mov	r3, r0
 80232b8:	041b      	lsls	r3, r3, #16
 80232ba:	68fa      	ldr	r2, [r7, #12]
 80232bc:	4313      	orrs	r3, r2
 80232be:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 80232c0:	68fb      	ldr	r3, [r7, #12]
}
 80232c2:	4618      	mov	r0, r3
 80232c4:	3710      	adds	r7, #16
 80232c6:	46bd      	mov	sp, r7
 80232c8:	bd80      	pop	{r7, pc}

080232ca <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 80232ca:	b580      	push	{r7, lr}
 80232cc:	b084      	sub	sp, #16
 80232ce:	af00      	add	r7, sp, #0
 80232d0:	60f8      	str	r0, [r7, #12]
 80232d2:	60b9      	str	r1, [r7, #8]
 80232d4:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 80232d6:	68bb      	ldr	r3, [r7, #8]
 80232d8:	331a      	adds	r3, #26
 80232da:	687a      	ldr	r2, [r7, #4]
 80232dc:	b292      	uxth	r2, r2
 80232de:	4611      	mov	r1, r2
 80232e0:	4618      	mov	r0, r3
 80232e2:	f7ff f886 	bl	80223f2 <st_word>
	if (fs->fs_type == FS_FAT32) {
 80232e6:	68fb      	ldr	r3, [r7, #12]
 80232e8:	781b      	ldrb	r3, [r3, #0]
 80232ea:	2b03      	cmp	r3, #3
 80232ec:	d109      	bne.n	8023302 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 80232ee:	68bb      	ldr	r3, [r7, #8]
 80232f0:	f103 0214 	add.w	r2, r3, #20
 80232f4:	687b      	ldr	r3, [r7, #4]
 80232f6:	0c1b      	lsrs	r3, r3, #16
 80232f8:	b29b      	uxth	r3, r3
 80232fa:	4619      	mov	r1, r3
 80232fc:	4610      	mov	r0, r2
 80232fe:	f7ff f878 	bl	80223f2 <st_word>
	}
}
 8023302:	bf00      	nop
 8023304:	3710      	adds	r7, #16
 8023306:	46bd      	mov	sp, r7
 8023308:	bd80      	pop	{r7, pc}

0802330a <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 802330a:	b580      	push	{r7, lr}
 802330c:	b086      	sub	sp, #24
 802330e:	af00      	add	r7, sp, #0
 8023310:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8023312:	687b      	ldr	r3, [r7, #4]
 8023314:	681b      	ldr	r3, [r3, #0]
 8023316:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8023318:	2100      	movs	r1, #0
 802331a:	6878      	ldr	r0, [r7, #4]
 802331c:	f7ff fe2f 	bl	8022f7e <dir_sdi>
 8023320:	4603      	mov	r3, r0
 8023322:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8023324:	7dfb      	ldrb	r3, [r7, #23]
 8023326:	2b00      	cmp	r3, #0
 8023328:	d001      	beq.n	802332e <dir_find+0x24>
 802332a:	7dfb      	ldrb	r3, [r7, #23]
 802332c:	e03e      	b.n	80233ac <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 802332e:	687b      	ldr	r3, [r7, #4]
 8023330:	69db      	ldr	r3, [r3, #28]
 8023332:	4619      	mov	r1, r3
 8023334:	6938      	ldr	r0, [r7, #16]
 8023336:	f7ff fad1 	bl	80228dc <move_window>
 802333a:	4603      	mov	r3, r0
 802333c:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 802333e:	7dfb      	ldrb	r3, [r7, #23]
 8023340:	2b00      	cmp	r3, #0
 8023342:	d12f      	bne.n	80233a4 <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 8023344:	687b      	ldr	r3, [r7, #4]
 8023346:	6a1b      	ldr	r3, [r3, #32]
 8023348:	781b      	ldrb	r3, [r3, #0]
 802334a:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 802334c:	7bfb      	ldrb	r3, [r7, #15]
 802334e:	2b00      	cmp	r3, #0
 8023350:	d102      	bne.n	8023358 <dir_find+0x4e>
 8023352:	2304      	movs	r3, #4
 8023354:	75fb      	strb	r3, [r7, #23]
 8023356:	e028      	b.n	80233aa <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 8023358:	687b      	ldr	r3, [r7, #4]
 802335a:	6a1b      	ldr	r3, [r3, #32]
 802335c:	330b      	adds	r3, #11
 802335e:	781b      	ldrb	r3, [r3, #0]
 8023360:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8023364:	b2da      	uxtb	r2, r3
 8023366:	687b      	ldr	r3, [r7, #4]
 8023368:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 802336a:	687b      	ldr	r3, [r7, #4]
 802336c:	6a1b      	ldr	r3, [r3, #32]
 802336e:	330b      	adds	r3, #11
 8023370:	781b      	ldrb	r3, [r3, #0]
 8023372:	f003 0308 	and.w	r3, r3, #8
 8023376:	2b00      	cmp	r3, #0
 8023378:	d10a      	bne.n	8023390 <dir_find+0x86>
 802337a:	687b      	ldr	r3, [r7, #4]
 802337c:	6a18      	ldr	r0, [r3, #32]
 802337e:	687b      	ldr	r3, [r7, #4]
 8023380:	3324      	adds	r3, #36	; 0x24
 8023382:	220b      	movs	r2, #11
 8023384:	4619      	mov	r1, r3
 8023386:	f7ff f8b7 	bl	80224f8 <mem_cmp>
 802338a:	4603      	mov	r3, r0
 802338c:	2b00      	cmp	r3, #0
 802338e:	d00b      	beq.n	80233a8 <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 8023390:	2100      	movs	r1, #0
 8023392:	6878      	ldr	r0, [r7, #4]
 8023394:	f7ff fe6e 	bl	8023074 <dir_next>
 8023398:	4603      	mov	r3, r0
 802339a:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 802339c:	7dfb      	ldrb	r3, [r7, #23]
 802339e:	2b00      	cmp	r3, #0
 80233a0:	d0c5      	beq.n	802332e <dir_find+0x24>
 80233a2:	e002      	b.n	80233aa <dir_find+0xa0>
		if (res != FR_OK) break;
 80233a4:	bf00      	nop
 80233a6:	e000      	b.n	80233aa <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 80233a8:	bf00      	nop

	return res;
 80233aa:	7dfb      	ldrb	r3, [r7, #23]
}
 80233ac:	4618      	mov	r0, r3
 80233ae:	3718      	adds	r7, #24
 80233b0:	46bd      	mov	sp, r7
 80233b2:	bd80      	pop	{r7, pc}

080233b4 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 80233b4:	b580      	push	{r7, lr}
 80233b6:	b084      	sub	sp, #16
 80233b8:	af00      	add	r7, sp, #0
 80233ba:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 80233bc:	687b      	ldr	r3, [r7, #4]
 80233be:	681b      	ldr	r3, [r3, #0]
 80233c0:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 80233c2:	2101      	movs	r1, #1
 80233c4:	6878      	ldr	r0, [r7, #4]
 80233c6:	f7ff ff1a 	bl	80231fe <dir_alloc>
 80233ca:	4603      	mov	r3, r0
 80233cc:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 80233ce:	7bfb      	ldrb	r3, [r7, #15]
 80233d0:	2b00      	cmp	r3, #0
 80233d2:	d11c      	bne.n	802340e <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 80233d4:	687b      	ldr	r3, [r7, #4]
 80233d6:	69db      	ldr	r3, [r3, #28]
 80233d8:	4619      	mov	r1, r3
 80233da:	68b8      	ldr	r0, [r7, #8]
 80233dc:	f7ff fa7e 	bl	80228dc <move_window>
 80233e0:	4603      	mov	r3, r0
 80233e2:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 80233e4:	7bfb      	ldrb	r3, [r7, #15]
 80233e6:	2b00      	cmp	r3, #0
 80233e8:	d111      	bne.n	802340e <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 80233ea:	687b      	ldr	r3, [r7, #4]
 80233ec:	6a1b      	ldr	r3, [r3, #32]
 80233ee:	2220      	movs	r2, #32
 80233f0:	2100      	movs	r1, #0
 80233f2:	4618      	mov	r0, r3
 80233f4:	f7ff f865 	bl	80224c2 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 80233f8:	687b      	ldr	r3, [r7, #4]
 80233fa:	6a18      	ldr	r0, [r3, #32]
 80233fc:	687b      	ldr	r3, [r7, #4]
 80233fe:	3324      	adds	r3, #36	; 0x24
 8023400:	220b      	movs	r2, #11
 8023402:	4619      	mov	r1, r3
 8023404:	f7ff f83c 	bl	8022480 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 8023408:	68bb      	ldr	r3, [r7, #8]
 802340a:	2201      	movs	r2, #1
 802340c:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 802340e:	7bfb      	ldrb	r3, [r7, #15]
}
 8023410:	4618      	mov	r0, r3
 8023412:	3710      	adds	r7, #16
 8023414:	46bd      	mov	sp, r7
 8023416:	bd80      	pop	{r7, pc}

08023418 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8023418:	b580      	push	{r7, lr}
 802341a:	b088      	sub	sp, #32
 802341c:	af00      	add	r7, sp, #0
 802341e:	6078      	str	r0, [r7, #4]
 8023420:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 8023422:	683b      	ldr	r3, [r7, #0]
 8023424:	681b      	ldr	r3, [r3, #0]
 8023426:	60fb      	str	r3, [r7, #12]
 8023428:	687b      	ldr	r3, [r7, #4]
 802342a:	3324      	adds	r3, #36	; 0x24
 802342c:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 802342e:	220b      	movs	r2, #11
 8023430:	2120      	movs	r1, #32
 8023432:	68b8      	ldr	r0, [r7, #8]
 8023434:	f7ff f845 	bl	80224c2 <mem_set>
	si = i = 0; ni = 8;
 8023438:	2300      	movs	r3, #0
 802343a:	613b      	str	r3, [r7, #16]
 802343c:	693b      	ldr	r3, [r7, #16]
 802343e:	61fb      	str	r3, [r7, #28]
 8023440:	2308      	movs	r3, #8
 8023442:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 8023444:	69fb      	ldr	r3, [r7, #28]
 8023446:	1c5a      	adds	r2, r3, #1
 8023448:	61fa      	str	r2, [r7, #28]
 802344a:	68fa      	ldr	r2, [r7, #12]
 802344c:	4413      	add	r3, r2
 802344e:	781b      	ldrb	r3, [r3, #0]
 8023450:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 8023452:	7efb      	ldrb	r3, [r7, #27]
 8023454:	2b20      	cmp	r3, #32
 8023456:	d94e      	bls.n	80234f6 <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 8023458:	7efb      	ldrb	r3, [r7, #27]
 802345a:	2b2f      	cmp	r3, #47	; 0x2f
 802345c:	d006      	beq.n	802346c <create_name+0x54>
 802345e:	7efb      	ldrb	r3, [r7, #27]
 8023460:	2b5c      	cmp	r3, #92	; 0x5c
 8023462:	d110      	bne.n	8023486 <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8023464:	e002      	b.n	802346c <create_name+0x54>
 8023466:	69fb      	ldr	r3, [r7, #28]
 8023468:	3301      	adds	r3, #1
 802346a:	61fb      	str	r3, [r7, #28]
 802346c:	68fa      	ldr	r2, [r7, #12]
 802346e:	69fb      	ldr	r3, [r7, #28]
 8023470:	4413      	add	r3, r2
 8023472:	781b      	ldrb	r3, [r3, #0]
 8023474:	2b2f      	cmp	r3, #47	; 0x2f
 8023476:	d0f6      	beq.n	8023466 <create_name+0x4e>
 8023478:	68fa      	ldr	r2, [r7, #12]
 802347a:	69fb      	ldr	r3, [r7, #28]
 802347c:	4413      	add	r3, r2
 802347e:	781b      	ldrb	r3, [r3, #0]
 8023480:	2b5c      	cmp	r3, #92	; 0x5c
 8023482:	d0f0      	beq.n	8023466 <create_name+0x4e>
			break;
 8023484:	e038      	b.n	80234f8 <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 8023486:	7efb      	ldrb	r3, [r7, #27]
 8023488:	2b2e      	cmp	r3, #46	; 0x2e
 802348a:	d003      	beq.n	8023494 <create_name+0x7c>
 802348c:	693a      	ldr	r2, [r7, #16]
 802348e:	697b      	ldr	r3, [r7, #20]
 8023490:	429a      	cmp	r2, r3
 8023492:	d30c      	bcc.n	80234ae <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 8023494:	697b      	ldr	r3, [r7, #20]
 8023496:	2b0b      	cmp	r3, #11
 8023498:	d002      	beq.n	80234a0 <create_name+0x88>
 802349a:	7efb      	ldrb	r3, [r7, #27]
 802349c:	2b2e      	cmp	r3, #46	; 0x2e
 802349e:	d001      	beq.n	80234a4 <create_name+0x8c>
 80234a0:	2306      	movs	r3, #6
 80234a2:	e044      	b.n	802352e <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 80234a4:	2308      	movs	r3, #8
 80234a6:	613b      	str	r3, [r7, #16]
 80234a8:	230b      	movs	r3, #11
 80234aa:	617b      	str	r3, [r7, #20]
			continue;
 80234ac:	e022      	b.n	80234f4 <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 80234ae:	f997 301b 	ldrsb.w	r3, [r7, #27]
 80234b2:	2b00      	cmp	r3, #0
 80234b4:	da04      	bge.n	80234c0 <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 80234b6:	7efb      	ldrb	r3, [r7, #27]
 80234b8:	3b80      	subs	r3, #128	; 0x80
 80234ba:	4a1f      	ldr	r2, [pc, #124]	; (8023538 <create_name+0x120>)
 80234bc:	5cd3      	ldrb	r3, [r2, r3]
 80234be:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 80234c0:	7efb      	ldrb	r3, [r7, #27]
 80234c2:	4619      	mov	r1, r3
 80234c4:	481d      	ldr	r0, [pc, #116]	; (802353c <create_name+0x124>)
 80234c6:	f7ff f83e 	bl	8022546 <chk_chr>
 80234ca:	4603      	mov	r3, r0
 80234cc:	2b00      	cmp	r3, #0
 80234ce:	d001      	beq.n	80234d4 <create_name+0xbc>
 80234d0:	2306      	movs	r3, #6
 80234d2:	e02c      	b.n	802352e <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 80234d4:	7efb      	ldrb	r3, [r7, #27]
 80234d6:	2b60      	cmp	r3, #96	; 0x60
 80234d8:	d905      	bls.n	80234e6 <create_name+0xce>
 80234da:	7efb      	ldrb	r3, [r7, #27]
 80234dc:	2b7a      	cmp	r3, #122	; 0x7a
 80234de:	d802      	bhi.n	80234e6 <create_name+0xce>
 80234e0:	7efb      	ldrb	r3, [r7, #27]
 80234e2:	3b20      	subs	r3, #32
 80234e4:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 80234e6:	693b      	ldr	r3, [r7, #16]
 80234e8:	1c5a      	adds	r2, r3, #1
 80234ea:	613a      	str	r2, [r7, #16]
 80234ec:	68ba      	ldr	r2, [r7, #8]
 80234ee:	4413      	add	r3, r2
 80234f0:	7efa      	ldrb	r2, [r7, #27]
 80234f2:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 80234f4:	e7a6      	b.n	8023444 <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 80234f6:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 80234f8:	68fa      	ldr	r2, [r7, #12]
 80234fa:	69fb      	ldr	r3, [r7, #28]
 80234fc:	441a      	add	r2, r3
 80234fe:	683b      	ldr	r3, [r7, #0]
 8023500:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 8023502:	693b      	ldr	r3, [r7, #16]
 8023504:	2b00      	cmp	r3, #0
 8023506:	d101      	bne.n	802350c <create_name+0xf4>
 8023508:	2306      	movs	r3, #6
 802350a:	e010      	b.n	802352e <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 802350c:	68bb      	ldr	r3, [r7, #8]
 802350e:	781b      	ldrb	r3, [r3, #0]
 8023510:	2be5      	cmp	r3, #229	; 0xe5
 8023512:	d102      	bne.n	802351a <create_name+0x102>
 8023514:	68bb      	ldr	r3, [r7, #8]
 8023516:	2205      	movs	r2, #5
 8023518:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 802351a:	7efb      	ldrb	r3, [r7, #27]
 802351c:	2b20      	cmp	r3, #32
 802351e:	d801      	bhi.n	8023524 <create_name+0x10c>
 8023520:	2204      	movs	r2, #4
 8023522:	e000      	b.n	8023526 <create_name+0x10e>
 8023524:	2200      	movs	r2, #0
 8023526:	68bb      	ldr	r3, [r7, #8]
 8023528:	330b      	adds	r3, #11
 802352a:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 802352c:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 802352e:	4618      	mov	r0, r3
 8023530:	3720      	adds	r7, #32
 8023532:	46bd      	mov	sp, r7
 8023534:	bd80      	pop	{r7, pc}
 8023536:	bf00      	nop
 8023538:	08002404 	.word	0x08002404
 802353c:	08000adc 	.word	0x08000adc

08023540 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8023540:	b580      	push	{r7, lr}
 8023542:	b086      	sub	sp, #24
 8023544:	af00      	add	r7, sp, #0
 8023546:	6078      	str	r0, [r7, #4]
 8023548:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 802354a:	687b      	ldr	r3, [r7, #4]
 802354c:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 802354e:	693b      	ldr	r3, [r7, #16]
 8023550:	681b      	ldr	r3, [r3, #0]
 8023552:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8023554:	e002      	b.n	802355c <follow_path+0x1c>
 8023556:	683b      	ldr	r3, [r7, #0]
 8023558:	3301      	adds	r3, #1
 802355a:	603b      	str	r3, [r7, #0]
 802355c:	683b      	ldr	r3, [r7, #0]
 802355e:	781b      	ldrb	r3, [r3, #0]
 8023560:	2b2f      	cmp	r3, #47	; 0x2f
 8023562:	d0f8      	beq.n	8023556 <follow_path+0x16>
 8023564:	683b      	ldr	r3, [r7, #0]
 8023566:	781b      	ldrb	r3, [r3, #0]
 8023568:	2b5c      	cmp	r3, #92	; 0x5c
 802356a:	d0f4      	beq.n	8023556 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 802356c:	693b      	ldr	r3, [r7, #16]
 802356e:	2200      	movs	r2, #0
 8023570:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8023572:	683b      	ldr	r3, [r7, #0]
 8023574:	781b      	ldrb	r3, [r3, #0]
 8023576:	2b1f      	cmp	r3, #31
 8023578:	d80a      	bhi.n	8023590 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 802357a:	687b      	ldr	r3, [r7, #4]
 802357c:	2280      	movs	r2, #128	; 0x80
 802357e:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 8023582:	2100      	movs	r1, #0
 8023584:	6878      	ldr	r0, [r7, #4]
 8023586:	f7ff fcfa 	bl	8022f7e <dir_sdi>
 802358a:	4603      	mov	r3, r0
 802358c:	75fb      	strb	r3, [r7, #23]
 802358e:	e043      	b.n	8023618 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8023590:	463b      	mov	r3, r7
 8023592:	4619      	mov	r1, r3
 8023594:	6878      	ldr	r0, [r7, #4]
 8023596:	f7ff ff3f 	bl	8023418 <create_name>
 802359a:	4603      	mov	r3, r0
 802359c:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 802359e:	7dfb      	ldrb	r3, [r7, #23]
 80235a0:	2b00      	cmp	r3, #0
 80235a2:	d134      	bne.n	802360e <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 80235a4:	6878      	ldr	r0, [r7, #4]
 80235a6:	f7ff feb0 	bl	802330a <dir_find>
 80235aa:	4603      	mov	r3, r0
 80235ac:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 80235ae:	687b      	ldr	r3, [r7, #4]
 80235b0:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 80235b4:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 80235b6:	7dfb      	ldrb	r3, [r7, #23]
 80235b8:	2b00      	cmp	r3, #0
 80235ba:	d00a      	beq.n	80235d2 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 80235bc:	7dfb      	ldrb	r3, [r7, #23]
 80235be:	2b04      	cmp	r3, #4
 80235c0:	d127      	bne.n	8023612 <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 80235c2:	7afb      	ldrb	r3, [r7, #11]
 80235c4:	f003 0304 	and.w	r3, r3, #4
 80235c8:	2b00      	cmp	r3, #0
 80235ca:	d122      	bne.n	8023612 <follow_path+0xd2>
 80235cc:	2305      	movs	r3, #5
 80235ce:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 80235d0:	e01f      	b.n	8023612 <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 80235d2:	7afb      	ldrb	r3, [r7, #11]
 80235d4:	f003 0304 	and.w	r3, r3, #4
 80235d8:	2b00      	cmp	r3, #0
 80235da:	d11c      	bne.n	8023616 <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 80235dc:	693b      	ldr	r3, [r7, #16]
 80235de:	799b      	ldrb	r3, [r3, #6]
 80235e0:	f003 0310 	and.w	r3, r3, #16
 80235e4:	2b00      	cmp	r3, #0
 80235e6:	d102      	bne.n	80235ee <follow_path+0xae>
				res = FR_NO_PATH; break;
 80235e8:	2305      	movs	r3, #5
 80235ea:	75fb      	strb	r3, [r7, #23]
 80235ec:	e014      	b.n	8023618 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 80235ee:	68fb      	ldr	r3, [r7, #12]
 80235f0:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80235f4:	687b      	ldr	r3, [r7, #4]
 80235f6:	695b      	ldr	r3, [r3, #20]
 80235f8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80235fc:	4413      	add	r3, r2
 80235fe:	4619      	mov	r1, r3
 8023600:	68f8      	ldr	r0, [r7, #12]
 8023602:	f7ff fe43 	bl	802328c <ld_clust>
 8023606:	4602      	mov	r2, r0
 8023608:	693b      	ldr	r3, [r7, #16]
 802360a:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 802360c:	e7c0      	b.n	8023590 <follow_path+0x50>
			if (res != FR_OK) break;
 802360e:	bf00      	nop
 8023610:	e002      	b.n	8023618 <follow_path+0xd8>
				break;
 8023612:	bf00      	nop
 8023614:	e000      	b.n	8023618 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8023616:	bf00      	nop
			}
		}
	}

	return res;
 8023618:	7dfb      	ldrb	r3, [r7, #23]
}
 802361a:	4618      	mov	r0, r3
 802361c:	3718      	adds	r7, #24
 802361e:	46bd      	mov	sp, r7
 8023620:	bd80      	pop	{r7, pc}

08023622 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8023622:	b480      	push	{r7}
 8023624:	b087      	sub	sp, #28
 8023626:	af00      	add	r7, sp, #0
 8023628:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 802362a:	f04f 33ff 	mov.w	r3, #4294967295
 802362e:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8023630:	687b      	ldr	r3, [r7, #4]
 8023632:	681b      	ldr	r3, [r3, #0]
 8023634:	2b00      	cmp	r3, #0
 8023636:	d031      	beq.n	802369c <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8023638:	687b      	ldr	r3, [r7, #4]
 802363a:	681b      	ldr	r3, [r3, #0]
 802363c:	617b      	str	r3, [r7, #20]
 802363e:	e002      	b.n	8023646 <get_ldnumber+0x24>
 8023640:	697b      	ldr	r3, [r7, #20]
 8023642:	3301      	adds	r3, #1
 8023644:	617b      	str	r3, [r7, #20]
 8023646:	697b      	ldr	r3, [r7, #20]
 8023648:	781b      	ldrb	r3, [r3, #0]
 802364a:	2b20      	cmp	r3, #32
 802364c:	d903      	bls.n	8023656 <get_ldnumber+0x34>
 802364e:	697b      	ldr	r3, [r7, #20]
 8023650:	781b      	ldrb	r3, [r3, #0]
 8023652:	2b3a      	cmp	r3, #58	; 0x3a
 8023654:	d1f4      	bne.n	8023640 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8023656:	697b      	ldr	r3, [r7, #20]
 8023658:	781b      	ldrb	r3, [r3, #0]
 802365a:	2b3a      	cmp	r3, #58	; 0x3a
 802365c:	d11c      	bne.n	8023698 <get_ldnumber+0x76>
			tp = *path;
 802365e:	687b      	ldr	r3, [r7, #4]
 8023660:	681b      	ldr	r3, [r3, #0]
 8023662:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 8023664:	68fb      	ldr	r3, [r7, #12]
 8023666:	1c5a      	adds	r2, r3, #1
 8023668:	60fa      	str	r2, [r7, #12]
 802366a:	781b      	ldrb	r3, [r3, #0]
 802366c:	3b30      	subs	r3, #48	; 0x30
 802366e:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8023670:	68bb      	ldr	r3, [r7, #8]
 8023672:	2b09      	cmp	r3, #9
 8023674:	d80e      	bhi.n	8023694 <get_ldnumber+0x72>
 8023676:	68fa      	ldr	r2, [r7, #12]
 8023678:	697b      	ldr	r3, [r7, #20]
 802367a:	429a      	cmp	r2, r3
 802367c:	d10a      	bne.n	8023694 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 802367e:	68bb      	ldr	r3, [r7, #8]
 8023680:	2b00      	cmp	r3, #0
 8023682:	d107      	bne.n	8023694 <get_ldnumber+0x72>
					vol = (int)i;
 8023684:	68bb      	ldr	r3, [r7, #8]
 8023686:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8023688:	697b      	ldr	r3, [r7, #20]
 802368a:	3301      	adds	r3, #1
 802368c:	617b      	str	r3, [r7, #20]
 802368e:	687b      	ldr	r3, [r7, #4]
 8023690:	697a      	ldr	r2, [r7, #20]
 8023692:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8023694:	693b      	ldr	r3, [r7, #16]
 8023696:	e002      	b.n	802369e <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8023698:	2300      	movs	r3, #0
 802369a:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 802369c:	693b      	ldr	r3, [r7, #16]
}
 802369e:	4618      	mov	r0, r3
 80236a0:	371c      	adds	r7, #28
 80236a2:	46bd      	mov	sp, r7
 80236a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80236a8:	4770      	bx	lr
	...

080236ac <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 80236ac:	b580      	push	{r7, lr}
 80236ae:	b082      	sub	sp, #8
 80236b0:	af00      	add	r7, sp, #0
 80236b2:	6078      	str	r0, [r7, #4]
 80236b4:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 80236b6:	687b      	ldr	r3, [r7, #4]
 80236b8:	2200      	movs	r2, #0
 80236ba:	70da      	strb	r2, [r3, #3]
 80236bc:	687b      	ldr	r3, [r7, #4]
 80236be:	f04f 32ff 	mov.w	r2, #4294967295
 80236c2:	62da      	str	r2, [r3, #44]	; 0x2c
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 80236c4:	6839      	ldr	r1, [r7, #0]
 80236c6:	6878      	ldr	r0, [r7, #4]
 80236c8:	f7ff f908 	bl	80228dc <move_window>
 80236cc:	4603      	mov	r3, r0
 80236ce:	2b00      	cmp	r3, #0
 80236d0:	d001      	beq.n	80236d6 <check_fs+0x2a>
 80236d2:	2304      	movs	r3, #4
 80236d4:	e038      	b.n	8023748 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 80236d6:	687b      	ldr	r3, [r7, #4]
 80236d8:	3330      	adds	r3, #48	; 0x30
 80236da:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80236de:	4618      	mov	r0, r3
 80236e0:	f7fe fe4c 	bl	802237c <ld_word>
 80236e4:	4603      	mov	r3, r0
 80236e6:	461a      	mov	r2, r3
 80236e8:	f64a 2355 	movw	r3, #43605	; 0xaa55
 80236ec:	429a      	cmp	r2, r3
 80236ee:	d001      	beq.n	80236f4 <check_fs+0x48>
 80236f0:	2303      	movs	r3, #3
 80236f2:	e029      	b.n	8023748 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 80236f4:	687b      	ldr	r3, [r7, #4]
 80236f6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80236fa:	2be9      	cmp	r3, #233	; 0xe9
 80236fc:	d009      	beq.n	8023712 <check_fs+0x66>
 80236fe:	687b      	ldr	r3, [r7, #4]
 8023700:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8023704:	2beb      	cmp	r3, #235	; 0xeb
 8023706:	d11e      	bne.n	8023746 <check_fs+0x9a>
 8023708:	687b      	ldr	r3, [r7, #4]
 802370a:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 802370e:	2b90      	cmp	r3, #144	; 0x90
 8023710:	d119      	bne.n	8023746 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8023712:	687b      	ldr	r3, [r7, #4]
 8023714:	3330      	adds	r3, #48	; 0x30
 8023716:	3336      	adds	r3, #54	; 0x36
 8023718:	4618      	mov	r0, r3
 802371a:	f7fe fe47 	bl	80223ac <ld_dword>
 802371e:	4603      	mov	r3, r0
 8023720:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8023724:	4a0a      	ldr	r2, [pc, #40]	; (8023750 <check_fs+0xa4>)
 8023726:	4293      	cmp	r3, r2
 8023728:	d101      	bne.n	802372e <check_fs+0x82>
 802372a:	2300      	movs	r3, #0
 802372c:	e00c      	b.n	8023748 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 802372e:	687b      	ldr	r3, [r7, #4]
 8023730:	3330      	adds	r3, #48	; 0x30
 8023732:	3352      	adds	r3, #82	; 0x52
 8023734:	4618      	mov	r0, r3
 8023736:	f7fe fe39 	bl	80223ac <ld_dword>
 802373a:	4603      	mov	r3, r0
 802373c:	4a05      	ldr	r2, [pc, #20]	; (8023754 <check_fs+0xa8>)
 802373e:	4293      	cmp	r3, r2
 8023740:	d101      	bne.n	8023746 <check_fs+0x9a>
 8023742:	2300      	movs	r3, #0
 8023744:	e000      	b.n	8023748 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 8023746:	2302      	movs	r3, #2
}
 8023748:	4618      	mov	r0, r3
 802374a:	3708      	adds	r7, #8
 802374c:	46bd      	mov	sp, r7
 802374e:	bd80      	pop	{r7, pc}
 8023750:	00544146 	.word	0x00544146
 8023754:	33544146 	.word	0x33544146

08023758 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8023758:	b580      	push	{r7, lr}
 802375a:	b096      	sub	sp, #88	; 0x58
 802375c:	af00      	add	r7, sp, #0
 802375e:	60f8      	str	r0, [r7, #12]
 8023760:	60b9      	str	r1, [r7, #8]
 8023762:	4613      	mov	r3, r2
 8023764:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 8023766:	68bb      	ldr	r3, [r7, #8]
 8023768:	2200      	movs	r2, #0
 802376a:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 802376c:	68f8      	ldr	r0, [r7, #12]
 802376e:	f7ff ff58 	bl	8023622 <get_ldnumber>
 8023772:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8023774:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8023776:	2b00      	cmp	r3, #0
 8023778:	da01      	bge.n	802377e <find_volume+0x26>
 802377a:	230b      	movs	r3, #11
 802377c:	e22e      	b.n	8023bdc <find_volume+0x484>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 802377e:	4aa8      	ldr	r2, [pc, #672]	; (8023a20 <find_volume+0x2c8>)
 8023780:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8023782:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8023786:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8023788:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 802378a:	2b00      	cmp	r3, #0
 802378c:	d101      	bne.n	8023792 <find_volume+0x3a>
 802378e:	230c      	movs	r3, #12
 8023790:	e224      	b.n	8023bdc <find_volume+0x484>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 8023792:	68bb      	ldr	r3, [r7, #8]
 8023794:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8023796:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8023798:	79fb      	ldrb	r3, [r7, #7]
 802379a:	f023 0301 	bic.w	r3, r3, #1
 802379e:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 80237a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80237a2:	781b      	ldrb	r3, [r3, #0]
 80237a4:	2b00      	cmp	r3, #0
 80237a6:	d01a      	beq.n	80237de <find_volume+0x86>
		stat = disk_status(fs->drv);
 80237a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80237aa:	785b      	ldrb	r3, [r3, #1]
 80237ac:	4618      	mov	r0, r3
 80237ae:	f7fe fd47 	bl	8022240 <disk_status>
 80237b2:	4603      	mov	r3, r0
 80237b4:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 80237b8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80237bc:	f003 0301 	and.w	r3, r3, #1
 80237c0:	2b00      	cmp	r3, #0
 80237c2:	d10c      	bne.n	80237de <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 80237c4:	79fb      	ldrb	r3, [r7, #7]
 80237c6:	2b00      	cmp	r3, #0
 80237c8:	d007      	beq.n	80237da <find_volume+0x82>
 80237ca:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80237ce:	f003 0304 	and.w	r3, r3, #4
 80237d2:	2b00      	cmp	r3, #0
 80237d4:	d001      	beq.n	80237da <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 80237d6:	230a      	movs	r3, #10
 80237d8:	e200      	b.n	8023bdc <find_volume+0x484>
			}
			return FR_OK;				/* The file system object is valid */
 80237da:	2300      	movs	r3, #0
 80237dc:	e1fe      	b.n	8023bdc <find_volume+0x484>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 80237de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80237e0:	2200      	movs	r2, #0
 80237e2:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 80237e4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80237e6:	b2da      	uxtb	r2, r3
 80237e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80237ea:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 80237ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80237ee:	785b      	ldrb	r3, [r3, #1]
 80237f0:	4618      	mov	r0, r3
 80237f2:	f7fe fd3f 	bl	8022274 <disk_initialize>
 80237f6:	4603      	mov	r3, r0
 80237f8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 80237fc:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8023800:	f003 0301 	and.w	r3, r3, #1
 8023804:	2b00      	cmp	r3, #0
 8023806:	d001      	beq.n	802380c <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8023808:	2303      	movs	r3, #3
 802380a:	e1e7      	b.n	8023bdc <find_volume+0x484>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 802380c:	79fb      	ldrb	r3, [r7, #7]
 802380e:	2b00      	cmp	r3, #0
 8023810:	d007      	beq.n	8023822 <find_volume+0xca>
 8023812:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8023816:	f003 0304 	and.w	r3, r3, #4
 802381a:	2b00      	cmp	r3, #0
 802381c:	d001      	beq.n	8023822 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 802381e:	230a      	movs	r3, #10
 8023820:	e1dc      	b.n	8023bdc <find_volume+0x484>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 8023822:	2300      	movs	r3, #0
 8023824:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 8023826:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8023828:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 802382a:	f7ff ff3f 	bl	80236ac <check_fs>
 802382e:	4603      	mov	r3, r0
 8023830:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8023834:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8023838:	2b02      	cmp	r3, #2
 802383a:	d14b      	bne.n	80238d4 <find_volume+0x17c>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 802383c:	2300      	movs	r3, #0
 802383e:	643b      	str	r3, [r7, #64]	; 0x40
 8023840:	e01f      	b.n	8023882 <find_volume+0x12a>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 8023842:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8023844:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8023848:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 802384a:	011b      	lsls	r3, r3, #4
 802384c:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 8023850:	4413      	add	r3, r2
 8023852:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8023854:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8023856:	3304      	adds	r3, #4
 8023858:	781b      	ldrb	r3, [r3, #0]
 802385a:	2b00      	cmp	r3, #0
 802385c:	d006      	beq.n	802386c <find_volume+0x114>
 802385e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8023860:	3308      	adds	r3, #8
 8023862:	4618      	mov	r0, r3
 8023864:	f7fe fda2 	bl	80223ac <ld_dword>
 8023868:	4602      	mov	r2, r0
 802386a:	e000      	b.n	802386e <find_volume+0x116>
 802386c:	2200      	movs	r2, #0
 802386e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8023870:	009b      	lsls	r3, r3, #2
 8023872:	f107 0158 	add.w	r1, r7, #88	; 0x58
 8023876:	440b      	add	r3, r1
 8023878:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 802387c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 802387e:	3301      	adds	r3, #1
 8023880:	643b      	str	r3, [r7, #64]	; 0x40
 8023882:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8023884:	2b03      	cmp	r3, #3
 8023886:	d9dc      	bls.n	8023842 <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 8023888:	2300      	movs	r3, #0
 802388a:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 802388c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 802388e:	2b00      	cmp	r3, #0
 8023890:	d002      	beq.n	8023898 <find_volume+0x140>
 8023892:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8023894:	3b01      	subs	r3, #1
 8023896:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 8023898:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 802389a:	009b      	lsls	r3, r3, #2
 802389c:	f107 0258 	add.w	r2, r7, #88	; 0x58
 80238a0:	4413      	add	r3, r2
 80238a2:	f853 3c44 	ldr.w	r3, [r3, #-68]
 80238a6:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 80238a8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80238aa:	2b00      	cmp	r3, #0
 80238ac:	d005      	beq.n	80238ba <find_volume+0x162>
 80238ae:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80238b0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80238b2:	f7ff fefb 	bl	80236ac <check_fs>
 80238b6:	4603      	mov	r3, r0
 80238b8:	e000      	b.n	80238bc <find_volume+0x164>
 80238ba:	2303      	movs	r3, #3
 80238bc:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 80238c0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80238c4:	2b01      	cmp	r3, #1
 80238c6:	d905      	bls.n	80238d4 <find_volume+0x17c>
 80238c8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80238ca:	3301      	adds	r3, #1
 80238cc:	643b      	str	r3, [r7, #64]	; 0x40
 80238ce:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80238d0:	2b03      	cmp	r3, #3
 80238d2:	d9e1      	bls.n	8023898 <find_volume+0x140>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 80238d4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80238d8:	2b04      	cmp	r3, #4
 80238da:	d101      	bne.n	80238e0 <find_volume+0x188>
 80238dc:	2301      	movs	r3, #1
 80238de:	e17d      	b.n	8023bdc <find_volume+0x484>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 80238e0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80238e4:	2b01      	cmp	r3, #1
 80238e6:	d901      	bls.n	80238ec <find_volume+0x194>
 80238e8:	230d      	movs	r3, #13
 80238ea:	e177      	b.n	8023bdc <find_volume+0x484>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 80238ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80238ee:	3330      	adds	r3, #48	; 0x30
 80238f0:	330b      	adds	r3, #11
 80238f2:	4618      	mov	r0, r3
 80238f4:	f7fe fd42 	bl	802237c <ld_word>
 80238f8:	4603      	mov	r3, r0
 80238fa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80238fe:	d001      	beq.n	8023904 <find_volume+0x1ac>
 8023900:	230d      	movs	r3, #13
 8023902:	e16b      	b.n	8023bdc <find_volume+0x484>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8023904:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8023906:	3330      	adds	r3, #48	; 0x30
 8023908:	3316      	adds	r3, #22
 802390a:	4618      	mov	r0, r3
 802390c:	f7fe fd36 	bl	802237c <ld_word>
 8023910:	4603      	mov	r3, r0
 8023912:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8023914:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8023916:	2b00      	cmp	r3, #0
 8023918:	d106      	bne.n	8023928 <find_volume+0x1d0>
 802391a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 802391c:	3330      	adds	r3, #48	; 0x30
 802391e:	3324      	adds	r3, #36	; 0x24
 8023920:	4618      	mov	r0, r3
 8023922:	f7fe fd43 	bl	80223ac <ld_dword>
 8023926:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 8023928:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 802392a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 802392c:	619a      	str	r2, [r3, #24]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 802392e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8023930:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
 8023934:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8023936:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8023938:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 802393a:	789b      	ldrb	r3, [r3, #2]
 802393c:	2b01      	cmp	r3, #1
 802393e:	d005      	beq.n	802394c <find_volume+0x1f4>
 8023940:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8023942:	789b      	ldrb	r3, [r3, #2]
 8023944:	2b02      	cmp	r3, #2
 8023946:	d001      	beq.n	802394c <find_volume+0x1f4>
 8023948:	230d      	movs	r3, #13
 802394a:	e147      	b.n	8023bdc <find_volume+0x484>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 802394c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 802394e:	789b      	ldrb	r3, [r3, #2]
 8023950:	461a      	mov	r2, r3
 8023952:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8023954:	fb02 f303 	mul.w	r3, r2, r3
 8023958:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 802395a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 802395c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8023960:	b29a      	uxth	r2, r3
 8023962:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8023964:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8023966:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8023968:	895b      	ldrh	r3, [r3, #10]
 802396a:	2b00      	cmp	r3, #0
 802396c:	d008      	beq.n	8023980 <find_volume+0x228>
 802396e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8023970:	895b      	ldrh	r3, [r3, #10]
 8023972:	461a      	mov	r2, r3
 8023974:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8023976:	895b      	ldrh	r3, [r3, #10]
 8023978:	3b01      	subs	r3, #1
 802397a:	4013      	ands	r3, r2
 802397c:	2b00      	cmp	r3, #0
 802397e:	d001      	beq.n	8023984 <find_volume+0x22c>
 8023980:	230d      	movs	r3, #13
 8023982:	e12b      	b.n	8023bdc <find_volume+0x484>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8023984:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8023986:	3330      	adds	r3, #48	; 0x30
 8023988:	3311      	adds	r3, #17
 802398a:	4618      	mov	r0, r3
 802398c:	f7fe fcf6 	bl	802237c <ld_word>
 8023990:	4603      	mov	r3, r0
 8023992:	461a      	mov	r2, r3
 8023994:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8023996:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8023998:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 802399a:	891b      	ldrh	r3, [r3, #8]
 802399c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80239a0:	b29b      	uxth	r3, r3
 80239a2:	2b00      	cmp	r3, #0
 80239a4:	d001      	beq.n	80239aa <find_volume+0x252>
 80239a6:	230d      	movs	r3, #13
 80239a8:	e118      	b.n	8023bdc <find_volume+0x484>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 80239aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80239ac:	3330      	adds	r3, #48	; 0x30
 80239ae:	3313      	adds	r3, #19
 80239b0:	4618      	mov	r0, r3
 80239b2:	f7fe fce3 	bl	802237c <ld_word>
 80239b6:	4603      	mov	r3, r0
 80239b8:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 80239ba:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80239bc:	2b00      	cmp	r3, #0
 80239be:	d106      	bne.n	80239ce <find_volume+0x276>
 80239c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80239c2:	3330      	adds	r3, #48	; 0x30
 80239c4:	3320      	adds	r3, #32
 80239c6:	4618      	mov	r0, r3
 80239c8:	f7fe fcf0 	bl	80223ac <ld_dword>
 80239cc:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 80239ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80239d0:	3330      	adds	r3, #48	; 0x30
 80239d2:	330e      	adds	r3, #14
 80239d4:	4618      	mov	r0, r3
 80239d6:	f7fe fcd1 	bl	802237c <ld_word>
 80239da:	4603      	mov	r3, r0
 80239dc:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 80239de:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80239e0:	2b00      	cmp	r3, #0
 80239e2:	d101      	bne.n	80239e8 <find_volume+0x290>
 80239e4:	230d      	movs	r3, #13
 80239e6:	e0f9      	b.n	8023bdc <find_volume+0x484>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 80239e8:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80239ea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80239ec:	4413      	add	r3, r2
 80239ee:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80239f0:	8912      	ldrh	r2, [r2, #8]
 80239f2:	09d2      	lsrs	r2, r2, #7
 80239f4:	b292      	uxth	r2, r2
 80239f6:	4413      	add	r3, r2
 80239f8:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 80239fa:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80239fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80239fe:	429a      	cmp	r2, r3
 8023a00:	d201      	bcs.n	8023a06 <find_volume+0x2ae>
 8023a02:	230d      	movs	r3, #13
 8023a04:	e0ea      	b.n	8023bdc <find_volume+0x484>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8023a06:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8023a08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8023a0a:	1ad3      	subs	r3, r2, r3
 8023a0c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8023a0e:	8952      	ldrh	r2, [r2, #10]
 8023a10:	fbb3 f3f2 	udiv	r3, r3, r2
 8023a14:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8023a16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8023a18:	2b00      	cmp	r3, #0
 8023a1a:	d103      	bne.n	8023a24 <find_volume+0x2cc>
 8023a1c:	230d      	movs	r3, #13
 8023a1e:	e0dd      	b.n	8023bdc <find_volume+0x484>
 8023a20:	200007ac 	.word	0x200007ac
		fmt = FS_FAT32;
 8023a24:	2303      	movs	r3, #3
 8023a26:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8023a2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8023a2c:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 8023a30:	4293      	cmp	r3, r2
 8023a32:	d802      	bhi.n	8023a3a <find_volume+0x2e2>
 8023a34:	2302      	movs	r3, #2
 8023a36:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8023a3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8023a3c:	f640 72f5 	movw	r2, #4085	; 0xff5
 8023a40:	4293      	cmp	r3, r2
 8023a42:	d802      	bhi.n	8023a4a <find_volume+0x2f2>
 8023a44:	2301      	movs	r3, #1
 8023a46:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8023a4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8023a4c:	1c9a      	adds	r2, r3, #2
 8023a4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8023a50:	615a      	str	r2, [r3, #20]
		fs->volbase = bsect;							/* Volume start sector */
 8023a52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8023a54:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8023a56:	61da      	str	r2, [r3, #28]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8023a58:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8023a5a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8023a5c:	441a      	add	r2, r3
 8023a5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8023a60:	621a      	str	r2, [r3, #32]
		fs->database = bsect + sysect;					/* Data start sector */
 8023a62:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8023a64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8023a66:	441a      	add	r2, r3
 8023a68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8023a6a:	629a      	str	r2, [r3, #40]	; 0x28
		if (fmt == FS_FAT32) {
 8023a6c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8023a70:	2b03      	cmp	r3, #3
 8023a72:	d11e      	bne.n	8023ab2 <find_volume+0x35a>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8023a74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8023a76:	3330      	adds	r3, #48	; 0x30
 8023a78:	332a      	adds	r3, #42	; 0x2a
 8023a7a:	4618      	mov	r0, r3
 8023a7c:	f7fe fc7e 	bl	802237c <ld_word>
 8023a80:	4603      	mov	r3, r0
 8023a82:	2b00      	cmp	r3, #0
 8023a84:	d001      	beq.n	8023a8a <find_volume+0x332>
 8023a86:	230d      	movs	r3, #13
 8023a88:	e0a8      	b.n	8023bdc <find_volume+0x484>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8023a8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8023a8c:	891b      	ldrh	r3, [r3, #8]
 8023a8e:	2b00      	cmp	r3, #0
 8023a90:	d001      	beq.n	8023a96 <find_volume+0x33e>
 8023a92:	230d      	movs	r3, #13
 8023a94:	e0a2      	b.n	8023bdc <find_volume+0x484>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8023a96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8023a98:	3330      	adds	r3, #48	; 0x30
 8023a9a:	332c      	adds	r3, #44	; 0x2c
 8023a9c:	4618      	mov	r0, r3
 8023a9e:	f7fe fc85 	bl	80223ac <ld_dword>
 8023aa2:	4602      	mov	r2, r0
 8023aa4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8023aa6:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8023aa8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8023aaa:	695b      	ldr	r3, [r3, #20]
 8023aac:	009b      	lsls	r3, r3, #2
 8023aae:	647b      	str	r3, [r7, #68]	; 0x44
 8023ab0:	e01f      	b.n	8023af2 <find_volume+0x39a>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8023ab2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8023ab4:	891b      	ldrh	r3, [r3, #8]
 8023ab6:	2b00      	cmp	r3, #0
 8023ab8:	d101      	bne.n	8023abe <find_volume+0x366>
 8023aba:	230d      	movs	r3, #13
 8023abc:	e08e      	b.n	8023bdc <find_volume+0x484>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8023abe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8023ac0:	6a1a      	ldr	r2, [r3, #32]
 8023ac2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8023ac4:	441a      	add	r2, r3
 8023ac6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8023ac8:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8023aca:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8023ace:	2b02      	cmp	r3, #2
 8023ad0:	d103      	bne.n	8023ada <find_volume+0x382>
 8023ad2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8023ad4:	695b      	ldr	r3, [r3, #20]
 8023ad6:	005b      	lsls	r3, r3, #1
 8023ad8:	e00a      	b.n	8023af0 <find_volume+0x398>
 8023ada:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8023adc:	695a      	ldr	r2, [r3, #20]
 8023ade:	4613      	mov	r3, r2
 8023ae0:	005b      	lsls	r3, r3, #1
 8023ae2:	4413      	add	r3, r2
 8023ae4:	085a      	lsrs	r2, r3, #1
 8023ae6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8023ae8:	695b      	ldr	r3, [r3, #20]
 8023aea:	f003 0301 	and.w	r3, r3, #1
 8023aee:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 8023af0:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8023af2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8023af4:	699a      	ldr	r2, [r3, #24]
 8023af6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8023af8:	f603 73ff 	addw	r3, r3, #4095	; 0xfff
 8023afc:	0b1b      	lsrs	r3, r3, #12
 8023afe:	429a      	cmp	r2, r3
 8023b00:	d201      	bcs.n	8023b06 <find_volume+0x3ae>
 8023b02:	230d      	movs	r3, #13
 8023b04:	e06a      	b.n	8023bdc <find_volume+0x484>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8023b06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8023b08:	f04f 32ff 	mov.w	r2, #4294967295
 8023b0c:	611a      	str	r2, [r3, #16]
 8023b0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8023b10:	691a      	ldr	r2, [r3, #16]
 8023b12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8023b14:	60da      	str	r2, [r3, #12]
		fs->fsi_flag = 0x80;
 8023b16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8023b18:	2280      	movs	r2, #128	; 0x80
 8023b1a:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8023b1c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8023b20:	2b03      	cmp	r3, #3
 8023b22:	d149      	bne.n	8023bb8 <find_volume+0x460>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8023b24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8023b26:	3330      	adds	r3, #48	; 0x30
 8023b28:	3330      	adds	r3, #48	; 0x30
 8023b2a:	4618      	mov	r0, r3
 8023b2c:	f7fe fc26 	bl	802237c <ld_word>
 8023b30:	4603      	mov	r3, r0
 8023b32:	2b01      	cmp	r3, #1
 8023b34:	d140      	bne.n	8023bb8 <find_volume+0x460>
			&& move_window(fs, bsect + 1) == FR_OK)
 8023b36:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8023b38:	3301      	adds	r3, #1
 8023b3a:	4619      	mov	r1, r3
 8023b3c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8023b3e:	f7fe fecd 	bl	80228dc <move_window>
 8023b42:	4603      	mov	r3, r0
 8023b44:	2b00      	cmp	r3, #0
 8023b46:	d137      	bne.n	8023bb8 <find_volume+0x460>
		{
			fs->fsi_flag = 0;
 8023b48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8023b4a:	2200      	movs	r2, #0
 8023b4c:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8023b4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8023b50:	3330      	adds	r3, #48	; 0x30
 8023b52:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8023b56:	4618      	mov	r0, r3
 8023b58:	f7fe fc10 	bl	802237c <ld_word>
 8023b5c:	4603      	mov	r3, r0
 8023b5e:	461a      	mov	r2, r3
 8023b60:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8023b64:	429a      	cmp	r2, r3
 8023b66:	d127      	bne.n	8023bb8 <find_volume+0x460>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8023b68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8023b6a:	3330      	adds	r3, #48	; 0x30
 8023b6c:	4618      	mov	r0, r3
 8023b6e:	f7fe fc1d 	bl	80223ac <ld_dword>
 8023b72:	4603      	mov	r3, r0
 8023b74:	4a1b      	ldr	r2, [pc, #108]	; (8023be4 <find_volume+0x48c>)
 8023b76:	4293      	cmp	r3, r2
 8023b78:	d11e      	bne.n	8023bb8 <find_volume+0x460>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8023b7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8023b7c:	3330      	adds	r3, #48	; 0x30
 8023b7e:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8023b82:	4618      	mov	r0, r3
 8023b84:	f7fe fc12 	bl	80223ac <ld_dword>
 8023b88:	4603      	mov	r3, r0
 8023b8a:	4a17      	ldr	r2, [pc, #92]	; (8023be8 <find_volume+0x490>)
 8023b8c:	4293      	cmp	r3, r2
 8023b8e:	d113      	bne.n	8023bb8 <find_volume+0x460>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8023b90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8023b92:	3330      	adds	r3, #48	; 0x30
 8023b94:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 8023b98:	4618      	mov	r0, r3
 8023b9a:	f7fe fc07 	bl	80223ac <ld_dword>
 8023b9e:	4602      	mov	r2, r0
 8023ba0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8023ba2:	611a      	str	r2, [r3, #16]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8023ba4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8023ba6:	3330      	adds	r3, #48	; 0x30
 8023ba8:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 8023bac:	4618      	mov	r0, r3
 8023bae:	f7fe fbfd 	bl	80223ac <ld_dword>
 8023bb2:	4602      	mov	r2, r0
 8023bb4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8023bb6:	60da      	str	r2, [r3, #12]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 8023bb8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8023bba:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8023bbe:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 8023bc0:	4b0a      	ldr	r3, [pc, #40]	; (8023bec <find_volume+0x494>)
 8023bc2:	881b      	ldrh	r3, [r3, #0]
 8023bc4:	3301      	adds	r3, #1
 8023bc6:	b29a      	uxth	r2, r3
 8023bc8:	4b08      	ldr	r3, [pc, #32]	; (8023bec <find_volume+0x494>)
 8023bca:	801a      	strh	r2, [r3, #0]
 8023bcc:	4b07      	ldr	r3, [pc, #28]	; (8023bec <find_volume+0x494>)
 8023bce:	881a      	ldrh	r2, [r3, #0]
 8023bd0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8023bd2:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 8023bd4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8023bd6:	f7fe fe19 	bl	802280c <clear_lock>
#endif
	return FR_OK;
 8023bda:	2300      	movs	r3, #0
}
 8023bdc:	4618      	mov	r0, r3
 8023bde:	3758      	adds	r7, #88	; 0x58
 8023be0:	46bd      	mov	sp, r7
 8023be2:	bd80      	pop	{r7, pc}
 8023be4:	41615252 	.word	0x41615252
 8023be8:	61417272 	.word	0x61417272
 8023bec:	200007b0 	.word	0x200007b0

08023bf0 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8023bf0:	b580      	push	{r7, lr}
 8023bf2:	b084      	sub	sp, #16
 8023bf4:	af00      	add	r7, sp, #0
 8023bf6:	6078      	str	r0, [r7, #4]
 8023bf8:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 8023bfa:	2309      	movs	r3, #9
 8023bfc:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8023bfe:	687b      	ldr	r3, [r7, #4]
 8023c00:	2b00      	cmp	r3, #0
 8023c02:	d01c      	beq.n	8023c3e <validate+0x4e>
 8023c04:	687b      	ldr	r3, [r7, #4]
 8023c06:	681b      	ldr	r3, [r3, #0]
 8023c08:	2b00      	cmp	r3, #0
 8023c0a:	d018      	beq.n	8023c3e <validate+0x4e>
 8023c0c:	687b      	ldr	r3, [r7, #4]
 8023c0e:	681b      	ldr	r3, [r3, #0]
 8023c10:	781b      	ldrb	r3, [r3, #0]
 8023c12:	2b00      	cmp	r3, #0
 8023c14:	d013      	beq.n	8023c3e <validate+0x4e>
 8023c16:	687b      	ldr	r3, [r7, #4]
 8023c18:	889a      	ldrh	r2, [r3, #4]
 8023c1a:	687b      	ldr	r3, [r7, #4]
 8023c1c:	681b      	ldr	r3, [r3, #0]
 8023c1e:	88db      	ldrh	r3, [r3, #6]
 8023c20:	429a      	cmp	r2, r3
 8023c22:	d10c      	bne.n	8023c3e <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8023c24:	687b      	ldr	r3, [r7, #4]
 8023c26:	681b      	ldr	r3, [r3, #0]
 8023c28:	785b      	ldrb	r3, [r3, #1]
 8023c2a:	4618      	mov	r0, r3
 8023c2c:	f7fe fb08 	bl	8022240 <disk_status>
 8023c30:	4603      	mov	r3, r0
 8023c32:	f003 0301 	and.w	r3, r3, #1
 8023c36:	2b00      	cmp	r3, #0
 8023c38:	d101      	bne.n	8023c3e <validate+0x4e>
			res = FR_OK;
 8023c3a:	2300      	movs	r3, #0
 8023c3c:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8023c3e:	7bfb      	ldrb	r3, [r7, #15]
 8023c40:	2b00      	cmp	r3, #0
 8023c42:	d102      	bne.n	8023c4a <validate+0x5a>
 8023c44:	687b      	ldr	r3, [r7, #4]
 8023c46:	681b      	ldr	r3, [r3, #0]
 8023c48:	e000      	b.n	8023c4c <validate+0x5c>
 8023c4a:	2300      	movs	r3, #0
 8023c4c:	683a      	ldr	r2, [r7, #0]
 8023c4e:	6013      	str	r3, [r2, #0]
	return res;
 8023c50:	7bfb      	ldrb	r3, [r7, #15]
}
 8023c52:	4618      	mov	r0, r3
 8023c54:	3710      	adds	r7, #16
 8023c56:	46bd      	mov	sp, r7
 8023c58:	bd80      	pop	{r7, pc}
	...

08023c5c <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8023c5c:	b580      	push	{r7, lr}
 8023c5e:	b088      	sub	sp, #32
 8023c60:	af00      	add	r7, sp, #0
 8023c62:	60f8      	str	r0, [r7, #12]
 8023c64:	60b9      	str	r1, [r7, #8]
 8023c66:	4613      	mov	r3, r2
 8023c68:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8023c6a:	68bb      	ldr	r3, [r7, #8]
 8023c6c:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 8023c6e:	f107 0310 	add.w	r3, r7, #16
 8023c72:	4618      	mov	r0, r3
 8023c74:	f7ff fcd5 	bl	8023622 <get_ldnumber>
 8023c78:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8023c7a:	69fb      	ldr	r3, [r7, #28]
 8023c7c:	2b00      	cmp	r3, #0
 8023c7e:	da01      	bge.n	8023c84 <f_mount+0x28>
 8023c80:	230b      	movs	r3, #11
 8023c82:	e02b      	b.n	8023cdc <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8023c84:	4a17      	ldr	r2, [pc, #92]	; (8023ce4 <f_mount+0x88>)
 8023c86:	69fb      	ldr	r3, [r7, #28]
 8023c88:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8023c8c:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8023c8e:	69bb      	ldr	r3, [r7, #24]
 8023c90:	2b00      	cmp	r3, #0
 8023c92:	d005      	beq.n	8023ca0 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8023c94:	69b8      	ldr	r0, [r7, #24]
 8023c96:	f7fe fdb9 	bl	802280c <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8023c9a:	69bb      	ldr	r3, [r7, #24]
 8023c9c:	2200      	movs	r2, #0
 8023c9e:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8023ca0:	68fb      	ldr	r3, [r7, #12]
 8023ca2:	2b00      	cmp	r3, #0
 8023ca4:	d002      	beq.n	8023cac <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 8023ca6:	68fb      	ldr	r3, [r7, #12]
 8023ca8:	2200      	movs	r2, #0
 8023caa:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8023cac:	68fa      	ldr	r2, [r7, #12]
 8023cae:	490d      	ldr	r1, [pc, #52]	; (8023ce4 <f_mount+0x88>)
 8023cb0:	69fb      	ldr	r3, [r7, #28]
 8023cb2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8023cb6:	68fb      	ldr	r3, [r7, #12]
 8023cb8:	2b00      	cmp	r3, #0
 8023cba:	d002      	beq.n	8023cc2 <f_mount+0x66>
 8023cbc:	79fb      	ldrb	r3, [r7, #7]
 8023cbe:	2b01      	cmp	r3, #1
 8023cc0:	d001      	beq.n	8023cc6 <f_mount+0x6a>
 8023cc2:	2300      	movs	r3, #0
 8023cc4:	e00a      	b.n	8023cdc <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 8023cc6:	f107 010c 	add.w	r1, r7, #12
 8023cca:	f107 0308 	add.w	r3, r7, #8
 8023cce:	2200      	movs	r2, #0
 8023cd0:	4618      	mov	r0, r3
 8023cd2:	f7ff fd41 	bl	8023758 <find_volume>
 8023cd6:	4603      	mov	r3, r0
 8023cd8:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8023cda:	7dfb      	ldrb	r3, [r7, #23]
}
 8023cdc:	4618      	mov	r0, r3
 8023cde:	3720      	adds	r7, #32
 8023ce0:	46bd      	mov	sp, r7
 8023ce2:	bd80      	pop	{r7, pc}
 8023ce4:	200007ac 	.word	0x200007ac

08023ce8 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8023ce8:	b580      	push	{r7, lr}
 8023cea:	b098      	sub	sp, #96	; 0x60
 8023cec:	af00      	add	r7, sp, #0
 8023cee:	60f8      	str	r0, [r7, #12]
 8023cf0:	60b9      	str	r1, [r7, #8]
 8023cf2:	4613      	mov	r3, r2
 8023cf4:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 8023cf6:	68fb      	ldr	r3, [r7, #12]
 8023cf8:	2b00      	cmp	r3, #0
 8023cfa:	d101      	bne.n	8023d00 <f_open+0x18>
 8023cfc:	2309      	movs	r3, #9
 8023cfe:	e1a9      	b.n	8024054 <f_open+0x36c>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8023d00:	79fb      	ldrb	r3, [r7, #7]
 8023d02:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8023d06:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 8023d08:	79fa      	ldrb	r2, [r7, #7]
 8023d0a:	f107 0110 	add.w	r1, r7, #16
 8023d0e:	f107 0308 	add.w	r3, r7, #8
 8023d12:	4618      	mov	r0, r3
 8023d14:	f7ff fd20 	bl	8023758 <find_volume>
 8023d18:	4603      	mov	r3, r0
 8023d1a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res == FR_OK) {
 8023d1e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8023d22:	2b00      	cmp	r3, #0
 8023d24:	f040 818d 	bne.w	8024042 <f_open+0x35a>
		dj.obj.fs = fs;
 8023d28:	693b      	ldr	r3, [r7, #16]
 8023d2a:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8023d2c:	68ba      	ldr	r2, [r7, #8]
 8023d2e:	f107 0314 	add.w	r3, r7, #20
 8023d32:	4611      	mov	r1, r2
 8023d34:	4618      	mov	r0, r3
 8023d36:	f7ff fc03 	bl	8023540 <follow_path>
 8023d3a:	4603      	mov	r3, r0
 8023d3c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8023d40:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8023d44:	2b00      	cmp	r3, #0
 8023d46:	d11a      	bne.n	8023d7e <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8023d48:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8023d4c:	b25b      	sxtb	r3, r3
 8023d4e:	2b00      	cmp	r3, #0
 8023d50:	da03      	bge.n	8023d5a <f_open+0x72>
				res = FR_INVALID_NAME;
 8023d52:	2306      	movs	r3, #6
 8023d54:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8023d58:	e011      	b.n	8023d7e <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8023d5a:	79fb      	ldrb	r3, [r7, #7]
 8023d5c:	f023 0301 	bic.w	r3, r3, #1
 8023d60:	2b00      	cmp	r3, #0
 8023d62:	bf14      	ite	ne
 8023d64:	2301      	movne	r3, #1
 8023d66:	2300      	moveq	r3, #0
 8023d68:	b2db      	uxtb	r3, r3
 8023d6a:	461a      	mov	r2, r3
 8023d6c:	f107 0314 	add.w	r3, r7, #20
 8023d70:	4611      	mov	r1, r2
 8023d72:	4618      	mov	r0, r3
 8023d74:	f7fe fc02 	bl	802257c <chk_lock>
 8023d78:	4603      	mov	r3, r0
 8023d7a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8023d7e:	79fb      	ldrb	r3, [r7, #7]
 8023d80:	f003 031c 	and.w	r3, r3, #28
 8023d84:	2b00      	cmp	r3, #0
 8023d86:	d07e      	beq.n	8023e86 <f_open+0x19e>
			if (res != FR_OK) {					/* No file, create new */
 8023d88:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8023d8c:	2b00      	cmp	r3, #0
 8023d8e:	d017      	beq.n	8023dc0 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8023d90:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8023d94:	2b04      	cmp	r3, #4
 8023d96:	d10e      	bne.n	8023db6 <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8023d98:	f7fe fc4c 	bl	8022634 <enq_lock>
 8023d9c:	4603      	mov	r3, r0
 8023d9e:	2b00      	cmp	r3, #0
 8023da0:	d006      	beq.n	8023db0 <f_open+0xc8>
 8023da2:	f107 0314 	add.w	r3, r7, #20
 8023da6:	4618      	mov	r0, r3
 8023da8:	f7ff fb04 	bl	80233b4 <dir_register>
 8023dac:	4603      	mov	r3, r0
 8023dae:	e000      	b.n	8023db2 <f_open+0xca>
 8023db0:	2312      	movs	r3, #18
 8023db2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8023db6:	79fb      	ldrb	r3, [r7, #7]
 8023db8:	f043 0308 	orr.w	r3, r3, #8
 8023dbc:	71fb      	strb	r3, [r7, #7]
 8023dbe:	e010      	b.n	8023de2 <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8023dc0:	7ebb      	ldrb	r3, [r7, #26]
 8023dc2:	f003 0311 	and.w	r3, r3, #17
 8023dc6:	2b00      	cmp	r3, #0
 8023dc8:	d003      	beq.n	8023dd2 <f_open+0xea>
					res = FR_DENIED;
 8023dca:	2307      	movs	r3, #7
 8023dcc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8023dd0:	e007      	b.n	8023de2 <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 8023dd2:	79fb      	ldrb	r3, [r7, #7]
 8023dd4:	f003 0304 	and.w	r3, r3, #4
 8023dd8:	2b00      	cmp	r3, #0
 8023dda:	d002      	beq.n	8023de2 <f_open+0xfa>
 8023ddc:	2308      	movs	r3, #8
 8023dde:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8023de2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8023de6:	2b00      	cmp	r3, #0
 8023de8:	d167      	bne.n	8023eba <f_open+0x1d2>
 8023dea:	79fb      	ldrb	r3, [r7, #7]
 8023dec:	f003 0308 	and.w	r3, r3, #8
 8023df0:	2b00      	cmp	r3, #0
 8023df2:	d062      	beq.n	8023eba <f_open+0x1d2>
				dw = GET_FATTIME();
 8023df4:	4b99      	ldr	r3, [pc, #612]	; (802405c <f_open+0x374>)
 8023df6:	653b      	str	r3, [r7, #80]	; 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 8023df8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8023dfa:	330e      	adds	r3, #14
 8023dfc:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8023dfe:	4618      	mov	r0, r3
 8023e00:	f7fe fb12 	bl	8022428 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 8023e04:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8023e06:	3316      	adds	r3, #22
 8023e08:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8023e0a:	4618      	mov	r0, r3
 8023e0c:	f7fe fb0c 	bl	8022428 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8023e10:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8023e12:	330b      	adds	r3, #11
 8023e14:	2220      	movs	r2, #32
 8023e16:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 8023e18:	693b      	ldr	r3, [r7, #16]
 8023e1a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8023e1c:	4611      	mov	r1, r2
 8023e1e:	4618      	mov	r0, r3
 8023e20:	f7ff fa34 	bl	802328c <ld_clust>
 8023e24:	64f8      	str	r0, [r7, #76]	; 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8023e26:	693b      	ldr	r3, [r7, #16]
 8023e28:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8023e2a:	2200      	movs	r2, #0
 8023e2c:	4618      	mov	r0, r3
 8023e2e:	f7ff fa4c 	bl	80232ca <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 8023e32:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8023e34:	331c      	adds	r3, #28
 8023e36:	2100      	movs	r1, #0
 8023e38:	4618      	mov	r0, r3
 8023e3a:	f7fe faf5 	bl	8022428 <st_dword>
					fs->wflag = 1;
 8023e3e:	693b      	ldr	r3, [r7, #16]
 8023e40:	2201      	movs	r2, #1
 8023e42:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 8023e44:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8023e46:	2b00      	cmp	r3, #0
 8023e48:	d037      	beq.n	8023eba <f_open+0x1d2>
						dw = fs->winsect;
 8023e4a:	693b      	ldr	r3, [r7, #16]
 8023e4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8023e4e:	653b      	str	r3, [r7, #80]	; 0x50
						res = remove_chain(&dj.obj, cl, 0);
 8023e50:	f107 0314 	add.w	r3, r7, #20
 8023e54:	2200      	movs	r2, #0
 8023e56:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8023e58:	4618      	mov	r0, r3
 8023e5a:	f7fe ff93 	bl	8022d84 <remove_chain>
 8023e5e:	4603      	mov	r3, r0
 8023e60:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						if (res == FR_OK) {
 8023e64:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8023e68:	2b00      	cmp	r3, #0
 8023e6a:	d126      	bne.n	8023eba <f_open+0x1d2>
							res = move_window(fs, dw);
 8023e6c:	693b      	ldr	r3, [r7, #16]
 8023e6e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8023e70:	4618      	mov	r0, r3
 8023e72:	f7fe fd33 	bl	80228dc <move_window>
 8023e76:	4603      	mov	r3, r0
 8023e78:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 8023e7c:	693b      	ldr	r3, [r7, #16]
 8023e7e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8023e80:	3a01      	subs	r2, #1
 8023e82:	60da      	str	r2, [r3, #12]
 8023e84:	e019      	b.n	8023eba <f_open+0x1d2>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 8023e86:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8023e8a:	2b00      	cmp	r3, #0
 8023e8c:	d115      	bne.n	8023eba <f_open+0x1d2>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 8023e8e:	7ebb      	ldrb	r3, [r7, #26]
 8023e90:	f003 0310 	and.w	r3, r3, #16
 8023e94:	2b00      	cmp	r3, #0
 8023e96:	d003      	beq.n	8023ea0 <f_open+0x1b8>
					res = FR_NO_FILE;
 8023e98:	2304      	movs	r3, #4
 8023e9a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8023e9e:	e00c      	b.n	8023eba <f_open+0x1d2>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 8023ea0:	79fb      	ldrb	r3, [r7, #7]
 8023ea2:	f003 0302 	and.w	r3, r3, #2
 8023ea6:	2b00      	cmp	r3, #0
 8023ea8:	d007      	beq.n	8023eba <f_open+0x1d2>
 8023eaa:	7ebb      	ldrb	r3, [r7, #26]
 8023eac:	f003 0301 	and.w	r3, r3, #1
 8023eb0:	2b00      	cmp	r3, #0
 8023eb2:	d002      	beq.n	8023eba <f_open+0x1d2>
						res = FR_DENIED;
 8023eb4:	2307      	movs	r3, #7
 8023eb6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 8023eba:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8023ebe:	2b00      	cmp	r3, #0
 8023ec0:	d128      	bne.n	8023f14 <f_open+0x22c>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8023ec2:	79fb      	ldrb	r3, [r7, #7]
 8023ec4:	f003 0308 	and.w	r3, r3, #8
 8023ec8:	2b00      	cmp	r3, #0
 8023eca:	d003      	beq.n	8023ed4 <f_open+0x1ec>
				mode |= FA_MODIFIED;
 8023ecc:	79fb      	ldrb	r3, [r7, #7]
 8023ece:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8023ed2:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8023ed4:	693b      	ldr	r3, [r7, #16]
 8023ed6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8023ed8:	68fb      	ldr	r3, [r7, #12]
 8023eda:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 8023edc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8023ede:	68fb      	ldr	r3, [r7, #12]
 8023ee0:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8023ee2:	79fb      	ldrb	r3, [r7, #7]
 8023ee4:	f023 0301 	bic.w	r3, r3, #1
 8023ee8:	2b00      	cmp	r3, #0
 8023eea:	bf14      	ite	ne
 8023eec:	2301      	movne	r3, #1
 8023eee:	2300      	moveq	r3, #0
 8023ef0:	b2db      	uxtb	r3, r3
 8023ef2:	461a      	mov	r2, r3
 8023ef4:	f107 0314 	add.w	r3, r7, #20
 8023ef8:	4611      	mov	r1, r2
 8023efa:	4618      	mov	r0, r3
 8023efc:	f7fe fbbc 	bl	8022678 <inc_lock>
 8023f00:	4602      	mov	r2, r0
 8023f02:	68fb      	ldr	r3, [r7, #12]
 8023f04:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 8023f06:	68fb      	ldr	r3, [r7, #12]
 8023f08:	691b      	ldr	r3, [r3, #16]
 8023f0a:	2b00      	cmp	r3, #0
 8023f0c:	d102      	bne.n	8023f14 <f_open+0x22c>
 8023f0e:	2302      	movs	r3, #2
 8023f10:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 8023f14:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8023f18:	2b00      	cmp	r3, #0
 8023f1a:	f040 8092 	bne.w	8024042 <f_open+0x35a>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8023f1e:	693b      	ldr	r3, [r7, #16]
 8023f20:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8023f22:	4611      	mov	r1, r2
 8023f24:	4618      	mov	r0, r3
 8023f26:	f7ff f9b1 	bl	802328c <ld_clust>
 8023f2a:	4602      	mov	r2, r0
 8023f2c:	68fb      	ldr	r3, [r7, #12]
 8023f2e:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8023f30:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8023f32:	331c      	adds	r3, #28
 8023f34:	4618      	mov	r0, r3
 8023f36:	f7fe fa39 	bl	80223ac <ld_dword>
 8023f3a:	4602      	mov	r2, r0
 8023f3c:	68fb      	ldr	r3, [r7, #12]
 8023f3e:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 8023f40:	693a      	ldr	r2, [r7, #16]
 8023f42:	68fb      	ldr	r3, [r7, #12]
 8023f44:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 8023f46:	693b      	ldr	r3, [r7, #16]
 8023f48:	88da      	ldrh	r2, [r3, #6]
 8023f4a:	68fb      	ldr	r3, [r7, #12]
 8023f4c:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 8023f4e:	68fb      	ldr	r3, [r7, #12]
 8023f50:	79fa      	ldrb	r2, [r7, #7]
 8023f52:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 8023f54:	68fb      	ldr	r3, [r7, #12]
 8023f56:	2200      	movs	r2, #0
 8023f58:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 8023f5a:	68fb      	ldr	r3, [r7, #12]
 8023f5c:	2200      	movs	r2, #0
 8023f5e:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 8023f60:	68fb      	ldr	r3, [r7, #12]
 8023f62:	2200      	movs	r2, #0
 8023f64:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 8023f66:	68fb      	ldr	r3, [r7, #12]
 8023f68:	332c      	adds	r3, #44	; 0x2c
 8023f6a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8023f6e:	2100      	movs	r1, #0
 8023f70:	4618      	mov	r0, r3
 8023f72:	f7fe faa6 	bl	80224c2 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 8023f76:	79fb      	ldrb	r3, [r7, #7]
 8023f78:	f003 0320 	and.w	r3, r3, #32
 8023f7c:	2b00      	cmp	r3, #0
 8023f7e:	d060      	beq.n	8024042 <f_open+0x35a>
 8023f80:	68fb      	ldr	r3, [r7, #12]
 8023f82:	68db      	ldr	r3, [r3, #12]
 8023f84:	2b00      	cmp	r3, #0
 8023f86:	d05c      	beq.n	8024042 <f_open+0x35a>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8023f88:	68fb      	ldr	r3, [r7, #12]
 8023f8a:	68da      	ldr	r2, [r3, #12]
 8023f8c:	68fb      	ldr	r3, [r7, #12]
 8023f8e:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8023f90:	693b      	ldr	r3, [r7, #16]
 8023f92:	895b      	ldrh	r3, [r3, #10]
 8023f94:	031b      	lsls	r3, r3, #12
 8023f96:	64bb      	str	r3, [r7, #72]	; 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8023f98:	68fb      	ldr	r3, [r7, #12]
 8023f9a:	689b      	ldr	r3, [r3, #8]
 8023f9c:	65bb      	str	r3, [r7, #88]	; 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8023f9e:	68fb      	ldr	r3, [r7, #12]
 8023fa0:	68db      	ldr	r3, [r3, #12]
 8023fa2:	657b      	str	r3, [r7, #84]	; 0x54
 8023fa4:	e016      	b.n	8023fd4 <f_open+0x2ec>
					clst = get_fat(&fp->obj, clst);
 8023fa6:	68fb      	ldr	r3, [r7, #12]
 8023fa8:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8023faa:	4618      	mov	r0, r3
 8023fac:	f7fe fd51 	bl	8022a52 <get_fat>
 8023fb0:	65b8      	str	r0, [r7, #88]	; 0x58
					if (clst <= 1) res = FR_INT_ERR;
 8023fb2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8023fb4:	2b01      	cmp	r3, #1
 8023fb6:	d802      	bhi.n	8023fbe <f_open+0x2d6>
 8023fb8:	2302      	movs	r3, #2
 8023fba:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 8023fbe:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8023fc0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8023fc4:	d102      	bne.n	8023fcc <f_open+0x2e4>
 8023fc6:	2301      	movs	r3, #1
 8023fc8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8023fcc:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8023fce:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8023fd0:	1ad3      	subs	r3, r2, r3
 8023fd2:	657b      	str	r3, [r7, #84]	; 0x54
 8023fd4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8023fd8:	2b00      	cmp	r3, #0
 8023fda:	d103      	bne.n	8023fe4 <f_open+0x2fc>
 8023fdc:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8023fde:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8023fe0:	429a      	cmp	r2, r3
 8023fe2:	d8e0      	bhi.n	8023fa6 <f_open+0x2be>
				}
				fp->clust = clst;
 8023fe4:	68fb      	ldr	r3, [r7, #12]
 8023fe6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8023fe8:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8023fea:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8023fee:	2b00      	cmp	r3, #0
 8023ff0:	d127      	bne.n	8024042 <f_open+0x35a>
 8023ff2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8023ff4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8023ff8:	2b00      	cmp	r3, #0
 8023ffa:	d022      	beq.n	8024042 <f_open+0x35a>
					if ((sc = clust2sect(fs, clst)) == 0) {
 8023ffc:	693b      	ldr	r3, [r7, #16]
 8023ffe:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8024000:	4618      	mov	r0, r3
 8024002:	f7fe fd07 	bl	8022a14 <clust2sect>
 8024006:	6478      	str	r0, [r7, #68]	; 0x44
 8024008:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 802400a:	2b00      	cmp	r3, #0
 802400c:	d103      	bne.n	8024016 <f_open+0x32e>
						res = FR_INT_ERR;
 802400e:	2302      	movs	r3, #2
 8024010:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8024014:	e015      	b.n	8024042 <f_open+0x35a>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 8024016:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8024018:	0b1a      	lsrs	r2, r3, #12
 802401a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 802401c:	441a      	add	r2, r3
 802401e:	68fb      	ldr	r3, [r7, #12]
 8024020:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 8024022:	693b      	ldr	r3, [r7, #16]
 8024024:	7858      	ldrb	r0, [r3, #1]
 8024026:	68fb      	ldr	r3, [r7, #12]
 8024028:	f103 012c 	add.w	r1, r3, #44	; 0x2c
 802402c:	68fb      	ldr	r3, [r7, #12]
 802402e:	6a1a      	ldr	r2, [r3, #32]
 8024030:	2301      	movs	r3, #1
 8024032:	f7fe f945 	bl	80222c0 <disk_read>
 8024036:	4603      	mov	r3, r0
 8024038:	2b00      	cmp	r3, #0
 802403a:	d002      	beq.n	8024042 <f_open+0x35a>
 802403c:	2301      	movs	r3, #1
 802403e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 8024042:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8024046:	2b00      	cmp	r3, #0
 8024048:	d002      	beq.n	8024050 <f_open+0x368>
 802404a:	68fb      	ldr	r3, [r7, #12]
 802404c:	2200      	movs	r2, #0
 802404e:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8024050:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 8024054:	4618      	mov	r0, r3
 8024056:	3760      	adds	r7, #96	; 0x60
 8024058:	46bd      	mov	sp, r7
 802405a:	bd80      	pop	{r7, pc}
 802405c:	53740000 	.word	0x53740000

08024060 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 8024060:	b580      	push	{r7, lr}
 8024062:	b08e      	sub	sp, #56	; 0x38
 8024064:	af00      	add	r7, sp, #0
 8024066:	60f8      	str	r0, [r7, #12]
 8024068:	60b9      	str	r1, [r7, #8]
 802406a:	607a      	str	r2, [r7, #4]
 802406c:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 802406e:	68bb      	ldr	r3, [r7, #8]
 8024070:	627b      	str	r3, [r7, #36]	; 0x24


	*br = 0;	/* Clear read byte counter */
 8024072:	683b      	ldr	r3, [r7, #0]
 8024074:	2200      	movs	r2, #0
 8024076:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 8024078:	68fb      	ldr	r3, [r7, #12]
 802407a:	f107 0214 	add.w	r2, r7, #20
 802407e:	4611      	mov	r1, r2
 8024080:	4618      	mov	r0, r3
 8024082:	f7ff fdb5 	bl	8023bf0 <validate>
 8024086:	4603      	mov	r3, r0
 8024088:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 802408c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8024090:	2b00      	cmp	r3, #0
 8024092:	d107      	bne.n	80240a4 <f_read+0x44>
 8024094:	68fb      	ldr	r3, [r7, #12]
 8024096:	7d5b      	ldrb	r3, [r3, #21]
 8024098:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 802409c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80240a0:	2b00      	cmp	r3, #0
 80240a2:	d002      	beq.n	80240aa <f_read+0x4a>
 80240a4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80240a8:	e0ef      	b.n	802428a <f_read+0x22a>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 80240aa:	68fb      	ldr	r3, [r7, #12]
 80240ac:	7d1b      	ldrb	r3, [r3, #20]
 80240ae:	f003 0301 	and.w	r3, r3, #1
 80240b2:	2b00      	cmp	r3, #0
 80240b4:	d101      	bne.n	80240ba <f_read+0x5a>
 80240b6:	2307      	movs	r3, #7
 80240b8:	e0e7      	b.n	802428a <f_read+0x22a>
	remain = fp->obj.objsize - fp->fptr;
 80240ba:	68fb      	ldr	r3, [r7, #12]
 80240bc:	68da      	ldr	r2, [r3, #12]
 80240be:	68fb      	ldr	r3, [r7, #12]
 80240c0:	699b      	ldr	r3, [r3, #24]
 80240c2:	1ad3      	subs	r3, r2, r3
 80240c4:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 80240c6:	687a      	ldr	r2, [r7, #4]
 80240c8:	6a3b      	ldr	r3, [r7, #32]
 80240ca:	429a      	cmp	r2, r3
 80240cc:	f240 80d8 	bls.w	8024280 <f_read+0x220>
 80240d0:	6a3b      	ldr	r3, [r7, #32]
 80240d2:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 80240d4:	e0d4      	b.n	8024280 <f_read+0x220>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 80240d6:	68fb      	ldr	r3, [r7, #12]
 80240d8:	699b      	ldr	r3, [r3, #24]
 80240da:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80240de:	2b00      	cmp	r3, #0
 80240e0:	f040 80a0 	bne.w	8024224 <f_read+0x1c4>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 80240e4:	68fb      	ldr	r3, [r7, #12]
 80240e6:	699b      	ldr	r3, [r3, #24]
 80240e8:	0b1b      	lsrs	r3, r3, #12
 80240ea:	697a      	ldr	r2, [r7, #20]
 80240ec:	8952      	ldrh	r2, [r2, #10]
 80240ee:	3a01      	subs	r2, #1
 80240f0:	4013      	ands	r3, r2
 80240f2:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 80240f4:	69fb      	ldr	r3, [r7, #28]
 80240f6:	2b00      	cmp	r3, #0
 80240f8:	d123      	bne.n	8024142 <f_read+0xe2>
				if (fp->fptr == 0) {			/* On the top of the file? */
 80240fa:	68fb      	ldr	r3, [r7, #12]
 80240fc:	699b      	ldr	r3, [r3, #24]
 80240fe:	2b00      	cmp	r3, #0
 8024100:	d103      	bne.n	802410a <f_read+0xaa>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 8024102:	68fb      	ldr	r3, [r7, #12]
 8024104:	689b      	ldr	r3, [r3, #8]
 8024106:	633b      	str	r3, [r7, #48]	; 0x30
 8024108:	e007      	b.n	802411a <f_read+0xba>
					if (fp->cltbl) {
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 802410a:	68fa      	ldr	r2, [r7, #12]
 802410c:	68fb      	ldr	r3, [r7, #12]
 802410e:	69db      	ldr	r3, [r3, #28]
 8024110:	4619      	mov	r1, r3
 8024112:	4610      	mov	r0, r2
 8024114:	f7fe fc9d 	bl	8022a52 <get_fat>
 8024118:	6338      	str	r0, [r7, #48]	; 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 802411a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 802411c:	2b01      	cmp	r3, #1
 802411e:	d804      	bhi.n	802412a <f_read+0xca>
 8024120:	68fb      	ldr	r3, [r7, #12]
 8024122:	2202      	movs	r2, #2
 8024124:	755a      	strb	r2, [r3, #21]
 8024126:	2302      	movs	r3, #2
 8024128:	e0af      	b.n	802428a <f_read+0x22a>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 802412a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 802412c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8024130:	d104      	bne.n	802413c <f_read+0xdc>
 8024132:	68fb      	ldr	r3, [r7, #12]
 8024134:	2201      	movs	r2, #1
 8024136:	755a      	strb	r2, [r3, #21]
 8024138:	2301      	movs	r3, #1
 802413a:	e0a6      	b.n	802428a <f_read+0x22a>
				fp->clust = clst;				/* Update current cluster */
 802413c:	68fb      	ldr	r3, [r7, #12]
 802413e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8024140:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8024142:	697a      	ldr	r2, [r7, #20]
 8024144:	68fb      	ldr	r3, [r7, #12]
 8024146:	69db      	ldr	r3, [r3, #28]
 8024148:	4619      	mov	r1, r3
 802414a:	4610      	mov	r0, r2
 802414c:	f7fe fc62 	bl	8022a14 <clust2sect>
 8024150:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8024152:	69bb      	ldr	r3, [r7, #24]
 8024154:	2b00      	cmp	r3, #0
 8024156:	d104      	bne.n	8024162 <f_read+0x102>
 8024158:	68fb      	ldr	r3, [r7, #12]
 802415a:	2202      	movs	r2, #2
 802415c:	755a      	strb	r2, [r3, #21]
 802415e:	2302      	movs	r3, #2
 8024160:	e093      	b.n	802428a <f_read+0x22a>
			sect += csect;
 8024162:	69ba      	ldr	r2, [r7, #24]
 8024164:	69fb      	ldr	r3, [r7, #28]
 8024166:	4413      	add	r3, r2
 8024168:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 802416a:	687b      	ldr	r3, [r7, #4]
 802416c:	0b1b      	lsrs	r3, r3, #12
 802416e:	62bb      	str	r3, [r7, #40]	; 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 8024170:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8024172:	2b00      	cmp	r3, #0
 8024174:	d01f      	beq.n	80241b6 <f_read+0x156>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8024176:	69fa      	ldr	r2, [r7, #28]
 8024178:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802417a:	4413      	add	r3, r2
 802417c:	697a      	ldr	r2, [r7, #20]
 802417e:	8952      	ldrh	r2, [r2, #10]
 8024180:	4293      	cmp	r3, r2
 8024182:	d905      	bls.n	8024190 <f_read+0x130>
					cc = fs->csize - csect;
 8024184:	697b      	ldr	r3, [r7, #20]
 8024186:	895b      	ldrh	r3, [r3, #10]
 8024188:	461a      	mov	r2, r3
 802418a:	69fb      	ldr	r3, [r7, #28]
 802418c:	1ad3      	subs	r3, r2, r3
 802418e:	62bb      	str	r3, [r7, #40]	; 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8024190:	697b      	ldr	r3, [r7, #20]
 8024192:	7858      	ldrb	r0, [r3, #1]
 8024194:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8024196:	69ba      	ldr	r2, [r7, #24]
 8024198:	6a79      	ldr	r1, [r7, #36]	; 0x24
 802419a:	f7fe f891 	bl	80222c0 <disk_read>
 802419e:	4603      	mov	r3, r0
 80241a0:	2b00      	cmp	r3, #0
 80241a2:	d004      	beq.n	80241ae <f_read+0x14e>
 80241a4:	68fb      	ldr	r3, [r7, #12]
 80241a6:	2201      	movs	r2, #1
 80241a8:	755a      	strb	r2, [r3, #21]
 80241aa:	2301      	movs	r3, #1
 80241ac:	e06d      	b.n	802428a <f_read+0x22a>
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 80241ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80241b0:	031b      	lsls	r3, r3, #12
 80241b2:	62fb      	str	r3, [r7, #44]	; 0x2c
				continue;
 80241b4:	e050      	b.n	8024258 <f_read+0x1f8>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 80241b6:	68fb      	ldr	r3, [r7, #12]
 80241b8:	6a1b      	ldr	r3, [r3, #32]
 80241ba:	69ba      	ldr	r2, [r7, #24]
 80241bc:	429a      	cmp	r2, r3
 80241be:	d02e      	beq.n	802421e <f_read+0x1be>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 80241c0:	68fb      	ldr	r3, [r7, #12]
 80241c2:	7d1b      	ldrb	r3, [r3, #20]
 80241c4:	b25b      	sxtb	r3, r3
 80241c6:	2b00      	cmp	r3, #0
 80241c8:	da18      	bge.n	80241fc <f_read+0x19c>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80241ca:	697b      	ldr	r3, [r7, #20]
 80241cc:	7858      	ldrb	r0, [r3, #1]
 80241ce:	68fb      	ldr	r3, [r7, #12]
 80241d0:	f103 012c 	add.w	r1, r3, #44	; 0x2c
 80241d4:	68fb      	ldr	r3, [r7, #12]
 80241d6:	6a1a      	ldr	r2, [r3, #32]
 80241d8:	2301      	movs	r3, #1
 80241da:	f7fe f891 	bl	8022300 <disk_write>
 80241de:	4603      	mov	r3, r0
 80241e0:	2b00      	cmp	r3, #0
 80241e2:	d004      	beq.n	80241ee <f_read+0x18e>
 80241e4:	68fb      	ldr	r3, [r7, #12]
 80241e6:	2201      	movs	r2, #1
 80241e8:	755a      	strb	r2, [r3, #21]
 80241ea:	2301      	movs	r3, #1
 80241ec:	e04d      	b.n	802428a <f_read+0x22a>
					fp->flag &= (BYTE)~FA_DIRTY;
 80241ee:	68fb      	ldr	r3, [r7, #12]
 80241f0:	7d1b      	ldrb	r3, [r3, #20]
 80241f2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80241f6:	b2da      	uxtb	r2, r3
 80241f8:	68fb      	ldr	r3, [r7, #12]
 80241fa:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 80241fc:	697b      	ldr	r3, [r7, #20]
 80241fe:	7858      	ldrb	r0, [r3, #1]
 8024200:	68fb      	ldr	r3, [r7, #12]
 8024202:	f103 012c 	add.w	r1, r3, #44	; 0x2c
 8024206:	2301      	movs	r3, #1
 8024208:	69ba      	ldr	r2, [r7, #24]
 802420a:	f7fe f859 	bl	80222c0 <disk_read>
 802420e:	4603      	mov	r3, r0
 8024210:	2b00      	cmp	r3, #0
 8024212:	d004      	beq.n	802421e <f_read+0x1be>
 8024214:	68fb      	ldr	r3, [r7, #12]
 8024216:	2201      	movs	r2, #1
 8024218:	755a      	strb	r2, [r3, #21]
 802421a:	2301      	movs	r3, #1
 802421c:	e035      	b.n	802428a <f_read+0x22a>
			}
#endif
			fp->sect = sect;
 802421e:	68fb      	ldr	r3, [r7, #12]
 8024220:	69ba      	ldr	r2, [r7, #24]
 8024222:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8024224:	68fb      	ldr	r3, [r7, #12]
 8024226:	699b      	ldr	r3, [r3, #24]
 8024228:	f3c3 030b 	ubfx	r3, r3, #0, #12
 802422c:	f5c3 5380 	rsb	r3, r3, #4096	; 0x1000
 8024230:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 8024232:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8024234:	687b      	ldr	r3, [r7, #4]
 8024236:	429a      	cmp	r2, r3
 8024238:	d901      	bls.n	802423e <f_read+0x1de>
 802423a:	687b      	ldr	r3, [r7, #4]
 802423c:	62fb      	str	r3, [r7, #44]	; 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 802423e:	68fb      	ldr	r3, [r7, #12]
 8024240:	f103 022c 	add.w	r2, r3, #44	; 0x2c
 8024244:	68fb      	ldr	r3, [r7, #12]
 8024246:	699b      	ldr	r3, [r3, #24]
 8024248:	f3c3 030b 	ubfx	r3, r3, #0, #12
 802424c:	4413      	add	r3, r2
 802424e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8024250:	4619      	mov	r1, r3
 8024252:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8024254:	f7fe f914 	bl	8022480 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 8024258:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 802425a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802425c:	4413      	add	r3, r2
 802425e:	627b      	str	r3, [r7, #36]	; 0x24
 8024260:	68fb      	ldr	r3, [r7, #12]
 8024262:	699a      	ldr	r2, [r3, #24]
 8024264:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8024266:	441a      	add	r2, r3
 8024268:	68fb      	ldr	r3, [r7, #12]
 802426a:	619a      	str	r2, [r3, #24]
 802426c:	683b      	ldr	r3, [r7, #0]
 802426e:	681a      	ldr	r2, [r3, #0]
 8024270:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8024272:	441a      	add	r2, r3
 8024274:	683b      	ldr	r3, [r7, #0]
 8024276:	601a      	str	r2, [r3, #0]
 8024278:	687a      	ldr	r2, [r7, #4]
 802427a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802427c:	1ad3      	subs	r3, r2, r3
 802427e:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 8024280:	687b      	ldr	r3, [r7, #4]
 8024282:	2b00      	cmp	r3, #0
 8024284:	f47f af27 	bne.w	80240d6 <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 8024288:	2300      	movs	r3, #0
}
 802428a:	4618      	mov	r0, r3
 802428c:	3738      	adds	r7, #56	; 0x38
 802428e:	46bd      	mov	sp, r7
 8024290:	bd80      	pop	{r7, pc}

08024292 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 8024292:	b580      	push	{r7, lr}
 8024294:	b08c      	sub	sp, #48	; 0x30
 8024296:	af00      	add	r7, sp, #0
 8024298:	60f8      	str	r0, [r7, #12]
 802429a:	60b9      	str	r1, [r7, #8]
 802429c:	607a      	str	r2, [r7, #4]
 802429e:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 80242a0:	68bb      	ldr	r3, [r7, #8]
 80242a2:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 80242a4:	683b      	ldr	r3, [r7, #0]
 80242a6:	2200      	movs	r2, #0
 80242a8:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 80242aa:	68fb      	ldr	r3, [r7, #12]
 80242ac:	f107 0210 	add.w	r2, r7, #16
 80242b0:	4611      	mov	r1, r2
 80242b2:	4618      	mov	r0, r3
 80242b4:	f7ff fc9c 	bl	8023bf0 <validate>
 80242b8:	4603      	mov	r3, r0
 80242ba:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 80242be:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80242c2:	2b00      	cmp	r3, #0
 80242c4:	d107      	bne.n	80242d6 <f_write+0x44>
 80242c6:	68fb      	ldr	r3, [r7, #12]
 80242c8:	7d5b      	ldrb	r3, [r3, #21]
 80242ca:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 80242ce:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80242d2:	2b00      	cmp	r3, #0
 80242d4:	d002      	beq.n	80242dc <f_write+0x4a>
 80242d6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80242da:	e122      	b.n	8024522 <f_write+0x290>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 80242dc:	68fb      	ldr	r3, [r7, #12]
 80242de:	7d1b      	ldrb	r3, [r3, #20]
 80242e0:	f003 0302 	and.w	r3, r3, #2
 80242e4:	2b00      	cmp	r3, #0
 80242e6:	d101      	bne.n	80242ec <f_write+0x5a>
 80242e8:	2307      	movs	r3, #7
 80242ea:	e11a      	b.n	8024522 <f_write+0x290>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 80242ec:	68fb      	ldr	r3, [r7, #12]
 80242ee:	699a      	ldr	r2, [r3, #24]
 80242f0:	687b      	ldr	r3, [r7, #4]
 80242f2:	441a      	add	r2, r3
 80242f4:	68fb      	ldr	r3, [r7, #12]
 80242f6:	699b      	ldr	r3, [r3, #24]
 80242f8:	429a      	cmp	r2, r3
 80242fa:	f080 8104 	bcs.w	8024506 <f_write+0x274>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 80242fe:	68fb      	ldr	r3, [r7, #12]
 8024300:	699b      	ldr	r3, [r3, #24]
 8024302:	43db      	mvns	r3, r3
 8024304:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 8024306:	e0fe      	b.n	8024506 <f_write+0x274>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 8024308:	68fb      	ldr	r3, [r7, #12]
 802430a:	699b      	ldr	r3, [r3, #24]
 802430c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8024310:	2b00      	cmp	r3, #0
 8024312:	f040 80ba 	bne.w	802448a <f_write+0x1f8>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 8024316:	68fb      	ldr	r3, [r7, #12]
 8024318:	699b      	ldr	r3, [r3, #24]
 802431a:	0b1b      	lsrs	r3, r3, #12
 802431c:	693a      	ldr	r2, [r7, #16]
 802431e:	8952      	ldrh	r2, [r2, #10]
 8024320:	3a01      	subs	r2, #1
 8024322:	4013      	ands	r3, r2
 8024324:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 8024326:	69bb      	ldr	r3, [r7, #24]
 8024328:	2b00      	cmp	r3, #0
 802432a:	d137      	bne.n	802439c <f_write+0x10a>
				if (fp->fptr == 0) {		/* On the top of the file? */
 802432c:	68fb      	ldr	r3, [r7, #12]
 802432e:	699b      	ldr	r3, [r3, #24]
 8024330:	2b00      	cmp	r3, #0
 8024332:	d10c      	bne.n	802434e <f_write+0xbc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 8024334:	68fb      	ldr	r3, [r7, #12]
 8024336:	689b      	ldr	r3, [r3, #8]
 8024338:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 802433a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802433c:	2b00      	cmp	r3, #0
 802433e:	d10e      	bne.n	802435e <f_write+0xcc>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 8024340:	68fb      	ldr	r3, [r7, #12]
 8024342:	2100      	movs	r1, #0
 8024344:	4618      	mov	r0, r3
 8024346:	f7fe fd82 	bl	8022e4e <create_chain>
 802434a:	62b8      	str	r0, [r7, #40]	; 0x28
 802434c:	e007      	b.n	802435e <f_write+0xcc>
					if (fp->cltbl) {
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 802434e:	68fa      	ldr	r2, [r7, #12]
 8024350:	68fb      	ldr	r3, [r7, #12]
 8024352:	69db      	ldr	r3, [r3, #28]
 8024354:	4619      	mov	r1, r3
 8024356:	4610      	mov	r0, r2
 8024358:	f7fe fd79 	bl	8022e4e <create_chain>
 802435c:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 802435e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8024360:	2b00      	cmp	r3, #0
 8024362:	f000 80d5 	beq.w	8024510 <f_write+0x27e>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 8024366:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8024368:	2b01      	cmp	r3, #1
 802436a:	d104      	bne.n	8024376 <f_write+0xe4>
 802436c:	68fb      	ldr	r3, [r7, #12]
 802436e:	2202      	movs	r2, #2
 8024370:	755a      	strb	r2, [r3, #21]
 8024372:	2302      	movs	r3, #2
 8024374:	e0d5      	b.n	8024522 <f_write+0x290>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8024376:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8024378:	f1b3 3fff 	cmp.w	r3, #4294967295
 802437c:	d104      	bne.n	8024388 <f_write+0xf6>
 802437e:	68fb      	ldr	r3, [r7, #12]
 8024380:	2201      	movs	r2, #1
 8024382:	755a      	strb	r2, [r3, #21]
 8024384:	2301      	movs	r3, #1
 8024386:	e0cc      	b.n	8024522 <f_write+0x290>
				fp->clust = clst;			/* Update current cluster */
 8024388:	68fb      	ldr	r3, [r7, #12]
 802438a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 802438c:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 802438e:	68fb      	ldr	r3, [r7, #12]
 8024390:	689b      	ldr	r3, [r3, #8]
 8024392:	2b00      	cmp	r3, #0
 8024394:	d102      	bne.n	802439c <f_write+0x10a>
 8024396:	68fb      	ldr	r3, [r7, #12]
 8024398:	6aba      	ldr	r2, [r7, #40]	; 0x28
 802439a:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 802439c:	68fb      	ldr	r3, [r7, #12]
 802439e:	7d1b      	ldrb	r3, [r3, #20]
 80243a0:	b25b      	sxtb	r3, r3
 80243a2:	2b00      	cmp	r3, #0
 80243a4:	da18      	bge.n	80243d8 <f_write+0x146>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80243a6:	693b      	ldr	r3, [r7, #16]
 80243a8:	7858      	ldrb	r0, [r3, #1]
 80243aa:	68fb      	ldr	r3, [r7, #12]
 80243ac:	f103 012c 	add.w	r1, r3, #44	; 0x2c
 80243b0:	68fb      	ldr	r3, [r7, #12]
 80243b2:	6a1a      	ldr	r2, [r3, #32]
 80243b4:	2301      	movs	r3, #1
 80243b6:	f7fd ffa3 	bl	8022300 <disk_write>
 80243ba:	4603      	mov	r3, r0
 80243bc:	2b00      	cmp	r3, #0
 80243be:	d004      	beq.n	80243ca <f_write+0x138>
 80243c0:	68fb      	ldr	r3, [r7, #12]
 80243c2:	2201      	movs	r2, #1
 80243c4:	755a      	strb	r2, [r3, #21]
 80243c6:	2301      	movs	r3, #1
 80243c8:	e0ab      	b.n	8024522 <f_write+0x290>
				fp->flag &= (BYTE)~FA_DIRTY;
 80243ca:	68fb      	ldr	r3, [r7, #12]
 80243cc:	7d1b      	ldrb	r3, [r3, #20]
 80243ce:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80243d2:	b2da      	uxtb	r2, r3
 80243d4:	68fb      	ldr	r3, [r7, #12]
 80243d6:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 80243d8:	693a      	ldr	r2, [r7, #16]
 80243da:	68fb      	ldr	r3, [r7, #12]
 80243dc:	69db      	ldr	r3, [r3, #28]
 80243de:	4619      	mov	r1, r3
 80243e0:	4610      	mov	r0, r2
 80243e2:	f7fe fb17 	bl	8022a14 <clust2sect>
 80243e6:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 80243e8:	697b      	ldr	r3, [r7, #20]
 80243ea:	2b00      	cmp	r3, #0
 80243ec:	d104      	bne.n	80243f8 <f_write+0x166>
 80243ee:	68fb      	ldr	r3, [r7, #12]
 80243f0:	2202      	movs	r2, #2
 80243f2:	755a      	strb	r2, [r3, #21]
 80243f4:	2302      	movs	r3, #2
 80243f6:	e094      	b.n	8024522 <f_write+0x290>
			sect += csect;
 80243f8:	697a      	ldr	r2, [r7, #20]
 80243fa:	69bb      	ldr	r3, [r7, #24]
 80243fc:	4413      	add	r3, r2
 80243fe:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 8024400:	687b      	ldr	r3, [r7, #4]
 8024402:	0b1b      	lsrs	r3, r3, #12
 8024404:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 8024406:	6a3b      	ldr	r3, [r7, #32]
 8024408:	2b00      	cmp	r3, #0
 802440a:	d01f      	beq.n	802444c <f_write+0x1ba>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 802440c:	69ba      	ldr	r2, [r7, #24]
 802440e:	6a3b      	ldr	r3, [r7, #32]
 8024410:	4413      	add	r3, r2
 8024412:	693a      	ldr	r2, [r7, #16]
 8024414:	8952      	ldrh	r2, [r2, #10]
 8024416:	4293      	cmp	r3, r2
 8024418:	d905      	bls.n	8024426 <f_write+0x194>
					cc = fs->csize - csect;
 802441a:	693b      	ldr	r3, [r7, #16]
 802441c:	895b      	ldrh	r3, [r3, #10]
 802441e:	461a      	mov	r2, r3
 8024420:	69bb      	ldr	r3, [r7, #24]
 8024422:	1ad3      	subs	r3, r2, r3
 8024424:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8024426:	693b      	ldr	r3, [r7, #16]
 8024428:	7858      	ldrb	r0, [r3, #1]
 802442a:	6a3b      	ldr	r3, [r7, #32]
 802442c:	697a      	ldr	r2, [r7, #20]
 802442e:	69f9      	ldr	r1, [r7, #28]
 8024430:	f7fd ff66 	bl	8022300 <disk_write>
 8024434:	4603      	mov	r3, r0
 8024436:	2b00      	cmp	r3, #0
 8024438:	d004      	beq.n	8024444 <f_write+0x1b2>
 802443a:	68fb      	ldr	r3, [r7, #12]
 802443c:	2201      	movs	r2, #1
 802443e:	755a      	strb	r2, [r3, #21]
 8024440:	2301      	movs	r3, #1
 8024442:	e06e      	b.n	8024522 <f_write+0x290>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
					fp->flag &= (BYTE)~FA_DIRTY;
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 8024444:	6a3b      	ldr	r3, [r7, #32]
 8024446:	031b      	lsls	r3, r3, #12
 8024448:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 802444a:	e03f      	b.n	80244cc <f_write+0x23a>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 802444c:	68fb      	ldr	r3, [r7, #12]
 802444e:	6a1b      	ldr	r3, [r3, #32]
 8024450:	697a      	ldr	r2, [r7, #20]
 8024452:	429a      	cmp	r2, r3
 8024454:	d016      	beq.n	8024484 <f_write+0x1f2>
				fp->fptr < fp->obj.objsize &&
 8024456:	68fb      	ldr	r3, [r7, #12]
 8024458:	699a      	ldr	r2, [r3, #24]
 802445a:	68fb      	ldr	r3, [r7, #12]
 802445c:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 802445e:	429a      	cmp	r2, r3
 8024460:	d210      	bcs.n	8024484 <f_write+0x1f2>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 8024462:	693b      	ldr	r3, [r7, #16]
 8024464:	7858      	ldrb	r0, [r3, #1]
 8024466:	68fb      	ldr	r3, [r7, #12]
 8024468:	f103 012c 	add.w	r1, r3, #44	; 0x2c
 802446c:	2301      	movs	r3, #1
 802446e:	697a      	ldr	r2, [r7, #20]
 8024470:	f7fd ff26 	bl	80222c0 <disk_read>
 8024474:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 8024476:	2b00      	cmp	r3, #0
 8024478:	d004      	beq.n	8024484 <f_write+0x1f2>
					ABORT(fs, FR_DISK_ERR);
 802447a:	68fb      	ldr	r3, [r7, #12]
 802447c:	2201      	movs	r2, #1
 802447e:	755a      	strb	r2, [r3, #21]
 8024480:	2301      	movs	r3, #1
 8024482:	e04e      	b.n	8024522 <f_write+0x290>
			}
#endif
			fp->sect = sect;
 8024484:	68fb      	ldr	r3, [r7, #12]
 8024486:	697a      	ldr	r2, [r7, #20]
 8024488:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 802448a:	68fb      	ldr	r3, [r7, #12]
 802448c:	699b      	ldr	r3, [r3, #24]
 802448e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8024492:	f5c3 5380 	rsb	r3, r3, #4096	; 0x1000
 8024496:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 8024498:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 802449a:	687b      	ldr	r3, [r7, #4]
 802449c:	429a      	cmp	r2, r3
 802449e:	d901      	bls.n	80244a4 <f_write+0x212>
 80244a0:	687b      	ldr	r3, [r7, #4]
 80244a2:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 80244a4:	68fb      	ldr	r3, [r7, #12]
 80244a6:	f103 022c 	add.w	r2, r3, #44	; 0x2c
 80244aa:	68fb      	ldr	r3, [r7, #12]
 80244ac:	699b      	ldr	r3, [r3, #24]
 80244ae:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80244b2:	4413      	add	r3, r2
 80244b4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80244b6:	69f9      	ldr	r1, [r7, #28]
 80244b8:	4618      	mov	r0, r3
 80244ba:	f7fd ffe1 	bl	8022480 <mem_cpy>
		fp->flag |= FA_DIRTY;
 80244be:	68fb      	ldr	r3, [r7, #12]
 80244c0:	7d1b      	ldrb	r3, [r3, #20]
 80244c2:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80244c6:	b2da      	uxtb	r2, r3
 80244c8:	68fb      	ldr	r3, [r7, #12]
 80244ca:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 80244cc:	69fa      	ldr	r2, [r7, #28]
 80244ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80244d0:	4413      	add	r3, r2
 80244d2:	61fb      	str	r3, [r7, #28]
 80244d4:	68fb      	ldr	r3, [r7, #12]
 80244d6:	699a      	ldr	r2, [r3, #24]
 80244d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80244da:	441a      	add	r2, r3
 80244dc:	68fb      	ldr	r3, [r7, #12]
 80244de:	619a      	str	r2, [r3, #24]
 80244e0:	68fb      	ldr	r3, [r7, #12]
 80244e2:	68da      	ldr	r2, [r3, #12]
 80244e4:	68fb      	ldr	r3, [r7, #12]
 80244e6:	699b      	ldr	r3, [r3, #24]
 80244e8:	429a      	cmp	r2, r3
 80244ea:	bf38      	it	cc
 80244ec:	461a      	movcc	r2, r3
 80244ee:	68fb      	ldr	r3, [r7, #12]
 80244f0:	60da      	str	r2, [r3, #12]
 80244f2:	683b      	ldr	r3, [r7, #0]
 80244f4:	681a      	ldr	r2, [r3, #0]
 80244f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80244f8:	441a      	add	r2, r3
 80244fa:	683b      	ldr	r3, [r7, #0]
 80244fc:	601a      	str	r2, [r3, #0]
 80244fe:	687a      	ldr	r2, [r7, #4]
 8024500:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8024502:	1ad3      	subs	r3, r2, r3
 8024504:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 8024506:	687b      	ldr	r3, [r7, #4]
 8024508:	2b00      	cmp	r3, #0
 802450a:	f47f aefd 	bne.w	8024308 <f_write+0x76>
 802450e:	e000      	b.n	8024512 <f_write+0x280>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8024510:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 8024512:	68fb      	ldr	r3, [r7, #12]
 8024514:	7d1b      	ldrb	r3, [r3, #20]
 8024516:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 802451a:	b2da      	uxtb	r2, r3
 802451c:	68fb      	ldr	r3, [r7, #12]
 802451e:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 8024520:	2300      	movs	r3, #0
}
 8024522:	4618      	mov	r0, r3
 8024524:	3730      	adds	r7, #48	; 0x30
 8024526:	46bd      	mov	sp, r7
 8024528:	bd80      	pop	{r7, pc}
	...

0802452c <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 802452c:	b580      	push	{r7, lr}
 802452e:	b086      	sub	sp, #24
 8024530:	af00      	add	r7, sp, #0
 8024532:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8024534:	687b      	ldr	r3, [r7, #4]
 8024536:	f107 0208 	add.w	r2, r7, #8
 802453a:	4611      	mov	r1, r2
 802453c:	4618      	mov	r0, r3
 802453e:	f7ff fb57 	bl	8023bf0 <validate>
 8024542:	4603      	mov	r3, r0
 8024544:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8024546:	7dfb      	ldrb	r3, [r7, #23]
 8024548:	2b00      	cmp	r3, #0
 802454a:	d167      	bne.n	802461c <f_sync+0xf0>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 802454c:	687b      	ldr	r3, [r7, #4]
 802454e:	7d1b      	ldrb	r3, [r3, #20]
 8024550:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8024554:	2b00      	cmp	r3, #0
 8024556:	d061      	beq.n	802461c <f_sync+0xf0>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 8024558:	687b      	ldr	r3, [r7, #4]
 802455a:	7d1b      	ldrb	r3, [r3, #20]
 802455c:	b25b      	sxtb	r3, r3
 802455e:	2b00      	cmp	r3, #0
 8024560:	da15      	bge.n	802458e <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8024562:	68bb      	ldr	r3, [r7, #8]
 8024564:	7858      	ldrb	r0, [r3, #1]
 8024566:	687b      	ldr	r3, [r7, #4]
 8024568:	f103 012c 	add.w	r1, r3, #44	; 0x2c
 802456c:	687b      	ldr	r3, [r7, #4]
 802456e:	6a1a      	ldr	r2, [r3, #32]
 8024570:	2301      	movs	r3, #1
 8024572:	f7fd fec5 	bl	8022300 <disk_write>
 8024576:	4603      	mov	r3, r0
 8024578:	2b00      	cmp	r3, #0
 802457a:	d001      	beq.n	8024580 <f_sync+0x54>
 802457c:	2301      	movs	r3, #1
 802457e:	e04e      	b.n	802461e <f_sync+0xf2>
				fp->flag &= (BYTE)~FA_DIRTY;
 8024580:	687b      	ldr	r3, [r7, #4]
 8024582:	7d1b      	ldrb	r3, [r3, #20]
 8024584:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8024588:	b2da      	uxtb	r2, r3
 802458a:	687b      	ldr	r3, [r7, #4]
 802458c:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 802458e:	4b26      	ldr	r3, [pc, #152]	; (8024628 <f_sync+0xfc>)
 8024590:	613b      	str	r3, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 8024592:	68ba      	ldr	r2, [r7, #8]
 8024594:	687b      	ldr	r3, [r7, #4]
 8024596:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8024598:	4619      	mov	r1, r3
 802459a:	4610      	mov	r0, r2
 802459c:	f7fe f99e 	bl	80228dc <move_window>
 80245a0:	4603      	mov	r3, r0
 80245a2:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 80245a4:	7dfb      	ldrb	r3, [r7, #23]
 80245a6:	2b00      	cmp	r3, #0
 80245a8:	d138      	bne.n	802461c <f_sync+0xf0>
					dir = fp->dir_ptr;
 80245aa:	687b      	ldr	r3, [r7, #4]
 80245ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80245ae:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 80245b0:	68fb      	ldr	r3, [r7, #12]
 80245b2:	330b      	adds	r3, #11
 80245b4:	781a      	ldrb	r2, [r3, #0]
 80245b6:	68fb      	ldr	r3, [r7, #12]
 80245b8:	330b      	adds	r3, #11
 80245ba:	f042 0220 	orr.w	r2, r2, #32
 80245be:	b2d2      	uxtb	r2, r2
 80245c0:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 80245c2:	687b      	ldr	r3, [r7, #4]
 80245c4:	6818      	ldr	r0, [r3, #0]
 80245c6:	687b      	ldr	r3, [r7, #4]
 80245c8:	689b      	ldr	r3, [r3, #8]
 80245ca:	461a      	mov	r2, r3
 80245cc:	68f9      	ldr	r1, [r7, #12]
 80245ce:	f7fe fe7c 	bl	80232ca <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 80245d2:	68fb      	ldr	r3, [r7, #12]
 80245d4:	f103 021c 	add.w	r2, r3, #28
 80245d8:	687b      	ldr	r3, [r7, #4]
 80245da:	68db      	ldr	r3, [r3, #12]
 80245dc:	4619      	mov	r1, r3
 80245de:	4610      	mov	r0, r2
 80245e0:	f7fd ff22 	bl	8022428 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 80245e4:	68fb      	ldr	r3, [r7, #12]
 80245e6:	3316      	adds	r3, #22
 80245e8:	6939      	ldr	r1, [r7, #16]
 80245ea:	4618      	mov	r0, r3
 80245ec:	f7fd ff1c 	bl	8022428 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 80245f0:	68fb      	ldr	r3, [r7, #12]
 80245f2:	3312      	adds	r3, #18
 80245f4:	2100      	movs	r1, #0
 80245f6:	4618      	mov	r0, r3
 80245f8:	f7fd fefb 	bl	80223f2 <st_word>
					fs->wflag = 1;
 80245fc:	68bb      	ldr	r3, [r7, #8]
 80245fe:	2201      	movs	r2, #1
 8024600:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 8024602:	68bb      	ldr	r3, [r7, #8]
 8024604:	4618      	mov	r0, r3
 8024606:	f7fe f997 	bl	8022938 <sync_fs>
 802460a:	4603      	mov	r3, r0
 802460c:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 802460e:	687b      	ldr	r3, [r7, #4]
 8024610:	7d1b      	ldrb	r3, [r3, #20]
 8024612:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8024616:	b2da      	uxtb	r2, r3
 8024618:	687b      	ldr	r3, [r7, #4]
 802461a:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 802461c:	7dfb      	ldrb	r3, [r7, #23]
}
 802461e:	4618      	mov	r0, r3
 8024620:	3718      	adds	r7, #24
 8024622:	46bd      	mov	sp, r7
 8024624:	bd80      	pop	{r7, pc}
 8024626:	bf00      	nop
 8024628:	53740000 	.word	0x53740000

0802462c <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 802462c:	b580      	push	{r7, lr}
 802462e:	b084      	sub	sp, #16
 8024630:	af00      	add	r7, sp, #0
 8024632:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8024634:	6878      	ldr	r0, [r7, #4]
 8024636:	f7ff ff79 	bl	802452c <f_sync>
 802463a:	4603      	mov	r3, r0
 802463c:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 802463e:	7bfb      	ldrb	r3, [r7, #15]
 8024640:	2b00      	cmp	r3, #0
 8024642:	d118      	bne.n	8024676 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 8024644:	687b      	ldr	r3, [r7, #4]
 8024646:	f107 0208 	add.w	r2, r7, #8
 802464a:	4611      	mov	r1, r2
 802464c:	4618      	mov	r0, r3
 802464e:	f7ff facf 	bl	8023bf0 <validate>
 8024652:	4603      	mov	r3, r0
 8024654:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8024656:	7bfb      	ldrb	r3, [r7, #15]
 8024658:	2b00      	cmp	r3, #0
 802465a:	d10c      	bne.n	8024676 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 802465c:	687b      	ldr	r3, [r7, #4]
 802465e:	691b      	ldr	r3, [r3, #16]
 8024660:	4618      	mov	r0, r3
 8024662:	f7fe f897 	bl	8022794 <dec_lock>
 8024666:	4603      	mov	r3, r0
 8024668:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 802466a:	7bfb      	ldrb	r3, [r7, #15]
 802466c:	2b00      	cmp	r3, #0
 802466e:	d102      	bne.n	8024676 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 8024670:	687b      	ldr	r3, [r7, #4]
 8024672:	2200      	movs	r2, #0
 8024674:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 8024676:	7bfb      	ldrb	r3, [r7, #15]
}
 8024678:	4618      	mov	r0, r3
 802467a:	3710      	adds	r7, #16
 802467c:	46bd      	mov	sp, r7
 802467e:	bd80      	pop	{r7, pc}

08024680 <f_mkfs>:
	BYTE opt,			/* Format option */
	DWORD au,			/* Size of allocation unit (cluster) [byte] */
	void* work,			/* Pointer to working buffer */
	UINT len			/* Size of working buffer */
)
{
 8024680:	b580      	push	{r7, lr}
 8024682:	b09c      	sub	sp, #112	; 0x70
 8024684:	af00      	add	r7, sp, #0
 8024686:	60f8      	str	r0, [r7, #12]
 8024688:	607a      	str	r2, [r7, #4]
 802468a:	603b      	str	r3, [r7, #0]
 802468c:	460b      	mov	r3, r1
 802468e:	72fb      	strb	r3, [r7, #11]
	const UINT n_fats = 1;		/* Number of FATs for FAT12/16/32 volume (1 or 2) */
 8024690:	2301      	movs	r3, #1
 8024692:	647b      	str	r3, [r7, #68]	; 0x44
	const UINT n_rootdir = 512;	/* Number of root directory entries for FAT12/16 volume */
 8024694:	f44f 7300 	mov.w	r3, #512	; 0x200
 8024698:	643b      	str	r3, [r7, #64]	; 0x40
	DWORD tbl[3];
#endif


	/* Check mounted drive and clear work area */
	vol = get_ldnumber(&path);					/* Get target logical drive */
 802469a:	f107 030c 	add.w	r3, r7, #12
 802469e:	4618      	mov	r0, r3
 80246a0:	f7fe ffbf 	bl	8023622 <get_ldnumber>
 80246a4:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 80246a6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80246a8:	2b00      	cmp	r3, #0
 80246aa:	da02      	bge.n	80246b2 <f_mkfs+0x32>
 80246ac:	230b      	movs	r3, #11
 80246ae:	f000 bc07 	b.w	8024ec0 <f_mkfs+0x840>
	if (FatFs[vol]) FatFs[vol]->fs_type = 0;	/* Clear the volume */
 80246b2:	4a94      	ldr	r2, [pc, #592]	; (8024904 <f_mkfs+0x284>)
 80246b4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80246b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80246ba:	2b00      	cmp	r3, #0
 80246bc:	d005      	beq.n	80246ca <f_mkfs+0x4a>
 80246be:	4a91      	ldr	r2, [pc, #580]	; (8024904 <f_mkfs+0x284>)
 80246c0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80246c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80246c6:	2200      	movs	r2, #0
 80246c8:	701a      	strb	r2, [r3, #0]
	pdrv = LD2PD(vol);	/* Physical drive */
 80246ca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80246cc:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
	part = LD2PT(vol);	/* Partition (0:create as new, 1-4:get from partition table) */
 80246d0:	2300      	movs	r3, #0
 80246d2:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a

	/* Check physical drive status */
	stat = disk_initialize(pdrv);
 80246d6:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 80246da:	4618      	mov	r0, r3
 80246dc:	f7fd fdca 	bl	8022274 <disk_initialize>
 80246e0:	4603      	mov	r3, r0
 80246e2:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
	if (stat & STA_NOINIT) return FR_NOT_READY;
 80246e6:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 80246ea:	f003 0301 	and.w	r3, r3, #1
 80246ee:	2b00      	cmp	r3, #0
 80246f0:	d001      	beq.n	80246f6 <f_mkfs+0x76>
 80246f2:	2303      	movs	r3, #3
 80246f4:	e3e4      	b.n	8024ec0 <f_mkfs+0x840>
	if (stat & STA_PROTECT) return FR_WRITE_PROTECTED;
 80246f6:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 80246fa:	f003 0304 	and.w	r3, r3, #4
 80246fe:	2b00      	cmp	r3, #0
 8024700:	d001      	beq.n	8024706 <f_mkfs+0x86>
 8024702:	230a      	movs	r3, #10
 8024704:	e3dc      	b.n	8024ec0 <f_mkfs+0x840>
	if (disk_ioctl(pdrv, GET_BLOCK_SIZE, &sz_blk) != RES_OK || !sz_blk || sz_blk > 32768 || (sz_blk & (sz_blk - 1))) sz_blk = 1;	/* Erase block to align data area */
 8024706:	f107 0214 	add.w	r2, r7, #20
 802470a:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 802470e:	2103      	movs	r1, #3
 8024710:	4618      	mov	r0, r3
 8024712:	f7fd fe15 	bl	8022340 <disk_ioctl>
 8024716:	4603      	mov	r3, r0
 8024718:	2b00      	cmp	r3, #0
 802471a:	d10c      	bne.n	8024736 <f_mkfs+0xb6>
 802471c:	697b      	ldr	r3, [r7, #20]
 802471e:	2b00      	cmp	r3, #0
 8024720:	d009      	beq.n	8024736 <f_mkfs+0xb6>
 8024722:	697b      	ldr	r3, [r7, #20]
 8024724:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8024728:	d805      	bhi.n	8024736 <f_mkfs+0xb6>
 802472a:	697b      	ldr	r3, [r7, #20]
 802472c:	1e5a      	subs	r2, r3, #1
 802472e:	697b      	ldr	r3, [r7, #20]
 8024730:	4013      	ands	r3, r2
 8024732:	2b00      	cmp	r3, #0
 8024734:	d001      	beq.n	802473a <f_mkfs+0xba>
 8024736:	2301      	movs	r3, #1
 8024738:	617b      	str	r3, [r7, #20]
#if _MAX_SS != _MIN_SS		/* Get sector size of the medium if variable sector size cfg. */
	if (disk_ioctl(pdrv, GET_SECTOR_SIZE, &ss) != RES_OK) return FR_DISK_ERR;
	if (ss > _MAX_SS || ss < _MIN_SS || (ss & (ss - 1))) return FR_DISK_ERR;
#else
	ss = _MAX_SS;
 802473a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 802473e:	86fb      	strh	r3, [r7, #54]	; 0x36
#endif
	if ((au != 0 && au < ss) || au > 0x1000000 || (au & (au - 1))) return FR_INVALID_PARAMETER;	/* Check if au is valid */
 8024740:	687b      	ldr	r3, [r7, #4]
 8024742:	2b00      	cmp	r3, #0
 8024744:	d003      	beq.n	802474e <f_mkfs+0xce>
 8024746:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8024748:	687a      	ldr	r2, [r7, #4]
 802474a:	429a      	cmp	r2, r3
 802474c:	d309      	bcc.n	8024762 <f_mkfs+0xe2>
 802474e:	687b      	ldr	r3, [r7, #4]
 8024750:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8024754:	d805      	bhi.n	8024762 <f_mkfs+0xe2>
 8024756:	687b      	ldr	r3, [r7, #4]
 8024758:	1e5a      	subs	r2, r3, #1
 802475a:	687b      	ldr	r3, [r7, #4]
 802475c:	4013      	ands	r3, r2
 802475e:	2b00      	cmp	r3, #0
 8024760:	d001      	beq.n	8024766 <f_mkfs+0xe6>
 8024762:	2313      	movs	r3, #19
 8024764:	e3ac      	b.n	8024ec0 <f_mkfs+0x840>
	au /= ss;	/* Cluster size in unit of sector */
 8024766:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8024768:	687a      	ldr	r2, [r7, #4]
 802476a:	fbb2 f3f3 	udiv	r3, r2, r3
 802476e:	607b      	str	r3, [r7, #4]

	/* Get working buffer */
	buf = (BYTE*)work;		/* Working buffer */
 8024770:	683b      	ldr	r3, [r7, #0]
 8024772:	633b      	str	r3, [r7, #48]	; 0x30
	sz_buf = len / ss;		/* Size of working buffer (sector) */
 8024774:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8024776:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8024778:	fbb2 f3f3 	udiv	r3, r2, r3
 802477c:	62fb      	str	r3, [r7, #44]	; 0x2c
	szb_buf = sz_buf * ss;	/* Size of working buffer (byte) */
 802477e:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8024780:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8024782:	fb02 f303 	mul.w	r3, r2, r3
 8024786:	62bb      	str	r3, [r7, #40]	; 0x28
	if (!szb_buf) return FR_MKFS_ABORTED;
 8024788:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802478a:	2b00      	cmp	r3, #0
 802478c:	d101      	bne.n	8024792 <f_mkfs+0x112>
 802478e:	230e      	movs	r3, #14
 8024790:	e396      	b.n	8024ec0 <f_mkfs+0x840>
		if (!pte[PTE_System]) return FR_MKFS_ABORTED;	/* No partition? */
		b_vol = ld_dword(pte + PTE_StLba);		/* Get volume start sector */
		sz_vol = ld_dword(pte + PTE_SizLba);	/* Get volume size */
	} else {
		/* Create a single-partition in this function */
		if (disk_ioctl(pdrv, GET_SECTOR_COUNT, &sz_vol) != RES_OK) return FR_DISK_ERR;
 8024792:	f107 0210 	add.w	r2, r7, #16
 8024796:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 802479a:	2101      	movs	r1, #1
 802479c:	4618      	mov	r0, r3
 802479e:	f7fd fdcf 	bl	8022340 <disk_ioctl>
 80247a2:	4603      	mov	r3, r0
 80247a4:	2b00      	cmp	r3, #0
 80247a6:	d001      	beq.n	80247ac <f_mkfs+0x12c>
 80247a8:	2301      	movs	r3, #1
 80247aa:	e389      	b.n	8024ec0 <f_mkfs+0x840>
		b_vol = (opt & FM_SFD) ? 0 : 63;		/* Volume start sector */
 80247ac:	7afb      	ldrb	r3, [r7, #11]
 80247ae:	f003 0308 	and.w	r3, r3, #8
 80247b2:	2b00      	cmp	r3, #0
 80247b4:	d001      	beq.n	80247ba <f_mkfs+0x13a>
 80247b6:	2300      	movs	r3, #0
 80247b8:	e000      	b.n	80247bc <f_mkfs+0x13c>
 80247ba:	233f      	movs	r3, #63	; 0x3f
 80247bc:	627b      	str	r3, [r7, #36]	; 0x24
		if (sz_vol < b_vol) return FR_MKFS_ABORTED;
 80247be:	693b      	ldr	r3, [r7, #16]
 80247c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80247c2:	429a      	cmp	r2, r3
 80247c4:	d901      	bls.n	80247ca <f_mkfs+0x14a>
 80247c6:	230e      	movs	r3, #14
 80247c8:	e37a      	b.n	8024ec0 <f_mkfs+0x840>
		sz_vol -= b_vol;						/* Volume size */
 80247ca:	693a      	ldr	r2, [r7, #16]
 80247cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80247ce:	1ad3      	subs	r3, r2, r3
 80247d0:	613b      	str	r3, [r7, #16]
	}
	if (sz_vol < 128) return FR_MKFS_ABORTED;	/* Check if volume size is >=128s */
 80247d2:	693b      	ldr	r3, [r7, #16]
 80247d4:	2b7f      	cmp	r3, #127	; 0x7f
 80247d6:	d801      	bhi.n	80247dc <f_mkfs+0x15c>
 80247d8:	230e      	movs	r3, #14
 80247da:	e371      	b.n	8024ec0 <f_mkfs+0x840>
		if (_FS_EXFAT && (opt & FM_EXFAT)) {	/* exFAT possible? */
			if ((opt & FM_ANY) == FM_EXFAT || sz_vol >= 0x4000000 || au > 128) {	/* exFAT only, vol >= 64Ms or au > 128s ? */
				fmt = FS_EXFAT; break;
			}
		}
		if (au > 128) return FR_INVALID_PARAMETER;	/* Too large au for FAT/FAT32 */
 80247dc:	687b      	ldr	r3, [r7, #4]
 80247de:	2b80      	cmp	r3, #128	; 0x80
 80247e0:	d901      	bls.n	80247e6 <f_mkfs+0x166>
 80247e2:	2313      	movs	r3, #19
 80247e4:	e36c      	b.n	8024ec0 <f_mkfs+0x840>
		if (opt & FM_FAT32) {	/* FAT32 possible? */
 80247e6:	7afb      	ldrb	r3, [r7, #11]
 80247e8:	f003 0302 	and.w	r3, r3, #2
 80247ec:	2b00      	cmp	r3, #0
 80247ee:	d00d      	beq.n	802480c <f_mkfs+0x18c>
			if ((opt & FM_ANY) == FM_FAT32 || !(opt & FM_FAT)) {	/* FAT32 only or no-FAT? */
 80247f0:	7afb      	ldrb	r3, [r7, #11]
 80247f2:	f003 0307 	and.w	r3, r3, #7
 80247f6:	2b02      	cmp	r3, #2
 80247f8:	d004      	beq.n	8024804 <f_mkfs+0x184>
 80247fa:	7afb      	ldrb	r3, [r7, #11]
 80247fc:	f003 0301 	and.w	r3, r3, #1
 8024800:	2b00      	cmp	r3, #0
 8024802:	d103      	bne.n	802480c <f_mkfs+0x18c>
				fmt = FS_FAT32; break;
 8024804:	2303      	movs	r3, #3
 8024806:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 802480a:	e009      	b.n	8024820 <f_mkfs+0x1a0>
			}
		}
		if (!(opt & FM_FAT)) return FR_INVALID_PARAMETER;	/* no-FAT? */
 802480c:	7afb      	ldrb	r3, [r7, #11]
 802480e:	f003 0301 	and.w	r3, r3, #1
 8024812:	2b00      	cmp	r3, #0
 8024814:	d101      	bne.n	802481a <f_mkfs+0x19a>
 8024816:	2313      	movs	r3, #19
 8024818:	e352      	b.n	8024ec0 <f_mkfs+0x840>
		fmt = FS_FAT16;
 802481a:	2302      	movs	r3, #2
 802481c:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

	} else
#endif	/* _FS_EXFAT */
	{	/* Create an FAT12/16/32 volume */
		do {
			pau = au;
 8024820:	687b      	ldr	r3, [r7, #4]
 8024822:	653b      	str	r3, [r7, #80]	; 0x50
			/* Pre-determine number of clusters and FAT sub-type */
			if (fmt == FS_FAT32) {	/* FAT32 volume */
 8024824:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8024828:	2b03      	cmp	r3, #3
 802482a:	d13c      	bne.n	80248a6 <f_mkfs+0x226>
				if (!pau) {	/* au auto-selection */
 802482c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 802482e:	2b00      	cmp	r3, #0
 8024830:	d11b      	bne.n	802486a <f_mkfs+0x1ea>
					n = sz_vol / 0x20000;	/* Volume size in unit of 128KS */
 8024832:	693b      	ldr	r3, [r7, #16]
 8024834:	0c5b      	lsrs	r3, r3, #17
 8024836:	65fb      	str	r3, [r7, #92]	; 0x5c
					for (i = 0, pau = 1; cst32[i] && cst32[i] <= n; i++, pau <<= 1) ;	/* Get from table */
 8024838:	2300      	movs	r3, #0
 802483a:	64bb      	str	r3, [r7, #72]	; 0x48
 802483c:	2301      	movs	r3, #1
 802483e:	653b      	str	r3, [r7, #80]	; 0x50
 8024840:	e005      	b.n	802484e <f_mkfs+0x1ce>
 8024842:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8024844:	3301      	adds	r3, #1
 8024846:	64bb      	str	r3, [r7, #72]	; 0x48
 8024848:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 802484a:	005b      	lsls	r3, r3, #1
 802484c:	653b      	str	r3, [r7, #80]	; 0x50
 802484e:	4a2e      	ldr	r2, [pc, #184]	; (8024908 <f_mkfs+0x288>)
 8024850:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8024852:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8024856:	2b00      	cmp	r3, #0
 8024858:	d007      	beq.n	802486a <f_mkfs+0x1ea>
 802485a:	4a2b      	ldr	r2, [pc, #172]	; (8024908 <f_mkfs+0x288>)
 802485c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 802485e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8024862:	461a      	mov	r2, r3
 8024864:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8024866:	4293      	cmp	r3, r2
 8024868:	d2eb      	bcs.n	8024842 <f_mkfs+0x1c2>
				}
				n_clst = sz_vol / pau;	/* Number of clusters */
 802486a:	693a      	ldr	r2, [r7, #16]
 802486c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 802486e:	fbb2 f3f3 	udiv	r3, r2, r3
 8024872:	623b      	str	r3, [r7, #32]
				sz_fat = (n_clst * 4 + 8 + ss - 1) / ss;	/* FAT size [sector] */
 8024874:	6a3b      	ldr	r3, [r7, #32]
 8024876:	3302      	adds	r3, #2
 8024878:	009a      	lsls	r2, r3, #2
 802487a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 802487c:	4413      	add	r3, r2
 802487e:	1e5a      	subs	r2, r3, #1
 8024880:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8024882:	fbb2 f3f3 	udiv	r3, r2, r3
 8024886:	66bb      	str	r3, [r7, #104]	; 0x68
				sz_rsv = 32;	/* Number of reserved sectors */
 8024888:	2320      	movs	r3, #32
 802488a:	657b      	str	r3, [r7, #84]	; 0x54
				sz_dir = 0;		/* No static directory */
 802488c:	2300      	movs	r3, #0
 802488e:	66fb      	str	r3, [r7, #108]	; 0x6c
				if (n_clst <= MAX_FAT16 || n_clst > MAX_FAT32) return FR_MKFS_ABORTED;
 8024890:	6a3b      	ldr	r3, [r7, #32]
 8024892:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 8024896:	4293      	cmp	r3, r2
 8024898:	d903      	bls.n	80248a2 <f_mkfs+0x222>
 802489a:	6a3b      	ldr	r3, [r7, #32]
 802489c:	4a1b      	ldr	r2, [pc, #108]	; (802490c <f_mkfs+0x28c>)
 802489e:	4293      	cmp	r3, r2
 80248a0:	d953      	bls.n	802494a <f_mkfs+0x2ca>
 80248a2:	230e      	movs	r3, #14
 80248a4:	e30c      	b.n	8024ec0 <f_mkfs+0x840>
			} else {				/* FAT12/16 volume */
				if (!pau) {	/* au auto-selection */
 80248a6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80248a8:	2b00      	cmp	r3, #0
 80248aa:	d11b      	bne.n	80248e4 <f_mkfs+0x264>
					n = sz_vol / 0x1000;	/* Volume size in unit of 4KS */
 80248ac:	693b      	ldr	r3, [r7, #16]
 80248ae:	0b1b      	lsrs	r3, r3, #12
 80248b0:	65fb      	str	r3, [r7, #92]	; 0x5c
					for (i = 0, pau = 1; cst[i] && cst[i] <= n; i++, pau <<= 1) ;	/* Get from table */
 80248b2:	2300      	movs	r3, #0
 80248b4:	64bb      	str	r3, [r7, #72]	; 0x48
 80248b6:	2301      	movs	r3, #1
 80248b8:	653b      	str	r3, [r7, #80]	; 0x50
 80248ba:	e005      	b.n	80248c8 <f_mkfs+0x248>
 80248bc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80248be:	3301      	adds	r3, #1
 80248c0:	64bb      	str	r3, [r7, #72]	; 0x48
 80248c2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80248c4:	005b      	lsls	r3, r3, #1
 80248c6:	653b      	str	r3, [r7, #80]	; 0x50
 80248c8:	4a11      	ldr	r2, [pc, #68]	; (8024910 <f_mkfs+0x290>)
 80248ca:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80248cc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80248d0:	2b00      	cmp	r3, #0
 80248d2:	d007      	beq.n	80248e4 <f_mkfs+0x264>
 80248d4:	4a0e      	ldr	r2, [pc, #56]	; (8024910 <f_mkfs+0x290>)
 80248d6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80248d8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80248dc:	461a      	mov	r2, r3
 80248de:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80248e0:	4293      	cmp	r3, r2
 80248e2:	d2eb      	bcs.n	80248bc <f_mkfs+0x23c>
				}
				n_clst = sz_vol / pau;
 80248e4:	693a      	ldr	r2, [r7, #16]
 80248e6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80248e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80248ec:	623b      	str	r3, [r7, #32]
				if (n_clst > MAX_FAT12) {
 80248ee:	6a3b      	ldr	r3, [r7, #32]
 80248f0:	f640 72f5 	movw	r2, #4085	; 0xff5
 80248f4:	4293      	cmp	r3, r2
 80248f6:	d90d      	bls.n	8024914 <f_mkfs+0x294>
					n = n_clst * 2 + 4;		/* FAT size [byte] */
 80248f8:	6a3b      	ldr	r3, [r7, #32]
 80248fa:	3302      	adds	r3, #2
 80248fc:	005b      	lsls	r3, r3, #1
 80248fe:	65fb      	str	r3, [r7, #92]	; 0x5c
 8024900:	e013      	b.n	802492a <f_mkfs+0x2aa>
 8024902:	bf00      	nop
 8024904:	200007ac 	.word	0x200007ac
 8024908:	08002484 	.word	0x08002484
 802490c:	0ffffff5 	.word	0x0ffffff5
 8024910:	08002494 	.word	0x08002494
				} else {
					fmt = FS_FAT12;
 8024914:	2301      	movs	r3, #1
 8024916:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
					n = (n_clst * 3 + 1) / 2 + 3;	/* FAT size [byte] */
 802491a:	6a3a      	ldr	r2, [r7, #32]
 802491c:	4613      	mov	r3, r2
 802491e:	005b      	lsls	r3, r3, #1
 8024920:	4413      	add	r3, r2
 8024922:	3301      	adds	r3, #1
 8024924:	085b      	lsrs	r3, r3, #1
 8024926:	3303      	adds	r3, #3
 8024928:	65fb      	str	r3, [r7, #92]	; 0x5c
				}
				sz_fat = (n + ss - 1) / ss;		/* FAT size [sector] */
 802492a:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 802492c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 802492e:	4413      	add	r3, r2
 8024930:	1e5a      	subs	r2, r3, #1
 8024932:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8024934:	fbb2 f3f3 	udiv	r3, r2, r3
 8024938:	66bb      	str	r3, [r7, #104]	; 0x68
				sz_rsv = 1;						/* Number of reserved sectors */
 802493a:	2301      	movs	r3, #1
 802493c:	657b      	str	r3, [r7, #84]	; 0x54
				sz_dir = (DWORD)n_rootdir * SZDIRE / ss;	/* Rootdir size [sector] */
 802493e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8024940:	015a      	lsls	r2, r3, #5
 8024942:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8024944:	fbb2 f3f3 	udiv	r3, r2, r3
 8024948:	66fb      	str	r3, [r7, #108]	; 0x6c
			}
			b_fat = b_vol + sz_rsv;						/* FAT base */
 802494a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 802494c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 802494e:	4413      	add	r3, r2
 8024950:	65bb      	str	r3, [r7, #88]	; 0x58
			b_data = b_fat + sz_fat * n_fats + sz_dir;	/* Data base */
 8024952:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8024954:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8024956:	fb02 f203 	mul.w	r2, r2, r3
 802495a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 802495c:	4413      	add	r3, r2
 802495e:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8024960:	4413      	add	r3, r2
 8024962:	61fb      	str	r3, [r7, #28]

			/* Align data base to erase block boundary (for flash memory media) */
			n = ((b_data + sz_blk - 1) & ~(sz_blk - 1)) - b_data;	/* Next nearest erase block from current data base */
 8024964:	697a      	ldr	r2, [r7, #20]
 8024966:	69fb      	ldr	r3, [r7, #28]
 8024968:	4413      	add	r3, r2
 802496a:	1e5a      	subs	r2, r3, #1
 802496c:	697b      	ldr	r3, [r7, #20]
 802496e:	425b      	negs	r3, r3
 8024970:	401a      	ands	r2, r3
 8024972:	69fb      	ldr	r3, [r7, #28]
 8024974:	1ad3      	subs	r3, r2, r3
 8024976:	65fb      	str	r3, [r7, #92]	; 0x5c
			if (fmt == FS_FAT32) {		/* FAT32: Move FAT base */
 8024978:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 802497c:	2b03      	cmp	r3, #3
 802497e:	d108      	bne.n	8024992 <f_mkfs+0x312>
				sz_rsv += n; b_fat += n;
 8024980:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8024982:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8024984:	4413      	add	r3, r2
 8024986:	657b      	str	r3, [r7, #84]	; 0x54
 8024988:	6dba      	ldr	r2, [r7, #88]	; 0x58
 802498a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 802498c:	4413      	add	r3, r2
 802498e:	65bb      	str	r3, [r7, #88]	; 0x58
 8024990:	e006      	b.n	80249a0 <f_mkfs+0x320>
			} else {					/* FAT12/16: Expand FAT size */
				sz_fat += n / n_fats;
 8024992:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8024994:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8024996:	fbb2 f3f3 	udiv	r3, r2, r3
 802499a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 802499c:	4413      	add	r3, r2
 802499e:	66bb      	str	r3, [r7, #104]	; 0x68
			}

			/* Determine number of clusters and final check of validity of the FAT sub-type */
			if (sz_vol < b_data + pau * 16 - b_vol) return FR_MKFS_ABORTED;	/* Too small volume */
 80249a0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80249a2:	011a      	lsls	r2, r3, #4
 80249a4:	69fb      	ldr	r3, [r7, #28]
 80249a6:	441a      	add	r2, r3
 80249a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80249aa:	1ad2      	subs	r2, r2, r3
 80249ac:	693b      	ldr	r3, [r7, #16]
 80249ae:	429a      	cmp	r2, r3
 80249b0:	d901      	bls.n	80249b6 <f_mkfs+0x336>
 80249b2:	230e      	movs	r3, #14
 80249b4:	e284      	b.n	8024ec0 <f_mkfs+0x840>
			n_clst = (sz_vol - sz_rsv - sz_fat * n_fats - sz_dir) / pau;
 80249b6:	693a      	ldr	r2, [r7, #16]
 80249b8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80249ba:	1ad2      	subs	r2, r2, r3
 80249bc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80249be:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80249c0:	fb01 f303 	mul.w	r3, r1, r3
 80249c4:	1ad2      	subs	r2, r2, r3
 80249c6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80249c8:	1ad2      	subs	r2, r2, r3
 80249ca:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80249cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80249d0:	623b      	str	r3, [r7, #32]
			if (fmt == FS_FAT32) {
 80249d2:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80249d6:	2b03      	cmp	r3, #3
 80249d8:	d10f      	bne.n	80249fa <f_mkfs+0x37a>
				if (n_clst <= MAX_FAT16) {	/* Too few clusters for FAT32 */
 80249da:	6a3b      	ldr	r3, [r7, #32]
 80249dc:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 80249e0:	4293      	cmp	r3, r2
 80249e2:	d80a      	bhi.n	80249fa <f_mkfs+0x37a>
					if (!au && (au = pau / 2) != 0) continue;	/* Adjust cluster size and retry */
 80249e4:	687b      	ldr	r3, [r7, #4]
 80249e6:	2b00      	cmp	r3, #0
 80249e8:	d105      	bne.n	80249f6 <f_mkfs+0x376>
 80249ea:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80249ec:	085b      	lsrs	r3, r3, #1
 80249ee:	607b      	str	r3, [r7, #4]
 80249f0:	687b      	ldr	r3, [r7, #4]
 80249f2:	2b00      	cmp	r3, #0
 80249f4:	d144      	bne.n	8024a80 <f_mkfs+0x400>
					return FR_MKFS_ABORTED;
 80249f6:	230e      	movs	r3, #14
 80249f8:	e262      	b.n	8024ec0 <f_mkfs+0x840>
				}
			}
			if (fmt == FS_FAT16) {
 80249fa:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80249fe:	2b02      	cmp	r3, #2
 8024a00:	d133      	bne.n	8024a6a <f_mkfs+0x3ea>
				if (n_clst > MAX_FAT16) {	/* Too many clusters for FAT16 */
 8024a02:	6a3b      	ldr	r3, [r7, #32]
 8024a04:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 8024a08:	4293      	cmp	r3, r2
 8024a0a:	d91e      	bls.n	8024a4a <f_mkfs+0x3ca>
					if (!au && (pau * 2) <= 64) {
 8024a0c:	687b      	ldr	r3, [r7, #4]
 8024a0e:	2b00      	cmp	r3, #0
 8024a10:	d107      	bne.n	8024a22 <f_mkfs+0x3a2>
 8024a12:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8024a14:	005b      	lsls	r3, r3, #1
 8024a16:	2b40      	cmp	r3, #64	; 0x40
 8024a18:	d803      	bhi.n	8024a22 <f_mkfs+0x3a2>
						au = pau * 2; continue;		/* Adjust cluster size and retry */
 8024a1a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8024a1c:	005b      	lsls	r3, r3, #1
 8024a1e:	607b      	str	r3, [r7, #4]
 8024a20:	e033      	b.n	8024a8a <f_mkfs+0x40a>
					}
					if ((opt & FM_FAT32)) {
 8024a22:	7afb      	ldrb	r3, [r7, #11]
 8024a24:	f003 0302 	and.w	r3, r3, #2
 8024a28:	2b00      	cmp	r3, #0
 8024a2a:	d003      	beq.n	8024a34 <f_mkfs+0x3b4>
						fmt = FS_FAT32; continue;	/* Switch type to FAT32 and retry */
 8024a2c:	2303      	movs	r3, #3
 8024a2e:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 8024a32:	e02a      	b.n	8024a8a <f_mkfs+0x40a>
					}
					if (!au && (au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
 8024a34:	687b      	ldr	r3, [r7, #4]
 8024a36:	2b00      	cmp	r3, #0
 8024a38:	d105      	bne.n	8024a46 <f_mkfs+0x3c6>
 8024a3a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8024a3c:	005b      	lsls	r3, r3, #1
 8024a3e:	607b      	str	r3, [r7, #4]
 8024a40:	687b      	ldr	r3, [r7, #4]
 8024a42:	2b80      	cmp	r3, #128	; 0x80
 8024a44:	d91e      	bls.n	8024a84 <f_mkfs+0x404>
					return FR_MKFS_ABORTED;
 8024a46:	230e      	movs	r3, #14
 8024a48:	e23a      	b.n	8024ec0 <f_mkfs+0x840>
				}
				if  (n_clst <= MAX_FAT12) {	/* Too few clusters for FAT16 */
 8024a4a:	6a3b      	ldr	r3, [r7, #32]
 8024a4c:	f640 72f5 	movw	r2, #4085	; 0xff5
 8024a50:	4293      	cmp	r3, r2
 8024a52:	d80a      	bhi.n	8024a6a <f_mkfs+0x3ea>
					if (!au && (au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
 8024a54:	687b      	ldr	r3, [r7, #4]
 8024a56:	2b00      	cmp	r3, #0
 8024a58:	d105      	bne.n	8024a66 <f_mkfs+0x3e6>
 8024a5a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8024a5c:	005b      	lsls	r3, r3, #1
 8024a5e:	607b      	str	r3, [r7, #4]
 8024a60:	687b      	ldr	r3, [r7, #4]
 8024a62:	2b80      	cmp	r3, #128	; 0x80
 8024a64:	d910      	bls.n	8024a88 <f_mkfs+0x408>
					return FR_MKFS_ABORTED;
 8024a66:	230e      	movs	r3, #14
 8024a68:	e22a      	b.n	8024ec0 <f_mkfs+0x840>
				}
			}
			if (fmt == FS_FAT12 && n_clst > MAX_FAT12) return FR_MKFS_ABORTED;	/* Too many clusters for FAT12 */
 8024a6a:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8024a6e:	2b01      	cmp	r3, #1
 8024a70:	d10c      	bne.n	8024a8c <f_mkfs+0x40c>
 8024a72:	6a3b      	ldr	r3, [r7, #32]
 8024a74:	f640 72f5 	movw	r2, #4085	; 0xff5
 8024a78:	4293      	cmp	r3, r2
 8024a7a:	d907      	bls.n	8024a8c <f_mkfs+0x40c>
 8024a7c:	230e      	movs	r3, #14
 8024a7e:	e21f      	b.n	8024ec0 <f_mkfs+0x840>
					if (!au && (au = pau / 2) != 0) continue;	/* Adjust cluster size and retry */
 8024a80:	bf00      	nop
 8024a82:	e6cd      	b.n	8024820 <f_mkfs+0x1a0>
					if (!au && (au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
 8024a84:	bf00      	nop
 8024a86:	e6cb      	b.n	8024820 <f_mkfs+0x1a0>
					if (!au && (au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
 8024a88:	bf00      	nop
			pau = au;
 8024a8a:	e6c9      	b.n	8024820 <f_mkfs+0x1a0>

			/* Ok, it is the valid cluster configuration */
			break;
 8024a8c:	bf00      	nop
#if _USE_TRIM
		tbl[0] = b_vol; tbl[1] = b_vol + sz_vol - 1;	/* Inform the device the volume area can be erased */
		disk_ioctl(pdrv, CTRL_TRIM, tbl);
#endif
		/* Create FAT VBR */
		mem_set(buf, 0, ss);
 8024a8e:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8024a90:	461a      	mov	r2, r3
 8024a92:	2100      	movs	r1, #0
 8024a94:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8024a96:	f7fd fd14 	bl	80224c2 <mem_set>
		mem_cpy(buf + BS_JmpBoot, "\xEB\xFE\x90" "MSDOS5.0", 11);/* Boot jump code (x86), OEM name */
 8024a9a:	220b      	movs	r2, #11
 8024a9c:	49b8      	ldr	r1, [pc, #736]	; (8024d80 <f_mkfs+0x700>)
 8024a9e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8024aa0:	f7fd fcee 	bl	8022480 <mem_cpy>
		st_word(buf + BPB_BytsPerSec, ss);				/* Sector size [byte] */
 8024aa4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8024aa6:	330b      	adds	r3, #11
 8024aa8:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8024aaa:	4611      	mov	r1, r2
 8024aac:	4618      	mov	r0, r3
 8024aae:	f7fd fca0 	bl	80223f2 <st_word>
		buf[BPB_SecPerClus] = (BYTE)pau;				/* Cluster size [sector] */
 8024ab2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8024ab4:	330d      	adds	r3, #13
 8024ab6:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8024ab8:	b2d2      	uxtb	r2, r2
 8024aba:	701a      	strb	r2, [r3, #0]
		st_word(buf + BPB_RsvdSecCnt, (WORD)sz_rsv);	/* Size of reserved area */
 8024abc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8024abe:	330e      	adds	r3, #14
 8024ac0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8024ac2:	b292      	uxth	r2, r2
 8024ac4:	4611      	mov	r1, r2
 8024ac6:	4618      	mov	r0, r3
 8024ac8:	f7fd fc93 	bl	80223f2 <st_word>
		buf[BPB_NumFATs] = (BYTE)n_fats;				/* Number of FATs */
 8024acc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8024ace:	3310      	adds	r3, #16
 8024ad0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8024ad2:	b2d2      	uxtb	r2, r2
 8024ad4:	701a      	strb	r2, [r3, #0]
		st_word(buf + BPB_RootEntCnt, (WORD)((fmt == FS_FAT32) ? 0 : n_rootdir));	/* Number of root directory entries */
 8024ad6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8024ad8:	f103 0211 	add.w	r2, r3, #17
 8024adc:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8024ae0:	2b03      	cmp	r3, #3
 8024ae2:	d002      	beq.n	8024aea <f_mkfs+0x46a>
 8024ae4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8024ae6:	b29b      	uxth	r3, r3
 8024ae8:	e000      	b.n	8024aec <f_mkfs+0x46c>
 8024aea:	2300      	movs	r3, #0
 8024aec:	4619      	mov	r1, r3
 8024aee:	4610      	mov	r0, r2
 8024af0:	f7fd fc7f 	bl	80223f2 <st_word>
		if (sz_vol < 0x10000) {
 8024af4:	693b      	ldr	r3, [r7, #16]
 8024af6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8024afa:	d208      	bcs.n	8024b0e <f_mkfs+0x48e>
			st_word(buf + BPB_TotSec16, (WORD)sz_vol);	/* Volume size in 16-bit LBA */
 8024afc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8024afe:	3313      	adds	r3, #19
 8024b00:	693a      	ldr	r2, [r7, #16]
 8024b02:	b292      	uxth	r2, r2
 8024b04:	4611      	mov	r1, r2
 8024b06:	4618      	mov	r0, r3
 8024b08:	f7fd fc73 	bl	80223f2 <st_word>
 8024b0c:	e006      	b.n	8024b1c <f_mkfs+0x49c>
		} else {
			st_dword(buf + BPB_TotSec32, sz_vol);		/* Volume size in 32-bit LBA */
 8024b0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8024b10:	3320      	adds	r3, #32
 8024b12:	693a      	ldr	r2, [r7, #16]
 8024b14:	4611      	mov	r1, r2
 8024b16:	4618      	mov	r0, r3
 8024b18:	f7fd fc86 	bl	8022428 <st_dword>
		}
		buf[BPB_Media] = 0xF8;							/* Media descriptor byte */
 8024b1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8024b1e:	3315      	adds	r3, #21
 8024b20:	22f8      	movs	r2, #248	; 0xf8
 8024b22:	701a      	strb	r2, [r3, #0]
		st_word(buf + BPB_SecPerTrk, 63);				/* Number of sectors per track (for int13) */
 8024b24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8024b26:	3318      	adds	r3, #24
 8024b28:	213f      	movs	r1, #63	; 0x3f
 8024b2a:	4618      	mov	r0, r3
 8024b2c:	f7fd fc61 	bl	80223f2 <st_word>
		st_word(buf + BPB_NumHeads, 255);				/* Number of heads (for int13) */
 8024b30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8024b32:	331a      	adds	r3, #26
 8024b34:	21ff      	movs	r1, #255	; 0xff
 8024b36:	4618      	mov	r0, r3
 8024b38:	f7fd fc5b 	bl	80223f2 <st_word>
		st_dword(buf + BPB_HiddSec, b_vol);				/* Volume offset in the physical drive [sector] */
 8024b3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8024b3e:	331c      	adds	r3, #28
 8024b40:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8024b42:	4618      	mov	r0, r3
 8024b44:	f7fd fc70 	bl	8022428 <st_dword>
		if (fmt == FS_FAT32) {
 8024b48:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8024b4c:	2b03      	cmp	r3, #3
 8024b4e:	d12d      	bne.n	8024bac <f_mkfs+0x52c>
			st_dword(buf + BS_VolID32, GET_FATTIME());	/* VSN */
 8024b50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8024b52:	3343      	adds	r3, #67	; 0x43
 8024b54:	498b      	ldr	r1, [pc, #556]	; (8024d84 <f_mkfs+0x704>)
 8024b56:	4618      	mov	r0, r3
 8024b58:	f7fd fc66 	bl	8022428 <st_dword>
			st_dword(buf + BPB_FATSz32, sz_fat);		/* FAT size [sector] */
 8024b5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8024b5e:	3324      	adds	r3, #36	; 0x24
 8024b60:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8024b62:	4618      	mov	r0, r3
 8024b64:	f7fd fc60 	bl	8022428 <st_dword>
			st_dword(buf + BPB_RootClus32, 2);			/* Root directory cluster # (2) */
 8024b68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8024b6a:	332c      	adds	r3, #44	; 0x2c
 8024b6c:	2102      	movs	r1, #2
 8024b6e:	4618      	mov	r0, r3
 8024b70:	f7fd fc5a 	bl	8022428 <st_dword>
			st_word(buf + BPB_FSInfo32, 1);				/* Offset of FSINFO sector (VBR + 1) */
 8024b74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8024b76:	3330      	adds	r3, #48	; 0x30
 8024b78:	2101      	movs	r1, #1
 8024b7a:	4618      	mov	r0, r3
 8024b7c:	f7fd fc39 	bl	80223f2 <st_word>
			st_word(buf + BPB_BkBootSec32, 6);			/* Offset of backup VBR (VBR + 6) */
 8024b80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8024b82:	3332      	adds	r3, #50	; 0x32
 8024b84:	2106      	movs	r1, #6
 8024b86:	4618      	mov	r0, r3
 8024b88:	f7fd fc33 	bl	80223f2 <st_word>
			buf[BS_DrvNum32] = 0x80;					/* Drive number (for int13) */
 8024b8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8024b8e:	3340      	adds	r3, #64	; 0x40
 8024b90:	2280      	movs	r2, #128	; 0x80
 8024b92:	701a      	strb	r2, [r3, #0]
			buf[BS_BootSig32] = 0x29;					/* Extended boot signature */
 8024b94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8024b96:	3342      	adds	r3, #66	; 0x42
 8024b98:	2229      	movs	r2, #41	; 0x29
 8024b9a:	701a      	strb	r2, [r3, #0]
			mem_cpy(buf + BS_VolLab32, "NO NAME    " "FAT32   ", 19);	/* Volume label, FAT signature */
 8024b9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8024b9e:	3347      	adds	r3, #71	; 0x47
 8024ba0:	2213      	movs	r2, #19
 8024ba2:	4979      	ldr	r1, [pc, #484]	; (8024d88 <f_mkfs+0x708>)
 8024ba4:	4618      	mov	r0, r3
 8024ba6:	f7fd fc6b 	bl	8022480 <mem_cpy>
 8024baa:	e01c      	b.n	8024be6 <f_mkfs+0x566>
		} else {
			st_dword(buf + BS_VolID, GET_FATTIME());	/* VSN */
 8024bac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8024bae:	3327      	adds	r3, #39	; 0x27
 8024bb0:	4974      	ldr	r1, [pc, #464]	; (8024d84 <f_mkfs+0x704>)
 8024bb2:	4618      	mov	r0, r3
 8024bb4:	f7fd fc38 	bl	8022428 <st_dword>
			st_word(buf + BPB_FATSz16, (WORD)sz_fat);	/* FAT size [sector] */
 8024bb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8024bba:	3316      	adds	r3, #22
 8024bbc:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8024bbe:	b292      	uxth	r2, r2
 8024bc0:	4611      	mov	r1, r2
 8024bc2:	4618      	mov	r0, r3
 8024bc4:	f7fd fc15 	bl	80223f2 <st_word>
			buf[BS_DrvNum] = 0x80;						/* Drive number (for int13) */
 8024bc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8024bca:	3324      	adds	r3, #36	; 0x24
 8024bcc:	2280      	movs	r2, #128	; 0x80
 8024bce:	701a      	strb	r2, [r3, #0]
			buf[BS_BootSig] = 0x29;						/* Extended boot signature */
 8024bd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8024bd2:	3326      	adds	r3, #38	; 0x26
 8024bd4:	2229      	movs	r2, #41	; 0x29
 8024bd6:	701a      	strb	r2, [r3, #0]
			mem_cpy(buf + BS_VolLab, "NO NAME    " "FAT     ", 19);	/* Volume label, FAT signature */
 8024bd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8024bda:	332b      	adds	r3, #43	; 0x2b
 8024bdc:	2213      	movs	r2, #19
 8024bde:	496b      	ldr	r1, [pc, #428]	; (8024d8c <f_mkfs+0x70c>)
 8024be0:	4618      	mov	r0, r3
 8024be2:	f7fd fc4d 	bl	8022480 <mem_cpy>
		}
		st_word(buf + BS_55AA, 0xAA55);					/* Signature (offset is fixed here regardless of sector size) */
 8024be6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8024be8:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8024bec:	f64a 2155 	movw	r1, #43605	; 0xaa55
 8024bf0:	4618      	mov	r0, r3
 8024bf2:	f7fd fbfe 	bl	80223f2 <st_word>
		if (disk_write(pdrv, buf, b_vol, 1) != RES_OK) return FR_DISK_ERR;	/* Write it to the VBR sector */
 8024bf6:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 8024bfa:	2301      	movs	r3, #1
 8024bfc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8024bfe:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8024c00:	f7fd fb7e 	bl	8022300 <disk_write>
 8024c04:	4603      	mov	r3, r0
 8024c06:	2b00      	cmp	r3, #0
 8024c08:	d001      	beq.n	8024c0e <f_mkfs+0x58e>
 8024c0a:	2301      	movs	r3, #1
 8024c0c:	e158      	b.n	8024ec0 <f_mkfs+0x840>

		/* Create FSINFO record if needed */
		if (fmt == FS_FAT32) {
 8024c0e:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8024c12:	2b03      	cmp	r3, #3
 8024c14:	d140      	bne.n	8024c98 <f_mkfs+0x618>
			disk_write(pdrv, buf, b_vol + 6, 1);		/* Write backup VBR (VBR + 6) */
 8024c16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8024c18:	1d9a      	adds	r2, r3, #6
 8024c1a:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 8024c1e:	2301      	movs	r3, #1
 8024c20:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8024c22:	f7fd fb6d 	bl	8022300 <disk_write>
			mem_set(buf, 0, ss);
 8024c26:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8024c28:	461a      	mov	r2, r3
 8024c2a:	2100      	movs	r1, #0
 8024c2c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8024c2e:	f7fd fc48 	bl	80224c2 <mem_set>
			st_dword(buf + FSI_LeadSig, 0x41615252);
 8024c32:	4957      	ldr	r1, [pc, #348]	; (8024d90 <f_mkfs+0x710>)
 8024c34:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8024c36:	f7fd fbf7 	bl	8022428 <st_dword>
			st_dword(buf + FSI_StrucSig, 0x61417272);
 8024c3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8024c3c:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8024c40:	4954      	ldr	r1, [pc, #336]	; (8024d94 <f_mkfs+0x714>)
 8024c42:	4618      	mov	r0, r3
 8024c44:	f7fd fbf0 	bl	8022428 <st_dword>
			st_dword(buf + FSI_Free_Count, n_clst - 1);	/* Number of free clusters */
 8024c48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8024c4a:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 8024c4e:	6a3b      	ldr	r3, [r7, #32]
 8024c50:	3b01      	subs	r3, #1
 8024c52:	4619      	mov	r1, r3
 8024c54:	4610      	mov	r0, r2
 8024c56:	f7fd fbe7 	bl	8022428 <st_dword>
			st_dword(buf + FSI_Nxt_Free, 2);			/* Last allocated cluster# */
 8024c5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8024c5c:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 8024c60:	2102      	movs	r1, #2
 8024c62:	4618      	mov	r0, r3
 8024c64:	f7fd fbe0 	bl	8022428 <st_dword>
			st_word(buf + BS_55AA, 0xAA55);
 8024c68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8024c6a:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8024c6e:	f64a 2155 	movw	r1, #43605	; 0xaa55
 8024c72:	4618      	mov	r0, r3
 8024c74:	f7fd fbbd 	bl	80223f2 <st_word>
			disk_write(pdrv, buf, b_vol + 7, 1);		/* Write backup FSINFO (VBR + 7) */
 8024c78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8024c7a:	1dda      	adds	r2, r3, #7
 8024c7c:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 8024c80:	2301      	movs	r3, #1
 8024c82:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8024c84:	f7fd fb3c 	bl	8022300 <disk_write>
			disk_write(pdrv, buf, b_vol + 1, 1);		/* Write original FSINFO (VBR + 1) */
 8024c88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8024c8a:	1c5a      	adds	r2, r3, #1
 8024c8c:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 8024c90:	2301      	movs	r3, #1
 8024c92:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8024c94:	f7fd fb34 	bl	8022300 <disk_write>
		}

		/* Initialize FAT area */
		mem_set(buf, 0, (UINT)szb_buf);
 8024c98:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8024c9a:	2100      	movs	r1, #0
 8024c9c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8024c9e:	f7fd fc10 	bl	80224c2 <mem_set>
		sect = b_fat;		/* FAT start sector */
 8024ca2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8024ca4:	667b      	str	r3, [r7, #100]	; 0x64
		for (i = 0; i < n_fats; i++) {			/* Initialize FATs each */
 8024ca6:	2300      	movs	r3, #0
 8024ca8:	64bb      	str	r3, [r7, #72]	; 0x48
 8024caa:	e04b      	b.n	8024d44 <f_mkfs+0x6c4>
			if (fmt == FS_FAT32) {
 8024cac:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8024cb0:	2b03      	cmp	r3, #3
 8024cb2:	d113      	bne.n	8024cdc <f_mkfs+0x65c>
				st_dword(buf + 0, 0xFFFFFFF8);	/* Entry 0 */
 8024cb4:	f06f 0107 	mvn.w	r1, #7
 8024cb8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8024cba:	f7fd fbb5 	bl	8022428 <st_dword>
				st_dword(buf + 4, 0xFFFFFFFF);	/* Entry 1 */
 8024cbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8024cc0:	3304      	adds	r3, #4
 8024cc2:	f04f 31ff 	mov.w	r1, #4294967295
 8024cc6:	4618      	mov	r0, r3
 8024cc8:	f7fd fbae 	bl	8022428 <st_dword>
				st_dword(buf + 8, 0x0FFFFFFF);	/* Entry 2 (root directory) */
 8024ccc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8024cce:	3308      	adds	r3, #8
 8024cd0:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 8024cd4:	4618      	mov	r0, r3
 8024cd6:	f7fd fba7 	bl	8022428 <st_dword>
 8024cda:	e00b      	b.n	8024cf4 <f_mkfs+0x674>
			} else {
				st_dword(buf + 0, (fmt == FS_FAT12) ? 0xFFFFF8 : 0xFFFFFFF8);	/* Entry 0 and 1 */
 8024cdc:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8024ce0:	2b01      	cmp	r3, #1
 8024ce2:	d101      	bne.n	8024ce8 <f_mkfs+0x668>
 8024ce4:	4b2c      	ldr	r3, [pc, #176]	; (8024d98 <f_mkfs+0x718>)
 8024ce6:	e001      	b.n	8024cec <f_mkfs+0x66c>
 8024ce8:	f06f 0307 	mvn.w	r3, #7
 8024cec:	4619      	mov	r1, r3
 8024cee:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8024cf0:	f7fd fb9a 	bl	8022428 <st_dword>
			}
			nsect = sz_fat;		/* Number of FAT sectors */
 8024cf4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8024cf6:	663b      	str	r3, [r7, #96]	; 0x60
			do {	/* Fill FAT sectors */
				n = (nsect > sz_buf) ? sz_buf : nsect;
 8024cf8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8024cfa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8024cfc:	4293      	cmp	r3, r2
 8024cfe:	bf28      	it	cs
 8024d00:	4613      	movcs	r3, r2
 8024d02:	65fb      	str	r3, [r7, #92]	; 0x5c
				if (disk_write(pdrv, buf, sect, (UINT)n) != RES_OK) return FR_DISK_ERR;
 8024d04:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 8024d08:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8024d0a:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8024d0c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8024d0e:	f7fd faf7 	bl	8022300 <disk_write>
 8024d12:	4603      	mov	r3, r0
 8024d14:	2b00      	cmp	r3, #0
 8024d16:	d001      	beq.n	8024d1c <f_mkfs+0x69c>
 8024d18:	2301      	movs	r3, #1
 8024d1a:	e0d1      	b.n	8024ec0 <f_mkfs+0x840>
				mem_set(buf, 0, ss);
 8024d1c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8024d1e:	461a      	mov	r2, r3
 8024d20:	2100      	movs	r1, #0
 8024d22:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8024d24:	f7fd fbcd 	bl	80224c2 <mem_set>
				sect += n; nsect -= n;
 8024d28:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8024d2a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8024d2c:	4413      	add	r3, r2
 8024d2e:	667b      	str	r3, [r7, #100]	; 0x64
 8024d30:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8024d32:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8024d34:	1ad3      	subs	r3, r2, r3
 8024d36:	663b      	str	r3, [r7, #96]	; 0x60
			} while (nsect);
 8024d38:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8024d3a:	2b00      	cmp	r3, #0
 8024d3c:	d1dc      	bne.n	8024cf8 <f_mkfs+0x678>
		for (i = 0; i < n_fats; i++) {			/* Initialize FATs each */
 8024d3e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8024d40:	3301      	adds	r3, #1
 8024d42:	64bb      	str	r3, [r7, #72]	; 0x48
 8024d44:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8024d46:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8024d48:	429a      	cmp	r2, r3
 8024d4a:	d3af      	bcc.n	8024cac <f_mkfs+0x62c>
		}

		/* Initialize root directory (fill with zero) */
		nsect = (fmt == FS_FAT32) ? pau : sz_dir;	/* Number of root directory sectors */
 8024d4c:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8024d50:	2b03      	cmp	r3, #3
 8024d52:	d101      	bne.n	8024d58 <f_mkfs+0x6d8>
 8024d54:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8024d56:	e000      	b.n	8024d5a <f_mkfs+0x6da>
 8024d58:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8024d5a:	663b      	str	r3, [r7, #96]	; 0x60
		do {
			n = (nsect > sz_buf) ? sz_buf : nsect;
 8024d5c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8024d5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8024d60:	4293      	cmp	r3, r2
 8024d62:	bf28      	it	cs
 8024d64:	4613      	movcs	r3, r2
 8024d66:	65fb      	str	r3, [r7, #92]	; 0x5c
			if (disk_write(pdrv, buf, sect, (UINT)n) != RES_OK) return FR_DISK_ERR;
 8024d68:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 8024d6c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8024d6e:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8024d70:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8024d72:	f7fd fac5 	bl	8022300 <disk_write>
 8024d76:	4603      	mov	r3, r0
 8024d78:	2b00      	cmp	r3, #0
 8024d7a:	d00f      	beq.n	8024d9c <f_mkfs+0x71c>
 8024d7c:	2301      	movs	r3, #1
 8024d7e:	e09f      	b.n	8024ec0 <f_mkfs+0x840>
 8024d80:	08000aec 	.word	0x08000aec
 8024d84:	53740000 	.word	0x53740000
 8024d88:	08000af8 	.word	0x08000af8
 8024d8c:	08000b0c 	.word	0x08000b0c
 8024d90:	41615252 	.word	0x41615252
 8024d94:	61417272 	.word	0x61417272
 8024d98:	00fffff8 	.word	0x00fffff8
			sect += n; nsect -= n;
 8024d9c:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8024d9e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8024da0:	4413      	add	r3, r2
 8024da2:	667b      	str	r3, [r7, #100]	; 0x64
 8024da4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8024da6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8024da8:	1ad3      	subs	r3, r2, r3
 8024daa:	663b      	str	r3, [r7, #96]	; 0x60
		} while (nsect);
 8024dac:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8024dae:	2b00      	cmp	r3, #0
 8024db0:	d1d4      	bne.n	8024d5c <f_mkfs+0x6dc>

	/* Determine system ID in the partition table */
	if (_FS_EXFAT && fmt == FS_EXFAT) {
		sys = 0x07;			/* HPFS/NTFS/exFAT */
	} else {
		if (fmt == FS_FAT32) {
 8024db2:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8024db6:	2b03      	cmp	r3, #3
 8024db8:	d103      	bne.n	8024dc2 <f_mkfs+0x742>
			sys = 0x0C;		/* FAT32X */
 8024dba:	230c      	movs	r3, #12
 8024dbc:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
 8024dc0:	e010      	b.n	8024de4 <f_mkfs+0x764>
		} else {
			if (sz_vol >= 0x10000) {
 8024dc2:	693b      	ldr	r3, [r7, #16]
 8024dc4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8024dc8:	d303      	bcc.n	8024dd2 <f_mkfs+0x752>
				sys = 0x06;	/* FAT12/16 (>=64KS) */
 8024dca:	2306      	movs	r3, #6
 8024dcc:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
 8024dd0:	e008      	b.n	8024de4 <f_mkfs+0x764>
			} else {
				sys = (fmt == FS_FAT16) ? 0x04 : 0x01;	/* FAT16 (<64KS) : FAT12 (<64KS) */
 8024dd2:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8024dd6:	2b02      	cmp	r3, #2
 8024dd8:	d101      	bne.n	8024dde <f_mkfs+0x75e>
 8024dda:	2304      	movs	r3, #4
 8024ddc:	e000      	b.n	8024de0 <f_mkfs+0x760>
 8024dde:	2301      	movs	r3, #1
 8024de0:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
		/* Update system ID in the partition table */
		if (disk_read(pdrv, buf, 0, 1) != RES_OK) return FR_DISK_ERR;	/* Read the MBR */
		buf[MBR_Table + (part - 1) * SZ_PTE + PTE_System] = sys;		/* Set system ID */
		if (disk_write(pdrv, buf, 0, 1) != RES_OK) return FR_DISK_ERR;	/* Write it back to the MBR */
	} else {								/* Created as a new single partition */
		if (!(opt & FM_SFD)) {	/* Create partition table if in FDISK format */
 8024de4:	7afb      	ldrb	r3, [r7, #11]
 8024de6:	f003 0308 	and.w	r3, r3, #8
 8024dea:	2b00      	cmp	r3, #0
 8024dec:	d15b      	bne.n	8024ea6 <f_mkfs+0x826>
			mem_set(buf, 0, ss);
 8024dee:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8024df0:	461a      	mov	r2, r3
 8024df2:	2100      	movs	r1, #0
 8024df4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8024df6:	f7fd fb64 	bl	80224c2 <mem_set>
			st_word(buf + BS_55AA, 0xAA55);		/* MBR signature */
 8024dfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8024dfc:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8024e00:	f64a 2155 	movw	r1, #43605	; 0xaa55
 8024e04:	4618      	mov	r0, r3
 8024e06:	f7fd faf4 	bl	80223f2 <st_word>
			pte = buf + MBR_Table;				/* Create partition table for single partition in the drive */
 8024e0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8024e0c:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 8024e10:	61bb      	str	r3, [r7, #24]
			pte[PTE_Boot] = 0;					/* Boot indicator */
 8024e12:	69bb      	ldr	r3, [r7, #24]
 8024e14:	2200      	movs	r2, #0
 8024e16:	701a      	strb	r2, [r3, #0]
			pte[PTE_StHead] = 1;				/* Start head */
 8024e18:	69bb      	ldr	r3, [r7, #24]
 8024e1a:	3301      	adds	r3, #1
 8024e1c:	2201      	movs	r2, #1
 8024e1e:	701a      	strb	r2, [r3, #0]
			pte[PTE_StSec] = 1;					/* Start sector */
 8024e20:	69bb      	ldr	r3, [r7, #24]
 8024e22:	3302      	adds	r3, #2
 8024e24:	2201      	movs	r2, #1
 8024e26:	701a      	strb	r2, [r3, #0]
			pte[PTE_StCyl] = 0;					/* Start cylinder */
 8024e28:	69bb      	ldr	r3, [r7, #24]
 8024e2a:	3303      	adds	r3, #3
 8024e2c:	2200      	movs	r2, #0
 8024e2e:	701a      	strb	r2, [r3, #0]
			pte[PTE_System] = sys;				/* System type */
 8024e30:	69bb      	ldr	r3, [r7, #24]
 8024e32:	3304      	adds	r3, #4
 8024e34:	f897 204e 	ldrb.w	r2, [r7, #78]	; 0x4e
 8024e38:	701a      	strb	r2, [r3, #0]
			n = (b_vol + sz_vol) / (63 * 255);	/* (End CHS may be invalid) */
 8024e3a:	693a      	ldr	r2, [r7, #16]
 8024e3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8024e3e:	441a      	add	r2, r3
 8024e40:	4b21      	ldr	r3, [pc, #132]	; (8024ec8 <f_mkfs+0x848>)
 8024e42:	fba3 1302 	umull	r1, r3, r3, r2
 8024e46:	1ad2      	subs	r2, r2, r3
 8024e48:	0852      	lsrs	r2, r2, #1
 8024e4a:	4413      	add	r3, r2
 8024e4c:	0b5b      	lsrs	r3, r3, #13
 8024e4e:	65fb      	str	r3, [r7, #92]	; 0x5c
			pte[PTE_EdHead] = 254;				/* End head */
 8024e50:	69bb      	ldr	r3, [r7, #24]
 8024e52:	3305      	adds	r3, #5
 8024e54:	22fe      	movs	r2, #254	; 0xfe
 8024e56:	701a      	strb	r2, [r3, #0]
			pte[PTE_EdSec] = (BYTE)(n >> 2 | 63);	/* End sector */
 8024e58:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8024e5a:	089b      	lsrs	r3, r3, #2
 8024e5c:	b2da      	uxtb	r2, r3
 8024e5e:	69bb      	ldr	r3, [r7, #24]
 8024e60:	3306      	adds	r3, #6
 8024e62:	f042 023f 	orr.w	r2, r2, #63	; 0x3f
 8024e66:	b2d2      	uxtb	r2, r2
 8024e68:	701a      	strb	r2, [r3, #0]
			pte[PTE_EdCyl] = (BYTE)n;			/* End cylinder */
 8024e6a:	69bb      	ldr	r3, [r7, #24]
 8024e6c:	3307      	adds	r3, #7
 8024e6e:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8024e70:	b2d2      	uxtb	r2, r2
 8024e72:	701a      	strb	r2, [r3, #0]
			st_dword(pte + PTE_StLba, b_vol);	/* Start offset in LBA */
 8024e74:	69bb      	ldr	r3, [r7, #24]
 8024e76:	3308      	adds	r3, #8
 8024e78:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8024e7a:	4618      	mov	r0, r3
 8024e7c:	f7fd fad4 	bl	8022428 <st_dword>
			st_dword(pte + PTE_SizLba, sz_vol);	/* Size in sectors */
 8024e80:	69bb      	ldr	r3, [r7, #24]
 8024e82:	330c      	adds	r3, #12
 8024e84:	693a      	ldr	r2, [r7, #16]
 8024e86:	4611      	mov	r1, r2
 8024e88:	4618      	mov	r0, r3
 8024e8a:	f7fd facd 	bl	8022428 <st_dword>
			if (disk_write(pdrv, buf, 0, 1) != RES_OK) return FR_DISK_ERR;	/* Write it to the MBR */
 8024e8e:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 8024e92:	2301      	movs	r3, #1
 8024e94:	2200      	movs	r2, #0
 8024e96:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8024e98:	f7fd fa32 	bl	8022300 <disk_write>
 8024e9c:	4603      	mov	r3, r0
 8024e9e:	2b00      	cmp	r3, #0
 8024ea0:	d001      	beq.n	8024ea6 <f_mkfs+0x826>
 8024ea2:	2301      	movs	r3, #1
 8024ea4:	e00c      	b.n	8024ec0 <f_mkfs+0x840>
		}
	}

	if (disk_ioctl(pdrv, CTRL_SYNC, 0) != RES_OK) return FR_DISK_ERR;
 8024ea6:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8024eaa:	2200      	movs	r2, #0
 8024eac:	2100      	movs	r1, #0
 8024eae:	4618      	mov	r0, r3
 8024eb0:	f7fd fa46 	bl	8022340 <disk_ioctl>
 8024eb4:	4603      	mov	r3, r0
 8024eb6:	2b00      	cmp	r3, #0
 8024eb8:	d001      	beq.n	8024ebe <f_mkfs+0x83e>
 8024eba:	2301      	movs	r3, #1
 8024ebc:	e000      	b.n	8024ec0 <f_mkfs+0x840>

	return FR_OK;
 8024ebe:	2300      	movs	r3, #0
}
 8024ec0:	4618      	mov	r0, r3
 8024ec2:	3770      	adds	r7, #112	; 0x70
 8024ec4:	46bd      	mov	sp, r7
 8024ec6:	bd80      	pop	{r7, pc}
 8024ec8:	0515565b 	.word	0x0515565b

08024ecc <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8024ecc:	b480      	push	{r7}
 8024ece:	b087      	sub	sp, #28
 8024ed0:	af00      	add	r7, sp, #0
 8024ed2:	60f8      	str	r0, [r7, #12]
 8024ed4:	60b9      	str	r1, [r7, #8]
 8024ed6:	4613      	mov	r3, r2
 8024ed8:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8024eda:	2301      	movs	r3, #1
 8024edc:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8024ede:	2300      	movs	r3, #0
 8024ee0:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8024ee2:	4b1f      	ldr	r3, [pc, #124]	; (8024f60 <FATFS_LinkDriverEx+0x94>)
 8024ee4:	7a5b      	ldrb	r3, [r3, #9]
 8024ee6:	b2db      	uxtb	r3, r3
 8024ee8:	2b00      	cmp	r3, #0
 8024eea:	d131      	bne.n	8024f50 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8024eec:	4b1c      	ldr	r3, [pc, #112]	; (8024f60 <FATFS_LinkDriverEx+0x94>)
 8024eee:	7a5b      	ldrb	r3, [r3, #9]
 8024ef0:	b2db      	uxtb	r3, r3
 8024ef2:	461a      	mov	r2, r3
 8024ef4:	4b1a      	ldr	r3, [pc, #104]	; (8024f60 <FATFS_LinkDriverEx+0x94>)
 8024ef6:	2100      	movs	r1, #0
 8024ef8:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8024efa:	4b19      	ldr	r3, [pc, #100]	; (8024f60 <FATFS_LinkDriverEx+0x94>)
 8024efc:	7a5b      	ldrb	r3, [r3, #9]
 8024efe:	b2db      	uxtb	r3, r3
 8024f00:	4a17      	ldr	r2, [pc, #92]	; (8024f60 <FATFS_LinkDriverEx+0x94>)
 8024f02:	009b      	lsls	r3, r3, #2
 8024f04:	4413      	add	r3, r2
 8024f06:	68fa      	ldr	r2, [r7, #12]
 8024f08:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8024f0a:	4b15      	ldr	r3, [pc, #84]	; (8024f60 <FATFS_LinkDriverEx+0x94>)
 8024f0c:	7a5b      	ldrb	r3, [r3, #9]
 8024f0e:	b2db      	uxtb	r3, r3
 8024f10:	461a      	mov	r2, r3
 8024f12:	4b13      	ldr	r3, [pc, #76]	; (8024f60 <FATFS_LinkDriverEx+0x94>)
 8024f14:	4413      	add	r3, r2
 8024f16:	79fa      	ldrb	r2, [r7, #7]
 8024f18:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8024f1a:	4b11      	ldr	r3, [pc, #68]	; (8024f60 <FATFS_LinkDriverEx+0x94>)
 8024f1c:	7a5b      	ldrb	r3, [r3, #9]
 8024f1e:	b2db      	uxtb	r3, r3
 8024f20:	1c5a      	adds	r2, r3, #1
 8024f22:	b2d1      	uxtb	r1, r2
 8024f24:	4a0e      	ldr	r2, [pc, #56]	; (8024f60 <FATFS_LinkDriverEx+0x94>)
 8024f26:	7251      	strb	r1, [r2, #9]
 8024f28:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8024f2a:	7dbb      	ldrb	r3, [r7, #22]
 8024f2c:	3330      	adds	r3, #48	; 0x30
 8024f2e:	b2da      	uxtb	r2, r3
 8024f30:	68bb      	ldr	r3, [r7, #8]
 8024f32:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8024f34:	68bb      	ldr	r3, [r7, #8]
 8024f36:	3301      	adds	r3, #1
 8024f38:	223a      	movs	r2, #58	; 0x3a
 8024f3a:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8024f3c:	68bb      	ldr	r3, [r7, #8]
 8024f3e:	3302      	adds	r3, #2
 8024f40:	222f      	movs	r2, #47	; 0x2f
 8024f42:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8024f44:	68bb      	ldr	r3, [r7, #8]
 8024f46:	3303      	adds	r3, #3
 8024f48:	2200      	movs	r2, #0
 8024f4a:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8024f4c:	2300      	movs	r3, #0
 8024f4e:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8024f50:	7dfb      	ldrb	r3, [r7, #23]
}
 8024f52:	4618      	mov	r0, r3
 8024f54:	371c      	adds	r7, #28
 8024f56:	46bd      	mov	sp, r7
 8024f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8024f5c:	4770      	bx	lr
 8024f5e:	bf00      	nop
 8024f60:	200007d4 	.word	0x200007d4

08024f64 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8024f64:	b580      	push	{r7, lr}
 8024f66:	b082      	sub	sp, #8
 8024f68:	af00      	add	r7, sp, #0
 8024f6a:	6078      	str	r0, [r7, #4]
 8024f6c:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8024f6e:	2200      	movs	r2, #0
 8024f70:	6839      	ldr	r1, [r7, #0]
 8024f72:	6878      	ldr	r0, [r7, #4]
 8024f74:	f7ff ffaa 	bl	8024ecc <FATFS_LinkDriverEx>
 8024f78:	4603      	mov	r3, r0
}
 8024f7a:	4618      	mov	r0, r3
 8024f7c:	3708      	adds	r7, #8
 8024f7e:	46bd      	mov	sp, r7
 8024f80:	bd80      	pop	{r7, pc}
	...

08024f84 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8024f84:	b580      	push	{r7, lr}
 8024f86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8024f88:	2200      	movs	r2, #0
 8024f8a:	4912      	ldr	r1, [pc, #72]	; (8024fd4 <MX_USB_DEVICE_Init+0x50>)
 8024f8c:	4812      	ldr	r0, [pc, #72]	; (8024fd8 <MX_USB_DEVICE_Init+0x54>)
 8024f8e:	f7fb ffe1 	bl	8020f54 <USBD_Init>
 8024f92:	4603      	mov	r3, r0
 8024f94:	2b00      	cmp	r3, #0
 8024f96:	d001      	beq.n	8024f9c <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8024f98:	f7f2 faa4 	bl	80174e4 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_MSC) != USBD_OK)
 8024f9c:	490f      	ldr	r1, [pc, #60]	; (8024fdc <MX_USB_DEVICE_Init+0x58>)
 8024f9e:	480e      	ldr	r0, [pc, #56]	; (8024fd8 <MX_USB_DEVICE_Init+0x54>)
 8024fa0:	f7fc f808 	bl	8020fb4 <USBD_RegisterClass>
 8024fa4:	4603      	mov	r3, r0
 8024fa6:	2b00      	cmp	r3, #0
 8024fa8:	d001      	beq.n	8024fae <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8024faa:	f7f2 fa9b 	bl	80174e4 <Error_Handler>
  }
  if (USBD_MSC_RegisterStorage(&hUsbDeviceFS, &USBD_Storage_Interface_fops_FS) != USBD_OK)
 8024fae:	490c      	ldr	r1, [pc, #48]	; (8024fe0 <MX_USB_DEVICE_Init+0x5c>)
 8024fb0:	4809      	ldr	r0, [pc, #36]	; (8024fd8 <MX_USB_DEVICE_Init+0x54>)
 8024fb2:	f7fa fa83 	bl	801f4bc <USBD_MSC_RegisterStorage>
 8024fb6:	4603      	mov	r3, r0
 8024fb8:	2b00      	cmp	r3, #0
 8024fba:	d001      	beq.n	8024fc0 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8024fbc:	f7f2 fa92 	bl	80174e4 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8024fc0:	4805      	ldr	r0, [pc, #20]	; (8024fd8 <MX_USB_DEVICE_Init+0x54>)
 8024fc2:	f7fc f81e 	bl	8021002 <USBD_Start>
 8024fc6:	4603      	mov	r3, r0
 8024fc8:	2b00      	cmp	r3, #0
 8024fca:	d001      	beq.n	8024fd0 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8024fcc:	f7f2 fa8a 	bl	80174e4 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8024fd0:	bf00      	nop
 8024fd2:	bd80      	pop	{r7, pc}
 8024fd4:	2000066c 	.word	0x2000066c
 8024fd8:	2000aae4 	.word	0x2000aae4
 8024fdc:	20000584 	.word	0x20000584
 8024fe0:	200006cc 	.word	0x200006cc

08024fe4 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8024fe4:	b480      	push	{r7}
 8024fe6:	b083      	sub	sp, #12
 8024fe8:	af00      	add	r7, sp, #0
 8024fea:	4603      	mov	r3, r0
 8024fec:	6039      	str	r1, [r7, #0]
 8024fee:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8024ff0:	683b      	ldr	r3, [r7, #0]
 8024ff2:	2212      	movs	r2, #18
 8024ff4:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8024ff6:	4b03      	ldr	r3, [pc, #12]	; (8025004 <USBD_FS_DeviceDescriptor+0x20>)
}
 8024ff8:	4618      	mov	r0, r3
 8024ffa:	370c      	adds	r7, #12
 8024ffc:	46bd      	mov	sp, r7
 8024ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8025002:	4770      	bx	lr
 8025004:	2000068c 	.word	0x2000068c

08025008 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8025008:	b480      	push	{r7}
 802500a:	b083      	sub	sp, #12
 802500c:	af00      	add	r7, sp, #0
 802500e:	4603      	mov	r3, r0
 8025010:	6039      	str	r1, [r7, #0]
 8025012:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8025014:	683b      	ldr	r3, [r7, #0]
 8025016:	2204      	movs	r2, #4
 8025018:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 802501a:	4b03      	ldr	r3, [pc, #12]	; (8025028 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 802501c:	4618      	mov	r0, r3
 802501e:	370c      	adds	r7, #12
 8025020:	46bd      	mov	sp, r7
 8025022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8025026:	4770      	bx	lr
 8025028:	200006ac 	.word	0x200006ac

0802502c <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 802502c:	b580      	push	{r7, lr}
 802502e:	b082      	sub	sp, #8
 8025030:	af00      	add	r7, sp, #0
 8025032:	4603      	mov	r3, r0
 8025034:	6039      	str	r1, [r7, #0]
 8025036:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8025038:	79fb      	ldrb	r3, [r7, #7]
 802503a:	2b00      	cmp	r3, #0
 802503c:	d105      	bne.n	802504a <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 802503e:	683a      	ldr	r2, [r7, #0]
 8025040:	4907      	ldr	r1, [pc, #28]	; (8025060 <USBD_FS_ProductStrDescriptor+0x34>)
 8025042:	4808      	ldr	r0, [pc, #32]	; (8025064 <USBD_FS_ProductStrDescriptor+0x38>)
 8025044:	f7fd f839 	bl	80220ba <USBD_GetString>
 8025048:	e004      	b.n	8025054 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 802504a:	683a      	ldr	r2, [r7, #0]
 802504c:	4904      	ldr	r1, [pc, #16]	; (8025060 <USBD_FS_ProductStrDescriptor+0x34>)
 802504e:	4805      	ldr	r0, [pc, #20]	; (8025064 <USBD_FS_ProductStrDescriptor+0x38>)
 8025050:	f7fd f833 	bl	80220ba <USBD_GetString>
  }
  return USBD_StrDesc;
 8025054:	4b02      	ldr	r3, [pc, #8]	; (8025060 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8025056:	4618      	mov	r0, r3
 8025058:	3708      	adds	r7, #8
 802505a:	46bd      	mov	sp, r7
 802505c:	bd80      	pop	{r7, pc}
 802505e:	bf00      	nop
 8025060:	2000adb4 	.word	0x2000adb4
 8025064:	08000b20 	.word	0x08000b20

08025068 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8025068:	b580      	push	{r7, lr}
 802506a:	b082      	sub	sp, #8
 802506c:	af00      	add	r7, sp, #0
 802506e:	4603      	mov	r3, r0
 8025070:	6039      	str	r1, [r7, #0]
 8025072:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8025074:	683a      	ldr	r2, [r7, #0]
 8025076:	4904      	ldr	r1, [pc, #16]	; (8025088 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8025078:	4804      	ldr	r0, [pc, #16]	; (802508c <USBD_FS_ManufacturerStrDescriptor+0x24>)
 802507a:	f7fd f81e 	bl	80220ba <USBD_GetString>
  return USBD_StrDesc;
 802507e:	4b02      	ldr	r3, [pc, #8]	; (8025088 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8025080:	4618      	mov	r0, r3
 8025082:	3708      	adds	r7, #8
 8025084:	46bd      	mov	sp, r7
 8025086:	bd80      	pop	{r7, pc}
 8025088:	2000adb4 	.word	0x2000adb4
 802508c:	08000b34 	.word	0x08000b34

08025090 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8025090:	b580      	push	{r7, lr}
 8025092:	b082      	sub	sp, #8
 8025094:	af00      	add	r7, sp, #0
 8025096:	4603      	mov	r3, r0
 8025098:	6039      	str	r1, [r7, #0]
 802509a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 802509c:	683b      	ldr	r3, [r7, #0]
 802509e:	221a      	movs	r2, #26
 80250a0:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80250a2:	f000 f855 	bl	8025150 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 80250a6:	4b02      	ldr	r3, [pc, #8]	; (80250b0 <USBD_FS_SerialStrDescriptor+0x20>)
}
 80250a8:	4618      	mov	r0, r3
 80250aa:	3708      	adds	r7, #8
 80250ac:	46bd      	mov	sp, r7
 80250ae:	bd80      	pop	{r7, pc}
 80250b0:	200006b0 	.word	0x200006b0

080250b4 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80250b4:	b580      	push	{r7, lr}
 80250b6:	b082      	sub	sp, #8
 80250b8:	af00      	add	r7, sp, #0
 80250ba:	4603      	mov	r3, r0
 80250bc:	6039      	str	r1, [r7, #0]
 80250be:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 80250c0:	79fb      	ldrb	r3, [r7, #7]
 80250c2:	2b00      	cmp	r3, #0
 80250c4:	d105      	bne.n	80250d2 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80250c6:	683a      	ldr	r2, [r7, #0]
 80250c8:	4907      	ldr	r1, [pc, #28]	; (80250e8 <USBD_FS_ConfigStrDescriptor+0x34>)
 80250ca:	4808      	ldr	r0, [pc, #32]	; (80250ec <USBD_FS_ConfigStrDescriptor+0x38>)
 80250cc:	f7fc fff5 	bl	80220ba <USBD_GetString>
 80250d0:	e004      	b.n	80250dc <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80250d2:	683a      	ldr	r2, [r7, #0]
 80250d4:	4904      	ldr	r1, [pc, #16]	; (80250e8 <USBD_FS_ConfigStrDescriptor+0x34>)
 80250d6:	4805      	ldr	r0, [pc, #20]	; (80250ec <USBD_FS_ConfigStrDescriptor+0x38>)
 80250d8:	f7fc ffef 	bl	80220ba <USBD_GetString>
  }
  return USBD_StrDesc;
 80250dc:	4b02      	ldr	r3, [pc, #8]	; (80250e8 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 80250de:	4618      	mov	r0, r3
 80250e0:	3708      	adds	r7, #8
 80250e2:	46bd      	mov	sp, r7
 80250e4:	bd80      	pop	{r7, pc}
 80250e6:	bf00      	nop
 80250e8:	2000adb4 	.word	0x2000adb4
 80250ec:	08000b48 	.word	0x08000b48

080250f0 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80250f0:	b580      	push	{r7, lr}
 80250f2:	b082      	sub	sp, #8
 80250f4:	af00      	add	r7, sp, #0
 80250f6:	4603      	mov	r3, r0
 80250f8:	6039      	str	r1, [r7, #0]
 80250fa:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80250fc:	79fb      	ldrb	r3, [r7, #7]
 80250fe:	2b00      	cmp	r3, #0
 8025100:	d105      	bne.n	802510e <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8025102:	683a      	ldr	r2, [r7, #0]
 8025104:	4907      	ldr	r1, [pc, #28]	; (8025124 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8025106:	4808      	ldr	r0, [pc, #32]	; (8025128 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8025108:	f7fc ffd7 	bl	80220ba <USBD_GetString>
 802510c:	e004      	b.n	8025118 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 802510e:	683a      	ldr	r2, [r7, #0]
 8025110:	4904      	ldr	r1, [pc, #16]	; (8025124 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8025112:	4805      	ldr	r0, [pc, #20]	; (8025128 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8025114:	f7fc ffd1 	bl	80220ba <USBD_GetString>
  }
  return USBD_StrDesc;
 8025118:	4b02      	ldr	r3, [pc, #8]	; (8025124 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 802511a:	4618      	mov	r0, r3
 802511c:	3708      	adds	r7, #8
 802511e:	46bd      	mov	sp, r7
 8025120:	bd80      	pop	{r7, pc}
 8025122:	bf00      	nop
 8025124:	2000adb4 	.word	0x2000adb4
 8025128:	08000b54 	.word	0x08000b54

0802512c <USBD_FS_USR_BOSDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 802512c:	b480      	push	{r7}
 802512e:	b083      	sub	sp, #12
 8025130:	af00      	add	r7, sp, #0
 8025132:	4603      	mov	r3, r0
 8025134:	6039      	str	r1, [r7, #0]
 8025136:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_BOSDesc);
 8025138:	683b      	ldr	r3, [r7, #0]
 802513a:	220c      	movs	r2, #12
 802513c:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)USBD_FS_BOSDesc;
 802513e:	4b03      	ldr	r3, [pc, #12]	; (802514c <USBD_FS_USR_BOSDescriptor+0x20>)
}
 8025140:	4618      	mov	r0, r3
 8025142:	370c      	adds	r7, #12
 8025144:	46bd      	mov	sp, r7
 8025146:	f85d 7b04 	ldr.w	r7, [sp], #4
 802514a:	4770      	bx	lr
 802514c:	200006a0 	.word	0x200006a0

08025150 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8025150:	b580      	push	{r7, lr}
 8025152:	b084      	sub	sp, #16
 8025154:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8025156:	4b0f      	ldr	r3, [pc, #60]	; (8025194 <Get_SerialNum+0x44>)
 8025158:	681b      	ldr	r3, [r3, #0]
 802515a:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 802515c:	4b0e      	ldr	r3, [pc, #56]	; (8025198 <Get_SerialNum+0x48>)
 802515e:	681b      	ldr	r3, [r3, #0]
 8025160:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8025162:	4b0e      	ldr	r3, [pc, #56]	; (802519c <Get_SerialNum+0x4c>)
 8025164:	681b      	ldr	r3, [r3, #0]
 8025166:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8025168:	68fa      	ldr	r2, [r7, #12]
 802516a:	687b      	ldr	r3, [r7, #4]
 802516c:	4413      	add	r3, r2
 802516e:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8025170:	68fb      	ldr	r3, [r7, #12]
 8025172:	2b00      	cmp	r3, #0
 8025174:	d009      	beq.n	802518a <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8025176:	2208      	movs	r2, #8
 8025178:	4909      	ldr	r1, [pc, #36]	; (80251a0 <Get_SerialNum+0x50>)
 802517a:	68f8      	ldr	r0, [r7, #12]
 802517c:	f000 f814 	bl	80251a8 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8025180:	2204      	movs	r2, #4
 8025182:	4908      	ldr	r1, [pc, #32]	; (80251a4 <Get_SerialNum+0x54>)
 8025184:	68b8      	ldr	r0, [r7, #8]
 8025186:	f000 f80f 	bl	80251a8 <IntToUnicode>
  }
}
 802518a:	bf00      	nop
 802518c:	3710      	adds	r7, #16
 802518e:	46bd      	mov	sp, r7
 8025190:	bd80      	pop	{r7, pc}
 8025192:	bf00      	nop
 8025194:	1fff7a10 	.word	0x1fff7a10
 8025198:	1fff7a14 	.word	0x1fff7a14
 802519c:	1fff7a18 	.word	0x1fff7a18
 80251a0:	200006b2 	.word	0x200006b2
 80251a4:	200006c2 	.word	0x200006c2

080251a8 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80251a8:	b480      	push	{r7}
 80251aa:	b087      	sub	sp, #28
 80251ac:	af00      	add	r7, sp, #0
 80251ae:	60f8      	str	r0, [r7, #12]
 80251b0:	60b9      	str	r1, [r7, #8]
 80251b2:	4613      	mov	r3, r2
 80251b4:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 80251b6:	2300      	movs	r3, #0
 80251b8:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 80251ba:	2300      	movs	r3, #0
 80251bc:	75fb      	strb	r3, [r7, #23]
 80251be:	e027      	b.n	8025210 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 80251c0:	68fb      	ldr	r3, [r7, #12]
 80251c2:	0f1b      	lsrs	r3, r3, #28
 80251c4:	2b09      	cmp	r3, #9
 80251c6:	d80b      	bhi.n	80251e0 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80251c8:	68fb      	ldr	r3, [r7, #12]
 80251ca:	0f1b      	lsrs	r3, r3, #28
 80251cc:	b2da      	uxtb	r2, r3
 80251ce:	7dfb      	ldrb	r3, [r7, #23]
 80251d0:	005b      	lsls	r3, r3, #1
 80251d2:	4619      	mov	r1, r3
 80251d4:	68bb      	ldr	r3, [r7, #8]
 80251d6:	440b      	add	r3, r1
 80251d8:	3230      	adds	r2, #48	; 0x30
 80251da:	b2d2      	uxtb	r2, r2
 80251dc:	701a      	strb	r2, [r3, #0]
 80251de:	e00a      	b.n	80251f6 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80251e0:	68fb      	ldr	r3, [r7, #12]
 80251e2:	0f1b      	lsrs	r3, r3, #28
 80251e4:	b2da      	uxtb	r2, r3
 80251e6:	7dfb      	ldrb	r3, [r7, #23]
 80251e8:	005b      	lsls	r3, r3, #1
 80251ea:	4619      	mov	r1, r3
 80251ec:	68bb      	ldr	r3, [r7, #8]
 80251ee:	440b      	add	r3, r1
 80251f0:	3237      	adds	r2, #55	; 0x37
 80251f2:	b2d2      	uxtb	r2, r2
 80251f4:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 80251f6:	68fb      	ldr	r3, [r7, #12]
 80251f8:	011b      	lsls	r3, r3, #4
 80251fa:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 80251fc:	7dfb      	ldrb	r3, [r7, #23]
 80251fe:	005b      	lsls	r3, r3, #1
 8025200:	3301      	adds	r3, #1
 8025202:	68ba      	ldr	r2, [r7, #8]
 8025204:	4413      	add	r3, r2
 8025206:	2200      	movs	r2, #0
 8025208:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 802520a:	7dfb      	ldrb	r3, [r7, #23]
 802520c:	3301      	adds	r3, #1
 802520e:	75fb      	strb	r3, [r7, #23]
 8025210:	7dfa      	ldrb	r2, [r7, #23]
 8025212:	79fb      	ldrb	r3, [r7, #7]
 8025214:	429a      	cmp	r2, r3
 8025216:	d3d3      	bcc.n	80251c0 <IntToUnicode+0x18>
  }
}
 8025218:	bf00      	nop
 802521a:	bf00      	nop
 802521c:	371c      	adds	r7, #28
 802521e:	46bd      	mov	sp, r7
 8025220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8025224:	4770      	bx	lr

08025226 <STORAGE_Init_FS>:
  * @brief  Initializes over USB FS IP
  * @param  lun:
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_Init_FS(uint8_t lun)
{
 8025226:	b480      	push	{r7}
 8025228:	b083      	sub	sp, #12
 802522a:	af00      	add	r7, sp, #0
 802522c:	4603      	mov	r3, r0
 802522e:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 2 */
  return (USBD_OK);
 8025230:	2300      	movs	r3, #0
  /* USER CODE END 2 */
}
 8025232:	4618      	mov	r0, r3
 8025234:	370c      	adds	r7, #12
 8025236:	46bd      	mov	sp, r7
 8025238:	f85d 7b04 	ldr.w	r7, [sp], #4
 802523c:	4770      	bx	lr
	...

08025240 <STORAGE_GetCapacity_FS>:
  * @param  block_num: .
  * @param  block_size: .
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_GetCapacity_FS(uint8_t lun, uint32_t *block_num, uint16_t *block_size)
{
 8025240:	b480      	push	{r7}
 8025242:	b085      	sub	sp, #20
 8025244:	af00      	add	r7, sp, #0
 8025246:	4603      	mov	r3, r0
 8025248:	60b9      	str	r1, [r7, #8]
 802524a:	607a      	str	r2, [r7, #4]
 802524c:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 3 */
	  *block_num  = W25Qx_Para.SUBSECTOR_COUNT;
 802524e:	4b07      	ldr	r3, [pc, #28]	; (802526c <STORAGE_GetCapacity_FS+0x2c>)
 8025250:	689a      	ldr	r2, [r3, #8]
 8025252:	68bb      	ldr	r3, [r7, #8]
 8025254:	601a      	str	r2, [r3, #0]
	  *block_size = W25Qx_Para.SUBSECTOR_SIZE;
 8025256:	4b05      	ldr	r3, [pc, #20]	; (802526c <STORAGE_GetCapacity_FS+0x2c>)
 8025258:	899a      	ldrh	r2, [r3, #12]
 802525a:	687b      	ldr	r3, [r7, #4]
 802525c:	801a      	strh	r2, [r3, #0]
  return (USBD_OK);
 802525e:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8025260:	4618      	mov	r0, r3
 8025262:	3714      	adds	r7, #20
 8025264:	46bd      	mov	sp, r7
 8025266:	f85d 7b04 	ldr.w	r7, [sp], #4
 802526a:	4770      	bx	lr
 802526c:	20007a48 	.word	0x20007a48

08025270 <STORAGE_IsReady_FS>:
  * @brief  .
  * @param  lun: .
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_IsReady_FS(uint8_t lun)
{
 8025270:	b480      	push	{r7}
 8025272:	b083      	sub	sp, #12
 8025274:	af00      	add	r7, sp, #0
 8025276:	4603      	mov	r3, r0
 8025278:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 802527a:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 802527c:	4618      	mov	r0, r3
 802527e:	370c      	adds	r7, #12
 8025280:	46bd      	mov	sp, r7
 8025282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8025286:	4770      	bx	lr

08025288 <STORAGE_IsWriteProtected_FS>:
  * @brief  .
  * @param  lun: .
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_IsWriteProtected_FS(uint8_t lun)
{
 8025288:	b480      	push	{r7}
 802528a:	b083      	sub	sp, #12
 802528c:	af00      	add	r7, sp, #0
 802528e:	4603      	mov	r3, r0
 8025290:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 5 */
  return (USBD_OK);
 8025292:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8025294:	4618      	mov	r0, r3
 8025296:	370c      	adds	r7, #12
 8025298:	46bd      	mov	sp, r7
 802529a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802529e:	4770      	bx	lr

080252a0 <STORAGE_Read_FS>:
  * @brief  .
  * @param  lun: .
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_Read_FS(uint8_t lun, uint8_t *buf, uint32_t blk_addr, uint16_t blk_len)
{
 80252a0:	b580      	push	{r7, lr}
 80252a2:	b086      	sub	sp, #24
 80252a4:	af00      	add	r7, sp, #0
 80252a6:	60b9      	str	r1, [r7, #8]
 80252a8:	607a      	str	r2, [r7, #4]
 80252aa:	461a      	mov	r2, r3
 80252ac:	4603      	mov	r3, r0
 80252ae:	73fb      	strb	r3, [r7, #15]
 80252b0:	4613      	mov	r3, r2
 80252b2:	81bb      	strh	r3, [r7, #12]
  /* USER CODE BEGIN 6 */
	short i;
	for(i = 0; i < blk_len; i ++)
 80252b4:	2300      	movs	r3, #0
 80252b6:	82fb      	strh	r3, [r7, #22]
 80252b8:	e01a      	b.n	80252f0 <STORAGE_Read_FS+0x50>
	{
		W25Qx_Read(buf, blk_addr*W25Qx_Para.SUBSECTOR_SIZE, W25Qx_Para.SUBSECTOR_SIZE);
 80252ba:	4b12      	ldr	r3, [pc, #72]	; (8025304 <STORAGE_Read_FS+0x64>)
 80252bc:	899b      	ldrh	r3, [r3, #12]
 80252be:	461a      	mov	r2, r3
 80252c0:	687b      	ldr	r3, [r7, #4]
 80252c2:	fb03 f302 	mul.w	r3, r3, r2
 80252c6:	4a0f      	ldr	r2, [pc, #60]	; (8025304 <STORAGE_Read_FS+0x64>)
 80252c8:	8992      	ldrh	r2, [r2, #12]
 80252ca:	4619      	mov	r1, r3
 80252cc:	68b8      	ldr	r0, [r7, #8]
 80252ce:	f7f2 fd4b 	bl	8017d68 <W25Qx_Read>
		blk_addr ++;
 80252d2:	687b      	ldr	r3, [r7, #4]
 80252d4:	3301      	adds	r3, #1
 80252d6:	607b      	str	r3, [r7, #4]
		buf += W25Qx_Para.SUBSECTOR_SIZE;
 80252d8:	4b0a      	ldr	r3, [pc, #40]	; (8025304 <STORAGE_Read_FS+0x64>)
 80252da:	899b      	ldrh	r3, [r3, #12]
 80252dc:	461a      	mov	r2, r3
 80252de:	68bb      	ldr	r3, [r7, #8]
 80252e0:	4413      	add	r3, r2
 80252e2:	60bb      	str	r3, [r7, #8]
	for(i = 0; i < blk_len; i ++)
 80252e4:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80252e8:	b29b      	uxth	r3, r3
 80252ea:	3301      	adds	r3, #1
 80252ec:	b29b      	uxth	r3, r3
 80252ee:	82fb      	strh	r3, [r7, #22]
 80252f0:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80252f4:	89bb      	ldrh	r3, [r7, #12]
 80252f6:	429a      	cmp	r2, r3
 80252f8:	dbdf      	blt.n	80252ba <STORAGE_Read_FS+0x1a>
	}
  return (USBD_OK);
 80252fa:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 80252fc:	4618      	mov	r0, r3
 80252fe:	3718      	adds	r7, #24
 8025300:	46bd      	mov	sp, r7
 8025302:	bd80      	pop	{r7, pc}
 8025304:	20007a48 	.word	0x20007a48

08025308 <STORAGE_Write_FS>:
  * @brief  .
  * @param  lun: .
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_Write_FS(uint8_t lun, uint8_t *buf, uint32_t blk_addr, uint16_t blk_len)
{
 8025308:	b580      	push	{r7, lr}
 802530a:	b086      	sub	sp, #24
 802530c:	af00      	add	r7, sp, #0
 802530e:	60b9      	str	r1, [r7, #8]
 8025310:	607a      	str	r2, [r7, #4]
 8025312:	461a      	mov	r2, r3
 8025314:	4603      	mov	r3, r0
 8025316:	73fb      	strb	r3, [r7, #15]
 8025318:	4613      	mov	r3, r2
 802531a:	81bb      	strh	r3, [r7, #12]
  /* USER CODE BEGIN 7 */
	short i;
	for(i = 0; i < blk_len; i ++)
 802531c:	2300      	movs	r3, #0
 802531e:	82fb      	strh	r3, [r7, #22]
 8025320:	e023      	b.n	802536a <STORAGE_Write_FS+0x62>
	{
		W25Qx_Erase_Block(blk_addr * W25Qx_Para.SUBSECTOR_SIZE);
 8025322:	4b17      	ldr	r3, [pc, #92]	; (8025380 <STORAGE_Write_FS+0x78>)
 8025324:	899b      	ldrh	r3, [r3, #12]
 8025326:	461a      	mov	r2, r3
 8025328:	687b      	ldr	r3, [r7, #4]
 802532a:	fb03 f302 	mul.w	r3, r3, r2
 802532e:	4618      	mov	r0, r3
 8025330:	f7f2 fde4 	bl	8017efc <W25Qx_Erase_Block>
		W25Qx_Write((uint8_t*)buf,blk_addr * W25Qx_Para.SUBSECTOR_SIZE,W25Qx_Para.SUBSECTOR_SIZE);
 8025334:	4b12      	ldr	r3, [pc, #72]	; (8025380 <STORAGE_Write_FS+0x78>)
 8025336:	899b      	ldrh	r3, [r3, #12]
 8025338:	461a      	mov	r2, r3
 802533a:	687b      	ldr	r3, [r7, #4]
 802533c:	fb03 f302 	mul.w	r3, r3, r2
 8025340:	4a0f      	ldr	r2, [pc, #60]	; (8025380 <STORAGE_Write_FS+0x78>)
 8025342:	8992      	ldrh	r2, [r2, #12]
 8025344:	4619      	mov	r1, r3
 8025346:	68b8      	ldr	r0, [r7, #8]
 8025348:	f7f2 fd4c 	bl	8017de4 <W25Qx_Write>
		blk_addr ++;
 802534c:	687b      	ldr	r3, [r7, #4]
 802534e:	3301      	adds	r3, #1
 8025350:	607b      	str	r3, [r7, #4]
		buf += W25Qx_Para.SUBSECTOR_SIZE;
 8025352:	4b0b      	ldr	r3, [pc, #44]	; (8025380 <STORAGE_Write_FS+0x78>)
 8025354:	899b      	ldrh	r3, [r3, #12]
 8025356:	461a      	mov	r2, r3
 8025358:	68bb      	ldr	r3, [r7, #8]
 802535a:	4413      	add	r3, r2
 802535c:	60bb      	str	r3, [r7, #8]
	for(i = 0; i < blk_len; i ++)
 802535e:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8025362:	b29b      	uxth	r3, r3
 8025364:	3301      	adds	r3, #1
 8025366:	b29b      	uxth	r3, r3
 8025368:	82fb      	strh	r3, [r7, #22]
 802536a:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 802536e:	89bb      	ldrh	r3, [r7, #12]
 8025370:	429a      	cmp	r2, r3
 8025372:	dbd6      	blt.n	8025322 <STORAGE_Write_FS+0x1a>
	}
	return (USBD_OK);
 8025374:	2300      	movs	r3, #0
  /* USER CODE END 7 */
}
 8025376:	4618      	mov	r0, r3
 8025378:	3718      	adds	r7, #24
 802537a:	46bd      	mov	sp, r7
 802537c:	bd80      	pop	{r7, pc}
 802537e:	bf00      	nop
 8025380:	20007a48 	.word	0x20007a48

08025384 <STORAGE_GetMaxLun_FS>:
  * @brief  .
  * @param  None
  * @retval .
  */
int8_t STORAGE_GetMaxLun_FS(void)
{
 8025384:	b480      	push	{r7}
 8025386:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 8 */
  return (STORAGE_LUN_NBR - 1);
 8025388:	2300      	movs	r3, #0
  /* USER CODE END 8 */
}
 802538a:	4618      	mov	r0, r3
 802538c:	46bd      	mov	sp, r7
 802538e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8025392:	4770      	bx	lr

08025394 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8025394:	b580      	push	{r7, lr}
 8025396:	b0a0      	sub	sp, #128	; 0x80
 8025398:	af00      	add	r7, sp, #0
 802539a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 802539c:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80253a0:	2200      	movs	r2, #0
 80253a2:	601a      	str	r2, [r3, #0]
 80253a4:	605a      	str	r2, [r3, #4]
 80253a6:	609a      	str	r2, [r3, #8]
 80253a8:	60da      	str	r2, [r3, #12]
 80253aa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80253ac:	f107 0310 	add.w	r3, r7, #16
 80253b0:	225c      	movs	r2, #92	; 0x5c
 80253b2:	2100      	movs	r1, #0
 80253b4:	4618      	mov	r0, r3
 80253b6:	f000 fbd9 	bl	8025b6c <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 80253ba:	687b      	ldr	r3, [r7, #4]
 80253bc:	681b      	ldr	r3, [r3, #0]
 80253be:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80253c2:	d154      	bne.n	802546e <HAL_PCD_MspInit+0xda>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 80253c4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80253c8:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.PLLSAI.PLLSAIM = 25;
 80253ca:	2319      	movs	r3, #25
 80253cc:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.PLLSAI.PLLSAIN = 192;
 80253ce:	23c0      	movs	r3, #192	; 0xc0
 80253d0:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInitStruct.PLLSAI.PLLSAIQ = 2;
 80253d2:	2302      	movs	r3, #2
 80253d4:	637b      	str	r3, [r7, #52]	; 0x34
    PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV4;
 80253d6:	2304      	movs	r3, #4
 80253d8:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInitStruct.PLLSAIDivQ = 1;
 80253da:	2301      	movs	r3, #1
 80253dc:	63fb      	str	r3, [r7, #60]	; 0x3c
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48CLKSOURCE_PLLSAIP;
 80253de:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80253e2:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80253e4:	f107 0310 	add.w	r3, r7, #16
 80253e8:	4618      	mov	r0, r3
 80253ea:	f7f5 fd9d 	bl	801af28 <HAL_RCCEx_PeriphCLKConfig>
 80253ee:	4603      	mov	r3, r0
 80253f0:	2b00      	cmp	r3, #0
 80253f2:	d001      	beq.n	80253f8 <HAL_PCD_MspInit+0x64>
    {
      Error_Handler();
 80253f4:	f7f2 f876 	bl	80174e4 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80253f8:	2300      	movs	r3, #0
 80253fa:	60fb      	str	r3, [r7, #12]
 80253fc:	4b1e      	ldr	r3, [pc, #120]	; (8025478 <HAL_PCD_MspInit+0xe4>)
 80253fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8025400:	4a1d      	ldr	r2, [pc, #116]	; (8025478 <HAL_PCD_MspInit+0xe4>)
 8025402:	f043 0301 	orr.w	r3, r3, #1
 8025406:	6313      	str	r3, [r2, #48]	; 0x30
 8025408:	4b1b      	ldr	r3, [pc, #108]	; (8025478 <HAL_PCD_MspInit+0xe4>)
 802540a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802540c:	f003 0301 	and.w	r3, r3, #1
 8025410:	60fb      	str	r3, [r7, #12]
 8025412:	68fb      	ldr	r3, [r7, #12]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = D__Pin|D_A12_Pin;
 8025414:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8025418:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 802541a:	2302      	movs	r3, #2
 802541c:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 802541e:	2300      	movs	r3, #0
 8025420:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8025422:	2303      	movs	r3, #3
 8025424:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8025426:	230a      	movs	r3, #10
 8025428:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 802542a:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 802542e:	4619      	mov	r1, r3
 8025430:	4812      	ldr	r0, [pc, #72]	; (802547c <HAL_PCD_MspInit+0xe8>)
 8025432:	f7f4 f875 	bl	8019520 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8025436:	4b10      	ldr	r3, [pc, #64]	; (8025478 <HAL_PCD_MspInit+0xe4>)
 8025438:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 802543a:	4a0f      	ldr	r2, [pc, #60]	; (8025478 <HAL_PCD_MspInit+0xe4>)
 802543c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8025440:	6353      	str	r3, [r2, #52]	; 0x34
 8025442:	2300      	movs	r3, #0
 8025444:	60bb      	str	r3, [r7, #8]
 8025446:	4b0c      	ldr	r3, [pc, #48]	; (8025478 <HAL_PCD_MspInit+0xe4>)
 8025448:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 802544a:	4a0b      	ldr	r2, [pc, #44]	; (8025478 <HAL_PCD_MspInit+0xe4>)
 802544c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8025450:	6453      	str	r3, [r2, #68]	; 0x44
 8025452:	4b09      	ldr	r3, [pc, #36]	; (8025478 <HAL_PCD_MspInit+0xe4>)
 8025454:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8025456:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 802545a:	60bb      	str	r3, [r7, #8]
 802545c:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 802545e:	2200      	movs	r2, #0
 8025460:	2100      	movs	r1, #0
 8025462:	2043      	movs	r0, #67	; 0x43
 8025464:	f7f3 f99b 	bl	801879e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8025468:	2043      	movs	r0, #67	; 0x43
 802546a:	f7f3 f9b4 	bl	80187d6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 802546e:	bf00      	nop
 8025470:	3780      	adds	r7, #128	; 0x80
 8025472:	46bd      	mov	sp, r7
 8025474:	bd80      	pop	{r7, pc}
 8025476:	bf00      	nop
 8025478:	40023800 	.word	0x40023800
 802547c:	40020000 	.word	0x40020000

08025480 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8025480:	b580      	push	{r7, lr}
 8025482:	b082      	sub	sp, #8
 8025484:	af00      	add	r7, sp, #0
 8025486:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8025488:	687b      	ldr	r3, [r7, #4]
 802548a:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 802548e:	687b      	ldr	r3, [r7, #4]
 8025490:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8025494:	4619      	mov	r1, r3
 8025496:	4610      	mov	r0, r2
 8025498:	f7fb fdfe 	bl	8021098 <USBD_LL_SetupStage>
}
 802549c:	bf00      	nop
 802549e:	3708      	adds	r7, #8
 80254a0:	46bd      	mov	sp, r7
 80254a2:	bd80      	pop	{r7, pc}

080254a4 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80254a4:	b580      	push	{r7, lr}
 80254a6:	b082      	sub	sp, #8
 80254a8:	af00      	add	r7, sp, #0
 80254aa:	6078      	str	r0, [r7, #4]
 80254ac:	460b      	mov	r3, r1
 80254ae:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80254b0:	687b      	ldr	r3, [r7, #4]
 80254b2:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 80254b6:	78fa      	ldrb	r2, [r7, #3]
 80254b8:	6879      	ldr	r1, [r7, #4]
 80254ba:	4613      	mov	r3, r2
 80254bc:	00db      	lsls	r3, r3, #3
 80254be:	1a9b      	subs	r3, r3, r2
 80254c0:	009b      	lsls	r3, r3, #2
 80254c2:	440b      	add	r3, r1
 80254c4:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80254c8:	681a      	ldr	r2, [r3, #0]
 80254ca:	78fb      	ldrb	r3, [r7, #3]
 80254cc:	4619      	mov	r1, r3
 80254ce:	f7fb fe38 	bl	8021142 <USBD_LL_DataOutStage>
}
 80254d2:	bf00      	nop
 80254d4:	3708      	adds	r7, #8
 80254d6:	46bd      	mov	sp, r7
 80254d8:	bd80      	pop	{r7, pc}

080254da <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80254da:	b580      	push	{r7, lr}
 80254dc:	b082      	sub	sp, #8
 80254de:	af00      	add	r7, sp, #0
 80254e0:	6078      	str	r0, [r7, #4]
 80254e2:	460b      	mov	r3, r1
 80254e4:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80254e6:	687b      	ldr	r3, [r7, #4]
 80254e8:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 80254ec:	78fa      	ldrb	r2, [r7, #3]
 80254ee:	6879      	ldr	r1, [r7, #4]
 80254f0:	4613      	mov	r3, r2
 80254f2:	00db      	lsls	r3, r3, #3
 80254f4:	1a9b      	subs	r3, r3, r2
 80254f6:	009b      	lsls	r3, r3, #2
 80254f8:	440b      	add	r3, r1
 80254fa:	3348      	adds	r3, #72	; 0x48
 80254fc:	681a      	ldr	r2, [r3, #0]
 80254fe:	78fb      	ldrb	r3, [r7, #3]
 8025500:	4619      	mov	r1, r3
 8025502:	f7fb fe81 	bl	8021208 <USBD_LL_DataInStage>
}
 8025506:	bf00      	nop
 8025508:	3708      	adds	r7, #8
 802550a:	46bd      	mov	sp, r7
 802550c:	bd80      	pop	{r7, pc}

0802550e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 802550e:	b580      	push	{r7, lr}
 8025510:	b082      	sub	sp, #8
 8025512:	af00      	add	r7, sp, #0
 8025514:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8025516:	687b      	ldr	r3, [r7, #4]
 8025518:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 802551c:	4618      	mov	r0, r3
 802551e:	f7fb ff95 	bl	802144c <USBD_LL_SOF>
}
 8025522:	bf00      	nop
 8025524:	3708      	adds	r7, #8
 8025526:	46bd      	mov	sp, r7
 8025528:	bd80      	pop	{r7, pc}

0802552a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 802552a:	b580      	push	{r7, lr}
 802552c:	b084      	sub	sp, #16
 802552e:	af00      	add	r7, sp, #0
 8025530:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8025532:	2301      	movs	r3, #1
 8025534:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8025536:	687b      	ldr	r3, [r7, #4]
 8025538:	68db      	ldr	r3, [r3, #12]
 802553a:	2b00      	cmp	r3, #0
 802553c:	d102      	bne.n	8025544 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 802553e:	2300      	movs	r3, #0
 8025540:	73fb      	strb	r3, [r7, #15]
 8025542:	e008      	b.n	8025556 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8025544:	687b      	ldr	r3, [r7, #4]
 8025546:	68db      	ldr	r3, [r3, #12]
 8025548:	2b02      	cmp	r3, #2
 802554a:	d102      	bne.n	8025552 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 802554c:	2301      	movs	r3, #1
 802554e:	73fb      	strb	r3, [r7, #15]
 8025550:	e001      	b.n	8025556 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 8025552:	f7f1 ffc7 	bl	80174e4 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8025556:	687b      	ldr	r3, [r7, #4]
 8025558:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 802555c:	7bfa      	ldrb	r2, [r7, #15]
 802555e:	4611      	mov	r1, r2
 8025560:	4618      	mov	r0, r3
 8025562:	f7fb ff35 	bl	80213d0 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8025566:	687b      	ldr	r3, [r7, #4]
 8025568:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 802556c:	4618      	mov	r0, r3
 802556e:	f7fb fee1 	bl	8021334 <USBD_LL_Reset>
}
 8025572:	bf00      	nop
 8025574:	3710      	adds	r7, #16
 8025576:	46bd      	mov	sp, r7
 8025578:	bd80      	pop	{r7, pc}
	...

0802557c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 802557c:	b580      	push	{r7, lr}
 802557e:	b082      	sub	sp, #8
 8025580:	af00      	add	r7, sp, #0
 8025582:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8025584:	687b      	ldr	r3, [r7, #4]
 8025586:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 802558a:	4618      	mov	r0, r3
 802558c:	f7fb ff30 	bl	80213f0 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8025590:	687b      	ldr	r3, [r7, #4]
 8025592:	681b      	ldr	r3, [r3, #0]
 8025594:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8025598:	681b      	ldr	r3, [r3, #0]
 802559a:	687a      	ldr	r2, [r7, #4]
 802559c:	6812      	ldr	r2, [r2, #0]
 802559e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80255a2:	f043 0301 	orr.w	r3, r3, #1
 80255a6:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80255a8:	687b      	ldr	r3, [r7, #4]
 80255aa:	6a1b      	ldr	r3, [r3, #32]
 80255ac:	2b00      	cmp	r3, #0
 80255ae:	d005      	beq.n	80255bc <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80255b0:	4b04      	ldr	r3, [pc, #16]	; (80255c4 <HAL_PCD_SuspendCallback+0x48>)
 80255b2:	691b      	ldr	r3, [r3, #16]
 80255b4:	4a03      	ldr	r2, [pc, #12]	; (80255c4 <HAL_PCD_SuspendCallback+0x48>)
 80255b6:	f043 0306 	orr.w	r3, r3, #6
 80255ba:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 80255bc:	bf00      	nop
 80255be:	3708      	adds	r7, #8
 80255c0:	46bd      	mov	sp, r7
 80255c2:	bd80      	pop	{r7, pc}
 80255c4:	e000ed00 	.word	0xe000ed00

080255c8 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80255c8:	b580      	push	{r7, lr}
 80255ca:	b082      	sub	sp, #8
 80255cc:	af00      	add	r7, sp, #0
 80255ce:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80255d0:	687b      	ldr	r3, [r7, #4]
 80255d2:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80255d6:	4618      	mov	r0, r3
 80255d8:	f7fb ff20 	bl	802141c <USBD_LL_Resume>
}
 80255dc:	bf00      	nop
 80255de:	3708      	adds	r7, #8
 80255e0:	46bd      	mov	sp, r7
 80255e2:	bd80      	pop	{r7, pc}

080255e4 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80255e4:	b580      	push	{r7, lr}
 80255e6:	b082      	sub	sp, #8
 80255e8:	af00      	add	r7, sp, #0
 80255ea:	6078      	str	r0, [r7, #4]
 80255ec:	460b      	mov	r3, r1
 80255ee:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80255f0:	687b      	ldr	r3, [r7, #4]
 80255f2:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80255f6:	78fa      	ldrb	r2, [r7, #3]
 80255f8:	4611      	mov	r1, r2
 80255fa:	4618      	mov	r0, r3
 80255fc:	f7fb ff6e 	bl	80214dc <USBD_LL_IsoOUTIncomplete>
}
 8025600:	bf00      	nop
 8025602:	3708      	adds	r7, #8
 8025604:	46bd      	mov	sp, r7
 8025606:	bd80      	pop	{r7, pc}

08025608 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8025608:	b580      	push	{r7, lr}
 802560a:	b082      	sub	sp, #8
 802560c:	af00      	add	r7, sp, #0
 802560e:	6078      	str	r0, [r7, #4]
 8025610:	460b      	mov	r3, r1
 8025612:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8025614:	687b      	ldr	r3, [r7, #4]
 8025616:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 802561a:	78fa      	ldrb	r2, [r7, #3]
 802561c:	4611      	mov	r1, r2
 802561e:	4618      	mov	r0, r3
 8025620:	f7fb ff36 	bl	8021490 <USBD_LL_IsoINIncomplete>
}
 8025624:	bf00      	nop
 8025626:	3708      	adds	r7, #8
 8025628:	46bd      	mov	sp, r7
 802562a:	bd80      	pop	{r7, pc}

0802562c <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 802562c:	b580      	push	{r7, lr}
 802562e:	b082      	sub	sp, #8
 8025630:	af00      	add	r7, sp, #0
 8025632:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8025634:	687b      	ldr	r3, [r7, #4]
 8025636:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 802563a:	4618      	mov	r0, r3
 802563c:	f7fb ff74 	bl	8021528 <USBD_LL_DevConnected>
}
 8025640:	bf00      	nop
 8025642:	3708      	adds	r7, #8
 8025644:	46bd      	mov	sp, r7
 8025646:	bd80      	pop	{r7, pc}

08025648 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8025648:	b580      	push	{r7, lr}
 802564a:	b082      	sub	sp, #8
 802564c:	af00      	add	r7, sp, #0
 802564e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8025650:	687b      	ldr	r3, [r7, #4]
 8025652:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8025656:	4618      	mov	r0, r3
 8025658:	f7fb ff71 	bl	802153e <USBD_LL_DevDisconnected>
}
 802565c:	bf00      	nop
 802565e:	3708      	adds	r7, #8
 8025660:	46bd      	mov	sp, r7
 8025662:	bd80      	pop	{r7, pc}

08025664 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8025664:	b580      	push	{r7, lr}
 8025666:	b082      	sub	sp, #8
 8025668:	af00      	add	r7, sp, #0
 802566a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 802566c:	687b      	ldr	r3, [r7, #4]
 802566e:	781b      	ldrb	r3, [r3, #0]
 8025670:	2b00      	cmp	r3, #0
 8025672:	d13c      	bne.n	80256ee <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8025674:	4a20      	ldr	r2, [pc, #128]	; (80256f8 <USBD_LL_Init+0x94>)
 8025676:	687b      	ldr	r3, [r7, #4]
 8025678:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 802567c:	687b      	ldr	r3, [r7, #4]
 802567e:	4a1e      	ldr	r2, [pc, #120]	; (80256f8 <USBD_LL_Init+0x94>)
 8025680:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8025684:	4b1c      	ldr	r3, [pc, #112]	; (80256f8 <USBD_LL_Init+0x94>)
 8025686:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 802568a:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 802568c:	4b1a      	ldr	r3, [pc, #104]	; (80256f8 <USBD_LL_Init+0x94>)
 802568e:	2206      	movs	r2, #6
 8025690:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8025692:	4b19      	ldr	r3, [pc, #100]	; (80256f8 <USBD_LL_Init+0x94>)
 8025694:	2202      	movs	r2, #2
 8025696:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8025698:	4b17      	ldr	r3, [pc, #92]	; (80256f8 <USBD_LL_Init+0x94>)
 802569a:	2200      	movs	r2, #0
 802569c:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 802569e:	4b16      	ldr	r3, [pc, #88]	; (80256f8 <USBD_LL_Init+0x94>)
 80256a0:	2202      	movs	r2, #2
 80256a2:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 80256a4:	4b14      	ldr	r3, [pc, #80]	; (80256f8 <USBD_LL_Init+0x94>)
 80256a6:	2200      	movs	r2, #0
 80256a8:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80256aa:	4b13      	ldr	r3, [pc, #76]	; (80256f8 <USBD_LL_Init+0x94>)
 80256ac:	2200      	movs	r2, #0
 80256ae:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80256b0:	4b11      	ldr	r3, [pc, #68]	; (80256f8 <USBD_LL_Init+0x94>)
 80256b2:	2200      	movs	r2, #0
 80256b4:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 80256b6:	4b10      	ldr	r3, [pc, #64]	; (80256f8 <USBD_LL_Init+0x94>)
 80256b8:	2200      	movs	r2, #0
 80256ba:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80256bc:	4b0e      	ldr	r3, [pc, #56]	; (80256f8 <USBD_LL_Init+0x94>)
 80256be:	2200      	movs	r2, #0
 80256c0:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80256c2:	480d      	ldr	r0, [pc, #52]	; (80256f8 <USBD_LL_Init+0x94>)
 80256c4:	f7f4 f8f1 	bl	80198aa <HAL_PCD_Init>
 80256c8:	4603      	mov	r3, r0
 80256ca:	2b00      	cmp	r3, #0
 80256cc:	d001      	beq.n	80256d2 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 80256ce:	f7f1 ff09 	bl	80174e4 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 80256d2:	2180      	movs	r1, #128	; 0x80
 80256d4:	4808      	ldr	r0, [pc, #32]	; (80256f8 <USBD_LL_Init+0x94>)
 80256d6:	f7f5 fab0 	bl	801ac3a <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 80256da:	2240      	movs	r2, #64	; 0x40
 80256dc:	2100      	movs	r1, #0
 80256de:	4806      	ldr	r0, [pc, #24]	; (80256f8 <USBD_LL_Init+0x94>)
 80256e0:	f7f5 fa64 	bl	801abac <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 80256e4:	2280      	movs	r2, #128	; 0x80
 80256e6:	2101      	movs	r1, #1
 80256e8:	4803      	ldr	r0, [pc, #12]	; (80256f8 <USBD_LL_Init+0x94>)
 80256ea:	f7f5 fa5f 	bl	801abac <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 80256ee:	2300      	movs	r3, #0
}
 80256f0:	4618      	mov	r0, r3
 80256f2:	3708      	adds	r7, #8
 80256f4:	46bd      	mov	sp, r7
 80256f6:	bd80      	pop	{r7, pc}
 80256f8:	2000afb4 	.word	0x2000afb4

080256fc <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 80256fc:	b580      	push	{r7, lr}
 80256fe:	b084      	sub	sp, #16
 8025700:	af00      	add	r7, sp, #0
 8025702:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8025704:	2300      	movs	r3, #0
 8025706:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8025708:	2300      	movs	r3, #0
 802570a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 802570c:	687b      	ldr	r3, [r7, #4]
 802570e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8025712:	4618      	mov	r0, r3
 8025714:	f7f4 f9ed 	bl	8019af2 <HAL_PCD_Start>
 8025718:	4603      	mov	r3, r0
 802571a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 802571c:	7bfb      	ldrb	r3, [r7, #15]
 802571e:	4618      	mov	r0, r3
 8025720:	f000 f9b0 	bl	8025a84 <USBD_Get_USB_Status>
 8025724:	4603      	mov	r3, r0
 8025726:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8025728:	7bbb      	ldrb	r3, [r7, #14]
}
 802572a:	4618      	mov	r0, r3
 802572c:	3710      	adds	r7, #16
 802572e:	46bd      	mov	sp, r7
 8025730:	bd80      	pop	{r7, pc}

08025732 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8025732:	b580      	push	{r7, lr}
 8025734:	b084      	sub	sp, #16
 8025736:	af00      	add	r7, sp, #0
 8025738:	6078      	str	r0, [r7, #4]
 802573a:	4608      	mov	r0, r1
 802573c:	4611      	mov	r1, r2
 802573e:	461a      	mov	r2, r3
 8025740:	4603      	mov	r3, r0
 8025742:	70fb      	strb	r3, [r7, #3]
 8025744:	460b      	mov	r3, r1
 8025746:	70bb      	strb	r3, [r7, #2]
 8025748:	4613      	mov	r3, r2
 802574a:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 802574c:	2300      	movs	r3, #0
 802574e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8025750:	2300      	movs	r3, #0
 8025752:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8025754:	687b      	ldr	r3, [r7, #4]
 8025756:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 802575a:	78bb      	ldrb	r3, [r7, #2]
 802575c:	883a      	ldrh	r2, [r7, #0]
 802575e:	78f9      	ldrb	r1, [r7, #3]
 8025760:	f7f4 fdfe 	bl	801a360 <HAL_PCD_EP_Open>
 8025764:	4603      	mov	r3, r0
 8025766:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8025768:	7bfb      	ldrb	r3, [r7, #15]
 802576a:	4618      	mov	r0, r3
 802576c:	f000 f98a 	bl	8025a84 <USBD_Get_USB_Status>
 8025770:	4603      	mov	r3, r0
 8025772:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8025774:	7bbb      	ldrb	r3, [r7, #14]
}
 8025776:	4618      	mov	r0, r3
 8025778:	3710      	adds	r7, #16
 802577a:	46bd      	mov	sp, r7
 802577c:	bd80      	pop	{r7, pc}

0802577e <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 802577e:	b580      	push	{r7, lr}
 8025780:	b084      	sub	sp, #16
 8025782:	af00      	add	r7, sp, #0
 8025784:	6078      	str	r0, [r7, #4]
 8025786:	460b      	mov	r3, r1
 8025788:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 802578a:	2300      	movs	r3, #0
 802578c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 802578e:	2300      	movs	r3, #0
 8025790:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8025792:	687b      	ldr	r3, [r7, #4]
 8025794:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8025798:	78fa      	ldrb	r2, [r7, #3]
 802579a:	4611      	mov	r1, r2
 802579c:	4618      	mov	r0, r3
 802579e:	f7f4 fe47 	bl	801a430 <HAL_PCD_EP_Close>
 80257a2:	4603      	mov	r3, r0
 80257a4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80257a6:	7bfb      	ldrb	r3, [r7, #15]
 80257a8:	4618      	mov	r0, r3
 80257aa:	f000 f96b 	bl	8025a84 <USBD_Get_USB_Status>
 80257ae:	4603      	mov	r3, r0
 80257b0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80257b2:	7bbb      	ldrb	r3, [r7, #14]
}
 80257b4:	4618      	mov	r0, r3
 80257b6:	3710      	adds	r7, #16
 80257b8:	46bd      	mov	sp, r7
 80257ba:	bd80      	pop	{r7, pc}

080257bc <USBD_LL_FlushEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_FlushEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80257bc:	b580      	push	{r7, lr}
 80257be:	b084      	sub	sp, #16
 80257c0:	af00      	add	r7, sp, #0
 80257c2:	6078      	str	r0, [r7, #4]
 80257c4:	460b      	mov	r3, r1
 80257c6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80257c8:	2300      	movs	r3, #0
 80257ca:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80257cc:	2300      	movs	r3, #0
 80257ce:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Flush(pdev->pData, ep_addr);
 80257d0:	687b      	ldr	r3, [r7, #4]
 80257d2:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80257d6:	78fa      	ldrb	r2, [r7, #3]
 80257d8:	4611      	mov	r1, r2
 80257da:	4618      	mov	r0, r3
 80257dc:	f7f4 ffd9 	bl	801a792 <HAL_PCD_EP_Flush>
 80257e0:	4603      	mov	r3, r0
 80257e2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80257e4:	7bfb      	ldrb	r3, [r7, #15]
 80257e6:	4618      	mov	r0, r3
 80257e8:	f000 f94c 	bl	8025a84 <USBD_Get_USB_Status>
 80257ec:	4603      	mov	r3, r0
 80257ee:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80257f0:	7bbb      	ldrb	r3, [r7, #14]
}
 80257f2:	4618      	mov	r0, r3
 80257f4:	3710      	adds	r7, #16
 80257f6:	46bd      	mov	sp, r7
 80257f8:	bd80      	pop	{r7, pc}

080257fa <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80257fa:	b580      	push	{r7, lr}
 80257fc:	b084      	sub	sp, #16
 80257fe:	af00      	add	r7, sp, #0
 8025800:	6078      	str	r0, [r7, #4]
 8025802:	460b      	mov	r3, r1
 8025804:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8025806:	2300      	movs	r3, #0
 8025808:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 802580a:	2300      	movs	r3, #0
 802580c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 802580e:	687b      	ldr	r3, [r7, #4]
 8025810:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8025814:	78fa      	ldrb	r2, [r7, #3]
 8025816:	4611      	mov	r1, r2
 8025818:	4618      	mov	r0, r3
 802581a:	f7f4 ff00 	bl	801a61e <HAL_PCD_EP_SetStall>
 802581e:	4603      	mov	r3, r0
 8025820:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8025822:	7bfb      	ldrb	r3, [r7, #15]
 8025824:	4618      	mov	r0, r3
 8025826:	f000 f92d 	bl	8025a84 <USBD_Get_USB_Status>
 802582a:	4603      	mov	r3, r0
 802582c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 802582e:	7bbb      	ldrb	r3, [r7, #14]
}
 8025830:	4618      	mov	r0, r3
 8025832:	3710      	adds	r7, #16
 8025834:	46bd      	mov	sp, r7
 8025836:	bd80      	pop	{r7, pc}

08025838 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8025838:	b580      	push	{r7, lr}
 802583a:	b084      	sub	sp, #16
 802583c:	af00      	add	r7, sp, #0
 802583e:	6078      	str	r0, [r7, #4]
 8025840:	460b      	mov	r3, r1
 8025842:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8025844:	2300      	movs	r3, #0
 8025846:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8025848:	2300      	movs	r3, #0
 802584a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 802584c:	687b      	ldr	r3, [r7, #4]
 802584e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8025852:	78fa      	ldrb	r2, [r7, #3]
 8025854:	4611      	mov	r1, r2
 8025856:	4618      	mov	r0, r3
 8025858:	f7f4 ff45 	bl	801a6e6 <HAL_PCD_EP_ClrStall>
 802585c:	4603      	mov	r3, r0
 802585e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8025860:	7bfb      	ldrb	r3, [r7, #15]
 8025862:	4618      	mov	r0, r3
 8025864:	f000 f90e 	bl	8025a84 <USBD_Get_USB_Status>
 8025868:	4603      	mov	r3, r0
 802586a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 802586c:	7bbb      	ldrb	r3, [r7, #14]
}
 802586e:	4618      	mov	r0, r3
 8025870:	3710      	adds	r7, #16
 8025872:	46bd      	mov	sp, r7
 8025874:	bd80      	pop	{r7, pc}

08025876 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8025876:	b480      	push	{r7}
 8025878:	b085      	sub	sp, #20
 802587a:	af00      	add	r7, sp, #0
 802587c:	6078      	str	r0, [r7, #4]
 802587e:	460b      	mov	r3, r1
 8025880:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8025882:	687b      	ldr	r3, [r7, #4]
 8025884:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8025888:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 802588a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 802588e:	2b00      	cmp	r3, #0
 8025890:	da0b      	bge.n	80258aa <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8025892:	78fb      	ldrb	r3, [r7, #3]
 8025894:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8025898:	68f9      	ldr	r1, [r7, #12]
 802589a:	4613      	mov	r3, r2
 802589c:	00db      	lsls	r3, r3, #3
 802589e:	1a9b      	subs	r3, r3, r2
 80258a0:	009b      	lsls	r3, r3, #2
 80258a2:	440b      	add	r3, r1
 80258a4:	333e      	adds	r3, #62	; 0x3e
 80258a6:	781b      	ldrb	r3, [r3, #0]
 80258a8:	e00b      	b.n	80258c2 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 80258aa:	78fb      	ldrb	r3, [r7, #3]
 80258ac:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80258b0:	68f9      	ldr	r1, [r7, #12]
 80258b2:	4613      	mov	r3, r2
 80258b4:	00db      	lsls	r3, r3, #3
 80258b6:	1a9b      	subs	r3, r3, r2
 80258b8:	009b      	lsls	r3, r3, #2
 80258ba:	440b      	add	r3, r1
 80258bc:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80258c0:	781b      	ldrb	r3, [r3, #0]
  }
}
 80258c2:	4618      	mov	r0, r3
 80258c4:	3714      	adds	r7, #20
 80258c6:	46bd      	mov	sp, r7
 80258c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80258cc:	4770      	bx	lr

080258ce <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 80258ce:	b580      	push	{r7, lr}
 80258d0:	b084      	sub	sp, #16
 80258d2:	af00      	add	r7, sp, #0
 80258d4:	6078      	str	r0, [r7, #4]
 80258d6:	460b      	mov	r3, r1
 80258d8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80258da:	2300      	movs	r3, #0
 80258dc:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80258de:	2300      	movs	r3, #0
 80258e0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80258e2:	687b      	ldr	r3, [r7, #4]
 80258e4:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80258e8:	78fa      	ldrb	r2, [r7, #3]
 80258ea:	4611      	mov	r1, r2
 80258ec:	4618      	mov	r0, r3
 80258ee:	f7f4 fd12 	bl	801a316 <HAL_PCD_SetAddress>
 80258f2:	4603      	mov	r3, r0
 80258f4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80258f6:	7bfb      	ldrb	r3, [r7, #15]
 80258f8:	4618      	mov	r0, r3
 80258fa:	f000 f8c3 	bl	8025a84 <USBD_Get_USB_Status>
 80258fe:	4603      	mov	r3, r0
 8025900:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8025902:	7bbb      	ldrb	r3, [r7, #14]
}
 8025904:	4618      	mov	r0, r3
 8025906:	3710      	adds	r7, #16
 8025908:	46bd      	mov	sp, r7
 802590a:	bd80      	pop	{r7, pc}

0802590c <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 802590c:	b580      	push	{r7, lr}
 802590e:	b086      	sub	sp, #24
 8025910:	af00      	add	r7, sp, #0
 8025912:	60f8      	str	r0, [r7, #12]
 8025914:	607a      	str	r2, [r7, #4]
 8025916:	603b      	str	r3, [r7, #0]
 8025918:	460b      	mov	r3, r1
 802591a:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 802591c:	2300      	movs	r3, #0
 802591e:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8025920:	2300      	movs	r3, #0
 8025922:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8025924:	68fb      	ldr	r3, [r7, #12]
 8025926:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 802592a:	7af9      	ldrb	r1, [r7, #11]
 802592c:	683b      	ldr	r3, [r7, #0]
 802592e:	687a      	ldr	r2, [r7, #4]
 8025930:	f7f4 fe2b 	bl	801a58a <HAL_PCD_EP_Transmit>
 8025934:	4603      	mov	r3, r0
 8025936:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8025938:	7dfb      	ldrb	r3, [r7, #23]
 802593a:	4618      	mov	r0, r3
 802593c:	f000 f8a2 	bl	8025a84 <USBD_Get_USB_Status>
 8025940:	4603      	mov	r3, r0
 8025942:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8025944:	7dbb      	ldrb	r3, [r7, #22]
}
 8025946:	4618      	mov	r0, r3
 8025948:	3718      	adds	r7, #24
 802594a:	46bd      	mov	sp, r7
 802594c:	bd80      	pop	{r7, pc}

0802594e <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 802594e:	b580      	push	{r7, lr}
 8025950:	b086      	sub	sp, #24
 8025952:	af00      	add	r7, sp, #0
 8025954:	60f8      	str	r0, [r7, #12]
 8025956:	607a      	str	r2, [r7, #4]
 8025958:	603b      	str	r3, [r7, #0]
 802595a:	460b      	mov	r3, r1
 802595c:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 802595e:	2300      	movs	r3, #0
 8025960:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8025962:	2300      	movs	r3, #0
 8025964:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8025966:	68fb      	ldr	r3, [r7, #12]
 8025968:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 802596c:	7af9      	ldrb	r1, [r7, #11]
 802596e:	683b      	ldr	r3, [r7, #0]
 8025970:	687a      	ldr	r2, [r7, #4]
 8025972:	f7f4 fda7 	bl	801a4c4 <HAL_PCD_EP_Receive>
 8025976:	4603      	mov	r3, r0
 8025978:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 802597a:	7dfb      	ldrb	r3, [r7, #23]
 802597c:	4618      	mov	r0, r3
 802597e:	f000 f881 	bl	8025a84 <USBD_Get_USB_Status>
 8025982:	4603      	mov	r3, r0
 8025984:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8025986:	7dbb      	ldrb	r3, [r7, #22]
}
 8025988:	4618      	mov	r0, r3
 802598a:	3718      	adds	r7, #24
 802598c:	46bd      	mov	sp, r7
 802598e:	bd80      	pop	{r7, pc}

08025990 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8025990:	b580      	push	{r7, lr}
 8025992:	b082      	sub	sp, #8
 8025994:	af00      	add	r7, sp, #0
 8025996:	6078      	str	r0, [r7, #4]
 8025998:	460b      	mov	r3, r1
 802599a:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 802599c:	687b      	ldr	r3, [r7, #4]
 802599e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80259a2:	78fa      	ldrb	r2, [r7, #3]
 80259a4:	4611      	mov	r1, r2
 80259a6:	4618      	mov	r0, r3
 80259a8:	f7f4 fdd7 	bl	801a55a <HAL_PCD_EP_GetRxCount>
 80259ac:	4603      	mov	r3, r0
}
 80259ae:	4618      	mov	r0, r3
 80259b0:	3708      	adds	r7, #8
 80259b2:	46bd      	mov	sp, r7
 80259b4:	bd80      	pop	{r7, pc}
	...

080259b8 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 80259b8:	b580      	push	{r7, lr}
 80259ba:	b082      	sub	sp, #8
 80259bc:	af00      	add	r7, sp, #0
 80259be:	6078      	str	r0, [r7, #4]
 80259c0:	460b      	mov	r3, r1
 80259c2:	70fb      	strb	r3, [r7, #3]
  switch (msg)
 80259c4:	78fb      	ldrb	r3, [r7, #3]
 80259c6:	2b00      	cmp	r3, #0
 80259c8:	d002      	beq.n	80259d0 <HAL_PCDEx_LPM_Callback+0x18>
 80259ca:	2b01      	cmp	r3, #1
 80259cc:	d01f      	beq.n	8025a0e <HAL_PCDEx_LPM_Callback+0x56>
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
}
 80259ce:	e03b      	b.n	8025a48 <HAL_PCDEx_LPM_Callback+0x90>
    if (hpcd->Init.low_power_enable)
 80259d0:	687b      	ldr	r3, [r7, #4]
 80259d2:	6a1b      	ldr	r3, [r3, #32]
 80259d4:	2b00      	cmp	r3, #0
 80259d6:	d007      	beq.n	80259e8 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClock_Config();
 80259d8:	f7f1 f91a 	bl	8016c10 <SystemClock_Config>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80259dc:	4b1c      	ldr	r3, [pc, #112]	; (8025a50 <HAL_PCDEx_LPM_Callback+0x98>)
 80259de:	691b      	ldr	r3, [r3, #16]
 80259e0:	4a1b      	ldr	r2, [pc, #108]	; (8025a50 <HAL_PCDEx_LPM_Callback+0x98>)
 80259e2:	f023 0306 	bic.w	r3, r3, #6
 80259e6:	6113      	str	r3, [r2, #16]
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 80259e8:	687b      	ldr	r3, [r7, #4]
 80259ea:	681b      	ldr	r3, [r3, #0]
 80259ec:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80259f0:	681b      	ldr	r3, [r3, #0]
 80259f2:	687a      	ldr	r2, [r7, #4]
 80259f4:	6812      	ldr	r2, [r2, #0]
 80259f6:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80259fa:	f023 0301 	bic.w	r3, r3, #1
 80259fe:	6013      	str	r3, [r2, #0]
    USBD_LL_Resume(hpcd->pData);
 8025a00:	687b      	ldr	r3, [r7, #4]
 8025a02:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8025a06:	4618      	mov	r0, r3
 8025a08:	f7fb fd08 	bl	802141c <USBD_LL_Resume>
    break;
 8025a0c:	e01c      	b.n	8025a48 <HAL_PCDEx_LPM_Callback+0x90>
    __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8025a0e:	687b      	ldr	r3, [r7, #4]
 8025a10:	681b      	ldr	r3, [r3, #0]
 8025a12:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8025a16:	681b      	ldr	r3, [r3, #0]
 8025a18:	687a      	ldr	r2, [r7, #4]
 8025a1a:	6812      	ldr	r2, [r2, #0]
 8025a1c:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8025a20:	f043 0301 	orr.w	r3, r3, #1
 8025a24:	6013      	str	r3, [r2, #0]
    USBD_LL_Suspend(hpcd->pData);
 8025a26:	687b      	ldr	r3, [r7, #4]
 8025a28:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8025a2c:	4618      	mov	r0, r3
 8025a2e:	f7fb fcdf 	bl	80213f0 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 8025a32:	687b      	ldr	r3, [r7, #4]
 8025a34:	6a1b      	ldr	r3, [r3, #32]
 8025a36:	2b00      	cmp	r3, #0
 8025a38:	d005      	beq.n	8025a46 <HAL_PCDEx_LPM_Callback+0x8e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8025a3a:	4b05      	ldr	r3, [pc, #20]	; (8025a50 <HAL_PCDEx_LPM_Callback+0x98>)
 8025a3c:	691b      	ldr	r3, [r3, #16]
 8025a3e:	4a04      	ldr	r2, [pc, #16]	; (8025a50 <HAL_PCDEx_LPM_Callback+0x98>)
 8025a40:	f043 0306 	orr.w	r3, r3, #6
 8025a44:	6113      	str	r3, [r2, #16]
    break;
 8025a46:	bf00      	nop
}
 8025a48:	bf00      	nop
 8025a4a:	3708      	adds	r7, #8
 8025a4c:	46bd      	mov	sp, r7
 8025a4e:	bd80      	pop	{r7, pc}
 8025a50:	e000ed00 	.word	0xe000ed00

08025a54 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8025a54:	b480      	push	{r7}
 8025a56:	b083      	sub	sp, #12
 8025a58:	af00      	add	r7, sp, #0
 8025a5a:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_MSC_BOT_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8025a5c:	4b03      	ldr	r3, [pc, #12]	; (8025a6c <USBD_static_malloc+0x18>)
}
 8025a5e:	4618      	mov	r0, r3
 8025a60:	370c      	adds	r7, #12
 8025a62:	46bd      	mov	sp, r7
 8025a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8025a68:	4770      	bx	lr
 8025a6a:	bf00      	nop
 8025a6c:	200007e0 	.word	0x200007e0

08025a70 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8025a70:	b480      	push	{r7}
 8025a72:	b083      	sub	sp, #12
 8025a74:	af00      	add	r7, sp, #0
 8025a76:	6078      	str	r0, [r7, #4]

}
 8025a78:	bf00      	nop
 8025a7a:	370c      	adds	r7, #12
 8025a7c:	46bd      	mov	sp, r7
 8025a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8025a82:	4770      	bx	lr

08025a84 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8025a84:	b480      	push	{r7}
 8025a86:	b085      	sub	sp, #20
 8025a88:	af00      	add	r7, sp, #0
 8025a8a:	4603      	mov	r3, r0
 8025a8c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8025a8e:	2300      	movs	r3, #0
 8025a90:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8025a92:	79fb      	ldrb	r3, [r7, #7]
 8025a94:	2b03      	cmp	r3, #3
 8025a96:	d817      	bhi.n	8025ac8 <USBD_Get_USB_Status+0x44>
 8025a98:	a201      	add	r2, pc, #4	; (adr r2, 8025aa0 <USBD_Get_USB_Status+0x1c>)
 8025a9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8025a9e:	bf00      	nop
 8025aa0:	08025ab1 	.word	0x08025ab1
 8025aa4:	08025ab7 	.word	0x08025ab7
 8025aa8:	08025abd 	.word	0x08025abd
 8025aac:	08025ac3 	.word	0x08025ac3
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8025ab0:	2300      	movs	r3, #0
 8025ab2:	73fb      	strb	r3, [r7, #15]
    break;
 8025ab4:	e00b      	b.n	8025ace <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8025ab6:	2303      	movs	r3, #3
 8025ab8:	73fb      	strb	r3, [r7, #15]
    break;
 8025aba:	e008      	b.n	8025ace <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8025abc:	2301      	movs	r3, #1
 8025abe:	73fb      	strb	r3, [r7, #15]
    break;
 8025ac0:	e005      	b.n	8025ace <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8025ac2:	2303      	movs	r3, #3
 8025ac4:	73fb      	strb	r3, [r7, #15]
    break;
 8025ac6:	e002      	b.n	8025ace <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8025ac8:	2303      	movs	r3, #3
 8025aca:	73fb      	strb	r3, [r7, #15]
    break;
 8025acc:	bf00      	nop
  }
  return usb_status;
 8025ace:	7bfb      	ldrb	r3, [r7, #15]
}
 8025ad0:	4618      	mov	r0, r3
 8025ad2:	3714      	adds	r7, #20
 8025ad4:	46bd      	mov	sp, r7
 8025ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8025ada:	4770      	bx	lr

08025adc <__errno>:
 8025adc:	4b01      	ldr	r3, [pc, #4]	; (8025ae4 <__errno+0x8>)
 8025ade:	6818      	ldr	r0, [r3, #0]
 8025ae0:	4770      	bx	lr
 8025ae2:	bf00      	nop
 8025ae4:	200006ec 	.word	0x200006ec

08025ae8 <__libc_init_array>:
 8025ae8:	b570      	push	{r4, r5, r6, lr}
 8025aea:	4d0d      	ldr	r5, [pc, #52]	; (8025b20 <__libc_init_array+0x38>)
 8025aec:	4c0d      	ldr	r4, [pc, #52]	; (8025b24 <__libc_init_array+0x3c>)
 8025aee:	1b64      	subs	r4, r4, r5
 8025af0:	10a4      	asrs	r4, r4, #2
 8025af2:	2600      	movs	r6, #0
 8025af4:	42a6      	cmp	r6, r4
 8025af6:	d109      	bne.n	8025b0c <__libc_init_array+0x24>
 8025af8:	4d0b      	ldr	r5, [pc, #44]	; (8025b28 <__libc_init_array+0x40>)
 8025afa:	4c0c      	ldr	r4, [pc, #48]	; (8025b2c <__libc_init_array+0x44>)
 8025afc:	f000 fd4a 	bl	8026594 <_init>
 8025b00:	1b64      	subs	r4, r4, r5
 8025b02:	10a4      	asrs	r4, r4, #2
 8025b04:	2600      	movs	r6, #0
 8025b06:	42a6      	cmp	r6, r4
 8025b08:	d105      	bne.n	8025b16 <__libc_init_array+0x2e>
 8025b0a:	bd70      	pop	{r4, r5, r6, pc}
 8025b0c:	f855 3b04 	ldr.w	r3, [r5], #4
 8025b10:	4798      	blx	r3
 8025b12:	3601      	adds	r6, #1
 8025b14:	e7ee      	b.n	8025af4 <__libc_init_array+0xc>
 8025b16:	f855 3b04 	ldr.w	r3, [r5], #4
 8025b1a:	4798      	blx	r3
 8025b1c:	3601      	adds	r6, #1
 8025b1e:	e7f2      	b.n	8025b06 <__libc_init_array+0x1e>
 8025b20:	080265b4 	.word	0x080265b4
 8025b24:	080265b4 	.word	0x080265b4
 8025b28:	080265b4 	.word	0x080265b4
 8025b2c:	080265b8 	.word	0x080265b8

08025b30 <malloc>:
 8025b30:	4b02      	ldr	r3, [pc, #8]	; (8025b3c <malloc+0xc>)
 8025b32:	4601      	mov	r1, r0
 8025b34:	6818      	ldr	r0, [r3, #0]
 8025b36:	f000 b871 	b.w	8025c1c <_malloc_r>
 8025b3a:	bf00      	nop
 8025b3c:	200006ec 	.word	0x200006ec

08025b40 <free>:
 8025b40:	4b02      	ldr	r3, [pc, #8]	; (8025b4c <free+0xc>)
 8025b42:	4601      	mov	r1, r0
 8025b44:	6818      	ldr	r0, [r3, #0]
 8025b46:	f000 b819 	b.w	8025b7c <_free_r>
 8025b4a:	bf00      	nop
 8025b4c:	200006ec 	.word	0x200006ec

08025b50 <memcpy>:
 8025b50:	440a      	add	r2, r1
 8025b52:	4291      	cmp	r1, r2
 8025b54:	f100 33ff 	add.w	r3, r0, #4294967295
 8025b58:	d100      	bne.n	8025b5c <memcpy+0xc>
 8025b5a:	4770      	bx	lr
 8025b5c:	b510      	push	{r4, lr}
 8025b5e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8025b62:	f803 4f01 	strb.w	r4, [r3, #1]!
 8025b66:	4291      	cmp	r1, r2
 8025b68:	d1f9      	bne.n	8025b5e <memcpy+0xe>
 8025b6a:	bd10      	pop	{r4, pc}

08025b6c <memset>:
 8025b6c:	4402      	add	r2, r0
 8025b6e:	4603      	mov	r3, r0
 8025b70:	4293      	cmp	r3, r2
 8025b72:	d100      	bne.n	8025b76 <memset+0xa>
 8025b74:	4770      	bx	lr
 8025b76:	f803 1b01 	strb.w	r1, [r3], #1
 8025b7a:	e7f9      	b.n	8025b70 <memset+0x4>

08025b7c <_free_r>:
 8025b7c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8025b7e:	2900      	cmp	r1, #0
 8025b80:	d048      	beq.n	8025c14 <_free_r+0x98>
 8025b82:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8025b86:	9001      	str	r0, [sp, #4]
 8025b88:	2b00      	cmp	r3, #0
 8025b8a:	f1a1 0404 	sub.w	r4, r1, #4
 8025b8e:	bfb8      	it	lt
 8025b90:	18e4      	addlt	r4, r4, r3
 8025b92:	f000 f8ad 	bl	8025cf0 <__malloc_lock>
 8025b96:	4a20      	ldr	r2, [pc, #128]	; (8025c18 <_free_r+0x9c>)
 8025b98:	9801      	ldr	r0, [sp, #4]
 8025b9a:	6813      	ldr	r3, [r2, #0]
 8025b9c:	4615      	mov	r5, r2
 8025b9e:	b933      	cbnz	r3, 8025bae <_free_r+0x32>
 8025ba0:	6063      	str	r3, [r4, #4]
 8025ba2:	6014      	str	r4, [r2, #0]
 8025ba4:	b003      	add	sp, #12
 8025ba6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8025baa:	f000 b8a7 	b.w	8025cfc <__malloc_unlock>
 8025bae:	42a3      	cmp	r3, r4
 8025bb0:	d90b      	bls.n	8025bca <_free_r+0x4e>
 8025bb2:	6821      	ldr	r1, [r4, #0]
 8025bb4:	1862      	adds	r2, r4, r1
 8025bb6:	4293      	cmp	r3, r2
 8025bb8:	bf04      	itt	eq
 8025bba:	681a      	ldreq	r2, [r3, #0]
 8025bbc:	685b      	ldreq	r3, [r3, #4]
 8025bbe:	6063      	str	r3, [r4, #4]
 8025bc0:	bf04      	itt	eq
 8025bc2:	1852      	addeq	r2, r2, r1
 8025bc4:	6022      	streq	r2, [r4, #0]
 8025bc6:	602c      	str	r4, [r5, #0]
 8025bc8:	e7ec      	b.n	8025ba4 <_free_r+0x28>
 8025bca:	461a      	mov	r2, r3
 8025bcc:	685b      	ldr	r3, [r3, #4]
 8025bce:	b10b      	cbz	r3, 8025bd4 <_free_r+0x58>
 8025bd0:	42a3      	cmp	r3, r4
 8025bd2:	d9fa      	bls.n	8025bca <_free_r+0x4e>
 8025bd4:	6811      	ldr	r1, [r2, #0]
 8025bd6:	1855      	adds	r5, r2, r1
 8025bd8:	42a5      	cmp	r5, r4
 8025bda:	d10b      	bne.n	8025bf4 <_free_r+0x78>
 8025bdc:	6824      	ldr	r4, [r4, #0]
 8025bde:	4421      	add	r1, r4
 8025be0:	1854      	adds	r4, r2, r1
 8025be2:	42a3      	cmp	r3, r4
 8025be4:	6011      	str	r1, [r2, #0]
 8025be6:	d1dd      	bne.n	8025ba4 <_free_r+0x28>
 8025be8:	681c      	ldr	r4, [r3, #0]
 8025bea:	685b      	ldr	r3, [r3, #4]
 8025bec:	6053      	str	r3, [r2, #4]
 8025bee:	4421      	add	r1, r4
 8025bf0:	6011      	str	r1, [r2, #0]
 8025bf2:	e7d7      	b.n	8025ba4 <_free_r+0x28>
 8025bf4:	d902      	bls.n	8025bfc <_free_r+0x80>
 8025bf6:	230c      	movs	r3, #12
 8025bf8:	6003      	str	r3, [r0, #0]
 8025bfa:	e7d3      	b.n	8025ba4 <_free_r+0x28>
 8025bfc:	6825      	ldr	r5, [r4, #0]
 8025bfe:	1961      	adds	r1, r4, r5
 8025c00:	428b      	cmp	r3, r1
 8025c02:	bf04      	itt	eq
 8025c04:	6819      	ldreq	r1, [r3, #0]
 8025c06:	685b      	ldreq	r3, [r3, #4]
 8025c08:	6063      	str	r3, [r4, #4]
 8025c0a:	bf04      	itt	eq
 8025c0c:	1949      	addeq	r1, r1, r5
 8025c0e:	6021      	streq	r1, [r4, #0]
 8025c10:	6054      	str	r4, [r2, #4]
 8025c12:	e7c7      	b.n	8025ba4 <_free_r+0x28>
 8025c14:	b003      	add	sp, #12
 8025c16:	bd30      	pop	{r4, r5, pc}
 8025c18:	20001858 	.word	0x20001858

08025c1c <_malloc_r>:
 8025c1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8025c1e:	1ccd      	adds	r5, r1, #3
 8025c20:	f025 0503 	bic.w	r5, r5, #3
 8025c24:	3508      	adds	r5, #8
 8025c26:	2d0c      	cmp	r5, #12
 8025c28:	bf38      	it	cc
 8025c2a:	250c      	movcc	r5, #12
 8025c2c:	2d00      	cmp	r5, #0
 8025c2e:	4606      	mov	r6, r0
 8025c30:	db01      	blt.n	8025c36 <_malloc_r+0x1a>
 8025c32:	42a9      	cmp	r1, r5
 8025c34:	d903      	bls.n	8025c3e <_malloc_r+0x22>
 8025c36:	230c      	movs	r3, #12
 8025c38:	6033      	str	r3, [r6, #0]
 8025c3a:	2000      	movs	r0, #0
 8025c3c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8025c3e:	f000 f857 	bl	8025cf0 <__malloc_lock>
 8025c42:	4921      	ldr	r1, [pc, #132]	; (8025cc8 <_malloc_r+0xac>)
 8025c44:	680a      	ldr	r2, [r1, #0]
 8025c46:	4614      	mov	r4, r2
 8025c48:	b99c      	cbnz	r4, 8025c72 <_malloc_r+0x56>
 8025c4a:	4f20      	ldr	r7, [pc, #128]	; (8025ccc <_malloc_r+0xb0>)
 8025c4c:	683b      	ldr	r3, [r7, #0]
 8025c4e:	b923      	cbnz	r3, 8025c5a <_malloc_r+0x3e>
 8025c50:	4621      	mov	r1, r4
 8025c52:	4630      	mov	r0, r6
 8025c54:	f000 f83c 	bl	8025cd0 <_sbrk_r>
 8025c58:	6038      	str	r0, [r7, #0]
 8025c5a:	4629      	mov	r1, r5
 8025c5c:	4630      	mov	r0, r6
 8025c5e:	f000 f837 	bl	8025cd0 <_sbrk_r>
 8025c62:	1c43      	adds	r3, r0, #1
 8025c64:	d123      	bne.n	8025cae <_malloc_r+0x92>
 8025c66:	230c      	movs	r3, #12
 8025c68:	6033      	str	r3, [r6, #0]
 8025c6a:	4630      	mov	r0, r6
 8025c6c:	f000 f846 	bl	8025cfc <__malloc_unlock>
 8025c70:	e7e3      	b.n	8025c3a <_malloc_r+0x1e>
 8025c72:	6823      	ldr	r3, [r4, #0]
 8025c74:	1b5b      	subs	r3, r3, r5
 8025c76:	d417      	bmi.n	8025ca8 <_malloc_r+0x8c>
 8025c78:	2b0b      	cmp	r3, #11
 8025c7a:	d903      	bls.n	8025c84 <_malloc_r+0x68>
 8025c7c:	6023      	str	r3, [r4, #0]
 8025c7e:	441c      	add	r4, r3
 8025c80:	6025      	str	r5, [r4, #0]
 8025c82:	e004      	b.n	8025c8e <_malloc_r+0x72>
 8025c84:	6863      	ldr	r3, [r4, #4]
 8025c86:	42a2      	cmp	r2, r4
 8025c88:	bf0c      	ite	eq
 8025c8a:	600b      	streq	r3, [r1, #0]
 8025c8c:	6053      	strne	r3, [r2, #4]
 8025c8e:	4630      	mov	r0, r6
 8025c90:	f000 f834 	bl	8025cfc <__malloc_unlock>
 8025c94:	f104 000b 	add.w	r0, r4, #11
 8025c98:	1d23      	adds	r3, r4, #4
 8025c9a:	f020 0007 	bic.w	r0, r0, #7
 8025c9e:	1ac2      	subs	r2, r0, r3
 8025ca0:	d0cc      	beq.n	8025c3c <_malloc_r+0x20>
 8025ca2:	1a1b      	subs	r3, r3, r0
 8025ca4:	50a3      	str	r3, [r4, r2]
 8025ca6:	e7c9      	b.n	8025c3c <_malloc_r+0x20>
 8025ca8:	4622      	mov	r2, r4
 8025caa:	6864      	ldr	r4, [r4, #4]
 8025cac:	e7cc      	b.n	8025c48 <_malloc_r+0x2c>
 8025cae:	1cc4      	adds	r4, r0, #3
 8025cb0:	f024 0403 	bic.w	r4, r4, #3
 8025cb4:	42a0      	cmp	r0, r4
 8025cb6:	d0e3      	beq.n	8025c80 <_malloc_r+0x64>
 8025cb8:	1a21      	subs	r1, r4, r0
 8025cba:	4630      	mov	r0, r6
 8025cbc:	f000 f808 	bl	8025cd0 <_sbrk_r>
 8025cc0:	3001      	adds	r0, #1
 8025cc2:	d1dd      	bne.n	8025c80 <_malloc_r+0x64>
 8025cc4:	e7cf      	b.n	8025c66 <_malloc_r+0x4a>
 8025cc6:	bf00      	nop
 8025cc8:	20001858 	.word	0x20001858
 8025ccc:	2000185c 	.word	0x2000185c

08025cd0 <_sbrk_r>:
 8025cd0:	b538      	push	{r3, r4, r5, lr}
 8025cd2:	4d06      	ldr	r5, [pc, #24]	; (8025cec <_sbrk_r+0x1c>)
 8025cd4:	2300      	movs	r3, #0
 8025cd6:	4604      	mov	r4, r0
 8025cd8:	4608      	mov	r0, r1
 8025cda:	602b      	str	r3, [r5, #0]
 8025cdc:	f7f1 feb2 	bl	8017a44 <_sbrk>
 8025ce0:	1c43      	adds	r3, r0, #1
 8025ce2:	d102      	bne.n	8025cea <_sbrk_r+0x1a>
 8025ce4:	682b      	ldr	r3, [r5, #0]
 8025ce6:	b103      	cbz	r3, 8025cea <_sbrk_r+0x1a>
 8025ce8:	6023      	str	r3, [r4, #0]
 8025cea:	bd38      	pop	{r3, r4, r5, pc}
 8025cec:	2000b3bc 	.word	0x2000b3bc

08025cf0 <__malloc_lock>:
 8025cf0:	4801      	ldr	r0, [pc, #4]	; (8025cf8 <__malloc_lock+0x8>)
 8025cf2:	f000 b809 	b.w	8025d08 <__retarget_lock_acquire_recursive>
 8025cf6:	bf00      	nop
 8025cf8:	2000b3c4 	.word	0x2000b3c4

08025cfc <__malloc_unlock>:
 8025cfc:	4801      	ldr	r0, [pc, #4]	; (8025d04 <__malloc_unlock+0x8>)
 8025cfe:	f000 b804 	b.w	8025d0a <__retarget_lock_release_recursive>
 8025d02:	bf00      	nop
 8025d04:	2000b3c4 	.word	0x2000b3c4

08025d08 <__retarget_lock_acquire_recursive>:
 8025d08:	4770      	bx	lr

08025d0a <__retarget_lock_release_recursive>:
 8025d0a:	4770      	bx	lr

08025d0c <powf>:
 8025d0c:	b508      	push	{r3, lr}
 8025d0e:	ed2d 8b04 	vpush	{d8-d9}
 8025d12:	eeb0 9a40 	vmov.f32	s18, s0
 8025d16:	eef0 8a60 	vmov.f32	s17, s1
 8025d1a:	f000 f88f 	bl	8025e3c <__ieee754_powf>
 8025d1e:	4b43      	ldr	r3, [pc, #268]	; (8025e2c <powf+0x120>)
 8025d20:	f993 3000 	ldrsb.w	r3, [r3]
 8025d24:	3301      	adds	r3, #1
 8025d26:	eeb0 8a40 	vmov.f32	s16, s0
 8025d2a:	d012      	beq.n	8025d52 <powf+0x46>
 8025d2c:	eef4 8a68 	vcmp.f32	s17, s17
 8025d30:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8025d34:	d60d      	bvs.n	8025d52 <powf+0x46>
 8025d36:	eeb4 9a49 	vcmp.f32	s18, s18
 8025d3a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8025d3e:	d70d      	bvc.n	8025d5c <powf+0x50>
 8025d40:	eef5 8a40 	vcmp.f32	s17, #0.0
 8025d44:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8025d48:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8025d4c:	bf08      	it	eq
 8025d4e:	eeb0 8a67 	vmoveq.f32	s16, s15
 8025d52:	eeb0 0a48 	vmov.f32	s0, s16
 8025d56:	ecbd 8b04 	vpop	{d8-d9}
 8025d5a:	bd08      	pop	{r3, pc}
 8025d5c:	eddf 9a34 	vldr	s19, [pc, #208]	; 8025e30 <powf+0x124>
 8025d60:	eeb4 9a69 	vcmp.f32	s18, s19
 8025d64:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8025d68:	d116      	bne.n	8025d98 <powf+0x8c>
 8025d6a:	eef4 8a69 	vcmp.f32	s17, s19
 8025d6e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8025d72:	d057      	beq.n	8025e24 <powf+0x118>
 8025d74:	eeb0 0a68 	vmov.f32	s0, s17
 8025d78:	f000 fb2a 	bl	80263d0 <finitef>
 8025d7c:	2800      	cmp	r0, #0
 8025d7e:	d0e8      	beq.n	8025d52 <powf+0x46>
 8025d80:	eef4 8ae9 	vcmpe.f32	s17, s19
 8025d84:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8025d88:	d5e3      	bpl.n	8025d52 <powf+0x46>
 8025d8a:	f7ff fea7 	bl	8025adc <__errno>
 8025d8e:	2321      	movs	r3, #33	; 0x21
 8025d90:	6003      	str	r3, [r0, #0]
 8025d92:	ed9f 8a28 	vldr	s16, [pc, #160]	; 8025e34 <powf+0x128>
 8025d96:	e7dc      	b.n	8025d52 <powf+0x46>
 8025d98:	f000 fb1a 	bl	80263d0 <finitef>
 8025d9c:	bb50      	cbnz	r0, 8025df4 <powf+0xe8>
 8025d9e:	eeb0 0a49 	vmov.f32	s0, s18
 8025da2:	f000 fb15 	bl	80263d0 <finitef>
 8025da6:	b328      	cbz	r0, 8025df4 <powf+0xe8>
 8025da8:	eeb0 0a68 	vmov.f32	s0, s17
 8025dac:	f000 fb10 	bl	80263d0 <finitef>
 8025db0:	b300      	cbz	r0, 8025df4 <powf+0xe8>
 8025db2:	eeb4 8a48 	vcmp.f32	s16, s16
 8025db6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8025dba:	d706      	bvc.n	8025dca <powf+0xbe>
 8025dbc:	f7ff fe8e 	bl	8025adc <__errno>
 8025dc0:	2321      	movs	r3, #33	; 0x21
 8025dc2:	ee89 8aa9 	vdiv.f32	s16, s19, s19
 8025dc6:	6003      	str	r3, [r0, #0]
 8025dc8:	e7c3      	b.n	8025d52 <powf+0x46>
 8025dca:	f7ff fe87 	bl	8025adc <__errno>
 8025dce:	eeb5 9ac0 	vcmpe.f32	s18, #0.0
 8025dd2:	2322      	movs	r3, #34	; 0x22
 8025dd4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8025dd8:	6003      	str	r3, [r0, #0]
 8025dda:	d508      	bpl.n	8025dee <powf+0xe2>
 8025ddc:	eeb0 0a68 	vmov.f32	s0, s17
 8025de0:	f000 fb0a 	bl	80263f8 <rintf>
 8025de4:	eeb4 0a68 	vcmp.f32	s0, s17
 8025de8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8025dec:	d1d1      	bne.n	8025d92 <powf+0x86>
 8025dee:	ed9f 8a12 	vldr	s16, [pc, #72]	; 8025e38 <powf+0x12c>
 8025df2:	e7ae      	b.n	8025d52 <powf+0x46>
 8025df4:	eeb5 8a40 	vcmp.f32	s16, #0.0
 8025df8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8025dfc:	d1a9      	bne.n	8025d52 <powf+0x46>
 8025dfe:	eeb0 0a49 	vmov.f32	s0, s18
 8025e02:	f000 fae5 	bl	80263d0 <finitef>
 8025e06:	2800      	cmp	r0, #0
 8025e08:	d0a3      	beq.n	8025d52 <powf+0x46>
 8025e0a:	eeb0 0a68 	vmov.f32	s0, s17
 8025e0e:	f000 fadf 	bl	80263d0 <finitef>
 8025e12:	2800      	cmp	r0, #0
 8025e14:	d09d      	beq.n	8025d52 <powf+0x46>
 8025e16:	f7ff fe61 	bl	8025adc <__errno>
 8025e1a:	2322      	movs	r3, #34	; 0x22
 8025e1c:	ed9f 8a04 	vldr	s16, [pc, #16]	; 8025e30 <powf+0x124>
 8025e20:	6003      	str	r3, [r0, #0]
 8025e22:	e796      	b.n	8025d52 <powf+0x46>
 8025e24:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
 8025e28:	e793      	b.n	8025d52 <powf+0x46>
 8025e2a:	bf00      	nop
 8025e2c:	20000750 	.word	0x20000750
 8025e30:	00000000 	.word	0x00000000
 8025e34:	ff800000 	.word	0xff800000
 8025e38:	7f800000 	.word	0x7f800000

08025e3c <__ieee754_powf>:
 8025e3c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8025e40:	ee10 5a90 	vmov	r5, s1
 8025e44:	f035 4700 	bics.w	r7, r5, #2147483648	; 0x80000000
 8025e48:	ed2d 8b02 	vpush	{d8}
 8025e4c:	eeb0 8a40 	vmov.f32	s16, s0
 8025e50:	eef0 8a60 	vmov.f32	s17, s1
 8025e54:	f000 8291 	beq.w	802637a <__ieee754_powf+0x53e>
 8025e58:	ee10 8a10 	vmov	r8, s0
 8025e5c:	f028 4400 	bic.w	r4, r8, #2147483648	; 0x80000000
 8025e60:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 8025e64:	dc06      	bgt.n	8025e74 <__ieee754_powf+0x38>
 8025e66:	f1b7 4fff 	cmp.w	r7, #2139095040	; 0x7f800000
 8025e6a:	dd0a      	ble.n	8025e82 <__ieee754_powf+0x46>
 8025e6c:	f1b4 5f7e 	cmp.w	r4, #1065353216	; 0x3f800000
 8025e70:	f000 8283 	beq.w	802637a <__ieee754_powf+0x53e>
 8025e74:	ecbd 8b02 	vpop	{d8}
 8025e78:	48d8      	ldr	r0, [pc, #864]	; (80261dc <__ieee754_powf+0x3a0>)
 8025e7a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8025e7e:	f000 bab5 	b.w	80263ec <nanf>
 8025e82:	f1b8 0f00 	cmp.w	r8, #0
 8025e86:	da1f      	bge.n	8025ec8 <__ieee754_powf+0x8c>
 8025e88:	f1b7 4f97 	cmp.w	r7, #1266679808	; 0x4b800000
 8025e8c:	da2e      	bge.n	8025eec <__ieee754_powf+0xb0>
 8025e8e:	f1b7 5f7e 	cmp.w	r7, #1065353216	; 0x3f800000
 8025e92:	f2c0 827b 	blt.w	802638c <__ieee754_powf+0x550>
 8025e96:	15fb      	asrs	r3, r7, #23
 8025e98:	f1c3 0396 	rsb	r3, r3, #150	; 0x96
 8025e9c:	fa47 f603 	asr.w	r6, r7, r3
 8025ea0:	fa06 f303 	lsl.w	r3, r6, r3
 8025ea4:	42bb      	cmp	r3, r7
 8025ea6:	f040 8271 	bne.w	802638c <__ieee754_powf+0x550>
 8025eaa:	f006 0601 	and.w	r6, r6, #1
 8025eae:	f1c6 0602 	rsb	r6, r6, #2
 8025eb2:	f1b7 5f7e 	cmp.w	r7, #1065353216	; 0x3f800000
 8025eb6:	d120      	bne.n	8025efa <__ieee754_powf+0xbe>
 8025eb8:	2d00      	cmp	r5, #0
 8025eba:	f280 8264 	bge.w	8026386 <__ieee754_powf+0x54a>
 8025ebe:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8025ec2:	ee87 0a88 	vdiv.f32	s0, s15, s16
 8025ec6:	e00d      	b.n	8025ee4 <__ieee754_powf+0xa8>
 8025ec8:	2600      	movs	r6, #0
 8025eca:	f1b7 4fff 	cmp.w	r7, #2139095040	; 0x7f800000
 8025ece:	d1f0      	bne.n	8025eb2 <__ieee754_powf+0x76>
 8025ed0:	f1b4 5f7e 	cmp.w	r4, #1065353216	; 0x3f800000
 8025ed4:	f000 8251 	beq.w	802637a <__ieee754_powf+0x53e>
 8025ed8:	dd0a      	ble.n	8025ef0 <__ieee754_powf+0xb4>
 8025eda:	2d00      	cmp	r5, #0
 8025edc:	f280 8250 	bge.w	8026380 <__ieee754_powf+0x544>
 8025ee0:	ed9f 0abf 	vldr	s0, [pc, #764]	; 80261e0 <__ieee754_powf+0x3a4>
 8025ee4:	ecbd 8b02 	vpop	{d8}
 8025ee8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8025eec:	2602      	movs	r6, #2
 8025eee:	e7ec      	b.n	8025eca <__ieee754_powf+0x8e>
 8025ef0:	2d00      	cmp	r5, #0
 8025ef2:	daf5      	bge.n	8025ee0 <__ieee754_powf+0xa4>
 8025ef4:	eeb1 0a68 	vneg.f32	s0, s17
 8025ef8:	e7f4      	b.n	8025ee4 <__ieee754_powf+0xa8>
 8025efa:	f1b5 4f80 	cmp.w	r5, #1073741824	; 0x40000000
 8025efe:	d102      	bne.n	8025f06 <__ieee754_powf+0xca>
 8025f00:	ee28 0a08 	vmul.f32	s0, s16, s16
 8025f04:	e7ee      	b.n	8025ee4 <__ieee754_powf+0xa8>
 8025f06:	f1b5 5f7c 	cmp.w	r5, #1056964608	; 0x3f000000
 8025f0a:	eeb0 0a48 	vmov.f32	s0, s16
 8025f0e:	d108      	bne.n	8025f22 <__ieee754_powf+0xe6>
 8025f10:	f1b8 0f00 	cmp.w	r8, #0
 8025f14:	db05      	blt.n	8025f22 <__ieee754_powf+0xe6>
 8025f16:	ecbd 8b02 	vpop	{d8}
 8025f1a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8025f1e:	f000 ba4d 	b.w	80263bc <__ieee754_sqrtf>
 8025f22:	f000 fa4e 	bl	80263c2 <fabsf>
 8025f26:	b124      	cbz	r4, 8025f32 <__ieee754_powf+0xf6>
 8025f28:	f028 4340 	bic.w	r3, r8, #3221225472	; 0xc0000000
 8025f2c:	f1b3 5f7e 	cmp.w	r3, #1065353216	; 0x3f800000
 8025f30:	d117      	bne.n	8025f62 <__ieee754_powf+0x126>
 8025f32:	2d00      	cmp	r5, #0
 8025f34:	bfbc      	itt	lt
 8025f36:	eef7 7a00 	vmovlt.f32	s15, #112	; 0x3f800000  1.0
 8025f3a:	ee87 0a80 	vdivlt.f32	s0, s15, s0
 8025f3e:	f1b8 0f00 	cmp.w	r8, #0
 8025f42:	dacf      	bge.n	8025ee4 <__ieee754_powf+0xa8>
 8025f44:	f1a4 547e 	sub.w	r4, r4, #1065353216	; 0x3f800000
 8025f48:	ea54 0306 	orrs.w	r3, r4, r6
 8025f4c:	d104      	bne.n	8025f58 <__ieee754_powf+0x11c>
 8025f4e:	ee70 7a40 	vsub.f32	s15, s0, s0
 8025f52:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 8025f56:	e7c5      	b.n	8025ee4 <__ieee754_powf+0xa8>
 8025f58:	2e01      	cmp	r6, #1
 8025f5a:	d1c3      	bne.n	8025ee4 <__ieee754_powf+0xa8>
 8025f5c:	eeb1 0a40 	vneg.f32	s0, s0
 8025f60:	e7c0      	b.n	8025ee4 <__ieee754_powf+0xa8>
 8025f62:	ea4f 70d8 	mov.w	r0, r8, lsr #31
 8025f66:	3801      	subs	r0, #1
 8025f68:	ea56 0300 	orrs.w	r3, r6, r0
 8025f6c:	d104      	bne.n	8025f78 <__ieee754_powf+0x13c>
 8025f6e:	ee38 8a48 	vsub.f32	s16, s16, s16
 8025f72:	ee88 0a08 	vdiv.f32	s0, s16, s16
 8025f76:	e7b5      	b.n	8025ee4 <__ieee754_powf+0xa8>
 8025f78:	f1b7 4f9a 	cmp.w	r7, #1291845632	; 0x4d000000
 8025f7c:	dd6b      	ble.n	8026056 <__ieee754_powf+0x21a>
 8025f7e:	4b99      	ldr	r3, [pc, #612]	; (80261e4 <__ieee754_powf+0x3a8>)
 8025f80:	429c      	cmp	r4, r3
 8025f82:	dc06      	bgt.n	8025f92 <__ieee754_powf+0x156>
 8025f84:	2d00      	cmp	r5, #0
 8025f86:	daab      	bge.n	8025ee0 <__ieee754_powf+0xa4>
 8025f88:	ed9f 0a97 	vldr	s0, [pc, #604]	; 80261e8 <__ieee754_powf+0x3ac>
 8025f8c:	ee20 0a00 	vmul.f32	s0, s0, s0
 8025f90:	e7a8      	b.n	8025ee4 <__ieee754_powf+0xa8>
 8025f92:	4b96      	ldr	r3, [pc, #600]	; (80261ec <__ieee754_powf+0x3b0>)
 8025f94:	429c      	cmp	r4, r3
 8025f96:	dd02      	ble.n	8025f9e <__ieee754_powf+0x162>
 8025f98:	2d00      	cmp	r5, #0
 8025f9a:	dcf5      	bgt.n	8025f88 <__ieee754_powf+0x14c>
 8025f9c:	e7a0      	b.n	8025ee0 <__ieee754_powf+0xa4>
 8025f9e:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8025fa2:	ee30 0a67 	vsub.f32	s0, s0, s15
 8025fa6:	eddf 6a92 	vldr	s13, [pc, #584]	; 80261f0 <__ieee754_powf+0x3b4>
 8025faa:	eef5 7a00 	vmov.f32	s15, #80	; 0x3e800000  0.250
 8025fae:	eee0 6a67 	vfms.f32	s13, s0, s15
 8025fb2:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8025fb6:	eee6 7ac0 	vfms.f32	s15, s13, s0
 8025fba:	ee20 7a00 	vmul.f32	s14, s0, s0
 8025fbe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8025fc2:	ed9f 7a8c 	vldr	s14, [pc, #560]	; 80261f4 <__ieee754_powf+0x3b8>
 8025fc6:	ee67 7a67 	vnmul.f32	s15, s14, s15
 8025fca:	ed9f 7a8b 	vldr	s14, [pc, #556]	; 80261f8 <__ieee754_powf+0x3bc>
 8025fce:	eee0 7a07 	vfma.f32	s15, s0, s14
 8025fd2:	ed9f 7a8a 	vldr	s14, [pc, #552]	; 80261fc <__ieee754_powf+0x3c0>
 8025fd6:	eef0 6a67 	vmov.f32	s13, s15
 8025fda:	eee0 6a07 	vfma.f32	s13, s0, s14
 8025fde:	ee16 3a90 	vmov	r3, s13
 8025fe2:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8025fe6:	f023 030f 	bic.w	r3, r3, #15
 8025fea:	ee00 3a90 	vmov	s1, r3
 8025fee:	eee0 0a47 	vfms.f32	s1, s0, s14
 8025ff2:	ee77 7ae0 	vsub.f32	s15, s15, s1
 8025ff6:	f425 657f 	bic.w	r5, r5, #4080	; 0xff0
 8025ffa:	f025 050f 	bic.w	r5, r5, #15
 8025ffe:	ee07 5a10 	vmov	s14, r5
 8026002:	ee67 0aa8 	vmul.f32	s1, s15, s17
 8026006:	ee38 7ac7 	vsub.f32	s14, s17, s14
 802600a:	ee07 3a90 	vmov	s15, r3
 802600e:	eee7 0a27 	vfma.f32	s1, s14, s15
 8026012:	3e01      	subs	r6, #1
 8026014:	ea56 0200 	orrs.w	r2, r6, r0
 8026018:	ee07 5a10 	vmov	s14, r5
 802601c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8026020:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
 8026024:	ee30 7aa7 	vadd.f32	s14, s1, s15
 8026028:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
 802602c:	ee17 4a10 	vmov	r4, s14
 8026030:	bf08      	it	eq
 8026032:	eeb0 8a40 	vmoveq.f32	s16, s0
 8026036:	2c00      	cmp	r4, #0
 8026038:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 802603c:	f340 8184 	ble.w	8026348 <__ieee754_powf+0x50c>
 8026040:	f1b3 4f86 	cmp.w	r3, #1124073472	; 0x43000000
 8026044:	f340 80fc 	ble.w	8026240 <__ieee754_powf+0x404>
 8026048:	eddf 7a67 	vldr	s15, [pc, #412]	; 80261e8 <__ieee754_powf+0x3ac>
 802604c:	ee28 0a27 	vmul.f32	s0, s16, s15
 8026050:	ee20 0a27 	vmul.f32	s0, s0, s15
 8026054:	e746      	b.n	8025ee4 <__ieee754_powf+0xa8>
 8026056:	f018 4fff 	tst.w	r8, #2139095040	; 0x7f800000
 802605a:	bf01      	itttt	eq
 802605c:	eddf 7a68 	vldreq	s15, [pc, #416]	; 8026200 <__ieee754_powf+0x3c4>
 8026060:	ee60 7a27 	vmuleq.f32	s15, s0, s15
 8026064:	f06f 0217 	mvneq.w	r2, #23
 8026068:	ee17 4a90 	vmoveq	r4, s15
 802606c:	ea4f 53e4 	mov.w	r3, r4, asr #23
 8026070:	bf18      	it	ne
 8026072:	2200      	movne	r2, #0
 8026074:	3b7f      	subs	r3, #127	; 0x7f
 8026076:	4413      	add	r3, r2
 8026078:	4a62      	ldr	r2, [pc, #392]	; (8026204 <__ieee754_powf+0x3c8>)
 802607a:	f3c4 0416 	ubfx	r4, r4, #0, #23
 802607e:	4294      	cmp	r4, r2
 8026080:	f044 517e 	orr.w	r1, r4, #1065353216	; 0x3f800000
 8026084:	dd06      	ble.n	8026094 <__ieee754_powf+0x258>
 8026086:	4a60      	ldr	r2, [pc, #384]	; (8026208 <__ieee754_powf+0x3cc>)
 8026088:	4294      	cmp	r4, r2
 802608a:	f340 80a4 	ble.w	80261d6 <__ieee754_powf+0x39a>
 802608e:	3301      	adds	r3, #1
 8026090:	f5a1 0100 	sub.w	r1, r1, #8388608	; 0x800000
 8026094:	2400      	movs	r4, #0
 8026096:	4a5d      	ldr	r2, [pc, #372]	; (802620c <__ieee754_powf+0x3d0>)
 8026098:	eb02 0284 	add.w	r2, r2, r4, lsl #2
 802609c:	ee07 1a90 	vmov	s15, r1
 80260a0:	ed92 7a00 	vldr	s14, [r2]
 80260a4:	4a5a      	ldr	r2, [pc, #360]	; (8026210 <__ieee754_powf+0x3d4>)
 80260a6:	ee37 6a27 	vadd.f32	s12, s14, s15
 80260aa:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 80260ae:	eec5 6a86 	vdiv.f32	s13, s11, s12
 80260b2:	1049      	asrs	r1, r1, #1
 80260b4:	f041 5100 	orr.w	r1, r1, #536870912	; 0x20000000
 80260b8:	f501 2180 	add.w	r1, r1, #262144	; 0x40000
 80260bc:	eb01 5144 	add.w	r1, r1, r4, lsl #21
 80260c0:	ee37 5ac7 	vsub.f32	s10, s15, s14
 80260c4:	ee06 1a10 	vmov	s12, r1
 80260c8:	ee65 4a26 	vmul.f32	s9, s10, s13
 80260cc:	ee36 7a47 	vsub.f32	s14, s12, s14
 80260d0:	ee14 7a90 	vmov	r7, s9
 80260d4:	4017      	ands	r7, r2
 80260d6:	ee05 7a90 	vmov	s11, r7
 80260da:	eea5 5ac6 	vfms.f32	s10, s11, s12
 80260de:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80260e2:	ed9f 7a4c 	vldr	s14, [pc, #304]	; 8026214 <__ieee754_powf+0x3d8>
 80260e6:	eea5 5ae7 	vfms.f32	s10, s11, s15
 80260ea:	ee64 7aa4 	vmul.f32	s15, s9, s9
 80260ee:	ee25 6a26 	vmul.f32	s12, s10, s13
 80260f2:	eddf 6a49 	vldr	s13, [pc, #292]	; 8026218 <__ieee754_powf+0x3dc>
 80260f6:	eea7 7aa6 	vfma.f32	s14, s15, s13
 80260fa:	eddf 6a48 	vldr	s13, [pc, #288]	; 802621c <__ieee754_powf+0x3e0>
 80260fe:	eee7 6a27 	vfma.f32	s13, s14, s15
 8026102:	ed9f 7a3b 	vldr	s14, [pc, #236]	; 80261f0 <__ieee754_powf+0x3b4>
 8026106:	eea6 7aa7 	vfma.f32	s14, s13, s15
 802610a:	eddf 6a45 	vldr	s13, [pc, #276]	; 8026220 <__ieee754_powf+0x3e4>
 802610e:	eee7 6a27 	vfma.f32	s13, s14, s15
 8026112:	ed9f 7a44 	vldr	s14, [pc, #272]	; 8026224 <__ieee754_powf+0x3e8>
 8026116:	eea6 7aa7 	vfma.f32	s14, s13, s15
 802611a:	ee74 6aa5 	vadd.f32	s13, s9, s11
 802611e:	ee27 5aa7 	vmul.f32	s10, s15, s15
 8026122:	ee66 6a86 	vmul.f32	s13, s13, s12
 8026126:	eee5 6a07 	vfma.f32	s13, s10, s14
 802612a:	eeb0 5a08 	vmov.f32	s10, #8	; 0x40400000  3.0
 802612e:	eef0 7a45 	vmov.f32	s15, s10
 8026132:	eee5 7aa5 	vfma.f32	s15, s11, s11
 8026136:	ee77 7aa6 	vadd.f32	s15, s15, s13
 802613a:	ee17 1a90 	vmov	r1, s15
 802613e:	4011      	ands	r1, r2
 8026140:	ee07 1a90 	vmov	s15, r1
 8026144:	ee37 7ac5 	vsub.f32	s14, s15, s10
 8026148:	eea5 7ae5 	vfms.f32	s14, s11, s11
 802614c:	ee36 7ac7 	vsub.f32	s14, s13, s14
 8026150:	ee27 7a24 	vmul.f32	s14, s14, s9
 8026154:	eea6 7a27 	vfma.f32	s14, s12, s15
 8026158:	eeb0 6a47 	vmov.f32	s12, s14
 802615c:	eea5 6aa7 	vfma.f32	s12, s11, s15
 8026160:	ee16 1a10 	vmov	r1, s12
 8026164:	4011      	ands	r1, r2
 8026166:	ee06 1a90 	vmov	s13, r1
 802616a:	eee5 6ae7 	vfms.f32	s13, s11, s15
 802616e:	eddf 7a2e 	vldr	s15, [pc, #184]	; 8026228 <__ieee754_powf+0x3ec>
 8026172:	eddf 5a2e 	vldr	s11, [pc, #184]	; 802622c <__ieee754_powf+0x3f0>
 8026176:	ee37 7a66 	vsub.f32	s14, s14, s13
 802617a:	ee06 1a10 	vmov	s12, r1
 802617e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8026182:	eddf 7a2b 	vldr	s15, [pc, #172]	; 8026230 <__ieee754_powf+0x3f4>
 8026186:	492b      	ldr	r1, [pc, #172]	; (8026234 <__ieee754_powf+0x3f8>)
 8026188:	eea6 7a27 	vfma.f32	s14, s12, s15
 802618c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8026190:	edd1 7a00 	vldr	s15, [r1]
 8026194:	ee37 7a27 	vadd.f32	s14, s14, s15
 8026198:	ee07 3a90 	vmov	s15, r3
 802619c:	4b26      	ldr	r3, [pc, #152]	; (8026238 <__ieee754_powf+0x3fc>)
 802619e:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80261a2:	eef0 7a47 	vmov.f32	s15, s14
 80261a6:	eee6 7a25 	vfma.f32	s15, s12, s11
 80261aa:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 80261ae:	edd4 0a00 	vldr	s1, [r4]
 80261b2:	ee77 7aa0 	vadd.f32	s15, s15, s1
 80261b6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80261ba:	ee17 3a90 	vmov	r3, s15
 80261be:	4013      	ands	r3, r2
 80261c0:	ee07 3a90 	vmov	s15, r3
 80261c4:	ee77 6ae6 	vsub.f32	s13, s15, s13
 80261c8:	ee76 6ae0 	vsub.f32	s13, s13, s1
 80261cc:	eee6 6a65 	vfms.f32	s13, s12, s11
 80261d0:	ee77 7a66 	vsub.f32	s15, s14, s13
 80261d4:	e70f      	b.n	8025ff6 <__ieee754_powf+0x1ba>
 80261d6:	2401      	movs	r4, #1
 80261d8:	e75d      	b.n	8026096 <__ieee754_powf+0x25a>
 80261da:	bf00      	nop
 80261dc:	080024c8 	.word	0x080024c8
 80261e0:	00000000 	.word	0x00000000
 80261e4:	3f7ffff7 	.word	0x3f7ffff7
 80261e8:	7149f2ca 	.word	0x7149f2ca
 80261ec:	3f800007 	.word	0x3f800007
 80261f0:	3eaaaaab 	.word	0x3eaaaaab
 80261f4:	3fb8aa3b 	.word	0x3fb8aa3b
 80261f8:	36eca570 	.word	0x36eca570
 80261fc:	3fb8aa00 	.word	0x3fb8aa00
 8026200:	4b800000 	.word	0x4b800000
 8026204:	001cc471 	.word	0x001cc471
 8026208:	005db3d6 	.word	0x005db3d6
 802620c:	080024cc 	.word	0x080024cc
 8026210:	fffff000 	.word	0xfffff000
 8026214:	3e6c3255 	.word	0x3e6c3255
 8026218:	3e53f142 	.word	0x3e53f142
 802621c:	3e8ba305 	.word	0x3e8ba305
 8026220:	3edb6db7 	.word	0x3edb6db7
 8026224:	3f19999a 	.word	0x3f19999a
 8026228:	3f76384f 	.word	0x3f76384f
 802622c:	3f763800 	.word	0x3f763800
 8026230:	369dc3a0 	.word	0x369dc3a0
 8026234:	080024dc 	.word	0x080024dc
 8026238:	080024d4 	.word	0x080024d4
 802623c:	3338aa3c 	.word	0x3338aa3c
 8026240:	f040 8092 	bne.w	8026368 <__ieee754_powf+0x52c>
 8026244:	ed5f 6a03 	vldr	s13, [pc, #-12]	; 802623c <__ieee754_powf+0x400>
 8026248:	ee37 7a67 	vsub.f32	s14, s14, s15
 802624c:	ee70 6aa6 	vadd.f32	s13, s1, s13
 8026250:	eef4 6ac7 	vcmpe.f32	s13, s14
 8026254:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8026258:	f73f aef6 	bgt.w	8026048 <__ieee754_powf+0x20c>
 802625c:	15db      	asrs	r3, r3, #23
 802625e:	f1a3 007e 	sub.w	r0, r3, #126	; 0x7e
 8026262:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8026266:	4103      	asrs	r3, r0
 8026268:	4423      	add	r3, r4
 802626a:	4949      	ldr	r1, [pc, #292]	; (8026390 <__ieee754_powf+0x554>)
 802626c:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8026270:	3a7f      	subs	r2, #127	; 0x7f
 8026272:	4111      	asrs	r1, r2
 8026274:	ea23 0101 	bic.w	r1, r3, r1
 8026278:	ee07 1a10 	vmov	s14, r1
 802627c:	f3c3 0016 	ubfx	r0, r3, #0, #23
 8026280:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8026284:	f1c2 0217 	rsb	r2, r2, #23
 8026288:	4110      	asrs	r0, r2
 802628a:	2c00      	cmp	r4, #0
 802628c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8026290:	bfb8      	it	lt
 8026292:	4240      	neglt	r0, r0
 8026294:	ee37 7aa0 	vadd.f32	s14, s15, s1
 8026298:	eddf 6a3e 	vldr	s13, [pc, #248]	; 8026394 <__ieee754_powf+0x558>
 802629c:	ee17 3a10 	vmov	r3, s14
 80262a0:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 80262a4:	f023 030f 	bic.w	r3, r3, #15
 80262a8:	ee07 3a10 	vmov	s14, r3
 80262ac:	ee77 7a67 	vsub.f32	s15, s14, s15
 80262b0:	ee70 0ae7 	vsub.f32	s1, s1, s15
 80262b4:	eddf 7a38 	vldr	s15, [pc, #224]	; 8026398 <__ieee754_powf+0x55c>
 80262b8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80262bc:	eee0 7aa6 	vfma.f32	s15, s1, s13
 80262c0:	eddf 6a36 	vldr	s13, [pc, #216]	; 802639c <__ieee754_powf+0x560>
 80262c4:	eeb0 0a67 	vmov.f32	s0, s15
 80262c8:	eea7 0a26 	vfma.f32	s0, s14, s13
 80262cc:	eeb0 6a40 	vmov.f32	s12, s0
 80262d0:	eea7 6a66 	vfms.f32	s12, s14, s13
 80262d4:	ee20 7a00 	vmul.f32	s14, s0, s0
 80262d8:	ee77 7ac6 	vsub.f32	s15, s15, s12
 80262dc:	eddf 6a30 	vldr	s13, [pc, #192]	; 80263a0 <__ieee754_powf+0x564>
 80262e0:	ed9f 6a30 	vldr	s12, [pc, #192]	; 80263a4 <__ieee754_powf+0x568>
 80262e4:	eea7 6a26 	vfma.f32	s12, s14, s13
 80262e8:	eddf 6a2f 	vldr	s13, [pc, #188]	; 80263a8 <__ieee754_powf+0x56c>
 80262ec:	eee6 6a07 	vfma.f32	s13, s12, s14
 80262f0:	ed9f 6a2e 	vldr	s12, [pc, #184]	; 80263ac <__ieee754_powf+0x570>
 80262f4:	eea6 6a87 	vfma.f32	s12, s13, s14
 80262f8:	eddf 6a2d 	vldr	s13, [pc, #180]	; 80263b0 <__ieee754_powf+0x574>
 80262fc:	eee6 6a07 	vfma.f32	s13, s12, s14
 8026300:	eeb0 6a40 	vmov.f32	s12, s0
 8026304:	eea6 6ac7 	vfms.f32	s12, s13, s14
 8026308:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 802630c:	eeb0 7a46 	vmov.f32	s14, s12
 8026310:	ee77 6a66 	vsub.f32	s13, s14, s13
 8026314:	ee20 6a06 	vmul.f32	s12, s0, s12
 8026318:	eee0 7a27 	vfma.f32	s15, s0, s15
 802631c:	ee86 7a26 	vdiv.f32	s14, s12, s13
 8026320:	ee77 7a67 	vsub.f32	s15, s14, s15
 8026324:	ee37 0ac0 	vsub.f32	s0, s15, s0
 8026328:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 802632c:	ee37 0ac0 	vsub.f32	s0, s15, s0
 8026330:	ee10 3a10 	vmov	r3, s0
 8026334:	eb03 53c0 	add.w	r3, r3, r0, lsl #23
 8026338:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 802633c:	da1a      	bge.n	8026374 <__ieee754_powf+0x538>
 802633e:	f000 f8b7 	bl	80264b0 <scalbnf>
 8026342:	ee20 0a08 	vmul.f32	s0, s0, s16
 8026346:	e5cd      	b.n	8025ee4 <__ieee754_powf+0xa8>
 8026348:	4a1a      	ldr	r2, [pc, #104]	; (80263b4 <__ieee754_powf+0x578>)
 802634a:	4293      	cmp	r3, r2
 802634c:	dd02      	ble.n	8026354 <__ieee754_powf+0x518>
 802634e:	eddf 7a1a 	vldr	s15, [pc, #104]	; 80263b8 <__ieee754_powf+0x57c>
 8026352:	e67b      	b.n	802604c <__ieee754_powf+0x210>
 8026354:	d108      	bne.n	8026368 <__ieee754_powf+0x52c>
 8026356:	ee37 7a67 	vsub.f32	s14, s14, s15
 802635a:	eeb4 7ae0 	vcmpe.f32	s14, s1
 802635e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8026362:	f6ff af7b 	blt.w	802625c <__ieee754_powf+0x420>
 8026366:	e7f2      	b.n	802634e <__ieee754_powf+0x512>
 8026368:	f1b3 5f7c 	cmp.w	r3, #1056964608	; 0x3f000000
 802636c:	f73f af76 	bgt.w	802625c <__ieee754_powf+0x420>
 8026370:	2000      	movs	r0, #0
 8026372:	e78f      	b.n	8026294 <__ieee754_powf+0x458>
 8026374:	ee00 3a10 	vmov	s0, r3
 8026378:	e7e3      	b.n	8026342 <__ieee754_powf+0x506>
 802637a:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 802637e:	e5b1      	b.n	8025ee4 <__ieee754_powf+0xa8>
 8026380:	eeb0 0a68 	vmov.f32	s0, s17
 8026384:	e5ae      	b.n	8025ee4 <__ieee754_powf+0xa8>
 8026386:	eeb0 0a48 	vmov.f32	s0, s16
 802638a:	e5ab      	b.n	8025ee4 <__ieee754_powf+0xa8>
 802638c:	2600      	movs	r6, #0
 802638e:	e590      	b.n	8025eb2 <__ieee754_powf+0x76>
 8026390:	007fffff 	.word	0x007fffff
 8026394:	3f317218 	.word	0x3f317218
 8026398:	35bfbe8c 	.word	0x35bfbe8c
 802639c:	3f317200 	.word	0x3f317200
 80263a0:	3331bb4c 	.word	0x3331bb4c
 80263a4:	b5ddea0e 	.word	0xb5ddea0e
 80263a8:	388ab355 	.word	0x388ab355
 80263ac:	bb360b61 	.word	0xbb360b61
 80263b0:	3e2aaaab 	.word	0x3e2aaaab
 80263b4:	43160000 	.word	0x43160000
 80263b8:	0da24260 	.word	0x0da24260

080263bc <__ieee754_sqrtf>:
 80263bc:	eeb1 0ac0 	vsqrt.f32	s0, s0
 80263c0:	4770      	bx	lr

080263c2 <fabsf>:
 80263c2:	ee10 3a10 	vmov	r3, s0
 80263c6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80263ca:	ee00 3a10 	vmov	s0, r3
 80263ce:	4770      	bx	lr

080263d0 <finitef>:
 80263d0:	b082      	sub	sp, #8
 80263d2:	ed8d 0a01 	vstr	s0, [sp, #4]
 80263d6:	9801      	ldr	r0, [sp, #4]
 80263d8:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 80263dc:	f1b0 4fff 	cmp.w	r0, #2139095040	; 0x7f800000
 80263e0:	bfac      	ite	ge
 80263e2:	2000      	movge	r0, #0
 80263e4:	2001      	movlt	r0, #1
 80263e6:	b002      	add	sp, #8
 80263e8:	4770      	bx	lr
	...

080263ec <nanf>:
 80263ec:	ed9f 0a01 	vldr	s0, [pc, #4]	; 80263f4 <nanf+0x8>
 80263f0:	4770      	bx	lr
 80263f2:	bf00      	nop
 80263f4:	7fc00000 	.word	0x7fc00000

080263f8 <rintf>:
 80263f8:	ee10 2a10 	vmov	r2, s0
 80263fc:	b513      	push	{r0, r1, r4, lr}
 80263fe:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 8026402:	397f      	subs	r1, #127	; 0x7f
 8026404:	2916      	cmp	r1, #22
 8026406:	f022 4300 	bic.w	r3, r2, #2147483648	; 0x80000000
 802640a:	dc47      	bgt.n	802649c <rintf+0xa4>
 802640c:	b32b      	cbz	r3, 802645a <rintf+0x62>
 802640e:	2900      	cmp	r1, #0
 8026410:	ee10 3a10 	vmov	r3, s0
 8026414:	ea4f 70d2 	mov.w	r0, r2, lsr #31
 8026418:	da21      	bge.n	802645e <rintf+0x66>
 802641a:	f3c2 0316 	ubfx	r3, r2, #0, #23
 802641e:	425b      	negs	r3, r3
 8026420:	4921      	ldr	r1, [pc, #132]	; (80264a8 <rintf+0xb0>)
 8026422:	0a5b      	lsrs	r3, r3, #9
 8026424:	0d12      	lsrs	r2, r2, #20
 8026426:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 802642a:	0512      	lsls	r2, r2, #20
 802642c:	4313      	orrs	r3, r2
 802642e:	eb01 0180 	add.w	r1, r1, r0, lsl #2
 8026432:	ee07 3a90 	vmov	s15, r3
 8026436:	edd1 6a00 	vldr	s13, [r1]
 802643a:	ee36 7aa7 	vadd.f32	s14, s13, s15
 802643e:	ed8d 7a01 	vstr	s14, [sp, #4]
 8026442:	eddd 7a01 	vldr	s15, [sp, #4]
 8026446:	ee77 7ae6 	vsub.f32	s15, s15, s13
 802644a:	ee17 3a90 	vmov	r3, s15
 802644e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8026452:	ea43 73c0 	orr.w	r3, r3, r0, lsl #31
 8026456:	ee00 3a10 	vmov	s0, r3
 802645a:	b002      	add	sp, #8
 802645c:	bd10      	pop	{r4, pc}
 802645e:	4a13      	ldr	r2, [pc, #76]	; (80264ac <rintf+0xb4>)
 8026460:	410a      	asrs	r2, r1
 8026462:	4213      	tst	r3, r2
 8026464:	d0f9      	beq.n	802645a <rintf+0x62>
 8026466:	0854      	lsrs	r4, r2, #1
 8026468:	ea13 0252 	ands.w	r2, r3, r2, lsr #1
 802646c:	d006      	beq.n	802647c <rintf+0x84>
 802646e:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8026472:	ea23 0304 	bic.w	r3, r3, r4
 8026476:	fa42 f101 	asr.w	r1, r2, r1
 802647a:	430b      	orrs	r3, r1
 802647c:	4a0a      	ldr	r2, [pc, #40]	; (80264a8 <rintf+0xb0>)
 802647e:	eb02 0080 	add.w	r0, r2, r0, lsl #2
 8026482:	ed90 7a00 	vldr	s14, [r0]
 8026486:	ee07 3a90 	vmov	s15, r3
 802648a:	ee77 7a27 	vadd.f32	s15, s14, s15
 802648e:	edcd 7a01 	vstr	s15, [sp, #4]
 8026492:	ed9d 0a01 	vldr	s0, [sp, #4]
 8026496:	ee30 0a47 	vsub.f32	s0, s0, s14
 802649a:	e7de      	b.n	802645a <rintf+0x62>
 802649c:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 80264a0:	d3db      	bcc.n	802645a <rintf+0x62>
 80264a2:	ee30 0a00 	vadd.f32	s0, s0, s0
 80264a6:	e7d8      	b.n	802645a <rintf+0x62>
 80264a8:	080024e4 	.word	0x080024e4
 80264ac:	007fffff 	.word	0x007fffff

080264b0 <scalbnf>:
 80264b0:	ee10 3a10 	vmov	r3, s0
 80264b4:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
 80264b8:	d025      	beq.n	8026506 <scalbnf+0x56>
 80264ba:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 80264be:	d302      	bcc.n	80264c6 <scalbnf+0x16>
 80264c0:	ee30 0a00 	vadd.f32	s0, s0, s0
 80264c4:	4770      	bx	lr
 80264c6:	f013 4fff 	tst.w	r3, #2139095040	; 0x7f800000
 80264ca:	d122      	bne.n	8026512 <scalbnf+0x62>
 80264cc:	4b2a      	ldr	r3, [pc, #168]	; (8026578 <scalbnf+0xc8>)
 80264ce:	eddf 7a2b 	vldr	s15, [pc, #172]	; 802657c <scalbnf+0xcc>
 80264d2:	4298      	cmp	r0, r3
 80264d4:	ee20 0a27 	vmul.f32	s0, s0, s15
 80264d8:	db16      	blt.n	8026508 <scalbnf+0x58>
 80264da:	ee10 3a10 	vmov	r3, s0
 80264de:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 80264e2:	3a19      	subs	r2, #25
 80264e4:	4402      	add	r2, r0
 80264e6:	2afe      	cmp	r2, #254	; 0xfe
 80264e8:	dd15      	ble.n	8026516 <scalbnf+0x66>
 80264ea:	ee10 3a10 	vmov	r3, s0
 80264ee:	eddf 7a24 	vldr	s15, [pc, #144]	; 8026580 <scalbnf+0xd0>
 80264f2:	eddf 6a24 	vldr	s13, [pc, #144]	; 8026584 <scalbnf+0xd4>
 80264f6:	2b00      	cmp	r3, #0
 80264f8:	eeb0 7a67 	vmov.f32	s14, s15
 80264fc:	bfb8      	it	lt
 80264fe:	eef0 7a66 	vmovlt.f32	s15, s13
 8026502:	ee27 0a27 	vmul.f32	s0, s14, s15
 8026506:	4770      	bx	lr
 8026508:	eddf 7a1f 	vldr	s15, [pc, #124]	; 8026588 <scalbnf+0xd8>
 802650c:	ee20 0a27 	vmul.f32	s0, s0, s15
 8026510:	4770      	bx	lr
 8026512:	0dd2      	lsrs	r2, r2, #23
 8026514:	e7e6      	b.n	80264e4 <scalbnf+0x34>
 8026516:	2a00      	cmp	r2, #0
 8026518:	dd06      	ble.n	8026528 <scalbnf+0x78>
 802651a:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 802651e:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 8026522:	ee00 3a10 	vmov	s0, r3
 8026526:	4770      	bx	lr
 8026528:	f112 0f16 	cmn.w	r2, #22
 802652c:	da1a      	bge.n	8026564 <scalbnf+0xb4>
 802652e:	f24c 3350 	movw	r3, #50000	; 0xc350
 8026532:	4298      	cmp	r0, r3
 8026534:	ee10 3a10 	vmov	r3, s0
 8026538:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 802653c:	dd0a      	ble.n	8026554 <scalbnf+0xa4>
 802653e:	ed9f 0a10 	vldr	s0, [pc, #64]	; 8026580 <scalbnf+0xd0>
 8026542:	ed9f 7a10 	vldr	s14, [pc, #64]	; 8026584 <scalbnf+0xd4>
 8026546:	eef0 7a40 	vmov.f32	s15, s0
 802654a:	2b00      	cmp	r3, #0
 802654c:	bf18      	it	ne
 802654e:	eeb0 0a47 	vmovne.f32	s0, s14
 8026552:	e7db      	b.n	802650c <scalbnf+0x5c>
 8026554:	ed9f 0a0c 	vldr	s0, [pc, #48]	; 8026588 <scalbnf+0xd8>
 8026558:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 802658c <scalbnf+0xdc>
 802655c:	eef0 7a40 	vmov.f32	s15, s0
 8026560:	2b00      	cmp	r3, #0
 8026562:	e7f3      	b.n	802654c <scalbnf+0x9c>
 8026564:	3219      	adds	r2, #25
 8026566:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 802656a:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 802656e:	eddf 7a08 	vldr	s15, [pc, #32]	; 8026590 <scalbnf+0xe0>
 8026572:	ee07 3a10 	vmov	s14, r3
 8026576:	e7c4      	b.n	8026502 <scalbnf+0x52>
 8026578:	ffff3cb0 	.word	0xffff3cb0
 802657c:	4c000000 	.word	0x4c000000
 8026580:	7149f2ca 	.word	0x7149f2ca
 8026584:	f149f2ca 	.word	0xf149f2ca
 8026588:	0da24260 	.word	0x0da24260
 802658c:	8da24260 	.word	0x8da24260
 8026590:	33000000 	.word	0x33000000

08026594 <_init>:
 8026594:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8026596:	bf00      	nop
 8026598:	bcf8      	pop	{r3, r4, r5, r6, r7}
 802659a:	bc08      	pop	{r3}
 802659c:	469e      	mov	lr, r3
 802659e:	4770      	bx	lr

080265a0 <_fini>:
 80265a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80265a2:	bf00      	nop
 80265a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80265a6:	bc08      	pop	{r3}
 80265a8:	469e      	mov	lr, r3
 80265aa:	4770      	bx	lr
